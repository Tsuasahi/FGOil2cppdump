
// Namespace: System.Diagnostics
[MonoTODOAttribute] // RVA: 0xC31010 Offset: 0xC31010 VA: 0xC31010
[ComVisibleAttribute] // RVA: 0xC31010 Offset: 0xC31010 VA: 0xC31010
[Serializable]
public class StackFrame // TypeDefIndex: 242
{
	// Fields
	public const int OFFSET_UNKNOWN = -1;
	private int ilOffset; // 0x10
	private int nativeOffset; // 0x14
	private MethodBase methodBase; // 0x18
	private string fileName; // 0x20
	private int lineNumber; // 0x28
	private int columnNumber; // 0x2C
	private string internalMethodName; // 0x30

	// Methods

	// RVA: 0x1176B14 Offset: 0x1176B14 VA: 0x1176B14
	public void .ctor() { }

	// RVA: 0x1176B78 Offset: 0x1176B78 VA: 0x1176B78
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x1176B70 Offset: 0x1176B70 VA: 0x1176B70
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column) { }

	// RVA: 0x1176BE4 Offset: 0x1176BE4 VA: 0x1176BE4 Slot: 4
	public virtual int GetFileLineNumber() { }

	// RVA: 0x1176BEC Offset: 0x1176BEC VA: 0x1176BEC Slot: 5
	public virtual string GetFileName() { }

	// RVA: 0x1176BF4 Offset: 0x1176BF4 VA: 0x1176BF4
	internal string GetSecureFileName() { }

	// RVA: 0x1176CD0 Offset: 0x1176CD0 VA: 0x1176CD0 Slot: 6
	public virtual int GetILOffset() { }

	// RVA: 0x1176CD8 Offset: 0x1176CD8 VA: 0x1176CD8 Slot: 7
	public virtual MethodBase GetMethod() { }

	// RVA: 0x1176CE0 Offset: 0x1176CE0 VA: 0x1176CE0 Slot: 8
	public virtual int GetNativeOffset() { }

	// RVA: 0x1176CE8 Offset: 0x1176CE8 VA: 0x1176CE8
	internal string GetInternalMethodName() { }

	// RVA: 0x1176CF0 Offset: 0x1176CF0 VA: 0x1176CF0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Diagnostics
[MonoTODOAttribute] // RVA: 0xC31060 Offset: 0xC31060 VA: 0xC31060
[ComVisibleAttribute] // RVA: 0xC31060 Offset: 0xC31060 VA: 0xC31060
[Serializable]
public class StackTrace // TypeDefIndex: 243
{
	// Fields
	public const int METHODS_TO_SKIP = 0;
	private StackFrame[] frames; // 0x10
	private bool debug_info; // 0x18

	// Properties
	public virtual int FrameCount { get; }

	// Methods

	// RVA: 0x1176F80 Offset: 0x1176F80 VA: 0x1176F80
	public void .ctor() { }

	// RVA: 0x11771EC Offset: 0x11771EC VA: 0x11771EC
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x117722C Offset: 0x117722C VA: 0x117722C
	public void .ctor(Exception e, bool fNeedFileInfo) { }

	// RVA: 0x117723C Offset: 0x117723C VA: 0x117723C
	public void .ctor(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x1177248 Offset: 0x1177248 VA: 0x1177248
	internal void .ctor(Exception e, int skipFrames, bool fNeedFileInfo, bool returnNativeFrames) { }

	// RVA: 0x1176FB0 Offset: 0x1176FB0 VA: 0x1176FB0
	private void init_frames(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x11775B8 Offset: 0x11775B8 VA: 0x11775B8
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x11775C0 Offset: 0x11775C0 VA: 0x11775C0 Slot: 4
	public virtual int get_FrameCount() { }

	// RVA: 0x11775D8 Offset: 0x11775D8 VA: 0x11775D8 Slot: 5
	public virtual StackFrame GetFrame(int index) { }

	// RVA: 0x1177654 Offset: 0x1177654 VA: 0x1177654 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC310B0 Offset: 0xC310B0 VA: 0xC310B0
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 244
{
	// Fields
	private bool m_isReadOnly; // 0x10
	internal int twoDigitYearMax; // 0x14
	internal string[] M_AbbrEraNames; // 0x18
	internal string[] M_EraNames; // 0x20

	// Properties
	public abstract int[] Eras { get; }
	internal string[] EraNames { get; }

	// Methods

	// RVA: 0x118070C Offset: 0x118070C VA: 0x118070C
	protected void .ctor() { }

	// RVA: 0x1180738 Offset: 0x1180738 VA: 0x1180738
	internal string M_ValidValues(object a, object b) { }

	// RVA: 0x11807EC Offset: 0x11807EC VA: 0x11807EC
	internal void M_ArgumentInRange(string param, int arg, int a, int b) { }

	// RVA: 0x11808D8 Offset: 0x11808D8 VA: 0x11808D8
	internal void M_CheckHMSM(int hour, int minute, int second, int milliseconds) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int[] get_Eras();

	[ComVisibleAttribute] // RVA: 0xC3892C Offset: 0xC3892C VA: 0xC3892C
	// RVA: 0x11809A4 Offset: 0x11809A4 VA: 0x11809A4 Slot: 6
	public virtual object Clone() { }

	// RVA: 0x1180A80 Offset: 0x1180A80 VA: 0x1180A80
	internal void CheckReadOnly() { }

	// RVA: 0x1180B0C Offset: 0x1180B0C VA: 0x1180B0C Slot: 7
	internal virtual void M_CheckYE(int year, ref int era) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetDayOfMonth(DateTime time);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract DayOfWeek GetDayOfWeek(DateTime time);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int GetDaysInMonth(int year, int month, int era);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract int GetEra(DateTime time);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract int GetMonth(DateTime time);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract int GetYear(DateTime time);

	// RVA: 0x1180B10 Offset: 0x1180B10 VA: 0x1180B10 Slot: 14
	public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);

	// RVA: 0x1180B40 Offset: 0x1180B40 VA: 0x1180B40
	internal string[] get_EraNames() { }
}

// Namespace: System.Globalization
internal class CCMath // TypeDefIndex: 245
{
	// Methods

	// RVA: 0x1180274 Offset: 0x1180274 VA: 0x1180274
	public static int div(int x, int y) { }

	// RVA: 0x118013C Offset: 0x118013C VA: 0x118013C
	public static int mod(int x, int y) { }

	// RVA: 0x1180324 Offset: 0x1180324 VA: 0x1180324
	public static int div_mod(out int remainder, int x, int y) { }
}

// Namespace: System.Globalization
internal class CCFixed // TypeDefIndex: 246
{
	// Methods

	// RVA: 0x117FFD0 Offset: 0x117FFD0 VA: 0x117FFD0
	public static DateTime ToDateTime(int date) { }

	// RVA: 0x1180014 Offset: 0x1180014 VA: 0x1180014
	public static DateTime ToDateTime(int date, int hour, int minute, int second, double milliseconds) { }

	// RVA: 0x11800D0 Offset: 0x11800D0 VA: 0x11800D0
	public static int FromDateTime(DateTime time) { }

	// RVA: 0x1180120 Offset: 0x1180120 VA: 0x1180120
	public static DayOfWeek day_of_week(int date) { }
}

// Namespace: System.Globalization
internal class CCGregorianCalendar // TypeDefIndex: 247
{
	// Methods

	// RVA: 0x1180154 Offset: 0x1180154 VA: 0x1180154
	public static bool is_leap_year(int year) { }

	// RVA: 0x11801AC Offset: 0x11801AC VA: 0x11801AC
	public static int fixed_from_dmy(int day, int month, int year) { }

	// RVA: 0x1180288 Offset: 0x1180288 VA: 0x1180288
	public static int year_from_fixed(int date) { }

	// RVA: 0x1180344 Offset: 0x1180344 VA: 0x1180344
	public static void my_from_fixed(out int month, out int year, int date) { }

	// RVA: 0x1180480 Offset: 0x1180480 VA: 0x1180480
	public static void dmy_from_fixed(out int day, out int month, out int year, int date) { }

	// RVA: 0x11804DC Offset: 0x11804DC VA: 0x11804DC
	public static int month_from_fixed(int date) { }

	// RVA: 0x1180514 Offset: 0x1180514 VA: 0x1180514
	public static int day_from_fixed(int date) { }

	// RVA: 0x1180560 Offset: 0x1180560 VA: 0x1180560
	public static int GetDayOfMonth(DateTime time) { }

	// RVA: 0x11805B4 Offset: 0x11805B4 VA: 0x11805B4
	public static int GetDaysInMonth(int year, int month) { }

	// RVA: 0x1180600 Offset: 0x1180600 VA: 0x1180600
	public static int GetMonth(DateTime time) { }

	// RVA: 0x1180668 Offset: 0x1180668 VA: 0x1180668
	public static int GetYear(DateTime time) { }

	// RVA: 0x11806BC Offset: 0x11806BC VA: 0x11806BC
	public static DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int milliseconds) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC310C4 Offset: 0xC310C4 VA: 0xC310C4
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 248
{
	// Fields
	private static readonly bool useManagedCollation; // 0x0
	private int culture; // 0x10
	private string icu_name; // 0x18
	private int win32LCID; // 0x20
	private string m_name; // 0x28
	private SimpleCollator collator; // 0x30
	private static Hashtable collators; // 0x8
	private static object monitor; // 0x10

	// Properties
	internal static bool UseManagedCollation { get; }
	public int LCID { get; }

	// Methods

	// RVA: 0x1180C8C Offset: 0x1180C8C VA: 0x1180C8C
	private void .ctor() { }

	// RVA: 0x1180C94 Offset: 0x1180C94 VA: 0x1180C94
	internal void .ctor(CultureInfo ci) { }

	// RVA: 0x11810E4 Offset: 0x11810E4 VA: 0x11810E4
	private static void .cctor() { }

	// RVA: 0x11811E4 Offset: 0x11811E4 VA: 0x11811E4 Slot: 4
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x118103C Offset: 0x118103C VA: 0x118103C
	internal static bool get_UseManagedCollation() { }

	// RVA: 0x11810E0 Offset: 0x11810E0 VA: 0x11810E0
	private void construct_compareinfo(string locale) { }

	// RVA: 0x1181334 Offset: 0x1181334 VA: 0x1181334
	private void free_internal_collator() { }

	// RVA: 0x1181338 Offset: 0x1181338 VA: 0x1181338
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x118133C Offset: 0x118133C VA: 0x118133C
	private void assign_sortkey(object key, string source, CompareOptions options) { }

	// RVA: 0x1181340 Offset: 0x1181340 VA: 0x1181340
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first) { }

	// RVA: 0x1181348 Offset: 0x1181348 VA: 0x1181348 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11813BC Offset: 0x11813BC VA: 0x11813BC
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x118143C Offset: 0x118143C VA: 0x118143C
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x118153C Offset: 0x118153C VA: 0x118153C Slot: 5
	public virtual int Compare(string string1, string string2) { }

	// RVA: 0x118154C Offset: 0x118154C VA: 0x118154C Slot: 6
	public virtual int Compare(string string1, string string2, CompareOptions options) { }

	// RVA: 0x1181680 Offset: 0x1181680 VA: 0x1181680 Slot: 7
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x1181900 Offset: 0x1181900 VA: 0x1181900 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x11819AC Offset: 0x11819AC VA: 0x11819AC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x11819BC Offset: 0x11819BC VA: 0x11819BC Slot: 8
	public virtual SortKey GetSortKey(string source, CompareOptions options) { }

	// RVA: 0x1181B60 Offset: 0x1181B60 VA: 0x1181B60 Slot: 9
	public virtual int IndexOf(string source, string value, CompareOptions options) { }

	// RVA: 0x1181BC8 Offset: 0x1181BC8 VA: 0x1181BC8 Slot: 10
	public virtual int IndexOf(string source, string value, int startIndex, int count) { }

	// RVA: 0x1181BD8 Offset: 0x1181BD8 VA: 0x1181BD8
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x1181C88 Offset: 0x1181C88 VA: 0x1181C88
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x1181D84 Offset: 0x1181D84 VA: 0x1181D84 Slot: 11
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x1181F4C Offset: 0x1181F4C VA: 0x1181F4C Slot: 12
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { }

	// RVA: 0x11820FC Offset: 0x11820FC VA: 0x11820FC Slot: 13
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { }

	// RVA: 0x11822D8 Offset: 0x11822D8 VA: 0x11822D8 Slot: 14
	public virtual int LastIndexOf(string source, string value, CompareOptions options) { }

	// RVA: 0x1182378 Offset: 0x1182378 VA: 0x1182378 Slot: 15
	public virtual int LastIndexOf(string source, string value, int startIndex, int count) { }

	// RVA: 0x118238C Offset: 0x118238C VA: 0x118238C Slot: 16
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x1182544 Offset: 0x1182544 VA: 0x1182544 Slot: 3
	public override string ToString() { }

	// RVA: 0x11819B4 Offset: 0x11819B4 VA: 0x11819B4
	public int get_LCID() { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0xC310D8 Offset: 0xC310D8 VA: 0xC310D8
[ComVisibleAttribute] // RVA: 0xC310D8 Offset: 0xC310D8 VA: 0xC310D8
[Serializable]
public enum CompareOptions // TypeDefIndex: 249
{
	// Fields
	public int value__; // 0x0
	public const CompareOptions None = 0;
	public const CompareOptions IgnoreCase = 1;
	public const CompareOptions IgnoreNonSpace = 2;
	public const CompareOptions IgnoreSymbols = 4;
	public const CompareOptions IgnoreKanaType = 8;
	public const CompareOptions IgnoreWidth = 16;
	public const CompareOptions StringSort = 536870912;
	public const CompareOptions Ordinal = 1073741824;
	public const CompareOptions OrdinalIgnoreCase = 268435456;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC31114 Offset: 0xC31114 VA: 0xC31114
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 250
{
	// Fields
	private const int NumOptionalCalendars = 5;
	private const int GregorianTypeMask = 16777215;
	private const int CalendarTypeBits = 24;
	private const int InvariantCultureId = 127;
	private static CultureInfo invariant_culture_info; // 0x0
	private static object shared_table_lock; // 0x8
	internal static int BootstrapCultureID; // 0x10
	private bool m_isReadOnly; // 0x10
	private int cultureID; // 0x14
	private int parent_lcid; // 0x18
	private int specific_lcid; // 0x1C
	private int datetime_index; // 0x20
	private int number_index; // 0x24
	private bool m_useUserOverride; // 0x28
	private NumberFormatInfo numInfo; // 0x30
	private DateTimeFormatInfo dateTimeInfo; // 0x38
	private TextInfo textInfo; // 0x40
	private string m_name; // 0x48
	private string displayname; // 0x50
	private string englishname; // 0x58
	private string nativename; // 0x60
	private string iso3lang; // 0x68
	private string iso2lang; // 0x70
	private string icu_name; // 0x78
	private string win3lang; // 0x80
	private string territory; // 0x88
	private CompareInfo compareInfo; // 0x90
	private readonly int* calendar_data; // 0x98
	private readonly void* textinfo_data; // 0xA0
	private Calendar[] optional_calendars; // 0xA8
	private CultureInfo parent_culture; // 0xB0
	private int m_dataItem; // 0xB8
	private Calendar calendar; // 0xC0
	private bool constructed; // 0xC8
	internal byte[] cached_serialized_form; // 0xD0
	private static readonly string MSG_READONLY; // 0x18
	private static Hashtable shared_by_number; // 0x20
	private static Hashtable shared_by_name; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC3763C Offset: 0xC3763C VA: 0xC3763C
	private static Dictionary<string, int> <>f__switch$map19; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC3764C Offset: 0xC3764C VA: 0xC3764C
	private static Dictionary<string, int> <>f__switch$map1A; // 0x38

	// Properties
	public static CultureInfo InvariantCulture { get; }
	public static CultureInfo CurrentCulture { get; }
	public static CultureInfo CurrentUICulture { get; }
	internal string Territory { get; }
	public virtual int LCID { get; }
	public virtual string Name { get; }
	public virtual CultureInfo Parent { get; }
	public virtual TextInfo TextInfo { get; }
	internal string IcuName { get; }
	public virtual CompareInfo CompareInfo { get; }
	public virtual bool IsNeutralCulture { get; }
	public virtual NumberFormatInfo NumberFormat { get; set; }
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
	public virtual string DisplayName { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x1181328 Offset: 0x1181328 VA: 0x1181328
	public void .ctor(int culture) { }

	// RVA: 0x11825E8 Offset: 0x11825E8 VA: 0x11825E8
	public void .ctor(int culture, bool useUserOverride) { }

	// RVA: 0x11825F4 Offset: 0x11825F4 VA: 0x11825F4
	private void .ctor(int culture, bool useUserOverride, bool read_only) { }

	// RVA: 0x11829E0 Offset: 0x11829E0 VA: 0x11829E0
	public void .ctor(string name) { }

	// RVA: 0x11829EC Offset: 0x11829EC VA: 0x11829EC
	public void .ctor(string name, bool useUserOverride) { }

	// RVA: 0x11829F8 Offset: 0x11829F8 VA: 0x11829F8
	private void .ctor(string name, bool useUserOverride, bool read_only) { }

	// RVA: 0x1182D74 Offset: 0x1182D74 VA: 0x1182D74
	private void .ctor() { }

	// RVA: 0x1182DA0 Offset: 0x1182DA0 VA: 0x1182DA0
	private static void .cctor() { }

	// RVA: 0x1170B70 Offset: 0x1170B70 VA: 0x1170B70
	public static CultureInfo get_InvariantCulture() { }

	// RVA: 0x1182E48 Offset: 0x1182E48 VA: 0x1182E48
	public static CultureInfo get_CurrentCulture() { }

	// RVA: 0x1182EC0 Offset: 0x1182EC0 VA: 0x1182EC0
	public static CultureInfo get_CurrentUICulture() { }

	// RVA: 0x1182F38 Offset: 0x1182F38 VA: 0x1182F38
	internal static CultureInfo ConstructCurrentCulture() { }

	// RVA: 0x1183080 Offset: 0x1183080 VA: 0x1183080
	internal static CultureInfo ConstructCurrentUICulture() { }

	// RVA: 0x11830DC Offset: 0x11830DC VA: 0x11830DC
	internal string get_Territory() { }

	// RVA: 0x11830E4 Offset: 0x11830E4 VA: 0x11830E4 Slot: 6
	public virtual int get_LCID() { }

	// RVA: 0x11830EC Offset: 0x11830EC VA: 0x11830EC Slot: 7
	public virtual string get_Name() { }

	// RVA: 0x11830F4 Offset: 0x11830F4 VA: 0x11830F4 Slot: 8
	public virtual CultureInfo get_Parent() { }

	// RVA: 0x118320C Offset: 0x118320C VA: 0x118320C Slot: 9
	public virtual TextInfo get_TextInfo() { }

	// RVA: 0x11810A4 Offset: 0x11810A4 VA: 0x11810A4
	internal string get_IcuName() { }

	// RVA: 0x1183364 Offset: 0x1183364 VA: 0x1183364 Slot: 10
	public virtual object Clone() { }

	// RVA: 0x1183750 Offset: 0x1183750 VA: 0x1183750 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x11837FC Offset: 0x11837FC VA: 0x11837FC
	public static CultureInfo[] GetCultures(CultureTypes types) { }

	// RVA: 0x1183A14 Offset: 0x1183A14 VA: 0x1183A14 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1183A1C Offset: 0x1183A1C VA: 0x1183A1C Slot: 3
	public override string ToString() { }

	// RVA: 0x1183A24 Offset: 0x1183A24 VA: 0x1183A24 Slot: 11
	public virtual CompareInfo get_CompareInfo() { }

	// RVA: 0x1183B28 Offset: 0x1183B28 VA: 0x1183B28 Slot: 12
	public virtual bool get_IsNeutralCulture() { }

	// RVA: 0x1183B90 Offset: 0x1183B90 VA: 0x1183B90
	internal void CheckNeutral() { }

	// RVA: 0x1183C70 Offset: 0x1183C70 VA: 0x1183C70 Slot: 13
	public virtual NumberFormatInfo get_NumberFormat() { }

	// RVA: 0x1183DA8 Offset: 0x1183DA8 VA: 0x1183DA8 Slot: 14
	public virtual void set_NumberFormat(NumberFormatInfo value) { }

	// RVA: 0x1183EC4 Offset: 0x1183EC4 VA: 0x1183EC4 Slot: 15
	public virtual DateTimeFormatInfo get_DateTimeFormat() { }

	// RVA: 0x1184320 Offset: 0x1184320 VA: 0x1184320 Slot: 16
	public virtual void set_DateTimeFormat(DateTimeFormatInfo value) { }

	// RVA: 0x118443C Offset: 0x118443C VA: 0x118443C Slot: 17
	public virtual string get_DisplayName() { }

	// RVA: 0x1184478 Offset: 0x1184478 VA: 0x1184478
	public bool get_IsReadOnly() { }

	// RVA: 0x1184480 Offset: 0x1184480 VA: 0x1184480 Slot: 18
	public virtual object GetFormat(Type formatType) { }

	// RVA: 0x11831E0 Offset: 0x11831E0 VA: 0x11831E0
	private void Construct() { }

	// RVA: 0x1182B90 Offset: 0x1182B90 VA: 0x1182B90
	private bool ConstructInternalLocaleFromName(string locale) { }

	// RVA: 0x11829DC Offset: 0x11829DC VA: 0x11829DC
	private bool ConstructInternalLocaleFromLcid(int lcid) { }

	// RVA: 0x118301C Offset: 0x118301C VA: 0x118301C
	private static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo ci) { }

	// RVA: 0x1184568 Offset: 0x1184568 VA: 0x1184568
	private bool construct_internal_locale_from_lcid(int lcid) { }

	// RVA: 0x118456C Offset: 0x118456C VA: 0x118456C
	private bool construct_internal_locale_from_name(string name) { }

	// RVA: 0x1184570 Offset: 0x1184570 VA: 0x1184570
	private static bool construct_internal_locale_from_current_locale(CultureInfo ci) { }

	// RVA: 0x1183A04 Offset: 0x1183A04 VA: 0x1183A04
	private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed) { }

	// RVA: 0x118422C Offset: 0x118422C VA: 0x118422C
	private void construct_datetime_format() { }

	// RVA: 0x1183DA4 Offset: 0x1183DA4 VA: 0x1183DA4
	private void construct_number_format() { }

	// RVA: 0x1182790 Offset: 0x1182790 VA: 0x1182790
	private void ConstructInvariant(bool read_only) { }

	// RVA: 0x11832DC Offset: 0x11832DC VA: 0x11832DC
	private TextInfo CreateTextInfo(bool readOnly) { }

	// RVA: 0x1184820 Offset: 0x1184820 VA: 0x1184820
	private static void insert_into_shared_tables(CultureInfo c) { }

	// RVA: 0x11849AC Offset: 0x11849AC VA: 0x11849AC
	public static CultureInfo GetCultureInfo(int culture) { }

	// RVA: 0x1184B90 Offset: 0x1184B90 VA: 0x1184B90
	public static CultureInfo GetCultureInfo(string name) { }

	// RVA: 0x1184D98 Offset: 0x1184D98 VA: 0x1184D98
	internal static CultureInfo CreateCulture(string name, bool reference) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0xC31128 Offset: 0xC31128 VA: 0xC31128
[ComVisibleAttribute] // RVA: 0xC31128 Offset: 0xC31128 VA: 0xC31128
[Serializable]
public enum CultureTypes // TypeDefIndex: 251
{
	// Fields
	public int value__; // 0x0
	public const CultureTypes NeutralCultures = 1;
	public const CultureTypes SpecificCultures = 2;
	public const CultureTypes InstalledWin32Cultures = 4;
	public const CultureTypes AllCultures = 7;
	public const CultureTypes UserCustomCulture = 8;
	public const CultureTypes ReplacementCultures = 16;
	public const CultureTypes WindowsOnlyCultures = 32;
	public const CultureTypes FrameworkCultures = 64;
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0xC31164 Offset: 0xC31164 VA: 0xC31164
internal enum DateTimeFormatFlags // TypeDefIndex: 252
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatFlags Unused = 0;
	public const DateTimeFormatFlags But = 1;
	public const DateTimeFormatFlags Serialized = 2;
	public const DateTimeFormatFlags By = 3;
	public const DateTimeFormatFlags Microsoft = 4;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC31174 Offset: 0xC31174 VA: 0xC31174
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 253
{
	// Fields
	private const string _RoundtripPattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss.fffffffK";
	private static readonly string MSG_READONLY; // 0x0
	private static readonly string MSG_ARRAYSIZE_MONTH; // 0x8
	private static readonly string MSG_ARRAYSIZE_DAY; // 0x10
	private static readonly string[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0x18
	private static readonly string[] INVARIANT_DAY_NAMES; // 0x20
	private static readonly string[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x28
	private static readonly string[] INVARIANT_MONTH_NAMES; // 0x30
	private static readonly string[] INVARIANT_SHORT_DAY_NAMES; // 0x38
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x40
	private bool m_isReadOnly; // 0x10
	private string amDesignator; // 0x18
	private string pmDesignator; // 0x20
	private string dateSeparator; // 0x28
	private string timeSeparator; // 0x30
	private string shortDatePattern; // 0x38
	private string longDatePattern; // 0x40
	private string shortTimePattern; // 0x48
	private string longTimePattern; // 0x50
	private string monthDayPattern; // 0x58
	private string yearMonthPattern; // 0x60
	private string fullDateTimePattern; // 0x68
	private string _RFC1123Pattern; // 0x70
	private string _SortableDateTimePattern; // 0x78
	private string _UniversalSortableDateTimePattern; // 0x80
	private int firstDayOfWeek; // 0x88
	private Calendar calendar; // 0x90
	private int calendarWeekRule; // 0x98
	private string[] abbreviatedDayNames; // 0xA0
	private string[] dayNames; // 0xA8
	private string[] monthNames; // 0xB0
	private string[] abbreviatedMonthNames; // 0xB8
	private string[] allShortDatePatterns; // 0xC0
	private string[] allLongDatePatterns; // 0xC8
	private string[] allShortTimePatterns; // 0xD0
	private string[] allLongTimePatterns; // 0xD8
	private string[] monthDayPatterns; // 0xE0
	private string[] yearMonthPatterns; // 0xE8
	private string[] shortDayNames; // 0xF0
	private int nDataItem; // 0xF8
	private bool m_useUserOverride; // 0xFC
	private bool m_isDefaultCalendar; // 0xFD
	private int CultureID; // 0x100
	private bool bUseCalendarInfo; // 0x104
	private string generalShortTimePattern; // 0x108
	private string generalLongTimePattern; // 0x110
	private string[] m_eraNames; // 0x118
	private string[] m_abbrevEraNames; // 0x120
	private string[] m_abbrevEnglishEraNames; // 0x128
	private string[] m_dateWords; // 0x130
	private int[] optionalCalendars; // 0x138
	private string[] m_superShortDayNames; // 0x140
	private string[] genitiveMonthNames; // 0x148
	private string[] m_genitiveAbbreviatedMonthNames; // 0x150
	private string[] leapYearMonthNames; // 0x158
	private DateTimeFormatFlags formatFlags; // 0x160
	private string m_name; // 0x168
	private string[] all_date_time_patterns; // 0x170

	// Properties
	public bool IsReadOnly { get; }
	internal string[] RawAbbreviatedDayNames { get; }
	internal string[] RawAbbreviatedMonthNames { get; }
	internal string[] RawDayNames { get; }
	internal string[] RawMonthNames { get; }
	public string AMDesignator { get; }
	public string PMDesignator { get; }
	public string DateSeparator { get; }
	public string TimeSeparator { get; }
	public string LongDatePattern { get; }
	public string ShortDatePattern { get; }
	public string ShortTimePattern { get; }
	public string LongTimePattern { get; }
	public string MonthDayPattern { get; }
	public string YearMonthPattern { get; }
	public string FullDateTimePattern { get; }
	public static DateTimeFormatInfo CurrentInfo { get; }
	public static DateTimeFormatInfo InvariantInfo { get; }
	public Calendar Calendar { get; set; }
	public string RFC1123Pattern { get; }
	internal string RoundtripPattern { get; }
	public string SortableDateTimePattern { get; }
	public string UniversalSortableDateTimePattern { get; }

	// Methods

	// RVA: 0x118404C Offset: 0x118404C VA: 0x118404C
	internal void .ctor(bool read_only) { }

	// RVA: 0x1184E34 Offset: 0x1184E34 VA: 0x1184E34
	public void .ctor() { }

	// RVA: 0x1184E3C Offset: 0x1184E3C VA: 0x1184E3C
	private static void .cctor() { }

	// RVA: 0x1185F00 Offset: 0x1185F00 VA: 0x1185F00
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { }

	// RVA: 0x1186110 Offset: 0x1186110 VA: 0x1186110
	public bool get_IsReadOnly() { }

	// RVA: 0x1186118 Offset: 0x1186118 VA: 0x1186118
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) { }

	// RVA: 0x1183690 Offset: 0x1183690 VA: 0x1183690 Slot: 4
	public object Clone() { }

	// RVA: 0x11861E4 Offset: 0x11861E4 VA: 0x11861E4 Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x1186214 Offset: 0x1186214 VA: 0x1186214
	public string GetAbbreviatedMonthName(int month) { }

	// RVA: 0x11862DC Offset: 0x11862DC VA: 0x11862DC
	public string GetEraName(int era) { }

	// RVA: 0x118640C Offset: 0x118640C VA: 0x118640C
	public string GetMonthName(int month) { }

	// RVA: 0x11864D4 Offset: 0x11864D4 VA: 0x11864D4
	internal string[] get_RawAbbreviatedDayNames() { }

	// RVA: 0x11864DC Offset: 0x11864DC VA: 0x11864DC
	internal string[] get_RawAbbreviatedMonthNames() { }

	// RVA: 0x11864E4 Offset: 0x11864E4 VA: 0x11864E4
	internal string[] get_RawDayNames() { }

	// RVA: 0x11864EC Offset: 0x11864EC VA: 0x11864EC
	internal string[] get_RawMonthNames() { }

	// RVA: 0x11864F4 Offset: 0x11864F4 VA: 0x11864F4
	public string get_AMDesignator() { }

	// RVA: 0x11864FC Offset: 0x11864FC VA: 0x11864FC
	public string get_PMDesignator() { }

	// RVA: 0x1186504 Offset: 0x1186504 VA: 0x1186504
	public string get_DateSeparator() { }

	// RVA: 0x118650C Offset: 0x118650C VA: 0x118650C
	public string get_TimeSeparator() { }

	// RVA: 0x1186514 Offset: 0x1186514 VA: 0x1186514
	public string get_LongDatePattern() { }

	// RVA: 0x118651C Offset: 0x118651C VA: 0x118651C
	public string get_ShortDatePattern() { }

	// RVA: 0x1186524 Offset: 0x1186524 VA: 0x1186524
	public string get_ShortTimePattern() { }

	// RVA: 0x118652C Offset: 0x118652C VA: 0x118652C
	public string get_LongTimePattern() { }

	// RVA: 0x1186534 Offset: 0x1186534 VA: 0x1186534
	public string get_MonthDayPattern() { }

	// RVA: 0x118653C Offset: 0x118653C VA: 0x118653C
	public string get_YearMonthPattern() { }

	// RVA: 0x1186544 Offset: 0x1186544 VA: 0x1186544
	public string get_FullDateTimePattern() { }

	// RVA: 0x1186078 Offset: 0x1186078 VA: 0x1186078
	public static DateTimeFormatInfo get_CurrentInfo() { }

	// RVA: 0x118460C Offset: 0x118460C VA: 0x118460C
	public static DateTimeFormatInfo get_InvariantInfo() { }

	// RVA: 0x11869AC Offset: 0x11869AC VA: 0x11869AC
	public Calendar get_Calendar() { }

	// RVA: 0x1184230 Offset: 0x1184230 VA: 0x1184230
	public void set_Calendar(Calendar value) { }

	// RVA: 0x11869B4 Offset: 0x11869B4 VA: 0x11869B4
	public string get_RFC1123Pattern() { }

	// RVA: 0x11869BC Offset: 0x11869BC VA: 0x11869BC
	internal string get_RoundtripPattern() { }

	// RVA: 0x1186A04 Offset: 0x1186A04 VA: 0x1186A04
	public string get_SortableDateTimePattern() { }

	// RVA: 0x1186A0C Offset: 0x1186A0C VA: 0x1186A0C
	public string get_UniversalSortableDateTimePattern() { }

	// RVA: 0x1186A14 Offset: 0x1186A14 VA: 0x1186A14
	internal string[] GetAllDateTimePatternsInternal() { }

	// RVA: 0x1186A40 Offset: 0x1186A40 VA: 0x1186A40
	private void FillAllDateTimePatterns() { }

	// RVA: 0x1186EF0 Offset: 0x1186EF0 VA: 0x1186EF0
	internal string[] GetAllRawDateTimePatterns(char format) { }

	// RVA: 0x11874E0 Offset: 0x11874E0 VA: 0x11874E0
	public string GetDayName(DayOfWeek dayofweek) { }

	// RVA: 0x11875A4 Offset: 0x11875A4 VA: 0x11875A4
	public string GetAbbreviatedDayName(DayOfWeek dayofweek) { }

	// RVA: 0x11865D8 Offset: 0x11865D8 VA: 0x11865D8
	private void FillInvariantPatterns() { }

	// RVA: 0x118730C Offset: 0x118730C VA: 0x118730C
	private string[] PopulateCombinedList(string[] dates, string[] times) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC31188 Offset: 0xC31188 VA: 0xC31188
[FlagsAttribute] // RVA: 0xC31188 Offset: 0xC31188 VA: 0xC31188
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 254
{
	// Fields
	public int value__; // 0x0
	public const DateTimeStyles None = 0;
	public const DateTimeStyles AllowLeadingWhite = 1;
	public const DateTimeStyles AllowTrailingWhite = 2;
	public const DateTimeStyles AllowInnerWhite = 4;
	public const DateTimeStyles AllowWhiteSpaces = 7;
	public const DateTimeStyles NoCurrentDateDefault = 8;
	public const DateTimeStyles AdjustToUniversal = 16;
	public const DateTimeStyles AssumeLocal = 32;
	public const DateTimeStyles AssumeUniversal = 64;
	public const DateTimeStyles RoundtripKind = 128;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC311C4 Offset: 0xC311C4 VA: 0xC311C4
[Serializable]
public class DaylightTime // TypeDefIndex: 255
{
	// Fields
	private DateTime m_start; // 0x10
	private DateTime m_end; // 0x20
	private TimeSpan m_delta; // 0x30

	// Properties
	public DateTime Start { get; }
	public DateTime End { get; }
	public TimeSpan Delta { get; }

	// Methods

	// RVA: 0x1187668 Offset: 0x1187668 VA: 0x1187668
	public void .ctor(DateTime start, DateTime end, TimeSpan delta) { }

	// RVA: 0x11876BC Offset: 0x11876BC VA: 0x11876BC
	public DateTime get_Start() { }

	// RVA: 0x11876C8 Offset: 0x11876C8 VA: 0x11876C8
	public DateTime get_End() { }

	// RVA: 0x11876D4 Offset: 0x11876D4 VA: 0x11876D4
	public TimeSpan get_Delta() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC311D8 Offset: 0xC311D8 VA: 0xC311D8
[MonoTODOAttribute] // RVA: 0xC311D8 Offset: 0xC311D8 VA: 0xC311D8
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 256
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x28

	// Properties
	public override int[] Eras { get; }
	public virtual GregorianCalendarTypes CalendarType { set; }

	// Methods

	// RVA: 0x11876DC Offset: 0x11876DC VA: 0x11876DC
	public void .ctor(GregorianCalendarTypes type) { }

	// RVA: 0x1184E2C Offset: 0x1184E2C VA: 0x1184E2C
	public void .ctor() { }

	// RVA: 0x1187848 Offset: 0x1187848 VA: 0x1187848 Slot: 5
	public override int[] get_Eras() { }

	// RVA: 0x11878C8 Offset: 0x11878C8 VA: 0x11878C8 Slot: 16
	public virtual void set_CalendarType(GregorianCalendarTypes value) { }

	// RVA: 0x11878F0 Offset: 0x11878F0 VA: 0x11878F0
	internal void M_CheckEra(ref int era) { }

	// RVA: 0x118798C Offset: 0x118798C VA: 0x118798C Slot: 7
	internal override void M_CheckYE(int year, ref int era) { }

	// RVA: 0x11879F8 Offset: 0x11879F8 VA: 0x11879F8
	internal void M_CheckYME(int year, int month, ref int era) { }

	// RVA: 0x1187AC8 Offset: 0x1187AC8 VA: 0x1187AC8
	internal void M_CheckYMDE(int year, int month, int day, ref int era) { }

	// RVA: 0x1187B70 Offset: 0x1187B70 VA: 0x1187B70 Slot: 8
	public override int GetDayOfMonth(DateTime time) { }

	// RVA: 0x1187B7C Offset: 0x1187B7C VA: 0x1187B7C Slot: 9
	public override DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x1187BE4 Offset: 0x1187BE4 VA: 0x1187BE4 Slot: 10
	public override int GetDaysInMonth(int year, int month, int era) { }

	// RVA: 0x1187C40 Offset: 0x1187C40 VA: 0x1187C40 Slot: 11
	public override int GetEra(DateTime time) { }

	// RVA: 0x1187C48 Offset: 0x1187C48 VA: 0x1187C48 Slot: 12
	public override int GetMonth(DateTime time) { }

	// RVA: 0x1187C54 Offset: 0x1187C54 VA: 0x1187C54 Slot: 13
	public override int GetYear(DateTime time) { }

	// RVA: 0x1187C60 Offset: 0x1187C60 VA: 0x1187C60 Slot: 15
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC31228 Offset: 0xC31228 VA: 0xC31228
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 257
{
	// Fields
	public int value__; // 0x0
	public const GregorianCalendarTypes Localized = 1;
	public const GregorianCalendarTypes USEnglish = 2;
	public const GregorianCalendarTypes MiddleEastFrench = 9;
	public const GregorianCalendarTypes Arabic = 10;
	public const GregorianCalendarTypes TransliteratedEnglish = 11;
	public const GregorianCalendarTypes TransliteratedFrench = 12;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC3123C Offset: 0xC3123C VA: 0xC3123C
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 258
{
	// Fields
	private bool isReadOnly; // 0x10
	private string decimalFormats; // 0x18
	private string currencyFormats; // 0x20
	private string percentFormats; // 0x28
	private string digitPattern; // 0x30
	private string zeroPattern; // 0x38
	private int currencyDecimalDigits; // 0x40
	private string currencyDecimalSeparator; // 0x48
	private string currencyGroupSeparator; // 0x50
	private int[] currencyGroupSizes; // 0x58
	private int currencyNegativePattern; // 0x60
	private int currencyPositivePattern; // 0x64
	private string currencySymbol; // 0x68
	private string nanSymbol; // 0x70
	private string negativeInfinitySymbol; // 0x78
	private string negativeSign; // 0x80
	private int numberDecimalDigits; // 0x88
	private string numberDecimalSeparator; // 0x90
	private string numberGroupSeparator; // 0x98
	private int[] numberGroupSizes; // 0xA0
	private int numberNegativePattern; // 0xA8
	private int percentDecimalDigits; // 0xAC
	private string percentDecimalSeparator; // 0xB0
