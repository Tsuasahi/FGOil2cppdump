}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xBC4E40 Offset: 0xBC4E40 VA: 0xBC4E40
[ComVisibleAttribute] // RVA: 0xBC4E40 Offset: 0xBC4E40 VA: 0xBC4E40
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 240
{
	// Methods

	// RVA: 0x23ABE1C Offset: 0x23ABE1C VA: 0x23ABE1C
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xBC4E94 Offset: 0xBC4E94 VA: 0xBC4E94
[ComVisibleAttribute] // RVA: 0xBC4E94 Offset: 0xBC4E94 VA: 0xBC4E94
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 241
{
	// Fields
	private string proxy_type_name; // 0x10

	// Methods

	// RVA: 0x23ABE24 Offset: 0x23ABE24 VA: 0x23ABE24
	public void .ctor(Type type) { }
}

// Namespace: System.Diagnostics
[MonoTODOAttribute] // RVA: 0xBC4EE8 Offset: 0xBC4EE8 VA: 0xBC4EE8
[ComVisibleAttribute] // RVA: 0xBC4EE8 Offset: 0xBC4EE8 VA: 0xBC4EE8
[Serializable]
public class StackFrame // TypeDefIndex: 242
{
	// Fields
	public const int OFFSET_UNKNOWN = -1;
	private int ilOffset; // 0x10
	private int nativeOffset; // 0x14
	private MethodBase methodBase; // 0x18
	private string fileName; // 0x20
	private int lineNumber; // 0x28
	private int columnNumber; // 0x2C
	private string internalMethodName; // 0x30

	// Methods

	// RVA: 0x23ABE6C Offset: 0x23ABE6C VA: 0x23ABE6C
	public void .ctor() { }

	// RVA: 0x23ABED0 Offset: 0x23ABED0 VA: 0x23ABED0
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x23ABEC8 Offset: 0x23ABEC8 VA: 0x23ABEC8
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column) { }

	// RVA: 0x23ABF3C Offset: 0x23ABF3C VA: 0x23ABF3C Slot: 4
	public virtual int GetFileLineNumber() { }

	// RVA: 0x23ABF44 Offset: 0x23ABF44 VA: 0x23ABF44 Slot: 5
	public virtual string GetFileName() { }

	// RVA: 0x23ABF4C Offset: 0x23ABF4C VA: 0x23ABF4C
	internal string GetSecureFileName() { }

	// RVA: 0x23AC028 Offset: 0x23AC028 VA: 0x23AC028 Slot: 6
	public virtual int GetILOffset() { }

	// RVA: 0x23AC030 Offset: 0x23AC030 VA: 0x23AC030 Slot: 7
	public virtual MethodBase GetMethod() { }

	// RVA: 0x23AC038 Offset: 0x23AC038 VA: 0x23AC038 Slot: 8
	public virtual int GetNativeOffset() { }

	// RVA: 0x23AC040 Offset: 0x23AC040 VA: 0x23AC040
	internal string GetInternalMethodName() { }

	// RVA: 0x23AC048 Offset: 0x23AC048 VA: 0x23AC048 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Diagnostics
[MonoTODOAttribute] // RVA: 0xBC4F38 Offset: 0xBC4F38 VA: 0xBC4F38
[ComVisibleAttribute] // RVA: 0xBC4F38 Offset: 0xBC4F38 VA: 0xBC4F38
[Serializable]
public class StackTrace // TypeDefIndex: 243
{
	// Fields
	public const int METHODS_TO_SKIP = 0;
	private StackFrame[] frames; // 0x10
	private bool debug_info; // 0x18

	// Properties
	public virtual int FrameCount { get; }

	// Methods

	// RVA: 0x23AC2D8 Offset: 0x23AC2D8 VA: 0x23AC2D8
	public void .ctor() { }

	// RVA: 0x23AC544 Offset: 0x23AC544 VA: 0x23AC544
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x23AC584 Offset: 0x23AC584 VA: 0x23AC584
	public void .ctor(Exception e, bool fNeedFileInfo) { }

	// RVA: 0x23AC594 Offset: 0x23AC594 VA: 0x23AC594
	public void .ctor(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x23AC5A0 Offset: 0x23AC5A0 VA: 0x23AC5A0
	internal void .ctor(Exception e, int skipFrames, bool fNeedFileInfo, bool returnNativeFrames) { }

	// RVA: 0x23AC308 Offset: 0x23AC308 VA: 0x23AC308
	private void init_frames(int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x23AC910 Offset: 0x23AC910 VA: 0x23AC910
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo) { }

	// RVA: 0x23AC918 Offset: 0x23AC918 VA: 0x23AC918 Slot: 4
	public virtual int get_FrameCount() { }

	// RVA: 0x23AC930 Offset: 0x23AC930 VA: 0x23AC930 Slot: 5
	public virtual StackFrame GetFrame(int index) { }

	// RVA: 0x23AC9AC Offset: 0x23AC9AC VA: 0x23AC9AC Slot: 3
	public override string ToString() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC4F88 Offset: 0xBC4F88 VA: 0xBC4F88
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 244
{
	// Fields
	private bool m_isReadOnly; // 0x10
	internal int twoDigitYearMax; // 0x14
	internal string[] M_AbbrEraNames; // 0x18
	internal string[] M_EraNames; // 0x20

	// Properties
	public abstract int[] Eras { get; }
	internal string[] EraNames { get; }

	// Methods

	// RVA: 0x23B5A64 Offset: 0x23B5A64 VA: 0x23B5A64
	protected void .ctor() { }

	// RVA: 0x23B5A90 Offset: 0x23B5A90 VA: 0x23B5A90
	internal string M_ValidValues(object a, object b) { }

	// RVA: 0x23B5B44 Offset: 0x23B5B44 VA: 0x23B5B44
	internal void M_ArgumentInRange(string param, int arg, int a, int b) { }

	// RVA: 0x23B5C30 Offset: 0x23B5C30 VA: 0x23B5C30
	internal void M_CheckHMSM(int hour, int minute, int second, int milliseconds) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int[] get_Eras();

	[ComVisibleAttribute] // RVA: 0xBCC804 Offset: 0xBCC804 VA: 0xBCC804
	// RVA: 0x23B5CFC Offset: 0x23B5CFC VA: 0x23B5CFC Slot: 6
	public virtual object Clone() { }

	// RVA: 0x23B5DD8 Offset: 0x23B5DD8 VA: 0x23B5DD8
	internal void CheckReadOnly() { }

	// RVA: 0x23B5E64 Offset: 0x23B5E64 VA: 0x23B5E64 Slot: 7
	internal virtual void M_CheckYE(int year, ref int era) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetDayOfMonth(DateTime time);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract DayOfWeek GetDayOfWeek(DateTime time);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int GetDaysInMonth(int year, int month, int era);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract int GetEra(DateTime time);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract int GetMonth(DateTime time);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract int GetYear(DateTime time);

	// RVA: 0x23B5E68 Offset: 0x23B5E68 VA: 0x23B5E68 Slot: 14
	public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);

	// RVA: 0x23B5E98 Offset: 0x23B5E98 VA: 0x23B5E98
	internal string[] get_EraNames() { }
}

// Namespace: System.Globalization
internal class CCMath // TypeDefIndex: 245
{
	// Methods

	// RVA: 0x23B55CC Offset: 0x23B55CC VA: 0x23B55CC
	public static int div(int x, int y) { }

	// RVA: 0x23B5494 Offset: 0x23B5494 VA: 0x23B5494
	public static int mod(int x, int y) { }

	// RVA: 0x23B567C Offset: 0x23B567C VA: 0x23B567C
	public static int div_mod(out int remainder, int x, int y) { }
}

// Namespace: System.Globalization
internal class CCFixed // TypeDefIndex: 246
{
	// Methods

	// RVA: 0x23B5328 Offset: 0x23B5328 VA: 0x23B5328
	public static DateTime ToDateTime(int date) { }

	// RVA: 0x23B536C Offset: 0x23B536C VA: 0x23B536C
	public static DateTime ToDateTime(int date, int hour, int minute, int second, double milliseconds) { }

	// RVA: 0x23B5428 Offset: 0x23B5428 VA: 0x23B5428
	public static int FromDateTime(DateTime time) { }

	// RVA: 0x23B5478 Offset: 0x23B5478 VA: 0x23B5478
	public static DayOfWeek day_of_week(int date) { }
}

// Namespace: System.Globalization
internal class CCGregorianCalendar // TypeDefIndex: 247
{
	// Methods

	// RVA: 0x23B54AC Offset: 0x23B54AC VA: 0x23B54AC
	public static bool is_leap_year(int year) { }

	// RVA: 0x23B5504 Offset: 0x23B5504 VA: 0x23B5504
	public static int fixed_from_dmy(int day, int month, int year) { }

	// RVA: 0x23B55E0 Offset: 0x23B55E0 VA: 0x23B55E0
	public static int year_from_fixed(int date) { }

	// RVA: 0x23B569C Offset: 0x23B569C VA: 0x23B569C
	public static void my_from_fixed(out int month, out int year, int date) { }

	// RVA: 0x23B57D8 Offset: 0x23B57D8 VA: 0x23B57D8
	public static void dmy_from_fixed(out int day, out int month, out int year, int date) { }

	// RVA: 0x23B5834 Offset: 0x23B5834 VA: 0x23B5834
	public static int month_from_fixed(int date) { }

	// RVA: 0x23B586C Offset: 0x23B586C VA: 0x23B586C
	public static int day_from_fixed(int date) { }

	// RVA: 0x23B58B8 Offset: 0x23B58B8 VA: 0x23B58B8
	public static int GetDayOfMonth(DateTime time) { }

	// RVA: 0x23B590C Offset: 0x23B590C VA: 0x23B590C
	public static int GetDaysInMonth(int year, int month) { }

	// RVA: 0x23B5958 Offset: 0x23B5958 VA: 0x23B5958
	public static int GetMonth(DateTime time) { }

	// RVA: 0x23B59C0 Offset: 0x23B59C0 VA: 0x23B59C0
	public static int GetYear(DateTime time) { }

	// RVA: 0x23B5A14 Offset: 0x23B5A14 VA: 0x23B5A14
	public static DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int milliseconds) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC4F9C Offset: 0xBC4F9C VA: 0xBC4F9C
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 248
{
	// Fields
	private static readonly bool useManagedCollation; // 0x0
	private int culture; // 0x10
	private string icu_name; // 0x18
	private int win32LCID; // 0x20
	private string m_name; // 0x28
	private SimpleCollator collator; // 0x30
	private static Hashtable collators; // 0x8
	private static object monitor; // 0x10

	// Properties
	internal static bool UseManagedCollation { get; }
	public int LCID { get; }

	// Methods

	// RVA: 0x23B5FE4 Offset: 0x23B5FE4 VA: 0x23B5FE4
	private void .ctor() { }

	// RVA: 0x23B5FEC Offset: 0x23B5FEC VA: 0x23B5FEC
	internal void .ctor(CultureInfo ci) { }

	// RVA: 0x23B643C Offset: 0x23B643C VA: 0x23B643C
	private static void .cctor() { }

	// RVA: 0x23B653C Offset: 0x23B653C VA: 0x23B653C Slot: 4
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x23B6394 Offset: 0x23B6394 VA: 0x23B6394
	internal static bool get_UseManagedCollation() { }

	// RVA: 0x23B6438 Offset: 0x23B6438 VA: 0x23B6438
	private void construct_compareinfo(string locale) { }

	// RVA: 0x23B668C Offset: 0x23B668C VA: 0x23B668C
	private void free_internal_collator() { }

	// RVA: 0x23B6690 Offset: 0x23B6690 VA: 0x23B6690
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x23B6694 Offset: 0x23B6694 VA: 0x23B6694
	private void assign_sortkey(object key, string source, CompareOptions options) { }

	// RVA: 0x23B6698 Offset: 0x23B6698 VA: 0x23B6698
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first) { }

	// RVA: 0x23B66A0 Offset: 0x23B66A0 VA: 0x23B66A0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23B6714 Offset: 0x23B6714 VA: 0x23B6714
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x23B6794 Offset: 0x23B6794 VA: 0x23B6794
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x23B6894 Offset: 0x23B6894 VA: 0x23B6894 Slot: 5
	public virtual int Compare(string string1, string string2) { }

	// RVA: 0x23B68A4 Offset: 0x23B68A4 VA: 0x23B68A4 Slot: 6
	public virtual int Compare(string string1, string string2, CompareOptions options) { }

	// RVA: 0x23B69D8 Offset: 0x23B69D8 VA: 0x23B69D8 Slot: 7
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { }

	// RVA: 0x23B6C58 Offset: 0x23B6C58 VA: 0x23B6C58 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x23B6D04 Offset: 0x23B6D04 VA: 0x23B6D04 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23B6D14 Offset: 0x23B6D14 VA: 0x23B6D14 Slot: 8
	public virtual SortKey GetSortKey(string source, CompareOptions options) { }

	// RVA: 0x23B6EB8 Offset: 0x23B6EB8 VA: 0x23B6EB8 Slot: 9
	public virtual int IndexOf(string source, string value, CompareOptions options) { }

	// RVA: 0x23B6F20 Offset: 0x23B6F20 VA: 0x23B6F20 Slot: 10
	public virtual int IndexOf(string source, string value, int startIndex, int count) { }

	// RVA: 0x23B6F30 Offset: 0x23B6F30 VA: 0x23B6F30
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x23B6FE0 Offset: 0x23B6FE0 VA: 0x23B6FE0
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }

	// RVA: 0x23B70DC Offset: 0x23B70DC VA: 0x23B70DC Slot: 11
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x23B72A4 Offset: 0x23B72A4 VA: 0x23B72A4 Slot: 12
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { }

	// RVA: 0x23B7454 Offset: 0x23B7454 VA: 0x23B7454 Slot: 13
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { }

	// RVA: 0x23B7630 Offset: 0x23B7630 VA: 0x23B7630 Slot: 14
	public virtual int LastIndexOf(string source, string value, CompareOptions options) { }

	// RVA: 0x23B76D0 Offset: 0x23B76D0 VA: 0x23B76D0 Slot: 15
	public virtual int LastIndexOf(string source, string value, int startIndex, int count) { }

	// RVA: 0x23B76E4 Offset: 0x23B76E4 VA: 0x23B76E4 Slot: 16
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }

	// RVA: 0x23B789C Offset: 0x23B789C VA: 0x23B789C Slot: 3
	public override string ToString() { }

	// RVA: 0x23B6D0C Offset: 0x23B6D0C VA: 0x23B6D0C
	public int get_LCID() { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0xBC4FB0 Offset: 0xBC4FB0 VA: 0xBC4FB0
[ComVisibleAttribute] // RVA: 0xBC4FB0 Offset: 0xBC4FB0 VA: 0xBC4FB0
[Serializable]
public enum CompareOptions // TypeDefIndex: 249
{
	// Fields
	public int value__; // 0x0
	public const CompareOptions None = 0;
	public const CompareOptions IgnoreCase = 1;
	public const CompareOptions IgnoreNonSpace = 2;
	public const CompareOptions IgnoreSymbols = 4;
	public const CompareOptions IgnoreKanaType = 8;
	public const CompareOptions IgnoreWidth = 16;
	public const CompareOptions StringSort = 536870912;
	public const CompareOptions Ordinal = 1073741824;
	public const CompareOptions OrdinalIgnoreCase = 268435456;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC4FEC Offset: 0xBC4FEC VA: 0xBC4FEC
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 250
{
	// Fields
	private const int NumOptionalCalendars = 5;
	private const int GregorianTypeMask = 16777215;
	private const int CalendarTypeBits = 24;
	private const int InvariantCultureId = 127;
	private static CultureInfo invariant_culture_info; // 0x0
	private static object shared_table_lock; // 0x8
	internal static int BootstrapCultureID; // 0x10
	private bool m_isReadOnly; // 0x10
	private int cultureID; // 0x14
	private int parent_lcid; // 0x18
	private int specific_lcid; // 0x1C
	private int datetime_index; // 0x20
	private int number_index; // 0x24
	private bool m_useUserOverride; // 0x28
	private NumberFormatInfo numInfo; // 0x30
	private DateTimeFormatInfo dateTimeInfo; // 0x38
	private TextInfo textInfo; // 0x40
	private string m_name; // 0x48
	private string displayname; // 0x50
	private string englishname; // 0x58
	private string nativename; // 0x60
	private string iso3lang; // 0x68
	private string iso2lang; // 0x70
	private string icu_name; // 0x78
	private string win3lang; // 0x80
	private string territory; // 0x88
	private CompareInfo compareInfo; // 0x90
	private readonly int* calendar_data; // 0x98
	private readonly void* textinfo_data; // 0xA0
	private Calendar[] optional_calendars; // 0xA8
	private CultureInfo parent_culture; // 0xB0
	private int m_dataItem; // 0xB8
	private Calendar calendar; // 0xC0
	private bool constructed; // 0xC8
	internal byte[] cached_serialized_form; // 0xD0
	private static readonly string MSG_READONLY; // 0x18
	private static Hashtable shared_by_number; // 0x20
	private static Hashtable shared_by_name; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xBCB514 Offset: 0xBCB514 VA: 0xBCB514
	private static Dictionary<string, int> <>f__switch$map19; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xBCB524 Offset: 0xBCB524 VA: 0xBCB524
	private static Dictionary<string, int> <>f__switch$map1A; // 0x38

	// Properties
	public static CultureInfo InvariantCulture { get; }
	public static CultureInfo CurrentCulture { get; }
	public static CultureInfo CurrentUICulture { get; }
	internal string Territory { get; }
	public virtual int LCID { get; }
	public virtual string Name { get; }
	public virtual CultureInfo Parent { get; }
	public virtual TextInfo TextInfo { get; }
	internal string IcuName { get; }
	public virtual CompareInfo CompareInfo { get; }
	public virtual bool IsNeutralCulture { get; }
	public virtual NumberFormatInfo NumberFormat { get; set; }
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
	public virtual string DisplayName { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x23B6680 Offset: 0x23B6680 VA: 0x23B6680
	public void .ctor(int culture) { }

	// RVA: 0x23B7940 Offset: 0x23B7940 VA: 0x23B7940
	public void .ctor(int culture, bool useUserOverride) { }

	// RVA: 0x23B794C Offset: 0x23B794C VA: 0x23B794C
	private void .ctor(int culture, bool useUserOverride, bool read_only) { }

	// RVA: 0x23B7D38 Offset: 0x23B7D38 VA: 0x23B7D38
	public void .ctor(string name) { }

	// RVA: 0x23B7D44 Offset: 0x23B7D44 VA: 0x23B7D44
	public void .ctor(string name, bool useUserOverride) { }

	// RVA: 0x23B7D50 Offset: 0x23B7D50 VA: 0x23B7D50
	private void .ctor(string name, bool useUserOverride, bool read_only) { }

	// RVA: 0x23B80CC Offset: 0x23B80CC VA: 0x23B80CC
	private void .ctor() { }

	// RVA: 0x23B80F8 Offset: 0x23B80F8 VA: 0x23B80F8
	private static void .cctor() { }

	// RVA: 0x23A5EC8 Offset: 0x23A5EC8 VA: 0x23A5EC8
	public static CultureInfo get_InvariantCulture() { }

	// RVA: 0x23B81A0 Offset: 0x23B81A0 VA: 0x23B81A0
	public static CultureInfo get_CurrentCulture() { }

	// RVA: 0x23B8218 Offset: 0x23B8218 VA: 0x23B8218
	public static CultureInfo get_CurrentUICulture() { }

	// RVA: 0x23B8290 Offset: 0x23B8290 VA: 0x23B8290
	internal static CultureInfo ConstructCurrentCulture() { }

	// RVA: 0x23B83D8 Offset: 0x23B83D8 VA: 0x23B83D8
	internal static CultureInfo ConstructCurrentUICulture() { }

	// RVA: 0x23B8434 Offset: 0x23B8434 VA: 0x23B8434
	internal string get_Territory() { }

	// RVA: 0x23B843C Offset: 0x23B843C VA: 0x23B843C Slot: 6
	public virtual int get_LCID() { }

	// RVA: 0x23B8444 Offset: 0x23B8444 VA: 0x23B8444 Slot: 7
	public virtual string get_Name() { }

	// RVA: 0x23B844C Offset: 0x23B844C VA: 0x23B844C Slot: 8
	public virtual CultureInfo get_Parent() { }

	// RVA: 0x23B8564 Offset: 0x23B8564 VA: 0x23B8564 Slot: 9
	public virtual TextInfo get_TextInfo() { }

	// RVA: 0x23B63FC Offset: 0x23B63FC VA: 0x23B63FC
	internal string get_IcuName() { }

	// RVA: 0x23B86BC Offset: 0x23B86BC VA: 0x23B86BC Slot: 10
	public virtual object Clone() { }

	// RVA: 0x23B8AA8 Offset: 0x23B8AA8 VA: 0x23B8AA8 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x23B8B54 Offset: 0x23B8B54 VA: 0x23B8B54
	public static CultureInfo[] GetCultures(CultureTypes types) { }

	// RVA: 0x23B8D6C Offset: 0x23B8D6C VA: 0x23B8D6C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23B8D74 Offset: 0x23B8D74 VA: 0x23B8D74 Slot: 3
	public override string ToString() { }

	// RVA: 0x23B8D7C Offset: 0x23B8D7C VA: 0x23B8D7C Slot: 11
	public virtual CompareInfo get_CompareInfo() { }

	// RVA: 0x23B8E80 Offset: 0x23B8E80 VA: 0x23B8E80 Slot: 12
	public virtual bool get_IsNeutralCulture() { }

	// RVA: 0x23B8EE8 Offset: 0x23B8EE8 VA: 0x23B8EE8
	internal void CheckNeutral() { }

	// RVA: 0x23B8FC8 Offset: 0x23B8FC8 VA: 0x23B8FC8 Slot: 13
	public virtual NumberFormatInfo get_NumberFormat() { }

	// RVA: 0x23B9100 Offset: 0x23B9100 VA: 0x23B9100 Slot: 14
	public virtual void set_NumberFormat(NumberFormatInfo value) { }

	// RVA: 0x23B921C Offset: 0x23B921C VA: 0x23B921C Slot: 15
	public virtual DateTimeFormatInfo get_DateTimeFormat() { }

	// RVA: 0x23B9678 Offset: 0x23B9678 VA: 0x23B9678 Slot: 16
	public virtual void set_DateTimeFormat(DateTimeFormatInfo value) { }

	// RVA: 0x23B9794 Offset: 0x23B9794 VA: 0x23B9794 Slot: 17
	public virtual string get_DisplayName() { }

	// RVA: 0x23B97D0 Offset: 0x23B97D0 VA: 0x23B97D0
	public bool get_IsReadOnly() { }

	// RVA: 0x23B97D8 Offset: 0x23B97D8 VA: 0x23B97D8 Slot: 18
	public virtual object GetFormat(Type formatType) { }

	// RVA: 0x23B8538 Offset: 0x23B8538 VA: 0x23B8538
	private void Construct() { }

	// RVA: 0x23B7EE8 Offset: 0x23B7EE8 VA: 0x23B7EE8
	private bool ConstructInternalLocaleFromName(string locale) { }

	// RVA: 0x23B7D34 Offset: 0x23B7D34 VA: 0x23B7D34
	private bool ConstructInternalLocaleFromLcid(int lcid) { }

	// RVA: 0x23B8374 Offset: 0x23B8374 VA: 0x23B8374
	private static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo ci) { }

	// RVA: 0x23B98C0 Offset: 0x23B98C0 VA: 0x23B98C0
	private bool construct_internal_locale_from_lcid(int lcid) { }

	// RVA: 0x23B98C4 Offset: 0x23B98C4 VA: 0x23B98C4
	private bool construct_internal_locale_from_name(string name) { }

	// RVA: 0x23B98C8 Offset: 0x23B98C8 VA: 0x23B98C8
	private static bool construct_internal_locale_from_current_locale(CultureInfo ci) { }

	// RVA: 0x23B8D5C Offset: 0x23B8D5C VA: 0x23B8D5C
	private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed) { }

	// RVA: 0x23B9584 Offset: 0x23B9584 VA: 0x23B9584
	private void construct_datetime_format() { }

	// RVA: 0x23B90FC Offset: 0x23B90FC VA: 0x23B90FC
	private void construct_number_format() { }

	// RVA: 0x23B7AE8 Offset: 0x23B7AE8 VA: 0x23B7AE8
	private void ConstructInvariant(bool read_only) { }

	// RVA: 0x23B8634 Offset: 0x23B8634 VA: 0x23B8634
	private TextInfo CreateTextInfo(bool readOnly) { }

	// RVA: 0x23B9B78 Offset: 0x23B9B78 VA: 0x23B9B78
	private static void insert_into_shared_tables(CultureInfo c) { }

	// RVA: 0x23B9D04 Offset: 0x23B9D04 VA: 0x23B9D04
	public static CultureInfo GetCultureInfo(int culture) { }

	// RVA: 0x23B9EE8 Offset: 0x23B9EE8 VA: 0x23B9EE8
	public static CultureInfo GetCultureInfo(string name) { }

	// RVA: 0x23BA0F0 Offset: 0x23BA0F0 VA: 0x23BA0F0
	internal static CultureInfo CreateCulture(string name, bool reference) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0xBC5000 Offset: 0xBC5000 VA: 0xBC5000
[ComVisibleAttribute] // RVA: 0xBC5000 Offset: 0xBC5000 VA: 0xBC5000
[Serializable]
public enum CultureTypes // TypeDefIndex: 251
{
	// Fields
	public int value__; // 0x0
	public const CultureTypes NeutralCultures = 1;
	public const CultureTypes SpecificCultures = 2;
	public const CultureTypes InstalledWin32Cultures = 4;
	public const CultureTypes AllCultures = 7;
	public const CultureTypes UserCustomCulture = 8;
	public const CultureTypes ReplacementCultures = 16;
	public const CultureTypes WindowsOnlyCultures = 32;
	public const CultureTypes FrameworkCultures = 64;
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0xBC503C Offset: 0xBC503C VA: 0xBC503C
internal enum DateTimeFormatFlags // TypeDefIndex: 252
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatFlags Unused = 0;
	public const DateTimeFormatFlags But = 1;
	public const DateTimeFormatFlags Serialized = 2;
	public const DateTimeFormatFlags By = 3;
	public const DateTimeFormatFlags Microsoft = 4;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC504C Offset: 0xBC504C VA: 0xBC504C
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 253
{
	// Fields
	private const string _RoundtripPattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss.fffffffK";
	private static readonly string MSG_READONLY; // 0x0
	private static readonly string MSG_ARRAYSIZE_MONTH; // 0x8
	private static readonly string MSG_ARRAYSIZE_DAY; // 0x10
	private static readonly string[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0x18
	private static readonly string[] INVARIANT_DAY_NAMES; // 0x20
	private static readonly string[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x28
	private static readonly string[] INVARIANT_MONTH_NAMES; // 0x30
	private static readonly string[] INVARIANT_SHORT_DAY_NAMES; // 0x38
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x40
	private bool m_isReadOnly; // 0x10
	private string amDesignator; // 0x18
	private string pmDesignator; // 0x20
	private string dateSeparator; // 0x28
	private string timeSeparator; // 0x30
	private string shortDatePattern; // 0x38
	private string longDatePattern; // 0x40
	private string shortTimePattern; // 0x48
	private string longTimePattern; // 0x50
	private string monthDayPattern; // 0x58
	private string yearMonthPattern; // 0x60
	private string fullDateTimePattern; // 0x68
	private string _RFC1123Pattern; // 0x70
	private string _SortableDateTimePattern; // 0x78
	private string _UniversalSortableDateTimePattern; // 0x80
	private int firstDayOfWeek; // 0x88
	private Calendar calendar; // 0x90
	private int calendarWeekRule; // 0x98
	private string[] abbreviatedDayNames; // 0xA0
	private string[] dayNames; // 0xA8
	private string[] monthNames; // 0xB0
	private string[] abbreviatedMonthNames; // 0xB8
	private string[] allShortDatePatterns; // 0xC0
	private string[] allLongDatePatterns; // 0xC8
	private string[] allShortTimePatterns; // 0xD0
	private string[] allLongTimePatterns; // 0xD8
	private string[] monthDayPatterns; // 0xE0
	private string[] yearMonthPatterns; // 0xE8
	private string[] shortDayNames; // 0xF0
	private int nDataItem; // 0xF8
	private bool m_useUserOverride; // 0xFC
	private bool m_isDefaultCalendar; // 0xFD
	private int CultureID; // 0x100
	private bool bUseCalendarInfo; // 0x104
	private string generalShortTimePattern; // 0x108
	private string generalLongTimePattern; // 0x110
	private string[] m_eraNames; // 0x118
	private string[] m_abbrevEraNames; // 0x120
	private string[] m_abbrevEnglishEraNames; // 0x128
	private string[] m_dateWords; // 0x130
	private int[] optionalCalendars; // 0x138
	private string[] m_superShortDayNames; // 0x140
	private string[] genitiveMonthNames; // 0x148
	private string[] m_genitiveAbbreviatedMonthNames; // 0x150
	private string[] leapYearMonthNames; // 0x158
	private DateTimeFormatFlags formatFlags; // 0x160
	private string m_name; // 0x168
	private string[] all_date_time_patterns; // 0x170

	// Properties
	public bool IsReadOnly { get; }
	internal string[] RawAbbreviatedDayNames { get; }
	internal string[] RawAbbreviatedMonthNames { get; }
	internal string[] RawDayNames { get; }
	internal string[] RawMonthNames { get; }
	public string AMDesignator { get; }
	public string PMDesignator { get; }
	public string DateSeparator { get; }
	public string TimeSeparator { get; }
	public string LongDatePattern { get; }
	public string ShortDatePattern { get; }
	public string ShortTimePattern { get; }
	public string LongTimePattern { get; }
	public string MonthDayPattern { get; }
	public string YearMonthPattern { get; }
	public string FullDateTimePattern { get; }
	public static DateTimeFormatInfo CurrentInfo { get; }
	public static DateTimeFormatInfo InvariantInfo { get; }
	public Calendar Calendar { get; set; }
	public string RFC1123Pattern { get; }
	internal string RoundtripPattern { get; }
	public string SortableDateTimePattern { get; }
	public string UniversalSortableDateTimePattern { get; }

	// Methods

	// RVA: 0x23B93A4 Offset: 0x23B93A4 VA: 0x23B93A4
	internal void .ctor(bool read_only) { }

	// RVA: 0x23BA18C Offset: 0x23BA18C VA: 0x23BA18C
	public void .ctor() { }

	// RVA: 0x23BA194 Offset: 0x23BA194 VA: 0x23BA194
	private static void .cctor() { }

	// RVA: 0x23BB258 Offset: 0x23BB258 VA: 0x23BB258
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { }

	// RVA: 0x23BB468 Offset: 0x23BB468 VA: 0x23BB468
	public bool get_IsReadOnly() { }

	// RVA: 0x23BB470 Offset: 0x23BB470 VA: 0x23BB470
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) { }

	// RVA: 0x23B89E8 Offset: 0x23B89E8 VA: 0x23B89E8 Slot: 4
	public object Clone() { }

	// RVA: 0x23BB53C Offset: 0x23BB53C VA: 0x23BB53C Slot: 5
	public object GetFormat(Type formatType) { }

	// RVA: 0x23BB56C Offset: 0x23BB56C VA: 0x23BB56C
	public string GetAbbreviatedMonthName(int month) { }

	// RVA: 0x23BB634 Offset: 0x23BB634 VA: 0x23BB634
	public string GetEraName(int era) { }

	// RVA: 0x23BB764 Offset: 0x23BB764 VA: 0x23BB764
	public string GetMonthName(int month) { }

	// RVA: 0x23BB82C Offset: 0x23BB82C VA: 0x23BB82C
	internal string[] get_RawAbbreviatedDayNames() { }

	// RVA: 0x23BB834 Offset: 0x23BB834 VA: 0x23BB834
	internal string[] get_RawAbbreviatedMonthNames() { }

	// RVA: 0x23BB83C Offset: 0x23BB83C VA: 0x23BB83C
	internal string[] get_RawDayNames() { }

	// RVA: 0x23BB844 Offset: 0x23BB844 VA: 0x23BB844
	internal string[] get_RawMonthNames() { }

	// RVA: 0x23BB84C Offset: 0x23BB84C VA: 0x23BB84C
	public string get_AMDesignator() { }

	// RVA: 0x23BB854 Offset: 0x23BB854 VA: 0x23BB854
	public string get_PMDesignator() { }

	// RVA: 0x23BB85C Offset: 0x23BB85C VA: 0x23BB85C
	public string get_DateSeparator() { }

	// RVA: 0x23BB864 Offset: 0x23BB864 VA: 0x23BB864
	public string get_TimeSeparator() { }

	// RVA: 0x23BB86C Offset: 0x23BB86C VA: 0x23BB86C
	public string get_LongDatePattern() { }

	// RVA: 0x23BB874 Offset: 0x23BB874 VA: 0x23BB874
	public string get_ShortDatePattern() { }

	// RVA: 0x23BB87C Offset: 0x23BB87C VA: 0x23BB87C
	public string get_ShortTimePattern() { }

	// RVA: 0x23BB884 Offset: 0x23BB884 VA: 0x23BB884
	public string get_LongTimePattern() { }

	// RVA: 0x23BB88C Offset: 0x23BB88C VA: 0x23BB88C
	public string get_MonthDayPattern() { }

	// RVA: 0x23BB894 Offset: 0x23BB894 VA: 0x23BB894
	public string get_YearMonthPattern() { }

	// RVA: 0x23BB89C Offset: 0x23BB89C VA: 0x23BB89C
	public string get_FullDateTimePattern() { }

	// RVA: 0x23BB3D0 Offset: 0x23BB3D0 VA: 0x23BB3D0
	public static DateTimeFormatInfo get_CurrentInfo() { }

	// RVA: 0x23B9964 Offset: 0x23B9964 VA: 0x23B9964
	public static DateTimeFormatInfo get_InvariantInfo() { }

	// RVA: 0x23BBD04 Offset: 0x23BBD04 VA: 0x23BBD04
	public Calendar get_Calendar() { }

	// RVA: 0x23B9588 Offset: 0x23B9588 VA: 0x23B9588
	public void set_Calendar(Calendar value) { }

	// RVA: 0x23BBD0C Offset: 0x23BBD0C VA: 0x23BBD0C
	public string get_RFC1123Pattern() { }

	// RVA: 0x23BBD14 Offset: 0x23BBD14 VA: 0x23BBD14
	internal string get_RoundtripPattern() { }

	// RVA: 0x23BBD5C Offset: 0x23BBD5C VA: 0x23BBD5C
	public string get_SortableDateTimePattern() { }

	// RVA: 0x23BBD64 Offset: 0x23BBD64 VA: 0x23BBD64
	public string get_UniversalSortableDateTimePattern() { }

	// RVA: 0x23BBD6C Offset: 0x23BBD6C VA: 0x23BBD6C
	internal string[] GetAllDateTimePatternsInternal() { }

	// RVA: 0x23BBD98 Offset: 0x23BBD98 VA: 0x23BBD98
	private void FillAllDateTimePatterns() { }

	// RVA: 0x23BC248 Offset: 0x23BC248 VA: 0x23BC248
	internal string[] GetAllRawDateTimePatterns(char format) { }

	// RVA: 0x23BC838 Offset: 0x23BC838 VA: 0x23BC838
	public string GetDayName(DayOfWeek dayofweek) { }

	// RVA: 0x23BC8FC Offset: 0x23BC8FC VA: 0x23BC8FC
	public string GetAbbreviatedDayName(DayOfWeek dayofweek) { }

	// RVA: 0x23BB930 Offset: 0x23BB930 VA: 0x23BB930
	private void FillInvariantPatterns() { }

	// RVA: 0x23BC664 Offset: 0x23BC664 VA: 0x23BC664
	private string[] PopulateCombinedList(string[] dates, string[] times) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC5060 Offset: 0xBC5060 VA: 0xBC5060
[FlagsAttribute] // RVA: 0xBC5060 Offset: 0xBC5060 VA: 0xBC5060
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 254
{
	// Fields
	public int value__; // 0x0
	public const DateTimeStyles None = 0;
	public const DateTimeStyles AllowLeadingWhite = 1;
	public const DateTimeStyles AllowTrailingWhite = 2;
	public const DateTimeStyles AllowInnerWhite = 4;
	public const DateTimeStyles AllowWhiteSpaces = 7;
	public const DateTimeStyles NoCurrentDateDefault = 8;
	public const DateTimeStyles AdjustToUniversal = 16;
	public const DateTimeStyles AssumeLocal = 32;
	public const DateTimeStyles AssumeUniversal = 64;
	public const DateTimeStyles RoundtripKind = 128;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC509C Offset: 0xBC509C VA: 0xBC509C
[Serializable]
public class DaylightTime // TypeDefIndex: 255
{
	// Fields
	private DateTime m_start; // 0x10
	private DateTime m_end; // 0x20
	private TimeSpan m_delta; // 0x30

	// Properties
	public DateTime Start { get; }
	public DateTime End { get; }
	public TimeSpan Delta { get; }

	// Methods

	// RVA: 0x23BC9C0 Offset: 0x23BC9C0 VA: 0x23BC9C0
	public void .ctor(DateTime start, DateTime end, TimeSpan delta) { }

	// RVA: 0x23BCA14 Offset: 0x23BCA14 VA: 0x23BCA14
	public DateTime get_Start() { }

	// RVA: 0x23BCA20 Offset: 0x23BCA20 VA: 0x23BCA20
	public DateTime get_End() { }

	// RVA: 0x23BCA2C Offset: 0x23BCA2C VA: 0x23BCA2C
	public TimeSpan get_Delta() { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC50B0 Offset: 0xBC50B0 VA: 0xBC50B0
[MonoTODOAttribute] // RVA: 0xBC50B0 Offset: 0xBC50B0 VA: 0xBC50B0
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 256
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x28

	// Properties
	public override int[] Eras { get; }
	public virtual GregorianCalendarTypes CalendarType { set; }

	// Methods

	// RVA: 0x23BCA34 Offset: 0x23BCA34 VA: 0x23BCA34
	public void .ctor(GregorianCalendarTypes type) { }

	// RVA: 0x23BA184 Offset: 0x23BA184 VA: 0x23BA184
	public void .ctor() { }

	// RVA: 0x23BCBA0 Offset: 0x23BCBA0 VA: 0x23BCBA0 Slot: 5
	public override int[] get_Eras() { }

	// RVA: 0x23BCC20 Offset: 0x23BCC20 VA: 0x23BCC20 Slot: 16
	public virtual void set_CalendarType(GregorianCalendarTypes value) { }

	// RVA: 0x23BCC48 Offset: 0x23BCC48 VA: 0x23BCC48
	internal void M_CheckEra(ref int era) { }

	// RVA: 0x23BCCE4 Offset: 0x23BCCE4 VA: 0x23BCCE4 Slot: 7
	internal override void M_CheckYE(int year, ref int era) { }

	// RVA: 0x23BCD50 Offset: 0x23BCD50 VA: 0x23BCD50
	internal void M_CheckYME(int year, int month, ref int era) { }

	// RVA: 0x23BCE20 Offset: 0x23BCE20 VA: 0x23BCE20
	internal void M_CheckYMDE(int year, int month, int day, ref int era) { }

	// RVA: 0x23BCEC8 Offset: 0x23BCEC8 VA: 0x23BCEC8 Slot: 8
	public override int GetDayOfMonth(DateTime time) { }

	// RVA: 0x23BCED4 Offset: 0x23BCED4 VA: 0x23BCED4 Slot: 9
	public override DayOfWeek GetDayOfWeek(DateTime time) { }

	// RVA: 0x23BCF3C Offset: 0x23BCF3C VA: 0x23BCF3C Slot: 10
	public override int GetDaysInMonth(int year, int month, int era) { }

	// RVA: 0x23BCF98 Offset: 0x23BCF98 VA: 0x23BCF98 Slot: 11
	public override int GetEra(DateTime time) { }

	// RVA: 0x23BCFA0 Offset: 0x23BCFA0 VA: 0x23BCFA0 Slot: 12
	public override int GetMonth(DateTime time) { }

	// RVA: 0x23BCFAC Offset: 0x23BCFAC VA: 0x23BCFAC Slot: 13
	public override int GetYear(DateTime time) { }

	// RVA: 0x23BCFB8 Offset: 0x23BCFB8 VA: 0x23BCFB8 Slot: 15
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC5100 Offset: 0xBC5100 VA: 0xBC5100
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 257
{
	// Fields
	public int value__; // 0x0
	public const GregorianCalendarTypes Localized = 1;
	public const GregorianCalendarTypes USEnglish = 2;
	public const GregorianCalendarTypes MiddleEastFrench = 9;
	public const GregorianCalendarTypes Arabic = 10;
	public const GregorianCalendarTypes TransliteratedEnglish = 11;
	public const GregorianCalendarTypes TransliteratedFrench = 12;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC5114 Offset: 0xBC5114 VA: 0xBC5114
