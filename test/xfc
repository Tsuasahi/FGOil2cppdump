	// RVA: 0x2243C2C Offset: 0x2243C2C VA: 0x2243C2C
	public static CategoryAttribute get_DragDrop() { }

	// RVA: 0x2243DD4 Offset: 0x2243DD4 VA: 0x2243DD4
	public static CategoryAttribute get_Focus() { }

	// RVA: 0x2243F7C Offset: 0x2243F7C VA: 0x2243F7C
	public static CategoryAttribute get_Format() { }

	// RVA: 0x2244124 Offset: 0x2244124 VA: 0x2244124
	public static CategoryAttribute get_Key() { }

	// RVA: 0x22442CC Offset: 0x22442CC VA: 0x22442CC
	public static CategoryAttribute get_Layout() { }

	// RVA: 0x2244474 Offset: 0x2244474 VA: 0x2244474
	public static CategoryAttribute get_Mouse() { }

	// RVA: 0x224461C Offset: 0x224461C VA: 0x224461C
	public static CategoryAttribute get_WindowStyle() { }

	// RVA: 0x22447C4 Offset: 0x22447C4 VA: 0x22447C4 Slot: 7
	protected virtual string GetLocalizedString(string value) { }

	// RVA: 0x22447CC Offset: 0x22447CC VA: 0x22447CC
	public string get_Category() { }

	// RVA: 0x224481C Offset: 0x224481C VA: 0x224481C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2244928 Offset: 0x2244928 VA: 0x2244928 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2244958 Offset: 0x2244958 VA: 0x2244958 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class CharConverter : TypeConverter // TypeDefIndex: 1188
{
	// Methods

	// RVA: 0x2244A3C Offset: 0x2244A3C VA: 0x2244A3C
	public void .ctor() { }

	// RVA: 0x2244A44 Offset: 0x2244A44 VA: 0x2244A44 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x2244AF8 Offset: 0x2244AF8 VA: 0x2244AF8 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x2244CBC Offset: 0x2244CBC VA: 0x2244CBC Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public enum CollectionChangeAction // TypeDefIndex: 1189
{
	// Fields
	public int value__; // 0x0
	public const CollectionChangeAction Add = 1;
	public const CollectionChangeAction Remove = 2;
	public const CollectionChangeAction Refresh = 3;
}

// Namespace: System.ComponentModel
public class CollectionChangeEventArgs : EventArgs // TypeDefIndex: 1190
{
	// Fields
	private CollectionChangeAction changeAction; // 0x10
	private object theElement; // 0x18

	// Properties
	public virtual CollectionChangeAction Action { get; }
	public virtual object Element { get; }

	// Methods

	// RVA: 0x2244DF4 Offset: 0x2244DF4 VA: 0x2244DF4
	public void .ctor(CollectionChangeAction action, object element) { }

	// RVA: 0x2244E78 Offset: 0x2244E78 VA: 0x2244E78 Slot: 4
	public virtual CollectionChangeAction get_Action() { }

	// RVA: 0x2244E80 Offset: 0x2244E80 VA: 0x2244E80 Slot: 5
	public virtual object get_Element() { }
}

// Namespace: System.ComponentModel
public class CollectionConverter : TypeConverter // TypeDefIndex: 1191
{
	// Methods

	// RVA: 0x223E7A8 Offset: 0x223E7A8 VA: 0x223E7A8
	public void .ctor() { }

	// RVA: 0x223E95C Offset: 0x223E95C VA: 0x223E95C Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x2245294 Offset: 0x2245294 VA: 0x2245294 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	// RVA: 0x224529C Offset: 0x224529C VA: 0x224529C Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBCFCBC Offset: 0xBCFCBC VA: 0xBCFCBC
[DesignerCategoryAttribute] // RVA: 0xBCFCBC Offset: 0xBCFCBC VA: 0xBCFCBC
[ClassInterfaceAttribute] // RVA: 0xBCFCBC Offset: 0xBCFCBC VA: 0xBCFCBC
public class Component : MarshalByRefObject, IDisposable, IComponent // TypeDefIndex: 1192
{
	// Fields
	private EventHandlerList event_handlers; // 0x18
	private ISite mySite; // 0x20
	private object disposedEvent; // 0x28

	// Properties
	protected virtual bool CanRaiseEvents { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xBD2950 Offset: 0xBD2950 VA: 0xBD2950
	[BrowsableAttribute] // RVA: 0xBD2950 Offset: 0xBD2950 VA: 0xBD2950
	public virtual ISite Site { get; set; }
	[BrowsableAttribute] // RVA: 0xBD2990 Offset: 0xBD2990 VA: 0xBD2990
	[DesignerSerializationVisibilityAttribute] // RVA: 0xBD2990 Offset: 0xBD2990 VA: 0xBD2990
	public IContainer Container { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xBD29D0 Offset: 0xBD29D0 VA: 0xBD29D0
	[BrowsableAttribute] // RVA: 0xBD29D0 Offset: 0xBD29D0 VA: 0xBD29D0
	protected bool DesignMode { get; }
	protected EventHandlerList Events { get; }

	// Methods

	// RVA: 0x22452A4 Offset: 0x22452A4 VA: 0x22452A4
	public void .ctor() { }

	// RVA: 0x2245314 Offset: 0x2245314 VA: 0x2245314 Slot: 7
	public void add_Disposed(EventHandler value) { }

	// RVA: 0x22454B8 Offset: 0x22454B8 VA: 0x22454B8 Slot: 8
	public void remove_Disposed(EventHandler value) { }

	// RVA: 0x2245554 Offset: 0x2245554 VA: 0x2245554 Slot: 11
	protected virtual bool get_CanRaiseEvents() { }

	// RVA: 0x224555C Offset: 0x224555C VA: 0x224555C Slot: 12
	public virtual ISite get_Site() { }

	// RVA: 0x2245564 Offset: 0x2245564 VA: 0x2245564 Slot: 13
	public virtual void set_Site(ISite value) { }

	// RVA: 0x224556C Offset: 0x224556C VA: 0x224556C
	public IContainer get_Container() { }

	// RVA: 0x224562C Offset: 0x224562C VA: 0x224562C
	protected bool get_DesignMode() { }

	// RVA: 0x224535C Offset: 0x224535C VA: 0x224535C
	protected EventHandlerList get_Events() { }

	// RVA: 0x22456F4 Offset: 0x22456F4 VA: 0x22456F4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2245778 Offset: 0x2245778 VA: 0x2245778 Slot: 6
	public void Dispose() { }

	// RVA: 0x22457B0 Offset: 0x22457B0 VA: 0x22457B0 Slot: 14
	protected virtual void Dispose(bool release_all) { }

	// RVA: 0x2245A98 Offset: 0x2245A98 VA: 0x2245A98 Slot: 15
	protected virtual object GetService(Type service) { }

	// RVA: 0x2245B68 Offset: 0x2245B68 VA: 0x2245B68 Slot: 3
	public override string ToString() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBCFD20 Offset: 0xBCFD20 VA: 0xBCFD20
[DefaultMemberAttribute] // RVA: 0xBCFD20 Offset: 0xBCFD20 VA: 0xBCFD20
public class ComponentCollection : ReadOnlyCollectionBase // TypeDefIndex: 1193
{
	// Properties
	public virtual IComponent Item { get; }
	public virtual IComponent Item { get; }

	// Methods

	// RVA: 0x2245CB8 Offset: 0x2245CB8 VA: 0x2245CB8
	public void .ctor(IComponent[] components) { }

	// RVA: 0x2245D0C Offset: 0x2245D0C VA: 0x2245D0C Slot: 11
	public virtual IComponent get_Item(int index) { }

	// RVA: 0x2245DFC Offset: 0x2245DFC VA: 0x2245DFC Slot: 12
	public virtual IComponent get_Item(string name) { }

	// RVA: 0x22462D4 Offset: 0x22462D4 VA: 0x22462D4
	public void CopyTo(IComponent[] array, int index) { }
}

// Namespace: System.ComponentModel
public class ComponentConverter : ReferenceConverter // TypeDefIndex: 1194
{
	// Methods

	// RVA: 0x2246328 Offset: 0x2246328 VA: 0x2246328
	public void .ctor(Type type) { }

	// RVA: 0x2246330 Offset: 0x2246330 VA: 0x2246330 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	// RVA: 0x22463A8 Offset: 0x22463A8 VA: 0x22463A8 Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
public class CultureInfoConverter : TypeConverter // TypeDefIndex: 1195
{
	// Fields
	private TypeConverter.StandardValuesCollection _standardValues; // 0x10

	// Methods

	// RVA: 0x2247AB8 Offset: 0x2247AB8 VA: 0x2247AB8
	public void .ctor() { }

	// RVA: 0x2247AC0 Offset: 0x2247AC0 VA: 0x2247AC0 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x2247B74 Offset: 0x2247B74 VA: 0x2247B74 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x2247C6C Offset: 0x2247C6C VA: 0x2247C6C Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x2247F70 Offset: 0x2247F70 VA: 0x2247F70 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x2248420 Offset: 0x2248420 VA: 0x2248420 Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x22485A0 Offset: 0x22485A0 VA: 0x22485A0 Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x22485A8 Offset: 0x22485A8 VA: 0x22485A8 Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }
}

// Namespace: 
private class CultureInfoConverter.CultureInfoComparer : IComparer // TypeDefIndex: 1196
{
	// Methods

	// RVA: 0x2248598 Offset: 0x2248598 VA: 0x2248598
	public void .ctor() { }

	// RVA: 0x22485B0 Offset: 0x22485B0 VA: 0x22485B0 Slot: 4
	public int Compare(object first, object second) { }
}

// Namespace: System.ComponentModel
public abstract class CustomTypeDescriptor : ICustomTypeDescriptor // TypeDefIndex: 1197
{
	// Fields
	private ICustomTypeDescriptor _parent; // 0x10

	// Methods

	// RVA: 0x2248880 Offset: 0x2248880 VA: 0x2248880
	protected void .ctor() { }

	// RVA: 0x2248888 Offset: 0x2248888 VA: 0x2248888
	protected void .ctor(ICustomTypeDescriptor parent) { }

	// RVA: 0x22488B4 Offset: 0x22488B4 VA: 0x22488B4 Slot: 16
	public virtual AttributeCollection GetAttributes() { }

	// RVA: 0x2248998 Offset: 0x2248998 VA: 0x2248998 Slot: 17
	public virtual string GetClassName() { }

	// RVA: 0x2248A58 Offset: 0x2248A58 VA: 0x2248A58 Slot: 18
	public virtual string GetComponentName() { }

	// RVA: 0x2248B18 Offset: 0x2248B18 VA: 0x2248B18 Slot: 19
	public virtual TypeConverter GetConverter() { }

	// RVA: 0x2248BF4 Offset: 0x2248BF4 VA: 0x2248BF4 Slot: 20
	public virtual EventDescriptor GetDefaultEvent() { }

	// RVA: 0x2248CB4 Offset: 0x2248CB4 VA: 0x2248CB4 Slot: 21
	public virtual PropertyDescriptor GetDefaultProperty() { }

	// RVA: 0x2248D74 Offset: 0x2248D74 VA: 0x2248D74 Slot: 22
	public virtual object GetEditor(Type editorBaseType) { }

	// RVA: 0x2248E48 Offset: 0x2248E48 VA: 0x2248E48 Slot: 23
	public virtual EventDescriptorCollection GetEvents() { }

	// RVA: 0x2248F30 Offset: 0x2248F30 VA: 0x2248F30 Slot: 24
	public virtual EventDescriptorCollection GetEvents(Attribute[] attributes) { }

	// RVA: 0x224902C Offset: 0x224902C VA: 0x224902C Slot: 25
	public virtual PropertyDescriptorCollection GetProperties() { }

	// RVA: 0x2249114 Offset: 0x2249114 VA: 0x2249114 Slot: 26
	public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes) { }

	// RVA: 0x2249210 Offset: 0x2249210 VA: 0x2249210 Slot: 27
	public virtual object GetPropertyOwner(PropertyDescriptor pd) { }
}

// Namespace: System.ComponentModel
public class DateTimeConverter : TypeConverter // TypeDefIndex: 1198
{
	// Methods

	// RVA: 0x22492E4 Offset: 0x22492E4 VA: 0x22492E4
	public void .ctor() { }

	// RVA: 0x22492EC Offset: 0x22492EC VA: 0x22492EC Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x22493A0 Offset: 0x22493A0 VA: 0x22493A0 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x2249454 Offset: 0x2249454 VA: 0x2249454 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x22497B8 Offset: 0x22497B8 VA: 0x22497B8 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1199
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x2249D68 Offset: 0x2249D68 VA: 0x2249D68
	public void .ctor() { }

	// RVA: 0x2249DF0 Offset: 0x2249DF0 VA: 0x2249DF0 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x2249DF8 Offset: 0x2249DF8 VA: 0x2249DF8 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x2249EA8 Offset: 0x2249EA8 VA: 0x2249EA8 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x224A158 Offset: 0x224A158 VA: 0x224A158 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x224A1E8 Offset: 0x224A1E8 VA: 0x224A1E8 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFD70 Offset: 0xBCFD70 VA: 0xBCFD70
public sealed class DefaultEventAttribute : Attribute // TypeDefIndex: 1200
{
	// Fields
	private string eventName; // 0x10
	public static readonly DefaultEventAttribute Default; // 0x0

	// Properties
	public string Name { get; }

	// Methods

	// RVA: 0x224A284 Offset: 0x224A284 VA: 0x224A284
	public void .ctor(string name) { }

	// RVA: 0x224A2B0 Offset: 0x224A2B0 VA: 0x224A2B0
	private static void .cctor() { }

	// RVA: 0x224A318 Offset: 0x224A318 VA: 0x224A318
	public string get_Name() { }

	// RVA: 0x224A320 Offset: 0x224A320 VA: 0x224A320 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x224A3CC Offset: 0x224A3CC VA: 0x224A3CC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFD84 Offset: 0xBCFD84 VA: 0xBCFD84
public sealed class DefaultPropertyAttribute : Attribute // TypeDefIndex: 1201
{
	// Fields
	private string property_name; // 0x10
	public static readonly DefaultPropertyAttribute Default; // 0x0

	// Properties
	public string Name { get; }

	// Methods

	// RVA: 0x224A3D4 Offset: 0x224A3D4 VA: 0x224A3D4
	public void .ctor(string name) { }

	// RVA: 0x224A400 Offset: 0x224A400 VA: 0x224A400
	private static void .cctor() { }

	// RVA: 0x224A468 Offset: 0x224A468 VA: 0x224A468
	public string get_Name() { }

	// RVA: 0x224A470 Offset: 0x224A470 VA: 0x224A470 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x224A51C Offset: 0x224A51C VA: 0x224A51C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFD98 Offset: 0xBCFD98 VA: 0xBCFD98
public class DefaultValueAttribute : Attribute // TypeDefIndex: 1202
{
	// Fields
	private object DefaultValue; // 0x10

	// Properties
	public virtual object Value { get; }

	// Methods

	// RVA: 0x224A524 Offset: 0x224A524 VA: 0x224A524
	public void .ctor(bool value) { }

	// RVA: 0x224A598 Offset: 0x224A598 VA: 0x224A598
	public void .ctor(byte value) { }

	// RVA: 0x224A60C Offset: 0x224A60C VA: 0x224A60C
	public void .ctor(char value) { }

	// RVA: 0x224A680 Offset: 0x224A680 VA: 0x224A680
	public void .ctor(double value) { }

	// RVA: 0x224A6F4 Offset: 0x224A6F4 VA: 0x224A6F4
	public void .ctor(short value) { }

	// RVA: 0x224A768 Offset: 0x224A768 VA: 0x224A768
	public void .ctor(int value) { }

	// RVA: 0x224A7DC Offset: 0x224A7DC VA: 0x224A7DC
	public void .ctor(long value) { }

	// RVA: 0x224A850 Offset: 0x224A850 VA: 0x224A850
	public void .ctor(object value) { }

	// RVA: 0x224A87C Offset: 0x224A87C VA: 0x224A87C
	public void .ctor(float value) { }

	// RVA: 0x224A8F0 Offset: 0x224A8F0 VA: 0x224A8F0
	public void .ctor(string value) { }

	// RVA: 0x224A91C Offset: 0x224A91C VA: 0x224A91C
	public void .ctor(Type type, string value) { }

	// RVA: 0x224AB10 Offset: 0x224AB10 VA: 0x224AB10 Slot: 7
	public virtual object get_Value() { }

	// RVA: 0x224AB18 Offset: 0x224AB18 VA: 0x224AB18
	protected void SetValue(object value) { }

	// RVA: 0x224AB20 Offset: 0x224AB20 VA: 0x224AB20 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224AC18 Offset: 0x224AC18 VA: 0x224AC18 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFDAC Offset: 0xBCFDAC VA: 0xBCFDAC
public class DescriptionAttribute : Attribute // TypeDefIndex: 1203
{
	// Fields
	private string desc; // 0x10
	public static readonly DescriptionAttribute Default; // 0x0

	// Properties
	public virtual string Description { get; }
	protected string DescriptionValue { get; set; }

	// Methods

	// RVA: 0x224AC3C Offset: 0x224AC3C VA: 0x224AC3C
	public void .ctor() { }

	// RVA: 0x224ACB8 Offset: 0x224ACB8 VA: 0x224ACB8
	public void .ctor(string name) { }

	// RVA: 0x224ACE4 Offset: 0x224ACE4 VA: 0x224ACE4
	private static void .cctor() { }

	// RVA: 0x224AD44 Offset: 0x224AD44 VA: 0x224AD44 Slot: 7
	public virtual string get_Description() { }

	// RVA: 0x224AD4C Offset: 0x224AD4C VA: 0x224AD4C
	protected string get_DescriptionValue() { }

	// RVA: 0x224AD54 Offset: 0x224AD54 VA: 0x224AD54
	protected void set_DescriptionValue(string value) { }

	// RVA: 0x224AD5C Offset: 0x224AD5C VA: 0x224AD5C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224AE44 Offset: 0x224AE44 VA: 0x224AE44 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224AE74 Offset: 0x224AE74 VA: 0x224AE74 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFDC0 Offset: 0xBCFDC0 VA: 0xBCFDC0
public sealed class DesignOnlyAttribute : Attribute // TypeDefIndex: 1204
{
	// Fields
	private bool design_only; // 0x10
	public static readonly DesignOnlyAttribute Default; // 0x0
	public static readonly DesignOnlyAttribute No; // 0x8
	public static readonly DesignOnlyAttribute Yes; // 0x10

	// Properties
	public bool IsDesignOnly { get; }

	// Methods

	// RVA: 0x224C7B0 Offset: 0x224C7B0 VA: 0x224C7B0
	public void .ctor(bool design_only) { }

	// RVA: 0x224C7E0 Offset: 0x224C7E0 VA: 0x224C7E0
	private static void .cctor() { }

	// RVA: 0x224C890 Offset: 0x224C890 VA: 0x224C890
	public bool get_IsDesignOnly() { }

	// RVA: 0x224C898 Offset: 0x224C898 VA: 0x224C898 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224C938 Offset: 0x224C938 VA: 0x224C938 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224C944 Offset: 0x224C944 VA: 0x224C944 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFDD4 Offset: 0xBCFDD4 VA: 0xBCFDD4
public sealed class DesignTimeVisibleAttribute : Attribute // TypeDefIndex: 1205
{
	// Fields
	private bool visible; // 0x10
	public static readonly DesignTimeVisibleAttribute Default; // 0x0
	public static readonly DesignTimeVisibleAttribute No; // 0x8
	public static readonly DesignTimeVisibleAttribute Yes; // 0x10

	// Properties
	public bool Visible { get; }

	// Methods

	// RVA: 0x224C9DC Offset: 0x224C9DC VA: 0x224C9DC
	public void .ctor() { }

	// RVA: 0x224CA08 Offset: 0x224CA08 VA: 0x224CA08
	public void .ctor(bool visible) { }

	// RVA: 0x224CA38 Offset: 0x224CA38 VA: 0x224CA38
	private static void .cctor() { }

	// RVA: 0x224CAF0 Offset: 0x224CAF0 VA: 0x224CAF0
	public bool get_Visible() { }

	// RVA: 0x224CAF8 Offset: 0x224CAF8 VA: 0x224CAF8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224CB98 Offset: 0x224CB98 VA: 0x224CB98 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224CBA4 Offset: 0x224CBA4 VA: 0x224CBA4 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFDE8 Offset: 0xBCFDE8 VA: 0xBCFDE8
public sealed class DesignerAttribute : Attribute // TypeDefIndex: 1206
{
	// Fields
	private string name; // 0x10
	private string basetypename; // 0x18

	// Properties
	public string DesignerBaseTypeName { get; }
	public string DesignerTypeName { get; }
	public override object TypeId { get; }

	// Methods

	// RVA: 0x224CC3C Offset: 0x224CC3C VA: 0x224CC3C
	public void .ctor(string designerTypeName) { }

	// RVA: 0x224CD30 Offset: 0x224CD30 VA: 0x224CD30
	public void .ctor(Type designerType) { }

	// RVA: 0x224CD78 Offset: 0x224CD78 VA: 0x224CD78
	public void .ctor(string designerTypeName, Type designerBaseType) { }

	// RVA: 0x224CE6C Offset: 0x224CE6C VA: 0x224CE6C
	public void .ctor(Type designerType, Type designerBaseType) { }

	// RVA: 0x224CDD0 Offset: 0x224CDD0 VA: 0x224CDD0
	public void .ctor(string designerTypeName, string designerBaseTypeName) { }

	// RVA: 0x224CEE8 Offset: 0x224CEE8 VA: 0x224CEE8
	public string get_DesignerBaseTypeName() { }

	// RVA: 0x224CEF0 Offset: 0x224CEF0 VA: 0x224CEF0
	public string get_DesignerTypeName() { }

	// RVA: 0x224CEF8 Offset: 0x224CEF8 VA: 0x224CEF8 Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x224CFEC Offset: 0x224CFEC VA: 0x224CFEC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224D160 Offset: 0x224D160 VA: 0x224D160 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFE34 Offset: 0xBCFE34 VA: 0xBCFE34
public sealed class DesignerCategoryAttribute : Attribute // TypeDefIndex: 1207
{
	// Fields
	private string category; // 0x10
	public static readonly DesignerCategoryAttribute Component; // 0x0
	public static readonly DesignerCategoryAttribute Form; // 0x8
	public static readonly DesignerCategoryAttribute Generic; // 0x10
	public static readonly DesignerCategoryAttribute Default; // 0x18

	// Properties
	public override object TypeId { get; }
	public string Category { get; }

	// Methods

	// RVA: 0x224D1EC Offset: 0x224D1EC VA: 0x224D1EC
	public void .ctor() { }

	// RVA: 0x224D268 Offset: 0x224D268 VA: 0x224D268
	public void .ctor(string category) { }

	// RVA: 0x224D294 Offset: 0x224D294 VA: 0x224D294
	private static void .cctor() { }

	// RVA: 0x224D3C0 Offset: 0x224D3C0 VA: 0x224D3C0 Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x224D3C8 Offset: 0x224D3C8 VA: 0x224D3C8
	public string get_Category() { }

	// RVA: 0x224D3D0 Offset: 0x224D3D0 VA: 0x224D3D0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224D48C Offset: 0x224D48C VA: 0x224D48C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224D4BC Offset: 0x224D4BC VA: 0x224D4BC Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBCFE48 Offset: 0xBCFE48 VA: 0xBCFE48
public enum DesignerSerializationVisibility // TypeDefIndex: 1208
{
	// Fields
	public int value__; // 0x0
	public const DesignerSerializationVisibility Hidden = 0;
	public const DesignerSerializationVisibility Visible = 1;
	public const DesignerSerializationVisibility Content = 2;
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFE5C Offset: 0xBCFE5C VA: 0xBCFE5C
public sealed class DesignerSerializationVisibilityAttribute : Attribute // TypeDefIndex: 1209
{
	// Fields
	private DesignerSerializationVisibility visibility; // 0x10
	public static readonly DesignerSerializationVisibilityAttribute Default; // 0x0
	public static readonly DesignerSerializationVisibilityAttribute Content; // 0x8
	public static readonly DesignerSerializationVisibilityAttribute Hidden; // 0x10
	public static readonly DesignerSerializationVisibilityAttribute Visible; // 0x18

	// Properties
	public DesignerSerializationVisibility Visibility { get; }

	// Methods

	// RVA: 0x224D568 Offset: 0x224D568 VA: 0x224D568
	public void .ctor(DesignerSerializationVisibility vis) { }

	// RVA: 0x224D594 Offset: 0x224D594 VA: 0x224D594
	private static void .cctor() { }

	// RVA: 0x224D670 Offset: 0x224D670 VA: 0x224D670
	public DesignerSerializationVisibility get_Visibility() { }

	// RVA: 0x224D678 Offset: 0x224D678 VA: 0x224D678 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224D708 Offset: 0x224D708 VA: 0x224D708 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224D77C Offset: 0x224D77C VA: 0x224D77C Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFE70 Offset: 0xBCFE70 VA: 0xBCFE70
public class DisplayNameAttribute : Attribute // TypeDefIndex: 1210
{
	// Fields
	public static readonly DisplayNameAttribute Default; // 0x0
	private string attributeDisplayName; // 0x10

	// Properties
	public virtual string DisplayName { get; }
	protected string DisplayNameValue { get; set; }

	// Methods

	// RVA: 0x224D804 Offset: 0x224D804 VA: 0x224D804
	public void .ctor() { }

	// RVA: 0x224D880 Offset: 0x224D880 VA: 0x224D880
	public void .ctor(string displayName) { }

	// RVA: 0x224D8AC Offset: 0x224D8AC VA: 0x224D8AC
	private static void .cctor() { }

	// RVA: 0x224D90C Offset: 0x224D90C VA: 0x224D90C Slot: 5
	public override bool IsDefaultAttribute() { }

	// RVA: 0x224D934 Offset: 0x224D934 VA: 0x224D934 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224D964 Offset: 0x224D964 VA: 0x224D964 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224DA64 Offset: 0x224DA64 VA: 0x224DA64 Slot: 7
	public virtual string get_DisplayName() { }

	// RVA: 0x224DA6C Offset: 0x224DA6C VA: 0x224DA6C
	protected string get_DisplayNameValue() { }

	// RVA: 0x224DA74 Offset: 0x224DA74 VA: 0x224DA74
	protected void set_DisplayNameValue(string value) { }
}

// Namespace: System.ComponentModel
public class DoWorkEventArgs : EventArgs // TypeDefIndex: 1211
{
	// Fields
	private object arg; // 0x10
	private object result; // 0x18
	private bool cancel; // 0x20

	// Properties
	public object Argument { get; }
	public object Result { get; set; }
	public bool Cancel { get; set; }

	// Methods

	// RVA: 0x22412BC Offset: 0x22412BC VA: 0x22412BC
	public void .ctor(object argument) { }

	// RVA: 0x224DA7C Offset: 0x224DA7C VA: 0x224DA7C
	public object get_Argument() { }

	// RVA: 0x2241344 Offset: 0x2241344 VA: 0x2241344
	public object get_Result() { }

	// RVA: 0x224DA84 Offset: 0x224DA84 VA: 0x224DA84
	public void set_Result(object value) { }

	// RVA: 0x224134C Offset: 0x224134C VA: 0x224134C
	public bool get_Cancel() { }

	// RVA: 0x2241338 Offset: 0x2241338 VA: 0x2241338
	public void set_Cancel(bool value) { }
}

// Namespace: System.ComponentModel
public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1212
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x224DAD8 Offset: 0x224DAD8 VA: 0x224DAD8
	public void .ctor() { }

	// RVA: 0x224DB60 Offset: 0x224DB60 VA: 0x224DB60 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x224DB68 Offset: 0x224DB68 VA: 0x224DB68 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x224DBF0 Offset: 0x224DBF0 VA: 0x224DBF0 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFE84 Offset: 0xBCFE84 VA: 0xBCFE84
public sealed class EditorAttribute : Attribute // TypeDefIndex: 1213
{
	// Fields
	private string name; // 0x10
	private string basename; // 0x18

	// Properties
	public string EditorBaseTypeName { get; }
	public string EditorTypeName { get; }
	public override object TypeId { get; }

	// Methods

	// RVA: 0x224DC68 Offset: 0x224DC68 VA: 0x224DC68
	public void .ctor() { }

	// RVA: 0x224DCE4 Offset: 0x224DCE4 VA: 0x224DCE4
	public void .ctor(string typeName, string baseTypeName) { }

	// RVA: 0x224DD1C Offset: 0x224DD1C VA: 0x224DD1C
	public void .ctor(string typeName, Type baseType) { }

	// RVA: 0x224DD7C Offset: 0x224DD7C VA: 0x224DD7C
	public void .ctor(Type type, Type baseType) { }

	// RVA: 0x224DE00 Offset: 0x224DE00 VA: 0x224DE00
	public string get_EditorBaseTypeName() { }

	// RVA: 0x224DE08 Offset: 0x224DE08 VA: 0x224DE08
	public string get_EditorTypeName() { }

	// RVA: 0x224DE10 Offset: 0x224DE10 VA: 0x224DE10 Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x224DE18 Offset: 0x224DE18 VA: 0x224DE18 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224DF8C Offset: 0x224DF8C VA: 0x224DF8C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBCFED0 Offset: 0xBCFED0 VA: 0xBCFED0
public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1214
{
	// Fields
	private EditorBrowsableState state; // 0x10

	// Properties
	public EditorBrowsableState State { get; }

	// Methods

	// RVA: 0x224E018 Offset: 0x224E018 VA: 0x224E018
	public void .ctor() { }

	// RVA: 0x224E040 Offset: 0x224E040 VA: 0x224E040
	public void .ctor(EditorBrowsableState state) { }

	// RVA: 0x224E06C Offset: 0x224E06C VA: 0x224E06C
	public EditorBrowsableState get_State() { }

	// RVA: 0x224E074 Offset: 0x224E074 VA: 0x224E074 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224E104 Offset: 0x224E104 VA: 0x224E104 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
public enum EditorBrowsableState // TypeDefIndex: 1215
{
	// Fields
	public int value__; // 0x0
	public const EditorBrowsableState Always = 0;
	public const EditorBrowsableState Never = 1;
	public const EditorBrowsableState Advanced = 2;
}

// Namespace: System.ComponentModel
public class EnumConverter : TypeConverter // TypeDefIndex: 1216
{
	// Fields
	private Type type; // 0x10
	private TypeConverter.StandardValuesCollection stdValues; // 0x18

	// Properties
	protected virtual IComparer Comparer { get; }
	protected Type EnumType { get; }
	protected TypeConverter.StandardValuesCollection Values { get; set; }
	private bool IsFlags { get; }

	// Methods

	// RVA: 0x224E178 Offset: 0x224E178 VA: 0x224E178
	public void .ctor(Type type) { }

	// RVA: 0x224E1A4 Offset: 0x224E1A4 VA: 0x224E1A4 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x224E29C Offset: 0x224E29C VA: 0x224E29C Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x224F1DC Offset: 0x224F1DC VA: 0x224F1DC Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x224F2D4 Offset: 0x224F2D4 VA: 0x224F2D4 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x224F81C Offset: 0x224F81C VA: 0x224F81C Slot: 15
	public override bool IsValid(ITypeDescriptorContext context, object value) { }

	// RVA: 0x224F898 Offset: 0x224F898 VA: 0x224F898 Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }

	// RVA: 0x224F8A0 Offset: 0x224F8A0 VA: 0x224F8A0 Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x224F8BC Offset: 0x224F8BC VA: 0x224F8BC Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x224F970 Offset: 0x224F970 VA: 0x224F970 Slot: 16
	protected virtual IComparer get_Comparer() { }

	// RVA: 0x224F9D4 Offset: 0x224F9D4 VA: 0x224F9D4
	protected Type get_EnumType() { }

	// RVA: 0x224F9DC Offset: 0x224F9DC VA: 0x224F9DC
	protected TypeConverter.StandardValuesCollection get_Values() { }

	// RVA: 0x224F9E4 Offset: 0x224F9E4 VA: 0x224F9E4
	protected void set_Values(TypeConverter.StandardValuesCollection value) { }

	// RVA: 0x224F020 Offset: 0x224F020 VA: 0x224F020
	private ArgumentException CreateValueNotValidException(object value) { }

	// RVA: 0x224EF80 Offset: 0x224EF80 VA: 0x224EF80
	private bool get_IsFlags() { }
}

// Namespace: 
private class EnumConverter.EnumComparer : IComparer // TypeDefIndex: 1217
{
	// Methods

	// RVA: 0x224F9CC Offset: 0x224F9CC VA: 0x224F9CC
	public void .ctor() { }

	// RVA: 0x224F9EC Offset: 0x224F9EC VA: 0x224F9EC Slot: 4
	private int System.Collections.IComparer.Compare(object compareObject1, object compareObject2) { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBCFEE4 Offset: 0xBCFEE4 VA: 0xBCFEE4
public abstract class EventDescriptor : MemberDescriptor // TypeDefIndex: 1218
{
	// Properties
	public abstract Type ComponentType { get; }
	public abstract Type EventType { get; }
	public abstract bool IsMulticast { get; }

	// Methods

	// RVA: 0x224FB40 Offset: 0x224FB40 VA: 0x224FB40
	protected void .ctor(MemberDescriptor desc) { }

	// RVA: 0x224FB48 Offset: 0x224FB48 VA: 0x224FB48
	protected void .ctor(MemberDescriptor desc, Attribute[] attrs) { }

	// RVA: 0x224FB50 Offset: 0x224FB50 VA: 0x224FB50
	protected void .ctor(string str, Attribute[] attrs) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void AddEventHandler(object component, Delegate value);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void RemoveEventHandler(object component, Delegate value);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract Type get_ComponentType();
