
	// RVA: 0x10B4FBC Offset: 0x10B4FBC VA: 0x10B4FBC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10B4FEC Offset: 0x10B4FEC VA: 0x10B4FEC Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class CharConverter : TypeConverter // TypeDefIndex: 1188
{
	// Methods

	// RVA: 0x10B50D0 Offset: 0x10B50D0 VA: 0x10B50D0
	public void .ctor() { }

	// RVA: 0x10B50D8 Offset: 0x10B50D8 VA: 0x10B50D8 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x10B518C Offset: 0x10B518C VA: 0x10B518C Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x10B5350 Offset: 0x10B5350 VA: 0x10B5350 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public enum CollectionChangeAction // TypeDefIndex: 1189
{
	// Fields
	public int value__; // 0x0
	public const CollectionChangeAction Add = 1;
	public const CollectionChangeAction Remove = 2;
	public const CollectionChangeAction Refresh = 3;
}

// Namespace: System.ComponentModel
public class CollectionChangeEventArgs : EventArgs // TypeDefIndex: 1190
{
	// Fields
	private CollectionChangeAction changeAction; // 0x10
	private object theElement; // 0x18

	// Properties
	public virtual CollectionChangeAction Action { get; }
	public virtual object Element { get; }

	// Methods

	// RVA: 0x10B5488 Offset: 0x10B5488 VA: 0x10B5488
	public void .ctor(CollectionChangeAction action, object element) { }

	// RVA: 0x10B550C Offset: 0x10B550C VA: 0x10B550C Slot: 4
	public virtual CollectionChangeAction get_Action() { }

	// RVA: 0x10B5514 Offset: 0x10B5514 VA: 0x10B5514 Slot: 5
	public virtual object get_Element() { }
}

// Namespace: System.ComponentModel
public class CollectionConverter : TypeConverter // TypeDefIndex: 1191
{
	// Methods

	// RVA: 0x10AEE3C Offset: 0x10AEE3C VA: 0x10AEE3C
	public void .ctor() { }

	// RVA: 0x10AEFF0 Offset: 0x10AEFF0 VA: 0x10AEFF0 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x10B5928 Offset: 0x10B5928 VA: 0x10B5928 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	// RVA: 0x10B5930 Offset: 0x10B5930 VA: 0x10B5930 Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3BDE4 Offset: 0xC3BDE4 VA: 0xC3BDE4
[DesignerCategoryAttribute] // RVA: 0xC3BDE4 Offset: 0xC3BDE4 VA: 0xC3BDE4
[ClassInterfaceAttribute] // RVA: 0xC3BDE4 Offset: 0xC3BDE4 VA: 0xC3BDE4
public class Component : MarshalByRefObject, IDisposable, IComponent // TypeDefIndex: 1192
{
	// Fields
	private EventHandlerList event_handlers; // 0x18
	private ISite mySite; // 0x20
	private object disposedEvent; // 0x28

	// Properties
	protected virtual bool CanRaiseEvents { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EA78 Offset: 0xC3EA78 VA: 0xC3EA78
	[BrowsableAttribute] // RVA: 0xC3EA78 Offset: 0xC3EA78 VA: 0xC3EA78
	public virtual ISite Site { get; set; }
	[BrowsableAttribute] // RVA: 0xC3EAB8 Offset: 0xC3EAB8 VA: 0xC3EAB8
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EAB8 Offset: 0xC3EAB8 VA: 0xC3EAB8
	public IContainer Container { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EAF8 Offset: 0xC3EAF8 VA: 0xC3EAF8
	[BrowsableAttribute] // RVA: 0xC3EAF8 Offset: 0xC3EAF8 VA: 0xC3EAF8
	protected bool DesignMode { get; }
	protected EventHandlerList Events { get; }

	// Methods

	// RVA: 0x10B5938 Offset: 0x10B5938 VA: 0x10B5938
	public void .ctor() { }

	// RVA: 0x10B59A8 Offset: 0x10B59A8 VA: 0x10B59A8 Slot: 7
	public void add_Disposed(EventHandler value) { }

	// RVA: 0x10B5B4C Offset: 0x10B5B4C VA: 0x10B5B4C Slot: 8
	public void remove_Disposed(EventHandler value) { }

	// RVA: 0x10B5BE8 Offset: 0x10B5BE8 VA: 0x10B5BE8 Slot: 11
	protected virtual bool get_CanRaiseEvents() { }

	// RVA: 0x10B5BF0 Offset: 0x10B5BF0 VA: 0x10B5BF0 Slot: 12
	public virtual ISite get_Site() { }

	// RVA: 0x10B5BF8 Offset: 0x10B5BF8 VA: 0x10B5BF8 Slot: 13
	public virtual void set_Site(ISite value) { }

	// RVA: 0x10B5C00 Offset: 0x10B5C00 VA: 0x10B5C00
	public IContainer get_Container() { }

	// RVA: 0x10B5CC0 Offset: 0x10B5CC0 VA: 0x10B5CC0
	protected bool get_DesignMode() { }

	// RVA: 0x10B59F0 Offset: 0x10B59F0 VA: 0x10B59F0
	protected EventHandlerList get_Events() { }

	// RVA: 0x10B5D88 Offset: 0x10B5D88 VA: 0x10B5D88 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10B5E0C Offset: 0x10B5E0C VA: 0x10B5E0C Slot: 6
	public void Dispose() { }

	// RVA: 0x10B5E44 Offset: 0x10B5E44 VA: 0x10B5E44 Slot: 14
	protected virtual void Dispose(bool release_all) { }

	// RVA: 0x10B612C Offset: 0x10B612C VA: 0x10B612C Slot: 15
	protected virtual object GetService(Type service) { }

	// RVA: 0x10B61FC Offset: 0x10B61FC VA: 0x10B61FC Slot: 3
	public override string ToString() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3BE48 Offset: 0xC3BE48 VA: 0xC3BE48
[DefaultMemberAttribute] // RVA: 0xC3BE48 Offset: 0xC3BE48 VA: 0xC3BE48
public class ComponentCollection : ReadOnlyCollectionBase // TypeDefIndex: 1193
{
	// Properties
	public virtual IComponent Item { get; }
	public virtual IComponent Item { get; }

	// Methods

	// RVA: 0x10B634C Offset: 0x10B634C VA: 0x10B634C
	public void .ctor(IComponent[] components) { }

	// RVA: 0x10B63A0 Offset: 0x10B63A0 VA: 0x10B63A0 Slot: 11
	public virtual IComponent get_Item(int index) { }

	// RVA: 0x10B6490 Offset: 0x10B6490 VA: 0x10B6490 Slot: 12
	public virtual IComponent get_Item(string name) { }

	// RVA: 0x10B6968 Offset: 0x10B6968 VA: 0x10B6968
	public void CopyTo(IComponent[] array, int index) { }
}

// Namespace: System.ComponentModel
public class ComponentConverter : ReferenceConverter // TypeDefIndex: 1194
{
	// Methods

	// RVA: 0x10B69BC Offset: 0x10B69BC VA: 0x10B69BC
	public void .ctor(Type type) { }

	// RVA: 0x10B69C4 Offset: 0x10B69C4 VA: 0x10B69C4 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	// RVA: 0x10B6A3C Offset: 0x10B6A3C VA: 0x10B6A3C Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
public class CultureInfoConverter : TypeConverter // TypeDefIndex: 1195
{
	// Fields
	private TypeConverter.StandardValuesCollection _standardValues; // 0x10

	// Methods

	// RVA: 0x10B814C Offset: 0x10B814C VA: 0x10B814C
	public void .ctor() { }

	// RVA: 0x10B8154 Offset: 0x10B8154 VA: 0x10B8154 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x10B8208 Offset: 0x10B8208 VA: 0x10B8208 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x10B8300 Offset: 0x10B8300 VA: 0x10B8300 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x10B8604 Offset: 0x10B8604 VA: 0x10B8604 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x10B8AB4 Offset: 0x10B8AB4 VA: 0x10B8AB4 Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x10B8C34 Offset: 0x10B8C34 VA: 0x10B8C34 Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x10B8C3C Offset: 0x10B8C3C VA: 0x10B8C3C Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }
}

// Namespace: 
private class CultureInfoConverter.CultureInfoComparer : IComparer // TypeDefIndex: 1196
{
	// Methods

	// RVA: 0x10B8C2C Offset: 0x10B8C2C VA: 0x10B8C2C
	public void .ctor() { }

	// RVA: 0x10B8C44 Offset: 0x10B8C44 VA: 0x10B8C44 Slot: 4
	public int Compare(object first, object second) { }
}

// Namespace: System.ComponentModel
public abstract class CustomTypeDescriptor : ICustomTypeDescriptor // TypeDefIndex: 1197
{
	// Fields
	private ICustomTypeDescriptor _parent; // 0x10

	// Methods

	// RVA: 0x10B8F14 Offset: 0x10B8F14 VA: 0x10B8F14
	protected void .ctor() { }

	// RVA: 0x10B8F1C Offset: 0x10B8F1C VA: 0x10B8F1C
	protected void .ctor(ICustomTypeDescriptor parent) { }

	// RVA: 0x10B8F48 Offset: 0x10B8F48 VA: 0x10B8F48 Slot: 16
	public virtual AttributeCollection GetAttributes() { }

	// RVA: 0x10B902C Offset: 0x10B902C VA: 0x10B902C Slot: 17
	public virtual string GetClassName() { }

	// RVA: 0x10B90EC Offset: 0x10B90EC VA: 0x10B90EC Slot: 18
	public virtual string GetComponentName() { }

	// RVA: 0x10B91AC Offset: 0x10B91AC VA: 0x10B91AC Slot: 19
	public virtual TypeConverter GetConverter() { }

	// RVA: 0x10B9288 Offset: 0x10B9288 VA: 0x10B9288 Slot: 20
	public virtual EventDescriptor GetDefaultEvent() { }

	// RVA: 0x10B9348 Offset: 0x10B9348 VA: 0x10B9348 Slot: 21
	public virtual PropertyDescriptor GetDefaultProperty() { }

	// RVA: 0x10B9408 Offset: 0x10B9408 VA: 0x10B9408 Slot: 22
	public virtual object GetEditor(Type editorBaseType) { }

	// RVA: 0x10B94DC Offset: 0x10B94DC VA: 0x10B94DC Slot: 23
	public virtual EventDescriptorCollection GetEvents() { }

	// RVA: 0x10B95C4 Offset: 0x10B95C4 VA: 0x10B95C4 Slot: 24
	public virtual EventDescriptorCollection GetEvents(Attribute[] attributes) { }

	// RVA: 0x10B96C0 Offset: 0x10B96C0 VA: 0x10B96C0 Slot: 25
	public virtual PropertyDescriptorCollection GetProperties() { }

	// RVA: 0x10B97A8 Offset: 0x10B97A8 VA: 0x10B97A8 Slot: 26
	public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes) { }

	// RVA: 0x10B98A4 Offset: 0x10B98A4 VA: 0x10B98A4 Slot: 27
	public virtual object GetPropertyOwner(PropertyDescriptor pd) { }
}

// Namespace: System.ComponentModel
public class DateTimeConverter : TypeConverter // TypeDefIndex: 1198
{
	// Methods

	// RVA: 0x10B9978 Offset: 0x10B9978 VA: 0x10B9978
	public void .ctor() { }

	// RVA: 0x10B9980 Offset: 0x10B9980 VA: 0x10B9980 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x10B9A34 Offset: 0x10B9A34 VA: 0x10B9A34 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x10B9AE8 Offset: 0x10B9AE8 VA: 0x10B9AE8 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x10B9E4C Offset: 0x10B9E4C VA: 0x10B9E4C Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public class DecimalConverter : BaseNumberConverter // TypeDefIndex: 1199
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x10BA3FC Offset: 0x10BA3FC VA: 0x10BA3FC
	public void .ctor() { }

	// RVA: 0x10BA484 Offset: 0x10BA484 VA: 0x10BA484 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x10BA48C Offset: 0x10BA48C VA: 0x10BA48C Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x10BA53C Offset: 0x10BA53C VA: 0x10BA53C Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x10BA7EC Offset: 0x10BA7EC VA: 0x10BA7EC Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x10BA87C Offset: 0x10BA87C VA: 0x10BA87C Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BE98 Offset: 0xC3BE98 VA: 0xC3BE98
public sealed class DefaultEventAttribute : Attribute // TypeDefIndex: 1200
{
	// Fields
	private string eventName; // 0x10
	public static readonly DefaultEventAttribute Default; // 0x0

	// Properties
	public string Name { get; }

	// Methods

	// RVA: 0x10BA918 Offset: 0x10BA918 VA: 0x10BA918
	public void .ctor(string name) { }

	// RVA: 0x10BA944 Offset: 0x10BA944 VA: 0x10BA944
	private static void .cctor() { }

	// RVA: 0x10BA9AC Offset: 0x10BA9AC VA: 0x10BA9AC
	public string get_Name() { }

	// RVA: 0x10BA9B4 Offset: 0x10BA9B4 VA: 0x10BA9B4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x10BAA60 Offset: 0x10BAA60 VA: 0x10BAA60 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BEAC Offset: 0xC3BEAC VA: 0xC3BEAC
public sealed class DefaultPropertyAttribute : Attribute // TypeDefIndex: 1201
{
	// Fields
	private string property_name; // 0x10
	public static readonly DefaultPropertyAttribute Default; // 0x0

	// Properties
	public string Name { get; }

	// Methods

	// RVA: 0x10BAA68 Offset: 0x10BAA68 VA: 0x10BAA68
	public void .ctor(string name) { }

	// RVA: 0x10BAA94 Offset: 0x10BAA94 VA: 0x10BAA94
	private static void .cctor() { }

	// RVA: 0x10BAAFC Offset: 0x10BAAFC VA: 0x10BAAFC
	public string get_Name() { }

	// RVA: 0x10BAB04 Offset: 0x10BAB04 VA: 0x10BAB04 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x10BABB0 Offset: 0x10BABB0 VA: 0x10BABB0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BEC0 Offset: 0xC3BEC0 VA: 0xC3BEC0
public class DefaultValueAttribute : Attribute // TypeDefIndex: 1202
{
	// Fields
	private object DefaultValue; // 0x10

	// Properties
	public virtual object Value { get; }

	// Methods

	// RVA: 0x10BABB8 Offset: 0x10BABB8 VA: 0x10BABB8
	public void .ctor(bool value) { }

	// RVA: 0x10BAC2C Offset: 0x10BAC2C VA: 0x10BAC2C
	public void .ctor(byte value) { }

	// RVA: 0x10BACA0 Offset: 0x10BACA0 VA: 0x10BACA0
	public void .ctor(char value) { }

	// RVA: 0x10BAD14 Offset: 0x10BAD14 VA: 0x10BAD14
	public void .ctor(double value) { }

	// RVA: 0x10BAD88 Offset: 0x10BAD88 VA: 0x10BAD88
	public void .ctor(short value) { }

	// RVA: 0x10BADFC Offset: 0x10BADFC VA: 0x10BADFC
	public void .ctor(int value) { }

	// RVA: 0x10BAE70 Offset: 0x10BAE70 VA: 0x10BAE70
	public void .ctor(long value) { }

	// RVA: 0x10BAEE4 Offset: 0x10BAEE4 VA: 0x10BAEE4
	public void .ctor(object value) { }

	// RVA: 0x10BAF10 Offset: 0x10BAF10 VA: 0x10BAF10
	public void .ctor(float value) { }

	// RVA: 0x10BAF84 Offset: 0x10BAF84 VA: 0x10BAF84
	public void .ctor(string value) { }

	// RVA: 0x10BAFB0 Offset: 0x10BAFB0 VA: 0x10BAFB0
	public void .ctor(Type type, string value) { }

	// RVA: 0x10BB1A4 Offset: 0x10BB1A4 VA: 0x10BB1A4 Slot: 7
	public virtual object get_Value() { }

	// RVA: 0x10BB1AC Offset: 0x10BB1AC VA: 0x10BB1AC
	protected void SetValue(object value) { }

	// RVA: 0x10BB1B4 Offset: 0x10BB1B4 VA: 0x10BB1B4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BB2AC Offset: 0x10BB2AC VA: 0x10BB2AC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BED4 Offset: 0xC3BED4 VA: 0xC3BED4
public class DescriptionAttribute : Attribute // TypeDefIndex: 1203
{
	// Fields
	private string desc; // 0x10
	public static readonly DescriptionAttribute Default; // 0x0

	// Properties
	public virtual string Description { get; }
	protected string DescriptionValue { get; set; }

	// Methods

	// RVA: 0x10BB2D0 Offset: 0x10BB2D0 VA: 0x10BB2D0
	public void .ctor() { }

	// RVA: 0x10BB34C Offset: 0x10BB34C VA: 0x10BB34C
	public void .ctor(string name) { }

	// RVA: 0x10BB378 Offset: 0x10BB378 VA: 0x10BB378
	private static void .cctor() { }

	// RVA: 0x10BB3D8 Offset: 0x10BB3D8 VA: 0x10BB3D8 Slot: 7
	public virtual string get_Description() { }

	// RVA: 0x10BB3E0 Offset: 0x10BB3E0 VA: 0x10BB3E0
	protected string get_DescriptionValue() { }

	// RVA: 0x10BB3E8 Offset: 0x10BB3E8 VA: 0x10BB3E8
	protected void set_DescriptionValue(string value) { }

	// RVA: 0x10BB3F0 Offset: 0x10BB3F0 VA: 0x10BB3F0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BB4D8 Offset: 0x10BB4D8 VA: 0x10BB4D8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10BB508 Offset: 0x10BB508 VA: 0x10BB508 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BEE8 Offset: 0xC3BEE8 VA: 0xC3BEE8
public sealed class DesignOnlyAttribute : Attribute // TypeDefIndex: 1204
{
	// Fields
	private bool design_only; // 0x10
	public static readonly DesignOnlyAttribute Default; // 0x0
	public static readonly DesignOnlyAttribute No; // 0x8
	public static readonly DesignOnlyAttribute Yes; // 0x10

	// Properties
	public bool IsDesignOnly { get; }

	// Methods

	// RVA: 0x10BCE44 Offset: 0x10BCE44 VA: 0x10BCE44
	public void .ctor(bool design_only) { }

	// RVA: 0x10BCE74 Offset: 0x10BCE74 VA: 0x10BCE74
	private static void .cctor() { }

	// RVA: 0x10BCF24 Offset: 0x10BCF24 VA: 0x10BCF24
	public bool get_IsDesignOnly() { }

	// RVA: 0x10BCF2C Offset: 0x10BCF2C VA: 0x10BCF2C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BCFCC Offset: 0x10BCFCC VA: 0x10BCFCC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10BCFD8 Offset: 0x10BCFD8 VA: 0x10BCFD8 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BEFC Offset: 0xC3BEFC VA: 0xC3BEFC
public sealed class DesignTimeVisibleAttribute : Attribute // TypeDefIndex: 1205
{
	// Fields
	private bool visible; // 0x10
	public static readonly DesignTimeVisibleAttribute Default; // 0x0
	public static readonly DesignTimeVisibleAttribute No; // 0x8
	public static readonly DesignTimeVisibleAttribute Yes; // 0x10

	// Properties
	public bool Visible { get; }

	// Methods

	// RVA: 0x10BD070 Offset: 0x10BD070 VA: 0x10BD070
	public void .ctor() { }

	// RVA: 0x10BD09C Offset: 0x10BD09C VA: 0x10BD09C
	public void .ctor(bool visible) { }

	// RVA: 0x10BD0CC Offset: 0x10BD0CC VA: 0x10BD0CC
	private static void .cctor() { }

	// RVA: 0x10BD184 Offset: 0x10BD184 VA: 0x10BD184
	public bool get_Visible() { }

	// RVA: 0x10BD18C Offset: 0x10BD18C VA: 0x10BD18C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BD22C Offset: 0x10BD22C VA: 0x10BD22C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10BD238 Offset: 0x10BD238 VA: 0x10BD238 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BF10 Offset: 0xC3BF10 VA: 0xC3BF10
public sealed class DesignerAttribute : Attribute // TypeDefIndex: 1206
{
	// Fields
	private string name; // 0x10
	private string basetypename; // 0x18

	// Properties
	public string DesignerBaseTypeName { get; }
	public string DesignerTypeName { get; }
	public override object TypeId { get; }

	// Methods

	// RVA: 0x10BD2D0 Offset: 0x10BD2D0 VA: 0x10BD2D0
	public void .ctor(string designerTypeName) { }

	// RVA: 0x10BD3C4 Offset: 0x10BD3C4 VA: 0x10BD3C4
	public void .ctor(Type designerType) { }

	// RVA: 0x10BD40C Offset: 0x10BD40C VA: 0x10BD40C
	public void .ctor(string designerTypeName, Type designerBaseType) { }

	// RVA: 0x10BD500 Offset: 0x10BD500 VA: 0x10BD500
	public void .ctor(Type designerType, Type designerBaseType) { }

	// RVA: 0x10BD464 Offset: 0x10BD464 VA: 0x10BD464
	public void .ctor(string designerTypeName, string designerBaseTypeName) { }

	// RVA: 0x10BD57C Offset: 0x10BD57C VA: 0x10BD57C
	public string get_DesignerBaseTypeName() { }

	// RVA: 0x10BD584 Offset: 0x10BD584 VA: 0x10BD584
	public string get_DesignerTypeName() { }

	// RVA: 0x10BD58C Offset: 0x10BD58C VA: 0x10BD58C Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x10BD680 Offset: 0x10BD680 VA: 0x10BD680 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BD7F4 Offset: 0x10BD7F4 VA: 0x10BD7F4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BF5C Offset: 0xC3BF5C VA: 0xC3BF5C
public sealed class DesignerCategoryAttribute : Attribute // TypeDefIndex: 1207
{
	// Fields
	private string category; // 0x10
	public static readonly DesignerCategoryAttribute Component; // 0x0
	public static readonly DesignerCategoryAttribute Form; // 0x8
	public static readonly DesignerCategoryAttribute Generic; // 0x10
	public static readonly DesignerCategoryAttribute Default; // 0x18

	// Properties
	public override object TypeId { get; }
	public string Category { get; }

	// Methods

	// RVA: 0x10BD880 Offset: 0x10BD880 VA: 0x10BD880
	public void .ctor() { }

	// RVA: 0x10BD8FC Offset: 0x10BD8FC VA: 0x10BD8FC
	public void .ctor(string category) { }

	// RVA: 0x10BD928 Offset: 0x10BD928 VA: 0x10BD928
	private static void .cctor() { }

	// RVA: 0x10BDA54 Offset: 0x10BDA54 VA: 0x10BDA54 Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x10BDA5C Offset: 0x10BDA5C VA: 0x10BDA5C
	public string get_Category() { }

	// RVA: 0x10BDA64 Offset: 0x10BDA64 VA: 0x10BDA64 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BDB20 Offset: 0x10BDB20 VA: 0x10BDB20 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10BDB50 Offset: 0x10BDB50 VA: 0x10BDB50 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3BF70 Offset: 0xC3BF70 VA: 0xC3BF70
public enum DesignerSerializationVisibility // TypeDefIndex: 1208
{
	// Fields
	public int value__; // 0x0
	public const DesignerSerializationVisibility Hidden = 0;
	public const DesignerSerializationVisibility Visible = 1;
	public const DesignerSerializationVisibility Content = 2;
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BF84 Offset: 0xC3BF84 VA: 0xC3BF84
public sealed class DesignerSerializationVisibilityAttribute : Attribute // TypeDefIndex: 1209
{
	// Fields
	private DesignerSerializationVisibility visibility; // 0x10
	public static readonly DesignerSerializationVisibilityAttribute Default; // 0x0
	public static readonly DesignerSerializationVisibilityAttribute Content; // 0x8
	public static readonly DesignerSerializationVisibilityAttribute Hidden; // 0x10
	public static readonly DesignerSerializationVisibilityAttribute Visible; // 0x18

	// Properties
	public DesignerSerializationVisibility Visibility { get; }

	// Methods

	// RVA: 0x10BDBFC Offset: 0x10BDBFC VA: 0x10BDBFC
	public void .ctor(DesignerSerializationVisibility vis) { }

	// RVA: 0x10BDC28 Offset: 0x10BDC28 VA: 0x10BDC28
	private static void .cctor() { }

	// RVA: 0x10BDD04 Offset: 0x10BDD04 VA: 0x10BDD04
	public DesignerSerializationVisibility get_Visibility() { }

	// RVA: 0x10BDD0C Offset: 0x10BDD0C VA: 0x10BDD0C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BDD9C Offset: 0x10BDD9C VA: 0x10BDD9C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10BDE10 Offset: 0x10BDE10 VA: 0x10BDE10 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BF98 Offset: 0xC3BF98 VA: 0xC3BF98
public class DisplayNameAttribute : Attribute // TypeDefIndex: 1210
{
	// Fields
	public static readonly DisplayNameAttribute Default; // 0x0
	private string attributeDisplayName; // 0x10

	// Properties
	public virtual string DisplayName { get; }
	protected string DisplayNameValue { get; set; }

	// Methods

	// RVA: 0x10BDE98 Offset: 0x10BDE98 VA: 0x10BDE98
	public void .ctor() { }

	// RVA: 0x10BDF14 Offset: 0x10BDF14 VA: 0x10BDF14
	public void .ctor(string displayName) { }

	// RVA: 0x10BDF40 Offset: 0x10BDF40 VA: 0x10BDF40
	private static void .cctor() { }

	// RVA: 0x10BDFA0 Offset: 0x10BDFA0 VA: 0x10BDFA0 Slot: 5
	public override bool IsDefaultAttribute() { }

	// RVA: 0x10BDFC8 Offset: 0x10BDFC8 VA: 0x10BDFC8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10BDFF8 Offset: 0x10BDFF8 VA: 0x10BDFF8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BE0F8 Offset: 0x10BE0F8 VA: 0x10BE0F8 Slot: 7
	public virtual string get_DisplayName() { }

	// RVA: 0x10BE100 Offset: 0x10BE100 VA: 0x10BE100
	protected string get_DisplayNameValue() { }

	// RVA: 0x10BE108 Offset: 0x10BE108 VA: 0x10BE108
	protected void set_DisplayNameValue(string value) { }
}

// Namespace: System.ComponentModel
public class DoWorkEventArgs : EventArgs // TypeDefIndex: 1211
{
	// Fields
	private object arg; // 0x10
	private object result; // 0x18
	private bool cancel; // 0x20

	// Properties
	public object Argument { get; }
	public object Result { get; set; }
	public bool Cancel { get; set; }

	// Methods

	// RVA: 0x10B1950 Offset: 0x10B1950 VA: 0x10B1950
	public void .ctor(object argument) { }

	// RVA: 0x10BE110 Offset: 0x10BE110 VA: 0x10BE110
	public object get_Argument() { }

	// RVA: 0x10B19D8 Offset: 0x10B19D8 VA: 0x10B19D8
	public object get_Result() { }

	// RVA: 0x10BE118 Offset: 0x10BE118 VA: 0x10BE118
	public void set_Result(object value) { }

	// RVA: 0x10B19E0 Offset: 0x10B19E0 VA: 0x10B19E0
	public bool get_Cancel() { }

	// RVA: 0x10B19CC Offset: 0x10B19CC VA: 0x10B19CC
	public void set_Cancel(bool value) { }
}

// Namespace: System.ComponentModel
public class DoubleConverter : BaseNumberConverter // TypeDefIndex: 1212
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x10BE16C Offset: 0x10BE16C VA: 0x10BE16C
	public void .ctor() { }

	// RVA: 0x10BE1F4 Offset: 0x10BE1F4 VA: 0x10BE1F4 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x10BE1FC Offset: 0x10BE1FC VA: 0x10BE1FC Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x10BE284 Offset: 0x10BE284 VA: 0x10BE284 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BFAC Offset: 0xC3BFAC VA: 0xC3BFAC
public sealed class EditorAttribute : Attribute // TypeDefIndex: 1213
{
	// Fields
	private string name; // 0x10
	private string basename; // 0x18

	// Properties
	public string EditorBaseTypeName { get; }
	public string EditorTypeName { get; }
	public override object TypeId { get; }

	// Methods

	// RVA: 0x10BE2FC Offset: 0x10BE2FC VA: 0x10BE2FC
	public void .ctor() { }

	// RVA: 0x10BE378 Offset: 0x10BE378 VA: 0x10BE378
	public void .ctor(string typeName, string baseTypeName) { }

	// RVA: 0x10BE3B0 Offset: 0x10BE3B0 VA: 0x10BE3B0
	public void .ctor(string typeName, Type baseType) { }

	// RVA: 0x10BE410 Offset: 0x10BE410 VA: 0x10BE410
	public void .ctor(Type type, Type baseType) { }

	// RVA: 0x10BE494 Offset: 0x10BE494 VA: 0x10BE494
	public string get_EditorBaseTypeName() { }

	// RVA: 0x10BE49C Offset: 0x10BE49C VA: 0x10BE49C
	public string get_EditorTypeName() { }

	// RVA: 0x10BE4A4 Offset: 0x10BE4A4 VA: 0x10BE4A4 Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x10BE4AC Offset: 0x10BE4AC VA: 0x10BE4AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BE620 Offset: 0x10BE620 VA: 0x10BE620 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3BFF8 Offset: 0xC3BFF8 VA: 0xC3BFF8
public sealed class EditorBrowsableAttribute : Attribute // TypeDefIndex: 1214
{
	// Fields
	private EditorBrowsableState state; // 0x10

	// Properties
	public EditorBrowsableState State { get; }

	// Methods

	// RVA: 0x10BE6AC Offset: 0x10BE6AC VA: 0x10BE6AC
	public void .ctor() { }

	// RVA: 0x10BE6D4 Offset: 0x10BE6D4 VA: 0x10BE6D4
	public void .ctor(EditorBrowsableState state) { }

	// RVA: 0x10BE700 Offset: 0x10BE700 VA: 0x10BE700
	public EditorBrowsableState get_State() { }

	// RVA: 0x10BE708 Offset: 0x10BE708 VA: 0x10BE708 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10BE798 Offset: 0x10BE798 VA: 0x10BE798 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
public enum EditorBrowsableState // TypeDefIndex: 1215
{
	// Fields
	public int value__; // 0x0
	public const EditorBrowsableState Always = 0;
	public const EditorBrowsableState Never = 1;
	public const EditorBrowsableState Advanced = 2;
}

// Namespace: System.ComponentModel
public class EnumConverter : TypeConverter // TypeDefIndex: 1216
{
	// Fields
	private Type type; // 0x10
	private TypeConverter.StandardValuesCollection stdValues; // 0x18

	// Properties
	protected virtual IComparer Comparer { get; }
	protected Type EnumType { get; }
	protected TypeConverter.StandardValuesCollection Values { get; set; }
	private bool IsFlags { get; }

	// Methods

	// RVA: 0x10BE80C Offset: 0x10BE80C VA: 0x10BE80C
	public void .ctor(Type type) { }

	// RVA: 0x10BE838 Offset: 0x10BE838 VA: 0x10BE838 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x10BE930 Offset: 0x10BE930 VA: 0x10BE930 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x10BF870 Offset: 0x10BF870 VA: 0x10BF870 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x10BF968 Offset: 0x10BF968 VA: 0x10BF968 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x10BFEB0 Offset: 0x10BFEB0 VA: 0x10BFEB0 Slot: 15
	public override bool IsValid(ITypeDescriptorContext context, object value) { }

	// RVA: 0x10BFF2C Offset: 0x10BFF2C VA: 0x10BFF2C Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }

	// RVA: 0x10BFF34 Offset: 0x10BFF34 VA: 0x10BFF34 Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x10BFF50 Offset: 0x10BFF50 VA: 0x10BFF50 Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x10C0004 Offset: 0x10C0004 VA: 0x10C0004 Slot: 16
	protected virtual IComparer get_Comparer() { }

	// RVA: 0x10C0068 Offset: 0x10C0068 VA: 0x10C0068
	protected Type get_EnumType() { }

	// RVA: 0x10C0070 Offset: 0x10C0070 VA: 0x10C0070
	protected TypeConverter.StandardValuesCollection get_Values() { }

	// RVA: 0x10C0078 Offset: 0x10C0078 VA: 0x10C0078
	protected void set_Values(TypeConverter.StandardValuesCollection value) { }

	// RVA: 0x10BF6B4 Offset: 0x10BF6B4 VA: 0x10BF6B4
	private ArgumentException CreateValueNotValidException(object value) { }

	// RVA: 0x10BF614 Offset: 0x10BF614 VA: 0x10BF614
	private bool get_IsFlags() { }
}

// Namespace: 
private class EnumConverter.EnumComparer : IComparer // TypeDefIndex: 1217
{
	// Methods

	// RVA: 0x10C0060 Offset: 0x10C0060 VA: 0x10C0060
	public void .ctor() { }

	// RVA: 0x10C0080 Offset: 0x10C0080 VA: 0x10C0080 Slot: 4
	private int System.Collections.IComparer.Compare(object compareObject1, object compareObject2) { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3C00C Offset: 0xC3C00C VA: 0xC3C00C
public abstract class EventDescriptor : MemberDescriptor // TypeDefIndex: 1218
{
	// Properties
	public abstract Type ComponentType { get; }
	public abstract Type EventType { get; }
	public abstract bool IsMulticast { get; }

	// Methods

	// RVA: 0x10C01D4 Offset: 0x10C01D4 VA: 0x10C01D4
	protected void .ctor(MemberDescriptor desc) { }

	// RVA: 0x10C01DC Offset: 0x10C01DC VA: 0x10C01DC
	protected void .ctor(MemberDescriptor desc, Attribute[] attrs) { }

	// RVA: 0x10C01E4 Offset: 0x10C01E4 VA: 0x10C01E4
	protected void .ctor(string str, Attribute[] attrs) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void AddEventHandler(object component, Delegate value);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void RemoveEventHandler(object component, Delegate value);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract Type get_ComponentType();

	// RVA: -1 Offset: -1 Slot: 20
	public abstract Type get_EventType();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract bool get_IsMulticast();
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xC3C020 Offset: 0xC3C020 VA: 0xC3C020
[ComVisibleAttribute] // RVA: 0xC3C020 Offset: 0xC3C020 VA: 0xC3C020
public class EventDescriptorCollection : ICollection, IEnumerable, IList // TypeDefIndex: 1219
{
	// Fields
	private ArrayList eventList; // 0x10
	private bool isReadOnly; // 0x18
	public static readonly EventDescriptorCollection Empty; // 0x0

	// Properties
	private int System.Collections.ICollection.Count { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }
	public virtual EventDescriptor Item { get; }
	public virtual EventDescriptor Item { get; }

