
	// Methods

	// RVA: 0x23701B0 Offset: 0x23701B0 VA: 0x23701B0
	public void .ctor(int type, Asn1Encodable name) { }

	// RVA: 0x23701EC Offset: 0x23701EC VA: 0x23701EC
	public void .ctor(GeneralNames name) { }

	// RVA: 0x237021C Offset: 0x237021C VA: 0x237021C
	public void .ctor(Asn1TaggedObject obj) { }

	// RVA: 0x236F9E4 Offset: 0x236F9E4 VA: 0x236F9E4
	public static DistributionPointName GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2370290 Offset: 0x2370290 VA: 0x2370290
	public static DistributionPointName GetInstance(object obj) { }

	// RVA: 0x2370488 Offset: 0x2370488 VA: 0x2370488
	public int get_PointType() { }

	// RVA: 0x2370490 Offset: 0x2370490 VA: 0x2370490
	public Asn1Encodable get_Name() { }

	// RVA: 0x2370498 Offset: 0x2370498 VA: 0x2370498 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x2370514 Offset: 0x2370514 VA: 0x2370514 Slot: 3
	public override string ToString() { }

	// RVA: 0x23706C8 Offset: 0x23706C8 VA: 0x23706C8
	private void appendObject(StringBuilder buf, string sep, string name, string val) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DsaParameter : Asn1Encodable // TypeDefIndex: 4563
{
	// Fields
	internal readonly DerInteger p; // 0x10
	internal readonly DerInteger q; // 0x18
	internal readonly DerInteger g; // 0x20

	// Properties
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger G { get; }

	// Methods

	// RVA: 0x2370874 Offset: 0x2370874 VA: 0x2370874
	public void .ctor(BigInteger p, BigInteger q, BigInteger g) { }

	// RVA: 0x2370938 Offset: 0x2370938 VA: 0x2370938
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2370ADC Offset: 0x2370ADC VA: 0x2370ADC
	public static DsaParameter GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2370AF8 Offset: 0x2370AF8 VA: 0x2370AF8
	public static DsaParameter GetInstance(object obj) { }

	// RVA: 0x2370CE4 Offset: 0x2370CE4 VA: 0x2370CE4
	public BigInteger get_P() { }

	// RVA: 0x2370D14 Offset: 0x2370D14 VA: 0x2370D14
	public BigInteger get_Q() { }

	// RVA: 0x2370D44 Offset: 0x2370D44 VA: 0x2370D44
	public BigInteger get_G() { }

	// RVA: 0x2370D74 Offset: 0x2370D74 VA: 0x2370D74 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class GeneralName : Asn1Encodable, IAsn1Choice // TypeDefIndex: 4564
{
	// Fields
	public const int OtherName = 0;
	public const int Rfc822Name = 1;
	public const int DnsName = 2;
	public const int X400Address = 3;
	public const int DirectoryName = 4;
	public const int EdiPartyName = 5;
	public const int UniformResourceIdentifier = 6;
	public const int IPAddress = 7;
	public const int RegisteredID = 8;
	internal readonly Asn1Encodable obj; // 0x10
	internal readonly int tag; // 0x18

	// Properties
	public int TagNo { get; }
	public Asn1Encodable Name { get; }

	// Methods

	// RVA: 0x2370EE8 Offset: 0x2370EE8 VA: 0x2370EE8
	public void .ctor(X509Name directoryName) { }

	// RVA: 0x2370F1C Offset: 0x2370F1C VA: 0x2370F1C
	public void .ctor(Asn1Object name, int tag) { }

	// RVA: 0x2370F58 Offset: 0x2370F58 VA: 0x2370F58
	public void .ctor(int tag, Asn1Encodable name) { }

	// RVA: 0x2370F94 Offset: 0x2370F94 VA: 0x2370F94
	public void .ctor(int tag, string name) { }

	// RVA: 0x2371500 Offset: 0x2371500 VA: 0x2371500
	public static GeneralName GetInstance(object obj) { }

	// RVA: 0x2371AC8 Offset: 0x2371AC8 VA: 0x2371AC8
	public static GeneralName GetInstance(Asn1TaggedObject tagObj, bool explicitly) { }

	// RVA: 0x2371AE4 Offset: 0x2371AE4 VA: 0x2371AE4
	public int get_TagNo() { }

	// RVA: 0x2371AEC Offset: 0x2371AEC VA: 0x2371AEC
	public Asn1Encodable get_Name() { }

	// RVA: 0x2371AF4 Offset: 0x2371AF4 VA: 0x2371AF4 Slot: 3
	public override string ToString() { }

	// RVA: 0x2371230 Offset: 0x2371230 VA: 0x2371230
	private byte[] toGeneralNameEncoding(string ip) { }

	// RVA: 0x237267C Offset: 0x237267C VA: 0x237267C
	private void parseIPv4Mask(string mask, byte[] addr, int offset) { }

	// RVA: 0x2372514 Offset: 0x2372514 VA: 0x2372514
	private void parseIPv4(string ip, byte[] addr, int offset) { }

	// RVA: 0x237241C Offset: 0x237241C VA: 0x237241C
	private int[] parseMask(string mask) { }

	// RVA: 0x2372310 Offset: 0x2372310 VA: 0x2372310
	private void copyInts(int[] parsedIp, byte[] addr, int offSet) { }

	// RVA: 0x2371D24 Offset: 0x2371D24 VA: 0x2371D24
	private int[] parseIPv6(string ip) { }

	// RVA: 0x2372740 Offset: 0x2372740 VA: 0x2372740 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class GeneralNames : Asn1Encodable // TypeDefIndex: 4565
{
	// Fields
	private readonly GeneralName[] names; // 0x10

	// Methods

	// RVA: 0x23727C0 Offset: 0x23727C0 VA: 0x23727C0
	public void .ctor(GeneralName name) { }

	// RVA: 0x2372888 Offset: 0x2372888 VA: 0x2372888
	public void .ctor(GeneralName[] names) { }

	// RVA: 0x2372970 Offset: 0x2372970 VA: 0x2372970
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2372AC0 Offset: 0x2372AC0 VA: 0x2372AC0
	public static GeneralNames GetInstance(object obj) { }

	// RVA: 0x236FAB8 Offset: 0x236FAB8 VA: 0x236FAB8
	public static GeneralNames GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2372CB8 Offset: 0x2372CB8 VA: 0x2372CB8
	public GeneralName[] GetNames() { }

	// RVA: 0x2372D90 Offset: 0x2372D90 VA: 0x2372D90 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x2372DF8 Offset: 0x2372DF8 VA: 0x2372DF8 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class IssuingDistributionPoint : Asn1Encodable // TypeDefIndex: 4566
{
	// Fields
	private readonly DistributionPointName _distributionPoint; // 0x10
	private readonly bool _onlyContainsUserCerts; // 0x18
	private readonly bool _onlyContainsCACerts; // 0x19
	private readonly ReasonFlags _onlySomeReasons; // 0x20
	private readonly bool _indirectCRL; // 0x28
	private readonly bool _onlyContainsAttributeCerts; // 0x29
	private readonly Asn1Sequence seq; // 0x30

	// Properties
	public bool OnlyContainsUserCerts { get; }
	public bool OnlyContainsCACerts { get; }
	public bool IsIndirectCrl { get; }
	public bool OnlyContainsAttributeCerts { get; }
	public DistributionPointName DistributionPoint { get; }
	public ReasonFlags OnlySomeReasons { get; }

	// Methods

	// RVA: 0x2372FC4 Offset: 0x2372FC4 VA: 0x2372FC4
	public void .ctor(DistributionPointName distributionPoint, bool onlyContainsUserCerts, bool onlyContainsCACerts, ReasonFlags onlySomeReasons, bool indirectCRL, bool onlyContainsAttributeCerts) { }

	// RVA: 0x23735A4 Offset: 0x23735A4 VA: 0x23735A4
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x237388C Offset: 0x237388C VA: 0x237388C
	public static IssuingDistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x23738A8 Offset: 0x23738A8 VA: 0x23738A8
	public static IssuingDistributionPoint GetInstance(object obj) { }

	// RVA: 0x2373AA0 Offset: 0x2373AA0 VA: 0x2373AA0
	public bool get_OnlyContainsUserCerts() { }

	// RVA: 0x2373AA8 Offset: 0x2373AA8 VA: 0x2373AA8
	public bool get_OnlyContainsCACerts() { }

	// RVA: 0x2373AB0 Offset: 0x2373AB0 VA: 0x2373AB0
	public bool get_IsIndirectCrl() { }

	// RVA: 0x2373AB8 Offset: 0x2373AB8 VA: 0x2373AB8
	public bool get_OnlyContainsAttributeCerts() { }

	// RVA: 0x2373AC0 Offset: 0x2373AC0 VA: 0x2373AC0
	public DistributionPointName get_DistributionPoint() { }

	// RVA: 0x2373AC8 Offset: 0x2373AC8 VA: 0x2373AC8
	public ReasonFlags get_OnlySomeReasons() { }

	// RVA: 0x2373AD0 Offset: 0x2373AD0 VA: 0x2373AD0 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x2373AD8 Offset: 0x2373AD8 VA: 0x2373AD8 Slot: 3
	public override string ToString() { }

	// RVA: 0x2373D98 Offset: 0x2373D98 VA: 0x2373D98
	private void appendObject(StringBuilder buf, string sep, string name, string val) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class KeyUsage : DerBitString // TypeDefIndex: 4567
{
	// Fields
	public const int DigitalSignature = 128;
	public const int NonRepudiation = 64;
	public const int KeyEncipherment = 32;
	public const int DataEncipherment = 16;
	public const int KeyAgreement = 8;
	public const int KeyCertSign = 4;
	public const int CrlSign = 2;
	public const int EncipherOnly = 1;
	public const int DecipherOnly = 32768;

	// Methods

	// RVA: 0x2373F44 Offset: 0x2373F44 VA: 0x2373F44
	public void .ctor(int usage) { }

	// RVA: 0x2373FBC Offset: 0x2373FBC VA: 0x2373FBC
	private void .ctor(DerBitString usage) { }

	// RVA: 0x2374074 Offset: 0x2374074 VA: 0x2374074
	public static KeyUsage GetInstance(object obj) { }

	// RVA: 0x2374178 Offset: 0x2374178 VA: 0x2374178 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class ReasonFlags : DerBitString // TypeDefIndex: 4568
{
	// Fields
	public const int Unused = 128;
	public const int KeyCompromise = 64;
	public const int CACompromise = 32;
	public const int AffiliationChanged = 16;
	public const int Superseded = 8;
	public const int CessationOfOperation = 4;
	public const int CertificateHold = 2;
	public const int PrivilegeWithdrawn = 1;
	public const int AACompromise = 32768;

	// Methods

	// RVA: 0x23742E0 Offset: 0x23742E0 VA: 0x23742E0
	public void .ctor(int reasons) { }

	// RVA: 0x236FA00 Offset: 0x236FA00 VA: 0x236FA00
	public void .ctor(DerBitString reasons) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class RsaPublicKeyStructure : Asn1Encodable // TypeDefIndex: 4569
{
	// Fields
	private BigInteger modulus; // 0x10
	private BigInteger publicExponent; // 0x18

	// Properties
	public BigInteger Modulus { get; }
	public BigInteger PublicExponent { get; }

	// Methods

	// RVA: 0x2374358 Offset: 0x2374358 VA: 0x2374358
	public void .ctor(BigInteger modulus, BigInteger publicExponent) { }

	// RVA: 0x23744A4 Offset: 0x23744A4 VA: 0x23744A4
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x237464C Offset: 0x237464C VA: 0x237464C
	public static RsaPublicKeyStructure GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2374668 Offset: 0x2374668 VA: 0x2374668
	public static RsaPublicKeyStructure GetInstance(object obj) { }

	// RVA: 0x2374854 Offset: 0x2374854 VA: 0x2374854
	public BigInteger get_Modulus() { }

	// RVA: 0x237485C Offset: 0x237485C VA: 0x237485C
	public BigInteger get_PublicExponent() { }

	// RVA: 0x2374864 Offset: 0x2374864 VA: 0x2374864 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class SubjectPublicKeyInfo : Asn1Encodable // TypeDefIndex: 4570
{
	// Fields
	private readonly AlgorithmIdentifier algID; // 0x10
	private readonly DerBitString keyData; // 0x18

	// Properties
	public AlgorithmIdentifier AlgorithmID { get; }
	public DerBitString PublicKeyData { get; }

	// Methods

	// RVA: 0x23749D4 Offset: 0x23749D4 VA: 0x23749D4
	public void .ctor(AlgorithmIdentifier algID, Asn1Encodable publicKey) { }

	// RVA: 0x2374A54 Offset: 0x2374A54 VA: 0x2374A54
	public void .ctor(AlgorithmIdentifier algID, byte[] publicKey) { }

	// RVA: 0x2374AD4 Offset: 0x2374AD4 VA: 0x2374AD4
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2374C80 Offset: 0x2374C80 VA: 0x2374C80
	public static SubjectPublicKeyInfo GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2374C9C Offset: 0x2374C9C VA: 0x2374C9C
	public static SubjectPublicKeyInfo GetInstance(object obj) { }

	// RVA: 0x2374D40 Offset: 0x2374D40 VA: 0x2374D40
	public AlgorithmIdentifier get_AlgorithmID() { }

	// RVA: 0x2374D48 Offset: 0x2374D48 VA: 0x2374D48
	public Asn1Object GetPublicKey() { }

	// RVA: 0x2374D84 Offset: 0x2374D84 VA: 0x2374D84
	public DerBitString get_PublicKeyData() { }

	// RVA: 0x2374D8C Offset: 0x2374D8C VA: 0x2374D8C Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class TbsCertificateStructure : Asn1Encodable // TypeDefIndex: 4571
{
	// Fields
	internal Asn1Sequence seq; // 0x10
	internal DerInteger version; // 0x18
	internal DerInteger serialNumber; // 0x20
	internal AlgorithmIdentifier signature; // 0x28
	internal X509Name issuer; // 0x30
	internal Time startDate; // 0x38
	internal Time endDate; // 0x40
	internal X509Name subject; // 0x48
	internal SubjectPublicKeyInfo subjectPublicKeyInfo; // 0x50
	internal DerBitString issuerUniqueID; // 0x58
	internal DerBitString subjectUniqueID; // 0x60
	internal X509Extensions extensions; // 0x68

	// Properties
	public int Version { get; }
	public DerInteger VersionNumber { get; }
	public DerInteger SerialNumber { get; }
	public AlgorithmIdentifier Signature { get; }
	public X509Name Issuer { get; }
	public Time StartDate { get; }
	public Time EndDate { get; }
	public X509Name Subject { get; }
	public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
	public DerBitString IssuerUniqueID { get; }
	public DerBitString SubjectUniqueID { get; }
	public X509Extensions Extensions { get; }

	// Methods

	// RVA: 0x237574C Offset: 0x237574C VA: 0x237574C
	internal void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2375C20 Offset: 0x2375C20 VA: 0x2375C20
	public static TbsCertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2375C3C Offset: 0x2375C3C VA: 0x2375C3C
	public static TbsCertificateStructure GetInstance(object obj) { }

	// RVA: 0x2375CE0 Offset: 0x2375CE0 VA: 0x2375CE0
	public int get_Version() { }

	// RVA: 0x2375D30 Offset: 0x2375D30 VA: 0x2375D30
	public DerInteger get_VersionNumber() { }

	// RVA: 0x2375D38 Offset: 0x2375D38 VA: 0x2375D38
	public DerInteger get_SerialNumber() { }

	// RVA: 0x2375D40 Offset: 0x2375D40 VA: 0x2375D40
	public AlgorithmIdentifier get_Signature() { }

	// RVA: 0x2375D48 Offset: 0x2375D48 VA: 0x2375D48
	public X509Name get_Issuer() { }

	// RVA: 0x2375D50 Offset: 0x2375D50 VA: 0x2375D50
	public Time get_StartDate() { }

	// RVA: 0x2375D58 Offset: 0x2375D58 VA: 0x2375D58
	public Time get_EndDate() { }

	// RVA: 0x2375D60 Offset: 0x2375D60 VA: 0x2375D60
	public X509Name get_Subject() { }

	// RVA: 0x2375D68 Offset: 0x2375D68 VA: 0x2375D68
	public SubjectPublicKeyInfo get_SubjectPublicKeyInfo() { }

	// RVA: 0x2375D70 Offset: 0x2375D70 VA: 0x2375D70
	public DerBitString get_IssuerUniqueID() { }

	// RVA: 0x2375D78 Offset: 0x2375D78 VA: 0x2375D78
	public DerBitString get_SubjectUniqueID() { }

	// RVA: 0x2375D80 Offset: 0x2375D80 VA: 0x2375D80
	public X509Extensions get_Extensions() { }

	// RVA: 0x2375D88 Offset: 0x2375D88 VA: 0x2375D88 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlEntry : Asn1Encodable // TypeDefIndex: 4572
{
	// Fields
	internal Asn1Sequence seq; // 0x10
	internal DerInteger userCertificate; // 0x18
	internal Time revocationDate; // 0x20
	internal X509Extensions crlEntryExtensions; // 0x28

	// Properties
	public DerInteger UserCertificate { get; }
	public Time RevocationDate { get; }
	public X509Extensions Extensions { get; }

	// Methods

	// RVA: 0x236E574 Offset: 0x236E574 VA: 0x236E574
	public void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236E98C Offset: 0x236E98C VA: 0x236E98C
	public DerInteger get_UserCertificate() { }

	// RVA: 0x236E994 Offset: 0x236E994 VA: 0x236E994
	public Time get_RevocationDate() { }

	// RVA: 0x236E99C Offset: 0x236E99C VA: 0x236E99C
	public X509Extensions get_Extensions() { }

	// RVA: 0x236ECCC Offset: 0x236ECCC VA: 0x236ECCC Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class TbsCertificateList : Asn1Encodable // TypeDefIndex: 4573
{
	// Fields
	internal Asn1Sequence seq; // 0x10
	internal DerInteger version; // 0x18
	internal AlgorithmIdentifier signature; // 0x20
	internal X509Name issuer; // 0x28
	internal Time thisUpdate; // 0x30
	internal Time nextUpdate; // 0x38
	internal Asn1Sequence revokedCertificates; // 0x40
	internal X509Extensions crlExtensions; // 0x48

	// Properties
	public int Version { get; }
	public DerInteger VersionNumber { get; }
	public AlgorithmIdentifier Signature { get; }
	public X509Name Issuer { get; }
	public Time ThisUpdate { get; }
	public Time NextUpdate { get; }
	public X509Extensions Extensions { get; }

	// Methods

	// RVA: 0x2374EB4 Offset: 0x2374EB4 VA: 0x2374EB4
	internal void .ctor(Asn1Sequence seq) { }

	// RVA: 0x237537C Offset: 0x237537C VA: 0x237537C
	public static TbsCertificateList GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236D5B8 Offset: 0x236D5B8 VA: 0x236D5B8
	public static TbsCertificateList GetInstance(object obj) { }

	// RVA: 0x236DB4C Offset: 0x236DB4C VA: 0x236DB4C
	public int get_Version() { }

	// RVA: 0x2375398 Offset: 0x2375398 VA: 0x2375398
	public DerInteger get_VersionNumber() { }

	// RVA: 0x23753A0 Offset: 0x23753A0 VA: 0x23753A0
	public AlgorithmIdentifier get_Signature() { }

	// RVA: 0x236DBC8 Offset: 0x236DBC8 VA: 0x236DBC8
	public X509Name get_Issuer() { }

	// RVA: 0x236DBFC Offset: 0x236DBFC VA: 0x236DBFC
	public Time get_ThisUpdate() { }

	// RVA: 0x236DC30 Offset: 0x236DC30 VA: 0x236DC30
	public Time get_NextUpdate() { }

	// RVA: 0x236D8B0 Offset: 0x236D8B0 VA: 0x236D8B0
	public CrlEntry[] GetRevokedCertificates() { }

	// RVA: 0x236DA40 Offset: 0x236DA40 VA: 0x236DA40
	public IEnumerable GetRevokedCertificateEnumeration() { }

	// RVA: 0x23753D4 Offset: 0x23753D4 VA: 0x23753D4
	public X509Extensions get_Extensions() { }

	// RVA: 0x23753DC Offset: 0x23753DC VA: 0x23753DC Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: 
private class TbsCertificateList.RevokedCertificatesEnumeration : IEnumerable // TypeDefIndex: 4574
{
	// Fields
	private readonly IEnumerable en; // 0x10

	// Methods

	// RVA: 0x23753A8 Offset: 0x23753A8 VA: 0x23753A8
	internal void .ctor(IEnumerable en) { }

	// RVA: 0x23753E4 Offset: 0x23753E4 VA: 0x23753E4 Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class TbsCertificateList.RevokedCertificatesEnumeration.RevokedCertificatesEnumerator : IEnumerator // TypeDefIndex: 4575
{
	// Fields
	private readonly IEnumerator e; // 0x10

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x23754C8 Offset: 0x23754C8 VA: 0x23754C8
	internal void .ctor(IEnumerator e) { }

	// RVA: 0x23754F4 Offset: 0x23754F4 VA: 0x23754F4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x23755AC Offset: 0x23755AC VA: 0x23755AC Slot: 6
	public void Reset() { }

	// RVA: 0x2375664 Offset: 0x2375664 VA: 0x2375664 Slot: 4
	public object get_Current() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class Time : Asn1Encodable, IAsn1Choice // TypeDefIndex: 4576
{
	// Fields
	private readonly Asn1Object time; // 0x10

	// Methods

	// RVA: 0x2375D90 Offset: 0x2375D90 VA: 0x2375D90
	public void .ctor(Asn1Object time) { }

	// RVA: 0x2375EC0 Offset: 0x2375EC0 VA: 0x2375EC0
	public void .ctor(DateTime date) { }

	// RVA: 0x2376044 Offset: 0x2376044 VA: 0x2376044
	public static Time GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236E6F8 Offset: 0x236E6F8 VA: 0x236E6F8
	public static Time GetInstance(object obj) { }

	// RVA: 0x2376074 Offset: 0x2376074 VA: 0x2376074
	public string GetTime() { }

	// RVA: 0x2376210 Offset: 0x2376210 VA: 0x2376210
	public DateTime ToDateTime() { }

	// RVA: 0x23764C4 Offset: 0x23764C4 VA: 0x23764C4 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x23764CC Offset: 0x23764CC VA: 0x23764CC Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509CertificateStructure : Asn1Encodable // TypeDefIndex: 4577
{
	// Fields
	private readonly TbsCertificateStructure tbsCert; // 0x10
	private readonly AlgorithmIdentifier sigAlgID; // 0x18
	private readonly DerBitString sig; // 0x20

	// Properties
	public TbsCertificateStructure TbsCertificate { get; }
	public int Version { get; }
	public DerInteger SerialNumber { get; }
	public X509Name Issuer { get; }
	public Time StartDate { get; }
	public Time EndDate { get; }
	public X509Name Subject { get; }
	public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
	public AlgorithmIdentifier SignatureAlgorithm { get; }
	public DerBitString Signature { get; }

	// Methods

	// RVA: 0x23764D0 Offset: 0x23764D0 VA: 0x23764D0
	public void .ctor(TbsCertificateStructure tbsCert, AlgorithmIdentifier sigAlgID, DerBitString sig) { }

	// RVA: 0x23765C8 Offset: 0x23765C8 VA: 0x23765C8
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2376718 Offset: 0x2376718 VA: 0x2376718
	public static X509CertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2376734 Offset: 0x2376734 VA: 0x2376734
	public static X509CertificateStructure GetInstance(object obj) { }

	// RVA: 0x23767D8 Offset: 0x23767D8 VA: 0x23767D8
	public TbsCertificateStructure get_TbsCertificate() { }

	// RVA: 0x23767E0 Offset: 0x23767E0 VA: 0x23767E0
	public int get_Version() { }

	// RVA: 0x237680C Offset: 0x237680C VA: 0x237680C
	public DerInteger get_SerialNumber() { }

	// RVA: 0x2376838 Offset: 0x2376838 VA: 0x2376838
	public X509Name get_Issuer() { }

	// RVA: 0x2376864 Offset: 0x2376864 VA: 0x2376864
	public Time get_StartDate() { }

	// RVA: 0x2376890 Offset: 0x2376890 VA: 0x2376890
	public Time get_EndDate() { }

	// RVA: 0x23768BC Offset: 0x23768BC VA: 0x23768BC
	public X509Name get_Subject() { }

	// RVA: 0x23768E8 Offset: 0x23768E8 VA: 0x23768E8
	public SubjectPublicKeyInfo get_SubjectPublicKeyInfo() { }

	// RVA: 0x2376914 Offset: 0x2376914 VA: 0x2376914
	public AlgorithmIdentifier get_SignatureAlgorithm() { }

	// RVA: 0x237691C Offset: 0x237691C VA: 0x237691C
	public DerBitString get_Signature() { }

	// RVA: 0x2376924 Offset: 0x2376924 VA: 0x2376924
	public byte[] GetSignatureOctets() { }

	// RVA: 0x2376958 Offset: 0x2376958 VA: 0x2376958 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509DefaultEntryConverter : X509NameEntryConverter // TypeDefIndex: 4578
{
	// Methods

	// RVA: 0x2376ACC Offset: 0x2376ACC VA: 0x2376ACC
	public void .ctor() { }

	// RVA: 0x2376ADC Offset: 0x2376ADC VA: 0x2376ADC Slot: 4
	public override Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509Extension // TypeDefIndex: 4579
{
	// Fields
	internal bool critical; // 0x10
	internal Asn1OctetString value; // 0x18

	// Properties
	public bool IsCritical { get; }
	public Asn1OctetString Value { get; }

	// Methods

	// RVA: 0x2376FBC Offset: 0x2376FBC VA: 0x2376FBC
	public void .ctor(DerBoolean critical, Asn1OctetString value) { }

	// RVA: 0x2377078 Offset: 0x2377078 VA: 0x2377078
	public void .ctor(bool critical, Asn1OctetString value) { }

	// RVA: 0x23770B8 Offset: 0x23770B8 VA: 0x23770B8
	public bool get_IsCritical() { }

	// RVA: 0x23770C0 Offset: 0x23770C0 VA: 0x23770C0
	public Asn1OctetString get_Value() { }

	// RVA: 0x23770C8 Offset: 0x23770C8 VA: 0x23770C8
	public Asn1Encodable GetParsedValue() { }

	// RVA: 0x23770CC Offset: 0x23770CC VA: 0x23770CC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2377114 Offset: 0x2377114 VA: 0x2377114 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x236CEAC Offset: 0x236CEAC VA: 0x236CEAC
	public static Asn1Object ConvertValueToObject(X509Extension ext) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509Extensions : Asn1Encodable // TypeDefIndex: 4580
{
	// Fields
	public static readonly DerObjectIdentifier SubjectDirectoryAttributes; // 0x0
	public static readonly DerObjectIdentifier SubjectKeyIdentifier; // 0x8
	public static readonly DerObjectIdentifier KeyUsage; // 0x10
	public static readonly DerObjectIdentifier PrivateKeyUsagePeriod; // 0x18
	public static readonly DerObjectIdentifier SubjectAlternativeName; // 0x20
	public static readonly DerObjectIdentifier IssuerAlternativeName; // 0x28
	public static readonly DerObjectIdentifier BasicConstraints; // 0x30
	public static readonly DerObjectIdentifier CrlNumber; // 0x38
	public static readonly DerObjectIdentifier ReasonCode; // 0x40
	public static readonly DerObjectIdentifier InstructionCode; // 0x48
	public static readonly DerObjectIdentifier InvalidityDate; // 0x50
	public static readonly DerObjectIdentifier DeltaCrlIndicator; // 0x58
	public static readonly DerObjectIdentifier IssuingDistributionPoint; // 0x60
	public static readonly DerObjectIdentifier CertificateIssuer; // 0x68
	public static readonly DerObjectIdentifier NameConstraints; // 0x70
	public static readonly DerObjectIdentifier CrlDistributionPoints; // 0x78
	public static readonly DerObjectIdentifier CertificatePolicies; // 0x80
	public static readonly DerObjectIdentifier PolicyMappings; // 0x88
	public static readonly DerObjectIdentifier AuthorityKeyIdentifier; // 0x90
	public static readonly DerObjectIdentifier PolicyConstraints; // 0x98
	public static readonly DerObjectIdentifier ExtendedKeyUsage; // 0xA0
	public static readonly DerObjectIdentifier FreshestCrl; // 0xA8
	public static readonly DerObjectIdentifier InhibitAnyPolicy; // 0xB0
	public static readonly DerObjectIdentifier AuthorityInfoAccess; // 0xB8
	public static readonly DerObjectIdentifier SubjectInfoAccess; // 0xC0
	public static readonly DerObjectIdentifier LogoType; // 0xC8
	public static readonly DerObjectIdentifier BiometricInfo; // 0xD0
	public static readonly DerObjectIdentifier QCStatements; // 0xD8
	public static readonly DerObjectIdentifier AuditIdentity; // 0xE0
	public static readonly DerObjectIdentifier NoRevAvail; // 0xE8
	public static readonly DerObjectIdentifier TargetInformation; // 0xF0
	private readonly IDictionary extensions; // 0x10
	private readonly IList ordering; // 0x18

	// Properties
	public IEnumerable ExtensionOids { get; }

	// Methods

	// RVA: 0x23771FC Offset: 0x23771FC VA: 0x23771FC
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x2377944 Offset: 0x2377944 VA: 0x2377944
	public void .ctor(IDictionary extensions) { }

	// RVA: 0x2377954 Offset: 0x2377954 VA: 0x2377954
	public void .ctor(IList ordering, IDictionary extensions) { }

	// RVA: 0x2377F08 Offset: 0x2377F08 VA: 0x2377F08
	public void .ctor(IList oids, IList values) { }

	[ObsoleteAttribute] // RVA: 0xCC7484 Offset: 0xCC7484 VA: 0xCC7484
	// RVA: 0x2378414 Offset: 0x2378414 VA: 0x2378414
	public void .ctor(Hashtable extensions) { }

	[ObsoleteAttribute] // RVA: 0xCC7494 Offset: 0xCC7494 VA: 0xCC7494
	// RVA: 0x2378424 Offset: 0x2378424 VA: 0x2378424
	public void .ctor(ArrayList ordering, Hashtable extensions) { }

	[ObsoleteAttribute] // RVA: 0xCC74A4 Offset: 0xCC74A4 VA: 0xCC74A4
	// RVA: 0x237892C Offset: 0x237892C VA: 0x237892C
	public void .ctor(ArrayList oids, ArrayList values) { }

	// RVA: 0x2378DE0 Offset: 0x2378DE0 VA: 0x2378DE0
	public static X509Extensions GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236EA6C Offset: 0x236EA6C VA: 0x236EA6C
	public static X509Extensions GetInstance(object obj) { }

	[ObsoleteAttribute] // RVA: 0xCC74B4 Offset: 0xCC74B4 VA: 0xCC74B4
	// RVA: 0x2378E68 Offset: 0x2378E68 VA: 0x2378E68
	public IEnumerator Oids() { }

	// RVA: 0x2378F20 Offset: 0x2378F20 VA: 0x2378F20
	public IEnumerable get_ExtensionOids() { }

	// RVA: 0x2378F88 Offset: 0x2378F88 VA: 0x2378F88
	public X509Extension GetExtension(DerObjectIdentifier oid) { }

	// RVA: 0x23790D4 Offset: 0x23790D4 VA: 0x23790D4 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x237984C Offset: 0x237984C VA: 0x237984C
	public bool Equivalent(X509Extensions other) { }

	// RVA: 0x2379E70 Offset: 0x2379E70 VA: 0x2379E70
	public DerObjectIdentifier[] GetExtensionOids() { }

	// RVA: 0x237A02C Offset: 0x237A02C VA: 0x237A02C
	public DerObjectIdentifier[] GetNonCriticalExtensionOids() { }

	// RVA: 0x237A55C Offset: 0x237A55C VA: 0x237A55C
	public DerObjectIdentifier[] GetCriticalExtensionOids() { }

	// RVA: 0x237A034 Offset: 0x237A034 VA: 0x237A034
	private DerObjectIdentifier[] GetExtensionOids(bool isCritical) { }

	// RVA: 0x2379ED8 Offset: 0x2379ED8 VA: 0x2379ED8
	private static DerObjectIdentifier[] ToOidArray(IList oids) { }

	// RVA: 0x237A564 Offset: 0x237A564 VA: 0x237A564
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509Name : Asn1Encodable // TypeDefIndex: 4581
{
	// Fields
	public static readonly DerObjectIdentifier C; // 0x0
	public static readonly DerObjectIdentifier O; // 0x8
	public static readonly DerObjectIdentifier OU; // 0x10
	public static readonly DerObjectIdentifier T; // 0x18
	public static readonly DerObjectIdentifier CN; // 0x20
	public static readonly DerObjectIdentifier Street; // 0x28
	public static readonly DerObjectIdentifier SerialNumber; // 0x30
	public static readonly DerObjectIdentifier L; // 0x38
	public static readonly DerObjectIdentifier ST; // 0x40
	public static readonly DerObjectIdentifier Surname; // 0x48
	public static readonly DerObjectIdentifier GivenName; // 0x50
	public static readonly DerObjectIdentifier Initials; // 0x58
	public static readonly DerObjectIdentifier Generation; // 0x60
	public static readonly DerObjectIdentifier UniqueIdentifier; // 0x68
	public static readonly DerObjectIdentifier BusinessCategory; // 0x70
	public static readonly DerObjectIdentifier PostalCode; // 0x78
	public static readonly DerObjectIdentifier DnQualifier; // 0x80
	public static readonly DerObjectIdentifier Pseudonym; // 0x88
	public static readonly DerObjectIdentifier DateOfBirth; // 0x90
	public static readonly DerObjectIdentifier PlaceOfBirth; // 0x98
	public static readonly DerObjectIdentifier Gender; // 0xA0
	public static readonly DerObjectIdentifier CountryOfCitizenship; // 0xA8
	public static readonly DerObjectIdentifier CountryOfResidence; // 0xB0
	public static readonly DerObjectIdentifier NameAtBirth; // 0xB8
	public static readonly DerObjectIdentifier PostalAddress; // 0xC0
	public static readonly DerObjectIdentifier DmdName; // 0xC8
	public static readonly DerObjectIdentifier TelephoneNumber; // 0xD0
	public static readonly DerObjectIdentifier Name; // 0xD8
	public static readonly DerObjectIdentifier EmailAddress; // 0xE0
	public static readonly DerObjectIdentifier UnstructuredName; // 0xE8
	public static readonly DerObjectIdentifier UnstructuredAddress; // 0xF0
	public static readonly DerObjectIdentifier E; // 0xF8
	public static readonly DerObjectIdentifier DC; // 0x100
	public static readonly DerObjectIdentifier UID; // 0x108
	private static readonly bool[] defaultReverse; // 0x110
	public static readonly Hashtable DefaultSymbols; // 0x118
	public static readonly Hashtable RFC2253Symbols; // 0x120
	public static readonly Hashtable RFC1779Symbols; // 0x128
	public static readonly Hashtable DefaultLookup; // 0x130
	private readonly IList ordering; // 0x10
	private readonly X509NameEntryConverter converter; // 0x18
	private IList values; // 0x20
	private IList added; // 0x28
	private Asn1Sequence seq; // 0x30

	// Properties
	public static bool DefaultReverse { get; set; }

	// Methods

	// RVA: 0x237AB0C Offset: 0x237AB0C VA: 0x237AB0C
	private static void .cctor() { }

	// RVA: 0x237C4F4 Offset: 0x237C4F4 VA: 0x237C4F4
	protected void .ctor() { }

	// RVA: 0x237C580 Offset: 0x237C580 VA: 0x237C580
	protected void .ctor(Asn1Sequence seq) { }

	// RVA: 0x237CF6C Offset: 0x237CF6C VA: 0x237CF6C
	public void .ctor(IList ordering, IDictionary attributes) { }

	// RVA: 0x237CFE8 Offset: 0x237CFE8 VA: 0x237CFE8
	public void .ctor(IList ordering, IDictionary attributes, X509NameEntryConverter converter) { }

	// RVA: 0x237D624 Offset: 0x237D624 VA: 0x237D624
	public void .ctor(IList oids, IList values) { }

	// RVA: 0x237D6A0 Offset: 0x237D6A0 VA: 0x237D6A0
	public void .ctor(IList oids, IList values, X509NameEntryConverter converter) { }

	// RVA: 0x23711A8 Offset: 0x23711A8 VA: 0x23711A8
	public void .ctor(string dirName) { }

	// RVA: 0x237DCA8 Offset: 0x237DCA8 VA: 0x237DCA8
	public void .ctor(string dirName, X509NameEntryConverter converter) { }

	// RVA: 0x237E900 Offset: 0x237E900 VA: 0x237E900
	public void .ctor(bool reverse, string dirName) { }

	// RVA: 0x237E988 Offset: 0x237E988 VA: 0x237E988
	public void .ctor(bool reverse, string dirName, X509NameEntryConverter converter) { }

	// RVA: 0x237DC1C Offset: 0x237DC1C VA: 0x237DC1C
	public void .ctor(bool reverse, IDictionary lookUp, string dirName) { }

	// RVA: 0x237DD38 Offset: 0x237DD38 VA: 0x237DD38
	public void .ctor(bool reverse, IDictionary lookUp, string dirName, X509NameEntryConverter converter) { }

	// RVA: 0x237DB8C Offset: 0x237DB8C VA: 0x237DB8C
	public static bool get_DefaultReverse() { }

	// RVA: 0x237F078 Offset: 0x237F078 VA: 0x237F078
	public static void set_DefaultReverse(bool value) { }

	// RVA: 0x2371A40 Offset: 0x2371A40 VA: 0x2371A40
	public static X509Name GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x2371C80 Offset: 0x2371C80 VA: 0x2371C80
	public static X509Name GetInstance(object obj) { }

	// RVA: 0x237ECC0 Offset: 0x237ECC0 VA: 0x237ECC0
	private DerObjectIdentifier DecodeOid(string name, IDictionary lookUp) { }

	// RVA: 0x237F110 Offset: 0x237F110 VA: 0x237F110
	public IList GetOidList() { }

	// RVA: 0x237F17C Offset: 0x237F17C VA: 0x237F17C
	public IList GetValueList() { }

	// RVA: 0x237F184 Offset: 0x237F184 VA: 0x237F184
	public IList GetValueList(DerObjectIdentifier oid) { }

	// RVA: 0x237F4F0 Offset: 0x237F4F0 VA: 0x237F4F0 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x237FBF8 Offset: 0x237FBF8 VA: 0x237FBF8
	public bool Equivalent(X509Name other, bool inOrder) { }

	// RVA: 0x23801B8 Offset: 0x23801B8 VA: 0x23801B8
	public bool Equivalent(X509Name other) { }

	// RVA: 0x2380958 Offset: 0x2380958 VA: 0x2380958
	private static bool equivalentStrings(string s1, string s2) { }

	// RVA: 0x2380A58 Offset: 0x2380A58 VA: 0x2380A58
	private static string canonicalize(string s) { }

	// RVA: 0x2380E28 Offset: 0x2380E28 VA: 0x2380E28
	private static Asn1Object decodeObject(string v) { }

	// RVA: 0x2380CD4 Offset: 0x2380CD4 VA: 0x2380CD4
	private static string stripInternalSpaces(string str) { }

	// RVA: 0x2380FDC Offset: 0x2380FDC VA: 0x2380FDC
	private void AppendValue(StringBuilder buf, IDictionary oidSymbols, DerObjectIdentifier oid, string val) { }

	// RVA: 0x23813D0 Offset: 0x23813D0 VA: 0x23813D0
	public string ToString(bool reverse, IDictionary oidSymbols) { }

	// RVA: 0x2381B44 Offset: 0x2381B44 VA: 0x2381B44 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public abstract class X509NameEntryConverter // TypeDefIndex: 4582
{
	// Methods

