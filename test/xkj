
	// RVA: 0x25A408C Offset: 0x25A408C VA: 0x25A408C
	private byte[] toGeneralNameEncoding(string ip) { }

	// RVA: 0x25A54D8 Offset: 0x25A54D8 VA: 0x25A54D8
	private void parseIPv4Mask(string mask, byte[] addr, int offset) { }

	// RVA: 0x25A5370 Offset: 0x25A5370 VA: 0x25A5370
	private void parseIPv4(string ip, byte[] addr, int offset) { }

	// RVA: 0x25A5278 Offset: 0x25A5278 VA: 0x25A5278
	private int[] parseMask(string mask) { }

	// RVA: 0x25A516C Offset: 0x25A516C VA: 0x25A516C
	private void copyInts(int[] parsedIp, byte[] addr, int offSet) { }

	// RVA: 0x25A4B80 Offset: 0x25A4B80 VA: 0x25A4B80
	private int[] parseIPv6(string ip) { }

	// RVA: 0x25A559C Offset: 0x25A559C VA: 0x25A559C Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class GeneralNames : Asn1Encodable // TypeDefIndex: 4565
{
	// Fields
	private readonly GeneralName[] names; // 0x10

	// Methods

	// RVA: 0x25A561C Offset: 0x25A561C VA: 0x25A561C
	public void .ctor(GeneralName name) { }

	// RVA: 0x25A56E4 Offset: 0x25A56E4 VA: 0x25A56E4
	public void .ctor(GeneralName[] names) { }

	// RVA: 0x25A57CC Offset: 0x25A57CC VA: 0x25A57CC
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A591C Offset: 0x25A591C VA: 0x25A591C
	public static GeneralNames GetInstance(object obj) { }

	// RVA: 0x25A2914 Offset: 0x25A2914 VA: 0x25A2914
	public static GeneralNames GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A5B14 Offset: 0x25A5B14 VA: 0x25A5B14
	public GeneralName[] GetNames() { }

	// RVA: 0x25A5BEC Offset: 0x25A5BEC VA: 0x25A5BEC Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A5C54 Offset: 0x25A5C54 VA: 0x25A5C54 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class IssuingDistributionPoint : Asn1Encodable // TypeDefIndex: 4566
{
	// Fields
	private readonly DistributionPointName _distributionPoint; // 0x10
	private readonly bool _onlyContainsUserCerts; // 0x18
	private readonly bool _onlyContainsCACerts; // 0x19
	private readonly ReasonFlags _onlySomeReasons; // 0x20
	private readonly bool _indirectCRL; // 0x28
	private readonly bool _onlyContainsAttributeCerts; // 0x29
	private readonly Asn1Sequence seq; // 0x30

	// Properties
	public bool OnlyContainsUserCerts { get; }
	public bool OnlyContainsCACerts { get; }
	public bool IsIndirectCrl { get; }
	public bool OnlyContainsAttributeCerts { get; }
	public DistributionPointName DistributionPoint { get; }
	public ReasonFlags OnlySomeReasons { get; }

	// Methods

	// RVA: 0x25A5E20 Offset: 0x25A5E20 VA: 0x25A5E20
	public void .ctor(DistributionPointName distributionPoint, bool onlyContainsUserCerts, bool onlyContainsCACerts, ReasonFlags onlySomeReasons, bool indirectCRL, bool onlyContainsAttributeCerts) { }

	// RVA: 0x25A6400 Offset: 0x25A6400 VA: 0x25A6400
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A66E8 Offset: 0x25A66E8 VA: 0x25A66E8
	public static IssuingDistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A6704 Offset: 0x25A6704 VA: 0x25A6704
	public static IssuingDistributionPoint GetInstance(object obj) { }

	// RVA: 0x25A68FC Offset: 0x25A68FC VA: 0x25A68FC
	public bool get_OnlyContainsUserCerts() { }

	// RVA: 0x25A6904 Offset: 0x25A6904 VA: 0x25A6904
	public bool get_OnlyContainsCACerts() { }

	// RVA: 0x25A690C Offset: 0x25A690C VA: 0x25A690C
	public bool get_IsIndirectCrl() { }

	// RVA: 0x25A6914 Offset: 0x25A6914 VA: 0x25A6914
	public bool get_OnlyContainsAttributeCerts() { }

	// RVA: 0x25A691C Offset: 0x25A691C VA: 0x25A691C
	public DistributionPointName get_DistributionPoint() { }

	// RVA: 0x25A6924 Offset: 0x25A6924 VA: 0x25A6924
	public ReasonFlags get_OnlySomeReasons() { }

	// RVA: 0x25A692C Offset: 0x25A692C VA: 0x25A692C Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A6934 Offset: 0x25A6934 VA: 0x25A6934 Slot: 3
	public override string ToString() { }

	// RVA: 0x25A6BF4 Offset: 0x25A6BF4 VA: 0x25A6BF4
	private void appendObject(StringBuilder buf, string sep, string name, string val) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class KeyUsage : DerBitString // TypeDefIndex: 4567
{
	// Fields
	public const int DigitalSignature = 128;
	public const int NonRepudiation = 64;
	public const int KeyEncipherment = 32;
	public const int DataEncipherment = 16;
	public const int KeyAgreement = 8;
	public const int KeyCertSign = 4;
	public const int CrlSign = 2;
	public const int EncipherOnly = 1;
	public const int DecipherOnly = 32768;

	// Methods

	// RVA: 0x25A6DA0 Offset: 0x25A6DA0 VA: 0x25A6DA0
	public void .ctor(int usage) { }

	// RVA: 0x25A6E18 Offset: 0x25A6E18 VA: 0x25A6E18
	private void .ctor(DerBitString usage) { }

	// RVA: 0x25A6ED0 Offset: 0x25A6ED0 VA: 0x25A6ED0
	public static KeyUsage GetInstance(object obj) { }

	// RVA: 0x25A6FD4 Offset: 0x25A6FD4 VA: 0x25A6FD4 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class ReasonFlags : DerBitString // TypeDefIndex: 4568
{
	// Fields
	public const int Unused = 128;
	public const int KeyCompromise = 64;
	public const int CACompromise = 32;
	public const int AffiliationChanged = 16;
	public const int Superseded = 8;
	public const int CessationOfOperation = 4;
	public const int CertificateHold = 2;
	public const int PrivilegeWithdrawn = 1;
	public const int AACompromise = 32768;

	// Methods

	// RVA: 0x25A713C Offset: 0x25A713C VA: 0x25A713C
	public void .ctor(int reasons) { }

	// RVA: 0x25A285C Offset: 0x25A285C VA: 0x25A285C
	public void .ctor(DerBitString reasons) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class RsaPublicKeyStructure : Asn1Encodable // TypeDefIndex: 4569
{
	// Fields
	private BigInteger modulus; // 0x10
	private BigInteger publicExponent; // 0x18

	// Properties
	public BigInteger Modulus { get; }
	public BigInteger PublicExponent { get; }

	// Methods

	// RVA: 0x25A71B4 Offset: 0x25A71B4 VA: 0x25A71B4
	public void .ctor(BigInteger modulus, BigInteger publicExponent) { }

	// RVA: 0x25A7300 Offset: 0x25A7300 VA: 0x25A7300
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A74A8 Offset: 0x25A74A8 VA: 0x25A74A8
	public static RsaPublicKeyStructure GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A74C4 Offset: 0x25A74C4 VA: 0x25A74C4
	public static RsaPublicKeyStructure GetInstance(object obj) { }

	// RVA: 0x25A76B0 Offset: 0x25A76B0 VA: 0x25A76B0
	public BigInteger get_Modulus() { }

	// RVA: 0x25A76B8 Offset: 0x25A76B8 VA: 0x25A76B8
	public BigInteger get_PublicExponent() { }

	// RVA: 0x25A76C0 Offset: 0x25A76C0 VA: 0x25A76C0 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class SubjectPublicKeyInfo : Asn1Encodable // TypeDefIndex: 4570
{
	// Fields
	private readonly AlgorithmIdentifier algID; // 0x10
	private readonly DerBitString keyData; // 0x18

	// Properties
	public AlgorithmIdentifier AlgorithmID { get; }
	public DerBitString PublicKeyData { get; }

	// Methods

	// RVA: 0x25A7830 Offset: 0x25A7830 VA: 0x25A7830
	public void .ctor(AlgorithmIdentifier algID, Asn1Encodable publicKey) { }

	// RVA: 0x25A78B0 Offset: 0x25A78B0 VA: 0x25A78B0
	public void .ctor(AlgorithmIdentifier algID, byte[] publicKey) { }

	// RVA: 0x25A7930 Offset: 0x25A7930 VA: 0x25A7930
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A7ADC Offset: 0x25A7ADC VA: 0x25A7ADC
	public static SubjectPublicKeyInfo GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A7AF8 Offset: 0x25A7AF8 VA: 0x25A7AF8
	public static SubjectPublicKeyInfo GetInstance(object obj) { }

	// RVA: 0x25A7B9C Offset: 0x25A7B9C VA: 0x25A7B9C
	public AlgorithmIdentifier get_AlgorithmID() { }

	// RVA: 0x25A7BA4 Offset: 0x25A7BA4 VA: 0x25A7BA4
	public Asn1Object GetPublicKey() { }

	// RVA: 0x25A7BE0 Offset: 0x25A7BE0 VA: 0x25A7BE0
	public DerBitString get_PublicKeyData() { }

	// RVA: 0x25A7BE8 Offset: 0x25A7BE8 VA: 0x25A7BE8 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class TbsCertificateStructure : Asn1Encodable // TypeDefIndex: 4571
{
	// Fields
	internal Asn1Sequence seq; // 0x10
	internal DerInteger version; // 0x18
	internal DerInteger serialNumber; // 0x20
	internal AlgorithmIdentifier signature; // 0x28
	internal X509Name issuer; // 0x30
	internal Time startDate; // 0x38
	internal Time endDate; // 0x40
	internal X509Name subject; // 0x48
	internal SubjectPublicKeyInfo subjectPublicKeyInfo; // 0x50
	internal DerBitString issuerUniqueID; // 0x58
	internal DerBitString subjectUniqueID; // 0x60
	internal X509Extensions extensions; // 0x68

	// Properties
	public int Version { get; }
	public DerInteger VersionNumber { get; }
	public DerInteger SerialNumber { get; }
	public AlgorithmIdentifier Signature { get; }
	public X509Name Issuer { get; }
	public Time StartDate { get; }
	public Time EndDate { get; }
	public X509Name Subject { get; }
	public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
	public DerBitString IssuerUniqueID { get; }
	public DerBitString SubjectUniqueID { get; }
	public X509Extensions Extensions { get; }

	// Methods

	// RVA: 0x25A85A8 Offset: 0x25A85A8 VA: 0x25A85A8
	internal void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A8A7C Offset: 0x25A8A7C VA: 0x25A8A7C
	public static TbsCertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A8A98 Offset: 0x25A8A98 VA: 0x25A8A98
	public static TbsCertificateStructure GetInstance(object obj) { }

	// RVA: 0x25A8B3C Offset: 0x25A8B3C VA: 0x25A8B3C
	public int get_Version() { }

	// RVA: 0x25A8B8C Offset: 0x25A8B8C VA: 0x25A8B8C
	public DerInteger get_VersionNumber() { }

	// RVA: 0x25A8B94 Offset: 0x25A8B94 VA: 0x25A8B94
	public DerInteger get_SerialNumber() { }

	// RVA: 0x25A8B9C Offset: 0x25A8B9C VA: 0x25A8B9C
	public AlgorithmIdentifier get_Signature() { }

	// RVA: 0x25A8BA4 Offset: 0x25A8BA4 VA: 0x25A8BA4
	public X509Name get_Issuer() { }

	// RVA: 0x25A8BAC Offset: 0x25A8BAC VA: 0x25A8BAC
	public Time get_StartDate() { }

	// RVA: 0x25A8BB4 Offset: 0x25A8BB4 VA: 0x25A8BB4
	public Time get_EndDate() { }

	// RVA: 0x25A8BBC Offset: 0x25A8BBC VA: 0x25A8BBC
	public X509Name get_Subject() { }

	// RVA: 0x25A8BC4 Offset: 0x25A8BC4 VA: 0x25A8BC4
	public SubjectPublicKeyInfo get_SubjectPublicKeyInfo() { }

	// RVA: 0x25A8BCC Offset: 0x25A8BCC VA: 0x25A8BCC
	public DerBitString get_IssuerUniqueID() { }

	// RVA: 0x25A8BD4 Offset: 0x25A8BD4 VA: 0x25A8BD4
	public DerBitString get_SubjectUniqueID() { }

	// RVA: 0x25A8BDC Offset: 0x25A8BDC VA: 0x25A8BDC
	public X509Extensions get_Extensions() { }

	// RVA: 0x25A8BE4 Offset: 0x25A8BE4 VA: 0x25A8BE4 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlEntry : Asn1Encodable // TypeDefIndex: 4572
{
	// Fields
	internal Asn1Sequence seq; // 0x10
	internal DerInteger userCertificate; // 0x18
	internal Time revocationDate; // 0x20
	internal X509Extensions crlEntryExtensions; // 0x28

	// Properties
	public DerInteger UserCertificate { get; }
	public Time RevocationDate { get; }
	public X509Extensions Extensions { get; }

	// Methods

	// RVA: 0x25A13D0 Offset: 0x25A13D0 VA: 0x25A13D0
	public void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A17E8 Offset: 0x25A17E8 VA: 0x25A17E8
	public DerInteger get_UserCertificate() { }

	// RVA: 0x25A17F0 Offset: 0x25A17F0 VA: 0x25A17F0
	public Time get_RevocationDate() { }

	// RVA: 0x25A17F8 Offset: 0x25A17F8 VA: 0x25A17F8
	public X509Extensions get_Extensions() { }

	// RVA: 0x25A1B28 Offset: 0x25A1B28 VA: 0x25A1B28 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class TbsCertificateList : Asn1Encodable // TypeDefIndex: 4573
{
	// Fields
	internal Asn1Sequence seq; // 0x10
	internal DerInteger version; // 0x18
	internal AlgorithmIdentifier signature; // 0x20
	internal X509Name issuer; // 0x28
	internal Time thisUpdate; // 0x30
	internal Time nextUpdate; // 0x38
	internal Asn1Sequence revokedCertificates; // 0x40
	internal X509Extensions crlExtensions; // 0x48

	// Properties
	public int Version { get; }
	public DerInteger VersionNumber { get; }
	public AlgorithmIdentifier Signature { get; }
	public X509Name Issuer { get; }
	public Time ThisUpdate { get; }
	public Time NextUpdate { get; }
	public X509Extensions Extensions { get; }

	// Methods

	// RVA: 0x25A7D10 Offset: 0x25A7D10 VA: 0x25A7D10
	internal void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A81D8 Offset: 0x25A81D8 VA: 0x25A81D8
	public static TbsCertificateList GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A0414 Offset: 0x25A0414 VA: 0x25A0414
	public static TbsCertificateList GetInstance(object obj) { }

	// RVA: 0x25A09A8 Offset: 0x25A09A8 VA: 0x25A09A8
	public int get_Version() { }

	// RVA: 0x25A81F4 Offset: 0x25A81F4 VA: 0x25A81F4
	public DerInteger get_VersionNumber() { }

	// RVA: 0x25A81FC Offset: 0x25A81FC VA: 0x25A81FC
	public AlgorithmIdentifier get_Signature() { }

	// RVA: 0x25A0A24 Offset: 0x25A0A24 VA: 0x25A0A24
	public X509Name get_Issuer() { }

	// RVA: 0x25A0A58 Offset: 0x25A0A58 VA: 0x25A0A58
	public Time get_ThisUpdate() { }

	// RVA: 0x25A0A8C Offset: 0x25A0A8C VA: 0x25A0A8C
	public Time get_NextUpdate() { }

	// RVA: 0x25A070C Offset: 0x25A070C VA: 0x25A070C
	public CrlEntry[] GetRevokedCertificates() { }

	// RVA: 0x25A089C Offset: 0x25A089C VA: 0x25A089C
	public IEnumerable GetRevokedCertificateEnumeration() { }

	// RVA: 0x25A8230 Offset: 0x25A8230 VA: 0x25A8230
	public X509Extensions get_Extensions() { }

	// RVA: 0x25A8238 Offset: 0x25A8238 VA: 0x25A8238 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: 
private class TbsCertificateList.RevokedCertificatesEnumeration : IEnumerable // TypeDefIndex: 4574
{
	// Fields
	private readonly IEnumerable en; // 0x10

	// Methods

	// RVA: 0x25A8204 Offset: 0x25A8204 VA: 0x25A8204
	internal void .ctor(IEnumerable en) { }

	// RVA: 0x25A8240 Offset: 0x25A8240 VA: 0x25A8240 Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class TbsCertificateList.RevokedCertificatesEnumeration.RevokedCertificatesEnumerator : IEnumerator // TypeDefIndex: 4575
{
	// Fields
	private readonly IEnumerator e; // 0x10

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x25A8324 Offset: 0x25A8324 VA: 0x25A8324
	internal void .ctor(IEnumerator e) { }

	// RVA: 0x25A8350 Offset: 0x25A8350 VA: 0x25A8350 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x25A8408 Offset: 0x25A8408 VA: 0x25A8408 Slot: 6
	public void Reset() { }

	// RVA: 0x25A84C0 Offset: 0x25A84C0 VA: 0x25A84C0 Slot: 4
	public object get_Current() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class Time : Asn1Encodable, IAsn1Choice // TypeDefIndex: 4576
{
	// Fields
	private readonly Asn1Object time; // 0x10

	// Methods

	// RVA: 0x25A8BEC Offset: 0x25A8BEC VA: 0x25A8BEC
	public void .ctor(Asn1Object time) { }

	// RVA: 0x25A8D1C Offset: 0x25A8D1C VA: 0x25A8D1C
	public void .ctor(DateTime date) { }

	// RVA: 0x25A8EA0 Offset: 0x25A8EA0 VA: 0x25A8EA0
	public static Time GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A1554 Offset: 0x25A1554 VA: 0x25A1554
	public static Time GetInstance(object obj) { }

	// RVA: 0x25A8ED0 Offset: 0x25A8ED0 VA: 0x25A8ED0
	public string GetTime() { }

	// RVA: 0x25A906C Offset: 0x25A906C VA: 0x25A906C
	public DateTime ToDateTime() { }

	// RVA: 0x25A9320 Offset: 0x25A9320 VA: 0x25A9320 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A9328 Offset: 0x25A9328 VA: 0x25A9328 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509CertificateStructure : Asn1Encodable // TypeDefIndex: 4577
{
	// Fields
	private readonly TbsCertificateStructure tbsCert; // 0x10
	private readonly AlgorithmIdentifier sigAlgID; // 0x18
	private readonly DerBitString sig; // 0x20

	// Properties
	public TbsCertificateStructure TbsCertificate { get; }
	public int Version { get; }
	public DerInteger SerialNumber { get; }
	public X509Name Issuer { get; }
	public Time StartDate { get; }
	public Time EndDate { get; }
	public X509Name Subject { get; }
	public SubjectPublicKeyInfo SubjectPublicKeyInfo { get; }
	public AlgorithmIdentifier SignatureAlgorithm { get; }
	public DerBitString Signature { get; }

	// Methods

	// RVA: 0x25A932C Offset: 0x25A932C VA: 0x25A932C
	public void .ctor(TbsCertificateStructure tbsCert, AlgorithmIdentifier sigAlgID, DerBitString sig) { }

	// RVA: 0x25A9424 Offset: 0x25A9424 VA: 0x25A9424
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A9574 Offset: 0x25A9574 VA: 0x25A9574
	public static X509CertificateStructure GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A9590 Offset: 0x25A9590 VA: 0x25A9590
	public static X509CertificateStructure GetInstance(object obj) { }

	// RVA: 0x25A9634 Offset: 0x25A9634 VA: 0x25A9634
	public TbsCertificateStructure get_TbsCertificate() { }

	// RVA: 0x25A963C Offset: 0x25A963C VA: 0x25A963C
	public int get_Version() { }

	// RVA: 0x25A9668 Offset: 0x25A9668 VA: 0x25A9668
	public DerInteger get_SerialNumber() { }

	// RVA: 0x25A9694 Offset: 0x25A9694 VA: 0x25A9694
	public X509Name get_Issuer() { }

	// RVA: 0x25A96C0 Offset: 0x25A96C0 VA: 0x25A96C0
	public Time get_StartDate() { }

	// RVA: 0x25A96EC Offset: 0x25A96EC VA: 0x25A96EC
	public Time get_EndDate() { }

	// RVA: 0x25A9718 Offset: 0x25A9718 VA: 0x25A9718
	public X509Name get_Subject() { }

	// RVA: 0x25A9744 Offset: 0x25A9744 VA: 0x25A9744
	public SubjectPublicKeyInfo get_SubjectPublicKeyInfo() { }

	// RVA: 0x25A9770 Offset: 0x25A9770 VA: 0x25A9770
	public AlgorithmIdentifier get_SignatureAlgorithm() { }

	// RVA: 0x25A9778 Offset: 0x25A9778 VA: 0x25A9778
	public DerBitString get_Signature() { }

	// RVA: 0x25A9780 Offset: 0x25A9780 VA: 0x25A9780
	public byte[] GetSignatureOctets() { }

	// RVA: 0x25A97B4 Offset: 0x25A97B4 VA: 0x25A97B4 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509DefaultEntryConverter : X509NameEntryConverter // TypeDefIndex: 4578
{
	// Methods

	// RVA: 0x25A9928 Offset: 0x25A9928 VA: 0x25A9928
	public void .ctor() { }

	// RVA: 0x25A9938 Offset: 0x25A9938 VA: 0x25A9938 Slot: 4
	public override Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509Extension // TypeDefIndex: 4579
{
	// Fields
	internal bool critical; // 0x10
	internal Asn1OctetString value; // 0x18

	// Properties
	public bool IsCritical { get; }
	public Asn1OctetString Value { get; }

	// Methods

	// RVA: 0x25A9E18 Offset: 0x25A9E18 VA: 0x25A9E18
	public void .ctor(DerBoolean critical, Asn1OctetString value) { }

	// RVA: 0x25A9ED4 Offset: 0x25A9ED4 VA: 0x25A9ED4
	public void .ctor(bool critical, Asn1OctetString value) { }

	// RVA: 0x25A9F14 Offset: 0x25A9F14 VA: 0x25A9F14
	public bool get_IsCritical() { }

	// RVA: 0x25A9F1C Offset: 0x25A9F1C VA: 0x25A9F1C
	public Asn1OctetString get_Value() { }

	// RVA: 0x25A9F24 Offset: 0x25A9F24 VA: 0x25A9F24
	public Asn1Encodable GetParsedValue() { }

	// RVA: 0x25A9F28 Offset: 0x25A9F28 VA: 0x25A9F28 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x25A9F70 Offset: 0x25A9F70 VA: 0x25A9F70 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x259FD08 Offset: 0x259FD08 VA: 0x259FD08
	public static Asn1Object ConvertValueToObject(X509Extension ext) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509Extensions : Asn1Encodable // TypeDefIndex: 4580
{
	// Fields
	public static readonly DerObjectIdentifier SubjectDirectoryAttributes; // 0x0
	public static readonly DerObjectIdentifier SubjectKeyIdentifier; // 0x8
	public static readonly DerObjectIdentifier KeyUsage; // 0x10
	public static readonly DerObjectIdentifier PrivateKeyUsagePeriod; // 0x18
	public static readonly DerObjectIdentifier SubjectAlternativeName; // 0x20
	public static readonly DerObjectIdentifier IssuerAlternativeName; // 0x28
	public static readonly DerObjectIdentifier BasicConstraints; // 0x30
	public static readonly DerObjectIdentifier CrlNumber; // 0x38
	public static readonly DerObjectIdentifier ReasonCode; // 0x40
	public static readonly DerObjectIdentifier InstructionCode; // 0x48
	public static readonly DerObjectIdentifier InvalidityDate; // 0x50
	public static readonly DerObjectIdentifier DeltaCrlIndicator; // 0x58
	public static readonly DerObjectIdentifier IssuingDistributionPoint; // 0x60
	public static readonly DerObjectIdentifier CertificateIssuer; // 0x68
	public static readonly DerObjectIdentifier NameConstraints; // 0x70
	public static readonly DerObjectIdentifier CrlDistributionPoints; // 0x78
	public static readonly DerObjectIdentifier CertificatePolicies; // 0x80
	public static readonly DerObjectIdentifier PolicyMappings; // 0x88
	public static readonly DerObjectIdentifier AuthorityKeyIdentifier; // 0x90
	public static readonly DerObjectIdentifier PolicyConstraints; // 0x98
	public static readonly DerObjectIdentifier ExtendedKeyUsage; // 0xA0
	public static readonly DerObjectIdentifier FreshestCrl; // 0xA8
	public static readonly DerObjectIdentifier InhibitAnyPolicy; // 0xB0
	public static readonly DerObjectIdentifier AuthorityInfoAccess; // 0xB8
	public static readonly DerObjectIdentifier SubjectInfoAccess; // 0xC0
	public static readonly DerObjectIdentifier LogoType; // 0xC8
	public static readonly DerObjectIdentifier BiometricInfo; // 0xD0
	public static readonly DerObjectIdentifier QCStatements; // 0xD8
	public static readonly DerObjectIdentifier AuditIdentity; // 0xE0
	public static readonly DerObjectIdentifier NoRevAvail; // 0xE8
	public static readonly DerObjectIdentifier TargetInformation; // 0xF0
	private readonly IDictionary extensions; // 0x10
	private readonly IList ordering; // 0x18

	// Properties
	public IEnumerable ExtensionOids { get; }

	// Methods

	// RVA: 0x25AA058 Offset: 0x25AA058 VA: 0x25AA058
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25AA7A0 Offset: 0x25AA7A0 VA: 0x25AA7A0
	public void .ctor(IDictionary extensions) { }

	// RVA: 0x25AA7B0 Offset: 0x25AA7B0 VA: 0x25AA7B0
	public void .ctor(IList ordering, IDictionary extensions) { }

	// RVA: 0x25AAD64 Offset: 0x25AAD64 VA: 0x25AAD64
	public void .ctor(IList oids, IList values) { }

	[ObsoleteAttribute] // RVA: 0xD34B58 Offset: 0xD34B58 VA: 0xD34B58
	// RVA: 0x25AB270 Offset: 0x25AB270 VA: 0x25AB270
	public void .ctor(Hashtable extensions) { }

	[ObsoleteAttribute] // RVA: 0xD34B68 Offset: 0xD34B68 VA: 0xD34B68
	// RVA: 0x25AB280 Offset: 0x25AB280 VA: 0x25AB280
	public void .ctor(ArrayList ordering, Hashtable extensions) { }

	[ObsoleteAttribute] // RVA: 0xD34B78 Offset: 0xD34B78 VA: 0xD34B78
	// RVA: 0x25AB788 Offset: 0x25AB788 VA: 0x25AB788
	public void .ctor(ArrayList oids, ArrayList values) { }

	// RVA: 0x25ABC3C Offset: 0x25ABC3C VA: 0x25ABC3C
	public static X509Extensions GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A18C8 Offset: 0x25A18C8 VA: 0x25A18C8
	public static X509Extensions GetInstance(object obj) { }

	[ObsoleteAttribute] // RVA: 0xD34B88 Offset: 0xD34B88 VA: 0xD34B88
	// RVA: 0x25ABCC4 Offset: 0x25ABCC4 VA: 0x25ABCC4
	public IEnumerator Oids() { }

	// RVA: 0x25ABD7C Offset: 0x25ABD7C VA: 0x25ABD7C
	public IEnumerable get_ExtensionOids() { }

	// RVA: 0x25ABDE4 Offset: 0x25ABDE4 VA: 0x25ABDE4
	public X509Extension GetExtension(DerObjectIdentifier oid) { }

	// RVA: 0x25ABF30 Offset: 0x25ABF30 VA: 0x25ABF30 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25AC6A8 Offset: 0x25AC6A8 VA: 0x25AC6A8
	public bool Equivalent(X509Extensions other) { }

	// RVA: 0x25ACCCC Offset: 0x25ACCCC VA: 0x25ACCCC
	public DerObjectIdentifier[] GetExtensionOids() { }

	// RVA: 0x25ACE88 Offset: 0x25ACE88 VA: 0x25ACE88
	public DerObjectIdentifier[] GetNonCriticalExtensionOids() { }

	// RVA: 0x25AD3B8 Offset: 0x25AD3B8 VA: 0x25AD3B8
	public DerObjectIdentifier[] GetCriticalExtensionOids() { }

	// RVA: 0x25ACE90 Offset: 0x25ACE90 VA: 0x25ACE90
	private DerObjectIdentifier[] GetExtensionOids(bool isCritical) { }

	// RVA: 0x25ACD34 Offset: 0x25ACD34 VA: 0x25ACD34
	private static DerObjectIdentifier[] ToOidArray(IList oids) { }

	// RVA: 0x25AD3C0 Offset: 0x25AD3C0 VA: 0x25AD3C0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509Name : Asn1Encodable // TypeDefIndex: 4581
{
	// Fields
	public static readonly DerObjectIdentifier C; // 0x0
	public static readonly DerObjectIdentifier O; // 0x8
	public static readonly DerObjectIdentifier OU; // 0x10
	public static readonly DerObjectIdentifier T; // 0x18
	public static readonly DerObjectIdentifier CN; // 0x20
	public static readonly DerObjectIdentifier Street; // 0x28
	public static readonly DerObjectIdentifier SerialNumber; // 0x30
	public static readonly DerObjectIdentifier L; // 0x38
	public static readonly DerObjectIdentifier ST; // 0x40
	public static readonly DerObjectIdentifier Surname; // 0x48
	public static readonly DerObjectIdentifier GivenName; // 0x50
	public static readonly DerObjectIdentifier Initials; // 0x58
	public static readonly DerObjectIdentifier Generation; // 0x60
	public static readonly DerObjectIdentifier UniqueIdentifier; // 0x68
	public static readonly DerObjectIdentifier BusinessCategory; // 0x70
	public static readonly DerObjectIdentifier PostalCode; // 0x78
	public static readonly DerObjectIdentifier DnQualifier; // 0x80
	public static readonly DerObjectIdentifier Pseudonym; // 0x88
	public static readonly DerObjectIdentifier DateOfBirth; // 0x90
	public static readonly DerObjectIdentifier PlaceOfBirth; // 0x98
	public static readonly DerObjectIdentifier Gender; // 0xA0
	public static readonly DerObjectIdentifier CountryOfCitizenship; // 0xA8
	public static readonly DerObjectIdentifier CountryOfResidence; // 0xB0
	public static readonly DerObjectIdentifier NameAtBirth; // 0xB8
	public static readonly DerObjectIdentifier PostalAddress; // 0xC0
	public static readonly DerObjectIdentifier DmdName; // 0xC8
	public static readonly DerObjectIdentifier TelephoneNumber; // 0xD0
	public static readonly DerObjectIdentifier Name; // 0xD8
	public static readonly DerObjectIdentifier EmailAddress; // 0xE0
	public static readonly DerObjectIdentifier UnstructuredName; // 0xE8
	public static readonly DerObjectIdentifier UnstructuredAddress; // 0xF0
	public static readonly DerObjectIdentifier E; // 0xF8
	public static readonly DerObjectIdentifier DC; // 0x100
	public static readonly DerObjectIdentifier UID; // 0x108
	private static readonly bool[] defaultReverse; // 0x110
	public static readonly Hashtable DefaultSymbols; // 0x118
	public static readonly Hashtable RFC2253Symbols; // 0x120
	public static readonly Hashtable RFC1779Symbols; // 0x128
	public static readonly Hashtable DefaultLookup; // 0x130
	private readonly IList ordering; // 0x10
	private readonly X509NameEntryConverter converter; // 0x18
	private IList values; // 0x20
	private IList added; // 0x28
	private Asn1Sequence seq; // 0x30

	// Properties
	public static bool DefaultReverse { get; set; }

	// Methods

	// RVA: 0x25AD968 Offset: 0x25AD968 VA: 0x25AD968
	private static void .cctor() { }

	// RVA: 0x25AF350 Offset: 0x25AF350 VA: 0x25AF350
	protected void .ctor() { }

	// RVA: 0x25AF3DC Offset: 0x25AF3DC VA: 0x25AF3DC
	protected void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25AFDC8 Offset: 0x25AFDC8 VA: 0x25AFDC8
	public void .ctor(IList ordering, IDictionary attributes) { }

	// RVA: 0x25AFE44 Offset: 0x25AFE44 VA: 0x25AFE44
	public void .ctor(IList ordering, IDictionary attributes, X509NameEntryConverter converter) { }

	// RVA: 0x25B0480 Offset: 0x25B0480 VA: 0x25B0480
	public void .ctor(IList oids, IList values) { }

	// RVA: 0x25B04FC Offset: 0x25B04FC VA: 0x25B04FC
	public void .ctor(IList oids, IList values, X509NameEntryConverter converter) { }

	// RVA: 0x25A4004 Offset: 0x25A4004 VA: 0x25A4004
	public void .ctor(string dirName) { }

	// RVA: 0x25B0B04 Offset: 0x25B0B04 VA: 0x25B0B04
	public void .ctor(string dirName, X509NameEntryConverter converter) { }

	// RVA: 0x25B175C Offset: 0x25B175C VA: 0x25B175C
	public void .ctor(bool reverse, string dirName) { }

	// RVA: 0x25B17E4 Offset: 0x25B17E4 VA: 0x25B17E4
	public void .ctor(bool reverse, string dirName, X509NameEntryConverter converter) { }

	// RVA: 0x25B0A78 Offset: 0x25B0A78 VA: 0x25B0A78
	public void .ctor(bool reverse, IDictionary lookUp, string dirName) { }

	// RVA: 0x25B0B94 Offset: 0x25B0B94 VA: 0x25B0B94
	public void .ctor(bool reverse, IDictionary lookUp, string dirName, X509NameEntryConverter converter) { }

	// RVA: 0x25B09E8 Offset: 0x25B09E8 VA: 0x25B09E8
	public static bool get_DefaultReverse() { }

	// RVA: 0x25B1ED4 Offset: 0x25B1ED4 VA: 0x25B1ED4
	public static void set_DefaultReverse(bool value) { }

	// RVA: 0x25A489C Offset: 0x25A489C VA: 0x25A489C
	public static X509Name GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A4ADC Offset: 0x25A4ADC VA: 0x25A4ADC
	public static X509Name GetInstance(object obj) { }

	// RVA: 0x25B1B1C Offset: 0x25B1B1C VA: 0x25B1B1C
	private DerObjectIdentifier DecodeOid(string name, IDictionary lookUp) { }

	// RVA: 0x25B1F6C Offset: 0x25B1F6C VA: 0x25B1F6C
	public IList GetOidList() { }

	// RVA: 0x25B1FD8 Offset: 0x25B1FD8 VA: 0x25B1FD8
	public IList GetValueList() { }

	// RVA: 0x25B1FE0 Offset: 0x25B1FE0 VA: 0x25B1FE0
	public IList GetValueList(DerObjectIdentifier oid) { }

	// RVA: 0x25B234C Offset: 0x25B234C VA: 0x25B234C Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25B2A54 Offset: 0x25B2A54 VA: 0x25B2A54
	public bool Equivalent(X509Name other, bool inOrder) { }

	// RVA: 0x25B3014 Offset: 0x25B3014 VA: 0x25B3014
	public bool Equivalent(X509Name other) { }

	// RVA: 0x25B37B4 Offset: 0x25B37B4 VA: 0x25B37B4
	private static bool equivalentStrings(string s1, string s2) { }

	// RVA: 0x25B38B4 Offset: 0x25B38B4 VA: 0x25B38B4
	private static string canonicalize(string s) { }

	// RVA: 0x25B3C84 Offset: 0x25B3C84 VA: 0x25B3C84
	private static Asn1Object decodeObject(string v) { }

	// RVA: 0x25B3B30 Offset: 0x25B3B30 VA: 0x25B3B30
	private static string stripInternalSpaces(string str) { }

	// RVA: 0x25B3E38 Offset: 0x25B3E38 VA: 0x25B3E38
	private void AppendValue(StringBuilder buf, IDictionary oidSymbols, DerObjectIdentifier oid, string val) { }

	// RVA: 0x25B422C Offset: 0x25B422C VA: 0x25B422C
	public string ToString(bool reverse, IDictionary oidSymbols) { }

	// RVA: 0x25B49A0 Offset: 0x25B49A0 VA: 0x25B49A0 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public abstract class X509NameEntryConverter // TypeDefIndex: 4582
{
	// Methods

	// RVA: 0x25A9930 Offset: 0x25A9930 VA: 0x25A9930
	protected void .ctor() { }

	// RVA: 0x25A9D78 Offset: 0x25A9D78 VA: 0x25A9D78
	protected Asn1Object ConvertHexEncoded(string hexString, int offset) { }

	// RVA: 0x25B4A18 Offset: 0x25B4A18 VA: 0x25B4A18
	protected bool CanBePrintable(string str) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Asn1Object GetConvertedValue(DerObjectIdentifier oid, string value);
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class X509NameTokenizer // TypeDefIndex: 4583
{
	// Fields
	private string value; // 0x10
	private int index; // 0x18
	private char separator; // 0x1C
	private StringBuilder buffer; // 0x20

	// Methods

	// RVA: 0x25B187C Offset: 0x25B187C VA: 0x25B187C
	public void .ctor(string oid) { }

	// RVA: 0x25B1E08 Offset: 0x25B1E08 VA: 0x25B1E08
	public void .ctor(string oid, char separator) { }

	// RVA: 0x25B1E94 Offset: 0x25B1E94 VA: 0x25B1E94
	public bool HasMoreTokens() { }

	// RVA: 0x25B1884 Offset: 0x25B1884 VA: 0x25B1884
	public string NextToken() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public abstract class X509ObjectIdentifiers // TypeDefIndex: 4584
{
	// Fields
	internal const string ID = "2.5.4";
	public static readonly DerObjectIdentifier CommonName; // 0x0
	public static readonly DerObjectIdentifier CountryName; // 0x8
	public static readonly DerObjectIdentifier LocalityName; // 0x10
	public static readonly DerObjectIdentifier StateOrProvinceName; // 0x18
	public static readonly DerObjectIdentifier Organization; // 0x20
	public static readonly DerObjectIdentifier OrganizationalUnitName; // 0x28
	public static readonly DerObjectIdentifier id_at_telephoneNumber; // 0x30
	public static readonly DerObjectIdentifier id_at_name; // 0x38
	public static readonly DerObjectIdentifier IdSha1; // 0x40
	public static readonly DerObjectIdentifier RipeMD160; // 0x48
	public static readonly DerObjectIdentifier RipeMD160WithRsaEncryption; // 0x50
	public static readonly DerObjectIdentifier IdEARsa; // 0x58
	public static readonly DerObjectIdentifier IdPkix; // 0x60
	public static readonly DerObjectIdentifier IdPE; // 0x68
	public static readonly DerObjectIdentifier IdAD; // 0x70
	public static readonly DerObjectIdentifier IdADCAIssuers; // 0x78
	public static readonly DerObjectIdentifier IdADOcsp; // 0x80
	public static readonly DerObjectIdentifier OcspAccessMethod; // 0x88
	public static readonly DerObjectIdentifier CrlAccessMethod; // 0x90

	// Methods

	// RVA: 0x25B4A24 Offset: 0x25B4A24 VA: 0x25B4A24
	protected void .ctor() { }

	// RVA: 0x25B4A2C Offset: 0x25B4A2C VA: 0x25B4A2C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.X9
public class DHDomainParameters : Asn1Encodable // TypeDefIndex: 4585
{
	// Fields
	private readonly DerInteger p; // 0x10
	private readonly DerInteger g; // 0x18
	private readonly DerInteger q; // 0x20
	private readonly DerInteger j; // 0x28
	private readonly DHValidationParms validationParms; // 0x30

	// Properties
	public DerInteger P { get; }
	public DerInteger G { get; }
	public DerInteger Q { get; }
	public DerInteger J { get; }
	public DHValidationParms ValidationParms { get; }

	// Methods

	// RVA: 0x25B4E18 Offset: 0x25B4E18 VA: 0x25B4E18
	public void .ctor(DerInteger p, DerInteger g, DerInteger q, DerInteger j, DHValidationParms validationParms) { }

	// RVA: 0x25B4F24 Offset: 0x25B4F24 VA: 0x25B4F24
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25B5550 Offset: 0x25B5550 VA: 0x25B5550
	public static DHDomainParameters GetInstance(Asn1TaggedObject obj, bool isExplicit) { }

	// RVA: 0x25B556C Offset: 0x25B556C VA: 0x25B556C
	public static DHDomainParameters GetInstance(object obj) { }

	// RVA: 0x25B512C Offset: 0x25B512C VA: 0x25B512C
	private static Asn1Encodable GetNext(IEnumerator e) { }

	// RVA: 0x25B5764 Offset: 0x25B5764 VA: 0x25B5764
	public DerInteger get_P() { }

	// RVA: 0x25B576C Offset: 0x25B576C VA: 0x25B576C
	public DerInteger get_G() { }

	// RVA: 0x25B5774 Offset: 0x25B5774 VA: 0x25B5774
	public DerInteger get_Q() { }

	// RVA: 0x25B577C Offset: 0x25B577C VA: 0x25B577C
	public DerInteger get_J() { }

	// RVA: 0x25B5784 Offset: 0x25B5784 VA: 0x25B5784
	public DHValidationParms get_ValidationParms() { }

	// RVA: 0x25B578C Offset: 0x25B578C VA: 0x25B578C Slot: 5
	public override Asn1Object ToAsn1Object() { }
