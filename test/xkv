
	// Methods

	// RVA: 0x1DDA150 Offset: 0x1DDA150 VA: 0x1DDA150
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x1DDA244 Offset: 0x1DDA244 VA: 0x1DDA244
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, int saltLen) { }

	// RVA: 0x1DDA2AC Offset: 0x1DDA2AC VA: 0x1DDA2AC
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, byte[] salt) { }

	// RVA: 0x1DDA4E4 Offset: 0x1DDA4E4 VA: 0x1DDA4E4
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen) { }

	// RVA: 0x1DDA558 Offset: 0x1DDA558 VA: 0x1DDA558
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, byte[] salt) { }

	// RVA: 0x1DDA278 Offset: 0x1DDA278 VA: 0x1DDA278
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, int saltLen, byte trailer) { }

	// RVA: 0x1DDA51C Offset: 0x1DDA51C VA: 0x1DDA51C
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen, byte trailer) { }

	// RVA: 0x1DDA314 Offset: 0x1DDA314 VA: 0x1DDA314
	private void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest1, IDigest contentDigest2, IDigest mgfDigest, int saltLen, byte[] salt, byte trailer) { }

	// RVA: 0x1DDA5CC Offset: 0x1DDA5CC VA: 0x1DDA5CC
	public static PssSigner CreateRawSigner(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x1DDA6FC Offset: 0x1DDA6FC VA: 0x1DDA6FC
	public static PssSigner CreateRawSigner(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen, byte trailer) { }

	// RVA: 0x1DDA7C0 Offset: 0x1DDA7C0 VA: 0x1DDA7C0 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DDA8B4 Offset: 0x1DDA8B4 VA: 0x1DDA8B4 Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DDAB6C Offset: 0x1DDAB6C VA: 0x1DDAB6C
	private void ClearBlock(byte[] block) { }

	// RVA: 0x1DDABA4 Offset: 0x1DDABA4 VA: 0x1DDABA4 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x1DDAC6C Offset: 0x1DDAC6C VA: 0x1DDAC6C Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x1DDAD4C Offset: 0x1DDAD4C VA: 0x1DDAD4C Slot: 15
	public virtual void Reset() { }

	// RVA: 0x1DDAE04 Offset: 0x1DDAE04 VA: 0x1DDAE04 Slot: 16
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DDB8B8 Offset: 0x1DDB8B8 VA: 0x1DDB8B8 Slot: 17
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x1DDBFBC Offset: 0x1DDBFBC VA: 0x1DDBFBC
	private void ItoOSP(int i, byte[] sp) { }

	// RVA: 0x1DDB3AC Offset: 0x1DDB3AC VA: 0x1DDB3AC
	private byte[] MaskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class RandomDsaKCalculator : IDsaKCalculator // TypeDefIndex: 4879
{
	// Fields
	private BigInteger q; // 0x10
	private SecureRandom random; // 0x18

	// Properties
	public virtual bool IsDeterministic { get; }

	// Methods

	// RVA: 0x1DD0FF8 Offset: 0x1DD0FF8 VA: 0x1DD0FF8
	public void .ctor() { }

	// RVA: 0x1DDC070 Offset: 0x1DDC070 VA: 0x1DDC070 Slot: 8
	public virtual bool get_IsDeterministic() { }

	// RVA: 0x1DDC078 Offset: 0x1DDC078 VA: 0x1DDC078 Slot: 9
	public virtual void Init(BigInteger n, SecureRandom random) { }

	// RVA: 0x1DDC080 Offset: 0x1DDC080 VA: 0x1DDC080 Slot: 10
	public virtual void Init(BigInteger n, BigInteger d, byte[] message) { }

	// RVA: 0x1DDC0F4 Offset: 0x1DDC0F4 VA: 0x1DDC0F4 Slot: 11
	public virtual BigInteger NextK() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class RsaDigestSigner : ISigner // TypeDefIndex: 4880
{
	// Fields
	private readonly IAsymmetricBlockCipher rsaEngine; // 0x10
	private readonly AlgorithmIdentifier algId; // 0x18
	private readonly IDigest digest; // 0x20
	private bool forSigning; // 0x28
	private static readonly IDictionary oidMap; // 0x0

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DDC1D4 Offset: 0x1DDC1D4 VA: 0x1DDC1D4
	private static void .cctor() { }

	// RVA: 0x1DDC994 Offset: 0x1DDC994 VA: 0x1DDC994
	public void .ctor(IDigest digest) { }

	// RVA: 0x1DDCB9C Offset: 0x1DDCB9C VA: 0x1DDCB9C
	public void .ctor(IDigest digest, DerObjectIdentifier digestOid) { }

	// RVA: 0x1DDCC50 Offset: 0x1DDCC50 VA: 0x1DDCC50
	public void .ctor(IDigest digest, AlgorithmIdentifier algId) { }

	// RVA: 0x1DDCCF8 Offset: 0x1DDCCF8 VA: 0x1DDCCF8 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DDCDEC Offset: 0x1DDCDEC VA: 0x1DDCDEC Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DDD048 Offset: 0x1DDD048 VA: 0x1DDD048 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x1DDD110 Offset: 0x1DDD110 VA: 0x1DDD110 Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x1DDD1F0 Offset: 0x1DDD1F0 VA: 0x1DDD1F0 Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DDD4E0 Offset: 0x1DDD4E0 VA: 0x1DDD4E0 Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x1DDD9BC Offset: 0x1DDD9BC VA: 0x1DDD9BC Slot: 17
	public virtual void Reset() { }

	// RVA: 0x1DDD440 Offset: 0x1DDD440 VA: 0x1DDD440
	private byte[] DerEncode(byte[] hash) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class X931Signer : ISigner // TypeDefIndex: 4881
{
	// Fields
	[ObsoleteAttribute] // RVA: 0xC4A1BC Offset: 0xC4A1BC VA: 0xC4A1BC
	public const int TRAILER_IMPLICIT = 188;
	[ObsoleteAttribute] // RVA: 0xC4A1F4 Offset: 0xC4A1F4 VA: 0xC4A1F4
	public const int TRAILER_RIPEMD160 = 12748;
	[ObsoleteAttribute] // RVA: 0xC4A22C Offset: 0xC4A22C VA: 0xC4A22C
	public const int TRAILER_RIPEMD128 = 13004;
	[ObsoleteAttribute] // RVA: 0xC4A264 Offset: 0xC4A264 VA: 0xC4A264
	public const int TRAILER_SHA1 = 13260;
	[ObsoleteAttribute] // RVA: 0xC4A29C Offset: 0xC4A29C VA: 0xC4A29C
	public const int TRAILER_SHA256 = 13516;
	[ObsoleteAttribute] // RVA: 0xC4A2D4 Offset: 0xC4A2D4 VA: 0xC4A2D4
	public const int TRAILER_SHA512 = 13772;
	[ObsoleteAttribute] // RVA: 0xC4A30C Offset: 0xC4A30C VA: 0xC4A30C
	public const int TRAILER_SHA384 = 14028;
	[ObsoleteAttribute] // RVA: 0xC4A344 Offset: 0xC4A344 VA: 0xC4A344
	public const int TRAILER_WHIRLPOOL = 14284;
	[ObsoleteAttribute] // RVA: 0xC4A37C Offset: 0xC4A37C VA: 0xC4A37C
	public const int TRAILER_SHA224 = 14540;
	private IDigest digest; // 0x10
	private IAsymmetricBlockCipher cipher; // 0x18
	private RsaKeyParameters kParam; // 0x20
	private int trailer; // 0x28
	private int keyBits; // 0x2C
	private byte[] block; // 0x30

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DDDA74 Offset: 0x1DDDA74 VA: 0x1DDDA74
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, bool isImplicit) { }

	// RVA: 0x1DDDB8C Offset: 0x1DDDB8C VA: 0x1DDDB8C
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x1DDDB94 Offset: 0x1DDDB94 VA: 0x1DDDB94 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DDDD14 Offset: 0x1DDDD14 VA: 0x1DDDD14 Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DDDEE4 Offset: 0x1DDDEE4 VA: 0x1DDDEE4
	private void ClearBlock(byte[] block) { }

	// RVA: 0x1DDDF1C Offset: 0x1DDDF1C VA: 0x1DDDF1C Slot: 13
	public virtual void Update(byte b) { }

	// RVA: 0x1DDDFE4 Offset: 0x1DDDFE4 VA: 0x1DDDFE4 Slot: 14
	public virtual void BlockUpdate(byte[] input, int off, int len) { }

	// RVA: 0x1DDE0C4 Offset: 0x1DDE0C4 VA: 0x1DDE0C4 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x1DDE17C Offset: 0x1DDE17C VA: 0x1DDE17C Slot: 16
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DDE340 Offset: 0x1DDE340 VA: 0x1DDE340
	private void CreateSignatureBlock() { }

	// RVA: 0x1DDE6E0 Offset: 0x1DDE6E0 VA: 0x1DDE6E0 Slot: 17
	public virtual bool VerifySignature(byte[] signature) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsAgreementCredentials : AbstractTlsCredentials, TlsAgreementCredentials, TlsCredentials // TypeDefIndex: 4882
{
	// Methods

	// RVA: 0x1DDE934 Offset: 0x1DDE934 VA: 0x1DDE934
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract byte[] GenerateAgreement(AsymmetricKeyParameter peerPublicKey);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class AbstractTlsCipherFactory : TlsCipherFactory // TypeDefIndex: 4883
{
	// Methods

	// RVA: 0x1DDE944 Offset: 0x1DDE944 VA: 0x1DDE944
	public void .ctor() { }

	// RVA: 0x1DDE94C Offset: 0x1DDE94C VA: 0x1DDE94C Slot: 5
	public virtual TlsCipher CreateCipher(TlsContext context, int encryptionAlgorithm, int macAlgorithm) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsClient : AbstractTlsPeer, TlsClient, TlsPeer // TypeDefIndex: 4884
{
	// Fields
	protected TlsCipherFactory mCipherFactory; // 0x10
	protected TlsClientContext mContext; // 0x18
	protected IList mSupportedSignatureAlgorithms; // 0x20
	protected int[] mNamedCurves; // 0x28
	protected byte[] mClientECPointFormats; // 0x30
	protected byte[] mServerECPointFormats; // 0x38
	protected int mSelectedCipherSuite; // 0x40
	protected short mSelectedCompressionMethod; // 0x44
	[CompilerGeneratedAttribute] // RVA: 0xC4A3B4 Offset: 0xC4A3B4 VA: 0xC4A3B4
	[DebuggerBrowsableAttribute] // RVA: 0xC4A3B4 Offset: 0xC4A3B4 VA: 0xC4A3B4
	private List<string> <HostNames>k__BackingField; // 0x48

	// Properties
	public List<string> HostNames { get; set; }
	public virtual ProtocolVersion ClientHelloRecordLayerVersion { get; }
	public virtual ProtocolVersion ClientVersion { get; }
	public virtual bool IsFallback { get; }
	public virtual ProtocolVersion MinimumVersion { get; }

	// Methods

	// RVA: 0x1DDE9B8 Offset: 0x1DDE9B8 VA: 0x1DDE9B8
	public void .ctor() { }

	// RVA: 0x1DDEA24 Offset: 0x1DDEA24 VA: 0x1DDEA24
	public void .ctor(TlsCipherFactory cipherFactory) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC76E4 Offset: 0xCC76E4 VA: 0xCC76E4
	// RVA: 0x1DDEA58 Offset: 0x1DDEA58 VA: 0x1DDEA58 Slot: 18
	public List<string> get_HostNames() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC76F4 Offset: 0xCC76F4 VA: 0xCC76F4
	// RVA: 0x1DDEA60 Offset: 0x1DDEA60 VA: 0x1DDEA60 Slot: 19
	public void set_HostNames(List<string> value) { }

	// RVA: 0x1DDEA68 Offset: 0x1DDEA68 VA: 0x1DDEA68 Slot: 38
	protected virtual bool AllowUnexpectedServerExtension(int extensionType, byte[] extensionData) { }

	// RVA: 0x1DDEAF4 Offset: 0x1DDEAF4 VA: 0x1DDEAF4 Slot: 39
	protected virtual void CheckForUnexpectedServerExtension(IDictionary serverExtensions, int extensionType) { }

	// RVA: 0x1DDEBD8 Offset: 0x1DDEBD8 VA: 0x1DDEBD8 Slot: 40
	public virtual void Init(TlsClientContext context) { }

	// RVA: 0x1DDEBE0 Offset: 0x1DDEBE0 VA: 0x1DDEBE0 Slot: 41
	public virtual TlsSession GetSessionToResume() { }

	// RVA: 0x1DDEBE8 Offset: 0x1DDEBE8 VA: 0x1DDEBE8 Slot: 42
	public virtual ProtocolVersion get_ClientHelloRecordLayerVersion() { }

	// RVA: 0x1DDEBF8 Offset: 0x1DDEBF8 VA: 0x1DDEBF8 Slot: 43
	public virtual ProtocolVersion get_ClientVersion() { }

	// RVA: 0x1DDEC60 Offset: 0x1DDEC60 VA: 0x1DDEC60 Slot: 44
	public virtual bool get_IsFallback() { }

	// RVA: 0x1DDEC68 Offset: 0x1DDEC68 VA: 0x1DDEC68 Slot: 45
	public virtual IDictionary GetClientExtensions() { }

	// RVA: 0x1DDF078 Offset: 0x1DDF078 VA: 0x1DDF078 Slot: 46
	public virtual ProtocolVersion get_MinimumVersion() { }

	// RVA: 0x1DDF0E0 Offset: 0x1DDF0E0 VA: 0x1DDF0E0 Slot: 47
	public virtual void NotifyServerVersion(ProtocolVersion serverVersion) { }

	// RVA: -1 Offset: -1 Slot: 48
	public abstract int[] GetCipherSuites();

	// RVA: 0x1DDF19C Offset: 0x1DDF19C VA: 0x1DDF19C Slot: 49
	public virtual byte[] GetCompressionMethods() { }

	// RVA: 0x1DDF1E8 Offset: 0x1DDF1E8 VA: 0x1DDF1E8 Slot: 50
	public virtual void NotifySessionID(byte[] sessionID) { }

	// RVA: 0x1DDF1EC Offset: 0x1DDF1EC VA: 0x1DDF1EC Slot: 51
	public virtual void NotifySelectedCipherSuite(int selectedCipherSuite) { }

	// RVA: 0x1DDF1F4 Offset: 0x1DDF1F4 VA: 0x1DDF1F4 Slot: 52
	public virtual void NotifySelectedCompressionMethod(byte selectedCompressionMethod) { }

	// RVA: 0x1DDF200 Offset: 0x1DDF200 VA: 0x1DDF200 Slot: 53
	public virtual void ProcessServerExtensions(IDictionary serverExtensions) { }

	// RVA: 0x1DDF32C Offset: 0x1DDF32C VA: 0x1DDF32C Slot: 54
	public virtual void ProcessServerSupplementalData(IList serverSupplementalData) { }

	// RVA: -1 Offset: -1 Slot: 55
	public abstract TlsKeyExchange GetKeyExchange();

	// RVA: -1 Offset: -1 Slot: 56
	public abstract TlsAuthentication GetAuthentication();

	// RVA: 0x1DDF3AC Offset: 0x1DDF3AC VA: 0x1DDF3AC Slot: 57
	public virtual IList GetClientSupplementalData() { }

	// RVA: 0x1DDF3B4 Offset: 0x1DDF3B4 VA: 0x1DDF3B4 Slot: 13
	public override TlsCompression GetCompression() { }

	// RVA: 0x1DDF480 Offset: 0x1DDF480 VA: 0x1DDF480 Slot: 14
	public override TlsCipher GetCipher() { }

	// RVA: 0x1DDF590 Offset: 0x1DDF590 VA: 0x1DDF590 Slot: 58
	public virtual void NotifyNewSessionTicket(NewSessionTicket newSessionTicket) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal abstract class AbstractTlsContext : TlsContext // TypeDefIndex: 4885
{
	// Fields
	private static long counter; // 0x0
	private readonly IRandomGenerator mNonceRandom; // 0x10
	private readonly SecureRandom mSecureRandom; // 0x18
	private readonly SecurityParameters mSecurityParameters; // 0x20
	private ProtocolVersion mClientVersion; // 0x28
	private ProtocolVersion mServerVersion; // 0x30
	private TlsSession mSession; // 0x38
	private object mUserObject; // 0x40

	// Properties
	public virtual IRandomGenerator NonceRandomGenerator { get; }
	public virtual SecureRandom SecureRandom { get; }
	public virtual SecurityParameters SecurityParameters { get; }
	public abstract bool IsServer { get; }
	public virtual ProtocolVersion ClientVersion { get; }
	public virtual ProtocolVersion ServerVersion { get; }
	public virtual TlsSession ResumableSession { get; }
	public virtual object UserObject { get; set; }

	// Methods

	// RVA: 0x1DDF594 Offset: 0x1DDF594 VA: 0x1DDF594
	internal void .ctor(SecureRandom secureRandom, SecurityParameters securityParameters) { }

	// RVA: 0x1DDF8C0 Offset: 0x1DDF8C0 VA: 0x1DDF8C0
	private static long NextCounterValue() { }

	// RVA: 0x1DDF928 Offset: 0x1DDF928 VA: 0x1DDF928 Slot: 14
	public virtual IRandomGenerator get_NonceRandomGenerator() { }

	// RVA: 0x1DDF930 Offset: 0x1DDF930 VA: 0x1DDF930 Slot: 15
	public virtual SecureRandom get_SecureRandom() { }

	// RVA: 0x1DDF938 Offset: 0x1DDF938 VA: 0x1DDF938 Slot: 16
	public virtual SecurityParameters get_SecurityParameters() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract bool get_IsServer();

	// RVA: 0x1DDF940 Offset: 0x1DDF940 VA: 0x1DDF940 Slot: 18
	public virtual ProtocolVersion get_ClientVersion() { }

	// RVA: 0x1DDF948 Offset: 0x1DDF948 VA: 0x1DDF948 Slot: 19
	internal virtual void SetClientVersion(ProtocolVersion clientVersion) { }

	// RVA: 0x1DDF950 Offset: 0x1DDF950 VA: 0x1DDF950 Slot: 20
	public virtual ProtocolVersion get_ServerVersion() { }

	// RVA: 0x1DDF958 Offset: 0x1DDF958 VA: 0x1DDF958 Slot: 21
	internal virtual void SetServerVersion(ProtocolVersion serverVersion) { }

	// RVA: 0x1DDF960 Offset: 0x1DDF960 VA: 0x1DDF960 Slot: 22
	public virtual TlsSession get_ResumableSession() { }

	// RVA: 0x1DDF968 Offset: 0x1DDF968 VA: 0x1DDF968 Slot: 23
	internal virtual void SetResumableSession(TlsSession session) { }

	// RVA: 0x1DDF970 Offset: 0x1DDF970 VA: 0x1DDF970 Slot: 24
	public virtual object get_UserObject() { }

	// RVA: 0x1DDF978 Offset: 0x1DDF978 VA: 0x1DDF978 Slot: 25
	public virtual void set_UserObject(object value) { }

	// RVA: 0x1DDF980 Offset: 0x1DDF980 VA: 0x1DDF980 Slot: 26
	public virtual byte[] ExportKeyingMaterial(string asciiLabel, byte[] context_value, int length) { }

	// RVA: 0x1DDFC40 Offset: 0x1DDFC40 VA: 0x1DDFC40
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsCredentials : TlsCredentials // TypeDefIndex: 4886
{
	// Properties
	public abstract Certificate Certificate { get; }

	// Methods

	// RVA: 0x1DDE93C Offset: 0x1DDE93C VA: 0x1DDE93C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract Certificate get_Certificate();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsEncryptionCredentials : AbstractTlsCredentials, TlsEncryptionCredentials, TlsCredentials // TypeDefIndex: 4887
{
	// Methods

	// RVA: 0x1DDFCB8 Offset: 0x1DDFCB8 VA: 0x1DDFCB8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract byte[] DecryptPreMasterSecret(byte[] encryptedPreMasterSecret);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsKeyExchange : TlsKeyExchange // TypeDefIndex: 4888
{
	// Fields
	protected readonly int mKeyExchange; // 0x10
	protected IList mSupportedSignatureAlgorithms; // 0x18
	protected TlsContext mContext; // 0x20

	// Properties
	public virtual bool RequiresServerKeyExchange { get; }

	// Methods

	// RVA: 0x1DDFCC0 Offset: 0x1DDFCC0 VA: 0x1DDFCC0
	protected void .ctor(int keyExchange, IList supportedSignatureAlgorithms) { }

	// RVA: 0x1DDFCFC Offset: 0x1DDFCFC VA: 0x1DDFCFC Slot: 19
	protected virtual DigitallySigned ParseSignature(Stream input) { }

	// RVA: 0x1DDFDB4 Offset: 0x1DDFDB4 VA: 0x1DDFDB4 Slot: 20
	public virtual void Init(TlsContext context) { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract void SkipServerCredentials();

	// RVA: 0x1DE0004 Offset: 0x1DE0004 VA: 0x1DE0004 Slot: 22
	public virtual void ProcessServerCertificate(Certificate serverCertificate) { }

	// RVA: 0x1DE0008 Offset: 0x1DE0008 VA: 0x1DE0008 Slot: 23
	public virtual void ProcessServerCredentials(TlsCredentials serverCredentials) { }

	// RVA: 0x1DE00DC Offset: 0x1DE00DC VA: 0x1DE00DC Slot: 24
	public virtual bool get_RequiresServerKeyExchange() { }

	// RVA: 0x1DE00E4 Offset: 0x1DE00E4 VA: 0x1DE00E4 Slot: 25
	public virtual byte[] GenerateServerKeyExchange() { }

	// RVA: 0x1DE017C Offset: 0x1DE017C VA: 0x1DE017C Slot: 26
	public virtual void SkipServerKeyExchange() { }

	// RVA: 0x1DE0210 Offset: 0x1DE0210 VA: 0x1DE0210 Slot: 27
	public virtual void ProcessServerKeyExchange(Stream input) { }

	// RVA: -1 Offset: -1 Slot: 28
	public abstract void ValidateCertificateRequest(CertificateRequest certificateRequest);

	// RVA: 0x1DE02A4 Offset: 0x1DE02A4 VA: 0x1DE02A4 Slot: 29
	public virtual void SkipClientCredentials() { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract void ProcessClientCredentials(TlsCredentials clientCredentials);

	// RVA: 0x1DE02A8 Offset: 0x1DE02A8 VA: 0x1DE02A8 Slot: 31
	public virtual void ProcessClientCertificate(Certificate clientCertificate) { }

	// RVA: -1 Offset: -1 Slot: 32
	public abstract void GenerateClientKeyExchange(Stream output);

	// RVA: 0x1DE02AC Offset: 0x1DE02AC VA: 0x1DE02AC Slot: 33
	public virtual void ProcessClientKeyExchange(Stream input) { }

	// RVA: -1 Offset: -1 Slot: 34
	public abstract byte[] GeneratePremasterSecret();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsPeer : TlsPeer // TypeDefIndex: 4889
{
	// Methods

	// RVA: 0x1DDEA50 Offset: 0x1DDEA50 VA: 0x1DDEA50
	protected void .ctor() { }

	// RVA: 0x1DE0318 Offset: 0x1DE0318 VA: 0x1DE0318 Slot: 11
	public virtual bool ShouldUseGmtUnixTime() { }

	// RVA: 0x1DE0320 Offset: 0x1DE0320 VA: 0x1DE0320 Slot: 12
	public virtual void NotifySecureRenegotiation(bool secureRenegotiation) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract TlsCompression GetCompression();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract TlsCipher GetCipher();

	// RVA: 0x1DE03A0 Offset: 0x1DE03A0 VA: 0x1DE03A0 Slot: 15
	public virtual void NotifyAlertRaised(byte alertLevel, byte alertDescription, string message, Exception cause) { }

	// RVA: 0x1DE03A4 Offset: 0x1DE03A4 VA: 0x1DE03A4 Slot: 16
	public virtual void NotifyAlertReceived(byte alertLevel, byte alertDescription) { }

	// RVA: 0x1DE03A8 Offset: 0x1DE03A8 VA: 0x1DE03A8 Slot: 17
	public virtual void NotifyHandshakeComplete() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsServer : AbstractTlsPeer, TlsServer, TlsPeer // TypeDefIndex: 4890
{
	// Fields
	protected TlsCipherFactory mCipherFactory; // 0x10
	protected TlsServerContext mContext; // 0x18
	protected ProtocolVersion mClientVersion; // 0x20
	protected int[] mOfferedCipherSuites; // 0x28
	protected byte[] mOfferedCompressionMethods; // 0x30
	protected IDictionary mClientExtensions; // 0x38
	protected bool mEncryptThenMacOffered; // 0x40
	protected short mMaxFragmentLengthOffered; // 0x42
	protected bool mTruncatedHMacOffered; // 0x44
	protected IList mSupportedSignatureAlgorithms; // 0x48
	protected bool mEccCipherSuitesOffered; // 0x50
	protected int[] mNamedCurves; // 0x58
	protected byte[] mClientECPointFormats; // 0x60
	protected byte[] mServerECPointFormats; // 0x68
	protected ProtocolVersion mServerVersion; // 0x70
	protected int mSelectedCipherSuite; // 0x78
	protected byte mSelectedCompressionMethod; // 0x7C
	protected IDictionary mServerExtensions; // 0x80

	// Properties
	protected virtual bool AllowEncryptThenMac { get; }
	protected virtual bool AllowTruncatedHMac { get; }
	protected virtual ProtocolVersion MaximumVersion { get; }
	protected virtual ProtocolVersion MinimumVersion { get; }

	// Methods

	// RVA: 0x1DE03AC Offset: 0x1DE03AC VA: 0x1DE03AC
	public void .ctor() { }

	// RVA: 0x1DE0418 Offset: 0x1DE0418 VA: 0x1DE0418
	public void .ctor(TlsCipherFactory cipherFactory) { }

	// RVA: 0x1DE0444 Offset: 0x1DE0444 VA: 0x1DE0444 Slot: 36
	protected virtual bool get_AllowEncryptThenMac() { }

	// RVA: 0x1DE044C Offset: 0x1DE044C VA: 0x1DE044C Slot: 37
	protected virtual bool get_AllowTruncatedHMac() { }

	// RVA: 0x1DE0454 Offset: 0x1DE0454 VA: 0x1DE0454 Slot: 38
	protected virtual IDictionary CheckServerExtensions() { }

	// RVA: -1 Offset: -1 Slot: 39
	protected abstract int[] GetCipherSuites();

	// RVA: 0x1DE0480 Offset: 0x1DE0480 VA: 0x1DE0480
	protected byte[] GetCompressionMethods() { }

	// RVA: 0x1DE04CC Offset: 0x1DE04CC VA: 0x1DE04CC Slot: 40
	protected virtual ProtocolVersion get_MaximumVersion() { }

	// RVA: 0x1DE0534 Offset: 0x1DE0534 VA: 0x1DE0534 Slot: 41
	protected virtual ProtocolVersion get_MinimumVersion() { }

	// RVA: 0x1DE059C Offset: 0x1DE059C VA: 0x1DE059C Slot: 42
	protected virtual bool SupportsClientEccCapabilities(int[] namedCurves, byte[] ecPointFormats) { }

	// RVA: 0x1DE06BC Offset: 0x1DE06BC VA: 0x1DE06BC Slot: 43
	public virtual void Init(TlsServerContext context) { }

	// RVA: 0x1DE06C4 Offset: 0x1DE06C4 VA: 0x1DE06C4 Slot: 44
	public virtual void NotifyClientVersion(ProtocolVersion clientVersion) { }

	// RVA: 0x1DE06CC Offset: 0x1DE06CC VA: 0x1DE06CC Slot: 45
	public virtual void NotifyFallback(bool isFallback) { }

	// RVA: 0x1DE0790 Offset: 0x1DE0790 VA: 0x1DE0790 Slot: 46
	public virtual void NotifyOfferedCipherSuites(int[] offeredCipherSuites) { }

	// RVA: 0x1DE0814 Offset: 0x1DE0814 VA: 0x1DE0814 Slot: 47
	public virtual void NotifyOfferedCompressionMethods(byte[] offeredCompressionMethods) { }

	// RVA: 0x1DE081C Offset: 0x1DE081C VA: 0x1DE081C Slot: 48
	public virtual void ProcessClientExtensions(IDictionary clientExtensions) { }

	// RVA: 0x1DE099C Offset: 0x1DE099C VA: 0x1DE099C Slot: 49
	public virtual ProtocolVersion GetServerVersion() { }

	// RVA: 0x1DE0AC8 Offset: 0x1DE0AC8 VA: 0x1DE0AC8 Slot: 50
	public virtual int GetSelectedCipherSuite() { }

	// RVA: 0x1DE0C60 Offset: 0x1DE0C60 VA: 0x1DE0C60 Slot: 51
	public virtual byte GetSelectedCompressionMethod() { }

	// RVA: 0x1DE0D74 Offset: 0x1DE0D74 VA: 0x1DE0D74 Slot: 52
	public virtual IDictionary GetServerExtensions() { }

	// RVA: 0x1DE0FC4 Offset: 0x1DE0FC4 VA: 0x1DE0FC4 Slot: 53
	public virtual IList GetServerSupplementalData() { }

	// RVA: -1 Offset: -1 Slot: 54
	public abstract TlsCredentials GetCredentials();

	// RVA: 0x1DE0FCC Offset: 0x1DE0FCC VA: 0x1DE0FCC Slot: 55
	public virtual CertificateStatus GetCertificateStatus() { }

	// RVA: -1 Offset: -1 Slot: 56
	public abstract TlsKeyExchange GetKeyExchange();

	// RVA: 0x1DE0FD4 Offset: 0x1DE0FD4 VA: 0x1DE0FD4 Slot: 57
	public virtual CertificateRequest GetCertificateRequest() { }

	// RVA: 0x1DE0FDC Offset: 0x1DE0FDC VA: 0x1DE0FDC Slot: 58
	public virtual void ProcessClientSupplementalData(IList clientSupplementalData) { }

	// RVA: 0x1DE105C Offset: 0x1DE105C VA: 0x1DE105C Slot: 59
	public virtual void NotifyClientCertificate(Certificate clientCertificate) { }

	// RVA: 0x1DE10C8 Offset: 0x1DE10C8 VA: 0x1DE10C8 Slot: 13
	public override TlsCompression GetCompression() { }

	// RVA: 0x1DE116C Offset: 0x1DE116C VA: 0x1DE116C Slot: 14
	public override TlsCipher GetCipher() { }

	// RVA: 0x1DE127C Offset: 0x1DE127C VA: 0x1DE127C Slot: 60
	public virtual NewSessionTicket GetNewSessionTicket() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsSigner : TlsSigner // TypeDefIndex: 4891
{
	// Fields
	protected TlsContext mContext; // 0x10

	// Methods

	// RVA: 0x1DE130C Offset: 0x1DE130C VA: 0x1DE130C
	protected void .ctor() { }

	// RVA: 0x1DE1314 Offset: 0x1DE1314 VA: 0x1DE1314 Slot: 14
	public virtual void Init(TlsContext context) { }

	// RVA: 0x1DE131C Offset: 0x1DE131C VA: 0x1DE131C Slot: 15
	public virtual byte[] GenerateRawSignature(AsymmetricKeyParameter privateKey, byte[] md5AndSha1) { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash);

	// RVA: 0x1DE1340 Offset: 0x1DE1340 VA: 0x1DE1340 Slot: 17
	public virtual bool VerifyRawSignature(byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] md5AndSha1) { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash);

	// RVA: 0x1DE136C Offset: 0x1DE136C VA: 0x1DE136C Slot: 19
	public virtual ISigner CreateSigner(AsymmetricKeyParameter privateKey) { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey);

	// RVA: 0x1DE1388 Offset: 0x1DE1388 VA: 0x1DE1388 Slot: 21
	public virtual ISigner CreateVerifyer(AsymmetricKeyParameter publicKey) { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey);

	// RVA: -1 Offset: -1 Slot: 23
	public abstract bool IsValidPublicKey(AsymmetricKeyParameter publicKey);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AbstractTlsSignerCredentials : AbstractTlsCredentials, TlsSignerCredentials, TlsCredentials // TypeDefIndex: 4892
{
	// Properties
	public virtual SignatureAndHashAlgorithm SignatureAndHashAlgorithm { get; }

	// Methods

	// RVA: 0x1DE13A4 Offset: 0x1DE13A4 VA: 0x1DE13A4
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract byte[] GenerateCertificateSignature(byte[] hash);

	// RVA: 0x1DE13AC Offset: 0x1DE13AC VA: 0x1DE13AC Slot: 9
	public virtual SignatureAndHashAlgorithm get_SignatureAndHashAlgorithm() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AlertDescription // TypeDefIndex: 4893
{
	// Fields
	public const byte close_notify = 0;
	public const byte unexpected_message = 10;
	public const byte bad_record_mac = 20;
	public const byte decryption_failed = 21;
	public const byte record_overflow = 22;
	public const byte decompression_failure = 30;
	public const byte handshake_failure = 40;
	public const byte no_certificate = 41;
	public const byte bad_certificate = 42;
	public const byte unsupported_certificate = 43;
	public const byte certificate_revoked = 44;
	public const byte certificate_expired = 45;
	public const byte certificate_unknown = 46;
	public const byte illegal_parameter = 47;
	public const byte unknown_ca = 48;
	public const byte access_denied = 49;
	public const byte decode_error = 50;
	public const byte decrypt_error = 51;
	public const byte export_restriction = 60;
	public const byte protocol_version = 70;
	public const byte insufficient_security = 71;
	public const byte internal_error = 80;
	public const byte user_canceled = 90;
	public const byte no_renegotiation = 100;
	public const byte unsupported_extension = 110;
	public const byte certificate_unobtainable = 111;
	public const byte unrecognized_name = 112;
	public const byte bad_certificate_status_response = 113;
	public const byte bad_certificate_hash_value = 114;
	public const byte unknown_psk_identity = 115;
	public const byte inappropriate_fallback = 86;

	// Methods

	// RVA: 0x1DE1420 Offset: 0x1DE1420 VA: 0x1DE1420
	protected void .ctor() { }

	// RVA: 0x1DE1428 Offset: 0x1DE1428 VA: 0x1DE1428
	public static string GetName(byte alertDescription) { }

	// RVA: 0x1DE1674 Offset: 0x1DE1674 VA: 0x1DE1674
	public static string GetText(byte alertDescription) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class AlertLevel // TypeDefIndex: 4894
{
	// Fields
	public const byte warning = 1;
	public const byte fatal = 2;

	// Methods

	// RVA: 0x1DE1870 Offset: 0x1DE1870 VA: 0x1DE1870
	protected void .ctor() { }

	// RVA: 0x1DE1878 Offset: 0x1DE1878 VA: 0x1DE1878
	public static string GetName(byte alertDescription) { }

	// RVA: 0x1DE18E8 Offset: 0x1DE18E8 VA: 0x1DE18E8
	public static string GetText(byte alertDescription) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class AlwaysValidVerifyer : ICertificateVerifyer // TypeDefIndex: 4895
{
	// Methods

	// RVA: 0x1DE1B2C Offset: 0x1DE1B2C VA: 0x1DE1B2C
	public void .ctor() { }

	// RVA: 0x1DE1B34 Offset: 0x1DE1B34 VA: 0x1DE1B34 Slot: 4
	public bool IsValid(Uri targetUri, X509CertificateStructure[] certs) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class ByteQueue // TypeDefIndex: 4896
{
	// Fields
	private const int DefaultCapacity = 1024;
	private byte[] databuf; // 0x10
	private int skipped; // 0x18
	private int available; // 0x1C

	// Properties
	public int Available { get; }

	// Methods

	// RVA: 0x1DE1B3C Offset: 0x1DE1B3C VA: 0x1DE1B3C
	public void .ctor() { }

	// RVA: 0x1DE1B44 Offset: 0x1DE1B44 VA: 0x1DE1B44
	public void .ctor(int capacity) { }

	// RVA: 0x1DE1BB4 Offset: 0x1DE1BB4 VA: 0x1DE1BB4
	public static int NextTwoPow(int i) { }

	// RVA: 0x1DE1BD0 Offset: 0x1DE1BD0 VA: 0x1DE1BD0
	public void Read(byte[] buf, int offset, int len, int skip) { }

	// RVA: 0x1DE1F0C Offset: 0x1DE1F0C VA: 0x1DE1F0C
	public void AddData(byte[] data, int offset, int len) { }

	// RVA: 0x1DE2064 Offset: 0x1DE2064 VA: 0x1DE2064
	public void RemoveData(int i) { }

	// RVA: 0x1DE22D8 Offset: 0x1DE22D8 VA: 0x1DE22D8
	public void RemoveData(byte[] buf, int off, int len, int skip) { }

	// RVA: 0x1DE2310 Offset: 0x1DE2310 VA: 0x1DE2310
	public byte[] RemoveData(int len, int skip) { }

	// RVA: 0x1DE23A0 Offset: 0x1DE23A0 VA: 0x1DE23A0
	public int get_Available() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class ByteQueueStream : Stream // TypeDefIndex: 4897
{
	// Fields
	private readonly ByteQueue buffer; // 0x10

	// Properties
	public virtual int Available { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1DE23A8 Offset: 0x1DE23A8 VA: 0x1DE23A8
	public void .ctor() { }

	// RVA: 0x1DE2434 Offset: 0x1DE2434 VA: 0x1DE2434 Slot: 29
	public virtual int get_Available() { }

	// RVA: 0x1DE2460 Offset: 0x1DE2460 VA: 0x1DE2460 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1DE2468 Offset: 0x1DE2468 VA: 0x1DE2468 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1DE2470 Offset: 0x1DE2470 VA: 0x1DE2470 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1DE2478 Offset: 0x1DE2478 VA: 0x1DE2478 Slot: 18
	public override void Flush() { }

	// RVA: 0x1DE247C Offset: 0x1DE247C VA: 0x1DE247C Slot: 9
	public override long get_Length() { }

	// RVA: 0x1DE24E4 Offset: 0x1DE24E4 VA: 0x1DE24E4 Slot: 30
	public virtual int Peek(byte[] buf) { }

	// RVA: 0x1DE256C Offset: 0x1DE256C VA: 0x1DE256C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1DE25D4 Offset: 0x1DE25D4 VA: 0x1DE25D4 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1DE263C Offset: 0x1DE263C VA: 0x1DE263C Slot: 31
	public virtual int Read(byte[] buf) { }

	// RVA: 0x1DE2684 Offset: 0x1DE2684 VA: 0x1DE2684 Slot: 19
	public override int Read(byte[] buf, int off, int len) { }

	// RVA: 0x1DE2718 Offset: 0x1DE2718 VA: 0x1DE2718 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x1DE279C Offset: 0x1DE279C VA: 0x1DE279C Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1DE2804 Offset: 0x1DE2804 VA: 0x1DE2804 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1DE286C Offset: 0x1DE286C VA: 0x1DE286C Slot: 32
	public virtual int Skip(int n) { }

	// RVA: 0x1DE28D8 Offset: 0x1DE28D8 VA: 0x1DE28D8 Slot: 33
	public virtual void Write(byte[] buf) { }

	// RVA: 0x1DE2928 Offset: 0x1DE2928 VA: 0x1DE2928 Slot: 23
	public override void Write(byte[] buf, int off, int len) { }

	// RVA: 0x1DE2974 Offset: 0x1DE2974 VA: 0x1DE2974 Slot: 24
	public override void WriteByte(byte b) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class CertChainType // TypeDefIndex: 4898
{
	// Fields
	public const byte individual_certs = 0;
	public const byte pkipath = 1;

	// Methods

	// RVA: 0x1DE2A1C Offset: 0x1DE2A1C VA: 0x1DE2A1C
	protected void .ctor() { }

	// RVA: 0x1DE2A24 Offset: 0x1DE2A24 VA: 0x1DE2A24
	public static bool IsValid(byte certChainType) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class Certificate // TypeDefIndex: 4899
{
	// Fields
	public static readonly Certificate EmptyChain; // 0x0
	protected readonly X509CertificateStructure[] mCertificateList; // 0x10

	// Properties
	public virtual int Length { get; }
	public virtual bool IsEmpty { get; }

	// Methods

	// RVA: 0x1DE2A34 Offset: 0x1DE2A34 VA: 0x1DE2A34
	public void .ctor(X509CertificateStructure[] certificateList) { }

	// RVA: 0x1DE2AD8 Offset: 0x1DE2AD8 VA: 0x1DE2AD8 Slot: 4
	public virtual X509CertificateStructure[] GetCertificateList() { }

	// RVA: 0x1DE2AE4 Offset: 0x1DE2AE4 VA: 0x1DE2AE4 Slot: 5
	public virtual X509CertificateStructure GetCertificateAt(int index) { }

	// RVA: 0x1DE2B38 Offset: 0x1DE2B38 VA: 0x1DE2B38 Slot: 6
	public virtual int get_Length() { }

	// RVA: 0x1DE2B64 Offset: 0x1DE2B64 VA: 0x1DE2B64 Slot: 7
	public virtual bool get_IsEmpty() { }

	// RVA: 0x1DE2B98 Offset: 0x1DE2B98 VA: 0x1DE2B98 Slot: 8
	public virtual void Encode(Stream output) { }

	// RVA: 0x1DE3060 Offset: 0x1DE3060 VA: 0x1DE3060
	public static Certificate Parse(Stream input) { }

	// RVA: 0x1DE35A0 Offset: 0x1DE35A0 VA: 0x1DE35A0 Slot: 9
	protected virtual X509CertificateStructure[] CloneCertificateList() { }

	// RVA: 0x1DE3678 Offset: 0x1DE3678 VA: 0x1DE3678
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class CertificateRequest // TypeDefIndex: 4900
{
	// Fields
	protected readonly byte[] mCertificateTypes; // 0x10
	protected readonly IList mSupportedSignatureAlgorithms; // 0x18
	protected readonly IList mCertificateAuthorities; // 0x20

	// Properties
	public virtual byte[] CertificateTypes { get; }
	public virtual IList SupportedSignatureAlgorithms { get; }
	public virtual IList CertificateAuthorities { get; }

	// Methods

	// RVA: 0x1DE3700 Offset: 0x1DE3700 VA: 0x1DE3700
	public void .ctor(byte[] certificateTypes, IList supportedSignatureAlgorithms, IList certificateAuthorities) { }

	// RVA: 0x1DE3740 Offset: 0x1DE3740 VA: 0x1DE3740 Slot: 4
	public virtual byte[] get_CertificateTypes() { }

	// RVA: 0x1DE3748 Offset: 0x1DE3748 VA: 0x1DE3748 Slot: 5
	public virtual IList get_SupportedSignatureAlgorithms() { }

	// RVA: 0x1DE3750 Offset: 0x1DE3750 VA: 0x1DE3750 Slot: 6
