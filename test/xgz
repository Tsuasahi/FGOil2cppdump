	public const GraphicsFormat RGBA_ASTC12X12_SRGB = 139;
	public const GraphicsFormat RGBA_ASTC12X12_UNorm = 140;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xC44FFC Offset: 0xC44FFC VA: 0xC44FFC
public enum LightmapsMode // TypeDefIndex: 2192
{
	// Fields
	public int value__; // 0x0
	public const LightmapsMode NonDirectional = 0;
	public const LightmapsMode CombinedDirectional = 1;
}

// Namespace: UnityEngine
public enum LineTextureMode // TypeDefIndex: 2193
{
	// Fields
	public int value__; // 0x0
	public const LineTextureMode Stretch = 0;
	public const LineTextureMode Tile = 1;
	public const LineTextureMode DistributePerSegment = 2;
	public const LineTextureMode RepeatPerSegment = 3;
}

// Namespace: UnityEngine
public enum LineAlignment // TypeDefIndex: 2194
{
	// Fields
	public int value__; // 0x0
	public const LineAlignment View = 0;
	[ObsoleteAttribute] // RVA: 0xC48A50 Offset: 0xC48A50 VA: 0xC48A50
	public const LineAlignment Local = 1;
	public const LineAlignment TransformZ = 1;
}

// Namespace: UnityEngine.Rendering
[MovedFromAttribute] // RVA: 0xC4500C Offset: 0xC4500C VA: 0xC4500C
public enum VertexAttribute // TypeDefIndex: 2195
{
	// Fields
	public int value__; // 0x0
	public const VertexAttribute Position = 0;
	public const VertexAttribute Normal = 1;
	public const VertexAttribute Tangent = 2;
	public const VertexAttribute Color = 3;
	public const VertexAttribute TexCoord0 = 4;
	public const VertexAttribute TexCoord1 = 5;
	public const VertexAttribute TexCoord2 = 6;
	public const VertexAttribute TexCoord3 = 7;
	public const VertexAttribute TexCoord4 = 8;
	public const VertexAttribute TexCoord5 = 9;
	public const VertexAttribute TexCoord6 = 10;
	public const VertexAttribute TexCoord7 = 11;
	public const VertexAttribute BlendWeight = 12;
	public const VertexAttribute BlendIndices = 13;
}

// Namespace: UnityEngine.Rendering
public enum RenderBufferLoadAction // TypeDefIndex: 2196
{
	// Fields
	public int value__; // 0x0
	public const RenderBufferLoadAction Load = 0;
	public const RenderBufferLoadAction Clear = 1;
	public const RenderBufferLoadAction DontCare = 2;
}

// Namespace: UnityEngine.Rendering
public enum RenderBufferStoreAction // TypeDefIndex: 2197
{
	// Fields
	public int value__; // 0x0
	public const RenderBufferStoreAction Store = 0;
	public const RenderBufferStoreAction Resolve = 1;
	public const RenderBufferStoreAction StoreAndResolve = 2;
	public const RenderBufferStoreAction DontCare = 3;
}

// Namespace: UnityEngine.Rendering
public enum CompareFunction // TypeDefIndex: 2198
{
	// Fields
	public int value__; // 0x0
	public const CompareFunction Disabled = 0;
	public const CompareFunction Never = 1;
	public const CompareFunction Less = 2;
	public const CompareFunction Equal = 3;
	public const CompareFunction LessEqual = 4;
	public const CompareFunction Greater = 5;
	public const CompareFunction NotEqual = 6;
	public const CompareFunction GreaterEqual = 7;
	public const CompareFunction Always = 8;
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0xC45044 Offset: 0xC45044 VA: 0xC45044
public enum ColorWriteMask // TypeDefIndex: 2199
{
	// Fields
	public int value__; // 0x0
	public const ColorWriteMask Alpha = 1;
	public const ColorWriteMask Blue = 2;
	public const ColorWriteMask Green = 4;
	public const ColorWriteMask Red = 8;
	public const ColorWriteMask All = 15;
}

// Namespace: UnityEngine.Rendering
public enum StencilOp // TypeDefIndex: 2200
{
	// Fields
	public int value__; // 0x0
	public const StencilOp Keep = 0;
	public const StencilOp Zero = 1;
	public const StencilOp Replace = 2;
	public const StencilOp IncrementSaturate = 3;
	public const StencilOp DecrementSaturate = 4;
	public const StencilOp Invert = 5;
	public const StencilOp IncrementWrap = 6;
	public const StencilOp DecrementWrap = 7;
}

// Namespace: UnityEngine.Rendering
public enum AmbientMode // TypeDefIndex: 2201
{
	// Fields
	public int value__; // 0x0
	public const AmbientMode Skybox = 0;
	public const AmbientMode Trilight = 1;
	public const AmbientMode Flat = 3;
	public const AmbientMode Custom = 4;
}

// Namespace: UnityEngine.Rendering
public enum CameraEvent // TypeDefIndex: 2202
{
	// Fields
	public int value__; // 0x0
	public const CameraEvent BeforeDepthTexture = 0;
	public const CameraEvent AfterDepthTexture = 1;
	public const CameraEvent BeforeDepthNormalsTexture = 2;
	public const CameraEvent AfterDepthNormalsTexture = 3;
	public const CameraEvent BeforeGBuffer = 4;
	public const CameraEvent AfterGBuffer = 5;
	public const CameraEvent BeforeLighting = 6;
	public const CameraEvent AfterLighting = 7;
	public const CameraEvent BeforeFinalPass = 8;
	public const CameraEvent AfterFinalPass = 9;
	public const CameraEvent BeforeForwardOpaque = 10;
	public const CameraEvent AfterForwardOpaque = 11;
	public const CameraEvent BeforeImageEffectsOpaque = 12;
	public const CameraEvent AfterImageEffectsOpaque = 13;
	public const CameraEvent BeforeSkybox = 14;
	public const CameraEvent AfterSkybox = 15;
	public const CameraEvent BeforeForwardAlpha = 16;
	public const CameraEvent AfterForwardAlpha = 17;
	public const CameraEvent BeforeImageEffects = 18;
	public const CameraEvent AfterImageEffects = 19;
	public const CameraEvent AfterEverything = 20;
	public const CameraEvent BeforeReflections = 21;
	public const CameraEvent AfterReflections = 22;
	public const CameraEvent BeforeHaloAndLensFlares = 23;
	public const CameraEvent AfterHaloAndLensFlares = 24;
}

// Namespace: UnityEngine.Rendering
internal static class CameraEventUtils // TypeDefIndex: 2203
{
	// Methods

	// RVA: 0x1031914 Offset: 0x1031914 VA: 0x1031914
	public static bool IsValid(CameraEvent value) { }
}

// Namespace: UnityEngine.Rendering
public enum BuiltinRenderTextureType // TypeDefIndex: 2204
{
	// Fields
	public int value__; // 0x0
	public const BuiltinRenderTextureType PropertyName = -4;
	public const BuiltinRenderTextureType BufferPtr = -3;
	public const BuiltinRenderTextureType RenderTexture = -2;
	public const BuiltinRenderTextureType BindableTexture = -1;
	public const BuiltinRenderTextureType None = 0;
	public const BuiltinRenderTextureType CurrentActive = 1;
	public const BuiltinRenderTextureType CameraTarget = 2;
	public const BuiltinRenderTextureType Depth = 3;
	public const BuiltinRenderTextureType DepthNormals = 4;
	public const BuiltinRenderTextureType ResolvedDepth = 5;
	public const BuiltinRenderTextureType PrepassNormalsSpec = 7;
	public const BuiltinRenderTextureType PrepassLight = 8;
	public const BuiltinRenderTextureType PrepassLightSpec = 9;
	public const BuiltinRenderTextureType GBuffer0 = 10;
	public const BuiltinRenderTextureType GBuffer1 = 11;
	public const BuiltinRenderTextureType GBuffer2 = 12;
	public const BuiltinRenderTextureType GBuffer3 = 13;
	public const BuiltinRenderTextureType Reflections = 14;
	public const BuiltinRenderTextureType MotionVectors = 15;
	public const BuiltinRenderTextureType GBuffer4 = 16;
	public const BuiltinRenderTextureType GBuffer5 = 17;
	public const BuiltinRenderTextureType GBuffer6 = 18;
	public const BuiltinRenderTextureType GBuffer7 = 19;
}

// Namespace: UnityEngine.Rendering
public enum ShadowCastingMode // TypeDefIndex: 2205
{
	// Fields
	public int value__; // 0x0
	public const ShadowCastingMode Off = 0;
	public const ShadowCastingMode On = 1;
	public const ShadowCastingMode TwoSided = 2;
	public const ShadowCastingMode ShadowsOnly = 3;
}

// Namespace: UnityEngine.Rendering
[UsedByNativeCodeAttribute] // RVA: 0xC45054 Offset: 0xC45054 VA: 0xC45054
public enum GraphicsDeviceType // TypeDefIndex: 2206
{
	// Fields
	public int value__; // 0x0
	[ObsoleteAttribute] // RVA: 0xC48A8C Offset: 0xC48A8C VA: 0xC48A8C
	public const GraphicsDeviceType OpenGL2 = 0;
	[ObsoleteAttribute] // RVA: 0xC48AC4 Offset: 0xC48AC4 VA: 0xC48AC4
	public const GraphicsDeviceType Direct3D9 = 1;
	public const GraphicsDeviceType Direct3D11 = 2;
	[ObsoleteAttribute] // RVA: 0xC48AFC Offset: 0xC48AFC VA: 0xC48AFC
	public const GraphicsDeviceType PlayStation3 = 3;
	public const GraphicsDeviceType Null = 4;
	[ObsoleteAttribute] // RVA: 0xC48B34 Offset: 0xC48B34 VA: 0xC48B34
	public const GraphicsDeviceType Xbox360 = 6;
	public const GraphicsDeviceType OpenGLES2 = 8;
	public const GraphicsDeviceType OpenGLES3 = 11;
	[ObsoleteAttribute] // RVA: 0xC48B6C Offset: 0xC48B6C VA: 0xC48B6C
	public const GraphicsDeviceType PlayStationVita = 12;
	public const GraphicsDeviceType PlayStation4 = 13;
	public const GraphicsDeviceType XboxOne = 14;
	[ObsoleteAttribute] // RVA: 0xC48BA4 Offset: 0xC48BA4 VA: 0xC48BA4
	public const GraphicsDeviceType PlayStationMobile = 15;
	public const GraphicsDeviceType Metal = 16;
	public const GraphicsDeviceType OpenGLCore = 17;
	public const GraphicsDeviceType Direct3D12 = 18;
	[ObsoleteAttribute] // RVA: 0xC48BDC Offset: 0xC48BDC VA: 0xC48BDC
	public const GraphicsDeviceType N3DS = 19;
	public const GraphicsDeviceType Vulkan = 21;
	public const GraphicsDeviceType Switch = 22;
	public const GraphicsDeviceType XboxOneD3D12 = 23;
}

// Namespace: UnityEngine.Rendering
public struct RenderTargetIdentifier : IEquatable<RenderTargetIdentifier> // TypeDefIndex: 2207
{
	// Fields
	private BuiltinRenderTextureType m_Type; // 0x0
	private int m_NameID; // 0x4
	private int m_InstanceID; // 0x8
	private IntPtr m_BufferPointer; // 0x10
	private int m_MipLevel; // 0x18
	private CubemapFace m_CubeFace; // 0x1C
	private int m_DepthSlice; // 0x20

	// Methods

	// RVA: 0xBBA0B4 Offset: 0xBBA0B4 VA: 0xBBA0B4
	public void .ctor(BuiltinRenderTextureType type) { }

	// RVA: 0xBBA118 Offset: 0xBBA118 VA: 0xBBA118
	public void .ctor(int nameID) { }

	// RVA: 0x1031E4C Offset: 0x1031E4C VA: 0x1031E4C
	public static RenderTargetIdentifier op_Implicit(BuiltinRenderTextureType type) { }

	// RVA: 0x1031EB8 Offset: 0x1031EB8 VA: 0x1031EB8
	public static RenderTargetIdentifier op_Implicit(int nameID) { }

	// RVA: 0xBBA180 Offset: 0xBBA180 VA: 0xBBA180 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBA188 Offset: 0xBBA188 VA: 0xBBA188 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBBA190 Offset: 0xBBA190 VA: 0xBBA190 Slot: 4
	public bool Equals(RenderTargetIdentifier rhs) { }

	// RVA: 0xBBA1D0 Offset: 0xBBA1D0 VA: 0xBBA1D0 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: UnityEngine.Rendering
public enum ReflectionProbeUsage // TypeDefIndex: 2208
{
	// Fields
	public int value__; // 0x0
	public const ReflectionProbeUsage Off = 0;
	public const ReflectionProbeUsage BlendProbes = 1;
	public const ReflectionProbeUsage BlendProbesAndSkybox = 2;
	public const ReflectionProbeUsage Simple = 3;
}

// Namespace: UnityEngine.Rendering
public enum ShadowSamplingMode // TypeDefIndex: 2209
{
	// Fields
	public int value__; // 0x0
	public const ShadowSamplingMode CompareDepths = 0;
	public const ShadowSamplingMode RawDepth = 1;
	public const ShadowSamplingMode None = 2;
}

// Namespace: UnityEngine.Rendering
public enum LightProbeUsage // TypeDefIndex: 2210
{
	// Fields
	public int value__; // 0x0
	public const LightProbeUsage Off = 0;
	public const LightProbeUsage BlendProbes = 1;
	public const LightProbeUsage UseProxyVolume = 2;
	public const LightProbeUsage CustomProvided = 4;
}

// Namespace: UnityEngine.Rendering
public enum TextureDimension // TypeDefIndex: 2211
{
	// Fields
	public int value__; // 0x0
	public const TextureDimension Unknown = -1;
	public const TextureDimension None = 0;
	public const TextureDimension Any = 1;
	public const TextureDimension Tex2D = 2;
	public const TextureDimension Tex3D = 3;
	public const TextureDimension Cube = 4;
	public const TextureDimension Tex2DArray = 5;
	public const TextureDimension CubeArray = 6;
}

// Namespace: UnityEngineInternal
internal enum LightmapType // TypeDefIndex: 2212
{
	// Fields
	public int value__; // 0x0
	public const LightmapType NoLightmap = -1;
	public const LightmapType StaticLightmap = 0;
	public const LightmapType DynamicLightmap = 1;
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0xC45064 Offset: 0xC45064 VA: 0xC45064
[NativeHeaderAttribute] // RVA: 0xC45064 Offset: 0xC45064 VA: 0xC45064
public class GraphicsFormatUtility // TypeDefIndex: 2213
{
	// Methods

	// RVA: 0x2649D00 Offset: 0x2649D00 VA: 0x2649D00
	public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB) { }

	[FreeFunctionAttribute] // RVA: 0xC4DF68 Offset: 0xC4DF68 VA: 0xC4DF68
	// RVA: 0x264F164 Offset: 0x264F164 VA: 0x264F164
	private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB) { }

	[FreeFunctionAttribute] // RVA: 0xC4DF78 Offset: 0xC4DF78 VA: 0xC4DF78
	// RVA: 0x264F1D8 Offset: 0x264F1D8 VA: 0x264F1D8
	public static bool IsSRGBFormat(GraphicsFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xC4DF88 Offset: 0xC4DF88 VA: 0xC4DF88
	// RVA: 0x264F244 Offset: 0x264F244 VA: 0x264F244
	public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format) { }

	[FreeFunctionAttribute] // RVA: 0xC4DF98 Offset: 0xC4DF98 VA: 0xC4DF98
	// RVA: 0x264F2B0 Offset: 0x264F2B0 VA: 0x264F2B0
	internal static bool IsCompressedTextureFormat(TextureFormat format) { }

	// RVA: 0x2649D08 Offset: 0x2649D08 VA: 0x2649D08
	public static bool IsCrunchFormat(TextureFormat format) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC450C4 Offset: 0xC450C4 VA: 0xC450C4
public class SkinnedMeshRenderer : Renderer // TypeDefIndex: 2214
{
	// Properties
	public bool updateWhenOffscreen { get; set; }
	public Transform rootBone { get; set; }
	public Bounds localBounds { get; set; }

	// Methods

	// RVA: 0x1036758 Offset: 0x1036758 VA: 0x1036758
	public bool get_updateWhenOffscreen() { }

	// RVA: 0x10367C4 Offset: 0x10367C4 VA: 0x10367C4
	public void set_updateWhenOffscreen(bool value) { }

	// RVA: 0x1036838 Offset: 0x1036838 VA: 0x1036838
	public Transform get_rootBone() { }

	// RVA: 0x10368A4 Offset: 0x10368A4 VA: 0x10368A4
	public void set_rootBone(Transform value) { }

	// RVA: 0x1036918 Offset: 0x1036918 VA: 0x1036918
	public void BakeMesh(Mesh mesh) { }

	[FreeFunctionAttribute] // RVA: 0xC4DFD0 Offset: 0xC4DFD0 VA: 0xC4DFD0
	// RVA: 0x103698C Offset: 0x103698C VA: 0x103698C
	private Bounds GetLocalAABB() { }

	// RVA: 0x1036A40 Offset: 0x1036A40 VA: 0x1036A40
	private void SetLocalAABB(Bounds b) { }

	// RVA: 0x1036AB8 Offset: 0x1036AB8 VA: 0x1036AB8
	public Bounds get_localBounds() { }

	// RVA: 0x1036B0C Offset: 0x1036B0C VA: 0x1036B0C
	public void set_localBounds(Bounds value) { }

	// RVA: 0x10369CC Offset: 0x10369CC VA: 0x10369CC
	private void GetLocalAABB_Injected(out Bounds ret) { }

	// RVA: 0x1036A44 Offset: 0x1036A44 VA: 0x1036A44
	private void SetLocalAABB_Injected(ref Bounds b) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC450FC Offset: 0xC450FC VA: 0xC450FC
public class MeshRenderer : Renderer // TypeDefIndex: 2215
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC4E024 Offset: 0xC4E024 VA: 0xC4E024
	// RVA: 0x26B2CA0 Offset: 0x26B2CA0 VA: 0x26B2CA0
	private void DontStripMeshRenderer() { }
}

// Namespace: UnityEngine
internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 2216
{
	// Fields
	public uint keyboardType; // 0x0
	public uint autocorrection; // 0x4
	public uint multiline; // 0x8
	public uint secure; // 0xC
	public uint alert; // 0x10
	public int characterLimit; // 0x14
}

// Namespace: UnityEngine
public enum FullScreenMovieControlMode // TypeDefIndex: 2217
{
	// Fields
	public int value__; // 0x0
	public const FullScreenMovieControlMode Full = 0;
	public const FullScreenMovieControlMode Minimal = 1;
	public const FullScreenMovieControlMode CancelOnInput = 2;
	public const FullScreenMovieControlMode Hidden = 3;
}

// Namespace: UnityEngine
public enum FullScreenMovieScalingMode // TypeDefIndex: 2218
{
	// Fields
	public int value__; // 0x0
	public const FullScreenMovieScalingMode None = 0;
	public const FullScreenMovieScalingMode AspectFit = 1;
	public const FullScreenMovieScalingMode AspectFill = 2;
	public const FullScreenMovieScalingMode Fill = 3;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC45134 Offset: 0xC45134 VA: 0xC45134
[NativeHeaderAttribute] // RVA: 0xC45134 Offset: 0xC45134 VA: 0xC45134
[NativeHeaderAttribute] // RVA: 0xC45134 Offset: 0xC45134 VA: 0xC45134
[NativeHeaderAttribute] // RVA: 0xC45134 Offset: 0xC45134 VA: 0xC45134
public class Handheld // TypeDefIndex: 2219
{
	// Methods

	// RVA: 0x26A9D80 Offset: 0x26A9D80 VA: 0x26A9D80
	public static bool PlayFullScreenMovie(string path, Color bgColor, FullScreenMovieControlMode controlMode, FullScreenMovieScalingMode scalingMode) { }

	[FreeFunctionAttribute] // RVA: 0xC4E034 Offset: 0xC4E034 VA: 0xC4E034
	// RVA: 0x26A9DBC Offset: 0x26A9DBC VA: 0x26A9DBC
	private static bool PlayFullScreenMovie_Bindings(string path, Color bgColor, FullScreenMovieControlMode controlMode, FullScreenMovieScalingMode scalingMode) { }

	// RVA: 0x26A9DF8 Offset: 0x26A9DF8 VA: 0x26A9DF8
	private static bool PlayFullScreenMovie_Bindings_Injected(string path, ref Color bgColor, FullScreenMovieControlMode controlMode, FullScreenMovieScalingMode scalingMode) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC451DC Offset: 0xC451DC VA: 0xC451DC
[NativeHeaderAttribute] // RVA: 0xC451DC Offset: 0xC451DC VA: 0xC451DC
public class TouchScreenKeyboard // TypeDefIndex: 2220
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	[DebuggerBrowsableAttribute] // RVA: 0xC48C14 Offset: 0xC48C14 VA: 0xC48C14
	[CompilerGeneratedAttribute] // RVA: 0xC48C14 Offset: 0xC48C14 VA: 0xC48C14
	private readonly bool <canGetSelection>k__BackingField; // 0x18
	[DebuggerBrowsableAttribute] // RVA: 0xC48C50 Offset: 0xC48C50 VA: 0xC48C50
	[CompilerGeneratedAttribute] // RVA: 0xC48C50 Offset: 0xC48C50 VA: 0xC48C50
	private readonly bool <canSetSelection>k__BackingField; // 0x19
	[CompilerGeneratedAttribute] // RVA: 0xC48C8C Offset: 0xC48C8C VA: 0xC48C8C
	[DebuggerBrowsableAttribute] // RVA: 0xC48C8C Offset: 0xC48C8C VA: 0xC48C8C
	private readonly TouchScreenKeyboardType <type>k__BackingField; // 0x1C

	// Properties
	public static bool isSupported { get; }
	public string text { get; set; }
	public static bool hideInput { set; }
	public bool active { get; set; }
	[ObsoleteAttribute] // RVA: 0xC545FC Offset: 0xC545FC VA: 0xC545FC
	public bool done { get; }
	[ObsoleteAttribute] // RVA: 0xC54634 Offset: 0xC54634 VA: 0xC54634
	public bool wasCanceled { get; }
	public TouchScreenKeyboard.Status status { get; }
	public int characterLimit { set; }
	public bool canGetSelection { get; }
	public bool canSetSelection { get; }
	public RangeInt selection { get; set; }

	// Methods

	// RVA: 0x103CC40 Offset: 0x103CC40 VA: 0x103CC40
	public void .ctor(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }

	[FreeFunctionAttribute] // RVA: 0xC4E06C Offset: 0xC4E06C VA: 0xC4E06C
	// RVA: 0x103CE04 Offset: 0x103CE04 VA: 0x103CE04
	private static void Internal_Destroy(IntPtr ptr) { }

	// RVA: 0x103CE70 Offset: 0x103CE70 VA: 0x103CE70
	private void Destroy() { }

	// RVA: 0x103CED8 Offset: 0x103CED8 VA: 0x103CED8 Slot: 1
	protected override void Finalize() { }

	[FreeFunctionAttribute] // RVA: 0xC4E0B4 Offset: 0xC4E0B4 VA: 0xC4E0B4
	// RVA: 0x103CD80 Offset: 0x103CD80 VA: 0x103CD80
	private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder) { }

	// RVA: 0x103CF4C Offset: 0x103CF4C VA: 0x103CF4C
	public static bool get_isSupported() { }

	// RVA: 0x103CFAC Offset: 0x103CFAC VA: 0x103CFAC
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC4E0EC Offset: 0xC4E0EC VA: 0xC4E0EC
	// RVA: 0x103D06C Offset: 0x103D06C VA: 0x103D06C
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC4E0FC Offset: 0xC4E0FC VA: 0xC4E0FC
	// RVA: 0x103D09C Offset: 0x103D09C VA: 0x103D09C
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure) { }

	[NativeNameAttribute] // RVA: 0xC4E10C Offset: 0xC4E10C VA: 0xC4E10C
	// RVA: 0x103D130 Offset: 0x103D130 VA: 0x103D130
	public string get_text() { }

	[NativeNameAttribute] // RVA: 0xC4E144 Offset: 0xC4E144 VA: 0xC4E144
	// RVA: 0x103D19C Offset: 0x103D19C VA: 0x103D19C
	public void set_text(string value) { }

	[NativeNameAttribute] // RVA: 0xC4E17C Offset: 0xC4E17C VA: 0xC4E17C
	// RVA: 0x103D210 Offset: 0x103D210 VA: 0x103D210
	public static void set_hideInput(bool value) { }

	[NativeNameAttribute] // RVA: 0xC4E1B4 Offset: 0xC4E1B4 VA: 0xC4E1B4
	// RVA: 0x103D27C Offset: 0x103D27C VA: 0x103D27C
	public bool get_active() { }

	[NativeNameAttribute] // RVA: 0xC4E1EC Offset: 0xC4E1EC VA: 0xC4E1EC
	// RVA: 0x103D2E8 Offset: 0x103D2E8 VA: 0x103D2E8
	public void set_active(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xC4E224 Offset: 0xC4E224 VA: 0xC4E224
	// RVA: 0x103D35C Offset: 0x103D35C VA: 0x103D35C
	private static bool GetDone(IntPtr ptr) { }

	// RVA: 0x103D3C8 Offset: 0x103D3C8 VA: 0x103D3C8
	public bool get_done() { }

	[FreeFunctionAttribute] // RVA: 0xC4E25C Offset: 0xC4E25C VA: 0xC4E25C
	// RVA: 0x103D3D0 Offset: 0x103D3D0 VA: 0x103D3D0
	private static bool GetWasCanceled(IntPtr ptr) { }

	// RVA: 0x103D43C Offset: 0x103D43C VA: 0x103D43C
	public bool get_wasCanceled() { }

	[NativeNameAttribute] // RVA: 0xC4E294 Offset: 0xC4E294 VA: 0xC4E294
	// RVA: 0x103D444 Offset: 0x103D444 VA: 0x103D444
	public TouchScreenKeyboard.Status get_status() { }

	[NativeNameAttribute] // RVA: 0xC4E2CC Offset: 0xC4E2CC VA: 0xC4E2CC
	// RVA: 0x103D4B0 Offset: 0x103D4B0 VA: 0x103D4B0
	public void set_characterLimit(int value) { }

	[NativeNameAttribute] // RVA: 0xC4E304 Offset: 0xC4E304 VA: 0xC4E304
	[CompilerGeneratedAttribute] // RVA: 0xC4E304 Offset: 0xC4E304 VA: 0xC4E304
	// RVA: 0x103D524 Offset: 0x103D524 VA: 0x103D524
	public bool get_canGetSelection() { }

	[CompilerGeneratedAttribute] // RVA: 0xC4E350 Offset: 0xC4E350 VA: 0xC4E350
	[NativeNameAttribute] // RVA: 0xC4E350 Offset: 0xC4E350 VA: 0xC4E350
	// RVA: 0x103D52C Offset: 0x103D52C VA: 0x103D52C
	public bool get_canSetSelection() { }

	// RVA: 0x103D534 Offset: 0x103D534 VA: 0x103D534
	public RangeInt get_selection() { }

	// RVA: 0x103D5D8 Offset: 0x103D5D8 VA: 0x103D5D8
	public void set_selection(RangeInt value) { }

	// RVA: 0x103D564 Offset: 0x103D564 VA: 0x103D564
	private static void GetSelection(out int start, out int length) { }

	// RVA: 0x103D6B4 Offset: 0x103D6B4 VA: 0x103D6B4
	private static void SetSelection(int start, int length) { }
}

// Namespace: 
public enum TouchScreenKeyboard.Status // TypeDefIndex: 2221
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboard.Status Visible = 0;
	public const TouchScreenKeyboard.Status Done = 1;
	public const TouchScreenKeyboard.Status Canceled = 2;
	public const TouchScreenKeyboard.Status LostFocus = 3;
}

// Namespace: UnityEngine
public enum TouchPhase // TypeDefIndex: 2222
{
	// Fields
	public int value__; // 0x0
	public const TouchPhase Began = 0;
	public const TouchPhase Moved = 1;
	public const TouchPhase Stationary = 2;
	public const TouchPhase Ended = 3;
	public const TouchPhase Canceled = 4;
}

// Namespace: UnityEngine
public enum IMECompositionMode // TypeDefIndex: 2223
{
	// Fields
	public int value__; // 0x0
	public const IMECompositionMode Auto = 0;
	public const IMECompositionMode On = 1;
	public const IMECompositionMode Off = 2;
}

// Namespace: UnityEngine
public enum TouchType // TypeDefIndex: 2224
{
	// Fields
	public int value__; // 0x0
	public const TouchType Direct = 0;
	public const TouchType Indirect = 1;
	public const TouchType Stylus = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC4523C Offset: 0xC4523C VA: 0xC4523C
public struct Touch // TypeDefIndex: 2225
{
	// Fields
	private int m_FingerId; // 0x0
	private Vector2 m_Position; // 0x4
	private Vector2 m_RawPosition; // 0xC
	private Vector2 m_PositionDelta; // 0x14
	private float m_TimeDelta; // 0x1C
	private int m_TapCount; // 0x20
	private TouchPhase m_Phase; // 0x24
	private TouchType m_Type; // 0x28
	private float m_Pressure; // 0x2C
	private float m_maximumPossiblePressure; // 0x30
	private float m_Radius; // 0x34
	private float m_RadiusVariance; // 0x38
	private float m_AltitudeAngle; // 0x3C
	private float m_AzimuthAngle; // 0x40

	// Properties
	public int fingerId { get; }
	public Vector2 position { get; }
	public Vector2 deltaPosition { get; }
	public float deltaTime { get; }
	public int tapCount { get; }
	public TouchPhase phase { get; }
	public TouchType type { get; }

	// Methods

	// RVA: 0xBBA31C Offset: 0xBBA31C VA: 0xBBA31C
	public int get_fingerId() { }

	// RVA: 0xBBA324 Offset: 0xBBA324 VA: 0xBBA324
	public Vector2 get_position() { }

	// RVA: 0xBBA32C Offset: 0xBBA32C VA: 0xBBA32C
	public Vector2 get_deltaPosition() { }

	// RVA: 0xBBA334 Offset: 0xBBA334 VA: 0xBBA334
	public float get_deltaTime() { }

	// RVA: 0xBBA33C Offset: 0xBBA33C VA: 0xBBA33C
	public int get_tapCount() { }

	// RVA: 0xBBA344 Offset: 0xBBA344 VA: 0xBBA344
	public TouchPhase get_phase() { }

	// RVA: 0xBBA34C Offset: 0xBBA34C VA: 0xBBA34C
	public TouchType get_type() { }
}

// Namespace: UnityEngine
public enum DeviceOrientation // TypeDefIndex: 2226
{
	// Fields
	public int value__; // 0x0
	public const DeviceOrientation Unknown = 0;
	public const DeviceOrientation Portrait = 1;
	public const DeviceOrientation PortraitUpsideDown = 2;
	public const DeviceOrientation LandscapeLeft = 3;
	public const DeviceOrientation LandscapeRight = 4;
	public const DeviceOrientation FaceUp = 5;
	public const DeviceOrientation FaceDown = 6;
}

// Namespace: UnityEngine
public struct LocationInfo // TypeDefIndex: 2227
{
	// Fields
	internal double m_Timestamp; // 0x0
	internal float m_Latitude; // 0x8
	internal float m_Longitude; // 0xC
	internal float m_Altitude; // 0x10
	internal float m_HorizontalAccuracy; // 0x14
	internal float m_VerticalAccuracy; // 0x18

	// Properties
	public float latitude { get; }
	public float longitude { get; }
	public float altitude { get; }
	public float horizontalAccuracy { get; }
	public float verticalAccuracy { get; }
	public double timestamp { get; }

	// Methods

	// RVA: 0xDD2864 Offset: 0xDD2864 VA: 0xDD2864
	public float get_latitude() { }

	// RVA: 0xDD286C Offset: 0xDD286C VA: 0xDD286C
	public float get_longitude() { }

	// RVA: 0xDD2874 Offset: 0xDD2874 VA: 0xDD2874
	public float get_altitude() { }

	// RVA: 0xDD287C Offset: 0xDD287C VA: 0xDD287C
	public float get_horizontalAccuracy() { }

	// RVA: 0xDD2884 Offset: 0xDD2884 VA: 0xDD2884
	public float get_verticalAccuracy() { }

	// RVA: 0xDD288C Offset: 0xDD288C VA: 0xDD288C
	public double get_timestamp() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC45274 Offset: 0xC45274 VA: 0xC45274
public class Input // TypeDefIndex: 2228
{
	// Properties
	public static bool anyKeyDown { get; }
	public static string inputString { get; }
	public static Vector3 mousePosition { get; }
	public static Vector2 mouseScrollDelta { get; }
	public static IMECompositionMode imeCompositionMode { get; set; }
	public static string compositionString { get; }
	public static Vector2 compositionCursorPos { get; set; }
	public static bool mousePresent { get; }
	public static int touchCount { get; }
	public static bool touchSupported { get; }
	public static bool multiTouchEnabled { get; set; }
	public static DeviceOrientation deviceOrientation { get; }
	public static Vector3 acceleration { get; }
	public static Touch[] touches { get; }

	// Methods

	[NativeThrowsAttribute] // RVA: 0xC4E39C Offset: 0xC4E39C VA: 0xC4E39C
	// RVA: 0x26A9EF4 Offset: 0x26A9EF4 VA: 0x26A9EF4
	private static bool GetKeyInt(KeyCode key) { }

	[NativeThrowsAttribute] // RVA: 0xC4E3AC Offset: 0xC4E3AC VA: 0xC4E3AC
	// RVA: 0x26A9F60 Offset: 0x26A9F60 VA: 0x26A9F60
	private static bool GetKeyUpInt(KeyCode key) { }

	[NativeThrowsAttribute] // RVA: 0xC4E3BC Offset: 0xC4E3BC VA: 0xC4E3BC
	// RVA: 0x26A9FCC Offset: 0x26A9FCC VA: 0x26A9FCC
	private static bool GetKeyDownInt(KeyCode key) { }

	[NativeThrowsAttribute] // RVA: 0xC4E3CC Offset: 0xC4E3CC VA: 0xC4E3CC
	// RVA: 0x26AA038 Offset: 0x26AA038 VA: 0x26AA038
	public static float GetAxis(string axisName) { }

	[NativeThrowsAttribute] // RVA: 0xC4E3DC Offset: 0xC4E3DC VA: 0xC4E3DC
	// RVA: 0x26AA0A4 Offset: 0x26AA0A4 VA: 0x26AA0A4
	public static float GetAxisRaw(string axisName) { }

	[NativeThrowsAttribute] // RVA: 0xC4E3EC Offset: 0xC4E3EC VA: 0xC4E3EC
	// RVA: 0x26AA110 Offset: 0x26AA110 VA: 0x26AA110
	public static bool GetButton(string buttonName) { }

	[NativeThrowsAttribute] // RVA: 0xC4E3FC Offset: 0xC4E3FC VA: 0xC4E3FC
	// RVA: 0x26AA17C Offset: 0x26AA17C VA: 0x26AA17C
	public static bool GetButtonDown(string buttonName) { }

	[NativeThrowsAttribute] // RVA: 0xC4E40C Offset: 0xC4E40C VA: 0xC4E40C
	// RVA: 0x26AA1E8 Offset: 0x26AA1E8 VA: 0x26AA1E8
	public static bool GetButtonUp(string buttonName) { }

	[NativeThrowsAttribute] // RVA: 0xC4E41C Offset: 0xC4E41C VA: 0xC4E41C
	// RVA: 0x26AA254 Offset: 0x26AA254 VA: 0x26AA254
	public static bool GetMouseButton(int button) { }

	[NativeThrowsAttribute] // RVA: 0xC4E42C Offset: 0xC4E42C VA: 0xC4E42C
	// RVA: 0x26AA2C0 Offset: 0x26AA2C0 VA: 0x26AA2C0
	public static bool GetMouseButtonDown(int button) { }

	[NativeThrowsAttribute] // RVA: 0xC4E43C Offset: 0xC4E43C VA: 0xC4E43C
	// RVA: 0x26AA32C Offset: 0x26AA32C VA: 0x26AA32C
	public static bool GetMouseButtonUp(int button) { }

	[FreeFunctionAttribute] // RVA: 0xC4E44C Offset: 0xC4E44C VA: 0xC4E44C
	// RVA: 0x26AA398 Offset: 0x26AA398 VA: 0x26AA398
	public static void ResetInputAxes() { }

	[NativeThrowsAttribute] // RVA: 0xC4E484 Offset: 0xC4E484 VA: 0xC4E484
	// RVA: 0x26AA3F0 Offset: 0x26AA3F0 VA: 0x26AA3F0
	public static Touch GetTouch(int index) { }

	// RVA: 0x26AA4B8 Offset: 0x26AA4B8 VA: 0x26AA4B8
	public static bool GetKey(KeyCode key) { }

	// RVA: 0x26AA4BC Offset: 0x26AA4BC VA: 0x26AA4BC
	public static bool GetKeyUp(KeyCode key) { }

	// RVA: 0x26AA4C0 Offset: 0x26AA4C0 VA: 0x26AA4C0
	public static bool GetKeyDown(KeyCode key) { }

	// RVA: 0x26AA4C4 Offset: 0x26AA4C4 VA: 0x26AA4C4
	public static bool get_anyKeyDown() { }

	// RVA: 0x26AA51C Offset: 0x26AA51C VA: 0x26AA51C
	public static string get_inputString() { }

	// RVA: 0x26AA574 Offset: 0x26AA574 VA: 0x26AA574
	public static Vector3 get_mousePosition() { }

	// RVA: 0x26AA610 Offset: 0x26AA610 VA: 0x26AA610
	public static Vector2 get_mouseScrollDelta() { }

	// RVA: 0x26AA6A4 Offset: 0x26AA6A4 VA: 0x26AA6A4
	public static IMECompositionMode get_imeCompositionMode() { }

	// RVA: 0x26AA6FC Offset: 0x26AA6FC VA: 0x26AA6FC
	public static void set_imeCompositionMode(IMECompositionMode value) { }

	// RVA: 0x26AA768 Offset: 0x26AA768 VA: 0x26AA768
	public static string get_compositionString() { }

	// RVA: 0x26AA7C0 Offset: 0x26AA7C0 VA: 0x26AA7C0
	public static Vector2 get_compositionCursorPos() { }

	// RVA: 0x26AA854 Offset: 0x26AA854 VA: 0x26AA854
	public static void set_compositionCursorPos(Vector2 value) { }

	[FreeFunctionAttribute] // RVA: 0xC4E494 Offset: 0xC4E494 VA: 0xC4E494
	// RVA: 0x26AA8E4 Offset: 0x26AA8E4 VA: 0x26AA8E4
	public static bool get_mousePresent() { }

	[FreeFunctionAttribute] // RVA: 0xC4E4CC Offset: 0xC4E4CC VA: 0xC4E4CC
	// RVA: 0x26AA93C Offset: 0x26AA93C VA: 0x26AA93C
	public static int get_touchCount() { }

	[FreeFunctionAttribute] // RVA: 0xC4E504 Offset: 0xC4E504 VA: 0xC4E504
	// RVA: 0x26AA994 Offset: 0x26AA994 VA: 0x26AA994
	public static bool get_touchSupported() { }

	[FreeFunctionAttribute] // RVA: 0xC4E53C Offset: 0xC4E53C VA: 0xC4E53C
	// RVA: 0x26AA9EC Offset: 0x26AA9EC VA: 0x26AA9EC
	public static bool get_multiTouchEnabled() { }

	[FreeFunctionAttribute] // RVA: 0xC4E574 Offset: 0xC4E574 VA: 0xC4E574
	// RVA: 0x26AAA44 Offset: 0x26AAA44 VA: 0x26AAA44
	public static void set_multiTouchEnabled(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xC4E5AC Offset: 0xC4E5AC VA: 0xC4E5AC
	// RVA: 0x26AAAB0 Offset: 0x26AAAB0 VA: 0x26AAAB0
	public static DeviceOrientation get_deviceOrientation() { }

	[FreeFunctionAttribute] // RVA: 0xC4E5E4 Offset: 0xC4E5E4 VA: 0xC4E5E4
	// RVA: 0x26AAB08 Offset: 0x26AAB08 VA: 0x26AAB08
	public static Vector3 get_acceleration() { }

	// RVA: 0x26AABA4 Offset: 0x26AABA4 VA: 0x26AABA4
	public static Touch[] get_touches() { }

	// RVA: 0x26AA444 Offset: 0x26AA444 VA: 0x26AA444
	private static void GetTouch_Injected(int index, out Touch ret) { }

	// RVA: 0x26AA5A4 Offset: 0x26AA5A4 VA: 0x26AA5A4
	private static void get_mousePosition_Injected(out Vector3 ret) { }

	// RVA: 0x26AA638 Offset: 0x26AA638 VA: 0x26AA638
	private static void get_mouseScrollDelta_Injected(out Vector2 ret) { }

	// RVA: 0x26AA7E8 Offset: 0x26AA7E8 VA: 0x26AA7E8
	private static void get_compositionCursorPos_Injected(out Vector2 ret) { }

	// RVA: 0x26AA878 Offset: 0x26AA878 VA: 0x26AA878
	private static void set_compositionCursorPos_Injected(ref Vector2 value) { }

	// RVA: 0x26AAB38 Offset: 0x26AAB38 VA: 0x26AAB38
	private static void get_acceleration_Injected(out Vector3 ret) { }
}

// Namespace: UnityEngine
public enum KeyCode // TypeDefIndex: 2229
{
	// Fields
	public int value__; // 0x0
	public const KeyCode None = 0;
	public const KeyCode Backspace = 8;
	public const KeyCode Delete = 127;
	public const KeyCode Tab = 9;
	public const KeyCode Clear = 12;
	public const KeyCode Return = 13;
	public const KeyCode Pause = 19;
	public const KeyCode Escape = 27;
	public const KeyCode Space = 32;
	public const KeyCode Keypad0 = 256;
	public const KeyCode Keypad1 = 257;
	public const KeyCode Keypad2 = 258;
	public const KeyCode Keypad3 = 259;
	public const KeyCode Keypad4 = 260;
	public const KeyCode Keypad5 = 261;
	public const KeyCode Keypad6 = 262;
	public const KeyCode Keypad7 = 263;
	public const KeyCode Keypad8 = 264;
	public const KeyCode Keypad9 = 265;
	public const KeyCode KeypadPeriod = 266;
	public const KeyCode KeypadDivide = 267;
	public const KeyCode KeypadMultiply = 268;
	public const KeyCode KeypadMinus = 269;
	public const KeyCode KeypadPlus = 270;
	public const KeyCode KeypadEnter = 271;
	public const KeyCode KeypadEquals = 272;
	public const KeyCode UpArrow = 273;
	public const KeyCode DownArrow = 274;
	public const KeyCode RightArrow = 275;
	public const KeyCode LeftArrow = 276;
	public const KeyCode Insert = 277;
	public const KeyCode Home = 278;
	public const KeyCode End = 279;
	public const KeyCode PageUp = 280;
	public const KeyCode PageDown = 281;
	public const KeyCode F1 = 282;
	public const KeyCode F2 = 283;
	public const KeyCode F3 = 284;
	public const KeyCode F4 = 285;
	public const KeyCode F5 = 286;
	public const KeyCode F6 = 287;
	public const KeyCode F7 = 288;
	public const KeyCode F8 = 289;
	public const KeyCode F9 = 290;
	public const KeyCode F10 = 291;
	public const KeyCode F11 = 292;
	public const KeyCode F12 = 293;
	public const KeyCode F13 = 294;
	public const KeyCode F14 = 295;
	public const KeyCode F15 = 296;
	public const KeyCode Alpha0 = 48;
	public const KeyCode Alpha1 = 49;
	public const KeyCode Alpha2 = 50;
	public const KeyCode Alpha3 = 51;
	public const KeyCode Alpha4 = 52;
	public const KeyCode Alpha5 = 53;
	public const KeyCode Alpha6 = 54;
	public const KeyCode Alpha7 = 55;
	public const KeyCode Alpha8 = 56;
	public const KeyCode Alpha9 = 57;
	public const KeyCode Exclaim = 33;
	public const KeyCode DoubleQuote = 34;
	public const KeyCode Hash = 35;
	public const KeyCode Dollar = 36;
	public const KeyCode Percent = 37;
	public const KeyCode Ampersand = 38;
	public const KeyCode Quote = 39;
	public const KeyCode LeftParen = 40;
