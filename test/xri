	[CompilerGeneratedAttribute] // RVA: 0xD3B78C Offset: 0xD3B78C VA: 0xD3B78C
	// RVA: 0x15EA0EC Offset: 0x15EA0EC VA: 0x15EA0EC
	private static int <Apply>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B79C Offset: 0xD3B79C VA: 0xD3B79C
	// RVA: 0x15EA118 Offset: 0x15EA118 VA: 0x15EA118
	private static int <Apply>m__2(BattleServantData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0380 Offset: 0xCB0380 VA: 0xCB0380
private sealed class TargetFilterLowestHpRate.<Apply>c__AnonStorey0 // TypeDefIndex: 9190
{
	// Fields
	internal Dictionary<int, int> uniqueIdToMaxHpDict; // 0x10

	// Methods

	// RVA: 0x15EA0BC Offset: 0x15EA0BC VA: 0x15EA0BC
	public void .ctor() { }

	// RVA: 0x15EA144 Offset: 0x15EA144 VA: 0x15EA144
	internal bool <>m__0(BattleServantData x) { }

	// RVA: 0x15EA214 Offset: 0x15EA214 VA: 0x15EA214
	internal float <>m__1(BattleServantData x) { }
}

// Namespace: 
public static class TreasureDeviceConditionUtil // TypeDefIndex: 9191
{
	// Methods

	// RVA: 0x1E0E364 Offset: 0x1E0E364 VA: 0x1E0E364
	private static bool HigherCondition(Dictionary<string, object> script, string key, int val) { }

	// RVA: 0x1E0E43C Offset: 0x1E0E43C VA: 0x1E0E43C
	public static bool IsSatisfyEachCondition(BattleServantData servantData, BattleData data) { }

	// RVA: 0x1E0E440 Offset: 0x1E0E440 VA: 0x1E0E440
	public static bool HasEnoughCriticalStar(BattleServantData servantData, BattleData data) { }
}

// Namespace: 
public class MasterLvRewardInfo // TypeDefIndex: 9192
{
	// Fields
	public bool isNew; // 0x10
	public long userSvtId; // 0x18
	public int mstGiftId; // 0x20
	public int type; // 0x24
	public int targetSvtId; // 0x28
	public int objectId; // 0x2C
	public int num; // 0x30
	public int limitCount; // 0x34
	public int lv; // 0x38
	public int rarity; // 0x3C

	// Methods

	// RVA: 0x19F58F8 Offset: 0x19F58F8 VA: 0x19F58F8
	public void .ctor() { }

	// RVA: 0x19F5900 Offset: 0x19F5900 VA: 0x19F5900
	public GiftEntity getGiftEntity() { }
}

// Namespace: 
public class MultiplyTargetMatrix : MonoBehaviour // TypeDefIndex: 9193
{
	// Fields
	[SerializeField] // RVA: 0xCD29CC Offset: 0xCD29CC VA: 0xCD29CC
	private Transform targetObj; // 0x18
	[SerializeField] // RVA: 0xCD29DC Offset: 0xCD29DC VA: 0xCD29DC
	private string targetObjPath; // 0x20
	[SerializeField] // RVA: 0xCD29EC Offset: 0xCD29EC VA: 0xCD29EC
	private Renderer[] targetRenderers; // 0x28
	[SerializeField] // RVA: 0xCD29FC Offset: 0xCD29FC VA: 0xCD29FC
	private XWeaponTrail[] targetXWeaponTrails; // 0x30
	[SerializeField] // RVA: 0xCD2A0C Offset: 0xCD2A0C VA: 0xCD2A0C
	private MultiplyTargetMatrix.MaterialType materialType; // 0x38
	[SerializeField] // RVA: 0xCD2A1C Offset: 0xCD2A1C VA: 0xCD2A1C
	private string mainMatrix; // 0x40
	[SerializeField] // RVA: 0xCD2A2C Offset: 0xCD2A2C VA: 0xCD2A2C
	private string invertMatrix; // 0x48
	private Renderer[] targetXWeaponTrailRenderers; // 0x50

	// Methods

	// RVA: 0x17B951C Offset: 0x17B951C VA: 0x17B951C
	public void .ctor() { }

	// RVA: 0x17B9584 Offset: 0x17B9584 VA: 0x17B9584
	public void Start() { }

	// RVA: 0x17B98AC Offset: 0x17B98AC VA: 0x17B98AC
	public void LateUpdate() { }

	// RVA: 0x17B9658 Offset: 0x17B9658 VA: 0x17B9658
	public void UpdateMatrix() { }

	// RVA: 0x17B9CEC Offset: 0x17B9CEC VA: 0x17B9CEC
	public void SetTargetObj(GameObject obj) { }

	// RVA: 0x17B98B0 Offset: 0x17B98B0 VA: 0x17B98B0
	private void updateMatrix(Renderer[] targetRenderers) { }
}

// Namespace: 
public enum MultiplyTargetMatrix.MaterialType // TypeDefIndex: 9194
{
	// Fields
	public int value__; // 0x0
	public const MultiplyTargetMatrix.MaterialType ShareMaterial = 0;
	public const MultiplyTargetMatrix.MaterialType NormalMaterial = 1;
}

// Namespace: 
public abstract class BattleObserver // TypeDefIndex: 9195
{
	// Fields
	private BattleSubject battleSubject; // 0x10

	// Methods

	// RVA: 0x15045EC Offset: 0x15045EC VA: 0x15045EC
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Update(BattleSubject subject);

	// RVA: 0x15045F4 Offset: 0x15045F4 VA: 0x15045F4
	public void Add(BattleSubject subject) { }

	// RVA: 0x150462C Offset: 0x150462C VA: 0x150462C
	public void Remove() { }
}

// Namespace: 
public class ChangeBattlePhaseNotify : BattleSubject // TypeDefIndex: 9196
{
	// Fields
	private ServantAnimationOverwriteEntity.PhaseType _phase; // 0x18

	// Properties
	public ServantAnimationOverwriteEntity.PhaseType Phase { get; set; }

	// Methods

	// RVA: 0x1F0AEF0 Offset: 0x1F0AEF0 VA: 0x1F0AEF0
	public void .ctor() { }

	// RVA: 0x1F0AEF8 Offset: 0x1F0AEF8 VA: 0x1F0AEF8
	public void set_Phase(ServantAnimationOverwriteEntity.PhaseType value) { }

	// RVA: 0x1F0AF10 Offset: 0x1F0AF10 VA: 0x1F0AF10
	public ServantAnimationOverwriteEntity.PhaseType get_Phase() { }

	// RVA: 0x1F0AF04 Offset: 0x1F0AF04 VA: 0x1F0AF04
	private void UpdatePhase(ServantAnimationOverwriteEntity.PhaseType phase) { }
}

// Namespace: 
public abstract class ChangeBattlePhaseObserver : BattleObserver // TypeDefIndex: 9197
{
	// Methods

	// RVA: 0x1F0AF18 Offset: 0x1F0AF18 VA: 0x1F0AF18
	protected void .ctor() { }

	// RVA: 0x1F0AF20 Offset: 0x1F0AF20 VA: 0x1F0AF20 Slot: 4
	public override void Update(BattleSubject subject) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void UpdateNotify(ChangeBattlePhaseNotify notify);
}

// Namespace: 
public class ChangeBattlePhaseOverwriteAnimation : ChangeBattlePhaseObserver // TypeDefIndex: 9198
{
	// Fields
	private BattleActorControl actor; // 0x18
	private ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData current; // 0x20
	private List<ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData> overwriteList; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCD2A3C Offset: 0xCD2A3C VA: 0xCD2A3C
	private static Func<ServantAnimationOverwriteEntity, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD2A4C Offset: 0xCD2A4C VA: 0xCD2A4C
	private static Func<ServantAnimationOverwriteEntity, int> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1F0AFC4 Offset: 0x1F0AFC4 VA: 0x1F0AFC4
	public void .ctor(BattleActorControl battleActor, ServantAnimationOverwriteEntity[] overwriteArray, ChangeBattlePhaseNotify notify) { }

	// RVA: 0x1F0B078 Offset: 0x1F0B078 VA: 0x1F0B078
	protected void InitOverwriteInfo(ServantAnimationOverwriteEntity[] overwriteEntArray) { }

	// RVA: 0x1F0B4A4 Offset: 0x1F0B4A4 VA: 0x1F0B4A4
	protected ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData FindOverwriteForPhase(ServantAnimationOverwriteEntity.PhaseType phaseType) { }

	// RVA: 0x1F0B6A0 Offset: 0x1F0B6A0 VA: 0x1F0B6A0 Slot: 5
	protected override void UpdateNotify(ChangeBattlePhaseNotify notify) { }

	// RVA: 0x1F0B7C8 Offset: 0x1F0B7C8 VA: 0x1F0B7C8
	protected bool IsModifiedOverwritedAnim(BattleActorControl bActor, string originalAnim) { }

	// RVA: 0x1F0B900 Offset: 0x1F0B900 VA: 0x1F0B900
	public string Overwrite(BattleActorControl bActor, string baseAnimName) { }

	// RVA: 0x1F0BA8C Offset: 0x1F0BA8C VA: 0x1F0BA8C
	public string GetCurrentNormalOverwriteName(string baseAnimName) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B7AC Offset: 0xD3B7AC VA: 0xD3B7AC
	// RVA: 0x1F0BB48 Offset: 0x1F0BB48 VA: 0x1F0BB48
	private static int <InitOverwriteInfo>m__0(ServantAnimationOverwriteEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B7BC Offset: 0xD3B7BC VA: 0xD3B7BC
	// RVA: 0x1F0BB70 Offset: 0x1F0BB70 VA: 0x1F0BB70
	private static int <InitOverwriteInfo>m__1(ServantAnimationOverwriteEntity x) { }
}

// Namespace: 
public class ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData // TypeDefIndex: 9199
{
	// Fields
	public ServantAnimationOverwriteEntity.PhaseType phase; // 0x10
	protected Dictionary<string, string> dicOverwriteName; // 0x18

	// Methods

	// RVA: 0x1F0B574 Offset: 0x1F0B574 VA: 0x1F0B574
	public void .ctor() { }

	// RVA: 0x1F0B5E4 Offset: 0x1F0B5E4 VA: 0x1F0B5E4
	public void Add(string targetName, string overwriteName) { }

	// RVA: 0x1F0B9BC Offset: 0x1F0B9BC VA: 0x1F0B9BC
	public string Find(string targetName) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0390 Offset: 0xCB0390 VA: 0xCB0390
private sealed class ChangeBattlePhaseOverwriteAnimation.<FindOverwriteForPhase>c__AnonStorey0 // TypeDefIndex: 9200
{
	// Fields
	internal ServantAnimationOverwriteEntity.PhaseType phaseType; // 0x10

	// Methods

	// RVA: 0x1F0B698 Offset: 0x1F0B698 VA: 0x1F0B698
	public void .ctor() { }

	// RVA: 0x1F0BB98 Offset: 0x1F0BB98 VA: 0x1F0BB98
	internal bool <>m__0(ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData x) { }
}

// Namespace: 
public class BattleSubject // TypeDefIndex: 9201
{
	// Fields
	private List<BattleObserver> observers; // 0x10

	// Methods

	// RVA: 0x1AE7074 Offset: 0x1AE7074 VA: 0x1AE7074
	public void .ctor() { }

	// RVA: 0x1AE70E4 Offset: 0x1AE70E4 VA: 0x1AE70E4
	public void Add(BattleObserver observer) { }

	// RVA: 0x1AE7168 Offset: 0x1AE7168 VA: 0x1AE7168
	public void Remove(BattleObserver observer) { }

	// RVA: 0x1AE71EC Offset: 0x1AE71EC VA: 0x1AE71EC
	public void Notify() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B7CC Offset: 0xD3B7CC VA: 0xD3B7CC
	// RVA: 0x1AE728C Offset: 0x1AE728C VA: 0x1AE728C
	private void <Notify>m__0(BattleObserver x) { }
}

// Namespace: 
[DefaultExecutionOrder] // RVA: 0xC96A48 Offset: 0xC96A48 VA: 0xC96A48
public class peRenderTexture : MonoBehaviour // TypeDefIndex: 9202
{
	// Fields
	[SerializeField] // RVA: 0xCD2A5C Offset: 0xCD2A5C VA: 0xCD2A5C
	private Camera targetCamera; // 0x18
	[SerializeField] // RVA: 0xCD2A6C Offset: 0xCD2A6C VA: 0xCD2A6C
	private string targetCameraPath; // 0x20
	[SerializeField] // RVA: 0xCD2A7C Offset: 0xCD2A7C VA: 0xCD2A7C
	private Vector3 cameraOffset; // 0x28
	[SerializeField] // RVA: 0xCD2A8C Offset: 0xCD2A8C VA: 0xCD2A8C
	private GameObject targetObject; // 0x38
	[SerializeField] // RVA: 0xCD2A9C Offset: 0xCD2A9C VA: 0xCD2A9C
	private string targetObjectPath; // 0x40
	[SerializeField] // RVA: 0xCD2AAC Offset: 0xCD2AAC VA: 0xCD2AAC
	private int textureWidth; // 0x48
	[SerializeField] // RVA: 0xCD2ABC Offset: 0xCD2ABC VA: 0xCD2ABC
	private int textureHeight; // 0x4C
	[SerializeField] // RVA: 0xCD2ACC Offset: 0xCD2ACC VA: 0xCD2ACC
	private int textureDepth; // 0x50
	[SerializeField] // RVA: 0xCD2ADC Offset: 0xCD2ADC VA: 0xCD2ADC
	private TextureDimension textureDimension; // 0x54
	[SerializeField] // RVA: 0xCD2AEC Offset: 0xCD2AEC VA: 0xCD2AEC
	private RenderTextureFormat textureFormat; // 0x58
	[SerializeField] // RVA: 0xCD2AFC Offset: 0xCD2AFC VA: 0xCD2AFC
	private FilterMode textureFilterMode; // 0x5C
	[SerializeField] // RVA: 0xCD2B0C Offset: 0xCD2B0C VA: 0xCD2B0C
	private RenderingPath cameraRenderingPath; // 0x60
	[SerializeField] // RVA: 0xCD2B1C Offset: 0xCD2B1C VA: 0xCD2B1C
	private Renderer boardrenderer; // 0x68
	[SerializeField] // RVA: 0xCD2B2C Offset: 0xCD2B2C VA: 0xCD2B2C
	private List<GameObject> changeLayerObjects; // 0x70
	[SerializeField] // RVA: 0xCD2B3C Offset: 0xCD2B3C VA: 0xCD2B3C
	private List<string> changeLayerObjectPaths; // 0x78
	[SerializeField] // RVA: 0xCD2B4C Offset: 0xCD2B4C VA: 0xCD2B4C
	private Material changeLayerObjectMaterial; // 0x80
	[SerializeField] // RVA: 0xCD2B5C Offset: 0xCD2B5C VA: 0xCD2B5C
	private int changeLayerObjectMaterialTargetLayer; // 0x88
	[SerializeField] // RVA: 0xCD2B6C Offset: 0xCD2B6C VA: 0xCD2B6C
	private int changeLayerObjectMaterialRestoreLayer; // 0x8C
	[SerializeField] // RVA: 0xCD2B7C Offset: 0xCD2B7C VA: 0xCD2B7C
	private bool changeLayerEnabled; // 0x90
	[SerializeField] // RVA: 0xCD2B8C Offset: 0xCD2B8C VA: 0xCD2B8C
	private int changeLayer; // 0x94
	[SerializeField] // RVA: 0xCD2B9C Offset: 0xCD2B9C VA: 0xCD2B9C
	private bool changeCullingMaskEnabled; // 0x98
	[SerializeField] // RVA: 0xCD2BAC Offset: 0xCD2BAC VA: 0xCD2BAC
	private int changeCullingMask; // 0x9C
	[SerializeField] // RVA: 0xCD2BBC Offset: 0xCD2BBC VA: 0xCD2BBC
	private Vector3 targetBoundsCenter; // 0xA0
	[SerializeField] // RVA: 0xCD2BCC Offset: 0xCD2BCC VA: 0xCD2BCC
	private Vector3 targetBoundsLT; // 0xAC
	[SerializeField] // RVA: 0xCD2BDC Offset: 0xCD2BDC VA: 0xCD2BDC
	private Vector3 targetBoundsRB; // 0xB8
	[SerializeField] // RVA: 0xCD2BEC Offset: 0xCD2BEC VA: 0xCD2BEC
	private float targetBoundsOffsetX; // 0xC4
	[SerializeField] // RVA: 0xCD2BFC Offset: 0xCD2BFC VA: 0xCD2BFC
	private float targetBoundsOffsetY; // 0xC8
	[SerializeField] // RVA: 0xCD2C0C Offset: 0xCD2C0C VA: 0xCD2C0C
	private int boundsUpdateCount; // 0xCC
	[SerializeField] // RVA: 0xCD2C1C Offset: 0xCD2C1C VA: 0xCD2C1C
	private string MainCamVPMat; // 0xD0
	[SerializeField] // RVA: 0xCD2C2C Offset: 0xCD2C2C VA: 0xCD2C2C
	private string ParallelViewMat; // 0xD8
	[SerializeField] // RVA: 0xCD2C3C Offset: 0xCD2C3C VA: 0xCD2C3C
	private string ParallelProjectionMat; // 0xE0
	[SerializeField] // RVA: 0xCD2C4C Offset: 0xCD2C4C VA: 0xCD2C4C
	private int _RBindex; // 0xE8
	[SerializeField] // RVA: 0xCD2C5C Offset: 0xCD2C5C VA: 0xCD2C5C
	private int _LTindex; // 0xEC
	private Camera rasterCamera; // 0xF0
	private RenderTexture renderTexture; // 0xF8
	private List<peRenderTexture.ChangeLayerObject> targetChangeLayerObjects; // 0x100
	private Matrix4x4 MainCamVP; // 0x108
	private Matrix4x4 orthoViewMat; // 0x148
	private Matrix4x4 orthoProjectionMat; // 0x188
	private int _boundsUpdateCount; // 0x1C8
	private bool isInitialized; // 0x1CC

	// Methods

	// RVA: 0x2B7A5A0 Offset: 0x2B7A5A0 VA: 0x2B7A5A0
	public void .ctor() { }

	// RVA: 0x2B7A640 Offset: 0x2B7A640 VA: 0x2B7A640
	private void OnEnable() { }

	// RVA: 0x2B7A868 Offset: 0x2B7A868 VA: 0x2B7A868
	private void OnDisable() { }

	// RVA: 0x2B7A86C Offset: 0x2B7A86C VA: 0x2B7A86C
	private void Update() { }

	// RVA: 0x2B7B16C Offset: 0x2B7B16C VA: 0x2B7B16C
	private void LateUpdate() { }

	// RVA: 0x2B7A870 Offset: 0x2B7A870 VA: 0x2B7A870
	private void initialize() { }

	// RVA: 0x2B7A644 Offset: 0x2B7A644 VA: 0x2B7A644
	private void finalize() { }

	// RVA: 0x2B7C4C4 Offset: 0x2B7C4C4 VA: 0x2B7C4C4
	private void registChangeLayerObjects(GameObject gameObject) { }

	// RVA: 0x2B7B578 Offset: 0x2B7B578 VA: 0x2B7B578
	private void updateLayer() { }

	// RVA: 0x2B7B810 Offset: 0x2B7B810 VA: 0x2B7B810
	private void updateBounds() { }

	// RVA: 0x2B7C038 Offset: 0x2B7C038 VA: 0x2B7C038
	private void updateTransform() { }

	// RVA: 0x2B7CF0C Offset: 0x2B7CF0C VA: 0x2B7CF0C
	private Bounds CalcRendererBounds(GameObject obj) { }

	// RVA: 0x2B7D354 Offset: 0x2B7D354 VA: 0x2B7D354
	private void CalcRendererBounds(GameObject obj, ref Bounds bounds) { }

	// RVA: 0x2B7D7A8 Offset: 0x2B7D7A8 VA: 0x2B7D7A8
	private Matrix4x4 orthogonalMatrix(float left, float right, float bottom, float top) { }

	// RVA: 0x2B7CF4C Offset: 0x2B7CF4C VA: 0x2B7CF4C
	private void CreatePVMatrix(Vector3 in_center, Vector3 in_LeftTop, Vector3 in_RightBottom) { }
}

// Namespace: 
private class peRenderTexture.ChangeLayerObject // TypeDefIndex: 9203
{
	// Fields
	public GameObject gameObject; // 0x10
	public Renderer renderer; // 0x18
	private Material orgMaterial; // 0x20
	private Material changeMaterial; // 0x28
	private int prevLayer; // 0x30

	// Properties
	public int layer { get; }

	// Methods

	// RVA: 0x2B7CA40 Offset: 0x2B7CA40 VA: 0x2B7CA40
	public void .ctor(GameObject gameObject) { }

	// RVA: 0x2B7CC30 Offset: 0x2B7CC30 VA: 0x2B7CC30
	public int get_layer() { }

	// RVA: 0x2B7DA04 Offset: 0x2B7DA04 VA: 0x2B7DA04
	public void Initialize() { }

	// RVA: 0x2B7C938 Offset: 0x2B7C938 VA: 0x2B7C938
	public void Finalize() { }

	// RVA: 0x2B7CA70 Offset: 0x2B7CA70 VA: 0x2B7CA70
	public void ChangeLayer(int layer) { }

	// RVA: 0x2B7CB64 Offset: 0x2B7CB64 VA: 0x2B7CB64
	public bool SyncLayer() { }

	// RVA: 0x2B7CCD0 Offset: 0x2B7CCD0 VA: 0x2B7CCD0
	public void ChangeMaterial(Material material) { }

	// RVA: 0x2B7CE68 Offset: 0x2B7CE68 VA: 0x2B7CE68
	public void RestoreMaterial() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB03A0 Offset: 0xCB03A0 VA: 0xCB03A0
private sealed class peRenderTexture.<registChangeLayerObjects>c__AnonStorey0 // TypeDefIndex: 9204
{
	// Fields
	internal GameObject gameObject; // 0x10

	// Methods

	// RVA: 0x2B7CA38 Offset: 0x2B7CA38 VA: 0x2B7CA38
	public void .ctor() { }

	// RVA: 0x2B7D978 Offset: 0x2B7D978 VA: 0x2B7D978
	internal bool <>m__0(peRenderTexture.ChangeLayerObject n) { }
}

// Namespace: 
public class AlphaMaskTextureManager : MonoBehaviour // TypeDefIndex: 9205
{
	// Fields
	[SerializeField] // RVA: 0xCD2C6C Offset: 0xCD2C6C VA: 0xCD2C6C
	private UIAlphaMaskTexture prefab; // 0x18

	// Methods

	// RVA: 0x15A7674 Offset: 0x15A7674 VA: 0x15A7674
	public void .ctor() { }

	// RVA: 0x15A767C Offset: 0x15A767C VA: 0x15A767C
	public UIAlphaMaskTexture Create(GameObject root, string loadName, Action callback) { }
}

// Namespace: 
public class AutoBattleButtonComponent : MonoBehaviour // TypeDefIndex: 9206
{
	// Fields
	public UISprite buttonSprite; // 0x18
	public Collider overPanelCollider; // 0x20
	public BattleLogic logic; // 0x28

	// Methods

	// RVA: 0x14719CC Offset: 0x14719CC VA: 0x14719CC
	public void .ctor() { }

	// RVA: 0x14719D4 Offset: 0x14719D4 VA: 0x14719D4
	public void OnClick() { }

	// RVA: 0x14719D8 Offset: 0x14719D8 VA: 0x14719D8
	public void InitButton() { }
}

// Namespace: 
public class TranslucentActorVisualInfo // TypeDefIndex: 9207
{
	// Fields
	private const float DefaultTranslucentAlpha = 0.2;
	private const float OpaqueAlpha = 1;
	[CompilerGeneratedAttribute] // RVA: 0xCD2C7C Offset: 0xCD2C7C VA: 0xCD2C7C
	[DebuggerBrowsableAttribute] // RVA: 0xCD2C7C Offset: 0xCD2C7C VA: 0xCD2C7C
	private bool <IsDrawShadow>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD2CB8 Offset: 0xCD2CB8 VA: 0xCD2CB8
	[DebuggerBrowsableAttribute] // RVA: 0xCD2CB8 Offset: 0xCD2CB8 VA: 0xCD2CB8
	private float <Alpha>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCD2CF4 Offset: 0xCD2CF4 VA: 0xCD2CF4
	[DebuggerBrowsableAttribute] // RVA: 0xCD2CF4 Offset: 0xCD2CF4 VA: 0xCD2CF4
	private bool <IsActive>k__BackingField; // 0x18

	// Properties
	public bool IsDrawShadow { get; set; }
	public float Alpha { get; set; }
	public bool IsActive { get; set; }

	// Methods

	// RVA: 0x1E09124 Offset: 0x1E09124 VA: 0x1E09124
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B7DC Offset: 0xD3B7DC VA: 0xD3B7DC
	// RVA: 0x1E0912C Offset: 0x1E0912C VA: 0x1E0912C
	public bool get_IsDrawShadow() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B7EC Offset: 0xD3B7EC VA: 0xD3B7EC
	// RVA: 0x1E09134 Offset: 0x1E09134 VA: 0x1E09134
	private void set_IsDrawShadow(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B7FC Offset: 0xD3B7FC VA: 0xD3B7FC
	// RVA: 0x1E09140 Offset: 0x1E09140 VA: 0x1E09140
	public float get_Alpha() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B80C Offset: 0xD3B80C VA: 0xD3B80C
	// RVA: 0x1E09148 Offset: 0x1E09148 VA: 0x1E09148
	private void set_Alpha(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B81C Offset: 0xD3B81C VA: 0xD3B81C
	// RVA: 0x1E09150 Offset: 0x1E09150 VA: 0x1E09150
	public bool get_IsActive() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B82C Offset: 0xD3B82C VA: 0xD3B82C
	// RVA: 0x1E09158 Offset: 0x1E09158 VA: 0x1E09158
	private void set_IsActive(bool value) { }

	// RVA: 0x1E09164 Offset: 0x1E09164 VA: 0x1E09164
	public void UpdateByBuffs(BattleBuffData.BuffData[] buffDataArray) { }

	// RVA: 0x1E092B8 Offset: 0x1E092B8 VA: 0x1E092B8
	public void ResetProperties() { }
}

// Namespace: 
public class BattleActorControl : BaseMonoBehaviour // TypeDefIndex: 9208
{
	// Fields
	public GameObject actorObject; // 0x18
	public BattleFBXComponent fbxcomponent; // 0x20
	public PlayMakerFSM[] motionFSM; // 0x28
	private Transform shadowObj; // 0x30
	private GameObject specialShadowObj; // 0x38
	private Transform nodeDamage; // 0x40
	private Transform nodeText; // 0x48
	public const string BUFF_EFFECT_NODE_NAME = "en_buff01";
	[CompilerGeneratedAttribute] // RVA: 0xCD2D30 Offset: 0xCD2D30 VA: 0xCD2D30
	[DebuggerBrowsableAttribute] // RVA: 0xCD2D30 Offset: 0xCD2D30 VA: 0xCD2D30
	private string <BuffEffectNodeName>k__BackingField; // 0x50
	private MaterialPropertyBlock mpb; // 0x58
	private Texture2D currentShadowTexure; // 0x60
	private Color currentShadowColor; // 0x68
	private static Dictionary<int, Vector3[]> ShadowTransform; // 0x0
	private static Dictionary<int, Vector3[]> specialShadowTransform; // 0x8
	public BattlePerformance performance; // 0x78
	private Vector3 headupVec; // 0x80
	private GameObject checkScaleNode; // 0x90
	private ParticleDisconnector particleDisconnectorObj; // 0x98
	private Vector3 criteriaPos; // 0xA0
	private GameObject targetObject; // 0xB0
	private GameObject myStage; // 0xB8
	private GameObject enemyStage; // 0xC0
	private string endmotionevent; // 0xC8
	private GameObject endmotionCallObject; // 0xD0
	private string endmotionCallMethod; // 0xD8
	private string actorside; // 0xE0
	private BattleActorControl.DIR dir; // 0xE8
	private GameObject shadowEffectObject; // 0xF0
	private Dictionary<int, GameObject> auraList; // 0xF8
	[CompilerGeneratedAttribute] // RVA: 0xCD2D6C Offset: 0xCD2D6C VA: 0xCD2D6C
	[DebuggerBrowsableAttribute] // RVA: 0xCD2D6C Offset: 0xCD2D6C VA: 0xCD2D6C
	private int <currentPriority>k__BackingField; // 0x100
	private float backupFov; // 0x104
	private Action noblePhantasmCallback; // 0x108
	private BattleActionData.ShiftServant myShiftData; // 0x110
	public float actorScale; // 0x118
	private static readonly float defaultHeight; // 0x10
	private Voice.BATTLE prevSkillVoiceType; // 0x11C
	private BattleLogData battleLog; // 0x120
	private const float deadEffectDefaultWaitTime = 1.3;
	private const float deadEffectWaitTimeForShadowServant = 0.99999994;
	private Dictionary<int, GameObject> buffLoopEffectDict; // 0x128
	private List<int> reservedEffectBuffEffectIdList; // 0x130
	private ChangeBattlePhaseOverwriteAnimation overwriteAnim; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xCD2DA8 Offset: 0xCD2DA8 VA: 0xCD2DA8
	[DebuggerBrowsableAttribute] // RVA: 0xCD2DA8 Offset: 0xCD2DA8 VA: 0xCD2DA8
	private string <PlayedOriginalAnimName>k__BackingField; // 0x140
	public bool isFirstSaveBeforePlayAnim; // 0x148
	public bool isPlayingNoblePhantasm; // 0x149
	private TranslucentActorVisualInfo translucentActorVisualInfo; // 0x150
	private List<BattleActorControl.ExtraLoadedVoiceArgs> extraLoadedVoiceArgsList; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xCD2DE4 Offset: 0xCD2DE4 VA: 0xCD2DE4
	[DebuggerBrowsableAttribute] // RVA: 0xCD2DE4 Offset: 0xCD2DE4 VA: 0xCD2DE4
	private List<int> <delayEndSequenceIdListFromMotion>k__BackingField; // 0x160
	private BattleActionData actiondata; // 0x168
	private Hashtable EventList; // 0x170
	private Hashtable CompleteList; // 0x178
	private float scale; // 0x180
	private BattleServantData battleSvtData; // 0x188
	public int uniqueID; // 0x190
	protected List<SkinnedMeshRenderer> rendererArrayList; // 0x198
	private bool isEnemy; // 0x1A0
	public int actindex; // 0x1A4
	private bool stepFlg; // 0x1A8
	[CompilerGeneratedAttribute] // RVA: 0xCD2E20 Offset: 0xCD2E20 VA: 0xCD2E20
	[DebuggerBrowsableAttribute] // RVA: 0xCD2E20 Offset: 0xCD2E20 VA: 0xCD2E20
	private bool <IsStepInBattle>k__BackingField; // 0x1A9
	private BattleActorControl.ActorMotionActiveCheck _checkMotion; // 0x1B0
	private float animetimescale; // 0x1B8
	private float resumetimescale; // 0x1BC
	protected float ShakeTime; // 0x1C0
	protected float ShakeTargetTime; // 0x1C4
	protected Vector3 ShakeRange; // 0x1C8
	protected bool Shaking; // 0x1D4
	[CompilerGeneratedAttribute] // RVA: 0xCD2E5C Offset: 0xCD2E5C VA: 0xCD2E5C
	private static Predicate<SkinnedMeshRenderer> <>f__am$cache0; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD2E6C Offset: 0xCD2E6C VA: 0xCD2E6C
	private static Func<BattleActionData.MoveToSubMember, bool> <>f__am$cache1; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD2E7C Offset: 0xCD2E7C VA: 0xCD2E7C
	private static Func<KeyValuePair<int, GameObject>, bool> <>f__am$cache2; // 0x28

	// Properties
	public Transform ShadowObj { get; }
	public GameObject SpecialShadowObj { get; }
	public Transform NodeDamage { get; }
	public Transform NodeText { get; }
	public string BuffEffectNodeName { get; set; }
	public BaseMotionSkip MotionSkip { get; }
	public int currentPriority { get; set; }
	public BattleActionData ActionData { get; }
	public Voice.BATTLE PrevSkillVoiceType { get; set; }
	public string PlayedOriginalAnimName { get; set; }
	public List<int> delayEndSequenceIdListFromMotion { get; set; }
	public BattleServantData BattleSvtData { get; }
	public int Level { get; }
	public int LimitImageIndex { get; }
	public bool IsEnemy { get; }
	public bool IsStepInBattle { get; set; }
	public BattleActorControl.ActorMotionActiveCheck CheckMotion { get; }

	// Methods

	// RVA: 0x1E95F64 Offset: 0x1E95F64 VA: 0x1E95F64
	public void .ctor() { }

	// RVA: 0x1E960C8 Offset: 0x1E960C8 VA: 0x1E960C8
	public Transform get_ShadowObj() { }

	// RVA: 0x1E960D0 Offset: 0x1E960D0 VA: 0x1E960D0
	public GameObject get_SpecialShadowObj() { }

	// RVA: 0x1E960D8 Offset: 0x1E960D8 VA: 0x1E960D8
	public Transform get_NodeDamage() { }

	// RVA: 0x1E960E0 Offset: 0x1E960E0 VA: 0x1E960E0
	public Transform get_NodeText() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B83C Offset: 0xD3B83C VA: 0xD3B83C
	// RVA: 0x1E960E8 Offset: 0x1E960E8 VA: 0x1E960E8
	private void set_BuffEffectNodeName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B84C Offset: 0xD3B84C VA: 0xD3B84C
	// RVA: 0x1E960F0 Offset: 0x1E960F0 VA: 0x1E960F0
	public string get_BuffEffectNodeName() { }

	// RVA: 0x1E960F8 Offset: 0x1E960F8 VA: 0x1E960F8
	public BaseMotionSkip get_MotionSkip() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B85C Offset: 0xD3B85C VA: 0xD3B85C
	// RVA: 0x1E96128 Offset: 0x1E96128 VA: 0x1E96128
	public int get_currentPriority() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B86C Offset: 0xD3B86C VA: 0xD3B86C
	// RVA: 0x1E96130 Offset: 0x1E96130 VA: 0x1E96130
	private void set_currentPriority(int value) { }

	// RVA: 0x1E96138 Offset: 0x1E96138 VA: 0x1E96138
	public BattleActionData get_ActionData() { }

	// RVA: 0x1E96140 Offset: 0x1E96140 VA: 0x1E96140
	public Voice.BATTLE get_PrevSkillVoiceType() { }

	// RVA: 0x1E96148 Offset: 0x1E96148 VA: 0x1E96148
	public void set_PrevSkillVoiceType(Voice.BATTLE value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B87C Offset: 0xD3B87C VA: 0xD3B87C
	// RVA: 0x1E96150 Offset: 0x1E96150 VA: 0x1E96150
	private void set_PlayedOriginalAnimName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B88C Offset: 0xD3B88C VA: 0xD3B88C
	// RVA: 0x1E96158 Offset: 0x1E96158 VA: 0x1E96158
	public string get_PlayedOriginalAnimName() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B89C Offset: 0xD3B89C VA: 0xD3B89C
	// RVA: 0x1E96160 Offset: 0x1E96160 VA: 0x1E96160
	public List<int> get_delayEndSequenceIdListFromMotion() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B8AC Offset: 0xD3B8AC VA: 0xD3B8AC
	// RVA: 0x1E96168 Offset: 0x1E96168 VA: 0x1E96168
	private void set_delayEndSequenceIdListFromMotion(List<int> value) { }

	// RVA: 0x1E96170 Offset: 0x1E96170 VA: 0x1E96170
	private void printLog(string str) { }

	// RVA: 0x1E96174 Offset: 0x1E96174 VA: 0x1E96174
	public string[] getlog() { }

	// RVA: 0x1E961F0 Offset: 0x1E961F0 VA: 0x1E961F0
	public void Start() { }

	// RVA: 0x1E9641C Offset: 0x1E9641C VA: 0x1E9641C
	public void OnDestroy() { }

	// RVA: 0x1E96844 Offset: 0x1E96844 VA: 0x1E96844
	public void Awake() { }

	// RVA: 0x1E968A4 Offset: 0x1E968A4 VA: 0x1E968A4
	public BattleServantData get_BattleSvtData() { }

	// RVA: 0x1E968AC Offset: 0x1E968AC VA: 0x1E968AC
	public void loadEvents() { }

	// RVA: 0x1E968C0 Offset: 0x1E968C0 VA: 0x1E968C0
	public void setID(int id) { }

	// RVA: 0x1E968C8 Offset: 0x1E968C8 VA: 0x1E968C8
	public bool checkID(int id) { }

	// RVA: 0x1E968D8 Offset: 0x1E968D8 VA: 0x1E968D8
	public bool checkScriptValue(string key, int value) { }

	// RVA: 0x1E96920 Offset: 0x1E96920 VA: 0x1E96920
	public int getScriptValue(string key) { }

	// RVA: 0x1E96958 Offset: 0x1E96958 VA: 0x1E96958
	public int getServantId() { }

	// RVA: 0x1E96988 Offset: 0x1E96988 VA: 0x1E96988
	public int getOverwriteSvtVoiceId() { }

	// RVA: 0x1E969B4 Offset: 0x1E969B4 VA: 0x1E969B4
	public int getActorSvtId() { }

	// RVA: 0x1E969E4 Offset: 0x1E969E4 VA: 0x1E969E4
	public string getStrParam() { }

	// RVA: 0x1E96A14 Offset: 0x1E96A14 VA: 0x1E96A14
	public int getLimitCount() { }

	// RVA: 0x1E96A44 Offset: 0x1E96A44 VA: 0x1E96A44
	public int getOriginLimitCount() { }

	// RVA: 0x1E96A74 Offset: 0x1E96A74 VA: 0x1E96A74
	public int getWeaponGroup(bool isEffect = False) { }

	// RVA: 0x1E96AAC Offset: 0x1E96AAC VA: 0x1E96AAC
	public int getEffectFolder() { }

	// RVA: 0x1E96ADC Offset: 0x1E96ADC VA: 0x1E96ADC
	public int getWeaponScale() { }

	// RVA: 0x1E96B0C Offset: 0x1E96B0C VA: 0x1E96B0C
	public Color getWeaponColor() { }

	// RVA: 0x1E96B3C Offset: 0x1E96B3C VA: 0x1E96B3C
	public int get_Level() { }

	// RVA: 0x1E96B68 Offset: 0x1E96B68 VA: 0x1E96B68
	public int get_LimitImageIndex() { }

	// RVA: 0x1E96BF4 Offset: 0x1E96BF4 VA: 0x1E96BF4
	public int getNobleChainCount() { }

	// RVA: 0x1E96C0C Offset: 0x1E96C0C VA: 0x1E96C0C
	public int getWaveCount() { }

	// RVA: 0x1E96CB0 Offset: 0x1E96CB0 VA: 0x1E96CB0
	public GameObject getActorEffect(string name) { }

	// RVA: 0x1E96D7C Offset: 0x1E96D7C VA: 0x1E96D7C
	public GameObject getActorEffectFromActor(string name) { }

	// RVA: 0x1E96E64 Offset: 0x1E96E64 VA: 0x1E96E64
	public void setTypePlayer() { }

	// RVA: 0x1E96E6C Offset: 0x1E96E6C VA: 0x1E96E6C
	public void setTypeEnemy() { }

	// RVA: 0x1E96E78 Offset: 0x1E96E78 VA: 0x1E96E78
	public bool get_IsEnemy() { }

	// RVA: 0x1E96E80 Offset: 0x1E96E80 VA: 0x1E96E80
	public void setServantData(BattleServantData svtdata) { }

	// RVA: 0x1E985FC Offset: 0x1E985FC VA: 0x1E985FC
	public void setAddAura(BattleServantData svtdata) { }

	// RVA: 0x1E97ED4 Offset: 0x1E97ED4 VA: 0x1E97ED4
	public void UpdateShadow() { }

	// RVA: 0x1E98464 Offset: 0x1E98464 VA: 0x1E98464
	public GameObject getHeadUpObject() { }

	// RVA: 0x1E9846C Offset: 0x1E9846C VA: 0x1E9846C
	public Vector3 getHeadUpY() { }

	// RVA: 0x1E9AE9C Offset: 0x1E9AE9C VA: 0x1E9AE9C
	public Vector3 getBaseScale() { }

	// RVA: 0x1E9AF0C Offset: 0x1E9AF0C VA: 0x1E9AF0C
	public void setPerformance(BattlePerformance perf) { }

	// RVA: 0x1E9AF14 Offset: 0x1E9AF14 VA: 0x1E9AF14
	public void setCamera(Camera camera) { }

	// RVA: 0x1E9AFA4 Offset: 0x1E9AFA4 VA: 0x1E9AFA4
	public void setMotionlist(string side, GameObject camera, GameObject camerafsm) { }

	// RVA: 0x1E9C024 Offset: 0x1E9C024 VA: 0x1E9C024
	public void setReloadWeaponMotion(bool flg) { }

	// RVA: 0x1E9CD68 Offset: 0x1E9CD68 VA: 0x1E9CD68
	public void setMotionListForDemo(string side, GameObject camera, GameObject camerafsm, GameObject commonMotionPrefab) { }

	// RVA: 0x1E9BDC8 Offset: 0x1E9BDC8 VA: 0x1E9BDC8
	private void setLimitedPeriod() { }

	// RVA: 0x1E9D914 Offset: 0x1E9D914 VA: 0x1E9D914
	public void setActionData(BattleActionData actiondata) { }

	// RVA: 0x1E9DD2C Offset: 0x1E9DD2C VA: 0x1E9DD2C
	public void setTargetObject(GameObject obj) { }

	// RVA: 0x1E9DEB0 Offset: 0x1E9DEB0 VA: 0x1E9DEB0
	public void setSummonMasterObject(GameObject obj) { }

	// RVA: 0x1E9E130 Offset: 0x1E9E130 VA: 0x1E9E130
	public void resetSummonEndFlag() { }

	// RVA: 0x1E9E264 Offset: 0x1E9E264 VA: 0x1E9E264
	public bool isSummonEndFlag() { }

	// RVA: 0x1E9E3A4 Offset: 0x1E9E3A4 VA: 0x1E9E3A4
	public void sendEventFSM(Hashtable table) { }

	// RVA: 0x1E9E7DC Offset: 0x1E9E7DC VA: 0x1E9E7DC
	public bool checkGEvent(string name) { }

	// RVA: 0x1E9E928 Offset: 0x1E9E928 VA: 0x1E9E928
	public bool checkMotionEvent(string name) { }

	// RVA: 0x1E9EA68 Offset: 0x1E9EA68 VA: 0x1E9EA68
	public bool ExistMotionEvent(string eventName) { }

	// RVA: 0x1E9EB5C Offset: 0x1E9EB5C VA: 0x1E9EB5C
	public void setStepFlg(bool flg) { }

	// RVA: 0x1E9EB68 Offset: 0x1E9EB68 VA: 0x1E9EB68
	public bool checkStepFlg() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B8BC Offset: 0xD3B8BC VA: 0xD3B8BC
	// RVA: 0x1E9EB70 Offset: 0x1E9EB70 VA: 0x1E9EB70
	public bool get_IsStepInBattle() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B8CC Offset: 0xD3B8CC VA: 0xD3B8CC
	// RVA: 0x1E9EB78 Offset: 0x1E9EB78 VA: 0x1E9EB78
	private void set_IsStepInBattle(bool value) { }

	// RVA: 0x1E9EB84 Offset: 0x1E9EB84 VA: 0x1E9EB84
	public void SetStepInBattle(bool isInBattle) { }

	// RVA: 0x1E9EB90 Offset: 0x1E9EB90 VA: 0x1E9EB90
	public bool checkStepIn() { }

	// RVA: 0x1E9EC30 Offset: 0x1E9EC30 VA: 0x1E9EC30
	public void sendMotionEventFSM(string name, bool isCallFinishInterrupt = False) { }

	// RVA: 0x1E9EC84 Offset: 0x1E9EC84 VA: 0x1E9EC84
	public void sendMotionEventFSMCommon(string name) { }

	// RVA: 0x1E9E494 Offset: 0x1E9E494 VA: 0x1E9E494
	public void sendEventFSM(string name, bool isCallFinishInterrupt = False) { }

	// RVA: 0x1E9EDB0 Offset: 0x1E9EDB0 VA: 0x1E9EDB0
	public GameObject playSideEffect(string effectname, Vector3 vec3, bool sideflip) { }

	// RVA: 0x1E9F1A8 Offset: 0x1E9F1A8 VA: 0x1E9F1A8
	public Transform getFieldRoot() { }

	// RVA: 0x1E9F1D4 Offset: 0x1E9F1D4 VA: 0x1E9F1D4
	public void setCriteriaPos(Transform tr) { }

	// RVA: 0x1E9F3AC Offset: 0x1E9F3AC VA: 0x1E9F3AC
	public void setDirLeft() { }

	// RVA: 0x1E9F500 Offset: 0x1E9F500 VA: 0x1E9F500
	public void setDirRight() { }

	// RVA: 0x1E9F650 Offset: 0x1E9F650 VA: 0x1E9F650
	public void setDir() { }

	// RVA: 0x1E9F87C Offset: 0x1E9F87C VA: 0x1E9F87C
	public Vector3 getTargetObjectVec(BattleActorControl.POS pos) { }

	// RVA: 0x1E9FC7C Offset: 0x1E9FC7C VA: 0x1E9FC7C
	public void setInitActionBattle() { }

	// RVA: 0x1E9FC84 Offset: 0x1E9FC84 VA: 0x1E9FC84
	public Vector3 getCriterialPos() { }

	// RVA: 0x1E9EC94 Offset: 0x1E9EC94 VA: 0x1E9EC94
	public BattleActorControl.ActorMotionActiveCheck get_CheckMotion() { }

	// RVA: 0x1E9FD50 Offset: 0x1E9FD50 VA: 0x1E9FD50
	public bool checkPrevAttackMe() { }

	// RVA: 0x1E9FD70 Offset: 0x1E9FD70 VA: 0x1E9FD70
	public bool checkNextAttackMe() { }

	// RVA: 0x1E9FD90 Offset: 0x1E9FD90 VA: 0x1E9FD90
	public bool IsAllSucceededMovingToSubMember() { }

	// RVA: 0x1E9FEB4 Offset: 0x1E9FEB4 VA: 0x1E9FEB4
	public bool isThree() { }

	// RVA: 0x1E9FEDC Offset: 0x1E9FEDC VA: 0x1E9FEDC
	public bool isFlash() { }

	// RVA: 0x1E9FF0C Offset: 0x1E9FF0C VA: 0x1E9FF0C
	public bool isPairFlash() { }

	// RVA: 0x1E9FF34 Offset: 0x1E9FF34 VA: 0x1E9FF34
	public bool isThreeFlash() { }

	// RVA: 0x1E9FF5C Offset: 0x1E9FF5C VA: 0x1E9FF5C
	public void sendDamageEvent() { }

	// RVA: 0x1EA0050 Offset: 0x1EA0050 VA: 0x1EA0050
	public Transform getDropTransform() { }

	// RVA: 0x1EA0084 Offset: 0x1EA0084 VA: 0x1EA0084
	public void playMotion(string name) { }

	// RVA: 0x1EA008C Offset: 0x1EA008C VA: 0x1EA008C
	public void playNoActionDataMotion(string name, float afterWaitTime) { }

	// RVA: 0x1EA00E4 Offset: 0x1EA00E4 VA: 0x1EA00E4
	public void playBattleActionData(BattleActionData badata) { }

	// RVA: 0x1EA0264 Offset: 0x1EA0264 VA: 0x1EA0264
	protected void playBattleActionDataLocal(BattleActionData badata) { }

	// RVA: 0x1EA08B4 Offset: 0x1EA08B4 VA: 0x1EA08B4
	public void finishMotion(string finishFsmName) { }

	// RVA: 0x1EA0C00 Offset: 0x1EA0C00 VA: 0x1EA0C00
	protected void finishMotion() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B8DC Offset: 0xD3B8DC VA: 0xD3B8DC
	// RVA: 0x1EA0AB0 Offset: 0x1EA0AB0 VA: 0x1EA0AB0
	private IEnumerator coroutinePostCallBack(BattleCallBackBase callBack, float waitTime) { }

	// RVA: 0x1EA0CD4 Offset: 0x1EA0CD4 VA: 0x1EA0CD4
	public void endFinishMotion() { }

	// RVA: 0x1EA0F3C Offset: 0x1EA0F3C VA: 0x1EA0F3C
	public void invisibleSvtModel(bool hideFlg = True) { }

	// RVA: 0x1EA108C Offset: 0x1EA108C VA: 0x1EA108C
	public bool IsVisibleByTargetNodeScale() { }

	// RVA: 0x1EA0E68 Offset: 0x1EA0E68 VA: 0x1EA0E68
	public void updateBuffIcon(BattleActionData actionData) { }

	// RVA: 0x1EA1180 Offset: 0x1EA1180 VA: 0x1EA1180
	public bool checkVoice(Voice.BATTLE type, bool isNp = False) { }
