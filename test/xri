	// RVA: 0x1844B58 Offset: 0x1844B58 VA: 0x1844B58
	public BattleActionData createCommandSpell(BattleLogicTask task) { }

	// RVA: 0x1844E38 Offset: 0x1844E38 VA: 0x1844E38
	public bool checkConditions(BattleSkillInfoData skillInfo, out string text) { }

	// RVA: 0x18454E0 Offset: 0x18454E0 VA: 0x18454E0
	public BattleLogicTask[] getQuestBehaviorSkillTask() { }

	// RVA: 0x1845810 Offset: 0x1845810 VA: 0x1845810
	public BattleLogicTask[] getGimmickTask() { }

	// RVA: 0x1845AF0 Offset: 0x1845AF0 VA: 0x1845AF0
	private int GetHitGimmickSkillId(int[] rateArray) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44294 Offset: 0xC44294 VA: 0xC44294
private sealed class BattleLogicSkill.<checkConditions>c__AnonStorey0 // TypeDefIndex: 9180
{
	// Fields
	internal Dictionary<string, object> conditions; // 0x10

	// Methods

	// RVA: 0x18454D8 Offset: 0x18454D8 VA: 0x18454D8
	public void .ctor() { }

	// RVA: 0x1845C40 Offset: 0x1845C40 VA: 0x1845C40
	internal bool <>m__0(string key, int val) { }

	// RVA: 0x1845D34 Offset: 0x1845D34 VA: 0x1845D34
	internal bool <>m__1(string key, int val) { }

	// RVA: 0x1845E58 Offset: 0x1845E58 VA: 0x1845E58
	internal bool <>m__2(string key, double val) { }

	// RVA: 0x1845F58 Offset: 0x1845F58 VA: 0x1845F58
	internal bool <>m__3(string key, double val) { }
}

// Namespace: 
public class BattleLogicSpecial // TypeDefIndex: 9181
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicTarget logictarget; // 0x20
	public BattleLogicFunction logicfunction; // 0x28

	// Methods

	// RVA: 0x1846080 Offset: 0x1846080 VA: 0x1846080
	public void .ctor() { }

	// RVA: 0x1846088 Offset: 0x1846088 VA: 0x1846088
	public BattleLogicTask[] taskTresureDvc(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1846314 Offset: 0x1846314 VA: 0x1846314
	public BattleLogicTask[] taskTresureDvcAlways(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1846628 Offset: 0x1846628 VA: 0x1846628
	public BattleLogicTask[] taskEnemyTresureDvc(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1846964 Offset: 0x1846964 VA: 0x1846964
	public BattleLogicTask[] taskEnemyTresureDvcAlways(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1846CA8 Offset: 0x1846CA8 VA: 0x1846CA8
	public BattleActionData createSpecialData(BattleLogicTask task) { }

	// RVA: 0x1847A4C Offset: 0x1847A4C VA: 0x1847A4C
	public BattleActionData createCounterOverwriteSpecialData(BattleLogicTask task) { }

	// RVA: 0x1846D74 Offset: 0x1846D74 VA: 0x1846D74
	public BattleActionData createSpecialDataCommonFunction(BattleLogicTask task, bool isCounterOverwriteTreasureDevice = False) { }
}

// Namespace: 
public class BattleLogicTarget // TypeDefIndex: 9182
{
	// Fields
	public BattleData data; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC65AA0 Offset: 0xC65AA0 VA: 0xC65AA0
	private static Predicate<BattleServantData> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1847C3C Offset: 0x1847C3C VA: 0x1847C3C
	public void .ctor() { }

	// RVA: 0x1847C44 Offset: 0x1847C44 VA: 0x1847C44
	public void setInit(BattleData data) { }

	// RVA: 0x1847B30 Offset: 0x1847B30 VA: 0x1847B30
	public int getTargetBase(int[] targetlist, bool isResurrectable = False) { }

	// RVA: 0x1847C4C Offset: 0x1847C4C VA: 0x1847C4C
	public int getTargetRandom(int[] targetlist, bool isResurrectable = False) { }

	// RVA: 0x1847CBC Offset: 0x1847CBC VA: 0x1847CBC
	public int getTargetHighHp(int[] targetlist) { }

	// RVA: 0x1847D60 Offset: 0x1847D60 VA: 0x1847D60
	public int getTargetLowHp(int[] targetlist) { }

	// RVA: 0x1847E04 Offset: 0x1847E04 VA: 0x1847E04
	public int getTargetNpTurnLower(int[] targetlist) { }

	// RVA: 0x1847EA8 Offset: 0x1847EA8 VA: 0x1847EA8
	public int getTargetNpGaugeHeighter(int[] targetlist) { }

	// RVA: 0x1847F4C Offset: 0x1847F4C VA: 0x1847F4C
	public int getRevenge(int actId, int[] targetlist) { }

	// RVA: 0x1848038 Offset: 0x1848038 VA: 0x1848038
	public int getTargetActiveIndividualities(int[] indv, int[] targetlist) { }

	// RVA: 0x18483B0 Offset: 0x18483B0 VA: 0x18483B0
	public int getTargetActiveBuff(int[] ids, int[] targetlist) { }

	// RVA: 0x18484A4 Offset: 0x18484A4 VA: 0x18484A4
	public int getTargetPosition(int position, int[] targetlist) { }

	// RVA: 0x183FE64 Offset: 0x183FE64 VA: 0x183FE64
	public int getTargetAiAct(AiAct.TARGET target, int actId, int[] individuality, int[] targetlist, bool isCheckHate = True, bool isResurrectable = False, int[] addIndiv) { }

	// RVA: 0x18487F8 Offset: 0x18487F8 VA: 0x18487F8
	private int[] narrowDownIndividuality(int[] list, int[] targetindividuality, bool isResurrectable = False, bool isCheckBuff = True) { }

	// RVA: 0x18485CC Offset: 0x18485CC VA: 0x18485CC
	private int[] narrowDownHate(int[] list, BattleServantData atkSvt, bool isResurrectable = False, int[] addIndiv) { }

	// RVA: 0x1836FC4 Offset: 0x1836FC4 VA: 0x1836FC4
	public BattleServantData getTargetBattleServantData(BattleLogicTask task) { }

	// RVA: 0x18441F8 Offset: 0x18441F8 VA: 0x18441F8
	public int getGlobalTargetId(int uniqueId, bool isMaster = False, int[] addIndiv) { }

	// RVA: 0x1848C30 Offset: 0x1848C30 VA: 0x1848C30
	public void updateEnemyTarget(int[] targetIdList) { }

	// RVA: 0x1848E48 Offset: 0x1848E48 VA: 0x1848E48
	public void updateGlobalTarget() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCDF98 Offset: 0xCCDF98 VA: 0xCCDF98
	// RVA: 0x1848F58 Offset: 0x1848F58 VA: 0x1848F58
	private int <getTargetHighHp>m__0(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCDFA8 Offset: 0xCCDFA8 VA: 0xCCDFA8
	// RVA: 0x1849008 Offset: 0x1849008 VA: 0x1849008
	private int <getTargetLowHp>m__1(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCDFB8 Offset: 0xCCDFB8 VA: 0xCCDFB8
	// RVA: 0x18490BC Offset: 0x18490BC VA: 0x18490BC
	private int <getTargetNpTurnLower>m__2(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCDFC8 Offset: 0xCCDFC8 VA: 0xCCDFC8
	// RVA: 0x18491DC Offset: 0x18491DC VA: 0x18491DC
	private int <getTargetNpGaugeHeighter>m__3(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCDFD8 Offset: 0xCCDFD8 VA: 0xCCDFD8
	// RVA: 0x1849284 Offset: 0x1849284 VA: 0x1849284
	private static bool <getTargetBattleServantData>m__4(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCDFE8 Offset: 0xCCDFE8 VA: 0xCCDFE8
	// RVA: 0x18492AC Offset: 0x18492AC VA: 0x18492AC
	private int <getTargetBattleServantData>m__5(int a, int b) { }
}

// Namespace: 
public enum BattleLogicTarget.Position // TypeDefIndex: 9183
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTarget.Position FRONT = 0;
	public const BattleLogicTarget.Position CENTER = 1;
	public const BattleLogicTarget.Position BACK = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC442A4 Offset: 0xC442A4 VA: 0xC442A4
private sealed class BattleLogicTarget.<getTargetActiveIndividualities>c__AnonStorey0 // TypeDefIndex: 9184
{
	// Fields
	internal int[] indv; // 0x10
	internal Dictionary<int, int> indNum; // 0x18
	internal BattleLogicTarget $this; // 0x20

	// Methods

	// RVA: 0x18483A8 Offset: 0x18483A8 VA: 0x18483A8
	public void .ctor() { }

	// RVA: 0x1849414 Offset: 0x1849414 VA: 0x1849414
	internal int <>m__0(int x, int y) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC442B4 Offset: 0xC442B4 VA: 0xC442B4
private sealed class BattleLogicTarget.<getTargetActiveBuff>c__AnonStorey1 // TypeDefIndex: 9185
{
	// Fields
	internal int[] ids; // 0x10
	internal BattleLogicTarget $this; // 0x18

	// Methods

	// RVA: 0x184849C Offset: 0x184849C VA: 0x184849C
	public void .ctor() { }

	// RVA: 0x184933C Offset: 0x184933C VA: 0x184933C
	internal int <>m__0(int x, int y) { }
}

// Namespace: 
public class BattleLogicTask // TypeDefIndex: 9186
{
	// Fields
	public BattleLogicTask.ACTORTYPE actortype; // 0x10
	public int[] actorIdlist; // 0x18
	public int[] targetIdlist; // 0x20
	public int[] ptTarget; // 0x28
	public BattleLogicTask.ACTIONTYPE actiontype; // 0x30
	public BattleCommandData command; // 0x38
	public BattleComboData combo; // 0x40
	public BattleSkillInfoData skillInfo; // 0x48
	public bool flgCheckUseSKill; // 0x50
	public bool checkAlive; // 0x51
	public int treasureDvcId; // 0x54
	public int tresureDvcLv; // 0x58
	public int ordertype; // 0x5C
	public bool grandoderflg; // 0x60
	public string motionName; // 0x68
	public GameObject targetObject; // 0x70
	public int status; // 0x78
	public float systemTime; // 0x7C
	public string endCameraName; // 0x80
	private int[] gimmickIndexArray; // 0x88
	public BattleLogicTask.MESSAGE_TYPE messageType; // 0x90
	public string motionMessage; // 0x98
	public bool isForcedSpeedOne; // 0xA0
	public bool checkRevengeId; // 0xA1
	public bool isCounter; // 0xA2
	public int counterOc; // 0xA4
	public bool isCanCounterSkill; // 0xA8
	public bool isSkipStep; // 0xA9

	// Methods

	// RVA: 0x1836814 Offset: 0x1836814 VA: 0x1836814
	public void .ctor() { }

	// RVA: 0x1836ECC Offset: 0x1836ECC VA: 0x1836ECC
	public void setActor(BattleLogicTask.ACTORTYPE type, int uniqueID) { }

	// RVA: 0x1849578 Offset: 0x1849578 VA: 0x1849578
	public void setActor(BattleLogicTask.ACTORTYPE type, int[] uniqueIDList) { }

	// RVA: 0x183915C Offset: 0x183915C VA: 0x183915C
	public int getActorId() { }

	// RVA: 0x1849584 Offset: 0x1849584 VA: 0x1849584
	public bool checkActorId(BattleLogicTask task) { }

	// RVA: 0x1837E7C Offset: 0x1837E7C VA: 0x1837E7C
	public void setTarget(int targetId) { }

	// RVA: 0x184046C Offset: 0x184046C VA: 0x184046C
	public void setTarget(int[] targetIdlist) { }

	// RVA: 0x18398B8 Offset: 0x18398B8 VA: 0x18398B8
	public int[] getTargetlist() { }

	// RVA: 0x18391A8 Offset: 0x18391A8 VA: 0x18391A8
	public int getTarget() { }

	// RVA: 0x18495C4 Offset: 0x18495C4 VA: 0x18495C4
	public bool checkTargetId(BattleLogicTask task) { }

	// RVA: 0x1836F60 Offset: 0x1836F60 VA: 0x1836F60
	public void setActionCommand(BattleComboData combo, BattleCommandData command, int index) { }

	// RVA: 0x1849680 Offset: 0x1849680 VA: 0x1849680
	public bool isCheck(BattleLogicTask.ACTIONTYPE ckType) { }

	// RVA: 0x18377C8 Offset: 0x18377C8 VA: 0x18377C8
	public void setAddAttackCommand(BattleComboData combo, BattleCommandData command) { }

	// RVA: 0x1849690 Offset: 0x1849690 VA: 0x1849690
	public bool isCommandAction() { }

	// RVA: 0x18496A0 Offset: 0x18496A0 VA: 0x18496A0
	public bool isAddAttack() { }

	// RVA: 0x18391A0 Offset: 0x18391A0 VA: 0x18391A0
	public BattleCommandData getCommand() { }

	// RVA: 0x18496B0 Offset: 0x18496B0 VA: 0x18496B0
	public BattleComboData getCombo() { }

	// RVA: 0x1837F1C Offset: 0x1837F1C VA: 0x1837F1C
	public void setActionSkill(BattleSkillInfoData skillInfo, int[] targetlist, int[] ptTarget, bool checkAlive = False, bool checkRevengeId = False) { }

	// RVA: 0x18496B8 Offset: 0x18496B8 VA: 0x18496B8
	public bool isSKill() { }

	// RVA: 0x18443E8 Offset: 0x18443E8 VA: 0x18443E8
	public void setCommandSpell(int skillId, int[] targetlist, int[] ptTarget) { }

	// RVA: 0x18496C8 Offset: 0x18496C8 VA: 0x18496C8
	public bool isCommandSpell() { }

	// RVA: 0x1836FB4 Offset: 0x1836FB4 VA: 0x1836FB4
	public void setActionTreasureDvc(int treDvcId, int lv = 1) { }

	// RVA: 0x1837F08 Offset: 0x1837F08 VA: 0x1837F08
	public void setActionOverwriteTreasureDvc(int treDvcId, int lv = 1, int Oc = 1) { }

	// RVA: 0x18496D8 Offset: 0x18496D8 VA: 0x18496D8
	public bool isTreasureDvc() { }

	// RVA: 0x18496EC Offset: 0x18496EC VA: 0x18496EC
	public void setBackStep() { }

	// RVA: 0x18496F8 Offset: 0x18496F8 VA: 0x18496F8
	public bool isBackStep() { }

	// RVA: 0x1840990 Offset: 0x1840990 VA: 0x1840990
	public void setResurrection() { }

	// RVA: 0x1849708 Offset: 0x1849708 VA: 0x1849708
	public bool isResurrection() { }

	// RVA: 0x1841678 Offset: 0x1841678 VA: 0x1841678
	public void setDead() { }

	// RVA: 0x1849718 Offset: 0x1849718 VA: 0x1849718
	public bool isDead() { }

	// RVA: 0x1842F5C Offset: 0x1842F5C VA: 0x1842F5C
	public void setProcBuffDead() { }

	// RVA: 0x1849728 Offset: 0x1849728 VA: 0x1849728
	public bool isProcBuffDead() { }

	// RVA: 0x18429A0 Offset: 0x18429A0 VA: 0x18429A0
	public void setEnemyLogicDead() { }

	// RVA: 0x1849738 Offset: 0x1849738 VA: 0x1849738
	public bool isEnemyLogicDead() { }

	// RVA: 0x1843130 Offset: 0x1843130 VA: 0x1843130
	public void setEnemyLogicPlayerActionEnd() { }

	// RVA: 0x1849748 Offset: 0x1849748 VA: 0x1849748
	public bool isEnemyLogicPlayerActionEnd() { }

	// RVA: 0x1843304 Offset: 0x1843304 VA: 0x1843304
	public void setEnemyLogicStartTurn() { }

	// RVA: 0x1849758 Offset: 0x1849758 VA: 0x1849758
	public bool isEnemyLogicStartTurn() { }

	// RVA: 0x18434D8 Offset: 0x18434D8 VA: 0x18434D8
	public void setEnemyLogicEndTurn() { }

	// RVA: 0x1849768 Offset: 0x1849768 VA: 0x1849768
	public bool isEnemyLogicEndTurn() { }

	// RVA: 0x1849778 Offset: 0x1849778 VA: 0x1849778
	public bool isEnemyLogicWaveStart() { }

	// RVA: 0x1849788 Offset: 0x1849788 VA: 0x1849788
	public bool isEnemyLogicShiftAfter() { }

	// RVA: 0x1849798 Offset: 0x1849798 VA: 0x1849798
	public void setComboOrder(BattleCommand.TYPE type, bool grdflg) { }

	// RVA: 0x18497B0 Offset: 0x18497B0 VA: 0x18497B0
	public void setComboOrder(int type, bool grdflg) { }

	// RVA: 0x18497C8 Offset: 0x18497C8 VA: 0x18497C8
	public bool isComboOrder() { }

	// RVA: 0x18398C0 Offset: 0x18398C0 VA: 0x18398C0
	public bool isArts() { }

	// RVA: 0x18398D8 Offset: 0x18398D8 VA: 0x18398D8
	public bool isBuster() { }

	// RVA: 0x18398CC Offset: 0x18398CC VA: 0x18398CC
	public bool isQuick() { }

	// RVA: 0x18497D8 Offset: 0x18497D8 VA: 0x18497D8
	public bool isGrandOrder() { }

	// RVA: 0x1838098 Offset: 0x1838098 VA: 0x1838098
	public void setSystem() { }

	// RVA: 0x18497E0 Offset: 0x18497E0 VA: 0x18497E0
	public void setCamera() { }

	// RVA: 0x18497EC Offset: 0x18497EC VA: 0x18497EC
	public void setCheckEntryFunction() { }

	// RVA: 0x18497F8 Offset: 0x18497F8 VA: 0x18497F8
	public bool isCheckEntryFunction() { }

	// RVA: 0x183E088 Offset: 0x183E088 VA: 0x183E088
	public void setReservationSkill(BattleSkillInfoData inSkillInfo, bool inflgCheckUseSKill = True) { }

	// RVA: 0x1849808 Offset: 0x1849808 VA: 0x1849808
	public bool isReservationSkill() { }

	// RVA: 0x1839A60 Offset: 0x1839A60 VA: 0x1839A60
	public void setPlayMoiton(string motionName) { }

	// RVA: 0x1839A70 Offset: 0x1839A70 VA: 0x1839A70
	public void setTargetObject(GameObject obj) { }

	// RVA: 0x1849818 Offset: 0x1849818 VA: 0x1849818
	public bool isPlayMotion() { }

	// RVA: 0x1849828 Offset: 0x1849828 VA: 0x1849828
	public void setStartTurnPlayer() { }

	// RVA: 0x1849834 Offset: 0x1849834 VA: 0x1849834
	public void setStartTurnEnemy() { }

	// RVA: 0x1849840 Offset: 0x1849840 VA: 0x1849840
	public void setEndTurnPlayer() { }

	// RVA: 0x184984C Offset: 0x184984C VA: 0x184984C
	public bool isTurnEndPlayer() { }

	// RVA: 0x184985C Offset: 0x184985C VA: 0x184985C
	public void setEndTurnEnemy() { }

	// RVA: 0x1849868 Offset: 0x1849868 VA: 0x1849868
	public bool isTurnEndEnemy() { }

	// RVA: 0x183D8D8 Offset: 0x183D8D8 VA: 0x183D8D8
	public void setBuffAddPlayer() { }

	// RVA: 0x183D8E4 Offset: 0x183D8E4 VA: 0x183D8E4
	public void setBuffAddEnemy() { }

	// RVA: 0x1839EC4 Offset: 0x1839EC4 VA: 0x1839EC4
	public void setMessage(string message, BattleLogicTask.MESSAGE_TYPE type) { }

	// RVA: 0x1849878 Offset: 0x1849878 VA: 0x1849878
	public void setEnemyMasterCutIn(AiFieldEntity.EffectType cutInType) { }

	// RVA: 0x1849888 Offset: 0x1849888 VA: 0x1849888
	public void setLoadImmediateEntryServant() { }

	// RVA: 0x1845C38 Offset: 0x1845C38 VA: 0x1845C38
	public void SetGimmickIndexArray(int[] indexArray) { }

	// RVA: 0x18444D0 Offset: 0x18444D0 VA: 0x18444D0
	public int[] GetGimmickIndexArray() { }

	// RVA: 0x18444C0 Offset: 0x18444C0 VA: 0x18444C0
	public bool IsGimmick() { }

	// RVA: 0x1848A88 Offset: 0x1848A88 VA: 0x1848A88
	public bool IsTargetTypeEnemy() { }

	// RVA: 0x1848C1C Offset: 0x1848C1C VA: 0x1848C1C
	public int[] GetSkillAddIndiv() { }

	// RVA: 0x1844648 Offset: 0x1844648 VA: 0x1844648
	public BattleLogicTask CloneSkillTask(BattleSkillInfoData skillInfo, BattleLogicTask.ACTORTYPE actorType, bool targetSwapExec) { }

	// RVA: 0x1849894 Offset: 0x1849894 VA: 0x1849894 Slot: 4
	public virtual void InterruptAction(BattleActionData addAction, BattlePerformance perf) { }

	// RVA: 0x1849898 Offset: 0x1849898 VA: 0x1849898 Slot: 5
	public virtual BattleLogicTask[] MakeActionTask() { }
}

// Namespace: 
public enum BattleLogicTask.ACTORTYPE // TypeDefIndex: 9187
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTask.ACTORTYPE NONE = 0;
	public const BattleLogicTask.ACTORTYPE PLAYER_MASTER = 1;
	public const BattleLogicTask.ACTORTYPE PLAYER_SERVANT = 2;
	public const BattleLogicTask.ACTORTYPE ENEMY_SERVANT = 3;
	public const BattleLogicTask.ACTORTYPE COMMAND = 4;
	public const BattleLogicTask.ACTORTYPE FIELD = 5;
}

// Namespace: 
public enum BattleLogicTask.ACTIONTYPE // TypeDefIndex: 9188
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTask.ACTIONTYPE NONE = 0;
	public const BattleLogicTask.ACTIONTYPE COMMAND_BATTLE = 1;
	public const BattleLogicTask.ACTIONTYPE ADDATTACK = 2;
	public const BattleLogicTask.ACTIONTYPE SKILL = 3;
	public const BattleLogicTask.ACTIONTYPE TREASURE_DEVICE = 4;
	public const BattleLogicTask.ACTIONTYPE OVERWRITE_TREASURE_DEVICE = 5;
	public const BattleLogicTask.ACTIONTYPE BACKSTEP = 6;
	public const BattleLogicTask.ACTIONTYPE SYSTEM = 7;
	public const BattleLogicTask.ACTIONTYPE COMBO_ORDER = 8;
	public const BattleLogicTask.ACTIONTYPE COMMAND_SPELL = 9;
	public const BattleLogicTask.ACTIONTYPE PLAY_MOTION = 10;
	public const BattleLogicTask.ACTIONTYPE ENDTURN_PLAYER = 11;
	public const BattleLogicTask.ACTIONTYPE ENDTURN_ENEMY = 12;
	public const BattleLogicTask.ACTIONTYPE RESURRECTION = 13;
	public const BattleLogicTask.ACTIONTYPE DEAD = 14;
	public const BattleLogicTask.ACTIONTYPE PROC_BUFFDEAD = 15;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_ENEMYDEAD = 16;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_PLAYERACTIONEND = 17;
	public const BattleLogicTask.ACTIONTYPE BUFF_ADD_PLAYER = 18;
	public const BattleLogicTask.ACTIONTYPE BUFF_ADD_ENEMY = 19;
	public const BattleLogicTask.ACTIONTYPE STARTTURN_PLAYER = 20;
	public const BattleLogicTask.ACTIONTYPE STARTTURN_ENEMY = 21;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_STARTTURN = 22;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_ENDTURN = 23;
	public const BattleLogicTask.ACTIONTYPE FUNCTIONCHECK_ENTRY = 24;
	public const BattleLogicTask.ACTIONTYPE RESERVATION_SKILL = 25;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_WAVESTART = 26;
	public const BattleLogicTask.ACTIONTYPE CAMERA = 27;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_ENEMYTURN = 28;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_END_ENEMYTURN = 29;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_PLAYERTURN = 30;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_END_PLAYERTURN = 31;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_WAVE = 32;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_TURN = 33;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_REACT_DEAD = 34;
	public const BattleLogicTask.ACTIONTYPE BREAK_ON_BATTLE = 35;
	public const BattleLogicTask.ACTIONTYPE CHECK_SHIFTSERVANT = 36;
	public const BattleLogicTask.ACTIONTYPE SHIFT_SERVANT = 37;
	public const BattleLogicTask.ACTIONTYPE WITHDRAW = 38;
	public const BattleLogicTask.ACTIONTYPE SHIFT_SERVANT_AFTER = 39;
	public const BattleLogicTask.ACTIONTYPE CHANGE_APP = 40;
	public const BattleLogicTask.ACTIONTYPE ENEMY_MASTER_CUTIN = 41;
	public const BattleLogicTask.ACTIONTYPE LOAD_IMMEDIATE_ENTRY_SERVANT = 42;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_ENTRY_UNIT = 43;
	public const BattleLogicTask.ACTIONTYPE PLAY_FIELD_MOTION = 44;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_WAVE = 45;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_TURN = 46;
	public const BattleLogicTask.ACTIONTYPE NPCAI_ENTRY_UNIT = 47;
	public const BattleLogicTask.ACTIONTYPE NPCAI_REACT_DEAD = 48;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_PLAYERTURN = 49;
	public const BattleLogicTask.ACTIONTYPE NPCAI_END_PLAYERTURN = 50;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_ENEMYTURN = 51;
	public const BattleLogicTask.ACTIONTYPE NPCAI_END_ENEMYTURN = 52;
}

// Namespace: 
public enum BattleLogicTask.MESSAGE_TYPE // TypeDefIndex: 9189
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTask.MESSAGE_TYPE NONE = 0;
	public const BattleLogicTask.MESSAGE_TYPE SUB_ENTRY = 1;
}

// Namespace: 
public class AddActionBattleLogicTask : BattleLogicTask // TypeDefIndex: 9190
{
	// Fields
	protected BattleActionData[] interruptActions; // 0xB0

	// Methods

	// RVA: 0x106C180 Offset: 0x106C180 VA: 0x106C180
	public void .ctor() { }

	// RVA: 0x106C188 Offset: 0x106C188 VA: 0x106C188
	public AddActionBattleLogicTask SetInterruptAction(BattleActionData[] actions) { }

	// RVA: 0x106C190 Offset: 0x106C190 VA: 0x106C190 Slot: 4
	public override void InterruptAction(BattleActionData addAction, BattlePerformance perf) { }
}

// Namespace: 
public class PlayFieldMotionBattleLogicTask : BattleLogicTask // TypeDefIndex: 9191
{
	// Methods

	// RVA: 0x177E3E0 Offset: 0x177E3E0 VA: 0x177E3E0
	public void .ctor(string motionName) { }
}

// Namespace: 
public class BattleLogicUtilities // TypeDefIndex: 9192
{
	// Methods

	// RVA: 0xFBECC8 Offset: 0xFBECC8 VA: 0xFBECC8
	public void .ctor() { }

	// RVA: -1 Offset: -1
	public static T[] getShuffle<T>(T[] list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1ED30 Offset: 0x2B1ED30 VA: 0x2B1ED30
	|-BattleLogicUtilities.getShuffle<object>
	|
	|-RVA: 0x2B1EF38 Offset: 0x2B1EF38 VA: 0x2B1EF38
	|-BattleLogicUtilities.getShuffle<Vector3>
	*/
}

// Namespace: 
public class ServantWaveTurnEventOwner // TypeDefIndex: 9193
{
	// Fields
	private Dictionary<long, List<ServantWaveTurnEvent>> servantWaveTurnEventDict; // 0x10

	// Methods

	// RVA: 0x13230F8 Offset: 0x13230F8 VA: 0x13230F8
	public void .ctor() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCDFF8 Offset: 0xCCDFF8 VA: 0xCCDFF8
	// RVA: 0x1323168 Offset: 0x1323168 VA: 0x1323168
	public IEnumerable<ServantWaveTurnEvent> EventEnumerator(int wave, int turn) { }

	// RVA: 0x132322C Offset: 0x132322C VA: 0x132322C
	public void Add(ServantWaveTurnEvent ev) { }

	// RVA: 0x13232CC Offset: 0x13232CC VA: 0x13232CC
	private List<ServantWaveTurnEvent> GetOrCreateWaveTurnEventDictValue(int wave, int turn) { }

	// RVA: 0x13233C8 Offset: 0x13233C8 VA: 0x13233C8
	public static long CalcWaveTurnVal(int wave, int turn) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC442C4 Offset: 0xC442C4 VA: 0xC442C4
private sealed class ServantWaveTurnEventOwner.<EventEnumerator>c__Iterator0 : IEnumerable, IEnumerable<ServantWaveTurnEvent>, IEnumerator, IDisposable, IEnumerator<ServantWaveTurnEvent> // TypeDefIndex: 9194
{
	// Fields
	internal int wave; // 0x10
	internal int turn; // 0x14
	internal List.Enumerator<ServantWaveTurnEvent> $locvar0; // 0x18
	internal ServantWaveTurnEvent <ev>__1; // 0x30
	internal ServantWaveTurnEventOwner $this; // 0x38
	internal ServantWaveTurnEvent $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private ServantWaveTurnEvent System.Collections.Generic.IEnumerator<ServantWaveTurnEvent>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB700 Offset: 0xCDB700 VA: 0xCDB700
	// RVA: 0x1323224 Offset: 0x1323224 VA: 0x1323224
	public void .ctor() { }

	// RVA: 0x13233D8 Offset: 0x13233D8 VA: 0x13233D8 Slot: 7
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB710 Offset: 0xCDB710 VA: 0xCDB710
	// RVA: 0x1323578 Offset: 0x1323578 VA: 0x1323578 Slot: 10
	private ServantWaveTurnEvent System.Collections.Generic.IEnumerator<ServantWaveTurnEvent>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB720 Offset: 0xCDB720 VA: 0xCDB720
	// RVA: 0x1323580 Offset: 0x1323580 VA: 0x1323580 Slot: 6
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB730 Offset: 0xCDB730 VA: 0xCDB730
	// RVA: 0x1323588 Offset: 0x1323588 VA: 0x1323588 Slot: 9
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB740 Offset: 0xCDB740 VA: 0xCDB740
	// RVA: 0x1323600 Offset: 0x1323600 VA: 0x1323600 Slot: 8
	public void Reset() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB750 Offset: 0xCDB750 VA: 0xCDB750
	// RVA: 0x1323668 Offset: 0x1323668 VA: 0x1323668 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB760 Offset: 0xCDB760 VA: 0xCDB760
	// RVA: 0x132366C Offset: 0x132366C VA: 0x132366C Slot: 5
	private IEnumerator<ServantWaveTurnEvent> System.Collections.Generic.IEnumerable<ServantWaveTurnEvent>.GetEnumerator() { }
}

// Namespace: 
public abstract class ServantWaveTurnEvent // TypeDefIndex: 9195
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC65AB0 Offset: 0xC65AB0 VA: 0xC65AB0
	[DebuggerBrowsableAttribute] // RVA: 0xC65AB0 Offset: 0xC65AB0 VA: 0xC65AB0
	private int <Wave>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC65AEC Offset: 0xC65AEC VA: 0xC65AEC
	[DebuggerBrowsableAttribute] // RVA: 0xC65AEC Offset: 0xC65AEC VA: 0xC65AEC
	private int <Turn>k__BackingField; // 0x14

	// Properties
	public int Wave { get; set; }
	public int Turn { get; set; }

	// Methods

	// RVA: 0x132307C Offset: 0x132307C VA: 0x132307C
	public void .ctor(BattleData data) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE008 Offset: 0xCCE008 VA: 0xCCE008
	// RVA: 0x13230E8 Offset: 0x13230E8 VA: 0x13230E8
	public int get_Wave() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE018 Offset: 0xCCE018 VA: 0xCCE018
	// RVA: 0x13230D8 Offset: 0x13230D8 VA: 0x13230D8
	private void set_Wave(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE028 Offset: 0xCCE028 VA: 0xCCE028
	// RVA: 0x13230F0 Offset: 0x13230F0 VA: 0x13230F0
	public int get_Turn() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE038 Offset: 0xCCE038 VA: 0xCCE038
	// RVA: 0x13230E0 Offset: 0x13230E0 VA: 0x13230E0
	private void set_Turn(int value) { }
}

// Namespace: 
public class MoveToSubMemberWaveTurnEvent : ServantWaveTurnEvent // TypeDefIndex: 9196
{
	// Methods

	// RVA: 0x119826C Offset: 0x119826C VA: 0x119826C
	public void .ctor(BattleData data) { }
}

// Namespace: 
public class UseNoblePhantasmWaveTurnEvent : ServantWaveTurnEvent // TypeDefIndex: 9197
{
	// Methods

	// RVA: 0x1AFCAB0 Offset: 0x1AFCAB0 VA: 0x1AFCAB0
	public void .ctor(BattleData data) { }
}

// Namespace: 
public abstract class TargetAggregator // TypeDefIndex: 9198
{
	// Fields
	protected TargetAggregator.Args args; // 0x10
	private Nullable<bool> isOpponentTargetOnly; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC65B28 Offset: 0xC65B28 VA: 0xC65B28
	private static Func<BattleServantData, bool> <>f__am$cache0; // 0x0

	// Properties
	public int actorId { get; }
	public int targetId { get; }
	public int ptTargetId { get; }
	public BattleData battleData { get; }
	public BattleLogicTask.ACTORTYPE taskActorType { get; }
	public bool IsOpponentTargetOnly { get; }

	// Methods

	// RVA: 0x108B044 Offset: 0x108B044 VA: 0x108B044
	protected void .ctor() { }

	// RVA: 0x108B04C Offset: 0x108B04C VA: 0x108B04C
	public int get_actorId() { }

	// RVA: 0x108B080 Offset: 0x108B080 VA: 0x108B080
	public int get_targetId() { }

	// RVA: 0x108B0B4 Offset: 0x108B0B4 VA: 0x108B0B4
	public int get_ptTargetId() { }

	// RVA: 0x108B0E8 Offset: 0x108B0E8 VA: 0x108B0E8
	public BattleData get_battleData() { }

	// RVA: 0x108B11C Offset: 0x108B11C VA: 0x108B11C
	public BattleLogicTask.ACTORTYPE get_taskActorType() { }

	// RVA: 0x108B150 Offset: 0x108B150 VA: 0x108B150
	public bool get_IsOpponentTargetOnly() { }

	// RVA: 0x108B03C Offset: 0x108B03C VA: 0x108B03C
	public void Init(TargetAggregator.Args args) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int[] GetCandidate();

	// RVA: 0x108B254 Offset: 0x108B254 VA: 0x108B254
	protected IEnumerable<BattleServantData> BattleServantEnumerable(IEnumerable<int> servantUniqueIdArray) { }

	// RVA: 0x108B364 Offset: 0x108B364 VA: 0x108B364
	protected int[] ToServantUniqueIdArray(BattleServantData targetServant) { }

	// RVA: 0x108B3FC Offset: 0x108B3FC VA: 0x108B3FC
	protected BattleServantData GetMostMatchedServant(int[] servantUniqueIdArray, TargetFilterLogic targetFilterLogic, int defaultServantUniqueId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE048 Offset: 0xCCE048 VA: 0xCCE048
	// RVA: 0x108B4DC Offset: 0x108B4DC VA: 0x108B4DC
	private BattleServantData <BattleServantEnumerable>m__0(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE058 Offset: 0xCCE058 VA: 0xCCE058
	// RVA: 0x108B524 Offset: 0x108B524 VA: 0x108B524
	private static bool <BattleServantEnumerable>m__1(BattleServantData x) { }
}

// Namespace: 
public class TargetAggregator.Args // TypeDefIndex: 9199
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC65B38 Offset: 0xC65B38 VA: 0xC65B38
	[DebuggerBrowsableAttribute] // RVA: 0xC65B38 Offset: 0xC65B38 VA: 0xC65B38
	private int <actorId>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC65B74 Offset: 0xC65B74 VA: 0xC65B74
	[DebuggerBrowsableAttribute] // RVA: 0xC65B74 Offset: 0xC65B74 VA: 0xC65B74
	private int <targetId>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC65BB0 Offset: 0xC65BB0 VA: 0xC65BB0
	[DebuggerBrowsableAttribute] // RVA: 0xC65BB0 Offset: 0xC65BB0 VA: 0xC65BB0
	private int <ptTargetId>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC65BEC Offset: 0xC65BEC VA: 0xC65BEC
	[DebuggerBrowsableAttribute] // RVA: 0xC65BEC Offset: 0xC65BEC VA: 0xC65BEC
	private BattleData <battleData>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC65C28 Offset: 0xC65C28 VA: 0xC65C28
	[DebuggerBrowsableAttribute] // RVA: 0xC65C28 Offset: 0xC65C28 VA: 0xC65C28
	private BattleLogicTask.ACTORTYPE <taskActorType>k__BackingField; // 0x28

	// Properties
	public int actorId { get; set; }
	public int targetId { get; set; }
	public int ptTargetId { get; set; }
	public BattleData battleData { get; set; }
	public BattleLogicTask.ACTORTYPE taskActorType { get; set; }

	// Methods

	// RVA: 0x108AFE4 Offset: 0x108AFE4 VA: 0x108AFE4
	public void .ctor(BattleData battleData, int actorId, int targetId, int ptTargetId, BattleLogicTask.ACTORTYPE taskActorType) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE068 Offset: 0xCCE068 VA: 0xCCE068
	// RVA: 0x108B078 Offset: 0x108B078 VA: 0x108B078
	public int get_actorId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE078 Offset: 0xCCE078 VA: 0xCCE078
	// RVA: 0x108B538 Offset: 0x108B538 VA: 0x108B538
	private void set_actorId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE088 Offset: 0xCCE088 VA: 0xCCE088
	// RVA: 0x108B0AC Offset: 0x108B0AC VA: 0x108B0AC
	public int get_targetId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE098 Offset: 0xCCE098 VA: 0xCCE098
	// RVA: 0x108B540 Offset: 0x108B540 VA: 0x108B540
	private void set_targetId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE0A8 Offset: 0xCCE0A8 VA: 0xCCE0A8
	// RVA: 0x108B0E0 Offset: 0x108B0E0 VA: 0x108B0E0
	public int get_ptTargetId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE0B8 Offset: 0xCCE0B8 VA: 0xCCE0B8
	// RVA: 0x108B548 Offset: 0x108B548 VA: 0x108B548
	private void set_ptTargetId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE0C8 Offset: 0xCCE0C8 VA: 0xCCE0C8
	// RVA: 0x108B114 Offset: 0x108B114 VA: 0x108B114
	public BattleData get_battleData() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE0D8 Offset: 0xCCE0D8 VA: 0xCCE0D8
	// RVA: 0x108B530 Offset: 0x108B530 VA: 0x108B530
	private void set_battleData(BattleData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE0E8 Offset: 0xCCE0E8 VA: 0xCCE0E8
	// RVA: 0x108B148 Offset: 0x108B148 VA: 0x108B148
	public BattleLogicTask.ACTORTYPE get_taskActorType() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE0F8 Offset: 0xCCE0F8 VA: 0xCCE0F8
	// RVA: 0x108B550 Offset: 0x108B550 VA: 0x108B550
	private void set_taskActorType(BattleLogicTask.ACTORTYPE value) { }
}

// Namespace: 
public class NoneTargetAggregator : TargetAggregator // TypeDefIndex: 9200
{
	// Methods

	// RVA: 0x138A514 Offset: 0x138A514 VA: 0x138A514
	public void .ctor() { }

	// RVA: 0x138A51C Offset: 0x138A51C VA: 0x138A51C Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyAllFieldTargetAggregator : TargetAggregator // TypeDefIndex: 9201
{
	// Methods

	// RVA: 0x123EA88 Offset: 0x123EA88 VA: 0x123EA88
	public void .ctor() { }

	// RVA: 0x123EA90 Offset: 0x123EA90 VA: 0x123EA90 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class OpponentAllFieldTargetAggregator : TargetAggregator // TypeDefIndex: 9202
{
	// Methods

	// RVA: 0x1A942AC Offset: 0x1A942AC VA: 0x1A942AC
	public void .ctor() { }

	// RVA: 0x1A942B4 Offset: 0x1A942B4 VA: 0x1A942B4 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyFullTargetAggregator : TargetAggregator // TypeDefIndex: 9203
{
	// Methods

	// RVA: 0x1240690 Offset: 0x1240690 VA: 0x1240690
	public void .ctor() { }

	// RVA: 0x1240698 Offset: 0x1240698 VA: 0x1240698 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class OpponentFullTargetAggregator : TargetAggregator // TypeDefIndex: 9204
{
	// Methods

	// RVA: 0x1A94378 Offset: 0x1A94378 VA: 0x1A94378
	public void .ctor() { }

	// RVA: 0x1A94380 Offset: 0x1A94380 VA: 0x1A94380 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyOtherTargetAggregator : PartyAllFieldTargetAggregator // TypeDefIndex: 9205
{
	// Methods

	// RVA: 0x176B9E8 Offset: 0x176B9E8 VA: 0x176B9E8
	public void .ctor() { }

	// RVA: 0x176B9F0 Offset: 0x176B9F0 VA: 0x176B9F0 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE108 Offset: 0xCCE108 VA: 0xCCE108
	// RVA: 0x176BAA4 Offset: 0x176BAA4 VA: 0x176BAA4
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class OpponentOtherTargetAggregator : OpponentAllFieldTargetAggregator // TypeDefIndex: 9206
{
	// Methods

	// RVA: 0x1A94530 Offset: 0x1A94530 VA: 0x1A94530
	public void .ctor() { }

	// RVA: 0x1A94538 Offset: 0x1A94538 VA: 0x1A94538 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE118 Offset: 0xCCE118 VA: 0xCCE118
	// RVA: 0x1A945E8 Offset: 0x1A945E8 VA: 0x1A945E8
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class PartyOneOtherTargetAggregator : PartyAllFieldTargetAggregator // TypeDefIndex: 9207
{
	// Methods

	// RVA: 0x19E0568 Offset: 0x19E0568 VA: 0x19E0568
	public void .ctor() { }

	// RVA: 0x19E0570 Offset: 0x19E0570 VA: 0x19E0570 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE128 Offset: 0xCCE128 VA: 0xCCE128
	// RVA: 0x19E0624 Offset: 0x19E0624 VA: 0x19E0624
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class PartyOtherFullTargetAggregator : PartyFullTargetAggregator // TypeDefIndex: 9208
{
	// Methods

	// RVA: 0x176B900 Offset: 0x176B900 VA: 0x176B900
	public void .ctor() { }

	// RVA: 0x176B908 Offset: 0x176B908 VA: 0x176B908 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE138 Offset: 0xCCE138 VA: 0xCCE138
	// RVA: 0x176B9BC Offset: 0x176B9BC VA: 0x176B9BC
