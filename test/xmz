	// Fields
	public int value__; // 0x0
	public const ResourceFolder COMMON_EFFECT = 0;
	public const ResourceFolder ACTOR_EFFECT = 1;
	public const ResourceFolder BATTLE_EFFECT = 2;
}

// Namespace: 
public class ResponseCommandKind // TypeDefIndex: 6176
{
	// Fields
	protected static Dictionary<ResponseCommandKind.Kind, string> nameList; // 0x0

	// Methods

	// RVA: 0x15899A0 Offset: 0x15899A0 VA: 0x15899A0
	public void .ctor() { }

	// RVA: 0x158990C Offset: 0x158990C VA: 0x158990C
	public static string GetName(ResponseCommandKind.Kind kind) { }

	// RVA: 0x1580948 Offset: 0x1580948 VA: 0x1580948
	public static ResponseData SearchData(ResponseCommandKind.Kind kind, ResponseData[] responseList) { }

	// RVA: 0x15899A8 Offset: 0x15899A8 VA: 0x15899A8
	private static void .cctor() { }
}

// Namespace: 
public enum ResponseCommandKind.Kind // TypeDefIndex: 6177
{
	// Fields
	public int value__; // 0x0
	public const ResponseCommandKind.Kind NONE = 0;
	public const ResponseCommandKind.Kind SIGNUP = 1;
	public const ResponseCommandKind.Kind ACCOUNT_REGIST = 2;
	public const ResponseCommandKind.Kind GAME_DATA = 3;
	public const ResponseCommandKind.Kind LOGIN = 4;
	public const ResponseCommandKind.Kind HOME = 5;
	public const ResponseCommandKind.Kind GACHA_DRAW = 6;
	public const ResponseCommandKind.Kind DECK_SETUP = 7;
	public const ResponseCommandKind.Kind USER_FORMATION = 8;
	public const ResponseCommandKind.Kind PURCHASE = 9;
	public const ResponseCommandKind.Kind PURCHASE_BY_STONE = 10;
	public const ResponseCommandKind.Kind PURCHASE_BY_BANK = 11;
	public const ResponseCommandKind.Kind SELL_SERVANT = 12;
	public const ResponseCommandKind.Kind FRIEND_OFFER = 13;
	public const ResponseCommandKind.Kind FRIEND_ACCEPT = 14;
	public const ResponseCommandKind.Kind FRIEND_REJECT = 15;
	public const ResponseCommandKind.Kind FRIEND_CANCEL = 16;
	public const ResponseCommandKind.Kind FRIEND_REMOVE = 17;
	public const ResponseCommandKind.Kind PROFILE = 18;
	public const ResponseCommandKind.Kind CHANGE_USERNAME = 19;
	public const ResponseCommandKind.Kind BATTLE_SETUP = 20;
	public const ResponseCommandKind.Kind BATTLE_TURN = 21;
	public const ResponseCommandKind.Kind BATTLE_RESULT = 22;
	public const ResponseCommandKind.Kind BATTLE_COMMANDSPELL = 23;
	public const ResponseCommandKind.Kind BATTLE_USECONTINUE = 24;
	public const ResponseCommandKind.Kind COMBINE_SERVANT = 25;
	public const ResponseCommandKind.Kind CARD_COMBINE_SKILL = 26;
	public const ResponseCommandKind.Kind CARD_COMBINE_TREASUREDVC = 27;
	public const ResponseCommandKind.Kind CARD_FRIENDSHIP_EXCEED = 28;
	public const ResponseCommandKind.Kind PRESENT_RECEIVE = 29;
	public const ResponseCommandKind.Kind CODE_INPUT = 30;
	public const ResponseCommandKind.Kind CONTINUE_PREPARE = 31;
	public const ResponseCommandKind.Kind CONTINUE_INPUT = 32;
	public const ResponseCommandKind.Kind CONTINUE_DECIDE = 33;
	public const ResponseCommandKind.Kind SET_FAVORITE_SERVANT = 34;
	public const ResponseCommandKind.Kind TUTORIAL_SET = 35;
	public const ResponseCommandKind.Kind TUTORIAL_CLEAR = 36;
	public const ResponseCommandKind.Kind BATTLE_RESUME = 37;
	public const ResponseCommandKind.Kind CARD_LIMIT = 38;
	public const ResponseCommandKind.Kind SERVANT_EQUIP_SET = 39;
	public const ResponseCommandKind.Kind SERVANT_EQUIP_COMBINE = 40;
	public const ResponseCommandKind.Kind DEBUG_QUEST = 41;
	public const ResponseCommandKind.Kind SET_BIRTHDAY = 42;
	public const ResponseCommandKind.Kind ITEM_USE = 43;
	public const ResponseCommandKind.Kind ITEM_RECOVER = 44;
	public const ResponseCommandKind.Kind COMMANDSPELL_USE = 45;
	public const ResponseCommandKind.Kind BOX_GACHA_DRAW = 46;
	public const ResponseCommandKind.Kind BOX_GACHA_RESET = 47;
	public const ResponseCommandKind.Kind MISSION_NOTIFY = 48;
	public const ResponseCommandKind.Kind EV_MISSION_REWARD = 49;
	public const ResponseCommandKind.Kind SUPPORT_SERVANT = 50;
	public const ResponseCommandKind.Kind BATTLE_SCENARIO = 51;
	public const ResponseCommandKind.Kind DECK_EDIT_NAME = 52;
	public const ResponseCommandKind.Kind DEBUG_SERVER_TIME = 53;
	public const ResponseCommandKind.Kind CARD_COMBINE_EXCEED = 54;
	public const ResponseCommandKind.Kind SET_LOCK_SERVANT = 55;
	public const ResponseCommandKind.Kind TUTORIAL_EVENT_FLAG_SET = 56;
	public const ResponseCommandKind.Kind TAKEIN_STORAGE = 57;
	public const ResponseCommandKind.Kind TAKEOUT_STORAGE = 58;
	public const ResponseCommandKind.Kind FOLLOWER_EDIT_NAME = 59;
	public const ResponseCommandKind.Kind BANK_STATUS = 60;
	public const ResponseCommandKind.Kind CARD_COMBINE_COSTUME = 61;
	public const ResponseCommandKind.Kind BLACKLIST_TOP = 62;
	public const ResponseCommandKind.Kind BLACKLIST_REGIST = 63;
	public const ResponseCommandKind.Kind BLACKLIST_REMOVE = 64;
	public const ResponseCommandKind.Kind FRIEND_MESSAGE_HIDE_SYNC = 65;
	public const ResponseCommandKind.Kind EVENT_SCRIPT_FLAG = 66;
	public const ResponseCommandKind.Kind CARD_SVT_FLAG = 67;
	public const ResponseCommandKind.Kind EVENT_LOCATION = 68;
	public const ResponseCommandKind.Kind SET_STATUS_SERVANT = 69;
	public const ResponseCommandKind.Kind SET_STATUS_COMMAND_CODE = 70;
	public const ResponseCommandKind.Kind STATUS_SYNC_COMMAND_CODE = 71;
	public const ResponseCommandKind.Kind SERVANT_RECOVERY_SYNC = 72;
	public const ResponseCommandKind.Kind EVENT_DECK_SETUP = 73;
	public const ResponseCommandKind.Kind USER_STATUS_FLAG_SET = 74;
	public const ResponseCommandKind.Kind FRIEND_TOP = 75;
	public const ResponseCommandKind.Kind COMMAND_CODE_ATTACH = 76;
	public const ResponseCommandKind.Kind COMMAND_CODE_DETACH = 77;
	public const ResponseCommandKind.Kind COMMAND_CODE_UNLOCK = 78;
	public const ResponseCommandKind.Kind DEBUG_UPDATE_USER = 79;
	public const ResponseCommandKind.Kind FOLLOW_ASSIGN = 80;
	public const ResponseCommandKind.Kind FOLLOW_REMOVE = 81;
	public const ResponseCommandKind.Kind EVENT_DAILY_POINT = 82;
	public const ResponseCommandKind.Kind COMMAND_CARD_EXCEED = 83;
	public const ResponseCommandKind.Kind CARD_COMBINE_LIMIT_SPECIAL = 84;
	public const ResponseCommandKind.Kind BATTLE_QUEST_ROUTE = 85;
	public const ResponseCommandKind.Kind FRIEND_LOCK_SYNC = 86;
	public const ResponseCommandKind.Kind RAID_AUTO_UPDATE = 87;
	public const ResponseCommandKind.Kind COMMAND_CODE_LOCK = 88;
	public const ResponseCommandKind.Kind WARBOARD_START = 89;
	public const ResponseCommandKind.Kind WARBOARD_SETUP = 90;
	public const ResponseCommandKind.Kind WARBOARD_BUFF_SAVE = 91;
	public const ResponseCommandKind.Kind WARBOARD_MOVE = 92;
	public const ResponseCommandKind.Kind WARBOARD_TREASURE = 93;
	public const ResponseCommandKind.Kind WARBOARD_TURN_END = 94;
	public const ResponseCommandKind.Kind WARBOARD_MASTER_ATTACK = 95;
	public const ResponseCommandKind.Kind WARBOARD_COMMAND_SPELL = 96;
	public const ResponseCommandKind.Kind WARBOARD_BATTLE_RESULT = 97;
	public const ResponseCommandKind.Kind WARBOARD_FINISH = 98;
	public const ResponseCommandKind.Kind WARBOARD_RESUME = 99;
	public const ResponseCommandKind.Kind EVENT_SCAN_PANEL_MAP = 100;
	public const ResponseCommandKind.Kind BATTLE_USE_CONTINUE_ITEM = 101;
	public const ResponseCommandKind.Kind CHECK_DATE_VERSION = 102;
	public const ResponseCommandKind.Kind BATTLE_USE_ITEM = 103;
	public const ResponseCommandKind.Kind COMBINE_APPEND_PASSIVE_SKILL = 104;
	public const ResponseCommandKind.Kind TREASURE_BOX_DRAW = 105;
	public const ResponseCommandKind.Kind EVENT_MISSION_RANDOM_CANCEL = 106;
	public const ResponseCommandKind.Kind COIN_ROOM = 107;
	public const ResponseCommandKind.Kind USER_DELETE = 108;
}

// Namespace: 
public class Restriction // TypeDefIndex: 6178
{
	// Methods

	// RVA: 0x158CBF8 Offset: 0x158CBF8 VA: 0x158CBF8
	public void .ctor() { }
}

// Namespace: 
public enum Restriction.Type // TypeDefIndex: 6179
{
	// Fields
	public int value__; // 0x0
	public const Restriction.Type INDIVIDUALITY = 1;
	public const Restriction.Type RARITY = 2;
	public const Restriction.Type TOTAL_COST = 3;
	public const Restriction.Type LV = 4;
	public const Restriction.Type SUPPORT_ONLY = 5;
	public const Restriction.Type UNIQUE_SVT_ONLY = 6;
	public const Restriction.Type FIXED_SUPPORT_POSITION = 7;
	public const Restriction.Type FIXED_MY_SVT_INDIVIDUALITY_POSITION_MAIN = 8;
	public const Restriction.Type FIXED_MY_SVT_INDIVIDUALITY_SINGLE = 9;
	public const Restriction.Type SVT_NUM = 10;
	public const Restriction.Type MY_SVT_NUM = 11;
	public const Restriction.Type MY_SVT_OR_NPC = 12;
}

// Namespace: 
public enum Restriction.RangeType // TypeDefIndex: 6180
{
	// Fields
	public int value__; // 0x0
	public const Restriction.RangeType NONE = 0;
	public const Restriction.RangeType EQUAL = 1;
	public const Restriction.RangeType NOT_EQUAL = 2;
	public const Restriction.RangeType ABOVE = 3;
	public const Restriction.RangeType BELOW = 4;
}

// Namespace: 
public class RewardType // TypeDefIndex: 6181
{
	// Methods

	// RVA: 0x1590BA8 Offset: 0x1590BA8 VA: 0x1590BA8
	public void .ctor() { }
}

// Namespace: 
public enum RewardType.Type // TypeDefIndex: 6182
{
	// Fields
	public int value__; // 0x0
	public const RewardType.Type GIFT = 1;
	public const RewardType.Type EXTRA = 2;
	public const RewardType.Type SET = 3;
}

// Namespace: 
public class SceneList // TypeDefIndex: 6183
{
	// Fields
	protected static Dictionary<SceneList.Type, string> nameList; // 0x0

	// Methods

	// RVA: 0xED5EDC Offset: 0xED5EDC VA: 0xED5EDC
	public void .ctor() { }

	// RVA: 0xED5EE4 Offset: 0xED5EE4 VA: 0xED5EE4
	public static string getSceneName(SceneList.Type type) { }

	// RVA: 0xED5FD0 Offset: 0xED5FD0 VA: 0xED5FD0
	public static SceneList.Type getSceneType(string name) { }

	// RVA: 0xED60EC Offset: 0xED60EC VA: 0xED60EC
	private static void .cctor() { }
}

// Namespace: 
public enum SceneList.Type // TypeDefIndex: 6184
{
	// Fields
	public int value__; // 0x0
	public const SceneList.Type None = -1;
	public const SceneList.Type Init = 0;
	public const SceneList.Type DebugTest = 4;
	public const SceneList.Type Title = 9;
	public const SceneList.Type Battle = 10;
	public const SceneList.Type DebugTitle = 19;
	public const SceneList.Type Summon = 20;
	public const SceneList.Type Shop = 22;
	public const SceneList.Type Friend = 23;
	public const SceneList.Type MyRoom = 30;
	public const SceneList.Type Combine = 32;
	public const SceneList.Type Terminal = 34;
	public const SceneList.Type Follower = 35;
	public const SceneList.Type BattleScript = 38;
	public const SceneList.Type Formation = 39;
	public const SceneList.Type PartyOrganization = 40;
	public const SceneList.Type ServantList = 41;
	public const SceneList.Type ServantEquipList = 42;
	public const SceneList.Type MasterFormation = 44;
	public const SceneList.Type BattleDemoScene = 50;
	public const SceneList.Type SupportSelect = 60;
	public const SceneList.Type Warehouse = 71;
	public const SceneList.Type EventReward = 72;
	public const SceneList.Type WarBoard = 80;
	public const SceneList.Type CoinRoom = 90;
	public const SceneList.Type Empty = 1000;
	public const SceneList.Type SummonEffect = 1001;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42604 Offset: 0xC42604 VA: 0xC42604
private sealed class SceneList.<getSceneType>c__AnonStorey0 // TypeDefIndex: 6185
{
	// Fields
	internal string name; // 0x10

	// Methods

	// RVA: 0xED60E4 Offset: 0xED60E4 VA: 0xED60E4
	public void .ctor() { }

	// RVA: 0xED6710 Offset: 0xED6710 VA: 0xED6710
	internal bool <>m__0(KeyValuePair<SceneList.Type, string> c) { }
}

// Namespace: 
public class ScriptSceneType // TypeDefIndex: 6186
{
	// Methods

	// RVA: 0x1B3838C Offset: 0x1B3838C VA: 0x1B3838C
	public void .ctor() { }
}

// Namespace: 
public enum ScriptSceneType.Kind // TypeDefIndex: 6187
{
	// Fields
	public int value__; // 0x0
	public const ScriptSceneType.Kind BATTLE_SETUP = 1;
	public const ScriptSceneType.Kind BATTLE_RESULT = 2;
	public const ScriptSceneType.Kind MATERIAL = 3;
	public const ScriptSceneType.Kind NOT_PROGRESS = 4;
	public const ScriptSceneType.Kind IS_INTERLUDE = 5;
}

// Namespace: 
public enum ScriptSceneType.Flag // TypeDefIndex: 6188
{
	// Fields
	public int value__; // 0x0
	public const ScriptSceneType.Flag BATTLE_SETUP = 2;
	public const ScriptSceneType.Flag BATTLE_RESULT = 4;
	public const ScriptSceneType.Flag MATERIAL = 8;
	public const ScriptSceneType.Flag NOT_PROGRESS = 16;
	public const ScriptSceneType.Flag IS_INTERLUDE = 32;
}

// Namespace: 
public class ShopFlag // TypeDefIndex: 6189
{
	// Methods

	// RVA: 0x18D293C Offset: 0x18D293C VA: 0x18D293C
	public void .ctor() { }
}

// Namespace: 
public enum ShopFlag.FlagKind // TypeDefIndex: 6190
{
	// Fields
	public int value__; // 0x0
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_ITEM_IMAGE = 1;
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_ITEM_NAME = 2;
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_ITEM_DETAIL = 3;
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_NUM = 4;
	public const ShopFlag.FlagKind CLOSED_HIDE_NEED_ITEM = 5;
	public const ShopFlag.FlagKind CLOSED_HIDE_NEED_ITEM_NUM = 6;
	public const ShopFlag.FlagKind RESET_QUEST_REWARD = 7;
	public const ShopFlag.FlagKind CLOSED_SHOP_PRIORITY_LOW = 8;
	public const ShopFlag.FlagKind HIDDEN_IN_CASE_OF_BUYING = 9;
	public const ShopFlag.FlagKind HIDDEN_IN_CASE_OF_BUYING_SHOP_ID = 10;
	public const ShopFlag.FlagKind LIMITED_ICON_DISPLAY_TARGET = 11;
	public const ShopFlag.FlagKind MONTHLY_ICON_DISPLAY_TARGET = 12;
	public const ShopFlag.FlagKind NOT_HAVING_SHOP_ITEM_RECEIVE = 13;
	public const ShopFlag.FlagKind SHOW_HAVE_ICON = 14;
	public const ShopFlag.FlagKind SOLD_OUT = 15;
	public const ShopFlag.FlagKind COMMIT_AFTER_SCRIPT = 16;
	public const ShopFlag.FlagKind EXCHANGESERVANT_ICON_DISPLAY_TARGET = 17;
	public const ShopFlag.FlagKind SHOW_INDEFINITE_PERIOD = 18;
	public const ShopFlag.FlagKind FLAG_ON_USED_ADD_BUFF_ITEM_BY_ANOTHER_PAY = 19;
}

// Namespace: 
public enum ShopFlag.Flag // TypeDefIndex: 6191
{
	// Fields
	public int value__; // 0x0
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_ITEM_IMAGE = 2;
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_ITEM_NAME = 4;
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_ITEM_DETAIL = 8;
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_NUM = 16;
	public const ShopFlag.Flag CLOSED_HIDE_NEED_ITEM = 32;
	public const ShopFlag.Flag CLOSED_HIDE_NEED_ITEM_NUM = 64;
	public const ShopFlag.Flag RESET_QUEST_REWARD = 128;
	public const ShopFlag.Flag CLOSED_SHOP_PRIORITY_LOW = 256;
	public const ShopFlag.Flag HIDDEN_IN_CASE_OF_BUYING = 512;
	public const ShopFlag.Flag HIDDEN_IN_CASE_OF_BUYING_SHOP_ID = 1024;
	public const ShopFlag.Flag LIMITED_ICON_DISPLAY_TARGET = 2048;
	public const ShopFlag.Flag MONTHLY_ICON_DISPLAY_TARGET = 4096;
	public const ShopFlag.Flag NOT_HAVING_SHOP_ITEM_RECEIVE = 8192;
	public const ShopFlag.Flag SHOW_HAVE_ICON = 16384;
	public const ShopFlag.Flag SOLD_OUT = 32768;
	public const ShopFlag.Flag COMMIT_AFTER_SCRIPT = 65536;
	public const ShopFlag.Flag EXCHANGESERVANT_ICON_DISPLAY_TARGET = 131072;
	public const ShopFlag.Flag SHOW_INDEFINITE_PERIOD = 262144;
	public const ShopFlag.Flag FLAG_ON_USED_ADD_BUFF_ITEM_BY_ANOTHER_PAY = 524288;
}

// Namespace: 
public class ShopType // TypeDefIndex: 6192
{
	// Methods

	// RVA: 0x152073C Offset: 0x152073C VA: 0x152073C
	public void .ctor() { }
}

// Namespace: 
public enum ShopType.Type // TypeDefIndex: 6193
{
	// Fields
	public int value__; // 0x0
	public const ShopType.Type NONE = 0;
	public const ShopType.Type EVENT_ITEM = 1;
	public const ShopType.Type MANA = 2;
	public const ShopType.Type RARE_PRI = 3;
	public const ShopType.Type SVT_STORAGE = 4;
	public const ShopType.Type SVT_EQUIP_STORAGE = 5;
	public const ShopType.Type STONE_FRAGMENTS = 6;
	public const ShopType.Type SVT_ANONYMOUS = 7;
	public const ShopType.Type BGM = 8;
	public const ShopType.Type LIMIT_MATERIAL = 9;
	public const ShopType.Type GRAIL_FRAGMENTS = 10;
	public const ShopType.Type SVT_COSTUME = 11;
	public const ShopType.Type START_UP_SUMMON = 12;
	public const ShopType.Type SHOP13 = 13;
}

// Namespace: 
public class StatusRank // TypeDefIndex: 6194
{
	// Fields
	protected static readonly string[] aRankList; // 0x0
	protected static readonly string[] bRankList; // 0x8
	protected static readonly string[] cRankList; // 0x10
	protected static readonly string[] dRankList; // 0x18
	protected static readonly string[] eRankList; // 0x20
	protected static readonly string[] exRankList; // 0x28

	// Methods

	// RVA: 0x179FAF8 Offset: 0x179FAF8 VA: 0x179FAF8
	public void .ctor() { }

	// RVA: 0x179FB00 Offset: 0x179FB00 VA: 0x179FB00
	public static string GetRankString(StatusRank.Kind kind) { }

	// RVA: 0x179FD28 Offset: 0x179FD28 VA: 0x179FD28
	private static void .cctor() { }
}

// Namespace: 
public enum StatusRank.Kind // TypeDefIndex: 6195
{
	// Fields
	public int value__; // 0x0
	public const StatusRank.Kind A = 11;
	public const StatusRank.Kind A_PLUS = 12;
	public const StatusRank.Kind A_PLUS2 = 13;
	public const StatusRank.Kind A_MINUS = 14;
	public const StatusRank.Kind A_PLUS3 = 15;
	public const StatusRank.Kind B = 21;
	public const StatusRank.Kind B_PLUS = 22;
	public const StatusRank.Kind B_PLUS2 = 23;
	public const StatusRank.Kind B_MINUS = 24;
	public const StatusRank.Kind B_PLUS3 = 25;
	public const StatusRank.Kind C = 31;
	public const StatusRank.Kind C_PLUS = 32;
	public const StatusRank.Kind C_PLUS2 = 33;
	public const StatusRank.Kind C_MINUS = 34;
	public const StatusRank.Kind C_PLUS3 = 35;
	public const StatusRank.Kind D = 41;
	public const StatusRank.Kind D_PLUS = 42;
	public const StatusRank.Kind D_PLUS2 = 43;
	public const StatusRank.Kind D_MINUS = 44;
	public const StatusRank.Kind D_PLUS3 = 45;
	public const StatusRank.Kind E = 51;
	public const StatusRank.Kind E_PLUS = 52;
	public const StatusRank.Kind E_PLUS2 = 53;
	public const StatusRank.Kind E_MINUS = 54;
	public const StatusRank.Kind E_PLUS3 = 55;
	public const StatusRank.Kind EX = 61;
	public const StatusRank.Kind QUESTION = 98;
	public const StatusRank.Kind NONE = 99;
}

// Namespace: 
public class StoneShopEffect // TypeDefIndex: 6196
{
	// Methods

	// RVA: 0x17A6B3C Offset: 0x17A6B3C VA: 0x17A6B3C
	public void .ctor() { }
}

// Namespace: 
public enum StoneShopEffect.Kind // TypeDefIndex: 6197
{
	// Fields
	public int value__; // 0x0
	public const StoneShopEffect.Kind CONTINUE = 1;
	public const StoneShopEffect.Kind ACT_RECOVER = 2;
	public const StoneShopEffect.Kind CHANGE_GACHA = 3;
	public const StoneShopEffect.Kind EXTEND_FRIEND_MAX = 11;
	public const StoneShopEffect.Kind EXTEND_SVT_MAX = 12;
	public const StoneShopEffect.Kind EXTEND_SVT_EQUIP_MAX = 13;
	public const StoneShopEffect.Kind RP_RECOVER = 14;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25284 Offset: 0xC25284 VA: 0xC25284
public static class StoneShopEffectExtension // TypeDefIndex: 6198
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC8B04 Offset: 0xCC8B04 VA: 0xCC8B04
	// RVA: 0x17A6B44 Offset: 0x17A6B44 VA: 0x17A6B44
	public static string GetDisplayName(StoneShopEffect.Kind this) { }
}

// Namespace: 
public class StrengthStatus // TypeDefIndex: 6199
{
	// Fields
	private static readonly string[] iconNameList; // 0x0
	private static readonly string[] treasureDeviceIconNameList; // 0x8

	// Methods

	// RVA: 0x17A76F0 Offset: 0x17A76F0 VA: 0x17A76F0
	public void .ctor() { }

	// RVA: 0x17A76F8 Offset: 0x17A76F8 VA: 0x17A76F8
	public static string getIconName(StrengthStatus.Kind kind) { }

	// RVA: 0x17A7798 Offset: 0x17A7798 VA: 0x17A7798
	public static string getTreasureDeviceIconName(StrengthStatus.Kind kind) { }

	// RVA: 0x17A7838 Offset: 0x17A7838 VA: 0x17A7838
	private static void .cctor() { }
}

// Namespace: 
public enum StrengthStatus.Kind // TypeDefIndex: 6200
{
	// Fields
	public int value__; // 0x0
	public const StrengthStatus.Kind NONE = 0;
	public const StrengthStatus.Kind POSSIBLE = 1;
	public const StrengthStatus.Kind MAXIMUM = 2;
}

// Namespace: 
public class SvtAttri // TypeDefIndex: 6201
{
	// Methods

	// RVA: 0x14F82C8 Offset: 0x14F82C8 VA: 0x14F82C8
	public void .ctor() { }

	// RVA: 0x14F82D0 Offset: 0x14F82D0 VA: 0x14F82D0
	public static float getMagnification(int attack, int defense) { }
}

// Namespace: 
public enum SvtAttri.TYPE // TypeDefIndex: 6202
{
	// Fields
	public int value__; // 0x0
	public const SvtAttri.TYPE HUMAN = 1;
	public const SvtAttri.TYPE SKY = 2;
	public const SvtAttri.TYPE GROUND = 3;
	public const SvtAttri.TYPE STAR = 4;
	public const SvtAttri.TYPE BEAST = 5;
	public const SvtAttri.TYPE VOID = 10;
}

// Namespace: 
public class SvtClassAttri // TypeDefIndex: 6203
{
	// Fields
	public static readonly int MAX_EXP_UP_RARITY; // 0x0

	// Methods

	// RVA: 0x14F82D8 Offset: 0x14F82D8 VA: 0x14F82D8
	public void .ctor() { }

	// RVA: 0x14F82E0 Offset: 0x14F82E0 VA: 0x14F82E0
	public static float getMagnification(int attack, int defense) { }

	// RVA: 0x14F83BC Offset: 0x14F83BC VA: 0x14F83BC
	public static int getClassId(SvtClassAttri.TYPE type) { }

	// RVA: 0x14F83C0 Offset: 0x14F83C0 VA: 0x14F83C0
	public static bool IsExtraClass(int classId) { }

	// RVA: 0x14F83D0 Offset: 0x14F83D0 VA: 0x14F83D0
	private static void .cctor() { }
}

// Namespace: 
public enum SvtClassAttri.TYPE // TypeDefIndex: 6204
{
	// Fields
	public int value__; // 0x0
	public const SvtClassAttri.TYPE SABER = 1;
	public const SvtClassAttri.TYPE ARCHER = 2;
	public const SvtClassAttri.TYPE LANCER = 3;
	public const SvtClassAttri.TYPE RIDER = 4;
	public const SvtClassAttri.TYPE CASTER = 5;
	public const SvtClassAttri.TYPE ASSASIN = 6;
	public const SvtClassAttri.TYPE BERSERKER = 7;
	public const SvtClassAttri.TYPE SHIELDER = 8;
	public const SvtClassAttri.TYPE RULER = 9;
	public const SvtClassAttri.TYPE ALTEREGO = 10;
	public const SvtClassAttri.TYPE AVENGER = 11;
	public const SvtClassAttri.TYPE BEAST = 12;
	public const SvtClassAttri.TYPE MOONCANCER = 23;
	public const SvtClassAttri.TYPE FOREIGNER = 25;
	public const SvtClassAttri.TYPE OTHER = 1000;
	public const SvtClassAttri.TYPE ALL = 1001;
}

// Namespace: 
public class SvtClassGroupType // TypeDefIndex: 6205
{
	// Methods

	// RVA: 0x14F8424 Offset: 0x14F8424 VA: 0x14F8424
	public void .ctor() { }
}

// Namespace: 
public enum SvtClassGroupType.TYPE // TypeDefIndex: 6206
{
	// Fields
	public int value__; // 0x0
	public const SvtClassGroupType.TYPE NORMAL = 1;
	public const SvtClassGroupType.TYPE OTHER = 2;
	public const SvtClassGroupType.TYPE ALL = 3;
}

// Namespace: 
public static class SvtType // TypeDefIndex: 6207
{
	// Methods

	// RVA: 0x10870B0 Offset: 0x10870B0 VA: 0x10870B0
	public static bool IsServant(SvtType.Type type) { }

	// RVA: 0x10870D8 Offset: 0x10870D8 VA: 0x10870D8
	public static bool IsKeepServant(SvtType.Type type) { }

	// RVA: 0x1087100 Offset: 0x1087100 VA: 0x1087100
	public static bool IsKeepServantEquip(SvtType.Type type) { }

	// RVA: 0x1087118 Offset: 0x1087118 VA: 0x1087118
	public static bool IsOrganization(SvtType.Type type) { }

	// RVA: 0x1087128 Offset: 0x1087128 VA: 0x1087128
	public static bool IsServantCollection(SvtType.Type type) { }

	// RVA: 0x1087150 Offset: 0x1087150 VA: 0x1087150
	public static bool IsLock(SvtType.Type type) { }

	// RVA: 0x1087178 Offset: 0x1087178 VA: 0x1087178
	public static bool IsServantEquip(SvtType.Type type) { }

	// RVA: 0x1087184 Offset: 0x1087184 VA: 0x1087184
	public static bool IsCombineMaterial(SvtType.Type type) { }

	// RVA: 0x1087190 Offset: 0x1087190 VA: 0x1087190
	public static bool IsStatusUp(SvtType.Type type) { }

	// RVA: 0x108719C Offset: 0x108719C VA: 0x108719C
	public static bool IsSvtEqMaterial(SvtType.Type type) { }

	// RVA: 0x10871A8 Offset: 0x10871A8 VA: 0x10871A8
	public static bool IsExpUp(SvtType.Type type) { }

	// RVA: 0x10871C0 Offset: 0x10871C0 VA: 0x10871C0
	public static bool IsEnemy(SvtType.Type type) { }

	// RVA: 0x10871CC Offset: 0x10871CC VA: 0x10871CC
	public static bool IsEnemyCollectionDetail(SvtType.Type type) { }

	// RVA: 0x10871D8 Offset: 0x10871D8 VA: 0x10871D8
	public static bool IsEnemy(int type) { }

	// RVA: 0x10871E4 Offset: 0x10871E4 VA: 0x10871E4
	public static bool IsAll(int classId) { }

	// RVA: 0x10871F0 Offset: 0x10871F0 VA: 0x10871F0
	public static bool IsCommandCode(SvtType.Type type) { }

	// RVA: 0x10871FC Offset: 0x10871FC VA: 0x10871FC
	public static bool IsSvtMaterialTd(SvtType.Type type) { }
}

// Namespace: 
public enum SvtType.Type // TypeDefIndex: 6208
{
	// Fields
	public int value__; // 0x0
	public const SvtType.Type NORMAL = 1;
	public const SvtType.Type HEROINE = 2;
	public const SvtType.Type COMBINE_MATERIAL = 3;
	public const SvtType.Type ENEMY = 4;
	public const SvtType.Type ENEMY_COLLECTION = 5;
	public const SvtType.Type SERVANT_EQUIP = 6;
	public const SvtType.Type STATUS_UP = 7;
	public const SvtType.Type SVT_EQUIP_MATERIAL = 8;
	public const SvtType.Type ENEMY_COLLECTION_DETAIL = 9;
	public const SvtType.Type ALL = 10;
	public const SvtType.Type COMMAND_CODE = 11;
	public const SvtType.Type SVT_MATERIAL_TD = 12;
}

// Namespace: 
public class SvtVoiceType // TypeDefIndex: 6209
{
	// Methods

	// RVA: 0x1087220 Offset: 0x1087220 VA: 0x1087220
	public void .ctor() { }
}

// Namespace: 
public enum SvtVoiceType.Type // TypeDefIndex: 6210
{
	// Fields
	public int value__; // 0x0
	public const SvtVoiceType.Type HOME = 1;
	public const SvtVoiceType.Type GROETH = 2;
	public const SvtVoiceType.Type FIRST_GET = 3;
	public const SvtVoiceType.Type EVENT_JOIN = 4;
	public const SvtVoiceType.Type EVENT_REWARD = 5;
	public const SvtVoiceType.Type BATTLE = 6;
	public const SvtVoiceType.Type TREASURE_DEVICE = 7;
	public const SvtVoiceType.Type MASTER_MISSION = 8;
	public const SvtVoiceType.Type EVENT_SHOP = 9;
	public const SvtVoiceType.Type HOME_COSTUME = 10;
	public const SvtVoiceType.Type BOX_GACHA_TALK = 11;
	public const SvtVoiceType.Type BATTLE_ENTRY = 12;
	public const SvtVoiceType.Type BATTLE_WIN = 13;
	public const SvtVoiceType.Type EVENT_TOWER_REWARD = 14;
	public const SvtVoiceType.Type GUIDE = 15;
	public const SvtVoiceType.Type EVENT_DAILY_POINT = 16;
	public const SvtVoiceType.Type TDDAMAGE = 17;
	public const SvtVoiceType.Type TREASURE_BOX = 18;
	public const SvtVoiceType.Type SUM = 19;
}

// Namespace: 
public class Target // TypeDefIndex: 6211
{
	// Methods

	// RVA: 0x108987C Offset: 0x108987C VA: 0x108987C
	public void .ctor() { }

	// RVA: 0x1089884 Offset: 0x1089884 VA: 0x1089884
	public static bool Check(Target.TYPE cktype, int type) { }

	// RVA: 0x1089890 Offset: 0x1089890 VA: 0x1089890
	public static int[] getTargetIds(BattleData bdata, int actorId, int targetId, int pttargetId, Target.TYPE tgType, int[] tvals) { }

	// RVA: 0x10898C0 Offset: 0x10898C0 VA: 0x10898C0
	public static int[] getTargetIds(BattleData bdata, int actorId, int targetId, int pttargetId, int type, BattleLogicTask.ACTORTYPE taskActorType = 0, bool checkRevengeId = False, int[] tvals, bool isIncludeIgnoreIndiv = False) { }

	// RVA: 0x108AC00 Offset: 0x108AC00 VA: 0x108AC00
	protected static int[] getOrderOneTargetIdArray(int[] checkIdArray, int excludeId, bool isOrderDesc = False, bool isPrev = False) { }

	// RVA: 0x108A944 Offset: 0x108A944 VA: 0x108A944
	public static bool IsActorPlayerSide(BattleData bData, int actorId, BattleLogicTask.ACTORTYPE taskActorType) { }

	// RVA: 0x108AD40 Offset: 0x108AD40 VA: 0x108AD40
	public static bool CheckAressSkill(BattleData bData, BattleLogicTask.ACTORTYPE taskActorType) { }

	// RVA: 0x108AE6C Offset: 0x108AE6C VA: 0x108AE6C
	public static bool isChoose(int targetType) { }

	// RVA: 0x108AE84 Offset: 0x108AE84 VA: 0x108AE84
	public static bool isSubChoose(int targetType) { }

	// RVA: 0x108AE94 Offset: 0x108AE94 VA: 0x108AE94
	public static bool isEnemy(int targetType) { }

	// RVA: 0x108AEE8 Offset: 0x108AEE8 VA: 0x108AEE8
	public static bool isFieldEnemy(int targetType) { }

	// RVA: 0x108AF20 Offset: 0x108AF20 VA: 0x108AF20
	public static bool isPlayer(int targetType) { }

	// RVA: 0x108AF74 Offset: 0x108AF74 VA: 0x108AF74
	public static bool isFieldPlayer(int targetType) { }

	// RVA: 0x108AFB0 Offset: 0x108AFB0 VA: 0x108AFB0
	public static bool isAllTargets(int targetType) { }

	// RVA: 0x108AFD8 Offset: 0x108AFD8 VA: 0x108AFD8
	public static bool isCommandType(int targetType) { }

	// RVA: 0x108A9B8 Offset: 0x108A9B8 VA: 0x108A9B8
	private static TargetAggregator GetTargetAggregator(BattleData battleData, int actorId, int targetId, int pttargetId, int type, BattleLogicTask.ACTORTYPE taskActorType) { }
}

// Namespace: 
public enum Target.PlayerTypeFlag // TypeDefIndex: 6212
{
	// Fields
	public int value__; // 0x0
	public const Target.PlayerTypeFlag NONE = 0;
	public const Target.PlayerTypeFlag PLAYER = 1;
	public const Target.PlayerTypeFlag ENEMY = 2;
	public const Target.PlayerTypeFlag ALL = 3;
}

// Namespace: 
public enum Target.TYPE // TypeDefIndex: 6213
{
	// Fields
	public int value__; // 0x0
	public const Target.TYPE SELF = 0;
	public const Target.TYPE PT_ONE = 1;
	public const Target.TYPE PT_ANOTHER = 2;
	public const Target.TYPE PT_ALL = 3;
	public const Target.TYPE ENEMY = 4;
	public const Target.TYPE ENEMY_ANOTHER = 5;
	public const Target.TYPE ENEMY_ALL = 6;
	public const Target.TYPE PT_FULL = 7;
	public const Target.TYPE ENEMY_FULL = 8;
	public const Target.TYPE PT_OTHER = 9;
	public const Target.TYPE PT_ONE_OTHER = 10;
	public const Target.TYPE PT_RANDOM = 11;
	public const Target.TYPE ENEMY_OTHER = 12;
	public const Target.TYPE ENEMY_RANDOM = 13;
	public const Target.TYPE PT_OTHER_FULL = 14;
	public const Target.TYPE ENEMY_OTHER_FULL = 15;
	public const Target.TYPE PTSELECT_ONE_SUB = 16;
	public const Target.TYPE PTSELECT_SUB = 17;
	public const Target.TYPE PT_ONE_ANOTHER_RANDOM = 18;
	public const Target.TYPE PT_SELF_ANOTHER_RANDOM = 19;
	public const Target.TYPE ENEMY_ONE_ANOTHER_RANDOM = 20;
	public const Target.TYPE PT_SELF_ANOTHER_FIRST = 21;
	public const Target.TYPE PT_SELF_BEFORE = 22;
	public const Target.TYPE PT_SELF_AFTER = 23;
	public const Target.TYPE PT_SELF_ANOTHER_LAST = 24;
	public const Target.TYPE COMMAND_TYPE_SELF_TREASURE_DEVICE = 25;
	public const Target.TYPE FIELD_OTHER = 26;
	public const Target.TYPE ENEMY_ONE_NO_TARGET_NO_ACTION = 27;
	public const Target.TYPE PT_ONE_HP_LOWEST_VALUE = 28;
	public const Target.TYPE PT_ONE_HP_LOWEST_RATE = 29;
}

// Namespace: 
public class TutorialFlag // TypeDefIndex: 6214
{
	// Fields
	protected static readonly string SAVE_KEY; // 0x0
	protected static readonly string SAVE_KEY2; // 0x8
	protected static readonly string SAVE_KEY3; // 0x10
	protected static readonly string SAVE_KEY4; // 0x18
	protected static Dictionary<string, TutorialFlag.Id> flagNameList; // 0x20

	// Methods

	// RVA: 0x1897DFC Offset: 0x1897DFC VA: 0x1897DFC
	public void .ctor() { }

	// RVA: 0x1897E04 Offset: 0x1897E04 VA: 0x1897E04
	public static void DeleteContinueData() { }

	// RVA: 0x1897EAC Offset: 0x1897EAC VA: 0x1897EAC
	public static TutorialFlag.Id[] GetIdList() { }

	// RVA: 0x1898098 Offset: 0x1898098 VA: 0x1898098
	public static TutorialFlag.Id GetId(string flagIdName) { }

	// RVA: 0x1898124 Offset: 0x1898124 VA: 0x1898124
	public static bool Get(string flagIdName) { }

	// RVA: 0x189818C Offset: 0x189818C VA: 0x189818C
	public static bool Get(TutorialFlag.Id flagId) { }

	// RVA: 0x18981F0 Offset: 0x18981F0 VA: 0x18981F0
	public static bool Get(int flagId) { }

	// RVA: 0x1898268 Offset: 0x1898268 VA: 0x1898268
	public static bool Get(UserGameEntity userGameEntity, int flagId) { }

	// RVA: 0x1898308 Offset: 0x1898308 VA: 0x1898308
	public static bool Get(FollowerInfo followerInfo, int flagId) { }

	// RVA: 0x1898380 Offset: 0x1898380 VA: 0x1898380
	public static bool Get(OtherUserGameEntity otherUserGameEntity, int flagId) { }

	// RVA: 0x18983F8 Offset: 0x18983F8 VA: 0x18983F8
	public static void Set(string flagIdName) { }

	// RVA: 0x1898460 Offset: 0x1898460 VA: 0x1898460
	public static void Set(TutorialFlag.Id flagId) { }

	// RVA: 0x18984C4 Offset: 0x18984C4 VA: 0x18984C4
	public static void Set(int flagId) { }

	// RVA: 0x189853C Offset: 0x189853C VA: 0x189853C
	public static void Set(UserGameEntity userGameEntity, int flagId) { }

	// RVA: 0x18985F4 Offset: 0x18985F4 VA: 0x18985F4
	public static int GetProgress() { }

	// RVA: 0x1898664 Offset: 0x1898664 VA: 0x1898664
	public static void ClearProgress() { }

	// RVA: 0x1898714 Offset: 0x1898714 VA: 0x1898714
	public static void CompleteProgress() { }

	// RVA: 0x1898774 Offset: 0x1898774 VA: 0x1898774
	public static void SetProgress(TutorialFlag.Progress count) { }

	// RVA: 0x18987D8 Offset: 0x18987D8 VA: 0x18987D8
	public static void SetProgress(int count) { }

	// RVA: 0x1898890 Offset: 0x1898890 VA: 0x1898890
	public static bool IsProgressDone(TutorialFlag.Progress count) { }

	// RVA: 0x1898928 Offset: 0x1898928 VA: 0x1898928
	public static bool IsProgressDone(int count) { }

	// RVA: 0x1898994 Offset: 0x1898994 VA: 0x1898994
	public static bool IsProgressComplete() { }

	// RVA: 0x1898A28 Offset: 0x1898A28 VA: 0x1898A28
	public static bool Get(TutorialFlag.LocalId flagId) { }

	// RVA: 0x1896EBC Offset: 0x1896EBC VA: 0x1896EBC
	public static void Set(TutorialFlag.LocalId flagId) { }

	// RVA: 0x1898AE8 Offset: 0x1898AE8 VA: 0x1898AE8
	public static bool Get(TutorialFlag.EventId flagId, int eventId) { }

	// RVA: 0x1898BD8 Offset: 0x1898BD8 VA: 0x1898BD8
	public static bool GetConfigFlg(int configFlagId) { }

	// RVA: 0x1896FC8 Offset: 0x1896FC8 VA: 0x1896FC8
	public static void SetConfigFlg(int configFlagId) { }

	// RVA: 0x1898C98 Offset: 0x1898C98 VA: 0x1898C98
	public static bool GetGachaFlg(int gachaFlagId) { }

	// RVA: 0x1898D24 Offset: 0x1898D24 VA: 0x1898D24
	public static void SetGachaFlg(int gachaFlagId) { }

	// RVA: 0x1898E04 Offset: 0x1898E04 VA: 0x1898E04
	private static void .cctor() { }
}

// Namespace: 
public enum TutorialFlag.Progress // TypeDefIndex: 6215
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.Progress _1 = 1;
	public const TutorialFlag.Progress _2 = 2;
	public const TutorialFlag.Progress _3 = 3;
	public const TutorialFlag.Progress _4 = 4;
	public const TutorialFlag.Progress COMPLETE = 4;
}

// Namespace: 
public enum TutorialFlag.LocalId // TypeDefIndex: 6216
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.LocalId NULL = -1;
	public const TutorialFlag.LocalId TUTORIAL_LABEL_BOOST_ITEM = 101;
}

// Namespace: 
public enum TutorialFlag.Id // TypeDefIndex: 6217
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.Id NULL = -1;
	public const TutorialFlag.Id TUTORIAL_LABEL_STONE_GACHA = 101;
	public const TutorialFlag.Id TUTORIAL_LABEL_END = 102;
	public const TutorialFlag.Id TUTORIAL_LABEL_SHOP = 103;
	public const TutorialFlag.Id TUTORIAL_LABEL_COMBINE = 104;
	public const TutorialFlag.Id TUTORIAL_LABEL_FAVORITE1 = 105;
	public const TutorialFlag.Id TUTORIAL_LABEL_FAVORITE2 = 106;
	public const TutorialFlag.Id TUTORIAL_LABEL_GACHA_SCENE = 107;
	public const TutorialFlag.Id TUTORIAL_LABEL_GACHA_SVT_EQUIP = 108;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK_SCENE = 109;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK_SVT_EQUIP = 110;
	public const TutorialFlag.Id TUTORIAL_LABEL_EVENT_GACHA = 111;
	public const TutorialFlag.Id TUTORIAL_LABEL_EVENT_REWARD = 112;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK_IN_SVT_EQUIP = 113;
	public const TutorialFlag.Id TUTORIAL_LABEL_EVENT_MISSION = 114;
	public const TutorialFlag.Id TUTORIAL_LABEL_MASHU_CHANGE = 115;
	public const TutorialFlag.Id TUTORIAL_LABEL_IBARAKI_RAID_TERMINAL = 116;
	public const TutorialFlag.Id TUTORIAL_LABEL_IBARAKI_RAID_BATTLE = 117;
	public const TutorialFlag.Id TUTORIAL_LABEL_IBARAKI_RAID_EVENT_REWARD = 118;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_MAP = 119;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_BATTLE = 120;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_EVENT_REWARD = 121;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_BATTLE_2 = 122;
	public const TutorialFlag.Id TUTORIAL_LABEL_SVT_LEAVE = 126;
	public const TutorialFlag.Id TUTORIAL_LABEL_FES = 127;
	public const TutorialFlag.Id TUTORIAL_LABEL_MYROOM = 128;
	public const TutorialFlag.Id TUTORIAL_LABEL_CALDEA_GATE = 129;
	public const TutorialFlag.Id TUTORIAL_LABEL_DAILY_QUEST = 130;
	public const TutorialFlag.Id TUTORIAL_LABEL_FREIND_STORY_QUEST = 131;
	public const TutorialFlag.Id TUTORIAL_LABEL_PRESENT_BOX = 201;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK = 202;
	public const TutorialFlag.Id TUTORIAL_LABEL_CHAPTER2_PROLOGUE = 204;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK2 = 205;
	public const TutorialFlag.Id TUTORIAL_LABEL_FIX_COSTUME = 206;
	public const TutorialFlag.Id TUTORIAL_LABEL_MASTER_MISSION = 207;
}

// Namespace: 
public enum TutorialFlag.EventId // TypeDefIndex: 6218
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.EventId NULL = -1;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BOOST_ITEM = 0;
	public const TutorialFlag.EventId TUTORIAL_LABEL_HELP = 1;
