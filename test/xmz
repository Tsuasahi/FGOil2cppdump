
// Namespace: 
public enum RewardType.Type // TypeDefIndex: 6184
{
	// Fields
	public int value__; // 0x0
	public const RewardType.Type GIFT = 1;
	public const RewardType.Type EXTRA = 2;
	public const RewardType.Type SET = 3;
}

// Namespace: 
public class SceneList // TypeDefIndex: 6185
{
	// Fields
	protected static Dictionary<SceneList.Type, string> nameList; // 0x0

	// Methods

	// RVA: 0x143AB5C Offset: 0x143AB5C VA: 0x143AB5C
	public void .ctor() { }

	// RVA: 0x143AB64 Offset: 0x143AB64 VA: 0x143AB64
	public static string getSceneName(SceneList.Type type) { }

	// RVA: 0x143AC50 Offset: 0x143AC50 VA: 0x143AC50
	public static SceneList.Type getSceneType(string name) { }

	// RVA: 0x143AD6C Offset: 0x143AD6C VA: 0x143AD6C
	private static void .cctor() { }
}

// Namespace: 
public enum SceneList.Type // TypeDefIndex: 6186
{
	// Fields
	public int value__; // 0x0
	public const SceneList.Type None = -1;
	public const SceneList.Type Init = 0;
	public const SceneList.Type DebugTest = 4;
	public const SceneList.Type Title = 9;
	public const SceneList.Type Battle = 10;
	public const SceneList.Type DebugTitle = 19;
	public const SceneList.Type Summon = 20;
	public const SceneList.Type Shop = 22;
	public const SceneList.Type Friend = 23;
	public const SceneList.Type MyRoom = 30;
	public const SceneList.Type Combine = 32;
	public const SceneList.Type Terminal = 34;
	public const SceneList.Type Follower = 35;
	public const SceneList.Type BattleScript = 38;
	public const SceneList.Type Formation = 39;
	public const SceneList.Type PartyOrganization = 40;
	public const SceneList.Type ServantList = 41;
	public const SceneList.Type ServantEquipList = 42;
	public const SceneList.Type MasterFormation = 44;
	public const SceneList.Type BattleDemoScene = 50;
	public const SceneList.Type SupportSelect = 60;
	public const SceneList.Type Warehouse = 71;
	public const SceneList.Type EventReward = 72;
	public const SceneList.Type WarBoard = 80;
	public const SceneList.Type CoinRoom = 90;
	public const SceneList.Type Empty = 1000;
	public const SceneList.Type SummonEffect = 1001;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE6F0 Offset: 0xCAE6F0 VA: 0xCAE6F0
private sealed class SceneList.<getSceneType>c__AnonStorey0 // TypeDefIndex: 6187
{
	// Fields
	internal string name; // 0x10

	// Methods

	// RVA: 0x143AD64 Offset: 0x143AD64 VA: 0x143AD64
	public void .ctor() { }

	// RVA: 0x143B390 Offset: 0x143B390 VA: 0x143B390
	internal bool <>m__0(KeyValuePair<SceneList.Type, string> c) { }
}

// Namespace: 
public class ScriptSceneType // TypeDefIndex: 6188
{
	// Methods

	// RVA: 0x20ABC48 Offset: 0x20ABC48 VA: 0x20ABC48
	public void .ctor() { }
}

// Namespace: 
public enum ScriptSceneType.Kind // TypeDefIndex: 6189
{
	// Fields
	public int value__; // 0x0
	public const ScriptSceneType.Kind BATTLE_SETUP = 1;
	public const ScriptSceneType.Kind BATTLE_RESULT = 2;
	public const ScriptSceneType.Kind MATERIAL = 3;
	public const ScriptSceneType.Kind NOT_PROGRESS = 4;
	public const ScriptSceneType.Kind IS_INTERLUDE = 5;
}

// Namespace: 
public enum ScriptSceneType.Flag // TypeDefIndex: 6190
{
	// Fields
	public int value__; // 0x0
	public const ScriptSceneType.Flag BATTLE_SETUP = 2;
	public const ScriptSceneType.Flag BATTLE_RESULT = 4;
	public const ScriptSceneType.Flag MATERIAL = 8;
	public const ScriptSceneType.Flag NOT_PROGRESS = 16;
	public const ScriptSceneType.Flag IS_INTERLUDE = 32;
}

// Namespace: 
public class ShopFlag // TypeDefIndex: 6191
{
	// Methods

	// RVA: 0x1E6DD54 Offset: 0x1E6DD54 VA: 0x1E6DD54
	public void .ctor() { }
}

// Namespace: 
public enum ShopFlag.FlagKind // TypeDefIndex: 6192
{
	// Fields
	public int value__; // 0x0
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_ITEM_IMAGE = 1;
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_ITEM_NAME = 2;
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_ITEM_DETAIL = 3;
	public const ShopFlag.FlagKind CLOSED_HIDE_CHANGE_NUM = 4;
	public const ShopFlag.FlagKind CLOSED_HIDE_NEED_ITEM = 5;
	public const ShopFlag.FlagKind CLOSED_HIDE_NEED_ITEM_NUM = 6;
	public const ShopFlag.FlagKind RESET_QUEST_REWARD = 7;
	public const ShopFlag.FlagKind CLOSED_SHOP_PRIORITY_LOW = 8;
	public const ShopFlag.FlagKind HIDDEN_IN_CASE_OF_BUYING = 9;
	public const ShopFlag.FlagKind HIDDEN_IN_CASE_OF_BUYING_SHOP_ID = 10;
	public const ShopFlag.FlagKind LIMITED_ICON_DISPLAY_TARGET = 11;
	public const ShopFlag.FlagKind MONTHLY_ICON_DISPLAY_TARGET = 12;
	public const ShopFlag.FlagKind NOT_HAVING_SHOP_ITEM_RECEIVE = 13;
	public const ShopFlag.FlagKind SHOW_HAVE_ICON = 14;
	public const ShopFlag.FlagKind SOLD_OUT = 15;
	public const ShopFlag.FlagKind COMMIT_AFTER_SCRIPT = 16;
	public const ShopFlag.FlagKind EXCHANGESERVANT_ICON_DISPLAY_TARGET = 17;
	public const ShopFlag.FlagKind SHOW_INDEFINITE_PERIOD = 18;
	public const ShopFlag.FlagKind FLAG_ON_USED_ADD_BUFF_ITEM_BY_ANOTHER_PAY = 19;
}

// Namespace: 
public enum ShopFlag.Flag // TypeDefIndex: 6193
{
	// Fields
	public int value__; // 0x0
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_ITEM_IMAGE = 2;
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_ITEM_NAME = 4;
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_ITEM_DETAIL = 8;
	public const ShopFlag.Flag CLOSED_HIDE_CHANGE_NUM = 16;
	public const ShopFlag.Flag CLOSED_HIDE_NEED_ITEM = 32;
	public const ShopFlag.Flag CLOSED_HIDE_NEED_ITEM_NUM = 64;
	public const ShopFlag.Flag RESET_QUEST_REWARD = 128;
	public const ShopFlag.Flag CLOSED_SHOP_PRIORITY_LOW = 256;
	public const ShopFlag.Flag HIDDEN_IN_CASE_OF_BUYING = 512;
	public const ShopFlag.Flag HIDDEN_IN_CASE_OF_BUYING_SHOP_ID = 1024;
	public const ShopFlag.Flag LIMITED_ICON_DISPLAY_TARGET = 2048;
	public const ShopFlag.Flag MONTHLY_ICON_DISPLAY_TARGET = 4096;
	public const ShopFlag.Flag NOT_HAVING_SHOP_ITEM_RECEIVE = 8192;
	public const ShopFlag.Flag SHOW_HAVE_ICON = 16384;
	public const ShopFlag.Flag SOLD_OUT = 32768;
	public const ShopFlag.Flag COMMIT_AFTER_SCRIPT = 65536;
	public const ShopFlag.Flag EXCHANGESERVANT_ICON_DISPLAY_TARGET = 131072;
	public const ShopFlag.Flag SHOW_INDEFINITE_PERIOD = 262144;
	public const ShopFlag.Flag FLAG_ON_USED_ADD_BUFF_ITEM_BY_ANOTHER_PAY = 524288;
}

// Namespace: 
public class ShopType // TypeDefIndex: 6194
{
	// Methods

	// RVA: 0x1A59C00 Offset: 0x1A59C00 VA: 0x1A59C00
	public void .ctor() { }
}

// Namespace: 
public enum ShopType.Type // TypeDefIndex: 6195
{
	// Fields
	public int value__; // 0x0
	public const ShopType.Type NONE = 0;
	public const ShopType.Type EVENT_ITEM = 1;
	public const ShopType.Type MANA = 2;
	public const ShopType.Type RARE_PRI = 3;
	public const ShopType.Type SVT_STORAGE = 4;
	public const ShopType.Type SVT_EQUIP_STORAGE = 5;
	public const ShopType.Type STONE_FRAGMENTS = 6;
	public const ShopType.Type SVT_ANONYMOUS = 7;
	public const ShopType.Type BGM = 8;
	public const ShopType.Type LIMIT_MATERIAL = 9;
	public const ShopType.Type GRAIL_FRAGMENTS = 10;
	public const ShopType.Type SVT_COSTUME = 11;
	public const ShopType.Type START_UP_SUMMON = 12;
	public const ShopType.Type SHOP13 = 13;
}

// Namespace: 
public class StatusRank // TypeDefIndex: 6196
{
	// Fields
	protected static readonly string[] aRankList; // 0x0
	protected static readonly string[] bRankList; // 0x8
	protected static readonly string[] cRankList; // 0x10
	protected static readonly string[] dRankList; // 0x18
	protected static readonly string[] eRankList; // 0x20
	protected static readonly string[] exRankList; // 0x28

	// Methods

	// RVA: 0x1D0459C Offset: 0x1D0459C VA: 0x1D0459C
	public void .ctor() { }

	// RVA: 0x1D045A4 Offset: 0x1D045A4 VA: 0x1D045A4
	public static string GetRankString(StatusRank.Kind kind) { }

	// RVA: 0x1D047CC Offset: 0x1D047CC VA: 0x1D047CC
	private static void .cctor() { }
}

// Namespace: 
public enum StatusRank.Kind // TypeDefIndex: 6197
{
	// Fields
	public int value__; // 0x0
	public const StatusRank.Kind A = 11;
	public const StatusRank.Kind A_PLUS = 12;
	public const StatusRank.Kind A_PLUS2 = 13;
	public const StatusRank.Kind A_MINUS = 14;
	public const StatusRank.Kind A_PLUS3 = 15;
	public const StatusRank.Kind B = 21;
	public const StatusRank.Kind B_PLUS = 22;
	public const StatusRank.Kind B_PLUS2 = 23;
	public const StatusRank.Kind B_MINUS = 24;
	public const StatusRank.Kind B_PLUS3 = 25;
	public const StatusRank.Kind C = 31;
	public const StatusRank.Kind C_PLUS = 32;
	public const StatusRank.Kind C_PLUS2 = 33;
	public const StatusRank.Kind C_MINUS = 34;
	public const StatusRank.Kind C_PLUS3 = 35;
	public const StatusRank.Kind D = 41;
	public const StatusRank.Kind D_PLUS = 42;
	public const StatusRank.Kind D_PLUS2 = 43;
	public const StatusRank.Kind D_MINUS = 44;
	public const StatusRank.Kind D_PLUS3 = 45;
	public const StatusRank.Kind E = 51;
	public const StatusRank.Kind E_PLUS = 52;
	public const StatusRank.Kind E_PLUS2 = 53;
	public const StatusRank.Kind E_MINUS = 54;
	public const StatusRank.Kind E_PLUS3 = 55;
	public const StatusRank.Kind EX = 61;
	public const StatusRank.Kind QUESTION = 98;
	public const StatusRank.Kind NONE = 99;
}

// Namespace: 
public class StoneShopEffect // TypeDefIndex: 6198
{
	// Methods

	// RVA: 0x1D0B5A8 Offset: 0x1D0B5A8 VA: 0x1D0B5A8
	public void .ctor() { }
}

// Namespace: 
public enum StoneShopEffect.Kind // TypeDefIndex: 6199
{
	// Fields
	public int value__; // 0x0
	public const StoneShopEffect.Kind CONTINUE = 1;
	public const StoneShopEffect.Kind ACT_RECOVER = 2;
	public const StoneShopEffect.Kind CHANGE_GACHA = 3;
	public const StoneShopEffect.Kind EXTEND_FRIEND_MAX = 11;
	public const StoneShopEffect.Kind EXTEND_SVT_MAX = 12;
	public const StoneShopEffect.Kind EXTEND_SVT_EQUIP_MAX = 13;
	public const StoneShopEffect.Kind RP_RECOVER = 14;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC913AC Offset: 0xC913AC VA: 0xC913AC
public static class StoneShopEffectExtension // TypeDefIndex: 6200
{
	// Methods

	[ExtensionAttribute] // RVA: 0xD361C8 Offset: 0xD361C8 VA: 0xD361C8
	// RVA: 0x1D0B5B0 Offset: 0x1D0B5B0 VA: 0x1D0B5B0
	public static string GetDisplayName(StoneShopEffect.Kind this) { }
}

// Namespace: 
public class StrengthStatus // TypeDefIndex: 6201
{
	// Fields
	private static readonly string[] iconNameList; // 0x0
	private static readonly string[] treasureDeviceIconNameList; // 0x8

	// Methods

	// RVA: 0x1D0C15C Offset: 0x1D0C15C VA: 0x1D0C15C
	public void .ctor() { }

	// RVA: 0x1D0C164 Offset: 0x1D0C164 VA: 0x1D0C164
	public static string getIconName(StrengthStatus.Kind kind) { }

	// RVA: 0x1D0C204 Offset: 0x1D0C204 VA: 0x1D0C204
	public static string getTreasureDeviceIconName(StrengthStatus.Kind kind) { }

	// RVA: 0x1D0C2A4 Offset: 0x1D0C2A4 VA: 0x1D0C2A4
	private static void .cctor() { }
}

// Namespace: 
public enum StrengthStatus.Kind // TypeDefIndex: 6202
{
	// Fields
	public int value__; // 0x0
	public const StrengthStatus.Kind NONE = 0;
	public const StrengthStatus.Kind POSSIBLE = 1;
	public const StrengthStatus.Kind MAXIMUM = 2;
}

// Namespace: 
public class SvtAttri // TypeDefIndex: 6203
{
	// Methods

	// RVA: 0x1A13BC4 Offset: 0x1A13BC4 VA: 0x1A13BC4
	public void .ctor() { }

	// RVA: 0x1A13BCC Offset: 0x1A13BCC VA: 0x1A13BCC
	public static float getMagnification(int attack, int defense) { }
}

// Namespace: 
public enum SvtAttri.TYPE // TypeDefIndex: 6204
{
	// Fields
	public int value__; // 0x0
	public const SvtAttri.TYPE HUMAN = 1;
	public const SvtAttri.TYPE SKY = 2;
	public const SvtAttri.TYPE GROUND = 3;
	public const SvtAttri.TYPE STAR = 4;
	public const SvtAttri.TYPE BEAST = 5;
	public const SvtAttri.TYPE VOID = 10;
}

// Namespace: 
public class SvtClassAttri // TypeDefIndex: 6205
{
	// Fields
	public static readonly int MAX_EXP_UP_RARITY; // 0x0

	// Methods

	// RVA: 0x1A13BD4 Offset: 0x1A13BD4 VA: 0x1A13BD4
	public void .ctor() { }

	// RVA: 0x1A13BDC Offset: 0x1A13BDC VA: 0x1A13BDC
	public static float getMagnification(int attack, int defense) { }

	// RVA: 0x1A13CB8 Offset: 0x1A13CB8 VA: 0x1A13CB8
	public static int getClassId(SvtClassAttri.TYPE type) { }

	// RVA: 0x1A13CBC Offset: 0x1A13CBC VA: 0x1A13CBC
	public static bool IsExtraClass(int classId) { }

	// RVA: 0x1A13CCC Offset: 0x1A13CCC VA: 0x1A13CCC
	private static void .cctor() { }
}

// Namespace: 
public enum SvtClassAttri.TYPE // TypeDefIndex: 6206
{
	// Fields
	public int value__; // 0x0
	public const SvtClassAttri.TYPE SABER = 1;
	public const SvtClassAttri.TYPE ARCHER = 2;
	public const SvtClassAttri.TYPE LANCER = 3;
	public const SvtClassAttri.TYPE RIDER = 4;
	public const SvtClassAttri.TYPE CASTER = 5;
	public const SvtClassAttri.TYPE ASSASIN = 6;
	public const SvtClassAttri.TYPE BERSERKER = 7;
	public const SvtClassAttri.TYPE SHIELDER = 8;
	public const SvtClassAttri.TYPE RULER = 9;
	public const SvtClassAttri.TYPE ALTEREGO = 10;
	public const SvtClassAttri.TYPE AVENGER = 11;
	public const SvtClassAttri.TYPE BEAST = 12;
	public const SvtClassAttri.TYPE MOONCANCER = 23;
	public const SvtClassAttri.TYPE FOREIGNER = 25;
	public const SvtClassAttri.TYPE OTHER = 1000;
	public const SvtClassAttri.TYPE ALL = 1001;
}

// Namespace: 
public class SvtClassGroupType // TypeDefIndex: 6207
{
	// Methods

	// RVA: 0x1A13D20 Offset: 0x1A13D20 VA: 0x1A13D20
	public void .ctor() { }
}

// Namespace: 
public enum SvtClassGroupType.TYPE // TypeDefIndex: 6208
{
	// Fields
	public int value__; // 0x0
	public const SvtClassGroupType.TYPE NORMAL = 1;
	public const SvtClassGroupType.TYPE OTHER = 2;
	public const SvtClassGroupType.TYPE ALL = 3;
}

// Namespace: 
public static class SvtType // TypeDefIndex: 6209
{
	// Methods

	// RVA: 0x15E59B0 Offset: 0x15E59B0 VA: 0x15E59B0
	public static bool IsServant(SvtType.Type type) { }

	// RVA: 0x15E59D8 Offset: 0x15E59D8 VA: 0x15E59D8
	public static bool IsKeepServant(SvtType.Type type) { }

	// RVA: 0x15E5A00 Offset: 0x15E5A00 VA: 0x15E5A00
	public static bool IsKeepServantEquip(SvtType.Type type) { }

	// RVA: 0x15E5A18 Offset: 0x15E5A18 VA: 0x15E5A18
	public static bool IsOrganization(SvtType.Type type) { }

	// RVA: 0x15E5A28 Offset: 0x15E5A28 VA: 0x15E5A28
	public static bool IsServantCollection(SvtType.Type type) { }

	// RVA: 0x15E5A50 Offset: 0x15E5A50 VA: 0x15E5A50
	public static bool IsLock(SvtType.Type type) { }

	// RVA: 0x15E5A78 Offset: 0x15E5A78 VA: 0x15E5A78
	public static bool IsServantEquip(SvtType.Type type) { }

	// RVA: 0x15E5A84 Offset: 0x15E5A84 VA: 0x15E5A84
	public static bool IsCombineMaterial(SvtType.Type type) { }

	// RVA: 0x15E5A90 Offset: 0x15E5A90 VA: 0x15E5A90
	public static bool IsStatusUp(SvtType.Type type) { }

	// RVA: 0x15E5A9C Offset: 0x15E5A9C VA: 0x15E5A9C
	public static bool IsSvtEqMaterial(SvtType.Type type) { }

	// RVA: 0x15E5AA8 Offset: 0x15E5AA8 VA: 0x15E5AA8
	public static bool IsExpUp(SvtType.Type type) { }

	// RVA: 0x15E5AC0 Offset: 0x15E5AC0 VA: 0x15E5AC0
	public static bool IsEnemy(SvtType.Type type) { }

	// RVA: 0x15E5ACC Offset: 0x15E5ACC VA: 0x15E5ACC
	public static bool IsEnemyCollectionDetail(SvtType.Type type) { }

	// RVA: 0x15E5AD8 Offset: 0x15E5AD8 VA: 0x15E5AD8
	public static bool IsEnemy(int type) { }

	// RVA: 0x15E5AE4 Offset: 0x15E5AE4 VA: 0x15E5AE4
	public static bool IsAll(int classId) { }

	// RVA: 0x15E5AF0 Offset: 0x15E5AF0 VA: 0x15E5AF0
	public static bool IsCommandCode(SvtType.Type type) { }

	// RVA: 0x15E5AFC Offset: 0x15E5AFC VA: 0x15E5AFC
	public static bool IsSvtMaterialTd(SvtType.Type type) { }
}

// Namespace: 
public enum SvtType.Type // TypeDefIndex: 6210
{
	// Fields
	public int value__; // 0x0
	public const SvtType.Type NORMAL = 1;
	public const SvtType.Type HEROINE = 2;
	public const SvtType.Type COMBINE_MATERIAL = 3;
	public const SvtType.Type ENEMY = 4;
	public const SvtType.Type ENEMY_COLLECTION = 5;
	public const SvtType.Type SERVANT_EQUIP = 6;
	public const SvtType.Type STATUS_UP = 7;
	public const SvtType.Type SVT_EQUIP_MATERIAL = 8;
	public const SvtType.Type ENEMY_COLLECTION_DETAIL = 9;
	public const SvtType.Type ALL = 10;
	public const SvtType.Type COMMAND_CODE = 11;
	public const SvtType.Type SVT_MATERIAL_TD = 12;
}

// Namespace: 
public class SvtVoiceType // TypeDefIndex: 6211
{
	// Methods

	// RVA: 0x15E5B20 Offset: 0x15E5B20 VA: 0x15E5B20
	public void .ctor() { }
}

// Namespace: 
public enum SvtVoiceType.Type // TypeDefIndex: 6212
{
	// Fields
	public int value__; // 0x0
	public const SvtVoiceType.Type HOME = 1;
	public const SvtVoiceType.Type GROETH = 2;
	public const SvtVoiceType.Type FIRST_GET = 3;
	public const SvtVoiceType.Type EVENT_JOIN = 4;
	public const SvtVoiceType.Type EVENT_REWARD = 5;
	public const SvtVoiceType.Type BATTLE = 6;
	public const SvtVoiceType.Type TREASURE_DEVICE = 7;
	public const SvtVoiceType.Type MASTER_MISSION = 8;
	public const SvtVoiceType.Type EVENT_SHOP = 9;
	public const SvtVoiceType.Type HOME_COSTUME = 10;
	public const SvtVoiceType.Type BOX_GACHA_TALK = 11;
	public const SvtVoiceType.Type BATTLE_ENTRY = 12;
	public const SvtVoiceType.Type BATTLE_WIN = 13;
	public const SvtVoiceType.Type EVENT_TOWER_REWARD = 14;
	public const SvtVoiceType.Type GUIDE = 15;
	public const SvtVoiceType.Type EVENT_DAILY_POINT = 16;
	public const SvtVoiceType.Type TDDAMAGE = 17;
	public const SvtVoiceType.Type TREASURE_BOX = 18;
	public const SvtVoiceType.Type SUM = 19;
}

// Namespace: 
public class Target // TypeDefIndex: 6213
{
	// Methods

	// RVA: 0x15E817C Offset: 0x15E817C VA: 0x15E817C
	public void .ctor() { }

	// RVA: 0x15E8184 Offset: 0x15E8184 VA: 0x15E8184
	public static bool Check(Target.TYPE cktype, int type) { }

	// RVA: 0x15E8190 Offset: 0x15E8190 VA: 0x15E8190
	public static int[] getTargetIds(BattleData bdata, int actorId, int targetId, int pttargetId, Target.TYPE tgType, int[] tvals) { }

	// RVA: 0x15E81C0 Offset: 0x15E81C0 VA: 0x15E81C0
	public static int[] getTargetIds(BattleData bdata, int actorId, int targetId, int pttargetId, int type, BattleLogicTask.ACTORTYPE taskActorType = 0, bool checkRevengeId = False, int[] tvals, bool isIncludeIgnoreIndiv = False) { }

	// RVA: 0x15E9500 Offset: 0x15E9500 VA: 0x15E9500
	protected static int[] getOrderOneTargetIdArray(int[] checkIdArray, int excludeId, bool isOrderDesc = False, bool isPrev = False) { }

	// RVA: 0x15E9244 Offset: 0x15E9244 VA: 0x15E9244
	public static bool IsActorPlayerSide(BattleData bData, int actorId, BattleLogicTask.ACTORTYPE taskActorType) { }

	// RVA: 0x15E9640 Offset: 0x15E9640 VA: 0x15E9640
	public static bool CheckAressSkill(BattleData bData, BattleLogicTask.ACTORTYPE taskActorType) { }

	// RVA: 0x15E976C Offset: 0x15E976C VA: 0x15E976C
	public static bool isChoose(int targetType) { }

	// RVA: 0x15E9784 Offset: 0x15E9784 VA: 0x15E9784
	public static bool isSubChoose(int targetType) { }

	// RVA: 0x15E9794 Offset: 0x15E9794 VA: 0x15E9794
	public static bool isEnemy(int targetType) { }

	// RVA: 0x15E97E8 Offset: 0x15E97E8 VA: 0x15E97E8
	public static bool isFieldEnemy(int targetType) { }

	// RVA: 0x15E9820 Offset: 0x15E9820 VA: 0x15E9820
	public static bool isPlayer(int targetType) { }

	// RVA: 0x15E9874 Offset: 0x15E9874 VA: 0x15E9874
	public static bool isFieldPlayer(int targetType) { }

	// RVA: 0x15E98B0 Offset: 0x15E98B0 VA: 0x15E98B0
	public static bool isAllTargets(int targetType) { }

	// RVA: 0x15E98D8 Offset: 0x15E98D8 VA: 0x15E98D8
	public static bool isCommandType(int targetType) { }

	// RVA: 0x15E92B8 Offset: 0x15E92B8 VA: 0x15E92B8
	private static TargetAggregator GetTargetAggregator(BattleData battleData, int actorId, int targetId, int pttargetId, int type, BattleLogicTask.ACTORTYPE taskActorType) { }
}

// Namespace: 
public enum Target.PlayerTypeFlag // TypeDefIndex: 6214
{
	// Fields
	public int value__; // 0x0
	public const Target.PlayerTypeFlag NONE = 0;
	public const Target.PlayerTypeFlag PLAYER = 1;
	public const Target.PlayerTypeFlag ENEMY = 2;
	public const Target.PlayerTypeFlag ALL = 3;
}

// Namespace: 
public enum Target.TYPE // TypeDefIndex: 6215
{
	// Fields
	public int value__; // 0x0
	public const Target.TYPE SELF = 0;
	public const Target.TYPE PT_ONE = 1;
	public const Target.TYPE PT_ANOTHER = 2;
	public const Target.TYPE PT_ALL = 3;
	public const Target.TYPE ENEMY = 4;
	public const Target.TYPE ENEMY_ANOTHER = 5;
	public const Target.TYPE ENEMY_ALL = 6;
	public const Target.TYPE PT_FULL = 7;
	public const Target.TYPE ENEMY_FULL = 8;
	public const Target.TYPE PT_OTHER = 9;
	public const Target.TYPE PT_ONE_OTHER = 10;
	public const Target.TYPE PT_RANDOM = 11;
	public const Target.TYPE ENEMY_OTHER = 12;
	public const Target.TYPE ENEMY_RANDOM = 13;
	public const Target.TYPE PT_OTHER_FULL = 14;
	public const Target.TYPE ENEMY_OTHER_FULL = 15;
	public const Target.TYPE PTSELECT_ONE_SUB = 16;
	public const Target.TYPE PTSELECT_SUB = 17;
	public const Target.TYPE PT_ONE_ANOTHER_RANDOM = 18;
	public const Target.TYPE PT_SELF_ANOTHER_RANDOM = 19;
	public const Target.TYPE ENEMY_ONE_ANOTHER_RANDOM = 20;
	public const Target.TYPE PT_SELF_ANOTHER_FIRST = 21;
	public const Target.TYPE PT_SELF_BEFORE = 22;
	public const Target.TYPE PT_SELF_AFTER = 23;
	public const Target.TYPE PT_SELF_ANOTHER_LAST = 24;
	public const Target.TYPE COMMAND_TYPE_SELF_TREASURE_DEVICE = 25;
	public const Target.TYPE FIELD_OTHER = 26;
	public const Target.TYPE ENEMY_ONE_NO_TARGET_NO_ACTION = 27;
	public const Target.TYPE PT_ONE_HP_LOWEST_VALUE = 28;
	public const Target.TYPE PT_ONE_HP_LOWEST_RATE = 29;
}

// Namespace: 
public class TutorialFlag // TypeDefIndex: 6216
{
	// Fields
	protected static readonly string SAVE_KEY; // 0x0
	protected static readonly string SAVE_KEY2; // 0x8
	protected static readonly string SAVE_KEY3; // 0x10
	protected static readonly string SAVE_KEY4; // 0x18
	protected static Dictionary<string, TutorialFlag.Id> flagNameList; // 0x20

	// Methods

	// RVA: 0x1E187D4 Offset: 0x1E187D4 VA: 0x1E187D4
	public void .ctor() { }

	// RVA: 0x1E187DC Offset: 0x1E187DC VA: 0x1E187DC
	public static void DeleteContinueData() { }

	// RVA: 0x1E18884 Offset: 0x1E18884 VA: 0x1E18884
	public static TutorialFlag.Id[] GetIdList() { }

	// RVA: 0x1E18A70 Offset: 0x1E18A70 VA: 0x1E18A70
	public static TutorialFlag.Id GetId(string flagIdName) { }

	// RVA: 0x1E18AFC Offset: 0x1E18AFC VA: 0x1E18AFC
	public static bool Get(string flagIdName) { }

	// RVA: 0x1E18B64 Offset: 0x1E18B64 VA: 0x1E18B64
	public static bool Get(TutorialFlag.Id flagId) { }

	// RVA: 0x1E18BC8 Offset: 0x1E18BC8 VA: 0x1E18BC8
	public static bool Get(int flagId) { }

	// RVA: 0x1E18C40 Offset: 0x1E18C40 VA: 0x1E18C40
	public static bool Get(UserGameEntity userGameEntity, int flagId) { }

	// RVA: 0x1E18CE0 Offset: 0x1E18CE0 VA: 0x1E18CE0
	public static bool Get(FollowerInfo followerInfo, int flagId) { }

	// RVA: 0x1E18D58 Offset: 0x1E18D58 VA: 0x1E18D58
	public static bool Get(OtherUserGameEntity otherUserGameEntity, int flagId) { }

	// RVA: 0x1E18DD0 Offset: 0x1E18DD0 VA: 0x1E18DD0
	public static void Set(string flagIdName) { }

	// RVA: 0x1E18E38 Offset: 0x1E18E38 VA: 0x1E18E38
	public static void Set(TutorialFlag.Id flagId) { }

	// RVA: 0x1E18E9C Offset: 0x1E18E9C VA: 0x1E18E9C
	public static void Set(int flagId) { }

	// RVA: 0x1E18F14 Offset: 0x1E18F14 VA: 0x1E18F14
	public static void Set(UserGameEntity userGameEntity, int flagId) { }

	// RVA: 0x1E18FCC Offset: 0x1E18FCC VA: 0x1E18FCC
	public static int GetProgress() { }

	// RVA: 0x1E1903C Offset: 0x1E1903C VA: 0x1E1903C
	public static void ClearProgress() { }

	// RVA: 0x1E190EC Offset: 0x1E190EC VA: 0x1E190EC
	public static void CompleteProgress() { }

	// RVA: 0x1E1914C Offset: 0x1E1914C VA: 0x1E1914C
	public static void SetProgress(TutorialFlag.Progress count) { }

	// RVA: 0x1E191B0 Offset: 0x1E191B0 VA: 0x1E191B0
	public static void SetProgress(int count) { }

	// RVA: 0x1E19268 Offset: 0x1E19268 VA: 0x1E19268
	public static bool IsProgressDone(TutorialFlag.Progress count) { }

	// RVA: 0x1E19300 Offset: 0x1E19300 VA: 0x1E19300
	public static bool IsProgressDone(int count) { }

	// RVA: 0x1E1936C Offset: 0x1E1936C VA: 0x1E1936C
	public static bool IsProgressComplete() { }

	// RVA: 0x1E19400 Offset: 0x1E19400 VA: 0x1E19400
	public static bool Get(TutorialFlag.LocalId flagId) { }

	// RVA: 0x1E1788C Offset: 0x1E1788C VA: 0x1E1788C
	public static void Set(TutorialFlag.LocalId flagId) { }

	// RVA: 0x1E194C0 Offset: 0x1E194C0 VA: 0x1E194C0
	public static bool Get(TutorialFlag.EventId flagId, int eventId) { }

	// RVA: 0x1E195B0 Offset: 0x1E195B0 VA: 0x1E195B0
	public static bool GetConfigFlg(int configFlagId) { }

	// RVA: 0x1E17998 Offset: 0x1E17998 VA: 0x1E17998
	public static void SetConfigFlg(int configFlagId) { }

	// RVA: 0x1E19670 Offset: 0x1E19670 VA: 0x1E19670
	public static bool GetGachaFlg(int gachaFlagId) { }

	// RVA: 0x1E196FC Offset: 0x1E196FC VA: 0x1E196FC
	public static void SetGachaFlg(int gachaFlagId) { }

	// RVA: 0x1E197DC Offset: 0x1E197DC VA: 0x1E197DC
	private static void .cctor() { }
}

// Namespace: 
public enum TutorialFlag.Progress // TypeDefIndex: 6217
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.Progress _1 = 1;
	public const TutorialFlag.Progress _2 = 2;
	public const TutorialFlag.Progress _3 = 3;
	public const TutorialFlag.Progress _4 = 4;
	public const TutorialFlag.Progress COMPLETE = 4;
}

// Namespace: 
public enum TutorialFlag.LocalId // TypeDefIndex: 6218
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.LocalId NULL = -1;
	public const TutorialFlag.LocalId TUTORIAL_LABEL_BOOST_ITEM = 101;
}

// Namespace: 
public enum TutorialFlag.Id // TypeDefIndex: 6219
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.Id NULL = -1;
	public const TutorialFlag.Id TUTORIAL_LABEL_STONE_GACHA = 101;
	public const TutorialFlag.Id TUTORIAL_LABEL_END = 102;
	public const TutorialFlag.Id TUTORIAL_LABEL_SHOP = 103;
	public const TutorialFlag.Id TUTORIAL_LABEL_COMBINE = 104;
	public const TutorialFlag.Id TUTORIAL_LABEL_FAVORITE1 = 105;
	public const TutorialFlag.Id TUTORIAL_LABEL_FAVORITE2 = 106;
	public const TutorialFlag.Id TUTORIAL_LABEL_GACHA_SCENE = 107;
	public const TutorialFlag.Id TUTORIAL_LABEL_GACHA_SVT_EQUIP = 108;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK_SCENE = 109;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK_SVT_EQUIP = 110;
	public const TutorialFlag.Id TUTORIAL_LABEL_EVENT_GACHA = 111;
	public const TutorialFlag.Id TUTORIAL_LABEL_EVENT_REWARD = 112;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK_IN_SVT_EQUIP = 113;
	public const TutorialFlag.Id TUTORIAL_LABEL_EVENT_MISSION = 114;
	public const TutorialFlag.Id TUTORIAL_LABEL_MASHU_CHANGE = 115;
	public const TutorialFlag.Id TUTORIAL_LABEL_IBARAKI_RAID_TERMINAL = 116;
	public const TutorialFlag.Id TUTORIAL_LABEL_IBARAKI_RAID_BATTLE = 117;
	public const TutorialFlag.Id TUTORIAL_LABEL_IBARAKI_RAID_EVENT_REWARD = 118;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_MAP = 119;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_BATTLE = 120;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_EVENT_REWARD = 121;
	public const TutorialFlag.Id TUTORIAL_LABEL_RAID2_BATTLE_2 = 122;
	public const TutorialFlag.Id TUTORIAL_LABEL_SVT_LEAVE = 126;
	public const TutorialFlag.Id TUTORIAL_LABEL_FES = 127;
	public const TutorialFlag.Id TUTORIAL_LABEL_MYROOM = 128;
	public const TutorialFlag.Id TUTORIAL_LABEL_CALDEA_GATE = 129;
	public const TutorialFlag.Id TUTORIAL_LABEL_DAILY_QUEST = 130;
	public const TutorialFlag.Id TUTORIAL_LABEL_FREIND_STORY_QUEST = 131;
	public const TutorialFlag.Id TUTORIAL_LABEL_PRESENT_BOX = 201;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK = 202;
	public const TutorialFlag.Id TUTORIAL_LABEL_CHAPTER2_PROLOGUE = 204;
	public const TutorialFlag.Id TUTORIAL_LABEL_DECK2 = 205;
	public const TutorialFlag.Id TUTORIAL_LABEL_FIX_COSTUME = 206;
	public const TutorialFlag.Id TUTORIAL_LABEL_MASTER_MISSION = 207;
}

// Namespace: 
public enum TutorialFlag.EventId // TypeDefIndex: 6220
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.EventId NULL = -1;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BOOST_ITEM = 0;
	public const TutorialFlag.EventId TUTORIAL_LABEL_HELP = 1;
	public const TutorialFlag.EventId TUTORIAL_LABEL_QUEST = 2;
	public const TutorialFlag.EventId TUTORIAL_LABEL_RESET_QUEST = 3;
	public const TutorialFlag.EventId TUTORIAL_LABEL_REWARD_HELP = 4;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SHOP_HELP = 5;
	public const TutorialFlag.EventId TUTORIAL_LABEL_MISSION_SPOT_OPEN = 6;
	public const TutorialFlag.EventId TUTORIAL_LABEL_MISSION_OPEN_ANOTHER = 7;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BATTLE_START = 8;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BATTLE_TURN = 9;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BATTLE_RESULT = 10;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BATTLE_RESULT_WIN = 11;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BATTLE_RESULT_LOSE = 12;
	public const TutorialFlag.EventId TUTORIAL_LABEL_QUEST2 = 13;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVTGET = 14;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SHOP = 15;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SUPPORT_SELECT = 16;
	public const TutorialFlag.EventId TUTORIAL_LABEL_EVENT_TAB1_EFFECT = 25;
	public const TutorialFlag.EventId TUTORIAL_LABEL_EVENT_TAB2_EFFECT = 26;
	public const TutorialFlag.EventId TUTORIAL_LABEL_EVENT_TAB3_EFFECT = 27;
	public const TutorialFlag.EventId TUTORIAL_LABEL_BATTLE_WAVE = 28;
	public const TutorialFlag.EventId TUTORIAL_LABEL_COSTUME = 29;
	public const TutorialFlag.EventId TUTORIAL_LABEL_OPEN_SORT_WINDOW = 30;
	public const TutorialFlag.EventId TUTORIAL_LABEL_GACHA = 32;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_COMBINE = 33;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_LIMIT_UP = 34;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_SKILL = 35;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_EQUIP = 36;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_NP = 37;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_LVEXCEED = 38;
	public const TutorialFlag.EventId TUTORIAL_LABEL_OPEN_CHOICE_WINDOW = 39;
	public const TutorialFlag.EventId TUTORIAL_LABEL_OPEN_SMART_CHOICE_WINDOW = 40;
	public const TutorialFlag.EventId TUTORIAL_LABEL_EVENT_TAB4 = 41;
	public const TutorialFlag.EventId TUTORIAL_LABEL_EVENT_TAB4_HELP = 42;
	public const TutorialFlag.EventId TUTORIAL_LABEL_OPEN_QUEST_START = 43;
	public const TutorialFlag.EventId TUTORIAL_LABEL_OPEN_SUPPORT_SETTING = 45;
	public const TutorialFlag.EventId TUTORIAL_LABEL_SVT_EQUIP_FRIENDSHIP_SELECT = 52;
	public const TutorialFlag.EventId SVT_COMBINE_LIMIT_SPECIAL = 53;
	public const TutorialFlag.EventId WAR_BOARD_MAP = 59;
	public const TutorialFlag.EventId WAR_BOARD_SETUP = 60;
	public const TutorialFlag.EventId WAR_BOARD_START = 61;
	public const TutorialFlag.EventId WAR_BOARD_MAP_SETUP = 62;
	public const TutorialFlag.EventId LOGIN_BONUS = 63;
	public const TutorialFlag.EventId OPEN_SPECIFIC_QUEST = 64;
	public const TutorialFlag.EventId QUEST4 = 65;
}

// Namespace: 
public enum TutorialFlag.ImageId // TypeDefIndex: 6221
{
	// Fields
	public int value__; // 0x0
	public const TutorialFlag.ImageId NULL = 0;
	public const TutorialFlag.ImageId SUMMON_TOP = 1;
	public const TutorialFlag.ImageId FIRST_EQUIP = 2;
	public const TutorialFlag.ImageId FORMATION_TOP = 3;
	public const TutorialFlag.ImageId EQUIP_INFO_1 = 4;
	public const TutorialFlag.ImageId EQUIP_INFO_2 = 5;
	public const TutorialFlag.ImageId SHOP_TOP = 6;
	public const TutorialFlag.ImageId COMBINE_TOP = 7;
	public const TutorialFlag.ImageId BATTLE_STATUS = 8;
	public const TutorialFlag.ImageId BATTLE_COMMANDSPELL = 9;
	public const TutorialFlag.ImageId BATTLE_MENU = 10;
	public const TutorialFlag.ImageId EVENT_GACHA = 11;
	public const TutorialFlag.ImageId EVENT_REWARD = 12;
	public const TutorialFlag.ImageId EVENT_MISSION = 13;
	public const TutorialFlag.ImageId EVENT_RAID = 14;
	public const TutorialFlag.ImageId TERMINAL_RAID_1 = 15;
	public const TutorialFlag.ImageId TERMINAL_RAID_2 = 16;
	public const TutorialFlag.ImageId TERMINAL_RAID_3 = 17;
	public const TutorialFlag.ImageId BOOST_ITEM = 18;
	public const TutorialFlag.ImageId ANONYMOUS_HELP = 19;
	public const TutorialFlag.ImageId RARE_PRI_HELP = 20;
	public const TutorialFlag.ImageId CALDEA_FOLDER_GATE = 21;
	public const TutorialFlag.ImageId CALDEA_FOLDER_WEEKLY = 22;
	public const TutorialFlag.ImageId SUPPORT_FORMATION = 23;
	public const TutorialFlag.ImageId CALDEA_FOLDER_FRIEND_STORY = 33;
	public const TutorialFlag.ImageId DECK_1 = 37;
	public const TutorialFlag.ImageId DECK_2 = 38;
	public const TutorialFlag.ImageId PRESENT_BOX_1 = 39;
	public const TutorialFlag.ImageId PRESENT_BOX_2 = 40;
	public const TutorialFlag.ImageId PRESENT_BOX_3 = 41;
	public const TutorialFlag.ImageId MASTER_MISSION = 42;
	public const TutorialFlag.ImageId SELECT_SORT_HELP = 43;
	public const TutorialFlag.ImageId SVT_SKILL_COMBINE_HELP = 44;
	public const TutorialFlag.ImageId GOLEM_SKILL_HELP = 45;
	public const TutorialFlag.ImageId OVERWRITE_LIMIT_HELP = 46;
	public const TutorialFlag.ImageId SPECIAL_ITEM_HELP = 47;
	public const TutorialFlag.ImageId COIN_ROOM = 57;
	public const TutorialFlag.ImageId DECK2_1 = 644;
}

// Namespace: 
public class UserShopFlag // TypeDefIndex: 6222
{
	// Methods

	// RVA: 0x1B35F2C Offset: 0x1B35F2C VA: 0x1B35F2C
	public void .ctor() { }
}

// Namespace: 
public enum UserShopFlag.FlagKind // TypeDefIndex: 6223
{
	// Fields
	public int value__; // 0x0
	public const UserShopFlag.FlagKind RECEIVED_SHOP_ITEM = 1;
	public const UserShopFlag.FlagKind USED_ADD_BUFF_ITEM = 2;
	public const UserShopFlag.FlagKind RETURN_EXCHANGE_ITEM = 3;
	public const UserShopFlag.FlagKind RETURN_RARE_PRI_SHOP = 4;
}

// Namespace: 
public enum UserShopFlag.Flag // TypeDefIndex: 6224
{
	// Fields
	public int value__; // 0x0
	public const UserShopFlag.Flag RECEIVED_SHOP_ITEM = 2;
	public const UserShopFlag.Flag USED_ADD_BUFF_ITEM = 4;
	public const UserShopFlag.Flag RETURN_EXCHANGE_ITEM = 8;
	public const UserShopFlag.Flag RETURN_RARE_PRI_SHOP = 16;
}

// Namespace: 
public class UserStatusFlag // TypeDefIndex: 6225
{
	// Methods

	// RVA: 0x1B36488 Offset: 0x1B36488 VA: 0x1B36488
	public void .ctor() { }

	// RVA: 0x1B36490 Offset: 0x1B36490 VA: 0x1B36490
	public static int GetAutoSaleBitFlag(int flag) { }
}

// Namespace: 
public enum UserStatusFlag.Kind // TypeDefIndex: 6226
{
	// Fields
	public int value__; // 0x0
	public const UserStatusFlag.Kind COMBINE_MATERIAL_C = 0;
	public const UserStatusFlag.Kind COMBINE_MATERIAL_UC = 1;
	public const UserStatusFlag.Kind COMBINE_MATERIAL_R = 2;
	public const UserStatusFlag.Kind STATUS_UP_C = 3;
	public const UserStatusFlag.Kind STATUS_UP_UC = 4;
	public const UserStatusFlag.Kind STATUS_UP_R = 5;
	public const UserStatusFlag.Kind SVT_EQUIP_C = 6;
	public const UserStatusFlag.Kind SVT_EQUIP_UC = 7;
	public const UserStatusFlag.Kind SVT_EQUIP_R = 8;
	public const UserStatusFlag.Kind COSTUME_DISPLAY_SETTING = 9;
	public const UserStatusFlag.Kind FIRST_NP_SPEED = 10;
	public const UserStatusFlag.Kind FIX_MAIN_SUPPORT_DECK = 11;
	public const UserStatusFlag.Kind FIX_EVENT_SUPPORT_DECK = 12;
	public const UserStatusFlag.Kind QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_C = 13;
	public const UserStatusFlag.Kind QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_UC = 14;
	public const UserStatusFlag.Kind QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_R = 15;
	public const UserStatusFlag.Kind QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_SR = 16;
	public const UserStatusFlag.Kind RANDOM_LIMIT_COUNT = 17;
	public const UserStatusFlag.Kind RANDOM_LIMIT_COUNT_SUPPORT = 18;
	public const UserStatusFlag.Kind SVT_LIMIT_SPOILER_PROTECTION = 19;
	public const UserStatusFlag.Kind SVT_LIMIT_DISPLAY_SETTING = 20;
	public const UserStatusFlag.Kind BIRTHDAY_SETTING = 21;
}

// Namespace: 
public enum UserStatusFlag.Mask // TypeDefIndex: 6227
{
	// Fields
	public int value__; // 0x0
	public const UserStatusFlag.Mask COMBINE_MATERIAL_C = 1;
	public const UserStatusFlag.Mask COMBINE_MATERIAL_UC = 2;
	public const UserStatusFlag.Mask COMBINE_MATERIAL_R = 4;
	public const UserStatusFlag.Mask STATUS_UP_C = 8;
	public const UserStatusFlag.Mask STATUS_UP_UC = 16;
	public const UserStatusFlag.Mask STATUS_UP_R = 32;
	public const UserStatusFlag.Mask SVT_EQUIP_C = 64;
	public const UserStatusFlag.Mask SVT_EQUIP_UC = 128;
	public const UserStatusFlag.Mask SVT_EQUIP_R = 256;
	public const UserStatusFlag.Mask COSTUME_DISPLAY_SETTING = 512;
	public const UserStatusFlag.Mask FIRST_NP_SPEED = 1024;
	public const UserStatusFlag.Mask FIX_MAIN_SUPPORT_DECK = 2048;
	public const UserStatusFlag.Mask FIX_EVENT_SUPPORT_DECK = 4096;
	public const UserStatusFlag.Mask QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_C = 8192;
	public const UserStatusFlag.Mask QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_UC = 16384;
	public const UserStatusFlag.Mask QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_R = 32768;
	public const UserStatusFlag.Mask QUEST_DROP_AUTOSEL_COMBINE_MATERIAL_SR = 65536;
	public const UserStatusFlag.Mask RANDOM_LIMIT_COUNT = 131072;
	public const UserStatusFlag.Mask RANDOM_LIMIT_COUNT_SUPPORT = 262144;
	public const UserStatusFlag.Mask SVT_LIMIT_SPOILER_PROTECTION = 524288;
	public const UserStatusFlag.Mask SVT_LIMIT_DISPLAY_SETTING = 1048576;
	public const UserStatusFlag.Mask BIRTHDAY_SETTING = 2097152;
}

// Namespace: 
