
// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F54 Offset: 0xC43F54 VA: 0xC43F54
private sealed class BattleServantData.<getTempSkillInfo>c__AnonStorey5 // TypeDefIndex: 8975
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x16738A0 Offset: 0x16738A0 VA: 0x16738A0
	public void .ctor() { }

	// RVA: 0x167F6C8 Offset: 0x167F6C8 VA: 0x167F6C8
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F64 Offset: 0xC43F64 VA: 0xC43F64
private sealed class BattleServantData.<updateNpGauge>c__AnonStorey6 // TypeDefIndex: 8976
{
	// Fields
	internal int[] incNpArray; // 0x10
	internal int index; // 0x18
	internal BattleServantData $this; // 0x20

	// Methods

	// RVA: 0x1678908 Offset: 0x1678908 VA: 0x1678908
	public void .ctor() { }

	// RVA: 0x167F874 Offset: 0x167F874 VA: 0x167F874
	internal void <>m__0(IEventMessageRecieve reciever, BaseEventData eventData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F74 Offset: 0xC43F74 VA: 0xC43F74
private sealed class BattleServantData.<updateBuff>c__AnonStorey7 // TypeDefIndex: 8977
{
	// Fields
	internal bool doAuraUpdate; // 0x10
	internal BattleServantData $this; // 0x18

	// Methods

	// RVA: 0x1678E50 Offset: 0x1678E50 VA: 0x1678E50
	public void .ctor() { }

	// RVA: 0x167F7A0 Offset: 0x167F7A0 VA: 0x167F7A0
	internal void <>m__0(IEventMessageRecieve reciever, BaseEventData eventData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F84 Offset: 0xC43F84 VA: 0xC43F84
private sealed class BattleServantData.<GetCommandCodeInfo>c__AnonStorey8 // TypeDefIndex: 8978
{
	// Fields
	internal long userCommandCodeId; // 0x10

	// Methods

	// RVA: 0x167E7B8 Offset: 0x167E7B8 VA: 0x167E7B8
	public void .ctor() { }

	// RVA: 0x167F3C4 Offset: 0x167F3C4 VA: 0x167F3C4
	internal bool <>m__0(CommandCodeInfo c) { }
}

// Namespace: 
public class AiNpcBattleServantData : BattleServantData // TypeDefIndex: 8979
{
	// Fields
	protected NpcAiState[] npcAiStates; // 0x358
	[CompilerGeneratedAttribute] // RVA: 0xC63F90 Offset: 0xC63F90 VA: 0xC63F90
	[DebuggerBrowsableAttribute] // RVA: 0xC63F90 Offset: 0xC63F90 VA: 0xC63F90
	private AiState <CurrentAiState>k__BackingField; // 0x360
	[CompilerGeneratedAttribute] // RVA: 0xC63FCC Offset: 0xC63FCC VA: 0xC63FCC
	[DebuggerBrowsableAttribute] // RVA: 0xC63FCC Offset: 0xC63FCC VA: 0xC63FCC
	private int <ActCount>k__BackingField; // 0x368
	[CompilerGeneratedAttribute] // RVA: 0xC64008 Offset: 0xC64008 VA: 0xC64008
	[DebuggerBrowsableAttribute] // RVA: 0xC64008 Offset: 0xC64008 VA: 0xC64008
	private int <TotalActCount>k__BackingField; // 0x36C
	protected HashSet<BattleLogicTask.ACTIONTYPE> hashCheckingActType; // 0x370
	[CompilerGeneratedAttribute] // RVA: 0xC64044 Offset: 0xC64044 VA: 0xC64044
	private static Func<NpcAiState, AiState.SaveData> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC64054 Offset: 0xC64054 VA: 0xC64054
	private static Func<int, NpcAiState> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC64064 Offset: 0xC64064 VA: 0xC64064
	private static Action<NpcAiState> <>f__am$cache2; // 0x10

	// Properties
	public AiState CurrentAiState { get; set; }
	public int ActCount { get; set; }
	public int TotalActCount { get; set; }
	public override int hp { get; set; }
	public override int resultHp { get; set; }
	public override int reducedhp { get; set; }
	public virtual BattleLogicTask.ACTORTYPE ActorType { get; }

	// Methods

	// RVA: 0x1073494 Offset: 0x1073494 VA: 0x1073494
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD290 Offset: 0xCCD290 VA: 0xCCD290
	// RVA: 0x107353C Offset: 0x107353C VA: 0x107353C
	public AiState get_CurrentAiState() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD2A0 Offset: 0xCCD2A0 VA: 0xCCD2A0
	// RVA: 0x1073544 Offset: 0x1073544 VA: 0x1073544
	private void set_CurrentAiState(AiState value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD2B0 Offset: 0xCCD2B0 VA: 0xCCD2B0
	// RVA: 0x107354C Offset: 0x107354C VA: 0x107354C
	public int get_ActCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD2C0 Offset: 0xCCD2C0 VA: 0xCCD2C0
	// RVA: 0x1073554 Offset: 0x1073554 VA: 0x1073554
	private void set_ActCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD2D0 Offset: 0xCCD2D0 VA: 0xCCD2D0
	// RVA: 0x107355C Offset: 0x107355C VA: 0x107355C
	public int get_TotalActCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD2E0 Offset: 0xCCD2E0 VA: 0xCCD2E0
	// RVA: 0x1073564 Offset: 0x1073564 VA: 0x1073564
	private void set_TotalActCount(int value) { }

	// RVA: 0x107356C Offset: 0x107356C VA: 0x107356C Slot: 9
	public override int get_hp() { }

	// RVA: 0x1073574 Offset: 0x1073574 VA: 0x1073574 Slot: 10
	public override void set_hp(int value) { }

	// RVA: 0x1073578 Offset: 0x1073578 VA: 0x1073578 Slot: 13
	public override int get_resultHp() { }

	// RVA: 0x1073580 Offset: 0x1073580 VA: 0x1073580 Slot: 14
	public override void set_resultHp(int value) { }

	// RVA: 0x1073584 Offset: 0x1073584 VA: 0x1073584 Slot: 11
	public override int get_reducedhp() { }

	// RVA: 0x107358C Offset: 0x107358C VA: 0x107358C Slot: 12
	public override void set_reducedhp(int value) { }

	// RVA: 0x1073590 Offset: 0x1073590 VA: 0x1073590 Slot: 22
	public virtual BattleLogicTask.ACTORTYPE get_ActorType() { }

	// RVA: 0x1073598 Offset: 0x1073598 VA: 0x1073598 Slot: 17
	public override AiState getAiState() { }

	// RVA: 0x10735B0 Offset: 0x10735B0 VA: 0x10735B0 Slot: 18
	public override int getThisTurnActCount() { }

	// RVA: 0x10735B8 Offset: 0x10735B8 VA: 0x10735B8 Slot: 19
	public override double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams) { }

	// RVA: 0x10735C0 Offset: 0x10735C0 VA: 0x10735C0 Slot: 15
	public override BattleServantData.SaveData getSaveData() { }

	// RVA: 0x10736FC Offset: 0x10736FC VA: 0x10736FC Slot: 16
	public override bool setSaveData(BattleServantData.SaveData save) { }

	// RVA: 0x1073868 Offset: 0x1073868 VA: 0x1073868
	public void SetNpcServant(BattleData data, BattleDeckServantData deckSvt, int[] aiIds, BattleServantData.SaveData saveSvt) { }

	// RVA: 0x10738F4 Offset: 0x10738F4 VA: 0x10738F4
	protected void InitAiStates(int[] aiIds) { }

	// RVA: 0x10739DC Offset: 0x10739DC VA: 0x10739DC
	public bool UpdateAiStateTargetIndex(int index) { }

	// RVA: 0x1073A54 Offset: 0x1073A54 VA: 0x1073A54
	public void AddCheckAiActType(BattleLogicTask.ACTIONTYPE actType) { }

	// RVA: 0x1073AC4 Offset: 0x1073AC4 VA: 0x1073AC4
	public bool RemoveCheckAiActType(BattleLogicTask.ACTIONTYPE actType) { }

	// RVA: 0x1073B64 Offset: 0x1073B64 VA: 0x1073B64
	public void AddActCount() { }

	// RVA: 0x1073B80 Offset: 0x1073B80 VA: 0x1073B80
	public void ResetActCount() { }

	// RVA: 0x1073B88 Offset: 0x1073B88 VA: 0x1073B88
	public void TurnProgress(bool isEndEnemyTurn, int[] fieldIndiv, BattleLogic logic) { }

	// RVA: 0x1073C90 Offset: 0x1073C90 VA: 0x1073C90 Slot: 20
	public override void PrevActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor) { }

	// RVA: 0x1073CC8 Offset: 0x1073CC8 VA: 0x1073CC8 Slot: 21
	public override void AfterActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor, BattlePerformance perf) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD2F0 Offset: 0xCCD2F0 VA: 0xCCD2F0
	// RVA: 0x1073E78 Offset: 0x1073E78 VA: 0x1073E78
	private static AiState.SaveData <getSaveData>m__0(NpcAiState state) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD300 Offset: 0xCCD300 VA: 0xCCD300
	// RVA: 0x1073FBC Offset: 0x1073FBC VA: 0x1073FBC
	private static NpcAiState <InitAiStates>m__1(int id) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD310 Offset: 0xCCD310 VA: 0xCCD310
	// RVA: 0x1074020 Offset: 0x1074020 VA: 0x1074020
	private static void <TurnProgress>m__2(NpcAiState state) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F94 Offset: 0xC43F94 VA: 0xC43F94
private sealed class AiNpcBattleServantData.<setSaveData>c__AnonStorey0 // TypeDefIndex: 8980
{
	// Fields
	internal BattleServantData.SaveData save; // 0x10
	internal int index; // 0x18

	// Methods

	// RVA: 0x1073860 Offset: 0x1073860 VA: 0x1073860
	public void .ctor() { }

	// RVA: 0x1074060 Offset: 0x1074060 VA: 0x1074060
	internal void <>m__0(NpcAiState npcAiState) { }
}

// Namespace: 
public class BattleSkillInfoData // TypeDefIndex: 8981
{
	// Fields
	public BattleSkillInfoData.TYPE type; // 0x10
	public int index; // 0x14
	public int svtUniqueId; // 0x18
	public bool isPassive; // 0x1C
	public bool isCharge; // 0x1D
	protected int _skillId; // 0x20
	public int skilllv; // 0x24
	public int chargeTurn; // 0x28
	public int priority; // 0x2C
	public int sealedTurn; // 0x30
	public bool isUseSkill; // 0x34
	public int strengthStatus; // 0x38
	public int skillRecord; // 0x3C
	public int itemImageId; // 0x40
	public long userCommandCodeId; // 0x48
	public bool isAdd; // 0x50
	protected int cutInId; // 0x54
	public int changeTDCommandType; // 0x58
	public const string ChangeTDCommandTypeKey = "ChangeTDCommandType";
	public int commonReleaseCondId; // 0x5C
	public int lossCommandSpellValue; // 0x60
	private Nullable<bool> hasCond; // 0x64
	private CommonReleaseEntity commonReleaseEntity; // 0x68

	// Properties
	public virtual int skillId { get; set; }

	// Methods

	// RVA: 0x15702C0 Offset: 0x15702C0 VA: 0x15702C0
	public void .ctor() { }

	// RVA: 0x15702DC Offset: 0x15702DC VA: 0x15702DC Slot: 4
	public virtual void set_skillId(int value) { }

	// RVA: 0x15702E4 Offset: 0x15702E4 VA: 0x15702E4 Slot: 5
	public virtual int get_skillId() { }

	// RVA: 0x15702EC Offset: 0x15702EC VA: 0x15702EC Slot: 3
	public override string ToString() { }

	// RVA: 0x15708AC Offset: 0x15708AC VA: 0x15708AC
	public int getInfoId() { }

	// RVA: 0x156A7EC Offset: 0x156A7EC VA: 0x156A7EC
	public int getChargeTurn() { }

	// RVA: 0x15708BC Offset: 0x15708BC VA: 0x15708BC Slot: 6
	public virtual int getCutInId() { }

	// RVA: 0x15709FC Offset: 0x15709FC VA: 0x15709FC
	public string[] getSkillCutInVoices() { }

	// RVA: 0x1570B24 Offset: 0x1570B24 VA: 0x1570B24
	public string[] getSkillCutInPrefabInfo() { }

	// RVA: 0x1570C4C Offset: 0x1570C4C VA: 0x1570C4C
	public Vector3[] getSkillCutInPrefabOffsets() { }

	// RVA: 0x1570D74 Offset: 0x1570D74 VA: 0x1570D74
	public Vector3[] getSkillCutInPrefabSizes() { }

	// RVA: 0x1570E9C Offset: 0x1570E9C VA: 0x1570E9C
	public bool getSkillCutInCamPlayerAll() { }

	// RVA: 0x1570FC8 Offset: 0x1570FC8 VA: 0x1570FC8
	public bool getSkillCutInCamField() { }

	// RVA: 0x15710F4 Offset: 0x15710F4 VA: 0x15710F4
	public int getSkillCutInMessageMode() { }

	// RVA: 0x157121C Offset: 0x157121C VA: 0x157121C
	public bool isChargeOK() { }

	// RVA: 0x156BBFC Offset: 0x156BBFC VA: 0x156BBFC
	public bool isItemIcon() { }

	// RVA: 0x1571234 Offset: 0x1571234 VA: 0x1571234
	public bool isServantSkill() { }

	// RVA: 0x1571254 Offset: 0x1571254 VA: 0x1571254
	public void checkSkillCharge() { }

	// RVA: 0x1571270 Offset: 0x1571270 VA: 0x1571270
	public bool TurnProgress(int turnCount, int max = 0) { }

	// RVA: 0x15712E0 Offset: 0x15712E0 VA: 0x15712E0
	public void TurnExtend(int turnCount, int max = 999) { }

	// RVA: 0x1571318 Offset: 0x1571318 VA: 0x1571318
	public void TurnExtendForDelay(int turnCount, int max = 999) { }

	// RVA: 0x1571350 Offset: 0x1571350 VA: 0x1571350
	public bool IsContainsCommandTypeTarget() { }

	// RVA: 0x15714EC Offset: 0x15714EC VA: 0x15714EC
	public bool IsTargetTypeEnemy() { }

	// RVA: 0x1571684 Offset: 0x1571684 VA: 0x1571684
	public bool ExistsNoTargetNoActionType() { }

	// RVA: 0x1571810 Offset: 0x1571810 VA: 0x1571810
	public int[] GetAddIndiv() { }

	// RVA: 0x15718E4 Offset: 0x15718E4 VA: 0x15718E4 Slot: 7
	public virtual void PreLoad() { }

	// RVA: 0x15719E8 Offset: 0x15719E8 VA: 0x15719E8 Slot: 8
	public virtual void UnLoad() { }

	// RVA: 0x1571AB8 Offset: 0x1571AB8 VA: 0x1571AB8 Slot: 9
	public virtual BattleSkillInfoData[] GetLoadArray() { }

	// RVA: 0x1571B68 Offset: 0x1571B68 VA: 0x1571B68 Slot: 10
	public virtual void PreAddProcess(BattleServantData svtData) { }

	// RVA: 0x1571B6C Offset: 0x1571B6C VA: 0x1571B6C Slot: 11
	public virtual bool IsChangeable() { }

	// RVA: 0x1571B74 Offset: 0x1571B74 VA: 0x1571B74 Slot: 12
	public virtual void UseSkill() { }

	// RVA: 0x1571B78 Offset: 0x1571B78 VA: 0x1571B78 Slot: 13
	public virtual BaseMotionSkip MakeSkillSkip() { }

	// RVA: 0x1571B80 Offset: 0x1571B80 VA: 0x1571B80 Slot: 14
	protected virtual BaseMotionSkip CommonMakeSkillSkip() { }

	// RVA: 0x1571C4C Offset: 0x1571C4C VA: 0x1571C4C
	public static BattleSkillInfoData MakeSkillData(BattleSkillInfoData.TYPE type) { }

	// RVA: 0x156C3DC Offset: 0x156C3DC VA: 0x156C3DC
	public bool HasCond() { }

	// RVA: 0x156C554 Offset: 0x156C554 VA: 0x156C554
	public int GetCondItemId() { }

	// RVA: 0x1570024 Offset: 0x1570024 VA: 0x1570024
	public int GetCondItemNumber() { }

	// RVA: 0x156A7FC Offset: 0x156A7FC VA: 0x156A7FC
	public bool IsOpenCond() { }

	// RVA: 0x1571D10 Offset: 0x1571D10 VA: 0x1571D10
	public int getLossCutInId() { }

	// RVA: 0x1571E38 Offset: 0x1571E38 VA: 0x1571E38
	public SkillLvEntity GetSelfSkillLvEntity() { }

	// RVA: 0x1571EEC Offset: 0x1571EEC VA: 0x1571EEC
	public int GetFieldCallEffectId(bool isBefore) { }
}

// Namespace: 
public enum BattleSkillInfoData.TYPE // TypeDefIndex: 8982
{
	// Fields
	public int value__; // 0x0
	public const BattleSkillInfoData.TYPE NONE = 0;
	public const BattleSkillInfoData.TYPE MASTER_EQUIP = 1;
	public const BattleSkillInfoData.TYPE MASTER_COMMAND = 2;
	public const BattleSkillInfoData.TYPE SERVANT_CLASS = 10;
	public const BattleSkillInfoData.TYPE SERVANT_SELF = 11;
	public const BattleSkillInfoData.TYPE SERVANT_EQUIP = 12;
	public const BattleSkillInfoData.TYPE TEMP = 20;
	public const BattleSkillInfoData.TYPE BOOST = 21;
	public const BattleSkillInfoData.TYPE COMMAND_CODE = 22;
	public const BattleSkillInfoData.TYPE TEMP_EFFECT_SQUARE = 100;
}

// Namespace: 
public class BattleRankUpSkillInfoData : BattleSkillInfoData // TypeDefIndex: 8983
{
	// Fields
	protected BattleBuffData.SkillRankChangeData rankChangeData; // 0x70
	protected List<BattleSkillInfoData> rankUpList; // 0x78

	// Properties
	protected int RankUpLimit { get; }
	protected int CurrentRank { get; }
	protected int CurrentLogicRank { get; }
	protected int FixRank { get; }
	protected BattleSkillInfoData Current { get; }
	public override int skillId { get; }

	// Methods

	// RVA: 0x11535F8 Offset: 0x11535F8 VA: 0x11535F8
	public void .ctor() { }

	// RVA: 0x1153668 Offset: 0x1153668 VA: 0x1153668
	protected int get_RankUpLimit() { }

	// RVA: 0x11536D0 Offset: 0x11536D0 VA: 0x11536D0
	protected int get_CurrentRank() { }

	// RVA: 0x11536E4 Offset: 0x11536E4 VA: 0x11536E4
	protected int get_CurrentLogicRank() { }

	// RVA: 0x11536F8 Offset: 0x11536F8 VA: 0x11536F8
	protected int get_FixRank() { }

	// RVA: 0x1153744 Offset: 0x1153744 VA: 0x1153744
	protected BattleSkillInfoData get_Current() { }

	// RVA: 0x11537A8 Offset: 0x11537A8 VA: 0x11537A8 Slot: 11
	public override bool IsChangeable() { }

	// RVA: 0x11537F0 Offset: 0x11537F0 VA: 0x11537F0 Slot: 9
	public override BattleSkillInfoData[] GetLoadArray() { }

	// RVA: 0x1153850 Offset: 0x1153850 VA: 0x1153850 Slot: 6
	public override int getCutInId() { }

	// RVA: 0x11538A8 Offset: 0x11538A8 VA: 0x11538A8 Slot: 5
	public override int get_skillId() { }

	// RVA: 0x1153900 Offset: 0x1153900 VA: 0x1153900
	public BattleRankUpSkillInfoData.RankUpState GetRankUpState() { }

	// RVA: 0x1153964 Offset: 0x1153964 VA: 0x1153964 Slot: 12
	public override void UseSkill() { }
}

// Namespace: 
public enum BattleRankUpSkillInfoData.RankUpState // TypeDefIndex: 8984
{
	// Fields
	public int value__; // 0x0
	public const BattleRankUpSkillInfoData.RankUpState Undefined = -1;
	public const BattleRankUpSkillInfoData.RankUpState None = 0;
	public const BattleRankUpSkillInfoData.RankUpState RightAfterUp = 1;
	public const BattleRankUpSkillInfoData.RankUpState AlreadyUp = 2;
}

// Namespace: 
public class BattleSelfSkillInfoData : BattleRankUpSkillInfoData // TypeDefIndex: 8985
{
	// Methods

	// RVA: 0xF18FD4 Offset: 0xF18FD4 VA: 0xF18FD4
	public void .ctor() { }

	// RVA: 0xF18FDC Offset: 0xF18FDC VA: 0xF18FDC Slot: 10
	public override void PreAddProcess(BattleServantData svtData) { }

	// RVA: 0xF191C4 Offset: 0xF191C4 VA: 0xF191C4
	protected int[] GetRankUpSkillIds(int svtId, int baseSkillId) { }

	// RVA: 0xF1932C Offset: 0xF1932C VA: 0xF1932C Slot: 13
	public override BaseMotionSkip MakeSkillSkip() { }
}

// Namespace: 
public class TempBattleSkillInfoData : BattleSkillInfoData // TypeDefIndex: 8986
{
	// Methods

	// RVA: 0x108EA14 Offset: 0x108EA14 VA: 0x108EA14
	public void .ctor(int skillId, int skillLv, int uniqueId = -1) { }
}

// Namespace: 
public class BattleMasterSkillInfoData : BattleSkillInfoData // TypeDefIndex: 8987
{
	// Methods

	// RVA: 0xFBF1E4 Offset: 0xFBF1E4 VA: 0xFBF1E4
	public void .ctor() { }

	// RVA: 0xFBF1EC Offset: 0xFBF1EC VA: 0xFBF1EC Slot: 13
	public override BaseMotionSkip MakeSkillSkip() { }
}

// Namespace: 
public class BattleSpeedButtonComponent : BaseMonoBehaviour // TypeDefIndex: 8988
{
	// Fields
	public BattlePerformance perf; // 0x18

	// Methods

	// RVA: 0x157202C Offset: 0x157202C VA: 0x157202C
	public void .ctor() { }

	// RVA: 0x1572034 Offset: 0x1572034 VA: 0x1572034
	private void OnPress(bool isPressed) { }
}

// Namespace: 
public class BattleSuperBossInfo // TypeDefIndex: 8989
{
	// Fields
	public int superBossId; // 0x10
	public int uniqueId; // 0x14
	public long maxHp; // 0x18
	public long totalDamage; // 0x20

	// Methods

	// RVA: 0x15722D0 Offset: 0x15722D0 VA: 0x15722D0
	public void .ctor() { }
}

// Namespace: 
public class BattleUIRangeLabel : UIRangeLabel // TypeDefIndex: 8990
{
	// Fields
	[SerializeField] // RVA: 0xC64074 Offset: 0xC64074 VA: 0xC64074
	private Vector3 spriteOffset; // 0x38
	private Vector3 savePosValue; // 0x44
	private bool isFirst; // 0x50
	private int saveDepth; // 0x54
	private Vector3 saveAdjust; // 0x58
	private float adjustmentX; // 0x64
	private float adjustmentY; // 0x68
	private float criticalX; // 0x6C
	private float criticalY; // 0x70
	private float recoverX; // 0x74
	private float recoverY; // 0x78
	private float criticalRecoverY; // 0x7C
	private float noDamageY; // 0x80
	private float noDamageRecoverX; // 0x84
	private float noDamageRecoverY; // 0x88

	// Methods

	// RVA: 0x1573140 Offset: 0x1573140 VA: 0x1573140
	public void .ctor() { }

	// RVA: 0x1573174 Offset: 0x1573174 VA: 0x1573174
	private void Awake() { }

	// RVA: 0x1568234 Offset: 0x1568234 VA: 0x1568234
	public float GetLabelPrintedWidth() { }

	// RVA: 0x15731EC Offset: 0x15731EC VA: 0x15731EC
	public void ParentHasChanged() { }

	// RVA: 0x1567DE0 Offset: 0x1567DE0 VA: 0x1567DE0
	public void SetAdjustLabelOffset(string text, string iconName, bool isIconPixelPerfect = True, BattleServantData.Adjustment adjustment, bool recovery = False, bool ispopAdjustment = False, bool damageCritical = False) { }

	// RVA: 0x1573224 Offset: 0x1573224 VA: 0x1573224
	public int GetTextLength() { }

	// RVA: 0x1568264 Offset: 0x1568264 VA: 0x1568264
	public void AddLabelDepth(int addDepth) { }

	// RVA: 0x157326C Offset: 0x157326C VA: 0x157326C
	private void OnDisable() { }
}

// Namespace: 
public class BattleUserGradeComponent : MonoBehaviour // TypeDefIndex: 8991
{
	// Fields
	[SerializeField] // RVA: 0xC64084 Offset: 0xC64084 VA: 0xC64084
	private UISprite masterIconBg; // 0x18
	[SerializeField] // RVA: 0xC64094 Offset: 0xC64094 VA: 0xC64094
	private UserGradeComponent gradeComp; // 0x20

	// Methods

	// RVA: 0x1573E4C Offset: 0x1573E4C VA: 0x1573E4C
	public void .ctor() { }

	// RVA: 0x1573E54 Offset: 0x1573E54 VA: 0x1573E54
	public void Initialize() { }
}

// Namespace: 
public static class BattleUtility // TypeDefIndex: 8992
{
	// Methods

	// RVA: 0x15744D0 Offset: 0x15744D0 VA: 0x15744D0
	public static float Lerp(float a, float b, float t) { }

	// RVA: 0x1574518 Offset: 0x1574518 VA: 0x1574518
	public static double LerpDouble(double a, double b, float t) { }

	// RVA: 0x156BC0C Offset: 0x156BC0C VA: 0x156BC0C
	public static int FloorToInt(float f) { }

	// RVA: 0x157456C Offset: 0x157456C VA: 0x157456C
	public static int FloorToInt(double d) { }

	// RVA: 0x1574564 Offset: 0x1574564 VA: 0x1574564
	public static long FloorToLong(double f) { }

	// RVA: 0x1574574 Offset: 0x1574574 VA: 0x1574574
	public static float Abs(float f) { }

	// RVA: 0x157457C Offset: 0x157457C VA: 0x157457C
	public static int Abs(int value) { }
}

// Namespace: 
public class BattleWarBoardInfo // TypeDefIndex: 8993
{
	// Fields
	public int stageId; // 0x10
	public bool isPrecedingPlayer; // 0x14
	public int battleTurn; // 0x18
	public BattleWarBoardInfo.WarBoardServantInfo[] svtInfo; // 0x20
	public BattleWarBoardInfo.WarBoardMasterInfo[] masterInfo; // 0x28
	public int bgNo; // 0x30
	public int bgType; // 0x34

	// Methods

	// RVA: 0x1577068 Offset: 0x1577068 VA: 0x1577068
	public void .ctor() { }
}

// Namespace: 
public class BattleWarBoardInfo.WarBoardServantInfo // TypeDefIndex: 8994
{
	// Fields
	public long id; // 0x10
	public int maxDefeatPoint; // 0x18
	public int defeatPoint; // 0x1C
	public int currentHp; // 0x20
	public int hp; // 0x24
	public int currentNp; // 0x28
	public int nextNpTurn; // 0x2C
	public BattleBuffData.SaveData buffDataSave; // 0x30
	public int skill1Ct; // 0x38
	public int skill2Ct; // 0x3C
	public int skill3Ct; // 0x40
	public int aftSquareIndex; // 0x44
	public int befSquareIndex; // 0x48
	public int transformIndex; // 0x4C
	public int transformLimitCount; // 0x50
	public bool isSleepWaitMode; // 0x54
	public bool isEffectedDoNotActState; // 0x55
	public int criticalStars; // 0x58
	public int squareEffectSkillId; // 0x5C
	public int squareEffectSkillLv; // 0x60
	public long npcSvtEquipId; // 0x68

	// Methods

	// RVA: 0x1577078 Offset: 0x1577078 VA: 0x1577078
	public void .ctor() { }
}

// Namespace: 
public class BattleWarBoardInfo.WarBoardMasterInfo // TypeDefIndex: 8995
{
	// Fields
	public int forceId; // 0x10
	public int groupId; // 0x14
	public int skill1Ct; // 0x18
	public int skill1SealedTurn; // 0x1C
	public int skill2Ct; // 0x20
	public int skill2SealedTurn; // 0x24
	public int skill3Ct; // 0x28
	public int skill3SealedTurn; // 0x2C
	public int commandSpellNum; // 0x30

	// Methods

	// RVA: 0x1577070 Offset: 0x1577070 VA: 0x1577070
	public void .ctor() { }
}

// Namespace: 
public class CardEffectComponent : EffectComponent // TypeDefIndex: 8996
{
	// Fields
	[SerializeField] // RVA: 0xC640A4 Offset: 0xC640A4 VA: 0xC640A4
	private UIUnityRenderer[] onCardEffectArray; // 0x80
	[SerializeField] // RVA: 0xC640B4 Offset: 0xC640B4 VA: 0xC640B4
	private UIUnityRenderer[] underCardEffectArray; // 0x88

	// Methods

	// RVA: 0x14E8FA0 Offset: 0x14E8FA0 VA: 0x14E8FA0
	public void .ctor() { }

	// RVA: 0x14E9008 Offset: 0x14E9008 VA: 0x14E9008
	public void SetCardEffectDepth(int onBaseDepth, int underBaseDepth) { }
}

// Namespace: 
public class ChangeRendererMaterialColorEffect : MonoBehaviour // TypeDefIndex: 8997
{
	// Fields
	[SerializeField] // RVA: 0xC640C4 Offset: 0xC640C4 VA: 0xC640C4
	private GameObject targetObject; // 0x18
	[SerializeField] // RVA: 0xC640D4 Offset: 0xC640D4 VA: 0xC640D4
	private ChangeRendererMaterialColorEffect.RendererType[] targetRendererTypes; // 0x20
	[SerializeField] // RVA: 0xC640E4 Offset: 0xC640E4 VA: 0xC640E4
	private string propertyName; // 0x28
	[SerializeField] // RVA: 0xC640F4 Offset: 0xC640F4 VA: 0xC640F4
	private Color toColor; // 0x30
	[SerializeField] // RVA: 0xC64104 Offset: 0xC64104 VA: 0xC64104
	private float time; // 0x40
	[SerializeField] // RVA: 0xC64114 Offset: 0xC64114 VA: 0xC64114
	private iTween.EaseType easeType; // 0x44
	[SerializeField] // RVA: 0xC64124 Offset: 0xC64124 VA: 0xC64124
	private bool isMaterialAll; // 0x48
	[SerializeField] // RVA: 0xC64134 Offset: 0xC64134 VA: 0xC64134
	private bool isDestroyCompleted; // 0x49
	private List<Renderer> targetRenderers; // 0x50
	private Dictionary<int, Color> materialColors; // 0x58
	private Action onCompleteCallback; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC64144 Offset: 0xC64144 VA: 0xC64144
	private static Action <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1A410B8 Offset: 0x1A410B8 VA: 0x1A410B8
	public void .ctor() { }

	// RVA: 0x1A41110 Offset: 0x1A41110 VA: 0x1A41110
	public static Type ToRendererType(ChangeRendererMaterialColorEffect.RendererType rendererType) { }

	// RVA: 0x1A41214 Offset: 0x1A41214 VA: 0x1A41214
	private void Start() { }

	// RVA: 0x1A4138C Offset: 0x1A4138C VA: 0x1A4138C
	public void StartEffect(GameObject targetObject, ChangeRendererMaterialColorEffect.RendererType[] targetRendererTypes, string propertyName, Color toColor, float time, iTween.EaseType easeType, bool isMaterialAll, bool isDestroyCompleted, Action onCompleteCallback) { }

	// RVA: 0x1A41DB0 Offset: 0x1A41DB0 VA: 0x1A41DB0
	private void onUpdateEffect(float percentage) { }

	// RVA: 0x1A42330 Offset: 0x1A42330 VA: 0x1A42330
	private void onCompleteEffect() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD320 Offset: 0xCCD320 VA: 0xCCD320
	// RVA: 0x1A423BC Offset: 0x1A423BC VA: 0x1A423BC
	private static void <Start>m__0() { }
}

// Namespace: 
public enum ChangeRendererMaterialColorEffect.RendererType // TypeDefIndex: 8998
{
	// Fields
	public int value__; // 0x0
	public const ChangeRendererMaterialColorEffect.RendererType Renderer = 0;
	public const ChangeRendererMaterialColorEffect.RendererType ParticleSystemRenderer = 1;
	public const ChangeRendererMaterialColorEffect.RendererType MeshRenderer = 2;
	public const ChangeRendererMaterialColorEffect.RendererType SkinnedMeshRenderer = 3;
	public const ChangeRendererMaterialColorEffect.RendererType SpriteRenderer = 4;
}

// Namespace: 
[ExecuteAlways] // RVA: 0xC2A8A4 Offset: 0xC2A8A4 VA: 0xC2A8A4
public class ChrBlurSetMatrix : MonoBehaviour // TypeDefIndex: 8999
{
	// Fields
	[SerializeField] // RVA: 0xC64154 Offset: 0xC64154 VA: 0xC64154
	private Transform targetObj; // 0x18
	[SerializeField] // RVA: 0xC64164 Offset: 0xC64164 VA: 0xC64164
	private int _frameLag; // 0x20
	[SerializeField] // RVA: 0xC64174 Offset: 0xC64174 VA: 0xC64174
	private string targetShader; // 0x28
	[SerializeField] // RVA: 0xC64184 Offset: 0xC64184 VA: 0xC64184
	private string positionStr; // 0x30
	[SerializeField] // RVA: 0xC64194 Offset: 0xC64194 VA: 0xC64194
	private string prevPositionStr; // 0x38
	[SerializeField] // RVA: 0xC641A4 Offset: 0xC641A4 VA: 0xC641A4
	private string IsEnemyStr; // 0x40
	private float _enemyValue; // 0x48
	private bool _isPlayingNoble; // 0x4C
	private float _tempEnemyValue; // 0x50
	private Queue<Vector3> _recentPositions; // 0x58
	private Material _smearMat; // 0x60

	// Methods

	// RVA: 0x195A398 Offset: 0x195A398 VA: 0x195A398
	public void .ctor() { }

	// RVA: 0x195A45C Offset: 0x195A45C VA: 0x195A45C
	private void setupMaterial() { }

	// RVA: 0x195A8F4 Offset: 0x195A8F4 VA: 0x195A8F4
	private BattleActorControl findBattleActorControl() { }

	// RVA: 0x195AA00 Offset: 0x195AA00 VA: 0x195AA00
	private void updateEnemyValue() { }

	// RVA: 0x195AB50 Offset: 0x195AB50 VA: 0x195AB50
	public void SetMatrixData() { }

	// RVA: 0x195AE84 Offset: 0x195AE84 VA: 0x195AE84
	private void FixedUpdate() { }
}

// Namespace: 
public class ChrBulr : MonoBehaviour // TypeDefIndex: 9000
{
	// Fields
	private Queue<Vector3> _recentPositions; // 0x18
	[SerializeField] // RVA: 0xC641B4 Offset: 0xC641B4 VA: 0xC641B4
	private Transform chrObj; // 0x20
	[SerializeField] // RVA: 0xC641C4 Offset: 0xC641C4 VA: 0xC641C4
	private Transform targetObj; // 0x28
	[SerializeField] // RVA: 0xC641D4 Offset: 0xC641D4 VA: 0xC641D4
	private bool _blur; // 0x30
	[SerializeField] // RVA: 0xC641E4 Offset: 0xC641E4 VA: 0xC641E4
	private int _frameLag; // 0x34
	private Material _smearMat; // 0x38
	private string prevPositionStr; // 0x40
	private string positionStr; // 0x48

	// Properties
	public Material smearMat { get; }

	// Methods

	// RVA: 0x195AE88 Offset: 0x195AE88 VA: 0x195AE88
	public void .ctor() { }

	// RVA: 0x195AF18 Offset: 0x195AF18 VA: 0x195AF18
	public Material get_smearMat() { }

	// RVA: 0x195B078 Offset: 0x195B078 VA: 0x195B078
	public void SetBulrFlag(bool flg) { }

	// RVA: 0x195B084 Offset: 0x195B084 VA: 0x195B084
	public void SetFrameLag(int value) { }

	// RVA: 0x195B08C Offset: 0x195B08C VA: 0x195B08C
	private void LateUpdate() { }
}

// Namespace: 
[ExecuteAlways] // RVA: 0xC2A8B4 Offset: 0xC2A8B4 VA: 0xC2A8B4
public class ChrDirectionalLight : MonoBehaviour // TypeDefIndex: 9001
{
	// Fields
	[SerializeField] // RVA: 0xC641F4 Offset: 0xC641F4 VA: 0xC641F4
	private Light RenderingLight; // 0x18
	[SerializeField] // RVA: 0xC64204 Offset: 0xC64204 VA: 0xC64204
	private Renderer[] targetRenderers; // 0x20
	[SerializeField] // RVA: 0xC64214 Offset: 0xC64214 VA: 0xC64214
	private ChrDirectionalLight.MaterialType materialType; // 0x28
	[SerializeField] // RVA: 0xC64224 Offset: 0xC64224 VA: 0xC64224
	private bool destroyRendererMaterial; // 0x2C
	private bool isInitialized; // 0x2D
	private List<Material> targetRendererMaterials; // 0x30
	private List<Material> destroyMaterials; // 0x38

	// Properties
	private ChrDirectionalLight.MaterialType useMaterialType { get; }

	// Methods

	// RVA: 0x195B364 Offset: 0x195B364 VA: 0x195B364
	public void .ctor() { }

	// RVA: 0x195B36C Offset: 0x195B36C VA: 0x195B36C
	private ChrDirectionalLight.MaterialType get_useMaterialType() { }

	// RVA: 0x195B374 Offset: 0x195B374 VA: 0x195B374
	private void Update() { }

	// RVA: 0x195B5A0 Offset: 0x195B5A0 VA: 0x195B5A0
	private void LateUpdate() { }

	// RVA: 0x195B7D4 Offset: 0x195B7D4 VA: 0x195B7D4
	private void OnDestroy() { }

	// RVA: 0x195B7D8 Offset: 0x195B7D8 VA: 0x195B7D8
	public void Reset() { }

	// RVA: 0x195B5B0 Offset: 0x195B5B0 VA: 0x195B5B0
	public void UpdateMaterial() { }

	// RVA: 0x195B378 Offset: 0x195B378 VA: 0x195B378
	private void initialize() { }
}

// Namespace: 
public enum ChrDirectionalLight.MaterialType // TypeDefIndex: 9002
{
	// Fields
	public int value__; // 0x0
	public const ChrDirectionalLight.MaterialType ShareMaterial = 0;
	public const ChrDirectionalLight.MaterialType NormalMaterial = 1;
}

// Namespace: 
[ExecuteAlways] // RVA: 0xC2A8C4 Offset: 0xC2A8C4 VA: 0xC2A8C4
public class ChrRenderMatrix : MonoBehaviour // TypeDefIndex: 9003
{
	// Fields
	[SerializeField] // RVA: 0xC64234 Offset: 0xC64234 VA: 0xC64234
	private Light RenderingLight; // 0x18
	[SerializeField] // RVA: 0xC64244 Offset: 0xC64244 VA: 0xC64244
	private GameObject[] ef_nodeObjects; // 0x20
	[SerializeField] // RVA: 0xC64254 Offset: 0xC64254 VA: 0xC64254
	private Camera RenderingCamera; // 0x28
	[SerializeField] // RVA: 0xC64264 Offset: 0xC64264 VA: 0xC64264
	private Camera targetCamera; // 0x30
	[SerializeField] // RVA: 0xC64274 Offset: 0xC64274 VA: 0xC64274
	private string targetCameraPath; // 0x38
	[SerializeField] // RVA: 0xC64284 Offset: 0xC64284 VA: 0xC64284
	private float cameraOffsetZ; // 0x40
	[SerializeField] // RVA: 0xC64294 Offset: 0xC64294 VA: 0xC64294
	private Vector3 posA; // 0x44
	[SerializeField] // RVA: 0xC642A4 Offset: 0xC642A4 VA: 0xC642A4
	[RangeAttribute] // RVA: 0xC642A4 Offset: 0xC642A4 VA: 0xC642A4
	private float rotAY; // 0x50
	[SerializeField] // RVA: 0xC642EC Offset: 0xC642EC VA: 0xC642EC
	[RangeAttribute] // RVA: 0xC642EC Offset: 0xC642EC VA: 0xC642EC
	private float scaleFlat_Z; // 0x54
	[SerializeField] // RVA: 0xC64330 Offset: 0xC64330 VA: 0xC64330
	private int cameraUpdateCount; // 0x58
	[SerializeField] // RVA: 0xC64340 Offset: 0xC64340 VA: 0xC64340
	private Transform targetObj; // 0x60
	[SerializeField] // RVA: 0xC64350 Offset: 0xC64350 VA: 0xC64350
	private string targetObjPath; // 0x68
	[SerializeField] // RVA: 0xC64360 Offset: 0xC64360 VA: 0xC64360
	private Renderer[] targetRenderers; // 0x70
	[SerializeField] // RVA: 0xC64370 Offset: 0xC64370 VA: 0xC64370
	private ChrRenderMatrix.MaterialType materialType; // 0x78
	[SerializeField] // RVA: 0xC64380 Offset: 0xC64380 VA: 0xC64380
	private bool destroyRendererMaterial; // 0x7C
	[SerializeField] // RVA: 0xC64390 Offset: 0xC64390 VA: 0xC64390
	private string _GameCamVP; // 0x80
	[SerializeField] // RVA: 0xC643A0 Offset: 0xC643A0 VA: 0xC643A0
	private string _LocalRot; // 0x88
	private bool isInitialized; // 0x90
	private float rotValue; // 0x94
	private int _cameraUpdateCount; // 0x98
	private List<Material> targetRendererMaterials; // 0xA0
	private List<Material> destroyMaterials; // 0xA8
	private List<ChrRenderMatrix.EfNodeObject> ef_nodeWorkObjects; // 0xB0

	// Properties
	private ChrRenderMatrix.MaterialType useMaterialType { get; }

	// Methods

	// RVA: 0x195B90C Offset: 0x195B90C VA: 0x195B90C
	public void .ctor() { }

	// RVA: 0x195B988 Offset: 0x195B988 VA: 0x195B988
	private ChrRenderMatrix.MaterialType get_useMaterialType() { }

	// RVA: 0x195B990 Offset: 0x195B990 VA: 0x195B990
	private void Update() { }

	// RVA: 0x195BEC0 Offset: 0x195BEC0 VA: 0x195BEC0
	private void LateUpdate() { }

	// RVA: 0x195C1E0 Offset: 0x195C1E0 VA: 0x195C1E0
	private void OnDestroy() { }

	// RVA: 0x195C1E4 Offset: 0x195C1E4 VA: 0x195C1E4
	private void Reset() { }

	// RVA: 0x195C1DC Offset: 0x195C1DC VA: 0x195C1DC
	public void UpdateMatrix() { }

	// RVA: 0x195DB0C Offset: 0x195DB0C VA: 0x195DB0C
	public void SetTargetObj(GameObject obj) { }

	// RVA: 0x195DB48 Offset: 0x195DB48 VA: 0x195DB48
	private Matrix4x4 cnvOrthogonalMatrix(float left, float right, float bottom, float top, float near, float far) { }

	// RVA: 0x195B994 Offset: 0x195B994 VA: 0x195B994
	private void initialize() { }

	// RVA: 0x195BF14 Offset: 0x195BF14 VA: 0x195BF14
	private void updateRenderCameraPos() { }

