
	// Methods

	// RVA: 0xF19CCC Offset: 0xF19CCC VA: 0xF19CCC
	public void .ctor() { }

	// RVA: 0xF24CA0 Offset: 0xF24CA0 VA: 0xF24CA0
	internal void <>m__0(AssetData data) { }

	// RVA: 0xF24DD4 Offset: 0xF24DD4 VA: 0xF24DD4
	internal void <>m__1(GameObject obj) { }
}

// Namespace: 
private sealed class BattleSequenceManager.<loadSequence>c__AnonStorey1.<loadSequence>c__AnonStorey2 // TypeDefIndex: 8956
{
	// Fields
	internal GameObject obj; // 0x10
	internal BattleSequenceManager.<loadSequence>c__AnonStorey1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0xF24FC4 Offset: 0xF24FC4 VA: 0xF24FC4
	public void .ctor() { }

	// RVA: 0xF24FCC Offset: 0xF24FCC VA: 0xF24FCC
	internal void <>m__0() { }

	// RVA: 0xF25128 Offset: 0xF25128 VA: 0xF25128
	internal void <>m__1() { }

	// RVA: 0xF257D8 Offset: 0xF257D8 VA: 0xF257D8
	internal void <>m__2() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43EB4 Offset: 0xC43EB4 VA: 0xC43EB4
private sealed class BattleSequenceManager.<CreateCutInStandFigure>c__AnonStorey3 // TypeDefIndex: 8957
{
	// Fields
	internal GameObject obj; // 0x10
	internal BattleSequenceManager.onGameObjectLoadComplete onComplete; // 0x18
	internal BattleSequenceManager $this; // 0x20

	// Methods

	// RVA: 0xF1A24C Offset: 0xF1A24C VA: 0xF1A24C
	public void .ctor() { }

	// RVA: 0xF24960 Offset: 0xF24960 VA: 0xF24960
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43EC4 Offset: 0xC43EC4 VA: 0xC43EC4
private sealed class BattleSequenceManager.<WaitEndSequence>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8958
{
	// Fields
	internal WaitForEndOfFrame <wait>__0; // 0x10
	internal BattleSequenceManager $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB020 Offset: 0xCDB020 VA: 0xCDB020
	// RVA: 0xF21500 Offset: 0xF21500 VA: 0xF21500
	public void .ctor() { }

	// RVA: 0xF24B20 Offset: 0xF24B20 VA: 0xF24B20 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB030 Offset: 0xCDB030 VA: 0xCDB030
	// RVA: 0xF24C14 Offset: 0xF24C14 VA: 0xF24C14 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB040 Offset: 0xCDB040 VA: 0xCDB040
	// RVA: 0xF24C1C Offset: 0xF24C1C VA: 0xF24C1C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB050 Offset: 0xCDB050 VA: 0xCDB050
	// RVA: 0xF24C24 Offset: 0xF24C24 VA: 0xF24C24 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB060 Offset: 0xCDB060 VA: 0xCDB060
	// RVA: 0xF24C38 Offset: 0xF24C38 VA: 0xF24C38 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43ED4 Offset: 0xC43ED4 VA: 0xC43ED4
private sealed class BattleSequenceManager.<OverwriteStartTimeToSavedBgmPlayArgsGroup>c__AnonStorey4 // TypeDefIndex: 8959
{
	// Fields
	internal BgmPlayArgs args; // 0x10

	// Methods

	// RVA: 0xF23708 Offset: 0xF23708 VA: 0xF23708
	public void .ctor() { }

	// RVA: 0xF249DC Offset: 0xF249DC VA: 0xF249DC
	internal bool <>m__0(BgmPlayArgs x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43EE4 Offset: 0xC43EE4 VA: 0xC43EE4
private sealed class BattleSequenceManager.<SetupTargetInfo>c__AnonStorey5 // TypeDefIndex: 8960
{
	// Fields
	internal HashSet<int> targetList; // 0x10

	// Methods

	// RVA: 0xF23710 Offset: 0xF23710 VA: 0xF23710
	public void .ctor() { }

	// RVA: 0xF24A94 Offset: 0xF24A94 VA: 0xF24A94
	internal void <>m__0(BattleActionData.MoveToSubMember x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43EF4 Offset: 0xC43EF4 VA: 0xC43EF4
private sealed class BattleSequenceManager.<GetTargetPosIndexTransform>c__AnonStorey6 // TypeDefIndex: 8961
{
	// Fields
	internal int posIndex; // 0x10

	// Methods

	// RVA: 0xF24204 Offset: 0xF24204 VA: 0xF24204
	public void .ctor() { }

	// RVA: 0xF249A0 Offset: 0xF249A0 VA: 0xF249A0
	internal bool <>m__0(BattleSequenceManager.BattleTarget x) { }
}

// Namespace: 
public class BattleServantActionHistory // TypeDefIndex: 8962
{
	// Fields
	private BattleServantActionHistory.TYPE actType; // 0x10
	private int targetUniqueId; // 0x14
	private int waveCount; // 0x18
	private bool isOpponent; // 0x1C

	// Methods

	// RVA: 0xF2588C Offset: 0xF2588C VA: 0xF2588C
	public void .ctor(BattleServantActionHistory.TYPE type, int in_targetUniqueID, int wavecount, bool isOpponent) { }

	// RVA: 0xF258E0 Offset: 0xF258E0 VA: 0xF258E0
	public int getReactionTarget() { }

	// RVA: 0xF258E8 Offset: 0xF258E8 VA: 0xF258E8
	public bool IsOpponent() { }

	// RVA: 0xF258F0 Offset: 0xF258F0 VA: 0xF258F0
	public bool isDamage() { }
}

// Namespace: 
public enum BattleServantActionHistory.TYPE // TypeDefIndex: 8963
{
	// Fields
	public int value__; // 0x0
	public const BattleServantActionHistory.TYPE NONE = 0;
	public const BattleServantActionHistory.TYPE DAMAGE_COMMAND = 1;
	public const BattleServantActionHistory.TYPE DAMAGE_TD = 2;
	public const BattleServantActionHistory.TYPE HPLOSS = 3;
	public const BattleServantActionHistory.TYPE INSTANT_DEATH = 4;
	public const BattleServantActionHistory.TYPE REDUCE_HP = 5;
	public const BattleServantActionHistory.TYPE DAMAGE_REFLECTION = 6;
	public const BattleServantActionHistory.TYPE DAMAGE_VALUE = 7;
}

// Namespace: 
public class BattleServantData : AiInterface, BuffInterface // TypeDefIndex: 8964
{
	// Fields
	public const int NO_UNIQUE_ID = -1;
	public const int NO_REPOP_ORDER = -1;
	public int index; // 0x10
	public int deckIndex; // 0x14
	public int uniqueId; // 0x18
	public ObscuredLong userSvtId; // 0x20
	public ObscuredInt svtId; // 0x40
	public ObscuredInt exceedCount; // 0x50
	private ObscuredInt limitcount; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC6342C Offset: 0xC6342C VA: 0xC6342C
	[DebuggerBrowsableAttribute] // RVA: 0xC6342C Offset: 0xC6342C VA: 0xC6342C
	private ObscuredInt <dispLimitCount>k__BackingField; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC63468 Offset: 0xC63468 VA: 0xC63468
	[DebuggerBrowsableAttribute] // RVA: 0xC63468 Offset: 0xC63468 VA: 0xC63468
	private ObscuredInt <commandCardLimitCount>k__BackingField; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC634A4 Offset: 0xC634A4 VA: 0xC634A4
	[DebuggerBrowsableAttribute] // RVA: 0xC634A4 Offset: 0xC634A4 VA: 0xC634A4
	private ObscuredInt <iconLimitCount>k__BackingField; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC634E0 Offset: 0xC634E0 VA: 0xC634E0
	[DebuggerBrowsableAttribute] // RVA: 0xC634E0 Offset: 0xC634E0 VA: 0xC634E0
	private int <frameType>k__BackingField; // 0xA0
	public int npcSvtClassId; // 0xA4
	public long transformUserSvtId; // 0xA8
	public int transformSvtId; // 0xB0
	public int transformIndex; // 0xB4
	public int transformLimitCount; // 0xB8
	public int shiftNpcId; // 0xBC
	public long beforeUserSvtId; // 0xC0
	public int dressDispId; // 0xC8
	public long totalDamage; // 0xD0
	public int appearanceId; // 0xD8
	public LinkedList<BattleServantActionHistory> actionHistory; // 0xE0
	private ServantEntity svtdata; // 0xE8
	private ServantLimitEntity svtlimitDispent; // 0xF0
	private ServantLimitEntity svtlimitent; // 0xF8
	private ServantLimitAddEntity svtlimitaddent; // 0x100
	private BattleDeckServantData deckSvt; // 0x108
	private AiState aiState; // 0x110
	public int level; // 0x118
	public int maxleve; // 0x11C
	public int atk; // 0x120
	public Follower.Type followerType; // 0x124
	public bool flgEventJoin; // 0x128
	[CompilerGeneratedAttribute] // RVA: 0xC6351C Offset: 0xC6351C VA: 0xC6351C
	[DebuggerBrowsableAttribute] // RVA: 0xC6351C Offset: 0xC6351C VA: 0xC6351C
	private int <hp>k__BackingField; // 0x12C
	public int maxhp; // 0x130
	public int maxActNum; // 0x134
	[CompilerGeneratedAttribute] // RVA: 0xC63558 Offset: 0xC63558 VA: 0xC63558
	[DebuggerBrowsableAttribute] // RVA: 0xC63558 Offset: 0xC63558 VA: 0xC63558
	private int <minActNum>k__BackingField; // 0x138
	public int aiId; // 0x13C
	public int actPriority; // 0x140
	public int np; // 0x144
	public int nplineCount; // 0x148
	public int lineMaxNp; // 0x14C
	public int tmpNp; // 0x150
	public int equipatk; // 0x154
	public int equiphp; // 0x158
	public int maxtpturn; // 0x15C
	public int nexttpturn; // 0x160
	public int downstarrate; // 0x164
	public int downtdrate; // 0x168
	public int deathRate; // 0x16C
	public string svtName; // 0x170
	private string svtOverwriteName; // 0x178
	private string svtOverwriteBattleName; // 0x180
	public int atktdrate; // 0x188
	public int svtType; // 0x18C
	public int displayType; // 0x190
	public int npcSvtType; // 0x194
	public int criticalRate; // 0x198
	[CompilerGeneratedAttribute] // RVA: 0xC63594 Offset: 0xC63594 VA: 0xC63594
	[DebuggerBrowsableAttribute] // RVA: 0xC63594 Offset: 0xC63594 VA: 0xC63594
	private int <reducedhp>k__BackingField; // 0x19C
	public int restAttackCount; // 0x1A0
	public int overkillTargetId; // 0x1A4
	public int accumulationDamage; // 0x1A8
	[CompilerGeneratedAttribute] // RVA: 0xC635D0 Offset: 0xC635D0 VA: 0xC635D0
	[DebuggerBrowsableAttribute] // RVA: 0xC635D0 Offset: 0xC635D0 VA: 0xC635D0
	private int <resultHp>k__BackingField; // 0x1AC
	public BattleServantData.STATUS status; // 0x1B0
	public bool isEntry; // 0x1B4
	public bool isLoad; // 0x1B5
	public bool isDeadAnime; // 0x1B6
	public bool isChargeSkill; // 0x1B7
	public bool isEnemy; // 0x1B8
	public bool isAppear; // 0x1B9
	public bool isRaid; // 0x1BA
	public bool isAddition; // 0x1BB
	public int raidId; // 0x1BC
	public bool isLeader; // 0x1C0
	public bool isSuperBoss; // 0x1C1
	public int superBossId; // 0x1C4
	private long superbossnokorihp; // 0x1C8
	public int roleType; // 0x1D0
	public int repopOrder; // 0x1D4
	public int hpBarType; // 0x1D8
	public int overwriteSvtVoiceId; // 0x1DC
	public int battleVoice; // 0x1E0
	public int actorScale; // 0x1E4
	public int summonNpcId; // 0x1E8
	public bool isBuffProgressFlg; // 0x1EC
	public bool flgEntryFunction; // 0x1ED
	public int shiftDeckIndex; // 0x1F0
	public int lowLimitShift; // 0x1F4
	public int shiftSubCount; // 0x1F8
	public int[] shiftDeckList; // 0x200
	public int changeSvtIndex; // 0x208
	public int[] changeSvtList; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xC6360C Offset: 0xC6360C VA: 0xC6360C
	[DebuggerBrowsableAttribute] // RVA: 0xC6360C Offset: 0xC6360C VA: 0xC6360C
	private bool <IsChangeDropItemByShift>k__BackingField; // 0x218
	public long[] userCommandCodeIds; // 0x220
	public int[] commandCardParam; // 0x228
	public bool isHideShadow; // 0x230
	public BattleServantData.DEADTYPE deadtype; // 0x234
	public bool reservationspecial; // 0x238
	private int _shuffuleSeed; // 0x23C
	private DropInfo[] droplist; // 0x240
	private int[] svtIndividuality; // 0x248
	public List<BattleSkillInfoData> skillInfoList; // 0x250
	private int treasuredvcId; // 0x258
	private int treasuredvcLevel; // 0x25C
	private TreasureDvcEntity TDvc; // 0x260
	private TreasureDvcLvEntity _TDvcLv; // 0x268
	private ServantTreasureDvcEntity _SvtTDvc; // 0x270
	private DataMasterBase tdDataMasterBase; // 0x278
	private DataMasterBase tdLvDataMasterBase; // 0x280
	private BattleUserServantData[] equipList; // 0x288
	[CompilerGeneratedAttribute] // RVA: 0xC63648 Offset: 0xC63648 VA: 0xC63648
	[DebuggerBrowsableAttribute] // RVA: 0xC63648 Offset: 0xC63648 VA: 0xC63648
	private List<CommandCodeInfo> <commandCodeList>k__BackingField; // 0x290
	public ServantCardEntity[] commandent; // 0x298
	public Hashtable commandtable; // 0x2A0
	public BattleBuffData buffData; // 0x2A8
	private BattleData.TYPETURN deadTurn; // 0x2B0
	private ServantWaveTurnEventOwner waveTurnEventOwner; // 0x2B8
	private List<GameObject> paramobjelist; // 0x2C0
	public string statestring; // 0x2C8
	private bool isSilnetDead; // 0x2D0
	public bool isWithdraw; // 0x2D1
	public bool isSystemDead; // 0x2D2
	public bool isSystemAlive; // 0x2D3
	public int svtCommonFlag; // 0x2D4
	public int[] tdplayed; // 0x2D8
	public bool isSleepWaitMode; // 0x2E0
	public bool isSleepWaitModeReady; // 0x2E1
	public bool IsAlreadyDrop; // 0x2E2
	private const int validValue = 1;
	public int playedNPCount; // 0x2E4
	public bool isTDLimitCount; // 0x2E8
	public bool isGutsSleepRelease; // 0x2E9
	public float nextPossibleTimePopEffect; // 0x2EC
	private int selectedTDCardId; // 0x2F0
	private int selectedTDId; // 0x2F4
	public int maxDefeatPoint; // 0x2F8
	public int defeatPoint; // 0x2FC
	private int aftSquareIndex; // 0x300
	private int befSquareIndex; // 0x304
	public bool isAppliedHaveStars; // 0x308
	private int squareEffectSkillId; // 0x30C
	private int squareEffectSkillLv; // 0x310
	public bool IsVanishSkill; // 0x314
	[CompilerGeneratedAttribute] // RVA: 0xC63684 Offset: 0xC63684 VA: 0xC63684
	[DebuggerBrowsableAttribute] // RVA: 0xC63684 Offset: 0xC63684 VA: 0xC63684
	private int <imageSvtId>k__BackingField; // 0x318
	public int wasAttackTargetId; // 0x31C
	[CompilerGeneratedAttribute] // RVA: 0xC636C0 Offset: 0xC636C0 VA: 0xC636C0
	[DebuggerBrowsableAttribute] // RVA: 0xC636C0 Offset: 0xC636C0 VA: 0xC636C0
	private ServantAssetArgs <LoadedAssetArgs>k__BackingField; // 0x320
	public List<BattleServantData.Adjustment> adjustmentList; // 0x328
	private const string svtCommonFlagSaveKey = "SVT_COMMON_FLAG_{0}";
	[CompilerGeneratedAttribute] // RVA: 0xC636FC Offset: 0xC636FC VA: 0xC636FC
	[DebuggerBrowsableAttribute] // RVA: 0xC636FC Offset: 0xC636FC VA: 0xC636FC
	private int <servantCollectionId>k__BackingField; // 0x330
	public int tempTreasuredvcId; // 0x334
	public int tempTreasuredvcLv; // 0x338
	private int tmp_npper; // 0x33C
	public static int _CriticalIndividuality; // 0x0
	private int[] wkzero; // 0x340
	public double wkHpRatio; // 0x348
	private const int FRACTION_VALUE = 1000;
	private int tmpAppearanceId; // 0x350
	private bool isForceAppearance; // 0x354
	[CompilerGeneratedAttribute] // RVA: 0xC63738 Offset: 0xC63738 VA: 0xC63738
	private static Predicate<BattleSkillInfoData> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC63748 Offset: 0xC63748 VA: 0xC63748
	private static Predicate<BattleSkillInfoData> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC63758 Offset: 0xC63758 VA: 0xC63758
	private static Comparison<BattleBuffData.BuffData> <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC63768 Offset: 0xC63768 VA: 0xC63768
	private static Converter<long, int> <>f__am$cache3; // 0x20

	// Properties
	public ObscuredInt dispLimitCount { get; set; }
	public ObscuredInt commandCardLimitCount { get; set; }
	public ObscuredInt iconLimitCount { get; set; }
	public int frameType { get; set; }
	public ServantEntity SvtEnt { get; }
	public ServantLimitAddEntity SvtLimitAddEnt { get; }
	public BattleDeckServantData DeckSvt { get; }
	public virtual int hp { get; set; }
	public int minActNum { get; set; }
	public virtual int reducedhp { get; set; }
	public virtual int resultHp { get; set; }
	public bool IsRaidTypeBoss { get; }
	public bool isWaitRepop { get; }
	public bool IsChangeDropItemByShift { get; set; }
	public int ShuffleSeed { get; set; }
	public int TreasureDvcId { get; }
	public int TreasureDvcLevel { get; }
	public TreasureDvcLvEntity TDvcLv { get; }
	private ServantTreasureDvcEntity SvtTDvc { get; }
	public TreasureDvcEntity TreasureDevice { get; }
	private DataMasterBase TdDataMasterBase { get; }
	private DataMasterBase TdLvDataMasterBase { get; }
	public List<CommandCodeInfo> commandCodeList { get; set; }
	public BattleBuffData BuffData { get; }
	public bool IsSilentDead { get; set; }
	public int imageSvtId { get; set; }
	public ServantAssetArgs LoadedAssetArgs { get; set; }
	public int servantCollectionId { get; set; }
	public int BattleSize { get; }
	public static int CriticalIndividuality { get; }

	// Methods

	// RVA: 0x1669FB8 Offset: 0x1669FB8 VA: 0x1669FB8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD0A0 Offset: 0xCCD0A0 VA: 0xCCD0A0
	// RVA: 0x166A198 Offset: 0x166A198 VA: 0x166A198
	public ObscuredInt get_dispLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD0B0 Offset: 0xCCD0B0 VA: 0xCCD0B0
	// RVA: 0x166A1A4 Offset: 0x166A1A4 VA: 0x166A1A4
	public void set_dispLimitCount(ObscuredInt value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD0C0 Offset: 0xCCD0C0 VA: 0xCCD0C0
	// RVA: 0x166A1AC Offset: 0x166A1AC VA: 0x166A1AC
	public ObscuredInt get_commandCardLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD0D0 Offset: 0xCCD0D0 VA: 0xCCD0D0
	// RVA: 0x166A1B8 Offset: 0x166A1B8 VA: 0x166A1B8
	public void set_commandCardLimitCount(ObscuredInt value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD0E0 Offset: 0xCCD0E0 VA: 0xCCD0E0
	// RVA: 0x166A1C0 Offset: 0x166A1C0 VA: 0x166A1C0
	public ObscuredInt get_iconLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD0F0 Offset: 0xCCD0F0 VA: 0xCCD0F0
	// RVA: 0x166A1CC Offset: 0x166A1CC VA: 0x166A1CC
	public void set_iconLimitCount(ObscuredInt value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD100 Offset: 0xCCD100 VA: 0xCCD100
	// RVA: 0x166A1D4 Offset: 0x166A1D4 VA: 0x166A1D4
	public int get_frameType() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD110 Offset: 0xCCD110 VA: 0xCCD110
	// RVA: 0x166A1DC Offset: 0x166A1DC VA: 0x166A1DC
	public void set_frameType(int value) { }

	// RVA: 0x166A1E4 Offset: 0x166A1E4 VA: 0x166A1E4
	public ServantEntity get_SvtEnt() { }

	// RVA: 0x166A1EC Offset: 0x166A1EC VA: 0x166A1EC
	public ServantLimitAddEntity get_SvtLimitAddEnt() { }

	// RVA: 0x166A1F4 Offset: 0x166A1F4 VA: 0x166A1F4
	public BattleDeckServantData get_DeckSvt() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD120 Offset: 0xCCD120 VA: 0xCCD120
	// RVA: 0x166A1FC Offset: 0x166A1FC VA: 0x166A1FC Slot: 9
	public virtual int get_hp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD130 Offset: 0xCCD130 VA: 0xCCD130
	// RVA: 0x166A204 Offset: 0x166A204 VA: 0x166A204 Slot: 10
	public virtual void set_hp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD140 Offset: 0xCCD140 VA: 0xCCD140
	// RVA: 0x166A20C Offset: 0x166A20C VA: 0x166A20C
	public int get_minActNum() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD150 Offset: 0xCCD150 VA: 0xCCD150
	// RVA: 0x166A214 Offset: 0x166A214 VA: 0x166A214
	private void set_minActNum(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD160 Offset: 0xCCD160 VA: 0xCCD160
	// RVA: 0x166A21C Offset: 0x166A21C VA: 0x166A21C Slot: 11
	public virtual int get_reducedhp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD170 Offset: 0xCCD170 VA: 0xCCD170
	// RVA: 0x166A224 Offset: 0x166A224 VA: 0x166A224 Slot: 12
	public virtual void set_reducedhp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD180 Offset: 0xCCD180 VA: 0xCCD180
	// RVA: 0x166A22C Offset: 0x166A22C VA: 0x166A22C Slot: 13
	public virtual int get_resultHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD190 Offset: 0xCCD190 VA: 0xCCD190
	// RVA: 0x166A234 Offset: 0x166A234 VA: 0x166A234 Slot: 14
	public virtual void set_resultHp(int value) { }

	// RVA: 0x166A23C Offset: 0x166A23C VA: 0x166A23C
	public bool get_IsRaidTypeBoss() { }

	// RVA: 0x166A25C Offset: 0x166A25C VA: 0x166A25C
	public bool get_isWaitRepop() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD1A0 Offset: 0xCCD1A0 VA: 0xCCD1A0
	// RVA: 0x166A26C Offset: 0x166A26C VA: 0x166A26C
	public bool get_IsChangeDropItemByShift() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD1B0 Offset: 0xCCD1B0 VA: 0xCCD1B0
	// RVA: 0x166A274 Offset: 0x166A274 VA: 0x166A274
	private void set_IsChangeDropItemByShift(bool value) { }

	// RVA: 0x166A280 Offset: 0x166A280 VA: 0x166A280
	public void set_ShuffleSeed(int value) { }

	// RVA: 0x166A288 Offset: 0x166A288 VA: 0x166A288
	public int get_ShuffleSeed() { }

	// RVA: 0x166A34C Offset: 0x166A34C VA: 0x166A34C
	public int get_TreasureDvcId() { }

	// RVA: 0x166A354 Offset: 0x166A354 VA: 0x166A354
	public int get_TreasureDvcLevel() { }

	// RVA: 0x166A35C Offset: 0x166A35C VA: 0x166A35C
	public TreasureDvcLvEntity get_TDvcLv() { }

	// RVA: 0x166A6BC Offset: 0x166A6BC VA: 0x166A6BC
	private ServantTreasureDvcEntity get_SvtTDvc() { }

	// RVA: 0x166A4A0 Offset: 0x166A4A0 VA: 0x166A4A0
	public TreasureDvcEntity get_TreasureDevice() { }

	// RVA: 0x166A844 Offset: 0x166A844 VA: 0x166A844
	private DataMasterBase get_TdDataMasterBase() { }

	// RVA: 0x166A644 Offset: 0x166A644 VA: 0x166A644
	private DataMasterBase get_TdLvDataMasterBase() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD1C0 Offset: 0xCCD1C0 VA: 0xCCD1C0
	// RVA: 0x166A8BC Offset: 0x166A8BC VA: 0x166A8BC
	public List<CommandCodeInfo> get_commandCodeList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD1D0 Offset: 0xCCD1D0 VA: 0xCCD1D0
	// RVA: 0x166A8C4 Offset: 0x166A8C4 VA: 0x166A8C4
	private void set_commandCodeList(List<CommandCodeInfo> value) { }

	// RVA: 0x166A8CC Offset: 0x166A8CC VA: 0x166A8CC
	public BattleBuffData get_BuffData() { }

	// RVA: 0x166A938 Offset: 0x166A938 VA: 0x166A938
	public bool get_IsSilentDead() { }

	// RVA: 0x166A940 Offset: 0x166A940 VA: 0x166A940
	public void set_IsSilentDead(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD1E0 Offset: 0xCCD1E0 VA: 0xCCD1E0
	// RVA: 0x166A94C Offset: 0x166A94C VA: 0x166A94C
	public int get_imageSvtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD1F0 Offset: 0xCCD1F0 VA: 0xCCD1F0
	// RVA: 0x166A954 Offset: 0x166A954 VA: 0x166A954
	private void set_imageSvtId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD200 Offset: 0xCCD200 VA: 0xCCD200
	// RVA: 0x166A95C Offset: 0x166A95C VA: 0x166A95C
	public ServantAssetArgs get_LoadedAssetArgs() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD210 Offset: 0xCCD210 VA: 0xCCD210
	// RVA: 0x166A964 Offset: 0x166A964 VA: 0x166A964
	private void set_LoadedAssetArgs(ServantAssetArgs value) { }

	// RVA: 0x166A96C Offset: 0x166A96C VA: 0x166A96C
	public ServantAssetArgs UpdateLoadedAssetArgs() { }

	// RVA: 0x166A9D4 Offset: 0x166A9D4 VA: 0x166A9D4
	public void SetAdjustment(bool isCritical, bool isWeak, bool isRegist, bool isNoDamage, Vector3 offSet) { }

	// RVA: 0x166AAF8 Offset: 0x166AAF8 VA: 0x166AAF8
	public void SetAdjustment(BattleServantData.Adjustment data) { }

	// RVA: 0x166AB94 Offset: 0x166AB94 VA: 0x166AB94
	public BattleServantData.Adjustment[] GetAdjustments() { }

	// RVA: 0x166AC20 Offset: 0x166AC20 VA: 0x166AC20
	public void ResetAdjustment() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD220 Offset: 0xCCD220 VA: 0xCCD220
	// RVA: 0x166AC80 Offset: 0x166AC80 VA: 0x166AC80
	public int get_servantCollectionId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD230 Offset: 0xCCD230 VA: 0xCCD230
	// RVA: 0x166AC88 Offset: 0x166AC88 VA: 0x166AC88
	private void set_servantCollectionId(int value) { }

	// RVA: 0x166AC90 Offset: 0x166AC90 VA: 0x166AC90
	public bool checkSilentDeadType(BattleLogicEnemyAi logicenemyai) { }

	// RVA: 0x166AF5C Offset: 0x166AF5C VA: 0x166AF5C
	public bool IsNpEffectSpeedFix() { }

	// RVA: 0x166AF94 Offset: 0x166AF94 VA: 0x166AF94
	public bool IsOnlyFirstForcedOneSpeed() { }

	// RVA: 0x166AFF0 Offset: 0x166AFF0 VA: 0x166AFF0
	public bool IsNpDoubleSpeed() { }

	// RVA: 0x166B000 Offset: 0x166B000 VA: 0x166B000
	public int get_BattleSize() { }

	// RVA: 0x166B02C Offset: 0x166B02C VA: 0x166B02C
	public DropInfo[] getDropItem() { }

	// RVA: 0x166B034 Offset: 0x166B034 VA: 0x166B034 Slot: 15
	public virtual BattleServantData.SaveData getSaveData() { }

	// RVA: 0x166B400 Offset: 0x166B400 VA: 0x166B400
	public string getSaveDataToString() { }

	// RVA: 0x166B48C Offset: 0x166B48C VA: 0x166B48C
	public void setTestSaveData(string str) { }

	// RVA: 0x166B540 Offset: 0x166B540 VA: 0x166B540
	public void setTestSaveData(BattleServantData.SaveData save) { }

	// RVA: 0x166B594 Offset: 0x166B594 VA: 0x166B594 Slot: 16
	public virtual bool setSaveData(BattleServantData.SaveData save) { }

	// RVA: 0x166B9CC Offset: 0x166B9CC VA: 0x166B9CC
	public void setDeckIndex(int index) { }

	// RVA: 0x166B9D4 Offset: 0x166B9D4 VA: 0x166B9D4
	public int getDeckIndex() { }

	// RVA: 0x166B9EC Offset: 0x166B9EC VA: 0x166B9EC
	public void SetTakeoverServantData(BattleWarBoardInfo.WarBoardServantInfo takeoverData) { }

	// RVA: 0x166BB84 Offset: 0x166BB84 VA: 0x166BB84
	public void SetTakeoverServantDataPrevAdd(BattleWarBoardInfo.WarBoardServantInfo takeoverData, BattleData data) { }

	// RVA: 0x166C0F0 Offset: 0x166C0F0 VA: 0x166C0F0
	public BattleWarBoardInfo.WarBoardServantInfo GetTakeoverServantData(WarBoardBattleEvent.TakeoverSvtArg arg) { }

	// RVA: 0x166C918 Offset: 0x166C918 VA: 0x166C918
	public int GetSkillChargeTurn(int index) { }

	// RVA: 0x166C93C Offset: 0x166C93C VA: 0x166C93C
	public void setServantData(BattleDeckServantData inDeckSvt, BattleEntity battleEnt, int infollowerType, string saveStr) { }

	// RVA: 0x166C9F0 Offset: 0x166C9F0 VA: 0x166C9F0
	public void setServantData(BattleDeckServantData inDeckSvt, BattleEntity battleEnt, int infollowerType, BattleServantData.SaveData saveData) { }

	// RVA: 0x166CE3C Offset: 0x166CE3C VA: 0x166CE3C
	public void setServantData(BattleDeckServantData inDeckSvt, BattleInfoData battleInfo, CommandCodeInfo[] userCommandCode, int infollowerType) { }

	// RVA: 0x166CC58 Offset: 0x166CC58 VA: 0x166CC58
	public void setBaseServantData(BattleDeckServantData inDeckSvt, BattleEntity battleEnt, int infollowerType) { }

	// RVA: 0x166CF48 Offset: 0x166CF48 VA: 0x166CF48
	public void setBaseServantData(BattleDeckServantData inDeckSvt, BattleInfoData battleInfo, CommandCodeInfo[] userCommandCode, int eventId, int infollowerType) { }

	// RVA: 0x166F494 Offset: 0x166F494 VA: 0x166F494
	private string getServantOverwriteName(int svtId) { }

	// RVA: 0x166FE1C Offset: 0x166FE1C VA: 0x166FE1C
	private string getBattleServantOverwriteName(int svtId) { }

	// RVA: 0x166EA58 Offset: 0x166EA58 VA: 0x166EA58
	private void CalculateLimitCountWithSpoilerProtection(BattleUserServantData userSvt) { }

	// RVA: 0x166BE40 Offset: 0x166BE40 VA: 0x166BE40
	public void loadTransformServant(BattleData data) { }

	// RVA: 0x1670280 Offset: 0x1670280 VA: 0x1670280
	public void setTransformServant(BattleData data, int transformIndex, int overwriteLimitCount = 0) { }

	// RVA: 0x1670B30 Offset: 0x1670B30 VA: 0x1670B30
	private void OverwriteSkillsForTransformedServant(BattleUserServantData userSvt) { }

	// RVA: 0x1670754 Offset: 0x1670754 VA: 0x1670754
	public void changeTransformServant() { }

	// RVA: 0x1670E28 Offset: 0x1670E28 VA: 0x1670E28
	public void changeBaseUpdateServant() { }

	// RVA: 0x1671300 Offset: 0x1671300 VA: 0x1671300
	public void setDressId(int dressId = -1) { }

	// RVA: 0x16707CC Offset: 0x16707CC VA: 0x16707CC
	public void setSkillShiftServant(BattleData data, int npcId) { }

	// RVA: 0x166FCC8 Offset: 0x166FCC8 VA: 0x166FCC8
	public void UpdateTreasureDevice(int id, int lv) { }

	// RVA: 0x166F974 Offset: 0x166F974 VA: 0x166F974
	public void addSkillInfo(BattleSkillInfoData.TYPE type, int index, int skillId, int skillLv, long userCommandCodeId = -1) { }

	// RVA: 0x1670C78 Offset: 0x1670C78 VA: 0x1670C78
	private void ReplaceSelfSkillInfo(int index, int skillId, int skillLv) { }

	// RVA: 0x1671528 Offset: 0x1671528 VA: 0x1671528
	public BattleSkillInfoData SetSkillInfo(BattleSkillInfoData skillInfo, BattleSkillInfoData.TYPE type, int index, int skillId, int skillLv, long userCommandCodeId = -1) { }

	// RVA: 0x1671848 Offset: 0x1671848 VA: 0x1671848
	public BattleSkillInfoData[] getPassiveSkills() { }

	// RVA: 0x167197C Offset: 0x167197C VA: 0x167197C
	public int[] GetHasSideEffectSkillEffectIds() { }

	// RVA: 0x1671E58 Offset: 0x1671E58 VA: 0x1671E58
	public void setEnemy() { }

	// RVA: 0x166AF8C Offset: 0x166AF8C VA: 0x166AF8C
	public bool checkEnemy() { }

	// RVA: 0x1671E64 Offset: 0x1671E64 VA: 0x1671E64
	public bool checkPlayer() { }

	// RVA: 0x1671E74 Offset: 0x1671E74 VA: 0x1671E74
	public bool checkEntryIndex(int entryIndex) { }

	// RVA: 0x1671EAC Offset: 0x1671EAC VA: 0x1671EAC
	public string getOverrideTDName() { }

	// RVA: 0x1671EDC Offset: 0x1671EDC VA: 0x1671EDC
	public string getOverrideTDRuby() { }

	// RVA: 0x1671F0C Offset: 0x1671F0C VA: 0x1671F0C
	public string getOverrideTDVoice() { }

	// RVA: 0x1671F3C Offset: 0x1671F3C VA: 0x1671F3C
	public void setSummonNpc() { }

	// RVA: 0x1671F70 Offset: 0x1671F70 VA: 0x1671F70
	public void SetFakeData(Dictionary<string, int> fakeInfo) { }

	// RVA: 0x16722A8 Offset: 0x16722A8 VA: 0x16722A8
	public void setDeadData() { }

	// RVA: 0x167230C Offset: 0x167230C VA: 0x167230C Slot: 17
	public virtual AiState getAiState() { }

	// RVA: 0x1672314 Offset: 0x1672314 VA: 0x1672314
	public int[] getCommandList() { }

	// RVA: 0x1672340 Offset: 0x1672340 VA: 0x1672340
	public int[] getCommandArray(int commandTypeBit) { }

	// RVA: 0x167143C Offset: 0x167143C VA: 0x167143C
	public int getUniqueID() { }

	// RVA: 0x166C88C Offset: 0x166C88C VA: 0x166C88C
	public long getUserSvtId() { }

	// RVA: 0x166F618 Offset: 0x166F618 VA: 0x166F618
	public int getSvtId() { }

	// RVA: 0x16724C8 Offset: 0x16724C8 VA: 0x16724C8
	public int getActorSvtId() { }

	// RVA: 0x1672548 Offset: 0x1672548 VA: 0x1672548
	public int GetImageSvtId() { }

	// RVA: 0x16725E0 Offset: 0x16725E0 VA: 0x16725E0
	public int GetIconImageSvtId() { }

	// RVA: 0x16725E4 Offset: 0x16725E4 VA: 0x16725E4
	public int GetCommandImageSvtId() { }

	// RVA: 0x16725E8 Offset: 0x16725E8 VA: 0x16725E8
	public int GetDispImageSvtId() { }

	// RVA: 0x16725EC Offset: 0x16725EC VA: 0x16725EC
	public int getAttri() { }

	// RVA: 0x1672630 Offset: 0x1672630 VA: 0x1672630
	public int getClassId() { }

	// RVA: 0x167266C Offset: 0x167266C VA: 0x167266C
	public int getBattleClassId(BattleCommandData command, BattleServantData opSvt, bool isAct, bool isAttack) { }

	// RVA: 0x1672750 Offset: 0x1672750 VA: 0x1672750
	public string getServantName() { }

	// RVA: 0x167283C Offset: 0x167283C VA: 0x167283C
	public string getServantShortName() { }

	// RVA: 0x1672908 Offset: 0x1672908 VA: 0x1672908
	public int getDressId() { }

	// RVA: 0x1672938 Offset: 0x1672938 VA: 0x1672938
	public bool isNameTrue() { }

	// RVA: 0x1672968 Offset: 0x1672968 VA: 0x1672968
	public string getLevelLabel() { }

	// RVA: 0x1672A0C Offset: 0x1672A0C VA: 0x1672A0C
	public int getLevel() { }

	// RVA: 0x1672A14 Offset: 0x1672A14 VA: 0x1672A14
	public int getMaxLevel() { }

	// RVA: 0x1672A1C Offset: 0x1672A1C VA: 0x1672A1C
	public int getWeaponGroup(bool isEffect = False) { }

	// RVA: 0x1672AB8 Offset: 0x1672AB8 VA: 0x1672AB8
	public int getEffectFolder() { }

	// RVA: 0x1672B50 Offset: 0x1672B50 VA: 0x1672B50
	public int getWeaponScale() { }

	// RVA: 0x1672B7C Offset: 0x1672B7C VA: 0x1672B7C
	public Color getWeaponColor() { }

	// RVA: 0x1672BAC Offset: 0x1672BAC VA: 0x1672BAC
	public string getStrParam() { }

	// RVA: 0x1672BD8 Offset: 0x1672BD8 VA: 0x1672BD8
	public int getRarity() { }

	// RVA: 0x1672C04 Offset: 0x1672C04 VA: 0x1672C04
	public float getActorScale() { }

	// RVA: 0x1672C1C Offset: 0x1672C1C VA: 0x1672C1C
	public int getCameraActionId() { }

	// RVA: 0x166A5D4 Offset: 0x166A5D4 VA: 0x166A5D4
	public int getLimitCount() { }

	// RVA: 0x166FFAC Offset: 0x166FFAC VA: 0x166FFAC
	public int getCommandDispLimitCount() { }

	// RVA: 0x166F698 Offset: 0x166F698 VA: 0x166F698
	public int getDispLimitCount() { }

	// RVA: 0x1672C4C Offset: 0x1672C4C VA: 0x1672C4C
	public int GetIconImageLimitCount() { }

	// RVA: 0x1672E44 Offset: 0x1672E44 VA: 0x1672E44
	public int getLimitImageIndex() { }

	// RVA: 0x166CDA8 Offset: 0x166CDA8 VA: 0x166CDA8
	public void setInitQuest() { }

	// RVA: 0x1672ED0 Offset: 0x1672ED0 VA: 0x1672ED0
	public void setContinue(BattleData data) { }

	// RVA: 0x1673518 Offset: 0x1673518 VA: 0x1673518
	public void setInitBattle() { }

	// RVA: 0x16735C0 Offset: 0x16735C0 VA: 0x16735C0
	public void resetRetAttackCount(int defVal = -1) { }

	// RVA: 0x16735D4 Offset: 0x16735D4 VA: 0x16735D4 Slot: 18
	public virtual int getThisTurnActCount() { }

	// RVA: 0x16735E4 Offset: 0x16735E4 VA: 0x16735E4
	public int GetRemainingNeedActCount() { }

	// RVA: 0x1673670 Offset: 0x1673670 VA: 0x1673670
	public void setEscapeMotion() { }

	// RVA: 0x166AD38 Offset: 0x166AD38 VA: 0x166AD38
	public bool isDeadEscape() { }

	// RVA: 0x166AD48 Offset: 0x166AD48 VA: 0x166AD48
	public bool isDeadStand() { }

	// RVA: 0x167367C Offset: 0x167367C VA: 0x167367C
	public bool isDeadEffect() { }

	// RVA: 0x166AD58 Offset: 0x166AD58 VA: 0x166AD58
	public bool isDeadWait() { }

	// RVA: 0x167368C Offset: 0x167368C VA: 0x167368C
	public bool isDeadAnimation() { }

	// RVA: 0x1673694 Offset: 0x1673694 VA: 0x1673694
	public void setDeadAnimeFlg(bool flg) { }

	// RVA: 0x16736A0 Offset: 0x16736A0 VA: 0x16736A0
	public bool isNormalDeadMotion() { }

	// RVA: 0x16736C0 Offset: 0x16736C0 VA: 0x16736C0
	public bool isUseSelfSkill(int index) { }

	// RVA: 0x166C020 Offset: 0x166C020 VA: 0x166C020
	public BattleSkillInfoData getSelfSkillInfo(int index) { }

	// RVA: 0x16737D0 Offset: 0x16737D0 VA: 0x16737D0
	public BattleSkillInfoData getTempSkillInfo(int index) { }

	// RVA: 0x1671308 Offset: 0x1671308 VA: 0x1671308
	public BattleSkillInfoData[] getActiveSkillInfos() { }

	// RVA: 0x16738A8 Offset: 0x16738A8 VA: 0x16738A8
	public int getTreasureDvcId(bool useTDTypeChangedValue = True) { }

	// RVA: 0x167395C Offset: 0x167395C VA: 0x167395C
	public int getTreasureDvcLevel() { }

	// RVA: 0x1673964 Offset: 0x1673964 VA: 0x1673964
	public string getTreasureDvcName() { }

	// RVA: 0x16739F8 Offset: 0x16739F8 VA: 0x16739F8
	public string getTreasureDvcRuby() { }

	// RVA: 0x1673A8C Offset: 0x1673A8C VA: 0x1673A8C
	public bool hasTreasureDvc() { }

	// RVA: 0x1673AA8 Offset: 0x1673AA8 VA: 0x1673AA8
	public bool isTDSeraled() { }

	// RVA: 0x1673B04 Offset: 0x1673B04 VA: 0x1673B04
	public bool isHeroine() { }

	// RVA: 0x1673B34 Offset: 0x1673B34 VA: 0x1673B34
	public int[] getTreasureDvcHitRaito() { }

	// RVA: 0x1673B60 Offset: 0x1673B60 VA: 0x1673B60
	public int getTreasureDvcMotionId() { }

	// RVA: 0x1673B8C Offset: 0x1673B8C VA: 0x1673B8C
	public int getTreasureDvcCardId() { }

	// RVA: 0x1673BB8 Offset: 0x1673BB8 VA: 0x1673BB8
	public BattleCommandData MakeTreasureDvcCommand() { }

	// RVA: 0x1673C80 Offset: 0x1673C80 VA: 0x1673C80
	public void OverwriteTreasureDevice(int overWritetreasuredvcId, int overWritetreasuredvcLv) { }

	// RVA: 0x1673C9C Offset: 0x1673C9C VA: 0x1673C9C
	public void ResetOverwriteTreasureDevice() { }

	// RVA: 0x1673CD8 Offset: 0x1673CD8 VA: 0x1673CD8
	public BattleUserServantData[] getEquipBattleUserServantList() { }

	// RVA: 0x1673CE0 Offset: 0x1673CE0 VA: 0x1673CE0
	public void useSkill(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1673DCC Offset: 0x1673DCC VA: 0x1673DCC
	public bool turnProgressing(int[] fieldIndiv, BattleLogic logic, bool isAlive, BattleActionData actiondata) { }

	// RVA: 0x16751A8 Offset: 0x16751A8 VA: 0x16751A8
	public BattleBuffData.BuffData[] turnBuffProgressing(bool isEndEnemyTurn, int[] fieldIndiv, BattleLogic logic, BattleActionData action) { }

	// RVA: 0x1675374 Offset: 0x1675374 VA: 0x1675374
	public void turnBuffProgressingIncrease() { }

	// RVA: 0x16753A4 Offset: 0x16753A4 VA: 0x16753A4
	public BattleBuffData.BuffData[] getBuffList(BuffList.ACTION buffAction) { }

	// RVA: 0x166AD68 Offset: 0x166AD68 VA: 0x166AD68
	public BattleBuffData.BuffData[] getDeadBufflist(BaseBattleEvent battleEvent, bool isAllReturnDeadBuff = False) { }

	// RVA: 0x16756F8 Offset: 0x16756F8 VA: 0x16756F8
	public BattleBuffData.BuffData[] getGutsBufflist() { }

	// RVA: 0x167573C Offset: 0x167573C VA: 0x167573C
	public BattleBuffData.BuffData[] getTTurnEndBufflist() { }

	// RVA: 0x1675780 Offset: 0x1675780 VA: 0x1675780
	public BattleBuffData.BuffData[] getStartWaveBuff() { }

	// RVA: 0x16757C4 Offset: 0x16757C4 VA: 0x16757C4
	public BattleBuffData.BuffData[] getFixCommandCardBuff() { }

	// RVA: 0x1675808 Offset: 0x1675808 VA: 0x1675808
	public BattleBuffData.BuffData[] getCommandSideEffect(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1675878 Offset: 0x1675878 VA: 0x1675878
	public BattleBuffData.BuffData[] getNPSideEffect(int[] targetIndivi) { }

	// RVA: 0x16758B4 Offset: 0x16758B4 VA: 0x16758B4
	public BattleBuffData.BuffData[] getDeadAttackSideEffect(BattleServantData opSvt) { }

	// RVA: 0x1675928 Offset: 0x1675928 VA: 0x1675928
	public BattleBuffData.BuffData[] getReflectionEffect() { }

	// RVA: 0x167596C Offset: 0x167596C VA: 0x167596C
	public BattleBuffData.BuffData[] getDamageSideEffect(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x16759E4 Offset: 0x16759E4 VA: 0x16759E4
	public BattleBuffData.BuffData[] getFieldIndividualityBuff() { }

	// RVA: 0x1675A28 Offset: 0x1675A28 VA: 0x1675A28
	public BattleBuffData.BuffData[] getTdTypeChangeBuff() { }

	// RVA: 0x1675A6C Offset: 0x1675A6C VA: 0x1675A6C
	public BattleBuffData.BuffData getTdTypeChangeBuffSingle() { }

	// RVA: 0x1675BA4 Offset: 0x1675BA4 VA: 0x1675BA4
	public BattleBuffData.BuffData[] getAttackSideEffectBuffList(BuffList.ACTION attackAct, BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1675D8C Offset: 0x1675D8C VA: 0x1675D8C
	public static SkillLvEntity getSkillFromBuff(SkillLvMaster skillLvMst, BattleBuffData.BuffData buff) { }

	// RVA: 0x1675EAC Offset: 0x1675EAC VA: 0x1675EAC
	public BattleBuffData.BuffData[] getAttackSideEffectBuffList(BuffList.ACTION[] attackActs, BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x16760B4 Offset: 0x16760B4 VA: 0x16760B4
	public bool checkScriptValue(string key, int value) { }

	// RVA: 0x16760C8 Offset: 0x16760C8 VA: 0x16760C8
	public int getScriptValue(string key) { }

	// RVA: 0x16760E0 Offset: 0x16760E0 VA: 0x16760E0
	public int getSummonNpcId(int index) { }

