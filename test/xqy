	public void SetServantCommandCard() { }

	// RVA: 0x1B94048 Offset: 0x1B94048 VA: 0x1B94048
	public int getMotionId(BattleCommandData command) { }

	// RVA: 0x1B941F0 Offset: 0x1B941F0 VA: 0x1B941F0
	public int getAttackType(BattleCommandData command) { }

	// RVA: 0x1B94398 Offset: 0x1B94398 VA: 0x1B94398
	public int[] getAttackRaito(BattleCommandData command, BattleServantData opSvt, out int multiatk) { }

	// RVA: 0x1B9443C Offset: 0x1B9443C VA: 0x1B9443C
	private int[] getAttackRaitoBase(BattleCommandData command) { }

	// RVA: 0x1B946E8 Offset: 0x1B946E8 VA: 0x1B946E8
	public int[] getServantCommandIndividuality(BattleCommandData command) { }

	// RVA: 0x1B948A0 Offset: 0x1B948A0 VA: 0x1B948A0
	public int getNPVal() { }

	// RVA: 0x1B948D0 Offset: 0x1B948D0 VA: 0x1B948D0
	public void usedTpWeapon(int addPer, BattleData battleData) { }

	// RVA: 0x1B948C8 Offset: 0x1B948C8 VA: 0x1B948C8
	public int getNp() { }

	// RVA: 0x1B94A4C Offset: 0x1B94A4C VA: 0x1B94A4C
	public int getNpPer() { }

	// RVA: 0x1B94A90 Offset: 0x1B94A90 VA: 0x1B94A90
	public bool IsEnableNpInfo() { }

	// RVA: 0x1B91208 Offset: 0x1B91208 VA: 0x1B91208
	public int getTreasureDvcCardId(bool useTDTypeChangedValue = True) { }

	// RVA: 0x1B94AC0 Offset: 0x1B94AC0 VA: 0x1B94AC0
	public int getNextTDTurn() { }

	// RVA: 0x1B94AC8 Offset: 0x1B94AC8 VA: 0x1B94AC8
	public int getMaxNextTDTurn() { }

	// RVA: 0x1B899E8 Offset: 0x1B899E8 VA: 0x1B899E8
	public int getNowHp() { }

	// RVA: 0x1B899F4 Offset: 0x1B899F4 VA: 0x1B899F4
	public int getMaxHp() { }

	// RVA: 0x1B94AD0 Offset: 0x1B94AD0 VA: 0x1B94AD0
	public int getCriticalRate(BattleCommandData command, BattleServantData optSvt) { }

	// RVA: 0x1B94D00 Offset: 0x1B94D00 VA: 0x1B94D00
	public int getOriginCriticalRate() { }

	// RVA: 0x1B94D08 Offset: 0x1B94D08 VA: 0x1B94D08
	public void setHp(int inhp, bool isAccumulation = True) { }

	// RVA: 0x1B921E8 Offset: 0x1B921E8 VA: 0x1B921E8
	public bool updownNextTDTurn(int val) { }

	// RVA: 0x1B94E08 Offset: 0x1B94E08 VA: 0x1B94E08
	public void setReadySpecial(bool flg) { }

	// RVA: 0x1B94E14 Offset: 0x1B94E14 VA: 0x1B94E14
	public bool checkReadySpecail() { }

	// RVA: 0x1B94E1C Offset: 0x1B94E1C VA: 0x1B94E1C
	public void refreshActionBattle() { }

	// RVA: 0x1B94E24 Offset: 0x1B94E24 VA: 0x1B94E24
	public bool isDead() { }

	// RVA: 0x1B94E88 Offset: 0x1B94E88 VA: 0x1B94E88
	public bool IsDisplayDead() { }

	// RVA: 0x1B89994 Offset: 0x1B89994 VA: 0x1B89994
	public bool isAction() { }

	// RVA: 0x1B94EAC Offset: 0x1B94EAC VA: 0x1B94EAC
	public bool isCardTypeAction(BattleCommandData commandType) { }

	// RVA: 0x1B93D04 Offset: 0x1B93D04 VA: 0x1B93D04
	public bool isNobleAction() { }

	// RVA: 0x1B94EFC Offset: 0x1B94EFC VA: 0x1B94EFC
	public bool isNobleAction(out BuffList.ACTION invokeAct) { }

	// RVA: 0x1B921A0 Offset: 0x1B921A0 VA: 0x1B921A0
	public bool isNobleSeal() { }

	// RVA: 0x1B94F58 Offset: 0x1B94F58 VA: 0x1B94F58
	public bool isNobleConditionMismatch() { }

	// RVA: 0x1B94FAC Offset: 0x1B94FAC VA: 0x1B94FAC
	public void addDamage(int damage, bool noAccumulation = False) { }

	// RVA: 0x1B951C4 Offset: 0x1B951C4 VA: 0x1B951C4
	public bool healHp(int heal, bool isForce = False) { }

	// RVA: 0x1B94DF0 Offset: 0x1B94DF0 VA: 0x1B94DF0
	public void procAccumulationDamage(int before, int after) { }

	// RVA: 0x1B9543C Offset: 0x1B9543C VA: 0x1B9543C
	private void sendParamMessage(string funcName) { }

	// RVA: 0x1B955B4 Offset: 0x1B955B4 VA: 0x1B955B4
	public void changeUpdateStatus() { }

	// RVA: 0x1B95604 Offset: 0x1B95604 VA: 0x1B95604
	public void UpdateStatusUIByTransform() { }

	// RVA: 0x1B95780 Offset: 0x1B95780 VA: 0x1B95780
	public void fixUpdateStatus() { }

	// RVA: 0x1B958FC Offset: 0x1B958FC VA: 0x1B958FC
	public void shiftUpdateStatus() { }

	// RVA: 0x1B95A78 Offset: 0x1B95A78 VA: 0x1B95A78
	public void updateNpGauge() { }

	// RVA: 0x1B95BF4 Offset: 0x1B95BF4 VA: 0x1B95BF4
	public void updateNpGauge(int[] incNpArray, int index) { }

	// RVA: 0x1B95E34 Offset: 0x1B95E34 VA: 0x1B95E34
	public void updateView() { }

	// RVA: 0x1B95FB0 Offset: 0x1B95FB0 VA: 0x1B95FB0
	public void updateTDGauge() { }

	// RVA: 0x1B8D3BC Offset: 0x1B8D3BC VA: 0x1B8D3BC
	public int getMaxNp() { }

	// RVA: 0x1B9612C Offset: 0x1B9612C VA: 0x1B9612C
	public int getCountMaxNp() { }

	// RVA: 0x1B96138 Offset: 0x1B96138 VA: 0x1B96138
	public bool isAddNpGauge() { }

	// RVA: 0x1B907F4 Offset: 0x1B907F4 VA: 0x1B907F4
	public int addNp(int intp, bool flg = True) { }

	// RVA: 0x1B96144 Offset: 0x1B96144 VA: 0x1B96144
	public bool IsNpMax() { }

	// RVA: 0x1B96160 Offset: 0x1B96160 VA: 0x1B96160
	public void changeNp(int intp, bool flg = True) { }

	// RVA: 0x1B96308 Offset: 0x1B96308 VA: 0x1B96308
	public void addNpPer(float per) { }

	// RVA: 0x1B96344 Offset: 0x1B96344 VA: 0x1B96344
	public void setMaxHp() { }

	// RVA: 0x1B92214 Offset: 0x1B92214 VA: 0x1B92214
	public void updateHp() { }

	// RVA: 0x1B92564 Offset: 0x1B92564 VA: 0x1B92564
	public void updateBuff(bool doAuraUpdate = True) { }

	// RVA: 0x1B9637C Offset: 0x1B9637C VA: 0x1B9637C
	public bool ChangeBuffValue(int changeValue, int[] targetIndivi, bool isTurn, bool isAny) { }

	// RVA: 0x1B966A0 Offset: 0x1B966A0 VA: 0x1B966A0
	public void skillChageShorten(int param, int max = 0) { }

	// RVA: 0x1B96780 Offset: 0x1B96780 VA: 0x1B96780
	public void skillChageExtend(int param, int max = 999) { }

	// RVA: 0x1B96864 Offset: 0x1B96864 VA: 0x1B96864
	public float getheadUpY() { }

	// RVA: 0x1B968A8 Offset: 0x1B968A8 VA: 0x1B968A8
	public int getBaseATK() { }

	// RVA: 0x1B968B0 Offset: 0x1B968B0 VA: 0x1B968B0
	public float getCommandCardATK(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B96B04 Offset: 0x1B96B04 VA: 0x1B96B04
	public float getCommandCardNP(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B96CB4 Offset: 0x1B96CB4 VA: 0x1B96CB4
	public int getBaseStarRate() { }

	// RVA: 0x1B96CE0 Offset: 0x1B96CE0 VA: 0x1B96CE0
	public int getDownBaseStarRate() { }

	// RVA: 0x1B96CE8 Offset: 0x1B96CE8 VA: 0x1B96CE8
	public float getCommandStar(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B96E98 Offset: 0x1B96E98 VA: 0x1B96E98
	public float getClassAtk() { }

	// RVA: 0x1B96ED4 Offset: 0x1B96ED4 VA: 0x1B96ED4
	public float getUpDownAtk(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B96FAC Offset: 0x1B96FAC VA: 0x1B96FAC
	public float getUpDownDef(BattleCommandData command, BattleServantData targetSvt, bool pierce) { }

	// RVA: 0x1B97128 Offset: 0x1B97128 VA: 0x1B97128
	public float getUpDownSpecialDef(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B97200 Offset: 0x1B97200 VA: 0x1B97200
	public float getUpdownPower(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B9742C Offset: 0x1B9742C VA: 0x1B9742C
	public float getUpdownPowerSpecial(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B97520 Offset: 0x1B97520 VA: 0x1B97520
	public float getUpdownCriticalAtk(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B97634 Offset: 0x1B97634 VA: 0x1B97634
	public int[] getConcatSvtIndividualities(BattleCommandData command) { }

	// RVA: 0x1B976C8 Offset: 0x1B976C8 VA: 0x1B976C8
	public int[] getConcatServantAndBuffIndividualityies(BattleCommandData command, bool isIncludeIgnoreIndiv = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x1B977DC Offset: 0x1B977DC VA: 0x1B977DC
	public float getUpdownNpAtk(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B978B4 Offset: 0x1B978B4 VA: 0x1B978B4
	public float getUpdownSelfDamage(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B9798C Offset: 0x1B9798C VA: 0x1B9798C
	public float getUpdownDropStar(BattleCommandData command, BattleServantData opSvt, bool isAttack) { }

	// RVA: 0x1B97A70 Offset: 0x1B97A70 VA: 0x1B97A70
	public float GetUpDownDropStarDamageTaken(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B94B3C Offset: 0x1B94B3C VA: 0x1B94B3C
	public int getUpDownCriticalRate(out string missText) { }

	// RVA: 0x1B94C14 Offset: 0x1B94C14 VA: 0x1B94C14
	public int GetUpDownCriticalRateDamageTaken(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B91D14 Offset: 0x1B91D14 VA: 0x1B91D14
	public int getUpDownHeal(out int digit) { }

	// RVA: 0x1B97B98 Offset: 0x1B97B98 VA: 0x1B97B98
	public float getUpDownGiveHeal(BattleServantData opSvt) { }

	// RVA: 0x1B97C6C Offset: 0x1B97C6C VA: 0x1B97C6C
	public int getUpDownGutsHp(out int digit) { }

	// RVA: 0x1B97D1C Offset: 0x1B97D1C VA: 0x1B97D1C
	public int getCorrectedValueFuncGainNp(int tmpVal) { }

	// RVA: 0x1B97DEC Offset: 0x1B97DEC VA: 0x1B97DEC
	public int getAttackBaseNp(BattleCommandData command, bool isNoble) { }

	// RVA: 0x1B97F24 Offset: 0x1B97F24 VA: 0x1B97F24
	public int getDefenceBaseNp() { }

	// RVA: 0x1B97F60 Offset: 0x1B97F60 VA: 0x1B97F60
	public float getTdRate() { }

	// RVA: 0x1B97F78 Offset: 0x1B97F78 VA: 0x1B97F78
	public float getAtkTdRate() { }

	// RVA: 0x1B97F90 Offset: 0x1B97F90 VA: 0x1B97F90
	public float getDeathRate() { }

	// RVA: 0x1B97FA8 Offset: 0x1B97FA8 VA: 0x1B97FA8
	public float getBuffResistInstantDeath(BattleServantData opSvt) { }

	// RVA: 0x1B98088 Offset: 0x1B98088 VA: 0x1B98088
	public float getBuffNonResistInstantDeath(BattleServantData opSvt) { }

	// RVA: 0x1B98168 Offset: 0x1B98168 VA: 0x1B98168
	public float getBuffResistDelayNPTurn(BattleServantData opSvt) { }

	// RVA: 0x1B98248 Offset: 0x1B98248 VA: 0x1B98248
	public bool checkAvoidInstantDeath(BattleServantData opSvt) { }

	// RVA: 0x1B982F4 Offset: 0x1B982F4 VA: 0x1B982F4
	public float getGrantInstantDeathMagnification(BattleServantData opSvt) { }

	// RVA: 0x1B983C8 Offset: 0x1B983C8 VA: 0x1B983C8
	public float getUpDownDropNp(BattleCommandData command, BattleServantData opSvt, bool isAttack) { }

	// RVA: 0x1B984AC Offset: 0x1B984AC VA: 0x1B984AC
	public float getUpDownDamageDropNp(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B91CB4 Offset: 0x1B91CB4 VA: 0x1B91CB4
	public bool isGainNp(bool checkCount = False) { }

	// RVA: 0x1B98584 Offset: 0x1B98584 VA: 0x1B98584
	public float getUpDownGiveNp(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B9865C Offset: 0x1B9865C VA: 0x1B9865C
	public float getBuffDamageValue(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B9873C Offset: 0x1B9873C VA: 0x1B9873C
	public float getBuffSelfDamageValue(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B9881C Offset: 0x1B9881C VA: 0x1B9881C
	public bool checkPierceInvincible(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B98888 Offset: 0x1B98888 VA: 0x1B98888
	public bool checkInvincible(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B988FC Offset: 0x1B988FC VA: 0x1B988FC
	public bool checkBreakAvoidance(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B98968 Offset: 0x1B98968 VA: 0x1B98968
	public bool checkAvoidance(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B989DC Offset: 0x1B989DC VA: 0x1B989DC
	public bool CheckAvoidanceIndividuality(BattleCommandData command, BattleServantData targetSvt, out int targetBuffId) { }

	// RVA: 0x1B970BC Offset: 0x1B970BC VA: 0x1B970BC
	public bool checkPierceDefence(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1B98A78 Offset: 0x1B98A78 VA: 0x1B98A78
	public float getBuffGRANTSTATEMagnification(int[] buffIndiv, BattleServantData opSvt, out string missText) { }

	// RVA: 0x1B98D54 Offset: 0x1B98D54 VA: 0x1B98D54
	public float getBuffTOLERANCEMagnification(int[] buffIndiv, BattleServantData opSvt, out string missText) { }

	// RVA: 0x1B98E44 Offset: 0x1B98E44 VA: 0x1B98E44
	public float getBuffGRANTSUBSTATEMagnification(int[] indiv, BattleServantData opSvt) { }

	// RVA: 0x1B98F58 Offset: 0x1B98F58 VA: 0x1B98F58
	public float getBuffTOLERANCESUBSTATEMagnification(int[] indiv, BattleServantData opSvt) { }

	// RVA: 0x1B99038 Offset: 0x1B99038 VA: 0x1B99038
	public bool isBuffClassRelatioAtk(BattleCommandData command, BattleServantData opSvt, out float val, bool isAct) { }

	// RVA: 0x1B99104 Offset: 0x1B99104 VA: 0x1B99104
	public bool isBuffClassRelatioDef(BattleCommandData command, BattleServantData opSvt, out float val, bool isAct) { }

	// RVA: 0x1B991E0 Offset: 0x1B991E0 VA: 0x1B991E0
	public BattleBuffData.BuffData[] getBuffOverwriteClassRelationArray(BattleCommandData command, BattleServantData opSvt, bool isAct) { }

	// RVA: 0x1B99254 Offset: 0x1B99254 VA: 0x1B99254
	public bool checkBuffAvoid(int[] buffIndiv, BattleServantData opSvt) { }

	// RVA: 0x1B90A04 Offset: 0x1B90A04 VA: 0x1B90A04
	public bool canUseSkill(int index = -1) { }

	// RVA: 0x1B9945C Offset: 0x1B9945C VA: 0x1B9945C
	public int getSkillSealTurn() { }

	// RVA: 0x1B992D8 Offset: 0x1B992D8 VA: 0x1B992D8
	public bool[] getSkillSealSelect() { }

	// RVA: 0x1B994EC Offset: 0x1B994EC VA: 0x1B994EC
	public int getSkillSealSelectTurn(int index) { }

	// RVA: 0x1B995BC Offset: 0x1B995BC VA: 0x1B995BC
	public int getNotActTurn() { }

	// RVA: 0x1B9964C Offset: 0x1B9964C VA: 0x1B9964C
	public bool checkRegainNPUsedNoble() { }

	// RVA: 0x1B99744 Offset: 0x1B99744 VA: 0x1B99744
	public bool isAfterImage() { }

	// RVA: 0x1B9974C Offset: 0x1B9974C VA: 0x1B9974C
	public bool isJustHit() { }

	// RVA: 0x1B99754 Offset: 0x1B99754 VA: 0x1B99754
	public int getCriticalWeight(BattleCommandData command) { }

	// RVA: 0x1B91E28 Offset: 0x1B91E28 VA: 0x1B91E28
	public void provisionalHeal(int heal) { }

	// RVA: 0x1B91F8C Offset: 0x1B91F8C VA: 0x1B91F8C
	public bool provisionalDamage(int damage) { }

	// RVA: 0x1B90B24 Offset: 0x1B90B24 VA: 0x1B90B24
	public void resetReducedHp() { }

	// RVA: 0x1B9984C Offset: 0x1B9984C VA: 0x1B9984C
	public void addBuff(BattleBuffData.BuffData buff, bool fieldflg = True, bool changeMaxHpflg = False, bool unFix = False) { }

	// RVA: 0x1B998E8 Offset: 0x1B998E8 VA: 0x1B998E8
	public bool checkUpdateUpdownHp(int before_maxhp, bool isHeal) { }

	// RVA: 0x1B99A50 Offset: 0x1B99A50 VA: 0x1B99A50
	public bool CheckUpdateUpdownOnlyDisplayHp(int beforeMaxhp, bool isHeal) { }

	// RVA: 0x1B99AF0 Offset: 0x1B99AF0 VA: 0x1B99AF0
	public bool checkUpdateResumptionHpFromLossMaxHp() { }

	// RVA: 0x1B99BE8 Offset: 0x1B99BE8 VA: 0x1B99BE8
	public bool subBuffFromIndividualites(int[] individuality, int cntFromHead, int cntFromTail, ref List<BattleBuffData.BuffData> subBuffList, bool isCreateDummy = True, bool isForceSubState = False) { }

	// RVA: 0x1B8A290 Offset: 0x1B8A290 VA: 0x1B8A290
	public void InitializeBuff() { }

	// RVA: 0x1B99C90 Offset: 0x1B99C90 VA: 0x1B99C90
	public BattleBuffData getBuffData() { }

	// RVA: 0x1B99C98 Offset: 0x1B99C98 VA: 0x1B99C98
	public int getActiveIndividualitiesNum(int[] indv) { }

	// RVA: 0x1B99CD0 Offset: 0x1B99CD0 VA: 0x1B99CD0
	public int getActiveBuffNum(int[] ids) { }

	// RVA: 0x1B99D08 Offset: 0x1B99D08 VA: 0x1B99D08
	public void checkFieldBuff(int[] fieldList, FieldAliveServantData aliveSvtData, BattleLogic logic) { }

	// RVA: 0x1B99DFC Offset: 0x1B99DFC VA: 0x1B99DFC
	public static int get_CriticalIndividuality() { }

	// RVA: 0x1B89B00 Offset: 0x1B89B00 VA: 0x1B89B00
	public int[] getIndividualities(BattleCommandData command) { }

	// RVA: 0x1B98B80 Offset: 0x1B98B80 VA: 0x1B98B80
	public int[] getIndividualities(int[] addIndiv) { }

	// RVA: 0x1B99ECC Offset: 0x1B99ECC VA: 0x1B99ECC
	public int[] getWeaponIndividualities() { }

	// RVA: 0x1B99F64 Offset: 0x1B99F64 VA: 0x1B99F64
	public bool checkIndividualities(int[] indv) { }

	// RVA: 0x1B99F90 Offset: 0x1B99F90 VA: 0x1B99F90
	public bool checkBuffIndividualities(int[] indv, bool isActiveOnly = False, bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x1B99FF0 Offset: 0x1B99FF0 VA: 0x1B99FF0
	public bool checkBuffId(int[] buffIdlist) { }

	// RVA: 0x1B89DEC Offset: 0x1B89DEC VA: 0x1B89DEC
	public int[] getBuffIndividualities(bool isActiveOnly, bool isIncludeIgnoreIndiv = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x1B9A028 Offset: 0x1B9A028 VA: 0x1B9A028
	public int getSameIndiualityBuffSum(int[] indv, bool isActiveOnly, bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x1B9A088 Offset: 0x1B9A088 VA: 0x1B9A088
	public int getSameIndiualityServantSum(int[] checkIndvArray) { }

	// RVA: 0x1B9A168 Offset: 0x1B9A168 VA: 0x1B9A168
	public void recordUse() { }

	// RVA: 0x1B9A198 Offset: 0x1B9A198 VA: 0x1B9A198
	public bool isSphitBuff(out int effectId) { }

	// RVA: 0x1B9A1D0 Offset: 0x1B9A1D0 VA: 0x1B9A1D0
	public BattleBuffData.ShowBuffData[] getRecBuffList(bool isAtkSide, bool isShowOverwriteClassRelation = True, bool isShowDarkClassRelation = False) { }

	// RVA: 0x1B93878 Offset: 0x1B93878 VA: 0x1B93878
	public void resetActionHistory() { }

	// RVA: 0x1B92088 Offset: 0x1B92088 VA: 0x1B92088
	public void setActionHistory(int actUniqueId, BattleServantActionHistory.TYPE actType, int wavecount, bool isOpponent) { }

	// RVA: 0x1B92B78 Offset: 0x1B92B78 VA: 0x1B92B78
	public int getRevengeTargetUniqueId() { }

	// RVA: 0x1B929D8 Offset: 0x1B929D8 VA: 0x1B929D8
	public int getRevengeTargetUniqueIdFromOpponent() { }

	// RVA: 0x1B9A220 Offset: 0x1B9A220 VA: 0x1B9A220
	public int getDeadTargetUniqueId() { }

	// RVA: 0x1B9A2C0 Offset: 0x1B9A2C0 VA: 0x1B9A2C0
	public BattleSkillInfoData getSkillInfoDataByAiActType(AiAct.TYPE type) { }

	// RVA: 0x1B9A314 Offset: 0x1B9A314 VA: 0x1B9A314
	public void recordDeadTurn(BattleData.TYPETURN turn) { }

	// RVA: 0x1B9A31C Offset: 0x1B9A31C VA: 0x1B9A31C
	public bool checkDeadTurn(BattleData.TYPETURN turn) { }

	// RVA: 0x1B94A14 Offset: 0x1B94A14 VA: 0x1B94A14
	public void RegisterWaveTurnEvent(ServantWaveTurnEvent ev) { }

	// RVA: -1 Offset: -1
	private bool HasWaveTurnEvent<T>(int wave, int turn) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26A0788 Offset: 0x26A0788 VA: 0x26A0788
	|-BattleServantData.HasWaveTurnEvent<MoveToSubMemberWaveTurnEvent>
	|-BattleServantData.HasWaveTurnEvent<object>
	|-BattleServantData.HasWaveTurnEvent<UseNoblePhantasmWaveTurnEvent>
	*/

	// RVA: 0x1B9A32C Offset: 0x1B9A32C VA: 0x1B9A32C
	public bool IsMoveToSubMember(int wave, int turn) { }

	// RVA: 0x1B92138 Offset: 0x1B92138 VA: 0x1B92138
	public bool IsUseNoblePhantasmOnThisWaveTurn(int wave, int turn) { }

	// RVA: 0x1B9A394 Offset: 0x1B9A394 VA: 0x1B9A394
	public int[] GetCommandCodeIds() { }

	// RVA: 0x1B9A5AC Offset: 0x1B9A5AC VA: 0x1B9A5AC
	public int[] GetCommandCodeIdsEX() { }

	// RVA: 0x1B9A6F4 Offset: 0x1B9A6F4 VA: 0x1B9A6F4
	public int GetCommandCardIndex(long userCommandCodeId) { }

	// RVA: 0x1B9A774 Offset: 0x1B9A774 VA: 0x1B9A774
	public BattleServantData.ConnectData getConnenctData() { }

	// RVA: 0x1B91ECC Offset: 0x1B91ECC VA: 0x1B91ECC
	public bool resultHeal(int heal) { }

	// RVA: 0x1B91FFC Offset: 0x1B91FFC VA: 0x1B91FFC
	public bool resultDamage(int damage, int minHp = 0) { }

	// RVA: 0x1B90B34 Offset: 0x1B90B34 VA: 0x1B90B34
	public void updateResultState() { }

	// RVA: 0x1B93984 Offset: 0x1B93984 VA: 0x1B93984
	public bool isLogicResultAlive() { }

	// RVA: 0x1B9A844 Offset: 0x1B9A844 VA: 0x1B9A844
	public bool isLogicDeadAndNoRevive() { }

	// RVA: 0x1B923D0 Offset: 0x1B923D0 VA: 0x1B923D0
	public void updateConditionsBuff(int[] fieldInfividualities, BattlePerformance perf) { }

	// RVA: 0x1B9A88C Offset: 0x1B9A88C VA: 0x1B9A88C
	public int[] getAuraIdList() { }

	// RVA: 0x1B9A9B4 Offset: 0x1B9A9B4 VA: 0x1B9A9B4
	public void setStateString(string str) { }

	// RVA: 0x1B9A9BC Offset: 0x1B9A9BC VA: 0x1B9A9BC
	public string getStateString() { }

	// RVA: 0x1B9A9C4 Offset: 0x1B9A9C4 VA: 0x1B9A9C4
	public bool isShiftServant() { }

	// RVA: 0x1B91F68 Offset: 0x1B91F68 VA: 0x1B91F68
	public bool isShiftableServant() { }

	// RVA: 0x1B9A9F8 Offset: 0x1B9A9F8 VA: 0x1B9A9F8
	public bool isShiftReady() { }

	// RVA: 0x1B9AA3C Offset: 0x1B9AA3C VA: 0x1B9AA3C
	public int GetMaxShiftIconCount() { }

	// RVA: 0x1B9AA74 Offset: 0x1B9AA74 VA: 0x1B9AA74
	public int GetMaxShiftIconPos() { }

	// RVA: 0x1B9AAB4 Offset: 0x1B9AAB4 VA: 0x1B9AAB4
	public int GetCurrentShiftPos() { }

	// RVA: 0x1B9AAEC Offset: 0x1B9AAEC VA: 0x1B9AAEC
	public void SetShiftServantChange(BattleData data, EnemySimpleHpData defHp, int shiftValue = 1) { }

	// RVA: 0x1B9AB64 Offset: 0x1B9AB64 VA: 0x1B9AB64
	public void setShiftServant(BattleData data, int shiftValue = 1) { }

	// RVA: 0x1B9AD6C Offset: 0x1B9AD6C VA: 0x1B9AD6C
	public bool isChangeServant() { }

	// RVA: 0x1B9ADA0 Offset: 0x1B9ADA0 VA: 0x1B9ADA0
	public void setChangeServant(BattleData data, int val) { }

	// RVA: 0x1B9B01C Offset: 0x1B9B01C VA: 0x1B9B01C Slot: 19
	public virtual double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams) { }

	// RVA: 0x1B9B770 Offset: 0x1B9B770 VA: 0x1B9B770
	private long[] convertLong(int[] param) { }

	// RVA: 0x1B9B684 Offset: 0x1B9B684 VA: 0x1B9B684
	private double[] convertDouble(int[] param) { }

	// RVA: 0x1B9B858 Offset: 0x1B9B858 VA: 0x1B9B858 Slot: 5
	public bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }

	// RVA: 0x1B97B48 Offset: 0x1B97B48 VA: 0x1B97B48 Slot: 6
	public void setBuffState() { }

	// RVA: 0x1B9B91C Offset: 0x1B9B91C VA: 0x1B9B91C
	public double GetWkHpRatio() { }

	// RVA: 0x1B9B96C Offset: 0x1B9B96C VA: 0x1B9B96C Slot: 7
	public int getBuffStateValue(BuffList.CHANGEVALUE changeValue, int ratioParam) { }

	// RVA: 0x1B9BA40 Offset: 0x1B9BA40 VA: 0x1B9BA40 Slot: 8
	public int getBuffRangeValue(int lowEffectValue, int highEffectValue, int lowRange, int highRange) { }

	// RVA: 0x1B9BB70 Offset: 0x1B9BB70 VA: 0x1B9BB70
	private double CalcHpRangeRatio(int value) { }

	// RVA: 0x1B9BBA8 Offset: 0x1B9BBA8 VA: 0x1B9BBA8
	public void orderAppearanceId(int id) { }

	// RVA: 0x1B9BBB0 Offset: 0x1B9BBB0 VA: 0x1B9BBB0
	public void SetForceAppearance(bool flg) { }

	// RVA: 0x1B9BBBC Offset: 0x1B9BBBC VA: 0x1B9BBBC
	public bool IsForceAppearance() { }

	// RVA: 0x1B9BBC4 Offset: 0x1B9BBC4 VA: 0x1B9BBC4
	public bool IsTDAppearance() { }

	// RVA: 0x1B9BC18 Offset: 0x1B9BC18 VA: 0x1B9BC18
	public int getAppearanceId() { }

	// RVA: 0x1B88F68 Offset: 0x1B88F68 VA: 0x1B88F68
	public void changeAppearanceId() { }

	// RVA: 0x1B9BCA0 Offset: 0x1B9BCA0 VA: 0x1B9BCA0
	public bool isAppearanceId() { }

	// RVA: 0x1B88F10 Offset: 0x1B88F10 VA: 0x1B88F10
	public bool isChangeAppearance() { }

	// RVA: 0x1B89438 Offset: 0x1B89438 VA: 0x1B89438
	private bool isChangeAppearanceBuff(BattleBuffData.BuffData[] list) { }

	// RVA: 0x1B9BCB0 Offset: 0x1B9BCB0 VA: 0x1B9BCB0
	public bool IsNoVoice() { }

	// RVA: 0x1B9BCC4 Offset: 0x1B9BCC4 VA: 0x1B9BCC4
	public int GetBillBoardGroup() { }

	// RVA: 0x1B9A4DC Offset: 0x1B9A4DC VA: 0x1B9A4DC
	public CommandCodeInfo GetCommandCodeInfo(long userCommandCodeId) { }

	// RVA: 0x1B9BCE4 Offset: 0x1B9BCE4 VA: 0x1B9BCE4
	public bool CheckFirstNpPlay(BattleData data) { }

	// RVA: 0x1B9BEB0 Offset: 0x1B9BEB0 VA: 0x1B9BEB0
	private bool IsContainsSeqId(BattleData data, int seqId) { }

	// RVA: 0x1B9C048 Offset: 0x1B9C048 VA: 0x1B9C048
	public void SaveFirstNpPlay(BattleData data) { }

	// RVA: 0x1B9C290 Offset: 0x1B9C290 VA: 0x1B9C290
	public void SetIsSleepWaitMode(bool value) { }

	// RVA: 0x1B9C2A4 Offset: 0x1B9C2A4 VA: 0x1B9C2A4
	public void forceDead() { }

	// RVA: 0x1B9C2EC Offset: 0x1B9C2EC VA: 0x1B9C2EC
	public bool isTargetRarity(int[] targetRarityList) { }

	// RVA: 0x1B9C38C Offset: 0x1B9C38C VA: 0x1B9C38C
	public bool checkAllIndividualities(int[] indv) { }

	// RVA: 0x1B8E9F4 Offset: 0x1B8E9F4 VA: 0x1B8E9F4
	private void checkServantTreasureDvcEntity() { }

	// RVA: 0x1B9C3B8 Offset: 0x1B9C3B8 VA: 0x1B9C3B8
	public bool isMultiTargetCore() { }

	// RVA: 0x1B9C3CC Offset: 0x1B9C3CC VA: 0x1B9C3CC
	public bool isMultiTargetUp() { }

	// RVA: 0x1B9C3E0 Offset: 0x1B9C3E0 VA: 0x1B9C3E0
	public bool isMultiTargetUnder() { }

	// RVA: 0x1B9C3F4 Offset: 0x1B9C3F4 VA: 0x1B9C3F4
	public bool isMultiTargetBattleStartPos() { }

	// RVA: 0x1B9C408 Offset: 0x1B9C408 VA: 0x1B9C408
	public int getMultiTargetBattleDeadChangePos() { }

	// RVA: 0x1B9C420 Offset: 0x1B9C420 VA: 0x1B9C420
	public void SetServantNPSpeedCommonFlag(int buttonIndex) { }

	// RVA: 0x1B9C460 Offset: 0x1B9C460 VA: 0x1B9C460
	public void SetSelectedTreasureDevice() { }

	// RVA: 0x1B9C498 Offset: 0x1B9C498 VA: 0x1B9C498
	public void ResetSelectedTreasureDevice() { }

	// RVA: 0x1B9C4A4 Offset: 0x1B9C4A4 VA: 0x1B9C4A4
	public bool checkSpecialInvincible(BattleCommandData command, BattleServantData targetSvt, out bool isSpecialInvincible) { }

	// RVA: 0x1B9C540 Offset: 0x1B9C540 VA: 0x1B9C540
	public void UpdateAfterShowBuff(BattleActionData.BuffData actBuff) { }

	// RVA: 0x1B9C5A8 Offset: 0x1B9C5A8 VA: 0x1B9C5A8
	public bool IsEquip() { }

	// RVA: 0x1B9C7E8 Offset: 0x1B9C7E8 VA: 0x1B9C7E8
	public void ClearOverwriteServantName() { }

	// RVA: 0x1B9C7F0 Offset: 0x1B9C7F0 VA: 0x1B9C7F0 Slot: 20
	public virtual void PrevActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor) { }

	// RVA: 0x1B9C7F4 Offset: 0x1B9C7F4 VA: 0x1B9C7F4 Slot: 21
	public virtual void AfterActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor, BattlePerformance perf) { }

	// RVA: 0x1B9C7F8 Offset: 0x1B9C7F8 VA: 0x1B9C7F8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A844 Offset: 0xD3A844 VA: 0xD3A844
	// RVA: 0x1B9C7FC Offset: 0x1B9C7FC VA: 0x1B9C7FC
	private static bool <getPassiveSkills>m__0(BattleSkillInfoData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A854 Offset: 0xD3A854 VA: 0xD3A854
	// RVA: 0x1B9C824 Offset: 0x1B9C824 VA: 0x1B9C824
	private static bool <getActiveSkillInfos>m__1(BattleSkillInfoData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A864 Offset: 0xD3A864 VA: 0xD3A864
	// RVA: 0x1B9C864 Offset: 0x1B9C864 VA: 0x1B9C864
	private static int <getAttackSideEffectBuffList>m__2(BattleBuffData.BuffData a1, BattleBuffData.BuffData a2) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A874 Offset: 0xD3A874 VA: 0xD3A874
	// RVA: -1 Offset: -1
	private static bool <HasWaveTurnEvent`1>m__3<T>(ServantWaveTurnEvent x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26A0740 Offset: 0x26A0740 VA: 0x26A0740
	|-BattleServantData.<HasWaveTurnEvent`1>m__3<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xD3A884 Offset: 0xD3A884 VA: 0xD3A884
	// RVA: 0x1B9C8A4 Offset: 0x1B9C8A4 VA: 0x1B9C8A4
	private static int <getAiParam>m__4(long s) { }
}

// Namespace: 
public enum BattleServantData.STATUS // TypeDefIndex: 8940
{
	// Fields
	public int value__; // 0x0
	public const BattleServantData.STATUS NOMAL = 0;
	public const BattleServantData.STATUS ACT_RESURRECTION = 1;
	public const BattleServantData.STATUS ACT_DEAD = 2;
	public const BattleServantData.STATUS ACT_WITHDRAW = 3;
	public const BattleServantData.STATUS ACT_CHANGEAPP = 4;
}

// Namespace: 
public enum BattleServantData.DEADTYPE // TypeDefIndex: 8941
{
	// Fields
	public int value__; // 0x0
	public const BattleServantData.DEADTYPE NORMAL = 0;
	public const BattleServantData.DEADTYPE ESCAPE = 1;
	public const BattleServantData.DEADTYPE STAND = 2;
	public const BattleServantData.DEADTYPE EFFECT = 3;
	public const BattleServantData.DEADTYPE WAIT = 4;
}

// Namespace: 
public class BattleServantData.Adjustment // TypeDefIndex: 8942
{
	// Fields
	public bool isCritical; // 0x10
	public bool isWeak; // 0x11
	public bool isRegist; // 0x12
	public bool isNoDamage; // 0x13
	public Vector3 offSet; // 0x14

	// Methods

	// RVA: 0x1B880A0 Offset: 0x1B880A0 VA: 0x1B880A0
	public void .ctor() { }
}

// Namespace: 
public class BattleServantData.SaveData // TypeDefIndex: 8943
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCD04AC Offset: 0xCD04AC VA: 0xCD04AC
	public int index; // 0x10
	[PackKeyAttribute] // RVA: 0xCD04E4 Offset: 0xCD04E4 VA: 0xCD04E4
	public int hp; // 0x14
	[PackKeyAttribute] // RVA: 0xCD051C Offset: 0xCD051C VA: 0xCD051C
	public int np; // 0x18
	[PackKeyAttribute] // RVA: 0xCD0554 Offset: 0xCD0554 VA: 0xCD0554
	public int nextNp; // 0x1C
	[PackKeyAttribute] // RVA: 0xCD058C Offset: 0xCD058C VA: 0xCD058C
	public int isEntry; // 0x20
	[PackKeyAttribute] // RVA: 0xCD05C4 Offset: 0xCD05C4 VA: 0xCD05C4
	public int isDeadAnime; // 0x24
	[PackKeyAttribute] // RVA: 0xCD05FC Offset: 0xCD05FC VA: 0xCD05FC
	public int[] skillinfoid_list; // 0x28
	[PackKeyAttribute] // RVA: 0xCD0634 Offset: 0xCD0634 VA: 0xCD0634
	public int[] skillcharge_list; // 0x30
	[PackKeyAttribute] // RVA: 0xCD066C Offset: 0xCD066C VA: 0xCD066C
	public AiState.SaveData aistateSave; // 0x38
	[PackKeyAttribute] // RVA: 0xCD06A4 Offset: 0xCD06A4 VA: 0xCD06A4
	public BattleBuffData.SaveData buffDataSave; // 0x40
	[PackKeyAttribute] // RVA: 0xCD06DC Offset: 0xCD06DC VA: 0xCD06DC
	public int deckIndex; // 0x48
	[PackKeyAttribute] // RVA: 0xCD0714 Offset: 0xCD0714 VA: 0xCD0714
	public int transformIndex; // 0x4C
	[PackKeyAttribute] // RVA: 0xCD074C Offset: 0xCD074C VA: 0xCD074C
	public int dressDispId; // 0x50
	[PackKeyAttribute] // RVA: 0xCD0784 Offset: 0xCD0784 VA: 0xCD0784
	public int accumulationDamage; // 0x54
	[PackKeyAttribute] // RVA: 0xCD07BC Offset: 0xCD07BC VA: 0xCD07BC
	public string statestring; // 0x58
	[PackKeyAttribute] // RVA: 0xCD07F4 Offset: 0xCD07F4 VA: 0xCD07F4
	public int summonNpcId; // 0x60
	[PackKeyAttribute] // RVA: 0xCD082C Offset: 0xCD082C VA: 0xCD082C
	public int uniqueId; // 0x64
	[PackKeyAttribute] // RVA: 0xCD0864 Offset: 0xCD0864 VA: 0xCD0864
	public int shiftDeckIndex; // 0x68
	[PackKeyAttribute] // RVA: 0xCD089C Offset: 0xCD089C VA: 0xCD089C
	public int changeSvtIndex; // 0x6C
	[PackKeyAttribute] // RVA: 0xCD08D4 Offset: 0xCD08D4 VA: 0xCD08D4
	public bool isSleepWaitMode; // 0x70
	[PackKeyAttribute] // RVA: 0xCD090C Offset: 0xCD090C VA: 0xCD090C
	public int shiftNpcId; // 0x74
	[PackKeyAttribute] // RVA: 0xCD0944 Offset: 0xCD0944 VA: 0xCD0944
	public long beforeUserSvtId; // 0x78
	[PackKeyAttribute] // RVA: 0xCD097C Offset: 0xCD097C VA: 0xCD097C
	public bool isAlreadyDrop; // 0x80
	[PackKeyAttribute] // RVA: 0xCD09B4 Offset: 0xCD09B4 VA: 0xCD09B4
	public int lowLimitShift; // 0x84
	[PackKeyAttribute] // RVA: 0xCD09EC Offset: 0xCD09EC VA: 0xCD09EC
	public int playedNPCount; // 0x88
	[PackKeyAttribute] // RVA: 0xCD0A24 Offset: 0xCD0A24 VA: 0xCD0A24
	public int defeatPoint; // 0x8C
	[PackKeyAttribute] // RVA: 0xCD0A5C Offset: 0xCD0A5C VA: 0xCD0A5C
	public int befSquareIndex; // 0x90
	[PackKeyAttribute] // RVA: 0xCD0A94 Offset: 0xCD0A94 VA: 0xCD0A94
	public int aftSquareIndex; // 0x94
	[PackKeyAttribute] // RVA: 0xCD0ACC Offset: 0xCD0ACC VA: 0xCD0ACC
	public bool isAppliedHaveStars; // 0x98
	[PackKeyAttribute] // RVA: 0xCD0B04 Offset: 0xCD0B04 VA: 0xCD0B04
	public int maxDefeatPoint; // 0x9C
	[PackKeyAttribute] // RVA: 0xCD0B3C Offset: 0xCD0B3C VA: 0xCD0B3C
	public int squareEffectSkillId; // 0xA0
	[PackKeyAttribute] // RVA: 0xCD0B74 Offset: 0xCD0B74 VA: 0xCD0B74
	public int squareEffectSkillLv; // 0xA4
	[PackKeyAttribute] // RVA: 0xCD0BAC Offset: 0xCD0BAC VA: 0xCD0BAC
	public int deadtype; // 0xA8
	[PackKeyAttribute] // RVA: 0xCD0BE4 Offset: 0xCD0BE4 VA: 0xCD0BE4
	public int transformLimitCount; // 0xAC
	[PackKeyAttribute] // RVA: 0xCD0C1C Offset: 0xCD0C1C VA: 0xCD0C1C
	public AiState.SaveData[] npcAiStates; // 0xB0
	[PackKeyAttribute] // RVA: 0xCD0C54 Offset: 0xCD0C54 VA: 0xCD0C54
	public int npcActCount; // 0xB8
	[PackKeyAttribute] // RVA: 0xCD0C8C Offset: 0xCD0C8C VA: 0xCD0C8C
	public int npcTotalActCount; // 0xBC

	// Methods

	// RVA: 0x1B88994 Offset: 0x1B88994 VA: 0x1B88994
	public void .ctor() { }
}

// Namespace: 
public class BattleServantData.ConnectData // TypeDefIndex: 8944
{
	// Fields
	public int uniqueId; // 0x10
	public int hp; // 0x14
	public int atk; // 0x18

	// Methods

	// RVA: 0x1B9A804 Offset: 0x1B9A804 VA: 0x1B9A804
	public void .ctor(int uniqueId, int hp, int atk) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFFA0 Offset: 0xCAFFA0 VA: 0xCAFFA0
private sealed class BattleServantData.<setBaseServantData>c__AnonStorey0 // TypeDefIndex: 8945
{
	// Fields
	internal CommandCodeInfo info; // 0x10

	// Methods

	// RVA: 0x1B8CF1C Offset: 0x1B8CF1C VA: 0x1B8CF1C
	public void .ctor() { }

	// RVA: 0x1B9CC4C Offset: 0x1B9CC4C VA: 0x1B9CC4C
	internal bool <>m__0(long id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFFB0 Offset: 0xCAFFB0 VA: 0xCAFFB0
private sealed class BattleServantData.<ReplaceSelfSkillInfo>c__AnonStorey1 // TypeDefIndex: 8946
{
	// Fields
	internal BattleSkillInfoData.TYPE skillInfoType; // 0x10
	internal int index; // 0x14

	// Methods

	// RVA: 0x1B8EDF0 Offset: 0x1B8EDF0 VA: 0x1B8EDF0
	public void .ctor() { }

	// RVA: 0x1B9CB08 Offset: 0x1B9CB08 VA: 0x1B9CB08
	internal bool <>m__0(BattleSkillInfoData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFFC0 Offset: 0xCAFFC0 VA: 0xCAFFC0
private sealed class BattleServantData.<GetHasSideEffectSkillEffectIds>c__AnonStorey2 // TypeDefIndex: 8947
{
	// Fields
	internal FunctionMaster funcMst; // 0x10
	internal List<int> retList; // 0x18

	// Methods

	// RVA: 0x1B8F400 Offset: 0x1B8F400 VA: 0x1B8F400
	public void .ctor() { }

	// RVA: 0x1B9C8E4 Offset: 0x1B9C8E4 VA: 0x1B9C8E4
	internal void <>m__0(SkillLvEntity ent) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFFD0 Offset: 0xCAFFD0 VA: 0xCAFFD0
private sealed class BattleServantData.<isUseSelfSkill>c__AnonStorey3 // TypeDefIndex: 8948
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1B90D70 Offset: 0x1B90D70 VA: 0x1B90D70
	public void .ctor() { }

	// RVA: 0x1B9CBFC Offset: 0x1B9CBFC VA: 0x1B9CBFC
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFFE0 Offset: 0xCAFFE0 VA: 0xCAFFE0
private sealed class BattleServantData.<getSelfSkillInfo>c__AnonStorey4 // TypeDefIndex: 8949
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1B90D78 Offset: 0x1B90D78 VA: 0x1B90D78
	public void .ctor() { }

	// RVA: 0x1B9CB5C Offset: 0x1B9CB5C VA: 0x1B9CB5C
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFFF0 Offset: 0xCAFFF0 VA: 0xCAFFF0
private sealed class BattleServantData.<getTempSkillInfo>c__AnonStorey5 // TypeDefIndex: 8950
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1B90E50 Offset: 0x1B90E50 VA: 0x1B90E50
	public void .ctor() { }

	// RVA: 0x1B9CBAC Offset: 0x1B9CBAC VA: 0x1B9CBAC
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0000 Offset: 0xCB0000 VA: 0xCB0000
private sealed class BattleServantData.<updateNpGauge>c__AnonStorey6 // TypeDefIndex: 8951
{
	// Fields
	internal int[] incNpArray; // 0x10
	internal int index; // 0x18
	internal BattleServantData $this; // 0x20

	// Methods

	// RVA: 0x1B95E2C Offset: 0x1B95E2C VA: 0x1B95E2C
	public void .ctor() { }

	// RVA: 0x1B9CD58 Offset: 0x1B9CD58 VA: 0x1B9CD58
	internal void <>m__0(IEventMessageRecieve reciever, BaseEventData eventData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0010 Offset: 0xCB0010 VA: 0xCB0010
private sealed class BattleServantData.<updateBuff>c__AnonStorey7 // TypeDefIndex: 8952
{
	// Fields
	internal bool doAuraUpdate; // 0x10
	internal BattleServantData $this; // 0x18

	// Methods

	// RVA: 0x1B96374 Offset: 0x1B96374 VA: 0x1B96374
	public void .ctor() { }

	// RVA: 0x1B9CC84 Offset: 0x1B9CC84 VA: 0x1B9CC84
	internal void <>m__0(IEventMessageRecieve reciever, BaseEventData eventData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0020 Offset: 0xCB0020 VA: 0xCB0020
private sealed class BattleServantData.<GetCommandCodeInfo>c__AnonStorey8 // TypeDefIndex: 8953
{
	// Fields
	internal long userCommandCodeId; // 0x10

	// Methods

	// RVA: 0x1B9BCDC Offset: 0x1B9BCDC VA: 0x1B9BCDC
	public void .ctor() { }

	// RVA: 0x1B9C8A8 Offset: 0x1B9C8A8 VA: 0x1B9C8A8
	internal bool <>m__0(CommandCodeInfo c) { }
}

// Namespace: 
public class AiNpcBattleServantData : BattleServantData // TypeDefIndex: 8954
