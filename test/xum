	[DebuggerHiddenAttribute] // RVA: 0xCD2F48 Offset: 0xCD2F48 VA: 0xCD2F48
	[DebuggerStepThroughAttribute] // RVA: 0xCD2F48 Offset: 0xCD2F48 VA: 0xCD2F48
	// RVA: 0x1069040 Offset: 0x1069040 VA: 0x1069040
	public static void Call(Action action) { }

	[ExtensionAttribute] // RVA: 0xCD2F90 Offset: 0xCD2F90 VA: 0xCD2F90
	[DebuggerHiddenAttribute] // RVA: 0xCD2F90 Offset: 0xCD2F90 VA: 0xCD2F90
	[DebuggerStepThroughAttribute] // RVA: 0xCD2F90 Offset: 0xCD2F90 VA: 0xCD2F90
	// RVA: -1 Offset: -1
	public static void Call<T>(Action<T> action, T arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5D750 Offset: 0x1C5D750 VA: 0x1C5D750
	|-ActionExtensions.Call<ShowAllEx.DamageFuncArgument>
	|
	|-RVA: 0x1C5D854 Offset: 0x1C5D854 VA: 0x1C5D854
	|-ActionExtensions.Call<MaterialEventLogListViewItem>
	|-ActionExtensions.Call<MissionNotifyComponent>
	|-ActionExtensions.Call<PurchaseByBank_UnityIap_Request.PurchaseResult[]>
	|-ActionExtensions.Call<SubmarineMapPanelData>
	|-ActionExtensions.Call<Action>
	|-ActionExtensions.Call<object>
	|-ActionExtensions.Call<string>
	|
	|-RVA: 0x1C5D79C Offset: 0x1C5D79C VA: 0x1C5D79C
	|-ActionExtensions.Call<bool>
	|
	|-RVA: 0x1C5D80C Offset: 0x1C5D80C VA: 0x1C5D80C
	|-ActionExtensions.Call<int>
	|
	|-RVA: 0x1C5D86C Offset: 0x1C5D86C VA: 0x1C5D86C
	|-ActionExtensions.Call<float>
	*/

	[ExtensionAttribute] // RVA: 0xCD2FD8 Offset: 0xCD2FD8 VA: 0xCD2FD8
	[DebuggerHiddenAttribute] // RVA: 0xCD2FD8 Offset: 0xCD2FD8 VA: 0xCD2FD8
	[DebuggerStepThroughAttribute] // RVA: 0xCD2FD8 Offset: 0xCD2FD8 VA: 0xCD2FD8
	// RVA: -1 Offset: -1
	public static void Call<T1, T2>(Action<T1, T2> action, T1 arg1, T2 arg2) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5D7D8 Offset: 0x1C5D7D8 VA: 0x1C5D7D8
	|-ActionExtensions.Call<int, bool>
	|
	|-RVA: 0x1C5D7F4 Offset: 0x1C5D7F4 VA: 0x1C5D7F4
	|-ActionExtensions.Call<int, int>
	|
	|-RVA: 0x1C5D83C Offset: 0x1C5D83C VA: 0x1C5D83C
	|-ActionExtensions.Call<object, object>
	*/

	[ExtensionAttribute] // RVA: 0xCD3020 Offset: 0xCD3020 VA: 0xCD3020
	[DebuggerHiddenAttribute] // RVA: 0xCD3020 Offset: 0xCD3020 VA: 0xCD3020
	[DebuggerStepThroughAttribute] // RVA: 0xCD3020 Offset: 0xCD3020 VA: 0xCD3020
	// RVA: -1 Offset: -1
	public static void Call<T1, T2, T3>(Action<T1, T2, T3> action, T1 arg1, T2 arg2, T3 arg3) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5D7B8 Offset: 0x1C5D7B8 VA: 0x1C5D7B8
	|-ActionExtensions.Call<int, bool, bool>
	|
	|-RVA: 0x1C5D824 Offset: 0x1C5D824 VA: 0x1C5D824
	|-ActionExtensions.Call<object, object, object>
	*/
}

// Namespace: 
public class BlinkingComponent : MonoBehaviour // TypeDefIndex: 11026
{
	// Fields
	public const float ITVL_TIME = 0.75;
	private float mOldTime; // 0x18
	private Vector3 mOrgScl; // 0x1C
	private bool mIsPlay; // 0x28
	private bool mIsDisp; // 0x29

	// Methods

	// RVA: 0x19B143C Offset: 0x19B143C VA: 0x19B143C
	public void .ctor() { }

	// RVA: 0x19B1444 Offset: 0x19B1444 VA: 0x19B1444
	private void Awake() { }

	// RVA: 0x19B1478 Offset: 0x19B1478 VA: 0x19B1478
	private void OnEnable() { }

	// RVA: 0x19B1498 Offset: 0x19B1498 VA: 0x19B1498
	private void Update() { }

	// RVA: 0x19B1488 Offset: 0x19B1488 VA: 0x19B1488
	public void Play() { }

	// RVA: 0x19B14FC Offset: 0x19B14FC VA: 0x19B14FC
	public void Stop() { }

	// RVA: 0x19B149C Offset: 0x19B149C VA: 0x19B149C
	private void PlayExec() { }

	// RVA: 0x19B1508 Offset: 0x19B1508 VA: 0x19B1508
	private void SetDisp(bool is_disp) { }
}

// Namespace: 
public class CachableMonoBehaviour : MonoBehaviour // TypeDefIndex: 11027
{
	// Fields
	private Renderer mRenderer; // 0x18
	private Rigidbody mRigidbody; // 0x20
	private Transform mTransform; // 0x28

	// Properties
	public Renderer renderer { get; }
	public Rigidbody rigidbody { get; }
	public Transform transform { get; }

	// Methods

	// RVA: 0x14E2DE8 Offset: 0x14E2DE8 VA: 0x14E2DE8
	public void .ctor() { }

	// RVA: 0x14E2DF0 Offset: 0x14E2DF0 VA: 0x14E2DF0
	public Renderer get_renderer() { }

	// RVA: 0x14E2E88 Offset: 0x14E2E88 VA: 0x14E2E88
	public Rigidbody get_rigidbody() { }

	// RVA: 0x14E2F20 Offset: 0x14E2F20 VA: 0x14E2F20
	public Transform get_transform() { }
}

// Namespace: 
public interface IState<T> // TypeDefIndex: 11028
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void begin(T that);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IState<object>.begin
	*/

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void update(T that);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IState<object>.update
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void end(T that);
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IState<object>.end
	*/
}

// Namespace: 
public class CFSM<T> // TypeDefIndex: 11029
{
	// Fields
	private IState<T> m_current; // 0x0
	private T that; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x22654CC Offset: 0x22654CC VA: 0x22654CC
	|-CFSM<object>..ctor
	*/

	// RVA: -1 Offset: -1
	public IState<T> getState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265504 Offset: 0x2265504 VA: 0x2265504
	|-CFSM<object>.getState
	*/

	// RVA: -1 Offset: -1
	public void _set(IState<T> val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226550C Offset: 0x226550C VA: 0x226550C
	|-CFSM<object>._set
	*/

	// RVA: -1 Offset: -1
	public void setState(IState<T> val) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265514 Offset: 0x2265514 VA: 0x2265514
	|-CFSM<object>.setState
	*/

	// RVA: -1 Offset: -1
	public void update() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226569C Offset: 0x226569C VA: 0x226569C
	|-CFSM<object>.update
	*/

	// RVA: -1 Offset: -1
	public void destroy() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265758 Offset: 0x2265758 VA: 0x2265758
	|-CFSM<object>.destroy
	*/
}

// Namespace: 
public class CStateManager<T> // TypeDefIndex: 11030
{
	// Fields
	private CFSM<T> m_fsm; // 0x0
	private int m_state; // 0x0
	private IState<T>[] m_state_table; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T that, int max) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265814 Offset: 0x2265814 VA: 0x2265814
	|-CStateManager<CylinderCore>..ctor
	|-CStateManager<EarthCore>..ctor
	|-CStateManager<EventPointVsResultAction>..ctor
	|-CStateManager<EventRaceResultEffect>..ctor
	|-CStateManager<MapGimmickComponent>..ctor
	|-CStateManager<MissionNotifyComponent>..ctor
	|-CStateManager<MyRoomControl>..ctor
	|-CStateManager<MyRoomStateMaterial>..ctor
	|-CStateManager<QuestAfterAction>..ctor
	|-CStateManager<QuestBoardListEffectComponent>..ctor
	|-CStateManager<QuestBoardListViewEarthLine>..ctor
	|-CStateManager<QuestPhaseRewardComponent>..ctor
	|-CStateManager<QuestRewardBoxAction>..ctor
	|-CStateManager<QuestRewardCostumeAction>..ctor
	|-CStateManager<QuestRewardHarvestAction>..ctor
	|-CStateManager<QuestRewardItemAction>..ctor
	|-CStateManager<QuestRewardOrderGradeAction>..ctor
	|-CStateManager<QuestRewardTokenAction>..ctor
	|-CStateManager<ServantRewardAction>..ctor
	|-CStateManager<SpotLargeComponent>..ctor
	|-CStateManager<SrcSpotBasePrefab>..ctor
	|-CStateManager<StandFigureSlideComponent>..ctor
	|-CStateManager<object>..ctor
	|-CStateManager<TerminalSceneComponent>..ctor
	|-CStateManager<TitleInfoWarBoardTitleComponent>..ctor
	|-CStateManager<srcLineSprite>..ctor
	*/

	// RVA: -1 Offset: -1
	public void add(int idx, IState<T> si) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x22658D0 Offset: 0x22658D0 VA: 0x22658D0
	|-CStateManager<CylinderCore>.add
	|-CStateManager<EarthCore>.add
	|-CStateManager<EventPointVsResultAction>.add
	|-CStateManager<EventRaceResultEffect>.add
	|-CStateManager<MapGimmickComponent>.add
	|-CStateManager<MissionNotifyComponent>.add
	|-CStateManager<MyRoomControl>.add
	|-CStateManager<MyRoomStateMaterial>.add
	|-CStateManager<QuestAfterAction>.add
	|-CStateManager<QuestBoardListEffectComponent>.add
	|-CStateManager<QuestBoardListViewEarthLine>.add
	|-CStateManager<QuestPhaseRewardComponent>.add
	|-CStateManager<QuestRewardBoxAction>.add
	|-CStateManager<QuestRewardCostumeAction>.add
	|-CStateManager<QuestRewardHarvestAction>.add
	|-CStateManager<QuestRewardItemAction>.add
	|-CStateManager<QuestRewardOrderGradeAction>.add
	|-CStateManager<QuestRewardTokenAction>.add
	|-CStateManager<ServantRewardAction>.add
	|-CStateManager<SpotLargeComponent>.add
	|-CStateManager<SrcSpotBasePrefab>.add
	|-CStateManager<StandFigureSlideComponent>.add
	|-CStateManager<object>.add
	|-CStateManager<TerminalSceneComponent>.add
	|-CStateManager<TitleInfoWarBoardTitleComponent>.add
	|-CStateManager<srcLineSprite>.add
	*/

	// RVA: -1 Offset: -1
	public void update() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265960 Offset: 0x2265960 VA: 0x2265960
	|-CStateManager<CylinderCore>.update
	|-CStateManager<EarthCore>.update
	|-CStateManager<EventPointVsResultAction>.update
	|-CStateManager<EventRaceResultEffect>.update
	|-CStateManager<MapGimmickComponent>.update
	|-CStateManager<MissionNotifyComponent>.update
	|-CStateManager<MyRoomControl>.update
	|-CStateManager<MyRoomStateMaterial>.update
	|-CStateManager<QuestAfterAction>.update
	|-CStateManager<QuestBoardListEffectComponent>.update
	|-CStateManager<QuestBoardListViewEarthLine>.update
	|-CStateManager<QuestPhaseRewardComponent>.update
	|-CStateManager<QuestRewardBoxAction>.update
	|-CStateManager<QuestRewardCostumeAction>.update
	|-CStateManager<QuestRewardHarvestAction>.update
	|-CStateManager<QuestRewardItemAction>.update
	|-CStateManager<QuestRewardOrderGradeAction>.update
	|-CStateManager<QuestRewardTokenAction>.update
	|-CStateManager<ServantRewardAction>.update
	|-CStateManager<SpotLargeComponent>.update
	|-CStateManager<SrcSpotBasePrefab>.update
	|-CStateManager<StandFigureSlideComponent>.update
	|-CStateManager<object>.update
	|-CStateManager<TerminalSceneComponent>.update
	|-CStateManager<TitleInfoWarBoardTitleComponent>.update
	|-CStateManager<srcLineSprite>.update
	*/

	// RVA: -1 Offset: -1
	public void setState(int idx) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x22659A0 Offset: 0x22659A0 VA: 0x22659A0
	|-CStateManager<CylinderCore>.setState
	|-CStateManager<EarthCore>.setState
	|-CStateManager<EventPointVsResultAction>.setState
	|-CStateManager<EventRaceResultEffect>.setState
	|-CStateManager<MapGimmickComponent>.setState
	|-CStateManager<MissionNotifyComponent>.setState
	|-CStateManager<MyRoomControl>.setState
	|-CStateManager<MyRoomStateMaterial>.setState
	|-CStateManager<QuestAfterAction>.setState
	|-CStateManager<QuestBoardListEffectComponent>.setState
	|-CStateManager<QuestBoardListViewEarthLine>.setState
	|-CStateManager<QuestPhaseRewardComponent>.setState
	|-CStateManager<QuestRewardBoxAction>.setState
	|-CStateManager<QuestRewardCostumeAction>.setState
	|-CStateManager<QuestRewardHarvestAction>.setState
	|-CStateManager<QuestRewardItemAction>.setState
	|-CStateManager<QuestRewardOrderGradeAction>.setState
	|-CStateManager<QuestRewardTokenAction>.setState
	|-CStateManager<ServantRewardAction>.setState
	|-CStateManager<SpotLargeComponent>.setState
	|-CStateManager<SrcSpotBasePrefab>.setState
	|-CStateManager<StandFigureSlideComponent>.setState
	|-CStateManager<object>.setState
	|-CStateManager<TerminalSceneComponent>.setState
	|-CStateManager<TitleInfoWarBoardTitleComponent>.setState
	|-CStateManager<srcLineSprite>.setState
	*/

	// RVA: -1 Offset: -1
	public int getState() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265A2C Offset: 0x2265A2C VA: 0x2265A2C
	|-CStateManager<CylinderCore>.getState
	|-CStateManager<EarthCore>.getState
	|-CStateManager<EventPointVsResultAction>.getState
	|-CStateManager<EventRaceResultEffect>.getState
	|-CStateManager<MapGimmickComponent>.getState
	|-CStateManager<MissionNotifyComponent>.getState
	|-CStateManager<MyRoomControl>.getState
	|-CStateManager<MyRoomStateMaterial>.getState
	|-CStateManager<QuestAfterAction>.getState
	|-CStateManager<QuestBoardListEffectComponent>.getState
	|-CStateManager<QuestBoardListViewEarthLine>.getState
	|-CStateManager<QuestPhaseRewardComponent>.getState
	|-CStateManager<QuestRewardBoxAction>.getState
	|-CStateManager<QuestRewardCostumeAction>.getState
	|-CStateManager<QuestRewardHarvestAction>.getState
	|-CStateManager<QuestRewardItemAction>.getState
	|-CStateManager<QuestRewardOrderGradeAction>.getState
	|-CStateManager<QuestRewardTokenAction>.getState
	|-CStateManager<ServantRewardAction>.getState
	|-CStateManager<SpotLargeComponent>.getState
	|-CStateManager<SrcSpotBasePrefab>.getState
	|-CStateManager<StandFigureSlideComponent>.getState
	|-CStateManager<object>.getState
	|-CStateManager<TerminalSceneComponent>.getState
	|-CStateManager<TitleInfoWarBoardTitleComponent>.getState
	|-CStateManager<srcLineSprite>.getState
	*/

	// RVA: -1 Offset: -1
	public void destroy() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265A34 Offset: 0x2265A34 VA: 0x2265A34
	|-CStateManager<object>.destroy
	*/
}

// Namespace: 
public class ColorChange : MonoBehaviour // TypeDefIndex: 11031
{
	// Fields
	private bool mIsChangeColor; // 0x18
	private Color mFromColor; // 0x1C
	private Color mToColor; // 0x2C
	private Color mNowColor; // 0x3C
	private float mStartTime; // 0x4C
	private float mTime; // 0x50
	private ColorChange.CHANGE_STYLE mStyle; // 0x54
	private int mCount; // 0x58
	private int mNowCount; // 0x5C
	private float mDelay; // 0x60
	private Action mProcessAct; // 0x68
	private Action mEndAct; // 0x70
	private bool mPause; // 0x78
	private float mPauseStartTime; // 0x7C
	private Easing.TYPE mEasingType; // 0x80
	private bool mIsSkip; // 0x84

	// Methods

	// RVA: 0x1309F58 Offset: 0x1309F58 VA: 0x1309F58
	public void .ctor() { }

	// RVA: 0x1309F60 Offset: 0x1309F60 VA: 0x1309F60
	private void Awake() { }

	// RVA: 0x1309F6C Offset: 0x1309F6C VA: 0x1309F6C
	private void Update() { }

	// RVA: 0x130A200 Offset: 0x130A200 VA: 0x130A200
	public void Play(Color from, Color to, float sec, ColorChange.CHANGE_STYLE style = 0, int count = 1, Action procAct, Action endAct, float delay = 0, Easing.TYPE easingType = 0) { }

	// RVA: 0x130A2BC Offset: 0x130A2BC VA: 0x130A2BC
	public Color GetColor() { }

	// RVA: 0x130A2C8 Offset: 0x130A2C8 VA: 0x130A2C8
	public void SetColor(Color color) { }

	// RVA: 0x130A2D4 Offset: 0x130A2D4 VA: 0x130A2D4
	public void Pause() { }

	// RVA: 0x130A30C Offset: 0x130A30C VA: 0x130A30C
	public void Resume() { }

	// RVA: 0x130A350 Offset: 0x130A350 VA: 0x130A350
	public void SetPause(bool isPause) { }

	// RVA: 0x130A3B4 Offset: 0x130A3B4 VA: 0x130A3B4
	public void Stop() { }

	// RVA: 0x130A3BC Offset: 0x130A3BC VA: 0x130A3BC
	public void Skip() { }

	// RVA: 0x130A124 Offset: 0x130A124 VA: 0x130A124
	private Color PingPong(Color from, Color to, float time, Easing.TYPE easingType = 0) { }
}

// Namespace: 
public enum ColorChange.CHANGE_STYLE // TypeDefIndex: 11032
{
	// Fields
	public int value__; // 0x0
	public const ColorChange.CHANGE_STYLE ONE = 0;
	public const ColorChange.CHANGE_STYLE PINGPONG = 1;
}

// Namespace: 
public static class CTouch // TypeDefIndex: 11033
{
	// Fields
	public const int TOUCH_MAX = 1;
	public static float FLICK_LEN; // 0x0
	public static float DRAG_LEN; // 0x4
	private static Touch[] mTouch; // 0x8
	private static bool mIsTchNow; // 0x10
	private static bool mIsTchMouseNow; // 0x11
	private static CTouch.TCH_STATE mState; // 0x14
	private static Vector2 mPosNow; // 0x18
	private static Vector2 mPosPush; // 0x20
	private static Vector2 mScrPosNow; // 0x28
	private static Vector2 mScrPosPush; // 0x30
	private static Vector2 mScrPosOld; // 0x38
	private static Vector2 mScrPosDelta; // 0x40
	private static Vector2 mScrPosDeltaOld; // 0x48
	private static float mScrPosDeltaLen; // 0x50
	private static float mScrPosDeltaLenOld; // 0x54
	private static int mDragFrameCnt; // 0x58
	private static float mDragLen; // 0x5C
	private static Camera mScreenCam; // 0x60
	private static bool mIsClassEnabled; // 0x68
	private static bool mIsReq_MultiTouchEnabled; // 0x69
	[CompilerGeneratedAttribute] // RVA: 0xC7C258 Offset: 0xC7C258 VA: 0xC7C258
	[DebuggerBrowsableAttribute] // RVA: 0xC7C258 Offset: 0xC7C258 VA: 0xC7C258
	private static CTouch.TouchEventHandler mOnTouchReleaseEvent; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC7C294 Offset: 0xC7C294 VA: 0xC7C294
	[DebuggerBrowsableAttribute] // RVA: 0xC7C294 Offset: 0xC7C294 VA: 0xC7C294
	private static CTouch.TouchEventHandler mOnTouchPressEvent; // 0x78
	private static List<int> ignoreFingerIDList; // 0x80
	private static bool mIsInitDone; // 0x88
	private static int mProcessOldFrameCount; // 0x8C

	// Methods

	// RVA: 0x14E0544 Offset: 0x14E0544 VA: 0x14E0544
	public static void SetClassEnabled(bool isEnabled) { }

	// RVA: 0x14E05B4 Offset: 0x14E05B4 VA: 0x14E05B4
	public static void SetMultiTouchEnabled(bool is_enabled) { }

	// RVA: 0x14E0624 Offset: 0x14E0624 VA: 0x14E0624
	private static void add_mOnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E0764 Offset: 0x14E0764 VA: 0x14E0764
	private static void remove_mOnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E08A4 Offset: 0x14E08A4 VA: 0x14E08A4
	public static void add_OnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E0908 Offset: 0x14E0908 VA: 0x14E0908
	public static void remove_OnTouchReleaseEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E096C Offset: 0x14E096C VA: 0x14E096C
	private static void add_mOnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E0AAC Offset: 0x14E0AAC VA: 0x14E0AAC
	private static void remove_mOnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E0BEC Offset: 0x14E0BEC VA: 0x14E0BEC
	public static void add_OnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E0C50 Offset: 0x14E0C50 VA: 0x14E0C50
	public static void remove_OnTouchPressEvent(CTouch.TouchEventHandler value) { }

	// RVA: 0x14E0CB4 Offset: 0x14E0CB4 VA: 0x14E0CB4
	public static void reboot() { }

	// RVA: 0x14E0D1C Offset: 0x14E0D1C VA: 0x14E0D1C
	public static void init() { }

	// RVA: 0x14E0DBC Offset: 0x14E0DBC VA: 0x14E0DBC
	public static void setParam(float flick_len, float drag_len, Camera screen_cam) { }

	// RVA: 0x14E0E7C Offset: 0x14E0E7C VA: 0x14E0E7C
	public static void setScreenCamera(Camera cam) { }

	// RVA: 0x14E0EE8 Offset: 0x14E0EE8 VA: 0x14E0EE8
	public static void process() { }

	// RVA: 0x14E1950 Offset: 0x14E1950 VA: 0x14E1950
	public static CTouch.TCH_STATE getTouchState() { }

	// RVA: 0x14E19B8 Offset: 0x14E19B8 VA: 0x14E19B8
	public static bool isTouchNone() { }

	// RVA: 0x14E1A28 Offset: 0x14E1A28 VA: 0x14E1A28
	public static bool isTouchPush() { }

	// RVA: 0x14E1A98 Offset: 0x14E1A98 VA: 0x14E1A98
	public static bool isTouchKeep() { }

	// RVA: 0x14E1B08 Offset: 0x14E1B08 VA: 0x14E1B08
	public static bool isTouchRelease() { }

	// RVA: 0x14E1B78 Offset: 0x14E1B78 VA: 0x14E1B78
	public static bool isFlick() { }

	// RVA: 0x14E1BE0 Offset: 0x14E1BE0 VA: 0x14E1BE0
	public static bool isFlick(float flickLen) { }

	// RVA: 0x14E1CE8 Offset: 0x14E1CE8 VA: 0x14E1CE8
	public static int getFlickDirX() { }

	// RVA: 0x14E1EB8 Offset: 0x14E1EB8 VA: 0x14E1EB8
	public static int getFlickDirY() { }

	// RVA: 0x14E2020 Offset: 0x14E2020 VA: 0x14E2020
	public static bool isDragMode() { }

	// RVA: 0x14E2090 Offset: 0x14E2090 VA: 0x14E2090
	public static bool isDrag() { }

	// RVA: 0x14E2120 Offset: 0x14E2120 VA: 0x14E2120
	public static int getDragFrameCnt() { }

	// RVA: 0x14E2188 Offset: 0x14E2188 VA: 0x14E2188
	public static Vector2 getPosNow() { }

	// RVA: 0x14E21F0 Offset: 0x14E21F0 VA: 0x14E21F0
	public static Vector2 GetTouchPos() { }

	// RVA: 0x14E25FC Offset: 0x14E25FC VA: 0x14E25FC
	public static Vector2 getScreenPosition() { }

	// RVA: 0x14E2664 Offset: 0x14E2664 VA: 0x14E2664
	public static Vector2 getScreenPosition(Vector2 tch_pos) { }

	// RVA: 0x14E2914 Offset: 0x14E2914 VA: 0x14E2914
	public static Vector2 getScreenPosition(Camera cam) { }

	// RVA: 0x14E26E4 Offset: 0x14E26E4 VA: 0x14E26E4
	public static Vector2 getScreenPosition(Vector2 tch_pos, Camera cam) { }

	// RVA: 0x14E1E50 Offset: 0x14E1E50 VA: 0x14E1E50
	public static Vector2 getScrPosDelta() { }

	// RVA: 0x14E2980 Offset: 0x14E2980 VA: 0x14E2980
	public static Vector2 getScrPosDeltaOld() { }

	// RVA: 0x14E1C80 Offset: 0x14E1C80 VA: 0x14E1C80
	public static float getScrPosDeltaLen() { }

	// RVA: 0x14E29E8 Offset: 0x14E29E8 VA: 0x14E29E8
	public static float getScrPosDeltaLenOld() { }

	// RVA: 0x14E108C Offset: 0x14E108C VA: 0x14E108C
	private static void processSingleTouch() { }

	// RVA: 0x14E2358 Offset: 0x14E2358 VA: 0x14E2358
	public static int GetValidTouchCount() { }

	// RVA: 0x14E2C50 Offset: 0x14E2C50 VA: 0x14E2C50
	public static List<int> GetIgnoreFingerIDList() { }

	// RVA: 0x14E23F4 Offset: 0x14E23F4 VA: 0x14E23F4
	public static int GetValidTouchLastID(bool isReverse = True) { }

	// RVA: 0x14E2CB8 Offset: 0x14E2CB8 VA: 0x14E2CB8
	private static void .cctor() { }
}

// Namespace: 
public enum CTouch.TCH_STATE // TypeDefIndex: 11034
{
	// Fields
	public int value__; // 0x0
	public const CTouch.TCH_STATE NONE = 0;
	public const CTouch.TCH_STATE PUSH = 1;
	public const CTouch.TCH_STATE KEEP = 2;
	public const CTouch.TCH_STATE RELEASE = 3;
}

// Namespace: 
public sealed class CTouch.TouchEventHandler : MulticastDelegate // TypeDefIndex: 11035
{
	// Methods

	// RVA: 0x14E2D98 Offset: 0x14E2D98 VA: 0x14E2D98
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x14E2A50 Offset: 0x14E2A50 VA: 0x14E2A50 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x14E2DA8 Offset: 0x14E2DA8 VA: 0x14E2DA8 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x14E2DDC Offset: 0x14E2DDC VA: 0x14E2DDC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public static class Easing // TypeDefIndex: 11036
{
	// Methods

	// RVA: 0x16F2548 Offset: 0x16F2548 VA: 0x16F2548
	public static Vector3 Func(Vector3 from, Vector3 to, float t, Easing.TYPE type = 0) { }

	// RVA: 0x16F2F78 Offset: 0x16F2F78 VA: 0x16F2F78
	public static Color Func(Color from, Color to, float t, Easing.TYPE type = 0) { }

	// RVA: 0x16F3770 Offset: 0x16F3770 VA: 0x16F3770
	public static float Func(float from, float to, float t, Easing.TYPE type = 0) { }
}

// Namespace: 
public enum Easing.TYPE // TypeDefIndex: 11037
{
	// Fields
	public int value__; // 0x0
	public const Easing.TYPE LINER = 0;
	public const Easing.TYPE QUADRATIC_IN = 1;
	public const Easing.TYPE QUADRATIC_OUT = 2;
	public const Easing.TYPE QUADRATIC_IN_OUT = 3;
	public const Easing.TYPE CUBIC_IN = 4;
	public const Easing.TYPE CUBIC_OUT = 5;
	public const Easing.TYPE CUBIC_IN_OUT = 6;
	public const Easing.TYPE QUARTIC_IN = 7;
	public const Easing.TYPE QUARTIC_OUT = 8;
	public const Easing.TYPE QUARTIC_IN_OUT = 9;
	public const Easing.TYPE QUINTIC_IN = 10;
	public const Easing.TYPE QUINTIC_OUT = 11;
	public const Easing.TYPE QUINTIC_IN_OUT = 12;
	public const Easing.TYPE SINUSOIDAL_IN = 13;
	public const Easing.TYPE SINUSOIDAL_OUT = 14;
	public const Easing.TYPE SINUSOIDAL_IN_OUT = 15;
	public const Easing.TYPE EXPONENTIAL_IN = 16;
	public const Easing.TYPE EXPONENTIAL_OUT = 17;
	public const Easing.TYPE EXPONENTIAL_IN_OUT = 18;
	public const Easing.TYPE CIRCULAR_IN = 19;
	public const Easing.TYPE CIRCULAR_OUT = 20;
	public const Easing.TYPE CIRCULAR_IN_OUT = 21;
}

// Namespace: 
public class EasingObject : MonoBehaviour // TypeDefIndex: 11038
{
	// Fields
	private bool mIsMoving; // 0x18
	private float mFrom; // 0x1C
	private float mTo; // 0x20
	private float mNow; // 0x24
	private float mStartTime; // 0x28
	private float mTime; // 0x2C
	private float mDelay; // 0x30
	private Action mProcessAct; // 0x38
	private Action mEndAct; // 0x40
	private bool mIsPause; // 0x48
	private float mPauseStartTime; // 0x4C
	private Easing.TYPE mEasingType; // 0x50
	private bool mIsSkip; // 0x54

	// Properties
	public bool IsMoving { get; }
	public bool IsPause { get; }

	// Methods

	// RVA: 0x16F3CA4 Offset: 0x16F3CA4 VA: 0x16F3CA4
	public void .ctor() { }

	// RVA: 0x16F3CAC Offset: 0x16F3CAC VA: 0x16F3CAC
	public bool get_IsMoving() { }

	// RVA: 0x16F3CB4 Offset: 0x16F3CB4 VA: 0x16F3CB4
	public bool get_IsPause() { }

	// RVA: 0x16F3CBC Offset: 0x16F3CBC VA: 0x16F3CBC
	private void Awake() { }

	// RVA: 0x16F3CC8 Offset: 0x16F3CC8 VA: 0x16F3CC8
	private void Update() { }

	// RVA: 0x16F0C74 Offset: 0x16F0C74 VA: 0x16F0C74
	public void Play(float sec, Action procAct, Action endAct, float delay = 0, Easing.TYPE easingType = 0) { }

	// RVA: 0x16F1A40 Offset: 0x16F1A40 VA: 0x16F1A40
	public void Play(float from, float to, float sec, Action procAct, Action endAct, float delay = 0, Easing.TYPE easingType = 0) { }

	// RVA: 0x16F1128 Offset: 0x16F1128 VA: 0x16F1128
	public float Now() { }

	// RVA: 0x16F3DF4 Offset: 0x16F3DF4 VA: 0x16F3DF4
	public void Pause() { }

	// RVA: 0x16F3E2C Offset: 0x16F3E2C VA: 0x16F3E2C
	public void Resume() { }

	// RVA: 0x16F3E70 Offset: 0x16F3E70 VA: 0x16F3E70
	public void Stop() { }

	// RVA: 0x16F3E78 Offset: 0x16F3E78 VA: 0x16F3E78
	public void SetPause(bool isPause) { }

	// RVA: 0x16F3EDC Offset: 0x16F3EDC VA: 0x16F3EDC
	public void Skip() { }
}

// Namespace: 
public static class ExtraEasing // TypeDefIndex: 11039
{
	// Methods

	// RVA: 0x10B3B84 Offset: 0x10B3B84 VA: 0x10B3B84
	public static Func<Vector3, Vector3, float, Vector3> AsymptoticSeriesVector3(float asymptoticSpeed, float powerRate) { }

	// RVA: 0x10B3D34 Offset: 0x10B3D34 VA: 0x10B3D34
	public static Func<float, float, float, float> AsymptoticSeriesFloat(float asymptoticSpeed, float powerRate) { }

	// RVA: 0x10B3C88 Offset: 0x10B3C88 VA: 0x10B3C88
	private static void ValidateAsymptoticParams(ref float asymptoticSpeed, ref float powerRate) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45994 Offset: 0xC45994 VA: 0xC45994
private sealed class ExtraEasing.<AsymptoticSeriesVector3>c__AnonStorey0 // TypeDefIndex: 11040
{
	// Fields
	internal float asymptoticSpeed; // 0x10
	internal float powerRate; // 0x14

	// Methods

	// RVA: 0x10B3C80 Offset: 0x10B3C80 VA: 0x10B3C80
	public void .ctor() { }

	// RVA: 0x10B3EDC Offset: 0x10B3EDC VA: 0x10B3EDC
	internal Vector3 <>m__0(Vector3 from, Vector3 to, float t) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC459A4 Offset: 0xC459A4 VA: 0xC459A4
private sealed class ExtraEasing.<AsymptoticSeriesFloat>c__AnonStorey1 // TypeDefIndex: 11041
{
	// Fields
	internal float asymptoticSpeed; // 0x10
	internal float powerRate; // 0x14

	// Methods

	// RVA: 0x10B3E30 Offset: 0x10B3E30 VA: 0x10B3E30
	public void .ctor() { }

	// RVA: 0x10B3E38 Offset: 0x10B3E38 VA: 0x10B3E38
	internal float <>m__0(float from, float to, float t) { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC2AA80 Offset: 0xC2AA80 VA: 0xC2AA80
public static class GameObjectExtensions // TypeDefIndex: 11042
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC7C2D0 Offset: 0xC7C2D0 VA: 0xC7C2D0
	private static Func<Transform, GameObject> <>f__am$cache0; // 0x0

	// Methods

	[ExtensionAttribute] // RVA: 0xCD3068 Offset: 0xCD3068 VA: 0xCD3068
	// RVA: -1 Offset: -1
	public static T SafeGetComponent<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1F8A4 Offset: 0x1C1F8A4 VA: 0x1C1F8A4
	|-GameObjectExtensions.SafeGetComponent<EasingObject>
	|-GameObjectExtensions.SafeGetComponent<EventPointGaugeChangeEffectAction>
	|-GameObjectExtensions.SafeGetComponent<EventPointGaugeEffectAction>
	|-GameObjectExtensions.SafeGetComponent<ItemIconComponent>
	|-GameObjectExtensions.SafeGetComponent<MapButtonPrefab>
	|-GameObjectExtensions.SafeGetComponent<MoveObject>
	|-GameObjectExtensions.SafeGetComponent<QuestRewardBoxAction>
	|-GameObjectExtensions.SafeGetComponent<QuestRewardCostumeAction>
	|-GameObjectExtensions.SafeGetComponent<QuestRewardHarvestAction>
	|-GameObjectExtensions.SafeGetComponent<QuestRewardItemAction>
	|-GameObjectExtensions.SafeGetComponent<QuestRewardOrderGradeAction>
	|-GameObjectExtensions.SafeGetComponent<QuestRewardTokenAction>
	|-GameObjectExtensions.SafeGetComponent<SceneRootComponent>
	|-GameObjectExtensions.SafeGetComponent<ServantRewardAction>
	|-GameObjectExtensions.SafeGetComponent<SlideFadeObject>
	|-GameObjectExtensions.SafeGetComponent<SubmarineScanVoiceComponent>
	|-GameObjectExtensions.SafeGetComponent<SubmarineScannerComponent>
	|-GameObjectExtensions.SafeGetComponent<object>
	|-GameObjectExtensions.SafeGetComponent<TweenAlpha>
	|-GameObjectExtensions.SafeGetComponent<UIButton>
	|-GameObjectExtensions.SafeGetComponent<UIScaleSame>
	|-GameObjectExtensions.SafeGetComponent<UISprite>
	|-GameObjectExtensions.SafeGetComponent<BoxCollider>
	*/

	[ExtensionAttribute] // RVA: 0xCD3078 Offset: 0xCD3078 VA: 0xCD3078
	// RVA: 0x1933480 Offset: 0x1933480 VA: 0x1933480
	public static GameObject[] GetChildren(GameObject self, bool includeInactive = False) { }

	[ExtensionAttribute] // RVA: 0xCD3088 Offset: 0xCD3088 VA: 0xCD3088
	// RVA: -1 Offset: -1
	public static T[] GetComponentsInChildrenWithoutSelf<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F7AC Offset: 0x2B1F7AC VA: 0x2B1F7AC
	|-GameObjectExtensions.GetComponentsInChildrenWithoutSelf<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD3098 Offset: 0xCD3098 VA: 0xCD3098
	// RVA: -1 Offset: -1
	public static T[] GetComponentsInChildrenWithoutSelfWithLog<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F8B8 Offset: 0x2B1F8B8 VA: 0x2B1F8B8
	|-GameObjectExtensions.GetComponentsInChildrenWithoutSelfWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD30A8 Offset: 0xCD30A8 VA: 0xCD30A8
	// RVA: -1 Offset: -1
	public static T GetComponentWithLog<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1F86C Offset: 0x1C1F86C VA: 0x1C1F86C
	|-GameObjectExtensions.GetComponentWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD30B8 Offset: 0xCD30B8 VA: 0xCD30B8
	// RVA: -1 Offset: -1
	public static T[] GetComponentsWithLog<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F8C8 Offset: 0x2B1F8C8 VA: 0x2B1F8C8
	|-GameObjectExtensions.GetComponentsWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD30C8 Offset: 0xCD30C8 VA: 0xCD30C8
	// RVA: -1 Offset: -1
	public static T GetComponentInChildrenWithLog<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1F834 Offset: 0x1C1F834 VA: 0x1C1F834
	|-GameObjectExtensions.GetComponentInChildrenWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD30D8 Offset: 0xCD30D8 VA: 0xCD30D8
	// RVA: -1 Offset: -1
	public static T[] GetComponentsInChildrenWithLog<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F72C Offset: 0x2B1F72C VA: 0x2B1F72C
	|-GameObjectExtensions.GetComponentsInChildrenWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD30E8 Offset: 0xCD30E8 VA: 0xCD30E8
	// RVA: -1 Offset: -1
	public static T[] GetComponentsInChildrenWithLog<T>(GameObject self, bool includeInactive) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F764 Offset: 0x2B1F764 VA: 0x2B1F764
	|-GameObjectExtensions.GetComponentsInChildrenWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD30F8 Offset: 0xCD30F8 VA: 0xCD30F8
	// RVA: -1 Offset: -1
	public static void RemoveComponent<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C60BB8 Offset: 0x1C60BB8 VA: 0x1C60BB8
	|-GameObjectExtensions.RemoveComponent<object>
	|-GameObjectExtensions.RemoveComponent<UIRoot>
	|-GameObjectExtensions.RemoveComponent<UIRootReScale>
	|-GameObjectExtensions.RemoveComponent<Collider>
	*/

	[ExtensionAttribute] // RVA: 0xCD3108 Offset: 0xCD3108 VA: 0xCD3108
	// RVA: -1 Offset: -1
	public static void RemoveComponents<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C60C54 Offset: 0x1C60C54 VA: 0x1C60C54
	|-GameObjectExtensions.RemoveComponents<EventMapManagerBase>
	|-GameObjectExtensions.RemoveComponents<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD3118 Offset: 0xCD3118 VA: 0xCD3118
	// RVA: -1 Offset: -1
	public static bool HasComponent<T>(GameObject self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x255B980 Offset: 0x255B980 VA: 0x255B980
	|-GameObjectExtensions.HasComponent<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD3128 Offset: 0xCD3128 VA: 0xCD3128
	// RVA: 0x1933614 Offset: 0x1933614 VA: 0x1933614
	public static Transform Find(GameObject self, string name) { }

	[ExtensionAttribute] // RVA: 0xCD3138 Offset: 0xCD3138 VA: 0xCD3138
	// RVA: 0x1933660 Offset: 0x1933660 VA: 0x1933660
	public static Transform FindWithLog(GameObject self, string name) { }

	[ExtensionAttribute] // RVA: 0xCD3148 Offset: 0xCD3148 VA: 0xCD3148
	// RVA: 0x19336AC Offset: 0x19336AC VA: 0x19336AC
	public static GameObject FindGameObject(GameObject self, string name) { }

	[ExtensionAttribute] // RVA: 0xCD3158 Offset: 0xCD3158 VA: 0xCD3158
	// RVA: 0x1933710 Offset: 0x1933710 VA: 0x1933710
	public static GameObject FindGameObjectWithLog(GameObject self, string name) { }

	[ExtensionAttribute] // RVA: 0xCD3168 Offset: 0xCD3168 VA: 0xCD3168
	// RVA: -1 Offset: -1
	public static T FindComponentWithLog<T>(GameObject self, string name) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1F760 Offset: 0x1C1F760 VA: 0x1C1F760
	|-GameObjectExtensions.FindComponentWithLog<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD3178 Offset: 0xCD3178 VA: 0xCD3178
	// RVA: -1 Offset: -1
	public static T FindComponent<T>(GameObject self, string name) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1F670 Offset: 0x1C1F670 VA: 0x1C1F670
	|-GameObjectExtensions.FindComponent<ServantStatusListViewItemDrawButton>
	|-GameObjectExtensions.FindComponent<object>
	*/

	[ExtensionAttribute] // RVA: 0xCD3188 Offset: 0xCD3188 VA: 0xCD3188
	// RVA: 0x19337F4 Offset: 0x19337F4 VA: 0x19337F4
	public static GameObject FindDeep(GameObject self, string name, bool includeInactive = False) { }

