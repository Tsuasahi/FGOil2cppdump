	/* GenericInstMethod :
	|
	|-RVA: 0x24DD984 Offset: 0x24DD984 VA: 0x24DD984
	|-SingletonTemplate<object>.Delete
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x24DDB6C Offset: 0x24DDB6C VA: 0x24DDB6C
	|-SingletonTemplate<object>..cctor
	*/
}

// Namespace: 
public class SlideFadeObject : CachableMonoBehaviour // TypeDefIndex: 11016
{
	// Fields
	private MoveObject mMoveObject; // 0x30
	private Vector3 mInitPos; // 0x38
	private Vector3 mLeftPos; // 0x44
	private Vector3 mRightPos; // 0x50
	private SlideFadeObject.SLIDE_STATE mSlideState; // 0x5C
	private UIPanel mPanel; // 0x60

	// Properties
	public Vector3 InitPosition { get; }

	// Methods

	// RVA: 0x1CEA528 Offset: 0x1CEA528 VA: 0x1CEA528
	public void .ctor() { }

	// RVA: 0x1CEA530 Offset: 0x1CEA530 VA: 0x1CEA530
	public Vector3 get_InitPosition() { }

	// RVA: 0x1CEA53C Offset: 0x1CEA53C VA: 0x1CEA53C
	private void Awake() { }

	// RVA: 0x1CEA638 Offset: 0x1CEA638 VA: 0x1CEA638
	public void Refresh() { }

	// RVA: 0x1CEA720 Offset: 0x1CEA720 VA: 0x1CEA720
	public void Skip() { }

	// RVA: 0x1CEA750 Offset: 0x1CEA750 VA: 0x1CEA750
	public SlideFadeObject.SLIDE_STATE GetSlideState() { }

	// RVA: 0x1CEA758 Offset: 0x1CEA758 VA: 0x1CEA758
	public void SlideIn(SlideFadeObject.STYLE style, float time, float delay = 0, Action endAct) { }

	// RVA: 0x1CEA928 Offset: 0x1CEA928 VA: 0x1CEA928
	public void SlideIn(float out_pos_ofs_x, float time, float delay = 0, Action endAct) { }

	// RVA: 0x1CEA7A4 Offset: 0x1CEA7A4 VA: 0x1CEA7A4
	public void SlideIn(Vector3 startPos, float time, float delay = 0, Action endAct) { }

	// RVA: 0x1CEA950 Offset: 0x1CEA950 VA: 0x1CEA950
	public void SlideOut(SlideFadeObject.STYLE style, float time, float delay = 0, Action endAct) { }

	// RVA: 0x1CEAB00 Offset: 0x1CEAB00 VA: 0x1CEAB00
	public void SlideOut(float out_pos_ofs_x, float time, float delay = 0, Action endAct) { }

	// RVA: 0x1CEA99C Offset: 0x1CEA99C VA: 0x1CEA99C
	public void SlideOut(Vector3 endPos, float time, float delay = 0, Action endAct) { }

	// RVA: 0x1CEAB28 Offset: 0x1CEAB28 VA: 0x1CEAB28
	public void ResetPosition() { }

	// RVA: 0x1CEAB68 Offset: 0x1CEAB68 VA: 0x1CEAB68
	public void SetPosition(Vector3 pos) { }
}

// Namespace: 
public enum SlideFadeObject.STYLE // TypeDefIndex: 11017
{
	// Fields
	public int value__; // 0x0
	public const SlideFadeObject.STYLE LEFT = 0;
	public const SlideFadeObject.STYLE RIGHT = 1;
}

// Namespace: 
public enum SlideFadeObject.SLIDE_STATE // TypeDefIndex: 11018
{
	// Fields
	public int value__; // 0x0
	public const SlideFadeObject.SLIDE_STATE NONE = 0;
	public const SlideFadeObject.SLIDE_STATE IN_COMPLETE = 1;
	public const SlideFadeObject.SLIDE_STATE OUT_COMPLETE = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A60 Offset: 0xCB1A60 VA: 0xCB1A60
private sealed class SlideFadeObject.<SlideIn>c__AnonStorey0 // TypeDefIndex: 11019
{
	// Fields
	internal Action endAct; // 0x10
	internal SlideFadeObject $this; // 0x18

	// Methods

	// RVA: 0x1CEA948 Offset: 0x1CEA948 VA: 0x1CEA948
	public void .ctor() { }

	// RVA: 0x1CEABAC Offset: 0x1CEABAC VA: 0x1CEABAC
	internal void <>m__0() { }

	// RVA: 0x1CEACD4 Offset: 0x1CEACD4 VA: 0x1CEACD4
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A70 Offset: 0xCB1A70 VA: 0xCB1A70
private sealed class SlideFadeObject.<SlideOut>c__AnonStorey1 // TypeDefIndex: 11020
{
	// Fields
	internal Action endAct; // 0x10
	internal SlideFadeObject $this; // 0x18

	// Methods

	// RVA: 0x1CEAB20 Offset: 0x1CEAB20 VA: 0x1CEAB20
	public void .ctor() { }

	// RVA: 0x1CEADB0 Offset: 0x1CEADB0 VA: 0x1CEADB0
	internal void <>m__0() { }

	// RVA: 0x1CEAED8 Offset: 0x1CEAED8 VA: 0x1CEAED8
	internal void <>m__1() { }
}

// Namespace: 
public class StandFigureSlideComponent : MonoBehaviour // TypeDefIndex: 11021
{
	// Fields
	public const float POS_SPD_RATE = 0.35;
	public const float ALP_IN_SPD_RATE = 0.175;
	public const float ALP_OUT_SPD_RATE = 0.45;
	public const float BASE_POS_Y = 288;
	public static readonly float FRAME_IN_POS_X; // 0x0
	public static readonly float FRAME_OUT_POS_X; // 0x4
	protected CStateManager<StandFigureSlideComponent> mFSM; // 0x18
	protected UIStandFigureR mUIStandFigureR; // 0x20
	protected float mTgtPosX; // 0x28
	protected float mTgtAlp; // 0x2C
	protected float mNowAlp; // 0x30
	protected float mSpdRateAlp; // 0x34
	protected bool mIsFrameIn; // 0x38
	protected bool mIsLoading; // 0x39
	protected bool mIsEnable; // 0x3A
	[SerializeField] // RVA: 0xCE8A70 Offset: 0xCE8A70 VA: 0xCE8A70
	protected BoxCollider mBtnColl; // 0x40
	protected Action mBtnAct; // 0x48
	protected Action mSlideEndAct; // 0x50

	// Methods

	// RVA: 0x1D0342C Offset: 0x1D0342C VA: 0x1D0342C
	public void .ctor() { }

	// RVA: 0x1D03434 Offset: 0x1D03434 VA: 0x1D03434
	public bool IsMoving() { }

	// RVA: 0x1D034B0 Offset: 0x1D034B0 VA: 0x1D034B0
	public bool IsFrameIn() { }

	// RVA: 0x1D034B8 Offset: 0x1D034B8 VA: 0x1D034B8
	public bool IsLoding() { }

	// RVA: 0x1D034C0 Offset: 0x1D034C0 VA: 0x1D034C0
	public bool IsEnable() { }

	// RVA: 0x1D034C8 Offset: 0x1D034C8 VA: 0x1D034C8
	public void SetEnable(bool is_enable) { }

	// RVA: 0x1D03504 Offset: 0x1D03504 VA: 0x1D03504
	private void Awake() { }

	// RVA: 0x1D03700 Offset: 0x1D03700 VA: 0x1D03700
	private void Update() { }

	// RVA: 0x1D03760 Offset: 0x1D03760 VA: 0x1D03760
	private void OnDestroy() { }

	// RVA: 0x1D03764 Offset: 0x1D03764 VA: 0x1D03764
	private void Destroy() { }

	// RVA: 0x1D03848 Offset: 0x1D03848 VA: 0x1D03848
	public void Setup(UserServantEntity usd, int depth, Action end_act) { }

	// RVA: 0x1D03C58 Offset: 0x1D03C58 VA: 0x1D03C58
	public void SetBtnAct(Action btn_act) { }

	// RVA: 0x1D03C60 Offset: 0x1D03C60 VA: 0x1D03C60
	public void SlideIn(Action end_act) { }

	// RVA: 0x1D03B64 Offset: 0x1D03B64 VA: 0x1D03B64
	public void SlideOut(Action end_act, bool is_force = False) { }

	// RVA: 0x1D03D3C Offset: 0x1D03D3C VA: 0x1D03D3C
	public void ToggleSlide() { }

	// RVA: 0x1D03D58 Offset: 0x1D03D58 VA: 0x1D03D58
	public void OnClickBtn() { }

	// RVA: 0x1D03450 Offset: 0x1D03450 VA: 0x1D03450
	protected StandFigureSlideComponent.STATE GetState() { }

	// RVA: 0x1D03690 Offset: 0x1D03690 VA: 0x1D03690
	protected void SetState(StandFigureSlideComponent.STATE state) { }

	// RVA: 0x1D03D90 Offset: 0x1D03D90 VA: 0x1D03D90
	public void EndSlide() { }

	// RVA: 0x1D03E84 Offset: 0x1D03E84 VA: 0x1D03E84
	private static void .cctor() { }
}

// Namespace: 
public enum StandFigureSlideComponent.STATE // TypeDefIndex: 11022
{
	// Fields
	public int value__; // 0x0
	public const StandFigureSlideComponent.STATE NONE = 0;
	public const StandFigureSlideComponent.STATE READY = 1;
	public const StandFigureSlideComponent.STATE SLIDE = 2;
	public const StandFigureSlideComponent.STATE SIZEOF = 3;
}

// Namespace: 
protected class StandFigureSlideComponent.StateNone : IState<StandFigureSlideComponent> // TypeDefIndex: 11023
{
	// Methods

	// RVA: 0x1D03678 Offset: 0x1D03678 VA: 0x1D03678
	public void .ctor() { }

	// RVA: 0x1D03FF4 Offset: 0x1D03FF4 VA: 0x1D03FF4 Slot: 4
	public void begin(StandFigureSlideComponent that) { }

	// RVA: 0x1D03FF8 Offset: 0x1D03FF8 VA: 0x1D03FF8 Slot: 5
	public void update(StandFigureSlideComponent that) { }

	// RVA: 0x1D03FFC Offset: 0x1D03FFC VA: 0x1D03FFC Slot: 6
	public void end(StandFigureSlideComponent that) { }
}

// Namespace: 
protected class StandFigureSlideComponent.StateReady : IState<StandFigureSlideComponent> // TypeDefIndex: 11024
{
	// Methods

	// RVA: 0x1D03680 Offset: 0x1D03680 VA: 0x1D03680
	public void .ctor() { }

	// RVA: 0x1D04000 Offset: 0x1D04000 VA: 0x1D04000 Slot: 4
	public void begin(StandFigureSlideComponent that) { }

	// RVA: 0x1D04004 Offset: 0x1D04004 VA: 0x1D04004 Slot: 5
	public void update(StandFigureSlideComponent that) { }

	// RVA: 0x1D04008 Offset: 0x1D04008 VA: 0x1D04008 Slot: 6
	public void end(StandFigureSlideComponent that) { }
}

// Namespace: 
protected class StandFigureSlideComponent.StateSlide : IState<StandFigureSlideComponent> // TypeDefIndex: 11025
{
	// Fields
	public const float TGT_MOVE_END_DIF = 0.25;

	// Methods

	// RVA: 0x1D03688 Offset: 0x1D03688 VA: 0x1D03688
	public void .ctor() { }

	// RVA: 0x1D0400C Offset: 0x1D0400C VA: 0x1D0400C Slot: 4
	public void begin(StandFigureSlideComponent that) { }

	// RVA: 0x1D04010 Offset: 0x1D04010 VA: 0x1D04010 Slot: 5
	public void update(StandFigureSlideComponent that) { }

	// RVA: 0x1D04244 Offset: 0x1D04244 VA: 0x1D04244 Slot: 6
	public void end(StandFigureSlideComponent that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A80 Offset: 0xCB1A80 VA: 0xCB1A80
private sealed class StandFigureSlideComponent.<Setup>c__AnonStorey0 // TypeDefIndex: 11026
{
	// Fields
	internal Action end_act; // 0x10
	internal Action this_end_act; // 0x18
	internal StandFigureSlideComponent $this; // 0x20

	// Methods

	// RVA: 0x1D03B5C Offset: 0x1D03B5C VA: 0x1D03B5C
	public void .ctor() { }

	// RVA: 0x1D03F18 Offset: 0x1D03F18 VA: 0x1D03F18
	internal void <>m__0() { }

	// RVA: 0x1D03F70 Offset: 0x1D03F70 VA: 0x1D03F70
	internal void <>m__1() { }
}

// Namespace: 
internal class StepFunc // TypeDefIndex: 11027
{
	// Methods

	// RVA: 0x1D0536C Offset: 0x1D0536C VA: 0x1D0536C
	public void .ctor() { }

	// RVA: 0x1D05374 Offset: 0x1D05374 VA: 0x1D05374
	public static double Linear(double v) { }

	// RVA: 0x1D05378 Offset: 0x1D05378 VA: 0x1D05378
	public static double AccSin(double v) { }

	// RVA: 0x1D053A8 Offset: 0x1D053A8 VA: 0x1D053A8
	public static double DecSin(double v) { }

	// RVA: 0x1D053C0 Offset: 0x1D053C0 VA: 0x1D053C0
	public static double AccSig(double v) { }

	// RVA: 0x1D053EC Offset: 0x1D053EC VA: 0x1D053EC
	public static double DecSig(double v) { }

	// RVA: 0x1D05430 Offset: 0x1D05430 VA: 0x1D05430
	public static double Acc2(double v) { }

	// RVA: 0x1D05438 Offset: 0x1D05438 VA: 0x1D05438
	public static double Acc3(double v) { }

	// RVA: 0x1D05444 Offset: 0x1D05444 VA: 0x1D05444
	public static double Acc4(double v) { }

	// RVA: 0x1D05454 Offset: 0x1D05454 VA: 0x1D05454
	public static double Acc5(double v) { }

	// RVA: 0x1D05468 Offset: 0x1D05468 VA: 0x1D05468
	public static double Dec2(double v) { }

	// RVA: 0x1D0547C Offset: 0x1D0547C VA: 0x1D0547C
	public static double Dec3(double v) { }

	// RVA: 0x1D054A8 Offset: 0x1D054A8 VA: 0x1D054A8
	public static double Dec4(double v) { }

	// RVA: 0x1D054D4 Offset: 0x1D054D4 VA: 0x1D054D4
	public static double Dec5(double v) { }

	// RVA: 0x1D05500 Offset: 0x1D05500 VA: 0x1D05500
	public static double AccDec2(double v) { }

	// RVA: 0x1D0553C Offset: 0x1D0553C VA: 0x1D0553C
	public static double AccDec3(double v) { }

	// RVA: 0x1D05594 Offset: 0x1D05594 VA: 0x1D05594
	public static double AccDec4(double v) { }

	// RVA: 0x1D055EC Offset: 0x1D055EC VA: 0x1D055EC
	public static double AccDec5(double v) { }

	// RVA: 0x1D05644 Offset: 0x1D05644 VA: 0x1D05644
	public static double DecAcc2(double v) { }

	// RVA: 0x1D05684 Offset: 0x1D05684 VA: 0x1D05684
	public static double DecAcc3(double v) { }

	// RVA: 0x1D056E0 Offset: 0x1D056E0 VA: 0x1D056E0
	public static double DecAcc4(double v) { }

	// RVA: 0x1D0573C Offset: 0x1D0573C VA: 0x1D0573C
	public static double DecAcc5(double v) { }
}

// Namespace: 
public class UIScaleSame : MonoBehaviour // TypeDefIndex: 11028
{
	// Fields
	private Camera mCamera; // 0x18

	// Methods

	// RVA: 0x1D6BC18 Offset: 0x1D6BC18 VA: 0x1D6BC18
	public void .ctor() { }

	// RVA: 0x1D6BC20 Offset: 0x1D6BC20 VA: 0x1D6BC20
	public void SetCamera(Camera cam) { }

	// RVA: 0x1D6BC28 Offset: 0x1D6BC28 VA: 0x1D6BC28
	private void Update() { }
}

// Namespace: 
public class MapButtonControl : MonoBehaviour // TypeDefIndex: 11029
{
	// Fields
	public static readonly string MAP_BUTTON_SP_NAME; // 0x0
	public static readonly string MAP_CURRENT_BUTTON_SP_NAME; // 0x8
	private static readonly string DEFAULT_BUTTON_SP; // 0x10
	private static readonly float MAP_BUTTON_GRID_HEIGHT; // 0x18
	[SerializeField] // RVA: 0xCE8A80 Offset: 0xCE8A80 VA: 0xCE8A80
	private UIGrid GridComponentBottom; // 0x18
	[SerializeField] // RVA: 0xCE8A90 Offset: 0xCE8A90 VA: 0xCE8A90
	private UIGrid GridComponentTop; // 0x20
	private UIGrid gridComponent; // 0x28
	[SerializeField] // RVA: 0xCE8AA0 Offset: 0xCE8AA0 VA: 0xCE8AA0
	private UIAtlas commonUI; // 0x30
	[SerializeField] // RVA: 0xCE8AB0 Offset: 0xCE8AB0 VA: 0xCE8AB0
	private GameObject buttonPrefab; // 0x38
	private MapButtonPrefab[] buttons; // 0x40

	// Methods

	// RVA: 0x17F6728 Offset: 0x17F6728 VA: 0x17F6728
	public void .ctor() { }

	// RVA: 0x17F6730 Offset: 0x17F6730 VA: 0x17F6730
	public void CreateMapButtons(MapControl.WarInfo warInf, MapControl.MapInfo mapInf, List<UIAtlas> mapAtlases, ScrTerminalMap map) { }

	// RVA: 0x17F7380 Offset: 0x17F7380 VA: 0x17F7380
	public void UpdateBadge(MapControl.WarInfo warInf, MapControl.MapInfo mapInf) { }

	// RVA: 0x17F754C Offset: 0x17F754C VA: 0x17F754C
	public void DestroyButtons() { }

	// RVA: 0x17F77F8 Offset: 0x17F77F8 VA: 0x17F77F8
	public void FrameIn() { }

	// RVA: 0x17F7A2C Offset: 0x17F7A2C VA: 0x17F7A2C
	public void FrameOut() { }

	// RVA: 0x17F7BB8 Offset: 0x17F7BB8 VA: 0x17F7BB8
	private static void .cctor() { }
}

// Namespace: 
public class MapButtonPrefab : MonoBehaviour // TypeDefIndex: 11030
{
	// Fields
	private static readonly float FRAME_IN_ANIM_DURATION; // 0x0
	private static readonly float FRAME_OUT_ANIM_DURATION; // 0x4
	private static readonly string FUNC_ENTRY_ANIM; // 0x8
	private UISprite btSp; // 0x18
	private int mapId; // 0x20
	private ScrTerminalMap map; // 0x28
	private Vector3 inPos; // 0x30
	private Vector3 outPos; // 0x3C
	[SerializeField] // RVA: 0xCE8AC0 Offset: 0xCE8AC0 VA: 0xCE8AC0
	private GameObject mNoticeNumberObj; // 0x48
	private NoticeNumberComponent mNoticeNumber; // 0x50

	// Methods

	// RVA: 0x17F81B0 Offset: 0x17F81B0 VA: 0x17F81B0
	public void .ctor() { }

	// RVA: 0x17F7080 Offset: 0x17F7080 VA: 0x17F7080
	public int SetButton(UIAtlas atlas, string spName, ScrTerminalMap tMap, int map_id, bool isMapButtonTop) { }

	// RVA: 0x17F72AC Offset: 0x17F72AC VA: 0x17F72AC
	public void SetBadge(int num) { }

	// RVA: 0x17F7878 Offset: 0x17F7878 VA: 0x17F7878
	public void SetEntryAnim() { }

	// RVA: 0x17F81B8 Offset: 0x17F81B8 VA: 0x17F81B8
	private void EntryAnim() { }

	// RVA: 0x17F81BC Offset: 0x17F81BC VA: 0x17F81BC
	public void FrameIn() { }

	// RVA: 0x17F7AAC Offset: 0x17F7AAC VA: 0x17F7AAC
	public void FrameOut() { }

	// RVA: 0x17F82E4 Offset: 0x17F82E4 VA: 0x17F82E4
	public void OnClickButton() { }

	// RVA: 0x17F8324 Offset: 0x17F8324 VA: 0x17F8324
	private static void .cctor() { }
}

// Namespace: 
public class MapCamera : MonoBehaviour // TypeDefIndex: 11031
{
	// Fields
	public static readonly int MAP_BASE_W; // 0x0
	public static readonly int MAP_BASE_H; // 0x4
	public static readonly float AUTO_WORK_DURATION_MIN; // 0x8
	[SerializeField] // RVA: 0xCE8AD0 Offset: 0xCE8AD0 VA: 0xCE8AD0
	private Camera mCamera; // 0x18
	[SerializeField] // RVA: 0xCE8AE0 Offset: 0xCE8AE0 VA: 0xCE8AE0
	private UITexture mMapBg; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE8AF0 Offset: 0xCE8AF0 VA: 0xCE8AF0
	[DebuggerBrowsableAttribute] // RVA: 0xCE8AF0 Offset: 0xCE8AF0 VA: 0xCE8AF0
	private float <MapBgRateW>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCE8B2C Offset: 0xCE8B2C VA: 0xCE8B2C
	[DebuggerBrowsableAttribute] // RVA: 0xCE8B2C Offset: 0xCE8B2C VA: 0xCE8B2C
	private float <MapBgRateH>k__BackingField; // 0x2C
	private Rect mCameraRect; // 0x30
	private MapScroll mScrl; // 0x40
	private MapZoom mZoom; // 0x48
	private MapTouchDetector touchDetector; // 0x50
	private bool mIsInitDone; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCE8B68 Offset: 0xCE8B68 VA: 0xCE8B68
	[DebuggerBrowsableAttribute] // RVA: 0xCE8B68 Offset: 0xCE8B68 VA: 0xCE8B68
	private bool <IsTouchEnable>k__BackingField; // 0x59
	private Rect mMvBrakeRect; // 0x5C
	private Rect mMvLimitRect; // 0x6C
	[CompilerGeneratedAttribute] // RVA: 0xCE8BA4 Offset: 0xCE8BA4 VA: 0xCE8BA4
	[DebuggerBrowsableAttribute] // RVA: 0xCE8BA4 Offset: 0xCE8BA4 VA: 0xCE8BA4
	private Vector2 <windowSize>k__BackingField; // 0x7C

	// Properties
	public UITexture MapBg { get; }
	public float MapBgRateW { get; set; }
	public float MapBgRateH { get; set; }
	public Rect CameraRect { get; }
	public MapScroll Scrl { get; }
	public MapZoom Zoom { get; }
	public bool IsTouchEnable { get; set; }
	public Rect MvBrakeRect { get; }
	public Rect MvLimitRect { get; }
	public Vector2 windowSize { get; set; }

	// Methods

	// RVA: 0x17F83A8 Offset: 0x17F83A8 VA: 0x17F83A8
	public void .ctor() { }

	// RVA: 0x17F83B0 Offset: 0x17F83B0 VA: 0x17F83B0
	public UITexture get_MapBg() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40BAC Offset: 0xD40BAC VA: 0xD40BAC
	// RVA: 0x17F83B8 Offset: 0x17F83B8 VA: 0x17F83B8
	public float get_MapBgRateW() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40BBC Offset: 0xD40BBC VA: 0xD40BBC
	// RVA: 0x17F83C0 Offset: 0x17F83C0 VA: 0x17F83C0
	private void set_MapBgRateW(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40BCC Offset: 0xD40BCC VA: 0xD40BCC
	// RVA: 0x17F83C8 Offset: 0x17F83C8 VA: 0x17F83C8
	public float get_MapBgRateH() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40BDC Offset: 0xD40BDC VA: 0xD40BDC
	// RVA: 0x17F83D0 Offset: 0x17F83D0 VA: 0x17F83D0
	private void set_MapBgRateH(float value) { }

	// RVA: 0x17F83D8 Offset: 0x17F83D8 VA: 0x17F83D8
	public Camera GetCamera() { }

	// RVA: 0x17F83E0 Offset: 0x17F83E0 VA: 0x17F83E0
	public Rect get_CameraRect() { }

	// RVA: 0x17F8458 Offset: 0x17F8458 VA: 0x17F8458
	public MapScroll get_Scrl() { }

	// RVA: 0x17F8460 Offset: 0x17F8460 VA: 0x17F8460
	public MapZoom get_Zoom() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40BEC Offset: 0xD40BEC VA: 0xD40BEC
	// RVA: 0x17F8468 Offset: 0x17F8468 VA: 0x17F8468
	public bool get_IsTouchEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40BFC Offset: 0xD40BFC VA: 0xD40BFC
	// RVA: 0x17F8470 Offset: 0x17F8470 VA: 0x17F8470
	public void set_IsTouchEnable(bool value) { }

	// RVA: 0x17F847C Offset: 0x17F847C VA: 0x17F847C
	public Rect get_MvBrakeRect() { }

	// RVA: 0x17F8488 Offset: 0x17F8488 VA: 0x17F8488
	public Rect get_MvLimitRect() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C0C Offset: 0xD40C0C VA: 0xD40C0C
	// RVA: 0x17F8494 Offset: 0x17F8494 VA: 0x17F8494
	public Vector2 get_windowSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C1C Offset: 0xD40C1C VA: 0xD40C1C
	// RVA: 0x17F849C Offset: 0x17F849C VA: 0x17F849C
	private void set_windowSize(Vector2 value) { }

	// RVA: 0x17F84A4 Offset: 0x17F84A4 VA: 0x17F84A4
	public void Init() { }

	// RVA: 0x17F86AC Offset: 0x17F86AC VA: 0x17F86AC
	public void UnInit() { }

	// RVA: 0x17F870C Offset: 0x17F870C VA: 0x17F870C
	private void OnDestroy() { }

	// RVA: 0x17F8710 Offset: 0x17F8710 VA: 0x17F8710
	public void Process(bool is_tch_enable = True) { }

	// RVA: 0x17F8408 Offset: 0x17F8408 VA: 0x17F8408
	private void CalcWorldRect() { }

	// RVA: 0x17F8F00 Offset: 0x17F8F00 VA: 0x17F8F00
	public Rect GetWorldRect(Vector3 cam_pos) { }

	// RVA: 0x17F8F68 Offset: 0x17F8F68 VA: 0x17F8F68
	public Rect GetWorldRect(Vector3 cam_pos, float scale) { }

	// RVA: 0x17F8FEC Offset: 0x17F8FEC VA: 0x17F8FEC
	public void SetMapBg(UITexture mapBg) { }

	// RVA: 0x17F9224 Offset: 0x17F9224 VA: 0x17F9224
	public void SetMapTexture(Texture2D tex, int w, int h) { }

	// RVA: 0x17F8FF4 Offset: 0x17F8FF4 VA: 0x17F8FF4
	public void SetMapRate() { }

	// RVA: 0x17F9404 Offset: 0x17F9404 VA: 0x17F9404
	public void RemoveMapTexture() { }

	// RVA: 0x17F92C8 Offset: 0x17F92C8 VA: 0x17F92C8
	private void SetMoveLimit() { }

	// RVA: 0x17F8674 Offset: 0x17F8674 VA: 0x17F8674
	public void SetEnable(bool is_enable) { }

	// RVA: 0x17F8854 Offset: 0x17F8854 VA: 0x17F8854
	public bool IsEnable() { }

	// RVA: 0x17F9440 Offset: 0x17F9440 VA: 0x17F9440
	public void StartAutoMove(Vector3 screenPos, float sec, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0x17F9688 Offset: 0x17F9688 VA: 0x17F9688
	public void StartAutoZoom(float size, float sec, Easing.TYPE easeType = 5, Action endAct) { }

	// RVA: 0x17F94F8 Offset: 0x17F94F8 VA: 0x17F94F8
	public void StartAutoWork(float sec, Nullable<Vector3> screenPos, Nullable<float> size, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0x17F9BA0 Offset: 0x17F9BA0 VA: 0x17F9BA0
	private static void .cctor() { }
}

// Namespace: 
public class MapControl // TypeDefIndex: 11032
{
	// Methods

	// RVA: 0x17FC334 Offset: 0x17FC334 VA: 0x17FC334
	public void .ctor() { }
}

// Namespace: 
public class MapControl.PhaseInfo // TypeDefIndex: 11033
{
	// Fields
	private int questId; // 0x10
	private int phase; // 0x14
	private QuestPhaseMaster questPhaseMaster; // 0x18
	private QuestPhaseEntity mine; // 0x20

	// Methods

	// RVA: 0x17FCE84 Offset: 0x17FCE84 VA: 0x17FCE84
	public void .ctor() { }

	// RVA: 0x17FCE8C Offset: 0x17FCE8C VA: 0x17FCE8C
	public void Reset() { }

	// RVA: 0x17FCE90 Offset: 0x17FCE90 VA: 0x17FCE90
	public void SetMine(int questId, int phase) { }

	// RVA: 0x17FCE98 Offset: 0x17FCE98 VA: 0x17FCE98
	public QuestPhaseEntity GetMine() { }

	// RVA: 0x17FCF20 Offset: 0x17FCF20 VA: 0x17FCF20
	private QuestPhaseMaster GetQuestPhaseMaster() { }
}

// Namespace: 
public class MapControl.AreaBoardInfo // TypeDefIndex: 11034
{
	// Fields
	public QuestBoardListViewItemDraw.enQBoardL1Type questBoardType; // 0x10
	public int warId; // 0x14
	public int questCount; // 0x18
	public QuestBoardListViewItemDraw.enStatus status; // 0x1C
	public EventEntity eventEnt; // 0x20
	public bool isNext; // 0x28
	public bool isCondPassEventWar; // 0x29
	public BannerEntity[] bannerEntList; // 0x30
	public int bannerFocusIndex; // 0x38
	public string specialNoticeText; // 0x40

	// Methods

	// RVA: 0x17FC33C Offset: 0x17FC33C VA: 0x17FC33C
	public void .ctor() { }
}

// Namespace: 
public class MapControl.QuestInfo // TypeDefIndex: 11035
{
	// Fields
	private int questId; // 0x10
	private int phaseCount; // 0x14
	private QuestEntity questEnt; // 0x18
	private MapControl.QuestInfo.DispType dispType; // 0x20
	private MapControl.QuestInfo.TouchType touchType; // 0x24
	private bool isNew; // 0x28
	private int questPhase; // 0x2C
	private int pickupPriority; // 0x30
	private List<MapControl.PhaseInfo> phaseInfoList; // 0x38
	private int warId; // 0x40
	private CondType.Kind questReleaseType; // 0x44
	private int questReleaseTargetID; // 0x48
	private long questReleaseValue; // 0x50
	private int questReleaseClosedID; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCE8BE0 Offset: 0xCE8BE0 VA: 0xCE8BE0
	[DebuggerBrowsableAttribute] // RVA: 0xCE8BE0 Offset: 0xCE8BE0 VA: 0xCE8BE0
	private MapControl.SpotInfo <SpotInfo>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCE8C1C Offset: 0xCE8C1C VA: 0xCE8C1C
	[DebuggerBrowsableAttribute] // RVA: 0xCE8C1C Offset: 0xCE8C1C VA: 0xCE8C1C
	private MapControl.WarInfo <WarInfo>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCE8C58 Offset: 0xCE8C58 VA: 0xCE8C58
	[DebuggerBrowsableAttribute] // RVA: 0xCE8C58 Offset: 0xCE8C58 VA: 0xCE8C58
	private MapControl.AreaBoardInfo <AreaBoardInfo>k__BackingField; // 0x70
	private int costCalcVal; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCE8C94 Offset: 0xCE8C94 VA: 0xCE8C94
	[DebuggerBrowsableAttribute] // RVA: 0xCE8C94 Offset: 0xCE8C94 VA: 0xCE8C94
	private int <fixedCostVal>k__BackingField; // 0x7C
	[CompilerGeneratedAttribute] // RVA: 0xCE8CD0 Offset: 0xCE8CD0 VA: 0xCE8CD0
	[DebuggerBrowsableAttribute] // RVA: 0xCE8CD0 Offset: 0xCE8CD0 VA: 0xCE8CD0
	private int <GroupId>k__BackingField; // 0x80
	private List<int> sameGroupQuestIds; // 0x88
	private long endTime; // 0x90

	// Properties
	public CondType.Kind QuestReleaseType { get; }
	public int QuestReleaseTargetID { get; }
	public long QuestReleaseValue { get; }
	public int QuestReleaseClosedID { get; }
	public MapControl.SpotInfo SpotInfo { get; set; }
	public MapControl.WarInfo WarInfo { get; set; }
	public MapControl.AreaBoardInfo AreaBoardInfo { get; set; }
	public int fixedCostVal { get; set; }
	public int GroupId { get; set; }

	// Methods

	// RVA: 0x17FCFA0 Offset: 0x17FCFA0 VA: 0x17FCFA0
	public void .ctor() { }

	// RVA: 0x17FD04C Offset: 0x17FD04C VA: 0x17FD04C
	public CondType.Kind get_QuestReleaseType() { }

	// RVA: 0x17FD054 Offset: 0x17FD054 VA: 0x17FD054
	public int get_QuestReleaseTargetID() { }

	// RVA: 0x17FD05C Offset: 0x17FD05C VA: 0x17FD05C
	public long get_QuestReleaseValue() { }

	// RVA: 0x17FD064 Offset: 0x17FD064 VA: 0x17FD064
	public int get_QuestReleaseClosedID() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C2C Offset: 0xD40C2C VA: 0xD40C2C
	// RVA: 0x17FD06C Offset: 0x17FD06C VA: 0x17FD06C
	public MapControl.SpotInfo get_SpotInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C3C Offset: 0xD40C3C VA: 0xD40C3C
	// RVA: 0x17FD074 Offset: 0x17FD074 VA: 0x17FD074
	public void set_SpotInfo(MapControl.SpotInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C4C Offset: 0xD40C4C VA: 0xD40C4C
	// RVA: 0x17FD07C Offset: 0x17FD07C VA: 0x17FD07C
	public MapControl.WarInfo get_WarInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C5C Offset: 0xD40C5C VA: 0xD40C5C
	// RVA: 0x17FD084 Offset: 0x17FD084 VA: 0x17FD084
	public void set_WarInfo(MapControl.WarInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C6C Offset: 0xD40C6C VA: 0xD40C6C
	// RVA: 0x17FD08C Offset: 0x17FD08C VA: 0x17FD08C
	public MapControl.AreaBoardInfo get_AreaBoardInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C7C Offset: 0xD40C7C VA: 0xD40C7C
	// RVA: 0x17FD094 Offset: 0x17FD094 VA: 0x17FD094
	public void set_AreaBoardInfo(MapControl.AreaBoardInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C8C Offset: 0xD40C8C VA: 0xD40C8C
	// RVA: 0x17FD09C Offset: 0x17FD09C VA: 0x17FD09C
	public int get_fixedCostVal() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40C9C Offset: 0xD40C9C VA: 0xD40C9C
	// RVA: 0x17FD044 Offset: 0x17FD044 VA: 0x17FD044
	public void set_fixedCostVal(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40CAC Offset: 0xD40CAC VA: 0xD40CAC
	// RVA: 0x17FD0A4 Offset: 0x17FD0A4 VA: 0x17FD0A4
	public int get_GroupId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40CBC Offset: 0xD40CBC VA: 0xD40CBC
	// RVA: 0x17FD0AC Offset: 0x17FD0AC VA: 0x17FD0AC
	public void set_GroupId(int value) { }

	// RVA: 0x17FD0B4 Offset: 0x17FD0B4 VA: 0x17FD0B4
	public void AddSameGroupQuestIds(int[] questIds) { }

	// RVA: 0x17FD1F0 Offset: 0x17FD1F0 VA: 0x17FD1F0
	public List<int> GetSameGroupQuestIds() { }

	// RVA: 0x17FD1F8 Offset: 0x17FD1F8 VA: 0x17FD1F8
	public bool IsClear() { }

	// RVA: 0x17FD26C Offset: 0x17FD26C VA: 0x17FD26C
	public bool IsAnyPhaseClear() { }

	// RVA: 0x17FD318 Offset: 0x17FD318 VA: 0x17FD318
	public void Reset() { }

	// RVA: 0x17FD460 Offset: 0x17FD460 VA: 0x17FD460
	public MapControl.PhaseInfo AddChild(int questId, int phase) { }

	// RVA: 0x17FD514 Offset: 0x17FD514 VA: 0x17FD514
	public int GetQuestID() { }

	// RVA: 0x17FD51C Offset: 0x17FD51C VA: 0x17FD51C
	public void SetQuestID(int value) { }

	// RVA: 0x17FD524 Offset: 0x17FD524 VA: 0x17FD524
	public int GetSpotID() { }

	// RVA: 0x17FD660 Offset: 0x17FD660 VA: 0x17FD660
	public void SetSpotID(int value) { }

	// RVA: 0x17FD6E8 Offset: 0x17FD6E8 VA: 0x17FD6E8
	public void SetWarID(int warId) { }

	// RVA: 0x17FD6F0 Offset: 0x17FD6F0 VA: 0x17FD6F0
	public int GetWarID() { }

	// RVA: 0x17FD6F8 Offset: 0x17FD6F8 VA: 0x17FD6F8
	public QuestEntity.enType GetQuestType() { }

	// RVA: 0x17FD728 Offset: 0x17FD728 VA: 0x17FD728
	public MapControl.QuestInfo.DispType GetDispType() { }

	// RVA: 0x17FD730 Offset: 0x17FD730 VA: 0x17FD730
	public bool IsDisaplayable() { }

	// RVA: 0x17FD74C Offset: 0x17FD74C VA: 0x17FD74C
	public void SetDispType(MapControl.QuestInfo.DispType dispType, CondType.Kind quest_release_type = 0, int quest_release_target_id = 0, long quest_release_value = 0, int quest_release_closed_id = 0) { }

	// RVA: 0x17FD760 Offset: 0x17FD760 VA: 0x17FD760
	public MapControl.QuestInfo.TouchType GetTouchType() { }

	// RVA: 0x17FD768 Offset: 0x17FD768 VA: 0x17FD768
	public void SetTouchType(MapControl.QuestInfo.TouchType eTouchType) { }

	// RVA: 0x17FD770 Offset: 0x17FD770 VA: 0x17FD770
	public bool IsNew() { }

	// RVA: 0x17FD778 Offset: 0x17FD778 VA: 0x17FD778
	public void SetIsNew(bool isNew) { }

	// RVA: 0x17FD784 Offset: 0x17FD784 VA: 0x17FD784
	public int GetQuestPhase() { }

	// RVA: 0x17FD78C Offset: 0x17FD78C VA: 0x17FD78C
	public void SetQuestPhase(int questPhase) { }

	// RVA: 0x17FD794 Offset: 0x17FD794 VA: 0x17FD794
	public int GetPhaseMax() { }

	// RVA: 0x17FD7F4 Offset: 0x17FD7F4 VA: 0x17FD7F4
	public int GetClearPhaseMax() { }

	// RVA: 0x17FD978 Offset: 0x17FD978 VA: 0x17FD978
	public int GetPickupPriority() { }

	// RVA: 0x17FD980 Offset: 0x17FD980 VA: 0x17FD980
	public void SetPickupPriority(int pickupPriority) { }

	// RVA: 0x17FD988 Offset: 0x17FD988 VA: 0x17FD988
	public void SetCostCalcVal(int val) { }

	// RVA: 0x17FD990 Offset: 0x17FD990 VA: 0x17FD990
	public int GetCostCalcVal() { }

	// RVA: 0x17FD998 Offset: 0x17FD998 VA: 0x17FD998
	public void SetEndTime(long val) { }

	// RVA: 0x17FD9A0 Offset: 0x17FD9A0 VA: 0x17FD9A0
	public long GetEndTime() { }

	// RVA: 0x17FD9A8 Offset: 0x17FD9A8 VA: 0x17FD9A8
	public void SetMine(int questId) { }

	// RVA: 0x17FD554 Offset: 0x17FD554 VA: 0x17FD554
	public QuestEntity GetMine() { }

	// RVA: 0x17FD9B0 Offset: 0x17FD9B0 VA: 0x17FD9B0
	public void SetTerminalParamsValue() { }
}

// Namespace: 
public enum MapControl.QuestInfo.DispType // TypeDefIndex: 11036
{
	// Fields
	public int value__; // 0x0
	public const MapControl.QuestInfo.DispType None = 0;
	public const MapControl.QuestInfo.DispType Normal = 1;
	public const MapControl.QuestInfo.DispType Closed = 2;
	public const MapControl.QuestInfo.DispType Never = 3;
}

// Namespace: 
public enum MapControl.QuestInfo.TouchType // TypeDefIndex: 11037
{
	// Fields
	public int value__; // 0x0
	public const MapControl.QuestInfo.TouchType Disable = 0;
	public const MapControl.QuestInfo.TouchType Enable = 1;
}

// Namespace: 
public class MapControl.SpotInfo // TypeDefIndex: 11038
{
	// Fields
	private int spotId; // 0x10
	private MapControl.SpotInfo.DispType dispType; // 0x14
	private MapControl.SpotInfo.TouchType touchType; // 0x18
	private int questCount; // 0x1C
	private List<int> availableQuestIdList; // 0x20
	private int freeQuestCount; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCE8D0C Offset: 0xCE8D0C VA: 0xCE8D0C
	[DebuggerBrowsableAttribute] // RVA: 0xCE8D0C Offset: 0xCE8D0C VA: 0xCE8D0C
	private bool <IsNext>k__BackingField; // 0x2C
	private List<MapControl.QuestInfo> questInfoList; // 0x30
	private SpotEntity mine; // 0x38
	private SpotMaster spotMaster; // 0x40

	// Properties
	public bool IsNext { get; set; }

	// Methods

	// RVA: 0x17FCB4C Offset: 0x17FCB4C VA: 0x17FCB4C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40CCC Offset: 0xD40CCC VA: 0xD40CCC
	// RVA: 0x17FE550 Offset: 0x17FE550 VA: 0x17FE550
	public bool get_IsNext() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40CDC Offset: 0xD40CDC VA: 0xD40CDC
	// RVA: 0x17FE558 Offset: 0x17FE558 VA: 0x17FE558
	public void set_IsNext(bool value) { }

	// RVA: 0x17FC968 Offset: 0x17FC968 VA: 0x17FC968
	public void Reset() { }

	// RVA: 0x17FE564 Offset: 0x17FE564 VA: 0x17FE564
	public MapControl.QuestInfo AddChild(int questId) { }

	// RVA: 0x17FE604 Offset: 0x17FE604 VA: 0x17FE604
	public int GetMapID() { }

	// RVA: 0x17FE6B8 Offset: 0x17FE6B8 VA: 0x17FE6B8
	public int GetSpotID() { }

	// RVA: 0x17FD6E0 Offset: 0x17FD6E0 VA: 0x17FD6E0
	public void SetSpotID(int value) { }

	// RVA: 0x17FE6C0 Offset: 0x17FE6C0 VA: 0x17FE6C0
	public MapControl.SpotInfo.DispType GetDispType() { }

	// RVA: 0x17FE6C8 Offset: 0x17FE6C8 VA: 0x17FE6C8
	public void SetDispType(MapControl.SpotInfo.DispType dispType) { }

	// RVA: 0x17FE6D0 Offset: 0x17FE6D0 VA: 0x17FE6D0
	public MapControl.SpotInfo.TouchType GetTouchType() { }

	// RVA: 0x17FE6D8 Offset: 0x17FE6D8 VA: 0x17FE6D8
	public void SetTouchType(MapControl.SpotInfo.TouchType touchType) { }

	// RVA: 0x17FE6E0 Offset: 0x17FE6E0 VA: 0x17FE6E0
	public int GetQuestcount() { }

	// RVA: 0x17FE6E8 Offset: 0x17FE6E8 VA: 0x17FE6E8
	public List<int> GetAvailableQuestIdList() { }

	// RVA: 0x17FE758 Offset: 0x17FE758 VA: 0x17FE758
	public void SetQuestcount(int questCount) { }

	// RVA: 0x17FE760 Offset: 0x17FE760 VA: 0x17FE760
	public void AddQuestCount(int questCount) { }

	// RVA: 0x17FE770 Offset: 0x17FE770 VA: 0x17FE770
	public void AddAvailableQuestId(int questId) { }
