	public void .ctor() { }
}

// Namespace: 
public class X520.LocalityName : X520.AttributeTypeAndValue // TypeDefIndex: 1857
{
	// Methods

	// RVA: 0x1389D1C Offset: 0x1389D1C VA: 0x1389D1C
	public void .ctor() { }
}

// Namespace: 
public class X520.StateOrProvinceName : X520.AttributeTypeAndValue // TypeDefIndex: 1858
{
	// Methods

	// RVA: 0x1389EE4 Offset: 0x1389EE4 VA: 0x1389EE4
	public void .ctor() { }
}

// Namespace: 
public class X520.OrganizationName : X520.AttributeTypeAndValue // TypeDefIndex: 1859
{
	// Methods

	// RVA: 0x1389DD8 Offset: 0x1389DD8 VA: 0x1389DD8
	public void .ctor() { }
}

// Namespace: 
public class X520.OrganizationalUnitName : X520.AttributeTypeAndValue // TypeDefIndex: 1860
{
	// Methods

	// RVA: 0x1389E30 Offset: 0x1389E30 VA: 0x1389E30
	public void .ctor() { }
}

// Namespace: 
public class X520.EmailAddress : X520.AttributeTypeAndValue // TypeDefIndex: 1861
{
	// Methods

	// RVA: 0x1389C10 Offset: 0x1389C10 VA: 0x1389C10
	public void .ctor() { }
}

// Namespace: 
public class X520.DomainComponent : X520.AttributeTypeAndValue // TypeDefIndex: 1862
{
	// Methods

	// RVA: 0x1389BB4 Offset: 0x1389BB4 VA: 0x1389BB4
	public void .ctor() { }
}

// Namespace: 
public class X520.UserId : X520.AttributeTypeAndValue // TypeDefIndex: 1863
{
	// Methods

	// RVA: 0x1389FEC Offset: 0x1389FEC VA: 0x1389FEC
	public void .ctor() { }
}

// Namespace: 
public class X520.Oid : X520.AttributeTypeAndValue // TypeDefIndex: 1864
{
	// Methods

	// RVA: 0x1389DCC Offset: 0x1389DCC VA: 0x1389DCC
	public void .ctor(string oid) { }
}

// Namespace: 
public class X520.Title : X520.AttributeTypeAndValue // TypeDefIndex: 1865
{
	// Methods

	// RVA: 0x1389F94 Offset: 0x1389F94 VA: 0x1389F94
	public void .ctor() { }
}

// Namespace: 
public class X520.CountryName : X520.AttributeTypeAndValue // TypeDefIndex: 1866
{
	// Methods

	// RVA: 0x1389AFC Offset: 0x1389AFC VA: 0x1389AFC
	public void .ctor() { }
}

// Namespace: 
public class X520.DnQualifier : X520.AttributeTypeAndValue // TypeDefIndex: 1867
{
	// Methods

	// RVA: 0x1389B58 Offset: 0x1389B58 VA: 0x1389B58
	public void .ctor() { }
}

// Namespace: 
public class X520.Surname : X520.AttributeTypeAndValue // TypeDefIndex: 1868
{
	// Methods

	// RVA: 0x1389F3C Offset: 0x1389F3C VA: 0x1389F3C
	public void .ctor() { }
}

// Namespace: 
public class X520.GivenName : X520.AttributeTypeAndValue // TypeDefIndex: 1869
{
	// Methods

	// RVA: 0x1389C6C Offset: 0x1389C6C VA: 0x1389C6C
	public void .ctor() { }
}

// Namespace: 
public class X520.Initial : X520.AttributeTypeAndValue // TypeDefIndex: 1870
{
	// Methods

	// RVA: 0x1389CC4 Offset: 0x1389CC4 VA: 0x1389CC4
	public void .ctor() { }
}

// Namespace: Mono.Security.X509.Extensions
public class AuthorityKeyIdentifierExtension : X509Extension // TypeDefIndex: 1871
{
	// Fields
	private byte[] aki; // 0x28

	// Properties
	public override string Name { get; }
	public byte[] Identifier { get; }

	// Methods

	// RVA: 0x10FA4AC Offset: 0x10FA4AC VA: 0x10FA4AC
	public void .ctor(X509Extension extension) { }

	// RVA: 0x10FA4B4 Offset: 0x10FA4B4 VA: 0x10FA4B4 Slot: 4
	protected override void Decode() { }

	// RVA: 0x10FA630 Offset: 0x10FA630 VA: 0x10FA630 Slot: 6
	public override string get_Name() { }

	// RVA: 0x10FA678 Offset: 0x10FA678 VA: 0x10FA678
	public byte[] get_Identifier() { }

	// RVA: 0x10FA744 Offset: 0x10FA744 VA: 0x10FA744 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class BasicConstraintsExtension : X509Extension // TypeDefIndex: 1872
{
	// Fields
	private bool cA; // 0x28
	private int pathLenConstraint; // 0x2C

	// Properties
	public bool CertificateAuthority { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x10FA900 Offset: 0x10FA900 VA: 0x10FA900
	public void .ctor(X509Extension extension) { }

	// RVA: 0x10FA908 Offset: 0x10FA908 VA: 0x10FA908 Slot: 4
	protected override void Decode() { }

	// RVA: 0x10FAAD0 Offset: 0x10FAAD0 VA: 0x10FAAD0 Slot: 5
	protected override void Encode() { }

	// RVA: 0x10FAC2C Offset: 0x10FAC2C VA: 0x10FAC2C
	public bool get_CertificateAuthority() { }

	// RVA: 0x10FAC34 Offset: 0x10FAC34 VA: 0x10FAC34 Slot: 6
	public override string get_Name() { }

	// RVA: 0x10FAC7C Offset: 0x10FAC7C VA: 0x10FAC7C Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class ExtendedKeyUsageExtension : X509Extension // TypeDefIndex: 1873
{
	// Fields
	private ArrayList keyPurpose; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC40054 Offset: 0xC40054 VA: 0xC40054
	private static Dictionary<string, int> <>f__switch$map14; // 0x0

	// Properties
	public ArrayList KeyPurpose { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x10E483C Offset: 0x10E483C VA: 0x10E483C
	public void .ctor(X509Extension extension) { }

	// RVA: 0x10FAE6C Offset: 0x10FAE6C VA: 0x10FAE6C Slot: 4
	protected override void Decode() { }

	// RVA: 0x10FB004 Offset: 0x10FB004 VA: 0x10FB004 Slot: 5
	protected override void Encode() { }

	// RVA: 0x10E491C Offset: 0x10E491C VA: 0x10E491C
	public ArrayList get_KeyPurpose() { }

	// RVA: 0x10FB330 Offset: 0x10FB330 VA: 0x10FB330 Slot: 6
	public override string get_Name() { }

	// RVA: 0x10FB378 Offset: 0x10FB378 VA: 0x10FB378 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
internal class GeneralNames // TypeDefIndex: 1874
{
	// Fields
	private ArrayList rfc822Name; // 0x10
	private ArrayList dnsName; // 0x18
	private ArrayList directoryNames; // 0x20
	private ArrayList uris; // 0x28
	private ArrayList ipAddr; // 0x30

	// Properties
	public string[] DNSNames { get; }
	public string[] IPAddresses { get; }

	// Methods

	// RVA: 0x10FB99C Offset: 0x10FB99C VA: 0x10FB99C
	public void .ctor(ASN1 sequence) { }

	// RVA: 0x10FBE08 Offset: 0x10FBE08 VA: 0x10FBE08
	public string[] get_DNSNames() { }

	// RVA: 0x10FBF34 Offset: 0x10FBF34 VA: 0x10FBF34
	public string[] get_IPAddresses() { }

	// RVA: 0x10FC060 Offset: 0x10FC060 VA: 0x10FC060 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
[FlagsAttribute] // RVA: 0xC3FEEC Offset: 0xC3FEEC VA: 0xC3FEEC
public enum KeyUsages // TypeDefIndex: 1875
{
	// Fields
	public int value__; // 0x0
	public const KeyUsages digitalSignature = 128;
	public const KeyUsages nonRepudiation = 64;
	public const KeyUsages keyEncipherment = 32;
	public const KeyUsages dataEncipherment = 16;
	public const KeyUsages keyAgreement = 8;
	public const KeyUsages keyCertSign = 4;
	public const KeyUsages cRLSign = 2;
	public const KeyUsages encipherOnly = 1;
	public const KeyUsages decipherOnly = 2048;
	public const KeyUsages none = 0;
}

// Namespace: Mono.Security.X509.Extensions
public class KeyUsageExtension : X509Extension // TypeDefIndex: 1876
{
	// Fields
	private int kubits; // 0x28

	// Properties
	public override string Name { get; }

	// Methods

	// RVA: 0x10E4834 Offset: 0x10E4834 VA: 0x10E4834
	public void .ctor(X509Extension extension) { }

	// RVA: 0x10FCF44 Offset: 0x10FCF44 VA: 0x10FCF44 Slot: 4
	protected override void Decode() { }

	// RVA: 0x10FD0D8 Offset: 0x10FD0D8 VA: 0x10FD0D8 Slot: 5
	protected override void Encode() { }

	// RVA: 0x10FD320 Offset: 0x10FD320 VA: 0x10FD320 Slot: 6
	public override string get_Name() { }

	// RVA: 0x10E4844 Offset: 0x10E4844 VA: 0x10E4844
	public bool Support(KeyUsages usage) { }

	// RVA: 0x10FD368 Offset: 0x10FD368 VA: 0x10FD368 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class NetscapeCertTypeExtension : X509Extension // TypeDefIndex: 1877
{
	// Fields
	private int ctbits; // 0x28

	// Properties
	public override string Name { get; }

	// Methods

	// RVA: 0x1295E30 Offset: 0x1295E30 VA: 0x1295E30
	public void .ctor(X509Extension extension) { }

	// RVA: 0x1295FC8 Offset: 0x1295FC8 VA: 0x1295FC8 Slot: 4
	protected override void Decode() { }

	// RVA: 0x129615C Offset: 0x129615C VA: 0x129615C Slot: 6
	public override string get_Name() { }

	// RVA: 0x12961A4 Offset: 0x12961A4 VA: 0x12961A4
	public bool Support(NetscapeCertTypeExtension.CertTypes usage) { }

	// RVA: 0x129627C Offset: 0x129627C VA: 0x129627C Slot: 3
	public override string ToString() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC3FEFC Offset: 0xC3FEFC VA: 0xC3FEFC
public enum NetscapeCertTypeExtension.CertTypes // TypeDefIndex: 1878
{
	// Fields
	public int value__; // 0x0
	public const NetscapeCertTypeExtension.CertTypes SslClient = 128;
	public const NetscapeCertTypeExtension.CertTypes SslServer = 64;
	public const NetscapeCertTypeExtension.CertTypes Smime = 32;
	public const NetscapeCertTypeExtension.CertTypes ObjectSigning = 16;
	public const NetscapeCertTypeExtension.CertTypes SslCA = 4;
	public const NetscapeCertTypeExtension.CertTypes SmimeCA = 2;
	public const NetscapeCertTypeExtension.CertTypes ObjectSigningCA = 1;
}

// Namespace: Mono.Security.X509.Extensions
public class SubjectAltNameExtension : X509Extension // TypeDefIndex: 1879
{
	// Fields
	private GeneralNames _names; // 0x28

	// Properties
	public override string Name { get; }
	public string[] DNSNames { get; }
	public string[] IPAddresses { get; }

	// Methods

	// RVA: 0x12966E8 Offset: 0x12966E8 VA: 0x12966E8
	public void .ctor(X509Extension extension) { }

	// RVA: 0x12966EC Offset: 0x12966EC VA: 0x12966EC Slot: 4
	protected override void Decode() { }

	// RVA: 0x1296804 Offset: 0x1296804 VA: 0x1296804 Slot: 6
	public override string get_Name() { }

	// RVA: 0x129684C Offset: 0x129684C VA: 0x129684C
	public string[] get_DNSNames() { }

	// RVA: 0x129687C Offset: 0x129687C VA: 0x129687C
	public string[] get_IPAddresses() { }

	// RVA: 0x12968AC Offset: 0x12968AC VA: 0x12968AC Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1880
{
	// Fields
	private byte[] ski; // 0x28

	// Properties
	public override string Name { get; }
	public byte[] Identifier { get; }

	// Methods

	// RVA: 0x12968E0 Offset: 0x12968E0 VA: 0x12968E0
	public void .ctor(X509Extension extension) { }

	// RVA: 0x12968E4 Offset: 0x12968E4 VA: 0x12968E4 Slot: 4
	protected override void Decode() { }

	// RVA: 0x12969F4 Offset: 0x12969F4 VA: 0x12969F4 Slot: 6
	public override string get_Name() { }

	// RVA: 0x1296A3C Offset: 0x1296A3C VA: 0x1296A3C
	public byte[] get_Identifier() { }

	// RVA: 0x1296B08 Offset: 0x1296B08 VA: 0x1296B08 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.Cryptography
internal class HMAC : KeyedHashAlgorithm // TypeDefIndex: 1881
{
	// Fields
	private HashAlgorithm hash; // 0x30
	private bool hashing; // 0x38
	private byte[] innerPad; // 0x40
	private byte[] outerPad; // 0x48

	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x1267BF0 Offset: 0x1267BF0 VA: 0x1267BF0
	public void .ctor(string hashName, byte[] rgbKey) { }

	// RVA: 0x1267D7C Offset: 0x1267D7C VA: 0x1267D7C Slot: 21
	public override byte[] get_Key() { }

	// RVA: 0x1267E54 Offset: 0x1267E54 VA: 0x1267E54 Slot: 22
	public override void set_Key(byte[] value) { }

	// RVA: 0x12681DC Offset: 0x12681DC VA: 0x12681DC Slot: 17
	public override void Initialize() { }

	// RVA: 0x1268228 Offset: 0x1268228 VA: 0x1268228 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x126841C Offset: 0x126841C VA: 0x126841C Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x1267FB4 Offset: 0x1267FB4 VA: 0x1267FB4
	private void initializePad() { }
}

// Namespace: Mono.Security.Cryptography
internal class MD5SHA1 : HashAlgorithm // TypeDefIndex: 1882
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private bool hashing; // 0x38

	// Methods

	// RVA: 0x126A9B4 Offset: 0x126A9B4 VA: 0x126A9B4
	public void .ctor() { }

	// RVA: 0x126AA4C Offset: 0x126AA4C VA: 0x126AA4C Slot: 17
	public override void Initialize() { }

	// RVA: 0x126AAB4 Offset: 0x126AAB4 VA: 0x126AAB4 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x126AC08 Offset: 0x126AC08 VA: 0x126AC08 Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x126ACAC Offset: 0x126ACAC VA: 0x126ACAC
	public byte[] CreateSignature(RSA rsa) { }

	// RVA: 0x126ADB8 Offset: 0x126ADB8 VA: 0x126ADB8
	public bool VerifySignature(RSA rsa, byte[] rgbSignature) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertLevel // TypeDefIndex: 1883
{
	// Fields
	public byte value__; // 0x0
	public const AlertLevel Warning = 1;
	public const AlertLevel Fatal = 2;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertDescription // TypeDefIndex: 1884
{
	// Fields
	public byte value__; // 0x0
	public const AlertDescription CloseNotify = 0;
	public const AlertDescription UnexpectedMessage = 10;
	public const AlertDescription BadRecordMAC = 20;
	public const AlertDescription DecryptionFailed = 21;
	public const AlertDescription RecordOverflow = 22;
	public const AlertDescription DecompressionFailiure = 30;
	public const AlertDescription HandshakeFailiure = 40;
	public const AlertDescription NoCertificate = 41;
	public const AlertDescription BadCertificate = 42;
	public const AlertDescription UnsupportedCertificate = 43;
	public const AlertDescription CertificateRevoked = 44;
	public const AlertDescription CertificateExpired = 45;
	public const AlertDescription CertificateUnknown = 46;
	public const AlertDescription IlegalParameter = 47;
	public const AlertDescription UnknownCA = 48;
	public const AlertDescription AccessDenied = 49;
	public const AlertDescription DecodeError = 50;
	public const AlertDescription DecryptError = 51;
	public const AlertDescription ExportRestriction = 60;
	public const AlertDescription ProtocolVersion = 70;
	public const AlertDescription InsuficientSecurity = 71;
	public const AlertDescription InternalError = 80;
	public const AlertDescription UserCancelled = 90;
	public const AlertDescription NoRenegotiation = 100;
}

// Namespace: Mono.Security.Protocol.Tls
internal class Alert // TypeDefIndex: 1885
{
	// Fields
	private AlertLevel level; // 0x10
	private AlertDescription description; // 0x11

	// Properties
	public AlertLevel Level { get; }
	public AlertDescription Description { get; }
	public string Message { get; }
	public bool IsWarning { get; }
	public bool IsCloseNotify { get; }

	// Methods

	// RVA: 0x12704A0 Offset: 0x12704A0 VA: 0x12704A0
	public void .ctor(AlertDescription description) { }

	// RVA: 0x1270578 Offset: 0x1270578 VA: 0x1270578
	public void .ctor(AlertLevel level, AlertDescription description) { }

	// RVA: 0x12705B4 Offset: 0x12705B4 VA: 0x12705B4
	public AlertLevel get_Level() { }

	// RVA: 0x12705BC Offset: 0x12705BC VA: 0x12705BC
	public AlertDescription get_Description() { }

	// RVA: 0x12705C4 Offset: 0x12705C4 VA: 0x12705C4
	public string get_Message() { }

	// RVA: 0x1270654 Offset: 0x1270654 VA: 0x1270654
	public bool get_IsWarning() { }

	// RVA: 0x1270664 Offset: 0x1270664 VA: 0x1270664
	public bool get_IsCloseNotify() { }

	// RVA: 0x1270520 Offset: 0x1270520 VA: 0x1270520
	private void inferAlertLevel() { }

	// RVA: 0x127060C Offset: 0x127060C VA: 0x127060C
	public static string GetAlertMessage(AlertDescription description) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum CipherAlgorithmType // TypeDefIndex: 1886
{
	// Fields
	public int value__; // 0x0
	public const CipherAlgorithmType Des = 0;
	public const CipherAlgorithmType None = 1;
	public const CipherAlgorithmType Rc2 = 2;
	public const CipherAlgorithmType Rc4 = 3;
	public const CipherAlgorithmType Rijndael = 4;
	public const CipherAlgorithmType SkipJack = 5;
	public const CipherAlgorithmType TripleDes = 6;
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class CipherSuite // TypeDefIndex: 1887
{
	// Fields
	public static byte[] EmptyArray; // 0x0
	private short code; // 0x10
	private string name; // 0x18
	private CipherAlgorithmType cipherAlgorithmType; // 0x20
	private HashAlgorithmType hashAlgorithmType; // 0x24
	private ExchangeAlgorithmType exchangeAlgorithmType; // 0x28
	private bool isExportable; // 0x2C
	private CipherMode cipherMode; // 0x30
	private byte keyMaterialSize; // 0x34
	private int keyBlockSize; // 0x38
	private byte expandedKeyMaterialSize; // 0x3C
	private short effectiveKeyBits; // 0x3E
	private byte ivSize; // 0x40
	private byte blockSize; // 0x41
	private Context context; // 0x48
	private SymmetricAlgorithm encryptionAlgorithm; // 0x50
	private ICryptoTransform encryptionCipher; // 0x58
	private SymmetricAlgorithm decryptionAlgorithm; // 0x60
	private ICryptoTransform decryptionCipher; // 0x68
	private KeyedHashAlgorithm clientHMAC; // 0x70
	private KeyedHashAlgorithm serverHMAC; // 0x78

	// Properties
	protected ICryptoTransform EncryptionCipher { get; }
	protected ICryptoTransform DecryptionCipher { get; }
	protected KeyedHashAlgorithm ClientHMAC { get; }
	protected KeyedHashAlgorithm ServerHMAC { get; }
	public CipherAlgorithmType CipherAlgorithmType { get; }
	public string HashAlgorithmName { get; }
	public HashAlgorithmType HashAlgorithmType { get; }
	public int HashSize { get; }
	public ExchangeAlgorithmType ExchangeAlgorithmType { get; }
	public CipherMode CipherMode { get; }
	public short Code { get; }
	public string Name { get; }
	public bool IsExportable { get; }
	public byte KeyMaterialSize { get; }
	public int KeyBlockSize { get; }
	public byte ExpandedKeyMaterialSize { get; }
	public short EffectiveKeyBits { get; }
	public byte IvSize { get; }
	public Context Context { get; set; }

	// Methods

	// RVA: 0x1271310 Offset: 0x1271310 VA: 0x1271310
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBits, byte ivSize, byte blockSize) { }

	// RVA: 0x1271428 Offset: 0x1271428 VA: 0x1271428
	private static void .cctor() { }

	// RVA: 0x127148C Offset: 0x127148C VA: 0x127148C
	protected ICryptoTransform get_EncryptionCipher() { }

	// RVA: 0x1271494 Offset: 0x1271494 VA: 0x1271494
	protected ICryptoTransform get_DecryptionCipher() { }

	// RVA: 0x127149C Offset: 0x127149C VA: 0x127149C
	protected KeyedHashAlgorithm get_ClientHMAC() { }

	// RVA: 0x12714A4 Offset: 0x12714A4 VA: 0x12714A4
	protected KeyedHashAlgorithm get_ServerHMAC() { }

	// RVA: 0x12714AC Offset: 0x12714AC VA: 0x12714AC
	public CipherAlgorithmType get_CipherAlgorithmType() { }

	// RVA: 0x12714B4 Offset: 0x12714B4 VA: 0x12714B4
	public string get_HashAlgorithmName() { }

	// RVA: 0x1271524 Offset: 0x1271524 VA: 0x1271524
	public HashAlgorithmType get_HashAlgorithmType() { }

	// RVA: 0x1271404 Offset: 0x1271404 VA: 0x1271404
	public int get_HashSize() { }

	// RVA: 0x127152C Offset: 0x127152C VA: 0x127152C
	public ExchangeAlgorithmType get_ExchangeAlgorithmType() { }

	// RVA: 0x1271534 Offset: 0x1271534 VA: 0x1271534
	public CipherMode get_CipherMode() { }

	// RVA: 0x127153C Offset: 0x127153C VA: 0x127153C
	public short get_Code() { }

	// RVA: 0x1271544 Offset: 0x1271544 VA: 0x1271544
	public string get_Name() { }

	// RVA: 0x127154C Offset: 0x127154C VA: 0x127154C
	public bool get_IsExportable() { }

	// RVA: 0x1271554 Offset: 0x1271554 VA: 0x1271554
	public byte get_KeyMaterialSize() { }

	// RVA: 0x127155C Offset: 0x127155C VA: 0x127155C
	public int get_KeyBlockSize() { }

	// RVA: 0x1271564 Offset: 0x1271564 VA: 0x1271564
	public byte get_ExpandedKeyMaterialSize() { }

	// RVA: 0x127156C Offset: 0x127156C VA: 0x127156C
	public short get_EffectiveKeyBits() { }

	// RVA: 0x1271574 Offset: 0x1271574 VA: 0x1271574
	public byte get_IvSize() { }

	// RVA: 0x127157C Offset: 0x127157C VA: 0x127157C
	public Context get_Context() { }

	// RVA: 0x1271584 Offset: 0x1271584 VA: 0x1271584
	public void set_Context(Context value) { }

	// RVA: 0x127158C Offset: 0x127158C VA: 0x127158C
	internal void Write(byte[] array, int offset, short value) { }

	// RVA: 0x1271690 Offset: 0x1271690 VA: 0x1271690
	internal void Write(byte[] array, int offset, ulong value) { }

	// RVA: 0x12718B4 Offset: 0x12718B4 VA: 0x12718B4
	public void InitializeCipher() { }

	// RVA: 0x12720A8 Offset: 0x12720A8 VA: 0x12720A8
	public byte[] EncryptRecord(byte[] fragment, byte[] mac) { }

	// RVA: 0x12722D8 Offset: 0x12722D8 VA: 0x12722D8
	public void DecryptRecord(byte[] fragment, out byte[] dcrFragment, out byte[] dcrMAC) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void ComputeMasterSecret(byte[] preMasterSecret);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ComputeKeys();

	// RVA: 0x1272530 Offset: 0x1272530 VA: 0x1272530
	public byte[] CreatePremasterSecret() { }

	// RVA: 0x1272714 Offset: 0x1272714 VA: 0x1272714
	public byte[] PRF(byte[] secret, string label, byte[] data, int length) { }

	// RVA: 0x1272A24 Offset: 0x1272A24 VA: 0x1272A24
	public byte[] Expand(string hashName, byte[] secret, byte[] seed, int length) { }

	// RVA: 0x12718D8 Offset: 0x12718D8 VA: 0x12718D8
	private void createEncryptionCipher() { }

	// RVA: 0x1271CBC Offset: 0x1271CBC VA: 0x1271CBC
	private void createDecryptionCipher() { }
}

// Namespace: Mono.Security.Protocol.Tls
[DefaultMemberAttribute] // RVA: 0xC3FF0C Offset: 0xC3FF0C VA: 0xC3FF0C
internal sealed class CipherSuiteCollection : IEnumerable, ICollection, IList // TypeDefIndex: 1888
{
	// Fields
	private ArrayList cipherSuites; // 0x10
	private SecurityProtocolType protocol; // 0x18

	// Properties
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public CipherSuite Item { get; set; }
	public CipherSuite Item { get; set; }
	public CipherSuite Item { get; set; }
	public int Count { get; }
	public bool IsFixedSize { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x1272F3C Offset: 0x1272F3C VA: 0x1272F3C
	public void .ctor(SecurityProtocolType protocol) { }

	// RVA: 0x1272FB8 Offset: 0x1272FB8 VA: 0x1272FB8 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x12730B0 Offset: 0x12730B0 VA: 0x12730B0 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x1273204 Offset: 0x1273204 VA: 0x1273204 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x127323C Offset: 0x127323C VA: 0x127323C Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x1273274 Offset: 0x1273274 VA: 0x1273274 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x12732AC Offset: 0x12732AC VA: 0x12732AC Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x1273360 Offset: 0x1273360 VA: 0x1273360 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x1273414 Offset: 0x1273414 VA: 0x1273414 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x12734D0 Offset: 0x12734D0 VA: 0x12734D0 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x1273584 Offset: 0x1273584 VA: 0x1273584 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x12735C4 Offset: 0x12735C4 VA: 0x12735C4 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x1273678 Offset: 0x1273678 VA: 0x1273678
	public CipherSuite get_Item(string name) { }

	// RVA: 0x1273AB8 Offset: 0x1273AB8 VA: 0x1273AB8
	public void set_Item(string name, CipherSuite value) { }

	// RVA: 0x1272FBC Offset: 0x1272FBC VA: 0x1272FBC
	public CipherSuite get_Item(int index) { }

	// RVA: 0x12731B4 Offset: 0x12731B4 VA: 0x12731B4
	public void set_Item(int index, CipherSuite value) { }

	// RVA: 0x1273B0C Offset: 0x1273B0C VA: 0x1273B0C
	public CipherSuite get_Item(short code) { }

	// RVA: 0x1273F44 Offset: 0x1273F44 VA: 0x1273F44
	public void set_Item(short code, CipherSuite value) { }

	// RVA: 0x1273F98 Offset: 0x1273F98 VA: 0x1273F98 Slot: 5
	public int get_Count() { }

	// RVA: 0x1273FD0 Offset: 0x1273FD0 VA: 0x1273FD0 Slot: 9
	public bool get_IsFixedSize() { }

	// RVA: 0x1274008 Offset: 0x1274008 VA: 0x1274008 Slot: 10
	public bool get_IsReadOnly() { }

	// RVA: 0x1274040 Offset: 0x1274040 VA: 0x1274040 Slot: 8
	public void CopyTo(Array array, int index) { }

	// RVA: 0x1274090 Offset: 0x1274090 VA: 0x1274090 Slot: 14
	public void Clear() { }

	// RVA: 0x127377C Offset: 0x127377C VA: 0x127377C
	public int IndexOf(string name) { }

	// RVA: 0x1273C10 Offset: 0x1273C10 VA: 0x1273C10
	public int IndexOf(short code) { }

	// RVA: 0x1274188 Offset: 0x1274188 VA: 0x1274188
	public CipherSuite Add(short code, string name, CipherAlgorithmType cipherType, HashAlgorithmType hashType, ExchangeAlgorithmType exchangeType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x1274340 Offset: 0x1274340 VA: 0x1274340
	private TlsCipherSuite add(TlsCipherSuite cipherSuite) { }

	// RVA: 0x1274388 Offset: 0x1274388 VA: 0x1274388
	private SslCipherSuite add(SslCipherSuite cipherSuite) { }

	// RVA: 0x12740C8 Offset: 0x12740C8 VA: 0x12740C8
	private bool cultureAwareCompare(string strA, string strB) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class CipherSuiteFactory // TypeDefIndex: 1889
{
	// Methods

	// RVA: 0x12743D0 Offset: 0x12743D0 VA: 0x12743D0
	public void .ctor() { }

	// RVA: 0x12743D8 Offset: 0x12743D8 VA: 0x12743D8
	public static CipherSuiteCollection GetSupportedCiphers(SecurityProtocolType protocol) { }

	// RVA: 0x1274484 Offset: 0x1274484 VA: 0x1274484
	private static CipherSuiteCollection GetTls1SupportedCiphers() { }

	// RVA: 0x1274C14 Offset: 0x1274C14 VA: 0x1274C14
	private static CipherSuiteCollection GetSsl3SupportedCiphers() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientContext : Context // TypeDefIndex: 1890
{
	// Fields
	private SslClientStream sslStream; // 0xE0
	private short clientHelloProtocol; // 0xE8

	// Properties
	public SslClientStream SslStream { get; }
	public short ClientHelloProtocol { get; set; }

	// Methods

	// RVA: 0x127531C Offset: 0x127531C VA: 0x127531C
	public void .ctor(SslClientStream stream, SecurityProtocolType securityProtocolType, string targetHost, X509CertificateCollection clientCertificates) { }

	// RVA: 0x1275478 Offset: 0x1275478 VA: 0x1275478
	public SslClientStream get_SslStream() { }

	// RVA: 0x127270C Offset: 0x127270C VA: 0x127270C
	public short get_ClientHelloProtocol() { }

	// RVA: 0x1275480 Offset: 0x1275480 VA: 0x1275480
	public void set_ClientHelloProtocol(short value) { }

	// RVA: 0x1275488 Offset: 0x1275488 VA: 0x1275488 Slot: 4
	public override void Clear() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientRecordProtocol : RecordProtocol // TypeDefIndex: 1891
{
	// Methods

	// RVA: 0x1275548 Offset: 0x1275548 VA: 0x1275548
	public void .ctor(Stream innerStream, ClientContext context) { }

	// RVA: 0x12755C8 Offset: 0x12755C8 VA: 0x12755C8 Slot: 7
	public override HandshakeMessage GetMessage(HandshakeType type) { }

	// RVA: 0x12757C4 Offset: 0x12757C4 VA: 0x12757C4 Slot: 5
	protected override void ProcessHandshakeMessage(TlsStream handMsg) { }

	// RVA: 0x12755CC Offset: 0x12755CC VA: 0x12755CC
	private HandshakeMessage createClientHandshakeMessage(HandshakeType type) { }

	// RVA: 0x12759F8 Offset: 0x12759F8 VA: 0x12759F8
	private HandshakeMessage createServerHandshakeMessage(HandshakeType type, byte[] buffer) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionInfo : IDisposable // TypeDefIndex: 1892
{
	// Fields
	private const int DefaultValidityInterval = 180;
	private static readonly int ValidityInterval; // 0x0
	private bool disposed; // 0x10
	private DateTime validuntil; // 0x18
	private string host; // 0x28
	private byte[] sid; // 0x30
	private byte[] masterSecret; // 0x38

	// Properties
	public string HostName { get; }
	public byte[] Id { get; }
	public bool Valid { get; }

	// Methods

	// RVA: 0x12761F4 Offset: 0x12761F4 VA: 0x12761F4
	public void .ctor(string hostname, byte[] id) { }

	// RVA: 0x1276F54 Offset: 0x1276F54 VA: 0x1276F54
	private static void .cctor() { }

	// RVA: 0x1277038 Offset: 0x1277038 VA: 0x1277038 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1276230 Offset: 0x1276230 VA: 0x1276230
	public string get_HostName() { }

	// RVA: 0x12768C8 Offset: 0x12768C8 VA: 0x12768C8
	public byte[] get_Id() { }

	// RVA: 0x1276830 Offset: 0x1276830 VA: 0x1276830
	public bool get_Valid() { }

	// RVA: 0x1276C58 Offset: 0x1276C58 VA: 0x1276C58
	public void GetContext(Context context) { }

	// RVA: 0x1276E64 Offset: 0x1276E64 VA: 0x1276E64
	public void SetContext(Context context) { }

	// RVA: 0x1276238 Offset: 0x1276238 VA: 0x1276238
	public void KeepAlive() { }

	// RVA: 0x12762FC Offset: 0x12762FC VA: 0x12762FC Slot: 4
	public void Dispose() { }

	// RVA: 0x12770B0 Offset: 0x12770B0 VA: 0x12770B0
	private void Dispose(bool disposing) { }

	// RVA: 0x1277150 Offset: 0x1277150 VA: 0x1277150
	private void CheckDisposed() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionCache // TypeDefIndex: 1893
{
	// Fields
	private static Hashtable cache; // 0x0
	private static object locker; // 0x8

	// Methods

	// RVA: 0x1275DD0 Offset: 0x1275DD0 VA: 0x1275DD0
	public void .ctor() { }

	// RVA: 0x1275DD8 Offset: 0x1275DD8 VA: 0x1275DD8
	private static void .cctor() { }

	// RVA: 0x1275E6C Offset: 0x1275E6C VA: 0x1275E6C
	public static void Add(string host, byte[] id) { }

	// RVA: 0x1276328 Offset: 0x1276328 VA: 0x1276328
	public static byte[] FromHost(string host) { }

	// RVA: 0x12768D0 Offset: 0x12768D0 VA: 0x12768D0
	private static ClientSessionInfo FromContext(Context context, bool checkValidity) { }

	// RVA: 0x1276B34 Offset: 0x1276B34 VA: 0x1276B34
	public static bool SetContextInCache(Context context) { }

	// RVA: 0x1276D40 Offset: 0x1276D40 VA: 0x1276D40
	public static bool SetContextFromCache(Context context) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum ContentType // TypeDefIndex: 1894
{
	// Fields
	public byte value__; // 0x0
	public const ContentType ChangeCipherSpec = 20;
	public const ContentType Alert = 21;
	public const ContentType Handshake = 22;
	public const ContentType ApplicationData = 23;
}
