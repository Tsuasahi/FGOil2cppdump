	public byte[] GetBytes(byte encoding) { }

	// RVA: 0x27B7FBC Offset: 0x27B7FBC VA: 0x27B7FBC
	public byte[] GetBytes() { }

	// RVA: 0x27B7EF4 Offset: 0x27B7EF4 VA: 0x27B7EF4
	private byte SelectBestEncoding() { }
}

// Namespace: 
public class X520.Name : X520.AttributeTypeAndValue // TypeDefIndex: 1854
{
	// Methods

	// RVA: 0x2B9BC64 Offset: 0x2B9BC64 VA: 0x2B9BC64
	public void .ctor() { }
}

// Namespace: 
public class X520.CommonName : X520.AttributeTypeAndValue // TypeDefIndex: 1855
{
	// Methods

	// RVA: 0x2B9B994 Offset: 0x2B9B994 VA: 0x2B9B994
	public void .ctor() { }
}

// Namespace: 
public class X520.SerialNumber : X520.AttributeTypeAndValue // TypeDefIndex: 1856
{
	// Methods

	// RVA: 0x2B9BD78 Offset: 0x2B9BD78 VA: 0x2B9BD78
	public void .ctor() { }
}

// Namespace: 
public class X520.LocalityName : X520.AttributeTypeAndValue // TypeDefIndex: 1857
{
	// Methods

	// RVA: 0x2B9BC0C Offset: 0x2B9BC0C VA: 0x2B9BC0C
	public void .ctor() { }
}

// Namespace: 
public class X520.StateOrProvinceName : X520.AttributeTypeAndValue // TypeDefIndex: 1858
{
	// Methods

	// RVA: 0x2B9BDD4 Offset: 0x2B9BDD4 VA: 0x2B9BDD4
	public void .ctor() { }
}

// Namespace: 
public class X520.OrganizationName : X520.AttributeTypeAndValue // TypeDefIndex: 1859
{
	// Methods

	// RVA: 0x2B9BCC8 Offset: 0x2B9BCC8 VA: 0x2B9BCC8
	public void .ctor() { }
}

// Namespace: 
public class X520.OrganizationalUnitName : X520.AttributeTypeAndValue // TypeDefIndex: 1860
{
	// Methods

	// RVA: 0x2B9BD20 Offset: 0x2B9BD20 VA: 0x2B9BD20
	public void .ctor() { }
}

// Namespace: 
public class X520.EmailAddress : X520.AttributeTypeAndValue // TypeDefIndex: 1861
{
	// Methods

	// RVA: 0x2B9BB00 Offset: 0x2B9BB00 VA: 0x2B9BB00
	public void .ctor() { }
}

// Namespace: 
public class X520.DomainComponent : X520.AttributeTypeAndValue // TypeDefIndex: 1862
{
	// Methods

	// RVA: 0x2B9BAA4 Offset: 0x2B9BAA4 VA: 0x2B9BAA4
	public void .ctor() { }
}

// Namespace: 
public class X520.UserId : X520.AttributeTypeAndValue // TypeDefIndex: 1863
{
	// Methods

	// RVA: 0x2B9BEDC Offset: 0x2B9BEDC VA: 0x2B9BEDC
	public void .ctor() { }
}

// Namespace: 
public class X520.Oid : X520.AttributeTypeAndValue // TypeDefIndex: 1864
{
	// Methods

	// RVA: 0x2B9BCBC Offset: 0x2B9BCBC VA: 0x2B9BCBC
	public void .ctor(string oid) { }
}

// Namespace: 
public class X520.Title : X520.AttributeTypeAndValue // TypeDefIndex: 1865
{
	// Methods

	// RVA: 0x2B9BE84 Offset: 0x2B9BE84 VA: 0x2B9BE84
	public void .ctor() { }
}

// Namespace: 
public class X520.CountryName : X520.AttributeTypeAndValue // TypeDefIndex: 1866
{
	// Methods

	// RVA: 0x2B9B9EC Offset: 0x2B9B9EC VA: 0x2B9B9EC
	public void .ctor() { }
}

// Namespace: 
public class X520.DnQualifier : X520.AttributeTypeAndValue // TypeDefIndex: 1867
{
	// Methods

	// RVA: 0x2B9BA48 Offset: 0x2B9BA48 VA: 0x2B9BA48
	public void .ctor() { }
}

// Namespace: 
public class X520.Surname : X520.AttributeTypeAndValue // TypeDefIndex: 1868
{
	// Methods

	// RVA: 0x2B9BE2C Offset: 0x2B9BE2C VA: 0x2B9BE2C
	public void .ctor() { }
}

// Namespace: 
public class X520.GivenName : X520.AttributeTypeAndValue // TypeDefIndex: 1869
{
	// Methods

	// RVA: 0x2B9BB5C Offset: 0x2B9BB5C VA: 0x2B9BB5C
	public void .ctor() { }
}

// Namespace: 
public class X520.Initial : X520.AttributeTypeAndValue // TypeDefIndex: 1870
{
	// Methods

	// RVA: 0x2B9BBB4 Offset: 0x2B9BBB4 VA: 0x2B9BBB4
	public void .ctor() { }
}

// Namespace: Mono.Security.X509.Extensions
public class AuthorityKeyIdentifierExtension : X509Extension // TypeDefIndex: 1871
{
	// Fields
	private byte[] aki; // 0x28

	// Properties
	public override string Name { get; }
	public byte[] Identifier { get; }

	// Methods

	// RVA: 0x22CF5A4 Offset: 0x22CF5A4 VA: 0x22CF5A4
	public void .ctor(X509Extension extension) { }

	// RVA: 0x22CF5AC Offset: 0x22CF5AC VA: 0x22CF5AC Slot: 4
	protected override void Decode() { }

	// RVA: 0x22CF728 Offset: 0x22CF728 VA: 0x22CF728 Slot: 6
	public override string get_Name() { }

	// RVA: 0x22CF770 Offset: 0x22CF770 VA: 0x22CF770
	public byte[] get_Identifier() { }

	// RVA: 0x22CF83C Offset: 0x22CF83C VA: 0x22CF83C Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class BasicConstraintsExtension : X509Extension // TypeDefIndex: 1872
{
	// Fields
	private bool cA; // 0x28
	private int pathLenConstraint; // 0x2C

	// Properties
	public bool CertificateAuthority { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x22CF9F8 Offset: 0x22CF9F8 VA: 0x22CF9F8
	public void .ctor(X509Extension extension) { }

	// RVA: 0x22CFA00 Offset: 0x22CFA00 VA: 0x22CFA00 Slot: 4
	protected override void Decode() { }

	// RVA: 0x22CFBC8 Offset: 0x22CFBC8 VA: 0x22CFBC8 Slot: 5
	protected override void Encode() { }

	// RVA: 0x22CFD24 Offset: 0x22CFD24 VA: 0x22CFD24
	public bool get_CertificateAuthority() { }

	// RVA: 0x22CFD2C Offset: 0x22CFD2C VA: 0x22CFD2C Slot: 6
	public override string get_Name() { }

	// RVA: 0x22CFD74 Offset: 0x22CFD74 VA: 0x22CFD74 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class ExtendedKeyUsageExtension : X509Extension // TypeDefIndex: 1873
{
	// Fields
	private ArrayList keyPurpose; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xBD3F2C Offset: 0xBD3F2C VA: 0xBD3F2C
	private static Dictionary<string, int> <>f__switch$map14; // 0x0

	// Properties
	public ArrayList KeyPurpose { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x22B9934 Offset: 0x22B9934 VA: 0x22B9934
	public void .ctor(X509Extension extension) { }

	// RVA: 0x22CFF64 Offset: 0x22CFF64 VA: 0x22CFF64 Slot: 4
	protected override void Decode() { }

	// RVA: 0x22D00FC Offset: 0x22D00FC VA: 0x22D00FC Slot: 5
	protected override void Encode() { }

	// RVA: 0x22B9A14 Offset: 0x22B9A14 VA: 0x22B9A14
	public ArrayList get_KeyPurpose() { }

	// RVA: 0x22D0428 Offset: 0x22D0428 VA: 0x22D0428 Slot: 6
	public override string get_Name() { }

	// RVA: 0x22D0470 Offset: 0x22D0470 VA: 0x22D0470 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
internal class GeneralNames // TypeDefIndex: 1874
{
	// Fields
	private ArrayList rfc822Name; // 0x10
	private ArrayList dnsName; // 0x18
	private ArrayList directoryNames; // 0x20
	private ArrayList uris; // 0x28
	private ArrayList ipAddr; // 0x30

	// Properties
	public string[] DNSNames { get; }
	public string[] IPAddresses { get; }

	// Methods

	// RVA: 0x22D0A94 Offset: 0x22D0A94 VA: 0x22D0A94
	public void .ctor(ASN1 sequence) { }

	// RVA: 0x22D0F00 Offset: 0x22D0F00 VA: 0x22D0F00
	public string[] get_DNSNames() { }

	// RVA: 0x22D102C Offset: 0x22D102C VA: 0x22D102C
	public string[] get_IPAddresses() { }

	// RVA: 0x22D1158 Offset: 0x22D1158 VA: 0x22D1158 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
[FlagsAttribute] // RVA: 0xBD3DC4 Offset: 0xBD3DC4 VA: 0xBD3DC4
public enum KeyUsages // TypeDefIndex: 1875
{
	// Fields
	public int value__; // 0x0
	public const KeyUsages digitalSignature = 128;
	public const KeyUsages nonRepudiation = 64;
	public const KeyUsages keyEncipherment = 32;
	public const KeyUsages dataEncipherment = 16;
	public const KeyUsages keyAgreement = 8;
	public const KeyUsages keyCertSign = 4;
	public const KeyUsages cRLSign = 2;
	public const KeyUsages encipherOnly = 1;
	public const KeyUsages decipherOnly = 2048;
	public const KeyUsages none = 0;
}

// Namespace: Mono.Security.X509.Extensions
public class KeyUsageExtension : X509Extension // TypeDefIndex: 1876
{
	// Fields
	private int kubits; // 0x28

	// Properties
	public override string Name { get; }

	// Methods

	// RVA: 0x22B992C Offset: 0x22B992C VA: 0x22B992C
	public void .ctor(X509Extension extension) { }

	// RVA: 0x22D203C Offset: 0x22D203C VA: 0x22D203C Slot: 4
	protected override void Decode() { }

	// RVA: 0x22D21D0 Offset: 0x22D21D0 VA: 0x22D21D0 Slot: 5
	protected override void Encode() { }

	// RVA: 0x22D2418 Offset: 0x22D2418 VA: 0x22D2418 Slot: 6
	public override string get_Name() { }

	// RVA: 0x22B993C Offset: 0x22B993C VA: 0x22B993C
	public bool Support(KeyUsages usage) { }

	// RVA: 0x22D2460 Offset: 0x22D2460 VA: 0x22D2460 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class NetscapeCertTypeExtension : X509Extension // TypeDefIndex: 1877
{
	// Fields
	private int ctbits; // 0x28

	// Properties
	public override string Name { get; }

	// Methods

	// RVA: 0x2797D30 Offset: 0x2797D30 VA: 0x2797D30
	public void .ctor(X509Extension extension) { }

	// RVA: 0x2797EC8 Offset: 0x2797EC8 VA: 0x2797EC8 Slot: 4
	protected override void Decode() { }

	// RVA: 0x279805C Offset: 0x279805C VA: 0x279805C Slot: 6
	public override string get_Name() { }

	// RVA: 0x27980A4 Offset: 0x27980A4 VA: 0x27980A4
	public bool Support(NetscapeCertTypeExtension.CertTypes usage) { }

	// RVA: 0x279817C Offset: 0x279817C VA: 0x279817C Slot: 3
	public override string ToString() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xBD3DD4 Offset: 0xBD3DD4 VA: 0xBD3DD4
public enum NetscapeCertTypeExtension.CertTypes // TypeDefIndex: 1878
{
	// Fields
	public int value__; // 0x0
	public const NetscapeCertTypeExtension.CertTypes SslClient = 128;
	public const NetscapeCertTypeExtension.CertTypes SslServer = 64;
	public const NetscapeCertTypeExtension.CertTypes Smime = 32;
	public const NetscapeCertTypeExtension.CertTypes ObjectSigning = 16;
	public const NetscapeCertTypeExtension.CertTypes SslCA = 4;
	public const NetscapeCertTypeExtension.CertTypes SmimeCA = 2;
	public const NetscapeCertTypeExtension.CertTypes ObjectSigningCA = 1;
}

// Namespace: Mono.Security.X509.Extensions
public class SubjectAltNameExtension : X509Extension // TypeDefIndex: 1879
{
	// Fields
	private GeneralNames _names; // 0x28

	// Properties
	public override string Name { get; }
	public string[] DNSNames { get; }
	public string[] IPAddresses { get; }

	// Methods

	// RVA: 0x27985E8 Offset: 0x27985E8 VA: 0x27985E8
	public void .ctor(X509Extension extension) { }

	// RVA: 0x27985EC Offset: 0x27985EC VA: 0x27985EC Slot: 4
	protected override void Decode() { }

	// RVA: 0x2798704 Offset: 0x2798704 VA: 0x2798704 Slot: 6
	public override string get_Name() { }

	// RVA: 0x279874C Offset: 0x279874C VA: 0x279874C
	public string[] get_DNSNames() { }

	// RVA: 0x279877C Offset: 0x279877C VA: 0x279877C
	public string[] get_IPAddresses() { }

	// RVA: 0x27987AC Offset: 0x27987AC VA: 0x27987AC Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509.Extensions
public class SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1880
{
	// Fields
	private byte[] ski; // 0x28

	// Properties
	public override string Name { get; }
	public byte[] Identifier { get; }

	// Methods

	// RVA: 0x27987E0 Offset: 0x27987E0 VA: 0x27987E0
	public void .ctor(X509Extension extension) { }

	// RVA: 0x27987E4 Offset: 0x27987E4 VA: 0x27987E4 Slot: 4
	protected override void Decode() { }

	// RVA: 0x27988F4 Offset: 0x27988F4 VA: 0x27988F4 Slot: 6
	public override string get_Name() { }

	// RVA: 0x279893C Offset: 0x279893C VA: 0x279893C
	public byte[] get_Identifier() { }

	// RVA: 0x2798A08 Offset: 0x2798A08 VA: 0x2798A08 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.Cryptography
internal class HMAC : KeyedHashAlgorithm // TypeDefIndex: 1881
{
	// Fields
	private HashAlgorithm hash; // 0x30
	private bool hashing; // 0x38
	private byte[] innerPad; // 0x40
	private byte[] outerPad; // 0x48

	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x25ECF84 Offset: 0x25ECF84 VA: 0x25ECF84
	public void .ctor(string hashName, byte[] rgbKey) { }

	// RVA: 0x25ED110 Offset: 0x25ED110 VA: 0x25ED110 Slot: 21
	public override byte[] get_Key() { }

	// RVA: 0x25ED1E8 Offset: 0x25ED1E8 VA: 0x25ED1E8 Slot: 22
	public override void set_Key(byte[] value) { }

	// RVA: 0x25ED570 Offset: 0x25ED570 VA: 0x25ED570 Slot: 17
	public override void Initialize() { }

	// RVA: 0x25ED5BC Offset: 0x25ED5BC VA: 0x25ED5BC Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x25ED7B0 Offset: 0x25ED7B0 VA: 0x25ED7B0 Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x25ED348 Offset: 0x25ED348 VA: 0x25ED348
	private void initializePad() { }
}

// Namespace: Mono.Security.Cryptography
internal class MD5SHA1 : HashAlgorithm // TypeDefIndex: 1882
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private bool hashing; // 0x38

	// Methods

	// RVA: 0x25EFD48 Offset: 0x25EFD48 VA: 0x25EFD48
	public void .ctor() { }

	// RVA: 0x25EFDE0 Offset: 0x25EFDE0 VA: 0x25EFDE0 Slot: 17
	public override void Initialize() { }

	// RVA: 0x25EFE48 Offset: 0x25EFE48 VA: 0x25EFE48 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x25EFF9C Offset: 0x25EFF9C VA: 0x25EFF9C Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x25F0040 Offset: 0x25F0040 VA: 0x25F0040
	public byte[] CreateSignature(RSA rsa) { }

	// RVA: 0x25F014C Offset: 0x25F014C VA: 0x25F014C
	public bool VerifySignature(RSA rsa, byte[] rgbSignature) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertLevel // TypeDefIndex: 1883
{
	// Fields
	public byte value__; // 0x0
	public const AlertLevel Warning = 1;
	public const AlertLevel Fatal = 2;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertDescription // TypeDefIndex: 1884
{
	// Fields
	public byte value__; // 0x0
	public const AlertDescription CloseNotify = 0;
	public const AlertDescription UnexpectedMessage = 10;
	public const AlertDescription BadRecordMAC = 20;
	public const AlertDescription DecryptionFailed = 21;
	public const AlertDescription RecordOverflow = 22;
	public const AlertDescription DecompressionFailiure = 30;
	public const AlertDescription HandshakeFailiure = 40;
	public const AlertDescription NoCertificate = 41;
	public const AlertDescription BadCertificate = 42;
	public const AlertDescription UnsupportedCertificate = 43;
	public const AlertDescription CertificateRevoked = 44;
	public const AlertDescription CertificateExpired = 45;
	public const AlertDescription CertificateUnknown = 46;
	public const AlertDescription IlegalParameter = 47;
	public const AlertDescription UnknownCA = 48;
	public const AlertDescription AccessDenied = 49;
	public const AlertDescription DecodeError = 50;
	public const AlertDescription DecryptError = 51;
	public const AlertDescription ExportRestriction = 60;
	public const AlertDescription ProtocolVersion = 70;
	public const AlertDescription InsuficientSecurity = 71;
	public const AlertDescription InternalError = 80;
	public const AlertDescription UserCancelled = 90;
	public const AlertDescription NoRenegotiation = 100;
}

// Namespace: Mono.Security.Protocol.Tls
internal class Alert // TypeDefIndex: 1885
{
	// Fields
	private AlertLevel level; // 0x10
	private AlertDescription description; // 0x11

	// Properties
	public AlertLevel Level { get; }
	public AlertDescription Description { get; }
	public string Message { get; }
	public bool IsWarning { get; }
	public bool IsCloseNotify { get; }

	// Methods

	// RVA: 0x25F5834 Offset: 0x25F5834 VA: 0x25F5834
	public void .ctor(AlertDescription description) { }

	// RVA: 0x25F590C Offset: 0x25F590C VA: 0x25F590C
	public void .ctor(AlertLevel level, AlertDescription description) { }

	// RVA: 0x25F5948 Offset: 0x25F5948 VA: 0x25F5948
	public AlertLevel get_Level() { }

	// RVA: 0x25F5950 Offset: 0x25F5950 VA: 0x25F5950
	public AlertDescription get_Description() { }

	// RVA: 0x25F5958 Offset: 0x25F5958 VA: 0x25F5958
	public string get_Message() { }

	// RVA: 0x25F59E8 Offset: 0x25F59E8 VA: 0x25F59E8
	public bool get_IsWarning() { }

	// RVA: 0x25F59F8 Offset: 0x25F59F8 VA: 0x25F59F8
	public bool get_IsCloseNotify() { }

	// RVA: 0x25F58B4 Offset: 0x25F58B4 VA: 0x25F58B4
	private void inferAlertLevel() { }

	// RVA: 0x25F59A0 Offset: 0x25F59A0 VA: 0x25F59A0
	public static string GetAlertMessage(AlertDescription description) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum CipherAlgorithmType // TypeDefIndex: 1886
{
	// Fields
	public int value__; // 0x0
	public const CipherAlgorithmType Des = 0;
	public const CipherAlgorithmType None = 1;
	public const CipherAlgorithmType Rc2 = 2;
	public const CipherAlgorithmType Rc4 = 3;
	public const CipherAlgorithmType Rijndael = 4;
	public const CipherAlgorithmType SkipJack = 5;
	public const CipherAlgorithmType TripleDes = 6;
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class CipherSuite // TypeDefIndex: 1887
{
	// Fields
	public static byte[] EmptyArray; // 0x0
	private short code; // 0x10
	private string name; // 0x18
	private CipherAlgorithmType cipherAlgorithmType; // 0x20
	private HashAlgorithmType hashAlgorithmType; // 0x24
	private ExchangeAlgorithmType exchangeAlgorithmType; // 0x28
	private bool isExportable; // 0x2C
	private CipherMode cipherMode; // 0x30
	private byte keyMaterialSize; // 0x34
	private int keyBlockSize; // 0x38
	private byte expandedKeyMaterialSize; // 0x3C
	private short effectiveKeyBits; // 0x3E
	private byte ivSize; // 0x40
	private byte blockSize; // 0x41
	private Context context; // 0x48
	private SymmetricAlgorithm encryptionAlgorithm; // 0x50
	private ICryptoTransform encryptionCipher; // 0x58
	private SymmetricAlgorithm decryptionAlgorithm; // 0x60
	private ICryptoTransform decryptionCipher; // 0x68
	private KeyedHashAlgorithm clientHMAC; // 0x70
	private KeyedHashAlgorithm serverHMAC; // 0x78

	// Properties
	protected ICryptoTransform EncryptionCipher { get; }
	protected ICryptoTransform DecryptionCipher { get; }
	protected KeyedHashAlgorithm ClientHMAC { get; }
	protected KeyedHashAlgorithm ServerHMAC { get; }
	public CipherAlgorithmType CipherAlgorithmType { get; }
	public string HashAlgorithmName { get; }
	public HashAlgorithmType HashAlgorithmType { get; }
	public int HashSize { get; }
	public ExchangeAlgorithmType ExchangeAlgorithmType { get; }
	public CipherMode CipherMode { get; }
	public short Code { get; }
	public string Name { get; }
	public bool IsExportable { get; }
	public byte KeyMaterialSize { get; }
	public int KeyBlockSize { get; }
	public byte ExpandedKeyMaterialSize { get; }
	public short EffectiveKeyBits { get; }
	public byte IvSize { get; }
	public Context Context { get; set; }

	// Methods

	// RVA: 0x25F66A4 Offset: 0x25F66A4 VA: 0x25F66A4
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBits, byte ivSize, byte blockSize) { }

	// RVA: 0x25F67BC Offset: 0x25F67BC VA: 0x25F67BC
	private static void .cctor() { }

	// RVA: 0x25F6820 Offset: 0x25F6820 VA: 0x25F6820
	protected ICryptoTransform get_EncryptionCipher() { }

	// RVA: 0x25F6828 Offset: 0x25F6828 VA: 0x25F6828
	protected ICryptoTransform get_DecryptionCipher() { }

	// RVA: 0x25F6830 Offset: 0x25F6830 VA: 0x25F6830
	protected KeyedHashAlgorithm get_ClientHMAC() { }

	// RVA: 0x25F6838 Offset: 0x25F6838 VA: 0x25F6838
	protected KeyedHashAlgorithm get_ServerHMAC() { }

	// RVA: 0x25F6840 Offset: 0x25F6840 VA: 0x25F6840
	public CipherAlgorithmType get_CipherAlgorithmType() { }

	// RVA: 0x25F6848 Offset: 0x25F6848 VA: 0x25F6848
	public string get_HashAlgorithmName() { }

	// RVA: 0x25F68B8 Offset: 0x25F68B8 VA: 0x25F68B8
	public HashAlgorithmType get_HashAlgorithmType() { }

	// RVA: 0x25F6798 Offset: 0x25F6798 VA: 0x25F6798
	public int get_HashSize() { }

	// RVA: 0x25F68C0 Offset: 0x25F68C0 VA: 0x25F68C0
	public ExchangeAlgorithmType get_ExchangeAlgorithmType() { }

	// RVA: 0x25F68C8 Offset: 0x25F68C8 VA: 0x25F68C8
	public CipherMode get_CipherMode() { }

	// RVA: 0x25F68D0 Offset: 0x25F68D0 VA: 0x25F68D0
	public short get_Code() { }

	// RVA: 0x25F68D8 Offset: 0x25F68D8 VA: 0x25F68D8
	public string get_Name() { }

	// RVA: 0x25F68E0 Offset: 0x25F68E0 VA: 0x25F68E0
	public bool get_IsExportable() { }

	// RVA: 0x25F68E8 Offset: 0x25F68E8 VA: 0x25F68E8
	public byte get_KeyMaterialSize() { }

	// RVA: 0x25F68F0 Offset: 0x25F68F0 VA: 0x25F68F0
	public int get_KeyBlockSize() { }

	// RVA: 0x25F68F8 Offset: 0x25F68F8 VA: 0x25F68F8
	public byte get_ExpandedKeyMaterialSize() { }

	// RVA: 0x25F6900 Offset: 0x25F6900 VA: 0x25F6900
	public short get_EffectiveKeyBits() { }

	// RVA: 0x25F6908 Offset: 0x25F6908 VA: 0x25F6908
	public byte get_IvSize() { }

	// RVA: 0x25F6910 Offset: 0x25F6910 VA: 0x25F6910
	public Context get_Context() { }

	// RVA: 0x25F6918 Offset: 0x25F6918 VA: 0x25F6918
	public void set_Context(Context value) { }

	// RVA: 0x25F6920 Offset: 0x25F6920 VA: 0x25F6920
	internal void Write(byte[] array, int offset, short value) { }

	// RVA: 0x25F6A24 Offset: 0x25F6A24 VA: 0x25F6A24
	internal void Write(byte[] array, int offset, ulong value) { }

	// RVA: 0x25F6C48 Offset: 0x25F6C48 VA: 0x25F6C48
	public void InitializeCipher() { }

	// RVA: 0x25F743C Offset: 0x25F743C VA: 0x25F743C
	public byte[] EncryptRecord(byte[] fragment, byte[] mac) { }

	// RVA: 0x25F766C Offset: 0x25F766C VA: 0x25F766C
	public void DecryptRecord(byte[] fragment, out byte[] dcrFragment, out byte[] dcrMAC) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void ComputeMasterSecret(byte[] preMasterSecret);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ComputeKeys();

	// RVA: 0x25F78C4 Offset: 0x25F78C4 VA: 0x25F78C4
	public byte[] CreatePremasterSecret() { }

	// RVA: 0x25F7AA8 Offset: 0x25F7AA8 VA: 0x25F7AA8
	public byte[] PRF(byte[] secret, string label, byte[] data, int length) { }

	// RVA: 0x25F7DB8 Offset: 0x25F7DB8 VA: 0x25F7DB8
	public byte[] Expand(string hashName, byte[] secret, byte[] seed, int length) { }

	// RVA: 0x25F6C6C Offset: 0x25F6C6C VA: 0x25F6C6C
	private void createEncryptionCipher() { }

	// RVA: 0x25F7050 Offset: 0x25F7050 VA: 0x25F7050
	private void createDecryptionCipher() { }
}

// Namespace: Mono.Security.Protocol.Tls
[DefaultMemberAttribute] // RVA: 0xBD3DE4 Offset: 0xBD3DE4 VA: 0xBD3DE4
internal sealed class CipherSuiteCollection : IEnumerable, ICollection, IList // TypeDefIndex: 1888
{
	// Fields
	private ArrayList cipherSuites; // 0x10
	private SecurityProtocolType protocol; // 0x18

	// Properties
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public CipherSuite Item { get; set; }
	public CipherSuite Item { get; set; }
	public CipherSuite Item { get; set; }
	public int Count { get; }
	public bool IsFixedSize { get; }
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x25F82D0 Offset: 0x25F82D0 VA: 0x25F82D0
	public void .ctor(SecurityProtocolType protocol) { }

	// RVA: 0x25F834C Offset: 0x25F834C VA: 0x25F834C Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x25F8444 Offset: 0x25F8444 VA: 0x25F8444 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x25F8598 Offset: 0x25F8598 VA: 0x25F8598 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x25F85D0 Offset: 0x25F85D0 VA: 0x25F85D0 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x25F8608 Offset: 0x25F8608 VA: 0x25F8608 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x25F8640 Offset: 0x25F8640 VA: 0x25F8640 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x25F86F4 Offset: 0x25F86F4 VA: 0x25F86F4 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x25F87A8 Offset: 0x25F87A8 VA: 0x25F87A8 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x25F8864 Offset: 0x25F8864 VA: 0x25F8864 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x25F8918 Offset: 0x25F8918 VA: 0x25F8918 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x25F8958 Offset: 0x25F8958 VA: 0x25F8958 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x25F8A0C Offset: 0x25F8A0C VA: 0x25F8A0C
	public CipherSuite get_Item(string name) { }

	// RVA: 0x25F8E4C Offset: 0x25F8E4C VA: 0x25F8E4C
	public void set_Item(string name, CipherSuite value) { }

	// RVA: 0x25F8350 Offset: 0x25F8350 VA: 0x25F8350
	public CipherSuite get_Item(int index) { }

	// RVA: 0x25F8548 Offset: 0x25F8548 VA: 0x25F8548
	public void set_Item(int index, CipherSuite value) { }

	// RVA: 0x25F8EA0 Offset: 0x25F8EA0 VA: 0x25F8EA0
	public CipherSuite get_Item(short code) { }

	// RVA: 0x25F92D8 Offset: 0x25F92D8 VA: 0x25F92D8
	public void set_Item(short code, CipherSuite value) { }

	// RVA: 0x25F932C Offset: 0x25F932C VA: 0x25F932C Slot: 5
	public int get_Count() { }

	// RVA: 0x25F9364 Offset: 0x25F9364 VA: 0x25F9364 Slot: 9
	public bool get_IsFixedSize() { }

	// RVA: 0x25F939C Offset: 0x25F939C VA: 0x25F939C Slot: 10
	public bool get_IsReadOnly() { }

	// RVA: 0x25F93D4 Offset: 0x25F93D4 VA: 0x25F93D4 Slot: 8
	public void CopyTo(Array array, int index) { }

	// RVA: 0x25F9424 Offset: 0x25F9424 VA: 0x25F9424 Slot: 14
	public void Clear() { }

	// RVA: 0x25F8B10 Offset: 0x25F8B10 VA: 0x25F8B10
	public int IndexOf(string name) { }

	// RVA: 0x25F8FA4 Offset: 0x25F8FA4 VA: 0x25F8FA4
	public int IndexOf(short code) { }

	// RVA: 0x25F951C Offset: 0x25F951C VA: 0x25F951C
	public CipherSuite Add(short code, string name, CipherAlgorithmType cipherType, HashAlgorithmType hashType, ExchangeAlgorithmType exchangeType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x25F96D4 Offset: 0x25F96D4 VA: 0x25F96D4
	private TlsCipherSuite add(TlsCipherSuite cipherSuite) { }

	// RVA: 0x25F971C Offset: 0x25F971C VA: 0x25F971C
	private SslCipherSuite add(SslCipherSuite cipherSuite) { }

	// RVA: 0x25F945C Offset: 0x25F945C VA: 0x25F945C
	private bool cultureAwareCompare(string strA, string strB) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class CipherSuiteFactory // TypeDefIndex: 1889
{
	// Methods

	// RVA: 0x25F9764 Offset: 0x25F9764 VA: 0x25F9764
	public void .ctor() { }

	// RVA: 0x25F976C Offset: 0x25F976C VA: 0x25F976C
	public static CipherSuiteCollection GetSupportedCiphers(SecurityProtocolType protocol) { }

	// RVA: 0x25F9818 Offset: 0x25F9818 VA: 0x25F9818
	private static CipherSuiteCollection GetTls1SupportedCiphers() { }

	// RVA: 0x25F9FA8 Offset: 0x25F9FA8 VA: 0x25F9FA8
	private static CipherSuiteCollection GetSsl3SupportedCiphers() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientContext : Context // TypeDefIndex: 1890
{
	// Fields
	private SslClientStream sslStream; // 0xE0
	private short clientHelloProtocol; // 0xE8

	// Properties
	public SslClientStream SslStream { get; }
	public short ClientHelloProtocol { get; set; }

	// Methods

	// RVA: 0x25FA6B0 Offset: 0x25FA6B0 VA: 0x25FA6B0
	public void .ctor(SslClientStream stream, SecurityProtocolType securityProtocolType, string targetHost, X509CertificateCollection clientCertificates) { }

	// RVA: 0x25FA80C Offset: 0x25FA80C VA: 0x25FA80C
	public SslClientStream get_SslStream() { }

	// RVA: 0x25F7AA0 Offset: 0x25F7AA0 VA: 0x25F7AA0
	public short get_ClientHelloProtocol() { }

	// RVA: 0x25FA814 Offset: 0x25FA814 VA: 0x25FA814
	public void set_ClientHelloProtocol(short value) { }

	// RVA: 0x25FA81C Offset: 0x25FA81C VA: 0x25FA81C Slot: 4
	public override void Clear() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientRecordProtocol : RecordProtocol // TypeDefIndex: 1891
{
	// Methods

	// RVA: 0x25FA8DC Offset: 0x25FA8DC VA: 0x25FA8DC
	public void .ctor(Stream innerStream, ClientContext context) { }

	// RVA: 0x25FA95C Offset: 0x25FA95C VA: 0x25FA95C Slot: 7
	public override HandshakeMessage GetMessage(HandshakeType type) { }

	// RVA: 0x25FAB58 Offset: 0x25FAB58 VA: 0x25FAB58 Slot: 5
	protected override void ProcessHandshakeMessage(TlsStream handMsg) { }

	// RVA: 0x25FA960 Offset: 0x25FA960 VA: 0x25FA960
	private HandshakeMessage createClientHandshakeMessage(HandshakeType type) { }

	// RVA: 0x25FAD8C Offset: 0x25FAD8C VA: 0x25FAD8C
	private HandshakeMessage createServerHandshakeMessage(HandshakeType type, byte[] buffer) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionInfo : IDisposable // TypeDefIndex: 1892
{
	// Fields
	private const int DefaultValidityInterval = 180;
	private static readonly int ValidityInterval; // 0x0
	private bool disposed; // 0x10
	private DateTime validuntil; // 0x18
	private string host; // 0x28
	private byte[] sid; // 0x30
	private byte[] masterSecret; // 0x38

	// Properties
	public string HostName { get; }
	public byte[] Id { get; }
	public bool Valid { get; }

	// Methods

	// RVA: 0x25FB588 Offset: 0x25FB588 VA: 0x25FB588
	public void .ctor(string hostname, byte[] id) { }

	// RVA: 0x25FC2E8 Offset: 0x25FC2E8 VA: 0x25FC2E8
	private static void .cctor() { }

	// RVA: 0x25FC3CC Offset: 0x25FC3CC VA: 0x25FC3CC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25FB5C4 Offset: 0x25FB5C4 VA: 0x25FB5C4
	public string get_HostName() { }

	// RVA: 0x25FBC5C Offset: 0x25FBC5C VA: 0x25FBC5C
	public byte[] get_Id() { }

	// RVA: 0x25FBBC4 Offset: 0x25FBBC4 VA: 0x25FBBC4
	public bool get_Valid() { }

	// RVA: 0x25FBFEC Offset: 0x25FBFEC VA: 0x25FBFEC
	public void GetContext(Context context) { }

	// RVA: 0x25FC1F8 Offset: 0x25FC1F8 VA: 0x25FC1F8
	public void SetContext(Context context) { }

	// RVA: 0x25FB5CC Offset: 0x25FB5CC VA: 0x25FB5CC
	public void KeepAlive() { }

	// RVA: 0x25FB690 Offset: 0x25FB690 VA: 0x25FB690 Slot: 4
	public void Dispose() { }

	// RVA: 0x25FC444 Offset: 0x25FC444 VA: 0x25FC444
	private void Dispose(bool disposing) { }

	// RVA: 0x25FC4E4 Offset: 0x25FC4E4 VA: 0x25FC4E4
	private void CheckDisposed() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionCache // TypeDefIndex: 1893
{
	// Fields
	private static Hashtable cache; // 0x0
	private static object locker; // 0x8

	// Methods

