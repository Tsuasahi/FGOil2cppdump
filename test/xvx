	// RVA: 0x2B79264 Offset: 0x2B79264 VA: 0x2B79264 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B2B4 Offset: 0xD4B2B4 VA: 0xD4B2B4
	// RVA: 0x2B793A4 Offset: 0x2B793A4 VA: 0x2B793A4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B2C4 Offset: 0xD4B2C4 VA: 0xD4B2C4
	// RVA: 0x2B793AC Offset: 0x2B793AC VA: 0x2B793AC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B2D4 Offset: 0xD4B2D4 VA: 0xD4B2D4
	// RVA: 0x2B793B4 Offset: 0x2B793B4 VA: 0x2B793B4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B2E4 Offset: 0xD4B2E4 VA: 0xD4B2E4
	// RVA: 0x2B793C8 Offset: 0x2B793C8 VA: 0x2B793C8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC97C4C Offset: 0xC97C4C VA: 0xC97C4C
[AddComponentMenu] // RVA: 0xC97C4C Offset: 0xC97C4C VA: 0xC97C4C
public class LanguageSelection : MonoBehaviour // TypeDefIndex: 12009
{
	// Fields
	private UIPopupList mList; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCF0CE8 Offset: 0xCF0CE8 VA: 0xCF0CE8
	private static EventDelegate.Callback <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x17287D8 Offset: 0x17287D8 VA: 0x17287D8
	public void .ctor() { }

	// RVA: 0x17287E0 Offset: 0x17287E0 VA: 0x17287E0
	private void Awake() { }

	// RVA: 0x1728A58 Offset: 0x1728A58 VA: 0x1728A58
	private void Start() { }

	// RVA: 0x172883C Offset: 0x172883C VA: 0x172883C
	public void Refresh() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43A74 Offset: 0xD43A74 VA: 0xD43A74
	// RVA: 0x1728B3C Offset: 0x1728B3C VA: 0x1728B3C
	private static void <Start>m__0() { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC97CD4 Offset: 0xC97CD4 VA: 0xC97CD4
[AddComponentMenu] // RVA: 0xC97CD4 Offset: 0xC97CD4 VA: 0xC97CD4
public class TypewriterEffect : MonoBehaviour // TypeDefIndex: 12010
{
	// Fields
	public static TypewriterEffect current; // 0x0
	public int charsPerSecond; // 0x18
	public float fadeInTime; // 0x1C
	public float delayOnPeriod; // 0x20
	public float delayOnNewLine; // 0x24
	public UIScrollView scrollView; // 0x28
	public bool keepFullDimensions; // 0x30
	public List<EventDelegate> onFinished; // 0x38
	private UILabel mLabel; // 0x40
	private string mFullText; // 0x48
	private int mCurrentOffset; // 0x50
	private float mNextChar; // 0x54
	private bool mReset; // 0x58
	private bool mActive; // 0x59
	private BetterList<TypewriterEffect.FadeEntry> mFade; // 0x60

	// Properties
	public bool isActive { get; }

	// Methods

	// RVA: 0x249CFF8 Offset: 0x249CFF8 VA: 0x249CFF8
	public void .ctor() { }

	// RVA: 0x249D0D0 Offset: 0x249D0D0 VA: 0x249D0D0
	public bool get_isActive() { }

	// RVA: 0x249D0D8 Offset: 0x249D0D8 VA: 0x249D0D8
	public void ResetToBeginning() { }

	// RVA: 0x249D108 Offset: 0x249D108 VA: 0x249D108
	public void Finish() { }

	// RVA: 0x249DCC8 Offset: 0x249DCC8 VA: 0x249DCC8
	private void OnEnable() { }

	// RVA: 0x249D274 Offset: 0x249D274 VA: 0x249D274
	private void Update() { }
}

// Namespace: 
private struct TypewriterEffect.FadeEntry // TypeDefIndex: 12011
{
	// Fields
	public int index; // 0x0
	public string text; // 0x8
	public float alpha; // 0x10
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97D5C Offset: 0xC97D5C VA: 0xC97D5C
public class UIButton : UIButtonColor // TypeDefIndex: 12012
{
	// Fields
	public static UIButton current; // 0x0
	public bool dragHighlight; // 0x84
	public string hoverSprite; // 0x88
	public string pressedSprite; // 0x90
	public string disabledSprite; // 0x98
	public Sprite hoverSprite2D; // 0xA0
	public Sprite pressedSprite2D; // 0xA8
	public Sprite disabledSprite2D; // 0xB0
	public bool pixelSnap; // 0xB8
	public List<EventDelegate> onClick; // 0xC0
	private UISprite mSprite; // 0xC8
	private UI2DSprite mSprite2D; // 0xD0
	private string mNormalSprite; // 0xD8
	private Sprite mNormalSprite2D; // 0xE0

	// Properties
	public override bool isEnabled { get; set; }
	public string normalSprite { get; set; }
	public Sprite normalSprite2D { get; set; }

	// Methods

	// RVA: 0x24AA008 Offset: 0x24AA008 VA: 0x24AA008
	public void .ctor() { }

	// RVA: 0x24AA154 Offset: 0x24AA154 VA: 0x24AA154 Slot: 4
	public override bool get_isEnabled() { }

	// RVA: 0x24AA2A0 Offset: 0x24AA2A0 VA: 0x24AA2A0 Slot: 5
	public override void set_isEnabled(bool value) { }

	// RVA: 0x24AA43C Offset: 0x24AA43C VA: 0x24AA43C
	public string get_normalSprite() { }

	// RVA: 0x24AA474 Offset: 0x24AA474 VA: 0x24AA474
	public void set_normalSprite(string value) { }

	// RVA: 0x24AA774 Offset: 0x24AA774 VA: 0x24AA774
	public Sprite get_normalSprite2D() { }

	// RVA: 0x24AA7AC Offset: 0x24AA7AC VA: 0x24AA7AC
	public void set_normalSprite2D(Sprite value) { }

	// RVA: 0x24AAA50 Offset: 0x24AAA50 VA: 0x24AAA50 Slot: 6
	protected override void OnInit() { }

	// RVA: 0x24AAE9C Offset: 0x24AAE9C VA: 0x24AAE9C Slot: 7
	protected override void OnEnable() { }

	// RVA: 0x24AB0FC Offset: 0x24AB0FC VA: 0x24AB0FC Slot: 11
	protected override void OnDragOver() { }

	// RVA: 0x24AB2C0 Offset: 0x24AB2C0 VA: 0x24AB2C0 Slot: 12
	protected override void OnDragOut() { }

	// RVA: 0x24AB484 Offset: 0x24AB484 VA: 0x24AB484 Slot: 15
	protected virtual void OnClick() { }

	// RVA: 0x24AB570 Offset: 0x24AB570 VA: 0x24AB570 Slot: 14
	public override void SetState(UIButtonColor.State state, bool immediate) { }

	// RVA: 0x24AA618 Offset: 0x24AA618 VA: 0x24AA618
	protected void SetSprite(string sp) { }

	// RVA: 0x24AA90C Offset: 0x24AA90C VA: 0x24AA90C
	protected void SetSprite(Sprite sp) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97D94 Offset: 0xC97D94 VA: 0xC97D94
public class UIButtonActivate : MonoBehaviour // TypeDefIndex: 12013
{
	// Fields
	public GameObject target; // 0x18
	public bool state; // 0x20

	// Methods

	// RVA: 0x24AB7C8 Offset: 0x24AB7C8 VA: 0x24AB7C8
	public void .ctor() { }

	// RVA: 0x24AB7D8 Offset: 0x24AB7D8 VA: 0x24AB7D8
	private void OnClick() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC97DCC Offset: 0xC97DCC VA: 0xC97DCC
[AddComponentMenu] // RVA: 0xC97DCC Offset: 0xC97DCC VA: 0xC97DCC
public class UIButtonColor : UIWidgetContainer // TypeDefIndex: 12014
{
	// Fields
	public GameObject tweenTarget; // 0x18
	public Color hover; // 0x20
	public Color pressed; // 0x30
	public Color disabledColor; // 0x40
	public float duration; // 0x50
	protected Color mStartingColor; // 0x54
	protected Color mDefaultColor; // 0x64
	protected bool mInitDone; // 0x74
	protected UIWidget mWidget; // 0x78
	protected UIButtonColor.State mState; // 0x80

	// Properties
	public UIButtonColor.State state { get; set; }
	public Color defaultColor { get; set; }
	public virtual bool isEnabled { get; set; }

	// Methods

	// RVA: 0x24AA074 Offset: 0x24AA074 VA: 0x24AA074
	public void .ctor() { }

	// RVA: 0x24AB894 Offset: 0x24AB894 VA: 0x24AB894
	public UIButtonColor.State get_state() { }

	// RVA: 0x24AB89C Offset: 0x24AB89C VA: 0x24AB89C
	public void set_state(UIButtonColor.State value) { }

	// RVA: 0x24AB8B0 Offset: 0x24AB8B0 VA: 0x24AB8B0
	public Color get_defaultColor() { }

	// RVA: 0x24AB8EC Offset: 0x24AB8EC VA: 0x24AB8EC
	public void set_defaultColor(Color value) { }

	// RVA: 0x24AB968 Offset: 0x24AB968 VA: 0x24AB968 Slot: 4
	public virtual bool get_isEnabled() { }

	// RVA: 0x24AB970 Offset: 0x24AB970 VA: 0x24AB970 Slot: 5
	public virtual void set_isEnabled(bool value) { }

	// RVA: 0x24AB97C Offset: 0x24AB97C VA: 0x24AB97C
	public void ResetDefaultColor() { }

	// RVA: 0x24AB988 Offset: 0x24AB988 VA: 0x24AB988
	private void Start() { }

	// RVA: 0x24AABD8 Offset: 0x24AABD8 VA: 0x24AABD8 Slot: 6
	protected virtual void OnInit() { }

	// RVA: 0x24AB9F4 Offset: 0x24AB9F4 VA: 0x24AB9F4 Slot: 7
	protected virtual void OnEnable() { }

	// RVA: 0x24ABD18 Offset: 0x24ABD18 VA: 0x24ABD18 Slot: 8
	protected virtual void OnDisable() { }

	// RVA: 0x24ABEA0 Offset: 0x24ABEA0 VA: 0x24ABEA0 Slot: 9
	protected virtual void OnHover(bool isOver) { }

	// RVA: 0x24ABF78 Offset: 0x24ABF78 VA: 0x24ABF78 Slot: 10
	protected virtual void OnPress(bool isPressed) { }

	// RVA: 0x24AB1F8 Offset: 0x24AB1F8 VA: 0x24AB1F8 Slot: 11
	protected virtual void OnDragOver() { }

	// RVA: 0x24AB3BC Offset: 0x24AB3BC VA: 0x24AB3BC Slot: 12
	protected virtual void OnDragOut() { }

	// RVA: 0x24AC1D8 Offset: 0x24AC1D8 VA: 0x24AC1D8 Slot: 13
	protected virtual void OnSelect(bool isSelected) { }

	// RVA: 0x24AB754 Offset: 0x24AB754 VA: 0x24AB754 Slot: 14
	public virtual void SetState(UIButtonColor.State state, bool instant) { }

	// RVA: 0x24AC5F4 Offset: 0x24AC5F4 VA: 0x24AC5F4
	public void UpdateColor(bool instant) { }
}

// Namespace: 
public enum UIButtonColor.State // TypeDefIndex: 12015
{
	// Fields
	public int value__; // 0x0
	public const UIButtonColor.State Normal = 0;
	public const UIButtonColor.State Hover = 1;
	public const UIButtonColor.State Pressed = 2;
	public const UIButtonColor.State Disabled = 3;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC97E18 Offset: 0xC97E18 VA: 0xC97E18
[AddComponentMenu] // RVA: 0xC97E18 Offset: 0xC97E18 VA: 0xC97E18
public class UIButtonKeys : UIKeyNavigation // TypeDefIndex: 12016
{
	// Fields
	public UIButtonKeys selectOnClick; // 0x50
	public UIButtonKeys selectOnUp; // 0x58
	public UIButtonKeys selectOnDown; // 0x60
	public UIButtonKeys selectOnLeft; // 0x68
	public UIButtonKeys selectOnRight; // 0x70

	// Methods

	// RVA: 0x24AC7B4 Offset: 0x24AC7B4 VA: 0x24AC7B4
	public void .ctor() { }

	// RVA: 0x24AC81C Offset: 0x24AC81C VA: 0x24AC81C Slot: 4
	protected override void OnEnable() { }

	// RVA: 0x24AC844 Offset: 0x24AC844 VA: 0x24AC844
	public void Upgrade() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97E64 Offset: 0xC97E64 VA: 0xC97E64
public class UIButtonMessage : MonoBehaviour // TypeDefIndex: 12017
{
	// Fields
	public GameObject target; // 0x18
	public string functionName; // 0x20
	public UIButtonMessage.Trigger trigger; // 0x28
	public bool includeChildren; // 0x2C
	private bool mStarted; // 0x2D

	// Methods

	// RVA: 0x24ACC10 Offset: 0x24ACC10 VA: 0x24ACC10
	public void .ctor() { }

	// RVA: 0x24ACC18 Offset: 0x24ACC18 VA: 0x24ACC18
	private void Start() { }

	// RVA: 0x24ACC24 Offset: 0x24ACC24 VA: 0x24ACC24
	private void OnEnable() { }

	// RVA: 0x24ACCBC Offset: 0x24ACCBC VA: 0x24ACCBC
	private void OnHover(bool isOver) { }

	// RVA: 0x24ACF10 Offset: 0x24ACF10 VA: 0x24ACF10
	private void OnPress(bool isPressed) { }

	// RVA: 0x24ACF64 Offset: 0x24ACF64 VA: 0x24ACF64
	private void OnSelect(bool isSelected) { }

	// RVA: 0x24AD010 Offset: 0x24AD010 VA: 0x24AD010
	private void OnClick() { }

	// RVA: 0x24AD050 Offset: 0x24AD050 VA: 0x24AD050
	private void OnDoubleClick() { }

	// RVA: 0x24ACD10 Offset: 0x24ACD10 VA: 0x24ACD10
	private void Send() { }
}

// Namespace: 
public enum UIButtonMessage.Trigger // TypeDefIndex: 12018
{
	// Fields
	public int value__; // 0x0
	public const UIButtonMessage.Trigger OnClick = 0;
	public const UIButtonMessage.Trigger OnMouseOver = 1;
	public const UIButtonMessage.Trigger OnMouseOut = 2;
	public const UIButtonMessage.Trigger OnPress = 3;
	public const UIButtonMessage.Trigger OnRelease = 4;
	public const UIButtonMessage.Trigger OnDoubleClick = 5;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97E9C Offset: 0xC97E9C VA: 0xC97E9C
public class UIButtonOffset : MonoBehaviour // TypeDefIndex: 12019
{
	// Fields
	public Transform tweenTarget; // 0x18
	public Vector3 hover; // 0x20
	public Vector3 pressed; // 0x2C
	public float duration; // 0x38
	private Vector3 mPos; // 0x3C
	private bool mStarted; // 0x48

	// Methods

	// RVA: 0x24AD264 Offset: 0x24AD264 VA: 0x24AD264
	public void .ctor() { }

	// RVA: 0x24AD31C Offset: 0x24AD31C VA: 0x24AD31C
	private void Start() { }

	// RVA: 0x24AD3E4 Offset: 0x24AD3E4 VA: 0x24AD3E4
	private void OnEnable() { }

	// RVA: 0x24AD5B8 Offset: 0x24AD5B8 VA: 0x24AD5B8
	private void OnDisable() { }

	// RVA: 0x24AD71C Offset: 0x24AD71C VA: 0x24AD71C
	private void OnPress(bool isPressed) { }

	// RVA: 0x24AD47C Offset: 0x24AD47C VA: 0x24AD47C
	private void OnHover(bool isOver) { }

	// RVA: 0x24AD8B8 Offset: 0x24AD8B8 VA: 0x24AD8B8
	private void OnSelect(bool isSelected) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97ED4 Offset: 0xC97ED4 VA: 0xC97ED4
public class UIButtonRotation : MonoBehaviour // TypeDefIndex: 12020
{
	// Fields
	public Transform tweenTarget; // 0x18
	public Vector3 hover; // 0x20
	public Vector3 pressed; // 0x2C
	public float duration; // 0x38
	private Quaternion mRot; // 0x3C
	private bool mStarted; // 0x4C

	// Methods

	// RVA: 0x24AD964 Offset: 0x24AD964 VA: 0x24AD964
	public void .ctor() { }

	// RVA: 0x24AD9F8 Offset: 0x24AD9F8 VA: 0x24AD9F8
	private void Start() { }

	// RVA: 0x24ADAC0 Offset: 0x24ADAC0 VA: 0x24ADAC0
	private void OnEnable() { }

	// RVA: 0x24ADCBC Offset: 0x24ADCBC VA: 0x24ADCBC
	private void OnDisable() { }

	// RVA: 0x24ADE28 Offset: 0x24ADE28 VA: 0x24ADE28
	private void OnPress(bool isPressed) { }

	// RVA: 0x24ADB58 Offset: 0x24ADB58 VA: 0x24ADB58
	private void OnHover(bool isOver) { }

	// RVA: 0x24ADFE8 Offset: 0x24ADFE8 VA: 0x24ADFE8
	private void OnSelect(bool isSelected) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97F0C Offset: 0xC97F0C VA: 0xC97F0C
public class UIButtonScale : MonoBehaviour // TypeDefIndex: 12021
{
	// Fields
	public Transform tweenTarget; // 0x18
	public Vector3 hover; // 0x20
	public Vector3 pressed; // 0x2C
	public float duration; // 0x38
	private Vector3 mScale; // 0x3C
	private bool mStarted; // 0x48

	// Methods

	// RVA: 0x24AE094 Offset: 0x24AE094 VA: 0x24AE094
	public void .ctor() { }

	// RVA: 0x24AE134 Offset: 0x24AE134 VA: 0x24AE134
	private void Start() { }

	// RVA: 0x24AE1FC Offset: 0x24AE1FC VA: 0x24AE1FC
	private void OnEnable() { }

	// RVA: 0x24AE3D0 Offset: 0x24AE3D0 VA: 0x24AE3D0
	private void OnDisable() { }

	// RVA: 0x24AE534 Offset: 0x24AE534 VA: 0x24AE534
	private void OnPress(bool isPressed) { }

	// RVA: 0x24AE294 Offset: 0x24AE294 VA: 0x24AE294
	private void OnHover(bool isOver) { }

	// RVA: 0x24AE6D0 Offset: 0x24AE6D0 VA: 0x24AE6D0
	private void OnSelect(bool isSelected) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97F44 Offset: 0xC97F44 VA: 0xC97F44
public class UICenterOnChild : MonoBehaviour // TypeDefIndex: 12022
{
	// Fields
	public float springStrength; // 0x18
	public float nextPageThreshold; // 0x1C
	public SpringPanel.OnFinished onFinished; // 0x20
	public UICenterOnChild.OnCenterCallback onCenter; // 0x28
	protected UIScrollView mScrollView; // 0x30
	private GameObject mCenteredObject; // 0x38

	// Properties
	public GameObject centeredObject { get; }

	// Methods

	// RVA: 0x20783F0 Offset: 0x20783F0 VA: 0x20783F0
	public void .ctor() { }

	// RVA: 0x2078400 Offset: 0x2078400 VA: 0x2078400
	public GameObject get_centeredObject() { }

	// RVA: 0x2078408 Offset: 0x2078408 VA: 0x2078408
	private void Start() { }

	// RVA: 0x2078414 Offset: 0x2078414 VA: 0x2078414
	private void OnEnable() { }

	// RVA: 0x20784B4 Offset: 0x20784B4 VA: 0x20784B4
	private void OnDisable() { }

	// RVA: 0x207853C Offset: 0x207853C VA: 0x207853C
	private void OnDragFinished() { }

	// RVA: 0x207857C Offset: 0x207857C VA: 0x207857C
	private void OnValidate() { }

	[ContextMenu] // RVA: 0xD43A84 Offset: 0xD43A84 VA: 0xD43A84
	// RVA: 0x20785F0 Offset: 0x20785F0 VA: 0x20785F0 Slot: 4
	public virtual void Recenter() { }

	// RVA: 0x2079224 Offset: 0x2079224 VA: 0x2079224
	private void CenterOn(Transform target, Vector3 panelCenter, bool isFinishAction = True) { }

	// RVA: 0x2079964 Offset: 0x2079964 VA: 0x2079964
	public void CenterOn(Transform target, bool isFinishAction = True) { }
}

// Namespace: 
public sealed class UICenterOnChild.OnCenterCallback : MulticastDelegate // TypeDefIndex: 12023
{
	// Methods

	// RVA: 0x2079B5C Offset: 0x2079B5C VA: 0x2079B5C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x20795C4 Offset: 0x20795C4 VA: 0x20795C4 Slot: 11
	public virtual void Invoke(GameObject centeredObject) { }

	// RVA: 0x2079B6C Offset: 0x2079B6C VA: 0x2079B6C Slot: 12
	public virtual IAsyncResult BeginInvoke(GameObject centeredObject, AsyncCallback callback, object object) { }

	// RVA: 0x2079B90 Offset: 0x2079B90 VA: 0x2079B90 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC97F7C Offset: 0xC97F7C VA: 0xC97F7C
public class UICenterOnClick : MonoBehaviour // TypeDefIndex: 12024
{
	// Methods

	// RVA: 0x2079B9C Offset: 0x2079B9C VA: 0x2079B9C
	public void .ctor() { }

	// RVA: 0x2079BA4 Offset: 0x2079BA4 VA: 0x2079BA4
	private void OnClick() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC97FB4 Offset: 0xC97FB4 VA: 0xC97FB4
[AddComponentMenu] // RVA: 0xC97FB4 Offset: 0xC97FB4 VA: 0xC97FB4
public class UIDragCamera : MonoBehaviour // TypeDefIndex: 12025
{
	// Fields
	public UIDraggableCamera draggableCamera; // 0x18

	// Methods

	// RVA: 0x20824EC Offset: 0x20824EC VA: 0x20824EC
	public void .ctor() { }

	// RVA: 0x20824F4 Offset: 0x20824F4 VA: 0x20824F4
	private void Awake() { }

	// RVA: 0x20825B8 Offset: 0x20825B8 VA: 0x20825B8
	private void OnPress(bool isPressed) { }

	// RVA: 0x2082838 Offset: 0x2082838 VA: 0x2082838
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x2082C4C Offset: 0x2082C4C VA: 0x2082C4C
	private void OnScroll(float delta) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98000 Offset: 0xC98000 VA: 0xC98000
public class UIDragDropContainer : MonoBehaviour // TypeDefIndex: 12026
{
	// Fields
	public Transform reparentTarget; // 0x18

	// Methods

	// RVA: 0x2082E54 Offset: 0x2082E54 VA: 0x2082E54
	public void .ctor() { }

	// RVA: 0x2082E5C Offset: 0x2082E5C VA: 0x2082E5C Slot: 4
	protected virtual void Start() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98038 Offset: 0xC98038 VA: 0xC98038
public class UIDragDropItem : MonoBehaviour // TypeDefIndex: 12027
{
	// Fields
	public UIDragDropItem.Restriction restriction; // 0x18
	public bool cloneOnDrag; // 0x1C
	[HideInInspector] // RVA: 0xCF0CF8 Offset: 0xCF0CF8 VA: 0xCF0CF8
	public float pressAndHoldDelay; // 0x20
	public bool interactable; // 0x24
	protected Transform mTrans; // 0x28
	protected Transform mParent; // 0x30
	protected Collider mCollider; // 0x38
	protected Collider2D mCollider2D; // 0x40
	protected UIButton mButton; // 0x48
	protected UIRoot mRoot; // 0x50
	protected UIGrid mGrid; // 0x58
	protected UITable mTable; // 0x60
	protected float mDragStartTime; // 0x68
	protected UIDragScrollView mDragScrollView; // 0x70
	protected bool mPressed; // 0x78
	protected bool mDragging; // 0x79
	protected UICamera.MouseOrTouch mTouch; // 0x80

	// Methods

	// RVA: 0x2082EE4 Offset: 0x2082EE4 VA: 0x2082EE4
	public void .ctor() { }

	// RVA: 0x2082EFC Offset: 0x2082EFC VA: 0x2082EFC Slot: 4
	protected virtual void Start() { }

	// RVA: 0x2082FDC Offset: 0x2082FDC VA: 0x2082FDC Slot: 5
	protected virtual void OnPress(bool isPressed) { }

	// RVA: 0x208308C Offset: 0x208308C VA: 0x208308C Slot: 6
	protected virtual void Update() { }

	// RVA: 0x20830FC Offset: 0x20830FC VA: 0x20830FC Slot: 7
	protected virtual void OnDragStart() { }

	// RVA: 0x2083264 Offset: 0x2083264 VA: 0x2083264 Slot: 8
	protected virtual void StartDragging() { }

	// RVA: 0x20837E0 Offset: 0x20837E0 VA: 0x20837E0 Slot: 9
	protected virtual void OnDrag(Vector2 delta) { }

	// RVA: 0x2083910 Offset: 0x2083910 VA: 0x2083910 Slot: 10
	protected virtual void OnDragEnd() { }

	// RVA: 0x20839F0 Offset: 0x20839F0 VA: 0x20839F0
	public void StopDragging(GameObject go) { }

	// RVA: 0x2083A0C Offset: 0x2083A0C VA: 0x2083A0C Slot: 11
	protected virtual void OnDragDropStart() { }

	// RVA: 0x2083EB0 Offset: 0x2083EB0 VA: 0x2083EB0 Slot: 12
	protected virtual void OnDragDropMove(Vector2 delta) { }

	// RVA: 0x2083FE0 Offset: 0x2083FE0 VA: 0x2083FE0 Slot: 13
	protected virtual void OnDragDropRelease(GameObject surface) { }

	// RVA: 0x2084528 Offset: 0x2084528 VA: 0x2084528 Slot: 14
	protected virtual void OnDragDropEnd() { }

	[DebuggerHiddenAttribute] // RVA: 0xD43ABC Offset: 0xD43ABC VA: 0xD43ABC
	// RVA: 0x20844B8 Offset: 0x20844B8 VA: 0x20844B8
	protected IEnumerator EnableDragScrollView() { }
}

// Namespace: 
public enum UIDragDropItem.Restriction // TypeDefIndex: 12028
{
	// Fields
	public int value__; // 0x0
	public const UIDragDropItem.Restriction None = 0;
	public const UIDragDropItem.Restriction Horizontal = 1;
	public const UIDragDropItem.Restriction Vertical = 2;
	public const UIDragDropItem.Restriction PressAndHold = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2EE0 Offset: 0xCB2EE0 VA: 0xCB2EE0
private sealed class UIDragDropItem.<EnableDragScrollView>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 12029
{
	// Fields
	internal UIDragDropItem $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4B2F4 Offset: 0xD4B2F4 VA: 0xD4B2F4
	// RVA: 0x208452C Offset: 0x208452C VA: 0x208452C
	public void .ctor() { }

	// RVA: 0x2084534 Offset: 0x2084534 VA: 0x2084534 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B304 Offset: 0xD4B304 VA: 0xD4B304
	// RVA: 0x2084668 Offset: 0x2084668 VA: 0x2084668 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B314 Offset: 0xD4B314 VA: 0xD4B314
	// RVA: 0x2084670 Offset: 0x2084670 VA: 0x2084670 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B324 Offset: 0xD4B324 VA: 0xD4B324
	// RVA: 0x2084678 Offset: 0x2084678 VA: 0x2084678 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B334 Offset: 0xD4B334 VA: 0xD4B334
	// RVA: 0x208468C Offset: 0x208468C VA: 0x208468C Slot: 6
	public void Reset() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98070 Offset: 0xC98070 VA: 0xC98070
public class UIDragDropRoot : MonoBehaviour // TypeDefIndex: 12030
{
	// Fields
	public static Transform root; // 0x0

	// Methods

	// RVA: 0x2085C5C Offset: 0x2085C5C VA: 0x2085C5C
	public void .ctor() { }

	// RVA: 0x2085C64 Offset: 0x2085C64 VA: 0x2085C64
	private void OnEnable() { }

	// RVA: 0x2085CC4 Offset: 0x2085CC4 VA: 0x2085CC4
	private void OnDisable() { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC980A8 Offset: 0xC980A8 VA: 0xC980A8
[AddComponentMenu] // RVA: 0xC980A8 Offset: 0xC980A8 VA: 0xC980A8
public class UIDraggableCamera : MonoBehaviour // TypeDefIndex: 12031
{
	// Fields
	public Transform rootForBounds; // 0x18
	public Vector2 scale; // 0x20
	public float scrollWheelFactor; // 0x28
	public UIDragObject.DragEffect dragEffect; // 0x2C
	public bool smoothDragStart; // 0x30
	public float momentumAmount; // 0x34
	private Camera mCam; // 0x38
	private Transform mTrans; // 0x40
	private bool mPressed; // 0x48
	private Vector2 mMomentum; // 0x4C
	private Bounds mBounds; // 0x54
	private float mScroll; // 0x6C
	private UIRoot mRoot; // 0x70
	private bool mDragStarted; // 0x78

	// Properties
	public Vector2 currentMomentum { get; set; }

	// Methods

	// RVA: 0x20884B8 Offset: 0x20884B8 VA: 0x20884B8
	public void .ctor() { }

	// RVA: 0x2088550 Offset: 0x2088550 VA: 0x2088550
	public Vector2 get_currentMomentum() { }

	// RVA: 0x2088558 Offset: 0x2088558 VA: 0x2088558
	public void set_currentMomentum(Vector2 value) { }

	// RVA: 0x2088560 Offset: 0x2088560 VA: 0x2088560
	private void Start() { }

	// RVA: 0x2088664 Offset: 0x2088664 VA: 0x2088664
	private Vector3 CalculateConstrainOffset() { }

	// RVA: 0x2088A10 Offset: 0x2088A10 VA: 0x2088A10
	public bool ConstrainToBounds(bool immediate) { }

	// RVA: 0x20826B8 Offset: 0x20826B8 VA: 0x20826B8
	public void Press(bool isPressed) { }

	// RVA: 0x2082940 Offset: 0x2082940 VA: 0x2082940
	public void Drag(Vector2 delta) { }

	// RVA: 0x2082D4C Offset: 0x2082D4C VA: 0x2082D4C
	public void Scroll(float delta) { }

	// RVA: 0x2088C88 Offset: 0x2088C88 VA: 0x2088C88
	private void Update() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC98130 Offset: 0xC98130 VA: 0xC98130
[AddComponentMenu] // RVA: 0xC98130 Offset: 0xC98130 VA: 0xC98130
public class UIDragObject : MonoBehaviour // TypeDefIndex: 12032
{
	// Fields
	public Transform target; // 0x18
	public UIPanel panelRegion; // 0x20
	public Vector3 scrollMomentum; // 0x28
	public bool restrictWithinPanel; // 0x34
	public UIRect contentRect; // 0x38
	public UIDragObject.DragEffect dragEffect; // 0x40
	public float momentumAmount; // 0x44
	[SerializeField] // RVA: 0xCF0D08 Offset: 0xCF0D08 VA: 0xCF0D08
	protected Vector3 scale; // 0x48
	[SerializeField] // RVA: 0xCF0D18 Offset: 0xCF0D18 VA: 0xCF0D18
	[HideInInspector] // RVA: 0xCF0D18 Offset: 0xCF0D18 VA: 0xCF0D18
	private float scrollWheelFactor; // 0x54
	private Plane mPlane; // 0x58
	private Vector3 mTargetPos; // 0x68
	private Vector3 mLastPos; // 0x74
	private Vector3 mMomentum; // 0x80
	private Vector3 mScroll; // 0x8C
	private Bounds mBounds; // 0x98
	private int mTouchID; // 0xB0
	private bool mStarted; // 0xB4
	private bool mPressed; // 0xB5

	// Properties
	public Vector3 dragMovement { get; set; }

	// Methods

	// RVA: 0x2085D74 Offset: 0x2085D74 VA: 0x2085D74
	public void .ctor() { }

	// RVA: 0x2085E54 Offset: 0x2085E54 VA: 0x2085E54
	public Vector3 get_dragMovement() { }

	// RVA: 0x2085E60 Offset: 0x2085E60 VA: 0x2085E60
	public void set_dragMovement(Vector3 value) { }

	// RVA: 0x2085E6C Offset: 0x2085E6C VA: 0x2085E6C
	private void OnEnable() { }

	// RVA: 0x2085FEC Offset: 0x2085FEC VA: 0x2085FEC
	private void OnDisable() { }

	// RVA: 0x2085FF4 Offset: 0x2085FF4 VA: 0x2085FF4
	private void FindPanel() { }

	// RVA: 0x2086118 Offset: 0x2086118 VA: 0x2086118
	private void UpdateBounds() { }

	// RVA: 0x20863D8 Offset: 0x20863D8 VA: 0x20863D8
	private void OnPress(bool pressed) { }

	// RVA: 0x2086A8C Offset: 0x2086A8C VA: 0x2086A8C
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x2086FF0 Offset: 0x2086FF0 VA: 0x2086FF0
	private void Move(Vector3 worldDelta) { }

	// RVA: 0x20873B0 Offset: 0x20873B0 VA: 0x20873B0
	private void LateUpdate() { }

	// RVA: 0x20867D8 Offset: 0x20867D8 VA: 0x20867D8
	public void CancelMovement() { }

	// RVA: 0x20869C8 Offset: 0x20869C8 VA: 0x20869C8
	public void CancelSpring() { }

	// RVA: 0x2087684 Offset: 0x2087684 VA: 0x2087684
	private void OnScroll(float delta) { }
}

// Namespace: 
public enum UIDragObject.DragEffect // TypeDefIndex: 12033
{
	// Fields
	public int value__; // 0x0
	public const UIDragObject.DragEffect None = 0;
	public const UIDragObject.DragEffect Momentum = 1;
	public const UIDragObject.DragEffect MomentumAndSpring = 2;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC9817C Offset: 0xC9817C VA: 0xC9817C
public class UIDragResize : MonoBehaviour // TypeDefIndex: 12034
{
	// Fields
	public UIWidget target; // 0x18
	public UIWidget.Pivot pivot; // 0x20
	public int minWidth; // 0x24
	public int minHeight; // 0x28
	public int maxWidth; // 0x2C
	public int maxHeight; // 0x30
	private Plane mPlane; // 0x34
	private Vector3 mRayPos; // 0x44
	private Vector3 mLocalPos; // 0x50
	private int mWidth; // 0x5C
	private int mHeight; // 0x60
	private bool mDragging; // 0x64

	// Methods

	// RVA: 0x20877B4 Offset: 0x20877B4 VA: 0x20877B4
	public void .ctor() { }

	// RVA: 0x20877D4 Offset: 0x20877D4 VA: 0x20877D4
	private void OnDragStart() { }

	// RVA: 0x2087A54 Offset: 0x2087A54 VA: 0x2087A54
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x2087DF0 Offset: 0x2087DF0 VA: 0x2087DF0
	private void OnDragEnd() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC981B4 Offset: 0xC981B4 VA: 0xC981B4
public class UIDragScrollView : MonoBehaviour // TypeDefIndex: 12035
{
	// Fields
	public UIScrollView scrollView; // 0x18
	[HideInInspector] // RVA: 0xCF0D50 Offset: 0xCF0D50 VA: 0xCF0D50
	[SerializeField] // RVA: 0xCF0D50 Offset: 0xCF0D50 VA: 0xCF0D50
	private UIScrollView draggablePanel; // 0x20
	private Transform mTrans; // 0x28
	private UIScrollView mScroll; // 0x30
	private bool mAutoFind; // 0x38
	private bool mStarted; // 0x39

	// Methods

	// RVA: 0x2087DF8 Offset: 0x2087DF8 VA: 0x2087DF8
	public void .ctor() { }

	// RVA: 0x2087E00 Offset: 0x2087E00 VA: 0x2087E00
	private void OnEnable() { }

	// RVA: 0x208805C Offset: 0x208805C VA: 0x208805C
	private void Start() { }

	// RVA: 0x2087F1C Offset: 0x2087F1C VA: 0x2087F1C
	private void FindScrollView() { }

	// RVA: 0x2088068 Offset: 0x2088068 VA: 0x2088068
	private void OnPress(bool pressed) { }

	// RVA: 0x2088208 Offset: 0x2088208 VA: 0x2088208
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x20882D0 Offset: 0x20882D0 VA: 0x20882D0
	private void OnScroll(float delta) { }

	// RVA: 0x20883AC Offset: 0x20883AC VA: 0x20883AC
	private void OnScrollStop(bool dummy) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC981EC Offset: 0xC981EC VA: 0xC981EC
public class UIEventTrigger : MonoBehaviour // TypeDefIndex: 12036
{
	// Fields
	public static UIEventTrigger current; // 0x0
	public List<EventDelegate> onHoverOver; // 0x18
	public List<EventDelegate> onHoverOut; // 0x20
	public List<EventDelegate> onPress; // 0x28
	public List<EventDelegate> onRelease; // 0x30
	public List<EventDelegate> onSelect; // 0x38
	public List<EventDelegate> onDeselect; // 0x40
	public List<EventDelegate> onClick; // 0x48
	public List<EventDelegate> onDoubleClick; // 0x50
	public List<EventDelegate> onDragStart; // 0x58
	public List<EventDelegate> onDragEnd; // 0x60
	public List<EventDelegate> onDragOver; // 0x68
	public List<EventDelegate> onDragOut; // 0x70
	public List<EventDelegate> onDrag; // 0x78

	// Methods

	// RVA: 0x2092010 Offset: 0x2092010 VA: 0x2092010
	public void .ctor() { }

	// RVA: 0x20921A8 Offset: 0x20921A8 VA: 0x20921A8
	private void OnHover(bool isOver) { }

	// RVA: 0x209229C Offset: 0x209229C VA: 0x209229C
	private void OnPress(bool pressed) { }

	// RVA: 0x2092390 Offset: 0x2092390 VA: 0x2092390
	private void OnSelect(bool selected) { }

	// RVA: 0x2092484 Offset: 0x2092484 VA: 0x2092484
	private void OnClick() { }

	// RVA: 0x209255C Offset: 0x209255C VA: 0x209255C
	private void OnDoubleClick() { }

	// RVA: 0x2092634 Offset: 0x2092634 VA: 0x2092634
	private void OnDragStart() { }

	// RVA: 0x209270C Offset: 0x209270C VA: 0x209270C
	private void OnDragEnd() { }

	// RVA: 0x20927E4 Offset: 0x20927E4 VA: 0x20927E4
	private void OnDragOver(GameObject go) { }
