	public static IComNativeDescriptorHandler get_ComNativeDescriptorHandler() { }

	// RVA: 0x1063294 Offset: 0x1063294 VA: 0x1063294
	public static void set_ComNativeDescriptorHandler(IComNativeDescriptorHandler value) { }

	// RVA: 0x1063300 Offset: 0x1063300 VA: 0x1063300
	public static void Refresh(Assembly assembly) { }

	// RVA: 0x10633D8 Offset: 0x10633D8 VA: 0x10633D8
	public static void Refresh(Module module) { }

	// RVA: 0x105C5A0 Offset: 0x105C5A0 VA: 0x105C5A0
	public static void Refresh(object component) { }

	// RVA: 0x105C740 Offset: 0x105C740 VA: 0x105C740
	public static void Refresh(Type type) { }

	// RVA: 0x10634B0 Offset: 0x10634B0 VA: 0x10634B0
	private static void OnComponentDisposed(object sender, EventArgs args) { }

	// RVA: 0x105D9C8 Offset: 0x105D9C8 VA: 0x105D9C8
	internal static ComponentInfo GetComponentInfo(IComponent com) { }

	// RVA: 0x105D4BC Offset: 0x105D4BC VA: 0x105D4BC
	internal static TypeInfo GetTypeInfo(Type type) { }

	// RVA: 0x105CFB0 Offset: 0x105CFB0 VA: 0x105CFB0
	private static Type GetTypeFromName(IComponent component, string typeName) { }
}

// Namespace: 
private sealed class TypeDescriptor.AttributeProvider : TypeDescriptionProvider // TypeDefIndex: 1298
{
	// Fields
	private Attribute[] attributes; // 0x20

	// Methods

	// RVA: 0x105BC30 Offset: 0x105BC30 VA: 0x105BC30
	public void .ctor(Attribute[] attributes, TypeDescriptionProvider parent) { }

	// RVA: 0x10635E0 Offset: 0x10635E0 VA: 0x10635E0 Slot: 9
	public override ICustomTypeDescriptor GetTypeDescriptor(Type type, object instance) { }
}

// Namespace: 
private sealed class TypeDescriptor.AttributeProvider.AttributeTypeDescriptor : CustomTypeDescriptor // TypeDefIndex: 1299
{
	// Fields
	private Attribute[] attributes; // 0x18

	// Methods

	// RVA: 0x1063674 Offset: 0x1063674 VA: 0x1063674
	public void .ctor(ICustomTypeDescriptor parent, Attribute[] attributes) { }

	// RVA: 0x10636A0 Offset: 0x10636A0 VA: 0x10636A0 Slot: 16
	public override AttributeCollection GetAttributes() { }
}

// Namespace: 
private sealed class TypeDescriptor.WrappedTypeDescriptionProvider : TypeDescriptionProvider // TypeDefIndex: 1300
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC3CF14 Offset: 0xC3CF14 VA: 0xC3CF14
	private TypeDescriptionProvider <Wrapped>k__BackingField; // 0x20

	// Properties
	public TypeDescriptionProvider Wrapped { get; set; }

	// Methods

	// RVA: 0x1062390 Offset: 0x1062390 VA: 0x1062390
	public void .ctor(TypeDescriptionProvider wrapped) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D750 Offset: 0xC3D750 VA: 0xC3D750
	// RVA: 0x1063A40 Offset: 0x1063A40 VA: 0x1063A40
	public TypeDescriptionProvider get_Wrapped() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D760 Offset: 0xC3D760 VA: 0xC3D760
	// RVA: 0x1063EE4 Offset: 0x1063EE4 VA: 0x1063EE4
	private void set_Wrapped(TypeDescriptionProvider value) { }

	// RVA: 0x1063EEC Offset: 0x1063EEC VA: 0x1063EEC Slot: 4
	public override object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args) { }

	// RVA: 0x1063F0C Offset: 0x1063F0C VA: 0x1063F0C Slot: 5
	public override IDictionary GetCache(object instance) { }

	// RVA: 0x1063F30 Offset: 0x1063F30 VA: 0x1063F30 Slot: 6
	public override ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) { }

	// RVA: 0x1063FA4 Offset: 0x1063FA4 VA: 0x1063FA4 Slot: 7
	public override string GetFullComponentName(object component) { }

	// RVA: 0x1063FC4 Offset: 0x1063FC4 VA: 0x1063FC4 Slot: 8
	public override Type GetReflectionType(Type type, object instance) { }

	// RVA: 0x1063FEC Offset: 0x1063FEC VA: 0x1063FEC Slot: 9
	public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) { }
}

// Namespace: 
private sealed class TypeDescriptor.DefaultTypeDescriptor : CustomTypeDescriptor // TypeDefIndex: 1301
{
	// Fields
	private TypeDescriptionProvider owner; // 0x18
	private Type objectType; // 0x20
	private object instance; // 0x28

	// Methods

	// RVA: 0x10637E0 Offset: 0x10637E0 VA: 0x10637E0
	public void .ctor(TypeDescriptionProvider owner, Type objectType, object instance) { }

	// RVA: 0x1063898 Offset: 0x1063898 VA: 0x1063898 Slot: 16
	public override AttributeCollection GetAttributes() { }

	// RVA: 0x1063A48 Offset: 0x1063A48 VA: 0x1063A48 Slot: 17
	public override string GetClassName() { }

	// RVA: 0x1063B6C Offset: 0x1063B6C VA: 0x1063B6C Slot: 21
	public override PropertyDescriptor GetDefaultProperty() { }

	// RVA: 0x1063D24 Offset: 0x1063D24 VA: 0x1063D24 Slot: 25
	public override PropertyDescriptorCollection GetProperties() { }
}

// Namespace: 
private sealed class TypeDescriptor.DefaultTypeDescriptionProvider : TypeDescriptionProvider // TypeDefIndex: 1302
{
	// Methods

	// RVA: 0x1062388 Offset: 0x1062388 VA: 0x1062388
	public void .ctor() { }

	// RVA: 0x106376C Offset: 0x106376C VA: 0x106376C Slot: 6
	public override ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) { }

	// RVA: 0x1063820 Offset: 0x1063820 VA: 0x1063820 Slot: 9
	public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance) { }
}

// Namespace: System.ComponentModel
internal abstract class Info // TypeDefIndex: 1303
{
	// Fields
	private Type _infoType; // 0x10
	private EventDescriptor _defaultEvent; // 0x18
	private bool _gotDefaultEvent; // 0x20
	private PropertyDescriptor _defaultProperty; // 0x28
	private bool _gotDefaultProperty; // 0x30
	private AttributeCollection _attributes; // 0x38

	// Properties
	public Type InfoType { get; }

	// Methods

	// RVA: 0x10B6A9C Offset: 0x10B6A9C VA: 0x10B6A9C
	public void .ctor(Type infoType) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract AttributeCollection GetAttributes();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract EventDescriptorCollection GetEvents();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract PropertyDescriptorCollection GetProperties();

	// RVA: 0x10C26E8 Offset: 0x10C26E8 VA: 0x10C26E8
	public Type get_InfoType() { }

	// RVA: 0x10C26F0 Offset: 0x10C26F0 VA: 0x10C26F0
	public EventDescriptorCollection GetEvents(Attribute[] attributes) { }

	// RVA: 0x10C2748 Offset: 0x10C2748 VA: 0x10C2748
	public PropertyDescriptorCollection GetProperties(Attribute[] attributes) { }

	// RVA: 0x10C27A4 Offset: 0x10C27A4 VA: 0x10C27A4
	public EventDescriptor GetDefaultEvent() { }

	// RVA: 0x10C2928 Offset: 0x10C2928 VA: 0x10C2928
	public PropertyDescriptor GetDefaultProperty() { }

	// RVA: 0x10B6AD0 Offset: 0x10B6AD0 VA: 0x10B6AD0
	protected AttributeCollection GetAttributes(IComponent comp) { }
}

// Namespace: System.ComponentModel
internal class ComponentInfo : Info // TypeDefIndex: 1304
{
	// Fields
	private IComponent _component; // 0x40
	private EventDescriptorCollection _events; // 0x48
	private PropertyDescriptorCollection _properties; // 0x50

	// Methods

	// RVA: 0x10B6A44 Offset: 0x10B6A44 VA: 0x10B6A44
	public void .ctor(IComponent component) { }

	// RVA: 0x10B6AC8 Offset: 0x10B6AC8 VA: 0x10B6AC8 Slot: 4
	public override AttributeCollection GetAttributes() { }

	// RVA: 0x10B7660 Offset: 0x10B7660 VA: 0x10B7660 Slot: 5
	public override EventDescriptorCollection GetEvents() { }

	// RVA: 0x10B7B84 Offset: 0x10B7B84 VA: 0x10B7B84 Slot: 6
	public override PropertyDescriptorCollection GetProperties() { }
}

// Namespace: System.ComponentModel
internal class TypeInfo : Info // TypeDefIndex: 1305
{
	// Fields
	private EventDescriptorCollection _events; // 0x40
	private PropertyDescriptorCollection _properties; // 0x48

	// Methods

	// RVA: 0x10635D8 Offset: 0x10635D8 VA: 0x10635D8
	public void .ctor(Type t) { }

	// RVA: 0x106408C Offset: 0x106408C VA: 0x106408C Slot: 4
	public override AttributeCollection GetAttributes() { }

	// RVA: 0x1064098 Offset: 0x1064098 VA: 0x1064098 Slot: 5
	public override EventDescriptorCollection GetEvents() { }

	// RVA: 0x1064230 Offset: 0x1064230 VA: 0x1064230 Slot: 6
	public override PropertyDescriptorCollection GetProperties() { }
}

// Namespace: System.ComponentModel
public abstract class TypeListConverter : TypeConverter // TypeDefIndex: 1306
{
	// Fields
	private Type[] types; // 0x10

	// Methods

	// RVA: 0x10645B0 Offset: 0x10645B0 VA: 0x10645B0
	protected void .ctor(Type[] types) { }

	// RVA: 0x10645DC Offset: 0x10645DC VA: 0x10645DC Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x1064670 Offset: 0x1064670 VA: 0x1064670 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x1064704 Offset: 0x1064704 VA: 0x1064704 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x1064708 Offset: 0x1064708 VA: 0x1064708 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x1064928 Offset: 0x1064928 VA: 0x1064928 Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x1064990 Offset: 0x1064990 VA: 0x1064990 Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x1064998 Offset: 0x1064998 VA: 0x1064998 Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
public class UInt16Converter : BaseNumberConverter // TypeDefIndex: 1307
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x10649A0 Offset: 0x10649A0 VA: 0x10649A0
	public void .ctor() { }

	// RVA: 0x1064A28 Offset: 0x1064A28 VA: 0x1064A28 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x1064A30 Offset: 0x1064A30 VA: 0x1064A30 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x1064AB8 Offset: 0x1064AB8 VA: 0x1064AB8 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x1064B34 Offset: 0x1064B34 VA: 0x1064B34 Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
public class UInt32Converter : BaseNumberConverter // TypeDefIndex: 1308
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x1064BCC Offset: 0x1064BCC VA: 0x1064BCC
	public void .ctor() { }

	// RVA: 0x1064C54 Offset: 0x1064C54 VA: 0x1064C54 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x1064C5C Offset: 0x1064C5C VA: 0x1064C5C Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x1064CE4 Offset: 0x1064CE4 VA: 0x1064CE4 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x1064D60 Offset: 0x1064D60 VA: 0x1064D60 Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
public class UInt64Converter : BaseNumberConverter // TypeDefIndex: 1309
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x1064DF8 Offset: 0x1064DF8 VA: 0x1064DF8
	public void .ctor() { }

	// RVA: 0x1064E80 Offset: 0x1064E80 VA: 0x1064E80 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x1064E88 Offset: 0x1064E88 VA: 0x1064E88 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x1064F10 Offset: 0x1064F10 VA: 0x1064F10 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x1064F8C Offset: 0x1064F8C VA: 0x1064F8C Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
internal sealed class WeakObjectWrapper // TypeDefIndex: 1310
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC3CF24 Offset: 0xC3CF24 VA: 0xC3CF24
	private int <TargetHashCode>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3CF34 Offset: 0xC3CF34 VA: 0xC3CF34
	private WeakReference <Weak>k__BackingField; // 0x18

	// Properties
	public int TargetHashCode { get; set; }
	public WeakReference Weak { get; set; }

	// Methods

	// RVA: 0x105C504 Offset: 0x105C504 VA: 0x105C504
	public void .ctor(object target) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D770 Offset: 0xC3D770 VA: 0xC3D770
	// RVA: 0x1065034 Offset: 0x1065034 VA: 0x1065034
	public int get_TargetHashCode() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D780 Offset: 0xC3D780 VA: 0xC3D780
	// RVA: 0x1065024 Offset: 0x1065024 VA: 0x1065024
	private void set_TargetHashCode(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D790 Offset: 0xC3D790 VA: 0xC3D790
	// RVA: 0x106503C Offset: 0x106503C VA: 0x106503C
	public WeakReference get_Weak() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3D7A0 Offset: 0xC3D7A0 VA: 0xC3D7A0
	// RVA: 0x106502C Offset: 0x106502C VA: 0x106502C
	private void set_Weak(WeakReference value) { }
}

// Namespace: System.ComponentModel
internal sealed class WeakObjectWrapperComparer : EqualityComparer<WeakObjectWrapper> // TypeDefIndex: 1311
{
	// Methods

	// RVA: 0x105B5B8 Offset: 0x105B5B8 VA: 0x105B5B8
	public void .ctor() { }

	// RVA: 0x1065044 Offset: 0x1065044 VA: 0x1065044 Slot: 9
	public override bool Equals(WeakObjectWrapper x, WeakObjectWrapper y) { }

	// RVA: 0x10650F0 Offset: 0x10650F0 VA: 0x10650F0 Slot: 8
	public override int GetHashCode(WeakObjectWrapper obj) { }
}

// Namespace: System.ComponentModel
[Serializable]
public class Win32Exception : ExternalException // TypeDefIndex: 1312
{
	// Fields
	private int native_error_code; // 0x60

	// Properties
	public int NativeErrorCode { get; }

	// Methods

	// RVA: 0x1065104 Offset: 0x1065104 VA: 0x1065104
	public void .ctor() { }

	// RVA: 0x1065190 Offset: 0x1065190 VA: 0x1065190
	public void .ctor(int error) { }

	// RVA: 0x10651CC Offset: 0x10651CC VA: 0x10651CC
	public void .ctor(int error, string message) { }

	// RVA: 0x10651FC Offset: 0x10651FC VA: 0x10651FC
	public void .ctor(string message) { }

	// RVA: 0x1065284 Offset: 0x1065284 VA: 0x1065284
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x1065314 Offset: 0x1065314 VA: 0x1065314
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x10653B0 Offset: 0x10653B0 VA: 0x10653B0
	public int get_NativeErrorCode() { }

	// RVA: 0x10653B8 Offset: 0x10653B8 VA: 0x10653B8 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x106518C Offset: 0x106518C VA: 0x106518C
	internal static string W32ErrorMessage(int error_code) { }
}

// Namespace: System.Diagnostics
public class DataReceivedEventArgs : EventArgs // TypeDefIndex: 1313
{}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xC3C580 Offset: 0xC3C580 VA: 0xC3C580
public class MonitoringDescriptionAttribute : DescriptionAttribute // TypeDefIndex: 1314
{
	// Properties
	public override string Description { get; }

	// Methods

	// RVA: 0x106597C Offset: 0x106597C VA: 0x106597C
	public void .ctor(string description) { }

	// RVA: 0x10659F4 Offset: 0x10659F4 VA: 0x10659F4 Slot: 7
	public override string get_Description() { }
}

// Namespace: System.Diagnostics
[DesignerAttribute] // RVA: 0xC3C594 Offset: 0xC3C594 VA: 0xC3C594
[DefaultEventAttribute] // RVA: 0xC3C594 Offset: 0xC3C594 VA: 0xC3C594
[DefaultPropertyAttribute] // RVA: 0xC3C594 Offset: 0xC3C594 VA: 0xC3C594
[MonitoringDescriptionAttribute] // RVA: 0xC3C594 Offset: 0xC3C594 VA: 0xC3C594
public class Process : Component // TypeDefIndex: 1315
{
	// Fields
	private IntPtr process_handle; // 0x30
	private int pid; // 0x38
	private bool enableRaisingEvents; // 0x3C
	private bool already_waiting; // 0x3D
	private ISynchronizeInvoke synchronizingObject; // 0x40
	private EventHandler exited_event; // 0x48
	private IntPtr stdout_rd; // 0x50
	private IntPtr stderr_rd; // 0x58
	private ProcessModuleCollection module_collection; // 0x60
	private string process_name; // 0x68
	private StreamReader error_stream; // 0x70
	private StreamWriter input_stream; // 0x78
	private StreamReader output_stream; // 0x80
	private ProcessStartInfo start_info; // 0x88
	private Process.AsyncModes async_mode; // 0x90
	private bool output_canceled; // 0x94
	private bool error_canceled; // 0x95
	private Process.ProcessAsyncReader async_output; // 0x98
	private Process.ProcessAsyncReader async_error; // 0xA0
	private bool disposed; // 0xA8
	private DataReceivedEventHandler OutputDataReceived; // 0xB0
	private DataReceivedEventHandler ErrorDataReceived; // 0xB8

	// Properties
	[BrowsableAttribute] // RVA: 0xC3EC80 Offset: 0xC3EC80 VA: 0xC3EC80
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EC80 Offset: 0xC3EC80 VA: 0xC3EC80
	[MonitoringDescriptionAttribute] // RVA: 0xC3EC80 Offset: 0xC3EC80 VA: 0xC3EC80
	public int ExitCode { get; }
	[MonitoringDescriptionAttribute] // RVA: 0xC3ECE4 Offset: 0xC3ECE4 VA: 0xC3ECE4
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3ECE4 Offset: 0xC3ECE4 VA: 0xC3ECE4
	[BrowsableAttribute] // RVA: 0xC3ECE4 Offset: 0xC3ECE4 VA: 0xC3ECE4
	public IntPtr Handle { get; }
	[BrowsableAttribute] // RVA: 0xC3ED48 Offset: 0xC3ED48 VA: 0xC3ED48
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3ED48 Offset: 0xC3ED48 VA: 0xC3ED48
	[MonitoringDescriptionAttribute] // RVA: 0xC3ED48 Offset: 0xC3ED48 VA: 0xC3ED48
	public bool HasExited { get; }
	[MonitoringDescriptionAttribute] // RVA: 0xC3EDAC Offset: 0xC3EDAC VA: 0xC3EDAC
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EDAC Offset: 0xC3EDAC VA: 0xC3EDAC
	public int Id { get; }
	[MonitoringDescriptionAttribute] // RVA: 0xC3EDFC Offset: 0xC3EDFC VA: 0xC3EDFC
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EDFC Offset: 0xC3EDFC VA: 0xC3EDFC
	public string ProcessName { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EE4C Offset: 0xC3EE4C VA: 0xC3EE4C
	[BrowsableAttribute] // RVA: 0xC3EE4C Offset: 0xC3EE4C VA: 0xC3EE4C
	[MonitoringDescriptionAttribute] // RVA: 0xC3EE4C Offset: 0xC3EE4C VA: 0xC3EE4C
	public ProcessStartInfo StartInfo { get; }
	private static bool IsWindows { get; }

	// Methods

	// RVA: 0x10659FC Offset: 0x10659FC VA: 0x10659FC
	private void .ctor(IntPtr handle, int id) { }

	// RVA: 0x1065A38 Offset: 0x1065A38 VA: 0x1065A38
	public void .ctor() { }

	// RVA: 0x1065A40 Offset: 0x1065A40 VA: 0x1065A40
	private void StartExitCallbackIfNeeded() { }

	// RVA: 0x1065A44 Offset: 0x1065A44 VA: 0x1065A44
	private static int ExitCode_internal(IntPtr handle) { }

	// RVA: 0x1065A48 Offset: 0x1065A48 VA: 0x1065A48
	public int get_ExitCode() { }

	// RVA: 0x1065B0C Offset: 0x1065B0C VA: 0x1065B0C
	public IntPtr get_Handle() { }

	// RVA: 0x1065B14 Offset: 0x1065B14 VA: 0x1065B14
	public bool get_HasExited() { }

	// RVA: 0x1065BBC Offset: 0x1065BBC VA: 0x1065BBC
	public int get_Id() { }

	// RVA: 0x1065C48 Offset: 0x1065C48 VA: 0x1065C48
	private static string ProcessName_internal(IntPtr handle) { }

	// RVA: 0x1065C4C Offset: 0x1065C4C VA: 0x1065C4C
	public string get_ProcessName() { }

	// RVA: 0x1065DEC Offset: 0x1065DEC VA: 0x1065DEC
	public ProcessStartInfo get_StartInfo() { }

	// RVA: 0x1065F0C Offset: 0x1065F0C VA: 0x1065F0C
	private static bool Kill_internal(IntPtr handle, int signo) { }

	// RVA: 0x1065F10 Offset: 0x1065F10 VA: 0x1065F10
	private bool Close(int signo) { }

	// RVA: 0x1065FF8 Offset: 0x1065FF8 VA: 0x1065FF8
	private static IntPtr GetProcess_internal(int pid) { }

	// RVA: 0x1065FFC Offset: 0x1065FFC VA: 0x1065FFC
	private static int GetPid_internal() { }

	// RVA: 0x1066000 Offset: 0x1066000 VA: 0x1066000
	public static Process GetCurrentProcess() { }

	// RVA: 0x10660D0 Offset: 0x10660D0 VA: 0x10660D0
	public void Kill() { }

	// RVA: 0x10660D8 Offset: 0x10660D8 VA: 0x10660D8
	private static bool ShellExecuteEx_internal(ProcessStartInfo startInfo, ref Process.ProcInfo proc_info) { }

	// RVA: 0x10660DC Offset: 0x10660DC VA: 0x10660DC
	private static bool CreateProcess_internal(ProcessStartInfo startInfo, IntPtr stdin, IntPtr stdout, IntPtr stderr, ref Process.ProcInfo proc_info) { }

	// RVA: 0x10660E0 Offset: 0x10660E0 VA: 0x10660E0
	private static bool Start_shell(ProcessStartInfo startInfo, Process process) { }

	// RVA: 0x10663D0 Offset: 0x10663D0 VA: 0x10663D0
	private static bool Start_noshell(ProcessStartInfo startInfo, Process process) { }

	// RVA: 0x106631C Offset: 0x106631C VA: 0x106631C
	private static void FillUserInfo(ProcessStartInfo startInfo, ref Process.ProcInfo proc_info) { }

	// RVA: 0x10674D0 Offset: 0x10674D0 VA: 0x10674D0
	private static bool Start_common(ProcessStartInfo startInfo, Process process) { }

	// RVA: 0x1067658 Offset: 0x1067658 VA: 0x1067658
	public bool Start() { }

	// RVA: 0x10676C8 Offset: 0x10676C8 VA: 0x10676C8 Slot: 3
	public override string ToString() { }

	// RVA: 0x106776C Offset: 0x106776C VA: 0x106776C
	private bool WaitForExit_internal(IntPtr handle, int ms) { }

	// RVA: 0x1067770 Offset: 0x1067770 VA: 0x1067770
	public bool WaitForExit(int milliseconds) { }

	// RVA: 0x10676C4 Offset: 0x10676C4 VA: 0x10676C4
	private void Process_free_internal(IntPtr handle) { }

	// RVA: 0x1067A60 Offset: 0x1067A60 VA: 0x1067A60 Slot: 14
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1067C74 Offset: 0x1067C74 VA: 0x1067C74 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x106743C Offset: 0x106743C VA: 0x106743C
	private static bool get_IsWindows() { }
}

// Namespace: 
private struct Process.ProcInfo // TypeDefIndex: 1316
{
	// Fields
	public IntPtr process_handle; // 0x0
	public IntPtr thread_handle; // 0x8
	public int pid; // 0x10
	public int tid; // 0x14
	public string[] envKeys; // 0x18
	public string[] envValues; // 0x20
	public string UserName; // 0x28
	public string Domain; // 0x30
	public IntPtr Password; // 0x38
	public bool LoadUserProfile; // 0x40
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC3C63C Offset: 0xC3C63C VA: 0xC3C63C
private enum Process.AsyncModes // TypeDefIndex: 1317
{
	// Fields
	public int value__; // 0x0
	public const Process.AsyncModes NoneYet = 0;
	public const Process.AsyncModes SyncOutput = 1;
	public const Process.AsyncModes SyncError = 2;
	public const Process.AsyncModes AsyncOutput = 4;
	public const Process.AsyncModes AsyncError = 8;
}

// Namespace: 
private sealed class Process.ProcessAsyncReader // TypeDefIndex: 1318
{
	// Fields
	public object Sock; // 0x10
	public IntPtr handle; // 0x18
	public object state; // 0x20
	public AsyncCallback callback; // 0x28
	public ManualResetEvent wait_handle; // 0x30
	public Exception delayedException; // 0x38
	public object EndPoint; // 0x40
	private byte[] buffer; // 0x48
	public int Offset; // 0x50
	public int Size; // 0x54
	public int SockFlags; // 0x58
	public object AcceptSocket; // 0x60
	public object[] Addresses; // 0x68
	public int port; // 0x70
	public object Buffers; // 0x78
	public bool ReuseSocket; // 0x80
	public object acc_socket; // 0x88
	public int total; // 0x90
	public bool completed_sync; // 0x94
	private bool completed; // 0x95
	private bool err_out; // 0x96
	internal int error; // 0x98
	public int operation; // 0x9C
	public object ares; // 0xA0
	public int EndCalled; // 0xA8
	private Process process; // 0xB0
	private Stream stream; // 0xB8
	private StringBuilder sb; // 0xC0
	private Encoding outputEncoding; // 0xC8
	public Process.AsyncReadHandler ReadHandler; // 0xD0

	// Properties
	public bool IsCompleted { get; }
	public WaitHandle WaitHandle { get; }

	// Methods

	// RVA: 0x1067978 Offset: 0x1067978 VA: 0x1067978
	public bool get_IsCompleted() { }

	// RVA: 0x1067980 Offset: 0x1067980 VA: 0x1067980
	public WaitHandle get_WaitHandle() { }

	// RVA: 0x1067C40 Offset: 0x1067C40 VA: 0x1067C40
	public void Close() { }
}

// Namespace: 
private sealed class Process.AsyncReadHandler : MulticastDelegate // TypeDefIndex: 1319
{
	// Methods

	// RVA: 0x1067CF8 Offset: 0x1067CF8 VA: 0x1067CF8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1067D08 Offset: 0x1067D08 VA: 0x1067D08 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1067F08 Offset: 0x1067F08 VA: 0x1067F08 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1067F3C Offset: 0x1067F3C VA: 0x1067F3C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Diagnostics
[DefaultMemberAttribute] // RVA: 0xC3C64C Offset: 0xC3C64C VA: 0xC3C64C
public class ProcessModuleCollection : ReadOnlyCollectionBase // TypeDefIndex: 1320
{}

// Namespace: System.Diagnostics
[TypeConverterAttribute] // RVA: 0xC3C684 Offset: 0xC3C684 VA: 0xC3C684
public sealed class ProcessStartInfo // TypeDefIndex: 1321
{
	// Fields
	private string arguments; // 0x10
	private IntPtr error_dialog_parent_handle; // 0x18
	private string filename; // 0x20
	private string verb; // 0x28
	private string working_directory; // 0x30
	private ProcessStringDictionary envVars; // 0x38
	private bool create_no_window; // 0x40
	private bool error_dialog; // 0x41
	private bool redirect_standard_error; // 0x42
	private bool redirect_standard_input; // 0x43
	private bool redirect_standard_output; // 0x44
	private bool use_shell_execute; // 0x45
	private ProcessWindowStyle window_style; // 0x48
	private Encoding encoding_stderr; // 0x50
	private Encoding encoding_stdout; // 0x58
	private string username; // 0x60
	private string domain; // 0x68
	private SecureString password; // 0x70
	private bool load_user_profile; // 0x78
	private static readonly string[] empty; // 0x0

	// Properties
	[MonitoringDescriptionAttribute] // RVA: 0xC3EEB0 Offset: 0xC3EEB0 VA: 0xC3EEB0
	[NotifyParentPropertyAttribute] // RVA: 0xC3EEB0 Offset: 0xC3EEB0 VA: 0xC3EEB0
	[DefaultValueAttribute] // RVA: 0xC3EEB0 Offset: 0xC3EEB0 VA: 0xC3EEB0
	[RecommendedAsConfigurableAttribute] // RVA: 0xC3EEB0 Offset: 0xC3EEB0 VA: 0xC3EEB0
	[TypeConverterAttribute] // RVA: 0xC3EEB0 Offset: 0xC3EEB0 VA: 0xC3EEB0
	public string Arguments { get; set; }
	[DefaultValueAttribute] // RVA: 0xC3EF5C Offset: 0xC3EF5C VA: 0xC3EF5C
	[MonitoringDescriptionAttribute] // RVA: 0xC3EF5C Offset: 0xC3EF5C VA: 0xC3EF5C
	[NotifyParentPropertyAttribute] // RVA: 0xC3EF5C Offset: 0xC3EF5C VA: 0xC3EF5C
	public bool CreateNoWindow { set; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EFC0 Offset: 0xC3EFC0 VA: 0xC3EFC0
	[DefaultValueAttribute] // RVA: 0xC3EFC0 Offset: 0xC3EFC0 VA: 0xC3EFC0
	[EditorAttribute] // RVA: 0xC3EFC0 Offset: 0xC3EFC0 VA: 0xC3EFC0
	[MonitoringDescriptionAttribute] // RVA: 0xC3EFC0 Offset: 0xC3EFC0 VA: 0xC3EFC0
	[NotifyParentPropertyAttribute] // RVA: 0xC3EFC0 Offset: 0xC3EFC0 VA: 0xC3EFC0
	public StringDictionary EnvironmentVariables { get; }
	internal bool HaveEnvVars { get; }
	[RecommendedAsConfigurableAttribute] // RVA: 0xC3F078 Offset: 0xC3F078 VA: 0xC3F078
	[NotifyParentPropertyAttribute] // RVA: 0xC3F078 Offset: 0xC3F078 VA: 0xC3F078
	[MonitoringDescriptionAttribute] // RVA: 0xC3F078 Offset: 0xC3F078 VA: 0xC3F078
	[TypeConverterAttribute] // RVA: 0xC3F078 Offset: 0xC3F078 VA: 0xC3F078
	[EditorAttribute] // RVA: 0xC3F078 Offset: 0xC3F078 VA: 0xC3F078
	[DefaultValueAttribute] // RVA: 0xC3F078 Offset: 0xC3F078 VA: 0xC3F078
	public string FileName { get; set; }
	[NotifyParentPropertyAttribute] // RVA: 0xC3F164 Offset: 0xC3F164 VA: 0xC3F164
	[DefaultValueAttribute] // RVA: 0xC3F164 Offset: 0xC3F164 VA: 0xC3F164
	[MonitoringDescriptionAttribute] // RVA: 0xC3F164 Offset: 0xC3F164 VA: 0xC3F164
	public bool RedirectStandardError { get; set; }
	[MonitoringDescriptionAttribute] // RVA: 0xC3F1C8 Offset: 0xC3F1C8 VA: 0xC3F1C8
	[DefaultValueAttribute] // RVA: 0xC3F1C8 Offset: 0xC3F1C8 VA: 0xC3F1C8
	[NotifyParentPropertyAttribute] // RVA: 0xC3F1C8 Offset: 0xC3F1C8 VA: 0xC3F1C8
	public bool RedirectStandardInput { get; }
	[DefaultValueAttribute] // RVA: 0xC3F22C Offset: 0xC3F22C VA: 0xC3F22C
	[NotifyParentPropertyAttribute] // RVA: 0xC3F22C Offset: 0xC3F22C VA: 0xC3F22C
	[MonitoringDescriptionAttribute] // RVA: 0xC3F22C Offset: 0xC3F22C VA: 0xC3F22C
	public bool RedirectStandardOutput { get; set; }
	public Encoding StandardErrorEncoding { get; }
	public Encoding StandardOutputEncoding { get; }
	[MonitoringDescriptionAttribute] // RVA: 0xC3F290 Offset: 0xC3F290 VA: 0xC3F290
	[NotifyParentPropertyAttribute] // RVA: 0xC3F290 Offset: 0xC3F290 VA: 0xC3F290
	[DefaultValueAttribute] // RVA: 0xC3F290 Offset: 0xC3F290 VA: 0xC3F290
	public bool UseShellExecute { get; set; }
	[MonitoringDescriptionAttribute] // RVA: 0xC3F2F4 Offset: 0xC3F2F4 VA: 0xC3F2F4
	[RecommendedAsConfigurableAttribute] // RVA: 0xC3F2F4 Offset: 0xC3F2F4 VA: 0xC3F2F4
	[TypeConverterAttribute] // RVA: 0xC3F2F4 Offset: 0xC3F2F4 VA: 0xC3F2F4
	[EditorAttribute] // RVA: 0xC3F2F4 Offset: 0xC3F2F4 VA: 0xC3F2F4
	[NotifyParentPropertyAttribute] // RVA: 0xC3F2F4 Offset: 0xC3F2F4 VA: 0xC3F2F4
	[DefaultValueAttribute] // RVA: 0xC3F2F4 Offset: 0xC3F2F4 VA: 0xC3F2F4
	public string WorkingDirectory { get; }
	[NotifyParentPropertyAttribute] // RVA: 0xC3F3E0 Offset: 0xC3F3E0 VA: 0xC3F3E0
	public bool LoadUserProfile { get; }
	[NotifyParentPropertyAttribute] // RVA: 0xC3F3F4 Offset: 0xC3F3F4 VA: 0xC3F3F4
	public string UserName { get; }
	[NotifyParentPropertyAttribute] // RVA: 0xC3F408 Offset: 0xC3F408 VA: 0xC3F408
	public string Domain { get; }
	public SecureString Password { get; }

	// Methods

	// RVA: 0x1065E54 Offset: 0x1065E54 VA: 0x1065E54
	public void .ctor() { }

	// RVA: 0x1067F48 Offset: 0x1067F48 VA: 0x1067F48
	private static void .cctor() { }

	// RVA: 0x1067490 Offset: 0x1067490 VA: 0x1067490
	public string get_Arguments() { }

	// RVA: 0x1067FAC Offset: 0x1067FAC VA: 0x1067FAC
	public void set_Arguments(string value) { }

	// RVA: 0x1067FB4 Offset: 0x1067FB4 VA: 0x1067FB4
	public void set_CreateNoWindow(bool value) { }

	// RVA: 0x106703C Offset: 0x106703C VA: 0x106703C
	public StringDictionary get_EnvironmentVariables() { }

	// RVA: 0x106630C Offset: 0x106630C VA: 0x106630C
	internal bool get_HaveEnvVars() { }

	// RVA: 0x1067488 Offset: 0x1067488 VA: 0x1067488
	public string get_FileName() { }

	// RVA: 0x1067FC0 Offset: 0x1067FC0 VA: 0x1067FC0
	public void set_FileName(string value) { }

	// RVA: 0x1066304 Offset: 0x1066304 VA: 0x1066304
	public bool get_RedirectStandardError() { }

	// RVA: 0x1067FC8 Offset: 0x1067FC8 VA: 0x1067FC8
	public void set_RedirectStandardError(bool value) { }

	// RVA: 0x10662F4 Offset: 0x10662F4 VA: 0x10662F4
	public bool get_RedirectStandardInput() { }

	// RVA: 0x10662FC Offset: 0x10662FC VA: 0x10662FC
	public bool get_RedirectStandardOutput() { }

	// RVA: 0x1067FD4 Offset: 0x1067FD4 VA: 0x1067FD4
	public void set_RedirectStandardOutput(bool value) { }

	// RVA: 0x10674A8 Offset: 0x10674A8 VA: 0x10674A8
	public Encoding get_StandardErrorEncoding() { }

	// RVA: 0x10674A0 Offset: 0x10674A0 VA: 0x10674A0
	public Encoding get_StandardOutputEncoding() { }

	// RVA: 0x1067650 Offset: 0x1067650 VA: 0x1067650
	public bool get_UseShellExecute() { }

	// RVA: 0x1067FE0 Offset: 0x1067FE0 VA: 0x1067FE0
	public void set_UseShellExecute(bool value) { }

	// RVA: 0x1067498 Offset: 0x1067498 VA: 0x1067498
	public string get_WorkingDirectory() { }

	// RVA: 0x10674C8 Offset: 0x10674C8 VA: 0x10674C8
	public bool get_LoadUserProfile() { }

	// RVA: 0x10674B0 Offset: 0x10674B0 VA: 0x10674B0
	public string get_UserName() { }

	// RVA: 0x10674B8 Offset: 0x10674B8 VA: 0x10674B8
	public string get_Domain() { }

	// RVA: 0x10674C0 Offset: 0x10674C0 VA: 0x10674C0
	public SecureString get_Password() { }
}

// Namespace: System.Diagnostics
public enum ProcessWindowStyle // TypeDefIndex: 1322
{
	// Fields
	public int value__; // 0x0
	public const ProcessWindowStyle Hidden = 1;
	public const ProcessWindowStyle Maximized = 3;
	public const ProcessWindowStyle Minimized = 2;
	public const ProcessWindowStyle Normal = 0;
}

// Namespace: System.Diagnostics
public class Stopwatch // TypeDefIndex: 1323
{
	// Fields
	public static readonly long Frequency; // 0x0
	public static readonly bool IsHighResolution; // 0x8
	private long elapsed; // 0x10
	private long started; // 0x18
	private bool is_running; // 0x20

	// Properties
	public TimeSpan Elapsed { get; }
	public long ElapsedMilliseconds { get; }
	public long ElapsedTicks { get; }

	// Methods

	// RVA: 0x1067FEC Offset: 0x1067FEC VA: 0x1067FEC
	public void .ctor() { }

	// RVA: 0x1067FF4 Offset: 0x1067FF4 VA: 0x1067FF4
	private static void .cctor() { }

	// RVA: 0x106805C Offset: 0x106805C VA: 0x106805C
	public static long GetTimestamp() { }

	// RVA: 0x1068060 Offset: 0x1068060 VA: 0x1068060
	public TimeSpan get_Elapsed() { }

	// RVA: 0x10681FC Offset: 0x10681FC VA: 0x10681FC
	public long get_ElapsedMilliseconds() { }

	// RVA: 0x106817C Offset: 0x106817C VA: 0x106817C
	public long get_ElapsedTicks() { }

	// RVA: 0x1068310 Offset: 0x1068310 VA: 0x1068310
	public void Reset() { }

	// RVA: 0x106831C Offset: 0x106831C VA: 0x106831C
	public void Start() { }

	// RVA: 0x1068394 Offset: 0x1068394 VA: 0x1068394
	public void Stop() { }
}

// Namespace: System.IO.Compression
public enum CompressionMode // TypeDefIndex: 1324
{
	// Fields
	public int value__; // 0x0
	public const CompressionMode Decompress = 0;
	public const CompressionMode Compress = 1;
}

// Namespace: System.IO.Compression
public class DeflateStream : Stream // TypeDefIndex: 1325
{
	// Fields
	private Stream base_stream; // 0x10
	private CompressionMode mode; // 0x18
	private bool leaveOpen; // 0x1C
	private bool disposed; // 0x1D
	private DeflateStream.UnmanagedReadOrWrite feeder; // 0x20
	private IntPtr z_stream; // 0x28
	private byte[] io_buffer; // 0x30
	private GCHandle data; // 0x38

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1068760 Offset: 0x1068760 VA: 0x1068760
	public void .ctor(Stream compressedStream, CompressionMode mode) { }

	// RVA: 0x106876C Offset: 0x106876C VA: 0x106876C
	internal void .ctor(Stream compressedStream, CompressionMode mode, bool leaveOpen, bool gzip) { }

	// RVA: 0x1068994 Offset: 0x1068994 VA: 0x1068994 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x10685B8 Offset: 0x10685B8 VA: 0x10685B8
	private static int UnmanagedRead(IntPtr buffer, int length, IntPtr data) { }

	// RVA: 0x1068B88 Offset: 0x1068B88 VA: 0x1068B88
	private int UnmanagedRead(IntPtr buffer, int length) { }

	// RVA: 0x106868C Offset: 0x106868C VA: 0x106868C
	private static int UnmanagedWrite(IntPtr buffer, int length, IntPtr data) { }

	// RVA: 0x1068CF0 Offset: 0x1068CF0 VA: 0x1068CF0
	private int UnmanagedWrite(IntPtr buffer, int length) { }

	// RVA: 0x1068E50 Offset: 0x1068E50 VA: 0x1068E50
	private int ReadInternal(byte[] array, int offset, int count) { }

	// RVA: 0x1068F08 Offset: 0x1068F08 VA: 0x1068F08 Slot: 19
	public override int Read(byte[] dest, int dest_offset, int count) { }

	// RVA: 0x10690EC Offset: 0x10690EC VA: 0x10690EC
	private void WriteInternal(byte[] array, int offset, int count) { }

	// RVA: 0x106919C Offset: 0x106919C VA: 0x106919C Slot: 23
	public override void Write(byte[] src, int src_offset, int count) { }

	// RVA: 0x1068A90 Offset: 0x1068A90 VA: 0x1068A90
	private static void CheckResult(int result, string where) { }

	// RVA: 0x106934C Offset: 0x106934C VA: 0x106934C Slot: 18
	public override void Flush() { }

	// RVA: 0x106943C Offset: 0x106943C VA: 0x106943C Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x1069688 Offset: 0x1069688 VA: 0x1069688 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x10698D4 Offset: 0x10698D4 VA: 0x10698D4 Slot: 27
	public override int EndRead(IAsyncResult async_result) { }

	// RVA: 0x10699FC Offset: 0x10699FC VA: 0x10699FC Slot: 28
	public override void EndWrite(IAsyncResult async_result) { }

	// RVA: 0x1069B24 Offset: 0x1069B24 VA: 0x1069B24 Slot: 21
