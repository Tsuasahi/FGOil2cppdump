	// RVA: 0x18C9C0C Offset: 0x18C9C0C VA: 0x18C9C0C
	public int getId() { }

	// RVA: 0x18C9C14 Offset: 0x18C9C14 VA: 0x18C9C14
	public string getTitle() { }

	// RVA: 0x18C9C1C Offset: 0x18C9C1C VA: 0x18C9C1C
	public int getType() { }

	// RVA: 0x18C9C24 Offset: 0x18C9C24 VA: 0x18C9C24
	public string getDetail() { }

	// RVA: 0x18C9C2C Offset: 0x18C9C2C VA: 0x18C9C2C
	public int getPriority() { }

	// RVA: 0x18C9C34 Offset: 0x18C9C34 VA: 0x18C9C34
	public long getNoticeAt() { }

	// RVA: 0x18C9C3C Offset: 0x18C9C3C VA: 0x18C9C3C
	public long getFinishedAt() { }

	// RVA: 0x18C9C44 Offset: 0x18C9C44 VA: 0x18C9C44 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public enum NewsEntity.enType // TypeDefIndex: 7083
{
	// Fields
	public int value__; // 0x0
	public const NewsEntity.enType HTML_BODY = 1;
	public const NewsEntity.enType HTML_URL = 2;
	public const NewsEntity.enType TEMPLATE = 3;
	public const NewsEntity.enType DATA_ANY = 4;
}

// Namespace: 
public class NewsMaster : DataMasterBase<NewsMaster, NewsEntity, int> // TypeDefIndex: 7084
{
	// Methods

	// RVA: 0x18C9C4C Offset: 0x18C9C4C VA: 0x18C9C4C
	public void .ctor() { }

	// RVA: 0x18C9CA0 Offset: 0x18C9CA0 VA: 0x18C9CA0
	public NewsEntity[] GetEnableEntitiyList() { }
}

// Namespace: 
public class NotEndEventMissionFixEntity : DataEntityBase<string> // TypeDefIndex: 7085
{
	// Fields
	public int eventId; // 0x10
	public int missionId; // 0x14

	// Methods

	// RVA: 0x18CAADC Offset: 0x18CAADC VA: 0x18CAADC
	public void .ctor() { }

	// RVA: 0x18CAB2C Offset: 0x18CAB2C VA: 0x18CAB2C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x18CAB3C Offset: 0x18CAB3C VA: 0x18CAB3C
	public static string CreatePK(int eventId, int missionId) { }
}

// Namespace: 
public class NotEndEventMissionFixMaster : DataMasterBase<NotEndEventMissionFixMaster, NotEndEventMissionFixEntity, string> // TypeDefIndex: 7086
{
	// Methods

	// RVA: 0x18CAB4C Offset: 0x18CAB4C VA: 0x18CAB4C
	public void .ctor() { }

	// RVA: 0x18CABA0 Offset: 0x18CABA0 VA: 0x18CABA0
	public NotEndEventMissionFixEntity GetEntity(int eventId, int missionId) { }

	// RVA: 0x18CAC14 Offset: 0x18CAC14 VA: 0x18CAC14
	public bool TryGetEntity(out NotEndEventMissionFixEntity entity, int eventId, int missionId) { }

	// RVA: 0x18CAC98 Offset: 0x18CAC98 VA: 0x18CAC98
	public NotEndEventMissionFixEntity GetEntityFromId(int eventId, int missionId) { }
}

// Namespace: 
public class NpcFollowerEntity : DataEntityBase<string> // TypeDefIndex: 7087
{
	// Fields
	public long id; // 0x10
	public int questId; // 0x18
	public int questPhase; // 0x1C
	public int priority; // 0x20
	public long leaderSvtId; // 0x28
	public long[] svtEquipIds; // 0x30
	public int flag; // 0x38
	public Dictionary<string, object> npcScript; // 0x40

	// Methods

	// RVA: 0x18D6A0C Offset: 0x18D6A0C VA: 0x18D6A0C
	public void .ctor() { }

	// RVA: 0x18D6A5C Offset: 0x18D6A5C VA: 0x18D6A5C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x18D6A70 Offset: 0x18D6A70 VA: 0x18D6A70
	public static string CreatePK(long id, int questId, int questPhase) { }

	// RVA: 0x18D6A80 Offset: 0x18D6A80 VA: 0x18D6A80
	public int GetScriptInt(string key, int defVal = -1) { }

	// RVA: 0x18D6B84 Offset: 0x18D6B84 VA: 0x18D6B84
	public int GetDispLimitCnt() { }

	// RVA: 0x18D6BD8 Offset: 0x18D6BD8 VA: 0x18D6BD8
	public bool IsExistSvtChangeParam() { }

	// RVA: 0x18D6C44 Offset: 0x18D6C44 VA: 0x18D6C44
	private Dictionary<string, object> GetSvtChangeData() { }

	// RVA: 0x18D6D14 Offset: 0x18D6D14 VA: 0x18D6D14
	private Dictionary<string, object>[] GetSvtChangeDataParams(string key) { }

	// RVA: 0x18D6F98 Offset: 0x18D6F98 VA: 0x18D6F98
	private string GetSvtChangeValueString(string key, int priority, string defaultValue) { }

	// RVA: 0x18D70FC Offset: 0x18D70FC VA: 0x18D70FC
	private int GetSvtChangeValueInt(string key, int priority, int defaultValue) { }

	// RVA: 0x18D7268 Offset: 0x18D7268 VA: 0x18D7268
	public string GetServantName(int priority, string defaultValue) { }

	// RVA: 0x18D72F0 Offset: 0x18D72F0 VA: 0x18D72F0
	public int GetServantTd(int priority, int defaultValue) { }

	// RVA: 0x18D7378 Offset: 0x18D7378 VA: 0x18D7378
	public int GetBattleSvtId(int priority, int defaultValue) { }

	// RVA: 0x18D7400 Offset: 0x18D7400 VA: 0x18D7400
	public int GetServantVoiceId(int priority, int defaultValue) { }

	// RVA: 0x18D7488 Offset: 0x18D7488 VA: 0x18D7488
	private bool HasFlag(NpcFollowerEntity.Flag targetFlag) { }

	// RVA: 0x18D7498 Offset: 0x18D7498 VA: 0x18D7498
	public bool IsRecommendedFollower() { }

	// RVA: 0x18D74A4 Offset: 0x18D74A4 VA: 0x18D74A4
	public bool IsMyServantOrNpc() { }

	// RVA: 0x18D74B0 Offset: 0x18D74B0 VA: 0x18D74B0
	public bool IsFixedNpc() { }

	// RVA: 0x18D74BC Offset: 0x18D74BC VA: 0x18D74BC
	public int GetEventDeckIndex() { }

	// RVA: 0x18D7510 Offset: 0x18D7510 VA: 0x18D7510
	public int GetImageSvtId() { }
}

// Namespace: 
private enum NpcFollowerEntity.Flag // TypeDefIndex: 7088
{
	// Fields
	public int value__; // 0x0
	public const NpcFollowerEntity.Flag RECOMMENDED_ICON = 1;
	public const NpcFollowerEntity.Flag IS_MY_SVT_OR_NPC = 2;
	public const NpcFollowerEntity.Flag FIXED_NPC = 4;
}

// Namespace: 
public class NpcFollowerMaster : DataMasterBase<NpcFollowerMaster, NpcFollowerEntity, string> // TypeDefIndex: 7089
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1A78 Offset: 0xCC1A78 VA: 0xCC1A78
	private static Func<NpcFollowerEntity, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x205729C Offset: 0x205729C VA: 0x205729C
	public void .ctor() { }

	// RVA: 0x20572F0 Offset: 0x20572F0 VA: 0x20572F0
	public NpcFollowerEntity GetEntity(long id, int questId, int questPhase) { }

	// RVA: 0x2057374 Offset: 0x2057374 VA: 0x2057374
	public bool TryGetEntity(out NpcFollowerEntity entity, long id, int questId, int questPhase) { }

	// RVA: 0x2057400 Offset: 0x2057400 VA: 0x2057400
	public NpcFollowerEntity getEntityFromId(long followerId, int questId, int questPhase) { }

	// RVA: 0x20576F4 Offset: 0x20576F4 VA: 0x20576F4
	public NpcFollowerEntity[] GetQuestEntitiyList(int questId, int questPhase) { }

	// RVA: 0x2057CE8 Offset: 0x2057CE8 VA: 0x2057CE8
	public FollowerInfo[] GetQuestFollowerList(int questId, int questPhase) { }

	// RVA: 0x20585BC Offset: 0x20585BC VA: 0x20585BC
	public FollowerInfo GetFollower(int questId, int questPhase, long followerId) { }

	// RVA: 0x20587E8 Offset: 0x20587E8 VA: 0x20587E8
	public NpcFollowerEntity GetEntity(int questId, int questPhase, long leaderSvtId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37C4C Offset: 0xD37C4C VA: 0xD37C4C
	// RVA: 0x205891C Offset: 0x205891C VA: 0x205891C
	private static int <GetQuestEntitiyList>m__0(NpcFollowerEntity e) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEE70 Offset: 0xCAEE70 VA: 0xCAEE70
private sealed class NpcFollowerMaster.<GetEntity>c__AnonStorey0 // TypeDefIndex: 7090
{
	// Fields
	internal int questId; // 0x10
	internal int questPhase; // 0x14
	internal long leaderSvtId; // 0x18

	// Methods

	// RVA: 0x2058914 Offset: 0x2058914 VA: 0x2058914
	public void .ctor() { }

	// RVA: 0x2058944 Offset: 0x2058944 VA: 0x2058944
	internal bool <>m__0(NpcFollowerEntity x) { }
}

// Namespace: 
public class NpcFollowerReleaseEntity : DataEntityBase<string> // TypeDefIndex: 7091
{
	// Fields
	public long id; // 0x10
	public int questId; // 0x18
	public int questPhase; // 0x1C
	public int condType; // 0x20
	public int condTargetId; // 0x24
	public int condValue; // 0x28

	// Methods

	// RVA: 0x20589A8 Offset: 0x20589A8 VA: 0x20589A8
	public void .ctor() { }

	// RVA: 0x20589F8 Offset: 0x20589F8 VA: 0x20589F8 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x2058A0C Offset: 0x2058A0C VA: 0x2058A0C
	public static string CreatePK(long id, int questId, int questPhase) { }

	// RVA: 0x2058A1C Offset: 0x2058A1C VA: 0x2058A1C
	public CondType.Kind GetCondType() { }

	// RVA: 0x2057C68 Offset: 0x2057C68 VA: 0x2057C68
	public bool IsEnable() { }
}

// Namespace: 
public class NpcFollowerReleaseMaster : DataMasterBase<NpcFollowerReleaseMaster, NpcFollowerReleaseEntity, string> // TypeDefIndex: 7092
{
	// Methods

	// RVA: 0x2058A24 Offset: 0x2058A24 VA: 0x2058A24
	public void .ctor() { }

	// RVA: 0x2058A78 Offset: 0x2058A78 VA: 0x2058A78
	public NpcFollowerReleaseEntity GetEntity(long id, int questId, int questPhase) { }

	// RVA: 0x2058AFC Offset: 0x2058AFC VA: 0x2058AFC
	public bool TryGetEntity(out NpcFollowerReleaseEntity entity, long id, int questId, int questPhase) { }

	// RVA: 0x2057974 Offset: 0x2057974 VA: 0x2057974
	public NpcFollowerReleaseEntity GetEntityFromId(long followerId, int questId, int questPhase) { }
}

// Namespace: 
public class NpcServantEquipEntity : DataEntityBase<long> // TypeDefIndex: 7093
{
	// Fields
	public long id; // 0x10
	public int svtId; // 0x18
	public int lv; // 0x1C
	public int limitCount; // 0x20

	// Methods

	// RVA: 0x2058B88 Offset: 0x2058B88 VA: 0x2058B88
	public void .ctor() { }

	// RVA: 0x2058BD8 Offset: 0x2058BD8 VA: 0x2058BD8 Slot: 5
	protected sealed override long CreatePrimaryKey() { }
}

// Namespace: 
public class NpcServantEquipMaster : DataMasterBase<NpcServantEquipMaster, NpcServantEquipEntity, long> // TypeDefIndex: 7094
{
	// Methods

	// RVA: 0x2058BE0 Offset: 0x2058BE0 VA: 0x2058BE0
	public void .ctor() { }
}

// Namespace: 
public class NpcServantFollowerEntity : DataEntityBase<long> // TypeDefIndex: 7095
{
	// Fields
	public long id; // 0x10
	public int svtId; // 0x18
	public string name; // 0x20
	public int lv; // 0x28
	public int limitCount; // 0x2C
	public int hp; // 0x30
	public int atk; // 0x34
	public int treasureDeviceId; // 0x38
	public int treasureDeviceLv; // 0x3C
	public int skillId1; // 0x40
	public int skillId2; // 0x44
	public int skillId3; // 0x48
	public int skillLv1; // 0x4C
	public int skillLv2; // 0x50
	public int skillLv3; // 0x54
	public int[] passiveSkill; // 0x58
	public int[] appendPassiveSkillIds; // 0x60
	public int[] appendPassiveSkillLvs; // 0x68
	public int flag; // 0x70

	// Methods

	// RVA: 0x2058C34 Offset: 0x2058C34 VA: 0x2058C34
	public void .ctor() { }

	// RVA: 0x2058C84 Offset: 0x2058C84 VA: 0x2058C84
	public static bool IsHideSupport(int flag) { }

	// RVA: 0x2058C8C Offset: 0x2058C8C VA: 0x2058C8C
	public static bool IsNotUsedTreasureDevice(int flag) { }

	// RVA: 0x2058C94 Offset: 0x2058C94 VA: 0x2058C94
	public static bool IsNoDisplayBonusIcon(int flag) { }

	// RVA: 0x2058C9C Offset: 0x2058C9C VA: 0x2058C9C
	public static bool IsApplySvtChange(int flag) { }

	// RVA: 0x2058CA4 Offset: 0x2058CA4 VA: 0x2058CA4
	public static bool IsHideEquip(int flag) { }

	// RVA: 0x2058CAC Offset: 0x2058CAC VA: 0x2058CAC
	public static bool IsNoDisplayBonusIconEquip(int flag) { }

	// RVA: 0x2058CB4 Offset: 0x2058CB4 VA: 0x2058CB4
	public static bool IsNpc(int flag) { }

	// RVA: 0x2058CBC Offset: 0x2058CBC VA: 0x2058CBC Slot: 5
	protected sealed override long CreatePrimaryKey() { }

	// RVA: 0x2058CC4 Offset: 0x2058CC4 VA: 0x2058CC4
	public string GetFollowerName(long followerId, int questId, int questPhase) { }

	// RVA: 0x2058CE8 Offset: 0x2058CE8 VA: 0x2058CE8
	public string GetFollowerName(long followerId, int questId, int questPhase, out bool isChangeName) { }

	// RVA: 0x205900C Offset: 0x205900C VA: 0x205900C
	private int GetFollowerTreasureDeviceId(long followerId, int questId, int questPhase) { }

	// RVA: 0x2058F6C Offset: 0x2058F6C VA: 0x2058F6C
	private NpcFollowerEntity GetNpcFollowerEntity(long followerId, int questId, int questPhase) { }

	// RVA: 0x2057FF8 Offset: 0x2057FF8 VA: 0x2057FF8
	public FollowerInfo getFollowerInfo(long followerId, int questId, int questPhase, int dispLmtCnt = -1, bool isMySvtOrNpc = False, bool isFixedNpc = False, int imageSvtId = 0) { }
}

// Namespace: 
public enum NpcServantFollowerEntity.FlagKind // TypeDefIndex: 7096
{
	// Fields
	public int value__; // 0x0
	public const NpcServantFollowerEntity.FlagKind HIDE_SUPPORT = 1;
	public const NpcServantFollowerEntity.FlagKind NOT_USED_TREASURE_DEVICE = 2;
	public const NpcServantFollowerEntity.FlagKind NO_DISPLAY_BONUS_ICON = 3;
	public const NpcServantFollowerEntity.FlagKind APPLY_SVT_CHANGE = 4;
	public const NpcServantFollowerEntity.FlagKind HIDE_EQUIP = 5;
	public const NpcServantFollowerEntity.FlagKind NO_DISPLAY_BONUS_ICON_EQUIP = 6;
	public const NpcServantFollowerEntity.FlagKind NPC = 0;
}

// Namespace: 
public enum NpcServantFollowerEntity.FlagField // TypeDefIndex: 7097
{
	// Fields
	public int value__; // 0x0
	public const NpcServantFollowerEntity.FlagField HIDE_SUPPORT = 2;
	public const NpcServantFollowerEntity.FlagField NOT_USED_TREASURE_DEVICE = 4;
	public const NpcServantFollowerEntity.FlagField NO_DISPLAY_BONUS_ICON = 8;
	public const NpcServantFollowerEntity.FlagField APPLY_SVT_CHANGE = 16;
	public const NpcServantFollowerEntity.FlagField HIDE_EQUIP = 32;
	public const NpcServantFollowerEntity.FlagField NO_DISPLAY_BONUS_ICON_EQUIP = 64;
	public const NpcServantFollowerEntity.FlagField NPC = 1;
}

// Namespace: 
public class NpcServantFollowerMaster : DataMasterBase<NpcServantFollowerMaster, NpcServantFollowerEntity, long> // TypeDefIndex: 7098
{
	// Methods

	// RVA: 0x2059108 Offset: 0x2059108 VA: 0x2059108
	public void .ctor() { }
}

// Namespace: 
public class OpeningMovieEntity : DataEntityBase<int> // TypeDefIndex: 7099
{
	// Fields
	public int id; // 0x10
	public int priority; // 0x14
	public string name; // 0x18
	public string movieName; // 0x20
	public int commonReleaseId; // 0x28
	public int materialCommonReleaseId; // 0x2C
	public long startedAt; // 0x30
	public long endedAt; // 0x38

	// Methods

	// RVA: 0x205B210 Offset: 0x205B210 VA: 0x205B210
	public void .ctor() { }

	// RVA: 0x205B260 Offset: 0x205B260 VA: 0x205B260 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x205B268 Offset: 0x205B268 VA: 0x205B268
	public bool IsEnable(long nowTime = 0, bool isMaterial = False) { }

	// RVA: 0x205B3A0 Offset: 0x205B3A0 VA: 0x205B3A0
	public bool IsEventPeriod(long nowTime = 0) { }

	// RVA: 0x205B43C Offset: 0x205B43C VA: 0x205B43C
	public bool IsRegisterMaterial() { }
}

// Namespace: 
public class OpeningMovieMaster : DataMasterBase<OpeningMovieMaster, OpeningMovieEntity, int> // TypeDefIndex: 7100
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1A88 Offset: 0xCC1A88 VA: 0xCC1A88
	private static Comparison<OpeningMovieEntity> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCC1A98 Offset: 0xCC1A98 VA: 0xCC1A98
	private static Comparison<OpeningMovieEntity> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x205B50C Offset: 0x205B50C VA: 0x205B50C
	public void .ctor() { }

	// RVA: 0x205B560 Offset: 0x205B560 VA: 0x205B560
	public OpeningMovieEntity[] GetEnableOpeningMovies(long nowTime = 0, OpeningMovieMaster.SortType sortType = 0, bool isMaterial = False) { }

	// RVA: 0x205B8C8 Offset: 0x205B8C8 VA: 0x205B8C8
	public OpeningMovieEntity GetOpeningMovie(string movieFileName) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37C5C Offset: 0xD37C5C VA: 0xD37C5C
	// RVA: 0x205BACC Offset: 0x205BACC VA: 0x205BACC
	private static int <GetEnableOpeningMovies>m__0(OpeningMovieEntity a, OpeningMovieEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37C6C Offset: 0xD37C6C VA: 0xD37C6C
	// RVA: 0x205BB0C Offset: 0x205BB0C VA: 0x205BB0C
	private static int <GetEnableOpeningMovies>m__1(OpeningMovieEntity a, OpeningMovieEntity b) { }
}

// Namespace: 
public enum OpeningMovieMaster.SortType // TypeDefIndex: 7101
{
	// Fields
	public int value__; // 0x0
	public const OpeningMovieMaster.SortType ID = 0;
	public const OpeningMovieMaster.SortType PRIORITY = 1;
}

// Namespace: 
public class OtherUserGameEntity : DataEntityBase<long> // TypeDefIndex: 7102
{
	// Fields
	public long userId; // 0x10
	public string userName; // 0x18
	public int userLv; // 0x20
	public string friendCode; // 0x28
	public long tutorial1; // 0x30
	public string message; // 0x38
	public long pushUserSvtId; // 0x40
	public ServantLeaderInfo[] userSvtLeaderHash; // 0x48
	public ServantLeaderInfo[] eventUserSvtLeaderHash; // 0x50
	public int[] mainSupportDeckIds; // 0x58
	public int[] eventSupportDeckIds; // 0x60

	// Methods

	// RVA: 0x179886C Offset: 0x179886C VA: 0x179886C
	public void .ctor() { }

	// RVA: 0x17988BC Offset: 0x17988BC VA: 0x17988BC
	public static OtherUserGameEntity.ReturnSupportServantType GetReturnTypeByQuestId(int questId) { }

	// RVA: 0x1798968 Offset: 0x1798968 VA: 0x1798968
	private ServantLeaderInfo[] GetServantLeaderInfoByReturnType(OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1798980 Offset: 0x1798980 VA: 0x1798980
	public bool IsSameSupportDeck() { }

	// RVA: 0x1798CD0 Offset: 0x1798CD0 VA: 0x1798CD0 Slot: 5
	protected sealed override long CreatePrimaryKey() { }

	// RVA: 0x1798CD8 Offset: 0x1798CD8 VA: 0x1798CD8
	public long getUserSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1798D78 Offset: 0x1798D78 VA: 0x1798D78
	public int getSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1798EBC Offset: 0x1798EBC VA: 0x1798EBC
	public int getLv(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1798F98 Offset: 0x1798F98 VA: 0x1798F98
	public int getMaxLv(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799088 Offset: 0x1799088 VA: 0x1799088
	public int getLimitCount(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1799134 Offset: 0x1799134 VA: 0x1799134
	public int getHp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799210 Offset: 0x1799210 VA: 0x1799210
	public int getAdjustHp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x17992EC Offset: 0x17992EC VA: 0x17992EC
	public int getAtk(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x17993C8 Offset: 0x17993C8 VA: 0x17993C8
	public int getAdjustAtk(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x17994A4 Offset: 0x17994A4 VA: 0x17994A4
	public long getEquipUserSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x17995F4 Offset: 0x17995F4 VA: 0x17995F4
	public int getEquipSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799738 Offset: 0x1799738 VA: 0x1799738
	public int getEquipHp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x179981C Offset: 0x179981C VA: 0x179981C
	public int getEquipAtk(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799900 Offset: 0x1799900 VA: 0x1799900
	public int getEquipExp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x17999B4 Offset: 0x17999B4 VA: 0x17999B4
	public long getUpdatedAt(int classPos) { }

	// RVA: 0x1799A08 Offset: 0x1799A08 VA: 0x1799A08
	public int[] getSkillIdList(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1799AC4 Offset: 0x1799AC4 VA: 0x1799AC4
	public int[] getSkillLevelList(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1799B80 Offset: 0x1799B80 VA: 0x1799B80
	public void getSkillInfo(out SkillInfo[] skillInfoList, int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799CE0 Offset: 0x1799CE0 VA: 0x1799CE0
	public bool getTreasureDeviceInfo(out TreasureDvcInfo tdInfo, int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799E24 Offset: 0x1799E24 VA: 0x1799E24
	public bool getTreasureDeviceInfo(out int tdLv, out int tdMaxLv, int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1799F04 Offset: 0x1799F04 VA: 0x1799F04
	public int getTreasureDeviceLevelIcon(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1798C00 Offset: 0x1798C00 VA: 0x1798C00
	public ServantLeaderInfo getServantLeaderInfo(int classPos, bool isExist, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x1799FF4 Offset: 0x1799FF4 VA: 0x1799FF4
	public EquipTargetInfo getEquipInfo(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }
}

// Namespace: 
public enum OtherUserGameEntity.ReturnSupportServantType // TypeDefIndex: 7103
{
	// Fields
	public int value__; // 0x0
	public const OtherUserGameEntity.ReturnSupportServantType MainQuest = 0;
	public const OtherUserGameEntity.ReturnSupportServantType EventQuest = 1;
}

// Namespace: 
public class OtherUserGameMaster : DataMasterBase<OtherUserGameMaster, OtherUserGameEntity, long> // TypeDefIndex: 7104
{
	// Methods

	// RVA: 0x179A0C8 Offset: 0x179A0C8 VA: 0x179A0C8
	public void .ctor() { }

	// RVA: 0x179A11C Offset: 0x179A11C VA: 0x179A11C
	public OtherUserGameEntity[] GetFriendCodeList(string friendCode) { }

	// RVA: 0x179A2A0 Offset: 0x179A2A0 VA: 0x179A2A0
	public void continueDeviceOtherUser() { }
}

// Namespace: 
public class PartialMaintenanceEntity : DataEntityBase<int> // TypeDefIndex: 7105
{
	// Fields
	public int type; // 0x10
	public string message; // 0x18
	public long startedAt; // 0x20
	public long endedAt; // 0x28

	// Methods

	// RVA: 0x179BBE4 Offset: 0x179BBE4 VA: 0x179BBE4
	public void .ctor() { }

	// RVA: 0x179BC34 Offset: 0x179BC34 VA: 0x179BC34 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x179BC3C Offset: 0x179BC3C VA: 0x179BC3C
	public bool isMaintenanceNow(PartialMaintenanceEntity.PartialMaintenanceType mainteType) { }

	// RVA: 0x179BCDC Offset: 0x179BCDC VA: 0x179BCDC
	public bool isPartialMaintenanceType(PartialMaintenanceEntity.PartialMaintenanceType mainteType) { }
}

// Namespace: 
public enum PartialMaintenanceEntity.PartialMaintenanceType // TypeDefIndex: 7106
{
	// Fields
	public int value__; // 0x0
	public const PartialMaintenanceEntity.PartialMaintenanceType STONE_GACHA = 1;
	public const PartialMaintenanceEntity.PartialMaintenanceType CHALICE = 2;
}

// Namespace: 
public class PartialMaintenanceMaster : DataMasterBase<PartialMaintenanceMaster, PartialMaintenanceEntity, int> // TypeDefIndex: 7107
{
	// Methods

	// RVA: 0x179BCEC Offset: 0x179BCEC VA: 0x179BCEC
	public void .ctor() { }

	// RVA: 0x179BD40 Offset: 0x179BD40 VA: 0x179BD40
	public bool isStoneGachaMaintenanceNow() { }

	// RVA: 0x179BE5C Offset: 0x179BE5C VA: 0x179BE5C
	public bool isChaliceMaintenanceNow() { }

	// RVA: 0x179BE64 Offset: 0x179BE64 VA: 0x179BE64
	public bool isChaliceMaintenaceEnd() { }

	// RVA: 0x179BD48 Offset: 0x179BD48 VA: 0x179BD48
	private bool isMaintenanceNow(PartialMaintenanceEntity.PartialMaintenanceType mainteType) { }
}

// Namespace: 
public class PickupUserFollowerEntity : DataEntityBase<long> // TypeDefIndex: 7108
{
	// Fields
	public FollowerInfo[] followerInfo; // 0x10
	public long userId; // 0x18
	public long expireAt; // 0x20

	// Methods

	// RVA: 0x1BD24FC Offset: 0x1BD24FC VA: 0x1BD24FC
	public void .ctor() { }

	// RVA: 0x1BD254C Offset: 0x1BD254C VA: 0x1BD254C Slot: 5
	protected sealed override long CreatePrimaryKey() { }

	// RVA: 0x1BD2554 Offset: 0x1BD2554 VA: 0x1BD2554
	public FollowerInfo getFollowerInfo(long followerId, int followerType = -1) { }
}

// Namespace: 
public class PickupUserFollowerMaster : DataMasterBase<PickupUserFollowerMaster, PickupUserFollowerEntity, long> // TypeDefIndex: 7109
{
	// Methods

	// RVA: 0x1BD26A0 Offset: 0x1BD26A0 VA: 0x1BD26A0
	public void .ctor() { }
}

// Namespace: 
public class PrivilegeEntity : DataEntityBase<int> // TypeDefIndex: 7110
{
	// Fields
	public int id; // 0x10
	public int defaultNum; // 0x14
	public int validTime; // 0x18

	// Methods

	// RVA: 0x19D13D0 Offset: 0x19D13D0 VA: 0x19D13D0
	public void .ctor() { }

	// RVA: 0x19D1420 Offset: 0x19D1420 VA: 0x19D1420 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class PrivilegeMaster : DataMasterBase<PrivilegeMaster, PrivilegeEntity, int> // TypeDefIndex: 7111
{
	// Methods

	// RVA: 0x19D1428 Offset: 0x19D1428 VA: 0x19D1428
	public void .ctor() { }
}

// Namespace: 
public class QuestAddEntity : DataEntityBase<string> // TypeDefIndex: 7112
{
	// Fields
	public int questId; // 0x10
	public int priority; // 0x14
	public string name; // 0x18
	public int displayHours; // 0x20
	public int intervalHours; // 0x24
	public int openedAt; // 0x28
	public int closedAt; // 0x2C
	public long startedAt; // 0x30
	public long endedAt; // 0x38

	// Methods

	// RVA: 0x19DEB9C Offset: 0x19DEB9C VA: 0x19DEB9C
	public void .ctor() { }

	// RVA: 0x19DEBEC Offset: 0x19DEBEC VA: 0x19DEBEC Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x19DEBFC Offset: 0x19DEBFC VA: 0x19DEBFC
	public static string CreatePK(int questId, int priority) { }
}

// Namespace: 
public class QuestAddMaster : DataMasterBase<QuestAddMaster, QuestAddEntity, string> // TypeDefIndex: 7113
{
	// Methods

	// RVA: 0x19DEC0C Offset: 0x19DEC0C VA: 0x19DEC0C
	public void .ctor() { }

	// RVA: 0x19DEC60 Offset: 0x19DEC60 VA: 0x19DEC60
	public QuestAddEntity GetEntity(int questId, int priority) { }

	// RVA: 0x19DECD4 Offset: 0x19DECD4 VA: 0x19DECD4
	public bool TryGetEntity(out QuestAddEntity entity, int questId, int priority) { }

	// RVA: 0x19DED58 Offset: 0x19DED58 VA: 0x19DED58
	public QuestAddEntity GetReplaceDataByQuestId(int questId) { }
}

// Namespace: 
public class QuestBehaviorEntity : DataEntityBase<string> // TypeDefIndex: 7114
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public int num; // 0x18
	public int priority; // 0x1C
	public int behaviorType; // 0x20
	public int[] behaviorValues; // 0x28
	public int condType; // 0x30
	public int condTargetId; // 0x34
	public int condNum; // 0x38

	// Methods

	// RVA: 0x1AF466C Offset: 0x1AF466C VA: 0x1AF466C
	public void .ctor() { }

	// RVA: 0x1AF46BC Offset: 0x1AF46BC VA: 0x1AF46BC Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1AF46D0 Offset: 0x1AF46D0 VA: 0x1AF46D0
	public static string CreatePK(int questId, int phase, int num, int priority) { }

	// RVA: 0x1AF46E8 Offset: 0x1AF46E8 VA: 0x1AF46E8
	public long GetQuestPhaseNo() { }

	// RVA: 0x1AF46FC Offset: 0x1AF46FC VA: 0x1AF46FC
	public bool checkBehaviorType(BehaviorType.Kind type) { }

	// RVA: 0x1AF470C Offset: 0x1AF470C VA: 0x1AF470C
	public bool checkConditions() { }

	// RVA: 0x1AF48DC Offset: 0x1AF48DC VA: 0x1AF48DC
	public int getskillId() { }

	// RVA: 0x1AF4920 Offset: 0x1AF4920 VA: 0x1AF4920
	public int getskillLv() { }
}

// Namespace: 
public class QuestBehaviorMaster : DataMasterBase<QuestBehaviorMaster, QuestBehaviorEntity, string> // TypeDefIndex: 7115
{
	// Methods

	// RVA: 0x1AF4968 Offset: 0x1AF4968 VA: 0x1AF4968
	public void .ctor() { }

	// RVA: 0x1AF49BC Offset: 0x1AF49BC VA: 0x1AF49BC
	public QuestBehaviorEntity GetEntity(int questId, int phase, int num, int priority) { }

	// RVA: 0x1AF4A48 Offset: 0x1AF4A48 VA: 0x1AF4A48
	public bool TryGetEntity(out QuestBehaviorEntity entity, int questId, int phase, int num, int priority) { }

	// RVA: 0x1AF4AE4 Offset: 0x1AF4AE4 VA: 0x1AF4AE4 Slot: 4
	public override DataEntityBase[] getList(object obj) { }

	// RVA: 0x1AF4B54 Offset: 0x1AF4B54 VA: 0x1AF4B54
	public int getBattleBg(int questId, int phase, int defaultValue) { }

	// RVA: 0x1AF4D20 Offset: 0x1AF4D20 VA: 0x1AF4D20
	public QuestBehaviorEntity[] getBattleSkill(int questId, int phase) { }

	// RVA: 0x1AF502C Offset: 0x1AF502C VA: 0x1AF502C
	public bool getEnableContinue(int questId, int phase) { }

	// RVA: 0x1AF51C8 Offset: 0x1AF51C8 VA: 0x1AF51C8
	public int[] getBattleIndividuality(int questId, int phase, int[] defVals) { }

	// RVA: 0x1AF53A0 Offset: 0x1AF53A0 VA: 0x1AF53A0
	public Dictionary<long, KeyValuePair<int, int[]>> getPrioredIndividualitiesWithMatched(int[] questIds) { }
}

// Namespace: 
public class QuestConsumeItemEntity : DataEntityBase<int> // TypeDefIndex: 7116
{
	// Fields
	public int questId; // 0x10
	public int[] itemIds; // 0x18
	public int[] nums; // 0x20

	// Methods

	// RVA: 0x173686C Offset: 0x173686C VA: 0x173686C
	public void .ctor() { }

	// RVA: 0x17368BC Offset: 0x17368BC VA: 0x17368BC Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x17368C4 Offset: 0x17368C4 VA: 0x17368C4
	public bool IsAvailableAt(int index) { }

	// RVA: 0x1736968 Offset: 0x1736968 VA: 0x1736968
	public string GetItemConsumeString() { }
}

// Namespace: 
public class QuestConsumeItemMaster : DataMasterBase<QuestConsumeItemMaster, QuestConsumeItemEntity, int> // TypeDefIndex: 7117
{
	// Methods

	// RVA: 0x1736D04 Offset: 0x1736D04 VA: 0x1736D04
	public void .ctor() { }
}

// Namespace: 
public class QuestDateRangeEntity : DataEntityBase<string> // TypeDefIndex: 7118
{
	// Fields
	public int id; // 0x10
	public int idx; // 0x14
	public int openedAt; // 0x18
	public int closedAt; // 0x1C

	// Methods

	// RVA: 0x1736D58 Offset: 0x1736D58 VA: 0x1736D58
	public void .ctor() { }

	// RVA: 0x1736DA8 Offset: 0x1736DA8 VA: 0x1736DA8 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1736DB8 Offset: 0x1736DB8 VA: 0x1736DB8
	public static string CreatePK(int id, int idx) { }

	// RVA: 0x1736DC8 Offset: 0x1736DC8 VA: 0x1736DC8
	public int getQuestDateRangeId() { }

	// RVA: 0x1736DD0 Offset: 0x1736DD0 VA: 0x1736DD0
	public int getIndex() { }

	// RVA: 0x1736DD8 Offset: 0x1736DD8 VA: 0x1736DD8
	public long getOpenedAt() { }

	// RVA: 0x1736DE0 Offset: 0x1736DE0 VA: 0x1736DE0
	public long getClosedAt() { }
}

// Namespace: 
public class QuestDateRangeMaster : DataMasterBase<QuestDateRangeMaster, QuestDateRangeEntity, string> // TypeDefIndex: 7119
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1AA8 Offset: 0xCC1AA8 VA: 0xCC1AA8
	private static Comparison<QuestDateRangeEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1736DE8 Offset: 0x1736DE8 VA: 0x1736DE8
	public void .ctor() { }

	// RVA: 0x1736E3C Offset: 0x1736E3C VA: 0x1736E3C
	public QuestDateRangeEntity GetEntity(int id, int idx) { }

	// RVA: 0x1736EB0 Offset: 0x1736EB0 VA: 0x1736EB0
	public bool TryGetEntity(out QuestDateRangeEntity entity, int id, int idx) { }

	// RVA: 0x1736F34 Offset: 0x1736F34 VA: 0x1736F34
	public List<QuestDateRangeEntity> GetQuestDateRangeEntityList(int questDateRangeId) { }

	// RVA: 0x17371E4 Offset: 0x17371E4 VA: 0x17371E4
	public bool IsPeriodFromOpenedToClosed(int questDateRangeId, long nowTime) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37C7C Offset: 0xD37C7C VA: 0xD37C7C
	// RVA: 0x17373E4 Offset: 0x17373E4 VA: 0x17373E4
	private static int <GetQuestDateRangeEntityList>m__0(QuestDateRangeEntity a, QuestDateRangeEntity b) { }
}

// Namespace: 
public class QuestEntity : DataEntityBase<int> // TypeDefIndex: 7120
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string nameRuby; // 0x20
	public int type; // 0x28
	public int actConsume; // 0x2C
	public int spotId; // 0x30
	public int giftId; // 0x34
	public int priority; // 0x38
	public int bannerType; // 0x3C
	public int bannerId; // 0x40
	public int iconId; // 0x44
	public int charaIconId; // 0x48
	public int giftIconId; // 0x4C
	public int forceOperation; // 0x50
	public int afterClear; // 0x54
	public string[] beforeActionVals; // 0x58
	public string[] afterActionVals; // 0x60
	public int displayHours; // 0x68
	public int intervalHours; // 0x6C
	public int chapterId; // 0x70
	public int chapterSubId; // 0x74
	public string chapterSubStr; // 0x78
	public string recommendLv; // 0x80
	public int hasStartAction; // 0x88
	public long flag; // 0x90
	public int noticeAt; // 0x98
	public int openedAt; // 0x9C
	public int closedAt; // 0xA0
	public int consumeType; // 0xA4
	public int scriptQuestId; // 0xA8
	private bool mIsPhaseDetailed; // 0xAC
	private bool mIsQuestSpotRelease; // 0xAD

	// Methods

	// RVA: 0x1737CB4 Offset: 0x1737CB4 VA: 0x1737CB4
	public void .ctor() { }

	// RVA: 0x1737D0C Offset: 0x1737D0C VA: 0x1737D0C
	public void .ctor(QuestEntity cSrc) { }

	// RVA: 0x17380E8 Offset: 0x17380E8 VA: 0x17380E8 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x17380F0 Offset: 0x17380F0 VA: 0x17380F0
	public QuestEntity GetPhaseDetailedEntity() { }

	// RVA: 0x17381E8 Offset: 0x17381E8 VA: 0x17381E8
	private QuestPhaseDetailEntity GetPhaseDetail() { }

	// RVA: 0x1738368 Offset: 0x1738368 VA: 0x1738368
	private QuestPhaseDetailEntity GetPhaseDetail(int phaseCnt) { }

	// RVA: 0x173848C Offset: 0x173848C VA: 0x173848C
	public bool IsPhaseDetailed() { }

	// RVA: 0x1738494 Offset: 0x1738494 VA: 0x1738494
	public int getQuestId() { }

	// RVA: 0x173849C Offset: 0x173849C VA: 0x173849C
	public string getQuestName() { }

	// RVA: 0x1738548 Offset: 0x1738548 VA: 0x1738548
	public string getQuestNameRuby() { }

	// RVA: 0x1738550 Offset: 0x1738550 VA: 0x1738550
	public int getQuestType() { }

	// RVA: 0x1738558 Offset: 0x1738558 VA: 0x1738558
	public QuestEntity.TypeFlag GetTypeFlag() { }

	// RVA: 0x173856C Offset: 0x173856C VA: 0x173856C
