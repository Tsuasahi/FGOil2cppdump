	public Vector3 saveDiff { get; set; }
	public bool isChanged { get; set; }

	// Methods

	// RVA: 0x14019CC Offset: 0x14019CC VA: 0x14019CC
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCAFE8 Offset: 0xCCAFE8 VA: 0xCCAFE8
	// RVA: 0x1401834 Offset: 0x1401834 VA: 0x1401834
	public Vector3 get_saveDiff() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCAFF8 Offset: 0xCCAFF8 VA: 0xCCAFF8
	// RVA: 0x1400CBC Offset: 0x1400CBC VA: 0x1400CBC
	public void set_saveDiff(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB008 Offset: 0xCCB008 VA: 0xCCB008
	// RVA: 0x140182C Offset: 0x140182C VA: 0x140182C
	public bool get_isChanged() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB018 Offset: 0xCCB018 VA: 0xCCB018
	// RVA: 0x1400CC8 Offset: 0x1400CC8 VA: 0x1400CC8
	public void set_isChanged(bool value) { }

	// RVA: 0x14019C0 Offset: 0x14019C0 VA: 0x14019C0
	public void Init() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28B98 Offset: 0xC28B98 VA: 0xC28B98
[USequencerEventAttribute] // RVA: 0xC28B98 Offset: 0xC28B98 VA: 0xC28B98
public class USFGOActorBattleActionEvent : USEventBase // TypeDefIndex: 8123
{
	// Fields
	public int startValue; // 0x30
	public int countValue; // 0x34
	public USFGOActorBattleActionEvent.ActionType actionType; // 0x38
	public bool isRandomDamagePosition; // 0x3C
	public bool isNoDamageMotion; // 0x3D
	public Vector3 damageNumberOffset; // 0x40
	public Vector3 popupOffset; // 0x4C
	public int effectId; // 0x58
	public int criticalEffectId; // 0x5C
	public int functionIndex; // 0x60
	public string attachNodeName; // 0x68

	// Methods

	// RVA: 0x14020F0 Offset: 0x14020F0 VA: 0x14020F0
	public void .ctor() { }

	// RVA: 0x14021D0 Offset: 0x14021D0 VA: 0x14021D0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14027C0 Offset: 0x14027C0 VA: 0x14027C0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x14027C4 Offset: 0x14027C4 VA: 0x14027C4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x14027D0 Offset: 0x14027D0 VA: 0x14027D0 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x140284C Offset: 0x140284C VA: 0x140284C
	public void AddHasAllEffectIds(ref List<int> effectIdList) { }
}

// Namespace: 
public enum USFGOActorBattleActionEvent.ActionType // TypeDefIndex: 8124
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorBattleActionEvent.ActionType Damage = 0;
	public const USFGOActorBattleActionEvent.ActionType BuffDebuff = 1;
	public const USFGOActorBattleActionEvent.ActionType Heal = 2;
	public const USFGOActorBattleActionEvent.ActionType DamageVoice = 3;
	public const USFGOActorBattleActionEvent.ActionType SilentDead = 4;
	public const USFGOActorBattleActionEvent.ActionType SelfDead = 5;
	public const USFGOActorBattleActionEvent.ActionType MoveToSubMember = 6;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28BF8 Offset: 0xC28BF8 VA: 0xC28BF8
[USequencerEventAttribute] // RVA: 0xC28BF8 Offset: 0xC28BF8 VA: 0xC28BF8
public class USFGOActorBattleActionEventConditional : USFGOActorBattleActionEvent // TypeDefIndex: 8125
{
	// Fields
	public USFGOActorBattleActionEventConditional.OverwriteParamCondition[] conditions; // 0x70

	// Methods

	// RVA: 0x14029AC Offset: 0x14029AC VA: 0x14029AC
	public void .ctor() { }

	// RVA: 0x1402A08 Offset: 0x1402A08 VA: 0x1402A08 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1402A90 Offset: 0x1402A90 VA: 0x1402A90
	protected bool IsExecutable(int treasureDeviceId) { }
}

// Namespace: 
[Serializable]
public class USFGOActorBattleActionEventConditional.OverwriteParamCondition // TypeDefIndex: 8126
{
	// Fields
	public int[] treasureDeviceIds; // 0x10
	public bool isExecute; // 0x18
	public int funcIndex; // 0x1C

	// Methods

	// RVA: 0x1402CC0 Offset: 0x1402CC0 VA: 0x1402CC0
	public void .ctor() { }

	// RVA: 0x1402BFC Offset: 0x1402BFC VA: 0x1402BFC
	public bool IsTarget(int treasureDeviceId) { }

	// RVA: 0x1402B90 Offset: 0x1402B90 VA: 0x1402B90
	public void Overwrite(USFGOActorBattleActionEventConditional targetEvent) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43134 Offset: 0xC43134 VA: 0xC43134
private sealed class USFGOActorBattleActionEventConditional.OverwriteParamCondition.<IsTarget>c__AnonStorey0 // TypeDefIndex: 8127
{
	// Fields
	internal int treasureDeviceId; // 0x10

	// Methods

	// RVA: 0x1402D20 Offset: 0x1402D20 VA: 0x1402D20
	public void .ctor() { }

	// RVA: 0x1402D28 Offset: 0x1402D28 VA: 0x1402D28
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43144 Offset: 0xC43144 VA: 0xC43144
private sealed class USFGOActorBattleActionEventConditional.<IsExecutable>c__AnonStorey0 // TypeDefIndex: 8128
{
	// Fields
	internal int treasureDeviceId; // 0x10

	// Methods

	// RVA: 0x1402B88 Offset: 0x1402B88 VA: 0x1402B88
	public void .ctor() { }

	// RVA: 0x1402BC8 Offset: 0x1402BC8 VA: 0x1402BC8
	internal bool <>m__0(USFGOActorBattleActionEventConditional.OverwriteParamCondition x) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28C58 Offset: 0xC28C58 VA: 0xC28C58
[USequencerEventAttribute] // RVA: 0xC28C58 Offset: 0xC28C58 VA: 0xC28C58
public class USFGOActorChangePosition : USEventBase // TypeDefIndex: 8129
{
	// Fields
	[SerializeField] // RVA: 0xC5D0DC Offset: 0xC5D0DC VA: 0xC5D0DC
	private USFGOActorChangePosition.PosChangeTargetType targetType; // 0x30
	[SerializeField] // RVA: 0xC5D0EC Offset: 0xC5D0EC VA: 0xC5D0EC
	[TooltipAttribute] // RVA: 0xC5D0EC Offset: 0xC5D0EC VA: 0xC5D0EC
	private USFGOActorChangePosition.PosSetType[] fieldActorOrders; // 0x38

	// Properties
	private BattlePerformance Performance { get; }

	// Methods

	// RVA: 0x1402D44 Offset: 0x1402D44 VA: 0x1402D44
	public void .ctor() { }

	// RVA: 0x1402DFC Offset: 0x1402DFC VA: 0x1402DFC
	private BattlePerformance get_Performance() { }

	// RVA: 0x1402E5C Offset: 0x1402E5C VA: 0x1402E5C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14031C0 Offset: 0x14031C0 VA: 0x14031C0
	private BattleActorControl GetPosChangeTargetActor() { }

	// RVA: 0x140332C Offset: 0x140332C VA: 0x140332C
	private USFGOActorChangePosition.PosSetType[] GetCurFieldActorOrders(bool isEnemy, int uniqueId) { }

	// RVA: 0x1403298 Offset: 0x1403298 VA: 0x1403298
	private string GetPosPrefix(bool isEnemy) { }

	// RVA: 0x1403500 Offset: 0x1403500 VA: 0x1403500 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: 
public enum USFGOActorChangePosition.PosChangeTargetType // TypeDefIndex: 8130
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorChangePosition.PosChangeTargetType ACTOR = 1;
}

// Namespace: 
public enum USFGOActorChangePosition.PosSetType // TypeDefIndex: 8131
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorChangePosition.PosSetType TARGET = 0;
	public const USFGOActorChangePosition.PosSetType TARGET_OTHER_FRONT = 1;
	public const USFGOActorChangePosition.PosSetType TARGET_OTHER_BACK = 2;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28CB8 Offset: 0xC28CB8 VA: 0xC28CB8
[USequencerEventAttribute] // RVA: 0xC28CB8 Offset: 0xC28CB8 VA: 0xC28CB8
public class USFGOActorDeadEffectEvent : USEventBase // TypeDefIndex: 8132
{
	// Fields
	[SerializeField] // RVA: 0xC5D138 Offset: 0xC5D138 VA: 0xC5D138
	private float deadDeleteTime; // 0x30
	private const float defaultHeight = 3.5;

	// Methods

	// RVA: 0x1403504 Offset: 0x1403504 VA: 0x1403504
	public void .ctor() { }

	// RVA: 0x1403514 Offset: 0x1403514 VA: 0x1403514 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1403AB4 Offset: 0x1403AB4 VA: 0x1403AB4 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1403AB8 Offset: 0x1403AB8 VA: 0x1403AB8
	private void updateDeadEffect(float val) { }

	// RVA: 0x1403F50 Offset: 0x1403F50 VA: 0x1403F50
	private void OnFinishDead() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28D18 Offset: 0xC28D18 VA: 0xC28D18
[USequencerEventAttribute] // RVA: 0xC28D18 Offset: 0xC28D18 VA: 0xC28D18
public class USFGOActorTimeScale : USEventBase // TypeDefIndex: 8133
{
	// Fields
	public float actorTimeScale; // 0x30
	private float prevTimeScale; // 0x34
	private bool isSafe; // 0x38
	private BattleFBXComponent selfFBX; // 0x40

	// Methods

	// RVA: 0x1404240 Offset: 0x1404240 VA: 0x1404240
	public void .ctor() { }

	// RVA: 0x1404250 Offset: 0x1404250 VA: 0x1404250 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14043D0 Offset: 0x14043D0 VA: 0x14043D0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x14043D4 Offset: 0x14043D4 VA: 0x14043D4 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28D78 Offset: 0xC28D78 VA: 0xC28D78
[USequencerEventAttribute] // RVA: 0xC28D78 Offset: 0xC28D78 VA: 0xC28D78
public class USFGOActorUpdateScale : USEventBase // TypeDefIndex: 8134
{
	// Fields
	[SerializeField] // RVA: 0xC5D148 Offset: 0xC5D148 VA: 0xC5D148
	[TooltipAttribute] // RVA: 0xC5D148 Offset: 0xC5D148 VA: 0xC5D148
	private USFGOActorUpdateScale.UpdateType type; // 0x30
	[SerializeField] // RVA: 0xC5D194 Offset: 0xC5D194 VA: 0xC5D194
	private float value; // 0x34

	// Methods

	// RVA: 0x1404420 Offset: 0x1404420 VA: 0x1404420
	public void .ctor() { }

	// RVA: 0x1404430 Offset: 0x1404430 VA: 0x1404430 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14045DC Offset: 0x14045DC VA: 0x14045DC
	public Vector3 GetScaleByUpdateType(BattleActorControl actor, Vector3 defScale) { }

	// RVA: 0x14046FC Offset: 0x14046FC VA: 0x14046FC Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOActorUpdateScale.UpdateType // TypeDefIndex: 8135
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorUpdateScale.UpdateType RATIO = 0;
	public const USFGOActorUpdateScale.UpdateType OVERWRITE = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28DD8 Offset: 0xC28DD8 VA: 0xC28DD8
[USequencerEventAttribute] // RVA: 0xC28DD8 Offset: 0xC28DD8 VA: 0xC28DD8
[USequencerEventHideDurationAttribute] // RVA: 0xC28DD8 Offset: 0xC28DD8 VA: 0xC28DD8
public class USFGOAmbientFadeEvent : USEventBase // TypeDefIndex: 8136
{
	// Fields
	public UILayer uiLayer; // 0x30
	public AnimationCurve fadeCurve; // 0x38
	public Color fadeColorFrom; // 0x40
	public Color fadeColorTo; // 0x50
	private float currentCurveSampleTime; // 0x60

	// Methods

	// RVA: 0x1404700 Offset: 0x1404700 VA: 0x1404700
	public void .ctor() { }

	// RVA: 0x14048EC Offset: 0x14048EC VA: 0x14048EC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14048F0 Offset: 0x14048F0 VA: 0x14048F0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1404AD8 Offset: 0x1404AD8 VA: 0x1404AD8 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1404C70 Offset: 0x1404C70 VA: 0x1404C70 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1404C7C Offset: 0x1404C7C VA: 0x1404C7C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1404C84 Offset: 0x1404C84 VA: 0x1404C84
	private void Update() { }

	// RVA: 0x1404D84 Offset: 0x1404D84 VA: 0x1404D84
	private void OnEnable() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28E48 Offset: 0xC28E48 VA: 0xC28E48
[USequencerEventAttribute] // RVA: 0xC28E48 Offset: 0xC28E48 VA: 0xC28E48
public class USFGOAnimationCameraEvent : USEventBase // TypeDefIndex: 8137
{
	// Fields
	public GameObject animCamLoc; // 0x30
	public Camera camera; // 0x38
	public string cutNumName; // 0x40
	private AnimationClip animationClip; // 0x48
	public WrapMode wrapMode; // 0x50
	public bool isOpponent; // 0x54
	public float playbackSpeed; // 0x58
	private Transform originalParent; // 0x60
	private Transform cameraRoot; // 0x68
	private Transform cameraAim; // 0x70

	// Methods

	// RVA: 0x1404D88 Offset: 0x1404D88 VA: 0x1404D88
	public void .ctor() { }

	// RVA: 0x1404DE8 Offset: 0x1404DE8 VA: 0x1404DE8
	public void Update() { }

	// RVA: 0x1404E98 Offset: 0x1404E98 VA: 0x1404E98 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14056F8 Offset: 0x14056F8 VA: 0x14056F8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1405F9C Offset: 0x1405F9C VA: 0x1405F9C Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1405FA8 Offset: 0x1405FA8 VA: 0x1405FA8 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x14060AC Offset: 0x14060AC VA: 0x14060AC Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
public enum FGOTarget // TypeDefIndex: 8138
{
	// Fields
	public int value__; // 0x0
	public const FGOTarget ActorObject = 0;
	public const FGOTarget EnemyObject = 1;
	public const FGOTarget Zero = 2;
	public const FGOTarget Camera = 3;
	public const FGOTarget Actor1 = 4;
	public const FGOTarget Actor2 = 5;
	public const FGOTarget Actor3 = 6;
	public const FGOTarget Actor4 = 7;
	public const FGOTarget Actor5 = 8;
	public const FGOTarget Actor6 = 9;
	public const FGOTarget Node = 10;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28EA8 Offset: 0xC28EA8 VA: 0xC28EA8
[USequencerEventAttribute] // RVA: 0xC28EA8 Offset: 0xC28EA8 VA: 0xC28EA8
public class USFGOAttachToParentEvent : USEventBase // TypeDefIndex: 8139
{
	// Fields
	public FGOTarget target; // 0x30
	public Transform parentObject; // 0x38
	public string parentObjectName; // 0x40
	public string nodeName; // 0x48
	public bool flipEffect; // 0x50
	public bool autoDetach; // 0x51
	[TooltipAttribute] // RVA: 0xC5D1A4 Offset: 0xC5D1A4 VA: 0xC5D1A4
	public bool inActor; // 0x52
	public Vector3 tposition; // 0x54
	public Vector3 trotation; // 0x60
	public Vector3 tscale; // 0x6C
	private Transform originalParent; // 0x78
	private Vector3 org_tposition; // 0x80
	private Vector3 org_trotation; // 0x8C
	private Vector3 org_tscale; // 0x98
	private bool isDirty; // 0xA4
	private GameObject dummyNode; // 0xA8

	// Methods

	// RVA: 0x1406164 Offset: 0x1406164 VA: 0x1406164
	public void .ctor() { }

	// RVA: 0x1406268 Offset: 0x1406268 VA: 0x1406268
	public void SetupTarget(BattlePerformance performance, GameObject actor, List<GameObject> createdObjects) { }

	// RVA: 0x14068D0 Offset: 0x14068D0 VA: 0x14068D0
	private Transform searchTransform(string searchName, List<GameObject> createdObjects) { }

	// RVA: 0x1406C78 Offset: 0x1406C78 VA: 0x1406C78 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x14073F4 Offset: 0x14073F4 VA: 0x14073F4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x14073F8 Offset: 0x14073F8 VA: 0x14073F8 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1407404 Offset: 0x1407404 VA: 0x1407404 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1407690 Offset: 0x1407690 VA: 0x1407690 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28F08 Offset: 0xC28F08 VA: 0xC28F08
[USequencerEventAttribute] // RVA: 0xC28F08 Offset: 0xC28F08 VA: 0xC28F08
[USequencerEventHideDurationAttribute] // RVA: 0xC28F08 Offset: 0xC28F08 VA: 0xC28F08
public class USFGOCameraEffectEvent : USEventBase // TypeDefIndex: 8140
{
	// Fields
	public USFGOCameraEffectEvent.CameraEffectType effectType; // 0x30
	public float effectValue; // 0x34
	public bool isEnabled; // 0x38
	public bool oldEnabled; // 0x39
	public bool isAffectedCutInCamera; // 0x3A

	// Methods

	// RVA: 0x14076A8 Offset: 0x14076A8 VA: 0x14076A8
	public void .ctor() { }

	// RVA: 0x14076C4 Offset: 0x14076C4 VA: 0x14076C4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1407760 Offset: 0x1407760 VA: 0x1407760
	private void setComponentEnabled(bool flg, bool saveOld) { }

	// RVA: 0x1407C08 Offset: 0x1407C08 VA: 0x1407C08 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1407C14 Offset: 0x1407C14 VA: 0x1407C14 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1407C20 Offset: 0x1407C20 VA: 0x1407C20 Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOCameraEffectEvent.CameraEffectType // TypeDefIndex: 8141
{
	// Fields
	public int value__; // 0x0
	public const USFGOCameraEffectEvent.CameraEffectType Bloom = 0;
	public const USFGOCameraEffectEvent.CameraEffectType MotionBlur = 1;
	public const USFGOCameraEffectEvent.CameraEffectType Vignet = 2;
	public const USFGOCameraEffectEvent.CameraEffectType Grayscale = 3;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28F78 Offset: 0xC28F78 VA: 0xC28F78
[USequencerEventAttribute] // RVA: 0xC28F78 Offset: 0xC28F78 VA: 0xC28F78
public class USFGOCameraFlipEvent : USEventBase // TypeDefIndex: 8142
{
	// Fields
	[SerializeField] // RVA: 0xC5D1DC Offset: 0xC5D1DC VA: 0xC5D1DC
	private bool cameraFlip; // 0x30
	[SerializeField] // RVA: 0xC5D1EC Offset: 0xC5D1EC VA: 0xC5D1EC
	[TooltipAttribute] // RVA: 0xC5D1EC Offset: 0xC5D1EC VA: 0xC5D1EC
	private bool restoreFlip; // 0x31
	private bool preCameraFlip; // 0x32

	// Methods

	// RVA: 0x1407C24 Offset: 0x1407C24 VA: 0x1407C24
	public void .ctor() { }

	// RVA: 0x1407C2C Offset: 0x1407C2C VA: 0x1407C2C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1407CA8 Offset: 0x1407CA8 VA: 0x1407CA8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1407CAC Offset: 0x1407CAC VA: 0x1407CAC Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC28FD8 Offset: 0xC28FD8 VA: 0xC28FD8
[USequencerEventAttribute] // RVA: 0xC28FD8 Offset: 0xC28FD8 VA: 0xC28FD8
public class USFGOCameraSettingsEvent : USEventBase // TypeDefIndex: 8143
{
	// Fields
	public float farClipPlane; // 0x30
	private float orgFarClipPlane; // 0x34
	public float nearClipPlane; // 0x38
	private float orgNearClipPlane; // 0x3C
	private bool isDirtyOrg; // 0x40
	public bool isAffectedEffectCamera; // 0x41
	private float orgEffectCameraFarClipPlane; // 0x44
	private float orgEffectCameraNearClipPlane; // 0x48
	private bool isDirtyOrgEffectCamera; // 0x4C

	// Methods

	// RVA: 0x1407D24 Offset: 0x1407D24 VA: 0x1407D24
	public void .ctor() { }

	// RVA: 0x1407D40 Offset: 0x1407D40 VA: 0x1407D40
	private void setting(Camera camera, bool restore = False, bool isDefaultCamera = True) { }

	// RVA: 0x1407EC4 Offset: 0x1407EC4 VA: 0x1407EC4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1407FD0 Offset: 0x1407FD0 VA: 0x1407FD0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1407FD4 Offset: 0x1407FD4 VA: 0x1407FD4 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1407FE0 Offset: 0x1407FE0 VA: 0x1407FE0 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29038 Offset: 0xC29038 VA: 0xC29038
[USequencerEventAttribute] // RVA: 0xC29038 Offset: 0xC29038 VA: 0xC29038
public class USFGOChangeBgEvent : USEventBase // TypeDefIndex: 8144
{
	// Fields
	public bool parentCamera; // 0x30
	public bool aheadLoad; // 0x31
	public string bgName; // 0x38
	public string bgType; // 0x40
	public string oldBgName; // 0x48
	public string oldBgType; // 0x50
	public Vector3 localPos; // 0x58
	public Vector3 localEulerAng; // 0x64

	// Methods

	// RVA: 0x14080F4 Offset: 0x14080F4 VA: 0x14080F4
	public void .ctor() { }

	// RVA: 0x14081D4 Offset: 0x14081D4 VA: 0x14081D4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1408330 Offset: 0x1408330 VA: 0x1408330
	private void OnBgChanged() { }

	// RVA: 0x140839C Offset: 0x140839C VA: 0x140839C Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x14083A0 Offset: 0x14083A0 VA: 0x14083A0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x14083AC Offset: 0x14083AC VA: 0x14083AC Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29098 Offset: 0xC29098 VA: 0xC29098
[USequencerEventAttribute] // RVA: 0xC29098 Offset: 0xC29098 VA: 0xC29098
public class USFGOChangeLimitCount2Event : USEventBase // TypeDefIndex: 8145
{
	// Fields
	public int[] limitCountList; // 0x30

	// Methods

	// RVA: 0x1A53728 Offset: 0x1A53728 VA: 0x1A53728
	public void .ctor() { }

	// RVA: 0x1A537A0 Offset: 0x1A537A0 VA: 0x1A537A0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A539BC Offset: 0x1A539BC VA: 0x1A539BC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A539C0 Offset: 0x1A539C0 VA: 0x1A539C0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A539CC Offset: 0x1A539CC VA: 0x1A539CC Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC290F8 Offset: 0xC290F8 VA: 0xC290F8
[USequencerEventAttribute] // RVA: 0xC290F8 Offset: 0xC290F8 VA: 0xC290F8
public class USFGOChangeLimitCountEvent : USEventBase // TypeDefIndex: 8146
{
	// Fields
	public int limitCount; // 0x30

	// Methods

	// RVA: 0x1A539D0 Offset: 0x1A539D0 VA: 0x1A539D0
	public void .ctor() { }

	// RVA: 0x1A539D8 Offset: 0x1A539D8 VA: 0x1A539D8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A53BAC Offset: 0x1A53BAC VA: 0x1A53BAC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A53BB0 Offset: 0x1A53BB0 VA: 0x1A53BB0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A53BBC Offset: 0x1A53BBC VA: 0x1A53BBC Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29158 Offset: 0xC29158 VA: 0xC29158
[USequencerEventAttribute] // RVA: 0xC29158 Offset: 0xC29158 VA: 0xC29158
[USequencerEventHideDurationAttribute] // RVA: 0xC29158 Offset: 0xC29158 VA: 0xC29158
public class USFGOChangeShaderProperty : USEventBase // TypeDefIndex: 8147
{
	// Fields
	[SerializeField] // RVA: 0xC5D238 Offset: 0xC5D238 VA: 0xC5D238
	private USFGOChangeShaderProperty.PropertyType type; // 0x30
	[SerializeField] // RVA: 0xC5D248 Offset: 0xC5D248 VA: 0xC5D248
	[TooltipAttribute] // RVA: 0xC5D248 Offset: 0xC5D248 VA: 0xC5D248
	private string targetMeshWord; // 0x38
	[SerializeField] // RVA: 0xC5D294 Offset: 0xC5D294 VA: 0xC5D294
	[TooltipAttribute] // RVA: 0xC5D294 Offset: 0xC5D294 VA: 0xC5D294
	private string propertyName; // 0x40
	[SerializeField] // RVA: 0xC5D2E0 Offset: 0xC5D2E0 VA: 0xC5D2E0
	[TooltipAttribute] // RVA: 0xC5D2E0 Offset: 0xC5D2E0 VA: 0xC5D2E0
	private AnimationCurve valueCurve; // 0x48
	private Renderer targetMesh; // 0x50
	private float currentCurveSampleTime; // 0x58

	// Methods

	// RVA: 0x1A53BC0 Offset: 0x1A53BC0 VA: 0x1A53BC0
	public void .ctor() { }

	// RVA: 0x1A53BC8 Offset: 0x1A53BC8 VA: 0x1A53BC8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A53E34 Offset: 0x1A53E34 VA: 0x1A53E34 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A540E8 Offset: 0x1A540E8 VA: 0x1A540E8 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A53F08 Offset: 0x1A53F08 VA: 0x1A53F08
	private float GetMaxValue() { }

	// RVA: 0x1A540F4 Offset: 0x1A540F4 VA: 0x1A540F4 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A53F30 Offset: 0x1A53F30 VA: 0x1A53F30
	private void SetProperty(float value) { }
}

// Namespace: 
public enum USFGOChangeShaderProperty.PropertyType // TypeDefIndex: 8148
{
	// Fields
	public int value__; // 0x0
	public const USFGOChangeShaderProperty.PropertyType Float = 0;
	public const USFGOChangeShaderProperty.PropertyType Int = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC291C8 Offset: 0xC291C8 VA: 0xC291C8
[USequencerEventAttribute] // RVA: 0xC291C8 Offset: 0xC291C8 VA: 0xC291C8
public class USFGOCheckPlayerTypeFlip : USFGOObjectFlip // TypeDefIndex: 8149
{
	// Fields
	[SerializeField] // RVA: 0xC5D32C Offset: 0xC5D32C VA: 0xC5D32C
	[TooltipAttribute] // RVA: 0xC5D32C Offset: 0xC5D32C VA: 0xC5D32C
	private USFGOCheckPlayerTypeFlip.FGOFlipPlayerType execPlayerType; // 0x58
	[SerializeField] // RVA: 0xC5D378 Offset: 0xC5D378 VA: 0xC5D378
	[TooltipAttribute] // RVA: 0xC5D378 Offset: 0xC5D378 VA: 0xC5D378
	private bool isTreasureExecSide; // 0x5C

	// Methods

	// RVA: 0x1A5424C Offset: 0x1A5424C VA: 0x1A5424C
	public void .ctor() { }

	// RVA: 0x1A54264 Offset: 0x1A54264 VA: 0x1A54264 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A543BC Offset: 0x1A543BC VA: 0x1A543BC
	private bool IsAblePlayerType(bool isEnemy) { }
}

// Namespace: 
public enum USFGOCheckPlayerTypeFlip.FGOFlipPlayerType // TypeDefIndex: 8150
{
	// Fields
	public int value__; // 0x0
	public const USFGOCheckPlayerTypeFlip.FGOFlipPlayerType None = 0;
	public const USFGOCheckPlayerTypeFlip.FGOFlipPlayerType Player = 1;
	public const USFGOCheckPlayerTypeFlip.FGOFlipPlayerType Enemy = 2;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29228 Offset: 0xC29228 VA: 0xC29228
[USequencerEventAttribute] // RVA: 0xC29228 Offset: 0xC29228 VA: 0xC29228
[USequencerEventHideDurationAttribute] // RVA: 0xC29228 Offset: 0xC29228 VA: 0xC29228
public class USFGOChrAlphaChangeEvent : USEventBase // TypeDefIndex: 8151
{
	// Fields
	[TooltipAttribute] // RVA: 0xC5D3C4 Offset: 0xC5D3C4 VA: 0xC5D3C4
	public AnimationCurve alphaCurve; // 0x30
	private float currentCurveSampleTime; // 0x38
	public USFGOChrAlphaChangeEvent.ChangeTarget target; // 0x3C
	private List<Renderer> faderRenderers; // 0x40
	[TooltipAttribute] // RVA: 0xC5D3FC Offset: 0xC5D3FC VA: 0xC5D3FC
	public string otherHierarchyPath; // 0x48

	// Methods

	// RVA: 0x1A54538 Offset: 0x1A54538 VA: 0x1A54538
	public void .ctor() { }

	// RVA: 0x1A54718 Offset: 0x1A54718 VA: 0x1A54718 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A550A4 Offset: 0x1A550A4 VA: 0x1A550A4
	private void SetMaterialAlpha(float alpha) { }

	// RVA: 0x1A552E4 Offset: 0x1A552E4 VA: 0x1A552E4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A55478 Offset: 0x1A55478 VA: 0x1A55478 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A555B0 Offset: 0x1A555B0 VA: 0x1A555B0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A555BC Offset: 0x1A555BC VA: 0x1A555BC Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1A55600 Offset: 0x1A55600 VA: 0x1A55600
	private void Update() { }
}

// Namespace: 
public enum USFGOChrAlphaChangeEvent.ChangeTarget // TypeDefIndex: 8152
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrAlphaChangeEvent.ChangeTarget Actor = 0;
	public const USFGOChrAlphaChangeEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrAlphaChangeEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrAlphaChangeEvent.ChangeTarget All = 3;
	public const USFGOChrAlphaChangeEvent.ChangeTarget Other = 4;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29298 Offset: 0xC29298 VA: 0xC29298
[USequencerEventAttribute] // RVA: 0xC29298 Offset: 0xC29298 VA: 0xC29298
[USequencerEventHideDurationAttribute] // RVA: 0xC29298 Offset: 0xC29298 VA: 0xC29298
public class USFGOChrBulrEvent : USEventBase // TypeDefIndex: 8153
{
	// Fields
	public USFGOChrBulrEvent.MODE actionMode; // 0x30
	public bool inputValidValue; // 0x34
	public int inputLagValue; // 0x38

	// Methods

	// RVA: 0x1A55700 Offset: 0x1A55700 VA: 0x1A55700
	public void .ctor() { }

	// RVA: 0x1A55718 Offset: 0x1A55718 VA: 0x1A55718 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A558F4 Offset: 0x1A558F4 VA: 0x1A558F4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: 
public enum USFGOChrBulrEvent.MODE // TypeDefIndex: 8154
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrBulrEvent.MODE BULR_VALID = 0;
	public const USFGOChrBulrEvent.MODE BULR_LAG = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29308 Offset: 0xC29308 VA: 0xC29308
[USequencerEventAttribute] // RVA: 0xC29308 Offset: 0xC29308 VA: 0xC29308
[USequencerEventHideDurationAttribute] // RVA: 0xC29308 Offset: 0xC29308 VA: 0xC29308
public class USFGOChrColorChangeEvent : USEventBase // TypeDefIndex: 8155
{
	// Fields
	public AnimationCurve fadeCurve; // 0x30
	public Color fadeColour; // 0x38
	private float currentCurveSampleTime; // 0x48
	public USFGOChrColorChangeEvent.ChangeTarget target; // 0x4C
	[TooltipAttribute] // RVA: 0xC5D434 Offset: 0xC5D434 VA: 0xC5D434
	public string otherHierarchyPath; // 0x50
	private List<SkinnedMeshRenderer> faderRenderers; // 0x58
	private List<Color> originalColors; // 0x60

	// Methods

	// RVA: 0x1A558F8 Offset: 0x1A558F8 VA: 0x1A558F8
	public void .ctor() { }

	// RVA: 0x1A55AE4 Offset: 0x1A55AE4 VA: 0x1A55AE4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A565D0 Offset: 0x1A565D0 VA: 0x1A565D0
	private void SetMaterialColors(float alpha) { }

	// RVA: 0x1A56A10 Offset: 0x1A56A10 VA: 0x1A56A10 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A56BA4 Offset: 0x1A56BA4 VA: 0x1A56BA4 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A56CDC Offset: 0x1A56CDC VA: 0x1A56CDC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A56CE8 Offset: 0x1A56CE8 VA: 0x1A56CE8 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1A56CF4 Offset: 0x1A56CF4 VA: 0x1A56CF4
	private void Update() { }

	// RVA: 0x1A56DF4 Offset: 0x1A56DF4 VA: 0x1A56DF4
	private void OnEnable() { }
}

// Namespace: 
public enum USFGOChrColorChangeEvent.ChangeTarget // TypeDefIndex: 8156
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrColorChangeEvent.ChangeTarget Actor = 0;
	public const USFGOChrColorChangeEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrColorChangeEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrColorChangeEvent.ChangeTarget All = 3;
	public const USFGOChrColorChangeEvent.ChangeTarget Other = 4;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29378 Offset: 0xC29378 VA: 0xC29378
[USequencerEventAttribute] // RVA: 0xC29378 Offset: 0xC29378 VA: 0xC29378
[USequencerEventHideDurationAttribute] // RVA: 0xC29378 Offset: 0xC29378 VA: 0xC29378
public class USFGOChrDispChangeEvent : USEventBase // TypeDefIndex: 8157
{
	// Fields
	public USFGOChrDispChangeEvent.ChangeTarget target; // 0x30
	public bool IsDisp; // 0x34
	private List<GameObject> dispObjects; // 0x38
	private List<bool> dispObjectsDefault; // 0x40
	private List<BattleActorControl> dispBattleActorControls; // 0x48
	private Dictionary<int, BattleActorControl> dispBattleActorDict; // 0x50

	// Methods

	// RVA: 0x1A56DFC Offset: 0x1A56DFC VA: 0x1A56DFC
	public void .ctor() { }

	// RVA: 0x1A56E04 Offset: 0x1A56E04 VA: 0x1A56E04 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A57F7C Offset: 0x1A57F7C VA: 0x1A57F7C Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A586D8 Offset: 0x1A586D8 VA: 0x1A586D8 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A586DC Offset: 0x1A586DC VA: 0x1A586DC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A586E8 Offset: 0x1A586E8 VA: 0x1A586E8 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1A57DC0 Offset: 0x1A57DC0 VA: 0x1A57DC0
	private void setupBattleActorDict() { }

	// RVA: 0x1A58584 Offset: 0x1A58584 VA: 0x1A58584
	private void setBattleActorDisp(GameObject obj, bool isDisp) { }
}

// Namespace: 
public enum USFGOChrDispChangeEvent.ChangeTarget // TypeDefIndex: 8158
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrDispChangeEvent.ChangeTarget Actor = 0;
	public const USFGOChrDispChangeEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrDispChangeEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrDispChangeEvent.ChangeTarget All = 3;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC293E8 Offset: 0xC293E8 VA: 0xC293E8
[USequencerEventAttribute] // RVA: 0xC293E8 Offset: 0xC293E8 VA: 0xC293E8
public class USFGOChrPlayAnimEvent : USEventBase // TypeDefIndex: 8159
{
	// Fields
	public string animationName; // 0x30
	public WrapMode wrapMode; // 0x38
	public float playbackSpeed; // 0x3C
	public string startEvent; // 0x40
	public string stopEvent; // 0x48
	public float startTime; // 0x50
	public float stopTime; // 0x54

	// Methods

	// RVA: 0x1A587E4 Offset: 0x1A587E4 VA: 0x1A587E4
	public void .ctor() { }

	// RVA: 0x1A5887C Offset: 0x1A5887C VA: 0x1A5887C
	public void Update() { }

	// RVA: 0x1A58998 Offset: 0x1A58998 VA: 0x1A58998 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A58C28 Offset: 0x1A58C28 VA: 0x1A58C28 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A59378 Offset: 0x1A59378 VA: 0x1A59378 Slot: 8
	public override void StopEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29448 Offset: 0xC29448 VA: 0xC29448
[USequencerEventAttribute] // RVA: 0xC29448 Offset: 0xC29448 VA: 0xC29448
[USequencerEventHideDurationAttribute] // RVA: 0xC29448 Offset: 0xC29448 VA: 0xC29448
public class USFGOChrShadowColorSetEvent : USEventBase // TypeDefIndex: 8160
{
	// Fields
	public Color shadowColour; // 0x30
	public bool resetColor; // 0x40
	public USFGOChrShadowColorSetEvent.ChangeTarget target; // 0x44

	// Methods

	// RVA: 0x1A593F4 Offset: 0x1A593F4 VA: 0x1A593F4
	public void .ctor() { }

	// RVA: 0x1A59428 Offset: 0x1A59428 VA: 0x1A59428 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A59CF0 Offset: 0x1A59CF0 VA: 0x1A59CF0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A59CF4 Offset: 0x1A59CF4 VA: 0x1A59CF4 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A59CF8 Offset: 0x1A59CF8 VA: 0x1A59CF8 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A59D04 Offset: 0x1A59D04 VA: 0x1A59D04 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: 
public enum USFGOChrShadowColorSetEvent.ChangeTarget // TypeDefIndex: 8161
