public enum USFGOChrBulrEvent.MODE // TypeDefIndex: 8135
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrBulrEvent.MODE BULR_VALID = 0;
	public const USFGOChrBulrEvent.MODE BULR_LAG = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95430 Offset: 0xC95430 VA: 0xC95430
[USequencerEventAttribute] // RVA: 0xC95430 Offset: 0xC95430 VA: 0xC95430
[USequencerEventHideDurationAttribute] // RVA: 0xC95430 Offset: 0xC95430 VA: 0xC95430
public class USFGOChrColorChangeEvent : USEventBase // TypeDefIndex: 8136
{
	// Fields
	public AnimationCurve fadeCurve; // 0x30
	public Color fadeColour; // 0x38
	private float currentCurveSampleTime; // 0x48
	public USFGOChrColorChangeEvent.ChangeTarget target; // 0x4C
	[TooltipAttribute] // RVA: 0xCCA2CC Offset: 0xCCA2CC VA: 0xCCA2CC
	public string otherHierarchyPath; // 0x50
	private List<SkinnedMeshRenderer> faderRenderers; // 0x58
	private List<Color> originalColors; // 0x60

	// Methods

	// RVA: 0x1F5A68C Offset: 0x1F5A68C VA: 0x1F5A68C
	public void .ctor() { }

	// RVA: 0x1F5A878 Offset: 0x1F5A878 VA: 0x1F5A878 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5B364 Offset: 0x1F5B364 VA: 0x1F5B364
	private void SetMaterialColors(float alpha) { }

	// RVA: 0x1F5B7A4 Offset: 0x1F5B7A4 VA: 0x1F5B7A4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F5B938 Offset: 0x1F5B938 VA: 0x1F5B938 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F5BA70 Offset: 0x1F5BA70 VA: 0x1F5BA70 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F5BA7C Offset: 0x1F5BA7C VA: 0x1F5BA7C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F5BA88 Offset: 0x1F5BA88 VA: 0x1F5BA88
	private void Update() { }

	// RVA: 0x1F5BB88 Offset: 0x1F5BB88 VA: 0x1F5BB88
	private void OnEnable() { }
}

// Namespace: 
public enum USFGOChrColorChangeEvent.ChangeTarget // TypeDefIndex: 8137
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrColorChangeEvent.ChangeTarget Actor = 0;
	public const USFGOChrColorChangeEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrColorChangeEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrColorChangeEvent.ChangeTarget All = 3;
	public const USFGOChrColorChangeEvent.ChangeTarget Other = 4;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC954A0 Offset: 0xC954A0 VA: 0xC954A0
[USequencerEventAttribute] // RVA: 0xC954A0 Offset: 0xC954A0 VA: 0xC954A0
[USequencerEventHideDurationAttribute] // RVA: 0xC954A0 Offset: 0xC954A0 VA: 0xC954A0
public class USFGOChrDispChangeEvent : USEventBase // TypeDefIndex: 8138
{
	// Fields
	public USFGOChrDispChangeEvent.ChangeTarget target; // 0x30
	public bool IsDisp; // 0x34
	private List<GameObject> dispObjects; // 0x38
	private List<bool> dispObjectsDefault; // 0x40
	private List<BattleActorControl> dispBattleActorControls; // 0x48
	private Dictionary<int, BattleActorControl> dispBattleActorDict; // 0x50

	// Methods

	// RVA: 0x1F5BB90 Offset: 0x1F5BB90 VA: 0x1F5BB90
	public void .ctor() { }

	// RVA: 0x1F5BB98 Offset: 0x1F5BB98 VA: 0x1F5BB98 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5CD10 Offset: 0x1F5CD10 VA: 0x1F5CD10 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F5D46C Offset: 0x1F5D46C VA: 0x1F5D46C Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F5D470 Offset: 0x1F5D470 VA: 0x1F5D470 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F5D47C Offset: 0x1F5D47C VA: 0x1F5D47C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F5CB54 Offset: 0x1F5CB54 VA: 0x1F5CB54
	private void setupBattleActorDict() { }

	// RVA: 0x1F5D318 Offset: 0x1F5D318 VA: 0x1F5D318
	private void setBattleActorDisp(GameObject obj, bool isDisp) { }
}

// Namespace: 
public enum USFGOChrDispChangeEvent.ChangeTarget // TypeDefIndex: 8139
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrDispChangeEvent.ChangeTarget Actor = 0;
	public const USFGOChrDispChangeEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrDispChangeEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrDispChangeEvent.ChangeTarget All = 3;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95510 Offset: 0xC95510 VA: 0xC95510
[USequencerEventAttribute] // RVA: 0xC95510 Offset: 0xC95510 VA: 0xC95510
public class USFGOChrPlayAnimEvent : USEventBase // TypeDefIndex: 8140
{
	// Fields
	public string animationName; // 0x30
	public WrapMode wrapMode; // 0x38
	public float playbackSpeed; // 0x3C
	public string startEvent; // 0x40
	public string stopEvent; // 0x48
	public float startTime; // 0x50
	public float stopTime; // 0x54

	// Methods

	// RVA: 0x1F5D578 Offset: 0x1F5D578 VA: 0x1F5D578
	public void .ctor() { }

	// RVA: 0x1F5D610 Offset: 0x1F5D610 VA: 0x1F5D610
	public void Update() { }

	// RVA: 0x1F5D72C Offset: 0x1F5D72C VA: 0x1F5D72C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5D9BC Offset: 0x1F5D9BC VA: 0x1F5D9BC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F5E10C Offset: 0x1F5E10C VA: 0x1F5E10C Slot: 8
	public override void StopEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95570 Offset: 0xC95570 VA: 0xC95570
[USequencerEventAttribute] // RVA: 0xC95570 Offset: 0xC95570 VA: 0xC95570
[USequencerEventHideDurationAttribute] // RVA: 0xC95570 Offset: 0xC95570 VA: 0xC95570
public class USFGOChrShadowColorSetEvent : USEventBase // TypeDefIndex: 8141
{
	// Fields
	public Color shadowColour; // 0x30
	public bool resetColor; // 0x40
	public USFGOChrShadowColorSetEvent.ChangeTarget target; // 0x44

	// Methods

	// RVA: 0x1F5E188 Offset: 0x1F5E188 VA: 0x1F5E188
	public void .ctor() { }

	// RVA: 0x1F5E1BC Offset: 0x1F5E1BC VA: 0x1F5E1BC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5EA84 Offset: 0x1F5EA84 VA: 0x1F5EA84 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F5EA88 Offset: 0x1F5EA88 VA: 0x1F5EA88 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F5EA8C Offset: 0x1F5EA8C VA: 0x1F5EA8C Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F5EA98 Offset: 0x1F5EA98 VA: 0x1F5EA98 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: 
public enum USFGOChrShadowColorSetEvent.ChangeTarget // TypeDefIndex: 8142
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrShadowColorSetEvent.ChangeTarget Actor = 0;
	public const USFGOChrShadowColorSetEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrShadowColorSetEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrShadowColorSetEvent.ChangeTarget All = 3;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC955E0 Offset: 0xC955E0 VA: 0xC955E0
[USequencerEventAttribute] // RVA: 0xC955E0 Offset: 0xC955E0 VA: 0xC955E0
[USequencerEventHideDurationAttribute] // RVA: 0xC955E0 Offset: 0xC955E0 VA: 0xC955E0
public class USFGOChrToggleBillboardEvent : USEventBase // TypeDefIndex: 8143
{
	// Fields
	public bool isEnabled; // 0x30
	public bool enableRotationZ; // 0x31

	// Methods

	// RVA: 0x1F5EA9C Offset: 0x1F5EA9C VA: 0x1F5EA9C
	public void .ctor() { }

	// RVA: 0x1F5EAA4 Offset: 0x1F5EAA4 VA: 0x1F5EAA4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5EBEC Offset: 0x1F5EBEC VA: 0x1F5EBEC
	private void DisableCoreBillborad() { }

	// RVA: 0x1F5EF10 Offset: 0x1F5EF10 VA: 0x1F5EF10 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95650 Offset: 0xC95650 VA: 0xC95650
[USequencerEventAttribute] // RVA: 0xC95650 Offset: 0xC95650 VA: 0xC95650
[USequencerEventHideDurationAttribute] // RVA: 0xC95650 Offset: 0xC95650 VA: 0xC95650
public class USFGOContrastEffectEvent : USEventBase // TypeDefIndex: 8144
{
	// Fields
	[SerializeField] // RVA: 0xCCA304 Offset: 0xCCA304 VA: 0xCCA304
	private AnimationCurve saturationCurve; // 0x30
	[SerializeField] // RVA: 0xCCA314 Offset: 0xCCA314 VA: 0xCCA314
	private AnimationCurve contrastCurve; // 0x38
	[SerializeField] // RVA: 0xCCA324 Offset: 0xCCA324 VA: 0xCCA324
	private float maxValue; // 0x40
	private float currentCurveSampleTime; // 0x44

	// Methods

	// RVA: 0x1F5EF14 Offset: 0x1F5EF14 VA: 0x1F5EF14
	public void .ctor() { }

	// RVA: 0x1F5F120 Offset: 0x1F5F120 VA: 0x1F5F120 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5F124 Offset: 0x1F5F124 VA: 0x1F5F124
	protected void SetSaturation(float saturation, float contrast) { }

	// RVA: 0x1F5F324 Offset: 0x1F5F324 VA: 0x1F5F324 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F5F420 Offset: 0x1F5F420 VA: 0x1F5F420 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F5F5A0 Offset: 0x1F5F5A0 VA: 0x1F5F5A0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F5F5AC Offset: 0x1F5F5AC VA: 0x1F5F5AC Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F5F5B4 Offset: 0x1F5F5B4 VA: 0x1F5F5B4
	private void Update() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC956C0 Offset: 0xC956C0 VA: 0xC956C0
[USequencerEventAttribute] // RVA: 0xC956C0 Offset: 0xC956C0 VA: 0xC956C0
public class USFGOCreateEffectEvent : USEventBase // TypeDefIndex: 8145
{
	// Fields
	public USFGOCreateEffectEvent.EffectCategory category; // 0x30
	public string groupId; // 0x38
	public string effectName; // 0x40
	public int functionIndex; // 0x48
	public USFGOCreateEffectEvent.EffectTarget target; // 0x4C
	public Vector3 offsetPosition; // 0x50
	public Vector3 offsetRotation; // 0x5C
	public bool sideflip; // 0x68
	public bool isParent; // 0x69
	private List<GameObject> effectObjs; // 0x70
	private List<Animation> animations; // 0x78
	private List<SimpleAnimation> simpleAnimations; // 0x80
	private List<ParticleSystem> particles; // 0x88
	private List<UVScroll> uvScrolls; // 0x90
	private List<changeVColor> changeVColors; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xCCA334 Offset: 0xCCA334 VA: 0xCCA334
	private static Predicate<GameObject> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCCA344 Offset: 0xCCA344 VA: 0xCCA344
	private static Predicate<GameObject> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1F5F6B4 Offset: 0x1F5F6B4 VA: 0x1F5F6B4
	public void .ctor() { }

	// RVA: 0x1F5F744 Offset: 0x1F5F744 VA: 0x1F5F744
	private string GetEffectAssetPath() { }

	// RVA: 0x1F5F85C Offset: 0x1F5F85C VA: 0x1F5F85C
	private bool IsResource() { }

	// RVA: 0x1F5F86C Offset: 0x1F5F86C VA: 0x1F5F86C
	private string GetEffectAssetFileName() { }

	// RVA: 0x1F5F8FC Offset: 0x1F5F8FC VA: 0x1F5F8FC
	private void destroyEffectObjs() { }

	// RVA: 0x1F5FB18 Offset: 0x1F5FB18 VA: 0x1F5FB18
	public static List<GameObject> getTargets(USFGOCreateEffectEvent.EffectTarget target, int functionIndex = -1) { }

	// RVA: 0x1F60498 Offset: 0x1F60498 VA: 0x1F60498
	private void AddAnimationElements(GameObject obj) { }

	// RVA: 0x1F606D4 Offset: 0x1F606D4 VA: 0x1F606D4
	private bool IsEnemy(GameObject tgt) { }

	// RVA: 0x1F60874 Offset: 0x1F60874 VA: 0x1F60874 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F612AC Offset: 0x1F612AC VA: 0x1F612AC
	private void PlayAllEffects() { }

	// RVA: 0x1F61C3C Offset: 0x1F61C3C VA: 0x1F61C3C
	private void UpdateAllEffects(float deltaTime) { }

	// RVA: 0x1F625A0 Offset: 0x1F625A0 VA: 0x1F625A0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F625A4 Offset: 0x1F625A4 VA: 0x1F625A4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F625B0 Offset: 0x1F625B0 VA: 0x1F625B0 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F625BC Offset: 0x1F625BC VA: 0x1F625BC Slot: 10
	public override void UndoEvent() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3869C Offset: 0xD3869C VA: 0xD3869C
	// RVA: 0x1F625C0 Offset: 0x1F625C0 VA: 0x1F625C0
	private static bool <getTargets>m__0(GameObject x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD386AC Offset: 0xD386AC VA: 0xD386AC
	// RVA: 0x1F6262C Offset: 0x1F6262C VA: 0x1F6262C
	private static bool <getTargets>m__1(GameObject x) { }
}

// Namespace: 
public enum USFGOCreateEffectEvent.EffectCategory // TypeDefIndex: 8146
{
	// Fields
	public int value__; // 0x0
	public const USFGOCreateEffectEvent.EffectCategory ServantNoblePhantasm = 0;
	public const USFGOCreateEffectEvent.EffectCategory Servant = 1;
	public const USFGOCreateEffectEvent.EffectCategory Weapon = 2;
	public const USFGOCreateEffectEvent.EffectCategory Common = 3;
}

// Namespace: 
public enum USFGOCreateEffectEvent.EffectTarget // TypeDefIndex: 8147
{
	// Fields
	public int value__; // 0x0
	public const USFGOCreateEffectEvent.EffectTarget Actor = 0;
	public const USFGOCreateEffectEvent.EffectTarget Target = 1;
	public const USFGOCreateEffectEvent.EffectTarget DamageTagets = 2;
	public const USFGOCreateEffectEvent.EffectTarget BuffTargets = 3;
	public const USFGOCreateEffectEvent.EffectTarget DebuffTargets = 4;
	public const USFGOCreateEffectEvent.EffectTarget PlayerParty = 5;
	public const USFGOCreateEffectEvent.EffectTarget EnemyParty = 6;
	public const USFGOCreateEffectEvent.EffectTarget All = 7;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95720 Offset: 0xC95720 VA: 0xC95720
[USequencerEventAttribute] // RVA: 0xC95720 Offset: 0xC95720 VA: 0xC95720
[USequencerEventHideDurationAttribute] // RVA: 0xC95720 Offset: 0xC95720 VA: 0xC95720
public class USFGODetachEvent : USEventBase // TypeDefIndex: 8148
{
	// Methods

	// RVA: 0x1F62698 Offset: 0x1F62698 VA: 0x1F62698
	public void .ctor() { }

	// RVA: 0x1F626A0 Offset: 0x1F626A0 VA: 0x1F626A0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F62770 Offset: 0x1F62770 VA: 0x1F62770 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: WellFired
public class USFGOEventBase : USEventBase // TypeDefIndex: 8149
{
	// Fields
	public bool isFiexedUpdate; // 0x30
	protected float prevDeltaTime; // 0x34

	// Methods

	// RVA: 0x1F62774 Offset: 0x1F62774 VA: 0x1F62774
	public void .ctor() { }

	[ConditionalAttribute] // RVA: 0xD386BC Offset: 0xD386BC VA: 0xD386BC
	// RVA: 0x1F62784 Offset: 0x1F62784 VA: 0x1F62784
	protected void addFireLog(float t) { }

	[ConditionalAttribute] // RVA: 0xD386F4 Offset: 0xD386F4 VA: 0xD386F4
	// RVA: 0x1F62788 Offset: 0x1F62788 VA: 0x1F62788
	protected void clearFireLog() { }

	// RVA: 0x1F6278C Offset: 0x1F6278C VA: 0x1F6278C
	protected bool checkFire(float deltaTime) { }

	// RVA: 0x1F627E4 Offset: 0x1F627E4 VA: 0x1F627E4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F627F0 Offset: 0x1F627F0 VA: 0x1F627F0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95790 Offset: 0xC95790 VA: 0xC95790
[USequencerEventAttribute] // RVA: 0xC95790 Offset: 0xC95790 VA: 0xC95790
[USequencerEventHideDurationAttribute] // RVA: 0xC95790 Offset: 0xC95790 VA: 0xC95790
public class USFGOFadeEvent : USEventBase // TypeDefIndex: 8150
{
	// Fields
	public UILayer uiLayer; // 0x30
	public AnimationCurve fadeCurve; // 0x38
	public Color fadeColour; // 0x40
	private float currentCurveSampleTime; // 0x50
	public GameObject faderObject; // 0x58

	// Methods

	// RVA: 0x1F627F4 Offset: 0x1F627F4 VA: 0x1F627F4
	public void .ctor() { }

	// RVA: 0x1F629D0 Offset: 0x1F629D0 VA: 0x1F629D0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F62ACC Offset: 0x1F62ACC VA: 0x1F62ACC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F62CD8 Offset: 0x1F62CD8 VA: 0x1F62CD8 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F62E94 Offset: 0x1F62E94 VA: 0x1F62E94 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F62EA0 Offset: 0x1F62EA0 VA: 0x1F62EA0 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F62F6C Offset: 0x1F62F6C VA: 0x1F62F6C
	private void Update() { }

	// RVA: 0x1F6306C Offset: 0x1F6306C VA: 0x1F6306C
	private void OnEnable() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95800 Offset: 0xC95800 VA: 0xC95800
[USequencerEventAttribute] // RVA: 0xC95800 Offset: 0xC95800 VA: 0xC95800
public class USFGOGCcollect : USEventBase // TypeDefIndex: 8151
{
	// Methods

	// RVA: 0x1F6316C Offset: 0x1F6316C VA: 0x1F6316C
	public void .ctor() { }

	// RVA: 0x1F63174 Offset: 0x1F63174 VA: 0x1F63174 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6317C Offset: 0x1F6317C VA: 0x1F6317C Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F63180 Offset: 0x1F63180 VA: 0x1F63180 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6318C Offset: 0x1F6318C VA: 0x1F6318C Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95860 Offset: 0xC95860 VA: 0xC95860
[USequencerEventAttribute] // RVA: 0xC95860 Offset: 0xC95860 VA: 0xC95860
[USequencerEventHideDurationAttribute] // RVA: 0xC95860 Offset: 0xC95860 VA: 0xC95860
public class USFGOGrayscaleEffectEvent : USEventBase // TypeDefIndex: 8152
{
	// Fields
	public AnimationCurve fadeCurve; // 0x30
	private float currentCurveSampleTime; // 0x38
	public bool isAffectedCutInCamera; // 0x3C

	// Methods

	// RVA: 0x1F63190 Offset: 0x1F63190 VA: 0x1F63190
	public void .ctor() { }

	// RVA: 0x1F632CC Offset: 0x1F632CC VA: 0x1F632CC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F632D0 Offset: 0x1F632D0 VA: 0x1F632D0
	protected void SetSaturation(float saturation) { }

	// RVA: 0x1F634B8 Offset: 0x1F634B8 VA: 0x1F634B8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F6356C Offset: 0x1F6356C VA: 0x1F6356C Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F636A4 Offset: 0x1F636A4 VA: 0x1F636A4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F636B0 Offset: 0x1F636B0 VA: 0x1F636B0 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F636B8 Offset: 0x1F636B8 VA: 0x1F636B8
	private void Update() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC958D0 Offset: 0xC958D0 VA: 0xC958D0
[USequencerEventAttribute] // RVA: 0xC958D0 Offset: 0xC958D0 VA: 0xC958D0
public class USFGOInitNoblePhantasm : USEventBase // TypeDefIndex: 8153
{
	// Methods

	// RVA: 0x1F637B8 Offset: 0x1F637B8 VA: 0x1F637B8
	public void .ctor() { }

	// RVA: 0x1F637C0 Offset: 0x1F637C0 VA: 0x1F637C0
	public void Update() { }

	// RVA: 0x1F637CC Offset: 0x1F637CC VA: 0x1F637CC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F63890 Offset: 0x1F63890 VA: 0x1F63890 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95930 Offset: 0xC95930 VA: 0xC95930
[USequencerEventAttribute] // RVA: 0xC95930 Offset: 0xC95930 VA: 0xC95930
public class USFGOMirrorObject : USEventBase // TypeDefIndex: 8154
{
	// Fields
	[SerializeField] // RVA: 0xCCA354 Offset: 0xCCA354 VA: 0xCCA354
	private int textureWidth; // 0x30
	[SerializeField] // RVA: 0xCCA364 Offset: 0xCCA364 VA: 0xCCA364
	private int textureHeight; // 0x34
	[SerializeField] // RVA: 0xCCA374 Offset: 0xCCA374 VA: 0xCCA374
	private int textureDepth; // 0x38
	[SerializeField] // RVA: 0xCCA384 Offset: 0xCCA384 VA: 0xCCA384
	private TextureDimension textureDimension; // 0x3C
	[SerializeField] // RVA: 0xCCA394 Offset: 0xCCA394 VA: 0xCCA394
	private RenderTextureFormat textureFormat; // 0x40
	[SerializeField] // RVA: 0xCCA3A4 Offset: 0xCCA3A4 VA: 0xCCA3A4
	private FilterMode textureFilterMode; // 0x44
	[SerializeField] // RVA: 0xCCA3B4 Offset: 0xCCA3B4 VA: 0xCCA3B4
	private bool useBoundsCamera; // 0x48
	[SerializeField] // RVA: 0xCCA3C4 Offset: 0xCCA3C4 VA: 0xCCA3C4
	private Vector3 cameraPosition; // 0x4C
	[SerializeField] // RVA: 0xCCA3D4 Offset: 0xCCA3D4 VA: 0xCCA3D4
	private Vector3 cameraRotation; // 0x58
	[SerializeField] // RVA: 0xCCA3E4 Offset: 0xCCA3E4 VA: 0xCCA3E4
	private float cameraMargin; // 0x64
	[SerializeField] // RVA: 0xCCA3F4 Offset: 0xCCA3F4 VA: 0xCCA3F4
	private CameraClearFlags cameraClearFlags; // 0x68
	[SerializeField] // RVA: 0xCCA404 Offset: 0xCCA404 VA: 0xCCA404
	private Color cameraBackgroundColor; // 0x6C
	[SerializeField] // RVA: 0xCCA414 Offset: 0xCCA414 VA: 0xCCA414
	private float cameraFieldOfView; // 0x7C
	[SerializeField] // RVA: 0xCCA424 Offset: 0xCCA424 VA: 0xCCA424
	private float cameraNearClipPlane; // 0x80
	[SerializeField] // RVA: 0xCCA434 Offset: 0xCCA434 VA: 0xCCA434
	private float cameraFarClipPlane; // 0x84
	[SerializeField] // RVA: 0xCCA444 Offset: 0xCCA444 VA: 0xCCA444
	private float cameraDepth; // 0x88
	[SerializeField] // RVA: 0xCCA454 Offset: 0xCCA454 VA: 0xCCA454
	private RenderingPath cameraRenderingPath; // 0x8C
	[SerializeField] // RVA: 0xCCA464 Offset: 0xCCA464 VA: 0xCCA464
	private bool cameraAllowHDR; // 0x90
	[SerializeField] // RVA: 0xCCA474 Offset: 0xCCA474 VA: 0xCCA474
	private bool cameraAllowMSAA; // 0x91
	[SerializeField] // RVA: 0xCCA484 Offset: 0xCCA484 VA: 0xCCA484
	private bool cameraAllowDynamicResolution; // 0x92
	[SerializeField] // RVA: 0xCCA494 Offset: 0xCCA494 VA: 0xCCA494
	private bool cameraUseOcclusionCulling; // 0x93
	[SerializeField] // RVA: 0xCCA4A4 Offset: 0xCCA4A4 VA: 0xCCA4A4
	private List<string> targetActorObjectPaths; // 0x98
	[SerializeField] // RVA: 0xCCA4B4 Offset: 0xCCA4B4 VA: 0xCCA4B4
	private Vector3 targetActorPosition; // 0xA0
	[SerializeField] // RVA: 0xCCA4C4 Offset: 0xCCA4C4 VA: 0xCCA4C4
	private Vector3 targetActorRotation; // 0xAC
	[SerializeField] // RVA: 0xCCA4D4 Offset: 0xCCA4D4 VA: 0xCCA4D4
	private string targetMaterialName; // 0xB8
	[SerializeField] // RVA: 0xCCA4E4 Offset: 0xCCA4E4 VA: 0xCCA4E4
	private string targetTextureName; // 0xC0
	[SerializeField] // RVA: 0xCCA4F4 Offset: 0xCCA4F4 VA: 0xCCA4F4
	private int changeLayer; // 0xC8
	private RenderTexture renderTexture; // 0xD0
	private Dictionary<GameObject, int> changeLayerObjects; // 0xD8
	private Dictionary<Material, Texture> changeTextureMaterials; // 0xE0
	private GameObject tmp_parent_obj; // 0xE8
	private Camera tmp_camera; // 0xF0
	private GameObject chrObj; // 0xF8
	private bool orgChrObjActiveSelf; // 0x100
	private SkinnedMeshRenderer boundsRenderer; // 0x108
	private bool boundsRendererOrgUpdateWhenOffscreens; // 0x110

	// Methods

	// RVA: 0x1F63894 Offset: 0x1F63894 VA: 0x1F63894
	public void .ctor() { }

	// RVA: 0x1F63950 Offset: 0x1F63950 VA: 0x1F63950 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6500C Offset: 0x1F6500C VA: 0x1F6500C Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1F65010 Offset: 0x1F65010 VA: 0x1F65010 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6501C Offset: 0x1F6501C VA: 0x1F6501C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F65028 Offset: 0x1F65028 VA: 0x1F65028 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F64C24 Offset: 0x1F64C24 VA: 0x1F64C24
	private void setupBoundsCamera(GameObject chrObj) { }

	// RVA: 0x1F64AD0 Offset: 0x1F64AD0 VA: 0x1F64AD0
	private GameObject getChr(GameObject gameObject) { }

	// RVA: 0x1F64A34 Offset: 0x1F64A34 VA: 0x1F64A34
	private GameObject getActor() { }

	// RVA: 0x1F6578C Offset: 0x1F6578C VA: 0x1F6578C
	private SkinnedMeshRenderer getChrBodyRenderer(GameObject chr) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95990 Offset: 0xC95990 VA: 0xC95990
[USequencerEventAttribute] // RVA: 0xC95990 Offset: 0xC95990 VA: 0xC95990
public class USFGOObjectFlip : USEventBase // TypeDefIndex: 8155
{
	// Fields
	[SerializeField] // RVA: 0xCCA504 Offset: 0xCCA504 VA: 0xCCA504
	[TooltipAttribute] // RVA: 0xCCA504 Offset: 0xCCA504 VA: 0xCCA504
	private USFGOObjectFlip.FGOFlipTarget rotationTarget; // 0x30
	[SerializeField] // RVA: 0xCCA550 Offset: 0xCCA550 VA: 0xCCA550
	[TooltipAttribute] // RVA: 0xCCA550 Offset: 0xCCA550 VA: 0xCCA550
	private USFGOObjectFlip.FGOFlipTarget scaleTarget; // 0x34
	private Quaternion saveRotation; // 0x38
	private Vector3 saveScale; // 0x48
	private bool isFlipped; // 0x54

	// Methods

	// RVA: 0x1F58FF0 Offset: 0x1F58FF0 VA: 0x1F58FF0
	public void .ctor() { }

	// RVA: 0x1F5917C Offset: 0x1F5917C VA: 0x1F5917C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F65C14 Offset: 0x1F65C14 VA: 0x1F65C14 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1F65C18 Offset: 0x1F65C18 VA: 0x1F65C18 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F65C24 Offset: 0x1F65C24 VA: 0x1F65C24 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F65D74 Offset: 0x1F65D74 VA: 0x1F65D74 Slot: 16
	protected virtual void FlippedTransform(Transform tr) { }

	// RVA: 0x1F65F54 Offset: 0x1F65F54 VA: 0x1F65F54
	protected Vector3 FlippedVector3(float x, float y, float z, USFGOObjectFlip.FGOFlipTarget target) { }

	// RVA: 0x1F65F2C Offset: 0x1F65F2C VA: 0x1F65F2C
	protected Vector3 FlippedVector3(Vector3 vec3, USFGOObjectFlip.FGOFlipTarget target) { }

	// RVA: 0x1F65E7C Offset: 0x1F65E7C VA: 0x1F65E7C
	protected Quaternion FlippedQuaternion(Quaternion qua, USFGOObjectFlip.FGOFlipTarget target) { }
}

// Namespace: 
public enum USFGOObjectFlip.FGOFlipTarget // TypeDefIndex: 8156
{
	// Fields
	public int value__; // 0x0
	public const USFGOObjectFlip.FGOFlipTarget None = 0;
	public const USFGOObjectFlip.FGOFlipTarget X = 1;
	public const USFGOObjectFlip.FGOFlipTarget Y = 2;
	public const USFGOObjectFlip.FGOFlipTarget Z = 4;
	public const USFGOObjectFlip.FGOFlipTarget X_Y = 3;
	public const USFGOObjectFlip.FGOFlipTarget X_Z = 5;
	public const USFGOObjectFlip.FGOFlipTarget Y_Z = 6;
	public const USFGOObjectFlip.FGOFlipTarget X_Y_Z = 7;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC959F0 Offset: 0xC959F0 VA: 0xC959F0
[USequencerEventAttribute] // RVA: 0xC959F0 Offset: 0xC959F0 VA: 0xC959F0
public class USFGOObjectRotation : USEventBase // TypeDefIndex: 8157
{
	// Fields
	[SerializeField] // RVA: 0xCCA59C Offset: 0xCCA59C VA: 0xCCA59C
	private Vector3 beforeEuler; // 0x30
	[SerializeField] // RVA: 0xCCA5AC Offset: 0xCCA5AC VA: 0xCCA5AC
	private Vector3 afterEuler; // 0x3C
	[SerializeField] // RVA: 0xCCA5BC Offset: 0xCCA5BC VA: 0xCCA5BC
	[TooltipAttribute] // RVA: 0xCCA5BC Offset: 0xCCA5BC VA: 0xCCA5BC
	private AnimationCurve raitoCurve; // 0x48
	private Quaternion saveRotation; // 0x50
	private Vector3 mathBeforeEuler; // 0x60
	private Vector3 mathAfterEuler; // 0x6C

	// Methods

	// RVA: 0x1F65F7C Offset: 0x1F65F7C VA: 0x1F65F7C
	public void .ctor() { }

	// RVA: 0x1F660B0 Offset: 0x1F660B0 VA: 0x1F660B0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F66224 Offset: 0x1F66224 VA: 0x1F66224 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1F66444 Offset: 0x1F66444 VA: 0x1F66444 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95A50 Offset: 0xC95A50 VA: 0xC95A50
[USequencerEventAttribute] // RVA: 0xC95A50 Offset: 0xC95A50 VA: 0xC95A50
[USequencerEventHideDurationAttribute] // RVA: 0xC95A50 Offset: 0xC95A50 VA: 0xC95A50
public class USFGOPlayAnimationEvent : USEventBase // TypeDefIndex: 8158
{
	// Fields
	public string AnimationName; // 0x30
	public bool AddLevelNumber; // 0x38
	public bool AddBattleSide; // 0x39
	public bool Force30Fps; // 0x3A
	public bool UseChildAnimation; // 0x3B
	protected Animation[] animations; // 0x40
	protected SimpleAnimation[] simpleAnimations; // 0x48
	protected ParticleSystem[] particles; // 0x50
	protected UVScroll[] uvScrolls; // 0x58
	protected changeVColor[] changeVColors; // 0x60
	protected bool originalActive; // 0x68
	protected BattleActorControl actor; // 0x70
	protected readonly string BattleSidePlayer; // 0x78
	protected readonly string BattleSideEnemy; // 0x80

	// Methods

	// RVA: 0x1F6653C Offset: 0x1F6653C VA: 0x1F6653C
	public void .ctor() { }

	// RVA: 0x1F665DC Offset: 0x1F665DC VA: 0x1F665DC Slot: 16
	protected virtual string GetAnimationName(string defaultName) { }

	// RVA: 0x1F669A4 Offset: 0x1F669A4 VA: 0x1F669A4 Slot: 17
	protected virtual void InitializeObject() { }

	// RVA: 0x1F66BA4 Offset: 0x1F66BA4 VA: 0x1F66BA4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F675F4 Offset: 0x1F675F4 VA: 0x1F675F4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F67D4C Offset: 0x1F67D4C VA: 0x1F67D4C Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F67EF4 Offset: 0x1F67EF4 VA: 0x1F67EF4 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95AC0 Offset: 0xC95AC0 VA: 0xC95AC0
[USequencerEventAttribute] // RVA: 0xC95AC0 Offset: 0xC95AC0 VA: 0xC95AC0
[USequencerEventHideDurationAttribute] // RVA: 0xC95AC0 Offset: 0xC95AC0 VA: 0xC95AC0
public class USFGOPlayAnimationEventEx : USFGOPlayAnimationEvent // TypeDefIndex: 8159
{
	// Fields
	public string nonTargetName; // 0x88

	// Methods

	// RVA: 0x1F68040 Offset: 0x1F68040 VA: 0x1F68040
	public void .ctor() { }

	// RVA: 0x1F68044 Offset: 0x1F68044 VA: 0x1F68044 Slot: 17
	protected override void InitializeObject() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95B30 Offset: 0xC95B30 VA: 0xC95B30
[USequencerEventAttribute] // RVA: 0xC95B30 Offset: 0xC95B30 VA: 0xC95B30
public class USFGOPlayAnimationEventWithSpecifiedTime : USEventBase // TypeDefIndex: 8160
{
	// Fields
	public string AnimationName; // 0x30
	public bool AddLevelNumber; // 0x38
	public bool AddBattleSide; // 0x39
	public bool Force30Fps; // 0x3A
	public bool UseChildAnimation; // 0x3B
	public bool Looping; // 0x3C
	public float startTime; // 0x40
	public float stopTime; // 0x44
	protected Animation[] animations; // 0x48
	protected SimpleAnimation[] simpleAnimations; // 0x50
	protected ParticleSystem[] particles; // 0x58
	protected float previousRunningTime; // 0x60
	protected UVScroll[] uvScrolls; // 0x68
	protected changeVColor[] changeVColors; // 0x70
	protected bool originalActive; // 0x78
	protected float originalDuration; // 0x7C
	protected WrapMode[] originalAnimationWrapModes; // 0x80
	protected bool[] originalParticleLoopings; // 0x88
	protected BattleActorControl actor; // 0x90
	protected readonly string BattleSidePlayer; // 0x98
	protected readonly string BattleSideEnemy; // 0xA0

	// Methods

	// RVA: 0x1F683DC Offset: 0x1F683DC VA: 0x1F683DC
	public void .ctor() { }

	// RVA: 0x1F6847C Offset: 0x1F6847C VA: 0x1F6847C Slot: 16
	protected virtual string GetAnimationName(string defaultName) { }

	// RVA: 0x1F68844 Offset: 0x1F68844 VA: 0x1F68844 Slot: 17
	protected virtual void InitializeObject() { }

	// RVA: 0x1F68A74 Offset: 0x1F68A74 VA: 0x1F68A74 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6987C Offset: 0x1F6987C VA: 0x1F6987C Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1F6A084 Offset: 0x1F6A084 VA: 0x1F6A084 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6A300 Offset: 0x1F6A300 VA: 0x1F6A300 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F6A408 Offset: 0x1F6A408 VA: 0x1F6A408 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95B90 Offset: 0xC95B90 VA: 0xC95B90
[USequencerEventAttribute] // RVA: 0xC95B90 Offset: 0xC95B90 VA: 0xC95B90
[USequencerEventHideDurationAttribute] // RVA: 0xC95B90 Offset: 0xC95B90 VA: 0xC95B90
public class USFGOPlayAudioEvent : USEventBase // TypeDefIndex: 8161
{
	// Fields
	private static readonly int REPLACE_PRECISION; // 0x0
	public USFGOPlayAudioEvent.AudioCategory category; // 0x30
	public USFGOPlayAudioEvent.AudioType audioType; // 0x34
	public string groupId; // 0x38
	public string soundId; // 0x40
	public bool NotPlayHighspeed; // 0x48
	public bool NotPlayNomalspeed; // 0x49
	protected static SePlayer PrevSound; // 0x8
	public AudioClip audioClip; // 0x50
	public bool loop; // 0x58
	private bool wasPlaying; // 0x59
	[TooltipAttribute] // RVA: 0xCCA608 Offset: 0xCCA608 VA: 0xCCA608
	public bool disableServantChange; // 0x5A
	public int[] doNotPlayLimitCounts; // 0x60

	// Properties
	private bool IsPlayable { get; }
	private bool IsReplaceable { get; }

	// Methods

	// RVA: 0x1F6A89C Offset: 0x1F6A89C VA: 0x1F6A89C
	public void .ctor() { }

	// RVA: 0x1F6A8A4 Offset: 0x1F6A8A4 VA: 0x1F6A8A4
	private bool get_IsPlayable() { }

	// RVA: 0x1F6AAAC Offset: 0x1F6AAAC VA: 0x1F6AAAC
	public void Update() { }

	// RVA: 0x1F6AB54 Offset: 0x1F6AB54 VA: 0x1F6AB54
	private bool get_IsReplaceable() { }

	// RVA: 0x1F6AC70 Offset: 0x1F6AC70 VA: 0x1F6AC70
	private void ReplaceGroupId() { }

	// RVA: 0x1F6AD68 Offset: 0x1F6AD68 VA: 0x1F6AD68
	private void ReplaceSoundId() { }

	// RVA: 0x1F6B3DC Offset: 0x1F6B3DC VA: 0x1F6B3DC
	private bool CheckReplacableNobleVoice() { }

	// RVA: 0x1F6BB40 Offset: 0x1F6BB40 VA: 0x1F6BB40
	protected string GetAudioAssetPath() { }

	// RVA: 0x1F6BC68 Offset: 0x1F6BC68 VA: 0x1F6BC68
	protected string GetAudioAssetFileName() { }

	// RVA: 0x1F6BCF8 Offset: 0x1F6BCF8 VA: 0x1F6BCF8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6C094 Offset: 0x1F6C094 VA: 0x1F6C094
	protected void audioPlay(string assetPath, string assetFile) { }

	// RVA: 0x1F6CA10 Offset: 0x1F6CA10 VA: 0x1F6CA10 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F6CC30 Offset: 0x1F6CC30 VA: 0x1F6CC30 Slot: 11
	public override void ManuallySetTime(float deltaTime) { }

	// RVA: 0x1F6CD08 Offset: 0x1F6CD08 VA: 0x1F6CD08 Slot: 7
	public override void ResumeEvent() { }

	// RVA: 0x1F6CE40 Offset: 0x1F6CE40 VA: 0x1F6CE40 Slot: 6
	public override void PauseEvent() { }

	// RVA: 0x1F6CF60 Offset: 0x1F6CF60 VA: 0x1F6CF60 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6CF6C Offset: 0x1F6CF6C VA: 0x1F6CF6C Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F6CF78 Offset: 0x1F6CF78 VA: 0x1F6CF78 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F6D084 Offset: 0x1F6D084 VA: 0x1F6D084 Slot: 16
	public virtual bool FixSyncGroupRandomAudioPlayIndex(string syncGroupName) { }

	// RVA: 0x1F6D08C Offset: 0x1F6D08C VA: 0x1F6D08C
	private static void .cctor() { }
}

// Namespace: 
public enum USFGOPlayAudioEvent.AudioCategory // TypeDefIndex: 8162
{
	// Fields
	public int value__; // 0x0
	public const USFGOPlayAudioEvent.AudioCategory ServantNoblePhantasm = 0;
	public const USFGOPlayAudioEvent.AudioCategory ServantBattle = 1;
	public const USFGOPlayAudioEvent.AudioCategory ServantNormal = 2;
	public const USFGOPlayAudioEvent.AudioCategory Common = 3;
	public const USFGOPlayAudioEvent.AudioCategory BattleCommon = 4;
	public const USFGOPlayAudioEvent.AudioCategory Weapon = 5;
}

// Namespace: 
public enum USFGOPlayAudioEvent.AudioType // TypeDefIndex: 8163
{
	// Fields
	public int value__; // 0x0
	public const USFGOPlayAudioEvent.AudioType Auto = 0;
	public const USFGOPlayAudioEvent.AudioType SE = 1;
	public const USFGOPlayAudioEvent.AudioType Voice = 2;
	public const USFGOPlayAudioEvent.AudioType VoiceNotStop = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF210 Offset: 0xCAF210 VA: 0xCAF210
private sealed class USFGOPlayAudioEvent.<FireEvent>c__AnonStorey0 // TypeDefIndex: 8164
{
	// Fields
	internal string assetPath; // 0x10
	internal string assetFile; // 0x18
	internal USFGOPlayAudioEvent $this; // 0x20

	// Methods

	// RVA: 0x1F6C08C Offset: 0x1F6C08C VA: 0x1F6C08C
	public void .ctor() { }

	// RVA: 0x1F6D0E0 Offset: 0x1F6D0E0 VA: 0x1F6D0E0
	internal void <>m__0() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95C00 Offset: 0xC95C00 VA: 0xC95C00
[USequencerEventAttribute] // RVA: 0xC95C00 Offset: 0xC95C00 VA: 0xC95C00
[USequencerEventHideDurationAttribute] // RVA: 0xC95C00 Offset: 0xC95C00 VA: 0xC95C00
public class USFGOPlayAudioEventConditional : USFGOPlayAudioEvent // TypeDefIndex: 8165
{
	// Fields
	[SpaceAttribute] // RVA: 0xCCA640 Offset: 0xCCA640 VA: 0xCCA640
	[SerializeField] // RVA: 0xCCA640 Offset: 0xCCA640 VA: 0xCCA640
	[TooltipAttribute] // RVA: 0xCCA640 Offset: 0xCCA640 VA: 0xCCA640
	private string syncPlayGroup; // 0x68
	[SerializeField] // RVA: 0xCCA6A0 Offset: 0xCCA6A0 VA: 0xCCA6A0
	private List<USFGOPlayAudioEventConditional.AudioData> audioDataList; // 0x70
	[SerializeField] // RVA: 0xCCA6B0 Offset: 0xCCA6B0 VA: 0xCCA6B0
	[TooltipAttribute] // RVA: 0xCCA6B0 Offset: 0xCCA6B0 VA: 0xCCA6B0
	private bool registPlayedFlag; // 0x78

