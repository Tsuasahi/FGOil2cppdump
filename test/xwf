public enum UIAnchor.Side // TypeDefIndex: 12165
{
	// Fields
	public int value__; // 0x0
	public const UIAnchor.Side BottomLeft = 0;
	public const UIAnchor.Side Left = 1;
	public const UIAnchor.Side TopLeft = 2;
	public const UIAnchor.Side Top = 3;
	public const UIAnchor.Side TopRight = 4;
	public const UIAnchor.Side Right = 5;
	public const UIAnchor.Side BottomRight = 6;
	public const UIAnchor.Side Bottom = 7;
	public const UIAnchor.Side Center = 8;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC9906C Offset: 0xC9906C VA: 0xC9906C
public class UIAtlas : MonoBehaviour // TypeDefIndex: 12166
{
	// Fields
	[HideInInspector] // RVA: 0xCF1F8C Offset: 0xCF1F8C VA: 0xCF1F8C
	[SerializeField] // RVA: 0xCF1F8C Offset: 0xCF1F8C VA: 0xCF1F8C
	private Material material; // 0x18
	[HideInInspector] // RVA: 0xCF1FC4 Offset: 0xCF1FC4 VA: 0xCF1FC4
	[SerializeField] // RVA: 0xCF1FC4 Offset: 0xCF1FC4 VA: 0xCF1FC4
	private List<UISpriteData> mSprites; // 0x20
	[HideInInspector] // RVA: 0xCF1FFC Offset: 0xCF1FFC VA: 0xCF1FFC
	[SerializeField] // RVA: 0xCF1FFC Offset: 0xCF1FFC VA: 0xCF1FFC
	private float mPixelSize; // 0x28
	[HideInInspector] // RVA: 0xCF2034 Offset: 0xCF2034 VA: 0xCF2034
	[SerializeField] // RVA: 0xCF2034 Offset: 0xCF2034 VA: 0xCF2034
	private UIAtlas mReplacement; // 0x30
	[HideInInspector] // RVA: 0xCF206C Offset: 0xCF206C VA: 0xCF206C
	[SerializeField] // RVA: 0xCF206C Offset: 0xCF206C VA: 0xCF206C
	private UIAtlas.Coordinates mCoordinates; // 0x38
	[HideInInspector] // RVA: 0xCF20A4 Offset: 0xCF20A4 VA: 0xCF20A4
	[SerializeField] // RVA: 0xCF20A4 Offset: 0xCF20A4 VA: 0xCF20A4
	private List<UIAtlas.Sprite> sprites; // 0x40
	private int mPMA; // 0x48
	private Dictionary<string, int> mSpriteIndices; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCF20DC Offset: 0xCF20DC VA: 0xCF20DC
	private static Comparison<UISpriteData> <>f__am$cache0; // 0x0

	// Properties
	public Material spriteMaterial { get; set; }
	public bool premultipliedAlpha { get; }
	public List<UISpriteData> spriteList { get; set; }
	public Texture texture { get; }
	public float pixelSize { get; set; }
	public UIAtlas replacement { get; set; }

	// Methods

	// RVA: 0x24A138C Offset: 0x24A138C VA: 0x24A138C
	public void .ctor() { }

	// RVA: 0x24A145C Offset: 0x24A145C VA: 0x24A145C
	public Material get_spriteMaterial() { }

	// RVA: 0x24A1500 Offset: 0x24A1500 VA: 0x24A1500
	public void set_spriteMaterial(Material value) { }

	// RVA: 0x24A1AA0 Offset: 0x24A1AA0 VA: 0x24A1AA0
	public bool get_premultipliedAlpha() { }

	// RVA: 0x24A1C44 Offset: 0x24A1C44 VA: 0x24A1C44
	public List<UISpriteData> get_spriteList() { }

	// RVA: 0x24A2234 Offset: 0x24A2234 VA: 0x24A2234
	public void set_spriteList(List<UISpriteData> value) { }

	// RVA: 0x24A22E4 Offset: 0x24A22E4 VA: 0x24A22E4
	public Texture get_texture() { }

	// RVA: 0x24A23E4 Offset: 0x24A23E4 VA: 0x24A23E4
	public float get_pixelSize() { }

	// RVA: 0x24A2488 Offset: 0x24A2488 VA: 0x24A2488
	public void set_pixelSize(float value) { }

	// RVA: 0x24A2594 Offset: 0x24A2594 VA: 0x24A2594
	public UIAtlas get_replacement() { }

	// RVA: 0x24A259C Offset: 0x24A259C VA: 0x24A259C
	public void set_replacement(UIAtlas value) { }

	// RVA: 0x24A2748 Offset: 0x24A2748 VA: 0x24A2748
	public UISpriteData GetSprite(string name) { }

	// RVA: 0x24A2BA0 Offset: 0x24A2BA0 VA: 0x24A2BA0
	public string GetRandomSprite(string startsWith) { }

	// RVA: 0x24A2A80 Offset: 0x24A2A80 VA: 0x24A2A80
	public void MarkSpriteListAsChanged() { }

	// RVA: 0x24A2DF0 Offset: 0x24A2DF0 VA: 0x24A2DF0
	public void SortAlphabetically() { }

	// RVA: 0x24A2EC0 Offset: 0x24A2EC0 VA: 0x24A2EC0
	public BetterList<string> GetListOfSprites() { }

	// RVA: 0x24A308C Offset: 0x24A308C VA: 0x24A308C
	public BetterList<string> GetListOfSprites(string match) { }

	// RVA: 0x24A3580 Offset: 0x24A3580 VA: 0x24A3580
	private bool References(UIAtlas atlas) { }

	// RVA: 0x24A3690 Offset: 0x24A3690 VA: 0x24A3690
	public static bool CheckIfRelated(UIAtlas a, UIAtlas b) { }

	// RVA: 0x24A1614 Offset: 0x24A1614 VA: 0x24A1614
	public void MarkAsChanged() { }

	// RVA: 0x24A1D18 Offset: 0x24A1D18 VA: 0x24A1D18
	private bool Upgrade() { }

	// RVA: 0x24A37B4 Offset: 0x24A37B4 VA: 0x24A37B4
	public static UIAtlas GetUIAtlasBySpriteName(List<UIAtlas> atlases, string spName) { }

	[CompilerGeneratedAttribute] // RVA: 0xD44D04 Offset: 0xD44D04 VA: 0xD44D04
	// RVA: 0x24A392C Offset: 0x24A392C VA: 0x24A392C
	private static int <SortAlphabetically>m__0(UISpriteData s1, UISpriteData s2) { }
}

// Namespace: 
[Serializable]
private class UIAtlas.Sprite // TypeDefIndex: 12167
{
	// Fields
	public string name; // 0x10
	public Rect outer; // 0x18
	public Rect inner; // 0x28
	public bool rotated; // 0x38
	public float paddingLeft; // 0x3C
	public float paddingRight; // 0x40
	public float paddingTop; // 0x44
	public float paddingBottom; // 0x48

	// Properties
	public bool hasPadding { get; }

	// Methods

	// RVA: 0x24A3980 Offset: 0x24A3980 VA: 0x24A3980
	public void .ctor() { }

	// RVA: 0x24A3A60 Offset: 0x24A3A60 VA: 0x24A3A60
	public bool get_hasPadding() { }
}

// Namespace: 
private enum UIAtlas.Coordinates // TypeDefIndex: 12168
{
	// Fields
	public int value__; // 0x0
	public const UIAtlas.Coordinates Pixels = 0;
	public const UIAtlas.Coordinates TexCoords = 1;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC990A4 Offset: 0xC990A4 VA: 0xC990A4
[AddComponentMenu] // RVA: 0xC990A4 Offset: 0xC990A4 VA: 0xC990A4
public class UIFont : MonoBehaviour // TypeDefIndex: 12169
{
	// Fields
	[HideInInspector] // RVA: 0xCF20EC Offset: 0xCF20EC VA: 0xCF20EC
	[SerializeField] // RVA: 0xCF20EC Offset: 0xCF20EC VA: 0xCF20EC
	private Material mMat; // 0x18
	[HideInInspector] // RVA: 0xCF2124 Offset: 0xCF2124 VA: 0xCF2124
	[SerializeField] // RVA: 0xCF2124 Offset: 0xCF2124 VA: 0xCF2124
	private Rect mUVRect; // 0x20
	[HideInInspector] // RVA: 0xCF215C Offset: 0xCF215C VA: 0xCF215C
	[SerializeField] // RVA: 0xCF215C Offset: 0xCF215C VA: 0xCF215C
	private BMFont mFont; // 0x30
	[HideInInspector] // RVA: 0xCF2194 Offset: 0xCF2194 VA: 0xCF2194
	[SerializeField] // RVA: 0xCF2194 Offset: 0xCF2194 VA: 0xCF2194
	private UIAtlas mAtlas; // 0x38
	[HideInInspector] // RVA: 0xCF21CC Offset: 0xCF21CC VA: 0xCF21CC
	[SerializeField] // RVA: 0xCF21CC Offset: 0xCF21CC VA: 0xCF21CC
	private UIFont mReplacement; // 0x40
	[HideInInspector] // RVA: 0xCF2204 Offset: 0xCF2204 VA: 0xCF2204
	[SerializeField] // RVA: 0xCF2204 Offset: 0xCF2204 VA: 0xCF2204
	private List<BMSymbol> mSymbols; // 0x48
	[HideInInspector] // RVA: 0xCF223C Offset: 0xCF223C VA: 0xCF223C
	[SerializeField] // RVA: 0xCF223C Offset: 0xCF223C VA: 0xCF223C
	private Font mDynamicFont; // 0x50
	[HideInInspector] // RVA: 0xCF2274 Offset: 0xCF2274 VA: 0xCF2274
	[SerializeField] // RVA: 0xCF2274 Offset: 0xCF2274 VA: 0xCF2274
	private int mDynamicFontSize; // 0x58
	[HideInInspector] // RVA: 0xCF22AC Offset: 0xCF22AC VA: 0xCF22AC
	[SerializeField] // RVA: 0xCF22AC Offset: 0xCF22AC VA: 0xCF22AC
	private FontStyle mDynamicFontStyle; // 0x5C
	private UISpriteData mSprite; // 0x60
	private int mPMA; // 0x68
	private int mPacked; // 0x6C

	// Properties
	public BMFont bmFont { get; set; }
	public int texWidth { get; set; }
	public int texHeight { get; set; }
	public bool hasSymbols { get; }
	public List<BMSymbol> symbols { get; }
	public UIAtlas atlas { get; set; }
	public Material material { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4C1EC Offset: 0xD4C1EC VA: 0xD4C1EC
	public bool premultipliedAlpha { get; }
	public bool premultipliedAlphaShader { get; }
	public bool packedFontShader { get; }
	public Texture2D texture { get; }
	public Rect uvRect { get; set; }
	public string spriteName { get; set; }
	public bool isValid { get; }
	[ObsoleteAttribute] // RVA: 0xD4C224 Offset: 0xD4C224 VA: 0xD4C224
	public int size { get; set; }
	public int defaultSize { get; set; }
	public UISpriteData sprite { get; }
	public UIFont replacement { get; set; }
	public bool isDynamic { get; }
	public Font dynamicFont { get; set; }
	public FontStyle dynamicFontStyle { get; set; }
	private Texture dynamicTexture { get; }

	// Methods

	// RVA: 0x2092C74 Offset: 0x2092C74 VA: 0x2092C74
	public void .ctor() { }

	// RVA: 0x2092D58 Offset: 0x2092D58 VA: 0x2092D58
	public BMFont get_bmFont() { }

	// RVA: 0x2092DFC Offset: 0x2092DFC VA: 0x2092DFC
	public void set_bmFont(BMFont value) { }

	// RVA: 0x2092EAC Offset: 0x2092EAC VA: 0x2092EAC
	public int get_texWidth() { }

	// RVA: 0x2092F70 Offset: 0x2092F70 VA: 0x2092F70
	public void set_texWidth(int value) { }

	// RVA: 0x2093044 Offset: 0x2093044 VA: 0x2093044
	public int get_texHeight() { }

	// RVA: 0x2093108 Offset: 0x2093108 VA: 0x2093108
	public void set_texHeight(int value) { }

	// RVA: 0x20931DC Offset: 0x20931DC VA: 0x20931DC
	public bool get_hasSymbols() { }

	// RVA: 0x209329C Offset: 0x209329C VA: 0x209329C
	public List<BMSymbol> get_symbols() { }

	// RVA: 0x2093340 Offset: 0x2093340 VA: 0x2093340
	public UIAtlas get_atlas() { }

	// RVA: 0x20933E4 Offset: 0x20933E4 VA: 0x20933E4
	public void set_atlas(UIAtlas value) { }

	// RVA: 0x2093B78 Offset: 0x2093B78 VA: 0x2093B78
	public Material get_material() { }

	// RVA: 0x2093DE8 Offset: 0x2093DE8 VA: 0x2093DE8
	public void set_material(Material value) { }

	// RVA: 0x2093EEC Offset: 0x2093EEC VA: 0x2093EEC
	public bool get_premultipliedAlpha() { }

	// RVA: 0x2093EF0 Offset: 0x2093EF0 VA: 0x2093EF0
	public bool get_premultipliedAlphaShader() { }

	// RVA: 0x20940F0 Offset: 0x20940F0 VA: 0x20940F0
	public bool get_packedFontShader() { }

	// RVA: 0x20942CC Offset: 0x20942CC VA: 0x20942CC
	public Texture2D get_texture() { }

	// RVA: 0x20937AC Offset: 0x20937AC VA: 0x20937AC
	public Rect get_uvRect() { }

	// RVA: 0x20943E4 Offset: 0x20943E4 VA: 0x20943E4
	public void set_uvRect(Rect value) { }

	// RVA: 0x20944F8 Offset: 0x20944F8 VA: 0x20944F8
	public string get_spriteName() { }

	// RVA: 0x20945B0 Offset: 0x20945B0 VA: 0x20945B0
	public void set_spriteName(string value) { }

	// RVA: 0x20946F0 Offset: 0x20946F0 VA: 0x20946F0
	public bool get_isValid() { }

	// RVA: 0x2094790 Offset: 0x2094790 VA: 0x2094790
	public int get_size() { }

	// RVA: 0x2094864 Offset: 0x2094864 VA: 0x2094864
	public void set_size(int value) { }

	// RVA: 0x2094794 Offset: 0x2094794 VA: 0x2094794
	public int get_defaultSize() { }

	// RVA: 0x2094868 Offset: 0x2094868 VA: 0x2094868
	public void set_defaultSize(int value) { }

	// RVA: 0x2093550 Offset: 0x2093550 VA: 0x2093550
	public UISpriteData get_sprite() { }

	// RVA: 0x2094CF8 Offset: 0x2094CF8 VA: 0x2094CF8
	public UIFont get_replacement() { }

	// RVA: 0x2094D00 Offset: 0x2094D00 VA: 0x2094D00
	public void set_replacement(UIFont value) { }

	// RVA: 0x2094918 Offset: 0x2094918 VA: 0x2094918
	public bool get_isDynamic() { }

	// RVA: 0x2094EBC Offset: 0x2094EBC VA: 0x2094EBC
	public Font get_dynamicFont() { }

	// RVA: 0x2094F60 Offset: 0x2094F60 VA: 0x2094F60
	public void set_dynamicFont(Font value) { }

	// RVA: 0x2095098 Offset: 0x2095098 VA: 0x2095098
	public FontStyle get_dynamicFontStyle() { }

	// RVA: 0x209513C Offset: 0x209513C VA: 0x209513C
	public void set_dynamicFontStyle(FontStyle value) { }

	// RVA: 0x2095214 Offset: 0x2095214 VA: 0x2095214
	private void Trim() { }

	// RVA: 0x20954E4 Offset: 0x20954E4 VA: 0x20954E4
	private bool References(UIFont font) { }

	// RVA: 0x20955F4 Offset: 0x20955F4 VA: 0x20955F4
	public static bool CheckIfRelated(UIFont a, UIFont b) { }

	// RVA: 0x2095830 Offset: 0x2095830 VA: 0x2095830
	private Texture get_dynamicTexture() { }

	// RVA: 0x20938C0 Offset: 0x20938C0 VA: 0x20938C0
	public void MarkAsChanged() { }

	// RVA: 0x20949E0 Offset: 0x20949E0 VA: 0x20949E0
	public void UpdateUVRect() { }

	// RVA: 0x2095920 Offset: 0x2095920 VA: 0x2095920
	private BMSymbol GetSymbol(string sequence, bool createIfMissing) { }

	// RVA: 0x2095A98 Offset: 0x2095A98 VA: 0x2095A98
	public BMSymbol MatchSymbol(string text, int offset, int textLength) { }

	// RVA: 0x2095C50 Offset: 0x2095C50 VA: 0x2095C50
	public void AddSymbol(string sequence, string spriteName) { }

	// RVA: 0x2095C94 Offset: 0x2095C94 VA: 0x2095C94
	public void RemoveSymbol(string sequence) { }

	// RVA: 0x2095D28 Offset: 0x2095D28 VA: 0x2095D28
	public void RenameSymbol(string before, string after) { }

	// RVA: 0x2095D5C Offset: 0x2095D5C VA: 0x2095D5C
	public bool UsesSprite(string s) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC990F0 Offset: 0xC990F0 VA: 0xC990F0
public class UIInput : MonoBehaviour // TypeDefIndex: 12170
{
	// Fields
	public static UIInput current; // 0x0
	public static UIInput selection; // 0x8
	public UILabel label; // 0x18
	public UIInput.InputType inputType; // 0x20
	public UIInput.OnReturnKey onReturnKey; // 0x24
	public UIInput.KeyboardType keyboardType; // 0x28
	public bool hideInput; // 0x2C
	public bool selectAllTextOnFocus; // 0x2D
	public UIInput.Validation validation; // 0x30
	public int characterLimit; // 0x34
	public string savedAs; // 0x38
	[HideInInspector] // RVA: 0xCF22E4 Offset: 0xCF22E4 VA: 0xCF22E4
	[SerializeField] // RVA: 0xCF22E4 Offset: 0xCF22E4 VA: 0xCF22E4
	private GameObject selectOnTab; // 0x40
	public Color activeTextColor; // 0x48
	public Color caretColor; // 0x58
	public Color selectionColor; // 0x68
	public List<EventDelegate> onSubmit; // 0x78
	public List<EventDelegate> onChange; // 0x80
	public UIInput.OnValidate onValidate; // 0x88
	[SerializeField] // RVA: 0xCF231C Offset: 0xCF231C VA: 0xCF231C
	[HideInInspector] // RVA: 0xCF231C Offset: 0xCF231C VA: 0xCF231C
	protected string mValue; // 0x90
	protected string mDefaultText; // 0x98
	protected Color mDefaultColor; // 0xA0
	protected float mPosition; // 0xB0
	protected bool mDoInit; // 0xB4
	protected UIWidget.Pivot mPivot; // 0xB8
	protected bool mLoadSavedValue; // 0xBC
	protected static int mDrawStart; // 0x10
	protected static string mLastIME; // 0x18
	protected static TouchScreenKeyboard mKeyboard; // 0x20
	private static bool mWaitForKeyboard; // 0x28
	protected int mSelectionStart; // 0xC0
	protected int mSelectionEnd; // 0xC4
	protected UITexture mHighlight; // 0xC8
	protected UITexture mCaret; // 0xD0
	protected Texture2D mBlankTex; // 0xD8
	protected float mNextBlink; // 0xE0
	protected float mLastAlpha; // 0xE4
	protected string mCached; // 0xE8
	protected int mSelectMe; // 0xF0

	// Properties
	public string defaultText { get; set; }
	public bool inputShouldBeHidden { get; }
	[ObsoleteAttribute] // RVA: 0xD4C25C Offset: 0xD4C25C VA: 0xD4C25C
	public string text { get; set; }
	public string value { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4C294 Offset: 0xD4C294 VA: 0xD4C294
	public bool selected { get; set; }
	public bool isSelected { get; set; }
	public int cursorPosition { get; set; }
	public int selectionStart { get; set; }
	public int selectionEnd { get; set; }
	public UITexture caret { get; }

	// Methods

	// RVA: 0x2156334 Offset: 0x2156334 VA: 0x2156334
	public void .ctor() { }

	// RVA: 0x21564D8 Offset: 0x21564D8 VA: 0x21564D8
	public string get_defaultText() { }

	// RVA: 0x21566B8 Offset: 0x21566B8 VA: 0x21566B8
	public void set_defaultText(string value) { }

	// RVA: 0x21575E0 Offset: 0x21575E0 VA: 0x21575E0
	public bool get_inputShouldBeHidden() { }

	// RVA: 0x21576A0 Offset: 0x21576A0 VA: 0x21576A0
	public string get_text() { }

	// RVA: 0x2157700 Offset: 0x2157700 VA: 0x2157700
	public void set_text(string value) { }

	// RVA: 0x21576D0 Offset: 0x21576D0 VA: 0x21576D0
	public string get_value() { }

	// RVA: 0x2157704 Offset: 0x2157704 VA: 0x2157704
	public void set_value(string value) { }

	// RVA: 0x2157EB0 Offset: 0x2157EB0 VA: 0x2157EB0
	public bool get_selected() { }

	// RVA: 0x2157EB4 Offset: 0x2157EB4 VA: 0x2157EB4
	public void set_selected(bool value) { }

	// RVA: 0x2157BFC Offset: 0x2157BFC VA: 0x2157BFC
	public bool get_isSelected() { }

	// RVA: 0x2157EBC Offset: 0x2157EBC VA: 0x2157EBC
	public void set_isSelected(bool value) { }

	// RVA: 0x2157F8C Offset: 0x2157F8C VA: 0x2157F8C
	public int get_cursorPosition() { }

	// RVA: 0x215804C Offset: 0x215804C VA: 0x215804C
	public void set_cursorPosition(int value) { }

	// RVA: 0x21580F8 Offset: 0x21580F8 VA: 0x21580F8
	public int get_selectionStart() { }

	// RVA: 0x21581C0 Offset: 0x21581C0 VA: 0x21581C0
	public void set_selectionStart(int value) { }

	// RVA: 0x215826C Offset: 0x215826C VA: 0x215826C
	public int get_selectionEnd() { }

	// RVA: 0x215832C Offset: 0x215832C VA: 0x215832C
	public void set_selectionEnd(int value) { }

	// RVA: 0x21583D8 Offset: 0x21583D8 VA: 0x21583D8
	public UITexture get_caret() { }

	// RVA: 0x2157954 Offset: 0x2157954 VA: 0x2157954
	public string Validate(string val) { }

	// RVA: 0x2158BAC Offset: 0x2158BAC VA: 0x2158BAC
	private void Start() { }

	// RVA: 0x2156508 Offset: 0x2156508 VA: 0x2156508
	protected void Init() { }

	// RVA: 0x2157C98 Offset: 0x2157C98 VA: 0x2157C98
	protected void SaveToPlayerPrefs(string val) { }

	// RVA: 0x2158ED8 Offset: 0x2158ED8 VA: 0x2158ED8 Slot: 4
	protected virtual void OnSelect(bool isSelected) { }

	// RVA: 0x2158EE4 Offset: 0x2158EE4 VA: 0x2158EE4
	protected void OnSelectEvent() { }

	// RVA: 0x2158FD4 Offset: 0x2158FD4 VA: 0x2158FD4
	protected void OnDeselectEvent() { }

	// RVA: 0x21592E8 Offset: 0x21592E8 VA: 0x21592E8 Slot: 5
	protected virtual void Update() { }

	// RVA: 0x2159FE0 Offset: 0x2159FE0 VA: 0x2159FE0
	protected void DoBackspace() { }

	// RVA: 0x215A220 Offset: 0x215A220 VA: 0x215A220 Slot: 6
	protected virtual void Insert(string text) { }

	// RVA: 0x215A638 Offset: 0x215A638 VA: 0x215A638
	protected string GetLeftText() { }

	// RVA: 0x215A748 Offset: 0x215A748 VA: 0x215A748
	protected string GetRightText() { }

	// RVA: 0x215A874 Offset: 0x215A874 VA: 0x215A874
	protected string GetSelection() { }

	// RVA: 0x215A998 Offset: 0x215A998 VA: 0x215A998
	protected int GetCharUnderMouse() { }

	// RVA: 0x215AC90 Offset: 0x215AC90 VA: 0x215AC90 Slot: 7
	protected virtual void OnPress(bool isPressed) { }

	// RVA: 0x215ADC8 Offset: 0x215ADC8 VA: 0x215ADC8 Slot: 8
	protected virtual void OnDrag(Vector2 delta) { }

	// RVA: 0x215AEB4 Offset: 0x215AEB4 VA: 0x215AEB4
	private void OnDisable() { }

	// RVA: 0x215AEC0 Offset: 0x215AEC0 VA: 0x215AEC0 Slot: 9
	protected virtual void Cleanup() { }

	// RVA: 0x215A0B4 Offset: 0x215A0B4 VA: 0x215A0B4
	public void Submit() { }

	// RVA: 0x21566F0 Offset: 0x21566F0 VA: 0x21566F0
	public void UpdateLabel() { }

	// RVA: 0x215B0C4 Offset: 0x215B0C4 VA: 0x215B0C4
	protected void SetPivotToLeft() { }

	// RVA: 0x215B118 Offset: 0x215B118 VA: 0x215B118
	protected void SetPivotToRight() { }

	// RVA: 0x2159220 Offset: 0x2159220 VA: 0x2159220
	protected void RestoreLabelPivot() { }

	// RVA: 0x21587D4 Offset: 0x21587D4 VA: 0x21587D4
	protected char Validate(string text, int pos, char ch) { }

	// RVA: 0x2157D78 Offset: 0x2157D78 VA: 0x2157D78
	protected void ExecuteOnChange() { }

	// RVA: 0x215B538 Offset: 0x215B538 VA: 0x215B538
	public void RemoveFocus() { }

	// RVA: 0x215B540 Offset: 0x215B540 VA: 0x215B540
	public void SaveValue() { }

	// RVA: 0x2158D70 Offset: 0x2158D70 VA: 0x2158D70
	public void LoadValue() { }

	// RVA: 0x215B548 Offset: 0x215B548 VA: 0x215B548
	private static void .cctor() { }
}

// Namespace: 
public enum UIInput.InputType // TypeDefIndex: 12171
{
	// Fields
	public int value__; // 0x0
	public const UIInput.InputType Standard = 0;
	public const UIInput.InputType AutoCorrect = 1;
	public const UIInput.InputType Password = 2;
}

// Namespace: 
public enum UIInput.Validation // TypeDefIndex: 12172
{
	// Fields
	public int value__; // 0x0
	public const UIInput.Validation None = 0;
	public const UIInput.Validation Integer = 1;
	public const UIInput.Validation Float = 2;
	public const UIInput.Validation Alphanumeric = 3;
	public const UIInput.Validation Username = 4;
	public const UIInput.Validation Name = 5;
}

// Namespace: 
public enum UIInput.KeyboardType // TypeDefIndex: 12173
{
	// Fields
	public int value__; // 0x0
	public const UIInput.KeyboardType Default = 0;
	public const UIInput.KeyboardType ASCIICapable = 1;
	public const UIInput.KeyboardType NumbersAndPunctuation = 2;
	public const UIInput.KeyboardType URL = 3;
	public const UIInput.KeyboardType NumberPad = 4;
	public const UIInput.KeyboardType PhonePad = 5;
	public const UIInput.KeyboardType NamePhonePad = 6;
	public const UIInput.KeyboardType EmailAddress = 7;
}

// Namespace: 
public enum UIInput.OnReturnKey // TypeDefIndex: 12174
{
	// Fields
	public int value__; // 0x0
	public const UIInput.OnReturnKey Default = 0;
	public const UIInput.OnReturnKey Submit = 1;
	public const UIInput.OnReturnKey NewLine = 2;
}

// Namespace: 
public sealed class UIInput.OnValidate : MulticastDelegate // TypeDefIndex: 12175
{
	// Methods

	// RVA: 0x215B5C4 Offset: 0x215B5C4 VA: 0x215B5C4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x21583E0 Offset: 0x21583E0 VA: 0x21583E0 Slot: 11
	public virtual char Invoke(string text, int charIndex, char addedChar) { }

	// RVA: 0x215B5D4 Offset: 0x215B5D4 VA: 0x215B5D4 Slot: 12
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object) { }

	// RVA: 0x215B690 Offset: 0x215B690 VA: 0x215B690 Slot: 13
	public virtual char EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC99128 Offset: 0xC99128 VA: 0xC99128
public class UIInputOnGUI : MonoBehaviour // TypeDefIndex: 12176
{
	// Methods

	// RVA: 0x215B6CC Offset: 0x215B6CC VA: 0x215B6CC
	public void .ctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC9918C Offset: 0xC9918C VA: 0xC9918C
[AddComponentMenu] // RVA: 0xC9918C Offset: 0xC9918C VA: 0xC9918C
public class UILabel : UIWidget // TypeDefIndex: 12177
{
	// Fields
	public UILabel.Crispness keepCrispWhenShrunk; // 0x180
	[HideInInspector] // RVA: 0xCF2354 Offset: 0xCF2354 VA: 0xCF2354
	[SerializeField] // RVA: 0xCF2354 Offset: 0xCF2354 VA: 0xCF2354
	private Font mTrueTypeFont; // 0x188
	[HideInInspector] // RVA: 0xCF238C Offset: 0xCF238C VA: 0xCF238C
	[SerializeField] // RVA: 0xCF238C Offset: 0xCF238C VA: 0xCF238C
	private UIFont mFont; // 0x190
	[MultilineAttribute] // RVA: 0xCF23C4 Offset: 0xCF23C4 VA: 0xCF23C4
	[HideInInspector] // RVA: 0xCF23C4 Offset: 0xCF23C4 VA: 0xCF23C4
	[SerializeField] // RVA: 0xCF23C4 Offset: 0xCF23C4 VA: 0xCF23C4
	private string mText; // 0x198
	[HideInInspector] // RVA: 0xCF2410 Offset: 0xCF2410 VA: 0xCF2410
	[SerializeField] // RVA: 0xCF2410 Offset: 0xCF2410 VA: 0xCF2410
	private int mFontSize; // 0x1A0
	[HideInInspector] // RVA: 0xCF2448 Offset: 0xCF2448 VA: 0xCF2448
	[SerializeField] // RVA: 0xCF2448 Offset: 0xCF2448 VA: 0xCF2448
	private FontStyle mFontStyle; // 0x1A4
	[HideInInspector] // RVA: 0xCF2480 Offset: 0xCF2480 VA: 0xCF2480
	[SerializeField] // RVA: 0xCF2480 Offset: 0xCF2480 VA: 0xCF2480
	private NGUIText.Alignment mAlignment; // 0x1A8
	[HideInInspector] // RVA: 0xCF24B8 Offset: 0xCF24B8 VA: 0xCF24B8
	[SerializeField] // RVA: 0xCF24B8 Offset: 0xCF24B8 VA: 0xCF24B8
	private bool mEncoding; // 0x1AC
	[HideInInspector] // RVA: 0xCF24F0 Offset: 0xCF24F0 VA: 0xCF24F0
	[SerializeField] // RVA: 0xCF24F0 Offset: 0xCF24F0 VA: 0xCF24F0
	private int mMaxLineCount; // 0x1B0
	[HideInInspector] // RVA: 0xCF2528 Offset: 0xCF2528 VA: 0xCF2528
	[SerializeField] // RVA: 0xCF2528 Offset: 0xCF2528 VA: 0xCF2528
	private UILabel.Effect mEffectStyle; // 0x1B4
	[HideInInspector] // RVA: 0xCF2560 Offset: 0xCF2560 VA: 0xCF2560
	[SerializeField] // RVA: 0xCF2560 Offset: 0xCF2560 VA: 0xCF2560
	private Color mEffectColor; // 0x1B8
	[HideInInspector] // RVA: 0xCF2598 Offset: 0xCF2598 VA: 0xCF2598
	[SerializeField] // RVA: 0xCF2598 Offset: 0xCF2598 VA: 0xCF2598
	private NGUIText.SymbolStyle mSymbols; // 0x1C8
	[HideInInspector] // RVA: 0xCF25D0 Offset: 0xCF25D0 VA: 0xCF25D0
	[SerializeField] // RVA: 0xCF25D0 Offset: 0xCF25D0 VA: 0xCF25D0
	private Vector2 mEffectDistance; // 0x1CC
	[HideInInspector] // RVA: 0xCF2608 Offset: 0xCF2608 VA: 0xCF2608
	[SerializeField] // RVA: 0xCF2608 Offset: 0xCF2608 VA: 0xCF2608
	private UILabel.Overflow mOverflow; // 0x1D4
	[HideInInspector] // RVA: 0xCF2640 Offset: 0xCF2640 VA: 0xCF2640
	[SerializeField] // RVA: 0xCF2640 Offset: 0xCF2640 VA: 0xCF2640
	private Material mMaterial; // 0x1D8
	[HideInInspector] // RVA: 0xCF2678 Offset: 0xCF2678 VA: 0xCF2678
	[SerializeField] // RVA: 0xCF2678 Offset: 0xCF2678 VA: 0xCF2678
	private bool mApplyGradient; // 0x1E0
	[HideInInspector] // RVA: 0xCF26B0 Offset: 0xCF26B0 VA: 0xCF26B0
	[SerializeField] // RVA: 0xCF26B0 Offset: 0xCF26B0 VA: 0xCF26B0
	private Color mGradientTop; // 0x1E4
	[HideInInspector] // RVA: 0xCF26E8 Offset: 0xCF26E8 VA: 0xCF26E8
	[SerializeField] // RVA: 0xCF26E8 Offset: 0xCF26E8 VA: 0xCF26E8
	private Color mGradientBottom; // 0x1F4
	[HideInInspector] // RVA: 0xCF2720 Offset: 0xCF2720 VA: 0xCF2720
	[SerializeField] // RVA: 0xCF2720 Offset: 0xCF2720 VA: 0xCF2720
	private int mSpacingX; // 0x204
	[HideInInspector] // RVA: 0xCF2758 Offset: 0xCF2758 VA: 0xCF2758
	[SerializeField] // RVA: 0xCF2758 Offset: 0xCF2758 VA: 0xCF2758
	private int mSpacingY; // 0x208
	[HideInInspector] // RVA: 0xCF2790 Offset: 0xCF2790 VA: 0xCF2790
	[SerializeField] // RVA: 0xCF2790 Offset: 0xCF2790 VA: 0xCF2790
	private bool mUseFloatSpacing; // 0x20C
	[HideInInspector] // RVA: 0xCF27C8 Offset: 0xCF27C8 VA: 0xCF27C8
	[SerializeField] // RVA: 0xCF27C8 Offset: 0xCF27C8 VA: 0xCF27C8
	private float mFloatSpacingX; // 0x210
	[HideInInspector] // RVA: 0xCF2800 Offset: 0xCF2800 VA: 0xCF2800
	[SerializeField] // RVA: 0xCF2800 Offset: 0xCF2800 VA: 0xCF2800
	private float mFloatSpacingY; // 0x214
	[HideInInspector] // RVA: 0xCF2838 Offset: 0xCF2838 VA: 0xCF2838
	[SerializeField] // RVA: 0xCF2838 Offset: 0xCF2838 VA: 0xCF2838
	private bool mShrinkToFit; // 0x218
	[HideInInspector] // RVA: 0xCF2870 Offset: 0xCF2870 VA: 0xCF2870
	[SerializeField] // RVA: 0xCF2870 Offset: 0xCF2870 VA: 0xCF2870
	private int mMaxLineWidth; // 0x21C
	[HideInInspector] // RVA: 0xCF28A8 Offset: 0xCF28A8 VA: 0xCF28A8
	[SerializeField] // RVA: 0xCF28A8 Offset: 0xCF28A8 VA: 0xCF28A8
	private int mMaxLineHeight; // 0x220
	[HideInInspector] // RVA: 0xCF28E0 Offset: 0xCF28E0 VA: 0xCF28E0
	[SerializeField] // RVA: 0xCF28E0 Offset: 0xCF28E0 VA: 0xCF28E0
	private float mLineWidth; // 0x224
	[HideInInspector] // RVA: 0xCF2918 Offset: 0xCF2918 VA: 0xCF2918
	[SerializeField] // RVA: 0xCF2918 Offset: 0xCF2918 VA: 0xCF2918
	private bool mMultiline; // 0x228
	private Color specificGradientTop; // 0x22C
	private Color specificGradientBottom; // 0x23C
	private Color specificOutline; // 0x24C
	private Font mActiveTTF; // 0x260
	private float mDensity; // 0x268
	private bool mShouldBeProcessed; // 0x26C
	private string mProcessedText; // 0x270
	private bool mPremultiply; // 0x278
	private Vector2 mCalculatedSize; // 0x27C
	private float mScale; // 0x284
	private int mPrintedSize; // 0x288
	private int mLastWidth; // 0x28C
	private int mLastHeight; // 0x290
	private static BetterList<UILabel> mList; // 0x0
	private static Dictionary<Font, int> mFontUsage; // 0x8
	private static bool mTexRebuildAdded; // 0x10
	private static BetterList<Vector3> mTempVerts; // 0x18
	private static BetterList<int> mTempIndices; // 0x20
	private static Font defaultFont; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCF2950 Offset: 0xCF2950 VA: 0xCF2950
	private static Action<Font> <>f__mg$cache0; // 0x30

	// Properties
	private bool shouldBeProcessed { get; set; }
	public override bool isAnchoredHorizontally { get; }
	public override bool isAnchoredVertically { get; }
	public override Material material { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4C2CC Offset: 0xD4C2CC VA: 0xD4C2CC
	public UIFont font { get; set; }
	public UIFont bitmapFont { get; set; }
	public Font trueTypeFont { get; set; }
	public Object ambigiousFont { get; set; }
	public string text { get; set; }
	public int defaultFontSize { get; }
	public int fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public NGUIText.Alignment alignment { get; set; }
	public bool applyGradient { get; set; }
	public Color gradientTop { get; set; }
	public Color gradientBottom { get; set; }
	public int spacingX { get; set; }
	public int spacingY { get; set; }
	public bool useFloatSpacing { get; set; }
	public float floatSpacingX { get; set; }
	public float floatSpacingY { get; set; }
	public float effectiveSpacingY { get; }
	public float effectiveSpacingX { get; }
	private bool keepCrisp { get; }
	public bool supportEncoding { get; set; }
	public NGUIText.SymbolStyle symbolStyle { get; set; }
	public UILabel.Overflow overflowMethod { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4C304 Offset: 0xD4C304 VA: 0xD4C304
	public int lineWidth { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4C33C Offset: 0xD4C33C VA: 0xD4C33C
	public int lineHeight { get; set; }
	public bool multiLine { get; set; }
	public override Vector3[] localCorners { get; }
	public override Vector3[] worldCorners { get; }
	public override Vector4 drawingDimensions { get; }
	public int maxLineCount { get; set; }
	public UILabel.Effect effectStyle { get; set; }
	public Color effectColor { get; set; }
	public Vector2 effectDistance { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4C374 Offset: 0xD4C374 VA: 0xD4C374
	public bool shrinkToFit { get; set; }
	public string processedText { get; }
	public Vector2 printedSize { get; }
	public override Vector2 localSize { get; }
	private bool isValid { get; }

	// Methods

	// RVA: 0x215DA7C Offset: 0x215DA7C VA: 0x215DA7C
	public void .ctor() { }

	// RVA: 0x215DC28 Offset: 0x215DC28 VA: 0x215DC28
	private bool get_shouldBeProcessed() { }

	// RVA: 0x215DC30 Offset: 0x215DC30 VA: 0x215DC30
	private void set_shouldBeProcessed(bool value) { }

	// RVA: 0x215DC4C Offset: 0x215DC4C VA: 0x215DC4C Slot: 4
	public override bool get_isAnchoredHorizontally() { }

	// RVA: 0x215DC88 Offset: 0x215DC88 VA: 0x215DC88 Slot: 5
	public override bool get_isAnchoredVertically() { }

	// RVA: 0x215DCC8 Offset: 0x215DCC8 VA: 0x215DCC8 Slot: 24
	public override Material get_material() { }

	// RVA: 0x215DE04 Offset: 0x215DE04 VA: 0x215DE04 Slot: 25
	public override void set_material(Material value) { }

	// RVA: 0x215DEB8 Offset: 0x215DEB8 VA: 0x215DEB8
	public UIFont get_font() { }

	// RVA: 0x215DEC0 Offset: 0x215DEC0 VA: 0x215DEC0
	public void set_font(UIFont value) { }

	// RVA: 0x215B008 Offset: 0x215B008 VA: 0x215B008
	public UIFont get_bitmapFont() { }

	// RVA: 0x215DEC4 Offset: 0x215DEC4 VA: 0x215DEC4
	public void set_bitmapFont(UIFont value) { }

	// RVA: 0x215DF78 Offset: 0x215DF78 VA: 0x215DF78
	public Font get_trueTypeFont() { }

	// RVA: 0x215E060 Offset: 0x215E060 VA: 0x215E060
	public void set_trueTypeFont(Font value) { }

	// RVA: 0x215E49C Offset: 0x215E49C VA: 0x215E49C
	public Object get_ambigiousFont() { }

	// RVA: 0x215E52C Offset: 0x215E52C VA: 0x215E52C
	public void set_ambigiousFont(Object value) { }

	// RVA: 0x2152E08 Offset: 0x2152E08 VA: 0x2152E08
	public string get_text() { }

	// RVA: 0x2150B4C Offset: 0x2150B4C VA: 0x2150B4C
	public void set_text(string value) { }

	// RVA: 0x215E62C Offset: 0x215E62C VA: 0x215E62C
	public int get_defaultFontSize() { }

	// RVA: 0x2152988 Offset: 0x2152988 VA: 0x2152988
	public int get_fontSize() { }

	// RVA: 0x215E71C Offset: 0x215E71C VA: 0x215E71C
	public void set_fontSize(int value) { }

	// RVA: 0x215E7CC Offset: 0x215E7CC VA: 0x215E7CC
	public FontStyle get_fontStyle() { }

	// RVA: 0x215E7D4 Offset: 0x215E7D4 VA: 0x215E7D4
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x215281C Offset: 0x215281C VA: 0x215281C
	public NGUIText.Alignment get_alignment() { }

	// RVA: 0x2158EB4 Offset: 0x2158EB4 VA: 0x2158EB4
	public void set_alignment(NGUIText.Alignment value) { }

	// RVA: 0x215E7F8 Offset: 0x215E7F8 VA: 0x215E7F8
	public bool get_applyGradient() { }

	// RVA: 0x215E800 Offset: 0x215E800 VA: 0x215E800
	public void set_applyGradient(bool value) { }

	// RVA: 0x215E830 Offset: 0x215E830 VA: 0x215E830
	public Color get_gradientTop() { }

	// RVA: 0x215E844 Offset: 0x215E844 VA: 0x215E844
	public void set_gradientTop(Color value) { }

	// RVA: 0x215E8EC Offset: 0x215E8EC VA: 0x215E8EC
	public Color get_gradientBottom() { }

	// RVA: 0x215E900 Offset: 0x215E900 VA: 0x215E900
	public void set_gradientBottom(Color value) { }

	// RVA: 0x2152814 Offset: 0x2152814 VA: 0x2152814
	public int get_spacingX() { }

	// RVA: 0x215E9A8 Offset: 0x215E9A8 VA: 0x215E9A8
	public void set_spacingX(int value) { }

	// RVA: 0x215E9CC Offset: 0x215E9CC VA: 0x215E9CC
	public int get_spacingY() { }

	// RVA: 0x215E9D4 Offset: 0x215E9D4 VA: 0x215E9D4
	public void set_spacingY(int value) { }

	// RVA: 0x215E9F8 Offset: 0x215E9F8 VA: 0x215E9F8
	public bool get_useFloatSpacing() { }

	// RVA: 0x215EA00 Offset: 0x215EA00 VA: 0x215EA00
	public void set_useFloatSpacing(bool value) { }

	// RVA: 0x215EA2C Offset: 0x215EA2C VA: 0x215EA2C
	public float get_floatSpacingX() { }

	// RVA: 0x215EA34 Offset: 0x215EA34 VA: 0x215EA34
	public void set_floatSpacingX(float value) { }

	// RVA: 0x215EADC Offset: 0x215EADC VA: 0x215EADC
	public float get_floatSpacingY() { }

	// RVA: 0x215EAE4 Offset: 0x215EAE4 VA: 0x215EAE4
	public void set_floatSpacingY(float value) { }

	// RVA: 0x215EB8C Offset: 0x215EB8C VA: 0x215EB8C
	public float get_effectiveSpacingY() { }

	// RVA: 0x215EBA8 Offset: 0x215EBA8 VA: 0x215EBA8
	public float get_effectiveSpacingX() { }

	// RVA: 0x215EBC4 Offset: 0x215EBC4 VA: 0x215EBC4
	private bool get_keepCrisp() { }

	// RVA: 0x215EC5C Offset: 0x215EC5C VA: 0x215EC5C
	public bool get_supportEncoding() { }

	// RVA: 0x2158E88 Offset: 0x2158E88 VA: 0x2158E88
	public void set_supportEncoding(bool value) { }

	// RVA: 0x215EC64 Offset: 0x215EC64 VA: 0x215EC64
	public NGUIText.SymbolStyle get_symbolStyle() { }

	// RVA: 0x215EC6C Offset: 0x215EC6C VA: 0x215EC6C
	public void set_symbolStyle(NGUIText.SymbolStyle value) { }

	// RVA: 0x215A218 Offset: 0x215A218 VA: 0x215A218
	public UILabel.Overflow get_overflowMethod() { }

	// RVA: 0x215EC8C Offset: 0x215EC8C VA: 0x215EC8C
	public void set_overflowMethod(UILabel.Overflow value) { }

	// RVA: 0x215ECAC Offset: 0x215ECAC VA: 0x215ECAC
	public int get_lineWidth() { }

	// RVA: 0x215ECB4 Offset: 0x215ECB4 VA: 0x215ECB4
	public void set_lineWidth(int value) { }

	// RVA: 0x215ECBC Offset: 0x215ECBC VA: 0x215ECBC
	public int get_lineHeight() { }

	// RVA: 0x215ECC4 Offset: 0x215ECC4 VA: 0x215ECC4
	public void set_lineHeight(int value) { }

	// RVA: 0x2157690 Offset: 0x2157690 VA: 0x2157690
	public bool get_multiLine() { }

	// RVA: 0x215ECCC Offset: 0x215ECCC VA: 0x215ECCC
	public void set_multiLine(bool value) { }

	// RVA: 0x215ECFC Offset: 0x215ECFC VA: 0x215ECFC Slot: 10
	public override Vector3[] get_localCorners() { }

	// RVA: 0x215ED44 Offset: 0x215ED44 VA: 0x215ED44 Slot: 11
	public override Vector3[] get_worldCorners() { }

	// RVA: 0x215ED80 Offset: 0x215ED80 VA: 0x215ED80 Slot: 23
	public override Vector4 get_drawingDimensions() { }

	// RVA: 0x215B010 Offset: 0x215B010 VA: 0x215B010
	public int get_maxLineCount() { }

	// RVA: 0x215EDBC Offset: 0x215EDBC VA: 0x215EDBC
	public void set_maxLineCount(int value) { }

	// RVA: 0x215EE7C Offset: 0x215EE7C VA: 0x215EE7C
	public UILabel.Effect get_effectStyle() { }

	// RVA: 0x215EE84 Offset: 0x215EE84 VA: 0x215EE84
	public void set_effectStyle(UILabel.Effect value) { }

	// RVA: 0x215EEA4 Offset: 0x215EEA4 VA: 0x215EEA4
	public Color get_effectColor() { }

	// RVA: 0x215EEB8 Offset: 0x215EEB8 VA: 0x215EEB8
	public void set_effectColor(Color value) { }
