
	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan Renewal(ILease lease);
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 546
{
	// Fields
	private DateTime _leaseExpireTime; // 0x18
	private LeaseState _currentState; // 0x28
	private TimeSpan _initialLeaseTime; // 0x30
	private TimeSpan _renewOnCallTime; // 0x38
	private TimeSpan _sponsorshipTimeout; // 0x40
	private ArrayList _sponsors; // 0x48
	private Queue _renewingSponsors; // 0x50
	private Lease.RenewalDelegate _renewalDelegate; // 0x58

	// Properties
	public TimeSpan CurrentLeaseTime { get; }
	public LeaseState CurrentState { get; }
	public TimeSpan InitialLeaseTime { set; }
	public TimeSpan RenewOnCallTime { get; set; }
	public TimeSpan SponsorshipTimeout { set; }

	// Methods

	// RVA: 0x1FA3AC0 Offset: 0x1FA3AC0 VA: 0x1FA3AC0
	public void .ctor() { }

	// RVA: 0x1FA3CBC Offset: 0x1FA3CBC VA: 0x1FA3CBC Slot: 6
	public TimeSpan get_CurrentLeaseTime() { }

	// RVA: 0x1FA3D3C Offset: 0x1FA3D3C VA: 0x1FA3D3C Slot: 7
	public LeaseState get_CurrentState() { }

	// RVA: 0x1FA3D44 Offset: 0x1FA3D44 VA: 0x1FA3D44
	public void Activate() { }

	// RVA: 0x1FA3D50 Offset: 0x1FA3D50 VA: 0x1FA3D50 Slot: 8
	public void set_InitialLeaseTime(TimeSpan value) { }

	// RVA: 0x1FA3ECC Offset: 0x1FA3ECC VA: 0x1FA3ECC Slot: 9
	public TimeSpan get_RenewOnCallTime() { }

	// RVA: 0x1FA3ED4 Offset: 0x1FA3ED4 VA: 0x1FA3ED4 Slot: 10
	public void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: 0x1FA3FD8 Offset: 0x1FA3FD8 VA: 0x1FA3FD8 Slot: 11
	public void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: 0x1FA40DC Offset: 0x1FA40DC VA: 0x1FA40DC Slot: 12
	public TimeSpan Renew(TimeSpan renewalTime) { }

	// RVA: 0x1FA417C Offset: 0x1FA417C VA: 0x1FA417C Slot: 13
	public void Unregister(ISponsor obj) { }

	// RVA: 0x1FA42AC Offset: 0x1FA42AC VA: 0x1FA42AC
	internal void UpdateState() { }

	// RVA: 0x1FA43FC Offset: 0x1FA43FC VA: 0x1FA43FC
	private void CheckNextSponsor() { }

	// RVA: 0x1FA46D0 Offset: 0x1FA46D0 VA: 0x1FA46D0
	private void ProcessSponsorResponse(object state, bool timedOut) { }
}

// Namespace: 
private sealed class Lease.RenewalDelegate : MulticastDelegate // TypeDefIndex: 547
{
	// Methods

	// RVA: 0x1FA469C Offset: 0x1FA469C VA: 0x1FA469C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1FA4978 Offset: 0x1FA4978 VA: 0x1FA4978 Slot: 11
	public virtual TimeSpan Invoke(ILease lease) { }

	// RVA: 0x1FA46AC Offset: 0x1FA46AC VA: 0x1FA46AC Slot: 12
	public virtual IAsyncResult BeginInvoke(ILease lease, AsyncCallback callback, object object) { }

	// RVA: 0x1FA493C Offset: 0x1FA493C VA: 0x1FA493C Slot: 13
	public virtual TimeSpan EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 548
{
	// Fields
	private ArrayList _objects; // 0x10
	private Timer _timer; // 0x18

	// Methods

	// RVA: 0x1FA4D1C Offset: 0x1FA4D1C VA: 0x1FA4D1C
	public void .ctor() { }

	// RVA: 0x1FA4D84 Offset: 0x1FA4D84 VA: 0x1FA4D84
	public void SetPollTime(TimeSpan timeSpan) { }

	// RVA: 0x1FA4E50 Offset: 0x1FA4E50 VA: 0x1FA4E50
	public void TrackLifetime(ServerIdentity identity) { }

	// RVA: 0x1FA4F78 Offset: 0x1FA4F78 VA: 0x1FA4F78
	public void StartManager() { }

	// RVA: 0x1FA50C0 Offset: 0x1FA50C0 VA: 0x1FA50C0
	public void StopManager() { }

	// RVA: 0x1FA50F4 Offset: 0x1FA50F4 VA: 0x1FA50F4
	public void ManageLeases(object state) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 549
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Methods

	// RVA: 0x1F9FF5C Offset: 0x1F9FF5C VA: 0x1F9FF5C
	public void .ctor(IMessageSink nextSink) { }

	// RVA: 0x1FA53CC Offset: 0x1FA53CC VA: 0x1FA53CC Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1FA5788 Offset: 0x1FA5788 VA: 0x1FA5788 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1FA5498 Offset: 0x1FA5498 VA: 0x1FA5498
	private void RenewLease(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0xBC8894 Offset: 0xBC8894 VA: 0xBC8894
[Serializable]
public enum LeaseState // TypeDefIndex: 550
{
	// Fields
	public int value__; // 0x0
	public const LeaseState Null = 0;
	public const LeaseState Initial = 1;
	public const LeaseState Active = 2;
	public const LeaseState Renewing = 3;
	public const LeaseState Expired = 4;
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0xBC88A8 Offset: 0xBC88A8 VA: 0xBC88A8
public sealed class LifetimeServices // TypeDefIndex: 551
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x0
	private static TimeSpan _leaseTime; // 0x8
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Properties
	public static TimeSpan LeaseManagerPollTime { get; set; }
	public static TimeSpan LeaseTime { get; set; }
	public static TimeSpan RenewOnCallTime { get; set; }
	public static TimeSpan SponsorshipTimeout { get; set; }

	// Methods

	// RVA: 0x1FA5860 Offset: 0x1FA5860 VA: 0x1FA5860
	private static void .cctor() { }

	// RVA: 0x1FA5058 Offset: 0x1FA5058 VA: 0x1FA5058
	public static TimeSpan get_LeaseManagerPollTime() { }

	// RVA: 0x1F9D858 Offset: 0x1F9D858 VA: 0x1F9D858
	public static void set_LeaseManagerPollTime(TimeSpan value) { }

	// RVA: 0x1FA3B84 Offset: 0x1FA3B84 VA: 0x1FA3B84
	public static TimeSpan get_LeaseTime() { }

	// RVA: 0x1F9D714 Offset: 0x1F9D714 VA: 0x1F9D714
	public static void set_LeaseTime(TimeSpan value) { }

	// RVA: 0x1FA3BEC Offset: 0x1FA3BEC VA: 0x1FA3BEC
	public static TimeSpan get_RenewOnCallTime() { }

	// RVA: 0x1F9D7EC Offset: 0x1F9D7EC VA: 0x1F9D7EC
	public static void set_RenewOnCallTime(TimeSpan value) { }

	// RVA: 0x1FA3C54 Offset: 0x1FA3C54 VA: 0x1FA3C54
	public static TimeSpan get_SponsorshipTimeout() { }

	// RVA: 0x1F9D780 Offset: 0x1F9D780 VA: 0x1F9D780
	public static void set_SponsorshipTimeout(TimeSpan value) { }

	// RVA: 0x1FA5954 Offset: 0x1FA5954 VA: 0x1FA5954
	internal static void TrackLifetime(ServerIdentity identity) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType // TypeDefIndex: 552
{
	// Fields
	public byte value__; // 0x0
	public const ArgInfoType In = 0;
	public const ArgInfoType Out = 1;
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 553
{
	// Fields
	private int[] _paramMap; // 0x10
	private int _inoutArgCount; // 0x18
	private MethodBase _method; // 0x20

	// Methods

	// RVA: 0x1FA59D4 Offset: 0x1FA59D4 VA: 0x1FA59D4
	public void .ctor(MethodBase method, ArgInfoType type) { }

	// RVA: 0x1FA5C3C Offset: 0x1FA5C3C VA: 0x1FA5C3C
	public int GetInOutArgCount() { }

	// RVA: 0x1FA5C44 Offset: 0x1FA5C44 VA: 0x1FA5C44
	public object[] GetInOutArgs(object[] args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC88BC Offset: 0xBC88BC VA: 0xBC88BC
public class AsyncResult : IAsyncResult, IMessageSink // TypeDefIndex: 554
{
	// Fields
	private object async_state; // 0x10
	private WaitHandle handle; // 0x18
	private object async_delegate; // 0x20
	private IntPtr data; // 0x28
	private object object_data; // 0x30
	private bool sync_completed; // 0x38
	private bool completed; // 0x39
	private bool endinvoke_called; // 0x3A
	private object async_callback; // 0x40
	private ExecutionContext current; // 0x48
	private ExecutionContext original; // 0x50
	private int gchandle; // 0x58
	private MonoMethodMessage call_message; // 0x60
	private IMessageCtrl message_ctrl; // 0x68
	private IMessage reply_message; // 0x70

	// Properties
	public virtual object AsyncState { get; }
	public virtual WaitHandle AsyncWaitHandle { get; }
	public virtual bool CompletedSynchronously { get; }
	public virtual bool IsCompleted { get; }
	public bool EndInvokeCalled { get; set; }
	public virtual object AsyncDelegate { get; }
	public IMessageSink NextSink { get; }
	internal MonoMethodMessage CallMessage { get; set; }

	// Methods

	// RVA: 0x1FA5D9C Offset: 0x1FA5D9C VA: 0x1FA5D9C
	internal void .ctor() { }

	// RVA: 0x1FA5DA4 Offset: 0x1FA5DA4 VA: 0x1FA5DA4 Slot: 10
	public virtual object get_AsyncState() { }

	// RVA: 0x1FA5DAC Offset: 0x1FA5DAC VA: 0x1FA5DAC Slot: 11
	public virtual WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x1FA5E8C Offset: 0x1FA5E8C VA: 0x1FA5E8C Slot: 12
	public virtual bool get_CompletedSynchronously() { }

	// RVA: 0x1FA5E94 Offset: 0x1FA5E94 VA: 0x1FA5E94 Slot: 13
	public virtual bool get_IsCompleted() { }

	// RVA: 0x1FA5E9C Offset: 0x1FA5E9C VA: 0x1FA5E9C
	public bool get_EndInvokeCalled() { }

	// RVA: 0x1FA5EA4 Offset: 0x1FA5EA4 VA: 0x1FA5EA4
	public void set_EndInvokeCalled(bool value) { }

	// RVA: 0x1FA5EB0 Offset: 0x1FA5EB0 VA: 0x1FA5EB0 Slot: 14
	public virtual object get_AsyncDelegate() { }

	// RVA: 0x1FA5EB8 Offset: 0x1FA5EB8 VA: 0x1FA5EB8 Slot: 15
	public IMessageSink get_NextSink() { }

	// RVA: 0x1FA5EC0 Offset: 0x1FA5EC0 VA: 0x1FA5EC0 Slot: 16
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1FA5F28 Offset: 0x1FA5F28 VA: 0x1FA5F28 Slot: 17
	public virtual IMessage GetReplyMessage() { }

	// RVA: 0x1FA5F30 Offset: 0x1FA5F30 VA: 0x1FA5F30 Slot: 18
	public virtual void SetMessageCtrl(IMessageCtrl mc) { }

	// RVA: 0x1FA5F38 Offset: 0x1FA5F38 VA: 0x1FA5F38
	internal void SetCompletedSynchronously(bool completed) { }

	// RVA: 0x1FA5F44 Offset: 0x1FA5F44 VA: 0x1FA5F44
	internal IMessage EndInvoke() { }

	// RVA: 0x1FA5FC4 Offset: 0x1FA5FC4 VA: 0x1FA5FC4 Slot: 19
	public virtual IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1FA61F0 Offset: 0x1FA61F0 VA: 0x1FA61F0
	internal MonoMethodMessage get_CallMessage() { }

	// RVA: 0x1FA61F8 Offset: 0x1FA61F8 VA: 0x1FA61F8
	internal void set_CallMessage(MonoMethodMessage value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder // TypeDefIndex: 555
{
	// Fields
	public int index; // 0x10

	// Methods

	// RVA: 0x1FA6200 Offset: 0x1FA6200 VA: 0x1FA6200
	public void .ctor(int i) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef // TypeDefIndex: 556
{
	// Fields
	private ObjRef objref; // 0x10
	public int SourceDomain; // 0x18

	// Properties
	public string TypeName { get; }
	public string URI { get; }

	// Methods

	// RVA: 0x1EB6938 Offset: 0x1EB6938 VA: 0x1EB6938
	public void .ctor(ObjRef o, int sourceDomain) { }

	// RVA: 0x1EB6974 Offset: 0x1EB6974 VA: 0x1EB6974
	public string get_TypeName() { }

	// RVA: 0x1EB6A44 Offset: 0x1EB6A44 VA: 0x1EB6A44
	public string get_URI() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase // TypeDefIndex: 557
{
	// Fields
	protected object[] _args; // 0x10
	protected byte[] _serializedArgs; // 0x18
	protected int _propertyCount; // 0x20
	protected CADArgHolder _callContext; // 0x28

	// Methods

	// RVA: 0x1FA622C Offset: 0x1FA622C VA: 0x1FA622C
	public void .ctor() { }

	// RVA: 0x1FA6234 Offset: 0x1FA6234 VA: 0x1FA6234
	internal static int MarshalProperties(IDictionary dict, ref ArrayList args) { }

	// RVA: 0x1FA68C8 Offset: 0x1FA68C8 VA: 0x1FA68C8
	internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args) { }

	// RVA: 0x1FA6A28 Offset: 0x1FA6A28 VA: 0x1FA6A28
	private static bool IsPossibleToIgnoreMarshal(object obj) { }

	// RVA: 0x1FA6CB0 Offset: 0x1FA6CB0 VA: 0x1FA6CB0
	protected object MarshalArgument(object arg, ref ArrayList args) { }

	// RVA: 0x1FA6E94 Offset: 0x1FA6E94 VA: 0x1FA6E94
	protected object UnmarshalArgument(object arg, ArrayList args) { }

	// RVA: 0x1FA74F4 Offset: 0x1FA74F4 VA: 0x1FA74F4
	internal object[] MarshalArguments(object[] arguments, ref ArrayList args) { }

	// RVA: 0x1FA763C Offset: 0x1FA763C VA: 0x1FA763C
	internal object[] UnmarshalArguments(object[] arguments, ArrayList args) { }

	// RVA: 0x1FA7784 Offset: 0x1FA7784 VA: 0x1FA7784
	protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList) { }

	// RVA: 0x1FA7A04 Offset: 0x1FA7A04 VA: 0x1FA7A04
	internal LogicalCallContext GetLogicalCallContext(ArrayList args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 558
{
	// Fields
	private string _uri; // 0x30
	internal RuntimeMethodHandle MethodHandle; // 0x38
	internal string FullTypeName; // 0x40

	// Properties
	internal string Uri { get; }
	internal int PropertiesCount { get; }

	// Methods

	// RVA: 0x1FA7AE4 Offset: 0x1FA7AE4 VA: 0x1FA7AE4
	internal void .ctor(IMethodCallMessage callMsg) { }

	// RVA: 0x1FA7E5C Offset: 0x1FA7E5C VA: 0x1FA7E5C
	internal string get_Uri() { }

	// RVA: 0x1F9913C Offset: 0x1F9913C VA: 0x1F9913C
	internal static CADMethodCallMessage Create(IMessage callMsg) { }

	// RVA: 0x1FA7E64 Offset: 0x1FA7E64 VA: 0x1FA7E64
	internal ArrayList GetArguments() { }

	// RVA: 0x1FA7F8C Offset: 0x1FA7F8C VA: 0x1FA7F8C
	internal object[] GetArgs(ArrayList args) { }

	// RVA: 0x1FA7FA0 Offset: 0x1FA7FA0 VA: 0x1FA7FA0
	internal int get_PropertiesCount() { }

	// RVA: 0x1FA7FA8 Offset: 0x1FA7FA8 VA: 0x1FA7FA8
	private static Type[] GetSignature(MethodBase methodBase, bool load) { }

	// RVA: 0x1FA819C Offset: 0x1FA819C VA: 0x1FA819C
	internal MethodBase GetMethod() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 559
{
	// Fields
	private object _returnValue; // 0x30
	private CADArgHolder _exception; // 0x38

	// Properties
	internal int PropertiesCount { get; }

	// Methods

	// RVA: 0x1EB6278 Offset: 0x1EB6278 VA: 0x1EB6278
	internal void .ctor(IMethodReturnMessage retMsg) { }

	// RVA: 0x1EB6654 Offset: 0x1EB6654 VA: 0x1EB6654
	internal static CADMethodReturnMessage Create(IMessage callMsg) { }

	// RVA: 0x1EB66D8 Offset: 0x1EB66D8 VA: 0x1EB66D8
	internal ArrayList GetArguments() { }

	// RVA: 0x1EB6804 Offset: 0x1EB6804 VA: 0x1EB6804
	internal object[] GetArgs(ArrayList args) { }

	// RVA: 0x1EB681C Offset: 0x1EB681C VA: 0x1EB681C
	internal object GetReturnValue(ArrayList args) { }

	// RVA: 0x1EB6834 Offset: 0x1EB6834 VA: 0x1EB6834
	internal Exception GetException(ArrayList args) { }

	// RVA: 0x1EB6930 Offset: 0x1EB6930 VA: 0x1EB6930
	internal int get_PropertiesCount() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC88D0 Offset: 0xBC88D0 VA: 0xBC88D0
[Serializable]
public sealed class CallContext // TypeDefIndex: 560
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0xBCB5F0 Offset: 0xBCB5F0 VA: 0xBCB5F0
	private static Hashtable datastore; // 0x80000000

	// Methods

	// RVA: 0x1EB6A78 Offset: 0x1EB6A78 VA: 0x1EB6A78
	private void .ctor() { }

	// RVA: 0x1EB6A80 Offset: 0x1EB6A80 VA: 0x1EB6A80
	internal static LogicalCallContext CreateLogicalCallContext(bool createEmpty) { }

	// RVA: 0x1EB6F90 Offset: 0x1EB6F90 VA: 0x1EB6F90
	internal static object SetCurrentCallContext(LogicalCallContext ctx) { }

	// RVA: 0x1EB7124 Offset: 0x1EB7124 VA: 0x1EB7124
	internal static void RestoreCallContext(object oldContext) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC88E4 Offset: 0xBC88E4 VA: 0xBC88E4
public interface ILogicalThreadAffinative // TypeDefIndex: 561
{}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 562
{
	// Fields
	private Context _context; // 0x10

	// Methods

	// RVA: 0x1EB744C Offset: 0x1EB744C VA: 0x1EB744C
	public void .ctor(Context ctx) { }

	// RVA: 0x1EB7478 Offset: 0x1EB7478 VA: 0x1EB7478 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1EB7B0C Offset: 0x1EB7B0C VA: 0x1EB7B0C Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 563
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private Context _context; // 0x18

	// Methods

	// RVA: 0x1EB7284 Offset: 0x1EB7284 VA: 0x1EB7284
	public void .ctor(Context ctx, IMessageSink replySink) { }

	// RVA: 0x1EB72BC Offset: 0x1EB72BC VA: 0x1EB72BC Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1EB73E4 Offset: 0x1EB73E4 VA: 0x1EB73E4 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC88F8 Offset: 0xBC88F8 VA: 0xBC88F8
[CLSCompliantAttribute] // RVA: 0xBC88F8 Offset: 0xBC88F8 VA: 0xBC88F8
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 564
{
	// Fields
	private IActivator _activator; // 0x68
	private object[] _activationAttributes; // 0x70
	private IList _contextProperties; // 0x78
	private Type _activationType; // 0x80
	private string _activationTypeName; // 0x88
	private bool _isContextOk; // 0x90
	private RemotingProxy _sourceProxy; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xBCB600 Offset: 0xBCB600 VA: 0xBCB600
	private static Dictionary<string, int> <>f__switch$map20; // 0x0

	// Properties
	internal bool IsContextOk { get; set; }
	public Type ActivationType { get; }
	public string ActivationTypeName { get; }
	public IActivator Activator { get; set; }
	public object[] CallSiteActivationAttributes { get; }
	public IList ContextProperties { get; }
	public override IDictionary Properties { get; }
	internal RemotingProxy SourceProxy { get; }

	// Methods

	// RVA: 0x1EB7DBC Offset: 0x1EB7DBC VA: 0x1EB7DBC
	internal void .ctor(Type type) { }

	// RVA: 0x1EB7E1C Offset: 0x1EB7E1C VA: 0x1EB7E1C
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1EB7F14 Offset: 0x1EB7F14 VA: 0x1EB7F14 Slot: 22
	internal override void InitDictionary() { }

	// RVA: 0x1EB806C Offset: 0x1EB806C VA: 0x1EB806C
	internal bool get_IsContextOk() { }

	// RVA: 0x1EB8074 Offset: 0x1EB8074 VA: 0x1EB8074
	internal void set_IsContextOk(bool value) { }

	// RVA: 0x1EB8080 Offset: 0x1EB8080 VA: 0x1EB8080 Slot: 25
	public Type get_ActivationType() { }

	// RVA: 0x1EB8118 Offset: 0x1EB8118 VA: 0x1EB8118 Slot: 26
	public string get_ActivationTypeName() { }

	// RVA: 0x1EB8120 Offset: 0x1EB8120 VA: 0x1EB8120 Slot: 27
	public IActivator get_Activator() { }

	// RVA: 0x1EB8128 Offset: 0x1EB8128 VA: 0x1EB8128 Slot: 28
	public void set_Activator(IActivator value) { }

	// RVA: 0x1EB8130 Offset: 0x1EB8130 VA: 0x1EB8130 Slot: 29
	public object[] get_CallSiteActivationAttributes() { }

	// RVA: 0x1EB8138 Offset: 0x1EB8138 VA: 0x1EB8138
	internal void SetActivationAttributes(object[] attributes) { }

	// RVA: 0x1EB8140 Offset: 0x1EB8140 VA: 0x1EB8140 Slot: 30
	public IList get_ContextProperties() { }

	// RVA: 0x1EB81AC Offset: 0x1EB81AC VA: 0x1EB81AC Slot: 19
	internal override void InitMethodProperty(string key, object value) { }

	// RVA: 0x1EB8C48 Offset: 0x1EB8C48 VA: 0x1EB8C48 Slot: 20
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1EB92B8 Offset: 0x1EB92B8 VA: 0x1EB92B8 Slot: 21
	public override IDictionary get_Properties() { }

	// RVA: 0x1EB9330 Offset: 0x1EB9330 VA: 0x1EB9330
	internal RemotingProxy get_SourceProxy() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MethodDictionary // TypeDefIndex: 565
{
	// Fields
	public static string[] InternalKeys; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBCB610 Offset: 0xBCB610 VA: 0xBCB610
	private static Dictionary<string, int> <>f__switch$map23; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBCB620 Offset: 0xBCB620 VA: 0xBCB620
	private static Dictionary<string, int> <>f__switch$map24; // 0x10

	// Methods

	// RVA: 0x1EB7FA4 Offset: 0x1EB7FA4 VA: 0x1EB7FA4
	public void .ctor(IConstructionCallMessage message) { }

	// RVA: 0x1EB936C Offset: 0x1EB936C VA: 0x1EB936C
	private static void .cctor() { }

	// RVA: 0x1EB9774 Offset: 0x1EB9774 VA: 0x1EB9774 Slot: 21
	protected override object GetMethodProperty(string key) { }

	// RVA: 0x1EBA7D4 Offset: 0x1EBA7D4 VA: 0x1EBA7D4 Slot: 22
	protected override void SetMethodProperty(string key, object value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0xBC8938 Offset: 0xBC8938 VA: 0xBC8938
[ComVisibleAttribute] // RVA: 0xBC8938 Offset: 0xBC8938 VA: 0xBC8938
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 566
{
	// Properties
	public override IDictionary Properties { get; }

	// Methods

	// RVA: 0x1EBB100 Offset: 0x1EBB100 VA: 0x1EBB100
	internal void .ctor(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg) { }

	// RVA: 0x1EBB1FC Offset: 0x1EBB1FC VA: 0x1EBB1FC
	internal void .ctor(Exception e, IMethodCallMessage msg) { }

	// RVA: 0x1EBB320 Offset: 0x1EBB320 VA: 0x1EBB320
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1EBB3F8 Offset: 0x1EBB3F8 VA: 0x1EBB3F8 Slot: 23
	public override IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 567
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0x0

	// Methods

	// RVA: 0x1EBB49C Offset: 0x1EBB49C VA: 0x1EBB49C
	public void .ctor() { }

	// RVA: 0x1EBB4A4 Offset: 0x1EBB4A4 VA: 0x1EBB4A4
	private static void .cctor() { }

	// RVA: 0x1EBB508 Offset: 0x1EBB508 VA: 0x1EBB508 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1EBB5FC Offset: 0x1EBB5FC VA: 0x1EBB5FC Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 568
{
	// Fields
	private string _uri; // 0x10

	// Properties
	public int ArgCount { get; }
	public object[] Args { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; }
	public LogicalCallContext LogicalCallContext { get; }

	// Methods

	// RVA: 0x1EBB704 Offset: 0x1EBB704 VA: 0x1EBB704
	public void .ctor() { }

	// RVA: 0x1EBB75C Offset: 0x1EBB75C VA: 0x1EBB75C Slot: 5
	public int get_ArgCount() { }

	// RVA: 0x1EBB764 Offset: 0x1EBB764 VA: 0x1EBB764 Slot: 6
	public object[] get_Args() { }

	// RVA: 0x1EBB76C Offset: 0x1EBB76C VA: 0x1EBB76C Slot: 8
	public MethodBase get_MethodBase() { }

	// RVA: 0x1EBB774 Offset: 0x1EBB774 VA: 0x1EBB774 Slot: 9
	public string get_MethodName() { }

	// RVA: 0x1EBB7BC Offset: 0x1EBB7BC VA: 0x1EBB7BC Slot: 10
	public object get_MethodSignature() { }

	// RVA: 0x1EBB7C4 Offset: 0x1EBB7C4 VA: 0x1EBB7C4 Slot: 14
	public virtual IDictionary get_Properties() { }

	// RVA: 0x1EBB7CC Offset: 0x1EBB7CC VA: 0x1EBB7CC Slot: 11
	public string get_TypeName() { }

	// RVA: 0x1EBB814 Offset: 0x1EBB814 VA: 0x1EBB814 Slot: 12
	public string get_Uri() { }

	// RVA: 0x1EBB81C Offset: 0x1EBB81C VA: 0x1EBB81C Slot: 13
	public object GetArg(int arg_num) { }

	// RVA: 0x1EBB824 Offset: 0x1EBB824 VA: 0x1EBB824 Slot: 7
	public LogicalCallContext get_LogicalCallContext() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC8978 Offset: 0xBC8978 VA: 0xBC8978
[Serializable]
public class Header // TypeDefIndex: 569
{
	// Fields
	public string HeaderNamespace; // 0x10
	public bool MustUnderstand; // 0x18
	public string Name; // 0x20
	public object Value; // 0x28

	// Methods

	// RVA: 0x1EBB82C Offset: 0x1EBB82C VA: 0x1EBB82C
	public void .ctor(string _Name, object _Value) { }

	// RVA: 0x1EBB870 Offset: 0x1EBB870 VA: 0x1EBB870
	public void .ctor(string _Name, object _Value, bool _MustUnderstand) { }

	// RVA: 0x1EBB8B8 Offset: 0x1EBB8B8 VA: 0x1EBB8B8
	public void .ctor(string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 570
{
	// Properties
	public abstract Identity TargetIdentity { get; set; }
	public abstract string Uri { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Identity get_TargetIdentity();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_TargetIdentity(Identity value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string get_Uri();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Uri(string value);
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC898C Offset: 0xBC898C VA: 0xBC898C
public interface IMessage // TypeDefIndex: 571
{
	// Properties
	public abstract IDictionary Properties { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDictionary get_Properties();
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC89A0 Offset: 0xBC89A0 VA: 0xBC89A0
public interface IMessageCtrl // TypeDefIndex: 572
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC89B4 Offset: 0xBC89B4 VA: 0xBC89B4
public interface IMessageSink // TypeDefIndex: 573
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessage SyncProcessMessage(IMessage msg);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC89C8 Offset: 0xBC89C8 VA: 0xBC89C8
public interface IMethodCallMessage : IMessage, IMethodMessage // TypeDefIndex: 574
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC89DC Offset: 0xBC89DC VA: 0xBC89DC
public interface IMethodMessage : IMessage // TypeDefIndex: 575
{
	// Properties
	public abstract int ArgCount { get; }
	public abstract object[] Args { get; }
	public abstract LogicalCallContext LogicalCallContext { get; }
	public abstract MethodBase MethodBase { get; }
	public abstract string MethodName { get; }
	public abstract object MethodSignature { get; }
	public abstract string TypeName { get; }
	public abstract string Uri { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_ArgCount();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object[] get_Args();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract LogicalCallContext get_LogicalCallContext();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract MethodBase get_MethodBase();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract string get_MethodName();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object get_MethodSignature();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract string get_TypeName();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Uri();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract object GetArg(int argNum);
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC89F0 Offset: 0xBC89F0 VA: 0xBC89F0
public interface IMethodReturnMessage : IMessage, IMethodMessage // TypeDefIndex: 576
{
	// Properties
	public abstract Exception Exception { get; }
	public abstract int OutArgCount { get; }
	public abstract object[] OutArgs { get; }
	public abstract object ReturnValue { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Exception get_Exception();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_OutArgCount();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object[] get_OutArgs();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object get_ReturnValue();
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC8A04 Offset: 0xBC8A04 VA: 0xBC8A04
public interface IRemotingFormatter : IFormatter // TypeDefIndex: 577
{}

// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject // TypeDefIndex: 578
{}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xBC8A18 Offset: 0xBC8A18 VA: 0xBC8A18
[Serializable]
public sealed class LogicalCallContext : ICloneable, ISerializable // TypeDefIndex: 579
{
	// Fields
	private Hashtable _data; // 0x10
	private CallContextRemotingData _remotingData; // 0x18

	// Properties
	public bool HasInfo { get; }
	internal Hashtable Datastore { get; }

	// Methods

	// RVA: 0x1EB6E8C Offset: 0x1EB6E8C VA: 0x1EB6E8C
	internal void .ctor() { }

	// RVA: 0x1EBBCF0 Offset: 0x1EBBCF0 VA: 0x1EBBCF0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1EB70EC Offset: 0x1EB70EC VA: 0x1EB70EC
	public bool get_HasInfo() { }

	// RVA: 0x1EBBEF0 Offset: 0x1EBBEF0 VA: 0x1EBBEF0 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1EB6EF4 Offset: 0x1EB6EF4 VA: 0x1EB6EF4
	public void SetData(string name, object data) { }

	// RVA: 0x1EBC228 Offset: 0x1EBC228 VA: 0x1EBC228 Slot: 4
	public object Clone() { }

	// RVA: 0x1EB711C Offset: 0x1EB711C VA: 0x1EB711C
	internal Hashtable get_Datastore() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 580
{
	// Fields
	private string _logicalCallID; // 0x10

	// Methods

	// RVA: 0x1EB7208 Offset: 0x1EB7208 VA: 0x1EB7208
	public void .ctor() { }

	// RVA: 0x1EB7210 Offset: 0x1EB7210 VA: 0x1EB7210 Slot: 4
	public object Clone() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[CLSCompliantAttribute] // RVA: 0xBC8A2C Offset: 0xBC8A2C VA: 0xBC8A2C
[ComVisibleAttribute] // RVA: 0xBC8A2C Offset: 0xBC8A2C VA: 0xBC8A2C
[Serializable]
public class MethodCall : ISerializable, IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, ISerializationRootObject // TypeDefIndex: 581
{
	// Fields
	private string _uri; // 0x10
	private string _typeName; // 0x18
	private string _methodName; // 0x20
	private object[] _args; // 0x28
	private Type[] _methodSignature; // 0x30
	private MethodBase _methodBase; // 0x38
	private LogicalCallContext _callContext; // 0x40
	private Identity _targetIdentity; // 0x48
	private Type[] _genericArguments; // 0x50
	protected IDictionary ExternalProperties; // 0x58
	protected IDictionary InternalProperties; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xBCB630 Offset: 0xBCB630 VA: 0xBCB630
	private static Dictionary<string, int> <>f__switch$map1F; // 0x0

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public int ArgCount { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	private Type[] GenericArguments { get; }

	// Methods

	// RVA: 0x1EBC5E8 Offset: 0x1EBC5E8 VA: 0x1EBC5E8
	public void .ctor(Header[] h1) { }

	// RVA: 0x1EB7E20 Offset: 0x1EB7E20 VA: 0x1EB7E20
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1EBD024 Offset: 0x1EBD024 VA: 0x1EBD024
	internal void .ctor(CADMethodCallMessage msg) { }

	// RVA: 0x1EB7E14 Offset: 0x1EB7E14 VA: 0x1EB7E14
	internal void .ctor() { }

	// RVA: 0x1EBD210 Offset: 0x1EBD210 VA: 0x1EBD210 Slot: 7
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }

	// RVA: 0x1EBD220 Offset: 0x1EBD220 VA: 0x1EBD220 Slot: 8
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }

	// RVA: 0x1EBD230 Offset: 0x1EBD230 VA: 0x1EBD230 Slot: 5
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
