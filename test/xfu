	private static void .cctor() { }
}

// Namespace: System.Net
[Serializable]
public class HttpWebRequest : WebRequest, ISerializable // TypeDefIndex: 1576
{
	// Fields
	private Uri requestUri; // 0x20
	private Uri actualUri; // 0x28
	private bool hostChanged; // 0x30
	private bool allowAutoRedirect; // 0x31
	private bool allowBuffering; // 0x32
	private X509CertificateCollection certificates; // 0x38
	private string connectionGroup; // 0x40
	private long contentLength; // 0x48
	private HttpContinueDelegate continueDelegate; // 0x50
	private CookieContainer cookieContainer; // 0x58
	private ICredentials credentials; // 0x60
	private bool haveResponse; // 0x68
	private bool haveRequest; // 0x69
	private bool requestSent; // 0x6A
	private WebHeaderCollection webHeaders; // 0x70
	private bool keepAlive; // 0x78
	private int maxAutoRedirect; // 0x7C
	private string mediaType; // 0x80
	private string method; // 0x88
	private string initialMethod; // 0x90
	private bool pipelined; // 0x98
	private bool preAuthenticate; // 0x99
	private bool usedPreAuth; // 0x9A
	private Version version; // 0xA0
	private Version actualVersion; // 0xA8
	private IWebProxy proxy; // 0xB0
	private bool sendChunked; // 0xB8
	private ServicePoint servicePoint; // 0xC0
	private int timeout; // 0xC8
	private WebConnectionStream writeStream; // 0xD0
	private HttpWebResponse webResponse; // 0xD8
	private WebAsyncResult asyncWrite; // 0xE0
	private WebAsyncResult asyncRead; // 0xE8
	private EventHandler abortHandler; // 0xF0
	private int aborted; // 0xF8
	private bool gotRequestStream; // 0xFC
	private int redirects; // 0x100
	private bool expectContinue; // 0x104
	private bool authCompleted; // 0x105
	private byte[] bodyBuffer; // 0x108
	private int bodyBufferLength; // 0x110
	private bool getResponseCalled; // 0x114
	private Exception saved_exc; // 0x118
	private object locker; // 0x120
	private bool is_ntlm_auth; // 0x128
	private bool finished_reading; // 0x129
	internal WebConnection WebConnection; // 0x130
	private DecompressionMethods auto_decomp; // 0x138
	private int maxResponseHeadersLength; // 0x13C
	private static int defaultMaxResponseHeadersLength; // 0x0
	private int readWriteTimeout; // 0x140
	private bool unsafe_auth_blah; // 0x144

	// Properties
	internal bool UsesNtlmAuthentication { get; }
	public string Accept { get; set; }
	public Uri Address { get; }
	public bool AllowAutoRedirect { get; set; }
	public bool AllowWriteStreamBuffering { get; set; }
	public DecompressionMethods AutomaticDecompression { get; set; }
	internal bool InternalAllowBuffering { get; }
	public X509CertificateCollection ClientCertificates { get; set; }
	public string Connection { get; set; }
	public override string ConnectionGroupName { get; set; }
	public override long ContentLength { get; set; }
	internal long InternalContentLength { set; }
	public override string ContentType { get; set; }
	public HttpContinueDelegate ContinueDelegate { get; set; }
	public CookieContainer CookieContainer { get; set; }
	public override ICredentials Credentials { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD37D4 Offset: 0xBD37D4 VA: 0xBD37D4
	public static RequestCachePolicy DefaultCachePolicy { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD37E4 Offset: 0xBD37E4 VA: 0xBD37E4
	public static int DefaultMaximumErrorResponseLength { get; set; }
	public string Expect { get; set; }
	public bool HaveResponse { get; }
	public override WebHeaderCollection Headers { get; set; }
	public DateTime IfModifiedSince { get; set; }
	public bool KeepAlive { get; set; }
	public int MaximumAutomaticRedirections { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD37F4 Offset: 0xBD37F4 VA: 0xBD37F4
	public int MaximumResponseHeadersLength { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD382C Offset: 0xBD382C VA: 0xBD382C
	public static int DefaultMaximumResponseHeadersLength { get; set; }
	public int ReadWriteTimeout { get; set; }
	public string MediaType { get; set; }
	public override string Method { get; set; }
	public bool Pipelined { get; set; }
	public override bool PreAuthenticate { get; set; }
	public Version ProtocolVersion { get; set; }
	public override IWebProxy Proxy { get; set; }
	public string Referer { get; set; }
	public override Uri RequestUri { get; }
	public bool SendChunked { get; set; }
	public ServicePoint ServicePoint { get; }
	public override int Timeout { get; set; }
	public string TransferEncoding { get; set; }
	public override bool UseDefaultCredentials { get; set; }
	public string UserAgent { get; set; }
	public bool UnsafeAuthenticatedConnectionSharing { get; set; }
	internal bool GotRequestStream { get; }
	internal bool ExpectContinue { get; set; }
	internal Uri AuthUri { get; }
	internal bool ProxyQuery { get; }
	internal bool FinishedReading { get; set; }
	internal bool Aborted { get; }

	// Methods

	// RVA: 0x1FE3D08 Offset: 0x1FE3D08 VA: 0x1FE3D08
	public void .ctor(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0xBD1F60 Offset: 0xBD1F60 VA: 0xBD1F60
	// RVA: 0x1FE4608 Offset: 0x1FE4608 VA: 0x1FE4608
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FE4EF8 Offset: 0x1FE4EF8 VA: 0x1FE4EF8
	private static void .cctor() { }

	// RVA: 0x1FE4F4C Offset: 0x1FE4F4C VA: 0x1FE4F4C Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FE4F5C Offset: 0x1FE4F5C VA: 0x1FE4F5C
	internal bool get_UsesNtlmAuthentication() { }

	// RVA: 0x1FE4F64 Offset: 0x1FE4F64 VA: 0x1FE4F64
	public string get_Accept() { }

	// RVA: 0x1FE4FC8 Offset: 0x1FE4FC8 VA: 0x1FE4FC8
	public void set_Accept(string value) { }

	// RVA: 0x1FE50D0 Offset: 0x1FE50D0 VA: 0x1FE50D0
	public Uri get_Address() { }

	// RVA: 0x1FE50D8 Offset: 0x1FE50D8 VA: 0x1FE50D8
	public bool get_AllowAutoRedirect() { }

	// RVA: 0x1FE50E0 Offset: 0x1FE50E0 VA: 0x1FE50E0
	public void set_AllowAutoRedirect(bool value) { }

	// RVA: 0x1FE50EC Offset: 0x1FE50EC VA: 0x1FE50EC
	public bool get_AllowWriteStreamBuffering() { }

	// RVA: 0x1FE50F4 Offset: 0x1FE50F4 VA: 0x1FE50F4
	public void set_AllowWriteStreamBuffering(bool value) { }

	// RVA: 0x1FE5100 Offset: 0x1FE5100 VA: 0x1FE5100
	private static Exception GetMustImplement() { }

	// RVA: 0x1FE515C Offset: 0x1FE515C VA: 0x1FE515C
	public DecompressionMethods get_AutomaticDecompression() { }

	// RVA: 0x1FE5164 Offset: 0x1FE5164 VA: 0x1FE5164
	public void set_AutomaticDecompression(DecompressionMethods value) { }

	// RVA: 0x1FE518C Offset: 0x1FE518C VA: 0x1FE518C
	internal bool get_InternalAllowBuffering() { }

	// RVA: 0x1FE5340 Offset: 0x1FE5340 VA: 0x1FE5340
	public X509CertificateCollection get_ClientCertificates() { }

	[MonoTODOAttribute] // RVA: 0xBD1F9C Offset: 0xBD1F9C VA: 0xBD1F9C
	// RVA: 0x1FE53AC Offset: 0x1FE53AC VA: 0x1FE53AC
	public void set_ClientCertificates(X509CertificateCollection value) { }

	// RVA: 0x1FE5418 Offset: 0x1FE5418 VA: 0x1FE5418
	public string get_Connection() { }

	// RVA: 0x1FE547C Offset: 0x1FE547C VA: 0x1FE547C
	public void set_Connection(string value) { }

	// RVA: 0x1FE5680 Offset: 0x1FE5680 VA: 0x1FE5680 Slot: 9
	public override string get_ConnectionGroupName() { }

	// RVA: 0x1FE5688 Offset: 0x1FE5688 VA: 0x1FE5688 Slot: 10
	public override void set_ConnectionGroupName(string value) { }

	// RVA: 0x1FE5690 Offset: 0x1FE5690 VA: 0x1FE5690 Slot: 11
	public override long get_ContentLength() { }

	// RVA: 0x1FE5698 Offset: 0x1FE5698 VA: 0x1FE5698 Slot: 12
	public override void set_ContentLength(long value) { }

	// RVA: 0x1FE5744 Offset: 0x1FE5744 VA: 0x1FE5744
	internal void set_InternalContentLength(long value) { }

	// RVA: 0x1FE574C Offset: 0x1FE574C VA: 0x1FE574C Slot: 13
	public override string get_ContentType() { }

	// RVA: 0x1FE57B0 Offset: 0x1FE57B0 VA: 0x1FE57B0 Slot: 14
	public override void set_ContentType(string value) { }

	// RVA: 0x1FE5884 Offset: 0x1FE5884 VA: 0x1FE5884
	public HttpContinueDelegate get_ContinueDelegate() { }

	// RVA: 0x1FE588C Offset: 0x1FE588C VA: 0x1FE588C
	public void set_ContinueDelegate(HttpContinueDelegate value) { }

	// RVA: 0x1FE5894 Offset: 0x1FE5894 VA: 0x1FE5894
	public CookieContainer get_CookieContainer() { }

	// RVA: 0x1FE589C Offset: 0x1FE589C VA: 0x1FE589C
	public void set_CookieContainer(CookieContainer value) { }

	// RVA: 0x1FE58A4 Offset: 0x1FE58A4 VA: 0x1FE58A4 Slot: 15
	public override ICredentials get_Credentials() { }

	// RVA: 0x1FE58AC Offset: 0x1FE58AC VA: 0x1FE58AC Slot: 16
	public override void set_Credentials(ICredentials value) { }

	// RVA: 0x1FE58B4 Offset: 0x1FE58B4 VA: 0x1FE58B4
	public static RequestCachePolicy get_DefaultCachePolicy() { }

	// RVA: 0x1FE5920 Offset: 0x1FE5920 VA: 0x1FE5920
	public static void set_DefaultCachePolicy(RequestCachePolicy value) { }

	// RVA: 0x1FE598C Offset: 0x1FE598C VA: 0x1FE598C
	public static int get_DefaultMaximumErrorResponseLength() { }

	// RVA: 0x1FE59F8 Offset: 0x1FE59F8 VA: 0x1FE59F8
	public static void set_DefaultMaximumErrorResponseLength(int value) { }

	// RVA: 0x1FE5A64 Offset: 0x1FE5A64 VA: 0x1FE5A64
	public string get_Expect() { }

	// RVA: 0x1FE5AC8 Offset: 0x1FE5AC8 VA: 0x1FE5AC8
	public void set_Expect(string value) { }

	// RVA: 0x1FE5C44 Offset: 0x1FE5C44 VA: 0x1FE5C44
	public bool get_HaveResponse() { }

	// RVA: 0x1FE5C4C Offset: 0x1FE5C4C VA: 0x1FE5C4C Slot: 17
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0x1FE5C54 Offset: 0x1FE5C54 VA: 0x1FE5C54 Slot: 18
	public override void set_Headers(WebHeaderCollection value) { }

	// RVA: 0x1FE5D78 Offset: 0x1FE5D78 VA: 0x1FE5D78
	public DateTime get_IfModifiedSince() { }

	// RVA: 0x1FE5FA8 Offset: 0x1FE5FA8 VA: 0x1FE5FA8
	public void set_IfModifiedSince(DateTime value) { }

	// RVA: 0x1FE605C Offset: 0x1FE605C VA: 0x1FE605C
	public bool get_KeepAlive() { }

	// RVA: 0x1FE6064 Offset: 0x1FE6064 VA: 0x1FE6064
	public void set_KeepAlive(bool value) { }

	// RVA: 0x1FE6070 Offset: 0x1FE6070 VA: 0x1FE6070
	public int get_MaximumAutomaticRedirections() { }

	// RVA: 0x1FE6078 Offset: 0x1FE6078 VA: 0x1FE6078
	public void set_MaximumAutomaticRedirections(int value) { }

	// RVA: 0x1FE6120 Offset: 0x1FE6120 VA: 0x1FE6120
	public int get_MaximumResponseHeadersLength() { }

	// RVA: 0x1FE6128 Offset: 0x1FE6128 VA: 0x1FE6128
	public void set_MaximumResponseHeadersLength(int value) { }

	// RVA: 0x1FE6130 Offset: 0x1FE6130 VA: 0x1FE6130
	public static int get_DefaultMaximumResponseHeadersLength() { }

	// RVA: 0x1FE6198 Offset: 0x1FE6198 VA: 0x1FE6198
	public static void set_DefaultMaximumResponseHeadersLength(int value) { }

	// RVA: 0x1FE6204 Offset: 0x1FE6204 VA: 0x1FE6204
	public int get_ReadWriteTimeout() { }

	// RVA: 0x1FE620C Offset: 0x1FE620C VA: 0x1FE620C
	public void set_ReadWriteTimeout(int value) { }

	// RVA: 0x1FE62E8 Offset: 0x1FE62E8 VA: 0x1FE62E8
	public string get_MediaType() { }

	// RVA: 0x1FE62F0 Offset: 0x1FE62F0 VA: 0x1FE62F0
	public void set_MediaType(string value) { }

	// RVA: 0x1FE62F8 Offset: 0x1FE62F8 VA: 0x1FE62F8 Slot: 19
	public override string get_Method() { }

	// RVA: 0x1FE6300 Offset: 0x1FE6300 VA: 0x1FE6300 Slot: 20
	public override void set_Method(string value) { }

	// RVA: 0x1FE63E8 Offset: 0x1FE63E8 VA: 0x1FE63E8
	public bool get_Pipelined() { }

	// RVA: 0x1FE63F0 Offset: 0x1FE63F0 VA: 0x1FE63F0
	public void set_Pipelined(bool value) { }

	// RVA: 0x1FE63FC Offset: 0x1FE63FC VA: 0x1FE63FC Slot: 21
	public override bool get_PreAuthenticate() { }

	// RVA: 0x1FE6404 Offset: 0x1FE6404 VA: 0x1FE6404 Slot: 22
	public override void set_PreAuthenticate(bool value) { }

	// RVA: 0x1FE6410 Offset: 0x1FE6410 VA: 0x1FE6410
	public Version get_ProtocolVersion() { }

	// RVA: 0x1FE6418 Offset: 0x1FE6418 VA: 0x1FE6418
	public void set_ProtocolVersion(Version value) { }

	// RVA: 0x1FE651C Offset: 0x1FE651C VA: 0x1FE651C Slot: 23
	public override IWebProxy get_Proxy() { }

	// RVA: 0x1FE6524 Offset: 0x1FE6524 VA: 0x1FE6524 Slot: 24
	public override void set_Proxy(IWebProxy value) { }

	// RVA: 0x1FE6550 Offset: 0x1FE6550 VA: 0x1FE6550
	public string get_Referer() { }

	// RVA: 0x1FE65B4 Offset: 0x1FE65B4 VA: 0x1FE65B4
	public void set_Referer(string value) { }

	// RVA: 0x1FE6690 Offset: 0x1FE6690 VA: 0x1FE6690 Slot: 25
	public override Uri get_RequestUri() { }

	// RVA: 0x1FE6698 Offset: 0x1FE6698 VA: 0x1FE6698
	public bool get_SendChunked() { }

	// RVA: 0x1FE66A0 Offset: 0x1FE66A0 VA: 0x1FE66A0
	public void set_SendChunked(bool value) { }

	// RVA: 0x1FE66CC Offset: 0x1FE66CC VA: 0x1FE66CC
	public ServicePoint get_ServicePoint() { }

	// RVA: 0x1FE67C8 Offset: 0x1FE67C8 VA: 0x1FE67C8 Slot: 26
	public override int get_Timeout() { }

	// RVA: 0x1FE67D0 Offset: 0x1FE67D0 VA: 0x1FE67D0 Slot: 27
	public override void set_Timeout(int value) { }

	// RVA: 0x1FE686C Offset: 0x1FE686C VA: 0x1FE686C
	public string get_TransferEncoding() { }

	// RVA: 0x1FE68D0 Offset: 0x1FE68D0 VA: 0x1FE68D0
	public void set_TransferEncoding(string value) { }

	// RVA: 0x1FE6A80 Offset: 0x1FE6A80 VA: 0x1FE6A80 Slot: 28
	public override bool get_UseDefaultCredentials() { }

	// RVA: 0x1FE6B08 Offset: 0x1FE6B08 VA: 0x1FE6B08 Slot: 29
	public override void set_UseDefaultCredentials(bool value) { }

	// RVA: 0x1FE6BB0 Offset: 0x1FE6BB0 VA: 0x1FE6BB0
	public string get_UserAgent() { }

	// RVA: 0x1FE6C14 Offset: 0x1FE6C14 VA: 0x1FE6C14
	public void set_UserAgent(string value) { }

	// RVA: 0x1FE6C88 Offset: 0x1FE6C88 VA: 0x1FE6C88
	public bool get_UnsafeAuthenticatedConnectionSharing() { }

	// RVA: 0x1FE6C90 Offset: 0x1FE6C90 VA: 0x1FE6C90
	public void set_UnsafeAuthenticatedConnectionSharing(bool value) { }

	// RVA: 0x1FE6C9C Offset: 0x1FE6C9C VA: 0x1FE6C9C
	internal bool get_GotRequestStream() { }

	// RVA: 0x1FE6CA4 Offset: 0x1FE6CA4 VA: 0x1FE6CA4
	internal bool get_ExpectContinue() { }

	// RVA: 0x1FE6CAC Offset: 0x1FE6CAC VA: 0x1FE6CAC
	internal void set_ExpectContinue(bool value) { }

	// RVA: 0x1FE6CB8 Offset: 0x1FE6CB8 VA: 0x1FE6CB8
	internal Uri get_AuthUri() { }

	// RVA: 0x1FE6CC0 Offset: 0x1FE6CC0 VA: 0x1FE6CC0
	internal bool get_ProxyQuery() { }

	// RVA: 0x1FE66D0 Offset: 0x1FE66D0 VA: 0x1FE66D0
	internal ServicePoint GetServicePoint() { }

	// RVA: 0x1FE6D28 Offset: 0x1FE6D28 VA: 0x1FE6D28
	public void AddRange(int range) { }

	// RVA: 0x1FE7004 Offset: 0x1FE7004 VA: 0x1FE7004
	public void AddRange(int from, int to) { }

	// RVA: 0x1FE6D88 Offset: 0x1FE6D88 VA: 0x1FE6D88
	public void AddRange(string rangeSpecifier, int range) { }

	// RVA: 0x1FE706C Offset: 0x1FE706C VA: 0x1FE706C
	public void AddRange(string rangeSpecifier, int from, int to) { }

	// RVA: 0x1FE7470 Offset: 0x1FE7470 VA: 0x1FE7470 Slot: 31
	public override IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0x1FE7954 Offset: 0x1FE7954 VA: 0x1FE7954 Slot: 33
	public override Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0x1FE7A7C Offset: 0x1FE7A7C VA: 0x1FE7A7C Slot: 35
	public override Stream GetRequestStream() { }

	// RVA: 0x1FE7D10 Offset: 0x1FE7D10 VA: 0x1FE7D10
	private void CheckIfForceWrite() { }

	// RVA: 0x1FE7DA0 Offset: 0x1FE7DA0 VA: 0x1FE7DA0 Slot: 32
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0x1FE80D4 Offset: 0x1FE80D4 VA: 0x1FE80D4 Slot: 34
	public override WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0x1FE8260 Offset: 0x1FE8260 VA: 0x1FE8260 Slot: 36
	public override WebResponse GetResponse() { }

	// RVA: 0x1FE8360 Offset: 0x1FE8360 VA: 0x1FE8360
	internal bool get_FinishedReading() { }

	// RVA: 0x1FE8368 Offset: 0x1FE8368 VA: 0x1FE8368
	internal void set_FinishedReading(bool value) { }

	// RVA: 0x1FE7928 Offset: 0x1FE7928 VA: 0x1FE7928
	internal bool get_Aborted() { }

	// RVA: 0x1FE8374 Offset: 0x1FE8374 VA: 0x1FE8374 Slot: 30
	public override void Abort() { }

	// RVA: 0x1FE8794 Offset: 0x1FE8794 VA: 0x1FE8794 Slot: 37
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FE5044 Offset: 0x1FE5044 VA: 0x1FE5044
	private void CheckRequestStarted() { }

	// RVA: 0x1FE8C00 Offset: 0x1FE8C00 VA: 0x1FE8C00
	internal void DoContinueDelegate(int statusCode, WebHeaderCollection headers) { }

	// RVA: 0x1FE8C14 Offset: 0x1FE8C14 VA: 0x1FE8C14
	private bool Redirect(WebAsyncResult result, HttpStatusCode code) { }

	// RVA: 0x1FE90D4 Offset: 0x1FE90D4 VA: 0x1FE90D4
	private string GetHeaders() { }

	// RVA: 0x1FE95E0 Offset: 0x1FE95E0 VA: 0x1FE95E0
	private void DoPreAuthenticate() { }

	// RVA: 0x1FE9828 Offset: 0x1FE9828 VA: 0x1FE9828
	internal void SetWriteStreamError(WebExceptionStatus status, Exception exc) { }

	// RVA: 0x1FE99F8 Offset: 0x1FE99F8 VA: 0x1FE99F8
	internal void SendRequestHeaders(bool propagate_error) { }

	// RVA: 0x1FEA180 Offset: 0x1FEA180 VA: 0x1FEA180
	internal void SetWriteStream(WebConnectionStream stream) { }

	// RVA: 0x1FEA498 Offset: 0x1FEA498 VA: 0x1FEA498
	internal void SetResponseError(WebExceptionStatus status, Exception e, string where) { }

	// RVA: 0x1FEA6C4 Offset: 0x1FEA6C4 VA: 0x1FEA6C4
	private void CheckSendError(WebConnectionData data) { }

	// RVA: 0x1FEA8BC Offset: 0x1FEA8BC VA: 0x1FEA8BC
	private void HandleNtlmAuth(WebAsyncResult r) { }

	// RVA: 0x1FEAB90 Offset: 0x1FEAB90 VA: 0x1FEAB90
	internal void SetResponseData(WebConnectionData data) { }

	// RVA: 0x1FEBDD8 Offset: 0x1FEBDD8 VA: 0x1FEBDD8
	private bool CheckAuthorization(WebResponse response, HttpStatusCode code) { }

	// RVA: 0x1FEB83C Offset: 0x1FEB83C VA: 0x1FEB83C
	private bool CheckFinalStatus(WebAsyncResult result) { }
}

// Namespace: System.Net
[Serializable]
public class HttpWebResponse : WebResponse, IDisposable, ISerializable // TypeDefIndex: 1577
{
	// Fields
	private Uri uri; // 0x18
	private WebHeaderCollection webHeaders; // 0x20
	private CookieCollection cookieCollection; // 0x28
	private string method; // 0x30
	private Version version; // 0x38
	private HttpStatusCode statusCode; // 0x40
	private string statusDescription; // 0x48
	private long contentLength; // 0x50
	private string contentType; // 0x58
	private CookieContainer cookie_container; // 0x60
	private bool disposed; // 0x68
	private Stream stream; // 0x70
	private string[] cookieExpiresFormats; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xBD0F9C Offset: 0xBD0F9C VA: 0xBD0F9C
	private static Dictionary<string, int> <>f__switch$map8; // 0x0

	// Properties
	public string CharacterSet { get; }
	public string ContentEncoding { get; }
	public override long ContentLength { get; }
	public override string ContentType { get; }
	public CookieCollection Cookies { get; set; }
	public override WebHeaderCollection Headers { get; }
	[MonoTODOAttribute] // RVA: 0xBD3864 Offset: 0xBD3864 VA: 0xBD3864
	public override bool IsMutuallyAuthenticated { get; }
	public DateTime LastModified { get; }
	public string Method { get; }
	public Version ProtocolVersion { get; }
	public override Uri ResponseUri { get; }
	public string Server { get; }
	public HttpStatusCode StatusCode { get; }
	public string StatusDescription { get; }

	// Methods

	// RVA: 0x1FEB3E0 Offset: 0x1FEB3E0 VA: 0x1FEB3E0
	internal void .ctor(Uri uri, string method, WebConnectionData data, CookieContainer container) { }

	[ObsoleteAttribute] // RVA: 0xBD1FAC Offset: 0xBD1FAC VA: 0xBD1FAC
	// RVA: 0x1FEC2F8 Offset: 0x1FEC2F8 VA: 0x1FEC2F8
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FEC7D4 Offset: 0x1FEC7D4 VA: 0x1FEC7D4 Slot: 7
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FEC7E4 Offset: 0x1FEC7E4 VA: 0x1FEC7E4 Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1FEC884 Offset: 0x1FEC884 VA: 0x1FEC884
	public string get_CharacterSet() { }

	// RVA: 0x1FEC990 Offset: 0x1FEC990 VA: 0x1FEC990
	public string get_ContentEncoding() { }

	// RVA: 0x1FECAE8 Offset: 0x1FECAE8 VA: 0x1FECAE8 Slot: 8
	public override long get_ContentLength() { }

	// RVA: 0x1FECAF0 Offset: 0x1FECAF0 VA: 0x1FECAF0 Slot: 10
	public override string get_ContentType() { }

	// RVA: 0x1FECB6C Offset: 0x1FECB6C VA: 0x1FECB6C
	public CookieCollection get_Cookies() { }

	// RVA: 0x1FECBE0 Offset: 0x1FECBE0 VA: 0x1FECBE0
	public void set_Cookies(CookieCollection value) { }

	// RVA: 0x1FECC08 Offset: 0x1FECC08 VA: 0x1FECC08 Slot: 12
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0x1FECC10 Offset: 0x1FECC10 VA: 0x1FECC10
	private static Exception GetMustImplement() { }

	// RVA: 0x1FECC6C Offset: 0x1FECC6C VA: 0x1FECC6C Slot: 14
	public override bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x1FECCB8 Offset: 0x1FECCB8 VA: 0x1FECCB8
	public DateTime get_LastModified() { }

	// RVA: 0x1FECDF4 Offset: 0x1FECDF4 VA: 0x1FECDF4
	public string get_Method() { }

	// RVA: 0x1FECE18 Offset: 0x1FECE18 VA: 0x1FECE18
	public Version get_ProtocolVersion() { }

	// RVA: 0x1FECE3C Offset: 0x1FECE3C VA: 0x1FECE3C Slot: 15
	public override Uri get_ResponseUri() { }

	// RVA: 0x1FECE60 Offset: 0x1FECE60 VA: 0x1FECE60
	public string get_Server() { }

	// RVA: 0x1FEBDD0 Offset: 0x1FEBDD0 VA: 0x1FEBDD0
	public HttpStatusCode get_StatusCode() { }

	// RVA: 0x1FEC190 Offset: 0x1FEC190 VA: 0x1FEC190
	public string get_StatusDescription() { }

	// RVA: 0x1FECECC Offset: 0x1FECECC VA: 0x1FECECC
	public string GetResponseHeader(string headerName) { }

	// RVA: 0x1FEA7B0 Offset: 0x1FEA7B0 VA: 0x1FEA7B0
	internal void ReadAll() { }

	// RVA: 0x1FECF70 Offset: 0x1FECF70 VA: 0x1FECF70 Slot: 17
	public override Stream GetResponseStream() { }

	// RVA: 0x1FED03C Offset: 0x1FED03C VA: 0x1FED03C Slot: 18
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FED204 Offset: 0x1FED204 VA: 0x1FED204 Slot: 16
	public override void Close() { }

	// RVA: 0x1FEC840 Offset: 0x1FEC840 VA: 0x1FEC840
	private void Dispose(bool disposing) { }

	// RVA: 0x1FECA30 Offset: 0x1FECA30 VA: 0x1FECA30
	private void CheckDisposed() { }

	// RVA: 0x1FEC1B4 Offset: 0x1FEC1B4 VA: 0x1FEC1B4
	private void FillCookies() { }

	// RVA: 0x1FED2A8 Offset: 0x1FED2A8 VA: 0x1FED2A8
	private void SetCookie(string header) { }

	// RVA: 0x1FEDBF0 Offset: 0x1FEDBF0 VA: 0x1FEDBF0
	private void SetCookie2(string cookies_str) { }

	// RVA: 0x1FEDCEC Offset: 0x1FEDCEC VA: 0x1FEDCEC
	private DateTime TryParseCookieExpires(string value) { }
}

// Namespace: System.Net
internal class CookieParser // TypeDefIndex: 1578
{
	// Fields
	private string header; // 0x10
	private int pos; // 0x18
	private int length; // 0x1C

	// Methods

	// RVA: 0x1F32C28 Offset: 0x1F32C28 VA: 0x1F32C28
	public void .ctor(string header) { }

	// RVA: 0x1F32C30 Offset: 0x1F32C30 VA: 0x1F32C30
	public void .ctor(string header, int position) { }

	// RVA: 0x1F32C88 Offset: 0x1F32C88 VA: 0x1F32C88
	public bool GetNextNameValue(out string name, out string val) { }

	// RVA: 0x1F32D94 Offset: 0x1F32D94 VA: 0x1F32D94
	private string GetCookieName() { }

	// RVA: 0x1F32F0C Offset: 0x1F32F0C VA: 0x1F32F0C
	private string GetCookieValue() { }
}

// Namespace: System.Net
public interface IAuthenticationModule // TypeDefIndex: 1579
{
	// Properties
	public abstract string AuthenticationType { get; }
	public abstract bool CanPreAuthenticate { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Authorization Authenticate(string challenge, WebRequest request, ICredentials credentials);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract Authorization PreAuthenticate(WebRequest request, ICredentials credentials);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string get_AuthenticationType();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_CanPreAuthenticate();
}

// Namespace: System.Net
public interface ICertificatePolicy // TypeDefIndex: 1580
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem);
}

// Namespace: System.Net
public interface ICredentials // TypeDefIndex: 1581
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract NetworkCredential GetCredential(Uri uri, string authType);
}

// Namespace: System.Net
public interface ICredentialPolicy // TypeDefIndex: 1582
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool ShouldSendCredential(Uri challengeUri, WebRequest request, NetworkCredential credential, IAuthenticationModule authenticationModule);
}

// Namespace: System.Net
public interface ICredentialsByHost // TypeDefIndex: 1583
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract NetworkCredential GetCredential(string host, int port, string authType);
}

// Namespace: System.Net
[Serializable]
public class IPAddress // TypeDefIndex: 1584
{
	// Fields
	private long m_Address; // 0x10
	private AddressFamily m_Family; // 0x18
	private ushort[] m_Numbers; // 0x20
	private long m_ScopeId; // 0x28
	public static readonly IPAddress Any; // 0x0
	public static readonly IPAddress Broadcast; // 0x8
	public static readonly IPAddress Loopback; // 0x10
	public static readonly IPAddress None; // 0x18
	public static readonly IPAddress IPv6Any; // 0x20
	public static readonly IPAddress IPv6Loopback; // 0x28
	public static readonly IPAddress IPv6None; // 0x30
	private int m_HashCode; // 0x30

	// Properties
	[ObsoleteAttribute] // RVA: 0xBD3874 Offset: 0xBD3874 VA: 0xBD3874
	public long Address { get; set; }
	internal long InternalIPv4Address { get; }
	public bool IsIPv6LinkLocal { get; }
	public bool IsIPv6SiteLocal { get; }
	public bool IsIPv6Multicast { get; }
	public long ScopeId { get; set; }
	public AddressFamily AddressFamily { get; }

	// Methods

	// RVA: 0x1FEDF60 Offset: 0x1FEDF60 VA: 0x1FEDF60
	public void .ctor(long addr) { }

	// RVA: 0x1FEDF94 Offset: 0x1FEDF94 VA: 0x1FEDF94
	public void .ctor(byte[] address) { }

	// RVA: 0x1FEE0F4 Offset: 0x1FEE0F4 VA: 0x1FEE0F4
	public void .ctor(byte[] address, long scopeId) { }

	// RVA: 0x1FEE220 Offset: 0x1FEE220 VA: 0x1FEE220
	internal void .ctor(ushort[] address, long scopeId) { }

	// RVA: 0x1FEE3D0 Offset: 0x1FEE3D0 VA: 0x1FEE3D0
	private static void .cctor() { }

	// RVA: 0x1FEE66C Offset: 0x1FEE66C VA: 0x1FEE66C
	private static short SwapShort(short number) { }

	// RVA: 0x1FEE678 Offset: 0x1FEE678 VA: 0x1FEE678
	private static int SwapInt(int number) { }

	// RVA: 0x1FEE680 Offset: 0x1FEE680 VA: 0x1FEE680
	private static long SwapLong(long number) { }

	// RVA: 0x1FEE330 Offset: 0x1FEE330 VA: 0x1FEE330
	public static short HostToNetworkOrder(short host) { }

	// RVA: 0x1FEE688 Offset: 0x1FEE688 VA: 0x1FEE688
	public static int HostToNetworkOrder(int host) { }

	// RVA: 0x1FEE724 Offset: 0x1FEE724 VA: 0x1FEE724
	public static long HostToNetworkOrder(long host) { }

	// RVA: 0x1FEE7C0 Offset: 0x1FEE7C0 VA: 0x1FEE7C0
	public static short NetworkToHostOrder(short network) { }

	// RVA: 0x1FEE860 Offset: 0x1FEE860 VA: 0x1FEE860
	public static int NetworkToHostOrder(int network) { }

	// RVA: 0x1FEE8FC Offset: 0x1FEE8FC VA: 0x1FEE8FC
	public static long NetworkToHostOrder(long network) { }

	// RVA: 0x1FEE4D8 Offset: 0x1FEE4D8 VA: 0x1FEE4D8
	public static IPAddress Parse(string ipString) { }

	// RVA: 0x1FEE998 Offset: 0x1FEE998 VA: 0x1FEE998
	public static bool TryParse(string ipString, out IPAddress address) { }

	// RVA: 0x1FEEA88 Offset: 0x1FEEA88 VA: 0x1FEEA88
	private static IPAddress ParseIPV4(string ip) { }

	// RVA: 0x1FEE59C Offset: 0x1FEE59C VA: 0x1FEE59C
	private static IPAddress ParseIPV6(string ip) { }

	// RVA: 0x1FEF978 Offset: 0x1FEF978 VA: 0x1FEF978
	public long get_Address() { }

	// RVA: 0x1FEFA0C Offset: 0x1FEFA0C VA: 0x1FEFA0C
	public void set_Address(long value) { }

	// RVA: 0x1FEFAAC Offset: 0x1FEFAAC VA: 0x1FEFAAC
	internal long get_InternalIPv4Address() { }

	// RVA: 0x1FEFAB4 Offset: 0x1FEFAB4 VA: 0x1FEFAB4
	public bool get_IsIPv6LinkLocal() { }

	// RVA: 0x1FEFB6C Offset: 0x1FEFB6C VA: 0x1FEFB6C
	public bool get_IsIPv6SiteLocal() { }

	// RVA: 0x1FEFC24 Offset: 0x1FEFC24 VA: 0x1FEFC24
	public bool get_IsIPv6Multicast() { }

	// RVA: 0x1FEFCD8 Offset: 0x1FEFCD8 VA: 0x1FEFCD8
	public long get_ScopeId() { }

	// RVA: 0x1FEFD6C Offset: 0x1FEFD6C VA: 0x1FEFD6C
	public void set_ScopeId(long value) { }

	// RVA: 0x1FEFE0C Offset: 0x1FEFE0C VA: 0x1FEFE0C
	public byte[] GetAddressBytes() { }

	// RVA: 0x1FEFF4C Offset: 0x1FEFF4C VA: 0x1FEFF4C
	public AddressFamily get_AddressFamily() { }

	// RVA: 0x1FE1F3C Offset: 0x1FE1F3C VA: 0x1FE1F3C
	public static bool IsLoopback(IPAddress addr) { }

	// RVA: 0x1FEFF54 Offset: 0x1FEFF54 VA: 0x1FEFF54 Slot: 3
	public override string ToString() { }

	// RVA: 0x1FF0108 Offset: 0x1FF0108 VA: 0x1FF0108
	private static string ToString(long addr) { }

	// RVA: 0x1FF0504 Offset: 0x1FF0504 VA: 0x1FF0504 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x1FF0658 Offset: 0x1FF0658 VA: 0x1FF0658 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1FF08A8 Offset: 0x1FF08A8 VA: 0x1FF08A8
	private static int Hash(int i, int j, int k, int l) { }
}

// Namespace: System.Net
[Serializable]
public class IPEndPoint : EndPoint // TypeDefIndex: 1585
{
	// Fields
	public const int MaxPort = 65535;
	public const int MinPort = 0;
	private IPAddress address; // 0x10
	private int port; // 0x18

	// Properties
	public IPAddress Address { get; set; }
	public override AddressFamily AddressFamily { get; }
	public int Port { get; set; }

	// Methods

	// RVA: 0x1FF08D0 Offset: 0x1FF08D0 VA: 0x1FF08D0
	public void .ctor(IPAddress address, int port) { }

	// RVA: 0x1FF0A24 Offset: 0x1FF0A24 VA: 0x1FF0A24
	public void .ctor(long iaddr, int port) { }

	// RVA: 0x1FE1F34 Offset: 0x1FE1F34 VA: 0x1FE1F34
	public IPAddress get_Address() { }

	// RVA: 0x1FF0980 Offset: 0x1FF0980 VA: 0x1FF0980
	public void set_Address(IPAddress value) { }

	// RVA: 0x1FF0AB4 Offset: 0x1FF0AB4 VA: 0x1FF0AB4 Slot: 4
	public override AddressFamily get_AddressFamily() { }

	// RVA: 0x1FE1C28 Offset: 0x1FE1C28 VA: 0x1FE1C28
	public int get_Port() { }

	// RVA: 0x1FF0988 Offset: 0x1FF0988 VA: 0x1FF0988
	public void set_Port(int value) { }

	// RVA: 0x1FF0AE0 Offset: 0x1FF0AE0 VA: 0x1FF0AE0 Slot: 5
	public override EndPoint Create(SocketAddress socketAddress) { }

	// RVA: 0x1FF109C Offset: 0x1FF109C VA: 0x1FF109C Slot: 6
	public override SocketAddress Serialize() { }

	// RVA: 0x1FF1420 Offset: 0x1FF1420 VA: 0x1FF1420 Slot: 3
	public override string ToString() { }

	// RVA: 0x1FF14EC Offset: 0x1FF14EC VA: 0x1FF14EC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1FF15B8 Offset: 0x1FF15B8 VA: 0x1FF15B8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Net
public class IPHostEntry // TypeDefIndex: 1586
{
	// Fields
	private IPAddress[] addressList; // 0x10
	private string[] aliases; // 0x18
	private string hostName; // 0x20

	// Properties
	public IPAddress[] AddressList { get; set; }
	public string[] Aliases { get; set; }
	public string HostName { get; set; }

	// Methods

	// RVA: 0x1FF15FC Offset: 0x1FF15FC VA: 0x1FF15FC
	public void .ctor() { }

	// RVA: 0x1FF1604 Offset: 0x1FF1604 VA: 0x1FF1604
	public IPAddress[] get_AddressList() { }

	// RVA: 0x1FF160C Offset: 0x1FF160C VA: 0x1FF160C
	public void set_AddressList(IPAddress[] value) { }

	// RVA: 0x1FF1614 Offset: 0x1FF1614 VA: 0x1FF1614
	public string[] get_Aliases() { }

	// RVA: 0x1FF161C Offset: 0x1FF161C VA: 0x1FF161C
	public void set_Aliases(string[] value) { }

	// RVA: 0x1FF1624 Offset: 0x1FF1624 VA: 0x1FF1624
	public string get_HostName() { }

	// RVA: 0x1FF162C Offset: 0x1FF162C VA: 0x1FF162C
	public void set_HostName(string value) { }
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xBD086C Offset: 0xBD086C VA: 0xBD086C
[Serializable]
internal class IPv6Address // TypeDefIndex: 1587
{
	// Fields
	private ushort[] address; // 0x10
	private int prefixLength; // 0x18
	private long scopeId; // 0x20
	public static readonly IPv6Address Loopback; // 0x0
	public static readonly IPv6Address Unspecified; // 0x8

	// Properties
	public ushort[] Address { get; }
	public int PrefixLength { get; }
	public long ScopeId { get; set; }
	public ushort Item { get; }
	public AddressFamily AddressFamily { get; }

	// Methods

	// RVA: 0x1FF0420 Offset: 0x1FF0420 VA: 0x1FF0420
	public void .ctor(ushort[] addr) { }

	// RVA: 0x1FF1634 Offset: 0x1FF1634 VA: 0x1FF1634
	public void .ctor(ushort[] addr, int prefixLength) { }

	// RVA: 0x1FF16E0 Offset: 0x1FF16E0 VA: 0x1FF16E0
	public void .ctor(ushort[] addr, int prefixLength, int scopeId) { }

	// RVA: 0x1FF170C Offset: 0x1FF170C VA: 0x1FF170C
	private static void .cctor() { }

	// RVA: 0x1FF1788 Offset: 0x1FF1788 VA: 0x1FF1788
	public static IPv6Address Parse(string ipString) { }

	// RVA: 0x1FF187C Offset: 0x1FF187C VA: 0x1FF187C
	private static int Fill(ushort[] addr, string ipString) { }

	// RVA: 0x1FF1A84 Offset: 0x1FF1A84 VA: 0x1FF1A84
	private static bool TryParse(string prefix, out int res) { }

	// RVA: 0x1FEF1F8 Offset: 0x1FEF1F8 VA: 0x1FEF1F8
	public static bool TryParse(string ipString, out IPv6Address result) { }

	// RVA: 0x1FEF968 Offset: 0x1FEF968 VA: 0x1FEF968
	public ushort[] get_Address() { }

	// RVA: 0x1FF1B0C Offset: 0x1FF1B0C VA: 0x1FF1B0C
	public int get_PrefixLength() { }

	// RVA: 0x1FEF970 Offset: 0x1FEF970 VA: 0x1FEF970
	public long get_ScopeId() { }

	// RVA: 0x1FF04FC Offset: 0x1FF04FC VA: 0x1FF04FC
	public void set_ScopeId(long value) { }

	// RVA: 0x1FF1B14 Offset: 0x1FF1B14 VA: 0x1FF1B14
	public ushort get_Item(int index) { }

	// RVA: 0x1FF1B68 Offset: 0x1FF1B68 VA: 0x1FF1B68
	public AddressFamily get_AddressFamily() { }

	// RVA: 0x1FF1B70 Offset: 0x1FF1B70 VA: 0x1FF1B70
	public static bool IsLoopback(IPv6Address addr) { }

	// RVA: 0x1FF1CCC Offset: 0x1FF1CCC VA: 0x1FF1CCC
	private static ushort SwapUShort(ushort number) { }

	// RVA: 0x1FF1CD8 Offset: 0x1FF1CD8 VA: 0x1FF1CD8
	private int AsIPv4Int() { }

	// RVA: 0x1FF1DA4 Offset: 0x1FF1DA4 VA: 0x1FF1DA4
	public bool IsIPv4Compatible() { }

	// RVA: 0x1FF1E28 Offset: 0x1FF1E28 VA: 0x1FF1E28
	public bool IsIPv4Mapped() { }

	// RVA: 0x1FF1EC8 Offset: 0x1FF1EC8 VA: 0x1FF1EC8 Slot: 3
	public override string ToString() { }

	// RVA: 0x1FF2264 Offset: 0x1FF2264 VA: 0x1FF2264
	public string ToString(bool fullLength) { }
