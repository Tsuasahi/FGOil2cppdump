	// RVA: 0x15DAD2C Offset: 0x15DAD2C VA: 0x15DAD2C
	public string[] getWaveStartMovie() { }

	// RVA: 0x15DAD5C Offset: 0x15DAD5C VA: 0x15DAD5C
	public int[] getStartMovieWave() { }

	// RVA: 0x15DAD8C Offset: 0x15DAD8C VA: 0x15DAD8C
	public bool isProgressAfterMovie() { }

	// RVA: 0x15DADC8 Offset: 0x15DADC8 VA: 0x15DADC8
	public bool IsMovieAfterCrossFade() { }

	// RVA: 0x15DAE04 Offset: 0x15DAE04 VA: 0x15DAE04
	public float GetMovieAfterCrossFadeTime() { }

	// RVA: 0x15DAE48 Offset: 0x15DAE48 VA: 0x15DAE48
	public int GetMovieAfterCrossFadeStartFrame() { }

	// RVA: 0x15DACF0 Offset: 0x15DACF0 VA: 0x15DACF0
	public bool isWaveStartMovie() { }

	// RVA: 0x15DAE78 Offset: 0x15DAE78 VA: 0x15DAE78
	public int GetOverWriteMasterImageId() { }

	// RVA: 0x15DAEA8 Offset: 0x15DAEA8 VA: 0x15DAEA8
	public int GetMasterIconImageId() { }

	// RVA: 0x15DAF84 Offset: 0x15DAF84 VA: 0x15DAF84
	public int GetMasterSkillCutinImageId() { }

	// RVA: 0x15DAFA0 Offset: 0x15DAFA0 VA: 0x15DAFA0
	public Vector3 GetMasterSkillCutinOffset() { }

	// RVA: 0x15DB058 Offset: 0x15DB058 VA: 0x15DB058
	public int GetMasterCommandSpellCutinImageId() { }

	// RVA: 0x15DB074 Offset: 0x15DB074 VA: 0x15DB074
	public Vector3 GetCommandSpellCutinOffset() { }

	// RVA: 0x15DB12C Offset: 0x15DB12C VA: 0x15DB12C
	public int GetMasterIconResultImageId() { }

	// RVA: 0x15DAEC4 Offset: 0x15DAEC4 VA: 0x15DAEC4
	public BattleMasterImageEntity GetBattleMasterImageEntity() { }

	// RVA: 0x15DB148 Offset: 0x15DB148 VA: 0x15DB148
	public bool IsNotResetResultDispFlag() { }

	// RVA: 0x15DB178 Offset: 0x15DB178 VA: 0x15DB178
	public bool isBreakOnBattleWinFadeColorBalck() { }

	// RVA: 0x15DB1A8 Offset: 0x15DB1A8 VA: 0x15DB1A8
	public bool isBreakOnBattleWinAndWait(out float waitTime) { }

	// RVA: 0x15DB1FC Offset: 0x15DB1FC VA: 0x15DB1FC
	public bool isBattleFinishCameraTargetAll() { }

	// RVA: 0x15C6E70 Offset: 0x15C6E70 VA: 0x15C6E70
	public void setResultNone() { }

	// RVA: 0x15DB22C Offset: 0x15DB22C VA: 0x15DB22C
	public void setResultWin() { }

	// RVA: 0x15DB238 Offset: 0x15DB238 VA: 0x15DB238
	public void setResultLose() { }

	// RVA: 0x15DB244 Offset: 0x15DB244 VA: 0x15DB244
	public void setResultRetire() { }

	// RVA: 0x15DB250 Offset: 0x15DB250 VA: 0x15DB250
	public bool isResultWin() { }

	// RVA: 0x15DB260 Offset: 0x15DB260 VA: 0x15DB260
	public BattleData.WinResult getWinResult() { }

	// RVA: 0x15DB27C Offset: 0x15DB27C VA: 0x15DB27C
	public bool isAliveEntriesByForcedFlag(int[] entryIdArray) { }

	// RVA: 0x15DB414 Offset: 0x15DB414 VA: 0x15DB414
	public void release() { }

	// RVA: 0x15DB4CC Offset: 0x15DB4CC VA: 0x15DB4CC
	public BattleFieldData getBattleFieldData(int index) { }

	// RVA: 0x15DB520 Offset: 0x15DB520 VA: 0x15DB520
	public PlayerFieldStatus getPlayerFieldStatus() { }

	// RVA: 0x15DB528 Offset: 0x15DB528 VA: 0x15DB528
	public EnemyFieldStatus getEnemyFieldStatus() { }

	// RVA: 0x15DB530 Offset: 0x15DB530 VA: 0x15DB530
	public int getNextUniqueID() { }

	// RVA: 0x15DB57C Offset: 0x15DB57C VA: 0x15DB57C
	public int getNextNextIndex() { }

	// RVA: 0x15DA090 Offset: 0x15DA090 VA: 0x15DA090
	public BattleServantData createSummonEnemyServantData(int uniqueId, int index, int npcId, string saveStr) { }

	// RVA: 0x15D9F00 Offset: 0x15D9F00 VA: 0x15D9F00
	public BattleServantData createSummonEnemyServantData(int uniqueId, int index, int npcId, BattleServantData.SaveData saveData) { }

	// RVA: 0x15DB65C Offset: 0x15DB65C VA: 0x15DB65C
	public int GetEnemySummonId(int index) { }

	// RVA: 0x15DB6DC Offset: 0x15DB6DC VA: 0x15DB6DC
	public int getFieldSpace(int actId, out int targetIndex, bool forciblySelectEnemy = False) { }

	// RVA: 0x15DB8AC Offset: 0x15DB8AC VA: 0x15DB8AC
	public bool isTargetLock() { }

	// RVA: 0x15DB918 Offset: 0x15DB918 VA: 0x15DB918
	public int getTargetLock(int uniqueId, bool isMaster = False, int[] addIndiv) { }

	// RVA: 0x15DBBC4 Offset: 0x15DBBC4 VA: 0x15DBBC4
	public void setTargetLock(List<int> _lockTargetIdList) { }

	// RVA: 0x15C908C Offset: 0x15C908C VA: 0x15C908C
	public void onProgressflg(BattleData.PROGRESS instate) { }

	// RVA: 0x15DBC58 Offset: 0x15DBC58 VA: 0x15DBC58
	public void offProgressflg(BattleData.PROGRESS instate) { }

	// RVA: 0x15DBC68 Offset: 0x15DBC68 VA: 0x15DBC68
	public bool checkProgressflg(BattleData.PROGRESS instate) { }

	// RVA: 0x15DBC78 Offset: 0x15DBC78 VA: 0x15DBC78
	public void setProgresslist(bool isWave) { }

	// RVA: 0x15DBC98 Offset: 0x15DBC98 VA: 0x15DBC98
	public void SetProcesssFlgOnBattleResume() { }

	// RVA: 0x15DBCA8 Offset: 0x15DBCA8 VA: 0x15DBCA8
	public BattleRaidInfo getRaidInfo(int day) { }

	// RVA: 0x15DBD64 Offset: 0x15DBD64 VA: 0x15DBD64 Slot: 4
	public double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams) { }

	// RVA: 0x15DC1FC Offset: 0x15DC1FC VA: 0x15DC1FC Slot: 5
	public bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }

	// RVA: 0x15DC204 Offset: 0x15DC204 VA: 0x15DC204
	public int getTurnSituationType() { }

	// RVA: 0x15DC234 Offset: 0x15DC234 VA: 0x15DC234
	public bool isTurnSituationType() { }

	// RVA: 0x15DC264 Offset: 0x15DC264 VA: 0x15DC264
	public int getSpecialShadowEffectId() { }

	// RVA: 0x15DC294 Offset: 0x15DC294 VA: 0x15DC294
	public int[] GetShadowOffSvtIds() { }

	// RVA: 0x15DC2C4 Offset: 0x15DC2C4 VA: 0x15DC2C4
	public int getStartBattleAssetId() { }

	// RVA: 0x15DC324 Offset: 0x15DC324 VA: 0x15DC324
	public bool disableSystemFadeStartBattle() { }

	// RVA: 0x15DC384 Offset: 0x15DC384 VA: 0x15DC384
	public bool isDisableChangeRaidDownMessage() { }

	// RVA: 0x15DC3B4 Offset: 0x15DC3B4 VA: 0x15DC3B4
	public int[] getAliveEnemys() { }

	// RVA: 0x15DC174 Offset: 0x15DC174 VA: 0x15DC174
	public int getEnemyMasterCommandSpellCnt() { }

	// RVA: 0x15D278C Offset: 0x15D278C VA: 0x15D278C
	public void AddTotalTurnDamage(long damage) { }

	// RVA: 0x15CCC08 Offset: 0x15CCC08 VA: 0x15CCC08
	public void RenewTurnDamageRecord() { }

	// RVA: 0x15DC408 Offset: 0x15DC408 VA: 0x15DC408
	public void AddMasterSkillDelayIfNeeded() { }

	// RVA: 0x15DC5A4 Offset: 0x15DC5A4 VA: 0x15DC5A4
	public void saveKnockdownEachWave() { }

	// RVA: 0x15DC6FC Offset: 0x15DC6FC VA: 0x15DC6FC
	public void setQuestKnockdownResult() { }

	// RVA: 0x15DC848 Offset: 0x15DC848 VA: 0x15DC848
	public int getQuestRecordType() { }

	// RVA: 0x15DC868 Offset: 0x15DC868 VA: 0x15DC868
	public QuestKnockdownInfo getQuestKnockdownRecord() { }

	// RVA: 0x15DC97C Offset: 0x15DC97C VA: 0x15DC97C
	public Dictionary<string, object> getQuestRecordJson() { }

	// RVA: 0x15D530C Offset: 0x15D530C VA: 0x15D530C
	private bool IsRetryableQuestPhase() { }

	// RVA: 0x15DCB28 Offset: 0x15DCB28 VA: 0x15DCB28
	public bool CheckDoNotSelectCommandCard() { }

	// RVA: 0x15DD26C Offset: 0x15DD26C VA: 0x15DD26C
	public void ChangeDoNotSelectCommandServantList() { }

	// RVA: 0x15DD430 Offset: 0x15DD430 VA: 0x15DD430
	public bool isDoNotSelectCommandServantCommandInCommandList() { }

	// RVA: 0x15DD5C0 Offset: 0x15DD5C0 VA: 0x15DD5C0
	public static void SaveServantCommonFlag(int servantId, int commonFlag) { }

	// RVA: 0x15DD9B0 Offset: 0x15DD9B0 VA: 0x15DD9B0
	public static Dictionary<int, int> GetSavedServantCommonFlagDict() { }

	// RVA: 0x15DDC04 Offset: 0x15DDC04 VA: 0x15DDC04
	public static int GetSavedServantCommonFlag(int servantId, int defaultFlag) { }

	// RVA: 0x15D7634 Offset: 0x15D7634 VA: 0x15D7634
	private void SetSavedCommandCardBuffData() { }

	// RVA: 0x15DDCD0 Offset: 0x15DDCD0 VA: 0x15DDCD0
	public void UpdateContinueItemInfo() { }

	// RVA: 0x15DDF08 Offset: 0x15DDF08 VA: 0x15DDF08
	public int GetContinueUseItemId() { }

	// RVA: 0x15DDF38 Offset: 0x15DDF38 VA: 0x15DDF38
	public int GetContinueItemImageId() { }

	// RVA: 0x15DDF68 Offset: 0x15DDF68 VA: 0x15DDF68
	public int GetContinueItemNum() { }

	// RVA: 0x15DDF98 Offset: 0x15DDF98 VA: 0x15DDF98
	public long GetContinueDeadLine() { }

	// RVA: 0x15DDFC8 Offset: 0x15DDFC8 VA: 0x15DDFC8
	public bool EnableContinueItem() { }

	// RVA: 0x15DE2EC Offset: 0x15DE2EC VA: 0x15DE2EC
	public int[] GetAssistIdArray() { }

	// RVA: 0x15DE31C Offset: 0x15DE31C VA: 0x15DE31C
	public int[] GetAssistWeightArray() { }

	// RVA: 0x15DE34C Offset: 0x15DE34C VA: 0x15DE34C
	public bool ExistDropItem() { }

	// RVA: 0x15DE440 Offset: 0x15DE440 VA: 0x15DE440
	public BgmEntity getBgmMasterFromCostume(int uniqueID) { }

	// RVA: 0x15C729C Offset: 0x15C729C VA: 0x15C729C
	private void InitializeTemporaryCommandSpell() { }

	// RVA: 0x15DC194 Offset: 0x15DC194 VA: 0x15DC194
	public int CheckCurrentTemporaryCommandSpell(UserGameEntity userGame) { }

	// RVA: 0x15DE6CC Offset: 0x15DE6CC VA: 0x15DE6CC
	public void LossTemporaryCommandSpell(int val) { }

	// RVA: 0x15DE6B8 Offset: 0x15DE6B8 VA: 0x15DE6B8
	public bool IsUseTemporaryCommandSpell() { }

	// RVA: 0x15D84A8 Offset: 0x15D84A8 VA: 0x15D84A8
	private void LoadBattleStartVoice() { }

	// RVA: 0x15DE6E0 Offset: 0x15DE6E0 VA: 0x15DE6E0
	public bool CheckDefenceTargetBroken() { }

	// RVA: 0x15C909C Offset: 0x15C909C VA: 0x15C909C
	public bool CheckDefenceTargetData() { }

	// RVA: 0x15DE70C Offset: 0x15DE70C VA: 0x15DE70C
	public void RegisterItemDroppedSkillShiftInfo(BattleServantData svtData) { }

	// RVA: 0x15D41F0 Offset: 0x15D41F0 VA: 0x15D41F0
	public int[] GetItemDroppedSkillShiftUniqueIdArray() { }

	// RVA: 0x15D4220 Offset: 0x15D4220 VA: 0x15D4220
	public long[] GetItemDroppedSkillShiftNpcSvtIdArray() { }

	// RVA: 0x15DE744 Offset: 0x15DE744 VA: 0x15DE744
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39FBC Offset: 0xD39FBC VA: 0xD39FBC
	// RVA: 0x15DE7E0 Offset: 0x15DE7E0 VA: 0x15DE7E0
	private static bool <IsDeckNoUserSvt>m__0(RestrictionEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39FCC Offset: 0xD39FCC VA: 0xD39FCC
	// RVA: 0x15DE810 Offset: 0x15DE810 VA: 0x15DE810
	private static int <GetSubServantUsableDeckIndex>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39FDC Offset: 0xD39FDC VA: 0xD39FDC
	// RVA: 0x15DE83C Offset: 0x15DE83C VA: 0x15DE83C
	private void <RefreshAllSubServantDeckIndex>m__2(bool isEnemy) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39FEC Offset: 0xD39FEC VA: 0xD39FEC
	// RVA: 0x15DE930 Offset: 0x15DE930 VA: 0x15DE930
	private static bool <GetRestockServantLogicList>m__3(RestockServantLogic x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39FFC Offset: 0xD39FFC VA: 0xD39FFC
	// RVA: 0x15DE95C Offset: 0x15DE95C VA: 0x15DE95C
	private static void <turnProgressing>m__4(AiNpcBattleServantData npc) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A00C Offset: 0xD3A00C VA: 0xD3A00C
	// RVA: 0x15DE988 Offset: 0x15DE988 VA: 0x15DE988
	private static int <loadMasterSkill>m__5(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A01C Offset: 0xD3A01C VA: 0xD3A01C
	// RVA: 0x15DE98C Offset: 0x15DE98C VA: 0x15DE98C
	private static int <getPlayerSubServantData>m__6(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A02C Offset: 0xD3A02C VA: 0xD3A02C
	// RVA: 0x15DE9E0 Offset: 0x15DE9E0 VA: 0x15DE9E0
	private static int <getEnemySubBackServantData>m__7(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A03C Offset: 0xD3A03C VA: 0xD3A03C
	// RVA: 0x15DEA34 Offset: 0x15DEA34 VA: 0x15DEA34
	private static int <getSubPlayerServantList>m__8(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A04C Offset: 0xD3A04C VA: 0xD3A04C
	// RVA: 0x15DEA88 Offset: 0x15DEA88 VA: 0x15DEA88
	private static bool <GetSubServantArray>m__9(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A05C Offset: 0xD3A05C VA: 0xD3A05C
	// RVA: 0x15DEAB8 Offset: 0x15DEAB8 VA: 0x15DEAB8
	private static int <GetSubServantArray>m__A(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A06C Offset: 0xD3A06C VA: 0xD3A06C
	// RVA: 0x15DEAE4 Offset: 0x15DEAE4 VA: 0x15DEAE4
	private static int <GetRestockableSubServantArray>m__B(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A07C Offset: 0xD3A07C VA: 0xD3A07C
	// RVA: 0x15DEB10 Offset: 0x15DEB10 VA: 0x15DEB10
	private static int <getWaveClearTurn>m__C(string s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A08C Offset: 0xD3A08C VA: 0xD3A08C
	// RVA: 0x15DEB3C Offset: 0x15DEB3C VA: 0x15DEB3C
	private static BattleServantData.SaveData <SaveTurnData>m__D(AiNpcBattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A09C Offset: 0xD3A09C VA: 0xD3A09C
	// RVA: 0x15DEB70 Offset: 0x15DEB70 VA: 0x15DEB70
	private static BattleServantData.ConnectData <getActionList>m__E(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A0AC Offset: 0xD3A0AC VA: 0xD3A0AC
	// RVA: 0x15DEB9C Offset: 0x15DEB9C VA: 0x15DEB9C
	private static BattleData.CHAIN_COUNT_TYPE <loadQuest>m__F(string key) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A0BC Offset: 0xD3A0BC VA: 0xD3A0BC
	// RVA: 0x15DEC60 Offset: 0x15DEC60 VA: 0x15DEC60
	private static int <loadSaveTurnNstage>m__10(BattleServantData a, BattleServantData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A0CC Offset: 0xD3A0CC VA: 0xD3A0CC
	// RVA: 0x15DECB4 Offset: 0x15DECB4 VA: 0x15DECB4
	private static bool <IsAliveOtherRaidTypeBoss>m__11(BattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A0DC Offset: 0xD3A0DC VA: 0xD3A0DC
	// RVA: 0x15DED10 Offset: 0x15DED10 VA: 0x15DED10
	private static bool <GetRaidType>m__12(BattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A0EC Offset: 0xD3A0EC VA: 0xD3A0EC
	// RVA: 0x15DED3C Offset: 0x15DED3C VA: 0x15DED3C
	private static bool <isAliveEntriesByForcedFlag>m__13(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A0FC Offset: 0xD3A0FC VA: 0xD3A0FC
	// RVA: 0x15DED48 Offset: 0x15DED48 VA: 0x15DED48
	private static bool <saveKnockdownEachWave>m__14(BattleServantData x) { }
}

// Namespace: 
public class BattleData.CommandHistory // TypeDefIndex: 8804
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCE740 Offset: 0xCCE740 VA: 0xCCE740
	public int uid; // 0x10
	[PackKeyAttribute] // RVA: 0xCCE778 Offset: 0xCCE778 VA: 0xCCE778
	public int ty; // 0x14

	// Methods

	// RVA: 0x1659348 Offset: 0x1659348 VA: 0x1659348
	public void .ctor() { }
}

// Namespace: 
public enum BattleData.WinResult // TypeDefIndex: 8805
{
	// Fields
	public int value__; // 0x0
	public const BattleData.WinResult None = 0;
	public const BattleData.WinResult Normal = 1;
	public const BattleData.WinResult TimeLimit = 2;
	public const BattleData.WinResult Lose = 3;
}

// Namespace: 
public enum BattleData.TYPETURN // TypeDefIndex: 8806
{
	// Fields
	public int value__; // 0x0
	public const BattleData.TYPETURN PLAYER = 1;
	public const BattleData.TYPETURN ENEMY = 2;
}

// Namespace: 
public enum BattleData.MULTI_TARGET_POS // TypeDefIndex: 8807
{
	// Fields
	public int value__; // 0x0
	public const BattleData.MULTI_TARGET_POS UP = 0;
	public const BattleData.MULTI_TARGET_POS CORE = 1;
	public const BattleData.MULTI_TARGET_POS UNDER = 2;
}

// Namespace: 
public enum BattleData.CHAIN_COUNT_TYPE // TypeDefIndex: 8808
{
	// Fields
	public int value__; // 0x0
	public const BattleData.CHAIN_COUNT_TYPE ARTS = 1;
	public const BattleData.CHAIN_COUNT_TYPE BUSTER = 2;
	public const BattleData.CHAIN_COUNT_TYPE QUICK = 3;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE = 4;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE_AND_ARTS = 5;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE_AND_BUSTER = 6;
	public const BattleData.CHAIN_COUNT_TYPE BRAVE_AND_QUICK = 7;
	public const BattleData.CHAIN_COUNT_TYPE TREASURE_DVC = 8;
}

// Namespace: 
public class BattleData.SaveData // TypeDefIndex: 8809
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCE7B0 Offset: 0xCCE7B0 VA: 0xCCE7B0
	public int initturn; // 0x10
	[PackKeyAttribute] // RVA: 0xCCE7E8 Offset: 0xCCE7E8 VA: 0xCCE7E8
	public int wavecount; // 0x14
	[PackKeyAttribute] // RVA: 0xCCE820 Offset: 0xCCE820 VA: 0xCCE820
	public int turnCount; // 0x18
	[PackKeyAttribute] // RVA: 0xCCE858 Offset: 0xCCE858 VA: 0xCCE858
	public int totalTurnCount; // 0x1C
	[PackKeyAttribute] // RVA: 0xCCE890 Offset: 0xCCE890 VA: 0xCCE890
	public int globaltargetId; // 0x20
	[PackKeyAttribute] // RVA: 0xCCE8C8 Offset: 0xCCE8C8 VA: 0xCCE8C8
	public int criticalstars; // 0x24
	[PackKeyAttribute] // RVA: 0xCCE900 Offset: 0xCCE900 VA: 0xCCE900
	public int totalCriticalstars; // 0x28
	[PackKeyAttribute] // RVA: 0xCCE938 Offset: 0xCCE938 VA: 0xCCE938
	public int addCriticalstars; // 0x2C
	[PackKeyAttribute] // RVA: 0xCCE970 Offset: 0xCCE970 VA: 0xCCE970
	public int subCriticalCount; // 0x30
	[PackKeyAttribute] // RVA: 0xCCE9A8 Offset: 0xCCE9A8 VA: 0xCCE9A8
	public int prevCriticalstars; // 0x34
	[PackKeyAttribute] // RVA: 0xCCE9E0 Offset: 0xCCE9E0 VA: 0xCCE9E0
	public bool isCalcCritical; // 0x38
	[PackKeyAttribute] // RVA: 0xCCEA18 Offset: 0xCCEA18 VA: 0xCCEA18
	public int[] commandCriticalArray; // 0x40
	[PackKeyAttribute] // RVA: 0xCCEA50 Offset: 0xCCEA50 VA: 0xCCEA50
	public int[] p_entryid; // 0x48
	[PackKeyAttribute] // RVA: 0xCCEA88 Offset: 0xCCEA88 VA: 0xCCEA88
	public int[] e_entryid; // 0x50
	[PackKeyAttribute] // RVA: 0xCCEAC0 Offset: 0xCCEAC0 VA: 0xCCEAC0
	public int[] master_infoId; // 0x58
	[PackKeyAttribute] // RVA: 0xCCEAF8 Offset: 0xCCEAF8 VA: 0xCCEAF8
	public int[] master_skillTurn; // 0x60
	[PackKeyAttribute] // RVA: 0xCCEB30 Offset: 0xCCEB30 VA: 0xCCEB30
	public int[] master_sealedTurn; // 0x68
	[PackKeyAttribute] // RVA: 0xCCEB68 Offset: 0xCCEB68 VA: 0xCCEB68
	public BattleData.CommandHistory[] history; // 0x70
	[PackKeyAttribute] // RVA: 0xCCEBA0 Offset: 0xCCEBA0 VA: 0xCCEBA0
	public BattleDropItem[] drop; // 0x78
	[PackKeyAttribute] // RVA: 0xCCEBD8 Offset: 0xCCEBD8 VA: 0xCCEBD8
	public int shuffleIndex; // 0x80
	[PackKeyAttribute] // RVA: 0xCCEC10 Offset: 0xCCEC10 VA: 0xCCEC10
	public BattleCommandData[] drawcard; // 0x88
	[PackKeyAttribute] // RVA: 0xCCEC48 Offset: 0xCCEC48 VA: 0xCCEC48
	public BattleCommandData[] shufflecard; // 0x90
	[PackKeyAttribute] // RVA: 0xCCEC80 Offset: 0xCCEC80 VA: 0xCCEC80
	public int randLogicCount; // 0x98
	[PackKeyAttribute] // RVA: 0xCCECB8 Offset: 0xCCECB8 VA: 0xCCECB8
	public int randGutsCount; // 0x9C
	[PackKeyAttribute] // RVA: 0xCCECF0 Offset: 0xCCECF0 VA: 0xCCECF0
	public Dictionary<string, object> voicePlayedList; // 0xA0
	[PackKeyAttribute] // RVA: 0xCCED28 Offset: 0xCCED28 VA: 0xCCED28
	public long bstate; // 0xA8
	[PackKeyAttribute] // RVA: 0xCCED60 Offset: 0xCCED60 VA: 0xCCED60
	public int[] usedTurnArray; // 0xB0
	[PackKeyAttribute] // RVA: 0xCCED98 Offset: 0xCCED98 VA: 0xCCED98
	public byte[] logHeader_MP; // 0xB8
	[PackKeyAttribute] // RVA: 0xCCEDD0 Offset: 0xCCEDD0 VA: 0xCCEDD0
	public byte[] logData_MP; // 0xC0
	[PackKeyAttribute] // RVA: 0xCCEE08 Offset: 0xCCEE08 VA: 0xCCEE08
	public BattleServantData.SaveData[] p_svlist_MP; // 0xC8
	[PackKeyAttribute] // RVA: 0xCCEE40 Offset: 0xCCEE40 VA: 0xCCEE40
	public BattleServantData.SaveData[] e_svlist_MP; // 0xD0
	[DisablePackAttribute] // RVA: 0xCCEE78 Offset: 0xCCEE78 VA: 0xCCEE78
	public string logHeader; // 0xD8
	[DisablePackAttribute] // RVA: 0xCCEE88 Offset: 0xCCEE88 VA: 0xCCEE88
	public string logData; // 0xE0
	[DisablePackAttribute] // RVA: 0xCCEE98 Offset: 0xCCEE98 VA: 0xCCEE98
	public Dictionary<string, object> p_svlist; // 0xE8
	[DisablePackAttribute] // RVA: 0xCCEEA8 Offset: 0xCCEEA8 VA: 0xCCEEA8
	public Dictionary<string, object> e_svlist; // 0xF0
	[PackKeyAttribute] // RVA: 0xCCEEB8 Offset: 0xCCEEB8 VA: 0xCCEEB8
	public BattleFieldData.SaveData[] savefield_datalist; // 0xF8
	[PackKeyAttribute] // RVA: 0xCCEEF0 Offset: 0xCCEEF0 VA: 0xCCEEF0
	public int maxEnemyUniqueID; // 0x100
	[PackKeyAttribute] // RVA: 0xCCEF28 Offset: 0xCCEF28 VA: 0xCCEF28
	public int maxEnemyIndex; // 0x104
	[PackKeyAttribute] // RVA: 0xCCEF60 Offset: 0xCCEF60 VA: 0xCCEF60
	public int progresslistflg; // 0x108
	[PackKeyAttribute] // RVA: 0xCCEF98 Offset: 0xCCEF98 VA: 0xCCEF98
	public BattlePerformanceBg.SaveData savebgData; // 0x110
	[PackKeyAttribute] // RVA: 0xCCEFD0 Offset: 0xCCEFD0 VA: 0xCCEFD0
	public int enemyMasterSpellUseCnt; // 0x118
	[PackKeyAttribute] // RVA: 0xCCF008 Offset: 0xCCF008 VA: 0xCCF008
	public long maxTurnDamage; // 0x120
	[PackKeyAttribute] // RVA: 0xCCF040 Offset: 0xCCF040 VA: 0xCCF040
	public string[] firstNpPlayUserSvtIdList; // 0x128
	[PackKeyAttribute] // RVA: 0xCCF078 Offset: 0xCCF078 VA: 0xCCF078
	public int[] firstNpPlaySeqIdList; // 0x130
	[PackKeyAttribute] // RVA: 0xCCF0B0 Offset: 0xCCF0B0 VA: 0xCCF0B0
	public BattleCommandData[] fixedCommands; // 0x138
	[PackKeyAttribute] // RVA: 0xCCF0E8 Offset: 0xCCF0E8 VA: 0xCCF0E8
	public int[] overrideBgmData; // 0x140
	[PackKeyAttribute] // RVA: 0xCCF120 Offset: 0xCCF120 VA: 0xCCF120
	public Dictionary<string, object> usedEventMasterSkillDict; // 0x148
	[PackKeyAttribute] // RVA: 0xCCF158 Offset: 0xCCF158 VA: 0xCCF158
	public int[] waveKnockdownNums; // 0x150
	[PackKeyAttribute] // RVA: 0xCCF190 Offset: 0xCCF190 VA: 0xCCF190
	public bool loseBattleFlg; // 0x158
	[PackKeyAttribute] // RVA: 0xCCF1C8 Offset: 0xCCF1C8 VA: 0xCCF1C8
	public int[] overwriteBgIndividuality; // 0x160
	[PackKeyAttribute] // RVA: 0xCCF200 Offset: 0xCCF200 VA: 0xCCF200
	public bool winBattleNotRelatedSurvivalStatusFlg; // 0x168
	[PackKeyAttribute] // RVA: 0xCCF238 Offset: 0xCCF238 VA: 0xCCF238
	public int attackIndex; // 0x16C
	[PackKeyAttribute] // RVA: 0xCCF270 Offset: 0xCCF270 VA: 0xCCF270
	public int[] joinCurTurnUniqueIds; // 0x170
	[PackKeyAttribute] // RVA: 0xCCF2A8 Offset: 0xCCF2A8 VA: 0xCCF2A8
	public int temporarySpell; // 0x178
	[PackKeyAttribute] // RVA: 0xCCF2E0 Offset: 0xCCF2E0 VA: 0xCCF2E0
	public bool[] enemyAppearValids; // 0x180
	[PackKeyAttribute] // RVA: 0xCCF318 Offset: 0xCCF318 VA: 0xCCF318
	public BattleDefenceTargetData.SaveData saveDefenceTargetData; // 0x188
	[PackKeyAttribute] // RVA: 0xCCF350 Offset: 0xCCF350 VA: 0xCCF350
	public long masterSkillUseWaveTurn; // 0x190
	[PackKeyAttribute] // RVA: 0xCCF388 Offset: 0xCCF388 VA: 0xCCF388
	public int[] skillShiftUniqueIds; // 0x198
	[PackKeyAttribute] // RVA: 0xCCF3C0 Offset: 0xCCF3C0 VA: 0xCCF3C0
	public long[] skillShiftNpcSvtIds; // 0x1A0
	[PackKeyAttribute] // RVA: 0xCCF3F8 Offset: 0xCCF3F8 VA: 0xCCF3F8
	public string[] voicePlayedOver64Info; // 0x1A8
	[PackKeyAttribute] // RVA: 0xCCF430 Offset: 0xCCF430 VA: 0xCCF430
	public Dictionary<string, object> chainCountDict; // 0x1B0
	[PackKeyAttribute] // RVA: 0xCCF468 Offset: 0xCCF468 VA: 0xCCF468
	public UseSkillEachTurn.SaveData useSkillEachTurn; // 0x1B8
	[PackKeyAttribute] // RVA: 0xCCF4A0 Offset: 0xCCF4A0 VA: 0xCCF4A0
	public BattleServantData.SaveData[] aiNpcSvts; // 0x1C0

	// Methods

	// RVA: 0x1659350 Offset: 0x1659350 VA: 0x1659350
	public void .ctor() { }
}

// Namespace: 
public enum BattleData.PROGRESS // TypeDefIndex: 8810
{
	// Fields
	public int value__; // 0x0
	public const BattleData.PROGRESS FIELDAI_WAVESTART = 1;
	public const BattleData.PROGRESS BOOSTITEM = 2;
	public const BattleData.PROGRESS WAVEBUFF = 4;
	public const BattleData.PROGRESS FIRST_ENTRY = 8;
	public const BattleData.PROGRESS ENEMYAI_WAVE = 16;
	public const BattleData.PROGRESS FIELDAI_TURNSTART = 32;
	public const BattleData.PROGRESS QUEST_BEHAVIOR = 64;
	public const BattleData.PROGRESS GIMMICK = 128;
	public const BattleData.PROGRESS BOOST_SKILL = 256;
	public const BattleData.PROGRESS ASSIST = 512;
	public const BattleData.PROGRESS FIELDAI_ENTRY = 1024;
	public const BattleData.PROGRESS PRECHECK_END_BATTLE = 2048;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFCE0 Offset: 0xCAFCE0 VA: 0xCAFCE0
private sealed class BattleData.<getMasterSkillInfo>c__AnonStorey2 // TypeDefIndex: 8811
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1659180 Offset: 0x1659180 VA: 0x1659180
	public void .ctor() { }

	// RVA: 0x1659188 Offset: 0x1659188 VA: 0x1659188
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFCF0 Offset: 0xCAFCF0 VA: 0xCAFCF0
private sealed class BattleData.<loadMasterSkill>c__AnonStorey3 // TypeDefIndex: 8812
{
	// Fields
	internal int[] addIdxs; // 0x10

	// Methods

	// RVA: 0x165925C Offset: 0x165925C VA: 0x165925C
	public void .ctor() { }

	// RVA: 0x1659264 Offset: 0x1659264 VA: 0x1659264
	internal int <>m__0(int a, int b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD00 Offset: 0xCAFD00 VA: 0xCAFD00
private sealed class BattleData.<getBoostSkillInfo>c__AnonStorey4 // TypeDefIndex: 8813
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x16590A4 Offset: 0x16590A4 VA: 0x16590A4
	public void .ctor() { }

	// RVA: 0x16590AC Offset: 0x16590AC VA: 0x16590AC
	internal bool <>m__0(BattleBoostItemInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD10 Offset: 0xCAFD10 VA: 0xCAFD10
private sealed class BattleData.<CheckFreshBuffDataList>c__AnonStorey5 // TypeDefIndex: 8814
{
	// Fields
	internal BuffEntity ent; // 0x10

	// Methods

	// RVA: 0x1658D6C Offset: 0x1658D6C VA: 0x1658D6C
	public void .ctor() { }

	// RVA: 0x1658D74 Offset: 0x1658D74 VA: 0x1658D74
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD20 Offset: 0xCAFD20 VA: 0xCAFD20
private sealed class BattleData.<GetAiNpcServantData>c__AnonStorey6 // TypeDefIndex: 8815
{
	// Fields
	internal int id; // 0x10

	// Methods

	// RVA: 0x1658DAC Offset: 0x1658DAC VA: 0x1658DAC
	public void .ctor() { }

	// RVA: 0x1658DB4 Offset: 0x1658DB4 VA: 0x1658DB4
	internal bool <>m__0(AiNpcBattleServantData data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD30 Offset: 0xCAFD30 VA: 0xCAFD30
private sealed class BattleData.<getPlayerServantIDList>c__AnonStorey7 // TypeDefIndex: 8816
{
	// Fields
	internal List<int> result; // 0x10

	// Methods

	// RVA: 0x16591D8 Offset: 0x16591D8 VA: 0x16591D8
	public void .ctor() { }

	// RVA: 0x16591E0 Offset: 0x16591E0 VA: 0x16591E0
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD40 Offset: 0xCAFD40 VA: 0xCAFD40
private sealed class BattleData.<GetRestockableSubServantArray>c__AnonStorey8 // TypeDefIndex: 8817
{
	// Fields
	internal int deckIndex; // 0x10

	// Methods

	// RVA: 0x1658DEC Offset: 0x1658DEC VA: 0x1658DEC
	public void .ctor() { }

	// RVA: 0x1658DF4 Offset: 0x1658DF4 VA: 0x1658DF4
	internal bool <>m__0(BattleServantData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD50 Offset: 0xCAFD50 VA: 0xCAFD50
private sealed class BattleData.<getFieldPlayerServantIDList>c__AnonStorey9 // TypeDefIndex: 8818
{
	// Fields
	internal List<int> result; // 0x10

	// Methods

	// RVA: 0x16590FC Offset: 0x16590FC VA: 0x16590FC
	public void .ctor() { }

	// RVA: 0x1659104 Offset: 0x1659104 VA: 0x1659104
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD60 Offset: 0xCAFD60 VA: 0xCAFD60
private sealed class BattleData.<loadQuest>c__AnonStoreyA // TypeDefIndex: 8819
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1659304 Offset: 0x1659304 VA: 0x1659304
	public void .ctor() { }

	// RVA: 0x165930C Offset: 0x165930C VA: 0x165930C
	internal bool <>m__0(BattleServantData.SaveData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD70 Offset: 0xCAFD70 VA: 0xCAFD70
private sealed class BattleData.<LoadAiNpcServant>c__AnonStoreyB // TypeDefIndex: 8820
{
	// Fields
	internal BattleDeckServantData deckSvt; // 0x10

	// Methods

	// RVA: 0x1658E58 Offset: 0x1658E58 VA: 0x1658E58
	public void .ctor() { }

	// RVA: 0x1658E60 Offset: 0x1658E60 VA: 0x1658E60
	internal bool <>m__0(BattleServantData.SaveData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD80 Offset: 0xCAFD80 VA: 0xCAFD80
private sealed class BattleData.<PartsIntoTheBodyDelay>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8821
{
	// Fields
	internal BattleData $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD47FC4 Offset: 0xD47FC4 VA: 0xD47FC4
	// RVA: 0x1658EB4 Offset: 0x1658EB4 VA: 0x1658EB4
	public void .ctor() { }

	// RVA: 0x1658EBC Offset: 0x1658EBC VA: 0x1658EBC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD47FD4 Offset: 0xD47FD4 VA: 0xD47FD4
	// RVA: 0x1658FD0 Offset: 0x1658FD0 VA: 0x1658FD0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD47FE4 Offset: 0xD47FE4 VA: 0xD47FE4
	// RVA: 0x1658FD8 Offset: 0x1658FD8 VA: 0x1658FD8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD47FF4 Offset: 0xD47FF4 VA: 0xD47FF4
	// RVA: 0x1658FE0 Offset: 0x1658FE0 VA: 0x1658FE0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48004 Offset: 0xD48004 VA: 0xD48004
	// RVA: 0x1658FF4 Offset: 0x1658FF4 VA: 0x1658FF4 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFD90 Offset: 0xCAFD90 VA: 0xCAFD90
private sealed class BattleData.<RefreshAllSubServantDeckIndex>c__AnonStorey1 // TypeDefIndex: 8822
{
	// Fields
	internal int deckIndex; // 0x10

	// Methods

	// RVA: 0x165905C Offset: 0x165905C VA: 0x165905C
	public void .ctor() { }

	// RVA: 0x1659064 Offset: 0x1659064 VA: 0x1659064
	internal void <>m__0(BattleServantData x) { }
}

// Namespace: 
public class QuestKnockdownInfo // TypeDefIndex: 8823
{
	// Fields
	public long knockdownNum; // 0x10
	public long totalDamage; // 0x18

	// Methods

	// RVA: 0x1743638 Offset: 0x1743638 VA: 0x1743638
	public void .ctor() { }

	// RVA: 0x1743660 Offset: 0x1743660 VA: 0x1743660
	public void init() { }
}

// Namespace: 
public class QuestKnockdownResult // TypeDefIndex: 8824
{
	// Fields
	public bool isNewRecord; // 0x10
	public bool isTrialOpen; // 0x11
	public QuestKnockdownInfo current; // 0x18
	public QuestKnockdownInfo record; // 0x20

	// Methods

	// RVA: 0x1743668 Offset: 0x1743668 VA: 0x1743668
	public void .ctor(bool isRecord, BattleData data) { }
}

// Namespace: 
public class FieldAliveServantData // TypeDefIndex: 8825
{
	// Fields
	public List<BattleServantData> playerIdList; // 0x10
	public List<BattleServantData> enemyIdList; // 0x18

	// Methods

	// RVA: 0x18FBFE0 Offset: 0x18FBFE0 VA: 0x18FBFE0
	public void .ctor() { }

	// RVA: 0x18FC070 Offset: 0x18FC070 VA: 0x18FC070
	public void addSvtData(bool isEnemySide, BattleServantData svtData) { }

	// RVA: 0x18FC0F4 Offset: 0x18FC0F4 VA: 0x18FC0F4
	public List<BattleServantData> getTargetSideSvtDataList(bool isEnemySide) { }
}

// Namespace: 
public class SimpleHpData // TypeDefIndex: 8826
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCF4D8 Offset: 0xCCF4D8 VA: 0xCCF4D8
	[DebuggerBrowsableAttribute] // RVA: 0xCCF4D8 Offset: 0xCCF4D8 VA: 0xCCF4D8
	private int <Hp>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCF514 Offset: 0xCCF514 VA: 0xCCF514
	[DebuggerBrowsableAttribute] // RVA: 0xCCF514 Offset: 0xCCF514 VA: 0xCCF514
	private int <MaxHp>k__BackingField; // 0x14

	// Properties
	public int Hp { get; set; }
	public int MaxHp { get; set; }
	public int TotalDamage { get; }

	// Methods

	// RVA: 0x1A5AC2C Offset: 0x1A5AC2C VA: 0x1A5AC2C
	public void .ctor(BattleServantData svtData) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A10C Offset: 0xD3A10C VA: 0xD3A10C
	// RVA: 0x1A5AC9C Offset: 0x1A5AC9C VA: 0x1A5AC9C
	private void set_Hp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A11C Offset: 0xD3A11C VA: 0xD3A11C
	// RVA: 0x1A5ACAC Offset: 0x1A5ACAC VA: 0x1A5ACAC
	public int get_Hp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A12C Offset: 0xD3A12C VA: 0xD3A12C
	// RVA: 0x1A5ACA4 Offset: 0x1A5ACA4 VA: 0x1A5ACA4
	private void set_MaxHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A13C Offset: 0xD3A13C VA: 0xD3A13C
	// RVA: 0x1A5ACB4 Offset: 0x1A5ACB4 VA: 0x1A5ACB4
	public int get_MaxHp() { }

	// RVA: 0x1A5ACBC Offset: 0x1A5ACBC VA: 0x1A5ACBC
	public int get_TotalDamage() { }
}

// Namespace: 
public class EnemySimpleHpData : SimpleHpData // TypeDefIndex: 8827
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCF550 Offset: 0xCCF550 VA: 0xCCF550
	[DebuggerBrowsableAttribute] // RVA: 0xCCF550 Offset: 0xCCF550 VA: 0xCCF550
	private int <NextTpTurn>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCF58C Offset: 0xCCF58C VA: 0xCCF58C
	[DebuggerBrowsableAttribute] // RVA: 0xCCF58C Offset: 0xCCF58C VA: 0xCCF58C
	private int <MaxTpTurn>k__BackingField; // 0x1C

	// Properties
	public int NextTpTurn { get; set; }
	public int MaxTpTurn { get; set; }

	// Methods

	// RVA: 0x1CD1CC8 Offset: 0x1CD1CC8 VA: 0x1CD1CC8
	public void .ctor(BattleServantData svtData) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A14C Offset: 0xD3A14C VA: 0xD3A14C
	// RVA: 0x1CD1D24 Offset: 0x1CD1D24 VA: 0x1CD1D24
	private void set_NextTpTurn(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A15C Offset: 0xD3A15C VA: 0xD3A15C
	// RVA: 0x1CD1D34 Offset: 0x1CD1D34 VA: 0x1CD1D34
	public int get_NextTpTurn() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A16C Offset: 0xD3A16C VA: 0xD3A16C
	// RVA: 0x1CD1D2C Offset: 0x1CD1D2C VA: 0x1CD1D2C
	private void set_MaxTpTurn(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A17C Offset: 0xD3A17C VA: 0xD3A17C
	// RVA: 0x1CD1D3C Offset: 0x1CD1D3C VA: 0x1CD1D3C
	public int get_MaxTpTurn() { }
}

// Namespace: 
public struct SimpleSkillData // TypeDefIndex: 8828
{
	// Fields
	public int id; // 0x0
	public int lv; // 0x4

	// Methods

	// RVA: 0xDC4454 Offset: 0xDC4454 VA: 0xDC4454
	public void .ctor(int skillId, int skillLv = 1) { }
}

// Namespace: 
public class DisplayEffectInheritData // TypeDefIndex: 8829
{
	// Fields
	public Dictionary<int, float> popTiming; // 0x10
	private bool isSetNextPossibleTime; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCF5C8 Offset: 0xCCF5C8 VA: 0xCCF5C8
	[DebuggerBrowsableAttribute] // RVA: 0xCCF5C8 Offset: 0xCCF5C8 VA: 0xCCF5C8
	private float <EffectInterval>k__BackingField; // 0x1C

	// Properties
	public float EffectInterval { get; set; }

	// Methods

	// RVA: 0x16300BC Offset: 0x16300BC VA: 0x16300BC
	public void .ctor(float interval = 0.3, bool isSetNextPossibleTime = True) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A18C Offset: 0xD3A18C VA: 0xD3A18C
	// RVA: 0x163015C Offset: 0x163015C VA: 0x163015C
	private void set_EffectInterval(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A19C Offset: 0xD3A19C VA: 0xD3A19C
	// RVA: 0x1630164 Offset: 0x1630164 VA: 0x1630164
	public float get_EffectInterval() { }

	// RVA: 0x163016C Offset: 0x163016C VA: 0x163016C
	public float GetNextEffectDelay(int targetId, BattleServantData svtData, int delayNum = 0, bool isSetInterval = True, bool isSetNextTime = True) { }

	// RVA: 0x1630308 Offset: 0x1630308 VA: 0x1630308
	public float GetMaxInterval() { }
}

// Namespace: 
public class DisplayEffectArgument // TypeDefIndex: 8830
{
	// Fields
	public GameObject actObj; // 0x10
	public int funcIndex; // 0x18
	public BattleActionData actData; // 0x20
	public bool isCommandAfter; // 0x28
	public bool isTreasureDevice; // 0x29
	public string attachNodeName; // 0x30
	public bool ispopAdjustment; // 0x38
	public Vector3 buffOffset; // 0x3C
	public Vector3 popupOffset; // 0x48
	public int[] overwriteEffectIds; // 0x58
	public int[] fieldIndiv; // 0x60

	// Methods

	// RVA: 0x162FED0 Offset: 0x162FED0 VA: 0x162FED0
	public void .ctor(GameObject actObj, int funcIndex, BattleActionData actData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", bool ispopAdjustment = False) { }

	// RVA: 0x1630008 Offset: 0x1630008 VA: 0x1630008
	public DisplayEffectArgument SetBuffParam(Vector3 buffOffset, Vector3 popupOffset, int[] overwriteEffectIds, int[] fieldIndiv) { }
}

// Namespace: 
public class BattleInfoOffsetPosData // TypeDefIndex: 8831
{
	// Fields
	protected GameObject obj; // 0x10
