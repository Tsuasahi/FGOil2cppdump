	private static Converter<BattleServantData, BattleServantData.ConnectData> <>f__am$cacheD; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC6199C Offset: 0xC6199C VA: 0xC6199C
	private static Func<object, int> <>f__mg$cache0; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC619AC Offset: 0xC619AC VA: 0xC619AC
	private static Func<string, BattleData.CHAIN_COUNT_TYPE> <>f__am$cacheE; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xC619BC Offset: 0xC619BC VA: 0xC619BC
	private static Comparison<BattleServantData> <>f__am$cacheF; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC619CC Offset: 0xC619CC VA: 0xC619CC
	private static Func<BattleServantData, bool> <>f__am$cache10; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xC619DC Offset: 0xC619DC VA: 0xC619DC
	private static Func<BattleServantData, bool> <>f__am$cache11; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xC619EC Offset: 0xC619EC VA: 0xC619EC
	private static Func<int, bool> <>f__am$cache12; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC619FC Offset: 0xC619FC VA: 0xC619FC
	private static Func<BattleServantData, bool> <>f__am$cache13; // 0xC0

	// Properties
	public List<AiNpcBattleServantData> AiNpcDataList { get; }
	public bool IsReleaseUnusedAssetsWhenEntryMember { get; set; }
	public SubBgmPlayArgs[] CurrentSubBgmArgsArray { get; set; }
	public float AccelSystemTimeScale { get; }
	public int EnemyFieldPosCount { get; set; }
	public bool IsEnemyPosCountNormal { get; }
	public int[] EnemyAddOrderPosArray { get; set; }
	public int eventId { get; }
	public int[][] VoicePlayedList { get; }
	public bool AddAttack { get; }
	public bool IsHighspeedTd { get; }

	// Methods

	// RVA: 0x1047A38 Offset: 0x1047A38 VA: 0x1047A38
	public void .ctor() { }

	// RVA: 0x1047E64 Offset: 0x1047E64 VA: 0x1047E64
	public List<AiNpcBattleServantData> get_AiNpcDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC928 Offset: 0xCCC928 VA: 0xCCC928
	// RVA: 0x1047E6C Offset: 0x1047E6C VA: 0x1047E6C
	public bool get_IsReleaseUnusedAssetsWhenEntryMember() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC938 Offset: 0xCCC938 VA: 0xCCC938
	// RVA: 0x1047E74 Offset: 0x1047E74 VA: 0x1047E74
	private void set_IsReleaseUnusedAssetsWhenEntryMember(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC948 Offset: 0xCCC948 VA: 0xCCC948
	// RVA: 0x1047E80 Offset: 0x1047E80 VA: 0x1047E80
	public SubBgmPlayArgs[] get_CurrentSubBgmArgsArray() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC958 Offset: 0xCCC958 VA: 0xCCC958
	// RVA: 0x1047E88 Offset: 0x1047E88 VA: 0x1047E88
	private void set_CurrentSubBgmArgsArray(SubBgmPlayArgs[] value) { }

	// RVA: 0x1047E90 Offset: 0x1047E90 VA: 0x1047E90
	public bool IsRetryable() { }

	// RVA: 0x1047E98 Offset: 0x1047E98 VA: 0x1047E98
	public float get_AccelSystemTimeScale() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC968 Offset: 0xCCC968 VA: 0xCCC968
	// RVA: 0x1047EA4 Offset: 0x1047EA4 VA: 0x1047EA4
	private void set_EnemyFieldPosCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC978 Offset: 0xCCC978 VA: 0xCCC978
	// RVA: 0x1047EAC Offset: 0x1047EAC VA: 0x1047EAC
	public int get_EnemyFieldPosCount() { }

	// RVA: 0x1047EB4 Offset: 0x1047EB4 VA: 0x1047EB4
	public bool get_IsEnemyPosCountNormal() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC988 Offset: 0xCCC988 VA: 0xCCC988
	// RVA: 0x1047EC4 Offset: 0x1047EC4 VA: 0x1047EC4
	private void set_EnemyAddOrderPosArray(int[] value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC998 Offset: 0xCCC998 VA: 0xCCC998
	// RVA: 0x1047ECC Offset: 0x1047ECC VA: 0x1047ECC
	public int[] get_EnemyAddOrderPosArray() { }

	// RVA: 0x1047ED4 Offset: 0x1047ED4 VA: 0x1047ED4
	public int get_eventId() { }

	// RVA: 0x1047F00 Offset: 0x1047F00 VA: 0x1047F00
	public void addLoadedCommonEffectPath(string[] pathArray) { }

	// RVA: 0x1047F70 Offset: 0x1047F70 VA: 0x1047F70
	public string[] getLoadedCommonEffectPath(bool isClear = False) { }

	// RVA: 0x1048010 Offset: 0x1048010 VA: 0x1048010
	public long GetCurrentUniqueWaveTurn() { }

	// RVA: 0x1048020 Offset: 0x1048020 VA: 0x1048020
	public bool EqualCurrentUniqueWaveTurn(long compWaveTurn) { }

	// RVA: 0x1048058 Offset: 0x1048058 VA: 0x1048058
	public void AddUseSkillId(int skillId) { }

	// RVA: 0x10480B4 Offset: 0x10480B4 VA: 0x10480B4
	public void SetBattleEntity(BattleEntity battleEntity) { }

	// RVA: 0x10480BC Offset: 0x10480BC VA: 0x10480BC
	public bool recordEventMasterSkillUsing(int skillId) { }

	// RVA: 0x10481F8 Offset: 0x10481F8 VA: 0x10481F8
	private Dictionary<string, object> convertUsedEventMasterSkillDictFormatSave() { }

	// RVA: 0x10483E8 Offset: 0x10483E8 VA: 0x10483E8
	private Dictionary<int, int> convertUsedEventMasterSkillDictFormatGamePlaying(Dictionary<string, object> dict) { }

	// RVA: 0x10485E4 Offset: 0x10485E4 VA: 0x10485E4
	public bool isEventActivityPoint() { }

	// RVA: 0x1048714 Offset: 0x1048714 VA: 0x1048714
	public Dictionary<int, int> getUsedEventMasterSkillDict() { }

	// RVA: 0x104871C Offset: 0x104871C VA: 0x104871C
	public int getEventActivityPoint(int masterSkillId) { }

	// RVA: 0x104894C Offset: 0x104894C VA: 0x104894C
	public int getUsedEventMasterSkillEventActivityPoint() { }

	// RVA: 0x1048AC0 Offset: 0x1048AC0 VA: 0x1048AC0
	private void updateEventActivityGauge(int point) { }

	// RVA: 0x1048AF8 Offset: 0x1048AF8 VA: 0x1048AF8
	public bool checkEnablePlaySpeedOneFromSkillIdList(int id) { }

	// RVA: 0x1048BE0 Offset: 0x1048BE0 VA: 0x1048BE0
	public bool checkEnablePlaySpeedOneFromFieldIdList(int id, int idx) { }

	// RVA: 0x1048D58 Offset: 0x1048D58 VA: 0x1048D58
	public void setOverrideBgmData(int bgmId) { }

	// RVA: 0x1048E20 Offset: 0x1048E20 VA: 0x1048E20
	public void resetOverrideBgmData() { }

	// RVA: 0x1048E28 Offset: 0x1048E28 VA: 0x1048E28
	public bool checkAndGetOverrideBgm(out int bgmId) { }

	// RVA: 0x1048EC4 Offset: 0x1048EC4 VA: 0x1048EC4
	public int[][] get_VoicePlayedList() { }

	// RVA: 0x1049388 Offset: 0x1049388 VA: 0x1049388
	public void AddServantVoicePlayed(int svtId, string labelName) { }

	// RVA: 0x104286C Offset: 0x104286C VA: 0x104286C
	public void AddServantVoicePlayed(int svtId, int condValue) { }

	// RVA: 0x1049494 Offset: 0x1049494 VA: 0x1049494
	public void removeServantVoicePlayed(int svtId, int condValue) { }

	// RVA: 0x104965C Offset: 0x104965C VA: 0x104965C
	public bool checkServantVoicePlayed(int svtId, int condValue) { }

	// RVA: 0x10497F8 Offset: 0x10497F8 VA: 0x10497F8
	public void Initialize() { }

	// RVA: 0x104A38C Offset: 0x104A38C VA: 0x104A38C
	public void InitializeForWarBoard(BattleInfoData battleInfo) { }

	// RVA: 0x104A6A8 Offset: 0x104A6A8 VA: 0x104A6A8
	public void loadFsmGameObject() { }

	// RVA: 0x104A774 Offset: 0x104A774 VA: 0x104A774
	public void createCommandCard() { }

	// RVA: 0x104ACF0 Offset: 0x104ACF0 VA: 0x104ACF0
	public void replaceCommandCard(int inUniqueID, int outUniqueID) { }

	// RVA: 0x104B7C8 Offset: 0x104B7C8 VA: 0x104B7C8
	public int getChangeType(int[] outList, int[] inList, int targetType, out int hitIndex) { }

	// RVA: 0x104B8C8 Offset: 0x104B8C8 VA: 0x104B8C8
	public void transformSvtCommand(BattleServantData svtData) { }

	// RVA: 0x104BB1C Offset: 0x104BB1C VA: 0x104BB1C
	public BattleEntity getBattleEntity() { }

	// RVA: 0x104BB24 Offset: 0x104BB24 VA: 0x104BB24
	public QuestEntity getQuestEntity() { }

	// RVA: 0x104BB2C Offset: 0x104BB2C VA: 0x104BB2C
	public bool IsWarBoard() { }

	// RVA: 0x104BC18 Offset: 0x104BC18 VA: 0x104BC18
	public StageEntity getStageEntity() { }

	// RVA: 0x104BC60 Offset: 0x104BC60 VA: 0x104BC60
	public CommandCodeInfo getUserCommandCode(long userCommandCodeId) { }

	// RVA: 0x104BC98 Offset: 0x104BC98 VA: 0x104BC98
	public void procPlayerContinue(bool isProgress) { }

	// RVA: 0x104D1A4 Offset: 0x104D1A4 VA: 0x104D1A4
	public bool isResumeBattle() { }

	// RVA: 0x104D1AC Offset: 0x104D1AC VA: 0x104D1AC
	public bool isFirstStage() { }

	// RVA: 0x104D1BC Offset: 0x104D1BC VA: 0x104D1BC
	public bool isLastStage() { }

	// RVA: 0x104D1F4 Offset: 0x104D1F4 VA: 0x104D1F4
	public int getLastWave() { }

	// RVA: 0x104D224 Offset: 0x104D224 VA: 0x104D224
	public int getDispWaveCount() { }

	// RVA: 0x104D230 Offset: 0x104D230 VA: 0x104D230
	public BattleInfoData getBattleInfo() { }

	// RVA: 0x104D238 Offset: 0x104D238 VA: 0x104D238
	public int getRaidDay(int uniqueId) { }

	// RVA: 0x104D270 Offset: 0x104D270 VA: 0x104D270
	public void setDeadLeader(bool flg) { }

	// RVA: 0x104D27C Offset: 0x104D27C VA: 0x104D27C
	public bool isDeadLeader() { }

	// RVA: 0x104D284 Offset: 0x104D284 VA: 0x104D284
	public bool isEndBattle() { }

	// RVA: 0x104D28C Offset: 0x104D28C VA: 0x104D28C
	public bool IsEndWaveBattle() { }

	// RVA: 0x104D52C Offset: 0x104D52C VA: 0x104D52C
	public bool IsEndAllWaveBattle() { }

	// RVA: 0x104D5C4 Offset: 0x104D5C4 VA: 0x104D5C4
	public bool isLoseBattle() { }

	// RVA: 0x104D314 Offset: 0x104D314 VA: 0x104D314
	public bool isWinBattleNotRelatedSurvivalStatus() { }

	// RVA: 0x104D5CC Offset: 0x104D5CC VA: 0x104D5CC
	public bool isSkipDead(BattleServantData svtData) { }

	// RVA: 0x104D670 Offset: 0x104D670 VA: 0x104D670
	public int getGroundNo() { }

	// RVA: 0x104D76C Offset: 0x104D76C VA: 0x104D76C
	public int getQuestId() { }

	// RVA: 0x104D798 Offset: 0x104D798 VA: 0x104D798
	public int getPhase() { }

	// RVA: 0x104D7C4 Offset: 0x104D7C4 VA: 0x104D7C4
	public int getGroundType() { }

	// RVA: 0x104D7F0 Offset: 0x104D7F0 VA: 0x104D7F0
	public int getResultBgmId(int defVal) { }

	// RVA: 0x104D828 Offset: 0x104D828 VA: 0x104D828
	public bool isFadeOutBgmBeforeMovie() { }

	// RVA: 0x104D858 Offset: 0x104D858 VA: 0x104D858
	public int getLeave(int defVal) { }

	// RVA: 0x104D890 Offset: 0x104D890 VA: 0x104D890
	public int[] getResultEnemyVoiceIds() { }

	// RVA: 0x104D8C0 Offset: 0x104D8C0 VA: 0x104D8C0
	public int getQuestPhaseScript(string key, int defaultValue) { }

	// RVA: 0x104D908 Offset: 0x104D908 VA: 0x104D908
	public int[] getEventGroupIds() { }

	// RVA: 0x104D938 Offset: 0x104D938 VA: 0x104D938
	public int GetGimmickId() { }

	// RVA: 0x104D968 Offset: 0x104D968 VA: 0x104D968
	public int GetGimmickSvtId() { }

	// RVA: 0x104D998 Offset: 0x104D998 VA: 0x104D998
	public int[] GetReelIconArray() { }

	// RVA: 0x104D9C8 Offset: 0x104D9C8 VA: 0x104D9C8
	public int[] GetGimmickSkillRateArray() { }

	// RVA: 0x104D9F8 Offset: 0x104D9F8 VA: 0x104D9F8
	public int[] GetGimmickSkillIdArray() { }

	// RVA: 0x104DA28 Offset: 0x104DA28 VA: 0x104DA28
	public int[] GetGimmickAnimTypeArray() { }

	// RVA: 0x104DA58 Offset: 0x104DA58 VA: 0x104DA58
	public string[] GetGimmickStartVoiceArray() { }

	// RVA: 0x104DA88 Offset: 0x104DA88 VA: 0x104DA88
	public object[] GetGimmickResultVoiceArray() { }

	// RVA: 0x104DAB8 Offset: 0x104DAB8 VA: 0x104DAB8
	public int[] GetMultiEffectIds() { }

	// RVA: 0x104DAE8 Offset: 0x104DAE8 VA: 0x104DAE8
	public bool IsBattleStartFadeIn() { }

	// RVA: 0x104DB24 Offset: 0x104DB24 VA: 0x104DB24
	public bool IsBattleStartFadeOff() { }

	// RVA: 0x104DB60 Offset: 0x104DB60 VA: 0x104DB60
	public int GetEffectSvtId() { }

	// RVA: 0x104DB90 Offset: 0x104DB90 VA: 0x104DB90
	public int[] GetCutInSvtIds(bool isEnemy) { }

	// RVA: 0x104DBC8 Offset: 0x104DBC8 VA: 0x104DBC8
	public bool IsOffWinVoice() { }

	// RVA: 0x104DC04 Offset: 0x104DC04 VA: 0x104DC04
	public int GetFinishEffectId() { }

	// RVA: 0x104DC34 Offset: 0x104DC34 VA: 0x104DC34
	public int GetEffectBgmId() { }

	// RVA: 0x104DC64 Offset: 0x104DC64 VA: 0x104DC64
	public bool IsStartBgmOff() { }

	// RVA: 0x104DCA0 Offset: 0x104DCA0 VA: 0x104DCA0
	public bool IsWinBgmOff() { }

	// RVA: 0x104DCDC Offset: 0x104DCDC VA: 0x104DCDC
	public bool IsKeepSubBgmAfterBattleResult() { }

	// RVA: 0x104DD0C Offset: 0x104DD0C VA: 0x104DD0C
	public bool IsDeckNoUserSvt() { }

	// RVA: 0x104E120 Offset: 0x104E120 VA: 0x104E120
	public int GetContinueCount() { }

	// RVA: 0x104E128 Offset: 0x104E128 VA: 0x104E128
	public void SuccessContinue() { }

	// RVA: 0x104E20C Offset: 0x104E20C VA: 0x104E20C
	public Color getGroundShadowColor() { }

	// RVA: 0x104E234 Offset: 0x104E234 VA: 0x104E234
	public int[] getQuestIndividualities() { }

	// RVA: 0x104E654 Offset: 0x104E654 VA: 0x104E654
	public int[] getQuestIndividualitiesIgnoreServant() { }

	// RVA: 0x104E790 Offset: 0x104E790 VA: 0x104E790
	public void updateOverwriteBgIndividuality(int bgId, int bgType) { }

	// RVA: 0x104D564 Offset: 0x104D564 VA: 0x104D564
	public bool existsNextBattle() { }

	// RVA: 0x104E840 Offset: 0x104E840 VA: 0x104E840
	public int setTargetIndex(int index) { }

	// RVA: 0x104EA48 Offset: 0x104EA48 VA: 0x104EA48
	public int GetTargetId() { }

	// RVA: 0x104EA50 Offset: 0x104EA50 VA: 0x104EA50
	public BattleServantData getEnemyServantDataIndex(int index) { }

	// RVA: 0x104EAD0 Offset: 0x104EAD0 VA: 0x104EAD0
	public BattleServantData getServantDataFromIndex(int index, bool isEnemy) { }

	// RVA: 0x104EB84 Offset: 0x104EB84 VA: 0x104EB84
	public BattleServantData getAliveServantDataFromIndex(int index, bool isEnemy) { }

	// RVA: 0x104EBC8 Offset: 0x104EBC8 VA: 0x104EBC8
	public int[] getEntryIdArray(bool isEnemy) { }

	// RVA: 0x104EBE0 Offset: 0x104EBE0 VA: 0x104EBE0
	public bool IsEntry(int deckIndex, bool isEnemy) { }

	// RVA: 0x104EC60 Offset: 0x104EC60 VA: 0x104EC60
	public bool SetEntry(BattleServantData servantData, int deckIndex) { }

	// RVA: 0x104ED34 Offset: 0x104ED34 VA: 0x104ED34
	public void RemoveEntry(BattleServantData servantData) { }

	// RVA: 0x104EDEC Offset: 0x104EDEC VA: 0x104EDEC
	public void FreeEntryByIndex(int deckIndex, bool isEnemy) { }

	// RVA: 0x104EEAC Offset: 0x104EEAC VA: 0x104EEAC
	private List<BattleServantData> GetBattleServantDataList(bool isEnemy) { }

	// RVA: 0x104EEC4 Offset: 0x104EEC4 VA: 0x104EEC4
	public int GetSubServantUsableDeckIndex(bool isEnemy) { }

	// RVA: 0x104F260 Offset: 0x104F260 VA: 0x104F260
	public void RefreshAllSubServantDeckIndex() { }

	// RVA: 0x104F224 Offset: 0x104F224 VA: 0x104F224
	private int GetSubDeckMinDeckIndex(bool isEnemy) { }

	// RVA: 0x104F330 Offset: 0x104F330 VA: 0x104F330
	public List<RestockServantLogic> GetRestockServantLogicList() { }

	// RVA: 0x104F444 Offset: 0x104F444 VA: 0x104F444
	public void AppendRestockServantLogic(RestockServantLogic restockServantLogic) { }

	// RVA: 0x104F4B4 Offset: 0x104F4B4 VA: 0x104F4B4
	public void ClearRestockServantLogic() { }

	// RVA: 0x104F514 Offset: 0x104F514 VA: 0x104F514
	public int getServantIndex(bool isEnemy, int uniqueId) { }

	// RVA: 0x104F5A0 Offset: 0x104F5A0 VA: 0x104F5A0
	public int getMasterUserEquipId() { }

	// RVA: 0x104F5CC Offset: 0x104F5CC VA: 0x104F5CC
	public int getMasterEquipId() { }

	// RVA: 0x104F6C0 Offset: 0x104F6C0 VA: 0x104F6C0
	public void turnProgressing() { }

	// RVA: 0x104FBB4 Offset: 0x104FBB4 VA: 0x104FBB4
	public BattleSkillInfoData[] getMasterSkillInfos() { }

	// RVA: 0x104FC14 Offset: 0x104FC14 VA: 0x104FC14
	public BattleSkillInfoData getMasterSkillInfo(int index) { }

	// RVA: 0x104FCE4 Offset: 0x104FCE4 VA: 0x104FCE4
	public void useMasterSkill(BattleSkillInfoData skillInfo) { }

	// RVA: 0x104FE38 Offset: 0x104FE38 VA: 0x104FE38
	public void loadMasterSkill() { }

	// RVA: 0x1050ECC Offset: 0x1050ECC VA: 0x1050ECC
	private bool tryOverwriteEventEquipSkill(out int[] skillIds, out int[] skillLvs, out int masterIconId) { }

	// RVA: 0x1051178 Offset: 0x1051178 VA: 0x1051178
	public void addMasterSkillInfo(BattleSkillInfoData.TYPE type, int index, int skillId, int skillLv, int condId, bool isAdd) { }

	// RVA: 0x105136C Offset: 0x105136C VA: 0x105136C
	public bool IsMasterSkillOverWritten() { }

	// RVA: 0x105137C Offset: 0x105137C VA: 0x105137C
	public bool IsShowMasterSkillCutIn() { }

	// RVA: 0x1051384 Offset: 0x1051384 VA: 0x1051384
	public void loadBoostSkill() { }

	// RVA: 0x10517FC Offset: 0x10517FC VA: 0x10517FC
	private void SetBoostInfo(SkillMaster skillMaster) { }

	// RVA: 0x10516C8 Offset: 0x10516C8 VA: 0x10516C8
	private bool IsFriendChocolateQuest() { }

	// RVA: 0x1051A44 Offset: 0x1051A44 VA: 0x1051A44
	public BattleSkillInfoData getBoostSkillInfo(int index) { }

	// RVA: 0x1051B14 Offset: 0x1051B14 VA: 0x1051B14
	public void addDropItems(DropInfo item) { }

	// RVA: 0x1051BBC Offset: 0x1051BBC VA: 0x1051BBC
	public BattleDropItem[] getDropItems() { }

	// RVA: 0x1051C1C Offset: 0x1051C1C VA: 0x1051C1C
	public void clearLastActionActor() { }

	// RVA: 0x1051C24 Offset: 0x1051C24 VA: 0x1051C24
	public void setLastActionActor(BattleActionData adata) { }

	// RVA: 0x1051C58 Offset: 0x1051C58 VA: 0x1051C58
	public int getLastActionActor() { }

	// RVA: 0x1051C60 Offset: 0x1051C60 VA: 0x1051C60
	public void setInitCommandBattle() { }

	// RVA: 0x1051C6C Offset: 0x1051C6C VA: 0x1051C6C
	public void setCommandAttack(int actId, int targetId) { }

	// RVA: 0x1051C80 Offset: 0x1051C80 VA: 0x1051C80
	public bool isPrevAttackMe(int actId, int targetId) { }

	// RVA: 0x104BF84 Offset: 0x104BF84 VA: 0x104BF84
	public void shuffleCommand() { }

	// RVA: 0x1051CA4 Offset: 0x1051CA4 VA: 0x1051CA4
	public BattleCommandData getShuffleCommand() { }

	// RVA: 0x1051D38 Offset: 0x1051D38 VA: 0x1051D38
	public void setCommandData(BattleCommandData[] list) { }

	// RVA: 0x1051D48 Offset: 0x1051D48 VA: 0x1051D48
	public void setComboData(BattleComboData incombo) { }

	// RVA: 0x1051D50 Offset: 0x1051D50 VA: 0x1051D50
	public void AddChainCount() { }

	// RVA: 0x1051E9C Offset: 0x1051E9C VA: 0x1051E9C
	private void AddChainCount(BattleData.CHAIN_COUNT_TYPE chainCountType) { }

	// RVA: 0x1051FAC Offset: 0x1051FAC VA: 0x1051FAC
	public BattleCommandData[] getSelectCommands() { }

	// RVA: 0x1051FB4 Offset: 0x1051FB4 VA: 0x1051FB4
	public BattleCommandData getSelectCommand(int index) { }

	// RVA: 0x1052008 Offset: 0x1052008 VA: 0x1052008
	public BattleComboData getSelectCombo() { }

	// RVA: 0x1052010 Offset: 0x1052010 VA: 0x1052010
	public void shuffleCanSelectCommand() { }

	// RVA: 0x1052184 Offset: 0x1052184 VA: 0x1052184
	public BattleCommandData getShuffleSelectedCommand() { }

	// RVA: 0x1052218 Offset: 0x1052218 VA: 0x1052218
	public bool get_AddAttack() { }

	// RVA: 0x1052238 Offset: 0x1052238 VA: 0x1052238
	public void SetFixCommandData(BattleCommandData[] commands) { }

	// RVA: 0x1052240 Offset: 0x1052240 VA: 0x1052240
	public BattleCommandData[] GetFixedCommandDatas() { }

	// RVA: 0x1052248 Offset: 0x1052248 VA: 0x1052248
	public bool IsFixedCommandData() { }

	// RVA: 0x1052320 Offset: 0x1052320 VA: 0x1052320
	public BattleBuffData.BuffData GetMaximumTurnFixedBuff() { }

	// RVA: 0x1052484 Offset: 0x1052484 VA: 0x1052484
	public void SubBuffFromPT(int uniqueId, int[] indivi) { }

	// RVA: 0x10525E4 Offset: 0x10525E4 VA: 0x10525E4
	public void SubBuff(string key, BattleServantData targetSvt) { }

	// RVA: 0x1052864 Offset: 0x1052864 VA: 0x1052864
	public void SubBuffFromPT(BattleServantData targetSvt) { }

	// RVA: 0x10528C4 Offset: 0x10528C4 VA: 0x10528C4
	public void SubBuffExitSvt(BattleServantData targetSvt) { }

	// RVA: 0x1052924 Offset: 0x1052924 VA: 0x1052924
	public void SubBuffTarget(string key, BattleServantData targetSvt) { }

	// RVA: 0x104E3C8 Offset: 0x104E3C8 VA: 0x104E3C8
	public List<int> GetFieldIndividuality4Servant() { }

	// RVA: 0x1052D50 Offset: 0x1052D50 VA: 0x1052D50
	public int getOverCriticalStars() { }

	// RVA: 0x1052D68 Offset: 0x1052D68 VA: 0x1052D68
	public bool isValidViewStarMax() { }

	// RVA: 0x1052D84 Offset: 0x1052D84 VA: 0x1052D84
	public int getValidStarMax() { }

	// RVA: 0x1052D8C Offset: 0x1052D8C VA: 0x1052D8C
	public int getOverCriticalStarsIgnoreAddCriticalStars() { }

	// RVA: 0x1052DFC Offset: 0x1052DFC VA: 0x1052DFC
	public void addCriticalPoint(int count, bool multipleGainStar = False) { }

	// RVA: 0x1052E48 Offset: 0x1052E48 VA: 0x1052E48
	public void InitCriticalPoint(int critical = 0) { }

	// RVA: 0x1052E7C Offset: 0x1052E7C VA: 0x1052E7C
	public int getPrevCriticalStars() { }

	// RVA: 0x1052E84 Offset: 0x1052E84 VA: 0x1052E84
	public int getSubCriticalCount() { }

	// RVA: 0x1052E8C Offset: 0x1052E8C VA: 0x1052E8C
	public int getAddCriticalCount() { }

	// RVA: 0x1052E94 Offset: 0x1052E94 VA: 0x1052E94
	public void lossCriticalPoint(int count) { }

	// RVA: 0x1052F38 Offset: 0x1052F38 VA: 0x1052F38
	public int getCriticalPoint() { }

	// RVA: 0x1052F40 Offset: 0x1052F40 VA: 0x1052F40
	public int getTotalCriticalPoint() { }

	// RVA: 0x1052F48 Offset: 0x1052F48 VA: 0x1052F48
	public void resetCriticalPoint() { }

	// RVA: 0x1049E24 Offset: 0x1049E24 VA: 0x1049E24
	public void ResetAllCriticalInfo() { }

	// RVA: 0x1052F64 Offset: 0x1052F64 VA: 0x1052F64
	public void setCriticalStar(int count) { }

	// RVA: 0x1052F78 Offset: 0x1052F78 VA: 0x1052F78
	public void setCommandCriticals(int[] criticalArray) { }

	// RVA: 0x1052F80 Offset: 0x1052F80 VA: 0x1052F80
	public int[] getCommandCriticals() { }

	// RVA: 0x1052F88 Offset: 0x1052F88 VA: 0x1052F88
	public void loadCriticalstarts() { }

	// RVA: 0x1052F98 Offset: 0x1052F98 VA: 0x1052F98
	public void addTotalCriticalStars(int count) { }

	// RVA: 0x1052FB4 Offset: 0x1052FB4 VA: 0x1052FB4
	public void resetAddCriticalstars() { }

	// RVA: 0x1052FBC Offset: 0x1052FBC VA: 0x1052FBC
	public void resetSubCriticalstars() { }

	// RVA: 0x1052FC4 Offset: 0x1052FC4 VA: 0x1052FC4
	public void setCalcStarFlg(bool flg) { }

	// RVA: 0x1052FD0 Offset: 0x1052FD0 VA: 0x1052FD0
	public bool IsCalcStar() { }

	// RVA: 0x1052FD8 Offset: 0x1052FD8 VA: 0x1052FD8
	public void AddPerformedVals(DataVals val) { }

	// RVA: 0x1053048 Offset: 0x1053048 VA: 0x1053048
	public void ResetPerformedVals() { }

	// RVA: 0x10530A8 Offset: 0x10530A8 VA: 0x10530A8
	public bool CheckPerformedFuncType(FuncList.TYPE targetType) { }

	// RVA: 0x105317C Offset: 0x105317C VA: 0x105317C
	public void AddFreshBuffList(BattleActionData.BuffData buff) { }

	// RVA: 0x10531EC Offset: 0x10531EC VA: 0x10531EC
	public void ResetFreshBuffList() { }

	// RVA: 0x105324C Offset: 0x105324C VA: 0x105324C
	public bool CheckFreshBuffDataList(int[] targetTypeArray) { }

	// RVA: 0x1053404 Offset: 0x1053404 VA: 0x1053404
	public void setFirstBonus(int index, int type) { }

	// RVA: 0x1053558 Offset: 0x1053558 VA: 0x1053558
	public void setTDChain(int addIndex) { }

	// RVA: 0x10535AC Offset: 0x10535AC VA: 0x10535AC
	public bool isPlayerID(int Id) { }

	// RVA: 0x10535D8 Offset: 0x10535D8 VA: 0x10535D8
	public bool isEnemyID(int Id) { }

	// RVA: 0x10535F4 Offset: 0x10535F4 VA: 0x10535F4
	public bool IsAiNpcID(int id) { }

	// RVA: 0x104ABDC Offset: 0x104ABDC VA: 0x104ABDC
	public BattleServantData getPlayerServantData(int Id) { }

	// RVA: 0x10536E0 Offset: 0x10536E0 VA: 0x10536E0
	public BattleServantData getPlayerSubServantData() { }

	// RVA: 0x104E944 Offset: 0x104E944 VA: 0x104E944
	public BattleServantData getEnemyServantData(int Id) { }

	// RVA: 0x1053610 Offset: 0x1053610 VA: 0x1053610
	public BattleServantData GetAiNpcServantData(int id) { }

	// RVA: 0x10538A4 Offset: 0x10538A4 VA: 0x10538A4
	public BattleServantData getEnemyServantDataFromNpcId(int npcId) { }

	// RVA: 0x10539F8 Offset: 0x10539F8 VA: 0x10539F8
	public BattleServantData getEnemySubBackServantData() { }

	// RVA: 0x1053BE8 Offset: 0x1053BE8 VA: 0x1053BE8
	public BattleServantData getEnemySubServantData(int entryIndex) { }

	// RVA: 0x1043090 Offset: 0x1043090 VA: 0x1043090
	public BattleServantData getServantData(int uniqueId) { }

	// RVA: 0x1053D20 Offset: 0x1053D20 VA: 0x1053D20
	public int getServantId(int uniqueId) { }

	// RVA: 0x1052AF8 Offset: 0x1052AF8 VA: 0x1052AF8
	public BattleServantData[] getPlayerServantList() { }

	// RVA: 0x1053DC4 Offset: 0x1053DC4 VA: 0x1053DC4
	public int[] getPlayerServantIDList(bool ckDead = True, int[] addIds) { }

	// RVA: 0x1052B58 Offset: 0x1052B58 VA: 0x1052B58
	public BattleServantData[] getFieldEnemyServantList(bool isTargetOnly = False) { }

	// RVA: 0x1054124 Offset: 0x1054124 VA: 0x1054124
	public BattleServantData[] getFieldEnemyCheckDeadServantList(bool checkDead, bool isTargetOnly = True) { }

	// RVA: 0x10542B0 Offset: 0x10542B0 VA: 0x10542B0
	public int[] GetAliveFieldServantIDArray(bool isTargetOnly = True, int exceptSvtId = -1) { }

	// RVA: 0x1054654 Offset: 0x1054654 VA: 0x1054654
	public int[] getFieldEnemyServantIDList(bool isTargetOnly = True) { }

	// RVA: 0x10543D0 Offset: 0x10543D0 VA: 0x10543D0
	public int[] getAliveFieldEnemyServantIDList(bool isTargetOnly = True) { }

	// RVA: 0x1054850 Offset: 0x1054850 VA: 0x1054850
	public BattleServantData[] getEnemyServantList() { }

	// RVA: 0x10548B0 Offset: 0x10548B0 VA: 0x10548B0
	public int[] getEnemyServantIDList(bool ckDead = True, bool isTargetOnly = True) { }

	// RVA: 0x105404C Offset: 0x105404C VA: 0x105404C
	public BattleServantData[] getTargetEnemy(bool checkDead = False) { }

	// RVA: 0x1054A34 Offset: 0x1054A34 VA: 0x1054A34
	public int getTargetEnemyId(bool checkDead = False) { }

	// RVA: 0x1054788 Offset: 0x1054788 VA: 0x1054788
	public int[] getTargetEnemyIdList(bool checkDead = False) { }

	// RVA: 0x1054A84 Offset: 0x1054A84 VA: 0x1054A84
	public int GetPositionIndex() { }

	// RVA: 0x104F99C Offset: 0x104F99C VA: 0x104F99C
	public BattleServantData[] getFieldPlayerServantList() { }

	// RVA: 0x1052700 Offset: 0x1052700 VA: 0x1052700
	public BattleServantData getTopFieldPlayerServant() { }

	// RVA: 0x1054B58 Offset: 0x1054B58 VA: 0x1054B58
	public BattleServantData[] getSubPlayerServantList() { }

	// RVA: 0x104F044 Offset: 0x104F044 VA: 0x104F044
	public BattleServantData[] GetSubServantArray(bool isEnemy) { }

	// RVA: 0x1054D84 Offset: 0x1054D84 VA: 0x1054D84
	public BattleServantData[] GetRestockableSubServantArray(bool isEnemy, int deckIndex) { }

	// RVA: 0x1054F44 Offset: 0x1054F44 VA: 0x1054F44
	public int[] getFieldPlayerServantIDList(int[] addIds) { }

	// RVA: 0x1054528 Offset: 0x1054528 VA: 0x1054528
	public int[] getAliveFieldPlayerServantIDList() { }

	// RVA: 0x105512C Offset: 0x105512C VA: 0x105512C
	public List<BattleServantData> getServantList() { }

	// RVA: 0x10551F4 Offset: 0x10551F4 VA: 0x10551F4
	public BattleServantData[] getFieldServantList(bool isTargetOnly = False) { }

	// RVA: 0x10552EC Offset: 0x10552EC VA: 0x10552EC
	public BattleServantData[] getFieldPTList(int uniqueId, bool isTargetOnly = True) { }

	// RVA: 0x105532C Offset: 0x105532C VA: 0x105532C
	public int[] getAliveFieldSvtIdArray(int actorUniqueId, bool isPartySide = True, int[] tvals, bool isIncludeIgnoreIndiv = False) { }

	// RVA: 0x10553B4 Offset: 0x10553B4 VA: 0x10553B4
	public int[] CheckIndivSvtIdList(int[] svtIdList, int[] tvals, bool isIncludeIgnoreIndiv = False) { }

	// RVA: 0x105558C Offset: 0x105558C VA: 0x105558C
	public bool IsOpponentPTUniqueID(int aId, int bId) { }

	// RVA: 0x10555D8 Offset: 0x10555D8 VA: 0x10555D8
	public BattleServantData[] getFieldOpponentList(int uniqueId, bool isTargetOnly = True) { }

	// RVA: 0x10525AC Offset: 0x10525AC VA: 0x10525AC
	public BattleServantData[] getPTList(int uniqueId) { }

	// RVA: 0x1055618 Offset: 0x1055618 VA: 0x1055618
	public BattleServantData[] getOpponentList(int uniqueId) { }

	// RVA: 0x1055650 Offset: 0x1055650 VA: 0x1055650
	public void addDamage(int targetId, int damage, bool noAccumulation = False) { }

	// RVA: 0x1055738 Offset: 0x1055738 VA: 0x1055738
	public void addHeal(int targetId, int heal, bool isForce = False) { }

	// RVA: 0x1055780 Offset: 0x1055780 VA: 0x1055780
	public bool checkAliveOther(int uniqueId) { }

	// RVA: 0x104D31C Offset: 0x104D31C VA: 0x104D31C
	public bool checkAlivePlayers() { }

	// RVA: 0x104D404 Offset: 0x104D404 VA: 0x104D404
	public bool checkAliveEnemys() { }

	// RVA: 0x1055818 Offset: 0x1055818 VA: 0x1055818
	public bool checkAliveAllEnemy() { }

	// RVA: 0x1055924 Offset: 0x1055924 VA: 0x1055924
	public bool checkBattleContinuationEnemys() { }

	// RVA: 0x1055944 Offset: 0x1055944 VA: 0x1055944
	public bool IsAliveLogic(bool isEnemy) { }

	// RVA: 0x1055A50 Offset: 0x1055A50 VA: 0x1055A50
	public bool checkDefeatPoint(bool isEnemy) { }

	// RVA: 0x1055B30 Offset: 0x1055B30 VA: 0x1055B30
	public void toggleSkipSkillConf() { }

	// RVA: 0x1049E40 Offset: 0x1049E40 VA: 0x1049E40
	public void loadSkipSkillConf() { }

	// RVA: 0x1055BF0 Offset: 0x1055BF0 VA: 0x1055BF0
	public void toggleHighSpeedMode() { }

	// RVA: 0x1049F48 Offset: 0x1049F48 VA: 0x1049F48
	public void loadHighSpeedMode() { }

	// RVA: 0x1055CD8 Offset: 0x1055CD8 VA: 0x1055CD8
	public void toggleTdConstantVelocity() { }

	// RVA: 0x104A054 Offset: 0x104A054 VA: 0x104A054
	public void loadTdConstantVelocity() { }

	// RVA: 0x1055D98 Offset: 0x1055D98 VA: 0x1055D98
	public bool IsHighSpeedOption() { }

	// RVA: 0x1055DA8 Offset: 0x1055DA8 VA: 0x1055DA8
	public bool get_IsHighspeedTd() { }

	// RVA: 0x1055FA0 Offset: 0x1055FA0 VA: 0x1055FA0
	public void toggleSkipDead() { }

	// RVA: 0x104A15C Offset: 0x104A15C VA: 0x104A15C
	public void loadSkipDead() { }

	// RVA: 0x1056060 Offset: 0x1056060 VA: 0x1056060
	public static void DeleteContinueData() { }

	// RVA: 0x105622C Offset: 0x105622C VA: 0x105622C
	public static long getResumeBattleId() { }

	// RVA: 0x10562D0 Offset: 0x10562D0 VA: 0x10562D0
	public static int getSavedQuestId() { }

	// RVA: 0x1056374 Offset: 0x1056374 VA: 0x1056374
	public static int getSavedQuestPhase() { }

	// RVA: 0x1056418 Offset: 0x1056418 VA: 0x1056418
	public static int getContinueBattleFlg() { }

	// RVA: 0x1056488 Offset: 0x1056488 VA: 0x1056488
	public static void setContinueBattleFlg(int continueFlg, bool save = True) { }

	// RVA: 0x1056524 Offset: 0x1056524 VA: 0x1056524
	public static int GetContinueItemId() { }

	// RVA: 0x1056594 Offset: 0x1056594 VA: 0x1056594
	public static void SaveContinueItemId(int continueItemId, bool save = True) { }

	// RVA: 0x1056630 Offset: 0x1056630 VA: 0x1056630
	public static string GetBattleUseItemParameter() { }

	// RVA: 0x105669C Offset: 0x105669C VA: 0x105669C
	public static void SaveBattleUseItemParameter(string param, bool save = True) { }

	// RVA: 0x1056738 Offset: 0x1056738 VA: 0x1056738
	public static int getCommandSpellIdBattle() { }

	// RVA: 0x10567A8 Offset: 0x10567A8 VA: 0x10567A8
	public static void setCommandSpellIdBattle(int commandSpellId, bool save = True) { }

	// RVA: 0x1056844 Offset: 0x1056844 VA: 0x1056844
	public static void setResumeBattleId(long battleId, int questId, int questPhase) { }

	// RVA: 0x104E198 Offset: 0x104E198 VA: 0x104E198
	public static void saveContinueCount(int count) { }

	// RVA: 0x1056920 Offset: 0x1056920 VA: 0x1056920
	public static int loadContinueCount() { }

	// RVA: 0x105698C Offset: 0x105698C VA: 0x105698C
	public static void saveWaveClearTurn(int[] waveClearArray) { }

	// RVA: 0x1056B24 Offset: 0x1056B24 VA: 0x1056B24
	public static int[] getWaveClearTurn() { }

	// RVA: 0x1056DB0 Offset: 0x1056DB0 VA: 0x1056DB0
	public static bool isReserveResumeBattle() { }

	// RVA: 0x1056E58 Offset: 0x1056E58 VA: 0x1056E58
	public static void setReserveResumeBattle(bool isResume, int questId = 0, int questPhase = 0) { }

	// RVA: 0x1056F5C Offset: 0x1056F5C VA: 0x1056F5C
	public long getBsate() { }

	// RVA: 0x1056FA4 Offset: 0x1056FA4 VA: 0x1056FA4
	public void setBstate(long bstate) { }

	// RVA: 0x104C084 Offset: 0x104C084 VA: 0x104C084
	public void SaveTurnData() { }

	// RVA: 0x1056FF8 Offset: 0x1056FF8 VA: 0x1056FF8
	public void DeleteDummyBuffDataAll() { }

	// RVA: 0x10571A8 Offset: 0x10571A8 VA: 0x10571A8
	public void addLogCommand() { }

	// RVA: 0x1057310 Offset: 0x1057310 VA: 0x1057310
	public string getCommandHistory() { }

	// RVA: 0x10573AC Offset: 0x10573AC VA: 0x10573AC
	public string getActionList() { }

	// RVA: 0x10579C0 Offset: 0x10579C0 VA: 0x10579C0
	public bool checkTurnData() { }

	// RVA: 0x1057C00 Offset: 0x1057C00 VA: 0x1057C00
	public static bool deleteSaveData() { }

	// RVA: 0x1057CF4 Offset: 0x1057CF4 VA: 0x1057CF4
	public void DeleteResumeCheckPlayedMovieSaveKey() { }

	// RVA: 0x1057D7C Offset: 0x1057D7C VA: 0x1057D7C
	public void checkTutorialData() { }

	// RVA: 0x1055CC8 Offset: 0x1055CC8 VA: 0x1055CC8
	public bool isTutorial() { }

	// RVA: 0x1057E9C Offset: 0x1057E9C VA: 0x1057E9C
	public bool isTutorialCard() { }

	// RVA: 0x1057EB8 Offset: 0x1057EB8 VA: 0x1057EB8
	public bool isTutorialclickTarget() { }

	// RVA: 0x1057F28 Offset: 0x1057F28 VA: 0x1057F28
	public bool isTutorialSelectsvtCancel() { }

	// RVA: 0x1057F38 Offset: 0x1057F38 VA: 0x1057F38
	public void commonQuestLoad() { }

	// RVA: 0x10581E8 Offset: 0x10581E8 VA: 0x10581E8
	private void InitGender(bool change) { }

	// RVA: 0x1058628 Offset: 0x1058628 VA: 0x1058628
	public void initQuest() { }

	// RVA: 0x1058FB4 Offset: 0x1058FB4 VA: 0x1058FB4
	public void loadQuest() { }

	// RVA: 0x1058CC8 Offset: 0x1058CC8 VA: 0x1058CC8
	private void LoadAiNpcServant(BattleServantData.SaveData[] saveNpcSvts) { }

	// RVA: 0x105A790 Offset: 0x105A790 VA: 0x105A790
	public void setNextStage() { }

	// RVA: 0x104BFF8 Offset: 0x104BFF8 VA: 0x104BFF8
	public void SetUsedTurn() { }

	// RVA: 0x105A88C Offset: 0x105A88C VA: 0x105A88C
	public void loadNstage(int inwavecount) { }

	// RVA: 0x105B304 Offset: 0x105B304 VA: 0x105B304
	private void CheckMultiTargetBattle(bool isResume = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCC9A8 Offset: 0xCCC9A8 VA: 0xCCC9A8
	// RVA: 0x105B524 Offset: 0x105B524 VA: 0x105B524
	private IEnumerator PartsIntoTheBodyDelay() { }

	// RVA: 0x105B594 Offset: 0x105B594 VA: 0x105B594
	public bool CheckActorAllParts() { }

	// RVA: 0x105B740 Offset: 0x105B740 VA: 0x105B740
	public BattleActorControl GetPartsActor(BattleData.MULTI_TARGET_POS pos) { }

	// RVA: 0x105B984 Offset: 0x105B984 VA: 0x105B984
	public void PartsIntoTheBody() { }

	// RVA: 0x105BE2C Offset: 0x105BE2C VA: 0x105BE2C
	public Transform FindTransformChild(Transform tran, string tranName) { }

	// RVA: 0x105BF70 Offset: 0x105BF70 VA: 0x105BF70
	public void loadSaveTurnNstage() { }

	// RVA: 0x105ACC4 Offset: 0x105ACC4 VA: 0x105ACC4
	public void loadStageData() { }

	// RVA: 0x105D0DC Offset: 0x105D0DC VA: 0x105D0DC
	public void UpdateTargetPosEnemyAppearValid(int[] positions, bool isValid) { }

	// RVA: 0x105D194 Offset: 0x105D194 VA: 0x105D194
	public bool IsPlayLimitTurnEffect() { }

	// RVA: 0x1042A84 Offset: 0x1042A84 VA: 0x1042A84
	public bool checkLimitTurn() { }

	// RVA: 0x105D1D8 Offset: 0x105D1D8 VA: 0x105D1D8
	public bool isLimitTurn() { }

	// RVA: 0x105D1E8 Offset: 0x105D1E8 VA: 0x105D1E8
	public int GetLimitRemainTurn() { }

	// RVA: 0x105D1FC Offset: 0x105D1FC VA: 0x105D1FC
	public bool isShowTurn() { }

	// RVA: 0x105D20C Offset: 0x105D20C VA: 0x105D20C
	public bool IsAliveOtherRaidTypeBoss() { }

	// RVA: 0x105D344 Offset: 0x105D344 VA: 0x105D344
	public BattleDataDefine.RaidType GetRaidType() { }

	// RVA: 0x105D474 Offset: 0x105D474 VA: 0x105D474
	public bool isRaidBattle() { }

	// RVA: 0x105D500 Offset: 0x105D500 VA: 0x105D500
	public bool isBattleTurnRequest() { }

	// RVA: 0x105D554 Offset: 0x105D554 VA: 0x105D554
	public bool isSuperBossBattle() { }

	// RVA: 0x105D5E0 Offset: 0x105D5E0 VA: 0x105D5E0
	public bool isSuperBossDown() { }

	// RVA: 0x105D6D8 Offset: 0x105D6D8 VA: 0x105D6D8
	public bool TryGetRaidEntity(out EventRaidEntity raidEnt, int raidId) { }

