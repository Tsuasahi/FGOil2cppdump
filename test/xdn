	public virtual int Add(object value) { }

	// RVA: 0x22873EC Offset: 0x22873EC VA: 0x22873EC Slot: 31
	public virtual void Clear() { }

	// RVA: 0x2287428 Offset: 0x2287428 VA: 0x2287428 Slot: 32
	public virtual bool Contains(object item) { }

	// RVA: 0x2287458 Offset: 0x2287458 VA: 0x2287458 Slot: 33
	public virtual int IndexOf(object value) { }

	// RVA: 0x228746C Offset: 0x228746C VA: 0x228746C Slot: 34
	public virtual int IndexOf(object value, int startIndex) { }

	// RVA: 0x2287484 Offset: 0x2287484 VA: 0x2287484 Slot: 35
	public virtual int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x228761C Offset: 0x228761C VA: 0x228761C Slot: 36
	public virtual void Insert(int index, object value) { }

	// RVA: 0x228776C Offset: 0x228776C VA: 0x228776C Slot: 37
	public virtual void InsertRange(int index, ICollection c) { }

	// RVA: 0x2287AC4 Offset: 0x2287AC4 VA: 0x2287AC4 Slot: 38
	public virtual void Remove(object obj) { }

	// RVA: 0x2287B1C Offset: 0x2287B1C VA: 0x2287B1C Slot: 39
	public virtual void RemoveAt(int index) { }

	// RVA: 0x2287C00 Offset: 0x2287C00 VA: 0x2287C00 Slot: 40
	public virtual void Reverse() { }

	// RVA: 0x2287C38 Offset: 0x2287C38 VA: 0x2287C38 Slot: 41
	public virtual void CopyTo(Array array) { }

	// RVA: 0x2287C48 Offset: 0x2287C48 VA: 0x2287C48 Slot: 42
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x2287C70 Offset: 0x2287C70 VA: 0x2287C70 Slot: 43
	public virtual void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x2287D6C Offset: 0x2287D6C VA: 0x2287D6C Slot: 44
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x2287E74 Offset: 0x2287E74 VA: 0x2287E74 Slot: 45
	public virtual void AddRange(ICollection c) { }

	// RVA: 0x2287E94 Offset: 0x2287E94 VA: 0x2287E94 Slot: 46
	public virtual void Sort() { }

	// RVA: 0x2287EFC Offset: 0x2287EFC VA: 0x2287EFC Slot: 47
	public virtual void Sort(IComparer comparer) { }

	// RVA: 0x2287F1C Offset: 0x2287F1C VA: 0x2287F1C Slot: 48
	public virtual object[] ToArray() { }

	// RVA: 0x2287F90 Offset: 0x2287F90 VA: 0x2287F90 Slot: 49
	public virtual Array ToArray(Type type) { }

	// RVA: 0x2287FDC Offset: 0x2287FDC VA: 0x2287FDC Slot: 50
	public virtual object Clone() { }

	// RVA: 0x2286B9C Offset: 0x2286B9C VA: 0x2286B9C
	internal static void ThrowNewArgumentOutOfRangeException(string name, object actual, string message) { }

	// RVA: 0x2288054 Offset: 0x2288054 VA: 0x2288054
	public static ArrayList Synchronized(ArrayList list) { }

	// RVA: 0x228815C Offset: 0x228815C VA: 0x228815C
	public static ArrayList ReadOnly(ArrayList list) { }
}

// Namespace: 
private sealed class ArrayList.SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 194
{
	// Fields
	private ArrayList list; // 0x10
	private int index; // 0x18
	private int version; // 0x1C
	private object currentElement; // 0x20
	private static object endFlag; // 0x0

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x2287DCC Offset: 0x2287DCC VA: 0x2287DCC
	public void .ctor(ArrayList list) { }

	// RVA: 0x22891A4 Offset: 0x22891A4 VA: 0x22891A4
	private static void .cctor() { }

	// RVA: 0x2289210 Offset: 0x2289210 VA: 0x2289210 Slot: 7
	public object Clone() { }

	// RVA: 0x2289218 Offset: 0x2289218 VA: 0x2289218 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x2289368 Offset: 0x2289368 VA: 0x2289368 Slot: 4
	public object get_Current() { }

	// RVA: 0x228944C Offset: 0x228944C VA: 0x228944C Slot: 6
	public void Reset() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xBC458C Offset: 0xBC458C VA: 0xBC458C
[Serializable]
private class ArrayList.ArrayListWrapper : ArrayList // TypeDefIndex: 195
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x28

	// Properties
	public override object Item { get; set; }
	public override int Count { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }

	// Methods

	// RVA: 0x2288220 Offset: 0x2288220 VA: 0x2288220
	public void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x2288298 Offset: 0x2288298 VA: 0x2288298 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x22882D8 Offset: 0x22882D8 VA: 0x22882D8 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x2288328 Offset: 0x2288328 VA: 0x2288328 Slot: 23
	public override int get_Count() { }

	// RVA: 0x2288360 Offset: 0x2288360 VA: 0x2288360 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x2288398 Offset: 0x2288398 VA: 0x2288398 Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x22883D8 Offset: 0x22883D8 VA: 0x22883D8 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x2288410 Offset: 0x2288410 VA: 0x2288410 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x2288448 Offset: 0x2288448 VA: 0x2288448 Slot: 28
	public override bool get_IsSynchronized() { }

	// RVA: 0x2288480 Offset: 0x2288480 VA: 0x2288480 Slot: 29
	public override object get_SyncRoot() { }

	// RVA: 0x22884B8 Offset: 0x22884B8 VA: 0x22884B8 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x22884F8 Offset: 0x22884F8 VA: 0x22884F8 Slot: 31
	public override void Clear() { }

	// RVA: 0x2288530 Offset: 0x2288530 VA: 0x2288530 Slot: 32
	public override bool Contains(object value) { }

	// RVA: 0x2288570 Offset: 0x2288570 VA: 0x2288570 Slot: 33
	public override int IndexOf(object value) { }

	// RVA: 0x22885B0 Offset: 0x22885B0 VA: 0x22885B0 Slot: 34
	public override int IndexOf(object value, int startIndex) { }

	// RVA: 0x2288600 Offset: 0x2288600 VA: 0x2288600 Slot: 35
	public override int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x2288658 Offset: 0x2288658 VA: 0x2288658 Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x22886A8 Offset: 0x22886A8 VA: 0x22886A8 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x22886F8 Offset: 0x22886F8 VA: 0x22886F8 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x2288738 Offset: 0x2288738 VA: 0x2288738 Slot: 39
	public override void RemoveAt(int index) { }

	// RVA: 0x2288778 Offset: 0x2288778 VA: 0x2288778 Slot: 40
	public override void Reverse() { }

	// RVA: 0x22887B0 Offset: 0x22887B0 VA: 0x22887B0 Slot: 41
	public override void CopyTo(Array array) { }

	// RVA: 0x22887F0 Offset: 0x22887F0 VA: 0x22887F0 Slot: 42
	public override void CopyTo(Array array, int index) { }

	// RVA: 0x2288840 Offset: 0x2288840 VA: 0x2288840 Slot: 43
	public override void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x22888A8 Offset: 0x22888A8 VA: 0x22888A8 Slot: 44
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x22888E0 Offset: 0x22888E0 VA: 0x22888E0 Slot: 45
	public override void AddRange(ICollection c) { }

	// RVA: 0x2288920 Offset: 0x2288920 VA: 0x2288920 Slot: 50
	public override object Clone() { }

	// RVA: 0x2288958 Offset: 0x2288958 VA: 0x2288958 Slot: 46
	public override void Sort() { }

	// RVA: 0x2288990 Offset: 0x2288990 VA: 0x2288990 Slot: 47
	public override void Sort(IComparer comparer) { }

	// RVA: 0x22889D0 Offset: 0x22889D0 VA: 0x22889D0 Slot: 48
	public override object[] ToArray() { }

	// RVA: 0x2288A08 Offset: 0x2288A08 VA: 0x2288A08 Slot: 49
	public override Array ToArray(Type elementType) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xBC45C4 Offset: 0xBC45C4 VA: 0xBC45C4
[Serializable]
private sealed class ArrayList.SynchronizedArrayListWrapper : ArrayList.ArrayListWrapper // TypeDefIndex: 196
{
	// Fields
	private object m_SyncRoot; // 0x30

	// Properties
	public override object Item { get; set; }
	public override int Count { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }

	// Methods

	// RVA: 0x2288114 Offset: 0x2288114 VA: 0x2288114
	internal void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x2289530 Offset: 0x2289530 VA: 0x2289530 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x22895E4 Offset: 0x22895E4 VA: 0x22895E4 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x22896A8 Offset: 0x22896A8 VA: 0x22896A8 Slot: 23
	public override int get_Count() { }

	// RVA: 0x228974C Offset: 0x228974C VA: 0x228974C Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x22897F0 Offset: 0x22897F0 VA: 0x22897F0 Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x22898AC Offset: 0x22898AC VA: 0x22898AC Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x2289950 Offset: 0x2289950 VA: 0x2289950 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x22899F4 Offset: 0x22899F4 VA: 0x22899F4 Slot: 28
	public override bool get_IsSynchronized() { }

	// RVA: 0x22899FC Offset: 0x22899FC VA: 0x22899FC Slot: 29
	public override object get_SyncRoot() { }

	// RVA: 0x2289A04 Offset: 0x2289A04 VA: 0x2289A04 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x2289AB8 Offset: 0x2289AB8 VA: 0x2289AB8 Slot: 31
	public override void Clear() { }

	// RVA: 0x2289B5C Offset: 0x2289B5C VA: 0x2289B5C Slot: 32
	public override bool Contains(object value) { }

	// RVA: 0x2289C10 Offset: 0x2289C10 VA: 0x2289C10 Slot: 33
	public override int IndexOf(object value) { }

	// RVA: 0x2289CC4 Offset: 0x2289CC4 VA: 0x2289CC4 Slot: 34
	public override int IndexOf(object value, int startIndex) { }

	// RVA: 0x2289D80 Offset: 0x2289D80 VA: 0x2289D80 Slot: 35
	public override int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x2289E4C Offset: 0x2289E4C VA: 0x2289E4C Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x2289F10 Offset: 0x2289F10 VA: 0x2289F10 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x2289FD4 Offset: 0x2289FD4 VA: 0x2289FD4 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x228A090 Offset: 0x228A090 VA: 0x228A090 Slot: 39
	public override void RemoveAt(int index) { }

	// RVA: 0x228A14C Offset: 0x228A14C VA: 0x228A14C Slot: 40
	public override void Reverse() { }

	// RVA: 0x228A1F0 Offset: 0x228A1F0 VA: 0x228A1F0 Slot: 41
	public override void CopyTo(Array array) { }

	// RVA: 0x228A2AC Offset: 0x228A2AC VA: 0x228A2AC Slot: 42
	public override void CopyTo(Array array, int index) { }

	// RVA: 0x228A370 Offset: 0x228A370 VA: 0x228A370 Slot: 43
	public override void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x228A454 Offset: 0x228A454 VA: 0x228A454 Slot: 44
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x228A4F8 Offset: 0x228A4F8 VA: 0x228A4F8 Slot: 45
	public override void AddRange(ICollection c) { }

	// RVA: 0x228A5B4 Offset: 0x228A5B4 VA: 0x228A5B4 Slot: 50
	public override object Clone() { }

	// RVA: 0x228A658 Offset: 0x228A658 VA: 0x228A658 Slot: 46
	public override void Sort() { }

	// RVA: 0x228A6FC Offset: 0x228A6FC VA: 0x228A6FC Slot: 47
	public override void Sort(IComparer comparer) { }

	// RVA: 0x228A7B8 Offset: 0x228A7B8 VA: 0x228A7B8 Slot: 48
	public override object[] ToArray() { }

	// RVA: 0x228A85C Offset: 0x228A85C VA: 0x228A85C Slot: 49
	public override Array ToArray(Type elementType) { }
}

// Namespace: 
[Serializable]
private class ArrayList.FixedSizeArrayListWrapper : ArrayList.ArrayListWrapper // TypeDefIndex: 197
{
	// Properties
	protected virtual string ErrorMessage { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }

	// Methods

	// RVA: 0x2288A48 Offset: 0x2288A48 VA: 0x2288A48
	public void .ctor(ArrayList innerList) { }

	// RVA: 0x2288A4C Offset: 0x2288A4C VA: 0x2288A4C Slot: 51
	protected virtual string get_ErrorMessage() { }

	// RVA: 0x2288A94 Offset: 0x2288A94 VA: 0x2288A94 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x2288ACC Offset: 0x2288ACC VA: 0x2288ACC Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x2288B58 Offset: 0x2288B58 VA: 0x2288B58 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x2288B60 Offset: 0x2288B60 VA: 0x2288B60 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x2288BEC Offset: 0x2288BEC VA: 0x2288BEC Slot: 45
	public override void AddRange(ICollection c) { }

	// RVA: 0x2288C78 Offset: 0x2288C78 VA: 0x2288C78 Slot: 31
	public override void Clear() { }

	// RVA: 0x2288D04 Offset: 0x2288D04 VA: 0x2288D04 Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x2288D90 Offset: 0x2288D90 VA: 0x2288D90 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x2288E1C Offset: 0x2288E1C VA: 0x2288E1C Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x2288EA8 Offset: 0x2288EA8 VA: 0x2288EA8 Slot: 39
	public override void RemoveAt(int index) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xBC45FC Offset: 0xBC45FC VA: 0xBC45FC
[Serializable]
private sealed class ArrayList.ReadOnlyArrayListWrapper : ArrayList.FixedSizeArrayListWrapper // TypeDefIndex: 198
{
	// Properties
	protected override string ErrorMessage { get; }
	public override bool IsReadOnly { get; }
	public override object Item { get; set; }

	// Methods

	// RVA: 0x228821C Offset: 0x228821C VA: 0x228821C
	public void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x2288F34 Offset: 0x2288F34 VA: 0x2288F34 Slot: 51
	protected override string get_ErrorMessage() { }

	// RVA: 0x2288F7C Offset: 0x2288F7C VA: 0x2288F7C Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x2288F84 Offset: 0x2288F84 VA: 0x2288F84 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x2288FC4 Offset: 0x2288FC4 VA: 0x2288FC4 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x228903C Offset: 0x228903C VA: 0x228903C Slot: 40
	public override void Reverse() { }

	// RVA: 0x22890B4 Offset: 0x22890B4 VA: 0x22890B4 Slot: 46
	public override void Sort() { }

	// RVA: 0x228912C Offset: 0x228912C VA: 0x228912C Slot: 47
	public override void Sort(IComparer comparer) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC4634 Offset: 0xBC4634 VA: 0xBC4634
[DefaultMemberAttribute] // RVA: 0xBC4634 Offset: 0xBC4634 VA: 0xBC4634
[Serializable]
public sealed class BitArray : IEnumerable, ICloneable, ICollection // TypeDefIndex: 199
{
	// Fields
	private int[] m_array; // 0x10
	private int m_length; // 0x18
	private int _version; // 0x1C

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public bool Item { get; set; }
	public int Length { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x228A910 Offset: 0x228A910 VA: 0x228A910
	public void .ctor(BitArray bits) { }

	// RVA: 0x228AA7C Offset: 0x228AA7C VA: 0x228AA7C
	public void .ctor(int length) { }

	// RVA: 0x228AB44 Offset: 0x228AB44 VA: 0x228AB44
	private byte getByte(int byteIndex) { }

	// RVA: 0x228ABCC Offset: 0x228ABCC VA: 0x228ABCC Slot: 6
	public int get_Count() { }

	// RVA: 0x228ABD4 Offset: 0x228ABD4 VA: 0x228ABD4 Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x228ABDC Offset: 0x228ABDC VA: 0x228ABDC
	public bool get_Item(int index) { }

	// RVA: 0x228ACBC Offset: 0x228ACBC VA: 0x228ACBC
	public void set_Item(int index, bool value) { }

	// RVA: 0x228ADC4 Offset: 0x228ADC4 VA: 0x228ADC4
	public int get_Length() { }

	// RVA: 0x228ADCC Offset: 0x228ADCC VA: 0x228ADCC Slot: 8
	public object get_SyncRoot() { }

	// RVA: 0x228ADD0 Offset: 0x228ADD0 VA: 0x228ADD0 Slot: 5
	public object Clone() { }

	// RVA: 0x228AE30 Offset: 0x228AE30 VA: 0x228AE30 Slot: 9
	public void CopyTo(Array array, int index) { }

	// RVA: 0x228ABE0 Offset: 0x228ABE0 VA: 0x228ABE0
	public bool Get(int index) { }

	// RVA: 0x228ACC4 Offset: 0x228ACC4 VA: 0x228ACC4
	public void Set(int index, bool value) { }

	// RVA: 0x228B234 Offset: 0x228B234 VA: 0x228B234 Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
[Serializable]
private class BitArray.BitArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 200
{
	// Fields
	private BitArray _bitArray; // 0x10
	private bool _current; // 0x18
	private int _index; // 0x1C
	private int _version; // 0x20

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x228B294 Offset: 0x228B294 VA: 0x228B294
	public void .ctor(BitArray ba) { }

	// RVA: 0x228B2DC Offset: 0x228B2DC VA: 0x228B2DC Slot: 7
	public object Clone() { }

	// RVA: 0x228B2E4 Offset: 0x228B2E4 VA: 0x228B2E4 Slot: 4
	public object get_Current() { }

	// RVA: 0x228B3D0 Offset: 0x228B3D0 VA: 0x228B3D0 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x228B508 Offset: 0x228B508 VA: 0x228B508 Slot: 6
	public void Reset() { }

	// RVA: 0x228B470 Offset: 0x228B470 VA: 0x228B470
	private void checkVersion() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC4684 Offset: 0xBC4684 VA: 0xBC4684
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 201
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x0
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x8
	private CultureInfo culture; // 0x10

	// Properties
	public static CaseInsensitiveComparer DefaultInvariant { get; }

	// Methods

	// RVA: 0x228B530 Offset: 0x228B530 VA: 0x228B530
	public void .ctor() { }

	// RVA: 0x228B5A8 Offset: 0x228B5A8 VA: 0x228B5A8
	private void .ctor(bool invariant) { }

	// RVA: 0x228B5B0 Offset: 0x228B5B0 VA: 0x228B5B0
	private static void .cctor() { }

	// RVA: 0x228B630 Offset: 0x228B630 VA: 0x228B630
	public static CaseInsensitiveComparer get_DefaultInvariant() { }

	// RVA: 0x228B698 Offset: 0x228B698 VA: 0x228B698 Slot: 4
	public int Compare(object a, object b) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC4698 Offset: 0xBC4698 VA: 0xBC4698
[ObsoleteAttribute] // RVA: 0xBC4698 Offset: 0xBC4698 VA: 0xBC4698
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 202
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x0
	private static readonly object sync; // 0x8
	private TextInfo m_text; // 0x10

	// Properties
	public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; }

	// Methods

	// RVA: 0x228BA70 Offset: 0x228BA70 VA: 0x228BA70
	public void .ctor() { }

	// RVA: 0x228BC2C Offset: 0x228BC2C VA: 0x228BC2C
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x228BD3C Offset: 0x228BD3C VA: 0x228BD3C
	private static void .cctor() { }

	// RVA: 0x228BB70 Offset: 0x228BB70 VA: 0x228BB70
	private static bool AreEqual(CultureInfo a, CultureInfo b) { }

	// RVA: 0x228BE00 Offset: 0x228BE00 VA: 0x228BE00
	private static bool AreEqual(TextInfo info, CultureInfo culture) { }

	// RVA: 0x228BEB8 Offset: 0x228BEB8 VA: 0x228BEB8
	public static CaseInsensitiveHashCodeProvider get_DefaultInvariant() { }

	// RVA: 0x228BF20 Offset: 0x228BF20 VA: 0x228BF20 Slot: 4
	public int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC46E8 Offset: 0xBC46E8 VA: 0xBC46E8
[Serializable]
public abstract class CollectionBase : IEnumerable, ICollection, IList // TypeDefIndex: 203
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	protected ArrayList InnerList { get; }
	protected IList List { get; }

	// Methods

	// RVA: 0x22746D8 Offset: 0x22746D8 VA: 0x22746D8
	protected void .ctor() { }

	// RVA: 0x228C1A8 Offset: 0x228C1A8 VA: 0x228C1A8 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x228C1F8 Offset: 0x228C1F8 VA: 0x228C1F8 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x228C230 Offset: 0x228C230 VA: 0x228C230 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x228C268 Offset: 0x228C268 VA: 0x228C268 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x228C414 Offset: 0x228C414 VA: 0x228C414 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x228C454 Offset: 0x228C454 VA: 0x228C454 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x228C494 Offset: 0x228C494 VA: 0x228C494 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x228C618 Offset: 0x228C618 VA: 0x228C618 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x228C760 Offset: 0x228C760 VA: 0x228C760 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x228C798 Offset: 0x228C798 VA: 0x228C798 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x228C7D0 Offset: 0x228C7D0 VA: 0x228C7D0 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x228C810 Offset: 0x228C810 VA: 0x228C810 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x228CA40 Offset: 0x228CA40 VA: 0x228CA40 Slot: 5
	public int get_Count() { }

	// RVA: 0x228CA78 Offset: 0x228CA78 VA: 0x228CA78 Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0x228CAB0 Offset: 0x228CAB0 VA: 0x228CAB0 Slot: 14
	public void Clear() { }

	// RVA: 0x228CB14 Offset: 0x228CB14 VA: 0x228CB14 Slot: 19
	public void RemoveAt(int index) { }

	// RVA: 0x227483C Offset: 0x227483C VA: 0x227483C
	protected ArrayList get_InnerList() { }

	// RVA: 0x228CBE0 Offset: 0x228CBE0 VA: 0x228CBE0
	protected IList get_List() { }

	// RVA: 0x228CBE4 Offset: 0x228CBE4 VA: 0x228CBE4 Slot: 20
	protected virtual void OnClear() { }

	// RVA: 0x228CBE8 Offset: 0x228CBE8 VA: 0x228CBE8 Slot: 21
	protected virtual void OnClearComplete() { }

	// RVA: 0x228CBEC Offset: 0x228CBEC VA: 0x228CBEC Slot: 22
	protected virtual void OnInsert(int index, object value) { }

	// RVA: 0x228CBF0 Offset: 0x228CBF0 VA: 0x228CBF0 Slot: 23
	protected virtual void OnInsertComplete(int index, object value) { }

	// RVA: 0x228CBF4 Offset: 0x228CBF4 VA: 0x228CBF4 Slot: 24
	protected virtual void OnRemove(int index, object value) { }

	// RVA: 0x228CBF8 Offset: 0x228CBF8 VA: 0x228CBF8 Slot: 25
	protected virtual void OnRemoveComplete(int index, object value) { }

	// RVA: 0x228CBFC Offset: 0x228CBFC VA: 0x228CBFC Slot: 26
	protected virtual void OnSet(int index, object oldValue, object newValue) { }

	// RVA: 0x228CC00 Offset: 0x228CC00 VA: 0x228CC00 Slot: 27
	protected virtual void OnSetComplete(int index, object oldValue, object newValue) { }

	// RVA: 0x228CC04 Offset: 0x228CC04 VA: 0x228CC04 Slot: 28
	protected virtual void OnValidate(object value) { }
}

// Namespace: System.Collections
internal sealed class CollectionDebuggerView // TypeDefIndex: 204
{}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC46FC Offset: 0xBC46FC VA: 0xBC46FC
[Serializable]
public sealed class Comparer : ISerializable, IComparer // TypeDefIndex: 205
{
	// Fields
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x8
	private CompareInfo m_compareInfo; // 0x10

	// Methods

	// RVA: 0x228CC88 Offset: 0x228CC88 VA: 0x228CC88
	private void .ctor() { }

	// RVA: 0x228CC90 Offset: 0x228CC90 VA: 0x228CC90
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x228CD40 Offset: 0x228CD40 VA: 0x228CD40
	private static void .cctor() { }

	// RVA: 0x228B80C Offset: 0x228B80C VA: 0x228B80C Slot: 5
	public int Compare(object a, object b) { }

	// RVA: 0x228CDFC Offset: 0x228CDFC VA: 0x228CDFC Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0xBC4710 Offset: 0xBC4710 VA: 0xBC4710
[ComVisibleAttribute] // RVA: 0xBC4710 Offset: 0xBC4710 VA: 0xBC4710
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 206
{
	// Fields
	private object _key; // 0x0
	private object _value; // 0x8

	// Properties
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0xD68198 Offset: 0xD68198 VA: 0xD68198
	public void .ctor(object key, object value) { }

	// RVA: 0xD681A0 Offset: 0xD681A0 VA: 0xD681A0
	public object get_Key() { }

	// RVA: 0xD681A8 Offset: 0xD681A8 VA: 0xD681A8
	public object get_Value() { }
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0xBC477C Offset: 0xBC477C VA: 0xBC477C
[DebuggerDisplayAttribute] // RVA: 0xBC477C Offset: 0xBC477C VA: 0xBC477C
[DefaultMemberAttribute] // RVA: 0xBC477C Offset: 0xBC477C VA: 0xBC477C
[ComVisibleAttribute] // RVA: 0xBC477C Offset: 0xBC477C VA: 0xBC477C
[Serializable]
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback // TypeDefIndex: 207
{
	// Fields
	private const int CHAIN_MARKER = -2147483648;
	private int inUse; // 0x10
	private int modificationCount; // 0x14
	private float loadFactor; // 0x18
	private Hashtable.Slot[] table; // 0x20
	private int[] hashes; // 0x28
	private int threshold; // 0x30
	private Hashtable.HashKeys hashKeys; // 0x38
	private Hashtable.HashValues hashValues; // 0x40
	private IHashCodeProvider hcpRef; // 0x48
	private IComparer comparerRef; // 0x50
	private SerializationInfo serializationInfo; // 0x58
	private IEqualityComparer equalityComparer; // 0x60
	private static readonly int[] primeTbl; // 0x0

	// Properties
	[ObsoleteAttribute] // RVA: 0xBCEFF8 Offset: 0xBCEFF8 VA: 0xBCEFF8
	protected IComparer comparer { set; }
	[ObsoleteAttribute] // RVA: 0xBCF030 Offset: 0xBCF030 VA: 0xBCF030
	protected IHashCodeProvider hcp { set; }
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x227A404 Offset: 0x227A404 VA: 0x227A404
	public void .ctor() { }

	[ObsoleteAttribute] // RVA: 0xBCC684 Offset: 0xBCC684 VA: 0xBCC684
	// RVA: 0x228CF6C Offset: 0x228CF6C VA: 0x228CF6C
	public void .ctor(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x228CF60 Offset: 0x228CF60 VA: 0x228CF60
	public void .ctor(int capacity, float loadFactor) { }

	// RVA: 0x228D37C Offset: 0x228D37C VA: 0x228D37C
	public void .ctor(int capacity) { }

	// RVA: 0x228D38C Offset: 0x228D38C VA: 0x228D38C
	internal void .ctor(Hashtable source) { }

	[ObsoleteAttribute] // RVA: 0xBCC6BC Offset: 0xBCC6BC VA: 0xBCC6BC
	// RVA: 0x228D570 Offset: 0x228D570 VA: 0x228D570
	public void .ctor(int capacity, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0xBCC6F4 Offset: 0xBCC6F4 VA: 0xBCC6F4
	// RVA: 0x228D578 Offset: 0x228D578 VA: 0x228D578
	public void .ctor(IDictionary d, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x228D8D8 Offset: 0x228D8D8 VA: 0x228D8D8
	public void .ctor(IDictionary d, float loadFactor) { }

	// RVA: 0x228D8E4 Offset: 0x228D8E4 VA: 0x228D8E4
	public void .ctor(IDictionary d) { }

	[ObsoleteAttribute] // RVA: 0xBCC72C Offset: 0xBCC72C VA: 0xBCC72C
	// RVA: 0x228D8F4 Offset: 0x228D8F4 VA: 0x228D8F4
	public void .ctor(IDictionary d, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0xBCC764 Offset: 0xBCC764 VA: 0xBCC764
	// RVA: 0x228D8FC Offset: 0x228D8FC VA: 0x228D8FC
	public void .ctor(IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x228D918 Offset: 0x228D918 VA: 0x228D918
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x228D944 Offset: 0x228D944 VA: 0x228D944
	public void .ctor(int capacity, IEqualityComparer equalityComparer) { }

	// RVA: 0x228D978 Offset: 0x228D978 VA: 0x228D978
	public void .ctor(int capacity, float loadFactor, IEqualityComparer equalityComparer) { }

	// RVA: 0x228D9A8 Offset: 0x228D9A8 VA: 0x228D9A8
	private static void .cctor() { }

	// RVA: 0x228DA24 Offset: 0x228DA24 VA: 0x228DA24 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x228D374 Offset: 0x228D374 VA: 0x228D374
	protected void set_comparer(IComparer value) { }

	// RVA: 0x228D36C Offset: 0x228D36C VA: 0x228D36C
	protected void set_hcp(IHashCodeProvider value) { }

	// RVA: 0x228DA8C Offset: 0x228DA8C VA: 0x228DA8C Slot: 23
	public virtual int get_Count() { }

	// RVA: 0x228DA94 Offset: 0x228DA94 VA: 0x228DA94 Slot: 24
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x228DA9C Offset: 0x228DA9C VA: 0x228DA9C Slot: 25
	public virtual object get_SyncRoot() { }

	// RVA: 0x228DAA0 Offset: 0x228DAA0 VA: 0x228DAA0 Slot: 26
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x228DAA8 Offset: 0x228DAA8 VA: 0x228DAA8 Slot: 27
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x228DAB0 Offset: 0x228DAB0 VA: 0x228DAB0 Slot: 28
	public virtual ICollection get_Keys() { }

	// RVA: 0x228DB20 Offset: 0x228DB20 VA: 0x228DB20 Slot: 29
	public virtual ICollection get_Values() { }

	// RVA: 0x228DB90 Offset: 0x228DB90 VA: 0x228DB90 Slot: 30
	public virtual object get_Item(object key) { }

	// RVA: 0x228DD58 Offset: 0x228DD58 VA: 0x228DD58 Slot: 31
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x228E1A4 Offset: 0x228E1A4 VA: 0x228E1A4 Slot: 32
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x228E464 Offset: 0x228E464 VA: 0x228E464 Slot: 33
	public virtual void Add(object key, object value) { }

	[ReliabilityContractAttribute] // RVA: 0xBCC79C Offset: 0xBCC79C VA: 0xBCC79C
	// RVA: 0x228E46C Offset: 0x228E46C VA: 0x228E46C Slot: 34
	public virtual void Clear() { }

	// RVA: 0x228E564 Offset: 0x228E564 VA: 0x228E564 Slot: 35
	public virtual bool Contains(object key) { }

	// RVA: 0x228E744 Offset: 0x228E744 VA: 0x228E744 Slot: 36
	public virtual IDictionaryEnumerator GetEnumerator() { }

	[ReliabilityContractAttribute] // RVA: 0xBCC7B4 Offset: 0xBCC7B4 VA: 0xBCC7B4
	// RVA: 0x228E7AC Offset: 0x228E7AC VA: 0x228E7AC Slot: 37
	public virtual void Remove(object key) { }

	// RVA: 0x228E938 Offset: 0x228E938 VA: 0x228E938 Slot: 38
	public virtual bool ContainsKey(object key) { }

	// RVA: 0x228E948 Offset: 0x228E948 VA: 0x228E948 Slot: 39
	public virtual object Clone() { }

	// RVA: 0x228E9A8 Offset: 0x228E9A8 VA: 0x228E9A8 Slot: 40
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[MonoTODOAttribute] // RVA: 0xBCC7CC Offset: 0xBCC7CC VA: 0xBCC7CC
	// RVA: 0x228ED20 Offset: 0x228ED20 VA: 0x228ED20 Slot: 41
	public virtual void OnDeserialization(object sender) { }

	// RVA: 0x228F54C Offset: 0x228F54C VA: 0x228F54C
	public static Hashtable Synchronized(Hashtable table) { }

	// RVA: 0x228F5F4 Offset: 0x228F5F4 VA: 0x228F5F4 Slot: 42
	protected virtual int GetHash(object key) { }

	// RVA: 0x228F73C Offset: 0x228F73C VA: 0x228F73C Slot: 43
	protected virtual bool KeyEquals(object item, object key) { }

	// RVA: 0x228F4FC Offset: 0x228F4FC VA: 0x228F4FC
	private void AdjustThreshold() { }

	// RVA: 0x228D2D0 Offset: 0x228D2D0 VA: 0x228D2D0
	private void SetTable(Hashtable.Slot[] table, int[] hashes) { }

	// RVA: 0x228E580 Offset: 0x228E580 VA: 0x228E580
	private int Find(object key) { }

	// RVA: 0x228F8F8 Offset: 0x228F8F8 VA: 0x228F8F8
	private void Rehash() { }

	// RVA: 0x228DD60 Offset: 0x228DD60 VA: 0x228DD60
	private void PutImpl(object key, object value, bool overwrite) { }

	// RVA: 0x228EB8C Offset: 0x228EB8C VA: 0x228EB8C
	private void CopyToArray(Array arr, int i, Hashtable.EnumeratorMode mode) { }

	// RVA: 0x228FBCC Offset: 0x228FBCC VA: 0x228FBCC
	internal static bool TestPrime(int x) { }

	// RVA: 0x228FC44 Offset: 0x228FC44 VA: 0x228FC44
	internal static int CalcPrime(int x) { }

	// RVA: 0x228D154 Offset: 0x228D154 VA: 0x228D154
	internal static int ToPrime(int x) { }
}

// Namespace: 
[Serializable]
internal struct Hashtable.Slot // TypeDefIndex: 208
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x8
}

// Namespace: 
[Serializable]
internal class Hashtable.KeyMarker // TypeDefIndex: 209
{
	// Fields
	public static readonly Hashtable.KeyMarker Removed; // 0x0

	// Methods

	// RVA: 0x2525278 Offset: 0x2525278 VA: 0x2525278
	public void .ctor() { }

	// RVA: 0x2525280 Offset: 0x2525280 VA: 0x2525280
	private static void .cctor() { }
}

// Namespace: 
private enum Hashtable.EnumeratorMode // TypeDefIndex: 210
{
	// Fields
	public int value__; // 0x0
	public const Hashtable.EnumeratorMode KEY_MODE = 0;
	public const Hashtable.EnumeratorMode VALUE_MODE = 1;
	public const Hashtable.EnumeratorMode ENTRY_MODE = 2;
}

// Namespace: 
[Serializable]
private sealed class Hashtable.Enumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 211
{
	// Fields
	private Hashtable host; // 0x10
	private int stamp; // 0x18
	private int pos; // 0x1C
	private int size; // 0x20
	private Hashtable.EnumeratorMode mode; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30
	private static readonly string xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x2524658 Offset: 0x2524658 VA: 0x2524658
