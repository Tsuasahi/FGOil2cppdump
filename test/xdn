	public virtual void RemoveAt(int index) { }

	// RVA: 0x10D93EC Offset: 0x10D93EC VA: 0x10D93EC Slot: 40
	public virtual void Reverse() { }

	// RVA: 0x10D9424 Offset: 0x10D9424 VA: 0x10D9424 Slot: 41
	public virtual void CopyTo(Array array) { }

	// RVA: 0x10D9434 Offset: 0x10D9434 VA: 0x10D9434 Slot: 42
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x10D945C Offset: 0x10D945C VA: 0x10D945C Slot: 43
	public virtual void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x10D9558 Offset: 0x10D9558 VA: 0x10D9558 Slot: 44
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x10D9660 Offset: 0x10D9660 VA: 0x10D9660 Slot: 45
	public virtual void AddRange(ICollection c) { }

	// RVA: 0x10D9680 Offset: 0x10D9680 VA: 0x10D9680 Slot: 46
	public virtual void Sort() { }

	// RVA: 0x10D96E8 Offset: 0x10D96E8 VA: 0x10D96E8 Slot: 47
	public virtual void Sort(IComparer comparer) { }

	// RVA: 0x10D9708 Offset: 0x10D9708 VA: 0x10D9708 Slot: 48
	public virtual object[] ToArray() { }

	// RVA: 0x10D977C Offset: 0x10D977C VA: 0x10D977C Slot: 49
	public virtual Array ToArray(Type type) { }

	// RVA: 0x10D97C8 Offset: 0x10D97C8 VA: 0x10D97C8 Slot: 50
	public virtual object Clone() { }

	// RVA: 0x10D8388 Offset: 0x10D8388 VA: 0x10D8388
	internal static void ThrowNewArgumentOutOfRangeException(string name, object actual, string message) { }

	// RVA: 0x10D9840 Offset: 0x10D9840 VA: 0x10D9840
	public static ArrayList Synchronized(ArrayList list) { }

	// RVA: 0x10D9948 Offset: 0x10D9948 VA: 0x10D9948
	public static ArrayList ReadOnly(ArrayList list) { }
}

// Namespace: 
private sealed class ArrayList.SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 194
{
	// Fields
	private ArrayList list; // 0x10
	private int index; // 0x18
	private int version; // 0x1C
	private object currentElement; // 0x20
	private static object endFlag; // 0x0

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x10D95B8 Offset: 0x10D95B8 VA: 0x10D95B8
	public void .ctor(ArrayList list) { }

	// RVA: 0x10DA990 Offset: 0x10DA990 VA: 0x10DA990
	private static void .cctor() { }

	// RVA: 0x10DA9FC Offset: 0x10DA9FC VA: 0x10DA9FC Slot: 7
	public object Clone() { }

	// RVA: 0x10DAA04 Offset: 0x10DAA04 VA: 0x10DAA04 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x10DAB54 Offset: 0x10DAB54 VA: 0x10DAB54 Slot: 4
	public object get_Current() { }

	// RVA: 0x10DAC38 Offset: 0x10DAC38 VA: 0x10DAC38 Slot: 6
	public void Reset() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC306B4 Offset: 0xC306B4 VA: 0xC306B4
[Serializable]
private class ArrayList.ArrayListWrapper : ArrayList // TypeDefIndex: 195
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x28

	// Properties
	public override object Item { get; set; }
	public override int Count { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }

	// Methods

	// RVA: 0x10D9A0C Offset: 0x10D9A0C VA: 0x10D9A0C
	public void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x10D9A84 Offset: 0x10D9A84 VA: 0x10D9A84 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x10D9AC4 Offset: 0x10D9AC4 VA: 0x10D9AC4 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x10D9B14 Offset: 0x10D9B14 VA: 0x10D9B14 Slot: 23
	public override int get_Count() { }

	// RVA: 0x10D9B4C Offset: 0x10D9B4C VA: 0x10D9B4C Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x10D9B84 Offset: 0x10D9B84 VA: 0x10D9B84 Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x10D9BC4 Offset: 0x10D9BC4 VA: 0x10D9BC4 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x10D9BFC Offset: 0x10D9BFC VA: 0x10D9BFC Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x10D9C34 Offset: 0x10D9C34 VA: 0x10D9C34 Slot: 28
	public override bool get_IsSynchronized() { }

	// RVA: 0x10D9C6C Offset: 0x10D9C6C VA: 0x10D9C6C Slot: 29
	public override object get_SyncRoot() { }

	// RVA: 0x10D9CA4 Offset: 0x10D9CA4 VA: 0x10D9CA4 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x10D9CE4 Offset: 0x10D9CE4 VA: 0x10D9CE4 Slot: 31
	public override void Clear() { }

	// RVA: 0x10D9D1C Offset: 0x10D9D1C VA: 0x10D9D1C Slot: 32
	public override bool Contains(object value) { }

	// RVA: 0x10D9D5C Offset: 0x10D9D5C VA: 0x10D9D5C Slot: 33
	public override int IndexOf(object value) { }

	// RVA: 0x10D9D9C Offset: 0x10D9D9C VA: 0x10D9D9C Slot: 34
	public override int IndexOf(object value, int startIndex) { }

	// RVA: 0x10D9DEC Offset: 0x10D9DEC VA: 0x10D9DEC Slot: 35
	public override int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x10D9E44 Offset: 0x10D9E44 VA: 0x10D9E44 Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x10D9E94 Offset: 0x10D9E94 VA: 0x10D9E94 Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x10D9EE4 Offset: 0x10D9EE4 VA: 0x10D9EE4 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x10D9F24 Offset: 0x10D9F24 VA: 0x10D9F24 Slot: 39
	public override void RemoveAt(int index) { }

	// RVA: 0x10D9F64 Offset: 0x10D9F64 VA: 0x10D9F64 Slot: 40
	public override void Reverse() { }

	// RVA: 0x10D9F9C Offset: 0x10D9F9C VA: 0x10D9F9C Slot: 41
	public override void CopyTo(Array array) { }

	// RVA: 0x10D9FDC Offset: 0x10D9FDC VA: 0x10D9FDC Slot: 42
	public override void CopyTo(Array array, int index) { }

	// RVA: 0x10DA02C Offset: 0x10DA02C VA: 0x10DA02C Slot: 43
	public override void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x10DA094 Offset: 0x10DA094 VA: 0x10DA094 Slot: 44
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x10DA0CC Offset: 0x10DA0CC VA: 0x10DA0CC Slot: 45
	public override void AddRange(ICollection c) { }

	// RVA: 0x10DA10C Offset: 0x10DA10C VA: 0x10DA10C Slot: 50
	public override object Clone() { }

	// RVA: 0x10DA144 Offset: 0x10DA144 VA: 0x10DA144 Slot: 46
	public override void Sort() { }

	// RVA: 0x10DA17C Offset: 0x10DA17C VA: 0x10DA17C Slot: 47
	public override void Sort(IComparer comparer) { }

	// RVA: 0x10DA1BC Offset: 0x10DA1BC VA: 0x10DA1BC Slot: 48
	public override object[] ToArray() { }

	// RVA: 0x10DA1F4 Offset: 0x10DA1F4 VA: 0x10DA1F4 Slot: 49
	public override Array ToArray(Type elementType) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC306EC Offset: 0xC306EC VA: 0xC306EC
[Serializable]
private sealed class ArrayList.SynchronizedArrayListWrapper : ArrayList.ArrayListWrapper // TypeDefIndex: 196
{
	// Fields
	private object m_SyncRoot; // 0x30

	// Properties
	public override object Item { get; set; }
	public override int Count { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }

	// Methods

	// RVA: 0x10D9900 Offset: 0x10D9900 VA: 0x10D9900
	internal void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x10DAD1C Offset: 0x10DAD1C VA: 0x10DAD1C Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x10DADD0 Offset: 0x10DADD0 VA: 0x10DADD0 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x10DAE94 Offset: 0x10DAE94 VA: 0x10DAE94 Slot: 23
	public override int get_Count() { }

	// RVA: 0x10DAF38 Offset: 0x10DAF38 VA: 0x10DAF38 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x10DAFDC Offset: 0x10DAFDC VA: 0x10DAFDC Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x10DB098 Offset: 0x10DB098 VA: 0x10DB098 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x10DB13C Offset: 0x10DB13C VA: 0x10DB13C Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x10DB1E0 Offset: 0x10DB1E0 VA: 0x10DB1E0 Slot: 28
	public override bool get_IsSynchronized() { }

	// RVA: 0x10DB1E8 Offset: 0x10DB1E8 VA: 0x10DB1E8 Slot: 29
	public override object get_SyncRoot() { }

	// RVA: 0x10DB1F0 Offset: 0x10DB1F0 VA: 0x10DB1F0 Slot: 30
	public override int Add(object value) { }

	// RVA: 0x10DB2A4 Offset: 0x10DB2A4 VA: 0x10DB2A4 Slot: 31
	public override void Clear() { }

	// RVA: 0x10DB348 Offset: 0x10DB348 VA: 0x10DB348 Slot: 32
	public override bool Contains(object value) { }

	// RVA: 0x10DB3FC Offset: 0x10DB3FC VA: 0x10DB3FC Slot: 33
	public override int IndexOf(object value) { }

	// RVA: 0x10DB4B0 Offset: 0x10DB4B0 VA: 0x10DB4B0 Slot: 34
	public override int IndexOf(object value, int startIndex) { }

	// RVA: 0x10DB56C Offset: 0x10DB56C VA: 0x10DB56C Slot: 35
	public override int IndexOf(object value, int startIndex, int count) { }

	// RVA: 0x10DB638 Offset: 0x10DB638 VA: 0x10DB638 Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x10DB6FC Offset: 0x10DB6FC VA: 0x10DB6FC Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x10DB7C0 Offset: 0x10DB7C0 VA: 0x10DB7C0 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x10DB87C Offset: 0x10DB87C VA: 0x10DB87C Slot: 39
	public override void RemoveAt(int index) { }

	// RVA: 0x10DB938 Offset: 0x10DB938 VA: 0x10DB938 Slot: 40
	public override void Reverse() { }

	// RVA: 0x10DB9DC Offset: 0x10DB9DC VA: 0x10DB9DC Slot: 41
	public override void CopyTo(Array array) { }

	// RVA: 0x10DBA98 Offset: 0x10DBA98 VA: 0x10DBA98 Slot: 42
	public override void CopyTo(Array array, int index) { }

	// RVA: 0x10DBB5C Offset: 0x10DBB5C VA: 0x10DBB5C Slot: 43
	public override void CopyTo(int index, Array array, int arrayIndex, int count) { }

	// RVA: 0x10DBC40 Offset: 0x10DBC40 VA: 0x10DBC40 Slot: 44
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x10DBCE4 Offset: 0x10DBCE4 VA: 0x10DBCE4 Slot: 45
	public override void AddRange(ICollection c) { }

	// RVA: 0x10DBDA0 Offset: 0x10DBDA0 VA: 0x10DBDA0 Slot: 50
	public override object Clone() { }

	// RVA: 0x10DBE44 Offset: 0x10DBE44 VA: 0x10DBE44 Slot: 46
	public override void Sort() { }

	// RVA: 0x10DBEE8 Offset: 0x10DBEE8 VA: 0x10DBEE8 Slot: 47
	public override void Sort(IComparer comparer) { }

	// RVA: 0x10DBFA4 Offset: 0x10DBFA4 VA: 0x10DBFA4 Slot: 48
	public override object[] ToArray() { }

	// RVA: 0x10DC048 Offset: 0x10DC048 VA: 0x10DC048 Slot: 49
	public override Array ToArray(Type elementType) { }
}

// Namespace: 
[Serializable]
private class ArrayList.FixedSizeArrayListWrapper : ArrayList.ArrayListWrapper // TypeDefIndex: 197
{
	// Properties
	protected virtual string ErrorMessage { get; }
	public override int Capacity { get; set; }
	public override bool IsFixedSize { get; }

	// Methods

	// RVA: 0x10DA234 Offset: 0x10DA234 VA: 0x10DA234
	public void .ctor(ArrayList innerList) { }

	// RVA: 0x10DA238 Offset: 0x10DA238 VA: 0x10DA238 Slot: 51
	protected virtual string get_ErrorMessage() { }

	// RVA: 0x10DA280 Offset: 0x10DA280 VA: 0x10DA280 Slot: 24
	public override int get_Capacity() { }

	// RVA: 0x10DA2B8 Offset: 0x10DA2B8 VA: 0x10DA2B8 Slot: 25
	public override void set_Capacity(int value) { }

	// RVA: 0x10DA344 Offset: 0x10DA344 VA: 0x10DA344 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x10DA34C Offset: 0x10DA34C VA: 0x10DA34C Slot: 30
	public override int Add(object value) { }

	// RVA: 0x10DA3D8 Offset: 0x10DA3D8 VA: 0x10DA3D8 Slot: 45
	public override void AddRange(ICollection c) { }

	// RVA: 0x10DA464 Offset: 0x10DA464 VA: 0x10DA464 Slot: 31
	public override void Clear() { }

	// RVA: 0x10DA4F0 Offset: 0x10DA4F0 VA: 0x10DA4F0 Slot: 36
	public override void Insert(int index, object value) { }

	// RVA: 0x10DA57C Offset: 0x10DA57C VA: 0x10DA57C Slot: 37
	public override void InsertRange(int index, ICollection c) { }

	// RVA: 0x10DA608 Offset: 0x10DA608 VA: 0x10DA608 Slot: 38
	public override void Remove(object value) { }

	// RVA: 0x10DA694 Offset: 0x10DA694 VA: 0x10DA694 Slot: 39
	public override void RemoveAt(int index) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC30724 Offset: 0xC30724 VA: 0xC30724
[Serializable]
private sealed class ArrayList.ReadOnlyArrayListWrapper : ArrayList.FixedSizeArrayListWrapper // TypeDefIndex: 198
{
	// Properties
	protected override string ErrorMessage { get; }
	public override bool IsReadOnly { get; }
	public override object Item { get; set; }

	// Methods

	// RVA: 0x10D9A08 Offset: 0x10D9A08 VA: 0x10D9A08
	public void .ctor(ArrayList innerArrayList) { }

	// RVA: 0x10DA720 Offset: 0x10DA720 VA: 0x10DA720 Slot: 51
	protected override string get_ErrorMessage() { }

	// RVA: 0x10DA768 Offset: 0x10DA768 VA: 0x10DA768 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x10DA770 Offset: 0x10DA770 VA: 0x10DA770 Slot: 21
	public override object get_Item(int index) { }

	// RVA: 0x10DA7B0 Offset: 0x10DA7B0 VA: 0x10DA7B0 Slot: 22
	public override void set_Item(int index, object value) { }

	// RVA: 0x10DA828 Offset: 0x10DA828 VA: 0x10DA828 Slot: 40
	public override void Reverse() { }

	// RVA: 0x10DA8A0 Offset: 0x10DA8A0 VA: 0x10DA8A0 Slot: 46
	public override void Sort() { }

	// RVA: 0x10DA918 Offset: 0x10DA918 VA: 0x10DA918 Slot: 47
	public override void Sort(IComparer comparer) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC3075C Offset: 0xC3075C VA: 0xC3075C
[DefaultMemberAttribute] // RVA: 0xC3075C Offset: 0xC3075C VA: 0xC3075C
[Serializable]
public sealed class BitArray : IEnumerable, ICloneable, ICollection // TypeDefIndex: 199
{
	// Fields
	private int[] m_array; // 0x10
	private int m_length; // 0x18
	private int _version; // 0x1C

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public bool Item { get; set; }
	public int Length { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x10DC0FC Offset: 0x10DC0FC VA: 0x10DC0FC
	public void .ctor(BitArray bits) { }

	// RVA: 0x10DC268 Offset: 0x10DC268 VA: 0x10DC268
	public void .ctor(int length) { }

	// RVA: 0x10DC330 Offset: 0x10DC330 VA: 0x10DC330
	private byte getByte(int byteIndex) { }

	// RVA: 0x10DC3B8 Offset: 0x10DC3B8 VA: 0x10DC3B8 Slot: 6
	public int get_Count() { }

	// RVA: 0x10DC3C0 Offset: 0x10DC3C0 VA: 0x10DC3C0 Slot: 7
	public bool get_IsSynchronized() { }

	// RVA: 0x10DC3C8 Offset: 0x10DC3C8 VA: 0x10DC3C8
	public bool get_Item(int index) { }

	// RVA: 0x10DC4A8 Offset: 0x10DC4A8 VA: 0x10DC4A8
	public void set_Item(int index, bool value) { }

	// RVA: 0x10DC5B0 Offset: 0x10DC5B0 VA: 0x10DC5B0
	public int get_Length() { }

	// RVA: 0x10DC5B8 Offset: 0x10DC5B8 VA: 0x10DC5B8 Slot: 8
	public object get_SyncRoot() { }

	// RVA: 0x10DC5BC Offset: 0x10DC5BC VA: 0x10DC5BC Slot: 5
	public object Clone() { }

	// RVA: 0x10DC61C Offset: 0x10DC61C VA: 0x10DC61C Slot: 9
	public void CopyTo(Array array, int index) { }

	// RVA: 0x10DC3CC Offset: 0x10DC3CC VA: 0x10DC3CC
	public bool Get(int index) { }

	// RVA: 0x10DC4B0 Offset: 0x10DC4B0 VA: 0x10DC4B0
	public void Set(int index, bool value) { }

	// RVA: 0x10DCA20 Offset: 0x10DCA20 VA: 0x10DCA20 Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
[Serializable]
private class BitArray.BitArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 200
{
	// Fields
	private BitArray _bitArray; // 0x10
	private bool _current; // 0x18
	private int _index; // 0x1C
	private int _version; // 0x20

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x10DCA80 Offset: 0x10DCA80 VA: 0x10DCA80
	public void .ctor(BitArray ba) { }

	// RVA: 0x10DCAC8 Offset: 0x10DCAC8 VA: 0x10DCAC8 Slot: 7
	public object Clone() { }

	// RVA: 0x10DCAD0 Offset: 0x10DCAD0 VA: 0x10DCAD0 Slot: 4
	public object get_Current() { }

	// RVA: 0x10DCBBC Offset: 0x10DCBBC VA: 0x10DCBBC Slot: 5
	public bool MoveNext() { }

	// RVA: 0x10DCCF4 Offset: 0x10DCCF4 VA: 0x10DCCF4 Slot: 6
	public void Reset() { }

	// RVA: 0x10DCC5C Offset: 0x10DCC5C VA: 0x10DCC5C
	private void checkVersion() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC307AC Offset: 0xC307AC VA: 0xC307AC
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 201
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x0
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x8
	private CultureInfo culture; // 0x10

	// Properties
	public static CaseInsensitiveComparer DefaultInvariant { get; }

	// Methods

	// RVA: 0x10DCD1C Offset: 0x10DCD1C VA: 0x10DCD1C
	public void .ctor() { }

	// RVA: 0x10DCD94 Offset: 0x10DCD94 VA: 0x10DCD94
	private void .ctor(bool invariant) { }

	// RVA: 0x10DCD9C Offset: 0x10DCD9C VA: 0x10DCD9C
	private static void .cctor() { }

	// RVA: 0x10DCE1C Offset: 0x10DCE1C VA: 0x10DCE1C
	public static CaseInsensitiveComparer get_DefaultInvariant() { }

	// RVA: 0x10DCE84 Offset: 0x10DCE84 VA: 0x10DCE84 Slot: 4
	public int Compare(object a, object b) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC307C0 Offset: 0xC307C0 VA: 0xC307C0
[ObsoleteAttribute] // RVA: 0xC307C0 Offset: 0xC307C0 VA: 0xC307C0
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 202
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x0
	private static readonly object sync; // 0x8
	private TextInfo m_text; // 0x10

	// Properties
	public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; }

	// Methods

	// RVA: 0x10DD25C Offset: 0x10DD25C VA: 0x10DD25C
	public void .ctor() { }

	// RVA: 0x10DD418 Offset: 0x10DD418 VA: 0x10DD418
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x10DD528 Offset: 0x10DD528 VA: 0x10DD528
	private static void .cctor() { }

	// RVA: 0x10DD35C Offset: 0x10DD35C VA: 0x10DD35C
	private static bool AreEqual(CultureInfo a, CultureInfo b) { }

	// RVA: 0x10DD5EC Offset: 0x10DD5EC VA: 0x10DD5EC
	private static bool AreEqual(TextInfo info, CultureInfo culture) { }

	// RVA: 0x10DD6A4 Offset: 0x10DD6A4 VA: 0x10DD6A4
	public static CaseInsensitiveHashCodeProvider get_DefaultInvariant() { }

	// RVA: 0x10DD70C Offset: 0x10DD70C VA: 0x10DD70C Slot: 4
	public int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30810 Offset: 0xC30810 VA: 0xC30810
[Serializable]
public abstract class CollectionBase : IEnumerable, ICollection, IList // TypeDefIndex: 203
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	protected ArrayList InnerList { get; }
	protected IList List { get; }

	// Methods

	// RVA: 0x10C5EC4 Offset: 0x10C5EC4 VA: 0x10C5EC4
	protected void .ctor() { }

	// RVA: 0x10DD994 Offset: 0x10DD994 VA: 0x10DD994 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x10DD9E4 Offset: 0x10DD9E4 VA: 0x10DD9E4 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x10DDA1C Offset: 0x10DDA1C VA: 0x10DDA1C Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x10DDA54 Offset: 0x10DDA54 VA: 0x10DDA54 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x10DDC00 Offset: 0x10DDC00 VA: 0x10DDC00 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x10DDC40 Offset: 0x10DDC40 VA: 0x10DDC40 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x10DDC80 Offset: 0x10DDC80 VA: 0x10DDC80 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x10DDE04 Offset: 0x10DDE04 VA: 0x10DDE04 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x10DDF4C Offset: 0x10DDF4C VA: 0x10DDF4C Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x10DDF84 Offset: 0x10DDF84 VA: 0x10DDF84 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x10DDFBC Offset: 0x10DDFBC VA: 0x10DDFBC Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x10DDFFC Offset: 0x10DDFFC VA: 0x10DDFFC Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x10DE22C Offset: 0x10DE22C VA: 0x10DE22C Slot: 5
	public int get_Count() { }

	// RVA: 0x10DE264 Offset: 0x10DE264 VA: 0x10DE264 Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0x10DE29C Offset: 0x10DE29C VA: 0x10DE29C Slot: 14
	public void Clear() { }

	// RVA: 0x10DE300 Offset: 0x10DE300 VA: 0x10DE300 Slot: 19
	public void RemoveAt(int index) { }

	// RVA: 0x10C6028 Offset: 0x10C6028 VA: 0x10C6028
	protected ArrayList get_InnerList() { }

	// RVA: 0x10DE3CC Offset: 0x10DE3CC VA: 0x10DE3CC
	protected IList get_List() { }

	// RVA: 0x10DE3D0 Offset: 0x10DE3D0 VA: 0x10DE3D0 Slot: 20
	protected virtual void OnClear() { }

	// RVA: 0x10DE3D4 Offset: 0x10DE3D4 VA: 0x10DE3D4 Slot: 21
	protected virtual void OnClearComplete() { }

	// RVA: 0x10DE3D8 Offset: 0x10DE3D8 VA: 0x10DE3D8 Slot: 22
	protected virtual void OnInsert(int index, object value) { }

	// RVA: 0x10DE3DC Offset: 0x10DE3DC VA: 0x10DE3DC Slot: 23
	protected virtual void OnInsertComplete(int index, object value) { }

	// RVA: 0x10DE3E0 Offset: 0x10DE3E0 VA: 0x10DE3E0 Slot: 24
	protected virtual void OnRemove(int index, object value) { }

	// RVA: 0x10DE3E4 Offset: 0x10DE3E4 VA: 0x10DE3E4 Slot: 25
	protected virtual void OnRemoveComplete(int index, object value) { }

	// RVA: 0x10DE3E8 Offset: 0x10DE3E8 VA: 0x10DE3E8 Slot: 26
	protected virtual void OnSet(int index, object oldValue, object newValue) { }

	// RVA: 0x10DE3EC Offset: 0x10DE3EC VA: 0x10DE3EC Slot: 27
	protected virtual void OnSetComplete(int index, object oldValue, object newValue) { }

	// RVA: 0x10DE3F0 Offset: 0x10DE3F0 VA: 0x10DE3F0 Slot: 28
	protected virtual void OnValidate(object value) { }
}

// Namespace: System.Collections
internal sealed class CollectionDebuggerView // TypeDefIndex: 204
{}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30824 Offset: 0xC30824 VA: 0xC30824
[Serializable]
public sealed class Comparer : ISerializable, IComparer // TypeDefIndex: 205
{
	// Fields
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x8
	private CompareInfo m_compareInfo; // 0x10

	// Methods

	// RVA: 0x10DE474 Offset: 0x10DE474 VA: 0x10DE474
	private void .ctor() { }

	// RVA: 0x10DE47C Offset: 0x10DE47C VA: 0x10DE47C
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x10DE52C Offset: 0x10DE52C VA: 0x10DE52C
	private static void .cctor() { }

	// RVA: 0x10DCFF8 Offset: 0x10DCFF8 VA: 0x10DCFF8 Slot: 5
	public int Compare(object a, object b) { }

	// RVA: 0x10DE5E8 Offset: 0x10DE5E8 VA: 0x10DE5E8 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0xC30838 Offset: 0xC30838 VA: 0xC30838
[ComVisibleAttribute] // RVA: 0xC30838 Offset: 0xC30838 VA: 0xC30838
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 206
{
	// Fields
	private object _key; // 0x0
	private object _value; // 0x8

	// Properties
	public object Key { get; }
	public object Value { get; }

	// Methods

	// RVA: 0xBBB120 Offset: 0xBBB120 VA: 0xBBB120
	public void .ctor(object key, object value) { }

	// RVA: 0xBBB128 Offset: 0xBBB128 VA: 0xBBB128
	public object get_Key() { }

	// RVA: 0xBBB130 Offset: 0xBBB130 VA: 0xBBB130
	public object get_Value() { }
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0xC308A4 Offset: 0xC308A4 VA: 0xC308A4
[DebuggerDisplayAttribute] // RVA: 0xC308A4 Offset: 0xC308A4 VA: 0xC308A4
[DefaultMemberAttribute] // RVA: 0xC308A4 Offset: 0xC308A4 VA: 0xC308A4
[ComVisibleAttribute] // RVA: 0xC308A4 Offset: 0xC308A4 VA: 0xC308A4
[Serializable]
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback // TypeDefIndex: 207
{
	// Fields
	private const int CHAIN_MARKER = -2147483648;
	private int inUse; // 0x10
	private int modificationCount; // 0x14
	private float loadFactor; // 0x18
	private Hashtable.Slot[] table; // 0x20
	private int[] hashes; // 0x28
	private int threshold; // 0x30
	private Hashtable.HashKeys hashKeys; // 0x38
	private Hashtable.HashValues hashValues; // 0x40
	private IHashCodeProvider hcpRef; // 0x48
	private IComparer comparerRef; // 0x50
	private SerializationInfo serializationInfo; // 0x58
	private IEqualityComparer equalityComparer; // 0x60
	private static readonly int[] primeTbl; // 0x0

	// Properties
	[ObsoleteAttribute] // RVA: 0xC3B120 Offset: 0xC3B120 VA: 0xC3B120
	protected IComparer comparer { set; }
	[ObsoleteAttribute] // RVA: 0xC3B158 Offset: 0xC3B158 VA: 0xC3B158
	protected IHashCodeProvider hcp { set; }
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x10CBBF0 Offset: 0x10CBBF0 VA: 0x10CBBF0
	public void .ctor() { }

	[ObsoleteAttribute] // RVA: 0xC387AC Offset: 0xC387AC VA: 0xC387AC
	// RVA: 0x10DE758 Offset: 0x10DE758 VA: 0x10DE758
	public void .ctor(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x10DE74C Offset: 0x10DE74C VA: 0x10DE74C
	public void .ctor(int capacity, float loadFactor) { }

	// RVA: 0x10DEB68 Offset: 0x10DEB68 VA: 0x10DEB68
	public void .ctor(int capacity) { }

	// RVA: 0x10DEB78 Offset: 0x10DEB78 VA: 0x10DEB78
	internal void .ctor(Hashtable source) { }

	[ObsoleteAttribute] // RVA: 0xC387E4 Offset: 0xC387E4 VA: 0xC387E4
	// RVA: 0x10DED5C Offset: 0x10DED5C VA: 0x10DED5C
	public void .ctor(int capacity, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0xC3881C Offset: 0xC3881C VA: 0xC3881C
	// RVA: 0x10DED64 Offset: 0x10DED64 VA: 0x10DED64
	public void .ctor(IDictionary d, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x10DF0C4 Offset: 0x10DF0C4 VA: 0x10DF0C4
	public void .ctor(IDictionary d, float loadFactor) { }

	// RVA: 0x10DF0D0 Offset: 0x10DF0D0 VA: 0x10DF0D0
	public void .ctor(IDictionary d) { }

	[ObsoleteAttribute] // RVA: 0xC38854 Offset: 0xC38854 VA: 0xC38854
	// RVA: 0x10DF0E0 Offset: 0x10DF0E0 VA: 0x10DF0E0
	public void .ctor(IDictionary d, IHashCodeProvider hcp, IComparer comparer) { }

	[ObsoleteAttribute] // RVA: 0xC3888C Offset: 0xC3888C VA: 0xC3888C
	// RVA: 0x10DF0E8 Offset: 0x10DF0E8 VA: 0x10DF0E8
	public void .ctor(IHashCodeProvider hcp, IComparer comparer) { }

	// RVA: 0x10DF104 Offset: 0x10DF104 VA: 0x10DF104
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x10DF130 Offset: 0x10DF130 VA: 0x10DF130
	public void .ctor(int capacity, IEqualityComparer equalityComparer) { }

	// RVA: 0x10DF164 Offset: 0x10DF164 VA: 0x10DF164
	public void .ctor(int capacity, float loadFactor, IEqualityComparer equalityComparer) { }

	// RVA: 0x10DF194 Offset: 0x10DF194 VA: 0x10DF194
	private static void .cctor() { }

	// RVA: 0x10DF210 Offset: 0x10DF210 VA: 0x10DF210 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x10DEB60 Offset: 0x10DEB60 VA: 0x10DEB60
	protected void set_comparer(IComparer value) { }

	// RVA: 0x10DEB58 Offset: 0x10DEB58 VA: 0x10DEB58
	protected void set_hcp(IHashCodeProvider value) { }

	// RVA: 0x10DF278 Offset: 0x10DF278 VA: 0x10DF278 Slot: 23
	public virtual int get_Count() { }

	// RVA: 0x10DF280 Offset: 0x10DF280 VA: 0x10DF280 Slot: 24
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x10DF288 Offset: 0x10DF288 VA: 0x10DF288 Slot: 25
	public virtual object get_SyncRoot() { }

	// RVA: 0x10DF28C Offset: 0x10DF28C VA: 0x10DF28C Slot: 26
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x10DF294 Offset: 0x10DF294 VA: 0x10DF294 Slot: 27
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x10DF29C Offset: 0x10DF29C VA: 0x10DF29C Slot: 28
	public virtual ICollection get_Keys() { }

	// RVA: 0x10DF30C Offset: 0x10DF30C VA: 0x10DF30C Slot: 29
	public virtual ICollection get_Values() { }

	// RVA: 0x10DF37C Offset: 0x10DF37C VA: 0x10DF37C Slot: 30
	public virtual object get_Item(object key) { }

	// RVA: 0x10DF544 Offset: 0x10DF544 VA: 0x10DF544 Slot: 31
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x10DF990 Offset: 0x10DF990 VA: 0x10DF990 Slot: 32
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x10DFC50 Offset: 0x10DFC50 VA: 0x10DFC50 Slot: 33
	public virtual void Add(object key, object value) { }

	[ReliabilityContractAttribute] // RVA: 0xC388C4 Offset: 0xC388C4 VA: 0xC388C4
	// RVA: 0x10DFC58 Offset: 0x10DFC58 VA: 0x10DFC58 Slot: 34
	public virtual void Clear() { }

	// RVA: 0x10DFD50 Offset: 0x10DFD50 VA: 0x10DFD50 Slot: 35
	public virtual bool Contains(object key) { }

	// RVA: 0x10DFF30 Offset: 0x10DFF30 VA: 0x10DFF30 Slot: 36
	public virtual IDictionaryEnumerator GetEnumerator() { }

	[ReliabilityContractAttribute] // RVA: 0xC388DC Offset: 0xC388DC VA: 0xC388DC
	// RVA: 0x10DFF98 Offset: 0x10DFF98 VA: 0x10DFF98 Slot: 37
	public virtual void Remove(object key) { }

	// RVA: 0x10E0124 Offset: 0x10E0124 VA: 0x10E0124 Slot: 38
	public virtual bool ContainsKey(object key) { }

	// RVA: 0x10E0134 Offset: 0x10E0134 VA: 0x10E0134 Slot: 39
	public virtual object Clone() { }

	// RVA: 0x10E0194 Offset: 0x10E0194 VA: 0x10E0194 Slot: 40
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[MonoTODOAttribute] // RVA: 0xC388F4 Offset: 0xC388F4 VA: 0xC388F4
	// RVA: 0x10E050C Offset: 0x10E050C VA: 0x10E050C Slot: 41
	public virtual void OnDeserialization(object sender) { }

	// RVA: 0x10E0D38 Offset: 0x10E0D38 VA: 0x10E0D38
	public static Hashtable Synchronized(Hashtable table) { }

	// RVA: 0x10E0DE0 Offset: 0x10E0DE0 VA: 0x10E0DE0 Slot: 42
	protected virtual int GetHash(object key) { }

	// RVA: 0x10E0F28 Offset: 0x10E0F28 VA: 0x10E0F28 Slot: 43
	protected virtual bool KeyEquals(object item, object key) { }

	// RVA: 0x10E0CE8 Offset: 0x10E0CE8 VA: 0x10E0CE8
	private void AdjustThreshold() { }

	// RVA: 0x10DEABC Offset: 0x10DEABC VA: 0x10DEABC
	private void SetTable(Hashtable.Slot[] table, int[] hashes) { }

	// RVA: 0x10DFD6C Offset: 0x10DFD6C VA: 0x10DFD6C
	private int Find(object key) { }

	// RVA: 0x10E10E4 Offset: 0x10E10E4 VA: 0x10E10E4
	private void Rehash() { }

	// RVA: 0x10DF54C Offset: 0x10DF54C VA: 0x10DF54C
	private void PutImpl(object key, object value, bool overwrite) { }

	// RVA: 0x10E0378 Offset: 0x10E0378 VA: 0x10E0378
	private void CopyToArray(Array arr, int i, Hashtable.EnumeratorMode mode) { }

	// RVA: 0x10E13B8 Offset: 0x10E13B8 VA: 0x10E13B8
	internal static bool TestPrime(int x) { }

	// RVA: 0x10E1430 Offset: 0x10E1430 VA: 0x10E1430
	internal static int CalcPrime(int x) { }

	// RVA: 0x10DE940 Offset: 0x10DE940 VA: 0x10DE940
	internal static int ToPrime(int x) { }
}

// Namespace: 
[Serializable]
internal struct Hashtable.Slot // TypeDefIndex: 208
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x8
}

// Namespace: 
[Serializable]
internal class Hashtable.KeyMarker // TypeDefIndex: 209
{
	// Fields
	public static readonly Hashtable.KeyMarker Removed; // 0x0

	// Methods

	// RVA: 0x121FA50 Offset: 0x121FA50 VA: 0x121FA50
	public void .ctor() { }

	// RVA: 0x121FA58 Offset: 0x121FA58 VA: 0x121FA58
	private static void .cctor() { }
}

// Namespace: 
private enum Hashtable.EnumeratorMode // TypeDefIndex: 210
{
	// Fields
	public int value__; // 0x0
	public const Hashtable.EnumeratorMode KEY_MODE = 0;
	public const Hashtable.EnumeratorMode VALUE_MODE = 1;
	public const Hashtable.EnumeratorMode ENTRY_MODE = 2;
}

// Namespace: 
[Serializable]
private sealed class Hashtable.Enumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 211
{
	// Fields
	private Hashtable host; // 0x10
	private int stamp; // 0x18
	private int pos; // 0x1C
	private int size; // 0x20
	private Hashtable.EnumeratorMode mode; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30
	private static readonly string xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x121EE30 Offset: 0x121EE30 VA: 0x121EE30
	public void .ctor(Hashtable host, Hashtable.EnumeratorMode mode) { }

	// RVA: 0x121EEEC Offset: 0x121EEEC VA: 0x121EEEC
	private static void .cctor() { }

	// RVA: 0x121EF48 Offset: 0x121EF48 VA: 0x121EF48
	private void FailFast() { }

	// RVA: 0x121EEC0 Offset: 0x121EEC0 VA: 0x121EEC0 Slot: 6
	public void Reset() { }

	// RVA: 0x121F010 Offset: 0x121F010 VA: 0x121F010 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x121F148 Offset: 0x121F148 VA: 0x121F148 Slot: 7
	public DictionaryEntry get_Entry() { }

	// RVA: 0x121F1F0 Offset: 0x121F1F0 VA: 0x121F1F0 Slot: 8
	public object get_Key() { }

	// RVA: 0x121F27C Offset: 0x121F27C VA: 0x121F27C Slot: 9
	public object get_Value() { }

	// RVA: 0x121F308 Offset: 0x121F308 VA: 0x121F308 Slot: 4
	public object get_Current() { }
}

