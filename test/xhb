	// RVA: 0x2569698 Offset: 0x2569698 VA: 0x2569698
	public static float Log(float f) { }

	// RVA: 0x25696B4 Offset: 0x25696B4 VA: 0x25696B4
	public static float Log10(float f) { }

	// RVA: 0x25696D0 Offset: 0x25696D0 VA: 0x25696D0
	public static float Ceil(float f) { }

	// RVA: 0x25696D8 Offset: 0x25696D8 VA: 0x25696D8
	public static float Floor(float f) { }

	// RVA: 0x25696E0 Offset: 0x25696E0 VA: 0x25696E0
	public static float Round(float f) { }

	// RVA: 0x2569774 Offset: 0x2569774 VA: 0x2569774
	public static int CeilToInt(float f) { }

	// RVA: 0x256977C Offset: 0x256977C VA: 0x256977C
	public static int FloorToInt(float f) { }

	// RVA: 0x2569784 Offset: 0x2569784 VA: 0x2569784
	public static int RoundToInt(float f) { }

	// RVA: 0x2569818 Offset: 0x2569818 VA: 0x2569818
	public static float Sign(float f) { }

	// RVA: 0x256982C Offset: 0x256982C VA: 0x256982C
	public static float Clamp(float value, float min, float max) { }

	// RVA: 0x2569848 Offset: 0x2569848 VA: 0x2569848
	public static int Clamp(int value, int min, int max) { }

	// RVA: 0x2569864 Offset: 0x2569864 VA: 0x2569864
	public static float Clamp01(float value) { }

	// RVA: 0x2569880 Offset: 0x2569880 VA: 0x2569880
	public static float Lerp(float a, float b, float t) { }

	// RVA: 0x2569918 Offset: 0x2569918 VA: 0x2569918
	public static float LerpUnclamped(float a, float b, float t) { }

	// RVA: 0x2569928 Offset: 0x2569928 VA: 0x2569928
	public static float LerpAngle(float a, float b, float t) { }

	// RVA: 0x2569A90 Offset: 0x2569A90 VA: 0x2569A90
	public static float MoveTowards(float current, float target, float maxDelta) { }

	// RVA: 0x2569B4C Offset: 0x2569B4C VA: 0x2569B4C
	public static float SmoothStep(float from, float to, float t) { }

	// RVA: 0x2569C08 Offset: 0x2569C08 VA: 0x2569C08
	public static bool Approximately(float a, float b) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBE2978 Offset: 0xBE2978 VA: 0xBE2978
	// RVA: 0x2569CBC Offset: 0x2569CBC VA: 0x2569CBC
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime) { }

	// RVA: 0x2569D60 Offset: 0x2569D60 VA: 0x2569D60
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBE2988 Offset: 0xBE2988 VA: 0xBE2988
	// RVA: 0x2569EB4 Offset: 0x2569EB4 VA: 0x2569EB4
	public static float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime) { }

	// RVA: 0x2569F58 Offset: 0x2569F58 VA: 0x2569F58
	public static float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }

	// RVA: 0x2569A00 Offset: 0x2569A00 VA: 0x2569A00
	public static float Repeat(float t, float length) { }

	// RVA: 0x256A0A0 Offset: 0x256A0A0 VA: 0x256A0A0
	public static float InverseLerp(float a, float b, float value) { }

	// RVA: 0x256A008 Offset: 0x256A008 VA: 0x256A008
	public static float DeltaAngle(float current, float target) { }

	// RVA: 0x256A144 Offset: 0x256A144 VA: 0x256A144
	private static void .cctor() { }
}

// Namespace: UnityEngineInternal
public struct MathfInternal // TypeDefIndex: 2236
{
	// Fields
	public static float FloatMinNormal; // 0x0
	public static float FloatMinDenormal; // 0x4
	public static bool IsFlushToZeroEnabled; // 0x8

	// Methods

	// RVA: 0x2B9918C Offset: 0x2B9918C VA: 0x2B9918C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBD95DC Offset: 0xBD95DC VA: 0xBD95DC
[RequiredByNativeCodeAttribute] // RVA: 0xBD95DC Offset: 0xBD95DC VA: 0xBD95DC
public sealed class Mesh : Object // TypeDefIndex: 2237
{
	// Properties
	internal bool canAccess { get; }
	public int vertexCount { get; }
	public int subMeshCount { get; }
	public Bounds bounds { get; }
	public Vector3[] vertices { get; set; }
	public Vector3[] normals { get; set; }
	public Vector4[] tangents { get; set; }
	public Vector2[] uv { get; set; }
	public Vector2[] uv2 { get; set; }
	public Vector2[] uv3 { get; }
	public Vector2[] uv4 { get; }
	public Color[] colors { get; set; }
	public Color32[] colors32 { get; set; }
	public int[] triangles { get; set; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBE2998 Offset: 0xBE2998 VA: 0xBE2998
	// RVA: 0x256BC1C Offset: 0x256BC1C VA: 0x256BC1C
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xBE29A8 Offset: 0xBE29A8 VA: 0xBE29A8
	// RVA: 0x256BC8C Offset: 0x256BC8C VA: 0x256BC8C
	private static void Internal_Create(Mesh mono) { }

	[FreeFunctionAttribute] // RVA: 0xBE29E0 Offset: 0xBE29E0 VA: 0xBE29E0
	// RVA: 0x256BCF8 Offset: 0x256BCF8 VA: 0x256BCF8
	private int[] GetTrianglesImpl(int submesh, bool applyBaseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xBE2A34 Offset: 0xBE2A34 VA: 0xBE2A34
	// RVA: 0x256BD7C Offset: 0x256BD7C VA: 0x256BD7C
	private int[] GetIndicesImpl(int submesh, bool applyBaseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xBE2A88 Offset: 0xBE2A88 VA: 0xBE2A88
	// RVA: 0x256BE00 Offset: 0x256BE00 VA: 0x256BE00
	private void SetIndicesImpl(int submesh, MeshTopology topology, Array indices, int arraySize, bool calculateBounds, int baseVertex) { }

	[FreeFunctionAttribute] // RVA: 0xBE2ADC Offset: 0xBE2ADC VA: 0xBE2ADC
	// RVA: 0x256BEB4 Offset: 0x256BEB4 VA: 0x256BEB4
	private void PrintErrorCantAccessChannel(VertexAttribute ch) { }

	[FreeFunctionAttribute] // RVA: 0xBE2B30 Offset: 0xBE2B30 VA: 0xBE2B30
	// RVA: 0x256BF28 Offset: 0x256BF28 VA: 0x256BF28
	internal bool HasChannel(VertexAttribute ch) { }

	[FreeFunctionAttribute] // RVA: 0xBE2B84 Offset: 0xBE2B84 VA: 0xBE2B84
	// RVA: 0x256BF9C Offset: 0x256BF9C VA: 0x256BF9C
	private void SetArrayForChannelImpl(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, Array values, int arraySize) { }

	[FreeFunctionAttribute] // RVA: 0xBE2BD8 Offset: 0xBE2BD8 VA: 0xBE2BD8
	// RVA: 0x256C040 Offset: 0x256C040 VA: 0x256C040
	private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim) { }

	[NativeMethodAttribute] // RVA: 0xBE2C2C Offset: 0xBE2C2C VA: 0xBE2C2C
	// RVA: 0x256C0CC Offset: 0x256C0CC VA: 0x256C0CC
	internal bool get_canAccess() { }

	[NativeMethodAttribute] // RVA: 0xBE2C64 Offset: 0xBE2C64 VA: 0xBE2C64
	// RVA: 0x256C138 Offset: 0x256C138 VA: 0x256C138
	public int get_vertexCount() { }

	[NativeMethodAttribute] // RVA: 0xBE2C9C Offset: 0xBE2C9C VA: 0xBE2C9C
	// RVA: 0x256C1A4 Offset: 0x256C1A4 VA: 0x256C1A4
	public int get_subMeshCount() { }

	// RVA: 0x256C210 Offset: 0x256C210 VA: 0x256C210
	public Bounds get_bounds() { }

	[NativeMethodAttribute] // RVA: 0xBE2CE0 Offset: 0xBE2CE0 VA: 0xBE2CE0
	// RVA: 0x256C2C4 Offset: 0x256C2C4 VA: 0x256C2C4
	private void ClearImpl(bool keepVertexLayout) { }

	[NativeMethodAttribute] // RVA: 0xBE2D18 Offset: 0xBE2D18 VA: 0xBE2D18
	// RVA: 0x256C338 Offset: 0x256C338 VA: 0x256C338
	private void RecalculateBoundsImpl() { }

	[NativeMethodAttribute] // RVA: 0xBE2D50 Offset: 0xBE2D50 VA: 0xBE2D50
	// RVA: 0x256C3A4 Offset: 0x256C3A4 VA: 0x256C3A4
	private void RecalculateNormalsImpl() { }

	[NativeMethodAttribute] // RVA: 0xBE2D88 Offset: 0xBE2D88 VA: 0xBE2D88
	// RVA: 0x256C410 Offset: 0x256C410 VA: 0x256C410
	private void MarkDynamicImpl() { }

	// RVA: 0x256C47C Offset: 0x256C47C VA: 0x256C47C
	internal VertexAttribute GetUVChannel(int uvIndex) { }

	// RVA: 0x256C518 Offset: 0x256C518 VA: 0x256C518
	internal static int DefaultDimensionForChannel(VertexAttribute channel) { }

	// RVA: -1 Offset: -1
	private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B211CC Offset: 0x2B211CC VA: 0x2B211CC
	|-Mesh.GetAllocArrayFromChannel<object>
	|
	|-RVA: 0x2B21334 Offset: 0x2B21334 VA: 0x2B21334
	|-Mesh.GetAllocArrayFromChannel<Color32>
	|
	|-RVA: 0x2B21500 Offset: 0x2B21500 VA: 0x2B21500
	|-Mesh.GetAllocArrayFromChannel<Color>
	|
	|-RVA: 0x2B216CC Offset: 0x2B216CC VA: 0x2B216CC
	|-Mesh.GetAllocArrayFromChannel<Vector2>
	|
	|-RVA: 0x2B21898 Offset: 0x2B21898 VA: 0x2B21898
	|-Mesh.GetAllocArrayFromChannel<Vector3>
	|
	|-RVA: 0x2B21A64 Offset: 0x2B21A64 VA: 0x2B21A64
	|-Mesh.GetAllocArrayFromChannel<Vector4>
	*/

	// RVA: -1 Offset: -1
	private T[] GetAllocArrayFromChannel<T>(VertexAttribute channel) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B21168 Offset: 0x2B21168 VA: 0x2B21168
	|-Mesh.GetAllocArrayFromChannel<object>
	|
	|-RVA: 0x2B2149C Offset: 0x2B2149C VA: 0x2B2149C
	|-Mesh.GetAllocArrayFromChannel<Color>
	|
	|-RVA: 0x2B21668 Offset: 0x2B21668 VA: 0x2B21668
	|-Mesh.GetAllocArrayFromChannel<Vector2>
	|
	|-RVA: 0x2B21834 Offset: 0x2B21834 VA: 0x2B21834
	|-Mesh.GetAllocArrayFromChannel<Vector3>
	|
	|-RVA: 0x2B21A00 Offset: 0x2B21A00 VA: 0x2B21A00
	|-Mesh.GetAllocArrayFromChannel<Vector4>
	*/

	// RVA: 0x256C5E0 Offset: 0x256C5E0 VA: 0x256C5E0
	private void SetSizedArrayForChannel(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, Array values, int valuesCount) { }

	// RVA: -1 Offset: -1
	private void SetArrayForChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, T[] values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1BAC0 Offset: 0x1C1BAC0 VA: 0x1C1BAC0
	|-Mesh.SetArrayForChannel<object>
	|
	|-RVA: 0x1C1BB34 Offset: 0x1C1BB34 VA: 0x1C1BB34
	|-Mesh.SetArrayForChannel<Color32>
	*/

	// RVA: -1 Offset: -1
	private void SetArrayForChannel<T>(VertexAttribute channel, T[] values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1BA44 Offset: 0x1C1BA44 VA: 0x1C1BA44
	|-Mesh.SetArrayForChannel<object>
	|
	|-RVA: 0x1C1BBA8 Offset: 0x1C1BBA8 VA: 0x1C1BBA8
	|-Mesh.SetArrayForChannel<Color>
	|
	|-RVA: 0x1C1BC24 Offset: 0x1C1BC24 VA: 0x1C1BC24
	|-Mesh.SetArrayForChannel<Vector2>
	|
	|-RVA: 0x1C1BCA0 Offset: 0x1C1BCA0 VA: 0x1C1BCA0
	|-Mesh.SetArrayForChannel<Vector3>
	|
	|-RVA: 0x1C1BD1C Offset: 0x1C1BD1C VA: 0x1C1BD1C
	|-Mesh.SetArrayForChannel<Vector4>
	*/

	// RVA: -1 Offset: -1
	private void SetListForChannel<T>(VertexAttribute channel, Mesh.InternalVertexChannelType format, int dim, List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1BE30 Offset: 0x1C1BE30 VA: 0x1C1BE30
	|-Mesh.SetListForChannel<object>
	|
	|-RVA: 0x1C1BEC0 Offset: 0x1C1BEC0 VA: 0x1C1BEC0
	|-Mesh.SetListForChannel<Color32>
	|
	|-RVA: 0x1C1BF50 Offset: 0x1C1BF50 VA: 0x1C1BF50
	|-Mesh.SetListForChannel<Vector2>
	*/

	// RVA: -1 Offset: -1
	private void SetListForChannel<T>(VertexAttribute channel, List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1BD98 Offset: 0x1C1BD98 VA: 0x1C1BD98
	|-Mesh.SetListForChannel<object>
	|
	|-RVA: 0x1C1BFE0 Offset: 0x1C1BFE0 VA: 0x1C1BFE0
	|-Mesh.SetListForChannel<Vector3>
	|
	|-RVA: 0x1C1C078 Offset: 0x1C1C078 VA: 0x1C1C078
	|-Mesh.SetListForChannel<Vector4>
	*/

	// RVA: 0x256C65C Offset: 0x256C65C VA: 0x256C65C
	public Vector3[] get_vertices() { }

	// RVA: 0x256C6B0 Offset: 0x256C6B0 VA: 0x256C6B0
	public void set_vertices(Vector3[] value) { }

	// RVA: 0x256C714 Offset: 0x256C714 VA: 0x256C714
	public Vector3[] get_normals() { }

	// RVA: 0x256C768 Offset: 0x256C768 VA: 0x256C768
	public void set_normals(Vector3[] value) { }

	// RVA: 0x256C7CC Offset: 0x256C7CC VA: 0x256C7CC
	public Vector4[] get_tangents() { }

	// RVA: 0x256C820 Offset: 0x256C820 VA: 0x256C820
	public void set_tangents(Vector4[] value) { }

	// RVA: 0x256C884 Offset: 0x256C884 VA: 0x256C884
	public Vector2[] get_uv() { }

	// RVA: 0x256C8D8 Offset: 0x256C8D8 VA: 0x256C8D8
	public void set_uv(Vector2[] value) { }

	// RVA: 0x256C93C Offset: 0x256C93C VA: 0x256C93C
	public Vector2[] get_uv2() { }

	// RVA: 0x256C990 Offset: 0x256C990 VA: 0x256C990
	public void set_uv2(Vector2[] value) { }

	// RVA: 0x256C9F4 Offset: 0x256C9F4 VA: 0x256C9F4
	public Vector2[] get_uv3() { }

	// RVA: 0x256CA48 Offset: 0x256CA48 VA: 0x256CA48
	public Vector2[] get_uv4() { }

	// RVA: 0x256CA9C Offset: 0x256CA9C VA: 0x256CA9C
	public Color[] get_colors() { }

	// RVA: 0x256CAF0 Offset: 0x256CAF0 VA: 0x256CAF0
	public void set_colors(Color[] value) { }

	// RVA: 0x256CB54 Offset: 0x256CB54 VA: 0x256CB54
	public Color32[] get_colors32() { }

	// RVA: 0x256CBB0 Offset: 0x256CBB0 VA: 0x256CBB0
	public void set_colors32(Color32[] value) { }

	// RVA: 0x256CC1C Offset: 0x256CC1C VA: 0x256CC1C
	public void SetVertices(List<Vector3> inVertices) { }

	// RVA: 0x256CC80 Offset: 0x256CC80 VA: 0x256CC80
	public void SetNormals(List<Vector3> inNormals) { }

	// RVA: 0x256CCE4 Offset: 0x256CCE4 VA: 0x256CCE4
	public void SetTangents(List<Vector4> inTangents) { }

	// RVA: 0x256CD48 Offset: 0x256CD48 VA: 0x256CD48
	public void SetColors(List<Color32> inColors) { }

	// RVA: -1 Offset: -1
	private void SetUvsImpl<T>(int uvIndex, int dim, List<T> uvs) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C110 Offset: 0x1C1C110 VA: 0x1C1C110
	|-Mesh.SetUvsImpl<object>
	|
	|-RVA: 0x1C1C21C Offset: 0x1C1C21C VA: 0x1C1C21C
	|-Mesh.SetUvsImpl<Vector2>
	*/

	// RVA: 0x256CDB4 Offset: 0x256CDB4 VA: 0x256CDB4
	public void SetUVs(int channel, List<Vector2> uvs) { }

	// RVA: 0x256CE20 Offset: 0x256CE20 VA: 0x256CE20
	private void PrintErrorCantAccessIndices() { }

	// RVA: 0x256CF3C Offset: 0x256CF3C VA: 0x256CF3C
	private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles) { }

	// RVA: 0x256D054 Offset: 0x256D054 VA: 0x256D054
	private bool CheckCanAccessSubmeshTriangles(int submesh) { }

	// RVA: 0x256D05C Offset: 0x256D05C VA: 0x256D05C
	private bool CheckCanAccessSubmeshIndices(int submesh) { }

	// RVA: 0x256D064 Offset: 0x256D064 VA: 0x256D064
	public int[] get_triangles() { }

	// RVA: 0x256D0E0 Offset: 0x256D0E0 VA: 0x256D0E0
	public void set_triangles(int[] value) { }

	// RVA: 0x256D180 Offset: 0x256D180 VA: 0x256D180
	public int[] GetIndices(int submesh) { }

	// RVA: 0x256D188 Offset: 0x256D188 VA: 0x256D188
	public int[] GetIndices(int submesh, bool applyBaseVertex) { }

	// RVA: 0x256D15C Offset: 0x256D15C VA: 0x256D15C
	private void SetTrianglesImpl(int submesh, Array triangles, int arraySize, bool calculateBounds, int baseVertex) { }

	// RVA: 0x256D218 Offset: 0x256D218 VA: 0x256D218
	public void SetTriangles(List<int> triangles, int submesh) { }

	// RVA: 0x256D224 Offset: 0x256D224 VA: 0x256D224
	public void SetTriangles(List<int> triangles, int submesh, bool calculateBounds, int baseVertex) { }

	// RVA: 0x256D354 Offset: 0x256D354 VA: 0x256D354
	public void Clear() { }

	// RVA: 0x256D35C Offset: 0x256D35C VA: 0x256D35C
	public void RecalculateBounds() { }

	// RVA: 0x256D430 Offset: 0x256D430 VA: 0x256D430
	public void RecalculateNormals() { }

	// RVA: 0x256D504 Offset: 0x256D504 VA: 0x256D504
	public void MarkDynamic() { }

	// RVA: 0x256C250 Offset: 0x256C250 VA: 0x256C250
	private void get_bounds_Injected(out Bounds ret) { }
}

// Namespace: 
internal enum Mesh.InternalVertexChannelType // TypeDefIndex: 2238
{
	// Fields
	public int value__; // 0x0
	public const Mesh.InternalVertexChannelType Float = 0;
	public const Mesh.InternalVertexChannelType Color = 2;
}

// Namespace: UnityEngineInternal
public class ScriptingUtils // TypeDefIndex: 2239
{
	// Methods

	// RVA: 0x2B99284 Offset: 0x2B99284 VA: 0x2B99284
	public static Delegate CreateDelegate(Type type, MethodInfo methodInfo) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBD9628 Offset: 0xBD9628 VA: 0xBD9628
[ExtensionOfNativeClassAttribute] // RVA: 0xBD9628 Offset: 0xBD9628 VA: 0xBD9628
[NativeHeaderAttribute] // RVA: 0xBD9628 Offset: 0xBD9628 VA: 0xBD9628
[NativeHeaderAttribute] // RVA: 0xBD9628 Offset: 0xBD9628 VA: 0xBD9628
public class MonoBehaviour : Behaviour // TypeDefIndex: 2240
{
	// Properties
	public bool useGUILayout { get; set; }

	// Methods

	// RVA: 0x256D7A4 Offset: 0x256D7A4 VA: 0x256D7A4
	public void .ctor() { }

	// RVA: 0x256D7AC Offset: 0x256D7AC VA: 0x256D7AC
	public bool IsInvoking() { }

	// RVA: 0x256D81C Offset: 0x256D81C VA: 0x256D81C
	public void CancelInvoke() { }

	// RVA: 0x256D88C Offset: 0x256D88C VA: 0x256D88C
	public void Invoke(string methodName, float time) { }

	// RVA: 0x256D920 Offset: 0x256D920 VA: 0x256D920
	public void InvokeRepeating(string methodName, float time, float repeatRate) { }

	// RVA: 0x256D9E8 Offset: 0x256D9E8 VA: 0x256D9E8
	public void CancelInvoke(string methodName) { }

	// RVA: 0x256DA60 Offset: 0x256DA60 VA: 0x256DA60
	public bool IsInvoking(string methodName) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBE2DC0 Offset: 0xBE2DC0 VA: 0xBE2DC0
	// RVA: 0x256DAD8 Offset: 0x256DAD8 VA: 0x256DAD8
	public Coroutine StartCoroutine(string methodName) { }

	// RVA: 0x256DAE0 Offset: 0x256DAE0 VA: 0x256DAE0
	public Coroutine StartCoroutine(string methodName, object value) { }

	// RVA: 0x256DCD8 Offset: 0x256DCD8 VA: 0x256DCD8
	public Coroutine StartCoroutine(IEnumerator routine) { }

	[ObsoleteAttribute] // RVA: 0xBE2DD0 Offset: 0xBE2DD0 VA: 0xBE2DD0
	// RVA: 0x256DE20 Offset: 0x256DE20 VA: 0x256DE20
	public Coroutine StartCoroutine_Auto(IEnumerator routine) { }

	// RVA: 0x256DE24 Offset: 0x256DE24 VA: 0x256DE24
	public void StopCoroutine(IEnumerator routine) { }

	// RVA: 0x256DF6C Offset: 0x256DF6C VA: 0x256DF6C
	public void StopCoroutine(Coroutine routine) { }

	// RVA: 0x256E0B4 Offset: 0x256E0B4 VA: 0x256E0B4
	public void StopCoroutine(string methodName) { }

	// RVA: 0x256E128 Offset: 0x256E128 VA: 0x256E128
	public void StopAllCoroutines() { }

	// RVA: 0x256E194 Offset: 0x256E194 VA: 0x256E194
	public bool get_useGUILayout() { }

	// RVA: 0x256E200 Offset: 0x256E200 VA: 0x256E200
	public void set_useGUILayout(bool value) { }

	// RVA: 0x256E274 Offset: 0x256E274 VA: 0x256E274
	public static void print(object message) { }

	[FreeFunctionAttribute] // RVA: 0xBE2E0C Offset: 0xBE2E0C VA: 0xBE2E0C
	// RVA: 0x256D820 Offset: 0x256D820 VA: 0x256D820
	private static void Internal_CancelInvokeAll(MonoBehaviour self) { }

	[FreeFunctionAttribute] // RVA: 0xBE2E44 Offset: 0xBE2E44 VA: 0xBE2E44
	// RVA: 0x256D7B0 Offset: 0x256D7B0 VA: 0x256D7B0
	private static bool Internal_IsInvokingAll(MonoBehaviour self) { }

	[FreeFunctionAttribute] // RVA: 0xBE2E7C Offset: 0xBE2E7C VA: 0xBE2E7C
	// RVA: 0x256D894 Offset: 0x256D894 VA: 0x256D894
	private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate) { }

	[FreeFunctionAttribute] // RVA: 0xBE2E8C Offset: 0xBE2E8C VA: 0xBE2E8C
	// RVA: 0x256D9EC Offset: 0x256D9EC VA: 0x256D9EC
	private static void CancelInvoke(MonoBehaviour self, string methodName) { }

	[FreeFunctionAttribute] // RVA: 0xBE2E9C Offset: 0xBE2E9C VA: 0xBE2E9C
	// RVA: 0x256DA64 Offset: 0x256DA64 VA: 0x256DA64
	private static bool IsInvoking(MonoBehaviour self, string methodName) { }

	[FreeFunctionAttribute] // RVA: 0xBE2EAC Offset: 0xBE2EAC VA: 0xBE2EAC
	// RVA: 0x256DBE8 Offset: 0x256DBE8 VA: 0x256DBE8
	private static bool IsObjectMonoBehaviour(Object obj) { }

	// RVA: 0x256DC54 Offset: 0x256DC54 VA: 0x256DC54
	private Coroutine StartCoroutineManaged(string methodName, object value) { }

	// RVA: 0x256DDAC Offset: 0x256DDAC VA: 0x256DDAC
	private Coroutine StartCoroutineManaged2(IEnumerator enumerator) { }

	// RVA: 0x256E040 Offset: 0x256E040 VA: 0x256E040
	private void StopCoroutineManaged(Coroutine routine) { }

	// RVA: 0x256DEF8 Offset: 0x256DEF8 VA: 0x256DEF8
	private void StopCoroutineFromEnumeratorManaged(IEnumerator routine) { }

	// RVA: 0x256E2DC Offset: 0x256E2DC VA: 0x256E2DC
	internal string GetScriptClassName() { }
}

// Namespace: UnityEngine
internal class SendMouseEvents // TypeDefIndex: 2241
{
	// Fields
	private static bool s_MouseUsed; // 0x0
	private static readonly SendMouseEvents.HitInfo[] m_LastHit; // 0x8
	private static readonly SendMouseEvents.HitInfo[] m_MouseDownHit; // 0x10
	private static readonly SendMouseEvents.HitInfo[] m_CurrentHit; // 0x18
	private static Camera[] m_Cameras; // 0x20

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBE2EBC Offset: 0xBE2EBC VA: 0xBE2EBC
	// RVA: 0x2167D5C Offset: 0x2167D5C VA: 0x2167D5C
	private static void SetMouseMoved() { }

	// RVA: 0x2167DC8 Offset: 0x2167DC8 VA: 0x2167DC8
	private static void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref SendMouseEvents.HitInfo hitInfo) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE2ECC Offset: 0xBE2ECC VA: 0xBE2ECC
	// RVA: 0x2167F04 Offset: 0x2167F04 VA: 0x2167F04
	private static void DoSendMouseEvents(int skipRTCameras) { }

	// RVA: 0x2168C60 Offset: 0x2168C60 VA: 0x2168C60
	private static void SendEvents(int i, SendMouseEvents.HitInfo hit) { }

	// RVA: 0x21693E0 Offset: 0x21693E0 VA: 0x21693E0
	private static void .cctor() { }
}

// Namespace: 
private struct SendMouseEvents.HitInfo // TypeDefIndex: 2242
{
	// Fields
	public GameObject target; // 0x0
	public Camera camera; // 0x8

	// Methods

	// RVA: 0xD668B0 Offset: 0xD668B0 VA: 0xD668B0
	public void SendMessage(string name) { }

	// RVA: 0x216921C Offset: 0x216921C VA: 0x216921C
	public static bool op_Implicit(SendMouseEvents.HitInfo exists) { }

	// RVA: 0x2169314 Offset: 0x2169314 VA: 0x2169314
	public static bool Compare(SendMouseEvents.HitInfo lhs, SendMouseEvents.HitInfo rhs) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBD96A8 Offset: 0xBD96A8 VA: 0xBD96A8
internal sealed class NoAllocHelpers // TypeDefIndex: 2243
{
	// Methods

	// RVA: 0x256D14C Offset: 0x256D14C VA: 0x256D14C
	public static int SafeLength(Array values) { }

	// RVA: -1 Offset: -1
	public static int SafeLength<T>(List<T> values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C59458 Offset: 0x1C59458 VA: 0x1C59458
	|-NoAllocHelpers.SafeLength<int>
	|
	|-RVA: 0x1C59470 Offset: 0x1C59470 VA: 0x1C59470
	|-NoAllocHelpers.SafeLength<object>
	|
	|-RVA: 0x1C59488 Offset: 0x1C59488 VA: 0x1C59488
	|-NoAllocHelpers.SafeLength<Color32>
	|
	|-RVA: 0x1C594A0 Offset: 0x1C594A0 VA: 0x1C594A0
	|-NoAllocHelpers.SafeLength<Vector2>
	|
	|-RVA: 0x1C594B8 Offset: 0x1C594B8 VA: 0x1C594B8
	|-NoAllocHelpers.SafeLength<Vector3>
	|
	|-RVA: 0x1C594D0 Offset: 0x1C594D0 VA: 0x1C594D0
	|-NoAllocHelpers.SafeLength<Vector4>
	*/

	[FreeFunctionAttribute] // RVA: 0xBE2EDC Offset: 0xBE2EDC VA: 0xBE2EDC
	// RVA: 0x256D2E8 Offset: 0x256D2E8 VA: 0x256D2E8
	public static Array ExtractArrayFromList(object list) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xBD96E0 Offset: 0xBD96E0 VA: 0xBD96E0
public struct Plane // TypeDefIndex: 2244
{
	// Fields
	private Vector3 m_Normal; // 0x0
	private float m_Distance; // 0xC

	// Methods

	// RVA: 0xD6E88C Offset: 0xD6E88C VA: 0xD6E88C
	public void .ctor(Vector3 inNormal, Vector3 inPoint) { }

	// RVA: 0xD6E894 Offset: 0xD6E894 VA: 0xD6E894
	public void .ctor(Vector3 inNormal, float d) { }

	// RVA: 0xD6E89C Offset: 0xD6E89C VA: 0xD6E89C
	public void .ctor(Vector3 a, Vector3 b, Vector3 c) { }

	// RVA: 0xD6E8B4 Offset: 0xD6E8B4 VA: 0xD6E8B4
	public bool Raycast(Ray ray, out float enter) { }

	// RVA: 0xD6E8EC Offset: 0xD6E8EC VA: 0xD6E8EC Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal interface IPlayerEditorConnectionNative // TypeDefIndex: 2245
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void DisconnectAll();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void SendMessage(Guid messageId, byte[] data, int playerId);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool TrySendMessage(Guid messageId, byte[] data, int playerId);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Poll();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void RegisterInternal(Guid messageId);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void UnregisterInternal(Guid messageId);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsConnected();
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBD96F0 Offset: 0xBD96F0 VA: 0xBD96F0
internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 2246
{
	// Methods

	// RVA: 0x256E8B4 Offset: 0x256E8B4 VA: 0x256E8B4
	public void .ctor() { }

	// RVA: 0x25747A4 Offset: 0x25747A4 VA: 0x25747A4 Slot: 6
	private void UnityEngine.IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x2574938 Offset: 0x2574938 VA: 0x2574938 Slot: 7
	private bool UnityEngine.IPlayerEditorConnectionNative.TrySendMessage(Guid messageId, byte[] data, int playerId) { }

	// RVA: 0x2574AD0 Offset: 0x2574AD0 VA: 0x2574AD0 Slot: 8
	private void UnityEngine.IPlayerEditorConnectionNative.Poll() { }

	// RVA: 0x2574B2C Offset: 0x2574B2C VA: 0x2574B2C Slot: 9
	private void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(Guid messageId) { }

	// RVA: 0x2574BFC Offset: 0x2574BFC VA: 0x2574BFC Slot: 10
	private void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId) { }

	// RVA: 0x2574CCC Offset: 0x2574CCC VA: 0x2574CCC Slot: 4
	private void UnityEngine.IPlayerEditorConnectionNative.Initialize() { }

	// RVA: 0x2574D28 Offset: 0x2574D28 VA: 0x2574D28 Slot: 11
	private bool UnityEngine.IPlayerEditorConnectionNative.IsConnected() { }

	// RVA: 0x2574D84 Offset: 0x2574D84 VA: 0x2574D84 Slot: 5
	private void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll() { }

	[FreeFunctionAttribute] // RVA: 0xBE2F14 Offset: 0xBE2F14 VA: 0xBE2F14
	// RVA: 0x2574D2C Offset: 0x2574D2C VA: 0x2574D2C
	private static bool IsConnected() { }

	[FreeFunctionAttribute] // RVA: 0xBE2F4C Offset: 0xBE2F4C VA: 0xBE2F4C
	// RVA: 0x2574CD0 Offset: 0x2574CD0 VA: 0x2574CD0
	private static void Initialize() { }

	[FreeFunctionAttribute] // RVA: 0xBE2F84 Offset: 0xBE2F84 VA: 0xBE2F84
	// RVA: 0x2574B90 Offset: 0x2574B90 VA: 0x2574B90
	private static void RegisterInternal(string messageId) { }

	[FreeFunctionAttribute] // RVA: 0xBE2FBC Offset: 0xBE2FBC VA: 0xBE2FBC
	// RVA: 0x2574C60 Offset: 0x2574C60 VA: 0x2574C60
	private static void UnregisterInternal(string messageId) { }

	[FreeFunctionAttribute] // RVA: 0xBE2FF4 Offset: 0xBE2FF4 VA: 0xBE2FF4
	// RVA: 0x25748B4 Offset: 0x25748B4 VA: 0x25748B4
	private static void SendMessage(string messageId, byte[] data, int playerId) { }

	[FreeFunctionAttribute] // RVA: 0xBE302C Offset: 0xBE302C VA: 0xBE302C
	// RVA: 0x2574A4C Offset: 0x2574A4C VA: 0x2574A4C
	private static bool TrySendMessage(string messageId, byte[] data, int playerId) { }

	[FreeFunctionAttribute] // RVA: 0xBE3064 Offset: 0xBE3064 VA: 0xBE3064
	// RVA: 0x2574AD4 Offset: 0x2574AD4 VA: 0x2574AD4
	private static void PollInternal() { }

	[FreeFunctionAttribute] // RVA: 0xBE309C Offset: 0xBE309C VA: 0xBE309C
	// RVA: 0x2574D88 Offset: 0x2574D88 VA: 0x2574D88
	private static void DisconnectAll() { }
}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xBD9728 Offset: 0xBD9728 VA: 0xBD9728
public struct Initialization // TypeDefIndex: 2247
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9738 Offset: 0xBD9738 VA: 0xBD9738
public struct Initialization.PlayerUpdateTime // TypeDefIndex: 2248
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9748 Offset: 0xBD9748 VA: 0xBD9748
public struct Initialization.AsyncUploadTimeSlicedUpdate // TypeDefIndex: 2249
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9758 Offset: 0xBD9758 VA: 0xBD9758
public struct Initialization.SynchronizeState // TypeDefIndex: 2250
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9768 Offset: 0xBD9768 VA: 0xBD9768
public struct Initialization.SynchronizeInputs // TypeDefIndex: 2251
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9778 Offset: 0xBD9778 VA: 0xBD9778
public struct Initialization.XREarlyUpdate // TypeDefIndex: 2252
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xBD9788 Offset: 0xBD9788 VA: 0xBD9788
public struct EarlyUpdate // TypeDefIndex: 2253
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9798 Offset: 0xBD9798 VA: 0xBD9798
public struct EarlyUpdate.PollPlayerConnection // TypeDefIndex: 2254
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD97A8 Offset: 0xBD97A8 VA: 0xBD97A8
public struct EarlyUpdate.ProfilerStartFrame // TypeDefIndex: 2255
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD97B8 Offset: 0xBD97B8 VA: 0xBD97B8
public struct EarlyUpdate.PollHtcsPlayerConnection // TypeDefIndex: 2256
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD97C8 Offset: 0xBD97C8 VA: 0xBD97C8
public struct EarlyUpdate.GpuTimestamp // TypeDefIndex: 2257
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD97D8 Offset: 0xBD97D8 VA: 0xBD97D8
public struct EarlyUpdate.AnalyticsCoreStatsUpdate // TypeDefIndex: 2258
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD97E8 Offset: 0xBD97E8 VA: 0xBD97E8
public struct EarlyUpdate.UnityWebRequestUpdate // TypeDefIndex: 2259
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD97F8 Offset: 0xBD97F8 VA: 0xBD97F8
public struct EarlyUpdate.UpdateStreamingManager // TypeDefIndex: 2260
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9808 Offset: 0xBD9808 VA: 0xBD9808
public struct EarlyUpdate.ExecuteMainThreadJobs // TypeDefIndex: 2261
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9818 Offset: 0xBD9818 VA: 0xBD9818
public struct EarlyUpdate.ProcessMouseInWindow // TypeDefIndex: 2262
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9828 Offset: 0xBD9828 VA: 0xBD9828
public struct EarlyUpdate.ClearIntermediateRenderers // TypeDefIndex: 2263
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9838 Offset: 0xBD9838 VA: 0xBD9838
public struct EarlyUpdate.ClearLines // TypeDefIndex: 2264
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9848 Offset: 0xBD9848 VA: 0xBD9848
public struct EarlyUpdate.PresentBeforeUpdate // TypeDefIndex: 2265
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9858 Offset: 0xBD9858 VA: 0xBD9858
public struct EarlyUpdate.ResetFrameStatsAfterPresent // TypeDefIndex: 2266
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9868 Offset: 0xBD9868 VA: 0xBD9868
public struct EarlyUpdate.UpdateAllUnityWebStreams // TypeDefIndex: 2267
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9878 Offset: 0xBD9878 VA: 0xBD9878
public struct EarlyUpdate.UpdateAsyncReadbackManager // TypeDefIndex: 2268
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9888 Offset: 0xBD9888 VA: 0xBD9888
public struct EarlyUpdate.UpdateTextureStreamingManager // TypeDefIndex: 2269
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9898 Offset: 0xBD9898 VA: 0xBD9898
public struct EarlyUpdate.UpdatePreloading // TypeDefIndex: 2270
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD98A8 Offset: 0xBD98A8 VA: 0xBD98A8
public struct EarlyUpdate.RendererNotifyInvisible // TypeDefIndex: 2271
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD98B8 Offset: 0xBD98B8 VA: 0xBD98B8
public struct EarlyUpdate.PlayerCleanupCachedData // TypeDefIndex: 2272
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD98C8 Offset: 0xBD98C8 VA: 0xBD98C8
public struct EarlyUpdate.UpdateMainGameViewRect // TypeDefIndex: 2273
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD98D8 Offset: 0xBD98D8 VA: 0xBD98D8
public struct EarlyUpdate.UpdateCanvasRectTransform // TypeDefIndex: 2274
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD98E8 Offset: 0xBD98E8 VA: 0xBD98E8
public struct EarlyUpdate.UpdateInputManager // TypeDefIndex: 2275
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD98F8 Offset: 0xBD98F8 VA: 0xBD98F8
public struct EarlyUpdate.ProcessRemoteInput // TypeDefIndex: 2276
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9908 Offset: 0xBD9908 VA: 0xBD9908
public struct EarlyUpdate.XRUpdate // TypeDefIndex: 2277
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9918 Offset: 0xBD9918 VA: 0xBD9918
public struct EarlyUpdate.ScriptRunDelayedStartupFrame // TypeDefIndex: 2278
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9928 Offset: 0xBD9928 VA: 0xBD9928
public struct EarlyUpdate.UpdateKinect // TypeDefIndex: 2279
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9938 Offset: 0xBD9938 VA: 0xBD9938
public struct EarlyUpdate.DeliverIosPlatformEvents // TypeDefIndex: 2280
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9948 Offset: 0xBD9948 VA: 0xBD9948
public struct EarlyUpdate.DispatchEventQueueEvents // TypeDefIndex: 2281
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9958 Offset: 0xBD9958 VA: 0xBD9958
public struct EarlyUpdate.DirectorSampleTime // TypeDefIndex: 2282
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9968 Offset: 0xBD9968 VA: 0xBD9968
public struct EarlyUpdate.PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 2283
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9978 Offset: 0xBD9978 VA: 0xBD9978
public struct EarlyUpdate.SpriteAtlasManagerUpdate // TypeDefIndex: 2284
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9988 Offset: 0xBD9988 VA: 0xBD9988
public struct EarlyUpdate.TangoUpdate // TypeDefIndex: 2285
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9998 Offset: 0xBD9998 VA: 0xBD9998
public struct EarlyUpdate.PerformanceAnalyticsUpdate // TypeDefIndex: 2286
{}

// Namespace: UnityEngine.Experimental.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xBD99A8 Offset: 0xBD99A8 VA: 0xBD99A8
public struct FixedUpdate // TypeDefIndex: 2287
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD99B8 Offset: 0xBD99B8 VA: 0xBD99B8
public struct FixedUpdate.ClearLines // TypeDefIndex: 2288
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD99C8 Offset: 0xBD99C8 VA: 0xBD99C8
public struct FixedUpdate.DirectorFixedSampleTime // TypeDefIndex: 2289
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD99D8 Offset: 0xBD99D8 VA: 0xBD99D8
public struct FixedUpdate.AudioFixedUpdate // TypeDefIndex: 2290
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD99E8 Offset: 0xBD99E8 VA: 0xBD99E8
public struct FixedUpdate.ScriptRunBehaviourFixedUpdate // TypeDefIndex: 2291
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD99F8 Offset: 0xBD99F8 VA: 0xBD99F8
public struct FixedUpdate.DirectorFixedUpdate // TypeDefIndex: 2292
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9A08 Offset: 0xBD9A08 VA: 0xBD9A08
public struct FixedUpdate.LegacyFixedAnimationUpdate // TypeDefIndex: 2293
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9A18 Offset: 0xBD9A18 VA: 0xBD9A18
public struct FixedUpdate.XRFixedUpdate // TypeDefIndex: 2294
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9A28 Offset: 0xBD9A28 VA: 0xBD9A28
public struct FixedUpdate.PhysicsFixedUpdate // TypeDefIndex: 2295
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBD9A38 Offset: 0xBD9A38 VA: 0xBD9A38
