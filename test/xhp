	public bool isKey { get; }
	public bool isMouse { get; }

	// Methods

	// RVA: 0x27C5020 Offset: 0x27C5020 VA: 0x27C5020
	public void .ctor() { }

	// RVA: 0x27C50BC Offset: 0x27C50BC VA: 0x27C50BC
	public void .ctor(int displayIndex) { }

	// RVA: 0x27C50F0 Offset: 0x27C50F0 VA: 0x27C50F0
	public EventType get_rawType() { }

	// RVA: 0x27C515C Offset: 0x27C515C VA: 0x27C515C
	public Vector2 get_mousePosition() { }

	// RVA: 0x27C51F8 Offset: 0x27C51F8 VA: 0x27C51F8
	public Vector2 get_delta() { }

	// RVA: 0x27C5294 Offset: 0x27C5294 VA: 0x27C5294
	public EventModifiers get_modifiers() { }

	// RVA: 0x27C5300 Offset: 0x27C5300 VA: 0x27C5300
	public void set_modifiers(EventModifiers value) { }

	// RVA: 0x27C5374 Offset: 0x27C5374 VA: 0x27C5374
	public int get_clickCount() { }

	// RVA: 0x27C53E0 Offset: 0x27C53E0 VA: 0x27C53E0
	public char get_character() { }

	// RVA: 0x27C544C Offset: 0x27C544C VA: 0x27C544C
	public void set_character(char value) { }

	// RVA: 0x27C54C0 Offset: 0x27C54C0 VA: 0x27C54C0
	public KeyCode get_keyCode() { }

	// RVA: 0x27C552C Offset: 0x27C552C VA: 0x27C552C
	public void set_keyCode(KeyCode value) { }

	// RVA: 0x27C55A0 Offset: 0x27C55A0 VA: 0x27C55A0
	public void set_displayIndex(int value) { }

	[FreeFunctionAttribute] // RVA: 0xC67A54 Offset: 0xC67A54 VA: 0xC67A54
	// RVA: 0x27C5614 Offset: 0x27C5614 VA: 0x27C5614
	public EventType get_type() { }

	[FreeFunctionAttribute] // RVA: 0xC67A9C Offset: 0xC67A9C VA: 0xC67A9C
	// RVA: 0x27C5680 Offset: 0x27C5680 VA: 0x27C5680
	public void set_type(EventType value) { }

	[FreeFunctionAttribute] // RVA: 0xC67AE4 Offset: 0xC67AE4 VA: 0xC67AE4
	// RVA: 0x27C56F4 Offset: 0x27C56F4 VA: 0x27C56F4
	public string get_commandName() { }

	[NativeMethodAttribute] // RVA: 0xC67B2C Offset: 0xC67B2C VA: 0xC67B2C
	// RVA: 0x27C5760 Offset: 0x27C5760 VA: 0x27C5760
	private void Internal_Use() { }

	[FreeFunctionAttribute] // RVA: 0xC67B64 Offset: 0xC67B64 VA: 0xC67B64
	// RVA: 0x27C5050 Offset: 0x27C5050 VA: 0x27C5050
	private static IntPtr Internal_Create(int displayIndex) { }

	[FreeFunctionAttribute] // RVA: 0xC67BAC Offset: 0xC67BAC VA: 0xC67BAC
	// RVA: 0x27C57CC Offset: 0x27C57CC VA: 0x27C57CC
	private static void Internal_Destroy(IntPtr ptr) { }

	[FreeFunctionAttribute] // RVA: 0xC67BF4 Offset: 0xC67BF4 VA: 0xC67BF4
	// RVA: 0x27C5838 Offset: 0x27C5838 VA: 0x27C5838
	public EventType GetTypeForControl(int controlID) { }

	// RVA: 0x27C58AC Offset: 0x27C58AC VA: 0x27C58AC
	public static bool PopEvent(Event outEvent) { }

	// RVA: 0x27C5918 Offset: 0x27C5918 VA: 0x27C5918
	private static void Internal_SetNativeEvent(IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC67C3C Offset: 0xC67C3C VA: 0xC67C3C
	// RVA: 0x27C5984 Offset: 0x27C5984 VA: 0x27C5984
	internal static void Internal_MakeMasterEventCurrent(int displayIndex) { }

	// RVA: 0x27C5A58 Offset: 0x27C5A58 VA: 0x27C5A58 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x27C5B10 Offset: 0x27C5B10 VA: 0x27C5B10
	public bool get_shift() { }

	// RVA: 0x27C5B28 Offset: 0x27C5B28 VA: 0x27C5B28
	public bool get_alt() { }

	// RVA: 0x27C5B40 Offset: 0x27C5B40 VA: 0x27C5B40
	public static Event get_current() { }

	// RVA: 0x27C5B90 Offset: 0x27C5B90 VA: 0x27C5B90
	public bool get_isKey() { }

	// RVA: 0x27C5BB0 Offset: 0x27C5BB0 VA: 0x27C5BB0
	public bool get_isMouse() { }

	// RVA: 0x27C5BEC Offset: 0x27C5BEC VA: 0x27C5BEC
	public static Event KeyboardEvent(string key) { }

	// RVA: 0x27C73AC Offset: 0x27C73AC VA: 0x27C73AC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x27C745C Offset: 0x27C745C VA: 0x27C745C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x27C76A8 Offset: 0x27C76A8 VA: 0x27C76A8 Slot: 3
	public override string ToString() { }

	// RVA: 0x27C7F20 Offset: 0x27C7F20 VA: 0x27C7F20
	public void Use() { }

	// RVA: 0x27C5184 Offset: 0x27C5184 VA: 0x27C5184
	private void get_mousePosition_Injected(out Vector2 ret) { }

	// RVA: 0x27C5220 Offset: 0x27C5220 VA: 0x27C5220
	private void get_delta_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
public enum EventType // TypeDefIndex: 2730
{
	// Fields
	public int value__; // 0x0
	public const EventType MouseDown = 0;
	public const EventType MouseUp = 1;
	public const EventType MouseMove = 2;
	public const EventType MouseDrag = 3;
	public const EventType KeyDown = 4;
	public const EventType KeyUp = 5;
	public const EventType ScrollWheel = 6;
	public const EventType Repaint = 7;
	public const EventType Layout = 8;
	public const EventType DragUpdated = 9;
	public const EventType DragPerform = 10;
	public const EventType DragExited = 15;
	public const EventType Ignore = 11;
	public const EventType Used = 12;
	public const EventType ValidateCommand = 13;
	public const EventType ExecuteCommand = 14;
	public const EventType ContextClick = 16;
	public const EventType MouseEnterWindow = 20;
	public const EventType MouseLeaveWindow = 21;
	[EditorBrowsableAttribute] // RVA: 0xC66EF8 Offset: 0xC66EF8 VA: 0xC66EF8
	[ObsoleteAttribute] // RVA: 0xC66EF8 Offset: 0xC66EF8 VA: 0xC66EF8
	public const EventType mouseDown = 0;
	[EditorBrowsableAttribute] // RVA: 0xC66F4C Offset: 0xC66F4C VA: 0xC66F4C
	[ObsoleteAttribute] // RVA: 0xC66F4C Offset: 0xC66F4C VA: 0xC66F4C
	public const EventType mouseUp = 1;
	[EditorBrowsableAttribute] // RVA: 0xC66FA0 Offset: 0xC66FA0 VA: 0xC66FA0
	[ObsoleteAttribute] // RVA: 0xC66FA0 Offset: 0xC66FA0 VA: 0xC66FA0
	public const EventType mouseMove = 2;
	[ObsoleteAttribute] // RVA: 0xC66FF4 Offset: 0xC66FF4 VA: 0xC66FF4
	[EditorBrowsableAttribute] // RVA: 0xC66FF4 Offset: 0xC66FF4 VA: 0xC66FF4
	public const EventType mouseDrag = 3;
	[ObsoleteAttribute] // RVA: 0xC67048 Offset: 0xC67048 VA: 0xC67048
	[EditorBrowsableAttribute] // RVA: 0xC67048 Offset: 0xC67048 VA: 0xC67048
	public const EventType keyDown = 4;
	[EditorBrowsableAttribute] // RVA: 0xC6709C Offset: 0xC6709C VA: 0xC6709C
	[ObsoleteAttribute] // RVA: 0xC6709C Offset: 0xC6709C VA: 0xC6709C
	public const EventType keyUp = 5;
	[ObsoleteAttribute] // RVA: 0xC670F0 Offset: 0xC670F0 VA: 0xC670F0
	[EditorBrowsableAttribute] // RVA: 0xC670F0 Offset: 0xC670F0 VA: 0xC670F0
	public const EventType scrollWheel = 6;
	[ObsoleteAttribute] // RVA: 0xC67144 Offset: 0xC67144 VA: 0xC67144
	[EditorBrowsableAttribute] // RVA: 0xC67144 Offset: 0xC67144 VA: 0xC67144
	public const EventType repaint = 7;
	[ObsoleteAttribute] // RVA: 0xC67198 Offset: 0xC67198 VA: 0xC67198
	[EditorBrowsableAttribute] // RVA: 0xC67198 Offset: 0xC67198 VA: 0xC67198
	public const EventType layout = 8;
	[ObsoleteAttribute] // RVA: 0xC671EC Offset: 0xC671EC VA: 0xC671EC
	[EditorBrowsableAttribute] // RVA: 0xC671EC Offset: 0xC671EC VA: 0xC671EC
	public const EventType dragUpdated = 9;
	[EditorBrowsableAttribute] // RVA: 0xC67240 Offset: 0xC67240 VA: 0xC67240
	[ObsoleteAttribute] // RVA: 0xC67240 Offset: 0xC67240 VA: 0xC67240
	public const EventType dragPerform = 10;
	[EditorBrowsableAttribute] // RVA: 0xC67294 Offset: 0xC67294 VA: 0xC67294
	[ObsoleteAttribute] // RVA: 0xC67294 Offset: 0xC67294 VA: 0xC67294
	public const EventType ignore = 11;
	[ObsoleteAttribute] // RVA: 0xC672E8 Offset: 0xC672E8 VA: 0xC672E8
	[EditorBrowsableAttribute] // RVA: 0xC672E8 Offset: 0xC672E8 VA: 0xC672E8
	public const EventType used = 12;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xC6694C Offset: 0xC6694C VA: 0xC6694C
public enum EventModifiers // TypeDefIndex: 2731
{
	// Fields
	public int value__; // 0x0
	public const EventModifiers None = 0;
	public const EventModifiers Shift = 1;
	public const EventModifiers Control = 2;
	public const EventModifiers Alt = 4;
	public const EventModifiers Command = 8;
	public const EventModifiers Numeric = 16;
	public const EventModifiers CapsLock = 32;
	public const EventModifiers FunctionKey = 64;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6695C Offset: 0xC6695C VA: 0xC6695C
[NativeHeaderAttribute] // RVA: 0xC6695C Offset: 0xC6695C VA: 0xC6695C
public class GUI // TypeDefIndex: 2732
{
	// Fields
	private static int s_ScrollControlId; // 0x0
	private static int s_HotTextField; // 0x4
	private static readonly int s_BoxHash; // 0x8
	private static readonly int s_ButonHash; // 0xC
	private static readonly int s_RepeatButtonHash; // 0x10
	private static readonly int s_ToggleHash; // 0x14
	private static readonly int s_ButtonGridHash; // 0x18
	private static readonly int s_SliderHash; // 0x1C
	private static readonly int s_BeginGroupHash; // 0x20
	private static readonly int s_ScrollviewHash; // 0x24
	[DebuggerBrowsableAttribute] // RVA: 0xC6733C Offset: 0xC6733C VA: 0xC6733C
	[CompilerGeneratedAttribute] // RVA: 0xC6733C Offset: 0xC6733C VA: 0xC6733C
	private static int <scrollTroughSide>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC67378 Offset: 0xC67378 VA: 0xC67378
	[DebuggerBrowsableAttribute] // RVA: 0xC67378 Offset: 0xC67378 VA: 0xC67378
	private static DateTime <nextScrollStepTime>k__BackingField; // 0x30
	private static GUISkin s_Skin; // 0x40
	private static readonly GenericStack s_ScrollViewStates; // 0x48

	// Properties
	public static Color color { get; set; }
	public static Color backgroundColor { get; set; }
	public static Color contentColor { get; set; }
	public static bool changed { get; set; }
	public static bool enabled { get; }
	public static int depth { get; set; }
	internal static bool usePageScrollbars { get; }
	internal static Material blendMaterial { get; }
	internal static Material blitMaterial { get; }
	internal static Material roundedRectMaterial { get; }
	internal static int scrollTroughSide { get; set; }
	internal static DateTime nextScrollStepTime { get; set; }
	public static GUISkin skin { get; set; }
	public static Matrix4x4 matrix { get; set; }
	public static string tooltip { get; }

	// Methods

	// RVA: 0x27C8074 Offset: 0x27C8074 VA: 0x27C8074
	private static void .cctor() { }

	// RVA: 0x27C8310 Offset: 0x27C8310 VA: 0x27C8310
	public static Color get_color() { }

	// RVA: 0x27C83F4 Offset: 0x27C83F4 VA: 0x27C83F4
	public static void set_color(Color value) { }

	// RVA: 0x27C84D4 Offset: 0x27C84D4 VA: 0x27C84D4
	public static Color get_backgroundColor() { }

	// RVA: 0x27C85B8 Offset: 0x27C85B8 VA: 0x27C85B8
	public static void set_backgroundColor(Color value) { }

	// RVA: 0x27C8698 Offset: 0x27C8698 VA: 0x27C8698
	public static Color get_contentColor() { }

	// RVA: 0x27C877C Offset: 0x27C877C VA: 0x27C877C
	public static void set_contentColor(Color value) { }

	// RVA: 0x27C885C Offset: 0x27C885C VA: 0x27C885C
	public static bool get_changed() { }

	// RVA: 0x27C88B4 Offset: 0x27C88B4 VA: 0x27C88B4
	public static void set_changed(bool value) { }

	// RVA: 0x27C8920 Offset: 0x27C8920 VA: 0x27C8920
	public static bool get_enabled() { }

	// RVA: 0x27C8978 Offset: 0x27C8978 VA: 0x27C8978
	public static int get_depth() { }

	// RVA: 0x27C89D0 Offset: 0x27C89D0 VA: 0x27C89D0
	public static void set_depth(int value) { }

	// RVA: 0x27C8A3C Offset: 0x27C8A3C VA: 0x27C8A3C
	internal static bool get_usePageScrollbars() { }

	[FreeFunctionAttribute] // RVA: 0xC67C4C Offset: 0xC67C4C VA: 0xC67C4C
	// RVA: 0x27C8A94 Offset: 0x27C8A94 VA: 0x27C8A94
	internal static Material get_blendMaterial() { }

	[FreeFunctionAttribute] // RVA: 0xC67C84 Offset: 0xC67C84 VA: 0xC67C84
	// RVA: 0x27C8AEC Offset: 0x27C8AEC VA: 0x27C8AEC
	internal static Material get_blitMaterial() { }

	[FreeFunctionAttribute] // RVA: 0xC67CBC Offset: 0xC67CBC VA: 0xC67CBC
	// RVA: 0x27C8B44 Offset: 0x27C8B44 VA: 0x27C8B44
	internal static Material get_roundedRectMaterial() { }

	// RVA: 0x27C8B9C Offset: 0x27C8B9C VA: 0x27C8B9C
	private static void GrabMouseControl(int id) { }

	// RVA: 0x27C8C08 Offset: 0x27C8C08 VA: 0x27C8C08
	private static bool HasMouseControl(int id) { }

	// RVA: 0x27C8C74 Offset: 0x27C8C74 VA: 0x27C8C74
	private static void ReleaseMouseControl() { }

	[FreeFunctionAttribute] // RVA: 0xC67CF4 Offset: 0xC67CF4 VA: 0xC67CF4
	// RVA: 0x27C8CCC Offset: 0x27C8CCC VA: 0x27C8CCC
	public static void SetNextControlName(string name) { }

	// RVA: 0x27C8D38 Offset: 0x27C8D38 VA: 0x27C8D38
	internal static void InternalRepaintEditorWindow() { }

	// RVA: 0x27C8D90 Offset: 0x27C8D90 VA: 0x27C8D90
	private static string Internal_GetTooltip() { }

	[CompilerGeneratedAttribute] // RVA: 0xC67D2C Offset: 0xC67D2C VA: 0xC67D2C
	// RVA: 0x27C8DE8 Offset: 0x27C8DE8 VA: 0x27C8DE8
	internal static int get_scrollTroughSide() { }

	[CompilerGeneratedAttribute] // RVA: 0xC67D3C Offset: 0xC67D3C VA: 0xC67D3C
	// RVA: 0x27C8E50 Offset: 0x27C8E50 VA: 0x27C8E50
	internal static void set_scrollTroughSide(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC67D4C Offset: 0xC67D4C VA: 0xC67D4C
	// RVA: 0x27C8EBC Offset: 0x27C8EBC VA: 0x27C8EBC
	internal static DateTime get_nextScrollStepTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xC67D5C Offset: 0xC67D5C VA: 0xC67D5C
	// RVA: 0x27C8298 Offset: 0x27C8298 VA: 0x27C8298
	internal static void set_nextScrollStepTime(DateTime value) { }

	// RVA: 0x27C8F24 Offset: 0x27C8F24 VA: 0x27C8F24
	public static void set_skin(GUISkin value) { }

	// RVA: 0x27C90CC Offset: 0x27C90CC VA: 0x27C90CC
	public static GUISkin get_skin() { }

	// RVA: 0x27C9018 Offset: 0x27C9018 VA: 0x27C9018
	internal static void DoSetSkin(GUISkin newSkin) { }

	// RVA: 0x27C9248 Offset: 0x27C9248 VA: 0x27C9248
	public static Matrix4x4 get_matrix() { }

	// RVA: 0x27C92F0 Offset: 0x27C92F0 VA: 0x27C92F0
	public static void set_matrix(Matrix4x4 value) { }

	// RVA: 0x27C9334 Offset: 0x27C9334 VA: 0x27C9334
	public static string get_tooltip() { }

	// RVA: 0x27C93A8 Offset: 0x27C93A8 VA: 0x27C93A8
	public static void Label(Rect position, string text) { }

	// RVA: 0x27C9614 Offset: 0x27C9614 VA: 0x27C9614
	public static void Label(Rect position, GUIContent content) { }

	// RVA: 0x27C96C4 Offset: 0x27C96C4 VA: 0x27C96C4
	public static void Label(Rect position, string text, GUIStyle style) { }

	// RVA: 0x27C956C Offset: 0x27C956C VA: 0x27C956C
	public static void Label(Rect position, GUIContent content, GUIStyle style) { }

	// RVA: 0x27C9998 Offset: 0x27C9998 VA: 0x27C9998
	public static void DrawTexture(Rect position, Texture image) { }

	// RVA: 0x27C9A30 Offset: 0x27C9A30 VA: 0x27C9A30
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode) { }

	// RVA: 0x27C9AD8 Offset: 0x27C9AD8 VA: 0x27C9AD8
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend) { }

	// RVA: 0x27C9B88 Offset: 0x27C9B88 VA: 0x27C9B88
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect) { }

	// RVA: 0x27C9C64 Offset: 0x27C9C64 VA: 0x27C9C64
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, float borderWidth, float borderRadius) { }

	// RVA: 0x27C9D98 Offset: 0x27C9D98 VA: 0x27C9D98
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, float borderRadius) { }

	// RVA: 0x27C9EF8 Offset: 0x27C9EF8 VA: 0x27C9EF8
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, Vector4 borderRadiuses) { }

	// RVA: 0x27CA2C8 Offset: 0x27CA2C8 VA: 0x27CA2C8
	internal static bool CalculateScaledTextureRects(Rect position, ScaleMode scaleMode, float imageAspect, ref Rect outScreenRect, ref Rect outSourceRect) { }

	// RVA: 0x27CA4F4 Offset: 0x27CA4F4 VA: 0x27CA4F4
	public static void Box(Rect position, string text) { }

	// RVA: 0x27CA728 Offset: 0x27CA728 VA: 0x27CA728
	public static void Box(Rect position, GUIContent content) { }

	// RVA: 0x27CA5DC Offset: 0x27CA5DC VA: 0x27CA5DC
	public static void Box(Rect position, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CA834 Offset: 0x27CA834 VA: 0x27CA834
	public static bool Button(Rect position, string text) { }

	// RVA: 0x27CA91C Offset: 0x27CA91C VA: 0x27CA91C
	public static bool Button(Rect position, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CAA18 Offset: 0x27CAA18 VA: 0x27CAA18
	internal static bool Button(Rect position, int id, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CAB78 Offset: 0x27CAB78 VA: 0x27CAB78
	public static bool RepeatButton(Rect position, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CAC20 Offset: 0x27CAC20 VA: 0x27CAC20
	private static bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType) { }

	// RVA: 0x27CAF14 Offset: 0x27CAF14 VA: 0x27CAF14
	public static string PasswordField(Rect position, string password, char maskChar, int maxLength, GUIStyle style) { }

	// RVA: 0x27CB13C Offset: 0x27CB13C VA: 0x27CB13C
	internal static string PasswordFieldGetStrToShow(string password, char maskChar) { }

	// RVA: 0x27CB754 Offset: 0x27CB754 VA: 0x27CB754
	public static string TextArea(Rect position, string text) { }

	// RVA: 0x27CB684 Offset: 0x27CB684 VA: 0x27CB684
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style) { }

	// RVA: 0x27CB880 Offset: 0x27CB880 VA: 0x27CB880
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText) { }

	// RVA: 0x27CB298 Offset: 0x27CB298 VA: 0x27CB298
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar) { }

	// RVA: 0x27CB9D4 Offset: 0x27CB9D4 VA: 0x27CB9D4
	private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor) { }

	// RVA: 0x27CBE48 Offset: 0x27CBE48 VA: 0x27CBE48
	private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor) { }

	// RVA: 0x27CC71C Offset: 0x27CC71C VA: 0x27CC71C
	public static bool Toggle(Rect position, bool value, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CC8B8 Offset: 0x27CC8B8 VA: 0x27CC8B8
	public static int Toolbar(Rect position, int selected, GUIContent[] contents, GUIStyle style, GUI.ToolbarButtonSize buttonSize) { }

	// RVA: 0x27CC978 Offset: 0x27CC978 VA: 0x27CC978
	internal static int Toolbar(Rect position, int selected, GUIContent[] contents, string[] controlNames, GUIStyle style, GUI.ToolbarButtonSize buttonSize) { }

	// RVA: 0x27CCAA4 Offset: 0x27CCAA4 VA: 0x27CCAA4
	internal static void FindStyles(ref GUIStyle style, out GUIStyle firstStyle, out GUIStyle midStyle, out GUIStyle lastStyle, string first, string mid, string last) { }

	// RVA: 0x27CD838 Offset: 0x27CD838 VA: 0x27CD838
	internal static int CalcTotalHorizSpacing(int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle) { }

	// RVA: 0x27CDB5C Offset: 0x27CDB5C VA: 0x27CDB5C
	private static bool DoControl(Rect position, int id, bool on, GUIContent content, GUIStyle style) { }

	// RVA: 0x27C9798 Offset: 0x27C9798 VA: 0x27C9798
	private static void DoLabel(Rect position, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CC7FC Offset: 0x27CC7FC VA: 0x27CC7FC
	internal static bool DoToggle(Rect position, int id, bool value, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CAAC8 Offset: 0x27CAAC8 VA: 0x27CAAC8
	internal static bool DoButton(Rect position, int id, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CCCEC Offset: 0x27CCCEC VA: 0x27CCCEC
	private static int DoButtonGrid(Rect position, int selected, GUIContent[] contents, string[] controlNames, int xCount, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, GUI.ToolbarButtonSize buttonSize) { }

	// RVA: 0x27CE018 Offset: 0x27CE018 VA: 0x27CE018
	private static Rect[] CalcMouseRects(Rect position, GUIContent[] contents, int xCount, float elemWidth, float elemHeight, GUIStyle style, GUIStyle firstStyle, GUIStyle midStyle, GUIStyle lastStyle, bool addBorders, GUI.ToolbarButtonSize buttonSize) { }

	// RVA: 0x27CE5A4 Offset: 0x27CE5A4 VA: 0x27CE5A4
	public static float HorizontalSlider(Rect position, float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb) { }

	// RVA: 0x27CE7A8 Offset: 0x27CE7A8 VA: 0x27CE7A8
	public static float VerticalSlider(Rect position, float value, float topValue, float bottomValue, GUIStyle slider, GUIStyle thumb) { }

	// RVA: 0x27CE67C Offset: 0x27CE67C VA: 0x27CE67C
	public static float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id) { }

	// RVA: 0x27CE93C Offset: 0x27CE93C VA: 0x27CE93C
	public static float HorizontalScrollbar(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle style) { }

	// RVA: 0x27CF4B0 Offset: 0x27CF4B0 VA: 0x27CF4B0
	internal static bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style) { }

	// RVA: 0x27CF758 Offset: 0x27CF758 VA: 0x27CF758
	public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue, GUIStyle style) { }

	// RVA: 0x27CEEB0 Offset: 0x27CEEB0 VA: 0x27CEEB0
	internal static float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz) { }

	// RVA: 0x27CF954 Offset: 0x27CF954 VA: 0x27CF954
	public static void BeginGroup(Rect position, GUIContent content, GUIStyle style) { }

	// RVA: 0x27CFA38 Offset: 0x27CFA38 VA: 0x27CFA38
	internal static void BeginGroup(Rect position, GUIContent content, GUIStyle style, Vector2 scrollOffset) { }

	// RVA: 0x27CFD64 Offset: 0x27CFD64 VA: 0x27CFD64
	public static void EndGroup() { }

	// RVA: 0x27CFDD0 Offset: 0x27CFDD0 VA: 0x27CFDD0
	public static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect) { }

	// RVA: 0x27CFEF0 Offset: 0x27CFEF0 VA: 0x27CFEF0
	internal static Vector2 BeginScrollView(Rect position, Vector2 scrollPosition, Rect viewRect, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background) { }

	// RVA: 0x27D0E4C Offset: 0x27D0E4C VA: 0x27D0E4C
	public static void EndScrollView() { }

	// RVA: 0x27D0EAC Offset: 0x27D0EAC VA: 0x27D0EAC
	public static void EndScrollView(bool handleScrollWheel) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC67D6C Offset: 0xC67D6C VA: 0xC67D6C
	// RVA: 0x27D1298 Offset: 0x27D1298 VA: 0x27D1298
	internal static void CallWindowDelegate(GUI.WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style) { }

	// RVA: 0x27C8388 Offset: 0x27C8388 VA: 0x27C8388
	private static void get_color_Injected(out Color ret) { }

	// RVA: 0x27C8468 Offset: 0x27C8468 VA: 0x27C8468
	private static void set_color_Injected(ref Color value) { }

	// RVA: 0x27C854C Offset: 0x27C854C VA: 0x27C854C
	private static void get_backgroundColor_Injected(out Color ret) { }

	// RVA: 0x27C862C Offset: 0x27C862C VA: 0x27C862C
	private static void set_backgroundColor_Injected(ref Color value) { }

	// RVA: 0x27C8710 Offset: 0x27C8710 VA: 0x27C8710
	private static void get_contentColor_Injected(out Color ret) { }

	// RVA: 0x27C87F0 Offset: 0x27C87F0 VA: 0x27C87F0
	private static void set_contentColor_Injected(ref Color value) { }
}

// Namespace: 
public enum GUI.ToolbarButtonSize // TypeDefIndex: 2733
{
	// Fields
	public int value__; // 0x0
	public const GUI.ToolbarButtonSize Fixed = 0;
	public const GUI.ToolbarButtonSize FitToContents = 1;
}

// Namespace: 
public sealed class GUI.WindowFunction : MulticastDelegate // TypeDefIndex: 2734
{
	// Methods

	// RVA: 0x27D2124 Offset: 0x27D2124 VA: 0x27D2124
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x27D1C34 Offset: 0x27D1C34 VA: 0x27D1C34 Slot: 11
	public virtual void Invoke(int id) { }

	// RVA: 0x27D2134 Offset: 0x27D2134 VA: 0x27D2134 Slot: 12
	public virtual IAsyncResult BeginInvoke(int id, AsyncCallback callback, object object) { }

	// RVA: 0x27D21C0 Offset: 0x27D21C0 VA: 0x27D21C0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC669BC Offset: 0xC669BC VA: 0xC669BC
[NativeHeaderAttribute] // RVA: 0xC669BC Offset: 0xC669BC VA: 0xC669BC
[VisibleToOtherModulesAttribute] // RVA: 0xC669BC Offset: 0xC669BC VA: 0xC669BC
internal sealed class GUIClip // TypeDefIndex: 2735
{
	// Properties
	internal static Rect visibleRect { get; }

	// Methods

	[FreeFunctionAttribute] // RVA: 0xC67D7C Offset: 0xC67D7C VA: 0xC67D7C
	// RVA: 0x27CDE98 Offset: 0x27CDE98 VA: 0x27CDE98
	internal static Rect get_visibleRect() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC67DB4 Offset: 0xC67DB4 VA: 0xC67DB4
	// RVA: 0x27D2238 Offset: 0x27D2238 VA: 0x27D2238
	internal static void Internal_Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC67E2C Offset: 0xC67E2C VA: 0xC67E2C
	// RVA: 0x27CFD78 Offset: 0x27CFD78 VA: 0x27CFD78
	internal static void Internal_Pop() { }

	[FreeFunctionAttribute] // RVA: 0xC67EA4 Offset: 0xC67EA4 VA: 0xC67EA4
	// RVA: 0x27D2300 Offset: 0x27D2300 VA: 0x27D2300
	private static Vector2 Unclip_Vector2(Vector2 pos) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC67EDC Offset: 0xC67EDC VA: 0xC67EDC
	[FreeFunctionAttribute] // RVA: 0xC67EDC Offset: 0xC67EDC VA: 0xC67EDC
	// RVA: 0x27C92A8 Offset: 0x27C92A8 VA: 0x27C92A8
	internal static Matrix4x4 GetMatrix() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC67F78 Offset: 0xC67F78 VA: 0xC67F78
	// RVA: 0x27C9330 Offset: 0x27C9330 VA: 0x27C9330
	internal static void SetMatrix(Matrix4x4 m) { }

	// RVA: 0x27CFD5C Offset: 0x27CFD5C VA: 0x27CFD5C
	internal static void Push(Rect screenRect, Vector2 scrollOffset, Vector2 renderOffset, bool resetOffset) { }

	// RVA: 0x27D1294 Offset: 0x27D1294 VA: 0x27D1294
	internal static void Pop() { }

	// RVA: 0x27D247C Offset: 0x27D247C VA: 0x27D247C
	public static Vector2 Unclip(Vector2 pos) { }

	// RVA: 0x27D21CC Offset: 0x27D21CC VA: 0x27D21CC
	private static void get_visibleRect_Injected(out Rect ret) { }

	// RVA: 0x27D2274 Offset: 0x27D2274 VA: 0x27D2274
	private static void Internal_Push_Injected(ref Rect screenRect, ref Vector2 scrollOffset, ref Vector2 renderOffset, bool resetOffset) { }

	// RVA: 0x27D2330 Offset: 0x27D2330 VA: 0x27D2330
	private static void Unclip_Vector2_Injected(ref Vector2 pos, out Vector2 ret) { }

	// RVA: 0x27D23A4 Offset: 0x27D23A4 VA: 0x27D23A4
	private static void GetMatrix_Injected(out Matrix4x4 ret) { }

	// RVA: 0x27D2410 Offset: 0x27D2410 VA: 0x27D2410
	private static void SetMatrix_Injected(ref Matrix4x4 m) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC66A7C Offset: 0xC66A7C VA: 0xC66A7C
[RequiredByNativeCodeAttribute] // RVA: 0xC66A7C Offset: 0xC66A7C VA: 0xC66A7C
[Serializable]
public class GUIContent // TypeDefIndex: 2736
{
	// Fields
	[SerializeField] // RVA: 0xC673B4 Offset: 0xC673B4 VA: 0xC673B4
	private string m_Text; // 0x10
	[SerializeField] // RVA: 0xC673C4 Offset: 0xC673C4 VA: 0xC673C4
	private Texture m_Image; // 0x18
	[SerializeField] // RVA: 0xC673D4 Offset: 0xC673D4 VA: 0xC673D4
	private string m_Tooltip; // 0x20
	private static readonly GUIContent s_Text; // 0x0
	private static readonly GUIContent s_Image; // 0x8
	private static readonly GUIContent s_TextImage; // 0x10
	public static GUIContent none; // 0x18

	// Properties
	public string text { get; set; }
	public Texture image { set; }
	public string tooltip { get; set; }

	// Methods

	// RVA: 0x27D24AC Offset: 0x27D24AC VA: 0x27D24AC
	public void .ctor() { }

	// RVA: 0x27D2530 Offset: 0x27D2530 VA: 0x27D2530
	public void .ctor(string text) { }

	// RVA: 0x27D25B4 Offset: 0x27D25B4 VA: 0x27D25B4
	public void .ctor(string text, Texture image, string tooltip) { }

	// RVA: 0x27D2670 Offset: 0x27D2670 VA: 0x27D2670
	public void .ctor(GUIContent src) { }

	// RVA: 0x27CB74C Offset: 0x27CB74C VA: 0x27CB74C
	public string get_text() { }

	// RVA: 0x27CB958 Offset: 0x27CB958 VA: 0x27CB958
	public void set_text(string value) { }

	// RVA: 0x27D2660 Offset: 0x27D2660 VA: 0x27D2660
	public void set_image(Texture value) { }

	// RVA: 0x27CDE90 Offset: 0x27CDE90 VA: 0x27CDE90
	public string get_tooltip() { }

	// RVA: 0x27D2668 Offset: 0x27D2668 VA: 0x27D2668
	public void set_tooltip(string value) { }

	// RVA: 0x27C9488 Offset: 0x27C9488 VA: 0x27C9488
	internal static GUIContent Temp(string t) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC67FF0 Offset: 0xC67FF0 VA: 0xC67FF0
	// RVA: 0x27D2754 Offset: 0x27D2754 VA: 0x27D2754
	internal static void ClearStaticCache() { }

	// RVA: 0x27D289C Offset: 0x27D289C VA: 0x27D289C
	private static void .cctor() { }
}

// Namespace: UnityEngine
public enum ScaleMode // TypeDefIndex: 2737
{
	// Fields
	public int value__; // 0x0
	public const ScaleMode StretchToFill = 0;
	public const ScaleMode ScaleAndCrop = 1;
	public const ScaleMode ScaleToFit = 2;
}

// Namespace: UnityEngine
public enum FocusType // TypeDefIndex: 2738
{
	// Fields
	public int value__; // 0x0
	[ObsoleteAttribute] // RVA: 0xC673E4 Offset: 0xC673E4 VA: 0xC673E4
	public const FocusType Native = 0;
	public const FocusType Keyboard = 1;
	public const FocusType Passive = 2;
}

// Namespace: UnityEngine
public class GUILayout // TypeDefIndex: 2739
{
	// Methods

	// RVA: 0x27D2954 Offset: 0x27D2954 VA: 0x27D2954
	public static void Label(string text, GUILayoutOption[] options) { }

	// RVA: 0x27D2AE4 Offset: 0x27D2AE4 VA: 0x27D2AE4
	public static void Label(GUIContent content, GUILayoutOption[] options) { }

	// RVA: 0x27D2B6C Offset: 0x27D2B6C VA: 0x27D2B6C
	public static void Label(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2A0C Offset: 0x27D2A0C VA: 0x27D2A0C
	private static void DoLabel(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2BEC Offset: 0x27D2BEC VA: 0x27D2BEC
	public static void Box(GUIContent content, GUILayoutOption[] options) { }

	// RVA: 0x27D2D4C Offset: 0x27D2D4C VA: 0x27D2D4C
	public static void Box(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2C74 Offset: 0x27D2C74 VA: 0x27D2C74
	private static void DoBox(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2D50 Offset: 0x27D2D50 VA: 0x27D2D50
	public static bool Button(GUIContent content, GUILayoutOption[] options) { }

	// RVA: 0x27D2EB0 Offset: 0x27D2EB0 VA: 0x27D2EB0
	public static bool Button(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2DD8 Offset: 0x27D2DD8 VA: 0x27D2DD8
	private static bool DoButton(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2EB4 Offset: 0x27D2EB4 VA: 0x27D2EB4
	public static bool RepeatButton(GUIContent content, GUILayoutOption[] options) { }

	// RVA: 0x27D3014 Offset: 0x27D3014 VA: 0x27D3014
	public static bool RepeatButton(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D2F3C Offset: 0x27D2F3C VA: 0x27D2F3C
	private static bool DoRepeatButton(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3018 Offset: 0x27D3018 VA: 0x27D3018
	public static string TextField(string text, GUILayoutOption[] options) { }

	// RVA: 0x27D32D0 Offset: 0x27D32D0 VA: 0x27D32D0
	public static string TextField(string text, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D32EC Offset: 0x27D32EC VA: 0x27D32EC
	public static string TextField(string text, int maxLength, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3304 Offset: 0x27D3304 VA: 0x27D3304
	public static string PasswordField(string password, char maskChar, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D331C Offset: 0x27D331C VA: 0x27D331C
	public static string PasswordField(string password, char maskChar, int maxLength, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D30B0 Offset: 0x27D30B0 VA: 0x27D30B0
	private static string DoTextField(string text, int maxLength, bool multiline, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3438 Offset: 0x27D3438 VA: 0x27D3438
	public static bool Toggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3440 Offset: 0x27D3440 VA: 0x27D3440
	private static bool DoToggle(bool value, GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3528 Offset: 0x27D3528 VA: 0x27D3528
	public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3538 Offset: 0x27D3538 VA: 0x27D3538
	public static int Toolbar(int selected, GUIContent[] contents, GUIStyle style, GUI.ToolbarButtonSize buttonSize, GUILayoutOption[] options) { }

	// RVA: 0x27D390C Offset: 0x27D390C VA: 0x27D390C
	public static float HorizontalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options) { }

	// RVA: 0x27D39DC Offset: 0x27D39DC VA: 0x27D39DC
	private static float DoHorizontalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options) { }

	// RVA: 0x27D3B14 Offset: 0x27D3B14 VA: 0x27D3B14
	public static float VerticalSlider(float value, float leftValue, float rightValue, GUILayoutOption[] options) { }

	// RVA: 0x27D3BE4 Offset: 0x27D3BE4 VA: 0x27D3BE4
	private static float DoVerticalSlider(float value, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUILayoutOption[] options) { }

	// RVA: 0x27D3D1C Offset: 0x27D3D1C VA: 0x27D3D1C
	public static void Space(float pixels) { }

	// RVA: 0x27D4110 Offset: 0x27D4110 VA: 0x27D4110
	public static void FlexibleSpace() { }

	// RVA: 0x27D44DC Offset: 0x27D44DC VA: 0x27D44DC
	public static void BeginHorizontal(GUILayoutOption[] options) { }

	// RVA: 0x27D457C Offset: 0x27D457C VA: 0x27D457C
	public static void BeginHorizontal(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D4A70 Offset: 0x27D4A70 VA: 0x27D4A70
	public static void EndHorizontal() { }

	// RVA: 0x27D4D68 Offset: 0x27D4D68 VA: 0x27D4D68
	public static void BeginVertical(GUILayoutOption[] options) { }

	// RVA: 0x27D4E08 Offset: 0x27D4E08 VA: 0x27D4E08
	public static void BeginVertical(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D4FA4 Offset: 0x27D4FA4 VA: 0x27D4FA4
	public static void EndVertical() { }

	// RVA: 0x27D5000 Offset: 0x27D5000 VA: 0x27D5000
	public static void BeginArea(Rect screenRect) { }

	// RVA: 0x27D539C Offset: 0x27D539C VA: 0x27D539C
	public static void BeginArea(Rect screenRect, string text) { }

	// RVA: 0x27D50C8 Offset: 0x27D50C8 VA: 0x27D50C8
	public static void BeginArea(Rect screenRect, GUIContent content, GUIStyle style) { }

	// RVA: 0x27D5788 Offset: 0x27D5788 VA: 0x27D5788
	public static void EndArea() { }

	// RVA: 0x27D5968 Offset: 0x27D5968 VA: 0x27D5968
	public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUILayoutOption[] options) { }

	// RVA: 0x27D5A48 Offset: 0x27D5A48 VA: 0x27D5A48
	public static Vector2 BeginScrollView(Vector2 scrollPosition, bool alwaysShowHorizontal, bool alwaysShowVertical, GUIStyle horizontalScrollbar, GUIStyle verticalScrollbar, GUIStyle background, GUILayoutOption[] options) { }

	// RVA: 0x27D5DB8 Offset: 0x27D5DB8 VA: 0x27D5DB8
	public static void EndScrollView() { }

	// RVA: 0x27D5DC0 Offset: 0x27D5DC0 VA: 0x27D5DC0
	internal static void EndScrollView(bool handleScrollWheel) { }

	// RVA: 0x27D17B8 Offset: 0x27D17B8 VA: 0x27D17B8
	public static GUILayoutOption Width(float width) { }

	// RVA: 0x27D5E84 Offset: 0x27D5E84 VA: 0x27D5E84
	public static GUILayoutOption MinWidth(float minWidth) { }

	// RVA: 0x27D5F18 Offset: 0x27D5F18 VA: 0x27D5F18
	public static GUILayoutOption MaxWidth(float maxWidth) { }

	// RVA: 0x27D1848 Offset: 0x27D1848 VA: 0x27D1848
	public static GUILayoutOption Height(float height) { }

	// RVA: 0x27D5FAC Offset: 0x27D5FAC VA: 0x27D5FAC
	public static GUILayoutOption MinHeight(float minHeight) { }

	// RVA: 0x27D6040 Offset: 0x27D6040 VA: 0x27D6040
	public static GUILayoutOption MaxHeight(float maxHeight) { }

	// RVA: 0x27D4444 Offset: 0x27D4444 VA: 0x27D4444
	public static GUILayoutOption ExpandWidth(bool expand) { }

	// RVA: 0x27D43AC Offset: 0x27D43AC VA: 0x27D43AC
	public static GUILayoutOption ExpandHeight(bool expand) { }
}

// Namespace: UnityEngine
public sealed class GUILayoutOption // TypeDefIndex: 2740
{
	// Fields
	internal GUILayoutOption.Type type; // 0x10
	internal object value; // 0x18

	// Methods

	// RVA: 0x27D5E48 Offset: 0x27D5E48 VA: 0x27D5E48
	internal void .ctor(GUILayoutOption.Type type, object value) { }
}

// Namespace: 
internal enum GUILayoutOption.Type // TypeDefIndex: 2741
{
	// Fields
	public int value__; // 0x0
	public const GUILayoutOption.Type fixedWidth = 0;
	public const GUILayoutOption.Type fixedHeight = 1;
	public const GUILayoutOption.Type minWidth = 2;
	public const GUILayoutOption.Type maxWidth = 3;
	public const GUILayoutOption.Type minHeight = 4;
	public const GUILayoutOption.Type maxHeight = 5;
	public const GUILayoutOption.Type stretchWidth = 6;
	public const GUILayoutOption.Type stretchHeight = 7;
	public const GUILayoutOption.Type alignStart = 8;
	public const GUILayoutOption.Type alignMiddle = 9;
	public const GUILayoutOption.Type alignEnd = 10;
	public const GUILayoutOption.Type alignJustify = 11;
	public const GUILayoutOption.Type equalSize = 12;
	public const GUILayoutOption.Type spacing = 13;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC66AEC Offset: 0xC66AEC VA: 0xC66AEC
public class GUILayoutUtility // TypeDefIndex: 2742
{
	// Fields
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredLayouts; // 0x0
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredWindows; // 0x8
	internal static GUILayoutUtility.LayoutCache current; // 0x10
	internal static readonly Rect kDummyRect; // 0x18
	private static GUIStyle s_SpaceStyle; // 0x28

	// Properties
	internal static GUIStyle spaceStyle { get; }

	// Methods

	// RVA: 0x27DA244 Offset: 0x27DA244 VA: 0x27DA244
	private static Rect Internal_GetWindowRect(int windowID) { }

	// RVA: 0x27DA338 Offset: 0x27DA338 VA: 0x27DA338
	private static void Internal_MoveWindow(int windowID, Rect r) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC68068 Offset: 0xC68068 VA: 0xC68068
	// RVA: 0x27D15F4 Offset: 0x27D15F4 VA: 0x27D15F4
	internal static GUILayoutUtility.LayoutCache SelectIDList(int instanceID, bool isWindow) { }

	// RVA: 0x27DA4F0 Offset: 0x27DA4F0 VA: 0x27DA4F0
	internal static void Begin(int instanceID) { }

	// RVA: 0x27D18DC Offset: 0x27D18DC VA: 0x27D18DC
	internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D1E60 Offset: 0x27D1E60 VA: 0x27D1E60
	internal static void Layout() { }

	// RVA: 0x27DAD20 Offset: 0x27DAD20 VA: 0x27DAD20
	internal static void LayoutFromEditorWindow() { }

	// RVA: 0x27DA7B4 Offset: 0x27DA7B4 VA: 0x27DA7B4
	internal static void LayoutFreeGroup(GUILayoutGroup toplevel) { }

	// RVA: 0x27DA9A4 Offset: 0x27DA9A4 VA: 0x27DA9A4
	private static void LayoutSingleGroup(GUILayoutGroup i) { }

	// RVA: 0x27DAF44 Offset: 0x27DAF44 VA: 0x27DAF44
	private static GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType) { }

	// RVA: 0x27D4714 Offset: 0x27D4714 VA: 0x27D4714
	internal static GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType) { }

	// RVA: 0x27D4ACC Offset: 0x27D4ACC VA: 0x27D4ACC
	internal static void EndLayoutGroup() { }

	// RVA: 0x27D5468 Offset: 0x27D5468 VA: 0x27D5468
	internal static GUILayoutGroup BeginLayoutArea(GUIStyle style, Type layoutType) { }

	// RVA: 0x27D2B70 Offset: 0x27D2B70 VA: 0x27D2B70
	public static Rect GetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27DB0BC Offset: 0x27DB0BC VA: 0x27DB0BC
	private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D3878 Offset: 0x27D3878 VA: 0x27D3878
	public static Rect GetRect(float width, float height, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27DB584 Offset: 0x27DB584 VA: 0x27DB584
	private static Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x27D4024 Offset: 0x27D4024 VA: 0x27D4024
	internal static GUIStyle get_spaceStyle() { }

	// RVA: 0x27DB888 Offset: 0x27DB888 VA: 0x27DB888
	private static void .cctor() { }

	// RVA: 0x27DA2C4 Offset: 0x27DA2C4 VA: 0x27DA2C4
	private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret) { }

	// RVA: 0x27DA3B4 Offset: 0x27DA3B4 VA: 0x27DA3B4
	private static void Internal_MoveWindow_Injected(int windowID, ref Rect r) { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0xC66B24 Offset: 0xC66B24 VA: 0xC66B24
internal sealed class GUILayoutUtility.LayoutCache // TypeDefIndex: 2743
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xC67420 Offset: 0xC67420 VA: 0xC67420
	internal GUILayoutGroup topLevel; // 0x10
	internal GenericStack layoutGroups; // 0x18
	internal GUILayoutGroup windows; // 0x20

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xC680E0 Offset: 0xC680E0 VA: 0xC680E0
	// RVA: 0x27DA428 Offset: 0x27DA428 VA: 0x27DA428
	internal void .ctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC66B9C Offset: 0xC66B9C VA: 0xC66B9C
[Serializable]
public sealed class GUISettings // TypeDefIndex: 2744
