	// RVA: 0x2217F10 Offset: 0x2217F10 VA: 0x2217F10 Slot: 6
	public override string get_Message() { }
}

// Namespace: System.Net.Sockets
[FlagsAttribute] // RVA: 0xBD07AC Offset: 0xBD07AC VA: 0xBD07AC
public enum SocketFlags // TypeDefIndex: 1493
{
	// Fields
	public int value__; // 0x0
	public const SocketFlags None = 0;
	public const SocketFlags OutOfBand = 1;
	public const SocketFlags Peek = 2;
	public const SocketFlags DontRoute = 4;
	public const SocketFlags MaxIOVectorLength = 16;
	public const SocketFlags Truncated = 256;
	public const SocketFlags ControlDataTruncated = 512;
	public const SocketFlags Broadcast = 1024;
	public const SocketFlags Multicast = 2048;
	public const SocketFlags Partial = 32768;
}

// Namespace: System.Net.Sockets
[Serializable]
public struct SocketInformation // TypeDefIndex: 1494
{
	// Fields
	private SocketInformationOptions options; // 0x0
	private byte[] protocol_info; // 0x8

	// Properties
	public SocketInformationOptions Options { get; set; }
	public byte[] ProtocolInformation { get; set; }

	// Methods

	// RVA: 0xD67AD4 Offset: 0xD67AD4 VA: 0xD67AD4
	public SocketInformationOptions get_Options() { }

	// RVA: 0xD67ADC Offset: 0xD67ADC VA: 0xD67ADC
	public void set_Options(SocketInformationOptions value) { }

	// RVA: 0xD67AE4 Offset: 0xD67AE4 VA: 0xD67AE4
	public byte[] get_ProtocolInformation() { }

	// RVA: 0xD67AEC Offset: 0xD67AEC VA: 0xD67AEC
	public void set_ProtocolInformation(byte[] value) { }
}

// Namespace: System.Net.Sockets
[FlagsAttribute] // RVA: 0xBD07BC Offset: 0xBD07BC VA: 0xBD07BC
public enum SocketInformationOptions // TypeDefIndex: 1495
{
	// Fields
	public int value__; // 0x0
	public const SocketInformationOptions NonBlocking = 1;
	public const SocketInformationOptions Connected = 2;
	public const SocketInformationOptions Listening = 4;
	public const SocketInformationOptions UseOnlyOverlappedIO = 8;
}

// Namespace: System.Net.Sockets
public enum SocketOptionLevel // TypeDefIndex: 1496
{
	// Fields
	public int value__; // 0x0
	public const SocketOptionLevel Socket = 65535;
	public const SocketOptionLevel IP = 0;
	public const SocketOptionLevel IPv6 = 41;
	public const SocketOptionLevel Tcp = 6;
	public const SocketOptionLevel Udp = 17;
}

// Namespace: System.Net.Sockets
public enum SocketOptionName // TypeDefIndex: 1497
{
	// Fields
	public int value__; // 0x0
	public const SocketOptionName Debug = 1;
	public const SocketOptionName AcceptConnection = 2;
	public const SocketOptionName ReuseAddress = 4;
	public const SocketOptionName KeepAlive = 8;
	public const SocketOptionName DontRoute = 16;
	public const SocketOptionName Broadcast = 32;
	public const SocketOptionName UseLoopback = 64;
	public const SocketOptionName Linger = 128;
	public const SocketOptionName OutOfBandInline = 256;
	public const SocketOptionName DontLinger = -129;
	public const SocketOptionName ExclusiveAddressUse = -5;
	public const SocketOptionName SendBuffer = 4097;
	public const SocketOptionName ReceiveBuffer = 4098;
	public const SocketOptionName SendLowWater = 4099;
	public const SocketOptionName ReceiveLowWater = 4100;
	public const SocketOptionName SendTimeout = 4101;
	public const SocketOptionName ReceiveTimeout = 4102;
	public const SocketOptionName Error = 4103;
	public const SocketOptionName Type = 4104;
	public const SocketOptionName MaxConnections = 2147483647;
	public const SocketOptionName IPOptions = 1;
	public const SocketOptionName HeaderIncluded = 2;
	public const SocketOptionName TypeOfService = 3;
	public const SocketOptionName IpTimeToLive = 4;
	public const SocketOptionName MulticastInterface = 9;
	public const SocketOptionName MulticastTimeToLive = 10;
	public const SocketOptionName MulticastLoopback = 11;
	public const SocketOptionName AddMembership = 12;
	public const SocketOptionName DropMembership = 13;
	public const SocketOptionName DontFragment = 14;
	public const SocketOptionName AddSourceMembership = 15;
	public const SocketOptionName DropSourceMembership = 16;
	public const SocketOptionName BlockSource = 17;
	public const SocketOptionName UnblockSource = 18;
	public const SocketOptionName PacketInformation = 19;
	public const SocketOptionName NoDelay = 1;
	public const SocketOptionName BsdUrgent = 2;
	public const SocketOptionName Expedited = 2;
	public const SocketOptionName NoChecksum = 1;
	public const SocketOptionName ChecksumCoverage = 20;
	public const SocketOptionName HopLimit = 21;
	public const SocketOptionName UpdateAcceptContext = 28683;
	public const SocketOptionName UpdateConnectContext = 28688;
}

// Namespace: System.Net.Sockets
internal static class SocketPolicyClient // TypeDefIndex: 1498
{
	// Fields
	private const string policy_request = "<policy-file-request/>\0";
	private static int session; // 0x0

	// Methods

	// RVA: 0x2217F38 Offset: 0x2217F38 VA: 0x2217F38
	private static void .cctor() { }

	// RVA: 0x2217F3C Offset: 0x2217F3C VA: 0x2217F3C
	private static void Log(string msg) { }

	// RVA: 0x2218180 Offset: 0x2218180 VA: 0x2218180
	private static Stream GetPolicyStreamForIP(string ip, int policyport, int timeout) { }
}

// Namespace: System.Net.Sockets
public enum SocketShutdown // TypeDefIndex: 1499
{
	// Fields
	public int value__; // 0x0
	public const SocketShutdown Receive = 0;
	public const SocketShutdown Send = 1;
	public const SocketShutdown Both = 2;
}

// Namespace: System.Net.Sockets
public enum SocketType // TypeDefIndex: 1500
{
	// Fields
	public int value__; // 0x0
	public const SocketType Stream = 1;
	public const SocketType Dgram = 2;
	public const SocketType Raw = 3;
	public const SocketType Rdm = 4;
	public const SocketType Seqpacket = 5;
	public const SocketType Unknown = -1;
}

// Namespace: System.Net.Sockets
public class TcpClient : IDisposable // TypeDefIndex: 1501
{
	// Fields
	private NetworkStream stream; // 0x10
	private bool active; // 0x18
	private Socket client; // 0x20
	private bool disposed; // 0x28
	private TcpClient.Properties values; // 0x2C
	private int recv_timeout; // 0x30
	private int send_timeout; // 0x34
	private int recv_buffer_size; // 0x38
	private int send_buffer_size; // 0x3C
	private LingerOption linger_state; // 0x40
	private bool no_delay; // 0x48

	// Properties
	protected bool Active { get; set; }
	public Socket Client { get; set; }
	public int Available { get; }
	public bool Connected { get; }
	public bool ExclusiveAddressUse { get; set; }
	public LingerOption LingerState { get; set; }
	public bool NoDelay { get; set; }
	public int ReceiveBufferSize { get; set; }
	public int ReceiveTimeout { get; set; }
	public int SendBufferSize { get; set; }
	public int SendTimeout { get; set; }

	// Methods

	// RVA: 0x2218A00 Offset: 0x2218A00 VA: 0x2218A00
	public void .ctor() { }

	// RVA: 0x2218B5C Offset: 0x2218B5C VA: 0x2218B5C
	public void .ctor(AddressFamily family) { }

	// RVA: 0x2218CB4 Offset: 0x2218CB4 VA: 0x2218CB4
	public void .ctor(IPEndPoint local_end_point) { }

	// RVA: 0x2218D20 Offset: 0x2218D20 VA: 0x2218D20
	public void .ctor(string hostname, int port) { }

	// RVA: 0x2218DE8 Offset: 0x2218DE8 VA: 0x2218DE8 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2218ACC Offset: 0x2218ACC VA: 0x2218ACC
	private void Init(AddressFamily family) { }

	// RVA: 0x2218E1C Offset: 0x2218E1C VA: 0x2218E1C
	protected bool get_Active() { }

	// RVA: 0x2218E24 Offset: 0x2218E24 VA: 0x2218E24
	protected void set_Active(bool value) { }

	// RVA: 0x2218E30 Offset: 0x2218E30 VA: 0x2218E30
	public Socket get_Client() { }

	// RVA: 0x2218E38 Offset: 0x2218E38 VA: 0x2218E38
	public void set_Client(Socket value) { }

	// RVA: 0x2218E44 Offset: 0x2218E44 VA: 0x2218E44
	public int get_Available() { }

	// RVA: 0x2218E74 Offset: 0x2218E74 VA: 0x2218E74
	public bool get_Connected() { }

	// RVA: 0x2218EA4 Offset: 0x2218EA4 VA: 0x2218EA4
	public bool get_ExclusiveAddressUse() { }

	// RVA: 0x2218ED4 Offset: 0x2218ED4 VA: 0x2218ED4
	public void set_ExclusiveAddressUse(bool value) { }

	// RVA: 0x2218F0C Offset: 0x2218F0C VA: 0x2218F0C
	internal void SetTcpClient(Socket s) { }

	// RVA: 0x2218F18 Offset: 0x2218F18 VA: 0x2218F18
	public LingerOption get_LingerState() { }

	// RVA: 0x2219014 Offset: 0x2219014 VA: 0x2219014
	public void set_LingerState(LingerOption value) { }

	// RVA: 0x22190A0 Offset: 0x22190A0 VA: 0x22190A0
	public bool get_NoDelay() { }

	// RVA: 0x2219128 Offset: 0x2219128 VA: 0x2219128
	public void set_NoDelay(bool value) { }

	// RVA: 0x22191BC Offset: 0x22191BC VA: 0x22191BC
	public int get_ReceiveBufferSize() { }

	// RVA: 0x2219244 Offset: 0x2219244 VA: 0x2219244
	public void set_ReceiveBufferSize(int value) { }

	// RVA: 0x22192D0 Offset: 0x22192D0 VA: 0x22192D0
	public int get_ReceiveTimeout() { }

	// RVA: 0x2219358 Offset: 0x2219358 VA: 0x2219358
	public void set_ReceiveTimeout(int value) { }

	// RVA: 0x22193E0 Offset: 0x22193E0 VA: 0x22193E0
	public int get_SendBufferSize() { }

	// RVA: 0x2219468 Offset: 0x2219468 VA: 0x2219468
	public void set_SendBufferSize(int value) { }

	// RVA: 0x22194F4 Offset: 0x22194F4 VA: 0x22194F4
	public int get_SendTimeout() { }

	// RVA: 0x221957C Offset: 0x221957C VA: 0x221957C
	public void set_SendTimeout(int value) { }

	// RVA: 0x2219608 Offset: 0x2219608 VA: 0x2219608
	public void Close() { }

	// RVA: 0x22196AC Offset: 0x22196AC VA: 0x22196AC
	public void Connect(IPEndPoint remote_end_point) { }

	// RVA: 0x2219808 Offset: 0x2219808 VA: 0x2219808
	public void Connect(IPAddress address, int port) { }

	// RVA: 0x2219884 Offset: 0x2219884 VA: 0x2219884
	private void SetOptions() { }

	// RVA: 0x2218D60 Offset: 0x2218D60 VA: 0x2218D60
	public void Connect(string hostname, int port) { }

	// RVA: 0x2219930 Offset: 0x2219930 VA: 0x2219930
	public void Connect(IPAddress[] ipAddresses, int port) { }

	// RVA: 0x2219D7C Offset: 0x2219D7C VA: 0x2219D7C
	public void EndConnect(IAsyncResult asyncResult) { }

	// RVA: 0x2219DB4 Offset: 0x2219DB4 VA: 0x2219DB4
	public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback callback, object state) { }

	// RVA: 0x2219E14 Offset: 0x2219E14 VA: 0x2219E14
	public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback callback, object state) { }

	// RVA: 0x2219E74 Offset: 0x2219E74 VA: 0x2219E74
	public IAsyncResult BeginConnect(string host, int port, AsyncCallback callback, object state) { }

	// RVA: 0x2219ED4 Offset: 0x2219ED4 VA: 0x2219ED4 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2219F38 Offset: 0x2219F38 VA: 0x2219F38 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2219FB8 Offset: 0x2219FB8 VA: 0x2219FB8
	public NetworkStream GetStream() { }

	// RVA: 0x2219750 Offset: 0x2219750 VA: 0x2219750
	private void CheckDisposed() { }
}

// Namespace: 
private enum TcpClient.Properties // TypeDefIndex: 1502
{
	// Fields
	public uint value__; // 0x0
	public const TcpClient.Properties LingerState = 1;
	public const TcpClient.Properties NoDelay = 2;
	public const TcpClient.Properties ReceiveBufferSize = 4;
	public const TcpClient.Properties ReceiveTimeout = 8;
	public const TcpClient.Properties SendBufferSize = 16;
	public const TcpClient.Properties SendTimeout = 32;
}

// Namespace: System.Net.Sockets
public class TcpListener // TypeDefIndex: 1503
{
	// Fields
	private bool active; // 0x10
	private Socket server; // 0x18
	private EndPoint savedEP; // 0x20

	// Properties
	protected bool Active { get; }
	public EndPoint LocalEndpoint { get; }
	public Socket Server { get; }
	public bool ExclusiveAddressUse { get; set; }

	// Methods

	[ObsoleteAttribute] // RVA: 0xBD1CD0 Offset: 0xBD1CD0 VA: 0xBD1CD0
	// RVA: 0x221A084 Offset: 0x221A084 VA: 0x221A084
	public void .ctor(int port) { }

	// RVA: 0x221A204 Offset: 0x221A204 VA: 0x221A204
	public void .ctor(IPEndPoint local_end_point) { }

	// RVA: 0x221A2C0 Offset: 0x221A2C0 VA: 0x221A2C0
	public void .ctor(IPAddress listen_ip, int port) { }

	// RVA: 0x221A184 Offset: 0x221A184 VA: 0x221A184
	private void Init(AddressFamily family, EndPoint ep) { }

	// RVA: 0x221A3E4 Offset: 0x221A3E4 VA: 0x221A3E4
	protected bool get_Active() { }

	// RVA: 0x221A3EC Offset: 0x221A3EC VA: 0x221A3EC
	public EndPoint get_LocalEndpoint() { }

	// RVA: 0x221A42C Offset: 0x221A42C VA: 0x221A42C
	public Socket get_Server() { }

	// RVA: 0x221A434 Offset: 0x221A434 VA: 0x221A434
	public bool get_ExclusiveAddressUse() { }

	// RVA: 0x221A52C Offset: 0x221A52C VA: 0x221A52C
	public void set_ExclusiveAddressUse(bool value) { }

	// RVA: 0x221A634 Offset: 0x221A634 VA: 0x221A634
	public Socket AcceptSocket() { }

	// RVA: 0x221A6D8 Offset: 0x221A6D8 VA: 0x221A6D8
	public TcpClient AcceptTcpClient() { }

	// RVA: 0x221A7B8 Offset: 0x221A7B8 VA: 0x221A7B8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x221A888 Offset: 0x221A888 VA: 0x221A888
	public bool Pending() { }

	// RVA: 0x221A934 Offset: 0x221A934 VA: 0x221A934
	public void Start() { }

	// RVA: 0x221A93C Offset: 0x221A93C VA: 0x221A93C
	public void Start(int backlog) { }

	// RVA: 0x221AA10 Offset: 0x221AA10 VA: 0x221AA10
	public IAsyncResult BeginAcceptSocket(AsyncCallback callback, object state) { }

	// RVA: 0x221AAE0 Offset: 0x221AAE0 VA: 0x221AAE0
	public IAsyncResult BeginAcceptTcpClient(AsyncCallback callback, object state) { }

	// RVA: 0x221ABB0 Offset: 0x221ABB0 VA: 0x221ABB0
	public Socket EndAcceptSocket(IAsyncResult asyncResult) { }

	// RVA: 0x221ABE8 Offset: 0x221ABE8 VA: 0x221ABE8
	public TcpClient EndAcceptTcpClient(IAsyncResult asyncResult) { }

	// RVA: 0x221A838 Offset: 0x221A838 VA: 0x221A838
	public void Stop() { }
}

// Namespace: System.Net.Sockets
[FlagsAttribute] // RVA: 0xBD07CC Offset: 0xBD07CC VA: 0xBD07CC
public enum TransmitFileOptions // TypeDefIndex: 1504
{
	// Fields
	public int value__; // 0x0
	public const TransmitFileOptions UseDefaultWorkerThread = 0;
	public const TransmitFileOptions Disconnect = 1;
	public const TransmitFileOptions ReuseSocket = 2;
	public const TransmitFileOptions WriteBehind = 4;
	public const TransmitFileOptions UseSystemThread = 16;
	public const TransmitFileOptions UseKernelApc = 32;
}

// Namespace: System.Net.Sockets
public class UdpClient : IDisposable // TypeDefIndex: 1505
{
	// Fields
	private bool disposed; // 0x10
	private bool active; // 0x11
	private Socket socket; // 0x18
	private AddressFamily family; // 0x20
	private byte[] recvbuffer; // 0x28

	// Properties
	protected bool Active { get; set; }
	public Socket Client { get; set; }
	public int Available { get; }
	public bool DontFragment { get; set; }
	public bool EnableBroadcast { get; set; }
	public bool ExclusiveAddressUse { get; set; }
	public bool MulticastLoopback { get; set; }
	public short Ttl { get; set; }

	// Methods

	// RVA: 0x221AC8C Offset: 0x221AC8C VA: 0x221AC8C
	public void .ctor() { }

	// RVA: 0x221AC94 Offset: 0x221AC94 VA: 0x221AC94
	public void .ctor(AddressFamily family) { }

	// RVA: 0x221AE1C Offset: 0x221AE1C VA: 0x221AE1C
	public void .ctor(int port) { }

	// RVA: 0x221AF24 Offset: 0x221AF24 VA: 0x221AF24
	public void .ctor(IPEndPoint localEP) { }

	// RVA: 0x221AFE8 Offset: 0x221AFE8 VA: 0x221AFE8
	public void .ctor(int port, AddressFamily family) { }

	// RVA: 0x221B16C Offset: 0x221B16C VA: 0x221B16C
	public void .ctor(string hostname, int port) { }

	// RVA: 0x221B4A8 Offset: 0x221B4A8 VA: 0x221B4A8 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x221AD60 Offset: 0x221AD60 VA: 0x221AD60
	private void InitSocket(EndPoint localEP) { }

	// RVA: 0x221B4DC Offset: 0x221B4DC VA: 0x221B4DC
	public void Close() { }

	// RVA: 0x221B580 Offset: 0x221B580 VA: 0x221B580
	private void DoConnect(IPEndPoint endPoint) { }

	// RVA: 0x221B6F0 Offset: 0x221B6F0 VA: 0x221B6F0
	public void Connect(IPEndPoint endPoint) { }

	// RVA: 0x221B858 Offset: 0x221B858 VA: 0x221B858
	public void Connect(IPAddress addr, int port) { }

	// RVA: 0x221B264 Offset: 0x221B264 VA: 0x221B264
	public void Connect(string hostname, int port) { }

	// RVA: 0x221B950 Offset: 0x221B950 VA: 0x221B950
	public void DropMulticastGroup(IPAddress multicastAddr) { }

	// RVA: 0x221BA78 Offset: 0x221BA78 VA: 0x221BA78
	public void DropMulticastGroup(IPAddress multicastAddr, int ifindex) { }

	// RVA: 0x221BB7C Offset: 0x221BB7C VA: 0x221BB7C
	public void JoinMulticastGroup(IPAddress multicastAddr) { }

	// RVA: 0x221BCA4 Offset: 0x221BCA4 VA: 0x221BCA4
	public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr) { }

	// RVA: 0x221BDBC Offset: 0x221BDBC VA: 0x221BDBC
	public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive) { }

	// RVA: 0x221BEDC Offset: 0x221BEDC VA: 0x221BEDC
	public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress) { }

	// RVA: 0x221BFC4 Offset: 0x221BFC4 VA: 0x221BFC4
	public byte[] Receive(ref IPEndPoint remoteEP) { }

	// RVA: 0x221C2AC Offset: 0x221C2AC VA: 0x221C2AC
	private int DoSend(byte[] dgram, int bytes, IPEndPoint endPoint) { }

	// RVA: 0x221C4B4 Offset: 0x221C4B4 VA: 0x221C4B4
	public int Send(byte[] dgram, int bytes) { }

	// RVA: 0x221C598 Offset: 0x221C598 VA: 0x221C598
	public int Send(byte[] dgram, int bytes, IPEndPoint endPoint) { }

	// RVA: 0x221C68C Offset: 0x221C68C VA: 0x221C68C
	public int Send(byte[] dgram, int bytes, string hostname, int port) { }

	// RVA: 0x221C228 Offset: 0x221C228 VA: 0x221C228
	private byte[] CutArray(byte[] orig, int length) { }

	// RVA: 0x221C774 Offset: 0x221C774 VA: 0x221C774
	private IAsyncResult DoBeginSend(byte[] datagram, int bytes, IPEndPoint endPoint, AsyncCallback requestCallback, object state) { }

	// RVA: 0x221C9B0 Offset: 0x221C9B0 VA: 0x221C9B0
	public IAsyncResult BeginSend(byte[] datagram, int bytes, AsyncCallback requestCallback, object state) { }

	// RVA: 0x221C9C8 Offset: 0x221C9C8 VA: 0x221C9C8
	public IAsyncResult BeginSend(byte[] datagram, int bytes, IPEndPoint endPoint, AsyncCallback requestCallback, object state) { }

	// RVA: 0x221CA9C Offset: 0x221CA9C VA: 0x221CA9C
	public IAsyncResult BeginSend(byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state) { }

	// RVA: 0x221CB9C Offset: 0x221CB9C VA: 0x221CB9C
	public int EndSend(IAsyncResult asyncResult) { }

	// RVA: 0x221CC54 Offset: 0x221CC54 VA: 0x221CC54
	public IAsyncResult BeginReceive(AsyncCallback callback, object state) { }

	// RVA: 0x221CD9C Offset: 0x221CD9C VA: 0x221CD9C
	public byte[] EndReceive(IAsyncResult asyncResult, ref IPEndPoint remoteEP) { }

	// RVA: 0x221D034 Offset: 0x221D034 VA: 0x221D034
	protected bool get_Active() { }

	// RVA: 0x221D03C Offset: 0x221D03C VA: 0x221D03C
	protected void set_Active(bool value) { }

	// RVA: 0x221D048 Offset: 0x221D048 VA: 0x221D048
	public Socket get_Client() { }

	// RVA: 0x221D050 Offset: 0x221D050 VA: 0x221D050
	public void set_Client(Socket value) { }

	// RVA: 0x221D058 Offset: 0x221D058 VA: 0x221D058
	public int get_Available() { }

	// RVA: 0x221D088 Offset: 0x221D088 VA: 0x221D088
	public bool get_DontFragment() { }

	// RVA: 0x221D0B8 Offset: 0x221D0B8 VA: 0x221D0B8
	public void set_DontFragment(bool value) { }

	// RVA: 0x221D0F0 Offset: 0x221D0F0 VA: 0x221D0F0
	public bool get_EnableBroadcast() { }

	// RVA: 0x221D120 Offset: 0x221D120 VA: 0x221D120
	public void set_EnableBroadcast(bool value) { }

	// RVA: 0x221D158 Offset: 0x221D158 VA: 0x221D158
	public bool get_ExclusiveAddressUse() { }

	// RVA: 0x221D188 Offset: 0x221D188 VA: 0x221D188
	public void set_ExclusiveAddressUse(bool value) { }

	// RVA: 0x221D1C0 Offset: 0x221D1C0 VA: 0x221D1C0
	public bool get_MulticastLoopback() { }

	// RVA: 0x221D1F0 Offset: 0x221D1F0 VA: 0x221D1F0
	public void set_MulticastLoopback(bool value) { }

	// RVA: 0x221D228 Offset: 0x221D228 VA: 0x221D228
	public short get_Ttl() { }

	// RVA: 0x221D258 Offset: 0x221D258 VA: 0x221D258
	public void set_Ttl(short value) { }

	// RVA: 0x221D290 Offset: 0x221D290 VA: 0x221D290 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x221D2D4 Offset: 0x221D2D4 VA: 0x221D2D4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x221B7A0 Offset: 0x221B7A0 VA: 0x221B7A0
	private void CheckDisposed() { }
}

// Namespace: System.Net
public class AuthenticationManager // TypeDefIndex: 1506
{
	// Fields
	private static ArrayList modules; // 0x0
	private static object locker; // 0x8
	private static ICredentialPolicy credential_policy; // 0x10

	// Properties
	public static ICredentialPolicy CredentialPolicy { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD364C Offset: 0xBD364C VA: 0xBD364C
	public static StringDictionary CustomTargetNameDictionary { get; }
	public static IEnumerator RegisteredModules { get; }

	// Methods

	// RVA: 0x1F287C0 Offset: 0x1F287C0 VA: 0x1F287C0
	private void .ctor() { }

	// RVA: 0x1F287C8 Offset: 0x1F287C8 VA: 0x1F287C8
	private static void .cctor() { }

	// RVA: 0x1F2883C Offset: 0x1F2883C VA: 0x1F2883C
	private static void EnsureModules() { }

	// RVA: 0x1F28A44 Offset: 0x1F28A44 VA: 0x1F28A44
	public static ICredentialPolicy get_CredentialPolicy() { }

	// RVA: 0x1F28AAC Offset: 0x1F28AAC VA: 0x1F28AAC
	public static void set_CredentialPolicy(ICredentialPolicy value) { }

	// RVA: 0x1F28B18 Offset: 0x1F28B18 VA: 0x1F28B18
	private static Exception GetMustImplement() { }

	// RVA: 0x1F28B74 Offset: 0x1F28B74 VA: 0x1F28B74
	public static StringDictionary get_CustomTargetNameDictionary() { }

	// RVA: 0x1F28BE0 Offset: 0x1F28BE0 VA: 0x1F28BE0
	public static IEnumerator get_RegisteredModules() { }

	// RVA: 0x1F28C68 Offset: 0x1F28C68 VA: 0x1F28C68
	internal static void Clear() { }

	// RVA: 0x1F28D7C Offset: 0x1F28D7C VA: 0x1F28D7C
	public static Authorization Authenticate(string challenge, WebRequest request, ICredentials credentials) { }

	// RVA: 0x1F28E80 Offset: 0x1F28E80 VA: 0x1F28E80
	private static Authorization DoAuthenticate(string challenge, WebRequest request, ICredentials credentials) { }

	// RVA: 0x1F29334 Offset: 0x1F29334 VA: 0x1F29334
	public static Authorization PreAuthenticate(WebRequest request, ICredentials credentials) { }

	// RVA: 0x1F29828 Offset: 0x1F29828 VA: 0x1F29828
	public static void Register(IAuthenticationModule authenticationModule) { }

	// RVA: 0x1F29F84 Offset: 0x1F29F84 VA: 0x1F29F84
	public static void Unregister(IAuthenticationModule authenticationModule) { }

	// RVA: 0x1F2A0A8 Offset: 0x1F2A0A8 VA: 0x1F2A0A8
	public static void Unregister(string authenticationScheme) { }

	// RVA: 0x1F29A18 Offset: 0x1F29A18 VA: 0x1F29A18
	private static void DoUnregister(string authenticationScheme, bool throwEx) { }
}

// Namespace: System.Net
[FlagsAttribute] // RVA: 0xBD07DC Offset: 0xBD07DC VA: 0xBD07DC
public enum AuthenticationSchemes // TypeDefIndex: 1507
{
	// Fields
	public int value__; // 0x0
	public const AuthenticationSchemes None = 0;
	public const AuthenticationSchemes Digest = 1;
	public const AuthenticationSchemes Negotiate = 2;
	public const AuthenticationSchemes Ntlm = 4;
	public const AuthenticationSchemes IntegratedWindowsAuthentication = 6;
	public const AuthenticationSchemes Basic = 8;
	public const AuthenticationSchemes Anonymous = 32768;
}

// Namespace: System.Net
public class Authorization // TypeDefIndex: 1508
{
	// Fields
	private string token; // 0x10
	private bool complete; // 0x18
	private string connectionGroupId; // 0x20
	private string[] protectionRealm; // 0x28
	private IAuthenticationModule module; // 0x30

	// Properties
	public string Message { get; }
	public bool Complete { get; }
	public string ConnectionGroupId { get; }
	public string[] ProtectionRealm { get; set; }
	internal IAuthenticationModule Module { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD365C Offset: 0xBD365C VA: 0xBD365C
	public bool MutuallyAuthenticated { get; set; }

	// Methods

	// RVA: 0x1F2A56C Offset: 0x1F2A56C VA: 0x1F2A56C
	public void .ctor(string token) { }

	// RVA: 0x1F2A5A4 Offset: 0x1F2A5A4 VA: 0x1F2A5A4
	public void .ctor(string token, bool complete) { }

	// RVA: 0x1F2A5E8 Offset: 0x1F2A5E8 VA: 0x1F2A5E8
	public void .ctor(string token, bool complete, string connectionGroupId) { }

	// RVA: 0x1F2A630 Offset: 0x1F2A630 VA: 0x1F2A630
	public string get_Message() { }

	// RVA: 0x1F2A638 Offset: 0x1F2A638 VA: 0x1F2A638
	public bool get_Complete() { }

	// RVA: 0x1F2A640 Offset: 0x1F2A640 VA: 0x1F2A640
	public string get_ConnectionGroupId() { }

	// RVA: 0x1F2A648 Offset: 0x1F2A648 VA: 0x1F2A648
	public string[] get_ProtectionRealm() { }

	// RVA: 0x1F2A650 Offset: 0x1F2A650 VA: 0x1F2A650
	public void set_ProtectionRealm(string[] value) { }

	// RVA: 0x1F2A658 Offset: 0x1F2A658 VA: 0x1F2A658
	internal IAuthenticationModule get_Module() { }

	// RVA: 0x1F2932C Offset: 0x1F2932C VA: 0x1F2932C
	internal void set_Module(IAuthenticationModule value) { }

	// RVA: 0x1F2A660 Offset: 0x1F2A660 VA: 0x1F2A660
	private static Exception GetMustImplement() { }

	// RVA: 0x1F2A6BC Offset: 0x1F2A6BC VA: 0x1F2A6BC
	public bool get_MutuallyAuthenticated() { }

	// RVA: 0x1F2A708 Offset: 0x1F2A708 VA: 0x1F2A708
	public void set_MutuallyAuthenticated(bool value) { }
}

// Namespace: System.Net
internal class BasicClient : IAuthenticationModule // TypeDefIndex: 1509
{
	// Properties
	public string AuthenticationType { get; }
	public bool CanPreAuthenticate { get; }

	// Methods

	// RVA: 0x1F28A34 Offset: 0x1F28A34 VA: 0x1F28A34
	public void .ctor() { }

	// RVA: 0x1F2A754 Offset: 0x1F2A754 VA: 0x1F2A754 Slot: 4
	public Authorization Authenticate(string challenge, WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0x1F2ACE8 Offset: 0x1F2ACE8 VA: 0x1F2ACE8
	private static byte[] GetBytes(string str) { }

	// RVA: 0x1F2A818 Offset: 0x1F2A818 VA: 0x1F2A818
	private static Authorization InternalAuthenticate(WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0x1F2ADD0 Offset: 0x1F2ADD0 VA: 0x1F2ADD0 Slot: 5
	public Authorization PreAuthenticate(WebRequest webRequest, ICredentials credentials) { }

	// RVA: 0x1F2ADDC Offset: 0x1F2ADDC VA: 0x1F2ADDC Slot: 6
	public string get_AuthenticationType() { }

	// RVA: 0x1F2AE24 Offset: 0x1F2AE24 VA: 0x1F2AE24 Slot: 7
	public bool get_CanPreAuthenticate() { }
}

// Namespace: System.Net
internal class ChunkStream // TypeDefIndex: 1510
{
	// Fields
	internal WebHeaderCollection headers; // 0x10
	private int chunkSize; // 0x18
	private int chunkRead; // 0x1C
	private ChunkStream.State state; // 0x20
	private StringBuilder saved; // 0x28
	private bool sawCR; // 0x30
	private bool gotit; // 0x31
	private int trailerState; // 0x34
	private ArrayList chunks; // 0x38

	// Properties
	public bool WantMore { get; }
	public int ChunkLeft { get; }

	// Methods

	// RVA: 0x1F2B344 Offset: 0x1F2B344 VA: 0x1F2B344
	public void .ctor(byte[] buffer, int offset, int size, WebHeaderCollection headers) { }

	// RVA: 0x1F2B39C Offset: 0x1F2B39C VA: 0x1F2B39C
	public void .ctor(WebHeaderCollection headers) { }

	// RVA: 0x1F2B464 Offset: 0x1F2B464 VA: 0x1F2B464
	public void ResetBuffer() { }

	// RVA: 0x1F2B4A4 Offset: 0x1F2B4A4 VA: 0x1F2B4A4
	public void WriteAndReadBack(byte[] buffer, int offset, int size, ref int read) { }

	// RVA: 0x1F2B51C Offset: 0x1F2B51C VA: 0x1F2B51C
	public int Read(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F2B520 Offset: 0x1F2B520 VA: 0x1F2B520
	private int ReadFromChunks(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F2B440 Offset: 0x1F2B440 VA: 0x1F2B440
	public void Write(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F2B7A8 Offset: 0x1F2B7A8 VA: 0x1F2B7A8
	private void InternalWrite(byte[] buffer, ref int offset, int size) { }

	// RVA: 0x1F2C218 Offset: 0x1F2C218 VA: 0x1F2C218
	public bool get_WantMore() { }

	// RVA: 0x1F2C240 Offset: 0x1F2C240 VA: 0x1F2C240
	public int get_ChunkLeft() { }

	// RVA: 0x1F2BC2C Offset: 0x1F2BC2C VA: 0x1F2BC2C
	private ChunkStream.State ReadBody(byte[] buffer, ref int offset, int size) { }

	// RVA: 0x1F2B8FC Offset: 0x1F2B8FC VA: 0x1F2B8FC
	private ChunkStream.State GetChunkSize(byte[] buffer, ref int offset, int size) { }

	// RVA: 0x1F2C2F4 Offset: 0x1F2C2F4 VA: 0x1F2C2F4
	private static string RemoveChunkExtension(string input) { }

	// RVA: 0x1F2BD54 Offset: 0x1F2BD54 VA: 0x1F2BD54
	private ChunkStream.State ReadCRLF(byte[] buffer, ref int offset, int size) { }

	// RVA: 0x1F2BE88 Offset: 0x1F2BE88 VA: 0x1F2BE88
	private ChunkStream.State ReadTrailer(byte[] buffer, ref int offset, int size) { }

	// RVA: 0x1F2C278 Offset: 0x1F2C278 VA: 0x1F2C278
	private static void ThrowProtocolViolation(string message) { }
}

// Namespace: 
private enum ChunkStream.State // TypeDefIndex: 1511
{
	// Fields
	public int value__; // 0x0
	public const ChunkStream.State None = 0;
	public const ChunkStream.State Body = 1;
	public const ChunkStream.State BodyFinished = 2;
	public const ChunkStream.State Trailer = 3;
}

// Namespace: 
private class ChunkStream.Chunk // TypeDefIndex: 1512
{
	// Fields
	public byte[] Bytes; // 0x10
	public int Offset; // 0x18

	// Methods

	// RVA: 0x1F2C24C Offset: 0x1F2C24C VA: 0x1F2C24C
	public void .ctor(byte[] chunk) { }

	// RVA: 0x1F2B708 Offset: 0x1F2B708 VA: 0x1F2B708
	public int Read(byte[] buffer, int offset, int size) { }
}

// Namespace: System.Net
internal class ChunkedInputStream : RequestStream // TypeDefIndex: 1513
{
	// Fields
	private bool disposed; // 0x38
	private ChunkStream decoder; // 0x40
	private HttpListenerContext context; // 0x48
	private bool no_more_data; // 0x50

	// Properties
	public ChunkStream Decoder { get; set; }

	// Methods

	// RVA: 0x1F2C360 Offset: 0x1F2C360 VA: 0x1F2C360
	public void .ctor(HttpListenerContext context, Stream stream, byte[] buffer, int offset, int length) { }

	// RVA: 0x1F2C4C0 Offset: 0x1F2C4C0 VA: 0x1F2C4C0
	public ChunkStream get_Decoder() { }

	// RVA: 0x1F2C4C8 Offset: 0x1F2C4C8 VA: 0x1F2C4C8
	public void set_Decoder(ChunkStream value) { }

	// RVA: 0x1F2C4D0 Offset: 0x1F2C4D0 VA: 0x1F2C4D0 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x1F2C518 Offset: 0x1F2C518 VA: 0x1F2C518 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x1F2C878 Offset: 0x1F2C878 VA: 0x1F2C878
	private void OnRead(IAsyncResult base_ares) { }

	// RVA: 0x1F2CCE8 Offset: 0x1F2CCE8 VA: 0x1F2CCE8 Slot: 27
	public override int EndRead(IAsyncResult ares) { }

	// RVA: 0x1F2CF60 Offset: 0x1F2CF60 VA: 0x1F2CF60 Slot: 13
	public override void Close() { }
}

// Namespace: 
private class ChunkedInputStream.ReadBufferState // TypeDefIndex: 1514
{
	// Fields
	public byte[] Buffer; // 0x10
	public int Offset; // 0x18
	public int Count; // 0x1C
	public int InitialCount; // 0x20
	public HttpStreamAsyncResult Ares; // 0x28

	// Methods

	// RVA: 0x1F2C824 Offset: 0x1F2C824 VA: 0x1F2C824
	public void .ctor(byte[] buffer, int offset, int count, HttpStreamAsyncResult ares) { }
}

// Namespace: System.Net
internal enum ConnectionModes // TypeDefIndex: 1515
{
	// Fields
	public int value__; // 0x0
	public const ConnectionModes Single = 0;
	public const ConnectionModes Persistent = 1;
	public const ConnectionModes Pipeline = 2;
	public const ConnectionModes Mux = 3;
}

// Namespace: System.Net
[Serializable]
public sealed class Cookie // TypeDefIndex: 1516
{
	// Fields
	private string comment; // 0x10
	private Uri commentUri; // 0x18
	private bool discard; // 0x20
	private string domain; // 0x28
	private DateTime expires; // 0x30
	private bool httpOnly; // 0x40
	private string name; // 0x48
	private string path; // 0x50
	private string port; // 0x58
	private int[] ports; // 0x60
	private bool secure; // 0x68
	private DateTime timestamp; // 0x70
	private string val; // 0x80
	private int version; // 0x88
	private static char[] reservedCharsName; // 0x0
	private static char[] portSeparators; // 0x8
	private static string tspecials; // 0x10
	private bool exact_domain; // 0x8C

	// Properties
	public string Comment { get; set; }
	public Uri CommentUri { get; set; }
	public bool Discard { get; set; }
	public string Domain { get; set; }
	internal bool ExactDomain { get; set; }
	public bool Expired { get; set; }
	public DateTime Expires { get; set; }
	public bool HttpOnly { get; set; }
	public string Name { get; set; }
	public string Path { get; set; }
	public string Port { get; set; }
	internal int[] Ports { get; }
	public bool Secure { get; set; }
	public DateTime TimeStamp { get; }
	public string Value { get; set; }
	public int Version { get; set; }

	// Methods

	// RVA: 0x1F2CF84 Offset: 0x1F2CF84 VA: 0x1F2CF84
	public void .ctor() { }

	// RVA: 0x1F2D06C Offset: 0x1F2D06C VA: 0x1F2D06C
	public void .ctor(string name, string value) { }

	// RVA: 0x1F2D298 Offset: 0x1F2D298 VA: 0x1F2D298
	public void .ctor(string name, string value, string path) { }

	// RVA: 0x1F2D35C Offset: 0x1F2D35C VA: 0x1F2D35C
	public void .ctor(string name, string value, string path, string domain) { }

	// RVA: 0x1F2D480 Offset: 0x1F2D480 VA: 0x1F2D480
	private static void .cctor() { }

	// RVA: 0x1F2D580 Offset: 0x1F2D580 VA: 0x1F2D580
	public string get_Comment() { }

	// RVA: 0x1F2D588 Offset: 0x1F2D588 VA: 0x1F2D588
	public void set_Comment(string value) { }

	// RVA: 0x1F2D620 Offset: 0x1F2D620 VA: 0x1F2D620
	public Uri get_CommentUri() { }

