	public static short ToInt16(float value) { }

	// RVA: 0x252F89C Offset: 0x252F89C VA: 0x252F89C
	public static short ToInt16(int value) { }

	// RVA: 0x252F944 Offset: 0x252F944 VA: 0x252F944
	public static short ToInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE674 Offset: 0xBCE674 VA: 0xBCE674
	// RVA: 0x252F9EC Offset: 0x252F9EC VA: 0x252F9EC
	public static short ToInt16(sbyte value) { }

	// RVA: 0x252F9F4 Offset: 0x252F9F4 VA: 0x252F9F4
	public static short ToInt16(short value) { }

	// RVA: 0x252F9F8 Offset: 0x252F9F8 VA: 0x252F9F8
	public static short ToInt16(string value, IFormatProvider provider) { }

	// RVA: 0x252FA08 Offset: 0x252FA08 VA: 0x252FA08
	public static short ToInt16(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCE688 Offset: 0xBCE688 VA: 0xBCE688
	// RVA: 0x252FB20 Offset: 0x252FB20 VA: 0x252FB20
	public static short ToInt16(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE69C Offset: 0xBCE69C VA: 0xBCE69C
	// RVA: 0x252FBC4 Offset: 0x252FBC4 VA: 0x252FBC4
	public static short ToInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE6B0 Offset: 0xBCE6B0 VA: 0xBCE6B0
	// RVA: 0x252FC68 Offset: 0x252FC68 VA: 0x252FC68
	public static short ToInt16(ushort value) { }

	// RVA: 0x252FD0C Offset: 0x252FD0C VA: 0x252FD0C
	public static short ToInt16(object value) { }

	// RVA: 0x252FD88 Offset: 0x252FD88 VA: 0x252FD88
	public static short ToInt16(object value, IFormatProvider provider) { }

	// RVA: 0x252FF24 Offset: 0x252FF24 VA: 0x252FF24
	public static int ToInt32(bool value) { }

	// RVA: 0x252FF2C Offset: 0x252FF2C VA: 0x252FF2C
	public static int ToInt32(byte value) { }

	// RVA: 0x252FF34 Offset: 0x252FF34 VA: 0x252FF34
	public static int ToInt32(char value) { }

	// RVA: 0x252FF3C Offset: 0x252FF3C VA: 0x252FF3C
	public static int ToInt32(Decimal value) { }

	// RVA: 0x25300B8 Offset: 0x25300B8 VA: 0x25300B8
	public static int ToInt32(double value) { }

	// RVA: 0x2530208 Offset: 0x2530208 VA: 0x2530208
	public static int ToInt32(float value) { }

	// RVA: 0x2530364 Offset: 0x2530364 VA: 0x2530364
	public static int ToInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE6C4 Offset: 0xBCE6C4 VA: 0xBCE6C4
	// RVA: 0x2530410 Offset: 0x2530410 VA: 0x2530410
	public static int ToInt32(sbyte value) { }

	// RVA: 0x2530418 Offset: 0x2530418 VA: 0x2530418
	public static int ToInt32(short value) { }

	// RVA: 0x2530420 Offset: 0x2530420 VA: 0x2530420
	public static int ToInt32(string value) { }

	// RVA: 0x2530430 Offset: 0x2530430 VA: 0x2530430
	public static int ToInt32(string value, IFormatProvider provider) { }

	// RVA: 0x2530440 Offset: 0x2530440 VA: 0x2530440
	public static int ToInt32(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCE6D8 Offset: 0xBCE6D8 VA: 0xBCE6D8
	// RVA: 0x25304B8 Offset: 0x25304B8 VA: 0x25304B8
	public static int ToInt32(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE6EC Offset: 0xBCE6EC VA: 0xBCE6EC
	// RVA: 0x2530558 Offset: 0x2530558 VA: 0x2530558
	public static int ToInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE700 Offset: 0xBCE700 VA: 0xBCE700
	// RVA: 0x25305FC Offset: 0x25305FC VA: 0x25305FC
	public static int ToInt32(ushort value) { }

	// RVA: 0x2530604 Offset: 0x2530604 VA: 0x2530604
	public static int ToInt32(object value) { }

	// RVA: 0x2530680 Offset: 0x2530680 VA: 0x2530680
	public static int ToInt32(object value, IFormatProvider provider) { }

	// RVA: 0x253081C Offset: 0x253081C VA: 0x253081C
	public static long ToInt64(bool value) { }

	// RVA: 0x2530824 Offset: 0x2530824 VA: 0x2530824
	public static long ToInt64(byte value) { }

	// RVA: 0x253082C Offset: 0x253082C VA: 0x253082C
	public static long ToInt64(char value) { }

	// RVA: 0x2530834 Offset: 0x2530834 VA: 0x2530834
	public static long ToInt64(Decimal value) { }

	// RVA: 0x25309D0 Offset: 0x25309D0 VA: 0x25309D0
	public static long ToInt64(double value) { }

	// RVA: 0x2530AFC Offset: 0x2530AFC VA: 0x2530AFC
	public static long ToInt64(float value) { }

	// RVA: 0x2530C34 Offset: 0x2530C34 VA: 0x2530C34
	public static long ToInt64(int value) { }

	// RVA: 0x2530C3C Offset: 0x2530C3C VA: 0x2530C3C
	public static long ToInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE714 Offset: 0xBCE714 VA: 0xBCE714
	// RVA: 0x2530C40 Offset: 0x2530C40 VA: 0x2530C40
	public static long ToInt64(sbyte value) { }

	// RVA: 0x2530C48 Offset: 0x2530C48 VA: 0x2530C48
	public static long ToInt64(short value) { }

	// RVA: 0x2530C50 Offset: 0x2530C50 VA: 0x2530C50
	public static long ToInt64(string value) { }

	// RVA: 0x2530C60 Offset: 0x2530C60 VA: 0x2530C60
	public static long ToInt64(string value, IFormatProvider provider) { }

	// RVA: 0x2530C70 Offset: 0x2530C70 VA: 0x2530C70
	public static long ToInt64(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCE728 Offset: 0xBCE728 VA: 0xBCE728
	// RVA: 0x253114C Offset: 0x253114C VA: 0x253114C
	public static long ToInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE73C Offset: 0xBCE73C VA: 0xBCE73C
	// RVA: 0x2531154 Offset: 0x2531154 VA: 0x2531154
	public static long ToInt64(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE750 Offset: 0xBCE750 VA: 0xBCE750
	// RVA: 0x25311F4 Offset: 0x25311F4 VA: 0x25311F4
	public static long ToInt64(ushort value) { }

	// RVA: 0x25311FC Offset: 0x25311FC VA: 0x25311FC
	public static long ToInt64(object value) { }

	// RVA: 0x2531278 Offset: 0x2531278 VA: 0x2531278
	public static long ToInt64(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCE764 Offset: 0xBCE764 VA: 0xBCE764
	// RVA: 0x2531414 Offset: 0x2531414 VA: 0x2531414
	public static sbyte ToSByte(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE778 Offset: 0xBCE778 VA: 0xBCE778
	// RVA: 0x253141C Offset: 0x253141C VA: 0x253141C
	public static sbyte ToSByte(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE78C Offset: 0xBCE78C VA: 0xBCE78C
	// RVA: 0x25314C0 Offset: 0x25314C0 VA: 0x25314C0
	public static sbyte ToSByte(char value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE7A0 Offset: 0xBCE7A0 VA: 0xBCE7A0
	// RVA: 0x2531568 Offset: 0x2531568 VA: 0x2531568
	public static sbyte ToSByte(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE7B4 Offset: 0xBCE7B4 VA: 0xBCE7B4
	// RVA: 0x25316E4 Offset: 0x25316E4 VA: 0x25316E4
	public static sbyte ToSByte(double value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE7C8 Offset: 0xBCE7C8 VA: 0xBCE7C8
	// RVA: 0x2531810 Offset: 0x2531810 VA: 0x2531810
	public static sbyte ToSByte(float value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE7DC Offset: 0xBCE7DC VA: 0xBCE7DC
	// RVA: 0x2531948 Offset: 0x2531948 VA: 0x2531948
	public static sbyte ToSByte(int value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE7F0 Offset: 0xBCE7F0 VA: 0xBCE7F0
	// RVA: 0x25319F0 Offset: 0x25319F0 VA: 0x25319F0
	public static sbyte ToSByte(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE804 Offset: 0xBCE804 VA: 0xBCE804
	// RVA: 0x2531A98 Offset: 0x2531A98 VA: 0x2531A98
	public static sbyte ToSByte(short value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE818 Offset: 0xBCE818 VA: 0xBCE818
	// RVA: 0x2531B44 Offset: 0x2531B44 VA: 0x2531B44
	public static sbyte ToSByte(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCE82C Offset: 0xBCE82C VA: 0xBCE82C
	// RVA: 0x2531BE4 Offset: 0x2531BE4 VA: 0x2531BE4
	public static sbyte ToSByte(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCE840 Offset: 0xBCE840 VA: 0xBCE840
	// RVA: 0x2531CB0 Offset: 0x2531CB0 VA: 0x2531CB0
	public static sbyte ToSByte(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE854 Offset: 0xBCE854 VA: 0xBCE854
	// RVA: 0x2531D54 Offset: 0x2531D54 VA: 0x2531D54
	public static sbyte ToSByte(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE868 Offset: 0xBCE868 VA: 0xBCE868
	// RVA: 0x2531DF8 Offset: 0x2531DF8 VA: 0x2531DF8
	public static sbyte ToSByte(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE87C Offset: 0xBCE87C VA: 0xBCE87C
	// RVA: 0x2531EA0 Offset: 0x2531EA0 VA: 0x2531EA0
	public static sbyte ToSByte(object value, IFormatProvider provider) { }

	// RVA: 0x253203C Offset: 0x253203C VA: 0x253203C
	public static float ToSingle(bool value) { }

	// RVA: 0x2532050 Offset: 0x2532050 VA: 0x2532050
	public static float ToSingle(byte value) { }

	// RVA: 0x253205C Offset: 0x253205C VA: 0x253205C
	public static float ToSingle(Decimal value) { }

	// RVA: 0x25320D4 Offset: 0x25320D4 VA: 0x25320D4
	public static float ToSingle(double value) { }

	// RVA: 0x25320DC Offset: 0x25320DC VA: 0x25320DC
	public static float ToSingle(float value) { }

	// RVA: 0x25320E0 Offset: 0x25320E0 VA: 0x25320E0
	public static float ToSingle(int value) { }

	// RVA: 0x25320E8 Offset: 0x25320E8 VA: 0x25320E8
	public static float ToSingle(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE890 Offset: 0xBCE890 VA: 0xBCE890
	// RVA: 0x25320F0 Offset: 0x25320F0 VA: 0x25320F0
	public static float ToSingle(sbyte value) { }

	// RVA: 0x25320FC Offset: 0x25320FC VA: 0x25320FC
	public static float ToSingle(short value) { }

	// RVA: 0x2532108 Offset: 0x2532108 VA: 0x2532108
	public static float ToSingle(string value) { }

	// RVA: 0x253211C Offset: 0x253211C VA: 0x253211C
	public static float ToSingle(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCE8A4 Offset: 0xBCE8A4 VA: 0xBCE8A4
	// RVA: 0x2532130 Offset: 0x2532130 VA: 0x2532130
	public static float ToSingle(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE8B8 Offset: 0xBCE8B8 VA: 0xBCE8B8
	// RVA: 0x253213C Offset: 0x253213C VA: 0x253213C
	public static float ToSingle(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE8CC Offset: 0xBCE8CC VA: 0xBCE8CC
	// RVA: 0x2532148 Offset: 0x2532148 VA: 0x2532148
	public static float ToSingle(ushort value) { }

	// RVA: 0x2532154 Offset: 0x2532154 VA: 0x2532154
	public static float ToSingle(object value) { }

	// RVA: 0x25321D0 Offset: 0x25321D0 VA: 0x25321D0
	public static float ToSingle(object value, IFormatProvider provider) { }

	// RVA: 0x253236C Offset: 0x253236C VA: 0x253236C
	public static string ToString(byte value, int toBase) { }

	// RVA: 0x2532ADC Offset: 0x2532ADC VA: 0x2532ADC
	public static string ToString(int value) { }

	// RVA: 0x2532B04 Offset: 0x2532B04 VA: 0x2532B04
	public static string ToString(int value, int toBase) { }

	// RVA: 0x2532CB8 Offset: 0x2532CB8 VA: 0x2532CB8
	public static string ToString(long value) { }

	// RVA: 0x2532CE0 Offset: 0x2532CE0 VA: 0x2532CE0
	public static string ToString(long value, int toBase) { }

	// RVA: 0x2532E94 Offset: 0x2532E94 VA: 0x2532E94
	public static string ToString(object value) { }

	// RVA: 0x2532EFC Offset: 0x2532EFC VA: 0x2532EFC
	public static string ToString(object value, IFormatProvider provider) { }

	// RVA: 0x2533104 Offset: 0x2533104 VA: 0x2533104
	public static string ToString(string value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE8E0 Offset: 0xBCE8E0 VA: 0xBCE8E0
	// RVA: 0x2533108 Offset: 0x2533108 VA: 0x2533108
	public static ushort ToUInt16(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE8F4 Offset: 0xBCE8F4 VA: 0xBCE8F4
	// RVA: 0x2533110 Offset: 0x2533110 VA: 0x2533110
	public static ushort ToUInt16(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE908 Offset: 0xBCE908 VA: 0xBCE908
	// RVA: 0x2533118 Offset: 0x2533118 VA: 0x2533118
	public static ushort ToUInt16(char value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE91C Offset: 0xBCE91C VA: 0xBCE91C
	// RVA: 0x253311C Offset: 0x253311C VA: 0x253311C
	public static ushort ToUInt16(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE930 Offset: 0xBCE930 VA: 0xBCE930
	// RVA: 0x2533298 Offset: 0x2533298 VA: 0x2533298
	public static ushort ToUInt16(double value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE944 Offset: 0xBCE944 VA: 0xBCE944
	// RVA: 0x25333BC Offset: 0x25333BC VA: 0x25333BC
	public static ushort ToUInt16(float value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE958 Offset: 0xBCE958 VA: 0xBCE958
	// RVA: 0x25334EC Offset: 0x25334EC VA: 0x25334EC
	public static ushort ToUInt16(int value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE96C Offset: 0xBCE96C VA: 0xBCE96C
	// RVA: 0x2533590 Offset: 0x2533590 VA: 0x2533590
	public static ushort ToUInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE980 Offset: 0xBCE980 VA: 0xBCE980
	// RVA: 0x2533634 Offset: 0x2533634 VA: 0x2533634
	public static ushort ToUInt16(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE994 Offset: 0xBCE994 VA: 0xBCE994
	// RVA: 0x25336D4 Offset: 0x25336D4 VA: 0x25336D4
	public static ushort ToUInt16(short value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE9A8 Offset: 0xBCE9A8 VA: 0xBCE9A8
	// RVA: 0x2533778 Offset: 0x2533778 VA: 0x2533778
	public static ushort ToUInt16(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCE9BC Offset: 0xBCE9BC VA: 0xBCE9BC
	// RVA: 0x2533788 Offset: 0x2533788 VA: 0x2533788
	public static ushort ToUInt16(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCE9D0 Offset: 0xBCE9D0 VA: 0xBCE9D0
	// RVA: 0x2533804 Offset: 0x2533804 VA: 0x2533804
	public static ushort ToUInt16(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE9E4 Offset: 0xBCE9E4 VA: 0xBCE9E4
	// RVA: 0x25338A8 Offset: 0x25338A8 VA: 0x25338A8
	public static ushort ToUInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCE9F8 Offset: 0xBCE9F8 VA: 0xBCE9F8
	// RVA: 0x253394C Offset: 0x253394C VA: 0x253394C
	public static ushort ToUInt16(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA0C Offset: 0xBCEA0C VA: 0xBCEA0C
	// RVA: 0x2533AE8 Offset: 0x2533AE8 VA: 0x2533AE8
	public static uint ToUInt32(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA20 Offset: 0xBCEA20 VA: 0xBCEA20
	// RVA: 0x2533AF0 Offset: 0x2533AF0 VA: 0x2533AF0
	public static uint ToUInt32(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA34 Offset: 0xBCEA34 VA: 0xBCEA34
	// RVA: 0x2533AF8 Offset: 0x2533AF8 VA: 0x2533AF8
	public static uint ToUInt32(char value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA48 Offset: 0xBCEA48 VA: 0xBCEA48
	// RVA: 0x2533B00 Offset: 0x2533B00 VA: 0x2533B00
	public static uint ToUInt32(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA5C Offset: 0xBCEA5C VA: 0xBCEA5C
	// RVA: 0x2533C8C Offset: 0x2533C8C VA: 0x2533C8C
	public static uint ToUInt32(double value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA70 Offset: 0xBCEA70 VA: 0xBCEA70
	// RVA: 0x2533DB0 Offset: 0x2533DB0 VA: 0x2533DB0
	public static uint ToUInt32(float value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA84 Offset: 0xBCEA84 VA: 0xBCEA84
	// RVA: 0x2533EE0 Offset: 0x2533EE0 VA: 0x2533EE0
	public static uint ToUInt32(int value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEA98 Offset: 0xBCEA98 VA: 0xBCEA98
	// RVA: 0x2533F80 Offset: 0x2533F80 VA: 0x2533F80
	public static uint ToUInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEAAC Offset: 0xBCEAAC VA: 0xBCEAAC
	// RVA: 0x2534024 Offset: 0x2534024 VA: 0x2534024
	public static uint ToUInt32(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEAC0 Offset: 0xBCEAC0 VA: 0xBCEAC0
	// RVA: 0x25340C4 Offset: 0x25340C4 VA: 0x25340C4
	public static uint ToUInt32(short value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEAD4 Offset: 0xBCEAD4 VA: 0xBCEAD4
	// RVA: 0x2534164 Offset: 0x2534164 VA: 0x2534164
	public static uint ToUInt32(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCEAE8 Offset: 0xBCEAE8 VA: 0xBCEAE8
	// RVA: 0x2534174 Offset: 0x2534174 VA: 0x2534174
	public static uint ToUInt32(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCEAFC Offset: 0xBCEAFC VA: 0xBCEAFC
	// RVA: 0x25341EC Offset: 0x25341EC VA: 0x25341EC
	public static uint ToUInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB10 Offset: 0xBCEB10 VA: 0xBCEB10
	// RVA: 0x2534290 Offset: 0x2534290 VA: 0x2534290
	public static uint ToUInt32(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB24 Offset: 0xBCEB24 VA: 0xBCEB24
	// RVA: 0x2534298 Offset: 0x2534298 VA: 0x2534298
	public static uint ToUInt32(object value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB38 Offset: 0xBCEB38 VA: 0xBCEB38
	// RVA: 0x2534314 Offset: 0x2534314 VA: 0x2534314
	public static uint ToUInt32(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB4C Offset: 0xBCEB4C VA: 0xBCEB4C
	// RVA: 0x25344B0 Offset: 0x25344B0 VA: 0x25344B0
	public static ulong ToUInt64(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB60 Offset: 0xBCEB60 VA: 0xBCEB60
	// RVA: 0x25344B8 Offset: 0x25344B8 VA: 0x25344B8
	public static ulong ToUInt64(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB74 Offset: 0xBCEB74 VA: 0xBCEB74
	// RVA: 0x25344C0 Offset: 0x25344C0 VA: 0x25344C0
	public static ulong ToUInt64(char value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB88 Offset: 0xBCEB88 VA: 0xBCEB88
	// RVA: 0x25344C8 Offset: 0x25344C8 VA: 0x25344C8
	public static ulong ToUInt64(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEB9C Offset: 0xBCEB9C VA: 0xBCEB9C
	// RVA: 0x2534654 Offset: 0x2534654 VA: 0x2534654
	public static ulong ToUInt64(double value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEBB0 Offset: 0xBCEBB0 VA: 0xBCEBB0
	// RVA: 0x2534778 Offset: 0x2534778 VA: 0x2534778
	public static ulong ToUInt64(float value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEBC4 Offset: 0xBCEBC4 VA: 0xBCEBC4
	// RVA: 0x25348A8 Offset: 0x25348A8 VA: 0x25348A8
	public static ulong ToUInt64(int value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEBD8 Offset: 0xBCEBD8 VA: 0xBCEBD8
	// RVA: 0x2534948 Offset: 0x2534948 VA: 0x2534948
	public static ulong ToUInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEBEC Offset: 0xBCEBEC VA: 0xBCEBEC
	// RVA: 0x25349E8 Offset: 0x25349E8 VA: 0x25349E8
	public static ulong ToUInt64(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC00 Offset: 0xBCEC00 VA: 0xBCEC00
	// RVA: 0x2534A78 Offset: 0x2534A78 VA: 0x2534A78
	public static ulong ToUInt64(short value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC14 Offset: 0xBCEC14 VA: 0xBCEC14
	// RVA: 0x2534B1C Offset: 0x2534B1C VA: 0x2534B1C
	public static ulong ToUInt64(string value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC28 Offset: 0xBCEC28 VA: 0xBCEC28
	// RVA: 0x2534B2C Offset: 0x2534B2C VA: 0x2534B2C
	public static ulong ToUInt64(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC3C Offset: 0xBCEC3C VA: 0xBCEC3C
	// RVA: 0x2534B3C Offset: 0x2534B3C VA: 0x2534B3C
	public static ulong ToUInt64(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC50 Offset: 0xBCEC50 VA: 0xBCEC50
	// RVA: 0x2534BB4 Offset: 0x2534BB4 VA: 0x2534BB4
	public static ulong ToUInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC64 Offset: 0xBCEC64 VA: 0xBCEC64
	// RVA: 0x2534BBC Offset: 0x2534BBC VA: 0x2534BBC
	public static ulong ToUInt64(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC78 Offset: 0xBCEC78 VA: 0xBCEC78
	// RVA: 0x2534BC4 Offset: 0x2534BC4 VA: 0x2534BC4
	public static ulong ToUInt64(object value) { }

	[CLSCompliantAttribute] // RVA: 0xBCEC8C Offset: 0xBCEC8C VA: 0xBCEC8C
	// RVA: 0x2534C40 Offset: 0x2534C40 VA: 0x2534C40
	public static ulong ToUInt64(object value, IFormatProvider provider) { }

	// RVA: 0x2534DDC Offset: 0x2534DDC VA: 0x2534DDC
	public static object ChangeType(object value, Type conversionType) { }

	// RVA: 0x2536054 Offset: 0x2536054 VA: 0x2536054
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { }

	// RVA: 0x2536120 Offset: 0x2536120 VA: 0x2536120
	private static bool NotValidBase(int value) { }

	// RVA: 0x252D4B4 Offset: 0x252D4B4 VA: 0x252D4B4
	private static int ConvertFromBase(string value, int fromBase, bool unsigned) { }

	// RVA: 0x2530CE8 Offset: 0x2530CE8 VA: 0x2530CE8
	private static long ConvertFromBase64(string value, int fromBase, bool unsigned) { }

	// RVA: 0x2536150 Offset: 0x2536150 VA: 0x2536150
	private static void EndianSwap(ref byte[] value) { }

	// RVA: 0x2532524 Offset: 0x2532524 VA: 0x2532524
	private static string ConvertToBase2(byte[] value) { }

	// RVA: 0x25326B8 Offset: 0x25326B8 VA: 0x25326B8
	private static string ConvertToBase8(byte[] value) { }

	// RVA: 0x25328BC Offset: 0x25328BC VA: 0x25328BC
	private static string ConvertToBase16(byte[] value) { }

	// RVA: 0x2534F44 Offset: 0x2534F44 VA: 0x2534F44
	internal static object ToType(object value, Type conversionType, IFormatProvider provider, bool try_target_to_type) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAC18 Offset: 0xBCAC18 VA: 0xBCAC18
[Serializable]
public sealed class DBNull : IConvertible, ISerializable // TypeDefIndex: 973
{
	// Fields
	public static readonly DBNull Value; // 0x0

	// Methods

	// RVA: 0x25372C0 Offset: 0x25372C0 VA: 0x25372C0
	private void .ctor() { }

	// RVA: 0x25372C8 Offset: 0x25372C8 VA: 0x25372C8
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2537340 Offset: 0x2537340 VA: 0x2537340
	private static void .cctor() { }

	// RVA: 0x25373A4 Offset: 0x25373A4 VA: 0x25373A4 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x253740C Offset: 0x253740C VA: 0x253740C Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x2537474 Offset: 0x2537474 VA: 0x2537474 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x25374DC Offset: 0x25374DC VA: 0x25374DC Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x2537544 Offset: 0x2537544 VA: 0x2537544 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x25375AC Offset: 0x25375AC VA: 0x25375AC Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x2537614 Offset: 0x2537614 VA: 0x2537614 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x253767C Offset: 0x253767C VA: 0x253767C Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x25376E4 Offset: 0x25376E4 VA: 0x25376E4 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x253774C Offset: 0x253774C VA: 0x253774C Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x25377B4 Offset: 0x25377B4 VA: 0x25377B4 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x253781C Offset: 0x253781C VA: 0x253781C Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0x2537948 Offset: 0x2537948 VA: 0x2537948 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x25379B0 Offset: 0x25379B0 VA: 0x25379B0 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x2537A18 Offset: 0x2537A18 VA: 0x2537A18 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2537A80 Offset: 0x2537A80 VA: 0x2537A80 Slot: 20
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2537A88 Offset: 0x2537A88 VA: 0x2537A88 Slot: 3
	public override string ToString() { }

	// RVA: 0x2537AF0 Offset: 0x2537AF0 VA: 0x2537AF0 Slot: 15
	public string ToString(IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 974
{
	// Fields
	private const int dp400 = 146097;
	private const int dp100 = 36524;
	private const int dp4 = 1461;
	private const long w32file_epoch = 504911232000000000;
	private const long MAX_VALUE_TICKS = 3155378975999999999;
	internal const long UnixEpoch = 621355968000000000;
	private const long ticks18991230 = 599264352000000000;
	private const double OAMinValue = -657435;
	private const double OAMaxValue = 2958466;
	private const string formatExceptionMessage = "String was not recognized as a valid DateTime.";
	private TimeSpan ticks; // 0x0
	private DateTimeKind kind; // 0x8
	public static readonly DateTime MaxValue; // 0x0
	public static readonly DateTime MinValue; // 0x10
	private static readonly string[] ParseTimeFormats; // 0x20
	private static readonly string[] ParseYearDayMonthFormats; // 0x28
	private static readonly string[] ParseYearMonthDayFormats; // 0x30
	private static readonly string[] ParseDayMonthYearFormats; // 0x38
	private static readonly string[] ParseMonthDayYearFormats; // 0x40
	private static readonly string[] MonthDayShortFormats; // 0x48
	private static readonly string[] DayMonthShortFormats; // 0x50
	private static readonly int[] daysmonth; // 0x58
	private static readonly int[] daysmonthleap; // 0x60
	private static object to_local_time_span_object; // 0x68
	private static long last_now; // 0x70

	// Properties
	public DateTime Date { get; }
	public int Month { get; }
	public int Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public int DayOfYear { get; }
	public TimeSpan TimeOfDay { get; }
	public int Hour { get; }
	public int Minute { get; }
	public int Second { get; }
	public int Millisecond { get; }
	public static DateTime Now { get; }
	public long Ticks { get; }
	public static DateTime Today { get; }
	public static DateTime UtcNow { get; }
	public int Year { get; }
	public DateTimeKind Kind { get; }

	// Methods

	// RVA: 0xD6DF5C Offset: 0xD6DF5C VA: 0xD6DF5C
	public void .ctor(long ticks) { }

	// RVA: 0xD6DF64 Offset: 0xD6DF64 VA: 0xD6DF64
	public void .ctor(int year, int month, int day) { }

	// RVA: 0xD6DF94 Offset: 0xD6DF94 VA: 0xD6DF94
	public void .ctor(int year, int month, int day, int hour, int minute, int second) { }

	// RVA: 0xD6DFB8 Offset: 0xD6DFB8 VA: 0xD6DFB8
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond) { }

	// RVA: 0xD6DFC0 Offset: 0xD6DFC0 VA: 0xD6DFC0
	public void .ctor(int year, int month, int day, Calendar calendar) { }

	// RVA: 0xD6DFF4 Offset: 0xD6DFF4 VA: 0xD6DFF4
	public void .ctor(int year, int month, int day, int hour, int minute, int second, Calendar calendar) { }

	// RVA: 0xD6E01C Offset: 0xD6E01C VA: 0xD6E01C
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar) { }

	// RVA: 0xD6E02C Offset: 0xD6E02C VA: 0xD6E02C
	internal void .ctor(bool check, TimeSpan value) { }

	// RVA: 0xD6E038 Offset: 0xD6E038 VA: 0xD6E038
	public void .ctor(long ticks, DateTimeKind kind) { }

	// RVA: 0xD6E06C Offset: 0xD6E06C VA: 0xD6E06C
	public void .ctor(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind) { }

	// RVA: 0xD6E0AC Offset: 0xD6E0AC VA: 0xD6E0AC
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind) { }

	// RVA: 0xD6E0E8 Offset: 0xD6E0E8 VA: 0xD6E0E8
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, DateTimeKind kind) { }

	// RVA: 0x253845C Offset: 0x253845C VA: 0x253845C
	private static void .cctor() { }

	// RVA: 0xD6E12C Offset: 0xD6E12C VA: 0xD6E12C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD6E138 Offset: 0xD6E138 VA: 0xD6E138 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD6E144 Offset: 0xD6E144 VA: 0xD6E144 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD6E150 Offset: 0xD6E150 VA: 0xD6E150 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD6E15C Offset: 0xD6E15C VA: 0xD6E15C Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD6E168 Offset: 0xD6E168 VA: 0xD6E168 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD6E174 Offset: 0xD6E174 VA: 0xD6E174 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD6E180 Offset: 0xD6E180 VA: 0xD6E180 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD6E18C Offset: 0xD6E18C VA: 0xD6E18C Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD6E198 Offset: 0xD6E198 VA: 0xD6E198 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD6E1A4 Offset: 0xD6E1A4 VA: 0xD6E1A4 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD6E1B0 Offset: 0xD6E1B0 VA: 0xD6E1B0 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD6E1B8 Offset: 0xD6E1B8 VA: 0xD6E1B8 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD6E1C4 Offset: 0xD6E1C4 VA: 0xD6E1C4 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD6E1D0 Offset: 0xD6E1D0 VA: 0xD6E1D0 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x2537E90 Offset: 0x2537E90 VA: 0x2537E90
	private static int AbsoluteDays(int year, int month, int day) { }

	// RVA: 0xD6E1DC Offset: 0xD6E1DC VA: 0xD6E1DC
	private int FromTicks(DateTime.Which what) { }

	// RVA: 0xD6E1E4 Offset: 0xD6E1E4 VA: 0xD6E1E4
	public DateTime get_Date() { }

	// RVA: 0xD6E1EC Offset: 0xD6E1EC VA: 0xD6E1EC
	public int get_Month() { }

	// RVA: 0xD6E1F8 Offset: 0xD6E1F8 VA: 0xD6E1F8
	public int get_Day() { }

	// RVA: 0xD6E204 Offset: 0xD6E204 VA: 0xD6E204
	public DayOfWeek get_DayOfWeek() { }

	// RVA: 0xD6E24C Offset: 0xD6E24C VA: 0xD6E24C
	public int get_DayOfYear() { }

	// RVA: 0xD6E258 Offset: 0xD6E258 VA: 0xD6E258
	public TimeSpan get_TimeOfDay() { }

	// RVA: 0xD6E2C0 Offset: 0xD6E2C0 VA: 0xD6E2C0
	public int get_Hour() { }

	// RVA: 0xD6E2CC Offset: 0xD6E2CC VA: 0xD6E2CC
	public int get_Minute() { }

	// RVA: 0xD6E2D8 Offset: 0xD6E2D8 VA: 0xD6E2D8
	public int get_Second() { }

	// RVA: 0xD6E2E4 Offset: 0xD6E2E4 VA: 0xD6E2E4
	public int get_Millisecond() { }

	// RVA: 0x253A86C Offset: 0x253A86C VA: 0x253A86C
	internal static long GetTimeMonotonic() { }

	// RVA: 0x253A870 Offset: 0x253A870 VA: 0x253A870
	internal static long GetNow() { }

	// RVA: 0x2537124 Offset: 0x2537124 VA: 0x2537124
	public static DateTime get_Now() { }

	// RVA: 0xD6E2F0 Offset: 0xD6E2F0 VA: 0xD6E2F0
	public long get_Ticks() { }

	// RVA: 0x253A918 Offset: 0x253A918 VA: 0x253A918
	public static DateTime get_Today() { }

	// RVA: 0x253A9EC Offset: 0x253A9EC VA: 0x253A9EC
	public static DateTime get_UtcNow() { }

	// RVA: 0xD6E2FC Offset: 0xD6E2FC VA: 0xD6E2FC
	public int get_Year() { }

	// RVA: 0xD6E308 Offset: 0xD6E308 VA: 0xD6E308
	public DateTimeKind get_Kind() { }

	// RVA: 0xD6E310 Offset: 0xD6E310 VA: 0xD6E310
	public DateTime Add(TimeSpan value) { }

	// RVA: 0xD6E318 Offset: 0xD6E318 VA: 0xD6E318
	public DateTime AddDays(double value) { }

	// RVA: 0xD6E320 Offset: 0xD6E320 VA: 0xD6E320
	public DateTime AddTicks(long value) { }

	// RVA: 0xD6E328 Offset: 0xD6E328 VA: 0xD6E328
	public DateTime AddHours(double value) { }

	// RVA: 0xD6E33C Offset: 0xD6E33C VA: 0xD6E33C
	public DateTime AddMilliseconds(double value) { }

	// RVA: 0xD6E344 Offset: 0xD6E344 VA: 0xD6E344
	public DateTime AddMinutes(double value) { }

	// RVA: 0xD6E358 Offset: 0xD6E358 VA: 0xD6E358
	public DateTime AddMonths(int months) { }

	// RVA: 0xD6E360 Offset: 0xD6E360 VA: 0xD6E360
	public DateTime AddSeconds(double value) { }

	// RVA: 0xD6E374 Offset: 0xD6E374 VA: 0xD6E374
	public DateTime AddYears(int value) { }

	// RVA: 0x253AF50 Offset: 0x253AF50 VA: 0x253AF50
	public static int Compare(DateTime t1, DateTime t2) { }

	// RVA: 0xD6E384 Offset: 0xD6E384 VA: 0xD6E384 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD6E38C Offset: 0xD6E38C VA: 0xD6E38C
	public bool IsDaylightSavingTime() { }

	// RVA: 0xD6E394 Offset: 0xD6E394 VA: 0xD6E394 Slot: 22
	public int CompareTo(DateTime value) { }

	// RVA: 0xD6E39C Offset: 0xD6E39C VA: 0xD6E39C Slot: 23
	public bool Equals(DateTime value) { }

	// RVA: 0xD6E3A4 Offset: 0xD6E3A4 VA: 0xD6E3A4
	public long ToBinary() { }

	// RVA: 0x253B3B8 Offset: 0x253B3B8 VA: 0x253B3B8
	public static DateTime FromBinary(long dateData) { }

	// RVA: 0x253B564 Offset: 0x253B564 VA: 0x253B564
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { }

	// RVA: 0x2537D40 Offset: 0x2537D40 VA: 0x2537D40
	public static int DaysInMonth(int year, int month) { }

	// RVA: 0xD6E3AC Offset: 0xD6E3AC VA: 0xD6E3AC Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x253B674 Offset: 0x253B674 VA: 0x253B674
	public static DateTime FromFileTime(long fileTime) { }

	// RVA: 0xD6E3B4 Offset: 0xD6E3B4 VA: 0xD6E3B4
	public string[] GetDateTimeFormats() { }

	// RVA: 0xD6E3BC Offset: 0xD6E3BC VA: 0xD6E3BC
	public string[] GetDateTimeFormats(IFormatProvider provider) { }

	// RVA: 0xD6E3C4 Offset: 0xD6E3C4 VA: 0xD6E3C4
	public string[] GetDateTimeFormats(char format, IFormatProvider provider) { }

	// RVA: 0xD6E3CC Offset: 0xD6E3CC VA: 0xD6E3CC
	private string[] GetDateTimeFormats(bool adjustutc, string[] patterns, DateTimeFormatInfo dfi) { }

	// RVA: 0xD6E3D8 Offset: 0xD6E3D8 VA: 0xD6E3D8
	private void CheckDateTimeKind(DateTimeKind kind) { }

	// RVA: 0xD6E3DC Offset: 0xD6E3DC VA: 0xD6E3DC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD6E3F8 Offset: 0xD6E3F8 VA: 0xD6E3F8 Slot: 24
	public TypeCode GetTypeCode() { }

	// RVA: 0x253A414 Offset: 0x253A414 VA: 0x253A414
	public static bool IsLeapYear(int year) { }

	// RVA: 0x253BDDC Offset: 0x253BDDC VA: 0x253BDDC
	public static DateTime Parse(string s) { }

	// RVA: 0x252E398 Offset: 0x252E398 VA: 0x252E398
	public static DateTime Parse(string s, IFormatProvider provider) { }

	// RVA: 0x253BE44 Offset: 0x253BE44 VA: 0x253BE44
	public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles) { }

	// RVA: 0x253BF4C Offset: 0x253BF4C VA: 0x253BF4C
	internal static bool CoreParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, bool setExceptionOnError, ref Exception exception) { }

	// RVA: 0x253F824 Offset: 0x253F824 VA: 0x253F824
	public static DateTime ParseExact(string s, string format, IFormatProvider provider) { }

	// RVA: 0x253C9FC Offset: 0x253C9FC VA: 0x253C9FC
	private static string[] YearMonthDayFormats(DateTimeFormatInfo dfi, bool setExceptionOnError, ref Exception exc) { }

	// RVA: 0x253F9D8 Offset: 0x253F9D8 VA: 0x253F9D8
	private static int _ParseNumber(string s, int valuePos, int min_digits, int digits, bool leadingzero, bool sloppy_parsing, out int num_parsed) { }

	// RVA: 0x253FBB0 Offset: 0x253FBB0 VA: 0x253FBB0
	private static int _ParseEnum(string s, int sPos, string[] values, string[] invValues, bool exact, out int num_parsed) { }

	// RVA: 0x253FF70 Offset: 0x253FF70 VA: 0x253FF70
	private static bool _ParseString(string s, int sPos, int maxlength, string value, out int num_parsed) { }

	// RVA: 0x25400B4 Offset: 0x25400B4 VA: 0x25400B4
	private static bool _ParseAmPm(string s, int valuePos, int num, DateTimeFormatInfo dfi, bool exact, out int num_parsed, ref int ampm) { }

	// RVA: 0x25404B8 Offset: 0x25404B8 VA: 0x25404B8
	private static bool _ParseTimeSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed) { }

	// RVA: 0x25405C4 Offset: 0x25405C4 VA: 0x25405C4
	private static bool _ParseDateSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed) { }

	// RVA: 0x25403EC Offset: 0x25403EC VA: 0x25403EC
	private static bool IsLetter(string s, int pos) { }

	// RVA: 0x253CDF8 Offset: 0x253CDF8 VA: 0x253CDF8
	private static bool _DoParse(string s, string firstPart, string secondPart, bool exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, bool firstPartIsDate, ref bool incompleteFormat, ref bool longYear) { }

	// RVA: 0x253F8A4 Offset: 0x253F8A4 VA: 0x253F8A4
	public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style) { }

	// RVA: 0x2540CF0 Offset: 0x2540CF0 VA: 0x2540CF0
	public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style) { }

	// RVA: 0x2540EBC Offset: 0x2540EBC VA: 0x2540EBC
	private static void CheckStyle(DateTimeStyles style) { }

	// RVA: 0x2540F80 Offset: 0x2540F80 VA: 0x2540F80
	public static bool TryParse(string s, out DateTime result) { }

	// RVA: 0x253F5FC Offset: 0x253F5FC VA: 0x253F5FC
	private static bool ParseExact(string s, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, bool exact, ref bool longYear, bool setExceptionOnError, ref Exception exception) { }

	// RVA: 0xD6E400 Offset: 0xD6E400 VA: 0xD6E400
	public TimeSpan Subtract(DateTime value) { }

	// RVA: 0xD6E408 Offset: 0xD6E408 VA: 0xD6E408
	public DateTime Subtract(TimeSpan value) { }

	// RVA: 0xD6E410 Offset: 0xD6E410 VA: 0xD6E410
	public long ToFileTime() { }

	// RVA: 0xD6E418 Offset: 0xD6E418 VA: 0xD6E418
	public long ToFileTimeUtc() { }

	// RVA: 0xD6E420 Offset: 0xD6E420 VA: 0xD6E420
	public string ToLongDateString() { }

	// RVA: 0xD6E428 Offset: 0xD6E428 VA: 0xD6E428
	public string ToLongTimeString() { }

	// RVA: 0xD6E430 Offset: 0xD6E430 VA: 0xD6E430
	public double ToOADate() { }

	// RVA: 0xD6E438 Offset: 0xD6E438 VA: 0xD6E438
	public string ToShortDateString() { }

	// RVA: 0xD6E440 Offset: 0xD6E440 VA: 0xD6E440
	public string ToShortTimeString() { }

	// RVA: 0xD6E448 Offset: 0xD6E448 VA: 0xD6E448 Slot: 3
	public override string ToString() { }

	// RVA: 0xD6E450 Offset: 0xD6E450 VA: 0xD6E450 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD6E464 Offset: 0xD6E464 VA: 0xD6E464
	public string ToString(string format) { }

	// RVA: 0xD6E470 Offset: 0xD6E470 VA: 0xD6E470 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD6E478 Offset: 0xD6E478 VA: 0xD6E478
	public DateTime ToLocalTime() { }

	// RVA: 0xD6E480 Offset: 0xD6E480 VA: 0xD6E480
	public DateTime ToUniversalTime() { }

	// RVA: 0x253A874 Offset: 0x253A874 VA: 0x253A874
	public static DateTime op_Addition(DateTime d, TimeSpan t) { }

	// RVA: 0x2541824 Offset: 0x2541824 VA: 0x2541824
	public static bool op_Equality(DateTime d1, DateTime d2) { }

	// RVA: 0x254189C Offset: 0x254189C VA: 0x254189C
	public static bool op_GreaterThan(DateTime t1, DateTime t2) { }

	// RVA: 0x2541914 Offset: 0x2541914 VA: 0x2541914
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x254074C Offset: 0x254074C VA: 0x254074C
	public static bool op_Inequality(DateTime d1, DateTime d2) { }

	// RVA: 0x254198C Offset: 0x254198C VA: 0x254198C
	public static bool op_LessThan(DateTime t1, DateTime t2) { }

	// RVA: 0x2541A04 Offset: 0x2541A04 VA: 0x2541A04
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x2541A7C Offset: 0x2541A7C VA: 0x2541A7C
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2) { }

	// RVA: 0x2541B28 Offset: 0x2541B28 VA: 0x2541B28
	public static DateTime op_Subtraction(DateTime d, TimeSpan t) { }
}

// Namespace: 
private enum DateTime.Which // TypeDefIndex: 975
{
	// Fields
	public int value__; // 0x0
	public const DateTime.Which Day = 0;
