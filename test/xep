	public static short ToInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A7D8 Offset: 0xC3A7D8 VA: 0xC3A7D8
	// RVA: 0x122A440 Offset: 0x122A440 VA: 0x122A440
	public static short ToInt16(ushort value) { }

	// RVA: 0x122A4E4 Offset: 0x122A4E4 VA: 0x122A4E4
	public static short ToInt16(object value) { }

	// RVA: 0x122A560 Offset: 0x122A560 VA: 0x122A560
	public static short ToInt16(object value, IFormatProvider provider) { }

	// RVA: 0x122A6FC Offset: 0x122A6FC VA: 0x122A6FC
	public static int ToInt32(bool value) { }

	// RVA: 0x122A704 Offset: 0x122A704 VA: 0x122A704
	public static int ToInt32(byte value) { }

	// RVA: 0x122A70C Offset: 0x122A70C VA: 0x122A70C
	public static int ToInt32(char value) { }

	// RVA: 0x122A714 Offset: 0x122A714 VA: 0x122A714
	public static int ToInt32(Decimal value) { }

	// RVA: 0x122A890 Offset: 0x122A890 VA: 0x122A890
	public static int ToInt32(double value) { }

	// RVA: 0x122A9E0 Offset: 0x122A9E0 VA: 0x122A9E0
	public static int ToInt32(float value) { }

	// RVA: 0x122AB3C Offset: 0x122AB3C VA: 0x122AB3C
	public static int ToInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A7EC Offset: 0xC3A7EC VA: 0xC3A7EC
	// RVA: 0x122ABE8 Offset: 0x122ABE8 VA: 0x122ABE8
	public static int ToInt32(sbyte value) { }

	// RVA: 0x122ABF0 Offset: 0x122ABF0 VA: 0x122ABF0
	public static int ToInt32(short value) { }

	// RVA: 0x122ABF8 Offset: 0x122ABF8 VA: 0x122ABF8
	public static int ToInt32(string value) { }

	// RVA: 0x122AC08 Offset: 0x122AC08 VA: 0x122AC08
	public static int ToInt32(string value, IFormatProvider provider) { }

	// RVA: 0x122AC18 Offset: 0x122AC18 VA: 0x122AC18
	public static int ToInt32(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xC3A800 Offset: 0xC3A800 VA: 0xC3A800
	// RVA: 0x122AC90 Offset: 0x122AC90 VA: 0x122AC90
	public static int ToInt32(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A814 Offset: 0xC3A814 VA: 0xC3A814
	// RVA: 0x122AD30 Offset: 0x122AD30 VA: 0x122AD30
	public static int ToInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A828 Offset: 0xC3A828 VA: 0xC3A828
	// RVA: 0x122ADD4 Offset: 0x122ADD4 VA: 0x122ADD4
	public static int ToInt32(ushort value) { }

	// RVA: 0x122ADDC Offset: 0x122ADDC VA: 0x122ADDC
	public static int ToInt32(object value) { }

	// RVA: 0x122AE58 Offset: 0x122AE58 VA: 0x122AE58
	public static int ToInt32(object value, IFormatProvider provider) { }

	// RVA: 0x122AFF4 Offset: 0x122AFF4 VA: 0x122AFF4
	public static long ToInt64(bool value) { }

	// RVA: 0x122AFFC Offset: 0x122AFFC VA: 0x122AFFC
	public static long ToInt64(byte value) { }

	// RVA: 0x122B004 Offset: 0x122B004 VA: 0x122B004
	public static long ToInt64(char value) { }

	// RVA: 0x122B00C Offset: 0x122B00C VA: 0x122B00C
	public static long ToInt64(Decimal value) { }

	// RVA: 0x122B1A8 Offset: 0x122B1A8 VA: 0x122B1A8
	public static long ToInt64(double value) { }

	// RVA: 0x122B2D4 Offset: 0x122B2D4 VA: 0x122B2D4
	public static long ToInt64(float value) { }

	// RVA: 0x122B40C Offset: 0x122B40C VA: 0x122B40C
	public static long ToInt64(int value) { }

	// RVA: 0x122B414 Offset: 0x122B414 VA: 0x122B414
	public static long ToInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A83C Offset: 0xC3A83C VA: 0xC3A83C
	// RVA: 0x122B418 Offset: 0x122B418 VA: 0x122B418
	public static long ToInt64(sbyte value) { }

	// RVA: 0x122B420 Offset: 0x122B420 VA: 0x122B420
	public static long ToInt64(short value) { }

	// RVA: 0x122B428 Offset: 0x122B428 VA: 0x122B428
	public static long ToInt64(string value) { }

	// RVA: 0x122B438 Offset: 0x122B438 VA: 0x122B438
	public static long ToInt64(string value, IFormatProvider provider) { }

	// RVA: 0x122B448 Offset: 0x122B448 VA: 0x122B448
	public static long ToInt64(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xC3A850 Offset: 0xC3A850 VA: 0xC3A850
	// RVA: 0x122B924 Offset: 0x122B924 VA: 0x122B924
	public static long ToInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A864 Offset: 0xC3A864 VA: 0xC3A864
	// RVA: 0x122B92C Offset: 0x122B92C VA: 0x122B92C
	public static long ToInt64(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A878 Offset: 0xC3A878 VA: 0xC3A878
	// RVA: 0x122B9CC Offset: 0x122B9CC VA: 0x122B9CC
	public static long ToInt64(ushort value) { }

	// RVA: 0x122B9D4 Offset: 0x122B9D4 VA: 0x122B9D4
	public static long ToInt64(object value) { }

	// RVA: 0x122BA50 Offset: 0x122BA50 VA: 0x122BA50
	public static long ToInt64(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3A88C Offset: 0xC3A88C VA: 0xC3A88C
	// RVA: 0x122BBEC Offset: 0x122BBEC VA: 0x122BBEC
	public static sbyte ToSByte(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A8A0 Offset: 0xC3A8A0 VA: 0xC3A8A0
	// RVA: 0x122BBF4 Offset: 0x122BBF4 VA: 0x122BBF4
	public static sbyte ToSByte(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A8B4 Offset: 0xC3A8B4 VA: 0xC3A8B4
	// RVA: 0x122BC98 Offset: 0x122BC98 VA: 0x122BC98
	public static sbyte ToSByte(char value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A8C8 Offset: 0xC3A8C8 VA: 0xC3A8C8
	// RVA: 0x122BD40 Offset: 0x122BD40 VA: 0x122BD40
	public static sbyte ToSByte(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A8DC Offset: 0xC3A8DC VA: 0xC3A8DC
	// RVA: 0x122BEBC Offset: 0x122BEBC VA: 0x122BEBC
	public static sbyte ToSByte(double value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A8F0 Offset: 0xC3A8F0 VA: 0xC3A8F0
	// RVA: 0x122BFE8 Offset: 0x122BFE8 VA: 0x122BFE8
	public static sbyte ToSByte(float value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A904 Offset: 0xC3A904 VA: 0xC3A904
	// RVA: 0x122C120 Offset: 0x122C120 VA: 0x122C120
	public static sbyte ToSByte(int value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A918 Offset: 0xC3A918 VA: 0xC3A918
	// RVA: 0x122C1C8 Offset: 0x122C1C8 VA: 0x122C1C8
	public static sbyte ToSByte(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A92C Offset: 0xC3A92C VA: 0xC3A92C
	// RVA: 0x122C270 Offset: 0x122C270 VA: 0x122C270
	public static sbyte ToSByte(short value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A940 Offset: 0xC3A940 VA: 0xC3A940
	// RVA: 0x122C31C Offset: 0x122C31C VA: 0x122C31C
	public static sbyte ToSByte(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3A954 Offset: 0xC3A954 VA: 0xC3A954
	// RVA: 0x122C3BC Offset: 0x122C3BC VA: 0x122C3BC
	public static sbyte ToSByte(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xC3A968 Offset: 0xC3A968 VA: 0xC3A968
	// RVA: 0x122C488 Offset: 0x122C488 VA: 0x122C488
	public static sbyte ToSByte(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A97C Offset: 0xC3A97C VA: 0xC3A97C
	// RVA: 0x122C52C Offset: 0x122C52C VA: 0x122C52C
	public static sbyte ToSByte(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A990 Offset: 0xC3A990 VA: 0xC3A990
	// RVA: 0x122C5D0 Offset: 0x122C5D0 VA: 0x122C5D0
	public static sbyte ToSByte(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A9A4 Offset: 0xC3A9A4 VA: 0xC3A9A4
	// RVA: 0x122C678 Offset: 0x122C678 VA: 0x122C678
	public static sbyte ToSByte(object value, IFormatProvider provider) { }

	// RVA: 0x122C814 Offset: 0x122C814 VA: 0x122C814
	public static float ToSingle(bool value) { }

	// RVA: 0x122C828 Offset: 0x122C828 VA: 0x122C828
	public static float ToSingle(byte value) { }

	// RVA: 0x122C834 Offset: 0x122C834 VA: 0x122C834
	public static float ToSingle(Decimal value) { }

	// RVA: 0x122C8AC Offset: 0x122C8AC VA: 0x122C8AC
	public static float ToSingle(double value) { }

	// RVA: 0x122C8B4 Offset: 0x122C8B4 VA: 0x122C8B4
	public static float ToSingle(float value) { }

	// RVA: 0x122C8B8 Offset: 0x122C8B8 VA: 0x122C8B8
	public static float ToSingle(int value) { }

	// RVA: 0x122C8C0 Offset: 0x122C8C0 VA: 0x122C8C0
	public static float ToSingle(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A9B8 Offset: 0xC3A9B8 VA: 0xC3A9B8
	// RVA: 0x122C8C8 Offset: 0x122C8C8 VA: 0x122C8C8
	public static float ToSingle(sbyte value) { }

	// RVA: 0x122C8D4 Offset: 0x122C8D4 VA: 0x122C8D4
	public static float ToSingle(short value) { }

	// RVA: 0x122C8E0 Offset: 0x122C8E0 VA: 0x122C8E0
	public static float ToSingle(string value) { }

	// RVA: 0x122C8F4 Offset: 0x122C8F4 VA: 0x122C8F4
	public static float ToSingle(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3A9CC Offset: 0xC3A9CC VA: 0xC3A9CC
	// RVA: 0x122C908 Offset: 0x122C908 VA: 0x122C908
	public static float ToSingle(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A9E0 Offset: 0xC3A9E0 VA: 0xC3A9E0
	// RVA: 0x122C914 Offset: 0x122C914 VA: 0x122C914
	public static float ToSingle(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3A9F4 Offset: 0xC3A9F4 VA: 0xC3A9F4
	// RVA: 0x122C920 Offset: 0x122C920 VA: 0x122C920
	public static float ToSingle(ushort value) { }

	// RVA: 0x122C92C Offset: 0x122C92C VA: 0x122C92C
	public static float ToSingle(object value) { }

	// RVA: 0x122C9A8 Offset: 0x122C9A8 VA: 0x122C9A8
	public static float ToSingle(object value, IFormatProvider provider) { }

	// RVA: 0x122CB44 Offset: 0x122CB44 VA: 0x122CB44
	public static string ToString(byte value, int toBase) { }

	// RVA: 0x122D2B4 Offset: 0x122D2B4 VA: 0x122D2B4
	public static string ToString(int value) { }

	// RVA: 0x122D2DC Offset: 0x122D2DC VA: 0x122D2DC
	public static string ToString(int value, int toBase) { }

	// RVA: 0x122D490 Offset: 0x122D490 VA: 0x122D490
	public static string ToString(long value) { }

	// RVA: 0x122D4B8 Offset: 0x122D4B8 VA: 0x122D4B8
	public static string ToString(long value, int toBase) { }

	// RVA: 0x122D66C Offset: 0x122D66C VA: 0x122D66C
	public static string ToString(object value) { }

	// RVA: 0x122D6D4 Offset: 0x122D6D4 VA: 0x122D6D4
	public static string ToString(object value, IFormatProvider provider) { }

	// RVA: 0x122D8DC Offset: 0x122D8DC VA: 0x122D8DC
	public static string ToString(string value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA08 Offset: 0xC3AA08 VA: 0xC3AA08
	// RVA: 0x122D8E0 Offset: 0x122D8E0 VA: 0x122D8E0
	public static ushort ToUInt16(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA1C Offset: 0xC3AA1C VA: 0xC3AA1C
	// RVA: 0x122D8E8 Offset: 0x122D8E8 VA: 0x122D8E8
	public static ushort ToUInt16(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA30 Offset: 0xC3AA30 VA: 0xC3AA30
	// RVA: 0x122D8F0 Offset: 0x122D8F0 VA: 0x122D8F0
	public static ushort ToUInt16(char value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA44 Offset: 0xC3AA44 VA: 0xC3AA44
	// RVA: 0x122D8F4 Offset: 0x122D8F4 VA: 0x122D8F4
	public static ushort ToUInt16(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA58 Offset: 0xC3AA58 VA: 0xC3AA58
	// RVA: 0x122DA70 Offset: 0x122DA70 VA: 0x122DA70
	public static ushort ToUInt16(double value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA6C Offset: 0xC3AA6C VA: 0xC3AA6C
	// RVA: 0x122DB94 Offset: 0x122DB94 VA: 0x122DB94
	public static ushort ToUInt16(float value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA80 Offset: 0xC3AA80 VA: 0xC3AA80
	// RVA: 0x122DCC4 Offset: 0x122DCC4 VA: 0x122DCC4
	public static ushort ToUInt16(int value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AA94 Offset: 0xC3AA94 VA: 0xC3AA94
	// RVA: 0x122DD68 Offset: 0x122DD68 VA: 0x122DD68
	public static ushort ToUInt16(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AAA8 Offset: 0xC3AAA8 VA: 0xC3AAA8
	// RVA: 0x122DE0C Offset: 0x122DE0C VA: 0x122DE0C
	public static ushort ToUInt16(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AABC Offset: 0xC3AABC VA: 0xC3AABC
	// RVA: 0x122DEAC Offset: 0x122DEAC VA: 0x122DEAC
	public static ushort ToUInt16(short value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AAD0 Offset: 0xC3AAD0 VA: 0xC3AAD0
	// RVA: 0x122DF50 Offset: 0x122DF50 VA: 0x122DF50
	public static ushort ToUInt16(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3AAE4 Offset: 0xC3AAE4 VA: 0xC3AAE4
	// RVA: 0x122DF60 Offset: 0x122DF60 VA: 0x122DF60
	public static ushort ToUInt16(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xC3AAF8 Offset: 0xC3AAF8 VA: 0xC3AAF8
	// RVA: 0x122DFDC Offset: 0x122DFDC VA: 0x122DFDC
	public static ushort ToUInt16(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB0C Offset: 0xC3AB0C VA: 0xC3AB0C
	// RVA: 0x122E080 Offset: 0x122E080 VA: 0x122E080
	public static ushort ToUInt16(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB20 Offset: 0xC3AB20 VA: 0xC3AB20
	// RVA: 0x122E124 Offset: 0x122E124 VA: 0x122E124
	public static ushort ToUInt16(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB34 Offset: 0xC3AB34 VA: 0xC3AB34
	// RVA: 0x122E2C0 Offset: 0x122E2C0 VA: 0x122E2C0
	public static uint ToUInt32(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB48 Offset: 0xC3AB48 VA: 0xC3AB48
	// RVA: 0x122E2C8 Offset: 0x122E2C8 VA: 0x122E2C8
	public static uint ToUInt32(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB5C Offset: 0xC3AB5C VA: 0xC3AB5C
	// RVA: 0x122E2D0 Offset: 0x122E2D0 VA: 0x122E2D0
	public static uint ToUInt32(char value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB70 Offset: 0xC3AB70 VA: 0xC3AB70
	// RVA: 0x122E2D8 Offset: 0x122E2D8 VA: 0x122E2D8
	public static uint ToUInt32(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB84 Offset: 0xC3AB84 VA: 0xC3AB84
	// RVA: 0x122E464 Offset: 0x122E464 VA: 0x122E464
	public static uint ToUInt32(double value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AB98 Offset: 0xC3AB98 VA: 0xC3AB98
	// RVA: 0x122E588 Offset: 0x122E588 VA: 0x122E588
	public static uint ToUInt32(float value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ABAC Offset: 0xC3ABAC VA: 0xC3ABAC
	// RVA: 0x122E6B8 Offset: 0x122E6B8 VA: 0x122E6B8
	public static uint ToUInt32(int value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ABC0 Offset: 0xC3ABC0 VA: 0xC3ABC0
	// RVA: 0x122E758 Offset: 0x122E758 VA: 0x122E758
	public static uint ToUInt32(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ABD4 Offset: 0xC3ABD4 VA: 0xC3ABD4
	// RVA: 0x122E7FC Offset: 0x122E7FC VA: 0x122E7FC
	public static uint ToUInt32(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ABE8 Offset: 0xC3ABE8 VA: 0xC3ABE8
	// RVA: 0x122E89C Offset: 0x122E89C VA: 0x122E89C
	public static uint ToUInt32(short value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ABFC Offset: 0xC3ABFC VA: 0xC3ABFC
	// RVA: 0x122E93C Offset: 0x122E93C VA: 0x122E93C
	public static uint ToUInt32(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC10 Offset: 0xC3AC10 VA: 0xC3AC10
	// RVA: 0x122E94C Offset: 0x122E94C VA: 0x122E94C
	public static uint ToUInt32(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC24 Offset: 0xC3AC24 VA: 0xC3AC24
	// RVA: 0x122E9C4 Offset: 0x122E9C4 VA: 0x122E9C4
	public static uint ToUInt32(ulong value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC38 Offset: 0xC3AC38 VA: 0xC3AC38
	// RVA: 0x122EA68 Offset: 0x122EA68 VA: 0x122EA68
	public static uint ToUInt32(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC4C Offset: 0xC3AC4C VA: 0xC3AC4C
	// RVA: 0x122EA70 Offset: 0x122EA70 VA: 0x122EA70
	public static uint ToUInt32(object value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC60 Offset: 0xC3AC60 VA: 0xC3AC60
	// RVA: 0x122EAEC Offset: 0x122EAEC VA: 0x122EAEC
	public static uint ToUInt32(object value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC74 Offset: 0xC3AC74 VA: 0xC3AC74
	// RVA: 0x122EC88 Offset: 0x122EC88 VA: 0x122EC88
	public static ulong ToUInt64(bool value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC88 Offset: 0xC3AC88 VA: 0xC3AC88
	// RVA: 0x122EC90 Offset: 0x122EC90 VA: 0x122EC90
	public static ulong ToUInt64(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AC9C Offset: 0xC3AC9C VA: 0xC3AC9C
	// RVA: 0x122EC98 Offset: 0x122EC98 VA: 0x122EC98
	public static ulong ToUInt64(char value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ACB0 Offset: 0xC3ACB0 VA: 0xC3ACB0
	// RVA: 0x122ECA0 Offset: 0x122ECA0 VA: 0x122ECA0
	public static ulong ToUInt64(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ACC4 Offset: 0xC3ACC4 VA: 0xC3ACC4
	// RVA: 0x122EE2C Offset: 0x122EE2C VA: 0x122EE2C
	public static ulong ToUInt64(double value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ACD8 Offset: 0xC3ACD8 VA: 0xC3ACD8
	// RVA: 0x122EF50 Offset: 0x122EF50 VA: 0x122EF50
	public static ulong ToUInt64(float value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ACEC Offset: 0xC3ACEC VA: 0xC3ACEC
	// RVA: 0x122F080 Offset: 0x122F080 VA: 0x122F080
	public static ulong ToUInt64(int value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD00 Offset: 0xC3AD00 VA: 0xC3AD00
	// RVA: 0x122F120 Offset: 0x122F120 VA: 0x122F120
	public static ulong ToUInt64(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD14 Offset: 0xC3AD14 VA: 0xC3AD14
	// RVA: 0x122F1C0 Offset: 0x122F1C0 VA: 0x122F1C0
	public static ulong ToUInt64(sbyte value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD28 Offset: 0xC3AD28 VA: 0xC3AD28
	// RVA: 0x122F250 Offset: 0x122F250 VA: 0x122F250
	public static ulong ToUInt64(short value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD3C Offset: 0xC3AD3C VA: 0xC3AD3C
	// RVA: 0x122F2F4 Offset: 0x122F2F4 VA: 0x122F2F4
	public static ulong ToUInt64(string value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD50 Offset: 0xC3AD50 VA: 0xC3AD50
	// RVA: 0x122F304 Offset: 0x122F304 VA: 0x122F304
	public static ulong ToUInt64(string value, IFormatProvider provider) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD64 Offset: 0xC3AD64 VA: 0xC3AD64
	// RVA: 0x122F314 Offset: 0x122F314 VA: 0x122F314
	public static ulong ToUInt64(string value, int fromBase) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD78 Offset: 0xC3AD78 VA: 0xC3AD78
	// RVA: 0x122F38C Offset: 0x122F38C VA: 0x122F38C
	public static ulong ToUInt64(uint value) { }

	[CLSCompliantAttribute] // RVA: 0xC3AD8C Offset: 0xC3AD8C VA: 0xC3AD8C
	// RVA: 0x122F394 Offset: 0x122F394 VA: 0x122F394
	public static ulong ToUInt64(ushort value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ADA0 Offset: 0xC3ADA0 VA: 0xC3ADA0
	// RVA: 0x122F39C Offset: 0x122F39C VA: 0x122F39C
	public static ulong ToUInt64(object value) { }

	[CLSCompliantAttribute] // RVA: 0xC3ADB4 Offset: 0xC3ADB4 VA: 0xC3ADB4
	// RVA: 0x122F418 Offset: 0x122F418 VA: 0x122F418
	public static ulong ToUInt64(object value, IFormatProvider provider) { }

	// RVA: 0x122F5B4 Offset: 0x122F5B4 VA: 0x122F5B4
	public static object ChangeType(object value, Type conversionType) { }

	// RVA: 0x123082C Offset: 0x123082C VA: 0x123082C
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { }

	// RVA: 0x12308F8 Offset: 0x12308F8 VA: 0x12308F8
	private static bool NotValidBase(int value) { }

	// RVA: 0x1227C8C Offset: 0x1227C8C VA: 0x1227C8C
	private static int ConvertFromBase(string value, int fromBase, bool unsigned) { }

	// RVA: 0x122B4C0 Offset: 0x122B4C0 VA: 0x122B4C0
	private static long ConvertFromBase64(string value, int fromBase, bool unsigned) { }

	// RVA: 0x1230928 Offset: 0x1230928 VA: 0x1230928
	private static void EndianSwap(ref byte[] value) { }

	// RVA: 0x122CCFC Offset: 0x122CCFC VA: 0x122CCFC
	private static string ConvertToBase2(byte[] value) { }

	// RVA: 0x122CE90 Offset: 0x122CE90 VA: 0x122CE90
	private static string ConvertToBase8(byte[] value) { }

	// RVA: 0x122D094 Offset: 0x122D094 VA: 0x122D094
	private static string ConvertToBase16(byte[] value) { }

	// RVA: 0x122F71C Offset: 0x122F71C VA: 0x122F71C
	internal static object ToType(object value, Type conversionType, IFormatProvider provider, bool try_target_to_type) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36D40 Offset: 0xC36D40 VA: 0xC36D40
[Serializable]
public sealed class DBNull : IConvertible, ISerializable // TypeDefIndex: 973
{
	// Fields
	public static readonly DBNull Value; // 0x0

	// Methods

	// RVA: 0x1231A98 Offset: 0x1231A98 VA: 0x1231A98
	private void .ctor() { }

	// RVA: 0x1231AA0 Offset: 0x1231AA0 VA: 0x1231AA0
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1231B18 Offset: 0x1231B18 VA: 0x1231B18
	private static void .cctor() { }

	// RVA: 0x1231B7C Offset: 0x1231B7C VA: 0x1231B7C Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0x1231BE4 Offset: 0x1231BE4 VA: 0x1231BE4 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0x1231C4C Offset: 0x1231C4C VA: 0x1231C4C Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0x1231CB4 Offset: 0x1231CB4 VA: 0x1231CB4 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0x1231D1C Offset: 0x1231D1C VA: 0x1231D1C Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0x1231D84 Offset: 0x1231D84 VA: 0x1231D84 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0x1231DEC Offset: 0x1231DEC VA: 0x1231DEC Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0x1231E54 Offset: 0x1231E54 VA: 0x1231E54 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0x1231EBC Offset: 0x1231EBC VA: 0x1231EBC Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0x1231F24 Offset: 0x1231F24 VA: 0x1231F24 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0x1231F8C Offset: 0x1231F8C VA: 0x1231F8C Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0x1231FF4 Offset: 0x1231FF4 VA: 0x1231FF4 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0x1232120 Offset: 0x1232120 VA: 0x1232120 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0x1232188 Offset: 0x1232188 VA: 0x1232188 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0x12321F0 Offset: 0x12321F0 VA: 0x12321F0 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x1232258 Offset: 0x1232258 VA: 0x1232258 Slot: 20
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1232260 Offset: 0x1232260 VA: 0x1232260 Slot: 3
	public override string ToString() { }

	// RVA: 0x12322C8 Offset: 0x12322C8 VA: 0x12322C8 Slot: 15
	public string ToString(IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 974
{
	// Fields
	private const int dp400 = 146097;
	private const int dp100 = 36524;
	private const int dp4 = 1461;
	private const long w32file_epoch = 504911232000000000;
	private const long MAX_VALUE_TICKS = 3155378975999999999;
	internal const long UnixEpoch = 621355968000000000;
	private const long ticks18991230 = 599264352000000000;
	private const double OAMinValue = -657435;
	private const double OAMaxValue = 2958466;
	private const string formatExceptionMessage = "String was not recognized as a valid DateTime.";
	private TimeSpan ticks; // 0x0
	private DateTimeKind kind; // 0x8
	public static readonly DateTime MaxValue; // 0x0
	public static readonly DateTime MinValue; // 0x10
	private static readonly string[] ParseTimeFormats; // 0x20
	private static readonly string[] ParseYearDayMonthFormats; // 0x28
	private static readonly string[] ParseYearMonthDayFormats; // 0x30
	private static readonly string[] ParseDayMonthYearFormats; // 0x38
	private static readonly string[] ParseMonthDayYearFormats; // 0x40
	private static readonly string[] MonthDayShortFormats; // 0x48
	private static readonly string[] DayMonthShortFormats; // 0x50
	private static readonly int[] daysmonth; // 0x58
	private static readonly int[] daysmonthleap; // 0x60
	private static object to_local_time_span_object; // 0x68
	private static long last_now; // 0x70

	// Properties
	public DateTime Date { get; }
	public int Month { get; }
	public int Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public int DayOfYear { get; }
	public TimeSpan TimeOfDay { get; }
	public int Hour { get; }
	public int Minute { get; }
	public int Second { get; }
	public int Millisecond { get; }
	public static DateTime Now { get; }
	public long Ticks { get; }
	public static DateTime Today { get; }
	public static DateTime UtcNow { get; }
	public int Year { get; }
	public DateTimeKind Kind { get; }

	// Methods

	// RVA: 0xBBFC7C Offset: 0xBBFC7C VA: 0xBBFC7C
	public void .ctor(long ticks) { }

	// RVA: 0xBBFC84 Offset: 0xBBFC84 VA: 0xBBFC84
	public void .ctor(int year, int month, int day) { }

	// RVA: 0xBBFCB4 Offset: 0xBBFCB4 VA: 0xBBFCB4
	public void .ctor(int year, int month, int day, int hour, int minute, int second) { }

	// RVA: 0xBBFCD8 Offset: 0xBBFCD8 VA: 0xBBFCD8
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond) { }

	// RVA: 0xBBFCE0 Offset: 0xBBFCE0 VA: 0xBBFCE0
	public void .ctor(int year, int month, int day, Calendar calendar) { }

	// RVA: 0xBBFD14 Offset: 0xBBFD14 VA: 0xBBFD14
	public void .ctor(int year, int month, int day, int hour, int minute, int second, Calendar calendar) { }

	// RVA: 0xBBFD3C Offset: 0xBBFD3C VA: 0xBBFD3C
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar) { }

	// RVA: 0xBBFD4C Offset: 0xBBFD4C VA: 0xBBFD4C
	internal void .ctor(bool check, TimeSpan value) { }

	// RVA: 0xBBFD58 Offset: 0xBBFD58 VA: 0xBBFD58
	public void .ctor(long ticks, DateTimeKind kind) { }

	// RVA: 0xBBFD8C Offset: 0xBBFD8C VA: 0xBBFD8C
	public void .ctor(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind) { }

	// RVA: 0xBBFDCC Offset: 0xBBFDCC VA: 0xBBFDCC
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind) { }

	// RVA: 0xBBFE08 Offset: 0xBBFE08 VA: 0xBBFE08
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, DateTimeKind kind) { }

	// RVA: 0x1232C34 Offset: 0x1232C34 VA: 0x1232C34
	private static void .cctor() { }

	// RVA: 0xBBFE4C Offset: 0xBBFE4C VA: 0xBBFE4C Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBFE58 Offset: 0xBBFE58 VA: 0xBBFE58 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBFE64 Offset: 0xBBFE64 VA: 0xBBFE64 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBFE70 Offset: 0xBBFE70 VA: 0xBBFE70 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBFE7C Offset: 0xBBFE7C VA: 0xBBFE7C Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBFE88 Offset: 0xBBFE88 VA: 0xBBFE88 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBFE94 Offset: 0xBBFE94 VA: 0xBBFE94 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBFEA0 Offset: 0xBBFEA0 VA: 0xBBFEA0 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBFEAC Offset: 0xBBFEAC VA: 0xBBFEAC Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBFEB8 Offset: 0xBBFEB8 VA: 0xBBFEB8 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBFEC4 Offset: 0xBBFEC4 VA: 0xBBFEC4 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBFED0 Offset: 0xBBFED0 VA: 0xBBFED0 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBFED8 Offset: 0xBBFED8 VA: 0xBBFED8 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBFEE4 Offset: 0xBBFEE4 VA: 0xBBFEE4 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBFEF0 Offset: 0xBBFEF0 VA: 0xBBFEF0 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x1232668 Offset: 0x1232668 VA: 0x1232668
	private static int AbsoluteDays(int year, int month, int day) { }

	// RVA: 0xBBFEFC Offset: 0xBBFEFC VA: 0xBBFEFC
	private int FromTicks(DateTime.Which what) { }

	// RVA: 0xBBFF04 Offset: 0xBBFF04 VA: 0xBBFF04
	public DateTime get_Date() { }

	// RVA: 0xBBFF0C Offset: 0xBBFF0C VA: 0xBBFF0C
	public int get_Month() { }

	// RVA: 0xBBFF18 Offset: 0xBBFF18 VA: 0xBBFF18
	public int get_Day() { }

	// RVA: 0xBBFF24 Offset: 0xBBFF24 VA: 0xBBFF24
	public DayOfWeek get_DayOfWeek() { }

	// RVA: 0xBBFF6C Offset: 0xBBFF6C VA: 0xBBFF6C
	public int get_DayOfYear() { }

	// RVA: 0xBBFF78 Offset: 0xBBFF78 VA: 0xBBFF78
	public TimeSpan get_TimeOfDay() { }

	// RVA: 0xBBFFE0 Offset: 0xBBFFE0 VA: 0xBBFFE0
	public int get_Hour() { }

	// RVA: 0xBBFFEC Offset: 0xBBFFEC VA: 0xBBFFEC
	public int get_Minute() { }

	// RVA: 0xBBFFF8 Offset: 0xBBFFF8 VA: 0xBBFFF8
	public int get_Second() { }

	// RVA: 0xBC0004 Offset: 0xBC0004 VA: 0xBC0004
	public int get_Millisecond() { }

	// RVA: 0x1235044 Offset: 0x1235044 VA: 0x1235044
	internal static long GetTimeMonotonic() { }

	// RVA: 0x1235048 Offset: 0x1235048 VA: 0x1235048
	internal static long GetNow() { }

	// RVA: 0x12318FC Offset: 0x12318FC VA: 0x12318FC
	public static DateTime get_Now() { }

	// RVA: 0xBC0010 Offset: 0xBC0010 VA: 0xBC0010
	public long get_Ticks() { }

	// RVA: 0x12350F0 Offset: 0x12350F0 VA: 0x12350F0
	public static DateTime get_Today() { }

	// RVA: 0x12351C4 Offset: 0x12351C4 VA: 0x12351C4
	public static DateTime get_UtcNow() { }

	// RVA: 0xBC001C Offset: 0xBC001C VA: 0xBC001C
	public int get_Year() { }

	// RVA: 0xBC0028 Offset: 0xBC0028 VA: 0xBC0028
	public DateTimeKind get_Kind() { }

	// RVA: 0xBC0030 Offset: 0xBC0030 VA: 0xBC0030
	public DateTime Add(TimeSpan value) { }

	// RVA: 0xBC0038 Offset: 0xBC0038 VA: 0xBC0038
	public DateTime AddDays(double value) { }

	// RVA: 0xBC0040 Offset: 0xBC0040 VA: 0xBC0040
	public DateTime AddTicks(long value) { }

	// RVA: 0xBC0048 Offset: 0xBC0048 VA: 0xBC0048
	public DateTime AddHours(double value) { }

	// RVA: 0xBC005C Offset: 0xBC005C VA: 0xBC005C
	public DateTime AddMilliseconds(double value) { }

	// RVA: 0xBC0064 Offset: 0xBC0064 VA: 0xBC0064
	public DateTime AddMinutes(double value) { }

	// RVA: 0xBC0078 Offset: 0xBC0078 VA: 0xBC0078
	public DateTime AddMonths(int months) { }

	// RVA: 0xBC0080 Offset: 0xBC0080 VA: 0xBC0080
	public DateTime AddSeconds(double value) { }

	// RVA: 0xBC0094 Offset: 0xBC0094 VA: 0xBC0094
	public DateTime AddYears(int value) { }

	// RVA: 0x1235728 Offset: 0x1235728 VA: 0x1235728
	public static int Compare(DateTime t1, DateTime t2) { }

	// RVA: 0xBC00A4 Offset: 0xBC00A4 VA: 0xBC00A4 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBC00AC Offset: 0xBC00AC VA: 0xBC00AC
	public bool IsDaylightSavingTime() { }

	// RVA: 0xBC00B4 Offset: 0xBC00B4 VA: 0xBC00B4 Slot: 22
	public int CompareTo(DateTime value) { }

	// RVA: 0xBC00BC Offset: 0xBC00BC VA: 0xBC00BC Slot: 23
	public bool Equals(DateTime value) { }

	// RVA: 0xBC00C4 Offset: 0xBC00C4 VA: 0xBC00C4
	public long ToBinary() { }

	// RVA: 0x1235B90 Offset: 0x1235B90 VA: 0x1235B90
	public static DateTime FromBinary(long dateData) { }

	// RVA: 0x1235D3C Offset: 0x1235D3C VA: 0x1235D3C
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { }

	// RVA: 0x1232518 Offset: 0x1232518 VA: 0x1232518
	public static int DaysInMonth(int year, int month) { }

	// RVA: 0xBC00CC Offset: 0xBC00CC VA: 0xBC00CC Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x1235E4C Offset: 0x1235E4C VA: 0x1235E4C
	public static DateTime FromFileTime(long fileTime) { }

	// RVA: 0xBC00D4 Offset: 0xBC00D4 VA: 0xBC00D4
	public string[] GetDateTimeFormats() { }

	// RVA: 0xBC00DC Offset: 0xBC00DC VA: 0xBC00DC
	public string[] GetDateTimeFormats(IFormatProvider provider) { }

	// RVA: 0xBC00E4 Offset: 0xBC00E4 VA: 0xBC00E4
	public string[] GetDateTimeFormats(char format, IFormatProvider provider) { }

	// RVA: 0xBC00EC Offset: 0xBC00EC VA: 0xBC00EC
	private string[] GetDateTimeFormats(bool adjustutc, string[] patterns, DateTimeFormatInfo dfi) { }

	// RVA: 0xBC00F8 Offset: 0xBC00F8 VA: 0xBC00F8
	private void CheckDateTimeKind(DateTimeKind kind) { }

	// RVA: 0xBC00FC Offset: 0xBC00FC VA: 0xBC00FC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC0118 Offset: 0xBC0118 VA: 0xBC0118 Slot: 24
	public TypeCode GetTypeCode() { }

	// RVA: 0x1234BEC Offset: 0x1234BEC VA: 0x1234BEC
	public static bool IsLeapYear(int year) { }

	// RVA: 0x12365B4 Offset: 0x12365B4 VA: 0x12365B4
	public static DateTime Parse(string s) { }

	// RVA: 0x1228B70 Offset: 0x1228B70 VA: 0x1228B70
	public static DateTime Parse(string s, IFormatProvider provider) { }

	// RVA: 0x123661C Offset: 0x123661C VA: 0x123661C
	public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles) { }

	// RVA: 0x1236724 Offset: 0x1236724 VA: 0x1236724
	internal static bool CoreParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, bool setExceptionOnError, ref Exception exception) { }

	// RVA: 0x1239FFC Offset: 0x1239FFC VA: 0x1239FFC
	public static DateTime ParseExact(string s, string format, IFormatProvider provider) { }

	// RVA: 0x12371D4 Offset: 0x12371D4 VA: 0x12371D4
	private static string[] YearMonthDayFormats(DateTimeFormatInfo dfi, bool setExceptionOnError, ref Exception exc) { }

	// RVA: 0x123A1B0 Offset: 0x123A1B0 VA: 0x123A1B0
	private static int _ParseNumber(string s, int valuePos, int min_digits, int digits, bool leadingzero, bool sloppy_parsing, out int num_parsed) { }

	// RVA: 0x123A388 Offset: 0x123A388 VA: 0x123A388
	private static int _ParseEnum(string s, int sPos, string[] values, string[] invValues, bool exact, out int num_parsed) { }

	// RVA: 0x123A748 Offset: 0x123A748 VA: 0x123A748
	private static bool _ParseString(string s, int sPos, int maxlength, string value, out int num_parsed) { }

	// RVA: 0x123A88C Offset: 0x123A88C VA: 0x123A88C
	private static bool _ParseAmPm(string s, int valuePos, int num, DateTimeFormatInfo dfi, bool exact, out int num_parsed, ref int ampm) { }

	// RVA: 0x123AC90 Offset: 0x123AC90 VA: 0x123AC90
	private static bool _ParseTimeSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed) { }

	// RVA: 0x123AD9C Offset: 0x123AD9C VA: 0x123AD9C
	private static bool _ParseDateSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed) { }

	// RVA: 0x123ABC4 Offset: 0x123ABC4 VA: 0x123ABC4
	private static bool IsLetter(string s, int pos) { }

	// RVA: 0x12375D0 Offset: 0x12375D0 VA: 0x12375D0
	private static bool _DoParse(string s, string firstPart, string secondPart, bool exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, bool firstPartIsDate, ref bool incompleteFormat, ref bool longYear) { }

	// RVA: 0x123A07C Offset: 0x123A07C VA: 0x123A07C
	public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style) { }

	// RVA: 0x123B4C8 Offset: 0x123B4C8 VA: 0x123B4C8
	public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style) { }

	// RVA: 0x123B694 Offset: 0x123B694 VA: 0x123B694
	private static void CheckStyle(DateTimeStyles style) { }

	// RVA: 0x123B758 Offset: 0x123B758 VA: 0x123B758
	public static bool TryParse(string s, out DateTime result) { }

	// RVA: 0x1239DD4 Offset: 0x1239DD4 VA: 0x1239DD4
	private static bool ParseExact(string s, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, bool exact, ref bool longYear, bool setExceptionOnError, ref Exception exception) { }

	// RVA: 0xBC0120 Offset: 0xBC0120 VA: 0xBC0120
	public TimeSpan Subtract(DateTime value) { }

	// RVA: 0xBC0128 Offset: 0xBC0128 VA: 0xBC0128
	public DateTime Subtract(TimeSpan value) { }

	// RVA: 0xBC0130 Offset: 0xBC0130 VA: 0xBC0130
	public long ToFileTime() { }

	// RVA: 0xBC0138 Offset: 0xBC0138 VA: 0xBC0138
	public long ToFileTimeUtc() { }

	// RVA: 0xBC0140 Offset: 0xBC0140 VA: 0xBC0140
	public string ToLongDateString() { }

	// RVA: 0xBC0148 Offset: 0xBC0148 VA: 0xBC0148
	public string ToLongTimeString() { }

	// RVA: 0xBC0150 Offset: 0xBC0150 VA: 0xBC0150
	public double ToOADate() { }

	// RVA: 0xBC0158 Offset: 0xBC0158 VA: 0xBC0158
	public string ToShortDateString() { }

	// RVA: 0xBC0160 Offset: 0xBC0160 VA: 0xBC0160
	public string ToShortTimeString() { }

	// RVA: 0xBC0168 Offset: 0xBC0168 VA: 0xBC0168 Slot: 3
	public override string ToString() { }

	// RVA: 0xBC0170 Offset: 0xBC0170 VA: 0xBC0170 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBC0184 Offset: 0xBC0184 VA: 0xBC0184
	public string ToString(string format) { }

	// RVA: 0xBC0190 Offset: 0xBC0190 VA: 0xBC0190 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xBC0198 Offset: 0xBC0198 VA: 0xBC0198
	public DateTime ToLocalTime() { }

	// RVA: 0xBC01A0 Offset: 0xBC01A0 VA: 0xBC01A0
	public DateTime ToUniversalTime() { }

	// RVA: 0x123504C Offset: 0x123504C VA: 0x123504C
	public static DateTime op_Addition(DateTime d, TimeSpan t) { }

	// RVA: 0x123BFFC Offset: 0x123BFFC VA: 0x123BFFC
	public static bool op_Equality(DateTime d1, DateTime d2) { }

	// RVA: 0x123C074 Offset: 0x123C074 VA: 0x123C074
	public static bool op_GreaterThan(DateTime t1, DateTime t2) { }

	// RVA: 0x123C0EC Offset: 0x123C0EC VA: 0x123C0EC
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x123AF24 Offset: 0x123AF24 VA: 0x123AF24
	public static bool op_Inequality(DateTime d1, DateTime d2) { }

	// RVA: 0x123C164 Offset: 0x123C164 VA: 0x123C164
	public static bool op_LessThan(DateTime t1, DateTime t2) { }

	// RVA: 0x123C1DC Offset: 0x123C1DC VA: 0x123C1DC
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2) { }

	// RVA: 0x123C254 Offset: 0x123C254 VA: 0x123C254
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2) { }

	// RVA: 0x123C300 Offset: 0x123C300 VA: 0x123C300
	public static DateTime op_Subtraction(DateTime d, TimeSpan t) { }
}

// Namespace: 
private enum DateTime.Which // TypeDefIndex: 975
{
	// Fields
	public int value__; // 0x0
	public const DateTime.Which Day = 0;
	public const DateTime.Which DayYear = 1;
	public const DateTime.Which Month = 2;
	public const DateTime.Which Year = 3;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36D54 Offset: 0xC36D54 VA: 0xC36D54
[Serializable]
public enum DateTimeKind // TypeDefIndex: 976
{
	// Fields
	public int value__; // 0x0
	public const DateTimeKind Unspecified = 0;
	public const DateTimeKind Utc = 1;
	public const DateTimeKind Local = 2;
}

// Namespace: System
[Serializable]
public struct DateTimeOffset : IFormattable, IComparable, ISerializable, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>, IDeserializationCallback // TypeDefIndex: 977
{
	// Fields
	public static readonly DateTimeOffset MaxValue; // 0x0
	public static readonly DateTimeOffset MinValue; // 0x18
	private DateTime dt; // 0x0
	private TimeSpan utc_offset; // 0x10

