	// RVA: 0x2667CE4 Offset: 0x2667CE4 VA: 0x2667CE4 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1Curve : AbstractFpCurve // TypeDefIndex: 5033
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP192R1_DEFAULT_COORDS = 2;
	protected readonly SecP192R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2667DEC Offset: 0x2667DEC VA: 0x2667DEC
	public void .ctor() { }

	// RVA: 0x2667FC8 Offset: 0x2667FC8 VA: 0x2667FC8 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2668020 Offset: 0x2668020 VA: 0x2668020 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x266802C Offset: 0x266802C VA: 0x266802C Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x2668094 Offset: 0x2668094 VA: 0x2668094 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x266809C Offset: 0x266809C VA: 0x266809C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2668118 Offset: 0x2668118 VA: 0x2668118 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x266829C Offset: 0x266829C VA: 0x266829C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2668328 Offset: 0x2668328 VA: 0x2668328 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26683BC Offset: 0x26683BC VA: 0x26683BC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1Field // TypeDefIndex: 5034
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P5 = 4294967295;
	private const uint PExt11 = 4294967295;

	// Methods

	// RVA: 0x266846C Offset: 0x266846C VA: 0x266846C
	public void .ctor() { }

	// RVA: 0x2668474 Offset: 0x2668474 VA: 0x2668474
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x26686B0 Offset: 0x26686B0 VA: 0x26686B0
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x266883C Offset: 0x266883C VA: 0x266883C
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2668944 Offset: 0x2668944 VA: 0x2668944
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2668A34 Offset: 0x2668A34 VA: 0x2668A34
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2668B1C Offset: 0x2668B1C VA: 0x2668B1C
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2668FE4 Offset: 0x2668FE4 VA: 0x2668FE4
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x266916C Offset: 0x266916C VA: 0x266916C
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2668BB4 Offset: 0x2668BB4 VA: 0x2668BB4
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x2669218 Offset: 0x2669218 VA: 0x2669218
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x2669414 Offset: 0x2669414 VA: 0x2669414
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x26694A4 Offset: 0x26694A4 VA: 0x26694A4
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x2669588 Offset: 0x2669588 VA: 0x2669588
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2669754 Offset: 0x2669754 VA: 0x2669754
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x266986C Offset: 0x266986C VA: 0x266986C
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x2668580 Offset: 0x2668580 VA: 0x2668580
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x2669624 Offset: 0x2669624 VA: 0x2669624
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x2669978 Offset: 0x2669978 VA: 0x2669978
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1FieldElement : ECFieldElement // TypeDefIndex: 5035
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2668178 Offset: 0x2668178 VA: 0x2668178
	public void .ctor(BigInteger x) { }

	// RVA: 0x2669A5C Offset: 0x2669A5C VA: 0x2669A5C
	public void .ctor() { }

	// RVA: 0x2669A8C Offset: 0x2669A8C VA: 0x2669A8C
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2669AB8 Offset: 0x2669AB8 VA: 0x2669AB8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2669AC4 Offset: 0x2669AC4 VA: 0x2669AC4 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2669AD0 Offset: 0x2669AD0 VA: 0x2669AD0 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2669AF8 Offset: 0x2669AF8 VA: 0x2669AF8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2669B04 Offset: 0x2669B04 VA: 0x2669B04 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2669B4C Offset: 0x2669B4C VA: 0x2669B4C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2669BC8 Offset: 0x2669BC8 VA: 0x2669BC8 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2669D6C Offset: 0x2669D6C VA: 0x2669D6C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2669E10 Offset: 0x2669E10 VA: 0x2669E10 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2669FB4 Offset: 0x2669FB4 VA: 0x2669FB4 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x266A158 Offset: 0x266A158 VA: 0x266A158 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x266A33C Offset: 0x266A33C VA: 0x266A33C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x266A3E0 Offset: 0x266A3E0 VA: 0x266A3E0 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x266A484 Offset: 0x266A484 VA: 0x266A484 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x266A564 Offset: 0x266A564 VA: 0x266A564 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x266A740 Offset: 0x266A740 VA: 0x266A740 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x266A7DC Offset: 0x266A7DC VA: 0x266A7DC Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x266A878 Offset: 0x266A878 VA: 0x266A878 Slot: 27
	public virtual bool Equals(SecP192R1FieldElement other) { }

	// RVA: 0x266A8A4 Offset: 0x266A8A4 VA: 0x266A8A4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x266A94C Offset: 0x266A94C VA: 0x266A94C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1Point : AbstractFpPoint // TypeDefIndex: 5036
{
	// Methods

	// RVA: 0x261AB18 Offset: 0x261AB18 VA: 0x261AB18
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x261AB20 Offset: 0x261AB20 VA: 0x261AB20
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x261ABF8 Offset: 0x261ABF8 VA: 0x261ABF8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x261AC04 Offset: 0x261AC04 VA: 0x261AC04 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x261ACA4 Offset: 0x261ACA4 VA: 0x261ACA4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x261B764 Offset: 0x261B764 VA: 0x261B764 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x261BE8C Offset: 0x261BE8C VA: 0x261BE8C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x261BF90 Offset: 0x261BF90 VA: 0x261BF90 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x261C02C Offset: 0x261C02C VA: 0x261C02C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1Curve : AbstractFpCurve // TypeDefIndex: 5037
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP224K1_DEFAULT_COORDS = 2;
	protected readonly SecP224K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x261C134 Offset: 0x261C134 VA: 0x261C134
	public void .ctor() { }

	// RVA: 0x261C2C0 Offset: 0x261C2C0 VA: 0x261C2C0 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x261C318 Offset: 0x261C318 VA: 0x261C318 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x261C324 Offset: 0x261C324 VA: 0x261C324 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x261C38C Offset: 0x261C38C VA: 0x261C38C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x261C394 Offset: 0x261C394 VA: 0x261C394 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x261C410 Offset: 0x261C410 VA: 0x261C410 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x261C594 Offset: 0x261C594 VA: 0x261C594 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x261C6F4 Offset: 0x261C6F4 VA: 0x261C6F4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x261C794 Offset: 0x261C794 VA: 0x261C794
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1Field // TypeDefIndex: 5038
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P6 = 4294967295;
	private const uint PExt13 = 4294967295;
	private const uint PInv33 = 6803;

	// Methods

	// RVA: 0x261C844 Offset: 0x261C844 VA: 0x261C844
	public void .ctor() { }

	// RVA: 0x261C84C Offset: 0x261C84C VA: 0x261C84C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x261C944 Offset: 0x261C944 VA: 0x261C944
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x261CAD0 Offset: 0x261CAD0 VA: 0x261CAD0
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x261CBC4 Offset: 0x261CBC4 VA: 0x261CBC4
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x261CCB4 Offset: 0x261CCB4 VA: 0x261CCB4
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x261CD9C Offset: 0x261CD9C VA: 0x261CD9C
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x261CF50 Offset: 0x261CF50 VA: 0x261CF50
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x261D0D8 Offset: 0x261D0D8 VA: 0x261D0D8
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x261CE34 Offset: 0x261CE34 VA: 0x261CE34
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x261D184 Offset: 0x261D184 VA: 0x261D184
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x261D280 Offset: 0x261D280 VA: 0x261D280
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x261D310 Offset: 0x261D310 VA: 0x261D310
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x261D3F4 Offset: 0x261D3F4 VA: 0x261D3F4
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x261D438 Offset: 0x261D438 VA: 0x261D438
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x261D550 Offset: 0x261D550 VA: 0x261D550
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x261D648 Offset: 0x261D648 VA: 0x261D648
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1FieldElement : ECFieldElement // TypeDefIndex: 5039
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	private static readonly uint[] PRECOMP_POW2; // 0x8
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x261C470 Offset: 0x261C470 VA: 0x261C470
	public void .ctor(BigInteger x) { }

	// RVA: 0x261D72C Offset: 0x261D72C VA: 0x261D72C
	public void .ctor() { }

	// RVA: 0x261D75C Offset: 0x261D75C VA: 0x261D75C
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x261D788 Offset: 0x261D788 VA: 0x261D788 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x261D794 Offset: 0x261D794 VA: 0x261D794 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x261D7A0 Offset: 0x261D7A0 VA: 0x261D7A0 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x261D7C8 Offset: 0x261D7C8 VA: 0x261D7C8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x261D7D4 Offset: 0x261D7D4 VA: 0x261D7D4 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x261D81C Offset: 0x261D81C VA: 0x261D81C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x261D898 Offset: 0x261D898 VA: 0x261D898 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x261DA3C Offset: 0x261DA3C VA: 0x261DA3C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x261DAE0 Offset: 0x261DAE0 VA: 0x261DAE0 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x261DC84 Offset: 0x261DC84 VA: 0x261DC84 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x261DE28 Offset: 0x261DE28 VA: 0x261DE28 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x261E00C Offset: 0x261E00C VA: 0x261E00C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x261E0B0 Offset: 0x261E0B0 VA: 0x261E0B0 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x261E154 Offset: 0x261E154 VA: 0x261E154 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x261E234 Offset: 0x261E234 VA: 0x261E234 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x261E5B0 Offset: 0x261E5B0 VA: 0x261E5B0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x261E64C Offset: 0x261E64C VA: 0x261E64C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x261E6E8 Offset: 0x261E6E8 VA: 0x261E6E8 Slot: 27
	public virtual bool Equals(SecP224K1FieldElement other) { }

	// RVA: 0x261E714 Offset: 0x261E714 VA: 0x261E714 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x261E7BC Offset: 0x261E7BC VA: 0x261E7BC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1Point : AbstractFpPoint // TypeDefIndex: 5040
{
	// Methods

	// RVA: 0x261C2B8 Offset: 0x261C2B8 VA: 0x261C2B8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x261C61C Offset: 0x261C61C VA: 0x261C61C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x261C788 Offset: 0x261C788 VA: 0x261C788
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x261E870 Offset: 0x261E870 VA: 0x261E870 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x261E910 Offset: 0x261E910 VA: 0x261E910 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x261F33C Offset: 0x261F33C VA: 0x261F33C Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x261F970 Offset: 0x261F970 VA: 0x261F970 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x261FA74 Offset: 0x261FA74 VA: 0x261FA74 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x261FB10 Offset: 0x261FB10 VA: 0x261FB10 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1Curve : AbstractFpCurve // TypeDefIndex: 5041
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP224R1_DEFAULT_COORDS = 2;
	protected readonly SecP224R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x261FC18 Offset: 0x261FC18 VA: 0x261FC18
	public void .ctor() { }

	// RVA: 0x261FE00 Offset: 0x261FE00 VA: 0x261FE00 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x261FE58 Offset: 0x261FE58 VA: 0x261FE58 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x261FE64 Offset: 0x261FE64 VA: 0x261FE64 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x261FECC Offset: 0x261FECC VA: 0x261FECC Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x261FED4 Offset: 0x261FED4 VA: 0x261FED4 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x261FF50 Offset: 0x261FF50 VA: 0x261FF50 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26200D4 Offset: 0x26200D4 VA: 0x26200D4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2620234 Offset: 0x2620234 VA: 0x2620234 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26202D4 Offset: 0x26202D4 VA: 0x26202D4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1Field // TypeDefIndex: 5042
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P6 = 4294967295;
	private const uint PExt13 = 4294967295;

	// Methods

	// RVA: 0x2620384 Offset: 0x2620384 VA: 0x2620384
	public void .ctor() { }

	// RVA: 0x262038C Offset: 0x262038C VA: 0x262038C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2620610 Offset: 0x2620610 VA: 0x2620610
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x262079C Offset: 0x262079C VA: 0x262079C
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x26208A4 Offset: 0x26208A4 VA: 0x26208A4
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2620994 Offset: 0x2620994 VA: 0x2620994
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2620A7C Offset: 0x2620A7C VA: 0x2620A7C
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2621020 Offset: 0x2621020 VA: 0x2621020
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x26211A8 Offset: 0x26211A8 VA: 0x26211A8
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2620B14 Offset: 0x2620B14 VA: 0x2620B14
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x2621254 Offset: 0x2621254 VA: 0x2621254
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x2621498 Offset: 0x2621498 VA: 0x2621498
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x2621528 Offset: 0x2621528 VA: 0x2621528
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x262160C Offset: 0x262160C VA: 0x262160C
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2621820 Offset: 0x2621820 VA: 0x2621820
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2621938 Offset: 0x2621938 VA: 0x2621938
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x2620498 Offset: 0x2620498 VA: 0x2620498
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x26216A8 Offset: 0x26216A8 VA: 0x26216A8
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x2621A44 Offset: 0x2621A44 VA: 0x2621A44
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1FieldElement : ECFieldElement // TypeDefIndex: 5043
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x261FFB0 Offset: 0x261FFB0 VA: 0x261FFB0
	public void .ctor(BigInteger x) { }

	// RVA: 0x2621B28 Offset: 0x2621B28 VA: 0x2621B28
	public void .ctor() { }

	// RVA: 0x2621B58 Offset: 0x2621B58 VA: 0x2621B58
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2621B84 Offset: 0x2621B84 VA: 0x2621B84 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2621B90 Offset: 0x2621B90 VA: 0x2621B90 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2621B9C Offset: 0x2621B9C VA: 0x2621B9C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2621BC4 Offset: 0x2621BC4 VA: 0x2621BC4 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2621BD0 Offset: 0x2621BD0 VA: 0x2621BD0 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2621C18 Offset: 0x2621C18 VA: 0x2621C18 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2621C94 Offset: 0x2621C94 VA: 0x2621C94 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2621E38 Offset: 0x2621E38 VA: 0x2621E38 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2621EDC Offset: 0x2621EDC VA: 0x2621EDC Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2622080 Offset: 0x2622080 VA: 0x2622080 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2622224 Offset: 0x2622224 VA: 0x2622224 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2622408 Offset: 0x2622408 VA: 0x2622408 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x26224AC Offset: 0x26224AC VA: 0x26224AC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2622550 Offset: 0x2622550 VA: 0x2622550 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2622630 Offset: 0x2622630 VA: 0x2622630 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2622B10 Offset: 0x2622B10 VA: 0x2622B10 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2622BAC Offset: 0x2622BAC VA: 0x2622BAC Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2622C48 Offset: 0x2622C48 VA: 0x2622C48 Slot: 27
	public virtual bool Equals(SecP224R1FieldElement other) { }

	// RVA: 0x2622C74 Offset: 0x2622C74 VA: 0x2622C74 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2622808 Offset: 0x2622808 VA: 0x2622808
	private static bool IsSquare(uint[] x) { }

	// RVA: 0x2622D1C Offset: 0x2622D1C VA: 0x2622D1C
	private static void RM(uint[] nc, uint[] d0, uint[] e0, uint[] d1, uint[] e1, uint[] f1, uint[] t) { }

	// RVA: 0x2622E44 Offset: 0x2622E44 VA: 0x2622E44
	private static void RP(uint[] nc, uint[] d1, uint[] e1, uint[] f1, uint[] t) { }

	// RVA: 0x2622F98 Offset: 0x2622F98 VA: 0x2622F98
	private static void RS(uint[] d, uint[] e, uint[] f, uint[] t) { }

	// RVA: 0x2622914 Offset: 0x2622914 VA: 0x2622914
	private static bool TrySqrt(uint[] nc, uint[] r, uint[] t) { }

	// RVA: 0x2623078 Offset: 0x2623078 VA: 0x2623078
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1Point : AbstractFpPoint // TypeDefIndex: 5044
{
	// Methods

	// RVA: 0x261FDF8 Offset: 0x261FDF8 VA: 0x261FDF8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262015C Offset: 0x262015C VA: 0x262015C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26202C8 Offset: 0x26202C8 VA: 0x26202C8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26230F4 Offset: 0x26230F4 VA: 0x26230F4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2623194 Offset: 0x2623194 VA: 0x2623194 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2623BC0 Offset: 0x2623BC0 VA: 0x2623BC0 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2624278 Offset: 0x2624278 VA: 0x2624278 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x262437C Offset: 0x262437C VA: 0x262437C Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2624418 Offset: 0x2624418 VA: 0x2624418 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1Curve : AbstractFpCurve // TypeDefIndex: 5045
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP256K1_DEFAULT_COORDS = 2;
	protected readonly SecP256K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2624520 Offset: 0x2624520 VA: 0x2624520
	public void .ctor() { }

	// RVA: 0x26246AC Offset: 0x26246AC VA: 0x26246AC Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2624704 Offset: 0x2624704 VA: 0x2624704 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2624710 Offset: 0x2624710 VA: 0x2624710 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x2624778 Offset: 0x2624778 VA: 0x2624778 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2624780 Offset: 0x2624780 VA: 0x2624780 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x26247FC Offset: 0x26247FC VA: 0x26247FC Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2624980 Offset: 0x2624980 VA: 0x2624980 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2624AE0 Offset: 0x2624AE0 VA: 0x2624AE0 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2624B80 Offset: 0x2624B80 VA: 0x2624B80
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1Field // TypeDefIndex: 5046
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P7 = 4294967295;
	private const uint PExt15 = 4294967295;
	private const uint PInv33 = 977;

	// Methods

	// RVA: 0x2624C30 Offset: 0x2624C30 VA: 0x2624C30
	public void .ctor() { }

	// RVA: 0x2624C38 Offset: 0x2624C38 VA: 0x2624C38
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2624D30 Offset: 0x2624D30 VA: 0x2624D30
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2624EBC Offset: 0x2624EBC VA: 0x2624EBC
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2624FB0 Offset: 0x2624FB0 VA: 0x2624FB0
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x26250A0 Offset: 0x26250A0 VA: 0x26250A0
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2625188 Offset: 0x2625188 VA: 0x2625188
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x262533C Offset: 0x262533C VA: 0x262533C
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x26254C4 Offset: 0x26254C4 VA: 0x26254C4
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2625220 Offset: 0x2625220 VA: 0x2625220
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x2625570 Offset: 0x2625570 VA: 0x2625570
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x262566C Offset: 0x262566C VA: 0x262566C
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x26256FC Offset: 0x26256FC VA: 0x26256FC
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x26257E0 Offset: 0x26257E0 VA: 0x26257E0
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2625824 Offset: 0x2625824 VA: 0x2625824
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x262593C Offset: 0x262593C VA: 0x262593C
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x2625A34 Offset: 0x2625A34 VA: 0x2625A34
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1FieldElement : ECFieldElement // TypeDefIndex: 5047
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x262485C Offset: 0x262485C VA: 0x262485C
	public void .ctor(BigInteger x) { }

	// RVA: 0x2625B18 Offset: 0x2625B18 VA: 0x2625B18
	public void .ctor() { }

	// RVA: 0x2625B48 Offset: 0x2625B48 VA: 0x2625B48
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2625B74 Offset: 0x2625B74 VA: 0x2625B74 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2625B80 Offset: 0x2625B80 VA: 0x2625B80 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2625B8C Offset: 0x2625B8C VA: 0x2625B8C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2625BB4 Offset: 0x2625BB4 VA: 0x2625BB4 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2625BC0 Offset: 0x2625BC0 VA: 0x2625BC0 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2625C08 Offset: 0x2625C08 VA: 0x2625C08 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2625C84 Offset: 0x2625C84 VA: 0x2625C84 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2625E28 Offset: 0x2625E28 VA: 0x2625E28 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2625ECC Offset: 0x2625ECC VA: 0x2625ECC Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2626070 Offset: 0x2626070 VA: 0x2626070 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2626214 Offset: 0x2626214 VA: 0x2626214 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x26263F8 Offset: 0x26263F8 VA: 0x26263F8 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x262649C Offset: 0x262649C VA: 0x262649C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2626540 Offset: 0x2626540 VA: 0x2626540 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2626620 Offset: 0x2626620 VA: 0x2626620 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x26268F8 Offset: 0x26268F8 VA: 0x26268F8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2626994 Offset: 0x2626994 VA: 0x2626994 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2626A30 Offset: 0x2626A30 VA: 0x2626A30 Slot: 27
	public virtual bool Equals(SecP256K1FieldElement other) { }

	// RVA: 0x2626A5C Offset: 0x2626A5C VA: 0x2626A5C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2626B04 Offset: 0x2626B04 VA: 0x2626B04
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1Point : AbstractFpPoint // TypeDefIndex: 5048
{
	// Methods

	// RVA: 0x26246A4 Offset: 0x26246A4 VA: 0x26246A4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2624A08 Offset: 0x2624A08 VA: 0x2624A08
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2624B74 Offset: 0x2624B74 VA: 0x2624B74
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2626B80 Offset: 0x2626B80 VA: 0x2626B80 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2626C20 Offset: 0x2626C20 VA: 0x2626C20 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x262764C Offset: 0x262764C VA: 0x262764C Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2627C80 Offset: 0x2627C80 VA: 0x2627C80 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2627D84 Offset: 0x2627D84 VA: 0x2627D84 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2627E20 Offset: 0x2627E20 VA: 0x2627E20 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1Curve : AbstractFpCurve // TypeDefIndex: 5049
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP256R1_DEFAULT_COORDS = 2;
	protected readonly SecP256R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2627F28 Offset: 0x2627F28 VA: 0x2627F28
	public void .ctor() { }

	// RVA: 0x2628110 Offset: 0x2628110 VA: 0x2628110 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2628168 Offset: 0x2628168 VA: 0x2628168 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2628174 Offset: 0x2628174 VA: 0x2628174 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x26281DC Offset: 0x26281DC VA: 0x26281DC Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26281E4 Offset: 0x26281E4 VA: 0x26281E4 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2628260 Offset: 0x2628260 VA: 0x2628260 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26283E4 Offset: 0x26283E4 VA: 0x26283E4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2628544 Offset: 0x2628544 VA: 0x2628544 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26285E4 Offset: 0x26285E4 VA: 0x26285E4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1Field // TypeDefIndex: 5050
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	internal const uint P7 = 4294967295;
	internal const uint PExt15 = 4294967294;
