
	// RVA: 0x24FE674 Offset: 0x24FE674 VA: 0x24FE674
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24FE76C Offset: 0x24FE76C VA: 0x24FE76C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1FieldElement : ECFieldElement // TypeDefIndex: 5031
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24FD594 Offset: 0x24FD594 VA: 0x24FD594
	public void .ctor(BigInteger x) { }

	// RVA: 0x24FE850 Offset: 0x24FE850 VA: 0x24FE850
	public void .ctor() { }

	// RVA: 0x24FE880 Offset: 0x24FE880 VA: 0x24FE880
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24FE8AC Offset: 0x24FE8AC VA: 0x24FE8AC Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24FE8B8 Offset: 0x24FE8B8 VA: 0x24FE8B8 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24FE8C4 Offset: 0x24FE8C4 VA: 0x24FE8C4 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24FE8EC Offset: 0x24FE8EC VA: 0x24FE8EC Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24FE8F8 Offset: 0x24FE8F8 VA: 0x24FE8F8 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24FE940 Offset: 0x24FE940 VA: 0x24FE940 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24FE9BC Offset: 0x24FE9BC VA: 0x24FE9BC Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24FEB60 Offset: 0x24FEB60 VA: 0x24FEB60 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24FEC04 Offset: 0x24FEC04 VA: 0x24FEC04 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24FEDA8 Offset: 0x24FEDA8 VA: 0x24FEDA8 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24FEF4C Offset: 0x24FEF4C VA: 0x24FEF4C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24FF130 Offset: 0x24FF130 VA: 0x24FF130 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24FF1D4 Offset: 0x24FF1D4 VA: 0x24FF1D4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24FF278 Offset: 0x24FF278 VA: 0x24FF278 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24FF358 Offset: 0x24FF358 VA: 0x24FF358 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24FF60C Offset: 0x24FF60C VA: 0x24FF60C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24FF6A8 Offset: 0x24FF6A8 VA: 0x24FF6A8 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24FF744 Offset: 0x24FF744 VA: 0x24FF744 Slot: 27
	public virtual bool Equals(SecP192K1FieldElement other) { }

	// RVA: 0x24FF770 Offset: 0x24FF770 VA: 0x24FF770 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24FF818 Offset: 0x24FF818 VA: 0x24FF818
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1Point : AbstractFpPoint // TypeDefIndex: 5032
{
	// Methods

	// RVA: 0x24FD3DC Offset: 0x24FD3DC VA: 0x24FD3DC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FD740 Offset: 0x24FD740 VA: 0x24FD740
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FD8AC Offset: 0x24FD8AC VA: 0x24FD8AC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FF894 Offset: 0x24FF894 VA: 0x24FF894 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24FF934 Offset: 0x24FF934 VA: 0x24FF934 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2500360 Offset: 0x2500360 VA: 0x2500360 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2500994 Offset: 0x2500994 VA: 0x2500994 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2500A98 Offset: 0x2500A98 VA: 0x2500A98 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2500B34 Offset: 0x2500B34 VA: 0x2500B34 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1Curve : AbstractFpCurve // TypeDefIndex: 5033
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP192R1_DEFAULT_COORDS = 2;
	protected readonly SecP192R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2500C3C Offset: 0x2500C3C VA: 0x2500C3C
	public void .ctor() { }

	// RVA: 0x2500E18 Offset: 0x2500E18 VA: 0x2500E18 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2500E70 Offset: 0x2500E70 VA: 0x2500E70 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2500E7C Offset: 0x2500E7C VA: 0x2500E7C Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x2500EE4 Offset: 0x2500EE4 VA: 0x2500EE4 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2500EEC Offset: 0x2500EEC VA: 0x2500EEC Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2500F68 Offset: 0x2500F68 VA: 0x2500F68 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x25010EC Offset: 0x25010EC VA: 0x25010EC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2501178 Offset: 0x2501178 VA: 0x2501178 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x250120C Offset: 0x250120C VA: 0x250120C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1Field // TypeDefIndex: 5034
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P5 = 4294967295;
	private const uint PExt11 = 4294967295;

	// Methods

	// RVA: 0x25012BC Offset: 0x25012BC VA: 0x25012BC
	public void .ctor() { }

	// RVA: 0x25012C4 Offset: 0x25012C4 VA: 0x25012C4
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2501500 Offset: 0x2501500 VA: 0x2501500
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x250168C Offset: 0x250168C VA: 0x250168C
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2501794 Offset: 0x2501794 VA: 0x2501794
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2501884 Offset: 0x2501884 VA: 0x2501884
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x250196C Offset: 0x250196C VA: 0x250196C
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2501E34 Offset: 0x2501E34 VA: 0x2501E34
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2501FBC Offset: 0x2501FBC VA: 0x2501FBC
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2501A04 Offset: 0x2501A04 VA: 0x2501A04
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x2502068 Offset: 0x2502068 VA: 0x2502068
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x2502264 Offset: 0x2502264 VA: 0x2502264
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x25022F4 Offset: 0x25022F4 VA: 0x25022F4
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x25023D8 Offset: 0x25023D8 VA: 0x25023D8
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x25025A4 Offset: 0x25025A4 VA: 0x25025A4
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x25026BC Offset: 0x25026BC VA: 0x25026BC
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x25013D0 Offset: 0x25013D0 VA: 0x25013D0
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x2502474 Offset: 0x2502474 VA: 0x2502474
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x25027C8 Offset: 0x25027C8 VA: 0x25027C8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1FieldElement : ECFieldElement // TypeDefIndex: 5035
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2500FC8 Offset: 0x2500FC8 VA: 0x2500FC8
	public void .ctor(BigInteger x) { }

	// RVA: 0x25028AC Offset: 0x25028AC VA: 0x25028AC
	public void .ctor() { }

	// RVA: 0x25028DC Offset: 0x25028DC VA: 0x25028DC
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2502908 Offset: 0x2502908 VA: 0x2502908 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2502914 Offset: 0x2502914 VA: 0x2502914 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2502920 Offset: 0x2502920 VA: 0x2502920 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2502948 Offset: 0x2502948 VA: 0x2502948 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2502954 Offset: 0x2502954 VA: 0x2502954 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x250299C Offset: 0x250299C VA: 0x250299C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2502A18 Offset: 0x2502A18 VA: 0x2502A18 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2502BBC Offset: 0x2502BBC VA: 0x2502BBC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2502C60 Offset: 0x2502C60 VA: 0x2502C60 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2502E04 Offset: 0x2502E04 VA: 0x2502E04 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2502FA8 Offset: 0x2502FA8 VA: 0x2502FA8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x250318C Offset: 0x250318C VA: 0x250318C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2503230 Offset: 0x2503230 VA: 0x2503230 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x25032D4 Offset: 0x25032D4 VA: 0x25032D4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x25033B4 Offset: 0x25033B4 VA: 0x25033B4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2503590 Offset: 0x2503590 VA: 0x2503590 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x250362C Offset: 0x250362C VA: 0x250362C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x25036C8 Offset: 0x25036C8 VA: 0x25036C8 Slot: 27
	public virtual bool Equals(SecP192R1FieldElement other) { }

	// RVA: 0x25036F4 Offset: 0x25036F4 VA: 0x25036F4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x250379C Offset: 0x250379C VA: 0x250379C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192R1Point : AbstractFpPoint // TypeDefIndex: 5036
{
	// Methods

	// RVA: 0x2498788 Offset: 0x2498788 VA: 0x2498788
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2498790 Offset: 0x2498790 VA: 0x2498790
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2498868 Offset: 0x2498868 VA: 0x2498868
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2498874 Offset: 0x2498874 VA: 0x2498874 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2498914 Offset: 0x2498914 VA: 0x2498914 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24993D4 Offset: 0x24993D4 VA: 0x24993D4 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2499AFC Offset: 0x2499AFC VA: 0x2499AFC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2499C00 Offset: 0x2499C00 VA: 0x2499C00 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2499C9C Offset: 0x2499C9C VA: 0x2499C9C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1Curve : AbstractFpCurve // TypeDefIndex: 5037
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP224K1_DEFAULT_COORDS = 2;
	protected readonly SecP224K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2499DA4 Offset: 0x2499DA4 VA: 0x2499DA4
	public void .ctor() { }

	// RVA: 0x2499F30 Offset: 0x2499F30 VA: 0x2499F30 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2499F88 Offset: 0x2499F88 VA: 0x2499F88 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2499F94 Offset: 0x2499F94 VA: 0x2499F94 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x2499FFC Offset: 0x2499FFC VA: 0x2499FFC Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x249A004 Offset: 0x249A004 VA: 0x249A004 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x249A080 Offset: 0x249A080 VA: 0x249A080 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x249A204 Offset: 0x249A204 VA: 0x249A204 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x249A364 Offset: 0x249A364 VA: 0x249A364 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x249A404 Offset: 0x249A404 VA: 0x249A404
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1Field // TypeDefIndex: 5038
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P6 = 4294967295;
	private const uint PExt13 = 4294967295;
	private const uint PInv33 = 6803;

	// Methods

	// RVA: 0x249A4B4 Offset: 0x249A4B4 VA: 0x249A4B4
	public void .ctor() { }

	// RVA: 0x249A4BC Offset: 0x249A4BC VA: 0x249A4BC
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249A5B4 Offset: 0x249A5B4 VA: 0x249A5B4
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x249A740 Offset: 0x249A740 VA: 0x249A740
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x249A834 Offset: 0x249A834 VA: 0x249A834
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x249A924 Offset: 0x249A924 VA: 0x249A924
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x249AA0C Offset: 0x249AA0C VA: 0x249AA0C
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249ABC0 Offset: 0x249ABC0 VA: 0x249ABC0
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x249AD48 Offset: 0x249AD48 VA: 0x249AD48
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x249AAA4 Offset: 0x249AAA4 VA: 0x249AAA4
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x249ADF4 Offset: 0x249ADF4 VA: 0x249ADF4
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x249AEF0 Offset: 0x249AEF0 VA: 0x249AEF0
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x249AF80 Offset: 0x249AF80 VA: 0x249AF80
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x249B064 Offset: 0x249B064 VA: 0x249B064
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249B0A8 Offset: 0x249B0A8 VA: 0x249B0A8
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x249B1C0 Offset: 0x249B1C0 VA: 0x249B1C0
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x249B2B8 Offset: 0x249B2B8 VA: 0x249B2B8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1FieldElement : ECFieldElement // TypeDefIndex: 5039
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	private static readonly uint[] PRECOMP_POW2; // 0x8
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x249A0E0 Offset: 0x249A0E0 VA: 0x249A0E0
	public void .ctor(BigInteger x) { }

	// RVA: 0x249B39C Offset: 0x249B39C VA: 0x249B39C
	public void .ctor() { }

	// RVA: 0x249B3CC Offset: 0x249B3CC VA: 0x249B3CC
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x249B3F8 Offset: 0x249B3F8 VA: 0x249B3F8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x249B404 Offset: 0x249B404 VA: 0x249B404 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x249B410 Offset: 0x249B410 VA: 0x249B410 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x249B438 Offset: 0x249B438 VA: 0x249B438 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x249B444 Offset: 0x249B444 VA: 0x249B444 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x249B48C Offset: 0x249B48C VA: 0x249B48C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x249B508 Offset: 0x249B508 VA: 0x249B508 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x249B6AC Offset: 0x249B6AC VA: 0x249B6AC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x249B750 Offset: 0x249B750 VA: 0x249B750 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x249B8F4 Offset: 0x249B8F4 VA: 0x249B8F4 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x249BA98 Offset: 0x249BA98 VA: 0x249BA98 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x249BC7C Offset: 0x249BC7C VA: 0x249BC7C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x249BD20 Offset: 0x249BD20 VA: 0x249BD20 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x249BDC4 Offset: 0x249BDC4 VA: 0x249BDC4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x249BEA4 Offset: 0x249BEA4 VA: 0x249BEA4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x249C220 Offset: 0x249C220 VA: 0x249C220 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x249C2BC Offset: 0x249C2BC VA: 0x249C2BC Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x249C358 Offset: 0x249C358 VA: 0x249C358 Slot: 27
	public virtual bool Equals(SecP224K1FieldElement other) { }

	// RVA: 0x249C384 Offset: 0x249C384 VA: 0x249C384 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x249C42C Offset: 0x249C42C VA: 0x249C42C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224K1Point : AbstractFpPoint // TypeDefIndex: 5040
{
	// Methods

	// RVA: 0x2499F28 Offset: 0x2499F28 VA: 0x2499F28
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x249A28C Offset: 0x249A28C VA: 0x249A28C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x249A3F8 Offset: 0x249A3F8 VA: 0x249A3F8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x249C4E0 Offset: 0x249C4E0 VA: 0x249C4E0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x249C580 Offset: 0x249C580 VA: 0x249C580 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x249CFAC Offset: 0x249CFAC VA: 0x249CFAC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x249D5E0 Offset: 0x249D5E0 VA: 0x249D5E0 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x249D6E4 Offset: 0x249D6E4 VA: 0x249D6E4 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x249D780 Offset: 0x249D780 VA: 0x249D780 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1Curve : AbstractFpCurve // TypeDefIndex: 5041
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP224R1_DEFAULT_COORDS = 2;
	protected readonly SecP224R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x249D888 Offset: 0x249D888 VA: 0x249D888
	public void .ctor() { }

	// RVA: 0x249DA70 Offset: 0x249DA70 VA: 0x249DA70 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x249DAC8 Offset: 0x249DAC8 VA: 0x249DAC8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x249DAD4 Offset: 0x249DAD4 VA: 0x249DAD4 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x249DB3C Offset: 0x249DB3C VA: 0x249DB3C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x249DB44 Offset: 0x249DB44 VA: 0x249DB44 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x249DBC0 Offset: 0x249DBC0 VA: 0x249DBC0 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x249DD44 Offset: 0x249DD44 VA: 0x249DD44 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x249DEA4 Offset: 0x249DEA4 VA: 0x249DEA4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x249DF44 Offset: 0x249DF44 VA: 0x249DF44
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1Field // TypeDefIndex: 5042
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P6 = 4294967295;
	private const uint PExt13 = 4294967295;

	// Methods

	// RVA: 0x249DFF4 Offset: 0x249DFF4 VA: 0x249DFF4
	public void .ctor() { }

	// RVA: 0x249DFFC Offset: 0x249DFFC VA: 0x249DFFC
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249E280 Offset: 0x249E280 VA: 0x249E280
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x249E40C Offset: 0x249E40C VA: 0x249E40C
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x249E514 Offset: 0x249E514 VA: 0x249E514
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x249E604 Offset: 0x249E604 VA: 0x249E604
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x249E6EC Offset: 0x249E6EC VA: 0x249E6EC
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249EC90 Offset: 0x249EC90 VA: 0x249EC90
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x249EE18 Offset: 0x249EE18 VA: 0x249EE18
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x249E784 Offset: 0x249E784 VA: 0x249E784
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x249EEC4 Offset: 0x249EEC4 VA: 0x249EEC4
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x249F108 Offset: 0x249F108 VA: 0x249F108
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x249F198 Offset: 0x249F198 VA: 0x249F198
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x249F27C Offset: 0x249F27C VA: 0x249F27C
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249F490 Offset: 0x249F490 VA: 0x249F490
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x249F5A8 Offset: 0x249F5A8 VA: 0x249F5A8
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x249E108 Offset: 0x249E108 VA: 0x249E108
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x249F318 Offset: 0x249F318 VA: 0x249F318
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x249F6B4 Offset: 0x249F6B4 VA: 0x249F6B4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1FieldElement : ECFieldElement // TypeDefIndex: 5043
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x249DC20 Offset: 0x249DC20 VA: 0x249DC20
	public void .ctor(BigInteger x) { }

	// RVA: 0x249F798 Offset: 0x249F798 VA: 0x249F798
	public void .ctor() { }

	// RVA: 0x249F7C8 Offset: 0x249F7C8 VA: 0x249F7C8
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x249F7F4 Offset: 0x249F7F4 VA: 0x249F7F4 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x249F800 Offset: 0x249F800 VA: 0x249F800 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x249F80C Offset: 0x249F80C VA: 0x249F80C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x249F834 Offset: 0x249F834 VA: 0x249F834 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x249F840 Offset: 0x249F840 VA: 0x249F840 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x249F888 Offset: 0x249F888 VA: 0x249F888 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x249F904 Offset: 0x249F904 VA: 0x249F904 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x249FAA8 Offset: 0x249FAA8 VA: 0x249FAA8 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x249FB4C Offset: 0x249FB4C VA: 0x249FB4C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x249FCF0 Offset: 0x249FCF0 VA: 0x249FCF0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x249FE94 Offset: 0x249FE94 VA: 0x249FE94 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24A0078 Offset: 0x24A0078 VA: 0x24A0078 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24A011C Offset: 0x24A011C VA: 0x24A011C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24A01C0 Offset: 0x24A01C0 VA: 0x24A01C0 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24A02A0 Offset: 0x24A02A0 VA: 0x24A02A0 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24A0780 Offset: 0x24A0780 VA: 0x24A0780 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24A081C Offset: 0x24A081C VA: 0x24A081C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24A08B8 Offset: 0x24A08B8 VA: 0x24A08B8 Slot: 27
	public virtual bool Equals(SecP224R1FieldElement other) { }

	// RVA: 0x24A08E4 Offset: 0x24A08E4 VA: 0x24A08E4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24A0478 Offset: 0x24A0478 VA: 0x24A0478
	private static bool IsSquare(uint[] x) { }

	// RVA: 0x24A098C Offset: 0x24A098C VA: 0x24A098C
	private static void RM(uint[] nc, uint[] d0, uint[] e0, uint[] d1, uint[] e1, uint[] f1, uint[] t) { }

	// RVA: 0x24A0AB4 Offset: 0x24A0AB4 VA: 0x24A0AB4
	private static void RP(uint[] nc, uint[] d1, uint[] e1, uint[] f1, uint[] t) { }

	// RVA: 0x24A0C08 Offset: 0x24A0C08 VA: 0x24A0C08
	private static void RS(uint[] d, uint[] e, uint[] f, uint[] t) { }

	// RVA: 0x24A0584 Offset: 0x24A0584 VA: 0x24A0584
	private static bool TrySqrt(uint[] nc, uint[] r, uint[] t) { }

	// RVA: 0x24A0CE8 Offset: 0x24A0CE8 VA: 0x24A0CE8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP224R1Point : AbstractFpPoint // TypeDefIndex: 5044
{
	// Methods

	// RVA: 0x249DA68 Offset: 0x249DA68 VA: 0x249DA68
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x249DDCC Offset: 0x249DDCC VA: 0x249DDCC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x249DF38 Offset: 0x249DF38 VA: 0x249DF38
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24A0D64 Offset: 0x24A0D64 VA: 0x24A0D64 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24A0E04 Offset: 0x24A0E04 VA: 0x24A0E04 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24A1830 Offset: 0x24A1830 VA: 0x24A1830 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24A1EE8 Offset: 0x24A1EE8 VA: 0x24A1EE8 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24A1FEC Offset: 0x24A1FEC VA: 0x24A1FEC Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24A2088 Offset: 0x24A2088 VA: 0x24A2088 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1Curve : AbstractFpCurve // TypeDefIndex: 5045
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP256K1_DEFAULT_COORDS = 2;
	protected readonly SecP256K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24A2190 Offset: 0x24A2190 VA: 0x24A2190
	public void .ctor() { }

	// RVA: 0x24A231C Offset: 0x24A231C VA: 0x24A231C Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24A2374 Offset: 0x24A2374 VA: 0x24A2374 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24A2380 Offset: 0x24A2380 VA: 0x24A2380 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24A23E8 Offset: 0x24A23E8 VA: 0x24A23E8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24A23F0 Offset: 0x24A23F0 VA: 0x24A23F0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24A246C Offset: 0x24A246C VA: 0x24A246C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24A25F0 Offset: 0x24A25F0 VA: 0x24A25F0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24A2750 Offset: 0x24A2750 VA: 0x24A2750 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24A27F0 Offset: 0x24A27F0 VA: 0x24A27F0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1Field // TypeDefIndex: 5046
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P7 = 4294967295;
	private const uint PExt15 = 4294967295;
	private const uint PInv33 = 977;

	// Methods

	// RVA: 0x24A28A0 Offset: 0x24A28A0 VA: 0x24A28A0
	public void .ctor() { }

	// RVA: 0x24A28A8 Offset: 0x24A28A8 VA: 0x24A28A8
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24A29A0 Offset: 0x24A29A0 VA: 0x24A29A0
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24A2B2C Offset: 0x24A2B2C VA: 0x24A2B2C
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24A2C20 Offset: 0x24A2C20 VA: 0x24A2C20
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24A2D10 Offset: 0x24A2D10 VA: 0x24A2D10
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24A2DF8 Offset: 0x24A2DF8 VA: 0x24A2DF8
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24A2FAC Offset: 0x24A2FAC VA: 0x24A2FAC
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24A3134 Offset: 0x24A3134 VA: 0x24A3134
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24A2E90 Offset: 0x24A2E90 VA: 0x24A2E90
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24A31E0 Offset: 0x24A31E0 VA: 0x24A31E0
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24A32DC Offset: 0x24A32DC VA: 0x24A32DC
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24A336C Offset: 0x24A336C VA: 0x24A336C
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24A3450 Offset: 0x24A3450 VA: 0x24A3450
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24A3494 Offset: 0x24A3494 VA: 0x24A3494
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24A35AC Offset: 0x24A35AC VA: 0x24A35AC
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24A36A4 Offset: 0x24A36A4 VA: 0x24A36A4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1FieldElement : ECFieldElement // TypeDefIndex: 5047
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24A24CC Offset: 0x24A24CC VA: 0x24A24CC
	public void .ctor(BigInteger x) { }

	// RVA: 0x24A3788 Offset: 0x24A3788 VA: 0x24A3788
	public void .ctor() { }

	// RVA: 0x24A37B8 Offset: 0x24A37B8 VA: 0x24A37B8
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24A37E4 Offset: 0x24A37E4 VA: 0x24A37E4 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24A37F0 Offset: 0x24A37F0 VA: 0x24A37F0 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24A37FC Offset: 0x24A37FC VA: 0x24A37FC Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24A3824 Offset: 0x24A3824 VA: 0x24A3824 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24A3830 Offset: 0x24A3830 VA: 0x24A3830 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24A3878 Offset: 0x24A3878 VA: 0x24A3878 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24A38F4 Offset: 0x24A38F4 VA: 0x24A38F4 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24A3A98 Offset: 0x24A3A98 VA: 0x24A3A98 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24A3B3C Offset: 0x24A3B3C VA: 0x24A3B3C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }
