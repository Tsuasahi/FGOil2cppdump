	public ServantEntity getSvtEntity(int svtId) { }

	// RVA: 0x1B26390 Offset: 0x1B26390 VA: 0x1B26390
	public ServantLimitEntity getSvtLimitEntity(int svtId, int limitCnt) { }

	// RVA: 0x1B26410 Offset: 0x1B26410 VA: 0x1B26410
	public ServantLimitAddEntity getSvtLimitAddEntity(int svtId, int limitCnt) { }

	// RVA: -1 Offset: -1
	public T getAssetObject<T>(string path, string file) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x219030C Offset: 0x219030C VA: 0x219030C
	|-ServantAssetLoadManager.getAssetObject<object>
	|-ServantAssetLoadManager.getAssetObject<GameObject>
	|-ServantAssetLoadManager.getAssetObject<TextAsset>
	|-ServantAssetLoadManager.getAssetObject<Texture2D>
	*/

	// RVA: 0x1B26510 Offset: 0x1B26510 VA: 0x1B26510
	public string getBattleChrId(int svtId, int limitCount) { }

	// RVA: 0x1B26560 Offset: 0x1B26560 VA: 0x1B26560
	public int getVoiceId(int svtId, int limitCount) { }

	// RVA: 0x1B265C0 Offset: 0x1B265C0 VA: 0x1B265C0
	public int getVoicePrefix(int svtId, int limitCount) { }

	// RVA: 0x1B26620 Offset: 0x1B26620 VA: 0x1B26620
	public static UIStandFigureR loadFigureObject(GameObject parent, int svtId, int limitCount, Face.Type faceType, Action callbackFunc) { }

	// RVA: 0x1B26664 Offset: 0x1B26664 VA: 0x1B26664
	public static string getCommandCardLoadFolderNameDisp(int svtId, int displimitCount) { }

	// RVA: 0x1B26704 Offset: 0x1B26704 VA: 0x1B26704
	public static string getCommandCardLoadFolderName(int svtId, int limitCount) { }

	// RVA: 0x1B267A4 Offset: 0x1B267A4 VA: 0x1B267A4
	public static void preloadCommandCard(int svtId, int limitCount) { }

	// RVA: 0x1B26808 Offset: 0x1B26808 VA: 0x1B26808
	private void preloadCommandCardlocal(int svtId, int limitCount) { }

	// RVA: 0x1B26918 Offset: 0x1B26918 VA: 0x1B26918
	public static UITexture loadCommandCard(UITexture tex, int svtId, int limit, int commandLimit) { }

	// RVA: 0x1B26994 Offset: 0x1B26994 VA: 0x1B26994
	private UITexture loadCommandCardlocal(UITexture tex, int svtId, int limit, int commandLimit) { }

	// RVA: 0x1B26B48 Offset: 0x1B26B48 VA: 0x1B26B48
	public static void unloadCommandCard(int svtId, int limitCount) { }

	// RVA: 0x1B26BAC Offset: 0x1B26BAC VA: 0x1B26BAC
	public void unloadCommandCardlocal(int svtId, int limitCount) { }

	// RVA: 0x1B26CA8 Offset: 0x1B26CA8 VA: 0x1B26CA8
	public static string getStatusImageFolderNameDisp(int svtId, int displimitCount) { }

	// RVA: 0x1B26D48 Offset: 0x1B26D48 VA: 0x1B26D48
	public static string getStatusImageFolderName(int svtId, int limitCount) { }

	// RVA: 0x1B26DE8 Offset: 0x1B26DE8 VA: 0x1B26DE8
	public static void preloadStatusFace(int svtId, int limitCount) { }

	// RVA: 0x1B26E4C Offset: 0x1B26E4C VA: 0x1B26E4C
	private void preloadStatusFacelocal(int svtId, int limitCount) { }

	// RVA: 0x1B26EC8 Offset: 0x1B26EC8 VA: 0x1B26EC8
	public static UITexture loadStatusFace(UITexture tex, int svtID, int limit) { }

	// RVA: 0x1B26F44 Offset: 0x1B26F44 VA: 0x1B26F44
	public UITexture loadStatusFacelocal(UITexture tex, int svtID, int limit) { }

	// RVA: 0x1B270F8 Offset: 0x1B270F8 VA: 0x1B270F8
	public static void unloadStatusFace(int svtId, int limitCount) { }

	// RVA: 0x1B2716C Offset: 0x1B2716C VA: 0x1B2716C
	public void unloadStatusFacelocal(int svtId, int limitCount) { }

	// RVA: 0x1B2727C Offset: 0x1B2727C VA: 0x1B2727C
	public static bool loadNobleName(UITexture tex, int svtId, int limit, int treasureDvcId) { }

	// RVA: 0x1B27308 Offset: 0x1B27308 VA: 0x1B27308
	public bool loadNobleNamelocal(UITexture tex, int svtId, int limit, int treasureDvcId) { }

	// RVA: 0x1B27844 Offset: 0x1B27844 VA: 0x1B27844
	public static void clearServantlist() { }

	// RVA: 0x1B278A0 Offset: 0x1B278A0 VA: 0x1B278A0
	public void clearServantlistlocal() { }

	// RVA: 0x1B27948 Offset: 0x1B27948 VA: 0x1B27948
	public static bool checkLoad() { }

	// RVA: 0x1B279A4 Offset: 0x1B279A4 VA: 0x1B279A4
	public bool checkLoadlocal() { }

	// RVA: 0x1B27A50 Offset: 0x1B27A50 VA: 0x1B27A50
	public void setLoadList(string path) { }

	// RVA: 0x1B26884 Offset: 0x1B26884 VA: 0x1B26884
	public void tryLoadList(string path) { }

	// RVA: 0x1B27B40 Offset: 0x1B27B40 VA: 0x1B27B40
	public void setDownloadList(string path) { }

	// RVA: 0x1B27C94 Offset: 0x1B27C94 VA: 0x1B27C94
	public void downloadAndRelease(string path) { }

	// RVA: 0x1B27DE8 Offset: 0x1B27DE8 VA: 0x1B27DE8
	protected void endLoadAndRelease(AssetData data) { }

	// RVA: 0x1B27E7C Offset: 0x1B27E7C VA: 0x1B27E7C
	protected void endloadList(AssetData data) { }

	// RVA: 0x1B27F88 Offset: 0x1B27F88 VA: 0x1B27F88
	public static void preloadServant(ServantAssetArgs args) { }

	// RVA: 0x1B27FEC Offset: 0x1B27FEC VA: 0x1B27FEC
	public void preloadServantlocal(ServantAssetArgs args) { }

	// RVA: 0x1B28460 Offset: 0x1B28460 VA: 0x1B28460
	public static void unloadServant(ServantAssetArgs args, bool isIgnoreUnload = False) { }

	// RVA: 0x1B284D4 Offset: 0x1B284D4 VA: 0x1B284D4
	public void unloadServantlocal(ServantAssetArgs args, bool isIgnoreUnload = False) { }

	// RVA: 0x1B28B10 Offset: 0x1B28B10 VA: 0x1B28B10
	public static bool IsIgnoreUnloadServant(BattleServantData data) { }

	// RVA: 0x1B28BC4 Offset: 0x1B28BC4 VA: 0x1B28BC4
	public static void preloadServantVoice(int svtId, int limitCount, int overwriteSvtVoiceId = 0) { }

	// RVA: 0x1B28240 Offset: 0x1B28240 VA: 0x1B28240
	public void preloadServantVoicelocal(int svtId, int limitCount, int overwriteSvtVoiceId) { }

	// RVA: 0x1B28C40 Offset: 0x1B28C40 VA: 0x1B28C40
	public static void unloadServantVoice(int svtId, int limitCount, int overwriteSvtVoiceId = 0) { }

	// RVA: 0x1B28A0C Offset: 0x1B28A0C VA: 0x1B28A0C
	public void unloadServantVoicelocal(int svtId, int limitCount, int overwriteSvtVoiceId = 0) { }

	// RVA: 0x1B28CBC Offset: 0x1B28CBC VA: 0x1B28CBC
	public static void preloadSkillAnyVoice(BattleSkillInfoData _skillInfo) { }

	// RVA: 0x1B28D20 Offset: 0x1B28D20 VA: 0x1B28D20
	public void preloadSkillAnyVoiceLocal(BattleSkillInfoData _skillInfo) { }

	// RVA: 0x1B28EAC Offset: 0x1B28EAC VA: 0x1B28EAC
	public static void unloadSkillAnyVoice(BattleSkillInfoData _skillInfo) { }

	// RVA: 0x1B28F08 Offset: 0x1B28F08 VA: 0x1B28F08
	public void unloadSkillAnyVoiceLocal(BattleSkillInfoData _skillInfo) { }

	// RVA: 0x1B2904C Offset: 0x1B2904C VA: 0x1B2904C
	public static void preloadCommandSpellAnyVoice() { }

	// RVA: 0x1B290A8 Offset: 0x1B290A8 VA: 0x1B290A8
	public void preloadCommandSpellAnyVoiceLocal() { }

	// RVA: 0x1B292D0 Offset: 0x1B292D0 VA: 0x1B292D0
	public static void unloadCommandSpellAnyVoice() { }

	// RVA: 0x1B29324 Offset: 0x1B29324 VA: 0x1B29324
	public void unloadCommandSpellAnyVoiceLocal() { }

	// RVA: 0x1B294F4 Offset: 0x1B294F4 VA: 0x1B294F4
	public static string getActorFolderNameFromDisp(int svtId, int displimitCount) { }

	// RVA: 0x1B295E0 Offset: 0x1B295E0 VA: 0x1B295E0
	public static string getActorFolderName(int svtId, int limitCount) { }

	// RVA: 0x1B29694 Offset: 0x1B29694 VA: 0x1B29694
	public static string getActorFolderName(int svtId) { }

	// RVA: 0x1B29734 Offset: 0x1B29734 VA: 0x1B29734
	public static void preloadBattleActor(ServantAssetArgs args, bool isForce = False) { }

	// RVA: 0x1B2813C Offset: 0x1B2813C VA: 0x1B2813C
	public void preloadBattleActorlocal(int svtId, int limitCount, int appearanceId = 0, bool isForce = False) { }

	// RVA: 0x1B297F8 Offset: 0x1B297F8 VA: 0x1B297F8
	public string GetPreloadBattleActorFolderName(int svtId, int limitCount, int appearanceId = 0, bool isForce = False) { }

	// RVA: 0x1B298E4 Offset: 0x1B298E4 VA: 0x1B298E4
	public bool ExistPreloadBattleActor(int svtId, int limitCount, int appearanceId = 0, bool isForce = False) { }

	// RVA: 0x1B29984 Offset: 0x1B29984 VA: 0x1B29984
	public static GameObject loadBattleActor(GameObject parent, int svtId, int limitCount, bool isForce = False) { }

	// RVA: 0x1B29A10 Offset: 0x1B29A10 VA: 0x1B29A10
	private GameObject loadBattleActorlocal(GameObject parent, int svtId, int limitCount, bool isForce = False) { }

	// RVA: 0x1B29CA4 Offset: 0x1B29CA4 VA: 0x1B29CA4
	public static void unloadBattleActor(ServantAssetArgs args) { }

	// RVA: 0x1B288F4 Offset: 0x1B288F4 VA: 0x1B288F4
	public void unloadBattleActorlocal(int svtId, int limitCount, int appearanceId) { }

	// RVA: 0x1B29D58 Offset: 0x1B29D58 VA: 0x1B29D58
	private static Func<Shader, Shader, Shader> GetReplaceDeadShaderFunc(GameObject obj) { }

	// RVA: 0x1B29EF0 Offset: 0x1B29EF0 VA: 0x1B29EF0
	private static Func<Shader, Shader, Shader> GetReplaceChocoShaderFunc(GameObject obj) { }

	// RVA: 0x1B2A088 Offset: 0x1B2A088 VA: 0x1B2A088
	public static void changeDeadShader(GameObject obj) { }

	// RVA: 0x1B2A8F4 Offset: 0x1B2A8F4 VA: 0x1B2A8F4
	public static void changeChocoDeadShader(GameObject obj) { }

	// RVA: 0x1B2B1D4 Offset: 0x1B2B1D4 VA: 0x1B2B1D4
	public static void changeChocoSahder(GameObject obj) { }

	// RVA: 0x1B2B728 Offset: 0x1B2B728 VA: 0x1B2B728
	public static TextAsset loadAnimEvents(int svtId, int limitCount, bool isForce = False) { }

	// RVA: 0x1B2B7A4 Offset: 0x1B2B7A4 VA: 0x1B2B7A4
	public TextAsset loadAnimEventslocal(int svtId, int limitCount, bool isForce) { }

	// RVA: 0x1B2B87C Offset: 0x1B2B87C VA: 0x1B2B87C
	public static GameObject loadNoblePhantasmEffect(int treasureDeviceId, int limit, string name) { }

	// RVA: 0x1B2B8F8 Offset: 0x1B2B8F8 VA: 0x1B2B8F8
	private GameObject loadNoblePhantasmEffectlocal(int treasureDeviceId, int limit, string name) { }

	// RVA: 0x1B2BB00 Offset: 0x1B2BB00 VA: 0x1B2BB00
	public static GameObject loadActorEffectFromActor(int svtId, int limitCount, int weapongroup, string name) { }

	// RVA: 0x1B2BB7C Offset: 0x1B2BB7C VA: 0x1B2BB7C
	private GameObject loadActorEffectlocalFromActor(int svtId, int limitCount, int weapongroup, string name) { }

	// RVA: 0x1B2BC40 Offset: 0x1B2BC40 VA: 0x1B2BC40
	public static GameObject loadEffect(string name, int weapongroup, int effectFolder) { }

	// RVA: 0x1B2BCBC Offset: 0x1B2BCBC VA: 0x1B2BCBC
	public GameObject loadEffectlocal(string name, int weapongroup, int effectFolder) { }

	// RVA: 0x1B2C00C Offset: 0x1B2C00C VA: 0x1B2C00C
	public static GameObject loadCommonEffect(string name) { }

	// RVA: 0x1B2BD70 Offset: 0x1B2BD70 VA: 0x1B2BD70
	public GameObject loadCommonEffectlocal(string name) { }

	// RVA: 0x1B2C068 Offset: 0x1B2C068 VA: 0x1B2C068
	public static void preloadWeaponEffect(int weapongroup, int effectFolder) { }

	// RVA: 0x1B2C304 Offset: 0x1B2C304 VA: 0x1B2C304
	public static GameObject loadWeaponGroupEffect(string name, int weapongroup, int effectFolder) { }

	// RVA: 0x1B2BE7C Offset: 0x1B2BE7C VA: 0x1B2BE7C
	public GameObject loadWeaponGroupEffectlocal(string name, int weapongroup, int effectFolder) { }

	// RVA: 0x1B2C378 Offset: 0x1B2C378 VA: 0x1B2C378
	public static void unloadWeaponGroupEffect(int weapongroup, int effectFolder) { }

	// RVA: 0x1B2C3EC Offset: 0x1B2C3EC VA: 0x1B2C3EC
	public void unloadWeaponGroupEffectlocal(int weapongroup, int effectFolder) { }

	// RVA: 0x1B2C57C Offset: 0x1B2C57C VA: 0x1B2C57C
	public static string[] preloadBattleCommonEffect(int[] effectIdList) { }

	// RVA: 0x1B2C5E0 Offset: 0x1B2C5E0 VA: 0x1B2C5E0
	public string[] preloadBattleCommonEffectLocal(int[] effectIdList) { }

	// RVA: 0x1B2C6B0 Offset: 0x1B2C6B0 VA: 0x1B2C6B0
	public static GameObject loadBattleCommonEffect(string path, string name) { }

	// RVA: 0x1B2C71C Offset: 0x1B2C71C VA: 0x1B2C71C
	public GameObject loadBattleCommonEffectLocal(string path, string name) { }

	// RVA: 0x1B2C7F0 Offset: 0x1B2C7F0 VA: 0x1B2C7F0
	public static void unloadTargetPathAssets(string[] pathList) { }

	// RVA: 0x1B2C854 Offset: 0x1B2C854 VA: 0x1B2C854
	public void unloadTargetPathAssetsLocal(string[] pathList) { }

	// RVA: 0x1B2C8CC Offset: 0x1B2C8CC VA: 0x1B2C8CC
	public void unloadTargetPathAssetLocal(string path) { }

	// RVA: 0x1B2C9D0 Offset: 0x1B2C9D0 VA: 0x1B2C9D0
	protected string getSkillCutInPath(int cutInId) { }

	// RVA: 0x1B2CA70 Offset: 0x1B2CA70 VA: 0x1B2CA70
	protected int getSkillCutInId(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1B2CA90 Offset: 0x1B2CA90 VA: 0x1B2CA90
	public static void preloadSkillCutIn(List<BattleSkillInfoData> skillInfoList) { }

	// RVA: 0x1B2CAF4 Offset: 0x1B2CAF4 VA: 0x1B2CAF4
	public void preloadSkillCutInLocal(List<BattleSkillInfoData> skillInfoList) { }

	// RVA: 0x1B2CBAC Offset: 0x1B2CBAC VA: 0x1B2CBAC
	public void preloadSkillCutInLocal(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1B2CC04 Offset: 0x1B2CC04 VA: 0x1B2CC04
	public static void loadSkillCutIn(BattleSkillInfoData skillInfo, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x1B2CC70 Offset: 0x1B2CC70 VA: 0x1B2CC70
	public void loadSkillCutInLocal(BattleSkillInfoData skillInfo, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x1B2CD18 Offset: 0x1B2CD18 VA: 0x1B2CD18
	public static void unloadSkillCutIn(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1B2CD7C Offset: 0x1B2CD7C VA: 0x1B2CD7C
	public void unloadSkillCutInLocal(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1B2CDD4 Offset: 0x1B2CDD4 VA: 0x1B2CDD4
	public static void preloadActorMotion(int weapongroup) { }

	// RVA: 0x1B2CEA4 Offset: 0x1B2CEA4 VA: 0x1B2CEA4
	public static GameObject loadActorMotion(GameObject parent, int svtId, int weapongroup) { }

	// RVA: 0x1B2CF18 Offset: 0x1B2CF18 VA: 0x1B2CF18
	private GameObject loadActorMotionlocal(GameObject parent, int svtId, int weapongroup) { }

	// RVA: 0x1B2D1A8 Offset: 0x1B2D1A8 VA: 0x1B2D1A8
	public static void unloadActorMotion(int weapongroup) { }

	// RVA: 0x1B2D20C Offset: 0x1B2D20C VA: 0x1B2D20C
	public void unloadActorMotionlocal(int weapongroup) { }

	// RVA: 0x1B2D33C Offset: 0x1B2D33C VA: 0x1B2D33C
	public static SePlayer playBattleVoice(int svtId, int limit, int overwriteSvtVoiceId, string voiceTypeId, float volume, Action callback, int uniqueId = -1, bool isNp = False) { }

	// RVA: 0x1B2D40C Offset: 0x1B2D40C VA: 0x1B2D40C
	public SePlayer playBattleVoicelocal(int svtId, int limit, int overwriteSvtVoiceId, string voiceTypeId, float volume, Action callback, int uniqueId = -1, string targetFileName, bool isNp = False) { }

	// RVA: 0x1B2D7AC Offset: 0x1B2D7AC VA: 0x1B2D7AC
	public string GetPrefixVoiceId(int servantId, int limitCount, string voiceId) { }

	// RVA: 0x1B2D878 Offset: 0x1B2D878 VA: 0x1B2D878
	public void EndPlaySe() { }

	// RVA: 0x1B2D87C Offset: 0x1B2D87C VA: 0x1B2D87C
	public static SePlayer playBattleVoiceSe(int svtId, int limit, int overwriteSvtVoiceId, string fileName, float volume) { }

	// RVA: 0x1B2D918 Offset: 0x1B2D918 VA: 0x1B2D918
	public SePlayer playBattleVoiceSelocal(int svtId, int limit, int overwriteSvtVoiceId, string targetFileName, float volume) { }

	// RVA: 0x1B2DA48 Offset: 0x1B2DA48 VA: 0x1B2DA48
	public static bool ExistsBattleVoice(int svtId, int limit, int overwriteSvtVoiceId, Voice.BATTLE type) { }

	// RVA: 0x1B2DAD4 Offset: 0x1B2DAD4 VA: 0x1B2DAD4
	public bool ExistsBattleVoiceLocal(int svtId, int limit, int overwriteSvtVoiceId, Voice.BATTLE type) { }

	// RVA: 0x1B2DC6C Offset: 0x1B2DC6C VA: 0x1B2DC6C
	public static bool checkBattleVoice(int svtId, int limit, int overwriteSvtVoiceId, string voiceTypeId, bool isNp = False) { }

	// RVA: 0x1B2DD00 Offset: 0x1B2DD00 VA: 0x1B2DD00
	public bool checkBattleVoicelocal(int svtId, int limit, int overwriteSvtVoiceId, string voiceTypeId, bool isNp = False) { }

	// RVA: 0x1B2DEBC Offset: 0x1B2DEBC VA: 0x1B2DEBC
	public static string GetLastVoiceType(int uniqueId) { }

	// RVA: 0x1B2DF20 Offset: 0x1B2DF20 VA: 0x1B2DF20
	public string GetLastVoiceTypeLocal(int uniqueId) { }

	// RVA: 0x1B2DFF0 Offset: 0x1B2DFF0 VA: 0x1B2DFF0
	public static void StopVoice(int uniqueId) { }

	// RVA: 0x1B2E054 Offset: 0x1B2E054 VA: 0x1B2E054
	public void localStopVoice(int uniqueId) { }

	// RVA: 0x1B2E118 Offset: 0x1B2E118 VA: 0x1B2E118
	public static void LoadNoblePhantasm(GameObject parent, int svtId, int limitCount, int treasureDvcId, int treasureDvcLv, ServantAssetLoadManager.onGameObjectLoadComplete callback) { }

	// RVA: 0x1B2E1CC Offset: 0x1B2E1CC VA: 0x1B2E1CC
	public void loadNoblePhantasm(GameObject parent, int svtId, int limitCount, int treasureDvcId, int treasureDvcLv, ServantAssetLoadManager.onGameObjectLoadComplete callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD36448 Offset: 0xD36448 VA: 0xD36448
	// RVA: 0x1B2E1F8 Offset: 0x1B2E1F8 VA: 0x1B2E1F8
	private IEnumerator loadNoblePhantasmCoroutine(GameObject parent, int svtId, int limitCount, int treasureDvcId, int treasureDvcLv, ServantAssetLoadManager.onGameObjectLoadComplete callback) { }

	// RVA: 0x1B2E31C Offset: 0x1B2E31C VA: 0x1B2E31C
	private void LoadBg(USFGOChangeBgEvent[] bgList, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD36458 Offset: 0xD36458 VA: 0xD36458
	// RVA: 0x1B2E348 Offset: 0x1B2E348 VA: 0x1B2E348
	private IEnumerator GetAheadBg(USFGOChangeBgEvent[] bgList, Action callback) { }

	// RVA: 0x1B2E3FC Offset: 0x1B2E3FC VA: 0x1B2E3FC
	public void releaseNoblePhantasm() { }

	// RVA: 0x1B2E5E8 Offset: 0x1B2E5E8 VA: 0x1B2E5E8
	public void UnloadAllAsset() { }

	// RVA: 0x1B2E720 Offset: 0x1B2E720 VA: 0x1B2E720
	public GameObject createShadowEffect(int tp) { }

	// RVA: 0x1B2E8C0 Offset: 0x1B2E8C0 VA: 0x1B2E8C0
	public void DebugPrint(AssetData data) { }

	// RVA: 0x1B2E930 Offset: 0x1B2E930 VA: 0x1B2E930
	public static void unloadAssets() { }

	// RVA: 0x1B2E98C Offset: 0x1B2E98C VA: 0x1B2E98C
	public void unloadAssetsLocal() { }

	// RVA: 0x1B2EB24 Offset: 0x1B2EB24 VA: 0x1B2EB24
	public static string getCameraActionPath(int cameraId) { }

	// RVA: 0x1B2EBC4 Offset: 0x1B2EBC4 VA: 0x1B2EBC4
	public static void preloadCameraAction(int cameraId) { }

	// RVA: 0x1B2EC6C Offset: 0x1B2EC6C VA: 0x1B2EC6C
	public static GameObject loadCameraAction(int cameraId, Transform parent) { }

	// RVA: 0x1B2ECF8 Offset: 0x1B2ECF8 VA: 0x1B2ECF8
	private GameObject loadCameraActionlocal(int cameraId, Transform parent) { }

	// RVA: 0x1B2EF80 Offset: 0x1B2EF80 VA: 0x1B2EF80
	public static void unloadCameraAction(int cameraId) { }

	// RVA: 0x1B2EFDC Offset: 0x1B2EFDC VA: 0x1B2EFDC
	public void unloadCameraActionlocal(int cameraId) { }

	// RVA: 0x1B2F07C Offset: 0x1B2F07C VA: 0x1B2F07C
	public static UITexture loadCommandCodeTexture(UITexture tex, long userCommandCodeId) { }

	// RVA: 0x1B2F24C Offset: 0x1B2F24C VA: 0x1B2F24C
	public static UITexture loadCommandCodeTexture(UITexture tex, int commandCodeId) { }

	// RVA: 0x1B2F2C0 Offset: 0x1B2F2C0 VA: 0x1B2F2C0
	private UITexture loadCommandCodeTextureLocal(UITexture tex, int commandCodeId) { }

	// RVA: 0x1B2F0F0 Offset: 0x1B2F0F0 VA: 0x1B2F0F0
	private UITexture loadCommandCodeTextureLocal(UITexture tex, long userCommandCodeId) { }

	// RVA: 0x1B28388 Offset: 0x1B28388 VA: 0x1B28388
	private void preloadCommandCodeTextureLocal(int[] commandCodeIds) { }

	// RVA: 0x1B2F450 Offset: 0x1B2F450 VA: 0x1B2F450
	public static string GetCommandCodeFolderName(int commandCodeId) { }

	// RVA: 0x1B287A0 Offset: 0x1B287A0 VA: 0x1B287A0
	private bool IsKeepAssetAvailable() { }

	// RVA: 0x1B2F4F0 Offset: 0x1B2F4F0 VA: 0x1B2F4F0
	public void EndRetryTransition() { }

	// RVA: 0x1B2F708 Offset: 0x1B2F708 VA: 0x1B2F708
	public bool CheckLoadList(string path) { }

	// RVA: 0x1B2F778 Offset: 0x1B2F778 VA: 0x1B2F778
	public static int GetNPSeqIdFromCachedAssetName() { }

	// RVA: 0x1B2F834 Offset: 0x1B2F834 VA: 0x1B2F834
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD36468 Offset: 0xD36468 VA: 0xD36468
	// RVA: 0x1B2F8F0 Offset: 0x1B2F8F0 VA: 0x1B2F8F0
	private void <preloadServantVoicelocal>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD36478 Offset: 0xD36478 VA: 0xD36478
	// RVA: 0x1B2F900 Offset: 0x1B2F900 VA: 0x1B2F900
	private void <preloadSkillAnyVoiceLocal>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xD36488 Offset: 0xD36488 VA: 0xD36488
	// RVA: 0x1B2F910 Offset: 0x1B2F910 VA: 0x1B2F910
	private void <preloadCommandSpellAnyVoiceLocal>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xD36498 Offset: 0xD36498 VA: 0xD36498
	// RVA: 0x1B2F920 Offset: 0x1B2F920 VA: 0x1B2F920
	private static Shader <GetReplaceDeadShaderFunc>m__3(Shader targetShader, Shader defaultShader) { }

	[CompilerGeneratedAttribute] // RVA: 0xD364A8 Offset: 0xD364A8 VA: 0xD364A8
	// RVA: 0x1B2F928 Offset: 0x1B2F928 VA: 0x1B2F928
	private static Shader <GetReplaceChocoShaderFunc>m__4(Shader targetShader, Shader defaultShader) { }
}

// Namespace: 
public enum ServantAssetLoadManager.RetryStatus // TypeDefIndex: 6295
{
	// Fields
	public int value__; // 0x0
	public const ServantAssetLoadManager.RetryStatus None = 0;
	public const ServantAssetLoadManager.RetryStatus RetryButtonPressed = 1;
	public const ServantAssetLoadManager.RetryStatus SupporterListSelected = 2;
	public const ServantAssetLoadManager.RetryStatus Forbid = 3;
	public const ServantAssetLoadManager.RetryStatus RetryBattleStarted = 4;
}

// Namespace: 
public sealed class ServantAssetLoadManager.onGameObjectLoadComplete : MulticastDelegate // TypeDefIndex: 6296
{
	// Methods

	// RVA: 0x1B30E9C Offset: 0x1B30E9C VA: 0x1B30E9C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B30690 Offset: 0x1B30690 VA: 0x1B30690 Slot: 11
	public virtual void Invoke(GameObject obj) { }

	// RVA: 0x1B30EAC Offset: 0x1B30EAC VA: 0x1B30EAC Slot: 12
	public virtual IAsyncResult BeginInvoke(GameObject obj, AsyncCallback callback, object object) { }

	// RVA: 0x1B30ED0 Offset: 0x1B30ED0 VA: 0x1B30ED0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE860 Offset: 0xCAE860 VA: 0xCAE860
private sealed class ServantAssetLoadManager.<playBattleVoicelocal>c__AnonStorey2 // TypeDefIndex: 6297
{
	// Fields
	internal Action callback; // 0x10
	internal ServantAssetLoadManager $this; // 0x18

	// Methods

	// RVA: 0x1B2D7A4 Offset: 0x1B2D7A4 VA: 0x1B2D7A4
	public void .ctor() { }

	// RVA: 0x1B30E58 Offset: 0x1B30E58 VA: 0x1B30E58
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE870 Offset: 0xCAE870 VA: 0xCAE870
private sealed class ServantAssetLoadManager.<loadNoblePhantasmCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6298
{
	// Fields
	internal int treasureDvcId; // 0x10
	internal TreasureDvcEntity <treasureEnt>__0; // 0x18
	internal int limitCount; // 0x20
	internal int <seqId>__1; // 0x24
	internal string <nobleDataPath>__0; // 0x28
	internal int svtId; // 0x30
	internal GameObject parent; // 0x38
	internal List<int> <effectIdList>__2; // 0x40
	internal TreasureDvcLvMaster <treasureLvMst>__2; // 0x48
	internal int treasureDvcLv; // 0x50
	internal TreasureDvcLvEntity <treasureLvEnt>__2; // 0x58
	internal USFGOActorBattleActionEvent[] <actionEvents>__2; // 0x60
	internal string[] <loadedPathList>__2; // 0x68
	internal ServantAssetLoadManager.onGameObjectLoadComplete callback; // 0x70
	internal ServantAssetLoadManager $this; // 0x78
	internal object $current; // 0x80
	internal bool $disposing; // 0x88
	internal int $PC; // 0x8C
	private ServantAssetLoadManager.<loadNoblePhantasmCoroutine>c__Iterator0.<loadNoblePhantasmCoroutine>c__AnonStorey3 $locvar2; // 0x90

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45C74 Offset: 0xD45C74 VA: 0xD45C74
	// RVA: 0x1B2E314 Offset: 0x1B2E314 VA: 0x1B2E314
	public void .ctor() { }

	// RVA: 0x1B2FE14 Offset: 0x1B2FE14 VA: 0x1B2FE14 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45C84 Offset: 0xD45C84 VA: 0xD45C84
	// RVA: 0x1B30A30 Offset: 0x1B30A30 VA: 0x1B30A30 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45C94 Offset: 0xD45C94 VA: 0xD45C94
	// RVA: 0x1B30A38 Offset: 0x1B30A38 VA: 0x1B30A38 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45CA4 Offset: 0xD45CA4 VA: 0xD45CA4
	// RVA: 0x1B30A40 Offset: 0x1B30A40 VA: 0x1B30A40 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45CB4 Offset: 0xD45CB4 VA: 0xD45CB4
	// RVA: 0x1B30A54 Offset: 0x1B30A54 VA: 0x1B30A54 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class ServantAssetLoadManager.<loadNoblePhantasmCoroutine>c__Iterator0.<loadNoblePhantasmCoroutine>c__AnonStorey3 // TypeDefIndex: 6299
{
	// Fields
	internal bool isNext; // 0x10
	internal string sequencePath; // 0x18
	internal GameObject sequence; // 0x20
	internal GameObject parent; // 0x28
	internal ServantAssetLoadManager.<loadNoblePhantasmCoroutine>c__Iterator0 <>f__ref$0; // 0x30

	// Methods

	// RVA: 0x1B30688 Offset: 0x1B30688 VA: 0x1B30688
	public void .ctor() { }

	// RVA: 0x1B30ABC Offset: 0x1B30ABC VA: 0x1B30ABC
	internal void <>m__0(AssetData data) { }

	// RVA: 0x1B30B10 Offset: 0x1B30B10 VA: 0x1B30B10
	internal void <>m__1(AssetData assetData) { }

	// RVA: 0x1B30E4C Offset: 0x1B30E4C VA: 0x1B30E4C
	internal void <>m__2() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE880 Offset: 0xCAE880 VA: 0xCAE880
private sealed class ServantAssetLoadManager.<GetAheadBg>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6300
{
	// Fields
	internal USFGOChangeBgEvent[] bgList; // 0x10
	internal List<USFGOChangeBgEvent> <bgAheadList>__1; // 0x18
	internal USFGOChangeBgEvent[] $locvar0; // 0x20
	internal int $locvar1; // 0x28
	internal List.Enumerator<USFGOChangeBgEvent> $locvar2; // 0x30
	internal Action callback; // 0x48
	internal ServantAssetLoadManager $this; // 0x50
	internal object $current; // 0x58
	internal bool $disposing; // 0x60
	internal int $PC; // 0x64

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD45CC4 Offset: 0xD45CC4 VA: 0xD45CC4
	// RVA: 0x1B2E3F4 Offset: 0x1B2E3F4 VA: 0x1B2E3F4
	public void .ctor() { }

	// RVA: 0x1B2F930 Offset: 0x1B2F930 VA: 0x1B2F930 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45CD4 Offset: 0xD45CD4 VA: 0xD45CD4
	// RVA: 0x1B2FD08 Offset: 0x1B2FD08 VA: 0x1B2FD08 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45CE4 Offset: 0xD45CE4 VA: 0xD45CE4
	// RVA: 0x1B2FD10 Offset: 0x1B2FD10 VA: 0x1B2FD10 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45CF4 Offset: 0xD45CF4 VA: 0xD45CF4
	// RVA: 0x1B2FD18 Offset: 0x1B2FD18 VA: 0x1B2FD18 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD45D04 Offset: 0xD45D04 VA: 0xD45D04
	// RVA: 0x1B2FD2C Offset: 0x1B2FD2C VA: 0x1B2FD2C Slot: 6
	public void Reset() { }

	// RVA: 0x1B2FD94 Offset: 0x1B2FD94 VA: 0x1B2FD94
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public class ShiningIconManager : SingletonMonoBehaviour<ShiningIconManager> // TypeDefIndex: 6301
{
	// Fields
	[SerializeField] // RVA: 0xCBF598 Offset: 0xCBF598 VA: 0xCBF598
	protected UIAtlas shiningIconAtlas; // 0x18

	// Methods

	// RVA: 0x18937D8 Offset: 0x18937D8 VA: 0x18937D8
	public void .ctor() { }

	// RVA: 0x1893828 Offset: 0x1893828 VA: 0x1893828
	public static void Reboot() { }

	// RVA: 0x189382C Offset: 0x189382C VA: 0x189382C
	public static void Initialize() { }
}

// Namespace: 
public enum SpawnerOverflowPolicy // TypeDefIndex: 6302
{
	// Fields
	public int value__; // 0x0
	public const SpawnerOverflowPolicy Instantiate = 0;
	public const SpawnerOverflowPolicy Recycle = 1;
}

// Namespace: 
public class Spawner : SingletonMonoBehaviour<Spawner> // TypeDefIndex: 6303
{
	// Fields
	private Spawner.ResourcePrecacher resourcePrecacher; // 0x18
	private Queue<Spawner.RequestByPath> requestsByPath; // 0x20
	private Spawner.SpawnerImpl spawnerImpl; // 0x28
	private const int DefaultCacheSize = 0;

	// Methods

	// RVA: 0x19570AC Offset: 0x19570AC VA: 0x19570AC
	public void .ctor() { }

	// RVA: 0x19570FC Offset: 0x19570FC VA: 0x19570FC
	private void Awake() { }

	// RVA: 0x195734C Offset: 0x195734C VA: 0x195734C
	public void Precache(string path) { }

	// RVA: 0x1957358 Offset: 0x1957358 VA: 0x1957358
	public void Precache(string path, int cacheSize) { }

	// RVA: 0x1957360 Offset: 0x1957360 VA: 0x1957360
	public void Precache(string path, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x1957588 Offset: 0x1957588 VA: 0x1957588
	public void Precache(Object prefab) { }

	// RVA: 0x1957594 Offset: 0x1957594 VA: 0x1957594
	public void Precache(Object prefab, int cacheSize) { }

	// RVA: 0x195759C Offset: 0x195759C VA: 0x195759C
	public void Precache(Object prefab, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x19576D0 Offset: 0x19576D0 VA: 0x19576D0
	public bool HasCached() { }

	// RVA: 0x1957BD8 Offset: 0x1957BD8 VA: 0x1957BD8
	public GameObject Spawn(string path) { }

	// RVA: 0x1957D34 Offset: 0x1957D34 VA: 0x1957D34
	public GameObject Spawn(string path, Vector3 position, Quaternion rotation) { }

	// RVA: 0x1957C24 Offset: 0x1957C24 VA: 0x1957C24
	public GameObject Spawn(Object prefab) { }

	// RVA: 0x1957DD8 Offset: 0x1957DD8 VA: 0x1957DD8
	public GameObject Spawn(Object prefab, Vector3 position, Quaternion rotation) { }

	// RVA: 0x19581A4 Offset: 0x19581A4 VA: 0x19581A4
	public void Despawn(GameObject objectToDespawn, bool sendsDespawn = True) { }

	// RVA: 0x195867C Offset: 0x195867C VA: 0x195867C
	public bool ContainCache(GameObject obj) { }
}

// Namespace: 
private struct Spawner.RequestByPath // TypeDefIndex: 6304
{
	// Fields
	public string path; // 0x0
	public int cacheSize; // 0x8
	public SpawnerOverflowPolicy overflowPolicy; // 0xC

	// Methods

	// RVA: 0xDC410C Offset: 0xDC410C VA: 0xDC410C
	public void .ctor(string path, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }
}

// Namespace: 
private class Spawner.ResourcePrecacher // TypeDefIndex: 6305
{
	// Fields
	private Dictionary<string, Spawner.ResourcePrecacher.Element> elements; // 0x10

	// Properties
	public ICollection<string> Paths { get; }

	// Methods

	// RVA: 0x19571D0 Offset: 0x19571D0 VA: 0x19571D0
	public void .ctor() { }

	// RVA: 0x19574AC Offset: 0x19574AC VA: 0x19574AC
	public void Precache(string path) { }

	// RVA: 0x1958728 Offset: 0x1958728 VA: 0x1958728
	private void OnDestroy() { }

	// RVA: 0x195743C Offset: 0x195743C VA: 0x195743C
	public bool HasElement(string path) { }

	// RVA: 0x19588E0 Offset: 0x19588E0 VA: 0x19588E0
	public bool HasElements() { }

	// RVA: 0x19577F4 Offset: 0x19577F4 VA: 0x19577F4
	public bool HasCached() { }

	// RVA: 0x195894C Offset: 0x195894C VA: 0x195894C
	public ICollection<string> get_Paths() { }

	// RVA: 0x1957980 Offset: 0x1957980 VA: 0x1957980
	public Object GetResource(string path) { }

	// RVA: 0x195872C Offset: 0x195872C VA: 0x195872C
	public void UnloadAndClear() { }
}

// Namespace: 
private class Spawner.ResourcePrecacher.Element // TypeDefIndex: 6306
{
	// Fields
	public ResourceRequest request; // 0x10
	public Object asset; // 0x18

	// Methods

	// RVA: 0x1958720 Offset: 0x1958720 VA: 0x1958720
	public void .ctor() { }
}

// Namespace: 
private class Spawner.SpawnerImpl // TypeDefIndex: 6307
{
	// Fields
	private Transform parent; // 0x10
	private Dictionary<Object, Spawner.SpawnerImpl.ObjectCache> caches; // 0x18
	private Dictionary<GameObject, bool> managedObjects; // 0x20
	private HashSet<GameObject> destroyedUnmanagedObjects; // 0x28
	private Dictionary<Object, int> serialNumbers; // 0x30
	private const int InitialCapacityOfCaches = 32;
	private const int CacheCountPerFrame = 32;
	private const float GCInterval = 59;
	private float lastGCAt; // 0x38
	private static Queue<Transform> q; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCBF5A8 Offset: 0xCBF5A8 VA: 0xCBF5A8
	private static Func<Transform, GameObject> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCBF5B8 Offset: 0xCBF5B8 VA: 0xCBF5B8
	private static Predicate<GameObject> <>f__am$cache1; // 0x10

	// Methods

	// RVA: 0x1957244 Offset: 0x1957244 VA: 0x1957244
	public void .ctor(Transform parent) { }

	// RVA: 0x19575E8 Offset: 0x19575E8 VA: 0x19575E8
	public void Precache(Object prefab, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x1957A64 Offset: 0x1957A64 VA: 0x1957A64
	public bool HasCached() { }

	// RVA: 0x1957E68 Offset: 0x1957E68 VA: 0x1957E68
	public GameObject Spawn(Object prefab, Vector3 position, Quaternion rotation, bool overridesPositionAndRotation) { }

	// RVA: 0x1958ECC Offset: 0x1958ECC VA: 0x1958ECC
	private void Number(Object prefab, GameObject obj) { }

	// RVA: 0x1959028 Offset: 0x1959028 VA: 0x1959028
	private static List<Transform> BreadthFirstSearch(Transform root) { }

	// RVA: 0x19581E8 Offset: 0x19581E8 VA: 0x19581E8
	public void Despawn(GameObject objectToDespawn, bool sendsDespawn) { }

	// RVA: 0x1959388 Offset: 0x1959388 VA: 0x1959388
	private void DeactivateCachedObject(GameObject obj) { }

	// RVA: 0x1959450 Offset: 0x1959450 VA: 0x1959450
	private void DestroyUnmanagedObject(GameObject obj) { }

	// RVA: 0x1959528 Offset: 0x1959528 VA: 0x1959528
	private void GC() { }

	// RVA: 0x195928C Offset: 0x195928C VA: 0x195928C
	public bool IsAlive(GameObject obj) { }

	// RVA: 0x19586B0 Offset: 0x19586B0 VA: 0x19586B0
	public bool ContainCache(Object obj) { }

	// RVA: 0x195963C Offset: 0x195963C VA: 0x195963C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD364B8 Offset: 0xD364B8 VA: 0xD364B8
	// RVA: 0x19596B0 Offset: 0x19596B0 VA: 0x19596B0
	private static GameObject <Despawn>m__0(Transform x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD364C8 Offset: 0xD364C8 VA: 0xD364C8
	// RVA: 0x19596DC Offset: 0x19596DC VA: 0x19596DC
	private bool <Despawn>m__1(GameObject x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD364D8 Offset: 0xD364D8 VA: 0xD364D8
	// RVA: 0x195974C Offset: 0x195974C VA: 0x195974C
	private static bool <GC>m__2(GameObject x) { }
}

// Namespace: 
private class Spawner.SpawnerImpl.ObjectCache // TypeDefIndex: 6308
{
	// Fields
	private Spawner.SpawnerImpl spawnerImpl; // 0x10
	private Object prefab; // 0x18
	private int cacheSize; // 0x20
	private SpawnerOverflowPolicy overflowPolicy; // 0x24
	private GameObject[] objects; // 0x28
	private int cacheIndex; // 0x30
	private Vector3 defaultLocalPosition; // 0x34
	private Quaternion defaultLocalRotation; // 0x40
	private Vector3 defaultLocalScale; // 0x50

	// Properties
	public int CacheSize { get; }
	public bool IsInitialized { get; }

	// Methods

	// RVA: 0x19589AC Offset: 0x19589AC VA: 0x19589AC
	public void .ctor(Spawner.SpawnerImpl spawnerImpl, Object prefab, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x1958C6C Offset: 0x1958C6C VA: 0x1958C6C
	public int get_CacheSize() { }

	// RVA: 0x19589F8 Offset: 0x19589F8 VA: 0x19589F8
	public bool get_IsInitialized() { }

	// RVA: 0x1958A08 Offset: 0x1958A08 VA: 0x1958A08
	public void Initialize() { }

	// RVA: 0x1958C74 Offset: 0x1958C74 VA: 0x1958C74
	public GameObject GetNextObjectInCache() { }
}

// Namespace: 
public class StandFigureCamera : MonoBehaviour // TypeDefIndex: 6309
{
	// Fields
	[SerializeField] // RVA: 0xCBF5C8 Offset: 0xCBF5C8 VA: 0xCBF5C8
	protected StandFigureManager manager; // 0x18
	protected StandFigureCamera.State state; // 0x20
	protected RenderTexture recycleTexture; // 0x28

	// Methods

	// RVA: 0x1D000B4 Offset: 0x1D000B4 VA: 0x1D000B4
	public void .ctor() { }

	// RVA: 0x1D000BC Offset: 0x1D000BC VA: 0x1D000BC
	public bool Request(RenderTexture recycleTexture) { }

	// RVA: 0x1D002DC Offset: 0x1D002DC VA: 0x1D002DC
	protected void OnPreRender() { }

	// RVA: 0x1D002F4 Offset: 0x1D002F4 VA: 0x1D002F4
	protected void OnPostRender() { }
}

// Namespace: 
protected enum StandFigureCamera.State // TypeDefIndex: 6310
{
	// Fields
	public int value__; // 0x0
	public const StandFigureCamera.State IDLE = 0;
	public const StandFigureCamera.State START = 1;
	public const StandFigureCamera.State RENDER = 2;
	public const StandFigureCamera.State SEND = 3;
	public const StandFigureCamera.State ERROR = 4;
}

// Namespace: 
public class StandFigureManager : SingletonMonoBehaviour<StandFigureManager> // TypeDefIndex: 6311
{
	// Fields
	[SerializeField] // RVA: 0xCBF5D8 Offset: 0xCBF5D8 VA: 0xCBF5D8
	protected GameObject standFigureMPrefab; // 0x18
	[SerializeField] // RVA: 0xCBF5E8 Offset: 0xCBF5E8 VA: 0xCBF5E8
	protected GameObject standFigureRPrefab; // 0x20
	[SerializeField] // RVA: 0xCBF5F8 Offset: 0xCBF5F8 VA: 0xCBF5F8
	protected UIStandFigureRender standFigureRender; // 0x28
	[SerializeField] // RVA: 0xCBF608 Offset: 0xCBF608 VA: 0xCBF608
	protected StandFigureCamera standFigureCamera; // 0x30
	protected Queue<StandFigureRenderWaitStatus> renderWaitList; // 0x38
	protected StandFigureRenderWaitStatus renderInfo; // 0x40
	protected bool isRenderWait; // 0x48

	// Methods

	// RVA: 0x1D0057C Offset: 0x1D0057C VA: 0x1D0057C
	public void .ctor() { }

	// RVA: 0x1D005F4 Offset: 0x1D005F4 VA: 0x1D005F4
	public static string GetAssetName(int svtId, int limitCount, int lv) { }

	// RVA: 0x1D006A4 Offset: 0x1D006A4 VA: 0x1D006A4
	public static string GetAssetName(int svtId, int imageLimitCount) { }

	// RVA: 0x1D0071C Offset: 0x1D0071C VA: 0x1D0071C
	public static string GetAssetName(int id) { }

	// RVA: 0x1D00784 Offset: 0x1D00784 VA: 0x1D00784
	public static string GetAssetNameByForm(int svtId, int imageLimitCount, int formId) { }

	// RVA: 0x1D00804 Offset: 0x1D00804 VA: 0x1D00804
	public static void DownloadAsset(int svtId, int limitCount, int lv, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x1D008C8 Offset: 0x1D008C8 VA: 0x1D008C8
	public static void DownloadAsset(int svtId, int imageLimitCount, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x1D0095C Offset: 0x1D0095C VA: 0x1D0095C
	public static void LoadAsset(int svtId, int limitCount, int lv, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x1D00A20 Offset: 0x1D00A20 VA: 0x1D00A20
	public static void LoadAsset(int svtId, int imageLimitCount, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x1D00AB4 Offset: 0x1D00AB4 VA: 0x1D00AB4
	public static void ReleaseAsset(int svtId, int limitCount, int lv) { }

	// RVA: 0x1D00B6C Offset: 0x1D00B6C VA: 0x1D00B6C
	public static void ReleaseAsset(int svtId, int imageLimitCount) { }

	// RVA: 0x1D00BF4 Offset: 0x1D00BF4 VA: 0x1D00BF4
	public static UIStandFigureM CreateMeshPrefab(GameObject parent) { }

	// RVA: 0x1D00F34 Offset: 0x1D00F34 VA: 0x1D00F34
	public static UIStandFigureM CreateMeshPrefab(GameObject parent, int svtId, int limitCount, int lv, Face.Type faceType, int panelDepth, Action callbackFunc) { }

