	[CompilerGeneratedAttribute] // RVA: 0xC7CEC4 Offset: 0xC7CEC4 VA: 0xC7CEC4
	[DebuggerBrowsableAttribute] // RVA: 0xC7CEC4 Offset: 0xC7CEC4 VA: 0xC7CEC4
	private MapControl.QuestInfo <quest_info>k__BackingField; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC7CF00 Offset: 0xC7CF00 VA: 0xC7CF00
	[DebuggerBrowsableAttribute] // RVA: 0xC7CF00 Offset: 0xC7CF00 VA: 0xC7CF00
	private GameObject <black_mark_prefab>k__BackingField; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC7CF3C Offset: 0xC7CF3C VA: 0xC7CF3C
	[DebuggerBrowsableAttribute] // RVA: 0xC7CF3C Offset: 0xC7CF3C VA: 0xC7CF3C
	private GameObject <white_mark_prefab>k__BackingField; // 0x88

	// Properties
	public QuestBoardListViewItem.InfoKind info_kind { get; set; }
	public MapControl.QuestInfo quest_info { get; set; }
	public GameObject black_mark_prefab { get; set; }
	public GameObject white_mark_prefab { get; set; }

	// Methods

	// RVA: 0x15BD670 Offset: 0x15BD670 VA: 0x15BD670
	private void .ctor() { }

	// RVA: 0x15BD678 Offset: 0x15BD678 VA: 0x15BD678
	public void .ctor(int index, QuestBoardListViewItem.InfoKind ikind, MapControl.QuestInfo qinf, GameObject blackMarkPrefab, GameObject whiteMarkPrefab) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3AC0 Offset: 0xCD3AC0 VA: 0xCD3AC0
	// RVA: 0x15BD6E8 Offset: 0x15BD6E8 VA: 0x15BD6E8
	public QuestBoardListViewItem.InfoKind get_info_kind() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3AD0 Offset: 0xCD3AD0 VA: 0xCD3AD0
	// RVA: 0x15BD6C8 Offset: 0x15BD6C8 VA: 0x15BD6C8
	private void set_info_kind(QuestBoardListViewItem.InfoKind value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3AE0 Offset: 0xCD3AE0 VA: 0xCD3AE0
	// RVA: 0x15BD6F0 Offset: 0x15BD6F0 VA: 0x15BD6F0
	public MapControl.QuestInfo get_quest_info() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3AF0 Offset: 0xCD3AF0 VA: 0xCD3AF0
	// RVA: 0x15BD6D0 Offset: 0x15BD6D0 VA: 0x15BD6D0
	private void set_quest_info(MapControl.QuestInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B00 Offset: 0xCD3B00 VA: 0xCD3B00
	// RVA: 0x15BD6F8 Offset: 0x15BD6F8 VA: 0x15BD6F8
	public GameObject get_black_mark_prefab() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B10 Offset: 0xCD3B10 VA: 0xCD3B10
	// RVA: 0x15BD6D8 Offset: 0x15BD6D8 VA: 0x15BD6D8
	private void set_black_mark_prefab(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B20 Offset: 0xCD3B20 VA: 0xCD3B20
	// RVA: 0x15BD700 Offset: 0x15BD700 VA: 0x15BD700
	public GameObject get_white_mark_prefab() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B30 Offset: 0xCD3B30 VA: 0xCD3B30
	// RVA: 0x15BD6E0 Offset: 0x15BD6E0 VA: 0x15BD6E0
	private void set_white_mark_prefab(GameObject value) { }
}

// Namespace: 
public enum QuestBoardListViewItem.InfoKind // TypeDefIndex: 11145
{
	// Fields
	public int value__; // 0x0
	public const QuestBoardListViewItem.InfoKind AREA = 0;
	public const QuestBoardListViewItem.InfoKind MAP = 1;
	public const QuestBoardListViewItem.InfoKind STORY = 2;
	public const QuestBoardListViewItem.InfoKind HERO = 3;
	public const QuestBoardListViewItem.InfoKind CALDEA = 4;
	public const QuestBoardListViewItem.InfoKind WARBOARD = 5;
	public const QuestBoardListViewItem.InfoKind SIZEOF = 6;
}

// Namespace: 
public class QuestBoardListViewItemDraw : MonoBehaviour // TypeDefIndex: 11146
{
	// Fields
	public static readonly int POS_Y_ITVL_AREA; // 0x0
	public static readonly int POS_Y_ITVL_SHORTCUT; // 0x4
	public static readonly int POS_Y_ITVL_QUEST; // 0x8
	public static readonly int CLIP_W_DEFAULT; // 0xC
	public static readonly int CLIP_W_AREA; // 0x10
	public static readonly int CLIP_RANGE_MARGIN; // 0x14
	public static readonly int SCRL_OBJ_DUMMY_NUM; // 0x18
	private static readonly int TITLE_LEVEL_BASE_X; // 0x1C
	private static readonly int PHASE_NORMAL_MAX; // 0x20
	private static readonly int PHASE_EXTRA_MAX; // 0x24
	public static readonly int TITLE_LABEL_BASE_WIDTH; // 0x28
	private static readonly Color CAMPAIGN_COST_COLOR; // 0x2C
	private static readonly Color OVER_COST_COLOR; // 0x3C
	private static readonly Vector3 NEW_POS_AREA; // 0x4C
	private static readonly Vector3 NEW_POS_SHORTCUT; // 0x58
	private static readonly Vector3 NEW_POS_QUEST; // 0x64
	private static readonly Vector3 NEW_POS_QUEST_NEXT; // 0x70
	private static readonly int NEW_W_DEFAULT; // 0x7C
	private static readonly int NEW_H_DEFAULT; // 0x80
	private static readonly int NEW_W_AREA; // 0x84
	private static readonly int NEW_H_AREA; // 0x88
	private static readonly Vector3 CLEAR_POS_AREA; // 0x8C
	private static readonly Vector3 CLEAR_POS_QUEST; // 0x98
	private static readonly float NEXT_POS_X_AREA_L; // 0xA4
	private static readonly float NEXT_POS_X_AREA_R; // 0xA8
	private static readonly float NEXT_POS_X_QUEST; // 0xAC
	private static readonly Vector3 PREV_POS_QUEST; // 0xB0
	private static readonly Vector3 PREV_POS_QUEST_NEXT; // 0xBC
	private static readonly Vector3 LINE_ST_POS_AREA; // 0xC8
	private static readonly Vector3 LINE_ST_POS_SHORTCUT; // 0xD4
	private static readonly Vector3 COST_OBJ_POS; // 0xE0
	private static readonly Vector3 COST_OBJ_POS_WAR_BOARD; // 0xEC
	private static readonly int COST_BG_WIDTH_SINGLE; // 0xF8
	private static readonly int COST_BG_WIDTH_DOUBLE; // 0xFC
	private static readonly int COST_BG_WIDTH_TLIPLE_FOR_ALL_ITEM; // 0x100
	private static readonly int COST_BG_WIDTH_WAR_BOARD; // 0x104
	private static readonly int COST_BG_WIDTH_DOUBLE_QP; // 0x108
	private static readonly string COST_BG_ITEM; // 0x110
	private static readonly string COST_BG_QP; // 0x118
	private static readonly Vector3 COST_1_ICON_AP_POS; // 0x120
	private static readonly Vector3 COST_1_ICON_AP_POS_WAR_BOARD; // 0x12C
	private static readonly Vector3 COST_1_LABEL_AP_POS; // 0x138
	private static readonly Vector3 COST_1_LABEL_AP_POS_WAR_BOARD; // 0x144
	private static readonly int COST_2_ICON_NORMAL_POSITION_X; // 0x150
	private static readonly int COST_2_ICON_QP_POSITION_X; // 0x154
	private static readonly int COST_2_LABEL_NORMAL_POSITION_X; // 0x158
	private static readonly int COST_2_LABEL_QP_POSITION_X; // 0x15C
	private static readonly int COST_1_LABEL_NORMAL_POSITION_X_FOR_ALL_ITEM; // 0x160
	private static readonly int COST_2_ICON_NORMAL_POSITION_X_FOR_ALL_ITEM; // 0x164
	private static readonly int COST_2_LABEL_NORMAL_POSITION_X_FOR_ALL_ITEM; // 0x168
	private static readonly int COST_3_ICON_NORMAL_POSITION_X_FOR_ALL_ITEM; // 0x16C
	private static readonly int COST_3_LABEL_NORMAL_POSITION_X_FOR_ALL_ITEM; // 0x170
	private static readonly float COST_1_LABEL_DIGIT_3_SCALE_X; // 0x174
	private static readonly int COST_1_LABEL_DEFAULT_WIDTH; // 0x178
	private static readonly int COST_2_LABEL_DEFAULT_WIDTH; // 0x17C
	private static readonly int COST_3_LABEL_DEFAULT_WIDTH; // 0x180
	private static readonly float COST_LABEL_WIDTH_FOR_THREE_ITEM; // 0x184
	private static readonly float COST_2_LABEL_DIGIT_8_SCALE_X; // 0x188
	private static readonly float COST_2_LABEL_DIGIT_9_SCALE_X; // 0x18C
	private static readonly int COST_LABEL_DEFAULT_SPACING; // 0x190
	private static readonly int COST_LABEL_SPACING_FOR_THREE_ITEM; // 0x194
	private static readonly Vector3 SHOHI_SP_POS; // 0x198
	private static readonly Vector3 SHOHI_SP_POS_WAR_BOARD; // 0x1A4
	private static readonly string SHOHI_SP_NAME; // 0x1B0
	private static readonly string SHOHI_SP_NAME_WAR_BOARD; // 0x1B8
	private static readonly string QUEST_BOARD_COSTNAME; // 0x1C0
	private static readonly int QUEST_BOARD_PHASE_INTERVAL; // 0x1C8
	private static readonly int QUEST_BOARD_PHASE_LOOF_INTERVAL; // 0x1CC
	private static readonly int QUEST_BOARD_PHASE_EX_INTERVAL; // 0x1D0
	private static readonly int QUEST_BOARD_PHASE_EX_LOOF_INTERVAL; // 0x1D4
	private static readonly Vector3 CHALLENGE_OBJ_POS_SINGLE; // 0x1D8
	private static readonly Vector3 CHALLENGE_OBJ_POS_DOUBLE; // 0x1E4
	private static readonly Vector3 PHASE_OBJ_POS_SINGLE; // 0x1F0
	private static readonly Vector3 PHASE_OBJ_POS_DOUBLE; // 0x1FC
	private static readonly Vector3 PHASE_OBJ_POS_DOUBLE_QP; // 0x208
	private static readonly Vector3 PHASE_OBJ_POS_TRIPLE_ITEM; // 0x214
	private static readonly Vector3 PHASE_STR_POS_SINGLE; // 0x220
	private static readonly Vector3 PHASE_STR_POS_DOUBLE; // 0x22C
	private static readonly Vector3 PHASE_STR_POS_DOUBLE_QP; // 0x238
	private static readonly Vector3 PHASE_STR_POS_TRIPLE_ITEM; // 0x244
	private static readonly Vector3 PHASE_STR_SCL_SINGLE; // 0x250
	private static readonly Vector3 PHASE_STR_SCL_DOUBLE; // 0x25C
	private static readonly Vector3 PHASE_STR_SCL_DOUBLE_QP; // 0x268
	private static readonly Vector3 PHASE_STR_SCL_TRIPLE_ITEM; // 0x274
	private static readonly int BOARD_MESSAGE_MAX_WITDH; // 0x280
	private static readonly Vector3 BLACK_MARK_OBJ_POS; // 0x284
	private static readonly Vector3 BLACK_MARK_OBJ_POS_CENTER; // 0x290
	private static readonly Vector3 WHITE_MARK_OBJ_UNDER_POS; // 0x29C
	private static readonly string EVENT_WAR_SPNAME_PREFIX; // 0x2A8
	private static readonly string QUEST_BOARD_SPNAME_PREFIX; // 0x2B0
	private static readonly string QUEST_BOARD_ICON_SPNAME_PREFIX; // 0x2B8
	private static readonly string QUEST_BOARD_MASK_SPNAME_PREFIX; // 0x2C0
	private static readonly string QUEST_BOARD_SHOHI_SPNAME_PREFIX; // 0x2C8
	private static readonly string QUEST_BOARD_AP_SPNAME_PREFIX; // 0x2D0
	private static readonly string QUEST_BOARD_INFO_FRAME_NAME; // 0x2D8
	private static readonly string QUEST_BOARD_DAMAGE_RECODE_NAME; // 0x2E0
	private static readonly string QUEST_BOARD_PREV_ICON_NAME; // 0x2E8
	private static readonly string QUEST_BOARD_KNOCKDOWN_RECODE_NAME; // 0x2F0
	private static readonly string QUEST_BOARD_ICON_TEXTURE_PATH; // 0x2F8
	private static readonly string QUEST_BOARD_ICON_TEXTURE_PREFIX; // 0x300
	private static readonly int QUEST_BOARD_KNOCKDOWN_DAMAGE_WIDTH; // 0x308
	private static readonly int QUEST_BOARD_KNOCKDOWN_DAMAGE_POSX; // 0x30C
	private static readonly int QUEST_BOARD_KNOCKDOWN_ZERO_DAMAGE_POSX; // 0x310
	private static readonly float FLICK_THRESHOLD; // 0x314
	private static readonly string BANNER_POINT_SPNAME_ON; // 0x318
	private static readonly string BANNER_POINT_SPNAME_OFF; // 0x320
	private static readonly int SHORTCUT_FACE_MASK_SP_W; // 0x328
	private static readonly int QUEST_FACE_MASK_SP_W; // 0x32C
	private static readonly string SHORTCUT_FACE_MASK_SPNAME; // 0x330
	private static readonly string QUEST_STORY_FACE_MASK_SPNAME; // 0x338
	private static readonly string QUEST_MAIN_FACE_MASK_SPNAME; // 0x340
	private static readonly string QUEST_EVENT_FACE_MASK_SPNAME; // 0x348
	private static readonly string[] RP_SPNAME_FRAME; // 0x350
	private static readonly string[] RP_SPNAME_POINT; // 0x358
	private static readonly int RESTRICTION_DEFAULT_FONT_SIZE; // 0x360
	private static readonly int RESTRICTION_FONT_SPACING_DEFAULT; // 0x364
	private static readonly int RESTRICTION_FONT_SPACING_MIN; // 0x368
	private static readonly string QBOARD_CAP_CLOSED; // 0x370
	private static readonly string QBOARD_CAP_CLOSED_SPECIAL_FORMAT; // 0x378
	private static readonly string QBOARD_CAP_CLOSED_SPECIAL; // 0x380
	private static readonly string[] msQBoardL1Names; // 0x388
	private static readonly string msQBoardL2Name_Story; // 0x390
	private static readonly string msQBoardL2Name_Hero; // 0x398
	private static readonly string[] msQBoardL3Names; // 0x3A0
	private static readonly string[] msLabelMainSprNames; // 0x3A8
	private static readonly string[] QuestBoardApSpNames; // 0x3B0
	private static readonly string msPhaseSprName_ArrowOff; // 0x3B8
	private static readonly string msPhaseSprName_ArrowOn; // 0x3C0
	private static readonly string msPhaseSprName_ExArrowOff; // 0x3C8
	private static readonly string msPhaseSprName_ExArrowOn; // 0x3D0
	private static readonly string msPhaseSprName_LoopOff; // 0x3D8
	private static readonly string msPhaseSprName_LoopOn; // 0x3E0
	private static readonly string msPhaseSprName_LoopFirstOff; // 0x3E8
	private static readonly string CHAPTER_SP_BASE_NAME; // 0x3F0
	private static readonly string CHAPTER_SP_UNIT_NAME; // 0x3F8
	[SerializeField] // RVA: 0xC7CF78 Offset: 0xC7CF78 VA: 0xC7CF78
	private UIAtlas mCommonAtlas; // 0x18
	[SerializeField] // RVA: 0xC7CF88 Offset: 0xC7CF88 VA: 0xC7CF88
	private UIAtlas mTerminalAtlas; // 0x20
	[SerializeField] // RVA: 0xC7CF98 Offset: 0xC7CF98 VA: 0xC7CF98
	private UISprite mcBaseP; // 0x28
	[SerializeField] // RVA: 0xC7CFA8 Offset: 0xC7CFA8 VA: 0xC7CFA8
	private GameObject[] mStatusSp; // 0x30
	[SerializeField] // RVA: 0xC7CFB8 Offset: 0xC7CFB8 VA: 0xC7CFB8
	private GameObject mStatusObj; // 0x38
	[SerializeField] // RVA: 0xC7CFC8 Offset: 0xC7CFC8 VA: 0xC7CFC8
	private GameObject mOptionObj; // 0x40
	[SerializeField] // RVA: 0xC7CFD8 Offset: 0xC7CFD8 VA: 0xC7CFD8
	private GameObject mLabelObj; // 0x48
	[SerializeField] // RVA: 0xC7CFE8 Offset: 0xC7CFE8 VA: 0xC7CFE8
	private GameObject mTitleObj; // 0x50
	[SerializeField] // RVA: 0xC7CFF8 Offset: 0xC7CFF8 VA: 0xC7CFF8
	private GameObject mRewardObj; // 0x58
	[SerializeField] // RVA: 0xC7D008 Offset: 0xC7D008 VA: 0xC7D008
	private GameObject mPhaseObj; // 0x60
	[SerializeField] // RVA: 0xC7D018 Offset: 0xC7D018 VA: 0xC7D018
	private GameObject mChallengeObj; // 0x68
	[SerializeField] // RVA: 0xC7D028 Offset: 0xC7D028 VA: 0xC7D028
	private UILabel mChallengeLb; // 0x70
	[SerializeField] // RVA: 0xC7D038 Offset: 0xC7D038 VA: 0xC7D038
	private UISprite challengeStrSpr; // 0x78
	[SerializeField] // RVA: 0xC7D048 Offset: 0xC7D048 VA: 0xC7D048
	private GameObject mCostObj; // 0x80
	[SerializeField] // RVA: 0xC7D058 Offset: 0xC7D058 VA: 0xC7D058
	private ShiningIconComponent mNewIcon; // 0x88
	[SerializeField] // RVA: 0xC7D068 Offset: 0xC7D068 VA: 0xC7D068
	private UISprite mNextSp; // 0x90
	[SerializeField] // RVA: 0xC7D078 Offset: 0xC7D078 VA: 0xC7D078
	private UISprite mPrevSp; // 0x98
	[SerializeField] // RVA: 0xC7D088 Offset: 0xC7D088 VA: 0xC7D088
	private UILabel mTitleNameLb; // 0xA0
	[SerializeField] // RVA: 0xC7D098 Offset: 0xC7D098 VA: 0xC7D098
	private GameObject mTitleLevelRoot; // 0xA8
	[SerializeField] // RVA: 0xC7D0A8 Offset: 0xC7D0A8 VA: 0xC7D0A8
	private UISprite mTitleLevelStrSp; // 0xB0
	[SerializeField] // RVA: 0xC7D0B8 Offset: 0xC7D0B8 VA: 0xC7D0B8
	private UISprite mTitleLevelSp; // 0xB8
	[SerializeField] // RVA: 0xC7D0C8 Offset: 0xC7D0C8 VA: 0xC7D0C8
	private UILabel mTitleLevelLb; // 0xC0
	[SerializeField] // RVA: 0xC7D0D8 Offset: 0xC7D0D8 VA: 0xC7D0D8
	private UILabel mTitleShortcutLb; // 0xC8
	[SerializeField] // RVA: 0xC7D0E8 Offset: 0xC7D0E8 VA: 0xC7D0E8
	private UISprite mLabelNameSp; // 0xD0
	[SerializeField] // RVA: 0xC7D0F8 Offset: 0xC7D0F8 VA: 0xC7D0F8
	private GameObject mLabelFaceObj; // 0xD8
	[SerializeField] // RVA: 0xC7D108 Offset: 0xC7D108 VA: 0xC7D108
	private UISprite mLabelFaceIcon; // 0xE0
	[SerializeField] // RVA: 0xC7D118 Offset: 0xC7D118 VA: 0xC7D118
	private UISprite mLabelFaceMaskShortcutSp; // 0xE8
	[SerializeField] // RVA: 0xC7D128 Offset: 0xC7D128 VA: 0xC7D128
	private UISprite mLabelFaceMaskQuestSp; // 0xF0
	[SerializeField] // RVA: 0xC7D138 Offset: 0xC7D138 VA: 0xC7D138
	private UISprite mLabelChapterSp; // 0xF8
	[SerializeField] // RVA: 0xC7D148 Offset: 0xC7D148 VA: 0xC7D148
	private UISprite mLabelBoardSectionSp; // 0x100
	[SerializeField] // RVA: 0xC7D158 Offset: 0xC7D158 VA: 0xC7D158
	private UILabel mLabelSubSectionNumLb; // 0x108
	[SerializeField] // RVA: 0xC7D168 Offset: 0xC7D168 VA: 0xC7D168
	private BoardOptionTextWithIconComponent mOptionInfoLb; // 0x110
	[SerializeField] // RVA: 0xC7D178 Offset: 0xC7D178 VA: 0xC7D178
	private UISprite mOptionInfoFrameSp; // 0x118
	[SerializeField] // RVA: 0xC7D188 Offset: 0xC7D188 VA: 0xC7D188
	private UILabel mOptionRestrinctionLb; // 0x120
	[SerializeField] // RVA: 0xC7D198 Offset: 0xC7D198 VA: 0xC7D198
	private UISprite mOptionRestrinctionSp; // 0x128
	[SerializeField] // RVA: 0xC7D1A8 Offset: 0xC7D1A8 VA: 0xC7D1A8
	private ItemIconComponent mRewardIcon; // 0x130
	[SerializeField] // RVA: 0xC7D1B8 Offset: 0xC7D1B8 VA: 0xC7D1B8
	private UISprite mRewardGetSP; // 0x138
	[SerializeField] // RVA: 0xC7D1C8 Offset: 0xC7D1C8 VA: 0xC7D1C8
	private UISprite mRewardFirstSP; // 0x140
	[SerializeField] // RVA: 0xC7D1D8 Offset: 0xC7D1D8 VA: 0xC7D1D8
	private UISprite mPhaseStrSp; // 0x148
	[SerializeField] // RVA: 0xC7D1E8 Offset: 0xC7D1E8 VA: 0xC7D1E8
	private UISprite[] mPhaseSp; // 0x150
	[SerializeField] // RVA: 0xC7D1F8 Offset: 0xC7D1F8 VA: 0xC7D1F8
	private UILabel mCostLb1; // 0x158
	[SerializeField] // RVA: 0xC7D208 Offset: 0xC7D208 VA: 0xC7D208
	private UILabel mCostLb2; // 0x160
	[SerializeField] // RVA: 0xC7D218 Offset: 0xC7D218 VA: 0xC7D218
	private UILabel mCostLb3; // 0x168
	[SerializeField] // RVA: 0xC7D228 Offset: 0xC7D228 VA: 0xC7D228
	private UISprite mCostShohiSp; // 0x170
	[SerializeField] // RVA: 0xC7D238 Offset: 0xC7D238 VA: 0xC7D238
	private UISprite mCostBg1; // 0x178
	[SerializeField] // RVA: 0xC7D248 Offset: 0xC7D248 VA: 0xC7D248
	private UISprite mCostBg2; // 0x180
	[SerializeField] // RVA: 0xC7D258 Offset: 0xC7D258 VA: 0xC7D258
	private UISprite mCostBg3; // 0x188
	[SerializeField] // RVA: 0xC7D268 Offset: 0xC7D268 VA: 0xC7D268
	private UISprite mCostApSp; // 0x190
	[SerializeField] // RVA: 0xC7D278 Offset: 0xC7D278 VA: 0xC7D278
	private UISprite mCostRpSp; // 0x198
	[SerializeField] // RVA: 0xC7D288 Offset: 0xC7D288 VA: 0xC7D288
	private UISprite mCostRpPointSp; // 0x1A0
	[SerializeField] // RVA: 0xC7D298 Offset: 0xC7D298 VA: 0xC7D298
	private ItemIconComponent mCostItemIcon1; // 0x1A8
	[SerializeField] // RVA: 0xC7D2A8 Offset: 0xC7D2A8 VA: 0xC7D2A8
	private ItemIconComponent mCostItemIcon2; // 0x1B0
	[SerializeField] // RVA: 0xC7D2B8 Offset: 0xC7D2B8 VA: 0xC7D2B8
	private ItemIconComponent mCostItemIcon3; // 0x1B8
	[SerializeField] // RVA: 0xC7D2C8 Offset: 0xC7D2C8 VA: 0xC7D2C8
	private UISprite mCostConsumeBattleWinSp; // 0x1C0
	[SerializeField] // RVA: 0xC7D2D8 Offset: 0xC7D2D8 VA: 0xC7D2D8
	private UISprite mShohiSp; // 0x1C8
	[SerializeField] // RVA: 0xC7D2E8 Offset: 0xC7D2E8 VA: 0xC7D2E8
	private GameObject mEarthLinePrefab; // 0x1D0
	[SerializeField] // RVA: 0xC7D2F8 Offset: 0xC7D2F8 VA: 0xC7D2F8
	private GameObject mNoticeNumberPrefab; // 0x1D8
	[SerializeField] // RVA: 0xC7D308 Offset: 0xC7D308 VA: 0xC7D308
	private GameObject mNoticeNumberRoot; // 0x1E0
	[SerializeField] // RVA: 0xC7D318 Offset: 0xC7D318 VA: 0xC7D318
	private GameObject mClassIconRoot; // 0x1E8
	[SerializeField] // RVA: 0xC7D328 Offset: 0xC7D328 VA: 0xC7D328
	private UISprite mClassStrSp; // 0x1F0
	[SerializeField] // RVA: 0xC7D338 Offset: 0xC7D338 VA: 0xC7D338
	private ServantClassIconComponent[] mClassIcons; // 0x1F8
	[SerializeField] // RVA: 0xC7D348 Offset: 0xC7D348 VA: 0xC7D348
	private GameObject mBannerRoot; // 0x200
	[SerializeField] // RVA: 0xC7D358 Offset: 0xC7D358 VA: 0xC7D358
	private TerminalBannerComponent[] mTerminalBanners; // 0x208
	[SerializeField] // RVA: 0xC7D368 Offset: 0xC7D368 VA: 0xC7D368
	private GameObject mBannerArrowObj; // 0x210
	[SerializeField] // RVA: 0xC7D378 Offset: 0xC7D378 VA: 0xC7D378
	private ScrollArrowComponent[] mBannerArrows; // 0x218
	[SerializeField] // RVA: 0xC7D388 Offset: 0xC7D388 VA: 0xC7D388
	private UIGrid mBannerPointGrid; // 0x220
	[SerializeField] // RVA: 0xC7D398 Offset: 0xC7D398 VA: 0xC7D398
	private UISprite[] mBannerPointSps; // 0x228
	[SerializeField] // RVA: 0xC7D3A8 Offset: 0xC7D3A8 VA: 0xC7D3A8
	private GameObject mNoBattleObj; // 0x230
	[SerializeField] // RVA: 0xC7D3B8 Offset: 0xC7D3B8 VA: 0xC7D3B8
	private UISprite mRarePrismSp; // 0x238
	[SerializeField] // RVA: 0xC7D3C8 Offset: 0xC7D3C8 VA: 0xC7D3C8
	private GameObject mQuestInfoBtn; // 0x240
	[SerializeField] // RVA: 0xC7D3D8 Offset: 0xC7D3D8 VA: 0xC7D3D8
	private GameObject mQuestInfoShowing; // 0x248
	[SerializeField] // RVA: 0xC7D3E8 Offset: 0xC7D3E8 VA: 0xC7D3E8
	private UISprite mDamageRecordSp; // 0x250
	[SerializeField] // RVA: 0xC7D3F8 Offset: 0xC7D3F8 VA: 0xC7D3F8
	private UILabel mDamageRecordLb; // 0x258
	[SerializeField] // RVA: 0xC7D408 Offset: 0xC7D408 VA: 0xC7D408
	private UISprite mKnockdownRecordSp; // 0x260
	[SerializeField] // RVA: 0xC7D418 Offset: 0xC7D418 VA: 0xC7D418
	private UILabel mKnockdownRecordCountLb; // 0x268
	[SerializeField] // RVA: 0xC7D428 Offset: 0xC7D428 VA: 0xC7D428
	private UILabel mKnockdownRecordDamageLb; // 0x270
	[SerializeField] // RVA: 0xC7D438 Offset: 0xC7D438 VA: 0xC7D438
	private UILabel mKnockdownRecordPlusLb; // 0x278
	[SerializeField] // RVA: 0xC7D448 Offset: 0xC7D448 VA: 0xC7D448
	private UILabel mKnockdownRecordDamageNameLb; // 0x280
	[SerializeField] // RVA: 0xC7D458 Offset: 0xC7D458 VA: 0xC7D458
	private GameObject blackMarkSpace; // 0x288
	[SerializeField] // RVA: 0xC7D468 Offset: 0xC7D468 VA: 0xC7D468
	private UILabel mBoardMessage; // 0x290
	private NoticeNumberComponent mNoticeNumber; // 0x298
	private QuestBoardListViewEarthLine mEarthLine; // 0x2A0
	private GameObject mEarthLineObj; // 0x2A8
	private QuestBoardListViewObject mListViewObject; // 0x2B0
	private int mBannerCount; // 0x2B8
	private bool mIsEnableBannerAutoMoveOld; // 0x2BC
	private float mBannerAutoMoveTimeOld; // 0x2C0
	private float mBannerAutoMoveTimeInterval; // 0x2C4
	private bool mIsPressed; // 0x2C8
	private bool mIsPressedForDragX; // 0x2C9
	private Vector2 mPressPos; // 0x2CC
	private bool mIsEnableDragX; // 0x2D4
	private Vector2 mTouchPosNow; // 0x2D8
	private Vector2 mTouchPosOld; // 0x2E0
	private float mTouchPosDif; // 0x2E8
	private int restrictionDefaultWidth; // 0x2EC
	private List<QuestBoardInformaionText> mInfoTextList; // 0x2F0
	private GiftEntity[] mRewardIconInfs; // 0x2F8
	private GameObject blackMarkEffect; // 0x300
	private GameObject whiteMarkEffect; // 0x308
	private AssetData boardIconAssetData; // 0x310
	private string boardIconName; // 0x318
	[SerializeField] // RVA: 0xC7D478 Offset: 0xC7D478 VA: 0xC7D478
	private UITexture boardIconTexture; // 0x320
	[SerializeField] // RVA: 0xC7D488 Offset: 0xC7D488 VA: 0xC7D488
	private GameObject eventTarget; // 0x328
	[SerializeField] // RVA: 0xC7D498 Offset: 0xC7D498 VA: 0xC7D498
	private BoardOptionEventTargetComponent eventTargetComponent; // 0x330
	[CompilerGeneratedAttribute] // RVA: 0xC7D4A8 Offset: 0xC7D4A8 VA: 0xC7D4A8
	private static Func<ViewEnemyEntity, int> <>f__am$cache0; // 0x400
	[CompilerGeneratedAttribute] // RVA: 0xC7D4B8 Offset: 0xC7D4B8 VA: 0xC7D4B8
	private static Func<RestrictionEntity, bool> <>f__am$cache1; // 0x408

	// Properties
	public bool IsPressed { get; }
	public bool IsPressedForDragX { get; }
	public bool IsEnableDragX { get; }
	public float TouchPosDif { get; }

	// Methods

	// RVA: 0x15BD708 Offset: 0x15BD708 VA: 0x15BD708
	public void .ctor() { }

	// RVA: 0x15BD7A8 Offset: 0x15BD7A8 VA: 0x15BD7A8
	public bool get_IsPressed() { }

	// RVA: 0x15BD7B0 Offset: 0x15BD7B0 VA: 0x15BD7B0
	public bool get_IsPressedForDragX() { }

	// RVA: 0x15BD7B8 Offset: 0x15BD7B8 VA: 0x15BD7B8
	public bool get_IsEnableDragX() { }

	// RVA: 0x15BD7C0 Offset: 0x15BD7C0 VA: 0x15BD7C0
	public float get_TouchPosDif() { }

	// RVA: 0x15BD7C8 Offset: 0x15BD7C8 VA: 0x15BD7C8
	private void Awake() { }

	// RVA: 0x15BD804 Offset: 0x15BD804 VA: 0x15BD804
	private void OnDestroy() { }

	// RVA: 0x15BD9B8 Offset: 0x15BD9B8 VA: 0x15BD9B8
	public void SetListViewObject(QuestBoardListViewObject questBoardObject) { }

	// RVA: 0x15BD9C0 Offset: 0x15BD9C0 VA: 0x15BD9C0
	public void SetItem(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode) { }

	// RVA: 0x15C694C Offset: 0x15C694C VA: 0x15C694C
	private void ResetInfoTextList() { }

	// RVA: 0x15C69D4 Offset: 0x15C69D4 VA: 0x15C69D4
	public void SetItemOfAreaForTeminalTopEffect(QuestBoardListViewItem questBoardItem, bool isBoardDisp, bool isBadgeDisp, bool isBlackMarkOnly, bool isSpecialClosedBanner) { }

	// RVA: 0x15BF120 Offset: 0x15BF120 VA: 0x15BF120
	private void SetItemOfArea(QuestBoardListViewItem questBoardItem, bool isBoardDisp = True, bool isBadgeDisp = True, bool isBlackMarkOnly = False, bool isSpecialClosedBanner = False) { }

	// RVA: 0x15C71BC Offset: 0x15C71BC VA: 0x15C71BC
	private void SetBlackMarkAndWhiteMark(QuestBoardListViewItem questBoardItem, WarEntity warEntity, bool isBlackMarkOnly) { }

	// RVA: 0x15C7CB8 Offset: 0x15C7CB8 VA: 0x15C7CB8
	private void CreateInfoTextList(QuestBoardListViewItem questBoardItem, long checkTime) { }

	// RVA: 0x15C85F0 Offset: 0x15C85F0 VA: 0x15C85F0
	private void UpdateInfoText(QuestBoardListViewItem questBoardItem, int strIndex, long checkTime) { }

	// RVA: 0x15C85D4 Offset: 0x15C85D4 VA: 0x15C85D4
	private bool IsEventTime(EventEntity eventEntity, long checkTime) { }

	// RVA: 0x15C84D0 Offset: 0x15C84D0 VA: 0x15C84D0
	private BoardMessageEntity FindOverrideQuestMessage(BoardMessageEntity[] boardMessageData, int eventId) { }

	// RVA: 0x15C0374 Offset: 0x15C0374 VA: 0x15C0374
	private void SetItemOfShortcut(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15BE254 Offset: 0x15BE254 VA: 0x15BE254
	private void SetItemOfFolder(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15C69F0 Offset: 0x15C69F0 VA: 0x15C69F0
	private bool IsPurchasedByRarePrism(List<MapControl.QuestInfo> questList, WarEntity warEnt) { }

	// RVA: 0x15C9B1C Offset: 0x15C9B1C VA: 0x15C9B1C
	private bool HasNewQuestInWar(List<MapControl.QuestInfo> questList, int warId) { }

	// RVA: 0x15C1474 Offset: 0x15C1474 VA: 0x15C1474
	private void SetItemOfQuest(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15CDEE0 Offset: 0x15CDEE0 VA: 0x15CDEE0
	private QuestPhaseDetailEntity.BoardInfo CreateQuestBoardInfoPreBattleFormation() { }

	// RVA: 0x15C4E54 Offset: 0x15C4E54 VA: 0x15C4E54
	private void SetItemOfWarBoard(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15CAA14 Offset: 0x15CAA14 VA: 0x15CAA14
	private void SetCostDisp(QuestEntity questEnt, bool isClosed, int costCalcVal, int fixedVal, Color baseColor, out bool isDoubleItemConsume, out bool isDoubleItemConsumeQp, out bool isTripleItemConsume) { }

	// RVA: 0x15CE200 Offset: 0x15CE200 VA: 0x15CE200
	private bool SetRestrictionLabelFromQuestRestrictionMaster(int questId, int phase) { }

	// RVA: 0x15CE380 Offset: 0x15CE380 VA: 0x15CE380
	private void SetRestrinctionLabelSpacingX(int spacingX) { }

	// RVA: 0x15CA144 Offset: 0x15CA144 VA: 0x15CA144
	private bool IsMainWar(int warId) { }

	// RVA: 0x15CA028 Offset: 0x15CA028 VA: 0x15CA028
	private string GetFaceMaskSpriteName(QuestEntity.enType questType) { }

	// RVA: 0x15CE818 Offset: 0x15CE818 VA: 0x15CE818
	private bool IsDispQuestName(QuestEntity.enType questType) { }

	// RVA: 0x15CA888 Offset: 0x15CA888 VA: 0x15CA888
	private string GetDispQuestName(QuestEntity questEnt, QuestEntity.enType questType) { }

	// RVA: 0x15CA540 Offset: 0x15CA540 VA: 0x15CA540
	private string GetQuestIconName(QuestEntity questEnt, QuestEntity.enType questType) { }

	// RVA: 0x15CA3E4 Offset: 0x15CA3E4 VA: 0x15CA3E4
	private string GetQuestIconNameForMainType(QuestEntity questEnt) { }

	// RVA: 0x15C9248 Offset: 0x15C9248 VA: 0x15C9248
	private void SetupRewardIconDisp(QuestEntity questEnt, bool isClosed, Color color) { }

	// RVA: 0x15C898C Offset: 0x15C898C VA: 0x15C898C
	private string GetAdvanceNoticeText(MapControl.QuestInfo questInfo, QuestEntity questEnt) { }

	// RVA: 0x15C9774 Offset: 0x15C9774 VA: 0x15C9774
	private void SetupFirstRewardDisp(int questId, int afterClearType, Color color) { }

	// RVA: 0x15C98A8 Offset: 0x15C98A8 VA: 0x15C98A8
	private void SetupRewardGotDisp(int questId, UserQuestEntity userQuestEnt, Color color) { }

	// RVA: 0x15CE840 Offset: 0x15CE840 VA: 0x15CE840
	public void setInfoShowing(bool onOff) { }

	// RVA: 0x15C703C Offset: 0x15C703C VA: 0x15C703C
	private string GetEventAddBannerSpriteName(EventEntity eventEnt, bool isActiveEventWar) { }

	// RVA: 0x15C9F74 Offset: 0x15C9F74 VA: 0x15C9F74
	private GameObject GetStatusSp(QuestBoardListViewItemDraw.enStatus status) { }

	// RVA: 0x15C7794 Offset: 0x15C7794 VA: 0x15C7794
	private void SetStatusActive(QuestBoardListViewItemDraw.enStatus status, bool isActive = True) { }

	// RVA: 0x15C7664 Offset: 0x15C7664 VA: 0x15C7664
	private void SetBadge(int num) { }

	// RVA: 0x15C77E4 Offset: 0x15C77E4 VA: 0x15C77E4
	private void SetNewIcon(Vector3 pos, int w, int h) { }

	// RVA: 0x15C868C Offset: 0x15C868C VA: 0x15C868C
	private void SetPickupIcon() { }

	// RVA: 0x15C7A10 Offset: 0x15C7A10 VA: 0x15C7A10
	private void SetClearSprite(WarEntity warEnt) { }

	// RVA: 0x15C7B18 Offset: 0x15C7B18 VA: 0x15C7B18
	private void SetNextSprite(MapControl.AreaBoardInfo info, WarEntity warEnt) { }

	// RVA: 0x15C9BF4 Offset: 0x15C9BF4 VA: 0x15C9BF4
	private void SetPrevSprite(QuestEntity questEnt, Vector3 pos) { }

	// RVA: 0x15C8788 Offset: 0x15C8788 VA: 0x15C8788
	private void SetStatusToggle() { }

	// RVA: 0x15C8EA0 Offset: 0x15C8EA0 VA: 0x15C8EA0
	private bool SetFaceImage(QuestEntity questEnt, UISprite maskSprite, int maskWidth, string maskSpriteName, Color baseColor) { }

	// RVA: 0x15CE584 Offset: 0x15CE584 VA: 0x15CE584
	private void SetCostLabelItem(UILabel label, int consumeNo, UserItemEntity usrItem, ItemEntity itemEnt, Color baseCol, bool isClosed) { }

	// RVA: 0x15CE3E8 Offset: 0x15CE3E8 VA: 0x15CE3E8
	private void SetCostLabel(UILabel label, string content, int costCalcVal, Color baseColor, bool isOverCost, bool isClosed, bool isFixedVal) { }

	// RVA: 0x15CD7A0 Offset: 0x15CD7A0 VA: 0x15CD7A0
	private void InitPhase(bool isDoubleItemConsume, bool isDoubleItemConsumeQp, bool isTripleItemConsume) { }

	// RVA: 0x15CDC0C Offset: 0x15CDC0C VA: 0x15CDC0C
	private string GetPhaseArrowSpriteName(QuestBoardListViewItemDraw.PhaseShowType phaseType, bool isOn, bool isLastIndex, bool isRepeatFirst, bool isRepeatLast) { }

	// RVA: 0x15CDDDC Offset: 0x15CDDDC VA: 0x15CDDDC
	private int GetPhaseArrowIntervalSize(QuestBoardListViewItemDraw.PhaseShowType phaseType, bool isRepeatLast) { }

	// RVA: 0x15CA230 Offset: 0x15CA230 VA: 0x15CA230
	private string ConvertToChineseAscii(int n) { }

	// RVA: 0x15C99D4 Offset: 0x15C99D4 VA: 0x15C99D4
	private QuestBoardInformaionText[] GetCampaignText(int questId, int phase, bool isQuestNoneCleared, ref int costCalcVal, ref int fixedVal) { }

	// RVA: 0x15CE880 Offset: 0x15CE880 VA: 0x15CE880
	private List<QuestBoardInformaionText> GetCampaignTextListByEventQuestMaster(int questId, int phase, bool isQuestNoneCleared, ref int costCalcVal, ref int fixedVal) { }

	// RVA: 0x15CEC10 Offset: 0x15CEC10 VA: 0x15CEC10
	private List<QuestBoardInformaionText> GetCampaignTextListByWarGroupMaster(int questId, int phase, bool isQuestNoneCleared, ref int costCalcVal, ref int fixedVal) { }

	// RVA: 0x15CEFC8 Offset: 0x15CEFC8 VA: 0x15CEFC8
	private QuestBoardInformaionText CreateQuestBoardInformationText(QuestEntity questEntity, EventEntity eventEnt, EventCampaignEntity eventCampaignEnt, int phase, bool isQuestNoneCleared, ref int costCalcVal, ref int fixedVal) { }

	// RVA: 0x15CF898 Offset: 0x15CF898 VA: 0x15CF898
	private bool IsValidSupportSelection(QuestEntity questEntity, int phase) { }

	// RVA: 0x15CFBFC Offset: 0x15CFBFC VA: 0x15CFBFC
	public void SetInput(QuestBoardListViewItem questBoardItem, bool isInput) { }

	// RVA: 0x15CFC00 Offset: 0x15CFC00 VA: 0x15CFC00
	public void UpdateItem(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode, QuestBoardListViewManager qmanager) { }

	// RVA: 0x15D01D0 Offset: 0x15D01D0 VA: 0x15D01D0
	public void LateUpdateItem(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode, QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15D0504 Offset: 0x15D0504 VA: 0x15D0504
	public void OnChangeAlphaAnim(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode, QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15CFEEC Offset: 0x15CFEEC VA: 0x15CFEEC
	private void ResetQuest(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15CFCE4 Offset: 0x15CFCE4 VA: 0x15CFCE4
	private void SetInfoTextAlpha(float alpha) { }

	// RVA: 0x15D053C Offset: 0x15D053C VA: 0x15D053C
	private void ChangeNextInfoText(QuestBoardListViewItem questBoardItem, QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15D09C4 Offset: 0x15D09C4 VA: 0x15D09C4
	private bool IsMultiInfoText() { }

	// RVA: 0x15D0A24 Offset: 0x15D0A24 VA: 0x15D0A24
	private bool IsInfoTextListNullOrEmpty() { }

	// RVA: 0x15CFD68 Offset: 0x15CFD68 VA: 0x15CFD68
	private void SetRewardIconAlpha(float alpha) { }

	// RVA: 0x15D0754 Offset: 0x15D0754 VA: 0x15D0754
	private void ChangeNextRewardIcon(QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15D0A8C Offset: 0x15D0A8C VA: 0x15D0A8C
	private bool IsRewardIcons() { }

	// RVA: 0x15CFDCC Offset: 0x15CFDCC VA: 0x15CFDCC
	private void SetEventTargetAlpha(float alpha) { }

	// RVA: 0x15D0AAC Offset: 0x15D0AAC VA: 0x15D0AAC
	private bool IsNeedAnimEventTarget() { }

	// RVA: 0x15D08C0 Offset: 0x15D08C0 VA: 0x15D08C0
	private void ChangeNextEventTarget() { }

	// RVA: 0x15D0ADC Offset: 0x15D0ADC VA: 0x15D0ADC
	public void OnPressItem(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode, QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15D0CA4 Offset: 0x15D0CA4 VA: 0x15D0CA4
	public void OnPullItem(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode, QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15D0DD8 Offset: 0x15D0DD8 VA: 0x15D0DD8
	public void OnDragStartItem(QuestBoardListViewItem questBoardItem, QuestBoardListViewItemDraw.DispMode dispMode, QuestBoardListViewManager qmanager) { }

	// RVA: 0x15C6B58 Offset: 0x15C6B58 VA: 0x15C6B58
	private void SetupBanner(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15D1098 Offset: 0x15D1098 VA: 0x15D1098
	private void ResetBannerAutoMoveTime() { }

	// RVA: 0x15D01E8 Offset: 0x15D01E8 VA: 0x15D01E8
	private void MoveBanner(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15D0BE8 Offset: 0x15D0BE8 VA: 0x15D0BE8
	private void OnPressBanner(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15D0D14 Offset: 0x15D0D14 VA: 0x15D0D14
	private void OnPullBanner(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15D0F6C Offset: 0x15D0F6C VA: 0x15D0F6C
	private bool IsBanners(QuestBoardListViewItem questBoardItem) { }

	// RVA: 0x15D1114 Offset: 0x15D1114 VA: 0x15D1114
	private void UpdateDispBannerPoint(int index = 0) { }

	// RVA: 0x15D0FD8 Offset: 0x15D0FD8 VA: 0x15D0FD8
	private void SetDispBannerArrows(bool isDisp, bool isForce = False) { }

	// RVA: 0x15D1234 Offset: 0x15D1234 VA: 0x15D1234
	public bool IsFlickL() { }

	// RVA: 0x15D12B8 Offset: 0x15D12B8 VA: 0x15D12B8
	public bool IsFlickR() { }

	// RVA: 0x15D0114 Offset: 0x15D0114 VA: 0x15D0114
	private void UpdateTouch(QuestBoardListViewManager questBoardManager) { }

	// RVA: 0x15CE760 Offset: 0x15CE760 VA: 0x15CE760
	public static string GetApSpriteFileName(int bannerId) { }

	// RVA: 0x15CA674 Offset: 0x15CA674 VA: 0x15CA674
	private void LoadBoardIconTexture(QuestEntity questEntity, Action callback) { }

	// RVA: 0x15BD8A8 Offset: 0x15BD8A8 VA: 0x15BD8A8
	private void ReleaseBoardIconTexture() { }

	// RVA: 0x15C9FCC Offset: 0x15C9FCC VA: 0x15C9FCC
	private string GetRecommendLv(QuestEntity questEnt, int questPhase, bool hasBattle, bool isClosed) { }

	// RVA: 0x15D1340 Offset: 0x15D1340 VA: 0x15D1340
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B40 Offset: 0xCD3B40 VA: 0xCD3B40
	// RVA: 0x15D2D00 Offset: 0x15D2D00 VA: 0x15D2D00
	private static int <SetItemOfQuest>m__0(ViewEnemyEntity value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B50 Offset: 0xCD3B50 VA: 0xCD3B50
	// RVA: 0x15D2D28 Offset: 0x15D2D28 VA: 0x15D2D28
	private static bool <IsValidSupportSelection>m__1(RestrictionEntity rest) { }
}

// Namespace: 
public enum QuestBoardListViewItemDraw.PhaseShowType // TypeDefIndex: 11147
{
	// Fields
	public int value__; // 0x0
	public const QuestBoardListViewItemDraw.PhaseShowType NORMAL = 0;
	public const QuestBoardListViewItemDraw.PhaseShowType EXTRA = 1;
}

// Namespace: 
public enum QuestBoardListViewItemDraw.DispMode // TypeDefIndex: 11148
{
	// Fields
	public int value__; // 0x0
	public const QuestBoardListViewItemDraw.DispMode INVISIBLE = 0;
	public const QuestBoardListViewItemDraw.DispMode INVALID = 1;
	public const QuestBoardListViewItemDraw.DispMode VALID = 2;
}

// Namespace: 
public enum QuestBoardListViewItemDraw.enQBoardL1Type // TypeDefIndex: 11149
{
	// Fields
	public int value__; // 0x0
	public const QuestBoardListViewItemDraw.enQBoardL1Type enNone = 0;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enBanner = 1;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enCapter = 2;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enCaldeaGate = 3;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enStory = 4;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enHeroBallad = 5;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enWarBoard = 6;
	public const QuestBoardListViewItemDraw.enQBoardL1Type enMAX = 7;
}

// Namespace: 
public enum QuestBoardListViewItemDraw.enStatus // TypeDefIndex: 11150
{
	// Fields
	public int value__; // 0x0
	public const QuestBoardListViewItemDraw.enStatus enNone = 0;
	public const QuestBoardListViewItemDraw.enStatus enNew = 1;
	public const QuestBoardListViewItemDraw.enStatus enClear = 2;
	public const QuestBoardListViewItemDraw.enStatus enComplete = 3;
	public const QuestBoardListViewItemDraw.enStatus enPickup = 4;
	public const QuestBoardListViewItemDraw.enStatus enMAX = 5;
	public const QuestBoardListViewItemDraw.enStatus enNotice = 6;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45B54 Offset: 0xC45B54 VA: 0xC45B54
private sealed class QuestBoardListViewItemDraw.<IsPurchasedByRarePrism>c__AnonStorey0 // TypeDefIndex: 11151
{
	// Fields
	internal WarEntity warEnt; // 0x10
	internal UserQuestMaster userQuestMst; // 0x18

	// Methods

	// RVA: 0x15C9BDC Offset: 0x15C9BDC VA: 0x15C9BDC
	public void .ctor() { }

	// RVA: 0x15D2E78 Offset: 0x15D2E78 VA: 0x15D2E78
	internal bool <>m__0(MapControl.QuestInfo quest) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45B64 Offset: 0xC45B64 VA: 0xC45B64
private sealed class QuestBoardListViewItemDraw.<HasNewQuestInWar>c__AnonStorey1 // TypeDefIndex: 11152
{
	// Fields
	internal int warId; // 0x10

	// Methods

	// RVA: 0x15C9BE4 Offset: 0x15C9BE4 VA: 0x15C9BE4
	public void .ctor() { }

	// RVA: 0x15D2DEC Offset: 0x15D2DEC VA: 0x15D2DEC
	internal bool <>m__0(MapControl.QuestInfo quest) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45B74 Offset: 0xC45B74 VA: 0xC45B74
private sealed class QuestBoardListViewItemDraw.<SetItemOfQuest>c__AnonStorey2 // TypeDefIndex: 11153
{
	// Fields
	internal Color baseColor; // 0x10
	internal QuestBoardListViewItemDraw $this; // 0x20

	// Methods

	// RVA: 0x15C9BEC Offset: 0x15C9BEC VA: 0x15C9BEC
	public void .ctor() { }

	// RVA: 0x15D31D0 Offset: 0x15D31D0 VA: 0x15D31D0
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45B84 Offset: 0xC45B84 VA: 0xC45B84
private sealed class QuestBoardListViewItemDraw.<SetItemOfWarBoard>c__AnonStorey3 // TypeDefIndex: 11154
{
	// Fields
	internal Color baseColor; // 0x10
	internal QuestBoardListViewItemDraw $this; // 0x20

	// Methods

	// RVA: 0x15CE3E0 Offset: 0x15CE3E0 VA: 0x15CE3E0
	public void .ctor() { }

	// RVA: 0x15D326C Offset: 0x15D326C VA: 0x15D326C
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45B94 Offset: 0xC45B94 VA: 0xC45B94
private sealed class QuestBoardListViewItemDraw.<CreateQuestBoardInformationText>c__AnonStorey4 // TypeDefIndex: 11155
{
	// Fields
	internal long checkTime; // 0x10

	// Methods

	// RVA: 0x15CF890 Offset: 0x15CF890 VA: 0x15CF890
	public void .ctor() { }

	// RVA: 0x15D2D58 Offset: 0x15D2D58 VA: 0x15D2D58
	internal bool <>m__0(UserOwnItemInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45BA4 Offset: 0xC45BA4 VA: 0xC45BA4
private sealed class QuestBoardListViewItemDraw.<LoadBoardIconTexture>c__AnonStorey5 // TypeDefIndex: 11156
{
	// Fields
	internal Action callback; // 0x10
	internal QuestBoardListViewItemDraw $this; // 0x18

	// Methods

	// RVA: 0x15D1338 Offset: 0x15D1338 VA: 0x15D1338
	public void .ctor() { }

	// RVA: 0x15D2FA8 Offset: 0x15D2FA8 VA: 0x15D2FA8
	internal void <>m__0(AssetData assetData) { }
}

// Namespace: 
public class QuestBoardListViewManager : ListViewManager // TypeDefIndex: 11157
{
	// Fields
	public static readonly float INTO_TIME; // 0x0
	public static readonly float EXIT_TIME; // 0x4
	public static readonly float MAP_INTO_TIME; // 0x8
	public static readonly float MAP_EXIT_TIME; // 0xC
	private static readonly float ALPHA_ANIM_SPD_RATE; // 0x10
	private static readonly float ALPHA_ANIM_TIME_INTERVAL; // 0x14
	private static readonly int DEFAULT_SCROLL_VIEW_DEPTH; // 0x18
	private static readonly int REWARD_ICON_FADE_FRAME_NUM; // 0x1C
	private static readonly int ALPHA_ANIM_COUNT_RESET_VAL; // 0x20
	private const string TERMINAL_EFFECT_PATH = "Terminal/Effect";
	private const string BLACK_MARK_PREFAB_NAME = "ef_blackpoint";
	private const string WHITE_MARK_PREFAB_NAME = "ef_whitepoint";
	private const string BOARD_APPEAR_EFFECT_PREFAB_NAME = "bit_board_appear";
	private const string BOARD_APPEAR_EFFECT_FADE_PREFAB_NAME = "bit_fade_black";
	private const string BOARD_DISAPPEAR_EFFECT_PREFAB_NAME = "bit_board_disappear";
	private const string BOARD_DISAPPEAR2_EFFECT_PREFAB_NAME = "bit_board_disappear2";
	private const string BOARD_DISAPPEAR2_EFFECT_FADE_PREFAB_NAME = "bit_fade_black2";
	protected QuestBoardListViewManager.InitMode initMode; // 0x138
	[SerializeField] // RVA: 0xC7D4C8 Offset: 0xC7D4C8 VA: 0xC7D4C8
	private TerminalSceneComponent mTerminalScene; // 0x140
	[SerializeField] // RVA: 0xC7D4D8 Offset: 0xC7D4D8 VA: 0xC7D4D8
	private ScrTerminalListTop mTerminalList; // 0x148
	[SerializeField] // RVA: 0xC7D4E8 Offset: 0xC7D4E8 VA: 0xC7D4E8
	private UILabel mNoneLabel; // 0x150
	[SerializeField] // RVA: 0xC7D4F8 Offset: 0xC7D4F8 VA: 0xC7D4F8
	private Camera mUICamera; // 0x158
	[SerializeField] // RVA: 0xC7D508 Offset: 0xC7D508 VA: 0xC7D508
	private ExUITexture mFolderBg; // 0x160
	[SerializeField] // RVA: 0xC7D518 Offset: 0xC7D518 VA: 0xC7D518
	private UIPanel fadePanel; // 0x168
	[SerializeField] // RVA: 0xC7D528 Offset: 0xC7D528 VA: 0xC7D528
	private UIPanel onEffectPanel; // 0x170
	private GameObject mNoneLabelParent; // 0x178
	private AssetData effectAssetData; // 0x180
	private GameObject blackMarkPrefab; // 0x188
	private GameObject whiteMarkPrefab; // 0x190
	private GameObject boardAppearEffectPrefab; // 0x198
	private GameObject boardAppearEffectFadePrefab; // 0x1A0
	private GameObject boardDisappearEffectPrefab; // 0x1A8
	private GameObject boardDisappear2EffectPrefab; // 0x1B0
	private GameObject boardDisappearEffectFadePrefab; // 0x1B8
	private bool mIsDoing_Slide; // 0x1C0
	private float mBaseClipRange; // 0x1C4
	private BoxCollider mBoxCollider; // 0x1C8
	private ExUITexture mFolderBgTemp; // 0x1D0
	private float mCrossFadeTime; // 0x1D8
	private AlphaTransitionCalculator rewardIconAlphaCalculator; // 0x1E0
	private float mAlphaAnimNow; // 0x1E8
	private float mAlphaAnimTimeOld; // 0x1EC
	private int mAlphaAnimCnt; // 0x1F0
	private bool mResetConsumeColor; // 0x1F4
	private float infoTime; // 0x1F8
	private float exitTime; // 0x1FC
	private int mRequestedBGid; // 0x200
	private bool mFaded; // 0x204
	private long mListCreatedTime; // 0x208
	[CompilerGeneratedAttribute] // RVA: 0xC7D538 Offset: 0xC7D538 VA: 0xC7D538
	[DebuggerBrowsableAttribute] // RVA: 0xC7D538 Offset: 0xC7D538 VA: 0xC7D538
	private float <SyncReferenceTime>k__BackingField; // 0x210
	private int waitCount; // 0x214
	public QuestBoardListEffectAppearComponent effectAppearComponent; // 0x218
	public QuestBoardListEffectComponent effectAppearFadeComponent; // 0x220
	public QuestBoardListEffectDisappearComponent effectDisappearComponent; // 0x228
	public QuestBoardListEffectComponent effectDisappear2Component; // 0x230
	public QuestBoardListEffectComponent effectDisappearFadeComponent; // 0x238
	[SerializeField] // RVA: 0xC7D574 Offset: 0xC7D574 VA: 0xC7D574
	private GameObject blockMaskPrefab; // 0x240
	private GameObject blockMask; // 0x248
	private List<ListViewItem> topItemList; // 0x250
	private List<ListViewItem> bottomItemList; // 0x258
	[CompilerGeneratedAttribute] // RVA: 0xC7D584 Offset: 0xC7D584 VA: 0xC7D584
	private static Func<WarEntity, bool> <>f__am$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7D594 Offset: 0xC7D594 VA: 0xC7D594
	private static Func<WarEntity, bool> <>f__am$cache1; // 0x30

	// Properties
	public static float OUT_POS_OFS_X { get; }
	public float AlphaAnimNow { get; }
	public long ListCreatedTime { get; }
	public float SyncReferenceTime { get; set; }
	public List<QuestBoardListViewObject> ObjectList { get; }

	// Methods

	// RVA: 0x15D3308 Offset: 0x15D3308 VA: 0x15D3308
	public void .ctor() { }

	// RVA: 0x15D3398 Offset: 0x15D3398 VA: 0x15D3398
	public static float get_OUT_POS_OFS_X() { }

	// RVA: 0x15D340C Offset: 0x15D340C VA: 0x15D340C
	public QuestBoardListViewManager.InitMode GetInitMode() { }

	// RVA: 0x15CFCDC Offset: 0x15CFCDC VA: 0x15CFCDC
	public float get_AlphaAnimNow() { }

	// RVA: 0x15C69E8 Offset: 0x15C69E8 VA: 0x15C69E8
	public long get_ListCreatedTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B60 Offset: 0xCD3B60 VA: 0xCD3B60
	// RVA: 0x15D3414 Offset: 0x15D3414 VA: 0x15D3414
	public void set_SyncReferenceTime(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3B70 Offset: 0xCD3B70 VA: 0xCD3B70
	// RVA: 0x15CE878 Offset: 0x15CE878 VA: 0x15CE878
	public float get_SyncReferenceTime() { }

	// RVA: 0x15D341C Offset: 0x15D341C VA: 0x15D341C
	private void Awake() { }

	// RVA: 0x15D354C Offset: 0x15D354C VA: 0x15D354C
	private void Update() { }

	// RVA: 0x15D0BD8 Offset: 0x15D0BD8 VA: 0x15D0BD8
	public UIScrollView GetScrollView() { }

	// RVA: 0x15D0BE0 Offset: 0x15D0BE0 VA: 0x15D0BE0
	public Camera GetCamera() { }

	// RVA: 0x15D3740 Offset: 0x15D3740 VA: 0x15D3740
	public void SetScrollBarEnable(bool isEnable) { }

	// RVA: 0x15D38D0 Offset: 0x15D38D0 VA: 0x15D38D0
	public List<QuestBoardListViewObject> get_ObjectList() { }

	// RVA: 0x15D3A9C Offset: 0x15D3A9C VA: 0x15D3A9C
	public void CreateList(QuestBoardListViewItem.InfoKind info_kind, List<MapControl.QuestInfo> qinf_list, float pos_itvl_y, float clip_w, bool isAllDisp = False) { }

	// RVA: 0x15D4100 Offset: 0x15D4100 VA: 0x15D4100
	public void SetTerminalTopEffectPlay(int targetWarId, bool isClose) { }

	// RVA: 0x15D43E8 Offset: 0x15D43E8 VA: 0x15D43E8
	public void MoveBoardForTerminalTopEffect(bool isClose, bool isForce, float moveTime, Easing.TYPE easeType, Action endAct) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3B80 Offset: 0xCD3B80 VA: 0xCD3B80
	// RVA: 0x15D4AA8 Offset: 0x15D4AA8 VA: 0x15D4AA8
	private IEnumerator WaitFinish(Action endAct) { }

	// RVA: 0x15D4B3C Offset: 0x15D4B3C VA: 0x15D4B3C
	public void DispBoardForTerminalTopEffect(bool isBoardDisp, int warId, bool isBadgeDisp, bool isBlackMarkOnly, bool isSpecialClosedBanner) { }

	// RVA: 0x15D4C2C Offset: 0x15D4C2C VA: 0x15D4C2C
	private QuestBoardListViewObject GetQuestBoardObjForWarId(int warId) { }

	// RVA: 0x15D4F04 Offset: 0x15D4F04 VA: 0x15D4F04
	public PartyServantListViewItem GetItem(int index) { }
