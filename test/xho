	// RVA: 0x2B386CC Offset: 0x2B386CC VA: 0x2B386CC
	public bool get_layersAffectMassCenter() { }

	// RVA: 0x2B38738 Offset: 0x2B38738 VA: 0x2B38738
	public void set_layersAffectMassCenter(bool value) { }

	// RVA: 0x2B387AC Offset: 0x2B387AC VA: 0x2B387AC
	public float get_leftFeetBottomHeight() { }

	// RVA: 0x2B38818 Offset: 0x2B38818 VA: 0x2B38818
	public float get_rightFeetBottomHeight() { }

	[NativeMethodAttribute] // RVA: 0xBF7794 Offset: 0xBF7794 VA: 0xBF7794
	// RVA: 0x2B38884 Offset: 0x2B38884 VA: 0x2B38884
	public void Update(float deltaTime) { }

	// RVA: 0x2B385F4 Offset: 0x2B385F4 VA: 0x2B385F4
	public bool get_logWarnings() { }

	// RVA: 0x2B35D80 Offset: 0x2B35D80 VA: 0x2B35D80
	private void get_deltaPosition_Injected(out Vector3 ret) { }

	// RVA: 0x2B35E20 Offset: 0x2B35E20 VA: 0x2B35E20
	private void get_deltaRotation_Injected(out Quaternion ret) { }

	// RVA: 0x2B35EC4 Offset: 0x2B35EC4 VA: 0x2B35EC4
	private void get_rootPosition_Injected(out Vector3 ret) { }

	// RVA: 0x2B35F64 Offset: 0x2B35F64 VA: 0x2B35F64
	private void get_rootRotation_Injected(out Quaternion ret) { }

	// RVA: 0x2B36320 Offset: 0x2B36320 VA: 0x2B36320
	private void get_bodyPositionInternal_Injected(out Vector3 ret) { }

	// RVA: 0x2B36394 Offset: 0x2B36394 VA: 0x2B36394
	private void set_bodyPositionInternal_Injected(ref Vector3 value) { }

	// RVA: 0x2B364F8 Offset: 0x2B364F8 VA: 0x2B364F8
	private void get_bodyRotationInternal_Injected(out Quaternion ret) { }

	// RVA: 0x2B3656C Offset: 0x2B3656C VA: 0x2B3656C
	private void set_bodyRotationInternal_Injected(ref Quaternion value) { }

	// RVA: 0x2B3665C Offset: 0x2B3665C VA: 0x2B3665C
	private void GetGoalPosition_Injected(AvatarIKGoal goal, out Vector3 ret) { }

	// RVA: 0x2B36768 Offset: 0x2B36768 VA: 0x2B36768
	private void SetGoalPosition_Injected(AvatarIKGoal goal, ref Vector3 goalPosition) { }

	// RVA: 0x2B36860 Offset: 0x2B36860 VA: 0x2B36860
	private void GetGoalRotation_Injected(AvatarIKGoal goal, out Quaternion ret) { }

	// RVA: 0x2B36970 Offset: 0x2B36970 VA: 0x2B36970
	private void SetGoalRotation_Injected(AvatarIKGoal goal, ref Quaternion goalRotation) { }

	// RVA: 0x2B36D44 Offset: 0x2B36D44 VA: 0x2B36D44
	private void SetLookAtPositionInternal_Injected(ref Vector3 lookAtPosition) { }

	// RVA: 0x2B37784 Offset: 0x2B37784 VA: 0x2B37784
	private void get_pivotPosition_Injected(out Vector3 ret) { }

	// RVA: 0x2B37858 Offset: 0x2B37858 VA: 0x2B37858
	private void MatchTarget_Injected(ref Vector3 matchPosition, ref Quaternion matchRotation, int targetBodyPart, ref MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime) { }

	// RVA: 0x2B37E38 Offset: 0x2B37E38 VA: 0x2B37E38
	private void get_targetPosition_Injected(out Vector3 ret) { }

	// RVA: 0x2B37ED8 Offset: 0x2B37ED8 VA: 0x2B37ED8
	private void get_targetRotation_Injected(out Quaternion ret) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
[NativeHeaderAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
[NativeHeaderAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
[NativeHeaderAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
[NativeHeaderAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
[StaticAccessorAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
[NativeHeaderAttribute] // RVA: 0xBF64A4 Offset: 0xBF64A4 VA: 0xBF64A4
public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2701
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD78148 Offset: 0xD78148 VA: 0xD78148
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xD78150 Offset: 0xD78150 VA: 0xD78150 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD7815C Offset: 0xD7815C VA: 0xD7815C
	public void SetHandle(PlayableHandle handle) { }

	// RVA: 0xD78164 Offset: 0xD78164 VA: 0xD78164 Slot: 5
	public bool Equals(AnimatorControllerPlayable other) { }

	// RVA: 0x2B34914 Offset: 0x2B34914 VA: 0x2B34914
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xBF65A8 Offset: 0xBF65A8 VA: 0xBF65A8
[NativeHeaderAttribute] // RVA: 0xBF65A8 Offset: 0xBF65A8 VA: 0xBF65A8
[NativeHeaderAttribute] // RVA: 0xBF65A8 Offset: 0xBF65A8 VA: 0xBF65A8
[UsedByNativeCodeAttribute] // RVA: 0xBF65A8 Offset: 0xBF65A8 VA: 0xBF65A8
public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2702
{
	// Fields
	internal AnimatorOverrideController.OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x18

	// Methods

	[NativeConditionalAttribute] // RVA: 0xBF77CC Offset: 0xBF77CC VA: 0xBF77CC
	[RequiredByNativeCodeAttribute] // RVA: 0xBF77CC Offset: 0xBF77CC VA: 0xBF77CC
	// RVA: 0x2B388F8 Offset: 0x2B388F8 VA: 0x2B388F8
	internal static void OnInvalidateOverrideController(AnimatorOverrideController controller) { }
}

// Namespace: 
internal sealed class AnimatorOverrideController.OnOverrideControllerDirtyCallback : MulticastDelegate // TypeDefIndex: 2703
{
	// Methods

	// RVA: 0x2B38B34 Offset: 0x2B38B34 VA: 0x2B38B34
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2B38934 Offset: 0x2B38934 VA: 0x2B38934 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x2B38B44 Offset: 0x2B38B44 VA: 0x2B38B44 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x2B38B78 Offset: 0x2B38B78 VA: 0x2B38B78 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public enum HumanBodyBones // TypeDefIndex: 2704
{
	// Fields
	public int value__; // 0x0
	public const HumanBodyBones Hips = 0;
	public const HumanBodyBones LeftUpperLeg = 1;
	public const HumanBodyBones RightUpperLeg = 2;
	public const HumanBodyBones LeftLowerLeg = 3;
	public const HumanBodyBones RightLowerLeg = 4;
	public const HumanBodyBones LeftFoot = 5;
	public const HumanBodyBones RightFoot = 6;
	public const HumanBodyBones Spine = 7;
	public const HumanBodyBones Chest = 8;
	public const HumanBodyBones UpperChest = 54;
	public const HumanBodyBones Neck = 9;
	public const HumanBodyBones Head = 10;
	public const HumanBodyBones LeftShoulder = 11;
	public const HumanBodyBones RightShoulder = 12;
	public const HumanBodyBones LeftUpperArm = 13;
	public const HumanBodyBones RightUpperArm = 14;
	public const HumanBodyBones LeftLowerArm = 15;
	public const HumanBodyBones RightLowerArm = 16;
	public const HumanBodyBones LeftHand = 17;
	public const HumanBodyBones RightHand = 18;
	public const HumanBodyBones LeftToes = 19;
	public const HumanBodyBones RightToes = 20;
	public const HumanBodyBones LeftEye = 21;
	public const HumanBodyBones RightEye = 22;
	public const HumanBodyBones Jaw = 23;
	public const HumanBodyBones LeftThumbProximal = 24;
	public const HumanBodyBones LeftThumbIntermediate = 25;
	public const HumanBodyBones LeftThumbDistal = 26;
	public const HumanBodyBones LeftIndexProximal = 27;
	public const HumanBodyBones LeftIndexIntermediate = 28;
	public const HumanBodyBones LeftIndexDistal = 29;
	public const HumanBodyBones LeftMiddleProximal = 30;
	public const HumanBodyBones LeftMiddleIntermediate = 31;
	public const HumanBodyBones LeftMiddleDistal = 32;
	public const HumanBodyBones LeftRingProximal = 33;
	public const HumanBodyBones LeftRingIntermediate = 34;
	public const HumanBodyBones LeftRingDistal = 35;
	public const HumanBodyBones LeftLittleProximal = 36;
	public const HumanBodyBones LeftLittleIntermediate = 37;
	public const HumanBodyBones LeftLittleDistal = 38;
	public const HumanBodyBones RightThumbProximal = 39;
	public const HumanBodyBones RightThumbIntermediate = 40;
	public const HumanBodyBones RightThumbDistal = 41;
	public const HumanBodyBones RightIndexProximal = 42;
	public const HumanBodyBones RightIndexIntermediate = 43;
	public const HumanBodyBones RightIndexDistal = 44;
	public const HumanBodyBones RightMiddleProximal = 45;
	public const HumanBodyBones RightMiddleIntermediate = 46;
	public const HumanBodyBones RightMiddleDistal = 47;
	public const HumanBodyBones RightRingProximal = 48;
	public const HumanBodyBones RightRingIntermediate = 49;
	public const HumanBodyBones RightRingDistal = 50;
	public const HumanBodyBones RightLittleProximal = 51;
	public const HumanBodyBones RightLittleIntermediate = 52;
	public const HumanBodyBones RightLittleDistal = 53;
	public const HumanBodyBones LastBone = 55;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBF663C Offset: 0xBF663C VA: 0xBF663C
[NativeHeaderAttribute] // RVA: 0xBF663C Offset: 0xBF663C VA: 0xBF663C
[NativeTypeAttribute] // RVA: 0xBF663C Offset: 0xBF663C VA: 0xBF663C
public struct SkeletonBone // TypeDefIndex: 2705
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBF6C40 Offset: 0xBF6C40 VA: 0xBF6C40
	public string name; // 0x0
	[NativeNameAttribute] // RVA: 0xBF6C78 Offset: 0xBF6C78 VA: 0xBF6C78
	internal string parentName; // 0x8
	[NativeNameAttribute] // RVA: 0xBF6CB0 Offset: 0xBF6CB0 VA: 0xBF6CB0
	public Vector3 position; // 0x10
	[NativeNameAttribute] // RVA: 0xBF6CE8 Offset: 0xBF6CE8 VA: 0xBF6CE8
	public Quaternion rotation; // 0x1C
	[NativeNameAttribute] // RVA: 0xBF6D20 Offset: 0xBF6D20 VA: 0xBF6D20
	public Vector3 scale; // 0x2C
}

// Namespace: UnityEngine
[NativeTypeAttribute] // RVA: 0xBF66B0 Offset: 0xBF66B0 VA: 0xBF66B0
[NativeHeaderAttribute] // RVA: 0xBF66B0 Offset: 0xBF66B0 VA: 0xBF66B0
[NativeHeaderAttribute] // RVA: 0xBF66B0 Offset: 0xBF66B0 VA: 0xBF66B0
public struct HumanLimit // TypeDefIndex: 2706
{
	// Fields
	private Vector3 m_Min; // 0x0
	private Vector3 m_Max; // 0xC
	private Vector3 m_Center; // 0x18
	private float m_AxisLength; // 0x24
	private int m_UseDefaultValues; // 0x28
}

// Namespace: UnityEngine
[NativeTypeAttribute] // RVA: 0xBF6738 Offset: 0xBF6738 VA: 0xBF6738
[RequiredByNativeCodeAttribute] // RVA: 0xBF6738 Offset: 0xBF6738 VA: 0xBF6738
[NativeHeaderAttribute] // RVA: 0xBF6738 Offset: 0xBF6738 VA: 0xBF6738
public struct HumanBone // TypeDefIndex: 2707
{
	// Fields
	private string m_BoneName; // 0x0
	private string m_HumanName; // 0x8
	[NativeNameAttribute] // RVA: 0xBF6D58 Offset: 0xBF6D58 VA: 0xBF6D58
	public HumanLimit limit; // 0x10
}

// Namespace: UnityEngine.Animations
[NativeTypeAttribute] // RVA: 0xBF67AC Offset: 0xBF67AC VA: 0xBF67AC
[FlagsAttribute] // RVA: 0xBF67AC Offset: 0xBF67AC VA: 0xBF67AC
public enum Axis // TypeDefIndex: 2708
{
	// Fields
	public int value__; // 0x0
	public const Axis None = 0;
	public const Axis X = 1;
	public const Axis Y = 2;
	public const Axis Z = 4;
}

// Namespace: UnityEngine.Animations
[NativeTypeAttribute] // RVA: 0xBF67F8 Offset: 0xBF67F8 VA: 0xBF67F8
[UsedByNativeCodeAttribute] // RVA: 0xBF67F8 Offset: 0xBF67F8 VA: 0xBF67F8
[NativeHeaderAttribute] // RVA: 0xBF67F8 Offset: 0xBF67F8 VA: 0xBF67F8
[Serializable]
public struct ConstraintSource // TypeDefIndex: 2709
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBF6D90 Offset: 0xBF6D90 VA: 0xBF6D90
	private Transform m_SourceTransform; // 0x0
	[NativeNameAttribute] // RVA: 0xBF6DC8 Offset: 0xBF6DC8 VA: 0xBF6DC8
	private float m_Weight; // 0x8
}

// Namespace: UnityEngine.Animations
public interface IConstraint // TypeDefIndex: 2710
{}

// Namespace: UnityEngine.Animations
internal interface IConstraintInternal // TypeDefIndex: 2711
{}

// Namespace: UnityEngine.Animations
[RequireComponent] // RVA: 0xBF68A0 Offset: 0xBF68A0 VA: 0xBF68A0
[NativeHeaderAttribute] // RVA: 0xBF68A0 Offset: 0xBF68A0 VA: 0xBF68A0
[NativeHeaderAttribute] // RVA: 0xBF68A0 Offset: 0xBF68A0 VA: 0xBF68A0
[UsedByNativeCodeAttribute] // RVA: 0xBF68A0 Offset: 0xBF68A0 VA: 0xBF68A0
public sealed class RotationConstraint : Behaviour, IConstraint, IConstraintInternal // TypeDefIndex: 2712
{
	// Properties
	public float weight { get; set; }
	public Vector3 rotationAtRest { get; set; }
	public Vector3 rotationOffset { get; set; }
	public Axis rotationAxis { get; set; }
	public bool constraintActive { get; set; }
	public bool locked { get; set; }
	public int sourceCount { get; }

	// Methods

	// RVA: 0x2B349B4 Offset: 0x2B349B4 VA: 0x2B349B4
	private void .ctor() { }

	// RVA: 0x2B349DC Offset: 0x2B349DC VA: 0x2B349DC
	private static void Internal_Create(RotationConstraint self) { }

	// RVA: 0x2B34A48 Offset: 0x2B34A48 VA: 0x2B34A48 Slot: 4
	public float get_weight() { }

	// RVA: 0x2B34AB4 Offset: 0x2B34AB4 VA: 0x2B34AB4 Slot: 5
	public void set_weight(float value) { }

	// RVA: 0x2B34B28 Offset: 0x2B34B28 VA: 0x2B34B28
	public Vector3 get_rotationAtRest() { }

	// RVA: 0x2B34BCC Offset: 0x2B34BCC VA: 0x2B34BCC
	public void set_rotationAtRest(Vector3 value) { }

	// RVA: 0x2B34C68 Offset: 0x2B34C68 VA: 0x2B34C68
	public Vector3 get_rotationOffset() { }

	// RVA: 0x2B34D0C Offset: 0x2B34D0C VA: 0x2B34D0C
	public void set_rotationOffset(Vector3 value) { }

	// RVA: 0x2B34DA8 Offset: 0x2B34DA8 VA: 0x2B34DA8
	public Axis get_rotationAxis() { }

	// RVA: 0x2B34E14 Offset: 0x2B34E14 VA: 0x2B34E14
	public void set_rotationAxis(Axis value) { }

	// RVA: 0x2B34E88 Offset: 0x2B34E88 VA: 0x2B34E88 Slot: 6
	public bool get_constraintActive() { }

	// RVA: 0x2B34EF4 Offset: 0x2B34EF4 VA: 0x2B34EF4 Slot: 7
	public void set_constraintActive(bool value) { }

	// RVA: 0x2B34F68 Offset: 0x2B34F68 VA: 0x2B34F68 Slot: 8
	public bool get_locked() { }

	// RVA: 0x2B34FD4 Offset: 0x2B34FD4 VA: 0x2B34FD4 Slot: 9
	public void set_locked(bool value) { }

	// RVA: 0x2B35048 Offset: 0x2B35048 VA: 0x2B35048 Slot: 10
	public int get_sourceCount() { }

	[FreeFunctionAttribute] // RVA: 0xBF7818 Offset: 0xBF7818 VA: 0xBF7818
	// RVA: 0x2B3504C Offset: 0x2B3504C VA: 0x2B3504C
	private static int GetSourceCountInternal(RotationConstraint self) { }

	[FreeFunctionAttribute] // RVA: 0xBF7850 Offset: 0xBF7850 VA: 0xBF7850
	// RVA: 0x2B350B8 Offset: 0x2B350B8 VA: 0x2B350B8 Slot: 11
	public void GetSources(List<ConstraintSource> sources) { }

	// RVA: 0x2B3512C Offset: 0x2B3512C VA: 0x2B3512C Slot: 12
	public void SetSources(List<ConstraintSource> sources) { }

	[FreeFunctionAttribute] // RVA: 0xBF78A4 Offset: 0xBF78A4 VA: 0xBF78A4
	// RVA: 0x2B351C8 Offset: 0x2B351C8 VA: 0x2B351C8
	private static void SetSourcesInternal(RotationConstraint self, List<ConstraintSource> sources) { }

	// RVA: 0x2B3523C Offset: 0x2B3523C VA: 0x2B3523C Slot: 13
	public int AddSource(ConstraintSource source) { }

	// RVA: 0x2B352D4 Offset: 0x2B352D4 VA: 0x2B352D4 Slot: 14
	public void RemoveSource(int index) { }

	[NativeNameAttribute] // RVA: 0xBF78DC Offset: 0xBF78DC VA: 0xBF78DC
	// RVA: 0x2B35470 Offset: 0x2B35470 VA: 0x2B35470
	private void RemoveSourceInternal(int index) { }

	// RVA: 0x2B354E4 Offset: 0x2B354E4 VA: 0x2B354E4 Slot: 15
	public ConstraintSource GetSource(int index) { }

	[NativeNameAttribute] // RVA: 0xBF7914 Offset: 0xBF7914 VA: 0xBF7914
	// RVA: 0x2B35528 Offset: 0x2B35528 VA: 0x2B35528
	private ConstraintSource GetSourceInternal(int index) { }

	// RVA: 0x2B355D4 Offset: 0x2B355D4 VA: 0x2B355D4 Slot: 16
	public void SetSource(int index, ConstraintSource source) { }

	[NativeNameAttribute] // RVA: 0xBF794C Offset: 0xBF794C VA: 0xBF794C
	// RVA: 0x2B35624 Offset: 0x2B35624 VA: 0x2B35624
	private void SetSourceInternal(int index, ConstraintSource source) { }

	// RVA: 0x2B35300 Offset: 0x2B35300 VA: 0x2B35300
	private void ValidateSourceIndex(int index) { }

	// RVA: 0x2B34B58 Offset: 0x2B34B58 VA: 0x2B34B58
	private void get_rotationAtRest_Injected(out Vector3 ret) { }

	// RVA: 0x2B34BF4 Offset: 0x2B34BF4 VA: 0x2B34BF4
	private void set_rotationAtRest_Injected(ref Vector3 value) { }

	// RVA: 0x2B34C98 Offset: 0x2B34C98 VA: 0x2B34C98
	private void get_rotationOffset_Injected(out Vector3 ret) { }

	// RVA: 0x2B34D34 Offset: 0x2B34D34 VA: 0x2B34D34
	private void set_rotationOffset_Injected(ref Vector3 value) { }

	// RVA: 0x2B35260 Offset: 0x2B35260 VA: 0x2B35260 Slot: 17
	private int AddSource_Injected(ref ConstraintSource source) { }

	// RVA: 0x2B35550 Offset: 0x2B35550 VA: 0x2B35550
	private void GetSourceInternal_Injected(int index, out ConstraintSource ret) { }

	// RVA: 0x2B35648 Offset: 0x2B35648 VA: 0x2B35648
	private void SetSourceInternal_Injected(int index, ref ConstraintSource source) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF695C Offset: 0xBF695C VA: 0xBF695C
public class HumanTrait // TypeDefIndex: 2713
{
	// Methods

	// RVA: 0x2B38050 Offset: 0x2B38050 VA: 0x2B38050
	internal static int GetBoneIndexFromMono(int humanId) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF6994 Offset: 0xBF6994 VA: 0xBF6994
public class Motion : Object // TypeDefIndex: 2714
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBF6E00 Offset: 0xBF6E00 VA: 0xBF6E00
	[CompilerGeneratedAttribute] // RVA: 0xBF6E00 Offset: 0xBF6E00 VA: 0xBF6E00
	private readonly bool <isAnimatorMotion>k__BackingField; // 0x18

	// Properties
	public bool isLooping { get; }

	// Methods

	// RVA: 0x2B3230C Offset: 0x2B3230C VA: 0x2B3230C
	protected void .ctor() { }

	[NativeMethodAttribute] // RVA: 0xBF7984 Offset: 0xBF7984 VA: 0xBF7984
	// RVA: 0x2B38ED4 Offset: 0x2B38ED4 VA: 0x2B38ED4
	public bool get_isLooping() { }
}

// Namespace: UnityEngine
[ExcludeFromObjectFactoryAttribute] // RVA: 0xBF69CC Offset: 0xBF69CC VA: 0xBF69CC
[NativeHeaderAttribute] // RVA: 0xBF69CC Offset: 0xBF69CC VA: 0xBF69CC
[UsedByNativeCodeAttribute] // RVA: 0xBF69CC Offset: 0xBF69CC VA: 0xBF69CC
public class RuntimeAnimatorController : Object // TypeDefIndex: 2715
{}

// Namespace: UnityEngine
internal enum AnimationEventSource // TypeDefIndex: 2716
{
	// Fields
	public int value__; // 0x0
	public const AnimationEventSource NoSource = 0;
	public const AnimationEventSource Legacy = 1;
	public const AnimationEventSource Animator = 2;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBF6A28 Offset: 0xBF6A28 VA: 0xBF6A28
[Serializable]
public sealed class AnimationEvent // TypeDefIndex: 2717
{
	// Fields
	internal float m_Time; // 0x10
	internal string m_FunctionName; // 0x18
	internal string m_StringParameter; // 0x20
	internal Object m_ObjectReferenceParameter; // 0x28
	internal float m_FloatParameter; // 0x30
	internal int m_IntParameter; // 0x34
	internal int m_MessageOptions; // 0x38
	internal AnimationEventSource m_Source; // 0x3C
	internal AnimationState m_StateSender; // 0x40
	internal AnimatorStateInfo m_AnimatorStateInfo; // 0x48
	internal AnimatorClipInfo m_AnimatorClipInfo; // 0x6C

	// Properties
	public string stringParameter { get; set; }
	public string functionName { get; set; }
	public float time { get; set; }

	// Methods

	// RVA: 0x2B326F0 Offset: 0x2B326F0 VA: 0x2B326F0
	public void .ctor() { }

	// RVA: 0x2B3275C Offset: 0x2B3275C VA: 0x2B3275C
	public string get_stringParameter() { }

	// RVA: 0x2B32764 Offset: 0x2B32764 VA: 0x2B32764
	public void set_stringParameter(string value) { }

	// RVA: 0x2B3276C Offset: 0x2B3276C VA: 0x2B3276C
	public string get_functionName() { }

	// RVA: 0x2B32774 Offset: 0x2B32774 VA: 0x2B32774
	public void set_functionName(string value) { }

	// RVA: 0x2B3277C Offset: 0x2B3277C VA: 0x2B3277C
	public float get_time() { }

	// RVA: 0x2B32784 Offset: 0x2B32784 VA: 0x2B32784
	public void set_time(float value) { }
}

// Namespace: UnityEngine
public enum PlayMode // TypeDefIndex: 2718
{
	// Fields
	public int value__; // 0x0
	public const PlayMode StopSameLayer = 0;
	public const PlayMode StopAll = 4;
}

// Namespace: UnityEngine
public enum QueueMode // TypeDefIndex: 2719
{
	// Fields
	public int value__; // 0x0
	public const QueueMode CompleteOthers = 0;
	public const QueueMode PlayNow = 2;
}

// Namespace: UnityEngine
public enum AnimationBlendMode // TypeDefIndex: 2720
{
	// Fields
	public int value__; // 0x0
	public const AnimationBlendMode Blend = 0;
	public const AnimationBlendMode Additive = 1;
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xBF6A38 Offset: 0xBF6A38 VA: 0xBF6A38
public sealed class Animation : Behaviour, IEnumerable // TypeDefIndex: 2721
{
	// Properties
	public AnimationClip clip { get; set; }
	public WrapMode wrapMode { set; }
	public bool isPlaying { get; }
	public AnimationState Item { get; }

	// Methods

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF79BC Offset: 0xBF79BC VA: 0xBF79BC
	// RVA: 0x2B31850 Offset: 0x2B31850 VA: 0x2B31850
	public AnimationClip get_clip() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF79CC Offset: 0xBF79CC VA: 0xBF79CC
	// RVA: 0x2B318BC Offset: 0x2B318BC VA: 0x2B318BC
	public void set_clip(AnimationClip value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF79DC Offset: 0xBF79DC VA: 0xBF79DC
	// RVA: 0x2B31930 Offset: 0x2B31930 VA: 0x2B31930
	public void set_wrapMode(WrapMode value) { }

	// RVA: 0x2B319A4 Offset: 0x2B319A4 VA: 0x2B319A4
	public void Stop() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF79EC Offset: 0xBF79EC VA: 0xBF79EC
	// RVA: 0x2B319A8 Offset: 0x2B319A8 VA: 0x2B319A8
	private static void INTERNAL_CALL_Stop(Animation self) { }

	// RVA: 0x2B31A14 Offset: 0x2B31A14 VA: 0x2B31A14
	public void Stop(string name) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF79FC Offset: 0xBF79FC VA: 0xBF79FC
	// RVA: 0x2B31A18 Offset: 0x2B31A18 VA: 0x2B31A18
	private void Internal_StopByName(string name) { }

	// RVA: 0x2B31A8C Offset: 0x2B31A8C VA: 0x2B31A8C
	public void Rewind(string name) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A0C Offset: 0xBF7A0C VA: 0xBF7A0C
	// RVA: 0x2B31A90 Offset: 0x2B31A90 VA: 0x2B31A90
	private void Internal_RewindByName(string name) { }

	// RVA: 0x2B31B04 Offset: 0x2B31B04 VA: 0x2B31B04
	public void Sample() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A1C Offset: 0xBF7A1C VA: 0xBF7A1C
	// RVA: 0x2B31B08 Offset: 0x2B31B08 VA: 0x2B31B08
	private static void INTERNAL_CALL_Sample(Animation self) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A2C Offset: 0xBF7A2C VA: 0xBF7A2C
	// RVA: 0x2B31B74 Offset: 0x2B31B74 VA: 0x2B31B74
	public bool get_isPlaying() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A3C Offset: 0xBF7A3C VA: 0xBF7A3C
	// RVA: 0x2B31BE0 Offset: 0x2B31BE0 VA: 0x2B31BE0
	public bool IsPlaying(string name) { }

	// RVA: 0x2B31C54 Offset: 0x2B31C54 VA: 0x2B31C54
	public AnimationState get_Item(string name) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBF7A4C Offset: 0xBF7A4C VA: 0xBF7A4C
	// RVA: 0x2B31CCC Offset: 0x2B31CCC VA: 0x2B31CCC
	public bool Play() { }

	// RVA: 0x2B31CD4 Offset: 0x2B31CD4 VA: 0x2B31CD4
	public bool Play(PlayMode mode) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A5C Offset: 0xBF7A5C VA: 0xBF7A5C
	// RVA: 0x2B31D4C Offset: 0x2B31D4C VA: 0x2B31D4C
	public bool Play(string animation, PlayMode mode) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBF7A6C Offset: 0xBF7A6C VA: 0xBF7A6C
	// RVA: 0x2B31DD0 Offset: 0x2B31DD0 VA: 0x2B31DD0
	public bool Play(string animation) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A7C Offset: 0xBF7A7C VA: 0xBF7A7C
	// RVA: 0x2B31DD8 Offset: 0x2B31DD8 VA: 0x2B31DD8
	public void CrossFade(string animation, float fadeLength, PlayMode mode) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBF7A8C Offset: 0xBF7A8C VA: 0xBF7A8C
	// RVA: 0x2B31E64 Offset: 0x2B31E64 VA: 0x2B31E64
	public void CrossFade(string animation) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7A9C Offset: 0xBF7A9C VA: 0xBF7A9C
	// RVA: 0x2B31E74 Offset: 0x2B31E74 VA: 0x2B31E74
	public void Blend(string animation, float targetWeight, float fadeLength) { }

	// RVA: 0x2B31F00 Offset: 0x2B31F00 VA: 0x2B31F00
	public void AddClip(AnimationClip clip, string newName) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7AAC Offset: 0xBF7AAC VA: 0xBF7AAC
	// RVA: 0x2B31F18 Offset: 0x2B31F18 VA: 0x2B31F18
	public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame, bool addLoopFrame) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBF7ABC Offset: 0xBF7ABC VA: 0xBF7ABC
	// RVA: 0x2B31F10 Offset: 0x2B31F10 VA: 0x2B31F10
	public void AddClip(AnimationClip clip, string newName, int firstFrame, int lastFrame) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7ACC Offset: 0xBF7ACC VA: 0xBF7ACC
	// RVA: 0x2B31FBC Offset: 0x2B31FBC VA: 0x2B31FBC
	public int GetClipCount() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7ADC Offset: 0xBF7ADC VA: 0xBF7ADC
	// RVA: 0x2B31CD8 Offset: 0x2B31CD8 VA: 0x2B31CD8
	private bool PlayDefaultAnimation(PlayMode mode) { }

	// RVA: 0x2B32028 Offset: 0x2B32028 VA: 0x2B32028 Slot: 4
	public IEnumerator GetEnumerator() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7AEC Offset: 0xBF7AEC VA: 0xBF7AEC
	// RVA: 0x2B31C58 Offset: 0x2B31C58 VA: 0x2B31C58
	internal AnimationState GetState(string name) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7AFC Offset: 0xBF7AFC VA: 0xBF7AFC
	// RVA: 0x2B320C8 Offset: 0x2B320C8 VA: 0x2B320C8
	internal AnimationState GetStateAtIndex(int index) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B0C Offset: 0xBF7B0C VA: 0xBF7B0C
	// RVA: 0x2B3213C Offset: 0x2B3213C VA: 0x2B3213C
	internal int GetStateCount() { }

	// RVA: 0x2B321A8 Offset: 0x2B321A8 VA: 0x2B321A8
	public AnimationClip GetClip(string name) { }
}

// Namespace: 
private sealed class Animation.Enumerator : IEnumerator // TypeDefIndex: 2722
{
	// Fields
	private Animation m_Outer; // 0x10
	private int m_CurrentIndex; // 0x18

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x2B32094 Offset: 0x2B32094 VA: 0x2B32094
	internal void .ctor(Animation outer) { }

	// RVA: 0x2B32260 Offset: 0x2B32260 VA: 0x2B32260 Slot: 4
	public object get_Current() { }

	// RVA: 0x2B32294 Offset: 0x2B32294 VA: 0x2B32294 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x2B322DC Offset: 0x2B322DC VA: 0x2B322DC Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xBF6A70 Offset: 0xBF6A70 VA: 0xBF6A70
public sealed class AnimationState : TrackedReference // TypeDefIndex: 2723
{
	// Properties
	public bool enabled { get; set; }
	public float weight { set; }
	public WrapMode wrapMode { get; set; }
	public float time { get; set; }
	public float normalizedTime { get; set; }
	public float speed { get; set; }
	public float length { get; }
	public int layer { set; }
	public AnimationClip clip { get; }
	public string name { get; }
	public AnimationBlendMode blendMode { set; }

	// Methods

	// RVA: 0x2B3278C Offset: 0x2B3278C VA: 0x2B3278C
	public void .ctor() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B1C Offset: 0xBF7B1C VA: 0xBF7B1C
	// RVA: 0x2B32794 Offset: 0x2B32794 VA: 0x2B32794
	public bool get_enabled() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B2C Offset: 0xBF7B2C VA: 0xBF7B2C
	// RVA: 0x2B32800 Offset: 0x2B32800 VA: 0x2B32800
	public void set_enabled(bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B3C Offset: 0xBF7B3C VA: 0xBF7B3C
	// RVA: 0x2B32874 Offset: 0x2B32874 VA: 0x2B32874
	public void set_weight(float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B4C Offset: 0xBF7B4C VA: 0xBF7B4C
	// RVA: 0x2B328E8 Offset: 0x2B328E8 VA: 0x2B328E8
	public WrapMode get_wrapMode() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B5C Offset: 0xBF7B5C VA: 0xBF7B5C
	// RVA: 0x2B32954 Offset: 0x2B32954 VA: 0x2B32954
	public void set_wrapMode(WrapMode value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B6C Offset: 0xBF7B6C VA: 0xBF7B6C
	// RVA: 0x2B329C8 Offset: 0x2B329C8 VA: 0x2B329C8
	public float get_time() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B7C Offset: 0xBF7B7C VA: 0xBF7B7C
	// RVA: 0x2B32A34 Offset: 0x2B32A34 VA: 0x2B32A34
	public void set_time(float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B8C Offset: 0xBF7B8C VA: 0xBF7B8C
	// RVA: 0x2B32AA8 Offset: 0x2B32AA8 VA: 0x2B32AA8
	public float get_normalizedTime() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7B9C Offset: 0xBF7B9C VA: 0xBF7B9C
	// RVA: 0x2B32B14 Offset: 0x2B32B14 VA: 0x2B32B14
	public void set_normalizedTime(float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7BAC Offset: 0xBF7BAC VA: 0xBF7BAC
	// RVA: 0x2B32B88 Offset: 0x2B32B88 VA: 0x2B32B88
	public float get_speed() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7BBC Offset: 0xBF7BBC VA: 0xBF7BBC
	// RVA: 0x2B32BF4 Offset: 0x2B32BF4 VA: 0x2B32BF4
	public void set_speed(float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7BCC Offset: 0xBF7BCC VA: 0xBF7BCC
	// RVA: 0x2B32C68 Offset: 0x2B32C68 VA: 0x2B32C68
	public float get_length() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7BDC Offset: 0xBF7BDC VA: 0xBF7BDC
	// RVA: 0x2B32CD4 Offset: 0x2B32CD4 VA: 0x2B32CD4
	public void set_layer(int value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7BEC Offset: 0xBF7BEC VA: 0xBF7BEC
	// RVA: 0x2B321F4 Offset: 0x2B321F4 VA: 0x2B321F4
	public AnimationClip get_clip() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7BFC Offset: 0xBF7BFC VA: 0xBF7BFC
	// RVA: 0x2B32D48 Offset: 0x2B32D48 VA: 0x2B32D48
	public void AddMixingTransform(Transform mix, bool recursive) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBF7C0C Offset: 0xBF7C0C VA: 0xBF7C0C
	// RVA: 0x2B32DCC Offset: 0x2B32DCC VA: 0x2B32DCC
	public void AddMixingTransform(Transform mix) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7C1C Offset: 0xBF7C1C VA: 0xBF7C1C
	// RVA: 0x2B32DD4 Offset: 0x2B32DD4 VA: 0x2B32DD4
	public string get_name() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF7C2C Offset: 0xBF7C2C VA: 0xBF7C2C
	// RVA: 0x2B32E40 Offset: 0x2B32E40 VA: 0x2B32E40
	public void set_blendMode(AnimationBlendMode value) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2724
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF939C Offset: 0xBF939C VA: 0xBF939C
[RequireComponent] // RVA: 0xBF939C Offset: 0xBF939C VA: 0xBF939C
[NativeClassAttribute] // RVA: 0xBF939C Offset: 0xBF939C VA: 0xBF939C
public sealed class Cloth : Component // TypeDefIndex: 2725
{
	// Properties
	public float sleepThreshold { get; set; }
	public float bendingStiffness { get; set; }
	public float stretchingStiffness { get; set; }
	public float damping { get; set; }
	public Vector3 externalAcceleration { get; set; }
	public Vector3 randomAcceleration { get; set; }
	public bool useGravity { get; set; }
	public bool enabled { get; set; }
	public float friction { get; set; }
	public float collisionMassScale { get; set; }
	public bool enableContinuousCollision { get; set; }
	public float useVirtualParticles { get; set; }
	public float worldVelocityScale { get; set; }
	public float worldAccelerationScale { get; set; }
	public float clothSolverFrequency { get; set; }
	public bool useTethers { get; set; }
	public float stiffnessFrequency { get; set; }
	public float selfCollisionDistance { get; set; }
	public float selfCollisionStiffness { get; set; }
	[ObsoleteAttribute] // RVA: 0xBF9614 Offset: 0xBF9614 VA: 0xBF9614
	public bool selfCollision { get; set; }
	public Vector3[] vertices { get; }
	public Vector3[] normals { get; }
	[ObsoleteAttribute] // RVA: 0xBF9650 Offset: 0xBF9650 VA: 0xBF9650
	public float useContinuousCollision { get; set; }
	public ClothSkinningCoefficient[] coefficients { get; set; }
	[ObsoleteAttribute] // RVA: 0xBF9688 Offset: 0xBF9688 VA: 0xBF9688
	public bool solverFrequency { get; set; }
	public CapsuleCollider[] capsuleColliders { get; set; }
	public ClothSphereColliderPair[] sphereColliders { get; set; }

	// Methods

	// RVA: 0x2B934EC Offset: 0x2B934EC VA: 0x2B934EC
	public void .ctor() { }

	// RVA: 0x2B934F4 Offset: 0x2B934F4 VA: 0x2B934F4
	public float get_sleepThreshold() { }

	// RVA: 0x2B93560 Offset: 0x2B93560 VA: 0x2B93560
	public void set_sleepThreshold(float value) { }

	// RVA: 0x2B935D4 Offset: 0x2B935D4 VA: 0x2B935D4
	public float get_bendingStiffness() { }

	// RVA: 0x2B93640 Offset: 0x2B93640 VA: 0x2B93640
	public void set_bendingStiffness(float value) { }

	// RVA: 0x2B936B4 Offset: 0x2B936B4 VA: 0x2B936B4
	public float get_stretchingStiffness() { }

	// RVA: 0x2B93720 Offset: 0x2B93720 VA: 0x2B93720
	public void set_stretchingStiffness(float value) { }

	// RVA: 0x2B93794 Offset: 0x2B93794 VA: 0x2B93794
	public float get_damping() { }

	// RVA: 0x2B93800 Offset: 0x2B93800 VA: 0x2B93800
	public void set_damping(float value) { }

	// RVA: 0x2B93874 Offset: 0x2B93874 VA: 0x2B93874
	public Vector3 get_externalAcceleration() { }

	// RVA: 0x2B93918 Offset: 0x2B93918 VA: 0x2B93918
	public void set_externalAcceleration(Vector3 value) { }

	// RVA: 0x2B939B4 Offset: 0x2B939B4 VA: 0x2B939B4
	public Vector3 get_randomAcceleration() { }

	// RVA: 0x2B93A58 Offset: 0x2B93A58 VA: 0x2B93A58
	public void set_randomAcceleration(Vector3 value) { }

	// RVA: 0x2B93AF4 Offset: 0x2B93AF4 VA: 0x2B93AF4
	public bool get_useGravity() { }

	// RVA: 0x2B93B60 Offset: 0x2B93B60 VA: 0x2B93B60
	public void set_useGravity(bool value) { }

	// RVA: 0x2B93BD4 Offset: 0x2B93BD4 VA: 0x2B93BD4
	public bool get_enabled() { }

	// RVA: 0x2B93C40 Offset: 0x2B93C40 VA: 0x2B93C40
	public void set_enabled(bool value) { }

	// RVA: 0x2B93CB4 Offset: 0x2B93CB4 VA: 0x2B93CB4
	public float get_friction() { }

	// RVA: 0x2B93D20 Offset: 0x2B93D20 VA: 0x2B93D20
	public void set_friction(float value) { }

	// RVA: 0x2B93D94 Offset: 0x2B93D94 VA: 0x2B93D94
	public float get_collisionMassScale() { }

	// RVA: 0x2B93E00 Offset: 0x2B93E00 VA: 0x2B93E00
	public void set_collisionMassScale(float value) { }

	// RVA: 0x2B93E74 Offset: 0x2B93E74 VA: 0x2B93E74
	public bool get_enableContinuousCollision() { }

	// RVA: 0x2B93EE0 Offset: 0x2B93EE0 VA: 0x2B93EE0
	public void set_enableContinuousCollision(bool value) { }

	// RVA: 0x2B93F54 Offset: 0x2B93F54 VA: 0x2B93F54
	public float get_useVirtualParticles() { }

	// RVA: 0x2B93FC0 Offset: 0x2B93FC0 VA: 0x2B93FC0
	public void set_useVirtualParticles(float value) { }

	// RVA: 0x2B94034 Offset: 0x2B94034 VA: 0x2B94034
	public float get_worldVelocityScale() { }

	// RVA: 0x2B940A0 Offset: 0x2B940A0 VA: 0x2B940A0
	public void set_worldVelocityScale(float value) { }

	// RVA: 0x2B94114 Offset: 0x2B94114 VA: 0x2B94114
	public float get_worldAccelerationScale() { }

	// RVA: 0x2B94180 Offset: 0x2B94180 VA: 0x2B94180
	public void set_worldAccelerationScale(float value) { }

	// RVA: 0x2B941F4 Offset: 0x2B941F4 VA: 0x2B941F4
	public float get_clothSolverFrequency() { }

	// RVA: 0x2B94260 Offset: 0x2B94260 VA: 0x2B94260
	public void set_clothSolverFrequency(float value) { }

	// RVA: 0x2B942D4 Offset: 0x2B942D4 VA: 0x2B942D4
	public bool get_useTethers() { }

	// RVA: 0x2B94340 Offset: 0x2B94340 VA: 0x2B94340
	public void set_useTethers(bool value) { }

	// RVA: 0x2B943B4 Offset: 0x2B943B4 VA: 0x2B943B4
	public float get_stiffnessFrequency() { }

	// RVA: 0x2B94420 Offset: 0x2B94420 VA: 0x2B94420
	public void set_stiffnessFrequency(float value) { }

	// RVA: 0x2B94494 Offset: 0x2B94494 VA: 0x2B94494
	public float get_selfCollisionDistance() { }

	// RVA: 0x2B94500 Offset: 0x2B94500 VA: 0x2B94500
	public void set_selfCollisionDistance(float value) { }

	// RVA: 0x2B94574 Offset: 0x2B94574 VA: 0x2B94574
	public float get_selfCollisionStiffness() { }

	// RVA: 0x2B945E0 Offset: 0x2B945E0 VA: 0x2B945E0
	public void set_selfCollisionStiffness(float value) { }

	// RVA: 0x2B94654 Offset: 0x2B94654 VA: 0x2B94654
	public void GetVirtualParticleIndices(List<uint> indices) { }

	// RVA: 0x2B94764 Offset: 0x2B94764 VA: 0x2B94764
	public void SetVirtualParticleIndices(List<uint> indices) { }

	// RVA: 0x2B94874 Offset: 0x2B94874 VA: 0x2B94874
	public void GetVirtualParticleWeights(List<Vector3> weights) { }

	// RVA: 0x2B94984 Offset: 0x2B94984 VA: 0x2B94984
	public void SetVirtualParticleWeights(List<Vector3> weights) { }

	// RVA: 0x2B94A94 Offset: 0x2B94A94 VA: 0x2B94A94
	public void GetSelfAndInterCollisionIndices(List<uint> indices) { }

	// RVA: 0x2B94BA4 Offset: 0x2B94BA4 VA: 0x2B94BA4
	public void SetSelfAndInterCollisionIndices(List<uint> indices) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF948C Offset: 0xBF948C VA: 0xBF948C
	// RVA: 0x2B94CB4 Offset: 0x2B94CB4 VA: 0x2B94CB4
	public bool get_selfCollision() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF949C Offset: 0xBF949C VA: 0xBF949C
	// RVA: 0x2B94D20 Offset: 0x2B94D20 VA: 0x2B94D20
	public void set_selfCollision(bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF94AC Offset: 0xBF94AC VA: 0xBF94AC
	// RVA: 0x2B94D94 Offset: 0x2B94D94 VA: 0x2B94D94
	public Vector3[] get_vertices() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF94BC Offset: 0xBF94BC VA: 0xBF94BC
	// RVA: 0x2B94E00 Offset: 0x2B94E00 VA: 0x2B94E00
	public Vector3[] get_normals() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF94CC Offset: 0xBF94CC VA: 0xBF94CC
	// RVA: 0x2B94E6C Offset: 0x2B94E6C VA: 0x2B94E6C
	public float get_useContinuousCollision() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF94DC Offset: 0xBF94DC VA: 0xBF94DC
	// RVA: 0x2B94ED8 Offset: 0x2B94ED8 VA: 0x2B94ED8
	public void set_useContinuousCollision(float value) { }

	// RVA: 0x2B94F4C Offset: 0x2B94F4C VA: 0x2B94F4C
	public void ClearTransformMotion() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF94EC Offset: 0xBF94EC VA: 0xBF94EC
	// RVA: 0x2B94F50 Offset: 0x2B94F50 VA: 0x2B94F50
	private static void INTERNAL_CALL_ClearTransformMotion(Cloth self) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF94FC Offset: 0xBF94FC VA: 0xBF94FC
	// RVA: 0x2B94FBC Offset: 0x2B94FBC VA: 0x2B94FBC
	public ClothSkinningCoefficient[] get_coefficients() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF950C Offset: 0xBF950C VA: 0xBF950C
	// RVA: 0x2B95028 Offset: 0x2B95028 VA: 0x2B95028
	public void set_coefficients(ClothSkinningCoefficient[] value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF951C Offset: 0xBF951C VA: 0xBF951C
