	public bool isParamAddIndividuality() { }

	// RVA: 0x11F02C8 Offset: 0x11F02C8 VA: 0x11F02C8
	public bool isMultipleGainStar() { }

	// RVA: 0x11F02E8 Offset: 0x11F02E8 VA: 0x11F02E8
	public bool isForcedEffectSpeedOne() { }

	// RVA: 0x11F0308 Offset: 0x11F0308 VA: 0x11F0308
	public bool isCheckEnemyFieldSpace() { }

	// RVA: 0x11F0328 Offset: 0x11F0328 VA: 0x11F0328
	public int[] GetFixDamageRates() { }

	// RVA: 0x11F03C0 Offset: 0x11F03C0 VA: 0x11F03C0
	public bool IsIncludeIgnoreIndividuality() { }

	// RVA: 0x11F03E0 Offset: 0x11F03E0 VA: 0x11F03E0
	public bool IsEvenIfWinDie() { }

	// RVA: 0x11F0400 Offset: 0x11F0400 VA: 0x11F0400
	public int GetCallSvtEffectId() { }

	// RVA: 0x11F0408 Offset: 0x11F0408 VA: 0x11F0408
	public bool IsOnParty() { }

	// RVA: 0x11F0428 Offset: 0x11F0428 VA: 0x11F0428
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F78 Offset: 0xCC9F78 VA: 0xCC9F78
	// RVA: 0x11F047C Offset: 0x11F047C VA: 0x11F047C
	private static bool <GetDependFuncIdArray>m__0(DataVals x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F88 Offset: 0xCC9F88 VA: 0xCC9F88
	// RVA: 0x11F04AC Offset: 0x11F04AC VA: 0x11F04AC
	private static int <GetDependFuncIdArray>m__1(DataVals x) { }
}

// Namespace: 
public enum DataVals.TYPE // TypeDefIndex: 6607
{
	// Fields
	public int value__; // 0x0
	public const DataVals.TYPE Rate = 0;
	public const DataVals.TYPE Turn = 1;
	public const DataVals.TYPE Count = 2;
	public const DataVals.TYPE Value = 3;
	public const DataVals.TYPE Value2 = 4;
	public const DataVals.TYPE UseRate = 5;
	public const DataVals.TYPE Target = 6;
	public const DataVals.TYPE Correction = 7;
	public const DataVals.TYPE ParamAdd = 8;
	public const DataVals.TYPE ParamMax = 9;
	public const DataVals.TYPE HideMiss = 10;
	public const DataVals.TYPE OnField = 11;
	public const DataVals.TYPE HideNoEffect = 12;
	public const DataVals.TYPE Unaffected = 13;
	public const DataVals.TYPE ShowState = 14;
	public const DataVals.TYPE AuraEffectId = 15;
	public const DataVals.TYPE ActSet = 16;
	public const DataVals.TYPE ActSetWeight = 17;
	public const DataVals.TYPE ShowQuestNoEffect = 18;
	public const DataVals.TYPE CheckDead = 19;
	public const DataVals.TYPE RatioHPHigh = 20;
	public const DataVals.TYPE RatioHPLow = 21;
	public const DataVals.TYPE SetPassiveFrame = 22;
	public const DataVals.TYPE ProcPassive = 23;
	public const DataVals.TYPE ProcActive = 24;
	public const DataVals.TYPE HideParam = 25;
	public const DataVals.TYPE SkillID = 26;
	public const DataVals.TYPE SkillLV = 27;
	public const DataVals.TYPE ShowCardOnly = 28;
	public const DataVals.TYPE EffectSummon = 29;
	public const DataVals.TYPE RatioHPRangeHigh = 30;
	public const DataVals.TYPE RatioHPRangeLow = 31;
	public const DataVals.TYPE TargetList = 32;
	public const DataVals.TYPE OpponentOnly = 33;
	public const DataVals.TYPE StatusEffectId = 34;
	public const DataVals.TYPE EndBattle = 35;
	public const DataVals.TYPE LoseBattle = 36;
	public const DataVals.TYPE AddIndividualty = 37;
	public const DataVals.TYPE AddLinkageTargetIndividualty = 38;
	public const DataVals.TYPE SameBuffLimitTargetIndividuality = 39;
	public const DataVals.TYPE SameBuffLimitNum = 40;
	public const DataVals.TYPE CheckDuplicate = 41;
	public const DataVals.TYPE OnFieldCount = 42;
	public const DataVals.TYPE TargetRarityList = 43;
	public const DataVals.TYPE DependFuncId = 44;
	public const DataVals.TYPE DependFuncVals = 45;
	public const DataVals.TYPE InvalidHide = 46;
	public const DataVals.TYPE OutEnemyNpcId = 47;
	public const DataVals.TYPE InEnemyNpcId = 48;
	public const DataVals.TYPE OutEnemyPosition = 49;
	public const DataVals.TYPE IgnoreIndividuality = 50;
	public const DataVals.TYPE StarHigher = 51;
	public const DataVals.TYPE ChangeTDCommandType = 52;
	public const DataVals.TYPE ShiftNpcId = 53;
	public const DataVals.TYPE DisplayLastFuncInvalidType = 54;
	public const DataVals.TYPE AndCheckIndividualityList = 55;
	public const DataVals.TYPE WinBattleNotRelatedSurvivalStatus = 56;
	public const DataVals.TYPE ForceSelfInstantDeath = 57;
	public const DataVals.TYPE ChangeMaxBreakGauge = 58;
	public const DataVals.TYPE ParamAddMaxValue = 59;
	public const DataVals.TYPE ParamAddMaxCount = 60;
	public const DataVals.TYPE LossHpChangeDamage = 61;
	public const DataVals.TYPE IncludePassiveIndividuality = 62;
	public const DataVals.TYPE MotionChange = 63;
	public const DataVals.TYPE PopLabelDelay = 64;
	public const DataVals.TYPE NoTargetNoAct = 65;
	public const DataVals.TYPE CardIndex = 66;
	public const DataVals.TYPE CardIndividuality = 67;
	public const DataVals.TYPE WarBoardTakeOverBuff = 68;
	public const DataVals.TYPE ParamAddSelfIndividuality = 69;
	public const DataVals.TYPE ParamAddOpIndividuality = 70;
	public const DataVals.TYPE ParamAddFieldIndividuality = 71;
	public const DataVals.TYPE ParamAddValue = 72;
	public const DataVals.TYPE MultipleGainStar = 73;
	public const DataVals.TYPE NoCheckIndividualityIfNotUnit = 74;
	public const DataVals.TYPE ForcedEffectSpeedOne = 75;
	public const DataVals.TYPE SetLimitCount = 76;
	public const DataVals.TYPE CheckEnemyFieldSpace = 77;
	public const DataVals.TYPE TriggeredFuncPosition = 78;
	public const DataVals.TYPE DamageCount = 79;
	public const DataVals.TYPE DamageRates = 80;
	public const DataVals.TYPE OnPositions = 81;
	public const DataVals.TYPE OffPositions = 82;
	public const DataVals.TYPE TargetIndiv = 83;
	public const DataVals.TYPE IncludeIgnoreIndividuality = 84;
	public const DataVals.TYPE EvenIfWinDie = 85;
	public const DataVals.TYPE CallSvtEffectId = 86;
	public const DataVals.TYPE ForceAddState = 87;
	public const DataVals.TYPE UnSubState = 88;
	public const DataVals.TYPE ForceSubState = 89;
	public const DataVals.TYPE IgnoreIndivUnreleaseable = 90;
	public const DataVals.TYPE OnParty = 91;
	public const DataVals.TYPE CounterId = 92;
	public const DataVals.TYPE CounterLv = 93;
	public const DataVals.TYPE CounterOc = 94;
	public const DataVals.TYPE UseTreasureDevice = 95;
	public const DataVals.TYPE SkillReaction = 96;
}

// Namespace: 
public enum DataVals.OverChargeState // TypeDefIndex: 6608
{
	// Fields
	public int value__; // 0x0
	public const DataVals.OverChargeState VALUE = 1;
	public const DataVals.OverChargeState VALUE2 = 2;
	public const DataVals.OverChargeState RATE = 4;
	public const DataVals.OverChargeState CORRECTION = 8;
	public const DataVals.OverChargeState TARGET = 16;
	public const DataVals.OverChargeState COUNT = 32;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B74 Offset: 0xC42B74 VA: 0xC42B74
private sealed class DataVals.<GetDependDataValsArray>c__AnonStorey0 // TypeDefIndex: 6609
{
	// Fields
	internal List<FuncList.TYPE> funcTypeList; // 0x10

	// Methods

	// RVA: 0x11EE80C Offset: 0x11EE80C VA: 0x11EE80C
	public void .ctor() { }

	// RVA: 0x11F04E4 Offset: 0x11F04E4 VA: 0x11F04E4
	internal bool <>m__0(DataVals x) { }
}

// Namespace: 
public class DeckData // TypeDefIndex: 6610
{
	// Fields
	public BattleDeckServantData[] svts; // 0x10
	public int followerType; // 0x18
	public int stageId; // 0x1C

	// Methods

	// RVA: 0x10C4178 Offset: 0x10C4178 VA: 0x10C4178
	public void .ctor() { }
}

// Namespace: 
public class DeckServant // TypeDefIndex: 6611
{
	// Fields
	public DeckServantData[] svts; // 0x10
	public long userEquipId; // 0x18

	// Methods

	// RVA: 0x10C82DC Offset: 0x10C82DC VA: 0x10C82DC
	public void .ctor() { }

	// RVA: 0x10C82E4 Offset: 0x10C82E4 VA: 0x10C82E4
	public void .ctor(int sum, long userEquipId) { }

	// RVA: 0x10C84EC Offset: 0x10C84EC VA: 0x10C84EC
	public void .ctor(int sum, DeckServant deckInfo) { }

	// RVA: 0x10C8700 Offset: 0x10C8700 VA: 0x10C8700
	public UserServantEntity GetUserServant(int menber) { }

	// RVA: 0x10C88B4 Offset: 0x10C88B4 VA: 0x10C88B4
	public long[] GetEquipList(int menber) { }

	// RVA: 0x10C8B9C Offset: 0x10C8B9C VA: 0x10C8B9C
	public long[] GetEquipList(long userSvtId) { }

	// RVA: 0x10C8E74 Offset: 0x10C8E74 VA: 0x10C8E74
	public bool IsEquip(long userSvtId) { }

	// RVA: 0x10C9190 Offset: 0x10C9190 VA: 0x10C9190
	public bool IsEquip(long userSvtId, out long equipedUserSvtId) { }

	// RVA: 0x10C940C Offset: 0x10C940C VA: 0x10C940C
	public void CollectUserSvtId(List<long> svtCollectList, List<long> equipCollectList) { }
}

// Namespace: 
public class DeckServantData // TypeDefIndex: 6612
{
	// Fields
	public int id; // 0x10
	public long userSvtId; // 0x18
	public long[] userSvtEquipIds; // 0x20
	public bool isFollowerSvt; // 0x28
	public long npcFollowerSvtId; // 0x30
	public int followerType; // 0x38

	// Methods

	// RVA: 0x10C8458 Offset: 0x10C8458 VA: 0x10C8458
	public void .ctor() { }
}

// Namespace: 
public class DropInfo // TypeDefIndex: 6613
{
	// Fields
	public int type; // 0x10
	public int objectId; // 0x14
	public int num; // 0x18
	public int limitCount; // 0x1C
	public int lv; // 0x20
	public int rarity; // 0x24
	public bool isRateUp; // 0x28
	public int originalNum; // 0x2C

	// Methods

	// RVA: 0x10D3DC4 Offset: 0x10D3DC4 VA: 0x10D3DC4
	public void .ctor() { }

	// RVA: 0x10D3DCC Offset: 0x10D3DCC VA: 0x10D3DCC
	public bool isItem() { }

	// RVA: 0x10D3DD8 Offset: 0x10D3DD8 VA: 0x10D3DD8
	public bool isServant() { }

	// RVA: 0x10D3DE4 Offset: 0x10D3DE4 VA: 0x10D3DE4
	public void setNum(int num) { }
}

// Namespace: 
public class DropUpInfo // TypeDefIndex: 6614
{
	// Fields
	public int itemId; // 0x10
	public int dropUpRate; // 0x14

	// Methods

	// RVA: 0x10D3DF0 Offset: 0x10D3DF0 VA: 0x10D3DF0
	public void .ctor() { }
}

// Namespace: 
public static class EntityScriptUtil // TypeDefIndex: 6615
{
	// Methods

	// RVA: -1 Offset: -1
	public static TDestination GetScriptValue<TSource, TDestination>(Dictionary<string, object> script, string key, Func<TSource, TDestination> converter, TDestination defaultValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C326A0 Offset: 0x1C326A0 VA: 0x1C326A0
	|-EntityScriptUtil.GetScriptValue<List<object>, SubBgmPlayArgs[]>
	|-EntityScriptUtil.GetScriptValue<List<object>, List<int>>
	|-EntityScriptUtil.GetScriptValue<object, object>
	|
	|-RVA: 0x1C3254C Offset: 0x1C3254C VA: 0x1C3254C
	|-EntityScriptUtil.GetScriptValue<long, Nullable<int>>
	*/

	// RVA: 0x16FE0F8 Offset: 0x16FE0F8 VA: 0x16FE0F8
	public static bool ScriptHasKey(Dictionary<string, object> script, string key) { }

	// RVA: 0x16FE170 Offset: 0x16FE170 VA: 0x16FE170
	public static string GetStringValue(Dictionary<string, object> script, string key, string defaultValue) { }

	// RVA: 0x16FE1E8 Offset: 0x16FE1E8 VA: 0x16FE1E8
	public static int GetIntValue(Dictionary<string, object> script, string key, int defaultValue = 0) { }
}

// Namespace: 
public static class EntityScriptValueConvertLogic // TypeDefIndex: 6616
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC554D8 Offset: 0xC554D8 VA: 0xC554D8
	private static Func<string, int> <>f__mg$cache0; // 0x0

	// Methods

	// RVA: 0x16FE260 Offset: 0x16FE260 VA: 0x16FE260
	public static List<int> ObjectListToIntList(List<object> rawValue) { }

	// RVA: 0x16FE4E4 Offset: 0x16FE4E4 VA: 0x16FE4E4
	public static int[][] ObjectListTo2DimensionalIntArray(List<object> rawValue, char separator = '\x2c') { }

	// RVA: 0x16FE71C Offset: 0x16FE71C VA: 0x16FE71C
	public static string[][] ObjectListTo2DimensionalStringArray(List<object> rawValue, char separator = '\x2c') { }
}

// Namespace: 
public class EquipTargetInfo // TypeDefIndex: 6617
{
	// Fields
	private static int LOT_RATE; // 0x0
	public long userId; // 0x10
	public ObscuredLong userSvtId; // 0x18
	public ObscuredInt svtId; // 0x38
	public int limitCount; // 0x48
	public int lv; // 0x4C
	public int exp; // 0x50
	public int hp; // 0x54
	public int atk; // 0x58
	public int skillId1; // 0x5C
	public int skillId2; // 0x60
	public int skillId3; // 0x64
	public int skillLv1; // 0x68
	public int skillLv2; // 0x6C
	public int skillLv3; // 0x70
	public long updatedAt; // 0x78

	// Methods

	// RVA: 0x170AD7C Offset: 0x170AD7C VA: 0x170AD7C
	public void .ctor() { }

	// RVA: 0x170AD84 Offset: 0x170AD84 VA: 0x170AD84
	public void .ctor(EquipTargetInfo equipTargetInfo) { }

	// RVA: 0x170AE30 Offset: 0x170AE30 VA: 0x170AE30
	public void .ctor(int svtId, int limitCnt = 0, int level = 1) { }

	// RVA: 0x170B2C8 Offset: 0x170B2C8 VA: 0x170B2C8
	public int getServantLevel() { }

	// RVA: 0x170B2D0 Offset: 0x170B2D0 VA: 0x170B2D0
	public int getLevelMax() { }

	// RVA: 0x170B404 Offset: 0x170B404 VA: 0x170B404
	public int[] getSkillIdList() { }

	// RVA: 0x170B500 Offset: 0x170B500 VA: 0x170B500
	public int[] getSkillLevelList() { }

	// RVA: 0x170B5FC Offset: 0x170B5FC VA: 0x170B5FC
	public void getSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x170B924 Offset: 0x170B924 VA: 0x170B924
	public int getFriendPointUpVal() { }

	// RVA: 0x170BB1C Offset: 0x170BB1C VA: 0x170BB1C
	public FuncList.TYPE getFriendPointUpType() { }

	// RVA: 0x170BD40 Offset: 0x170BD40 VA: 0x170BD40
	public bool getEventUpVal(int wearersSvtId, int wearesLimitCount, int wearesDispLimitCount, EventUpValSetupInfo setupInfo) { }

	// RVA: 0x170BF80 Offset: 0x170BF80 VA: 0x170BF80
	public bool getEventUpVal(ref EventUpValInfo eventUpVallInfo, bool isSupport = False) { }

	// RVA: 0x170C1D0 Offset: 0x170C1D0 VA: 0x170C1D0
	public bool getExpInfo(out int exp, out int lateExp, out float barExp) { }

	// RVA: 0x170C478 Offset: 0x170C478 VA: 0x170C478
	public string GetSvtName() { }

	// RVA: 0x170C608 Offset: 0x170C608 VA: 0x170C608
	private static void .cctor() { }
}

// Namespace: 
public class EventDropItemUpValInfo // TypeDefIndex: 6618
{
	// Fields
	public int eventId; // 0x10
	public int member; // 0x14
	public FunctionEntity funcEntity; // 0x18
	public FunctionGroupEntity funcGroupEntity; // 0x20
	public FunctionGroupEntity baseFuncGroupEntity; // 0x28
	public int baseFuncId; // 0x30
	public FuncList.TYPE baseFuncType; // 0x34
	public Target.TYPE targetType; // 0x38
	public int priority; // 0x3C
	public ItemEntity itemEntity; // 0x40
	public bool isEquipUp; // 0x48
	public int addCount; // 0x4C
	public int rateCount; // 0x50
	public bool isInvalid; // 0x54

	// Methods

	// RVA: 0x18787F8 Offset: 0x18787F8 VA: 0x18787F8
	public void .ctor(int member, EventDropUpValInfo dropInfo, bool isEquip = False) { }

	// RVA: 0x1878B20 Offset: 0x1878B20 VA: 0x1878B20
	public void .ctor(int member, EventDropUpValInfo dropInfo, ItemEntity itemEntity) { }
}

// Namespace: 
public class EventDropUpValInfo // TypeDefIndex: 6619
{
	// Fields
	public int eventId; // 0x10
	public FunctionEntity funcEntity; // 0x18
	public int individuality; // 0x20
	public bool isEquipUp; // 0x24
	public int addCount; // 0x28
	public int rateCount; // 0x2C
	public bool isInvalid; // 0x30

	// Methods

	// RVA: 0x1878E54 Offset: 0x1878E54 VA: 0x1878E54
	public void .ctor(int eventId, FunctionEntity funcEntity) { }

	// RVA: 0x1878E94 Offset: 0x1878E94 VA: 0x1878E94
	public void .ctor(int eventId, FunctionEntity funcEntity, int individuality) { }

	// RVA: 0x1878ED8 Offset: 0x1878ED8 VA: 0x1878ED8
	public void SetAddCount(int v, bool isEquipUp = False, bool isInvalid = False) { }

	// RVA: 0x1878EF0 Offset: 0x1878EF0 VA: 0x1878EF0
	public void SetRateCount(int v, bool isEquipUp = False, bool isInvalid = False) { }

	// RVA: 0x1878F08 Offset: 0x1878F08 VA: 0x1878F08
	public FuncList.TYPE GetFuncType() { }
}

// Namespace: 
public class EventMargeItemUpValInfo // TypeDefIndex: 6620
{
	// Fields
	public int eventId; // 0x10
	public int member; // 0x14
	public string servantName; // 0x18
	public bool isFollower; // 0x20
	public bool isOtherUp; // 0x21
	public FunctionGroupEntity funcGroupEntity; // 0x28
	public FunctionGroupEntity baseFuncGroupEntity; // 0x30
	public int baseFuncId; // 0x38
	public FuncList.TYPE baseFuncType; // 0x3C
	public Target.TYPE targetType; // 0x40
	public int priority1; // 0x44
	public int priority2; // 0x48
	public ItemEntity itemEntity; // 0x50
	public bool isEquipUp; // 0x58
	public int addCount; // 0x5C
	public int rateCount; // 0x60
	private bool isFriendPointBonus; // 0x64
	private int friendPointBonus; // 0x68
	private bool isServantPoint; // 0x6C
	private int servantPoint; // 0x70
	private int servantPointRank; // 0x74

	// Methods

	// RVA: 0x16095E8 Offset: 0x16095E8 VA: 0x16095E8
	public void .ctor(EventDropItemUpValInfo dropItemInfo) { }

	// RVA: 0x16096D8 Offset: 0x16096D8 VA: 0x16096D8
	public void .ctor(int member, string servantName, bool isFollower, bool isOtherUp, EventDropItemUpValInfo dropItemInfo) { }

	// RVA: 0x160981C Offset: 0x160981C VA: 0x160981C
	public void .ctor(int eventId, int friendPointBonus) { }

	// RVA: 0x1609864 Offset: 0x1609864 VA: 0x1609864
	public void .ctor(int eventId) { }

	// RVA: 0x1609898 Offset: 0x1609898 VA: 0x1609898
	public bool IsFriendPointUpBonus() { }

	// RVA: 0x16098A0 Offset: 0x16098A0 VA: 0x16098A0
	public void SetServantPointInfo(int servantPoint, int servantPointRank, bool isFollower) { }

	// RVA: 0x16098B8 Offset: 0x16098B8 VA: 0x16098B8
	public bool IsServantPoint() { }

	// RVA: 0x16098C0 Offset: 0x16098C0 VA: 0x16098C0
	public bool IsServantSelfValInfo() { }

	// RVA: 0x16098D0 Offset: 0x16098D0 VA: 0x16098D0
	public string GetColorString() { }

	// RVA: 0x1609964 Offset: 0x1609964 VA: 0x1609964
	public string GetServantName() { }

	// RVA: 0x1609A68 Offset: 0x1609A68 VA: 0x1609A68
	public string GetItemName() { }

	// RVA: 0x1609AE4 Offset: 0x1609AE4 VA: 0x1609AE4
	public string GetNameTitleString() { }

	// RVA: 0x1609B60 Offset: 0x1609B60 VA: 0x1609B60
	public string GetNameTotalString() { }

	// RVA: 0x1609BDC Offset: 0x1609BDC VA: 0x1609BDC
	public string GetTargetString() { }

	// RVA: 0x1609D54 Offset: 0x1609D54 VA: 0x1609D54
	public string GetEventUpString() { }

	// RVA: 0x160A1CC Offset: 0x160A1CC VA: 0x160A1CC
	public void SetIcon(UISprite sprite) { }

	// RVA: 0x160A3B8 Offset: 0x160A3B8 VA: 0x160A3B8
	public int CompPersonalPriority(EventMargeItemUpValInfo info) { }

	// RVA: 0x160A410 Offset: 0x160A410 VA: 0x160A410
	public int CompMemberPriority(EventMargeItemUpValInfo info) { }

	// RVA: 0x160A49C Offset: 0x160A49C VA: 0x160A49C
	public int CompPartyPriority(EventMargeItemUpValInfo info) { }
}

// Namespace: 
public class EventMemberMargeUpValInfo // TypeDefIndex: 6621
{
	// Fields
	public int eventId; // 0x10
	public int member; // 0x14
	public ServantEntity servantEntity; // 0x18
	public string servantName; // 0x20
	public bool isFollower; // 0x28
	public List<EventMargeItemUpValInfo> margeList; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC554E8 Offset: 0xC554E8 VA: 0xC554E8
	private static Comparison<EventMargeItemUpValInfo> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x160D1F4 Offset: 0x160D1F4 VA: 0x160D1F4
	public void .ctor(int eventId, int member, ServantEntity servantEntity, string servantName, bool isFollower) { }

	// RVA: 0x160D2A4 Offset: 0x160D2A4 VA: 0x160D2A4
	public bool IsEmpry() { }

	// RVA: 0x160D310 Offset: 0x160D310 VA: 0x160D310
	public int GetCount() { }

	// RVA: 0x160D370 Offset: 0x160D370 VA: 0x160D370
	public EventMargeItemUpValInfo GetMargeItem(int index) { }

	// RVA: 0x160D418 Offset: 0x160D418 VA: 0x160D418
	public void Add(EventDropItemUpValInfo[] dropItemInfoList) { }

	// RVA: 0x160D490 Offset: 0x160D490 VA: 0x160D490
	public void Add(EventDropItemUpValInfo dropItemInfo) { }

	// RVA: 0x160DA34 Offset: 0x160DA34 VA: 0x160DA34
	public EventMargeItemUpValInfo[] GetList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F98 Offset: 0xCC9F98 VA: 0xCC9F98
	// RVA: 0x160DB28 Offset: 0x160DB28 VA: 0x160DB28
	private static int <GetList>m__0(EventMargeItemUpValInfo a, EventMargeItemUpValInfo b) { }
}

// Namespace: 
public class EventPartyMargeUpValInfo // TypeDefIndex: 6622
{
	// Fields
	public int eventId; // 0x10
	public ServantEntity[] svtEntityList; // 0x18
	public string[] servantNameList; // 0x20
	public bool[] isFollowerList; // 0x28
	public List<EventMargeItemUpValInfo> margeList; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC554F8 Offset: 0xC554F8 VA: 0xC554F8
	private static Comparison<EventMargeItemUpValInfo> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x197BFBC Offset: 0x197BFBC VA: 0x197BFBC
	public void .ctor(int eventId, ServantEntity[] svtEntityList, string[] servantNameList, bool[] isFollowerList) { }

	// RVA: 0x197C05C Offset: 0x197C05C VA: 0x197C05C
	public bool IsEmpry() { }

	// RVA: 0x197C0C8 Offset: 0x197C0C8 VA: 0x197C0C8
	public int GetCount() { }

	// RVA: 0x197C128 Offset: 0x197C128 VA: 0x197C128
	public EventMargeItemUpValInfo GetMargeItem(int index) { }

	// RVA: 0x197C1D0 Offset: 0x197C1D0 VA: 0x197C1D0
	public void Add(EventDropItemUpValInfo[] dropItemInfoList) { }

	// RVA: 0x197C248 Offset: 0x197C248 VA: 0x197C248
	public void Add(EventDropItemUpValInfo dropItemInfo) { }

	// RVA: 0x197CAC0 Offset: 0x197CAC0 VA: 0x197CAC0
	public EventMargeItemUpValInfo[] GetList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9FA8 Offset: 0xCC9FA8 VA: 0xCC9FA8
	// RVA: 0x197CBB4 Offset: 0x197CBB4 VA: 0x197CBB4
	private static int <GetList>m__0(EventMargeItemUpValInfo a, EventMargeItemUpValInfo b) { }
}

// Namespace: 
public class EventPersonalMargeUpValInfo // TypeDefIndex: 6623
{
	// Fields
	public int eventId; // 0x10
	public ServantEntity servantEntity; // 0x18
	public List<EventMargeItemUpValInfo> margeList; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC55508 Offset: 0xC55508 VA: 0xC55508
	private static Comparison<EventMargeItemUpValInfo> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x197CBE8 Offset: 0x197CBE8 VA: 0x197CBE8
	public void .ctor(int eventId, ServantEntity servantEntity) { }

	// RVA: 0x197CC74 Offset: 0x197CC74 VA: 0x197CC74
	public bool IsEmpty() { }

	// RVA: 0x197CCE0 Offset: 0x197CCE0 VA: 0x197CCE0
	public int GetCount() { }

	// RVA: 0x197CD40 Offset: 0x197CD40 VA: 0x197CD40
	public EventMargeItemUpValInfo GetMargeItem(int index) { }

	// RVA: 0x197CDE8 Offset: 0x197CDE8 VA: 0x197CDE8
	public void Add(EventDropItemUpValInfo[] dropItemInfoList) { }

	// RVA: 0x197CFC4 Offset: 0x197CFC4 VA: 0x197CFC4
	public void Add(EventDropItemUpValInfo dropItemInfo, bool isInvalid) { }

	// RVA: 0x197D57C Offset: 0x197D57C VA: 0x197D57C
	public EventMargeItemUpValInfo[] GetList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9FB8 Offset: 0xCC9FB8 VA: 0xCC9FB8
	// RVA: 0x197D670 Offset: 0x197D670 VA: 0x197D670
	private static int <GetList>m__0(EventMargeItemUpValInfo a, EventMargeItemUpValInfo b) { }
}

// Namespace: 
public class EventRandomMissionClearManager : ScriptableObject // TypeDefIndex: 6624
{
	// Fields
	protected static readonly string SAVE_DATA_VERSION; // 0x0
	protected static readonly int LIST_MAX; // 0x8
	protected static bool isModify; // 0xC
	protected static bool isContinueDevice; // 0xD
	protected static List<ClearRandomMissionInfo> clearRandomMissionList; // 0x10

	// Methods

	// RVA: 0x16A649C Offset: 0x16A649C VA: 0x16A649C
	public void .ctor() { }

	// RVA: 0x16A64A4 Offset: 0x16A64A4 VA: 0x16A64A4
	protected static string GetSaveFileName() { }

	// RVA: 0x16A657C Offset: 0x16A657C VA: 0x16A657C
	public static void DeleteSaveData() { }

	// RVA: 0x16A6600 Offset: 0x16A6600 VA: 0x16A6600
	public static void Initialize() { }

	// RVA: 0x16A6C24 Offset: 0x16A6C24 VA: 0x16A6C24
	public static void ClearSaveDataList() { }

	// RVA: 0x16A6D28 Offset: 0x16A6D28 VA: 0x16A6D28
	public static void AddClearRandomMissionInfo(ClearRandomMissionInfo info) { }

	// RVA: 0x16A6E74 Offset: 0x16A6E74 VA: 0x16A6E74
	public static ClearRandomMissionInfo[] GetClearRandomMissionInfos() { }

	// RVA: 0x16A665C Offset: 0x16A665C VA: 0x16A665C
	public static bool ReadData() { }

	// RVA: 0x16A6EF8 Offset: 0x16A6EF8 VA: 0x16A6EF8
	public static bool WriteData() { }

	// RVA: 0x16A7400 Offset: 0x16A7400 VA: 0x16A7400
	private static void .cctor() { }
}

// Namespace: 
public class EventServantFatigueInfo // TypeDefIndex: 6625
{
	// Fields
	public int svtId; // 0x10
	public long recoveryAt; // 0x18

	// Methods

	// RVA: 0x16DF888 Offset: 0x16DF888 VA: 0x16DF888
	public void .ctor() { }
}

// Namespace: 
public class EventUpValInfo // TypeDefIndex: 6626
{
	// Fields
	public EventUpValSetupInfo setupInfo; // 0x10
	public int svtId; // 0x18
	public int limitCount; // 0x1C
	public int dispLimitCount; // 0x20
	public int equipSvtId; // 0x24
	public int npcFlag; // 0x28
	public List<EventDropUpValInfo> dropList; // 0x30

	// Methods

	// RVA: 0x10ACED4 Offset: 0x10ACED4 VA: 0x10ACED4
	public void .ctor(EventUpValSetupInfo setupInfo, int svtId, int limitCount, int dispLimitCount, int npcFlag = 0) { }

	// RVA: 0x10ACF84 Offset: 0x10ACF84 VA: 0x10ACF84
	public void SetEquipSvtId(int equipSvtId) { }

	// RVA: 0x10ACF8C Offset: 0x10ACF8C VA: 0x10ACF8C
	public void ClearEquipSvtId() { }

	// RVA: 0x10ACF94 Offset: 0x10ACF94 VA: 0x10ACF94
	public bool IsEmpry() { }

	// RVA: 0x10AD000 Offset: 0x10AD000 VA: 0x10AD000
	public bool IsEquipSvtId() { }

	// RVA: 0x10AD010 Offset: 0x10AD010 VA: 0x10AD010
	public EventDropItemUpValInfo[] GetDropItemList(int member) { }

	// RVA: 0x10AD364 Offset: 0x10AD364 VA: 0x10AD364
	public void RemoveDropItem(int funcId) { }
}

// Namespace: 
public class EventUpValSetupInfo // TypeDefIndex: 6627
{
	// Fields
	protected bool isQuestStart; // 0x10
	protected int questId; // 0x14
	protected int[] eventIdList; // 0x18
	protected int[] servantFilterEventIdList; // 0x20
	protected int[] servantEquipFilterEventIdList; // 0x28
	protected int[] supportFilterEventIdList; // 0x30
	protected int[] supportEquipFilterEventIdList; // 0x38
	protected int[] servantFilterIdList; // 0x40
	protected int[] eventCampaignIdList; // 0x48
	protected List<int[]> eventCampaignServantIdList; // 0x50
	protected Dictionary<int, int[]> questPhaseIndivLists; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC55518 Offset: 0xC55518 VA: 0xC55518
	private static Comparison<EventCampaignEntity> <>f__am$cache0; // 0x0

	// Properties
	public bool IsQuestStart { get; }
	public int QuestId { get; }
	public int EventId { get; }
	public int[] EventIdList { get; }
	public int ServantFilterEventId { get; }
	public int[] ServantFilterEventIdList { get; }
	public int ServantEquipFilterEventId { get; }
	public int[] ServantEquipFilterEventIdList { get; }
	public int SupportFilterEventId { get; }
	public int[] SupportFilterEventIdList { get; }
	public int SupportEquipFilterEventId { get; }
	public int[] SupportEquipFilterEventIdList { get; }
	public int[] ServantFilterIdList { get; }
	public int[] EventCampaignIdList { get; }
	public List<int[]> EventCampaignServantIdList { get; }

	// Methods

	// RVA: 0x10AD4D4 Offset: 0x10AD4D4 VA: 0x10AD4D4
	public void .ctor(int questId, int questPhase, int eventId) { }

	// RVA: 0x10ADA74 Offset: 0x10ADA74 VA: 0x10ADA74
	public void .ctor(int[] eventIdList, bool ignoreFlg = False) { }

	// RVA: 0x10ADB28 Offset: 0x10ADB28 VA: 0x10ADB28
	public bool get_IsQuestStart() { }

	// RVA: 0x10ADB30 Offset: 0x10ADB30 VA: 0x10ADB30
	public int get_QuestId() { }

	// RVA: 0x10ADB38 Offset: 0x10ADB38 VA: 0x10ADB38
	public int get_EventId() { }

	// RVA: 0x10ADBA4 Offset: 0x10ADBA4 VA: 0x10ADBA4
	public int[] get_EventIdList() { }

	// RVA: 0x10ADBAC Offset: 0x10ADBAC VA: 0x10ADBAC
	public int get_ServantFilterEventId() { }

	// RVA: 0x10ADC18 Offset: 0x10ADC18 VA: 0x10ADC18
	public int[] get_ServantFilterEventIdList() { }

	// RVA: 0x10ADC20 Offset: 0x10ADC20 VA: 0x10ADC20
	public int get_ServantEquipFilterEventId() { }

	// RVA: 0x10ADC8C Offset: 0x10ADC8C VA: 0x10ADC8C
	public int[] get_ServantEquipFilterEventIdList() { }

	// RVA: 0x10ADC94 Offset: 0x10ADC94 VA: 0x10ADC94
	public int get_SupportFilterEventId() { }

	// RVA: 0x10ADD00 Offset: 0x10ADD00 VA: 0x10ADD00
	public int[] get_SupportFilterEventIdList() { }

	// RVA: 0x10ADD08 Offset: 0x10ADD08 VA: 0x10ADD08
	public int get_SupportEquipFilterEventId() { }

	// RVA: 0x10ADD74 Offset: 0x10ADD74 VA: 0x10ADD74
	public int[] get_SupportEquipFilterEventIdList() { }

	// RVA: 0x10ADD7C Offset: 0x10ADD7C VA: 0x10ADD7C
	public int[] get_ServantFilterIdList() { }

	// RVA: 0x10ADD84 Offset: 0x10ADD84 VA: 0x10ADD84
	public int[] get_EventCampaignIdList() { }

	// RVA: 0x10ADD8C Offset: 0x10ADD8C VA: 0x10ADD8C
	public List<int[]> get_EventCampaignServantIdList() { }

	// RVA: 0x10AD6F0 Offset: 0x10AD6F0 VA: 0x10AD6F0
	protected void AnalyzeInfo(bool ignoreFlg = False) { }

	// RVA: 0x10ADD94 Offset: 0x10ADD94 VA: 0x10ADD94
	public void AnalyzeInfoCampaign() { }

	// RVA: 0x10AE484 Offset: 0x10AE484 VA: 0x10AE484
	public int[] GetQuestPhaseIndividualList(int eventId) { }

	// RVA: 0x10AE610 Offset: 0x10AE610 VA: 0x10AE610
	public bool IsUpVal(int[] questPhaseIndividualityList, int[] questIndividualities) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9FC8 Offset: 0xCC9FC8 VA: 0xCC9FC8
	// RVA: 0x10AE644 Offset: 0x10AE644 VA: 0x10AE644
	private static int <AnalyzeInfoCampaign>m__0(EventCampaignEntity a, EventCampaignEntity b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B84 Offset: 0xC42B84 VA: 0xC42B84
private sealed class EventUpValSetupInfo.<AnalyzeInfoCampaign>c__AnonStorey0 // TypeDefIndex: 6628
{
	// Fields
	internal EventMaster eventMaster; // 0x10

	// Methods

	// RVA: 0x10AE47C Offset: 0x10AE47C VA: 0x10AE47C
	public void .ctor() { }

	// RVA: 0x10AE6BC Offset: 0x10AE6BC VA: 0x10AE6BC
	internal int <>m__0(EventCampaignEntity a, EventCampaignEntity b) { }
}

// Namespace: 
public class FollowerInfo // TypeDefIndex: 6629
{
	// Fields
	public long userId; // 0x10
	public string userName; // 0x18
	public int userLv; // 0x20
	public int type; // 0x24
	public ServantLeaderInfo[] userSvtLeaderHash; // 0x28
	public ServantLeaderInfo[] eventUserSvtLeaderHash; // 0x30
	public long tutorial1; // 0x38
	public string message; // 0x40
	public long npcFollowerSvtId; // 0x48
	public int npcInitIdx; // 0x50
	public long pushUserSvtId; // 0x58
	public bool isMySvtOrNpc; // 0x60
	public bool isFixedNpc; // 0x61
	public int imageSvtId; // 0x64
	public int[] mainSupportDeckIds; // 0x68
	public int[] eventSupportDeckIds; // 0x70

	// Properties
	public Follower.Type FollowerType { get; }
	public bool IsNpc { get; }

	// Methods

	// RVA: 0x136F504 Offset: 0x136F504 VA: 0x136F504
	public void .ctor() { }

	// RVA: 0x136F50C Offset: 0x136F50C VA: 0x136F50C
	public static FollowerInfo.ReturnSupportServantType GetReturnTypeByQuestId(int questId) { }

	// RVA: 0x136F5B8 Offset: 0x136F5B8 VA: 0x136F5B8
	public Follower.Type get_FollowerType() { }

	// RVA: 0x136F5C0 Offset: 0x136F5C0 VA: 0x136F5C0
	public bool get_IsNpc() { }

	// RVA: 0x136F5D4 Offset: 0x136F5D4 VA: 0x136F5D4
	private ServantLeaderInfo[] GetServantLeaderInfoByReturnType(FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136F5EC Offset: 0x136F5EC VA: 0x136F5EC
	public int getIndex(int classId, FollowerInfo.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x136F754 Offset: 0x136F754 VA: 0x136F754
	public int getIndexForSupport(int classId, FollowerInfo.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x136F834 Offset: 0x136F834 VA: 0x136F834
	public ServantLeaderInfo getServantLeaderInfo(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136F8A0 Offset: 0x136F8A0 VA: 0x136F8A0
	public EquipTargetInfo getEquipTarget1(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136F94C Offset: 0x136F94C VA: 0x136F94C
	public long getUserSvtId(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136F9F8 Offset: 0x136F9F8 VA: 0x136F9F8
	public int getSvtId(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FB08 Offset: 0x136FB08 VA: 0x136FB08
	public int getLv(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FBB4 Offset: 0x136FBB4 VA: 0x136FBB4
	public int getMaxLv(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FC80 Offset: 0x136FC80 VA: 0x136FC80
	public int getLimitCount(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FD2C Offset: 0x136FD2C VA: 0x136FD2C
	public int getExceedCount(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FDD8 Offset: 0x136FDD8 VA: 0x136FDD8
	public int getHp(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FE4C Offset: 0x136FE4C VA: 0x136FE4C
	public int getAdjustHp(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FEC0 Offset: 0x136FEC0 VA: 0x136FEC0
	public int getAtk(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FF34 Offset: 0x136FF34 VA: 0x136FF34
	public int getAdjustAtk(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x136FFA8 Offset: 0x136FFA8 VA: 0x136FFA8
	public int getExp(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x137001C Offset: 0x137001C VA: 0x137001C
	public long getEquipUserSvtId(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370180 Offset: 0x1370180 VA: 0x1370180
	public int getEquipSvtId(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x13702D4 Offset: 0x13702D4 VA: 0x13702D4
	public int getEquipLimitCount(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370358 Offset: 0x1370358 VA: 0x1370358
	public int getEquipHp(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370448 Offset: 0x1370448 VA: 0x1370448
	public int getEquipAtk(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370554 Offset: 0x1370554 VA: 0x1370554
	public long getUpdatedAt() { }

	// RVA: 0x13705CC Offset: 0x13705CC VA: 0x13705CC
	public int[] getSkillIdList(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370644 Offset: 0x1370644 VA: 0x1370644
	public int[] getSkillLevelList(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x13706BC Offset: 0x13706BC VA: 0x13706BC
	public void getSkillInfo(out SkillInfo[] skillInfoList, int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370744 Offset: 0x1370744 VA: 0x1370744
	public int getFriendPointUpVal(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x13707BC Offset: 0x13707BC VA: 0x13707BC
	public FuncList.TYPE getFriendPointUpType(int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370834 Offset: 0x1370834 VA: 0x1370834
	public bool getEventUpVal(EventUpValSetupInfo setupInfo, int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x13708BC Offset: 0x13708BC VA: 0x13708BC
	public bool getServantEventUpVal(EventUpValSetupInfo setupInfo, int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x1370944 Offset: 0x1370944 VA: 0x1370944
	public bool getEquipEventUpVal(EventUpValSetupInfo setupInfo, int index, FollowerInfo.ReturnSupportServantType returnSupportServantType) { }
