// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5AD8 Offset: 0xBC5AD8 VA: 0xBC5AD8
[Serializable]
public struct MethodToken // TypeDefIndex: 337
{
	// Fields
	internal int tokValue; // 0x0
	public static readonly MethodToken Empty; // 0x0

	// Properties
	public int Token { get; }

	// Methods

	// RVA: 0xD689C4 Offset: 0xD689C4 VA: 0xD689C4
	internal void .ctor(int val) { }

	// RVA: 0x22DBFD0 Offset: 0x22DBFD0 VA: 0x22DBFD0
	private static void .cctor() { }

	// RVA: 0xD689CC Offset: 0xD689CC VA: 0xD689CC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD689D4 Offset: 0xD689D4 VA: 0xD689D4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD689DC Offset: 0xD689DC VA: 0xD689DC
	public int get_Token() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5AEC Offset: 0xBC5AEC VA: 0xBC5AEC
[ComDefaultInterfaceAttribute] // RVA: 0xBC5AEC Offset: 0xBC5AEC VA: 0xBC5AEC
[ClassInterfaceAttribute] // RVA: 0xBC5AEC Offset: 0xBC5AEC VA: 0xBC5AEC
public class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 338
{
	// Fields
	private UIntPtr dynamic_image; // 0x40
	private int num_types; // 0x48
	private TypeBuilder[] types; // 0x50
	private CustomAttributeBuilder[] cattrs; // 0x58
	private byte[] guid; // 0x60
	private int table_idx; // 0x68
	internal AssemblyBuilder assemblyb; // 0x70
	private MethodBuilder[] global_methods; // 0x78
	private FieldBuilder[] global_fields; // 0x80
	private bool is_main; // 0x88
	private MonoResource[] resources; // 0x90
	private TypeBuilder global_type; // 0x98
	private Type global_type_created; // 0xA0
	private Hashtable name_cache; // 0xA8
	private Hashtable us_string_cache; // 0xB0
	private int[] table_indexes; // 0xB8
	private bool transient; // 0xC0
	private ModuleBuilderTokenGenerator token_gen; // 0xC8
	private Hashtable resource_writers; // 0xD0
	private ISymbolWriter symbolWriter; // 0xD8
	private static readonly char[] type_modifiers; // 0x0

	// Properties
	internal string FileName { get; }

	// Methods

	// RVA: 0x22DC0B0 Offset: 0x22DC0B0 VA: 0x22DC0B0
	internal void .ctor(AssemblyBuilder assb, string name, string fullyqname, bool emitSymbolInfo, bool transient) { }

	// RVA: 0x22DD0E0 Offset: 0x22DD0E0 VA: 0x22DD0E0
	private static void .cctor() { }

	// RVA: 0x22DC670 Offset: 0x22DC670 VA: 0x22DC670
	private static void basic_init(ModuleBuilder ab) { }

	// RVA: 0x22DD0DC Offset: 0x22DD0DC VA: 0x22DD0DC
	private static void set_wrappers_type(ModuleBuilder mb, Type ab) { }

	// RVA: 0x22DD1B8 Offset: 0x22DD1B8 VA: 0x22DD1B8
	public bool IsTransient() { }

	// RVA: 0x22DD1C0 Offset: 0x22DD1C0 VA: 0x22DD1C0
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent) { }

	// RVA: 0x22DD1DC Offset: 0x22DD1DC VA: 0x22DD1DC
	private void AddType(TypeBuilder tb) { }

	// RVA: 0x22DD314 Offset: 0x22DD314 VA: 0x22DD314
	private TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize) { }

	[ComVisibleAttribute] // RVA: 0xBCCAD0 Offset: 0xBCCAD0 VA: 0xBCCAD0
	// RVA: 0x22DD1D0 Offset: 0x22DD1D0 VA: 0x22DD1D0
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces) { }

	[ComVisibleAttribute] // RVA: 0xBCCAE4 Offset: 0xBCCAE4 VA: 0xBCCAE4
	// RVA: 0x22DD6F8 Offset: 0x22DD6F8 VA: 0x22DD6F8 Slot: 9
	public override Type GetType(string className) { }

	// RVA: 0x22DD70C Offset: 0x22DD70C VA: 0x22DD70C
	private TypeBuilder search_in_array(TypeBuilder[] arr, int validElementsInArray, string className) { }

	// RVA: 0x22DD868 Offset: 0x22DD868 VA: 0x22DD868
	private TypeBuilder search_nested_in_array(TypeBuilder[] arr, int validElementsInArray, string className) { }

	// RVA: 0x22DD9C4 Offset: 0x22DD9C4 VA: 0x22DD9C4
	private static Type create_modified_type(TypeBuilder tb, string modifiers) { }

	// RVA: 0x22DD9C8 Offset: 0x22DD9C8 VA: 0x22DD9C8
	private TypeBuilder GetMaybeNested(TypeBuilder t, string className) { }

	[ComVisibleAttribute] // RVA: 0xBCCAF8 Offset: 0xBCCAF8 VA: 0xBCCAF8
	// RVA: 0x22DDAD0 Offset: 0x22DDAD0 VA: 0x22DDAD0 Slot: 10
	public override Type GetType(string className, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x22DC514 Offset: 0x22DC514 VA: 0x22DC514
	internal int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x22DDE10 Offset: 0x22DDE10 VA: 0x22DDE10 Slot: 11
	public override Type[] GetTypes() { }

	// RVA: 0x22DDFD8 Offset: 0x22DDFD8 VA: 0x22DDFD8
	private static int getUSIndex(ModuleBuilder mb, string str) { }

	// RVA: 0x22DDFDC Offset: 0x22DDFDC VA: 0x22DDFDC
	private static int getToken(ModuleBuilder mb, object obj) { }

	// RVA: 0x22DDFE0 Offset: 0x22DDFE0 VA: 0x22DDFE0
	private static int getMethodToken(ModuleBuilder mb, MethodInfo method, Type[] opt_param_types) { }

	// RVA: 0x22DDFE4 Offset: 0x22DDFE4 VA: 0x22DDFE4
	internal int GetToken(string str) { }

	// RVA: 0x22DE124 Offset: 0x22DE124 VA: 0x22DE124
	internal int GetToken(MemberInfo member) { }

	// RVA: 0x22DE198 Offset: 0x22DE198 VA: 0x22DE198
	internal int GetToken(MethodInfo method, Type[] opt_param_types) { }

	// RVA: 0x22D3F5C Offset: 0x22D3F5C VA: 0x22D3F5C
	internal void RegisterToken(object obj, int token) { }

	// RVA: 0x22D49C8 Offset: 0x22D49C8 VA: 0x22D49C8
	internal TokenGenerator GetTokenGenerator() { }

	// RVA: 0x22DE240 Offset: 0x22DE240 VA: 0x22DE240
	internal string get_FileName() { }

	// RVA: 0x22DC674 Offset: 0x22DC674 VA: 0x22DC674
	internal void CreateGlobalType() { }
}

// Namespace: System.Reflection.Emit
internal class ModuleBuilderTokenGenerator : TokenGenerator // TypeDefIndex: 339
{
	// Fields
	private ModuleBuilder mb; // 0x10

	// Methods

	// RVA: 0x22DE214 Offset: 0x22DE214 VA: 0x22DE214
	public void .ctor(ModuleBuilder mb) { }

	// RVA: 0x22DE248 Offset: 0x22DE248 VA: 0x22DE248 Slot: 4
	public int GetToken(string str) { }

	// RVA: 0x22DE27C Offset: 0x22DE27C VA: 0x22DE27C Slot: 5
	public int GetToken(MemberInfo member) { }

	// RVA: 0x22DE2B0 Offset: 0x22DE2B0 VA: 0x22DE2B0 Slot: 6
	public int GetToken(MethodInfo method, Type[] opt_param_types) { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5B78 Offset: 0xBC5B78 VA: 0xBC5B78
public struct OpCode // TypeDefIndex: 340
{
	// Fields
	internal byte op1; // 0x0
	internal byte op2; // 0x1
	private byte push; // 0x2
	private byte pop; // 0x3
	private byte size; // 0x4
	private byte type; // 0x5
	private byte args; // 0x6
	private byte flow; // 0x7

	// Properties
	public string Name { get; }
	public int Size { get; }
	public OperandType OperandType { get; }
	public StackBehaviour StackBehaviourPop { get; }
	public StackBehaviour StackBehaviourPush { get; }
	public short Value { get; }

	// Methods

	// RVA: 0xD68A30 Offset: 0xD68A30 VA: 0xD68A30
	internal void .ctor(int p, int q) { }

	// RVA: 0xD68A6C Offset: 0xD68A6C VA: 0xD68A6C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD68A74 Offset: 0xD68A74 VA: 0xD68A74 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD68A7C Offset: 0xD68A7C VA: 0xD68A7C Slot: 3
	public override string ToString() { }

	// RVA: 0xD68A84 Offset: 0xD68A84 VA: 0xD68A84
	public string get_Name() { }

	// RVA: 0xD68A8C Offset: 0xD68A8C VA: 0xD68A8C
	public int get_Size() { }

	// RVA: 0xD68A94 Offset: 0xD68A94 VA: 0xD68A94
	public OperandType get_OperandType() { }

	// RVA: 0xD68A9C Offset: 0xD68A9C VA: 0xD68A9C
	public StackBehaviour get_StackBehaviourPop() { }

	// RVA: 0xD68AA4 Offset: 0xD68AA4 VA: 0xD68AA4
	public StackBehaviour get_StackBehaviourPush() { }

	// RVA: 0xD68AAC Offset: 0xD68AAC VA: 0xD68AAC
	public short get_Value() { }

	// RVA: 0x22DA63C Offset: 0x22DA63C VA: 0x22DA63C
	public static bool op_Equality(OpCode a, OpCode b) { }
}

// Namespace: System.Reflection.Emit
internal class OpCodeNames // TypeDefIndex: 341
{
	// Fields
	internal static readonly string[] names; // 0x0

	// Methods

	// RVA: 0x22DE4E0 Offset: 0x22DE4E0 VA: 0x22DE4E0
	private static void .cctor() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5B8C Offset: 0xBC5B8C VA: 0xBC5B8C
public class OpCodes // TypeDefIndex: 342
{
	// Fields
	public static readonly OpCode Nop; // 0x0
	public static readonly OpCode Break; // 0x8
	public static readonly OpCode Ldarg_0; // 0x10
	public static readonly OpCode Ldarg_1; // 0x18
	public static readonly OpCode Ldarg_2; // 0x20
	public static readonly OpCode Ldarg_3; // 0x28
	public static readonly OpCode Ldloc_0; // 0x30
	public static readonly OpCode Ldloc_1; // 0x38
	public static readonly OpCode Ldloc_2; // 0x40
	public static readonly OpCode Ldloc_3; // 0x48
	public static readonly OpCode Stloc_0; // 0x50
	public static readonly OpCode Stloc_1; // 0x58
	public static readonly OpCode Stloc_2; // 0x60
	public static readonly OpCode Stloc_3; // 0x68
	public static readonly OpCode Ldarg_S; // 0x70
	public static readonly OpCode Ldarga_S; // 0x78
	public static readonly OpCode Starg_S; // 0x80
	public static readonly OpCode Ldloc_S; // 0x88
	public static readonly OpCode Ldloca_S; // 0x90
	public static readonly OpCode Stloc_S; // 0x98
	public static readonly OpCode Ldnull; // 0xA0
	public static readonly OpCode Ldc_I4_M1; // 0xA8
	public static readonly OpCode Ldc_I4_0; // 0xB0
	public static readonly OpCode Ldc_I4_1; // 0xB8
	public static readonly OpCode Ldc_I4_2; // 0xC0
	public static readonly OpCode Ldc_I4_3; // 0xC8
	public static readonly OpCode Ldc_I4_4; // 0xD0
	public static readonly OpCode Ldc_I4_5; // 0xD8
	public static readonly OpCode Ldc_I4_6; // 0xE0
	public static readonly OpCode Ldc_I4_7; // 0xE8
	public static readonly OpCode Ldc_I4_8; // 0xF0
	public static readonly OpCode Ldc_I4_S; // 0xF8
	public static readonly OpCode Ldc_I4; // 0x100
	public static readonly OpCode Ldc_I8; // 0x108
	public static readonly OpCode Ldc_R4; // 0x110
	public static readonly OpCode Ldc_R8; // 0x118
	public static readonly OpCode Dup; // 0x120
	public static readonly OpCode Pop; // 0x128
	public static readonly OpCode Jmp; // 0x130
	public static readonly OpCode Call; // 0x138
	public static readonly OpCode Calli; // 0x140
	public static readonly OpCode Ret; // 0x148
	public static readonly OpCode Br_S; // 0x150
	public static readonly OpCode Brfalse_S; // 0x158
	public static readonly OpCode Brtrue_S; // 0x160
	public static readonly OpCode Beq_S; // 0x168
	public static readonly OpCode Bge_S; // 0x170
	public static readonly OpCode Bgt_S; // 0x178
	public static readonly OpCode Ble_S; // 0x180
	public static readonly OpCode Blt_S; // 0x188
	public static readonly OpCode Bne_Un_S; // 0x190
	public static readonly OpCode Bge_Un_S; // 0x198
	public static readonly OpCode Bgt_Un_S; // 0x1A0
	public static readonly OpCode Ble_Un_S; // 0x1A8
	public static readonly OpCode Blt_Un_S; // 0x1B0
	public static readonly OpCode Br; // 0x1B8
	public static readonly OpCode Brfalse; // 0x1C0
	public static readonly OpCode Brtrue; // 0x1C8
	public static readonly OpCode Beq; // 0x1D0
	public static readonly OpCode Bge; // 0x1D8
	public static readonly OpCode Bgt; // 0x1E0
	public static readonly OpCode Ble; // 0x1E8
	public static readonly OpCode Blt; // 0x1F0
	public static readonly OpCode Bne_Un; // 0x1F8
	public static readonly OpCode Bge_Un; // 0x200
	public static readonly OpCode Bgt_Un; // 0x208
	public static readonly OpCode Ble_Un; // 0x210
	public static readonly OpCode Blt_Un; // 0x218
	public static readonly OpCode Switch; // 0x220
	public static readonly OpCode Ldind_I1; // 0x228
	public static readonly OpCode Ldind_U1; // 0x230
	public static readonly OpCode Ldind_I2; // 0x238
	public static readonly OpCode Ldind_U2; // 0x240
	public static readonly OpCode Ldind_I4; // 0x248
	public static readonly OpCode Ldind_U4; // 0x250
	public static readonly OpCode Ldind_I8; // 0x258
	public static readonly OpCode Ldind_I; // 0x260
	public static readonly OpCode Ldind_R4; // 0x268
	public static readonly OpCode Ldind_R8; // 0x270
	public static readonly OpCode Ldind_Ref; // 0x278
	public static readonly OpCode Stind_Ref; // 0x280
	public static readonly OpCode Stind_I1; // 0x288
	public static readonly OpCode Stind_I2; // 0x290
	public static readonly OpCode Stind_I4; // 0x298
	public static readonly OpCode Stind_I8; // 0x2A0
	public static readonly OpCode Stind_R4; // 0x2A8
	public static readonly OpCode Stind_R8; // 0x2B0
	public static readonly OpCode Add; // 0x2B8
	public static readonly OpCode Sub; // 0x2C0
	public static readonly OpCode Mul; // 0x2C8
	public static readonly OpCode Div; // 0x2D0
	public static readonly OpCode Div_Un; // 0x2D8
	public static readonly OpCode Rem; // 0x2E0
	public static readonly OpCode Rem_Un; // 0x2E8
	public static readonly OpCode And; // 0x2F0
	public static readonly OpCode Or; // 0x2F8
	public static readonly OpCode Xor; // 0x300
	public static readonly OpCode Shl; // 0x308
	public static readonly OpCode Shr; // 0x310
	public static readonly OpCode Shr_Un; // 0x318
	public static readonly OpCode Neg; // 0x320
	public static readonly OpCode Not; // 0x328
	public static readonly OpCode Conv_I1; // 0x330
	public static readonly OpCode Conv_I2; // 0x338
	public static readonly OpCode Conv_I4; // 0x340
	public static readonly OpCode Conv_I8; // 0x348
	public static readonly OpCode Conv_R4; // 0x350
	public static readonly OpCode Conv_R8; // 0x358
	public static readonly OpCode Conv_U4; // 0x360
	public static readonly OpCode Conv_U8; // 0x368
	public static readonly OpCode Callvirt; // 0x370
	public static readonly OpCode Cpobj; // 0x378
	public static readonly OpCode Ldobj; // 0x380
	public static readonly OpCode Ldstr; // 0x388
	public static readonly OpCode Newobj; // 0x390
	[ComVisibleAttribute] // RVA: 0xBCB57C Offset: 0xBCB57C VA: 0xBCB57C
	public static readonly OpCode Castclass; // 0x398
	public static readonly OpCode Isinst; // 0x3A0
	public static readonly OpCode Conv_R_Un; // 0x3A8
	public static readonly OpCode Unbox; // 0x3B0
	public static readonly OpCode Throw; // 0x3B8
	public static readonly OpCode Ldfld; // 0x3C0
	public static readonly OpCode Ldflda; // 0x3C8
	public static readonly OpCode Stfld; // 0x3D0
	public static readonly OpCode Ldsfld; // 0x3D8
	public static readonly OpCode Ldsflda; // 0x3E0
	public static readonly OpCode Stsfld; // 0x3E8
	public static readonly OpCode Stobj; // 0x3F0
	public static readonly OpCode Conv_Ovf_I1_Un; // 0x3F8
	public static readonly OpCode Conv_Ovf_I2_Un; // 0x400
	public static readonly OpCode Conv_Ovf_I4_Un; // 0x408
	public static readonly OpCode Conv_Ovf_I8_Un; // 0x410
	public static readonly OpCode Conv_Ovf_U1_Un; // 0x418
	public static readonly OpCode Conv_Ovf_U2_Un; // 0x420
	public static readonly OpCode Conv_Ovf_U4_Un; // 0x428
	public static readonly OpCode Conv_Ovf_U8_Un; // 0x430
	public static readonly OpCode Conv_Ovf_I_Un; // 0x438
	public static readonly OpCode Conv_Ovf_U_Un; // 0x440
	public static readonly OpCode Box; // 0x448
	public static readonly OpCode Newarr; // 0x450
	public static readonly OpCode Ldlen; // 0x458
	public static readonly OpCode Ldelema; // 0x460
	public static readonly OpCode Ldelem_I1; // 0x468
	public static readonly OpCode Ldelem_U1; // 0x470
	public static readonly OpCode Ldelem_I2; // 0x478
	public static readonly OpCode Ldelem_U2; // 0x480
	public static readonly OpCode Ldelem_I4; // 0x488
	public static readonly OpCode Ldelem_U4; // 0x490
	public static readonly OpCode Ldelem_I8; // 0x498
	public static readonly OpCode Ldelem_I; // 0x4A0
	public static readonly OpCode Ldelem_R4; // 0x4A8
	public static readonly OpCode Ldelem_R8; // 0x4B0
	public static readonly OpCode Ldelem_Ref; // 0x4B8
	public static readonly OpCode Stelem_I; // 0x4C0
	public static readonly OpCode Stelem_I1; // 0x4C8
	public static readonly OpCode Stelem_I2; // 0x4D0
	public static readonly OpCode Stelem_I4; // 0x4D8
	public static readonly OpCode Stelem_I8; // 0x4E0
	public static readonly OpCode Stelem_R4; // 0x4E8
	public static readonly OpCode Stelem_R8; // 0x4F0
	public static readonly OpCode Stelem_Ref; // 0x4F8
	public static readonly OpCode Ldelem; // 0x500
	public static readonly OpCode Stelem; // 0x508
	public static readonly OpCode Unbox_Any; // 0x510
	public static readonly OpCode Conv_Ovf_I1; // 0x518
	public static readonly OpCode Conv_Ovf_U1; // 0x520
	public static readonly OpCode Conv_Ovf_I2; // 0x528
	public static readonly OpCode Conv_Ovf_U2; // 0x530
	public static readonly OpCode Conv_Ovf_I4; // 0x538
	public static readonly OpCode Conv_Ovf_U4; // 0x540
	public static readonly OpCode Conv_Ovf_I8; // 0x548
	public static readonly OpCode Conv_Ovf_U8; // 0x550
	public static readonly OpCode Refanyval; // 0x558
	public static readonly OpCode Ckfinite; // 0x560
	public static readonly OpCode Mkrefany; // 0x568
	public static readonly OpCode Ldtoken; // 0x570
	public static readonly OpCode Conv_U2; // 0x578
	public static readonly OpCode Conv_U1; // 0x580
	public static readonly OpCode Conv_I; // 0x588
	public static readonly OpCode Conv_Ovf_I; // 0x590
	public static readonly OpCode Conv_Ovf_U; // 0x598
	public static readonly OpCode Add_Ovf; // 0x5A0
	public static readonly OpCode Add_Ovf_Un; // 0x5A8
	public static readonly OpCode Mul_Ovf; // 0x5B0
	public static readonly OpCode Mul_Ovf_Un; // 0x5B8
	public static readonly OpCode Sub_Ovf; // 0x5C0
	public static readonly OpCode Sub_Ovf_Un; // 0x5C8
	public static readonly OpCode Endfinally; // 0x5D0
	public static readonly OpCode Leave; // 0x5D8
	public static readonly OpCode Leave_S; // 0x5E0
	public static readonly OpCode Stind_I; // 0x5E8
	public static readonly OpCode Conv_U; // 0x5F0
	public static readonly OpCode Prefix7; // 0x5F8
	public static readonly OpCode Prefix6; // 0x600
	public static readonly OpCode Prefix5; // 0x608
	public static readonly OpCode Prefix4; // 0x610
	public static readonly OpCode Prefix3; // 0x618
	public static readonly OpCode Prefix2; // 0x620
	public static readonly OpCode Prefix1; // 0x628
	public static readonly OpCode Prefixref; // 0x630
	public static readonly OpCode Arglist; // 0x638
	public static readonly OpCode Ceq; // 0x640
	public static readonly OpCode Cgt; // 0x648
	public static readonly OpCode Cgt_Un; // 0x650
	public static readonly OpCode Clt; // 0x658
	public static readonly OpCode Clt_Un; // 0x660
	public static readonly OpCode Ldftn; // 0x668
	public static readonly OpCode Ldvirtftn; // 0x670
	public static readonly OpCode Ldarg; // 0x678
	public static readonly OpCode Ldarga; // 0x680
	public static readonly OpCode Starg; // 0x688
	public static readonly OpCode Ldloc; // 0x690
	public static readonly OpCode Ldloca; // 0x698
	public static readonly OpCode Stloc; // 0x6A0
	public static readonly OpCode Localloc; // 0x6A8
	public static readonly OpCode Endfilter; // 0x6B0
	public static readonly OpCode Unaligned; // 0x6B8
	public static readonly OpCode Volatile; // 0x6C0
	public static readonly OpCode Tailcall; // 0x6C8
	public static readonly OpCode Initobj; // 0x6D0
	public static readonly OpCode Constrained; // 0x6D8
	public static readonly OpCode Cpblk; // 0x6E0
	public static readonly OpCode Initblk; // 0x6E8
	public static readonly OpCode Rethrow; // 0x6F0
	public static readonly OpCode Sizeof; // 0x6F8
	public static readonly OpCode Refanytype; // 0x700
	public static readonly OpCode Readonly; // 0x708

	// Methods

	// RVA: 0x22E2F74 Offset: 0x22E2F74 VA: 0x22E2F74
	private static void .cctor() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5BA0 Offset: 0xBC5BA0 VA: 0xBC5BA0
[Serializable]
public enum OperandType // TypeDefIndex: 343
{
	// Fields
	public int value__; // 0x0
	public const OperandType InlineBrTarget = 0;
	public const OperandType InlineField = 1;
	public const OperandType InlineI = 2;
	public const OperandType InlineI8 = 3;
	public const OperandType InlineMethod = 4;
	public const OperandType InlineNone = 5;
	[ObsoleteAttribute] // RVA: 0xBCB590 Offset: 0xBCB590 VA: 0xBCB590
	public const OperandType InlinePhi = 6;
	public const OperandType InlineR = 7;
	public const OperandType InlineSig = 9;
	public const OperandType InlineString = 10;
	public const OperandType InlineSwitch = 11;
	public const OperandType InlineTok = 12;
	public const OperandType InlineType = 13;
	public const OperandType InlineVar = 14;
	public const OperandType ShortInlineBrTarget = 15;
	public const OperandType ShortInlineI = 16;
	public const OperandType ShortInlineR = 17;
	public const OperandType ShortInlineVar = 18;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5BB4 Offset: 0xBC5BB4 VA: 0xBC5BB4
[Serializable]
public enum PEFileKinds // TypeDefIndex: 344
{
	// Fields
	public int value__; // 0x0
	public const PEFileKinds Dll = 1;
	public const PEFileKinds ConsoleApplication = 2;
	public const PEFileKinds WindowApplication = 3;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5BC8 Offset: 0xBC5BC8 VA: 0xBC5BC8
[Serializable]
public enum PackingSize // TypeDefIndex: 345
{
	// Fields
	public int value__; // 0x0
	public const PackingSize Unspecified = 0;
	public const PackingSize Size1 = 1;
	public const PackingSize Size2 = 2;
	public const PackingSize Size4 = 4;
	public const PackingSize Size8 = 8;
	public const PackingSize Size16 = 16;
	public const PackingSize Size32 = 32;
	public const PackingSize Size64 = 64;
	public const PackingSize Size128 = 128;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5BDC Offset: 0xBC5BDC VA: 0xBC5BDC
[ComDefaultInterfaceAttribute] // RVA: 0xBC5BDC Offset: 0xBC5BDC VA: 0xBC5BDC
[ClassInterfaceAttribute] // RVA: 0xBC5BDC Offset: 0xBC5BDC VA: 0xBC5BDC
public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 346
{
	// Fields
	private string name; // 0x10
	private ParameterAttributes attrs; // 0x18
	private int position; // 0x1C

	// Properties
	public virtual int Attributes { get; }
	public virtual string Name { get; }
	public virtual int Position { get; }

	// Methods

	// RVA: 0x22E3F5C Offset: 0x22E3F5C VA: 0x22E3F5C Slot: 4
	public virtual int get_Attributes() { }

	// RVA: 0x22E3F64 Offset: 0x22E3F64 VA: 0x22E3F64 Slot: 5
	public virtual string get_Name() { }

	// RVA: 0x22E3F6C Offset: 0x22E3F6C VA: 0x22E3F6C Slot: 6
	public virtual int get_Position() { }
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xBC5C68 Offset: 0xBC5C68 VA: 0xBC5C68
[ComVisibleAttribute] // RVA: 0xBC5C68 Offset: 0xBC5C68 VA: 0xBC5C68
[ClassInterfaceAttribute] // RVA: 0xBC5C68 Offset: 0xBC5C68 VA: 0xBC5C68
public sealed class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 347
{
	// Fields
	private PropertyAttributes attrs; // 0x10
	private string name; // 0x18
	private Type type; // 0x20
	private MethodBuilder set_method; // 0x28
	private MethodBuilder get_method; // 0x30
	internal TypeBuilder typeb; // 0x38

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x22E3F74 Offset: 0x22E3F74 VA: 0x22E3F74 Slot: 14
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x22E3F7C Offset: 0x22E3F7C VA: 0x22E3F7C Slot: 15
	public override bool get_CanRead() { }

	// RVA: 0x22E3F8C Offset: 0x22E3F8C VA: 0x22E3F8C Slot: 16
	public override bool get_CanWrite() { }

	// RVA: 0x22E3F9C Offset: 0x22E3F9C VA: 0x22E3F9C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22E3FA4 Offset: 0x22E3FA4 VA: 0x22E3FA4 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22E3FAC Offset: 0x22E3FAC VA: 0x22E3FAC Slot: 17
	public override Type get_PropertyType() { }

	// RVA: 0x22E3FB4 Offset: 0x22E3FB4 VA: 0x22E3FB4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22E3FBC Offset: 0x22E3FBC VA: 0x22E3FBC Slot: 18
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x22E3FC4 Offset: 0x22E3FC4 VA: 0x22E3FC4 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22E4078 Offset: 0x22E4078 VA: 0x22E4078 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22E40C4 Offset: 0x22E40C4 VA: 0x22E40C4 Slot: 20
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x22E40CC Offset: 0x22E40CC VA: 0x22E40CC Slot: 21
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x22E4118 Offset: 0x22E4118 VA: 0x22E4118 Slot: 23
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x22E4120 Offset: 0x22E4120 VA: 0x22E4120 Slot: 24
	public override object GetValue(object obj, object[] index) { }

	// RVA: 0x22E4128 Offset: 0x22E4128 VA: 0x22E4128 Slot: 25
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x22E4174 Offset: 0x22E4174 VA: 0x22E4174 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22E41C0 Offset: 0x22E41C0 VA: 0x22E41C0 Slot: 26
	public override void SetValue(object obj, object value, object[] index) { }

	// RVA: 0x22E41C4 Offset: 0x22E41C4 VA: 0x22E41C4 Slot: 27
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x22E41C8 Offset: 0x22E41C8 VA: 0x22E41C8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22E4010 Offset: 0x22E4010 VA: 0x22E4010
	private Exception not_supported() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5CF4 Offset: 0xBC5CF4 VA: 0xBC5CF4
[Serializable]
public enum StackBehaviour // TypeDefIndex: 348
{
	// Fields
	public int value__; // 0x0
	public const StackBehaviour Pop0 = 0;
	public const StackBehaviour Pop1 = 1;
	public const StackBehaviour Pop1_pop1 = 2;
	public const StackBehaviour Popi = 3;
	public const StackBehaviour Popi_pop1 = 4;
	public const StackBehaviour Popi_popi = 5;
	public const StackBehaviour Popi_popi8 = 6;
	public const StackBehaviour Popi_popi_popi = 7;
	public const StackBehaviour Popi_popr4 = 8;
	public const StackBehaviour Popi_popr8 = 9;
	public const StackBehaviour Popref = 10;
	public const StackBehaviour Popref_pop1 = 11;
	public const StackBehaviour Popref_popi = 12;
	public const StackBehaviour Popref_popi_popi = 13;
	public const StackBehaviour Popref_popi_popi8 = 14;
	public const StackBehaviour Popref_popi_popr4 = 15;
	public const StackBehaviour Popref_popi_popr8 = 16;
	public const StackBehaviour Popref_popi_popref = 17;
	public const StackBehaviour Push0 = 18;
	public const StackBehaviour Push1 = 19;
	public const StackBehaviour Push1_push1 = 20;
	public const StackBehaviour Pushi = 21;
	public const StackBehaviour Pushi8 = 22;
	public const StackBehaviour Pushr4 = 23;
	public const StackBehaviour Pushr8 = 24;
	public const StackBehaviour Pushref = 25;
	public const StackBehaviour Varpop = 26;
	public const StackBehaviour Varpush = 27;
	public const StackBehaviour Popref_popi_pop1 = 28;
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xBC5D08 Offset: 0xBC5D08 VA: 0xBC5D08
[ComVisibleAttribute] // RVA: 0xBC5D08 Offset: 0xBC5D08 VA: 0xBC5D08
[ClassInterfaceAttribute] // RVA: 0xBC5D08 Offset: 0xBC5D08 VA: 0xBC5D08
public sealed class TypeBuilder : Type, _TypeBuilder // TypeDefIndex: 349
{
	// Fields
	private string tname; // 0x18
	private string nspace; // 0x20
	private Type parent; // 0x28
	private Type nesting_type; // 0x30
	internal Type[] interfaces; // 0x38
	internal int num_methods; // 0x40
	internal MethodBuilder[] methods; // 0x48
	internal ConstructorBuilder[] ctors; // 0x50
	internal PropertyBuilder[] properties; // 0x58
	internal int num_fields; // 0x60
	internal FieldBuilder[] fields; // 0x68
	internal EventBuilder[] events; // 0x70
	private CustomAttributeBuilder[] cattrs; // 0x78
	internal TypeBuilder[] subtypes; // 0x80
	internal TypeAttributes attrs; // 0x88
	private int table_idx; // 0x8C
	private ModuleBuilder pmodule; // 0x90
	private int class_size; // 0x98
	private PackingSize packing_size; // 0x9C
	private IntPtr generic_container; // 0xA0
	private GenericTypeParameterBuilder[] generic_params; // 0xA8
	private RefEmitPermissionSet[] permissions; // 0xB0
	private Type created; // 0xB8
	private string fullname; // 0xC0
	private bool createTypeCalled; // 0xC8
	private Type underlying_type; // 0xD0

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override Type UnderlyingSystemType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	internal bool IsCompilerContext { get; }
	internal bool is_created { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }
	public override bool IsGenericTypeDefinition { get; }
	public override bool IsGenericType { get; }

	// Methods

	// RVA: 0x22DC6E4 Offset: 0x22DC6E4 VA: 0x22DC6E4
	internal void .ctor(ModuleBuilder mb, TypeAttributes attr, int table_idx) { }

	// RVA: 0x22DD470 Offset: 0x22DD470 VA: 0x22DD470
	internal void .ctor(ModuleBuilder mb, string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packing_size, int type_size, Type nesting_type) { }

	// RVA: 0x22E440C Offset: 0x22E440C VA: 0x22E440C Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x22E41CC Offset: 0x22E41CC VA: 0x22E41CC
	private void setup_internal_class(TypeBuilder tb) { }

	// RVA: 0x22E4414 Offset: 0x22E4414 VA: 0x22E4414
	private void create_generic_class() { }

	// RVA: 0x22D6980 Offset: 0x22D6980 VA: 0x22D6980 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x22D69D8 Offset: 0x22D69D8 VA: 0x22D69D8 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x22D6AB8 Offset: 0x22D6AB8 VA: 0x22D6AB8 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x22D6AEC Offset: 0x22D6AEC VA: 0x22D6AEC Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22E4418 Offset: 0x22E4418 VA: 0x22E4418 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x22E4310 Offset: 0x22E4310 VA: 0x22E4310
	private string GetFullName() { }

	// RVA: 0x22D6B20 Offset: 0x22D6B20 VA: 0x22D6B20 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x22D3F40 Offset: 0x22D3F40 VA: 0x22D3F40 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22D4BBC Offset: 0x22D4BBC VA: 0x22D4BBC Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D6BAC Offset: 0x22D6BAC VA: 0x22D6BAC Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x22D6BE0 Offset: 0x22D6BE0 VA: 0x22D6BE0 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22E44E4 Offset: 0x22E44E4 VA: 0x22E44E4 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D7E24 Offset: 0x22D7E24 VA: 0x22D7E24 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D6E18 Offset: 0x22D6E18 VA: 0x22D6E18 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22D6EA0 Offset: 0x22D6EA0 VA: 0x22D6EA0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	[ComVisibleAttribute] // RVA: 0xBCCB0C Offset: 0xBCCB0C VA: 0xBCCB0C
	// RVA: 0x22E4960 Offset: 0x22E4960 VA: 0x22E4960
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes) { }

	[ComVisibleAttribute] // RVA: 0xBCCB20 Offset: 0xBCCB20 VA: 0xBCCB20
	// RVA: 0x22E496C Offset: 0x22E496C VA: 0x22E496C
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { }

	[ComVisibleAttribute] // RVA: 0xBCCB34 Offset: 0xBCCB34 VA: 0xBCCB34
	// RVA: 0x22E4BC4 Offset: 0x22E4BC4 VA: 0x22E4BC4
	public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes) { }

	// RVA: 0x22E4DEC Offset: 0x22E4DEC VA: 0x22E4DEC
	private void append_method(MethodBuilder mb) { }

	// RVA: 0x22E4F24 Offset: 0x22E4F24 VA: 0x22E4F24
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { }

	// RVA: 0x22E4F60 Offset: 0x22E4F60 VA: 0x22E4F60
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { }

	// RVA: 0x22E4F90 Offset: 0x22E4F90 VA: 0x22E4F90
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { }

	// RVA: 0x22E511C Offset: 0x22E511C VA: 0x22E511C
	public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration) { }

	// RVA: 0x22E523C Offset: 0x22E523C VA: 0x22E523C
	private Type create_runtime_class(TypeBuilder tb) { }

	// RVA: 0x22E5240 Offset: 0x22E5240 VA: 0x22E5240
	private bool is_nested_in(Type t) { }

	// RVA: 0x22E5294 Offset: 0x22E5294 VA: 0x22E5294
	private bool has_ctor_method() { }

	// RVA: 0x22DC830 Offset: 0x22DC830 VA: 0x22DC830
	public Type CreateType() { }

	[ComVisibleAttribute] // RVA: 0xBCCB48 Offset: 0xBCCB48 VA: 0xBCCB48
	// RVA: 0x22D6D24 Offset: 0x22D6D24 VA: 0x22D6D24 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x22E5514 Offset: 0x22E5514 VA: 0x22E5514
	internal ConstructorInfo[] GetConstructorsInternal(BindingFlags bindingAttr) { }

	// RVA: 0x22D6F0C Offset: 0x22D6F0C VA: 0x22D6F0C Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x22D6FB8 Offset: 0x22D6FB8 VA: 0x22D6FB8 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D7040 Offset: 0x22D7040 VA: 0x22D7040 Slot: 47
	public override EventInfo[] GetEvents() { }

	// RVA: 0x22D707C Offset: 0x22D707C VA: 0x22D707C Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x22D7188 Offset: 0x22D7188 VA: 0x22D7188 Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D7344 Offset: 0x22D7344 VA: 0x22D7344 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x22D7558 Offset: 0x22D7558 VA: 0x22D7558 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x22E56D0 Offset: 0x22E56D0 VA: 0x22E56D0
	private MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type) { }

	// RVA: 0x22D7714 Offset: 0x22D7714 VA: 0x22D7714 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x22E5B68 Offset: 0x22E5B68 VA: 0x22E5B68 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D775C Offset: 0x22D775C VA: 0x22D775C Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x22D7984 Offset: 0x22D7984 VA: 0x22D7984 Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x22E5FA0 Offset: 0x22E5FA0 VA: 0x22E5FA0 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22E6054 Offset: 0x22E6054 VA: 0x22E6054 Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x22D7D18 Offset: 0x22D7D18 VA: 0x22D7D18 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x22E6068 Offset: 0x22E6068 VA: 0x22E6068 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x22E6070 Offset: 0x22E6070 VA: 0x22E6070 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x22E6078 Offset: 0x22E6078 VA: 0x22E6078 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x22E6080 Offset: 0x22E6080 VA: 0x22E6080 Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x22E6088 Offset: 0x22E6088 VA: 0x22E6088 Slot: 76
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x22E61DC Offset: 0x22E61DC VA: 0x22E61DC Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x22E6244 Offset: 0x22E6244 VA: 0x22E6244 Slot: 92
	public override Type MakeByRefType() { }

	[MonoTODOAttribute] // RVA: 0xBCCB5C Offset: 0xBCCB5C VA: 0xBCCB5C
	// RVA: 0x22E62A4 Offset: 0x22E62A4 VA: 0x22E62A4 Slot: 89
	public override Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x22D6C14 Offset: 0x22D6C14 VA: 0x22D6C14 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x22E53D4 Offset: 0x22E53D4 VA: 0x22E53D4
	public void SetParent(Type parent) { }

	// RVA: 0x22D5024 Offset: 0x22D5024 VA: 0x22D5024
	internal int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x22E42D0 Offset: 0x22E42D0 VA: 0x22E42D0
	internal bool get_IsCompilerContext() { }

	// RVA: 0x22D3FF4 Offset: 0x22D3FF4 VA: 0x22D3FF4
	internal bool get_is_created() { }

	// RVA: 0x22E5FEC Offset: 0x22E5FEC VA: 0x22E5FEC
	private Exception not_supported() { }

	// RVA: 0x22E4B38 Offset: 0x22E4B38 VA: 0x22E4B38
	private void check_not_created() { }

	// RVA: 0x22E48FC Offset: 0x22E48FC VA: 0x22E48FC
	private void check_created() { }

	// RVA: 0x22E41D0 Offset: 0x22E41D0 VA: 0x22E41D0
	private void check_name(string argName, string name) { }

	// RVA: 0x22E62AC Offset: 0x22E62AC VA: 0x22E62AC Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0xBCCB6C Offset: 0xBCCB6C VA: 0xBCCB6C
	// RVA: 0x22E62B4 Offset: 0x22E62B4 VA: 0x22E62B4 Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	[ComVisibleAttribute] // RVA: 0xBCCB7C Offset: 0xBCCB7C VA: 0xBCCB7C
	[MonoTODOAttribute] // RVA: 0xBCCB7C Offset: 0xBCCB7C VA: 0xBCCB7C
	// RVA: 0x22E62BC Offset: 0x22E62BC VA: 0x22E62BC Slot: 39
	public override bool IsSubclassOf(Type c) { }

	[MonoTODOAttribute] // RVA: 0xBCCBB8 Offset: 0xBCCBB8 VA: 0xBCCBB8
	// RVA: 0x22E62C4 Offset: 0x22E62C4 VA: 0x22E62C4
	internal bool IsAssignableTo(Type c) { }

	// RVA: 0x22E647C Offset: 0x22E647C VA: 0x22E647C Slot: 84
	public override Type[] GetGenericArguments() { }

	// RVA: 0x22E650C Offset: 0x22E650C VA: 0x22E650C Slot: 87
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x22E659C Offset: 0x22E659C VA: 0x22E659C Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x22E65AC Offset: 0x22E65AC VA: 0x22E65AC Slot: 90
	public override bool get_IsGenericParameter() { }

	// RVA: 0x22E65B0 Offset: 0x22E65B0 VA: 0x22E65B0 Slot: 86
	public override bool get_IsGenericTypeDefinition() { }

	// RVA: 0x22E65C0 Offset: 0x22E65C0 VA: 0x22E65C0 Slot: 88
	public override bool get_IsGenericType() { }
}

// Namespace: System.Reflection.Emit
[ObsoleteAttribute] // RVA: 0xBC5D94 Offset: 0xBC5D94 VA: 0xBC5D94
[ComVisibleAttribute] // RVA: 0xBC5D94 Offset: 0xBC5D94 VA: 0xBC5D94
[Serializable]
public sealed class UnmanagedMarshal // TypeDefIndex: 350
{
	// Fields
	private int count; // 0x10
	private UnmanagedType t; // 0x14
	private UnmanagedType tbase; // 0x18
	private string guid; // 0x20
	private string mcookie; // 0x28
	private string marshaltype; // 0x30
	private Type marshaltyperef; // 0x38
	private int param_num; // 0x40
	private bool has_size; // 0x44

