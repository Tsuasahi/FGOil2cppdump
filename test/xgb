{
	// Fields
	public int Start; // 0x0
	public int End; // 0x4
	public int Previous; // 0x8

	// Properties
	public bool IsDefined { get; }
	public int Index { get; }
	public int Length { get; }

	// Methods

	// RVA: 0xBB99A8 Offset: 0xBB99A8 VA: 0xBB99A8
	public bool get_IsDefined() { }

	// RVA: 0xBB99C8 Offset: 0xBB99C8 VA: 0xBB99C8
	public int get_Index() { }

	// RVA: 0xBB99D8 Offset: 0xBB99D8 VA: 0xBB99D8
	public int get_Length() { }
}

// Namespace: System.Text.RegularExpressions
internal class Interpreter : BaseMachine // TypeDefIndex: 1715
{
	// Fields
	private ushort[] program; // 0x18
	private int program_start; // 0x20
	private string text; // 0x28
	private int text_end; // 0x30
	private int group_count; // 0x34
	private int match_min; // 0x38
	private QuickSearch qs; // 0x40
	private int scan_ptr; // 0x48
	private Interpreter.RepeatContext repeat; // 0x50
	private Interpreter.RepeatContext fast; // 0x58
	private Interpreter.IntStack stack; // 0x60
	private Interpreter.RepeatContext deep; // 0x70
	private Mark[] marks; // 0x78
	private int mark_start; // 0x80
	private int mark_end; // 0x84
	private int[] groups; // 0x88

	// Methods

	// RVA: 0xF7ED7C Offset: 0xF7ED7C VA: 0xF7ED7C
	public void .ctor(ushort[] program) { }

	// RVA: 0xF7EE2C Offset: 0xF7EE2C VA: 0xF7EE2C
	private int ReadProgramCount(int ptr) { }

	// RVA: 0xF7EED0 Offset: 0xF7EED0 VA: 0xF7EED0 Slot: 7
	public override Match Scan(Regex regex, string text, int start, int end) { }

	// RVA: 0xF80AEC Offset: 0xF80AEC VA: 0xF80AEC
	private void Reset() { }

	// RVA: 0xF7EF90 Offset: 0xF7EF90 VA: 0xF7EF90
	private bool Eval(Interpreter.Mode mode, ref int ref_ptr, int pc) { }

	// RVA: 0xF8171C Offset: 0xF8171C VA: 0xF8171C
	private bool EvalChar(Interpreter.Mode mode, ref int ptr, ref int pc, bool multi) { }

	// RVA: 0xF80C9C Offset: 0xF80C9C VA: 0xF80C9C
	private bool TryMatch(ref int ref_ptr, int pc) { }

	// RVA: 0xF81394 Offset: 0xF81394 VA: 0xF81394
	private bool IsPosition(Position pos, int ptr) { }

	// RVA: 0xF8236C Offset: 0xF8236C VA: 0xF8236C
	private bool IsWordChar(char c) { }

	// RVA: 0xF80DDC Offset: 0xF80DDC VA: 0xF80DDC
	private string GetString(int pc) { }

	// RVA: 0xF81B24 Offset: 0xF81B24 VA: 0xF81B24
	private void Open(int gid, int ptr) { }

	// RVA: 0xF81C7C Offset: 0xF81C7C VA: 0xF81C7C
	private void Close(int gid, int ptr) { }

	// RVA: 0xF81D14 Offset: 0xF81D14 VA: 0xF81D14
	private bool Balance(int gid, int balance_gid, bool capture, int ptr) { }

	// RVA: 0xF81F04 Offset: 0xF81F04 VA: 0xF81F04
	private int Checkpoint() { }

	// RVA: 0xF81F14 Offset: 0xF81F14 VA: 0xF81F14
	private void Backtrack(int cp) { }

	// RVA: 0xF80B10 Offset: 0xF80B10 VA: 0xF80B10
	private void ResetGroups() { }

	// RVA: 0xF81604 Offset: 0xF81604 VA: 0xF81604
	private int GetLastDefined(int gid) { }

	// RVA: 0xF82394 Offset: 0xF82394 VA: 0xF82394
	private int CreateMark(int previous) { }

	// RVA: 0xF82520 Offset: 0xF82520 VA: 0xF82520
	private void GetGroupInfo(int gid, out int first_mark_index, out int n_caps) { }

	// RVA: 0xF82644 Offset: 0xF82644 VA: 0xF82644
	private void PopulateGroup(Group g, int first_mark_index, int n_caps) { }

	// RVA: 0xF80734 Offset: 0xF80734 VA: 0xF80734
	private Match GenerateMatch(Regex regex) { }
}

// Namespace: 
private struct Interpreter.IntStack // TypeDefIndex: 1716
{
	// Fields
	private int[] values; // 0x0
	private int count; // 0x8

	// Properties
	public int Count { get; set; }

	// Methods

	// RVA: 0xBB9788 Offset: 0xBB9788 VA: 0xBB9788
	public int Pop() { }

	// RVA: 0xBB9790 Offset: 0xBB9790 VA: 0xBB9790
	public void Push(int value) { }

	// RVA: 0xBB9798 Offset: 0xBB9798 VA: 0xBB9798
	public int get_Count() { }

	// RVA: 0xBB97A0 Offset: 0xBB97A0 VA: 0xBB97A0
	public void set_Count(int value) { }
}

// Namespace: 
private class Interpreter.RepeatContext // TypeDefIndex: 1717
{
	// Fields
	private int start; // 0x10
	private int min; // 0x14
	private int max; // 0x18
	private bool lazy; // 0x1C
	private int expr_pc; // 0x20
	private Interpreter.RepeatContext previous; // 0x28
	private int count; // 0x30

	// Properties
	public int Count { get; set; }
	public int Start { get; set; }
	public bool IsMinimum { get; }
	public bool IsMaximum { get; }
	public bool IsLazy { get; }
	public int Expression { get; }
	public Interpreter.RepeatContext Previous { get; }

	// Methods

	// RVA: 0xF82028 Offset: 0xF82028 VA: 0xF82028
	public void .ctor(Interpreter.RepeatContext previous, int min, int max, bool lazy, int expr_pc) { }

	// RVA: 0xF820A0 Offset: 0xF820A0 VA: 0xF820A0
	public int get_Count() { }

	// RVA: 0xF820A8 Offset: 0xF820A8 VA: 0xF820A8
	public void set_Count(int value) { }

	// RVA: 0xF82098 Offset: 0xF82098 VA: 0xF82098
	public int get_Start() { }

	// RVA: 0xF820B0 Offset: 0xF820B0 VA: 0xF820B0
	public void set_Start(int value) { }

	// RVA: 0xF820C0 Offset: 0xF820C0 VA: 0xF820C0
	public bool get_IsMinimum() { }

	// RVA: 0xF820DC Offset: 0xF820DC VA: 0xF820DC
	public bool get_IsMaximum() { }

	// RVA: 0xF820D4 Offset: 0xF820D4 VA: 0xF820D4
	public bool get_IsLazy() { }

	// RVA: 0xF820B8 Offset: 0xF820B8 VA: 0xF820B8
	public int get_Expression() { }

	// RVA: 0xF82090 Offset: 0xF82090 VA: 0xF82090
	public Interpreter.RepeatContext get_Previous() { }
}

// Namespace: 
private enum Interpreter.Mode // TypeDefIndex: 1718
{
	// Fields
	public int value__; // 0x0
	public const Interpreter.Mode Search = 0;
	public const Interpreter.Mode Match = 1;
	public const Interpreter.Mode Count = 2;
}

// Namespace: System.Text.RegularExpressions
internal struct Interval : IComparable // TypeDefIndex: 1719
{
	// Fields
	public int low; // 0x0
	public int high; // 0x4
	public bool contiguous; // 0x8

	// Properties
	public static Interval Empty { get; }
	public bool IsDiscontiguous { get; }
	public bool IsSingleton { get; }
	public bool IsEmpty { get; }
	public int Size { get; }

	// Methods

	// RVA: 0xBB97EC Offset: 0xBB97EC VA: 0xBB97EC
	public void .ctor(int low, int high) { }

	// RVA: 0xF82B44 Offset: 0xF82B44 VA: 0xF82B44
	public static Interval get_Empty() { }

	// RVA: 0xBB9808 Offset: 0xBB9808 VA: 0xBB9808
	public bool get_IsDiscontiguous() { }

	// RVA: 0xBB9818 Offset: 0xBB9818 VA: 0xBB9818
	public bool get_IsSingleton() { }

	// RVA: 0xBB9838 Offset: 0xBB9838 VA: 0xBB9838
	public bool get_IsEmpty() { }

	// RVA: 0xBB9848 Offset: 0xBB9848 VA: 0xBB9848
	public int get_Size() { }

	// RVA: 0xBB9864 Offset: 0xBB9864 VA: 0xBB9864
	public bool IsDisjoint(Interval i) { }

	// RVA: 0xBB989C Offset: 0xBB989C VA: 0xBB989C
	public bool IsAdjacent(Interval i) { }

	// RVA: 0xBB98DC Offset: 0xBB98DC VA: 0xBB98DC
	public bool Contains(Interval i) { }

	// RVA: 0xBB991C Offset: 0xBB991C VA: 0xBB991C
	public bool Contains(int i) { }

	// RVA: 0xBB9940 Offset: 0xBB9940 VA: 0xBB9940
	public bool Intersects(Interval i) { }

	// RVA: 0xBB994C Offset: 0xBB994C VA: 0xBB994C
	public void Merge(Interval i) { }

	// RVA: 0xBB9988 Offset: 0xBB9988 VA: 0xBB9988 Slot: 4
	public int CompareTo(object o) { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xC3CDBC Offset: 0xC3CDBC VA: 0xC3CDBC
internal class IntervalCollection : ICollection, IEnumerable // TypeDefIndex: 1720
{
	// Fields
	private ArrayList intervals; // 0x10

	// Properties
	public Interval Item { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0xF82DA0 Offset: 0xF82DA0 VA: 0xF82DA0
	public void .ctor() { }

	// RVA: 0xF82E0C Offset: 0xF82E0C VA: 0xF82E0C
	public Interval get_Item(int i) { }

	// RVA: 0xF82E9C Offset: 0xF82E9C VA: 0xF82E9C
	public void Add(Interval i) { }

	// RVA: 0xF82F3C Offset: 0xF82F3C VA: 0xF82F3C
	public void Normalize() { }

	// RVA: 0xF83134 Offset: 0xF83134 VA: 0xF83134
	public IntervalCollection GetMetaCollection(IntervalCollection.CostDelegate cost_del) { }

	// RVA: 0xF83248 Offset: 0xF83248 VA: 0xF83248
	private void Optimize(int begin, int end, IntervalCollection meta, IntervalCollection.CostDelegate cost_del) { }

	// RVA: 0xF83210 Offset: 0xF83210 VA: 0xF83210 Slot: 4
	public int get_Count() { }

	// RVA: 0xF836CC Offset: 0xF836CC VA: 0xF836CC Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0xF836D4 Offset: 0xF836D4 VA: 0xF836D4 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0xF836DC Offset: 0xF836DC VA: 0xF836DC Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0xF839B8 Offset: 0xF839B8 VA: 0xF839B8 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class IntervalCollection.Enumerator : IEnumerator // TypeDefIndex: 1721
{
	// Fields
	private IList list; // 0x10
	private int ptr; // 0x18

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0xF83A28 Offset: 0xF83A28 VA: 0xF83A28
	public void .ctor(IList list) { }

	// RVA: 0xF83B44 Offset: 0xF83B44 VA: 0xF83B44 Slot: 4
	public object get_Current() { }

	// RVA: 0xF83CC8 Offset: 0xF83CC8 VA: 0xF83CC8 Slot: 5
	public bool MoveNext() { }

	// RVA: 0xF83B38 Offset: 0xF83B38 VA: 0xF83B38 Slot: 6
	public void Reset() { }
}

// Namespace: 
public sealed class IntervalCollection.CostDelegate : MulticastDelegate // TypeDefIndex: 1722
{
	// Methods

	// RVA: 0xF83A5C Offset: 0xF83A5C VA: 0xF83A5C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF83470 Offset: 0xF83470 VA: 0xF83470 Slot: 11
	public virtual double Invoke(Interval i) { }

	// RVA: 0xF83A6C Offset: 0xF83A6C VA: 0xF83A6C Slot: 12
	public virtual IAsyncResult BeginInvoke(Interval i, AsyncCallback callback, object object) { }

	// RVA: 0xF83AFC Offset: 0xF83AFC VA: 0xF83AFC Slot: 13
	public virtual double EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Parser // TypeDefIndex: 1723
{
	// Fields
	private string pattern; // 0x10
	private int ptr; // 0x18
	private ArrayList caps; // 0x20
	private Hashtable refs; // 0x28
	private int num_groups; // 0x30
	private int gap; // 0x34

	// Methods

	// RVA: 0xF8722C Offset: 0xF8722C VA: 0xF8722C
	public void .ctor() { }

	// RVA: 0xF88F0C Offset: 0xF88F0C VA: 0xF88F0C
	public static int ParseDecimal(string str, ref int ptr) { }

	// RVA: 0xF8A354 Offset: 0xF8A354 VA: 0xF8A354
	public static int ParseOctal(string str, ref int ptr) { }

	// RVA: 0xF8E0E0 Offset: 0xF8E0E0 VA: 0xF8E0E0
	public static int ParseHex(string str, ref int ptr, int digits) { }

	// RVA: 0xF8DFE4 Offset: 0xF8DFE4 VA: 0xF8DFE4
	public static int ParseNumber(string str, ref int ptr, int b, int min, int max) { }

	// RVA: 0xF88F1C Offset: 0xF88F1C VA: 0xF88F1C
	public static string ParseName(string str, ref int ptr) { }

	// RVA: 0xF872B8 Offset: 0xF872B8 VA: 0xF872B8
	public RegularExpression ParseRegularExpression(string pattern, RegexOptions options) { }

	// RVA: 0xF87444 Offset: 0xF87444 VA: 0xF87444
	public int GetMapping(Hashtable mapping) { }

	// RVA: 0xF8E268 Offset: 0xF8E268 VA: 0xF8E268
	private void ParseGroup(Group group, RegexOptions options, Assertion assertion) { }

	// RVA: 0xF90DCC Offset: 0xF90DCC VA: 0xF90DCC
	private Expression ParseGroupingConstruct(ref RegexOptions options) { }

	// RVA: 0xF9197C Offset: 0xF9197C VA: 0xF9197C
	private bool ParseAssertionType(ExpressionAssertion assertion) { }

	// RVA: 0xF91868 Offset: 0xF91868 VA: 0xF91868
	private void ParseOptions(ref RegexOptions options, bool negate) { }

	// RVA: 0xF90778 Offset: 0xF90778 VA: 0xF90778
	private Expression ParseCharacterClass(RegexOptions options) { }

	// RVA: 0xF915DC Offset: 0xF915DC VA: 0xF915DC
	private bool ParseRepetitionBounds(out int min, out int max, RegexOptions options) { }

	// RVA: 0xF91B0C Offset: 0xF91B0C VA: 0xF91B0C
	private Category ParseUnicodeCategory() { }

	// RVA: 0xF90284 Offset: 0xF90284 VA: 0xF90284
	private Expression ParseSpecial(RegexOptions options) { }

	// RVA: 0xF90000 Offset: 0xF90000 VA: 0xF90000
	private int ParseEscape() { }

	// RVA: 0xF91AF4 Offset: 0xF91AF4 VA: 0xF91AF4
	private string ParseName() { }

	// RVA: 0xF8E190 Offset: 0xF8E190 VA: 0xF8E190
	private static bool IsNameChar(char c) { }

	// RVA: 0xF91C6C Offset: 0xF91C6C VA: 0xF91C6C
	private int ParseNumber(int b, int min, int max) { }

	// RVA: 0xF8E0F4 Offset: 0xF8E0F4 VA: 0xF8E0F4
	private static int ParseDigit(char c, int b, int n) { }

	// RVA: 0xF8FC94 Offset: 0xF8FC94 VA: 0xF8FC94
	private void ConsumeWhitespace(bool ignore) { }

	// RVA: 0xF8EAD8 Offset: 0xF8EAD8 VA: 0xF8EAD8
	private void ResolveReferences() { }

	// RVA: 0xF91C98 Offset: 0xF91C98 VA: 0xF91C98
	private void HandleExplicitNumericGroups(ArrayList explicit_numeric_groups) { }

	// RVA: 0xF90DC4 Offset: 0xF90DC4 VA: 0xF90DC4
	private static bool IsIgnoreCase(RegexOptions options) { }

	// RVA: 0xF8FFC4 Offset: 0xF8FFC4 VA: 0xF8FFC4
	private static bool IsMultiline(RegexOptions options) { }

	// RVA: 0xF91860 Offset: 0xF91860 VA: 0xF91860
	private static bool IsExplicitCapture(RegexOptions options) { }

	// RVA: 0xF8FFF8 Offset: 0xF8FFF8 VA: 0xF8FFF8
	private static bool IsSingleline(RegexOptions options) { }

	// RVA: 0xF8FC8C Offset: 0xF8FC8C VA: 0xF8FC8C
	private static bool IsIgnorePatternWhitespace(RegexOptions options) { }

	// RVA: 0xF91B04 Offset: 0xF91B04 VA: 0xF91B04
	private static bool IsECMAScript(RegexOptions options) { }

	// RVA: 0xF8FBC0 Offset: 0xF8FBC0 VA: 0xF8FBC0
	private ArgumentException NewParseException(string msg) { }
}

// Namespace: System.Text.RegularExpressions
internal class QuickSearch // TypeDefIndex: 1724
{
	// Fields
	private string str; // 0x10
	private int len; // 0x18
	private bool ignore; // 0x1C
	private bool reverse; // 0x1D
	private byte[] shift; // 0x20
	private Hashtable shiftExtended; // 0x28
	private static readonly int THRESHOLD; // 0x0

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0xF80F1C Offset: 0xF80F1C VA: 0xF80F1C
	public void .ctor(string str, bool ignore, bool reverse) { }

	// RVA: 0xF85DB4 Offset: 0xF85DB4 VA: 0xF85DB4
	private static void .cctor() { }

	// RVA: 0xF8138C Offset: 0xF8138C VA: 0xF8138C
	public int get_Length() { }

	// RVA: 0xF81024 Offset: 0xF81024 VA: 0xF81024
	public int Search(string text, int start, int end) { }

	// RVA: 0xF85B50 Offset: 0xF85B50 VA: 0xF85B50
	private void SetupShiftTable() { }

	// RVA: 0xF85E98 Offset: 0xF85E98 VA: 0xF85E98
	private int GetShiftDistance(char c) { }

	// RVA: 0xF85E08 Offset: 0xF85E08 VA: 0xF85E08
	private char GetChar(char c) { }
}

// Namespace: System.Text.RegularExpressions
internal class ReplacementEvaluator // TypeDefIndex: 1725
{
	// Fields
	private Regex regex; // 0x10
	private int n_pieces; // 0x18
	private int[] pieces; // 0x20
	private string replacement; // 0x28

	// Properties
	public bool NeedsGroupsOrCaptures { get; }

	// Methods

	// RVA: 0xF7BAE0 Offset: 0xF7BAE0 VA: 0xF7BAE0
	public void .ctor(Regex regex, string replacement) { }

	// RVA: 0xF885AC Offset: 0xF885AC VA: 0xF885AC
	public string Evaluate(Match match) { }

	// RVA: 0xF88654 Offset: 0xF88654 VA: 0xF88654
	public void EvaluateAppend(Match match, StringBuilder sb) { }

	// RVA: 0xF7BE98 Offset: 0xF7BE98 VA: 0xF7BE98
	public bool get_NeedsGroupsOrCaptures() { }

	// RVA: 0xF88940 Offset: 0xF88940 VA: 0xF88940
	private void Ensure(int size) { }

	// RVA: 0xF88A00 Offset: 0xF88A00 VA: 0xF88A00
	private void AddFromReplacement(int start, int end) { }

	// RVA: 0xF88AC8 Offset: 0xF88AC8 VA: 0xF88AC8
	private void AddInt(int i) { }

	// RVA: 0xF88454 Offset: 0xF88454 VA: 0xF88454
	private void Compile() { }

	// RVA: 0xF88B3C Offset: 0xF88B3C VA: 0xF88B3C
	private int CompileTerm(ref int ptr) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
[DefaultMemberAttribute] // RVA: 0xC3CDF4 Offset: 0xC3CDF4 VA: 0xC3CDF4
internal class ExpressionCollection : CollectionBase // TypeDefIndex: 1726
{
	// Properties
	public Expression Item { get; set; }

	// Methods

	// RVA: 0xF8C508 Offset: 0xF8C508 VA: 0xF8C508
	public void .ctor() { }

	// RVA: 0xF89124 Offset: 0xF89124 VA: 0xF89124
	public void Add(Expression e) { }

	// RVA: 0xF89CFC Offset: 0xF89CFC VA: 0xF89CFC
	public Expression get_Item(int i) { }

	// RVA: 0xF89E88 Offset: 0xF89E88 VA: 0xF89E88
	public void set_Item(int i, Expression value) { }

	// RVA: 0xF8D078 Offset: 0xF8D078 VA: 0xF8D078 Slot: 28
	protected override void OnValidate(object o) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Expression // TypeDefIndex: 1727
{
	// Methods

	// RVA: 0xF8B534 Offset: 0xF8B534 VA: 0xF8B534
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Compile(ICompiler cmp, bool reverse);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetWidth(out int min, out int max);

	// RVA: 0xF8B040 Offset: 0xF8B040 VA: 0xF8B040
	public int GetFixedWidth() { }

	// RVA: 0xF8C884 Offset: 0xF8C884 VA: 0xF8C884 Slot: 6
	public virtual AnchorInfo GetAnchorInfo(bool reverse) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsComplex();
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class CompositeExpression : Expression // TypeDefIndex: 1728
{
	// Fields
	private ExpressionCollection expressions; // 0x10

	// Properties
	protected ExpressionCollection Expressions { get; }

	// Methods

	// RVA: 0xF89074 Offset: 0xF89074 VA: 0xF89074
	public void .ctor() { }

	// RVA: 0xF890E8 Offset: 0xF890E8 VA: 0xF890E8
	protected ExpressionCollection get_Expressions() { }

	// RVA: 0xF89968 Offset: 0xF89968 VA: 0xF89968
	protected void GetWidth(out int min, out int max, int count) { }

	// RVA: 0xF8C510 Offset: 0xF8C510 VA: 0xF8C510 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Group : CompositeExpression // TypeDefIndex: 1729
{
	// Methods

	// RVA: 0xF8B0F4 Offset: 0xF8B0F4 VA: 0xF8B0F4
	public void .ctor() { }

	// RVA: 0xF8D07C Offset: 0xF8D07C VA: 0xF8D07C
	public void AppendExpression(Expression e) { }

	// RVA: 0xF8B26C Offset: 0xF8B26C VA: 0xF8B26C Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8D0B0 Offset: 0xF8D0B0 VA: 0xF8D0B0 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0xF8D3E0 Offset: 0xF8D3E0 VA: 0xF8D3E0 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class RegularExpression : Group // TypeDefIndex: 1730
{
	// Fields
	private int group_count; // 0x18

	// Properties
	public int GroupCount { set; }

	// Methods

	// RVA: 0xF8E244 Offset: 0xF8E244 VA: 0xF8E244
	public void .ctor() { }

	// RVA: 0xF8FBB8 Offset: 0xF8FBB8 VA: 0xF8FBB8
	public void set_GroupCount(int value) { }

	// RVA: 0xF920B4 Offset: 0xF920B4 VA: 0xF920B4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CapturingGroup : Group, IComparable // TypeDefIndex: 1731
{
	// Fields
	private int gid; // 0x18
	private string name; // 0x20

	// Properties
	public int Index { get; set; }
	public string Name { get; set; }
	public bool IsNamed { get; }

	// Methods

	// RVA: 0xF8A6D4 Offset: 0xF8A6D4 VA: 0xF8A6D4
	public void .ctor() { }

	// RVA: 0xF8A9DC Offset: 0xF8A9DC VA: 0xF8A9DC
	public int get_Index() { }

	// RVA: 0xF8B0F8 Offset: 0xF8B0F8 VA: 0xF8B0F8
	public void set_Index(int value) { }

	// RVA: 0xF8B100 Offset: 0xF8B100 VA: 0xF8B100
	public string get_Name() { }

	// RVA: 0xF8B108 Offset: 0xF8B108 VA: 0xF8B108
	public void set_Name(string value) { }

	// RVA: 0xF8A9E4 Offset: 0xF8A9E4 VA: 0xF8A9E4
	public bool get_IsNamed() { }

	// RVA: 0xF8B110 Offset: 0xF8B110 VA: 0xF8B110 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8B31C Offset: 0xF8B31C VA: 0xF8B31C Slot: 7
	public override bool IsComplex() { }

	// RVA: 0xF8B324 Offset: 0xF8B324 VA: 0xF8B324 Slot: 8
	public int CompareTo(object other) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BalancingGroup : CapturingGroup // TypeDefIndex: 1732
{
	// Fields
	private CapturingGroup balance; // 0x28

	// Properties
	public CapturingGroup Balance { set; }

	// Methods

	// RVA: 0xF8A6AC Offset: 0xF8A6AC VA: 0xF8A6AC
	public void .ctor() { }

	// RVA: 0xF8A6FC Offset: 0xF8A6FC VA: 0xF8A6FC
	public void set_Balance(CapturingGroup value) { }

	// RVA: 0xF8A704 Offset: 0xF8A704 VA: 0xF8A704 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class NonBacktrackingGroup : Group // TypeDefIndex: 1733
{
	// Methods

	// RVA: 0xF8DDA0 Offset: 0xF8DDA0 VA: 0xF8DDA0
	public void .ctor() { }

	// RVA: 0xF8DDA4 Offset: 0xF8DDA4 VA: 0xF8DDA4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8DFDC Offset: 0xF8DFDC VA: 0xF8DFDC Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Repetition : CompositeExpression // TypeDefIndex: 1734
{
	// Fields
	private int min; // 0x18
	private int max; // 0x1C
	private bool lazy; // 0x20

	// Properties
	public Expression Expression { get; set; }
	public int Minimum { get; }

	// Methods

	// RVA: 0xF917C4 Offset: 0xF917C4 VA: 0xF917C4
	public void .ctor(int min, int max, bool lazy) { }

	// RVA: 0xF92578 Offset: 0xF92578 VA: 0xF92578
	public Expression get_Expression() { }

	// RVA: 0xF91828 Offset: 0xF91828 VA: 0xF91828
	public void set_Expression(Expression value) { }

	// RVA: 0xF925A8 Offset: 0xF925A8 VA: 0xF925A8
	public int get_Minimum() { }

	// RVA: 0xF925B0 Offset: 0xF925B0 VA: 0xF925B0 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF92948 Offset: 0xF92948 VA: 0xF92948 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0xF929D4 Offset: 0xF929D4 VA: 0xF929D4 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Assertion : CompositeExpression // TypeDefIndex: 1735
{
	// Properties
	public Expression TrueExpression { get; set; }
	public Expression FalseExpression { get; set; }

	// Methods

	// RVA: 0xF89C78 Offset: 0xF89C78 VA: 0xF89C78
	public void .ctor() { }

	// RVA: 0xF89CCC Offset: 0xF89CCC VA: 0xF89CCC
	public Expression get_TrueExpression() { }

	// RVA: 0xF89E50 Offset: 0xF89E50 VA: 0xF89E50
	public void set_TrueExpression(Expression value) { }

	// RVA: 0xF89F60 Offset: 0xF89F60 VA: 0xF89F60
	public Expression get_FalseExpression() { }

	// RVA: 0xF89F90 Offset: 0xF89F90 VA: 0xF89F90
	public void set_FalseExpression(Expression value) { }

	// RVA: 0xF89FC8 Offset: 0xF89FC8 VA: 0xF89FC8 Slot: 5
	public override void GetWidth(out int min, out int max) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CaptureAssertion : Assertion // TypeDefIndex: 1736
{
	// Fields
	private ExpressionAssertion alternate; // 0x18
	private CapturingGroup group; // 0x20
	private Literal literal; // 0x28

	// Properties
	public CapturingGroup CapturingGroup { set; }
	private ExpressionAssertion Alternate { get; }

	// Methods

	// RVA: 0xF8A9F4 Offset: 0xF8A9F4 VA: 0xF8A9F4
	public void .ctor(Literal l) { }

	// RVA: 0xF8AA1C Offset: 0xF8AA1C VA: 0xF8AA1C
	public void set_CapturingGroup(CapturingGroup value) { }

	// RVA: 0xF8AA24 Offset: 0xF8AA24 VA: 0xF8AA24 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8AF40 Offset: 0xF8AF40 VA: 0xF8AF40 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0xF8AE64 Offset: 0xF8AE64 VA: 0xF8AE64
	private ExpressionAssertion get_Alternate() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionAssertion : Assertion // TypeDefIndex: 1737
{
	// Fields
	private bool reverse; // 0x18
	private bool negate; // 0x19

	// Properties
	public bool Reverse { set; }
	public bool Negate { set; }
	public Expression TestExpression { get; set; }

	// Methods

	// RVA: 0xF8B084 Offset: 0xF8B084 VA: 0xF8B084
	public void .ctor() { }

	// RVA: 0xF8C92C Offset: 0xF8C92C VA: 0xF8C92C
	public void set_Reverse(bool value) { }

	// RVA: 0xF8C938 Offset: 0xF8C938 VA: 0xF8C938
	public void set_Negate(bool value) { }

	// RVA: 0xF8C944 Offset: 0xF8C944 VA: 0xF8C944
	public Expression get_TestExpression() { }

	// RVA: 0xF8B0BC Offset: 0xF8B0BC VA: 0xF8B0BC
	public void set_TestExpression(Expression value) { }

	// RVA: 0xF8C974 Offset: 0xF8C974 VA: 0xF8C974 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8D070 Offset: 0xF8D070 VA: 0xF8D070 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Alternation : CompositeExpression // TypeDefIndex: 1738
{
	// Properties
	public ExpressionCollection Alternatives { get; }

	// Methods

	// RVA: 0xF89070 Offset: 0xF89070 VA: 0xF89070
	public void .ctor() { }

	// RVA: 0xF890E0 Offset: 0xF890E0 VA: 0xF890E0
	public ExpressionCollection get_Alternatives() { }

	// RVA: 0xF890F0 Offset: 0xF890F0 VA: 0xF890F0
	public void AddAlternative(Expression e) { }

	// RVA: 0xF891F4 Offset: 0xF891F4 VA: 0xF891F4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF89910 Offset: 0xF89910 VA: 0xF89910 Slot: 5
	public override void GetWidth(out int min, out int max) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Literal : Expression // TypeDefIndex: 1739
{
	// Fields
	private string str; // 0x10
	private bool ignore; // 0x18

	// Methods

	// RVA: 0xF8DC48 Offset: 0xF8DC48 VA: 0xF8DC48
	public void .ctor(string str, bool ignore) { }

	// RVA: 0xF8A4C8 Offset: 0xF8A4C8 VA: 0xF8A4C8
	public static void CompileLiteral(string str, ICompiler cmp, bool ignore, bool reverse) { }

	// RVA: 0xF8DC88 Offset: 0xF8DC88 VA: 0xF8DC88 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8DCA0 Offset: 0xF8DCA0 VA: 0xF8DCA0 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0xF8DCEC Offset: 0xF8DCEC VA: 0xF8DCEC Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }

	// RVA: 0xF8DD98 Offset: 0xF8DD98 VA: 0xF8DD98 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class PositionAssertion : Expression // TypeDefIndex: 1740
{
	// Fields
	private Position pos; // 0x10

	// Methods

	// RVA: 0xF8FFCC Offset: 0xF8FFCC VA: 0xF8FFCC
	public void .ctor(Position pos) { }

	// RVA: 0xF91F20 Offset: 0xF91F20 VA: 0xF91F20 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF91FE8 Offset: 0xF91FE8 VA: 0xF91FE8 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0xF91FF4 Offset: 0xF91FF4 VA: 0xF91FF4 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0xF91FFC Offset: 0xF91FFC VA: 0xF91FFC Slot: 6
	public override AnchorInfo GetAnchorInfo(bool revers) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Reference : Expression // TypeDefIndex: 1741
{
	// Fields
	private CapturingGroup group; // 0x10
	private bool ignore; // 0x18

	// Properties
	public CapturingGroup CapturingGroup { get; set; }
	public bool IgnoreCase { get; }

	// Methods

	// RVA: 0xF8A050 Offset: 0xF8A050 VA: 0xF8A050
	public void .ctor(bool ignore) { }

	// RVA: 0xF8A3CC Offset: 0xF8A3CC VA: 0xF8A3CC
	public CapturingGroup get_CapturingGroup() { }

	// RVA: 0xF8A34C Offset: 0xF8A34C VA: 0xF8A34C
	public void set_CapturingGroup(CapturingGroup value) { }

	// RVA: 0xF8A4C0 Offset: 0xF8A4C0 VA: 0xF8A4C0
	public bool get_IgnoreCase() { }

	// RVA: 0xF8A3D4 Offset: 0xF8A3D4 VA: 0xF8A3D4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF9209C Offset: 0xF9209C VA: 0xF9209C Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0xF920AC Offset: 0xF920AC VA: 0xF920AC Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BackslashNumber : Reference // TypeDefIndex: 1742
{
	// Fields
	private string literal; // 0x20
	private bool ecma; // 0x28

	// Methods

	// RVA: 0xF8A00C Offset: 0xF8A00C VA: 0xF8A00C
	public void .ctor(bool ignore, bool ecma) { }

	// RVA: 0xF8A080 Offset: 0xF8A080 VA: 0xF8A080
	public bool ResolveReference(string num_str, Hashtable groups) { }

	// RVA: 0xF8A364 Offset: 0xF8A364 VA: 0xF8A364 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CharacterClass : Expression // TypeDefIndex: 1743
{
	// Fields
	private static Interval upper_case_characters; // 0x0
	private bool negate; // 0x10
	private bool ignore; // 0x11
	private BitArray pos_cats; // 0x18
	private BitArray neg_cats; // 0x20
	private IntervalCollection intervals; // 0x28

