private struct PatternCompiler.PatternLinkStack.Link // TypeDefIndex: 1712
{
	// Fields
	public int base_addr; // 0x0
	public int offset_addr; // 0x4
}

// Namespace: System.Text.RegularExpressions
internal abstract class LinkStack : LinkRef // TypeDefIndex: 1713
{
	// Fields
	private Stack stack; // 0x10

	// Methods

	// RVA: 0x203C584 Offset: 0x203C584 VA: 0x203C584
	public void .ctor() { }

	// RVA: 0x203C5F0 Offset: 0x203C5F0 VA: 0x203C5F0
	public void Push() { }

	// RVA: 0x203C63C Offset: 0x203C63C VA: 0x203C63C
	public bool Pop() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract object GetCurrent();

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void SetCurrent(object l);
}

// Namespace: System.Text.RegularExpressions
internal struct Mark // TypeDefIndex: 1714
{
	// Fields
	public int Start; // 0x0
	public int End; // 0x4
	public int Previous; // 0x8

	// Properties
	public bool IsDefined { get; }
	public int Index { get; }
	public int Length { get; }

	// Methods

	// RVA: 0xD65E58 Offset: 0xD65E58 VA: 0xD65E58
	public bool get_IsDefined() { }

	// RVA: 0xD65E78 Offset: 0xD65E78 VA: 0xD65E78
	public int get_Index() { }

	// RVA: 0xD65E88 Offset: 0xD65E88 VA: 0xD65E88
	public int get_Length() { }
}

// Namespace: System.Text.RegularExpressions
internal class Interpreter : BaseMachine // TypeDefIndex: 1715
{
	// Fields
	private ushort[] program; // 0x18
	private int program_start; // 0x20
	private string text; // 0x28
	private int text_end; // 0x30
	private int group_count; // 0x34
	private int match_min; // 0x38
	private QuickSearch qs; // 0x40
	private int scan_ptr; // 0x48
	private Interpreter.RepeatContext repeat; // 0x50
	private Interpreter.RepeatContext fast; // 0x58
	private Interpreter.IntStack stack; // 0x60
	private Interpreter.RepeatContext deep; // 0x70
	private Mark[] marks; // 0x78
	private int mark_start; // 0x80
	private int mark_end; // 0x84
	private int[] groups; // 0x88

	// Methods

	// RVA: 0x20374A8 Offset: 0x20374A8 VA: 0x20374A8
	public void .ctor(ushort[] program) { }

	// RVA: 0x2037558 Offset: 0x2037558 VA: 0x2037558
	private int ReadProgramCount(int ptr) { }

	// RVA: 0x20375FC Offset: 0x20375FC VA: 0x20375FC Slot: 7
	public override Match Scan(Regex regex, string text, int start, int end) { }

	// RVA: 0x2039218 Offset: 0x2039218 VA: 0x2039218
	private void Reset() { }

	// RVA: 0x20376BC Offset: 0x20376BC VA: 0x20376BC
	private bool Eval(Interpreter.Mode mode, ref int ref_ptr, int pc) { }

	// RVA: 0x2039E48 Offset: 0x2039E48 VA: 0x2039E48
	private bool EvalChar(Interpreter.Mode mode, ref int ptr, ref int pc, bool multi) { }

	// RVA: 0x20393C8 Offset: 0x20393C8 VA: 0x20393C8
	private bool TryMatch(ref int ref_ptr, int pc) { }

	// RVA: 0x2039AC0 Offset: 0x2039AC0 VA: 0x2039AC0
	private bool IsPosition(Position pos, int ptr) { }

	// RVA: 0x203AA98 Offset: 0x203AA98 VA: 0x203AA98
	private bool IsWordChar(char c) { }

	// RVA: 0x2039508 Offset: 0x2039508 VA: 0x2039508
	private string GetString(int pc) { }

	// RVA: 0x203A250 Offset: 0x203A250 VA: 0x203A250
	private void Open(int gid, int ptr) { }

	// RVA: 0x203A3A8 Offset: 0x203A3A8 VA: 0x203A3A8
	private void Close(int gid, int ptr) { }

	// RVA: 0x203A440 Offset: 0x203A440 VA: 0x203A440
	private bool Balance(int gid, int balance_gid, bool capture, int ptr) { }

	// RVA: 0x203A630 Offset: 0x203A630 VA: 0x203A630
	private int Checkpoint() { }

	// RVA: 0x203A640 Offset: 0x203A640 VA: 0x203A640
	private void Backtrack(int cp) { }

	// RVA: 0x203923C Offset: 0x203923C VA: 0x203923C
	private void ResetGroups() { }

	// RVA: 0x2039D30 Offset: 0x2039D30 VA: 0x2039D30
	private int GetLastDefined(int gid) { }

	// RVA: 0x203AAC0 Offset: 0x203AAC0 VA: 0x203AAC0
	private int CreateMark(int previous) { }

	// RVA: 0x203AC4C Offset: 0x203AC4C VA: 0x203AC4C
	private void GetGroupInfo(int gid, out int first_mark_index, out int n_caps) { }

	// RVA: 0x203AD70 Offset: 0x203AD70 VA: 0x203AD70
	private void PopulateGroup(Group g, int first_mark_index, int n_caps) { }

	// RVA: 0x2038E60 Offset: 0x2038E60 VA: 0x2038E60
	private Match GenerateMatch(Regex regex) { }
}

// Namespace: 
private struct Interpreter.IntStack // TypeDefIndex: 1716
{
	// Fields
	private int[] values; // 0x0
	private int count; // 0x8

	// Properties
	public int Count { get; set; }

	// Methods

	// RVA: 0xD65C38 Offset: 0xD65C38 VA: 0xD65C38
	public int Pop() { }

	// RVA: 0xD65C40 Offset: 0xD65C40 VA: 0xD65C40
	public void Push(int value) { }

	// RVA: 0xD65C48 Offset: 0xD65C48 VA: 0xD65C48
	public int get_Count() { }

	// RVA: 0xD65C50 Offset: 0xD65C50 VA: 0xD65C50
	public void set_Count(int value) { }
}

// Namespace: 
private class Interpreter.RepeatContext // TypeDefIndex: 1717
{
	// Fields
	private int start; // 0x10
	private int min; // 0x14
	private int max; // 0x18
	private bool lazy; // 0x1C
	private int expr_pc; // 0x20
	private Interpreter.RepeatContext previous; // 0x28
	private int count; // 0x30

	// Properties
	public int Count { get; set; }
	public int Start { get; set; }
	public bool IsMinimum { get; }
	public bool IsMaximum { get; }
	public bool IsLazy { get; }
	public int Expression { get; }
	public Interpreter.RepeatContext Previous { get; }

	// Methods

	// RVA: 0x203A754 Offset: 0x203A754 VA: 0x203A754
	public void .ctor(Interpreter.RepeatContext previous, int min, int max, bool lazy, int expr_pc) { }

	// RVA: 0x203A7CC Offset: 0x203A7CC VA: 0x203A7CC
	public int get_Count() { }

	// RVA: 0x203A7D4 Offset: 0x203A7D4 VA: 0x203A7D4
	public void set_Count(int value) { }

	// RVA: 0x203A7C4 Offset: 0x203A7C4 VA: 0x203A7C4
	public int get_Start() { }

	// RVA: 0x203A7DC Offset: 0x203A7DC VA: 0x203A7DC
	public void set_Start(int value) { }

	// RVA: 0x203A7EC Offset: 0x203A7EC VA: 0x203A7EC
	public bool get_IsMinimum() { }

	// RVA: 0x203A808 Offset: 0x203A808 VA: 0x203A808
	public bool get_IsMaximum() { }

	// RVA: 0x203A800 Offset: 0x203A800 VA: 0x203A800
	public bool get_IsLazy() { }

	// RVA: 0x203A7E4 Offset: 0x203A7E4 VA: 0x203A7E4
	public int get_Expression() { }

	// RVA: 0x203A7BC Offset: 0x203A7BC VA: 0x203A7BC
	public Interpreter.RepeatContext get_Previous() { }
}

// Namespace: 
private enum Interpreter.Mode // TypeDefIndex: 1718
{
	// Fields
	public int value__; // 0x0
	public const Interpreter.Mode Search = 0;
	public const Interpreter.Mode Match = 1;
	public const Interpreter.Mode Count = 2;
}

// Namespace: System.Text.RegularExpressions
internal struct Interval : IComparable // TypeDefIndex: 1719
{
	// Fields
	public int low; // 0x0
	public int high; // 0x4
	public bool contiguous; // 0x8

	// Properties
	public static Interval Empty { get; }
	public bool IsDiscontiguous { get; }
	public bool IsSingleton { get; }
	public bool IsEmpty { get; }
	public int Size { get; }

	// Methods

	// RVA: 0xD65C9C Offset: 0xD65C9C VA: 0xD65C9C
	public void .ctor(int low, int high) { }

	// RVA: 0x203B270 Offset: 0x203B270 VA: 0x203B270
	public static Interval get_Empty() { }

	// RVA: 0xD65CB8 Offset: 0xD65CB8 VA: 0xD65CB8
	public bool get_IsDiscontiguous() { }

	// RVA: 0xD65CC8 Offset: 0xD65CC8 VA: 0xD65CC8
	public bool get_IsSingleton() { }

	// RVA: 0xD65CE8 Offset: 0xD65CE8 VA: 0xD65CE8
	public bool get_IsEmpty() { }

	// RVA: 0xD65CF8 Offset: 0xD65CF8 VA: 0xD65CF8
	public int get_Size() { }

	// RVA: 0xD65D14 Offset: 0xD65D14 VA: 0xD65D14
	public bool IsDisjoint(Interval i) { }

	// RVA: 0xD65D4C Offset: 0xD65D4C VA: 0xD65D4C
	public bool IsAdjacent(Interval i) { }

	// RVA: 0xD65D8C Offset: 0xD65D8C VA: 0xD65D8C
	public bool Contains(Interval i) { }

	// RVA: 0xD65DCC Offset: 0xD65DCC VA: 0xD65DCC
	public bool Contains(int i) { }

	// RVA: 0xD65DF0 Offset: 0xD65DF0 VA: 0xD65DF0
	public bool Intersects(Interval i) { }

	// RVA: 0xD65DFC Offset: 0xD65DFC VA: 0xD65DFC
	public void Merge(Interval i) { }

	// RVA: 0xD65E38 Offset: 0xD65E38 VA: 0xD65E38 Slot: 4
	public int CompareTo(object o) { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xBD0C94 Offset: 0xBD0C94 VA: 0xBD0C94
internal class IntervalCollection : ICollection, IEnumerable // TypeDefIndex: 1720
{
	// Fields
	private ArrayList intervals; // 0x10

	// Properties
	public Interval Item { get; }
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x203B4CC Offset: 0x203B4CC VA: 0x203B4CC
	public void .ctor() { }

	// RVA: 0x203B538 Offset: 0x203B538 VA: 0x203B538
	public Interval get_Item(int i) { }

	// RVA: 0x203B5C8 Offset: 0x203B5C8 VA: 0x203B5C8
	public void Add(Interval i) { }

	// RVA: 0x203B668 Offset: 0x203B668 VA: 0x203B668
	public void Normalize() { }

	// RVA: 0x203B860 Offset: 0x203B860 VA: 0x203B860
	public IntervalCollection GetMetaCollection(IntervalCollection.CostDelegate cost_del) { }

	// RVA: 0x203B974 Offset: 0x203B974 VA: 0x203B974
	private void Optimize(int begin, int end, IntervalCollection meta, IntervalCollection.CostDelegate cost_del) { }

	// RVA: 0x203B93C Offset: 0x203B93C VA: 0x203B93C Slot: 4
	public int get_Count() { }

	// RVA: 0x203BDF8 Offset: 0x203BDF8 VA: 0x203BDF8 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x203BE00 Offset: 0x203BE00 VA: 0x203BE00 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x203BE08 Offset: 0x203BE08 VA: 0x203BE08 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x203C0E4 Offset: 0x203C0E4 VA: 0x203C0E4 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class IntervalCollection.Enumerator : IEnumerator // TypeDefIndex: 1721
{
	// Fields
	private IList list; // 0x10
	private int ptr; // 0x18

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x203C154 Offset: 0x203C154 VA: 0x203C154
	public void .ctor(IList list) { }

	// RVA: 0x203C270 Offset: 0x203C270 VA: 0x203C270 Slot: 4
	public object get_Current() { }

	// RVA: 0x203C3F4 Offset: 0x203C3F4 VA: 0x203C3F4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x203C264 Offset: 0x203C264 VA: 0x203C264 Slot: 6
	public void Reset() { }
}

// Namespace: 
public sealed class IntervalCollection.CostDelegate : MulticastDelegate // TypeDefIndex: 1722
{
	// Methods

	// RVA: 0x203C188 Offset: 0x203C188 VA: 0x203C188
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x203BB9C Offset: 0x203BB9C VA: 0x203BB9C Slot: 11
	public virtual double Invoke(Interval i) { }

	// RVA: 0x203C198 Offset: 0x203C198 VA: 0x203C198 Slot: 12
	public virtual IAsyncResult BeginInvoke(Interval i, AsyncCallback callback, object object) { }

	// RVA: 0x203C228 Offset: 0x203C228 VA: 0x203C228 Slot: 13
	public virtual double EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Parser // TypeDefIndex: 1723
{
	// Fields
	private string pattern; // 0x10
	private int ptr; // 0x18
	private ArrayList caps; // 0x20
	private Hashtable refs; // 0x28
	private int num_groups; // 0x30
	private int gap; // 0x34

	// Methods

	// RVA: 0x203F958 Offset: 0x203F958 VA: 0x203F958
	public void .ctor() { }

	// RVA: 0x2041638 Offset: 0x2041638 VA: 0x2041638
	public static int ParseDecimal(string str, ref int ptr) { }

	// RVA: 0x2042A80 Offset: 0x2042A80 VA: 0x2042A80
	public static int ParseOctal(string str, ref int ptr) { }

	// RVA: 0x204680C Offset: 0x204680C VA: 0x204680C
	public static int ParseHex(string str, ref int ptr, int digits) { }

	// RVA: 0x2046710 Offset: 0x2046710 VA: 0x2046710
	public static int ParseNumber(string str, ref int ptr, int b, int min, int max) { }

	// RVA: 0x2041648 Offset: 0x2041648 VA: 0x2041648
	public static string ParseName(string str, ref int ptr) { }

	// RVA: 0x203F9E4 Offset: 0x203F9E4 VA: 0x203F9E4
	public RegularExpression ParseRegularExpression(string pattern, RegexOptions options) { }

	// RVA: 0x203FB70 Offset: 0x203FB70 VA: 0x203FB70
	public int GetMapping(Hashtable mapping) { }

	// RVA: 0x2046994 Offset: 0x2046994 VA: 0x2046994
	private void ParseGroup(Group group, RegexOptions options, Assertion assertion) { }

	// RVA: 0x20494F8 Offset: 0x20494F8 VA: 0x20494F8
	private Expression ParseGroupingConstruct(ref RegexOptions options) { }

	// RVA: 0x204A0A8 Offset: 0x204A0A8 VA: 0x204A0A8
	private bool ParseAssertionType(ExpressionAssertion assertion) { }

	// RVA: 0x2049F94 Offset: 0x2049F94 VA: 0x2049F94
	private void ParseOptions(ref RegexOptions options, bool negate) { }

	// RVA: 0x2048EA4 Offset: 0x2048EA4 VA: 0x2048EA4
	private Expression ParseCharacterClass(RegexOptions options) { }

	// RVA: 0x2049D08 Offset: 0x2049D08 VA: 0x2049D08
	private bool ParseRepetitionBounds(out int min, out int max, RegexOptions options) { }

	// RVA: 0x204A238 Offset: 0x204A238 VA: 0x204A238
	private Category ParseUnicodeCategory() { }

	// RVA: 0x20489B0 Offset: 0x20489B0 VA: 0x20489B0
	private Expression ParseSpecial(RegexOptions options) { }

	// RVA: 0x204872C Offset: 0x204872C VA: 0x204872C
	private int ParseEscape() { }

	// RVA: 0x204A220 Offset: 0x204A220 VA: 0x204A220
	private string ParseName() { }

	// RVA: 0x20468BC Offset: 0x20468BC VA: 0x20468BC
	private static bool IsNameChar(char c) { }

	// RVA: 0x204A398 Offset: 0x204A398 VA: 0x204A398
	private int ParseNumber(int b, int min, int max) { }

	// RVA: 0x2046820 Offset: 0x2046820 VA: 0x2046820
	private static int ParseDigit(char c, int b, int n) { }

	// RVA: 0x20483C0 Offset: 0x20483C0 VA: 0x20483C0
	private void ConsumeWhitespace(bool ignore) { }

	// RVA: 0x2047204 Offset: 0x2047204 VA: 0x2047204
	private void ResolveReferences() { }

	// RVA: 0x204A3C4 Offset: 0x204A3C4 VA: 0x204A3C4
	private void HandleExplicitNumericGroups(ArrayList explicit_numeric_groups) { }

	// RVA: 0x20494F0 Offset: 0x20494F0 VA: 0x20494F0
	private static bool IsIgnoreCase(RegexOptions options) { }

	// RVA: 0x20486F0 Offset: 0x20486F0 VA: 0x20486F0
	private static bool IsMultiline(RegexOptions options) { }

	// RVA: 0x2049F8C Offset: 0x2049F8C VA: 0x2049F8C
	private static bool IsExplicitCapture(RegexOptions options) { }

	// RVA: 0x2048724 Offset: 0x2048724 VA: 0x2048724
	private static bool IsSingleline(RegexOptions options) { }

	// RVA: 0x20483B8 Offset: 0x20483B8 VA: 0x20483B8
	private static bool IsIgnorePatternWhitespace(RegexOptions options) { }

	// RVA: 0x204A230 Offset: 0x204A230 VA: 0x204A230
	private static bool IsECMAScript(RegexOptions options) { }

	// RVA: 0x20482EC Offset: 0x20482EC VA: 0x20482EC
	private ArgumentException NewParseException(string msg) { }
}

// Namespace: System.Text.RegularExpressions
internal class QuickSearch // TypeDefIndex: 1724
{
	// Fields
	private string str; // 0x10
	private int len; // 0x18
	private bool ignore; // 0x1C
	private bool reverse; // 0x1D
	private byte[] shift; // 0x20
	private Hashtable shiftExtended; // 0x28
	private static readonly int THRESHOLD; // 0x0

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0x2039648 Offset: 0x2039648 VA: 0x2039648
	public void .ctor(string str, bool ignore, bool reverse) { }

	// RVA: 0x203E4E0 Offset: 0x203E4E0 VA: 0x203E4E0
	private static void .cctor() { }

	// RVA: 0x2039AB8 Offset: 0x2039AB8 VA: 0x2039AB8
	public int get_Length() { }

	// RVA: 0x2039750 Offset: 0x2039750 VA: 0x2039750
	public int Search(string text, int start, int end) { }

	// RVA: 0x203E27C Offset: 0x203E27C VA: 0x203E27C
	private void SetupShiftTable() { }

	// RVA: 0x203E5C4 Offset: 0x203E5C4 VA: 0x203E5C4
	private int GetShiftDistance(char c) { }

	// RVA: 0x203E534 Offset: 0x203E534 VA: 0x203E534
	private char GetChar(char c) { }
}

// Namespace: System.Text.RegularExpressions
internal class ReplacementEvaluator // TypeDefIndex: 1725
{
	// Fields
	private Regex regex; // 0x10
	private int n_pieces; // 0x18
	private int[] pieces; // 0x20
	private string replacement; // 0x28

	// Properties
	public bool NeedsGroupsOrCaptures { get; }

	// Methods

	// RVA: 0x203420C Offset: 0x203420C VA: 0x203420C
	public void .ctor(Regex regex, string replacement) { }

	// RVA: 0x2040CD8 Offset: 0x2040CD8 VA: 0x2040CD8
	public string Evaluate(Match match) { }

	// RVA: 0x2040D80 Offset: 0x2040D80 VA: 0x2040D80
	public void EvaluateAppend(Match match, StringBuilder sb) { }

	// RVA: 0x20345C4 Offset: 0x20345C4 VA: 0x20345C4
	public bool get_NeedsGroupsOrCaptures() { }

	// RVA: 0x204106C Offset: 0x204106C VA: 0x204106C
	private void Ensure(int size) { }

	// RVA: 0x204112C Offset: 0x204112C VA: 0x204112C
	private void AddFromReplacement(int start, int end) { }

	// RVA: 0x20411F4 Offset: 0x20411F4 VA: 0x20411F4
	private void AddInt(int i) { }

	// RVA: 0x2040B80 Offset: 0x2040B80 VA: 0x2040B80
	private void Compile() { }

	// RVA: 0x2041268 Offset: 0x2041268 VA: 0x2041268
	private int CompileTerm(ref int ptr) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
[DefaultMemberAttribute] // RVA: 0xBD0CCC Offset: 0xBD0CCC VA: 0xBD0CCC
internal class ExpressionCollection : CollectionBase // TypeDefIndex: 1726
{
	// Properties
	public Expression Item { get; set; }

	// Methods

	// RVA: 0x2044C34 Offset: 0x2044C34 VA: 0x2044C34
	public void .ctor() { }

	// RVA: 0x2041850 Offset: 0x2041850 VA: 0x2041850
	public void Add(Expression e) { }

	// RVA: 0x2042428 Offset: 0x2042428 VA: 0x2042428
	public Expression get_Item(int i) { }

	// RVA: 0x20425B4 Offset: 0x20425B4 VA: 0x20425B4
	public void set_Item(int i, Expression value) { }

	// RVA: 0x20457A4 Offset: 0x20457A4 VA: 0x20457A4 Slot: 28
	protected override void OnValidate(object o) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Expression // TypeDefIndex: 1727
{
	// Methods

	// RVA: 0x2043C60 Offset: 0x2043C60 VA: 0x2043C60
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Compile(ICompiler cmp, bool reverse);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetWidth(out int min, out int max);

	// RVA: 0x204376C Offset: 0x204376C VA: 0x204376C
	public int GetFixedWidth() { }

	// RVA: 0x2044FB0 Offset: 0x2044FB0 VA: 0x2044FB0 Slot: 6
	public virtual AnchorInfo GetAnchorInfo(bool reverse) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsComplex();
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class CompositeExpression : Expression // TypeDefIndex: 1728
{
	// Fields
	private ExpressionCollection expressions; // 0x10

	// Properties
	protected ExpressionCollection Expressions { get; }

	// Methods

	// RVA: 0x20417A0 Offset: 0x20417A0 VA: 0x20417A0
	public void .ctor() { }

	// RVA: 0x2041814 Offset: 0x2041814 VA: 0x2041814
	protected ExpressionCollection get_Expressions() { }

	// RVA: 0x2042094 Offset: 0x2042094 VA: 0x2042094
	protected void GetWidth(out int min, out int max, int count) { }

	// RVA: 0x2044C3C Offset: 0x2044C3C VA: 0x2044C3C Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Group : CompositeExpression // TypeDefIndex: 1729
{
	// Methods

	// RVA: 0x2043820 Offset: 0x2043820 VA: 0x2043820
	public void .ctor() { }

	// RVA: 0x20457A8 Offset: 0x20457A8 VA: 0x20457A8
	public void AppendExpression(Expression e) { }

	// RVA: 0x2043998 Offset: 0x2043998 VA: 0x2043998 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x20457DC Offset: 0x20457DC VA: 0x20457DC Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x2045B0C Offset: 0x2045B0C VA: 0x2045B0C Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class RegularExpression : Group // TypeDefIndex: 1730
{
	// Fields
	private int group_count; // 0x18

	// Properties
	public int GroupCount { set; }

	// Methods

	// RVA: 0x2046970 Offset: 0x2046970 VA: 0x2046970
	public void .ctor() { }

	// RVA: 0x20482E4 Offset: 0x20482E4 VA: 0x20482E4
	public void set_GroupCount(int value) { }

	// RVA: 0x204A7E0 Offset: 0x204A7E0 VA: 0x204A7E0 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CapturingGroup : Group, IComparable // TypeDefIndex: 1731
{
	// Fields
	private int gid; // 0x18
	private string name; // 0x20

	// Properties
	public int Index { get; set; }
	public string Name { get; set; }
	public bool IsNamed { get; }

	// Methods

	// RVA: 0x2042E00 Offset: 0x2042E00 VA: 0x2042E00
	public void .ctor() { }

	// RVA: 0x2043108 Offset: 0x2043108 VA: 0x2043108
	public int get_Index() { }

	// RVA: 0x2043824 Offset: 0x2043824 VA: 0x2043824
	public void set_Index(int value) { }

	// RVA: 0x204382C Offset: 0x204382C VA: 0x204382C
	public string get_Name() { }

	// RVA: 0x2043834 Offset: 0x2043834 VA: 0x2043834
	public void set_Name(string value) { }

	// RVA: 0x2043110 Offset: 0x2043110 VA: 0x2043110
	public bool get_IsNamed() { }

	// RVA: 0x204383C Offset: 0x204383C VA: 0x204383C Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x2043A48 Offset: 0x2043A48 VA: 0x2043A48 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x2043A50 Offset: 0x2043A50 VA: 0x2043A50 Slot: 8
	public int CompareTo(object other) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BalancingGroup : CapturingGroup // TypeDefIndex: 1732
{
	// Fields
	private CapturingGroup balance; // 0x28

	// Properties
	public CapturingGroup Balance { set; }

	// Methods

	// RVA: 0x2042DD8 Offset: 0x2042DD8 VA: 0x2042DD8
	public void .ctor() { }

	// RVA: 0x2042E28 Offset: 0x2042E28 VA: 0x2042E28
	public void set_Balance(CapturingGroup value) { }

	// RVA: 0x2042E30 Offset: 0x2042E30 VA: 0x2042E30 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class NonBacktrackingGroup : Group // TypeDefIndex: 1733
{
	// Methods

	// RVA: 0x20464CC Offset: 0x20464CC VA: 0x20464CC
	public void .ctor() { }

	// RVA: 0x20464D0 Offset: 0x20464D0 VA: 0x20464D0 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x2046708 Offset: 0x2046708 VA: 0x2046708 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Repetition : CompositeExpression // TypeDefIndex: 1734
{
	// Fields
	private int min; // 0x18
	private int max; // 0x1C
	private bool lazy; // 0x20

	// Properties
	public Expression Expression { get; set; }
	public int Minimum { get; }

	// Methods

	// RVA: 0x2049EF0 Offset: 0x2049EF0 VA: 0x2049EF0
	public void .ctor(int min, int max, bool lazy) { }

	// RVA: 0x204ACA4 Offset: 0x204ACA4 VA: 0x204ACA4
	public Expression get_Expression() { }

	// RVA: 0x2049F54 Offset: 0x2049F54 VA: 0x2049F54
	public void set_Expression(Expression value) { }

	// RVA: 0x204ACD4 Offset: 0x204ACD4 VA: 0x204ACD4
	public int get_Minimum() { }

	// RVA: 0x204ACDC Offset: 0x204ACDC VA: 0x204ACDC Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x204B074 Offset: 0x204B074 VA: 0x204B074 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x204B100 Offset: 0x204B100 VA: 0x204B100 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Assertion : CompositeExpression // TypeDefIndex: 1735
{
	// Properties
	public Expression TrueExpression { get; set; }
	public Expression FalseExpression { get; set; }

	// Methods

	// RVA: 0x20423A4 Offset: 0x20423A4 VA: 0x20423A4
	public void .ctor() { }

	// RVA: 0x20423F8 Offset: 0x20423F8 VA: 0x20423F8
	public Expression get_TrueExpression() { }

	// RVA: 0x204257C Offset: 0x204257C VA: 0x204257C
	public void set_TrueExpression(Expression value) { }

	// RVA: 0x204268C Offset: 0x204268C VA: 0x204268C
	public Expression get_FalseExpression() { }

	// RVA: 0x20426BC Offset: 0x20426BC VA: 0x20426BC
	public void set_FalseExpression(Expression value) { }

	// RVA: 0x20426F4 Offset: 0x20426F4 VA: 0x20426F4 Slot: 5
	public override void GetWidth(out int min, out int max) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CaptureAssertion : Assertion // TypeDefIndex: 1736
{
	// Fields
	private ExpressionAssertion alternate; // 0x18
	private CapturingGroup group; // 0x20
	private Literal literal; // 0x28

	// Properties
	public CapturingGroup CapturingGroup { set; }
	private ExpressionAssertion Alternate { get; }

	// Methods

	// RVA: 0x2043120 Offset: 0x2043120 VA: 0x2043120
	public void .ctor(Literal l) { }

	// RVA: 0x2043148 Offset: 0x2043148 VA: 0x2043148
	public void set_CapturingGroup(CapturingGroup value) { }

	// RVA: 0x2043150 Offset: 0x2043150 VA: 0x2043150 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x204366C Offset: 0x204366C VA: 0x204366C Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x2043590 Offset: 0x2043590 VA: 0x2043590
	private ExpressionAssertion get_Alternate() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionAssertion : Assertion // TypeDefIndex: 1737
{
	// Fields
	private bool reverse; // 0x18
	private bool negate; // 0x19

	// Properties
	public bool Reverse { set; }
	public bool Negate { set; }
	public Expression TestExpression { get; set; }

	// Methods

	// RVA: 0x20437B0 Offset: 0x20437B0 VA: 0x20437B0
	public void .ctor() { }

	// RVA: 0x2045058 Offset: 0x2045058 VA: 0x2045058
	public void set_Reverse(bool value) { }

	// RVA: 0x2045064 Offset: 0x2045064 VA: 0x2045064
	public void set_Negate(bool value) { }

	// RVA: 0x2045070 Offset: 0x2045070 VA: 0x2045070
	public Expression get_TestExpression() { }

	// RVA: 0x20437E8 Offset: 0x20437E8 VA: 0x20437E8
	public void set_TestExpression(Expression value) { }

	// RVA: 0x20450A0 Offset: 0x20450A0 VA: 0x20450A0 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x204579C Offset: 0x204579C VA: 0x204579C Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Alternation : CompositeExpression // TypeDefIndex: 1738
{
	// Properties
	public ExpressionCollection Alternatives { get; }

	// Methods

	// RVA: 0x204179C Offset: 0x204179C VA: 0x204179C
	public void .ctor() { }

	// RVA: 0x204180C Offset: 0x204180C VA: 0x204180C
	public ExpressionCollection get_Alternatives() { }

	// RVA: 0x204181C Offset: 0x204181C VA: 0x204181C
	public void AddAlternative(Expression e) { }

	// RVA: 0x2041920 Offset: 0x2041920 VA: 0x2041920 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x204203C Offset: 0x204203C VA: 0x204203C Slot: 5
	public override void GetWidth(out int min, out int max) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Literal : Expression // TypeDefIndex: 1739
{
	// Fields
	private string str; // 0x10
	private bool ignore; // 0x18

	// Methods

	// RVA: 0x2046374 Offset: 0x2046374 VA: 0x2046374
	public void .ctor(string str, bool ignore) { }

	// RVA: 0x2042BF4 Offset: 0x2042BF4 VA: 0x2042BF4
	public static void CompileLiteral(string str, ICompiler cmp, bool ignore, bool reverse) { }

	// RVA: 0x20463B4 Offset: 0x20463B4 VA: 0x20463B4 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x20463CC Offset: 0x20463CC VA: 0x20463CC Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x2046418 Offset: 0x2046418 VA: 0x2046418 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool reverse) { }

	// RVA: 0x20464C4 Offset: 0x20464C4 VA: 0x20464C4 Slot: 7
	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class PositionAssertion : Expression // TypeDefIndex: 1740
{
	// Fields
	private Position pos; // 0x10

	// Methods

	// RVA: 0x20486F8 Offset: 0x20486F8 VA: 0x20486F8
	public void .ctor(Position pos) { }

	// RVA: 0x204A64C Offset: 0x204A64C VA: 0x204A64C Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x204A714 Offset: 0x204A714 VA: 0x204A714 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x204A720 Offset: 0x204A720 VA: 0x204A720 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x204A728 Offset: 0x204A728 VA: 0x204A728 Slot: 6
	public override AnchorInfo GetAnchorInfo(bool revers) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class Reference : Expression // TypeDefIndex: 1741
{
	// Fields
	private CapturingGroup group; // 0x10
	private bool ignore; // 0x18

	// Properties
	public CapturingGroup CapturingGroup { get; set; }
	public bool IgnoreCase { get; }

	// Methods

	// RVA: 0x204277C Offset: 0x204277C VA: 0x204277C
	public void .ctor(bool ignore) { }

	// RVA: 0x2042AF8 Offset: 0x2042AF8 VA: 0x2042AF8
	public CapturingGroup get_CapturingGroup() { }

	// RVA: 0x2042A78 Offset: 0x2042A78 VA: 0x2042A78
	public void set_CapturingGroup(CapturingGroup value) { }

	// RVA: 0x2042BEC Offset: 0x2042BEC VA: 0x2042BEC
	public bool get_IgnoreCase() { }

	// RVA: 0x2042B00 Offset: 0x2042B00 VA: 0x2042B00 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x204A7C8 Offset: 0x204A7C8 VA: 0x204A7C8 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x204A7D8 Offset: 0x204A7D8 VA: 0x204A7D8 Slot: 7
