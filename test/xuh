	// RVA: 0x14E3718 Offset: 0x14E3718 VA: 0x14E3718
	public static bool CheckTutorial(int warId, Action callback) { }

	// RVA: 0x14E38C4 Offset: 0x14E38C4 VA: 0x14E38C4
	public static void OnClickHelp(int warId) { }

	// RVA: 0x14E3A08 Offset: 0x14E3A08 VA: 0x14E3A08
	private static void .cctor() { }
}

// Namespace: 
private class CaldeaFolderTutorial.TutorialData // TypeDefIndex: 10894
{
	// Fields
	public TutorialFlag.ImageId[] imageIds; // 0x10
	public TutorialFlag.Id flag; // 0x18

	// Methods

	// RVA: 0x14E3C68 Offset: 0x14E3C68 VA: 0x14E3C68
	public void .ctor(TutorialFlag.ImageId[] imgs, TutorialFlag.Id flg) { }
}

// Namespace: 
public class MapTouchDetector : TouchDetectorBase // TypeDefIndex: 10895
{
	// Methods

	// RVA: 0x1492E90 Offset: 0x1492E90 VA: 0x1492E90
	public void .ctor() { }

	// RVA: 0x1492E98 Offset: 0x1492E98 VA: 0x1492E98 Slot: 4
	protected override void DetectTouchLocally() { }

	// RVA: 0x1492FE8 Offset: 0x1492FE8 VA: 0x1492FE8 Slot: 5
	protected virtual bool IsTouchStart() { }

	// RVA: 0x14932F0 Offset: 0x14932F0 VA: 0x14932F0 Slot: 6
	protected virtual bool IsTouchKeep() { }

	// RVA: 0x149346C Offset: 0x149346C VA: 0x149346C Slot: 7
	protected virtual TouchDetectorBase.TouchInfo GetCurrentTouchInfo() { }

	// RVA: 0x1493168 Offset: 0x1493168 VA: 0x1493168
	private List<Touch> GetAvaliableTouchList() { }
}

// Namespace: 
public abstract class TouchDetectorBase // TypeDefIndex: 10896
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC7A87C Offset: 0xC7A87C VA: 0xC7A87C
	[DebuggerBrowsableAttribute] // RVA: 0xC7A87C Offset: 0xC7A87C VA: 0xC7A87C
	private TouchDetectorBase.TouchInfo <StartTouchInfo>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7A8B8 Offset: 0xC7A8B8 VA: 0xC7A8B8
	[DebuggerBrowsableAttribute] // RVA: 0xC7A8B8 Offset: 0xC7A8B8 VA: 0xC7A8B8
	private TouchDetectorBase.TouchInfo <CurrentTouchInfo>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC7A8F4 Offset: 0xC7A8F4 VA: 0xC7A8F4
	[DebuggerBrowsableAttribute] // RVA: 0xC7A8F4 Offset: 0xC7A8F4 VA: 0xC7A8F4
	private TouchDetectorBase.TouchInfo <PrevTouchInfo>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC7A930 Offset: 0xC7A930 VA: 0xC7A930
	[DebuggerBrowsableAttribute] // RVA: 0xC7A930 Offset: 0xC7A930 VA: 0xC7A930
	private Action<int, int> <OnChangeTouchCount>k__BackingField; // 0x28
	private int currentTouchCountCache; // 0x30
	private bool isTouchEnable; // 0x34

	// Properties
	public TouchDetectorBase.TouchInfo StartTouchInfo { get; set; }
	public TouchDetectorBase.TouchInfo CurrentTouchInfo { get; set; }
	public TouchDetectorBase.TouchInfo PrevTouchInfo { get; set; }
	public Action<int, int> OnChangeTouchCount { get; set; }
	public int CurrentTouchCount { get; }
	public bool IsTouchEnable { get; set; }

	// Methods

	// RVA: 0x1885324 Offset: 0x1885324 VA: 0x1885324
	protected void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2178 Offset: 0xCD2178 VA: 0xCD2178
	// RVA: 0x188532C Offset: 0x188532C VA: 0x188532C
	public TouchDetectorBase.TouchInfo get_StartTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2188 Offset: 0xCD2188 VA: 0xCD2188
	// RVA: 0x1885334 Offset: 0x1885334 VA: 0x1885334
	protected void set_StartTouchInfo(TouchDetectorBase.TouchInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2198 Offset: 0xCD2198 VA: 0xCD2198
	// RVA: 0x188533C Offset: 0x188533C VA: 0x188533C
	public TouchDetectorBase.TouchInfo get_CurrentTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD21A8 Offset: 0xCD21A8 VA: 0xCD21A8
	// RVA: 0x1885344 Offset: 0x1885344 VA: 0x1885344
	protected void set_CurrentTouchInfo(TouchDetectorBase.TouchInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD21B8 Offset: 0xCD21B8 VA: 0xCD21B8
	// RVA: 0x188534C Offset: 0x188534C VA: 0x188534C
	public TouchDetectorBase.TouchInfo get_PrevTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD21C8 Offset: 0xCD21C8 VA: 0xCD21C8
	// RVA: 0x1885354 Offset: 0x1885354 VA: 0x1885354
	protected void set_PrevTouchInfo(TouchDetectorBase.TouchInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD21D8 Offset: 0xCD21D8 VA: 0xCD21D8
	// RVA: 0x188535C Offset: 0x188535C VA: 0x188535C
	public Action<int, int> get_OnChangeTouchCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD21E8 Offset: 0xCD21E8 VA: 0xCD21E8
	// RVA: 0x1885364 Offset: 0x1885364 VA: 0x1885364
	public void set_OnChangeTouchCount(Action<int, int> value) { }

	// RVA: 0x188536C Offset: 0x188536C VA: 0x188536C
	public int get_CurrentTouchCount() { }

	// RVA: 0x18853DC Offset: 0x18853DC VA: 0x18853DC
	public bool get_IsTouchEnable() { }

	// RVA: 0x18853E4 Offset: 0x18853E4 VA: 0x18853E4
	public void set_IsTouchEnable(bool value) { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract void DetectTouchLocally();

	// RVA: 0x1885408 Offset: 0x1885408 VA: 0x1885408
	public void DetectTouch() { }

	// RVA: 0x18853FC Offset: 0x18853FC VA: 0x18853FC
	public void ClearTouchInfo() { }

	// RVA: 0x188544C Offset: 0x188544C VA: 0x188544C
	protected void CheckUpdateCurrentTouchCount() { }
}

// Namespace: 
public class TouchDetectorBase.TouchInfo // TypeDefIndex: 10897
{
	// Fields
	private const float MinTouchInterval = 10;
	[CompilerGeneratedAttribute] // RVA: 0xC7A96C Offset: 0xC7A96C VA: 0xC7A96C
	[DebuggerBrowsableAttribute] // RVA: 0xC7A96C Offset: 0xC7A96C VA: 0xC7A96C
	private List<Vector2> <TouchPosList>k__BackingField; // 0x10
	private Nullable<float> touchIntervalCache; // 0x18

	// Properties
	public List<Vector2> TouchPosList { get; set; }
	public int TouchCount { get; }
	public float TouchInterval { get; }
	public Vector2 TouchCenter { get; }

	// Methods

	// RVA: 0x18854FC Offset: 0x18854FC VA: 0x18854FC
	public void .ctor(Vector2 primaryTouchPos, Vector2[] optionalTouchPosArray) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD21F8 Offset: 0xCD21F8 VA: 0xCD21F8
	// RVA: 0x18855FC Offset: 0x18855FC VA: 0x18855FC
	public List<Vector2> get_TouchPosList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2208 Offset: 0xCD2208 VA: 0xCD2208
	// RVA: 0x18855F4 Offset: 0x18855F4 VA: 0x18855F4
	private void set_TouchPosList(List<Vector2> value) { }

	// RVA: 0x188537C Offset: 0x188537C VA: 0x188537C
	public int get_TouchCount() { }

	// RVA: 0x1885604 Offset: 0x1885604 VA: 0x1885604
	public float get_TouchInterval() { }

	// RVA: 0x1885934 Offset: 0x1885934 VA: 0x1885934
	public Vector2 get_TouchCenter() { }
}

// Namespace: 
public class clsQuestCheck : SingletonTemplate<clsQuestCheck> // TypeDefIndex: 10898
{
	// Fields
	private List<QuestReleaseEntity> qrs; // 0x10
	private List<QuestReleaseEntity> cQuestReleaseListP; // 0x18
	private static readonly string KEY_QUEST_START_EFFECT; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC7A9A8 Offset: 0xC7A9A8 VA: 0xC7A9A8
	private static Func<QuestReleaseEntity, bool> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC7A9B8 Offset: 0xC7A9B8 VA: 0xC7A9B8
	private static Comparison<QuestReleaseEntity> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7A9C8 Offset: 0xC7A9C8 VA: 0xC7A9C8
	private static Action <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC7A9D8 Offset: 0xC7A9D8 VA: 0xC7A9D8
	private static Action <>f__am$cache3; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC7A9E8 Offset: 0xC7A9E8 VA: 0xC7A9E8
	private static ServantFrameShortDlgComponent.CallbackFunc <>f__am$cache4; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7A9F8 Offset: 0xC7A9F8 VA: 0xC7A9F8
	private static ServantFrameShortDlgComponent.CallbackFunc <>f__am$cache5; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC7AA08 Offset: 0xC7AA08 VA: 0xC7AA08
	private static ServantFrameShortDlgComponent.CallbackFunc <>f__am$cache6; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC7AA18 Offset: 0xC7AA18 VA: 0xC7AA18
	private static Action <>f__am$cache7; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC7AA28 Offset: 0xC7AA28 VA: 0xC7AA28
	private static Action <>f__am$cache8; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC7AA38 Offset: 0xC7AA38 VA: 0xC7AA38
	private static CommonConfirmDialog.ClickDelegate <>f__am$cache9; // 0x50

	// Methods

	// RVA: 0x185E948 Offset: 0x185E948 VA: 0x185E948
	public void .ctor() { }

	// RVA: 0x185EA00 Offset: 0x185EA00 VA: 0x185EA00
	public static void DeleteContinueData() { }

	// RVA: 0x185EA9C Offset: 0x185EA9C VA: 0x185EA9C
	public bool mfQuestReleaseCheckGetEntityByQuestID(int iQuestID, out QuestReleaseEntity rQuestRlsNG, MapControl.QuestInfo qinf) { }

	// RVA: 0x185F664 Offset: 0x185F664 VA: 0x185F664
	private bool IsValidQuestRandomGroup(MapControl.QuestInfo questInfo) { }

	// RVA: 0x185F92C Offset: 0x185F92C VA: 0x185F92C
	public bool CheckQuestPlayableNow(int iQuestID) { }

	// RVA: 0x185FCC4 Offset: 0x185FCC4 VA: 0x185FCC4
	public bool IsQuestRelease(int quest_id, int old_val = -1, CondType.Kind old_val_qr_type = 0) { }

	// RVA: 0x185FF8C Offset: 0x185FF8C VA: 0x185FF8C
	public bool IsEncountRaidBoss(int eventId, int day) { }

	// RVA: 0x18601BC Offset: 0x18601BC VA: 0x18601BC
	public bool IsWarClear(int war_id) { }

	// RVA: 0x1860280 Offset: 0x1860280 VA: 0x1860280
	public bool IsLastWarClear() { }

	// RVA: 0x18602DC Offset: 0x18602DC VA: 0x18602DC
	public bool IsMainInterlude(int war_id) { }

	// RVA: 0x185F518 Offset: 0x185F518 VA: 0x185F518
	private bool mfQuestReleaseCheckAlreadyClear(int qid) { }

	// RVA: 0x185FCB4 Offset: 0x185FCB4 VA: 0x185FCB4
	private bool IsQuestRelease(QuestReleaseEntity qrd, MapControl.QuestInfo qinf) { }

	// RVA: 0x185FF84 Offset: 0x185FF84 VA: 0x185FF84
	private bool IsQuestRelease(QuestReleaseEntity qrd, int old_val) { }

	// RVA: 0x1860388 Offset: 0x1860388 VA: 0x1860388
	private bool IsQuestRelease(QuestReleaseEntity qrd, int old_val, MapControl.QuestInfo qinf) { }

	// RVA: 0x1860D6C Offset: 0x1860D6C VA: 0x1860D6C
	private void checkCondTypeItemGet(ref bool is_release, QuestReleaseEntity qrd, bool itemGet) { }

	// RVA: 0x1860F40 Offset: 0x1860F40 VA: 0x1860F40
	public bool mfCheck_IsQuestNew(int qid) { }

	// RVA: 0x18610BC Offset: 0x18610BC VA: 0x18610BC
	public int mfGetQuestPhaseByQuestID(int qid) { }

	// RVA: 0x1860130 Offset: 0x1860130 VA: 0x1860130
	public bool IsQuestClear(int qid, bool is_quest_after_action = False) { }

	// RVA: 0x1861304 Offset: 0x1861304 VA: 0x1861304
	public bool IsQuestClearRaw(int qid, bool is_quest_after_action = False) { }

	// RVA: 0x1861390 Offset: 0x1861390 VA: 0x1861390
	public bool IsQuestPhaseClear(int qid, int phase, bool is_quest_after_action = False) { }

	// RVA: 0x1861230 Offset: 0x1861230 VA: 0x1861230
	public int GetBeforeClearQuestId(bool is_quest_after_action) { }

	// RVA: 0x1861458 Offset: 0x1861458 VA: 0x1861458
	public List<int> mfIsQuestOpenByQuestClear(int iQuestID) { }

	// RVA: 0x18615DC Offset: 0x18615DC VA: 0x18615DC
	public List<int> mfIsQuestOpenByItemGet(int iItemID) { }

	// RVA: 0x1861760 Offset: 0x1861760 VA: 0x1861760
	public List<int> GetReleaseQuestIdByServantLv(int svt_id, int oldLv) { }

	// RVA: 0x1861768 Offset: 0x1861768 VA: 0x1861768
	public List<int> GetReleaseQuestIdByServantLv(int svt_id, int oldLv, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x186197C Offset: 0x186197C VA: 0x186197C
	public List<int> GetReleaseQuestIdByServantLimit(int svt_id, int oldLimitCount) { }

	// RVA: 0x1861984 Offset: 0x1861984 VA: 0x1861984
	public List<int> GetReleaseQuestIdByServantLimit(int svt_id, int oldLimitCount, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x1861D58 Offset: 0x1861D58 VA: 0x1861D58
	public List<int> GetReleaseQuestIdByServantLimit(int svt_id, int oldLimitCount, int newLimitCount, QuestEntity.TypeFlag type_flag = 238) { }

	// RVA: 0x18621F8 Offset: 0x18621F8 VA: 0x18621F8
	public List<int> GetReleaseQuestIdByServantGet(int servantId, QuestEntity.TypeFlag typeFlag = 238) { }

	// RVA: 0x1862604 Offset: 0x1862604 VA: 0x1862604
	public List<QuestEntity> GetReleaseQuestEntityByServantGet(int servantId, QuestEntity.TypeFlag typeFlag = 238) { }

	// RVA: 0x18627F8 Offset: 0x18627F8 VA: 0x18627F8
	public List<int> GetReleaseQuestIdByServantFriendShip(int svt_id, int oldFriendShipRank, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x1862BCC Offset: 0x1862BCC VA: 0x1862BCC
	public List<QuestEntity> GetReleaseQuestEntityByServantFriendShip(int svt_id, int oldFriendShipRank, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x186261C Offset: 0x186261C VA: 0x186261C
	private List<QuestEntity> GetQuestEntityByQuestId(List<int> qids) { }

	// RVA: 0x1862BE4 Offset: 0x1862BE4 VA: 0x1862BE4
	public bool isPlayQuestStartAction() { }

	// RVA: 0x1862CA0 Offset: 0x1862CA0 VA: 0x1862CA0
	public void PlayQuestStartAction(Action end_act) { }

	// RVA: 0x1862D84 Offset: 0x1862D84 VA: 0x1862D84
	public bool IsTapSkipQuestStart(int questId, int questPhase, string effectName, bool isMyRoomMaterial) { }

	// RVA: 0x18631B8 Offset: 0x18631B8 VA: 0x18631B8
	public bool CheckQuestPlayable(MapControl.QuestInfo questInfo, long srcEndTime, int boostId = 0) { }

	// RVA: 0x1864D04 Offset: 0x1864D04 VA: 0x1864D04
	private void RecoverItemListDialogCallback(MapControl.QuestInfo qinf, long endTime, RecoverDlgComponent.Result result, int boostId = 0) { }

	// RVA: 0x186500C Offset: 0x186500C VA: 0x186500C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2218 Offset: 0xCD2218 VA: 0xCD2218
	// RVA: 0x1865068 Offset: 0x1865068 VA: 0x1865068
	private static bool <mfQuestReleaseCheckGetEntityByQuestID>m__0(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2228 Offset: 0xCD2228 VA: 0xCD2228
	// RVA: 0x18650A0 Offset: 0x18650A0 VA: 0x18650A0
	private static int <mfQuestReleaseCheckGetEntityByQuestID>m__1(QuestReleaseEntity a, QuestReleaseEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2238 Offset: 0xCD2238 VA: 0xCD2238
	// RVA: 0x18650F8 Offset: 0x18650F8 VA: 0x18650F8
	private static void <CheckQuestPlayable>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2248 Offset: 0xCD2248 VA: 0xCD2248
	// RVA: 0x1865190 Offset: 0x1865190 VA: 0x1865190
	private static void <CheckQuestPlayable>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2258 Offset: 0xCD2258 VA: 0xCD2258
	// RVA: 0x1865194 Offset: 0x1865194 VA: 0x1865194
	private static void <CheckQuestPlayable>m__4(ServantFrameShortDlgComponent.resultClicked result) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2268 Offset: 0xCD2268 VA: 0xCD2268
	// RVA: 0x1865264 Offset: 0x1865264 VA: 0x1865264
	private static void <CheckQuestPlayable>m__5(ServantFrameShortDlgComponent.resultClicked result) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2278 Offset: 0xCD2278 VA: 0xCD2278
	// RVA: 0x1865334 Offset: 0x1865334 VA: 0x1865334
	private static void <CheckQuestPlayable>m__6(ServantFrameShortDlgComponent.resultClicked result) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2288 Offset: 0xCD2288 VA: 0xCD2288
	// RVA: 0x1865404 Offset: 0x1865404 VA: 0x1865404
	private static void <CheckQuestPlayable>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2298 Offset: 0xCD2298 VA: 0xCD2298
	// RVA: 0x1865474 Offset: 0x1865474 VA: 0x1865474
	private static void <CheckQuestPlayable>m__8() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD22A8 Offset: 0xCD22A8 VA: 0xCD22A8
	// RVA: 0x18654E4 Offset: 0x18654E4 VA: 0x18654E4
	private static void <CheckQuestPlayable>m__9(bool isDecide) { }
}

// Namespace: 
public enum clsQuestCheck.QUEST_START_EFFECT_SKIP // TypeDefIndex: 10899
{
	// Fields
	public int value__; // 0x0
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP NONE = 0;
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP FIRST = 1;
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP SECOND = 2;
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP DESABLE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC456C4 Offset: 0xC456C4 VA: 0xC456C4
private sealed class clsQuestCheck.<IsTapSkipQuestStart>c__AnonStorey0 // TypeDefIndex: 10900
{
	// Fields
	internal string effectName; // 0x10

	// Methods

	// RVA: 0x1FA9D18 Offset: 0x1FA9D18 VA: 0x1FA9D18
	public void .ctor() { }

	// RVA: 0x1FA9D20 Offset: 0x1FA9D20 VA: 0x1FA9D20
	internal bool <>m__0(string a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC456D4 Offset: 0xC456D4 VA: 0xC456D4
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey4 // TypeDefIndex: 10901
{
	// Fields
	internal MapControl.QuestInfo questInfo; // 0x10
	internal long srcEndTime; // 0x18
	internal int boostId; // 0x20
	internal clsQuestCheck $this; // 0x28

	// Methods

	// RVA: 0x1FA9BFC Offset: 0x1FA9BFC VA: 0x1FA9BFC
	public void .ctor() { }

	// RVA: 0x1FA9C04 Offset: 0x1FA9C04 VA: 0x1FA9C04
	internal void <>m__0(RecoverDlgComponent.Result result) { }

	// RVA: 0x1FA9C60 Offset: 0x1FA9C60 VA: 0x1FA9C60
	internal void <>m__1(RecoverDlgComponent.Result result) { }

	// RVA: 0x1FA9CBC Offset: 0x1FA9CBC VA: 0x1FA9CBC
	internal void <>m__2(RecoverDlgComponent.Result result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC456E4 Offset: 0xC456E4 VA: 0xC456E4
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey1 // TypeDefIndex: 10902
{
	// Fields
	internal ServantFrameShortDlgComponent.resultClicked result; // 0x10

	// Methods

	// RVA: 0x1FA986C Offset: 0x1FA986C VA: 0x1FA986C
	public void .ctor() { }

	// RVA: 0x1FA9874 Offset: 0x1FA9874 VA: 0x1FA9874
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC456F4 Offset: 0xC456F4 VA: 0xC456F4
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey2 // TypeDefIndex: 10903
{
	// Fields
	internal ServantFrameShortDlgComponent.resultClicked result; // 0x10

	// Methods

	// RVA: 0x1FA99C0 Offset: 0x1FA99C0 VA: 0x1FA99C0
	public void .ctor() { }

	// RVA: 0x1FA99C8 Offset: 0x1FA99C8 VA: 0x1FA99C8
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45704 Offset: 0xC45704 VA: 0xC45704
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey3 // TypeDefIndex: 10904
{
	// Fields
	internal ServantFrameShortDlgComponent.resultClicked result; // 0x10

	// Methods

	// RVA: 0x1FA9B38 Offset: 0x1FA9B38 VA: 0x1FA9B38
	public void .ctor() { }

	// RVA: 0x1FA9B40 Offset: 0x1FA9B40 VA: 0x1FA9B40
	internal void <>m__0() { }
}

// Namespace: 
public class CostumeOpenConfirmDialog : BaseDialog // TypeDefIndex: 10905
{
	// Fields
	private const float CHANGE_FIGURE_ONLY_Y = 130;
	private const float CHANGE_FIGURE_ONLY_ICON_Y = -54;
	[SerializeField] // RVA: 0xC7AA48 Offset: 0xC7AA48 VA: 0xC7AA48
	private UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xC7AA58 Offset: 0xC7AA58 VA: 0xC7AA58
	private UILabel message; // 0x60
	[SerializeField] // RVA: 0xC7AA68 Offset: 0xC7AA68 VA: 0xC7AA68
	private UILabel description; // 0x68
	[SerializeField] // RVA: 0xC7AA78 Offset: 0xC7AA78 VA: 0xC7AA78
	private UILabel closeLabel; // 0x70
	[SerializeField] // RVA: 0xC7AA88 Offset: 0xC7AA88 VA: 0xC7AA88
	private ServantFaceIconComponent svtFaceIcon; // 0x78
	private Action closeAction; // 0x80

	// Methods

	// RVA: 0x14681FC Offset: 0x14681FC VA: 0x14681FC
	public void .ctor() { }

	// RVA: 0x1468264 Offset: 0x1468264 VA: 0x1468264
	private void Init() { }

	// RVA: 0x14683B0 Offset: 0x14683B0 VA: 0x14683B0
	public void Setup(UserServantCollectionEntity userSvtColEntity, ServantCostumeEntity svtCostumeEntity, string svtName) { }

	// RVA: 0x146874C Offset: 0x146874C VA: 0x146874C
	public void Open(Action closeAction) { }

	// RVA: 0x1468780 Offset: 0x1468780 VA: 0x1468780
	public void OnClickCloseButton() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD22B8 Offset: 0xCD22B8 VA: 0xCD22B8
	// RVA: 0x1468824 Offset: 0x1468824 VA: 0x1468824
	private void <OnClickCloseButton>m__0() { }
}

// Namespace: 
public class CylinderCore : BaseCore // TypeDefIndex: 10906
{
	// Fields
	public const float CORE_SCL = 1;
	public const float ZOOM_IN_SPD_TIME = 1.5;
	public const float ZOOM_OUT_SPD_TIME = 1.5;
	public const float EARTH_RADIUS = 143;
	public const float LATITUDE_SPECTRUM = 120;
	public const float GREENWICH_OFFSET = 192;
	public const float MODEL_OFFSET = 90;
	private const int FOCUS_IN_OUT_ANIM_FRAME_NUM = 12;
	private static readonly float BASE_ROT_X; // 0x0
	private static readonly float BASE_ROT_Z; // 0x4
	public const float FOCUS_SPD_RATE = 0.35;
	public static readonly Vector3 FOCUS_IN_POS; // 0x8
	public static readonly Vector3 FOCUS_OUT_POS; // 0x14
	public static readonly Vector3 ZOOM_IN_POS; // 0x20
	private TransitionCalculator<Vector3> focusInOutPositionCalculator; // 0x98
	private CStateManager<CylinderCore> mFSM; // 0xA0
	private CylinderCore.StateMain mStateMain; // 0xA8

	// Properties
	public CylinderPoint mFocusCylinderPoint { get; }

	// Methods

	// RVA: 0x146EC14 Offset: 0x146EC14 VA: 0x146EC14
	public void .ctor() { }

	// RVA: 0x146EC84 Offset: 0x146EC84 VA: 0x146EC84
	public CylinderCore.StateMain GetStateMain() { }

	// RVA: 0x146EC8C Offset: 0x146EC8C VA: 0x146EC8C
	public CylinderPoint get_mFocusCylinderPoint() { }

	// RVA: 0x146ED10 Offset: 0x146ED10 VA: 0x146ED10 Slot: 4
	public override void FocusInOut(bool isFocusIn, bool isForce = False) { }

	// RVA: 0x146EEB4 Offset: 0x146EEB4 VA: 0x146EEB4 Slot: 5
	public override void Awake() { }

	// RVA: 0x146F14C Offset: 0x146F14C VA: 0x146F14C Slot: 6
	public override void Update() { }

	// RVA: 0x146F240 Offset: 0x146F240 VA: 0x146F240 Slot: 7
	public override void OnPress() { }

	// RVA: 0x146F2A4 Offset: 0x146F2A4 VA: 0x146F2A4 Slot: 14
	public override float GetStateMainInertialSpdOld() { }

	// RVA: 0x146F2D8 Offset: 0x146F2D8 VA: 0x146F2D8 Slot: 8
	public override void Setup(List<MapControl.WarInfo> warInfoList, bool isFocusIn) { }

	// RVA: 0x146F91C Offset: 0x146F91C VA: 0x146F91C Slot: 9
	public override void mcbfStartMain() { }

	// RVA: 0x146F924 Offset: 0x146F924 VA: 0x146F924 Slot: 10
	public override void mcbfStartZoomOut() { }

	// RVA: 0x146F92C Offset: 0x146F92C VA: 0x146F92C Slot: 11
	public override void mcbfStartZoomIn() { }

	// RVA: 0x146F938 Offset: 0x146F938 VA: 0x146F938 Slot: 12
	public override void SetDisp(bool is_disp) { }

	// RVA: 0x146F1E0 Offset: 0x146F1E0 VA: 0x146F1E0
	public BaseCore.STATE GetState() { }

	// RVA: 0x146F0DC Offset: 0x146F0DC VA: 0x146F0DC
	public void SetState(BaseCore.STATE state) { }

	// RVA: 0x146F9A0 Offset: 0x146F9A0 VA: 0x146F9A0
	private static void .cctor() { }
}

// Namespace: 
private class CylinderCore.StateNone : IState<CylinderCore> // TypeDefIndex: 10907
{
	// Methods

	// RVA: 0x146F0C4 Offset: 0x146F0C4 VA: 0x146F0C4
	public void .ctor() { }

	// RVA: 0x146FD9C Offset: 0x146FD9C VA: 0x146FD9C Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x146FDA0 Offset: 0x146FDA0 VA: 0x146FDA0 Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x146FDA4 Offset: 0x146FDA4 VA: 0x146FDA4 Slot: 6
	public void end(CylinderCore that) { }
}

// Namespace: 
public class CylinderCore.StateMain : IState<CylinderCore> // TypeDefIndex: 10908
{
	// Fields
	private const float DRAG_SPD_RATE = -0.2;
	private const float INERTIAL_SPD_RATE = 0.88;
	private const float INERTIAL_SPD_END = 0.004;
	private float mInertialSpd; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7AA98 Offset: 0xC7AA98 VA: 0xC7AA98
	[DebuggerBrowsableAttribute] // RVA: 0xC7AA98 Offset: 0xC7AA98 VA: 0xC7AA98
	private float <InertialSpdOld>k__BackingField; // 0x14

	// Properties
	public float InertialSpd { get; }
	public float InertialSpdOld { get; set; }

	// Methods

	// RVA: 0x146EC7C Offset: 0x146EC7C VA: 0x146EC7C
	public void .ctor() { }

	// RVA: 0x146F294 Offset: 0x146F294 VA: 0x146F294
	public float get_InertialSpd() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD22C8 Offset: 0xCD22C8 VA: 0xCD22C8
	// RVA: 0x146F2D0 Offset: 0x146F2D0 VA: 0x146F2D0
	public float get_InertialSpdOld() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD22D8 Offset: 0xCD22D8 VA: 0xCD22D8
	// RVA: 0x146F29C Offset: 0x146F29C VA: 0x146F29C
	public void set_InertialSpdOld(float value) { }

	// RVA: 0x146FAD8 Offset: 0x146FAD8 VA: 0x146FAD8 Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x146FAE0 Offset: 0x146FAE0 VA: 0x146FAE0 Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x146FD98 Offset: 0x146FD98 VA: 0x146FD98 Slot: 6
	public void end(CylinderCore that) { }
}

// Namespace: 
private class CylinderCore.StateZoomIn : IState<CylinderCore> // TypeDefIndex: 10909
{
	// Fields
	private CylinderCore mCore; // 0x10
	private float mStartTime; // 0x18
	private float mSpdTime; // 0x1C

	// Methods

	// RVA: 0x146F0CC Offset: 0x146F0CC VA: 0x146F0CC
	public void .ctor() { }

	// RVA: 0x146FDA8 Offset: 0x146FDA8 VA: 0x146FDA8 Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x1470460 Offset: 0x1470460 VA: 0x1470460 Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x147054C Offset: 0x147054C VA: 0x147054C Slot: 6
	public void end(CylinderCore that) { }

	// RVA: 0x1470390 Offset: 0x1470390 VA: 0x1470390
	private void GoNext() { }

	// RVA: 0x1470550 Offset: 0x1470550 VA: 0x1470550
	private void updateFadeTime() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45714 Offset: 0xC45714 VA: 0xC45714
private sealed class CylinderCore.StateZoomIn.<begin>c__AnonStorey0 // TypeDefIndex: 10910
{
	// Fields
	internal EasingObject eo; // 0x10
	internal Vector3 startPos; // 0x18
	internal Vector3 endPos; // 0x24
	internal CylinderCore that; // 0x30
	internal float startRotY; // 0x38
	internal float endRotY; // 0x3C
	internal Vector3 startRot; // 0x40
	internal Vector3 endRot; // 0x4C
	internal CylinderCore.StateZoomIn $this; // 0x58

	// Methods

	// RVA: 0x1470388 Offset: 0x1470388 VA: 0x1470388
	public void .ctor() { }

	// RVA: 0x1470554 Offset: 0x1470554 VA: 0x1470554
	internal void <>m__0() { }

	// RVA: 0x1470788 Offset: 0x1470788 VA: 0x1470788
	internal void <>m__1() { }
}

// Namespace: 
private class CylinderCore.StateZoomOut : IState<CylinderCore> // TypeDefIndex: 10911
{
	// Fields
	private CylinderCore mCore; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7AAD4 Offset: 0xC7AAD4 VA: 0xC7AAD4
	private static Action <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x146F0D4 Offset: 0x146F0D4 VA: 0x146F0D4
	public void .ctor() { }

	// RVA: 0x1470904 Offset: 0x1470904 VA: 0x1470904 Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x1470EE0 Offset: 0x1470EE0 VA: 0x1470EE0 Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x1470EE4 Offset: 0x1470EE4 VA: 0x1470EE4 Slot: 6
	public void end(CylinderCore that) { }

	// RVA: 0x1470E18 Offset: 0x1470E18 VA: 0x1470E18
	private void GoNext() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD22E8 Offset: 0xCD22E8 VA: 0xCD22E8
	// RVA: 0x1470EE8 Offset: 0x1470EE8 VA: 0x1470EE8
	private static void <begin>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45724 Offset: 0xC45724 VA: 0xC45724
private sealed class CylinderCore.StateZoomOut.<begin>c__AnonStorey0 // TypeDefIndex: 10912
{
	// Fields
	internal EasingObject eo; // 0x10
	internal Vector3 startPos; // 0x18
	internal Vector3 endPos; // 0x24
	internal CylinderCore that; // 0x30
	internal Vector3 endRot; // 0x38
	internal Vector3 startRot; // 0x44
	internal CylinderCore.StateZoomOut $this; // 0x50

	// Methods

	// RVA: 0x1470E10 Offset: 0x1470E10 VA: 0x1470E10
	public void .ctor() { }

	// RVA: 0x1470EEC Offset: 0x1470EEC VA: 0x1470EEC
	internal void <>m__0() { }

	// RVA: 0x1471120 Offset: 0x1471120 VA: 0x1471120
	internal void <>m__1() { }
}

// Namespace: 
public class CylinderPoint : BaseEarthPoint // TypeDefIndex: 10913
{
	// Fields
	private const string EFFECT_NAME = "ef_difference21";
	private static readonly Vector3 FORWARD_VEC; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC7AAE4 Offset: 0xC7AAE4 VA: 0xC7AAE4
	[DebuggerBrowsableAttribute] // RVA: 0xC7AAE4 Offset: 0xC7AAE4 VA: 0xC7AAE4
	private float <Deg>k__BackingField; // 0x6C

	// Properties
	public float Deg { get; set; }

	// Methods

	// RVA: 0x1471210 Offset: 0x1471210 VA: 0x1471210
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD22F8 Offset: 0xCD22F8 VA: 0xCD22F8
	// RVA: 0x1470458 Offset: 0x1470458 VA: 0x1470458
	public float get_Deg() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2308 Offset: 0xCD2308 VA: 0xCD2308
	// RVA: 0x146F914 Offset: 0x146F914 VA: 0x146F914
	public void set_Deg(float value) { }

	// RVA: 0x1471278 Offset: 0x1471278 VA: 0x1471278 Slot: 4
	protected override void LateUpdate() { }

	// RVA: 0x1471548 Offset: 0x1471548 VA: 0x1471548 Slot: 5
	protected override string GetEffectName() { }

	// RVA: 0x1471590 Offset: 0x1471590 VA: 0x1471590
	private static void .cctor() { }
}

// Namespace: 
public class EarthCore : BaseCore // TypeDefIndex: 10914
{
	// Fields
	public const float CORE_SCL = 350;
	public const float ZOOM_IN_SPD_TIME = 1;
	public const float ZOOM_IN_SCL = 6;
	public const float ZOOM_OUT_SPD_TIME = 1;
	public const float EARTH_RADIUS = 0.5;
	public const float GREENWICH_OFFSET = 9.5;
	public const float FOCUS_SPD_RATE = 0.35;
	public static readonly Vector3 FOCUS_IN_POS; // 0x0
	public const float FOCUS_IN_SCL = 1;
	public static readonly Vector3 FOCUS_OUT_POS; // 0xC
	public const float FOCUS_OUT_SCL = 0.95;
	private const int FOCUS_IN_OUT_ANIM_FRAME_COUNT = 10;
	private CStateManager<EarthCore> mFSM; // 0x98
	private EarthCore.StateMain mStateMain; // 0xA0
	private TransitionCalculator<Vector3> focusInOutPositionCalculator; // 0xA8
	private TransitionCalculator<float> focusInOutScaleCalculator; // 0xB0

	// Methods

	// RVA: 0x10D50D8 Offset: 0x10D50D8 VA: 0x10D50D8
	public void .ctor() { }

	// RVA: 0x10D5148 Offset: 0x10D5148 VA: 0x10D5148
	public EarthCore.StateMain GetStateMain() { }

	// RVA: 0x10D5150 Offset: 0x10D5150 VA: 0x10D5150 Slot: 4
	public override void FocusInOut(bool isFocusIn, bool isForce = False) { }

	// RVA: 0x10D5384 Offset: 0x10D5384 VA: 0x10D5384 Slot: 5
	public override void Awake() { }

	// RVA: 0x10D563C Offset: 0x10D563C VA: 0x10D563C Slot: 6
	public override void Update() { }

	// RVA: 0x10D5730 Offset: 0x10D5730 VA: 0x10D5730 Slot: 7
	public override void OnPress() { }

	// RVA: 0x10D5794 Offset: 0x10D5794 VA: 0x10D5794 Slot: 14
	public override float GetStateMainInertialSpdOld() { }

	// RVA: 0x10D57C8 Offset: 0x10D57C8 VA: 0x10D57C8 Slot: 8
	public override void Setup(List<MapControl.WarInfo> warInfoList, bool isFocusIn) { }

	// RVA: 0x10D5D28 Offset: 0x10D5D28 VA: 0x10D5D28 Slot: 9
	public override void mcbfStartMain() { }

	// RVA: 0x10D5D30 Offset: 0x10D5D30 VA: 0x10D5D30 Slot: 10
	public override void mcbfStartZoomOut() { }

	// RVA: 0x10D5D38 Offset: 0x10D5D38 VA: 0x10D5D38 Slot: 11
	public override void mcbfStartZoomIn() { }

	// RVA: 0x10D5D44 Offset: 0x10D5D44 VA: 0x10D5D44 Slot: 12
	public override void SetDisp(bool is_disp) { }

	// RVA: 0x10D56D0 Offset: 0x10D56D0 VA: 0x10D56D0
	public BaseCore.STATE GetState() { }

	// RVA: 0x10D55CC Offset: 0x10D55CC VA: 0x10D55CC
	public void SetState(BaseCore.STATE state) { }

	// RVA: 0x10D5DAC Offset: 0x10D5DAC VA: 0x10D5DAC
	private static void .cctor() { }
}

// Namespace: 
private class EarthCore.StateNone : IState<EarthCore> // TypeDefIndex: 10915
{
	// Methods

	// RVA: 0x16F0580 Offset: 0x16F0580 VA: 0x16F0580
	public void .ctor() { }

	// RVA: 0x16F0588 Offset: 0x16F0588 VA: 0x16F0588 Slot: 4
	public void begin(EarthCore that) { }

	// RVA: 0x16F058C Offset: 0x16F058C VA: 0x16F058C Slot: 5
	public void update(EarthCore that) { }

	// RVA: 0x16F0590 Offset: 0x16F0590 VA: 0x16F0590 Slot: 6
	public void end(EarthCore that) { }
}

// Namespace: 
public class EarthCore.StateMain : IState<EarthCore> // TypeDefIndex: 10916
{
	// Fields
	private float mInertialSpd; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7AB20 Offset: 0xC7AB20 VA: 0xC7AB20
	[DebuggerBrowsableAttribute] // RVA: 0xC7AB20 Offset: 0xC7AB20 VA: 0xC7AB20
	private float <InertialSpdOld>k__BackingField; // 0x14

	// Properties
	public float InertialSpd { get; }
	public float InertialSpdOld { get; set; }

	// Methods

	// RVA: 0x10D5140 Offset: 0x10D5140 VA: 0x10D5140
	public void .ctor() { }

	// RVA: 0x10D5784 Offset: 0x10D5784 VA: 0x10D5784
	public float get_InertialSpd() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2318 Offset: 0xCD2318 VA: 0xCD2318
	// RVA: 0x10D57C0 Offset: 0x10D57C0 VA: 0x10D57C0
	public float get_InertialSpdOld() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2328 Offset: 0xCD2328 VA: 0xCD2328
	// RVA: 0x10D578C Offset: 0x10D578C VA: 0x10D578C
	public void set_InertialSpdOld(float value) { }

	// RVA: 0x10D5E80 Offset: 0x10D5E80 VA: 0x10D5E80 Slot: 4
	public void begin(EarthCore that) { }

	// RVA: 0x10D5E88 Offset: 0x10D5E88 VA: 0x10D5E88 Slot: 5
	public void update(EarthCore that) { }

	// RVA: 0x10D61DC Offset: 0x10D61DC VA: 0x10D61DC Slot: 6
	public void end(EarthCore that) { }
}

// Namespace: 
private class EarthCore.StateZoomIn : IState<EarthCore> // TypeDefIndex: 10917
{
	// Fields
	private EarthCore mThat; // 0x10
	private float mStartTime; // 0x18
	private float mSpdTime; // 0x1C

	// Methods

	// RVA: 0x16F0594 Offset: 0x16F0594 VA: 0x16F0594
	public void .ctor() { }

	// RVA: 0x16F059C Offset: 0x16F059C VA: 0x16F059C Slot: 4
	public void begin(EarthCore that) { }

	// RVA: 0x16F0CF8 Offset: 0x16F0CF8 VA: 0x16F0CF8 Slot: 5
	public void update(EarthCore that) { }

	// RVA: 0x16F0DE4 Offset: 0x16F0DE4 VA: 0x16F0DE4 Slot: 6
	public void end(EarthCore that) { }

	// RVA: 0x16F0BA8 Offset: 0x16F0BA8 VA: 0x16F0BA8
	private void GoNext() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45734 Offset: 0xC45734 VA: 0xC45734
private sealed class EarthCore.StateZoomIn.<begin>c__AnonStorey0 // TypeDefIndex: 10918
{
	// Fields
	internal EasingObject eo; // 0x10
	internal Quaternion qua_from; // 0x18
	internal Quaternion qua_to; // 0x28
	internal EarthCore that; // 0x38
	internal Quaternion root_qua_from; // 0x40
	internal Quaternion root_qua_to; // 0x50
	internal Vector3 root_pos_from; // 0x60
	internal Vector3 root_pos_to; // 0x6C
	internal Vector3 root_scl_from; // 0x78
	internal Vector3 root_scl_to; // 0x84
	internal EarthCore.StateZoomIn $this; // 0x90

	// Methods

	// RVA: 0x16F0BA0 Offset: 0x16F0BA0 VA: 0x16F0BA0
	public void .ctor() { }

	// RVA: 0x16F0DE8 Offset: 0x16F0DE8 VA: 0x16F0DE8
	internal void <>m__0() { }

	// RVA: 0x16F1130 Offset: 0x16F1130 VA: 0x16F1130
	internal void <>m__1() { }
}

// Namespace: 
private class EarthCore.StateZoomOut : IState<EarthCore> // TypeDefIndex: 10919
{
	// Fields
	private EarthCore mThat; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC7AB5C Offset: 0xC7AB5C VA: 0xC7AB5C
	private static Action <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x16F1344 Offset: 0x16F1344 VA: 0x16F1344
	public void .ctor() { }

	// RVA: 0x16F134C Offset: 0x16F134C VA: 0x16F134C Slot: 4
	public void begin(EarthCore that) { }

	// RVA: 0x16F1AC8 Offset: 0x16F1AC8 VA: 0x16F1AC8 Slot: 5
	public void update(EarthCore that) { }

	// RVA: 0x16F1ACC Offset: 0x16F1ACC VA: 0x16F1ACC Slot: 6
	public void end(EarthCore that) { }

	// RVA: 0x16F1974 Offset: 0x16F1974 VA: 0x16F1974
	private void GoNext() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD2338 Offset: 0xCD2338 VA: 0xCD2338
	// RVA: 0x16F1AD0 Offset: 0x16F1AD0 VA: 0x16F1AD0
	private static void <begin>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45744 Offset: 0xC45744 VA: 0xC45744
private sealed class EarthCore.StateZoomOut.<begin>c__AnonStorey0 // TypeDefIndex: 10920
{
	// Fields
	internal EasingObject eo; // 0x10
