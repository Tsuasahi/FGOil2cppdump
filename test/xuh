	// RVA: 0x179BAF4 Offset: 0x179BAF4 VA: 0x179BAF4
	public static bool HasID(int hIndex, int vIndex, int[] uniqueIds) { }

	// RVA: 0x179BB90 Offset: 0x179BB90 VA: 0x179BB90
	private static void .cctor() { }
}

// Namespace: 
public static class SubmarineDataHelperScan // TypeDefIndex: 10909
{
	// Properties
	private static EventPanelScanMaster eventPanelScanMaster { get; }
	private static CommonConsumeMaster commonConusmeMaster { get; }
	private static ItemMaster itemMaster { get; }
	private static UserItemMaster userItemMaster { get; }

	// Methods

	// RVA: 0x1D0CC1C Offset: 0x1D0CC1C VA: 0x1D0CC1C
	private static EventPanelScanMaster get_eventPanelScanMaster() { }

	// RVA: 0x1D0CC88 Offset: 0x1D0CC88 VA: 0x1D0CC88
	private static CommonConsumeMaster get_commonConusmeMaster() { }

	// RVA: 0x1D0CCF4 Offset: 0x1D0CCF4 VA: 0x1D0CCF4
	private static ItemMaster get_itemMaster() { }

	// RVA: 0x1D0CD60 Offset: 0x1D0CD60 VA: 0x1D0CD60
	private static UserItemMaster get_userItemMaster() { }

	// RVA: 0x1D0CDCC Offset: 0x1D0CDCC VA: 0x1D0CDCC
	public static bool IsScannable(int hIndex, int vIndex, SubmarineMapDataManager submarineData) { }

	// RVA: 0x1D0D118 Offset: 0x1D0D118 VA: 0x1D0D118
	public static List<SubmarineScanEvent> CreateScanEvents(int scanId, SubmarineMapPanelData basePanel, SubmarineMapDataManager submarineData) { }

	// RVA: 0x1D0D4E4 Offset: 0x1D0D4E4 VA: 0x1D0D4E4
	public static CommonConsumeDetailInfo[] GetConsumeItemByScanId(int scanId) { }

	// RVA: 0x1D0D574 Offset: 0x1D0D574 VA: 0x1D0D574
	public static string GetConsumeTextForScan(int scanId) { }

	// RVA: 0x1D0D58C Offset: 0x1D0D58C VA: 0x1D0D58C
	public static int[] GetUnreleasedScanIds(int eventId) { }

	// RVA: 0x1D0D6E4 Offset: 0x1D0D6E4 VA: 0x1D0D6E4
	public static int[] GetReleasedScanIds(int eventId) { }
}

// Namespace: 
public static class SubmarineDataHelperSpot // TypeDefIndex: 10910
{
	// Properties
	private static EventPanelSpotMaster eventPanelSpotMaster { get; }
	private static EventPanelMapMaster eventPanelMapMaster { get; }
	private static EventPanelMapDetailMaster eventPanelMapDetailMaster { get; }
	private static UserEventMapMaster userEventMapMaster { get; }
	private static UserEventSpotMaster userEventSpotMaster { get; }
	private static SpotMaster spotMaster { get; }

	// Methods

	// RVA: 0x1D0D83C Offset: 0x1D0D83C VA: 0x1D0D83C
	private static EventPanelSpotMaster get_eventPanelSpotMaster() { }

	// RVA: 0x1D0D8A8 Offset: 0x1D0D8A8 VA: 0x1D0D8A8
	private static EventPanelMapMaster get_eventPanelMapMaster() { }

	// RVA: 0x1D0D914 Offset: 0x1D0D914 VA: 0x1D0D914
	private static EventPanelMapDetailMaster get_eventPanelMapDetailMaster() { }

	// RVA: 0x1D0D980 Offset: 0x1D0D980 VA: 0x1D0D980
	private static UserEventMapMaster get_userEventMapMaster() { }

	// RVA: 0x1D0D9EC Offset: 0x1D0D9EC VA: 0x1D0D9EC
	private static UserEventSpotMaster get_userEventSpotMaster() { }

	// RVA: 0x1D0DA58 Offset: 0x1D0DA58 VA: 0x1D0DA58
	private static SpotMaster get_spotMaster() { }

	// RVA: 0x1D0DAC4 Offset: 0x1D0DAC4 VA: 0x1D0DAC4
	public static List<SubmarineSpotInfo> GetSubmarineSpotInfoList(int eventId, int mapId) { }

	// RVA: 0x1D0DD98 Offset: 0x1D0DD98 VA: 0x1D0DD98
	public static SubmarineSpotInfo GetSubmarineSpotInfo(int spotId, int eventId, int mapId) { }

	// RVA: 0x1D0DC88 Offset: 0x1D0DC88 VA: 0x1D0DC88
	private static SubmarineSpotInfo CreateSubmarineSpotInfo(EventPanelSpotEntity eventPanelSpotEntity, SpotEntity spotEntity) { }

	// RVA: 0x1D0DE88 Offset: 0x1D0DE88 VA: 0x1D0DE88
	public static bool IsSpotBelowClosedPanel(SpotEntity spotEntity, bool checkBeforeClearQuest = False) { }

	// RVA: 0x1D0E144 Offset: 0x1D0E144 VA: 0x1D0E144
	public static EventPanelSpotEntity[] GetSpotsEnemyOccupied(int eventId, int mapId, int hIndex, int vIndex) { }
}

// Namespace: 
public class SubmarineMapDataManager // TypeDefIndex: 10911
{
	// Fields
	private MapControl.MapInfo MapInfo; // 0x10
	private MapControl.WarInfo WarInfo; // 0x18
	private bool hasReleasedScanMethod; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE74F8 Offset: 0xCE74F8 VA: 0xCE74F8
	[DebuggerBrowsableAttribute] // RVA: 0xCE74F8 Offset: 0xCE74F8 VA: 0xCE74F8
	private List<SubmarineMapPanelData> <PanelDataList>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCE7534 Offset: 0xCE7534 VA: 0xCE7534
	[DebuggerBrowsableAttribute] // RVA: 0xCE7534 Offset: 0xCE7534 VA: 0xCE7534
	private List<SubmarineSilhouetteData> <SilhouetteDataList>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCE7570 Offset: 0xCE7570 VA: 0xCE7570
	[DebuggerBrowsableAttribute] // RVA: 0xCE7570 Offset: 0xCE7570 VA: 0xCE7570
	private SubmarinePanelPositionCalculator <PositionCalculator>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCE75AC Offset: 0xCE75AC VA: 0xCE75AC
	[DebuggerBrowsableAttribute] // RVA: 0xCE75AC Offset: 0xCE75AC VA: 0xCE75AC
	private SubmarineQuestSaveInfo <BeforeQuestInfo>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCE75E8 Offset: 0xCE75E8 VA: 0xCE75E8
	[DebuggerBrowsableAttribute] // RVA: 0xCE75E8 Offset: 0xCE75E8 VA: 0xCE75E8
	private SubmarineSettingsManager <Settings>k__BackingField; // 0x48

	// Properties
	private static EventPanelMapMaster eventPanelMapMaster { get; }
	private static EventPanelMapDetailMaster eventMapDetailMaster { get; }
	private static UserEventMapMaster userEventMapMaster { get; }
	public int EventId { get; }
	public List<SubmarineMapPanelData> PanelDataList { get; set; }
	public List<SubmarineSilhouetteData> SilhouetteDataList { get; set; }
	public SubmarinePanelPositionCalculator PositionCalculator { get; set; }
	public SubmarineQuestSaveInfo BeforeQuestInfo { get; set; }
	public SubmarineSettingsManager Settings { get; set; }

	// Methods

	// RVA: 0x1D0FC74 Offset: 0x1D0FC74 VA: 0x1D0FC74
	public void .ctor(MapControl.MapInfo mapInfo, MapControl.WarInfo warInfo) { }

	// RVA: 0x1D0FE00 Offset: 0x1D0FE00 VA: 0x1D0FE00
	private static EventPanelMapMaster get_eventPanelMapMaster() { }

	// RVA: 0x1D0FE6C Offset: 0x1D0FE6C VA: 0x1D0FE6C
	private static EventPanelMapDetailMaster get_eventMapDetailMaster() { }

	// RVA: 0x1D0FED8 Offset: 0x1D0FED8 VA: 0x1D0FED8
	private static UserEventMapMaster get_userEventMapMaster() { }

	// RVA: 0x1D0FDC8 Offset: 0x1D0FDC8 VA: 0x1D0FDC8
	public int get_EventId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F78C Offset: 0xD3F78C VA: 0xD3F78C
	// RVA: 0x1D0FF44 Offset: 0x1D0FF44 VA: 0x1D0FF44
	public List<SubmarineMapPanelData> get_PanelDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F79C Offset: 0xD3F79C VA: 0xD3F79C
	// RVA: 0x1D0FDB0 Offset: 0x1D0FDB0 VA: 0x1D0FDB0
	private void set_PanelDataList(List<SubmarineMapPanelData> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F7AC Offset: 0xD3F7AC VA: 0xD3F7AC
	// RVA: 0x1D0FF4C Offset: 0x1D0FF4C VA: 0x1D0FF4C
	public List<SubmarineSilhouetteData> get_SilhouetteDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F7BC Offset: 0xD3F7BC VA: 0xD3F7BC
	// RVA: 0x1D0FDB8 Offset: 0x1D0FDB8 VA: 0x1D0FDB8
	private void set_SilhouetteDataList(List<SubmarineSilhouetteData> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F7CC Offset: 0xD3F7CC VA: 0xD3F7CC
	// RVA: 0x1D0FF54 Offset: 0x1D0FF54 VA: 0x1D0FF54
	public SubmarinePanelPositionCalculator get_PositionCalculator() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F7DC Offset: 0xD3F7DC VA: 0xD3F7DC
	// RVA: 0x1D0FDA8 Offset: 0x1D0FDA8 VA: 0x1D0FDA8
	private void set_PositionCalculator(SubmarinePanelPositionCalculator value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F7EC Offset: 0xD3F7EC VA: 0xD3F7EC
	// RVA: 0x1D0FF5C Offset: 0x1D0FF5C VA: 0x1D0FF5C
	public SubmarineQuestSaveInfo get_BeforeQuestInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F7FC Offset: 0xD3F7FC VA: 0xD3F7FC
	// RVA: 0x1D0FDC0 Offset: 0x1D0FDC0 VA: 0x1D0FDC0
	private void set_BeforeQuestInfo(SubmarineQuestSaveInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F80C Offset: 0xD3F80C VA: 0xD3F80C
	// RVA: 0x1D0FF64 Offset: 0x1D0FF64 VA: 0x1D0FF64
	public SubmarineSettingsManager get_Settings() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F81C Offset: 0xD3F81C VA: 0xD3F81C
	// RVA: 0x1D0FDF8 Offset: 0x1D0FDF8 VA: 0x1D0FDF8
	private void set_Settings(SubmarineSettingsManager value) { }

	// RVA: 0x1D0FF6C Offset: 0x1D0FF6C VA: 0x1D0FF6C
	public void LoadSettings(SubmarineSettings overwriteSettings) { }

	// RVA: 0x1D10048 Offset: 0x1D10048 VA: 0x1D10048
	public void DeleteBeforeQuestInfo() { }

	// RVA: 0x1D10078 Offset: 0x1D10078 VA: 0x1D10078
	public void ConstructParams() { }

	// RVA: 0x1D10578 Offset: 0x1D10578 VA: 0x1D10578
	public void UpdateParams(int beforeClearQuestId = -1) { }

	// RVA: 0x1D0CEE0 Offset: 0x1D0CEE0 VA: 0x1D0CEE0
	public SubmarineMapPanelData GetPanelByIndices(int hIndex, int vIndex) { }

	// RVA: 0x1D104A8 Offset: 0x1D104A8 VA: 0x1D104A8
	public SubmarineMapPanelData GetPanelByPanelId(int panelId) { }

	// RVA: 0x1D10E6C Offset: 0x1D10E6C VA: 0x1D10E6C
	public SubmarineMapPanelData GetPanelBySpotId(int spotId) { }

	// RVA: 0x1D10C68 Offset: 0x1D10C68 VA: 0x1D10C68
	public SubmarineMapPanelData[] GetSilhouetteOccupiedPanels(SubmarineSilhouetteData silhouetteData) { }

	// RVA: 0x1D0CFCC Offset: 0x1D0CFCC VA: 0x1D0CFCC
	public SubmarineMapPanelData[] GetNeighborPanels(int hIndex, int vIndex, bool diagonal = False) { }

	// RVA: 0x1D10F44 Offset: 0x1D10F44 VA: 0x1D10F44
	public SubmarineMapPanelData[] GetPanelsByScanEvents(List<SubmarineScanEvent> scanEvents) { }

	// RVA: 0x1D11124 Offset: 0x1D11124 VA: 0x1D11124
	public int GetNewReleasedScanId() { }

	// RVA: 0x1D112AC Offset: 0x1D112AC VA: 0x1D112AC
	public int[] GetEmptyPanelUniqueIds() { }

	// RVA: 0x1D0E050 Offset: 0x1D0E050 VA: 0x1D0E050
	public static bool IsOpenPanel(UserEventMapEntity userEventMapEntity, EventPanelMapDetailEntity panelDetail, int beforeClearQuestId = -1) { }

	// RVA: 0x1D11448 Offset: 0x1D11448 VA: 0x1D11448
	private static bool IsEnemyOccupiedPanelAndDefeated(UserEventMapEntity userEventMapEntity, EventPanelMapDetailEntity panelDetail, int beforeClearQuestId = -1) { }

	// RVA: 0x1D11534 Offset: 0x1D11534 VA: 0x1D11534
	public static bool IsPanelSatisfyCommonReleaseCond(SubmarineMapPanelData panelData, int beforeClearQuestId = -1) { }

	// RVA: 0x1D11410 Offset: 0x1D11410 VA: 0x1D11410
	private static bool IsPanelSatisfyCommonReleaseCond(EventPanelMapDetailEntity panelDetail, int beforeClearQuestId = -1) { }

	// RVA: 0x1D11574 Offset: 0x1D11574 VA: 0x1D11574
	private static bool IsPanelSatisfyCommonReleaseCond(int commonReleaseId, int beforeClearQuestId = -1) { }

	// RVA: 0x1D10B80 Offset: 0x1D10B80 VA: 0x1D10B80
	public static bool IsClearEachQuests(int[] questIds, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1D11580 Offset: 0x1D11580 VA: 0x1D11580
	public static bool HasUserMapData(int eventId, int mapId) { }

	// RVA: 0x1D115D4 Offset: 0x1D115D4 VA: 0x1D115D4
	public static bool IsSubmarineMap(int mapId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1800 Offset: 0xCB1800 VA: 0xCB1800
private sealed class SubmarineMapDataManager.<GetPanelByIndices>c__AnonStorey0 // TypeDefIndex: 10912
{
	// Fields
	internal int hIndex; // 0x10
	internal int vIndex; // 0x14

	// Methods

	// RVA: 0x1D10E5C Offset: 0x1D10E5C VA: 0x1D10E5C
	public void .ctor() { }

	// RVA: 0x1D11680 Offset: 0x1D11680 VA: 0x1D11680
	internal bool <>m__0(SubmarineMapPanelData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1810 Offset: 0xCB1810 VA: 0xCB1810
private sealed class SubmarineMapDataManager.<GetPanelByPanelId>c__AnonStorey1 // TypeDefIndex: 10913
{
	// Fields
	internal int panelId; // 0x10

	// Methods

	// RVA: 0x1D10E64 Offset: 0x1D10E64 VA: 0x1D10E64
	public void .ctor() { }

	// RVA: 0x1D116F0 Offset: 0x1D116F0 VA: 0x1D116F0
	internal bool <>m__0(SubmarineMapPanelData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1820 Offset: 0xCB1820 VA: 0xCB1820
private sealed class SubmarineMapDataManager.<GetPanelBySpotId>c__AnonStorey2 // TypeDefIndex: 10914
{
	// Fields
	internal int spotId; // 0x10

	// Methods

	// RVA: 0x1D10F3C Offset: 0x1D10F3C VA: 0x1D10F3C
	public void .ctor() { }

	// RVA: 0x1D11734 Offset: 0x1D11734 VA: 0x1D11734
	internal bool <>m__0(SubmarineMapPanelData x) { }
}

// Namespace: 
public class SubmarineMapPanelData // TypeDefIndex: 10915
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCE7624 Offset: 0xCE7624 VA: 0xCE7624
	[DebuggerBrowsableAttribute] // RVA: 0xCE7624 Offset: 0xCE7624 VA: 0xCE7624
	private int <HIndex>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE7660 Offset: 0xCE7660 VA: 0xCE7660
	[DebuggerBrowsableAttribute] // RVA: 0xCE7660 Offset: 0xCE7660 VA: 0xCE7660
	private int <VIndex>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCE769C Offset: 0xCE769C VA: 0xCE769C
	[DebuggerBrowsableAttribute] // RVA: 0xCE769C Offset: 0xCE769C VA: 0xCE769C
	private int <PanelId>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE76D8 Offset: 0xCE76D8 VA: 0xCE76D8
	[DebuggerBrowsableAttribute] // RVA: 0xCE76D8 Offset: 0xCE76D8 VA: 0xCE76D8
	private Vector3 <LocalPosition>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCE7714 Offset: 0xCE7714 VA: 0xCE7714
	[DebuggerBrowsableAttribute] // RVA: 0xCE7714 Offset: 0xCE7714 VA: 0xCE7714
	private int <SpotId>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCE7750 Offset: 0xCE7750 VA: 0xCE7750
	[DebuggerBrowsableAttribute] // RVA: 0xCE7750 Offset: 0xCE7750 VA: 0xCE7750
	private int <CommonReleaseId>k__BackingField; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0xCE778C Offset: 0xCE778C VA: 0xCE778C
	[DebuggerBrowsableAttribute] // RVA: 0xCE778C Offset: 0xCE778C VA: 0xCE778C
	private SubmarineMapPanelComponent <Component>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCE77C8 Offset: 0xCE77C8 VA: 0xCE77C8
	[DebuggerBrowsableAttribute] // RVA: 0xCE77C8 Offset: 0xCE77C8 VA: 0xCE77C8
	private bool <IsOpened>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCE7804 Offset: 0xCE7804 VA: 0xCE7804
	[DebuggerBrowsableAttribute] // RVA: 0xCE7804 Offset: 0xCE7804 VA: 0xCE7804
	private bool <HasEnemyParts>k__BackingField; // 0x39
	[CompilerGeneratedAttribute] // RVA: 0xCE7840 Offset: 0xCE7840 VA: 0xCE7840
	[DebuggerBrowsableAttribute] // RVA: 0xCE7840 Offset: 0xCE7840 VA: 0xCE7840
	private bool <IsScannable>k__BackingField; // 0x3A

	// Properties
	public int HIndex { get; set; }
	public int VIndex { get; set; }
	public int PanelId { get; set; }
	public Vector3 LocalPosition { get; set; }
	public int SpotId { get; set; }
	public bool HasSpot { get; }
	public int CommonReleaseId { get; set; }
	public bool HasReleaseCond { get; }
	public SubmarineMapPanelComponent Component { get; set; }
	public bool IsOpened { get; set; }
	public bool HasEnemyParts { get; set; }
	public bool IsScannable { get; set; }
	public bool IsEnemyVisible { get; }

	// Methods

	// RVA: 0x16F5FB4 Offset: 0x16F5FB4 VA: 0x16F5FB4
	public void .ctor(EventPanelMapDetailEntity panelDetail) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F82C Offset: 0xD3F82C VA: 0xD3F82C
	// RVA: 0x16F6094 Offset: 0x16F6094 VA: 0x16F6094
	public int get_HIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F83C Offset: 0xD3F83C VA: 0xD3F83C
	// RVA: 0x16F6074 Offset: 0x16F6074 VA: 0x16F6074
	public void set_HIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F84C Offset: 0xD3F84C VA: 0xD3F84C
	// RVA: 0x16F609C Offset: 0x16F609C VA: 0x16F609C
	public int get_VIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F85C Offset: 0xD3F85C VA: 0xD3F85C
	// RVA: 0x16F607C Offset: 0x16F607C VA: 0x16F607C
	public void set_VIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F86C Offset: 0xD3F86C VA: 0xD3F86C
	// RVA: 0x16F60A4 Offset: 0x16F60A4 VA: 0x16F60A4
	public int get_PanelId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F87C Offset: 0xD3F87C VA: 0xD3F87C
	// RVA: 0x16F6084 Offset: 0x16F6084 VA: 0x16F6084
	public void set_PanelId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F88C Offset: 0xD3F88C VA: 0xD3F88C
	// RVA: 0x16F60AC Offset: 0x16F60AC VA: 0x16F60AC
	public Vector3 get_LocalPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F89C Offset: 0xD3F89C VA: 0xD3F89C
	// RVA: 0x16F60B8 Offset: 0x16F60B8 VA: 0x16F60B8
	public void set_LocalPosition(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F8AC Offset: 0xD3F8AC VA: 0xD3F8AC
	// RVA: 0x16F4DA0 Offset: 0x16F4DA0 VA: 0x16F4DA0
	public int get_SpotId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F8BC Offset: 0xD3F8BC VA: 0xD3F8BC
	// RVA: 0x16F60C4 Offset: 0x16F60C4 VA: 0x16F60C4
	public void set_SpotId(int value) { }

	// RVA: 0x16F60CC Offset: 0x16F60CC VA: 0x16F60CC
	public bool get_HasSpot() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F8CC Offset: 0xD3F8CC VA: 0xD3F8CC
	// RVA: 0x16F60DC Offset: 0x16F60DC VA: 0x16F60DC
	public int get_CommonReleaseId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F8DC Offset: 0xD3F8DC VA: 0xD3F8DC
	// RVA: 0x16F608C Offset: 0x16F608C VA: 0x16F608C
	public void set_CommonReleaseId(int value) { }

	// RVA: 0x16F60E4 Offset: 0x16F60E4 VA: 0x16F60E4
	public bool get_HasReleaseCond() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F8EC Offset: 0xD3F8EC VA: 0xD3F8EC
	// RVA: 0x16F60F4 Offset: 0x16F60F4 VA: 0x16F60F4
	public SubmarineMapPanelComponent get_Component() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F8FC Offset: 0xD3F8FC VA: 0xD3F8FC
	// RVA: 0x16F60FC Offset: 0x16F60FC VA: 0x16F60FC
	private void set_Component(SubmarineMapPanelComponent value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F90C Offset: 0xD3F90C VA: 0xD3F90C
	// RVA: 0x16F6104 Offset: 0x16F6104 VA: 0x16F6104
	public bool get_IsOpened() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F91C Offset: 0xD3F91C VA: 0xD3F91C
	// RVA: 0x16F6050 Offset: 0x16F6050 VA: 0x16F6050
	public void set_IsOpened(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F92C Offset: 0xD3F92C VA: 0xD3F92C
	// RVA: 0x16F610C Offset: 0x16F610C VA: 0x16F610C
	public bool get_HasEnemyParts() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F93C Offset: 0xD3F93C VA: 0xD3F93C
	// RVA: 0x16F605C Offset: 0x16F605C VA: 0x16F605C
	public void set_HasEnemyParts(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F94C Offset: 0xD3F94C VA: 0xD3F94C
	// RVA: 0x16F6114 Offset: 0x16F6114 VA: 0x16F6114
	public bool get_IsScannable() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F95C Offset: 0xD3F95C VA: 0xD3F95C
	// RVA: 0x16F6068 Offset: 0x16F6068 VA: 0x16F6068
	public void set_IsScannable(bool value) { }

	// RVA: 0x16F611C Offset: 0x16F611C VA: 0x16F611C
	public bool get_IsEnemyVisible() { }

	// RVA: 0x16F613C Offset: 0x16F613C VA: 0x16F613C
	public void SetComponent(SubmarineMapPanelComponent component) { }

	// RVA: 0x16F6144 Offset: 0x16F6144 VA: 0x16F6144
	public void SetPanelClickAction(Action<SubmarineMapPanelData> clickAction) { }

	// RVA: 0x16F6254 Offset: 0x16F6254 VA: 0x16F6254
	public void UpdatePanelDisplay() { }

	// RVA: 0x16F62F8 Offset: 0x16F62F8 VA: 0x16F62F8
	public void OpenPanel() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1830 Offset: 0xCB1830 VA: 0xCB1830
private sealed class SubmarineMapPanelData.<SetPanelClickAction>c__AnonStorey0 // TypeDefIndex: 10916
{
	// Fields
	internal Action<SubmarineMapPanelData> clickAction; // 0x10
	internal SubmarineMapPanelData $this; // 0x18

	// Methods

	// RVA: 0x16F624C Offset: 0x16F624C VA: 0x16F624C
	public void .ctor() { }

	// RVA: 0x16F6398 Offset: 0x16F6398 VA: 0x16F6398
	internal void <>m__0() { }
}

// Namespace: 
public class SubmarinePanelPositionCalculator // TypeDefIndex: 10917
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCE787C Offset: 0xCE787C VA: 0xCE787C
	[DebuggerBrowsableAttribute] // RVA: 0xCE787C Offset: 0xCE787C VA: 0xCE787C
	private Vector2 <PanelUnitSize>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE78B8 Offset: 0xCE78B8 VA: 0xCE78B8
	[DebuggerBrowsableAttribute] // RVA: 0xCE78B8 Offset: 0xCE78B8 VA: 0xCE78B8
	private int <HorizontalPanelNum>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE78F4 Offset: 0xCE78F4 VA: 0xCE78F4
	[DebuggerBrowsableAttribute] // RVA: 0xCE78F4 Offset: 0xCE78F4 VA: 0xCE78F4
	private int <VerticalPanelNum>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCE7930 Offset: 0xCE7930 VA: 0xCE7930
	[DebuggerBrowsableAttribute] // RVA: 0xCE7930 Offset: 0xCE7930 VA: 0xCE7930
	private float <OffsetX>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE796C Offset: 0xCE796C VA: 0xCE796C
	[DebuggerBrowsableAttribute] // RVA: 0xCE796C Offset: 0xCE796C VA: 0xCE796C
	private float <OffsetY>k__BackingField; // 0x24

	// Properties
	public Vector2 PanelUnitSize { get; set; }
	public int PanelUnitSizeX { get; }
	public int PanelUnitSizeY { get; }
	public int HorizontalPanelNum { get; set; }
	public int VerticalPanelNum { get; set; }
	public int TotalPanelNum { get; }
	public float OffsetX { get; set; }
	public float OffsetY { get; set; }
	public Vector3 LeftBottomEdgePos { get; }
	public Vector3 RightTopEdgePos { get; }

	// Methods

	// RVA: 0x16F6A50 Offset: 0x16F6A50 VA: 0x16F6A50
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F96C Offset: 0xD3F96C VA: 0xD3F96C
	// RVA: 0x16F6A58 Offset: 0x16F6A58 VA: 0x16F6A58
	public Vector2 get_PanelUnitSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F97C Offset: 0xD3F97C VA: 0xD3F97C
	// RVA: 0x16F6A60 Offset: 0x16F6A60 VA: 0x16F6A60
	public void set_PanelUnitSize(Vector2 value) { }

	// RVA: 0x16F6A68 Offset: 0x16F6A68 VA: 0x16F6A68
	public int get_PanelUnitSizeX() { }

	// RVA: 0x16F6A74 Offset: 0x16F6A74 VA: 0x16F6A74
	public int get_PanelUnitSizeY() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F98C Offset: 0xD3F98C VA: 0xD3F98C
	// RVA: 0x16F6A80 Offset: 0x16F6A80 VA: 0x16F6A80
	public int get_HorizontalPanelNum() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F99C Offset: 0xD3F99C VA: 0xD3F99C
	// RVA: 0x16F6A88 Offset: 0x16F6A88 VA: 0x16F6A88
	public void set_HorizontalPanelNum(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F9AC Offset: 0xD3F9AC VA: 0xD3F9AC
	// RVA: 0x16F6A90 Offset: 0x16F6A90 VA: 0x16F6A90
	public int get_VerticalPanelNum() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F9BC Offset: 0xD3F9BC VA: 0xD3F9BC
	// RVA: 0x16F6A98 Offset: 0x16F6A98 VA: 0x16F6A98
	public void set_VerticalPanelNum(int value) { }

	// RVA: 0x16F6AA0 Offset: 0x16F6AA0 VA: 0x16F6AA0
	public int get_TotalPanelNum() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F9CC Offset: 0xD3F9CC VA: 0xD3F9CC
	// RVA: 0x16F6AAC Offset: 0x16F6AAC VA: 0x16F6AAC
	public float get_OffsetX() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F9DC Offset: 0xD3F9DC VA: 0xD3F9DC
	// RVA: 0x16F6AB4 Offset: 0x16F6AB4 VA: 0x16F6AB4
	private void set_OffsetX(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F9EC Offset: 0xD3F9EC VA: 0xD3F9EC
	// RVA: 0x16F6ABC Offset: 0x16F6ABC VA: 0x16F6ABC
	public float get_OffsetY() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F9FC Offset: 0xD3F9FC VA: 0xD3F9FC
	// RVA: 0x16F6AC4 Offset: 0x16F6AC4 VA: 0x16F6AC4
	private void set_OffsetY(float value) { }

	// RVA: 0x16F6ACC Offset: 0x16F6ACC VA: 0x16F6ACC
	public void LoadSettings(SubmarineSettingsManager settings) { }

	// RVA: 0x16F6B48 Offset: 0x16F6B48 VA: 0x16F6B48
	public Vector3 get_LeftBottomEdgePos() { }

	// RVA: 0x16F6C5C Offset: 0x16F6C5C VA: 0x16F6C5C
	public Vector3 get_RightTopEdgePos() { }

	// RVA: 0x16F6BE0 Offset: 0x16F6BE0 VA: 0x16F6BE0
	public Vector3 GetPositionByIndices(int hIndex, int vIndex) { }
}

// Namespace: 
public class SubmarineQuestSaveInfo // TypeDefIndex: 10918
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCE79A8 Offset: 0xCE79A8 VA: 0xCE79A8
	[DebuggerBrowsableAttribute] // RVA: 0xCE79A8 Offset: 0xCE79A8 VA: 0xCE79A8
	private int <QuestId>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE79E4 Offset: 0xCE79E4 VA: 0xCE79E4
	[DebuggerBrowsableAttribute] // RVA: 0xCE79E4 Offset: 0xCE79E4 VA: 0xCE79E4
	private int <PhaseCnt>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCE7A20 Offset: 0xCE7A20 VA: 0xCE7A20
	[DebuggerBrowsableAttribute] // RVA: 0xCE7A20 Offset: 0xCE7A20 VA: 0xCE7A20
	private bool <IsQuestClear>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE7A5C Offset: 0xCE7A5C VA: 0xCE7A5C
	[DebuggerBrowsableAttribute] // RVA: 0xCE7A5C Offset: 0xCE7A5C VA: 0xCE7A5C
	private bool <IsQuestPhaseClear>k__BackingField; // 0x19

	// Properties
	public int QuestId { get; set; }
	public int PhaseCnt { get; set; }
	public bool IsQuestClear { get; set; }
	public bool IsQuestPhaseClear { get; set; }
	public int BeforeClearQuestId { get; }

	// Methods

	// RVA: 0x16F6CF8 Offset: 0x16F6CF8 VA: 0x16F6CF8
	public void .ctor(int questId, int phaseCnt, bool isQuestClear, bool isQuestPhaseClear) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA0C Offset: 0xD3FA0C VA: 0xD3FA0C
	// RVA: 0x16F6D78 Offset: 0x16F6D78 VA: 0x16F6D78
	public int get_QuestId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA1C Offset: 0xD3FA1C VA: 0xD3FA1C
	// RVA: 0x16F6D50 Offset: 0x16F6D50 VA: 0x16F6D50
	private void set_QuestId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA2C Offset: 0xD3FA2C VA: 0xD3FA2C
	// RVA: 0x16F6D80 Offset: 0x16F6D80 VA: 0x16F6D80
	public int get_PhaseCnt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA3C Offset: 0xD3FA3C VA: 0xD3FA3C
	// RVA: 0x16F6D58 Offset: 0x16F6D58 VA: 0x16F6D58
	private void set_PhaseCnt(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA4C Offset: 0xD3FA4C VA: 0xD3FA4C
	// RVA: 0x16F6D88 Offset: 0x16F6D88 VA: 0x16F6D88
	public bool get_IsQuestClear() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA5C Offset: 0xD3FA5C VA: 0xD3FA5C
	// RVA: 0x16F6D60 Offset: 0x16F6D60 VA: 0x16F6D60
	private void set_IsQuestClear(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA6C Offset: 0xD3FA6C VA: 0xD3FA6C
	// RVA: 0x16F6D90 Offset: 0x16F6D90 VA: 0x16F6D90
	public bool get_IsQuestPhaseClear() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA7C Offset: 0xD3FA7C VA: 0xD3FA7C
	// RVA: 0x16F6D6C Offset: 0x16F6D6C VA: 0x16F6D6C
	private void set_IsQuestPhaseClear(bool value) { }

	// RVA: 0x16F4C44 Offset: 0x16F4C44 VA: 0x16F4C44
	public int get_BeforeClearQuestId() { }

	// RVA: 0x16F6D98 Offset: 0x16F6D98 VA: 0x16F6D98
	public string GetSaveValue() { }

	// RVA: 0x16F710C Offset: 0x16F710C VA: 0x16F710C
	private static SubmarineQuestSaveInfo CreateDefault() { }

	// RVA: 0x16F7174 Offset: 0x16F7174 VA: 0x16F7174
	public static SubmarineQuestSaveInfo CreateBySaveValue(string value) { }
}

// Namespace: 
public class SubmarineSaveParamsManager // TypeDefIndex: 10919
{
	// Fields
	private const string SAVEKEY_SubmarineMapBeforeQuestInfo = "SubmarineMapBeforeQuestInfo";
	private const string SAVEKEY_SubmarineUnreleasedScan = "SubmarineUnreleasedScan";

	// Methods

	// RVA: 0x16F7790 Offset: 0x16F7790 VA: 0x16F7790
	public void .ctor() { }

	// RVA: 0x16F7798 Offset: 0x16F7798 VA: 0x16F7798
	public static void SaveClearQuestInfo(int questId, int phaseCnt, bool isQuestClear, bool isQuestPhaseClear) { }

	// RVA: 0x16F7858 Offset: 0x16F7858 VA: 0x16F7858
	public static SubmarineQuestSaveInfo LoadBeforeQuestInfo() { }

	// RVA: 0x16F78A8 Offset: 0x16F78A8 VA: 0x16F78A8
	public static void DeleteSavedQuestInfo() { }

	// RVA: 0x16F78F4 Offset: 0x16F78F4 VA: 0x16F78F4
	public static void SaveUnreleasedScanInfo(int eventId, int[] scanIds) { }

	// RVA: 0x16F7B9C Offset: 0x16F7B9C VA: 0x16F7B9C
	public static SubmarineUnreleasedScanSaveInfo LoadUnreleasedScanInfo(int eventId) { }

	// RVA: 0x16F7EAC Offset: 0x16F7EAC VA: 0x16F7EAC
	public static void DeleteUnreleasedScanInfo() { }
}

// Namespace: 
public class SubmarineScanEvent // TypeDefIndex: 10920
{
	// Fields
	public static readonly int NO_DIRECTION; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCE7A98 Offset: 0xCE7A98 VA: 0xCE7A98
	[DebuggerBrowsableAttribute] // RVA: 0xCE7A98 Offset: 0xCE7A98 VA: 0xCE7A98
	private int <HIndex>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE7AD4 Offset: 0xCE7AD4 VA: 0xCE7AD4
	[DebuggerBrowsableAttribute] // RVA: 0xCE7AD4 Offset: 0xCE7AD4 VA: 0xCE7AD4
	private int <VIndex>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCE7B10 Offset: 0xCE7B10 VA: 0xCE7B10
	[DebuggerBrowsableAttribute] // RVA: 0xCE7B10 Offset: 0xCE7B10 VA: 0xCE7B10
	private bool <IsAlreadyOpened>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE7B4C Offset: 0xCE7B4C VA: 0xCE7B4C
	[DebuggerBrowsableAttribute] // RVA: 0xCE7B4C Offset: 0xCE7B4C VA: 0xCE7B4C
	private bool <HasEnemyParts>k__BackingField; // 0x19
	[CompilerGeneratedAttribute] // RVA: 0xCE7B88 Offset: 0xCE7B88 VA: 0xCE7B88
	[DebuggerBrowsableAttribute] // RVA: 0xCE7B88 Offset: 0xCE7B88 VA: 0xCE7B88
	private int <Chain>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCE7BC4 Offset: 0xCE7BC4 VA: 0xCE7BC4
	[DebuggerBrowsableAttribute] // RVA: 0xCE7BC4 Offset: 0xCE7BC4 VA: 0xCE7BC4
	private int <Direction>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE7C00 Offset: 0xCE7C00 VA: 0xCE7C00
	[DebuggerBrowsableAttribute] // RVA: 0xCE7C00 Offset: 0xCE7C00 VA: 0xCE7C00
	private bool <IsOpened>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xCE7C3C Offset: 0xCE7C3C VA: 0xCE7C3C
	[DebuggerBrowsableAttribute] // RVA: 0xCE7C3C Offset: 0xCE7C3C VA: 0xCE7C3C
	private bool <IsHitObstacle>k__BackingField; // 0x25
	[CompilerGeneratedAttribute] // RVA: 0xCE7C78 Offset: 0xCE7C78 VA: 0xCE7C78
	[DebuggerBrowsableAttribute] // RVA: 0xCE7C78 Offset: 0xCE7C78 VA: 0xCE7C78
	private bool <IsStopped>k__BackingField; // 0x26

	// Properties
	public int HIndex { get; set; }
	public int VIndex { get; set; }
	public bool IsAlreadyOpened { get; set; }
	public bool HasEnemyParts { get; set; }
	public int Chain { get; set; }
	public int Direction { get; set; }
	public bool IsOpened { get; set; }
	public bool IsHitObstacle { get; set; }
	public bool IsStopped { get; set; }

	// Methods

	// RVA: 0x16F8C6C Offset: 0x16F8C6C VA: 0x16F8C6C
	public void .ctor(SubmarineMapPanelData panelData, int chain, int direction, bool isOpened, bool isHitObstacle, bool isStopped) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA8C Offset: 0xD3FA8C VA: 0xD3FA8C
	// RVA: 0x16F8DA4 Offset: 0x16F8DA4 VA: 0x16F8DA4
	public int get_HIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FA9C Offset: 0xD3FA9C VA: 0xD3FA9C
	// RVA: 0x16F8D48 Offset: 0x16F8D48 VA: 0x16F8D48
	private void set_HIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FAAC Offset: 0xD3FAAC VA: 0xD3FAAC
	// RVA: 0x16F8DAC Offset: 0x16F8DAC VA: 0x16F8DAC
	public int get_VIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FABC Offset: 0xD3FABC VA: 0xD3FABC
	// RVA: 0x16F8D50 Offset: 0x16F8D50 VA: 0x16F8D50
	private void set_VIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FACC Offset: 0xD3FACC VA: 0xD3FACC
	// RVA: 0x16F8DB4 Offset: 0x16F8DB4 VA: 0x16F8DB4
	public bool get_IsAlreadyOpened() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FADC Offset: 0xD3FADC VA: 0xD3FADC
	// RVA: 0x16F8D58 Offset: 0x16F8D58 VA: 0x16F8D58
	private void set_IsAlreadyOpened(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FAEC Offset: 0xD3FAEC VA: 0xD3FAEC
	// RVA: 0x16F8DBC Offset: 0x16F8DBC VA: 0x16F8DBC
	public bool get_HasEnemyParts() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FAFC Offset: 0xD3FAFC VA: 0xD3FAFC
	// RVA: 0x16F8D64 Offset: 0x16F8D64 VA: 0x16F8D64
	private void set_HasEnemyParts(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB0C Offset: 0xD3FB0C VA: 0xD3FB0C
	// RVA: 0x16F4DEC Offset: 0x16F4DEC VA: 0x16F4DEC
	public int get_Chain() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB1C Offset: 0xD3FB1C VA: 0xD3FB1C
	// RVA: 0x16F8D70 Offset: 0x16F8D70 VA: 0x16F8D70
	private void set_Chain(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB2C Offset: 0xD3FB2C VA: 0xD3FB2C
	// RVA: 0x16F8DC4 Offset: 0x16F8DC4 VA: 0x16F8DC4
	public int get_Direction() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB3C Offset: 0xD3FB3C VA: 0xD3FB3C
	// RVA: 0x16F8D78 Offset: 0x16F8D78 VA: 0x16F8D78
	private void set_Direction(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB4C Offset: 0xD3FB4C VA: 0xD3FB4C
	// RVA: 0x16F8DCC Offset: 0x16F8DCC VA: 0x16F8DCC
	public bool get_IsOpened() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB5C Offset: 0xD3FB5C VA: 0xD3FB5C
	// RVA: 0x16F8D80 Offset: 0x16F8D80 VA: 0x16F8D80
	private void set_IsOpened(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB6C Offset: 0xD3FB6C VA: 0xD3FB6C
	// RVA: 0x16F8DD4 Offset: 0x16F8DD4 VA: 0x16F8DD4
	public bool get_IsHitObstacle() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB7C Offset: 0xD3FB7C VA: 0xD3FB7C
	// RVA: 0x16F8D8C Offset: 0x16F8D8C VA: 0x16F8D8C
	private void set_IsHitObstacle(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB8C Offset: 0xD3FB8C VA: 0xD3FB8C
	// RVA: 0x16F8DDC Offset: 0x16F8DDC VA: 0x16F8DDC
	public bool get_IsStopped() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FB9C Offset: 0xD3FB9C VA: 0xD3FB9C
	// RVA: 0x16F8D98 Offset: 0x16F8D98 VA: 0x16F8D98
	private void set_IsStopped(bool value) { }

	// RVA: 0x16F8DE4 Offset: 0x16F8DE4 VA: 0x16F8DE4
	private static void .cctor() { }
}

// Namespace: 
public class SubmarineSettings : ScriptableObject // TypeDefIndex: 10921
{
	// Fields
	public Vector2 PanelUnitSize; // 0x18
	public SubmarineSettings.BoardOffset[] BoardOffsets; // 0x20
	public int ScanOpenPanelIntervalDefault; // 0x28
	public SubmarineSettings.OpenPanelInterval[] ScanOpenPanelIntervals; // 0x30
	public float PanelSelectDelaySecond; // 0x38
	public SubmarineSettings.HomeSpot[] HomeSpots; // 0x40
	public float SecondOfOpenPanelToRevealSpot; // 0x48
	public float ViewScanRangeCameraDuration; // 0x4C
	public float ScanRangeToHomeSpotCameraDuration; // 0x50
	public float OpenPanelCameraDuration; // 0x54
	public bool RegardScanRangeAsSimpleSquare; // 0x58

	// Methods

	// RVA: 0x16FB1EC Offset: 0x16FB1EC VA: 0x16FB1EC
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class SubmarineSettings.BoardOffset // TypeDefIndex: 10922
{
	// Fields
	public int MapId; // 0x10
	public Vector2 Offset; // 0x14

	// Methods

	// RVA: 0x16FB1F4 Offset: 0x16FB1F4 VA: 0x16FB1F4
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class SubmarineSettings.OpenPanelInterval // TypeDefIndex: 10923
{
	// Fields
	public int ScanId; // 0x10
	public float Interval; // 0x14

	// Methods

	// RVA: 0x16FB204 Offset: 0x16FB204 VA: 0x16FB204
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class SubmarineSettings.HomeSpot // TypeDefIndex: 10924
{
	// Fields
	public int MapId; // 0x10
	public int SpotId; // 0x14

	// Methods

	// RVA: 0x16FB1FC Offset: 0x16FB1FC VA: 0x16FB1FC
	public void .ctor() { }
}

// Namespace: 
public class SubmarineSettingsManager // TypeDefIndex: 10925
{
	// Fields
	private static readonly int DEFAULT_PANEL_WIDTH; // 0x0
	private static readonly int DEFAULT_PANEL_HEIGHT; // 0x4
	private static readonly float DEFAULT_PANEL_SELECT_DELAY_SECOND; // 0x8
	private static readonly float DEFAULT_SCAN_OPEN_PANEL_WAIT_TIME; // 0xC
	private static readonly float DEFAULT_SECOND_OF_OPEN_PANEL_TO_REVEAL_SPOT; // 0x10
	private static readonly float DEFAULT_VIEW_SCAN_RANGE_CAMERA_DURATION; // 0x14
	private static readonly float DEFAULT_SCAN_RANGE_TO_HOME_SPOT_CAMERA_DURATION; // 0x18
	private static readonly float DEFAULT_OPEN_PANEL_CAMERA_DURATION; // 0x1C
	private static readonly string KEY_VIEW_SCAN_RANGE_CAMERA_DURATION; // 0x20
	private static readonly string KEY_SCAN_RANGE_TO_HOME_SPOT_CAMERA_DURATION; // 0x28
	private static readonly string KEY_OPEN_PANEL_CAMERA_DURATION; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCE7CB4 Offset: 0xCE7CB4 VA: 0xCE7CB4
	[DebuggerBrowsableAttribute] // RVA: 0xCE7CB4 Offset: 0xCE7CB4 VA: 0xCE7CB4
	private float <ScanOpenPanelIntervalDefault>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE7CF0 Offset: 0xCE7CF0 VA: 0xCE7CF0
	[DebuggerBrowsableAttribute] // RVA: 0xCE7CF0 Offset: 0xCE7CF0 VA: 0xCE7CF0
	private Dictionary<int, float> <ScanOpenPanelIntervals>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE7D2C Offset: 0xCE7D2C VA: 0xCE7D2C
	[DebuggerBrowsableAttribute] // RVA: 0xCE7D2C Offset: 0xCE7D2C VA: 0xCE7D2C
	private float <PanelSelectDelaySecond>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE7D68 Offset: 0xCE7D68 VA: 0xCE7D68
	[DebuggerBrowsableAttribute] // RVA: 0xCE7D68 Offset: 0xCE7D68 VA: 0xCE7D68
	private Vector2 <PanelUnitSize>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xCE7DA4 Offset: 0xCE7DA4 VA: 0xCE7DA4
	[DebuggerBrowsableAttribute] // RVA: 0xCE7DA4 Offset: 0xCE7DA4 VA: 0xCE7DA4
	private Vector3 <BoardOffset>k__BackingField; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0xCE7DE0 Offset: 0xCE7DE0 VA: 0xCE7DE0
	[DebuggerBrowsableAttribute] // RVA: 0xCE7DE0 Offset: 0xCE7DE0 VA: 0xCE7DE0
	private int <HomeSpotId>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCE7E1C Offset: 0xCE7E1C VA: 0xCE7E1C
	[DebuggerBrowsableAttribute] // RVA: 0xCE7E1C Offset: 0xCE7E1C VA: 0xCE7E1C
	private float <SecondOfOpenPanelToRevealSpot>k__BackingField; // 0x3C
	[CompilerGeneratedAttribute] // RVA: 0xCE7E58 Offset: 0xCE7E58 VA: 0xCE7E58
	[DebuggerBrowsableAttribute] // RVA: 0xCE7E58 Offset: 0xCE7E58 VA: 0xCE7E58
	private float <ViewScanRangeCameraDuration>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCE7E94 Offset: 0xCE7E94 VA: 0xCE7E94
	[DebuggerBrowsableAttribute] // RVA: 0xCE7E94 Offset: 0xCE7E94 VA: 0xCE7E94
	private float <ScanRangeToHomeSpotCameraDuration>k__BackingField; // 0x44
	[CompilerGeneratedAttribute] // RVA: 0xCE7ED0 Offset: 0xCE7ED0 VA: 0xCE7ED0
	[DebuggerBrowsableAttribute] // RVA: 0xCE7ED0 Offset: 0xCE7ED0 VA: 0xCE7ED0
	private float <OpenPanelCameraDuration>k__BackingField; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCE7F0C Offset: 0xCE7F0C VA: 0xCE7F0C
	[DebuggerBrowsableAttribute] // RVA: 0xCE7F0C Offset: 0xCE7F0C VA: 0xCE7F0C
	private bool <RegardScanRangeAsSimpleSquare>k__BackingField; // 0x4C
	private int mapId; // 0x50
	private int eventId; // 0x54

	// Properties
	public float ScanOpenPanelIntervalDefault { get; set; }
	public Dictionary<int, float> ScanOpenPanelIntervals { get; set; }
	public float PanelSelectDelaySecond { get; set; }
	public Vector2 PanelUnitSize { get; set; }
	public Vector3 BoardOffset { get; set; }
	public int HomeSpotId { get; set; }
	public float SecondOfOpenPanelToRevealSpot { get; set; }
	public float ViewScanRangeCameraDuration { get; set; }
	public float ScanRangeToHomeSpotCameraDuration { get; set; }
	public float OpenPanelCameraDuration { get; set; }
	public bool RegardScanRangeAsSimpleSquare { get; set; }

	// Methods

	// RVA: 0x16FB20C Offset: 0x16FB20C VA: 0x16FB20C
	public void .ctor(int eventId, int mapId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FBAC Offset: 0xD3FBAC VA: 0xD3FBAC
	// RVA: 0x16FB3BC Offset: 0x16FB3BC VA: 0x16FB3BC
	public float get_ScanOpenPanelIntervalDefault() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FBBC Offset: 0xD3FBBC VA: 0xD3FBBC
	// RVA: 0x16FB370 Offset: 0x16FB370 VA: 0x16FB370
	private void set_ScanOpenPanelIntervalDefault(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FBCC Offset: 0xD3FBCC VA: 0xD3FBCC
	// RVA: 0x16FB3C4 Offset: 0x16FB3C4 VA: 0x16FB3C4
	public Dictionary<int, float> get_ScanOpenPanelIntervals() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FBDC Offset: 0xD3FBDC VA: 0xD3FBDC
	// RVA: 0x16FB368 Offset: 0x16FB368 VA: 0x16FB368
	private void set_ScanOpenPanelIntervals(Dictionary<int, float> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FBEC Offset: 0xD3FBEC VA: 0xD3FBEC
	// RVA: 0x16FB3CC Offset: 0x16FB3CC VA: 0x16FB3CC
	public float get_PanelSelectDelaySecond() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FBFC Offset: 0xD3FBFC VA: 0xD3FBFC
	// RVA: 0x16FB378 Offset: 0x16FB378 VA: 0x16FB378
	private void set_PanelSelectDelaySecond(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC0C Offset: 0xD3FC0C VA: 0xD3FC0C
	// RVA: 0x16F6B40 Offset: 0x16F6B40 VA: 0x16F6B40
	public Vector2 get_PanelUnitSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC1C Offset: 0xD3FC1C VA: 0xD3FC1C
	// RVA: 0x16FB380 Offset: 0x16FB380 VA: 0x16FB380
	private void set_PanelUnitSize(Vector2 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC2C Offset: 0xD3FC2C VA: 0xD3FC2C
	// RVA: 0x16F6B34 Offset: 0x16F6B34 VA: 0x16F6B34
	public Vector3 get_BoardOffset() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC3C Offset: 0xD3FC3C VA: 0xD3FC3C
	// RVA: 0x16FB388 Offset: 0x16FB388 VA: 0x16FB388
	private void set_BoardOffset(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC4C Offset: 0xD3FC4C VA: 0xD3FC4C
	// RVA: 0x16FB3D4 Offset: 0x16FB3D4 VA: 0x16FB3D4
	public int get_HomeSpotId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC5C Offset: 0xD3FC5C VA: 0xD3FC5C
	// RVA: 0x16FB394 Offset: 0x16FB394 VA: 0x16FB394
	private void set_HomeSpotId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC6C Offset: 0xD3FC6C VA: 0xD3FC6C
	// RVA: 0x16FB3DC Offset: 0x16FB3DC VA: 0x16FB3DC
	public float get_SecondOfOpenPanelToRevealSpot() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC7C Offset: 0xD3FC7C VA: 0xD3FC7C
	// RVA: 0x16FB39C Offset: 0x16FB39C VA: 0x16FB39C
	private void set_SecondOfOpenPanelToRevealSpot(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC8C Offset: 0xD3FC8C VA: 0xD3FC8C
	// RVA: 0x16FB3E4 Offset: 0x16FB3E4 VA: 0x16FB3E4
	public float get_ViewScanRangeCameraDuration() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FC9C Offset: 0xD3FC9C VA: 0xD3FC9C
	// RVA: 0x16FB3A4 Offset: 0x16FB3A4 VA: 0x16FB3A4
	private void set_ViewScanRangeCameraDuration(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3FCAC Offset: 0xD3FCAC VA: 0xD3FCAC
	// RVA: 0x16FB3EC Offset: 0x16FB3EC VA: 0x16FB3EC
	public float get_ScanRangeToHomeSpotCameraDuration() { }
