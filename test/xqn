	public BattleActionData MakeSideEffectActionData(BattleActionData.ACTTYPE type) { }

	// RVA: 0x148BB24 Offset: 0x148BB24 VA: 0x148BB24
	public void AddSideEffectAfterAction(BattlePerformance perf) { }

	// RVA: 0x148BD0C Offset: 0x148BD0C VA: 0x148BD0C
	public bool get_NoOperation() { }

	// RVA: 0x148BD14 Offset: 0x148BD14 VA: 0x148BD14
	public void set_NoOperation(bool value) { }

	// RVA: 0x148BD20 Offset: 0x148BD20 VA: 0x148BD20
	public bool isReflectedDamageSideEffect(int uniqueSvtId) { }

	// RVA: 0x148BD90 Offset: 0x148BD90 VA: 0x148BD90
	public void addReflectDamageSideEffect(int uniqueSvtId) { }

	// RVA: 0x148BE00 Offset: 0x148BE00 VA: 0x148BE00
	public bool isReflectedAttackSideEffect(KeyValuePair<int, int> pairAttackAndTarget) { }

	// RVA: 0x148BE70 Offset: 0x148BE70 VA: 0x148BE70
	public void addReflectAttackSideEffect(KeyValuePair<int, int> pairAttackAndTarget) { }

	// RVA: 0x148A4E0 Offset: 0x148A4E0 VA: 0x148A4E0
	public void addReflectLogicResultServantIds(List<BattleActionData.ServantLogicResultData> addLogicResultList) { }

	// RVA: 0x148BEE0 Offset: 0x148BEE0 VA: 0x148BEE0
	public void addReflectLogicResultServantId(int uniqueSvtId) { }

	// RVA: 0x148C020 Offset: 0x148C020 VA: 0x148C020
	public void saveServantLogicResult(BattleData data) { }

	// RVA: 0x148C158 Offset: 0x148C158 VA: 0x148C158
	public void reflectServantLogicResult(BattleData data) { }

	// RVA: 0x148C310 Offset: 0x148C310 VA: 0x148C310
	public void servantLogicResultClear() { }

	// RVA: 0x148C3A8 Offset: 0x148C3A8 VA: 0x148C3A8
	public void initFuncTargetPlayerType(int length) { }

	// RVA: 0x148C420 Offset: 0x148C420 VA: 0x148C420
	public void setFuncTargetPlayerType(int index, bool isTargetEnemy) { }

	// RVA: 0x148C528 Offset: 0x148C528 VA: 0x148C528
	public Target.PlayerTypeFlag getFuncTargetPlayerType(int index) { }

	// RVA: 0x148C6AC Offset: 0x148C6AC VA: 0x148C6AC
	public void AddAfterActionData(BattleActionData _afterActionData, bool isPreActCheckDead = False) { }

	// RVA: 0x148C6C0 Offset: 0x148C6C0 VA: 0x148C6C0
	public bool ExistsAddableAfterAction(BattleData data) { }

	// RVA: 0x148C728 Offset: 0x148C728 VA: 0x148C728
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3978C Offset: 0xD3978C VA: 0xD3978C
	// RVA: 0x148C808 Offset: 0x148C808 VA: 0x148C808
	private static bool <PreActionProcess>m__0(BattleActionData.BuffData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3979C Offset: 0xD3979C VA: 0xD3979C
	// RVA: 0x148C834 Offset: 0x148C834 VA: 0x148C834
	private static bool <ExecUnappliedProcess>m__1(BattleActionData.BuffData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD397AC Offset: 0xD397AC VA: 0xD397AC
	// RVA: 0x148C860 Offset: 0x148C860 VA: 0x148C860
	private static int <GetExecOrderArray>m__2(BattleActionData.BaseData x, BattleActionData.BaseData y) { }

	[CompilerGeneratedAttribute] // RVA: 0xD397BC Offset: 0xD397BC VA: 0xD397BC
	// RVA: 0x148C8B4 Offset: 0x148C8B4 VA: 0x148C8B4
	private static void <ResetAllCheckDead>m__3(BattleActionData.BuffData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD397CC Offset: 0xD397CC VA: 0xD397CC
	// RVA: 0x148C8E0 Offset: 0x148C8E0 VA: 0x148C8E0
	private static int <getListFunctionIndex>m__4(BattleActionData.BuffData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD397DC Offset: 0xD397DC VA: 0xD397DC
	// RVA: 0x148C908 Offset: 0x148C908 VA: 0x148C908
	private static int <getListFunctionIndex>m__5(BattleActionData.HealData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD397EC Offset: 0xD397EC VA: 0xD397EC
	// RVA: 0x148C930 Offset: 0x148C930 VA: 0x148C930
	private static int <getListFunctionIndex>m__6(int a, int b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD397FC Offset: 0xD397FC VA: 0xD397FC
	// RVA: 0x148C938 Offset: 0x148C938 VA: 0x148C938
	private static int <getListFunctionIndexEx>m__7(BattleActionData.BuffData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3980C Offset: 0xD3980C VA: 0xD3980C
	// RVA: 0x148C960 Offset: 0x148C960 VA: 0x148C960
	private static int <getListFunctionIndexEx>m__8(BattleActionData.HealData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3981C Offset: 0xD3981C VA: 0xD3981C
	// RVA: 0x148C988 Offset: 0x148C988 VA: 0x148C988
	private static int <getListFunctionIndexEx>m__9(BattleActionData.DamageData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3982C Offset: 0xD3982C VA: 0xD3982C
	// RVA: 0x148C9B0 Offset: 0x148C9B0 VA: 0x148C9B0
	private static int <getListFunctionIndexEx>m__A(BattleActionData.DamageData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3983C Offset: 0xD3983C VA: 0xD3983C
	// RVA: 0x148C9DC Offset: 0x148C9DC VA: 0x148C9DC
	private static int <getListFunctionIndexEx>m__B(int a, int b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3984C Offset: 0xD3984C VA: 0xD3984C
	// RVA: 0x148C9E4 Offset: 0x148C9E4 VA: 0x148C9E4
	private static BattleActionData <AddSideEffectAfterAction>m__C(BattleActionData act) { }
}

// Namespace: 
public enum BattleActionData.STATE // TypeDefIndex: 8693
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.STATE ACTORS = 0;
	public const BattleActionData.STATE SYSTEM = 1;
	public const BattleActionData.STATE FIELD = 2;
	public const BattleActionData.STATE MOTION = 3;
	public const BattleActionData.STATE ENEMY_MASTER = 4;
	public const BattleActionData.STATE LOAD_IMMEDIATE_ENTRY_SERVANT = 5;
	public const BattleActionData.STATE WAIT_COND = 6;
}

// Namespace: 
public enum BattleActionData.DamageHitType // TypeDefIndex: 8694
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.DamageHitType NORMAL = 0;
	public const BattleActionData.DamageHitType INVINCIBLE = 1;
	public const BattleActionData.DamageHitType AVOIDANCE = 2;
	public const BattleActionData.DamageHitType PIERCE_INVINCIBLE = 3;
	public const BattleActionData.DamageHitType BREAK_AVOIDANCE = 4;
}

// Namespace: 
public class BattleActionData.ServantLogicResultData // TypeDefIndex: 8695
{
	// Fields
	public int uniqueId; // 0x10
	public int hp; // 0x14

	// Methods

	// RVA: 0x1E948E4 Offset: 0x1E948E4 VA: 0x1E948E4
	public void .ctor() { }
}

// Namespace: 
public class BattleActionData.SideEffectData // TypeDefIndex: 8696
{
	// Fields
	public int targetId; // 0x10
	public BuffList.ACTION[] sideEffectActs; // 0x18

	// Methods

	// RVA: 0x1E94B2C Offset: 0x1E94B2C VA: 0x1E94B2C
	public void .ctor(int targetId, BuffList.ACTION[] sideEffectActs) { }
}

// Namespace: 
public class BattleActionData.BaseData // TypeDefIndex: 8697
{
	// Fields
	public int functionIndex; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCCAFC Offset: 0xCCCAFC VA: 0xCCCAFC
	[DebuggerBrowsableAttribute] // RVA: 0xCCCAFC Offset: 0xCCCAFC VA: 0xCCCAFC
	private int <AddOrder>k__BackingField; // 0x14

	// Properties
	public int AddOrder { get; set; }

	// Methods

	// RVA: 0x1E93BC0 Offset: 0x1E93BC0 VA: 0x1E93BC0
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3985C Offset: 0xD3985C VA: 0xD3985C
	// RVA: 0x1E93BC8 Offset: 0x1E93BC8 VA: 0x1E93BC8
	private void set_AddOrder(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3986C Offset: 0xD3986C VA: 0xD3986C
	// RVA: 0x1E93BD0 Offset: 0x1E93BD0 VA: 0x1E93BD0
	public int get_AddOrder() { }

	// RVA: 0x1E93BD8 Offset: 0x1E93BD8 VA: 0x1E93BD8
	public void InitAddOrder() { }
}

// Namespace: 
public class BattleActionData.DamageData : BattleActionData.BaseData // TypeDefIndex: 8698
{
	// Fields
	public int targetId; // 0x18
	public bool critical; // 0x1C
	public bool weak; // 0x1D
	public bool regist; // 0x1E
	public BattleActionData.DamageHitType hitStates; // 0x20
	public bool sphit; // 0x24
	public int sphitEffectId; // 0x28
	public int multiatk; // 0x2C
	public bool isCriticalMiss; // 0x30
	public bool noDamage; // 0x31
	public int defNoDamageBuffId; // 0x34
	public BattleBuffData.ShowBuffData[] atkbufflist; // 0x38
	public BattleBuffData.ShowBuffData[] defbufflist; // 0x40
	private List<BuffList.ACTION> attackSideEffectActList; // 0x48
	public int overkillIndex; // 0x50
	public int[] damagelist; // 0x58
	public int[] atknplist; // 0x60
	public int[] defnplist; // 0x68
	public int[] starlist; // 0x70
	public bool noAccumulation; // 0x78
	public bool isOverCharge; // 0x79
	public bool isNobleIndividualAtk; // 0x7A
	public bool isNobleRareAtk; // 0x7B
	public int[] damageValueEffectIds; // 0x80
	public Vector3 offSet; // 0x88
	public bool isSpecialInvincible; // 0x94

	// Methods

	// RVA: 0x1E94164 Offset: 0x1E94164 VA: 0x1E94164
	public void .ctor() { }

	// RVA: 0x1E941E4 Offset: 0x1E941E4 VA: 0x1E941E4
	public bool getCritical() { }

	// RVA: 0x1E941EC Offset: 0x1E941EC VA: 0x1E941EC
	public bool getWeak() { }

	// RVA: 0x1E941F4 Offset: 0x1E941F4 VA: 0x1E941F4
	public bool getRegist() { }

	// RVA: 0x1E941FC Offset: 0x1E941FC VA: 0x1E941FC
	public bool getInvincible() { }

	// RVA: 0x1E9420C Offset: 0x1E9420C VA: 0x1E9420C
	public bool getAvoidance() { }

	// RVA: 0x1E9421C Offset: 0x1E9421C VA: 0x1E9421C
	public int getAttackCount() { }

	// RVA: 0x1E94248 Offset: 0x1E94248 VA: 0x1E94248
	public int[] getDamageList() { }

	// RVA: 0x1E94250 Offset: 0x1E94250 VA: 0x1E94250
	public int getDamage(int index, bool isCheckCount = True) { }

	// RVA: 0x1E942A8 Offset: 0x1E942A8 VA: 0x1E942A8
	public int getAtkNp(int index) { }

	// RVA: 0x1E94300 Offset: 0x1E94300 VA: 0x1E94300
	public int getDefNp(int index) { }

	// RVA: 0x1E94358 Offset: 0x1E94358 VA: 0x1E94358
	public bool getCriticalPoint(int index) { }

	// RVA: 0x1E943B8 Offset: 0x1E943B8 VA: 0x1E943B8
	public int getCriticalPointCount(int index) { }

	// RVA: 0x1E94410 Offset: 0x1E94410 VA: 0x1E94410
	public void addAttackSideEffectAction(BuffList.ACTION act) { }

	// RVA: 0x1E944BC Offset: 0x1E944BC VA: 0x1E944BC
	public List<BuffList.ACTION> getAttackSideEffectActionList() { }

	// RVA: 0x1E944C4 Offset: 0x1E944C4 VA: 0x1E944C4
	public int GetAttackCountExceptFirst() { }
}

// Namespace: 
public class BattleActionData.BuffData : BattleActionData.BaseData // TypeDefIndex: 8699
{
	// Fields
	public BattleActionData.BuffData.BuffProcType procType; // 0x18
	public int procValue; // 0x1C
	private int updateType; // 0x20
	public int targetId; // 0x24
	public int buffId; // 0x28
	public int auraEffectId; // 0x2C
	public string popLabel; // 0x30
	public int popIcon; // 0x38
	public int popColor; // 0x3C
	public int[] effectList; // 0x40
	public bool isMiss; // 0x48
	public bool noAccumulation; // 0x49
	public bool isCommandAfter; // 0x4A
	[CompilerGeneratedAttribute] // RVA: 0xCCCB38 Offset: 0xCCCB38 VA: 0xCCCB38
	[DebuggerBrowsableAttribute] // RVA: 0xCCCB38 Offset: 0xCCCB38 VA: 0xCCCB38
	private int <saveNpValue>k__BackingField; // 0x4C
	public bool isOverCharge; // 0x50
	public bool IsNoEffect; // 0x51
	public bool isHideEffect; // 0x52
	[CompilerGeneratedAttribute] // RVA: 0xCCCB74 Offset: 0xCCCB74 VA: 0xCCCB74
	[DebuggerBrowsableAttribute] // RVA: 0xCCCB74 Offset: 0xCCCB74 VA: 0xCCCB74
	private bool <IsCheckHideWhenDead>k__BackingField; // 0x53
	public DataVals dataVals; // 0x58
	public int statusEffectId; // 0x60
	public bool isShowBuffAuraUpdate; // 0x64
	public bool isBuffEffectTargetMaster; // 0x65
	public bool isUpdateShowBuffAfter; // 0x66
	private BattleActionEffect.Base EffectProc; // 0x68
	public int addOrder; // 0x70
	public int[] withAddOrderArray; // 0x78
	public int popDelay; // 0x80
	public List<BattleBuffData.BuffData> removeBuffList; // 0x88
	public bool isPopped; // 0x90
	public bool isOncePop; // 0x91

	// Properties
	public bool IsSetUpdateBuffType { get; }
	public int saveNpValue { get; set; }
	public bool IsCheckHideWhenDead { get; set; }
	public bool ExistEffectProc { get; }

	// Methods

	// RVA: 0x1E93F40 Offset: 0x1E93F40 VA: 0x1E93F40
	public void .ctor() { }

	// RVA: 0x1E93FC0 Offset: 0x1E93FC0 VA: 0x1E93FC0
	public bool get_IsSetUpdateBuffType() { }

	// RVA: 0x1E93FD0 Offset: 0x1E93FD0 VA: 0x1E93FD0
	public void OnUpdateBuffType(BattleActionData.BuffData.UpdateBuffType type) { }

	// RVA: 0x1E93FE0 Offset: 0x1E93FE0 VA: 0x1E93FE0
	public bool IsUpdateBuffType(BattleActionData.BuffData.UpdateBuffType type) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3987C Offset: 0xD3987C VA: 0xD3987C
	// RVA: 0x1E93FF0 Offset: 0x1E93FF0 VA: 0x1E93FF0
	public int get_saveNpValue() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3988C Offset: 0xD3988C VA: 0xD3988C
	// RVA: 0x1E93FF8 Offset: 0x1E93FF8 VA: 0x1E93FF8
	protected void set_saveNpValue(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3989C Offset: 0xD3989C VA: 0xD3989C
	// RVA: 0x1E94000 Offset: 0x1E94000 VA: 0x1E94000
	private void set_IsCheckHideWhenDead(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD398AC Offset: 0xD398AC VA: 0xD398AC
	// RVA: 0x1E9400C Offset: 0x1E9400C VA: 0x1E9400C
	public bool get_IsCheckHideWhenDead() { }

	// RVA: 0x1E94014 Offset: 0x1E94014 VA: 0x1E94014
	public bool get_ExistEffectProc() { }

	// RVA: 0x1E94024 Offset: 0x1E94024 VA: 0x1E94024
	public void setSaveNp(int value) { }

	// RVA: 0x1E9402C Offset: 0x1E9402C VA: 0x1E9402C
	public void SetCheckHideWhenDeadInfo(DataVals vals) { }

	// RVA: 0x1E940D4 Offset: 0x1E940D4 VA: 0x1E940D4
	public void ResetCheckHideWhenDead() { }

	// RVA: 0x1E940DC Offset: 0x1E940DC VA: 0x1E940DC
	public void SetActionEffectProc(BattleActionEffect.Base effectProc) { }

	// RVA: 0x1E93780 Offset: 0x1E93780 VA: 0x1E93780
	public void ExecPreActionProc(BattleData data) { }

	// RVA: 0x1E9341C Offset: 0x1E9341C VA: 0x1E9341C
	public void ExecAfterEffectProc(BattleData data) { }

	// RVA: 0x1E940E4 Offset: 0x1E940E4 VA: 0x1E940E4
	public bool IsPopLabel() { }
}

// Namespace: 
public enum BattleActionData.BuffData.BuffProcType // TypeDefIndex: 8700
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BuffData.BuffProcType NONE = 0;
	public const BattleActionData.BuffData.BuffProcType INSTANT_DEATH = 1;
	public const BattleActionData.BuffData.BuffProcType UPDATE_HP = 2;
	public const BattleActionData.BuffData.BuffProcType UPDATE_NP = 3;
	public const BattleActionData.BuffData.BuffProcType UPDATE_CRITICAL = 4;
	public const BattleActionData.BuffData.BuffProcType UPDATE_NPTURN = 5;
}

// Namespace: 
public enum BattleActionData.BuffData.UpdateBuffType // TypeDefIndex: 8701
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BuffData.UpdateBuffType SKILL_RANK = 1;
}

// Namespace: 
public class BattleActionData.HealData : BattleActionData.BaseData // TypeDefIndex: 8702
{
	// Fields
	public int targetId; // 0x18
	public int healPoint; // 0x1C
	public int buffId; // 0x20
	public bool isOverCharge; // 0x24
	public bool isCommandAfter; // 0x25
	public bool isShowForcedHeal; // 0x26
	public BattleActionData.BuffData effect; // 0x28
	public int popDelay; // 0x30

	// Methods

	// RVA: 0x1E94828 Offset: 0x1E94828 VA: 0x1E94828
	public void .ctor() { }

	// RVA: 0x1E94830 Offset: 0x1E94830 VA: 0x1E94830
	public bool CheckExecHeal() { }
}

// Namespace: 
public class BattleActionData.ReplaceMember : BattleActionData.BaseData // TypeDefIndex: 8703
{
	// Fields
	public int index; // 0x18
	public int outUniqeId; // 0x1C
	public int inUniqeId; // 0x20

	// Methods

	// RVA: 0x1E948DC Offset: 0x1E948DC VA: 0x1E948DC
	public void .ctor() { }
}

// Namespace: 
public class BattleActionData.MoveToSubMember : BattleActionData.BaseData // TypeDefIndex: 8704
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCCBB0 Offset: 0xCCCBB0 VA: 0xCCCBB0
	[DebuggerBrowsableAttribute] // RVA: 0xCCCBB0 Offset: 0xCCCBB0 VA: 0xCCCBB0
	private int <index>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCCBEC Offset: 0xCCCBEC VA: 0xCCCBEC
	[DebuggerBrowsableAttribute] // RVA: 0xCCCBEC Offset: 0xCCCBEC VA: 0xCCCBEC
	private int <uniqueId>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCCCC28 Offset: 0xCCCC28 VA: 0xCCCC28
	[DebuggerBrowsableAttribute] // RVA: 0xCCCC28 Offset: 0xCCCC28 VA: 0xCCCC28
	private bool <isSucceeded>k__BackingField; // 0x20

	// Properties
	public int index { get; set; }
	public int uniqueId { get; set; }
	public bool isSucceeded { get; set; }

	// Methods

	// RVA: 0x1E94854 Offset: 0x1E94854 VA: 0x1E94854
	public void .ctor(int index, int uniqueId, int funcIndex, bool isSucceeded) { }

	[CompilerGeneratedAttribute] // RVA: 0xD398BC Offset: 0xD398BC VA: 0xD398BC
	// RVA: 0x1E948C4 Offset: 0x1E948C4 VA: 0x1E948C4
	public int get_index() { }

	[CompilerGeneratedAttribute] // RVA: 0xD398CC Offset: 0xD398CC VA: 0xD398CC
	// RVA: 0x1E948A8 Offset: 0x1E948A8 VA: 0x1E948A8
	private void set_index(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD398DC Offset: 0xD398DC VA: 0xD398DC
	// RVA: 0x1E948CC Offset: 0x1E948CC VA: 0x1E948CC
	public int get_uniqueId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD398EC Offset: 0xD398EC VA: 0xD398EC
	// RVA: 0x1E948B0 Offset: 0x1E948B0 VA: 0x1E948B0
	private void set_uniqueId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD398FC Offset: 0xD398FC VA: 0xD398FC
	// RVA: 0x1E948D4 Offset: 0x1E948D4 VA: 0x1E948D4
	public bool get_isSucceeded() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3990C Offset: 0xD3990C VA: 0xD3990C
	// RVA: 0x1E948B8 Offset: 0x1E948B8 VA: 0x1E948B8
	private void set_isSucceeded(bool value) { }
}

// Namespace: 
public class BattleActionData.TransformServant : BattleActionData.BaseData // TypeDefIndex: 8705
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCCC64 Offset: 0xCCCC64 VA: 0xCCCC64
	[DebuggerBrowsableAttribute] // RVA: 0xCCCC64 Offset: 0xCCCC64 VA: 0xCCCC64
	private int <Index>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCCCA0 Offset: 0xCCCCA0 VA: 0xCCCCA0
	[DebuggerBrowsableAttribute] // RVA: 0xCCCCA0 Offset: 0xCCCCA0 VA: 0xCCCCA0
	private int <UniqueId>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCCCCDC Offset: 0xCCCCDC VA: 0xCCCCDC
	[DebuggerBrowsableAttribute] // RVA: 0xCCCCDC Offset: 0xCCCCDC VA: 0xCCCCDC
	private int <OverwriteLimitCount>k__BackingField; // 0x20

	// Properties
	public int Index { get; set; }
	public int UniqueId { get; set; }
	public int OverwriteLimitCount { get; set; }

	// Methods

	// RVA: 0x1E94DE0 Offset: 0x1E94DE0 VA: 0x1E94DE0
	public void .ctor(int index, int uniqueId, int funcIndex, int overwriteLimitCount) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3991C Offset: 0xD3991C VA: 0xD3991C
	// RVA: 0x1E94E48 Offset: 0x1E94E48 VA: 0x1E94E48
	public int get_Index() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3992C Offset: 0xD3992C VA: 0xD3992C
	// RVA: 0x1E94E30 Offset: 0x1E94E30 VA: 0x1E94E30
	private void set_Index(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3993C Offset: 0xD3993C VA: 0xD3993C
	// RVA: 0x1E94E50 Offset: 0x1E94E50 VA: 0x1E94E50
	public int get_UniqueId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3994C Offset: 0xD3994C VA: 0xD3994C
	// RVA: 0x1E94E38 Offset: 0x1E94E38 VA: 0x1E94E38
	private void set_UniqueId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3995C Offset: 0xD3995C VA: 0xD3995C
	// RVA: 0x1E94E58 Offset: 0x1E94E58 VA: 0x1E94E58
	public int get_OverwriteLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3996C Offset: 0xD3996C VA: 0xD3996C
	// RVA: 0x1E94E40 Offset: 0x1E94E40 VA: 0x1E94E40
	private void set_OverwriteLimitCount(int value) { }
}

// Namespace: 
public class BattleActionData.SummonServant : BattleActionData.BaseData // TypeDefIndex: 8706
{
	// Fields
	public int uniqueId; // 0x18
	public int unloadUniqueId; // 0x1C
	public bool isEffectSummon; // 0x20
	public int callSvtEffectId; // 0x24

	// Methods

	// RVA: 0x1E94D84 Offset: 0x1E94D84 VA: 0x1E94D84
	public void .ctor(int inUniqueId, int inUnloadUniqueId, int inFuncIndex, bool isEffect, int callSvtEffectId) { }
}

// Namespace: 
public class BattleActionData.ShiftServant : BattleActionData.BaseData // TypeDefIndex: 8707
{
	// Fields
	public int uniqueId; // 0x18
	public int svtId; // 0x1C
	public int limit; // 0x20
	public int weapon; // 0x24
	public int effectFolder; // 0x28
	public int cameraId; // 0x2C
	public int overwriteSvtVoiceId; // 0x30
	public bool isChange; // 0x34
	public bool isNoVoice; // 0x35
	public bool isHideShadow; // 0x36
	public ServantAssetArgs loadedAssetArgs; // 0x38

	// Methods

	// RVA: 0x1E948F4 Offset: 0x1E948F4 VA: 0x1E948F4
	public void .ctor() { }

	// RVA: 0x1E948FC Offset: 0x1E948FC VA: 0x1E948FC
	public void setBeforeSvtData(BattleServantData svtData) { }

	// RVA: 0x1E94A94 Offset: 0x1E94A94 VA: 0x1E94A94
	public void setCheckSvtData(BattleServantData svtData) { }

	// RVA: 0x1E94B20 Offset: 0x1E94B20 VA: 0x1E94B20 Slot: 4
	protected virtual void SetAddBeforeSvtData(BattleServantData svtData) { }

	// RVA: 0x1E94B24 Offset: 0x1E94B24 VA: 0x1E94B24 Slot: 5
	protected virtual void SetAddCheckSvtData(BattleServantData svtData) { }

	// RVA: 0x1E94B28 Offset: 0x1E94B28 VA: 0x1E94B28 Slot: 6
	public virtual void UpdateAfterShiftData(BattleServantData targetData) { }
}

// Namespace: 
public class BattleActionData.SkillShiftServant : BattleActionData.ShiftServant // TypeDefIndex: 8708
{
	// Fields
	protected BattleData data; // 0x40
	protected int npcId; // 0x48
	protected int displayType; // 0x4C

	// Methods

	// RVA: 0x1E94BA8 Offset: 0x1E94BA8 VA: 0x1E94BA8
	public void .ctor(BattleData data, int shiftNpcId) { }

	// RVA: 0x1E94BEC Offset: 0x1E94BEC VA: 0x1E94BEC Slot: 4
	protected override void SetAddBeforeSvtData(BattleServantData svtData) { }

	// RVA: 0x1E94C20 Offset: 0x1E94C20 VA: 0x1E94C20 Slot: 5
	protected override void SetAddCheckSvtData(BattleServantData svtData) { }

	// RVA: 0x1E94C70 Offset: 0x1E94C70 VA: 0x1E94C70 Slot: 6
	public override void UpdateAfterShiftData(BattleServantData targetData) { }
}

// Namespace: 
public abstract class BattleActionData.BaseShiftGaugeData : BattleActionData.BaseData // TypeDefIndex: 8709
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCCD18 Offset: 0xCCCD18 VA: 0xCCCD18
	[DebuggerBrowsableAttribute] // RVA: 0xCCCD18 Offset: 0xCCCD18 VA: 0xCCCD18
	private int <PlayedState>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCCD54 Offset: 0xCCCD54 VA: 0xCCCD54
	[DebuggerBrowsableAttribute] // RVA: 0xCCCD54 Offset: 0xCCCD54 VA: 0xCCCD54
	private int <NotShiftUpdateState>k__BackingField; // 0x1C
	protected int hpDataIndex; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCCCD90 Offset: 0xCCCD90 VA: 0xCCCD90
	[DebuggerBrowsableAttribute] // RVA: 0xCCCD90 Offset: 0xCCCD90 VA: 0xCCCD90
	private List<ShiftHpData> <ShiftHpDataList>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCCCDCC Offset: 0xCCCDCC VA: 0xCCCDCC
	[DebuggerBrowsableAttribute] // RVA: 0xCCCDCC Offset: 0xCCCDCC VA: 0xCCCDCC
	private int <TargetId>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCCE08 Offset: 0xCCCE08 VA: 0xCCCE08
	private static Action<ShiftHpData> <>f__am$cache0; // 0x0

	// Properties
	public int PlayedState { get; set; }
	public int NotShiftUpdateState { get; set; }
	public abstract BasePlayShiftGauge PlayMain { get; }
	public List<ShiftHpData> ShiftHpDataList { get; set; }
	public int TargetId { get; set; }
	public abstract string Motion { get; }

	// Methods

	// RVA: 0x1E93C50 Offset: 0x1E93C50 VA: 0x1E93C50
	protected void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3997C Offset: 0xD3997C VA: 0xD3997C
	// RVA: 0x1E93C58 Offset: 0x1E93C58 VA: 0x1E93C58
	private void set_PlayedState(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3998C Offset: 0xD3998C VA: 0xD3998C
	// RVA: 0x1E93C60 Offset: 0x1E93C60 VA: 0x1E93C60
	public int get_PlayedState() { }

	// RVA: 0x1E93C68 Offset: 0x1E93C68 VA: 0x1E93C68
	public void OnState(BattleActionData.BaseShiftGaugeData.PlayedStateFlag state) { }

	// RVA: 0x1E93C78 Offset: 0x1E93C78 VA: 0x1E93C78
	public void OffState(BattleActionData.BaseShiftGaugeData.PlayedStateFlag state) { }

	// RVA: 0x1E93C88 Offset: 0x1E93C88 VA: 0x1E93C88
	public bool IsPlaying(BattleActionData.BaseShiftGaugeData.PlayedStateFlag state) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3999C Offset: 0xD3999C VA: 0xD3999C
	// RVA: 0x1E93C98 Offset: 0x1E93C98 VA: 0x1E93C98
	private void set_NotShiftUpdateState(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD399AC Offset: 0xD399AC VA: 0xD399AC
	// RVA: 0x1E93CA0 Offset: 0x1E93CA0 VA: 0x1E93CA0
	public int get_NotShiftUpdateState() { }

	// RVA: 0x1E93CA8 Offset: 0x1E93CA8 VA: 0x1E93CA8
	public void OnNotUpdateState(BattleActionData.BaseShiftGaugeData.NotUpdateFlag state) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract BasePlayShiftGauge get_PlayMain();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract BattleServantHpShiftComponent.EffectData GetMainEffectData();

	// RVA: 0x1E93CB8 Offset: 0x1E93CB8 VA: 0x1E93CB8 Slot: 6
	public virtual BattleServantHpShiftComponent.EffectData GetBeforeEffectData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD399BC Offset: 0xD399BC VA: 0xD399BC
	// RVA: 0x1E93D30 Offset: 0x1E93D30 VA: 0x1E93D30
	protected void set_ShiftHpDataList(List<ShiftHpData> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD399CC Offset: 0xD399CC VA: 0xD399CC
	// RVA: 0x1E93D38 Offset: 0x1E93D38 VA: 0x1E93D38
	public List<ShiftHpData> get_ShiftHpDataList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD399DC Offset: 0xD399DC VA: 0xD399DC
	// RVA: 0x1E93D40 Offset: 0x1E93D40 VA: 0x1E93D40
	protected void set_TargetId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD399EC Offset: 0xD399EC VA: 0xD399EC
	// RVA: 0x1E93D48 Offset: 0x1E93D48 VA: 0x1E93D48
	public int get_TargetId() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Motion();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool IsInvalid(BattleServantData svtData);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int GetShiftValue(BattleServantData svtData, int baseValue);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void UpdateMaxShift(BattleServantData targetSvtData, bool isChangeMaxBreakGauge);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void AddShiftHpData(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp);

	// RVA: 0x1E93D50 Offset: 0x1E93D50 VA: 0x1E93D50 Slot: 12
	public virtual void Init(BattleServantData svtData) { }

	// RVA: 0x1E93DE0 Offset: 0x1E93DE0 VA: 0x1E93DE0 Slot: 13
	public virtual void InitShiftHpPos() { }

	// RVA: 0x1E93EB4 Offset: 0x1E93EB4 VA: 0x1E93EB4
	public ShiftHpData GetHpData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD399FC Offset: 0xD399FC VA: 0xD399FC
	// RVA: 0x1E93F14 Offset: 0x1E93F14 VA: 0x1E93F14
	private static void <InitShiftHpPos>m__0(ShiftHpData x) { }
}

// Namespace: 
public enum BattleActionData.BaseShiftGaugeData.PlayedStateFlag // TypeDefIndex: 8710
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BaseShiftGaugeData.PlayedStateFlag SHIFT_GAUGE_MAIN = 1;
}

// Namespace: 
public enum BattleActionData.BaseShiftGaugeData.NotUpdateFlag // TypeDefIndex: 8711
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.BaseShiftGaugeData.NotUpdateFlag TD_GAUGE = 1;
}

// Namespace: 
public class BattleActionData.UpShiftGaugeData : BattleActionData.BaseShiftGaugeData // TypeDefIndex: 8712
{
	// Properties
	public override string Motion { get; }
	public override BasePlayShiftGauge PlayMain { get; }

	// Methods

	// RVA: 0x1E94E60 Offset: 0x1E94E60 VA: 0x1E94E60
	public void .ctor() { }

	// RVA: 0x1E94E68 Offset: 0x1E94E68 VA: 0x1E94E68 Slot: 7
	public override string get_Motion() { }

	// RVA: 0x1E94EB0 Offset: 0x1E94EB0 VA: 0x1E94EB0 Slot: 4
	public override BasePlayShiftGauge get_PlayMain() { }

	// RVA: 0x1E94F28 Offset: 0x1E94F28 VA: 0x1E94F28 Slot: 8
	public override bool IsInvalid(BattleServantData svtData) { }

	// RVA: 0x1E94F5C Offset: 0x1E94F5C VA: 0x1E94F5C Slot: 9
	public override int GetShiftValue(BattleServantData svtData, int baseValue) { }

	// RVA: 0x1E94FF0 Offset: 0x1E94FF0 VA: 0x1E94FF0 Slot: 5
	public override BattleServantHpShiftComponent.EffectData GetMainEffectData() { }

	// RVA: 0x1E95068 Offset: 0x1E95068 VA: 0x1E95068 Slot: 10
	public override void UpdateMaxShift(BattleServantData targetSvtData, bool isChangeMaxBreakGauge) { }

	// RVA: 0x1E9512C Offset: 0x1E9512C VA: 0x1E9512C Slot: 11
	public override void AddShiftHpData(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }
}

// Namespace: 
public class BattleActionData.DownShiftGaugeData : BattleActionData.BaseShiftGaugeData // TypeDefIndex: 8713
{
	// Properties
	public override string Motion { get; }
	public override BasePlayShiftGauge PlayMain { get; }

	// Methods

	// RVA: 0x1E9454C Offset: 0x1E9454C VA: 0x1E9454C
	public void .ctor() { }

	// RVA: 0x1E94554 Offset: 0x1E94554 VA: 0x1E94554 Slot: 7
	public override string get_Motion() { }

	// RVA: 0x1E9459C Offset: 0x1E9459C VA: 0x1E9459C Slot: 4
	public override BasePlayShiftGauge get_PlayMain() { }

	// RVA: 0x1E94614 Offset: 0x1E94614 VA: 0x1E94614 Slot: 8
	public override bool IsInvalid(BattleServantData svtData) { }

	// RVA: 0x1E94650 Offset: 0x1E94650 VA: 0x1E94650 Slot: 9
	public override int GetShiftValue(BattleServantData svtData, int baseValue) { }

	// RVA: 0x1E946F4 Offset: 0x1E946F4 VA: 0x1E946F4 Slot: 5
	public override BattleServantHpShiftComponent.EffectData GetMainEffectData() { }

	// RVA: 0x1E9476C Offset: 0x1E9476C VA: 0x1E9476C Slot: 10
	public override void UpdateMaxShift(BattleServantData targetSvtData, bool isChangeMaxBreakGauge) { }

	// RVA: 0x1E94770 Offset: 0x1E94770 VA: 0x1E94770 Slot: 11
	public override void AddShiftHpData(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }
}

// Namespace: 
public class BattleActionData.ChangeBg : BattleActionData.BaseData // TypeDefIndex: 8714
{
	// Fields
	public int bgNo; // 0x18
	public int bgTp; // 0x1C

	// Methods

	// RVA: 0x1E9415C Offset: 0x1E9415C VA: 0x1E9415C
	public void .ctor() { }
}

// Namespace: 
public class BattleActionData.GimmickData : BattleActionData.BaseData // TypeDefIndex: 8715
{
	// Fields
	public int[] indexArray; // 0x18
	public string[] startVoiceIdArray; // 0x20
	public object[] resultVoiceIdArray; // 0x28
	public int[] animationTypes; // 0x30

	// Methods

	// RVA: 0x1E94820 Offset: 0x1E94820 VA: 0x1E94820
	public void .ctor() { }
}

// Namespace: 
public enum BattleActionData.ACTTYPE // TypeDefIndex: 8716
{
	// Fields
	public int value__; // 0x0
	public const BattleActionData.ACTTYPE NOMAL = 0;
	public const BattleActionData.ACTTYPE ATTACK = 1;
	public const BattleActionData.ACTTYPE DAMAGE = 2;
	public const BattleActionData.ACTTYPE ATTACK_BEFORE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB00 Offset: 0xCAFB00 VA: 0xCAFB00
private sealed class BattleActionData.<PreActionProcess>c__AnonStorey0 // TypeDefIndex: 8717
{
	// Fields
	internal BattleData data; // 0x10

	// Methods

	// RVA: 0x1E9372C Offset: 0x1E9372C VA: 0x1E9372C
	public void .ctor() { }

	// RVA: 0x1E93734 Offset: 0x1E93734 VA: 0x1E93734
	internal void <>m__0(BattleActionData.BuffData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB10 Offset: 0xCAFB10 VA: 0xCAFB10
private sealed class BattleActionData.<ExecUnappliedProcess>c__AnonStorey1 // TypeDefIndex: 8718
{
	// Fields
	internal BattleData data; // 0x10

	// Methods

	// RVA: 0x1E933CC Offset: 0x1E933CC VA: 0x1E933CC
	public void .ctor() { }

	// RVA: 0x1E933D4 Offset: 0x1E933D4 VA: 0x1E933D4
	internal void <>m__0(BattleActionData.BuffData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB20 Offset: 0xCAFB20 VA: 0xCAFB20
private sealed class BattleActionData.<GetExecOrderArray>c__AnonStorey2 // TypeDefIndex: 8719
{
	// Fields
	internal List<BattleActionData.BaseData> execOrderList; // 0x10

	// Methods

	// RVA: 0x1E934A4 Offset: 0x1E934A4 VA: 0x1E934A4
	public void .ctor() { }

	// RVA: 0x1E934AC Offset: 0x1E934AC VA: 0x1E934AC
	internal void <>m__0(BattleActionData.BuffData x) { }

	// RVA: 0x1E9351C Offset: 0x1E9351C VA: 0x1E9351C
	internal void <>m__1(BattleActionData.HealData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB30 Offset: 0xCAFB30 VA: 0xCAFB30
private sealed class BattleActionData.<getDamageList>c__AnonStorey3 // TypeDefIndex: 8720
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1E93A6C Offset: 0x1E93A6C VA: 0x1E93A6C
	public void .ctor() { }

	// RVA: 0x1E93A74 Offset: 0x1E93A74 VA: 0x1E93A74
	internal bool <>m__0(BattleActionData.DamageData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB40 Offset: 0xCAFB40 VA: 0xCAFB40
private sealed class BattleActionData.<GetDamageArrayDistinctIndex>c__AnonStorey4 // TypeDefIndex: 8721
{
	// Fields
	internal BattleActionData.DamageData damage; // 0x10

	// Methods

	// RVA: 0x1E93450 Offset: 0x1E93450 VA: 0x1E93450
	public void .ctor() { }

	// RVA: 0x1E93458 Offset: 0x1E93458 VA: 0x1E93458
	internal bool <>m__0(BattleActionData.DamageData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB50 Offset: 0xCAFB50 VA: 0xCAFB50
private sealed class BattleActionData.<getBuffList>c__AnonStorey5 // TypeDefIndex: 8722
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1E93A28 Offset: 0x1E93A28 VA: 0x1E93A28
	public void .ctor() { }

	// RVA: 0x1E93A30 Offset: 0x1E93A30 VA: 0x1E93A30
	internal bool <>m__0(BattleActionData.BuffData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB60 Offset: 0xCAFB60 VA: 0xCAFB60
private sealed class BattleActionData.<getHealList>c__AnonStorey6 // TypeDefIndex: 8723
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1E93AB0 Offset: 0x1E93AB0 VA: 0x1E93AB0
	public void .ctor() { }

	// RVA: 0x1E93AB8 Offset: 0x1E93AB8 VA: 0x1E93AB8
	internal bool <>m__0(BattleActionData.HealData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB70 Offset: 0xCAFB70 VA: 0xCAFB70
private sealed class BattleActionData.<getReplaceMember>c__AnonStorey7 // TypeDefIndex: 8724
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1E93AF4 Offset: 0x1E93AF4 VA: 0x1E93AF4
	public void .ctor() { }

	// RVA: 0x1E93AFC Offset: 0x1E93AFC VA: 0x1E93AFC
	internal bool <>m__0(BattleActionData.ReplaceMember s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB80 Offset: 0xCAFB80 VA: 0xCAFB80
private sealed class BattleActionData.<getSummonServant>c__AnonStorey8 // TypeDefIndex: 8725
{
	// Fields
	internal int funcIndex; // 0x10

	// Methods

	// RVA: 0x1E93B7C Offset: 0x1E93B7C VA: 0x1E93B7C
	public void .ctor() { }

	// RVA: 0x1E93B84 Offset: 0x1E93B84 VA: 0x1E93B84
	internal bool <>m__0(BattleActionData.SummonServant s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFB90 Offset: 0xCAFB90 VA: 0xCAFB90
private sealed class BattleActionData.<GetFunctionIndexArrayNearByCuriousFunc>c__AnonStorey9 // TypeDefIndex: 8726
{
	// Fields
	internal Nullable<int> curiousFuncIndex; // 0x10

	// Methods

	// RVA: 0x1E9358C Offset: 0x1E9358C VA: 0x1E9358C
	public void .ctor() { }

	// RVA: 0x1E93594 Offset: 0x1E93594 VA: 0x1E93594
