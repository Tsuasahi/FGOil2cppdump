	// RVA: 0x126D9B0 Offset: 0x126D9B0 VA: 0x126D9B0
	public void .ctor() { }

	// RVA: 0x126E2CC Offset: 0x126E2CC VA: 0x126E2CC
	internal void <>m__0() { }
}

// Namespace: 
public class ForceDisableObject : MonoBehaviour // TypeDefIndex: 8701
{
	// Fields
	public Transform[] disableObjects; // 0x18

	// Methods

	// RVA: 0x171C5C8 Offset: 0x171C5C8 VA: 0x171C5C8
	public void .ctor() { }

	// RVA: 0x171C5D0 Offset: 0x171C5D0 VA: 0x171C5D0
	private void Start() { }

	// RVA: 0x171C5D4 Offset: 0x171C5D4 VA: 0x171C5D4
	public void DisableAllObjects() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2A820 Offset: 0xC2A820 VA: 0xC2A820
public class ShaderCutoutDisplayProgress : MonoBehaviour // TypeDefIndex: 8702
{
	// Fields
	private Material shaderMaterial; // 0x18
	[SerializeField] // RVA: 0xC5F994 Offset: 0xC5F994 VA: 0xC5F994
	private ShaderCutoutDisplayProgress.DisplayStartPosition startPos; // 0x20
	[SerializeField] // RVA: 0xC5F9A4 Offset: 0xC5F9A4 VA: 0xC5F9A4
	[RangeAttribute] // RVA: 0xC5F9A4 Offset: 0xC5F9A4 VA: 0xC5F9A4
	private float transmissionRatioRange; // 0x24
	[SerializeField] // RVA: 0xC5F9E4 Offset: 0xC5F9E4 VA: 0xC5F9E4
	private bool isSharedMaterial; // 0x28
	public ShaderCutoutDisplayProgress.ShaderFloatParam displayProgress; // 0x2C
	public Color multiplySyntheticColor; // 0x3C

	// Methods

	// RVA: 0x1335884 Offset: 0x1335884 VA: 0x1335884
	public void .ctor() { }

	// RVA: 0x13358C4 Offset: 0x13358C4 VA: 0x13358C4
	private void Awake() { }

	// RVA: 0x13359C0 Offset: 0x13359C0 VA: 0x13359C0
	private void InitShaderParam() { }

	// RVA: 0x1335C34 Offset: 0x1335C34 VA: 0x1335C34
	private bool IsVertical(ShaderCutoutDisplayProgress.DisplayStartPosition startPos) { }

	// RVA: 0x1335C44 Offset: 0x1335C44 VA: 0x1335C44
	private bool IsProportion(ShaderCutoutDisplayProgress.DisplayStartPosition startPos) { }

	// RVA: 0x1335BD4 Offset: 0x1335BD4 VA: 0x1335BD4
	private void InitUpdateShaderParam() { }

	// RVA: 0x1335C5C Offset: 0x1335C5C VA: 0x1335C5C
	private void InitUpdateShaderParam(ref ShaderCutoutDisplayProgress.ShaderFloatParam param, string propertyName) { }

	// RVA: 0x13358F0 Offset: 0x13358F0 VA: 0x13358F0
	private void SetMaterial() { }

	// RVA: 0x1335C90 Offset: 0x1335C90 VA: 0x1335C90
	private void Update() { }

	// RVA: 0x1335C94 Offset: 0x1335C94 VA: 0x1335C94
	private void UpdateShaderParam() { }

	// RVA: 0x1335D78 Offset: 0x1335D78 VA: 0x1335D78
	private void UpdateShaderParam(ref ShaderCutoutDisplayProgress.ShaderFloatParam param) { }
}

// Namespace: 
public enum ShaderCutoutDisplayProgress.DisplayStartPosition // TypeDefIndex: 8703
{
	// Fields
	public int value__; // 0x0
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Left = 0;
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Top = 1;
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Right = 2;
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Bottom = 3;
}

// Namespace: 
[Serializable]
public struct ShaderCutoutDisplayProgress.ShaderFloatParam // TypeDefIndex: 8704
{
	// Fields
	public int propertyId; // 0x0
	public bool isNoUpdate; // 0x4
	public float prevValue; // 0x8
	[RangeAttribute] // RVA: 0xC5F9F4 Offset: 0xC5F9F4 VA: 0xC5F9F4
	public float value; // 0xC
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2A830 Offset: 0xC2A830 VA: 0xC2A830
[RequireComponent] // RVA: 0xC2A830 Offset: 0xC2A830 VA: 0xC2A830
public class ShaderParamAnimation : MonoBehaviour // TypeDefIndex: 8705
{
	// Fields
	private Material material; // 0x18
	[SerializeField] // RVA: 0xC5FA0C Offset: 0xC5FA0C VA: 0xC5FA0C
	public ShaderParamAnimation.FloatCountType FloatType; // 0x20
	[SerializeField] // RVA: 0xC5FA1C Offset: 0xC5FA1C VA: 0xC5FA1C
	public ShaderParamAnimation.VectorCountType VectorType; // 0x24
	[SerializeField] // RVA: 0xC5FA2C Offset: 0xC5FA2C VA: 0xC5FA2C
	public string FloatNameA; // 0x28
	[SerializeField] // RVA: 0xC5FA3C Offset: 0xC5FA3C VA: 0xC5FA3C
	public float FloatValueA; // 0x30
	[SerializeField] // RVA: 0xC5FA4C Offset: 0xC5FA4C VA: 0xC5FA4C
	public string FloatNameB; // 0x38
	[SerializeField] // RVA: 0xC5FA5C Offset: 0xC5FA5C VA: 0xC5FA5C
	public float FloatValueB; // 0x40
	[SerializeField] // RVA: 0xC5FA6C Offset: 0xC5FA6C VA: 0xC5FA6C
	public string FloatNameC; // 0x48
	[SerializeField] // RVA: 0xC5FA7C Offset: 0xC5FA7C VA: 0xC5FA7C
	public float FloatValueC; // 0x50
	[SerializeField] // RVA: 0xC5FA8C Offset: 0xC5FA8C VA: 0xC5FA8C
	public string FloatNameD; // 0x58
	[SerializeField] // RVA: 0xC5FA9C Offset: 0xC5FA9C VA: 0xC5FA9C
	public float FloatValueD; // 0x60
	[SerializeField] // RVA: 0xC5FAAC Offset: 0xC5FAAC VA: 0xC5FAAC
	public string Vector2NameA; // 0x68
	[SerializeField] // RVA: 0xC5FABC Offset: 0xC5FABC VA: 0xC5FABC
	public Vector2 Vector2ValueA; // 0x70
	[SerializeField] // RVA: 0xC5FACC Offset: 0xC5FACC VA: 0xC5FACC
	public string Vector2NameB; // 0x78
	[SerializeField] // RVA: 0xC5FADC Offset: 0xC5FADC VA: 0xC5FADC
	public Vector2 Vector2ValueB; // 0x80
	[SerializeField] // RVA: 0xC5FAEC Offset: 0xC5FAEC VA: 0xC5FAEC
	public string Vector2NameC; // 0x88
	[SerializeField] // RVA: 0xC5FAFC Offset: 0xC5FAFC VA: 0xC5FAFC
	public Vector2 Vector2ValueC; // 0x90
	[SerializeField] // RVA: 0xC5FB0C Offset: 0xC5FB0C VA: 0xC5FB0C
	public string Vector2NameD; // 0x98
	[SerializeField] // RVA: 0xC5FB1C Offset: 0xC5FB1C VA: 0xC5FB1C
	public Vector2 Vector2ValueD; // 0xA0
	private int FloatNameA_Id; // 0xA8
	private int FloatNameB_Id; // 0xAC
	private int FloatNameC_Id; // 0xB0
	private int FloatNameD_Id; // 0xB4
	private int Vector2NameA_Id; // 0xB8
	private int Vector2NameB_Id; // 0xBC
	private int Vector2NameC_Id; // 0xC0
	private int Vector2NameD_Id; // 0xC4

	// Methods

	// RVA: 0x1335E00 Offset: 0x1335E00 VA: 0x1335E00
	public void .ctor() { }

	// RVA: 0x1335E08 Offset: 0x1335E08 VA: 0x1335E08
	private void Reset() { }

	// RVA: 0x1335F60 Offset: 0x1335F60 VA: 0x1335F60
	private void Start() { }

	// RVA: 0x1335F64 Offset: 0x1335F64 VA: 0x1335F64
	public void SetupMaterial() { }

	// RVA: 0x13361C4 Offset: 0x13361C4 VA: 0x13361C4
	private void setupShader() { }

	// RVA: 0x133627C Offset: 0x133627C VA: 0x133627C
	private void Update() { }

	// RVA: 0x1336280 Offset: 0x1336280 VA: 0x1336280
	public void UpdateMaterial() { }
}

// Namespace: 
public enum ShaderParamAnimation.FloatCountType // TypeDefIndex: 8706
{
	// Fields
	public int value__; // 0x0
	public const ShaderParamAnimation.FloatCountType Float_0 = 0;
	public const ShaderParamAnimation.FloatCountType Float_1 = 1;
	public const ShaderParamAnimation.FloatCountType Float_2 = 2;
	public const ShaderParamAnimation.FloatCountType Float_3 = 3;
	public const ShaderParamAnimation.FloatCountType Float_4 = 4;
}

// Namespace: 
public enum ShaderParamAnimation.VectorCountType // TypeDefIndex: 8707
{
	// Fields
	public int value__; // 0x0
	public const ShaderParamAnimation.VectorCountType Vector_0 = 0;
	public const ShaderParamAnimation.VectorCountType Vector_1 = 1;
	public const ShaderParamAnimation.VectorCountType Vector_2 = 2;
	public const ShaderParamAnimation.VectorCountType Vector_3 = 3;
	public const ShaderParamAnimation.VectorCountType Vector_4 = 4;
}

// Namespace: NetworkOverrideAsset
public class Server : MonoBehaviour // TypeDefIndex: 8708
{
	// Methods

	// RVA: 0x1389768 Offset: 0x1389768 VA: 0x1389768
	public void .ctor() { }
}

// Namespace: 
public class BattleActionLogManager : BattleActionLogManagerInterface // TypeDefIndex: 8709
{
	// Fields
	private MemoryStream header; // 0x10
	private MemoryStream data; // 0x18
	private BinaryWriter headerWriter; // 0x20
	private BinaryWriter dataWriter; // 0x28

	// Methods

	// RVA: 0x198A870 Offset: 0x198A870 VA: 0x198A870
	public void .ctor() { }

	// RVA: 0x198A944 Offset: 0x198A944 VA: 0x198A944 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x198A9B8 Offset: 0x198A9B8 VA: 0x198A9B8 Slot: 4
	public void close() { }

	// RVA: 0x198AA3C Offset: 0x198AA3C VA: 0x198AA3C
	private void addHeader(BattleActionLogType.Type logType) { }

	// RVA: 0x198AAD4 Offset: 0x198AAD4 VA: 0x198AAD4 Slot: 5
	public byte[] getHeaderRaw() { }

	// RVA: 0x198AB0C Offset: 0x198AB0C VA: 0x198AB0C Slot: 6
	public byte[] getDataRaw() { }

	// RVA: 0x198AB44 Offset: 0x198AB44 VA: 0x198AB44 Slot: 7
	public void setHeader(byte[] buffer) { }

	// RVA: 0x198AB80 Offset: 0x198AB80 VA: 0x198AB80 Slot: 8
	public void setData(byte[] buffer) { }

	// RVA: 0x198ABBC Offset: 0x198ABBC VA: 0x198ABBC Slot: 9
	public void addLogUseSkill(BattleLogicTask task) { }

	// RVA: 0x198ADCC Offset: 0x198ADCC VA: 0x198ADCC Slot: 10
	public void addLogUseCommandSpell(BattleLogicTask task) { }

	// RVA: 0x198AF18 Offset: 0x198AF18 VA: 0x198AF18 Slot: 11
	public void addLogSelectTarget(int selectIndex) { }

	// RVA: 0x198AF64 Offset: 0x198AF64 VA: 0x198AF64 Slot: 12
	public void addLogSelectCommand(int selectIndex1, int selectIndex2, int selectIndex3) { }

	// RVA: 0x198B018 Offset: 0x198B018 VA: 0x198B018 Slot: 13
	public void addLogContinue() { }
}

// Namespace: 
public interface BattleActionLogManagerInterface // TypeDefIndex: 8710
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void close();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte[] getHeaderRaw();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract byte[] getDataRaw();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void setHeader(byte[] buffer);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void setData(byte[] buffer);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void addLogUseSkill(BattleLogicTask task);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void addLogUseCommandSpell(BattleLogicTask task);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void addLogSelectTarget(int selectIndex);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void addLogSelectCommand(int selectIndex1, int selectIndex2, int selectIndex3);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void addLogContinue();
}

// Namespace: 
public class BattleActionLogManagerNOP : BattleActionLogManagerInterface // TypeDefIndex: 8711
{
	// Fields
	private byte[] dummy; // 0x10

	// Methods

	// RVA: 0x198B060 Offset: 0x198B060 VA: 0x198B060
	public void .ctor() { }

	// RVA: 0x198B0C0 Offset: 0x198B0C0 VA: 0x198B0C0 Slot: 4
	public void close() { }

	// RVA: 0x198B0C4 Offset: 0x198B0C4 VA: 0x198B0C4 Slot: 5
	public byte[] getHeaderRaw() { }

	// RVA: 0x198B0CC Offset: 0x198B0CC VA: 0x198B0CC Slot: 6
	public byte[] getDataRaw() { }

	// RVA: 0x198B0D4 Offset: 0x198B0D4 VA: 0x198B0D4 Slot: 7
	public void setHeader(byte[] buffer) { }

	// RVA: 0x198B0D8 Offset: 0x198B0D8 VA: 0x198B0D8 Slot: 8
	public void setData(byte[] buffer) { }

	// RVA: 0x198B0DC Offset: 0x198B0DC VA: 0x198B0DC Slot: 9
	public void addLogUseSkill(BattleLogicTask task) { }

	// RVA: 0x198B0E0 Offset: 0x198B0E0 VA: 0x198B0E0 Slot: 10
	public void addLogUseCommandSpell(BattleLogicTask task) { }

	// RVA: 0x198B0E4 Offset: 0x198B0E4 VA: 0x198B0E4 Slot: 11
	public void addLogSelectTarget(int selectIndex) { }

	// RVA: 0x198B0E8 Offset: 0x198B0E8 VA: 0x198B0E8 Slot: 12
	public void addLogSelectCommand(int selectIndex1, int selectIndex2, int selectIndex3) { }

	// RVA: 0x198B0EC Offset: 0x198B0EC VA: 0x198B0EC Slot: 13
	public void addLogContinue() { }
}

// Namespace: 
public class BattleActionLogType // TypeDefIndex: 8712
{
	// Methods

	// RVA: 0x198B0F0 Offset: 0x198B0F0 VA: 0x198B0F0
	public void .ctor() { }
}

// Namespace: 
public enum BattleActionLogType.Type // TypeDefIndex: 8713
{
	// Fields
	public int value__; // 0x0
	public const BattleActionLogType.Type NONE = 0;
	public const BattleActionLogType.Type SELECT_TARGET = 1;
	public const BattleActionLogType.Type SKILL = 2;
	public const BattleActionLogType.Type COMMAND_SPELL = 3;
	public const BattleActionLogType.Type SELECT_COMMAND = 4;
	public const BattleActionLogType.Type CONTINUE = 5;
	public const BattleActionLogType.Type TERMINATE = 6;
}

// Namespace: 
public class AutoDestroyObjectComponent : MonoBehaviour // TypeDefIndex: 8714
{
	// Fields
	public float lostTime; // 0x18
	private float elapsedTime; // 0x1C

	// Methods

	// RVA: 0xF55CD0 Offset: 0xF55CD0 VA: 0xF55CD0
	public void .ctor() { }

	// RVA: 0xF55CE0 Offset: 0xF55CE0 VA: 0xF55CE0
	private void Start() { }

	// RVA: 0xF55CE8 Offset: 0xF55CE8 VA: 0xF55CE8
	private void Update() { }
}

// Namespace: 
public class BattleActionCamera : BaseMonoBehaviour // TypeDefIndex: 8715
{
	// Fields
	public Dictionary<int, PlayMakerFSM> cameraFsmDictionary; // 0x18
	public Dictionary<int, int> cameraTargetDictionary; // 0x20
	public Camera actorcamera; // 0x28
	public Camera frontcamera; // 0x30
	public Camera middleCamera; // 0x38
	private Dictionary<string, bool> frontCameraEffectsStatus; // 0x40
	private Dictionary<string, bool> middleCameraEffectsStatus; // 0x48
	private BattlePerformance perf; // 0x50
	private PlayMakerFSM mainFsm; // 0x58
	private const int mainFsmNo = 0;
	private const string defaultEvent = "CAMERA_END";
	protected float ShakeTime; // 0x60
	protected float ShakeTargetTime; // 0x64
	protected Vector3 ShakeRange; // 0x68
	protected bool Shaking; // 0x74
	private const int ShakeFrequency = 30;

	// Methods

	// RVA: 0xF69E90 Offset: 0xF69E90 VA: 0xF69E90
	public void .ctor() { }

	// RVA: 0xF69F28 Offset: 0xF69F28 VA: 0xF69F28
	public void Initialize(BattlePerformance inPerf) { }

	// RVA: 0xF6A19C Offset: 0xF6A19C VA: 0xF6A19C
	public void setSpecialCamera(bool active) { }

	// RVA: 0xF6A2CC Offset: 0xF6A2CC VA: 0xF6A2CC
	public void setNormalMode() { }

	// RVA: 0xF6A2D4 Offset: 0xF6A2D4 VA: 0xF6A2D4
	public void setSpecialMode() { }

	// RVA: -1 Offset: -1
	protected void saveEffectStatus<T>(Camera cam, Dictionary<string, bool> stat) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5F130 Offset: 0x1C5F130 VA: 0x1C5F130
	|-BattleActionCamera.saveEffectStatus<Bloom>
	|-BattleActionCamera.saveEffectStatus<GrayscaleEffect>
	|-BattleActionCamera.saveEffectStatus<MotionBlur>
	|-BattleActionCamera.saveEffectStatus<object>
	|-BattleActionCamera.saveEffectStatus<Vignetting>
	*/

	// RVA: -1 Offset: -1
	protected void loadEffectStatus<T>(Camera cam, Dictionary<string, bool> stat) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5EF9C Offset: 0x1C5EF9C VA: 0x1C5EF9C
	|-BattleActionCamera.loadEffectStatus<Bloom>
	|-BattleActionCamera.loadEffectStatus<GrayscaleEffect>
	|-BattleActionCamera.loadEffectStatus<MotionBlur>
	|-BattleActionCamera.loadEffectStatus<object>
	|-BattleActionCamera.loadEffectStatus<Vignetting>
	*/

	// RVA: 0xF6A2DC Offset: 0xF6A2DC VA: 0xF6A2DC
	protected Dictionary<string, bool> saveEffectStatusCamera(Camera targetCamera) { }

	// RVA: 0xF6A3F8 Offset: 0xF6A3F8 VA: 0xF6A3F8
	protected void loadEffectStatusCamera(Camera targetCamera, Dictionary<string, bool> stat) { }

	// RVA: 0xF6A4F8 Offset: 0xF6A4F8 VA: 0xF6A4F8
	public void saveEffectStatus() { }

	// RVA: 0xF6A530 Offset: 0xF6A530 VA: 0xF6A530
	public void loadEffectStatus() { }

	// RVA: 0xF6A564 Offset: 0xF6A564 VA: 0xF6A564
	public void initializeRegisterFsm(PlayMakerFSM targetFsm) { }

	// RVA: 0xF6A714 Offset: 0xF6A714 VA: 0xF6A714
	public void sendCameraEvent(int cameraId, string eventName) { }

	// RVA: 0xF6A908 Offset: 0xF6A908 VA: 0xF6A908
	public void sendEvent(int uniqueId, string eventName) { }

	// RVA: 0xF6AAFC Offset: 0xF6AAFC VA: 0xF6AAFC
	public void sendMainEvent(string eventName) { }

	// RVA: 0xF6AB0C Offset: 0xF6AB0C VA: 0xF6AB0C
	public void setGameObject(int uniqueId, GameObject obj, string nameStr) { }

	// RVA: 0xF6AC9C Offset: 0xF6AC9C VA: 0xF6AC9C
	public PlayMakerFSM getUniqueFsm(int uniqueId) { }

	// RVA: 0xF6A9E0 Offset: 0xF6A9E0 VA: 0xF6A9E0
	public PlayMakerFSM getUniqueFsm(int uniqueId, out int cameraId) { }

	// RVA: 0xF6ACC0 Offset: 0xF6ACC0 VA: 0xF6ACC0
	public void registerCamera(int uniqueId, int cameraId) { }

	// RVA: 0xF6AF48 Offset: 0xF6AF48 VA: 0xF6AF48
	public void deleteCamera(int uniqueId, int cameraId) { }

	// RVA: 0xF6B1F4 Offset: 0xF6B1F4 VA: 0xF6B1F4
	public void ShakePosition(Vector3 range, float tm) { }

	// RVA: 0xF6B20C Offset: 0xF6B20C VA: 0xF6B20C
	private void Update() { }

	// RVA: 0xF6B454 Offset: 0xF6B454 VA: 0xF6B454
	public void playCameraAnimation(string animName) { }

	// RVA: 0xF6B718 Offset: 0xF6B718 VA: 0xF6B718
	public void stopCameraAnimation() { }
}

// Namespace: 
public class BattleActionData // TypeDefIndex: 8716
{
	// Fields
	public BattleActionData.STATE state; // 0x10
	public string endcameraname; // 0x18
	public int actorId; // 0x20
	public int targetId; // 0x24
	public int[] pttargetIds; // 0x28
	public int motionId; // 0x30
	public int imageId; // 0x34
	public int type; // 0x38
	public int commandType; // 0x3C
	public string motionname; // 0x40
	public GameObject targetObject; // 0x48
	public GameObject prevTargetObject; // 0x50
	public bool isAllAttack; // 0x58
	public static int TYPE_DEAD; // 0x0
	public static int TYPE_TW; // 0x4
	public static int TYPE_SKILL; // 0x8
	public static int TYPE_BACKSTEP; // 0xC
	public static int TYPE_RESURRECTION; // 0x10
	public static int TYPE_BOOSTSKILL; // 0x14
	public static int TYPE_COMMAND_SPELL; // 0x18
	public static int TYPE_ORDERARTS; // 0x1C
	public static int TYPE_ORDERBUSTER; // 0x20
	public static int TYPE_ORDERQUICK; // 0x24
	public static int TYPE_ENEMY_CUTIN; // 0x28
	public static int TYPE_ENEMY_SPELL_CUTIN; // 0x2C
	public bool flash; // 0x59
	public bool pair; // 0x5A
	public bool three; // 0x5B
	public bool prevattackme; // 0x5C
	public bool nextattackme; // 0x5D
	public int actionIndex; // 0x60
	public int attackcount; // 0x64
	public int chainCount; // 0x68
	public int commandattack; // 0x6C
	public int treasureDvcId; // 0x70
	public float systemTime; // 0x74
	public string skillMessage; // 0x78
	public string motionMessage; // 0x80
	public BattleSkillInfoData skillInfo; // 0x88
	public int addCriticalStars; // 0x90
	public bool redrawCommandCard; // 0x94
	public int[] effectlist; // 0x98
	public int npPer; // 0xA0
	public long userCommandCodeId; // 0xA8
	public BattleActionData.GimmickData gimmickData; // 0xB0
	private List<int> damageSideEffectedSvtIds; // 0xB8
	private List<KeyValuePair<int, int>> attackSideEffectedSvtIds; // 0xC0
	private List<BattleActionData.ServantLogicResultData> servantLogicResultList; // 0xC8
	public bool funcResult; // 0xD0
	private List<Target.PlayerTypeFlag> funcTargetPlayerTypeList; // 0xD8
	public bool isSuccessTargetSelection; // 0xE0
	public bool isForcedSpeedOne; // 0xE1
	public bool isSkillShift; // 0xE2
	public BattleActionData afterActionData; // 0xE8
	public BattleLogicTask.ACTORTYPE taskActorType; // 0xF0
	public bool isRevival; // 0xF4
	private bool isExecPreActionProc; // 0xF5
	public bool checkRevengeId; // 0xF6
	public static int addActionOrder; // 0x30
	private bool isPreAfterActCheckDead; // 0xF7
	public bool IsVanishSkill; // 0xF8
	public int ActSetId; // 0xFC
	[CompilerGeneratedAttribute] // RVA: 0xC5FB2C Offset: 0xC5FB2C VA: 0xC5FB2C
	[DebuggerBrowsableAttribute] // RVA: 0xC5FB2C Offset: 0xC5FB2C VA: 0xC5FB2C
	private BattleActionWaitCond.Base <WaitCond>k__BackingField; // 0x100
	public bool isCounter; // 0x108
	public List<int> funcTargetList; // 0x110
	private List<BattleActionData.DamageData> _damagedatalist; // 0x118
	public List<BattleActionData.BuffData> buffdatalist; // 0x120
	public List<BattleActionData.HealData> healdatalist; // 0x128
	public List<BattleActionData.ReplaceMember> replacememberlist; // 0x130
	public List<BattleActionData.MoveToSubMember> moveToSubMemberList; // 0x138
	public List<BattleActionData.TransformServant> transformServantlist; // 0x140
	public List<BattleActionData.SummonServant> summonServantList; // 0x148
	public List<BattleActionData.ShiftServant> shiftServantList; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xC5FB68 Offset: 0xC5FB68 VA: 0xC5FB68
	[DebuggerBrowsableAttribute] // RVA: 0xC5FB68 Offset: 0xC5FB68 VA: 0xC5FB68
	private BattleActionData.BaseShiftGaugeData <ShiftGauge>k__BackingField; // 0x158
	public List<BattleActionData.ChangeBg> changeBgList; // 0x160
	public string skillCutInMessage; // 0x168
	public List<BattleActionData> sideEffectList; // 0x170
	public BattleActionData.ACTTYPE actType; // 0x178
	private bool noOperation; // 0x17C
	[CompilerGeneratedAttribute] // RVA: 0xC5FBA4 Offset: 0xC5FBA4 VA: 0xC5FBA4
	private static Func<BattleActionData.BuffData, bool> <>f__am$cache0; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC5FBB4 Offset: 0xC5FBB4 VA: 0xC5FBB4
	private static Func<BattleActionData.BuffData, bool> <>f__am$cache1; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC5FBC4 Offset: 0xC5FBC4 VA: 0xC5FBC4
	private static Comparison<BattleActionData.BaseData> <>f__am$cache2; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC5FBD4 Offset: 0xC5FBD4 VA: 0xC5FBD4
	private static Action<BattleActionData.BuffData> <>f__am$cache3; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC5FBE4 Offset: 0xC5FBE4 VA: 0xC5FBE4
	private static Converter<BattleActionData.BuffData, int> <>f__am$cache4; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC5FBF4 Offset: 0xC5FBF4 VA: 0xC5FBF4
	private static Converter<BattleActionData.HealData, int> <>f__am$cache5; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC5FC04 Offset: 0xC5FC04 VA: 0xC5FC04
	private static Comparison<int> <>f__am$cache6; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC5FC14 Offset: 0xC5FC14 VA: 0xC5FC14
	private static Converter<BattleActionData.BuffData, int> <>f__am$cache7; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC5FC24 Offset: 0xC5FC24 VA: 0xC5FC24
	private static Converter<BattleActionData.HealData, int> <>f__am$cache8; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC5FC34 Offset: 0xC5FC34 VA: 0xC5FC34
	private static Converter<BattleActionData.DamageData, int> <>f__am$cache9; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC5FC44 Offset: 0xC5FC44 VA: 0xC5FC44
	private static Func<BattleActionData.DamageData, int> <>f__am$cacheA; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC5FC54 Offset: 0xC5FC54 VA: 0xC5FC54
	private static Comparison<int> <>f__am$cacheB; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC5FC64 Offset: 0xC5FC64 VA: 0xC5FC64
	private static Func<BattleActionData, BattleActionData> <>f__am$cacheC; // 0x98

	// Properties
	public BattleActionWaitCond.Base WaitCond { get; set; }
	public List<BattleActionData.DamageData> damagedatalist { get; set; }
	public BattleActionData.BaseShiftGaugeData ShiftGauge { get; set; }
	public int NotShiftUpdateFlag { get; }
	public bool NoOperation { get; set; }

	// Methods

	// RVA: 0xF6B960 Offset: 0xF6B960 VA: 0xF6B960
	public void .ctor() { }

	// RVA: 0xF6BAEC Offset: 0xF6BAEC VA: 0xF6BAEC
	public void setStateActors() { }

	// RVA: 0xF6BAF4 Offset: 0xF6BAF4 VA: 0xF6BAF4
	public bool isActors() { }

	// RVA: 0xF6BB04 Offset: 0xF6BB04 VA: 0xF6BB04
	public void setStateSystem() { }

	// RVA: 0xF6BB10 Offset: 0xF6BB10 VA: 0xF6BB10
	public bool isSystem() { }

	// RVA: 0xF6BB20 Offset: 0xF6BB20 VA: 0xF6BB20
	public void setStateField() { }

	// RVA: 0xF6BB2C Offset: 0xF6BB2C VA: 0xF6BB2C
	public bool isField() { }

	// RVA: 0xF6BB3C Offset: 0xF6BB3C VA: 0xF6BB3C
	public void setStateMotion() { }

	// RVA: 0xF6BB48 Offset: 0xF6BB48 VA: 0xF6BB48
	public bool isMotion() { }

	// RVA: 0xF6BB58 Offset: 0xF6BB58 VA: 0xF6BB58
	public bool isEnemyMaster() { }

	// RVA: 0xF6BB68 Offset: 0xF6BB68 VA: 0xF6BB68
	public bool isLoadImmediateEntryServant() { }

	// RVA: 0xF6BB78 Offset: 0xF6BB78 VA: 0xF6BB78
	public bool IsWaitCond() { }

	// RVA: 0xF6BB88 Offset: 0xF6BB88 VA: 0xF6BB88
	public void setEndCamera(string name) { }

	// RVA: 0xF6BB90 Offset: 0xF6BB90 VA: 0xF6BB90
	public string getEndCamera() { }

	// RVA: 0xF6BB98 Offset: 0xF6BB98 VA: 0xF6BB98
	public bool isEndCamera() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC128 Offset: 0xCCC128 VA: 0xCCC128
	// RVA: 0xF6BBA8 Offset: 0xF6BBA8 VA: 0xF6BBA8
	private void set_WaitCond(BattleActionWaitCond.Base value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC138 Offset: 0xCCC138 VA: 0xCCC138
	// RVA: 0xF6BBB0 Offset: 0xF6BBB0 VA: 0xF6BBB0
	public BattleActionWaitCond.Base get_WaitCond() { }

	// RVA: 0xF6BBB8 Offset: 0xF6BBB8 VA: 0xF6BBB8
	public bool isDeadMotion() { }

	// RVA: 0xF6BC30 Offset: 0xF6BC30 VA: 0xF6BC30
	public bool isResurrectionMotion() { }

	// RVA: 0xF6BCA8 Offset: 0xF6BCA8 VA: 0xF6BCA8
	public bool isSkill() { }

	// RVA: 0xF6BD20 Offset: 0xF6BD20 VA: 0xF6BD20
	public bool isBoostSkill() { }

	// RVA: 0xF6BD98 Offset: 0xF6BD98 VA: 0xF6BD98
	public void setTargetId(int targetId) { }

	// RVA: 0xF6BDA0 Offset: 0xF6BDA0 VA: 0xF6BDA0
	public void setPTTargetId(int pttargetId) { }

	// RVA: 0xF6BE2C Offset: 0xF6BE2C VA: 0xF6BE2C
	public void setPTTargetId(int[] pttargetIds) { }

	// RVA: 0xF6BE34 Offset: 0xF6BE34 VA: 0xF6BE34
	public int getPTTargetId() { }

	// RVA: 0xF6BE58 Offset: 0xF6BE58 VA: 0xF6BE58
	public int getPTSubTargetId() { }

	// RVA: 0xF6BE7C Offset: 0xF6BE7C VA: 0xF6BE7C
	public bool isCommandAttack() { }

	// RVA: 0xF6BEE0 Offset: 0xF6BEE0 VA: 0xF6BEE0
	public bool isCommonEnemyAttack() { }

	// RVA: 0xF6BF00 Offset: 0xF6BF00 VA: 0xF6BF00
	public void setCommand(BattleCommandData command) { }

	// RVA: 0xF6BF98 Offset: 0xF6BF98 VA: 0xF6BF98
	public bool isArtsOrderAttack() { }

	// RVA: 0xF6BFCC Offset: 0xF6BFCC VA: 0xF6BFCC
	public bool isGrandArtsOrderAttack() { }

	// RVA: 0xF6C014 Offset: 0xF6C014 VA: 0xF6C014
	public void PreActionProcess(BattleData data) { }

	// RVA: 0xF6C1D0 Offset: 0xF6C1D0 VA: 0xF6C1D0
	public void ExecUnappliedProcess(BattleData data) { }

	// RVA: 0xF6C36C Offset: 0xF6C36C VA: 0xF6C36C
	public BattleActionData.BaseData[] GetExecOrderArray(int funcIndex) { }

	// RVA: 0xF6C834 Offset: 0xF6C834 VA: 0xF6C834
	public BattleActionData SetWaitCond(BattleActionWaitCond.Base cond) { }

	// RVA: 0xF6C844 Offset: 0xF6C844 VA: 0xF6C844
	public List<BattleActionData.DamageData> get_damagedatalist() { }

	// RVA: 0xF6C8B8 Offset: 0xF6C8B8 VA: 0xF6C8B8
	public void set_damagedatalist(List<BattleActionData.DamageData> value) { }

	// RVA: 0xF6C8C0 Offset: 0xF6C8C0 VA: 0xF6C8C0
	public void setDamageData(BattleActionData.DamageData data, DataVals vals, bool isIndiviAtk = False, bool isRarityAtk = False) { }

	// RVA: 0xF6C9D0 Offset: 0xF6C9D0 VA: 0xF6C9D0
	public BattleActionData.DamageData[] getDamageList(int funcIndex) { }

	// RVA: 0xF6CAF4 Offset: 0xF6CAF4 VA: 0xF6CAF4
	public int[] getDamageTargetIdList() { }

	// RVA: 0xF6CC80 Offset: 0xF6CC80 VA: 0xF6CC80
	public BattleActionData.SideEffectData[] getDamageAttackSideEffectList() { }

	// RVA: 0xF6CE08 Offset: 0xF6CE08 VA: 0xF6CE08
	private void addDamageSideEffect(List<BattleActionData.SideEffectData> sideEffectList, BattleActionData.DamageData damage, List<BuffList.ACTION> actList) { }

	// RVA: 0xF6CF38 Offset: 0xF6CF38 VA: 0xF6CF38
	public int getTotalDamage() { }

	// RVA: 0xF6D0C8 Offset: 0xF6D0C8 VA: 0xF6D0C8
	public BattleActionData.DamageData[] GetDamageArrayDistinctIndex(int funcIndex = -1) { }

	// RVA: 0xF6D26C Offset: 0xF6D26C VA: 0xF6D26C
	public void setBuffData(BattleActionData.BuffData data, DataVals vals) { }

	// RVA: 0xF6D2F0 Offset: 0xF6D2F0 VA: 0xF6D2F0
	private void AddBuffList(BattleActionData.BuffData data) { }

	// RVA: 0xF6C5CC Offset: 0xF6C5CC VA: 0xF6C5CC
	public BattleActionData.BuffData[] getBuffList(int funcIndex = -1) { }

	// RVA: 0xF6D39C Offset: 0xF6D39C VA: 0xF6D39C
	public void ResetAllCheckDead() { }

	// RVA: 0xF6D4B4 Offset: 0xF6D4B4 VA: 0xF6D4B4
	public BattleActionData.HealData setHealData(int targetId, int healPoint, int funcIndex, int bufId, DataVals vals, bool isCommandAfter = False) { }

	// RVA: 0xF6D620 Offset: 0xF6D620 VA: 0xF6D620
	private void AddHealList(BattleActionData.HealData data) { }

	// RVA: 0xF6D5C8 Offset: 0xF6D5C8 VA: 0xF6D5C8
	public void setHealData(BattleActionData.HealData data, DataVals vals) { }

	// RVA: 0xF6C700 Offset: 0xF6C700 VA: 0xF6C700
	public BattleActionData.HealData[] getHealList(int funcIndex) { }

	// RVA: 0xF6D6CC Offset: 0xF6D6CC VA: 0xF6D6CC
	public void setReplaceMember(int index, int inUniqueId, int outUniqueId, int funcIndex) { }

	// RVA: 0xF6D798 Offset: 0xF6D798 VA: 0xF6D798
	public void setReplaceMember(BattleActionData.ReplaceMember data) { }

	// RVA: 0xF6D834 Offset: 0xF6D834 VA: 0xF6D834
	public BattleActionData.ReplaceMember[] getReplaceMember(int funcIndex) { }

	// RVA: 0xF6D968 Offset: 0xF6D968 VA: 0xF6D968
	public void AddNewMoveToSubMember(int index, int uniqueId, int funcIndex, bool isSucceeded) { }

	// RVA: 0xF6DA20 Offset: 0xF6DA20 VA: 0xF6DA20
	private void InitMoveToSubMemberList() { }

	// RVA: 0xF6DA90 Offset: 0xF6DA90 VA: 0xF6DA90
	public void AddTransformServant(int index, int uniqueId, int funcIndex, int overwriteLimitCount) { }

	// RVA: 0xF6DBB8 Offset: 0xF6DBB8 VA: 0xF6DBB8
	public List<BattleActionData.TransformServant> GetTransformServantList() { }

	// RVA: 0xF6DB48 Offset: 0xF6DB48 VA: 0xF6DB48
	private void TryInitTransformServant() { }

	// RVA: 0xF6DBDC Offset: 0xF6DBDC VA: 0xF6DBDC
	public void setSummonServant(int uniqueId, int unloadUniqueId, int funcIndex, bool isEffect, int callSvtEffectId) { }

	// RVA: 0xF6DCC8 Offset: 0xF6DCC8 VA: 0xF6DCC8
	public BattleActionData.SummonServant[] getSummonServant(int funcIndex) { }

	// RVA: 0xF6DDE4 Offset: 0xF6DDE4 VA: 0xF6DDE4
	public bool checkSummonServantList() { }

	// RVA: 0xF6DE44 Offset: 0xF6DE44 VA: 0xF6DE44
	public void setShiftServant(BattleActionData.ShiftServant data) { }

	// RVA: 0xF6DEE0 Offset: 0xF6DEE0 VA: 0xF6DEE0
	public BattleActionData.ShiftServant getShiftServant() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC148 Offset: 0xCCC148 VA: 0xCCC148
	// RVA: 0xF6DF70 Offset: 0xF6DF70 VA: 0xF6DF70
	private void set_ShiftGauge(BattleActionData.BaseShiftGaugeData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC158 Offset: 0xCCC158 VA: 0xCCC158
	// RVA: 0xF6DF78 Offset: 0xF6DF78 VA: 0xF6DF78
	public BattleActionData.BaseShiftGaugeData get_ShiftGauge() { }

	// RVA: 0xF6DF80 Offset: 0xF6DF80 VA: 0xF6DF80
	public void SetShiftGauge(BattleActionData.BaseShiftGaugeData shiftGauge) { }

	// RVA: 0xF6DF88 Offset: 0xF6DF88 VA: 0xF6DF88
	public bool IsUpdateShiftHp() { }

	// RVA: 0xF6DF98 Offset: 0xF6DF98 VA: 0xF6DF98
	public int get_NotShiftUpdateFlag() { }

	// RVA: 0xF6DFAC Offset: 0xF6DFAC VA: 0xF6DFAC
	public void setChangeBg(int inbgNo, int inTp) { }

	// RVA: 0xF6E090 Offset: 0xF6E090 VA: 0xF6E090
	public BattleActionData.ChangeBg getChangeBg() { }

	// RVA: 0xF6E120 Offset: 0xF6E120 VA: 0xF6E120
	public void SetGimmickData(int[] indexArray, string[] startArray, object[] resultArray, int[] types) { }

	// RVA: 0xF6E1EC Offset: 0xF6E1EC VA: 0xF6E1EC
	public bool IsGimmick() { }

	// RVA: 0xF6E1FC Offset: 0xF6E1FC VA: 0xF6E1FC
	public void setTypeTA() { }

	// RVA: 0xF6E26C Offset: 0xF6E26C VA: 0xF6E26C
	public bool isTypeTA() { }

	// RVA: 0xF6E2E4 Offset: 0xF6E2E4 VA: 0xF6E2E4
	public void setTypeOrderArts() { }

	// RVA: 0xF6E354 Offset: 0xF6E354 VA: 0xF6E354
	public void setTypeOrderBuster() { }

	// RVA: 0xF6E3C4 Offset: 0xF6E3C4 VA: 0xF6E3C4
	public void setTypeOrderQuick() { }

	// RVA: 0xF6E434 Offset: 0xF6E434 VA: 0xF6E434
	public bool isTypeOrderArts() { }

	// RVA: 0xF6E4AC Offset: 0xF6E4AC VA: 0xF6E4AC
	public bool isTypeOrderBuster() { }

	// RVA: 0xF6E524 Offset: 0xF6E524 VA: 0xF6E524
	public bool isTypeOrderQuick() { }

	// RVA: 0xF6E59C Offset: 0xF6E59C VA: 0xF6E59C
	public void SetTypeEnemyCutIn(AiFieldEntity.EffectType effectType) { }

	// RVA: 0xF6E664 Offset: 0xF6E664 VA: 0xF6E664
	public bool isSkillCutIn() { }

	// RVA: 0xF6E6B4 Offset: 0xF6E6B4 VA: 0xF6E6B4
	public int getSkillCutInId() { }

	// RVA: 0xF6E6CC Offset: 0xF6E6CC VA: 0xF6E6CC
	public string[] getSkillCutInVoices() { }

	// RVA: 0xF6E6E0 Offset: 0xF6E6E0 VA: 0xF6E6E0
	public string[] getSkillCutInPrefabInfo() { }

	// RVA: 0xF6E6F4 Offset: 0xF6E6F4 VA: 0xF6E6F4
	public Vector3[] getSkillCutInPrefabOffsets() { }

	// RVA: 0xF6E708 Offset: 0xF6E708 VA: 0xF6E708
	public Vector3[] getSkillCutInPrefabSizes() { }

	// RVA: 0xF6E71C Offset: 0xF6E71C VA: 0xF6E71C
	public bool getSkillCutInCamPlayerAll() { }

	// RVA: 0xF6E730 Offset: 0xF6E730 VA: 0xF6E730
	public bool getSkillCutInCamField() { }

	// RVA: 0xF6E744 Offset: 0xF6E744 VA: 0xF6E744
	public int getSkillCutInMessageMode() { }

	// RVA: 0xF6E758 Offset: 0xF6E758 VA: 0xF6E758
	public bool isTypeMasterCommandSpell() { }

	// RVA: 0xF6E7D0 Offset: 0xF6E7D0 VA: 0xF6E7D0
	public bool isTypeEnemyCutIn() { }

	// RVA: 0xF6E848 Offset: 0xF6E848 VA: 0xF6E848
	public bool isTypeEnemySpellCutIn() { }

	// RVA: 0xF6E8C0 Offset: 0xF6E8C0 VA: 0xF6E8C0
	public string toCutinName() { }

	// RVA: 0xF6EA38 Offset: 0xF6EA38 VA: 0xF6EA38
	public int GetTarget(int funcIdx = -1) { }

	// RVA: 0xF6EA40 Offset: 0xF6EA40 VA: 0xF6EA40
	public int[] GetDamageTargets(int funcIdx = -1) { }

	// RVA: 0xF6EBF4 Offset: 0xF6EBF4 VA: 0xF6EBF4
	public int[] GetBuffTargets(int funcIdx = -1) { }

	// RVA: 0xF6EC40 Offset: 0xF6EC40 VA: 0xF6EC40
	public int[] GetDebuffTargets(int funcIdx = -1) { }

	// RVA: 0xF6EC8C Offset: 0xF6EC8C VA: 0xF6EC8C
	public void setEffect(int[] effectList) { }

	// RVA: 0xF6EC94 Offset: 0xF6EC94 VA: 0xF6EC94
	public int getEffect(int index) { }

	// RVA: 0xF6ECEC Offset: 0xF6ECEC VA: 0xF6ECEC
	public void addCriticalStar(int num) { }

	// RVA: -1 Offset: -1
	private void addBattleData<T>(List<T> addDataList, ref List<T> dataList) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5F264 Offset: 0x1C5F264 VA: 0x1C5F264
	|-BattleActionData.addBattleData<BattleActionData.BuffData>
	|-BattleActionData.addBattleData<BattleActionData.ChangeBg>
	|-BattleActionData.addBattleData<BattleActionData.HealData>
	|-BattleActionData.addBattleData<BattleActionData.MoveToSubMember>
	|-BattleActionData.addBattleData<BattleActionData.ReplaceMember>
	|-BattleActionData.addBattleData<BattleActionData.ShiftServant>
	|-BattleActionData.addBattleData<BattleActionData.SummonServant>
	|-BattleActionData.addBattleData<BattleActionData.TransformServant>
	|-BattleActionData.addBattleData<object>
	*/

	// RVA: 0xF6ECFC Offset: 0xF6ECFC VA: 0xF6ECFC
	public void addAction(BattleActionData addData) { }

	// RVA: 0xF6EF64 Offset: 0xF6EF64 VA: 0xF6EF64
	public int[] getInfluenceIds() { }

	// RVA: 0xF6F134 Offset: 0xF6F134 VA: 0xF6F134
	public int[] getTargetIds() { }

	// RVA: 0xF6F2D0 Offset: 0xF6F2D0 VA: 0xF6F2D0
	public int[] getListFunctionIndex() { }

	// RVA: 0xF6F608 Offset: 0xF6F608 VA: 0xF6F608
	public int[] getListFunctionIndexEx(out int displayFuncNum) { }

	// RVA: 0xF6FB3C Offset: 0xF6FB3C VA: 0xF6FB3C
	public int[] GetFunctionIndexArrayNearByCuriousFunc(CuriousFuncEffectTiming effectTiming, int[] resultOnGetFailed) { }

	// RVA: 0xF6FCD8 Offset: 0xF6FCD8 VA: 0xF6FCD8
	public int GetOptionalBattleEffectId(int effectIndex, int resultOnGetFailed = 0) { }

	// RVA: 0xF6FD8C Offset: 0xF6FD8C VA: 0xF6FD8C
	public bool IsOptionalBattleEffectIdAvaliable() { }

	// RVA: 0xF6FD48 Offset: 0xF6FD48 VA: 0xF6FD48
	private List<int> GetOptionalBattleEffectIdList(List<int> resultOnGetFailed) { }

	// RVA: 0xF6FDAC Offset: 0xF6FDAC VA: 0xF6FDAC
	public bool IsIgnoreWhiteFadeOnSkillMotion() { }

	// RVA: 0xF6FDDC Offset: 0xF6FDDC VA: 0xF6FDDC
	public int GetMaxSideEffectCountByTarget(bool isAtkFirst, bool isAtkLast) { }

	// RVA: 0xF6FFCC Offset: 0xF6FFCC VA: 0xF6FFCC
	public void SetSideEffectCountByTarget(ref Dictionary<int, int> dicTarget, bool isAtkFirst, bool isAtkLast) { }

	// RVA: 0xF70218 Offset: 0xF70218 VA: 0xF70218
	public int getCountActionForPerformance() { }

	// RVA: 0xF702C8 Offset: 0xF702C8 VA: 0xF702C8
	public void addSideEffectActionData(BattleActionData sideEffectActionData, BattleActionData.ACTTYPE actType) { }

	// RVA: 0xF7034C Offset: 0xF7034C VA: 0xF7034C
	public BattleActionData[] getSideEffectList(BattleActionData.ACTTYPE actType) { }

	// RVA: 0xF7043C Offset: 0xF7043C VA: 0xF7043C
	public BattleActionData MakeSideEffectActionData(BattleActionData.ACTTYPE type) { }

	// RVA: 0xF704E8 Offset: 0xF704E8 VA: 0xF704E8
	public void AddSideEffectAfterAction(BattlePerformance perf) { }

	// RVA: 0xF706D0 Offset: 0xF706D0 VA: 0xF706D0
	public bool get_NoOperation() { }

