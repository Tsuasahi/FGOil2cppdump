	public QuestEntity.ConsumeType GetConsumeType() { }

	// RVA: 0x17385AC Offset: 0x17385AC VA: 0x17385AC
	public int getActConsume(int cost_calc_val = 0) { }

	// RVA: 0x1738618 Offset: 0x1738618 VA: 0x1738618
	public int getSpotId() { }

	// RVA: 0x17386DC Offset: 0x17386DC VA: 0x17386DC
	public int getSpotId(int phase) { }

	// RVA: 0x1738870 Offset: 0x1738870 VA: 0x1738870
	public int getPriority() { }

	// RVA: 0x1738878 Offset: 0x1738878 VA: 0x1738878
	public int getCharaIconId() { }

	// RVA: 0x1738880 Offset: 0x1738880 VA: 0x1738880
	public int getServantId() { }

	// RVA: 0x17388A0 Offset: 0x17388A0 VA: 0x17388A0
	public int getLimitCount() { }

	// RVA: 0x17388C8 Offset: 0x17388C8 VA: 0x17388C8
	public int getGiftIconId() { }

	// RVA: 0x17388D0 Offset: 0x17388D0 VA: 0x17388D0
	public int getForceOperation() { }

	// RVA: 0x17388D8 Offset: 0x17388D8 VA: 0x17388D8
	public int getAfterClear() { }

	// RVA: 0x17388E0 Offset: 0x17388E0 VA: 0x17388E0
	public int getDisplayHours() { }

	// RVA: 0x173898C Offset: 0x173898C VA: 0x173898C
	public int getIntervalHours() { }

	// RVA: 0x1738A38 Offset: 0x1738A38 VA: 0x1738A38
	public int getChapterId() { }

	// RVA: 0x1738A40 Offset: 0x1738A40 VA: 0x1738A40
	public string getChapterSubStr(int warId = 0) { }

	// RVA: 0x1738D4C Offset: 0x1738D4C VA: 0x1738D4C
	public int GetChapterUnitId(int warId) { }

	// RVA: 0x1738EC8 Offset: 0x1738EC8 VA: 0x1738EC8
	public string GetChapterSubTitle(int warId) { }

	// RVA: 0x1738FEC Offset: 0x1738FEC VA: 0x1738FEC
	public string getRecommendLv() { }

	// RVA: 0x1738FF4 Offset: 0x1738FF4 VA: 0x1738FF4
	public string getRecommendLv(int phaseCnt) { }

	// RVA: 0x1739090 Offset: 0x1739090 VA: 0x1739090
	public long getNoticeAt() { }

	// RVA: 0x1739098 Offset: 0x1739098 VA: 0x1739098
	public long getOpenedAt() { }

	// RVA: 0x1739144 Offset: 0x1739144 VA: 0x1739144
	public long getClosedAt() { }

	// RVA: 0x17391F0 Offset: 0x17391F0 VA: 0x17391F0
	public bool IsOpenByTime(bool is_itvl = False) { }

	// RVA: 0x1739330 Offset: 0x1739330 VA: 0x1739330
	public long GetEndTime(bool is_itvl = False) { }

	// RVA: 0x1739210 Offset: 0x1739210 VA: 0x1739210
	public long GetRestTime(bool is_itvl = False) { }

	// RVA: 0x1738E7C Offset: 0x1738E7C VA: 0x1738E7C
	public bool HasFlag(QuestEntity.Flag flag) { }

	// RVA: 0x17393CC Offset: 0x17393CC VA: 0x17393CC
	public bool HasFlag(QuestEntity.Flag flag, int phaseCnt) { }

	// RVA: 0x173941C Offset: 0x173941C VA: 0x173941C
	public QuestConsumeItemEntity getItemConsumeEntity() { }

	// RVA: 0x1739518 Offset: 0x1739518 VA: 0x1739518
	public int GetWarId() { }

	// RVA: 0x17396F8 Offset: 0x17396F8 VA: 0x17396F8
	public string GetBgmName(int warId) { }

	// RVA: 0x1739914 Offset: 0x1739914 VA: 0x1739914
	public bool IsNeedUseEventQuestSupport() { }

	// RVA: 0x1739B14 Offset: 0x1739B14 VA: 0x1739B14
	public int GetCampaignCostCalcValue(int questId, int phase, bool isQuestNoneCleared, ref int fixedVal) { }

	// RVA: 0x1739E64 Offset: 0x1739E64 VA: 0x1739E64
	public static string GetCostValueColor(int costCalcVal, bool isOverCost) { }
}

// Namespace: 
public enum QuestEntity.enType // TypeDefIndex: 7121
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.enType MAIN = 1;
	public const QuestEntity.enType FREE = 2;
	public const QuestEntity.enType FRIENDSHIP = 3;
	public const QuestEntity.enType EVENT = 5;
	public const QuestEntity.enType HEROBALLAD = 6;
	public const QuestEntity.enType WAR_BOARD = 7;
}

// Namespace: 
public enum QuestEntity.TypeFlag // TypeDefIndex: 7122
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.TypeFlag NONE = 0;
	public const QuestEntity.TypeFlag MAIN = 2;
	public const QuestEntity.TypeFlag FREE = 4;
	public const QuestEntity.TypeFlag FRIENDSHIP = 8;
	public const QuestEntity.TypeFlag EVENT = 32;
	public const QuestEntity.TypeFlag HEROBALLAD = 64;
	public const QuestEntity.TypeFlag WAR_BOARD = 128;
	public const QuestEntity.TypeFlag ALL = 238;
}

// Namespace: 
public enum QuestEntity.enForceOperation // TypeDefIndex: 7123
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.enForceOperation NONE = 0;
	public const QuestEntity.enForceOperation FORCE_OPEN = 1;
	public const QuestEntity.enForceOperation FORCE_CLOSE = 2;
}

// Namespace: 
public enum QuestEntity.enAfterClear // TypeDefIndex: 7124
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.enAfterClear CLOSE = 1;
	public const QuestEntity.enAfterClear REPEAT_FIRST = 2;
	public const QuestEntity.enAfterClear REPEAT_LAST = 3;
	public const QuestEntity.enAfterClear RESET_INTERVAL = 4;
}

// Namespace: 
public enum QuestEntity.Flag // TypeDefIndex: 7125
{
	// Fields
	public long value__; // 0x0
	public const QuestEntity.Flag NONE = 1;
	public const QuestEntity.Flag NO_BATTLE = 2;
	public const QuestEntity.Flag RAID = 4;
	public const QuestEntity.Flag RAID_CONNECTION = 8;
	public const QuestEntity.Flag NO_CONTINUE = 16;
	public const QuestEntity.Flag NO_DISPLAY_REMAIN = 32;
	public const QuestEntity.Flag RAID_LAST_DAY = 64;
	public const QuestEntity.Flag CLOSED_HIDE_COST_ITEM = 128;
	public const QuestEntity.Flag CLOSED_HIDE_COST_NUM = 256;
	public const QuestEntity.Flag CLOSED_HIDE_PROGRESS = 512;
	public const QuestEntity.Flag CLOSED_HIDE_RECOMMEND_LV = 1024;
	public const QuestEntity.Flag CLOSED_HIDE_TREND_CLASS = 2048;
	public const QuestEntity.Flag CLOSED_HIDE_REWARD = 4096;
	public const QuestEntity.Flag NO_DISPLAY_CONSUME = 8192;
	public const QuestEntity.Flag SUPER_BOSS = 16384;
	public const QuestEntity.Flag NO_DISPLAY_MISSION_NOTIFY = 32768;
	public const QuestEntity.Flag HIDE_PROGRESS = 65536;
	public const QuestEntity.Flag DROP_FIRST_TIME_ONLY = 131072;
	public const QuestEntity.Flag CHAPTER_SUB_ID_JAPANESE_NUMERALS = 262144;
	public const QuestEntity.Flag SUPPORT_ONLY_FORCE_BATTLE = 524288;
	public const QuestEntity.Flag EVENT_DECK_NO_SUPPORT = 1048576;
	public const QuestEntity.Flag FATIGUE_BATTLE = 2097152;
	public const QuestEntity.Flag SUPPORT_SELECT_AFTER_SCRIPT = 4194304;
	public const QuestEntity.Flag BRANCH = 8388608;
	public const QuestEntity.Flag USER_EVENT_DECK = 16777216;
	public const QuestEntity.Flag NO_DISPLAY_RAID_REMAIN = 33554432;
	public const QuestEntity.Flag QUEST_MAX_DAMAGE_RECORD = 67108864;
	public const QuestEntity.Flag ENABLE_FOLLOW_QUEST = 134217728;
	public const QuestEntity.Flag SUPPORT_SVT_MULTIPLE_SET = 268435456;
	public const QuestEntity.Flag SUPPORT_ONLY_BATTLE = 536870912;
	public const QuestEntity.Flag ACT_CONSUME_BATTLE_WIN = 1073741824;
	public const QuestEntity.Flag VOTE = 2147483648;
	public const QuestEntity.Flag HIDE_MASTER = 4294967296;
	public const QuestEntity.Flag DISABLE_MASTER_SKILL = 8589934592;
	public const QuestEntity.Flag DISABLE_COMMAND_SPEEL = 17179869184;
	public const QuestEntity.Flag SUPPORT_SVT_EDITABLE_POSITION = 34359738368;
	public const QuestEntity.Flag BRANCH_SCENARIO = 68719476736;
	public const QuestEntity.Flag QUEST_KNOCKDOWN_RECORD = 137438953472;
	public const QuestEntity.Flag NOT_RETRIEVABLE = 274877906944;
	public const QuestEntity.Flag DISPLAY_LOOPMARK = 549755813888;
	public const QuestEntity.Flag BOOST_ITEM_CONSUME_BATTLE_WIN = 1099511627776;
	public const QuestEntity.Flag PLAY_SCENARIO_WITH_MAPSCREEN = 2199023255552;
	public const QuestEntity.Flag BATTLE_RETREAT_QUEST_CLEAR = 4398046511104;
	public const QuestEntity.Flag BATTLE_RESULT_LOSE_QUEST_CLEAR = 8796093022208;
	public const QuestEntity.Flag BRANCH_HAVING = 35184372088832;
	public const QuestEntity.Flag NO_DISPLAY_NEXT_ICON = 70368744177664;
	public const QuestEntity.Flag WINDOW_ONLY = 140737488355328;
	public const QuestEntity.Flag CHANGE_MASTERS = 281474976710656;
	public const QuestEntity.Flag NOT_DISPLAY_RESULT_GET_POINT = 562949953421312;
	public const QuestEntity.Flag FORCE_TO_NO_DROP = 1125899906842624;
	public const QuestEntity.Flag DISPLAY_CONSUME_ICON = 2251799813685248;
	public const QuestEntity.Flag HARVEST = 4503599627370496;
	public const QuestEntity.Flag RECONSTRUCTION = 9007199254740992;
	public const QuestEntity.Flag ENEMY_IMMEDIATE_APPEAR = 18014398509481984;
	public const QuestEntity.Flag NO_SUPPORT_LIST = 36028797018963968;
	public const QuestEntity.Flag LIVE = 72057594037927936;
}

// Namespace: 
public enum QuestEntity.ConsumeType // TypeDefIndex: 7126
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.ConsumeType NONE = 0;
	public const QuestEntity.ConsumeType AP = 1;
	public const QuestEntity.ConsumeType RP = 2;
	public const QuestEntity.ConsumeType ITEM = 3;
	public const QuestEntity.ConsumeType AP_AND_ITEM = 4;
}

// Namespace: 
public class QuestGroupEntity : DataEntityBase<string> // TypeDefIndex: 7127
{
	// Fields
	public int questId; // 0x10
	public int type; // 0x14
	public int groupId; // 0x18

	// Methods

	// RVA: 0x1739F40 Offset: 0x1739F40 VA: 0x1739F40
	public void .ctor() { }

	// RVA: 0x1739F90 Offset: 0x1739F90 VA: 0x1739F90 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1739FA4 Offset: 0x1739FA4 VA: 0x1739FA4
	public static string CreatePK(int questId, int type, int groupId) { }
}

// Namespace: 
public class QuestGroupMaster : DataMasterBase<QuestGroupMaster, QuestGroupEntity, string> // TypeDefIndex: 7128
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1AB8 Offset: 0xCC1AB8 VA: 0xCC1AB8
	private static Comparison<QuestGroupEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1739FB8 Offset: 0x1739FB8 VA: 0x1739FB8
	public void .ctor() { }

	// RVA: 0x173A00C Offset: 0x173A00C VA: 0x173A00C
	public QuestGroupEntity GetEntity(int questId, int type, int groupId) { }

	// RVA: 0x173A090 Offset: 0x173A090 VA: 0x173A090
	public bool TryGetEntity(out QuestGroupEntity entity, int questId, int type, int groupId) { }

	// RVA: 0x173A11C Offset: 0x173A11C VA: 0x173A11C
	public int GetGroupId(int questId, QuestGroupType.Type type) { }

	// RVA: 0x173A240 Offset: 0x173A240 VA: 0x173A240
	public Dictionary<int, int> GetQuestIdToGroupIdDict(List<int> questIdList, QuestGroupType.Type type) { }

	// RVA: 0x1739B0C Offset: 0x1739B0C VA: 0x1739B0C
	public int GetEventId(int questId) { }

	// RVA: 0x173A67C Offset: 0x173A67C VA: 0x173A67C
	public int[] GetQuestIdListByGroupId(int groupId, QuestGroupType.Type type) { }

	// RVA: 0x173A6F8 Offset: 0x173A6F8 VA: 0x173A6F8
	public List<int> GetListOfQuestIdByGroupId(int groupId, QuestGroupType.Type type) { }

	// RVA: 0x173A868 Offset: 0x173A868 VA: 0x173A868
	public List<QuestGroupEntity> GetEntityListByGroupId(int groupId, QuestGroupType.Type type) { }

	// RVA: 0x173A9D8 Offset: 0x173A9D8 VA: 0x173A9D8
	public int[] GetQuestIdListByEventId(int eventId) { }

	// RVA: 0x173A9E0 Offset: 0x173A9E0 VA: 0x173A9E0
	public List<int> GetClearedGroupOpenQuestListByEventId(int eventId) { }

	// RVA: 0x173AF14 Offset: 0x173AF14 VA: 0x173AF14
	public bool IsEntryEvent(int eventId) { }

	// RVA: 0x173B0E8 Offset: 0x173B0E8 VA: 0x173B0E8
	public int GetEventTowerQuestId(int eventId, int tower, int floor) { }

	// RVA: 0x173B30C Offset: 0x173B30C VA: 0x173B30C
	public List<int> GetQuestIdListByGroupType(QuestGroupType.Type type) { }

	// RVA: 0x173B4C0 Offset: 0x173B4C0 VA: 0x173B4C0
	public List<int> GetInterludeQuestIdList(int questId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37C8C Offset: 0xD37C8C VA: 0xD37C8C
	// RVA: 0x173B710 Offset: 0x173B710 VA: 0x173B710
	private static int <GetClearedGroupOpenQuestListByEventId>m__0(QuestGroupEntity x, QuestGroupEntity y) { }
}

// Namespace: 
public class QuestMaster : DataMasterBase<QuestMaster, QuestEntity, int> // TypeDefIndex: 7129
{
	// Methods

	// RVA: 0x1743780 Offset: 0x1743780 VA: 0x1743780
	public void .ctor() { }

	// RVA: 0x17437D4 Offset: 0x17437D4 VA: 0x17437D4
	public int getScriptQuestId(int questId) { }

	// RVA: 0x1743850 Offset: 0x1743850 VA: 0x1743850
	public List<int> GetQuestIdListWithScriptId(int scriptId) { }

	// RVA: 0x17439B8 Offset: 0x17439B8 VA: 0x17439B8
	public QuestEntity getQuestEntity(int questId) { }

	// RVA: 0x1743A18 Offset: 0x1743A18 VA: 0x1743A18
	public QuestEntity GetQuestEntitybyIdx(int idx) { }

	// RVA: 0x1743B0C Offset: 0x1743B0C VA: 0x1743B0C
	public int Count() { }

	// RVA: 0x1743B6C Offset: 0x1743B6C VA: 0x1743B6C
	public bool CheckBpEnabled(List<int> questIds) { }

	// RVA: 0x1743E38 Offset: 0x1743E38 VA: 0x1743E38
	public QuestEntity[] GetQuestEntityList(int[] questList) { }

	// RVA: 0x1743FBC Offset: 0x1743FBC VA: 0x1743FBC
	public static int GetWarIdByQuestId(int questId) { }

	// RVA: 0x1744044 Offset: 0x1744044 VA: 0x1744044
	public int GetWarIdFromQuestId(int questId) { }

	// RVA: 0x1744114 Offset: 0x1744114 VA: 0x1744114
	public static bool IsQuestPhaseWithNoBattle(int questId, int questPhase) { }

	// RVA: 0x17441AC Offset: 0x17441AC VA: 0x17441AC
	public bool CheckQuestPhaseWithNoBattle(int questId, int questPhase) { }

	// RVA: 0x17442AC Offset: 0x17442AC VA: 0x17442AC
	public static int GetSpotId(int questId) { }

	// RVA: 0x1744354 Offset: 0x1744354 VA: 0x1744354
	public static QuestEntity.TypeFlag GetQuestType(int questId) { }

	// RVA: 0x1744400 Offset: 0x1744400 VA: 0x1744400
	public static bool HasFlag(int questId, QuestEntity.Flag flag) { }
}

// Namespace: 
public class QuestMessageEntity : DataEntityBase<string> // TypeDefIndex: 7130
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public int idx; // 0x18
	public string message; // 0x20
	public int condType; // 0x28
	public int targetId; // 0x2C
	public int targetNum; // 0x30
	public int frequencyType; // 0x34
	public int displayType; // 0x38

	// Methods

	// RVA: 0x17444D8 Offset: 0x17444D8 VA: 0x17444D8
	public void .ctor() { }

	// RVA: 0x1744528 Offset: 0x1744528 VA: 0x1744528 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x174453C Offset: 0x174453C VA: 0x174453C
	public static string CreatePK(int questId, int phase, int idx) { }

	// RVA: 0x1744550 Offset: 0x1744550 VA: 0x1744550
	public bool CheckValid() { }
}

// Namespace: 
public enum QuestMessageEntity.QuestMessageDisplayType // TypeDefIndex: 7131
{
	// Fields
	public int value__; // 0x0
	public const QuestMessageEntity.QuestMessageDisplayType NONE = 0;
	public const QuestMessageEntity.QuestMessageDisplayType DIALOG = 1;
	public const QuestMessageEntity.QuestMessageDisplayType WINDOW_BEFORE = 2;
	public const QuestMessageEntity.QuestMessageDisplayType WINDOW_AFTER = 3;
	public const QuestMessageEntity.QuestMessageDisplayType MOVIE_DIALOG = 4;
	public const QuestMessageEntity.QuestMessageDisplayType MOVIE_DELETE_DIALOG = 5;
	public const QuestMessageEntity.QuestMessageDisplayType SCRIPT_BEFORE = 6;
}

// Namespace: 
public class QuestMessageMaster : DataMasterBase<QuestMessageMaster, QuestMessageEntity, string> // TypeDefIndex: 7132
{
	// Methods

	// RVA: 0x17445D0 Offset: 0x17445D0 VA: 0x17445D0
	public void .ctor() { }

	// RVA: 0x1744624 Offset: 0x1744624 VA: 0x1744624
	public QuestMessageEntity GetEntity(int questId, int phase, int idx) { }

	// RVA: 0x17446A8 Offset: 0x17446A8 VA: 0x17446A8
	public bool TryGetEntity(out QuestMessageEntity entity, int questId, int phase, int idx) { }

	// RVA: 0x1744734 Offset: 0x1744734 VA: 0x1744734
	public string GetValidMessage(int questId, int phase, QuestMessageEntity.QuestMessageDisplayType messageType) { }

	// RVA: 0x1744808 Offset: 0x1744808 VA: 0x1744808
	public List<QuestMessageEntity> GetValidMessageList(int questId, int phase, QuestMessageEntity.QuestMessageDisplayType messageType) { }
}

// Namespace: 
public enum QuestMessageMaster.FrequencyType // TypeDefIndex: 7133
{
	// Fields
	public int value__; // 0x0
	public const QuestMessageMaster.FrequencyType NONE = 0;
	public const QuestMessageMaster.FrequencyType ONCE = 1;
}

// Namespace: 
public class QuestPhaseDetailAddEntity : DataEntityBase<string> // TypeDefIndex: 7134
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public int priority; // 0x18
	public int commonReleaseId; // 0x1C
	public string[] beforeActionVals; // 0x20
	public string[] afterActionVals; // 0x28

	// Methods

	// RVA: 0x1744AF4 Offset: 0x1744AF4 VA: 0x1744AF4
	public void .ctor() { }

	// RVA: 0x1744B44 Offset: 0x1744B44 VA: 0x1744B44 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1744B58 Offset: 0x1744B58 VA: 0x1744B58
	public static string CreatePK(int questId, int phase, int priority) { }
}

// Namespace: 
public enum QuestPhaseDetailAddEntity.OverwriteType // TypeDefIndex: 7135
{
	// Fields
	public int value__; // 0x0
	public const QuestPhaseDetailAddEntity.OverwriteType AFTER_ACITON = 1;
	public const QuestPhaseDetailAddEntity.OverwriteType BEFORE_ACITON = 2;
}

// Namespace: 
public class QuestPhaseDetailAddMaster : DataMasterBase<QuestPhaseDetailAddMaster, QuestPhaseDetailAddEntity, string> // TypeDefIndex: 7136
{
	// Methods

	// RVA: 0x1744B6C Offset: 0x1744B6C VA: 0x1744B6C
	public void .ctor() { }

	// RVA: 0x1744BC0 Offset: 0x1744BC0 VA: 0x1744BC0
	public QuestPhaseDetailAddEntity GetEntity(int questId, int phase, int priority) { }

	// RVA: 0x1744C44 Offset: 0x1744C44 VA: 0x1744C44
	public bool TryGetEntity(out QuestPhaseDetailAddEntity entity, int questId, int phase, int priority) { }

	// RVA: 0x1744CD0 Offset: 0x1744CD0 VA: 0x1744CD0
	public QuestPhaseDetailAddEntity getOverwriteQuestPhaseDetailAddEntity(int questId, int phase, QuestPhaseDetailAddEntity.OverwriteType overwriteType) { }

	// RVA: 0x1744EE4 Offset: 0x1744EE4 VA: 0x1744EE4
	public string[] GetAfterAction(int questId, int phaseCnt) { }

	// RVA: 0x1744F20 Offset: 0x1744F20 VA: 0x1744F20
	public string[] GetBeforeAction(int questId, int phaseCnt) { }
}

// Namespace: 
public class QuestPhaseDetailEntity : DataEntityBase<string> // TypeDefIndex: 7137
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public int spotId; // 0x18
	public int consumeType; // 0x1C
	public int actConsume; // 0x20
	public QuestPhaseDetailEntity.BoardList boardMessage; // 0x28
	public long flag; // 0x30
	public string[] beforeActionVals; // 0x38
	public string[] afterActionVals; // 0x40
	public string recommendLv; // 0x48

	// Methods

	// RVA: 0x1744F5C Offset: 0x1744F5C VA: 0x1744F5C
	public void .ctor() { }

	// RVA: 0x1744FAC Offset: 0x1744FAC VA: 0x1744FAC Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1744FBC Offset: 0x1744FBC VA: 0x1744FBC
	public static string CreatePK(int questId, int phase) { }

	// RVA: 0x17393BC Offset: 0x17393BC VA: 0x17393BC
	public bool HasFlag(QuestEntity.Flag flag) { }
}

// Namespace: 
public class QuestPhaseDetailEntity.BoardList // TypeDefIndex: 7138
{
	// Fields
	public QuestPhaseDetailEntity.BoardInfo.ImageInfo image; // 0x10
	public QuestPhaseDetailEntity.BoardInfo.TextInfo text; // 0x18
	public QuestPhaseDetailEntity.BoardInfo[] list; // 0x20

	// Methods

	// RVA: 0x1744FE4 Offset: 0x1744FE4 VA: 0x1744FE4
	public void .ctor() { }

	// RVA: 0x1744FEC Offset: 0x1744FEC VA: 0x1744FEC
	public bool SetText(UILabel label) { }

	// RVA: 0x17450C0 Offset: 0x17450C0 VA: 0x17450C0
	public bool SetImage(UISprite sprite) { }
}

// Namespace: 
public class QuestPhaseDetailEntity.BoardInfo // TypeDefIndex: 7139
{
	// Fields
	public QuestPhaseDetailEntity.BoardInfo.TextInfo text; // 0x10
	public QuestPhaseDetailEntity.BoardInfo.ImageInfo image; // 0x18
	public int priority; // 0x20

	// Methods

	// RVA: 0x1744FCC Offset: 0x1744FCC VA: 0x1744FCC
	public void .ctor() { }
}

// Namespace: 
public class QuestPhaseDetailEntity.BoardInfo.TextInfo // TypeDefIndex: 7140
{
	// Fields
	public string textString; // 0x10
	public int[] offset; // 0x18
	public int fontSize; // 0x20
	public string[] gradation; // 0x28

	// Methods

	// RVA: 0x1744FDC Offset: 0x1744FDC VA: 0x1744FDC
	public void .ctor() { }

	// RVA: 0x1734C0C Offset: 0x1734C0C VA: 0x1734C0C
	public bool SetText(UILabel label) { }
}

// Namespace: 
public class QuestPhaseDetailEntity.BoardInfo.ImageInfo // TypeDefIndex: 7141
{
	// Fields
	public string bannerSp; // 0x10
	public int[] setSize; // 0x18
	public int[] offset; // 0x20
	public string imgColor; // 0x28

	// Methods

	// RVA: 0x1744FD4 Offset: 0x1744FD4 VA: 0x1744FD4
	public void .ctor() { }

	// RVA: 0x173502C Offset: 0x173502C VA: 0x173502C
	public bool SetImage(UISprite sprite) { }
}

// Namespace: 
public class QuestPhaseDetailMaster : DataMasterBase<QuestPhaseDetailMaster, QuestPhaseDetailEntity, string> // TypeDefIndex: 7142
{
	// Fields
	public const int PHASE_OFFSET = 1;

	// Methods

	// RVA: 0x1745194 Offset: 0x1745194 VA: 0x1745194
	public void .ctor() { }

	// RVA: 0x17451E8 Offset: 0x17451E8 VA: 0x17451E8
	public QuestPhaseDetailEntity GetEntity(int questId, int phase) { }

	// RVA: 0x174525C Offset: 0x174525C VA: 0x174525C
	public bool TryGetEntity(out QuestPhaseDetailEntity entity, int questId, int phase) { }

	// RVA: 0x17452E0 Offset: 0x17452E0 VA: 0x17452E0
	public QuestPhaseDetailEntity getEntityFromId(long questId, int phase) { }

	// RVA: 0x174543C Offset: 0x174543C VA: 0x174543C
	public string[] GetAfterAction(int questId, int phaseCnt) { }

	// RVA: 0x1745478 Offset: 0x1745478 VA: 0x1745478
	public string[] GetBeforeAction(int questId, int phaseCnt) { }

	// RVA: 0x17454B4 Offset: 0x17454B4 VA: 0x17454B4 Slot: 6
	public override bool preProcess() { }
}

// Namespace: 
public class QuestPhaseEntity : DataEntityBase<string> // TypeDefIndex: 7143
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public bool isNpcOnly; // 0x18
	public int battleBgId; // 0x1C
	public int battleBgType; // 0x20
	public int playerExp; // 0x24
	public int friendshipExp; // 0x28
	public int[] classIds; // 0x30
	public int[] individuality; // 0x38
	public Dictionary<string, object> script; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCC1AC8 Offset: 0xCC1AC8 VA: 0xCC1AC8
	private static Converter<object, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCC1AD8 Offset: 0xCC1AD8 VA: 0xCC1AD8
	private static Converter<object, string> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCC1AE8 Offset: 0xCC1AE8 VA: 0xCC1AE8
	private static Converter<object, int> <>f__am$cache2; // 0x10

	// Methods

	// RVA: 0x17457DC Offset: 0x17457DC VA: 0x17457DC
	public void .ctor() { }

	// RVA: 0x174582C Offset: 0x174582C VA: 0x174582C
	public void .ctor(QuestPhaseEntity cSrc) { }

	// RVA: 0x1745A74 Offset: 0x1745A74 VA: 0x1745A74 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1745A84 Offset: 0x1745A84 VA: 0x1745A84
	public static string CreatePK(int questId, int phase) { }

	// RVA: 0x1745A94 Offset: 0x1745A94 VA: 0x1745A94
	public int getQuestId() { }

	// RVA: 0x1745A9C Offset: 0x1745A9C VA: 0x1745A9C
	public int getPhase() { }

	// RVA: 0x1745AA4 Offset: 0x1745AA4 VA: 0x1745AA4
	public int getBattleBgId() { }

	// RVA: 0x1745AAC Offset: 0x1745AAC VA: 0x1745AAC
	public int getBattleBgTypeValue() { }

	// RVA: 0x1745AB4 Offset: 0x1745AB4 VA: 0x1745AB4
	public int getPlayerExp() { }

	// RVA: 0x1745ABC Offset: 0x1745ABC VA: 0x1745ABC
	public int getFriendshipExp() { }

	// RVA: 0x1745AC4 Offset: 0x1745AC4 VA: 0x1745AC4
	public long GetQuestPhaseNo() { }

	// RVA: 0x1745AD8 Offset: 0x1745AD8 VA: 0x1745AD8
	public int[] getPrioredIndividuality() { }

	// RVA: 0x1745BA8 Offset: 0x1745BA8 VA: 0x1745BA8
	public bool ScriptHasKey(string key) { }

	// RVA: 0x1745BB4 Offset: 0x1745BB4 VA: 0x1745BB4
	public int getScriptIntParam(string key, int defVal = -1) { }

	// RVA: 0x1745D0C Offset: 0x1745D0C VA: 0x1745D0C
	public int[] getScriptIntArrayParam(string key, int[] defVal) { }

	// RVA: 0x1745EF0 Offset: 0x1745EF0 VA: 0x1745EF0
	public string[] getScriptStringArrayParam(string key, string[] defVal) { }

	// RVA: 0x1745FF0 Offset: 0x1745FF0 VA: 0x1745FF0
	public object[] getScriptObjArrayParam(string key, string[] defVal) { }

	// RVA: 0x1745E18 Offset: 0x1745E18 VA: 0x1745E18
	public List<object> getScriptObjListParam(string key) { }

	// RVA: 0x1745C8C Offset: 0x1745C8C VA: 0x1745C8C
	public object getScriptObj(string key) { }

	// RVA: 0x1746070 Offset: 0x1746070 VA: 0x1746070
	public string getScriptStr(string key, string defVal) { }

	// RVA: 0x174617C Offset: 0x174617C VA: 0x174617C
	public Dictionary<string, object> GetOverwriteEquipSkills() { }

	// RVA: 0x1746258 Offset: 0x1746258 VA: 0x1746258
	public Dictionary<string, object> GetAddEquipSkills() { }

	// RVA: 0x1746334 Offset: 0x1746334 VA: 0x1746334
	public int getResultBgmId(int defVal) { }

	// RVA: 0x1746394 Offset: 0x1746394 VA: 0x1746394
	public bool isFadeOutBgmBeforeMovie() { }

	// RVA: 0x17463F4 Offset: 0x17463F4 VA: 0x17463F4
	public int getResultEffectId(int defVal) { }

	// RVA: 0x1746454 Offset: 0x1746454 VA: 0x1746454
	public int getLeave(int defVal) { }

	// RVA: 0x17464B4 Offset: 0x17464B4 VA: 0x17464B4
	public int getBattleEffectId(int defVal) { }

	// RVA: 0x1746514 Offset: 0x1746514 VA: 0x1746514
	private int getBattleFieldMotionId(int defVal) { }

	// RVA: 0x1746574 Offset: 0x1746574 VA: 0x1746574
	public int[] getBattleFieldMotionIds(int[] defVals) { }

	// RVA: 0x174664C Offset: 0x174664C VA: 0x174664C
	public int[] getEventGrounpIds() { }

	// RVA: 0x17466B4 Offset: 0x17466B4 VA: 0x17466B4
	public int[] GetSelectableQuests() { }

	// RVA: 0x1746708 Offset: 0x1746708 VA: 0x1746708
	public int GetQuestPhaseSelectRoute() { }

	// RVA: 0x17467C8 Offset: 0x17467C8 VA: 0x17467C8
	public int GetSelectedQuestId(int questId, int selectIndex) { }

	// RVA: 0x1746848 Offset: 0x1746848 VA: 0x1746848
	public int[] getResultEnemyVoiceIds() { }

	// RVA: 0x17468B0 Offset: 0x17468B0 VA: 0x17468B0
	public bool isDispLoseResult() { }

	// RVA: 0x1746910 Offset: 0x1746910 VA: 0x1746910
	public bool isNoResult() { }

	// RVA: 0x1746970 Offset: 0x1746970 VA: 0x1746970
	public bool isBreakOnBattleWin() { }

	// RVA: 0x17469D0 Offset: 0x17469D0 VA: 0x17469D0
	public bool isBreakOnBattleWinFadeColorBlack() { }

	// RVA: 0x1746A30 Offset: 0x1746A30 VA: 0x1746A30
	public int getBreakOnBattleWinWaitMSec() { }

	// RVA: 0x1746A84 Offset: 0x1746A84 VA: 0x1746A84
	public string GetBattleFinishMovie() { }

	// RVA: 0x1746AD8 Offset: 0x1746AD8 VA: 0x1746AD8
	public string[] GetWaveStartMovie() { }

	// RVA: 0x1746B2C Offset: 0x1746B2C VA: 0x1746B2C
	public int GetProgressAfterMovie() { }

	// RVA: 0x1746B80 Offset: 0x1746B80 VA: 0x1746B80
	public int[] GetStartMovieWave() { }

	// RVA: 0x1746BD4 Offset: 0x1746BD4 VA: 0x1746BD4
	public int GetOverWriteMasterImageId() { }

	// RVA: 0x1746C28 Offset: 0x1746C28 VA: 0x1746C28
	public bool IsNotResetResultDispFlag() { }

	// RVA: 0x1746C88 Offset: 0x1746C88 VA: 0x1746C88
	public int GetMovieAfterCrossFadeTime() { }

	// RVA: 0x1746CDC Offset: 0x1746CDC VA: 0x1746CDC
	public int GetMovieAfterCrossFadeStartFrame() { }

	// RVA: 0x1746D30 Offset: 0x1746D30 VA: 0x1746D30
	public bool isBattleFinishCameraTargetAll() { }

	// RVA: 0x1746D90 Offset: 0x1746D90 VA: 0x1746D90
	public int getTurnSituationType() { }

	// RVA: 0x1746DE4 Offset: 0x1746DE4 VA: 0x1746DE4
	public bool isTurnSituationType() { }

	// RVA: 0x1746E00 Offset: 0x1746E00 VA: 0x1746E00
	public int getSpecialShadowEffectId() { }

	// RVA: 0x1746E54 Offset: 0x1746E54 VA: 0x1746E54
	public bool isDisableChangeRaidDownMessage() { }

	// RVA: 0x1746EB4 Offset: 0x1746EB4 VA: 0x1746EB4
	public int GetGimmickId() { }

	// RVA: 0x1746F08 Offset: 0x1746F08 VA: 0x1746F08
	public int GetGimmickSvtId() { }

	// RVA: 0x1746F5C Offset: 0x1746F5C VA: 0x1746F5C
	public int[] GetReelIconIdArray() { }

	// RVA: 0x1746FC4 Offset: 0x1746FC4 VA: 0x1746FC4
	public int[] GetGimmickSkillIdArray() { }

	// RVA: 0x174702C Offset: 0x174702C VA: 0x174702C
	public int[] GetGimmickSkillRateArray() { }

	// RVA: 0x1747094 Offset: 0x1747094 VA: 0x1747094
	public string[] GetGimmickStartVoiceArray() { }

	// RVA: 0x17470E8 Offset: 0x17470E8 VA: 0x17470E8
	public object[] GetGimmickResultVoiceArray() { }

	// RVA: 0x174713C Offset: 0x174713C VA: 0x174713C
	public int[] GetGimmickAnimTypeArray() { }

	// RVA: 0x1747190 Offset: 0x1747190 VA: 0x1747190
	public int GetWinVoiceOffFlg() { }

	// RVA: 0x17471E4 Offset: 0x17471E4 VA: 0x17471E4
	public int GetFinishEffectId() { }

	// RVA: 0x1747238 Offset: 0x1747238 VA: 0x1747238
	public int GetWinBgmOffFlg() { }

	// RVA: 0x174728C Offset: 0x174728C VA: 0x174728C
	public bool IsKeepSubBgmAfterBattleResult() { }

	// RVA: 0x17472E0 Offset: 0x17472E0 VA: 0x17472E0
	public int GetCorrectionIconId() { }

	// RVA: 0x1747334 Offset: 0x1747334 VA: 0x1747334
	public int GetAdvantageClassId() { }

	// RVA: 0x1747388 Offset: 0x1747388 VA: 0x1747388
	public bool GetOverwriteLimitCountSvtIds(out int[] overwriteLimitCountSvtIds, out int[] overwriteLimitCounts, out int[] overwriteLimitCountIconIds) { }

	// RVA: 0x1747454 Offset: 0x1747454 VA: 0x1747454
	public int GetSingleForceSvtId() { }

	// RVA: 0x17474A8 Offset: 0x17474A8 VA: 0x17474A8
	public int GetUserEventDeckNo() { }

	// RVA: 0x17474FC Offset: 0x17474FC VA: 0x17474FC
	public int[] GetShadowOffSvtIds() { }

	// RVA: 0x1747564 Offset: 0x1747564 VA: 0x1747564
	public int GetMasterSkillDelay() { }

	// RVA: 0x17475B8 Offset: 0x17475B8 VA: 0x17475B8
	public string GetMasterSkillDelayInfo() { }

	// RVA: 0x174760C Offset: 0x174760C VA: 0x174760C
	public bool IsMatchIndividuality(int[] individualitys) { }

	// RVA: 0x17476E8 Offset: 0x17476E8 VA: 0x17476E8
	public bool IsInvisibleConnectAndLoad() { }

	// RVA: 0x1747748 Offset: 0x1747748 VA: 0x1747748
	public TerminalPramsManager.eSpecifiedScene GetNextSceneId() { }

	// RVA: 0x174779C Offset: 0x174779C VA: 0x174779C
	public string[] GetNextSceneParam() { }

	// RVA: 0x1747854 Offset: 0x1747854 VA: 0x1747854
	public int[] GetCondHavingIds() { }

	// RVA: 0x17478BC Offset: 0x17478BC VA: 0x17478BC
	public int[] GetNotHavingQuests() { }

	// RVA: 0x1747924 Offset: 0x1747924 VA: 0x1747924
	public bool IsPlayScriptBeforeForWarBoard() { }

	// RVA: 0x1747984 Offset: 0x1747984 VA: 0x1747984
	public bool IsActiveAssistSkill() { }

	// RVA: 0x1747A08 Offset: 0x1747A08 VA: 0x1747A08
	public int[] GetAssistIdArray() { }

	// RVA: 0x1747A70 Offset: 0x1747A70 VA: 0x1747A70
	public int[] GetAssistWeightArray() { }

	// RVA: 0x1747AD8 Offset: 0x1747AD8 VA: 0x1747AD8
	public bool IsHideAssistConfButton() { }

	// RVA: 0x1747B38 Offset: 0x1747B38 VA: 0x1747B38
	public int GetTemporarySpell() { }

	// RVA: 0x1747B8C Offset: 0x1747B8C VA: 0x1747B8C
	public bool IsUseTemporaryCommandSpell() { }

	// RVA: 0x1747BEC Offset: 0x1747BEC VA: 0x1747BEC
	public int GetSupportInitDeckIndex() { }

	// RVA: 0x1747C40 Offset: 0x1747C40 VA: 0x1747C40
	public string getHintMessageTitle() { }

	// RVA: 0x1747CBC Offset: 0x1747CBC VA: 0x1747CBC
	public string getHintMessage() { }

	// RVA: 0x1747D38 Offset: 0x1747D38 VA: 0x1747D38
	public int getHintLeftIndent() { }

	// RVA: 0x1747D8C Offset: 0x1747D8C VA: 0x1747D8C
	public int getHintOpenType() { }

	// RVA: 0x1747DE0 Offset: 0x1747DE0 VA: 0x1747DE0
	public Dictionary<int, int[]> GetNpcAiInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD37C9C Offset: 0xD37C9C VA: 0xD37C9C
	// RVA: 0x1747FA8 Offset: 0x1747FA8 VA: 0x1747FA8
	private static int <getScriptIntArrayParam>m__0(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37CAC Offset: 0xD37CAC VA: 0xD37CAC
	// RVA: 0x1748024 Offset: 0x1748024 VA: 0x1748024
	private static string <getScriptStringArrayParam>m__1(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37CBC Offset: 0xD37CBC VA: 0xD37CBC
	// RVA: 0x1748054 Offset: 0x1748054 VA: 0x1748054
	private static int <GetNpcAiInfo>m__2(object x) { }
}

// Namespace: 
public class QuestPhaseMaster : DataMasterBase<QuestPhaseMaster, QuestPhaseEntity, string> // TypeDefIndex: 7144
{
	// Fields
	public static readonly string MOVIE_QUEST_SCRIPT_STR; // 0x0
	public static readonly string MOVIE_QUEST_SCRIPT_TYPE_STR; // 0x8
	private bool isCached; // 0x44
	private Dictionary<int, List<QuestPhaseEntity>> cachedQuestPahseEntityDict; // 0x48

	// Methods

	// RVA: 0x17480D0 Offset: 0x17480D0 VA: 0x17480D0
	public void .ctor() { }

	// RVA: 0x174814C Offset: 0x174814C VA: 0x174814C
	public QuestPhaseEntity GetEntity(int questId, int phase) { }

	// RVA: 0x17481C0 Offset: 0x17481C0 VA: 0x17481C0
	public bool TryGetEntity(out QuestPhaseEntity entity, int questId, int phase) { }

	// RVA: 0x1748244 Offset: 0x1748244 VA: 0x1748244
	public QuestPhaseEntity getEntityFromId(long questId, int phase) { }

	// RVA: 0x17483A0 Offset: 0x17483A0 VA: 0x17483A0 Slot: 7
	public override void Clear() { }

	// RVA: 0x1748414 Offset: 0x1748414 VA: 0x1748414
	public QuestPhaseEntity[] getList(int iQuestID) { }

	// RVA: 0x174869C Offset: 0x174869C VA: 0x174869C
	public QuestPhaseEntity[] getList(int[] questIdList) { }

	// RVA: 0x17488E8 Offset: 0x17488E8 VA: 0x17488E8
	public int[] GetIndividualityList(int[] questIdArray) { }

	// RVA: 0x1748C6C Offset: 0x1748C6C VA: 0x1748C6C
	public bool IsMoviePhase(int questId, int phase) { }

	// RVA: 0x1748D14 Offset: 0x1748D14 VA: 0x1748D14
	public string GetMovieFolder(int questId, int phase) { }

	// RVA: 0x1748DC0 Offset: 0x1748DC0 VA: 0x1748DC0
	public int GetMoviePlayType(int questId, int phase) { }

	// RVA: 0x1748E6C Offset: 0x1748E6C VA: 0x1748E6C
	public bool IsInvisibleConnectAndLoad(int questId, int phase) { }

	// RVA: 0x1748E90 Offset: 0x1748E90 VA: 0x1748E90
	public SpecifiedSceneInfo GetSpecifiedSceneInfo(int eventId, int questId, int phase) { }

	// RVA: 0x1748F54 Offset: 0x1748F54 VA: 0x1748F54
	public int[] GetBranchQuestIds(int questId, int phase) { }

	// RVA: 0x174910C Offset: 0x174910C VA: 0x174910C
	private static void .cctor() { }
}

// Namespace: 
public enum QuestPhaseMaster.MoviePlayType // TypeDefIndex: 7145
{
	// Fields
	public int value__; // 0x0
	public const QuestPhaseMaster.MoviePlayType BeforeBattle = 1;
	public const QuestPhaseMaster.MoviePlayType AfterBattle = 2;
}

// Namespace: 
public class QuestPickupEntity : DataEntityBase<int> // TypeDefIndex: 7146
{
	// Fields
	public int questId; // 0x10
	public int startedAt; // 0x14
	public int endedAt; // 0x18
	public int priority; // 0x1C

	// Methods

	// RVA: 0x174A2D0 Offset: 0x174A2D0 VA: 0x174A2D0
	public void .ctor() { }
