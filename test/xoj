	public long startedAt; // 0x30
	public long endedAt; // 0x38

	// Methods

	// RVA: 0x1A93954 Offset: 0x1A93954 VA: 0x1A93954
	public void .ctor() { }

	// RVA: 0x1A939A4 Offset: 0x1A939A4 VA: 0x1A939A4 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x1A939AC Offset: 0x1A939AC VA: 0x1A939AC
	public bool IsEnable(long nowTime = 0, bool isMaterial = False) { }

	// RVA: 0x1A93AE4 Offset: 0x1A93AE4 VA: 0x1A93AE4
	public bool IsEventPeriod(long nowTime = 0) { }

	// RVA: 0x1A93B80 Offset: 0x1A93B80 VA: 0x1A93B80
	public bool IsRegisterMaterial() { }
}

// Namespace: 
public class OpeningMovieMaster : DataMasterBase<OpeningMovieMaster, OpeningMovieEntity, int> // TypeDefIndex: 7112
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC55BA0 Offset: 0xC55BA0 VA: 0xC55BA0
	private static Comparison<OpeningMovieEntity> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC55BB0 Offset: 0xC55BB0 VA: 0xC55BB0
	private static Comparison<OpeningMovieEntity> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1A93C50 Offset: 0x1A93C50 VA: 0x1A93C50
	public void .ctor() { }

	// RVA: 0x1A93CA4 Offset: 0x1A93CA4 VA: 0x1A93CA4
	public OpeningMovieEntity[] GetEnableOpeningMovies(long nowTime = 0, OpeningMovieMaster.SortType sortType = 0, bool isMaterial = False) { }

	// RVA: 0x1A9400C Offset: 0x1A9400C VA: 0x1A9400C
	public OpeningMovieEntity GetOpeningMovie(string movieFileName) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA598 Offset: 0xCCA598 VA: 0xCCA598
	// RVA: 0x1A94210 Offset: 0x1A94210 VA: 0x1A94210
	private static int <GetEnableOpeningMovies>m__0(OpeningMovieEntity a, OpeningMovieEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA5A8 Offset: 0xCCA5A8 VA: 0xCCA5A8
	// RVA: 0x1A94250 Offset: 0x1A94250 VA: 0x1A94250
	private static int <GetEnableOpeningMovies>m__1(OpeningMovieEntity a, OpeningMovieEntity b) { }
}

// Namespace: 
public enum OpeningMovieMaster.SortType // TypeDefIndex: 7113
{
	// Fields
	public int value__; // 0x0
	public const OpeningMovieMaster.SortType ID = 0;
	public const OpeningMovieMaster.SortType PRIORITY = 1;
}

// Namespace: 
public class OtherUserGameEntity : DataEntityBase<long> // TypeDefIndex: 7114
{
	// Fields
	public long userId; // 0x10
	public string userName; // 0x18
	public int userLv; // 0x20
	public string friendCode; // 0x28
	public long tutorial1; // 0x30
	public string message; // 0x38
	public long pushUserSvtId; // 0x40
	public ServantLeaderInfo[] userSvtLeaderHash; // 0x48
	public ServantLeaderInfo[] eventUserSvtLeaderHash; // 0x50
	public int[] mainSupportDeckIds; // 0x58
	public int[] eventSupportDeckIds; // 0x60

	// Methods

	// RVA: 0x123AD8C Offset: 0x123AD8C VA: 0x123AD8C
	public void .ctor() { }

	// RVA: 0x123ADDC Offset: 0x123ADDC VA: 0x123ADDC
	public static OtherUserGameEntity.ReturnSupportServantType GetReturnTypeByQuestId(int questId) { }

	// RVA: 0x123AE88 Offset: 0x123AE88 VA: 0x123AE88
	private ServantLeaderInfo[] GetServantLeaderInfoByReturnType(OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123AEA0 Offset: 0x123AEA0 VA: 0x123AEA0
	public bool IsSameSupportDeck() { }

	// RVA: 0x123B1F0 Offset: 0x123B1F0 VA: 0x123B1F0 Slot: 5
	protected sealed override long CreatePrimaryKey() { }

	// RVA: 0x123B1F8 Offset: 0x123B1F8 VA: 0x123B1F8
	public long getUserSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123B298 Offset: 0x123B298 VA: 0x123B298
	public int getSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B3DC Offset: 0x123B3DC VA: 0x123B3DC
	public int getLv(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B4B8 Offset: 0x123B4B8 VA: 0x123B4B8
	public int getMaxLv(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B5A8 Offset: 0x123B5A8 VA: 0x123B5A8
	public int getLimitCount(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123B654 Offset: 0x123B654 VA: 0x123B654
	public int getHp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B730 Offset: 0x123B730 VA: 0x123B730
	public int getAdjustHp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B80C Offset: 0x123B80C VA: 0x123B80C
	public int getAtk(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B8E8 Offset: 0x123B8E8 VA: 0x123B8E8
	public int getAdjustAtk(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B9C4 Offset: 0x123B9C4 VA: 0x123B9C4
	public long getEquipUserSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123BB14 Offset: 0x123BB14 VA: 0x123BB14
	public int getEquipSvtId(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123BC58 Offset: 0x123BC58 VA: 0x123BC58
	public int getEquipHp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123BD3C Offset: 0x123BD3C VA: 0x123BD3C
	public int getEquipAtk(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123BE20 Offset: 0x123BE20 VA: 0x123BE20
	public int getEquipExp(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123BED4 Offset: 0x123BED4 VA: 0x123BED4
	public long getUpdatedAt(int classPos) { }

	// RVA: 0x123BF28 Offset: 0x123BF28 VA: 0x123BF28
	public int[] getSkillIdList(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123BFE4 Offset: 0x123BFE4 VA: 0x123BFE4
	public int[] getSkillLevelList(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123C0A0 Offset: 0x123C0A0 VA: 0x123C0A0
	public void getSkillInfo(out SkillInfo[] skillInfoList, int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123C200 Offset: 0x123C200 VA: 0x123C200
	public bool getTreasureDeviceInfo(out TreasureDvcInfo tdInfo, int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123C344 Offset: 0x123C344 VA: 0x123C344
	public bool getTreasureDeviceInfo(out int tdLv, out int tdMaxLv, int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType) { }

	// RVA: 0x123C424 Offset: 0x123C424 VA: 0x123C424
	public int getTreasureDeviceLevelIcon(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123B120 Offset: 0x123B120 VA: 0x123B120
	public ServantLeaderInfo getServantLeaderInfo(int classPos, bool isExist, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }

	// RVA: 0x123C514 Offset: 0x123C514 VA: 0x123C514
	public EquipTargetInfo getEquipInfo(int classPos, OtherUserGameEntity.ReturnSupportServantType returnSupportServantType, int supportDeckId = 0) { }
}

// Namespace: 
public enum OtherUserGameEntity.ReturnSupportServantType // TypeDefIndex: 7115
{
	// Fields
	public int value__; // 0x0
	public const OtherUserGameEntity.ReturnSupportServantType MainQuest = 0;
	public const OtherUserGameEntity.ReturnSupportServantType EventQuest = 1;
}

// Namespace: 
public class OtherUserGameMaster : DataMasterBase<OtherUserGameMaster, OtherUserGameEntity, long> // TypeDefIndex: 7116
{
	// Methods

	// RVA: 0x123C5E8 Offset: 0x123C5E8 VA: 0x123C5E8
	public void .ctor() { }

	// RVA: 0x123C63C Offset: 0x123C63C VA: 0x123C63C
	public OtherUserGameEntity[] GetFriendCodeList(string friendCode) { }

	// RVA: 0x123C7C0 Offset: 0x123C7C0 VA: 0x123C7C0
	public void continueDeviceOtherUser() { }
}

// Namespace: 
public class PartialMaintenanceEntity : DataEntityBase<int> // TypeDefIndex: 7117
{
	// Fields
	public int type; // 0x10
	public string message; // 0x18
	public long startedAt; // 0x20
	public long endedAt; // 0x28

	// Methods

	// RVA: 0x123E104 Offset: 0x123E104 VA: 0x123E104
	public void .ctor() { }

	// RVA: 0x123E154 Offset: 0x123E154 VA: 0x123E154 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x123E15C Offset: 0x123E15C VA: 0x123E15C
	public bool isMaintenanceNow(PartialMaintenanceEntity.PartialMaintenanceType mainteType) { }

	// RVA: 0x123E1FC Offset: 0x123E1FC VA: 0x123E1FC
	public bool isPartialMaintenanceType(PartialMaintenanceEntity.PartialMaintenanceType mainteType) { }
}

// Namespace: 
public enum PartialMaintenanceEntity.PartialMaintenanceType // TypeDefIndex: 7118
{
	// Fields
	public int value__; // 0x0
	public const PartialMaintenanceEntity.PartialMaintenanceType STONE_GACHA = 1;
	public const PartialMaintenanceEntity.PartialMaintenanceType CHALICE = 2;
}

// Namespace: 
public class PartialMaintenanceMaster : DataMasterBase<PartialMaintenanceMaster, PartialMaintenanceEntity, int> // TypeDefIndex: 7119
{
	// Methods

	// RVA: 0x123E20C Offset: 0x123E20C VA: 0x123E20C
	public void .ctor() { }

	// RVA: 0x123E260 Offset: 0x123E260 VA: 0x123E260
	public bool isStoneGachaMaintenanceNow() { }

	// RVA: 0x123E37C Offset: 0x123E37C VA: 0x123E37C
	public bool isChaliceMaintenanceNow() { }

	// RVA: 0x123E384 Offset: 0x123E384 VA: 0x123E384
	public bool isChaliceMaintenaceEnd() { }

	// RVA: 0x123E268 Offset: 0x123E268 VA: 0x123E268
	private bool isMaintenanceNow(PartialMaintenanceEntity.PartialMaintenanceType mainteType) { }
}

// Namespace: 
public class PickupUserFollowerEntity : DataEntityBase<long> // TypeDefIndex: 7120
{
	// Fields
	public FollowerInfo[] followerInfo; // 0x10
	public long userId; // 0x18
	public long expireAt; // 0x20

	// Methods

	// RVA: 0x177C22C Offset: 0x177C22C VA: 0x177C22C
	public void .ctor() { }

	// RVA: 0x177C27C Offset: 0x177C27C VA: 0x177C27C Slot: 5
	protected sealed override long CreatePrimaryKey() { }

	// RVA: 0x177C284 Offset: 0x177C284 VA: 0x177C284
	public FollowerInfo getFollowerInfo(long followerId, int followerType = -1) { }
}

// Namespace: 
public class PickupUserFollowerMaster : DataMasterBase<PickupUserFollowerMaster, PickupUserFollowerEntity, long> // TypeDefIndex: 7121
{
	// Methods

	// RVA: 0x177C3D0 Offset: 0x177C3D0 VA: 0x177C3D0
	public void .ctor() { }
}

// Namespace: 
public class PrivilegeEntity : DataEntityBase<int> // TypeDefIndex: 7122
{
	// Fields
	public int id; // 0x10
	public int defaultNum; // 0x14
	public int validTime; // 0x18

	// Methods

	// RVA: 0x12D3554 Offset: 0x12D3554 VA: 0x12D3554
	public void .ctor() { }

	// RVA: 0x12D35A4 Offset: 0x12D35A4 VA: 0x12D35A4 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class PrivilegeMaster : DataMasterBase<PrivilegeMaster, PrivilegeEntity, int> // TypeDefIndex: 7123
{
	// Methods

	// RVA: 0x12D35AC Offset: 0x12D35AC VA: 0x12D35AC
	public void .ctor() { }
}

// Namespace: 
public class QuestAddEntity : DataEntityBase<string> // TypeDefIndex: 7124
{
	// Fields
	public int questId; // 0x10
	public int priority; // 0x14
	public string name; // 0x18
	public int displayHours; // 0x20
	public int intervalHours; // 0x24
	public int openedAt; // 0x28
	public int closedAt; // 0x2C
	public long startedAt; // 0x30
	public long endedAt; // 0x38

	// Methods

	// RVA: 0x12E0D20 Offset: 0x12E0D20 VA: 0x12E0D20
	public void .ctor() { }

	// RVA: 0x12E0D70 Offset: 0x12E0D70 VA: 0x12E0D70 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12E0D80 Offset: 0x12E0D80 VA: 0x12E0D80
	public static string CreatePK(int questId, int priority) { }
}

// Namespace: 
public class QuestAddMaster : DataMasterBase<QuestAddMaster, QuestAddEntity, string> // TypeDefIndex: 7125
{
	// Methods

	// RVA: 0x12E0D90 Offset: 0x12E0D90 VA: 0x12E0D90
	public void .ctor() { }

	// RVA: 0x12E0DE4 Offset: 0x12E0DE4 VA: 0x12E0DE4
	public QuestAddEntity GetEntity(int questId, int priority) { }

	// RVA: 0x12E0E58 Offset: 0x12E0E58 VA: 0x12E0E58
	public bool TryGetEntity(out QuestAddEntity entity, int questId, int priority) { }

	// RVA: 0x12E0EDC Offset: 0x12E0EDC VA: 0x12E0EDC
	public QuestAddEntity GetReplaceDataByQuestId(int questId) { }
}

// Namespace: 
public class QuestBehaviorEntity : DataEntityBase<string> // TypeDefIndex: 7126
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public int num; // 0x18
	public int priority; // 0x1C
	public int behaviorType; // 0x20
	public int[] behaviorValues; // 0x28
	public int condType; // 0x30
	public int condTargetId; // 0x34
	public int condNum; // 0x38

	// Methods

	// RVA: 0x15B94C8 Offset: 0x15B94C8 VA: 0x15B94C8
	public void .ctor() { }

	// RVA: 0x15B9518 Offset: 0x15B9518 VA: 0x15B9518 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x15B952C Offset: 0x15B952C VA: 0x15B952C
	public static string CreatePK(int questId, int phase, int num, int priority) { }

	// RVA: 0x15B9544 Offset: 0x15B9544 VA: 0x15B9544
	public long GetQuestPhaseNo() { }

	// RVA: 0x15B9558 Offset: 0x15B9558 VA: 0x15B9558
	public bool checkBehaviorType(BehaviorType.Kind type) { }

	// RVA: 0x15B9568 Offset: 0x15B9568 VA: 0x15B9568
	public bool checkConditions() { }

	// RVA: 0x15B9738 Offset: 0x15B9738 VA: 0x15B9738
	public int getskillId() { }

	// RVA: 0x15B977C Offset: 0x15B977C VA: 0x15B977C
	public int getskillLv() { }
}

// Namespace: 
public class QuestBehaviorMaster : DataMasterBase<QuestBehaviorMaster, QuestBehaviorEntity, string> // TypeDefIndex: 7127
{
	// Methods

	// RVA: 0x15B97C4 Offset: 0x15B97C4 VA: 0x15B97C4
	public void .ctor() { }

	// RVA: 0x15B9818 Offset: 0x15B9818 VA: 0x15B9818
	public QuestBehaviorEntity GetEntity(int questId, int phase, int num, int priority) { }

	// RVA: 0x15B98A4 Offset: 0x15B98A4 VA: 0x15B98A4
	public bool TryGetEntity(out QuestBehaviorEntity entity, int questId, int phase, int num, int priority) { }

	// RVA: 0x15B9940 Offset: 0x15B9940 VA: 0x15B9940 Slot: 4
	public override DataEntityBase[] getList(object obj) { }

	// RVA: 0x15B99B0 Offset: 0x15B99B0 VA: 0x15B99B0
	public int getBattleBg(int questId, int phase, int defaultValue) { }

	// RVA: 0x15B9B7C Offset: 0x15B9B7C VA: 0x15B9B7C
	public QuestBehaviorEntity[] getBattleSkill(int questId, int phase) { }

	// RVA: 0x15B9E88 Offset: 0x15B9E88 VA: 0x15B9E88
	public bool getEnableContinue(int questId, int phase) { }

	// RVA: 0x15BA024 Offset: 0x15BA024 VA: 0x15BA024
	public int[] getBattleIndividuality(int questId, int phase, int[] defVals) { }

	// RVA: 0x15BA1FC Offset: 0x15BA1FC VA: 0x15BA1FC
	public Dictionary<long, KeyValuePair<int, int[]>> getPrioredIndividualitiesWithMatched(int[] questIds) { }
}

// Namespace: 
public class QuestConsumeItemEntity : DataEntityBase<int> // TypeDefIndex: 7128
{
	// Fields
	public int questId; // 0x10
	public int[] itemIds; // 0x18
	public int[] nums; // 0x20

	// Methods

	// RVA: 0x11FAB18 Offset: 0x11FAB18 VA: 0x11FAB18
	public void .ctor() { }

	// RVA: 0x11FAB68 Offset: 0x11FAB68 VA: 0x11FAB68 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x11FAB70 Offset: 0x11FAB70 VA: 0x11FAB70
	public bool IsAvailableAt(int index) { }

	// RVA: 0x11FAC14 Offset: 0x11FAC14 VA: 0x11FAC14
	public string GetItemConsumeString() { }
}

// Namespace: 
public class QuestConsumeItemMaster : DataMasterBase<QuestConsumeItemMaster, QuestConsumeItemEntity, int> // TypeDefIndex: 7129
{
	// Methods

	// RVA: 0x11FAFB0 Offset: 0x11FAFB0 VA: 0x11FAFB0
	public void .ctor() { }
}

// Namespace: 
public class QuestDateRangeEntity : DataEntityBase<string> // TypeDefIndex: 7130
{
	// Fields
	public int id; // 0x10
	public int idx; // 0x14
	public int openedAt; // 0x18
	public int closedAt; // 0x1C

	// Methods

	// RVA: 0x11FB004 Offset: 0x11FB004 VA: 0x11FB004
	public void .ctor() { }

	// RVA: 0x11FB054 Offset: 0x11FB054 VA: 0x11FB054 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x11FB064 Offset: 0x11FB064 VA: 0x11FB064
	public static string CreatePK(int id, int idx) { }

	// RVA: 0x11FB074 Offset: 0x11FB074 VA: 0x11FB074
	public int getQuestDateRangeId() { }

	// RVA: 0x11FB07C Offset: 0x11FB07C VA: 0x11FB07C
	public int getIndex() { }

	// RVA: 0x11FB084 Offset: 0x11FB084 VA: 0x11FB084
	public long getOpenedAt() { }

	// RVA: 0x11FB08C Offset: 0x11FB08C VA: 0x11FB08C
	public long getClosedAt() { }
}

// Namespace: 
public class QuestDateRangeMaster : DataMasterBase<QuestDateRangeMaster, QuestDateRangeEntity, string> // TypeDefIndex: 7131
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC55BC0 Offset: 0xC55BC0 VA: 0xC55BC0
	private static Comparison<QuestDateRangeEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x11FB094 Offset: 0x11FB094 VA: 0x11FB094
	public void .ctor() { }

	// RVA: 0x11FB0E8 Offset: 0x11FB0E8 VA: 0x11FB0E8
	public QuestDateRangeEntity GetEntity(int id, int idx) { }

	// RVA: 0x11FB15C Offset: 0x11FB15C VA: 0x11FB15C
	public bool TryGetEntity(out QuestDateRangeEntity entity, int id, int idx) { }

	// RVA: 0x11FB1E0 Offset: 0x11FB1E0 VA: 0x11FB1E0
	public List<QuestDateRangeEntity> GetQuestDateRangeEntityList(int questDateRangeId) { }

	// RVA: 0x11FB490 Offset: 0x11FB490 VA: 0x11FB490
	public bool IsPeriodFromOpenedToClosed(int questDateRangeId, long nowTime) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA5B8 Offset: 0xCCA5B8 VA: 0xCCA5B8
	// RVA: 0x11FB690 Offset: 0x11FB690 VA: 0x11FB690
	private static int <GetQuestDateRangeEntityList>m__0(QuestDateRangeEntity a, QuestDateRangeEntity b) { }
}

// Namespace: 
public class QuestEntity : DataEntityBase<int> // TypeDefIndex: 7132
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string nameRuby; // 0x20
	public int type; // 0x28
	public int actConsume; // 0x2C
	public int spotId; // 0x30
	public int giftId; // 0x34
	public int priority; // 0x38
	public int bannerType; // 0x3C
	public int bannerId; // 0x40
	public int iconId; // 0x44
	public int charaIconId; // 0x48
	public int giftIconId; // 0x4C
	public int forceOperation; // 0x50
	public int afterClear; // 0x54
	public string[] beforeActionVals; // 0x58
	public string[] afterActionVals; // 0x60
	public int displayHours; // 0x68
	public int intervalHours; // 0x6C
	public int chapterId; // 0x70
	public int chapterSubId; // 0x74
	public string chapterSubStr; // 0x78
	public string recommendLv; // 0x80
	public int hasStartAction; // 0x88
	public long flag; // 0x90
	public int noticeAt; // 0x98
	public int openedAt; // 0x9C
	public int closedAt; // 0xA0
	public int consumeType; // 0xA4
	public int scriptQuestId; // 0xA8
	private bool mIsPhaseDetailed; // 0xAC
	private bool mIsQuestSpotRelease; // 0xAD

	// Methods

	// RVA: 0x11FBF60 Offset: 0x11FBF60 VA: 0x11FBF60
	public void .ctor() { }

	// RVA: 0x11FBFB8 Offset: 0x11FBFB8 VA: 0x11FBFB8
	public void .ctor(QuestEntity cSrc) { }

	// RVA: 0x11FC394 Offset: 0x11FC394 VA: 0x11FC394 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x11FC39C Offset: 0x11FC39C VA: 0x11FC39C
	public QuestEntity GetPhaseDetailedEntity() { }

	// RVA: 0x11FC494 Offset: 0x11FC494 VA: 0x11FC494
	private QuestPhaseDetailEntity GetPhaseDetail() { }

	// RVA: 0x11FC614 Offset: 0x11FC614 VA: 0x11FC614
	private QuestPhaseDetailEntity GetPhaseDetail(int phaseCnt) { }

	// RVA: 0x11FC738 Offset: 0x11FC738 VA: 0x11FC738
	public bool IsPhaseDetailed() { }

	// RVA: 0x11FC740 Offset: 0x11FC740 VA: 0x11FC740
	public int getQuestId() { }

	// RVA: 0x11FC748 Offset: 0x11FC748 VA: 0x11FC748
	public string getQuestName() { }

	// RVA: 0x11FC7F4 Offset: 0x11FC7F4 VA: 0x11FC7F4
	public string getQuestNameRuby() { }

	// RVA: 0x11FC7FC Offset: 0x11FC7FC VA: 0x11FC7FC
	public int getQuestType() { }

	// RVA: 0x11FC804 Offset: 0x11FC804 VA: 0x11FC804
	public QuestEntity.TypeFlag GetTypeFlag() { }

	// RVA: 0x11FC818 Offset: 0x11FC818 VA: 0x11FC818
	public QuestEntity.ConsumeType GetConsumeType() { }

	// RVA: 0x11FC858 Offset: 0x11FC858 VA: 0x11FC858
	public int getActConsume(int cost_calc_val = 0) { }

	// RVA: 0x11FC8C4 Offset: 0x11FC8C4 VA: 0x11FC8C4
	public int getSpotId() { }

	// RVA: 0x11FC988 Offset: 0x11FC988 VA: 0x11FC988
	public int getSpotId(int phase) { }

	// RVA: 0x11FCB1C Offset: 0x11FCB1C VA: 0x11FCB1C
	public int getPriority() { }

	// RVA: 0x11FCB24 Offset: 0x11FCB24 VA: 0x11FCB24
	public int getCharaIconId() { }

	// RVA: 0x11FCB2C Offset: 0x11FCB2C VA: 0x11FCB2C
	public int getServantId() { }

	// RVA: 0x11FCB4C Offset: 0x11FCB4C VA: 0x11FCB4C
	public int getLimitCount() { }

	// RVA: 0x11FCB74 Offset: 0x11FCB74 VA: 0x11FCB74
	public int getGiftIconId() { }

	// RVA: 0x11FCB7C Offset: 0x11FCB7C VA: 0x11FCB7C
	public int getForceOperation() { }

	// RVA: 0x11FCB84 Offset: 0x11FCB84 VA: 0x11FCB84
	public int getAfterClear() { }

	// RVA: 0x11FCB8C Offset: 0x11FCB8C VA: 0x11FCB8C
	public int getDisplayHours() { }

	// RVA: 0x11FCC38 Offset: 0x11FCC38 VA: 0x11FCC38
	public int getIntervalHours() { }

	// RVA: 0x11FCCE4 Offset: 0x11FCCE4 VA: 0x11FCCE4
	public int getChapterId() { }

	// RVA: 0x11FCCEC Offset: 0x11FCCEC VA: 0x11FCCEC
	public string getChapterSubStr(int warId = 0) { }

	// RVA: 0x11FCFF8 Offset: 0x11FCFF8 VA: 0x11FCFF8
	public int GetChapterUnitId(int warId) { }

	// RVA: 0x11FD174 Offset: 0x11FD174 VA: 0x11FD174
	public string GetChapterSubTitle(int warId) { }

	// RVA: 0x11FD298 Offset: 0x11FD298 VA: 0x11FD298
	public string getRecommendLv() { }

	// RVA: 0x11FD2A0 Offset: 0x11FD2A0 VA: 0x11FD2A0
	public string getRecommendLv(int phaseCnt) { }

	// RVA: 0x11FD33C Offset: 0x11FD33C VA: 0x11FD33C
	public long getNoticeAt() { }

	// RVA: 0x11FD344 Offset: 0x11FD344 VA: 0x11FD344
	public long getOpenedAt() { }

	// RVA: 0x11FD3F0 Offset: 0x11FD3F0 VA: 0x11FD3F0
	public long getClosedAt() { }

	// RVA: 0x11FD49C Offset: 0x11FD49C VA: 0x11FD49C
	public bool IsOpenByTime(bool is_itvl = False) { }

	// RVA: 0x11FD5DC Offset: 0x11FD5DC VA: 0x11FD5DC
	public long GetEndTime(bool is_itvl = False) { }

	// RVA: 0x11FD4BC Offset: 0x11FD4BC VA: 0x11FD4BC
	public long GetRestTime(bool is_itvl = False) { }

	// RVA: 0x11FD128 Offset: 0x11FD128 VA: 0x11FD128
	public bool HasFlag(QuestEntity.Flag flag) { }

	// RVA: 0x11FD678 Offset: 0x11FD678 VA: 0x11FD678
	public bool HasFlag(QuestEntity.Flag flag, int phaseCnt) { }

	// RVA: 0x11FD6C8 Offset: 0x11FD6C8 VA: 0x11FD6C8
	public QuestConsumeItemEntity getItemConsumeEntity() { }

	// RVA: 0x11FD7C4 Offset: 0x11FD7C4 VA: 0x11FD7C4
	public int GetWarId() { }

	// RVA: 0x11FD9A4 Offset: 0x11FD9A4 VA: 0x11FD9A4
	public string GetBgmName(int warId) { }

	// RVA: 0x11FDBC0 Offset: 0x11FDBC0 VA: 0x11FDBC0
	public bool IsNeedUseEventQuestSupport() { }

	// RVA: 0x11FDDC0 Offset: 0x11FDDC0 VA: 0x11FDDC0
	public int GetCampaignCostCalcValue(int questId, int phase, bool isQuestNoneCleared, ref int fixedVal) { }

	// RVA: 0x11FE110 Offset: 0x11FE110 VA: 0x11FE110
	public static string GetCostValueColor(int costCalcVal, bool isOverCost) { }
}

// Namespace: 
public enum QuestEntity.enType // TypeDefIndex: 7133
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.enType MAIN = 1;
	public const QuestEntity.enType FREE = 2;
	public const QuestEntity.enType FRIENDSHIP = 3;
	public const QuestEntity.enType EVENT = 5;
	public const QuestEntity.enType HEROBALLAD = 6;
	public const QuestEntity.enType WAR_BOARD = 7;
}

// Namespace: 
public enum QuestEntity.TypeFlag // TypeDefIndex: 7134
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.TypeFlag NONE = 0;
	public const QuestEntity.TypeFlag MAIN = 2;
	public const QuestEntity.TypeFlag FREE = 4;
	public const QuestEntity.TypeFlag FRIENDSHIP = 8;
	public const QuestEntity.TypeFlag EVENT = 32;
	public const QuestEntity.TypeFlag HEROBALLAD = 64;
	public const QuestEntity.TypeFlag WAR_BOARD = 128;
	public const QuestEntity.TypeFlag ALL = 238;
}

// Namespace: 
public enum QuestEntity.enForceOperation // TypeDefIndex: 7135
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.enForceOperation NONE = 0;
	public const QuestEntity.enForceOperation FORCE_OPEN = 1;
	public const QuestEntity.enForceOperation FORCE_CLOSE = 2;
}

// Namespace: 
public enum QuestEntity.enAfterClear // TypeDefIndex: 7136
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.enAfterClear CLOSE = 1;
	public const QuestEntity.enAfterClear REPEAT_FIRST = 2;
	public const QuestEntity.enAfterClear REPEAT_LAST = 3;
	public const QuestEntity.enAfterClear RESET_INTERVAL = 4;
}

// Namespace: 
public enum QuestEntity.Flag // TypeDefIndex: 7137
{
	// Fields
	public long value__; // 0x0
	public const QuestEntity.Flag NONE = 1;
	public const QuestEntity.Flag NO_BATTLE = 2;
	public const QuestEntity.Flag RAID = 4;
	public const QuestEntity.Flag RAID_CONNECTION = 8;
	public const QuestEntity.Flag NO_CONTINUE = 16;
	public const QuestEntity.Flag NO_DISPLAY_REMAIN = 32;
	public const QuestEntity.Flag RAID_LAST_DAY = 64;
	public const QuestEntity.Flag CLOSED_HIDE_COST_ITEM = 128;
	public const QuestEntity.Flag CLOSED_HIDE_COST_NUM = 256;
	public const QuestEntity.Flag CLOSED_HIDE_PROGRESS = 512;
	public const QuestEntity.Flag CLOSED_HIDE_RECOMMEND_LV = 1024;
	public const QuestEntity.Flag CLOSED_HIDE_TREND_CLASS = 2048;
	public const QuestEntity.Flag CLOSED_HIDE_REWARD = 4096;
	public const QuestEntity.Flag NO_DISPLAY_CONSUME = 8192;
	public const QuestEntity.Flag SUPER_BOSS = 16384;
	public const QuestEntity.Flag NO_DISPLAY_MISSION_NOTIFY = 32768;
	public const QuestEntity.Flag HIDE_PROGRESS = 65536;
	public const QuestEntity.Flag DROP_FIRST_TIME_ONLY = 131072;
	public const QuestEntity.Flag CHAPTER_SUB_ID_JAPANESE_NUMERALS = 262144;
	public const QuestEntity.Flag SUPPORT_ONLY_FORCE_BATTLE = 524288;
	public const QuestEntity.Flag EVENT_DECK_NO_SUPPORT = 1048576;
	public const QuestEntity.Flag FATIGUE_BATTLE = 2097152;
	public const QuestEntity.Flag SUPPORT_SELECT_AFTER_SCRIPT = 4194304;
	public const QuestEntity.Flag BRANCH = 8388608;
	public const QuestEntity.Flag USER_EVENT_DECK = 16777216;
	public const QuestEntity.Flag NO_DISPLAY_RAID_REMAIN = 33554432;
	public const QuestEntity.Flag QUEST_MAX_DAMAGE_RECORD = 67108864;
	public const QuestEntity.Flag ENABLE_FOLLOW_QUEST = 134217728;
	public const QuestEntity.Flag SUPPORT_SVT_MULTIPLE_SET = 268435456;
	public const QuestEntity.Flag SUPPORT_ONLY_BATTLE = 536870912;
	public const QuestEntity.Flag ACT_CONSUME_BATTLE_WIN = 1073741824;
	public const QuestEntity.Flag VOTE = 2147483648;
	public const QuestEntity.Flag HIDE_MASTER = 4294967296;
	public const QuestEntity.Flag DISABLE_MASTER_SKILL = 8589934592;
	public const QuestEntity.Flag DISABLE_COMMAND_SPEEL = 17179869184;
	public const QuestEntity.Flag SUPPORT_SVT_EDITABLE_POSITION = 34359738368;
	public const QuestEntity.Flag BRANCH_SCENARIO = 68719476736;
	public const QuestEntity.Flag QUEST_KNOCKDOWN_RECORD = 137438953472;
	public const QuestEntity.Flag NOT_RETRIEVABLE = 274877906944;
	public const QuestEntity.Flag DISPLAY_LOOPMARK = 549755813888;
	public const QuestEntity.Flag BOOST_ITEM_CONSUME_BATTLE_WIN = 1099511627776;
	public const QuestEntity.Flag PLAY_SCENARIO_WITH_MAPSCREEN = 2199023255552;
	public const QuestEntity.Flag BATTLE_RETREAT_QUEST_CLEAR = 4398046511104;
	public const QuestEntity.Flag BATTLE_RESULT_LOSE_QUEST_CLEAR = 8796093022208;
	public const QuestEntity.Flag BRANCH_HAVING = 35184372088832;
	public const QuestEntity.Flag NO_DISPLAY_NEXT_ICON = 70368744177664;
	public const QuestEntity.Flag WINDOW_ONLY = 140737488355328;
	public const QuestEntity.Flag CHANGE_MASTERS = 281474976710656;
	public const QuestEntity.Flag NOT_DISPLAY_RESULT_GET_POINT = 562949953421312;
	public const QuestEntity.Flag FORCE_TO_NO_DROP = 1125899906842624;
	public const QuestEntity.Flag DISPLAY_CONSUME_ICON = 2251799813685248;
	public const QuestEntity.Flag HARVEST = 4503599627370496;
	public const QuestEntity.Flag RECONSTRUCTION = 9007199254740992;
	public const QuestEntity.Flag ENEMY_IMMEDIATE_APPEAR = 18014398509481984;
	public const QuestEntity.Flag NO_SUPPORT_LIST = 36028797018963968;
	public const QuestEntity.Flag LIVE = 72057594037927936;
}

// Namespace: 
public enum QuestEntity.ConsumeType // TypeDefIndex: 7138
{
	// Fields
	public int value__; // 0x0
	public const QuestEntity.ConsumeType NONE = 0;
	public const QuestEntity.ConsumeType AP = 1;
	public const QuestEntity.ConsumeType RP = 2;
	public const QuestEntity.ConsumeType ITEM = 3;
	public const QuestEntity.ConsumeType AP_AND_ITEM = 4;
}

// Namespace: 
public class QuestGroupEntity : DataEntityBase<string> // TypeDefIndex: 7139
{
	// Fields
	public int questId; // 0x10
	public int type; // 0x14
	public int groupId; // 0x18

	// Methods

	// RVA: 0x11FE1EC Offset: 0x11FE1EC VA: 0x11FE1EC
	public void .ctor() { }

	// RVA: 0x11FE23C Offset: 0x11FE23C VA: 0x11FE23C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x11FE250 Offset: 0x11FE250 VA: 0x11FE250
	public static string CreatePK(int questId, int type, int groupId) { }
}

// Namespace: 
public class QuestGroupMaster : DataMasterBase<QuestGroupMaster, QuestGroupEntity, string> // TypeDefIndex: 7140
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC55BD0 Offset: 0xC55BD0 VA: 0xC55BD0
	private static Comparison<QuestGroupEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x11FE264 Offset: 0x11FE264 VA: 0x11FE264
	public void .ctor() { }

	// RVA: 0x11FE2B8 Offset: 0x11FE2B8 VA: 0x11FE2B8
	public QuestGroupEntity GetEntity(int questId, int type, int groupId) { }

	// RVA: 0x11FE33C Offset: 0x11FE33C VA: 0x11FE33C
	public bool TryGetEntity(out QuestGroupEntity entity, int questId, int type, int groupId) { }

	// RVA: 0x11FE3C8 Offset: 0x11FE3C8 VA: 0x11FE3C8
	public int GetGroupId(int questId, QuestGroupType.Type type) { }

	// RVA: 0x11FE4EC Offset: 0x11FE4EC VA: 0x11FE4EC
	public Dictionary<int, int> GetQuestIdToGroupIdDict(List<int> questIdList, QuestGroupType.Type type) { }

	// RVA: 0x11FDDB8 Offset: 0x11FDDB8 VA: 0x11FDDB8
	public int GetEventId(int questId) { }

	// RVA: 0x11FE928 Offset: 0x11FE928 VA: 0x11FE928
	public int[] GetQuestIdListByGroupId(int groupId, QuestGroupType.Type type) { }

	// RVA: 0x11FE9A4 Offset: 0x11FE9A4 VA: 0x11FE9A4
	public List<int> GetListOfQuestIdByGroupId(int groupId, QuestGroupType.Type type) { }

	// RVA: 0x11FEB14 Offset: 0x11FEB14 VA: 0x11FEB14
	public List<QuestGroupEntity> GetEntityListByGroupId(int groupId, QuestGroupType.Type type) { }

	// RVA: 0x11FEC84 Offset: 0x11FEC84 VA: 0x11FEC84
	public int[] GetQuestIdListByEventId(int eventId) { }

	// RVA: 0x11FEC8C Offset: 0x11FEC8C VA: 0x11FEC8C
	public List<int> GetClearedGroupOpenQuestListByEventId(int eventId) { }

	// RVA: 0x11FF1C0 Offset: 0x11FF1C0 VA: 0x11FF1C0
	public bool IsEntryEvent(int eventId) { }

	// RVA: 0x11FF394 Offset: 0x11FF394 VA: 0x11FF394
	public int GetEventTowerQuestId(int eventId, int tower, int floor) { }

	// RVA: 0x11FF5B8 Offset: 0x11FF5B8 VA: 0x11FF5B8
	public List<int> GetQuestIdListByGroupType(QuestGroupType.Type type) { }

	// RVA: 0x11FF76C Offset: 0x11FF76C VA: 0x11FF76C
	public List<int> GetInterludeQuestIdList(int questId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA5C8 Offset: 0xCCA5C8 VA: 0xCCA5C8
	// RVA: 0x11FF9BC Offset: 0x11FF9BC VA: 0x11FF9BC
	private static int <GetClearedGroupOpenQuestListByEventId>m__0(QuestGroupEntity x, QuestGroupEntity y) { }
}

// Namespace: 
public class QuestMaster : DataMasterBase<QuestMaster, QuestEntity, int> // TypeDefIndex: 7141
{
	// Methods

	// RVA: 0x1207A2C Offset: 0x1207A2C VA: 0x1207A2C
	public void .ctor() { }

	// RVA: 0x1207A80 Offset: 0x1207A80 VA: 0x1207A80
	public int getScriptQuestId(int questId) { }

	// RVA: 0x1207AFC Offset: 0x1207AFC VA: 0x1207AFC
	public List<int> GetQuestIdListWithScriptId(int scriptId) { }

	// RVA: 0x1207C64 Offset: 0x1207C64 VA: 0x1207C64
	public QuestEntity getQuestEntity(int questId) { }

	// RVA: 0x1207CC4 Offset: 0x1207CC4 VA: 0x1207CC4
	public QuestEntity GetQuestEntitybyIdx(int idx) { }

	// RVA: 0x1207DB8 Offset: 0x1207DB8 VA: 0x1207DB8
	public int Count() { }

	// RVA: 0x1207E18 Offset: 0x1207E18 VA: 0x1207E18
	public bool CheckBpEnabled(List<int> questIds) { }

	// RVA: 0x12080E4 Offset: 0x12080E4 VA: 0x12080E4
	public QuestEntity[] GetQuestEntityList(int[] questList) { }

	// RVA: 0x1208268 Offset: 0x1208268 VA: 0x1208268
	public static int GetWarIdByQuestId(int questId) { }

	// RVA: 0x12082F0 Offset: 0x12082F0 VA: 0x12082F0
	public int GetWarIdFromQuestId(int questId) { }

	// RVA: 0x12083C0 Offset: 0x12083C0 VA: 0x12083C0
	public static bool IsQuestPhaseWithNoBattle(int questId, int questPhase) { }

	// RVA: 0x1208458 Offset: 0x1208458 VA: 0x1208458
	public bool CheckQuestPhaseWithNoBattle(int questId, int questPhase) { }

	// RVA: 0x1208558 Offset: 0x1208558 VA: 0x1208558
	public static int GetSpotId(int questId) { }

	// RVA: 0x1208600 Offset: 0x1208600 VA: 0x1208600
	public static QuestEntity.TypeFlag GetQuestType(int questId) { }

	// RVA: 0x12086AC Offset: 0x12086AC VA: 0x12086AC
	public static bool HasFlag(int questId, QuestEntity.Flag flag) { }
}

// Namespace: 
public class QuestMessageEntity : DataEntityBase<string> // TypeDefIndex: 7142
{
	// Fields
	public int questId; // 0x10
	public int phase; // 0x14
	public int idx; // 0x18
	public string message; // 0x20
	public int condType; // 0x28
	public int targetId; // 0x2C
	public int targetNum; // 0x30
	public int frequencyType; // 0x34
	public int displayType; // 0x38

	// Methods

	// RVA: 0x1208784 Offset: 0x1208784 VA: 0x1208784
	public void .ctor() { }

	// RVA: 0x12087D4 Offset: 0x12087D4 VA: 0x12087D4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12087E8 Offset: 0x12087E8 VA: 0x12087E8
	public static string CreatePK(int questId, int phase, int idx) { }

	// RVA: 0x12087FC Offset: 0x12087FC VA: 0x12087FC
	public bool CheckValid() { }
}

// Namespace: 
public enum QuestMessageEntity.QuestMessageDisplayType // TypeDefIndex: 7143
{
	// Fields
	public int value__; // 0x0
	public const QuestMessageEntity.QuestMessageDisplayType NONE = 0;
	public const QuestMessageEntity.QuestMessageDisplayType DIALOG = 1;
	public const QuestMessageEntity.QuestMessageDisplayType WINDOW_BEFORE = 2;
	public const QuestMessageEntity.QuestMessageDisplayType WINDOW_AFTER = 3;
	public const QuestMessageEntity.QuestMessageDisplayType MOVIE_DIALOG = 4;
	public const QuestMessageEntity.QuestMessageDisplayType MOVIE_DELETE_DIALOG = 5;
	public const QuestMessageEntity.QuestMessageDisplayType SCRIPT_BEFORE = 6;
}

// Namespace: 
public class QuestMessageMaster : DataMasterBase<QuestMessageMaster, QuestMessageEntity, string> // TypeDefIndex: 7144
{
	// Methods

	// RVA: 0x120887C Offset: 0x120887C VA: 0x120887C
	public void .ctor() { }

	// RVA: 0x12088D0 Offset: 0x12088D0 VA: 0x12088D0
	public QuestMessageEntity GetEntity(int questId, int phase, int idx) { }

	// RVA: 0x1208954 Offset: 0x1208954 VA: 0x1208954
	public bool TryGetEntity(out QuestMessageEntity entity, int questId, int phase, int idx) { }

	// RVA: 0x12089E0 Offset: 0x12089E0 VA: 0x12089E0
	public string GetValidMessage(int questId, int phase, QuestMessageEntity.QuestMessageDisplayType messageType) { }

	// RVA: 0x1208AB4 Offset: 0x1208AB4 VA: 0x1208AB4
	public List<QuestMessageEntity> GetValidMessageList(int questId, int phase, QuestMessageEntity.QuestMessageDisplayType messageType) { }
}

