	[NativeNameAttribute] // RVA: 0xC6DF78 Offset: 0xC6DF78 VA: 0xC6DF78
	public bool useNormalAngle; // 0x4
	[NativeNameAttribute] // RVA: 0xC6DFB0 Offset: 0xC6DFB0 VA: 0xC6DFB0
	public bool useOutsideNormalAngle; // 0x5
	[NativeNameAttribute] // RVA: 0xC6DFE8 Offset: 0xC6DFE8 VA: 0xC6DFE8
	public LayerMask layerMask; // 0x8
	[NativeNameAttribute] // RVA: 0xC6E020 Offset: 0xC6E020 VA: 0xC6E020
	public float minDepth; // 0xC
	[NativeNameAttribute] // RVA: 0xC6E058 Offset: 0xC6E058 VA: 0xC6E058
	public float maxDepth; // 0x10
	[NativeNameAttribute] // RVA: 0xC6E090 Offset: 0xC6E090 VA: 0xC6E090
	public float minNormalAngle; // 0x14
	[NativeNameAttribute] // RVA: 0xC6E0C8 Offset: 0xC6E0C8 VA: 0xC6E0C8
	public float maxNormalAngle; // 0x18

	// Methods

	// RVA: 0xBC17B8 Offset: 0xBC17B8 VA: 0xBC17B8
	private void CheckConsistency() { }

	// RVA: 0xBC17C0 Offset: 0xBC17C0 VA: 0xBC17C0
	public void SetLayerMask(LayerMask layerMask) { }

	// RVA: 0xBC17D0 Offset: 0xBC17D0 VA: 0xBC17D0
	public void SetDepth(float minDepth, float maxDepth) { }

	// RVA: 0x135A71C Offset: 0x135A71C VA: 0x135A71C
	internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC6DA30 Offset: 0xC6DA30 VA: 0xC6DA30
public class Collision2D // TypeDefIndex: 2795
{
	// Fields
	internal int m_Collider; // 0x10
	internal int m_OtherCollider; // 0x14
	internal int m_Rigidbody; // 0x18
	internal int m_OtherRigidbody; // 0x1C
	internal Vector2 m_RelativeVelocity; // 0x20
	internal int m_Enabled; // 0x28
	internal int m_ContactCount; // 0x2C
	internal ContactPoint2D[] m_RecycledContacts; // 0x30
	internal ContactPoint2D[] m_LegacyContacts; // 0x38

	// Properties
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public GameObject gameObject { get; }
	public Vector2 relativeVelocity { get; }
	public ContactPoint2D[] contacts { get; }

	// Methods

	// RVA: 0x135A2F4 Offset: 0x135A2F4 VA: 0x135A2F4
	public Collider2D get_collider() { }

	// RVA: 0x135A3A4 Offset: 0x135A3A4 VA: 0x135A3A4
	public Rigidbody2D get_rigidbody() { }

	// RVA: 0x135A430 Offset: 0x135A430 VA: 0x135A430
	public GameObject get_gameObject() { }

	// RVA: 0x135A4DC Offset: 0x135A4DC VA: 0x135A4DC
	public Vector2 get_relativeVelocity() { }

	// RVA: 0x135A4E4 Offset: 0x135A4E4 VA: 0x135A4E4
	public ContactPoint2D[] get_contacts() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC6DA40 Offset: 0xC6DA40 VA: 0xC6DA40
[RequiredByNativeCodeAttribute] // RVA: 0xC6DA40 Offset: 0xC6DA40 VA: 0xC6DA40
[NativeHeaderAttribute] // RVA: 0xC6DA40 Offset: 0xC6DA40 VA: 0xC6DA40
public struct ContactPoint2D // TypeDefIndex: 2796
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC6E100 Offset: 0xC6E100 VA: 0xC6E100
	private Vector2 m_Point; // 0x0
	[NativeNameAttribute] // RVA: 0xC6E138 Offset: 0xC6E138 VA: 0xC6E138
	private Vector2 m_Normal; // 0x8
	[NativeNameAttribute] // RVA: 0xC6E170 Offset: 0xC6E170 VA: 0xC6E170
	private Vector2 m_RelativeVelocity; // 0x10
	[NativeNameAttribute] // RVA: 0xC6E1A8 Offset: 0xC6E1A8 VA: 0xC6E1A8
	private float m_Separation; // 0x18
	[NativeNameAttribute] // RVA: 0xC6E1E0 Offset: 0xC6E1E0 VA: 0xC6E1E0
	private float m_NormalImpulse; // 0x1C
	[NativeNameAttribute] // RVA: 0xC6E218 Offset: 0xC6E218 VA: 0xC6E218
	private float m_TangentImpulse; // 0x20
	[NativeNameAttribute] // RVA: 0xC6E250 Offset: 0xC6E250 VA: 0xC6E250
	private int m_Collider; // 0x24
	[NativeNameAttribute] // RVA: 0xC6E288 Offset: 0xC6E288 VA: 0xC6E288
	private int m_OtherCollider; // 0x28
	[NativeNameAttribute] // RVA: 0xC6E2C0 Offset: 0xC6E2C0 VA: 0xC6E2C0
	private int m_Rigidbody; // 0x2C
	[NativeNameAttribute] // RVA: 0xC6E2F8 Offset: 0xC6E2F8 VA: 0xC6E2F8
	private int m_OtherRigidbody; // 0x30
	[NativeNameAttribute] // RVA: 0xC6E330 Offset: 0xC6E330 VA: 0xC6E330
	private int m_Enabled; // 0x34

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }

	// Methods

	// RVA: 0xBC17E8 Offset: 0xBC17E8 VA: 0xBC17E8
	public Vector2 get_point() { }

	// RVA: 0xBC17F0 Offset: 0xBC17F0 VA: 0xBC17F0
	public Vector2 get_normal() { }
}

// Namespace: UnityEngine
public struct JointAngleLimits2D // TypeDefIndex: 2797
{
	// Fields
	private float m_LowerAngle; // 0x0
	private float m_UpperAngle; // 0x4

	// Properties
	public float min { set; }
	public float max { set; }

	// Methods

	// RVA: 0xBC17F8 Offset: 0xBC17F8 VA: 0xBC17F8
	public void set_min(float value) { }

	// RVA: 0xBC1800 Offset: 0xBC1800 VA: 0xBC1800
	public void set_max(float value) { }
}

// Namespace: UnityEngine
public struct JointMotor2D // TypeDefIndex: 2798
{
	// Fields
	private float m_MotorSpeed; // 0x0
	private float m_MaximumMotorTorque; // 0x4

	// Properties
	public float motorSpeed { set; }
	public float maxMotorTorque { set; }

	// Methods

	// RVA: 0xBC1808 Offset: 0xBC1808 VA: 0xBC1808
	public void set_motorSpeed(float value) { }

	// RVA: 0xBC1810 Offset: 0xBC1810 VA: 0xBC1810
	public void set_maxMotorTorque(float value) { }
}

// Namespace: UnityEngine
public struct JointSuspension2D // TypeDefIndex: 2799
{
	// Fields
	private float m_DampingRatio; // 0x0
	private float m_Frequency; // 0x4
	private float m_Angle; // 0x8

	// Properties
	public float dampingRatio { set; }
	public float frequency { set; }
	public float angle { set; }

	// Methods

	// RVA: 0xBC1818 Offset: 0xBC1818 VA: 0xBC1818
	public void set_dampingRatio(float value) { }

	// RVA: 0xBC1820 Offset: 0xBC1820 VA: 0xBC1820
	public void set_frequency(float value) { }

	// RVA: 0xBC1828 Offset: 0xBC1828 VA: 0xBC1828
	public void set_angle(float value) { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC6DAF0 Offset: 0xC6DAF0 VA: 0xC6DAF0
[NativeHeaderAttribute] // RVA: 0xC6DAF0 Offset: 0xC6DAF0 VA: 0xC6DAF0
[RequiredByNativeCodeAttribute] // RVA: 0xC6DAF0 Offset: 0xC6DAF0 VA: 0xC6DAF0
public struct RaycastHit2D // TypeDefIndex: 2800
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC6E368 Offset: 0xC6E368 VA: 0xC6E368
	private Vector2 m_Centroid; // 0x0
	[NativeNameAttribute] // RVA: 0xC6E3A0 Offset: 0xC6E3A0 VA: 0xC6E3A0
	private Vector2 m_Point; // 0x8
	[NativeNameAttribute] // RVA: 0xC6E3D8 Offset: 0xC6E3D8 VA: 0xC6E3D8
	private Vector2 m_Normal; // 0x10
	[NativeNameAttribute] // RVA: 0xC6E410 Offset: 0xC6E410 VA: 0xC6E410
	private float m_Distance; // 0x18
	[NativeNameAttribute] // RVA: 0xC6E448 Offset: 0xC6E448 VA: 0xC6E448
	private float m_Fraction; // 0x1C
	[NativeNameAttribute] // RVA: 0xC6E480 Offset: 0xC6E480 VA: 0xC6E480
	private int m_Collider; // 0x20

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public float distance { get; }
	public float fraction { get; }
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public Transform transform { get; }

	// Methods

	// RVA: 0xBC1A40 Offset: 0xBC1A40 VA: 0xBC1A40
	public Vector2 get_point() { }

	// RVA: 0xBC1A48 Offset: 0xBC1A48 VA: 0xBC1A48
	public Vector2 get_normal() { }

	// RVA: 0xBC1A50 Offset: 0xBC1A50 VA: 0xBC1A50
	public float get_distance() { }

	// RVA: 0xBC1A58 Offset: 0xBC1A58 VA: 0xBC1A58
	public float get_fraction() { }

	// RVA: 0xBC1A60 Offset: 0xBC1A60 VA: 0xBC1A60
	public Collider2D get_collider() { }

	// RVA: 0xBC1A68 Offset: 0xBC1A68 VA: 0xBC1A68
	public Rigidbody2D get_rigidbody() { }

	// RVA: 0xBC1A70 Offset: 0xBC1A70 VA: 0xBC1A70
	public Transform get_transform() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC6DBA0 Offset: 0xC6DBA0 VA: 0xC6DBA0
[NativeHeaderAttribute] // RVA: 0xC6DBA0 Offset: 0xC6DBA0 VA: 0xC6DBA0
public sealed class Rigidbody2D : Component // TypeDefIndex: 2801
{
	// Properties
	public Vector2 velocity { get; set; }
	public float mass { get; set; }
	public float gravityScale { set; }
	public RigidbodyType2D bodyType { get; set; }
	public bool isKinematic { get; set; }
	public RigidbodyConstraints2D constraints { get; set; }

	// Methods

	// RVA: 0x135DF90 Offset: 0x135DF90 VA: 0x135DF90
	public void .ctor() { }

	// RVA: 0x135DF98 Offset: 0x135DF98 VA: 0x135DF98
	public Vector2 get_velocity() { }

	// RVA: 0x135E034 Offset: 0x135E034 VA: 0x135E034
	public void set_velocity(Vector2 value) { }

	// RVA: 0x135E0CC Offset: 0x135E0CC VA: 0x135E0CC
	public float get_mass() { }

	// RVA: 0x135E138 Offset: 0x135E138 VA: 0x135E138
	public void set_mass(float value) { }

	// RVA: 0x135E1AC Offset: 0x135E1AC VA: 0x135E1AC
	public void set_gravityScale(float value) { }

	// RVA: 0x135E220 Offset: 0x135E220 VA: 0x135E220
	public RigidbodyType2D get_bodyType() { }

	[NativeMethodAttribute] // RVA: 0xC6EAC0 Offset: 0xC6EAC0 VA: 0xC6EAC0
	// RVA: 0x135E28C Offset: 0x135E28C VA: 0x135E28C
	public void set_bodyType(RigidbodyType2D value) { }

	// RVA: 0x135E300 Offset: 0x135E300 VA: 0x135E300
	public bool get_isKinematic() { }

	// RVA: 0x135E31C Offset: 0x135E31C VA: 0x135E31C
	public void set_isKinematic(bool value) { }

	// RVA: 0x135E34C Offset: 0x135E34C VA: 0x135E34C
	public RigidbodyConstraints2D get_constraints() { }

	// RVA: 0x135E3B8 Offset: 0x135E3B8 VA: 0x135E3B8
	public void set_constraints(RigidbodyConstraints2D value) { }

	// RVA: 0x135E42C Offset: 0x135E42C VA: 0x135E42C
	public bool IsSleeping() { }

	// RVA: 0x135E498 Offset: 0x135E498 VA: 0x135E498
	public void Sleep() { }

	[NativeMethodAttribute] // RVA: 0xC6EAF8 Offset: 0xC6EAF8 VA: 0xC6EAF8
	// RVA: 0x135E504 Offset: 0x135E504 VA: 0x135E504
	public void WakeUp() { }

	// RVA: 0x135E570 Offset: 0x135E570 VA: 0x135E570
	public void AddForce(Vector2 force, ForceMode2D mode) { }

	// RVA: 0x135E620 Offset: 0x135E620 VA: 0x135E620
	public void AddRelativeForce(Vector2 relativeForce, ForceMode2D mode) { }

	// RVA: 0x135E6D0 Offset: 0x135E6D0 VA: 0x135E6D0
	public void AddForceAtPosition(Vector2 force, Vector2 position, ForceMode2D mode) { }

	// RVA: 0x135E790 Offset: 0x135E790 VA: 0x135E790
	public void AddTorque(float torque, ForceMode2D mode) { }

	// RVA: 0x135DFC0 Offset: 0x135DFC0 VA: 0x135DFC0
	private void get_velocity_Injected(out Vector2 ret) { }

	// RVA: 0x135E058 Offset: 0x135E058 VA: 0x135E058
	private void set_velocity_Injected(ref Vector2 value) { }

	// RVA: 0x135E59C Offset: 0x135E59C VA: 0x135E59C
	private void AddForce_Injected(ref Vector2 force, ForceMode2D mode) { }

	// RVA: 0x135E64C Offset: 0x135E64C VA: 0x135E64C
	private void AddRelativeForce_Injected(ref Vector2 relativeForce, ForceMode2D mode) { }

	// RVA: 0x135E704 Offset: 0x135E704 VA: 0x135E704
	private void AddForceAtPosition_Injected(ref Vector2 force, ref Vector2 position, ForceMode2D mode) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC6DC28 Offset: 0xC6DC28 VA: 0xC6DC28
[RequiredByNativeCodeAttribute] // RVA: 0xC6DC28 Offset: 0xC6DC28 VA: 0xC6DC28
[NativeHeaderAttribute] // RVA: 0xC6DC28 Offset: 0xC6DC28 VA: 0xC6DC28
public class Collider2D : Behaviour // TypeDefIndex: 2802
{
	// Properties
	public bool isTrigger { set; }
	public Vector2 offset { set; }
	public Rigidbody2D attachedRigidbody { get; }
	public int shapeCount { get; }
	public PhysicsMaterial2D sharedMaterial { get; }

	// Methods

	// RVA: 0x135A09C Offset: 0x135A09C VA: 0x135A09C
	public void .ctor() { }

	// RVA: 0x135A0A4 Offset: 0x135A0A4 VA: 0x135A0A4
	public void set_isTrigger(bool value) { }

	// RVA: 0x135A118 Offset: 0x135A118 VA: 0x135A118
	public void set_offset(Vector2 value) { }

	[NativeMethodAttribute] // RVA: 0xC6EB30 Offset: 0xC6EB30 VA: 0xC6EB30
	// RVA: 0x135A1B0 Offset: 0x135A1B0 VA: 0x135A1B0
	public Rigidbody2D get_attachedRigidbody() { }

	// RVA: 0x135A21C Offset: 0x135A21C VA: 0x135A21C
	public int get_shapeCount() { }

	[NativeMethodAttribute] // RVA: 0xC6EB68 Offset: 0xC6EB68 VA: 0xC6EB68
	// RVA: 0x135A288 Offset: 0x135A288 VA: 0x135A288
	public PhysicsMaterial2D get_sharedMaterial() { }

	// RVA: 0x135A13C Offset: 0x135A13C VA: 0x135A13C
	private void set_offset_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6DCD4 Offset: 0xC6DCD4 VA: 0xC6DCD4
public sealed class BoxCollider2D : Collider2D // TypeDefIndex: 2803
{
	// Properties
	public Vector2 size { set; }

	// Methods

	// RVA: 0x135A004 Offset: 0x135A004 VA: 0x135A004
	public void set_size(Vector2 value) { }

	// RVA: 0x135A028 Offset: 0x135A028 VA: 0x135A028
	private void set_size_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC6DD0C Offset: 0xC6DD0C VA: 0xC6DD0C
[NativeHeaderAttribute] // RVA: 0xC6DD0C Offset: 0xC6DD0C VA: 0xC6DD0C
public class Joint2D : Behaviour // TypeDefIndex: 2804
{
	// Properties
	public Vector2 reactionForce { get; }
	public float reactionTorque { get; }

	// Methods

	[NativeMethodAttribute] // RVA: 0xC6EBA0 Offset: 0xC6EBA0 VA: 0xC6EBA0
	// RVA: 0x135ABA4 Offset: 0x135ABA4 VA: 0x135ABA4
	public Vector2 get_reactionForce() { }

	[NativeMethodAttribute] // RVA: 0xC6EBD8 Offset: 0xC6EBD8 VA: 0xC6EBD8
	// RVA: 0x135AC40 Offset: 0x135AC40 VA: 0x135AC40
	public float get_reactionTorque() { }

	// RVA: 0x135ABCC Offset: 0x135ABCC VA: 0x135ABCC
	private void get_reactionForce_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6DDB8 Offset: 0xC6DDB8 VA: 0xC6DDB8
public class AnchoredJoint2D : Joint2D // TypeDefIndex: 2805
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6DDF0 Offset: 0xC6DDF0 VA: 0xC6DDF0
public sealed class HingeJoint2D : AnchoredJoint2D // TypeDefIndex: 2806
{
	// Properties
	public bool useMotor { set; }
	public bool useLimits { set; }
	public JointMotor2D motor { get; set; }
	public JointAngleLimits2D limits { get; set; }

	// Methods

	// RVA: 0x135A854 Offset: 0x135A854 VA: 0x135A854
	public void set_useMotor(bool value) { }

	// RVA: 0x135A8C8 Offset: 0x135A8C8 VA: 0x135A8C8
	public void set_useLimits(bool value) { }

	// RVA: 0x135A93C Offset: 0x135A93C VA: 0x135A93C
	public JointMotor2D get_motor() { }

	// RVA: 0x135A9D8 Offset: 0x135A9D8 VA: 0x135A9D8
	public void set_motor(JointMotor2D value) { }

	// RVA: 0x135AA70 Offset: 0x135AA70 VA: 0x135AA70
	public JointAngleLimits2D get_limits() { }

	// RVA: 0x135AB0C Offset: 0x135AB0C VA: 0x135AB0C
	public void set_limits(JointAngleLimits2D value) { }

	// RVA: 0x135A964 Offset: 0x135A964 VA: 0x135A964
	private void get_motor_Injected(out JointMotor2D ret) { }

	// RVA: 0x135A9FC Offset: 0x135A9FC VA: 0x135A9FC
	private void set_motor_Injected(ref JointMotor2D value) { }

	// RVA: 0x135AA98 Offset: 0x135AA98 VA: 0x135AA98
	private void get_limits_Injected(out JointAngleLimits2D ret) { }

	// RVA: 0x135AB30 Offset: 0x135AB30 VA: 0x135AB30
	private void set_limits_Injected(ref JointAngleLimits2D value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6DE28 Offset: 0xC6DE28 VA: 0xC6DE28
public sealed class WheelJoint2D : AnchoredJoint2D // TypeDefIndex: 2807
{
	// Properties
	public JointSuspension2D suspension { get; set; }
	public bool useMotor { set; }
	public JointMotor2D motor { get; set; }

	// Methods

	// RVA: 0x135E81C Offset: 0x135E81C VA: 0x135E81C
	public JointSuspension2D get_suspension() { }

	// RVA: 0x135E8C0 Offset: 0x135E8C0 VA: 0x135E8C0
	public void set_suspension(JointSuspension2D value) { }

	// RVA: 0x135E95C Offset: 0x135E95C VA: 0x135E95C
	public void set_useMotor(bool value) { }

	// RVA: 0x135E9D0 Offset: 0x135E9D0 VA: 0x135E9D0
	public JointMotor2D get_motor() { }

	// RVA: 0x135EA6C Offset: 0x135EA6C VA: 0x135EA6C
	public void set_motor(JointMotor2D value) { }

	// RVA: 0x135E84C Offset: 0x135E84C VA: 0x135E84C
	private void get_suspension_Injected(out JointSuspension2D ret) { }

	// RVA: 0x135E8E8 Offset: 0x135E8E8 VA: 0x135E8E8
	private void set_suspension_Injected(ref JointSuspension2D value) { }

	// RVA: 0x135E9F8 Offset: 0x135E9F8 VA: 0x135E9F8
	private void get_motor_Injected(out JointMotor2D ret) { }

	// RVA: 0x135EA90 Offset: 0x135EA90 VA: 0x135EA90
	private void set_motor_Injected(ref JointMotor2D value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6DE60 Offset: 0xC6DE60 VA: 0xC6DE60
public sealed class PhysicsMaterial2D : Object // TypeDefIndex: 2808
{
	// Methods

	// RVA: 0x135D4BC Offset: 0x135D4BC VA: 0x135D4BC
	public void .ctor() { }

	[NativeMethodAttribute] // RVA: 0xC6EC10 Offset: 0xC6EC10 VA: 0xC6EC10
	// RVA: 0x135D530 Offset: 0x135D530 VA: 0x135D530
	private static void Create_Internal(PhysicsMaterial2D scriptMaterial, string name) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2809
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC707A4 Offset: 0xC707A4 VA: 0xC707A4
public static class ScreenCapture // TypeDefIndex: 2810
{
	// Methods

	// RVA: 0x138ACE8 Offset: 0x138ACE8 VA: 0x138ACE8
	public static void CaptureScreenshot(string filename) { }

	// RVA: 0x138AD78 Offset: 0x138AD78 VA: 0x138AD78
	public static void CaptureScreenshot(string filename, int superSize) { }

	// RVA: 0x138ACF4 Offset: 0x138ACF4 VA: 0x138ACF4
	private static void CaptureScreenshot(string filename, int superSize, ScreenCapture.StereoScreenCaptureMode CaptureMode) { }
}

// Namespace: 
public enum ScreenCapture.StereoScreenCaptureMode // TypeDefIndex: 2811
{
	// Fields
	public int value__; // 0x0
	public const ScreenCapture.StereoScreenCaptureMode LeftEye = 1;
	public const ScreenCapture.StereoScreenCaptureMode RightEye = 2;
	public const ScreenCapture.StereoScreenCaptureMode BothEyes = 3;
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2812
{}

// Namespace: UnityEngine
[RejectDragAndDropMaterial] // RVA: 0xC7194C Offset: 0xC7194C VA: 0xC7194C
[NativeTypeAttribute] // RVA: 0xC7194C Offset: 0xC7194C VA: 0xC7194C
public sealed class SpriteMask : Renderer // TypeDefIndex: 2813
{
	// Properties
	public int frontSortingLayerID { get; set; }
	public int frontSortingOrder { get; set; }
	public int backSortingLayerID { get; set; }
	public int backSortingOrder { get; set; }
	public float alphaCutoff { get; set; }
	public Sprite sprite { get; set; }
	public bool isCustomRangeActive { get; set; }
	public SpriteSortPoint spriteSortPoint { get; set; }

	// Methods

	// RVA: 0x13891A4 Offset: 0x13891A4 VA: 0x13891A4
	public void .ctor() { }

	// RVA: 0x13891AC Offset: 0x13891AC VA: 0x13891AC
	public int get_frontSortingLayerID() { }

	// RVA: 0x1389218 Offset: 0x1389218 VA: 0x1389218
	public void set_frontSortingLayerID(int value) { }

	// RVA: 0x138928C Offset: 0x138928C VA: 0x138928C
	public int get_frontSortingOrder() { }

	// RVA: 0x13892F8 Offset: 0x13892F8 VA: 0x13892F8
	public void set_frontSortingOrder(int value) { }

	// RVA: 0x138936C Offset: 0x138936C VA: 0x138936C
	public int get_backSortingLayerID() { }

	// RVA: 0x13893D8 Offset: 0x13893D8 VA: 0x13893D8
	public void set_backSortingLayerID(int value) { }

	// RVA: 0x138944C Offset: 0x138944C VA: 0x138944C
	public int get_backSortingOrder() { }

	// RVA: 0x13894B8 Offset: 0x13894B8 VA: 0x13894B8
	public void set_backSortingOrder(int value) { }

	// RVA: 0x138952C Offset: 0x138952C VA: 0x138952C
	public float get_alphaCutoff() { }

	// RVA: 0x1389598 Offset: 0x1389598 VA: 0x1389598
	public void set_alphaCutoff(float value) { }

	// RVA: 0x138960C Offset: 0x138960C VA: 0x138960C
	public Sprite get_sprite() { }

	// RVA: 0x1389678 Offset: 0x1389678 VA: 0x1389678
	public void set_sprite(Sprite value) { }

	[NativeMethodAttribute] // RVA: 0xC719A4 Offset: 0xC719A4 VA: 0xC719A4
	// RVA: 0x13896EC Offset: 0x13896EC VA: 0x13896EC
	public bool get_isCustomRangeActive() { }

	[NativeMethodAttribute] // RVA: 0xC719DC Offset: 0xC719DC VA: 0xC719DC
	// RVA: 0x1389758 Offset: 0x1389758 VA: 0x1389758
	public void set_isCustomRangeActive(bool value) { }

	// RVA: 0x13897CC Offset: 0x13897CC VA: 0x13897CC
	public SpriteSortPoint get_spriteSortPoint() { }

	// RVA: 0x1389838 Offset: 0x1389838 VA: 0x1389838
	public void set_spriteSortPoint(SpriteSortPoint value) { }

	// RVA: 0x13898AC Offset: 0x13898AC VA: 0x13898AC
	internal Bounds GetSpriteBounds() { }

	// RVA: 0x13898EC Offset: 0x13898EC VA: 0x13898EC
	private void GetSpriteBounds_Injected(out Bounds ret) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2814
{}

// Namespace: UnityEngine
public enum RenderMode // TypeDefIndex: 2815
{
	// Fields
	public int value__; // 0x0
	public const RenderMode ScreenSpaceOverlay = 0;
	public const RenderMode ScreenSpaceCamera = 1;
	public const RenderMode WorldSpace = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC72B14 Offset: 0xC72B14 VA: 0xC72B14
[RequireComponent] // RVA: 0xC72B14 Offset: 0xC72B14 VA: 0xC72B14
[NativeClassAttribute] // RVA: 0xC72B14 Offset: 0xC72B14 VA: 0xC72B14
[NativeHeaderAttribute] // RVA: 0xC72B14 Offset: 0xC72B14 VA: 0xC72B14
public sealed class Canvas : Behaviour // TypeDefIndex: 2816
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xC72DD8 Offset: 0xC72DD8 VA: 0xC72DD8
	[CompilerGeneratedAttribute] // RVA: 0xC72DD8 Offset: 0xC72DD8 VA: 0xC72DD8
	private static Canvas.WillRenderCanvases willRenderCanvases; // 0x0

	// Properties
	public RenderMode renderMode { get; }
	public bool isRootCanvas { get; }
	public float scaleFactor { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public bool pixelPerfect { get; }
	public int renderOrder { get; }
	public bool overrideSorting { get; set; }
	public int sortingOrder { get; set; }
	public int targetDisplay { get; }
	public int sortingLayerID { get; set; }
	public Canvas rootCanvas { get; }
	[NativePropertyAttribute] // RVA: 0xC72F84 Offset: 0xC72F84 VA: 0xC72F84
	public Camera worldCamera { get; }

	// Methods

	// RVA: 0x2B941B0 Offset: 0x2B941B0 VA: 0x2B941B0
	public void .ctor() { }

	// RVA: 0x2B941B8 Offset: 0x2B941B8 VA: 0x2B941B8
	public static void add_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x2B942B8 Offset: 0x2B942B8 VA: 0x2B942B8
	public static void remove_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x2B943B8 Offset: 0x2B943B8 VA: 0x2B943B8
	public RenderMode get_renderMode() { }

	// RVA: 0x2B94424 Offset: 0x2B94424 VA: 0x2B94424
	public bool get_isRootCanvas() { }

	// RVA: 0x2B94490 Offset: 0x2B94490 VA: 0x2B94490
	public float get_scaleFactor() { }

	// RVA: 0x2B944FC Offset: 0x2B944FC VA: 0x2B944FC
	public void set_scaleFactor(float value) { }

	// RVA: 0x2B94570 Offset: 0x2B94570 VA: 0x2B94570
	public float get_referencePixelsPerUnit() { }

	// RVA: 0x2B945DC Offset: 0x2B945DC VA: 0x2B945DC
	public void set_referencePixelsPerUnit(float value) { }

	// RVA: 0x2B94650 Offset: 0x2B94650 VA: 0x2B94650
	public bool get_pixelPerfect() { }

	// RVA: 0x2B946BC Offset: 0x2B946BC VA: 0x2B946BC
	public int get_renderOrder() { }

	// RVA: 0x2B94728 Offset: 0x2B94728 VA: 0x2B94728
	public bool get_overrideSorting() { }

	// RVA: 0x2B94794 Offset: 0x2B94794 VA: 0x2B94794
	public void set_overrideSorting(bool value) { }

	// RVA: 0x2B94808 Offset: 0x2B94808 VA: 0x2B94808
	public int get_sortingOrder() { }

	// RVA: 0x2B94874 Offset: 0x2B94874 VA: 0x2B94874
	public void set_sortingOrder(int value) { }

	// RVA: 0x2B948E8 Offset: 0x2B948E8 VA: 0x2B948E8
	public int get_targetDisplay() { }

	// RVA: 0x2B94954 Offset: 0x2B94954 VA: 0x2B94954
	public int get_sortingLayerID() { }

	// RVA: 0x2B949C0 Offset: 0x2B949C0 VA: 0x2B949C0
	public void set_sortingLayerID(int value) { }

	// RVA: 0x2B94A34 Offset: 0x2B94A34 VA: 0x2B94A34
	public Canvas get_rootCanvas() { }

	// RVA: 0x2B94AA0 Offset: 0x2B94AA0 VA: 0x2B94AA0
	public Camera get_worldCamera() { }

	[FreeFunctionAttribute] // RVA: 0xC72E50 Offset: 0xC72E50 VA: 0xC72E50
	// RVA: 0x2B94B0C Offset: 0x2B94B0C VA: 0x2B94B0C
	public static Material GetDefaultCanvasMaterial() { }

	[FreeFunctionAttribute] // RVA: 0xC72E88 Offset: 0xC72E88 VA: 0xC72E88
	// RVA: 0x2B94B64 Offset: 0x2B94B64 VA: 0x2B94B64
	public static Material GetETC1SupportedCanvasMaterial() { }

	// RVA: 0x2B94BBC Offset: 0x2B94BBC VA: 0x2B94BBC
	public static void ForceUpdateCanvases() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC72EC0 Offset: 0xC72EC0 VA: 0xC72EC0
	// RVA: 0x2B94BC0 Offset: 0x2B94BC0 VA: 0x2B94BC0
	private static void SendWillRenderCanvases() { }
}

// Namespace: 
public sealed class Canvas.WillRenderCanvases : MulticastDelegate // TypeDefIndex: 2817
{
	// Methods

	// RVA: 0x2B94E24 Offset: 0x2B94E24 VA: 0x2B94E24
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2B94C24 Offset: 0x2B94C24 VA: 0x2B94C24 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x2B94E34 Offset: 0x2B94E34 VA: 0x2B94E34 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x2B94E68 Offset: 0x2B94E68 VA: 0x2B94E68 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xC72BE4 Offset: 0xC72BE4 VA: 0xC72BE4
[NativeHeaderAttribute] // RVA: 0xC72BE4 Offset: 0xC72BE4 VA: 0xC72BE4
public static class UISystemProfilerApi // TypeDefIndex: 2818
{
	// Methods

	// RVA: 0x2B96EE4 Offset: 0x2B96EE4 VA: 0x2B96EE4
	public static void BeginSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x2B96F50 Offset: 0x2B96F50 VA: 0x2B96F50
	public static void EndSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x2B96FBC Offset: 0x2B96FBC VA: 0x2B96FBC
	public static void AddMarker(string name, Object obj) { }
}

// Namespace: 
public enum UISystemProfilerApi.SampleType // TypeDefIndex: 2819
{
	// Fields
	public int value__; // 0x0
	public const UISystemProfilerApi.SampleType Layout = 0;
	public const UISystemProfilerApi.SampleType Render = 1;
}

// Namespace: UnityEngine
public interface ICanvasRaycastFilter // TypeDefIndex: 2820
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC72C48 Offset: 0xC72C48 VA: 0xC72C48
[NativeHeaderAttribute] // RVA: 0xC72C48 Offset: 0xC72C48 VA: 0xC72C48
public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2821
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xC72FC4 Offset: 0xC72FC4 VA: 0xC72FC4
	public float alpha { get; set; }
	[NativePropertyAttribute] // RVA: 0xC73004 Offset: 0xC73004 VA: 0xC73004
	public bool interactable { get; set; }
	[NativePropertyAttribute] // RVA: 0xC73044 Offset: 0xC73044 VA: 0xC73044
	public bool blocksRaycasts { get; set; }
	[NativePropertyAttribute] // RVA: 0xC73084 Offset: 0xC73084 VA: 0xC73084
	public bool ignoreParentGroups { get; set; }

	// Methods

	// RVA: 0x2B94E74 Offset: 0x2B94E74 VA: 0x2B94E74
	public float get_alpha() { }

	// RVA: 0x2B94EE0 Offset: 0x2B94EE0 VA: 0x2B94EE0
	public void set_alpha(float value) { }

	// RVA: 0x2B94F54 Offset: 0x2B94F54 VA: 0x2B94F54
	public bool get_interactable() { }

	// RVA: 0x2B94FC0 Offset: 0x2B94FC0 VA: 0x2B94FC0
	public void set_interactable(bool value) { }

	// RVA: 0x2B95034 Offset: 0x2B95034 VA: 0x2B95034
	public bool get_blocksRaycasts() { }

	// RVA: 0x2B950A0 Offset: 0x2B950A0 VA: 0x2B950A0
	public void set_blocksRaycasts(bool value) { }

	// RVA: 0x2B95114 Offset: 0x2B95114 VA: 0x2B95114
	public bool get_ignoreParentGroups() { }

	// RVA: 0x2B95180 Offset: 0x2B95180 VA: 0x2B95180
	public void set_ignoreParentGroups(bool value) { }

	// RVA: 0x2B951F4 Offset: 0x2B951F4 VA: 0x2B951F4 Slot: 4
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC72CA8 Offset: 0xC72CA8 VA: 0xC72CA8
[NativeClassAttribute] // RVA: 0xC72CA8 Offset: 0xC72CA8 VA: 0xC72CA8
public sealed class CanvasRenderer : Component // TypeDefIndex: 2822
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC72E14 Offset: 0xC72E14 VA: 0xC72E14
	[DebuggerBrowsableAttribute] // RVA: 0xC72E14 Offset: 0xC72E14 VA: 0xC72E14
	private bool <isMask>k__BackingField; // 0x18

	// Properties
	public bool hasPopInstruction { set; }
	public int materialCount { get; set; }
	public int popMaterialCount { set; }
	public int absoluteDepth { get; }
	public bool hasMoved { get; }
	[NativePropertyAttribute] // RVA: 0xC730C4 Offset: 0xC730C4 VA: 0xC730C4
	public bool cull { get; set; }

	// Methods

	// RVA: 0x2B951F8 Offset: 0x2B951F8 VA: 0x2B951F8
	public void set_hasPopInstruction(bool value) { }

	// RVA: 0x2B9526C Offset: 0x2B9526C VA: 0x2B9526C
	public int get_materialCount() { }

	// RVA: 0x2B952D8 Offset: 0x2B952D8 VA: 0x2B952D8
	public void set_materialCount(int value) { }

	// RVA: 0x2B9534C Offset: 0x2B9534C VA: 0x2B9534C
	public void set_popMaterialCount(int value) { }

	// RVA: 0x2B953C0 Offset: 0x2B953C0 VA: 0x2B953C0
	public int get_absoluteDepth() { }

	// RVA: 0x2B9542C Offset: 0x2B9542C VA: 0x2B9542C
	public bool get_hasMoved() { }

	// RVA: 0x2B95498 Offset: 0x2B95498 VA: 0x2B95498
	public bool get_cull() { }

	// RVA: 0x2B95504 Offset: 0x2B95504 VA: 0x2B95504
	public void set_cull(bool value) { }

	// RVA: 0x2B95578 Offset: 0x2B95578 VA: 0x2B95578
	public void SetColor(Color color) { }

	// RVA: 0x2B95614 Offset: 0x2B95614 VA: 0x2B95614
	public Color GetColor() { }

	// RVA: 0x2B956B4 Offset: 0x2B956B4 VA: 0x2B956B4
	public void EnableRectClipping(Rect rect) { }

	// RVA: 0x2B95750 Offset: 0x2B95750 VA: 0x2B95750
	public void DisableRectClipping() { }

	// RVA: 0x2B957BC Offset: 0x2B957BC VA: 0x2B957BC
	public void SetMaterial(Material material, int index) { }

	// RVA: 0x2B95840 Offset: 0x2B95840 VA: 0x2B95840
	public void SetPopMaterial(Material material, int index) { }

	// RVA: 0x2B958C4 Offset: 0x2B958C4 VA: 0x2B958C4
	public void SetTexture(Texture texture) { }

	// RVA: 0x2B95938 Offset: 0x2B95938 VA: 0x2B95938
	public void SetAlphaTexture(Texture texture) { }

	// RVA: 0x2B959AC Offset: 0x2B959AC VA: 0x2B959AC
	public void SetMesh(Mesh mesh) { }

	// RVA: 0x2B95A20 Offset: 0x2B95A20 VA: 0x2B95A20
	public void Clear() { }

	// RVA: 0x2B95A8C Offset: 0x2B95A8C VA: 0x2B95A8C
	public void SetMaterial(Material material, Texture texture) { }

	// RVA: 0x2B95AF0 Offset: 0x2B95AF0 VA: 0x2B95AF0
	public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }

	// RVA: 0x2B95C68 Offset: 0x2B95C68 VA: 0x2B95C68
	public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }

	// RVA: 0x2B95D44 Offset: 0x2B95D44 VA: 0x2B95D44
	public static void AddUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents) { }

	[StaticAccessorAttribute] // RVA: 0xC72ED0 Offset: 0xC72ED0 VA: 0xC72ED0
	// RVA: 0x2B95BF4 Offset: 0x2B95BF4 VA: 0x2B95BF4
	private static void SplitIndicesStreamsInternal(object verts, object indices) { }

	[StaticAccessorAttribute] // RVA: 0xC72F0C Offset: 0xC72F0C VA: 0xC72F0C
	// RVA: 0x2B95B28 Offset: 0x2B95B28 VA: 0x2B95B28
	private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents) { }

	[StaticAccessorAttribute] // RVA: 0xC72F48 Offset: 0xC72F48 VA: 0xC72F48
	// RVA: 0x2B95C74 Offset: 0x2B95C74 VA: 0x2B95C74
	private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices) { }

	// RVA: 0x2B955A0 Offset: 0x2B955A0 VA: 0x2B955A0
	private void SetColor_Injected(ref Color color) { }

	// RVA: 0x2B95640 Offset: 0x2B95640 VA: 0x2B95640
	private void GetColor_Injected(out Color ret) { }

	// RVA: 0x2B956DC Offset: 0x2B956DC VA: 0x2B956DC
	private void EnableRectClipping_Injected(ref Rect rect) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC72D08 Offset: 0xC72D08 VA: 0xC72D08
[NativeHeaderAttribute] // RVA: 0xC72D08 Offset: 0xC72D08 VA: 0xC72D08
[NativeHeaderAttribute] // RVA: 0xC72D08 Offset: 0xC72D08 VA: 0xC72D08
[NativeHeaderAttribute] // RVA: 0xC72D08 Offset: 0xC72D08 VA: 0xC72D08
[StaticAccessorAttribute] // RVA: 0xC72D08 Offset: 0xC72D08 VA: 0xC72D08
public sealed class RectTransformUtility // TypeDefIndex: 2823
{
	// Fields
	private static readonly Vector3[] s_Corners; // 0x0

	// Methods

	// RVA: 0x2B95D50 Offset: 0x2B95D50 VA: 0x2B95D50
	public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam) { }

	// RVA: 0x2B95E60 Offset: 0x2B95E60 VA: 0x2B95E60
	public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint) { }

	// RVA: 0x2B9624C Offset: 0x2B9624C VA: 0x2B9624C
	public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint) { }

	// RVA: 0x2B96090 Offset: 0x2B96090 VA: 0x2B96090
	public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos) { }

	// RVA: 0x2B963A0 Offset: 0x2B963A0 VA: 0x2B963A0
	public static Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint) { }

	// RVA: 0x2B964B4 Offset: 0x2B964B4 VA: 0x2B964B4
	public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive) { }

	// RVA: 0x2B967F0 Offset: 0x2B967F0 VA: 0x2B967F0
	public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive) { }

	// RVA: 0x2B96B90 Offset: 0x2B96B90 VA: 0x2B96B90
	private static Vector2 GetTransposed(Vector2 input) { }

	// RVA: 0x2B96BC8 Offset: 0x2B96BC8 VA: 0x2B96BC8
	public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas) { }

	// RVA: 0x2B96CE8 Offset: 0x2B96CE8 VA: 0x2B96CE8
	public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas) { }

	// RVA: 0x2B95DDC Offset: 0x2B95DDC VA: 0x2B95DDC
	private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam) { }

	// RVA: 0x2B96E80 Offset: 0x2B96E80 VA: 0x2B96E80
	private static void .cctor() { }

	// RVA: 0x2B96C5C Offset: 0x2B96C5C VA: 0x2B96C5C
	private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret) { }

	// RVA: 0x2B96D78 Offset: 0x2B96D78 VA: 0x2B96D78
	private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret) { }

	// RVA: 0x2B96DFC Offset: 0x2B96DFC VA: 0x2B96DFC
	private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2824
{}

