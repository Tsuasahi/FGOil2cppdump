	// RVA: 0x2B6A960 Offset: 0x2B6A960 VA: 0x2B6A960
	public static Collider2D OverlapPoint(Vector2 point, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC0283C Offset: 0xC0283C VA: 0xC0283C
	// RVA: 0x2B6AA70 Offset: 0x2B6AA70 VA: 0x2B6AA70
	public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask) { }

	// RVA: 0x2B6ABB8 Offset: 0x2B6ABB8 VA: 0x2B6ABB8
	public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth, float maxDepth) { }

	[StaticAccessorAttribute] // RVA: 0xC0284C Offset: 0xC0284C VA: 0xC0284C
	[NativeMethodAttribute] // RVA: 0xC0284C Offset: 0xC0284C VA: 0xC0284C
	// RVA: 0x2B6AB38 Offset: 0x2B6AB38 VA: 0x2B6AB38
	private static Collider2D[] OverlapPointAll_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC028B0 Offset: 0xC028B0 VA: 0xC028B0
	// RVA: 0x2B6AD0C Offset: 0x2B6AD0C VA: 0x2B6AD0C
	public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask) { }

	// RVA: 0x2B6AE74 Offset: 0x2B6AE74 VA: 0x2B6AE74
	public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth) { }

	[StaticAccessorAttribute] // RVA: 0xC028C0 Offset: 0xC028C0 VA: 0xC028C0
	[NativeMethodAttribute] // RVA: 0xC028C0 Offset: 0xC028C0 VA: 0xC028C0
	// RVA: 0x2B6ADE4 Offset: 0x2B6ADE4 VA: 0x2B6ADE4
	private static Collider2D[] OverlapCircleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter) { }

	// RVA: 0x2B6AFE0 Offset: 0x2B6AFE0 VA: 0x2B6AFE0
	public static Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth) { }

	[NativeMethodAttribute] // RVA: 0xC02924 Offset: 0xC02924 VA: 0xC02924
	[StaticAccessorAttribute] // RVA: 0xC02924 Offset: 0xC02924 VA: 0xC02924
	// RVA: 0x2B6B0D8 Offset: 0x2B6B0D8 VA: 0x2B6B0D8
	private static Collider2D[] OverlapBoxAll_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC02988 Offset: 0xC02988 VA: 0xC02988
	// RVA: 0x2B6B214 Offset: 0x2B6B214 VA: 0x2B6B214
	public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask) { }

	// RVA: 0x2B6B40C Offset: 0x2B6B40C VA: 0x2B6B40C
	public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth) { }

	// RVA: 0x2B6B2B8 Offset: 0x2B6B2B8 VA: 0x2B6B2B8
	private static Collider2D[] OverlapAreaAllToBox_Internal(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth) { }

	// RVA: 0x2B6B4B8 Offset: 0x2B6B4B8 VA: 0x2B6B4B8
	private static void .cctor() { }

	// RVA: 0x2B68DC0 Offset: 0x2B68DC0 VA: 0x2B68DC0
	private static void get_defaultPhysicsScene_Injected(out PhysicsScene2D ret) { }

	// RVA: 0x2B68E94 Offset: 0x2B68E94 VA: 0x2B68E94
	private static void set_gravity_Injected(ref Vector2 value) { }

	// RVA: 0x2B69428 Offset: 0x2B69428 VA: 0x2B69428
	private static RaycastHit2D[] LinecastAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 start, ref Vector2 end, ref ContactFilter2D contactFilter) { }

	// RVA: 0x2B6A00C Offset: 0x2B6A00C VA: 0x2B6A00C
	private static RaycastHit2D[] RaycastAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter) { }

	// RVA: 0x2B6A614 Offset: 0x2B6A614 VA: 0x2B6A614
	private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask) { }

	// RVA: 0x2B6AC88 Offset: 0x2B6AC88 VA: 0x2B6AC88
	private static Collider2D[] OverlapPointAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref ContactFilter2D contactFilter) { }

	// RVA: 0x2B6AF54 Offset: 0x2B6AF54 VA: 0x2B6AF54
	private static Collider2D[] OverlapCircleAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, float radius, ref ContactFilter2D contactFilter) { }

	// RVA: 0x2B6B170 Offset: 0x2B6B170 VA: 0x2B6B170
	private static Collider2D[] OverlapBoxAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref Vector2 size, float angle, ref ContactFilter2D contactFilter) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xC01850 Offset: 0xC01850 VA: 0xC01850
public enum RigidbodyConstraints2D // TypeDefIndex: 2791
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyConstraints2D None = 0;
	public const RigidbodyConstraints2D FreezePositionX = 1;
	public const RigidbodyConstraints2D FreezePositionY = 2;
	public const RigidbodyConstraints2D FreezeRotation = 4;
	public const RigidbodyConstraints2D FreezePosition = 3;
	public const RigidbodyConstraints2D FreezeAll = 7;
}

// Namespace: UnityEngine
public enum RigidbodyType2D // TypeDefIndex: 2792
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyType2D Dynamic = 0;
	public const RigidbodyType2D Kinematic = 1;
	public const RigidbodyType2D Static = 2;
}

// Namespace: UnityEngine
public enum ForceMode2D // TypeDefIndex: 2793
{
	// Fields
	public int value__; // 0x0
	public const ForceMode2D Force = 0;
	public const ForceMode2D Impulse = 1;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC01860 Offset: 0xC01860 VA: 0xC01860
[NativeHeaderAttribute] // RVA: 0xC01860 Offset: 0xC01860 VA: 0xC01860
[NativeClassAttribute] // RVA: 0xC01860 Offset: 0xC01860 VA: 0xC01860
[Serializable]
public struct ContactFilter2D // TypeDefIndex: 2794
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC01D70 Offset: 0xC01D70 VA: 0xC01D70
	public bool useTriggers; // 0x0
	[NativeNameAttribute] // RVA: 0xC01DA8 Offset: 0xC01DA8 VA: 0xC01DA8
	public bool useLayerMask; // 0x1
	[NativeNameAttribute] // RVA: 0xC01DE0 Offset: 0xC01DE0 VA: 0xC01DE0
	public bool useDepth; // 0x2
	[NativeNameAttribute] // RVA: 0xC01E18 Offset: 0xC01E18 VA: 0xC01E18
	public bool useOutsideDepth; // 0x3
	[NativeNameAttribute] // RVA: 0xC01E50 Offset: 0xC01E50 VA: 0xC01E50
	public bool useNormalAngle; // 0x4
	[NativeNameAttribute] // RVA: 0xC01E88 Offset: 0xC01E88 VA: 0xC01E88
	public bool useOutsideNormalAngle; // 0x5
	[NativeNameAttribute] // RVA: 0xC01EC0 Offset: 0xC01EC0 VA: 0xC01EC0
	public LayerMask layerMask; // 0x8
	[NativeNameAttribute] // RVA: 0xC01EF8 Offset: 0xC01EF8 VA: 0xC01EF8
	public float minDepth; // 0xC
	[NativeNameAttribute] // RVA: 0xC01F30 Offset: 0xC01F30 VA: 0xC01F30
	public float maxDepth; // 0x10
	[NativeNameAttribute] // RVA: 0xC01F68 Offset: 0xC01F68 VA: 0xC01F68
	public float minNormalAngle; // 0x14
	[NativeNameAttribute] // RVA: 0xC01FA0 Offset: 0xC01FA0 VA: 0xC01FA0
	public float maxNormalAngle; // 0x18

	// Methods

	// RVA: 0xD78B90 Offset: 0xD78B90 VA: 0xD78B90
	private void CheckConsistency() { }

	// RVA: 0xD78B98 Offset: 0xD78B98 VA: 0xD78B98
	public void SetLayerMask(LayerMask layerMask) { }

	// RVA: 0xD78BA8 Offset: 0xD78BA8 VA: 0xD78BA8
	public void SetDepth(float minDepth, float maxDepth) { }

	// RVA: 0x2B6878C Offset: 0x2B6878C VA: 0x2B6878C
	internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC01908 Offset: 0xC01908 VA: 0xC01908
public class Collision2D // TypeDefIndex: 2795
{
	// Fields
	internal int m_Collider; // 0x10
	internal int m_OtherCollider; // 0x14
	internal int m_Rigidbody; // 0x18
	internal int m_OtherRigidbody; // 0x1C
	internal Vector2 m_RelativeVelocity; // 0x20
	internal int m_Enabled; // 0x28
	internal int m_ContactCount; // 0x2C
	internal ContactPoint2D[] m_RecycledContacts; // 0x30
	internal ContactPoint2D[] m_LegacyContacts; // 0x38

	// Properties
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public GameObject gameObject { get; }
	public Vector2 relativeVelocity { get; }
	public ContactPoint2D[] contacts { get; }

	// Methods

	// RVA: 0x2B68364 Offset: 0x2B68364 VA: 0x2B68364
	public Collider2D get_collider() { }

	// RVA: 0x2B68414 Offset: 0x2B68414 VA: 0x2B68414
	public Rigidbody2D get_rigidbody() { }

	// RVA: 0x2B684A0 Offset: 0x2B684A0 VA: 0x2B684A0
	public GameObject get_gameObject() { }

	// RVA: 0x2B6854C Offset: 0x2B6854C VA: 0x2B6854C
	public Vector2 get_relativeVelocity() { }

	// RVA: 0x2B68554 Offset: 0x2B68554 VA: 0x2B68554
	public ContactPoint2D[] get_contacts() { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC01918 Offset: 0xC01918 VA: 0xC01918
[RequiredByNativeCodeAttribute] // RVA: 0xC01918 Offset: 0xC01918 VA: 0xC01918
[NativeHeaderAttribute] // RVA: 0xC01918 Offset: 0xC01918 VA: 0xC01918
public struct ContactPoint2D // TypeDefIndex: 2796
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC01FD8 Offset: 0xC01FD8 VA: 0xC01FD8
	private Vector2 m_Point; // 0x0
	[NativeNameAttribute] // RVA: 0xC02010 Offset: 0xC02010 VA: 0xC02010
	private Vector2 m_Normal; // 0x8
	[NativeNameAttribute] // RVA: 0xC02048 Offset: 0xC02048 VA: 0xC02048
	private Vector2 m_RelativeVelocity; // 0x10
	[NativeNameAttribute] // RVA: 0xC02080 Offset: 0xC02080 VA: 0xC02080
	private float m_Separation; // 0x18
	[NativeNameAttribute] // RVA: 0xC020B8 Offset: 0xC020B8 VA: 0xC020B8
	private float m_NormalImpulse; // 0x1C
	[NativeNameAttribute] // RVA: 0xC020F0 Offset: 0xC020F0 VA: 0xC020F0
	private float m_TangentImpulse; // 0x20
	[NativeNameAttribute] // RVA: 0xC02128 Offset: 0xC02128 VA: 0xC02128
	private int m_Collider; // 0x24
	[NativeNameAttribute] // RVA: 0xC02160 Offset: 0xC02160 VA: 0xC02160
	private int m_OtherCollider; // 0x28
	[NativeNameAttribute] // RVA: 0xC02198 Offset: 0xC02198 VA: 0xC02198
	private int m_Rigidbody; // 0x2C
	[NativeNameAttribute] // RVA: 0xC021D0 Offset: 0xC021D0 VA: 0xC021D0
	private int m_OtherRigidbody; // 0x30
	[NativeNameAttribute] // RVA: 0xC02208 Offset: 0xC02208 VA: 0xC02208
	private int m_Enabled; // 0x34

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }

	// Methods

	// RVA: 0xD78BC0 Offset: 0xD78BC0 VA: 0xD78BC0
	public Vector2 get_point() { }

	// RVA: 0xD78BC8 Offset: 0xD78BC8 VA: 0xD78BC8
	public Vector2 get_normal() { }
}

// Namespace: UnityEngine
public struct JointAngleLimits2D // TypeDefIndex: 2797
{
	// Fields
	private float m_LowerAngle; // 0x0
	private float m_UpperAngle; // 0x4

	// Properties
	public float min { set; }
	public float max { set; }

	// Methods

	// RVA: 0xD78BD0 Offset: 0xD78BD0 VA: 0xD78BD0
	public void set_min(float value) { }

	// RVA: 0xD78BD8 Offset: 0xD78BD8 VA: 0xD78BD8
	public void set_max(float value) { }
}

// Namespace: UnityEngine
public struct JointMotor2D // TypeDefIndex: 2798
{
	// Fields
	private float m_MotorSpeed; // 0x0
	private float m_MaximumMotorTorque; // 0x4

	// Properties
	public float motorSpeed { set; }
	public float maxMotorTorque { set; }

	// Methods

	// RVA: 0xD78BE0 Offset: 0xD78BE0 VA: 0xD78BE0
	public void set_motorSpeed(float value) { }

	// RVA: 0xD78BE8 Offset: 0xD78BE8 VA: 0xD78BE8
	public void set_maxMotorTorque(float value) { }
}

// Namespace: UnityEngine
public struct JointSuspension2D // TypeDefIndex: 2799
{
	// Fields
	private float m_DampingRatio; // 0x0
	private float m_Frequency; // 0x4
	private float m_Angle; // 0x8

	// Properties
	public float dampingRatio { set; }
	public float frequency { set; }
	public float angle { set; }

	// Methods

	// RVA: 0xD78BF0 Offset: 0xD78BF0 VA: 0xD78BF0
	public void set_dampingRatio(float value) { }

	// RVA: 0xD78BF8 Offset: 0xD78BF8 VA: 0xD78BF8
	public void set_frequency(float value) { }

	// RVA: 0xD78C00 Offset: 0xD78C00 VA: 0xD78C00
	public void set_angle(float value) { }
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC019C8 Offset: 0xC019C8 VA: 0xC019C8
[NativeHeaderAttribute] // RVA: 0xC019C8 Offset: 0xC019C8 VA: 0xC019C8
[RequiredByNativeCodeAttribute] // RVA: 0xC019C8 Offset: 0xC019C8 VA: 0xC019C8
public struct RaycastHit2D // TypeDefIndex: 2800
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC02240 Offset: 0xC02240 VA: 0xC02240
	private Vector2 m_Centroid; // 0x0
	[NativeNameAttribute] // RVA: 0xC02278 Offset: 0xC02278 VA: 0xC02278
	private Vector2 m_Point; // 0x8
	[NativeNameAttribute] // RVA: 0xC022B0 Offset: 0xC022B0 VA: 0xC022B0
	private Vector2 m_Normal; // 0x10
	[NativeNameAttribute] // RVA: 0xC022E8 Offset: 0xC022E8 VA: 0xC022E8
	private float m_Distance; // 0x18
	[NativeNameAttribute] // RVA: 0xC02320 Offset: 0xC02320 VA: 0xC02320
	private float m_Fraction; // 0x1C
	[NativeNameAttribute] // RVA: 0xC02358 Offset: 0xC02358 VA: 0xC02358
	private int m_Collider; // 0x20

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public float distance { get; }
	public float fraction { get; }
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public Transform transform { get; }

	// Methods

	// RVA: 0xD78E18 Offset: 0xD78E18 VA: 0xD78E18
	public Vector2 get_point() { }

	// RVA: 0xD78E20 Offset: 0xD78E20 VA: 0xD78E20
	public Vector2 get_normal() { }

	// RVA: 0xD78E28 Offset: 0xD78E28 VA: 0xD78E28
	public float get_distance() { }

	// RVA: 0xD78E30 Offset: 0xD78E30 VA: 0xD78E30
	public float get_fraction() { }

	// RVA: 0xD78E38 Offset: 0xD78E38 VA: 0xD78E38
	public Collider2D get_collider() { }

	// RVA: 0xD78E40 Offset: 0xD78E40 VA: 0xD78E40
	public Rigidbody2D get_rigidbody() { }

	// RVA: 0xD78E48 Offset: 0xD78E48 VA: 0xD78E48
	public Transform get_transform() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC01A78 Offset: 0xC01A78 VA: 0xC01A78
[NativeHeaderAttribute] // RVA: 0xC01A78 Offset: 0xC01A78 VA: 0xC01A78
public sealed class Rigidbody2D : Component // TypeDefIndex: 2801
{
	// Properties
	public Vector2 velocity { get; set; }
	public float mass { get; set; }
	public float gravityScale { set; }
	public RigidbodyType2D bodyType { get; set; }
	public bool isKinematic { get; set; }
	public RigidbodyConstraints2D constraints { get; set; }

	// Methods

	// RVA: 0x2B6C000 Offset: 0x2B6C000 VA: 0x2B6C000
	public void .ctor() { }

	// RVA: 0x2B6C008 Offset: 0x2B6C008 VA: 0x2B6C008
	public Vector2 get_velocity() { }

	// RVA: 0x2B6C0A4 Offset: 0x2B6C0A4 VA: 0x2B6C0A4
	public void set_velocity(Vector2 value) { }

	// RVA: 0x2B6C13C Offset: 0x2B6C13C VA: 0x2B6C13C
	public float get_mass() { }

	// RVA: 0x2B6C1A8 Offset: 0x2B6C1A8 VA: 0x2B6C1A8
	public void set_mass(float value) { }

	// RVA: 0x2B6C21C Offset: 0x2B6C21C VA: 0x2B6C21C
	public void set_gravityScale(float value) { }

	// RVA: 0x2B6C290 Offset: 0x2B6C290 VA: 0x2B6C290
	public RigidbodyType2D get_bodyType() { }

	[NativeMethodAttribute] // RVA: 0xC02998 Offset: 0xC02998 VA: 0xC02998
	// RVA: 0x2B6C2FC Offset: 0x2B6C2FC VA: 0x2B6C2FC
	public void set_bodyType(RigidbodyType2D value) { }

	// RVA: 0x2B6C370 Offset: 0x2B6C370 VA: 0x2B6C370
	public bool get_isKinematic() { }

	// RVA: 0x2B6C38C Offset: 0x2B6C38C VA: 0x2B6C38C
	public void set_isKinematic(bool value) { }

	// RVA: 0x2B6C3BC Offset: 0x2B6C3BC VA: 0x2B6C3BC
	public RigidbodyConstraints2D get_constraints() { }

	// RVA: 0x2B6C428 Offset: 0x2B6C428 VA: 0x2B6C428
	public void set_constraints(RigidbodyConstraints2D value) { }

	// RVA: 0x2B6C49C Offset: 0x2B6C49C VA: 0x2B6C49C
	public bool IsSleeping() { }

	// RVA: 0x2B6C508 Offset: 0x2B6C508 VA: 0x2B6C508
	public void Sleep() { }

	[NativeMethodAttribute] // RVA: 0xC029D0 Offset: 0xC029D0 VA: 0xC029D0
	// RVA: 0x2B6C574 Offset: 0x2B6C574 VA: 0x2B6C574
	public void WakeUp() { }

	// RVA: 0x2B6C5E0 Offset: 0x2B6C5E0 VA: 0x2B6C5E0
	public void AddForce(Vector2 force, ForceMode2D mode) { }

	// RVA: 0x2B6C690 Offset: 0x2B6C690 VA: 0x2B6C690
	public void AddRelativeForce(Vector2 relativeForce, ForceMode2D mode) { }

	// RVA: 0x2B6C740 Offset: 0x2B6C740 VA: 0x2B6C740
	public void AddForceAtPosition(Vector2 force, Vector2 position, ForceMode2D mode) { }

	// RVA: 0x2B6C800 Offset: 0x2B6C800 VA: 0x2B6C800
	public void AddTorque(float torque, ForceMode2D mode) { }

	// RVA: 0x2B6C030 Offset: 0x2B6C030 VA: 0x2B6C030
	private void get_velocity_Injected(out Vector2 ret) { }

	// RVA: 0x2B6C0C8 Offset: 0x2B6C0C8 VA: 0x2B6C0C8
	private void set_velocity_Injected(ref Vector2 value) { }

	// RVA: 0x2B6C60C Offset: 0x2B6C60C VA: 0x2B6C60C
	private void AddForce_Injected(ref Vector2 force, ForceMode2D mode) { }

	// RVA: 0x2B6C6BC Offset: 0x2B6C6BC VA: 0x2B6C6BC
	private void AddRelativeForce_Injected(ref Vector2 relativeForce, ForceMode2D mode) { }

	// RVA: 0x2B6C774 Offset: 0x2B6C774 VA: 0x2B6C774
	private void AddForceAtPosition_Injected(ref Vector2 force, ref Vector2 position, ForceMode2D mode) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC01B00 Offset: 0xC01B00 VA: 0xC01B00
[RequiredByNativeCodeAttribute] // RVA: 0xC01B00 Offset: 0xC01B00 VA: 0xC01B00
[NativeHeaderAttribute] // RVA: 0xC01B00 Offset: 0xC01B00 VA: 0xC01B00
public class Collider2D : Behaviour // TypeDefIndex: 2802
{
	// Properties
	public bool isTrigger { set; }
	public Vector2 offset { set; }
	public Rigidbody2D attachedRigidbody { get; }
	public int shapeCount { get; }
	public PhysicsMaterial2D sharedMaterial { get; }

	// Methods

	// RVA: 0x2B6810C Offset: 0x2B6810C VA: 0x2B6810C
	public void .ctor() { }

	// RVA: 0x2B68114 Offset: 0x2B68114 VA: 0x2B68114
	public void set_isTrigger(bool value) { }

	// RVA: 0x2B68188 Offset: 0x2B68188 VA: 0x2B68188
	public void set_offset(Vector2 value) { }

	[NativeMethodAttribute] // RVA: 0xC02A08 Offset: 0xC02A08 VA: 0xC02A08
	// RVA: 0x2B68220 Offset: 0x2B68220 VA: 0x2B68220
	public Rigidbody2D get_attachedRigidbody() { }

	// RVA: 0x2B6828C Offset: 0x2B6828C VA: 0x2B6828C
	public int get_shapeCount() { }

	[NativeMethodAttribute] // RVA: 0xC02A40 Offset: 0xC02A40 VA: 0xC02A40
	// RVA: 0x2B682F8 Offset: 0x2B682F8 VA: 0x2B682F8
	public PhysicsMaterial2D get_sharedMaterial() { }

	// RVA: 0x2B681AC Offset: 0x2B681AC VA: 0x2B681AC
	private void set_offset_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC01BAC Offset: 0xC01BAC VA: 0xC01BAC
public sealed class BoxCollider2D : Collider2D // TypeDefIndex: 2803
{
	// Properties
	public Vector2 size { set; }

	// Methods

	// RVA: 0x2B68074 Offset: 0x2B68074 VA: 0x2B68074
	public void set_size(Vector2 value) { }

	// RVA: 0x2B68098 Offset: 0x2B68098 VA: 0x2B68098
	private void set_size_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xC01BE4 Offset: 0xC01BE4 VA: 0xC01BE4
[NativeHeaderAttribute] // RVA: 0xC01BE4 Offset: 0xC01BE4 VA: 0xC01BE4
public class Joint2D : Behaviour // TypeDefIndex: 2804
{
	// Properties
	public Vector2 reactionForce { get; }
	public float reactionTorque { get; }

	// Methods

	[NativeMethodAttribute] // RVA: 0xC02A78 Offset: 0xC02A78 VA: 0xC02A78
	// RVA: 0x2B68C14 Offset: 0x2B68C14 VA: 0x2B68C14
	public Vector2 get_reactionForce() { }

	[NativeMethodAttribute] // RVA: 0xC02AB0 Offset: 0xC02AB0 VA: 0xC02AB0
	// RVA: 0x2B68CB0 Offset: 0x2B68CB0 VA: 0x2B68CB0
	public float get_reactionTorque() { }

	// RVA: 0x2B68C3C Offset: 0x2B68C3C VA: 0x2B68C3C
	private void get_reactionForce_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC01C90 Offset: 0xC01C90 VA: 0xC01C90
public class AnchoredJoint2D : Joint2D // TypeDefIndex: 2805
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC01CC8 Offset: 0xC01CC8 VA: 0xC01CC8
public sealed class HingeJoint2D : AnchoredJoint2D // TypeDefIndex: 2806
{
	// Properties
	public bool useMotor { set; }
	public bool useLimits { set; }
	public JointMotor2D motor { get; set; }
	public JointAngleLimits2D limits { get; set; }

	// Methods

	// RVA: 0x2B688C4 Offset: 0x2B688C4 VA: 0x2B688C4
	public void set_useMotor(bool value) { }

	// RVA: 0x2B68938 Offset: 0x2B68938 VA: 0x2B68938
	public void set_useLimits(bool value) { }

	// RVA: 0x2B689AC Offset: 0x2B689AC VA: 0x2B689AC
	public JointMotor2D get_motor() { }

	// RVA: 0x2B68A48 Offset: 0x2B68A48 VA: 0x2B68A48
	public void set_motor(JointMotor2D value) { }

	// RVA: 0x2B68AE0 Offset: 0x2B68AE0 VA: 0x2B68AE0
	public JointAngleLimits2D get_limits() { }

	// RVA: 0x2B68B7C Offset: 0x2B68B7C VA: 0x2B68B7C
	public void set_limits(JointAngleLimits2D value) { }

	// RVA: 0x2B689D4 Offset: 0x2B689D4 VA: 0x2B689D4
	private void get_motor_Injected(out JointMotor2D ret) { }

	// RVA: 0x2B68A6C Offset: 0x2B68A6C VA: 0x2B68A6C
	private void set_motor_Injected(ref JointMotor2D value) { }

	// RVA: 0x2B68B08 Offset: 0x2B68B08 VA: 0x2B68B08
	private void get_limits_Injected(out JointAngleLimits2D ret) { }

	// RVA: 0x2B68BA0 Offset: 0x2B68BA0 VA: 0x2B68BA0
	private void set_limits_Injected(ref JointAngleLimits2D value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC01D00 Offset: 0xC01D00 VA: 0xC01D00
public sealed class WheelJoint2D : AnchoredJoint2D // TypeDefIndex: 2807
{
	// Properties
	public JointSuspension2D suspension { get; set; }
	public bool useMotor { set; }
	public JointMotor2D motor { get; set; }

	// Methods

	// RVA: 0x2B6C88C Offset: 0x2B6C88C VA: 0x2B6C88C
	public JointSuspension2D get_suspension() { }

	// RVA: 0x2B6C930 Offset: 0x2B6C930 VA: 0x2B6C930
	public void set_suspension(JointSuspension2D value) { }

	// RVA: 0x2B6C9CC Offset: 0x2B6C9CC VA: 0x2B6C9CC
	public void set_useMotor(bool value) { }

	// RVA: 0x2B6CA40 Offset: 0x2B6CA40 VA: 0x2B6CA40
	public JointMotor2D get_motor() { }

	// RVA: 0x2B6CADC Offset: 0x2B6CADC VA: 0x2B6CADC
	public void set_motor(JointMotor2D value) { }

	// RVA: 0x2B6C8BC Offset: 0x2B6C8BC VA: 0x2B6C8BC
	private void get_suspension_Injected(out JointSuspension2D ret) { }

	// RVA: 0x2B6C958 Offset: 0x2B6C958 VA: 0x2B6C958
	private void set_suspension_Injected(ref JointSuspension2D value) { }

	// RVA: 0x2B6CA68 Offset: 0x2B6CA68 VA: 0x2B6CA68
	private void get_motor_Injected(out JointMotor2D ret) { }

	// RVA: 0x2B6CB00 Offset: 0x2B6CB00 VA: 0x2B6CB00
	private void set_motor_Injected(ref JointMotor2D value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC01D38 Offset: 0xC01D38 VA: 0xC01D38
public sealed class PhysicsMaterial2D : Object // TypeDefIndex: 2808
{
	// Methods

	// RVA: 0x2B6B52C Offset: 0x2B6B52C VA: 0x2B6B52C
	public void .ctor() { }

	[NativeMethodAttribute] // RVA: 0xC02AE8 Offset: 0xC02AE8 VA: 0xC02AE8
	// RVA: 0x2B6B5A0 Offset: 0x2B6B5A0 VA: 0x2B6B5A0
	private static void Create_Internal(PhysicsMaterial2D scriptMaterial, string name) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2809
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC0467C Offset: 0xC0467C VA: 0xC0467C
public static class ScreenCapture // TypeDefIndex: 2810
{
	// Methods

	// RVA: 0x2B9D338 Offset: 0x2B9D338 VA: 0x2B9D338
	public static void CaptureScreenshot(string filename) { }

	// RVA: 0x2B9D3C8 Offset: 0x2B9D3C8 VA: 0x2B9D3C8
	public static void CaptureScreenshot(string filename, int superSize) { }

	// RVA: 0x2B9D344 Offset: 0x2B9D344 VA: 0x2B9D344
	private static void CaptureScreenshot(string filename, int superSize, ScreenCapture.StereoScreenCaptureMode CaptureMode) { }
}

// Namespace: 
public enum ScreenCapture.StereoScreenCaptureMode // TypeDefIndex: 2811
{
	// Fields
	public int value__; // 0x0
	public const ScreenCapture.StereoScreenCaptureMode LeftEye = 1;
	public const ScreenCapture.StereoScreenCaptureMode RightEye = 2;
	public const ScreenCapture.StereoScreenCaptureMode BothEyes = 3;
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2812
{}

// Namespace: UnityEngine
[RejectDragAndDropMaterial] // RVA: 0xC05824 Offset: 0xC05824 VA: 0xC05824
[NativeTypeAttribute] // RVA: 0xC05824 Offset: 0xC05824 VA: 0xC05824
public sealed class SpriteMask : Renderer // TypeDefIndex: 2813
{
	// Properties
	public int frontSortingLayerID { get; set; }
	public int frontSortingOrder { get; set; }
	public int backSortingLayerID { get; set; }
	public int backSortingOrder { get; set; }
	public float alphaCutoff { get; set; }
	public Sprite sprite { get; set; }
	public bool isCustomRangeActive { get; set; }
	public SpriteSortPoint spriteSortPoint { get; set; }

	// Methods

	// RVA: 0x2B9B094 Offset: 0x2B9B094 VA: 0x2B9B094
	public void .ctor() { }

	// RVA: 0x2B9B09C Offset: 0x2B9B09C VA: 0x2B9B09C
	public int get_frontSortingLayerID() { }

	// RVA: 0x2B9B108 Offset: 0x2B9B108 VA: 0x2B9B108
	public void set_frontSortingLayerID(int value) { }

	// RVA: 0x2B9B17C Offset: 0x2B9B17C VA: 0x2B9B17C
	public int get_frontSortingOrder() { }

	// RVA: 0x2B9B1E8 Offset: 0x2B9B1E8 VA: 0x2B9B1E8
	public void set_frontSortingOrder(int value) { }

	// RVA: 0x2B9B25C Offset: 0x2B9B25C VA: 0x2B9B25C
	public int get_backSortingLayerID() { }

	// RVA: 0x2B9B2C8 Offset: 0x2B9B2C8 VA: 0x2B9B2C8
	public void set_backSortingLayerID(int value) { }

	// RVA: 0x2B9B33C Offset: 0x2B9B33C VA: 0x2B9B33C
	public int get_backSortingOrder() { }

	// RVA: 0x2B9B3A8 Offset: 0x2B9B3A8 VA: 0x2B9B3A8
	public void set_backSortingOrder(int value) { }

	// RVA: 0x2B9B41C Offset: 0x2B9B41C VA: 0x2B9B41C
	public float get_alphaCutoff() { }

	// RVA: 0x2B9B488 Offset: 0x2B9B488 VA: 0x2B9B488
	public void set_alphaCutoff(float value) { }

	// RVA: 0x2B9B4FC Offset: 0x2B9B4FC VA: 0x2B9B4FC
	public Sprite get_sprite() { }

	// RVA: 0x2B9B568 Offset: 0x2B9B568 VA: 0x2B9B568
	public void set_sprite(Sprite value) { }

	[NativeMethodAttribute] // RVA: 0xC0587C Offset: 0xC0587C VA: 0xC0587C
	// RVA: 0x2B9B5DC Offset: 0x2B9B5DC VA: 0x2B9B5DC
	public bool get_isCustomRangeActive() { }

	[NativeMethodAttribute] // RVA: 0xC058B4 Offset: 0xC058B4 VA: 0xC058B4
	// RVA: 0x2B9B648 Offset: 0x2B9B648 VA: 0x2B9B648
	public void set_isCustomRangeActive(bool value) { }

	// RVA: 0x2B9B6BC Offset: 0x2B9B6BC VA: 0x2B9B6BC
	public SpriteSortPoint get_spriteSortPoint() { }

	// RVA: 0x2B9B728 Offset: 0x2B9B728 VA: 0x2B9B728
	public void set_spriteSortPoint(SpriteSortPoint value) { }

	// RVA: 0x2B9B79C Offset: 0x2B9B79C VA: 0x2B9B79C
	internal Bounds GetSpriteBounds() { }

	// RVA: 0x2B9B7DC Offset: 0x2B9B7DC VA: 0x2B9B7DC
	private void GetSpriteBounds_Injected(out Bounds ret) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2814
{}

// Namespace: UnityEngine
public enum RenderMode // TypeDefIndex: 2815
{
	// Fields
	public int value__; // 0x0
	public const RenderMode ScreenSpaceOverlay = 0;
	public const RenderMode ScreenSpaceCamera = 1;
	public const RenderMode WorldSpace = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC069EC Offset: 0xC069EC VA: 0xC069EC
[RequireComponent] // RVA: 0xC069EC Offset: 0xC069EC VA: 0xC069EC
[NativeClassAttribute] // RVA: 0xC069EC Offset: 0xC069EC VA: 0xC069EC
[NativeHeaderAttribute] // RVA: 0xC069EC Offset: 0xC069EC VA: 0xC069EC
public sealed class Canvas : Behaviour // TypeDefIndex: 2816
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xC06CB0 Offset: 0xC06CB0 VA: 0xC06CB0
	[CompilerGeneratedAttribute] // RVA: 0xC06CB0 Offset: 0xC06CB0 VA: 0xC06CB0
	private static Canvas.WillRenderCanvases willRenderCanvases; // 0x0

	// Properties
	public RenderMode renderMode { get; }
	public bool isRootCanvas { get; }
	public float scaleFactor { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public bool pixelPerfect { get; }
	public int renderOrder { get; }
	public bool overrideSorting { get; set; }
	public int sortingOrder { get; set; }
	public int targetDisplay { get; }
	public int sortingLayerID { get; set; }
	public Canvas rootCanvas { get; }
	[NativePropertyAttribute] // RVA: 0xC06E5C Offset: 0xC06E5C VA: 0xC06E5C
	public Camera worldCamera { get; }

	// Methods

	// RVA: 0x2B89FC4 Offset: 0x2B89FC4 VA: 0x2B89FC4
	public void .ctor() { }

	// RVA: 0x2B89FCC Offset: 0x2B89FCC VA: 0x2B89FCC
	public static void add_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x2B8A0CC Offset: 0x2B8A0CC VA: 0x2B8A0CC
	public static void remove_willRenderCanvases(Canvas.WillRenderCanvases value) { }

	// RVA: 0x2B8A1CC Offset: 0x2B8A1CC VA: 0x2B8A1CC
	public RenderMode get_renderMode() { }

	// RVA: 0x2B8A238 Offset: 0x2B8A238 VA: 0x2B8A238
	public bool get_isRootCanvas() { }

	// RVA: 0x2B8A2A4 Offset: 0x2B8A2A4 VA: 0x2B8A2A4
	public float get_scaleFactor() { }

	// RVA: 0x2B8A310 Offset: 0x2B8A310 VA: 0x2B8A310
	public void set_scaleFactor(float value) { }

	// RVA: 0x2B8A384 Offset: 0x2B8A384 VA: 0x2B8A384
	public float get_referencePixelsPerUnit() { }

	// RVA: 0x2B8A3F0 Offset: 0x2B8A3F0 VA: 0x2B8A3F0
	public void set_referencePixelsPerUnit(float value) { }

	// RVA: 0x2B8A464 Offset: 0x2B8A464 VA: 0x2B8A464
	public bool get_pixelPerfect() { }

	// RVA: 0x2B8A4D0 Offset: 0x2B8A4D0 VA: 0x2B8A4D0
	public int get_renderOrder() { }

	// RVA: 0x2B8A53C Offset: 0x2B8A53C VA: 0x2B8A53C
	public bool get_overrideSorting() { }

	// RVA: 0x2B8A5A8 Offset: 0x2B8A5A8 VA: 0x2B8A5A8
	public void set_overrideSorting(bool value) { }

	// RVA: 0x2B8A61C Offset: 0x2B8A61C VA: 0x2B8A61C
	public int get_sortingOrder() { }

	// RVA: 0x2B8A688 Offset: 0x2B8A688 VA: 0x2B8A688
	public void set_sortingOrder(int value) { }

	// RVA: 0x2B8A6FC Offset: 0x2B8A6FC VA: 0x2B8A6FC
	public int get_targetDisplay() { }

	// RVA: 0x2B8A768 Offset: 0x2B8A768 VA: 0x2B8A768
	public int get_sortingLayerID() { }

	// RVA: 0x2B8A7D4 Offset: 0x2B8A7D4 VA: 0x2B8A7D4
	public void set_sortingLayerID(int value) { }

	// RVA: 0x2B8A848 Offset: 0x2B8A848 VA: 0x2B8A848
	public Canvas get_rootCanvas() { }

	// RVA: 0x2B8A8B4 Offset: 0x2B8A8B4 VA: 0x2B8A8B4
	public Camera get_worldCamera() { }

	[FreeFunctionAttribute] // RVA: 0xC06D28 Offset: 0xC06D28 VA: 0xC06D28
	// RVA: 0x2B8A920 Offset: 0x2B8A920 VA: 0x2B8A920
	public static Material GetDefaultCanvasMaterial() { }

	[FreeFunctionAttribute] // RVA: 0xC06D60 Offset: 0xC06D60 VA: 0xC06D60
	// RVA: 0x2B8A978 Offset: 0x2B8A978 VA: 0x2B8A978
	public static Material GetETC1SupportedCanvasMaterial() { }

	// RVA: 0x2B8A9D0 Offset: 0x2B8A9D0 VA: 0x2B8A9D0
	public static void ForceUpdateCanvases() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC06D98 Offset: 0xC06D98 VA: 0xC06D98
	// RVA: 0x2B8A9D4 Offset: 0x2B8A9D4 VA: 0x2B8A9D4
	private static void SendWillRenderCanvases() { }
}

// Namespace: 
public sealed class Canvas.WillRenderCanvases : MulticastDelegate // TypeDefIndex: 2817
{
	// Methods

	// RVA: 0x2B8AC38 Offset: 0x2B8AC38 VA: 0x2B8AC38
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2B8AA38 Offset: 0x2B8AA38 VA: 0x2B8AA38 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x2B8AC48 Offset: 0x2B8AC48 VA: 0x2B8AC48 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x2B8AC7C Offset: 0x2B8AC7C VA: 0x2B8AC7C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xC06ABC Offset: 0xC06ABC VA: 0xC06ABC
[NativeHeaderAttribute] // RVA: 0xC06ABC Offset: 0xC06ABC VA: 0xC06ABC
public static class UISystemProfilerApi // TypeDefIndex: 2818
{
	// Methods

	// RVA: 0x2B8CCF8 Offset: 0x2B8CCF8 VA: 0x2B8CCF8
	public static void BeginSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x2B8CD64 Offset: 0x2B8CD64 VA: 0x2B8CD64
	public static void EndSample(UISystemProfilerApi.SampleType type) { }

	// RVA: 0x2B8CDD0 Offset: 0x2B8CDD0 VA: 0x2B8CDD0
	public static void AddMarker(string name, Object obj) { }
}

// Namespace: 
public enum UISystemProfilerApi.SampleType // TypeDefIndex: 2819
{
	// Fields
	public int value__; // 0x0
	public const UISystemProfilerApi.SampleType Layout = 0;
	public const UISystemProfilerApi.SampleType Render = 1;
}

// Namespace: UnityEngine
public interface ICanvasRaycastFilter // TypeDefIndex: 2820
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera);
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC06B20 Offset: 0xC06B20 VA: 0xC06B20
[NativeHeaderAttribute] // RVA: 0xC06B20 Offset: 0xC06B20 VA: 0xC06B20
public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2821
{
	// Properties
	[NativePropertyAttribute] // RVA: 0xC06E9C Offset: 0xC06E9C VA: 0xC06E9C
	public float alpha { get; set; }
	[NativePropertyAttribute] // RVA: 0xC06EDC Offset: 0xC06EDC VA: 0xC06EDC
	public bool interactable { get; set; }
	[NativePropertyAttribute] // RVA: 0xC06F1C Offset: 0xC06F1C VA: 0xC06F1C
	public bool blocksRaycasts { get; set; }
	[NativePropertyAttribute] // RVA: 0xC06F5C Offset: 0xC06F5C VA: 0xC06F5C
	public bool ignoreParentGroups { get; set; }

	// Methods

	// RVA: 0x2B8AC88 Offset: 0x2B8AC88 VA: 0x2B8AC88
	public float get_alpha() { }

	// RVA: 0x2B8ACF4 Offset: 0x2B8ACF4 VA: 0x2B8ACF4
	public void set_alpha(float value) { }

	// RVA: 0x2B8AD68 Offset: 0x2B8AD68 VA: 0x2B8AD68
	public bool get_interactable() { }

	// RVA: 0x2B8ADD4 Offset: 0x2B8ADD4 VA: 0x2B8ADD4
	public void set_interactable(bool value) { }

	// RVA: 0x2B8AE48 Offset: 0x2B8AE48 VA: 0x2B8AE48
	public bool get_blocksRaycasts() { }

	// RVA: 0x2B8AEB4 Offset: 0x2B8AEB4 VA: 0x2B8AEB4
	public void set_blocksRaycasts(bool value) { }

	// RVA: 0x2B8AF28 Offset: 0x2B8AF28 VA: 0x2B8AF28
	public bool get_ignoreParentGroups() { }

	// RVA: 0x2B8AF94 Offset: 0x2B8AF94 VA: 0x2B8AF94
	public void set_ignoreParentGroups(bool value) { }

	// RVA: 0x2B8B008 Offset: 0x2B8B008 VA: 0x2B8B008 Slot: 4
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC06B80 Offset: 0xC06B80 VA: 0xC06B80
[NativeClassAttribute] // RVA: 0xC06B80 Offset: 0xC06B80 VA: 0xC06B80
public sealed class CanvasRenderer : Component // TypeDefIndex: 2822
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC06CEC Offset: 0xC06CEC VA: 0xC06CEC
	[DebuggerBrowsableAttribute] // RVA: 0xC06CEC Offset: 0xC06CEC VA: 0xC06CEC
	private bool <isMask>k__BackingField; // 0x18

	// Properties
	public bool hasPopInstruction { set; }
	public int materialCount { get; set; }
	public int popMaterialCount { set; }
	public int absoluteDepth { get; }
	public bool hasMoved { get; }
	[NativePropertyAttribute] // RVA: 0xC06F9C Offset: 0xC06F9C VA: 0xC06F9C
	public bool cull { get; set; }

	// Methods

	// RVA: 0x2B8B00C Offset: 0x2B8B00C VA: 0x2B8B00C
	public void set_hasPopInstruction(bool value) { }

	// RVA: 0x2B8B080 Offset: 0x2B8B080 VA: 0x2B8B080
	public int get_materialCount() { }

	// RVA: 0x2B8B0EC Offset: 0x2B8B0EC VA: 0x2B8B0EC
	public void set_materialCount(int value) { }

	// RVA: 0x2B8B160 Offset: 0x2B8B160 VA: 0x2B8B160
	public void set_popMaterialCount(int value) { }

	// RVA: 0x2B8B1D4 Offset: 0x2B8B1D4 VA: 0x2B8B1D4
	public int get_absoluteDepth() { }

	// RVA: 0x2B8B240 Offset: 0x2B8B240 VA: 0x2B8B240
	public bool get_hasMoved() { }

	// RVA: 0x2B8B2AC Offset: 0x2B8B2AC VA: 0x2B8B2AC
	public bool get_cull() { }

	// RVA: 0x2B8B318 Offset: 0x2B8B318 VA: 0x2B8B318
	public void set_cull(bool value) { }

	// RVA: 0x2B8B38C Offset: 0x2B8B38C VA: 0x2B8B38C
	public void SetColor(Color color) { }

	// RVA: 0x2B8B428 Offset: 0x2B8B428 VA: 0x2B8B428
	public Color GetColor() { }
