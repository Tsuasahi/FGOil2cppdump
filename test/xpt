
	// Methods

	// RVA: 0x1A69C38 Offset: 0x1A69C38 VA: 0x1A69C38
	public void .ctor() { }

	// RVA: 0x1A69CA0 Offset: 0x1A69CA0 VA: 0x1A69CA0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A69CE0 Offset: 0x1A69CE0 VA: 0x1A69CE0 Slot: 16
	protected virtual bool IsEnableConditions() { }

	// RVA: 0x1A69DF4 Offset: 0x1A69DF4 VA: 0x1A69DF4 Slot: 17
	protected virtual bool IsEnableCondition(USFGOPlayBgmEventConditional.CondBGM cond) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB0B8 Offset: 0xCCB0B8 VA: 0xCCB0B8
	// RVA: 0x1A69EA4 Offset: 0x1A69EA4 VA: 0x1A69EA4
	private bool <IsEnableConditions>m__0(USFGOPlayBgmEventConditional.CondBGM x) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayBgmEventConditional.CondBGM // TypeDefIndex: 8192
{
	// Fields
	public CondType.Kind condType; // 0x10
	public int targetId; // 0x14
	public long condValue; // 0x18

	// Methods

	// RVA: 0x1A69ECC Offset: 0x1A69ECC VA: 0x1A69ECC
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class USFGOPlayBgmEventConditional.MultiCondBGM // TypeDefIndex: 8193
{
	// Fields
	public USFGOPlayBgmEventConditional.CondBGM[] conditions; // 0x10

	// Methods

	// RVA: 0x1A69ED4 Offset: 0x1A69ED4 VA: 0x1A69ED4
	public void .ctor() { }
}

// Namespace: WellFired
public abstract class USFGOPlayCutInBase : USEventBase // TypeDefIndex: 8194
{
	// Fields
	public int svtId; // 0x30
	public int limitCount; // 0x34
	public Face.Type faceType; // 0x38
	public CutInType cutInType; // 0x3C
	public bool parentCamera; // 0x40
	public bool isFadeDuringCutIn; // 0x41
	private GameObject myCutIn; // 0x48
	private bool useAssetBundle; // 0x50
	private Animation[] animations; // 0x58
	private SimpleAnimation[] simpleAnimations; // 0x60
	private ParticleSystem[] particles; // 0x68
	private UVScroll[] uvScrolls; // 0x70
	private changeVColor[] changeVColors; // 0x78
	private bool originalActive; // 0x80
	private bool AnimStarted; // 0x81
	protected UIStandFigureM myStandFigure; // 0x88

	// Methods

	// RVA: 0x1A69F34 Offset: 0x1A69F34 VA: 0x1A69F34
	protected void .ctor() { }

	// RVA: 0x1A69F44 Offset: 0x1A69F44 VA: 0x1A69F44
	public void Update() { }

	// RVA: 0x1A6A510 Offset: 0x1A6A510 VA: 0x1A6A510 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A6B1AC Offset: 0x1A6B1AC VA: 0x1A6B1AC Slot: 16
	protected virtual UIStandFigureM GetTargetSvtStandFigure(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0x1A6B22C Offset: 0x1A6B22C VA: 0x1A6B22C Slot: 17
	protected virtual void SetFigure(int svtId, int limCnt, GameObject cutIn, GameObject parentObj, UIStandFigureM figure, Face.Type fType) { }

	// RVA: 0x1A6B588 Offset: 0x1A6B588 VA: 0x1A6B588
	protected void onAssetLoad() { }

	// RVA: 0x1A6B9D4 Offset: 0x1A6B9D4 VA: 0x1A6B9D4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A6C0BC Offset: 0x1A6C0BC VA: 0x1A6C0BC Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A6C0C0 Offset: 0x1A6C0C0 VA: 0x1A6C0C0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A6C268 Offset: 0x1A6C268 VA: 0x1A6C268 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1A6C3AC Offset: 0x1A6C3AC VA: 0x1A6C3AC
	protected void DisposeMyStandFigure() { }

	// RVA: 0x1A6C440 Offset: 0x1A6C440 VA: 0x1A6C440
	protected void DestroyMyCutIn() { }

	// RVA: 0x1A6C4E8 Offset: 0x1A6C4E8 VA: 0x1A6C4E8
	protected void ReleaseAsset(int svtId, int limitCount) { }

	// RVA: 0x1A6C600 Offset: 0x1A6C600 VA: 0x1A6C600 Slot: 18
	protected virtual void OnDestroy() { }

	// RVA: 0x1A6C630 Offset: 0x1A6C630 VA: 0x1A6C630 Slot: 19
	public virtual void InitPreLoadStandFigureData(BattleSequenceManager battleSeqManager, GameObject seqObj) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29D78 Offset: 0xC29D78 VA: 0xC29D78
[USequencerEventAttribute] // RVA: 0xC29D78 Offset: 0xC29D78 VA: 0xC29D78
public class USFGOPlayCutInEvent : USEventBase // TypeDefIndex: 8195
{
	// Fields
	public GameObject cutInObject; // 0x30
	public string cutInName; // 0x38
	public float playbackSpeed; // 0x40
	private Animation[] animations; // 0x48
	private SimpleAnimation[] simpleAnimations; // 0x50
	private ParticleSystem[] particles; // 0x58
	private UVScroll[] uvScrolls; // 0x60
	private changeVColor[] changeVColors; // 0x68
	private bool originalActive; // 0x70

	// Methods

	// RVA: 0x1A6C634 Offset: 0x1A6C634 VA: 0x1A6C634
	public void .ctor() { }

	// RVA: 0x1A6C644 Offset: 0x1A6C644 VA: 0x1A6C644
	public void Update() { }

	// RVA: 0x1A6C9B8 Offset: 0x1A6C9B8 VA: 0x1A6C9B8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A6CDB0 Offset: 0x1A6CDB0 VA: 0x1A6CDB0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A6D414 Offset: 0x1A6D414 VA: 0x1A6D414 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A6D5BC Offset: 0x1A6D5BC VA: 0x1A6D5BC Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29DD8 Offset: 0xC29DD8 VA: 0xC29DD8
[USequencerEventAttribute] // RVA: 0xC29DD8 Offset: 0xC29DD8 VA: 0xC29DD8
[USequencerEventHideDurationAttribute] // RVA: 0xC29DD8 Offset: 0xC29DD8 VA: 0xC29DD8
public class USFGOPlayEffectEvent : USEventBase // TypeDefIndex: 8196
{
	// Fields
	private Animation[] animations; // 0x30
	private SimpleAnimation[] simpleAnimations; // 0x38
	private bool originalActive; // 0x40

	// Methods

	// RVA: 0x1A6D6F0 Offset: 0x1A6D6F0 VA: 0x1A6D6F0
	public void .ctor() { }

	// RVA: 0x1A6D6F8 Offset: 0x1A6D6F8 VA: 0x1A6D6F8
	public void Update() { }

	// RVA: 0x1A6D798 Offset: 0x1A6D798 VA: 0x1A6D798
	private float getMostLongDuration() { }

	// RVA: 0x1A6DA94 Offset: 0x1A6DA94 VA: 0x1A6DA94
	protected string GetEffectAudio(string name) { }

	// RVA: 0x1A6DB0C Offset: 0x1A6DB0C VA: 0x1A6DB0C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A6E3D4 Offset: 0x1A6E3D4 VA: 0x1A6E3D4 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1A6E8F4 Offset: 0x1A6E8F4 VA: 0x1A6E8F4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A6EA9C Offset: 0x1A6EA9C VA: 0x1A6EA9C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1A6EB58 Offset: 0x1A6EB58 VA: 0x1A6EB58 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29E48 Offset: 0xC29E48 VA: 0xC29E48
[USequencerEventAttribute] // RVA: 0xC29E48 Offset: 0xC29E48 VA: 0xC29E48
[USequencerEventHideDurationAttribute] // RVA: 0xC29E48 Offset: 0xC29E48 VA: 0xC29E48
public class USFGOPlayStandardCutInEvent : USEventBase // TypeDefIndex: 8197
{
	// Fields
	public int svtId; // 0x30
	public int limitCount; // 0x34
	public Face.Type faceType; // 0x38
	public CutInType cutInType; // 0x3C
	public bool parentCamera; // 0x40
	private GameObject myCutIn; // 0x48
	private bool useAssetBundle; // 0x50
	private Animation[] animations; // 0x58
	private SimpleAnimation[] simpleAnimations; // 0x60
	private ParticleSystem[] particles; // 0x68
	private UVScroll[] uvScrolls; // 0x70
	private changeVColor[] changeVColors; // 0x78
	private bool originalActive; // 0x80
	private bool AnimStarted; // 0x81
	private UIStandFigureM myStandFigure; // 0x88

	// Methods

	// RVA: 0x1A6EB5C Offset: 0x1A6EB5C VA: 0x1A6EB5C
	public void .ctor() { }

	// RVA: 0x1A6EB6C Offset: 0x1A6EB6C VA: 0x1A6EB6C
	public void Update() { }

	// RVA: 0x1A6F138 Offset: 0x1A6F138 VA: 0x1A6F138 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1A7003C Offset: 0x1A7003C VA: 0x1A7003C
	private void onAssetLoad() { }

	// RVA: 0x1A70488 Offset: 0x1A70488 VA: 0x1A70488 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1A70B5C Offset: 0x1A70B5C VA: 0x1A70B5C Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1A70B60 Offset: 0x1A70B60 VA: 0x1A70B60 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1A70D08 Offset: 0x1A70D08 VA: 0x1A70D08 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1A70E4C Offset: 0x1A70E4C VA: 0x1A70E4C
	protected void OnDestroy() { }

	// RVA: 0x1A70014 Offset: 0x1A70014 VA: 0x1A70014
	private bool HasFGOStandFigureMColorCutIn() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29EB8 Offset: 0xC29EB8 VA: 0xC29EB8
[USequencerEventAttribute] // RVA: 0xC29EB8 Offset: 0xC29EB8 VA: 0xC29EB8
[USequencerEventHideDurationAttribute] // RVA: 0xC29EB8 Offset: 0xC29EB8 VA: 0xC29EB8
public class USFGOPlayStandardCutInLimitCount : USFGOPlayCutInBase // TypeDefIndex: 8198
{
	// Fields
	public USFGOPlayStandardCutInLimitCount.OverwriteCutIn[] overwriteArray; // 0x90
	private USFGOPlayStandardCutInLimitCount.OverwriteStandFigure fixFigure; // 0x98
	private GameObject defStandardCutIn; // 0xA0

	// Methods

	// RVA: 0x18498E4 Offset: 0x18498E4 VA: 0x18498E4
	public void .ctor() { }

	// RVA: 0x1849944 Offset: 0x1849944 VA: 0x1849944 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x18499B4 Offset: 0x18499B4 VA: 0x18499B4
	private USFGOPlayStandardCutInLimitCount.OverwriteStandFigure GetOverwriteStandFigure(int limitCount) { }

	// RVA: 0x1849B94 Offset: 0x1849B94 VA: 0x1849B94
	public USFGOPlayStandardCutInLimitCount.OverwriteStandFigure GetStandFigureData(int svtId, int limCnt, Face.Type fType) { }

	// RVA: 0x1849E08 Offset: 0x1849E08 VA: 0x1849E08 Slot: 17
	protected override void SetFigure(int svtId, int limCnt, GameObject cutIn, GameObject parentObj, UIStandFigureM figure, Face.Type fType) { }

	// RVA: 0x1849EF0 Offset: 0x1849EF0 VA: 0x1849EF0 Slot: 18
	protected override void OnDestroy() { }

	// RVA: 0x1849FD8 Offset: 0x1849FD8 VA: 0x1849FD8 Slot: 16
	protected override UIStandFigureM GetTargetSvtStandFigure(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0x184A0D0 Offset: 0x184A0D0 VA: 0x184A0D0 Slot: 19
	public override void InitPreLoadStandFigureData(BattleSequenceManager battleSeqManager, GameObject seqObj) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayStandardCutInLimitCount.OverwriteCutIn // TypeDefIndex: 8199
{
	// Fields
	public int limitCount; // 0x10
	public USFGOPlayStandardCutInLimitCount.OverwriteStandFigure[] figureArray; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC5DB10 Offset: 0xC5DB10 VA: 0xC5DB10
	private static Func<USFGOPlayStandardCutInLimitCount.OverwriteStandFigure, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x184A1E8 Offset: 0x184A1E8 VA: 0x184A1E8
	public void .ctor() { }

	// RVA: 0x1849A98 Offset: 0x1849A98 VA: 0x1849A98
	public USFGOPlayStandardCutInLimitCount.OverwriteStandFigure GetRandomStandFigure() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB0C8 Offset: 0xCCB0C8 VA: 0xCCB0C8
	// RVA: 0x184A248 Offset: 0x184A248 VA: 0x184A248
	private static int <GetRandomStandFigure>m__0(USFGOPlayStandardCutInLimitCount.OverwriteStandFigure x) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayStandardCutInLimitCount.OverwriteStandFigure // TypeDefIndex: 8200
{
	// Fields
	public static readonly int NOT_OVERWRITE_VAL; // 0x0
	public int weight; // 0x10
	public int svtId; // 0x14
	public int imageLimitCount; // 0x18
	public Face.Type faceType; // 0x1C

	// Methods

	// RVA: 0x1849C80 Offset: 0x1849C80 VA: 0x1849C80
	public void .ctor() { }

	// RVA: 0x1849D10 Offset: 0x1849D10 VA: 0x1849D10
	public void Overwrite(USFGOPlayStandardCutInLimitCount.OverwriteStandFigure from) { }

	// RVA: -1 Offset: -1
	private void OverwriteValue<T>(ref T targetVal, T fromVal, T notOverwriteVal) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1D138 Offset: 0x1C1D138 VA: 0x1C1D138
	|-USFGOPlayStandardCutInLimitCount.OverwriteStandFigure.OverwriteValue<Face.Type>
	|
	|-RVA: 0x1C1D204 Offset: 0x1C1D204 VA: 0x1C1D204
	|-USFGOPlayStandardCutInLimitCount.OverwriteStandFigure.OverwriteValue<int>
	|
	|-RVA: 0x1C1D26C Offset: 0x1C1D26C VA: 0x1C1D26C
	|-USFGOPlayStandardCutInLimitCount.OverwriteStandFigure.OverwriteValue<object>
	*/

	// RVA: 0x184A270 Offset: 0x184A270 VA: 0x184A270
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43164 Offset: 0xC43164 VA: 0xC43164
private sealed class USFGOPlayStandardCutInLimitCount.<GetOverwriteStandFigure>c__AnonStorey0 // TypeDefIndex: 8201
{
	// Fields
	internal int limitCount; // 0x10

	// Methods

	// RVA: 0x1849A90 Offset: 0x1849A90 VA: 0x1849A90
	public void .ctor() { }

	// RVA: 0x184A1AC Offset: 0x184A1AC VA: 0x184A1AC
	internal bool <>m__0(USFGOPlayStandardCutInLimitCount.OverwriteCutIn x) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29F28 Offset: 0xC29F28 VA: 0xC29F28
[USequencerEventAttribute] // RVA: 0xC29F28 Offset: 0xC29F28 VA: 0xC29F28
[USequencerEventHideDurationAttribute] // RVA: 0xC29F28 Offset: 0xC29F28 VA: 0xC29F28
public class USFGOPlayStandardCutInRandom : USFGOPlayCutInBase // TypeDefIndex: 8202
{
	// Fields
	public List<USFGOPlayStandardCutInRandom.CutInData> cutInDataList; // 0x90
	[TooltipAttribute] // RVA: 0xC5DB20 Offset: 0xC5DB20 VA: 0xC5DB20
	public bool isSyncVoice; // 0x98
	[TooltipAttribute] // RVA: 0xC5DB58 Offset: 0xC5DB58 VA: 0xC5DB58
	public string syncPlayGroup; // 0xA0
	private Face.Type fixFaceType; // 0xA8
	private int fixSvtId; // 0xAC
	private int fixLimitCount; // 0xB0
	private bool isFirstSetUp; // 0xB4

	// Methods

	// RVA: 0x184A2C4 Offset: 0x184A2C4 VA: 0x184A2C4
	public void .ctor() { }

	// RVA: 0x184A33C Offset: 0x184A33C VA: 0x184A33C
	protected void SetUpCutIn() { }

	// RVA: 0x184A784 Offset: 0x184A784 VA: 0x184A784 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184A7B8 Offset: 0x184A7B8 VA: 0x184A7B8 Slot: 17
	protected override void SetFigure(int svtId, int limCnt, GameObject cutIn, GameObject parentObj, UIStandFigureM figure, Face.Type fType) { }

	// RVA: 0x184A820 Offset: 0x184A820 VA: 0x184A820 Slot: 18
	protected override void OnDestroy() { }

	// RVA: 0x184A85C Offset: 0x184A85C VA: 0x184A85C Slot: 16
	protected override UIStandFigureM GetTargetSvtStandFigure(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0x184A8F0 Offset: 0x184A8F0 VA: 0x184A8F0 Slot: 19
	public override void InitPreLoadStandFigureData(BattleSequenceManager battleSeqManager, GameObject seqObj) { }
}

// Namespace: 
[Serializable]
public struct USFGOPlayStandardCutInRandom.CutInData // TypeDefIndex: 8203
{
	// Fields
	public Face.Type type; // 0x0
	public int weight; // 0x4
	public int svtId; // 0x8
	public int limitCount; // 0xC
	public bool isSingleOperationLimitCount; // 0x10
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29F98 Offset: 0xC29F98 VA: 0xC29F98
[USequencerEventAttribute] // RVA: 0xC29F98 Offset: 0xC29F98 VA: 0xC29F98
public class USFGOPlayTargetAnimationEvent : USEventBase // TypeDefIndex: 8204
{
	// Fields
	public string animationName; // 0x30
	public WrapMode wrapMode; // 0x38
	public USFGOCreateEffectEvent.EffectTarget target; // 0x3C
	protected List<GameObject> Targets; // 0x40
	public float playbackSpeed; // 0x48
	public string startEvent; // 0x50
	public string stopEvent; // 0x58
	public float startTime; // 0x60
	public float stopTime; // 0x64

	// Methods

	// RVA: 0x184AA08 Offset: 0x184AA08 VA: 0x184AA08
	public void .ctor() { }

	// RVA: 0x184AAA4 Offset: 0x184AAA4 VA: 0x184AAA4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184B080 Offset: 0x184B080 VA: 0x184B080 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184B918 Offset: 0x184B918 VA: 0x184B918 Slot: 8
	public override void StopEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC29FF8 Offset: 0xC29FF8 VA: 0xC29FF8
[USequencerEventAttribute] // RVA: 0xC29FF8 Offset: 0xC29FF8 VA: 0xC29FF8
public class USFGOReplaceTimeScale : USEventBase // TypeDefIndex: 8205
{
	// Fields
	[TooltipAttribute] // RVA: 0xC5DB90 Offset: 0xC5DB90 VA: 0xC5DB90
	[HeaderAttribute] // RVA: 0xC5DB90 Offset: 0xC5DB90 VA: 0xC5DB90
	public float targetTimeScale; // 0x30
	private float saveTimeScale; // 0x34
	private bool isChanging; // 0x38

	// Methods

	// RVA: 0x184B91C Offset: 0x184B91C VA: 0x184B91C
	public void .ctor() { }

	// RVA: 0x184B930 Offset: 0x184B930 VA: 0x184B930 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x184B934 Offset: 0x184B934 VA: 0x184B934 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184B974 Offset: 0x184B974 VA: 0x184B974
	private void OnDestroy() { }

	// RVA: 0x184B980 Offset: 0x184B980 VA: 0x184B980 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x184B9B4 Offset: 0x184B9B4 VA: 0x184B9B4 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x184B9C0 Offset: 0x184B9C0 VA: 0x184B9C0 Slot: 8
	public override void StopEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A058 Offset: 0xC2A058 VA: 0xC2A058
[USequencerEventAttribute] // RVA: 0xC2A058 Offset: 0xC2A058 VA: 0xC2A058
[USequencerEventHideDurationAttribute] // RVA: 0xC2A058 Offset: 0xC2A058 VA: 0xC2A058
public class USFGOReserveFlipEvent : USEventBase // TypeDefIndex: 8206
{
	// Fields
	public string NodeName; // 0x30
	public Vector2 PlayerTiling; // 0x38
	public Vector2 PlayerOffset; // 0x40
	public Vector2 EnemyTiling; // 0x48
	public Vector2 EnemyOffset; // 0x50
	private Vector2 OrigTiling; // 0x58
	private Vector2 OrigOffset; // 0x60

	// Methods

	// RVA: 0x184B9CC Offset: 0x184B9CC VA: 0x184B9CC
	public void .ctor() { }

	// RVA: 0x184B9D4 Offset: 0x184B9D4 VA: 0x184B9D4
	protected bool IsEnemy() { }

	// RVA: 0x184BA98 Offset: 0x184BA98 VA: 0x184BA98 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184BCE8 Offset: 0x184BCE8 VA: 0x184BCE8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184BCEC Offset: 0x184BCEC VA: 0x184BCEC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x184BCF8 Offset: 0x184BCF8 VA: 0x184BCF8 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A0C8 Offset: 0xC2A0C8 VA: 0xC2A0C8
[USequencerEventAttribute] // RVA: 0xC2A0C8 Offset: 0xC2A0C8 VA: 0xC2A0C8
public class USFGOResetCharacterPositionEvent : USEventBase // TypeDefIndex: 8207
{
	// Fields
	private const string posPlayerPrefix = "Player";
	private const string posEnemyPrefix = "Enemy";
	public USFGOResetCharacterPositionEvent.CharacterPosition positionInfo; // 0x30

	// Methods

	// RVA: 0x184BEAC Offset: 0x184BEAC VA: 0x184BEAC
	public void .ctor() { }

	// RVA: 0x184BEB4 Offset: 0x184BEB4 VA: 0x184BEB4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184CA20 Offset: 0x184CA20 VA: 0x184CA20 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184CA24 Offset: 0x184CA24 VA: 0x184CA24 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x184CA30 Offset: 0x184CA30 VA: 0x184CA30 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: 
public enum USFGOResetCharacterPositionEvent.CharacterPosition // TypeDefIndex: 8208
{
	// Fields
	public int value__; // 0x0
	public const USFGOResetCharacterPositionEvent.CharacterPosition ResetAll = 0;
	public const USFGOResetCharacterPositionEvent.CharacterPosition ResetPlayers = 1;
	public const USFGOResetCharacterPositionEvent.CharacterPosition ResetEnemies = 2;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A128 Offset: 0xC2A128 VA: 0xC2A128
[USequencerEventAttribute] // RVA: 0xC2A128 Offset: 0xC2A128 VA: 0xC2A128
[USequencerEventHideDurationAttribute] // RVA: 0xC2A128 Offset: 0xC2A128 VA: 0xC2A128
public class USFGOSaturationEffect : USEventBase // TypeDefIndex: 8209
{
	// Fields
	[SerializeField] // RVA: 0xC5DBF0 Offset: 0xC5DBF0 VA: 0xC5DBF0
	private AnimationCurve saturationCurve; // 0x30
	[SerializeField] // RVA: 0xC5DC00 Offset: 0xC5DC00 VA: 0xC5DC00
	private float maxValue; // 0x38
	private float currentCurveSampleTime; // 0x3C

	// Methods

	// RVA: 0x184CB4C Offset: 0x184CB4C VA: 0x184CB4C
	public void .ctor() { }

	// RVA: 0x184CC88 Offset: 0x184CC88 VA: 0x184CC88 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184CC8C Offset: 0x184CC8C VA: 0x184CC8C
	protected void SetSaturation(float saturation) { }

	// RVA: 0x184CE60 Offset: 0x184CE60 VA: 0x184CE60 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184CF10 Offset: 0x184CF10 VA: 0x184CF10 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x184D044 Offset: 0x184D044 VA: 0x184D044 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x184D050 Offset: 0x184D050 VA: 0x184D050 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x184D058 Offset: 0x184D058 VA: 0x184D058
	private void Update() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A198 Offset: 0xC2A198 VA: 0xC2A198
[USequencerEventAttribute] // RVA: 0xC2A198 Offset: 0xC2A198 VA: 0xC2A198
public class USFGOSetCameraEvent : USEventBase // TypeDefIndex: 8210
{
	// Fields
	public Camera camera; // 0x30
	public Transform cameraRoot; // 0x38
	public CameraPosition camPosition; // 0x40
	private Transform originalParent; // 0x48
	private Vector3 previousPosition; // 0x50
	private Vector3 previousScale; // 0x5C
	private Quaternion previousRotation; // 0x68
	private Transform CameraTarget; // 0x78

	// Methods

	// RVA: 0x184D158 Offset: 0x184D158 VA: 0x184D158
	public void .ctor() { }

	// RVA: 0x184D160 Offset: 0x184D160 VA: 0x184D160
	public void Update() { }

	// RVA: 0x184D16C Offset: 0x184D16C VA: 0x184D16C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184D4E8 Offset: 0x184D4E8 VA: 0x184D4E8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184D6E8 Offset: 0x184D6E8 VA: 0x184D6E8 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x184D6F4 Offset: 0x184D6F4 VA: 0x184D6F4 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A1F8 Offset: 0xC2A1F8 VA: 0xC2A1F8
[USequencerEventAttribute] // RVA: 0xC2A1F8 Offset: 0xC2A1F8 VA: 0xC2A1F8
public class USFGOSetCharacterPositionEvent : USEventBase // TypeDefIndex: 8211
{
	// Fields
	public Vector3 positionA; // 0x30
	public Vector3 positionB; // 0x3C
	public Vector3 positionC; // 0x48
	public Vector3 positionD; // 0x54
	public Vector3 positionE; // 0x60
	public bool useSpacePosition; // 0x6C
	private List<Vector3> oldPositions; // 0x70
	private List<bool> oldActives; // 0x78

	// Methods

	// RVA: 0x184D8AC Offset: 0x184D8AC VA: 0x184D8AC
	public void .ctor() { }

	// RVA: 0x184D944 Offset: 0x184D944 VA: 0x184D944 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184DDC0 Offset: 0x184DDC0 VA: 0x184DDC0
	private GameObject[] GetTargetsActor() { }

	// RVA: 0x184D948 Offset: 0x184D948 VA: 0x184D948
	private void SetPosition() { }

	// RVA: 0x184DE84 Offset: 0x184DE84 VA: 0x184DE84
	private void ResetPosition() { }

	// RVA: 0x184E244 Offset: 0x184E244 VA: 0x184E244 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184E248 Offset: 0x184E248 VA: 0x184E248 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x184E24C Offset: 0x184E24C VA: 0x184E24C Slot: 8
	public override void StopEvent() { }

	// RVA: 0x184E258 Offset: 0x184E258 VA: 0x184E258 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A258 Offset: 0xC2A258 VA: 0xC2A258
[USequencerEventAttribute] // RVA: 0xC2A258 Offset: 0xC2A258 VA: 0xC2A258
[USequencerEventHideDurationAttribute] // RVA: 0xC2A258 Offset: 0xC2A258 VA: 0xC2A258
public class USFGOSetModelEvolutionEvent : USEventBase // TypeDefIndex: 8212
{
	// Fields
	public static readonly string levelMarker; // 0x0
	private static readonly string prefabMarker; // 0x8
	private static readonly string chrnodeMarker; // 0x10
	private static readonly string sideflipMarker; // 0x18
	private static readonly string enItemMarker; // 0x20
	private static readonly string enWeaponMarker; // 0x28
	[TooltipAttribute] // RVA: 0xC5DC10 Offset: 0xC5DC10 VA: 0xC5DC10
	public int setEvolutionLevel; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC5DC48 Offset: 0xC5DC48 VA: 0xC5DC48
	private static Func<Transform, bool> <>f__am$cache0; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC5DC58 Offset: 0xC5DC58 VA: 0xC5DC58
	private static Func<Transform, bool> <>f__am$cache1; // 0x38

	// Methods

	// RVA: 0x184E25C Offset: 0x184E25C VA: 0x184E25C
	public void .ctor() { }

	// RVA: 0x184E26C Offset: 0x184E26C VA: 0x184E26C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184F388 Offset: 0x184F388 VA: 0x184F388 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184E48C Offset: 0x184E48C VA: 0x184E48C
	private void setupModel(BattleActorControl bac, GameObject go, int limitImageCount) { }

	// RVA: 0x184F38C Offset: 0x184F38C VA: 0x184F38C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB0D8 Offset: 0xCCB0D8 VA: 0xCCB0D8
	// RVA: 0x184F450 Offset: 0x184F450 VA: 0x184F450
	private static bool <setupModel>m__0(Transform p) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB0E8 Offset: 0xCCB0E8 VA: 0xCCB0E8
	// RVA: 0x184F5A4 Offset: 0x184F5A4 VA: 0x184F5A4
	private static bool <setupModel>m__1(Transform p) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A2C8 Offset: 0xC2A2C8 VA: 0xC2A2C8
[USequencerEventAttribute] // RVA: 0xC2A2C8 Offset: 0xC2A2C8 VA: 0xC2A2C8
public class USFGOShakeCameraEvent : USFGOEventBase // TypeDefIndex: 8213
{
	// Fields
	public float verticalShakeSize; // 0x38
	public float horizontalShakeSize; // 0x3C
	public bool isRelative; // 0x40
	private Transform target; // 0x48
	private Vector3 targetPosition; // 0x50
	private int frameCount; // 0x5C

	// Methods

	// RVA: 0x184F660 Offset: 0x184F660 VA: 0x184F660
	public void .ctor() { }

	// RVA: 0x184F670 Offset: 0x184F670 VA: 0x184F670 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x184F764 Offset: 0x184F764 VA: 0x184F764 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x184F9B0 Offset: 0x184F9B0 VA: 0x184F9B0 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x184F9BC Offset: 0x184F9BC VA: 0x184F9BC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x184F9C8 Offset: 0x184F9C8 VA: 0x184F9C8 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A328 Offset: 0xC2A328 VA: 0xC2A328
[USequencerEventAttribute] // RVA: 0xC2A328 Offset: 0xC2A328 VA: 0xC2A328
[USequencerEventHideDurationAttribute] // RVA: 0xC2A328 Offset: 0xC2A328 VA: 0xC2A328
public class USFGOSwitchNodesWhenMiss : USFGOEventBase // TypeDefIndex: 8214
{
	// Fields
	public string functionlist; // 0x38
	public bool switchingFlg; // 0x40
	public bool noBuffFlg; // 0x41

	// Methods

	// RVA: 0x184FAE0 Offset: 0x184FAE0 VA: 0x184FAE0
	public void .ctor() { }

	// RVA: 0x184FAE8 Offset: 0x184FAE8 VA: 0x184FAE8 Slot: 4
	public override void FireEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A398 Offset: 0xC2A398 VA: 0xC2A398
[USequencerEventAttribute] // RVA: 0xC2A398 Offset: 0xC2A398 VA: 0xC2A398
public class USFGOTargetEffectSwitchEvent : USEventBase // TypeDefIndex: 8215
{
	// Fields
	[SerializeField] // RVA: 0xC5DC68 Offset: 0xC5DC68 VA: 0xC5DC68
	private USFGOTargetEffectSwitchEvent.EffectSwitch effectSwitch; // 0x30
	[SerializeField] // RVA: 0xC5DC78 Offset: 0xC5DC78 VA: 0xC5DC78
	private USFGOTargetEffectSwitchEvent.SwitchType switchType; // 0x34

	// Methods

	// RVA: 0x184FF8C Offset: 0x184FF8C VA: 0x184FF8C
	public void .ctor() { }

	// RVA: 0x184FF94 Offset: 0x184FF94 VA: 0x184FF94 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x18503FC Offset: 0x18503FC VA: 0x18503FC
	private void ParticleSetActive(List<ParticleSystem> particleList, bool active) { }

	// RVA: 0x185058C Offset: 0x185058C VA: 0x185058C
	private void ParticleSwitch(List<ParticleSystem> particleList, bool particlePlay) { }

	// RVA: 0x18507A0 Offset: 0x18507A0 VA: 0x18507A0 Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOTargetEffectSwitchEvent.EffectSwitch // TypeDefIndex: 8216
{
	// Fields
	public int value__; // 0x0
	public const USFGOTargetEffectSwitchEvent.EffectSwitch Off = 0;
	public const USFGOTargetEffectSwitchEvent.EffectSwitch On = 1;
}

// Namespace: 
public enum USFGOTargetEffectSwitchEvent.SwitchType // TypeDefIndex: 8217
{
	// Fields
	public int value__; // 0x0
	public const USFGOTargetEffectSwitchEvent.SwitchType SwitchActive = 0;
	public const USFGOTargetEffectSwitchEvent.SwitchType SwitchParticle = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A3F8 Offset: 0xC2A3F8 VA: 0xC2A3F8
[USequencerEventAttribute] // RVA: 0xC2A3F8 Offset: 0xC2A3F8 VA: 0xC2A3F8
public class USFGOTimeScaleEditEvent : USEventBase // TypeDefIndex: 8218
{
	// Fields
	[TooltipAttribute] // RVA: 0xC5DC88 Offset: 0xC5DC88 VA: 0xC5DC88
	[HeaderAttribute] // RVA: 0xC5DC88 Offset: 0xC5DC88 VA: 0xC5DC88
	public float targetTimeScale; // 0x30
	private float saveTimeScale; // 0x34

	// Methods

	// RVA: 0x18507A4 Offset: 0x18507A4 VA: 0x18507A4
	public void .ctor() { }

	// RVA: 0x18507B8 Offset: 0x18507B8 VA: 0x18507B8 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x18507BC Offset: 0x18507BC VA: 0x18507BC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x185084C Offset: 0x185084C VA: 0x185084C Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC2A458 Offset: 0xC2A458 VA: 0xC2A458
[USequencerEventAttribute] // RVA: 0xC2A458 Offset: 0xC2A458 VA: 0xC2A458
[USequencerEventHideDurationAttribute] // RVA: 0xC2A458 Offset: 0xC2A458 VA: 0xC2A458
public class USFGOToggleImageEffect : USEventBase // TypeDefIndex: 8219
{
	// Fields
	[SerializeField] // RVA: 0xC5DCE8 Offset: 0xC5DCE8 VA: 0xC5DCE8
	private USFGOToggleImageEffect.ImageEffectType type; // 0x30
	[SerializeField] // RVA: 0xC5DCF8 Offset: 0xC5DCF8 VA: 0xC5DCF8
	private bool isEnable; // 0x34

	// Methods

	// RVA: 0x18508CC Offset: 0x18508CC VA: 0x18508CC
	public void .ctor() { }

	// RVA: 0x18508D4 Offset: 0x18508D4 VA: 0x18508D4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1850A84 Offset: 0x1850A84 VA: 0x1850A84 Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOToggleImageEffect.ImageEffectType // TypeDefIndex: 8220
{
	// Fields
	public int value__; // 0x0
	public const USFGOToggleImageEffect.ImageEffectType Constrast = 0;
	public const USFGOToggleImageEffect.ImageEffectType Saturation = 1;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC2A4C8 Offset: 0xC2A4C8 VA: 0xC2A4C8
public static class RectExtension // TypeDefIndex: 8221
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCCB0F8 Offset: 0xCCB0F8 VA: 0xCCB0F8
	// RVA: 0x1585E38 Offset: 0x1585E38 VA: 0x1585E38
	public static bool HasAnyIntersects(Rect self, Rect[] rects, bool allowInverse = False) { }

	[ExtensionAttribute] // RVA: 0xCCB108 Offset: 0xCCB108 VA: 0xCCB108
	// RVA: 0x1585EDC Offset: 0x1585EDC VA: 0x1585EDC
	public static bool IsContain(Rect self, Rect b) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2A4D8 Offset: 0xC2A4D8 VA: 0xC2A4D8
public class FixPositionTargetNodeFS : FsmStateAction // TypeDefIndex: 8222
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC5DD08 Offset: 0xC5DD08 VA: 0xC5DD08
	public FsmGameObject actObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC5DD18 Offset: 0xC5DD18 VA: 0xC5DD18
	public FsmString[] targetNodeNames; // 0x58
	public FsmBool multiX; // 0x60
	public FsmBool multiY; // 0x68
	public FsmBool multiZ; // 0x70
	[TooltipAttribute] // RVA: 0xC5DD28 Offset: 0xC5DD28 VA: 0xC5DD28
	public bool everyFrame; // 0x78
	private List<Transform> listTargetTrans; // 0x80
	private Vector3 multiVector; // 0x88

	// Methods

	// RVA: 0x1AB0750 Offset: 0x1AB0750 VA: 0x1AB0750
	public void .ctor() { }

	// RVA: 0x1AB0758 Offset: 0x1AB0758 VA: 0x1AB0758 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x1AB0790 Offset: 0x1AB0790 VA: 0x1AB0790 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1AB0A8C Offset: 0x1AB0A8C VA: 0x1AB0A8C Slot: 36
	public override void OnLateUpdate() { }

	// RVA: 0x1AB0AC8 Offset: 0x1AB0AC8 VA: 0x1AB0AC8
	private void UpdatePosition() { }
}

// Namespace: 
public class FSAnchor : MonoBehaviour // TypeDefIndex: 8223
{
	// Fields
	public const float RATIO_VISTA = 1.8333334;
	public const float RATIO_SCOPE = 2.3333333;
	public UIWidget widget; // 0x18
	public FSAnchor.Absolute leftAbsolute; // 0x20
	public FSAnchor.Absolute rightAbsolute; // 0x28
	public FSAnchor.Absolute bottomAbsolute; // 0x30
	public FSAnchor.Absolute topAbsolute; // 0x38

	// Methods

	// RVA: 0x10B646C Offset: 0x10B646C VA: 0x10B646C
	public void .ctor() { }

	// RVA: 0x10B6598 Offset: 0x10B6598 VA: 0x10B6598
	private void Awake() { }

	// RVA: 0x10B65D0 Offset: 0x10B65D0 VA: 0x10B65D0
	public void SetAnchor() { }
}

// Namespace: 
[Serializable]
public class FSAnchor.Absolute // TypeDefIndex: 8224
{
	// Fields
	public bool enable; // 0x10
	public int vista; // 0x14
	public int scope; // 0x18

	// Methods

	// RVA: 0x10B6554 Offset: 0x10B6554 VA: 0x10B6554
	public void .ctor(bool _enable, int _vista, int _scope) { }
}

// Namespace: 
public class FSOffset : MonoBehaviour // TypeDefIndex: 8225
{
	// Fields
	public bool enablePosition; // 0x18
	public Vector3 vistaPosition; // 0x1C
	public Vector3 scopePosition; // 0x28
	public bool enableScale; // 0x34
	public Vector3 vistaScale; // 0x38
	public Vector3 scopeScale; // 0x44
	public bool enableAddOffsetX; // 0x50
	public float enableAddOffsetXFouseScopeRatio; // 0x54
	public FSOffset.AddDirectionX addDirectionX; // 0x58
	public float subMarginX; // 0x5C
	public float offsetXRatio; // 0x60
	public bool enableAddBottomY; // 0x64
	public float addBottomY; // 0x68
	public bool checkForceObi; // 0x6C
	public bool calcNotchSize; // 0x6D
	private Vector3 defaultPosition; // 0x70
	private Vector3 defaultScale; // 0x7C

	// Methods

	// RVA: 0x10B6C40 Offset: 0x10B6C40 VA: 0x10B6C40
