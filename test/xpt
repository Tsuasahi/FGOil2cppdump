}

// Namespace: 
public enum USFGOTargetEffectSwitchEvent.SwitchType // TypeDefIndex: 8198
{
	// Fields
	public int value__; // 0x0
	public const USFGOTargetEffectSwitchEvent.SwitchType SwitchActive = 0;
	public const USFGOTargetEffectSwitchEvent.SwitchType SwitchParticle = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96520 Offset: 0xC96520 VA: 0xC96520
[USequencerEventAttribute] // RVA: 0xC96520 Offset: 0xC96520 VA: 0xC96520
public class USFGOTimeScaleEditEvent : USEventBase // TypeDefIndex: 8199
{
	// Fields
	[TooltipAttribute] // RVA: 0xCCAB20 Offset: 0xCCAB20 VA: 0xCCAB20
	[HeaderAttribute] // RVA: 0xCCAB20 Offset: 0xCCAB20 VA: 0xCCAB20
	public float targetTimeScale; // 0x30
	private float saveTimeScale; // 0x34

	// Methods

	// RVA: 0x1DD042C Offset: 0x1DD042C VA: 0x1DD042C
	public void .ctor() { }

	// RVA: 0x1DD0440 Offset: 0x1DD0440 VA: 0x1DD0440 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1DD0444 Offset: 0x1DD0444 VA: 0x1DD0444 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DD04D4 Offset: 0x1DD04D4 VA: 0x1DD04D4 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96580 Offset: 0xC96580 VA: 0xC96580
[USequencerEventAttribute] // RVA: 0xC96580 Offset: 0xC96580 VA: 0xC96580
[USequencerEventHideDurationAttribute] // RVA: 0xC96580 Offset: 0xC96580 VA: 0xC96580
public class USFGOToggleImageEffect : USEventBase // TypeDefIndex: 8200
{
	// Fields
	[SerializeField] // RVA: 0xCCAB80 Offset: 0xCCAB80 VA: 0xCCAB80
	private USFGOToggleImageEffect.ImageEffectType type; // 0x30
	[SerializeField] // RVA: 0xCCAB90 Offset: 0xCCAB90 VA: 0xCCAB90
	private bool isEnable; // 0x34

	// Methods

	// RVA: 0x1DD0554 Offset: 0x1DD0554 VA: 0x1DD0554
	public void .ctor() { }

	// RVA: 0x1DD055C Offset: 0x1DD055C VA: 0x1DD055C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DD070C Offset: 0x1DD070C VA: 0x1DD070C Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOToggleImageEffect.ImageEffectType // TypeDefIndex: 8201
{
	// Fields
	public int value__; // 0x0
	public const USFGOToggleImageEffect.ImageEffectType Constrast = 0;
	public const USFGOToggleImageEffect.ImageEffectType Saturation = 1;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC965F0 Offset: 0xC965F0 VA: 0xC965F0
public static class RectExtension // TypeDefIndex: 8202
{
	// Methods

	[ExtensionAttribute] // RVA: 0xD3876C Offset: 0xD3876C VA: 0xD3876C
	// RVA: 0x1AA1DB4 Offset: 0x1AA1DB4 VA: 0x1AA1DB4
	public static bool HasAnyIntersects(Rect self, Rect[] rects, bool allowInverse = False) { }

	[ExtensionAttribute] // RVA: 0xD3877C Offset: 0xD3877C VA: 0xD3877C
	// RVA: 0x1AA1E58 Offset: 0x1AA1E58 VA: 0x1AA1E58
	public static bool IsContain(Rect self, Rect b) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC96600 Offset: 0xC96600 VA: 0xC96600
public class FixPositionTargetNodeFS : FsmStateAction // TypeDefIndex: 8203
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCCABA0 Offset: 0xCCABA0 VA: 0xCCABA0
	public FsmGameObject actObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCCABB0 Offset: 0xCCABB0 VA: 0xCCABB0
	public FsmString[] targetNodeNames; // 0x58
	public FsmBool multiX; // 0x60
	public FsmBool multiY; // 0x68
	public FsmBool multiZ; // 0x70
	[TooltipAttribute] // RVA: 0xCCABC0 Offset: 0xCCABC0 VA: 0xCCABC0
	public bool everyFrame; // 0x78
	private List<Transform> listTargetTrans; // 0x80
	private Vector3 multiVector; // 0x88

	// Methods

	// RVA: 0x1F79C48 Offset: 0x1F79C48 VA: 0x1F79C48
	public void .ctor() { }

	// RVA: 0x1F79C50 Offset: 0x1F79C50 VA: 0x1F79C50 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x1F79C88 Offset: 0x1F79C88 VA: 0x1F79C88 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1F79F84 Offset: 0x1F79F84 VA: 0x1F79F84 Slot: 36
	public override void OnLateUpdate() { }

	// RVA: 0x1F79FC0 Offset: 0x1F79FC0 VA: 0x1F79FC0
	private void UpdatePosition() { }
}

// Namespace: 
public class FSAnchor : MonoBehaviour // TypeDefIndex: 8204
{
	// Fields
	public const float RATIO_VISTA = 1.8333334;
	public const float RATIO_SCOPE = 2.3333333;
	public UIWidget widget; // 0x18
	public FSAnchor.Absolute leftAbsolute; // 0x20
	public FSAnchor.Absolute rightAbsolute; // 0x28
	public FSAnchor.Absolute bottomAbsolute; // 0x30
	public FSAnchor.Absolute topAbsolute; // 0x38

	// Methods

	// RVA: 0x1615784 Offset: 0x1615784 VA: 0x1615784
	public void .ctor() { }

	// RVA: 0x16158B0 Offset: 0x16158B0 VA: 0x16158B0
	private void Awake() { }

	// RVA: 0x16158E8 Offset: 0x16158E8 VA: 0x16158E8
	public void SetAnchor() { }
}

// Namespace: 
[Serializable]
public class FSAnchor.Absolute // TypeDefIndex: 8205
{
	// Fields
	public bool enable; // 0x10
	public int vista; // 0x14
	public int scope; // 0x18

	// Methods

	// RVA: 0x161586C Offset: 0x161586C VA: 0x161586C
	public void .ctor(bool _enable, int _vista, int _scope) { }
}

// Namespace: 
public class FSOffset : MonoBehaviour // TypeDefIndex: 8206
{
	// Fields
	public bool enablePosition; // 0x18
	public Vector3 vistaPosition; // 0x1C
	public Vector3 scopePosition; // 0x28
	public bool enableScale; // 0x34
	public Vector3 vistaScale; // 0x38
	public Vector3 scopeScale; // 0x44
	public bool enableAddOffsetX; // 0x50
	public float enableAddOffsetXFouseScopeRatio; // 0x54
	public FSOffset.AddDirectionX addDirectionX; // 0x58
	public float subMarginX; // 0x5C
	public float offsetXRatio; // 0x60
	public bool enableAddBottomY; // 0x64
	public float addBottomY; // 0x68
	public bool checkForceObi; // 0x6C
	public bool calcNotchSize; // 0x6D
	private Vector3 defaultPosition; // 0x70
	private Vector3 defaultScale; // 0x7C

	// Methods

	// RVA: 0x1615F58 Offset: 0x1615F58 VA: 0x1615F58
	public void .ctor() { }

	// RVA: 0x1616074 Offset: 0x1616074 VA: 0x1616074
	private void Awake() { }

	// RVA: 0x1616120 Offset: 0x1616120 VA: 0x1616120
	private void OnEnable() { }

	// RVA: 0x161623C Offset: 0x161623C VA: 0x161623C
	public void SetOffset() { }

	// RVA: 0x16163A8 Offset: 0x16163A8 VA: 0x16163A8
	public void AddOffsetX() { }

	// RVA: 0x161661C Offset: 0x161661C VA: 0x161661C
	private void AddOffsetX(float ratio) { }

	// RVA: 0x1616488 Offset: 0x1616488 VA: 0x1616488
	public void AddBottomY() { }

	// RVA: 0x1616078 Offset: 0x1616078 VA: 0x1616078
	public void UpdateOffset() { }
}

// Namespace: 
public enum FSOffset.AddDirectionX // TypeDefIndex: 8207
{
	// Fields
	public int value__; // 0x0
	public const FSOffset.AddDirectionX Left = 0;
	public const FSOffset.AddDirectionX Right = 1;
}

// Namespace: 
public class FSUtility : SingletonMonoBehaviour<FSUtility> // TypeDefIndex: 8208
{
	// Fields
	[SerializeField] // RVA: 0xCCABF8 Offset: 0xCCABF8 VA: 0xCCABF8
	protected FSUtilityList FSUtilityList; // 0x18
	protected static bool isBusySetAssetData; // 0x0
	public static readonly float RATIO_VISTA; // 0x4
	public static readonly float RATIO_SCOPE; // 0x8
	public static readonly string FS_UTILITY_LIST_PATH; // 0x10
	private const float SUB_MARGIN_X = 68;
	public static int[] legacyBacks; // 0x18
	public static string[] fullScreenImages; // 0x20
	public static Dictionary<int, float> trimBackRatioY; // 0x28
	public static string[] legacyMovies; // 0x30
	public static int[] fullScreenNpChrs; // 0x38
	public static int[] fullScreenNpSeqIds; // 0x40

	// Methods

	// RVA: 0x1616810 Offset: 0x1616810 VA: 0x1616810
	public void .ctor() { }

	// RVA: 0x1616860 Offset: 0x1616860 VA: 0x1616860
	public static bool IsBusySetAssetData() { }

	// RVA: 0x16168C8 Offset: 0x16168C8 VA: 0x16168C8
	public static void Initialize() { }

	// RVA: 0x161696C Offset: 0x161696C VA: 0x161696C
	protected void InitializeLocal() { }

	// RVA: 0x1616BB0 Offset: 0x1616BB0 VA: 0x1616BB0
	public static void LoadAssetData() { }

	// RVA: 0x16169F4 Offset: 0x16169F4 VA: 0x16169F4
	protected void ReadFSUtilityList(FSUtilityList fsUtilityList) { }

	// RVA: 0x1616D2C Offset: 0x1616D2C VA: 0x1616D2C
	public static void SetUpBackTextureSize(ExUITexture backTexture, string bgName) { }

	// RVA: 0x1616DF4 Offset: 0x1616DF4 VA: 0x1616DF4
	public static bool IsFullScreenImage(string imageName) { }

	// RVA: 0x1611858 Offset: 0x1611858 VA: 0x1611858
	public static bool IsFullScreenBack(string fileName) { }

	// RVA: 0x1616F28 Offset: 0x1616F28 VA: 0x1616F28
	public static bool IsFullScreenBack(int id) { }

	// RVA: 0x1611944 Offset: 0x1611944 VA: 0x1611944
	public static float GetBackFSOffsetY(string fileName) { }

	// RVA: 0x1617030 Offset: 0x1617030 VA: 0x1617030
	public static bool IsFullScreenNP(int chrId, int seqId) { }

	// RVA: 0x161738C Offset: 0x161738C VA: 0x161738C
	public static bool IsFullScreenMovie(string fileName) { }

	// RVA: 0x161657C Offset: 0x161657C VA: 0x161657C
	public static bool IsUnderVista() { }

	// RVA: 0x1611EE8 Offset: 0x1611EE8 VA: 0x1611EE8
	public static bool IsTablet() { }

	// RVA: 0x1617634 Offset: 0x1617634 VA: 0x1617634
	public static bool IsOverScope() { }

	// RVA: 0x1616788 Offset: 0x1616788 VA: 0x1616788
	public static float GetNotchSubMarginX(float subMarginX = 68) { }

	// RVA: 0x16177D8 Offset: 0x16177D8 VA: 0x16177D8
	public static float GetOffsetX(float subMarginX = 68, bool calcNotch = True) { }

	// RVA: 0x16178FC Offset: 0x16178FC VA: 0x16178FC
	public static Vector2 GetAddOffset(FSOffset refOffset, bool calcNotch = True) { }

	// RVA: 0x16176D4 Offset: 0x16176D4 VA: 0x16176D4
	private static float CalculateNotchWidth() { }

	// RVA: 0x1617A4C Offset: 0x1617A4C VA: 0x1617A4C
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF230 Offset: 0xCAF230 VA: 0xCAF230
private sealed class FSUtility.<LoadAssetData>c__AnonStorey0 // TypeDefIndex: 8209
{
	// Fields
	internal FSUtility ins; // 0x10

	// Methods

	// RVA: 0x18F17E0 Offset: 0x18F17E0 VA: 0x18F17E0
	public void .ctor() { }

	// RVA: 0x18F17E8 Offset: 0x18F17E8 VA: 0x18F17E8
	internal void <>m__0(AssetData assetData) { }
}

// Namespace: 
[CreateAssetMenuAttribute] // RVA: 0xC96638 Offset: 0xC96638 VA: 0xC96638
public class FSUtilityList : ScriptableObject // TypeDefIndex: 8210
{
	// Fields
	[HeaderAttribute] // RVA: 0xCCAC08 Offset: 0xCCAC08 VA: 0xCCAC08
	[HeaderAttribute] // RVA: 0xCCAC08 Offset: 0xCCAC08 VA: 0xCCAC08
	[HeaderAttribute] // RVA: 0xCCAC08 Offset: 0xCCAC08 VA: 0xCCAC08
	public int[] legacyBacks; // 0x18
	[HeaderAttribute] // RVA: 0xCCAC8C Offset: 0xCCAC8C VA: 0xCCAC8C
	[HeaderAttribute] // RVA: 0xCCAC8C Offset: 0xCCAC8C VA: 0xCCAC8C
	[HeaderAttribute] // RVA: 0xCCAC8C Offset: 0xCCAC8C VA: 0xCCAC8C
	public string[] fullScreenImages; // 0x20
	[HeaderAttribute] // RVA: 0xCCAD10 Offset: 0xCCAD10 VA: 0xCCAD10
	[HeaderAttribute] // RVA: 0xCCAD10 Offset: 0xCCAD10 VA: 0xCCAD10
	public FSUtilityList.trimBackRatioYChild[] trimBackRatioY; // 0x28
	[HeaderAttribute] // RVA: 0xCCAD70 Offset: 0xCCAD70 VA: 0xCCAD70
	[HeaderAttribute] // RVA: 0xCCAD70 Offset: 0xCCAD70 VA: 0xCCAD70
	public string[] legacyMovies; // 0x30
	[HeaderAttribute] // RVA: 0xCCADD0 Offset: 0xCCADD0 VA: 0xCCADD0
	[HeaderAttribute] // RVA: 0xCCADD0 Offset: 0xCCADD0 VA: 0xCCADD0
	public int[] fullScreenNpChrs; // 0x38
	[HeaderAttribute] // RVA: 0xCCAE30 Offset: 0xCCAE30 VA: 0xCCAE30
	[HeaderAttribute] // RVA: 0xCCAE30 Offset: 0xCCAE30 VA: 0xCCAE30
	public int[] fullScreenNpSeqIds; // 0x40

	// Methods

	// RVA: 0x18F18A4 Offset: 0x18F18A4 VA: 0x18F18A4
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class FSUtilityList.trimBackRatioYChild // TypeDefIndex: 8211
{
	// Fields
	public int id; // 0x10
	public float offsetY; // 0x14

	// Methods

	// RVA: 0x18F18AC Offset: 0x18F18AC VA: 0x18F18AC
	public void .ctor() { }
}

// Namespace: 
public class FSWidgetSize : MonoBehaviour // TypeDefIndex: 8212
{
	// Fields
	public Vector2Int size_16_9; // 0x18
	public Vector2Int size_21_9; // 0x20
	public bool fixWidth; // 0x28
	public bool fixHeight; // 0x29

	// Methods

	// RVA: 0x18F18B4 Offset: 0x18F18B4 VA: 0x18F18B4
	public void .ctor() { }

	// RVA: 0x18F1924 Offset: 0x18F1924 VA: 0x18F1924
	private void Awake() { }

	// RVA: 0x18F195C Offset: 0x18F195C VA: 0x18F195C
	public void SetSize() { }

	// RVA: 0x18F1AAC Offset: 0x18F1AAC VA: 0x18F1AAC
	private int GetSize(int size_16_9, int size_21_9, bool fix) { }
}

// Namespace: 
public static class FSWindowUtil // TypeDefIndex: 8213
{
	// Fields
	private const float windowAspectMin = 1.7777778;
	private const float windowAspectMax = 2.3333333;

	// Methods

	// RVA: 0x18F1BD0 Offset: 0x18F1BD0 VA: 0x18F1BD0
	public static Vector2 GetSize() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC9667C Offset: 0xC9667C VA: 0xC9667C
public class iTweenMoveUpdateFS : iTweenMoveUpdate // TypeDefIndex: 8214
{
	// Fields
	public FsmVector3 pos_21_9; // 0xB0

	// Methods

	// RVA: 0x248BE24 Offset: 0x248BE24 VA: 0x248BE24
	public void .ctor() { }

	// RVA: 0x248BE2C Offset: 0x248BE2C VA: 0x248BE2C Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC966B4 Offset: 0xC966B4 VA: 0xC966B4
public class ShowBattleEffectAFS : FsmStateAction // TypeDefIndex: 8215
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCCAE90 Offset: 0xCCAE90 VA: 0xCCAE90
	public FsmGameObject actObject; // 0x50
	public FsmGameObject targetObject; // 0x58
	public FsmInt effectId; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmVector3 position; // 0x70
	public FsmBool sideflip; // 0x78
	public FsmBool isXFlip; // 0x80
	public FsmBool isZFlip2018; // 0x88
	public FsmBool isParent; // 0x90
	public FsmBool isAbsScale; // 0x98
	public FsmGameObject storeObject; // 0xA0
	public bool isEffectServant; // 0xA8
	[RequiredFieldAttribute] // RVA: 0xCCAEA0 Offset: 0xCCAEA0 VA: 0xCCAEA0
	public FsmString[] targetNodeNames; // 0xB0
	public FsmBool multiX; // 0xB8
	public FsmBool multiY; // 0xC0
	public FsmBool multiZ; // 0xC8

	// Methods

	// RVA: 0x2126CB0 Offset: 0x2126CB0 VA: 0x2126CB0
	public void .ctor() { }

	// RVA: 0x2126D14 Offset: 0x2126D14 VA: 0x2126D14 Slot: 32
	public override void OnEnter() { }
}

// Namespace: 
public static class BackupHelper // TypeDefIndex: 8216
{
	// Methods

	[ConditionalAttribute] // RVA: 0xD3878C Offset: 0xD3878C VA: 0xD3878C
	// RVA: 0x147BFF4 Offset: 0x147BFF4 VA: 0x147BFF4
	public static void SetNoBackupFlag(string[] pathArray) { }

	[ConditionalAttribute] // RVA: 0xD387C4 Offset: 0xD387C4 VA: 0xD387C4
	// RVA: 0x147BFF8 Offset: 0x147BFF8 VA: 0x147BFF8
	public static void SetNoBackupFlag(string path) { }

	[ConditionalAttribute] // RVA: 0xD387FC Offset: 0xD387FC VA: 0xD387FC
	// RVA: 0x147BFFC Offset: 0x147BFFC VA: 0x147BFFC
	public static void SetNoBackupFlag(string path, string[] excludeFileList) { }

	[ConditionalAttribute] // RVA: 0xD38834 Offset: 0xD38834 VA: 0xD38834
	// RVA: 0x147C000 Offset: 0x147C000 VA: 0x147C000
	public static void ResetNoBackupFlag(string path) { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC966EC Offset: 0xC966EC VA: 0xC966EC
public static class BasicHelper // TypeDefIndex: 8217
{
	// Methods

	[ExtensionAttribute] // RVA: 0xD3886C Offset: 0xD3886C VA: 0xD3886C
	// RVA: 0x14837C0 Offset: 0x14837C0 VA: 0x14837C0
	public static int DecryptValue(int self) { }

	[ExtensionAttribute] // RVA: 0xD3887C Offset: 0xD3887C VA: 0xD3887C
	// RVA: 0x1483828 Offset: 0x1483828 VA: 0x1483828
	public static int DecryptValue(ObscuredInt self) { }

	[ExtensionAttribute] // RVA: 0xD3888C Offset: 0xD3888C VA: 0xD3888C
	// RVA: 0x14838A0 Offset: 0x14838A0 VA: 0x14838A0
	public static string EncryptDecryptValue(string self) { }

	[ExtensionAttribute] // RVA: 0xD3889C Offset: 0xD3889C VA: 0xD3889C
	// RVA: 0x1483908 Offset: 0x1483908 VA: 0x1483908
	public static string DecryptValue(ObscuredString self) { }

	[ExtensionAttribute] // RVA: 0xD388AC Offset: 0xD388AC VA: 0xD388AC
	// RVA: 0x1483970 Offset: 0x1483970 VA: 0x1483970
	public static long DecryptValue(long self) { }

	[ExtensionAttribute] // RVA: 0xD388BC Offset: 0xD388BC VA: 0xD388BC
	// RVA: 0x14839D8 Offset: 0x14839D8 VA: 0x14839D8
	public static long DecryptValue(ObscuredLong self) { }

	[ExtensionAttribute] // RVA: 0xD388CC Offset: 0xD388CC VA: 0xD388CC
	// RVA: -1 Offset: -1
	public static T Find<T>(T[] array, Func<T, bool> func) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218C528 Offset: 0x218C528 VA: 0x218C528
	|-BasicHelper.Find<BattleServantData.SaveData>
	|-BasicHelper.Find<BgmPlayArgs>
	|-BasicHelper.Find<SubBgmPlayer>
	|-BasicHelper.Find<object>
	|-BasicHelper.Find<string>
	|-BasicHelper.Find<GameObject>
	|-BasicHelper.Find<USFGOActorBattleActionEventConditional.OverwriteParamCondition>
	*/

	[ExtensionAttribute] // RVA: 0xD388DC Offset: 0xD388DC VA: 0xD388DC
	// RVA: -1 Offset: -1
	public static T FindComponent<T>(GameObject[] array, Func<T, bool> func) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218C608 Offset: 0x218C608 VA: 0x218C608
	|-BasicHelper.FindComponent<BattleActorControl>
	|-BasicHelper.FindComponent<object>
	*/

	[ExtensionAttribute] // RVA: 0xD388EC Offset: 0xD388EC VA: 0xD388EC
	// RVA: -1 Offset: -1
	public static bool Any<T>(List<T> list, Func<T, bool> func) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26A04F4 Offset: 0x26A04F4 VA: 0x26A04F4
	|-BasicHelper.Any<BattleActionData.DamageData>
	|-BasicHelper.Any<BattleServantData>
	|-BasicHelper.Any<DataEntityBase>
	|-BasicHelper.Any<EventInfoUIBase.Data>
	|-BasicHelper.Any<EventMissionConditionEntity>
	|-BasicHelper.Any<EventSpotMoveManager.SpotMoveData>
	|-BasicHelper.Any<EventUiEntity>
	|-BasicHelper.Any<ItemDroppedSkillShiftInfo.ServantInfo>
	|-BasicHelper.Any<MapControl.QuestInfo>
	|-BasicHelper.Any<MaterialBranchRouteManager.MaterialBranchInfo>
	|-BasicHelper.Any<QuestReleaseEntity>
	|-BasicHelper.Any<ServantSkillReleaseEntity>
	|-BasicHelper.Any<object>
	|-BasicHelper.Any<string>
	|-BasicHelper.Any<UISpriteData>
	|-BasicHelper.Any<UserEventMissionEntity>
	|-BasicHelper.Any<UserQuestRouteEntity>
	|-BasicHelper.Any<UserServantEntity>
	|-BasicHelper.Any<WarBoardAIRoute.RouteData>
	|-BasicHelper.Any<WarBoardData.SquareRangeSearch>
	|
	|-RVA: 0x26A00A0 Offset: 0x26A00A0 VA: 0x26A00A0
	|-BasicHelper.Any<BattleResultEventItemComponent.EventDropItemInfo>
	|
	|-RVA: 0x26A02D4 Offset: 0x26A02D4 VA: 0x26A02D4
	|-BasicHelper.Any<int>
	*/

	[ExtensionAttribute] // RVA: 0xD388FC Offset: 0xD388FC VA: 0xD388FC
	// RVA: -1 Offset: -1
	public static bool Any<T>(T[] array, Func<T, bool> func) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x269FFF4 Offset: 0x269FFF4 VA: 0x269FFF4
	|-BasicHelper.Any<BattleLogic.LOGICTYPE>
	|
	|-RVA: 0x26A05BC Offset: 0x26A05BC VA: 0x26A05BC
	|-BasicHelper.Any<BattleLogicFunctionProcess.FunctionTargetCheck>
	|-BasicHelper.Any<BattleLogicFunctionProcess.FunctionUnitCheck>
	|-BasicHelper.Any<BattleResultBondsIconComponent>
	|-BasicHelper.Any<BattleServantData>
	|-BasicHelper.Any<BattleSkillInfoData>
	|-BasicHelper.Any<FsmEvent>
	|-BasicHelper.Any<FsmTransition>
	|-BasicHelper.Any<QuestReleaseEntity>
	|-BasicHelper.Any<RestrictionEntity>
	|-BasicHelper.Any<object>
	|-BasicHelper.Any<string>
	|-BasicHelper.Any<GameObject>
	|-BasicHelper.Any<AppleInAppPurchaseReceipt>
	|-BasicHelper.Any<UserEventBoardGameTokenEntity>
	|-BasicHelper.Any<UserServantEntity>
	|-BasicHelper.Any<WarBoardPieceData>
	|-BasicHelper.Any<WarEntity>
	|-BasicHelper.Any<USFGOPlayBgmEventConditional.CondBGM>
	|
	|-RVA: 0x26A017C Offset: 0x26A017C VA: 0x26A017C
	|-BasicHelper.Any<BuffList.ACTION>
	|
	|-RVA: 0x26A0228 Offset: 0x26A0228 VA: 0x26A0228
	|-BasicHelper.Any<ListViewSort.FilterCategoryKind>
	|
	|-RVA: 0x26A039C Offset: 0x26A039C VA: 0x26A039C
	|-BasicHelper.Any<int>
	|
	|-RVA: 0x26A0448 Offset: 0x26A0448 VA: 0x26A0448
	|-BasicHelper.Any<long>
	*/

	[ExtensionAttribute] // RVA: 0xD3890C Offset: 0xD3890C VA: 0xD3890C
	// RVA: -1 Offset: -1
	public static List<T> Shuffle<T>(List<T> list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FA45B0 Offset: 0x1FA45B0 VA: 0x1FA45B0
	|-BasicHelper.Shuffle<int>
	|
	|-RVA: 0x1FA4708 Offset: 0x1FA4708 VA: 0x1FA4708
	|-BasicHelper.Shuffle<object>
	|-BasicHelper.Shuffle<string>
	*/

	[ExtensionAttribute] // RVA: 0xD3891C Offset: 0xD3891C VA: 0xD3891C
	// RVA: -1 Offset: -1
	public static List<T> StableSort<T>(List<T> list, Func<T, int> priorityFunc, bool isDescending = False) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FA4860 Offset: 0x1FA4860 VA: 0x1FA4860
	|-BasicHelper.StableSort<BattleSkillInfoData>
	|-BasicHelper.StableSort<NpcFollowerEntity>
	|-BasicHelper.StableSort<object>
	*/

	[ExtensionAttribute] // RVA: 0xD3892C Offset: 0xD3892C VA: 0xD3892C
	// RVA: 0x1483A64 Offset: 0x1483A64 VA: 0x1483A64
	public static bool SynchronizeAnimation(Animation self, string selfAnimStr, string tgAnimStr, Animation targetAnim) { }

	[ExtensionAttribute] // RVA: 0xD3893C Offset: 0xD3893C VA: 0xD3893C
	// RVA: 0x1483C48 Offset: 0x1483C48 VA: 0x1483C48
	public static bool SynchronizeAnimation(SimpleAnimation self, string selfAnimStr, string tgAnimStr, SimpleAnimation targetAnim) { }

	// RVA: 0x1484074 Offset: 0x1484074 VA: 0x1484074
	public static int Clamp(int value, int min, int max) { }

	[ExtensionAttribute] // RVA: 0xD3894C Offset: 0xD3894C VA: 0xD3894C
	// RVA: 0x147E018 Offset: 0x147E018 VA: 0x147E018
	public static int[] Convert2IntArray(string self, char separator) { }

	[ExtensionAttribute] // RVA: 0xD3895C Offset: 0xD3895C VA: 0xD3895C
	// RVA: -1 Offset: -1
	public static T IndexValue<T>(T[] array, int index, T def) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218CB9C Offset: 0x218CB9C VA: 0x218CB9C
	|-BasicHelper.IndexValue<AiState.SaveData>
	|-BasicHelper.IndexValue<BattleBuffData.BuffData>
	|-BasicHelper.IndexValue<BattleCommandComponent>
	|-BasicHelper.IndexValue<BattleFieldMotionComponent>
	|-BasicHelper.IndexValue<BattleServantData.Adjustment>
	|-BasicHelper.IndexValue<BattleServantData>
	|-BasicHelper.IndexValue<BattleServantParamComponent>
	|-BasicHelper.IndexValue<FsmGameObject>
	|-BasicHelper.IndexValue<NpcAiState>
	|-BasicHelper.IndexValue<object>
	|-BasicHelper.IndexValue<GameObject>
	|-BasicHelper.IndexValue<Transform>
	|-BasicHelper.IndexValue<USFGOPlayStandardCutInLimitCount.OverwriteStandFigure>
	|
	|-RVA: 0x218C994 Offset: 0x218C994 VA: 0x218C994
	|-BasicHelper.IndexValue<BattleLogic.LOGICTYPE>
	|
	|-RVA: 0x218C9EC Offset: 0x218C9EC VA: 0x218C9EC
	|-BasicHelper.IndexValue<bool>
	|
	|-RVA: 0x218CAC8 Offset: 0x218CAC8 VA: 0x218CAC8
	|-BasicHelper.IndexValue<int>
	*/

	[ExtensionAttribute] // RVA: 0xD3896C Offset: 0xD3896C VA: 0xD3896C
	// RVA: -1 Offset: -1
	public static T IndexValue<T>(List<T> list, int index, T def) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218CB20 Offset: 0x218CB20 VA: 0x218CB20
	|-BasicHelper.IndexValue<AiNpcBattleServantData>
	|-BasicHelper.IndexValue<ShiftHpData.HpDetail>
	|-BasicHelper.IndexValue<ShiftHpData>
	|-BasicHelper.IndexValue<BattleAttack>
	|-BasicHelper.IndexValue<BattleSkillInfoData>
	|-BasicHelper.IndexValue<object>
	|
	|-RVA: 0x218CA4C Offset: 0x218CA4C VA: 0x218CA4C
	|-BasicHelper.IndexValue<int>
	*/

	[ExtensionAttribute] // RVA: 0xD3897C Offset: 0xD3897C VA: 0xD3897C
	// RVA: -1 Offset: -1
	public static T GetValue<T>(Dictionary<string, object> dic, string key, T def) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218C878 Offset: 0x218C878 VA: 0x218C878
	|-BasicHelper.GetValue<Dictionary<string, object>>
	|-BasicHelper.GetValue<List<object>>
	|-BasicHelper.GetValue<object>
	|-BasicHelper.GetValue<string>
	|
	|-RVA: 0x218C7B4 Offset: 0x218C7B4 VA: 0x218C7B4
	|-BasicHelper.GetValue<long>
	*/

	[ExtensionAttribute] // RVA: 0xD3898C Offset: 0xD3898C VA: 0xD3898C
	// RVA: -1 Offset: -1
	public static V GetValue<K, V>(Dictionary<K, V> dic, K key, V def) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B899B0 Offset: 0x2B899B0 VA: 0x2B899B0
	|-BasicHelper.GetValue<AiAct.TYPE, BattleLogicNpcAi.BaseAiActProc>
	|-BasicHelper.GetValue<AiAct.TYPE, object>
	|
	|-RVA: 0x2B89A28 Offset: 0x2B89A28 VA: 0x2B89A28
	|-BasicHelper.GetValue<BattleLogic.LOGICTYPE, BattleLogicTask.ACTIONTYPE>
	|
	|-RVA: 0x2B89AA0 Offset: 0x2B89AA0 VA: 0x2B89AA0
	|-BasicHelper.GetValue<BattleLogicTask.ACTIONTYPE, AiLogic.PROC_STATE>
	|
	|-RVA: 0x2B89B90 Offset: 0x2B89B90 VA: 0x2B89B90
	|-BasicHelper.GetValue<int, FollowerInfo>
	|-BasicHelper.GetValue<int, int[]>
	|-BasicHelper.GetValue<int, object>
	|
	|-RVA: 0x2B89B18 Offset: 0x2B89B18 VA: 0x2B89B18
	|-BasicHelper.GetValue<int, long>
	|
	|-RVA: 0x2B89C08 Offset: 0x2B89C08 VA: 0x2B89C08
	|-BasicHelper.GetValue<long, int>
	|
	|-RVA: 0x2B89C80 Offset: 0x2B89C80 VA: 0x2B89C80
	|-BasicHelper.GetValue<object, object>
	*/

	[ExtensionAttribute] // RVA: 0xD3899C Offset: 0xD3899C VA: 0xD3899C
	// RVA: -1 Offset: -1
	public static void Remove<K, V>(Dictionary<K, V> dic, Func<KeyValuePair<K, V>, bool> cond) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CEF6C Offset: 0x21CEF6C VA: 0x21CEF6C
	|-BasicHelper.Remove<int, object>
	|-BasicHelper.Remove<int, GameObject>
	|
	|-RVA: 0x21CF07C Offset: 0x21CF07C VA: 0x21CF07C
	|-BasicHelper.Remove<object, object>
	*/

	[ExtensionAttribute] // RVA: 0xD389AC Offset: 0xD389AC VA: 0xD389AC
	// RVA: -1 Offset: -1
	public static void ForEach<T>(IEnumerable<T> sequence, Action<T> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CE9B0 Offset: 0x21CE9B0 VA: 0x21CE9B0
	|-BasicHelper.ForEach<BattleActionData.BuffData>
	|-BasicHelper.ForEach<BattleActionData.DamageData>
	|-BasicHelper.ForEach<BattleActionData.HealData>
	|-BasicHelper.ForEach<BattleBuffData.BuffData>
	|-BasicHelper.ForEach<BattleServantData>
	|-BasicHelper.ForEach<BgmPlayArgs>
	|-BasicHelper.ForEach<GeneralBgmPlayer>
	|-BasicHelper.ForEach<MapControl.MapGimmickInfo>
	|-BasicHelper.ForEach<NpcAiState>
	|-BasicHelper.ForEach<RestockServantLogic>
	|-BasicHelper.ForEach<RestrictionEntity>
	|-BasicHelper.ForEach<ScriptActionAdvPrefabActorController>
	|-BasicHelper.ForEach<SubBgmPlayer>
	|-BasicHelper.ForEach<int[]>
	|-BasicHelper.ForEach<object>
	|-BasicHelper.ForEach<UIWidget>
	|-BasicHelper.ForEach<WarBoardPieceData>
	|-BasicHelper.ForEach<WarBoardSquareData>
	|
	|-RVA: 0x21CDE4C Offset: 0x21CDE4C VA: 0x21CDE4C
	|-BasicHelper.ForEach<KeyValuePair<int, int>>
	|
	|-RVA: 0x21CE11C Offset: 0x21CE11C VA: 0x21CE11C
	|-BasicHelper.ForEach<KeyValuePair<object, object>>
	|-BasicHelper.ForEach<KeyValuePair<string, object>>
	|
	|-RVA: 0x21CE3F4 Offset: 0x21CE3F4 VA: 0x21CE3F4
	|-BasicHelper.ForEach<int>
	*/

	[ExtensionAttribute] // RVA: 0xD389BC Offset: 0xD389BC VA: 0xD389BC
	// RVA: -1 Offset: -1
	public static void ForEach<T>(IEnumerable<T> sequence, Action<int, T> action) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CE6C4 Offset: 0x21CE6C4 VA: 0x21CE6C4
	|-BasicHelper.ForEach<int>
	|
	|-RVA: 0x21CEC80 Offset: 0x21CEC80 VA: 0x21CEC80
	|-BasicHelper.ForEach<object>
	*/

	[ExtensionAttribute] // RVA: 0xD389CC Offset: 0xD389CC VA: 0xD389CC
	// RVA: 0x148409C Offset: 0x148409C VA: 0x148409C
	public static void SetStopEffectCallBack(GameObject obj, bool isDestroy, Action action) { }

	[ExtensionAttribute] // RVA: 0xD389DC Offset: 0xD389DC VA: 0xD389DC
	// RVA: 0x14841B8 Offset: 0x14841B8 VA: 0x14841B8
	public static bool EqualExceptNullOrEmpty(string self, string target) { }

	[ExtensionAttribute] // RVA: 0xD389EC Offset: 0xD389EC VA: 0xD389EC
	// RVA: -1 Offset: -1
	public static T TakeIf<T>(T self, Predicate<T> match) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218CBF4 Offset: 0x218CBF4 VA: 0x218CBF4
	|-BasicHelper.TakeIf<BattleServantData>
	|-BasicHelper.TakeIf<object>
	*/

	[ExtensionAttribute] // RVA: 0xD389FC Offset: 0xD389FC VA: 0xD389FC
	[DebuggerHiddenAttribute] // RVA: 0xD389FC Offset: 0xD389FC VA: 0xD389FC
	// RVA: -1 Offset: -1
	public static IEnumerable<T> ToIterator<T>(int loopCount, Func<int, T> func) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1F9A564 Offset: 0x1F9A564 VA: 0x1F9A564
	|-BasicHelper.ToIterator<RestockServantLogic>
	|-BasicHelper.ToIterator<object>
	*/

	[ExtensionAttribute] // RVA: 0xD38A34 Offset: 0xD38A34 VA: 0xD38A34
	// RVA: 0x1484288 Offset: 0x1484288 VA: 0x1484288
	public static void Loop(int loopCount, Action<int> action) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38A44 Offset: 0xD38A44 VA: 0xD38A44
	// RVA: 0x1484308 Offset: 0x1484308 VA: 0x1484308
	public static IEnumerator DelayCall(float delay, Action action) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38A54 Offset: 0xD38A54 VA: 0xD38A54
	// RVA: -1 Offset: -1
	public static IEnumerator DelayCall<T>(float delay, Action<T> action, T arg) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1FA694C Offset: 0x1FA694C VA: 0x1FA694C
	|-BasicHelper.DelayCall<ShowAllEx.DamageFuncArgument>
	|
	|-RVA: 0x1FA6A34 Offset: 0x1FA6A34 VA: 0x1FA6A34
	|-BasicHelper.DelayCall<object>
	*/

	[ExtensionAttribute] // RVA: 0xD38A64 Offset: 0xD38A64 VA: 0xD38A64
	// RVA: -1 Offset: -1
	public static T AddNotExistComponent<T>(Transform self) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218C420 Offset: 0x218C420 VA: 0x218C420
	|-BasicHelper.AddNotExistComponent<BattleSyncTransformComponent>
	|-BasicHelper.AddNotExistComponent<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xD38A74 Offset: 0xD38A74 VA: 0xD38A74
	// RVA: -1 Offset: -1
	private static K <Remove`2>m__0<K, V>(KeyValuePair<K, V> pair) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x269165C Offset: 0x269165C VA: 0x269165C
	|-BasicHelper.<Remove`2>m__0<int, object>
	|
	|-RVA: 0x2691688 Offset: 0x2691688 VA: 0x2691688
	|-BasicHelper.<Remove`2>m__0<object, object>
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF240 Offset: 0xCAF240 VA: 0xCAF240
private sealed class BasicHelper.<ToIterator>c__Iterator0<T> : IEnumerable, IEnumerable<T>, IEnumerator, IDisposable, IEnumerator<T> // TypeDefIndex: 8218
{
	// Fields
	internal Func<int, T> func; // 0x0
	internal int <i>__1; // 0x0
	internal int loopCount; // 0x0
	internal T $current; // 0x0
	internal bool $disposing; // 0x0
	internal int $PC; // 0x0

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD468D4 Offset: 0xD468D4 VA: 0xD468D4
	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x251709C Offset: 0x251709C VA: 0x251709C
	|-BasicHelper.<ToIterator>c__Iterator0<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 7
	public bool MoveNext() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25170C8 Offset: 0x25170C8 VA: 0x25170C8
	|-BasicHelper.<ToIterator>c__Iterator0<object>.MoveNext
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD468E4 Offset: 0xD468E4 VA: 0xD468E4
	// RVA: -1 Offset: -1 Slot: 10
	private T System.Collections.Generic.IEnumerator<T>.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25171A8 Offset: 0x25171A8 VA: 0x25171A8
	|-BasicHelper.<ToIterator>c__Iterator0<object>.System.Collections.Generic.IEnumerator<T>.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD468F4 Offset: 0xD468F4 VA: 0xD468F4
	// RVA: -1 Offset: -1 Slot: 6
	private object System.Collections.IEnumerator.get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25171B0 Offset: 0x25171B0 VA: 0x25171B0
	|-BasicHelper.<ToIterator>c__Iterator0<object>.System.Collections.IEnumerator.get_Current
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD46904 Offset: 0xD46904 VA: 0xD46904
	// RVA: -1 Offset: -1 Slot: 9
	public void Dispose() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25171B8 Offset: 0x25171B8 VA: 0x25171B8
	|-BasicHelper.<ToIterator>c__Iterator0<object>.Dispose
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD46914 Offset: 0xD46914 VA: 0xD46914
	// RVA: -1 Offset: -1 Slot: 8
	public void Reset() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25171CC Offset: 0x25171CC VA: 0x25171CC
	|-BasicHelper.<ToIterator>c__Iterator0<object>.Reset
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD46924 Offset: 0xD46924 VA: 0xD46924
	// RVA: -1 Offset: -1 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2517234 Offset: 0x2517234 VA: 0x2517234
	|-BasicHelper.<ToIterator>c__Iterator0<object>.System.Collections.IEnumerable.GetEnumerator
	*/

	[DebuggerHiddenAttribute] // RVA: 0xD46934 Offset: 0xD46934 VA: 0xD46934
	// RVA: -1 Offset: -1 Slot: 5
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2517270 Offset: 0x2517270 VA: 0x2517270
	|-BasicHelper.<ToIterator>c__Iterator0<object>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF250 Offset: 0xCAF250 VA: 0xCAF250
private sealed class BasicHelper.<DelayCall>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8219
{
	// Fields
	internal float delay; // 0x10
	internal Action action; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46944 Offset: 0xD46944 VA: 0xD46944
	// RVA: 0x148439C Offset: 0x148439C VA: 0x148439C
	public void .ctor() { }

	// RVA: 0x14843A4 Offset: 0x14843A4 VA: 0x14843A4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46954 Offset: 0xD46954 VA: 0xD46954
	// RVA: 0x1484478 Offset: 0x1484478 VA: 0x1484478 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46964 Offset: 0xD46964 VA: 0xD46964
	// RVA: 0x1484480 Offset: 0x1484480 VA: 0x1484480 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46974 Offset: 0xD46974 VA: 0xD46974
	// RVA: 0x1484488 Offset: 0x1484488 VA: 0x1484488 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46984 Offset: 0xD46984 VA: 0xD46984
	// RVA: 0x148449C Offset: 0x148449C VA: 0x148449C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF260 Offset: 0xCAF260 VA: 0xCAF260
private sealed class BasicHelper.<DelayCall>c__Iterator2<T> : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8220
{
