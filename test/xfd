	// Methods

	// RVA: 0x10C01EC Offset: 0x10C01EC VA: 0x10C01EC
	private void .ctor() { }

	// RVA: 0x10B7B08 Offset: 0x10B7B08 VA: 0x10B7B08
	internal void .ctor(ArrayList list) { }

	// RVA: 0x10C0254 Offset: 0x10C0254 VA: 0x10C0254
	public void .ctor(EventDescriptor[] events) { }

	// RVA: 0x10C025C Offset: 0x10C025C VA: 0x10C025C
	public void .ctor(EventDescriptor[] events, bool readOnly) { }

	// RVA: 0x10C03EC Offset: 0x10C03EC VA: 0x10C03EC
	private static void .cctor() { }

	// RVA: 0x10C0454 Offset: 0x10C0454 VA: 0x10C0454 Slot: 14
	private void System.Collections.IList.Clear() { }

	// RVA: 0x10C0504 Offset: 0x10C0504 VA: 0x10C0504 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x10C0574 Offset: 0x10C0574 VA: 0x10C0574 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x10C0634 Offset: 0x10C0634 VA: 0x10C0634 Slot: 4
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x10C06A4 Offset: 0x10C06A4 VA: 0x10C06A4 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x10C077C Offset: 0x10C077C VA: 0x10C077C Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x10C08B4 Offset: 0x10C08B4 VA: 0x10C08B4 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x10C09E8 Offset: 0x10C09E8 VA: 0x10C09E8 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x10C0B94 Offset: 0x10C0B94 VA: 0x10C0B94 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x10C0D28 Offset: 0x10C0D28 VA: 0x10C0D28 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x10C0D30 Offset: 0x10C0D30 VA: 0x10C0D30 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x10C0D38 Offset: 0x10C0D38 VA: 0x10C0D38 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x10C0D78 Offset: 0x10C0D78 VA: 0x10C0D78 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x10C0E3C Offset: 0x10C0E3C VA: 0x10C0E3C Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x10C0E8C Offset: 0x10C0E8C VA: 0x10C0E8C Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x10C0E94 Offset: 0x10C0E94 VA: 0x10C0E94 Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x10C0330 Offset: 0x10C0330 VA: 0x10C0330
	public int Add(EventDescriptor value) { }

	// RVA: 0x10C0458 Offset: 0x10C0458 VA: 0x10C0458 Slot: 20
	public void Clear() { }

	// RVA: 0x10C0874 Offset: 0x10C0874 VA: 0x10C0874
	public bool Contains(EventDescriptor value) { }

	// RVA: 0x10C0E9C Offset: 0x10C0E9C VA: 0x10C0E9C Slot: 21
	public virtual EventDescriptor Find(string name, bool ignoreCase) { }

	// RVA: 0x10C053C Offset: 0x10C053C VA: 0x10C053C Slot: 22
	public IEnumerator GetEnumerator() { }

	// RVA: 0x10C09A8 Offset: 0x10C09A8 VA: 0x10C09A8
	public int IndexOf(EventDescriptor value) { }

	// RVA: 0x10C0AD0 Offset: 0x10C0AD0 VA: 0x10C0AD0
	public void Insert(int index, EventDescriptor value) { }

	// RVA: 0x10C0C6C Offset: 0x10C0C6C VA: 0x10C0C6C
	public void Remove(EventDescriptor value) { }

	// RVA: 0x10C0578 Offset: 0x10C0578 VA: 0x10C0578 Slot: 23
	public void RemoveAt(int index) { }

	// RVA: 0x10C127C Offset: 0x10C127C VA: 0x10C127C Slot: 24
	public virtual EventDescriptorCollection Sort() { }

	// RVA: 0x10C142C Offset: 0x10C142C VA: 0x10C142C Slot: 25
	public virtual EventDescriptorCollection Sort(IComparer comparer) { }

	// RVA: 0x10C1468 Offset: 0x10C1468 VA: 0x10C1468 Slot: 26
	public virtual EventDescriptorCollection Sort(string[] order) { }

	// RVA: 0x10C151C Offset: 0x10C151C VA: 0x10C151C Slot: 27
	public virtual EventDescriptorCollection Sort(string[] order, IComparer comparer) { }

	// RVA: 0x10C13D8 Offset: 0x10C13D8 VA: 0x10C13D8
	protected void InternalSort(IComparer comparer) { }

	// RVA: 0x10C14A4 Offset: 0x10C14A4 VA: 0x10C14A4
	protected void InternalSort(string[] order) { }

	// RVA: 0x10C15DC Offset: 0x10C15DC VA: 0x10C15DC
	private ArrayList ExtractItems(string[] names) { }

	// RVA: 0x10C12B4 Offset: 0x10C12B4 VA: 0x10C12B4
	private EventDescriptorCollection CloneCollection() { }

	// RVA: 0x10C18D4 Offset: 0x10C18D4 VA: 0x10C18D4
	internal EventDescriptorCollection Filter(Attribute[] attributes) { }

	// RVA: 0x10C066C Offset: 0x10C066C VA: 0x10C066C Slot: 28
	public int get_Count() { }

	// RVA: 0x10C1C40 Offset: 0x10C1C40 VA: 0x10C1C40 Slot: 29
	public virtual EventDescriptor get_Item(string name) { }

	// RVA: 0x10C1C54 Offset: 0x10C1C54 VA: 0x10C1C54 Slot: 30
	public virtual EventDescriptor get_Item(int index) { }
}

// Namespace: System.ComponentModel
internal class ListEntry // TypeDefIndex: 1220
{
	// Fields
	public object key; // 0x10
	public Delegate value; // 0x18
	public ListEntry next; // 0x20

	// Methods

	// RVA: 0x104B7E0 Offset: 0x104B7E0 VA: 0x104B7E0
	public void .ctor() { }
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xC3C070 Offset: 0xC3C070 VA: 0xC3C070
public sealed class EventHandlerList : IDisposable // TypeDefIndex: 1221
{
	// Fields
	private ListEntry entries; // 0x10
	private Delegate null_entry; // 0x18

	// Properties
	public Delegate Item { get; set; }

	// Methods

	// RVA: 0x10B5D80 Offset: 0x10B5D80 VA: 0x10B5D80
	public void .ctor() { }

	// RVA: 0x10B60F4 Offset: 0x10B60F4 VA: 0x10B60F4
	public Delegate get_Item(object key) { }

	// RVA: 0x10C1D68 Offset: 0x10C1D68 VA: 0x10C1D68
	public void set_Item(object key, Delegate value) { }

	// RVA: 0x10B5A5C Offset: 0x10B5A5C VA: 0x10B5A5C
	public void AddHandler(object key, Delegate value) { }

	// RVA: 0x10C1D6C Offset: 0x10C1D6C VA: 0x10C1D6C
	public void AddHandlers(EventHandlerList listToAddFrom) { }

	// RVA: 0x10B5B94 Offset: 0x10B5B94 VA: 0x10B5B94
	public void RemoveHandler(object key, Delegate value) { }

	// RVA: 0x10C1DA8 Offset: 0x10C1DA8 VA: 0x10C1DA8 Slot: 4
	public void Dispose() { }

	// RVA: 0x10C1D48 Offset: 0x10C1D48 VA: 0x10C1D48
	private ListEntry FindEntry(object key) { }
}

// Namespace: System.ComponentModel
public class ExpandableObjectConverter : TypeConverter // TypeDefIndex: 1222
{
	// Methods

	// RVA: 0x10C1DB0 Offset: 0x10C1DB0 VA: 0x10C1DB0
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class GuidConverter : TypeConverter // TypeDefIndex: 1223
{
	// Methods

	// RVA: 0x10C1DB8 Offset: 0x10C1DB8 VA: 0x10C1DB8
	public void .ctor() { }

	// RVA: 0x10C1DC0 Offset: 0x10C1DC0 VA: 0x10C1DC0 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x10C1E74 Offset: 0x10C1E74 VA: 0x10C1E74 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x10C1F6C Offset: 0x10C1F6C VA: 0x10C1F6C Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x10C21D0 Offset: 0x10C21D0 VA: 0x10C21D0 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public interface IBindingList : ICollection, IEnumerable, IList // TypeDefIndex: 1224
{
	// Properties
	public abstract bool AllowEdit { get; }
	public abstract bool AllowNew { get; }
	public abstract bool AllowRemove { get; }
	public abstract bool IsSorted { get; }
	public abstract ListSortDirection SortDirection { get; }
	public abstract PropertyDescriptor SortProperty { get; }
	public abstract bool SupportsChangeNotification { get; }
	public abstract bool SupportsSearching { get; }
	public abstract bool SupportsSorting { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_ListChanged(ListChangedEventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_ListChanged(ListChangedEventHandler value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void AddIndex(PropertyDescriptor property);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object AddNew();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void ApplySort(PropertyDescriptor property, ListSortDirection direction);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int Find(PropertyDescriptor property, object key);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void RemoveIndex(PropertyDescriptor property);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void RemoveSort();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_AllowEdit();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool get_AllowNew();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool get_AllowRemove();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool get_IsSorted();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract ListSortDirection get_SortDirection();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract PropertyDescriptor get_SortProperty();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract bool get_SupportsChangeNotification();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract bool get_SupportsSearching();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract bool get_SupportsSorting();
}

// Namespace: System.ComponentModel
public interface IBindingListView : ICollection, IEnumerable, IList, IBindingList // TypeDefIndex: 1225
{
	// Properties
	public abstract string Filter { get; set; }
	public abstract ListSortDescriptionCollection SortDescriptions { get; }
	public abstract bool SupportsAdvancedSorting { get; }
	public abstract bool SupportsFiltering { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Filter();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Filter(string value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract ListSortDescriptionCollection get_SortDescriptions();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_SupportsAdvancedSorting();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_SupportsFiltering();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void ApplySort(ListSortDescriptionCollection sorts);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void RemoveFilter();
}

// Namespace: System.ComponentModel
public interface IChangeTracking // TypeDefIndex: 1226
{
	// Properties
	public abstract bool IsChanged { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsChanged();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void AcceptChanges();
}

// Namespace: System.ComponentModel
[ObsoleteAttribute] // RVA: 0xC3C0A8 Offset: 0xC3C0A8 VA: 0xC3C0A8
public interface IComNativeDescriptorHandler // TypeDefIndex: 1227
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract AttributeCollection GetAttributes(object component);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetClassName(object component);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract TypeConverter GetConverter(object component);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract EventDescriptor GetDefaultEvent(object component);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract PropertyDescriptor GetDefaultProperty(object component);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object GetEditor(object component, Type baseEditorType);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract EventDescriptorCollection GetEvents(object component);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract EventDescriptorCollection GetEvents(object component, Attribute[] attributes);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string GetName(object component);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract object GetPropertyValue(object component, int dispid, ref bool success);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract object GetPropertyValue(object component, string propertyName, ref bool success);
}

// Namespace: System.ComponentModel
public interface IComponent : IDisposable // TypeDefIndex: 1228
{
	// Properties
	public abstract ISite Site { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_Disposed(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_Disposed(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract ISite get_Site();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Site(ISite value);
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3C0E0 Offset: 0xC3C0E0 VA: 0xC3C0E0
public interface IContainer : IDisposable // TypeDefIndex: 1229
{
	// Properties
	public abstract ComponentCollection Components { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ComponentCollection get_Components();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Add(IComponent component);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Add(IComponent component, string name);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Remove(IComponent component);
}

// Namespace: System.ComponentModel
public interface ICustomTypeDescriptor // TypeDefIndex: 1230
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract AttributeCollection GetAttributes();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetClassName();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string GetComponentName();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract TypeConverter GetConverter();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract EventDescriptor GetDefaultEvent();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract PropertyDescriptor GetDefaultProperty();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract object GetEditor(Type editorBaseType);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract EventDescriptorCollection GetEvents();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract EventDescriptorCollection GetEvents(Attribute[] arr);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract PropertyDescriptorCollection GetProperties();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract PropertyDescriptorCollection GetProperties(Attribute[] arr);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract object GetPropertyOwner(PropertyDescriptor pd);
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xC3C0F4 Offset: 0xC3C0F4 VA: 0xC3C0F4
public interface IDataErrorInfo // TypeDefIndex: 1231
{
	// Properties
	public abstract string Error { get; }
	public abstract string Item { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Error();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_Item(string columnName);
}

// Namespace: System.ComponentModel
public interface IEditableObject // TypeDefIndex: 1232
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void BeginEdit();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void CancelEdit();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void EndEdit();
}

// Namespace: System.ComponentModel
[MergablePropertyAttribute] // RVA: 0xC3C12C Offset: 0xC3C12C VA: 0xC3C12C
[TypeConverterAttribute] // RVA: 0xC3C12C Offset: 0xC3C12C VA: 0xC3C12C
public interface IListSource // TypeDefIndex: 1233
{
	// Properties
	public abstract bool ContainsListCollection { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IList GetList();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_ContainsListCollection();
}

// Namespace: System.ComponentModel
public interface INotifyPropertyChanged // TypeDefIndex: 1234
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_PropertyChanged(PropertyChangedEventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_PropertyChanged(PropertyChangedEventHandler value);
}

// Namespace: System.ComponentModel
public interface IRevertibleChangeTracking : IChangeTracking // TypeDefIndex: 1235
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void RejectChanges();
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3C17C Offset: 0xC3C17C VA: 0xC3C17C
public interface ISite : IServiceProvider // TypeDefIndex: 1236
{
	// Properties
	public abstract IComponent Component { get; }
	public abstract IContainer Container { get; }
	public abstract bool DesignMode { get; }
	public abstract string Name { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IComponent get_Component();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IContainer get_Container();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_DesignMode();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_Name(string value);
}

// Namespace: System.ComponentModel
public interface ISupportInitialize // TypeDefIndex: 1237
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void BeginInit();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void EndInit();
}

// Namespace: System.ComponentModel
public interface ISupportInitializeNotification : ISupportInitialize // TypeDefIndex: 1238
{
	// Properties
	public abstract bool IsInitialized { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_Initialized(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_Initialized(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_IsInitialized();
}

// Namespace: System.ComponentModel
public interface ISynchronizeInvoke // TypeDefIndex: 1239
{
	// Properties
	public abstract bool InvokeRequired { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_InvokeRequired();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IAsyncResult BeginInvoke(Delegate method, object[] args);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object EndInvoke(IAsyncResult result);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object Invoke(Delegate method, object[] args);
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3C190 Offset: 0xC3C190 VA: 0xC3C190
public interface ITypeDescriptorContext : IServiceProvider // TypeDefIndex: 1240
{
	// Properties
	public abstract IContainer Container { get; }
	public abstract object Instance { get; }
	public abstract PropertyDescriptor PropertyDescriptor { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IContainer get_Container();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Instance();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract PropertyDescriptor get_PropertyDescriptor();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnComponentChanged();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool OnComponentChanging();
}

// Namespace: System.ComponentModel
public interface ITypedList // TypeDefIndex: 1241
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetListName(PropertyDescriptor[] listAccessors);
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C1A4 Offset: 0xC3C1A4 VA: 0xC3C1A4
public sealed class ImmutableObjectAttribute : Attribute // TypeDefIndex: 1242
{
	// Fields
	private bool immutable; // 0x10
	public static readonly ImmutableObjectAttribute Default; // 0x0
	public static readonly ImmutableObjectAttribute No; // 0x8
	public static readonly ImmutableObjectAttribute Yes; // 0x10

	// Properties
	public bool Immutable { get; }

	// Methods

	// RVA: 0x10C24BC Offset: 0x10C24BC VA: 0x10C24BC
	public void .ctor(bool immutable) { }

	// RVA: 0x10C24EC Offset: 0x10C24EC VA: 0x10C24EC
	private static void .cctor() { }

	// RVA: 0x10C259C Offset: 0x10C259C VA: 0x10C259C
	public bool get_Immutable() { }

	// RVA: 0x10C25A4 Offset: 0x10C25A4 VA: 0x10C25A4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10C2644 Offset: 0x10C2644 VA: 0x10C2644 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10C2650 Offset: 0x10C2650 VA: 0x10C2650 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1243
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x10C2AAC Offset: 0x10C2AAC VA: 0x10C2AAC
	public void .ctor() { }

	// RVA: 0x10C2B34 Offset: 0x10C2B34 VA: 0x10C2B34 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x10C2B3C Offset: 0x10C2B3C VA: 0x10C2B3C Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x10C2BC4 Offset: 0x10C2BC4 VA: 0x10C2BC4 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x10C2C40 Offset: 0x10C2C40 VA: 0x10C2C40 Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1244
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x10C2CD8 Offset: 0x10C2CD8 VA: 0x10C2CD8
	public void .ctor() { }

	// RVA: 0x10C2D60 Offset: 0x10C2D60 VA: 0x10C2D60 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x10C2D68 Offset: 0x10C2D68 VA: 0x10C2D68 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x10C2DF0 Offset: 0x10C2DF0 VA: 0x10C2DF0 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x10C2E6C Offset: 0x10C2E6C VA: 0x10C2E6C Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1245
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x10C2F04 Offset: 0x10C2F04 VA: 0x10C2F04
	public void .ctor() { }

	// RVA: 0x10C2F8C Offset: 0x10C2F8C VA: 0x10C2F8C Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x10C2F94 Offset: 0x10C2F94 VA: 0x10C2F94 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x10C301C Offset: 0x10C301C VA: 0x10C301C Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x10C3098 Offset: 0x10C3098 VA: 0x10C3098 Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
[Serializable]
public class InvalidEnumArgumentException : ArgumentException // TypeDefIndex: 1246
{
	// Methods

	// RVA: 0x10C3130 Offset: 0x10C3130 VA: 0x10C3130
	public void .ctor() { }

	// RVA: 0x10C313C Offset: 0x10C313C VA: 0x10C313C
	public void .ctor(string message) { }

	// RVA: 0x10C3144 Offset: 0x10C3144 VA: 0x10C3144
	public void .ctor(string argumentName, int invalidValue, Type enumClass) { }

	// RVA: 0x10C3360 Offset: 0x10C3360 VA: 0x10C3360
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x10C3368 Offset: 0x10C3368 VA: 0x10C3368
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.ComponentModel
public class LicFileLicenseProvider : LicenseProvider // TypeDefIndex: 1247
{
	// Methods

	// RVA: 0x10C33B0 Offset: 0x10C33B0 VA: 0x10C33B0
	public void .ctor() { }

	// RVA: 0x10C33C0 Offset: 0x10C33C0 VA: 0x10C33C0 Slot: 4
	public override License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions) { }

	// RVA: 0x10C3684 Offset: 0x10C3684 VA: 0x10C3684 Slot: 5
	protected virtual string GetKey(Type type) { }

	// RVA: 0x10C3720 Offset: 0x10C3720 VA: 0x10C3720 Slot: 6
	protected virtual bool IsKeyValid(string key, Type type) { }
}

// Namespace: System.ComponentModel
internal class LicFileLicense : License // TypeDefIndex: 1248
{
	// Fields
	private string _key; // 0x10

	// Properties
	public override string LicenseKey { get; }

	// Methods

	// RVA: 0x10C3370 Offset: 0x10C3370 VA: 0x10C3370
	public void .ctor(string key) { }

	// RVA: 0x10C33A4 Offset: 0x10C33A4 VA: 0x10C33A4 Slot: 5
	public override string get_LicenseKey() { }

	// RVA: 0x10C33AC Offset: 0x10C33AC VA: 0x10C33AC Slot: 6
	public override void Dispose() { }
}

// Namespace: System.ComponentModel
public abstract class License : IDisposable // TypeDefIndex: 1249
{
	// Properties
	public abstract string LicenseKey { get; }

	// Methods

	// RVA: 0x10C339C Offset: 0x10C339C VA: 0x10C339C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string get_LicenseKey();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Dispose();
}

// Namespace: System.ComponentModel
public class LicenseContext : IServiceProvider // TypeDefIndex: 1250
{
	// Properties
	public virtual LicenseUsageMode UsageMode { get; }

	// Methods

	// RVA: 0x10BB718 Offset: 0x10BB718 VA: 0x10BB718
	public void .ctor() { }

	// RVA: 0x10C3770 Offset: 0x10C3770 VA: 0x10C3770 Slot: 5
	public virtual string GetSavedLicenseKey(Type type, Assembly resourceAssembly) { }

	// RVA: 0x10C3778 Offset: 0x10C3778 VA: 0x10C3778 Slot: 6
	public virtual object GetService(Type type) { }

	// RVA: 0x10C3780 Offset: 0x10C3780 VA: 0x10C3780 Slot: 7
	public virtual void SetSavedLicenseKey(Type type, string key) { }

	// RVA: 0x10C3784 Offset: 0x10C3784 VA: 0x10C3784 Slot: 8
	public virtual LicenseUsageMode get_UsageMode() { }
}

// Namespace: System.ComponentModel
[Serializable]
public class LicenseException : SystemException // TypeDefIndex: 1251
{
	// Fields
	private Type type; // 0x60

	// Properties
	public Type LicensedType { get; }

	// Methods

	// RVA: 0x10C378C Offset: 0x10C378C VA: 0x10C378C
	public void .ctor(Type type) { }

	// RVA: 0x10C37B8 Offset: 0x10C37B8 VA: 0x10C37B8
	public void .ctor(Type type, object instance) { }

	// RVA: 0x10C37E4 Offset: 0x10C37E4 VA: 0x10C37E4
	public void .ctor(Type type, object instance, string message) { }

	// RVA: 0x10C3818 Offset: 0x10C3818 VA: 0x10C3818
	public void .ctor(Type type, object instance, string message, Exception innerException) { }

	// RVA: 0x10C384C Offset: 0x10C384C VA: 0x10C384C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x10C39A0 Offset: 0x10C39A0 VA: 0x10C39A0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x10C3A74 Offset: 0x10C3A74 VA: 0x10C3A74
	public Type get_LicensedType() { }
}

// Namespace: System.ComponentModel
public sealed class LicenseManager // TypeDefIndex: 1252
{
	// Fields
	private static LicenseContext mycontext; // 0x0
	private static object contextLockUser; // 0x8
	private static object lockObject; // 0x10

	// Properties
	public static LicenseContext CurrentContext { get; set; }
	public static LicenseUsageMode UsageMode { get; }

	// Methods

	// RVA: 0x10C3A7C Offset: 0x10C3A7C VA: 0x10C3A7C
	private void .ctor() { }

	// RVA: 0x10C3A84 Offset: 0x10C3A84 VA: 0x10C3A84
	private static void .cctor() { }

	// RVA: 0x10C3AF0 Offset: 0x10C3AF0 VA: 0x10C3AF0
	public static LicenseContext get_CurrentContext() { }

	// RVA: 0x10C3C50 Offset: 0x10C3C50 VA: 0x10C3C50
	public static void set_CurrentContext(LicenseContext value) { }

	// RVA: 0x10C3DC4 Offset: 0x10C3DC4 VA: 0x10C3DC4
	public static LicenseUsageMode get_UsageMode() { }

	// RVA: 0x10C3E3C Offset: 0x10C3E3C VA: 0x10C3E3C
	public static object CreateWithContext(Type type, LicenseContext creationContext) { }

	// RVA: 0x10C3ED0 Offset: 0x10C3ED0 VA: 0x10C3ED0
	public static object CreateWithContext(Type type, LicenseContext creationContext, object[] args) { }

	// RVA: 0x10C443C Offset: 0x10C443C VA: 0x10C443C
	public static bool IsLicensed(Type type) { }

	// RVA: 0x10C46E4 Offset: 0x10C46E4 VA: 0x10C46E4
	public static bool IsValid(Type type) { }

	// RVA: 0x10C4788 Offset: 0x10C4788 VA: 0x10C4788
	public static bool IsValid(Type type, object instance, out License license) { }

	// RVA: 0x10C41A4 Offset: 0x10C41A4 VA: 0x10C41A4
	public static void LockContext(object contextUser) { }

	// RVA: 0x10C42A4 Offset: 0x10C42A4 VA: 0x10C42A4
	public static void UnlockContext(object contextUser) { }

	// RVA: 0x10C4804 Offset: 0x10C4804 VA: 0x10C4804
	public static void Validate(Type type) { }

	// RVA: 0x10C48D8 Offset: 0x10C48D8 VA: 0x10C48D8
	public static License Validate(Type type, object instance) { }

	// RVA: 0x10C44E0 Offset: 0x10C44E0 VA: 0x10C44E0
	private static bool privateGetLicense(Type type, object instance, bool allowExceptions, out License license) { }
}

// Namespace: System.ComponentModel
public abstract class LicenseProvider // TypeDefIndex: 1253
{
	// Methods

	// RVA: 0x10C33B8 Offset: 0x10C33B8 VA: 0x10C33B8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C1B8 Offset: 0xC3C1B8 VA: 0xC3C1B8
public sealed class LicenseProviderAttribute : Attribute // TypeDefIndex: 1254
{
	// Fields
	private Type Provider; // 0x10
	public static readonly LicenseProviderAttribute Default; // 0x0

	// Properties
	public Type LicenseProvider { get; }
	public override object TypeId { get; }

	// Methods

	// RVA: 0x10C49A8 Offset: 0x10C49A8 VA: 0x10C49A8
	public void .ctor() { }

	// RVA: 0x10C49D0 Offset: 0x10C49D0 VA: 0x10C49D0
	public void .ctor(string typeName) { }

	// RVA: 0x10C4A7C Offset: 0x10C4A7C VA: 0x10C4A7C
	public void .ctor(Type type) { }

	// RVA: 0x10C4AA8 Offset: 0x10C4AA8 VA: 0x10C4AA8
	private static void .cctor() { }

	// RVA: 0x10C49A0 Offset: 0x10C49A0 VA: 0x10C49A0
	public Type get_LicenseProvider() { }

	// RVA: 0x10C4B10 Offset: 0x10C4B10 VA: 0x10C4B10 Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x10C4BB0 Offset: 0x10C4BB0 VA: 0x10C4BB0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10C4C58 Offset: 0x10C4C58 VA: 0x10C4C58 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
public enum LicenseUsageMode // TypeDefIndex: 1255
{
