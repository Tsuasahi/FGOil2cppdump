
	// RVA: -1 Offset: -1 Slot: 20
	public abstract Type get_EventType();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract bool get_IsMulticast();
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xBCFEF8 Offset: 0xBCFEF8 VA: 0xBCFEF8
[ComVisibleAttribute] // RVA: 0xBCFEF8 Offset: 0xBCFEF8 VA: 0xBCFEF8
public class EventDescriptorCollection : ICollection, IEnumerable, IList // TypeDefIndex: 1219
{
	// Fields
	private ArrayList eventList; // 0x10
	private bool isReadOnly; // 0x18
	public static readonly EventDescriptorCollection Empty; // 0x0

	// Properties
	private int System.Collections.ICollection.Count { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }
	public virtual EventDescriptor Item { get; }
	public virtual EventDescriptor Item { get; }

	// Methods

	// RVA: 0x224FB58 Offset: 0x224FB58 VA: 0x224FB58
	private void .ctor() { }

	// RVA: 0x2247474 Offset: 0x2247474 VA: 0x2247474
	internal void .ctor(ArrayList list) { }

	// RVA: 0x224FBC0 Offset: 0x224FBC0 VA: 0x224FBC0
	public void .ctor(EventDescriptor[] events) { }

	// RVA: 0x224FBC8 Offset: 0x224FBC8 VA: 0x224FBC8
	public void .ctor(EventDescriptor[] events, bool readOnly) { }

	// RVA: 0x224FD58 Offset: 0x224FD58 VA: 0x224FD58
	private static void .cctor() { }

	// RVA: 0x224FDC0 Offset: 0x224FDC0 VA: 0x224FDC0 Slot: 14
	private void System.Collections.IList.Clear() { }

	// RVA: 0x224FE70 Offset: 0x224FE70 VA: 0x224FE70 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x224FEE0 Offset: 0x224FEE0 VA: 0x224FEE0 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x224FFA0 Offset: 0x224FFA0 VA: 0x224FFA0 Slot: 4
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x2250010 Offset: 0x2250010 VA: 0x2250010 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x22500E8 Offset: 0x22500E8 VA: 0x22500E8 Slot: 15
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x2250220 Offset: 0x2250220 VA: 0x2250220 Slot: 16
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x2250354 Offset: 0x2250354 VA: 0x2250354 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x2250500 Offset: 0x2250500 VA: 0x2250500 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x2250694 Offset: 0x2250694 VA: 0x2250694 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x225069C Offset: 0x225069C VA: 0x225069C Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x22506A4 Offset: 0x22506A4 VA: 0x22506A4 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x22506E4 Offset: 0x22506E4 VA: 0x22506E4 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x22507A8 Offset: 0x22507A8 VA: 0x22507A8 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x22507F8 Offset: 0x22507F8 VA: 0x22507F8 Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x2250800 Offset: 0x2250800 VA: 0x2250800 Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x224FC9C Offset: 0x224FC9C VA: 0x224FC9C
	public int Add(EventDescriptor value) { }

	// RVA: 0x224FDC4 Offset: 0x224FDC4 VA: 0x224FDC4 Slot: 20
	public void Clear() { }

	// RVA: 0x22501E0 Offset: 0x22501E0 VA: 0x22501E0
	public bool Contains(EventDescriptor value) { }

	// RVA: 0x2250808 Offset: 0x2250808 VA: 0x2250808 Slot: 21
	public virtual EventDescriptor Find(string name, bool ignoreCase) { }

	// RVA: 0x224FEA8 Offset: 0x224FEA8 VA: 0x224FEA8 Slot: 22
	public IEnumerator GetEnumerator() { }

	// RVA: 0x2250314 Offset: 0x2250314 VA: 0x2250314
	public int IndexOf(EventDescriptor value) { }

	// RVA: 0x225043C Offset: 0x225043C VA: 0x225043C
	public void Insert(int index, EventDescriptor value) { }

	// RVA: 0x22505D8 Offset: 0x22505D8 VA: 0x22505D8
	public void Remove(EventDescriptor value) { }

	// RVA: 0x224FEE4 Offset: 0x224FEE4 VA: 0x224FEE4 Slot: 23
	public void RemoveAt(int index) { }

	// RVA: 0x2250BE8 Offset: 0x2250BE8 VA: 0x2250BE8 Slot: 24
	public virtual EventDescriptorCollection Sort() { }

	// RVA: 0x2250D98 Offset: 0x2250D98 VA: 0x2250D98 Slot: 25
	public virtual EventDescriptorCollection Sort(IComparer comparer) { }

	// RVA: 0x2250DD4 Offset: 0x2250DD4 VA: 0x2250DD4 Slot: 26
	public virtual EventDescriptorCollection Sort(string[] order) { }

	// RVA: 0x2250E88 Offset: 0x2250E88 VA: 0x2250E88 Slot: 27
	public virtual EventDescriptorCollection Sort(string[] order, IComparer comparer) { }

	// RVA: 0x2250D44 Offset: 0x2250D44 VA: 0x2250D44
	protected void InternalSort(IComparer comparer) { }

	// RVA: 0x2250E10 Offset: 0x2250E10 VA: 0x2250E10
	protected void InternalSort(string[] order) { }

	// RVA: 0x2250F48 Offset: 0x2250F48 VA: 0x2250F48
	private ArrayList ExtractItems(string[] names) { }

	// RVA: 0x2250C20 Offset: 0x2250C20 VA: 0x2250C20
	private EventDescriptorCollection CloneCollection() { }

	// RVA: 0x2251240 Offset: 0x2251240 VA: 0x2251240
	internal EventDescriptorCollection Filter(Attribute[] attributes) { }

	// RVA: 0x224FFD8 Offset: 0x224FFD8 VA: 0x224FFD8 Slot: 28
	public int get_Count() { }

	// RVA: 0x22515AC Offset: 0x22515AC VA: 0x22515AC Slot: 29
	public virtual EventDescriptor get_Item(string name) { }

	// RVA: 0x22515C0 Offset: 0x22515C0 VA: 0x22515C0 Slot: 30
	public virtual EventDescriptor get_Item(int index) { }
}

// Namespace: System.ComponentModel
internal class ListEntry // TypeDefIndex: 1220
{
	// Fields
	public object key; // 0x10
	public Delegate value; // 0x18
	public ListEntry next; // 0x20

	// Methods

	// RVA: 0x217EBB8 Offset: 0x217EBB8 VA: 0x217EBB8
	public void .ctor() { }
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xBCFF48 Offset: 0xBCFF48 VA: 0xBCFF48
public sealed class EventHandlerList : IDisposable // TypeDefIndex: 1221
{
	// Fields
	private ListEntry entries; // 0x10
	private Delegate null_entry; // 0x18

	// Properties
	public Delegate Item { get; set; }

	// Methods

	// RVA: 0x22456EC Offset: 0x22456EC VA: 0x22456EC
	public void .ctor() { }

	// RVA: 0x2245A60 Offset: 0x2245A60 VA: 0x2245A60
	public Delegate get_Item(object key) { }

	// RVA: 0x22516D4 Offset: 0x22516D4 VA: 0x22516D4
	public void set_Item(object key, Delegate value) { }

	// RVA: 0x22453C8 Offset: 0x22453C8 VA: 0x22453C8
	public void AddHandler(object key, Delegate value) { }

	// RVA: 0x22516D8 Offset: 0x22516D8 VA: 0x22516D8
	public void AddHandlers(EventHandlerList listToAddFrom) { }

	// RVA: 0x2245500 Offset: 0x2245500 VA: 0x2245500
	public void RemoveHandler(object key, Delegate value) { }

	// RVA: 0x2251714 Offset: 0x2251714 VA: 0x2251714 Slot: 4
	public void Dispose() { }

	// RVA: 0x22516B4 Offset: 0x22516B4 VA: 0x22516B4
	private ListEntry FindEntry(object key) { }
}

// Namespace: System.ComponentModel
public class ExpandableObjectConverter : TypeConverter // TypeDefIndex: 1222
{
	// Methods

	// RVA: 0x225171C Offset: 0x225171C VA: 0x225171C
	public void .ctor() { }
}

// Namespace: System.ComponentModel
public class GuidConverter : TypeConverter // TypeDefIndex: 1223
{
	// Methods

	// RVA: 0x2251724 Offset: 0x2251724 VA: 0x2251724
	public void .ctor() { }

	// RVA: 0x225172C Offset: 0x225172C VA: 0x225172C Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x22517E0 Offset: 0x22517E0 VA: 0x22517E0 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x22518D8 Offset: 0x22518D8 VA: 0x22518D8 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x2251B3C Offset: 0x2251B3C VA: 0x2251B3C Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public interface IBindingList : ICollection, IEnumerable, IList // TypeDefIndex: 1224
{
	// Properties
	public abstract bool AllowEdit { get; }
	public abstract bool AllowNew { get; }
	public abstract bool AllowRemove { get; }
	public abstract bool IsSorted { get; }
	public abstract ListSortDirection SortDirection { get; }
	public abstract PropertyDescriptor SortProperty { get; }
	public abstract bool SupportsChangeNotification { get; }
	public abstract bool SupportsSearching { get; }
	public abstract bool SupportsSorting { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_ListChanged(ListChangedEventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_ListChanged(ListChangedEventHandler value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void AddIndex(PropertyDescriptor property);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object AddNew();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void ApplySort(PropertyDescriptor property, ListSortDirection direction);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int Find(PropertyDescriptor property, object key);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void RemoveIndex(PropertyDescriptor property);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void RemoveSort();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_AllowEdit();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool get_AllowNew();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool get_AllowRemove();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool get_IsSorted();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract ListSortDirection get_SortDirection();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract PropertyDescriptor get_SortProperty();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract bool get_SupportsChangeNotification();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract bool get_SupportsSearching();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract bool get_SupportsSorting();
}

// Namespace: System.ComponentModel
public interface IBindingListView : ICollection, IEnumerable, IList, IBindingList // TypeDefIndex: 1225
{
	// Properties
	public abstract string Filter { get; set; }
	public abstract ListSortDescriptionCollection SortDescriptions { get; }
	public abstract bool SupportsAdvancedSorting { get; }
	public abstract bool SupportsFiltering { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Filter();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Filter(string value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract ListSortDescriptionCollection get_SortDescriptions();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_SupportsAdvancedSorting();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_SupportsFiltering();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void ApplySort(ListSortDescriptionCollection sorts);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void RemoveFilter();
}

// Namespace: System.ComponentModel
public interface IChangeTracking // TypeDefIndex: 1226
{
	// Properties
	public abstract bool IsChanged { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsChanged();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void AcceptChanges();
}

// Namespace: System.ComponentModel
[ObsoleteAttribute] // RVA: 0xBCFF80 Offset: 0xBCFF80 VA: 0xBCFF80
public interface IComNativeDescriptorHandler // TypeDefIndex: 1227
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract AttributeCollection GetAttributes(object component);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetClassName(object component);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract TypeConverter GetConverter(object component);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract EventDescriptor GetDefaultEvent(object component);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract PropertyDescriptor GetDefaultProperty(object component);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object GetEditor(object component, Type baseEditorType);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract EventDescriptorCollection GetEvents(object component);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract EventDescriptorCollection GetEvents(object component, Attribute[] attributes);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string GetName(object component);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract object GetPropertyValue(object component, int dispid, ref bool success);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract object GetPropertyValue(object component, string propertyName, ref bool success);
}

// Namespace: System.ComponentModel
public interface IComponent : IDisposable // TypeDefIndex: 1228
{
	// Properties
	public abstract ISite Site { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_Disposed(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_Disposed(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract ISite get_Site();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Site(ISite value);
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBCFFB8 Offset: 0xBCFFB8 VA: 0xBCFFB8
public interface IContainer : IDisposable // TypeDefIndex: 1229
{
	// Properties
	public abstract ComponentCollection Components { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ComponentCollection get_Components();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Add(IComponent component);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Add(IComponent component, string name);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Remove(IComponent component);
}

// Namespace: System.ComponentModel
public interface ICustomTypeDescriptor // TypeDefIndex: 1230
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract AttributeCollection GetAttributes();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetClassName();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string GetComponentName();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract TypeConverter GetConverter();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract EventDescriptor GetDefaultEvent();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract PropertyDescriptor GetDefaultProperty();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract object GetEditor(Type editorBaseType);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract EventDescriptorCollection GetEvents();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract EventDescriptorCollection GetEvents(Attribute[] arr);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract PropertyDescriptorCollection GetProperties();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract PropertyDescriptorCollection GetProperties(Attribute[] arr);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract object GetPropertyOwner(PropertyDescriptor pd);
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xBCFFCC Offset: 0xBCFFCC VA: 0xBCFFCC
public interface IDataErrorInfo // TypeDefIndex: 1231
{
	// Properties
	public abstract string Error { get; }
	public abstract string Item { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Error();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_Item(string columnName);
}

// Namespace: System.ComponentModel
public interface IEditableObject // TypeDefIndex: 1232
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void BeginEdit();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void CancelEdit();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void EndEdit();
}

// Namespace: System.ComponentModel
[MergablePropertyAttribute] // RVA: 0xBD0004 Offset: 0xBD0004 VA: 0xBD0004
[TypeConverterAttribute] // RVA: 0xBD0004 Offset: 0xBD0004 VA: 0xBD0004
public interface IListSource // TypeDefIndex: 1233
{
	// Properties
	public abstract bool ContainsListCollection { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IList GetList();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_ContainsListCollection();
}

// Namespace: System.ComponentModel
public interface INotifyPropertyChanged // TypeDefIndex: 1234
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_PropertyChanged(PropertyChangedEventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_PropertyChanged(PropertyChangedEventHandler value);
}

// Namespace: System.ComponentModel
public interface IRevertibleChangeTracking : IChangeTracking // TypeDefIndex: 1235
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void RejectChanges();
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBD0054 Offset: 0xBD0054 VA: 0xBD0054
public interface ISite : IServiceProvider // TypeDefIndex: 1236
{
	// Properties
	public abstract IComponent Component { get; }
	public abstract IContainer Container { get; }
	public abstract bool DesignMode { get; }
	public abstract string Name { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IComponent get_Component();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IContainer get_Container();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_DesignMode();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_Name(string value);
}

// Namespace: System.ComponentModel
public interface ISupportInitialize // TypeDefIndex: 1237
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void BeginInit();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void EndInit();
}

// Namespace: System.ComponentModel
public interface ISupportInitializeNotification : ISupportInitialize // TypeDefIndex: 1238
{
	// Properties
	public abstract bool IsInitialized { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void add_Initialized(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void remove_Initialized(EventHandler value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_IsInitialized();
}

// Namespace: System.ComponentModel
public interface ISynchronizeInvoke // TypeDefIndex: 1239
{
	// Properties
	public abstract bool InvokeRequired { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_InvokeRequired();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IAsyncResult BeginInvoke(Delegate method, object[] args);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object EndInvoke(IAsyncResult result);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract object Invoke(Delegate method, object[] args);
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBD0068 Offset: 0xBD0068 VA: 0xBD0068
public interface ITypeDescriptorContext : IServiceProvider // TypeDefIndex: 1240
{
	// Properties
	public abstract IContainer Container { get; }
	public abstract object Instance { get; }
	public abstract PropertyDescriptor PropertyDescriptor { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IContainer get_Container();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Instance();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract PropertyDescriptor get_PropertyDescriptor();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnComponentChanged();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool OnComponentChanging();
}

// Namespace: System.ComponentModel
public interface ITypedList // TypeDefIndex: 1241
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetListName(PropertyDescriptor[] listAccessors);
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD007C Offset: 0xBD007C VA: 0xBD007C
public sealed class ImmutableObjectAttribute : Attribute // TypeDefIndex: 1242
{
	// Fields
	private bool immutable; // 0x10
	public static readonly ImmutableObjectAttribute Default; // 0x0
	public static readonly ImmutableObjectAttribute No; // 0x8
	public static readonly ImmutableObjectAttribute Yes; // 0x10

	// Properties
	public bool Immutable { get; }

	// Methods

	// RVA: 0x2251E28 Offset: 0x2251E28 VA: 0x2251E28
	public void .ctor(bool immutable) { }

	// RVA: 0x2251E58 Offset: 0x2251E58 VA: 0x2251E58
	private static void .cctor() { }

	// RVA: 0x2251F08 Offset: 0x2251F08 VA: 0x2251F08
	public bool get_Immutable() { }

	// RVA: 0x2251F10 Offset: 0x2251F10 VA: 0x2251F10 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2251FB0 Offset: 0x2251FB0 VA: 0x2251FB0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2251FBC Offset: 0x2251FBC VA: 0x2251FBC Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class Int16Converter : BaseNumberConverter // TypeDefIndex: 1243
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x2252418 Offset: 0x2252418 VA: 0x2252418
	public void .ctor() { }

	// RVA: 0x22524A0 Offset: 0x22524A0 VA: 0x22524A0 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x22524A8 Offset: 0x22524A8 VA: 0x22524A8 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x2252530 Offset: 0x2252530 VA: 0x2252530 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x22525AC Offset: 0x22525AC VA: 0x22525AC Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
public class Int32Converter : BaseNumberConverter // TypeDefIndex: 1244
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x2252644 Offset: 0x2252644 VA: 0x2252644
	public void .ctor() { }

	// RVA: 0x22526CC Offset: 0x22526CC VA: 0x22526CC Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x22526D4 Offset: 0x22526D4 VA: 0x22526D4 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x225275C Offset: 0x225275C VA: 0x225275C Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x22527D8 Offset: 0x22527D8 VA: 0x22527D8 Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
public class Int64Converter : BaseNumberConverter // TypeDefIndex: 1245
{
	// Properties
	internal override bool SupportHex { get; }

	// Methods

	// RVA: 0x2252870 Offset: 0x2252870 VA: 0x2252870
	public void .ctor() { }

	// RVA: 0x22528F8 Offset: 0x22528F8 VA: 0x22528F8 Slot: 16
	internal override bool get_SupportHex() { }

	// RVA: 0x2252900 Offset: 0x2252900 VA: 0x2252900 Slot: 17
	internal override string ConvertToString(object value, NumberFormatInfo format) { }

	// RVA: 0x2252988 Offset: 0x2252988 VA: 0x2252988 Slot: 18
	internal override object ConvertFromString(string value, NumberFormatInfo format) { }

	// RVA: 0x2252A04 Offset: 0x2252A04 VA: 0x2252A04 Slot: 19
	internal override object ConvertFromString(string value, int fromBase) { }
}

// Namespace: System.ComponentModel
[Serializable]
public class InvalidEnumArgumentException : ArgumentException // TypeDefIndex: 1246
{
	// Methods

	// RVA: 0x2252A9C Offset: 0x2252A9C VA: 0x2252A9C
	public void .ctor() { }

	// RVA: 0x2252AA8 Offset: 0x2252AA8 VA: 0x2252AA8
	public void .ctor(string message) { }

	// RVA: 0x2252AB0 Offset: 0x2252AB0 VA: 0x2252AB0
	public void .ctor(string argumentName, int invalidValue, Type enumClass) { }

	// RVA: 0x2252CCC Offset: 0x2252CCC VA: 0x2252CCC
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x2252CD4 Offset: 0x2252CD4 VA: 0x2252CD4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.ComponentModel
public class LicFileLicenseProvider : LicenseProvider // TypeDefIndex: 1247
{
	// Methods

	// RVA: 0x2252D1C Offset: 0x2252D1C VA: 0x2252D1C
	public void .ctor() { }

	// RVA: 0x2252D2C Offset: 0x2252D2C VA: 0x2252D2C Slot: 4
	public override License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions) { }

	// RVA: 0x2252FF0 Offset: 0x2252FF0 VA: 0x2252FF0 Slot: 5
	protected virtual string GetKey(Type type) { }

	// RVA: 0x225308C Offset: 0x225308C VA: 0x225308C Slot: 6
	protected virtual bool IsKeyValid(string key, Type type) { }
}

// Namespace: System.ComponentModel
internal class LicFileLicense : License // TypeDefIndex: 1248
{
	// Fields
	private string _key; // 0x10

	// Properties
	public override string LicenseKey { get; }

	// Methods

	// RVA: 0x2252CDC Offset: 0x2252CDC VA: 0x2252CDC
	public void .ctor(string key) { }

	// RVA: 0x2252D10 Offset: 0x2252D10 VA: 0x2252D10 Slot: 5
	public override string get_LicenseKey() { }

	// RVA: 0x2252D18 Offset: 0x2252D18 VA: 0x2252D18 Slot: 6
	public override void Dispose() { }
}

// Namespace: System.ComponentModel
public abstract class License : IDisposable // TypeDefIndex: 1249
{
	// Properties
	public abstract string LicenseKey { get; }

	// Methods

	// RVA: 0x2252D08 Offset: 0x2252D08 VA: 0x2252D08
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract string get_LicenseKey();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Dispose();
}

// Namespace: System.ComponentModel
public class LicenseContext : IServiceProvider // TypeDefIndex: 1250
{
	// Properties
	public virtual LicenseUsageMode UsageMode { get; }

	// Methods

	// RVA: 0x224B084 Offset: 0x224B084 VA: 0x224B084
	public void .ctor() { }

	// RVA: 0x22530DC Offset: 0x22530DC VA: 0x22530DC Slot: 5
	public virtual string GetSavedLicenseKey(Type type, Assembly resourceAssembly) { }

	// RVA: 0x22530E4 Offset: 0x22530E4 VA: 0x22530E4 Slot: 6
	public virtual object GetService(Type type) { }

	// RVA: 0x22530EC Offset: 0x22530EC VA: 0x22530EC Slot: 7
	public virtual void SetSavedLicenseKey(Type type, string key) { }

	// RVA: 0x22530F0 Offset: 0x22530F0 VA: 0x22530F0 Slot: 8
	public virtual LicenseUsageMode get_UsageMode() { }
}

// Namespace: System.ComponentModel
[Serializable]
public class LicenseException : SystemException // TypeDefIndex: 1251
{
	// Fields
	private Type type; // 0x60

	// Properties
	public Type LicensedType { get; }

	// Methods

	// RVA: 0x22530F8 Offset: 0x22530F8 VA: 0x22530F8
	public void .ctor(Type type) { }

	// RVA: 0x2253124 Offset: 0x2253124 VA: 0x2253124
	public void .ctor(Type type, object instance) { }

	// RVA: 0x2253150 Offset: 0x2253150 VA: 0x2253150
	public void .ctor(Type type, object instance, string message) { }

	// RVA: 0x2253184 Offset: 0x2253184 VA: 0x2253184
	public void .ctor(Type type, object instance, string message, Exception innerException) { }

	// RVA: 0x22531B8 Offset: 0x22531B8 VA: 0x22531B8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x225330C Offset: 0x225330C VA: 0x225330C Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22533E0 Offset: 0x22533E0 VA: 0x22533E0
	public Type get_LicensedType() { }
}

// Namespace: System.ComponentModel
public sealed class LicenseManager // TypeDefIndex: 1252
{
	// Fields
	private static LicenseContext mycontext; // 0x0
	private static object contextLockUser; // 0x8
	private static object lockObject; // 0x10

	// Properties
	public static LicenseContext CurrentContext { get; set; }
	public static LicenseUsageMode UsageMode { get; }

	// Methods

	// RVA: 0x22533E8 Offset: 0x22533E8 VA: 0x22533E8
	private void .ctor() { }

	// RVA: 0x22533F0 Offset: 0x22533F0 VA: 0x22533F0
	private static void .cctor() { }

	// RVA: 0x225345C Offset: 0x225345C VA: 0x225345C
	public static LicenseContext get_CurrentContext() { }

	// RVA: 0x22535BC Offset: 0x22535BC VA: 0x22535BC
	public static void set_CurrentContext(LicenseContext value) { }

	// RVA: 0x2253730 Offset: 0x2253730 VA: 0x2253730
	public static LicenseUsageMode get_UsageMode() { }

	// RVA: 0x22537A8 Offset: 0x22537A8 VA: 0x22537A8
	public static object CreateWithContext(Type type, LicenseContext creationContext) { }

	// RVA: 0x225383C Offset: 0x225383C VA: 0x225383C
	public static object CreateWithContext(Type type, LicenseContext creationContext, object[] args) { }

	// RVA: 0x2253DA8 Offset: 0x2253DA8 VA: 0x2253DA8
	public static bool IsLicensed(Type type) { }

	// RVA: 0x2254050 Offset: 0x2254050 VA: 0x2254050
	public static bool IsValid(Type type) { }

	// RVA: 0x22540F4 Offset: 0x22540F4 VA: 0x22540F4
	public static bool IsValid(Type type, object instance, out License license) { }

	// RVA: 0x2253B10 Offset: 0x2253B10 VA: 0x2253B10
	public static void LockContext(object contextUser) { }

	// RVA: 0x2253C10 Offset: 0x2253C10 VA: 0x2253C10
	public static void UnlockContext(object contextUser) { }

	// RVA: 0x2254170 Offset: 0x2254170 VA: 0x2254170
	public static void Validate(Type type) { }

	// RVA: 0x2254244 Offset: 0x2254244 VA: 0x2254244
	public static License Validate(Type type, object instance) { }

	// RVA: 0x2253E4C Offset: 0x2253E4C VA: 0x2253E4C
	private static bool privateGetLicense(Type type, object instance, bool allowExceptions, out License license) { }
}

// Namespace: System.ComponentModel
public abstract class LicenseProvider // TypeDefIndex: 1253
{
	// Methods

	// RVA: 0x2252D24 Offset: 0x2252D24 VA: 0x2252D24
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD0090 Offset: 0xBD0090 VA: 0xBD0090
public sealed class LicenseProviderAttribute : Attribute // TypeDefIndex: 1254
{
	// Fields
	private Type Provider; // 0x10
	public static readonly LicenseProviderAttribute Default; // 0x0

	// Properties
	public Type LicenseProvider { get; }
	public override object TypeId { get; }

	// Methods
