	// RVA: 0x17DE040 Offset: 0x17DE040 VA: 0x17DE040 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x17DE048 Offset: 0x17DE048 VA: 0x17DE048
	public void onClick() { }

	// RVA: 0x17DE0EC Offset: 0x17DE0EC VA: 0x17DE0EC
	public void SetClickCallBack(Action callback) { }

	// RVA: 0x17DE0F4 Offset: 0x17DE0F4 VA: 0x17DE0F4
	public void SetEntryAnim() { }

	// RVA: 0x17DE2C4 Offset: 0x17DE2C4 VA: 0x17DE2C4
	private void EntryAnim() { }

	// RVA: 0x17DE494 Offset: 0x17DE494 VA: 0x17DE494
	public void SetClearAnim() { }

	// RVA: 0x17DE58C Offset: 0x17DE58C VA: 0x17DE58C
	public void StartClearAnim() { }

	// RVA: 0x17DE89C Offset: 0x17DE89C VA: 0x17DE89C
	private void AnimFrameOutEnd() { }

	// RVA: 0x17DE2CC Offset: 0x17DE2CC VA: 0x17DE2CC
	public void FrameIn(string callFinished) { }

	// RVA: 0x17DE6D4 Offset: 0x17DE6D4 VA: 0x17DE6D4
	public void FrameOut(string callFinished) { }

	// RVA: 0x17DE978 Offset: 0x17DE978 VA: 0x17DE978
	public UISprite GetIconSprite() { }

	// RVA: 0x17DE980 Offset: 0x17DE980 VA: 0x17DE980
	public Vector3 GetBossGridPosition() { }

	// RVA: 0x17DE98C Offset: 0x17DE98C VA: 0x17DE98C
	public int GetBackBtnDepth() { }

	// RVA: 0x17DE994 Offset: 0x17DE994 VA: 0x17DE994
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoWarBoardTitleComponent : MonoBehaviour // TypeDefIndex: 5891
{
	// Fields
	[SerializeField] // RVA: 0xCBDEB4 Offset: 0xCBDEB4 VA: 0xCBDEB4
	protected UILabel titleLabel; // 0x18
	[SerializeField] // RVA: 0xCBDEC4 Offset: 0xCBDEC4 VA: 0xCBDEC4
	protected UILabel messageLabel; // 0x20
	[SerializeField] // RVA: 0xCBDED4 Offset: 0xCBDED4 VA: 0xCBDED4
	protected ScriptLineMessage messageManager; // 0x28
	[SerializeField] // RVA: 0xCBDEE4 Offset: 0xCBDEE4 VA: 0xCBDEE4
	protected UISprite typeSprite; // 0x30
	[SerializeField] // RVA: 0xCBDEF4 Offset: 0xCBDEF4 VA: 0xCBDEF4
	protected UIPanel basePanel; // 0x38
	[SerializeField] // RVA: 0xCBDF04 Offset: 0xCBDF04 VA: 0xCBDF04
	protected UIPanel base2Panel; // 0x40
	[SerializeField] // RVA: 0xCBDF14 Offset: 0xCBDF14 VA: 0xCBDF14
	protected float buttonBlockTime; // 0x48
	[SerializeField] // RVA: 0xCBDF24 Offset: 0xCBDF24 VA: 0xCBDF24
	protected float BgmFadeOutStartTime; // 0x4C
	[SerializeField] // RVA: 0xCBDF34 Offset: 0xCBDF34 VA: 0xCBDF34
	protected float BgmFadeOutPlayTime; // 0x50
	[SerializeField] // RVA: 0xCBDF44 Offset: 0xCBDF44 VA: 0xCBDF44
	protected float BgmPlayStartTime; // 0x54
	[SerializeField] // RVA: 0xCBDF54 Offset: 0xCBDF54 VA: 0xCBDF54
	protected float TitleFadeOutPlayTime; // 0x58
	private Action callbackDecide; // 0x60
	private Action callbackCancel; // 0x68
	private bool isButtonEnable; // 0x70
	private string bgmName; // 0x78
	private ScreenTouchInformationComponent screenTouchInfo; // 0x80
	private CStateManager<TitleInfoWarBoardTitleComponent> mFSM; // 0x88
	private Animation mAnimation; // 0x90
	[SerializeField] // RVA: 0xCBDF64 Offset: 0xCBDF64 VA: 0xCBDF64
	private GameObject particlePrefab; // 0x98
	protected GameObject particleObj; // 0xA0
	private Action mEndAct; // 0xA8

	// Methods

	// RVA: 0x17DEA68 Offset: 0x17DEA68 VA: 0x17DEA68
	public void .ctor() { }

	// RVA: 0x17DEA84 Offset: 0x17DEA84 VA: 0x17DEA84
	private void Awake() { }

	// RVA: 0x17DED8C Offset: 0x17DED8C VA: 0x17DED8C
	private void Update() { }

	// RVA: 0x17DEF84 Offset: 0x17DEF84 VA: 0x17DEF84
	public void Setup(int stageId, Action callbackDecide, Action callbackCancel) { }

	// RVA: 0x17DEDE8 Offset: 0x17DEDE8 VA: 0x17DEDE8
	protected void RefreshPanel() { }

	// RVA: 0x17DF648 Offset: 0x17DF648 VA: 0x17DF648
	public void Play(Action end_act) { }

	// RVA: 0x17DF7DC Offset: 0x17DF7DC VA: 0x17DF7DC
	public void FadeOutBGM() { }

	// RVA: 0x17DF850 Offset: 0x17DF850 VA: 0x17DF850
	public void PlayBGM() { }

	// RVA: 0x17DF8BC Offset: 0x17DF8BC VA: 0x17DF8BC
	public TitleInfoWarBoardTitleComponent.STATE GetState() { }

	// RVA: 0x17DED1C Offset: 0x17DED1C VA: 0x17DED1C
	public void SetState(TitleInfoWarBoardTitleComponent.STATE state) { }

	// RVA: 0x17DF63C Offset: 0x17DF63C VA: 0x17DF63C
	private void SetButtonEnable(bool isEnable) { }

	// RVA: 0x17DF91C Offset: 0x17DF91C VA: 0x17DF91C
	public void OnClickDecideButton() { }

	// RVA: 0x17DFA58 Offset: 0x17DFA58 VA: 0x17DFA58
	public void OnClickCancelButton() { }

	// RVA: 0x17DFB84 Offset: 0x17DFB84 VA: 0x17DFB84
	private void OnEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xD35B98 Offset: 0xD35B98 VA: 0xD35B98
	// RVA: 0x17DFC0C Offset: 0x17DFC0C VA: 0x17DFC0C
	private void <OnClickDecideButton>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD35BA8 Offset: 0xD35BA8 VA: 0xD35BA8
	// RVA: 0x17DFCA4 Offset: 0x17DFCA4 VA: 0x17DFCA4
	private void <OnClickCancelButton>m__1() { }
}

// Namespace: 
public enum TitleInfoWarBoardTitleComponent.STATE // TypeDefIndex: 5892
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoWarBoardTitleComponent.STATE NONE = 0;
	public const TitleInfoWarBoardTitleComponent.STATE PLAY = 1;
	public const TitleInfoWarBoardTitleComponent.STATE TOUCH_WAIT = 2;
	public const TitleInfoWarBoardTitleComponent.STATE SIZEOF = 3;
}

// Namespace: 
private class TitleInfoWarBoardTitleComponent.StateNone : IState<TitleInfoWarBoardTitleComponent> // TypeDefIndex: 5893
{
	// Methods

	// RVA: 0x17DED04 Offset: 0x17DED04 VA: 0x17DED04
	public void .ctor() { }

	// RVA: 0x17DFD6C Offset: 0x17DFD6C VA: 0x17DFD6C Slot: 4
	public void begin(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x17DFD70 Offset: 0x17DFD70 VA: 0x17DFD70 Slot: 5
	public void update(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x17DFD74 Offset: 0x17DFD74 VA: 0x17DFD74 Slot: 6
	public void end(TitleInfoWarBoardTitleComponent that) { }
}

// Namespace: 
private class TitleInfoWarBoardTitleComponent.StatePlay : IState<TitleInfoWarBoardTitleComponent> // TypeDefIndex: 5894
{
	// Methods

	// RVA: 0x17DED0C Offset: 0x17DED0C VA: 0x17DED0C
	public void .ctor() { }

	// RVA: 0x17DFD78 Offset: 0x17DFD78 VA: 0x17DFD78 Slot: 4
	public void begin(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x17DFED4 Offset: 0x17DFED4 VA: 0x17DFED4 Slot: 5
	public void update(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x17DFFF0 Offset: 0x17DFFF0 VA: 0x17DFFF0 Slot: 6
	public void end(TitleInfoWarBoardTitleComponent that) { }
}

// Namespace: 
private class TitleInfoWarBoardTitleComponent.StateTouchWait : IState<TitleInfoWarBoardTitleComponent> // TypeDefIndex: 5895
{
	// Methods

	// RVA: 0x17DED14 Offset: 0x17DED14 VA: 0x17DED14
	public void .ctor() { }

	// RVA: 0x17DFFF4 Offset: 0x17DFFF4 VA: 0x17DFFF4 Slot: 4
	public void begin(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x17E0070 Offset: 0x17E0070 VA: 0x17E0070 Slot: 5
	public void update(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x17E0074 Offset: 0x17E0074 VA: 0x17E0074 Slot: 6
	public void end(TitleInfoWarBoardTitleComponent that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE250 Offset: 0xCAE250 VA: 0xCAE250
private sealed class TitleInfoWarBoardTitleComponent.<Setup>c__AnonStorey0 // TypeDefIndex: 5896
{
	// Fields
	internal Action callbackDecide; // 0x10

	// Methods

	// RVA: 0x17DF634 Offset: 0x17DF634 VA: 0x17DF634
	public void .ctor() { }

	// RVA: 0x17DFD3C Offset: 0x17DFD3C VA: 0x17DFD3C
	internal void <>m__0() { }
}

// Namespace: 
public class TitleInfoControl : MonoBehaviour // TypeDefIndex: 5897
{
	// Fields
	public static readonly float FRAME_IN_OUT_MV_SPD_TIME; // 0x0
	public static readonly float BACK_BTN_MV_SPD_TIME; // 0x4
	public static readonly float BASE_Y; // 0x8
	public static readonly float FRAME_OUT_POS_Y; // 0xC
	public static readonly float PARTICLE_Y; // 0x10
	public static readonly float BACK_BTN_SP_BASE_X; // 0x14
	public static readonly float BACK_SELECT_BTN_SP_BASE_X; // 0x18
	public static readonly float BACK_SELECT_BTN_SP_BASE_Y; // 0x1C
	public static readonly float BACK_BTN_SP_COMBINE_MENU_Y; // 0x20
	public static readonly float BACK_BTN_SP_TERMINAL_X; // 0x24
	public static readonly int TIME_UPDATE_ITVL_SEC; // 0x28
	public static readonly float EVENT_ALPHA_ANIM_SPD_RATE; // 0x2C
	public static readonly float EVENT_ALPHA_ANIM_TIME_INTERVAL; // 0x30
	public static readonly float BASE_EVENTITEM_POTISION_X; // 0x34
	public static readonly float HEADER_ALPHA_ANIM_SPD_RATE; // 0x38
	public static readonly int EVENT_ITEM_IMAGE_ON_NUM; // 0x3C
	public static readonly int EVENT_ITEM_IMAGE_OFF_NUM; // 0x40
	public static readonly float EVENT_SUPERBOSS_OFFSET_Y; // 0x44
	public static readonly float EVENT_TIME_STATUS_SUPERBOSS_OFFSET_Y; // 0x48
	private static readonly string EVENT_BTN_SPNAME; // 0x50
	private const int EVENT_BTN_NOTICE_NUMBER_X = 59;
	private const int EVENT_BTN_NOTICE_NUMBER_Y = 16;
	private const float EVENT_BTN_NOTICE_NUMBER_SCALE = 0.75;
	private static readonly string MAP_HEADER_BG_SPNAME_PREFIX; // 0x58
	private static readonly string MAP_HEADER_BG_DEFAULT_SPNAME; // 0x60
	private static readonly string HEADER_TITLE_NAME_ON_BANNER; // 0x68
	private static readonly string EVENT_TOWER_EFFECT_PATH; // 0x70
	private static readonly string EVENT_TOWER_EFFECT_PREFAB; // 0x78
	private static readonly string EVENT_FACTORY_EFFECT_PATH; // 0x80
	private static readonly string EVENT_DAILY_POINT_EFFECT_PATH; // 0x88
	private static readonly string WARBOARD_TITLE_EFFECT_PATH; // 0x90
	private static readonly string TERMINAL_INFO_PATH; // 0x98
	private static readonly string TITLE_INFO_EVENT_RAID_BOSS_PREFAB; // 0xA0
	private static readonly string TITLE_INFO_EVENT_RAID_BOSS_STATUS; // 0xA8
	private static readonly string TITLE_INFO_EVENT_RAID_BOSS_STATUS_JUMBLE; // 0xB0
	private static readonly string TITLE_INFO_EVENT_SUPER_BOSS_PREFAB; // 0xB8
	private static readonly string TITLE_INFO_EVENT_SUPER_BOSS_STATUS; // 0xC0
	private static readonly string EVENT_RAID_PATH; // 0xC8
	private static readonly string EVENT_RAID_BOSS_UI_PREFAB; // 0xD0
	private static readonly string EVENT_RAID_BOSS_UI_STATUS; // 0xD8
	private static readonly string EVENT_RAID_BOSS_UI_STATUS_JUMBLE; // 0xE0
	private static readonly string EVENT_SUPER_BOSS_UI_PREFAB; // 0xE8
	private static readonly string EVENT_SUPER_BOSS_UI_STATUS; // 0xF0
	private static readonly string WARBOARD_TITLE_PREFAB_NAME; // 0xF8
	public UISprite backBtnBgSprite; // 0x18
	public UISprite backBtnSprite; // 0x20
	public UIButton backBtnButton; // 0x28
	public GameObject backBtn; // 0x30
	public UISprite backSelectBtnBgSprite; // 0x38
	public UISprite backSelectBtnSprite; // 0x40
	[SerializeField] // RVA: 0xCBDF74 Offset: 0xCBDF74 VA: 0xCBDF74
	private GameObject backStoryBtn; // 0x48
	public UISprite titleImg; // 0x50
	public UISkinSprite headerBgImg; // 0x58
	[SerializeField] // RVA: 0xCBDF84 Offset: 0xCBDF84 VA: 0xCBDF84
	private BoxCollider mDebugBtn; // 0x60
	[SerializeField] // RVA: 0xCBDF94 Offset: 0xCBDF94 VA: 0xCBDF94
	private string[] particlePrefabNames; // 0x68
	protected GameObject particleObj; // 0x70
	protected string particleAssetName; // 0x78
	public static Dictionary<int, long> preBoxGachaTotalCount; // 0x100
	[SerializeField] // RVA: 0xCBDFA4 Offset: 0xCBDFA4 VA: 0xCBDFA4
	protected int particlePanelDepth; // 0x80
	[SerializeField] // RVA: 0xCBDFB4 Offset: 0xCBDFB4 VA: 0xCBDFB4
	private UISprite mEventBgSp; // 0x88
	[SerializeField] // RVA: 0xCBDFC4 Offset: 0xCBDFC4 VA: 0xCBDFC4
	private ExUITexture mEventBgTexture; // 0x90
	[SerializeField] // RVA: 0xCBDFD4 Offset: 0xCBDFD4 VA: 0xCBDFD4
	private GameObject mEventRoot; // 0x98
	[SerializeField] // RVA: 0xCBDFE4 Offset: 0xCBDFE4 VA: 0xCBDFE4
	private UISprite mEventItemEventBtn; // 0xA0
	[SerializeField] // RVA: 0xCBDFF4 Offset: 0xCBDFF4 VA: 0xCBDFF4
	private UIWidget mEventAlphaAnimRoot; // 0xA8
	[SerializeField] // RVA: 0xCBE004 Offset: 0xCBE004 VA: 0xCBE004
	private GameObject alphaAnimChangeBtn; // 0xB0
	[SerializeField] // RVA: 0xCBE014 Offset: 0xCBE014 VA: 0xCBE014
	private UIWidget mEventAlphaAnimRoot2; // 0xB8
	[SerializeField] // RVA: 0xCBE024 Offset: 0xCBE024 VA: 0xCBE024
	private GameObject alphaAnimChangeBtn2; // 0xC0
	[SerializeField] // RVA: 0xCBE034 Offset: 0xCBE034 VA: 0xCBE034
	private GameObject defeatCntAlphaAnimChangeBtn; // 0xC8
	[SerializeField] // RVA: 0xCBE044 Offset: 0xCBE044 VA: 0xCBE044
	private GameObject reprintLastWarRaidRoot; // 0xD0
	[SerializeField] // RVA: 0xCBE054 Offset: 0xCBE054 VA: 0xCBE054
	private GameObject mBlockMaskPrefab; // 0xD8
	[SerializeField] // RVA: 0xCBE064 Offset: 0xCBE064 VA: 0xCBE064
	private Transform mBlockMaskParent; // 0xE0
	[SerializeField] // RVA: 0xCBE074 Offset: 0xCBE074 VA: 0xCBE074
	private GameObject mTitleInfoEventItemPrefab; // 0xE8
	[SerializeField] // RVA: 0xCBE084 Offset: 0xCBE084 VA: 0xCBE084
	private GameObject mTitleInfoEventRaidBossOldPrefab; // 0xF0
	[SerializeField] // RVA: 0xCBE094 Offset: 0xCBE094 VA: 0xCBE094
	private GameObject mEventBannerWindowPrefab; // 0xF8
	[SerializeField] // RVA: 0xCBE0A4 Offset: 0xCBE0A4 VA: 0xCBE0A4
	private UIGrid mBossStatusGrid; // 0x100
	[SerializeField] // RVA: 0xCBE0B4 Offset: 0xCBE0B4 VA: 0xCBE0B4
	private UIGrid mTimeStatusGrid; // 0x108
	private List<TitleInfoEventRaidStatusComponent> mRaidStatusList; // 0x110
	private List<TitleInfoSuperBossStatusComponent> mSuperBossStatusList; // 0x118
	private List<EventSuperBossEntity> mCurrentBossesList; // 0x120
	private TitleInfoEventItemControl eventRaidUIControl; // 0x128
	private TitleInfoEventItemControl eventItemControl; // 0x130
	private TitleInfoEventInfoComponent mEventItemInfo; // 0x138
	[SerializeField] // RVA: 0xCBE0C4 Offset: 0xCBE0C4 VA: 0xCBE0C4
	private NoticeNumberComponent noticeNumberPrefab; // 0x140
	private NoticeNumberComponent mNoticeNumber; // 0x148
	[SerializeField] // RVA: 0xCBE0D4 Offset: 0xCBE0D4 VA: 0xCBE0D4
	private UIAtlas commonAtlas; // 0x150
	[SerializeField] // RVA: 0xCBE0E4 Offset: 0xCBE0E4 VA: 0xCBE0E4
	private UIAtlas terminalAtlas; // 0x158
	[SerializeField] // RVA: 0xCBE0F4 Offset: 0xCBE0F4 VA: 0xCBE0F4
	private UIAtlas titleNameAtlas; // 0x160
	[SerializeField] // RVA: 0xCBE104 Offset: 0xCBE104 VA: 0xCBE104
	private UIAtlas titleNameMyRoomAtlas; // 0x168
	private GameObject mBlockMask; // 0x170
	private bool mIsMovingFrameInOut; // 0x178
	private string requestedNewHeader; // 0x180
	private bool isDispSelectBack; // 0x188
	private bool isBackBtnSpCombineMenu; // 0x189
	private int mBossAnimIdx; // 0x18C
	private Action mAdditionalCallbackOnBossAnim; // 0x190
	private bool mIsPlayedJumbleRaidDefeatedEffect; // 0x198
	private AssetData TitleInfoAssetData; // 0x1A0
	private TitleInfoEventBulletinBoardComponent mBulletinBoard; // 0x1A8
	private AssetData EventRaidAssetData; // 0x1B0
	[SerializeField] // RVA: 0xCBE114 Offset: 0xCBE114 VA: 0xCBE114
	private GameObject eventUIRoot; // 0x1B8
	[SerializeField] // RVA: 0xCBE124 Offset: 0xCBE124 VA: 0xCBE124
	private Component towerRoot; // 0x1C0
	private GameObject eventPointGaugeObj; // 0x1C8
	private EventInfoPointGaugeControl eventPointGaugeCtl; // 0x1D0
	private AssetData effectAssetData; // 0x1D8
	private TitleInfoEventLeagueVsComponent leagueVsGauge; // 0x1E0
	private List<TitleInfoEventLeagueVsStatusComponent> leagueVsStatusList; // 0x1E8
	private TitleInfoEventRaceRankComponent raceRankUI; // 0x1F0
	private TitleInfoEventRaceRoundComponent raceRoundUI; // 0x1F8
	private TitleInfoEventTower mTitleInfoEventTower; // 0x200
	private TitleInfoEventTowerReward mTitleInfoEventTowerReward; // 0x208
	private bool mIsEventTowerEffectAssetDataLoad; // 0x210
	private AssetData mEventTowerEffectAssetData; // 0x218
	private Action mEventTowerEffectAssetCallback; // 0x220
	private bool mIsEventTowerOpen; // 0x228
	private TitleInfoEventDailyPoint mTitleInfoEventDailyPoint; // 0x230
	private bool mIsEventDailyPointEffectAssetDataLoad; // 0x238
	private AssetData mEventDailyPointEffectAssetData; // 0x240
	private Action mEventDailyPointEffectAssetCallback; // 0x248
	private bool mIsEventDailyPointOpen; // 0x250
	private TitleInfoEventDailyPointItemComponent dailyPointItemUI; // 0x258
	private bool needPlayDailyPointItemEffect; // 0x260
	private EventInfoConquestGetComponent eventInfoConquestGetComponent; // 0x268
	private EventInfoProductivityGrowthDialog eventInfoProductivityGrowthDialog; // 0x270
	private EventInfoHarvestGrowthDialog eventInfoHarvestGrowthDialog; // 0x278
	private EventInfoHarvestCautionDialog eventInfoHarvestCautionDialog; // 0x280
	private TitleInfoWarBoardTitleComponent mTitleInfoWarBoardTitle; // 0x288
	private bool mIsWarBoardTitleEffectAssetDataLoad; // 0x290
	private AssetData mWarBoardTitleEffectAssetData; // 0x298
	private Action mWarBoardTitleEffectAssetCallback; // 0x2A0
	private bool mIsWarBoardTitleEffectOpen; // 0x2A8
	private EventPointRewardDialogControl eventPointRewardDialogControl; // 0x2B0
	private TitleInfoEventSideItemComponent sideItemUI; // 0x2B8
	private TitleInfoEventFactory mTitleInfoEventFactory; // 0x2C0
	private TitleInfoEventTimeStatus mTitleInfoEventTimeStatus; // 0x2C8
	private bool mIsEventFactoryEffectAssetDataLoad; // 0x2D0
	private AssetData mEventFactoryEffectAssetData; // 0x2D8
	private Action mEventFactoryEffectAssetCallback; // 0x2E0
	private bool mIsEventFactoryOpen; // 0x2E8
	private TitleInfoEventSubmarineStatusComponent eventSubmarineStatusComponent; // 0x2F0
	private List<TitleInfoControl.EventEndTimeInfo> mEventEndTimeInfs; // 0x2F8
	private int mDoneSetEventId; // 0x300
	private bool mIsActiveEventInfo; // 0x304
	private int mWarId; // 0x308
	private int mWarEventId; // 0x30C
	private int mShopEventId; // 0x310
	private int mOnReleaseEventAlphaAnimFrameCount; // 0x314
	private int mOnReleaseEventAlphaAnimFrameCount2; // 0x318
	private EventItemDisplayEntity.ScreenFlag mEvScreenKind; // 0x31C
	private EventBannerWindow mEventBannerWindow; // 0x320
	[SerializeField] // RVA: 0xCBE134 Offset: 0xCBE134 VA: 0xCBE134
	private GameObject helpBtn; // 0x328
	private TitleInfoControl.TitleKind nowTitleKind; // 0x330
	protected PlayMakerFSM activeSceneFSM; // 0x338
	private TitleInfoControl.SuperBossAnimeState superBossAnimeState; // 0x340
	private EventDetailEntity activeEventDetailEnt; // 0x348
	[SerializeField] // RVA: 0xCBE144 Offset: 0xCBE144 VA: 0xCBE144
	private UILabel infoText; // 0x350
	private long infoTextDispOldTime; // 0x358
	private static readonly Dictionary<TitleInfoControl.TitleKind, string> titleNameList; // 0x108
	private static readonly Dictionary<TitleInfoControl.TitleKind, int> titleDepthList; // 0x110
	protected static readonly TitleInfoControl.TitleKind[] _helpEnableKind; // 0x118
	private static readonly Dictionary<TitleInfoControl.TitleKind, TutorialFlag.ImageId> _helpDispImageList; // 0x120
	private static readonly Dictionary<int, TitleInfoControl.TitleKind> terminalTitleList; // 0x128
	[CompilerGeneratedAttribute] // RVA: 0xCBE154 Offset: 0xCBE154 VA: 0xCBE154
	private static Predicate<TitleInfoControl.EventEndTimeInfo> <>f__am$cache0; // 0x130
	[CompilerGeneratedAttribute] // RVA: 0xCBE164 Offset: 0xCBE164 VA: 0xCBE164
	private static Comparison<TitleInfoControl.EventEndTimeInfo> <>f__mg$cache0; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xCBE174 Offset: 0xCBE174 VA: 0xCBE174
	private static Comparison<EventRaidEntity> <>f__am$cache1; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xCBE184 Offset: 0xCBE184 VA: 0xCBE184
	private static Func<DataEntityBase, EventRaidEntity> <>f__am$cache2; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xCBE194 Offset: 0xCBE194 VA: 0xCBE194
	private static Func<TitleInfoEventInfoComponent, TitleInfoEventRaidBossComponent> <>f__am$cache3; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xCBE1A4 Offset: 0xCBE1A4 VA: 0xCBE1A4
	private static Func<TitleInfoEventInfoComponent, TitleInfoEventRaidBossComponent> <>f__am$cache4; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xCBE1B4 Offset: 0xCBE1B4 VA: 0xCBE1B4
	private static Func<TitleInfoEventInfoComponent, TitleInfoEventRaidBossComponent> <>f__am$cache5; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xCBE1C4 Offset: 0xCBE1C4 VA: 0xCBE1C4
	private static Action <>f__am$cache6; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xCBE1D4 Offset: 0xCBE1D4 VA: 0xCBE1D4
	private static Action <>f__am$cache7; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xCBE1E4 Offset: 0xCBE1E4 VA: 0xCBE1E4
	private static Action <>f__am$cache8; // 0x178
	[CompilerGeneratedAttribute] // RVA: 0xCBE1F4 Offset: 0xCBE1F4 VA: 0xCBE1F4
	private static Action <>f__am$cache9; // 0x180
	[CompilerGeneratedAttribute] // RVA: 0xCBE204 Offset: 0xCBE204 VA: 0xCBE204
	private static Action <>f__am$cacheA; // 0x188

	// Properties
	public static Vector3 BOSS_GRID_DEFAULT_POS { get; }
	public static Vector3 BOSS_GRID_LIMIT_POS { get; }
	public static Vector3 BOSS_GRID_JUMBLE_POS { get; }
	public static Vector3 BOSS_GRID_TOWER_POS { get; }

	// Methods

	// RVA: 0x141FE20 Offset: 0x141FE20 VA: 0x141FE20
	public void .ctor() { }

	// RVA: 0x141FF10 Offset: 0x141FF10 VA: 0x141FF10
	public static Vector3 get_BOSS_GRID_DEFAULT_POS() { }

	// RVA: 0x141FFC4 Offset: 0x141FFC4 VA: 0x141FFC4
	public static Vector3 get_BOSS_GRID_LIMIT_POS() { }

	// RVA: 0x1420078 Offset: 0x1420078 VA: 0x1420078
	public static Vector3 get_BOSS_GRID_JUMBLE_POS() { }

	// RVA: 0x142012C Offset: 0x142012C VA: 0x142012C
	public static Vector3 get_BOSS_GRID_TOWER_POS() { }

	// RVA: 0x14201DC Offset: 0x14201DC VA: 0x14201DC
	private TitleInfoControl.EventEndTimeInfo GetActiveEventEndTimeInfo() { }

	// RVA: 0x14202F0 Offset: 0x14202F0 VA: 0x14202F0
	private int GetActiveEventId() { }

	// RVA: 0x142033C Offset: 0x142033C VA: 0x142033C
	public bool isEventSetted() { }

	// RVA: 0x142032C Offset: 0x142032C VA: 0x142032C
	private bool IsEventShopOnly() { }

	// RVA: 0x142034C Offset: 0x142034C VA: 0x142034C
	private void Awake() { }

	// RVA: 0x1420954 Offset: 0x1420954 VA: 0x1420954
	private void SetParticle() { }

	// RVA: 0x1420E74 Offset: 0x1420E74 VA: 0x1420E74
	private void OnDestroy() { }

	// RVA: 0x1420FA4 Offset: 0x1420FA4 VA: 0x1420FA4
	private void OnEnable() { }

	// RVA: 0x1421038 Offset: 0x1421038 VA: 0x1421038
	private void Update() { }

	// RVA: 0x14215FC Offset: 0x14215FC VA: 0x14215FC
	private void LateUpdate() { }

	// RVA: 0x1421748 Offset: 0x1421748 VA: 0x1421748
	public void setDispParticleObj(bool disp) { }

	// RVA: 0x14217F8 Offset: 0x14217F8 VA: 0x14217F8
	public void SetParent(Transform parent_transform) { }

	// RVA: 0x14219EC Offset: 0x14219EC VA: 0x14219EC
	public void SetBackBtnAct(Action act) { }

	// RVA: 0x1409FC0 Offset: 0x1409FC0 VA: 0x1409FC0
	public void setTitleInfo(PlayMakerFSM fsm, bool isShow, string titleTxt, TitleInfoControl.TitleKind kind) { }

	// RVA: 0x142201C Offset: 0x142201C VA: 0x142201C
	public void setTitleInfo(PlayMakerFSM fsm, TitleInfoControl.BackKind backKind, TitleInfoControl.TitleKind kind) { }

	// RVA: 0x142231C Offset: 0x142231C VA: 0x142231C
	public void changeTitleInfo(TitleInfoControl.BackKind backKind, TitleInfoControl.TitleKind titleKind) { }

	// RVA: 0x140A09C Offset: 0x140A09C VA: 0x140A09C
	public void changeTitleInfo(bool isBack, TitleInfoControl.TitleKind titleKind, int titleNameParam = 0) { }

	// RVA: 0x1421B24 Offset: 0x1421B24 VA: 0x1421B24
	private void SetBackBtn(bool isShow, TitleInfoControl.TitleKind titleKind = 0) { }

	// RVA: 0x14220DC Offset: 0x14220DC VA: 0x14220DC
	public void setBackBtnSprite(TitleInfoControl.BackKind kind) { }

	// RVA: 0x142235C Offset: 0x142235C VA: 0x142235C
	public void SetSelectBackBtnDispFlag(bool isDisp) { }

	// RVA: 0x142236C Offset: 0x142236C VA: 0x142236C
	public void SetSelectBackBtnDispFlag(bool isDispSelectBack, bool isBackBtnBgSpCombineMenu) { }

	// RVA: 0x1421BE8 Offset: 0x1421BE8 VA: 0x1421BE8
	public void SetSelectBackBtn(TitleInfoControl.TitleKind titleKind = 0, bool isUpdateForcibly = False) { }

	// RVA: 0x1422380 Offset: 0x1422380 VA: 0x1422380
	public void SetSelectBackBtnSprite(TitleInfoControl.TitleKind titleKind = 0) { }

	// RVA: 0x14225A4 Offset: 0x14225A4 VA: 0x14225A4
	public void SetBackBtnButtonStatus(bool isEnable) { }

	// RVA: 0x140D534 Offset: 0x140D534 VA: 0x140D534
	public void setBackBtnSprite(bool isDispBack) { }

	// RVA: 0x140A10C Offset: 0x140A10C VA: 0x140A10C
	public void setBackBtn_Terminal(bool isDispBack = False) { }

	// RVA: 0x1411EA8 Offset: 0x1411EA8 VA: 0x1411EA8
	public void setBackBtnColliderEnable(bool isEnable) { }

	// RVA: 0x14226B4 Offset: 0x14226B4 VA: 0x14226B4
	public void setBackSelectBtnColliderEnable(bool isEnable) { }

	// RVA: 0x142279C Offset: 0x142279C VA: 0x142279C
	public void setBackBtnEnable(bool isEnable) { }

	// RVA: 0x140A2D8 Offset: 0x140A2D8 VA: 0x140A2D8
	public void SetBackStoryButtonEnable(bool isEnable) { }

	// RVA: 0x1422950 Offset: 0x1422950 VA: 0x1422950
	private static string GetTitleImgName(TitleInfoControl.TitleKind kind, int titleNameParam) { }

	// RVA: 0x1421C00 Offset: 0x1421C00 VA: 0x1421C00
	public void setTitleImg(TitleInfoControl.TitleKind kind, bool isSetDefaultDepth = True, int titleNameParam = 0) { }

	// RVA: 0x1422D44 Offset: 0x1422D44 VA: 0x1422D44
	public void setTitleImgFromBanner(int headerId, bool isMap, bool isSetDefaultDepth = True, TitleInfoControl.TitleKind titleKind = 0) { }

	// RVA: 0x14230C4 Offset: 0x14230C4 VA: 0x14230C4
	public void RequestTitleImageChange(int headerId) { }

	// RVA: 0x1423340 Offset: 0x1423340 VA: 0x1423340
	private void RecallHeaderFade() { }

	// RVA: 0x14234A4 Offset: 0x14234A4 VA: 0x14234A4
	public void sendEvent(string msg) { }

	// RVA: 0x1423584 Offset: 0x1423584 VA: 0x1423584
	public void setDepth(int depth) { }

	// RVA: 0x140A39C Offset: 0x140A39C VA: 0x140A39C
	public void setBackBtnDepth(int depth) { }

	// RVA: 0x1422B90 Offset: 0x1422B90 VA: 0x1422B90
	public void SetParticleDepth(int depth) { }

	// RVA: 0x140A470 Offset: 0x140A470 VA: 0x140A470
	public void setHeaderBgImg(int warId = 0) { }

	// RVA: 0x1422350 Offset: 0x1422350 VA: 0x1422350
	public void FrameIn_BackBtn(bool is_force = False) { }

	// RVA: 0x1423A1C Offset: 0x1423A1C VA: 0x1423A1C
	public void FrameOut_BackBtn(bool is_force = False) { }

	// RVA: 0x142384C Offset: 0x142384C VA: 0x142384C
	public void SlideFrame_BackBtn(bool isFrameIn, bool isForce = False) { }

	// RVA: 0x1423A28 Offset: 0x1423A28 VA: 0x1423A28
	public void SetShopEventInfo(int eventId, bool isInitRequest = False) { }

	// RVA: 0x140C5C8 Offset: 0x140C5C8 VA: 0x140C5C8
	public void SetActiveEventInfo(WarEntity warEnt, EventItemDisplayEntity.ScreenFlag evScreen, Action callback) { }

	// RVA: 0x1424418 Offset: 0x1424418 VA: 0x1424418
	public void SetEventRewardInfo(int eventId, float logoSizeX, Action callback) { }

	// RVA: 0x1417FFC Offset: 0x1417FFC VA: 0x1417FFC
	public void SetActiveEventInfo(bool isActive, EventItemDisplayEntity.ScreenFlag evScreen, int warId = 0, int warEventId = 0, Action callback) { }

	// RVA: 0x14255C4 Offset: 0x14255C4 VA: 0x14255C4
	private void SetEventInfoBg(int warId) { }

	// RVA: 0x1423660 Offset: 0x1423660 VA: 0x1423660
	private void SetMapBgHeaderSp(UISprite sprite, int warId) { }

	// RVA: 0x1411714 Offset: 0x1411714 VA: 0x1411714
	public void UpdateEventInfo(Action callback) { }

	// RVA: 0x1424C64 Offset: 0x1424C64 VA: 0x1424C64
	private void SetEventInfo(Action callback) { }

	// RVA: 0x1425F4C Offset: 0x1425F4C VA: 0x1425F4C
	private TitleInfoControl.EventEndTimeInfo CreateEventEndTimeInfo(EventEntity eventEnt, bool isShopClosed, long endTime) { }

	// RVA: 0x142601C Offset: 0x142601C VA: 0x142601C
	private int GetMissionClearCount(EventMissionEntity[] eventMissionList, bool isDailyMission) { }

	// RVA: 0x1426278 Offset: 0x1426278 VA: 0x1426278
	public void ForceDispRaidBoss() { }

	// RVA: 0x1426440 Offset: 0x1426440 VA: 0x1426440
	private void CheckDispBossStatus(bool isCheckTutorial) { }

	// RVA: 0x1426F90 Offset: 0x1426F90 VA: 0x1426F90
	public bool IsBossGridActive() { }

	// RVA: 0x14244A4 Offset: 0x14244A4 VA: 0x14244A4
	private void SetRewardEventTitle(float sizeX) { }

	// RVA: 0x14271C0 Offset: 0x14271C0 VA: 0x14271C0
	public void setDispHeader(bool isDisp) { }

	// RVA: 0x1425810 Offset: 0x1425810 VA: 0x1425810
	private void DispEventInfo(int eventId, bool hasReward = False, Action evetUICallback) { }

	// RVA: 0x1428430 Offset: 0x1428430 VA: 0x1428430
	private void SetupEventInfo(int eventId, bool hasReward, bool isOnMap, bool isActive, Action callback) { }

	// RVA: 0x142905C Offset: 0x142905C VA: 0x142905C
	private void SetupRaceRank(int eventId) { }

	// RVA: 0x1429720 Offset: 0x1429720 VA: 0x1429720
	private bool IsRaceMap() { }

	// RVA: 0x14299B8 Offset: 0x14299B8 VA: 0x14299B8
	private int GetOldHeaderId() { }

	// RVA: 0x1429DA0 Offset: 0x1429DA0 VA: 0x1429DA0
	private void SetupVsGauge(int eventId) { }

	// RVA: 0x142A068 Offset: 0x142A068 VA: 0x142A068
	private void SetupVsGauge_call(int eventId) { }

	// RVA: 0x142ACD8 Offset: 0x142ACD8 VA: 0x142ACD8
	private void vsGaugeFrameIn(int eventId) { }

	// RVA: 0x140FA00 Offset: 0x140FA00 VA: 0x140FA00
	public void vsGaugeEvent(int eventId) { }

	// RVA: 0x1427614 Offset: 0x1427614 VA: 0x1427614
	private void SetEventUIActive(bool isActive) { }

	[DebuggerHiddenAttribute] // RVA: 0xD35BB8 Offset: 0xD35BB8 VA: 0xD35BB8
	// RVA: 0x142ADF8 Offset: 0x142ADF8 VA: 0x142ADF8
	private IEnumerator MaskWait() { }

	// RVA: 0x142AE68 Offset: 0x142AE68 VA: 0x142AE68
	private void SetupEventRaid(EventDetailEntity eventDetailEntity) { }

	// RVA: 0x142B4B0 Offset: 0x142B4B0 VA: 0x142B4B0
	private void SetupJumbleRaid(int eventId, int raidCountMax) { }

	// RVA: 0x142C740 Offset: 0x142C740 VA: 0x142C740
	private void SetupNormalRaid(int eventId) { }

	// RVA: 0x140F144 Offset: 0x140F144 VA: 0x140F144
	public void PlayEventRaidDefeatedEffect(int eventId, bool isResetDamageAnimation, Action callback) { }

	// RVA: 0x142E588 Offset: 0x142E588 VA: 0x142E588
	private void UpdateEventRaidUi() { }

	// RVA: 0x142E154 Offset: 0x142E154 VA: 0x142E154
	private bool IsDeadRaidBossOnEventInfoGroups() { }

	// RVA: 0x142EB08 Offset: 0x142EB08 VA: 0x142EB08
	private bool SetJumbleRaidDamageAnimation(EventRaidEntity raidEntity, Action onClearCallback) { }

	// RVA: 0x142EEE0 Offset: 0x142EEE0 VA: 0x142EEE0
	private void CheckAllRaidBossClear(int eventId) { }

	// RVA: 0x1426A24 Offset: 0x1426A24 VA: 0x1426A24
	private bool IsRaidBossSpotOpen(int eventId, int raidDay) { }

	// RVA: 0x142DC14 Offset: 0x142DC14 VA: 0x142DC14
	private bool IsReprintLastWarRaid(int eventId) { }

	// RVA: 0x142DD3C Offset: 0x142DD3C VA: 0x142DD3C
	public void CheckEventRaidBossHpAnim(Action callback) { }

	// RVA: 0x142F21C Offset: 0x142F21C VA: 0x142F21C
	public void SetAdditionalCallbackForEventRaidBossAnim(Action callback) { }

	// RVA: 0x1427438 Offset: 0x1427438 VA: 0x1427438
	private void SetInfoTextDisp(int eventId) { }

	// RVA: 0x142F238 Offset: 0x142F238 VA: 0x142F238
	private void SetupSuperBoss(int eventId, EventDetailEntity eventDetailEntity) { }

	// RVA: 0x14301D4 Offset: 0x14301D4 VA: 0x14301D4
	private UserSuperBossEntity GetOldSuperBoss() { }

	// RVA: 0x140ED6C Offset: 0x140ED6C VA: 0x140ED6C
	public void CheckSuperBossHpAnim(Action callback) { }

	// RVA: 0x14302D4 Offset: 0x14302D4 VA: 0x14302D4
	public void SetAdditionalCallbackforBossAnim(Action callback) { }

	// RVA: 0x142F150 Offset: 0x142F150 VA: 0x142F150
	private void ExecAdditionalCallbackforBossAnim() { }

	// RVA: 0x1427348 Offset: 0x1427348 VA: 0x1427348
	public void CheckMissionNotifyPause() { }

	// RVA: 0x142F164 Offset: 0x142F164 VA: 0x142F164
	public void ClearMssionNotifyPause() { }

	// RVA: 0x140F874 Offset: 0x140F874 VA: 0x140F874
	public void CheckEventPointGroupReward(int eventId, Action callback) { }

	// RVA: 0x140FC4C Offset: 0x140FC4C VA: 0x140FC4C
	public void CheckEventPointGaugeAnim(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0x1423A74 Offset: 0x1423A74 VA: 0x1423A74
	private void DestroyEventInfo() { }

	// RVA: 0x1414E0C Offset: 0x1414E0C VA: 0x1414E0C
	public void InitEventAlphaAnim() { }

	// RVA: 0x142105C Offset: 0x142105C VA: 0x142105C
	private void UpdateEventAlphaAnim() { }

	// RVA: 0x143048C Offset: 0x143048C VA: 0x143048C
	public void OnClickEventBtn() { }

	// RVA: 0x1430B4C Offset: 0x1430B4C VA: 0x1430B4C
	public void CloseEventBannerWindow() { }

	// RVA: 0x14306A0 Offset: 0x14306A0 VA: 0x14306A0
	public static void OnClickEventBtn(int eventId) { }

	// RVA: 0x1430D6C Offset: 0x1430D6C VA: 0x1430D6C
	public static void OnClickShopBtn(int eventId) { }

	// RVA: 0x1430C98 Offset: 0x1430C98 VA: 0x1430C98
	public static bool IsEnableEventShopButton(EventEntity eventEnt, EventDetailEntity eventDetailEnt, long nowTime) { }

	// RVA: 0x14311EC Offset: 0x14311EC VA: 0x14311EC
	public static bool IsEnableEventShopButton(EventDetailEntity eventDetailEnt) { }

	// RVA: 0x1428E30 Offset: 0x1428E30 VA: 0x1428E30
	public void SetEventBtnCollider(bool isEnabled) { }

	// RVA: 0x1431308 Offset: 0x1431308 VA: 0x1431308
	public void OnClickEventAlphaAnimChangeBtn() { }

	// RVA: 0x1431338 Offset: 0x1431338 VA: 0x1431338
	public void OnClickEventItemAlphaAnimChangeBtn() { }

	// RVA: 0x1431368 Offset: 0x1431368 VA: 0x1431368
	public void OnPressEventAlphaAnimChangeBtn() { }

	// RVA: 0x14313C0 Offset: 0x14313C0 VA: 0x14313C0
	public void OnPressEventItemAlphaAnimChangeBtn() { }

	// RVA: 0x1431418 Offset: 0x1431418 VA: 0x1431418
	public void OnReleaseEventAlphaAnimChangeBtn() { }

	// RVA: 0x143145C Offset: 0x143145C VA: 0x143145C
	public void OnReleaseEventItemAlphaAnimChangeBtn() { }

	// RVA: 0x1426110 Offset: 0x1426110 VA: 0x1426110
	private void SetupEventBannerWindow(List<TitleInfoControl.EventEndTimeInfo> eventEndTimeInfoList) { }

	// RVA: 0x14314A0 Offset: 0x14314A0 VA: 0x14314A0
	public void SetupEventTowerEventRewardScene(int eventId) { }

	// RVA: 0x1431550 Offset: 0x1431550 VA: 0x1431550
	private void SetupEventTower(EventDetailEntity eventDetailEntity, bool isTerminal = True) { }

	// RVA: 0x143199C Offset: 0x143199C VA: 0x143199C
	public void InitEventTowerDisp(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0x1431C68 Offset: 0x1431C68 VA: 0x1431C68
	private void LoadEventTowerEffect(Action callback) { }

	// RVA: 0x1431D8C Offset: 0x1431D8C VA: 0x1431D8C
	private void LoadEventTowerEffectEnd(AssetData data) { }

	// RVA: 0x14318E8 Offset: 0x14318E8 VA: 0x14318E8
	private void EventTowerOpen(Action callback) { }

	// RVA: 0x140EBAC Offset: 0x140EBAC VA: 0x140EBAC
	public void EventTowerStart(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0x1431DBC Offset: 0x1431DBC VA: 0x1431DBC
	public void EventTowerRewardOpen(GameObject parent, Action callback) { }

	// RVA: 0x14320C0 Offset: 0x14320C0 VA: 0x14320C0
	public void EventConquestRewardOpen(GameObject parent, Action callback) { }

	// RVA: 0x14322D4 Offset: 0x14322D4 VA: 0x14322D4
	public void EventProductivityGrowthDialogOpen(GameObject parent, Action callback) { }

	// RVA: 0x1432508 Offset: 0x1432508 VA: 0x1432508
	public void EventHarvestGrowthDialogOpen(GameObject parent, Action callback) { }

	// RVA: 0x14326E8 Offset: 0x14326E8 VA: 0x14326E8
	public void EventHarvestCautionDialogOpen(GameObject parent, int questId, int questPhase, string message, CommonConfirmDialog.ClickDelegate callback) { }

	// RVA: 0x1432910 Offset: 0x1432910 VA: 0x1432910
	public void EventPointRewardOpen(BattleDropItem[] itemArray, EventDetailEntity eventDetail, Action onFinishedDialog, bool enableBackground, int beforePoint = 0) { }

	// RVA: 0x1433144 Offset: 0x1433144 VA: 0x1433144
	private static void createGroupRewardItemList(BattleDropItem[] item, int groupId, out List<BattleDropItem> groupRewardItemList) { }

	// RVA: 0x1433274 Offset: 0x1433274 VA: 0x1433274
	private void LoadEventDailyPointEffect(Action callback) { }

	// RVA: 0x1433398 Offset: 0x1433398 VA: 0x1433398
	private void LoadEventDailyPointEffectEnd(AssetData data) { }

	// RVA: 0x1411734 Offset: 0x1411734 VA: 0x1411734
	public void EventDailyPointOpen(GameObject parent, Action callback) { }

	// RVA: 0x1433488 Offset: 0x1433488 VA: 0x1433488
	public void SetupDailyPointItemDisp(EventDetailEntity eventDetailEntity, bool isTerminal = True) { }

	// RVA: 0x14247BC Offset: 0x14247BC VA: 0x14247BC
	public void SetupDailyPointItemDispEventRewardScene(int eventId) { }

	// RVA: 0x14333C8 Offset: 0x14333C8 VA: 0x14333C8
	public void PrepareDailyPointItemEffect(int recievePoint) { }

	// RVA: 0x140FB90 Offset: 0x140FB90 VA: 0x140FB90
	public void UpdateDailyPointWithEffect(Action finishEffectEvent) { }

	// RVA: 0x140FB88 Offset: 0x140FB88 VA: 0x140FB88
	public bool IsNeedPlayDailyPointEffect() { }

	// RVA: 0x1433878 Offset: 0x1433878 VA: 0x1433878
	private GameObject CreateEventTowerGaugeObject(AssetData asset, Component parent) { }

	// RVA: 0x1433960 Offset: 0x1433960 VA: 0x1433960
	private GameObject CreateEventInfoPointGaugeObject(GameObject parent) { }

	// RVA: 0x14339DC Offset: 0x14339DC VA: 0x14339DC
	private EventInfoPointGaugeControl CreateEventInfoPointGaugeControl(GameObject root) { }

	// RVA: 0x1433A5C Offset: 0x1433A5C VA: 0x1433A5C
	public void SetupEventPointGaugeDisp(EventDetailEntity eventDetailEntity, bool isActive = True) { }

	// RVA: 0x14303A8 Offset: 0x14303A8 VA: 0x14303A8
	public void CheckEventPointGaugeEffect(EventDetailEntity eventDetailEntity, bool isActive = True, Action callback) { }

	// RVA: 0x14248C8 Offset: 0x14248C8 VA: 0x14248C8
	public void SetupEventPointGaugeDispEventRewardScene(int eventId) { }

	// RVA: 0x1433B30 Offset: 0x1433B30 VA: 0x1433B30
	private void LoadWarBoardTitleEffect(Action callback) { }

	// RVA: 0x1433C54 Offset: 0x1433C54 VA: 0x1433C54
	private void LoadWarBoardTitleEffectEnd(AssetData data) { }

	// RVA: 0x1433C84 Offset: 0x1433C84 VA: 0x1433C84
	public void WarBoardTitleEffectOpen(int questId, int phase, Action callbackDecide, Action callbackCancel) { }

	// RVA: 0x14246B0 Offset: 0x14246B0 VA: 0x14246B0
	public void SetupSideItemDispEventRewardScene(int eventId) { }

	// RVA: 0x1433F60 Offset: 0x1433F60 VA: 0x1433F60
	public void SetupSideItemDisp(EventDetailEntity eventDetailEntity, bool isTerminal = True) { }

	// RVA: 0x1426EB8 Offset: 0x1426EB8 VA: 0x1426EB8
	private TitleInfoControl.SideItemKind getSideItemKind(EventDetailEntity eventDetailEntity) { }

	// RVA: 0x143436C Offset: 0x143436C VA: 0x143436C
	public void ReSetupEventFactoryEventRewardScene(int eventId) { }

	// RVA: 0x1434448 Offset: 0x1434448 VA: 0x1434448
	public void SetupEventFactoryEventRewardScene(int eventId) { }

	// RVA: 0x14344F8 Offset: 0x14344F8 VA: 0x14344F8
	private void SetupEventFactory(EventDetailEntity eventDetailEntity, bool isTerminal = True) { }

	// RVA: 0x1434810 Offset: 0x1434810 VA: 0x1434810
	private void LoadEventFactoryEffect(Action callback) { }

	// RVA: 0x1434934 Offset: 0x1434934 VA: 0x1434934
	private void LoadEventFactoryEffectEnd(AssetData data) { }

	// RVA: 0x1434964 Offset: 0x1434964 VA: 0x1434964
	private void EventFactoryOpen() { }

	// RVA: 0x1434A08 Offset: 0x1434A08 VA: 0x1434A08
	public void EventFactoryLvUpEffect(ShopEntity shopEntity, int buyCount, Action callback) { }

	// RVA: 0x1434AFC Offset: 0x1434AFC VA: 0x1434AFC
	private void SetupEventTimeStatus(EventDetailEntity eventDetailEntity) { }

	// RVA: 0x1434C40 Offset: 0x1434C40 VA: 0x1434C40
	private bool IsActiveEventTimeStatus(EventDetailEntity eventDetailEntity) { }

	// RVA: 0x1434DCC Offset: 0x1434DCC VA: 0x1434DCC
	private void SetupEventSubmarineStatusDisp(EventDetailEntity eventDetailEntity) { }

	// RVA: 0x140FD70 Offset: 0x140FD70 VA: 0x140FD70
	public void CheckEventSubmarineStatusAnim(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0x1435134 Offset: 0x1435134 VA: 0x1435134
	public void UpdateEventSubmarineItemDisp() { }

	// RVA: 0x1435288 Offset: 0x1435288 VA: 0x1435288
	public void CheckEventPointReward(EventDetailEntity eventDetailEntity, Action endAct, int beforePoint = 0) { }

	// RVA: 0x14276DC Offset: 0x14276DC VA: 0x14276DC
	public void SetUpEventUIDisp(int eventId, bool isMap = False, bool isEventReward = False, Action callback) { }

	// RVA: 0x1435604 Offset: 0x1435604 VA: 0x1435604
	private void CreateEventUI(int eventId, EventUiEntity[] eventUIEntityList, bool isMap, bool isEventReward, bool isCaldea, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD35BC8 Offset: 0xD35BC8 VA: 0xD35BC8
	// RVA: 0x1435800 Offset: 0x1435800 VA: 0x1435800
	private IEnumerator LoadEventUI(int eid, GameObject prefab, EventUiEntity[] eventUIEntityList, bool isMap, bool isEventReward, bool isCaldea, Action callback) { }

	// RVA: 0x1435400 Offset: 0x1435400 VA: 0x1435400
	private void OnEventUICreate(TitleInfoEventUIComponent eventUIObj, int eventId) { }

	// RVA: 0x1435A5C Offset: 0x1435A5C VA: 0x1435A5C
	public void ReinitializeEventUI(int eventId) { }

	// RVA: 0x1435B90 Offset: 0x1435B90 VA: 0x1435B90
	public void SetEventUIValue(EventInfoUIBase.ValueType valType, object value, EventInfoUIBase.SetType setType) { }

	// RVA: 0x1435CEC Offset: 0x1435CEC VA: 0x1435CEC
	public void RedisplayEventUI() { }

	// RVA: 0x1435E30 Offset: 0x1435E30 VA: 0x1435E30
	public void StartEventUIAnimation(EventInfoUIBase.PlayType type, Action callback) { }

	// RVA: 0x1435948 Offset: 0x1435948 VA: 0x1435948
	public void DispEventUIForSpot(int spotId) { }

	// RVA: 0x1435F50 Offset: 0x1435F50 VA: 0x1435F50
	public bool IsDispEventUIForSpot(int spotId) { }

	// RVA: 0x140F0A8 Offset: 0x140F0A8 VA: 0x140F0A8
	public void PlayEventTimeStateAnime() { }

	// RVA: 0x1422C94 Offset: 0x1422C94 VA: 0x1422C94
	public void SetHelpBtn(bool isShow) { }

	// RVA: 0x1436160 Offset: 0x1436160 VA: 0x1436160
	public void SetHelpBtnPos(Vector3 localPosition) { }

	// RVA: 0x1436244 Offset: 0x1436244 VA: 0x1436244
	public void SetHelpBtnColliderEnable(bool isEnable) { }

	// RVA: 0x143632C Offset: 0x143632C VA: 0x143632C
	public void OnClickHelpBtn() { }

	// RVA: 0x140D4F8 Offset: 0x140D4F8 VA: 0x140D4F8
	public bool FrameIn(bool isForce = False) { }

	// RVA: 0x140D91C Offset: 0x140D91C VA: 0x140D91C
	public bool FrameOut(bool isForce = False) { }

	// RVA: 0x1436520 Offset: 0x1436520 VA: 0x1436520
	private bool SlideFrame(bool isFrameIn, bool isForce = False) { }

	// RVA: 0x1429BCC Offset: 0x1429BCC VA: 0x1429BCC
	public void SetTouchEnable(bool isEnable) { }

	// RVA: 0x1410244 Offset: 0x1410244 VA: 0x1410244
	public bool IsTouchEnable() { }

	// RVA: 0x14210EC Offset: 0x14210EC VA: 0x14210EC
	private void InfoTextUpdate() { }

	// RVA: 0x14317B8 Offset: 0x14317B8 VA: 0x14317B8
	public void SetEventItemInfo(bool isDisp) { }

	// RVA: 0x1429F24 Offset: 0x1429F24 VA: 0x1429F24
	public void loadVSInfoAssetData(TitleInfoControl.assetLoadFinish callBack, int eventId) { }

	// RVA: 0x1428ED0 Offset: 0x1428ED0 VA: 0x1428ED0
	public void loadInfoAssetData(TitleInfoControl.assetLoadFinish callBack, int eventId) { }

	// RVA: 0x1436914 Offset: 0x1436914 VA: 0x1436914
	public void loadEventRaidAssetData(TitleInfoControl.assetLoadFinish callBack, int eventId, EventDetailEntity eventDetailEntity) { }

