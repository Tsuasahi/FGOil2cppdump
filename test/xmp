	private float HPsplitPoint; // 0xBC
	private int HPsplitNo; // 0xC0
	private Vector3 originPos; // 0xC4
	private Action animEndCall; // 0xD0
	private Action onClearCall; // 0xD8
	private GameObject splitHpEffect; // 0xE0
	private GameObject clearBossEffect; // 0xE8
	[CompilerGeneratedAttribute] // RVA: 0xC51F40 Offset: 0xC51F40 VA: 0xC51F40
	[DebuggerBrowsableAttribute] // RVA: 0xC51F40 Offset: 0xC51F40 VA: 0xC51F40
	private bool <IsShowClearEvent>k__BackingField; // 0xF0

	// Properties
	public bool IsShowClearEvent { get; set; }

	// Methods

	// RVA: 0x1260320 Offset: 0x1260320 VA: 0x1260320
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC84B4 Offset: 0xCC84B4 VA: 0xCC84B4
	// RVA: 0x1260328 Offset: 0x1260328 VA: 0x1260328
	public bool get_IsShowClearEvent() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC84C4 Offset: 0xCC84C4 VA: 0xCC84C4
	// RVA: 0x1260330 Offset: 0x1260330 VA: 0x1260330
	public void set_IsShowClearEvent(bool value) { }

	// RVA: 0x126033C Offset: 0x126033C VA: 0x126033C
	public void DisableCheckTutorial() { }

	// RVA: 0x1260344 Offset: 0x1260344 VA: 0x1260344 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x1260364 Offset: 0x1260364 VA: 0x1260364
	public void Setup(EventSuperBossEntity superBossEntity, UIAtlas termAtlas) { }

	// RVA: 0x1260FA4 Offset: 0x1260FA4 VA: 0x1260FA4
	public void OnDestroy() { }

	// RVA: 0x1260540 Offset: 0x1260540 VA: 0x1260540
	private void Destroy() { }

	// RVA: 0x1260FA8 Offset: 0x1260FA8 VA: 0x1260FA8 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1260FAC Offset: 0x1260FAC VA: 0x1260FAC Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x1260FB4 Offset: 0x1260FB4 VA: 0x1260FB4
	private void SetBossIcon(string spName) { }

	// RVA: 0x1260544 Offset: 0x1260544 VA: 0x1260544
	private void SetSpriteFromEventUI(UISprite sprite, string prefix, int gaugeId) { }

	// RVA: 0x1260660 Offset: 0x1260660 VA: 0x1260660
	public void SetDisp() { }

	// RVA: 0x1261158 Offset: 0x1261158 VA: 0x1261158
	public void SetDamageAnimation(long damage, Action onClearCallback) { }

	// RVA: 0x12617FC Offset: 0x12617FC VA: 0x12617FC
	public void StartDamageAnimation(AssetData mapAssetData, Action callBack) { }

	// RVA: 0x1261A8C Offset: 0x1261A8C VA: 0x1261A8C
	private void PlayFrameInBoss() { }

	// RVA: 0x1261C58 Offset: 0x1261C58 VA: 0x1261C58
	private void PlayHpNameAlpha() { }

	// RVA: 0x1261D88 Offset: 0x1261D88 VA: 0x1261D88
	private void PlayHpCut() { }

	// RVA: 0x12620BC Offset: 0x12620BC VA: 0x12620BC
	private void PlayHpDeletion() { }

	// RVA: 0x126239C Offset: 0x126239C VA: 0x126239C
	private void SetClearAlpha() { }

	// RVA: 0x1262420 Offset: 0x1262420 VA: 0x1262420
	private void DoClearCallback() { }

	// RVA: 0x126253C Offset: 0x126253C VA: 0x126253C
	private void OnEndAnimation() { }

	// RVA: 0x126113C Offset: 0x126113C VA: 0x126113C
	private float ConvertHpToRate(long hp, long maxHp) { }

	// RVA: 0x12610A4 Offset: 0x12610A4 VA: 0x12610A4
	private float GetHpSplitPositionX(long splitHp, long maxHp) { }

	// RVA: 0x1261EF8 Offset: 0x1261EF8 VA: 0x1261EF8
	private void PlaySeByEventId(int eventId, bool isPlay) { }

	// RVA: 0x126256C Offset: 0x126256C VA: 0x126256C
	public bool IsAlive() { }

	// RVA: 0x126259C Offset: 0x126259C VA: 0x126259C
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42154 Offset: 0xC42154 VA: 0xC42154
private sealed class TitleInfoSuperBossComponent.<PlayHpCut>c__AnonStorey0 // TypeDefIndex: 5886
{
	// Fields
	internal EasingObject eo; // 0x10
	internal TitleInfoSuperBossComponent $this; // 0x18

	// Methods

	// RVA: 0x1261EF0 Offset: 0x1261EF0 VA: 0x1261EF0
	public void .ctor() { }

	// RVA: 0x1262720 Offset: 0x1262720 VA: 0x1262720
	internal void <>m__0() { }
}

// Namespace: 
public class TitleInfoSuperBossStatusComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5887
{
	// Fields
	private static readonly string SUPERBOSS_ICON_SPNAME_PREFIX_BATTLE; // 0x0
	private static readonly string SUPERBOSS_ICON_SPNAME_PREFIX_WIN; // 0x8
	private static readonly Vector3 FRAME_ANIM_OUT_POS_DELTA; // 0x10
	private static readonly float FRAME_ANIM_DURATION; // 0x1C
	private static readonly float ENTRY_ANIM_DELAY; // 0x20
	[SerializeField] // RVA: 0xC51F7C Offset: 0xC51F7C VA: 0xC51F7C
	private UISprite superBossIconSp; // 0x20
	[SerializeField] // RVA: 0xC51F8C Offset: 0xC51F8C VA: 0xC51F8C
	private Vector3 bossGridPosition; // 0x28
	[SerializeField] // RVA: 0xC51F9C Offset: 0xC51F9C VA: 0xC51F9C
	private int backBtnDepth; // 0x34
	[SerializeField] // RVA: 0xC51FAC Offset: 0xC51FAC VA: 0xC51FAC
	private BoxCollider boxCollider; // 0x38
	private EventSuperBossEntity superBossEntity; // 0x40
	private Vector3 inPos; // 0x48
	private Vector3 outPos; // 0x54
	private Action clickCallBack; // 0x60
	private float offsetY; // 0x68

	// Methods

	// RVA: 0x1262CC4 Offset: 0x1262CC4 VA: 0x1262CC4
	public void .ctor() { }

	// RVA: 0x1262CCC Offset: 0x1262CCC VA: 0x1262CCC Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x1262CD4 Offset: 0x1262CD4 VA: 0x1262CD4
	public void Setup(EventSuperBossEntity eventSuperBossEntity, float offsetY = 0) { }

	// RVA: 0x1262DE0 Offset: 0x1262DE0 VA: 0x1262DE0
	public void OnDestroy() { }

	// RVA: 0x1262DDC Offset: 0x1262DDC VA: 0x1262DDC
	private void Destroy() { }

	// RVA: 0x1262DE4 Offset: 0x1262DE4 VA: 0x1262DE4
	private void SetBossIcon(string spName) { }

	// RVA: 0x1262ED4 Offset: 0x1262ED4 VA: 0x1262ED4 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1263184 Offset: 0x1263184 VA: 0x1263184 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x126318C Offset: 0x126318C VA: 0x126318C
	public void onClick() { }

	// RVA: 0x1263230 Offset: 0x1263230 VA: 0x1263230
	public void SetClickCallBack(Action callback) { }

	// RVA: 0x1263238 Offset: 0x1263238 VA: 0x1263238
	public void SetEntryAnim() { }

	// RVA: 0x1263408 Offset: 0x1263408 VA: 0x1263408
	private void EntryAnim() { }

	// RVA: 0x12635D8 Offset: 0x12635D8 VA: 0x12635D8
	public void SetClearAnim() { }

	// RVA: 0x12636D0 Offset: 0x12636D0 VA: 0x12636D0
	public void StartClearAnim() { }

	// RVA: 0x12639E0 Offset: 0x12639E0 VA: 0x12639E0
	private void AnimFrameOutEnd() { }

	// RVA: 0x1263410 Offset: 0x1263410 VA: 0x1263410
	public void FrameIn(string callFinished) { }

	// RVA: 0x1263818 Offset: 0x1263818 VA: 0x1263818
	public void FrameOut(string callFinished) { }

	// RVA: 0x1263ABC Offset: 0x1263ABC VA: 0x1263ABC
	public UISprite GetIconSprite() { }

	// RVA: 0x1263AC4 Offset: 0x1263AC4 VA: 0x1263AC4
	public Vector3 GetBossGridPosition() { }

	// RVA: 0x1263AD0 Offset: 0x1263AD0 VA: 0x1263AD0
	public int GetBackBtnDepth() { }

	// RVA: 0x1263AD8 Offset: 0x1263AD8 VA: 0x1263AD8
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoWarBoardTitleComponent : MonoBehaviour // TypeDefIndex: 5888
{
	// Fields
	[SerializeField] // RVA: 0xC51FBC Offset: 0xC51FBC VA: 0xC51FBC
	protected UILabel titleLabel; // 0x18
	[SerializeField] // RVA: 0xC51FCC Offset: 0xC51FCC VA: 0xC51FCC
	protected UILabel messageLabel; // 0x20
	[SerializeField] // RVA: 0xC51FDC Offset: 0xC51FDC VA: 0xC51FDC
	protected ScriptLineMessage messageManager; // 0x28
	[SerializeField] // RVA: 0xC51FEC Offset: 0xC51FEC VA: 0xC51FEC
	protected UISprite typeSprite; // 0x30
	[SerializeField] // RVA: 0xC51FFC Offset: 0xC51FFC VA: 0xC51FFC
	protected UIPanel basePanel; // 0x38
	[SerializeField] // RVA: 0xC5200C Offset: 0xC5200C VA: 0xC5200C
	protected UIPanel base2Panel; // 0x40
	[SerializeField] // RVA: 0xC5201C Offset: 0xC5201C VA: 0xC5201C
	protected float buttonBlockTime; // 0x48
	[SerializeField] // RVA: 0xC5202C Offset: 0xC5202C VA: 0xC5202C
	protected float BgmFadeOutStartTime; // 0x4C
	[SerializeField] // RVA: 0xC5203C Offset: 0xC5203C VA: 0xC5203C
	protected float BgmFadeOutPlayTime; // 0x50
	[SerializeField] // RVA: 0xC5204C Offset: 0xC5204C VA: 0xC5204C
	protected float BgmPlayStartTime; // 0x54
	[SerializeField] // RVA: 0xC5205C Offset: 0xC5205C VA: 0xC5205C
	protected float TitleFadeOutPlayTime; // 0x58
	private Action callbackDecide; // 0x60
	private Action callbackCancel; // 0x68
	private bool isButtonEnable; // 0x70
	private string bgmName; // 0x78
	private ScreenTouchInformationComponent screenTouchInfo; // 0x80
	private CStateManager<TitleInfoWarBoardTitleComponent> mFSM; // 0x88
	private Animation mAnimation; // 0x90
	[SerializeField] // RVA: 0xC5206C Offset: 0xC5206C VA: 0xC5206C
	private GameObject particlePrefab; // 0x98
	protected GameObject particleObj; // 0xA0
	private Action mEndAct; // 0xA8

	// Methods

	// RVA: 0x1263BAC Offset: 0x1263BAC VA: 0x1263BAC
	public void .ctor() { }

	// RVA: 0x1263BC8 Offset: 0x1263BC8 VA: 0x1263BC8
	private void Awake() { }

	// RVA: 0x1263ED0 Offset: 0x1263ED0 VA: 0x1263ED0
	private void Update() { }

	// RVA: 0x12640C8 Offset: 0x12640C8 VA: 0x12640C8
	public void Setup(int stageId, Action callbackDecide, Action callbackCancel) { }

	// RVA: 0x1263F2C Offset: 0x1263F2C VA: 0x1263F2C
	protected void RefreshPanel() { }

	// RVA: 0x126478C Offset: 0x126478C VA: 0x126478C
	public void Play(Action end_act) { }

	// RVA: 0x1264920 Offset: 0x1264920 VA: 0x1264920
	public void FadeOutBGM() { }

	// RVA: 0x1264994 Offset: 0x1264994 VA: 0x1264994
	public void PlayBGM() { }

	// RVA: 0x1264A00 Offset: 0x1264A00 VA: 0x1264A00
	public TitleInfoWarBoardTitleComponent.STATE GetState() { }

	// RVA: 0x1263E60 Offset: 0x1263E60 VA: 0x1263E60
	public void SetState(TitleInfoWarBoardTitleComponent.STATE state) { }

	// RVA: 0x1264780 Offset: 0x1264780 VA: 0x1264780
	private void SetButtonEnable(bool isEnable) { }

	// RVA: 0x1264A60 Offset: 0x1264A60 VA: 0x1264A60
	public void OnClickDecideButton() { }

	// RVA: 0x1264B9C Offset: 0x1264B9C VA: 0x1264B9C
	public void OnClickCancelButton() { }

	// RVA: 0x1264CC8 Offset: 0x1264CC8 VA: 0x1264CC8
	private void OnEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC84D4 Offset: 0xCC84D4 VA: 0xCC84D4
	// RVA: 0x1264D50 Offset: 0x1264D50 VA: 0x1264D50
	private void <OnClickDecideButton>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC84E4 Offset: 0xCC84E4 VA: 0xCC84E4
	// RVA: 0x1264DE8 Offset: 0x1264DE8 VA: 0x1264DE8
	private void <OnClickCancelButton>m__1() { }
}

// Namespace: 
public enum TitleInfoWarBoardTitleComponent.STATE // TypeDefIndex: 5889
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoWarBoardTitleComponent.STATE NONE = 0;
	public const TitleInfoWarBoardTitleComponent.STATE PLAY = 1;
	public const TitleInfoWarBoardTitleComponent.STATE TOUCH_WAIT = 2;
	public const TitleInfoWarBoardTitleComponent.STATE SIZEOF = 3;
}

// Namespace: 
private class TitleInfoWarBoardTitleComponent.StateNone : IState<TitleInfoWarBoardTitleComponent> // TypeDefIndex: 5890
{
	// Methods

	// RVA: 0x1263E48 Offset: 0x1263E48 VA: 0x1263E48
	public void .ctor() { }

	// RVA: 0x1264EB0 Offset: 0x1264EB0 VA: 0x1264EB0 Slot: 4
	public void begin(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x1264EB4 Offset: 0x1264EB4 VA: 0x1264EB4 Slot: 5
	public void update(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x1264EB8 Offset: 0x1264EB8 VA: 0x1264EB8 Slot: 6
	public void end(TitleInfoWarBoardTitleComponent that) { }
}

// Namespace: 
private class TitleInfoWarBoardTitleComponent.StatePlay : IState<TitleInfoWarBoardTitleComponent> // TypeDefIndex: 5891
{
	// Methods

	// RVA: 0x1263E50 Offset: 0x1263E50 VA: 0x1263E50
	public void .ctor() { }

	// RVA: 0x1264EBC Offset: 0x1264EBC VA: 0x1264EBC Slot: 4
	public void begin(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x1265018 Offset: 0x1265018 VA: 0x1265018 Slot: 5
	public void update(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x1265134 Offset: 0x1265134 VA: 0x1265134 Slot: 6
	public void end(TitleInfoWarBoardTitleComponent that) { }
}

// Namespace: 
private class TitleInfoWarBoardTitleComponent.StateTouchWait : IState<TitleInfoWarBoardTitleComponent> // TypeDefIndex: 5892
{
	// Methods

	// RVA: 0x1263E58 Offset: 0x1263E58 VA: 0x1263E58
	public void .ctor() { }

	// RVA: 0x1265138 Offset: 0x1265138 VA: 0x1265138 Slot: 4
	public void begin(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x12651B4 Offset: 0x12651B4 VA: 0x12651B4 Slot: 5
	public void update(TitleInfoWarBoardTitleComponent that) { }

	// RVA: 0x12651B8 Offset: 0x12651B8 VA: 0x12651B8 Slot: 6
	public void end(TitleInfoWarBoardTitleComponent that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42164 Offset: 0xC42164 VA: 0xC42164
private sealed class TitleInfoWarBoardTitleComponent.<Setup>c__AnonStorey0 // TypeDefIndex: 5893
{
	// Fields
	internal Action callbackDecide; // 0x10

	// Methods

	// RVA: 0x1264778 Offset: 0x1264778 VA: 0x1264778
	public void .ctor() { }

	// RVA: 0x1264E80 Offset: 0x1264E80 VA: 0x1264E80
	internal void <>m__0() { }
}

// Namespace: 
public class TitleInfoControl : MonoBehaviour // TypeDefIndex: 5894
{
	// Fields
	public static readonly float FRAME_IN_OUT_MV_SPD_TIME; // 0x0
	public static readonly float BACK_BTN_MV_SPD_TIME; // 0x4
	public static readonly float BASE_Y; // 0x8
	public static readonly float FRAME_OUT_POS_Y; // 0xC
	public static readonly float PARTICLE_Y; // 0x10
	public static readonly float BACK_BTN_SP_BASE_X; // 0x14
	public static readonly float BACK_SELECT_BTN_SP_BASE_X; // 0x18
	public static readonly float BACK_SELECT_BTN_SP_BASE_Y; // 0x1C
	public static readonly float BACK_BTN_SP_COMBINE_MENU_Y; // 0x20
	public static readonly float BACK_BTN_SP_TERMINAL_X; // 0x24
	public static readonly int TIME_UPDATE_ITVL_SEC; // 0x28
	public static readonly float EVENT_ALPHA_ANIM_SPD_RATE; // 0x2C
	public static readonly float EVENT_ALPHA_ANIM_TIME_INTERVAL; // 0x30
	public static readonly float BASE_EVENTITEM_POTISION_X; // 0x34
	public static readonly float HEADER_ALPHA_ANIM_SPD_RATE; // 0x38
	public static readonly int EVENT_ITEM_IMAGE_ON_NUM; // 0x3C
	public static readonly int EVENT_ITEM_IMAGE_OFF_NUM; // 0x40
	public static readonly float EVENT_SUPERBOSS_OFFSET_Y; // 0x44
	public static readonly float EVENT_TIME_STATUS_SUPERBOSS_OFFSET_Y; // 0x48
	private static readonly string EVENT_BTN_SPNAME; // 0x50
	private const int EVENT_BTN_NOTICE_NUMBER_X = 59;
	private const int EVENT_BTN_NOTICE_NUMBER_Y = 16;
	private const float EVENT_BTN_NOTICE_NUMBER_SCALE = 0.75;
	private static readonly string MAP_HEADER_BG_SPNAME_PREFIX; // 0x58
	private static readonly string MAP_HEADER_BG_DEFAULT_SPNAME; // 0x60
	private static readonly string HEADER_TITLE_NAME_ON_BANNER; // 0x68
	private static readonly string EVENT_TOWER_EFFECT_PATH; // 0x70
	private static readonly string EVENT_TOWER_EFFECT_PREFAB; // 0x78
	private static readonly string EVENT_FACTORY_EFFECT_PATH; // 0x80
	private static readonly string EVENT_DAILY_POINT_EFFECT_PATH; // 0x88
	private static readonly string WARBOARD_TITLE_EFFECT_PATH; // 0x90
	private static readonly string TERMINAL_INFO_PATH; // 0x98
	private static readonly string TITLE_INFO_EVENT_RAID_BOSS_PREFAB; // 0xA0
	private static readonly string TITLE_INFO_EVENT_RAID_BOSS_STATUS; // 0xA8
	private static readonly string TITLE_INFO_EVENT_RAID_BOSS_STATUS_JUMBLE; // 0xB0
	private static readonly string TITLE_INFO_EVENT_SUPER_BOSS_PREFAB; // 0xB8
	private static readonly string TITLE_INFO_EVENT_SUPER_BOSS_STATUS; // 0xC0
	private static readonly string EVENT_RAID_PATH; // 0xC8
	private static readonly string EVENT_RAID_BOSS_UI_PREFAB; // 0xD0
	private static readonly string EVENT_RAID_BOSS_UI_STATUS; // 0xD8
	private static readonly string EVENT_RAID_BOSS_UI_STATUS_JUMBLE; // 0xE0
	private static readonly string EVENT_SUPER_BOSS_UI_PREFAB; // 0xE8
	private static readonly string EVENT_SUPER_BOSS_UI_STATUS; // 0xF0
	private static readonly string WARBOARD_TITLE_PREFAB_NAME; // 0xF8
	public UISprite backBtnBgSprite; // 0x18
	public UISprite backBtnSprite; // 0x20
	public UIButton backBtnButton; // 0x28
	public GameObject backBtn; // 0x30
	public UISprite backSelectBtnBgSprite; // 0x38
	public UISprite backSelectBtnSprite; // 0x40
	[SerializeField] // RVA: 0xC5207C Offset: 0xC5207C VA: 0xC5207C
	private GameObject backStoryBtn; // 0x48
	public UISprite titleImg; // 0x50
	public UISkinSprite headerBgImg; // 0x58
	[SerializeField] // RVA: 0xC5208C Offset: 0xC5208C VA: 0xC5208C
	private BoxCollider mDebugBtn; // 0x60
	[SerializeField] // RVA: 0xC5209C Offset: 0xC5209C VA: 0xC5209C
	private string[] particlePrefabNames; // 0x68
	protected GameObject particleObj; // 0x70
	protected string particleAssetName; // 0x78
	public static Dictionary<int, long> preBoxGachaTotalCount; // 0x100
	[SerializeField] // RVA: 0xC520AC Offset: 0xC520AC VA: 0xC520AC
	protected int particlePanelDepth; // 0x80
	[SerializeField] // RVA: 0xC520BC Offset: 0xC520BC VA: 0xC520BC
	private UISprite mEventBgSp; // 0x88
	[SerializeField] // RVA: 0xC520CC Offset: 0xC520CC VA: 0xC520CC
	private ExUITexture mEventBgTexture; // 0x90
	[SerializeField] // RVA: 0xC520DC Offset: 0xC520DC VA: 0xC520DC
	private GameObject mEventRoot; // 0x98
	[SerializeField] // RVA: 0xC520EC Offset: 0xC520EC VA: 0xC520EC
	private UISprite mEventItemEventBtn; // 0xA0
	[SerializeField] // RVA: 0xC520FC Offset: 0xC520FC VA: 0xC520FC
	private UIWidget mEventAlphaAnimRoot; // 0xA8
	[SerializeField] // RVA: 0xC5210C Offset: 0xC5210C VA: 0xC5210C
	private GameObject alphaAnimChangeBtn; // 0xB0
	[SerializeField] // RVA: 0xC5211C Offset: 0xC5211C VA: 0xC5211C
	private UIWidget mEventAlphaAnimRoot2; // 0xB8
	[SerializeField] // RVA: 0xC5212C Offset: 0xC5212C VA: 0xC5212C
	private GameObject alphaAnimChangeBtn2; // 0xC0
	[SerializeField] // RVA: 0xC5213C Offset: 0xC5213C VA: 0xC5213C
	private GameObject defeatCntAlphaAnimChangeBtn; // 0xC8
	[SerializeField] // RVA: 0xC5214C Offset: 0xC5214C VA: 0xC5214C
	private GameObject reprintLastWarRaidRoot; // 0xD0
	[SerializeField] // RVA: 0xC5215C Offset: 0xC5215C VA: 0xC5215C
	private GameObject mBlockMaskPrefab; // 0xD8
	[SerializeField] // RVA: 0xC5216C Offset: 0xC5216C VA: 0xC5216C
	private Transform mBlockMaskParent; // 0xE0
	[SerializeField] // RVA: 0xC5217C Offset: 0xC5217C VA: 0xC5217C
	private GameObject mTitleInfoEventItemPrefab; // 0xE8
	[SerializeField] // RVA: 0xC5218C Offset: 0xC5218C VA: 0xC5218C
	private GameObject mTitleInfoEventRaidBossOldPrefab; // 0xF0
	[SerializeField] // RVA: 0xC5219C Offset: 0xC5219C VA: 0xC5219C
	private GameObject mEventBannerWindowPrefab; // 0xF8
	[SerializeField] // RVA: 0xC521AC Offset: 0xC521AC VA: 0xC521AC
	private UIGrid mBossStatusGrid; // 0x100
	[SerializeField] // RVA: 0xC521BC Offset: 0xC521BC VA: 0xC521BC
	private UIGrid mTimeStatusGrid; // 0x108
	private List<TitleInfoEventRaidStatusComponent> mRaidStatusList; // 0x110
	private List<TitleInfoSuperBossStatusComponent> mSuperBossStatusList; // 0x118
	private List<EventSuperBossEntity> mCurrentBossesList; // 0x120
	private TitleInfoEventItemControl eventRaidUIControl; // 0x128
	private TitleInfoEventItemControl eventItemControl; // 0x130
	private TitleInfoEventInfoComponent mEventItemInfo; // 0x138
	[SerializeField] // RVA: 0xC521CC Offset: 0xC521CC VA: 0xC521CC
	private NoticeNumberComponent noticeNumberPrefab; // 0x140
	private NoticeNumberComponent mNoticeNumber; // 0x148
	[SerializeField] // RVA: 0xC521DC Offset: 0xC521DC VA: 0xC521DC
	private UIAtlas commonAtlas; // 0x150
	[SerializeField] // RVA: 0xC521EC Offset: 0xC521EC VA: 0xC521EC
	private UIAtlas terminalAtlas; // 0x158
	[SerializeField] // RVA: 0xC521FC Offset: 0xC521FC VA: 0xC521FC
	private UIAtlas titleNameAtlas; // 0x160
	[SerializeField] // RVA: 0xC5220C Offset: 0xC5220C VA: 0xC5220C
	private UIAtlas titleNameMyRoomAtlas; // 0x168
	private GameObject mBlockMask; // 0x170
	private bool mIsMovingFrameInOut; // 0x178
	private string requestedNewHeader; // 0x180
	private bool isDispSelectBack; // 0x188
	private bool isBackBtnSpCombineMenu; // 0x189
	private int mBossAnimIdx; // 0x18C
	private Action mAdditionalCallbackOnBossAnim; // 0x190
	private bool mIsPlayedJumbleRaidDefeatedEffect; // 0x198
	private AssetData TitleInfoAssetData; // 0x1A0
	private TitleInfoEventBulletinBoardComponent mBulletinBoard; // 0x1A8
	private AssetData EventRaidAssetData; // 0x1B0
	[SerializeField] // RVA: 0xC5221C Offset: 0xC5221C VA: 0xC5221C
	private GameObject eventUIRoot; // 0x1B8
	[SerializeField] // RVA: 0xC5222C Offset: 0xC5222C VA: 0xC5222C
	private Component towerRoot; // 0x1C0
	private GameObject eventPointGaugeObj; // 0x1C8
	private EventInfoPointGaugeControl eventPointGaugeCtl; // 0x1D0
	private AssetData effectAssetData; // 0x1D8
	private TitleInfoEventLeagueVsComponent leagueVsGauge; // 0x1E0
	private List<TitleInfoEventLeagueVsStatusComponent> leagueVsStatusList; // 0x1E8
	private TitleInfoEventRaceRankComponent raceRankUI; // 0x1F0
	private TitleInfoEventRaceRoundComponent raceRoundUI; // 0x1F8
	private TitleInfoEventTower mTitleInfoEventTower; // 0x200
	private TitleInfoEventTowerReward mTitleInfoEventTowerReward; // 0x208
	private bool mIsEventTowerEffectAssetDataLoad; // 0x210
	private AssetData mEventTowerEffectAssetData; // 0x218
	private Action mEventTowerEffectAssetCallback; // 0x220
	private bool mIsEventTowerOpen; // 0x228
	private TitleInfoEventDailyPoint mTitleInfoEventDailyPoint; // 0x230
	private bool mIsEventDailyPointEffectAssetDataLoad; // 0x238
	private AssetData mEventDailyPointEffectAssetData; // 0x240
	private Action mEventDailyPointEffectAssetCallback; // 0x248
	private bool mIsEventDailyPointOpen; // 0x250
	private TitleInfoEventDailyPointItemComponent dailyPointItemUI; // 0x258
	private bool needPlayDailyPointItemEffect; // 0x260
	private EventInfoConquestGetComponent eventInfoConquestGetComponent; // 0x268
	private EventInfoProductivityGrowthDialog eventInfoProductivityGrowthDialog; // 0x270
	private EventInfoHarvestGrowthDialog eventInfoHarvestGrowthDialog; // 0x278
	private EventInfoHarvestCautionDialog eventInfoHarvestCautionDialog; // 0x280
	private TitleInfoWarBoardTitleComponent mTitleInfoWarBoardTitle; // 0x288
	private bool mIsWarBoardTitleEffectAssetDataLoad; // 0x290
	private AssetData mWarBoardTitleEffectAssetData; // 0x298
	private Action mWarBoardTitleEffectAssetCallback; // 0x2A0
	private bool mIsWarBoardTitleEffectOpen; // 0x2A8
	private EventPointRewardDialogControl eventPointRewardDialogControl; // 0x2B0
	private TitleInfoEventSideItemComponent sideItemUI; // 0x2B8
	private TitleInfoEventFactory mTitleInfoEventFactory; // 0x2C0
	private TitleInfoEventTimeStatus mTitleInfoEventTimeStatus; // 0x2C8
	private bool mIsEventFactoryEffectAssetDataLoad; // 0x2D0
	private AssetData mEventFactoryEffectAssetData; // 0x2D8
	private Action mEventFactoryEffectAssetCallback; // 0x2E0
	private bool mIsEventFactoryOpen; // 0x2E8
	private TitleInfoEventSubmarineStatusComponent eventSubmarineStatusComponent; // 0x2F0
	private List<TitleInfoControl.EventEndTimeInfo> mEventEndTimeInfs; // 0x2F8
	private int mDoneSetEventId; // 0x300
	private bool mIsActiveEventInfo; // 0x304
	private int mWarId; // 0x308
	private int mWarEventId; // 0x30C
	private int mShopEventId; // 0x310
	private int mOnReleaseEventAlphaAnimFrameCount; // 0x314
	private int mOnReleaseEventAlphaAnimFrameCount2; // 0x318
	private EventItemDisplayEntity.ScreenFlag mEvScreenKind; // 0x31C
	private EventBannerWindow mEventBannerWindow; // 0x320
	[SerializeField] // RVA: 0xC5223C Offset: 0xC5223C VA: 0xC5223C
	private GameObject helpBtn; // 0x328
	private TitleInfoControl.TitleKind nowTitleKind; // 0x330
	protected PlayMakerFSM activeSceneFSM; // 0x338
	private TitleInfoControl.SuperBossAnimeState superBossAnimeState; // 0x340
	private EventDetailEntity activeEventDetailEnt; // 0x348
	[SerializeField] // RVA: 0xC5224C Offset: 0xC5224C VA: 0xC5224C
	private UILabel infoText; // 0x350
	private long infoTextDispOldTime; // 0x358
	private static readonly Dictionary<TitleInfoControl.TitleKind, string> titleNameList; // 0x108
	private static readonly Dictionary<TitleInfoControl.TitleKind, int> titleDepthList; // 0x110
	protected static readonly TitleInfoControl.TitleKind[] _helpEnableKind; // 0x118
	private static readonly Dictionary<TitleInfoControl.TitleKind, TutorialFlag.ImageId> _helpDispImageList; // 0x120
	private static readonly Dictionary<int, TitleInfoControl.TitleKind> terminalTitleList; // 0x128
	[CompilerGeneratedAttribute] // RVA: 0xC5225C Offset: 0xC5225C VA: 0xC5225C
	private static Predicate<TitleInfoControl.EventEndTimeInfo> <>f__am$cache0; // 0x130
	[CompilerGeneratedAttribute] // RVA: 0xC5226C Offset: 0xC5226C VA: 0xC5226C
	private static Comparison<TitleInfoControl.EventEndTimeInfo> <>f__mg$cache0; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xC5227C Offset: 0xC5227C VA: 0xC5227C
	private static Comparison<EventRaidEntity> <>f__am$cache1; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xC5228C Offset: 0xC5228C VA: 0xC5228C
	private static Func<DataEntityBase, EventRaidEntity> <>f__am$cache2; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xC5229C Offset: 0xC5229C VA: 0xC5229C
	private static Func<TitleInfoEventInfoComponent, TitleInfoEventRaidBossComponent> <>f__am$cache3; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xC522AC Offset: 0xC522AC VA: 0xC522AC
	private static Func<TitleInfoEventInfoComponent, TitleInfoEventRaidBossComponent> <>f__am$cache4; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xC522BC Offset: 0xC522BC VA: 0xC522BC
	private static Func<TitleInfoEventInfoComponent, TitleInfoEventRaidBossComponent> <>f__am$cache5; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xC522CC Offset: 0xC522CC VA: 0xC522CC
	private static Action <>f__am$cache6; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xC522DC Offset: 0xC522DC VA: 0xC522DC
	private static Action <>f__am$cache7; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xC522EC Offset: 0xC522EC VA: 0xC522EC
	private static Action <>f__am$cache8; // 0x178
	[CompilerGeneratedAttribute] // RVA: 0xC522FC Offset: 0xC522FC VA: 0xC522FC
	private static Action <>f__am$cache9; // 0x180
	[CompilerGeneratedAttribute] // RVA: 0xC5230C Offset: 0xC5230C VA: 0xC5230C
	private static Action <>f__am$cacheA; // 0x188

	// Properties
	public static Vector3 BOSS_GRID_DEFAULT_POS { get; }
	public static Vector3 BOSS_GRID_LIMIT_POS { get; }
	public static Vector3 BOSS_GRID_JUMBLE_POS { get; }
	public static Vector3 BOSS_GRID_TOWER_POS { get; }

	// Methods

	// RVA: 0xEBB0AC Offset: 0xEBB0AC VA: 0xEBB0AC
	public void .ctor() { }

	// RVA: 0xEBB19C Offset: 0xEBB19C VA: 0xEBB19C
	public static Vector3 get_BOSS_GRID_DEFAULT_POS() { }

	// RVA: 0xEBB250 Offset: 0xEBB250 VA: 0xEBB250
	public static Vector3 get_BOSS_GRID_LIMIT_POS() { }

	// RVA: 0xEBB304 Offset: 0xEBB304 VA: 0xEBB304
	public static Vector3 get_BOSS_GRID_JUMBLE_POS() { }

	// RVA: 0xEBB3B8 Offset: 0xEBB3B8 VA: 0xEBB3B8
	public static Vector3 get_BOSS_GRID_TOWER_POS() { }

	// RVA: 0xEBB468 Offset: 0xEBB468 VA: 0xEBB468
	private TitleInfoControl.EventEndTimeInfo GetActiveEventEndTimeInfo() { }

	// RVA: 0xEBB57C Offset: 0xEBB57C VA: 0xEBB57C
	private int GetActiveEventId() { }

	// RVA: 0xEBB5C8 Offset: 0xEBB5C8 VA: 0xEBB5C8
	public bool isEventSetted() { }

	// RVA: 0xEBB5B8 Offset: 0xEBB5B8 VA: 0xEBB5B8
	private bool IsEventShopOnly() { }

	// RVA: 0xEBB5D8 Offset: 0xEBB5D8 VA: 0xEBB5D8
	private void Awake() { }

	// RVA: 0xEBBBE0 Offset: 0xEBBBE0 VA: 0xEBBBE0
	private void SetParticle() { }

	// RVA: 0xEBC100 Offset: 0xEBC100 VA: 0xEBC100
	private void OnDestroy() { }

	// RVA: 0xEBC230 Offset: 0xEBC230 VA: 0xEBC230
	private void OnEnable() { }

	// RVA: 0xEBC2C4 Offset: 0xEBC2C4 VA: 0xEBC2C4
	private void Update() { }

	// RVA: 0xEBC888 Offset: 0xEBC888 VA: 0xEBC888
	private void LateUpdate() { }

	// RVA: 0xEBC9D4 Offset: 0xEBC9D4 VA: 0xEBC9D4
	public void setDispParticleObj(bool disp) { }

	// RVA: 0xEBCA84 Offset: 0xEBCA84 VA: 0xEBCA84
	public void SetParent(Transform parent_transform) { }

	// RVA: 0xEBCC78 Offset: 0xEBCC78 VA: 0xEBCC78
	public void SetBackBtnAct(Action act) { }

	// RVA: 0xEA5204 Offset: 0xEA5204 VA: 0xEA5204
	public void setTitleInfo(PlayMakerFSM fsm, bool isShow, string titleTxt, TitleInfoControl.TitleKind kind) { }

	// RVA: 0xEBD2A8 Offset: 0xEBD2A8 VA: 0xEBD2A8
	public void setTitleInfo(PlayMakerFSM fsm, TitleInfoControl.BackKind backKind, TitleInfoControl.TitleKind kind) { }

	// RVA: 0xEBD5A8 Offset: 0xEBD5A8 VA: 0xEBD5A8
	public void changeTitleInfo(TitleInfoControl.BackKind backKind, TitleInfoControl.TitleKind titleKind) { }

	// RVA: 0xEA52E0 Offset: 0xEA52E0 VA: 0xEA52E0
	public void changeTitleInfo(bool isBack, TitleInfoControl.TitleKind titleKind, int titleNameParam = 0) { }

	// RVA: 0xEBCDB0 Offset: 0xEBCDB0 VA: 0xEBCDB0
	private void SetBackBtn(bool isShow, TitleInfoControl.TitleKind titleKind = 0) { }

	// RVA: 0xEBD368 Offset: 0xEBD368 VA: 0xEBD368
	public void setBackBtnSprite(TitleInfoControl.BackKind kind) { }

	// RVA: 0xEBD5E8 Offset: 0xEBD5E8 VA: 0xEBD5E8
	public void SetSelectBackBtnDispFlag(bool isDisp) { }

	// RVA: 0xEBD5F8 Offset: 0xEBD5F8 VA: 0xEBD5F8
	public void SetSelectBackBtnDispFlag(bool isDispSelectBack, bool isBackBtnBgSpCombineMenu) { }

	// RVA: 0xEBCE74 Offset: 0xEBCE74 VA: 0xEBCE74
	public void SetSelectBackBtn(TitleInfoControl.TitleKind titleKind = 0, bool isUpdateForcibly = False) { }

	// RVA: 0xEBD60C Offset: 0xEBD60C VA: 0xEBD60C
	public void SetSelectBackBtnSprite(TitleInfoControl.TitleKind titleKind = 0) { }

	// RVA: 0xEBD830 Offset: 0xEBD830 VA: 0xEBD830
	public void SetBackBtnButtonStatus(bool isEnable) { }

	// RVA: 0xEA8778 Offset: 0xEA8778 VA: 0xEA8778
	public void setBackBtnSprite(bool isDispBack) { }

	// RVA: 0xEA5350 Offset: 0xEA5350 VA: 0xEA5350
	public void setBackBtn_Terminal(bool isDispBack = False) { }

	// RVA: 0xEAD0EC Offset: 0xEAD0EC VA: 0xEAD0EC
	public void setBackBtnColliderEnable(bool isEnable) { }

	// RVA: 0xEBD940 Offset: 0xEBD940 VA: 0xEBD940
	public void setBackSelectBtnColliderEnable(bool isEnable) { }

	// RVA: 0xEBDA28 Offset: 0xEBDA28 VA: 0xEBDA28
	public void setBackBtnEnable(bool isEnable) { }

	// RVA: 0xEA551C Offset: 0xEA551C VA: 0xEA551C
	public void SetBackStoryButtonEnable(bool isEnable) { }

	// RVA: 0xEBDBDC Offset: 0xEBDBDC VA: 0xEBDBDC
	private static string GetTitleImgName(TitleInfoControl.TitleKind kind, int titleNameParam) { }

	// RVA: 0xEBCE8C Offset: 0xEBCE8C VA: 0xEBCE8C
	public void setTitleImg(TitleInfoControl.TitleKind kind, bool isSetDefaultDepth = True, int titleNameParam = 0) { }

	// RVA: 0xEBDFD0 Offset: 0xEBDFD0 VA: 0xEBDFD0
	public void setTitleImgFromBanner(int headerId, bool isMap, bool isSetDefaultDepth = True, TitleInfoControl.TitleKind titleKind = 0) { }

	// RVA: 0xEBE350 Offset: 0xEBE350 VA: 0xEBE350
	public void RequestTitleImageChange(int headerId) { }

	// RVA: 0xEBE5CC Offset: 0xEBE5CC VA: 0xEBE5CC
	private void RecallHeaderFade() { }

	// RVA: 0xEBE730 Offset: 0xEBE730 VA: 0xEBE730
	public void sendEvent(string msg) { }

	// RVA: 0xEBE810 Offset: 0xEBE810 VA: 0xEBE810
	public void setDepth(int depth) { }

	// RVA: 0xEA55E0 Offset: 0xEA55E0 VA: 0xEA55E0
	public void setBackBtnDepth(int depth) { }

	// RVA: 0xEBDE1C Offset: 0xEBDE1C VA: 0xEBDE1C
	public void SetParticleDepth(int depth) { }

	// RVA: 0xEA56B4 Offset: 0xEA56B4 VA: 0xEA56B4
	public void setHeaderBgImg(int warId = 0) { }

	// RVA: 0xEBD5DC Offset: 0xEBD5DC VA: 0xEBD5DC
	public void FrameIn_BackBtn(bool is_force = False) { }

	// RVA: 0xEBECA8 Offset: 0xEBECA8 VA: 0xEBECA8
	public void FrameOut_BackBtn(bool is_force = False) { }

	// RVA: 0xEBEAD8 Offset: 0xEBEAD8 VA: 0xEBEAD8
	public void SlideFrame_BackBtn(bool isFrameIn, bool isForce = False) { }

	// RVA: 0xEBECB4 Offset: 0xEBECB4 VA: 0xEBECB4
	public void SetShopEventInfo(int eventId, bool isInitRequest = False) { }

	// RVA: 0xEA780C Offset: 0xEA780C VA: 0xEA780C
	public void SetActiveEventInfo(WarEntity warEnt, EventItemDisplayEntity.ScreenFlag evScreen, Action callback) { }

	// RVA: 0xEBF6A4 Offset: 0xEBF6A4 VA: 0xEBF6A4
	public void SetEventRewardInfo(int eventId, float logoSizeX, Action callback) { }

	// RVA: 0xEB3288 Offset: 0xEB3288 VA: 0xEB3288
	public void SetActiveEventInfo(bool isActive, EventItemDisplayEntity.ScreenFlag evScreen, int warId = 0, int warEventId = 0, Action callback) { }

	// RVA: 0xEC0894 Offset: 0xEC0894 VA: 0xEC0894
	private void SetEventInfoBg(int warId) { }

	// RVA: 0xEBE8EC Offset: 0xEBE8EC VA: 0xEBE8EC
	private void SetMapBgHeaderSp(UISprite sprite, int warId) { }

	// RVA: 0xEAC958 Offset: 0xEAC958 VA: 0xEAC958
	public void UpdateEventInfo(Action callback) { }

	// RVA: 0xEBFEF0 Offset: 0xEBFEF0 VA: 0xEBFEF0
	private void SetEventInfo(Action callback) { }

	// RVA: 0xEC121C Offset: 0xEC121C VA: 0xEC121C
	private TitleInfoControl.EventEndTimeInfo CreateEventEndTimeInfo(EventEntity eventEnt, bool isShopClosed, long endTime) { }

	// RVA: 0xEC12EC Offset: 0xEC12EC VA: 0xEC12EC
	private int GetMissionClearCount(EventMissionEntity[] eventMissionList, bool isDailyMission) { }

	// RVA: 0xEC1548 Offset: 0xEC1548 VA: 0xEC1548
	public void ForceDispRaidBoss() { }

	// RVA: 0xEC1710 Offset: 0xEC1710 VA: 0xEC1710
	private void CheckDispBossStatus(bool isCheckTutorial) { }

	// RVA: 0xEC2260 Offset: 0xEC2260 VA: 0xEC2260
	public bool IsBossGridActive() { }

	// RVA: 0xEBF730 Offset: 0xEBF730 VA: 0xEBF730
	private void SetRewardEventTitle(float sizeX) { }

	// RVA: 0xEC2490 Offset: 0xEC2490 VA: 0xEC2490
	public void setDispHeader(bool isDisp) { }

	// RVA: 0xEC0AE0 Offset: 0xEC0AE0 VA: 0xEC0AE0
	private void DispEventInfo(int eventId, bool hasReward = False, Action evetUICallback) { }

	// RVA: 0xEC3700 Offset: 0xEC3700 VA: 0xEC3700
	private void SetupEventInfo(int eventId, bool hasReward, bool isOnMap, bool isActive, Action callback) { }

	// RVA: 0xEC432C Offset: 0xEC432C VA: 0xEC432C
	private void SetupRaceRank(int eventId) { }

	// RVA: 0xEC49F0 Offset: 0xEC49F0 VA: 0xEC49F0
	private bool IsRaceMap() { }

	// RVA: 0xEC4C88 Offset: 0xEC4C88 VA: 0xEC4C88
	private int GetOldHeaderId() { }

	// RVA: 0xEC5070 Offset: 0xEC5070 VA: 0xEC5070
	private void SetupVsGauge(int eventId) { }

	// RVA: 0xEC5338 Offset: 0xEC5338 VA: 0xEC5338
	private void SetupVsGauge_call(int eventId) { }

	// RVA: 0xEC5FA8 Offset: 0xEC5FA8 VA: 0xEC5FA8
	private void vsGaugeFrameIn(int eventId) { }

	// RVA: 0xEAAC44 Offset: 0xEAAC44 VA: 0xEAAC44
	public void vsGaugeEvent(int eventId) { }

	// RVA: 0xEC28E4 Offset: 0xEC28E4 VA: 0xEC28E4
	private void SetEventUIActive(bool isActive) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC84F4 Offset: 0xCC84F4 VA: 0xCC84F4
	// RVA: 0xEC60C8 Offset: 0xEC60C8 VA: 0xEC60C8
	private IEnumerator MaskWait() { }

	// RVA: 0xEC6138 Offset: 0xEC6138 VA: 0xEC6138
	private void SetupEventRaid(EventDetailEntity eventDetailEntity) { }

	// RVA: 0xEC6780 Offset: 0xEC6780 VA: 0xEC6780
	private void SetupJumbleRaid(int eventId, int raidCountMax) { }

	// RVA: 0xEC7A10 Offset: 0xEC7A10 VA: 0xEC7A10
	private void SetupNormalRaid(int eventId) { }

	// RVA: 0xEAA388 Offset: 0xEAA388 VA: 0xEAA388
	public void PlayEventRaidDefeatedEffect(int eventId, bool isResetDamageAnimation, Action callback) { }

	// RVA: 0xEC9858 Offset: 0xEC9858 VA: 0xEC9858
	private void UpdateEventRaidUi() { }

	// RVA: 0xEC9424 Offset: 0xEC9424 VA: 0xEC9424
	private bool IsDeadRaidBossOnEventInfoGroups() { }

	// RVA: 0xEC9DD8 Offset: 0xEC9DD8 VA: 0xEC9DD8
	private bool SetJumbleRaidDamageAnimation(EventRaidEntity raidEntity, Action onClearCallback) { }

	// RVA: 0xECA1B0 Offset: 0xECA1B0 VA: 0xECA1B0
	private void CheckAllRaidBossClear(int eventId) { }

	// RVA: 0xEC1CF4 Offset: 0xEC1CF4 VA: 0xEC1CF4
	private bool IsRaidBossSpotOpen(int eventId, int raidDay) { }

	// RVA: 0xEC8EE4 Offset: 0xEC8EE4 VA: 0xEC8EE4
	private bool IsReprintLastWarRaid(int eventId) { }

	// RVA: 0xEC900C Offset: 0xEC900C VA: 0xEC900C
	public void CheckEventRaidBossHpAnim(Action callback) { }

	// RVA: 0xECA4EC Offset: 0xECA4EC VA: 0xECA4EC
	public void SetAdditionalCallbackForEventRaidBossAnim(Action callback) { }

	// RVA: 0xEC2708 Offset: 0xEC2708 VA: 0xEC2708
	private void SetInfoTextDisp(int eventId) { }

	// RVA: 0xECA508 Offset: 0xECA508 VA: 0xECA508
	private void SetupSuperBoss(int eventId, EventDetailEntity eventDetailEntity) { }

	// RVA: 0xECB4A4 Offset: 0xECB4A4 VA: 0xECB4A4
	private UserSuperBossEntity GetOldSuperBoss() { }

	// RVA: 0xEA9FB0 Offset: 0xEA9FB0 VA: 0xEA9FB0
	public void CheckSuperBossHpAnim(Action callback) { }

	// RVA: 0xECB5A4 Offset: 0xECB5A4 VA: 0xECB5A4
	public void SetAdditionalCallbackforBossAnim(Action callback) { }

	// RVA: 0xECA420 Offset: 0xECA420 VA: 0xECA420
	private void ExecAdditionalCallbackforBossAnim() { }

	// RVA: 0xEC2618 Offset: 0xEC2618 VA: 0xEC2618
	public void CheckMissionNotifyPause() { }

	// RVA: 0xECA434 Offset: 0xECA434 VA: 0xECA434
	public void ClearMssionNotifyPause() { }

	// RVA: 0xEAAAB8 Offset: 0xEAAAB8 VA: 0xEAAAB8
	public void CheckEventPointGroupReward(int eventId, Action callback) { }

	// RVA: 0xEAAE90 Offset: 0xEAAE90 VA: 0xEAAE90
	public void CheckEventPointGaugeAnim(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0xEBED00 Offset: 0xEBED00 VA: 0xEBED00
	private void DestroyEventInfo() { }

	// RVA: 0xEB0050 Offset: 0xEB0050 VA: 0xEB0050
	public void InitEventAlphaAnim() { }

	// RVA: 0xEBC2E8 Offset: 0xEBC2E8 VA: 0xEBC2E8
	private void UpdateEventAlphaAnim() { }

	// RVA: 0xECB75C Offset: 0xECB75C VA: 0xECB75C
	public void OnClickEventBtn() { }

	// RVA: 0xECBE1C Offset: 0xECBE1C VA: 0xECBE1C
	public void CloseEventBannerWindow() { }

	// RVA: 0xECB970 Offset: 0xECB970 VA: 0xECB970
	public static void OnClickEventBtn(int eventId) { }

	// RVA: 0xECC03C Offset: 0xECC03C VA: 0xECC03C
	public static void OnClickShopBtn(int eventId) { }

	// RVA: 0xECBF68 Offset: 0xECBF68 VA: 0xECBF68
	public static bool IsEnableEventShopButton(EventEntity eventEnt, EventDetailEntity eventDetailEnt, long nowTime) { }

	// RVA: 0xECC4BC Offset: 0xECC4BC VA: 0xECC4BC
	public static bool IsEnableEventShopButton(EventDetailEntity eventDetailEnt) { }

	// RVA: 0xEC4100 Offset: 0xEC4100 VA: 0xEC4100
	public void SetEventBtnCollider(bool isEnabled) { }

	// RVA: 0xECC5D8 Offset: 0xECC5D8 VA: 0xECC5D8
	public void OnClickEventAlphaAnimChangeBtn() { }

	// RVA: 0xECC608 Offset: 0xECC608 VA: 0xECC608
	public void OnClickEventItemAlphaAnimChangeBtn() { }

	// RVA: 0xECC638 Offset: 0xECC638 VA: 0xECC638
	public void OnPressEventAlphaAnimChangeBtn() { }

	// RVA: 0xECC690 Offset: 0xECC690 VA: 0xECC690
	public void OnPressEventItemAlphaAnimChangeBtn() { }

	// RVA: 0xECC6E8 Offset: 0xECC6E8 VA: 0xECC6E8
	public void OnReleaseEventAlphaAnimChangeBtn() { }

	// RVA: 0xECC72C Offset: 0xECC72C VA: 0xECC72C
	public void OnReleaseEventItemAlphaAnimChangeBtn() { }

	// RVA: 0xEC13E0 Offset: 0xEC13E0 VA: 0xEC13E0
	private void SetupEventBannerWindow(List<TitleInfoControl.EventEndTimeInfo> eventEndTimeInfoList) { }

	// RVA: 0xECC770 Offset: 0xECC770 VA: 0xECC770
	public void SetupEventTowerEventRewardScene(int eventId) { }

	// RVA: 0xECC820 Offset: 0xECC820 VA: 0xECC820
	private void SetupEventTower(EventDetailEntity eventDetailEntity, bool isTerminal = True) { }

	// RVA: 0xECCC6C Offset: 0xECCC6C VA: 0xECCC6C
	public void InitEventTowerDisp(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0xECCF38 Offset: 0xECCF38 VA: 0xECCF38
	private void LoadEventTowerEffect(Action callback) { }

	// RVA: 0xECD05C Offset: 0xECD05C VA: 0xECD05C
	private void LoadEventTowerEffectEnd(AssetData data) { }

	// RVA: 0xECCBB8 Offset: 0xECCBB8 VA: 0xECCBB8
	private void EventTowerOpen(Action callback) { }

	// RVA: 0xEA9DF0 Offset: 0xEA9DF0 VA: 0xEA9DF0
	public void EventTowerStart(EventDetailEntity eventDetailEntity, Action callback) { }

	// RVA: 0xECD08C Offset: 0xECD08C VA: 0xECD08C
	public void EventTowerRewardOpen(GameObject parent, Action callback) { }

	// RVA: 0xECD390 Offset: 0xECD390 VA: 0xECD390
	public void EventConquestRewardOpen(GameObject parent, Action callback) { }

	// RVA: 0xECD5A4 Offset: 0xECD5A4 VA: 0xECD5A4
	public void EventProductivityGrowthDialogOpen(GameObject parent, Action callback) { }

	// RVA: 0xECD7D8 Offset: 0xECD7D8 VA: 0xECD7D8
	public void EventHarvestGrowthDialogOpen(GameObject parent, Action callback) { }

	// RVA: 0xECD9B8 Offset: 0xECD9B8 VA: 0xECD9B8
	public void EventHarvestCautionDialogOpen(GameObject parent, int questId, int questPhase, string message, CommonConfirmDialog.ClickDelegate callback) { }

	// RVA: 0xECDBE0 Offset: 0xECDBE0 VA: 0xECDBE0
	public void EventPointRewardOpen(BattleDropItem[] itemArray, EventDetailEntity eventDetail, Action onFinishedDialog, bool enableBackground, int beforePoint = 0) { }

	// RVA: 0xECE414 Offset: 0xECE414 VA: 0xECE414
	private static void createGroupRewardItemList(BattleDropItem[] item, int groupId, out List<BattleDropItem> groupRewardItemList) { }

	// RVA: 0xECE544 Offset: 0xECE544 VA: 0xECE544
	private void LoadEventDailyPointEffect(Action callback) { }

	// RVA: 0xECE668 Offset: 0xECE668 VA: 0xECE668
	private void LoadEventDailyPointEffectEnd(AssetData data) { }

	// RVA: 0xEAC978 Offset: 0xEAC978 VA: 0xEAC978
	public void EventDailyPointOpen(GameObject parent, Action callback) { }

	// RVA: 0xECE758 Offset: 0xECE758 VA: 0xECE758
	public void SetupDailyPointItemDisp(EventDetailEntity eventDetailEntity, bool isTerminal = True) { }

