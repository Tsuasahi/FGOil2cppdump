	// RVA: 0x1CF8890 Offset: 0x1CF8890 VA: 0x1CF8890
	public static void initialize() { }

	// RVA: 0x1CF8970 Offset: 0x1CF8970 VA: 0x1CF8970
	protected void Setup() { }

	// RVA: 0x1CF8BA4 Offset: 0x1CF8BA4 VA: 0x1CF8BA4
	public static void initializeAssetStorage() { }

	// RVA: 0x1CF8C04 Offset: 0x1CF8C04 VA: 0x1CF8C04
	public static void reset() { }

	// RVA: 0x1CF85BC Offset: 0x1CF85BC VA: 0x1CF85BC
	public static void stopAll() { }

	// RVA: 0x1CF8C8C Offset: 0x1CF8C8C VA: 0x1CF8C8C
	private void OnDestroy() { }

	// RVA: 0x1CF8E28 Offset: 0x1CF8E28 VA: 0x1CF8E28
	public static void SetBgmMasterVolume(float volume) { }

	// RVA: 0x1CF8E98 Offset: 0x1CF8E98 VA: 0x1CF8E98
	public static void SetSeMasterVolume(float volume) { }

	// RVA: 0x1CF8F08 Offset: 0x1CF8F08 VA: 0x1CF8F08
	public static void SetVoiceMasterVolume(float volume) { }

	// RVA: 0x1CF8F78 Offset: 0x1CF8F78 VA: 0x1CF8F78
	public static void loadSe(string name, Action callbackFunc) { }

	// RVA: 0x1CF8FF0 Offset: 0x1CF8FF0 VA: 0x1CF8FF0
	public static void releaseSe(string name) { }

	// RVA: 0x1CF9058 Offset: 0x1CF9058 VA: 0x1CF9058
	public static bool isPlayBgm(string name) { }

	// RVA: 0x1CF90C0 Offset: 0x1CF90C0 VA: 0x1CF90C0
	public static bool isLoadingBgm(string name) { }

	// RVA: 0x1CF9128 Offset: 0x1CF9128 VA: 0x1CF9128
	public static void playBgm(string name) { }

	// RVA: 0x1CF91A8 Offset: 0x1CF91A8 VA: 0x1CF91A8
	public static void playBgm(string name, float volume) { }

	// RVA: 0x1CF922C Offset: 0x1CF922C VA: 0x1CF922C
	public static void playBgm(string name, float volume, float fadeinTime) { }

	// RVA: 0x1CF92B4 Offset: 0x1CF92B4 VA: 0x1CF92B4
	public static void fadeoutBgm(float fadeoutTime) { }

	// RVA: 0x1CF9328 Offset: 0x1CF9328 VA: 0x1CF9328
	public static void fadeoutBgm(float fadeoutTime, Action callback) { }

	// RVA: 0x1CF93A0 Offset: 0x1CF93A0 VA: 0x1CF93A0
	public static void stopBgm() { }

	// RVA: 0x1CF940C Offset: 0x1CF940C VA: 0x1CF940C
	public static string getBgmName() { }

	// RVA: 0x1CF946C Offset: 0x1CF946C VA: 0x1CF946C
	public static bool isPlayJingle(string name) { }

	// RVA: 0x1CF94D4 Offset: 0x1CF94D4 VA: 0x1CF94D4
	public static void playJingle(string name) { }

	// RVA: 0x1CF9548 Offset: 0x1CF9548 VA: 0x1CF9548
	public static void playJingle(string name, float volume) { }

	// RVA: 0x1CF95C0 Offset: 0x1CF95C0 VA: 0x1CF95C0
	public static void playJingle(string name, Action callbackFunc) { }

	// RVA: 0x1CF9644 Offset: 0x1CF9644 VA: 0x1CF9644
	public static void playJingle(string name, float volume, Action callbackFunc) { }

	// RVA: 0x1CF96CC Offset: 0x1CF96CC VA: 0x1CF96CC
	public static void stopJingle() { }

	// RVA: 0x1CF972C Offset: 0x1CF972C VA: 0x1CF972C
	public static void fadeoutJingle(float fadeoutTime) { }

	// RVA: 0x1CE7E30 Offset: 0x1CE7E30 VA: 0x1CE7E30
	public static void playSystemSe(SeManager.SystemSeKind kind) { }

	// RVA: 0x1CF979C Offset: 0x1CF979C VA: 0x1CF979C
	public static bool isBusySe(string name) { }

	// RVA: 0x1CF9804 Offset: 0x1CF9804 VA: 0x1CF9804
	public static bool isBusyVoice(string name) { }

	// RVA: 0x1CEBCF0 Offset: 0x1CEBCF0 VA: 0x1CEBCF0
	public static SePlayer playSe(string name) { }

	// RVA: 0x1CF9D38 Offset: 0x1CF9D38 VA: 0x1CF9D38
	public static SePlayer playSeContinue(string name) { }

	// RVA: 0x1CF9DB8 Offset: 0x1CF9DB8 VA: 0x1CF9DB8
	public static SePlayer playSeContinue(string assetName, string objectName) { }

	// RVA: 0x1CF9E48 Offset: 0x1CF9E48 VA: 0x1CF9E48
	public static SePlayer playSe(string name, float volume) { }

	// RVA: 0x1CF9ECC Offset: 0x1CF9ECC VA: 0x1CF9ECC
	public static SePlayer playSe(string name, float volume, float fadeinTime) { }

	// RVA: 0x1CF9F54 Offset: 0x1CF9F54 VA: 0x1CF9F54
	public static SePlayer playSe(string name, Action callbackFunc) { }

	// RVA: 0x1CF9FE0 Offset: 0x1CF9FE0 VA: 0x1CF9FE0
	public static SePlayer playSe(string name, float volume, Action callbackFunc) { }

	// RVA: 0x1CFA070 Offset: 0x1CFA070 VA: 0x1CFA070
	public static SePlayer playSe(string name, float volume, float fadeinTime, Action callbackFunc) { }

	// RVA: 0x1CEBC60 Offset: 0x1CEBC60 VA: 0x1CEBC60
	public static SePlayer playSe(string assetName, string objectName) { }

	// RVA: 0x1CFA104 Offset: 0x1CFA104 VA: 0x1CFA104
	public static SePlayer playSe(string assetName, string objectName, float volume, float fadeinTime) { }

	// RVA: 0x1CFA19C Offset: 0x1CFA19C VA: 0x1CFA19C
	public static SePlayer playSe(string assetName, string objectName, float volume, Action callbackFunc) { }

	// RVA: 0x1CFA234 Offset: 0x1CFA234 VA: 0x1CFA234
	public static SePlayer playSe(string assetName, string objectName, float volume, float fadeinTime, Action callbackFunc) { }

	// RVA: 0x1CFA2D0 Offset: 0x1CFA2D0 VA: 0x1CFA2D0
	public static SePlayer playSeLoop(string name) { }

	// RVA: 0x1CFA348 Offset: 0x1CFA348 VA: 0x1CFA348
	public static SePlayer playSeLoop(string name, float volume) { }

	// RVA: 0x1CFA3C4 Offset: 0x1CFA3C4 VA: 0x1CFA3C4
	public static SePlayer playSeLoop(string name, float volume, float fadeinTime) { }

	// RVA: 0x1CFA444 Offset: 0x1CFA444 VA: 0x1CFA444
	public static SePlayer playSeLoop(string assetName, string name) { }

	// RVA: 0x1CFA4CC Offset: 0x1CFA4CC VA: 0x1CFA4CC
	public static SePlayer playSeLoop(string assetName, string name, float volume) { }

	// RVA: 0x1CFA558 Offset: 0x1CFA558 VA: 0x1CFA558
	public static SePlayer playSeLoop(string assetName, string name, float volume, float fadeinTime) { }

	// RVA: 0x1CFA5E8 Offset: 0x1CFA5E8 VA: 0x1CFA5E8
	public static void stopSe(float fadeoutTime = 0) { }

	// RVA: 0x1CFA658 Offset: 0x1CFA658 VA: 0x1CFA658
	public static void stopSe(string name, float fadeoutTime = 0) { }

	// RVA: 0x1CFA6D0 Offset: 0x1CFA6D0 VA: 0x1CFA6D0
	public static void changeVolumeSe(string name, float volume, float fadeTime) { }

	// RVA: 0x1CFA750 Offset: 0x1CFA750 VA: 0x1CFA750
	public static void setPitchSe(string name, float pitch) { }

	// RVA: 0x1CFA7C8 Offset: 0x1CFA7C8 VA: 0x1CFA7C8
	public static float getPitchSe(string name) { }

	// RVA: 0x1CFA830 Offset: 0x1CFA830 VA: 0x1CFA830
	public static void stopSystemSe() { }

	// RVA: 0x1CFA890 Offset: 0x1CFA890 VA: 0x1CFA890
	public static SePlayer playVoice(string name) { }

	// RVA: 0x1CFA908 Offset: 0x1CFA908 VA: 0x1CFA908
	public static SePlayer playVoice(string name, float volume) { }

	// RVA: 0x1CFA984 Offset: 0x1CFA984 VA: 0x1CFA984
	public static SePlayer playVoice(string name, Action callbackFunc) { }

	// RVA: 0x1CFAA08 Offset: 0x1CFAA08 VA: 0x1CFAA08
	public static SePlayer playVoice(string name, float volume, Action callbackFunc) { }

	// RVA: 0x1CEBE8C Offset: 0x1CEBE8C VA: 0x1CEBE8C
	public static SePlayer playVoice(string assetName, string objectName, float volume, Action callbackFunc) { }

	// RVA: 0x1CFAA90 Offset: 0x1CFAA90 VA: 0x1CFAA90
	public static SePlayer playVoice(AssetData assetData, string objectName, float volume, Action callbackFunc) { }

	// RVA: 0x1CFAB20 Offset: 0x1CFAB20 VA: 0x1CFAB20
	public static void stopVoice(string assetName, string objectName, float fadeoutTime = 0) { }

	// RVA: 0x1CFABA8 Offset: 0x1CFABA8 VA: 0x1CFABA8
	public static void stopVoice(string name, float fadeoutTime = 0) { }

	// RVA: 0x1CFAC9C Offset: 0x1CFAC9C VA: 0x1CFAC9C
	public static void stopVoiceAll(float fadeoutTime = 0) { }

	// RVA: 0x1CFAD0C Offset: 0x1CFAD0C VA: 0x1CFAD0C
	public static void changeVolumeVoice(string name, float volume, float fadeTime) { }

	// RVA: 0x1CFADE0 Offset: 0x1CFADE0 VA: 0x1CFADE0
	public static string[] getDownloadAssetNames(string cueName) { }

	// RVA: 0x1CFAF50 Offset: 0x1CFAF50 VA: 0x1CFAF50
	public static string getAssetName(string name) { }

	// RVA: 0x1CF98DC Offset: 0x1CF98DC VA: 0x1CF98DC
	public static string getCharaVoiceAssetName(string name) { }

	// RVA: 0x1CF9C70 Offset: 0x1CF9C70 VA: 0x1CF9C70
	public static string getCharaVoiceFileName(string name) { }

	// RVA: 0x1CFAFC8 Offset: 0x1CFAFC8 VA: 0x1CFAFC8
	public static SePlayer playCharaVoice(string name) { }

	// RVA: 0x1CFB09C Offset: 0x1CFB09C VA: 0x1CFB09C
	public static SePlayer playCharaVoice(string name, float volume) { }

	// RVA: 0x1CFB16C Offset: 0x1CFB16C VA: 0x1CFB16C
	protected void RebootAssetNameCounter() { }

	// RVA: 0x1CFB1CC Offset: 0x1CFB1CC VA: 0x1CFB1CC
	protected void AddAssetNameCounter(string name) { }

	// RVA: 0x1CFB2A0 Offset: 0x1CFB2A0 VA: 0x1CFB2A0
	protected bool SubAssetNameCounter(string name) { }

	// RVA: 0x1CFB3E8 Offset: 0x1CFB3E8 VA: 0x1CFB3E8
	protected bool ExistsAssetNameCounter(string name) { }

	// RVA: 0x1CEB4AC Offset: 0x1CEB4AC VA: 0x1CEB4AC
	public static void loadAudioAssetStorage(string name, Action callback, SoundManager.CueType tp = 1) { }

	// RVA: 0x1CF09DC Offset: 0x1CF09DC VA: 0x1CF09DC
	public void LoadAudioAssetStorage(string name, Action callback, SoundManager.CueType tp = 1) { }

	// RVA: 0x1CFB574 Offset: 0x1CFB574 VA: 0x1CFB574
	public static void downloadAudioAssetStorage(string name, Action callback, SoundManager.CueType tp = 1) { }

	// RVA: 0x1CFB5E0 Offset: 0x1CFB5E0 VA: 0x1CFB5E0
	public void DownloadAudioAssetStorage(string name, Action callback, SoundManager.CueType tp = 1) { }

	// RVA: 0x1CFB828 Offset: 0x1CFB828 VA: 0x1CFB828
	public static void downloadAudioAssetStorage(string[] nameList, Action callback, SoundManager.CueType tp = 1) { }

	// RVA: 0x1CFB894 Offset: 0x1CFB894 VA: 0x1CFB894
	public void DownloadAudioAssetStorage(string[] nameList, Action callback, SoundManager.CueType tp = 1) { }

	// RVA: 0x1CEB9AC Offset: 0x1CEB9AC VA: 0x1CEB9AC
	public static void releaseAudioAssetStorage(string name) { }

	// RVA: 0x1CF0DB4 Offset: 0x1CF0DB4 VA: 0x1CF0DB4
	public void ReleaseAudioAssetStorage(string name) { }

	// RVA: 0x1CF864C Offset: 0x1CF864C VA: 0x1CF864C
	public void ReleaseAllAudioAssetStorage() { }

	// RVA: 0x1CF1FE0 Offset: 0x1CF1FE0 VA: 0x1CF1FE0
	public bool IsExistsSound(string cueSheetName, string name) { }

	// RVA: 0x1CFBBD4 Offset: 0x1CFBBD4 VA: 0x1CFBBD4
	public static bool checkServantVoice(string path, string name, bool isCheck = False) { }

	// RVA: 0x1CF0EE0 Offset: 0x1CF0EE0 VA: 0x1CF0EE0
	public static string getCpkPath() { }

	// RVA: 0x1CFBC74 Offset: 0x1CFBC74 VA: 0x1CFBC74
	private static void .cctor() { }
}

// Namespace: 
public enum SoundManager.CueType // TypeDefIndex: 6560
{
	// Fields
	public int value__; // 0x0
	public const SoundManager.CueType ACB_ONLY = 0;
	public const SoundManager.CueType ALL = 1;
}

// Namespace: 
protected class SoundManager.CpkLoader // TypeDefIndex: 6561
{
	// Fields
	public string name; // 0x10
	public Action callback; // 0x18
	public SoundManager manager; // 0x20
	protected SoundManager.CueType cueType; // 0x28
	public IEnumerator loadCR; // 0x30

	// Methods

	// RVA: 0x1CFB498 Offset: 0x1CFB498 VA: 0x1CFB498
	public void .ctor(SoundManager manager, string name, Action callback, SoundManager.CueType cueType) { }

	// RVA: 0x1CFB4E8 Offset: 0x1CFB4E8 VA: 0x1CFB4E8
	public void Start() { }

	// RVA: 0x1CFBD40 Offset: 0x1CFBD40 VA: 0x1CFBD40
	private void downloadAssetStorage() { }

	// RVA: 0x1CFBF78 Offset: 0x1CFBF78 VA: 0x1CFBF78
	protected void EndLoadCallback(AssetData data) { }

	// RVA: 0x1CFC05C Offset: 0x1CFC05C VA: 0x1CFC05C
	private string[] setupCpkAssetPath() { }

	// RVA: 0x1CFC61C Offset: 0x1CFC61C VA: 0x1CFC61C
	private bool tryGetAssetPath(ref string cpkAssetPath) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3748C Offset: 0xD3748C VA: 0xD3748C
	// RVA: 0x1CFBFC8 Offset: 0x1CFBFC8 VA: 0x1CFBFC8
	protected IEnumerator SetupCpk(string name) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEBA0 Offset: 0xCAEBA0 VA: 0xCAEBA0
private sealed class SoundManager.CpkLoader.<SetupCpk>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6562
{
	// Fields
	internal string <cpkAssetPath>__0; // 0x10
	internal string name; // 0x18
	internal CriFsBinder <binder>__0; // 0x20
	internal CriFsBindRequest <bind_request>__0; // 0x28
	internal SoundManager.CpkLoader $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46284 Offset: 0xD46284 VA: 0xD46284
	// RVA: 0x1CFC6CC Offset: 0x1CFC6CC VA: 0x1CFC6CC
	public void .ctor() { }

	// RVA: 0x1CFC6D4 Offset: 0x1CFC6D4 VA: 0x1CFC6D4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46294 Offset: 0xD46294 VA: 0xD46294
	// RVA: 0x1CFCBBC Offset: 0x1CFCBBC VA: 0x1CFCBBC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD462A4 Offset: 0xD462A4 VA: 0xD462A4
	// RVA: 0x1CFCBC4 Offset: 0x1CFCBC4 VA: 0x1CFCBC4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD462B4 Offset: 0xD462B4 VA: 0xD462B4
	// RVA: 0x1CFCBCC Offset: 0x1CFCBCC VA: 0x1CFCBCC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD462C4 Offset: 0xD462C4 VA: 0xD462C4
	// RVA: 0x1CFCBE0 Offset: 0x1CFCBE0 VA: 0x1CFCBE0 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEBB0 Offset: 0xCAEBB0 VA: 0xCAEBB0
private sealed class SoundManager.<DownloadAudioAssetStorage>c__AnonStorey0 // TypeDefIndex: 6563
{
	// Fields
	internal Action callback; // 0x10

	// Methods

	// RVA: 0x1CFB820 Offset: 0x1CFB820 VA: 0x1CFB820
	public void .ctor() { }

	// RVA: 0x1CFBCE0 Offset: 0x1CFBCE0 VA: 0x1CFBCE0
	internal void <>m__0(AssetData d) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEBC0 Offset: 0xCAEBC0 VA: 0xCAEBC0
private sealed class SoundManager.<DownloadAudioAssetStorage>c__AnonStorey1 // TypeDefIndex: 6564
{
	// Fields
	internal Action callback; // 0x10

	// Methods

	// RVA: 0x1CFBBCC Offset: 0x1CFBBCC VA: 0x1CFBBCC
	public void .ctor() { }

	// RVA: 0x1CFBD10 Offset: 0x1CFBD10 VA: 0x1CFBD10
	internal void <>m__0() { }
}

// Namespace: 
public class SupportInfoJump // TypeDefIndex: 6565
{
	// Fields
	protected string returnSceneName; // 0x10
	protected OtherUserGameEntity otherUserGameEntity; // 0x18
	protected FollowerInfo followerInfo; // 0x20
	protected FriendStatus.Kind kind; // 0x28
	protected bool isSelect; // 0x2C
	protected int selectClassId; // 0x30
	protected int selectDeckId; // 0x34
	protected EventUpValSetupInfo eventSetupInfo; // 0x38
	protected QuestRestrictionInfo questRestrictionInfo; // 0x40

	// Properties
	public FriendStatus.Kind Kind { get; }
	public bool IsSelect { get; }
	public int SelectClassId { get; }
	public EventUpValSetupInfo EventSetupInfo { get; }
	public QuestRestrictionInfo QuestRestriction { get; }
	public int SelectDeckId { get; set; }

	// Methods

	// RVA: 0x1DBC828 Offset: 0x1DBC828 VA: 0x1DBC828
	public void .ctor(OtherUserGameEntity entity, FriendStatus.Kind kind, bool isSelect = False) { }

	// RVA: 0x1DBC870 Offset: 0x1DBC870 VA: 0x1DBC870
	public void .ctor(FollowerInfo followerInfo, FriendStatus.Kind kind, bool isSelect = False) { }

	// RVA: 0x1DBC8B8 Offset: 0x1DBC8B8 VA: 0x1DBC8B8
	public OtherUserGameEntity GetFriendInfo() { }

	// RVA: 0x1DBC8C0 Offset: 0x1DBC8C0 VA: 0x1DBC8C0
	public FollowerInfo GetFollowerInfo() { }

	// RVA: 0x1DBC8C8 Offset: 0x1DBC8C8 VA: 0x1DBC8C8
	public void SetReturnScene(SceneList.Type type) { }

	// RVA: 0x1DBC944 Offset: 0x1DBC944 VA: 0x1DBC944
	public void SetReturnNowScene() { }

	// RVA: 0x1DBC9B0 Offset: 0x1DBC9B0 VA: 0x1DBC9B0
	public bool IsEnableReturnScene() { }

	// RVA: 0x1DBC9C0 Offset: 0x1DBC9C0 VA: 0x1DBC9C0
	public bool ReturnScene(AvalonSceneManager.FadeType fade = 1, object data) { }

	// RVA: 0x1DBCA5C Offset: 0x1DBCA5C VA: 0x1DBCA5C
	public FriendStatus.Kind get_Kind() { }

	// RVA: 0x1DBCA64 Offset: 0x1DBCA64 VA: 0x1DBCA64
	public bool get_IsSelect() { }

	// RVA: 0x1DBCA6C Offset: 0x1DBCA6C VA: 0x1DBCA6C
	public void SetSelectClassId(int classId) { }

	// RVA: 0x1DBCA74 Offset: 0x1DBCA74 VA: 0x1DBCA74
	public int get_SelectClassId() { }

	// RVA: 0x1DBCA7C Offset: 0x1DBCA7C VA: 0x1DBCA7C
	public void SetSetupInfo(EventUpValSetupInfo eventSetupInfo, QuestRestrictionInfo questRestrictionInfo) { }

	// RVA: 0x1DBCA84 Offset: 0x1DBCA84 VA: 0x1DBCA84
	public EventUpValSetupInfo get_EventSetupInfo() { }

	// RVA: 0x1DBCA8C Offset: 0x1DBCA8C VA: 0x1DBCA8C
	public QuestRestrictionInfo get_QuestRestriction() { }

	// RVA: 0x1DBCA94 Offset: 0x1DBCA94 VA: 0x1DBCA94
	public void set_SelectDeckId(int value) { }

	// RVA: 0x1DBCA9C Offset: 0x1DBCA9C VA: 0x1DBCA9C
	public int get_SelectDeckId() { }
}

// Namespace: 
public class TestManager : SingletonMonoBehaviour<TestManager> // TypeDefIndex: 6566
{
	// Fields
	private static AndroidJavaClass classPlugin; // 0x0
	private static AndroidJavaObject objPlugin; // 0x8

	// Methods

	// RVA: 0x141CF1C Offset: 0x141CF1C VA: 0x141CF1C
	public void .ctor() { }

	// RVA: 0x141CF6C Offset: 0x141CF6C VA: 0x141CF6C
	public void Awake() { }

	// RVA: 0x141D068 Offset: 0x141D068 VA: 0x141D068
	public static void CallFuncA(string str) { }

	// RVA: 0x141D198 Offset: 0x141D198 VA: 0x141D198
	public static string CallFuncB(string str) { }

	// RVA: 0x141D2CC Offset: 0x141D2CC VA: 0x141D2CC
	public static void CallFuncC(string str) { }

	// RVA: 0x141D450 Offset: 0x141D450 VA: 0x141D450
	private static void .cctor() { }
}

// Namespace: 
public class UIRectUpdater : SingletonMonoBehaviour<UIRectUpdater> // TypeDefIndex: 6567
{
	// Fields
	private HashSet<UIRect> rects; // 0x18
	private bool isRectsDirty; // 0x20
	private List<UIRect> indexableRects; // 0x28

	// Methods

	// RVA: 0x21C2FC4 Offset: 0x21C2FC4 VA: 0x21C2FC4
	public void .ctor() { }

	// RVA: 0x21C22E0 Offset: 0x21C22E0 VA: 0x21C22E0
	public void Register(UIRect rect) { }

	// RVA: 0x21C235C Offset: 0x21C235C VA: 0x21C235C
	public void Unregister(UIRect rect) { }

	// RVA: 0x21C3064 Offset: 0x21C3064 VA: 0x21C3064
	private void Update() { }
}

// Namespace: 
public class UserSaveData // TypeDefIndex: 6568
{
	// Methods

	// RVA: 0x1A3F7A8 Offset: 0x1A3F7A8 VA: 0x1A3F7A8
	public void .ctor() { }

	// RVA: 0x1A3F7B0 Offset: 0x1A3F7B0 VA: 0x1A3F7B0
	public static void DeleteSaveData(bool clearAsset = True) { }

	// RVA: 0x1A3FDF0 Offset: 0x1A3FDF0 VA: 0x1A3FDF0
	public static void DeleteContinueData() { }

	// RVA: 0x1A3F840 Offset: 0x1A3F840 VA: 0x1A3F840
	protected static void InitContinueData(bool isEnforceClear) { }
}

// Namespace: 
public class WebViewManager : SingletonMonoBehaviour<WebViewManager> // TypeDefIndex: 6569
{
	// Fields
	protected static readonly float OPEN_TIME; // 0x0
	protected static readonly float CLOSE_TIME; // 0x4
	[SerializeField] // RVA: 0xCC119C Offset: 0xCC119C VA: 0xCC119C
	protected UIPanel basePanel; // 0x18
	[SerializeField] // RVA: 0xCC11AC Offset: 0xCC11AC VA: 0xCC11AC
	protected UIWidget baseWindow; // 0x20
	[SerializeField] // RVA: 0xCC11BC Offset: 0xCC11BC VA: 0xCC11BC
	protected UIWidget webViewBase; // 0x28
	[SerializeField] // RVA: 0xCC11CC Offset: 0xCC11CC VA: 0xCC11CC
	protected UIWidget webViewScreen; // 0x30
	[SerializeField] // RVA: 0xCC11DC Offset: 0xCC11DC VA: 0xCC11DC
	protected Camera commonCamera; // 0x38
	[SerializeField] // RVA: 0xCC11EC Offset: 0xCC11EC VA: 0xCC11EC
	protected UILabel titleLabel; // 0x40
	protected Action callbackFunc; // 0x48
	protected bool isButtonEnable; // 0x50
	protected WebViewObject webView; // 0x58
	protected string errorMessage; // 0x60

	// Properties
	public bool IsBusy { get; }
	protected bool IsWideThan16to9 { get; }
	protected float ScreenToUiRatio { get; }

	// Methods

	// RVA: 0x193BB5C Offset: 0x193BB5C VA: 0x193BB5C
	public void .ctor() { }

	// RVA: 0x193BBAC Offset: 0x193BBAC VA: 0x193BBAC
	public bool get_IsBusy() { }

	// RVA: 0x193BC64 Offset: 0x193BC64 VA: 0x193BC64
	protected bool get_IsWideThan16to9() { }

	// RVA: 0x193BCAC Offset: 0x193BCAC VA: 0x193BCAC
	protected float get_ScreenToUiRatio() { }

	// RVA: 0x193BD84 Offset: 0x193BD84 VA: 0x193BD84
	public static bool OpenNews(string title, int id, Action callbackFunc) { }

	// RVA: 0x193BF54 Offset: 0x193BF54 VA: 0x193BF54
	public static bool OpenViewDynamic(string title, string path, Action callbackFunc) { }

	// RVA: 0x193B96C Offset: 0x193B96C VA: 0x193B96C
	public static bool OpenView(string title, string path, Action callbackFunc) { }

	// RVA: 0x193C6A4 Offset: 0x193C6A4 VA: 0x193C6A4
	public static bool OpenStringView(string title, string text, Action callbackFunc) { }

	// RVA: 0x193BE50 Offset: 0x193BE50 VA: 0x193BE50
	protected bool OpenNewsLocal(string title, int id, Action callbackFunc) { }

	// RVA: 0x193C09C Offset: 0x193C09C VA: 0x193C09C
	protected bool OpenViewLocal(string title, string path, string data, Action callbackFunc) { }

	// RVA: 0x193C910 Offset: 0x193C910 VA: 0x193C910
	protected void EndOpen() { }

	// RVA: 0x193C91C Offset: 0x193C91C VA: 0x193C91C
	protected void OnStarted(string message) { }

	// RVA: 0x193C920 Offset: 0x193C920 VA: 0x193C920
	protected void OnLoadComplete(string message) { }

	// RVA: 0x193C954 Offset: 0x193C954 VA: 0x193C954
	protected void OnError(string msg) { }

	// RVA: 0x193C95C Offset: 0x193C95C VA: 0x193C95C
	protected void OnReceivedMessage(string msg) { }

	// RVA: 0x193D90C Offset: 0x193D90C VA: 0x193D90C
	protected void OpenSupportMail(bool isInquiry) { }

	// RVA: 0x193DCC8 Offset: 0x193DCC8 VA: 0x193DCC8
	protected void OnWebViewStore(string url) { }

	// RVA: 0x193DD64 Offset: 0x193DD64 VA: 0x193DD64
	public void OnClickBack() { }

	// RVA: 0x193D760 Offset: 0x193D760 VA: 0x193D760
	public void OnClickClose() { }

	// RVA: 0x193DE2C Offset: 0x193DE2C VA: 0x193DE2C
	protected void EndClose() { }

	// RVA: 0x193DF34 Offset: 0x193DF34 VA: 0x193DF34
	public void PressBackKey() { }

	// RVA: 0x193C770 Offset: 0x193C770 VA: 0x193C770
	protected void SetMargins() { }

	// RVA: 0x193E024 Offset: 0x193E024 VA: 0x193E024
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3749C Offset: 0xD3749C VA: 0xD3749C
	// RVA: 0x193E07C Offset: 0x193E07C VA: 0x193E07C
	private void <OpenViewLocal>m__0(string msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xD374AC Offset: 0xD374AC VA: 0xD374AC
	// RVA: 0x193E080 Offset: 0x193E080 VA: 0x193E080
	private void <OpenViewLocal>m__1(string msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xD374BC Offset: 0xD374BC VA: 0xD374BC
	// RVA: 0x193E088 Offset: 0x193E088 VA: 0x193E088
	private void <OpenViewLocal>m__2(string msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xD374CC Offset: 0xD374CC VA: 0xD374CC
	// RVA: 0x193E090 Offset: 0x193E090 VA: 0x193E090
	private void <OpenViewLocal>m__3(string msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xD374DC Offset: 0xD374DC VA: 0xD374DC
	// RVA: 0x193E094 Offset: 0x193E094 VA: 0x193E094
	private void <OpenViewLocal>m__4(string msg) { }
}

// Namespace: 
public class Bezier // TypeDefIndex: 6570
{
	// Methods

	// RVA: 0x1EE6264 Offset: 0x1EE6264 VA: 0x1EE6264
	public void .ctor() { }

	// RVA: 0x1EE626C Offset: 0x1EE626C VA: 0x1EE626C
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t) { }

	// RVA: 0x1EE6384 Offset: 0x1EE6384 VA: 0x1EE6384
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) { }

	// RVA: 0x1EE657C Offset: 0x1EE657C VA: 0x1EE657C
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t) { }

	// RVA: 0x1EE66D8 Offset: 0x1EE66D8 VA: 0x1EE66D8
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) { }
}

// Namespace: 
public enum BezierControlPointMode // TypeDefIndex: 6571
{
	// Fields
	public int value__; // 0x0
	public const BezierControlPointMode Free = 0;
	public const BezierControlPointMode Aligned = 1;
	public const BezierControlPointMode Mirrored = 2;
}

// Namespace: 
public class Custom2dSplineMesh : MonoBehaviour // TypeDefIndex: 6572
{
	// Fields
	private static float JUMP_THRESH_HOLD; // 0x0
	[SerializeField] // RVA: 0xCC11FC Offset: 0xCC11FC VA: 0xCC11FC
	[HideInInspector] // RVA: 0xCC11FC Offset: 0xCC11FC VA: 0xCC11FC
	public Vector3[] points; // 0x18
	[SerializeField] // RVA: 0xCC1234 Offset: 0xCC1234 VA: 0xCC1234
	private BezierControlPointMode[] modes; // 0x20
	[SerializeField] // RVA: 0xCC1244 Offset: 0xCC1244 VA: 0xCC1244
	private float[] curveWeight; // 0x28
	public Vector3 PointOffset; // 0x30
	private float PathRate; // 0x3C
	public Custom2dSplineMesh.FlattenAxis flattenAxis; // 0x40
	public bool FlipMesh; // 0x44
	public bool DrawPath; // 0x45
	public bool ResetOnUpdate; // 0x46
	public float UVrate; // 0x48
	public float UVslice; // 0x4C
	public float complexity; // 0x50
	public float directionChange; // 0x54
	public bool createVertsEveryStep; // 0x58
	public float DrawWidth; // 0x5C
	public bool flattenAxisAsWidthVariable; // 0x60
	public float AxisWidthOffset; // 0x64
	public bool DrawCap; // 0x68
	public bool CutOnFreePoint; // 0x69
	public bool StrictUVmode; // 0x6A
	public int CapComplexity; // 0x6C
	private Mesh drawMesh; // 0x70
	private MeshFilter meshFilter; // 0x78
	private List<Vector3> splinePos; // 0x80
	private float capVmin; // 0x88
	private float capVmax; // 0x8C
	private float lineVmin; // 0x90
	private float lineVmax; // 0x94
	private List<Vector3> verts; // 0x98
	private List<int> trianges; // 0xA0
	private List<Vector2> uvs; // 0xA8
	private int vtxIdx; // 0xB0

	// Properties
	public int CurveCount { get; }
	public int ControlPointCount { get; }

	// Methods

	// RVA: 0x197B6EC Offset: 0x197B6EC VA: 0x197B6EC
	public void .ctor() { }

	// RVA: 0x197B784 Offset: 0x197B784 VA: 0x197B784
	public int get_CurveCount() { }

	// RVA: 0x197B7CC Offset: 0x197B7CC VA: 0x197B7CC
	public int get_ControlPointCount() { }

	// RVA: 0x197B7F8 Offset: 0x197B7F8 VA: 0x197B7F8
	public Vector3 GetControlPoint(int index) { }

	// RVA: 0x197B854 Offset: 0x197B854 VA: 0x197B854
	public BezierControlPointMode GetControlPointMode(int index) { }

	// RVA: 0x197B8C4 Offset: 0x197B8C4 VA: 0x197B8C4
	public void SetControlPoint(int index, Vector3 point) { }

	// RVA: 0x197BF58 Offset: 0x197BF58 VA: 0x197BF58
	public void SetControlPointMode(int index, BezierControlPointMode mode) { }

	// RVA: 0x197BB90 Offset: 0x197BB90 VA: 0x197BB90
	private void EnforceMode(int index) { }

	// RVA: 0x197BFE8 Offset: 0x197BFE8 VA: 0x197BFE8
	public void Reset() { }

	// RVA: 0x197C1DC Offset: 0x197C1DC VA: 0x197C1DC
	public float GetTotalWeight() { }

	// RVA: 0x197C440 Offset: 0x197C440 VA: 0x197C440
	public float GetCurveWeight(int index) { }

	// RVA: 0x197C278 Offset: 0x197C278 VA: 0x197C278
	private void checkWeightNull() { }

	// RVA: 0x197C4B4 Offset: 0x197C4B4 VA: 0x197C4B4
	public void ChangeWeight(int index, float value) { }

	// RVA: 0x197C544 Offset: 0x197C544 VA: 0x197C544
	public int AddCurve(int index) { }

	// RVA: 0x197D09C Offset: 0x197D09C VA: 0x197D09C
	public void DeletePoint(int index) { }

	// RVA: 0x197D380 Offset: 0x197D380 VA: 0x197D380
	public Vector3 GetPoint(float t) { }

	// RVA: 0x197D68C Offset: 0x197D68C VA: 0x197D68C
	public Vector3 GetPointAsWorld(float t) { }

	// RVA: 0x197D784 Offset: 0x197D784 VA: 0x197D784
	public Vector3 GetPointAsWorldFlatten(float t) { }

	// RVA: 0x197D8E0 Offset: 0x197D8E0 VA: 0x197D8E0
	public Vector3 GetVelocity(float t) { }

	// RVA: 0x197DB74 Offset: 0x197DB74 VA: 0x197DB74
	public Vector3 GetDirection(float t) { }

	// RVA: 0x197D52C Offset: 0x197D52C VA: 0x197D52C
	private int GetWeightedPointIdxAndT(float t, out float innerT) { }

	// RVA: 0x197DBA4 Offset: 0x197DBA4 VA: 0x197DBA4
	private void Start() { }

	// RVA: 0x197EFF8 Offset: 0x197EFF8 VA: 0x197EFF8
	private void Update() { }

	// RVA: 0x197F238 Offset: 0x197F238 VA: 0x197F238
	private void OnDestroy() { }

	// RVA: 0x197F2E0 Offset: 0x197F2E0 VA: 0x197F2E0
	public void SetPathRate(float pRate) { }

	// RVA: 0x197F2E8 Offset: 0x197F2E8 VA: 0x197F2E8
	public float GetPathRate() { }

	// RVA: 0x197DC1C Offset: 0x197DC1C VA: 0x197DC1C
	private void SetList() { }

	// RVA: 0x197F2F0 Offset: 0x197F2F0 VA: 0x197F2F0
	public void DrawOnUI() { }

	// RVA: 0x197F2F4 Offset: 0x197F2F4 VA: 0x197F2F4
	public void CreateMesh() { }

	// RVA: 0x197F36C Offset: 0x197F36C VA: 0x197F36C
	public void RemoveMesh() { }

	// RVA: 0x197F3A0 Offset: 0x197F3A0 VA: 0x197F3A0
	private Vector3 upVec() { }

	// RVA: 0x197F408 Offset: 0x197F408 VA: 0x197F408
	private Vector3 GetOffset(float rate) { }

	// RVA: 0x197F69C Offset: 0x197F69C VA: 0x197F69C
	private Vector3 RotateVec3(float angleDegree, Vector3 org) { }

	// RVA: 0x197F5FC Offset: 0x197F5FC VA: 0x197F5FC
	private float GetWidth(float rate) { }

	// RVA: 0x197D8B0 Offset: 0x197D8B0 VA: 0x197D8B0
	private Vector3 GetFlatten(Vector3 org) { }

	// RVA: 0x197F7E4 Offset: 0x197F7E4 VA: 0x197F7E4
	private Vector2 GetUV(Vector3 pos, float coordU, float coordV) { }

	// RVA: 0x197F82C Offset: 0x197F82C VA: 0x197F82C
	private Vector2 GetUV(Vector3 pos) { }

	// RVA: 0x197F944 Offset: 0x197F944 VA: 0x197F944
	private bool isJumpcut(float now, float increment, out float jumps) { }

	// RVA: 0x197DCA8 Offset: 0x197DCA8 VA: 0x197DCA8
	private void GenMesh() { }

	// RVA: 0x197FA5C Offset: 0x197FA5C VA: 0x197FA5C
	private void AddCap(Vector3 pos, Vector3 normalizedDir, Vector3 offset, float width, bool isTail) { }

	// RVA: 0x1980F00 Offset: 0x1980F00 VA: 0x1980F00
	private static void .cctor() { }
}

// Namespace: 
public enum Custom2dSplineMesh.FlattenAxis // TypeDefIndex: 6573
{
	// Fields
	public int value__; // 0x0
	public const Custom2dSplineMesh.FlattenAxis X = 0;
	public const Custom2dSplineMesh.FlattenAxis Y = 1;
	public const Custom2dSplineMesh.FlattenAxis Z = 2;
}

// Namespace: 
public class AppendPassiveSkillInfo // TypeDefIndex: 6574
{
	// Fields
	public int skillId; // 0x10
	public int skillLv; // 0x14

	// Methods

	// RVA: 0x15AD640 Offset: 0x15AD640 VA: 0x15AD640
	public void .ctor() { }
}

// Namespace: 
public class BattleInfoData // TypeDefIndex: 6575
{
	// Fields
	public int dataVer; // 0x10
	public string appVer; // 0x18
	public int targetUserSvtId; // 0x20
	public int userEquipId; // 0x24
	public bool useEventEquip; // 0x28
	public DeckData myDeck; // 0x30
	public DeckData[] enemyDeck; // 0x38
	public BattleRaidInfo[] raidInfo; // 0x40
	public BattleRaidInfo[] startRaidInfo; // 0x48
	public BattleSuperBossInfo[] superBossInfo; // 0x50
	public BattleWarBoardInfo warBoardBattleInfo; // 0x58
	public UserFormationData userFormation; // 0x60
	public BattleUserServantData[] userSvt; // 0x68
	public DeckData transformDeck; // 0x70
	public DeckData[] callDeck; // 0x78
	public DeckData[] shiftDeck; // 0x80
	public DeckData aiNpcDeck; // 0x88
	public int friendId; // 0x90
	public int id; // 0x94
	public bool isCompress; // 0x98
	public string resultInfo; // 0xA0
	public string resultInfoBlob; // 0xA8
	public int targetId; // 0xB0
	public int useOrderCnt; // 0xB4
	public int useOrderMax; // 0xB8
	public int userId; // 0xBC
	public int blankCardCnt; // 0xC0
	public int groundNo; // 0xC4
	public BattleInfoData.UsedBoostItem[] boostItems; // 0xC8
	private BaseBattleServantEvent servantEvent; // 0xD0
	public BattleInfoData.UsedBoost[] boosts; // 0xD8

	// Properties
	public BattleDeckServantData[] AiNpcDeckSvts { get; }

	// Methods

	// RVA: 0x1672418 Offset: 0x1672418 VA: 0x1672418
	public void .ctor() { }

	// RVA: 0x1672480 Offset: 0x1672480 VA: 0x1672480
	public BattleDeckServantData[] get_AiNpcDeckSvts() { }

	// RVA: 0x16724EC Offset: 0x16724EC VA: 0x16724EC
	public void SetServantEvent(BaseBattleServantEvent svtEvent) { }

	// RVA: 0x16724F4 Offset: 0x16724F4 VA: 0x16724F4
	public BaseBattleServantEvent GetServantEvent() { }

	// RVA: 0x1672560 Offset: 0x1672560 VA: 0x1672560
	public BattleUserServantData getUserServantFromID(long usersvtid) { }

	// RVA: 0x16726B8 Offset: 0x16726B8 VA: 0x16726B8
	public BattleUserServantData getEquipFromID(long usersvtid) { }

	// RVA: 0x1672810 Offset: 0x1672810 VA: 0x1672810
	public DeckData getEnemyDeck(int battlecount) { }

	// RVA: 0x1672864 Offset: 0x1672864 VA: 0x1672864
	public bool isNextBattle(int battlecount) { }

	// RVA: 0x16728A0 Offset: 0x16728A0 VA: 0x16728A0
	public bool isLastStage(int wavecount) { }

	// RVA: 0x16728DC Offset: 0x16728DC VA: 0x16728DC
	public int getLastWave() { }

	// RVA: 0x167290C Offset: 0x167290C VA: 0x167290C
	public int getGroundNo() { }

	// RVA: 0x1672914 Offset: 0x1672914 VA: 0x1672914
	public int[] getBoostSKillIds() { }

	// RVA: 0x1672A28 Offset: 0x1672A28 VA: 0x1672A28
	public int getBoostItemImageId(int index, bool reboot = False) { }

	// RVA: 0x1672BAC Offset: 0x1672BAC VA: 0x1672BAC
	public BattleBoostItem[] getBattleBoostItemList(bool reboot = False) { }

	// RVA: 0x1672E4C Offset: 0x1672E4C VA: 0x1672E4C
	public int getRaidDay(int uniqueId) { }

	// RVA: 0x1672EDC Offset: 0x1672EDC VA: 0x1672EDC
	public long getRaidBossMaxHp(int raidId) { }

	// RVA: 0x1672F6C Offset: 0x1672F6C VA: 0x1672F6C
	public BattleRaidInfo getMyInfo(int day) { }

	// RVA: 0x1672FFC Offset: 0x1672FFC VA: 0x1672FFC
	public string getStartRaidState(int eventId, int raidId) { }

	// RVA: 0x1673220 Offset: 0x1673220 VA: 0x1673220
	public BattleDeckServantData getTransformDeckServantData(int uniqueId, int trIndex) { }

	// RVA: 0x16732D8 Offset: 0x16732D8 VA: 0x16732D8
	public BattleDeckServantData getDeckServantData(int uniqueId) { }

	// RVA: 0x1673378 Offset: 0x1673378 VA: 0x1673378
	public BattleDeckServantData getEnemyDeckServantData(int uniqueId) { }

	// RVA: 0x1673468 Offset: 0x1673468 VA: 0x1673468
	public long getSuperBossMaxHp(int id) { }

	// RVA: 0x16734F8 Offset: 0x16734F8 VA: 0x16734F8
	public long getSuperBossNokoriHp(int id) { }

	// RVA: 0x167358C Offset: 0x167358C VA: 0x167358C
	public BattleDeckServantData getSummonServantData(int npcId) { }

	// RVA: 0x167367C Offset: 0x167367C VA: 0x167367C
	public BattleDeckServantData getShiftServantData(int npcId) { }

	// RVA: 0x167376C Offset: 0x167376C VA: 0x167376C
	public BattleDeckServantData getDefaultServantData(int uniqueId) { }

	// RVA: 0x167385C Offset: 0x167385C VA: 0x167385C
	public int getLastUniqueID() { }

	// RVA: 0x1673944 Offset: 0x1673944 VA: 0x1673944
	public int getRaidId() { }

	// RVA: 0x1673A50 Offset: 0x1673A50 VA: 0x1673A50
	public int[] getAliveEnemys(int nowWaveCount, int[] nowWaveAliveEnemys) { }
