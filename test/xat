
	// RVA: 0x12FDA18 Offset: 0x12FDA18 VA: 0x12FDA18 Slot: 37
	public bool Equals(Type o) { }

	// RVA: 0x12FDA88 Offset: 0x12FDA88 VA: 0x12FDA88
	internal bool EqualsInternal(Type type) { }

	// RVA: 0x12FDA8C Offset: 0x12FDA8C VA: 0x12FDA8C
	private static Type internal_from_handle(IntPtr handle) { }

	// RVA: 0x12FDA90 Offset: 0x12FDA90 VA: 0x12FDA90
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x12FDA9C Offset: 0x12FDA9C VA: 0x12FDA9C
	public static Type GetType(string typeName) { }

	// RVA: 0x12FDB50 Offset: 0x12FDB50 VA: 0x12FDB50
	public static Type GetType(string typeName, bool throwOnError) { }

	// RVA: 0x12FDCC8 Offset: 0x12FDCC8 VA: 0x12FDCC8
	internal static TypeCode GetTypeCodeInternal(Type type) { }

	// RVA: 0x12FDCCC Offset: 0x12FDCCC VA: 0x12FDCCC
	public static TypeCode GetTypeCode(Type type) { }

	// RVA: 0x12FD62C Offset: 0x12FD62C VA: 0x12FD62C
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { }

	// RVA: 0x12FDDA8 Offset: 0x12FDDA8 VA: 0x12FDDA8
	public static RuntimeTypeHandle GetTypeHandle(object o) { }

	// RVA: 0x12FD958 Offset: 0x12FD958 VA: 0x12FD958
	internal static bool type_is_subtype_of(Type a, Type b, bool check_interfaces) { }

	// RVA: 0x12FDE4C Offset: 0x12FDE4C VA: 0x12FDE4C
	internal static bool type_is_assignable_from(Type a, Type b) { }

	// RVA: 0x12FDE50 Offset: 0x12FDE50 VA: 0x12FDE50 Slot: 38
	public Type GetType() { }

	[ComVisibleAttribute] // RVA: 0xC386C4 Offset: 0xC386C4 VA: 0xC386C4
	// RVA: 0x12FDE58 Offset: 0x12FDE58 VA: 0x12FDE58 Slot: 39
	public virtual bool IsSubclassOf(Type c) { }

	// RVA: -1 Offset: -1 Slot: 40
	public abstract Type[] GetInterfaces();

	// RVA: 0x12FDF38 Offset: 0x12FDF38 VA: 0x12FDF38 Slot: 41
	public virtual bool IsAssignableFrom(Type c) { }

	// RVA: 0x12FE0B0 Offset: 0x12FE0B0 VA: 0x12FE0B0 Slot: 42
	public virtual bool IsInstanceOfType(object o) { }

	// RVA: 0x12FE0B4 Offset: 0x12FE0B4 VA: 0x12FE0B4 Slot: 43
	public virtual int GetArrayRank() { }

	// RVA: -1 Offset: -1 Slot: 44
	public abstract Type GetElementType();

	// RVA: 0x12FE11C Offset: 0x12FE11C VA: 0x12FE11C Slot: 45
	public EventInfo GetEvent(string name) { }

	// RVA: -1 Offset: -1 Slot: 46
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);

	// RVA: 0x12FE130 Offset: 0x12FE130 VA: 0x12FE130 Slot: 47
	public virtual EventInfo[] GetEvents() { }

	// RVA: -1 Offset: -1 Slot: 48
	public abstract EventInfo[] GetEvents(BindingFlags bindingAttr);

	// RVA: 0x12FE144 Offset: 0x12FE144 VA: 0x12FE144 Slot: 49
	public FieldInfo GetField(string name) { }

	// RVA: -1 Offset: -1 Slot: 50
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);

	// RVA: 0x12FE158 Offset: 0x12FE158 VA: 0x12FE158 Slot: 51
	public FieldInfo[] GetFields() { }

	// RVA: -1 Offset: -1 Slot: 52
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);

	// RVA: 0x12FE16C Offset: 0x12FE16C VA: 0x12FE16C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x12FE1C8 Offset: 0x12FE1C8 VA: 0x12FE1C8 Slot: 53
	public MethodInfo GetMethod(string name) { }

	// RVA: 0x12FE284 Offset: 0x12FE284 VA: 0x12FE284 Slot: 54
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr) { }

	// RVA: 0x12FE344 Offset: 0x12FE344 VA: 0x12FE344 Slot: 55
	public MethodInfo GetMethod(string name, Type[] types) { }

	// RVA: 0x12FE4A8 Offset: 0x12FE4A8 VA: 0x12FE4A8 Slot: 56
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x12FE360 Offset: 0x12FE360 VA: 0x12FE360 Slot: 57
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 58
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);

	// RVA: 0x12FE4C0 Offset: 0x12FE4C0 VA: 0x12FE4C0
	internal MethodInfo GetMethodImplInternal(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 59
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);

	// RVA: -1 Offset: -1 Slot: 60
	public abstract Type[] GetNestedTypes(BindingFlags bindingAttr);

	// RVA: 0x12FE4D0 Offset: 0x12FE4D0 VA: 0x12FE4D0 Slot: 61
	public PropertyInfo[] GetProperties() { }

	// RVA: -1 Offset: -1 Slot: 62
	public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr);

	// RVA: 0x12FE4E4 Offset: 0x12FE4E4 VA: 0x12FE4E4 Slot: 63
	public PropertyInfo GetProperty(string name) { }

	// RVA: 0x12FE5A0 Offset: 0x12FE5A0 VA: 0x12FE5A0 Slot: 64
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr) { }

	// RVA: 0x12FE660 Offset: 0x12FE660 VA: 0x12FE660 Slot: 65
	public PropertyInfo GetProperty(string name, Type returnType) { }

	// RVA: 0x12FE720 Offset: 0x12FE720 VA: 0x12FE720 Slot: 66
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types) { }

	// RVA: 0x12FE740 Offset: 0x12FE740 VA: 0x12FE740 Slot: 67
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 68
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);

	// RVA: 0x12FE888 Offset: 0x12FE888 VA: 0x12FE888
	internal PropertyInfo GetPropertyImplInternal(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: -1 Offset: -1 Slot: 69
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);

	// RVA: -1 Offset: -1 Slot: 70
	protected abstract TypeAttributes GetAttributeFlagsImpl();

	// RVA: -1 Offset: -1 Slot: 71
	protected abstract bool HasElementTypeImpl();

	// RVA: -1 Offset: -1 Slot: 72
	protected abstract bool IsArrayImpl();

	// RVA: -1 Offset: -1 Slot: 73
	protected abstract bool IsByRefImpl();

	// RVA: -1 Offset: -1 Slot: 74
	protected abstract bool IsPointerImpl();

	// RVA: -1 Offset: -1 Slot: 75
	protected abstract bool IsPrimitiveImpl();

	// RVA: 0x12FE898 Offset: 0x12FE898 VA: 0x12FE898
	internal static bool IsArrayImpl(Type type) { }

	// RVA: 0x12FE89C Offset: 0x12FE89C VA: 0x12FE89C Slot: 76
	protected virtual bool IsValueTypeImpl() { }

	// RVA: 0x12FE9A0 Offset: 0x12FE9A0 VA: 0x12FE9A0 Slot: 77
	protected virtual bool IsContextfulImpl() { }

	// RVA: 0x12FEA34 Offset: 0x12FEA34 VA: 0x12FEA34 Slot: 78
	protected virtual bool IsMarshalByRefImpl() { }

	[ComVisibleAttribute] // RVA: 0xC386D8 Offset: 0xC386D8 VA: 0xC386D8
	// RVA: 0x12FEAC8 Offset: 0x12FEAC8 VA: 0x12FEAC8 Slot: 79
	public ConstructorInfo GetConstructor(Type[] types) { }

	[ComVisibleAttribute] // RVA: 0xC386EC Offset: 0xC386EC VA: 0xC386EC
	// RVA: 0x12FEC04 Offset: 0x12FEC04 VA: 0x12FEC04 Slot: 80
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0xC38700 Offset: 0xC38700 VA: 0xC38700
	// RVA: 0x12FEAE4 Offset: 0x12FEAE4 VA: 0x12FEAE4 Slot: 81
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0xC38714 Offset: 0xC38714 VA: 0xC38714
	// RVA: -1 Offset: -1 Slot: 82
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);

	// RVA: -1 Offset: -1 Slot: 83
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);

	// RVA: 0x12FEC1C Offset: 0x12FEC1C VA: 0x12FEC1C Slot: 3
	public override string ToString() { }

	// RVA: 0x12FD904 Offset: 0x12FD904 VA: 0x12FD904
	internal bool get_IsSystemType() { }

	// RVA: 0x12FEC2C Offset: 0x12FEC2C VA: 0x12FEC2C Slot: 84
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x12FEC94 Offset: 0x12FEC94 VA: 0x12FEC94 Slot: 85
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x12FEC9C Offset: 0x12FEC9C VA: 0x12FEC9C Slot: 86
	public virtual bool get_IsGenericTypeDefinition() { }

	// RVA: 0x12FECA0 Offset: 0x12FECA0 VA: 0x12FECA0
	internal Type GetGenericTypeDefinition_impl() { }

	// RVA: 0x12FECA4 Offset: 0x12FECA4 VA: 0x12FECA4 Slot: 87
	public virtual Type GetGenericTypeDefinition() { }

	// RVA: 0x12FED18 Offset: 0x12FED18 VA: 0x12FED18 Slot: 88
	public virtual bool get_IsGenericType() { }

	// RVA: 0x12FED1C Offset: 0x12FED1C VA: 0x12FED1C
	private static Type MakeGenericType(Type gt, Type[] types) { }

	// RVA: 0x12FED20 Offset: 0x12FED20 VA: 0x12FED20 Slot: 89
	public virtual Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x12FF0D8 Offset: 0x12FF0D8 VA: 0x12FF0D8 Slot: 90
	public virtual bool get_IsGenericParameter() { }

	// RVA: 0x12FF0E0 Offset: 0x12FF0E0 VA: 0x12FF0E0
	public bool get_IsNested() { }

	// RVA: 0x12FF104 Offset: 0x12FF104 VA: 0x12FF104
	private Type make_array_type(int rank) { }

	// RVA: 0x12FF108 Offset: 0x12FF108 VA: 0x12FF108 Slot: 91
	public virtual Type MakeArrayType() { }

	// RVA: 0x12FF110 Offset: 0x12FF110 VA: 0x12FF110
	private Type make_byref_type() { }

	// RVA: 0x12FF114 Offset: 0x12FF114 VA: 0x12FF114 Slot: 92
	public virtual Type MakeByRefType() { }

	// RVA: 0x12FF118 Offset: 0x12FF118 VA: 0x12FF118
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x12FF2E0 Offset: 0x12FF2E0 VA: 0x12FF2E0
	internal bool get_IsUserType() { }
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xC2F62C Offset: 0xC2F62C VA: 0xC2F62C
[ComVisibleAttribute] // RVA: 0xC2F62C Offset: 0xC2F62C VA: 0xC2F62C
[ComDefaultInterfaceAttribute] // RVA: 0xC2F62C Offset: 0xC2F62C VA: 0xC2F62C
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 52
{
	// Properties
	public abstract Type DeclaringType { get; }
	public abstract MemberTypes MemberType { get; }
	public abstract string Name { get; }
	public abstract Type ReflectedType { get; }
	public virtual Module Module { get; }

	// Methods

	// RVA: 0x11105D8 Offset: 0x11105D8 VA: 0x11105D8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract Type get_DeclaringType();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract MemberTypes get_MemberType();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract Type get_ReflectedType();

	// RVA: 0x10FE9F4 Offset: 0x10FE9F4 VA: 0x10FE9F4 Slot: 10
	public virtual Module get_Module() { }

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool IsDefined(Type attributeType, bool inherit);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract object[] GetCustomAttributes(bool inherit);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC2F6B8 Offset: 0xC2F6B8 VA: 0xC2F6B8
public interface ICustomAttributeProvider // TypeDefIndex: 53
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsDefined(Type attributeType, bool inherit);
}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0xC2F6CC Offset: 0xC2F6CC VA: 0xC2F6CC
[TypeLibImportClassAttribute] // RVA: 0xC2F6CC Offset: 0xC2F6CC VA: 0xC2F6CC
[InterfaceTypeAttribute] // RVA: 0xC2F6CC Offset: 0xC2F6CC VA: 0xC2F6CC
[ComVisibleAttribute] // RVA: 0xC2F6CC Offset: 0xC2F6CC VA: 0xC2F6CC
[GuidAttribute] // RVA: 0xC2F6CC Offset: 0xC2F6CC VA: 0xC2F6CC
public interface _MemberInfo // TypeDefIndex: 54
{}

// Namespace: System.Reflection
[GuidAttribute] // RVA: 0xC2F790 Offset: 0xC2F790 VA: 0xC2F790
[ComVisibleAttribute] // RVA: 0xC2F790 Offset: 0xC2F790 VA: 0xC2F790
public interface IReflect // TypeDefIndex: 55
{}

// Namespace: System.Runtime.InteropServices
[CLSCompliantAttribute] // RVA: 0xC2F7E0 Offset: 0xC2F7E0 VA: 0xC2F7E0
[ComVisibleAttribute] // RVA: 0xC2F7E0 Offset: 0xC2F7E0 VA: 0xC2F7E0
[TypeLibImportClassAttribute] // RVA: 0xC2F7E0 Offset: 0xC2F7E0 VA: 0xC2F7E0
[GuidAttribute] // RVA: 0xC2F7E0 Offset: 0xC2F7E0 VA: 0xC2F7E0
[InterfaceTypeAttribute] // RVA: 0xC2F7E0 Offset: 0xC2F7E0 VA: 0xC2F7E0
public interface _Type // TypeDefIndex: 56
{}

// Namespace: System
[ComDefaultInterfaceAttribute] // RVA: 0xC2F8A4 Offset: 0xC2F8A4 VA: 0xC2F8A4
[ClassInterfaceAttribute] // RVA: 0xC2F8A4 Offset: 0xC2F8A4 VA: 0xC2F8A4
[ComVisibleAttribute] // RVA: 0xC2F8A4 Offset: 0xC2F8A4 VA: 0xC2F8A4
[Serializable]
public class Exception : ISerializable, _Exception // TypeDefIndex: 57
{
	// Fields
	private IntPtr[] trace_ips; // 0x10
	private Exception inner_exception; // 0x18
	internal string message; // 0x20
	private string help_link; // 0x28
	private string class_name; // 0x30
	private string stack_trace; // 0x38
	private string _remoteStackTraceString; // 0x40
	private int remote_stack_index; // 0x48
	internal int hresult; // 0x4C
	private string source; // 0x50
	private IDictionary _data; // 0x58

	// Properties
	public Exception InnerException { get; }
	protected int HResult { get; set; }
	private string ClassName { get; }
	public virtual string Message { get; }
	public virtual string Source { get; }
	public virtual string StackTrace { get; }

	// Methods

	// RVA: 0x117EA3C Offset: 0x117EA3C VA: 0x117EA3C
	public void .ctor() { }

	// RVA: 0x1173B44 Offset: 0x1173B44 VA: 0x1173B44
	public void .ctor(string message) { }

	// RVA: 0x117EA50 Offset: 0x117EA50 VA: 0x117EA50
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x117EDF8 Offset: 0x117EDF8 VA: 0x117EDF8
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x117EE3C Offset: 0x117EE3C VA: 0x117EE3C Slot: 5
	public Exception get_InnerException() { }

	// RVA: 0x117EE44 Offset: 0x117EE44 VA: 0x117EE44
	protected int get_HResult() { }

	// RVA: 0x1177CE8 Offset: 0x1177CE8 VA: 0x1177CE8
	protected void set_HResult(int value) { }

	// RVA: 0x117EE4C Offset: 0x117EE4C VA: 0x117EE4C
	private string get_ClassName() { }

	// RVA: 0x117EEA4 Offset: 0x117EEA4 VA: 0x117EEA4 Slot: 6
	public virtual string get_Message() { }

	// RVA: 0x117EF50 Offset: 0x117EF50 VA: 0x117EF50 Slot: 7
	public virtual string get_Source() { }

	// RVA: 0x117F088 Offset: 0x117F088 VA: 0x117F088 Slot: 8
	public virtual string get_StackTrace() { }

	// RVA: 0x117F9B8 Offset: 0x117F9B8 VA: 0x117F9B8 Slot: 9
	public virtual Exception GetBaseException() { }

	// RVA: 0x117F9DC Offset: 0x117F9DC VA: 0x117F9DC Slot: 10
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x117FC08 Offset: 0x117FC08 VA: 0x117FC08 Slot: 3
	public override string ToString() { }

	// RVA: 0x117F494 Offset: 0x117F494 VA: 0x117F494
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi) { }

	// RVA: 0x117EE9C Offset: 0x117EE9C VA: 0x117EE9C Slot: 11
	public Type GetType() { }
}

// Namespace: System.Runtime.InteropServices
[InterfaceTypeAttribute] // RVA: 0xC2F930 Offset: 0xC2F930 VA: 0xC2F930
[GuidAttribute] // RVA: 0xC2F930 Offset: 0xC2F930 VA: 0xC2F930
[ComVisibleAttribute] // RVA: 0xC2F930 Offset: 0xC2F930 VA: 0xC2F930
[CLSCompliantAttribute] // RVA: 0xC2F930 Offset: 0xC2F930 VA: 0xC2F930
public interface _Exception // TypeDefIndex: 58
{}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F9A8 Offset: 0xC2F9A8 VA: 0xC2F9A8
[MonoTODOAttribute] // RVA: 0xC2F9A8 Offset: 0xC2F9A8 VA: 0xC2F9A8
[Serializable]
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 59
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0xBBB8DC Offset: 0xBBB8DC VA: 0xBBB8DC
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xBBB8E4 Offset: 0xBBB8E4 VA: 0xBBB8E4
	public IntPtr get_Value() { }

	// RVA: 0xBBB8EC Offset: 0xBBB8EC VA: 0xBBB8EC Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0xC38728 Offset: 0xC38728 VA: 0xC38728
	// RVA: 0xBBB8F4 Offset: 0xBBB8F4 VA: 0xBBB8F4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBB8FC Offset: 0xBBB8FC VA: 0xBBB8FC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xC2F9F8 Offset: 0xC2F9F8 VA: 0xC2F9F8
[ComVisibleAttribute] // RVA: 0xC2F9F8 Offset: 0xC2F9F8 VA: 0xC2F9F8
[Serializable]
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 60
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0xBBB93C Offset: 0xBBB93C VA: 0xBBB93C
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xBBB944 Offset: 0xBBB944 VA: 0xBBB944
	public IntPtr get_Value() { }

	// RVA: 0xBBB94C Offset: 0xBBB94C VA: 0xBBB94C Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0xC38740 Offset: 0xC38740 VA: 0xC38740
	// RVA: 0xBBB954 Offset: 0xBBB954 VA: 0xBBB954 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBB95C Offset: 0xBBB95C VA: 0xBBB95C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC2FA48 Offset: 0xC2FA48 VA: 0xC2FA48
[ComVisibleAttribute] // RVA: 0xC2FA48 Offset: 0xC2FA48 VA: 0xC2FA48
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 61
{
	// Methods

	// RVA: 0x107CAD8 Offset: 0x107CAD8 VA: 0x107CAD8
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xC2FA88 Offset: 0xC2FA88 VA: 0xC2FA88
[AttributeUsageAttribute] // RVA: 0xC2FA88 Offset: 0xC2FA88 VA: 0xC2FA88
public sealed class OutAttribute : Attribute // TypeDefIndex: 62
{
	// Methods

	// RVA: 0xF29F70 Offset: 0xF29F70 VA: 0xF29F70
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2FADC Offset: 0xC2FADC VA: 0xC2FADC
[AttributeUsageAttribute] // RVA: 0xC2FADC Offset: 0xC2FADC VA: 0xC2FADC
[Serializable]
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 63
{
	// Fields
	private string _message; // 0x10
	private bool _error; // 0x18

	// Methods

	// RVA: 0x107C27C Offset: 0x107C27C VA: 0x107C27C
	public void .ctor() { }

	// RVA: 0x107C284 Offset: 0x107C284 VA: 0x107C284
	public void .ctor(string message) { }

	// RVA: 0x107C2B0 Offset: 0x107C2B0 VA: 0x107C2B0
	public void .ctor(string message, bool error) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xC2FB30 Offset: 0xC2FB30 VA: 0xC2FB30
[ComVisibleAttribute] // RVA: 0xC2FB30 Offset: 0xC2FB30 VA: 0xC2FB30
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 64
{
	// Fields
	public CallingConvention CallingConvention; // 0x10
	public CharSet CharSet; // 0x14
	private string Dll; // 0x18
	public string EntryPoint; // 0x20
	public bool ExactSpelling; // 0x28
	public bool PreserveSig; // 0x29
	public bool SetLastError; // 0x2A
	public bool BestFitMapping; // 0x2B
	public bool ThrowOnUnmappableChar; // 0x2C

	// Properties
	public string Value { get; }

	// Methods

	// RVA: 0xF29070 Offset: 0xF29070 VA: 0xF29070
	public void .ctor(string dllName) { }

	// RVA: 0xF2909C Offset: 0xF2909C VA: 0xF2909C
	public string get_Value() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xC2FB84 Offset: 0xC2FB84 VA: 0xC2FB84
[AttributeUsageAttribute] // RVA: 0xC2FB84 Offset: 0xC2FB84 VA: 0xC2FB84
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 65
{
	// Fields
	private UnmanagedType utype; // 0x10
	public UnmanagedType ArraySubType; // 0x14
	public string MarshalCookie; // 0x18
	[ComVisibleAttribute] // RVA: 0xC37504 Offset: 0xC37504 VA: 0xC37504
	public string MarshalType; // 0x20
	[ComVisibleAttribute] // RVA: 0xC37518 Offset: 0xC37518 VA: 0xC37518
	public Type MarshalTypeRef; // 0x28
	public int SizeConst; // 0x30
	public short SizeParamIndex; // 0x34

	// Methods

	// RVA: 0xF29EC0 Offset: 0xF29EC0 VA: 0xF29EC0
	public void .ctor(UnmanagedType unmanagedType) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xC2FBD8 Offset: 0xC2FBD8 VA: 0xC2FBD8
[ComVisibleAttribute] // RVA: 0xC2FBD8 Offset: 0xC2FBD8 VA: 0xC2FBD8
public sealed class InAttribute : Attribute // TypeDefIndex: 66
{
	// Methods

	// RVA: 0xF295A0 Offset: 0xF295A0 VA: 0xF295A0
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xC2FC2C Offset: 0xC2FC2C VA: 0xC2FC2C
[AttributeUsageAttribute] // RVA: 0xC2FC2C Offset: 0xC2FC2C VA: 0xC2FC2C
[Serializable]
public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 67
{
	// Fields
	private string myCondition; // 0x10

	// Methods

	// RVA: 0x1176888 Offset: 0x1176888 VA: 0x1176888
	public void .ctor(string conditionString) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xC2FC80 Offset: 0xC2FC80 VA: 0xC2FC80
[ObsoleteAttribute] // RVA: 0xC2FC80 Offset: 0xC2FC80 VA: 0xC2FC80
[AttributeUsageAttribute] // RVA: 0xC2FC80 Offset: 0xC2FC80 VA: 0xC2FC80
[Serializable]
public abstract class SecurityAttribute : Attribute // TypeDefIndex: 68
{
	// Fields
	private SecurityAction m_Action; // 0x10
	private bool m_Unrestricted; // 0x14

	// Properties
	public bool Unrestricted { get; }
	public SecurityAction Action { set; }

	// Methods

	// RVA: 0x11D2060 Offset: 0x11D2060 VA: 0x11D2060
	protected void .ctor(SecurityAction action) { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract IPermission CreatePermission();

	// RVA: 0x11DBEA4 Offset: 0x11DBEA4 VA: 0x11DBEA4
	public bool get_Unrestricted() { }

	// RVA: 0x11DBE9C Offset: 0x11DBE9C VA: 0x11DBE9C
	public void set_Action(SecurityAction value) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xC2FD08 Offset: 0xC2FD08 VA: 0xC2FD08
[ComVisibleAttribute] // RVA: 0xC2FD08 Offset: 0xC2FD08 VA: 0xC2FD08
public sealed class GuidAttribute : Attribute // TypeDefIndex: 69
{
	// Fields
	private string guidValue; // 0x10

	// Methods

	// RVA: 0xF29564 Offset: 0xF29564 VA: 0xF29564
	public void .ctor(string guid) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xC2FD5C Offset: 0xC2FD5C VA: 0xC2FD5C
[ComVisibleAttribute] // RVA: 0xC2FD5C Offset: 0xC2FD5C VA: 0xC2FD5C
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 70
{
	// Methods

	// RVA: 0xF2900C Offset: 0xF2900C VA: 0xF2900C
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xC2FDB0 Offset: 0xC2FDB0 VA: 0xC2FDB0
[AttributeUsageAttribute] // RVA: 0xC2FDB0 Offset: 0xC2FDB0 VA: 0xC2FDB0
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 71
{
	// Methods

	// RVA: 0xF29F68 Offset: 0xF29F68 VA: 0xF29F68
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xC2FE04 Offset: 0xC2FE04 VA: 0xC2FE04
public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 72
{
	// Fields
	private Type elementType; // 0x10
	private int length; // 0x18

	// Properties
	public Type ElementType { get; }
	public int Length { get; }

	// Methods

	// RVA: 0xF288C8 Offset: 0xF288C8 VA: 0xF288C8
	public void .ctor(Type elementType, int length) { }

	// RVA: 0xF28904 Offset: 0xF28904 VA: 0xF28904
	public Type get_ElementType() { }

	// RVA: 0xF2890C Offset: 0xF2890C VA: 0xF2890C
	public int get_Length() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xC2FE40 Offset: 0xC2FE40 VA: 0xC2FE40
[Serializable]
public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 73
{
	// Methods

	// RVA: 0xF287DC Offset: 0xF287DC VA: 0xF287DC
	public void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xC2FE54 Offset: 0xC2FE54 VA: 0xC2FE54
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 74
{
	// Fields
	private string assemblyName; // 0x10
	private bool all_visible; // 0x18

	// Methods

	// RVA: 0xF28914 Offset: 0xF28914 VA: 0xF28914
	public void .ctor(string assemblyName) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xC2FEA0 Offset: 0xC2FEA0 VA: 0xC2FEA0
[Serializable]
public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 75
{
	// Fields
	private bool wrap_non_exception_throws; // 0x10

	// Properties
	public bool WrapNonExceptionThrows { set; }

	// Methods

	// RVA: 0xF28948 Offset: 0xF28948 VA: 0xF28948
	public void .ctor() { }

	// RVA: 0xF28950 Offset: 0xF28950 VA: 0xF28950
	public void set_WrapNonExceptionThrows(bool value) { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xC2FEEC Offset: 0xC2FEEC VA: 0xC2FEEC
[ComVisibleAttribute] // RVA: 0xC2FEEC Offset: 0xC2FEEC VA: 0xC2FEEC
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 76
{
	// Methods

	// RVA: 0x1176ABC Offset: 0x1176ABC VA: 0x1176ABC
	public void .ctor() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC2FF40 Offset: 0xC2FF40 VA: 0xC2FF40
[AttributeUsageAttribute] // RVA: 0xC2FF40 Offset: 0xC2FF40 VA: 0xC2FF40
[Serializable]
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 77
{
	// Fields
	private string member_name; // 0x10

	// Properties
	public string MemberName { get; }

	// Methods

	// RVA: 0x108376C Offset: 0x108376C VA: 0x108376C
	public void .ctor(string memberName) { }

	// RVA: 0x1073348 Offset: 0x1073348 VA: 0x1073348
	public string get_MemberName() { }
}

// Namespace: System.Runtime.CompilerServices
[ComVisibleAttribute] // RVA: 0xC2FF80 Offset: 0xC2FF80 VA: 0xC2FF80
[AttributeUsageAttribute] // RVA: 0xC2FF80 Offset: 0xC2FF80 VA: 0xC2FF80
[Serializable]
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 78
{
	// Fields
	private byte scale; // 0x10
	private bool sign; // 0x11
	private int hi; // 0x14
	private int mid; // 0x18
	private int low; // 0x1C

	// Methods

	[CLSCompliantAttribute] // RVA: 0xC38758 Offset: 0xC38758 VA: 0xC38758
	// RVA: 0xF287E4 Offset: 0xF287E4 VA: 0xF287E4
	public void .ctor(byte scale, byte sign, uint hi, uint mid, uint low) { }
}

// Namespace: System.Runtime.InteropServices
[ComVisibleAttribute] // RVA: 0xC2FFD4 Offset: 0xC2FFD4 VA: 0xC2FFD4
[AttributeUsageAttribute] // RVA: 0xC2FFD4 Offset: 0xC2FFD4 VA: 0xC2FFD4
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 79
{
	// Fields
	private int val; // 0x10

	// Methods

	// RVA: 0xF290E0 Offset: 0xF290E0 VA: 0xF290E0
	public void .ctor(int offset) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC30028 Offset: 0xC30028 VA: 0xC30028
public struct RuntimeArgumentHandle // TypeDefIndex: 80
{
	// Fields
	internal IntPtr args; // 0x0
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC3003C Offset: 0xC3003C VA: 0xC3003C
[Serializable]
public sealed class AsyncCallback : MulticastDelegate // TypeDefIndex: 81
{
	// Methods

	// RVA: 0x10D2F44 Offset: 0x10D2F44 VA: 0x10D2F44
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10D2F54 Offset: 0x10D2F54 VA: 0x10D2F54 Slot: 11
	public virtual void Invoke(IAsyncResult ar) { }

	// RVA: 0x10D32F4 Offset: 0x10D32F4 VA: 0x10D32F4 Slot: 12
	public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object) { }

	// RVA: 0x10D3318 Offset: 0x10D3318 VA: 0x10D3318 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC30050 Offset: 0xC30050 VA: 0xC30050
public interface IAsyncResult // TypeDefIndex: 82
{
	// Properties
	public abstract object AsyncState { get; }
	public abstract WaitHandle AsyncWaitHandle { get; }
	public abstract bool CompletedSynchronously { get; }
	public abstract bool IsCompleted { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_AsyncState();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract WaitHandle get_AsyncWaitHandle();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_CompletedSynchronously();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_IsCompleted();
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xC30064 Offset: 0xC30064 VA: 0xC30064
[ComVisibleAttribute] // RVA: 0xC30064 Offset: 0xC30064 VA: 0xC30064
public struct TypedReference // TypeDefIndex: 83
{
	// Fields
	private RuntimeTypeHandle type; // 0x0
	private IntPtr value; // 0x8
	private IntPtr klass; // 0x10

	// Methods

	// RVA: 0xBC08C4 Offset: 0xBC08C4 VA: 0xBC08C4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xBC08D0 Offset: 0xBC08D0 VA: 0xBC08D0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 84
{
	// Fields
	private IntPtr sig; // 0x0
	private IntPtr args; // 0x8
	private int next_arg; // 0x10
	private int num_args; // 0x14

	// Methods

	// RVA: 0xBBAC74 Offset: 0xBBAC74 VA: 0xBBAC74 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xBBAC80 Offset: 0xBBAC80 VA: 0xBBAC80 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC300A4 Offset: 0xC300A4 VA: 0xC300A4
[Serializable]
public abstract class MarshalByRefObject // TypeDefIndex: 85
{
	// Fields
	private ServerIdentity _identity; // 0x10

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; }

	// Methods

	// RVA: 0x106D8A4 Offset: 0x106D8A4 VA: 0x106D8A4
	protected void .ctor() { }

	// RVA: 0x106D8A8 Offset: 0x106D8A8 VA: 0x106D8A8
	internal ServerIdentity get_ObjectIdentity() { }

	// RVA: 0x106D8B0 Offset: 0x106D8B0 VA: 0x106D8B0
	internal void set_ObjectIdentity(ServerIdentity value) { }

	// RVA: 0x106D8B8 Offset: 0x106D8B8 VA: 0x106D8B8 Slot: 4
	public virtual ObjRef CreateObjRef(Type requestedType) { }

	// RVA: 0x106D970 Offset: 0x106D970 VA: 0x106D970 Slot: 5
	public virtual object InitializeLifetimeService() { }
}

// Namespace: System
[Serializable]
public struct Nullable<T> // TypeDefIndex: 86
{
	// Fields
	internal T value; // 0x0
	internal bool has_value; // 0x0

	// Properties
	public bool HasValue { get; }
	public T Value { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD1524 Offset: 0xDD1524 VA: 0xDD1524
	|-Nullable<ConnectMarkFadeInLagType>..ctor
	|
	|-RVA: 0xDD174C Offset: 0xDD174C VA: 0xDD174C
	|-Nullable<CriAtomEx.Randomize3dConfig>..ctor
	|
	|-RVA: 0xDD1984 Offset: 0xDD1984 VA: 0xDD1984
	|-Nullable<CriAtomExAuxIn.Config>..ctor
	|
	|-RVA: 0xDD1C54 Offset: 0xDD1C54 VA: 0xDD1C54
	|-Nullable<CriAtomExMic.Config>..ctor
	|
	|-RVA: 0xDD3600 Offset: 0xDD3600 VA: 0xDD3600
	|-Nullable<CriAtomExMic.DeviceInfo>..ctor
	|
	|-RVA: 0xDD3950 Offset: 0xDD3950 VA: 0xDD3950
	|-Nullable<Player.Status>..ctor
	|
	|-RVA: 0xDD3B78 Offset: 0xDD3B78 VA: 0xDD3B78
	|-Nullable<bool>..ctor
	|
	|-RVA: 0xDD3DD4 Offset: 0xDD3DD4 VA: 0xDD3DD4
	|-Nullable<char>..ctor
	|
	|-RVA: 0xDD4000 Offset: 0xDD4000 VA: 0xDD4000
	|-Nullable<DateTime>..ctor
	|
	|-RVA: 0xDD424C Offset: 0xDD424C VA: 0xDD424C
	|-Nullable<int>..ctor
	|
	|-RVA: 0xDD4474 Offset: 0xDD4474 VA: 0xDD4474
	|-Nullable<long>..ctor
	|
	|-RVA: 0xDD4678 Offset: 0xDD4678 VA: 0xDD4678
	|-Nullable<GCHandle>..ctor
	|
	|-RVA: 0xDD48A0 Offset: 0xDD48A0 VA: 0xDD48A0
	|-Nullable<float>..ctor
	|
	|-RVA: 0xDD4AE4 Offset: 0xDD4AE4 VA: 0xDD4AE4
	|-Nullable<TimeSpan>..ctor
	|
	|-RVA: 0xDD4CE8 Offset: 0xDD4CE8 VA: 0xDD4CE8
	|-Nullable<uint>..ctor
	|
	|-RVA: 0xDD4F10 Offset: 0xDD4F10 VA: 0xDD4F10
	|-Nullable<Vector2>..ctor
	|
	|-RVA: 0xDD51DC Offset: 0xDD51DC VA: 0xDD51DC
	|-Nullable<Vector3>..ctor
	*/

	// RVA: -1 Offset: -1
	public bool get_HasValue() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD152C Offset: 0xDD152C VA: 0xDD152C
	|-Nullable<ConnectMarkFadeInLagType>.get_HasValue
	|
	|-RVA: 0xDD1754 Offset: 0xDD1754 VA: 0xDD1754
	|-Nullable<CriAtomEx.Randomize3dConfig>.get_HasValue
	|
	|-RVA: 0xDD1990 Offset: 0xDD1990 VA: 0xDD1990
	|-Nullable<CriAtomExAuxIn.Config>.get_HasValue
