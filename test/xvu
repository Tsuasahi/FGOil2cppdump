	public void .ctor() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6300 Offset: 0xCD6300 VA: 0xCD6300
	// RVA: 0x15385D0 Offset: 0x15385D0 VA: 0x15385D0 Slot: 4
	public override IEnumerator Execute() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46D34 Offset: 0xC46D34 VA: 0xC46D34
private sealed class WarBoardWaitNonBlockingTaskEnd.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11937
{
	// Fields
	internal object $current; // 0x10
	internal bool $disposing; // 0x18
	internal int $PC; // 0x1C
	private static Func<bool> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDDEF0 Offset: 0xCDDEF0 VA: 0xCDDEF0
	// RVA: 0x153862C Offset: 0x153862C VA: 0x153862C
	public void .ctor() { }

	// RVA: 0x1538634 Offset: 0x1538634 VA: 0x1538634 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF00 Offset: 0xCDDF00 VA: 0xCDDF00
	// RVA: 0x153875C Offset: 0x153875C VA: 0x153875C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF10 Offset: 0xCDDF10 VA: 0xCDDF10
	// RVA: 0x1538764 Offset: 0x1538764 VA: 0x1538764 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF20 Offset: 0xCDDF20 VA: 0xCDDF20
	// RVA: 0x153876C Offset: 0x153876C VA: 0x153876C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF30 Offset: 0xCDDF30 VA: 0xCDDF30
	// RVA: 0x1538780 Offset: 0x1538780 VA: 0x1538780 Slot: 6
	public void Reset() { }

	// RVA: 0x15387E8 Offset: 0x15387E8 VA: 0x15387E8
	private static bool <>m__0() { }
}

// Namespace: 
public class WarBoardWaitTime : WarBoardTaskBase // TypeDefIndex: 11938
{
	// Fields
	private float waitTime; // 0x2C

	// Methods

	// RVA: 0x152B8AC Offset: 0x152B8AC VA: 0x152B8AC
	public void .ctor(float waitTime) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6310 Offset: 0xCD6310 VA: 0xCD6310
	// RVA: 0x1538848 Offset: 0x1538848 VA: 0x1538848 Slot: 4
	public override IEnumerator Execute() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46D44 Offset: 0xC46D44 VA: 0xC46D44
private sealed class WarBoardWaitTime.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11939
{
	// Fields
	internal float <espTime>__1; // 0x10
	internal WarBoardWaitTime $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDDF40 Offset: 0xCDDF40 VA: 0xCDDF40
	// RVA: 0x15388B8 Offset: 0x15388B8 VA: 0x15388B8
	public void .ctor() { }

	// RVA: 0x15388C0 Offset: 0x15388C0 VA: 0x15388C0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF50 Offset: 0xCDDF50 VA: 0xCDDF50
	// RVA: 0x15389AC Offset: 0x15389AC VA: 0x15389AC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF60 Offset: 0xCDDF60 VA: 0xCDDF60
	// RVA: 0x15389B4 Offset: 0x15389B4 VA: 0x15389B4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF70 Offset: 0xCDDF70 VA: 0xCDDF70
	// RVA: 0x15389BC Offset: 0x15389BC VA: 0x15389BC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDDF80 Offset: 0xCDDF80 VA: 0xCDDF80
	// RVA: 0x15389D0 Offset: 0x15389D0 VA: 0x15389D0 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class WarBoardCommonMiniPopup : WarBoardInfoPopupBase // TypeDefIndex: 11940
{
	// Fields
	[SerializeField] // RVA: 0xC83554 Offset: 0xC83554 VA: 0xC83554
	private UISkinSprite windowBase; // 0x30
	[SerializeField] // RVA: 0xC83564 Offset: 0xC83564 VA: 0xC83564
	private UILabel messgeLabel; // 0x38
	[SerializeField] // RVA: 0xC83574 Offset: 0xC83574 VA: 0xC83574
	private GameObject cofirmButtonRoot; // 0x40
	[SerializeField] // RVA: 0xC83584 Offset: 0xC83584 VA: 0xC83584
	private UILabel yesButtonLabel; // 0x48
	[SerializeField] // RVA: 0xC83594 Offset: 0xC83594 VA: 0xC83594
	private UILabel noButtonLabel; // 0x50
	[SerializeField] // RVA: 0xC835A4 Offset: 0xC835A4 VA: 0xC835A4
	private GameObject noticeButtonRoot; // 0x58
	[SerializeField] // RVA: 0xC835B4 Offset: 0xC835B4 VA: 0xC835B4
	private UILabel closeButtonLabel; // 0x60
	[SerializeField] // RVA: 0xC835C4 Offset: 0xC835C4 VA: 0xC835C4
	private WarBoardCommonMiniPopup.LineLayout[] lineLayouts; // 0x68
	private Action<bool> clickCallback; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC835D4 Offset: 0xC835D4 VA: 0xC835D4
	private static Func<char, bool> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x13A4DD8 Offset: 0x13A4DD8 VA: 0x13A4DD8
	public void .ctor() { }

	// RVA: 0x13A4EC0 Offset: 0x13A4EC0 VA: 0x13A4EC0 Slot: 4
	public override void Initialize() { }

	// RVA: 0x13A4FF4 Offset: 0x13A4FF4 VA: 0x13A4FF4
	private int GetLineCount(string message) { }

	// RVA: 0x13A50B8 Offset: 0x13A50B8 VA: 0x13A50B8
	private WarBoardCommonMiniPopup.LineLayout GetLineLayout(string message) { }

	// RVA: 0x13A5160 Offset: 0x13A5160 VA: 0x13A5160
	public void OpenConfirmPopup(Action<bool> clickCallback, string message, string yesButton, string noButton) { }

	// RVA: 0x13A53EC Offset: 0x13A53EC VA: 0x13A53EC
	public void OpenNoticePopup(Action<bool> clickCallback, string message, string closeButton) { }

	// RVA: 0x13A55D8 Offset: 0x13A55D8 VA: 0x13A55D8
	public void OnClickYes() { }

	// RVA: 0x13A56D8 Offset: 0x13A56D8 VA: 0x13A56D8
	public void OnClickNo() { }

	// RVA: 0x13A5784 Offset: 0x13A5784 VA: 0x13A5784
	public void OnClickClose() { }

	// RVA: 0x13A5830 Offset: 0x13A5830 VA: 0x13A5830
	public void ClosePopup(Action hideCallback) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6320 Offset: 0xCD6320 VA: 0xCD6320
	// RVA: 0x13A5984 Offset: 0x13A5984 VA: 0x13A5984
	private static bool <GetLineCount>m__0(char x) { }
}

// Namespace: 
[Serializable]
private struct WarBoardCommonMiniPopup.LineLayout // TypeDefIndex: 11941
{
	// Fields
	[SerializeField] // RVA: 0xC835E4 Offset: 0xC835E4 VA: 0xC835E4
	public float MessagePosY; // 0x0
	[SerializeField] // RVA: 0xC835F4 Offset: 0xC835F4 VA: 0xC835F4
	public float ButtonRootPosY; // 0x4
}

// Namespace: 
public class WarBoardInfoPopupBase : MonoBehaviour // TypeDefIndex: 11942
{
	// Fields
	private static readonly float POPUP_SHOW_ANIM_DURATION; // 0x0
	private static readonly float POPUP_HIDE_ANIM_DURATION; // 0x4
	[SerializeField] // RVA: 0xC83604 Offset: 0xC83604 VA: 0xC83604
	protected GameObject mainView; // 0x18
	protected Action hideCompleteCallback; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC83614 Offset: 0xC83614 VA: 0xC83614
	[DebuggerBrowsableAttribute] // RVA: 0xC83614 Offset: 0xC83614 VA: 0xC83614
	private bool <isShowAnimating>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC83650 Offset: 0xC83650 VA: 0xC83650
	[DebuggerBrowsableAttribute] // RVA: 0xC83650 Offset: 0xC83650 VA: 0xC83650
	private bool <isHideAnimating>k__BackingField; // 0x29

	// Properties
	public bool isShowAnimating { get; set; }
	public bool isHideAnimating { get; set; }
	public bool isAnimating { get; }
	public bool isShown { get; }

	// Methods

	// RVA: 0x13A4EB8 Offset: 0x13A4EB8 VA: 0x13A4EB8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6330 Offset: 0xCD6330 VA: 0xCD6330
	// RVA: 0x13AFAC8 Offset: 0x13AFAC8 VA: 0x13AFAC8
	public bool get_isShowAnimating() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6340 Offset: 0xCD6340 VA: 0xCD6340
	// RVA: 0x13AFAD0 Offset: 0x13AFAD0 VA: 0x13AFAD0
	private void set_isShowAnimating(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6350 Offset: 0xCD6350 VA: 0xCD6350
	// RVA: 0x13AFADC Offset: 0x13AFADC VA: 0x13AFADC
	public bool get_isHideAnimating() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6360 Offset: 0xCD6360 VA: 0xCD6360
	// RVA: 0x13AFAE4 Offset: 0x13AFAE4 VA: 0x13AFAE4
	private void set_isHideAnimating(bool value) { }

	// RVA: 0x13A56B8 Offset: 0x13A56B8 VA: 0x13A56B8
	public bool get_isAnimating() { }

	// RVA: 0x13A5684 Offset: 0x13A5684 VA: 0x13A5684
	public bool get_isShown() { }

	// RVA: 0x13A4EF8 Offset: 0x13A4EF8 VA: 0x13A4EF8 Slot: 4
	public virtual void Initialize() { }

	// RVA: 0x13A5358 Offset: 0x13A5358 VA: 0x13A5358
	public void Show() { }

	// RVA: 0x13A5900 Offset: 0x13A5900 VA: 0x13A5900
	public void Hide() { }

	// RVA: 0x13AFAF0 Offset: 0x13AFAF0 VA: 0x13AFAF0
	public void AddHideCompleteCallback(Action completeCallback) { }

	// RVA: 0x13AFBB4 Offset: 0x13AFBB4 VA: 0x13AFBB4 Slot: 5
	protected virtual void ShowAnimation(EventDelegate.Callback finishCallback) { }

	// RVA: 0x13AFCE8 Offset: 0x13AFCE8 VA: 0x13AFCE8 Slot: 6
	protected virtual void HideAnimation(EventDelegate.Callback finishCallback) { }

	// RVA: 0x13AFE1C Offset: 0x13AFE1C VA: 0x13AFE1C Slot: 7
	protected virtual void OnBeforeShow() { }

	// RVA: 0x13AFE54 Offset: 0x13AFE54 VA: 0x13AFE54 Slot: 8
	protected virtual void OnAfterHide() { }

	// RVA: 0x13AFEB8 Offset: 0x13AFEB8 VA: 0x13AFEB8 Slot: 9
	protected virtual void CleanPopup() { }

	// RVA: 0x13AFEBC Offset: 0x13AFEBC VA: 0x13AFEBC
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6370 Offset: 0xCD6370 VA: 0xCD6370
	// RVA: 0x13AFF20 Offset: 0x13AFF20 VA: 0x13AFF20
	private void <Show>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6380 Offset: 0xCD6380 VA: 0xCD6380
	// RVA: 0x13AFF28 Offset: 0x13AFF28 VA: 0x13AFF28
	private void <Hide>m__1() { }
}

// Namespace: 
public class WarBoardSimplePopup : WarBoardInfoPopupBase // TypeDefIndex: 11943
{
	// Fields
	private static readonly int LEFT_MARGIN_WHEN_LOCATING_ON_LEFT_SIDE; // 0x0
	private static readonly int RIGHT_MARGIN_WHEN_LOCATING_ON_RIGHT_SIDE; // 0x4
	private static readonly int BOTTOM_MARGIN; // 0x8
	private static readonly int TOP_MARGIN; // 0xC
	private static readonly int FS_LEFT_MARGIN_WHEN_LOCATING_ON_LEFT_SIDE; // 0x10
	private static readonly int FS_RIGHT_MARGIN_WHEN_LOCATING_ON_RIGHT_SIDE; // 0x14
	private static readonly int FS_BOTTOM_MARGIN; // 0x18
	private static readonly int FS_TOP_MARGIN; // 0x1C
	private Vector3 targetPiecePosition; // 0x2C

	// Methods

	// RVA: 0x152C574 Offset: 0x152C574 VA: 0x152C574
	public void .ctor() { }

	// RVA: 0x152C60C Offset: 0x152C60C VA: 0x152C60C
	public GameObject AddElement(GameObject elemPrefab) { }

	// RVA: 0x152C6B0 Offset: 0x152C6B0 VA: 0x152C6B0
	public void SetTargetPiecePosition(Vector3 pos) { }

	// RVA: 0x152C6BC Offset: 0x152C6BC VA: 0x152C6BC Slot: 7
	protected override void OnBeforeShow() { }

	// RVA: 0x152C6EC Offset: 0x152C6EC VA: 0x152C6EC
	private void MainViewContentsFit() { }

	// RVA: 0x152CA14 Offset: 0x152CA14 VA: 0x152CA14
	private void AdjustMainViewPosition() { }

	// RVA: 0x152D2B8 Offset: 0x152D2B8 VA: 0x152D2B8 Slot: 9
	protected override void CleanPopup() { }

	// RVA: 0x152D3C8 Offset: 0x152D3C8 VA: 0x152D3C8
	private void OnDestroy() { }

	// RVA: 0x152D3D4 Offset: 0x152D3D4 VA: 0x152D3D4
	private static void .cctor() { }
}

// Namespace: 
public class WarBoardSimplePopupElementBuff : MonoBehaviour // TypeDefIndex: 11944
{
	// Fields
	[SerializeField] // RVA: 0xC8368C Offset: 0xC8368C VA: 0xC8368C
	private UILabel titleLabel; // 0x18
	[SerializeField] // RVA: 0xC8369C Offset: 0xC8369C VA: 0xC8369C
	private UILabel explanationLabel; // 0x20
	[SerializeField] // RVA: 0xC836AC Offset: 0xC836AC VA: 0xC836AC
	private GameObject ItemIconParts; // 0x28
	[SerializeField] // RVA: 0xC836BC Offset: 0xC836BC VA: 0xC836BC
	private GameObject effectIconParts; // 0x30
	[SerializeField] // RVA: 0xC836CC Offset: 0xC836CC VA: 0xC836CC
	private UISprite itemIcon; // 0x38
	[SerializeField] // RVA: 0xC836DC Offset: 0xC836DC VA: 0xC836DC
	private UISprite effectIcon; // 0x40
	[SerializeField] // RVA: 0xC836EC Offset: 0xC836EC VA: 0xC836EC
	private UISprite effectIconBase; // 0x48
	[SerializeField] // RVA: 0xC836FC Offset: 0xC836FC VA: 0xC836FC
	private UIScrollView scrollView; // 0x50

	// Methods

	// RVA: 0x152D478 Offset: 0x152D478 VA: 0x152D478
	public void .ctor() { }

	// RVA: 0x152D480 Offset: 0x152D480 VA: 0x152D480
	public void SetUp(WarBoardItemData itemData) { }

	// RVA: 0x152D608 Offset: 0x152D608 VA: 0x152D608
	public void SetUp(WarBoardEffectData effectData) { }

	// RVA: 0x152D8E8 Offset: 0x152D8E8 VA: 0x152D8E8
	public void Update() { }

	// RVA: 0x152D984 Offset: 0x152D984 VA: 0x152D984
	public void OnTouch() { }

	// RVA: 0x152DA10 Offset: 0x152DA10 VA: 0x152DA10
	public void OnRelease() { }
}

// Namespace: 
public class WarBoardSimplePopupElementServant : MonoBehaviour // TypeDefIndex: 11945
{
	// Fields
	[SerializeField] // RVA: 0xC8370C Offset: 0xC8370C VA: 0xC8370C
	protected GameObject breakPointPrefab; // 0x18
	[SerializeField] // RVA: 0xC8371C Offset: 0xC8371C VA: 0xC8371C
	protected UIWidget breakPointParent; // 0x20
	[SerializeField] // RVA: 0xC8372C Offset: 0xC8372C VA: 0xC8372C
	private UISprite hpBar; // 0x28
	[SerializeField] // RVA: 0xC8373C Offset: 0xC8373C VA: 0xC8373C
	private UISprite[] npBars; // 0x30
	[SerializeField] // RVA: 0xC8374C Offset: 0xC8374C VA: 0xC8374C
	private UISprite flameInClassIcon; // 0x38
	[SerializeField] // RVA: 0xC8375C Offset: 0xC8375C VA: 0xC8375C
	private UILabel atkValueLabel; // 0x40
	[SerializeField] // RVA: 0xC8376C Offset: 0xC8376C VA: 0xC8376C
	private UILabel atkLabel; // 0x48
	[SerializeField] // RVA: 0xC8377C Offset: 0xC8377C VA: 0xC8377C
	private UILabel hpValueLabel; // 0x50
	[SerializeField] // RVA: 0xC8378C Offset: 0xC8378C VA: 0xC8378C
	private UILabel hpLabel; // 0x58
	[SerializeField] // RVA: 0xC8379C Offset: 0xC8379C VA: 0xC8379C
	private UILabel actValueLabel; // 0x60
	[SerializeField] // RVA: 0xC837AC Offset: 0xC837AC VA: 0xC837AC
	private UISprite servantIcon; // 0x68
	[SerializeField] // RVA: 0xC837BC Offset: 0xC837BC VA: 0xC837BC
	private UISprite frameSprite; // 0x70
	[SerializeField] // RVA: 0xC837CC Offset: 0xC837CC VA: 0xC837CC
	private UISprite equipIcon; // 0x78
	[SerializeField] // RVA: 0xC837DC Offset: 0xC837DC VA: 0xC837DC
	private UISprite equipLimitCountSprite; // 0x80
	[SerializeField] // RVA: 0xC837EC Offset: 0xC837EC VA: 0xC837EC
	private GameObject critecalStarsRoot; // 0x88
	[SerializeField] // RVA: 0xC837FC Offset: 0xC837FC VA: 0xC837FC
	private UILabel critecalStarsLabel; // 0x90
	[SerializeField] // RVA: 0xC8380C Offset: 0xC8380C VA: 0xC8380C
	private BattleServantShowBuffComponent showBuffComponent; // 0x98
	[SerializeField] // RVA: 0xC8381C Offset: 0xC8381C VA: 0xC8381C
	private BattleServantSkillIConComponent[] skillIconList; // 0xA0
	[SerializeField] // RVA: 0xC8382C Offset: 0xC8382C VA: 0xC8382C
	private GameObject actionCountObj; // 0xA8
	[SerializeField] // RVA: 0xC8383C Offset: 0xC8383C VA: 0xC8383C
	private GameObject equipIconOnFace; // 0xB0
	private WarBoardPieceData pieceData; // 0xB8
	[SerializeField] // RVA: 0xC8384C Offset: 0xC8384C VA: 0xC8384C
	private int HpValueLabelMaxWidth; // 0xC0
	[SerializeField] // RVA: 0xC8385C Offset: 0xC8385C VA: 0xC8385C
	private UILabel servantNameLabel; // 0xC8
	[SerializeField] // RVA: 0xC8386C Offset: 0xC8386C VA: 0xC8386C
	private int servantNameLabelWidth; // 0xD0
	[SerializeField] // RVA: 0xC8387C Offset: 0xC8387C VA: 0xC8387C
	private UILabel detailButtonLabel; // 0xD8
	[SerializeField] // RVA: 0xC8388C Offset: 0xC8388C VA: 0xC8388C
	private UISprite supportSprite; // 0xE0
	[SerializeField] // RVA: 0xC8389C Offset: 0xC8389C VA: 0xC8389C
	private UILabel servantLevel; // 0xE8
	[SerializeField] // RVA: 0xC838AC Offset: 0xC838AC VA: 0xC838AC
	private Vector3 positionLevel; // 0xF0
	[SerializeField] // RVA: 0xC838BC Offset: 0xC838BC VA: 0xC838BC
	private Vector3 positionLevelDanger; // 0xFC
	[SerializeField] // RVA: 0xC838CC Offset: 0xC838CC VA: 0xC838CC
	private Vector3 positionLevelNpc; // 0x108
	[SerializeField] // RVA: 0xC838DC Offset: 0xC838DC VA: 0xC838DC
	private GameObject RoleTypeLabel; // 0x118

	// Methods

	// RVA: 0x152DA9C Offset: 0x152DA9C VA: 0x152DA9C
	public void .ctor() { }

	// RVA: 0x152DB88 Offset: 0x152DB88 VA: 0x152DB88
	public void SetUp(WarBoardPieceData pieceData) { }

	// RVA: 0x152F318 Offset: 0x152F318 VA: 0x152F318
	public void UpdateLabel() { }

	// RVA: 0x152F0C8 Offset: 0x152F0C8 VA: 0x152F0C8
	private void UpdateNpBars(float progress) { }

	// RVA: 0x152E8FC Offset: 0x152E8FC VA: 0x152E8FC
	private void SetAtkLabel(int atk, bool isPlayerGroup) { }

	// RVA: 0x152EA38 Offset: 0x152EA38 VA: 0x152EA38
	private void SetUpSkillIcon(BattleServantData data, bool isPlayerGroup) { }

	// RVA: 0x152ECF4 Offset: 0x152ECF4 VA: 0x152ECF4
	private void SetBuffIcon(BattleBuffData buffData) { }

	// RVA: 0x152EDB8 Offset: 0x152EDB8 VA: 0x152EDB8
	private void SetBreakPoint(int breakPoint, int breakPointMax) { }

	// RVA: 0x152F3BC Offset: 0x152F3BC VA: 0x152F3BC
	public void ShowEquipStatus() { }

	// RVA: 0x152F4A0 Offset: 0x152F4A0 VA: 0x152F4A0
	public void OnClickDetailButton() { }
}

// Namespace: 
public class WarBoardBackMenuComponent : BaseDialog // TypeDefIndex: 11946
{
	// Fields
	protected Action cancelCallbackFunc; // 0x58
	protected Action suspendCallbackFunc; // 0x60
	protected Action retireCallbackFunc; // 0x68
	[SerializeField] // RVA: 0xC838EC Offset: 0xC838EC VA: 0xC838EC
	private UILabel menuTitleTxt; // 0x70
	[SerializeField] // RVA: 0xC838FC Offset: 0xC838FC VA: 0xC838FC
	private UILabel suspendButtonTxt; // 0x78
	[SerializeField] // RVA: 0xC8390C Offset: 0xC8390C VA: 0xC8390C
	private UILabel retireButtonTxt; // 0x80
	[SerializeField] // RVA: 0xC8391C Offset: 0xC8391C VA: 0xC8391C
	private UILabel cancelButtonTxt; // 0x88
	protected WarBoardBackMenuComponent.State state; // 0x90

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x139E054 Offset: 0x139E054 VA: 0x139E054
	public void .ctor() { }

	// RVA: 0x139E0BC Offset: 0x139E0BC VA: 0x139E0BC
	public void Init() { }

	// RVA: 0x139E108 Offset: 0x139E108 VA: 0x139E108
	public void Open(Action suspendCallback, Action retireCallback, Action cancelCallback) { }

	// RVA: 0x139E3F0 Offset: 0x139E3F0 VA: 0x139E3F0
	public void OnClickCancelButton() { }

	// RVA: 0x139E4A4 Offset: 0x139E4A4 VA: 0x139E4A4
	public void OnClickSuspendButton() { }

	// RVA: 0x139E654 Offset: 0x139E654 VA: 0x139E654
	private void OnClickSusupendConfirmDialog(bool isDecide) { }

	// RVA: 0x139E6E4 Offset: 0x139E6E4 VA: 0x139E6E4
	public void OnClickRetireButton() { }

	// RVA: 0x139E894 Offset: 0x139E894 VA: 0x139E894
	private void OnClickRetireConfirmDialogFinalCheck(bool isDecide) { }

	// RVA: 0x139EBC8 Offset: 0x139EBC8 VA: 0x139EBC8
	private void OnClickRetireConfirmDialog(bool isDecide) { }

	// RVA: 0x139EC58 Offset: 0x139EC58 VA: 0x139EC58
	public void OnClickBackButton() { }

	// RVA: 0x139ED0C Offset: 0x139ED0C VA: 0x139ED0C
	protected void EndClose() { }

	// RVA: 0x139EDC4 Offset: 0x139EDC4 VA: 0x139EDC4 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
protected enum WarBoardBackMenuComponent.State // TypeDefIndex: 11947
{
	// Fields
	public int value__; // 0x0
	public const WarBoardBackMenuComponent.State INIT = 0;
	public const WarBoardBackMenuComponent.State OPEN = 1;
}

// Namespace: 
public class WarBoardConfigurationUIContoroller : MonoBehaviour // TypeDefIndex: 11948
{
	// Fields
	[SerializeField] // RVA: 0xC8392C Offset: 0xC8392C VA: 0xC8392C
	private UICommonButton startButton; // 0x18
	private GameObject[] startButtonTweenTargetCache; // 0x20
	[SerializeField] // RVA: 0xC8393C Offset: 0xC8393C VA: 0xC8393C
	private GameObject costBaseObj; // 0x28
	[SerializeField] // RVA: 0xC8394C Offset: 0xC8394C VA: 0xC8394C
	private UILabel maxCostLabel; // 0x30
	[SerializeField] // RVA: 0xC8395C Offset: 0xC8395C VA: 0xC8395C
	private UILabel spritLabel; // 0x38
	[SerializeField] // RVA: 0xC8396C Offset: 0xC8396C VA: 0xC8396C
	private UILabel currentCostLabel; // 0x40
	[SerializeField] // RVA: 0xC8397C Offset: 0xC8397C VA: 0xC8397C
	private UILabel currentApLabel; // 0x48
	[SerializeField] // RVA: 0xC8398C Offset: 0xC8398C VA: 0xC8398C
	private ItemIconComponent userEquipIcon; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC8399C Offset: 0xC8399C VA: 0xC8399C
	private static Func<UIWidget, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC839AC Offset: 0xC839AC VA: 0xC839AC
	private static Func<UIWidget, GameObject> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC839BC Offset: 0xC839BC VA: 0xC839BC
	private static NotificationDialog.ClickDelegate <>f__am$cache2; // 0x10

	// Methods

	// RVA: 0x13A5C78 Offset: 0x13A5C78 VA: 0x13A5C78
	public void .ctor() { }

	// RVA: 0x13A5C80 Offset: 0x13A5C80 VA: 0x13A5C80
	public void Init() { }

	// RVA: 0x13A6028 Offset: 0x13A6028 VA: 0x13A6028
	public void Active() { }

	// RVA: 0x13A6060 Offset: 0x13A6060 VA: 0x13A6060
	public void Deactive() { }

	// RVA: 0x13A5E54 Offset: 0x13A5E54 VA: 0x13A5E54
	private void InitStartButton() { }

	// RVA: 0x13A6098 Offset: 0x13A6098 VA: 0x13A6098
	private void ModifyStartButton() { }

	// RVA: 0x13A61DC Offset: 0x13A61DC VA: 0x13A61DC
	public void SetActiveCostLabel(bool isActive) { }

	// RVA: 0x13A5CAC Offset: 0x13A5CAC VA: 0x13A5CAC
	private void InitCost() { }

	// RVA: 0x13A6214 Offset: 0x13A6214 VA: 0x13A6214
	public void ModifyCost() { }

	// RVA: 0x13A6450 Offset: 0x13A6450 VA: 0x13A6450
	public void ModifyAP() { }

	// RVA: 0x13A5E50 Offset: 0x13A5E50 VA: 0x13A5E50
	private void InitUserEquip() { }

	// RVA: 0x13A657C Offset: 0x13A657C VA: 0x13A657C
	public void ModifyUserEquip() { }

	// RVA: 0x13A67D4 Offset: 0x13A67D4 VA: 0x13A67D4
	public void OnClickUserEquipButton() { }

	// RVA: 0x13A688C Offset: 0x13A688C VA: 0x13A688C
	public void OnClickClassCompatibilityButton() { }

	// RVA: 0x13A69B0 Offset: 0x13A69B0 VA: 0x13A69B0
	private void OnCloseClassCompatibility() { }

	// RVA: 0x13A6A44 Offset: 0x13A6A44 VA: 0x13A6A44
	public void OnClickStartButton() { }

	// RVA: 0x13A74E4 Offset: 0x13A74E4 VA: 0x13A74E4
	private void OnClickStartConfirmDialog(bool isDecide) { }

	// RVA: 0x13A75A4 Offset: 0x13A75A4 VA: 0x13A75A4
	public void OnClickReturnButton() { }

	// RVA: 0x13A77AC Offset: 0x13A77AC VA: 0x13A77AC
	private void OnClickReturnConfirmDialog(bool isDecide) { }

	// RVA: 0x13A6EF8 Offset: 0x13A6EF8 VA: 0x13A6EF8
	private bool IsEnabledPutOnFreeSquare(WarBoardData warBoardData) { }

	// RVA: 0x13A7AF0 Offset: 0x13A7AF0 VA: 0x13A7AF0
	private void OnEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6390 Offset: 0xCD6390 VA: 0xCD6390
	// RVA: 0x13A7B78 Offset: 0x13A7B78 VA: 0x13A7B78
	private static bool <InitStartButton>m__0(UIWidget x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD63A0 Offset: 0xCD63A0 VA: 0xCD63A0
	// RVA: 0x13A7BE4 Offset: 0x13A7BE4 VA: 0x13A7BE4
	private static GameObject <InitStartButton>m__1(UIWidget x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD63B0 Offset: 0xCD63B0 VA: 0xCD63B0
	// RVA: 0x13A7C10 Offset: 0x13A7C10 VA: 0x13A7C10
	private static void <OnClickStartButton>m__2(bool ok) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46D54 Offset: 0xC46D54 VA: 0xC46D54
private sealed class WarBoardConfigurationUIContoroller.<IsEnabledPutOnFreeSquare>c__AnonStorey0 // TypeDefIndex: 11949
{
	// Fields
	internal int freeCost; // 0x10
	internal List<int> pieceSvtIdList; // 0x18

	// Methods

	// RVA: 0x13A78A8 Offset: 0x13A78A8 VA: 0x13A78A8
	public void .ctor() { }

	// RVA: 0x13A7CA0 Offset: 0x13A7CA0 VA: 0x13A7CA0
	internal bool <>m__0(UserServantEntity svt) { }
}

// Namespace: 
public class WarBoardOnboardSkillNameComponent : MonoBehaviour // TypeDefIndex: 11950
{
	// Fields
	[SerializeField] // RVA: 0xC839CC Offset: 0xC839CC VA: 0xC839CC
	private UILabel skillName; // 0x18
	[SerializeField] // RVA: 0xC839DC Offset: 0xC839DC VA: 0xC839DC
	private float skillNameDispAfterWait; // 0x20
	[SerializeField] // RVA: 0xC839EC Offset: 0xC839EC VA: 0xC839EC
	private float skillNameHideBeforeWait; // 0x24

	// Methods

	// RVA: 0x168B3A4 Offset: 0x168B3A4 VA: 0x168B3A4
	public void .ctor() { }

	// RVA: 0x16873F0 Offset: 0x16873F0 VA: 0x16873F0
	public void Clear() { }

	// RVA: 0x168B3B4 Offset: 0x168B3B4 VA: 0x168B3B4
	public void SetActive(bool flag) { }

	// RVA: 0x168B3F0 Offset: 0x168B3F0 VA: 0x168B3F0
	public void SetSkillName(string name) { }

	// RVA: 0x168B428 Offset: 0x168B428 VA: 0x168B428
	public float GetSkillNameDispAfterWait() { }

	// RVA: 0x168B430 Offset: 0x168B430 VA: 0x168B430
	public float GetSkillNameHideBeforeWait() { }
}

// Namespace: 
public class WarBoardPlayingUIController : MonoBehaviour // TypeDefIndex: 11951
{
	// Fields
	[SerializeField] // RVA: 0xC839FC Offset: 0xC839FC VA: 0xC839FC
	private GameObject nextTurnObject; // 0x18
	[SerializeField] // RVA: 0xC83A0C Offset: 0xC83A0C VA: 0xC83A0C
	private UICommonButton nextTurnButton; // 0x20
	[SerializeField] // RVA: 0xC83A1C Offset: 0xC83A1C VA: 0xC83A1C
	private GameObject nextTurnButtonBlinkPrefab; // 0x28
	[SerializeField] // RVA: 0xC83A2C Offset: 0xC83A2C VA: 0xC83A2C
	private UILabel currentAPLabel; // 0x30
	[SerializeField] // RVA: 0xC83A3C Offset: 0xC83A3C VA: 0xC83A3C
	private UILabel maxAPLabel; // 0x38
	[SerializeField] // RVA: 0xC83A4C Offset: 0xC83A4C VA: 0xC83A4C
	private UILabel splitAPLabel; // 0x40
	[SerializeField] // RVA: 0xC83A5C Offset: 0xC83A5C VA: 0xC83A5C
	private GameObject playerTurnRoot; // 0x48
	[SerializeField] // RVA: 0xC83A6C Offset: 0xC83A6C VA: 0xC83A6C
	private GameObject enemyTurnRoot; // 0x50
	[SerializeField] // RVA: 0xC83A7C Offset: 0xC83A7C VA: 0xC83A7C
	private UILabel playerTurnLabel; // 0x58
	[SerializeField] // RVA: 0xC83A8C Offset: 0xC83A8C VA: 0xC83A8C
	private UILabel enemyTurnLabel; // 0x60
	[SerializeField] // RVA: 0xC83A9C Offset: 0xC83A9C VA: 0xC83A9C
	private UILabel titleLabel; // 0x68
	[SerializeField] // RVA: 0xC83AAC Offset: 0xC83AAC VA: 0xC83AAC
	private GameObject getTreasureRoot; // 0x70
	[SerializeField] // RVA: 0xC83ABC Offset: 0xC83ABC VA: 0xC83ABC
	private UISprite getTreasureIcon; // 0x78
	[SerializeField] // RVA: 0xC83ACC Offset: 0xC83ACC VA: 0xC83ACC
	private UILabel getTreasureLabel; // 0x80
	[SerializeField] // RVA: 0xC83ADC Offset: 0xC83ADC VA: 0xC83ADC
	private GameObject treasureListPrefab; // 0x88
	private GameObject nextTurnButtonBlink; // 0x90
	private GameObject[] nextTurnButtonTweenObjectCache; // 0x98
	[SerializeField] // RVA: 0xC83AEC Offset: 0xC83AEC VA: 0xC83AEC
	private GameObject backPrefab; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC83AFC Offset: 0xC83AFC VA: 0xC83AFC
	private static Action <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1699CA8 Offset: 0x1699CA8 VA: 0x1699CA8
	public void .ctor() { }

	// RVA: 0x1699CB0 Offset: 0x1699CB0 VA: 0x1699CB0
	private void Awake() { }

	// RVA: 0x169A02C Offset: 0x169A02C VA: 0x169A02C
	public void Active() { }

	// RVA: 0x169A064 Offset: 0x169A064 VA: 0x169A064
	public void Deactive() { }

	// RVA: 0x169A09C Offset: 0x169A09C VA: 0x169A09C
	public void SetPlayerTurn() { }

	// RVA: 0x169A164 Offset: 0x169A164 VA: 0x169A164
	public void SetNPCTurn() { }

	// RVA: 0x169A214 Offset: 0x169A214 VA: 0x169A214
	public void SetActionPoint(int current, int max) { }

	// RVA: 0x169A4E4 Offset: 0x169A4E4 VA: 0x169A4E4
	public void SetBlinkNextTurnButton(bool value) { }

	// RVA: 0x169A594 Offset: 0x169A594 VA: 0x169A594
	public void OnClickNextTurn() { }

	// RVA: 0x169A768 Offset: 0x169A768 VA: 0x169A768
	public void NondispTurn() { }

	// RVA: 0x169A7C0 Offset: 0x169A7C0 VA: 0x169A7C0
	public void SetTurn(bool isPlayer, int turnCount) { }

	// RVA: 0x168746C Offset: 0x168746C VA: 0x168746C
	public void SetHeaderTitle(string name) { }

	// RVA: 0x169A928 Offset: 0x169A928 VA: 0x169A928
	private void Update() { }

	// RVA: 0x169AAD4 Offset: 0x169AAD4 VA: 0x169AAD4
	public void OnClickTreasureButton() { }

	// RVA: 0x169ACD0 Offset: 0x169ACD0 VA: 0x169ACD0
	public void OnClickReturnButton() { }

	// RVA: 0x169AED0 Offset: 0x169AED0 VA: 0x169AED0
	public void CallbackSuspendButton() { }

	// RVA: 0x169AFBC Offset: 0x169AFBC VA: 0x169AFBC
	private void SuspendResponse(string response) { }

	// RVA: 0x169B078 Offset: 0x169B078 VA: 0x169B078
	public void CallbackRetireButton() { }

	// RVA: 0x169B14C Offset: 0x169B14C VA: 0x169B14C
	public void CallbackBackButton() { }

	// RVA: 0x169B1B4 Offset: 0x169B1B4 VA: 0x169B1B4
	private void OnDestroy() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD63C0 Offset: 0xCD63C0 VA: 0xCD63C0
	// RVA: 0x169B260 Offset: 0x169B260 VA: 0x169B260
	private static void <CallbackRetireButton>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46D64 Offset: 0xC46D64 VA: 0xC46D64
private sealed class WarBoardPlayingUIController.<OnClickNextTurn>c__AnonStorey1 // TypeDefIndex: 11952
{
	// Fields
	internal WarBoardManager warBoardManager; // 0x10

	// Methods

	// RVA: 0x169A760 Offset: 0x169A760 VA: 0x169A760
	public void .ctor() { }

	// RVA: 0x169B2FC Offset: 0x169B2FC VA: 0x169B2FC
	internal void <>m__0(bool ok) { }
}

// Namespace: 
private sealed class WarBoardPlayingUIController.<OnClickNextTurn>c__AnonStorey1.<OnClickNextTurn>c__AnonStorey0 // TypeDefIndex: 11953
{
	// Fields
	internal bool ok; // 0x10
	internal WarBoardPlayingUIController.<OnClickNextTurn>c__AnonStorey1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x169B3EC Offset: 0x169B3EC VA: 0x169B3EC
	public void .ctor() { }

	// RVA: 0x169B3F4 Offset: 0x169B3F4 VA: 0x169B3F4
	internal void <>m__0() { }
}

// Namespace: 
public class WarBoardServantEquipSimpleDialogComponent : BaseDialog // TypeDefIndex: 11954
{
	// Fields
	public SkillIconComponent equipSkillSprite; // 0x58
	public UILabel equipSkillNameLabel; // 0x60
	public UILabel equipSkillConfLabel; // 0x68
	public UILabel closeButtonLabel; // 0x70
	protected WarBoardServantEquipSimpleDialogComponent.State state; // 0x78

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1528FE8 Offset: 0x1528FE8 VA: 0x1528FE8
	public void .ctor() { }

	// RVA: 0x1529050 Offset: 0x1529050 VA: 0x1529050
	public void Init() { }

	// RVA: 0x1529124 Offset: 0x1529124 VA: 0x1529124
	public void SetUp(BattleServantData bsvtData) { }

	// RVA: 0x15298D8 Offset: 0x15298D8 VA: 0x15298D8
	public void OpenFinish() { }

	// RVA: 0x1529950 Offset: 0x1529950 VA: 0x1529950
	public void OnClickClose() { }

	// RVA: 0x1529A10 Offset: 0x1529A10 VA: 0x1529A10
	public void EndClose() { }

	// RVA: 0x1529AE4 Offset: 0x1529AE4 VA: 0x1529AE4 Slot: 6
	protected override string get_closeBtnPath() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD63D0 Offset: 0xCD63D0 VA: 0xCD63D0
	// RVA: 0x1529B2C Offset: 0x1529B2C VA: 0x1529B2C
	private void <SetUp>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD63E0 Offset: 0xCD63E0 VA: 0xCD63E0
	// RVA: 0x1529B30 Offset: 0x1529B30 VA: 0x1529B30
	private void <OnClickClose>m__1() { }
}

// Namespace: 
protected enum WarBoardServantEquipSimpleDialogComponent.State // TypeDefIndex: 11955
{
	// Fields
	public int value__; // 0x0
	public const WarBoardServantEquipSimpleDialogComponent.State INIT = 0;
	public const WarBoardServantEquipSimpleDialogComponent.State OPEN = 1;
	public const WarBoardServantEquipSimpleDialogComponent.State INPUT = 2;
}

// Namespace: 
public class WarBoardTouchBlockObject : MonoBehaviour // TypeDefIndex: 11956
{
	// Fields
	private Action onClickCallback; // 0x18

	// Methods

	// RVA: 0x1535860 Offset: 0x1535860 VA: 0x1535860
	public void .ctor() { }

	// RVA: 0x1535868 Offset: 0x1535868 VA: 0x1535868
	public bool Activate(Action callback) { }

	// RVA: 0x15358D0 Offset: 0x15358D0 VA: 0x15358D0
	public void Deactivate() { }

	// RVA: 0x1535914 Offset: 0x1535914 VA: 0x1535914
	public void OnClickObject() { }
}

// Namespace: 
public class WarBoardTreasureListComponent : BaseDialog // TypeDefIndex: 11957
{
	// Fields
	protected Action closeCallbackFunc; // 0x58
	[SerializeField] // RVA: 0xC83B0C Offset: 0xC83B0C VA: 0xC83B0C
	private Transform listRoot; // 0x60
	[SerializeField] // RVA: 0xC83B1C Offset: 0xC83B1C VA: 0xC83B1C
	private GameObject prefabResultItem; // 0x68
	[SerializeField] // RVA: 0xC83B2C Offset: 0xC83B2C VA: 0xC83B2C
	private float iconScale; // 0x70
	[SerializeField] // RVA: 0xC83B3C Offset: 0xC83B3C VA: 0xC83B3C
	private UIPanel scrollView; // 0x78
	[SerializeField] // RVA: 0xC83B4C Offset: 0xC83B4C VA: 0xC83B4C
	private UIPanel scrollBar; // 0x80
	[SerializeField] // RVA: 0xC83B5C Offset: 0xC83B5C VA: 0xC83B5C
	private UISprite listBg; // 0x88
	[SerializeField] // RVA: 0xC83B6C Offset: 0xC83B6C VA: 0xC83B6C
	private UILabel titleLabel; // 0x90
	[SerializeField] // RVA: 0xC83B7C Offset: 0xC83B7C VA: 0xC83B7C
	private UILabel textLabel; // 0x98
	[SerializeField] // RVA: 0xC83B8C Offset: 0xC83B8C VA: 0xC83B8C
	private UICommonButton closeButton; // 0xA0
	[SerializeField] // RVA: 0xC83B9C Offset: 0xC83B9C VA: 0xC83B9C
	private Vector3 basePos; // 0xA8
	[SerializeField] // RVA: 0xC83BAC Offset: 0xC83BAC VA: 0xC83BAC
	private Vector3 gridPos; // 0xB4
	[SerializeField] // RVA: 0xC83BBC Offset: 0xC83BBC VA: 0xC83BBC
	private int width; // 0xC0
	[SerializeField] // RVA: 0xC83BCC Offset: 0xC83BCC VA: 0xC83BCC
	private int height; // 0xC4
	private WarBoardTreasureListComponent.DialogType dialogType; // 0xC8

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x1536900 Offset: 0x1536900 VA: 0x1536900
	public void .ctor() { }

	// RVA: 0x1536974 Offset: 0x1536974 VA: 0x1536974
	public void Init() { }

	// RVA: 0x15369BC Offset: 0x15369BC VA: 0x15369BC
	public void Open(int[] treasureList, WarBoardTreasureListComponent.DialogType type, Action closeCallback) { }

	// RVA: 0x1536EE0 Offset: 0x1536EE0 VA: 0x1536EE0
	public void OnClickCloseButton() { }

	// RVA: 0x1536FC0 Offset: 0x1536FC0 VA: 0x1536FC0
	public void setListData(int[] treasureList, int setColMax = 0) { }

	// RVA: 0x15373AC Offset: 0x15373AC VA: 0x15373AC
	protected void EndClose() { }

	// RVA: 0x1537464 Offset: 0x1537464 VA: 0x1537464 Slot: 4
	protected override GameObject get_closeBtnObject() { }
}

// Namespace: 
public enum WarBoardTreasureListComponent.DialogType // TypeDefIndex: 11958
{
	// Fields
	public int value__; // 0x0
	public const WarBoardTreasureListComponent.DialogType AcquiredDialog = 0;
	public const WarBoardTreasureListComponent.DialogType RewardDialog = 1;
	public const WarBoardTreasureListComponent.DialogType GetTreasureListDialog = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46D74 Offset: 0xC46D74 VA: 0xC46D74
private sealed class WarBoardTreasureListComponent.<Open>c__AnonStorey0 // TypeDefIndex: 11959
{
	// Fields
	internal int[] treasureList; // 0x10
	internal WarBoardTreasureListComponent $this; // 0x18

	// Methods

	// RVA: 0x1536ED8 Offset: 0x1536ED8 VA: 0x1536ED8
	public void .ctor() { }

	// RVA: 0x1537504 Offset: 0x1537504 VA: 0x1537504
	internal void <>m__0() { }
}

// Namespace: 
public class WarBoardZoomSwitchButton : MonoBehaviour // TypeDefIndex: 11960
{
	// Fields
	private const int FreeZoomIndex = -1;
	[SerializeField] // RVA: 0xC83BDC Offset: 0xC83BDC VA: 0xC83BDC
	private UISprite buttonSprite; // 0x18
	[SerializeField] // RVA: 0xC83BEC Offset: 0xC83BEC VA: 0xC83BEC
	private UICommonButton button; // 0x20
	[SerializeField] // RVA: 0xC83BFC Offset: 0xC83BFC VA: 0xC83BFC
	private string freeZoomSpriteName; // 0x28
	[SerializeField] // RVA: 0xC83C0C Offset: 0xC83C0C VA: 0xC83C0C
	private WarBoardZoomSwitchButton.ZoomSpritePair[] zoomSpritePairArray; // 0x30
	[SerializeField] // RVA: 0xC83C1C Offset: 0xC83C1C VA: 0xC83C1C
	private Vector3 positionForConfigurationMode; // 0x38
	[SerializeField] // RVA: 0xC83C2C Offset: 0xC83C2C VA: 0xC83C2C
	private Vector3 positionForPlayMode; // 0x44
	[SerializeField] // RVA: 0xC83C3C Offset: 0xC83C3C VA: 0xC83C3C
	private float cameraWorkDuration; // 0x50
	[SerializeField] // RVA: 0xC83C4C Offset: 0xC83C4C VA: 0xC83C4C
	private FSOffset fsOffset; // 0x58
	private int currentZoomIndex; // 0x60
	public Action<float> OnButtonClicked; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC83C5C Offset: 0xC83C5C VA: 0xC83C5C
