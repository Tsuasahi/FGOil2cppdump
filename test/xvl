	[CompilerGeneratedAttribute] // RVA: 0xCEDDE0 Offset: 0xCEDDE0 VA: 0xCEDDE0
	private static Func<WarBoardActionTrendEntity, bool> <>f__am$cache9; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCEDDF0 Offset: 0xCEDDF0 VA: 0xCEDDF0
	private static Func<WarBoardActionTrendEntity, Decimal> <>f__am$cacheA; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCEDE00 Offset: 0xCEDE00 VA: 0xCEDE00
	private static Func<WarBoardActionTrendEntity, Decimal> <>f__am$cacheB; // 0x58

	// Methods

	// RVA: 0x1B401FC Offset: 0x1B401FC VA: 0x1B401FC
	public void .ctor(WarBoardStageNpcEntity npc) { }

	// RVA: 0x1B49A40 Offset: 0x1B49A40 VA: 0x1B49A40
	public static WarBoardAIRoute.DistanceType CalcurateDistanceType(int newDistance, int oldDistance) { }

	// RVA: 0x1B40C30 Offset: 0x1B40C30 VA: 0x1B40C30
	public void Clear() { }

	// RVA: 0x1B41E68 Offset: 0x1B41E68 VA: 0x1B41E68
	public void BeforeCreateRouteData() { }

	[DebuggerHiddenAttribute] // RVA: 0xD42724 Offset: 0xD42724 VA: 0xD42724
	// RVA: 0x1B438B0 Offset: 0x1B438B0 VA: 0x1B438B0
	public IEnumerator CreateRouteData(Dictionary<int, uint> piecePlaceData, int searchCount, List<WarBoardAIRoute.RouteData> routeDataList) { }

	// RVA: 0x1B49A5C Offset: 0x1B49A5C VA: 0x1B49A5C
	private Dictionary<uint, int> GetRouteDataActionList(List<WarBoardAIRoute.RouteData> routeDataList, out int replaceCount, out int actionCount, out int masterActionCount, out int masterReplaceCount) { }

	// RVA: 0x1B49D80 Offset: 0x1B49D80 VA: 0x1B49D80
	private int GetRequiredCost(int moveCost, int masterMoveCost, int replaceCount, int actionCount, int masterActionCount, int masterReplaceCount) { }

	// RVA: 0x1B49D98 Offset: 0x1B49D98 VA: 0x1B49D98
	public HashSet<int> GetEvalValueTargetSquareList(Dictionary<int, uint> piecePlaceData, Dictionary<uint, int> routeDataActionList, out int masterSquareIndex) { }

	// RVA: 0x1B4A0D4 Offset: 0x1B4A0D4 VA: 0x1B4A0D4
	public WarBoardAIRoute.RouteData.Flag GetFlagDefenseArea(int masterSquareIndex, out HashSet<int> defenseAreaSquareIndexs, out int masterAndEnemyRange, out List<int[]> shortestRoutes, int[] allyPieces, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x1B4A7DC Offset: 0x1B4A7DC VA: 0x1B4A7DC
	private WarBoardEvalValueSquare.EvalValueSquare GetEvalValueSquare(Dictionary<int, WarBoardEvalValueSquare.EvalValueSquare> evalValueSquareList, int index) { }

	// RVA: 0x1B4A848 Offset: 0x1B4A848 VA: 0x1B4A848
	public int GetRangeShortMost(Dictionary<int, WarBoardPieceData> dicPieceList, int baseSquareIndex) { }

	// RVA: 0x1B4A9FC Offset: 0x1B4A9FC VA: 0x1B4A9FC
	public static WarBoardAIRoute.DistanceType CompareBaseRangeToActionRange(Dictionary<int, WarBoardPieceData> dicPieceList, int baseRange, int actionIndex) { }

	// RVA: 0x1B4ABBC Offset: 0x1B4ABBC VA: 0x1B4ABBC
	private bool CanAcquireItem(int targetSquare, List<int> alreadyGetItemList) { }

	// RVA: 0x1B4AC74 Offset: 0x1B4AC74 VA: 0x1B4AC74
	public static WarBoardAIRoute.DistanceType CompareBaseRange(int baseRange, int actionRange) { }

	// RVA: 0x1B4A658 Offset: 0x1B4A658 VA: 0x1B4A658
	public static bool IsDetour(int[] route, int[] blockPieces) { }

	// RVA: 0x1B4AC90 Offset: 0x1B4AC90 VA: 0x1B4AC90
	public static bool IsBlockShortestRouteEnemyAndMaster(List<int[]> shortestEnemyRoute, int index) { }

	// RVA: 0x1B4AE4C Offset: 0x1B4AE4C VA: 0x1B4AE4C
	public static bool IsAllBlockShortestRouteEnemyAndMastr(List<int[]> shortestEnemyRoute, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x1B4B1FC Offset: 0x1B4B1FC VA: 0x1B4B1FC
	private void GetTargetItemToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicItemPutSquareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x1B4B4E0 Offset: 0x1B4B4E0 VA: 0x1B4B4E0
	private void GetTargetPieceToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicPiecePutSqareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x1B4B6E8 Offset: 0x1B4B6E8 VA: 0x1B4B6E8
	private void GetTargetTreasureToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicTreasurePutSqareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x1B4B8F0 Offset: 0x1B4B8F0 VA: 0x1B4B8F0
	private void GetTargetSquareToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicSquarePutSqareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x1B4BAF8 Offset: 0x1B4BAF8 VA: 0x1B4BAF8
	private Dictionary<int, WarBoardAIRoute.TargetData> GetTargetToDistance(WarBoardPieceData basePiece, List<WarBoardAIRoute.RouteData> routeDataList, int baseSquareIndex) { }

	// RVA: 0x1B4BCBC Offset: 0x1B4BCBC VA: 0x1B4BCBC
	private Dictionary<int, int> GetDesignationItemToDistance(WarBoardPieceData basePiece, List<WarBoardAIRoute.RouteData> routeDataList, int baseSquareIndex) { }

	// RVA: 0x1B4BFFC Offset: 0x1B4BFFC VA: 0x1B4BFFC
	private Dictionary<uint, int> GetAllEnemyToDistance(List<WarBoardAIRoute.RouteData> routeDataList, int baseSquareIndex, out int servantAndEnemyRange, out int servantAndEnemyMasterRange) { }

	// RVA: 0x1B4C1F4 Offset: 0x1B4C1F4 VA: 0x1B4C1F4
	private WarBoardAIRoute.RouteData.Flag GetFlagAroundSquareCheck(WarBoardSquareData baseSquare, WarBoardPieceData basePiece, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x1B4C580 Offset: 0x1B4C580 VA: 0x1B4C580
	private WarBoardAIRoute.AdvantagePieceData GetAdvantagePieceData(WarBoardPieceData basePiece, int baseSquareIndex) { }

	// RVA: 0x1B4C6FC Offset: 0x1B4C6FC VA: 0x1B4C6FC
	private bool IsActable(WarBoardPieceData basePiece, int basePieceActionCount, int requiredCost) { }

	// RVA: 0x1B4C810 Offset: 0x1B4C810 VA: 0x1B4C810
	private WarBoardPieceData GetActionPiece(WarBoardPieceData basePiece, int actionSquareIndex, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x1B4C8DC Offset: 0x1B4C8DC VA: 0x1B4C8DC
	private WarBoardAIRoute.RouteData.Flag GetFlagAdvantage(int baseClassId, int actionClassId) { }

	// RVA: 0x1B4CA78 Offset: 0x1B4CA78 VA: 0x1B4CA78
	private void LinkedCount(int actionSquareIndex, Dictionary<int, uint> piecePlaceData, ref int attackByLinkEnemy, ref int attackByLinkAlly) { }

	// RVA: 0x1B4CC90 Offset: 0x1B4CC90 VA: 0x1B4CC90
	private bool IsActableReplace(WarBoardPieceData basePiece, WarBoardPieceData actionPiece, int requiredCost, List<WarBoardAIRoute.RouteData> routeDataList) { }

	// RVA: 0x1B4CEF0 Offset: 0x1B4CEF0 VA: 0x1B4CEF0
	private Dictionary<int, uint> UpdatePiecePlaceData(Dictionary<int, uint> piecePlaceData, WarBoardAIRoute.RouteData routeData, int baseSquareIndex, int actionSquareIndex) { }

	// RVA: 0x1B4D06C Offset: 0x1B4D06C VA: 0x1B4D06C
	private void LinkedPieceCount(ref WarBoardAIRoute.RouteData routeData, Dictionary<int, uint> piecePlaceData, List<int> alreadyGetItemSquares) { }

	// RVA: 0x1B4D4C8 Offset: 0x1B4D4C8 VA: 0x1B4D4C8
	private Dictionary<int, WarBoardAIRoute.TargetData> GetMoveByTargetDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData, int actionSquareIndex, WarBoardPieceData basePiece) { }

	// RVA: 0x1B4D794 Offset: 0x1B4D794 VA: 0x1B4D794
	private void ClassAdvantageDistance(ref WarBoardAIRoute.RouteData routeData, WarBoardAIRoute.AdvantagePieceData advantagePieceData, int actionSquareIndex) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42734 Offset: 0xD42734 VA: 0xD42734
	// RVA: 0x1B4D9BC Offset: 0x1B4D9BC VA: 0x1B4D9BC
	private static IEnumerable<WarBoardRatingOffsetEntity> <BeforeCreateRouteData>m__0(WarBoardAIRoute.PiecePersonality x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42744 Offset: 0xD42744 VA: 0xD42744
	// RVA: 0x1B4D9E4 Offset: 0x1B4D9E4 VA: 0x1B4D9E4
	private static bool <BeforeCreateRouteData>m__1(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42754 Offset: 0xD42754 VA: 0xD42754
	// RVA: 0x1B4DA1C Offset: 0x1B4DA1C VA: 0x1B4DA1C
	private static int <BeforeCreateRouteData>m__2(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42764 Offset: 0xD42764 VA: 0xD42764
	// RVA: 0x1B4DA44 Offset: 0x1B4DA44 VA: 0x1B4DA44
	private static bool <BeforeCreateRouteData>m__3(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42774 Offset: 0xD42774 VA: 0xD42774
	// RVA: 0x1B4DA7C Offset: 0x1B4DA7C VA: 0x1B4DA7C
	private static int <BeforeCreateRouteData>m__4(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42784 Offset: 0xD42784 VA: 0xD42784
	// RVA: 0x1B4DAA4 Offset: 0x1B4DAA4 VA: 0x1B4DAA4
	private static IEnumerable<WarBoardActionTrendEntity> <BeforeCreateRouteData>m__5(WarBoardAIRoute.PiecePersonality x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42794 Offset: 0xD42794 VA: 0xD42794
	// RVA: 0x1B4DACC Offset: 0x1B4DACC VA: 0x1B4DACC
	private static bool <BeforeCreateRouteData>m__6(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD427A4 Offset: 0xD427A4 VA: 0xD427A4
	// RVA: 0x1B4DB04 Offset: 0x1B4DB04 VA: 0x1B4DB04
	private static Decimal <BeforeCreateRouteData>m__7(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD427B4 Offset: 0xD427B4 VA: 0xD427B4
	// RVA: 0x1B4DB90 Offset: 0x1B4DB90 VA: 0x1B4DB90
	private static Decimal <BeforeCreateRouteData>m__8(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD427C4 Offset: 0xD427C4 VA: 0xD427C4
	// RVA: 0x1B4DC1C Offset: 0x1B4DC1C VA: 0x1B4DC1C
	private static bool <BeforeCreateRouteData>m__9(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD427D4 Offset: 0xD427D4 VA: 0xD427D4
	// RVA: 0x1B4DC54 Offset: 0x1B4DC54 VA: 0x1B4DC54
	private static Decimal <BeforeCreateRouteData>m__A(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD427E4 Offset: 0xD427E4 VA: 0xD427E4
	// RVA: 0x1B4DCE0 Offset: 0x1B4DCE0 VA: 0x1B4DCE0
	private static Decimal <BeforeCreateRouteData>m__B(WarBoardActionTrendEntity x) { }
}

// Namespace: 
public class WarBoardAIRoute.PiecePersonality // TypeDefIndex: 11724
{
	// Fields
	public List<WarBoardActionTrendEntity> actionTrandList; // 0x10
	public List<WarBoardRatingOffsetEntity> ratingOffsetList; // 0x18
	public List<WarBoardRatingOffsetEntity> attackOffset; // 0x20
	public List<WarBoardRatingOffsetEntity> moveOffset; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCEDE10 Offset: 0xCEDE10 VA: 0xCEDE10
	private static Func<WarBoardRatingOffsetEntity, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCEDE20 Offset: 0xCEDE20 VA: 0xCEDE20
	private static Func<WarBoardRatingOffsetEntity, bool> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x18DD0C0 Offset: 0x18DD0C0 VA: 0x18DD0C0
	public void .ctor() { }

	// RVA: 0x18DD158 Offset: 0x18DD158 VA: 0x18DD158
	public List<WarBoardRatingOffsetEntity> AttackOffset() { }

	// RVA: 0x18DD238 Offset: 0x18DD238 VA: 0x18DD238
	public List<WarBoardRatingOffsetEntity> MoveOffset() { }

	[CompilerGeneratedAttribute] // RVA: 0xD427F4 Offset: 0xD427F4 VA: 0xD427F4
	// RVA: 0x18DD314 Offset: 0x18DD314 VA: 0x18DD314
	private static bool <AttackOffset>m__0(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42804 Offset: 0xD42804 VA: 0xD42804
	// RVA: 0x18DD344 Offset: 0x18DD344 VA: 0x18DD344
	private static bool <MoveOffset>m__1(WarBoardRatingOffsetEntity x) { }
}

// Namespace: 
public enum WarBoardAIRoute.DistanceType // TypeDefIndex: 11725
{
	// Fields
	public int value__; // 0x0
	public const WarBoardAIRoute.DistanceType none = 0;
	public const WarBoardAIRoute.DistanceType approach = 1;
	public const WarBoardAIRoute.DistanceType noChange = 2;
	public const WarBoardAIRoute.DistanceType leave = 3;
}

// Namespace: 
public class WarBoardAIRoute.RouteData // TypeDefIndex: 11726
{
	// Fields
	public WarBoardAIRoute.RouteData.Flag flagNow; // 0x10
	public int baseIndex; // 0x18
	public int actionIndex; // 0x1C
	public WarBoardSquareData baseSquare; // 0x20
	public WarBoardSquareData actionSquare; // 0x28
	public WarBoardPieceData basePiece; // 0x30
	public WarBoardPieceData actionPiece; // 0x38
	public List<WarBoardPieceData> moveByLinkedPiece; // 0x40
	public float evalValue; // 0x48
	public int attackEvalOffsetAddValue; // 0x4C
	public int moveEvalOffsetAddValue; // 0x50
	public int sumAttackEvalOffsetAddValue; // 0x54
	public int sumMoveEvalOffsetAddValue; // 0x58
	public float warAttackEvalOffsetMagnification; // 0x5C
	public float warMoveEvalOffsetMagnification; // 0x60
	public float benAttackEvalOffsetMagnification; // 0x64
	public float benMoveEvalOffsetMagnification; // 0x68
	public float sumWarAttackEvalOffsetMagnification; // 0x6C
	public float sumWarMoveEvalOffsetMagnification; // 0x70
	public float sumBenAttackEvalOffsetMagnification; // 0x74
	public float sumBenMoveEvalOffsetMagnification; // 0x78
	public int moveByLinkedEnemy; // 0x7C
	public int moveByLinkedAlly; // 0x80
	public int moveByLinkedItem; // 0x84
	public WarBoardAIRoute.DistanceType isMoveByMasterAndEnemyRange; // 0x88
	public WarBoardAIRoute.DistanceType isMoveByServantAndMasterRange; // 0x8C
	public WarBoardAIRoute.DistanceType isMoveByServantAndEnemyRange; // 0x90
	public WarBoardAIRoute.DistanceType isMoveByServantAndEnemyMasterRange; // 0x94
	public List<int> listExistDesignationItem; // 0x98
	public Dictionary<int, WarBoardAIRoute.DistanceType> dicItemIdKeyIsMoveByServantDesignationItemRange; // 0xA0
	public Dictionary<int, bool> dicMoveByServantGetDesignationItem; // 0xA8
	public WarBoardAIRoute.DistanceType isMoveByServantAndClassAdvantageServantRange; // 0xB0
	public WarBoardAIRoute.DistanceType isMoveByServantAndClassDisAdvantageServantRange; // 0xB4
	public WarBoardAIRoute.DistanceType isMoveByServantAndAttackAdvantageServantRange; // 0xB8
	public WarBoardAIRoute.DistanceType isMoveByServantAndAttackDisAdvantageServantRange; // 0xBC
	public WarBoardAIRoute.DistanceType isMoveByServantAndDefenseAdvantageServantRange; // 0xC0
	public WarBoardAIRoute.DistanceType isMoveByServantAndDefenseDisAdvantageServantRange; // 0xC4
	public int attackByLinkedEnemy; // 0xC8
	public int attackByLinkedAlly; // 0xCC
	public int actionCountOnThisTurn; // 0xD0
	public int attackCountOnThisTurn; // 0xD4
	public Dictionary<uint, int> dicUniqueKeyRange; // 0xD8
	public Dictionary<int, WarBoardAIRoute.TargetData> dicPutIndexTargetData; // 0xE0
	public Dictionary<uint, int> dicEnemyRange; // 0xE8

	// Properties
	public bool notAction { get; }

	// Methods

	// RVA: 0x18DC34C Offset: 0x18DC34C VA: 0x18DC34C
	public void .ctor() { }

	// RVA: 0x18DC334 Offset: 0x18DC334 VA: 0x18DC334
	public bool HasFlag(WarBoardAIRoute.RouteData.Flag flag) { }

	// RVA: 0x18DD434 Offset: 0x18DD434 VA: 0x18DD434
	public static bool HasFlag(WarBoardAIRoute.RouteData.Flag flagNow, WarBoardAIRoute.RouteData.Flag flag) { }

	// RVA: 0x18DC35C Offset: 0x18DC35C VA: 0x18DC35C
	public bool HasActionPiece() { }

	// RVA: 0x18DC324 Offset: 0x18DC324 VA: 0x18DC324
	public bool get_notAction() { }
}

// Namespace: 
public enum WarBoardAIRoute.RouteData.Kind // TypeDefIndex: 11727
{
	// Fields
	public int value__; // 0x0
	public const WarBoardAIRoute.RouteData.Kind NONE = 0;
	public const WarBoardAIRoute.RouteData.Kind isAttack = 1;
	public const WarBoardAIRoute.RouteData.Kind isAttackMove = 2;
	public const WarBoardAIRoute.RouteData.Kind isMasterDefense = 3;
	public const WarBoardAIRoute.RouteData.Kind isAttackRange = 4;
	public const WarBoardAIRoute.RouteData.Kind isAttackMasterRange = 5;
	public const WarBoardAIRoute.RouteData.Kind isMoveByAttackRange = 6;
	public const WarBoardAIRoute.RouteData.Kind isMoveByAttackRangeMaster = 7;
	public const WarBoardAIRoute.RouteData.Kind isBenefitRange = 8;
	public const WarBoardAIRoute.RouteData.Kind isMoveByBenefitRange = 9;
	public const WarBoardAIRoute.RouteData.Kind isDefenseAreaOnEnemy = 10;
	public const WarBoardAIRoute.RouteData.Kind isDefenseAreaOnServant = 11;
	public const WarBoardAIRoute.RouteData.Kind existClassAdvantageServant = 12;
	public const WarBoardAIRoute.RouteData.Kind existClassDisAdvantageServant = 13;
	public const WarBoardAIRoute.RouteData.Kind existAttackAdvantageServant = 14;
	public const WarBoardAIRoute.RouteData.Kind existAttackDisAdvantageServant = 15;
	public const WarBoardAIRoute.RouteData.Kind existDefenseAdvantageServant = 16;
	public const WarBoardAIRoute.RouteData.Kind existDefenseDisAdvantageServant = 17;
	public const WarBoardAIRoute.RouteData.Kind isTargetClassAdvantage = 18;
	public const WarBoardAIRoute.RouteData.Kind isTargetAttackAdvantage = 19;
	public const WarBoardAIRoute.RouteData.Kind isTargetDefenseAdvantage = 20;
	public const WarBoardAIRoute.RouteData.Kind isTargetClassDisAdvantage = 21;
	public const WarBoardAIRoute.RouteData.Kind isTargetAttackDisAdvantage = 22;
	public const WarBoardAIRoute.RouteData.Kind isTargetDefenseDisAdvantage = 23;
	public const WarBoardAIRoute.RouteData.Kind isAroundClassAdvantage = 24;
	public const WarBoardAIRoute.RouteData.Kind isMoveByAroundClassAdvantage = 25;
	public const WarBoardAIRoute.RouteData.Kind isAllyReplace = 26;
	public const WarBoardAIRoute.RouteData.Kind isGetItem = 27;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnItem = 28;
	public const WarBoardAIRoute.RouteData.Kind isAllBlockShortestRouteEnemyAndMaster = 29;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnAllBlockShortestRouteEnemyAndMaster = 30;
	public const WarBoardAIRoute.RouteData.Kind isBlockShortestRouteEnemyAndMaster = 31;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnBlockShortestRouteEnemyAndMaster = 32;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnEffect = 33;
	public const WarBoardAIRoute.RouteData.Kind isAroundAllyMaster = 34;
	public const WarBoardAIRoute.RouteData.Kind isAroundAllyServant = 35;
	public const WarBoardAIRoute.RouteData.Kind isMoveByMasterOnBlockShortestRouteEnemyAndMaster = 36;
	public const WarBoardAIRoute.RouteData.Kind isDefenseAreaWithInEnemyAllBlock = 37;
	public const WarBoardAIRoute.RouteData.Kind isMoveByDefenseAreaServant = 38;
	public const WarBoardAIRoute.RouteData.Kind isMoveByDefenseAreaEnemy = 39;
	public const WarBoardAIRoute.RouteData.Kind isAllDefenseAreaEnemyRouteBlock = 40;
	public const WarBoardAIRoute.RouteData.Kind isComeBackSquare = 41;
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC97C3C Offset: 0xC97C3C VA: 0xC97C3C
public enum WarBoardAIRoute.RouteData.Flag // TypeDefIndex: 11728
{
	// Fields
	public long value__; // 0x0
	public const WarBoardAIRoute.RouteData.Flag NONE = 1;
	public const WarBoardAIRoute.RouteData.Flag isAttack = 2;
	public const WarBoardAIRoute.RouteData.Flag isAttackMove = 4;
	public const WarBoardAIRoute.RouteData.Flag isMasterDefense = 8;
	public const WarBoardAIRoute.RouteData.Flag isAttackRange = 16;
	public const WarBoardAIRoute.RouteData.Flag isAttackMasterRange = 32;
	public const WarBoardAIRoute.RouteData.Flag isMoveByAttackRange = 64;
	public const WarBoardAIRoute.RouteData.Flag isMoveByAttackRangeMaster = 128;
	public const WarBoardAIRoute.RouteData.Flag isBenefitRange = 256;
	public const WarBoardAIRoute.RouteData.Flag isMoveByBenefitRange = 512;
	public const WarBoardAIRoute.RouteData.Flag isDefenseAreaOnEnemy = 1024;
	public const WarBoardAIRoute.RouteData.Flag isDefenseAreaOnServant = 2048;
	public const WarBoardAIRoute.RouteData.Flag existClassAdvantageServant = 4096;
	public const WarBoardAIRoute.RouteData.Flag existClassDisAdvantageServant = 8192;
	public const WarBoardAIRoute.RouteData.Flag existAttackAdvantageServant = 16384;
	public const WarBoardAIRoute.RouteData.Flag existAttackDisAdvantageServant = 32768;
	public const WarBoardAIRoute.RouteData.Flag existDefenseAdvantageServant = 65536;
	public const WarBoardAIRoute.RouteData.Flag existDefenseDisAdvantageServant = 131072;
	public const WarBoardAIRoute.RouteData.Flag isTargetClassAdvantage = 262144;
	public const WarBoardAIRoute.RouteData.Flag isTargetAttackAdvantage = 524288;
	public const WarBoardAIRoute.RouteData.Flag isTargetDefenseAdvantage = 1048576;
	public const WarBoardAIRoute.RouteData.Flag isTargetClassDisAdvantage = 2097152;
	public const WarBoardAIRoute.RouteData.Flag isTargetAttackDisAdvantage = 4194304;
	public const WarBoardAIRoute.RouteData.Flag isTargetDefenseDisAdvantage = 8388608;
	public const WarBoardAIRoute.RouteData.Flag isAroundClassAdvantage = 16777216;
	public const WarBoardAIRoute.RouteData.Flag isMoveByAroundClassAdvantage = 33554432;
	public const WarBoardAIRoute.RouteData.Flag isAllyReplace = 67108864;
	public const WarBoardAIRoute.RouteData.Flag isGetItem = 134217728;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnItem = 268435456;
	public const WarBoardAIRoute.RouteData.Flag isAllBlockShortestRouteEnemyAndMaster = 536870912;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnAllBlockShortestRouteEnemyAndMaster = 1073741824;
	public const WarBoardAIRoute.RouteData.Flag isBlockShortestRouteEnemyAndMaster = 2147483648;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnBlockShortestRouteEnemyAndMaster = 4294967296;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnEffect = 8589934592;
	public const WarBoardAIRoute.RouteData.Flag isAroundAllyMaster = 17179869184;
	public const WarBoardAIRoute.RouteData.Flag isAroundAllyServant = 34359738368;
	public const WarBoardAIRoute.RouteData.Flag isMoveByMasterOnBlockShortestRouteEnemyAndMaster = 68719476736;
	public const WarBoardAIRoute.RouteData.Flag isDefenseAreaWithInEnemyAllBlock = 137438953472;
	public const WarBoardAIRoute.RouteData.Flag isMoveByDefenseAreaServant = 274877906944;
	public const WarBoardAIRoute.RouteData.Flag isMoveByDefenseAreaEnemy = 549755813888;
	public const WarBoardAIRoute.RouteData.Flag isAllDefenseAreaEnemyRouteBlock = 1099511627776;
	public const WarBoardAIRoute.RouteData.Flag isComeBackSquare = 2199023255552;
}

// Namespace: 
public class WarBoardAIRoute.AdvantagePieceData // TypeDefIndex: 11729
{
	// Fields
	public WarBoardAIRoute.RouteData.Flag flagNow; // 0x10
	public int baseCARange; // 0x18
	public int baseCDARange; // 0x1C
	public int baseAARange; // 0x20
	public int baseADARange; // 0x24
	public int baseDARange; // 0x28
	public int baseDDARange; // 0x2C
	public Dictionary<int, WarBoardPieceData> dicClassAdvantageServant; // 0x30
	public Dictionary<int, WarBoardPieceData> dicClassDisAdvantageServant; // 0x38
	public Dictionary<int, WarBoardPieceData> dicAttackAdvantageServant; // 0x40
	public Dictionary<int, WarBoardPieceData> dicAttackDisAdvantageServant; // 0x48
	public Dictionary<int, WarBoardPieceData> dicDefenseAdvantageServant; // 0x50
	public Dictionary<int, WarBoardPieceData> dicDefenseDisAdvantageServant; // 0x58

	// Methods

	// RVA: 0x18DCF50 Offset: 0x18DCF50 VA: 0x18DCF50
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIRoute.DesignationItemData // TypeDefIndex: 11730
{
	// Fields
	public Dictionary<int, WarBoardItemData> dicSquareIndexKeyItemData; // 0x10

	// Methods

	// RVA: 0x18DD050 Offset: 0x18DD050 VA: 0x18DD050
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIRoute.PutSquareTarget // TypeDefIndex: 11731
{
	// Fields
	public Dictionary<int, WarBoardAIRoute.TargetData> dicItemPutSquareIndex; // 0x10
	public Dictionary<int, WarBoardAIRoute.TargetData> dicPiecePutSqareIndex; // 0x18
	public Dictionary<int, WarBoardAIRoute.TargetData> dicTreasurePutSqareIndex; // 0x20
	public Dictionary<int, WarBoardAIRoute.TargetData> dicSquarePutSqareIndex; // 0x28

	// Methods

	// RVA: 0x18DD374 Offset: 0x18DD374 VA: 0x18DD374
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIRoute.TargetData // TypeDefIndex: 11732
{
	// Fields
	public bool isAround; // 0x10
	public WarBoardPieceData targetPiece; // 0x18
	public WarBoardItemData targetItem; // 0x20
	public WarBoardTreasureData targetTreasure; // 0x28
	public WarBoardSquareData targetSquare; // 0x30
	public WarBoardAIRoute.DistanceType moveByDistanceType; // 0x38
	public WarBoardAIRoute.DistanceType detourMoveByDistanceType; // 0x3C
	public int nowSquareIndex; // 0x40
	public int[] baseRoute; // 0x48
	public int[] detourRoute; // 0x50
	public int actionTrendId; // 0x58
	public int conditionId; // 0x5C
	public int putSquareIndex; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCEDE30 Offset: 0xCEDE30 VA: 0xCEDE30
	private static Func<WarBoardPieceData, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x18DD440 Offset: 0x18DD440 VA: 0x18DD440
	public void .ctor(WarBoardPieceData targetPiece, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x18DD498 Offset: 0x18DD498 VA: 0x18DD498
	public void .ctor(WarBoardItemData targetItem, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x18DD4F0 Offset: 0x18DD4F0 VA: 0x18DD4F0
	public void .ctor(WarBoardTreasureData targetTreasure, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x18DD548 Offset: 0x18DD548 VA: 0x18DD548
	public void .ctor(WarBoardSquareData targetSquare, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x18DD5A0 Offset: 0x18DD5A0 VA: 0x18DD5A0
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardPieceData targetPiece, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x18DD824 Offset: 0x18DD824 VA: 0x18DD824
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardItemData targetItem, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x18DD8A8 Offset: 0x18DD8A8 VA: 0x18DD8A8
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardTreasureData targetTreasure, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x18DD92C Offset: 0x18DD92C VA: 0x18DD92C
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardSquareData targetSquare, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x18DD624 Offset: 0x18DD624 VA: 0x18DD624
	private void Init(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42814 Offset: 0xD42814 VA: 0xD42814
	// RVA: 0x18DD9B0 Offset: 0x18DD9B0 VA: 0x18DD9B0
	private static int <Init>m__0(WarBoardPieceData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB27B0 Offset: 0xCB27B0 VA: 0xCB27B0
private sealed class WarBoardAIRoute.<BeforeCreateRouteData>c__AnonStorey1 // TypeDefIndex: 11733
{
	// Fields
	internal int squareIndex; // 0x10

	// Methods

	// RVA: 0x18D8564 Offset: 0x18D8564 VA: 0x18D8564
	public void .ctor() { }

	// RVA: 0x18D856C Offset: 0x18D856C VA: 0x18D856C
	internal bool <>m__0(WarBoardItemData z) { }

	// RVA: 0x18D85D4 Offset: 0x18D85D4 VA: 0x18D85D4
	internal bool <>m__1(WarBoardItemData z) { }

	// RVA: 0x18D8618 Offset: 0x18D8618 VA: 0x18D8618
	internal bool <>m__2(WarBoardPieceData z) { }

	// RVA: 0x18D865C Offset: 0x18D865C VA: 0x18D865C
	internal bool <>m__3(WarBoardTreasureData z) { }

	// RVA: 0x18D86A0 Offset: 0x18D86A0 VA: 0x18D86A0
	internal bool <>m__4(WarBoardSquareData z) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB27C0 Offset: 0xCB27C0 VA: 0xCB27C0
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11734
{
	// Fields
	internal WarBoardData <warBoardData>__0; // 0x10
	internal int searchCount; // 0x18
	internal int <replaceCount>__0; // 0x1C
	internal int <actionCount>__0; // 0x20
	internal int <masterActionCount>__0; // 0x24
	internal int <masterReplaceCount>__0; // 0x28
	internal List<WarBoardAIRoute.RouteData> routeDataList; // 0x30
	internal Dictionary<uint, int> <routeDataActionList>__0; // 0x38
	internal int <requiredCost>__0; // 0x40
	internal Dictionary<int, uint> piecePlaceData; // 0x48
	internal HashSet<int> <evalValueTargetSquare>__0; // 0x50
	internal int <masterAndEnemyRange>__0; // 0x58
	internal HashSet<int> <defenseAreaSquareIndexs>__0; // 0x60
	internal int[] <allyPieceIndexs>__0; // 0x68
	internal WarBoardAIRoute.RouteData.Flag <baseFlag>__0; // 0x70
	internal List<int[]> <shortestEnemyRoute>__0; // 0x78
	internal Dictionary.Enumerator<int, uint> $locvar0; // 0x80
	internal KeyValuePair<int, uint> <data>__1; // 0x98
	internal int <baseSquareIndex>__2; // 0xA0
	internal WarBoardSquareData <baseSquare>__2; // 0xA8
	internal WarBoardAIRoute.RouteData.Flag <tmpFlagNow>__2; // 0xB0
	internal int <servantAndMasterRange>__2; // 0xB8
	internal int <servantAndEnemyRange>__2; // 0xBC
	internal int <servantAndEnemyMasterRange>__2; // 0xC0
	internal int <basePieceActionCount>__2; // 0xC4
	internal Dictionary<int, int> <dicBaseDIRange>__2; // 0xC8
	internal Dictionary<int, WarBoardAIRoute.TargetData> <dicKeyPutIndexValueTargetData>__2; // 0xD0
	internal Dictionary<uint, int> <dicEnemyRange>__2; // 0xD8
	internal WarBoardAIRoute.AdvantagePieceData <advantagePieceData>__2; // 0xE0
	internal int <baseCARange>__2; // 0xE8
	internal int <baseCDARange>__2; // 0xEC
	internal int <baseAARange>__2; // 0xF0
	internal int <baseADARange>__2; // 0xF4
	internal int <baseDARange>__2; // 0xF8
	internal int <baseDDARange>__2; // 0xFC
	internal HashSet<WarBoardAIRoute.RouteData> <basePieceActionPieceRouteList>__2; // 0x100
	internal HashSet<WarBoardAIRoute.RouteData> <basePieceBasePieceRouteList>__2; // 0x108
	internal List.Enumerator<WarBoardAIRoute.RouteData> $locvar1; // 0x110
	internal int[] $locvar2; // 0x128
	internal int $locvar3; // 0x130
	internal WarBoardAIRoute.RouteData <routeData>__4; // 0x138
	internal int <diffActCount>__4; // 0x140
	internal Dictionary<int, uint> <nextPiecePlaceData>__4; // 0x148
	internal Dictionary.Enumerator<int, uint> $locvar4; // 0x150
	internal WarBoardAIEvalCalcurater <evalCalc>__4; // 0x168
	internal List<WarBoardAIRoute.RouteData> <copyRouteData>__4; // 0x170
	internal IOrderedEnumerable<KeyValuePair<IEnumerator, float>> <sortCreateRouteData>__5; // 0x178
	internal int <count>__5; // 0x180
	internal int <cutCount>__5; // 0x184
	internal IEnumerator<KeyValuePair<IEnumerator, float>> $locvarA; // 0x188
	internal KeyValuePair<IEnumerator, float> <createRouteData>__6; // 0x190
	internal WarBoardAIRoute $this; // 0x1A0
	internal object $current; // 0x1A8
	internal bool $disposing; // 0x1B0
	internal int $PC; // 0x1B4
	private WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 $locvarB; // 0x1B8
	private WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey3 $locvarC; // 0x1C0
	private WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey4 $locvarD; // 0x1C8
	private static Func<KeyValuePair<IEnumerator, float>, float> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4A974 Offset: 0xD4A974 VA: 0xD4A974
	// RVA: 0x18D86E4 Offset: 0x18D86E4 VA: 0x18D86E4
	public void .ctor() { }

	// RVA: 0x18D86EC Offset: 0x18D86EC VA: 0x18D86EC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A984 Offset: 0xD4A984 VA: 0xD4A984
	// RVA: 0x18DC638 Offset: 0x18DC638 VA: 0x18DC638 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A994 Offset: 0xD4A994 VA: 0xD4A994
	// RVA: 0x18DC640 Offset: 0x18DC640 VA: 0x18DC640 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A9A4 Offset: 0xD4A9A4 VA: 0xD4A9A4
	// RVA: 0x18DC648 Offset: 0x18DC648 VA: 0x18DC648 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A9B4 Offset: 0xD4A9B4 VA: 0xD4A9B4
	// RVA: 0x18DC740 Offset: 0x18DC740 VA: 0x18DC740 Slot: 6
	public void Reset() { }

	// RVA: 0x18DC7A8 Offset: 0x18DC7A8 VA: 0x18DC7A8
	private static float <>m__0(KeyValuePair<IEnumerator, float> x) { }
}

// Namespace: 
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 // TypeDefIndex: 11735
{
	// Fields
	internal int masterSquareIndex; // 0x10
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x18DC314 Offset: 0x18DC314 VA: 0x18DC314
	public void .ctor() { }

	// RVA: 0x18DC804 Offset: 0x18DC804 VA: 0x18DC804
	internal bool <>m__0(int x) { }
}

// Namespace: 
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey3 // TypeDefIndex: 11736
{
	// Fields
	internal WarBoardPieceData basePiece; // 0x10
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0 <>f__ref$0; // 0x18
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 <>f__ref$2; // 0x20

	// Methods

	// RVA: 0x18DC31C Offset: 0x18DC31C VA: 0x18DC31C
	public void .ctor() { }

	// RVA: 0x18DC814 Offset: 0x18DC814 VA: 0x18DC814
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey4 // TypeDefIndex: 11737
{
	// Fields
	internal int actionSquareIndex; // 0x10
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0 <>f__ref$0; // 0x18
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 <>f__ref$2; // 0x20
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey3 <>f__ref$3; // 0x28

	// Methods

	// RVA: 0x18DC344 Offset: 0x18DC344 VA: 0x18DC344
	public void .ctor() { }

	// RVA: 0x18DC8F4 Offset: 0x18DC8F4 VA: 0x18DC8F4
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }

	// RVA: 0x18DC92C Offset: 0x18DC92C VA: 0x18DC92C
	internal bool <>m__1(WarBoardAIRoute.RouteData x) { }

	// RVA: 0x18DC964 Offset: 0x18DC964 VA: 0x18DC964
	internal bool <>m__2(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB27D0 Offset: 0xCB27D0 VA: 0xCB27D0
private sealed class WarBoardAIRoute.<GetFlagDefenseArea>c__AnonStorey5 // TypeDefIndex: 11738
{
	// Fields
	internal Dictionary<int, uint> piecePlaceData; // 0x10
	internal int shortestRange; // 0x18
	internal int masterSquareIndex; // 0x1C
	internal List<int[]> routeDatas; // 0x20

	// Methods

	// RVA: 0x18DCA60 Offset: 0x18DCA60 VA: 0x18DCA60
	public void .ctor() { }

	// RVA: 0x18DCA68 Offset: 0x18DCA68 VA: 0x18DCA68
	internal bool <>m__0(int square) { }

	// RVA: 0x18DCAD8 Offset: 0x18DCAD8 VA: 0x18DCAD8
	internal bool <>m__1(KeyValuePair<int, int> x) { }

	// RVA: 0x18DCB44 Offset: 0x18DCB44 VA: 0x18DCB44
	internal void <>m__2(KeyValuePair<int, int> x) { }

	// RVA: 0x18DCC10 Offset: 0x18DCC10 VA: 0x18DCC10
	internal void <>m__3(int[] y) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB27E0 Offset: 0xCB27E0 VA: 0xCB27E0
private sealed class WarBoardAIRoute.<IsDetour>c__AnonStorey6 // TypeDefIndex: 11739
{
	// Fields
	internal int[] route; // 0x10

	// Methods

	// RVA: 0x18DCEC8 Offset: 0x18DCEC8 VA: 0x18DCEC8
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB27F0 Offset: 0xCB27F0 VA: 0xCB27F0
private sealed class WarBoardAIRoute.<IsDetour>c__AnonStorey7 // TypeDefIndex: 11740
{
	// Fields
	internal int i; // 0x10
	internal WarBoardAIRoute.<IsDetour>c__AnonStorey6 <>f__ref$6; // 0x18

	// Methods

	// RVA: 0x18DCED0 Offset: 0x18DCED0 VA: 0x18DCED0
	public void .ctor() { }

	// RVA: 0x18DCED8 Offset: 0x18DCED8 VA: 0x18DCED8
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2800 Offset: 0xCB2800 VA: 0xCB2800
private sealed class WarBoardAIRoute.<IsBlockShortestRouteEnemyAndMaster>c__AnonStorey8 // TypeDefIndex: 11741
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x18DCEB0 Offset: 0x18DCEB0 VA: 0x18DCEB0
	public void .ctor() { }

	// RVA: 0x18DCEB8 Offset: 0x18DCEB8 VA: 0x18DCEB8
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2810 Offset: 0xCB2810 VA: 0xCB2810
private sealed class WarBoardAIRoute.<IsAllBlockShortestRouteEnemyAndMastr>c__AnonStorey9 // TypeDefIndex: 11742
{
	// Fields
	internal KeyValuePair<int, uint> data; // 0x10

	// Methods

	// RVA: 0x18DCE40 Offset: 0x18DCE40 VA: 0x18DCE40
	public void .ctor() { }

	// RVA: 0x18DCE48 Offset: 0x18DCE48 VA: 0x18DCE48
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2820 Offset: 0xCB2820 VA: 0xCB2820
private sealed class WarBoardAIRoute.<GetTargetItemToDistance>c__AnonStoreyA // TypeDefIndex: 11743
{
	// Fields
	internal KeyValuePair<int, WarBoardAIRoute.TargetData> item; // 0x10

	// Methods

	// RVA: 0x18DCCB0 Offset: 0x18DCCB0 VA: 0x18DCCB0
	public void .ctor() { }

	// RVA: 0x18DCCB8 Offset: 0x18DCCB8 VA: 0x18DCCB8
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2830 Offset: 0xCB2830 VA: 0xCB2830
private sealed class WarBoardAIRoute.<GetDesignationItemToDistance>c__AnonStoreyB // TypeDefIndex: 11744
{
	// Fields
	internal KeyValuePair<int, WarBoardItemData> item; // 0x10

	// Methods

	// RVA: 0x18DC974 Offset: 0x18DC974 VA: 0x18DC974
	public void .ctor() { }

	// RVA: 0x18DC97C Offset: 0x18DC97C VA: 0x18DC97C
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2840 Offset: 0xCB2840 VA: 0xCB2840
private sealed class WarBoardAIRoute.<IsActableReplace>c__AnonStoreyC // TypeDefIndex: 11745
{
	// Fields
	internal WarBoardPieceData actionPiece; // 0x10

	// Methods

	// RVA: 0x18DCD64 Offset: 0x18DCD64 VA: 0x18DCD64
	public void .ctor() { }

	// RVA: 0x18DCD6C Offset: 0x18DCD6C VA: 0x18DCD6C
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
public class WarBoardEvalValueSquare // TypeDefIndex: 11746
{
	// Fields
	private float averageBenefitValue; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCEDE40 Offset: 0xCEDE40 VA: 0xCEDE40
	private static Func<KeyValuePair<int, WarBoardEvalValueSquare.EvalValueSquare>, float> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x18EE8F4 Offset: 0x18EE8F4 VA: 0x18EE8F4
	public void .ctor() { }

	// RVA: 0x18EE8FC Offset: 0x18EE8FC VA: 0x18EE8FC
	public Dictionary<int, WarBoardEvalValueSquare.EvalValueSquare> Calcurate(Dictionary<int, uint> dicPieceData, HashSet<int> evalValueTargetSquare, List<WarBoardAIRoute.RouteData> routeDataList, List<WarBoardRatingBase> ratingBaseList, int forceId, Dictionary<int, WarBoardEvalValueSquare.CalcEval> dicRatingbaseCalcValue) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42824 Offset: 0xD42824 VA: 0xD42824
	// RVA: 0x18EF668 Offset: 0x18EF668 VA: 0x18EF668
	private static float <Calcurate>m__0(KeyValuePair<int, WarBoardEvalValueSquare.EvalValueSquare> x) { }
}

// Namespace: 
public class WarBoardEvalValueSquare.CalcEval // TypeDefIndex: 11747
{
	// Fields
	public WarBoardRatingBaseEntity.Viewpoint viewpoint; // 0x10
	public int addNum; // 0x14
	public float eval; // 0x18

	// Methods

	// RVA: 0x18EF714 Offset: 0x18EF714 VA: 0x18EF714
	public void .ctor() { }
}

// Namespace: 
public class WarBoardEvalValueSquare.EvalValueSquare // TypeDefIndex: 11748
{
	// Fields
	public WarBoardSquareData squareData; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCEDE50 Offset: 0xCEDE50 VA: 0xCEDE50
	[DebuggerBrowsableAttribute] // RVA: 0xCEDE50 Offset: 0xCEDE50 VA: 0xCEDE50
	private float <EvalValueWarsituation>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCEDE8C Offset: 0xCEDE8C VA: 0xCEDE8C
	[DebuggerBrowsableAttribute] // RVA: 0xCEDE8C Offset: 0xCEDE8C VA: 0xCEDE8C
	private float <EvalValueBenefit>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCEDEC8 Offset: 0xCEDEC8 VA: 0xCEDEC8
	[DebuggerBrowsableAttribute] // RVA: 0xCEDEC8 Offset: 0xCEDEC8 VA: 0xCEDEC8
	private float <EvalValue>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCEDF04 Offset: 0xCEDF04 VA: 0xCEDF04
	[DebuggerBrowsableAttribute] // RVA: 0xCEDF04 Offset: 0xCEDF04 VA: 0xCEDF04
	private float <WarAdjustmentValueA1>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xCEDF40 Offset: 0xCEDF40 VA: 0xCEDF40
	[DebuggerBrowsableAttribute] // RVA: 0xCEDF40 Offset: 0xCEDF40 VA: 0xCEDF40
	private float <WarAdjustmentValueB>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCEDF7C Offset: 0xCEDF7C VA: 0xCEDF7C
	[DebuggerBrowsableAttribute] // RVA: 0xCEDF7C Offset: 0xCEDF7C VA: 0xCEDF7C
	private float <BenAdjustmentValueA1>k__BackingField; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0xCEDFB8 Offset: 0xCEDFB8 VA: 0xCEDFB8
	[DebuggerBrowsableAttribute] // RVA: 0xCEDFB8 Offset: 0xCEDFB8 VA: 0xCEDFB8
	private float <BenAdjustmentValueB>k__BackingField; // 0x30

	// Properties
	public float EvalValueWarsituation { get; set; }
	public float EvalValueBenefit { get; set; }
	public float EvalValue { get; set; }
	public float WarAdjustmentValueA1 { get; set; }
	public float WarAdjustmentValueB { get; set; }
	public float BenAdjustmentValueA1 { get; set; }
	public float BenAdjustmentValueB { get; set; }

	// Methods

	// RVA: 0x18EF5D4 Offset: 0x18EF5D4 VA: 0x18EF5D4
	public void .ctor(WarBoardSquareData squareData) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42834 Offset: 0xD42834 VA: 0xD42834
	// RVA: 0x18EF658 Offset: 0x18EF658 VA: 0x18EF658
	public float get_EvalValueWarsituation() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42844 Offset: 0xD42844 VA: 0xD42844
	// RVA: 0x18EF610 Offset: 0x18EF610 VA: 0x18EF610
	public void set_EvalValueWarsituation(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42854 Offset: 0xD42854 VA: 0xD42854
	// RVA: 0x18EF660 Offset: 0x18EF660 VA: 0x18EF660
	public float get_EvalValueBenefit() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42864 Offset: 0xD42864 VA: 0xD42864
	// RVA: 0x18EF608 Offset: 0x18EF608 VA: 0x18EF608
	public void set_EvalValueBenefit(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42874 Offset: 0xD42874 VA: 0xD42874
	// RVA: 0x18EF71C Offset: 0x18EF71C VA: 0x18EF71C
	public float get_EvalValue() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42884 Offset: 0xD42884 VA: 0xD42884
	// RVA: 0x18EF724 Offset: 0x18EF724 VA: 0x18EF724
	public void set_EvalValue(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42894 Offset: 0xD42894 VA: 0xD42894
	// RVA: 0x18EF618 Offset: 0x18EF618 VA: 0x18EF618
	public float get_WarAdjustmentValueA1() { }

	[CompilerGeneratedAttribute] // RVA: 0xD428A4 Offset: 0xD428A4 VA: 0xD428A4
	// RVA: 0x18EF620 Offset: 0x18EF620 VA: 0x18EF620
	public void set_WarAdjustmentValueA1(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD428B4 Offset: 0xD428B4 VA: 0xD428B4
	// RVA: 0x18EF628 Offset: 0x18EF628 VA: 0x18EF628
	public float get_WarAdjustmentValueB() { }

	[CompilerGeneratedAttribute] // RVA: 0xD428C4 Offset: 0xD428C4 VA: 0xD428C4
	// RVA: 0x18EF630 Offset: 0x18EF630 VA: 0x18EF630
	public void set_WarAdjustmentValueB(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD428D4 Offset: 0xD428D4 VA: 0xD428D4
	// RVA: 0x18EF638 Offset: 0x18EF638 VA: 0x18EF638
	public float get_BenAdjustmentValueA1() { }

	[CompilerGeneratedAttribute] // RVA: 0xD428E4 Offset: 0xD428E4 VA: 0xD428E4
	// RVA: 0x18EF640 Offset: 0x18EF640 VA: 0x18EF640
	public void set_BenAdjustmentValueA1(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD428F4 Offset: 0xD428F4 VA: 0xD428F4
	// RVA: 0x18EF648 Offset: 0x18EF648 VA: 0x18EF648
	public float get_BenAdjustmentValueB() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42904 Offset: 0xD42904 VA: 0xD42904
	// RVA: 0x18EF650 Offset: 0x18EF650 VA: 0x18EF650
	public void set_BenAdjustmentValueB(float value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2850 Offset: 0xCB2850 VA: 0xCB2850
private sealed class WarBoardEvalValueSquare.<Calcurate>c__AnonStorey0 // TypeDefIndex: 11749
{
	// Fields
	internal WarBoardSquareData calcSquare; // 0x10

	// Methods

	// RVA: 0x18EF5CC Offset: 0x18EF5CC VA: 0x18EF5CC
	public void .ctor() { }

	// RVA: 0x18EF6D4 Offset: 0x18EF6D4 VA: 0x18EF6D4
	internal bool <>m__0(int x) { }
}

// Namespace: 
public static class AllRouteSearch // TypeDefIndex: 11750
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCEDFF4 Offset: 0xCEDFF4 VA: 0xCEDFF4
	private static Func<WarBoardSquareData, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCEE004 Offset: 0xCEE004 VA: 0xCEE004
	private static Func<WarBoardSquareData, int[]> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x15A6574 Offset: 0x15A6574 VA: 0x15A6574
	public static int[][] RouteSearch(int start, int end, int searchLimitRange = -1) { }

	// RVA: 0x15A6714 Offset: 0x15A6714 VA: 0x15A6714
	private static List<int[]> CoreLogic(int now, int end, Dictionary<int, int[]> squareDict, List<int> route, int searchLimitRange = -1) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42914 Offset: 0xD42914 VA: 0xD42914
	// RVA: 0x15A699C Offset: 0x15A699C VA: 0x15A699C
	private static int <RouteSearch>m__0(WarBoardSquareData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42924 Offset: 0xD42924 VA: 0xD42924
	// RVA: 0x15A69C8 Offset: 0x15A69C8 VA: 0x15A69C8
	private static int[] <RouteSearch>m__1(WarBoardSquareData x) { }
}

// Namespace: 
public static class AStarSearch // TypeDefIndex: 11751
{
	// Fields
	private static Dictionary<AStarSearch.CacheKey, int[]> routeCache; // 0x0
	private static Dictionary<AStarSearch.CacheKey, int[]> detourRouteCache; // 0x8
	private static Dictionary<int, WarBoardSquareData> squareDict; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCEE014 Offset: 0xCEE014 VA: 0xCEE014
	private static Func<WarBoardSquareData, int> <>f__am$cache0; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCEE024 Offset: 0xCEE024 VA: 0xCEE024
	private static Comparison<AStarSearch.Node> <>f__am$cache1; // 0x20

	// Methods

	// RVA: 0x1597974 Offset: 0x1597974 VA: 0x1597974
	public static void CacheClear() { }

	// RVA: 0x1597A34 Offset: 0x1597A34 VA: 0x1597A34
	public static void DetourCacheClear() { }

	// RVA: 0x1597AB8 Offset: 0x1597AB8 VA: 0x1597AB8
	public static int[] RouteSearch(WarBoardPieceData piece, int startSquare, int endSquare, bool isEnemyBlock = False, Func<int, bool> isBlockAction) { }
