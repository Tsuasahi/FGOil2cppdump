
	// RVA: 0x1A76508 Offset: 0x1A76508 VA: 0x1A76508
	private void FrameInFinish() { }

	// RVA: 0x1A76524 Offset: 0x1A76524 VA: 0x1A76524
	public void FrameOut() { }

	// RVA: 0x1A76684 Offset: 0x1A76684 VA: 0x1A76684
	private void FrameOutFinish() { }

	// RVA: 0x1A76688 Offset: 0x1A76688 VA: 0x1A76688
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventRaceRoundComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5849
{
	// Fields
	[SerializeField] // RVA: 0xCBD43C Offset: 0xCBD43C VA: 0xCBD43C
	private UISprite baseWindow; // 0x20
	[SerializeField] // RVA: 0xCBD44C Offset: 0xCBD44C VA: 0xCBD44C
	private UISprite mapNameSpr; // 0x28
	[SerializeField] // RVA: 0xCBD45C Offset: 0xCBD45C VA: 0xCBD45C
	private UISprite roundNumSpr; // 0x30
	[SerializeField] // RVA: 0xCBD46C Offset: 0xCBD46C VA: 0xCBD46C
	private GameObject effectAttachRoot; // 0x38
	private int nowHeaderId; // 0x40
	private AssetData effectAssetData; // 0x48

	// Methods

	// RVA: 0x1A76730 Offset: 0x1A76730 VA: 0x1A76730
	public void .ctor() { }

	// RVA: 0x1A76740 Offset: 0x1A76740 VA: 0x1A76740 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x1A76748 Offset: 0x1A76748 VA: 0x1A76748
	public void OnDestroy() { }

	// RVA: 0x1A7674C Offset: 0x1A7674C VA: 0x1A7674C
	private void Destroy() { }

	// RVA: 0x1A76750 Offset: 0x1A76750 VA: 0x1A76750 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1A76754 Offset: 0x1A76754 VA: 0x1A76754 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x1A7675C Offset: 0x1A7675C VA: 0x1A7675C
	public void Setup(int eventId, int warId, int mapId, int termId, AssetData effectAssetData) { }

	// RVA: 0x1A76AE0 Offset: 0x1A76AE0 VA: 0x1A76AE0
	public void setHeaderImg(int headerId) { }

	// RVA: 0x1A68F98 Offset: 0x1A68F98 VA: 0x1A68F98
	public void setupNameChangeEffect(int event_id, Action endCallback) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A28 Offset: 0xD35A28 VA: 0xD35A28
	// RVA: 0x1A76BC0 Offset: 0x1A76BC0 VA: 0x1A76BC0
	private void <setupNameChangeEffect>m__0() { }
}

// Namespace: 
public class TitleInfoEventRaidBossComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5850
{
	// Fields
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX; // 0x0
	private static readonly string RAIDBOSS_ICON_LASTBATTLE_SPNAME_PREFIX; // 0x8
	private static readonly string RAIDBOSS_CLEAR_EFFECT_PREFAB; // 0x10
	private static readonly Vector3 RAIDBOSS_ANIM_ROOT_POS; // 0x18
	private static readonly float REST_TIME_UPDATE_INTERVAL_SEC; // 0x24
	private static readonly int RAIDBOSS_DEFEAT_COUNT_POS_X; // 0x28
	private static readonly float ANIM_DURATION_FRAME_IN_BOSS; // 0x2C
	private static readonly float ANIM_DURATION_HP_CUT; // 0x30
	private static readonly float ANIM_DURATION_SPLIT_ALPHA; // 0x34
	private static readonly float CLEAR_CALLBACK_DELAY; // 0x38
	private static readonly float CLEAR_END_CALLBACK_DELAY; // 0x3C
	private static readonly float CLEAR_END_CALLBACK_DELAY_JUMBLE_RAID; // 0x40
	private static readonly float CLEAR_END_CALLBACK_DELAY_NORMAL; // 0x44
	[SerializeField] // RVA: 0xCBD47C Offset: 0xCBD47C VA: 0xCBD47C
	private GameObject hpBarParent; // 0x20
	[SerializeField] // RVA: 0xCBD48C Offset: 0xCBD48C VA: 0xCBD48C
	private GameObject defeatCntBarParent; // 0x28
	[SerializeField] // RVA: 0xCBD49C Offset: 0xCBD49C VA: 0xCBD49C
	private UISprite raidBossIconSp; // 0x30
	[SerializeField] // RVA: 0xCBD4AC Offset: 0xCBD4AC VA: 0xCBD4AC
	private UISprite hpFrame; // 0x38
	[SerializeField] // RVA: 0xCBD4BC Offset: 0xCBD4BC VA: 0xCBD4BC
	private UISprite hpBg; // 0x40
	[SerializeField] // RVA: 0xCBD4CC Offset: 0xCBD4CC VA: 0xCBD4CC
	private UISprite hpBar; // 0x48
	[SerializeField] // RVA: 0xCBD4DC Offset: 0xCBD4DC VA: 0xCBD4DC
	private UISlider hpBarSlider; // 0x50
	[SerializeField] // RVA: 0xCBD4EC Offset: 0xCBD4EC VA: 0xCBD4EC
	private UILabel totalHpLabel; // 0x58
	[SerializeField] // RVA: 0xCBD4FC Offset: 0xCBD4FC VA: 0xCBD4FC
	private UILabel restTimeLabel; // 0x60
	[SerializeField] // RVA: 0xCBD50C Offset: 0xCBD50C VA: 0xCBD50C
	private UISprite defeatCntFrame; // 0x68
	[SerializeField] // RVA: 0xCBD51C Offset: 0xCBD51C VA: 0xCBD51C
	private UISprite defeatCntBg; // 0x70
	[SerializeField] // RVA: 0xCBD52C Offset: 0xCBD52C VA: 0xCBD52C
	private UISprite defeatCntBar; // 0x78
	[SerializeField] // RVA: 0xCBD53C Offset: 0xCBD53C VA: 0xCBD53C
	private UISlider defeatCntBarSlider; // 0x80
	[SerializeField] // RVA: 0xCBD54C Offset: 0xCBD54C VA: 0xCBD54C
	private UILabel totalDefeatCntLabel; // 0x88
	[SerializeField] // RVA: 0xCBD55C Offset: 0xCBD55C VA: 0xCBD55C
	private UISlider defeatCntBarSliderWhite; // 0x90
	[SerializeField] // RVA: 0xCBD56C Offset: 0xCBD56C VA: 0xCBD56C
	private UISprite defeatCntBarSliderWhiteSp; // 0x98
	[SerializeField] // RVA: 0xCBD57C Offset: 0xCBD57C VA: 0xCBD57C
	private GameObject defeatCntBarSplitter; // 0xA0
	[SerializeField] // RVA: 0xCBD58C Offset: 0xCBD58C VA: 0xCBD58C
	private UISprite defeatCntBarSplitterSp; // 0xA8
	[SerializeField] // RVA: 0xCBD59C Offset: 0xCBD59C VA: 0xCBD59C
	private UILabel modeName; // 0xB0
	[SerializeField] // RVA: 0xCBD5AC Offset: 0xCBD5AC VA: 0xCBD5AC
	private UISprite lastBattleSpr; // 0xB8
	[SerializeField] // RVA: 0xCBD5BC Offset: 0xCBD5BC VA: 0xCBD5BC
	private UILabel bossName; // 0xC0
	[SerializeField] // RVA: 0xCBD5CC Offset: 0xCBD5CC VA: 0xCBD5CC
	private float overwritePosX; // 0xC8
	private float barSizeX; // 0xCC
	private UISlider useBarSlider; // 0xD0
	private UILabel useTotalLabel; // 0xD8
	private int eventId; // 0xE0
	private EventRaidEntity eventRaidEntity; // 0xE8
	private UserEventRaidEntity userEventRaidEntity; // 0xF0
	private EventBossStatusUiEntity eventBossStatusUiEntity; // 0xF8
	private float restTimeUpdateSec; // 0x100
	private bool isEncountRaidBoss; // 0x104
	private bool isCheckTutorial; // 0x105
	private bool isRaidDefeatCount; // 0x106
	private bool isJumbleRaid; // 0x107
	private bool isSingleRaid; // 0x108
	private bool isTimeLimitRaid; // 0x109
	private bool isLastBattleRelease; // 0x10A
	private UISprite[] hpBarSplitters; // 0x110
	private bool isRaidClear; // 0x118
	private bool isDefeatRaidDisp; // 0x119
	private int warId; // 0x11C
	private float HPfrom; // 0x120
	private float HPto; // 0x124
	private float HPsplitPoint; // 0x128
	private int HPsplitNo; // 0x12C
	private Vector3 originPos; // 0x130
	private Action animEndCall; // 0x140
	private Action onClearCall; // 0x148
	private GameObject splitHpEffect; // 0x150
	private GameObject clearBossEffect; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xCBD5DC Offset: 0xCBD5DC VA: 0xCBD5DC
	private static Action <>f__am$cache0; // 0x48

	// Methods

	// RVA: 0x1A76BC8 Offset: 0x1A76BC8 VA: 0x1A76BC8
	public void .ctor() { }

	// RVA: 0x1A76BD0 Offset: 0x1A76BD0 VA: 0x1A76BD0
	public void DisableCheckTutorial() { }

	// RVA: 0x1A76BD8 Offset: 0x1A76BD8 VA: 0x1A76BD8 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x1A76BF4 Offset: 0x1A76BF4 VA: 0x1A76BF4
	private void Update() { }

	// RVA: 0x1A652F4 Offset: 0x1A652F4 VA: 0x1A652F4
	public void Setup(UIAtlas terminalAtlas, int eventId, int warId, int day = -1, bool isJumbleRaid = False, bool isSingleRaid = False) { }

	// RVA: 0x1A779E4 Offset: 0x1A779E4 VA: 0x1A779E4
	public void OnDestroy() { }

	// RVA: 0x1A76E54 Offset: 0x1A76E54 VA: 0x1A76E54
	private void Destroy() { }

	// RVA: 0x1A779E8 Offset: 0x1A779E8 VA: 0x1A779E8 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1A779EC Offset: 0x1A779EC VA: 0x1A779EC Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x1A779F4 Offset: 0x1A779F4 VA: 0x1A779F4
	private void SetBossIcon(EventRaidEntity eventRaidEnt, bool isLastBattle) { }

	// RVA: 0x1A7703C Offset: 0x1A7703C VA: 0x1A7703C
	private void SetSpriteFromEventUI(UISprite sprite, string prefix, int gaugeId) { }

	// RVA: 0x1A76E58 Offset: 0x1A76E58 VA: 0x1A76E58
	private void SetLastBattleIcon(UISprite sprite, string prefix, int eventId, int iconId) { }

	// RVA: 0x1A77158 Offset: 0x1A77158 VA: 0x1A77158
	public void SetDisp() { }

	// RVA: 0x1A784C8 Offset: 0x1A784C8 VA: 0x1A784C8
	private long GetRaidBossMaxHP() { }

	// RVA: 0x1A77D58 Offset: 0x1A77D58 VA: 0x1A77D58
	private long GetRaidBossTotalDamage() { }

	// RVA: 0x1A784E0 Offset: 0x1A784E0 VA: 0x1A784E0
	public bool IsAliveRaidBoss() { }

	// RVA: 0x1A7851C Offset: 0x1A7851C VA: 0x1A7851C
	public bool IsJumbleSingleRaidLastBattle() { }

	// RVA: 0x1A77BFC Offset: 0x1A77BFC VA: 0x1A77BFC
	private void SetHpBarSplitters(bool isFlag) { }

	// RVA: 0x1A76BFC Offset: 0x1A76BFC VA: 0x1A76BFC
	private void UpdateRestTime(bool isForce = False) { }

	// RVA: 0x1A64A8C Offset: 0x1A64A8C VA: 0x1A64A8C
	public bool IsTargetRaid(int eventId, int day) { }

	// RVA: 0x1A7856C Offset: 0x1A7856C VA: 0x1A7856C
	public void SetDamageAnimation(Action onClearCallback) { }

	// RVA: 0x1A78A08 Offset: 0x1A78A08 VA: 0x1A78A08
	public void setBeforeMovePos() { }

	// RVA: 0x1A78B44 Offset: 0x1A78B44 VA: 0x1A78B44
	public void StartDamageAnimation(AssetData mapAssetData, Action callBack) { }

	// RVA: 0x1A78E20 Offset: 0x1A78E20 VA: 0x1A78E20
	private void PlayFrameInBoss() { }

	// RVA: 0x1A79050 Offset: 0x1A79050 VA: 0x1A79050
	private void PlayHpNameAlpha() { }

	// RVA: 0x1A79054 Offset: 0x1A79054 VA: 0x1A79054
	private void PlayHpCut() { }

	// RVA: 0x1A791C8 Offset: 0x1A791C8 VA: 0x1A791C8
	private void PlayHpDeletion() { }

	// RVA: 0x1A79570 Offset: 0x1A79570 VA: 0x1A79570
	private bool IsPlayClearAnimation(int raidDeadQuestId, bool isJumbleSingleRaid) { }

	// RVA: 0x1A796DC Offset: 0x1A796DC VA: 0x1A796DC
	private void SetClearAlpha() { }

	// RVA: 0x1A79BDC Offset: 0x1A79BDC VA: 0x1A79BDC
	private void DoClearCallback() { }

	// RVA: 0x1A79D10 Offset: 0x1A79D10 VA: 0x1A79D10
	private void OnStartFadeOutAnimation() { }

	// RVA: 0x1A79904 Offset: 0x1A79904 VA: 0x1A79904
	private void OnEndAnimation() { }

	// RVA: 0x1A617E0 Offset: 0x1A617E0 VA: 0x1A617E0
	public bool IsClear() { }

	// RVA: 0x1A77E88 Offset: 0x1A77E88 VA: 0x1A77E88
	private string GetAiModeName(long totalDamage) { }

	// RVA: 0x1A7841C Offset: 0x1A7841C VA: 0x1A7841C
	private float ConvertHpToRate(long hp, long maxHp) { }

	// RVA: 0x1A77D3C Offset: 0x1A77D3C VA: 0x1A77D3C
	private float GetHpSplitPositionX(long splitHp, long maxHp) { }

	// RVA: 0x1A78098 Offset: 0x1A78098 VA: 0x1A78098
	private string GetRestCountText(long totalHp, long totalDamage) { }

	// RVA: 0x1A78008 Offset: 0x1A78008 VA: 0x1A78008
	private void SetOutlineBattleColor(UILabel label, Color defaultColor) { }

	// RVA: 0x1A78438 Offset: 0x1A78438 VA: 0x1A78438
	private void SetOutlineLastColor(UILabel label, Color defaultColor) { }

	// RVA: 0x1A78B70 Offset: 0x1A78B70 VA: 0x1A78B70
	private GameObject GetClearBossEffect(AssetData mapAssetData) { }

	// RVA: 0x1A79934 Offset: 0x1A79934 VA: 0x1A79934
	private AnimationClip GetClearBossAnimClip(Animation animation) { }

	// RVA: 0x1A79EB0 Offset: 0x1A79EB0 VA: 0x1A79EB0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A38 Offset: 0xD35A38 VA: 0xD35A38
	// RVA: 0x1A79FE4 Offset: 0x1A79FE4 VA: 0x1A79FE4
	private static void <PlayHpCut>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE190 Offset: 0xCAE190 VA: 0xCAE190
private sealed class TitleInfoEventRaidBossComponent.<GetAiModeName>c__AnonStorey0 // TypeDefIndex: 5851
{
	// Fields
	internal long totalDamage; // 0x10

	// Methods

	// RVA: 0x1A79EA8 Offset: 0x1A79EA8 VA: 0x1A79EA8
	public void .ctor() { }

	// RVA: 0x1A79FE8 Offset: 0x1A79FE8 VA: 0x1A79FE8
	internal bool <>m__0(long hp) { }
}

// Namespace: 
public class TitleInfoEventRaidBossOldComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5852
{
	// Fields
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX; // 0x0
	[SerializeField] // RVA: 0xCBD5EC Offset: 0xCBD5EC VA: 0xCBD5EC
	private TitleInfoEventRaidDayComponent titleInfoEventRaidDayPrefab; // 0x20
	[SerializeField] // RVA: 0xCBD5FC Offset: 0xCBD5FC VA: 0xCBD5FC
	private TitleInfoEventRaidHpComponent titleInfoEventRaidHpPrefab; // 0x28
	[SerializeField] // RVA: 0xCBD60C Offset: 0xCBD60C VA: 0xCBD60C
	private GameObject[] titleInfoEventRaidDayObjs; // 0x30
	[SerializeField] // RVA: 0xCBD61C Offset: 0xCBD61C VA: 0xCBD61C
	private GameObject leftPos; // 0x38
	[SerializeField] // RVA: 0xCBD62C Offset: 0xCBD62C VA: 0xCBD62C
	private UISprite raidBossIconSp; // 0x40
	[SerializeField] // RVA: 0xCBD63C Offset: 0xCBD63C VA: 0xCBD63C
	private GameObject oneDayHpObj; // 0x48
	[SerializeField] // RVA: 0xCBD64C Offset: 0xCBD64C VA: 0xCBD64C
	private UISlider hpBarSlider; // 0x50
	[SerializeField] // RVA: 0xCBD65C Offset: 0xCBD65C VA: 0xCBD65C
	private GameObject dayFrameObj; // 0x58
	[SerializeField] // RVA: 0xCBD66C Offset: 0xCBD66C VA: 0xCBD66C
	private UILabel totalHpLabel; // 0x60
	private TitleInfoEventRaidDayComponent[] raidDayComponents; // 0x68
	private TitleInfoEventRaidHpComponent[] raidHpComponents; // 0x70
	private int eventId; // 0x78

	// Methods

	// RVA: 0x1A79FF8 Offset: 0x1A79FF8 VA: 0x1A79FF8
	public void .ctor() { }

	// RVA: 0x1A7A000 Offset: 0x1A7A000 VA: 0x1A7A000 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x1A7A008 Offset: 0x1A7A008 VA: 0x1A7A008
	public void Setup(int eventId) { }

	// RVA: 0x1A7A680 Offset: 0x1A7A680 VA: 0x1A7A680
	public void OnDestroy() { }

	// RVA: 0x1A7A458 Offset: 0x1A7A458 VA: 0x1A7A458
	private void Destroy() { }

	// RVA: 0x1A7A684 Offset: 0x1A7A684 VA: 0x1A7A684 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1A7B634 Offset: 0x1A7B634 VA: 0x1A7B634 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x1A7B63C Offset: 0x1A7B63C VA: 0x1A7B63C
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventRaidDayComponent : MonoBehaviour // TypeDefIndex: 5853
{
	// Fields
	private static readonly int DEPTH_FRONT; // 0x0
	private static readonly int DEPTH_BACK; // 0x4
	private static readonly string NUM_SPNAME_PREFIX; // 0x8
	[SerializeField] // RVA: 0xCBD67C Offset: 0xCBD67C VA: 0xCBD67C
	private UISprite dayNumSp; // 0x18
	[SerializeField] // RVA: 0xCBD68C Offset: 0xCBD68C VA: 0xCBD68C
	private UISprite dayStrSp; // 0x20
	[SerializeField] // RVA: 0xCBD69C Offset: 0xCBD69C VA: 0xCBD69C
	private UISprite dayLastSp; // 0x28

	// Methods

	// RVA: 0x1A7B698 Offset: 0x1A7B698 VA: 0x1A7B698
	public void .ctor() { }

	// RVA: 0x1A7B12C Offset: 0x1A7B12C VA: 0x1A7B12C
	public void Setup(int eventId, int dispDayNum, TitleInfoEventRaidDayComponent.DayType dispDayType) { }

	// RVA: 0x1A7B6A0 Offset: 0x1A7B6A0 VA: 0x1A7B6A0
	private void SetDepth(int depth) { }

	// RVA: 0x1A7B724 Offset: 0x1A7B724 VA: 0x1A7B724
	private static void .cctor() { }
}

// Namespace: 
public enum TitleInfoEventRaidDayComponent.DayType // TypeDefIndex: 5854
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventRaidDayComponent.DayType YESTERDAY = 0;
	public const TitleInfoEventRaidDayComponent.DayType TODAY = 1;
	public const TitleInfoEventRaidDayComponent.DayType TOMORROW = 2;
}

// Namespace: 
public class TitleInfoEventRaidHpComponent : MonoBehaviour // TypeDefIndex: 5855
{
	// Fields
	public static readonly float WIDTH; // 0x0
	private static readonly string RESULT_OK_SPNAME; // 0x8
	private static readonly string RESULT_NG_SPNAME; // 0x10
	[SerializeField] // RVA: 0xCBD6AC Offset: 0xCBD6AC VA: 0xCBD6AC
	private UISprite resultSp; // 0x18

	// Methods

	// RVA: 0x1A7B7A0 Offset: 0x1A7B7A0 VA: 0x1A7B7A0
	public void .ctor() { }

	// RVA: 0x1A7B4BC Offset: 0x1A7B4BC VA: 0x1A7B4BC
	public void Setup(TitleInfoEventRaidHpComponent.HpType dispHpType) { }

	// RVA: 0x1A7B7A8 Offset: 0x1A7B7A8 VA: 0x1A7B7A8
	private static void .cctor() { }
}

// Namespace: 
public enum TitleInfoEventRaidHpComponent.HpType // TypeDefIndex: 5856
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventRaidHpComponent.HpType UNKNOWN = 0;
	public const TitleInfoEventRaidHpComponent.HpType RESULT_OK = 1;
	public const TitleInfoEventRaidHpComponent.HpType RESULT_NG = 2;
}

// Namespace: 
public class TitleInfoEventRaidStatusComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5857
{
	// Fields
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_BATTLE; // 0x0
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_WIN; // 0x8
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_LOSE; // 0x10
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_LAST; // 0x18
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_FRONT; // 0x20
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_BACK; // 0x28
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_PARTITION; // 0x30
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_BATTLE_ID; // 0x38
	private static readonly string RAIDBOSS_ICON_SPNAME_STATUS_01; // 0x40
	private static readonly string RAIDBOSS_ICON_SPNAME_STATUS_02; // 0x48
	private static readonly Vector3 FRAME_ANIM_OUT_POS_DELTA; // 0x50
	private static readonly Vector3 FRAME_ANIM_OUT_POS_JUMBLE; // 0x5C
	private static readonly float FRAME_ANIM_DURATION; // 0x68
	private static readonly float ENTRY_ANIM_DELAY; // 0x6C
	private static readonly Color ICON_MASK_COLOR; // 0x70
	private static readonly int JUMBLE_TERMINAL_REFRESH_TIME_OFFSET; // 0x80
	private static readonly int RAIDBOSS_SUB_GROUP_PARTITION_INDEX; // 0x84
	private static readonly int TITLE_LABEL_BASE_WIDTH; // 0x88
	private static readonly Color RAIDBOSS_OUTLINE_COLOR_BATTLE; // 0x8C
	private static readonly Color RAIDBOSS_OUTLINE_COLOR_WIN; // 0x9C
	private static readonly Color RAIDBOSS_OUTLINE_COLOR_LAST; // 0xAC
	[SerializeField] // RVA: 0xCBD6BC Offset: 0xCBD6BC VA: 0xCBD6BC
	private UISprite raidBossIconSp; // 0x20
	[SerializeField] // RVA: 0xCBD6CC Offset: 0xCBD6CC VA: 0xCBD6CC
	private UILabel raidBossHp; // 0x28
	[SerializeField] // RVA: 0xCBD6DC Offset: 0xCBD6DC VA: 0xCBD6DC
	private UILabel raidBossName; // 0x30
	[SerializeField] // RVA: 0xCBD6EC Offset: 0xCBD6EC VA: 0xCBD6EC
	private UILabel raidBossHpHead; // 0x38
	[SerializeField] // RVA: 0xCBD6FC Offset: 0xCBD6FC VA: 0xCBD6FC
	private UILabel raidBossStatus; // 0x40
	[SerializeField] // RVA: 0xCBD70C Offset: 0xCBD70C VA: 0xCBD70C
	private UISprite raidBattle; // 0x48
	[SerializeField] // RVA: 0xCBD71C Offset: 0xCBD71C VA: 0xCBD71C
	private UISprite subGroupBattleId; // 0x50
	[SerializeField] // RVA: 0xCBD72C Offset: 0xCBD72C VA: 0xCBD72C
	private int subGroupCount; // 0x58
	[SerializeField] // RVA: 0xCBD73C Offset: 0xCBD73C VA: 0xCBD73C
	private UIGrid subGroupGrid; // 0x60
	[SerializeField] // RVA: 0xCBD74C Offset: 0xCBD74C VA: 0xCBD74C
	private UISprite subGroupBase; // 0x68
	[SerializeField] // RVA: 0xCBD75C Offset: 0xCBD75C VA: 0xCBD75C
	private UISprite subGroup; // 0x70
	[SerializeField] // RVA: 0xCBD76C Offset: 0xCBD76C VA: 0xCBD76C
	private UISprite subGroupPartition; // 0x78
	private EventRaidEntity eventRaidEntity; // 0x80
	private EventBossStatusUiEntity eventBossStatusUiEntity; // 0x88
	private int currentDay; // 0x90
	private Vector3 inPos; // 0x94
	private Vector3 outPos; // 0xA0
	private bool isRaidDefeatCount; // 0xAC
	private bool isJumbleRaid; // 0xAD
	private bool isReprintLastWarRaid; // 0xAE
	private Action clickCallBack; // 0xB0
	private Action clearAnimCallBack; // 0xB8
	private int warId; // 0xC0
	private long targetTime; // 0xC8
	private int lastMinute; // 0xD0

	// Methods

	// RVA: 0x1A7B828 Offset: 0x1A7B828 VA: 0x1A7B828
	public void .ctor() { }

	// RVA: 0x1A7B838 Offset: 0x1A7B838 VA: 0x1A7B838 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x1A7B840 Offset: 0x1A7B840 VA: 0x1A7B840
	public void Setup(EventRaidEntity eventRaidEntity, int warId, int currentDay, bool isJumbleRaid = False, bool isReprintLastWarRaid = False) { }

	// RVA: 0x1A7BEDC Offset: 0x1A7BEDC VA: 0x1A7BEDC
	public void OnDestroy() { }

	// RVA: 0x1A7BDBC Offset: 0x1A7BDBC VA: 0x1A7BDBC
	private void Destroy() { }

	// RVA: 0x1A7BEE0 Offset: 0x1A7BEE0 VA: 0x1A7BEE0
	protected void Update() { }

	// RVA: 0x1A7BEE4 Offset: 0x1A7BEE4 VA: 0x1A7BEE4
	private void RefreshTimeStr() { }

	// RVA: 0x1A7C544 Offset: 0x1A7C544 VA: 0x1A7C544
	private void SetBossIcon(string spName) { }

	// RVA: 0x1A7BDC0 Offset: 0x1A7BDC0 VA: 0x1A7BDC0
	private void SetEventIcon(UISprite sprite, string prefix, int iconId) { }

	// RVA: 0x1A7C634 Offset: 0x1A7C634 VA: 0x1A7C634 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1A7D638 Offset: 0x1A7D638 VA: 0x1A7D638
	private string GetRestCountText(long totalHp, long totalDamage) { }

	// RVA: 0x1A650F8 Offset: 0x1A650F8 VA: 0x1A650F8
	public float GetCellHeight() { }

	// RVA: 0x1A7D83C Offset: 0x1A7D83C VA: 0x1A7D83C
	private void SetOutlineColor(UILabel label) { }

	// RVA: 0x1A7D8D0 Offset: 0x1A7D8D0 VA: 0x1A7D8D0
	private void SetOutlineColorAndDefault(UILabel label, Color defaultColor) { }

	// RVA: 0x1A7D960 Offset: 0x1A7D960 VA: 0x1A7D960
	private void SetOutlineBattleColor(UILabel label) { }

	// RVA: 0x1A7D41C Offset: 0x1A7D41C VA: 0x1A7D41C
	private void SetOutlineBattleColor() { }

	// RVA: 0x1A7DA5C Offset: 0x1A7DA5C VA: 0x1A7DA5C
	private void SetOutlineLastColor(UILabel label) { }

	// RVA: 0x1A7D7A4 Offset: 0x1A7D7A4 VA: 0x1A7D7A4
	private void SetOutlineLastColor() { }

	// RVA: 0x1A7DB58 Offset: 0x1A7DB58 VA: 0x1A7DB58
	private void SetOutlineWinColor(UILabel label) { }

	// RVA: 0x1A7D7F0 Offset: 0x1A7D7F0 VA: 0x1A7D7F0
	private void SetOutlineWinColor() { }

	// RVA: 0x1A7DC54 Offset: 0x1A7DC54 VA: 0x1A7DC54 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x1A7DC5C Offset: 0x1A7DC5C VA: 0x1A7DC5C
	public void onClick() { }

	// RVA: 0x1A7DDFC Offset: 0x1A7DDFC VA: 0x1A7DDFC
	public void setClickCallBack(Action cb) { }

	// RVA: 0x1A7DE04 Offset: 0x1A7DE04 VA: 0x1A7DE04
	public UISprite getIconSprite() { }

	// RVA: 0x1A7DE0C Offset: 0x1A7DE0C VA: 0x1A7DE0C
	public UISprite getSubGroupBase() { }

	// RVA: 0x1A64B4C Offset: 0x1A64B4C VA: 0x1A64B4C
	public bool IsTargetRaid(int eventId, int day) { }

	// RVA: 0x1A7DE14 Offset: 0x1A7DE14 VA: 0x1A7DE14
	public void SetEntryAnim() { }

	// RVA: 0x1A7E000 Offset: 0x1A7E000 VA: 0x1A7E000
	private void EntryAnim() { }

	// RVA: 0x1A7E2C0 Offset: 0x1A7E2C0 VA: 0x1A7E2C0
	public void SetClearAnim() { }

	// RVA: 0x1A64C84 Offset: 0x1A64C84 VA: 0x1A64C84
	public void StartClearAnim(Action callback) { }

	// RVA: 0x1A7E3E0 Offset: 0x1A7E3E0 VA: 0x1A7E3E0
	private void AnimFrameOutEnd() { }

	// RVA: 0x1A7E584 Offset: 0x1A7E584 VA: 0x1A7E584
	private void clearAnimFinised() { }

	// RVA: 0x1A7E008 Offset: 0x1A7E008 VA: 0x1A7E008
	public void FrameIn(string callFinished) { }

	// RVA: 0x1A7C1F0 Offset: 0x1A7C1F0 VA: 0x1A7C1F0
	public void FrameOut(string callFinished) { }

	// RVA: 0x1A7E598 Offset: 0x1A7E598 VA: 0x1A7E598
	private void BeginTweenAlphaAnim(GameObject gameObj, float from, float to, UITweener.Method tweenMethod) { }

	// RVA: 0x1A7C480 Offset: 0x1A7C480 VA: 0x1A7C480
	private void RefreshTerminal() { }

	// RVA: 0x1A6514C Offset: 0x1A6514C VA: 0x1A6514C
	public void MoveUp(int moveY) { }

	// RVA: 0x1A7D468 Offset: 0x1A7D468 VA: 0x1A7D468
	private bool SetSubGroupBattleIdIcon() { }

	// RVA: 0x1A7E668 Offset: 0x1A7E668 VA: 0x1A7E668
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventSideItemComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5858
{
	// Fields
	[SerializeField] // RVA: 0xCBD77C Offset: 0xCBD77C VA: 0xCBD77C
	private SideItemComponent clone; // 0x20
	[SerializeField] // RVA: 0xCBD78C Offset: 0xCBD78C VA: 0xCBD78C
	private SideItemComponent[] sideItems; // 0x28
	[SerializeField] // RVA: 0xCBD79C Offset: 0xCBD79C VA: 0xCBD79C
	private float margin; // 0x30
	private const int LAST_LABEL_WIDTH = 112;
	private static readonly Vector2 ADD_LAST_LABEL_POS; // 0x0
	private static readonly Vector2 LAST_LABEL_OUTLINE; // 0x8
	private static readonly string[] TIME_STATUS_SPRITE_NAMES; // 0x10
	[SerializeField] // RVA: 0xCBD7AC Offset: 0xCBD7AC VA: 0xCBD7AC
	private Vector2[] itemPositions; // 0x38
	[SerializeField] // RVA: 0xCBD7BC Offset: 0xCBD7BC VA: 0xCBD7BC
	private Vector2[] spritePositions; // 0x40
	[SerializeField] // RVA: 0xCBD7CC Offset: 0xCBD7CC VA: 0xCBD7CC
	private Vector2[] labelPositions; // 0x48
	[SerializeField] // RVA: 0xCBD7DC Offset: 0xCBD7DC VA: 0xCBD7DC
	private int[] labelFontSizes; // 0x50
	[SerializeField] // RVA: 0xCBD7EC Offset: 0xCBD7EC VA: 0xCBD7EC
	private Vector2[] labelOutlineSizes; // 0x58
	[SerializeField] // RVA: 0xCBD7FC Offset: 0xCBD7FC VA: 0xCBD7FC
	private Color[] labelOutlineColors; // 0x60
	[SerializeField] // RVA: 0xCBD80C Offset: 0xCBD80C VA: 0xCBD80C
	private UILabel.Effect[] labelOutlineStyles; // 0x68
	[SerializeField] // RVA: 0xCBD81C Offset: 0xCBD81C VA: 0xCBD81C
	private bool[] labelApplyGradients; // 0x70
	[SerializeField] // RVA: 0xCBD82C Offset: 0xCBD82C VA: 0xCBD82C
	private Color[] labelGradientTops; // 0x78
	[SerializeField] // RVA: 0xCBD83C Offset: 0xCBD83C VA: 0xCBD83C
	private Color[] labelGradientBottoms; // 0x80
	private static readonly string POINT_STATUS_STRING; // 0x18

	// Methods

	// RVA: 0x17CD748 Offset: 0x17CD748 VA: 0x17CD748
	public void .ctor() { }

	// RVA: 0x17CD758 Offset: 0x17CD758 VA: 0x17CD758 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x17CD760 Offset: 0x17CD760 VA: 0x17CD760 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x17CD764 Offset: 0x17CD764 VA: 0x17CD764 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x17CD76C Offset: 0x17CD76C VA: 0x17CD76C
	public void Setup(int eventId) { }

	// RVA: 0x17CE1AC Offset: 0x17CE1AC VA: 0x17CE1AC
	private void SetupTotalPointUI(int eventId) { }

	// RVA: 0x17CD83C Offset: 0x17CD83C VA: 0x17CD83C
	private void SetupBuffRateUI(int eventId, EventPointBuffEntity[] entitys) { }

	// RVA: 0x17CE540 Offset: 0x17CE540 VA: 0x17CE540
	private SideItemComponent CreateSideItem(string spriteName) { }

	// RVA: 0x17CE698 Offset: 0x17CE698 VA: 0x17CE698
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventSubmarineStatusComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5859
{
	// Fields
	private static readonly float ENTRY_ANIMATION_TIME; // 0x0
	private static readonly float PROGRESS_ANIMATION_TIME; // 0x4
	private static readonly float EXIT_ANIMATION_TIME; // 0x8
	private static readonly float GOAL_ANIMATION_TIME; // 0xC
	private static readonly float MAP_CHANGE_WAIT_TIME; // 0x10
	[SerializeField] // RVA: 0xCBD84C Offset: 0xCBD84C VA: 0xCBD84C
	private UISprite statusBg; // 0x20
	[SerializeField] // RVA: 0xCBD85C Offset: 0xCBD85C VA: 0xCBD85C
	private UISprite areaIcon; // 0x28
	[SerializeField] // RVA: 0xCBD86C Offset: 0xCBD86C VA: 0xCBD86C
	private UILabel titleLabel; // 0x30
	[SerializeField] // RVA: 0xCBD87C Offset: 0xCBD87C VA: 0xCBD87C
	private UISprite gaugeFrame; // 0x38
	[SerializeField] // RVA: 0xCBD88C Offset: 0xCBD88C VA: 0xCBD88C
	private UISprite gaugeBg; // 0x40
	[SerializeField] // RVA: 0xCBD89C Offset: 0xCBD89C VA: 0xCBD89C
	private UISprite gaugeBar; // 0x48
	[SerializeField] // RVA: 0xCBD8AC Offset: 0xCBD8AC VA: 0xCBD8AC
	private UISprite shipIcon; // 0x50
	[SerializeField] // RVA: 0xCBD8BC Offset: 0xCBD8BC VA: 0xCBD8BC
	private GameObject shipPanelObj; // 0x58
	[SerializeField] // RVA: 0xCBD8CC Offset: 0xCBD8CC VA: 0xCBD8CC
	private UISprite progressPointBg; // 0x60
	[SerializeField] // RVA: 0xCBD8DC Offset: 0xCBD8DC VA: 0xCBD8DC
	private UILabel progressNameLabel; // 0x68
	[SerializeField] // RVA: 0xCBD8EC Offset: 0xCBD8EC VA: 0xCBD8EC
	private UILabel progressPointLabel; // 0x70
	[SerializeField] // RVA: 0xCBD8FC Offset: 0xCBD8FC VA: 0xCBD8FC
	private UICounterLabel progressPointCounterLabel; // 0x78
	[SerializeField] // RVA: 0xCBD90C Offset: 0xCBD90C VA: 0xCBD90C
	private UISprite gateBg; // 0x80
	[SerializeField] // RVA: 0xCBD91C Offset: 0xCBD91C VA: 0xCBD91C
	private UISprite gateNextIcon; // 0x88
	[SerializeField] // RVA: 0xCBD92C Offset: 0xCBD92C VA: 0xCBD92C
	private UISprite gateGoalIcon; // 0x90
	[SerializeField] // RVA: 0xCBD93C Offset: 0xCBD93C VA: 0xCBD93C
	private UISprite gateNextPointBg; // 0x98
	[SerializeField] // RVA: 0xCBD94C Offset: 0xCBD94C VA: 0xCBD94C
	private UILabel gateNextPointLabel; // 0xA0
	[SerializeField] // RVA: 0xCBD95C Offset: 0xCBD95C VA: 0xCBD95C
	private UICounterLabel gateNextPointCounterLabel; // 0xA8
	private EventDetailEntity eventDetailEnt; // 0xB0
	private AssetData mapAssetData; // 0xB8
	private int minPoint; // 0xC0
	private int maxPoint; // 0xC4
	private int userOldPoint; // 0xC8
	private int userPoint; // 0xCC
	private Action onEndAnim; // 0xD0
	private string nextPointTextFormat; // 0xD8
	private int currentQuestId; // 0xE0
	private int oldQuestId; // 0xE4
	private int progreeQuestId; // 0xE8
	private GameObject goalAnimObject; // 0xF0
	private bool isCompleatedCount; // 0xF8
	private List<QuestReleaseEntity> baseQuestReleaseEntList; // 0x100
	private bool isGoalAnimToLoop; // 0x108
	private string animClipName; // 0x110
	[CompilerGeneratedAttribute] // RVA: 0xCBD96C Offset: 0xCBD96C VA: 0xCBD96C
	private static Comparison<QuestReleaseEntity> <>f__am$cache0; // 0x18

	// Properties
	private float GaugeWidth { get; }
	private Vector3 BasePosition { get; }

	// Methods

	// RVA: 0x17CE8D4 Offset: 0x17CE8D4 VA: 0x17CE8D4
	public void .ctor() { }

	// RVA: 0x17CE8DC Offset: 0x17CE8DC VA: 0x17CE8DC
	private float get_GaugeWidth() { }

	// RVA: 0x17CE914 Offset: 0x17CE914 VA: 0x17CE914
	private Vector3 get_BasePosition() { }

	// RVA: 0x17CE984 Offset: 0x17CE984 VA: 0x17CE984
	private void OnEnable() { }

	// RVA: 0x17CEAE4 Offset: 0x17CEAE4 VA: 0x17CEAE4
	public void Setup(EventDetailEntity eventDetailEntity, AssetData assetData) { }

	// RVA: 0x17CFF40 Offset: 0x17CFF40 VA: 0x17CFF40 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x17CFF48 Offset: 0x17CFF48 VA: 0x17CFF48 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x17CFF4C Offset: 0x17CFF4C VA: 0x17CFF4C Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x17CFB48 Offset: 0x17CFB48 VA: 0x17CFB48
	private void SetupAnimation() { }

	// RVA: 0x17D00B0 Offset: 0x17D00B0 VA: 0x17D00B0
	public void PlayAnimation(Action onEndAnim) { }

	// RVA: 0x17D0644 Offset: 0x17D0644 VA: 0x17D0644
	private void PlayExitAnimation() { }

	// RVA: 0x17D0C30 Offset: 0x17D0C30 VA: 0x17D0C30
	private void EndExitAnimation() { }

	// RVA: 0x17D0340 Offset: 0x17D0340 VA: 0x17D0340
	private void PlayEntryAnimation() { }

	// RVA: 0x17D0DD0 Offset: 0x17D0DD0 VA: 0x17D0DD0
	private void EndEntryAnimation() { }

	// RVA: 0x17D0850 Offset: 0x17D0850 VA: 0x17D0850
	private void PlayProgressAnimation() { }

	// RVA: 0x17D0DD4 Offset: 0x17D0DD4 VA: 0x17D0DD4
	public void EndProgressAnimation() { }

	// RVA: 0x17D10B0 Offset: 0x17D10B0 VA: 0x17D10B0
	private void EndAnimation() { }

	// RVA: 0x17CFAB8 Offset: 0x17CFAB8 VA: 0x17CFAB8
	private Vector3 ConvertoPointToPosition(int point) { }

	// RVA: 0x17D1518 Offset: 0x17D1518 VA: 0x17D1518
	private float ConvertPointToRate(int point) { }

	// RVA: 0x17CF8D4 Offset: 0x17CF8D4 VA: 0x17CF8D4
	private int GetUserEventPoint() { }

	// RVA: 0x17CF730 Offset: 0x17CF730 VA: 0x17CF730
	public void SetupOldData(out int oldPoint, out int oldQuestId, out int progreeQuestId) { }

	// RVA: 0x17CFF54 Offset: 0x17CFF54 VA: 0x17CFF54
	private GameObject CreateGoalAnimObject() { }

	// RVA: 0x17CEA0C Offset: 0x17CEA0C VA: 0x17CEA0C
	private void PlayGoalAnim(string animClipName) { }

	// RVA: 0x17D0CB8 Offset: 0x17D0CB8 VA: 0x17D0CB8
	private void DestroyGoalAnim() { }

	// RVA: 0x17D0FF0 Offset: 0x17D0FF0 VA: 0x17D0FF0
	private bool IsPlayingGoalAnim() { }

	// RVA: 0x17D145C Offset: 0x17D145C VA: 0x17D145C
	public static string CreateSaveData(int userPoint, int currentMapId, int progressMapId) { }

	// RVA: 0x17D1554 Offset: 0x17D1554 VA: 0x17D1554
	public static string CreateSaveData(string userPoint, string currentMapId, string progressMapId) { }

	// RVA: 0x17CF19C Offset: 0x17CF19C VA: 0x17CF19C
	public static List<QuestReleaseEntity> GetQuestReleaseList(int eventId) { }

	// RVA: 0x17CF45C Offset: 0x17CF45C VA: 0x17CF45C
	private QuestReleaseEntity GetProgressQuestReleaseEnt(List<QuestReleaseEntity> baseList) { }

	// RVA: 0x17CF5C4 Offset: 0x17CF5C4 VA: 0x17CF5C4
	private QuestReleaseEntity GetCurrentQuestReleaseEnt(List<QuestReleaseEntity> baseList) { }

	// RVA: 0x17CF9BC Offset: 0x17CF9BC VA: 0x17CF9BC
	private bool IsAllClear(QuestReleaseEntity currentQuestReleaseEnt, int nowPoint) { }

	// RVA: 0x17D16FC Offset: 0x17D16FC VA: 0x17D16FC
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A48 Offset: 0xD35A48 VA: 0xD35A48
	// RVA: 0x17D1784 Offset: 0x17D1784 VA: 0x17D1784
	private bool <SetupAnimation>m__0(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A58 Offset: 0xD35A58 VA: 0xD35A58
	// RVA: 0x17D17C8 Offset: 0x17D17C8 VA: 0x17D17C8
	private bool <SetupAnimation>m__1(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A68 Offset: 0xD35A68 VA: 0xD35A68
	// RVA: 0x17D180C Offset: 0x17D180C VA: 0x17D180C
	private bool <SetupAnimation>m__2(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A78 Offset: 0xD35A78 VA: 0xD35A78
	// RVA: 0x17D1850 Offset: 0x17D1850 VA: 0x17D1850
	private bool <PlayAnimation>m__3(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A88 Offset: 0xD35A88 VA: 0xD35A88
	// RVA: 0x17D1894 Offset: 0x17D1894 VA: 0x17D1894
	private bool <PlayAnimation>m__4(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35A98 Offset: 0xD35A98 VA: 0xD35A98
	// RVA: 0x17D18D8 Offset: 0x17D18D8 VA: 0x17D18D8
	private bool <PlayAnimation>m__5(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD35AA8 Offset: 0xD35AA8 VA: 0xD35AA8
	// RVA: 0x17D191C Offset: 0x17D191C VA: 0x17D191C
	private static int <GetQuestReleaseList>m__6(QuestReleaseEntity a, QuestReleaseEntity b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE1A0 Offset: 0xCAE1A0 VA: 0xCAE1A0
private sealed class TitleInfoEventSubmarineStatusComponent.<EndAnimation>c__AnonStorey0 // TypeDefIndex: 5860
{
	// Fields
	internal int tmpProgressQuestId; // 0x10
	internal TitleInfoEventSubmarineStatusComponent $this; // 0x18

	// Methods

	// RVA: 0x17D1454 Offset: 0x17D1454 VA: 0x17D1454
	public void .ctor() { }

	// RVA: 0x17D1970 Offset: 0x17D1970 VA: 0x17D1970
	internal bool <>m__0(QuestReleaseEntity n) { }

	// RVA: 0x17D19C8 Offset: 0x17D19C8 VA: 0x17D19C8
	internal bool <>m__1(QuestReleaseEntity n) { }
}

// Namespace: 
public class TitleInfoEventTimeImgListComponent : MonoBehaviour // TypeDefIndex: 5861
{
	// Fields
	private static readonly float TIME_STATUS_ICON_MOVE_TIME; // 0x0
	private static readonly int TIME_STATUS_STEP_MAX; // 0x4
	[SerializeField] // RVA: 0xCBD97C Offset: 0xCBD97C VA: 0xCBD97C
	private UIGrid grid; // 0x18
	[SerializeField] // RVA: 0xCBD98C Offset: 0xCBD98C VA: 0xCBD98C
	private TweenPosition tweenPosition; // 0x20
	[SerializeField] // RVA: 0xCBD99C Offset: 0xCBD99C VA: 0xCBD99C
	private GameObject iconPrefab; // 0x28
	private TitleInfoEventTimeImgListComponent.TimeState[] stateList; // 0x30
	private TitleInfoEventTimeImgListComponent.TimeState startState; // 0x38
	private TitleInfoEventTimeImgListComponent.TimeState endState; // 0x3C
	private int timeStep; // 0x40
	private int maxTimeStep; // 0x44

	// Properties
	public TitleInfoEventTimeImgListComponent.TimeState StartState { get; }
	public TitleInfoEventTimeImgListComponent.TimeState EndState { get; }

	// Methods

	// RVA: 0x17D1A0C Offset: 0x17D1A0C VA: 0x17D1A0C
	public void .ctor() { }

	// RVA: 0x17D1A14 Offset: 0x17D1A14 VA: 0x17D1A14
	public TitleInfoEventTimeImgListComponent.TimeState get_StartState() { }

	// RVA: 0x17D1A1C Offset: 0x17D1A1C VA: 0x17D1A1C
	public TitleInfoEventTimeImgListComponent.TimeState get_EndState() { }

	// RVA: 0x17D1A24 Offset: 0x17D1A24 VA: 0x17D1A24
	public void Init(TitleInfoEventTimeImgListComponent.TimeState start, TitleInfoEventTimeImgListComponent.TimeState end) { }

	// RVA: 0x17D1B48 Offset: 0x17D1B48 VA: 0x17D1B48
	private void CreateIconList() { }

	// RVA: 0x17D1BF4 Offset: 0x17D1BF4 VA: 0x17D1BF4
	private void CreateIcon(TitleInfoEventTimeImgListComponent.TimeState state, float y) { }

	// RVA: 0x17D1D60 Offset: 0x17D1D60 VA: 0x17D1D60
	public void SetupTimeAnime(Action changeDayCallback) { }

	// RVA: 0x17D1E30 Offset: 0x17D1E30 VA: 0x17D1E30
	public void AddTimeAnime(Action changeDayCallback) { }

	// RVA: 0x17D1DB4 Offset: 0x17D1DB4 VA: 0x17D1DB4
	private int GetStepCount(TitleInfoEventTimeImgListComponent.TimeState[] list, TitleInfoEventTimeImgListComponent.TimeState end) { }

	// RVA: 0x17D2040 Offset: 0x17D2040 VA: 0x17D2040
	private int GetChangeDayStep(TitleInfoEventTimeImgListComponent.TimeState[] list) { }

	// RVA: 0x17D1A50 Offset: 0x17D1A50 VA: 0x17D1A50
	private TitleInfoEventTimeImgListComponent.TimeState[] GetStateList(TitleInfoEventTimeImgListComponent.TimeState start) { }

	// RVA: 0x17D2104 Offset: 0x17D2104 VA: 0x17D2104
	private static void .cctor() { }
}

// Namespace: 
public enum TitleInfoEventTimeImgListComponent.TimeState // TypeDefIndex: 5862
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventTimeImgListComponent.TimeState DAY_TIME_FREE = 0;
	public const TitleInfoEventTimeImgListComponent.TimeState DAY_TIME_SCENARIO = 1;
	public const TitleInfoEventTimeImgListComponent.TimeState NIGHT_TIME_FREE = 2;
	public const TitleInfoEventTimeImgListComponent.TimeState NIGHT_TIME_SCENARIO = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE1B0 Offset: 0xCAE1B0 VA: 0xCAE1B0
private sealed class TitleInfoEventTimeImgListComponent.<AddTimeAnime>c__AnonStorey0 // TypeDefIndex: 5863
{
	// Fields
	internal Action changeDayCallback; // 0x10
	internal TitleInfoEventTimeImgListComponent $this; // 0x18

	// Methods

	// RVA: 0x17D2038 Offset: 0x17D2038 VA: 0x17D2038
	public void .ctor() { }

	// RVA: 0x17D2168 Offset: 0x17D2168 VA: 0x17D2168
	internal void <>m__0() { }
}

// Namespace: 
public class TitleInfoEventTimeImgListViewDraw : MonoBehaviour // TypeDefIndex: 5864
{
	// Fields
	[SerializeField] // RVA: 0xCBD9AC Offset: 0xCBD9AC VA: 0xCBD9AC
	private UISprite timeIcon; // 0x18
	[SerializeField] // RVA: 0xCBD9BC Offset: 0xCBD9BC VA: 0xCBD9BC
	private UISprite stateSprite; // 0x20

	// Methods

	// RVA: 0x17D2198 Offset: 0x17D2198 VA: 0x17D2198
	public void .ctor() { }

	// RVA: 0x17D21A0 Offset: 0x17D21A0 VA: 0x17D21A0
	public void SetItem(TitleInfoEventTimeImgListComponent.TimeState state) { }

	// RVA: 0x17D2290 Offset: 0x17D2290 VA: 0x17D2290
