
	// RVA: 0x14C03F8 Offset: 0x14C03F8 VA: 0x14C03F8
	public void endAnim() { }

	// RVA: 0x14C03E8 Offset: 0x14C03E8 VA: 0x14C03E8
	private double ConvertPointToRate(long point, long maxPoint) { }
}

// Namespace: 
public enum TitleInfoEventLeagueVsGaugeFlashEffect.GaugeType // TypeDefIndex: 5842
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventLeagueVsGaugeFlashEffect.GaugeType BLUE = 0;
	public const TitleInfoEventLeagueVsGaugeFlashEffect.GaugeType RED = 1;
}

// Namespace: 
public class TitleInfoEventLeagueVsStatusComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5843
{
	// Fields
	private static readonly Vector3 FRAME_ANIM_OUT_POS_DELTA; // 0x0
	private static readonly float FRAME_ANIM_DURATION; // 0xC
	private static readonly float ENTRY_ANIM_DELAY; // 0x10
	[SerializeField] // RVA: 0xC514A4 Offset: 0xC514A4 VA: 0xC514A4
	private UIWidget Root; // 0x20
	[SerializeField] // RVA: 0xC514B4 Offset: 0xC514B4 VA: 0xC514B4
	private UISprite title; // 0x28
	[SerializeField] // RVA: 0xC514C4 Offset: 0xC514C4 VA: 0xC514C4
	private UISprite backGround; // 0x30
	[SerializeField] // RVA: 0xC514D4 Offset: 0xC514D4 VA: 0xC514D4
	private UISprite statusName; // 0x38
	private Vector3 inPos; // 0x40
	private Vector3 outPos; // 0x4C
	private Action clearAnimCallBack; // 0x58

	// Methods

	// RVA: 0x14C0414 Offset: 0x14C0414 VA: 0x14C0414
	public void .ctor() { }

	// RVA: 0x14C041C Offset: 0x14C041C VA: 0x14C041C Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14C0424 Offset: 0x14C0424 VA: 0x14C0424
	public void OnDestroy() { }

	// RVA: 0x14C0428 Offset: 0x14C0428 VA: 0x14C0428
	private void Destroy() { }

	// RVA: 0x14C042C Offset: 0x14C042C VA: 0x14C042C Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14C0430 Offset: 0x14C0430 VA: 0x14C0430 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14C0438 Offset: 0x14C0438 VA: 0x14C0438
	public void setup(EventPointEntity eventPointEntity, int eventId) { }

	// RVA: 0x14C0E60 Offset: 0x14C0E60 VA: 0x14C0E60
	private double ConvertPointToRate(long point, long maxPoint) { }

	// RVA: 0x14C0E70 Offset: 0x14C0E70 VA: 0x14C0E70
	public void SetEntryAnim() { }

	// RVA: 0x14C1038 Offset: 0x14C1038 VA: 0x14C1038
	private void EntryAnim() { }

	// RVA: 0x14C1208 Offset: 0x14C1208 VA: 0x14C1208
	public void SetClearAnim() { }

	// RVA: 0x14C1240 Offset: 0x14C1240 VA: 0x14C1240
	public void StartClearAnim(Action cb) { }

	// RVA: 0x14C1558 Offset: 0x14C1558 VA: 0x14C1558
	private void AnimFrameOutEnd() { }

	// RVA: 0x14C15B4 Offset: 0x14C15B4 VA: 0x14C15B4
	private void clearAnimFinised() { }

	// RVA: 0x14C1040 Offset: 0x14C1040 VA: 0x14C1040
	public void FrameIn(string callFinished) { }

	// RVA: 0x14C1390 Offset: 0x14C1390 VA: 0x14C1390
	public void FrameOut(string callFinished) { }

	// RVA: 0x14C15C8 Offset: 0x14C15C8 VA: 0x14C15C8
	public void FadeOut() { }

	// RVA: 0x14C16AC Offset: 0x14C16AC VA: 0x14C16AC
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventOpenHeaderEffect : CommonEffectComponent // TypeDefIndex: 5844
{
	// Fields
	private Action changeUiCallback; // 0xA8
	private Action animEndCallback; // 0xB0

	// Methods

	// RVA: 0x14C1750 Offset: 0x14C1750 VA: 0x14C1750
	public void .ctor() { }

	// RVA: 0x14C1758 Offset: 0x14C1758 VA: 0x14C1758
	public void setup(int eventId, Action changeUiCallback, Action endCallback) { }

	// RVA: 0x14C1820 Offset: 0x14C1820 VA: 0x14C1820
	public void changeUIFunc() { }

	// RVA: 0x14C1834 Offset: 0x14C1834 VA: 0x14C1834
	public void animEndFunc() { }
}

// Namespace: 
public class TitleInfoEventRaceRankComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5845
{
	// Fields
	private static readonly Vector3 RAIDBOSS_ANIM_ROOT_POS; // 0x0
	private static readonly float ANIM_DURATION_FRAME_IN; // 0xC
	private static readonly long DISP_RACE_SEC_TIME; // 0x10
	[SerializeField] // RVA: 0xC514E4 Offset: 0xC514E4 VA: 0xC514E4
	private UISprite[] rankSpr; // 0x20
	[SerializeField] // RVA: 0xC514F4 Offset: 0xC514F4 VA: 0xC514F4
	private UISprite[] carIcon; // 0x28
	[SerializeField] // RVA: 0xC51504 Offset: 0xC51504 VA: 0xC51504
	private UISprite[] carBackSpr; // 0x30
	[SerializeField] // RVA: 0xC51514 Offset: 0xC51514 VA: 0xC51514
	private UISprite[] goalIcon; // 0x38
	[SerializeField] // RVA: 0xC51524 Offset: 0xC51524 VA: 0xC51524
	private Vector3 startPos; // 0x40
	[SerializeField] // RVA: 0xC51534 Offset: 0xC51534 VA: 0xC51534
	private Vector3 goalPos; // 0x4C
	private Vector3 originPos; // 0x58
	private long endTime; // 0x68
	private Action frameInCallBack; // 0x70

	// Methods

	// RVA: 0x14C1848 Offset: 0x14C1848 VA: 0x14C1848
	public void .ctor() { }

	// RVA: 0x14C1850 Offset: 0x14C1850 VA: 0x14C1850 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14C1858 Offset: 0x14C1858 VA: 0x14C1858
	public void OnDestroy() { }

	// RVA: 0x14C185C Offset: 0x14C185C VA: 0x14C185C
	private void Destroy() { }

	// RVA: 0x14C1860 Offset: 0x14C1860 VA: 0x14C1860 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14C1864 Offset: 0x14C1864 VA: 0x14C1864 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14C186C Offset: 0x14C186C VA: 0x14C186C
	public void Setup(int eventId, int termId) { }

	// RVA: 0x14C267C Offset: 0x14C267C VA: 0x14C267C
	public void FrameIn(Action callback) { }

	// RVA: 0x14C2850 Offset: 0x14C2850 VA: 0x14C2850
	private void FrameInFinish() { }

	// RVA: 0x14C286C Offset: 0x14C286C VA: 0x14C286C
	public void FrameOut() { }

	// RVA: 0x14C29CC Offset: 0x14C29CC VA: 0x14C29CC
	private void FrameOutFinish() { }

	// RVA: 0x14C29D0 Offset: 0x14C29D0 VA: 0x14C29D0
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventRaceRoundComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5846
{
	// Fields
	[SerializeField] // RVA: 0xC51544 Offset: 0xC51544 VA: 0xC51544
	private UISprite baseWindow; // 0x20
	[SerializeField] // RVA: 0xC51554 Offset: 0xC51554 VA: 0xC51554
	private UISprite mapNameSpr; // 0x28
	[SerializeField] // RVA: 0xC51564 Offset: 0xC51564 VA: 0xC51564
	private UISprite roundNumSpr; // 0x30
	[SerializeField] // RVA: 0xC51574 Offset: 0xC51574 VA: 0xC51574
	private GameObject effectAttachRoot; // 0x38
	private int nowHeaderId; // 0x40
	private AssetData effectAssetData; // 0x48

	// Methods

	// RVA: 0x14C2A78 Offset: 0x14C2A78 VA: 0x14C2A78
	public void .ctor() { }

	// RVA: 0x14C2A88 Offset: 0x14C2A88 VA: 0x14C2A88 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14C2A90 Offset: 0x14C2A90 VA: 0x14C2A90
	public void OnDestroy() { }

	// RVA: 0x14C2A94 Offset: 0x14C2A94 VA: 0x14C2A94
	private void Destroy() { }

	// RVA: 0x14C2A98 Offset: 0x14C2A98 VA: 0x14C2A98 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14C2A9C Offset: 0x14C2A9C VA: 0x14C2A9C Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14C2AA4 Offset: 0x14C2AA4 VA: 0x14C2AA4
	public void Setup(int eventId, int warId, int mapId, int termId, AssetData effectAssetData) { }

	// RVA: 0x14C2E28 Offset: 0x14C2E28 VA: 0x14C2E28
	public void setHeaderImg(int headerId) { }

	// RVA: 0x14B5174 Offset: 0x14B5174 VA: 0x14B5174
	public void setupNameChangeEffect(int event_id, Action endCallback) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8364 Offset: 0xCC8364 VA: 0xCC8364
	// RVA: 0x14C2F08 Offset: 0x14C2F08 VA: 0x14C2F08
	private void <setupNameChangeEffect>m__0() { }
}

// Namespace: 
public class TitleInfoEventRaidBossComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5847
{
	// Fields
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX; // 0x0
	private static readonly string RAIDBOSS_ICON_LASTBATTLE_SPNAME_PREFIX; // 0x8
	private static readonly string RAIDBOSS_CLEAR_EFFECT_PREFAB; // 0x10
	private static readonly Vector3 RAIDBOSS_ANIM_ROOT_POS; // 0x18
	private static readonly float REST_TIME_UPDATE_INTERVAL_SEC; // 0x24
	private static readonly int RAIDBOSS_DEFEAT_COUNT_POS_X; // 0x28
	private static readonly float ANIM_DURATION_FRAME_IN_BOSS; // 0x2C
	private static readonly float ANIM_DURATION_HP_CUT; // 0x30
	private static readonly float ANIM_DURATION_SPLIT_ALPHA; // 0x34
	private static readonly float CLEAR_CALLBACK_DELAY; // 0x38
	private static readonly float CLEAR_END_CALLBACK_DELAY; // 0x3C
	private static readonly float CLEAR_END_CALLBACK_DELAY_JUMBLE_RAID; // 0x40
	private static readonly float CLEAR_END_CALLBACK_DELAY_NORMAL; // 0x44
	[SerializeField] // RVA: 0xC51584 Offset: 0xC51584 VA: 0xC51584
	private GameObject hpBarParent; // 0x20
	[SerializeField] // RVA: 0xC51594 Offset: 0xC51594 VA: 0xC51594
	private GameObject defeatCntBarParent; // 0x28
	[SerializeField] // RVA: 0xC515A4 Offset: 0xC515A4 VA: 0xC515A4
	private UISprite raidBossIconSp; // 0x30
	[SerializeField] // RVA: 0xC515B4 Offset: 0xC515B4 VA: 0xC515B4
	private UISprite hpFrame; // 0x38
	[SerializeField] // RVA: 0xC515C4 Offset: 0xC515C4 VA: 0xC515C4
	private UISprite hpBg; // 0x40
	[SerializeField] // RVA: 0xC515D4 Offset: 0xC515D4 VA: 0xC515D4
	private UISprite hpBar; // 0x48
	[SerializeField] // RVA: 0xC515E4 Offset: 0xC515E4 VA: 0xC515E4
	private UISlider hpBarSlider; // 0x50
	[SerializeField] // RVA: 0xC515F4 Offset: 0xC515F4 VA: 0xC515F4
	private UILabel totalHpLabel; // 0x58
	[SerializeField] // RVA: 0xC51604 Offset: 0xC51604 VA: 0xC51604
	private UILabel restTimeLabel; // 0x60
	[SerializeField] // RVA: 0xC51614 Offset: 0xC51614 VA: 0xC51614
	private UISprite defeatCntFrame; // 0x68
	[SerializeField] // RVA: 0xC51624 Offset: 0xC51624 VA: 0xC51624
	private UISprite defeatCntBg; // 0x70
	[SerializeField] // RVA: 0xC51634 Offset: 0xC51634 VA: 0xC51634
	private UISprite defeatCntBar; // 0x78
	[SerializeField] // RVA: 0xC51644 Offset: 0xC51644 VA: 0xC51644
	private UISlider defeatCntBarSlider; // 0x80
	[SerializeField] // RVA: 0xC51654 Offset: 0xC51654 VA: 0xC51654
	private UILabel totalDefeatCntLabel; // 0x88
	[SerializeField] // RVA: 0xC51664 Offset: 0xC51664 VA: 0xC51664
	private UISlider defeatCntBarSliderWhite; // 0x90
	[SerializeField] // RVA: 0xC51674 Offset: 0xC51674 VA: 0xC51674
	private UISprite defeatCntBarSliderWhiteSp; // 0x98
	[SerializeField] // RVA: 0xC51684 Offset: 0xC51684 VA: 0xC51684
	private GameObject defeatCntBarSplitter; // 0xA0
	[SerializeField] // RVA: 0xC51694 Offset: 0xC51694 VA: 0xC51694
	private UISprite defeatCntBarSplitterSp; // 0xA8
	[SerializeField] // RVA: 0xC516A4 Offset: 0xC516A4 VA: 0xC516A4
	private UILabel modeName; // 0xB0
	[SerializeField] // RVA: 0xC516B4 Offset: 0xC516B4 VA: 0xC516B4
	private UISprite lastBattleSpr; // 0xB8
	[SerializeField] // RVA: 0xC516C4 Offset: 0xC516C4 VA: 0xC516C4
	private UILabel bossName; // 0xC0
	[SerializeField] // RVA: 0xC516D4 Offset: 0xC516D4 VA: 0xC516D4
	private float overwritePosX; // 0xC8
	private float barSizeX; // 0xCC
	private UISlider useBarSlider; // 0xD0
	private UILabel useTotalLabel; // 0xD8
	private int eventId; // 0xE0
	private EventRaidEntity eventRaidEntity; // 0xE8
	private UserEventRaidEntity userEventRaidEntity; // 0xF0
	private EventBossStatusUiEntity eventBossStatusUiEntity; // 0xF8
	private float restTimeUpdateSec; // 0x100
	private bool isEncountRaidBoss; // 0x104
	private bool isCheckTutorial; // 0x105
	private bool isRaidDefeatCount; // 0x106
	private bool isJumbleRaid; // 0x107
	private bool isSingleRaid; // 0x108
	private bool isTimeLimitRaid; // 0x109
	private bool isLastBattleRelease; // 0x10A
	private UISprite[] hpBarSplitters; // 0x110
	private bool isRaidClear; // 0x118
	private bool isDefeatRaidDisp; // 0x119
	private int warId; // 0x11C
	private float HPfrom; // 0x120
	private float HPto; // 0x124
	private float HPsplitPoint; // 0x128
	private int HPsplitNo; // 0x12C
	private Vector3 originPos; // 0x130
	private Action animEndCall; // 0x140
	private Action onClearCall; // 0x148
	private GameObject splitHpEffect; // 0x150
	private GameObject clearBossEffect; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xC516E4 Offset: 0xC516E4 VA: 0xC516E4
	private static Action <>f__am$cache0; // 0x48

	// Methods

	// RVA: 0x14C2F10 Offset: 0x14C2F10 VA: 0x14C2F10
	public void .ctor() { }

	// RVA: 0x14C2F18 Offset: 0x14C2F18 VA: 0x14C2F18
	public void DisableCheckTutorial() { }

	// RVA: 0x14C2F20 Offset: 0x14C2F20 VA: 0x14C2F20 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14C2F3C Offset: 0x14C2F3C VA: 0x14C2F3C
	private void Update() { }

	// RVA: 0x14B14D0 Offset: 0x14B14D0 VA: 0x14B14D0
	public void Setup(UIAtlas terminalAtlas, int eventId, int warId, int day = -1, bool isJumbleRaid = False, bool isSingleRaid = False) { }

	// RVA: 0x14C3D2C Offset: 0x14C3D2C VA: 0x14C3D2C
	public void OnDestroy() { }

	// RVA: 0x14C319C Offset: 0x14C319C VA: 0x14C319C
	private void Destroy() { }

	// RVA: 0x14C3D30 Offset: 0x14C3D30 VA: 0x14C3D30 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14C3D34 Offset: 0x14C3D34 VA: 0x14C3D34 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14C3D3C Offset: 0x14C3D3C VA: 0x14C3D3C
	private void SetBossIcon(EventRaidEntity eventRaidEnt, bool isLastBattle) { }

	// RVA: 0x14C3384 Offset: 0x14C3384 VA: 0x14C3384
	private void SetSpriteFromEventUI(UISprite sprite, string prefix, int gaugeId) { }

	// RVA: 0x14C31A0 Offset: 0x14C31A0 VA: 0x14C31A0
	private void SetLastBattleIcon(UISprite sprite, string prefix, int eventId, int iconId) { }

	// RVA: 0x14C34A0 Offset: 0x14C34A0 VA: 0x14C34A0
	public void SetDisp() { }

	// RVA: 0x14C4810 Offset: 0x14C4810 VA: 0x14C4810
	private long GetRaidBossMaxHP() { }

	// RVA: 0x14C40A0 Offset: 0x14C40A0 VA: 0x14C40A0
	private long GetRaidBossTotalDamage() { }

	// RVA: 0x14C4828 Offset: 0x14C4828 VA: 0x14C4828
	public bool IsAliveRaidBoss() { }

	// RVA: 0x14C4864 Offset: 0x14C4864 VA: 0x14C4864
	public bool IsJumbleSingleRaidLastBattle() { }

	// RVA: 0x14C3F44 Offset: 0x14C3F44 VA: 0x14C3F44
	private void SetHpBarSplitters(bool isFlag) { }

	// RVA: 0x14C2F44 Offset: 0x14C2F44 VA: 0x14C2F44
	private void UpdateRestTime(bool isForce = False) { }

	// RVA: 0x14B0C68 Offset: 0x14B0C68 VA: 0x14B0C68
	public bool IsTargetRaid(int eventId, int day) { }

	// RVA: 0x14C48B4 Offset: 0x14C48B4 VA: 0x14C48B4
	public void SetDamageAnimation(Action onClearCallback) { }

	// RVA: 0x14C4D50 Offset: 0x14C4D50 VA: 0x14C4D50
	public void setBeforeMovePos() { }

	// RVA: 0x14C4E8C Offset: 0x14C4E8C VA: 0x14C4E8C
	public void StartDamageAnimation(AssetData mapAssetData, Action callBack) { }

	// RVA: 0x14C5168 Offset: 0x14C5168 VA: 0x14C5168
	private void PlayFrameInBoss() { }

	// RVA: 0x14C5398 Offset: 0x14C5398 VA: 0x14C5398
	private void PlayHpNameAlpha() { }

	// RVA: 0x14C539C Offset: 0x14C539C VA: 0x14C539C
	private void PlayHpCut() { }

	// RVA: 0x14C5510 Offset: 0x14C5510 VA: 0x14C5510
	private void PlayHpDeletion() { }

	// RVA: 0x14C58B8 Offset: 0x14C58B8 VA: 0x14C58B8
	private bool IsPlayClearAnimation(int raidDeadQuestId, bool isJumbleSingleRaid) { }

	// RVA: 0x14C5A24 Offset: 0x14C5A24 VA: 0x14C5A24
	private void SetClearAlpha() { }

	// RVA: 0x14C5F24 Offset: 0x14C5F24 VA: 0x14C5F24
	private void DoClearCallback() { }

	// RVA: 0x14C6058 Offset: 0x14C6058 VA: 0x14C6058
	private void OnStartFadeOutAnimation() { }

	// RVA: 0x14C5C4C Offset: 0x14C5C4C VA: 0x14C5C4C
	private void OnEndAnimation() { }

	// RVA: 0x14AD9BC Offset: 0x14AD9BC VA: 0x14AD9BC
	public bool IsClear() { }

	// RVA: 0x14C41D0 Offset: 0x14C41D0 VA: 0x14C41D0
	private string GetAiModeName(long totalDamage) { }

	// RVA: 0x14C4764 Offset: 0x14C4764 VA: 0x14C4764
	private float ConvertHpToRate(long hp, long maxHp) { }

	// RVA: 0x14C4084 Offset: 0x14C4084 VA: 0x14C4084
	private float GetHpSplitPositionX(long splitHp, long maxHp) { }

	// RVA: 0x14C43E0 Offset: 0x14C43E0 VA: 0x14C43E0
	private string GetRestCountText(long totalHp, long totalDamage) { }

	// RVA: 0x14C4350 Offset: 0x14C4350 VA: 0x14C4350
	private void SetOutlineBattleColor(UILabel label, Color defaultColor) { }

	// RVA: 0x14C4780 Offset: 0x14C4780 VA: 0x14C4780
	private void SetOutlineLastColor(UILabel label, Color defaultColor) { }

	// RVA: 0x14C4EB8 Offset: 0x14C4EB8 VA: 0x14C4EB8
	private GameObject GetClearBossEffect(AssetData mapAssetData) { }

	// RVA: 0x14C5C7C Offset: 0x14C5C7C VA: 0x14C5C7C
	private AnimationClip GetClearBossAnimClip(Animation animation) { }

	// RVA: 0x14C61F8 Offset: 0x14C61F8 VA: 0x14C61F8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8374 Offset: 0xCC8374 VA: 0xCC8374
	// RVA: 0x14C632C Offset: 0x14C632C VA: 0x14C632C
	private static void <PlayHpCut>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC420A4 Offset: 0xC420A4 VA: 0xC420A4
private sealed class TitleInfoEventRaidBossComponent.<GetAiModeName>c__AnonStorey0 // TypeDefIndex: 5848
{
	// Fields
	internal long totalDamage; // 0x10

	// Methods

	// RVA: 0x14C61F0 Offset: 0x14C61F0 VA: 0x14C61F0
	public void .ctor() { }

	// RVA: 0x14C6330 Offset: 0x14C6330 VA: 0x14C6330
	internal bool <>m__0(long hp) { }
}

// Namespace: 
public class TitleInfoEventRaidBossOldComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5849
{
	// Fields
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX; // 0x0
	[SerializeField] // RVA: 0xC516F4 Offset: 0xC516F4 VA: 0xC516F4
	private TitleInfoEventRaidDayComponent titleInfoEventRaidDayPrefab; // 0x20
	[SerializeField] // RVA: 0xC51704 Offset: 0xC51704 VA: 0xC51704
	private TitleInfoEventRaidHpComponent titleInfoEventRaidHpPrefab; // 0x28
	[SerializeField] // RVA: 0xC51714 Offset: 0xC51714 VA: 0xC51714
	private GameObject[] titleInfoEventRaidDayObjs; // 0x30
	[SerializeField] // RVA: 0xC51724 Offset: 0xC51724 VA: 0xC51724
	private GameObject leftPos; // 0x38
	[SerializeField] // RVA: 0xC51734 Offset: 0xC51734 VA: 0xC51734
	private UISprite raidBossIconSp; // 0x40
	[SerializeField] // RVA: 0xC51744 Offset: 0xC51744 VA: 0xC51744
	private GameObject oneDayHpObj; // 0x48
	[SerializeField] // RVA: 0xC51754 Offset: 0xC51754 VA: 0xC51754
	private UISlider hpBarSlider; // 0x50
	[SerializeField] // RVA: 0xC51764 Offset: 0xC51764 VA: 0xC51764
	private GameObject dayFrameObj; // 0x58
	[SerializeField] // RVA: 0xC51774 Offset: 0xC51774 VA: 0xC51774
	private UILabel totalHpLabel; // 0x60
	private TitleInfoEventRaidDayComponent[] raidDayComponents; // 0x68
	private TitleInfoEventRaidHpComponent[] raidHpComponents; // 0x70
	private int eventId; // 0x78

	// Methods

	// RVA: 0x14C6340 Offset: 0x14C6340 VA: 0x14C6340
	public void .ctor() { }

	// RVA: 0x14C6348 Offset: 0x14C6348 VA: 0x14C6348 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14C6350 Offset: 0x14C6350 VA: 0x14C6350
	public void Setup(int eventId) { }

	// RVA: 0x14C69C8 Offset: 0x14C69C8 VA: 0x14C69C8
	public void OnDestroy() { }

	// RVA: 0x14C67A0 Offset: 0x14C67A0 VA: 0x14C67A0
	private void Destroy() { }

	// RVA: 0x14C69CC Offset: 0x14C69CC VA: 0x14C69CC Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14C797C Offset: 0x14C797C VA: 0x14C797C Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14C7984 Offset: 0x14C7984 VA: 0x14C7984
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventRaidDayComponent : MonoBehaviour // TypeDefIndex: 5850
{
	// Fields
	private static readonly int DEPTH_FRONT; // 0x0
	private static readonly int DEPTH_BACK; // 0x4
	private static readonly string NUM_SPNAME_PREFIX; // 0x8
	[SerializeField] // RVA: 0xC51784 Offset: 0xC51784 VA: 0xC51784
	private UISprite dayNumSp; // 0x18
	[SerializeField] // RVA: 0xC51794 Offset: 0xC51794 VA: 0xC51794
	private UISprite dayStrSp; // 0x20
	[SerializeField] // RVA: 0xC517A4 Offset: 0xC517A4 VA: 0xC517A4
	private UISprite dayLastSp; // 0x28

	// Methods

	// RVA: 0x14C79E0 Offset: 0x14C79E0 VA: 0x14C79E0
	public void .ctor() { }

	// RVA: 0x14C7474 Offset: 0x14C7474 VA: 0x14C7474
	public void Setup(int eventId, int dispDayNum, TitleInfoEventRaidDayComponent.DayType dispDayType) { }

	// RVA: 0x14C79E8 Offset: 0x14C79E8 VA: 0x14C79E8
	private void SetDepth(int depth) { }

	// RVA: 0x14C7A6C Offset: 0x14C7A6C VA: 0x14C7A6C
	private static void .cctor() { }
}

// Namespace: 
public enum TitleInfoEventRaidDayComponent.DayType // TypeDefIndex: 5851
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventRaidDayComponent.DayType YESTERDAY = 0;
	public const TitleInfoEventRaidDayComponent.DayType TODAY = 1;
	public const TitleInfoEventRaidDayComponent.DayType TOMORROW = 2;
}

// Namespace: 
public class TitleInfoEventRaidHpComponent : MonoBehaviour // TypeDefIndex: 5852
{
	// Fields
	public static readonly float WIDTH; // 0x0
	private static readonly string RESULT_OK_SPNAME; // 0x8
	private static readonly string RESULT_NG_SPNAME; // 0x10
	[SerializeField] // RVA: 0xC517B4 Offset: 0xC517B4 VA: 0xC517B4
	private UISprite resultSp; // 0x18

	// Methods

	// RVA: 0x14C7AE8 Offset: 0x14C7AE8 VA: 0x14C7AE8
	public void .ctor() { }

	// RVA: 0x14C7804 Offset: 0x14C7804 VA: 0x14C7804
	public void Setup(TitleInfoEventRaidHpComponent.HpType dispHpType) { }

	// RVA: 0x14C7AF0 Offset: 0x14C7AF0 VA: 0x14C7AF0
	private static void .cctor() { }
}

// Namespace: 
public enum TitleInfoEventRaidHpComponent.HpType // TypeDefIndex: 5853
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventRaidHpComponent.HpType UNKNOWN = 0;
	public const TitleInfoEventRaidHpComponent.HpType RESULT_OK = 1;
	public const TitleInfoEventRaidHpComponent.HpType RESULT_NG = 2;
}

// Namespace: 
public class TitleInfoEventRaidStatusComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5854
{
	// Fields
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_BATTLE; // 0x0
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_WIN; // 0x8
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_LOSE; // 0x10
	private static readonly string RAIDBOSS_ICON_SPNAME_PREFIX_LAST; // 0x18
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_FRONT; // 0x20
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_BACK; // 0x28
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_PARTITION; // 0x30
	private static readonly string RAIDBOSS_ICON_SPNAME_SUB_GROUP_BATTLE_ID; // 0x38
	private static readonly string RAIDBOSS_ICON_SPNAME_STATUS_01; // 0x40
	private static readonly string RAIDBOSS_ICON_SPNAME_STATUS_02; // 0x48
	private static readonly Vector3 FRAME_ANIM_OUT_POS_DELTA; // 0x50
	private static readonly Vector3 FRAME_ANIM_OUT_POS_JUMBLE; // 0x5C
	private static readonly float FRAME_ANIM_DURATION; // 0x68
	private static readonly float ENTRY_ANIM_DELAY; // 0x6C
	private static readonly Color ICON_MASK_COLOR; // 0x70
	private static readonly int JUMBLE_TERMINAL_REFRESH_TIME_OFFSET; // 0x80
	private static readonly int RAIDBOSS_SUB_GROUP_PARTITION_INDEX; // 0x84
	private static readonly int TITLE_LABEL_BASE_WIDTH; // 0x88
	private static readonly Color RAIDBOSS_OUTLINE_COLOR_BATTLE; // 0x8C
	private static readonly Color RAIDBOSS_OUTLINE_COLOR_WIN; // 0x9C
	private static readonly Color RAIDBOSS_OUTLINE_COLOR_LAST; // 0xAC
	[SerializeField] // RVA: 0xC517C4 Offset: 0xC517C4 VA: 0xC517C4
	private UISprite raidBossIconSp; // 0x20
	[SerializeField] // RVA: 0xC517D4 Offset: 0xC517D4 VA: 0xC517D4
	private UILabel raidBossHp; // 0x28
	[SerializeField] // RVA: 0xC517E4 Offset: 0xC517E4 VA: 0xC517E4
	private UILabel raidBossName; // 0x30
	[SerializeField] // RVA: 0xC517F4 Offset: 0xC517F4 VA: 0xC517F4
	private UILabel raidBossHpHead; // 0x38
	[SerializeField] // RVA: 0xC51804 Offset: 0xC51804 VA: 0xC51804
	private UILabel raidBossStatus; // 0x40
	[SerializeField] // RVA: 0xC51814 Offset: 0xC51814 VA: 0xC51814
	private UISprite raidBattle; // 0x48
	[SerializeField] // RVA: 0xC51824 Offset: 0xC51824 VA: 0xC51824
	private UISprite subGroupBattleId; // 0x50
	[SerializeField] // RVA: 0xC51834 Offset: 0xC51834 VA: 0xC51834
	private int subGroupCount; // 0x58
	[SerializeField] // RVA: 0xC51844 Offset: 0xC51844 VA: 0xC51844
	private UIGrid subGroupGrid; // 0x60
	[SerializeField] // RVA: 0xC51854 Offset: 0xC51854 VA: 0xC51854
	private UISprite subGroupBase; // 0x68
	[SerializeField] // RVA: 0xC51864 Offset: 0xC51864 VA: 0xC51864
	private UISprite subGroup; // 0x70
	[SerializeField] // RVA: 0xC51874 Offset: 0xC51874 VA: 0xC51874
	private UISprite subGroupPartition; // 0x78
	private EventRaidEntity eventRaidEntity; // 0x80
	private EventBossStatusUiEntity eventBossStatusUiEntity; // 0x88
	private int currentDay; // 0x90
	private Vector3 inPos; // 0x94
	private Vector3 outPos; // 0xA0
	private bool isRaidDefeatCount; // 0xAC
	private bool isJumbleRaid; // 0xAD
	private bool isReprintLastWarRaid; // 0xAE
	private Action clickCallBack; // 0xB0
	private Action clearAnimCallBack; // 0xB8
	private int warId; // 0xC0
	private long targetTime; // 0xC8
	private int lastMinute; // 0xD0

	// Methods

	// RVA: 0x14C7B70 Offset: 0x14C7B70 VA: 0x14C7B70
	public void .ctor() { }

	// RVA: 0x14C7B80 Offset: 0x14C7B80 VA: 0x14C7B80 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14C7B88 Offset: 0x14C7B88 VA: 0x14C7B88
	public void Setup(EventRaidEntity eventRaidEntity, int warId, int currentDay, bool isJumbleRaid = False, bool isReprintLastWarRaid = False) { }

	// RVA: 0x14C8224 Offset: 0x14C8224 VA: 0x14C8224
	public void OnDestroy() { }

	// RVA: 0x14C8104 Offset: 0x14C8104 VA: 0x14C8104
	private void Destroy() { }

	// RVA: 0x14C8228 Offset: 0x14C8228 VA: 0x14C8228
	protected void Update() { }

	// RVA: 0x14C822C Offset: 0x14C822C VA: 0x14C822C
	private void RefreshTimeStr() { }

	// RVA: 0x14C888C Offset: 0x14C888C VA: 0x14C888C
	private void SetBossIcon(string spName) { }

	// RVA: 0x14C8108 Offset: 0x14C8108 VA: 0x14C8108
	private void SetEventIcon(UISprite sprite, string prefix, int iconId) { }

	// RVA: 0x14C897C Offset: 0x14C897C VA: 0x14C897C Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14C9980 Offset: 0x14C9980 VA: 0x14C9980
	private string GetRestCountText(long totalHp, long totalDamage) { }

	// RVA: 0x14B12D4 Offset: 0x14B12D4 VA: 0x14B12D4
	public float GetCellHeight() { }

	// RVA: 0x14C9B84 Offset: 0x14C9B84 VA: 0x14C9B84
	private void SetOutlineColor(UILabel label) { }

	// RVA: 0x14C9C18 Offset: 0x14C9C18 VA: 0x14C9C18
	private void SetOutlineColorAndDefault(UILabel label, Color defaultColor) { }

	// RVA: 0x14C9CA8 Offset: 0x14C9CA8 VA: 0x14C9CA8
	private void SetOutlineBattleColor(UILabel label) { }

	// RVA: 0x14C9764 Offset: 0x14C9764 VA: 0x14C9764
	private void SetOutlineBattleColor() { }

	// RVA: 0x14C9DA4 Offset: 0x14C9DA4 VA: 0x14C9DA4
	private void SetOutlineLastColor(UILabel label) { }

	// RVA: 0x14C9AEC Offset: 0x14C9AEC VA: 0x14C9AEC
	private void SetOutlineLastColor() { }

	// RVA: 0x14C9EA0 Offset: 0x14C9EA0 VA: 0x14C9EA0
	private void SetOutlineWinColor(UILabel label) { }

	// RVA: 0x14C9B38 Offset: 0x14C9B38 VA: 0x14C9B38
	private void SetOutlineWinColor() { }

	// RVA: 0x14C9F9C Offset: 0x14C9F9C VA: 0x14C9F9C Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14C9FA4 Offset: 0x14C9FA4 VA: 0x14C9FA4
	public void onClick() { }

	// RVA: 0x14CA144 Offset: 0x14CA144 VA: 0x14CA144
	public void setClickCallBack(Action cb) { }

	// RVA: 0x14CA14C Offset: 0x14CA14C VA: 0x14CA14C
	public UISprite getIconSprite() { }

	// RVA: 0x14CA154 Offset: 0x14CA154 VA: 0x14CA154
	public UISprite getSubGroupBase() { }

	// RVA: 0x14B0D28 Offset: 0x14B0D28 VA: 0x14B0D28
	public bool IsTargetRaid(int eventId, int day) { }

	// RVA: 0x14CA15C Offset: 0x14CA15C VA: 0x14CA15C
	public void SetEntryAnim() { }

	// RVA: 0x14CA348 Offset: 0x14CA348 VA: 0x14CA348
	private void EntryAnim() { }

	// RVA: 0x14CA608 Offset: 0x14CA608 VA: 0x14CA608
	public void SetClearAnim() { }

	// RVA: 0x14B0E60 Offset: 0x14B0E60 VA: 0x14B0E60
	public void StartClearAnim(Action callback) { }

	// RVA: 0x14CA728 Offset: 0x14CA728 VA: 0x14CA728
	private void AnimFrameOutEnd() { }

	// RVA: 0x14CA8CC Offset: 0x14CA8CC VA: 0x14CA8CC
	private void clearAnimFinised() { }

	// RVA: 0x14CA350 Offset: 0x14CA350 VA: 0x14CA350
	public void FrameIn(string callFinished) { }

	// RVA: 0x14C8538 Offset: 0x14C8538 VA: 0x14C8538
	public void FrameOut(string callFinished) { }

	// RVA: 0x14CA8E0 Offset: 0x14CA8E0 VA: 0x14CA8E0
	private void BeginTweenAlphaAnim(GameObject gameObj, float from, float to, UITweener.Method tweenMethod) { }

	// RVA: 0x14C87C8 Offset: 0x14C87C8 VA: 0x14C87C8
	private void RefreshTerminal() { }

	// RVA: 0x14B1328 Offset: 0x14B1328 VA: 0x14B1328
	public void MoveUp(int moveY) { }

	// RVA: 0x14C97B0 Offset: 0x14C97B0 VA: 0x14C97B0
	private bool SetSubGroupBattleIdIcon() { }

	// RVA: 0x14CA9B0 Offset: 0x14CA9B0 VA: 0x14CA9B0
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventSideItemComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5855
{
	// Fields
	[SerializeField] // RVA: 0xC51884 Offset: 0xC51884 VA: 0xC51884
	private SideItemComponent clone; // 0x20
	[SerializeField] // RVA: 0xC51894 Offset: 0xC51894 VA: 0xC51894
	private SideItemComponent[] sideItems; // 0x28
	[SerializeField] // RVA: 0xC518A4 Offset: 0xC518A4 VA: 0xC518A4
	private float margin; // 0x30
	private const int LAST_LABEL_WIDTH = 112;
	private static readonly Vector2 ADD_LAST_LABEL_POS; // 0x0
	private static readonly Vector2 LAST_LABEL_OUTLINE; // 0x8
	private static readonly string[] TIME_STATUS_SPRITE_NAMES; // 0x10
	[SerializeField] // RVA: 0xC518B4 Offset: 0xC518B4 VA: 0xC518B4
	private Vector2[] itemPositions; // 0x38
	[SerializeField] // RVA: 0xC518C4 Offset: 0xC518C4 VA: 0xC518C4
	private Vector2[] spritePositions; // 0x40
	[SerializeField] // RVA: 0xC518D4 Offset: 0xC518D4 VA: 0xC518D4
	private Vector2[] labelPositions; // 0x48
	[SerializeField] // RVA: 0xC518E4 Offset: 0xC518E4 VA: 0xC518E4
	private int[] labelFontSizes; // 0x50
	[SerializeField] // RVA: 0xC518F4 Offset: 0xC518F4 VA: 0xC518F4
	private Vector2[] labelOutlineSizes; // 0x58
	[SerializeField] // RVA: 0xC51904 Offset: 0xC51904 VA: 0xC51904
	private Color[] labelOutlineColors; // 0x60
	[SerializeField] // RVA: 0xC51914 Offset: 0xC51914 VA: 0xC51914
	private UILabel.Effect[] labelOutlineStyles; // 0x68
	[SerializeField] // RVA: 0xC51924 Offset: 0xC51924 VA: 0xC51924
	private bool[] labelApplyGradients; // 0x70
	[SerializeField] // RVA: 0xC51934 Offset: 0xC51934 VA: 0xC51934
	private Color[] labelGradientTops; // 0x78
	[SerializeField] // RVA: 0xC51944 Offset: 0xC51944 VA: 0xC51944
	private Color[] labelGradientBottoms; // 0x80
	private static readonly string POINT_STATUS_STRING; // 0x18

	// Methods

	// RVA: 0x125288C Offset: 0x125288C VA: 0x125288C
	public void .ctor() { }

	// RVA: 0x125289C Offset: 0x125289C VA: 0x125289C Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x12528A4 Offset: 0x12528A4 VA: 0x12528A4 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x12528A8 Offset: 0x12528A8 VA: 0x12528A8 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x12528B0 Offset: 0x12528B0 VA: 0x12528B0
	public void Setup(int eventId) { }

	// RVA: 0x12532F0 Offset: 0x12532F0 VA: 0x12532F0
	private void SetupTotalPointUI(int eventId) { }

	// RVA: 0x1252980 Offset: 0x1252980 VA: 0x1252980
	private void SetupBuffRateUI(int eventId, EventPointBuffEntity[] entitys) { }

	// RVA: 0x1253684 Offset: 0x1253684 VA: 0x1253684
	private SideItemComponent CreateSideItem(string spriteName) { }

	// RVA: 0x12537DC Offset: 0x12537DC VA: 0x12537DC
	private static void .cctor() { }
}

// Namespace: 
public class TitleInfoEventSubmarineStatusComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5856
{
	// Fields
	private static readonly float ENTRY_ANIMATION_TIME; // 0x0
	private static readonly float PROGRESS_ANIMATION_TIME; // 0x4
	private static readonly float EXIT_ANIMATION_TIME; // 0x8
	private static readonly float GOAL_ANIMATION_TIME; // 0xC
	private static readonly float MAP_CHANGE_WAIT_TIME; // 0x10
	[SerializeField] // RVA: 0xC51954 Offset: 0xC51954 VA: 0xC51954
	private UISprite statusBg; // 0x20
	[SerializeField] // RVA: 0xC51964 Offset: 0xC51964 VA: 0xC51964
	private UISprite areaIcon; // 0x28
	[SerializeField] // RVA: 0xC51974 Offset: 0xC51974 VA: 0xC51974
	private UILabel titleLabel; // 0x30
	[SerializeField] // RVA: 0xC51984 Offset: 0xC51984 VA: 0xC51984
	private UISprite gaugeFrame; // 0x38
	[SerializeField] // RVA: 0xC51994 Offset: 0xC51994 VA: 0xC51994
	private UISprite gaugeBg; // 0x40
	[SerializeField] // RVA: 0xC519A4 Offset: 0xC519A4 VA: 0xC519A4
	private UISprite gaugeBar; // 0x48
	[SerializeField] // RVA: 0xC519B4 Offset: 0xC519B4 VA: 0xC519B4
	private UISprite shipIcon; // 0x50
	[SerializeField] // RVA: 0xC519C4 Offset: 0xC519C4 VA: 0xC519C4
	private GameObject shipPanelObj; // 0x58
	[SerializeField] // RVA: 0xC519D4 Offset: 0xC519D4 VA: 0xC519D4
	private UISprite progressPointBg; // 0x60
	[SerializeField] // RVA: 0xC519E4 Offset: 0xC519E4 VA: 0xC519E4
	private UILabel progressNameLabel; // 0x68
	[SerializeField] // RVA: 0xC519F4 Offset: 0xC519F4 VA: 0xC519F4
	private UILabel progressPointLabel; // 0x70
	[SerializeField] // RVA: 0xC51A04 Offset: 0xC51A04 VA: 0xC51A04
	private UICounterLabel progressPointCounterLabel; // 0x78
	[SerializeField] // RVA: 0xC51A14 Offset: 0xC51A14 VA: 0xC51A14
	private UISprite gateBg; // 0x80
	[SerializeField] // RVA: 0xC51A24 Offset: 0xC51A24 VA: 0xC51A24
	private UISprite gateNextIcon; // 0x88
	[SerializeField] // RVA: 0xC51A34 Offset: 0xC51A34 VA: 0xC51A34
	private UISprite gateGoalIcon; // 0x90
	[SerializeField] // RVA: 0xC51A44 Offset: 0xC51A44 VA: 0xC51A44
	private UISprite gateNextPointBg; // 0x98
	[SerializeField] // RVA: 0xC51A54 Offset: 0xC51A54 VA: 0xC51A54
	private UILabel gateNextPointLabel; // 0xA0
	[SerializeField] // RVA: 0xC51A64 Offset: 0xC51A64 VA: 0xC51A64
	private UICounterLabel gateNextPointCounterLabel; // 0xA8
	private EventDetailEntity eventDetailEnt; // 0xB0
	private AssetData mapAssetData; // 0xB8
	private int minPoint; // 0xC0
	private int maxPoint; // 0xC4
	private int userOldPoint; // 0xC8
	private int userPoint; // 0xCC
	private Action onEndAnim; // 0xD0
	private string nextPointTextFormat; // 0xD8
	private int currentQuestId; // 0xE0
	private int oldQuestId; // 0xE4
	private int progreeQuestId; // 0xE8
	private GameObject goalAnimObject; // 0xF0
	private bool isCompleatedCount; // 0xF8
	private List<QuestReleaseEntity> baseQuestReleaseEntList; // 0x100
	private bool isGoalAnimToLoop; // 0x108
	private string animClipName; // 0x110
	[CompilerGeneratedAttribute] // RVA: 0xC51A74 Offset: 0xC51A74 VA: 0xC51A74
	private static Comparison<QuestReleaseEntity> <>f__am$cache0; // 0x18

	// Properties
	private float GaugeWidth { get; }
	private Vector3 BasePosition { get; }

	// Methods

	// RVA: 0x1253A18 Offset: 0x1253A18 VA: 0x1253A18
	public void .ctor() { }

	// RVA: 0x1253A20 Offset: 0x1253A20 VA: 0x1253A20
	private float get_GaugeWidth() { }

	// RVA: 0x1253A58 Offset: 0x1253A58 VA: 0x1253A58
	private Vector3 get_BasePosition() { }

	// RVA: 0x1253AC8 Offset: 0x1253AC8 VA: 0x1253AC8
	private void OnEnable() { }

	// RVA: 0x1253C28 Offset: 0x1253C28 VA: 0x1253C28
	public void Setup(EventDetailEntity eventDetailEntity, AssetData assetData) { }

	// RVA: 0x1255084 Offset: 0x1255084 VA: 0x1255084 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x125508C Offset: 0x125508C VA: 0x125508C Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x1255090 Offset: 0x1255090 VA: 0x1255090 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x1254C8C Offset: 0x1254C8C VA: 0x1254C8C
	private void SetupAnimation() { }

	// RVA: 0x12551F4 Offset: 0x12551F4 VA: 0x12551F4
	public void PlayAnimation(Action onEndAnim) { }

	// RVA: 0x1255788 Offset: 0x1255788 VA: 0x1255788
	private void PlayExitAnimation() { }

	// RVA: 0x1255D74 Offset: 0x1255D74 VA: 0x1255D74
	private void EndExitAnimation() { }

	// RVA: 0x1255484 Offset: 0x1255484 VA: 0x1255484
	private void PlayEntryAnimation() { }

	// RVA: 0x1255F14 Offset: 0x1255F14 VA: 0x1255F14
	private void EndEntryAnimation() { }

	// RVA: 0x1255994 Offset: 0x1255994 VA: 0x1255994
	private void PlayProgressAnimation() { }

	// RVA: 0x1255F18 Offset: 0x1255F18 VA: 0x1255F18
	public void EndProgressAnimation() { }

	// RVA: 0x12561F4 Offset: 0x12561F4 VA: 0x12561F4
	private void EndAnimation() { }

	// RVA: 0x1254BFC Offset: 0x1254BFC VA: 0x1254BFC
	private Vector3 ConvertoPointToPosition(int point) { }

	// RVA: 0x125665C Offset: 0x125665C VA: 0x125665C
	private float ConvertPointToRate(int point) { }

	// RVA: 0x1254A18 Offset: 0x1254A18 VA: 0x1254A18
	private int GetUserEventPoint() { }

	// RVA: 0x1254874 Offset: 0x1254874 VA: 0x1254874
	public void SetupOldData(out int oldPoint, out int oldQuestId, out int progreeQuestId) { }

	// RVA: 0x1255098 Offset: 0x1255098 VA: 0x1255098
	private GameObject CreateGoalAnimObject() { }

	// RVA: 0x1253B50 Offset: 0x1253B50 VA: 0x1253B50
	private void PlayGoalAnim(string animClipName) { }

	// RVA: 0x1255DFC Offset: 0x1255DFC VA: 0x1255DFC
	private void DestroyGoalAnim() { }

	// RVA: 0x1256134 Offset: 0x1256134 VA: 0x1256134
	private bool IsPlayingGoalAnim() { }

	// RVA: 0x12565A0 Offset: 0x12565A0 VA: 0x12565A0
	public static string CreateSaveData(int userPoint, int currentMapId, int progressMapId) { }

	// RVA: 0x1256698 Offset: 0x1256698 VA: 0x1256698
	public static string CreateSaveData(string userPoint, string currentMapId, string progressMapId) { }

	// RVA: 0x12542E0 Offset: 0x12542E0 VA: 0x12542E0
	public static List<QuestReleaseEntity> GetQuestReleaseList(int eventId) { }

	// RVA: 0x12545A0 Offset: 0x12545A0 VA: 0x12545A0
	private QuestReleaseEntity GetProgressQuestReleaseEnt(List<QuestReleaseEntity> baseList) { }

	// RVA: 0x1254708 Offset: 0x1254708 VA: 0x1254708
	private QuestReleaseEntity GetCurrentQuestReleaseEnt(List<QuestReleaseEntity> baseList) { }
