
	// RVA: -1 Offset: -1 Slot: 17
	public abstract long get_SegmentsSent();
}

// Namespace: System.Net.NetworkInformation
internal class MibTcpStatistics : TcpStatistics // TypeDefIndex: 1436
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override long ConnectionsAccepted { get; }
	public override long ConnectionsInitiated { get; }
	public override long CumulativeConnections { get; }
	public override long CurrentConnections { get; }
	public override long ErrorsReceived { get; }
	public override long FailedConnectionAttempts { get; }
	public override long MaximumConnections { get; }
	public override long MaximumTransmissionTimeout { get; }
	public override long MinimumTransmissionTimeout { get; }
	public override long ResetConnections { get; }
	public override long ResetsSent { get; }
	public override long SegmentsReceived { get; }
	public override long SegmentsResent { get; }
	public override long SegmentsSent { get; }

	// Methods

	// RVA: 0x1FFAD64 Offset: 0x1FFAD64 VA: 0x1FFAD64
	public void .ctor(StringDictionary dic) { }

	// RVA: 0x1FFCE0C Offset: 0x1FFCE0C VA: 0x1FFCE0C
	private long Get(string name) { }

	// RVA: 0x1FFCEF0 Offset: 0x1FFCEF0 VA: 0x1FFCEF0 Slot: 4
	public override long get_ConnectionsAccepted() { }

	// RVA: 0x1FFCF40 Offset: 0x1FFCF40 VA: 0x1FFCF40 Slot: 5
	public override long get_ConnectionsInitiated() { }

	// RVA: 0x1FFCF90 Offset: 0x1FFCF90 VA: 0x1FFCF90 Slot: 6
	public override long get_CumulativeConnections() { }

	// RVA: 0x1FFCFE0 Offset: 0x1FFCFE0 VA: 0x1FFCFE0 Slot: 7
	public override long get_CurrentConnections() { }

	// RVA: 0x1FFD030 Offset: 0x1FFD030 VA: 0x1FFD030 Slot: 8
	public override long get_ErrorsReceived() { }

	// RVA: 0x1FFD080 Offset: 0x1FFD080 VA: 0x1FFD080 Slot: 9
	public override long get_FailedConnectionAttempts() { }

	// RVA: 0x1FFD0D0 Offset: 0x1FFD0D0 VA: 0x1FFD0D0 Slot: 10
	public override long get_MaximumConnections() { }

	// RVA: 0x1FFD120 Offset: 0x1FFD120 VA: 0x1FFD120 Slot: 11
	public override long get_MaximumTransmissionTimeout() { }

	// RVA: 0x1FFD170 Offset: 0x1FFD170 VA: 0x1FFD170 Slot: 12
	public override long get_MinimumTransmissionTimeout() { }

	// RVA: 0x1FFD1C0 Offset: 0x1FFD1C0 VA: 0x1FFD1C0 Slot: 13
	public override long get_ResetConnections() { }

	// RVA: 0x1FFD210 Offset: 0x1FFD210 VA: 0x1FFD210 Slot: 14
	public override long get_ResetsSent() { }

	// RVA: 0x1FFD260 Offset: 0x1FFD260 VA: 0x1FFD260 Slot: 15
	public override long get_SegmentsReceived() { }

	// RVA: 0x1FFD2B0 Offset: 0x1FFD2B0 VA: 0x1FFD2B0 Slot: 16
	public override long get_SegmentsResent() { }

	// RVA: 0x1FFD300 Offset: 0x1FFD300 VA: 0x1FFD300 Slot: 17
	public override long get_SegmentsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32TcpStatistics : TcpStatistics // TypeDefIndex: 1437
{
	// Fields
	private Win32_MIB_TCPSTATS info; // 0x10

	// Properties
	public override long ConnectionsAccepted { get; }
	public override long ConnectionsInitiated { get; }
	public override long CumulativeConnections { get; }
	public override long CurrentConnections { get; }
	public override long ErrorsReceived { get; }
	public override long FailedConnectionAttempts { get; }
	public override long MaximumConnections { get; }
	public override long MaximumTransmissionTimeout { get; }
	public override long MinimumTransmissionTimeout { get; }
	public override long ResetConnections { get; }
	public override long ResetsSent { get; }
	public override long SegmentsReceived { get; }
	public override long SegmentsResent { get; }
	public override long SegmentsSent { get; }

	// Methods

	// RVA: 0x20083A4 Offset: 0x20083A4 VA: 0x20083A4
	public void .ctor(Win32_MIB_TCPSTATS info) { }

	// RVA: 0x200AA44 Offset: 0x200AA44 VA: 0x200AA44 Slot: 4
	public override long get_ConnectionsAccepted() { }

	// RVA: 0x200AA4C Offset: 0x200AA4C VA: 0x200AA4C Slot: 5
	public override long get_ConnectionsInitiated() { }

	// RVA: 0x200AA54 Offset: 0x200AA54 VA: 0x200AA54 Slot: 6
	public override long get_CumulativeConnections() { }

	// RVA: 0x200AA5C Offset: 0x200AA5C VA: 0x200AA5C Slot: 7
	public override long get_CurrentConnections() { }

	// RVA: 0x200AA64 Offset: 0x200AA64 VA: 0x200AA64 Slot: 8
	public override long get_ErrorsReceived() { }

	// RVA: 0x200AA6C Offset: 0x200AA6C VA: 0x200AA6C Slot: 9
	public override long get_FailedConnectionAttempts() { }

	// RVA: 0x200AA74 Offset: 0x200AA74 VA: 0x200AA74 Slot: 10
	public override long get_MaximumConnections() { }

	// RVA: 0x200AA7C Offset: 0x200AA7C VA: 0x200AA7C Slot: 11
	public override long get_MaximumTransmissionTimeout() { }

	// RVA: 0x200AA84 Offset: 0x200AA84 VA: 0x200AA84 Slot: 12
	public override long get_MinimumTransmissionTimeout() { }

	// RVA: 0x200AA8C Offset: 0x200AA8C VA: 0x200AA8C Slot: 13
	public override long get_ResetConnections() { }

	// RVA: 0x200AA94 Offset: 0x200AA94 VA: 0x200AA94 Slot: 14
	public override long get_ResetsSent() { }

	// RVA: 0x200AA9C Offset: 0x200AA9C VA: 0x200AA9C Slot: 15
	public override long get_SegmentsReceived() { }

	// RVA: 0x200AAA4 Offset: 0x200AAA4 VA: 0x200AAA4 Slot: 16
	public override long get_SegmentsResent() { }

	// RVA: 0x200AAAC Offset: 0x200AAAC VA: 0x200AAAC Slot: 17
	public override long get_SegmentsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_TCPSTATS // TypeDefIndex: 1438
{
	// Fields
	public uint RtoAlgorithm; // 0x0
	public uint RtoMin; // 0x4
	public uint RtoMax; // 0x8
	public uint MaxConn; // 0xC
	public uint ActiveOpens; // 0x10
	public uint PassiveOpens; // 0x14
	public uint AttemptFails; // 0x18
	public uint EstabResets; // 0x1C
	public uint CurrEstab; // 0x20
	public uint InSegs; // 0x24
	public uint OutSegs; // 0x28
	public uint RetransSegs; // 0x2C
	public uint InErrs; // 0x30
	public uint OutRsts; // 0x34
	public uint NumConns; // 0x38
}

// Namespace: System.Net.NetworkInformation
public abstract class UdpStatistics // TypeDefIndex: 1439
{
	// Properties
	public abstract long DatagramsReceived { get; }
	public abstract long DatagramsSent { get; }
	public abstract long IncomingDatagramsDiscarded { get; }
	public abstract long IncomingDatagramsWithErrors { get; }
	public abstract int UdpListeners { get; }

	// Methods

	// RVA: 0x1FFD350 Offset: 0x1FFD350 VA: 0x1FFD350
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_DatagramsReceived();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_DatagramsSent();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_IncomingDatagramsDiscarded();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_IncomingDatagramsWithErrors();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_UdpListeners();
}

// Namespace: System.Net.NetworkInformation
internal class MibUdpStatistics : UdpStatistics // TypeDefIndex: 1440
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override long DatagramsReceived { get; }
	public override long DatagramsSent { get; }
	public override long IncomingDatagramsDiscarded { get; }
	public override long IncomingDatagramsWithErrors { get; }
	public override int UdpListeners { get; }

	// Methods

	// RVA: 0x1FFAE90 Offset: 0x1FFAE90 VA: 0x1FFAE90
	public void .ctor(StringDictionary dic) { }

	// RVA: 0x1FFD358 Offset: 0x1FFD358 VA: 0x1FFD358
	private long Get(string name) { }

	// RVA: 0x1FFD43C Offset: 0x1FFD43C VA: 0x1FFD43C Slot: 4
	public override long get_DatagramsReceived() { }

	// RVA: 0x1FFD48C Offset: 0x1FFD48C VA: 0x1FFD48C Slot: 5
	public override long get_DatagramsSent() { }

	// RVA: 0x1FFD4DC Offset: 0x1FFD4DC VA: 0x1FFD4DC Slot: 6
	public override long get_IncomingDatagramsDiscarded() { }

	// RVA: 0x1FFD52C Offset: 0x1FFD52C VA: 0x1FFD52C Slot: 7
	public override long get_IncomingDatagramsWithErrors() { }

	// RVA: 0x1FFD57C Offset: 0x1FFD57C VA: 0x1FFD57C Slot: 8
	public override int get_UdpListeners() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32UdpStatistics : UdpStatistics // TypeDefIndex: 1441
{
	// Fields
	private Win32_MIB_UDPSTATS info; // 0x10

	// Properties
	public override long DatagramsReceived { get; }
	public override long DatagramsSent { get; }
	public override long IncomingDatagramsDiscarded { get; }
	public override long IncomingDatagramsWithErrors { get; }
	public override int UdpListeners { get; }

	// Methods

	// RVA: 0x20086A0 Offset: 0x20086A0 VA: 0x20086A0
	public void .ctor(Win32_MIB_UDPSTATS info) { }

	// RVA: 0x200AAB4 Offset: 0x200AAB4 VA: 0x200AAB4 Slot: 4
	public override long get_DatagramsReceived() { }

	// RVA: 0x200AABC Offset: 0x200AABC VA: 0x200AABC Slot: 5
	public override long get_DatagramsSent() { }

	// RVA: 0x200AAC4 Offset: 0x200AAC4 VA: 0x200AAC4 Slot: 6
	public override long get_IncomingDatagramsDiscarded() { }

	// RVA: 0x200AACC Offset: 0x200AACC VA: 0x200AACC Slot: 7
	public override long get_IncomingDatagramsWithErrors() { }

	// RVA: 0x200AAD4 Offset: 0x200AAD4 VA: 0x200AAD4 Slot: 8
	public override int get_UdpListeners() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_UDPSTATS // TypeDefIndex: 1442
{
	// Fields
	public uint InDatagrams; // 0x0
	public uint NoPorts; // 0x4
	public uint InErrors; // 0x8
	public uint OutDatagrams; // 0xC
	public int NumAddrs; // 0x10
}

// Namespace: System.Net.NetworkInformation
public abstract class UnicastIPAddressInformation : IPAddressInformation // TypeDefIndex: 1443
{
	// Properties
	public abstract long AddressPreferredLifetime { get; }
	public abstract long AddressValidLifetime { get; }
	public abstract long DhcpLeaseLifetime { get; }
	public abstract DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
	public abstract IPAddress IPv4Mask { get; }
	public abstract PrefixOrigin PrefixOrigin { get; }
	public abstract SuffixOrigin SuffixOrigin { get; }

	// Methods

	// RVA: 0x1FF7F14 Offset: 0x1FF7F14 VA: 0x1FF7F14
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_AddressPreferredLifetime();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_AddressValidLifetime();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_DhcpLeaseLifetime();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract DuplicateAddressDetectionState get_DuplicateAddressDetectionState();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract IPAddress get_IPv4Mask();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract PrefixOrigin get_PrefixOrigin();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract SuffixOrigin get_SuffixOrigin();
}

// Namespace: System.Net.NetworkInformation
internal class Win32UnicastIPAddressInformation : UnicastIPAddressInformation // TypeDefIndex: 1444
{
	// Fields
	private int if_index; // 0x10
	private Win32_IP_ADAPTER_UNICAST_ADDRESS info; // 0x18

	// Properties
	public override IPAddress Address { get; }
	public override bool IsDnsEligible { get; }
	public override bool IsTransient { get; }
	public override long AddressPreferredLifetime { get; }
	public override long AddressValidLifetime { get; }
	public override long DhcpLeaseLifetime { get; }
	public override DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
	public override IPAddress IPv4Mask { get; }
	public override PrefixOrigin PrefixOrigin { get; }
	public override SuffixOrigin SuffixOrigin { get; }

	// Methods

	// RVA: 0x2004110 Offset: 0x2004110 VA: 0x2004110
	public void .ctor(int ifIndex, Win32_IP_ADAPTER_UNICAST_ADDRESS info) { }

	// RVA: 0x200AADC Offset: 0x200AADC VA: 0x200AADC Slot: 4
	public override IPAddress get_Address() { }

	// RVA: 0x200AAE4 Offset: 0x200AAE4 VA: 0x200AAE4 Slot: 5
	public override bool get_IsDnsEligible() { }

	// RVA: 0x200AAF0 Offset: 0x200AAF0 VA: 0x200AAF0 Slot: 6
	public override bool get_IsTransient() { }

	// RVA: 0x200AAFC Offset: 0x200AAFC VA: 0x200AAFC Slot: 7
	public override long get_AddressPreferredLifetime() { }

	// RVA: 0x200AB04 Offset: 0x200AB04 VA: 0x200AB04 Slot: 8
	public override long get_AddressValidLifetime() { }

	// RVA: 0x200AB0C Offset: 0x200AB0C VA: 0x200AB0C Slot: 9
	public override long get_DhcpLeaseLifetime() { }

	// RVA: 0x200AB14 Offset: 0x200AB14 VA: 0x200AB14 Slot: 10
	public override DuplicateAddressDetectionState get_DuplicateAddressDetectionState() { }

	// RVA: 0x200AB1C Offset: 0x200AB1C VA: 0x200AB1C Slot: 11
	public override IPAddress get_IPv4Mask() { }

	// RVA: 0x200ADA8 Offset: 0x200ADA8 VA: 0x200ADA8 Slot: 12
	public override PrefixOrigin get_PrefixOrigin() { }

	// RVA: 0x200ADB0 Offset: 0x200ADB0 VA: 0x200ADB0 Slot: 13
	public override SuffixOrigin get_SuffixOrigin() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxUnicastIPAddressInformation : UnicastIPAddressInformation // TypeDefIndex: 1445
{
	// Fields
	private IPAddress address; // 0x10

	// Properties
	public override IPAddress Address { get; }
	public override bool IsDnsEligible { get; }
	[MonoTODOAttribute] // RVA: 0xBD34B4 Offset: 0xBD34B4 VA: 0xBD34B4
	public override bool IsTransient { get; }
	public override long AddressPreferredLifetime { get; }
	public override long AddressValidLifetime { get; }
	public override long DhcpLeaseLifetime { get; }
	public override DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
	public override IPAddress IPv4Mask { get; }
	public override PrefixOrigin PrefixOrigin { get; }
	public override SuffixOrigin SuffixOrigin { get; }

	// Methods

	// RVA: 0x1FF7EE8 Offset: 0x1FF7EE8 VA: 0x1FF7EE8
	public void .ctor(IPAddress address) { }

	// RVA: 0x1FF7F1C Offset: 0x1FF7F1C VA: 0x1FF7F1C Slot: 4
	public override IPAddress get_Address() { }

	// RVA: 0x1FF7F24 Offset: 0x1FF7F24 VA: 0x1FF7F24 Slot: 5
	public override bool get_IsDnsEligible() { }

	// RVA: 0x1FF7FB8 Offset: 0x1FF7FB8 VA: 0x1FF7FB8 Slot: 6
	public override bool get_IsTransient() { }

	// RVA: 0x1FF7FC0 Offset: 0x1FF7FC0 VA: 0x1FF7FC0 Slot: 7
	public override long get_AddressPreferredLifetime() { }

	// RVA: 0x1FF8028 Offset: 0x1FF8028 VA: 0x1FF8028 Slot: 8
	public override long get_AddressValidLifetime() { }

	// RVA: 0x1FF8090 Offset: 0x1FF8090 VA: 0x1FF8090 Slot: 9
	public override long get_DhcpLeaseLifetime() { }

	// RVA: 0x1FF80F8 Offset: 0x1FF80F8 VA: 0x1FF80F8 Slot: 10
	public override DuplicateAddressDetectionState get_DuplicateAddressDetectionState() { }

	// RVA: 0x1FF8160 Offset: 0x1FF8160 VA: 0x1FF8160 Slot: 11
	public override IPAddress get_IPv4Mask() { }

	// RVA: 0x1FF81C8 Offset: 0x1FF81C8 VA: 0x1FF81C8 Slot: 12
	public override PrefixOrigin get_PrefixOrigin() { }

	// RVA: 0x1FF8230 Offset: 0x1FF8230 VA: 0x1FF8230 Slot: 13
	public override SuffixOrigin get_SuffixOrigin() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xBD070C Offset: 0xBD070C VA: 0xBD070C
public class UnicastIPAddressInformationCollection : IEnumerable, IEnumerable<UnicastIPAddressInformation>, ICollection<UnicastIPAddressInformation> // TypeDefIndex: 1446
{
	// Fields
	private List<UnicastIPAddressInformation> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual UnicastIPAddressInformation Item { get; }

	// Methods

	// RVA: 0x20038E4 Offset: 0x20038E4 VA: 0x20038E4
	protected internal void .ctor() { }

	// RVA: 0x2003954 Offset: 0x2003954 VA: 0x2003954 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x20039E8 Offset: 0x20039E8 VA: 0x20039E8 Slot: 13
	public virtual void Add(UnicastIPAddressInformation address) { }

	// RVA: 0x2003AB4 Offset: 0x2003AB4 VA: 0x2003AB4 Slot: 14
	public virtual void Clear() { }

	// RVA: 0x2003B70 Offset: 0x2003B70 VA: 0x2003B70 Slot: 15
	public virtual bool Contains(UnicastIPAddressInformation address) { }

	// RVA: 0x2003BE0 Offset: 0x2003BE0 VA: 0x2003BE0 Slot: 16
	public virtual void CopyTo(UnicastIPAddressInformation[] array, int offset) { }

	// RVA: 0x2003C58 Offset: 0x2003C58 VA: 0x2003C58 Slot: 17
	public virtual IEnumerator<UnicastIPAddressInformation> GetEnumerator() { }

	// RVA: 0x2003D0C Offset: 0x2003D0C VA: 0x2003D0C Slot: 18
	public virtual bool Remove(UnicastIPAddressInformation address) { }

	// RVA: 0x2003DD8 Offset: 0x2003DD8 VA: 0x2003DD8 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0x2003E38 Offset: 0x2003E38 VA: 0x2003E38 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x2003E40 Offset: 0x2003E40 VA: 0x2003E40 Slot: 21
	public virtual UnicastIPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class UnicastIPAddressInformationImplCollection : UnicastIPAddressInformationCollection // TypeDefIndex: 1447
{
	// Fields
	public static readonly UnicastIPAddressInformationImplCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0x2003EB0 Offset: 0x2003EB0 VA: 0x2003EB0
	private void .ctor(bool isReadOnly) { }

	// RVA: 0x2003EDC Offset: 0x2003EDC VA: 0x2003EDC
	private static void .cctor() { }

	// RVA: 0x2003F44 Offset: 0x2003F44 VA: 0x2003F44 Slot: 20
	public override bool get_IsReadOnly() { }

	// RVA: 0x2003F4C Offset: 0x2003F4C VA: 0x2003F4C
	public static UnicastIPAddressInformationCollection Win32FromUnicast(int ifIndex, IntPtr ptr) { }

	// RVA: 0x2004160 Offset: 0x2004160 VA: 0x2004160
	public static UnicastIPAddressInformationCollection LinuxFromList(List<IPAddress> addresses) { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32_FIXED_INFO // TypeDefIndex: 1448
{
	// Fields
	private const int MAX_HOSTNAME_LEN = 128;
	private const int MAX_DOMAIN_NAME_LEN = 128;
	private const int MAX_SCOPE_ID_LEN = 256;
	private static Win32_FIXED_INFO fixed_info; // 0x0
	public string HostName; // 0x10
	public string DomainName; // 0x18
	public IntPtr CurrentDnsServer; // 0x20
	public Win32_IP_ADDR_STRING DnsServerList; // 0x28
	public NetBiosNodeType NodeType; // 0x48
	public string ScopeId; // 0x50
	public uint EnableRouting; // 0x58
	public uint EnableProxy; // 0x5C
	public uint EnableDns; // 0x60

	// Properties
	public static Win32_FIXED_INFO Instance { get; }

	// Methods

	// RVA: 0x200ADB8 Offset: 0x200ADB8 VA: 0x200ADB8
	public void .ctor() { }

	// RVA: 0x200ADC0 Offset: 0x200ADC0 VA: 0x200ADC0
	private static extern int GetNetworkParams(byte[] bytes, ref int size) { }

	// RVA: 0x2008800 Offset: 0x2008800 VA: 0x2008800
	public static Win32_FIXED_INFO get_Instance() { }

	// RVA: 0x200AE7C Offset: 0x200AE7C VA: 0x200AE7C
	private static Win32_FIXED_INFO GetInstance() { }
}

// Namespace: System.Net.NetworkInformation
internal struct AlignmentUnion // TypeDefIndex: 1449
{
	// Fields
	public ulong Alignment; // 0x0
	public int Length; // 0x0
	public int IfIndex; // 0x4
}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_ADAPTER_ADDRESSES // TypeDefIndex: 1450
{
	// Fields
	private const int MAX_ADAPTER_ADDRESS_LENGTH = 8;
	private const int IP_ADAPTER_DDNS_ENABLED = 1;
	private const int IP_ADAPTER_RECEIVE_ONLY = 8;
	private const int IP_ADAPTER_NO_MULTICAST = 16;
	public AlignmentUnion Alignment; // 0x10
	public IntPtr Next; // 0x18
	public string AdapterName; // 0x20
	public IntPtr FirstUnicastAddress; // 0x28
	public IntPtr FirstAnycastAddress; // 0x30
	public IntPtr FirstMulticastAddress; // 0x38
	public IntPtr FirstDnsServerAddress; // 0x40
	public string DnsSuffix; // 0x48
	public string Description; // 0x50
	public string FriendlyName; // 0x58
	public byte[] PhysicalAddress; // 0x60
	public uint PhysicalAddressLength; // 0x68
	public uint Flags; // 0x6C
	public uint Mtu; // 0x70
	public NetworkInterfaceType IfType; // 0x74
	public OperationalStatus OperStatus; // 0x78
	public int Ipv6IfIndex; // 0x7C
	public uint[] ZoneIndices; // 0x80

	// Properties
	public bool DdnsEnabled { get; }
	public bool IsReceiveOnly { get; }
	public bool NoMulticast { get; }

	// Methods

	// RVA: 0x200A7C0 Offset: 0x200A7C0 VA: 0x200A7C0
	public void .ctor() { }

	// RVA: 0x20091D4 Offset: 0x20091D4 VA: 0x20091D4
	public bool get_DdnsEnabled() { }

	// RVA: 0x200A958 Offset: 0x200A958 VA: 0x200A958
	public bool get_IsReceiveOnly() { }

	// RVA: 0x200AA38 Offset: 0x200AA38 VA: 0x200AA38
	public bool get_NoMulticast() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_ADAPTER_INFO // TypeDefIndex: 1451
{
	// Fields
	private const int MAX_ADAPTER_NAME_LENGTH = 256;
	private const int MAX_ADAPTER_DESCRIPTION_LENGTH = 128;
	private const int MAX_ADAPTER_ADDRESS_LENGTH = 8;
	public IntPtr Next; // 0x10
	public int ComboIndex; // 0x18
	public string AdapterName; // 0x20
	public string Description; // 0x28
	public uint AddressLength; // 0x30
	public byte[] Address; // 0x38
	public uint Index; // 0x40
	public uint Type; // 0x44
	public uint DhcpEnabled; // 0x48
	public IntPtr CurrentIpAddress; // 0x50
	public Win32_IP_ADDR_STRING IpAddressList; // 0x58
	public Win32_IP_ADDR_STRING GatewayList; // 0x78
	public Win32_IP_ADDR_STRING DhcpServer; // 0x98
	public bool HaveWins; // 0xB8
	public Win32_IP_ADDR_STRING PrimaryWinsServer; // 0xC0
	public Win32_IP_ADDR_STRING SecondaryWinsServer; // 0xE0
	public long LeaseObtained; // 0x100
	public long LeaseExpires; // 0x108

	// Methods

	// RVA: 0x200A7B8 Offset: 0x200A7B8 VA: 0x200A7B8
	public void .ctor() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_IFROW // TypeDefIndex: 1452
{
	// Fields
	private const int MAX_INTERFACE_NAME_LEN = 256;
	private const int MAXLEN_PHYSADDR = 8;
	private const int MAXLEN_IFDESCR = 256;
	public char[] Name; // 0x0
	public int Index; // 0x8
	public NetworkInterfaceType Type; // 0xC
	public int Mtu; // 0x10
	public uint Speed; // 0x14
	public int PhysAddrLen; // 0x18
	public byte[] PhysAddr; // 0x20
	public uint AdminStatus; // 0x28
	public uint OperStatus; // 0x2C
	public uint LastChange; // 0x30
	public int InOctets; // 0x34
	public int InUcastPkts; // 0x38
	public int InNUcastPkts; // 0x3C
	public int InDiscards; // 0x40
	public int InErrors; // 0x44
	public int InUnknownProtos; // 0x48
	public int OutOctets; // 0x4C
	public int OutUcastPkts; // 0x50
	public int OutNUcastPkts; // 0x54
	public int OutDiscards; // 0x58
	public int OutErrors; // 0x5C
	public int OutQLen; // 0x60
	public int DescrLen; // 0x64
	public byte[] Descr; // 0x68
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADDR_STRING // TypeDefIndex: 1453
{
	// Fields
	public IntPtr Next; // 0x0
	public string IpAddress; // 0x8
	public string IpMask; // 0x10
	public uint Context; // 0x18
}

// Namespace: System.Net.NetworkInformation
internal struct Win32LengthFlagsUnion // TypeDefIndex: 1454
{
	// Fields
	private const int IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = 1;
	private const int IP_ADAPTER_ADDRESS_TRANSIENT = 2;
	public uint Length; // 0x0
	public uint Flags; // 0x4

	// Properties
	public bool IsDnsEligible { get; }
	public bool IsTransient { get; }

	// Methods

	// RVA: 0xD64934 Offset: 0xD64934 VA: 0xD64934
	public bool get_IsDnsEligible() { }

	// RVA: 0xD64940 Offset: 0xD64940 VA: 0xD64940
	public bool get_IsTransient() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_ANYCAST_ADDRESS // TypeDefIndex: 1455
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_DNS_SERVER_ADDRESS // TypeDefIndex: 1456
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_MULTICAST_ADDRESS // TypeDefIndex: 1457
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_UNICAST_ADDRESS // TypeDefIndex: 1458
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
	public PrefixOrigin PrefixOrigin; // 0x20
	public SuffixOrigin SuffixOrigin; // 0x24
	public DuplicateAddressDetectionState DadState; // 0x28
	public uint ValidLifetime; // 0x2C
	public uint PreferredLifetime; // 0x30
	public uint LeaseLifetime; // 0x34
	public byte OnLinkPrefixLength; // 0x38
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_SOCKADDR // TypeDefIndex: 1459
{
	// Fields
	public ushort AddressFamily; // 0x0
	public byte[] AddressData; // 0x8
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_SOCKET_ADDRESS // TypeDefIndex: 1460
{
	// Fields
	private const int AF_INET6 = 23;
	public IntPtr Sockaddr; // 0x0
	public int SockaddrLength; // 0x8

	// Methods

	// RVA: 0xD65830 Offset: 0xD65830 VA: 0xD65830
	public IPAddress GetIPAddress() { }
}

// Namespace: System.Net.Security
public abstract class AuthenticatedStream : Stream // TypeDefIndex: 1461
{
	// Fields
	private Stream innerStream; // 0x10
	private bool leaveStreamOpen; // 0x18

	// Properties
	protected Stream InnerStream { get; }
	public abstract bool IsAuthenticated { get; }
	public abstract bool IsEncrypted { get; }
	public abstract bool IsMutuallyAuthenticated { get; }
	public abstract bool IsServer { get; }
	public abstract bool IsSigned { get; }
	public bool LeaveInnerStreamOpen { get; }

	// Methods

	// RVA: 0x200D740 Offset: 0x200D740 VA: 0x200D740
	protected void .ctor(Stream innerStream, bool leaveInnerStreamOpen) { }

	// RVA: 0x200D7C8 Offset: 0x200D7C8 VA: 0x200D7C8
	protected Stream get_InnerStream() { }

	// RVA: -1 Offset: -1 Slot: 29
	public abstract bool get_IsAuthenticated();

	// RVA: -1 Offset: -1 Slot: 30
	public abstract bool get_IsEncrypted();

	// RVA: -1 Offset: -1 Slot: 31
	public abstract bool get_IsMutuallyAuthenticated();

	// RVA: -1 Offset: -1 Slot: 32
	public abstract bool get_IsServer();

	// RVA: -1 Offset: -1 Slot: 33
	public abstract bool get_IsSigned();

	// RVA: 0x200D7D0 Offset: 0x200D7D0 VA: 0x200D7D0
	public bool get_LeaveInnerStreamOpen() { }

	// RVA: 0x200D7D8 Offset: 0x200D7D8 VA: 0x200D7D8 Slot: 12
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Net.Security
public enum AuthenticationLevel // TypeDefIndex: 1462
{
	// Fields
	public int value__; // 0x0
	public const AuthenticationLevel None = 0;
	public const AuthenticationLevel MutualAuthRequested = 1;
	public const AuthenticationLevel MutualAuthRequired = 2;
}

// Namespace: System.Net.Security
public class NegotiateStream : AuthenticatedStream // TypeDefIndex: 1463
{
	// Fields
	private int readTimeout; // 0x1C
	private int writeTimeout; // 0x20

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	[MonoTODOAttribute] // RVA: 0xBD34EC Offset: 0xBD34EC VA: 0xBD34EC
	public override bool CanTimeout { get; }
	public override bool CanWrite { get; }
	[MonoTODOAttribute] // RVA: 0xBD34FC Offset: 0xBD34FC VA: 0xBD34FC
	public virtual TokenImpersonationLevel ImpersonationLevel { get; }
	[MonoTODOAttribute] // RVA: 0xBD350C Offset: 0xBD350C VA: 0xBD350C
	public override bool IsAuthenticated { get; }
	[MonoTODOAttribute] // RVA: 0xBD351C Offset: 0xBD351C VA: 0xBD351C
	public override bool IsEncrypted { get; }
	[MonoTODOAttribute] // RVA: 0xBD352C Offset: 0xBD352C VA: 0xBD352C
	public override bool IsMutuallyAuthenticated { get; }
	[MonoTODOAttribute] // RVA: 0xBD353C Offset: 0xBD353C VA: 0xBD353C
	public override bool IsServer { get; }
	[MonoTODOAttribute] // RVA: 0xBD354C Offset: 0xBD354C VA: 0xBD354C
	public override bool IsSigned { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	public override int ReadTimeout { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD355C Offset: 0xBD355C VA: 0xBD355C
	public virtual IIdentity RemoteIdentity { get; }
	public override int WriteTimeout { get; set; }

	// Methods

	[MonoTODOAttribute] // RVA: 0xBD1708 Offset: 0xBD1708 VA: 0xBD1708
	// RVA: 0x230D7A8 Offset: 0x230D7A8 VA: 0x230D7A8
	public void .ctor(Stream innerStream) { }

	[MonoTODOAttribute] // RVA: 0xBD1718 Offset: 0xBD1718 VA: 0xBD1718
	// RVA: 0x230D7B4 Offset: 0x230D7B4 VA: 0x230D7B4
	public void .ctor(Stream innerStream, bool leaveStreamOpen) { }

	// RVA: 0x230D7C0 Offset: 0x230D7C0 VA: 0x230D7C0 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x230D7F8 Offset: 0x230D7F8 VA: 0x230D7F8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x230D830 Offset: 0x230D830 VA: 0x230D830 Slot: 8
	public override bool get_CanTimeout() { }

	// RVA: 0x230D898 Offset: 0x230D898 VA: 0x230D898 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x230D8D0 Offset: 0x230D8D0 VA: 0x230D8D0 Slot: 34
	public virtual TokenImpersonationLevel get_ImpersonationLevel() { }

	// RVA: 0x230D938 Offset: 0x230D938 VA: 0x230D938 Slot: 29
	public override bool get_IsAuthenticated() { }

	// RVA: 0x230D9A0 Offset: 0x230D9A0 VA: 0x230D9A0 Slot: 30
	public override bool get_IsEncrypted() { }

	// RVA: 0x230DA08 Offset: 0x230DA08 VA: 0x230DA08 Slot: 31
	public override bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x230DA70 Offset: 0x230DA70 VA: 0x230DA70 Slot: 32
	public override bool get_IsServer() { }

	// RVA: 0x230DAD8 Offset: 0x230DAD8 VA: 0x230DAD8 Slot: 33
	public override bool get_IsSigned() { }

	// RVA: 0x230DB40 Offset: 0x230DB40 VA: 0x230DB40 Slot: 9
	public override long get_Length() { }

	// RVA: 0x230DB78 Offset: 0x230DB78 VA: 0x230DB78 Slot: 10
	public override long get_Position() { }

	// RVA: 0x230DBB0 Offset: 0x230DBB0 VA: 0x230DBB0 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x230DBF0 Offset: 0x230DBF0 VA: 0x230DBF0 Slot: 14
	public override int get_ReadTimeout() { }

	// RVA: 0x230DBF8 Offset: 0x230DBF8 VA: 0x230DBF8 Slot: 15
	public override void set_ReadTimeout(int value) { }

	// RVA: 0x230DC00 Offset: 0x230DC00 VA: 0x230DC00 Slot: 35
	public virtual IIdentity get_RemoteIdentity() { }

	// RVA: 0x230DC68 Offset: 0x230DC68 VA: 0x230DC68 Slot: 16
	public override int get_WriteTimeout() { }

	// RVA: 0x230DC70 Offset: 0x230DC70 VA: 0x230DC70 Slot: 17
	public override void set_WriteTimeout(int value) { }

	[MonoTODOAttribute] // RVA: 0xBD1728 Offset: 0xBD1728 VA: 0xBD1728
	// RVA: 0x230DC78 Offset: 0x230DC78 VA: 0x230DC78 Slot: 36
	public virtual IAsyncResult BeginAuthenticateAsClient(AsyncCallback callback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1738 Offset: 0xBD1738 VA: 0xBD1738
	// RVA: 0x230DCE0 Offset: 0x230DCE0 VA: 0x230DCE0 Slot: 37
	public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1748 Offset: 0xBD1748 VA: 0xBD1748
	// RVA: 0x230DD48 Offset: 0x230DD48 VA: 0x230DD48 Slot: 38
	public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1758 Offset: 0xBD1758 VA: 0xBD1758
	// RVA: 0x230DDB0 Offset: 0x230DDB0 VA: 0x230DDB0 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1768 Offset: 0xBD1768 VA: 0xBD1768
	// RVA: 0x230DE18 Offset: 0x230DE18 VA: 0x230DE18 Slot: 39
	public virtual IAsyncResult BeginAuthenticateAsServer(AsyncCallback callback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1778 Offset: 0xBD1778 VA: 0xBD1778
	// RVA: 0x230DE80 Offset: 0x230DE80 VA: 0x230DE80 Slot: 40
	public virtual IAsyncResult BeginAuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1788 Offset: 0xBD1788 VA: 0xBD1788
	// RVA: 0x230DEE8 Offset: 0x230DEE8 VA: 0x230DEE8 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xBD1798 Offset: 0xBD1798 VA: 0xBD1798
	// RVA: 0x230DF50 Offset: 0x230DF50 VA: 0x230DF50 Slot: 41
	public virtual void AuthenticateAsClient() { }

	[MonoTODOAttribute] // RVA: 0xBD17A8 Offset: 0xBD17A8 VA: 0xBD17A8
	// RVA: 0x230DFB8 Offset: 0x230DFB8 VA: 0x230DFB8 Slot: 42
	public virtual void AuthenticateAsClient(NetworkCredential credential, string targetName) { }

	[MonoTODOAttribute] // RVA: 0xBD17B8 Offset: 0xBD17B8 VA: 0xBD17B8
	// RVA: 0x230E020 Offset: 0x230E020 VA: 0x230E020 Slot: 43
	public virtual void AuthenticateAsClient(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) { }

	[MonoTODOAttribute] // RVA: 0xBD17C8 Offset: 0xBD17C8 VA: 0xBD17C8
	// RVA: 0x230E088 Offset: 0x230E088 VA: 0x230E088 Slot: 44
	public virtual void AuthenticateAsServer() { }

	[MonoTODOAttribute] // RVA: 0xBD17D8 Offset: 0xBD17D8 VA: 0xBD17D8
	// RVA: 0x230E0F0 Offset: 0x230E0F0 VA: 0x230E0F0 Slot: 45
	public virtual void AuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) { }

	[MonoTODOAttribute] // RVA: 0xBD17E8 Offset: 0xBD17E8 VA: 0xBD17E8
	// RVA: 0x230E158 Offset: 0x230E158 VA: 0x230E158 Slot: 12
	protected override void Dispose(bool disposing) { }

	[MonoTODOAttribute] // RVA: 0xBD17F8 Offset: 0xBD17F8 VA: 0xBD17F8
	// RVA: 0x230E15C Offset: 0x230E15C VA: 0x230E15C Slot: 46
	public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xBD1808 Offset: 0xBD1808 VA: 0xBD1808
	// RVA: 0x230E1C4 Offset: 0x230E1C4 VA: 0x230E1C4 Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xBD1818 Offset: 0xBD1818 VA: 0xBD1818
	// RVA: 0x230E22C Offset: 0x230E22C VA: 0x230E22C Slot: 47
	public virtual void EndAuthenticateAsServer(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xBD1828 Offset: 0xBD1828 VA: 0xBD1828
	// RVA: 0x230E294 Offset: 0x230E294 VA: 0x230E294 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xBD1838 Offset: 0xBD1838 VA: 0xBD1838
	// RVA: 0x230E2FC Offset: 0x230E2FC VA: 0x230E2FC Slot: 18
	public override void Flush() { }

	[MonoTODOAttribute] // RVA: 0xBD1848 Offset: 0xBD1848 VA: 0xBD1848
	// RVA: 0x230E338 Offset: 0x230E338 VA: 0x230E338 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	[MonoTODOAttribute] // RVA: 0xBD1858 Offset: 0xBD1858 VA: 0xBD1858
	// RVA: 0x230E3A0 Offset: 0x230E3A0 VA: 0x230E3A0 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	[MonoTODOAttribute] // RVA: 0xBD1868 Offset: 0xBD1868 VA: 0xBD1868
	// RVA: 0x230E408 Offset: 0x230E408 VA: 0x230E408 Slot: 22
	public override void SetLength(long value) { }

	[MonoTODOAttribute] // RVA: 0xBD1878 Offset: 0xBD1878 VA: 0xBD1878
	// RVA: 0x230E470 Offset: 0x230E470 VA: 0x230E470 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
