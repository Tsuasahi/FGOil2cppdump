	private long Get(string name) { }

	// RVA: 0xF67370 Offset: 0xF67370 VA: 0xF67370 Slot: 4
	public override long get_ConnectionsAccepted() { }

	// RVA: 0xF673C0 Offset: 0xF673C0 VA: 0xF673C0 Slot: 5
	public override long get_ConnectionsInitiated() { }

	// RVA: 0xF67410 Offset: 0xF67410 VA: 0xF67410 Slot: 6
	public override long get_CumulativeConnections() { }

	// RVA: 0xF67460 Offset: 0xF67460 VA: 0xF67460 Slot: 7
	public override long get_CurrentConnections() { }

	// RVA: 0xF674B0 Offset: 0xF674B0 VA: 0xF674B0 Slot: 8
	public override long get_ErrorsReceived() { }

	// RVA: 0xF67500 Offset: 0xF67500 VA: 0xF67500 Slot: 9
	public override long get_FailedConnectionAttempts() { }

	// RVA: 0xF67550 Offset: 0xF67550 VA: 0xF67550 Slot: 10
	public override long get_MaximumConnections() { }

	// RVA: 0xF675A0 Offset: 0xF675A0 VA: 0xF675A0 Slot: 11
	public override long get_MaximumTransmissionTimeout() { }

	// RVA: 0xF675F0 Offset: 0xF675F0 VA: 0xF675F0 Slot: 12
	public override long get_MinimumTransmissionTimeout() { }

	// RVA: 0xF67640 Offset: 0xF67640 VA: 0xF67640 Slot: 13
	public override long get_ResetConnections() { }

	// RVA: 0xF67690 Offset: 0xF67690 VA: 0xF67690 Slot: 14
	public override long get_ResetsSent() { }

	// RVA: 0xF676E0 Offset: 0xF676E0 VA: 0xF676E0 Slot: 15
	public override long get_SegmentsReceived() { }

	// RVA: 0xF67730 Offset: 0xF67730 VA: 0xF67730 Slot: 16
	public override long get_SegmentsResent() { }

	// RVA: 0xF67780 Offset: 0xF67780 VA: 0xF67780 Slot: 17
	public override long get_SegmentsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32TcpStatistics : TcpStatistics // TypeDefIndex: 1437
{
	// Fields
	private Win32_MIB_TCPSTATS info; // 0x10

	// Properties
	public override long ConnectionsAccepted { get; }
	public override long ConnectionsInitiated { get; }
	public override long CumulativeConnections { get; }
	public override long CurrentConnections { get; }
	public override long ErrorsReceived { get; }
	public override long FailedConnectionAttempts { get; }
	public override long MaximumConnections { get; }
	public override long MaximumTransmissionTimeout { get; }
	public override long MinimumTransmissionTimeout { get; }
	public override long ResetConnections { get; }
	public override long ResetsSent { get; }
	public override long SegmentsReceived { get; }
	public override long SegmentsResent { get; }
	public override long SegmentsSent { get; }

	// Methods

	// RVA: 0xF72824 Offset: 0xF72824 VA: 0xF72824
	public void .ctor(Win32_MIB_TCPSTATS info) { }

	// RVA: 0xF74EC4 Offset: 0xF74EC4 VA: 0xF74EC4 Slot: 4
	public override long get_ConnectionsAccepted() { }

	// RVA: 0xF74ECC Offset: 0xF74ECC VA: 0xF74ECC Slot: 5
	public override long get_ConnectionsInitiated() { }

	// RVA: 0xF74ED4 Offset: 0xF74ED4 VA: 0xF74ED4 Slot: 6
	public override long get_CumulativeConnections() { }

	// RVA: 0xF74EDC Offset: 0xF74EDC VA: 0xF74EDC Slot: 7
	public override long get_CurrentConnections() { }

	// RVA: 0xF74EE4 Offset: 0xF74EE4 VA: 0xF74EE4 Slot: 8
	public override long get_ErrorsReceived() { }

	// RVA: 0xF74EEC Offset: 0xF74EEC VA: 0xF74EEC Slot: 9
	public override long get_FailedConnectionAttempts() { }

	// RVA: 0xF74EF4 Offset: 0xF74EF4 VA: 0xF74EF4 Slot: 10
	public override long get_MaximumConnections() { }

	// RVA: 0xF74EFC Offset: 0xF74EFC VA: 0xF74EFC Slot: 11
	public override long get_MaximumTransmissionTimeout() { }

	// RVA: 0xF74F04 Offset: 0xF74F04 VA: 0xF74F04 Slot: 12
	public override long get_MinimumTransmissionTimeout() { }

	// RVA: 0xF74F0C Offset: 0xF74F0C VA: 0xF74F0C Slot: 13
	public override long get_ResetConnections() { }

	// RVA: 0xF74F14 Offset: 0xF74F14 VA: 0xF74F14 Slot: 14
	public override long get_ResetsSent() { }

	// RVA: 0xF74F1C Offset: 0xF74F1C VA: 0xF74F1C Slot: 15
	public override long get_SegmentsReceived() { }

	// RVA: 0xF74F24 Offset: 0xF74F24 VA: 0xF74F24 Slot: 16
	public override long get_SegmentsResent() { }

	// RVA: 0xF74F2C Offset: 0xF74F2C VA: 0xF74F2C Slot: 17
	public override long get_SegmentsSent() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_TCPSTATS // TypeDefIndex: 1438
{
	// Fields
	public uint RtoAlgorithm; // 0x0
	public uint RtoMin; // 0x4
	public uint RtoMax; // 0x8
	public uint MaxConn; // 0xC
	public uint ActiveOpens; // 0x10
	public uint PassiveOpens; // 0x14
	public uint AttemptFails; // 0x18
	public uint EstabResets; // 0x1C
	public uint CurrEstab; // 0x20
	public uint InSegs; // 0x24
	public uint OutSegs; // 0x28
	public uint RetransSegs; // 0x2C
	public uint InErrs; // 0x30
	public uint OutRsts; // 0x34
	public uint NumConns; // 0x38
}

// Namespace: System.Net.NetworkInformation
public abstract class UdpStatistics // TypeDefIndex: 1439
{
	// Properties
	public abstract long DatagramsReceived { get; }
	public abstract long DatagramsSent { get; }
	public abstract long IncomingDatagramsDiscarded { get; }
	public abstract long IncomingDatagramsWithErrors { get; }
	public abstract int UdpListeners { get; }

	// Methods

	// RVA: 0xF677D0 Offset: 0xF677D0 VA: 0xF677D0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract long get_DatagramsReceived();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract long get_DatagramsSent();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_IncomingDatagramsDiscarded();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_IncomingDatagramsWithErrors();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_UdpListeners();
}

// Namespace: System.Net.NetworkInformation
internal class MibUdpStatistics : UdpStatistics // TypeDefIndex: 1440
{
	// Fields
	private StringDictionary dic; // 0x10

	// Properties
	public override long DatagramsReceived { get; }
	public override long DatagramsSent { get; }
	public override long IncomingDatagramsDiscarded { get; }
	public override long IncomingDatagramsWithErrors { get; }
	public override int UdpListeners { get; }

	// Methods

	// RVA: 0xF65310 Offset: 0xF65310 VA: 0xF65310
	public void .ctor(StringDictionary dic) { }

	// RVA: 0xF677D8 Offset: 0xF677D8 VA: 0xF677D8
	private long Get(string name) { }

	// RVA: 0xF678BC Offset: 0xF678BC VA: 0xF678BC Slot: 4
	public override long get_DatagramsReceived() { }

	// RVA: 0xF6790C Offset: 0xF6790C VA: 0xF6790C Slot: 5
	public override long get_DatagramsSent() { }

	// RVA: 0xF6795C Offset: 0xF6795C VA: 0xF6795C Slot: 6
	public override long get_IncomingDatagramsDiscarded() { }

	// RVA: 0xF679AC Offset: 0xF679AC VA: 0xF679AC Slot: 7
	public override long get_IncomingDatagramsWithErrors() { }

	// RVA: 0xF679FC Offset: 0xF679FC VA: 0xF679FC Slot: 8
	public override int get_UdpListeners() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32UdpStatistics : UdpStatistics // TypeDefIndex: 1441
{
	// Fields
	private Win32_MIB_UDPSTATS info; // 0x10

	// Properties
	public override long DatagramsReceived { get; }
	public override long DatagramsSent { get; }
	public override long IncomingDatagramsDiscarded { get; }
	public override long IncomingDatagramsWithErrors { get; }
	public override int UdpListeners { get; }

	// Methods

	// RVA: 0xF72B20 Offset: 0xF72B20 VA: 0xF72B20
	public void .ctor(Win32_MIB_UDPSTATS info) { }

	// RVA: 0xF74F34 Offset: 0xF74F34 VA: 0xF74F34 Slot: 4
	public override long get_DatagramsReceived() { }

	// RVA: 0xF74F3C Offset: 0xF74F3C VA: 0xF74F3C Slot: 5
	public override long get_DatagramsSent() { }

	// RVA: 0xF74F44 Offset: 0xF74F44 VA: 0xF74F44 Slot: 6
	public override long get_IncomingDatagramsDiscarded() { }

	// RVA: 0xF74F4C Offset: 0xF74F4C VA: 0xF74F4C Slot: 7
	public override long get_IncomingDatagramsWithErrors() { }

	// RVA: 0xF74F54 Offset: 0xF74F54 VA: 0xF74F54 Slot: 8
	public override int get_UdpListeners() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_UDPSTATS // TypeDefIndex: 1442
{
	// Fields
	public uint InDatagrams; // 0x0
	public uint NoPorts; // 0x4
	public uint InErrors; // 0x8
	public uint OutDatagrams; // 0xC
	public int NumAddrs; // 0x10
}

// Namespace: System.Net.NetworkInformation
public abstract class UnicastIPAddressInformation : IPAddressInformation // TypeDefIndex: 1443
{
	// Properties
	public abstract long AddressPreferredLifetime { get; }
	public abstract long AddressValidLifetime { get; }
	public abstract long DhcpLeaseLifetime { get; }
	public abstract DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
	public abstract IPAddress IPv4Mask { get; }
	public abstract PrefixOrigin PrefixOrigin { get; }
	public abstract SuffixOrigin SuffixOrigin { get; }

	// Methods

	// RVA: 0xF62394 Offset: 0xF62394 VA: 0xF62394
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_AddressPreferredLifetime();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract long get_AddressValidLifetime();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_DhcpLeaseLifetime();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract DuplicateAddressDetectionState get_DuplicateAddressDetectionState();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract IPAddress get_IPv4Mask();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract PrefixOrigin get_PrefixOrigin();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract SuffixOrigin get_SuffixOrigin();
}

// Namespace: System.Net.NetworkInformation
internal class Win32UnicastIPAddressInformation : UnicastIPAddressInformation // TypeDefIndex: 1444
{
	// Fields
	private int if_index; // 0x10
	private Win32_IP_ADAPTER_UNICAST_ADDRESS info; // 0x18

	// Properties
	public override IPAddress Address { get; }
	public override bool IsDnsEligible { get; }
	public override bool IsTransient { get; }
	public override long AddressPreferredLifetime { get; }
	public override long AddressValidLifetime { get; }
	public override long DhcpLeaseLifetime { get; }
	public override DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
	public override IPAddress IPv4Mask { get; }
	public override PrefixOrigin PrefixOrigin { get; }
	public override SuffixOrigin SuffixOrigin { get; }

	// Methods

	// RVA: 0xF6E590 Offset: 0xF6E590 VA: 0xF6E590
	public void .ctor(int ifIndex, Win32_IP_ADAPTER_UNICAST_ADDRESS info) { }

	// RVA: 0xF74F5C Offset: 0xF74F5C VA: 0xF74F5C Slot: 4
	public override IPAddress get_Address() { }

	// RVA: 0xF74F64 Offset: 0xF74F64 VA: 0xF74F64 Slot: 5
	public override bool get_IsDnsEligible() { }

	// RVA: 0xF74F70 Offset: 0xF74F70 VA: 0xF74F70 Slot: 6
	public override bool get_IsTransient() { }

	// RVA: 0xF74F7C Offset: 0xF74F7C VA: 0xF74F7C Slot: 7
	public override long get_AddressPreferredLifetime() { }

	// RVA: 0xF74F84 Offset: 0xF74F84 VA: 0xF74F84 Slot: 8
	public override long get_AddressValidLifetime() { }

	// RVA: 0xF74F8C Offset: 0xF74F8C VA: 0xF74F8C Slot: 9
	public override long get_DhcpLeaseLifetime() { }

	// RVA: 0xF74F94 Offset: 0xF74F94 VA: 0xF74F94 Slot: 10
	public override DuplicateAddressDetectionState get_DuplicateAddressDetectionState() { }

	// RVA: 0xF74F9C Offset: 0xF74F9C VA: 0xF74F9C Slot: 11
	public override IPAddress get_IPv4Mask() { }

	// RVA: 0xF75228 Offset: 0xF75228 VA: 0xF75228 Slot: 12
	public override PrefixOrigin get_PrefixOrigin() { }

	// RVA: 0xF75230 Offset: 0xF75230 VA: 0xF75230 Slot: 13
	public override SuffixOrigin get_SuffixOrigin() { }
}

// Namespace: System.Net.NetworkInformation
internal class LinuxUnicastIPAddressInformation : UnicastIPAddressInformation // TypeDefIndex: 1445
{
	// Fields
	private IPAddress address; // 0x10

	// Properties
	public override IPAddress Address { get; }
	public override bool IsDnsEligible { get; }
	[MonoTODOAttribute] // RVA: 0xC3F5DC Offset: 0xC3F5DC VA: 0xC3F5DC
	public override bool IsTransient { get; }
	public override long AddressPreferredLifetime { get; }
	public override long AddressValidLifetime { get; }
	public override long DhcpLeaseLifetime { get; }
	public override DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
	public override IPAddress IPv4Mask { get; }
	public override PrefixOrigin PrefixOrigin { get; }
	public override SuffixOrigin SuffixOrigin { get; }

	// Methods

	// RVA: 0xF62368 Offset: 0xF62368 VA: 0xF62368
	public void .ctor(IPAddress address) { }

	// RVA: 0xF6239C Offset: 0xF6239C VA: 0xF6239C Slot: 4
	public override IPAddress get_Address() { }

	// RVA: 0xF623A4 Offset: 0xF623A4 VA: 0xF623A4 Slot: 5
	public override bool get_IsDnsEligible() { }

	// RVA: 0xF62438 Offset: 0xF62438 VA: 0xF62438 Slot: 6
	public override bool get_IsTransient() { }

	// RVA: 0xF62440 Offset: 0xF62440 VA: 0xF62440 Slot: 7
	public override long get_AddressPreferredLifetime() { }

	// RVA: 0xF624A8 Offset: 0xF624A8 VA: 0xF624A8 Slot: 8
	public override long get_AddressValidLifetime() { }

	// RVA: 0xF62510 Offset: 0xF62510 VA: 0xF62510 Slot: 9
	public override long get_DhcpLeaseLifetime() { }

	// RVA: 0xF62578 Offset: 0xF62578 VA: 0xF62578 Slot: 10
	public override DuplicateAddressDetectionState get_DuplicateAddressDetectionState() { }

	// RVA: 0xF625E0 Offset: 0xF625E0 VA: 0xF625E0 Slot: 11
	public override IPAddress get_IPv4Mask() { }

	// RVA: 0xF62648 Offset: 0xF62648 VA: 0xF62648 Slot: 12
	public override PrefixOrigin get_PrefixOrigin() { }

	// RVA: 0xF626B0 Offset: 0xF626B0 VA: 0xF626B0 Slot: 13
	public override SuffixOrigin get_SuffixOrigin() { }
}

// Namespace: System.Net.NetworkInformation
[DefaultMemberAttribute] // RVA: 0xC3C834 Offset: 0xC3C834 VA: 0xC3C834
public class UnicastIPAddressInformationCollection : IEnumerable, IEnumerable<UnicastIPAddressInformation>, ICollection<UnicastIPAddressInformation> // TypeDefIndex: 1446
{
	// Fields
	private List<UnicastIPAddressInformation> list; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsReadOnly { get; }
	public virtual UnicastIPAddressInformation Item { get; }

	// Methods

	// RVA: 0xF6DD64 Offset: 0xF6DD64 VA: 0xF6DD64
	protected internal void .ctor() { }

	// RVA: 0xF6DDD4 Offset: 0xF6DDD4 VA: 0xF6DDD4 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xF6DE68 Offset: 0xF6DE68 VA: 0xF6DE68 Slot: 13
	public virtual void Add(UnicastIPAddressInformation address) { }

	// RVA: 0xF6DF34 Offset: 0xF6DF34 VA: 0xF6DF34 Slot: 14
	public virtual void Clear() { }

	// RVA: 0xF6DFF0 Offset: 0xF6DFF0 VA: 0xF6DFF0 Slot: 15
	public virtual bool Contains(UnicastIPAddressInformation address) { }

	// RVA: 0xF6E060 Offset: 0xF6E060 VA: 0xF6E060 Slot: 16
	public virtual void CopyTo(UnicastIPAddressInformation[] array, int offset) { }

	// RVA: 0xF6E0D8 Offset: 0xF6E0D8 VA: 0xF6E0D8 Slot: 17
	public virtual IEnumerator<UnicastIPAddressInformation> GetEnumerator() { }

	// RVA: 0xF6E18C Offset: 0xF6E18C VA: 0xF6E18C Slot: 18
	public virtual bool Remove(UnicastIPAddressInformation address) { }

	// RVA: 0xF6E258 Offset: 0xF6E258 VA: 0xF6E258 Slot: 19
	public virtual int get_Count() { }

	// RVA: 0xF6E2B8 Offset: 0xF6E2B8 VA: 0xF6E2B8 Slot: 20
	public virtual bool get_IsReadOnly() { }

	// RVA: 0xF6E2C0 Offset: 0xF6E2C0 VA: 0xF6E2C0 Slot: 21
	public virtual UnicastIPAddressInformation get_Item(int index) { }
}

// Namespace: System.Net.NetworkInformation
internal class UnicastIPAddressInformationImplCollection : UnicastIPAddressInformationCollection // TypeDefIndex: 1447
{
	// Fields
	public static readonly UnicastIPAddressInformationImplCollection Empty; // 0x0
	private bool is_readonly; // 0x18

	// Properties
	public override bool IsReadOnly { get; }

	// Methods

	// RVA: 0xF6E330 Offset: 0xF6E330 VA: 0xF6E330
	private void .ctor(bool isReadOnly) { }

	// RVA: 0xF6E35C Offset: 0xF6E35C VA: 0xF6E35C
	private static void .cctor() { }

	// RVA: 0xF6E3C4 Offset: 0xF6E3C4 VA: 0xF6E3C4 Slot: 20
	public override bool get_IsReadOnly() { }

	// RVA: 0xF6E3CC Offset: 0xF6E3CC VA: 0xF6E3CC
	public static UnicastIPAddressInformationCollection Win32FromUnicast(int ifIndex, IntPtr ptr) { }

	// RVA: 0xF6E5E0 Offset: 0xF6E5E0 VA: 0xF6E5E0
	public static UnicastIPAddressInformationCollection LinuxFromList(List<IPAddress> addresses) { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32_FIXED_INFO // TypeDefIndex: 1448
{
	// Fields
	private const int MAX_HOSTNAME_LEN = 128;
	private const int MAX_DOMAIN_NAME_LEN = 128;
	private const int MAX_SCOPE_ID_LEN = 256;
	private static Win32_FIXED_INFO fixed_info; // 0x0
	public string HostName; // 0x10
	public string DomainName; // 0x18
	public IntPtr CurrentDnsServer; // 0x20
	public Win32_IP_ADDR_STRING DnsServerList; // 0x28
	public NetBiosNodeType NodeType; // 0x48
	public string ScopeId; // 0x50
	public uint EnableRouting; // 0x58
	public uint EnableProxy; // 0x5C
	public uint EnableDns; // 0x60

	// Properties
	public static Win32_FIXED_INFO Instance { get; }

	// Methods

	// RVA: 0xF75238 Offset: 0xF75238 VA: 0xF75238
	public void .ctor() { }

	// RVA: 0xF75240 Offset: 0xF75240 VA: 0xF75240
	private static extern int GetNetworkParams(byte[] bytes, ref int size) { }

	// RVA: 0xF72C80 Offset: 0xF72C80 VA: 0xF72C80
	public static Win32_FIXED_INFO get_Instance() { }

	// RVA: 0xF752FC Offset: 0xF752FC VA: 0xF752FC
	private static Win32_FIXED_INFO GetInstance() { }
}

// Namespace: System.Net.NetworkInformation
internal struct AlignmentUnion // TypeDefIndex: 1449
{
	// Fields
	public ulong Alignment; // 0x0
	public int Length; // 0x0
	public int IfIndex; // 0x4
}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_ADAPTER_ADDRESSES // TypeDefIndex: 1450
{
	// Fields
	private const int MAX_ADAPTER_ADDRESS_LENGTH = 8;
	private const int IP_ADAPTER_DDNS_ENABLED = 1;
	private const int IP_ADAPTER_RECEIVE_ONLY = 8;
	private const int IP_ADAPTER_NO_MULTICAST = 16;
	public AlignmentUnion Alignment; // 0x10
	public IntPtr Next; // 0x18
	public string AdapterName; // 0x20
	public IntPtr FirstUnicastAddress; // 0x28
	public IntPtr FirstAnycastAddress; // 0x30
	public IntPtr FirstMulticastAddress; // 0x38
	public IntPtr FirstDnsServerAddress; // 0x40
	public string DnsSuffix; // 0x48
	public string Description; // 0x50
	public string FriendlyName; // 0x58
	public byte[] PhysicalAddress; // 0x60
	public uint PhysicalAddressLength; // 0x68
	public uint Flags; // 0x6C
	public uint Mtu; // 0x70
	public NetworkInterfaceType IfType; // 0x74
	public OperationalStatus OperStatus; // 0x78
	public int Ipv6IfIndex; // 0x7C
	public uint[] ZoneIndices; // 0x80

	// Properties
	public bool DdnsEnabled { get; }
	public bool IsReceiveOnly { get; }
	public bool NoMulticast { get; }

	// Methods

	// RVA: 0xF74C40 Offset: 0xF74C40 VA: 0xF74C40
	public void .ctor() { }

	// RVA: 0xF73654 Offset: 0xF73654 VA: 0xF73654
	public bool get_DdnsEnabled() { }

	// RVA: 0xF74DD8 Offset: 0xF74DD8 VA: 0xF74DD8
	public bool get_IsReceiveOnly() { }

	// RVA: 0xF74EB8 Offset: 0xF74EB8 VA: 0xF74EB8
	public bool get_NoMulticast() { }
}

// Namespace: System.Net.NetworkInformation
internal class Win32_IP_ADAPTER_INFO // TypeDefIndex: 1451
{
	// Fields
	private const int MAX_ADAPTER_NAME_LENGTH = 256;
	private const int MAX_ADAPTER_DESCRIPTION_LENGTH = 128;
	private const int MAX_ADAPTER_ADDRESS_LENGTH = 8;
	public IntPtr Next; // 0x10
	public int ComboIndex; // 0x18
	public string AdapterName; // 0x20
	public string Description; // 0x28
	public uint AddressLength; // 0x30
	public byte[] Address; // 0x38
	public uint Index; // 0x40
	public uint Type; // 0x44
	public uint DhcpEnabled; // 0x48
	public IntPtr CurrentIpAddress; // 0x50
	public Win32_IP_ADDR_STRING IpAddressList; // 0x58
	public Win32_IP_ADDR_STRING GatewayList; // 0x78
	public Win32_IP_ADDR_STRING DhcpServer; // 0x98
	public bool HaveWins; // 0xB8
	public Win32_IP_ADDR_STRING PrimaryWinsServer; // 0xC0
	public Win32_IP_ADDR_STRING SecondaryWinsServer; // 0xE0
	public long LeaseObtained; // 0x100
	public long LeaseExpires; // 0x108

	// Methods

	// RVA: 0xF74C38 Offset: 0xF74C38 VA: 0xF74C38
	public void .ctor() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_MIB_IFROW // TypeDefIndex: 1452
{
	// Fields
	private const int MAX_INTERFACE_NAME_LEN = 256;
	private const int MAXLEN_PHYSADDR = 8;
	private const int MAXLEN_IFDESCR = 256;
	public char[] Name; // 0x0
	public int Index; // 0x8
	public NetworkInterfaceType Type; // 0xC
	public int Mtu; // 0x10
	public uint Speed; // 0x14
	public int PhysAddrLen; // 0x18
	public byte[] PhysAddr; // 0x20
	public uint AdminStatus; // 0x28
	public uint OperStatus; // 0x2C
	public uint LastChange; // 0x30
	public int InOctets; // 0x34
	public int InUcastPkts; // 0x38
	public int InNUcastPkts; // 0x3C
	public int InDiscards; // 0x40
	public int InErrors; // 0x44
	public int InUnknownProtos; // 0x48
	public int OutOctets; // 0x4C
	public int OutUcastPkts; // 0x50
	public int OutNUcastPkts; // 0x54
	public int OutDiscards; // 0x58
	public int OutErrors; // 0x5C
	public int OutQLen; // 0x60
	public int DescrLen; // 0x64
	public byte[] Descr; // 0x68
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADDR_STRING // TypeDefIndex: 1453
{
	// Fields
	public IntPtr Next; // 0x0
	public string IpAddress; // 0x8
	public string IpMask; // 0x10
	public uint Context; // 0x18
}

// Namespace: System.Net.NetworkInformation
internal struct Win32LengthFlagsUnion // TypeDefIndex: 1454
{
	// Fields
	private const int IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = 1;
	private const int IP_ADAPTER_ADDRESS_TRANSIENT = 2;
	public uint Length; // 0x0
	public uint Flags; // 0x4

	// Properties
	public bool IsDnsEligible { get; }
	public bool IsTransient { get; }

	// Methods

	// RVA: 0xBB8484 Offset: 0xBB8484 VA: 0xBB8484
	public bool get_IsDnsEligible() { }

	// RVA: 0xBB8490 Offset: 0xBB8490 VA: 0xBB8490
	public bool get_IsTransient() { }
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_ANYCAST_ADDRESS // TypeDefIndex: 1455
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_DNS_SERVER_ADDRESS // TypeDefIndex: 1456
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_MULTICAST_ADDRESS // TypeDefIndex: 1457
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_IP_ADAPTER_UNICAST_ADDRESS // TypeDefIndex: 1458
{
	// Fields
	public Win32LengthFlagsUnion LengthFlags; // 0x0
	public IntPtr Next; // 0x8
	public Win32_SOCKET_ADDRESS Address; // 0x10
	public PrefixOrigin PrefixOrigin; // 0x20
	public SuffixOrigin SuffixOrigin; // 0x24
	public DuplicateAddressDetectionState DadState; // 0x28
	public uint ValidLifetime; // 0x2C
	public uint PreferredLifetime; // 0x30
	public uint LeaseLifetime; // 0x34
	public byte OnLinkPrefixLength; // 0x38
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_SOCKADDR // TypeDefIndex: 1459
{
	// Fields
	public ushort AddressFamily; // 0x0
	public byte[] AddressData; // 0x8
}

// Namespace: System.Net.NetworkInformation
internal struct Win32_SOCKET_ADDRESS // TypeDefIndex: 1460
{
	// Fields
	private const int AF_INET6 = 23;
	public IntPtr Sockaddr; // 0x0
	public int SockaddrLength; // 0x8

	// Methods

	// RVA: 0xBB9380 Offset: 0xBB9380 VA: 0xBB9380
	public IPAddress GetIPAddress() { }
}

// Namespace: System.Net.Security
public abstract class AuthenticatedStream : Stream // TypeDefIndex: 1461
{
	// Fields
	private Stream innerStream; // 0x10
	private bool leaveStreamOpen; // 0x18

	// Properties
	protected Stream InnerStream { get; }
	public abstract bool IsAuthenticated { get; }
	public abstract bool IsEncrypted { get; }
	public abstract bool IsMutuallyAuthenticated { get; }
	public abstract bool IsServer { get; }
	public abstract bool IsSigned { get; }
	public bool LeaveInnerStreamOpen { get; }

	// Methods

	// RVA: 0xF77BC0 Offset: 0xF77BC0 VA: 0xF77BC0
	protected void .ctor(Stream innerStream, bool leaveInnerStreamOpen) { }

	// RVA: 0xF77C48 Offset: 0xF77C48 VA: 0xF77C48
	protected Stream get_InnerStream() { }

	// RVA: -1 Offset: -1 Slot: 29
	public abstract bool get_IsAuthenticated();

	// RVA: -1 Offset: -1 Slot: 30
	public abstract bool get_IsEncrypted();

	// RVA: -1 Offset: -1 Slot: 31
	public abstract bool get_IsMutuallyAuthenticated();

	// RVA: -1 Offset: -1 Slot: 32
	public abstract bool get_IsServer();

	// RVA: -1 Offset: -1 Slot: 33
	public abstract bool get_IsSigned();

	// RVA: 0xF77C50 Offset: 0xF77C50 VA: 0xF77C50
	public bool get_LeaveInnerStreamOpen() { }

	// RVA: 0xF77C58 Offset: 0xF77C58 VA: 0xF77C58 Slot: 12
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Net.Security
public enum AuthenticationLevel // TypeDefIndex: 1462
{
	// Fields
	public int value__; // 0x0
	public const AuthenticationLevel None = 0;
	public const AuthenticationLevel MutualAuthRequested = 1;
	public const AuthenticationLevel MutualAuthRequired = 2;
}

// Namespace: System.Net.Security
public class NegotiateStream : AuthenticatedStream // TypeDefIndex: 1463
{
	// Fields
	private int readTimeout; // 0x1C
	private int writeTimeout; // 0x20

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	[MonoTODOAttribute] // RVA: 0xC3F614 Offset: 0xC3F614 VA: 0xC3F614
	public override bool CanTimeout { get; }
	public override bool CanWrite { get; }
	[MonoTODOAttribute] // RVA: 0xC3F624 Offset: 0xC3F624 VA: 0xC3F624
	public virtual TokenImpersonationLevel ImpersonationLevel { get; }
	[MonoTODOAttribute] // RVA: 0xC3F634 Offset: 0xC3F634 VA: 0xC3F634
	public override bool IsAuthenticated { get; }
	[MonoTODOAttribute] // RVA: 0xC3F644 Offset: 0xC3F644 VA: 0xC3F644
	public override bool IsEncrypted { get; }
	[MonoTODOAttribute] // RVA: 0xC3F654 Offset: 0xC3F654 VA: 0xC3F654
	public override bool IsMutuallyAuthenticated { get; }
	[MonoTODOAttribute] // RVA: 0xC3F664 Offset: 0xC3F664 VA: 0xC3F664
	public override bool IsServer { get; }
	[MonoTODOAttribute] // RVA: 0xC3F674 Offset: 0xC3F674 VA: 0xC3F674
	public override bool IsSigned { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	public override int ReadTimeout { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F684 Offset: 0xC3F684 VA: 0xC3F684
	public virtual IIdentity RemoteIdentity { get; }
	public override int WriteTimeout { get; set; }

	// Methods

	[MonoTODOAttribute] // RVA: 0xC3D830 Offset: 0xC3D830 VA: 0xC3D830
	// RVA: 0x11366B0 Offset: 0x11366B0 VA: 0x11366B0
	public void .ctor(Stream innerStream) { }

	[MonoTODOAttribute] // RVA: 0xC3D840 Offset: 0xC3D840 VA: 0xC3D840
	// RVA: 0x11366BC Offset: 0x11366BC VA: 0x11366BC
	public void .ctor(Stream innerStream, bool leaveStreamOpen) { }

	// RVA: 0x11366C8 Offset: 0x11366C8 VA: 0x11366C8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1136700 Offset: 0x1136700 VA: 0x1136700 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1136738 Offset: 0x1136738 VA: 0x1136738 Slot: 8
	public override bool get_CanTimeout() { }

	// RVA: 0x11367A0 Offset: 0x11367A0 VA: 0x11367A0 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x11367D8 Offset: 0x11367D8 VA: 0x11367D8 Slot: 34
	public virtual TokenImpersonationLevel get_ImpersonationLevel() { }

	// RVA: 0x1136840 Offset: 0x1136840 VA: 0x1136840 Slot: 29
	public override bool get_IsAuthenticated() { }

	// RVA: 0x11368A8 Offset: 0x11368A8 VA: 0x11368A8 Slot: 30
	public override bool get_IsEncrypted() { }

	// RVA: 0x1136910 Offset: 0x1136910 VA: 0x1136910 Slot: 31
	public override bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x1136978 Offset: 0x1136978 VA: 0x1136978 Slot: 32
	public override bool get_IsServer() { }

	// RVA: 0x11369E0 Offset: 0x11369E0 VA: 0x11369E0 Slot: 33
	public override bool get_IsSigned() { }

	// RVA: 0x1136A48 Offset: 0x1136A48 VA: 0x1136A48 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1136A80 Offset: 0x1136A80 VA: 0x1136A80 Slot: 10
	public override long get_Position() { }

	// RVA: 0x1136AB8 Offset: 0x1136AB8 VA: 0x1136AB8 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1136AF8 Offset: 0x1136AF8 VA: 0x1136AF8 Slot: 14
	public override int get_ReadTimeout() { }

	// RVA: 0x1136B00 Offset: 0x1136B00 VA: 0x1136B00 Slot: 15
	public override void set_ReadTimeout(int value) { }

	// RVA: 0x1136B08 Offset: 0x1136B08 VA: 0x1136B08 Slot: 35
	public virtual IIdentity get_RemoteIdentity() { }

	// RVA: 0x1136B70 Offset: 0x1136B70 VA: 0x1136B70 Slot: 16
	public override int get_WriteTimeout() { }

	// RVA: 0x1136B78 Offset: 0x1136B78 VA: 0x1136B78 Slot: 17
	public override void set_WriteTimeout(int value) { }

	[MonoTODOAttribute] // RVA: 0xC3D850 Offset: 0xC3D850 VA: 0xC3D850
	// RVA: 0x1136B80 Offset: 0x1136B80 VA: 0x1136B80 Slot: 36
	public virtual IAsyncResult BeginAuthenticateAsClient(AsyncCallback callback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D860 Offset: 0xC3D860 VA: 0xC3D860
	// RVA: 0x1136BE8 Offset: 0x1136BE8 VA: 0x1136BE8 Slot: 37
	public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D870 Offset: 0xC3D870 VA: 0xC3D870
	// RVA: 0x1136C50 Offset: 0x1136C50 VA: 0x1136C50 Slot: 38
	public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D880 Offset: 0xC3D880 VA: 0xC3D880
	// RVA: 0x1136CB8 Offset: 0x1136CB8 VA: 0x1136CB8 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D890 Offset: 0xC3D890 VA: 0xC3D890
	// RVA: 0x1136D20 Offset: 0x1136D20 VA: 0x1136D20 Slot: 39
	public virtual IAsyncResult BeginAuthenticateAsServer(AsyncCallback callback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D8A0 Offset: 0xC3D8A0 VA: 0xC3D8A0
	// RVA: 0x1136D88 Offset: 0x1136D88 VA: 0x1136D88 Slot: 40
	public virtual IAsyncResult BeginAuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D8B0 Offset: 0xC3D8B0 VA: 0xC3D8B0
	// RVA: 0x1136DF0 Offset: 0x1136DF0 VA: 0x1136DF0 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	[MonoTODOAttribute] // RVA: 0xC3D8C0 Offset: 0xC3D8C0 VA: 0xC3D8C0
	// RVA: 0x1136E58 Offset: 0x1136E58 VA: 0x1136E58 Slot: 41
	public virtual void AuthenticateAsClient() { }

	[MonoTODOAttribute] // RVA: 0xC3D8D0 Offset: 0xC3D8D0 VA: 0xC3D8D0
	// RVA: 0x1136EC0 Offset: 0x1136EC0 VA: 0x1136EC0 Slot: 42
	public virtual void AuthenticateAsClient(NetworkCredential credential, string targetName) { }

	[MonoTODOAttribute] // RVA: 0xC3D8E0 Offset: 0xC3D8E0 VA: 0xC3D8E0
	// RVA: 0x1136F28 Offset: 0x1136F28 VA: 0x1136F28 Slot: 43
	public virtual void AuthenticateAsClient(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) { }

	[MonoTODOAttribute] // RVA: 0xC3D8F0 Offset: 0xC3D8F0 VA: 0xC3D8F0
	// RVA: 0x1136F90 Offset: 0x1136F90 VA: 0x1136F90 Slot: 44
	public virtual void AuthenticateAsServer() { }

	[MonoTODOAttribute] // RVA: 0xC3D900 Offset: 0xC3D900 VA: 0xC3D900
	// RVA: 0x1136FF8 Offset: 0x1136FF8 VA: 0x1136FF8 Slot: 45
	public virtual void AuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel) { }

	[MonoTODOAttribute] // RVA: 0xC3D910 Offset: 0xC3D910 VA: 0xC3D910
	// RVA: 0x1137060 Offset: 0x1137060 VA: 0x1137060 Slot: 12
	protected override void Dispose(bool disposing) { }

	[MonoTODOAttribute] // RVA: 0xC3D920 Offset: 0xC3D920 VA: 0xC3D920
	// RVA: 0x1137064 Offset: 0x1137064 VA: 0x1137064 Slot: 46
	public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xC3D930 Offset: 0xC3D930 VA: 0xC3D930
	// RVA: 0x11370CC Offset: 0x11370CC VA: 0x11370CC Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xC3D940 Offset: 0xC3D940 VA: 0xC3D940
	// RVA: 0x1137134 Offset: 0x1137134 VA: 0x1137134 Slot: 47
	public virtual void EndAuthenticateAsServer(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xC3D950 Offset: 0xC3D950 VA: 0xC3D950
	// RVA: 0x113719C Offset: 0x113719C VA: 0x113719C Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	[MonoTODOAttribute] // RVA: 0xC3D960 Offset: 0xC3D960 VA: 0xC3D960
	// RVA: 0x1137204 Offset: 0x1137204 VA: 0x1137204 Slot: 18
	public override void Flush() { }

	[MonoTODOAttribute] // RVA: 0xC3D970 Offset: 0xC3D970 VA: 0xC3D970
	// RVA: 0x1137240 Offset: 0x1137240 VA: 0x1137240 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	[MonoTODOAttribute] // RVA: 0xC3D980 Offset: 0xC3D980 VA: 0xC3D980
	// RVA: 0x11372A8 Offset: 0x11372A8 VA: 0x11372A8 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	[MonoTODOAttribute] // RVA: 0xC3D990 Offset: 0xC3D990 VA: 0xC3D990
	// RVA: 0x1137310 Offset: 0x1137310 VA: 0x1137310 Slot: 22
	public override void SetLength(long value) { }

	[MonoTODOAttribute] // RVA: 0xC3D9A0 Offset: 0xC3D9A0 VA: 0xC3D9A0
	// RVA: 0x1137378 Offset: 0x1137378 VA: 0x1137378 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: System.Net.Security
public enum ProtectionLevel // TypeDefIndex: 1464
{
	// Fields
	public int value__; // 0x0
	public const ProtectionLevel None = 0;
	public const ProtectionLevel Sign = 1;
	public const ProtectionLevel EncryptAndSign = 2;
}

// Namespace: System.Net.Security
[FlagsAttribute] // RVA: 0xC3C86C Offset: 0xC3C86C VA: 0xC3C86C
public enum SslPolicyErrors // TypeDefIndex: 1465
{
	// Fields
	public int value__; // 0x0
	public const SslPolicyErrors None = 0;
	public const SslPolicyErrors RemoteCertificateNotAvailable = 1;
	public const SslPolicyErrors RemoteCertificateNameMismatch = 2;
	public const SslPolicyErrors RemoteCertificateChainErrors = 4;
}

// Namespace: System.Net.Security
[MonoTODOAttribute] // RVA: 0xC3C87C Offset: 0xC3C87C VA: 0xC3C87C
public class SslStream : AuthenticatedStream // TypeDefIndex: 1466
{
	// Fields
	private SslStreamBase ssl_stream; // 0x20
	private RemoteCertificateValidationCallback validation_callback; // 0x28
	private LocalCertificateSelectionCallback selection_callback; // 0x30

