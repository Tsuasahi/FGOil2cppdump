	private static readonly Vector2 upVector; // 0x10
	private static readonly Vector2 downVector; // 0x18
	private static readonly Vector2 leftVector; // 0x20
	private static readonly Vector2 rightVector; // 0x28
	private static readonly Vector2 positiveInfinityVector; // 0x30
	private static readonly Vector2 negativeInfinityVector; // 0x38
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;

	// Properties
	public float Item { get; set; }
	public Vector2 normalized { get; }
	public float magnitude { get; }
	public float sqrMagnitude { get; }
	public static Vector2 zero { get; }
	public static Vector2 one { get; }
	public static Vector2 up { get; }
	public static Vector2 right { get; }

	// Methods

	// RVA: 0xD6696C Offset: 0xD6696C VA: 0xD6696C
	public void .ctor(float x, float y) { }

	// RVA: 0xD66974 Offset: 0xD66974 VA: 0xD66974
	public float get_Item(int index) { }

	// RVA: 0xD6697C Offset: 0xD6697C VA: 0xD6697C
	public void set_Item(int index, float value) { }

	// RVA: 0xD66984 Offset: 0xD66984 VA: 0xD66984
	public void Set(float newX, float newY) { }

	// RVA: 0x217579C Offset: 0x217579C VA: 0x217579C
	public static Vector2 Lerp(Vector2 a, Vector2 b, float t) { }

	// RVA: 0x2175848 Offset: 0x2175848 VA: 0x2175848
	public static Vector2 MoveTowards(Vector2 current, Vector2 target, float maxDistanceDelta) { }

	// RVA: 0x2175A04 Offset: 0x2175A04 VA: 0x2175A04
	public static Vector2 Scale(Vector2 a, Vector2 b) { }

	// RVA: 0xD6698C Offset: 0xD6698C VA: 0xD6698C
	public void Normalize() { }

	// RVA: 0xD66994 Offset: 0xD66994 VA: 0xD66994
	public Vector2 get_normalized() { }

	// RVA: 0xD669C0 Offset: 0xD669C0 VA: 0xD669C0 Slot: 3
	public override string ToString() { }

	// RVA: 0xD669C8 Offset: 0xD669C8 VA: 0xD669C8
	public string ToString(string format) { }

	// RVA: 0xD669D0 Offset: 0xD669D0 VA: 0xD669D0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD66A0C Offset: 0xD66A0C VA: 0xD66A0C Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD66A14 Offset: 0xD66A14 VA: 0xD66A14 Slot: 4
	public bool Equals(Vector2 other) { }

	// RVA: 0x2175EA8 Offset: 0x2175EA8 VA: 0x2175EA8
	public static float Dot(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0xD66A1C Offset: 0xD66A1C VA: 0xD66A1C
	public float get_magnitude() { }

	// RVA: 0xD66A24 Offset: 0xD66A24 VA: 0xD66A24
	public float get_sqrMagnitude() { }

	// RVA: 0x2175ECC Offset: 0x2175ECC VA: 0x2175ECC
	public static float Angle(Vector2 from, Vector2 to) { }

	// RVA: 0x2175FFC Offset: 0x2175FFC VA: 0x2175FFC
	public static float Distance(Vector2 a, Vector2 b) { }

	// RVA: 0x2176090 Offset: 0x2176090 VA: 0x2176090
	public static Vector2 ClampMagnitude(Vector2 vector, float maxLength) { }

	// RVA: 0x2176140 Offset: 0x2176140 VA: 0x2176140
	public static float SqrMagnitude(Vector2 a) { }

	// RVA: 0xD66A38 Offset: 0xD66A38 VA: 0xD66A38
	public float SqrMagnitude() { }

	// RVA: 0x2176164 Offset: 0x2176164 VA: 0x2176164
	public static Vector2 Min(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x217620C Offset: 0x217620C VA: 0x217620C
	public static Vector2 Max(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x21759F8 Offset: 0x21759F8 VA: 0x21759F8
	public static Vector2 op_Addition(Vector2 a, Vector2 b) { }

	// RVA: 0x217593C Offset: 0x217593C VA: 0x217593C
	public static Vector2 op_Subtraction(Vector2 a, Vector2 b) { }

	// RVA: 0x21762B4 Offset: 0x21762B4 VA: 0x21762B4
	public static Vector2 op_Multiply(Vector2 a, Vector2 b) { }

	// RVA: 0x21762C0 Offset: 0x21762C0 VA: 0x21762C0
	public static Vector2 op_Division(Vector2 a, Vector2 b) { }

	// RVA: 0x21762CC Offset: 0x21762CC VA: 0x21762CC
	public static Vector2 op_UnaryNegation(Vector2 a) { }

	// RVA: 0x21759EC Offset: 0x21759EC VA: 0x21759EC
	public static Vector2 op_Multiply(Vector2 a, float d) { }

	// RVA: 0x21762D8 Offset: 0x21762D8 VA: 0x21762D8
	public static Vector2 op_Multiply(float d, Vector2 a) { }

	// RVA: 0x21759E0 Offset: 0x21759E0 VA: 0x21759E0
	public static Vector2 op_Division(Vector2 a, float d) { }

	// RVA: 0x21762E8 Offset: 0x21762E8 VA: 0x21762E8
	public static bool op_Equality(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x2176388 Offset: 0x2176388 VA: 0x2176388
	public static bool op_Inequality(Vector2 lhs, Vector2 rhs) { }

	// RVA: 0x2176420 Offset: 0x2176420 VA: 0x2176420
	public static Vector2 op_Implicit(Vector3 v) { }

	// RVA: 0x2176424 Offset: 0x2176424 VA: 0x2176424
	public static Vector3 op_Implicit(Vector2 v) { }

	// RVA: 0x216AA60 Offset: 0x216AA60 VA: 0x216AA60
	public static Vector2 get_zero() { }

	// RVA: 0x217642C Offset: 0x217642C VA: 0x217642C
	public static Vector2 get_one() { }

	// RVA: 0x2176494 Offset: 0x2176494 VA: 0x2176494
	public static Vector2 get_up() { }

	// RVA: 0x21764FC Offset: 0x21764FC VA: 0x21764FC
	public static Vector2 get_right() { }

	// RVA: 0x2176564 Offset: 0x2176564 VA: 0x2176564
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xBDAD9C Offset: 0xBDAD9C VA: 0xBDAD9C
[UsedByNativeCodeAttribute] // RVA: 0xBDAD9C Offset: 0xBDAD9C VA: 0xBDAD9C
public struct Vector2Int : IEquatable<Vector2Int> // TypeDefIndex: 2458
{
	// Fields
	private int m_X; // 0x0
	private int m_Y; // 0x4
	private static readonly Vector2Int s_Zero; // 0x0
	private static readonly Vector2Int s_One; // 0x8
	private static readonly Vector2Int s_Up; // 0x10
	private static readonly Vector2Int s_Down; // 0x18
	private static readonly Vector2Int s_Left; // 0x20
	private static readonly Vector2Int s_Right; // 0x28

	// Properties
	public int x { get; }
	public int y { get; }

	// Methods

	// RVA: 0xD66A4C Offset: 0xD66A4C VA: 0xD66A4C
	public void .ctor(int x, int y) { }

	// RVA: 0xD66A54 Offset: 0xD66A54 VA: 0xD66A54
	public int get_x() { }

	// RVA: 0xD66A5C Offset: 0xD66A5C VA: 0xD66A5C
	public int get_y() { }

	// RVA: 0xD66A64 Offset: 0xD66A64 VA: 0xD66A64 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD66A6C Offset: 0xD66A6C VA: 0xD66A6C Slot: 4
	public bool Equals(Vector2Int other) { }

	// RVA: 0xD66A74 Offset: 0xD66A74 VA: 0xD66A74 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD66A7C Offset: 0xD66A7C VA: 0xD66A7C Slot: 3
	public override string ToString() { }

	// RVA: 0x21768C0 Offset: 0x21768C0 VA: 0x21768C0
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBDADE8 Offset: 0xBDADE8 VA: 0xBDADE8
[DefaultMemberAttribute] // RVA: 0xBDADE8 Offset: 0xBDADE8 VA: 0xBDADE8
[NativeClassAttribute] // RVA: 0xBDADE8 Offset: 0xBDADE8 VA: 0xBDADE8
[NativeHeaderAttribute] // RVA: 0xBDADE8 Offset: 0xBDADE8 VA: 0xBDADE8
public struct Vector4 : IEquatable<Vector4> // TypeDefIndex: 2459
{
	// Fields
	public const float kEpsilon = 1E-05;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Vector4 zeroVector; // 0x0
	private static readonly Vector4 oneVector; // 0x10
	private static readonly Vector4 positiveInfinityVector; // 0x20
	private static readonly Vector4 negativeInfinityVector; // 0x30

	// Properties
	public float Item { get; set; }
	public float sqrMagnitude { get; }
	public static Vector4 zero { get; }
	public static Vector4 one { get; }

	// Methods

	// RVA: 0xD66B38 Offset: 0xD66B38 VA: 0xD66B38
	public void .ctor(float x, float y, float z, float w) { }

	// RVA: 0xD66B44 Offset: 0xD66B44 VA: 0xD66B44
	public float get_Item(int index) { }

	// RVA: 0xD66B4C Offset: 0xD66B4C VA: 0xD66B4C
	public void set_Item(int index, float value) { }

	// RVA: 0xD66B54 Offset: 0xD66B54 VA: 0xD66B54
	public void Set(float newX, float newY, float newZ, float newW) { }

	// RVA: 0xD66B60 Offset: 0xD66B60 VA: 0xD66B60 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD66B68 Offset: 0xD66B68 VA: 0xD66B68 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD66B70 Offset: 0xD66B70 VA: 0xD66B70 Slot: 4
	public bool Equals(Vector4 other) { }

	// RVA: 0x21785F8 Offset: 0x21785F8 VA: 0x21785F8
	public static float Dot(Vector4 a, Vector4 b) { }

	// RVA: 0xD66B78 Offset: 0xD66B78 VA: 0xD66B78
	public float get_sqrMagnitude() { }

	// RVA: 0x216B1E8 Offset: 0x216B1E8 VA: 0x216B1E8
	public static Vector4 get_zero() { }

	// RVA: 0x21786AC Offset: 0x21786AC VA: 0x21786AC
	public static Vector4 get_one() { }

	// RVA: 0x2178718 Offset: 0x2178718 VA: 0x2178718
	public static Vector4 op_Subtraction(Vector4 a, Vector4 b) { }

	// RVA: 0x217872C Offset: 0x217872C VA: 0x217872C
	public static Vector4 op_Multiply(Vector4 a, float d) { }

	// RVA: 0x2178740 Offset: 0x2178740 VA: 0x2178740
	public static Vector4 op_Division(Vector4 a, float d) { }

	// RVA: 0x2178754 Offset: 0x2178754 VA: 0x2178754
	public static bool op_Equality(Vector4 lhs, Vector4 rhs) { }

	// RVA: 0x21788AC Offset: 0x21788AC VA: 0x21788AC
	public static bool op_Inequality(Vector4 lhs, Vector4 rhs) { }

	// RVA: 0x2178974 Offset: 0x2178974 VA: 0x2178974
	public static Vector4 op_Implicit(Vector3 v) { }

	// RVA: 0x217897C Offset: 0x217897C VA: 0x217897C
	public static Vector3 op_Implicit(Vector4 v) { }

	// RVA: 0x2178980 Offset: 0x2178980 VA: 0x2178980
	public static Vector4 op_Implicit(Vector2 v) { }

	// RVA: 0xD66B80 Offset: 0xD66B80 VA: 0xD66B80 Slot: 3
	public override string ToString() { }

	// RVA: 0x2178814 Offset: 0x2178814 VA: 0x2178814
	public static float SqrMagnitude(Vector4 a) { }

	// RVA: 0x2178BA4 Offset: 0x2178BA4 VA: 0x2178BA4
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBDAEA0 Offset: 0xBDAEA0 VA: 0xBDAEA0
public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 2460
{
	// Methods

	// RVA: 0x2178C20 Offset: 0x2178C20 VA: 0x2178C20
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBDAEB0 Offset: 0xBDAEB0 VA: 0xBDAEB0
public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 2461
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBDAEC0 Offset: 0xBDAEC0 VA: 0xBDAEC0
public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 2462
{
	// Fields
	internal float m_Seconds; // 0x10

	// Methods

	// RVA: 0x2178C30 Offset: 0x2178C30 VA: 0x2178C30
	public void .ctor(float seconds) { }
}

// Namespace: UnityEngine
public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 2463
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBDD840 Offset: 0xBDD840 VA: 0xBDD840
	[CompilerGeneratedAttribute] // RVA: 0xBDD840 Offset: 0xBDD840 VA: 0xBDD840
	private float <waitTime>k__BackingField; // 0x10
	private float m_WaitUntilTime; // 0x14

	// Properties
	public float waitTime { get; set; }
	public override bool keepWaiting { get; }

	// Methods

	// RVA: 0x2178C64 Offset: 0x2178C64 VA: 0x2178C64
	public void .ctor(float time) { }

	[CompilerGeneratedAttribute] // RVA: 0xBE4878 Offset: 0xBE4878 VA: 0xBE4878
	// RVA: 0x2178CA8 Offset: 0x2178CA8 VA: 0x2178CA8
	public float get_waitTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xBE4888 Offset: 0xBE4888 VA: 0xBE4888
	// RVA: 0x2178CA0 Offset: 0x2178CA0 VA: 0x2178CA0
	public void set_waitTime(float value) { }

	// RVA: 0x2178CB0 Offset: 0x2178CB0 VA: 0x2178CB0 Slot: 7
	public override bool get_keepWaiting() { }
}

// Namespace: UnityEngine
public sealed class WaitUntil : CustomYieldInstruction // TypeDefIndex: 2464
{
	// Fields
	private Func<bool> m_Predicate; // 0x10

	// Properties
	public override bool keepWaiting { get; }

	// Methods

	// RVA: 0x2178D08 Offset: 0x2178D08 VA: 0x2178D08
	public void .ctor(Func<bool> predicate) { }

	// RVA: 0x2178D34 Offset: 0x2178D34 VA: 0x2178D34 Slot: 7
	public override bool get_keepWaiting() { }
}

// Namespace: UnityEngine
public sealed class WaitWhile : CustomYieldInstruction // TypeDefIndex: 2465
{
	// Fields
	private Func<bool> m_Predicate; // 0x10

	// Properties
	public override bool keepWaiting { get; }

	// Methods

	// RVA: 0x2178DA0 Offset: 0x2178DA0 VA: 0x2178DA0
	public void .ctor(Func<bool> predicate) { }

	// RVA: 0x2178DCC Offset: 0x2178DCC VA: 0x2178DCC Slot: 7
	public override bool get_keepWaiting() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xBDAED0 Offset: 0xBDAED0 VA: 0xBDAED0
public class YieldInstruction // TypeDefIndex: 2466
{
	// Methods

	// RVA: 0x2178C28 Offset: 0x2178C28 VA: 0x2178C28
	public void .ctor() { }
}

// Namespace: UnityEngine.Assertions
[DebuggerStepThroughAttribute] // RVA: 0xBDAEE0 Offset: 0xBDAEE0 VA: 0xBDAEE0
public static class Assert // TypeDefIndex: 2467
{
	// Fields
	public static bool raiseExceptions; // 0x0

	// Methods

	// RVA: 0x24C03A8 Offset: 0x24C03A8 VA: 0x24C03A8
	private static void Fail(string message, string userMessage) { }

	[ConditionalAttribute] // RVA: 0xBE4898 Offset: 0xBE4898 VA: 0xBE4898
	// RVA: -1 Offset: -1
	public static void AreEqual<T>(T expected, T actual, string message) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1A084 Offset: 0x1C1A084 VA: 0x1C1A084
	|-Assert.AreEqual<int>
	|
	|-RVA: 0x1C1A460 Offset: 0x1C1A460 VA: 0x1C1A460
	|-Assert.AreEqual<object>
	*/

	[ConditionalAttribute] // RVA: 0xBE48D0 Offset: 0xBE48D0 VA: 0xBE48D0
	// RVA: -1 Offset: -1
	public static void AreEqual<T>(T expected, T actual, string message, IEqualityComparer<T> comparer) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1A194 Offset: 0x1C1A194 VA: 0x1C1A194
	|-Assert.AreEqual<int>
	|
	|-RVA: 0x1C1A570 Offset: 0x1C1A570 VA: 0x1C1A570
	|-Assert.AreEqual<object>
	*/

	[ConditionalAttribute] // RVA: 0xBE4908 Offset: 0xBE4908 VA: 0xBE4908
	// RVA: 0x24C0634 Offset: 0x24C0634 VA: 0x24C0634
	public static void AreEqual(Object expected, Object actual, string message) { }

	[ConditionalAttribute] // RVA: 0xBE4940 Offset: 0xBE4940 VA: 0xBE4940
	// RVA: 0x24C0948 Offset: 0x24C0948 VA: 0x24C0948
	public static void AreEqual(int expected, int actual) { }

	// RVA: 0x24C09E4 Offset: 0x24C09E4 VA: 0x24C09E4
	private static void .cctor() { }
}

// Namespace: UnityEngine.Assertions
public class AssertionException : Exception // TypeDefIndex: 2468
{
	// Fields
	private string m_UserMessage; // 0x60

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x24C052C Offset: 0x24C052C VA: 0x24C052C
	public void .ctor(string message, string userMessage) { }

	// RVA: 0x24C0A34 Offset: 0x24C0A34 VA: 0x24C0A34 Slot: 6
	public override string get_Message() { }
}

// Namespace: UnityEngine.Assertions
internal class AssertionMessageUtil // TypeDefIndex: 2469
{
	// Methods

	// RVA: 0x24C0AF8 Offset: 0x24C0AF8 VA: 0x24C0AF8
	public static string GetMessage(string failureMessage) { }

	// RVA: 0x24C0C0C Offset: 0x24C0C0C VA: 0x24C0C0C
	public static string GetMessage(string failureMessage, string expected) { }

	// RVA: 0x24C0708 Offset: 0x24C0708 VA: 0x24C0708
	public static string GetEqualityMessage(object actual, object expected, bool expectEqual) { }
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0xBDAEF0 Offset: 0xBDAEF0 VA: 0xBDAEF0
internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem, IDisposable // TypeDefIndex: 2470
{
	// Methods

	// RVA: 0x24CBD0C Offset: 0x24CBD0C VA: 0x24CBD0C
	public void .ctor() { }

	// RVA: 0x24CBD14 Offset: 0x24CBD14 VA: 0x24CBD14 Slot: 4
	public bool TickRealtimeProbes() { }

	// RVA: 0x24CBD70 Offset: 0x24CBD70 VA: 0x24CBD70 Slot: 5
	public void Dispose() { }

	// RVA: 0x24CBD74 Offset: 0x24CBD74 VA: 0x24CBD74
	private void Dispose(bool disposing) { }

	[StaticAccessorAttribute] // RVA: 0xBE4978 Offset: 0xBE4978 VA: 0xBE4978
	// RVA: 0x24CBD18 Offset: 0x24CBD18 VA: 0x24CBD18
	private static bool BuiltinUpdate() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE49C0 Offset: 0xBE49C0 VA: 0xBE49C0
	// RVA: 0x24CBD78 Offset: 0x24CBD78 VA: 0x24CBD78
	private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New() { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 2471
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool TickRealtimeProbes();
}

// Namespace: UnityEngine.Experimental.Rendering
[NativeHeaderAttribute] // RVA: 0xBDAF28 Offset: 0xBDAF28 VA: 0xBDAF28
[RequiredByNativeCodeAttribute] // RVA: 0xBDAF28 Offset: 0xBDAF28 VA: 0xBDAF28
public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 2472
{
	// Fields
	private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0x0

	// Properties
	private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { set; }
	private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { get; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBE49D0 Offset: 0xBE49D0 VA: 0xBE49D0
	// RVA: 0x24CC51C Offset: 0x24CC51C VA: 0x24CC51C
	private static void set_Internal_ScriptableRuntimeReflectionSystemSettings_system(IScriptableRuntimeReflectionSystem value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE49E0 Offset: 0xBE49E0 VA: 0xBE49E0
	// RVA: 0x24CC6CC Offset: 0x24CC6CC VA: 0x24CC6CC
	private static ScriptableRuntimeReflectionSystemWrapper get_Internal_ScriptableRuntimeReflectionSystemSettings_instance() { }

	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xBE49F0 Offset: 0xBE49F0 VA: 0xBE49F0
	[StaticAccessorAttribute] // RVA: 0xBE49F0 Offset: 0xBE49F0 VA: 0xBE49F0
	// RVA: 0x24CC734 Offset: 0x24CC734 VA: 0x24CC734
	private static void ScriptingDirtyReflectionSystemInstance() { }

	// RVA: 0x24CC78C Offset: 0x24CC78C VA: 0x24CC78C
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0xBDAF74 Offset: 0xBDAF74 VA: 0xBDAF74
internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 2473
{
	// Fields
	[DebuggerBrowsableAttribute] // RVA: 0xBDD87C Offset: 0xBDD87C VA: 0xBDD87C
	[CompilerGeneratedAttribute] // RVA: 0xBDD87C Offset: 0xBDD87C VA: 0xBDD87C
	private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x10

	// Properties
	internal IScriptableRuntimeReflectionSystem implementation { get; set; }

	// Methods

	// RVA: 0x24CC7F8 Offset: 0x24CC7F8 VA: 0x24CC7F8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xBE4A44 Offset: 0xBE4A44 VA: 0xBE4A44
	// RVA: 0x24CC6BC Offset: 0x24CC6BC VA: 0x24CC6BC
	internal IScriptableRuntimeReflectionSystem get_implementation() { }

	[CompilerGeneratedAttribute] // RVA: 0xBE4A54 Offset: 0xBE4A54 VA: 0xBE4A54
	// RVA: 0x24CC6C4 Offset: 0x24CC6C4 VA: 0x24CC6C4
	internal void set_implementation(IScriptableRuntimeReflectionSystem value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4A64 Offset: 0xBE4A64 VA: 0xBE4A64
	// RVA: 0x24CC800 Offset: 0x24CC800 VA: 0x24CC800
	private void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(IntPtr result) { }
}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xBDAF84 Offset: 0xBDAF84 VA: 0xBDAF84
[AttributeUsageAttribute] // RVA: 0xBDAF84 Offset: 0xBDAF84 VA: 0xBDAF84
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 2474
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xBDAFC0 Offset: 0xBDAFC0 VA: 0xBDAFC0
[AttributeUsageAttribute] // RVA: 0xBDAFC0 Offset: 0xBDAFC0 VA: 0xBDAFC0
public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 2475
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xBDAFFC Offset: 0xBDAFFC VA: 0xBDAFFC
[AttributeUsageAttribute] // RVA: 0xBDAFFC Offset: 0xBDAFFC VA: 0xBDAFFC
public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 2476
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xBDB038 Offset: 0xBDB038 VA: 0xBDB038
[RequiredByNativeCodeAttribute] // RVA: 0xBDB038 Offset: 0xBDB038 VA: 0xBDB038
public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 2477
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xBDB074 Offset: 0xBDB074 VA: 0xBDB074
[AttributeUsageAttribute] // RVA: 0xBDB074 Offset: 0xBDB074 VA: 0xBDB074
public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 2478
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xBDB0B0 Offset: 0xBDB0B0 VA: 0xBDB0B0
[RequiredByNativeCodeAttribute] // RVA: 0xBDB0B0 Offset: 0xBDB0B0 VA: 0xBDB0B0
public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 2479
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xBDB0EC Offset: 0xBDB0EC VA: 0xBDB0EC
[RequiredByNativeCodeAttribute] // RVA: 0xBDB0EC Offset: 0xBDB0EC VA: 0xBDB0EC
public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 2480
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xBDB128 Offset: 0xBDB128 VA: 0xBDB128
[RequiredByNativeCodeAttribute] // RVA: 0xBDB128 Offset: 0xBDB128 VA: 0xBDB128
public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 2481
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xBDB164 Offset: 0xBDB164 VA: 0xBDB164
[AttributeUsageAttribute] // RVA: 0xBDB164 Offset: 0xBDB164 VA: 0xBDB164
public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 2482
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xBDB1A0 Offset: 0xBDB1A0 VA: 0xBDB1A0
[RequiredByNativeCodeAttribute] // RVA: 0xBDB1A0 Offset: 0xBDB1A0 VA: 0xBDB1A0
public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 2483
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xBDB1DC Offset: 0xBDB1DC VA: 0xBDB1DC
[AttributeUsageAttribute] // RVA: 0xBDB1DC Offset: 0xBDB1DC VA: 0xBDB1DC
public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 2484
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xBDB218 Offset: 0xBDB218 VA: 0xBDB218
[AttributeUsageAttribute] // RVA: 0xBDB218 Offset: 0xBDB218 VA: 0xBDB218
public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 2485
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xBDB254 Offset: 0xBDB254 VA: 0xBDB254
[RequiredByNativeCodeAttribute] // RVA: 0xBDB254 Offset: 0xBDB254 VA: 0xBDB254
public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 2486
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[ObsoleteAttribute] // RVA: 0xBDB290 Offset: 0xBDB290 VA: 0xBDB290
[AttributeUsageAttribute] // RVA: 0xBDB290 Offset: 0xBDB290 VA: 0xBDB290
[RequiredByNativeCodeAttribute] // RVA: 0xBDB290 Offset: 0xBDB290 VA: 0xBDB290
public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 2487
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xBDB2F0 Offset: 0xBDB2F0 VA: 0xBDB2F0
[AttributeUsageAttribute] // RVA: 0xBDB2F0 Offset: 0xBDB2F0 VA: 0xBDB2F0
public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 2488
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xBDB32C Offset: 0xBDB32C VA: 0xBDB32C
[RequiredByNativeCodeAttribute] // RVA: 0xBDB32C Offset: 0xBDB32C VA: 0xBDB32C
public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 2489
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xBDB368 Offset: 0xBDB368 VA: 0xBDB368
[RequiredByNativeCodeAttribute] // RVA: 0xBDB368 Offset: 0xBDB368 VA: 0xBDB368
public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 2490
{}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xBDB3A4 Offset: 0xBDB3A4 VA: 0xBDB3A4
[StaticAccessorAttribute] // RVA: 0xBDB3A4 Offset: 0xBDB3A4 VA: 0xBDB3A4
[NativeHeaderAttribute] // RVA: 0xBDB3A4 Offset: 0xBDB3A4 VA: 0xBDB3A4
[NativeHeaderAttribute] // RVA: 0xBDB3A4 Offset: 0xBDB3A4 VA: 0xBDB3A4
[NativeHeaderAttribute] // RVA: 0xBDB3A4 Offset: 0xBDB3A4 VA: 0xBDB3A4
public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 2491
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xD6CE5C Offset: 0xD6CE5C VA: 0xD6CE5C Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD6CE68 Offset: 0xD6CE68 VA: 0xD6CE68 Slot: 5
	public bool Equals(CameraPlayable other) { }
}

// Namespace: UnityEngine.Playables
public struct FrameData // TypeDefIndex: 2492
{
	// Fields
	internal ulong m_FrameID; // 0x0
	internal double m_DeltaTime; // 0x8
	internal float m_Weight; // 0x10
	internal float m_EffectiveWeight; // 0x14
	internal double m_EffectiveParentDelay; // 0x18
	internal float m_EffectiveParentSpeed; // 0x20
	internal float m_EffectiveSpeed; // 0x24
	internal FrameData.Flags m_Flags; // 0x28
	internal PlayableOutput m_Output; // 0x30

	// Properties
	public float deltaTime { get; }

	// Methods

	// RVA: 0xD6E8F4 Offset: 0xD6E8F4 VA: 0xD6E8F4
	public float get_deltaTime() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xBDB460 Offset: 0xBDB460 VA: 0xBDB460
internal enum FrameData.Flags // TypeDefIndex: 2493
{
	// Fields
	public int value__; // 0x0
	public const FrameData.Flags Evaluate = 1;
	public const FrameData.Flags SeekOccured = 2;
	public const FrameData.Flags Loop = 4;
	public const FrameData.Flags Hold = 8;
	public const FrameData.Flags EffectivePlayStateDelayed = 16;
	public const FrameData.Flags EffectivePlayStatePlaying = 32;
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xBDB470 Offset: 0xBDB470 VA: 0xBDB470
public interface INotificationReceiver // TypeDefIndex: 2494
{}

// Namespace: UnityEngine.Playables
public interface IPlayable // TypeDefIndex: 2495
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract PlayableHandle GetHandle();
}

// Namespace: UnityEngine.Playables
public interface IPlayableBehaviour // TypeDefIndex: 2496
{
	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4A74 Offset: 0xBE4A74 VA: 0xBE4A74
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnGraphStart(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4A84 Offset: 0xBE4A84 VA: 0xBE4A84
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnGraphStop(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4A94 Offset: 0xBE4A94 VA: 0xBE4A94
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnPlayableCreate(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4AA4 Offset: 0xBE4AA4 VA: 0xBE4AA4
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnPlayableDestroy(Playable playable);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4AB4 Offset: 0xBE4AB4 VA: 0xBE4AB4
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnBehaviourPlay(Playable playable, FrameData info);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4AC4 Offset: 0xBE4AC4 VA: 0xBE4AC4
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnBehaviourPause(Playable playable, FrameData info);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4AD4 Offset: 0xBE4AD4 VA: 0xBE4AD4
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void PrepareFrame(Playable playable, FrameData info);

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4AE4 Offset: 0xBE4AE4 VA: 0xBE4AE4
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ProcessFrame(Playable playable, FrameData info, object playerData);
}

// Namespace: UnityEngine.Playables
public interface IPlayableOutput // TypeDefIndex: 2497
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract PlayableOutputHandle GetHandle();
}

// Namespace: UnityEngine.Experimental.Playables
[NativeHeaderAttribute] // RVA: 0xBDB480 Offset: 0xBDB480 VA: 0xBDB480
[RequiredByNativeCodeAttribute] // RVA: 0xBDB480 Offset: 0xBDB480 VA: 0xBDB480
[NativeHeaderAttribute] // RVA: 0xBDB480 Offset: 0xBDB480 VA: 0xBDB480
[StaticAccessorAttribute] // RVA: 0xBDB480 Offset: 0xBDB480 VA: 0xBDB480
[NativeHeaderAttribute] // RVA: 0xBDB480 Offset: 0xBDB480 VA: 0xBDB480
public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 2498
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xD6CE70 Offset: 0xD6CE70 VA: 0xD6CE70 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD6CE7C Offset: 0xD6CE7C VA: 0xD6CE7C Slot: 5
	public bool Equals(MaterialEffectPlayable other) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xBDB53C Offset: 0xBDB53C VA: 0xBDB53C
public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 2499
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly Playable m_NullPlayable; // 0x0

	// Properties
	public static Playable Null { get; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xBE4AF4 Offset: 0xBE4AF4 VA: 0xBE4AF4
	// RVA: 0xD6E900 Offset: 0xD6E900 VA: 0xD6E900
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x2571AC4 Offset: 0x2571AC4 VA: 0x2571AC4
	public static Playable get_Null() { }

	// RVA: 0xD6E908 Offset: 0xD6E908 VA: 0xD6E908 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: -1 Offset: -1
	public bool IsPlayableOfType<T>() { }

	// RVA: 0xD6E914 Offset: 0xD6E914 VA: 0xD6E914
	public Type GetPlayableType() { }

	// RVA: 0xD6E93C Offset: 0xD6E93C VA: 0xD6E93C Slot: 5
	public bool Equals(Playable other) { }

	// RVA: 0x2571CE0 Offset: 0x2571CE0 VA: 0x2571CE0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableAsset // TypeDefIndex: 2500
{}

// Namespace: UnityEngine.Playables
[AssetFileNameExtensionAttribute] // RVA: 0xBDB54C Offset: 0xBDB54C VA: 0xBDB54C
[RequiredByNativeCodeAttribute] // RVA: 0xBDB54C Offset: 0xBDB54C VA: 0xBDB54C
[Serializable]
public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 2501
{
	// Properties
	public virtual double duration { get; }
	public virtual IEnumerable<PlayableBinding> outputs { get; }

	// Methods

	// RVA: 0x2571DBC Offset: 0x2571DBC VA: 0x2571DBC
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner);

	// RVA: 0x2571DC4 Offset: 0x2571DC4 VA: 0x2571DC4 Slot: 5
	public virtual double get_duration() { }

	// RVA: 0x2571E2C Offset: 0x2571E2C VA: 0x2571E2C Slot: 6
	public virtual IEnumerable<PlayableBinding> get_outputs() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4B04 Offset: 0xBE4B04 VA: 0xBE4B04
	// RVA: 0x2571E94 Offset: 0x2571E94 VA: 0x2571E94
	internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE4B14 Offset: 0xBE4B14 VA: 0xBE4B14
	// RVA: 0x2571F8C Offset: 0x2571F8C VA: 0x2571F8C
	internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0xBDB5E0 Offset: 0xBDB5E0 VA: 0xBDB5E0
[Serializable]
public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 2502
{
	// Methods

	// RVA: 0x2571FE8 Offset: 0x2571FE8 VA: 0x2571FE8
	public void .ctor() { }

	// RVA: 0x2571FF0 Offset: 0x2571FF0 VA: 0x2571FF0 Slot: 13
	public virtual void OnGraphStart(Playable playable) { }

	// RVA: 0x2571FF4 Offset: 0x2571FF4 VA: 0x2571FF4 Slot: 14
	public virtual void OnGraphStop(Playable playable) { }

	// RVA: 0x2571FF8 Offset: 0x2571FF8 VA: 0x2571FF8 Slot: 15
	public virtual void OnPlayableCreate(Playable playable) { }

	// RVA: 0x2571FFC Offset: 0x2571FFC VA: 0x2571FFC Slot: 16
	public virtual void OnPlayableDestroy(Playable playable) { }

	// RVA: 0x2572000 Offset: 0x2572000 VA: 0x2572000 Slot: 17
	public virtual void OnBehaviourPlay(Playable playable, FrameData info) { }

	// RVA: 0x2572004 Offset: 0x2572004 VA: 0x2572004 Slot: 18
	public virtual void OnBehaviourPause(Playable playable, FrameData info) { }

	// RVA: 0x2572008 Offset: 0x2572008 VA: 0x2572008 Slot: 19
	public virtual void PrepareFrame(Playable playable, FrameData info) { }

	// RVA: 0x257200C Offset: 0x257200C VA: 0x257200C Slot: 20
	public virtual void ProcessFrame(Playable playable, FrameData info, object playerData) { }

	// RVA: 0x2572010 Offset: 0x2572010 VA: 0x2572010 Slot: 21
	public virtual object Clone() { }
}

// Namespace: UnityEngine.Playables
public struct PlayableBinding // TypeDefIndex: 2503
{
	// Fields
	private string m_StreamName; // 0x0
	private Object m_SourceObject; // 0x8
	private Type m_SourceBindingType; // 0x10
	private PlayableBinding.CreateOutputMethod m_CreateOutputMethod; // 0x18
	public static readonly PlayableBinding[] None; // 0x0
	public static readonly double DefaultDuration; // 0x8

	// Methods

	// RVA: 0x2572018 Offset: 0x2572018 VA: 0x2572018
	private static void .cctor() { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0xBDB5F0 Offset: 0xBDB5F0 VA: 0xBDB5F0
internal sealed class PlayableBinding.CreateOutputMethod : MulticastDelegate // TypeDefIndex: 2504
{
	// Methods

	// RVA: 0x257208C Offset: 0x257208C VA: 0x257208C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x257209C Offset: 0x257209C VA: 0x257209C Slot: 11
	public virtual PlayableOutput Invoke(PlayableGraph graph, string name) { }

	// RVA: 0x2572300 Offset: 0x2572300 VA: 0x2572300 Slot: 12
	public virtual IAsyncResult BeginInvoke(PlayableGraph graph, string name, AsyncCallback callback, object object) { }

	// RVA: 0x2572398 Offset: 0x2572398 VA: 0x2572398 Slot: 13
	public virtual PlayableOutput EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Playables
[ExtensionAttribute] // RVA: 0xBDB600 Offset: 0xBDB600 VA: 0xBDB600
public static class PlayableExtensions // TypeDefIndex: 2505
{
	// Methods

	[ExtensionAttribute] // RVA: 0xBE4B24 Offset: 0xBE4B24 VA: 0xBE4B24
	// RVA: -1 Offset: -1
	public static bool IsValid<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A1B724 Offset: 0x1A1B724 VA: 0x1A1B724
	|-PlayableExtensions.IsValid<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4B34 Offset: 0xBE4B34 VA: 0xBE4B34
	// RVA: -1 Offset: -1
	public static PlayableGraph GetGraph<U>(U playable) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B28400 Offset: 0x2B28400 VA: 0x2B28400
	|-PlayableExtensions.GetGraph<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4B44 Offset: 0xBE4B44 VA: 0xBE4B44
	[ObsoleteAttribute] // RVA: 0xBE4B44 Offset: 0xBE4B44 VA: 0xBE4B44
	// RVA: -1 Offset: -1
	public static void SetPlayState<U>(U playable, PlayState value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C4F8 Offset: 0x1C1C4F8 VA: 0x1C1C4F8
	|-PlayableExtensions.SetPlayState<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4B94 Offset: 0xBE4B94 VA: 0xBE4B94
	// RVA: -1 Offset: -1
	public static void SetSpeed<U>(U playable, double value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1C5E0 Offset: 0x1C1C5E0 VA: 0x1C1C5E0
	|-PlayableExtensions.SetSpeed<Playable>
	*/

	[ExtensionAttribute] // RVA: 0xBE4BA4 Offset: 0xBE4BA4 VA: 0xBE4BA4
	// RVA: -1 Offset: -1
	public static double GetSpeed<U>(U playable) { }
