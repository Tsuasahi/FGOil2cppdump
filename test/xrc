
// Namespace: 
public class ConditionsInformation.TotalCountEqualIndividualityCheckInfo : ConditionsInformation.EqualBuffIndividualitySumCheckInfo // TypeDefIndex: 9030
{
	// Methods

	// RVA: 0x196BB94 Offset: 0x196BB94 VA: 0x196BB94
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.ExistIndividualityCheckInfo : ConditionsInformation.CheckInfo // TypeDefIndex: 9031
{
	// Methods

	// RVA: 0x196BB18 Offset: 0x196BB18 VA: 0x196BB18
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.CheckInfo // TypeDefIndex: 9032
{
	// Fields
	public ConditionsInformation.TARGET target; // 0x10
	public ConditionsInformation.PARAMATER paramater; // 0x14
	public ConditionsInformation.CHECK check; // 0x18
	public ConditionsInformation.REFINE refine; // 0x1C
	public bool isIndiv; // 0x20
	public ConditionsInformation.ISCheckFunction func; // 0x28
	public bool isParams; // 0x30
	public bool isRevival; // 0x31
	[CompilerGeneratedAttribute] // RVA: 0xCD1AAC Offset: 0xCD1AAC VA: 0xCD1AAC
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD1ABC Offset: 0xCD1ABC VA: 0xCD1ABC
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD1ACC Offset: 0xCD1ACC VA: 0xCD1ACC
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD1ADC Offset: 0xCD1ADC VA: 0xCD1ADC
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD1AEC Offset: 0xCD1AEC VA: 0xCD1AEC
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache4; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD1AFC Offset: 0xCD1AFC VA: 0xCD1AFC
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache5; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCD1B0C Offset: 0xCD1B0C VA: 0xCD1B0C
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache6; // 0x30

	// Methods

	// RVA: 0x196B714 Offset: 0x196B714 VA: 0x196B714
	public void .ctor() { }

	// RVA: 0x196B7C8 Offset: 0x196B7C8 VA: 0x196B7C8
	public void .ctor(ConditionsInformation.TARGET inTarget, ConditionsInformation.PARAMATER inParamater, ConditionsInformation.CHECK inCheck) { }

	// RVA: 0x196BC1C Offset: 0x196BC1C VA: 0x196BC1C
	public ConditionsInformation.ISCheckFunction getCheckFunction() { }

	// RVA: 0x196BA74 Offset: 0x196BA74 VA: 0x196BA74
	public ConditionsInformation.CheckInfo setRefine(ConditionsInformation.REFINE inRefine) { }

	// RVA: 0x196BA68 Offset: 0x196BA68 VA: 0x196BA68
	public ConditionsInformation.CheckInfo setIsIndiv(bool flg) { }

	// RVA: 0x196BA7C Offset: 0x196BA7C VA: 0x196BA7C
	public ConditionsInformation.CheckInfo setParams(bool flg) { }

	// RVA: 0x196BBCC Offset: 0x196BBCC VA: 0x196BBCC
	public ConditionsInformation.CheckInfo setRevival(bool flg) { }
}

// Namespace: 
internal interface AiInterface // TypeDefIndex: 9033
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv);
}

// Namespace: 
public class AiState // TypeDefIndex: 9034
{
	// Fields
	public int firstAiGroupId; // 0x10
	public int aiGroupId; // 0x14
	public int baseTurn; // 0x18
	public int actCount; // 0x1C
	public int fieldTurn; // 0x20
	public AiAct.TYPE beforeActType; // 0x24
	public int beforeActId; // 0x28

	// Methods

	// RVA: 0x15A653C Offset: 0x15A653C VA: 0x15A653C
	public void .ctor() { }

	// RVA: 0x15A654C Offset: 0x15A654C VA: 0x15A654C
	public void Initialize(int groupId) { }

	// RVA: 0x15A655C Offset: 0x15A655C VA: 0x15A655C
	public void setBeforeAction(AiAct.TYPE type, int actId) { }

	// RVA: 0x15A6564 Offset: 0x15A6564 VA: 0x15A6564
	public AiAct.TYPE getBeforeAiActType() { }

	// RVA: 0x15A3FF8 Offset: 0x15A3FF8 VA: 0x15A3FF8
	public void changeThinking(int groupId) { }

	// RVA: 0x15A6418 Offset: 0x15A6418 VA: 0x15A6418
	public void fieldTurnProgressing() { }

	// RVA: 0x15A6268 Offset: 0x15A6268 VA: 0x15A6268
	public AiState.SaveData getSaveData() { }

	// RVA: 0x15A64FC Offset: 0x15A64FC VA: 0x15A64FC
	public void setSaveData(AiState.SaveData sv) { }
}

// Namespace: 
public class AiState.SaveData // TypeDefIndex: 9035
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCD1B1C Offset: 0xCD1B1C VA: 0xCD1B1C
	public int firstAiGroupId; // 0x10
	[PackKeyAttribute] // RVA: 0xCD1B54 Offset: 0xCD1B54 VA: 0xCD1B54
	public int aiGroupId; // 0x14
	[PackKeyAttribute] // RVA: 0xCD1B8C Offset: 0xCD1B8C VA: 0xCD1B8C
	public int baseTurn; // 0x18
	[PackKeyAttribute] // RVA: 0xCD1BC4 Offset: 0xCD1BC4 VA: 0xCD1BC4
	public int actCount; // 0x1C
	[PackKeyAttribute] // RVA: 0xCD1BFC Offset: 0xCD1BFC VA: 0xCD1BFC
	public int beforeActType; // 0x20
	[PackKeyAttribute] // RVA: 0xCD1C34 Offset: 0xCD1C34 VA: 0xCD1C34
	public int beforeActId; // 0x24
	[PackKeyAttribute] // RVA: 0xCD1C6C Offset: 0xCD1C6C VA: 0xCD1C6C
	public int fieldTurn; // 0x28

	// Methods

	// RVA: 0x15A656C Offset: 0x15A656C VA: 0x15A656C
	public void .ctor() { }
}

// Namespace: 
public class NpcAiState : AiState // TypeDefIndex: 9036
{
	// Methods

	// RVA: 0x18D69D8 Offset: 0x18D69D8 VA: 0x18D69D8
	public void .ctor(int groupId) { }
}

// Namespace: 
public class BattleLogic : BaseMonoBehaviour // TypeDefIndex: 9037
{
	// Fields
	protected static readonly string COMMAND_SPELL_EFFECT_ASSETNAME; // 0x0
	protected static readonly string COMMAND_SPELL_EFFECT_PREFABNAME; // 0x8
	protected static readonly string COMMAND_SPELL_EFFECT_ANIMNAME; // 0x10
	public PlayMakerFSM fsm; // 0x18
	public BattleData data; // 0x20
	public BattleLogic proc; // 0x28
	public BattlePerformance perf; // 0x30
	public BattleRandom brandom; // 0x38
	public BattleEventTutorial eventTutorial; // 0x40
	public string setdays; // 0x48
	public BattleLogic.LOGICTYPE[] logiclist; // 0x50
	private Dictionary<BattleLogic.LOGICTYPE, BattleLogic.taskFunction> funclist; // 0x58
	private Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.reactionFunction> reactionlist; // 0x60
	public int logicindex; // 0x68
	private Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.createActionBattle> actionBattleList; // 0x70
	private LinkedList<BattleLogicTask> list_logic; // 0x78
	[HideInInspector] // RVA: 0xCD1CA4 Offset: 0xCD1CA4 VA: 0xCD1CA4
	private BattleLogicTarget logictarget; // 0x80
	private BattleLogicNomal logicnomal; // 0x88
	public BattleLogicSkill logicSkill; // 0x90
	private BattleLogicSpecial logicspecial; // 0x98
	private BattleLogicFunction logicFunction; // 0xA0
	private BattleLogicEnemyAi logicEnemyAi; // 0xA8
	private BattleLogicFieldAi logicFieldAi; // 0xB0
	private BattleLogicReaction logicReaction; // 0xB8
	private BattleLogicNpcAi logicNpcAi; // 0xC0
	private Spawner spawner; // 0xC8
	private BattleLogicClassRelation logicClassRelation; // 0xD0
	protected string _CurrentBgmName; // 0xD8
	public bool connCammdSpellRetryFlg; // 0xE0
	public static readonly int[] addStarWeight; // 0x18
	private bool isEnableSkipAssistSkill; // 0xE1
	private bool isPlayImmediateEntry; // 0xE2
	private static string[] unusedGameObjectNames; // 0x20
	private List<GameObject> unusedGameobjects; // 0xE8
	private string resultstring; // 0xF0
	private float prevScaleTime; // 0xF8
	private float prevSkipScaleTime; // 0xFC
	private bool skipflg; // 0x100
	private const string FORCE_RESET_TIME_METHOD_NAME = "ForceResetTimeAcceleration";
	private float prevFixScaleTime; // 0x104
	private float prevFirstScaleTime; // 0x108
	private float prevPartActiontScaleTime; // 0x10C
	private BattleLogicTask prevTask; // 0x110
	private BattleLogic.ACTTYPE acttype; // 0x118
	private BattleLogic.UseSkillObject tmp_useSkill; // 0x120
	private BattleLogic.UseSkillObject act_useSkill; // 0x128
	private BattleLogic.CommandSpellData tmp_usecommandspell; // 0x130
	private BattleLogic.CommandSpellData actData; // 0x138
	public Vector2[] TuArrow; // 0x140
	public Rect[] TuSquare; // 0x148
	private BattleLogic.TutorialStringData[] TSD; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xCD1CB4 Offset: 0xCD1CB4 VA: 0xCD1CB4
	private static Predicate<BattleServantData> <>f__am$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCD1CC4 Offset: 0xCD1CC4 VA: 0xCD1CC4
	private static Func<BattleServantData, bool> <>f__am$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCD1CD4 Offset: 0xCD1CD4 VA: 0xCD1CD4
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCD1CE4 Offset: 0xCD1CE4 VA: 0xCD1CE4
	private static Func<BattleServantData, bool> <>f__am$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCD1CF4 Offset: 0xCD1CF4 VA: 0xCD1CF4
	private static Func<BattleServantData, int> <>f__am$cache4; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCD1D04 Offset: 0xCD1D04 VA: 0xCD1D04
	private static Func<BattleSkillInfoData, int> <>f__am$cache5; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCD1D14 Offset: 0xCD1D14 VA: 0xCD1D14
	private static Func<BattleSkillInfoData, int> <>f__am$cache6; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCD1D24 Offset: 0xCD1D24 VA: 0xCD1D24
	private static Func<BattleSkillInfoData, int> <>f__am$cache7; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCD1D34 Offset: 0xCD1D34 VA: 0xCD1D34
	private static Func<BattleSkillInfoData, int> <>f__am$cache8; // 0x68

	// Properties
	public BattleAttackManager AtkManager { get; }
	public BaseBattleEvent BattleEvent { get; }
	public BattleMotionSkipManager MotionSkipManager { get; }
	public BattleLogicTarget LogicTarget { get; }
	public BattleLogicEnemyAi LogicEnemeyAi { get; }
	[HideInInspector] // RVA: 0xD4BDA4 Offset: 0xD4BDA4 VA: 0xD4BDA4
	public string CurrentBgmName { get; }

	// Methods

	// RVA: 0x1751D28 Offset: 0x1751D28 VA: 0x1751D28
	public void .ctor() { }

	// RVA: 0x17525E0 Offset: 0x17525E0 VA: 0x17525E0
	public BattleAttackManager get_AtkManager() { }

	// RVA: 0x175260C Offset: 0x175260C VA: 0x175260C
	public BaseBattleEvent get_BattleEvent() { }

	// RVA: 0x1752638 Offset: 0x1752638 VA: 0x1752638
	public BattleMotionSkipManager get_MotionSkipManager() { }

	// RVA: 0x1752668 Offset: 0x1752668 VA: 0x1752668
	public BattleLogicTarget get_LogicTarget() { }

	// RVA: 0x1752670 Offset: 0x1752670 VA: 0x1752670
	public BattleLogicEnemyAi get_LogicEnemeyAi() { }

	// RVA: 0x1752678 Offset: 0x1752678 VA: 0x1752678
	public string get_CurrentBgmName() { }

	// RVA: 0x1752680 Offset: 0x1752680 VA: 0x1752680
	public void Initialize() { }

	// RVA: 0x17542EC Offset: 0x17542EC VA: 0x17542EC
	private void setActiviteUnusedGameobject(bool active = True) { }

	// RVA: 0x175454C Offset: 0x175454C VA: 0x175454C
	private void OnDestroy() { }

	// RVA: 0x1754554 Offset: 0x1754554 VA: 0x1754554
	public void sendFsmEvent(string evstr) { }

	// RVA: 0x175458C Offset: 0x175458C VA: 0x175458C
	public void loadBgmName(string _bgmName) { }

	// RVA: 0x175468C Offset: 0x175468C VA: 0x175468C
	public string getBattleBgmName() { }

	// RVA: 0x1754768 Offset: 0x1754768 VA: 0x1754768
	private string GetDefaultBgmName() { }

	// RVA: 0x1754870 Offset: 0x1754870 VA: 0x1754870
	public void PlayCurrentBgm() { }

	// RVA: 0x175498C Offset: 0x175498C VA: 0x175498C
	public void checkEntryMember(string endproc, bool isTactical = False, bool isEventBonusCheck = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AC74 Offset: 0xD3AC74 VA: 0xD3AC74
	// RVA: 0x1754A9C Offset: 0x1754A9C VA: 0x1754A9C
	private IEnumerator UnloadUnusedAssetsAndWaitFinish() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AC84 Offset: 0xD3AC84 VA: 0xD3AC84
	// RVA: 0x17549C0 Offset: 0x17549C0 VA: 0x17549C0
	private IEnumerator coroutineEntrySubMember(string endproc, bool isTactical, bool isEventBonusCheck = False) { }

	// RVA: 0x1754B00 Offset: 0x1754B00 VA: 0x1754B00
	private bool checkImmediateEntrySubMember(bool isTactical, bool isEventBonusCheck = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AC94 Offset: 0xD3AC94 VA: 0xD3AC94
	// RVA: 0x1754D44 Offset: 0x1754D44 VA: 0x1754D44
	public IEnumerator coroutineImmediateEntrySubMember(bool isEventBonusCheck = False) { }

	// RVA: 0x1754DE0 Offset: 0x1754DE0 VA: 0x1754DE0
	private BattleServantData[] UnloadDeadDeckActorsAndFreeEntry(bool isEnemy) { }

	// RVA: 0x1754F84 Offset: 0x1754F84 VA: 0x1754F84
	private BattleServantData[] UnloadMoveToSubMemberDeckActors(bool isEnemy) { }

	// RVA: 0x17553F4 Offset: 0x17553F4 VA: 0x17553F4
	private void PreloadAndEntryServant(int deckIndex, BattleServantData subdata, int repopOrder) { }

	// RVA: 0x1755498 Offset: 0x1755498 VA: 0x1755498
	private BattleLogicTask[] loadImmediateEntryMember() { }

	// RVA: 0x1755584 Offset: 0x1755584 VA: 0x1755584
	public void releaseServantAfterDead(int index, BattleServantData deadSvtData) { }

	// RVA: 0x1755658 Offset: 0x1755658 VA: 0x1755658
	public void replaceMember(BattleActionData.ReplaceMember replaceData, Action endCallBack) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3ACA4 Offset: 0xD3ACA4 VA: 0xD3ACA4
	// RVA: 0x1755684 Offset: 0x1755684 VA: 0x1755684
	private IEnumerator colReplaceMember(BattleActionData.ReplaceMember replaceData, Action endCallBack) { }

	// RVA: 0x1755730 Offset: 0x1755730 VA: 0x1755730
	public void startEntryMember(string endproc, bool isTactical = False) { }

	// RVA: 0x175575C Offset: 0x175575C VA: 0x175575C
	private BattleLogicTask[] startEntryMemberLocal(string endproc, bool isTactical = False) { }

	// RVA: 0x1756240 Offset: 0x1756240 VA: 0x1756240
	public void startRecoverPT(bool isTactical = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3ACB4 Offset: 0xD3ACB4 VA: 0xD3ACB4
	// RVA: 0x17562B0 Offset: 0x17562B0 VA: 0x17562B0
	private IEnumerator coroutineContinueMember(string endproc, bool isTactical) { }

	// RVA: 0x1756364 Offset: 0x1756364 VA: 0x1756364
	public void DropItemCollection() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3ACC4 Offset: 0xD3ACC4 VA: 0xD3ACC4
	// RVA: 0x1756408 Offset: 0x1756408 VA: 0x1756408
	private IEnumerator DropItemCollectionCoroutine() { }

	// RVA: 0x1756480 Offset: 0x1756480 VA: 0x1756480
	public void playRetire() { }

	// RVA: 0x1756A20 Offset: 0x1756A20 VA: 0x1756A20
	public void procRetire() { }

	// RVA: 0x17574D0 Offset: 0x17574D0 VA: 0x17574D0
	public void procWin() { }

	// RVA: 0x17575E8 Offset: 0x17575E8 VA: 0x17575E8
	public void procLosePerformance() { }

	// RVA: 0x175764C Offset: 0x175764C VA: 0x175764C
	public void procLose() { }

	// RVA: 0x175767C Offset: 0x175767C VA: 0x175767C
	public void procEndBattle() { }

	// RVA: 0x175770C Offset: 0x175770C VA: 0x175770C
	public void StartResultRequest(string endEvent) { }

	// RVA: 0x1756A78 Offset: 0x1756A78 VA: 0x1756A78
	private void connectBattleResult() { }

	// RVA: 0x17577E4 Offset: 0x17577E4 VA: 0x17577E4
	private void callbackRequest(string result) { }

	// RVA: 0x17578A0 Offset: 0x17578A0 VA: 0x17578A0
	public void connectResultErrorDialog() { }

	// RVA: 0x17579EC Offset: 0x17579EC VA: 0x17579EC
	public void requestResultErrorDialog(bool flg) { }

	// RVA: 0x1757A78 Offset: 0x1757A78 VA: 0x1757A78
	public void responseResultBattle() { }

	// RVA: 0x1757D20 Offset: 0x1757D20 VA: 0x1757D20
	public void StartShowResult(string endEvent) { }

	// RVA: 0x1757E7C Offset: 0x1757E7C VA: 0x1757E7C
	private void ngContinueBattleLoseInfomation(string endEvent) { }

	// RVA: 0x1757FA0 Offset: 0x1757FA0 VA: 0x1757FA0
	public void OpenBattleLoseDlg(bool isContinueable, bool isSelf, NotificationDialog.ClickDelegate callback, bool isFromContinue = False) { }

	// RVA: 0x1758428 Offset: 0x1758428 VA: 0x1758428
	public void setTimeAcceleration(bool skip = False) { }

	// RVA: 0x175860C Offset: 0x175860C VA: 0x175860C
	public void resetTimeAcceleration(bool skip = False) { }

	// RVA: 0x1758658 Offset: 0x1758658 VA: 0x1758658
	public void SetTimeAccelerationDifferent(bool skip = False) { }

	// RVA: 0x17586D4 Offset: 0x17586D4 VA: 0x17586D4
	public void ForceResetTimeAcceleration() { }

	// RVA: 0x17586E0 Offset: 0x17586E0 VA: 0x17586E0
	public void SetTimeAccelerationCheckDelayReset(bool skip = False) { }

	// RVA: 0x175876C Offset: 0x175876C VA: 0x175876C
	private void DelayForceResetTimeForSkip() { }

	// RVA: 0x17587F8 Offset: 0x17587F8 VA: 0x17587F8
	public void SetTimeAccelerationFix() { }

	// RVA: 0x1758968 Offset: 0x1758968 VA: 0x1758968
	public void resetTimeFixAcceleration() { }

	// RVA: 0x1758974 Offset: 0x1758974 VA: 0x1758974
	public bool IsTimeAccelerationFirst() { }

	// RVA: 0x1758998 Offset: 0x1758998 VA: 0x1758998
	public void SetTimeAccelerationFirst() { }

	// RVA: 0x17589CC Offset: 0x17589CC VA: 0x17589CC
	public void resetTimeFirstAcceleration() { }

	// RVA: 0x17589D8 Offset: 0x17589D8 VA: 0x17589D8
	public void SavePartActiontTimeAcceleration() { }

	// RVA: 0x1758A20 Offset: 0x1758A20 VA: 0x1758A20
	public void ResetPartActiontTimeAcceleration() { }

	// RVA: 0x1758A2C Offset: 0x1758A2C VA: 0x1758A2C
	public bool isTimeAcceleration() { }

	// RVA: 0x1758A74 Offset: 0x1758A74 VA: 0x1758A74
	public void initCommandBattle(string endproc) { }

	// RVA: 0x1758C08 Offset: 0x1758C08 VA: 0x1758C08
	public void InitBuffProgress() { }

	// RVA: 0x1758D1C Offset: 0x1758D1C VA: 0x1758D1C
	public void actBattleTask() { }

	// RVA: 0x1755C9C Offset: 0x1755C9C VA: 0x1755C9C
	public void actOneBattleTask(BattleLogicTask[] tasklist) { }

	// RVA: 0x17591B0 Offset: 0x17591B0 VA: 0x17591B0
	public void endActionData() { }

	// RVA: 0x1759280 Offset: 0x1759280 VA: 0x1759280
	public void AddBattleLogicTask(BattleLogicTask addTask) { }

	// RVA: 0x1759304 Offset: 0x1759304 VA: 0x1759304
	public void addBattleLogicTask(BattleLogicTask[] tasklist) { }

	// RVA: 0x1758D60 Offset: 0x1758D60 VA: 0x1758D60
	public void checkBattleTask() { }

	// RVA: 0x17593C8 Offset: 0x17593C8 VA: 0x17593C8
	public BattleLogicTask[] GetTaskArrayByType(BattleLogic.LOGICTYPE type) { }

	// RVA: 0x1758F9C Offset: 0x1758F9C VA: 0x1758F9C
	public void playTaskBattle() { }

	// RVA: 0x17594A8 Offset: 0x17594A8 VA: 0x17594A8
	private bool checkUsableTD(BattleLogicTask task) { }

	// RVA: 0x1759554 Offset: 0x1759554 VA: 0x1759554
	private BattleLogicTask createCommandTask(BattleLogicTask task) { }

	// RVA: 0x175968C Offset: 0x175968C VA: 0x175968C
	public bool checkRelationTask(BattleLogicTask task) { }

	// RVA: 0x1759DA4 Offset: 0x1759DA4 VA: 0x1759DA4
	public BattleLogicTask[] taskReaction(BattleLogicTask task) { }

	// RVA: 0x175A744 Offset: 0x175A744 VA: 0x175A744
	public BattleLogicTask[] taskEnemyEndWait(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175A854 Offset: 0x175A854 VA: 0x175A854
	public BattleLogicTask[] taskCommandWait(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1759D1C Offset: 0x1759D1C VA: 0x1759D1C
	public BattleActionData createSystem(BattleLogicTask task) { }

	// RVA: 0x175A964 Offset: 0x175A964 VA: 0x175A964
	public BattleActionData createCamera(BattleLogicTask task) { }

	// RVA: 0x175AA10 Offset: 0x175AA10 VA: 0x175AA10
	public BattleLogicTask[] taskLastActorBackStep(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175AAFC Offset: 0x175AAFC VA: 0x175AAFC
	public BattleActionData createLastActorBackStep(BattleLogicTask task) { }

	// RVA: 0x175ABA4 Offset: 0x175ABA4 VA: 0x175ABA4
	public void addBackStepActionData(int actorId, float waitTime) { }

	// RVA: 0x175AC94 Offset: 0x175AC94 VA: 0x175AC94
	public BattleActionData createEnemyCutIn(BattleLogicTask task) { }

	// RVA: 0x175AD6C Offset: 0x175AD6C VA: 0x175AD6C
	public BattleActionData createLoadImmediateEntryServant(BattleLogicTask task) { }

	// RVA: 0x175ADDC Offset: 0x175ADDC VA: 0x175ADDC
	public BattleActionData CreateFieldPlayMotion(BattleLogicTask task) { }

	// RVA: 0x175AED0 Offset: 0x175AED0 VA: 0x175AED0
	public BattleActionData breakOnBattle(BattleLogicTask task) { }

	// RVA: 0x1759C3C Offset: 0x1759C3C VA: 0x1759C3C
	public BattleActionData procBattleTask(BattleLogicTask task) { }

	// RVA: 0x175B0F8 Offset: 0x175B0F8 VA: 0x175B0F8
	public BattleLogicTask[] taskGetCriticalPoint(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175B164 Offset: 0x175B164 VA: 0x175B164
	public void turnProgressing(string endproc) { }

	// RVA: 0x175B2D4 Offset: 0x175B2D4 VA: 0x175B2D4
	public BattleLogicTask[] taskStartPlayerTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175B3CC Offset: 0x175B3CC VA: 0x175B3CC
	public BattleLogicTask[] taskStartEnemyTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175B4C4 Offset: 0x175B4C4 VA: 0x175B4C4
	public BattleLogicTask[] taskEndPlayerTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175B5E0 Offset: 0x175B5E0 VA: 0x175B5E0
	public BattleLogicTask[] taskEndEnemyTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175B6CC Offset: 0x175B6CC VA: 0x175B6CC
	public BattleLogicTask[] taskStartTactical(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175B764 Offset: 0x175B764 VA: 0x175B764
	public BattleLogicTask[] checkOverKill(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175BA08 Offset: 0x175BA08 VA: 0x175BA08
	public BattleLogicTask[] checkImmediateEntry(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175BC58 Offset: 0x175BC58 VA: 0x175BC58
	public BattleLogicTask[] startImmediateEntry(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175BDB0 Offset: 0x175BDB0 VA: 0x175BDB0
	public BattleLogicTask[] afterImmediateEntry(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175BEB0 Offset: 0x175BEB0 VA: 0x175BEB0
	public BattleLogicTask[] taskPlayerAttackTerm(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175BF60 Offset: 0x175BF60 VA: 0x175BF60
	public BattleLogicTask[] taskEnemyAttackTerm(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x175C010 Offset: 0x175C010 VA: 0x175C010
	public void finishActionBattle(string endproc) { }

	// RVA: 0x175C19C Offset: 0x175C19C VA: 0x175C19C
	public void checkEndBattle(string endproc, bool isEndOfCurrentTurn) { }

	// RVA: 0x175C7F8 Offset: 0x175C7F8 VA: 0x175C7F8
	private bool IsBattleFinishByTurnExpiration(bool isEndOfCurrentTurn) { }

	// RVA: 0x175C900 Offset: 0x175C900 VA: 0x175C900
	public void CheckRemainBattleEndWave() { }

	// RVA: 0x175C55C Offset: 0x175C55C VA: 0x175C55C
	private BattleData.WinResult getForceEndWinReason() { }

	// RVA: 0x175C604 Offset: 0x175C604 VA: 0x175C604
	private void sendWinBattleEvent(BattleData.WinResult winResult) { }

	// RVA: 0x1756514 Offset: 0x1756514 VA: 0x1756514
	private void sendLoseRetireClearEvent() { }

	// RVA: 0x175C9B0 Offset: 0x175C9B0 VA: 0x175C9B0
	public void forceDropItem() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3ACD4 Offset: 0xD3ACD4 VA: 0xD3ACD4
	// RVA: 0x175C764 Offset: 0x175C764 VA: 0x175C764
	public IEnumerator dropItemCoroutine(Action callback) { }

	// RVA: 0x175C688 Offset: 0x175C688 VA: 0x175C688
	public bool CheckEnemyDropItemAll() { }

	// RVA: 0x175CA58 Offset: 0x175CA58 VA: 0x175CA58
	private bool CheckEnemyDropItem(GameObject actorObj, out BattleActorControl actor) { }

	// RVA: 0x175CC20 Offset: 0x175CC20 VA: 0x175CC20
	public void EnemyDropItem() { }

	// RVA: 0x175CD14 Offset: 0x175CD14 VA: 0x175CD14
	public void checkNextBattle(string endproc) { }

	// RVA: 0x175CDEC Offset: 0x175CDEC VA: 0x175CDEC
	public void startContinue(bool isProgress) { }

	// RVA: 0x175CE94 Offset: 0x175CE94 VA: 0x175CE94
	public void drawCommand() { }

	// RVA: 0x175D70C Offset: 0x175D70C VA: 0x175D70C
	public void setDrawCard() { }

	// RVA: 0x175D78C Offset: 0x175D78C VA: 0x175D78C
	public void CalcDownCritical() { }

	// RVA: 0x175DCF4 Offset: 0x175DCF4 VA: 0x175DCF4
	public void CalcCritical(bool isRefresh = True) { }

	// RVA: 0x175E4DC Offset: 0x175E4DC VA: 0x175E4DC
	public void startCommand(string endproc) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3ACE4 Offset: 0xD3ACE4 VA: 0xD3ACE4
	// RVA: 0x175E56C Offset: 0x175E56C VA: 0x175E56C
	public IEnumerator startCommandIE(string endproc) { }

	// RVA: 0x175E600 Offset: 0x175E600 VA: 0x175E600
	public void resetCriticalPoint() { }

	// RVA: 0x175E604 Offset: 0x175E604 VA: 0x175E604
	public void endSelectCommand() { }

	// RVA: 0x175E6A8 Offset: 0x175E6A8 VA: 0x175E6A8
	public void checkCombo() { }

	// RVA: 0x175EF9C Offset: 0x175EF9C VA: 0x175EF9C
	public void procComboAct() { }

	// RVA: 0x175F2A0 Offset: 0x175F2A0 VA: 0x175F2A0
	public void initNexBaseData(bool flg) { }

	// RVA: 0x175F4B4 Offset: 0x175F4B4 VA: 0x175F4B4
	public void initNextTurnData() { }

	// RVA: 0x175F514 Offset: 0x175F514 VA: 0x175F514
	public void initNextWaveData() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3ACF4 Offset: 0xD3ACF4 VA: 0xD3ACF4
	// RVA: 0x175F5B8 Offset: 0x175F5B8 VA: 0x175F5B8
	public IEnumerator waitWaveStep(BattleLogicTask[] taskList, BattleData.PROGRESS progress) { }

	// RVA: 0x175F664 Offset: 0x175F664 VA: 0x175F664
	public void checkFieldAIStartTurn() { }

	// RVA: 0x175F754 Offset: 0x175F754 VA: 0x175F754
	public void checkFieldAIStartWave() { }

	// RVA: 0x175F844 Offset: 0x175F844 VA: 0x175F844
	public void checkBoostItem() { }

	// RVA: 0x175FA90 Offset: 0x175FA90 VA: 0x175FA90
	public void CheckBoostSkill() { }

	// RVA: 0x175FE50 Offset: 0x175FE50 VA: 0x175FE50
	public void checkQuestBehavior() { }

	// RVA: 0x175FF5C Offset: 0x175FF5C VA: 0x175FF5C
	public void checkGimmick() { }

	// RVA: 0x1760068 Offset: 0x1760068 VA: 0x1760068
	public void checkWaveBuff() { }

	// RVA: 0x1760468 Offset: 0x1760468 VA: 0x1760468
	public void checkFirstEntry() { }

	// RVA: 0x17608D4 Offset: 0x17608D4 VA: 0x17608D4
	public void checkEnemyAiWave() { }

	// RVA: 0x1760AFC Offset: 0x1760AFC VA: 0x1760AFC
	public void startWaveAction() { }

	// RVA: 0x1760B7C Offset: 0x1760B7C VA: 0x1760B7C
	public void endStartWaveAction() { }

	// RVA: 0x1760BBC Offset: 0x1760BBC VA: 0x1760BBC
	public void selectTactical(string endproc) { }

	// RVA: 0x1760E90 Offset: 0x1760E90 VA: 0x1760E90
	public void endSelectSkillFaze() { }

	// RVA: 0x1761048 Offset: 0x1761048 VA: 0x1761048
	public int setTargetIndex(int index) { }

	// RVA: 0x1761080 Offset: 0x1761080 VA: 0x1761080
	public int getTargetId() { }

	// RVA: 0x17610B0 Offset: 0x17610B0 VA: 0x17610B0
	public int getTargetIndex(int index) { }

	// RVA: 0x1761158 Offset: 0x1761158 VA: 0x1761158
	public bool isTimingUseSkill() { }

	// RVA: 0x1761298 Offset: 0x1761298 VA: 0x1761298
	public void wantUseSkill(BattleSkillInfoData skillInfo, int pttarget, int subtarget = -1) { }

	// RVA: 0x1761384 Offset: 0x1761384 VA: 0x1761384
	public void checkSkillTarget() { }

	// RVA: 0x176146C Offset: 0x176146C VA: 0x176146C
	public void useSkill() { }

	// RVA: 0x17616F8 Offset: 0x17616F8 VA: 0x17616F8
	public void checkStarDirection() { }

	// RVA: 0x1761B00 Offset: 0x1761B00 VA: 0x1761B00
	public void endSkill() { }

	// RVA: 0x1761F74 Offset: 0x1761F74 VA: 0x1761F74
	private void EndRequestBattleUseItem(string result) { }

	// RVA: 0x176224C Offset: 0x176224C VA: 0x176224C
	public void requestBattleUseItemErrorDialog(bool flg) { }

	// RVA: 0x176232C Offset: 0x176232C VA: 0x176232C
	public void useCommandSpell(int commandSkillId, int ptTargetId) { }

	// RVA: 0x17623C8 Offset: 0x17623C8 VA: 0x17623C8
	public void actCommandSpell() { }

	// RVA: 0x176240C Offset: 0x176240C VA: 0x176240C
	private void startCommandSpellEffect() { }

	// RVA: 0x17625A4 Offset: 0x17625A4 VA: 0x17625A4
	protected void endLoadCommandSPell(AssetData data) { }

	// RVA: 0x17629C8 Offset: 0x17629C8 VA: 0x17629C8
	public void connectCommandSpell() { }

	// RVA: 0x1762DA0 Offset: 0x1762DA0 VA: 0x1762DA0
	private void callbackContinueCommandSpell(string ret) { }

	// RVA: 0x1762DEC Offset: 0x1762DEC VA: 0x1762DEC
	public void callBackCommandSpell(string ret) { }

	// RVA: 0x1762F28 Offset: 0x1762F28 VA: 0x1762F28
	public void openConnectErrorDialog() { }

	// RVA: 0x1763074 Offset: 0x1763074 VA: 0x1763074
	public void requestErrorDialog(bool flg) { }

	// RVA: 0x1763100 Offset: 0x1763100 VA: 0x1763100
	public void endCommandSpell() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD04 Offset: 0xD3AD04 VA: 0xD3AD04
	// RVA: 0x176312C Offset: 0x176312C VA: 0x176312C
	private IEnumerator endCommandSpellCoroutine() { }

	// RVA: 0x176319C Offset: 0x176319C VA: 0x176319C
	public void StartEnemyCommandSpellEffect() { }

	// RVA: 0x1763270 Offset: 0x1763270 VA: 0x1763270
	protected void endLoadEnemyCommandSpell(AssetData aData) { }

	// RVA: 0x17624E0 Offset: 0x17624E0 VA: 0x17624E0
	protected string GetCommandSpellAssetName(int id) { }

	// RVA: 0x1762904 Offset: 0x1762904 VA: 0x1762904
	protected string GetCommandSpellPrefabName(int id) { }

	// RVA: 0x1763534 Offset: 0x1763534 VA: 0x1763534
	public void actPtPassiveSkill() { }

	// RVA: 0x1763B58 Offset: 0x1763B58 VA: 0x1763B58
	public void actEnemyPtPassiveSkill(int actUniqueId = 0, bool isShift = False, bool isDataload = False) { }

	// RVA: 0x1764048 Offset: 0x1764048 VA: 0x1764048
	public void actEnemyPassiveSkill(int uniqueId) { }

	// RVA: 0x17642BC Offset: 0x17642BC VA: 0x17642BC
	public void actClassPassiveSkill(int uniqueId) { }

	// RVA: 0x175E9EC Offset: 0x175E9EC VA: 0x175E9EC
	public BattleComboData checkCommandCombo(int[] svtid, int[] typeid, bool[] isTreasureDvc, bool withSealedCard) { }

	// RVA: 0x1764590 Offset: 0x1764590 VA: 0x1764590
	public bool isNoble(BattleLogic.DamageType inType) { }

	// RVA: 0x176459C Offset: 0x176459C VA: 0x176459C
	public BattleActionData.DamageData getDamagelist(BattleServantData actor, BattleServantData target, BattleCommandData command) { }

	// RVA: 0x1765E98 Offset: 0x1765E98 VA: 0x1765E98
	public int getPerlist(int[] list, int index) { }

	// RVA: 0x1764674 Offset: 0x1764674 VA: 0x1764674
	public BattleActionData.DamageData getDamagelist(BattleServantData actor, BattleServantData target, BattleCommandData command, BattleLogic.DamageType nobleType, int funcIndex, int[] perlist, int[] svtIndv, int[] buffIndv, int[] rarityList, bool IsIncludeIgnoreIndividuality = False, bool isSafe = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x1766494 Offset: 0x1766494 VA: 0x1766494
	public BattleActionData.DamageData getFunctionDamagelist(BattleServantData actor, BattleServantData target, int per, int funcIndex, bool isSafe = False) { }

	// RVA: 0x17665B4 Offset: 0x17665B4 VA: 0x17665B4
	public BattleActionData.DamageData getFunctionNpDamagelist(BattleServantData actor, BattleServantData target, int[] perlist, int funcIndex, BattleLogic.DamageType type, int[] svtIndv, int[] buffIndv, int[] rarityList, bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x17660E8 Offset: 0x17660E8 VA: 0x17660E8
	public int getAttackNp(BattleServantData atkSvt, BattleServantData defSvt, BattleCommandData command, bool critical, bool isNoble) { }

	// RVA: 0x1766220 Offset: 0x1766220 VA: 0x1766220
	public int getDefenseNp(BattleServantData atkSvt, BattleServantData defSvt, BattleCommandData command) { }

	// RVA: 0x1766328 Offset: 0x1766328 VA: 0x1766328
	public int getAttackStar(BattleServantData atkSvt, BattleServantData defSvt, BattleCommandData command, bool critical) { }

	// RVA: 0x1765EFC Offset: 0x1765EFC VA: 0x1765EFC
	private float getClassMagnification(BattleCommandData command, BattleServantData selfSvt, BattleServantData opSvt, bool isAct, out BattleLogic.ClassRelationBuffShowState atkClassRelationBuffShowState, out BattleLogic.ClassRelationBuffShowState defClassRelationBuffShowState) { }

	// RVA: 0x1766700 Offset: 0x1766700 VA: 0x1766700
	public float getClassMagnification(BattleCommandData command, BattleServantData selfSvt, BattleServantData opSvt, bool isAct) { }

	// RVA: 0x176672C Offset: 0x176672C VA: 0x176672C
	public void checkUsedBuff() { }

	// RVA: 0x17667E0 Offset: 0x17667E0 VA: 0x17667E0
	public void checkUsedGutsBuff(int targetId) { }

	// RVA: 0x1766844 Offset: 0x1766844 VA: 0x1766844
	public void resetReducedHpAll() { }

	// RVA: 0x17668E8 Offset: 0x17668E8 VA: 0x17668E8
	public void updateResultServant() { }

	// RVA: 0x176698C Offset: 0x176698C VA: 0x176698C
	public void updateConditionsBuffAll() { }

	// RVA: 0x1766B3C Offset: 0x1766B3C VA: 0x1766B3C
	public bool setDamageSideEffect(BattleActionData mainAction, int attackId, int targetId, BattleCommandData command) { }

	// RVA: 0x175B8D8 Offset: 0x175B8D8 VA: 0x175B8D8
	public void resetOverKill() { }

	// RVA: 0x175BB30 Offset: 0x175BB30 VA: 0x175BB30
	public bool existOverKillTarget() { }

	// RVA: 0x1766E98 Offset: 0x1766E98 VA: 0x1766E98
	public bool checkSelectFunctionTarget(int[] funclist, bool isCheckCommandType = False) { }

	// RVA: 0x1766FC8 Offset: 0x1766FC8 VA: 0x1766FC8
	public bool checkSelectTargetFunction(int[] funclist, out bool mainFlg, out bool subFlg) { }

	// RVA: 0x1767124 Offset: 0x1767124 VA: 0x1767124
	public bool checkEnemyTargetFunction(int[] funclist, DataVals[] dataValsArray) { }

	// RVA: 0x17672DC Offset: 0x17672DC VA: 0x17672DC
	public bool checkPtTargetFunction(int[] funclist) { }

	// RVA: 0x17673F4 Offset: 0x17673F4 VA: 0x17673F4
	public bool checkFunctionTargetsAvailable(int[] funclist, out bool isCheckHate, int actorUniqueId) { }

	// RVA: 0x1758584 Offset: 0x1758584 VA: 0x1758584
	public bool isTutorial() { }

	// RVA: 0x17585B4 Offset: 0x17585B4 VA: 0x17585B4
	public int getTutorialId() { }

	// RVA: 0x176771C Offset: 0x176771C VA: 0x176771C
	public int getWave() { }

	// RVA: 0x17585E0 Offset: 0x17585E0 VA: 0x17585E0
	public int getTurn() { }

	// RVA: 0x1767748 Offset: 0x1767748 VA: 0x1767748
	public bool isTutorialMasterStatus() { }

	// RVA: 0x175D108 Offset: 0x175D108 VA: 0x175D108
	public BattleCommandData[] getTutorialCommandCards() { }

	// RVA: 0x1767824 Offset: 0x1767824 VA: 0x1767824
	public BattleCommandData getCommandData(BattleServantData svtData, BattleCommand.TYPE type) { }

	// RVA: 0x1758330 Offset: 0x1758330 VA: 0x1758330
	public string raidBossName() { }

	// RVA: 0x1767A14 Offset: 0x1767A14 VA: 0x1767A14
	private Vector2 FSTuArrow(BattleLogic.TuStates tuState) { }

	// RVA: 0x1767B44 Offset: 0x1767B44 VA: 0x1767B44
	private Rect FSTuSquare(BattleLogic.TuStates tuState) { }

	// RVA: 0x1767CD8 Offset: 0x1767CD8 VA: 0x1767CD8
	public void checkTurnStart() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD14 Offset: 0xD3AD14 VA: 0xD3AD14
	// RVA: 0x1768CD8 Offset: 0x1768CD8 VA: 0x1768CD8
	private IEnumerator coroutineStartLimitTurnTutorial() { }

	// RVA: 0x1768D48 Offset: 0x1768D48 VA: 0x1768D48
	public void callbackTutorialAttack02() { }

	// RVA: 0x1768E24 Offset: 0x1768E24 VA: 0x1768E24
	public void callBackNoEntity(bool flg) { }

	// RVA: 0x1768E88 Offset: 0x1768E88 VA: 0x1768E88
	public void checkSelectEnemyClick(int index) { }

	// RVA: 0x1768FCC Offset: 0x1768FCC VA: 0x1768FCC
	public void callbackTutorialSelectEnemyNext() { }

	// RVA: 0x17690EC Offset: 0x17690EC VA: 0x17690EC
	public void callbackResumeLimitTurnEffect() { }

	// RVA: 0x1769258 Offset: 0x1769258 VA: 0x1769258
	public void callbackEventTutorialBase() { }

	// RVA: 0x17692C8 Offset: 0x17692C8 VA: 0x17692C8
	public void initQuest(string endproc) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD24 Offset: 0xD3AD24 VA: 0xD3AD24
	// RVA: 0x17694F8 Offset: 0x17694F8 VA: 0x17694F8
	private IEnumerator coroutineInitQuest(string endproc) { }

	// RVA: 0x176958C Offset: 0x176958C VA: 0x176958C
	public void loadSaveBattle() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD34 Offset: 0xD3AD34 VA: 0xD3AD34
	// RVA: 0x17695B8 Offset: 0x17695B8 VA: 0x17695B8
	private IEnumerator coroutineLoadQuest() { }

	// RVA: 0x1769628 Offset: 0x1769628 VA: 0x1769628
	public void loadNstage(string endproc) { }

	// RVA: 0x17696E8 Offset: 0x17696E8 VA: 0x17696E8
	public void setNextBattle(string endproc) { }

	// RVA: 0x1769718 Offset: 0x1769718 VA: 0x1769718
	public void loadNextstage(string endproc) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD44 Offset: 0xD3AD44 VA: 0xD3AD44
	// RVA: 0x1769654 Offset: 0x1769654 VA: 0x1769654
	private IEnumerator coroutineLoadNstage(string endproc) { }

	// RVA: 0x1769744 Offset: 0x1769744 VA: 0x1769744
	public void loadSaveWave() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD54 Offset: 0xD3AD54 VA: 0xD3AD54
	// RVA: 0x1769770 Offset: 0x1769770 VA: 0x1769770
	private IEnumerator coroutineLoadSaveWave() { }

	// RVA: 0x17697E0 Offset: 0x17697E0 VA: 0x17697E0
	public bool checkInField(int uniqueId) { }

	// RVA: 0x1755DBC Offset: 0x1755DBC VA: 0x1755DBC
	public void updateFieldBuff() { }

	// RVA: 0x17698BC Offset: 0x17698BC VA: 0x17698BC
	public void callServant(BattleActionData actionData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD64 Offset: 0xD3AD64 VA: 0xD3AD64
	// RVA: 0x17698E8 Offset: 0x17698E8 VA: 0x17698E8
	private IEnumerator CorCallServant(BattleActionData actionData) { }

	// RVA: 0x1769984 Offset: 0x1769984 VA: 0x1769984
	private void PreLoadSummonServant(BattleActionData.SummonServant[] summonServantArray, List<BattleLogic.SummonInfo> summonInfoList) { }

	// RVA: 0x1769BCC Offset: 0x1769BCC VA: 0x1769BCC
	public void FieldCallServant(BattleActionData actionData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD74 Offset: 0xD3AD74 VA: 0xD3AD74
	// RVA: 0x1769BF8 Offset: 0x1769BF8 VA: 0x1769BF8
	private IEnumerator CorFieldCallServant(BattleActionData actionData) { }

	// RVA: 0x1769C94 Offset: 0x1769C94 VA: 0x1769C94
	public void addEnemyActPriorityList(BattleServantData svtData) { }

	// RVA: 0x175B2A0 Offset: 0x175B2A0 VA: 0x175B2A0
	public void updateEnemyTargetLogic() { }

	// RVA: 0x1769CCC Offset: 0x1769CCC VA: 0x1769CCC
	public void updateGlobalTarget() { }

	// RVA: 0x1761F2C Offset: 0x1761F2C VA: 0x1761F2C
	public void updateEnemyTarget(bool isTargetChange = True) { }

	// RVA: 0x1769D2C Offset: 0x1769D2C VA: 0x1769D2C
	public bool isDeadOkTurn(int uniqueId) { }

	// RVA: 0x1769DB8 Offset: 0x1769DB8 VA: 0x1769DB8
	public BattleActionData getNoEffectObject(int targetId, int funcIndex, DataVals dataVals, bool isCommandSideEffect, string uniqueText) { }

	// RVA: 0x1769E20 Offset: 0x1769E20 VA: 0x1769E20
	private void OnPhaseTactical() { }

	// RVA: 0x1769E84 Offset: 0x1769E84 VA: 0x1769E84
	private void OnWaitTutorial() { }

	// RVA: 0x1769EB4 Offset: 0x1769EB4 VA: 0x1769EB4
	public void removeDoNotSelectCommandCardBuff(int buffId, BattleServantData target) { }

	// RVA: 0x175F570 Offset: 0x175F570 VA: 0x175F570
	public void ChangePhase(ServantAnimationOverwriteEntity.PhaseType phase) { }

	// RVA: 0x1769F9C Offset: 0x1769F9C VA: 0x1769F9C
	public void CheckAssistSkill() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3AD84 Offset: 0xD3AD84 VA: 0xD3AD84
	// RVA: 0x1769FC8 Offset: 0x1769FC8 VA: 0x1769FC8
	private IEnumerator CoroutineCheckAssistSkill() { }

	// RVA: 0x176A040 Offset: 0x176A040 VA: 0x176A040
	public void checkFieldAIEntry() { }

	// RVA: 0x176A130 Offset: 0x176A130 VA: 0x176A130
	public void SendFsmEventForPreCheckEndBattle() { }

	// RVA: 0x1762C64 Offset: 0x1762C64 VA: 0x1762C64
	private void SkipCommandSpellRequest(int commandSpellId) { }

