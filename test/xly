	public const EventInfoPointGaugeComponent.GaugeState NONE = 0;
	public const EventInfoPointGaugeComponent.GaugeState CLOSE = 1;
	public const EventInfoPointGaugeComponent.GaugeState OPEN = 2;
}

// Namespace: 
public enum EventInfoPointGaugeComponent.AnimeState // TypeDefIndex: 5477
{
	// Fields
	public int value__; // 0x0
	public const EventInfoPointGaugeComponent.AnimeState NONE = 0;
	public const EventInfoPointGaugeComponent.AnimeState PLAY = 1;
}

// Namespace: 
public class EventInfoPointGaugeControl : MonoBehaviour // TypeDefIndex: 5478
{
	// Fields
	public static readonly string EVENT_POINT_GAUGE_EFFECT_CHANGE; // 0x0
	public static readonly Vector3 EVENT_POINT_GAUGE_POSITION; // 0x8
	private static readonly string BATTLE_MODE_SUFFIX; // 0x18
	private AssetData eventInfoAssetData; // 0x18
	private GameObject eventPointGaugeObj; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC4CE88 Offset: 0xC4CE88 VA: 0xC4CE88
	[DebuggerBrowsableAttribute] // RVA: 0xC4CE88 Offset: 0xC4CE88 VA: 0xC4CE88
	private EventInfoPointGaugeComponent <EventPointGaugeComponent>k__BackingField; // 0x28
	private AssetData eventPointGaugeEffectAssetData; // 0x30
	private GameObject[] eventPointGaugeEffectPrefabList; // 0x38
	private GameObject eventPointGaugeChangeEffectPrefab; // 0x40
	private GameObject eventRoot; // 0x48

	// Properties
	public EventInfoPointGaugeComponent EventPointGaugeComponent { get; set; }

	// Methods

	// RVA: 0x15FB970 Offset: 0x15FB970 VA: 0x15FB970
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7DD4 Offset: 0xCC7DD4 VA: 0xCC7DD4
	// RVA: 0x15FB978 Offset: 0x15FB978 VA: 0x15FB978
	public EventInfoPointGaugeComponent get_EventPointGaugeComponent() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7DE4 Offset: 0xCC7DE4 VA: 0xCC7DE4
	// RVA: 0x15FB980 Offset: 0x15FB980 VA: 0x15FB980
	private void set_EventPointGaugeComponent(EventInfoPointGaugeComponent value) { }

	// RVA: 0x15FB988 Offset: 0x15FB988 VA: 0x15FB988
	public void SetRootObject(GameObject root) { }

	// RVA: 0x15FB990 Offset: 0x15FB990 VA: 0x15FB990
	public void LoadEventInfoAssetData(EventInfoPointGaugeControl.assetLoadFinish callBack, int eventId) { }

	// RVA: 0x15FBD2C Offset: 0x15FBD2C VA: 0x15FBD2C
	public void SetupEventPointGaugeDisp(EventDetailEntity eventDetailEntity, bool isActive = True, Nullable<Vector3> pos) { }

	// RVA: 0x15FC2BC Offset: 0x15FC2BC VA: 0x15FC2BC
	public void SetupEventPointGaugeAndPlayEffect(EventDetailEntity eventDetailEntity, bool isActive = True, Action callback, Nullable<Vector3> pos) { }

	// RVA: 0x15FC0E8 Offset: 0x15FC0E8 VA: 0x15FC0E8
	public void SetupEventPointGaugeComponent(int eventId, bool isActive, Nullable<Vector3> pos) { }

	// RVA: 0x15FC048 Offset: 0x15FC048 VA: 0x15FC048
	public static bool IsEventPointGaugeOpen(int eventId) { }

	// RVA: 0x15FC7E8 Offset: 0x15FC7E8 VA: 0x15FC7E8
	public EventInfoPointGaugeComponent.GaugeState GetEventPointGaugeState(int eventId) { }

	// RVA: 0x15FC634 Offset: 0x15FC634 VA: 0x15FC634
	public GameObject CreateEventPointGaugePrefab(Nullable<Vector3> pos) { }

	// RVA: 0x15FC9E8 Offset: 0x15FC9E8 VA: 0x15FC9E8
	private void LoadEventPointGaugeEffect(EventInfoPointGaugeControl.assetLoadFinish callbackEndFunc, int eventId) { }

	// RVA: 0x15FCBA4 Offset: 0x15FCBA4 VA: 0x15FCBA4
	public void LoadEventPointGaugeEffect(int eventId, Action callbackEndFunc) { }

	// RVA: 0x15FC4B0 Offset: 0x15FC4B0 VA: 0x15FC4B0
	public void PlayEventPointGaugeEffect(int eventId, Action callback) { }

	// RVA: 0x15FCC68 Offset: 0x15FCC68 VA: 0x15FCC68
	public void PlayEventPointGaugeChangeEffect(GameObject parent, string name, EventInfoPointGaugeComponent.GaugeState beforeGauge, EventInfoPointGaugeComponent.GaugeState afterGauge, Action callback) { }

	// RVA: 0x15FCF3C Offset: 0x15FCF3C VA: 0x15FCF3C
	public void PlayEventPointGaugeAddEffect(EventInfoPointGaugeComponent.GaugeState gaugeState, int effectState, int basePoint, int addPoint, Action callback, bool isBattleMode = False) { }

	// RVA: 0x15FCEC8 Offset: 0x15FCEC8 VA: 0x15FCEC8
	public void DestroyEventPointGaugeChangeEffect() { }

	// RVA: 0x15FD48C Offset: 0x15FD48C VA: 0x15FD48C
	public void DestroyEventPointGaugeEffect() { }

	// RVA: 0x15FD5A0 Offset: 0x15FD5A0 VA: 0x15FD5A0
	public void DestroyEventInfo() { }

	// RVA: 0x15FD64C Offset: 0x15FD64C VA: 0x15FD64C
	public void ReleaseAsset() { }

	// RVA: 0x15FD6FC Offset: 0x15FD6FC VA: 0x15FD6FC
	private static void .cctor() { }
}

// Namespace: 
public sealed class EventInfoPointGaugeControl.assetLoadFinish : MulticastDelegate // TypeDefIndex: 5479
{
	// Methods

	// RVA: 0x15FC0D8 Offset: 0x15FC0D8 VA: 0x15FC0D8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15FBB00 Offset: 0x15FBB00 VA: 0x15FBB00 Slot: 11
	public virtual void Invoke(int eventId) { }

	// RVA: 0x15FDDAC Offset: 0x15FDDAC VA: 0x15FDDAC Slot: 12
	public virtual IAsyncResult BeginInvoke(int eventId, AsyncCallback callback, object object) { }

	// RVA: 0x15FDE38 Offset: 0x15FDE38 VA: 0x15FDE38 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41DD4 Offset: 0xC41DD4 VA: 0xC41DD4
private sealed class EventInfoPointGaugeControl.<LoadEventInfoAssetData>c__AnonStorey0 // TypeDefIndex: 5480
{
	// Fields
	internal EventInfoPointGaugeControl.assetLoadFinish callBack; // 0x10
	internal int eventId; // 0x18
	internal EventInfoPointGaugeControl $this; // 0x20

	// Methods

	// RVA: 0x15FBAF8 Offset: 0x15FBAF8 VA: 0x15FBAF8
	public void .ctor() { }

	// RVA: 0x15FD7B0 Offset: 0x15FD7B0 VA: 0x15FD7B0
	internal void <>m__0(AssetData prefabData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41DE4 Offset: 0xC41DE4 VA: 0xC41DE4
private sealed class EventInfoPointGaugeControl.<SetupEventPointGaugeDisp>c__AnonStorey1 // TypeDefIndex: 5481
{
	// Fields
	internal bool isActive; // 0x10
	internal Nullable<Vector3> pos; // 0x14
	internal EventInfoPointGaugeControl $this; // 0x28

	// Methods

	// RVA: 0x15FC040 Offset: 0x15FC040 VA: 0x15FC040
	public void .ctor() { }

	// RVA: 0x15FDD28 Offset: 0x15FDD28 VA: 0x15FDD28
	internal void <>m__0(int eventId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41DF4 Offset: 0xC41DF4 VA: 0xC41DF4
private sealed class EventInfoPointGaugeControl.<SetupEventPointGaugeAndPlayEffect>c__AnonStorey2 // TypeDefIndex: 5482
{
	// Fields
	internal bool isActive; // 0x10
	internal Nullable<Vector3> pos; // 0x14
	internal Action callback; // 0x28
	internal EventInfoPointGaugeControl $this; // 0x30

	// Methods

	// RVA: 0x15FC4A8 Offset: 0x15FC4A8 VA: 0x15FC4A8
	public void .ctor() { }

	// RVA: 0x15FDC14 Offset: 0x15FDC14 VA: 0x15FDC14
	internal void <>m__0(int eventId) { }

	// RVA: 0x15FDCE8 Offset: 0x15FDCE8 VA: 0x15FDCE8
	internal void <>m__1(int eId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E04 Offset: 0xC41E04 VA: 0xC41E04
private sealed class EventInfoPointGaugeControl.<LoadEventPointGaugeEffect>c__AnonStorey3 // TypeDefIndex: 5483
{
	// Fields
	internal EventInfoPointGaugeControl.assetLoadFinish callbackEndFunc; // 0x10
	internal int eventId; // 0x18
	internal EventInfoPointGaugeControl $this; // 0x20

	// Methods

	// RVA: 0x15FCB9C Offset: 0x15FCB9C VA: 0x15FCB9C
	public void .ctor() { }

	// RVA: 0x15FD80C Offset: 0x15FD80C VA: 0x15FD80C
	internal void <>m__0(AssetData prefabData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E14 Offset: 0xC41E14 VA: 0xC41E14
private sealed class EventInfoPointGaugeControl.<LoadEventPointGaugeEffect>c__AnonStorey4 // TypeDefIndex: 5484
{
	// Fields
	internal Action callbackEndFunc; // 0x10

	// Methods

	// RVA: 0x15FCC58 Offset: 0x15FCC58 VA: 0x15FCC58
	public void .ctor() { }

	// RVA: 0x15FD868 Offset: 0x15FD868 VA: 0x15FD868
	internal void <>m__0(int eId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E24 Offset: 0xC41E24 VA: 0xC41E24
private sealed class EventInfoPointGaugeControl.<PlayEventPointGaugeEffect>c__AnonStorey5 // TypeDefIndex: 5485
{
	// Fields
	internal int afterPoint; // 0x10
	internal int beforePoint; // 0x14
	internal EventInfoPointGaugeComponent.GaugeState afterGauge; // 0x18
	internal Action callback; // 0x20
	internal EventInfoPointGaugeControl $this; // 0x28

	// Methods

	// RVA: 0x15FCC60 Offset: 0x15FCC60 VA: 0x15FCC60
	public void .ctor() { }

	// RVA: 0x15FD9AC Offset: 0x15FD9AC VA: 0x15FD9AC
	internal void <>m__0() { }

	// RVA: 0x15FDB78 Offset: 0x15FDB78 VA: 0x15FDB78
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E34 Offset: 0xC41E34 VA: 0xC41E34
private sealed class EventInfoPointGaugeControl.<PlayEventPointGaugeChangeEffect>c__AnonStorey6 // TypeDefIndex: 5486
{
	// Fields
	internal EventInfoPointGaugeComponent.GaugeState afterGauge; // 0x10
	internal Action callback; // 0x18
	internal EventInfoPointGaugeControl $this; // 0x20

	// Methods

	// RVA: 0x15FCEC0 Offset: 0x15FCEC0 VA: 0x15FCEC0
	public void .ctor() { }

	// RVA: 0x15FD934 Offset: 0x15FD934 VA: 0x15FD934
	internal void <>m__0() { }

	// RVA: 0x15FD97C Offset: 0x15FD97C VA: 0x15FD97C
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E44 Offset: 0xC41E44 VA: 0xC41E44
private sealed class EventInfoPointGaugeControl.<PlayEventPointGaugeAddEffect>c__AnonStorey7 // TypeDefIndex: 5487
{
	// Fields
	internal int basePoint; // 0x10
	internal int addPoint; // 0x14
	internal Action callback; // 0x18
	internal EventInfoPointGaugeControl $this; // 0x20

	// Methods

	// RVA: 0x15FD484 Offset: 0x15FD484 VA: 0x15FD484
	public void .ctor() { }

	// RVA: 0x15FD874 Offset: 0x15FD874 VA: 0x15FD874
	internal void <>m__0() { }
}

// Namespace: 
public class EventInfoPossessionItemCounter : EventInfoUIBase // TypeDefIndex: 5488
{
	// Fields
	[SerializeField] // RVA: 0xC4CEC4 Offset: 0xC4CEC4 VA: 0xC4CEC4
	private UISprite bgSprite; // 0x28
	[SerializeField] // RVA: 0xC4CED4 Offset: 0xC4CED4 VA: 0xC4CED4
	private UILabel possessionTitleLabel; // 0x30
	[SerializeField] // RVA: 0xC4CEE4 Offset: 0xC4CEE4 VA: 0xC4CEE4
	private UILabel possessionValueLabel; // 0x38
	[SerializeField] // RVA: 0xC4CEF4 Offset: 0xC4CEF4 VA: 0xC4CEF4
	private string bgSpriteName; // 0x40
	[SerializeField] // RVA: 0xC4CF04 Offset: 0xC4CF04 VA: 0xC4CF04
	private int possessionNumMax; // 0x48
	private int itemId; // 0x4C
	private long itemNum; // 0x50

	// Methods

	// RVA: 0x15FDE44 Offset: 0x15FDE44 VA: 0x15FDE44
	public void .ctor() { }

	// RVA: 0x15FDE48 Offset: 0x15FDE48 VA: 0x15FDE48 Slot: 5
	public override void Setup(EventUiValueEntity[] entity) { }

	// RVA: 0x15FE15C Offset: 0x15FE15C VA: 0x15FE15C Slot: 9
	public override void Redisplay() { }

	// RVA: 0x15FDFA4 Offset: 0x15FDFA4 VA: 0x15FDFA4
	private void UpdateDisp() { }
}

// Namespace: 
public class EventInfoProductivityGrowthDialog : BaseDialog // TypeDefIndex: 5489
{
	// Fields
	[SerializeField] // RVA: 0xC4CF14 Offset: 0xC4CF14 VA: 0xC4CF14
	private UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xC4CF24 Offset: 0xC4CF24 VA: 0xC4CF24
	private UILabel messageLabel; // 0x60
	[SerializeField] // RVA: 0xC4CF34 Offset: 0xC4CF34 VA: 0xC4CF34
	private UIScrollView scrollView; // 0x68
	[SerializeField] // RVA: 0xC4CF44 Offset: 0xC4CF44 VA: 0xC4CF44
	private UILabel closeLabel; // 0x70
	[SerializeField] // RVA: 0xC4CF54 Offset: 0xC4CF54 VA: 0xC4CF54
	private GameObject[] dispObjList; // 0x78
	[SerializeField] // RVA: 0xC4CF64 Offset: 0xC4CF64 VA: 0xC4CF64
	private UILabel[] messageList; // 0x80
	[SerializeField] // RVA: 0xC4CF74 Offset: 0xC4CF74 VA: 0xC4CF74
	private ItemIconComponent[] countIconList01; // 0x88
	[SerializeField] // RVA: 0xC4CF84 Offset: 0xC4CF84 VA: 0xC4CF84
	private UILabel[] countLabelList01; // 0x90
	[SerializeField] // RVA: 0xC4CF94 Offset: 0xC4CF94 VA: 0xC4CF94
	private ItemIconComponent[] countIconList02; // 0x98
	[SerializeField] // RVA: 0xC4CFA4 Offset: 0xC4CFA4 VA: 0xC4CFA4
	private UILabel[] countLabelList02; // 0xA0
	[SerializeField] // RVA: 0xC4CFB4 Offset: 0xC4CFB4 VA: 0xC4CFB4
	private ItemIconComponent[] countIconList03; // 0xA8
	[SerializeField] // RVA: 0xC4CFC4 Offset: 0xC4CFC4 VA: 0xC4CFC4
	private UILabel[] countLabelList03; // 0xB0
	[SerializeField] // RVA: 0xC4CFD4 Offset: 0xC4CFD4 VA: 0xC4CFD4
	private ItemIconComponent[] countIconList04; // 0xB8
	[SerializeField] // RVA: 0xC4CFE4 Offset: 0xC4CFE4 VA: 0xC4CFE4
	private UILabel[] countLabelList04; // 0xC0
	private Action closeAction; // 0xC8

	// Methods

	// RVA: 0x15FE160 Offset: 0x15FE160 VA: 0x15FE160
	public void .ctor() { }

	// RVA: 0x15FE1C8 Offset: 0x15FE1C8 VA: 0x15FE1C8
	private void Init() { }

	// RVA: 0x15FE32C Offset: 0x15FE32C VA: 0x15FE32C
	public void Open(Action closeAction) { }

	// RVA: 0x15FE9B4 Offset: 0x15FE9B4 VA: 0x15FE9B4
	public void OnClickCloseButton() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7DF4 Offset: 0xCC7DF4 VA: 0xCC7DF4
	// RVA: 0x15FEA58 Offset: 0x15FEA58 VA: 0x15FEA58
	private void <OnClickCloseButton>m__0() { }
}

// Namespace: 
public class EventInfoQPPointCounter : EventInfoUIBase // TypeDefIndex: 5490
{
	// Fields
	[SerializeField] // RVA: 0xC4CFF4 Offset: 0xC4CFF4 VA: 0xC4CFF4
	private UISprite PointCounterSp; // 0x28
	[SerializeField] // RVA: 0xC4D004 Offset: 0xC4D004 VA: 0xC4D004
	private UISprite NextCounterSp; // 0x30
	[SerializeField] // RVA: 0xC4D014 Offset: 0xC4D014 VA: 0xC4D014
	private UISprite LimitCounterSp; // 0x38
	[SerializeField] // RVA: 0xC4D024 Offset: 0xC4D024 VA: 0xC4D024
	private UILabel NextCounterLabel; // 0x40
	[SerializeField] // RVA: 0xC4D034 Offset: 0xC4D034 VA: 0xC4D034
	private UILabel LimitCounterLabel; // 0x48
	[SerializeField] // RVA: 0xC4D044 Offset: 0xC4D044 VA: 0xC4D044
	private UISprite[] TotalPointNumberSp; // 0x50
	[SerializeField] // RVA: 0xC4D054 Offset: 0xC4D054 VA: 0xC4D054
	private UISprite[] CommaSp; // 0x58
	[SerializeField] // RVA: 0xC4D064 Offset: 0xC4D064 VA: 0xC4D064
	private GameObject TotalCounterParent; // 0x60
	[SerializeField] // RVA: 0xC4D074 Offset: 0xC4D074 VA: 0xC4D074
	private GameObject NextCounterParent; // 0x68
	[SerializeField] // RVA: 0xC4D084 Offset: 0xC4D084 VA: 0xC4D084
	private GameObject LimitCountParent; // 0x70
	[SerializeField] // RVA: 0xC4D094 Offset: 0xC4D094 VA: 0xC4D094
	private UISprite OverlaySp; // 0x78
	[SerializeField] // RVA: 0xC4D0A4 Offset: 0xC4D0A4 VA: 0xC4D0A4
	private float DigitDefaultScale; // 0x80
	[SerializeField] // RVA: 0xC4D0B4 Offset: 0xC4D0B4 VA: 0xC4D0B4
	private float Digit10Scale; // 0x84
	[SerializeField] // RVA: 0xC4D0C4 Offset: 0xC4D0C4 VA: 0xC4D0C4
	private string OverlaySpName; // 0x88
	private int eventId; // 0x90
	private long totalPoint; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xC4D0D4 Offset: 0xC4D0D4 VA: 0xC4D0D4
	private static Func<EventMissionConditionEntity, long> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x15FEA84 Offset: 0x15FEA84 VA: 0x15FEA84
	public void .ctor() { }

	// RVA: 0x15FEAE8 Offset: 0x15FEAE8 VA: 0x15FEAE8
	private void Start() { }

	// RVA: 0x15FF064 Offset: 0x15FF064 VA: 0x15FF064 Slot: 5
	public override void Setup(EventUiValueEntity[] entity) { }

	// RVA: 0x15FF068 Offset: 0x15FF068 VA: 0x15FF068 Slot: 11
	protected override void SetEventId(object val) { }

	// RVA: 0x15FED78 Offset: 0x15FED78 VA: 0x15FED78
	private void UpdateDisp() { }

	// RVA: 0x15FF53C Offset: 0x15FF53C VA: 0x15FF53C
	private void SetPointNumSprite(long number, UISprite[] sprites) { }

	// RVA: 0x15FFAB0 Offset: 0x15FFAB0 VA: 0x15FFAB0
	private int GetDigit(long num) { }

	// RVA: 0x15FFAD8 Offset: 0x15FFAD8 VA: 0x15FFAD8
	private long GetDigitNumber(long number, long digit) { }

	// RVA: 0x15FF148 Offset: 0x15FF148 VA: 0x15FF148
	private long GetNextPoint() { }

	// RVA: 0x15FF4A0 Offset: 0x15FF4A0 VA: 0x15FF4A0
	private long GetLimitPoint() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7E04 Offset: 0xCC7E04 VA: 0xCC7E04
	// RVA: 0x15FFB28 Offset: 0x15FFB28 VA: 0x15FFB28
	private static long <GetNextPoint>m__0(EventMissionConditionEntity entity) { }
}

// Namespace: 
private class EventInfoQPPointCounter.NextDisplayData // TypeDefIndex: 5491
{
	// Fields
	public int eventId; // 0x10
	public int hiddenMissionId; // 0x14
	public int redisplayQuestId; // 0x18

	// Methods

	// RVA: 0x15FFB50 Offset: 0x15FFB50 VA: 0x15FFB50
	public void .ctor() { }
}

// Namespace: 
public class EventInfoRaidTimeComponent : EventInfoUIBase // TypeDefIndex: 5492
{
	// Fields
	[SerializeField] // RVA: 0xC4D0E4 Offset: 0xC4D0E4 VA: 0xC4D0E4
	private string bgSpriteName; // 0x28
	[SerializeField] // RVA: 0xC4D0F4 Offset: 0xC4D0F4 VA: 0xC4D0F4
	private UISprite bgSprite; // 0x30
	[SerializeField] // RVA: 0xC4D104 Offset: 0xC4D104 VA: 0xC4D104
	private UILabel titleText; // 0x38
	[SerializeField] // RVA: 0xC4D114 Offset: 0xC4D114 VA: 0xC4D114
	private UILabel timeText; // 0x40
	[SerializeField] // RVA: 0xC4D124 Offset: 0xC4D124 VA: 0xC4D124
	private UILabel timeOverText; // 0x48
	private EventUiEntity eventUiEntity; // 0x50
	private long reidTimeLimit; // 0x58
	private bool isUpdate; // 0x60

	// Methods

	// RVA: 0x15FFB58 Offset: 0x15FFB58 VA: 0x15FFB58
	public void .ctor() { }

	// RVA: 0x15FFB5C Offset: 0x15FFB5C VA: 0x15FFB5C
	private void Update() { }

	// RVA: 0x15FFFB0 Offset: 0x15FFFB0 VA: 0x15FFFB0 Slot: 4
	public override void Initialization(EventUiEntity entity) { }

	// RVA: 0x15FFB60 Offset: 0x15FFB60 VA: 0x15FFB60
	private void UpdateDisp() { }

	// RVA: 0x1600270 Offset: 0x1600270 VA: 0x1600270
	private string GetRestTime(long at) { }

	// RVA: 0x1600474 Offset: 0x1600474 VA: 0x1600474
	private string GetRestTimeColorStr(int restHours) { }

	// RVA: 0x16001E4 Offset: 0x16001E4 VA: 0x16001E4
	private bool OnMoveRaidBoss(int eventId) { }
}

// Namespace: 
public class EventInfoSubmarineItemCounterComponent : MonoBehaviour // TypeDefIndex: 5493
{
	// Fields
	private static readonly float ANIMATION_TIME; // 0x0
	[SerializeField] // RVA: 0xC4D134 Offset: 0xC4D134 VA: 0xC4D134
	private UISprite iconSprite; // 0x18
	[SerializeField] // RVA: 0xC4D144 Offset: 0xC4D144 VA: 0xC4D144
	private UILabel nameLabel; // 0x20
	[SerializeField] // RVA: 0xC4D154 Offset: 0xC4D154 VA: 0xC4D154
	private UICounterLabel countLabel; // 0x28
	private EventUiValueEntity eventUiValueEntity; // 0x30

	// Properties
	public bool IsAnimFinished { get; }

	// Methods

	// RVA: 0x16004E0 Offset: 0x16004E0 VA: 0x16004E0
	public void .ctor() { }

	// RVA: 0x16004E8 Offset: 0x16004E8 VA: 0x16004E8
	public bool get_IsAnimFinished() { }

	// RVA: 0x1600518 Offset: 0x1600518 VA: 0x1600518
	public void Setup(EventUiValueEntity eventUiValueEntity, EventInfoSubmarineItemCounterCotrol.ItemData itemData) { }

	// RVA: 0x16008E8 Offset: 0x16008E8 VA: 0x16008E8
	public void PlayAnimation() { }

	// RVA: 0x1600A20 Offset: 0x1600A20 VA: 0x1600A20
	public void AddCount(int count) { }

	// RVA: 0x1600A58 Offset: 0x1600A58 VA: 0x1600A58
	public void UpdateCount() { }

	// RVA: 0x1600798 Offset: 0x1600798 VA: 0x1600798
	private UserItemEntity GetUserItemEntity(int itemId) { }

	// RVA: 0x1600B3C Offset: 0x1600B3C VA: 0x1600B3C
	private static void .cctor() { }
}

// Namespace: 
public class EventInfoSubmarineItemCounterCotrol : EventInfoUIBase // TypeDefIndex: 5494
{
	// Fields
	[SerializeField] // RVA: 0xC4D164 Offset: 0xC4D164 VA: 0xC4D164
	private GameObject rootObject; // 0x28
	[SerializeField] // RVA: 0xC4D174 Offset: 0xC4D174 VA: 0xC4D174
	private GameObject baseItemPrefab; // 0x30
	[SerializeField] // RVA: 0xC4D184 Offset: 0xC4D184 VA: 0xC4D184
	private UILabel titleLabel; // 0x38
	[SerializeField] // RVA: 0xC4D194 Offset: 0xC4D194 VA: 0xC4D194
	private UISprite bgSprite; // 0x40
	[SerializeField] // RVA: 0xC4D1A4 Offset: 0xC4D1A4 VA: 0xC4D1A4
	private List<EventInfoSubmarineItemCounterCotrol.ItemData> itemDataList; // 0x48
	private List<EventInfoSubmarineItemCounterComponent> itemCompnentList; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC4D1B4 Offset: 0xC4D1B4 VA: 0xC4D1B4
	private static Func<EventUiValueEntity, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1600B90 Offset: 0x1600B90 VA: 0x1600B90
	public void .ctor() { }

	// RVA: 0x1600B94 Offset: 0x1600B94 VA: 0x1600B94 Slot: 4
	public override void Initialization(EventUiEntity entity) { }

	// RVA: 0x1600CCC Offset: 0x1600CCC VA: 0x1600CCC Slot: 5
	public override void Setup(EventUiValueEntity[] entitys) { }

	// RVA: 0x1601260 Offset: 0x1601260 VA: 0x1601260 Slot: 7
	public override void PlayAnim(EventInfoUIBase.PlayType type, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC7E14 Offset: 0xCC7E14 VA: 0xCC7E14
	// RVA: 0x1601290 Offset: 0x1601290 VA: 0x1601290
	private IEnumerator PlayCountAnim(Action callback) { }

	// RVA: 0x160132C Offset: 0x160132C VA: 0x160132C
	public void UpdateAllCount() { }

	// RVA: 0x1601010 Offset: 0x1601010 VA: 0x1601010
	private GameObject CreateItemObject(EventUiValueEntity ent) { }

	// RVA: 0x1601190 Offset: 0x1601190 VA: 0x1601190
	private EventInfoSubmarineItemCounterCotrol.ItemData GetItemData(int itemId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7E24 Offset: 0xCC7E24 VA: 0xCC7E24
	// RVA: 0x1601348 Offset: 0x1601348 VA: 0x1601348
	private static int <Setup>m__0(EventUiValueEntity ent) { }
}

// Namespace: 
[Serializable]
public class EventInfoSubmarineItemCounterCotrol.ItemData // TypeDefIndex: 5495
{
	// Fields
	public int ItemId; // 0x10
	public Vector2 Position; // 0x14
	public Vector2 namePosition; // 0x1C
	public Vector2 CountPosition; // 0x24

	// Methods

	// RVA: 0x160179C Offset: 0x160179C VA: 0x160179C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E54 Offset: 0xC41E54 VA: 0xC41E54
private sealed class EventInfoSubmarineItemCounterCotrol.<PlayCountAnim>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5496
{
	// Fields
	internal List.Enumerator<EventInfoSubmarineItemCounterComponent> $locvar0; // 0x10
	internal List.Enumerator<EventInfoSubmarineItemCounterComponent> $locvar1; // 0x28
	internal EventInfoSubmarineItemCounterComponent <item>__1; // 0x40
	internal Action callback; // 0x48
	internal EventInfoSubmarineItemCounterCotrol $this; // 0x50
	internal object $current; // 0x58
	internal bool $disposing; // 0x60
	internal int $PC; // 0x64

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD7FB0 Offset: 0xCD7FB0 VA: 0xCD7FB0
	// RVA: 0x1601324 Offset: 0x1601324 VA: 0x1601324
	public void .ctor() { }

	// RVA: 0x16013AC Offset: 0x16013AC VA: 0x16013AC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7FC0 Offset: 0xCD7FC0 VA: 0xCD7FC0
	// RVA: 0x16016AC Offset: 0x16016AC VA: 0x16016AC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7FD0 Offset: 0xCD7FD0 VA: 0xCD7FD0
	// RVA: 0x16016B4 Offset: 0x16016B4 VA: 0x16016B4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7FE0 Offset: 0xCD7FE0 VA: 0xCD7FE0
	// RVA: 0x16016BC Offset: 0x16016BC VA: 0x16016BC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7FF0 Offset: 0xCD7FF0 VA: 0xCD7FF0
	// RVA: 0x1601734 Offset: 0x1601734 VA: 0x1601734 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E64 Offset: 0xC41E64 VA: 0xC41E64
private sealed class EventInfoSubmarineItemCounterCotrol.<GetItemData>c__AnonStorey1 // TypeDefIndex: 5497
{
	// Fields
	internal int itemId; // 0x10

	// Methods

	// RVA: 0x1601340 Offset: 0x1601340 VA: 0x1601340
	public void .ctor() { }

	// RVA: 0x1601370 Offset: 0x1601370 VA: 0x1601370
	internal bool <>m__0(EventInfoSubmarineItemCounterCotrol.ItemData x) { }
}

// Namespace: 
public class EventInfoUIBase : MonoBehaviour // TypeDefIndex: 5498
{
	// Fields
	[SerializeField] // RVA: 0xC4D1C4 Offset: 0xC4D1C4 VA: 0xC4D1C4
	private List<EventInfoUIBase.Data> datas; // 0x18
	[SerializeField] // RVA: 0xC4D1D4 Offset: 0xC4D1D4 VA: 0xC4D1D4
	protected EventInfoUIBase.PlayType playType; // 0x20
	[SerializeField] // RVA: 0xC4D1E4 Offset: 0xC4D1E4 VA: 0xC4D1E4
	protected EventInfoUIBase.AnimType animType; // 0x24

	// Methods

	// RVA: 0x15F76B0 Offset: 0x15F76B0 VA: 0x15F76B0
	public void .ctor() { }

	// RVA: 0x16017AC Offset: 0x16017AC VA: 0x16017AC Slot: 4
	public virtual void Initialization(EventUiEntity entity) { }

	// RVA: 0x16017B0 Offset: 0x16017B0 VA: 0x16017B0 Slot: 5
	public virtual void Setup(EventUiValueEntity[] entitys) { }

	// RVA: 0x16017B4 Offset: 0x16017B4 VA: 0x16017B4 Slot: 6
	public virtual void SetValue(EventInfoUIBase.ValueType valType, object val, EventInfoUIBase.SetType setType) { }

	// RVA: 0x1601908 Offset: 0x1601908 VA: 0x1601908 Slot: 7
	public virtual void PlayAnim(EventInfoUIBase.PlayType type, Action callback) { }

	// RVA: 0x1601914 Offset: 0x1601914 VA: 0x1601914 Slot: 8
	public virtual void ReleaseAsset() { }

	// RVA: 0x1601918 Offset: 0x1601918 VA: 0x1601918 Slot: 9
	public virtual void Redisplay() { }

	// RVA: 0x160191C Offset: 0x160191C VA: 0x160191C Slot: 10
	public virtual void SwitchSpotState(bool isOpen) { }

	// RVA: 0x1601920 Offset: 0x1601920 VA: 0x1601920 Slot: 11
	protected virtual void SetEventId(object val) { }

	// RVA: 0x1601924 Offset: 0x1601924 VA: 0x1601924 Slot: 12
	protected virtual void SetConquestInfos(object obj) { }

	// RVA: 0x1601928 Offset: 0x1601928 VA: 0x1601928 Slot: 13
	protected virtual void SetTotalBoxGacha(object obj) { }
}

// Namespace: 
[Serializable]
private class EventInfoUIBase.Data // TypeDefIndex: 5499
{
	// Fields
	public EventInfoUIBase.SetType setType; // 0x10
	public EventInfoUIBase.ValueType valType; // 0x14

	// Methods

	// RVA: 0x16017A4 Offset: 0x16017A4 VA: 0x16017A4
	public void .ctor() { }
}

// Namespace: 
public enum EventInfoUIBase.ValueType // TypeDefIndex: 5500
{
	// Fields
	public int value__; // 0x0
	public const EventInfoUIBase.ValueType Nothing = 0;
	public const EventInfoUIBase.ValueType EventId = 1;
	public const EventInfoUIBase.ValueType ConquestInfos = 2;
	public const EventInfoUIBase.ValueType TotalBoxGacha = 3;
}

// Namespace: 
public enum EventInfoUIBase.SetType // TypeDefIndex: 5501
{
	// Fields
	public int value__; // 0x0
	public const EventInfoUIBase.SetType Always = 0;
	public const EventInfoUIBase.SetType Init = 1;
	public const EventInfoUIBase.SetType BoxGachaReset = 2;
}

// Namespace: 
public enum EventInfoUIBase.PlayType // TypeDefIndex: 5502
{
	// Fields
	public int value__; // 0x0
	public const EventInfoUIBase.PlayType None = 0;
	public const EventInfoUIBase.PlayType OnEventActionPlay = 1;
}

// Namespace: 
public enum EventInfoUIBase.AnimType // TypeDefIndex: 5503
{
	// Fields
	public int value__; // 0x0
	public const EventInfoUIBase.AnimType None = 0;
	public const EventInfoUIBase.AnimType CountUp = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E74 Offset: 0xC41E74 VA: 0xC41E74
private sealed class EventInfoUIBase.<SetValue>c__AnonStorey0 // TypeDefIndex: 5504
{
	// Fields
	internal EventInfoUIBase.SetType setType; // 0x10
	internal EventInfoUIBase.ValueType valType; // 0x14

	// Methods

	// RVA: 0x1601900 Offset: 0x1601900 VA: 0x1601900
	public void .ctor() { }

	// RVA: 0x160192C Offset: 0x160192C VA: 0x160192C
	internal bool <>m__0(EventInfoUIBase.Data data) { }
}

// Namespace: 
public class EventInfoUIProgressControl : EventInfoUIBase // TypeDefIndex: 5505
{
	// Fields
	private static readonly string SAVEKEY_EVENT_PROGRESS_VALUE; // 0x0
	protected EventUiEntity eventUiEntity; // 0x28
	protected List<EventProgressValueEntity> eventProgressValueEntityList; // 0x30
	protected EventProgressValueEntity currentEventProgressValueEntity; // 0x38
	protected EventProgressValueEntity nextEventProgressValueEntity; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC4D1F4 Offset: 0xC4D1F4 VA: 0xC4D1F4
	private static Comparison<EventProgressValueEntity> <>f__am$cache0; // 0x8

	// Methods

	// RVA: 0x15F8A28 Offset: 0x15F8A28 VA: 0x15F8A28
	public void .ctor() { }

	// RVA: 0x15F8D84 Offset: 0x15F8D84 VA: 0x15F8D84 Slot: 4
	public override void Initialization(EventUiEntity entity) { }

	// RVA: 0x1601984 Offset: 0x1601984 VA: 0x1601984
	public void InitEventProgressParams(int eventId) { }

	// RVA: 0x15F8E04 Offset: 0x15F8E04 VA: 0x15F8E04 Slot: 5
	public override void Setup(EventUiValueEntity[] entitys) { }

	// RVA: 0x15F9650 Offset: 0x15F9650 VA: 0x15F9650 Slot: 9
	public override void Redisplay() { }

	// RVA: 0x1601C6C Offset: 0x1601C6C VA: 0x1601C6C
	protected EventProgressValueEntity GetEntityByProgresValue(int progresValue) { }

	// RVA: 0x1601D48 Offset: 0x1601D48 VA: 0x1601D48
	public static bool IsDispEventProgress(int eventId) { }

	// RVA: 0x1601DE0 Offset: 0x1601DE0 VA: 0x1601DE0
	public string GetEventProgressValueSaveKey() { }

	// RVA: 0x1601E58 Offset: 0x1601E58 VA: 0x1601E58
	public static string GetEventProgressValueSaveKey(int eventId) { }

	// RVA: 0x15F98A4 Offset: 0x15F98A4 VA: 0x15F98A4
	public bool CheckEventProgressValueSaveData() { }

	// RVA: 0x15F98BC Offset: 0x15F98BC VA: 0x15F98BC
	public int GetEventProgressValueSaveData(int defaultValue = 0) { }

	// RVA: 0x1601F1C Offset: 0x1601F1C VA: 0x1601F1C
	public static int GetEventProgressValueSaveData(int eventId, int defaultValue = 0) { }

	// RVA: 0x15F98E4 Offset: 0x15F98E4 VA: 0x15F98E4
	public void SaveEventProgressValueSaveData(int value) { }

	// RVA: 0x1601F98 Offset: 0x1601F98 VA: 0x1601F98
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7E34 Offset: 0xCC7E34 VA: 0xCC7E34
	// RVA: 0x1601FF4 Offset: 0x1601FF4 VA: 0x1601FF4
	private static int <InitEventProgressParams>m__0(EventProgressValueEntity a, EventProgressValueEntity b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41E84 Offset: 0xC41E84 VA: 0xC41E84
private sealed class EventInfoUIProgressControl.<GetEntityByProgresValue>c__AnonStorey0 // TypeDefIndex: 5506
{
	// Fields
	internal int progresValue; // 0x10

	// Methods

	// RVA: 0x1601D40 Offset: 0x1601D40 VA: 0x1601D40
	public void .ctor() { }

	// RVA: 0x1602038 Offset: 0x1602038 VA: 0x1602038
	internal bool <>m__0(EventProgressValueEntity n) { }
}

// Namespace: 
public class EventInfoUISpriteControl : EventInfoUIBase // TypeDefIndex: 5507
{
	// Fields
	[SerializeField] // RVA: 0xC4D204 Offset: 0xC4D204 VA: 0xC4D204
	private UISprite mainSprite; // 0x28

	// Methods

	// RVA: 0x1602074 Offset: 0x1602074 VA: 0x1602074
	public void .ctor() { }

	// RVA: 0x1602078 Offset: 0x1602078 VA: 0x1602078 Slot: 4
	public override void Initialization(EventUiEntity entity) { }
}

// Namespace: 
public class EventInfoUserEventPointControl : EventInfoUIBase // TypeDefIndex: 5508
{
	// Fields
	[SerializeField] // RVA: 0xC4D214 Offset: 0xC4D214 VA: 0xC4D214
	private UILabel titleLabel; // 0x28
	[SerializeField] // RVA: 0xC4D224 Offset: 0xC4D224 VA: 0xC4D224
	private UILabel pointLabel; // 0x30
	[SerializeField] // RVA: 0xC4D234 Offset: 0xC4D234 VA: 0xC4D234
	private UISprite bgSprite; // 0x38
	[SerializeField] // RVA: 0xC4D244 Offset: 0xC4D244 VA: 0xC4D244
	private string bgSpriteName; // 0x40
	[SerializeField] // RVA: 0xC4D254 Offset: 0xC4D254 VA: 0xC4D254
	private bool isEnabledCondensedScale; // 0x48
	[SerializeField] // RVA: 0xC4D264 Offset: 0xC4D264 VA: 0xC4D264
	private int pointLabelWidth; // 0x4C
	private UserEventPointMaster userEventPointMaster; // 0x50
	private EventUiEntity eventUiEntity; // 0x58
	private EventUiValueEntity[] eventUiValueEntityList; // 0x60

	// Methods

	// RVA: 0x1602138 Offset: 0x1602138 VA: 0x1602138
	public void .ctor() { }

	// RVA: 0x1602144 Offset: 0x1602144 VA: 0x1602144
	private void Awake() { }

	// RVA: 0x16021B8 Offset: 0x16021B8 VA: 0x16021B8 Slot: 4
	public override void Initialization(EventUiEntity entity) { }

	// RVA: 0x16021C0 Offset: 0x16021C0 VA: 0x16021C0 Slot: 5
	public override void Setup(EventUiValueEntity[] entitys) { }

	// RVA: 0x1602324 Offset: 0x1602324 VA: 0x1602324 Slot: 9
	public override void Redisplay() { }

	// RVA: 0x1602410 Offset: 0x1602410 VA: 0x1602410
	private long GetUserEventPoint(int eventId, int groupId) { }

	// RVA: 0x16024B8 Offset: 0x16024B8 VA: 0x16024B8
	private void SetPointLabel(long point) { }

	// RVA: 0x160220C Offset: 0x160220C VA: 0x160220C
	private void SetBgSprite(string spriteName) { }
}

// Namespace: 
public class EventInfoUserMultiEventPointControl : EventInfoUIBase // TypeDefIndex: 5509
{
	// Fields
	[SerializeField] // RVA: 0xC4D274 Offset: 0xC4D274 VA: 0xC4D274
	private UISprite titleSprite; // 0x28
	[SerializeField] // RVA: 0xC4D284 Offset: 0xC4D284 VA: 0xC4D284
	private UILabel[] pointLabels; // 0x30
	[SerializeField] // RVA: 0xC4D294 Offset: 0xC4D294 VA: 0xC4D294
	private UISprite[] bgSprites; // 0x38
	[SerializeField] // RVA: 0xC4D2A4 Offset: 0xC4D2A4 VA: 0xC4D2A4
	private string titleSpriteName; // 0x40
	[SerializeField] // RVA: 0xC4D2B4 Offset: 0xC4D2B4 VA: 0xC4D2B4
	private string[] bgSpriteNames; // 0x48
	private UserEventPointMaster userEventPointMaster; // 0x50
	private EventUiEntity eventUiEntity; // 0x58
	private EventUiValueEntity[] eventUiValueEntityList; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC4D2C4 Offset: 0xC4D2C4 VA: 0xC4D2C4
	private static Func<EventUiValueEntity, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC4D2D4 Offset: 0xC4D2D4 VA: 0xC4D2D4
	private static Func<EventUiValueEntity, int> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x160265C Offset: 0x160265C VA: 0x160265C
	public void .ctor() { }

	// RVA: 0x1602660 Offset: 0x1602660 VA: 0x1602660
	private void Awake() { }

	// RVA: 0x16026D4 Offset: 0x16026D4 VA: 0x16026D4 Slot: 4
	public override void Initialization(EventUiEntity entity) { }

	// RVA: 0x16026DC Offset: 0x16026DC VA: 0x16026DC Slot: 5
	public override void Setup(EventUiValueEntity[] entitys) { }

	// RVA: 0x1602AB4 Offset: 0x1602AB4 VA: 0x1602AB4 Slot: 9
	public override void Redisplay() { }

	// RVA: 0x1602BE8 Offset: 0x1602BE8 VA: 0x1602BE8
	private long GetUserEventPoint(int eventId, int groupId) { }

	// RVA: 0x1602C90 Offset: 0x1602C90 VA: 0x1602C90
	private void SetPointLabel(int idx, long point) { }

	// RVA: 0x160285C Offset: 0x160285C VA: 0x160285C
	private void SetupSprite() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7E44 Offset: 0xCC7E44 VA: 0xCC7E44
	// RVA: 0x1602E40 Offset: 0x1602E40 VA: 0x1602E40
	private static bool <Setup>m__0(EventUiValueEntity ent) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC7E54 Offset: 0xCC7E54 VA: 0xCC7E54
	// RVA: 0x1602E4C Offset: 0x1602E4C VA: 0x1602E4C
	private static int <Setup>m__1(EventUiValueEntity ent) { }
}

// Namespace: 
public class EventItemBoardComponent : MonoBehaviour // TypeDefIndex: 5510
{
	// Fields
	private const int SPEND_ITEM_NUM = 1;
	private const float CONFIRM_DIALOG_POS_Y = 12;
	[SerializeField] // RVA: 0xC4D2E4 Offset: 0xC4D2E4 VA: 0xC4D2E4
	private ItemIconComponent itemIconInfo; // 0x18
	[SerializeField] // RVA: 0xC4D2F4 Offset: 0xC4D2F4 VA: 0xC4D2F4
	private GameObject cmdSpellBg; // 0x20
	[SerializeField] // RVA: 0xC4D304 Offset: 0xC4D304 VA: 0xC4D304
	private CommandSpellIconComponent cmdSpellIcon; // 0x28
	[SerializeField] // RVA: 0xC4D314 Offset: 0xC4D314 VA: 0xC4D314
	private UILabel itemNameLb; // 0x30
	[SerializeField] // RVA: 0xC4D324 Offset: 0xC4D324 VA: 0xC4D324
	private UILabel itemDetailLb; // 0x38
	[SerializeField] // RVA: 0xC4D334 Offset: 0xC4D334 VA: 0xC4D334
	private UILabel currentInfoLb; // 0x40
	[SerializeField] // RVA: 0xC4D344 Offset: 0xC4D344 VA: 0xC4D344
	private UILabel currentNumLb; // 0x48
	[SerializeField] // RVA: 0xC4D354 Offset: 0xC4D354 VA: 0xC4D354
	private UILabel spendInfoLb; // 0x50
	[SerializeField] // RVA: 0xC4D364 Offset: 0xC4D364 VA: 0xC4D364
	private UILabel spendNumLb; // 0x58
	[SerializeField] // RVA: 0xC4D374 Offset: 0xC4D374 VA: 0xC4D374
	private UISprite bgImg; // 0x60
	[SerializeField] // RVA: 0xC4D384 Offset: 0xC4D384 VA: 0xC4D384
