	// RVA: 0x1D8A048 Offset: 0x1D8A048 VA: 0x1D8A048
	public void SetFace(Face.Type faceType, int formId, Action callbackFunc) { }

	// RVA: 0x1D8A25C Offset: 0x1D8A25C VA: 0x1D8A25C
	protected void EndLoadFormAsset(AssetData assetData) { }

	// RVA: 0x1D8A3CC Offset: 0x1D8A3CC VA: 0x1D8A3CC
	public void PreloadFormAssets(List<int> formIdList, Action callbackFunc) { }

	// RVA: 0x1D8A740 Offset: 0x1D8A740 VA: 0x1D8A740
	public void CancelPreloadFormAssets() { }

	// RVA: 0x1D8A748 Offset: 0x1D8A748 VA: 0x1D8A748
	public void RemoveCallback(Action removeCallback) { }

	// RVA: 0x1D8A80C Offset: 0x1D8A80C VA: 0x1D8A80C
	private void OnEndPreloadForms() { }

	// RVA: 0x1D8AA0C Offset: 0x1D8AA0C VA: 0x1D8AA0C
	public void SetAlpha(float a) { }

	// RVA: 0x1D8AA50 Offset: 0x1D8AA50 VA: 0x1D8AA50
	public void SetDepth(int d) { }

	// RVA: 0x1D8AA88 Offset: 0x1D8AA88 VA: 0x1D8AA88
	public void MoveAlpha(float duration, float alpha) { }

	// RVA: 0x1D8AB00 Offset: 0x1D8AB00 VA: 0x1D8AB00
	public void MoveAlpha(float duration, float alpha, GameObject callbackObject, string callbackFunc) { }

	// RVA: 0x1D8AC98 Offset: 0x1D8AC98 VA: 0x1D8AC98
	public void SetLayer(int layer) { }

	// RVA: 0x1D8AD10 Offset: 0x1D8AD10 VA: 0x1D8AD10
	protected void SetLayer(Transform tf, int layer) { }

	[CompilerGeneratedAttribute] // RVA: 0xD384BC Offset: 0xD384BC VA: 0xD384BC
	// RVA: 0x1D8B010 Offset: 0x1D8B010 VA: 0x1D8B010
	private bool <SetFace>m__0(AssetData a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF110 Offset: 0xCAF110 VA: 0xCAF110
private sealed class UIStandFigureR.<EndLoadFormAsset>c__AnonStorey0 // TypeDefIndex: 7854
{
	// Fields
	internal AssetData assetData; // 0x10

	// Methods

	// RVA: 0x1D8A3C4 Offset: 0x1D8A3C4 VA: 0x1D8A3C4
	public void .ctor() { }

	// RVA: 0x1D8B064 Offset: 0x1D8B064 VA: 0x1D8B064
	internal bool <>m__0(AssetData a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF120 Offset: 0xCAF120 VA: 0xCAF120
private sealed class UIStandFigureR.<PreloadFormAssets>c__AnonStorey1 // TypeDefIndex: 7855
{
	// Fields
	internal string assetPath; // 0x10

	// Methods

	// RVA: 0x1D8A738 Offset: 0x1D8A738 VA: 0x1D8A738
	public void .ctor() { }

	// RVA: 0x1D8B14C Offset: 0x1D8B14C VA: 0x1D8B14C
	internal bool <>m__0(AssetData a) { }

	// RVA: 0x1D8B1A0 Offset: 0x1D8B1A0 VA: 0x1D8B1A0
	internal bool <>m__1(string a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF130 Offset: 0xCAF130 VA: 0xCAF130
private sealed class UIStandFigureR.<OnEndPreloadForms>c__AnonStorey2 // TypeDefIndex: 7856
{
	// Fields
	internal AssetData asset; // 0x10

	// Methods

	// RVA: 0x1D8AA04 Offset: 0x1D8AA04 VA: 0x1D8AA04
	public void .ctor() { }

	// RVA: 0x1D8B0D8 Offset: 0x1D8B0D8 VA: 0x1D8B0D8
	internal bool <>m__0(AssetData a) { }
}

// Namespace: 
public class UIStandFigureRender : UITweenRenderer // TypeDefIndex: 7857
{
	// Fields
	[SerializeField] // RVA: 0xCC3AC8 Offset: 0xCC3AC8 VA: 0xCC3AC8
	protected MeshFilter bodyFilter; // 0x188
	[SerializeField] // RVA: 0xCC3AD8 Offset: 0xCC3AD8 VA: 0xCC3AD8
	protected MeshRenderer bodyRenderer; // 0x190
	[SerializeField] // RVA: 0xCC3AE8 Offset: 0xCC3AE8 VA: 0xCC3AE8
	protected MeshFilter faceFilter; // 0x198
	[SerializeField] // RVA: 0xCC3AF8 Offset: 0xCC3AF8 VA: 0xCC3AF8
	protected MeshRenderer faceRenderer; // 0x1A0
	[SerializeField] // RVA: 0xCC3B08 Offset: 0xCC3B08 VA: 0xCC3B08
	protected MeshFilter fadeFilter; // 0x1A8
	[SerializeField] // RVA: 0xCC3B18 Offset: 0xCC3B18 VA: 0xCC3B18
	protected MeshRenderer fadeRenderer; // 0x1B0
	public static readonly int MAIN_SIZE_X; // 0x0
	public static readonly int MAIN_SIZE_Y; // 0x4
	public static readonly int BODY_SIZE_X; // 0x8
	public static readonly int BODY_SIZE_Y; // 0xC
	protected static readonly int FACE_SIZE_X; // 0x10
	protected static readonly int FACE_SIZE_Y; // 0x14
	public static readonly int LEFT_X; // 0x18
	public static readonly int RIGHT_X; // 0x1C
	public static readonly int TOP_Y; // 0x20
	public static readonly int BOTTOM_Y; // 0x24
	public static readonly float BODY_U; // 0x28
	public static readonly float BODY_V; // 0x2C
	public static readonly float BODY_W; // 0x30
	public static readonly float BODY_H; // 0x34
	protected static readonly float FACE1_W; // 0x38
	protected static readonly float FACE1_H; // 0x3C
	protected static readonly float FACE1_SX; // 0x40
	protected static readonly float FACE1_SY; // 0x44
	protected static readonly ReadOnlyCollection<Rect> faceRectTable; // 0x48
	protected static readonly float FACE2A_SIZE; // 0x50
	protected static readonly float FACE2A_W; // 0x54
	protected static readonly float FACE2A_H; // 0x58
	protected static readonly float FACE2A_SX; // 0x5C
	protected static readonly float FACE2A_SY; // 0x60
	protected static readonly ReadOnlyCollection<Rect> faceRectTable2a; // 0x68
	protected static readonly float FACE2B_SIZE; // 0x70
	protected static readonly float FACE2B_W; // 0x74
	protected static readonly float FACE2B_H; // 0x78
	protected static readonly float FACE2B_SX; // 0x7C
	protected static readonly float FACE2B_SY; // 0x80
	protected static readonly ReadOnlyCollection<Rect> faceRectTable2b; // 0x88
	protected static readonly float FACE2C_SIZE; // 0x90
	protected static readonly float FACE2C_W; // 0x94
	protected static readonly float FACE2C_H; // 0x98
	protected static readonly float FACE2C_SX; // 0x9C
	protected static readonly float FACE2C_SY; // 0xA0
	protected static readonly ReadOnlyCollection<Rect> faceRectTable2c; // 0xA8
	protected int imageId; // 0x1B8
	protected int faceTextureSize; // 0x1BC
	protected bool isFaceUse; // 0x1C0
	protected Face.Type faceType; // 0x1C4
	protected int formId; // 0x1C8
	protected int faceTextureSelect; // 0x1CC
	protected bool isShadow; // 0x1D0
	protected bool isTalkMask; // 0x1D1
	protected string filterName; // 0x1D8
	protected Color filterColor; // 0x1E0
	protected Rect facePositionRect; // 0x1F0
	protected Rect faceTextureRect; // 0x200
	protected Vector2 figureOffset; // 0x210
	protected Vector2 dispOffset; // 0x218
	protected Vector2 dispTop; // 0x220
	protected Texture2D[] textureList; // 0x228
	protected bool isBusyMoveAlpha; // 0x230
	protected GameObject moveAlphaCallbackObject; // 0x238
	protected string moveAlphaCallbackFunc; // 0x240
	protected float faceFadeAlpha; // 0x248
	protected Rect faceRect; // 0x24C
	protected bool loadRequiredResource; // 0x25C

	// Methods

	// RVA: 0x1D852DC Offset: 0x1D852DC VA: 0x1D852DC
	public void .ctor() { }

	// RVA: 0x1D70364 Offset: 0x1D70364 VA: 0x1D70364
	public static int GetServantId(string imageName) { }

	// RVA: 0x1D704C8 Offset: 0x1D704C8 VA: 0x1D704C8
	public static int GetImageLimitCount(string imageName) { }

	// RVA: 0x1D7052C Offset: 0x1D7052C VA: 0x1D7052C
	public static int GetImageForm(string imageName) { }

	// RVA: 0x1D8B1D8 Offset: 0x1D8B1D8 VA: 0x1D8B1D8
	public static string GetAssetName(int svtId, int imageLimitCount) { }

	// RVA: 0x1D8B250 Offset: 0x1D8B250 VA: 0x1D8B250
	public static string GetAssetName(int svtId, int imageLimitCount, int formId) { }

	// RVA: 0x1D8B5B8 Offset: 0x1D8B5B8 VA: 0x1D8B5B8
	public static string GetAssetName(int imageId) { }

	// RVA: 0x1D8B68C Offset: 0x1D8B68C VA: 0x1D8B68C
	public static string GetAssetName(string imageName, int formId = 0) { }

	// RVA: 0x1D8944C Offset: 0x1D8944C VA: 0x1D8944C
	public static string GetAssetNameWithForm(int imageId, int formId) { }

	// RVA: 0x1D86320 Offset: 0x1D86320 VA: 0x1D86320
	public static Texture2D[] GetTextureList(AssetData assetData, bool loadRequiredResource = False) { }

	// RVA: 0x1D74F40 Offset: 0x1D74F40 VA: 0x1D74F40
	public bool IsBusyMoveAlpha() { }

	// RVA: 0x1D73688 Offset: 0x1D73688 VA: 0x1D73688
	public Vector2 GetCenterOffset() { }

	// RVA: 0x1D89EA0 Offset: 0x1D89EA0 VA: 0x1D89EA0
	public static Vector2 GetCharacterOffset(int id, int formId, ServantScriptEntity.OffsetKind offsetKind) { }

	// RVA: 0x1D8B83C Offset: 0x1D8B83C VA: 0x1D8B83C
	public static int GetForm(int imageId, bool isMyRoom, int friendship = -1) { }

	// RVA: 0x1D88ABC Offset: 0x1D88ABC VA: 0x1D88ABC Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1D8BA24 Offset: 0x1D8BA24 VA: 0x1D8BA24
	public Vector2 GetBodySize() { }

	// RVA: 0x1D705C8 Offset: 0x1D705C8 VA: 0x1D705C8
	public void SetActive(bool isActive) { }

	// RVA: 0x1D853E4 Offset: 0x1D853E4 VA: 0x1D853E4
	public void ReleaseCharacter() { }

	// RVA: 0x1D8BBD8 Offset: 0x1D8BBD8 VA: 0x1D8BBD8
	public void SetCharacter(int id, Face.Type faceType, int formId, Texture2D[] textureList) { }

	// RVA: 0x1D86A7C Offset: 0x1D86A7C VA: 0x1D86A7C
	protected void SetCharacterRender() { }

	[DebuggerHiddenAttribute] // RVA: 0xD384CC Offset: 0xD384CC VA: 0xD384CC
	// RVA: 0x1D8BDF8 Offset: 0x1D8BDF8 VA: 0x1D8BDF8
	private IEnumerator ChangeFaceFade(float time) { }

	// RVA: 0x1D8BAA8 Offset: 0x1D8BAA8 VA: 0x1D8BAA8
	private void StopChangeFaceFade() { }

	// RVA: 0x1D8BE88 Offset: 0x1D8BE88 VA: 0x1D8BE88
	private void CopyFaceFadeMesh() { }

	// RVA: 0x1D737A4 Offset: 0x1D737A4 VA: 0x1D737A4
	public void SetFace(Face.Type faceType, float fadeTime = 0) { }

	// RVA: 0x1D8C8B4 Offset: 0x1D8C8B4 VA: 0x1D8C8B4
	public void SetSharder(string shaderName) { }

	// RVA: 0x1D8CA78 Offset: 0x1D8CA78 VA: 0x1D8CA78
	public void RecoverSharder() { }

	// RVA: 0x1D8CB90 Offset: 0x1D8CB90 VA: 0x1D8CB90
	public void SetWipeTexture(Texture texture) { }

	// RVA: 0x1D7331C Offset: 0x1D7331C VA: 0x1D7331C
	public void SetFilter(string filterName, Color filterColor) { }

	// RVA: 0x1D8BBF4 Offset: 0x1D8BBF4 VA: 0x1D8BBF4
	public void SetBaseColor() { }

	// RVA: 0x1D70870 Offset: 0x1D70870 VA: 0x1D70870
	public void SetShadow(bool isShadow) { }

	// RVA: 0x1D74D44 Offset: 0x1D74D44 VA: 0x1D74D44
	public void SetTalkMask(bool isMask) { }

	// RVA: 0x1D707A4 Offset: 0x1D707A4 VA: 0x1D707A4
	public void SetAlpha(float alpha) { }

	// RVA: 0x1D8BCCC Offset: 0x1D8BCCC VA: 0x1D8BCCC
	public void SetFilterColor(Color c) { }

	// RVA: 0x1D8CE88 Offset: 0x1D8CE88 VA: 0x1D8CE88
	public void SetGradation(float g) { }

	// RVA: 0x1D8CFA8 Offset: 0x1D8CFA8 VA: 0x1D8CFA8
	public void SetVolume(float v) { }

	// RVA: 0x1D707E8 Offset: 0x1D707E8 VA: 0x1D707E8
	public void SetDepth(float d) { }

	// RVA: 0x1D712E8 Offset: 0x1D712E8 VA: 0x1D712E8
	public void MoveAlpha(float duration, float alpha, GameObject callbackObject, string callbackFunc) { }

	// RVA: 0x1D75090 Offset: 0x1D75090 VA: 0x1D75090
	public void MoveAlphaSpeed(float speed, float alpha, GameObject callbackObject, string callbackFunc) { }

	// RVA: 0x1D8D0C8 Offset: 0x1D8D0C8 VA: 0x1D8D0C8
	protected void EndMoveAlpha() { }

	// RVA: 0x1D8D18C Offset: 0x1D8D18C VA: 0x1D8D18C
	public void SetLayer(int layer) { }

	// RVA: 0x1D8D204 Offset: 0x1D8D204 VA: 0x1D8D204
	protected void SetLayer(Transform tf, int layer) { }

	// RVA: 0x1D8D504 Offset: 0x1D8D504 VA: 0x1D8D504
	public void StartChaseParentAlpha() { }

	[DebuggerHiddenAttribute] // RVA: 0xD384DC Offset: 0xD384DC VA: 0xD384DC
	// RVA: 0x1D8D530 Offset: 0x1D8D530 VA: 0x1D8D530
	private IEnumerator ChaseParentAlpha() { }

	// RVA: 0x1D75B48 Offset: 0x1D75B48 VA: 0x1D75B48
	public void SetSortingOrder(int order) { }

	// RVA: 0x1D759E4 Offset: 0x1D759E4 VA: 0x1D759E4
	public void SetMaskInteraction(SpriteMaskInteraction maskInteraction) { }

	// RVA: 0x1D85D50 Offset: 0x1D85D50 VA: 0x1D85D50
	protected List<string> GetFaceImageNameByFaceType(int imageId, Face.Type type) { }

	// RVA: 0x1D8D5A0 Offset: 0x1D8D5A0 VA: 0x1D8D5A0
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF140 Offset: 0xCAF140 VA: 0xCAF140
private sealed class UIStandFigureRender.<ChangeFaceFade>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 7858
{
	// Fields
	internal float <total>__1; // 0x10
	internal float time; // 0x14
	internal UIStandFigureRender $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD467E4 Offset: 0xD467E4 VA: 0xD467E4
	// RVA: 0x2020614 Offset: 0x2020614 VA: 0x2020614
	public void .ctor() { }

	// RVA: 0x202061C Offset: 0x202061C VA: 0x202061C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD467F4 Offset: 0xD467F4 VA: 0xD467F4
	// RVA: 0x2020A30 Offset: 0x2020A30 VA: 0x2020A30 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46804 Offset: 0xD46804 VA: 0xD46804
	// RVA: 0x2020A38 Offset: 0x2020A38 VA: 0x2020A38 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46814 Offset: 0xD46814 VA: 0xD46814
	// RVA: 0x2020A40 Offset: 0x2020A40 VA: 0x2020A40 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46824 Offset: 0xD46824 VA: 0xD46824
	// RVA: 0x2020A54 Offset: 0x2020A54 VA: 0x2020A54 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF150 Offset: 0xCAF150 VA: 0xCAF150
private sealed class UIStandFigureRender.<ChaseParentAlpha>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 7859
{
	// Fields
	internal Transform <parent>__0; // 0x10
	internal UITexture <tex>__0; // 0x18
	internal Color <color>__0; // 0x20
	internal UIStandFigureRender $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46834 Offset: 0xD46834 VA: 0xD46834
	// RVA: 0x2020ABC Offset: 0x2020ABC VA: 0x2020ABC
	public void .ctor() { }

	// RVA: 0x2020AC4 Offset: 0x2020AC4 VA: 0x2020AC4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46844 Offset: 0xD46844 VA: 0xD46844
	// RVA: 0x2020DF8 Offset: 0x2020DF8 VA: 0x2020DF8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46854 Offset: 0xD46854 VA: 0xD46854
	// RVA: 0x2020E00 Offset: 0x2020E00 VA: 0x2020E00 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46864 Offset: 0xD46864 VA: 0xD46864
	// RVA: 0x2020E08 Offset: 0x2020E08 VA: 0x2020E08 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46874 Offset: 0xD46874 VA: 0xD46874
	// RVA: 0x2020E1C Offset: 0x2020E1C VA: 0x2020E1C Slot: 6
	public void Reset() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC91FA0 Offset: 0xC91FA0 VA: 0xC91FA0
public class UITouchPress : MonoBehaviour // TypeDefIndex: 7860
{
	// Fields
	public const float LONG_PRESS_NORMAL_TIME = 1;
	public const float LONG_PRESS_FAST_TIME = 0.5;
	public List<EventDelegate> onClick; // 0x18
	public List<EventDelegate> onPress; // 0x20
	public List<EventDelegate> onLongPress; // 0x28
	public List<EventDelegate> onLongRelease; // 0x30
	public bool isLongPressFast; // 0x38
	public float releaseRange; // 0x3C
	[SerializeField] // RVA: 0xCC3B28 Offset: 0xCC3B28 VA: 0xCC3B28
	private float clickRange; // 0x40
	protected bool isCancel; // 0x44
	protected bool isPress; // 0x45
	protected bool isLongPressCheck; // 0x46
	protected bool isLongPress; // 0x47
	protected Vector2 startPosition; // 0x48

	// Properties
	public bool IsEnabled { get; set; }
	public bool IsPress { get; }
	public bool IsLongPress { get; }

	// Methods

	// RVA: 0x2029374 Offset: 0x2029374 VA: 0x2029374
	public void .ctor() { }

	// RVA: 0x2029440 Offset: 0x2029440 VA: 0x2029440
	public bool get_IsEnabled() { }

	// RVA: 0x2029448 Offset: 0x2029448 VA: 0x2029448
	public void set_IsEnabled(bool value) { }

	// RVA: 0x20294E0 Offset: 0x20294E0 VA: 0x20294E0
	public bool get_IsPress() { }

	// RVA: 0x2029500 Offset: 0x2029500 VA: 0x2029500
	public bool get_IsLongPress() { }

	// RVA: 0x2029520 Offset: 0x2029520 VA: 0x2029520
	protected void OnEnable() { }

	// RVA: 0x2029528 Offset: 0x2029528 VA: 0x2029528
	protected void Init() { }

	// RVA: 0x202952C Offset: 0x202952C VA: 0x202952C
	public void OnPress(bool isPressed) { }

	// RVA: 0x2029780 Offset: 0x2029780 VA: 0x2029780
	protected void OnCheckLongPress() { }

	// RVA: 0x20297F4 Offset: 0x20297F4 VA: 0x20297F4
	public void OnHover(bool isSelect) { }

	// RVA: 0x2029870 Offset: 0x2029870 VA: 0x2029870
	protected void OnDrag(Vector2 v) { }

	// RVA: 0x2029998 Offset: 0x2029998 VA: 0x2029998
	public void Click() { }

	// RVA: 0x2029A30 Offset: 0x2029A30 VA: 0x2029A30
	protected void OnPressCancel() { }

	// RVA: 0x2029A3C Offset: 0x2029A3C VA: 0x2029A3C
	public void PressReset() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC91FD8 Offset: 0xC91FD8 VA: 0xC91FD8
public class UITouchPressMarge : MonoBehaviour // TypeDefIndex: 7861
{
	// Fields
	public UITouchPress margeComponent; // 0x18
	protected bool isPress; // 0x20

	// Methods

	// RVA: 0x2029A48 Offset: 0x2029A48 VA: 0x2029A48
	public void .ctor() { }

	// RVA: 0x2029A50 Offset: 0x2029A50 VA: 0x2029A50
	public void OnPress(bool isPressed) { }

	// RVA: 0x2029AD0 Offset: 0x2029AD0 VA: 0x2029AD0
	protected void OnHover(bool isSelect) { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC92010 Offset: 0xC92010 VA: 0xC92010
[AddComponentMenu] // RVA: 0xC92010 Offset: 0xC92010 VA: 0xC92010
public class UITweenRenderer : UIWidget // TypeDefIndex: 7862
{
	// Fields
	protected float volume; // 0x180

	// Methods

	// RVA: 0x2029B50 Offset: 0x2029B50 VA: 0x2029B50
	public void .ctor() { }

	// RVA: 0x2029C7C Offset: 0x2029C7C VA: 0x2029C7C Slot: 39
	public virtual void SetTweenColor(Color c) { }

	// RVA: 0x2029C80 Offset: 0x2029C80 VA: 0x2029C80 Slot: 40
	public virtual Color GetTweenColor() { }

	// RVA: 0x2029C8C Offset: 0x2029C8C VA: 0x2029C8C Slot: 41
	public virtual void SetTweenVolume(float v) { }

	// RVA: 0x2029C94 Offset: 0x2029C94 VA: 0x2029C94 Slot: 42
	public virtual float GetTweenVolume() { }

	// RVA: 0x2029C9C Offset: 0x2029C9C VA: 0x2029C9C
	protected CompareFunction GetRenderingCompareFunction(SpriteMaskInteraction maskInteraction) { }
}

// Namespace: 
public class UIUnityRendererEnableClip : UIWidget // TypeDefIndex: 7863
{
	// Fields
	[HideInInspector] // RVA: 0xCC3B38 Offset: 0xCC3B38 VA: 0xCC3B38
	[SerializeField] // RVA: 0xCC3B38 Offset: 0xCC3B38 VA: 0xCC3B38
	private Renderer mRenderer; // 0x180
	[HideInInspector] // RVA: 0xCC3B70 Offset: 0xCC3B70 VA: 0xCC3B70
	[SerializeField] // RVA: 0xCC3B70 Offset: 0xCC3B70 VA: 0xCC3B70
	private int renderQueue; // 0x188
	[HideInInspector] // RVA: 0xCC3BA8 Offset: 0xCC3BA8 VA: 0xCC3BA8
	[SerializeField] // RVA: 0xCC3BA8 Offset: 0xCC3BA8 VA: 0xCC3BA8
	private Material[] mMats; // 0x190
	private bool createMat; // 0x198
	private static readonly int PROPERTY_ID_ClipRange0; // 0x0
	private static readonly int PROPERTY_ID_ClipRotateInfo; // 0x4
	private static readonly int PROPERTY_ID_ClipTex; // 0x8
	private static readonly int PROPERTY_ID_PanelReplace; // 0xC
	private static readonly int PROPERTY_ID_ClipSharpness; // 0x10
	private static readonly int PROPERTY_ID_PanelSpaceMatrix; // 0x14
	private UIDrawCall.Clipping currentClipping; // 0x19C

	// Properties
	public Renderer cachedRenderer { get; }
	public override Material material { get; set; }
	public override Shader shader { get; set; }

	// Methods

	// RVA: 0x202BCC0 Offset: 0x202BCC0 VA: 0x202BCC0
	public void .ctor() { }

	// RVA: 0x202BCCC Offset: 0x202BCCC VA: 0x202BCCC
	public Renderer get_cachedRenderer() { }

	// RVA: 0x202BD64 Offset: 0x202BD64 VA: 0x202BD64 Slot: 24
	public override Material get_material() { }

	// RVA: 0x202C3B4 Offset: 0x202C3B4 VA: 0x202C3B4 Slot: 25
	public override void set_material(Material value) { }

	// RVA: 0x202C288 Offset: 0x202C288 VA: 0x202C288
	public bool isEqualMaterials(Material[] a, Material[] b) { }

	// RVA: 0x202C478 Offset: 0x202C478 VA: 0x202C478 Slot: 28
	public override Shader get_shader() { }

	// RVA: 0x202C4F0 Offset: 0x202C4F0 VA: 0x202C4F0 Slot: 29
	public override void set_shader(Shader value) { }

	// RVA: 0x202C0FC Offset: 0x202C0FC VA: 0x202C0FC
	private bool ExistSharedMaterial0() { }

	// RVA: 0x202C1B8 Offset: 0x202C1B8 VA: 0x202C1B8
	private bool CheckMaterial(Material[] mats) { }

	// RVA: 0x202C5B4 Offset: 0x202C5B4 VA: 0x202C5B4
	private void OnDestroy() { }

	// RVA: 0x202C6DC Offset: 0x202C6DC VA: 0x202C6DC
	private void OnWillRenderObject() { }

	// RVA: 0x202D1B4 Offset: 0x202D1B4 VA: 0x202D1B4 Slot: 38
	public override void OnFill(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x202D4C0 Offset: 0x202D4C0 VA: 0x202D4C0
	private static void .cctor() { }
}

// Namespace: 
public class UIVerticalImageM : UIVerticalImageRender // TypeDefIndex: 7864
{
	// Fields
	protected AssetData[] assetDataList; // 0x1F0
	protected string[] loadNameList; // 0x1F8
	protected Action callbackFunc; // 0x200

	// Properties
	public bool IsLoad { get; }

	// Methods

	// RVA: 0x202D5C4 Offset: 0x202D5C4 VA: 0x202D5C4
	public void .ctor() { }

	// RVA: 0x202D694 Offset: 0x202D694 VA: 0x202D694
	public bool get_IsLoad() { }

	// RVA: 0x202D6A4 Offset: 0x202D6A4 VA: 0x202D6A4
	public void Destroy() { }

	// RVA: 0x202D760 Offset: 0x202D760 VA: 0x202D760
	protected void OnDestroy() { }

	// RVA: 0x202D6A8 Offset: 0x202D6A8 VA: 0x202D6A8
	public void ReleaseCharacter() { }

	// RVA: 0x202D9B4 Offset: 0x202D9B4 VA: 0x202D9B4
	public void SetCharacter(string imageName, Face.Type faceType, Action callbackFunc) { }

	// RVA: 0x202DE8C Offset: 0x202DE8C VA: 0x202DE8C
	protected void EndLoadAsset() { }

	// RVA: 0x202DFB0 Offset: 0x202DFB0 VA: 0x202DFB0
	protected void SetTexture() { }

	// RVA: 0x202DDAC Offset: 0x202DDAC VA: 0x202DDAC
	protected void SetTextureStatus() { }

	// RVA: 0x202F078 Offset: 0x202F078 VA: 0x202F078
	public void SetDispOffset() { }
}

// Namespace: 
public class UIVerticalImageRender : UITweenRenderer // TypeDefIndex: 7865
{
	// Fields
	[SerializeField] // RVA: 0xCC3BE0 Offset: 0xCC3BE0 VA: 0xCC3BE0
	protected MeshFilter bodyFilter; // 0x188
	[SerializeField] // RVA: 0xCC3BF0 Offset: 0xCC3BF0 VA: 0xCC3BF0
	protected MeshRenderer bodyRenderer; // 0x190
	public static readonly int MAIN_SIZE_X; // 0x0
	public static readonly int MAIN_SIZE_Y; // 0x4
	public static readonly int BODY_SIZE_X; // 0x8
	public static readonly int BODY_SIZE_Y; // 0xC
	public static readonly int OVERLAP_V; // 0x10
	public static readonly int LEFT_X; // 0x14
	public static readonly int RIGHT_X; // 0x18
	public static readonly int TOP_Y; // 0x1C
	public static readonly int BOTTOM_Y; // 0x20
	public static readonly int BOTTOM_Y2; // 0x24
	public static readonly float BODY_U; // 0x28
	public static readonly float BODY_V; // 0x2C
	public static readonly float BODY_U2; // 0x30
	public static readonly float BODY_V2; // 0x34
	public static readonly float BODY_W; // 0x38
	public static readonly float BODY_H; // 0x3C
	protected bool isShadow; // 0x198
	protected bool isTalkMask; // 0x199
	protected string filterName; // 0x1A0
	protected Color filterColor; // 0x1A8
	protected Vector2 figureOffset; // 0x1B8
	protected Vector2 dispOffset; // 0x1C0
	protected Vector2 dispTop; // 0x1C8
	protected Texture2D[] textureList; // 0x1D0
	protected bool isBusyMoveAlpha; // 0x1D8
	protected GameObject moveAlphaCallbackObject; // 0x1E0
	protected string moveAlphaCallbackFunc; // 0x1E8

	// Methods

	// RVA: 0x202D628 Offset: 0x202D628 VA: 0x202D628
	public void .ctor() { }

	// RVA: 0x202DC5C Offset: 0x202DC5C VA: 0x202DC5C
	public static string[] GetAssetNameList(string imageName) { }

	// RVA: 0x202F150 Offset: 0x202F150 VA: 0x202F150
	public bool IsBusyMoveAlpha() { }

	// RVA: 0x202F158 Offset: 0x202F158 VA: 0x202F158
	public Vector2 GetCenterOffset() { }

	// RVA: 0x202F1F4 Offset: 0x202F1F4 VA: 0x202F1F4
	public static Vector2 GetCharacterOffset() { }

	// RVA: 0x202F228 Offset: 0x202F228 VA: 0x202F228
	public static Vector2 GetCharacterOffsetMyroom() { }

	// RVA: 0x202F25C Offset: 0x202F25C VA: 0x202F25C Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x202F36C Offset: 0x202F36C VA: 0x202F36C
	public Vector2 GetBodySize() { }

	// RVA: 0x202F3F0 Offset: 0x202F3F0 VA: 0x202F3F0
	public void SetActive(bool isActive) { }

	// RVA: 0x202D764 Offset: 0x202D764 VA: 0x202D764
	public void ReleaseCharacter() { }

	// RVA: 0x202F440 Offset: 0x202F440 VA: 0x202F440
	public void SetCharacter(string imageName, Face.Type faceType, Texture2D[] textureList) { }

	// RVA: 0x202E1A8 Offset: 0x202E1A8 VA: 0x202E1A8
	protected void SetCharacterRender() { }

	// RVA: 0x202F5B4 Offset: 0x202F5B4 VA: 0x202F5B4
	public void SetSharder(string shaderName) { }

	// RVA: 0x202F730 Offset: 0x202F730 VA: 0x202F730
	public void RecoverSharder() { }

	// RVA: 0x202F808 Offset: 0x202F808 VA: 0x202F808
	public void SetWipeTexture(Texture texture) { }

	// RVA: 0x202FA4C Offset: 0x202FA4C VA: 0x202FA4C
	public void SetFilter(string filterName, Color filterColor) { }

	// RVA: 0x202F44C Offset: 0x202F44C VA: 0x202F44C
	public void SetBaseColor() { }

	// RVA: 0x202FAA4 Offset: 0x202FAA4 VA: 0x202FAA4
	public void SetShadow(bool isShadow) { }

	// RVA: 0x202FAB0 Offset: 0x202FAB0 VA: 0x202FAB0
	public void SetTalkMask(bool isMask) { }

	// RVA: 0x202FABC Offset: 0x202FABC VA: 0x202FABC
	public void SetAlpha(float alpha) { }

	// RVA: 0x202F4DC Offset: 0x202F4DC VA: 0x202F4DC
	public void SetFilterColor(Color c) { }

	// RVA: 0x202FAE0 Offset: 0x202FAE0 VA: 0x202FAE0
	public void SetGradation(float g) { }

	// RVA: 0x202FBC4 Offset: 0x202FBC4 VA: 0x202FBC4
	public void SetVolume(float v) { }

	// RVA: 0x202FCA8 Offset: 0x202FCA8 VA: 0x202FCA8
	public void SetDepth(float d) { }

	// RVA: 0x202FD30 Offset: 0x202FD30 VA: 0x202FD30
	public void MoveAlpha(float duration, float alpha, GameObject callbackObject, string callbackFunc) { }

	// RVA: 0x202FFE0 Offset: 0x202FFE0 VA: 0x202FFE0
	public void MoveAlphaSpeed(float speed, float alpha, GameObject callbackObject, string callbackFunc) { }

	// RVA: 0x202FF28 Offset: 0x202FF28 VA: 0x202FF28
	protected void EndMoveAlpha() { }

	// RVA: 0x20301EC Offset: 0x20301EC VA: 0x20301EC
	public void SetLayer(int layer) { }

	// RVA: 0x2030264 Offset: 0x2030264 VA: 0x2030264
	protected void SetLayer(Transform tf, int layer) { }

	// RVA: 0x2030564 Offset: 0x2030564 VA: 0x2030564
	public void SetMaskInteraction(SpriteMaskInteraction maskInteraction) { }

	// RVA: 0x2030608 Offset: 0x2030608 VA: 0x2030608
	public void SetSortingOrder(int order) { }

	// RVA: 0x2030640 Offset: 0x2030640 VA: 0x2030640
	private static void .cctor() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC9205C Offset: 0xC9205C VA: 0xC9205C
[TooltipAttribute] // RVA: 0xC9205C Offset: 0xC9205C VA: 0xC9205C
public class ActionCommonConfirmDialog : FsmStateAction // TypeDefIndex: 7866
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC3C00 Offset: 0xCC3C00 VA: 0xCC3C00
	public FsmString titleName; // 0x50
	[TooltipAttribute] // RVA: 0xCC3C38 Offset: 0xCC3C38 VA: 0xCC3C38
	public FsmString messageName; // 0x58
	[TooltipAttribute] // RVA: 0xCC3C70 Offset: 0xCC3C70 VA: 0xCC3C70
	public FsmEvent decideFinishedEvent; // 0x60
	[TooltipAttribute] // RVA: 0xCC3CA8 Offset: 0xCC3CA8 VA: 0xCC3CA8
	public FsmEvent cancelFinishedEvent; // 0x68

	// Methods

	// RVA: 0x2112D08 Offset: 0x2112D08 VA: 0x2112D08
	public void .ctor() { }

	// RVA: 0x2112D10 Offset: 0x2112D10 VA: 0x2112D10 Slot: 28
	public override void Reset() { }

	// RVA: 0x2112D18 Offset: 0x2112D18 VA: 0x2112D18 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2112E18 Offset: 0x2112E18 VA: 0x2112E18
	protected void EndDialog(bool isDecide) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC920AC Offset: 0xC920AC VA: 0xC920AC
[TooltipAttribute] // RVA: 0xC920AC Offset: 0xC920AC VA: 0xC920AC
public class ActionTripleButtonDialog : FsmStateAction // TypeDefIndex: 7867
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC3CE0 Offset: 0xCC3CE0 VA: 0xCC3CE0
	public FsmString titleName; // 0x50
	[TooltipAttribute] // RVA: 0xCC3D18 Offset: 0xCC3D18 VA: 0xCC3D18
	public FsmString messageName; // 0x58
	[TooltipAttribute] // RVA: 0xCC3D50 Offset: 0xCC3D50 VA: 0xCC3D50
	public FsmString cancelButtonLabel; // 0x60
	[TooltipAttribute] // RVA: 0xCC3D88 Offset: 0xCC3D88 VA: 0xCC3D88
	public FsmString middleButtonLabel; // 0x68
	[TooltipAttribute] // RVA: 0xCC3DC0 Offset: 0xCC3DC0 VA: 0xCC3DC0
	public FsmString rightButtonLabel; // 0x70
	[TooltipAttribute] // RVA: 0xCC3DF8 Offset: 0xCC3DF8 VA: 0xCC3DF8
	public FsmEvent decideMiddleFinishedEvent; // 0x78
	[TooltipAttribute] // RVA: 0xCC3E30 Offset: 0xCC3E30 VA: 0xCC3E30
	public FsmEvent decideRightFinishedEvent; // 0x80
	[TooltipAttribute] // RVA: 0xCC3E68 Offset: 0xCC3E68 VA: 0xCC3E68
	public FsmEvent cancelFinishedEvent; // 0x88

	// Methods

	// RVA: 0x2112EF8 Offset: 0x2112EF8 VA: 0x2112EF8
	public void .ctor() { }

	// RVA: 0x2112F00 Offset: 0x2112F00 VA: 0x2112F00 Slot: 28
	public override void Reset() { }

	// RVA: 0x2112F0C Offset: 0x2112F0C VA: 0x2112F0C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21130A0 Offset: 0x21130A0 VA: 0x21130A0
	protected void EndDialog(TripleButtonDlgComponent.ResultClicked result) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC920FC Offset: 0xC920FC VA: 0xC920FC
[TooltipAttribute] // RVA: 0xC920FC Offset: 0xC920FC VA: 0xC920FC
public class AdStoreEvent : FsmStateAction // TypeDefIndex: 7868
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC3EA0 Offset: 0xCC3EA0 VA: 0xCC3EA0
	[TooltipAttribute] // RVA: 0xCC3EA0 Offset: 0xCC3EA0 VA: 0xCC3EA0
	public FsmString actionKey; // 0x50

	// Methods

	// RVA: 0x23115FC Offset: 0x23115FC VA: 0x23115FC
	public void .ctor() { }

	// RVA: 0x2311604 Offset: 0x2311604 VA: 0x2311604 Slot: 28
	public override void Reset() { }

	// RVA: 0x2311608 Offset: 0x2311608 VA: 0x2311608 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC9215C Offset: 0xC9215C VA: 0xC9215C
[TooltipAttribute] // RVA: 0xC9215C Offset: 0xC9215C VA: 0xC9215C
public class AssetManagerLoader : FsmStateAction // TypeDefIndex: 7869
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC3EEC Offset: 0xCC3EEC VA: 0xCC3EEC
	public FsmString assetName; // 0x50
	[TooltipAttribute] // RVA: 0xCC3F24 Offset: 0xCC3F24 VA: 0xCC3F24
	public FsmBool isDownloadOnly; // 0x58
	[TooltipAttribute] // RVA: 0xCC3F5C Offset: 0xCC3F5C VA: 0xCC3F5C
	public FsmEvent finishEvent; // 0x60
	[TooltipAttribute] // RVA: 0xCC3F94 Offset: 0xCC3F94 VA: 0xCC3F94
	public FsmObject assetData; // 0x68

	// Methods

	// RVA: 0x231BFF8 Offset: 0x231BFF8 VA: 0x231BFF8
	public void .ctor() { }

	// RVA: 0x231C000 Offset: 0x231C000 VA: 0x231C000 Slot: 28
	public override void Reset() { }

	// RVA: 0x231C088 Offset: 0x231C088 VA: 0x231C088 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x231C1A4 Offset: 0x231C1A4 VA: 0x231C1A4
	protected void LoadEndAsset(AssetData data) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC921AC Offset: 0xC921AC VA: 0xC921AC
[NoteAttribute] // RVA: 0xC921AC Offset: 0xC921AC VA: 0xC921AC
public class JudgeUsingOptionalBattleEffectId : FsmStateAction // TypeDefIndex: 7870
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC3FCC Offset: 0xCC3FCC VA: 0xCC3FCC
	[CheckForComponentAttribute] // RVA: 0xCC3FCC Offset: 0xCC3FCC VA: 0xCC3FCC
	public FsmGameObject PerformanceObject; // 0x50
	[TooltipAttribute] // RVA: 0xCC4040 Offset: 0xCC4040 VA: 0xCC4040
	public FsmEvent TrueEvent; // 0x58
	[TooltipAttribute] // RVA: 0xCC4078 Offset: 0xCC4078 VA: 0xCC4078
	public FsmEvent FalseEvent; // 0x60

	// Methods

	// RVA: 0x20EED60 Offset: 0x20EED60 VA: 0x20EED60
	public void .ctor() { }

	// RVA: 0x20EED68 Offset: 0x20EED68 VA: 0x20EED68 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x20EEDC4 Offset: 0x20EEDC4 VA: 0x20EEDC4
	private bool IsOptionalBattleEffectIdAvaliable() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC9220C Offset: 0xC9220C VA: 0xC9220C
[NoteAttribute] // RVA: 0xC9220C Offset: 0xC9220C VA: 0xC9220C
public class StoreOptionalBattleEffectId : FsmStateAction // TypeDefIndex: 7871
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC40B0 Offset: 0xCC40B0 VA: 0xCC40B0
	[CheckForComponentAttribute] // RVA: 0xCC40B0 Offset: 0xCC40B0 VA: 0xCC40B0
	public FsmGameObject PerformanceObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCC4124 Offset: 0xCC4124 VA: 0xCC4124
	[TooltipAttribute] // RVA: 0xCC4124 Offset: 0xCC4124 VA: 0xCC4124
	public FsmInt EffectIndex; // 0x58
	[TooltipAttribute] // RVA: 0xCC4170 Offset: 0xCC4170 VA: 0xCC4170
	public FsmInt StoreEffectId; // 0x60

	// Methods

	// RVA: 0x212DF24 Offset: 0x212DF24 VA: 0x212DF24
	public void .ctor() { }

	// RVA: 0x212DF2C Offset: 0x212DF2C VA: 0x212DF2C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x212DF80 Offset: 0x212DF80 VA: 0x212DF80
	private int GetEffectIdFromSKillLvScript() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC9226C Offset: 0xC9226C VA: 0xC9226C
[TooltipAttribute] // RVA: 0xC9226C Offset: 0xC9226C VA: 0xC9226C
public class BattleSeLoader : FsmStateAction // TypeDefIndex: 7872
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC41A8 Offset: 0xCC41A8 VA: 0xCC41A8
	public FsmString categoryName; // 0x50
	[TooltipAttribute] // RVA: 0xCC41E0 Offset: 0xCC41E0 VA: 0xCC41E0
	public FsmBool isDownloadOnly; // 0x58
	[TooltipAttribute] // RVA: 0xCC4218 Offset: 0xCC4218 VA: 0xCC4218
	public FsmEvent finishEvent; // 0x60
	[TooltipAttribute] // RVA: 0xCC4250 Offset: 0xCC4250 VA: 0xCC4250
	public FsmObject assetData; // 0x68

	// Methods

	// RVA: 0x231D67C Offset: 0x231D67C VA: 0x231D67C
	public void .ctor() { }

	// RVA: 0x231D684 Offset: 0x231D684 VA: 0x231D684 Slot: 28
	public override void Reset() { }

	// RVA: 0x231D70C Offset: 0x231D70C VA: 0x231D70C Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC922BC Offset: 0xC922BC VA: 0xC922BC
public class ChangeRendererMaterialColor : FsmStateAction // TypeDefIndex: 7873
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC4288 Offset: 0xCC4288 VA: 0xCC4288
	public FsmGameObject gameObject; // 0x50
	public ChangeRendererMaterialColorEffect.RendererType[] targetRendererTypes; // 0x58
	public FsmString propertyName; // 0x60
	public FsmColor color; // 0x68
	public FsmFloat time; // 0x70
	public iTween.EaseType easeType; // 0x78
	public FsmBool isMaterialAll; // 0x80
	public FsmEvent changedEvent; // 0x88
	private bool isChanged; // 0x90

	// Methods

	// RVA: 0x2322158 Offset: 0x2322158 VA: 0x2322158
	public void .ctor() { }

	// RVA: 0x23221C8 Offset: 0x23221C8 VA: 0x23221C8 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2322488 Offset: 0x2322488 VA: 0x2322488 Slot: 34
	public override void OnUpdate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD384EC Offset: 0xD384EC VA: 0xD384EC
	// RVA: 0x2322500 Offset: 0x2322500 VA: 0x2322500
	private void <OnEnter>m__0() { }
}

// Namespace: HutongGames.PlayMaker.Actions
