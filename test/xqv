	public GameObject enemyStage; // 0x60
	public GameObject tacticBg; // 0x68
	public Transform[] npcBattleTr; // 0x70
	public Transform[] npcTacticalTr; // 0x78
	private BattleActionData badata; // 0x80
	private bool flgStep; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCCFE44 Offset: 0xCCFE44 VA: 0xCCFE44
	[DebuggerBrowsableAttribute] // RVA: 0xCCFE44 Offset: 0xCCFE44 VA: 0xCCFE44
	private int <motionCompleteCount>k__BackingField; // 0x8C
	[CompilerGeneratedAttribute] // RVA: 0xCCFE80 Offset: 0xCCFE80 VA: 0xCCFE80
	[DebuggerBrowsableAttribute] // RVA: 0xCCFE80 Offset: 0xCCFE80 VA: 0xCCFE80
	private bool <isActiveMotion>k__BackingField; // 0x90
	private Queue<BattleActionData.ReplaceMember> replaceMember; // 0x98
	private string replaceEndEvent; // 0xA0
	private BattleActionData.ReplaceMember targetReplaceData; // 0xA8

	// Properties
	public BaseMotionSkip MotionSkip { get; }
	public int motionCompleteCount { get; set; }
	public bool isActiveMotion { get; set; }

	// Methods

	// RVA: 0x1670258 Offset: 0x1670258 VA: 0x1670258
	public void .ctor() { }

	// RVA: 0x16702C8 Offset: 0x16702C8 VA: 0x16702C8
	public BaseMotionSkip get_MotionSkip() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A554 Offset: 0xD3A554 VA: 0xD3A554
	// RVA: 0x16702F8 Offset: 0x16702F8 VA: 0x16702F8
	public int get_motionCompleteCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A564 Offset: 0xD3A564 VA: 0xD3A564
	// RVA: 0x1670300 Offset: 0x1670300 VA: 0x1670300
	private void set_motionCompleteCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A574 Offset: 0xD3A574 VA: 0xD3A574
	// RVA: 0x1670308 Offset: 0x1670308 VA: 0x1670308
	public bool get_isActiveMotion() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A584 Offset: 0xD3A584 VA: 0xD3A584
	// RVA: 0x1670310 Offset: 0x1670310 VA: 0x1670310
	protected void set_isActiveMotion(bool value) { }

	// RVA: 0x167031C Offset: 0x167031C VA: 0x167031C
	public void setPerf(BattlePerformance inperf) { }

	// RVA: 0x165DF60 Offset: 0x165DF60 VA: 0x165DF60
	public Transform getEnemyPopPoint(int index) { }

	// RVA: 0x16703EC Offset: 0x16703EC VA: 0x16703EC
	public Transform getPopEnemy() { }

	// RVA: 0x165DEDC Offset: 0x165DEDC VA: 0x165DEDC
	public Transform getPlayerPopTr(int index) { }

	// RVA: 0x16703F4 Offset: 0x16703F4 VA: 0x16703F4
	public Transform getPopPlayer() { }

	// RVA: 0x16703FC Offset: 0x16703FC VA: 0x16703FC
	public Transform getPlayerTacticalTr(int index) { }

	// RVA: 0x1670480 Offset: 0x1670480 VA: 0x1670480
	public Transform getEnemyTacticalTr(int index) { }

	// RVA: 0x1670504 Offset: 0x1670504 VA: 0x1670504
	public Transform GetTargetTr(FieldMotionManager.GET_TYPE type, int index) { }

	// RVA: 0x1670590 Offset: 0x1670590 VA: 0x1670590
	public void sendEvent(string eventstr) { }

	// RVA: 0x16705C8 Offset: 0x16705C8 VA: 0x16705C8
	public static string GetMotionName(BattleActionData baData) { }

	// RVA: 0x16706C0 Offset: 0x16706C0 VA: 0x16706C0
	public void playBattleActionData(BattleActionData badata, string motionName) { }

	// RVA: 0x167077C Offset: 0x167077C VA: 0x167077C
	public void SetActiveMotion(bool active) { }

	// RVA: 0x1670788 Offset: 0x1670788 VA: 0x1670788
	public void procBuff() { }

	// RVA: 0x167078C Offset: 0x167078C VA: 0x167078C
	public void finishMotion() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3A594 Offset: 0xD3A594 VA: 0xD3A594
	// RVA: 0x1670838 Offset: 0x1670838 VA: 0x1670838
	private IEnumerator CameraCoroutine() { }

	// RVA: 0x16708B0 Offset: 0x16708B0 VA: 0x16708B0
	public void startReplaceActor(string endEvent) { }

	// RVA: 0x1670AC8 Offset: 0x1670AC8 VA: 0x1670AC8
	public void loadReplaceActor(string endEvent) { }

	// RVA: 0x1670C00 Offset: 0x1670C00 VA: 0x1670C00
	public void loadReplace(string endEvent) { }

	// RVA: 0x1670CA0 Offset: 0x1670CA0 VA: 0x1670CA0
	public void endLoadReplaceActor() { }

	// RVA: 0x1670CD8 Offset: 0x1670CD8 VA: 0x1670CD8
	public bool checkMotionEvent(string name) { }

	// RVA: 0x1670DF0 Offset: 0x1670DF0 VA: 0x1670DF0
	public void startFieldStep() { }

	// RVA: 0x1670DFC Offset: 0x1670DFC VA: 0x1670DFC
	public void endFieldStep() { }

	// RVA: 0x1670E04 Offset: 0x1670E04 VA: 0x1670E04
	public bool isStep() { }

	// RVA: 0x1670E0C Offset: 0x1670E0C VA: 0x1670E0C
	public void resetMotionCompleteCount() { }

	// RVA: 0x1670E14 Offset: 0x1670E14 VA: 0x1670E14
	public void OnMotionComplete(string eventstr) { }

	// RVA: 0x1670E24 Offset: 0x1670E24 VA: 0x1670E24
	public void ptStepOut(string name) { }

	// RVA: 0x1670E54 Offset: 0x1670E54 VA: 0x1670E54
	public void loadPt(string name) { }

	// RVA: 0x1670F34 Offset: 0x1670F34 VA: 0x1670F34
	public GameObject getGameObject(string name) { }

	// RVA: 0x165FFF0 Offset: 0x165FFF0 VA: 0x165FFF0
	public PlayMakerFSM getFsm() { }

	// RVA: 0x1671000 Offset: 0x1671000 VA: 0x1671000
	public void FieldCallServant() { }

	// RVA: 0x1671030 Offset: 0x1671030 VA: 0x1671030
	public void FieldCallEffect(bool isBefore) { }

	// RVA: 0x1671068 Offset: 0x1671068 VA: 0x1671068
	public void DisplayDefenceTarget() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE60 Offset: 0xCAFE60 VA: 0xCAFE60
private sealed class BattleFieldMotionComponent.<CameraCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8879
{
	// Fields
	internal BattleFieldMotionComponent $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48064 Offset: 0xD48064 VA: 0xD48064
	// RVA: 0x16708A8 Offset: 0x16708A8 VA: 0x16708A8
	public void .ctor() { }

	// RVA: 0x1671098 Offset: 0x1671098 VA: 0x1671098 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48074 Offset: 0xD48074 VA: 0xD48074
	// RVA: 0x16711D8 Offset: 0x16711D8 VA: 0x16711D8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48084 Offset: 0xD48084 VA: 0xD48084
	// RVA: 0x16711E0 Offset: 0x16711E0 VA: 0x16711E0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48094 Offset: 0xD48094 VA: 0xD48094
	// RVA: 0x16711E8 Offset: 0x16711E8 VA: 0x16711E8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD480A4 Offset: 0xD480A4 VA: 0xD480A4
	// RVA: 0x16711FC Offset: 0x16711FC VA: 0x16711FC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE70 Offset: 0xCAFE70 VA: 0xCAFE70
private sealed class BattleFieldMotionComponent.<loadPt>c__AnonStorey1 // TypeDefIndex: 8880
{
	// Fields
	internal string name; // 0x10
	internal BattleFieldMotionComponent $this; // 0x18

	// Methods

	// RVA: 0x1670F2C Offset: 0x1670F2C VA: 0x1670F2C
	public void .ctor() { }

	// RVA: 0x1671264 Offset: 0x1671264 VA: 0x1671264
	internal void <>m__0() { }
}

// Namespace: 
public class BattleFieldStatus : AiInterface // TypeDefIndex: 8881
{
	// Fields
	protected double[] wkZeroParam; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCFEBC Offset: 0xCCFEBC VA: 0xCCFEBC
	private static Predicate<BattleServantData> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCCFECC Offset: 0xCCFECC VA: 0xCCFECC
	private static Predicate<BattleServantData> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x16712B0 Offset: 0x16712B0 VA: 0x16712B0
	public void .ctor() { }

	// RVA: 0x1671310 Offset: 0x1671310 VA: 0x1671310 Slot: 6
	public virtual double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkparams) { }

	// RVA: 0x1671318 Offset: 0x1671318 VA: 0x1671318 Slot: 7
	public virtual bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }

	// RVA: 0x1671320 Offset: 0x1671320 VA: 0x1671320
	protected int CommonAliveCount(List<BattleServantData> datalist) { }

	// RVA: 0x167140C Offset: 0x167140C VA: 0x167140C
	protected int CommonRestCount(List<BattleServantData> datalist) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A5A4 Offset: 0xD3A5A4 VA: 0xD3A5A4
	// RVA: 0x16714F4 Offset: 0x16714F4 VA: 0x16714F4
	private static bool <CommonAliveCount>m__0(BattleServantData p) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A5B4 Offset: 0xD3A5B4 VA: 0xD3A5B4
	// RVA: 0x1671554 Offset: 0x1671554 VA: 0x1671554
	private static bool <CommonRestCount>m__1(BattleServantData p) { }
}

// Namespace: 
public class BattleFriendshipRewardInfo // TypeDefIndex: 8882
{
	// Fields
	public bool isNew; // 0x10
	public long userSvtId; // 0x18
	public int mstGiftId; // 0x20
	public int type; // 0x24
	public int targetSvtId; // 0x28
	public int objectId; // 0x2C
	public int num; // 0x30
	public int limitCount; // 0x34
	public int lv; // 0x38
	public int rarity; // 0x3C

	// Methods

	// RVA: 0x16715B0 Offset: 0x16715B0 VA: 0x16715B0
	public void .ctor() { }

	// RVA: 0x16715B8 Offset: 0x16715B8 VA: 0x16715B8
	public GiftEntity getGiftEntity() { }

	// RVA: 0x1671664 Offset: 0x1671664 VA: 0x1671664
	public bool isShow() { }
}

// Namespace: 
public class BattleHitStopControl : BaseMonoBehaviour // TypeDefIndex: 8883
{
	// Fields
	private List<GameObject> stopobjlist; // 0x18

	// Methods

	// RVA: 0x1671740 Offset: 0x1671740 VA: 0x1671740
	public void .ctor() { }

	// RVA: 0x1671748 Offset: 0x1671748 VA: 0x1671748
	private void Start() { }

	// RVA: 0x16717B0 Offset: 0x16717B0 VA: 0x16717B0
	public void Clear() { }

	// RVA: 0x1671810 Offset: 0x1671810 VA: 0x1671810
	public void setTargetObject(GameObject obj) { }

	// RVA: 0x1671880 Offset: 0x1671880 VA: 0x1671880
	public void actWait(float time) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3A5C4 Offset: 0xD3A5C4 VA: 0xD3A5C4
	// RVA: 0x16718AC Offset: 0x16718AC VA: 0x16718AC
	private IEnumerator stopwaitCor(float time) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE80 Offset: 0xCAFE80 VA: 0xCAFE80
private sealed class BattleHitStopControl.<stopwaitCor>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8884
{
	// Fields
	internal List.Enumerator<GameObject> $locvar0; // 0x10
	internal float time; // 0x28
	internal List.Enumerator<GameObject> $locvar1; // 0x30
	internal BattleHitStopControl $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD480B4 Offset: 0xD480B4 VA: 0xD480B4
	// RVA: 0x1671940 Offset: 0x1671940 VA: 0x1671940
	public void .ctor() { }

	// RVA: 0x1671948 Offset: 0x1671948 VA: 0x1671948 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD480C4 Offset: 0xD480C4 VA: 0xD480C4
	// RVA: 0x1671C64 Offset: 0x1671C64 VA: 0x1671C64 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD480D4 Offset: 0xD480D4 VA: 0xD480D4
	// RVA: 0x1671C6C Offset: 0x1671C6C VA: 0x1671C6C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD480E4 Offset: 0xD480E4 VA: 0xD480E4
	// RVA: 0x1671C74 Offset: 0x1671C74 VA: 0x1671C74 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD480F4 Offset: 0xD480F4 VA: 0xD480F4
	// RVA: 0x1671C88 Offset: 0x1671C88 VA: 0x1671C88 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleItemIconComponent : ItemIconComponent // TypeDefIndex: 8885
{
	// Fields
	public Color32 addCountColor; // 0x80
	public string addCountStr; // 0x88
	public Color darkModeColor; // 0x90
	private Color32 nowAddCountColor; // 0xA0

	// Methods

	// RVA: 0x17510D4 Offset: 0x17510D4 VA: 0x17510D4
	public void .ctor() { }

	// RVA: 0x1751174 Offset: 0x1751174 VA: 0x1751174
	public void setCounterLabel(int type, int count, int addCount) { }

	// RVA: 0x1751624 Offset: 0x1751624 VA: 0x1751624
	public void SetActiveDarkMode(bool isActive) { }
}

// Namespace: 
public class BattleLogData // TypeDefIndex: 8886
{
	// Fields
	private List<string> list; // 0x10
	private string tag; // 0x18
	private int max; // 0x20

	// Methods

	// RVA: 0x1751980 Offset: 0x1751980 VA: 0x1751980
	public void .ctor() { }

	// RVA: 0x1751A3C Offset: 0x1751A3C VA: 0x1751A3C
	public void .ctor(string intag) { }

	// RVA: 0x1751AF8 Offset: 0x1751AF8 VA: 0x1751AF8
	public void .ctor(string intag, int inmax) { }

	// RVA: 0x1751BBC Offset: 0x1751BBC VA: 0x1751BBC
	public void addStr(string str) { }

	// RVA: 0x1751CC8 Offset: 0x1751CC8 VA: 0x1751CC8
	public string[] getStringList() { }
}

// Namespace: 
public class BattleMotionSkipManager // TypeDefIndex: 8887
{
	// Fields
	private BaseMotionSkip defaultMotionSkip; // 0x10
	private BaseMotionSkip mainMotionSkip; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCFEDC Offset: 0xCCFEDC VA: 0xCCFEDC
	[DebuggerBrowsableAttribute] // RVA: 0xCCFEDC Offset: 0xCCFEDC VA: 0xCCFEDC
	private BattlePerformance <Perf>k__BackingField; // 0x20

	// Properties
	public BaseMotionSkip Current { get; set; }
	public BattlePerformance Perf { get; set; }

	// Methods

	// RVA: 0x1501608 Offset: 0x1501608 VA: 0x1501608
	public void .ctor(BattlePerformance perf) { }

	// RVA: 0x150168C Offset: 0x150168C VA: 0x150168C
	private void set_Current(BaseMotionSkip value) { }

	// RVA: 0x1501694 Offset: 0x1501694 VA: 0x1501694
	public BaseMotionSkip get_Current() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A5D4 Offset: 0xD3A5D4 VA: 0xD3A5D4
	// RVA: 0x1501684 Offset: 0x1501684 VA: 0x1501684
	private void set_Perf(BattlePerformance value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A5E4 Offset: 0xD3A5E4 VA: 0xD3A5E4
	// RVA: 0x15016AC Offset: 0x15016AC VA: 0x15016AC
	public BattlePerformance get_Perf() { }

	// RVA: 0x15016B4 Offset: 0x15016B4 VA: 0x15016B4
	public void SetMotionSkip(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1501718 Offset: 0x1501718 VA: 0x1501718
	public void ReleaseMotionSkip() { }
}

// Namespace: 
public class BaseMotionSkip // TypeDefIndex: 8888
{
	// Properties
	public virtual bool IsSkipping { get; }
	public virtual float ResetTimeScaleDelayTime { get; }

	// Methods

	// RVA: 0x1483718 Offset: 0x1483718 VA: 0x1483718
	public void .ctor() { }

	// RVA: 0x1483720 Offset: 0x1483720 VA: 0x1483720 Slot: 4
	public virtual bool get_IsSkipping() { }

	// RVA: 0x1483728 Offset: 0x1483728 VA: 0x1483728 Slot: 5
	public virtual float get_ResetTimeScaleDelayTime() { }

	// RVA: 0x1483730 Offset: 0x1483730 VA: 0x1483730 Slot: 6
	public virtual void Init(BattleMotionSkipManager manager) { }

	// RVA: 0x1483734 Offset: 0x1483734 VA: 0x1483734 Slot: 7
	public virtual void Release() { }

	// RVA: 0x1483738 Offset: 0x1483738 VA: 0x1483738 Slot: 8
	public virtual void MotionStart() { }

	// RVA: 0x148373C Offset: 0x148373C VA: 0x148373C Slot: 9
	public virtual void MotionEnd() { }

	// RVA: 0x1483740 Offset: 0x1483740 VA: 0x1483740 Slot: 10
	public virtual float ConvertSkipDuration(float duration) { }
}

// Namespace: 
public class CommonMotionSkip : BaseMotionSkip // TypeDefIndex: 8889
{
	// Fields
	protected BattleMotionSkipManager manager; // 0x10
	protected BitValue<CommonMotionSkip.State> state; // 0x18
	protected Coroutine corInputWait; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCCFF18 Offset: 0xCCFF18 VA: 0xCCFF18
	private static Func<CommonMotionSkip.State, int> <>f__am$cache0; // 0x0

	// Properties
	protected BattlePerformance Perf { get; }
	protected virtual float SkipTimeScale { get; }
	public override bool IsSkipping { get; }

	// Methods

	// RVA: 0x149ADEC Offset: 0x149ADEC VA: 0x149ADEC
	public void .ctor() { }

	// RVA: 0x149ADF4 Offset: 0x149ADF4 VA: 0x149ADF4
	protected BattlePerformance get_Perf() { }

	// RVA: 0x149AE24 Offset: 0x149AE24 VA: 0x149AE24 Slot: 11
	protected virtual float get_SkipTimeScale() { }

	// RVA: 0x149AE2C Offset: 0x149AE2C VA: 0x149AE2C Slot: 4
	public override bool get_IsSkipping() { }

	// RVA: 0x149AE90 Offset: 0x149AE90 VA: 0x149AE90 Slot: 6
	public override void Init(BattleMotionSkipManager manager) { }

	// RVA: 0x149AF70 Offset: 0x149AF70 VA: 0x149AF70 Slot: 7
	public override void Release() { }

	// RVA: 0x149B038 Offset: 0x149B038 VA: 0x149B038 Slot: 8
	public override void MotionStart() { }

	// RVA: 0x149B1B4 Offset: 0x149B1B4 VA: 0x149B1B4 Slot: 9
	public override void MotionEnd() { }

	// RVA: 0x149B1B8 Offset: 0x149B1B8 VA: 0x149B1B8 Slot: 10
	public override float ConvertSkipDuration(float duration) { }

	// RVA: 0x149B208 Offset: 0x149B208 VA: 0x149B208 Slot: 12
	protected virtual void ExecSkip() { }

	// RVA: 0x149AFE0 Offset: 0x149AFE0 VA: 0x149AFE0
	protected void StopInputWaitCoroutine() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3A5F4 Offset: 0xD3A5F4 VA: 0xD3A5F4
	// RVA: 0x149B120 Offset: 0x149B120 VA: 0x149B120
	protected IEnumerator CoroutineInputWait(BattleCallBackBase callback) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A604 Offset: 0xD3A604 VA: 0xD3A604
	// RVA: 0x149B2BC Offset: 0x149B2BC VA: 0x149B2BC
	private static int <Init>m__0(CommonMotionSkip.State state) { }
}

// Namespace: 
protected enum CommonMotionSkip.State // TypeDefIndex: 8890
{
	// Fields
	public int value__; // 0x0
	public const CommonMotionSkip.State SKIPPING = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE90 Offset: 0xCAFE90 VA: 0xCAFE90
private sealed class CommonMotionSkip.<CoroutineInputWait>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8891
{
	// Fields
	internal bool <isInputed>__1; // 0x10
	internal BattleCallBackBase callback; // 0x18
	internal CommonMotionSkip $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48104 Offset: 0xD48104 VA: 0xD48104
	// RVA: 0x149B2B4 Offset: 0x149B2B4 VA: 0x149B2B4
	public void .ctor() { }

	// RVA: 0x149B2C0 Offset: 0x149B2C0 VA: 0x149B2C0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48114 Offset: 0xD48114 VA: 0xD48114
	// RVA: 0x149B3D8 Offset: 0x149B3D8 VA: 0x149B3D8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48124 Offset: 0xD48124 VA: 0xD48124
	// RVA: 0x149B3E0 Offset: 0x149B3E0 VA: 0x149B3E0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48134 Offset: 0xD48134 VA: 0xD48134
	// RVA: 0x149B3E8 Offset: 0x149B3E8 VA: 0x149B3E8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48144 Offset: 0xD48144 VA: 0xD48144
	// RVA: 0x149B3FC Offset: 0x149B3FC VA: 0x149B3FC Slot: 6
	public void Reset() { }
}

// Namespace: 
public class SkillMotionSkip : CommonMotionSkip // TypeDefIndex: 8892
{
	// Properties
	public override float ResetTimeScaleDelayTime { get; }

	// Methods

	// RVA: 0x1CE71F0 Offset: 0x1CE71F0 VA: 0x1CE71F0
	public void .ctor() { }

	// RVA: 0x1CE71F8 Offset: 0x1CE71F8 VA: 0x1CE71F8 Slot: 5
	public override float get_ResetTimeScaleDelayTime() { }

	// RVA: 0x1CE7228 Offset: 0x1CE7228 VA: 0x1CE7228 Slot: 7
	public override void Release() { }
}

// Namespace: 
public class BattleMoveObject : BaseMonoBehaviour // TypeDefIndex: 8893
{
	// Fields
	public Vector3 checkvec; // 0x18
	public Vector3 targetvec; // 0x24
	public Transform targetTr; // 0x30
	public GameObject destoryobject; // 0x38
	private bool dropflg; // 0x40
	private bool moveflg; // 0x41
	public BattleMoveObject.TYPE type; // 0x44
	private Rigidbody rigibody; // 0x48
	private Spawner spawner; // 0x50
	private Transform selfTransform; // 0x58
	private bool isNotTweenMove; // 0x60
	private BattleMoveObject.NotTweenInfo notTweenInfo; // 0x68
	private BattleMoveObject.EASING easingType; // 0x90
	public BattlePerformance perf; // 0x98
	public int count; // 0xA0

	// Methods

	// RVA: 0x150175C Offset: 0x150175C VA: 0x150175C
	public void .ctor() { }

	// RVA: 0x1501764 Offset: 0x1501764 VA: 0x1501764
	private void Start() { }

	// RVA: 0x15017E0 Offset: 0x15017E0 VA: 0x15017E0
	private void OnSpawn() { }

	// RVA: 0x15017F8 Offset: 0x15017F8 VA: 0x15017F8
	private void Update() { }

	// RVA: 0x1501C2C Offset: 0x1501C2C VA: 0x1501C2C
	public void setTypeItem() { }

	// RVA: 0x1501C38 Offset: 0x1501C38 VA: 0x1501C38
	public bool isMoveToItems() { }

	// RVA: 0x1501C48 Offset: 0x1501C48 VA: 0x1501C48
	public void setAction(Vector3 vec) { }

	// RVA: 0x1501CA0 Offset: 0x1501CA0 VA: 0x1501CA0
	public void setTarget(Vector3 vec) { }

	// RVA: 0x1501CAC Offset: 0x1501CAC VA: 0x1501CAC
	public void setTargetTr(Transform tr) { }

	// RVA: 0x1501CB4 Offset: 0x1501CB4 VA: 0x1501CB4
	public void setParam(BattlePerformance perf, int count) { }

	// RVA: 0x1501CC0 Offset: 0x1501CC0 VA: 0x1501CC0
	public void startMoveTarget() { }

	// RVA: 0x1501EC0 Offset: 0x1501EC0 VA: 0x1501EC0
	public void onOpenComplete() { }

	// RVA: 0x15021C4 Offset: 0x15021C4 VA: 0x15021C4
	public Transform GetTransform() { }

	// RVA: 0x1502254 Offset: 0x1502254 VA: 0x1502254
	public void SetRigidbodyGravity(bool flg) { }

	// RVA: 0x1502318 Offset: 0x1502318 VA: 0x1502318
	public void StartNotTweenMove(Vector3 from, Vector3 to, float time, float delay, Action<GameObject> callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3A614 Offset: 0xD3A614 VA: 0xD3A614
	// RVA: 0x1502384 Offset: 0x1502384 VA: 0x1502384
	private IEnumerator _StartNotTweenMove(float delay) { }

	// RVA: 0x1502420 Offset: 0x1502420 VA: 0x1502420
	public void SetEasingType(BattleMoveObject.EASING type) { }

	// RVA: 0x1501BE0 Offset: 0x1501BE0 VA: 0x1501BE0
	private float easeInQuart(float start, float end, float value) { }

	// RVA: 0x1501BFC Offset: 0x1501BFC VA: 0x1501BFC
	private float easeInBack(float start, float end, float value) { }
}

// Namespace: 
public enum BattleMoveObject.TYPE // TypeDefIndex: 8894
{
	// Fields
	public int value__; // 0x0
	public const BattleMoveObject.TYPE NONE = 0;
	public const BattleMoveObject.TYPE CRITICAL = 1;
	public const BattleMoveObject.TYPE ITEM = 2;
}

// Namespace: 
public enum BattleMoveObject.EASING // TypeDefIndex: 8895
{
	// Fields
	public int value__; // 0x0
	public const BattleMoveObject.EASING EASEINQUART = 0;
	public const BattleMoveObject.EASING EASEINBACK = 1;
}

// Namespace: 
public struct BattleMoveObject.NotTweenInfo // TypeDefIndex: 8896
{
	// Fields
	public Vector3 from; // 0x0
	public Vector3 to; // 0xC
	public float time; // 0x18
	public float startTime; // 0x1C
	public Action<GameObject> callback; // 0x20
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFEA0 Offset: 0xCAFEA0 VA: 0xCAFEA0
private sealed class BattleMoveObject.<_StartNotTweenMove>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8897
{
	// Fields
	internal float delay; // 0x10
	internal BattleMoveObject $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48154 Offset: 0xD48154 VA: 0xD48154
	// RVA: 0x1502418 Offset: 0x1502418 VA: 0x1502418
	public void .ctor() { }

	// RVA: 0x1502428 Offset: 0x1502428 VA: 0x1502428 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48164 Offset: 0xD48164 VA: 0xD48164
	// RVA: 0x1502514 Offset: 0x1502514 VA: 0x1502514 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48174 Offset: 0xD48174 VA: 0xD48174
	// RVA: 0x150251C Offset: 0x150251C VA: 0x150251C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48184 Offset: 0xD48184 VA: 0xD48184
	// RVA: 0x1502524 Offset: 0x1502524 VA: 0x1502524 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48194 Offset: 0xD48194 VA: 0xD48194
	// RVA: 0x1502538 Offset: 0x1502538 VA: 0x1502538 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePanelEvent : MonoBehaviour // TypeDefIndex: 8898
{
	// Fields
	public GameObject Panel; // 0x18

	// Methods

	// RVA: 0x1504648 Offset: 0x1504648 VA: 0x1504648
	public void .ctor() { }

	// RVA: 0x1504650 Offset: 0x1504650 VA: 0x1504650
	private void OnDestroy() { }

	// RVA: 0x1504660 Offset: 0x1504660 VA: 0x1504660
	private void SetPanelActive() { }

	// RVA: 0x1504658 Offset: 0x1504658 VA: 0x1504658
	private void SetPanelDisable() { }

	// RVA: 0x1504668 Offset: 0x1504668 VA: 0x1504668
	private void SetPanelActive(bool flag) { }
}

// Namespace: 
public class BattleParamComponent : BaseMonoBehaviour // TypeDefIndex: 8899
{
	// Fields
	[SerializeField] // RVA: 0xCCFF28 Offset: 0xCCFF28 VA: 0xCCFF28
	public float endtime; // 0x18
	[SerializeField] // RVA: 0xCCFF38 Offset: 0xCCFF38 VA: 0xCCFF38
	public float nextStepTime; // 0x1C
	[SerializeField] // RVA: 0xCCFF48 Offset: 0xCCFF48 VA: 0xCCFF48
	private string baseAnimationName; // 0x20
	[SerializeField] // RVA: 0xCCFF58 Offset: 0xCCFF58 VA: 0xCCFF58
	private int maxPhase; // 0x28
	[SerializeField] // RVA: 0xCCFF68 Offset: 0xCCFF68 VA: 0xCCFF68
	private int[] switchPhase; // 0x30
	[SerializeField] // RVA: 0xCCFF78 Offset: 0xCCFF78 VA: 0xCCFF78
	private string voiceDataStr; // 0x38
	private SimpleAnimation simpleAnim; // 0x40
	private Animation anim; // 0x48
	private int[] animationIds; // 0x50
	private int currentPhase; // 0x58
	private int switchIndex; // 0x5C
	private string voicePath; // 0x60
	private CommonEffectComponent commonEff; // 0x68

	// Methods

	// RVA: 0x1504718 Offset: 0x1504718 VA: 0x1504718
	public void .ctor() { }

	// RVA: 0x15047A0 Offset: 0x15047A0 VA: 0x15047A0
	private void Init() { }

	// RVA: 0x1504830 Offset: 0x1504830 VA: 0x1504830
	public void SetInfo(int[] animationIds, int voiceId, Action callback) { }

	// RVA: 0x1504964 Offset: 0x1504964 VA: 0x1504964
	public void Release() { }

	// RVA: 0x1504A30 Offset: 0x1504A30 VA: 0x1504A30
	public void PlayStartEffect(int start, int end, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3A624 Offset: 0xD3A624 VA: 0xD3A624
	// RVA: 0x1504A5C Offset: 0x1504A5C VA: 0x1504A5C
	private IEnumerator playingEffect(int start, int end, Action callback) { }

	// RVA: 0x1504B28 Offset: 0x1504B28 VA: 0x1504B28
	public void SetEndressFlg(bool flg) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFEB0 Offset: 0xCAFEB0 VA: 0xCAFEB0
private sealed class BattleParamComponent.<playingEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8900
{
	// Fields
	internal int start; // 0x10
	internal int end; // 0x14
	internal string <name>__1; // 0x18
	internal Action callback; // 0x20
	internal BattleParamComponent $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD481A4 Offset: 0xD481A4 VA: 0xD481A4
	// RVA: 0x1504B20 Offset: 0x1504B20 VA: 0x1504B20
	public void .ctor() { }

	// RVA: 0x1504BD8 Offset: 0x1504BD8 VA: 0x1504BD8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD481B4 Offset: 0xD481B4 VA: 0xD481B4
	// RVA: 0x15050E8 Offset: 0x15050E8 VA: 0x15050E8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD481C4 Offset: 0xD481C4 VA: 0xD481C4
	// RVA: 0x15050F0 Offset: 0x15050F0 VA: 0x15050F0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD481D4 Offset: 0xD481D4 VA: 0xD481D4
	// RVA: 0x15050F8 Offset: 0x15050F8 VA: 0x15050F8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD481E4 Offset: 0xD481E4 VA: 0xD481E4
	// RVA: 0x150510C Offset: 0x150510C VA: 0x150510C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleRaidInfo // TypeDefIndex: 8901
{
	// Fields
	public int day; // 0x10
	public int uniqueId; // 0x14
	public long maxHp; // 0x18
	public long totalDamage; // 0x20

	// Methods

	// RVA: 0x16CF048 Offset: 0x16CF048 VA: 0x16CF048
	public void .ctor() { }
}

// Namespace: 
public class BattleRaidTurnStartEffect : MonoBehaviour // TypeDefIndex: 8902
{
	// Fields
	public bool animeStop; // 0x18

	// Methods

	// RVA: 0x16CF050 Offset: 0x16CF050 VA: 0x16CF050
	public void .ctor() { }

	// RVA: 0x16CF058 Offset: 0x16CF058 VA: 0x16CF058
	public void setStopFlg(bool stopFlag) { }

	// RVA: 0x16CF064 Offset: 0x16CF064 VA: 0x16CF064
	public void waitLimitTurnEffect() { }

	// RVA: 0x16CF78C Offset: 0x16CF78C VA: 0x16CF78C
	public void resumeLimitTurnEffect() { }
}

// Namespace: 
public class BattleRandom : SingletonMonoBehaviour<BattleRandom> // TypeDefIndex: 8903
{
	// Fields
	public Random logicrandom; // 0x18
	public Random gutsrandom; // 0x20
	public int logicCount; // 0x28
	public int gutsCount; // 0x2C

	// Methods

	// RVA: 0x16CFEBC Offset: 0x16CFEBC VA: 0x16CFEBC
	public void .ctor() { }

	// RVA: 0x16CFF0C Offset: 0x16CFF0C VA: 0x16CFF0C
	public static void setSeed(int seed) { }

	// RVA: 0x16D0024 Offset: 0x16D0024 VA: 0x16D0024
	public static void adjustment() { }

	// RVA: 0x16D0138 Offset: 0x16D0138 VA: 0x16D0138
	public static int getNext(int max) { }

	// RVA: 0x16D023C Offset: 0x16D023C VA: 0x16D023C
	public static int getGutsNext(int max) { }

	// RVA: 0x16D033C Offset: 0x16D033C VA: 0x16D033C
	public static int getRandom(int min, int max) { }

	// RVA: -1 Offset: -1
	public static T[] getShuffle<T>(T[] list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B808CC Offset: 0x2B808CC VA: 0x2B808CC
	|-BattleRandom.getShuffle<BattleCommandData>
	|-BattleRandom.getShuffle<BattleServantData>
	|-BattleRandom.getShuffle<object>
	|
	|-RVA: 0x2B8071C Offset: 0x2B8071C VA: 0x2B8071C
	|-BattleRandom.getShuffle<int>
	*/

	// RVA: 0x16D0454 Offset: 0x16D0454 VA: 0x16D0454
	public static void SetCount(int logic, int guts) { }

	// RVA: 0x16D0514 Offset: 0x16D0514 VA: 0x16D0514
	public static int GetLogicCount() { }

	// RVA: 0x16D05B4 Offset: 0x16D05B4 VA: 0x16D05B4
	public static int GetGutsCount() { }
}

// Namespace: 
public class BattleRandomSwitchObj : MonoBehaviour // TypeDefIndex: 8904
{
	// Fields
	[SerializeField] // RVA: 0xCCFF88 Offset: 0xCCFF88 VA: 0xCCFF88
	[TooltipAttribute] // RVA: 0xCCFF88 Offset: 0xCCFF88 VA: 0xCCFF88
	private BattleRandomSwitchObj.SwitchData[] switchDataArray; // 0x18

	// Methods

	// RVA: 0x16D0654 Offset: 0x16D0654 VA: 0x16D0654
	public void .ctor() { }

	// RVA: 0x16D06B4 Offset: 0x16D06B4 VA: 0x16D06B4
	private void Start() { }

	// RVA: 0x16D06B8 Offset: 0x16D06B8 VA: 0x16D06B8
	public void Execution() { }
}

// Namespace: 
[Serializable]
public struct BattleRandomSwitchObj.SwitchData // TypeDefIndex: 8905
{
	// Fields
	[TooltipAttribute] // RVA: 0xCCFFD4 Offset: 0xCCFFD4 VA: 0xCCFFD4
	public GameObject[] objs; // 0x0
	[TooltipAttribute] // RVA: 0xCD000C Offset: 0xCD000C VA: 0xCD000C
	public int weight; // 0x8
	[TooltipAttribute] // RVA: 0xCD0044 Offset: 0xCD0044 VA: 0xCD0044
	public bool hitValue; // 0xC
	[TooltipAttribute] // RVA: 0xCD007C Offset: 0xCD007C VA: 0xCD007C
	public bool initValue; // 0xD
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFEC0 Offset: 0xCAFEC0 VA: 0xCAFEC0
private sealed class BattleRandomSwitchObj.<Execution>c__AnonStorey1 // TypeDefIndex: 8906
{
	// Fields
	internal int hitIndex; // 0x10
	internal BattleRandomSwitchObj $this; // 0x18

	// Methods

	// RVA: 0x16D0A8C Offset: 0x16D0A8C VA: 0x16D0A8C
	public void .ctor() { }

	// RVA: 0x16D0B38 Offset: 0x16D0B38 VA: 0x16D0B38
	internal void <>m__0(GameObject g) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFED0 Offset: 0xCAFED0 VA: 0xCAFED0
private sealed class BattleRandomSwitchObj.<Execution>c__AnonStorey0 // TypeDefIndex: 8907
{
	// Fields
	internal int i; // 0x10
	internal BattleRandomSwitchObj.<Execution>c__AnonStorey1 <>f__ref$1; // 0x18

	// Methods
