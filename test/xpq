	[DebuggerBrowsableAttribute] // RVA: 0xCC9DDC Offset: 0xCC9DDC VA: 0xCC9DDC
	private Transform <Node>k__BackingField; // 0x20

	// Properties
	public string NodeName { get; set; }
	public float Priority { get; set; }
	public Transform Node { get; set; }

	// Methods

	// RVA: 0x1942FB4 Offset: 0x1942FB4 VA: 0x1942FB4
	public void .ctor(Transform target) { }

	[CompilerGeneratedAttribute] // RVA: 0xD385DC Offset: 0xD385DC VA: 0xD385DC
	// RVA: 0x1942FE4 Offset: 0x1942FE4 VA: 0x1942FE4
	public string get_NodeName() { }

	[CompilerGeneratedAttribute] // RVA: 0xD385EC Offset: 0xD385EC VA: 0xD385EC
	// RVA: 0x19435AC Offset: 0x19435AC VA: 0x19435AC
	private void set_NodeName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD385FC Offset: 0xD385FC VA: 0xD385FC
	// RVA: 0x19435B4 Offset: 0x19435B4 VA: 0x19435B4
	public float get_Priority() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3860C Offset: 0xD3860C VA: 0xD3860C
	// RVA: 0x19435BC Offset: 0x19435BC VA: 0x19435BC
	private void set_Priority(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3861C Offset: 0xD3861C VA: 0xD3861C
	// RVA: 0x1942830 Offset: 0x1942830 VA: 0x1942830
	public Transform get_Node() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3862C Offset: 0xD3862C VA: 0xD3862C
	// RVA: 0x19435C4 Offset: 0x19435C4 VA: 0x19435C4
	private void set_Node(Transform value) { }

	// RVA: 0x1943470 Offset: 0x1943470 VA: 0x1943470
	protected void InitDetailData(Transform target) { }

	// RVA: 0x19433C8 Offset: 0x19433C8 VA: 0x19433C8
	public bool IsMatch(string nodeName) { }

	// RVA: 0x19431E8 Offset: 0x19431E8 VA: 0x19431E8
	public bool IsMatchValue(string baseKey, string value) { }

	// RVA: 0x1943140 Offset: 0x1943140 VA: 0x1943140
	public void UpdateCheckPriority(USFGOActorAxisRotation.NodeSearchDetailData target) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF1C0 Offset: 0xCAF1C0 VA: 0xCAF1C0
private sealed class USFGOActorAxisRotation.NodeSearchDetailData.<IsMatchValue>c__AnonStorey0 // TypeDefIndex: 8097
{
	// Fields
	internal string value; // 0x10

	// Methods

	// RVA: 0x19435CC Offset: 0x19435CC VA: 0x19435CC
	public void .ctor() { }

	// RVA: 0x19435D4 Offset: 0x19435D4 VA: 0x19435D4
	internal bool <>m__0(string x) { }
}

// Namespace: 
private abstract class USFGOActorAxisRotation.BaseNodeSearchData // TypeDefIndex: 8098
{
	// Fields
	protected string searchName; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCC9E18 Offset: 0xCC9E18 VA: 0xCC9E18
	[DebuggerBrowsableAttribute] // RVA: 0xCC9E18 Offset: 0xCC9E18 VA: 0xCC9E18
	private List<USFGOActorAxisRotation.NodeSearchDetailData> <DetailList>k__BackingField; // 0x18

	// Properties
	public List<USFGOActorAxisRotation.NodeSearchDetailData> DetailList { get; set; }

	// Methods

	// RVA: 0x1942EF0 Offset: 0x1942EF0 VA: 0x1942EF0
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3863C Offset: 0xD3863C VA: 0xD3863C
	// RVA: 0x1942F9C Offset: 0x1942F9C VA: 0x1942F9C
	public List<USFGOActorAxisRotation.NodeSearchDetailData> get_DetailList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3864C Offset: 0xD3864C VA: 0xD3864C
	// RVA: 0x1942F94 Offset: 0x1942F94 VA: 0x1942F94
	private void set_DetailList(List<USFGOActorAxisRotation.NodeSearchDetailData> value) { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract bool CheckSearchName(string name);

	// RVA: 0x1942FA4 Offset: 0x1942FA4 VA: 0x1942FA4 Slot: 5
	public virtual void Init(string name) { }

	// RVA: 0x1942748 Offset: 0x1942748 VA: 0x1942748
	public USFGOActorAxisRotation.NodeSearchDetailData GetMatchNodeData(string condValue) { }

	// RVA: 0x1942698 Offset: 0x1942698 VA: 0x1942698
	public void UpdateSearchData(Transform target) { }

	// RVA: 0x1942FEC Offset: 0x1942FEC VA: 0x1942FEC
	protected void UpdateCheckDetailData(USFGOActorAxisRotation.NodeSearchDetailData checkData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF1D0 Offset: 0xCAF1D0 VA: 0xCAF1D0
private sealed class USFGOActorAxisRotation.BaseNodeSearchData.<GetMatchNodeData>c__AnonStorey0 // TypeDefIndex: 8099
{
	// Fields
	internal string condValue; // 0x10
	internal USFGOActorAxisRotation.BaseNodeSearchData $this; // 0x18

	// Methods

	// RVA: 0x1942FAC Offset: 0x1942FAC VA: 0x1942FAC
	public void .ctor() { }

	// RVA: 0x1943190 Offset: 0x1943190 VA: 0x1943190
	internal bool <>m__0(USFGOActorAxisRotation.NodeSearchDetailData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF1E0 Offset: 0xCAF1E0 VA: 0xCAF1E0
private sealed class USFGOActorAxisRotation.BaseNodeSearchData.<UpdateCheckDetailData>c__AnonStorey1 // TypeDefIndex: 8100
{
	// Fields
	internal USFGOActorAxisRotation.NodeSearchDetailData checkData; // 0x10

	// Methods

	// RVA: 0x1943138 Offset: 0x1943138 VA: 0x1943138
	public void .ctor() { }

	// RVA: 0x1943384 Offset: 0x1943384 VA: 0x1943384
	internal bool <>m__0(USFGOActorAxisRotation.NodeSearchDetailData x) { }
}

// Namespace: 
private class USFGOActorAxisRotation.ContainsNodeSearchData : USFGOActorAxisRotation.BaseNodeSearchData // TypeDefIndex: 8101
{
	// Methods

	// RVA: 0x1942694 Offset: 0x1942694 VA: 0x1942694
	public void .ctor() { }

	// RVA: 0x1943400 Offset: 0x1943400 VA: 0x1943400 Slot: 4
	protected override bool CheckSearchName(string name) { }
}

// Namespace: 
private class USFGOActorAxisRotation.EqualsNodeSearchData : USFGOActorAxisRotation.BaseNodeSearchData // TypeDefIndex: 8102
{
	// Methods

	// RVA: 0x1942690 Offset: 0x1942690 VA: 0x1942690
	public void .ctor() { }

	// RVA: 0x1943438 Offset: 0x1943438 VA: 0x1943438 Slot: 4
	protected override bool CheckSearchName(string name) { }
}

// Namespace: 
[Serializable]
public class USFGOActorAxisRotation.AxisData // TypeDefIndex: 8103
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9E54 Offset: 0xCC9E54 VA: 0xCC9E54
	public string targetNodeName; // 0x10
	[TooltipAttribute] // RVA: 0xCC9E8C Offset: 0xCC9E8C VA: 0xCC9E8C
	public float startTime; // 0x18
	public bool isAdjustLowPosY; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCC9EC4 Offset: 0xCC9EC4 VA: 0xCC9EC4
	[DebuggerBrowsableAttribute] // RVA: 0xCC9EC4 Offset: 0xCC9EC4 VA: 0xCC9EC4
	private Vector3 <saveDiff>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCC9F00 Offset: 0xCC9F00 VA: 0xCC9F00
	[DebuggerBrowsableAttribute] // RVA: 0xCC9F00 Offset: 0xCC9F00 VA: 0xCC9F00
	private bool <isChanged>k__BackingField; // 0x2C
	[TooltipAttribute] // RVA: 0xCC9F3C Offset: 0xCC9F3C VA: 0xCC9F3C
	public string[] appendNames; // 0x30

	// Properties
	public Vector3 saveDiff { get; set; }
	public bool isChanged { get; set; }

	// Methods

	// RVA: 0x1942EE8 Offset: 0x1942EE8 VA: 0x1942EE8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3865C Offset: 0xD3865C VA: 0xD3865C
	// RVA: 0x1942D50 Offset: 0x1942D50 VA: 0x1942D50
	public Vector3 get_saveDiff() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3866C Offset: 0xD3866C VA: 0xD3866C
	// RVA: 0x19421D8 Offset: 0x19421D8 VA: 0x19421D8
	public void set_saveDiff(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3867C Offset: 0xD3867C VA: 0xD3867C
	// RVA: 0x1942D48 Offset: 0x1942D48 VA: 0x1942D48
	public bool get_isChanged() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3868C Offset: 0xD3868C VA: 0xD3868C
	// RVA: 0x19421E4 Offset: 0x19421E4 VA: 0x19421E4
	public void set_isChanged(bool value) { }

	// RVA: 0x1942EDC Offset: 0x1942EDC VA: 0x1942EDC
	public void Init() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94CC0 Offset: 0xC94CC0 VA: 0xC94CC0
[USequencerEventAttribute] // RVA: 0xC94CC0 Offset: 0xC94CC0 VA: 0xC94CC0
public class USFGOActorBattleActionEvent : USEventBase // TypeDefIndex: 8104
{
	// Fields
	public int startValue; // 0x30
	public int countValue; // 0x34
	public USFGOActorBattleActionEvent.ActionType actionType; // 0x38
	public bool isRandomDamagePosition; // 0x3C
	public bool isNoDamageMotion; // 0x3D
	public Vector3 damageNumberOffset; // 0x40
	public Vector3 popupOffset; // 0x4C
	public int effectId; // 0x58
	public int criticalEffectId; // 0x5C
	public int functionIndex; // 0x60
	public string attachNodeName; // 0x68

	// Methods

	// RVA: 0x194360C Offset: 0x194360C VA: 0x194360C
	public void .ctor() { }

	// RVA: 0x19436EC Offset: 0x19436EC VA: 0x19436EC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1943CDC Offset: 0x1943CDC VA: 0x1943CDC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1943CE0 Offset: 0x1943CE0 VA: 0x1943CE0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1943CEC Offset: 0x1943CEC VA: 0x1943CEC Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1943D68 Offset: 0x1943D68 VA: 0x1943D68
	public void AddHasAllEffectIds(ref List<int> effectIdList) { }
}

// Namespace: 
public enum USFGOActorBattleActionEvent.ActionType // TypeDefIndex: 8105
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorBattleActionEvent.ActionType Damage = 0;
	public const USFGOActorBattleActionEvent.ActionType BuffDebuff = 1;
	public const USFGOActorBattleActionEvent.ActionType Heal = 2;
	public const USFGOActorBattleActionEvent.ActionType DamageVoice = 3;
	public const USFGOActorBattleActionEvent.ActionType SilentDead = 4;
	public const USFGOActorBattleActionEvent.ActionType SelfDead = 5;
	public const USFGOActorBattleActionEvent.ActionType MoveToSubMember = 6;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94D20 Offset: 0xC94D20 VA: 0xC94D20
[USequencerEventAttribute] // RVA: 0xC94D20 Offset: 0xC94D20 VA: 0xC94D20
public class USFGOActorBattleActionEventConditional : USFGOActorBattleActionEvent // TypeDefIndex: 8106
{
	// Fields
	public USFGOActorBattleActionEventConditional.OverwriteParamCondition[] conditions; // 0x70

	// Methods

	// RVA: 0x1943EC8 Offset: 0x1943EC8 VA: 0x1943EC8
	public void .ctor() { }

	// RVA: 0x1943F24 Offset: 0x1943F24 VA: 0x1943F24 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1943FAC Offset: 0x1943FAC VA: 0x1943FAC
	protected bool IsExecutable(int treasureDeviceId) { }
}

// Namespace: 
[Serializable]
public class USFGOActorBattleActionEventConditional.OverwriteParamCondition // TypeDefIndex: 8107
{
	// Fields
	public int[] treasureDeviceIds; // 0x10
	public bool isExecute; // 0x18
	public int funcIndex; // 0x1C

	// Methods

	// RVA: 0x19441DC Offset: 0x19441DC VA: 0x19441DC
	public void .ctor() { }

	// RVA: 0x1944118 Offset: 0x1944118 VA: 0x1944118
	public bool IsTarget(int treasureDeviceId) { }

	// RVA: 0x19440AC Offset: 0x19440AC VA: 0x19440AC
	public void Overwrite(USFGOActorBattleActionEventConditional targetEvent) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF1F0 Offset: 0xCAF1F0 VA: 0xCAF1F0
private sealed class USFGOActorBattleActionEventConditional.OverwriteParamCondition.<IsTarget>c__AnonStorey0 // TypeDefIndex: 8108
{
	// Fields
	internal int treasureDeviceId; // 0x10

	// Methods

	// RVA: 0x194423C Offset: 0x194423C VA: 0x194423C
	public void .ctor() { }

	// RVA: 0x1944244 Offset: 0x1944244 VA: 0x1944244
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF200 Offset: 0xCAF200 VA: 0xCAF200
private sealed class USFGOActorBattleActionEventConditional.<IsExecutable>c__AnonStorey0 // TypeDefIndex: 8109
{
	// Fields
	internal int treasureDeviceId; // 0x10

	// Methods

	// RVA: 0x19440A4 Offset: 0x19440A4 VA: 0x19440A4
	public void .ctor() { }

	// RVA: 0x19440E4 Offset: 0x19440E4 VA: 0x19440E4
	internal bool <>m__0(USFGOActorBattleActionEventConditional.OverwriteParamCondition x) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94D80 Offset: 0xC94D80 VA: 0xC94D80
[USequencerEventAttribute] // RVA: 0xC94D80 Offset: 0xC94D80 VA: 0xC94D80
public class USFGOActorChangePosition : USEventBase // TypeDefIndex: 8110
{
	// Fields
	[SerializeField] // RVA: 0xCC9F74 Offset: 0xCC9F74 VA: 0xCC9F74
	private USFGOActorChangePosition.PosChangeTargetType targetType; // 0x30
	[SerializeField] // RVA: 0xCC9F84 Offset: 0xCC9F84 VA: 0xCC9F84
	[TooltipAttribute] // RVA: 0xCC9F84 Offset: 0xCC9F84 VA: 0xCC9F84
	private USFGOActorChangePosition.PosSetType[] fieldActorOrders; // 0x38

	// Properties
	private BattlePerformance Performance { get; }

	// Methods

	// RVA: 0x1944260 Offset: 0x1944260 VA: 0x1944260
	public void .ctor() { }

	// RVA: 0x1944318 Offset: 0x1944318 VA: 0x1944318
	private BattlePerformance get_Performance() { }

	// RVA: 0x1944378 Offset: 0x1944378 VA: 0x1944378 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x19446DC Offset: 0x19446DC VA: 0x19446DC
	private BattleActorControl GetPosChangeTargetActor() { }

	// RVA: 0x1944848 Offset: 0x1944848 VA: 0x1944848
	private USFGOActorChangePosition.PosSetType[] GetCurFieldActorOrders(bool isEnemy, int uniqueId) { }

	// RVA: 0x19447B4 Offset: 0x19447B4 VA: 0x19447B4
	private string GetPosPrefix(bool isEnemy) { }

	// RVA: 0x1944A1C Offset: 0x1944A1C VA: 0x1944A1C Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: 
public enum USFGOActorChangePosition.PosChangeTargetType // TypeDefIndex: 8111
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorChangePosition.PosChangeTargetType ACTOR = 1;
}

// Namespace: 
public enum USFGOActorChangePosition.PosSetType // TypeDefIndex: 8112
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorChangePosition.PosSetType TARGET = 0;
	public const USFGOActorChangePosition.PosSetType TARGET_OTHER_FRONT = 1;
	public const USFGOActorChangePosition.PosSetType TARGET_OTHER_BACK = 2;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94DE0 Offset: 0xC94DE0 VA: 0xC94DE0
[USequencerEventAttribute] // RVA: 0xC94DE0 Offset: 0xC94DE0 VA: 0xC94DE0
public class USFGOActorDeadEffectEvent : USEventBase // TypeDefIndex: 8113
{
	// Fields
	[SerializeField] // RVA: 0xCC9FD0 Offset: 0xCC9FD0 VA: 0xCC9FD0
	private float deadDeleteTime; // 0x30
	private const float defaultHeight = 3.5;

	// Methods

	// RVA: 0x1944A20 Offset: 0x1944A20 VA: 0x1944A20
	public void .ctor() { }

	// RVA: 0x1944A30 Offset: 0x1944A30 VA: 0x1944A30 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1944FD0 Offset: 0x1944FD0 VA: 0x1944FD0 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1944FD4 Offset: 0x1944FD4 VA: 0x1944FD4
	private void updateDeadEffect(float val) { }

	// RVA: 0x194546C Offset: 0x194546C VA: 0x194546C
	private void OnFinishDead() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94E40 Offset: 0xC94E40 VA: 0xC94E40
[USequencerEventAttribute] // RVA: 0xC94E40 Offset: 0xC94E40 VA: 0xC94E40
public class USFGOActorTimeScale : USEventBase // TypeDefIndex: 8114
{
	// Fields
	public float actorTimeScale; // 0x30
	private float prevTimeScale; // 0x34
	private bool isSafe; // 0x38
	private BattleFBXComponent selfFBX; // 0x40

	// Methods

	// RVA: 0x194575C Offset: 0x194575C VA: 0x194575C
	public void .ctor() { }

	// RVA: 0x194576C Offset: 0x194576C VA: 0x194576C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x19458EC Offset: 0x19458EC VA: 0x19458EC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x19458F0 Offset: 0x19458F0 VA: 0x19458F0 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94EA0 Offset: 0xC94EA0 VA: 0xC94EA0
[USequencerEventAttribute] // RVA: 0xC94EA0 Offset: 0xC94EA0 VA: 0xC94EA0
public class USFGOActorUpdateScale : USEventBase // TypeDefIndex: 8115
{
	// Fields
	[SerializeField] // RVA: 0xCC9FE0 Offset: 0xCC9FE0 VA: 0xCC9FE0
	[TooltipAttribute] // RVA: 0xCC9FE0 Offset: 0xCC9FE0 VA: 0xCC9FE0
	private USFGOActorUpdateScale.UpdateType type; // 0x30
	[SerializeField] // RVA: 0xCCA02C Offset: 0xCCA02C VA: 0xCCA02C
	private float value; // 0x34

	// Methods

	// RVA: 0x194593C Offset: 0x194593C VA: 0x194593C
	public void .ctor() { }

	// RVA: 0x194594C Offset: 0x194594C VA: 0x194594C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1945AF8 Offset: 0x1945AF8 VA: 0x1945AF8
	public Vector3 GetScaleByUpdateType(BattleActorControl actor, Vector3 defScale) { }

	// RVA: 0x1945C18 Offset: 0x1945C18 VA: 0x1945C18 Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOActorUpdateScale.UpdateType // TypeDefIndex: 8116
{
	// Fields
	public int value__; // 0x0
	public const USFGOActorUpdateScale.UpdateType RATIO = 0;
	public const USFGOActorUpdateScale.UpdateType OVERWRITE = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94F00 Offset: 0xC94F00 VA: 0xC94F00
[USequencerEventAttribute] // RVA: 0xC94F00 Offset: 0xC94F00 VA: 0xC94F00
[USequencerEventHideDurationAttribute] // RVA: 0xC94F00 Offset: 0xC94F00 VA: 0xC94F00
public class USFGOAmbientFadeEvent : USEventBase // TypeDefIndex: 8117
{
	// Fields
	public UILayer uiLayer; // 0x30
	public AnimationCurve fadeCurve; // 0x38
	public Color fadeColorFrom; // 0x40
	public Color fadeColorTo; // 0x50
	private float currentCurveSampleTime; // 0x60

	// Methods

	// RVA: 0x1945C1C Offset: 0x1945C1C VA: 0x1945C1C
	public void .ctor() { }

	// RVA: 0x1945E08 Offset: 0x1945E08 VA: 0x1945E08 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1945E0C Offset: 0x1945E0C VA: 0x1945E0C Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1945FF4 Offset: 0x1945FF4 VA: 0x1945FF4 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x194618C Offset: 0x194618C VA: 0x194618C Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1946198 Offset: 0x1946198 VA: 0x1946198 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x19461A0 Offset: 0x19461A0 VA: 0x19461A0
	private void Update() { }

	// RVA: 0x19462A0 Offset: 0x19462A0 VA: 0x19462A0
	private void OnEnable() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94F70 Offset: 0xC94F70 VA: 0xC94F70
[USequencerEventAttribute] // RVA: 0xC94F70 Offset: 0xC94F70 VA: 0xC94F70
public class USFGOAnimationCameraEvent : USEventBase // TypeDefIndex: 8118
{
	// Fields
	public GameObject animCamLoc; // 0x30
	public Camera camera; // 0x38
	public string cutNumName; // 0x40
	private AnimationClip animationClip; // 0x48
	public WrapMode wrapMode; // 0x50
	public bool isOpponent; // 0x54
	public float playbackSpeed; // 0x58
	private Transform originalParent; // 0x60
	private Transform cameraRoot; // 0x68
	private Transform cameraAim; // 0x70

	// Methods

	// RVA: 0x19462A4 Offset: 0x19462A4 VA: 0x19462A4
	public void .ctor() { }

	// RVA: 0x1946304 Offset: 0x1946304 VA: 0x1946304
	public void Update() { }

	// RVA: 0x19463B4 Offset: 0x19463B4 VA: 0x19463B4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1946C14 Offset: 0x1946C14 VA: 0x1946C14 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x19474B8 Offset: 0x19474B8 VA: 0x19474B8 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x19474C4 Offset: 0x19474C4 VA: 0x19474C4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x19475C8 Offset: 0x19475C8 VA: 0x19475C8 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
public enum FGOTarget // TypeDefIndex: 8119
{
	// Fields
	public int value__; // 0x0
	public const FGOTarget ActorObject = 0;
	public const FGOTarget EnemyObject = 1;
	public const FGOTarget Zero = 2;
	public const FGOTarget Camera = 3;
	public const FGOTarget Actor1 = 4;
	public const FGOTarget Actor2 = 5;
	public const FGOTarget Actor3 = 6;
	public const FGOTarget Actor4 = 7;
	public const FGOTarget Actor5 = 8;
	public const FGOTarget Actor6 = 9;
	public const FGOTarget Node = 10;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94FD0 Offset: 0xC94FD0 VA: 0xC94FD0
[USequencerEventAttribute] // RVA: 0xC94FD0 Offset: 0xC94FD0 VA: 0xC94FD0
public class USFGOAttachToParentEvent : USEventBase // TypeDefIndex: 8120
{
	// Fields
	public FGOTarget target; // 0x30
	public Transform parentObject; // 0x38
	public string parentObjectName; // 0x40
	public string nodeName; // 0x48
	public bool flipEffect; // 0x50
	public bool autoDetach; // 0x51
	[TooltipAttribute] // RVA: 0xCCA03C Offset: 0xCCA03C VA: 0xCCA03C
	public bool inActor; // 0x52
	public Vector3 tposition; // 0x54
	public Vector3 trotation; // 0x60
	public Vector3 tscale; // 0x6C
	private Transform originalParent; // 0x78
	private Vector3 org_tposition; // 0x80
	private Vector3 org_trotation; // 0x8C
	private Vector3 org_tscale; // 0x98
	private bool isDirty; // 0xA4
	private GameObject dummyNode; // 0xA8

	// Methods

	// RVA: 0x1947680 Offset: 0x1947680 VA: 0x1947680
	public void .ctor() { }

	// RVA: 0x1947784 Offset: 0x1947784 VA: 0x1947784
	public void SetupTarget(BattlePerformance performance, GameObject actor, List<GameObject> createdObjects) { }

	// RVA: 0x1947DEC Offset: 0x1947DEC VA: 0x1947DEC
	private Transform searchTransform(string searchName, List<GameObject> createdObjects) { }

	// RVA: 0x1948194 Offset: 0x1948194 VA: 0x1948194 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1948910 Offset: 0x1948910 VA: 0x1948910 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1948914 Offset: 0x1948914 VA: 0x1948914 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1948920 Offset: 0x1948920 VA: 0x1948920 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1948BAC Offset: 0x1948BAC VA: 0x1948BAC Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95030 Offset: 0xC95030 VA: 0xC95030
[USequencerEventAttribute] // RVA: 0xC95030 Offset: 0xC95030 VA: 0xC95030
[USequencerEventHideDurationAttribute] // RVA: 0xC95030 Offset: 0xC95030 VA: 0xC95030
public class USFGOCameraEffectEvent : USEventBase // TypeDefIndex: 8121
{
	// Fields
	public USFGOCameraEffectEvent.CameraEffectType effectType; // 0x30
	public float effectValue; // 0x34
	public bool isEnabled; // 0x38
	public bool oldEnabled; // 0x39
	public bool isAffectedCutInCamera; // 0x3A

	// Methods

	// RVA: 0x1948BC4 Offset: 0x1948BC4 VA: 0x1948BC4
	public void .ctor() { }

	// RVA: 0x1948BE0 Offset: 0x1948BE0 VA: 0x1948BE0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1948C7C Offset: 0x1948C7C VA: 0x1948C7C
	private void setComponentEnabled(bool flg, bool saveOld) { }

	// RVA: 0x1949124 Offset: 0x1949124 VA: 0x1949124 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1949130 Offset: 0x1949130 VA: 0x1949130 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x194913C Offset: 0x194913C VA: 0x194913C Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOCameraEffectEvent.CameraEffectType // TypeDefIndex: 8122
{
	// Fields
	public int value__; // 0x0
	public const USFGOCameraEffectEvent.CameraEffectType Bloom = 0;
	public const USFGOCameraEffectEvent.CameraEffectType MotionBlur = 1;
	public const USFGOCameraEffectEvent.CameraEffectType Vignet = 2;
	public const USFGOCameraEffectEvent.CameraEffectType Grayscale = 3;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC950A0 Offset: 0xC950A0 VA: 0xC950A0
[USequencerEventAttribute] // RVA: 0xC950A0 Offset: 0xC950A0 VA: 0xC950A0
public class USFGOCameraFlipEvent : USEventBase // TypeDefIndex: 8123
{
	// Fields
	[SerializeField] // RVA: 0xCCA074 Offset: 0xCCA074 VA: 0xCCA074
	private bool cameraFlip; // 0x30
	[SerializeField] // RVA: 0xCCA084 Offset: 0xCCA084 VA: 0xCCA084
	[TooltipAttribute] // RVA: 0xCCA084 Offset: 0xCCA084 VA: 0xCCA084
	private bool restoreFlip; // 0x31
	private bool preCameraFlip; // 0x32

	// Methods

	// RVA: 0x1949140 Offset: 0x1949140 VA: 0x1949140
	public void .ctor() { }

	// RVA: 0x1949148 Offset: 0x1949148 VA: 0x1949148 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x19491C4 Offset: 0x19491C4 VA: 0x19491C4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x19491C8 Offset: 0x19491C8 VA: 0x19491C8 Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95100 Offset: 0xC95100 VA: 0xC95100
[USequencerEventAttribute] // RVA: 0xC95100 Offset: 0xC95100 VA: 0xC95100
public class USFGOCameraSettingsEvent : USEventBase // TypeDefIndex: 8124
{
	// Fields
	public float farClipPlane; // 0x30
	private float orgFarClipPlane; // 0x34
	public float nearClipPlane; // 0x38
	private float orgNearClipPlane; // 0x3C
	private bool isDirtyOrg; // 0x40
	public bool isAffectedEffectCamera; // 0x41
	private float orgEffectCameraFarClipPlane; // 0x44
	private float orgEffectCameraNearClipPlane; // 0x48
	private bool isDirtyOrgEffectCamera; // 0x4C

	// Methods

	// RVA: 0x1949240 Offset: 0x1949240 VA: 0x1949240
	public void .ctor() { }

	// RVA: 0x194925C Offset: 0x194925C VA: 0x194925C
	private void setting(Camera camera, bool restore = False, bool isDefaultCamera = True) { }

	// RVA: 0x19493E0 Offset: 0x19493E0 VA: 0x19493E0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x19494EC Offset: 0x19494EC VA: 0x19494EC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x19494F0 Offset: 0x19494F0 VA: 0x19494F0 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x19494FC Offset: 0x19494FC VA: 0x19494FC Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95160 Offset: 0xC95160 VA: 0xC95160
[USequencerEventAttribute] // RVA: 0xC95160 Offset: 0xC95160 VA: 0xC95160
public class USFGOChangeBgEvent : USEventBase // TypeDefIndex: 8125
{
	// Fields
	public bool parentCamera; // 0x30
	public bool aheadLoad; // 0x31
	public string bgName; // 0x38
	public string bgType; // 0x40
	public string oldBgName; // 0x48
	public string oldBgType; // 0x50
	public Vector3 localPos; // 0x58
	public Vector3 localEulerAng; // 0x64

	// Methods

	// RVA: 0x1949610 Offset: 0x1949610 VA: 0x1949610
	public void .ctor() { }

	// RVA: 0x19496F0 Offset: 0x19496F0 VA: 0x19496F0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x194984C Offset: 0x194984C VA: 0x194984C
	private void OnBgChanged() { }

	// RVA: 0x19498B8 Offset: 0x19498B8 VA: 0x19498B8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x19498BC Offset: 0x19498BC VA: 0x19498BC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x19498C8 Offset: 0x19498C8 VA: 0x19498C8 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC951C0 Offset: 0xC951C0 VA: 0xC951C0
[USequencerEventAttribute] // RVA: 0xC951C0 Offset: 0xC951C0 VA: 0xC951C0
public class USFGOChangeLimitCount2Event : USEventBase // TypeDefIndex: 8126
{
	// Fields
	public int[] limitCountList; // 0x30

	// Methods

	// RVA: 0x1F584BC Offset: 0x1F584BC VA: 0x1F584BC
	public void .ctor() { }

	// RVA: 0x1F58534 Offset: 0x1F58534 VA: 0x1F58534 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F58750 Offset: 0x1F58750 VA: 0x1F58750 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F58754 Offset: 0x1F58754 VA: 0x1F58754 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F58760 Offset: 0x1F58760 VA: 0x1F58760 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95220 Offset: 0xC95220 VA: 0xC95220
[USequencerEventAttribute] // RVA: 0xC95220 Offset: 0xC95220 VA: 0xC95220
public class USFGOChangeLimitCountEvent : USEventBase // TypeDefIndex: 8127
{
	// Fields
	public int limitCount; // 0x30

	// Methods

	// RVA: 0x1F58764 Offset: 0x1F58764 VA: 0x1F58764
	public void .ctor() { }

	// RVA: 0x1F5876C Offset: 0x1F5876C VA: 0x1F5876C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F58940 Offset: 0x1F58940 VA: 0x1F58940 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F58944 Offset: 0x1F58944 VA: 0x1F58944 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F58950 Offset: 0x1F58950 VA: 0x1F58950 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95280 Offset: 0xC95280 VA: 0xC95280
[USequencerEventAttribute] // RVA: 0xC95280 Offset: 0xC95280 VA: 0xC95280
[USequencerEventHideDurationAttribute] // RVA: 0xC95280 Offset: 0xC95280 VA: 0xC95280
public class USFGOChangeShaderProperty : USEventBase // TypeDefIndex: 8128
{
	// Fields
	[SerializeField] // RVA: 0xCCA0D0 Offset: 0xCCA0D0 VA: 0xCCA0D0
	private USFGOChangeShaderProperty.PropertyType type; // 0x30
	[SerializeField] // RVA: 0xCCA0E0 Offset: 0xCCA0E0 VA: 0xCCA0E0
	[TooltipAttribute] // RVA: 0xCCA0E0 Offset: 0xCCA0E0 VA: 0xCCA0E0
	private string targetMeshWord; // 0x38
	[SerializeField] // RVA: 0xCCA12C Offset: 0xCCA12C VA: 0xCCA12C
	[TooltipAttribute] // RVA: 0xCCA12C Offset: 0xCCA12C VA: 0xCCA12C
	private string propertyName; // 0x40
	[SerializeField] // RVA: 0xCCA178 Offset: 0xCCA178 VA: 0xCCA178
	[TooltipAttribute] // RVA: 0xCCA178 Offset: 0xCCA178 VA: 0xCCA178
	private AnimationCurve valueCurve; // 0x48
	private Renderer targetMesh; // 0x50
	private float currentCurveSampleTime; // 0x58

	// Methods

	// RVA: 0x1F58954 Offset: 0x1F58954 VA: 0x1F58954
	public void .ctor() { }

	// RVA: 0x1F5895C Offset: 0x1F5895C VA: 0x1F5895C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F58BC8 Offset: 0x1F58BC8 VA: 0x1F58BC8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F58E7C Offset: 0x1F58E7C VA: 0x1F58E7C Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F58C9C Offset: 0x1F58C9C VA: 0x1F58C9C
	private float GetMaxValue() { }

	// RVA: 0x1F58E88 Offset: 0x1F58E88 VA: 0x1F58E88 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F58CC4 Offset: 0x1F58CC4 VA: 0x1F58CC4
	private void SetProperty(float value) { }
}

// Namespace: 
public enum USFGOChangeShaderProperty.PropertyType // TypeDefIndex: 8129
{
	// Fields
	public int value__; // 0x0
	public const USFGOChangeShaderProperty.PropertyType Float = 0;
	public const USFGOChangeShaderProperty.PropertyType Int = 1;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC952F0 Offset: 0xC952F0 VA: 0xC952F0
[USequencerEventAttribute] // RVA: 0xC952F0 Offset: 0xC952F0 VA: 0xC952F0
public class USFGOCheckPlayerTypeFlip : USFGOObjectFlip // TypeDefIndex: 8130
{
	// Fields
	[SerializeField] // RVA: 0xCCA1C4 Offset: 0xCCA1C4 VA: 0xCCA1C4
	[TooltipAttribute] // RVA: 0xCCA1C4 Offset: 0xCCA1C4 VA: 0xCCA1C4
	private USFGOCheckPlayerTypeFlip.FGOFlipPlayerType execPlayerType; // 0x58
	[SerializeField] // RVA: 0xCCA210 Offset: 0xCCA210 VA: 0xCCA210
	[TooltipAttribute] // RVA: 0xCCA210 Offset: 0xCCA210 VA: 0xCCA210
	private bool isTreasureExecSide; // 0x5C

	// Methods

	// RVA: 0x1F58FE0 Offset: 0x1F58FE0 VA: 0x1F58FE0
	public void .ctor() { }

	// RVA: 0x1F58FF8 Offset: 0x1F58FF8 VA: 0x1F58FF8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F59150 Offset: 0x1F59150 VA: 0x1F59150
	private bool IsAblePlayerType(bool isEnemy) { }
}

// Namespace: 
public enum USFGOCheckPlayerTypeFlip.FGOFlipPlayerType // TypeDefIndex: 8131
{
	// Fields
	public int value__; // 0x0
	public const USFGOCheckPlayerTypeFlip.FGOFlipPlayerType None = 0;
	public const USFGOCheckPlayerTypeFlip.FGOFlipPlayerType Player = 1;
	public const USFGOCheckPlayerTypeFlip.FGOFlipPlayerType Enemy = 2;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95350 Offset: 0xC95350 VA: 0xC95350
[USequencerEventAttribute] // RVA: 0xC95350 Offset: 0xC95350 VA: 0xC95350
[USequencerEventHideDurationAttribute] // RVA: 0xC95350 Offset: 0xC95350 VA: 0xC95350
public class USFGOChrAlphaChangeEvent : USEventBase // TypeDefIndex: 8132
{
	// Fields
	[TooltipAttribute] // RVA: 0xCCA25C Offset: 0xCCA25C VA: 0xCCA25C
	public AnimationCurve alphaCurve; // 0x30
	private float currentCurveSampleTime; // 0x38
	public USFGOChrAlphaChangeEvent.ChangeTarget target; // 0x3C
	private List<Renderer> faderRenderers; // 0x40
	[TooltipAttribute] // RVA: 0xCCA294 Offset: 0xCCA294 VA: 0xCCA294
	public string otherHierarchyPath; // 0x48

	// Methods

	// RVA: 0x1F592CC Offset: 0x1F592CC VA: 0x1F592CC
	public void .ctor() { }

	// RVA: 0x1F594AC Offset: 0x1F594AC VA: 0x1F594AC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F59E38 Offset: 0x1F59E38 VA: 0x1F59E38
	private void SetMaterialAlpha(float alpha) { }

	// RVA: 0x1F5A078 Offset: 0x1F5A078 VA: 0x1F5A078 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F5A20C Offset: 0x1F5A20C VA: 0x1F5A20C Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F5A344 Offset: 0x1F5A344 VA: 0x1F5A344 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F5A350 Offset: 0x1F5A350 VA: 0x1F5A350 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F5A394 Offset: 0x1F5A394 VA: 0x1F5A394
	private void Update() { }
}

// Namespace: 
public enum USFGOChrAlphaChangeEvent.ChangeTarget // TypeDefIndex: 8133
{
	// Fields
	public int value__; // 0x0
	public const USFGOChrAlphaChangeEvent.ChangeTarget Actor = 0;
	public const USFGOChrAlphaChangeEvent.ChangeTarget PlayerSide = 1;
	public const USFGOChrAlphaChangeEvent.ChangeTarget EnemySide = 2;
	public const USFGOChrAlphaChangeEvent.ChangeTarget All = 3;
	public const USFGOChrAlphaChangeEvent.ChangeTarget Other = 4;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC953C0 Offset: 0xC953C0 VA: 0xC953C0
[USequencerEventAttribute] // RVA: 0xC953C0 Offset: 0xC953C0 VA: 0xC953C0
[USequencerEventHideDurationAttribute] // RVA: 0xC953C0 Offset: 0xC953C0 VA: 0xC953C0
public class USFGOChrBulrEvent : USEventBase // TypeDefIndex: 8134
{
	// Fields
	public USFGOChrBulrEvent.MODE actionMode; // 0x30
	public bool inputValidValue; // 0x34
	public int inputLagValue; // 0x38

	// Methods

	// RVA: 0x1F5A494 Offset: 0x1F5A494 VA: 0x1F5A494
	public void .ctor() { }

	// RVA: 0x1F5A4AC Offset: 0x1F5A4AC VA: 0x1F5A4AC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F5A688 Offset: 0x1F5A688 VA: 0x1F5A688 Slot: 5
	public override void ProcessEvent(float deltaTime) { }
}

// Namespace: 
