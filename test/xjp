	// RVA: 0x11B6D9C Offset: 0x11B6D9C VA: 0x11B6D9C
	protected void .ctor() { }

	// RVA: 0x11B6DA4 Offset: 0x11B6DA4 VA: 0x11B6DA4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11B6E84 Offset: 0x11B6E84 VA: 0x11B6E84 Slot: 4
	public void Dispose() { }

	// RVA: 0x11B6E34 Offset: 0x11B6E34 VA: 0x11B6E34
	private void Dispose(bool disposing) { }

	// RVA: 0x11B6ED8 Offset: 0x11B6ED8 VA: 0x11B6ED8
	public int GetNumberOfFrameBeforeDestroy(int playerId) { }

	// RVA: 0x11B6F90 Offset: 0x11B6F90 VA: 0x11B6F90
	protected void SetupStaticMaterialProperties() { }

	// RVA: 0x11B7230 Offset: 0x11B7230 VA: 0x11B7230
	private void GetBlendModes(out int srcBlendMode, out int dstBlendMode) { }

	// RVA: 0x11B7268 Offset: 0x11B7268 VA: 0x11B7268 Slot: 5
	public virtual void SetApplyTargetAlpha(bool flag) { }

	// RVA: 0x11B7274 Offset: 0x11B7274 VA: 0x11B7274 Slot: 6
	public virtual void SetUiRenderMode(bool flag) { }

	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void OnDisposeManaged();

	// RVA: -1 Offset: -1 Slot: 8
	protected abstract void OnDisposeUnmanaged();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool IsPrepared();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool ContinuePreparing();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void AttachToPlayer(int playerId);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract bool UpdateMaterial(Material material);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract void UpdateTextures();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

	// RVA: 0x11B7280 Offset: 0x11B7280 VA: 0x11B7280 Slot: 16
	public virtual void OnPlayerPause(bool pauseStatus) { }

	// RVA: 0x11B7284 Offset: 0x11B7284 VA: 0x11B7284 Slot: 17
	public virtual bool OnPlayerStopForSeek() { }

	// RVA: 0x11B728C Offset: 0x11B728C VA: 0x11B728C Slot: 18
	public virtual void OnPlayerStart() { }

	// RVA: 0x11B7290 Offset: 0x11B7290 VA: 0x11B7290 Slot: 19
	public virtual bool ShouldSkipDestroyOnStopForSeek() { }

	// RVA: 0x11B7298 Offset: 0x11B7298 VA: 0x11B7298 Slot: 20
	public virtual bool HasRenderedNewFrame() { }

	// RVA: 0x11B72A0 Offset: 0x11B72A0 VA: 0x11B72A0
	public static uint NextPowerOfTwo(uint x) { }

	// RVA: 0x11B72C0 Offset: 0x11B72C0 VA: 0x11B72C0
	public static int NextPowerOfTwo(int x) { }

	// RVA: 0x11B72E0 Offset: 0x11B72E0 VA: 0x11B72E0
	public static int CeilingWith(int x, int ceilingValue) { }

	// RVA: 0x11B72F4 Offset: 0x11B72F4 VA: 0x11B72F4
	public static int Ceiling16(int x) { }

	// RVA: 0x11B7300 Offset: 0x11B7300 VA: 0x11B7300
	public static int Ceiling32(int x) { }

	// RVA: 0x11B730C Offset: 0x11B730C VA: 0x11B730C
	public static int Ceiling64(int x) { }

	// RVA: 0x11B7318 Offset: 0x11B7318 VA: 0x11B7318
	public static int Ceiling256(int x) { }

	// RVA: 0x11B7324 Offset: 0x11B7324 VA: 0x11B7324
	protected static void DisposeTextures(Texture[] textures) { }

	// RVA: 0x11B7454 Offset: 0x11B7454 VA: 0x11B7454
	protected static extern bool CRIWARE0CF9686B(int player_id, int num_textures, IntPtr[] tex_ptrs, [In] [Out] FrameInfo frame_info, ref bool frame_drop) { }

	// RVA: 0x11B762C Offset: 0x11B762C VA: 0x11B762C
	protected static extern bool CRIWAREC5767B79(int player_id, int num_textures, [In] [Out] IntPtr[] tex_ptrs) { }

	// RVA: 0x11B76F0 Offset: 0x11B76F0 VA: 0x11B76F0
	protected static extern bool CRIWAREDBEFBBC1(int player_id, int num_textures, [In] [Out] IntPtr[] tex_ptrs) { }

	// RVA: 0x11B77B4 Offset: 0x11B77B4 VA: 0x11B77B4
	protected static extern bool CRIWAREF3415F20(int player_id, int num_textures, [In] [Out] IntPtr[] tex_ptrs) { }

	// RVA: 0x11B6EF4 Offset: 0x11B6EF4 VA: 0x11B6EF4
	protected static extern sbyte CRIWARE343CCB13(int player_id) { }
}

// Namespace: CriMana.Detail
public abstract class RendererResourceFactory : IDisposable // TypeDefIndex: 4038
{
	// Fields
	private static SortedList<int, RendererResourceFactory> factoryList; // 0x0
	private bool disposed; // 0x10

	// Methods

	// RVA: 0x11B583C Offset: 0x11B583C VA: 0x11B583C
	protected void .ctor() { }

	// RVA: 0x11B5738 Offset: 0x11B5738 VA: 0x11B5738
	public static void RegisterFactory(RendererResourceFactory factory, int priority) { }

	// RVA: 0x11BB264 Offset: 0x11BB264 VA: 0x11BB264
	public static void DisposeAllFactories() { }

	// RVA: 0x11BB58C Offset: 0x11BB58C VA: 0x11BB58C
	public static RendererResource DispatchAndCreate(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11BB8E4 Offset: 0x11BB8E4 VA: 0x11BB8E4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11BB538 Offset: 0x11BB538 VA: 0x11BB538 Slot: 4
	public void Dispose() { }

	// RVA: 0x11BB974 Offset: 0x11BB974 VA: 0x11BB974
	private void Dispose(bool disposing) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void OnDisposeManaged();

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract void OnDisposeUnmanaged();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

	// RVA: 0x11BB9C4 Offset: 0x11BB9C4 VA: 0x11BB9C4
	private static void .cctor() { }
}

// Namespace: CriMana.Detail
[AttributeUsageAttribute] // RVA: 0xC8B144 Offset: 0xC8B144 VA: 0xC8B144
public class RendererResourceFactoryPriorityAttribute : Attribute // TypeDefIndex: 4039
{
	// Fields
	public readonly int priority; // 0x10

	// Methods

	// RVA: 0x11BBA38 Offset: 0x11BBA38 VA: 0x11BBA38
	public void .ctor(int priority) { }
}

// Namespace: CriMana.Detail
public static class AutoResisterRendererResourceFactories // TypeDefIndex: 4040
{
	// Methods

	// RVA: 0x11B5364 Offset: 0x11B5364 VA: 0x11B5364
	public static void InvokeAutoRegister() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC8B158 Offset: 0xC8B158 VA: 0xC8B158
public class AutoResisterRendererResourceFactories.RendererResourceFactoryAndroidH264Rgb : RendererResourceFactory // TypeDefIndex: 4041
{
	// Methods

	// RVA: 0x11B57D4 Offset: 0x11B57D4 VA: 0x11B57D4
	public void .ctor() { }

	// RVA: 0x11B5844 Offset: 0x11B5844 VA: 0x11B5844 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B5B6C Offset: 0x11B5B6C VA: 0x11B5B6C Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B5B70 Offset: 0x11B5B70 VA: 0x11B5B70 Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC8B16C Offset: 0xC8B16C VA: 0xC8B16C
public class AutoResisterRendererResourceFactories.RendererResourceFactoryAndroidSofdecPrimeYuv : RendererResourceFactory // TypeDefIndex: 4042
{
	// Methods

	// RVA: 0x11B5B74 Offset: 0x11B5B74 VA: 0x11B5B74
	public void .ctor() { }

	// RVA: 0x11B5BDC Offset: 0x11B5BDC VA: 0x11B5BDC Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B5F80 Offset: 0x11B5F80 VA: 0x11B5F80 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B5F84 Offset: 0x11B5F84 VA: 0x11B5F84 Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC8B180 Offset: 0xC8B180 VA: 0xC8B180
public class AutoResisterRendererResourceFactories.RendererResourceFactoryAndroidSofdecPrimeYuvLegacyGles2 : RendererResourceFactory // TypeDefIndex: 4043
{
	// Methods

	// RVA: 0x11B5F88 Offset: 0x11B5F88 VA: 0x11B5F88
	public void .ctor() { }

	// RVA: 0x11B5FF0 Offset: 0x11B5FF0 VA: 0x11B5FF0 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B6514 Offset: 0x11B6514 VA: 0x11B6514 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B6518 Offset: 0x11B6518 VA: 0x11B6518 Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC8B194 Offset: 0xC8B194 VA: 0xC8B194
public class AutoResisterRendererResourceFactories.RendererResourceFactorySofdecPrimeYuvRawData : RendererResourceFactory // TypeDefIndex: 4044
{
	// Methods

	// RVA: 0x11B651C Offset: 0x11B651C VA: 0x11B651C
	public void .ctor() { }

	// RVA: 0x11B6584 Offset: 0x11B6584 VA: 0x11B6584 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B6D94 Offset: 0x11B6D94 VA: 0x11B6D94 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B6D98 Offset: 0x11B6D98 VA: 0x11B6D98 Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: CriMana.Detail
public class RendererResourceAndroidH264Rgb : RendererResource // TypeDefIndex: 4045
{
	// Fields
	private const int RenderEventAction_ATTACH = 769;
	private int playerId; // 0x2C
	private int width; // 0x30
	private int height; // 0x34
	private int dispWidth; // 0x38
	private int dispHeight; // 0x3C
	private int alphaWidth; // 0x40
	private int alphaHeight; // 0x44
	private bool useUserShader; // 0x48
	private Vector4 movieTextureST; // 0x4C
	private Vector4 alphaTextureST; // 0x5C
	private Texture2D[] textures; // 0x70
	private IntPtr[] nativePtrs; // 0x78
	private bool needsUpdateTexture; // 0x80
	private bool needsToDetachInitTexture; // 0x81
	private bool areTexturesUpdated; // 0x82
	private bool isStoppingForSeek; // 0x83
	private bool isStartTriggered; // 0x84
	private uint nativeTextureId; // 0x88

	// Methods

	// RVA: 0x11B5940 Offset: 0x11B5940 VA: 0x11B5940
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B7888 Offset: 0x11B7888 VA: 0x11B7888 Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B788C Offset: 0x11B788C VA: 0x11B788C Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x11B78B4 Offset: 0x11B78B4 VA: 0x11B78B4 Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x11B78BC Offset: 0x11B78BC VA: 0x11B78BC Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x11B78C4 Offset: 0x11B78C4 VA: 0x11B78C4 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B7A18 Offset: 0x11B7A18 VA: 0x11B7A18 Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x11B7A30 Offset: 0x11B7A30 VA: 0x11B7A30 Slot: 18
	public override void OnPlayerStart() { }

	// RVA: 0x11B7A3C Offset: 0x11B7A3C VA: 0x11B7A3C Slot: 19
	public override bool ShouldSkipDestroyOnStopForSeek() { }

	// RVA: 0x11B7A44 Offset: 0x11B7A44 VA: 0x11B7A44
	private void forceUpdateMaterialTextures(Texture[] newTextures) { }

	// RVA: 0x11B7BB8 Offset: 0x11B7BB8 VA: 0x11B7BB8 Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x11B7CB4 Offset: 0x11B7CB4 VA: 0x11B7CB4 Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x11B7DD8 Offset: 0x11B7DD8 VA: 0x11B7DD8 Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x11B805C Offset: 0x11B805C VA: 0x11B805C
	private void UpdateMovieTextureST(float[] texCoords, float dispWidth, float dispHeight) { }

	// RVA: 0x11B8174 Offset: 0x11B8174 VA: 0x11B8174 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x11B869C Offset: 0x11B869C VA: 0x11B869C
	public static bool IsSupported() { }

	// RVA: 0x11B8980 Offset: 0x11B8980 VA: 0x11B8980
	private static extern bool criManaUnity_IsMediaCodecSupported_ANDROID(int device_type) { }

	// RVA: 0x11B8A24 Offset: 0x11B8A24 VA: 0x11B8A24
	private static extern uint criManaUnity_MediaCodecCreateTexture_ANDROID() { }

	// RVA: 0x11B8AB0 Offset: 0x11B8AB0 VA: 0x11B8AB0
	private static extern void criManaUnity_MediaCodecDeleteTexture_ANDROID(uint oes_texture) { }

	// RVA: 0x11B7C00 Offset: 0x11B7C00 VA: 0x11B7C00
	private static extern bool criManaUnityPlayer_MediaCodecAttachTexture_ANDROID(int player_id, uint oes_texture) { }

	// RVA: 0x11B7D2C Offset: 0x11B7D2C VA: 0x11B7D2C
	private static extern void criManaUnityPlayer_MediaCodecDetachTexture_ANDROID(int player_id, uint oes_texture) { }
}

// Namespace: 
private struct RendererResourceAndroidH264Rgb.NativeTexture // TypeDefIndex: 4046
{
	// Fields
	public uint nativePtrRGB; // 0x0
	public uint nativePtrA; // 0x4
	public float[] texCoords; // 0x8
}

// Namespace: CriMana.Detail
public class RendererResourceAndroidSofdecPrimeYuv : RendererResource // TypeDefIndex: 4047
{
	// Fields
	private int width; // 0x2C
	private int height; // 0x30
	private int chromaWidth; // 0x34
	private int chromaHeight; // 0x38
	private int alphaWidth; // 0x3C
	private int alphaHeight; // 0x40
	private bool useUserShader; // 0x44
	private CodecType codecType; // 0x48
	private const TextureFormat format = 63;
	private const TextureFormat formatUV = 62;
	private Vector4 movieTextureST; // 0x4C
	private Vector4 movieChromaTextureST; // 0x5C
	private Vector4 movieAlphaTextureST; // 0x6C
	private Texture2D[] textures; // 0x80
	private int numImages; // 0x88
	private int numImagesForYUV; // 0x8C
	private IntPtr[] nativePtrs; // 0x90
	private RenderTexture[] renderTextures; // 0x98
	private int playerID; // 0xA0
	private bool areTexturesUpdated; // 0xA4
	private bool isFrameUpdated; // 0xA5
	private bool isStoppingForSeek; // 0xA6
	private bool isStartTriggered; // 0xA7

	// Methods

	// RVA: 0x11B5CE8 Offset: 0x11B5CE8 VA: 0x11B5CE8
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B8DA4 Offset: 0x11B8DA4 VA: 0x11B8DA4 Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B8DA8 Offset: 0x11B8DA8 VA: 0x11B8DA8 Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x11B8DDC Offset: 0x11B8DDC VA: 0x11B8DDC Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x11B8DFC Offset: 0x11B8DFC VA: 0x11B8DFC Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x11B8E04 Offset: 0x11B8E04 VA: 0x11B8E04 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B8FB0 Offset: 0x11B8FB0 VA: 0x11B8FB0 Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x11B9408 Offset: 0x11B9408 VA: 0x11B9408 Slot: 18
	public override void OnPlayerStart() { }

	// RVA: 0x11B9238 Offset: 0x11B9238 VA: 0x11B9238
	private void forceUpdateMaterialTextures(Texture[] newTextures) { }

	// RVA: 0x11B9414 Offset: 0x11B9414 VA: 0x11B9414 Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x11B943C Offset: 0x11B943C VA: 0x11B943C Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x11B9528 Offset: 0x11B9528 VA: 0x11B9528 Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x11B8C70 Offset: 0x11B8C70 VA: 0x11B8C70
	private void UpdateMovieTextureST(uint dispWidth, uint dispHeight) { }

	// RVA: 0x11B98C4 Offset: 0x11B98C4 VA: 0x11B98C4 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x11B8B4C Offset: 0x11B8B4C VA: 0x11B8B4C
	private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma) { }
}

// Namespace: CriMana.Detail
public class RendererResourceAndroidSofdecPrimeYuvLegacyGles2 : RendererResource // TypeDefIndex: 4048
{
	// Fields
	private int width; // 0x2C
	private int height; // 0x30
	private int chromaWidth; // 0x34
	private int chromaHeight; // 0x38
	private int alphaWidth; // 0x3C
	private int alphaHeight; // 0x40
	private bool useUserShader; // 0x44
	private CodecType codecType; // 0x48
	private int movieWidth; // 0x4C
	private int movieHeight; // 0x50
	private const TextureFormat format = 1;
	private const TextureFormat formatUV = 62;
	private Vector4 movieTextureST; // 0x54
	private Vector4 movieChromaTextureST; // 0x64
	private Vector4 movieAlphaTextureST; // 0x74
	private Texture2D[][] textures; // 0x88
	private RenderTexture[] renderTextures; // 0x90
	private IntPtr[][] nativeTextures; // 0x98
	private int numImages; // 0xA0
	private int numImagesForYUV; // 0xA4
	private int numTextureSets; // 0xA8
	private int currentTextureSet; // 0xAC
	private int drawTextureSet; // 0xB0
	private int playerID; // 0xB4
	private bool isStoppingForSeek; // 0xB8

	// Methods

	// RVA: 0x11B6114 Offset: 0x11B6114 VA: 0x11B6114
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11B9F88 Offset: 0x11B9F88 VA: 0x11B9F88 Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x11B9F8C Offset: 0x11B9F8C VA: 0x11B9F8C Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x11BA014 Offset: 0x11BA014 VA: 0x11BA014 Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x11BA01C Offset: 0x11BA01C VA: 0x11BA01C Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x11BA024 Offset: 0x11BA024 VA: 0x11BA024 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11BA158 Offset: 0x11BA158 VA: 0x11BA158 Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x11BA174 Offset: 0x11BA174 VA: 0x11BA174 Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x11BA180 Offset: 0x11BA180 VA: 0x11BA180 Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x11BADD4 Offset: 0x11BADD4 VA: 0x11BADD4 Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x11BACA0 Offset: 0x11BACA0 VA: 0x11BACA0
	private void UpdateMovieTextureST(uint dispWidth, uint dispHeight) { }

	// RVA: 0x11BB1E8 Offset: 0x11BB1E8 VA: 0x11BB1E8 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x11BABA4 Offset: 0x11BABA4 VA: 0x11BABA4
	private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma) { }
}

// Namespace: CriMana.Detail
public class RendererResourceSofdecPrimeYuvRawData : RendererResource // TypeDefIndex: 4049
{
	// Fields
	private int width; // 0x2C
	private int height; // 0x30
	private int chromaWidth; // 0x34
	private int chromaHeight; // 0x38
	private bool useUserShader; // 0x3C
	private CodecType codecType; // 0x40
	private Vector4 movieTextureST; // 0x44
	private Vector4 movieChromaTextureST; // 0x54
	private Texture2D[][] textures; // 0x68
	private int currentTextureSet; // 0x70
	private int drawTextureSet; // 0x74
	private IntPtr[] nativePixels; // 0x78
	private int playerID; // 0x80
	private bool hasTextureUpdated; // 0x84
	private bool isTextureReady; // 0x85
	private bool hasRenderedNewFrame; // 0x86

	// Properties
	private static int NumTextureSets { get; }

	// Methods

	// RVA: 0x11B6650 Offset: 0x11B6650 VA: 0x11B6650
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11BBA64 Offset: 0x11BBA64 VA: 0x11BBA64
	private static int get_NumTextureSets() { }

	// RVA: 0x11BBC04 Offset: 0x11BBC04 VA: 0x11BBC04 Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x11BBC08 Offset: 0x11BBC08 VA: 0x11BBC08 Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x11BBC58 Offset: 0x11BBC58 VA: 0x11BBC58 Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x11BBC60 Offset: 0x11BBC60 VA: 0x11BBC60 Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x11BBC68 Offset: 0x11BBC68 VA: 0x11BBC68 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x11BBDA0 Offset: 0x11BBDA0 VA: 0x11BBDA0 Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x11BBDB4 Offset: 0x11BBDB4 VA: 0x11BBDB4 Slot: 20
	public override bool HasRenderedNewFrame() { }

	// RVA: 0x11BBDBC Offset: 0x11BBDBC VA: 0x11BBDBC Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x11BBDC8 Offset: 0x11BBDC8 VA: 0x11BBDC8 Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x11BBE6C Offset: 0x11BBE6C VA: 0x11BBE6C Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x11BBB30 Offset: 0x11BBB30 VA: 0x11BBB30
	private void UpdateMovieTextureST(uint dispWidth, uint dispHeight) { }

	// RVA: 0x11BC200 Offset: 0x11BC200 VA: 0x11BC200 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x11BBA6C Offset: 0x11BBA6C VA: 0x11BBA6C
	private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma) { }
}

// Namespace: CriMana
public class Player : CriDisposable // TypeDefIndex: 4050
{
	// Fields
	private const int InvalidPlayerId = -1;
	private static Player updatingPlayer; // 0x0
	private int playerId; // 0x20
	private bool isDisposed; // 0x24
	private Player.Status internalrequiredStatus; // 0x28
	private Player.Status _nativeStatus; // 0x2C
	private Nullable<Player.Status> lastNativeStatus; // 0x30
	private Nullable<Player.Status> lastPlayerStatus; // 0x38
	private bool wasStopping; // 0x40
	private bool isPreparingForRendering; // 0x41
	private bool isNativeStartInvoked; // 0x42
	private bool isNativeInitialized; // 0x43
	private RendererResource rendererResource; // 0x48
	private MovieInfo _movieInfo; // 0x50
	private FrameInfo _frameInfo; // 0x58
	private bool isMovieInfoAvailable; // 0x60
	private bool isFrameInfoAvailable; // 0x61
	private Player.ShaderDispatchCallback _shaderDispatchCallback; // 0x68
	private bool enableSubtitle; // 0x70
	private int subtitleBufferSize; // 0x74
	private uint droppedFrameCount; // 0x78
	private CriAtomExPlayer _atomExPlayer; // 0x80
	private CriAtomEx3dSource _atomEx3Dsource; // 0x88
	private Player.TimerType _timerType; // 0x90
	private bool isStoppingForSeek; // 0x94
	public Player.CuePointCallback cuePointCallback; // 0x98
	public Player.StatusChangeCallback statusChangeCallback; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC8D550 Offset: 0xC8D550 VA: 0xC8D550
	[DebuggerBrowsableAttribute] // RVA: 0xC8D550 Offset: 0xC8D550 VA: 0xC8D550
	private Player.SubtitleChangeCallback OnSubtitleChanged; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xC8D58C Offset: 0xC8D58C VA: 0xC8D58C
	[DebuggerBrowsableAttribute] // RVA: 0xC8D58C Offset: 0xC8D58C VA: 0xC8D58C
	private bool <additiveMode>k__BackingField; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xC8D5C8 Offset: 0xC8D5C8 VA: 0xC8D5C8
	[DebuggerBrowsableAttribute] // RVA: 0xC8D5C8 Offset: 0xC8D5C8 VA: 0xC8D5C8
	private int <maxFrameDrop>k__BackingField; // 0xB4
	[CompilerGeneratedAttribute] // RVA: 0xC8D604 Offset: 0xC8D604 VA: 0xC8D604
	[DebuggerBrowsableAttribute] // RVA: 0xC8D604 Offset: 0xC8D604 VA: 0xC8D604
	private bool <applyTargetAlpha>k__BackingField; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC8D640 Offset: 0xC8D640 VA: 0xC8D640
	[DebuggerBrowsableAttribute] // RVA: 0xC8D640 Offset: 0xC8D640 VA: 0xC8D640
	private bool <uiRenderMode>k__BackingField; // 0xB9
	[CompilerGeneratedAttribute] // RVA: 0xC8D67C Offset: 0xC8D67C VA: 0xC8D67C
	[DebuggerBrowsableAttribute] // RVA: 0xC8D67C Offset: 0xC8D67C VA: 0xC8D67C
	private IntPtr <subtitleBuffer>k__BackingField; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xC8D6B8 Offset: 0xC8D6B8 VA: 0xC8D6B8
	[DebuggerBrowsableAttribute] // RVA: 0xC8D6B8 Offset: 0xC8D6B8 VA: 0xC8D6B8
	private int <subtitleSize>k__BackingField; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xC8D6F4 Offset: 0xC8D6F4 VA: 0xC8D6F4
	[DebuggerBrowsableAttribute] // RVA: 0xC8D6F4 Offset: 0xC8D6F4 VA: 0xC8D6F4
	private CriManaMoviePlayerHolder <playerHolder>k__BackingField; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xC8D730 Offset: 0xC8D730 VA: 0xC8D730
	private static Player.CuePointCallbackFromNativeDelegate <>f__mg$cache0; // 0x8

	// Properties
	private Player.Status requiredStatus { get; set; }
	public bool additiveMode { get; set; }
	public int maxFrameDrop { get; set; }
	public bool applyTargetAlpha { get; set; }
	public bool uiRenderMode { get; set; }
	public bool isFrameAvailable { get; }
	public MovieInfo movieInfo { get; }
	public FrameInfo frameInfo { get; }
	public Player.Status status { get; }
	public Player.Status nativeStatus { get; }
	public int numberOfEntries { get; }
	public IntPtr subtitleBuffer { get; set; }
	public int subtitleSize { get; set; }
	public CriAtomExPlayer atomExPlayer { get; }
	public CriAtomEx3dSource atomEx3DsourceForAmbisonics { get; }
	public Player.TimerType timerType { get; }
	public CriManaMoviePlayerHolder playerHolder { get; set; }
	public bool isAlive { get; }

	// Methods

	// RVA: 0x11BC8F8 Offset: 0x11BC8F8 VA: 0x11BC8F8
	public void .ctor() { }

	// RVA: 0x11BCAF8 Offset: 0x11BCAF8 VA: 0x11BCAF8
	public void .ctor(bool advanced_audio_mode, bool ambisonics_mode, uint max_path_length) { }

	// RVA: 0x11BCEC4 Offset: 0x11BCEC4 VA: 0x11BCEC4
	private Player.Status get_requiredStatus() { }

	// RVA: 0x11BCECC Offset: 0x11BCECC VA: 0x11BCECC
	private void set_requiredStatus(Player.Status value) { }

	// RVA: 0x11BCFF8 Offset: 0x11BCFF8 VA: 0x11BCFF8
	public void add_OnSubtitleChanged(Player.SubtitleChangeCallback value) { }

	// RVA: 0x11BD0E4 Offset: 0x11BD0E4 VA: 0x11BD0E4
	public void remove_OnSubtitleChanged(Player.SubtitleChangeCallback value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FDBC Offset: 0xC8FDBC VA: 0xC8FDBC
	// RVA: 0x11BD1D0 Offset: 0x11BD1D0 VA: 0x11BD1D0
	public bool get_additiveMode() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FDCC Offset: 0xC8FDCC VA: 0xC8FDCC
	// RVA: 0x11BCAE4 Offset: 0x11BCAE4 VA: 0x11BCAE4
	public void set_additiveMode(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FDDC Offset: 0xC8FDDC VA: 0xC8FDDC
	// RVA: 0x11BD1D8 Offset: 0x11BD1D8 VA: 0x11BD1D8
	public int get_maxFrameDrop() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FDEC Offset: 0xC8FDEC VA: 0xC8FDEC
	// RVA: 0x11BCAF0 Offset: 0x11BCAF0 VA: 0x11BCAF0
	public void set_maxFrameDrop(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FDFC Offset: 0xC8FDFC VA: 0xC8FDFC
	// RVA: 0x11BD1E0 Offset: 0x11BD1E0 VA: 0x11BD1E0
	public bool get_applyTargetAlpha() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE0C Offset: 0xC8FE0C VA: 0xC8FE0C
	// RVA: 0x11BD1E8 Offset: 0x11BD1E8 VA: 0x11BD1E8
	public void set_applyTargetAlpha(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE1C Offset: 0xC8FE1C VA: 0xC8FE1C
	// RVA: 0x11BD1F4 Offset: 0x11BD1F4 VA: 0x11BD1F4
	public bool get_uiRenderMode() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE2C Offset: 0xC8FE2C VA: 0xC8FE2C
	// RVA: 0x11BD1FC Offset: 0x11BD1FC VA: 0x11BD1FC
	public void set_uiRenderMode(bool value) { }

	// RVA: 0x11BD208 Offset: 0x11BD208 VA: 0x11BD208
	public bool get_isFrameAvailable() { }

	// RVA: 0x11BD210 Offset: 0x11BD210 VA: 0x11BD210
	public MovieInfo get_movieInfo() { }

	// RVA: 0x11BD228 Offset: 0x11BD228 VA: 0x11BD228
	public FrameInfo get_frameInfo() { }

	// RVA: 0x11BD240 Offset: 0x11BD240 VA: 0x11BD240
	public Player.Status get_status() { }

	// RVA: 0x11BD2CC Offset: 0x11BD2CC VA: 0x11BD2CC
	public Player.Status get_nativeStatus() { }

	// RVA: 0x11BD2D4 Offset: 0x11BD2D4 VA: 0x11BD2D4
	public int get_numberOfEntries() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE3C Offset: 0xC8FE3C VA: 0xC8FE3C
	// RVA: 0x11BD3D8 Offset: 0x11BD3D8 VA: 0x11BD3D8
	public IntPtr get_subtitleBuffer() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE4C Offset: 0xC8FE4C VA: 0xC8FE4C
	// RVA: 0x11BD3E0 Offset: 0x11BD3E0 VA: 0x11BD3E0
	private void set_subtitleBuffer(IntPtr value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE5C Offset: 0xC8FE5C VA: 0xC8FE5C
	// RVA: 0x11BD3E8 Offset: 0x11BD3E8 VA: 0x11BD3E8
	public int get_subtitleSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE6C Offset: 0xC8FE6C VA: 0xC8FE6C
	// RVA: 0x11BD3F0 Offset: 0x11BD3F0 VA: 0x11BD3F0
	private void set_subtitleSize(int value) { }

	// RVA: 0x11BD3F8 Offset: 0x11BD3F8 VA: 0x11BD3F8
	public CriAtomExPlayer get_atomExPlayer() { }

	// RVA: 0x11BD400 Offset: 0x11BD400 VA: 0x11BD400
	public CriAtomEx3dSource get_atomEx3DsourceForAmbisonics() { }

	// RVA: 0x11BD408 Offset: 0x11BD408 VA: 0x11BD408
	public Player.TimerType get_timerType() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE7C Offset: 0xC8FE7C VA: 0xC8FE7C
	// RVA: 0x11BD410 Offset: 0x11BD410 VA: 0x11BD410
	public CriManaMoviePlayerHolder get_playerHolder() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8FE8C Offset: 0xC8FE8C VA: 0xC8FE8C
	// RVA: 0x11BD418 Offset: 0x11BD418 VA: 0x11BD418
	public void set_playerHolder(CriManaMoviePlayerHolder value) { }

	// RVA: 0x11BD420 Offset: 0x11BD420 VA: 0x11BD420 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11BD6BC Offset: 0x11BD6BC VA: 0x11BD6BC Slot: 5
	public override void Dispose() { }

	// RVA: 0x11BD6E8 Offset: 0x11BD6E8 VA: 0x11BD6E8
	public void CreateRendererResource(int width, int height, bool alpha) { }

	// RVA: 0x11BDC88 Offset: 0x11BDC88 VA: 0x11BDC88
	public void DisposeRendererResource() { }

	// RVA: 0x11BDCB4 Offset: 0x11BDCB4 VA: 0x11BDCB4
	public void Prepare() { }

	// RVA: 0x11BE034 Offset: 0x11BE034 VA: 0x11BE034
	public void PrepareForRendering() { }

	// RVA: 0x11BE148 Offset: 0x11BE148 VA: 0x11BE148
	public void Start() { }

	// RVA: 0x11BE1CC Offset: 0x11BE1CC VA: 0x11BE1CC
	public void Stop() { }

	// RVA: 0x11BE31C Offset: 0x11BE31C VA: 0x11BE31C
	public void StopForSeek() { }

	// RVA: 0x11BE0A0 Offset: 0x11BE0A0 VA: 0x11BE0A0
	public void Pause(bool sw) { }

	// RVA: 0x11BE4D0 Offset: 0x11BE4D0 VA: 0x11BE4D0
	public bool IsPaused() { }

	// RVA: 0x11BE5DC Offset: 0x11BE5DC VA: 0x11BE5DC
	public bool SetFile(CriFsBinder binder, string moviePath, Player.SetMode setMode = 0) { }

	// RVA: 0x11BE8F8 Offset: 0x11BE8F8 VA: 0x11BE8F8
	public bool SetData(IntPtr data, long dataSize, Player.SetMode setMode = 0) { }

	[ObsoleteAttribute] // RVA: 0xC8FE9C Offset: 0xC8FE9C VA: 0xC8FE9C
	// RVA: 0x11BEB48 Offset: 0x11BEB48 VA: 0x11BEB48
	public bool SetData(byte[] data, long datasize, Player.SetMode setMode = 0) { }

	// RVA: 0x11BEDA8 Offset: 0x11BEDA8 VA: 0x11BEDA8
	public bool SetContentId(CriFsBinder binder, int contentId, Player.SetMode setMode = 0) { }

	// RVA: 0x11BF03C Offset: 0x11BF03C VA: 0x11BF03C
	public bool SetFileRange(string filePath, ulong offset, long range, Player.SetMode setMode = 0) { }

	// RVA: 0x11BF2DC Offset: 0x11BF2DC VA: 0x11BF2DC
	public void Loop(bool sw) { }

	// RVA: 0x11BF404 Offset: 0x11BF404 VA: 0x11BF404
	public void SetMasterTimerType(Player.TimerType timerType) { }

	// RVA: 0x11BF52C Offset: 0x11BF52C VA: 0x11BF52C
	public void SetSeekPosition(int frameNumber) { }

	// RVA: 0x11BF650 Offset: 0x11BF650 VA: 0x11BF650
	public void SetMovieEventSyncMode(Player.MovieEventSyncMode mode) { }

	// RVA: 0x11BF774 Offset: 0x11BF774 VA: 0x11BF774
	public void SetSpeed(float speed) { }

	// RVA: 0x11BF898 Offset: 0x11BF898 VA: 0x11BF898
	public void SetMaxPictureDataSize(uint maxDataSize) { }

	// RVA: 0x11BF9BC Offset: 0x11BF9BC VA: 0x11BF9BC
	public void SetBufferingTime(float sec) { }

	// RVA: 0x11BFAE0 Offset: 0x11BFAE0 VA: 0x11BFAE0
	public void SetMinBufferSize(int min_buffer_size) { }

	// RVA: 0x11BFC04 Offset: 0x11BFC04 VA: 0x11BFC04
	public void SetAudioTrack(int track) { }

	// RVA: 0x11BFD28 Offset: 0x11BFD28 VA: 0x11BFD28
	public void SetAudioTrack(Player.AudioTrack track) { }

	// RVA: 0x11BFDE8 Offset: 0x11BFDE8 VA: 0x11BFDE8
	public void SetSubAudioTrack(int track) { }

	// RVA: 0x11BFF0C Offset: 0x11BFF0C VA: 0x11BFF0C
	public void SetSubAudioTrack(Player.AudioTrack track) { }

	// RVA: 0x11BFFCC Offset: 0x11BFFCC VA: 0x11BFFCC
	public void SetExtraAudioTrack(int track) { }

	// RVA: 0x11C00F0 Offset: 0x11C00F0 VA: 0x11C00F0
	public void SetExtraAudioTrack(Player.AudioTrack track) { }

	// RVA: 0x11C01B0 Offset: 0x11C01B0 VA: 0x11C01B0
	public void SetVolume(float volume) { }

	// RVA: 0x11C02D4 Offset: 0x11C02D4 VA: 0x11C02D4
	public float GetVolume() { }

	// RVA: 0x11C03D8 Offset: 0x11C03D8 VA: 0x11C03D8
	public void SetSubAudioVolume(float volume) { }

	// RVA: 0x11C04FC Offset: 0x11C04FC VA: 0x11C04FC
	public float GetSubAudioVolume() { }

	// RVA: 0x11C0600 Offset: 0x11C0600 VA: 0x11C0600
	public void SetExtraAudioVolume(float volume) { }

	// RVA: 0x11C0724 Offset: 0x11C0724 VA: 0x11C0724
	public float GetExtraAudioVolume() { }

	// RVA: 0x11C0828 Offset: 0x11C0828 VA: 0x11C0828
	public void SetBusSendLevel(string bus_name, float level) { }

	// RVA: 0x11C0980 Offset: 0x11C0980 VA: 0x11C0980
	public void SetSubAudioBusSendLevel(string bus_name, float volume) { }

	// RVA: 0x11C0AD8 Offset: 0x11C0AD8 VA: 0x11C0AD8
	public void SetExtraAudioBusSendLevel(string bus_name, float volume) { }

	// RVA: 0x11C0C30 Offset: 0x11C0C30 VA: 0x11C0C30
	public void SetSubtitleChannel(int channel) { }

	// RVA: 0x11C0F70 Offset: 0x11C0F70 VA: 0x11C0F70
	public void SetShaderDispatchCallback(Player.ShaderDispatchCallback shaderDispatchCallback) { }

	// RVA: 0x11C0F78 Offset: 0x11C0F78 VA: 0x11C0F78
	public long GetTime() { }

	// RVA: 0x11C107C Offset: 0x11C107C VA: 0x11C107C
	public int GetDisplayedFrameNo() { }

	// RVA: 0x11C1180 Offset: 0x11C1180 VA: 0x11C1180
	public bool HasRenderedNewFrame() { }

	// RVA: 0x11C119C Offset: 0x11C119C VA: 0x11C119C
	public void SetAsrRackId(int asrRackId) { }

	// RVA: 0x11C12C0 Offset: 0x11C12C0 VA: 0x11C12C0
	public void UpdateWithUserTime(ulong timeCount, ulong timeUnit) { }

	// RVA: 0x11C1884 Offset: 0x11C1884 VA: 0x11C1884
	public void SetManualTimerUnit(ulong timeUnitN, ulong timeUnitD) { }

	// RVA: 0x11C19B8 Offset: 0x11C19B8 VA: 0x11C19B8
	public void UpdateWithManualTimeAdvanced() { }

	// RVA: 0x11C1AC4 Offset: 0x11C1AC4 VA: 0x11C1AC4
	public void Update() { }

	// RVA: 0x11C1ADC Offset: 0x11C1ADC VA: 0x11C1ADC
	public void OnWillRenderObject(CriManaMovieMaterial sender) { }

	// RVA: 0x11C1BE0 Offset: 0x11C1BE0 VA: 0x11C1BE0
	public bool UpdateMaterial(Material material) { }

	// RVA: 0x11C1C30 Offset: 0x11C1C30 VA: 0x11C1C30
	public bool get_isAlive() { }

	// RVA: 0x11C1B30 Offset: 0x11C1B30 VA: 0x11C1B30
	public void IssuePluginEvent(Player.CriManaUnityPlayer_RenderEventAction renderEventAction) { }

	// RVA: 0x11BD498 Offset: 0x11BD498 VA: 0x11BD498
	private void Dispose(bool disposing) { }

	// RVA: 0x11C13FC Offset: 0x11C13FC VA: 0x11C13FC
	private void InternalUpdate() { }

	[DebuggerHiddenAttribute] // RVA: 0xC8FED4 Offset: 0xC8FED4 VA: 0xC8FED4
	// RVA: 0x11C1D68 Offset: 0x11C1D68 VA: 0x11C1D68
	private IEnumerator IssuePluginUpdatesForFrames(int frameCount, MonoBehaviour playerHolder, bool destroy, int playerId) { }

	// RVA: 0x11BE308 Offset: 0x11BE308 VA: 0x11BE308
	private void DisableInfos(bool keepFrameInfo = False) { }

	// RVA: 0x11BDD0C Offset: 0x11BDD0C VA: 0x11BDD0C
	private void PrepareNativePlayer() { }

	// RVA: 0x11BDE30 Offset: 0x11BDE30 VA: 0x11BDE30
	private void UpdateNativePlayer() { }

	// RVA: 0x11BCEF4 Offset: 0x11BCEF4 VA: 0x11BCEF4
	private void InvokePlayerStatusCheck() { }

	// RVA: 0x11C0CE8 Offset: 0x11C0CE8 VA: 0x11C0CE8
	private void AllocateSubtitleBuffer(int size) { }

	// RVA: 0x11C0E0C Offset: 0x11C0E0C VA: 0x11C0E0C
	private void DeallocateSubtitleBuffer() { }

	[MonoPInvokeCallbackAttribute] // RVA: 0xC8FEE4 Offset: 0xC8FEE4 VA: 0xC8FEE4
	// RVA: 0x11BC814 Offset: 0x11BC814 VA: 0x11BC814
	private static void CuePointCallbackFromNative(IntPtr ptr1, IntPtr ptr2, in EventPoint eventPoint) { }

	// RVA: 0x11BCA58 Offset: 0x11BCA58 VA: 0x11BCA58
	private static extern int CRIWAREFE61074E() { }

	// RVA: 0x11C2B94 Offset: 0x11C2B94 VA: 0x11C2B94
	private static extern int CRIWARE85A7273A() { }

	// RVA: 0x11BCD7C Offset: 0x11BCD7C VA: 0x11BCD7C
	private static extern int CRIWAREF0D772AE(bool useAtomExPlayer, uint maxPathLength) { }

	// RVA: 0x11C1CCC Offset: 0x11C1CCC VA: 0x11C1CCC
	private static extern void CRIWARE067A408D(int player_id) { }

	// RVA: 0x11BE74C Offset: 0x11BE74C VA: 0x11BE74C
	private static extern void CRIWARE8778888A(int player_id, IntPtr binder, string path) { }

	// RVA: 0x11BEEBC Offset: 0x11BEEBC VA: 0x11BEEBC
	private static extern void CRIWARE3B5AF1A8(int player_id, IntPtr binder, int content_id) { }

	// RVA: 0x11BF118 Offset: 0x11BF118 VA: 0x11BF118
	private static extern void CRIWARE7053B66F(int player_id, string path, ulong offset, long range) { }

	// RVA: 0x11BE9C8 Offset: 0x11BE9C8 VA: 0x11BE9C8
	private static extern void CRIWAREA4F9EEC0(int player_id, IntPtr data, long datasize) { }

	// RVA: 0x11BEC18 Offset: 0x11BEC18 VA: 0x11BEC18
	private static extern void CRIWAREA4F9EEC0(int player_id, byte[] data, long datasize) { }

	// RVA: 0x11BE814 Offset: 0x11BE814 VA: 0x11BE814
	private static extern bool CRIWAREE7861E0D(int player_id, IntPtr binder, string path, bool repeat) { }

	// RVA: 0x11BEF70 Offset: 0x11BEF70 VA: 0x11BEF70
	private static extern bool CRIWARE0BBD64E4(int player_id, IntPtr binder, int content_id, bool repeat) { }

	// RVA: 0x11BF1F0 Offset: 0x11BF1F0 VA: 0x11BF1F0
	private static extern bool CRIWAREE6B04B32(int player_id, string path, ulong offset, long range, bool repeat) { }

	// RVA: 0x11BEA7C Offset: 0x11BEA7C VA: 0x11BEA7C
	private static extern bool CRIWARE8D5436CA(int player_id, IntPtr data, long datasize, bool repeat) { }

	// RVA: 0x11BECD4 Offset: 0x11BECD4 VA: 0x11BECD4
	private static extern bool CRIWARE8D5436CA(int player_id, byte[] data, long datasize, bool repeat) { }

	// RVA: 0x11C2C20 Offset: 0x11C2C20 VA: 0x11C2C20
	private static extern void CRIWAREBA8FF2E5(int player_id) { }

	// RVA: 0x11BD33C Offset: 0x11BD33C VA: 0x11BD33C
	private static extern int CRIWARE5AF5271B(int player_id) { }

	// RVA: 0x11C2084 Offset: 0x11C2084 VA: 0x11C2084
	private static extern void CRIWARE32DB0631(int player_id, Player.CuePointCallbackFromNativeDelegate cbfunc) { }

	// RVA: 0x11C1EE8 Offset: 0x11C1EE8 VA: 0x11C1EE8
	private static extern void CRIWAREDE02D75D(int player_id, [Out] MovieInfo movie_info) { }

	// RVA: 0x11C21D4 Offset: 0x11C21D4 VA: 0x11C21D4
	private static extern int CRIWAREF2CC4831(int player_id, IntPtr subtitle_buffer, ref uint subtitle_size) { }

	// RVA: 0x11C2138 Offset: 0x11C2138 VA: 0x11C2138
