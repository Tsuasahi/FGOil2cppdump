	public const CriManaMovieMaterial.MaxFrameDrop Four = 4;
	public const CriManaMovieMaterial.MaxFrameDrop Five = 5;
	public const CriManaMovieMaterial.MaxFrameDrop Six = 6;
	public const CriManaMovieMaterial.MaxFrameDrop Seven = 7;
	public const CriManaMovieMaterial.MaxFrameDrop Eight = 8;
	public const CriManaMovieMaterial.MaxFrameDrop Nine = 9;
	public const CriManaMovieMaterial.MaxFrameDrop Ten = 10;
	public const CriManaMovieMaterial.MaxFrameDrop Infinite = -1;
}

// Namespace: 
public enum CriManaMovieMaterial.RenderMode // TypeDefIndex: 4033
{
	// Fields
	public int value__; // 0x0
	public const CriManaMovieMaterial.RenderMode Always = 0;
	public const CriManaMovieMaterial.RenderMode OnVisibility = 1;
	public const CriManaMovieMaterial.RenderMode Never = 2;
}

// Namespace: 
public sealed class CriManaMovieMaterial.OnApplicationPauseCallback : MulticastDelegate // TypeDefIndex: 4034
{
	// Methods

	// RVA: 0x1DE5CD8 Offset: 0x1DE5CD8 VA: 0x1DE5CD8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1DE5CE8 Offset: 0x1DE5CE8 VA: 0x1DE5CE8 Slot: 11
	public virtual void Invoke(CriManaMovieMaterial manaMovieMaterial, bool appPause) { }

	// RVA: 0x1DE60A8 Offset: 0x1DE60A8 VA: 0x1DE60A8 Slot: 12
	public virtual IAsyncResult BeginInvoke(CriManaMovieMaterial manaMovieMaterial, bool appPause, AsyncCallback callback, object object) { }

	// RVA: 0x1DE6148 Offset: 0x1DE6148 VA: 0x1DE6148 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC204F8 Offset: 0xC204F8 VA: 0xC204F8
private sealed class CriManaMovieMaterial.<RestartPlayerRoutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 4035
{
	// Fields
	internal CriManaMovieMaterial $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC24880 Offset: 0xC24880 VA: 0xC24880
	// RVA: 0x1DE5A30 Offset: 0x1DE5A30 VA: 0x1DE5A30
	public void .ctor() { }

	// RVA: 0x1DE5A38 Offset: 0x1DE5A38 VA: 0x1DE5A38 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC24890 Offset: 0xC24890 VA: 0xC24890
	// RVA: 0x1DE5C4C Offset: 0x1DE5C4C VA: 0x1DE5C4C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC248A0 Offset: 0xC248A0 VA: 0xC248A0
	// RVA: 0x1DE5C54 Offset: 0x1DE5C54 VA: 0x1DE5C54 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC248B0 Offset: 0xC248B0 VA: 0xC248B0
	// RVA: 0x1DE5C5C Offset: 0x1DE5C5C VA: 0x1DE5C5C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC248C0 Offset: 0xC248C0 VA: 0xC248C0
	// RVA: 0x1DE5C70 Offset: 0x1DE5C70 VA: 0x1DE5C70 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class CriManaMoviePlayerHolder : CriMonoBehaviour // TypeDefIndex: 4036
{
	// Fields
	private Player _player; // 0x28

	// Properties
	public Player player { set; }

	// Methods

	// RVA: 0x1DE6154 Offset: 0x1DE6154 VA: 0x1DE6154
	public void .ctor() { }

	// RVA: 0x1DE61D0 Offset: 0x1DE61D0 VA: 0x1DE61D0
	public void set_player(Player value) { }

	// RVA: 0x1DE61D8 Offset: 0x1DE61D8 VA: 0x1DE61D8
	private void Awake() { }

	// RVA: 0x1DE6240 Offset: 0x1DE6240 VA: 0x1DE6240 Slot: 6
	public override void CriInternalUpdate() { }

	// RVA: 0x1DE6244 Offset: 0x1DE6244 VA: 0x1DE6244 Slot: 7
	public override void CriInternalLateUpdate() { }

	// RVA: 0x1DE6248 Offset: 0x1DE6248 VA: 0x1DE6248
	private void Start() { }
}

// Namespace: CriMana.Detail
public abstract class RendererResource : IDisposable // TypeDefIndex: 4037
{
	// Fields
	private bool disposed; // 0x10
	protected Shader shader; // 0x18
	protected Material currentMaterial; // 0x20
	protected bool hasAlpha; // 0x28
	protected bool additive; // 0x29
	protected bool applyTargetAlpha; // 0x2A
	protected bool ui; // 0x2B

	// Methods

	// RVA: 0x240DE20 Offset: 0x240DE20 VA: 0x240DE20
	protected void .ctor() { }

	// RVA: 0x240DE28 Offset: 0x240DE28 VA: 0x240DE28 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x240DF08 Offset: 0x240DF08 VA: 0x240DF08 Slot: 4
	public void Dispose() { }

	// RVA: 0x240DEB8 Offset: 0x240DEB8 VA: 0x240DEB8
	private void Dispose(bool disposing) { }

	// RVA: 0x240DF5C Offset: 0x240DF5C VA: 0x240DF5C
	public int GetNumberOfFrameBeforeDestroy(int playerId) { }

	// RVA: 0x240E014 Offset: 0x240E014 VA: 0x240E014
	protected void SetupStaticMaterialProperties() { }

	// RVA: 0x240E2B4 Offset: 0x240E2B4 VA: 0x240E2B4
	private void GetBlendModes(out int srcBlendMode, out int dstBlendMode) { }

	// RVA: 0x240E2EC Offset: 0x240E2EC VA: 0x240E2EC Slot: 5
	public virtual void SetApplyTargetAlpha(bool flag) { }

	// RVA: 0x240E2F8 Offset: 0x240E2F8 VA: 0x240E2F8 Slot: 6
	public virtual void SetUiRenderMode(bool flag) { }

	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void OnDisposeManaged();

	// RVA: -1 Offset: -1 Slot: 8
	protected abstract void OnDisposeUnmanaged();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool IsPrepared();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool ContinuePreparing();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void AttachToPlayer(int playerId);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract bool UpdateMaterial(Material material);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract void UpdateTextures();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

	// RVA: 0x240E304 Offset: 0x240E304 VA: 0x240E304 Slot: 16
	public virtual void OnPlayerPause(bool pauseStatus) { }

	// RVA: 0x240E308 Offset: 0x240E308 VA: 0x240E308 Slot: 17
	public virtual bool OnPlayerStopForSeek() { }

	// RVA: 0x240E310 Offset: 0x240E310 VA: 0x240E310 Slot: 18
	public virtual void OnPlayerStart() { }

	// RVA: 0x240E314 Offset: 0x240E314 VA: 0x240E314 Slot: 19
	public virtual bool ShouldSkipDestroyOnStopForSeek() { }

	// RVA: 0x240E31C Offset: 0x240E31C VA: 0x240E31C Slot: 20
	public virtual bool HasRenderedNewFrame() { }

	// RVA: 0x240E324 Offset: 0x240E324 VA: 0x240E324
	public static uint NextPowerOfTwo(uint x) { }

	// RVA: 0x240E344 Offset: 0x240E344 VA: 0x240E344
	public static int NextPowerOfTwo(int x) { }

	// RVA: 0x240E364 Offset: 0x240E364 VA: 0x240E364
	public static int CeilingWith(int x, int ceilingValue) { }

	// RVA: 0x240E378 Offset: 0x240E378 VA: 0x240E378
	public static int Ceiling16(int x) { }

	// RVA: 0x240E384 Offset: 0x240E384 VA: 0x240E384
	public static int Ceiling32(int x) { }

	// RVA: 0x240E390 Offset: 0x240E390 VA: 0x240E390
	public static int Ceiling64(int x) { }

	// RVA: 0x240E39C Offset: 0x240E39C VA: 0x240E39C
	public static int Ceiling256(int x) { }

	// RVA: 0x240E3A8 Offset: 0x240E3A8 VA: 0x240E3A8
	protected static void DisposeTextures(Texture[] textures) { }

	// RVA: 0x240E4D8 Offset: 0x240E4D8 VA: 0x240E4D8
	protected static extern bool CRIWARE0CF9686B(int player_id, int num_textures, IntPtr[] tex_ptrs, [In] [Out] FrameInfo frame_info, ref bool frame_drop) { }

	// RVA: 0x240E6B0 Offset: 0x240E6B0 VA: 0x240E6B0
	protected static extern bool CRIWAREC5767B79(int player_id, int num_textures, [In] [Out] IntPtr[] tex_ptrs) { }

	// RVA: 0x240E774 Offset: 0x240E774 VA: 0x240E774
	protected static extern bool CRIWAREDBEFBBC1(int player_id, int num_textures, [In] [Out] IntPtr[] tex_ptrs) { }

	// RVA: 0x240E838 Offset: 0x240E838 VA: 0x240E838
	protected static extern bool CRIWAREF3415F20(int player_id, int num_textures, [In] [Out] IntPtr[] tex_ptrs) { }

	// RVA: 0x240DF78 Offset: 0x240DF78 VA: 0x240DF78
	protected static extern sbyte CRIWARE343CCB13(int player_id) { }
}

// Namespace: CriMana.Detail
public abstract class RendererResourceFactory : IDisposable // TypeDefIndex: 4038
{
	// Fields
	private static SortedList<int, RendererResourceFactory> factoryList; // 0x0
	private bool disposed; // 0x10

	// Methods

	// RVA: 0x240C8C0 Offset: 0x240C8C0 VA: 0x240C8C0
	protected void .ctor() { }

	// RVA: 0x240C7BC Offset: 0x240C7BC VA: 0x240C7BC
	public static void RegisterFactory(RendererResourceFactory factory, int priority) { }

	// RVA: 0x24122E8 Offset: 0x24122E8 VA: 0x24122E8
	public static void DisposeAllFactories() { }

	// RVA: 0x2412610 Offset: 0x2412610 VA: 0x2412610
	public static RendererResource DispatchAndCreate(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x2412968 Offset: 0x2412968 VA: 0x2412968 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x24125BC Offset: 0x24125BC VA: 0x24125BC Slot: 4
	public void Dispose() { }

	// RVA: 0x24129F8 Offset: 0x24129F8 VA: 0x24129F8
	private void Dispose(bool disposing) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void OnDisposeManaged();

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract void OnDisposeUnmanaged();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

	// RVA: 0x2412A48 Offset: 0x2412A48 VA: 0x2412A48
	private static void .cctor() { }
}

// Namespace: CriMana.Detail
[AttributeUsageAttribute] // RVA: 0xC1F01C Offset: 0xC1F01C VA: 0xC1F01C
public class RendererResourceFactoryPriorityAttribute : Attribute // TypeDefIndex: 4039
{
	// Fields
	public readonly int priority; // 0x10

	// Methods

	// RVA: 0x2412ABC Offset: 0x2412ABC VA: 0x2412ABC
	public void .ctor(int priority) { }
}

// Namespace: CriMana.Detail
public static class AutoResisterRendererResourceFactories // TypeDefIndex: 4040
{
	// Methods

	// RVA: 0x240C3E8 Offset: 0x240C3E8 VA: 0x240C3E8
	public static void InvokeAutoRegister() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC1F030 Offset: 0xC1F030 VA: 0xC1F030
public class AutoResisterRendererResourceFactories.RendererResourceFactoryAndroidH264Rgb : RendererResourceFactory // TypeDefIndex: 4041
{
	// Methods

	// RVA: 0x240C858 Offset: 0x240C858 VA: 0x240C858
	public void .ctor() { }

	// RVA: 0x240C8C8 Offset: 0x240C8C8 VA: 0x240C8C8 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240CBF0 Offset: 0x240CBF0 VA: 0x240CBF0 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x240CBF4 Offset: 0x240CBF4 VA: 0x240CBF4 Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC1F044 Offset: 0xC1F044 VA: 0xC1F044
public class AutoResisterRendererResourceFactories.RendererResourceFactoryAndroidSofdecPrimeYuv : RendererResourceFactory // TypeDefIndex: 4042
{
	// Methods

	// RVA: 0x240CBF8 Offset: 0x240CBF8 VA: 0x240CBF8
	public void .ctor() { }

	// RVA: 0x240CC60 Offset: 0x240CC60 VA: 0x240CC60 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240D004 Offset: 0x240D004 VA: 0x240D004 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x240D008 Offset: 0x240D008 VA: 0x240D008 Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC1F058 Offset: 0xC1F058 VA: 0xC1F058
public class AutoResisterRendererResourceFactories.RendererResourceFactoryAndroidSofdecPrimeYuvLegacyGles2 : RendererResourceFactory // TypeDefIndex: 4043
{
	// Methods

	// RVA: 0x240D00C Offset: 0x240D00C VA: 0x240D00C
	public void .ctor() { }

	// RVA: 0x240D074 Offset: 0x240D074 VA: 0x240D074 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240D598 Offset: 0x240D598 VA: 0x240D598 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x240D59C Offset: 0x240D59C VA: 0x240D59C Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: 
[RendererResourceFactoryPriorityAttribute] // RVA: 0xC1F06C Offset: 0xC1F06C VA: 0xC1F06C
public class AutoResisterRendererResourceFactories.RendererResourceFactorySofdecPrimeYuvRawData : RendererResourceFactory // TypeDefIndex: 4044
{
	// Methods

	// RVA: 0x240D5A0 Offset: 0x240D5A0 VA: 0x240D5A0
	public void .ctor() { }

	// RVA: 0x240D608 Offset: 0x240D608 VA: 0x240D608 Slot: 7
	public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240DE18 Offset: 0x240DE18 VA: 0x240DE18 Slot: 5
	protected override void OnDisposeManaged() { }

	// RVA: 0x240DE1C Offset: 0x240DE1C VA: 0x240DE1C Slot: 6
	protected override void OnDisposeUnmanaged() { }
}

// Namespace: CriMana.Detail
public class RendererResourceAndroidH264Rgb : RendererResource // TypeDefIndex: 4045
{
	// Fields
	private const int RenderEventAction_ATTACH = 769;
	private int playerId; // 0x2C
	private int width; // 0x30
	private int height; // 0x34
	private int dispWidth; // 0x38
	private int dispHeight; // 0x3C
	private int alphaWidth; // 0x40
	private int alphaHeight; // 0x44
	private bool useUserShader; // 0x48
	private Vector4 movieTextureST; // 0x4C
	private Vector4 alphaTextureST; // 0x5C
	private Texture2D[] textures; // 0x70
	private IntPtr[] nativePtrs; // 0x78
	private bool needsUpdateTexture; // 0x80
	private bool needsToDetachInitTexture; // 0x81
	private bool areTexturesUpdated; // 0x82
	private bool isStoppingForSeek; // 0x83
	private bool isStartTriggered; // 0x84
	private uint nativeTextureId; // 0x88

	// Methods

	// RVA: 0x240C9C4 Offset: 0x240C9C4 VA: 0x240C9C4
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240E90C Offset: 0x240E90C VA: 0x240E90C Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x240E910 Offset: 0x240E910 VA: 0x240E910 Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x240E938 Offset: 0x240E938 VA: 0x240E938 Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x240E940 Offset: 0x240E940 VA: 0x240E940 Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x240E948 Offset: 0x240E948 VA: 0x240E948 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240EA9C Offset: 0x240EA9C VA: 0x240EA9C Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x240EAB4 Offset: 0x240EAB4 VA: 0x240EAB4 Slot: 18
	public override void OnPlayerStart() { }

	// RVA: 0x240EAC0 Offset: 0x240EAC0 VA: 0x240EAC0 Slot: 19
	public override bool ShouldSkipDestroyOnStopForSeek() { }

	// RVA: 0x240EAC8 Offset: 0x240EAC8 VA: 0x240EAC8
	private void forceUpdateMaterialTextures(Texture[] newTextures) { }

	// RVA: 0x240EC3C Offset: 0x240EC3C VA: 0x240EC3C Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x240ED38 Offset: 0x240ED38 VA: 0x240ED38 Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x240EE5C Offset: 0x240EE5C VA: 0x240EE5C Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x240F0E0 Offset: 0x240F0E0 VA: 0x240F0E0
	private void UpdateMovieTextureST(float[] texCoords, float dispWidth, float dispHeight) { }

	// RVA: 0x240F1F8 Offset: 0x240F1F8 VA: 0x240F1F8 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x240F720 Offset: 0x240F720 VA: 0x240F720
	public static bool IsSupported() { }

	// RVA: 0x240FA04 Offset: 0x240FA04 VA: 0x240FA04
	private static extern bool criManaUnity_IsMediaCodecSupported_ANDROID(int device_type) { }

	// RVA: 0x240FAA8 Offset: 0x240FAA8 VA: 0x240FAA8
	private static extern uint criManaUnity_MediaCodecCreateTexture_ANDROID() { }

	// RVA: 0x240FB34 Offset: 0x240FB34 VA: 0x240FB34
	private static extern void criManaUnity_MediaCodecDeleteTexture_ANDROID(uint oes_texture) { }

	// RVA: 0x240EC84 Offset: 0x240EC84 VA: 0x240EC84
	private static extern bool criManaUnityPlayer_MediaCodecAttachTexture_ANDROID(int player_id, uint oes_texture) { }

	// RVA: 0x240EDB0 Offset: 0x240EDB0 VA: 0x240EDB0
	private static extern void criManaUnityPlayer_MediaCodecDetachTexture_ANDROID(int player_id, uint oes_texture) { }
}

// Namespace: 
private struct RendererResourceAndroidH264Rgb.NativeTexture // TypeDefIndex: 4046
{
	// Fields
	public uint nativePtrRGB; // 0x0
	public uint nativePtrA; // 0x4
	public float[] texCoords; // 0x8
}

// Namespace: CriMana.Detail
public class RendererResourceAndroidSofdecPrimeYuv : RendererResource // TypeDefIndex: 4047
{
	// Fields
	private int width; // 0x2C
	private int height; // 0x30
	private int chromaWidth; // 0x34
	private int chromaHeight; // 0x38
	private int alphaWidth; // 0x3C
	private int alphaHeight; // 0x40
	private bool useUserShader; // 0x44
	private CodecType codecType; // 0x48
	private const TextureFormat format = 63;
	private const TextureFormat formatUV = 62;
	private Vector4 movieTextureST; // 0x4C
	private Vector4 movieChromaTextureST; // 0x5C
	private Vector4 movieAlphaTextureST; // 0x6C
	private Texture2D[] textures; // 0x80
	private int numImages; // 0x88
	private int numImagesForYUV; // 0x8C
	private IntPtr[] nativePtrs; // 0x90
	private RenderTexture[] renderTextures; // 0x98
	private int playerID; // 0xA0
	private bool areTexturesUpdated; // 0xA4
	private bool isFrameUpdated; // 0xA5
	private bool isStoppingForSeek; // 0xA6
	private bool isStartTriggered; // 0xA7

	// Methods

	// RVA: 0x240CD6C Offset: 0x240CD6C VA: 0x240CD6C
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x240FE28 Offset: 0x240FE28 VA: 0x240FE28 Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x240FE2C Offset: 0x240FE2C VA: 0x240FE2C Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x240FE60 Offset: 0x240FE60 VA: 0x240FE60 Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x240FE80 Offset: 0x240FE80 VA: 0x240FE80 Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x240FE88 Offset: 0x240FE88 VA: 0x240FE88 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x2410034 Offset: 0x2410034 VA: 0x2410034 Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x241048C Offset: 0x241048C VA: 0x241048C Slot: 18
	public override void OnPlayerStart() { }

	// RVA: 0x24102BC Offset: 0x24102BC VA: 0x24102BC
	private void forceUpdateMaterialTextures(Texture[] newTextures) { }

	// RVA: 0x2410498 Offset: 0x2410498 VA: 0x2410498 Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x24104C0 Offset: 0x24104C0 VA: 0x24104C0 Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x24105AC Offset: 0x24105AC VA: 0x24105AC Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x240FCF4 Offset: 0x240FCF4 VA: 0x240FCF4
	private void UpdateMovieTextureST(uint dispWidth, uint dispHeight) { }

	// RVA: 0x2410948 Offset: 0x2410948 VA: 0x2410948 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x240FBD0 Offset: 0x240FBD0 VA: 0x240FBD0
	private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma) { }
}

// Namespace: CriMana.Detail
public class RendererResourceAndroidSofdecPrimeYuvLegacyGles2 : RendererResource // TypeDefIndex: 4048
{
	// Fields
	private int width; // 0x2C
	private int height; // 0x30
	private int chromaWidth; // 0x34
	private int chromaHeight; // 0x38
	private int alphaWidth; // 0x3C
	private int alphaHeight; // 0x40
	private bool useUserShader; // 0x44
	private CodecType codecType; // 0x48
	private int movieWidth; // 0x4C
	private int movieHeight; // 0x50
	private const TextureFormat format = 1;
	private const TextureFormat formatUV = 62;
	private Vector4 movieTextureST; // 0x54
	private Vector4 movieChromaTextureST; // 0x64
	private Vector4 movieAlphaTextureST; // 0x74
	private Texture2D[][] textures; // 0x88
	private RenderTexture[] renderTextures; // 0x90
	private IntPtr[][] nativeTextures; // 0x98
	private int numImages; // 0xA0
	private int numImagesForYUV; // 0xA4
	private int numTextureSets; // 0xA8
	private int currentTextureSet; // 0xAC
	private int drawTextureSet; // 0xB0
	private int playerID; // 0xB4
	private bool isStoppingForSeek; // 0xB8

	// Methods

	// RVA: 0x240D198 Offset: 0x240D198 VA: 0x240D198
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x241100C Offset: 0x241100C VA: 0x241100C Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x2411010 Offset: 0x2411010 VA: 0x2411010 Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x2411098 Offset: 0x2411098 VA: 0x2411098 Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x24110A0 Offset: 0x24110A0 VA: 0x24110A0 Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x24110A8 Offset: 0x24110A8 VA: 0x24110A8 Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x24111DC Offset: 0x24111DC VA: 0x24111DC Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x24111F8 Offset: 0x24111F8 VA: 0x24111F8 Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x2411204 Offset: 0x2411204 VA: 0x2411204 Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x2411E58 Offset: 0x2411E58 VA: 0x2411E58 Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x2411D24 Offset: 0x2411D24 VA: 0x2411D24
	private void UpdateMovieTextureST(uint dispWidth, uint dispHeight) { }

	// RVA: 0x241226C Offset: 0x241226C VA: 0x241226C Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x2411C28 Offset: 0x2411C28 VA: 0x2411C28
	private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma) { }
}

// Namespace: CriMana.Detail
public class RendererResourceSofdecPrimeYuvRawData : RendererResource // TypeDefIndex: 4049
{
	// Fields
	private int width; // 0x2C
	private int height; // 0x30
	private int chromaWidth; // 0x34
	private int chromaHeight; // 0x38
	private bool useUserShader; // 0x3C
	private CodecType codecType; // 0x40
	private Vector4 movieTextureST; // 0x44
	private Vector4 movieChromaTextureST; // 0x54
	private Texture2D[][] textures; // 0x68
	private int currentTextureSet; // 0x70
	private int drawTextureSet; // 0x74
	private IntPtr[] nativePixels; // 0x78
	private int playerID; // 0x80
	private bool hasTextureUpdated; // 0x84
	private bool isTextureReady; // 0x85
	private bool hasRenderedNewFrame; // 0x86

	// Properties
	private static int NumTextureSets { get; }

	// Methods

	// RVA: 0x240D6D4 Offset: 0x240D6D4 VA: 0x240D6D4
	public void .ctor(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x2412AE8 Offset: 0x2412AE8 VA: 0x2412AE8
	private static int get_NumTextureSets() { }

	// RVA: 0x2412C88 Offset: 0x2412C88 VA: 0x2412C88 Slot: 7
	protected override void OnDisposeManaged() { }

	// RVA: 0x2412C8C Offset: 0x2412C8C VA: 0x2412C8C Slot: 8
	protected override void OnDisposeUnmanaged() { }

	// RVA: 0x2412CDC Offset: 0x2412CDC VA: 0x2412CDC Slot: 9
	public override bool IsPrepared() { }

	// RVA: 0x2412CE4 Offset: 0x2412CE4 VA: 0x2412CE4 Slot: 10
	public override bool ContinuePreparing() { }

	// RVA: 0x2412CEC Offset: 0x2412CEC VA: 0x2412CEC Slot: 15
	public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader) { }

	// RVA: 0x2412E24 Offset: 0x2412E24 VA: 0x2412E24 Slot: 17
	public override bool OnPlayerStopForSeek() { }

	// RVA: 0x2412E38 Offset: 0x2412E38 VA: 0x2412E38 Slot: 20
	public override bool HasRenderedNewFrame() { }

	// RVA: 0x2412E40 Offset: 0x2412E40 VA: 0x2412E40 Slot: 11
	public override void AttachToPlayer(int playerId) { }

	// RVA: 0x2412E4C Offset: 0x2412E4C VA: 0x2412E4C Slot: 12
	public override bool UpdateFrame(int playerId, FrameInfo frameInfo, ref bool frameDrop) { }

	// RVA: 0x2412EF0 Offset: 0x2412EF0 VA: 0x2412EF0 Slot: 13
	public override bool UpdateMaterial(Material material) { }

	// RVA: 0x2412BB4 Offset: 0x2412BB4 VA: 0x2412BB4
	private void UpdateMovieTextureST(uint dispWidth, uint dispHeight) { }

	// RVA: 0x2413284 Offset: 0x2413284 VA: 0x2413284 Slot: 14
	public override void UpdateTextures() { }

	// RVA: 0x2412AF0 Offset: 0x2412AF0 VA: 0x2412AF0
	private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma) { }
}

// Namespace: CriMana
public class Player : CriDisposable // TypeDefIndex: 4050
{
	// Fields
	private const int InvalidPlayerId = -1;
	private static Player updatingPlayer; // 0x0
	private int playerId; // 0x20
	private bool isDisposed; // 0x24
	private Player.Status internalrequiredStatus; // 0x28
	private Player.Status _nativeStatus; // 0x2C
	private Nullable<Player.Status> lastNativeStatus; // 0x30
	private Nullable<Player.Status> lastPlayerStatus; // 0x38
	private bool wasStopping; // 0x40
	private bool isPreparingForRendering; // 0x41
	private bool isNativeStartInvoked; // 0x42
	private bool isNativeInitialized; // 0x43
	private RendererResource rendererResource; // 0x48
	private MovieInfo _movieInfo; // 0x50
	private FrameInfo _frameInfo; // 0x58
	private bool isMovieInfoAvailable; // 0x60
	private bool isFrameInfoAvailable; // 0x61
	private Player.ShaderDispatchCallback _shaderDispatchCallback; // 0x68
	private bool enableSubtitle; // 0x70
	private int subtitleBufferSize; // 0x74
	private uint droppedFrameCount; // 0x78
	private CriAtomExPlayer _atomExPlayer; // 0x80
	private CriAtomEx3dSource _atomEx3Dsource; // 0x88
	private Player.TimerType _timerType; // 0x90
	private bool isStoppingForSeek; // 0x94
	public Player.CuePointCallback cuePointCallback; // 0x98
	public Player.StatusChangeCallback statusChangeCallback; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC21428 Offset: 0xC21428 VA: 0xC21428
	[DebuggerBrowsableAttribute] // RVA: 0xC21428 Offset: 0xC21428 VA: 0xC21428
	private Player.SubtitleChangeCallback OnSubtitleChanged; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xC21464 Offset: 0xC21464 VA: 0xC21464
	[DebuggerBrowsableAttribute] // RVA: 0xC21464 Offset: 0xC21464 VA: 0xC21464
	private bool <additiveMode>k__BackingField; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xC214A0 Offset: 0xC214A0 VA: 0xC214A0
	[DebuggerBrowsableAttribute] // RVA: 0xC214A0 Offset: 0xC214A0 VA: 0xC214A0
	private int <maxFrameDrop>k__BackingField; // 0xB4
	[CompilerGeneratedAttribute] // RVA: 0xC214DC Offset: 0xC214DC VA: 0xC214DC
	[DebuggerBrowsableAttribute] // RVA: 0xC214DC Offset: 0xC214DC VA: 0xC214DC
	private bool <applyTargetAlpha>k__BackingField; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC21518 Offset: 0xC21518 VA: 0xC21518
	[DebuggerBrowsableAttribute] // RVA: 0xC21518 Offset: 0xC21518 VA: 0xC21518
	private bool <uiRenderMode>k__BackingField; // 0xB9
	[CompilerGeneratedAttribute] // RVA: 0xC21554 Offset: 0xC21554 VA: 0xC21554
	[DebuggerBrowsableAttribute] // RVA: 0xC21554 Offset: 0xC21554 VA: 0xC21554
	private IntPtr <subtitleBuffer>k__BackingField; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xC21590 Offset: 0xC21590 VA: 0xC21590
	[DebuggerBrowsableAttribute] // RVA: 0xC21590 Offset: 0xC21590 VA: 0xC21590
	private int <subtitleSize>k__BackingField; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xC215CC Offset: 0xC215CC VA: 0xC215CC
	[DebuggerBrowsableAttribute] // RVA: 0xC215CC Offset: 0xC215CC VA: 0xC215CC
	private CriManaMoviePlayerHolder <playerHolder>k__BackingField; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xC21608 Offset: 0xC21608 VA: 0xC21608
	private static Player.CuePointCallbackFromNativeDelegate <>f__mg$cache0; // 0x8

	// Properties
	private Player.Status requiredStatus { get; set; }
	public bool additiveMode { get; set; }
	public int maxFrameDrop { get; set; }
	public bool applyTargetAlpha { get; set; }
	public bool uiRenderMode { get; set; }
	public bool isFrameAvailable { get; }
	public MovieInfo movieInfo { get; }
	public FrameInfo frameInfo { get; }
	public Player.Status status { get; }
	public Player.Status nativeStatus { get; }
	public int numberOfEntries { get; }
	public IntPtr subtitleBuffer { get; set; }
	public int subtitleSize { get; set; }
	public CriAtomExPlayer atomExPlayer { get; }
	public CriAtomEx3dSource atomEx3DsourceForAmbisonics { get; }
	public Player.TimerType timerType { get; }
	public CriManaMoviePlayerHolder playerHolder { get; set; }
	public bool isAlive { get; }

	// Methods

	// RVA: 0x241397C Offset: 0x241397C VA: 0x241397C
	public void .ctor() { }

	// RVA: 0x2413B7C Offset: 0x2413B7C VA: 0x2413B7C
	public void .ctor(bool advanced_audio_mode, bool ambisonics_mode, uint max_path_length) { }

	// RVA: 0x2413F48 Offset: 0x2413F48 VA: 0x2413F48
	private Player.Status get_requiredStatus() { }

	// RVA: 0x2413F50 Offset: 0x2413F50 VA: 0x2413F50
	private void set_requiredStatus(Player.Status value) { }

	// RVA: 0x241407C Offset: 0x241407C VA: 0x241407C
	public void add_OnSubtitleChanged(Player.SubtitleChangeCallback value) { }

	// RVA: 0x2414168 Offset: 0x2414168 VA: 0x2414168
	public void remove_OnSubtitleChanged(Player.SubtitleChangeCallback value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23C94 Offset: 0xC23C94 VA: 0xC23C94
	// RVA: 0x2414254 Offset: 0x2414254 VA: 0x2414254
	public bool get_additiveMode() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23CA4 Offset: 0xC23CA4 VA: 0xC23CA4
	// RVA: 0x2413B68 Offset: 0x2413B68 VA: 0x2413B68
	public void set_additiveMode(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23CB4 Offset: 0xC23CB4 VA: 0xC23CB4
	// RVA: 0x241425C Offset: 0x241425C VA: 0x241425C
	public int get_maxFrameDrop() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23CC4 Offset: 0xC23CC4 VA: 0xC23CC4
	// RVA: 0x2413B74 Offset: 0x2413B74 VA: 0x2413B74
	public void set_maxFrameDrop(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23CD4 Offset: 0xC23CD4 VA: 0xC23CD4
	// RVA: 0x2414264 Offset: 0x2414264 VA: 0x2414264
	public bool get_applyTargetAlpha() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23CE4 Offset: 0xC23CE4 VA: 0xC23CE4
	// RVA: 0x241426C Offset: 0x241426C VA: 0x241426C
	public void set_applyTargetAlpha(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23CF4 Offset: 0xC23CF4 VA: 0xC23CF4
	// RVA: 0x2414278 Offset: 0x2414278 VA: 0x2414278
	public bool get_uiRenderMode() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D04 Offset: 0xC23D04 VA: 0xC23D04
	// RVA: 0x2414280 Offset: 0x2414280 VA: 0x2414280
	public void set_uiRenderMode(bool value) { }

	// RVA: 0x241428C Offset: 0x241428C VA: 0x241428C
	public bool get_isFrameAvailable() { }

	// RVA: 0x2414294 Offset: 0x2414294 VA: 0x2414294
	public MovieInfo get_movieInfo() { }

	// RVA: 0x24142AC Offset: 0x24142AC VA: 0x24142AC
	public FrameInfo get_frameInfo() { }

	// RVA: 0x24142C4 Offset: 0x24142C4 VA: 0x24142C4
	public Player.Status get_status() { }

	// RVA: 0x2414350 Offset: 0x2414350 VA: 0x2414350
	public Player.Status get_nativeStatus() { }

	// RVA: 0x2414358 Offset: 0x2414358 VA: 0x2414358
	public int get_numberOfEntries() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D14 Offset: 0xC23D14 VA: 0xC23D14
	// RVA: 0x241445C Offset: 0x241445C VA: 0x241445C
	public IntPtr get_subtitleBuffer() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D24 Offset: 0xC23D24 VA: 0xC23D24
	// RVA: 0x2414464 Offset: 0x2414464 VA: 0x2414464
	private void set_subtitleBuffer(IntPtr value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D34 Offset: 0xC23D34 VA: 0xC23D34
	// RVA: 0x241446C Offset: 0x241446C VA: 0x241446C
	public int get_subtitleSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D44 Offset: 0xC23D44 VA: 0xC23D44
	// RVA: 0x2414474 Offset: 0x2414474 VA: 0x2414474
	private void set_subtitleSize(int value) { }

	// RVA: 0x241447C Offset: 0x241447C VA: 0x241447C
	public CriAtomExPlayer get_atomExPlayer() { }

	// RVA: 0x2414484 Offset: 0x2414484 VA: 0x2414484
	public CriAtomEx3dSource get_atomEx3DsourceForAmbisonics() { }

	// RVA: 0x241448C Offset: 0x241448C VA: 0x241448C
	public Player.TimerType get_timerType() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D54 Offset: 0xC23D54 VA: 0xC23D54
	// RVA: 0x2414494 Offset: 0x2414494 VA: 0x2414494
	public CriManaMoviePlayerHolder get_playerHolder() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23D64 Offset: 0xC23D64 VA: 0xC23D64
	// RVA: 0x241449C Offset: 0x241449C VA: 0x241449C
	public void set_playerHolder(CriManaMoviePlayerHolder value) { }

	// RVA: 0x24144A4 Offset: 0x24144A4 VA: 0x24144A4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2414740 Offset: 0x2414740 VA: 0x2414740 Slot: 5
	public override void Dispose() { }

	// RVA: 0x241476C Offset: 0x241476C VA: 0x241476C
	public void CreateRendererResource(int width, int height, bool alpha) { }

	// RVA: 0x2414D0C Offset: 0x2414D0C VA: 0x2414D0C
	public void DisposeRendererResource() { }

	// RVA: 0x2414D38 Offset: 0x2414D38 VA: 0x2414D38
	public void Prepare() { }

	// RVA: 0x24150B8 Offset: 0x24150B8 VA: 0x24150B8
	public void PrepareForRendering() { }

	// RVA: 0x24151CC Offset: 0x24151CC VA: 0x24151CC
	public void Start() { }

	// RVA: 0x2415250 Offset: 0x2415250 VA: 0x2415250
	public void Stop() { }

	// RVA: 0x24153A0 Offset: 0x24153A0 VA: 0x24153A0
	public void StopForSeek() { }

	// RVA: 0x2415124 Offset: 0x2415124 VA: 0x2415124
	public void Pause(bool sw) { }

	// RVA: 0x2415554 Offset: 0x2415554 VA: 0x2415554
	public bool IsPaused() { }

	// RVA: 0x2415660 Offset: 0x2415660 VA: 0x2415660
	public bool SetFile(CriFsBinder binder, string moviePath, Player.SetMode setMode = 0) { }

	// RVA: 0x241597C Offset: 0x241597C VA: 0x241597C
	public bool SetData(IntPtr data, long dataSize, Player.SetMode setMode = 0) { }

	[ObsoleteAttribute] // RVA: 0xC23D74 Offset: 0xC23D74 VA: 0xC23D74
	// RVA: 0x2415BCC Offset: 0x2415BCC VA: 0x2415BCC
	public bool SetData(byte[] data, long datasize, Player.SetMode setMode = 0) { }

	// RVA: 0x2415E2C Offset: 0x2415E2C VA: 0x2415E2C
	public bool SetContentId(CriFsBinder binder, int contentId, Player.SetMode setMode = 0) { }

	// RVA: 0x24160C0 Offset: 0x24160C0 VA: 0x24160C0
	public bool SetFileRange(string filePath, ulong offset, long range, Player.SetMode setMode = 0) { }

	// RVA: 0x2416360 Offset: 0x2416360 VA: 0x2416360
	public void Loop(bool sw) { }

	// RVA: 0x2416488 Offset: 0x2416488 VA: 0x2416488
	public void SetMasterTimerType(Player.TimerType timerType) { }

	// RVA: 0x24165B0 Offset: 0x24165B0 VA: 0x24165B0
	public void SetSeekPosition(int frameNumber) { }

	// RVA: 0x24166D4 Offset: 0x24166D4 VA: 0x24166D4
	public void SetMovieEventSyncMode(Player.MovieEventSyncMode mode) { }

	// RVA: 0x24167F8 Offset: 0x24167F8 VA: 0x24167F8
	public void SetSpeed(float speed) { }

	// RVA: 0x241691C Offset: 0x241691C VA: 0x241691C
	public void SetMaxPictureDataSize(uint maxDataSize) { }

	// RVA: 0x2416A40 Offset: 0x2416A40 VA: 0x2416A40
	public void SetBufferingTime(float sec) { }

	// RVA: 0x2416B64 Offset: 0x2416B64 VA: 0x2416B64
	public void SetMinBufferSize(int min_buffer_size) { }

	// RVA: 0x2416C88 Offset: 0x2416C88 VA: 0x2416C88
	public void SetAudioTrack(int track) { }

	// RVA: 0x2416DAC Offset: 0x2416DAC VA: 0x2416DAC
	public void SetAudioTrack(Player.AudioTrack track) { }

	// RVA: 0x2416E6C Offset: 0x2416E6C VA: 0x2416E6C
	public void SetSubAudioTrack(int track) { }

	// RVA: 0x2416F90 Offset: 0x2416F90 VA: 0x2416F90
	public void SetSubAudioTrack(Player.AudioTrack track) { }

	// RVA: 0x2417050 Offset: 0x2417050 VA: 0x2417050
	public void SetExtraAudioTrack(int track) { }

	// RVA: 0x2417174 Offset: 0x2417174 VA: 0x2417174
	public void SetExtraAudioTrack(Player.AudioTrack track) { }

	// RVA: 0x2417234 Offset: 0x2417234 VA: 0x2417234
	public void SetVolume(float volume) { }

	// RVA: 0x2417358 Offset: 0x2417358 VA: 0x2417358
	public float GetVolume() { }

	// RVA: 0x241745C Offset: 0x241745C VA: 0x241745C
	public void SetSubAudioVolume(float volume) { }

	// RVA: 0x2417580 Offset: 0x2417580 VA: 0x2417580
	public float GetSubAudioVolume() { }

	// RVA: 0x2417684 Offset: 0x2417684 VA: 0x2417684
	public void SetExtraAudioVolume(float volume) { }

	// RVA: 0x24177A8 Offset: 0x24177A8 VA: 0x24177A8
	public float GetExtraAudioVolume() { }

	// RVA: 0x24178AC Offset: 0x24178AC VA: 0x24178AC
	public void SetBusSendLevel(string bus_name, float level) { }

	// RVA: 0x2417A04 Offset: 0x2417A04 VA: 0x2417A04
	public void SetSubAudioBusSendLevel(string bus_name, float volume) { }

	// RVA: 0x2417B5C Offset: 0x2417B5C VA: 0x2417B5C
	public void SetExtraAudioBusSendLevel(string bus_name, float volume) { }

	// RVA: 0x2417CB4 Offset: 0x2417CB4 VA: 0x2417CB4
	public void SetSubtitleChannel(int channel) { }

	// RVA: 0x2417FF4 Offset: 0x2417FF4 VA: 0x2417FF4
	public void SetShaderDispatchCallback(Player.ShaderDispatchCallback shaderDispatchCallback) { }

	// RVA: 0x2417FFC Offset: 0x2417FFC VA: 0x2417FFC
	public long GetTime() { }

	// RVA: 0x2418100 Offset: 0x2418100 VA: 0x2418100
