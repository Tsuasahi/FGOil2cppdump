
	// RVA: -1 Offset: -1 Slot: 6
	public abstract byte[] GetFinalHash(byte hashAlgorithm);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsKeyExchange // TypeDefIndex: 4986
{
	// Properties
	public abstract bool RequiresServerKeyExchange { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(TlsContext context);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void SkipServerCredentials();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void ProcessServerCredentials(TlsCredentials serverCredentials);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void ProcessServerCertificate(Certificate serverCertificate);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_RequiresServerKeyExchange();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] GenerateServerKeyExchange();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void SkipServerKeyExchange();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ProcessServerKeyExchange(Stream input);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void ValidateCertificateRequest(CertificateRequest certificateRequest);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void SkipClientCredentials();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void ProcessClientCredentials(TlsCredentials clientCredentials);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void ProcessClientCertificate(Certificate clientCertificate);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void GenerateClientKeyExchange(Stream output);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void ProcessClientKeyExchange(Stream input);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract byte[] GeneratePremasterSecret();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsMac // TypeDefIndex: 4987
{
	// Fields
	protected readonly TlsContext context; // 0x10
	protected readonly byte[] secret; // 0x18
	protected readonly IMac mac; // 0x20
	protected readonly int digestBlockSize; // 0x28
	protected readonly int digestOverhead; // 0x2C
	protected readonly int macLength; // 0x30

	// Properties
	public virtual byte[] MacSecret { get; }
	public virtual int Size { get; }

	// Methods

	// RVA: 0x1CF6AD0 Offset: 0x1CF6AD0 VA: 0x1CF6AD0
	public void .ctor(TlsContext context, IDigest digest, byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x1D061C0 Offset: 0x1D061C0 VA: 0x1D061C0 Slot: 4
	public virtual byte[] get_MacSecret() { }

	// RVA: 0x1D061C8 Offset: 0x1D061C8 VA: 0x1D061C8 Slot: 5
	public virtual int get_Size() { }

	// RVA: 0x1D061D0 Offset: 0x1D061D0 VA: 0x1D061D0 Slot: 6
	public virtual byte[] CalculateMac(long seqNo, byte type, byte[] message, int offset, int length) { }

	// RVA: 0x1D06514 Offset: 0x1D06514 VA: 0x1D06514 Slot: 7
	public virtual byte[] CalculateMacConstantTime(long seqNo, byte type, byte[] message, int offset, int length, int fullLength, byte[] dummyData) { }

	// RVA: 0x1D067E8 Offset: 0x1D067E8 VA: 0x1D067E8 Slot: 8
	protected virtual int GetDigestBlockCount(int inputLength) { }

	// RVA: 0x1D067F8 Offset: 0x1D067F8 VA: 0x1D067F8 Slot: 9
	protected virtual byte[] Truncate(byte[] bs) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsNullCipher : TlsCipher // TypeDefIndex: 4988
{
	// Fields
	protected readonly TlsContext context; // 0x10
	protected readonly TlsMac writeMac; // 0x18
	protected readonly TlsMac readMac; // 0x20

	// Methods

	// RVA: 0x1CF1ADC Offset: 0x1CF1ADC VA: 0x1CF1ADC
	public void .ctor(TlsContext context) { }

	// RVA: 0x1CEC820 Offset: 0x1CEC820 VA: 0x1CEC820
	public void .ctor(TlsContext context, IDigest clientWriteDigest, IDigest serverWriteDigest) { }

	// RVA: 0x1D06848 Offset: 0x1D06848 VA: 0x1D06848 Slot: 7
	public virtual int GetPlaintextLimit(int ciphertextLimit) { }

	// RVA: 0x1D06880 Offset: 0x1D06880 VA: 0x1D06880 Slot: 8
	public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len) { }

	// RVA: 0x1D069AC Offset: 0x1D069AC VA: 0x1D069AC Slot: 9
	public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsNullCompression : TlsCompression // TypeDefIndex: 4989
{
	// Methods

	// RVA: 0x1CF19BC Offset: 0x1CF19BC VA: 0x1CF19BC
	public void .ctor() { }

	// RVA: 0x1D06B04 Offset: 0x1D06B04 VA: 0x1D06B04 Slot: 6
	public virtual Stream Compress(Stream output) { }

	// RVA: 0x1D06B0C Offset: 0x1D06B0C VA: 0x1D06B0C Slot: 7
	public virtual Stream Decompress(Stream output) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsPeer // TypeDefIndex: 4990
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool ShouldUseGmtUnixTime();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void NotifySecureRenegotiation(bool secureRenegotiation);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract TlsCompression GetCompression();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract TlsCipher GetCipher();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void NotifyAlertRaised(byte alertLevel, byte alertDescription, string message, Exception cause);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void NotifyAlertReceived(byte alertLevel, byte alertDescription);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void NotifyHandshakeComplete();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class TlsProtocol // TypeDefIndex: 4991
{
	// Fields
	public static readonly string TLS_ERROR_MESSAGE; // 0x0
	protected const short CS_START = 0;
	protected const short CS_CLIENT_HELLO = 1;
	protected const short CS_SERVER_HELLO = 2;
	protected const short CS_SERVER_SUPPLEMENTAL_DATA = 3;
	protected const short CS_SERVER_CERTIFICATE = 4;
	protected const short CS_CERTIFICATE_STATUS = 5;
	protected const short CS_SERVER_KEY_EXCHANGE = 6;
	protected const short CS_CERTIFICATE_REQUEST = 7;
	protected const short CS_SERVER_HELLO_DONE = 8;
	protected const short CS_CLIENT_SUPPLEMENTAL_DATA = 9;
	protected const short CS_CLIENT_CERTIFICATE = 10;
	protected const short CS_CLIENT_KEY_EXCHANGE = 11;
	protected const short CS_CERTIFICATE_VERIFY = 12;
	protected const short CS_CLIENT_FINISHED = 13;
	protected const short CS_SERVER_SESSION_TICKET = 14;
	protected const short CS_SERVER_FINISHED = 15;
	protected const short CS_END = 16;
	protected const short ADS_MODE_1_Nsub1 = 0;
	protected const short ADS_MODE_0_N = 1;
	protected const short ADS_MODE_0_N_FIRSTONLY = 2;
	private ByteQueue mApplicationDataQueue; // 0x10
	private ByteQueue mAlertQueue; // 0x18
	private ByteQueue mHandshakeQueue; // 0x20
	internal RecordStream mRecordStream; // 0x28
	protected SecureRandom mSecureRandom; // 0x30
	private TlsStream mTlsStream; // 0x38
	private bool mClosed; // 0x40
	private bool mFailedWithError; // 0x41
	private bool mAppDataReady; // 0x42
	private bool mAppDataSplitEnabled; // 0x43
	private int mAppDataSplitMode; // 0x44
	private byte[] mExpectedVerifyData; // 0x48
	protected TlsSession mTlsSession; // 0x50
	protected SessionParameters mSessionParameters; // 0x58
	protected SecurityParameters mSecurityParameters; // 0x60
	protected Certificate mPeerCertificate; // 0x68
	protected int[] mOfferedCipherSuites; // 0x70
	protected byte[] mOfferedCompressionMethods; // 0x78
	protected IDictionary mClientExtensions; // 0x80
	protected IDictionary mServerExtensions; // 0x88
	protected short mConnectionState; // 0x90
	protected bool mResumedSession; // 0x92
	protected bool mReceivedChangeCipherSpec; // 0x93
	protected bool mSecureRenegotiation; // 0x94
	protected bool mAllowCertificateStatus; // 0x95
	protected bool mExpectSessionTicket; // 0x96
	protected bool mBlocking; // 0x97
	protected ByteQueueStream mInputBuffers; // 0x98
	protected ByteQueueStream mOutputBuffer; // 0xA0

	// Properties
	protected abstract TlsContext Context { get; }
	internal abstract AbstractTlsContext ContextAdmin { get; }
	protected abstract TlsPeer Peer { get; }
	public virtual Stream Stream { get; }
	public virtual bool IsClosed { get; }

	// Methods

	// RVA: 0x1CF7E58 Offset: 0x1CF7E58 VA: 0x1CF7E58
	public void .ctor(Stream stream, SecureRandom secureRandom) { }

	// RVA: 0x1CF7EF4 Offset: 0x1CF7EF4 VA: 0x1CF7EF4
	public void .ctor(Stream input, Stream output, SecureRandom secureRandom) { }

	// RVA: 0x1CF805C Offset: 0x1CF805C VA: 0x1CF805C
	public void .ctor(SecureRandom secureRandom) { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract TlsContext get_Context();

	// RVA: -1 Offset: -1 Slot: 5
	internal abstract AbstractTlsContext get_ContextAdmin();

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract TlsPeer get_Peer();

	// RVA: 0x1D06B14 Offset: 0x1D06B14 VA: 0x1D06B14 Slot: 7
	protected virtual void HandleChangeCipherSpecMessage() { }

	// RVA: -1 Offset: -1 Slot: 8
	protected abstract void HandleHandshakeMessage(byte type, byte[] buf);

	// RVA: 0x1D06B18 Offset: 0x1D06B18 VA: 0x1D06B18 Slot: 9
	protected virtual void HandleWarningMessage(byte description) { }

	// RVA: 0x1D06B1C Offset: 0x1D06B1C VA: 0x1D06B1C Slot: 10
	protected virtual void ApplyMaxFragmentLengthExtension() { }

	// RVA: 0x1D06C1C Offset: 0x1D06C1C VA: 0x1D06C1C Slot: 11
	protected virtual void CheckReceivedChangeCipherSpec(bool expected) { }

	// RVA: 0x1CF8708 Offset: 0x1CF8708 VA: 0x1CF8708 Slot: 12
	protected virtual void CleanupHandshake() { }

	// RVA: 0x1D06CB4 Offset: 0x1D06CB4 VA: 0x1D06CB4 Slot: 13
	protected virtual void BlockForHandshake() { }

	// RVA: 0x1D06D00 Offset: 0x1D06D00 VA: 0x1D06D00 Slot: 14
	protected virtual void CompleteHandshake() { }

	// RVA: 0x1CF1FD0 Offset: 0x1CF1FD0 VA: 0x1CF1FD0
	protected internal void ProcessRecord(byte protocol, byte[] buf, int offset, int len) { }

	// RVA: 0x1D0753C Offset: 0x1D0753C VA: 0x1D0753C
	private void ProcessHandshake() { }

	// RVA: 0x1D073A0 Offset: 0x1D073A0 VA: 0x1D073A0
	private void ProcessApplicationData() { }

	// RVA: 0x1D07148 Offset: 0x1D07148 VA: 0x1D07148
	private void ProcessAlert() { }

	// RVA: 0x1D073A4 Offset: 0x1D073A4 VA: 0x1D073A4
	private void ProcessChangeCipherSpec(byte[] buf, int off, int len) { }

	// RVA: 0x1D07894 Offset: 0x1D07894 VA: 0x1D07894 Slot: 15
	protected internal virtual int ApplicationDataAvailable() { }

	// RVA: 0x1D078C4 Offset: 0x1D078C4 VA: 0x1D078C4 Slot: 16
	protected internal virtual int ReadApplicationData(byte[] buf, int offset, int len) { }

	// RVA: 0x1D07A48 Offset: 0x1D07A48 VA: 0x1D07A48 Slot: 17
	protected virtual void SafeReadRecord() { }

	// RVA: 0x1D07C20 Offset: 0x1D07C20 VA: 0x1D07C20 Slot: 18
	protected virtual void SafeWriteRecord(byte type, byte[] buf, int offset, int len) { }

	// RVA: 0x1D07DD8 Offset: 0x1D07DD8 VA: 0x1D07DD8 Slot: 19
	protected internal virtual void WriteData(byte[] buf, int offset, int len) { }

	// RVA: 0x1D0800C Offset: 0x1D0800C VA: 0x1D0800C Slot: 20
	protected virtual void SetAppDataSplitMode(int appDataSplitMode) { }

	// RVA: 0x1D08110 Offset: 0x1D08110 VA: 0x1D08110 Slot: 21
	protected virtual void WriteHandshakeMessage(byte[] buf, int off, int len) { }

	// RVA: 0x1D081B8 Offset: 0x1D081B8 VA: 0x1D081B8 Slot: 22
	public virtual Stream get_Stream() { }

	// RVA: 0x1D08248 Offset: 0x1D08248 VA: 0x1D08248 Slot: 23
	public virtual void OfferInput(byte[] input) { }

	// RVA: 0x1D0842C Offset: 0x1D0842C VA: 0x1D0842C Slot: 24
	public virtual int GetAvailableInputBytes() { }

	// RVA: 0x1D084C8 Offset: 0x1D084C8 VA: 0x1D084C8 Slot: 25
	public virtual int ReadInput(byte[] buffer, int offset, int length) { }

	// RVA: 0x1D085B0 Offset: 0x1D085B0 VA: 0x1D085B0 Slot: 26
	public virtual void OfferOutput(byte[] buffer, int offset, int length) { }

	// RVA: 0x1D086AC Offset: 0x1D086AC VA: 0x1D086AC Slot: 27
	public virtual int GetAvailableOutputBytes() { }

	// RVA: 0x1D08758 Offset: 0x1D08758 VA: 0x1D08758 Slot: 28
	public virtual int ReadOutput(byte[] buffer, int offset, int length) { }

	// RVA: 0x1D0882C Offset: 0x1D0882C VA: 0x1D0882C Slot: 29
	protected virtual void FailWithError(byte alertLevel, byte alertDescription, string message, Exception cause) { }

	// RVA: 0x1D08988 Offset: 0x1D08988 VA: 0x1D08988 Slot: 30
	protected virtual void InvalidateSession() { }

	// RVA: 0x1D08A60 Offset: 0x1D08A60 VA: 0x1D08A60 Slot: 31
	protected virtual void ProcessFinishedMessage(MemoryStream buf) { }

	// RVA: 0x1D08B80 Offset: 0x1D08B80 VA: 0x1D08B80 Slot: 32
	protected virtual void RaiseAlert(byte alertLevel, byte alertDescription, string message, Exception cause) { }

	// RVA: 0x1D08CF4 Offset: 0x1D08CF4 VA: 0x1D08CF4 Slot: 33
	protected virtual void RaiseWarning(byte alertDescription, string message) { }

	// RVA: 0x1D08D1C Offset: 0x1D08D1C VA: 0x1D08D1C Slot: 34
	protected virtual void SendCertificateMessage(Certificate certificate) { }

	// RVA: 0x1D08FD0 Offset: 0x1D08FD0 VA: 0x1D08FD0 Slot: 35
	protected virtual void SendChangeCipherSpecMessage() { }

	// RVA: 0x1D09090 Offset: 0x1D09090 VA: 0x1D09090 Slot: 36
	protected virtual void SendFinishedMessage() { }

	// RVA: 0x1D091F0 Offset: 0x1D091F0 VA: 0x1D091F0 Slot: 37
	protected virtual void SendSupplementalDataMessage(IList supplementalData) { }

	// RVA: 0x1D096C4 Offset: 0x1D096C4 VA: 0x1D096C4 Slot: 38
	protected virtual byte[] CreateVerifyData(bool isServer) { }

	// RVA: 0x1D09830 Offset: 0x1D09830 VA: 0x1D09830 Slot: 39
	public virtual void Close() { }

	// RVA: 0x1D09844 Offset: 0x1D09844 VA: 0x1D09844 Slot: 40
	protected virtual void HandleClose(bool user_canceled) { }

	// RVA: 0x1D09908 Offset: 0x1D09908 VA: 0x1D09908 Slot: 41
	protected internal virtual void Flush() { }

	// RVA: 0x1D09940 Offset: 0x1D09940 VA: 0x1D09940 Slot: 42
	public virtual bool get_IsClosed() { }

	// RVA: 0x1D09964 Offset: 0x1D09964 VA: 0x1D09964 Slot: 43
	protected virtual short ProcessMaxFragmentLengthExtension(IDictionary clientExtensions, IDictionary serverExtensions, byte alertDescription) { }

	// RVA: 0x1D09A38 Offset: 0x1D09A38 VA: 0x1D09A38 Slot: 44
	protected virtual void RefuseRenegotiation() { }

	// RVA: 0x1CF9C50 Offset: 0x1CF9C50 VA: 0x1CF9C50
	protected internal static void AssertEmpty(MemoryStream buf) { }

	// RVA: 0x1CF85C0 Offset: 0x1CF85C0 VA: 0x1CF85C0
	protected internal static byte[] CreateRandomBlock(bool useGmtUnixTime, IRandomGenerator randomGenerator) { }

	// RVA: 0x1CFB4F8 Offset: 0x1CFB4F8 VA: 0x1CFB4F8
	protected internal static byte[] CreateRenegotiationInfo(byte[] renegotiated_connection) { }

	// RVA: 0x1CFA0E8 Offset: 0x1CFA0E8 VA: 0x1CFA0E8
	protected internal static void EstablishMasterSecret(TlsContext context, TlsKeyExchange keyExchange) { }

	// RVA: 0x1CF9F38 Offset: 0x1CF9F38 VA: 0x1CF9F38
	protected internal static byte[] GetCurrentPrfHash(TlsContext context, TlsHandshakeHash handshakeHash, byte[] sslSender) { }

	// RVA: 0x1CF43F8 Offset: 0x1CF43F8 VA: 0x1CF43F8
	protected internal static IDictionary ReadExtensions(MemoryStream input) { }

	// RVA: 0x1CF9D0C Offset: 0x1CF9D0C VA: 0x1CF9D0C
	protected internal static IList ReadSupplementalDataMessage(MemoryStream input) { }

	// RVA: 0x1CF4A20 Offset: 0x1CF4A20 VA: 0x1CF4A20
	protected internal static void WriteExtensions(Stream output, IDictionary extensions) { }

	// RVA: 0x1D09B18 Offset: 0x1D09B18 VA: 0x1D09B18
	protected internal static void WriteSelectedExtensions(Stream output, IDictionary extensions, bool selectEmpty) { }

	// RVA: 0x1D092A0 Offset: 0x1D092A0 VA: 0x1D092A0
	protected internal static void WriteSupplementalData(Stream output, IList supplementalData) { }

	// RVA: 0x1CFB6D4 Offset: 0x1CFB6D4 VA: 0x1CFB6D4
	protected internal static int GetPrfAlgorithm(TlsContext context, int ciphersuite) { }

	// RVA: 0x1D0A048 Offset: 0x1D0A048 VA: 0x1D0A048
	private static void .cctor() { }
}

// Namespace: 
internal class TlsProtocol.HandshakeMessage : MemoryStream // TypeDefIndex: 4992
{
	// Methods

	// RVA: 0x1E46EC0 Offset: 0x1E46EC0 VA: 0x1E46EC0
	internal void .ctor(byte handshakeType) { }

	// RVA: 0x1E46EC8 Offset: 0x1E46EC8 VA: 0x1E46EC8
	internal void .ctor(byte handshakeType, int length) { }

	// RVA: 0x1E4705C Offset: 0x1E4705C VA: 0x1E4705C
	internal void Write(byte[] data) { }

	// RVA: 0x1E470A4 Offset: 0x1E470A4 VA: 0x1E470A4
	internal void WriteToRecordStream(TlsProtocol protocol) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsRsaKeyExchange : AbstractTlsKeyExchange // TypeDefIndex: 4993
{
	// Fields
	protected AsymmetricKeyParameter mServerPublicKey; // 0x28
	protected RsaKeyParameters mRsaServerPublicKey; // 0x30
	protected TlsEncryptionCredentials mServerCredentials; // 0x38
	protected byte[] mPremasterSecret; // 0x40

	// Methods

	// RVA: 0x1E47274 Offset: 0x1E47274 VA: 0x1E47274
	public void .ctor(IList supportedSignatureAlgorithms) { }

	// RVA: 0x1E47288 Offset: 0x1E47288 VA: 0x1E47288 Slot: 21
	public override void SkipServerCredentials() { }

	// RVA: 0x1E472F4 Offset: 0x1E472F4 VA: 0x1E472F4 Slot: 23
	public override void ProcessServerCredentials(TlsCredentials serverCredentials) { }

	// RVA: 0x1E4748C Offset: 0x1E4748C VA: 0x1E4748C Slot: 22
	public override void ProcessServerCertificate(Certificate serverCertificate) { }

	// RVA: 0x1E4787C Offset: 0x1E4787C VA: 0x1E4787C Slot: 28
	public override void ValidateCertificateRequest(CertificateRequest certificateRequest) { }

	// RVA: 0x1E47984 Offset: 0x1E47984 VA: 0x1E47984 Slot: 30
	public override void ProcessClientCredentials(TlsCredentials clientCredentials) { }

	// RVA: 0x1E47A18 Offset: 0x1E47A18 VA: 0x1E47A18 Slot: 32
	public override void GenerateClientKeyExchange(Stream output) { }

	// RVA: 0x1E47E74 Offset: 0x1E47E74 VA: 0x1E47E74 Slot: 33
	public override void ProcessClientKeyExchange(Stream input) { }

	// RVA: 0x1E48100 Offset: 0x1E48100 VA: 0x1E48100 Slot: 34
	public override byte[] GeneratePremasterSecret() { }

	// RVA: 0x1E48188 Offset: 0x1E48188 VA: 0x1E48188 Slot: 35
	protected virtual RsaKeyParameters ValidateRsaPublicKey(RsaKeyParameters key) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsRsaSigner : AbstractTlsSigner // TypeDefIndex: 4994
{
	// Methods

	// RVA: 0x1E48248 Offset: 0x1E48248 VA: 0x1E48248
	public void .ctor() { }

	// RVA: 0x1E48250 Offset: 0x1E48250 VA: 0x1E48250 Slot: 16
	public override byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash) { }

	// RVA: 0x1E48484 Offset: 0x1E48484 VA: 0x1E48484 Slot: 18
	public override bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash) { }

	// RVA: 0x1E48618 Offset: 0x1E48618 VA: 0x1E48618 Slot: 20
	public override ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey) { }

	// RVA: 0x1E48738 Offset: 0x1E48738 VA: 0x1E48738 Slot: 22
	public override ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey) { }

	// RVA: 0x1E48758 Offset: 0x1E48758 VA: 0x1E48758 Slot: 23
	public override bool IsValidPublicKey(AsymmetricKeyParameter publicKey) { }

	// RVA: 0x1E487EC Offset: 0x1E487EC VA: 0x1E487EC Slot: 24
	protected virtual ISigner MakeSigner(SignatureAndHashAlgorithm algorithm, bool raw, bool forSigning, ICipherParameters cp) { }

	// RVA: 0x1E48EC8 Offset: 0x1E48EC8 VA: 0x1E48EC8 Slot: 25
	protected virtual IAsymmetricBlockCipher CreateRsaImpl() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class TlsRsaUtilities // TypeDefIndex: 4995
{
	// Methods

	// RVA: 0x1E48F44 Offset: 0x1E48F44 VA: 0x1E48F44
	protected void .ctor() { }

	// RVA: 0x1E47A50 Offset: 0x1E47A50 VA: 0x1E47A50
	public static byte[] GenerateEncryptedPreMasterSecret(TlsContext context, RsaKeyParameters rsaServerPublicKey, Stream output) { }

	// RVA: 0x1E490D4 Offset: 0x1E490D4 VA: 0x1E490D4
	public static byte[] SafeDecryptPreMasterSecret(TlsContext context, RsaKeyParameters rsaServerPrivateKey, byte[] encryptedPreMasterSecret) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsServer : TlsPeer // TypeDefIndex: 4996
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(TlsServerContext context);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void NotifyClientVersion(ProtocolVersion clientVersion);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void NotifyFallback(bool isFallback);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void NotifyOfferedCipherSuites(int[] offeredCipherSuites);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void NotifyOfferedCompressionMethods(byte[] offeredCompressionMethods);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void ProcessClientExtensions(IDictionary clientExtensions);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract ProtocolVersion GetServerVersion();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract int GetSelectedCipherSuite();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract byte GetSelectedCompressionMethod();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract IDictionary GetServerExtensions();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract IList GetServerSupplementalData();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract TlsCredentials GetCredentials();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract CertificateStatus GetCertificateStatus();

	// RVA: -1 Offset: -1 Slot: 13
	public abstract TlsKeyExchange GetKeyExchange();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract CertificateRequest GetCertificateRequest();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void ProcessClientSupplementalData(IList clientSupplementalData);

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void NotifyClientCertificate(Certificate clientCertificate);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract NewSessionTicket GetNewSessionTicket();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsServerContext : TlsContext // TypeDefIndex: 4997
{}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class TlsServerContextImpl : AbstractTlsContext, TlsServerContext, TlsContext // TypeDefIndex: 4998
{
	// Properties
	public override bool IsServer { get; }

	// Methods

	// RVA: 0x1E4957C Offset: 0x1E4957C VA: 0x1E4957C
	internal void .ctor(SecureRandom secureRandom, SecurityParameters securityParameters) { }

	// RVA: 0x1E495FC Offset: 0x1E495FC VA: 0x1E495FC Slot: 17
	public override bool get_IsServer() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsSession // TypeDefIndex: 4999
{
	// Properties
	public abstract byte[] SessionID { get; }
	public abstract bool IsResumable { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract SessionParameters ExportSessionParameters();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte[] get_SessionID();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Invalidate();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_IsResumable();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class TlsSessionImpl : TlsSession // TypeDefIndex: 5000
{
	// Fields
	internal readonly byte[] mSessionID; // 0x10
	internal SessionParameters mSessionParameters; // 0x18

	// Properties
	public virtual byte[] SessionID { get; }
	public virtual bool IsResumable { get; }

	// Methods

	// RVA: 0x1E49604 Offset: 0x1E49604 VA: 0x1E49604
	internal void .ctor(byte[] sessionID, SessionParameters sessionParameters) { }

	// RVA: 0x1E49700 Offset: 0x1E49700 VA: 0x1E49700 Slot: 8
	public virtual SessionParameters ExportSessionParameters() { }

	// RVA: 0x1E49790 Offset: 0x1E49790 VA: 0x1E49790 Slot: 9
	public virtual byte[] get_SessionID() { }

	// RVA: 0x1E497C8 Offset: 0x1E497C8 VA: 0x1E497C8 Slot: 10
	public virtual void Invalidate() { }

	// RVA: 0x1E49854 Offset: 0x1E49854 VA: 0x1E49854 Slot: 11
	public virtual bool get_IsResumable() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsSigner // TypeDefIndex: 5001
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(TlsContext context);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte[] GenerateRawSignature(AsymmetricKeyParameter privateKey, byte[] md5AndSha1);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract byte[] GenerateRawSignature(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey, byte[] hash);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool VerifyRawSignature(byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] md5AndSha1);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool VerifyRawSignature(SignatureAndHashAlgorithm algorithm, byte[] sigBytes, AsymmetricKeyParameter publicKey, byte[] hash);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract ISigner CreateSigner(AsymmetricKeyParameter privateKey);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract ISigner CreateSigner(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter privateKey);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract ISigner CreateVerifyer(AsymmetricKeyParameter publicKey);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract ISigner CreateVerifyer(SignatureAndHashAlgorithm algorithm, AsymmetricKeyParameter publicKey);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool IsValidPublicKey(AsymmetricKeyParameter publicKey);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface TlsSignerCredentials : TlsCredentials // TypeDefIndex: 5002
{
	// Properties
	public abstract SignatureAndHashAlgorithm SignatureAndHashAlgorithm { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract byte[] GenerateCertificateSignature(byte[] hash);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract SignatureAndHashAlgorithm get_SignatureAndHashAlgorithm();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class TlsStream : Stream // TypeDefIndex: 5003
{
	// Fields
	private readonly TlsProtocol handler; // 0x10

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1E49894 Offset: 0x1E49894 VA: 0x1E49894
	internal void .ctor(TlsProtocol handler) { }

	// RVA: 0x1E49910 Offset: 0x1E49910 VA: 0x1E49910 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1E49954 Offset: 0x1E49954 VA: 0x1E49954 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1E4995C Offset: 0x1E4995C VA: 0x1E4995C Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1E499A0 Offset: 0x1E499A0 VA: 0x1E499A0 Slot: 13
	public override void Close() { }

	// RVA: 0x1E499E8 Offset: 0x1E499E8 VA: 0x1E499E8 Slot: 18
	public override void Flush() { }

	// RVA: 0x1E49A20 Offset: 0x1E49A20 VA: 0x1E49A20 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1E49A88 Offset: 0x1E49A88 VA: 0x1E49A88 Slot: 10
	public override long get_Position() { }

	// RVA: 0x1E49AF0 Offset: 0x1E49AF0 VA: 0x1E49AF0 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1E49B58 Offset: 0x1E49B58 VA: 0x1E49B58 Slot: 19
	public override int Read(byte[] buf, int off, int len) { }

	// RVA: 0x1E49BB0 Offset: 0x1E49BB0 VA: 0x1E49BB0 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x1E49C60 Offset: 0x1E49C60 VA: 0x1E49C60 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1E49CC8 Offset: 0x1E49CC8 VA: 0x1E49CC8 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1E49D30 Offset: 0x1E49D30 VA: 0x1E49D30 Slot: 23
	public override void Write(byte[] buf, int off, int len) { }

	// RVA: 0x1E49D88 Offset: 0x1E49D88 VA: 0x1E49D88 Slot: 24
	public override void WriteByte(byte b) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsStreamCipher : TlsCipher // TypeDefIndex: 5004
{
	// Fields
	protected readonly TlsContext context; // 0x10
	protected readonly IStreamCipher encryptCipher; // 0x18
	protected readonly IStreamCipher decryptCipher; // 0x20
	protected readonly TlsMac writeMac; // 0x28
	protected readonly TlsMac readMac; // 0x30
	protected readonly bool usesNonce; // 0x38

	// Methods

	// RVA: 0x1E49E3C Offset: 0x1E49E3C VA: 0x1E49E3C
	public void .ctor(TlsContext context, IStreamCipher clientWriteCipher, IStreamCipher serverWriteCipher, IDigest clientWriteDigest, IDigest serverWriteDigest, int cipherKeySize, bool usesNonce) { }

	// RVA: 0x1E4A6C8 Offset: 0x1E4A6C8 VA: 0x1E4A6C8 Slot: 7
	public virtual int GetPlaintextLimit(int ciphertextLimit) { }

	// RVA: 0x1E4A708 Offset: 0x1E4A708 VA: 0x1E4A708 Slot: 8
	public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len) { }

	// RVA: 0x1E4A944 Offset: 0x1E4A944 VA: 0x1E4A944 Slot: 9
	public virtual byte[] DecodeCiphertext(long seqNo, byte type, byte[] ciphertext, int offset, int len) { }

	// RVA: 0x1E4AB3C Offset: 0x1E4AB3C VA: 0x1E4AB3C Slot: 10
	protected virtual void CheckMac(long seqNo, byte type, byte[] recBuf, int recStart, int recEnd, byte[] calcBuf, int calcOff, int calcLen) { }

	// RVA: 0x1E4AC58 Offset: 0x1E4AC58 VA: 0x1E4AC58 Slot: 11
	protected virtual void UpdateIV(IStreamCipher cipher, bool forEncryption, long seqNo) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class TlsUtilities // TypeDefIndex: 5005
{
	// Fields
	public static readonly byte[] EmptyBytes; // 0x0
	public static readonly short[] EmptyShorts; // 0x8
	public static readonly int[] EmptyInts; // 0x10
	public static readonly long[] EmptyLongs; // 0x18
	internal static readonly byte[] SSL_CLIENT; // 0x20
	internal static readonly byte[] SSL_SERVER; // 0x28
	internal static readonly byte[][] SSL3_CONST; // 0x30

	// Methods

	// RVA: 0x1E4AF44 Offset: 0x1E4AF44 VA: 0x1E4AF44
	protected void .ctor() { }

	// RVA: 0x1E4AF4C Offset: 0x1E4AF4C VA: 0x1E4AF4C
	public static void CheckUint8(int i) { }

	// RVA: 0x1E4AFFC Offset: 0x1E4AFFC VA: 0x1E4AFFC
	public static void CheckUint8(long i) { }

	// RVA: 0x1E4B0AC Offset: 0x1E4B0AC VA: 0x1E4B0AC
	public static void CheckUint16(int i) { }

	// RVA: 0x1E4B15C Offset: 0x1E4B15C VA: 0x1E4B15C
	public static void CheckUint16(long i) { }

	// RVA: 0x1E4B20C Offset: 0x1E4B20C VA: 0x1E4B20C
	public static void CheckUint24(int i) { }

	// RVA: 0x1E471D0 Offset: 0x1E471D0 VA: 0x1E471D0
	public static void CheckUint24(long i) { }

	// RVA: 0x1E4B2C8 Offset: 0x1E4B2C8 VA: 0x1E4B2C8
	public static void CheckUint32(long i) { }

	// RVA: 0x1E4B378 Offset: 0x1E4B378 VA: 0x1E4B378
	public static void CheckUint48(long i) { }

	// RVA: 0x1E4B428 Offset: 0x1E4B428 VA: 0x1E4B428
	public static void CheckUint64(long i) { }

	// RVA: 0x1E4AFF0 Offset: 0x1E4AFF0 VA: 0x1E4AFF0
	public static bool IsValidUint8(int i) { }

	// RVA: 0x1E4B0A0 Offset: 0x1E4B0A0 VA: 0x1E4B0A0
	public static bool IsValidUint8(long i) { }

	// RVA: 0x1E4B150 Offset: 0x1E4B150 VA: 0x1E4B150
	public static bool IsValidUint16(int i) { }

	// RVA: 0x1E4B200 Offset: 0x1E4B200 VA: 0x1E4B200
	public static bool IsValidUint16(long i) { }

	// RVA: 0x1E4B2B0 Offset: 0x1E4B2B0 VA: 0x1E4B2B0
	public static bool IsValidUint24(int i) { }

	// RVA: 0x1E4B2BC Offset: 0x1E4B2BC VA: 0x1E4B2BC
	public static bool IsValidUint24(long i) { }

	// RVA: 0x1E4B36C Offset: 0x1E4B36C VA: 0x1E4B36C
	public static bool IsValidUint32(long i) { }

	// RVA: 0x1E4B41C Offset: 0x1E4B41C VA: 0x1E4B41C
	public static bool IsValidUint48(long i) { }

	// RVA: 0x1E4B48C Offset: 0x1E4B48C VA: 0x1E4B48C
	public static bool IsValidUint64(long i) { }

	// RVA: 0x1E47FA4 Offset: 0x1E47FA4 VA: 0x1E47FA4
	public static bool IsSsl(TlsContext context) { }

	// RVA: 0x1E4B494 Offset: 0x1E4B494 VA: 0x1E4B494
	public static bool IsTlsV11(ProtocolVersion version) { }

	// RVA: 0x1E4B534 Offset: 0x1E4B534 VA: 0x1E4B534
	public static bool IsTlsV11(TlsContext context) { }

	// RVA: 0x1E4B618 Offset: 0x1E4B618 VA: 0x1E4B618
	public static bool IsTlsV12(ProtocolVersion version) { }

	// RVA: 0x1E48A9C Offset: 0x1E48A9C VA: 0x1E48A9C
	public static bool IsTlsV12(TlsContext context) { }

	// RVA: 0x1E46F7C Offset: 0x1E46F7C VA: 0x1E46F7C
	public static void WriteUint8(byte i, Stream output) { }

	// RVA: 0x1E4B6B8 Offset: 0x1E4B6B8 VA: 0x1E4B6B8
	public static void WriteUint8(byte i, byte[] buf, int offset) { }

	// RVA: 0x1E4B718 Offset: 0x1E4B718 VA: 0x1E4B718
	public static void WriteUint16(int i, Stream output) { }

	// RVA: 0x1E4B77C Offset: 0x1E4B77C VA: 0x1E4B77C
	public static void WriteUint16(int i, byte[] buf, int offset) { }

	// RVA: 0x1E46FBC Offset: 0x1E46FBC VA: 0x1E46FBC
	public static void WriteUint24(int i, Stream output) { }

	// RVA: 0x1E4B80C Offset: 0x1E4B80C VA: 0x1E4B80C
	public static void WriteUint24(int i, byte[] buf, int offset) { }

	// RVA: 0x1E4B8CC Offset: 0x1E4B8CC VA: 0x1E4B8CC
	public static void WriteUint32(long i, Stream output) { }

	// RVA: 0x1E4B990 Offset: 0x1E4B990 VA: 0x1E4B990
	public static void WriteUint32(long i, byte[] buf, int offset) { }

	// RVA: 0x1E4BA80 Offset: 0x1E4BA80 VA: 0x1E4BA80
	public static void WriteUint48(long i, Stream output) { }

	// RVA: 0x1E4BBA4 Offset: 0x1E4BBA4 VA: 0x1E4BBA4
	public static void WriteUint48(long i, byte[] buf, int offset) { }

	// RVA: 0x1E4BCF4 Offset: 0x1E4BCF4 VA: 0x1E4BCF4
	public static void WriteUint64(long i, Stream output) { }

	// RVA: 0x1E4AD94 Offset: 0x1E4AD94 VA: 0x1E4AD94
	public static void WriteUint64(long i, byte[] buf, int offset) { }

	// RVA: 0x1E4BE78 Offset: 0x1E4BE78 VA: 0x1E4BE78
	public static void WriteOpaque8(byte[] buf, Stream output) { }

	// RVA: 0x1E49014 Offset: 0x1E49014 VA: 0x1E49014
	public static void WriteOpaque16(byte[] buf, Stream output) { }

	// RVA: 0x1E4BF40 Offset: 0x1E4BF40 VA: 0x1E4BF40
	public static void WriteOpaque24(byte[] buf, Stream output) { }

	// RVA: 0x1E4C000 Offset: 0x1E4C000 VA: 0x1E4C000
	public static void WriteUint8Array(byte[] uints, Stream output) { }

	// RVA: 0x1E4C058 Offset: 0x1E4C058 VA: 0x1E4C058
	public static void WriteUint8Array(byte[] uints, byte[] buf, int offset) { }

	// RVA: 0x1E4C134 Offset: 0x1E4C134 VA: 0x1E4C134
	public static void WriteUint8ArrayWithUint8Length(byte[] uints, Stream output) { }

	// RVA: 0x1E4C1F0 Offset: 0x1E4C1F0 VA: 0x1E4C1F0
	public static void WriteUint8ArrayWithUint8Length(byte[] uints, byte[] buf, int offset) { }

	// RVA: 0x1E4C29C Offset: 0x1E4C29C VA: 0x1E4C29C
	public static void WriteUint16Array(int[] uints, Stream output) { }

	// RVA: 0x1E4C364 Offset: 0x1E4C364 VA: 0x1E4C364
	public static void WriteUint16Array(int[] uints, byte[] buf, int offset) { }

	// RVA: 0x1E4C438 Offset: 0x1E4C438 VA: 0x1E4C438
	public static void WriteUint16ArrayWithUint16Length(int[] uints, Stream output) { }

	// RVA: 0x1E4C4D4 Offset: 0x1E4C4D4 VA: 0x1E4C4D4
	public static void WriteUint16ArrayWithUint16Length(int[] uints, byte[] buf, int offset) { }

	// RVA: 0x1E4C57C Offset: 0x1E4C57C VA: 0x1E4C57C
	public static byte[] EncodeOpaque8(byte[] buf) { }

	// RVA: 0x1E4C608 Offset: 0x1E4C608 VA: 0x1E4C608
	public static byte[] EncodeUint8ArrayWithUint8Length(byte[] uints) { }

	// RVA: 0x1E4C6A8 Offset: 0x1E4C6A8 VA: 0x1E4C6A8
	public static byte[] EncodeUint16ArrayWithUint16Length(int[] uints) { }

	// RVA: 0x1E4C74C Offset: 0x1E4C74C VA: 0x1E4C74C
	public static byte ReadUint8(Stream input) { }

	// RVA: 0x1E4C7E8 Offset: 0x1E4C7E8 VA: 0x1E4C7E8
	public static byte ReadUint8(byte[] buf, int offset) { }

	// RVA: 0x1E4C838 Offset: 0x1E4C838 VA: 0x1E4C838
	public static int ReadUint16(Stream input) { }

	// RVA: 0x1E4C8FC Offset: 0x1E4C8FC VA: 0x1E4C8FC
	public static int ReadUint16(byte[] buf, int offset) { }

	// RVA: 0x1E4C988 Offset: 0x1E4C988 VA: 0x1E4C988
	public static int ReadUint24(Stream input) { }

	// RVA: 0x1E4CA80 Offset: 0x1E4CA80 VA: 0x1E4CA80
	public static int ReadUint24(byte[] buf, int offset) { }

	// RVA: 0x1E4CB3C Offset: 0x1E4CB3C VA: 0x1E4CB3C
	public static long ReadUint32(Stream input) { }

	// RVA: 0x1E4CC5C Offset: 0x1E4CC5C VA: 0x1E4CC5C
	public static long ReadUint32(byte[] buf, int offset) { }

	// RVA: 0x1E4CD48 Offset: 0x1E4CD48 VA: 0x1E4CD48
	public static long ReadUint48(Stream input) { }

	// RVA: 0x1E4CDC8 Offset: 0x1E4CDC8 VA: 0x1E4CDC8
	public static long ReadUint48(byte[] buf, int offset) { }

	// RVA: 0x1E4CE5C Offset: 0x1E4CE5C VA: 0x1E4CE5C
	public static byte[] ReadAllOrNothing(int length, Stream input) { }

	// RVA: 0x1E4CF54 Offset: 0x1E4CF54 VA: 0x1E4CF54
	public static byte[] ReadFully(int length, Stream input) { }

	// RVA: 0x1E4D040 Offset: 0x1E4D040 VA: 0x1E4D040
	public static void ReadFully(byte[] buf, Stream input) { }

	// RVA: 0x1E4D104 Offset: 0x1E4D104 VA: 0x1E4D104
	public static byte[] ReadOpaque8(Stream input) { }

	// RVA: 0x1E48070 Offset: 0x1E48070 VA: 0x1E48070
