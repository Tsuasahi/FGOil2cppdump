{
	// Fields
	protected NpcAiState[] npcAiStates; // 0x350
	[CompilerGeneratedAttribute] // RVA: 0xCD0CC4 Offset: 0xCD0CC4 VA: 0xCD0CC4
	[DebuggerBrowsableAttribute] // RVA: 0xCD0CC4 Offset: 0xCD0CC4 VA: 0xCD0CC4
	private AiState <CurrentAiState>k__BackingField; // 0x358
	[CompilerGeneratedAttribute] // RVA: 0xCD0D00 Offset: 0xCD0D00 VA: 0xCD0D00
	[DebuggerBrowsableAttribute] // RVA: 0xCD0D00 Offset: 0xCD0D00 VA: 0xCD0D00
	private int <ActCount>k__BackingField; // 0x360
	[CompilerGeneratedAttribute] // RVA: 0xCD0D3C Offset: 0xCD0D3C VA: 0xCD0D3C
	[DebuggerBrowsableAttribute] // RVA: 0xCD0D3C Offset: 0xCD0D3C VA: 0xCD0D3C
	private int <TotalActCount>k__BackingField; // 0x364
	protected HashSet<BattleLogicTask.ACTIONTYPE> hashCheckingActType; // 0x368
	[CompilerGeneratedAttribute] // RVA: 0xCD0D78 Offset: 0xCD0D78 VA: 0xCD0D78
	private static Func<NpcAiState, AiState.SaveData> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD0D88 Offset: 0xCD0D88 VA: 0xCD0D88
	private static Func<int, NpcAiState> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD0D98 Offset: 0xCD0D98 VA: 0xCD0D98
	private static Action<NpcAiState> <>f__am$cache2; // 0x10

	// Properties
	public AiState CurrentAiState { get; set; }
	public int ActCount { get; set; }
	public int TotalActCount { get; set; }
	public override int hp { get; set; }
	public override int resultHp { get; set; }
	public override int reducedhp { get; set; }
	public virtual BattleLogicTask.ACTORTYPE ActorType { get; }

	// Methods

	// RVA: 0x15A585C Offset: 0x15A585C VA: 0x15A585C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A894 Offset: 0xD3A894 VA: 0xD3A894
	// RVA: 0x15A5904 Offset: 0x15A5904 VA: 0x15A5904
	public AiState get_CurrentAiState() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A8A4 Offset: 0xD3A8A4 VA: 0xD3A8A4
	// RVA: 0x15A590C Offset: 0x15A590C VA: 0x15A590C
	private void set_CurrentAiState(AiState value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A8B4 Offset: 0xD3A8B4 VA: 0xD3A8B4
	// RVA: 0x15A5914 Offset: 0x15A5914 VA: 0x15A5914
	public int get_ActCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A8C4 Offset: 0xD3A8C4 VA: 0xD3A8C4
	// RVA: 0x15A591C Offset: 0x15A591C VA: 0x15A591C
	private void set_ActCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A8D4 Offset: 0xD3A8D4 VA: 0xD3A8D4
	// RVA: 0x15A5924 Offset: 0x15A5924 VA: 0x15A5924
	public int get_TotalActCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A8E4 Offset: 0xD3A8E4 VA: 0xD3A8E4
	// RVA: 0x15A592C Offset: 0x15A592C VA: 0x15A592C
	private void set_TotalActCount(int value) { }

	// RVA: 0x15A5934 Offset: 0x15A5934 VA: 0x15A5934 Slot: 9
	public override int get_hp() { }

	// RVA: 0x15A593C Offset: 0x15A593C VA: 0x15A593C Slot: 10
	public override void set_hp(int value) { }

	// RVA: 0x15A5940 Offset: 0x15A5940 VA: 0x15A5940 Slot: 13
	public override int get_resultHp() { }

	// RVA: 0x15A5948 Offset: 0x15A5948 VA: 0x15A5948 Slot: 14
	public override void set_resultHp(int value) { }

	// RVA: 0x15A594C Offset: 0x15A594C VA: 0x15A594C Slot: 11
	public override int get_reducedhp() { }

	// RVA: 0x15A5954 Offset: 0x15A5954 VA: 0x15A5954 Slot: 12
	public override void set_reducedhp(int value) { }

	// RVA: 0x15A5958 Offset: 0x15A5958 VA: 0x15A5958 Slot: 22
	public virtual BattleLogicTask.ACTORTYPE get_ActorType() { }

	// RVA: 0x15A5960 Offset: 0x15A5960 VA: 0x15A5960 Slot: 17
	public override AiState getAiState() { }

	// RVA: 0x15A5978 Offset: 0x15A5978 VA: 0x15A5978 Slot: 18
	public override int getThisTurnActCount() { }

	// RVA: 0x15A5980 Offset: 0x15A5980 VA: 0x15A5980 Slot: 19
	public override double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams) { }

	// RVA: 0x15A5988 Offset: 0x15A5988 VA: 0x15A5988 Slot: 15
	public override BattleServantData.SaveData getSaveData() { }

	// RVA: 0x15A5AC4 Offset: 0x15A5AC4 VA: 0x15A5AC4 Slot: 16
	public override bool setSaveData(BattleServantData.SaveData save) { }

	// RVA: 0x15A5C30 Offset: 0x15A5C30 VA: 0x15A5C30
	public void SetNpcServant(BattleData data, BattleDeckServantData deckSvt, int[] aiIds, BattleServantData.SaveData saveSvt) { }

	// RVA: 0x15A5CBC Offset: 0x15A5CBC VA: 0x15A5CBC
	protected void InitAiStates(int[] aiIds) { }

	// RVA: 0x15A5DA4 Offset: 0x15A5DA4 VA: 0x15A5DA4
	public bool UpdateAiStateTargetIndex(int index) { }

	// RVA: 0x15A5E1C Offset: 0x15A5E1C VA: 0x15A5E1C
	public void AddCheckAiActType(BattleLogicTask.ACTIONTYPE actType) { }

	// RVA: 0x15A5E8C Offset: 0x15A5E8C VA: 0x15A5E8C
	public bool RemoveCheckAiActType(BattleLogicTask.ACTIONTYPE actType) { }

	// RVA: 0x15A5F2C Offset: 0x15A5F2C VA: 0x15A5F2C
	public void AddActCount() { }

	// RVA: 0x15A5F48 Offset: 0x15A5F48 VA: 0x15A5F48
	public void ResetActCount() { }

	// RVA: 0x15A5F50 Offset: 0x15A5F50 VA: 0x15A5F50
	public void TurnProgress(bool isEndEnemyTurn, int[] fieldIndiv, BattleLogic logic) { }

	// RVA: 0x15A6058 Offset: 0x15A6058 VA: 0x15A6058 Slot: 20
	public override void PrevActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor) { }

	// RVA: 0x15A6090 Offset: 0x15A6090 VA: 0x15A6090 Slot: 21
	public override void AfterActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor, BattlePerformance perf) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A8F4 Offset: 0xD3A8F4 VA: 0xD3A8F4
	// RVA: 0x15A6240 Offset: 0x15A6240 VA: 0x15A6240
	private static AiState.SaveData <getSaveData>m__0(NpcAiState state) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A904 Offset: 0xD3A904 VA: 0xD3A904
	// RVA: 0x15A6384 Offset: 0x15A6384 VA: 0x15A6384
	private static NpcAiState <InitAiStates>m__1(int id) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A914 Offset: 0xD3A914 VA: 0xD3A914
	// RVA: 0x15A63E8 Offset: 0x15A63E8 VA: 0x15A63E8
	private static void <TurnProgress>m__2(NpcAiState state) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0030 Offset: 0xCB0030 VA: 0xCB0030
private sealed class AiNpcBattleServantData.<setSaveData>c__AnonStorey0 // TypeDefIndex: 8955
{
	// Fields
	internal BattleServantData.SaveData save; // 0x10
	internal int index; // 0x18

	// Methods

	// RVA: 0x15A5C28 Offset: 0x15A5C28 VA: 0x15A5C28
	public void .ctor() { }

	// RVA: 0x15A6428 Offset: 0x15A6428 VA: 0x15A6428
	internal void <>m__0(NpcAiState npcAiState) { }
}

// Namespace: 
public class BattleSkillInfoData // TypeDefIndex: 8956
{
	// Fields
	public BattleSkillInfoData.TYPE type; // 0x10
	public int index; // 0x14
	public int svtUniqueId; // 0x18
	public bool isPassive; // 0x1C
	public bool isCharge; // 0x1D
	protected int _skillId; // 0x20
	public int skilllv; // 0x24
	public int chargeTurn; // 0x28
	public int priority; // 0x2C
	public int sealedTurn; // 0x30
	public bool isUseSkill; // 0x34
	public int strengthStatus; // 0x38
	public int skillRecord; // 0x3C
	public int itemImageId; // 0x40
	public long userCommandCodeId; // 0x48
	public bool isAdd; // 0x50
	protected int cutInId; // 0x54
	public int changeTDCommandType; // 0x58
	public const string ChangeTDCommandTypeKey = "ChangeTDCommandType";
	public int commonReleaseCondId; // 0x5C
	public int lossCommandSpellValue; // 0x60
	private Nullable<bool> hasCond; // 0x64
	private CommonReleaseEntity commonReleaseEntity; // 0x68

	// Properties
	public virtual int skillId { get; set; }

	// Methods

	// RVA: 0x1AE52B8 Offset: 0x1AE52B8 VA: 0x1AE52B8
	public void .ctor() { }

	// RVA: 0x1AE52D4 Offset: 0x1AE52D4 VA: 0x1AE52D4 Slot: 4
	public virtual void set_skillId(int value) { }

	// RVA: 0x1AE52DC Offset: 0x1AE52DC VA: 0x1AE52DC Slot: 5
	public virtual int get_skillId() { }

	// RVA: 0x1AE52E4 Offset: 0x1AE52E4 VA: 0x1AE52E4 Slot: 3
	public override string ToString() { }

	// RVA: 0x1AE58A4 Offset: 0x1AE58A4 VA: 0x1AE58A4
	public int getInfoId() { }

	// RVA: 0x1ADF7E4 Offset: 0x1ADF7E4 VA: 0x1ADF7E4
	public int getChargeTurn() { }

	// RVA: 0x1AE58B4 Offset: 0x1AE58B4 VA: 0x1AE58B4 Slot: 6
	public virtual int getCutInId() { }

	// RVA: 0x1AE59F4 Offset: 0x1AE59F4 VA: 0x1AE59F4
	public string[] getSkillCutInVoices() { }

	// RVA: 0x1AE5B1C Offset: 0x1AE5B1C VA: 0x1AE5B1C
	public string[] getSkillCutInPrefabInfo() { }

	// RVA: 0x1AE5C44 Offset: 0x1AE5C44 VA: 0x1AE5C44
	public Vector3[] getSkillCutInPrefabOffsets() { }

	// RVA: 0x1AE5D6C Offset: 0x1AE5D6C VA: 0x1AE5D6C
	public Vector3[] getSkillCutInPrefabSizes() { }

	// RVA: 0x1AE5E94 Offset: 0x1AE5E94 VA: 0x1AE5E94
	public bool getSkillCutInCamPlayerAll() { }

	// RVA: 0x1AE5FC0 Offset: 0x1AE5FC0 VA: 0x1AE5FC0
	public bool getSkillCutInCamField() { }

	// RVA: 0x1AE60EC Offset: 0x1AE60EC VA: 0x1AE60EC
	public int getSkillCutInMessageMode() { }

	// RVA: 0x1AE6214 Offset: 0x1AE6214 VA: 0x1AE6214
	public bool isChargeOK() { }

	// RVA: 0x1AE0BF4 Offset: 0x1AE0BF4 VA: 0x1AE0BF4
	public bool isItemIcon() { }

	// RVA: 0x1AE622C Offset: 0x1AE622C VA: 0x1AE622C
	public bool isServantSkill() { }

	// RVA: 0x1AE624C Offset: 0x1AE624C VA: 0x1AE624C
	public void checkSkillCharge() { }

	// RVA: 0x1AE6268 Offset: 0x1AE6268 VA: 0x1AE6268
	public bool TurnProgress(int turnCount, int max = 0) { }

	// RVA: 0x1AE62D8 Offset: 0x1AE62D8 VA: 0x1AE62D8
	public void TurnExtend(int turnCount, int max = 999) { }

	// RVA: 0x1AE6310 Offset: 0x1AE6310 VA: 0x1AE6310
	public void TurnExtendForDelay(int turnCount, int max = 999) { }

	// RVA: 0x1AE6348 Offset: 0x1AE6348 VA: 0x1AE6348
	public bool IsContainsCommandTypeTarget() { }

	// RVA: 0x1AE64E4 Offset: 0x1AE64E4 VA: 0x1AE64E4
	public bool IsTargetTypeEnemy() { }

	// RVA: 0x1AE667C Offset: 0x1AE667C VA: 0x1AE667C
	public bool ExistsNoTargetNoActionType() { }

	// RVA: 0x1AE6808 Offset: 0x1AE6808 VA: 0x1AE6808
	public int[] GetAddIndiv() { }

	// RVA: 0x1AE68DC Offset: 0x1AE68DC VA: 0x1AE68DC Slot: 7
	public virtual void PreLoad() { }

	// RVA: 0x1AE69E0 Offset: 0x1AE69E0 VA: 0x1AE69E0 Slot: 8
	public virtual void UnLoad() { }

	// RVA: 0x1AE6AB0 Offset: 0x1AE6AB0 VA: 0x1AE6AB0 Slot: 9
	public virtual BattleSkillInfoData[] GetLoadArray() { }

	// RVA: 0x1AE6B60 Offset: 0x1AE6B60 VA: 0x1AE6B60 Slot: 10
	public virtual void PreAddProcess(BattleServantData svtData) { }

	// RVA: 0x1AE6B64 Offset: 0x1AE6B64 VA: 0x1AE6B64 Slot: 11
	public virtual bool IsChangeable() { }

	// RVA: 0x1AE6B6C Offset: 0x1AE6B6C VA: 0x1AE6B6C Slot: 12
	public virtual void UseSkill() { }

	// RVA: 0x1AE6B70 Offset: 0x1AE6B70 VA: 0x1AE6B70 Slot: 13
	public virtual BaseMotionSkip MakeSkillSkip() { }

	// RVA: 0x1AE6B78 Offset: 0x1AE6B78 VA: 0x1AE6B78 Slot: 14
	protected virtual BaseMotionSkip CommonMakeSkillSkip() { }

	// RVA: 0x1AE6C44 Offset: 0x1AE6C44 VA: 0x1AE6C44
	public static BattleSkillInfoData MakeSkillData(BattleSkillInfoData.TYPE type) { }

	// RVA: 0x1AE13D4 Offset: 0x1AE13D4 VA: 0x1AE13D4
	public bool HasCond() { }

	// RVA: 0x1AE154C Offset: 0x1AE154C VA: 0x1AE154C
	public int GetCondItemId() { }

	// RVA: 0x1AE501C Offset: 0x1AE501C VA: 0x1AE501C
	public int GetCondItemNumber() { }

	// RVA: 0x1ADF7F4 Offset: 0x1ADF7F4 VA: 0x1ADF7F4
	public bool IsOpenCond() { }

	// RVA: 0x1AE6D08 Offset: 0x1AE6D08 VA: 0x1AE6D08
	public int getLossCutInId() { }

	// RVA: 0x1AE6E30 Offset: 0x1AE6E30 VA: 0x1AE6E30
	public SkillLvEntity GetSelfSkillLvEntity() { }

	// RVA: 0x1AE6EE4 Offset: 0x1AE6EE4 VA: 0x1AE6EE4
	public int GetFieldCallEffectId(bool isBefore) { }
}

// Namespace: 
public enum BattleSkillInfoData.TYPE // TypeDefIndex: 8957
{
	// Fields
	public int value__; // 0x0
	public const BattleSkillInfoData.TYPE NONE = 0;
	public const BattleSkillInfoData.TYPE MASTER_EQUIP = 1;
	public const BattleSkillInfoData.TYPE MASTER_COMMAND = 2;
	public const BattleSkillInfoData.TYPE SERVANT_CLASS = 10;
	public const BattleSkillInfoData.TYPE SERVANT_SELF = 11;
	public const BattleSkillInfoData.TYPE SERVANT_EQUIP = 12;
	public const BattleSkillInfoData.TYPE TEMP = 20;
	public const BattleSkillInfoData.TYPE BOOST = 21;
	public const BattleSkillInfoData.TYPE COMMAND_CODE = 22;
	public const BattleSkillInfoData.TYPE TEMP_EFFECT_SQUARE = 100;
}

// Namespace: 
public class BattleRankUpSkillInfoData : BattleSkillInfoData // TypeDefIndex: 8958
{
	// Fields
	protected BattleBuffData.SkillRankChangeData rankChangeData; // 0x70
	protected List<BattleSkillInfoData> rankUpList; // 0x78

	// Properties
	protected int RankUpLimit { get; }
	protected int CurrentRank { get; }
	protected int CurrentLogicRank { get; }
	protected int FixRank { get; }
	protected BattleSkillInfoData Current { get; }
	public override int skillId { get; }

	// Methods

	// RVA: 0x16D0BC4 Offset: 0x16D0BC4 VA: 0x16D0BC4
	public void .ctor() { }

	// RVA: 0x16D0C34 Offset: 0x16D0C34 VA: 0x16D0C34
	protected int get_RankUpLimit() { }

	// RVA: 0x16D0C9C Offset: 0x16D0C9C VA: 0x16D0C9C
	protected int get_CurrentRank() { }

	// RVA: 0x16D0CB0 Offset: 0x16D0CB0 VA: 0x16D0CB0
	protected int get_CurrentLogicRank() { }

	// RVA: 0x16D0CC4 Offset: 0x16D0CC4 VA: 0x16D0CC4
	protected int get_FixRank() { }

	// RVA: 0x16D0D10 Offset: 0x16D0D10 VA: 0x16D0D10
	protected BattleSkillInfoData get_Current() { }

	// RVA: 0x16D0D74 Offset: 0x16D0D74 VA: 0x16D0D74 Slot: 11
	public override bool IsChangeable() { }

	// RVA: 0x16D0DBC Offset: 0x16D0DBC VA: 0x16D0DBC Slot: 9
	public override BattleSkillInfoData[] GetLoadArray() { }

	// RVA: 0x16D0E1C Offset: 0x16D0E1C VA: 0x16D0E1C Slot: 6
	public override int getCutInId() { }

	// RVA: 0x16D0E74 Offset: 0x16D0E74 VA: 0x16D0E74 Slot: 5
	public override int get_skillId() { }

	// RVA: 0x16D0ECC Offset: 0x16D0ECC VA: 0x16D0ECC
	public BattleRankUpSkillInfoData.RankUpState GetRankUpState() { }

	// RVA: 0x16D0F30 Offset: 0x16D0F30 VA: 0x16D0F30 Slot: 12
	public override void UseSkill() { }
}

// Namespace: 
public enum BattleRankUpSkillInfoData.RankUpState // TypeDefIndex: 8959
{
	// Fields
	public int value__; // 0x0
	public const BattleRankUpSkillInfoData.RankUpState Undefined = -1;
	public const BattleRankUpSkillInfoData.RankUpState None = 0;
	public const BattleRankUpSkillInfoData.RankUpState RightAfterUp = 1;
	public const BattleRankUpSkillInfoData.RankUpState AlreadyUp = 2;
}

// Namespace: 
public class BattleSelfSkillInfoData : BattleRankUpSkillInfoData // TypeDefIndex: 8960
{
	// Methods

	// RVA: 0x1537B08 Offset: 0x1537B08 VA: 0x1537B08
	public void .ctor() { }

	// RVA: 0x1537B10 Offset: 0x1537B10 VA: 0x1537B10 Slot: 10
	public override void PreAddProcess(BattleServantData svtData) { }

	// RVA: 0x1537CF8 Offset: 0x1537CF8 VA: 0x1537CF8
	protected int[] GetRankUpSkillIds(int svtId, int baseSkillId) { }

	// RVA: 0x1537E60 Offset: 0x1537E60 VA: 0x1537E60 Slot: 13
	public override BaseMotionSkip MakeSkillSkip() { }
}

// Namespace: 
public class TempBattleSkillInfoData : BattleSkillInfoData // TypeDefIndex: 8961
{
	// Methods

	// RVA: 0x15ED314 Offset: 0x15ED314 VA: 0x15ED314
	public void .ctor(int skillId, int skillLv, int uniqueId = -1) { }
}

// Namespace: 
public class BattleMasterSkillInfoData : BattleSkillInfoData // TypeDefIndex: 8962
{
	// Methods

	// RVA: 0x15008C0 Offset: 0x15008C0 VA: 0x15008C0
	public void .ctor() { }

	// RVA: 0x15008C8 Offset: 0x15008C8 VA: 0x15008C8 Slot: 13
	public override BaseMotionSkip MakeSkillSkip() { }
}

// Namespace: 
public class BattleSpeedButtonComponent : BaseMonoBehaviour // TypeDefIndex: 8963
{
	// Fields
	public BattlePerformance perf; // 0x18

	// Methods

	// RVA: 0x1AE7024 Offset: 0x1AE7024 VA: 0x1AE7024
	public void .ctor() { }

	// RVA: 0x1AE702C Offset: 0x1AE702C VA: 0x1AE702C
	private void OnPress(bool isPressed) { }
}

// Namespace: 
public class BattleSuperBossInfo // TypeDefIndex: 8964
{
	// Fields
	public int superBossId; // 0x10
	public int uniqueId; // 0x14
	public long maxHp; // 0x18
	public long totalDamage; // 0x20

	// Methods

	// RVA: 0x1AE72C8 Offset: 0x1AE72C8 VA: 0x1AE72C8
	public void .ctor() { }
}

// Namespace: 
public class BattleUIRangeLabel : UIRangeLabel // TypeDefIndex: 8965
{
	// Fields
	[SerializeField] // RVA: 0xCD0DA8 Offset: 0xCD0DA8 VA: 0xCD0DA8
	private Vector3 spriteOffset; // 0x38
	private Vector3 savePosValue; // 0x44
	private bool isFirst; // 0x50
	private int saveDepth; // 0x54
	private Vector3 saveAdjust; // 0x58
	private float adjustmentX; // 0x64
	private float adjustmentY; // 0x68
	private float criticalX; // 0x6C
	private float criticalY; // 0x70
	private float recoverX; // 0x74
	private float recoverY; // 0x78
	private float criticalRecoverY; // 0x7C
	private float noDamageY; // 0x80
	private float noDamageRecoverX; // 0x84
	private float noDamageRecoverY; // 0x88

	// Methods

	// RVA: 0x1AE8140 Offset: 0x1AE8140 VA: 0x1AE8140
	public void .ctor() { }

	// RVA: 0x1AE8174 Offset: 0x1AE8174 VA: 0x1AE8174
	private void Awake() { }

	// RVA: 0x1ADD22C Offset: 0x1ADD22C VA: 0x1ADD22C
	public float GetLabelPrintedWidth() { }

	// RVA: 0x1AE81EC Offset: 0x1AE81EC VA: 0x1AE81EC
	public void ParentHasChanged() { }

	// RVA: 0x1ADCDD8 Offset: 0x1ADCDD8 VA: 0x1ADCDD8
	public void SetAdjustLabelOffset(string text, string iconName, bool isIconPixelPerfect = True, BattleServantData.Adjustment adjustment, bool recovery = False, bool ispopAdjustment = False, bool damageCritical = False) { }

	// RVA: 0x1AE8224 Offset: 0x1AE8224 VA: 0x1AE8224
	public int GetTextLength() { }

	// RVA: 0x1ADD25C Offset: 0x1ADD25C VA: 0x1ADD25C
	public void AddLabelDepth(int addDepth) { }

	// RVA: 0x1AE826C Offset: 0x1AE826C VA: 0x1AE826C
	private void OnDisable() { }
}

// Namespace: 
public class BattleUserGradeComponent : MonoBehaviour // TypeDefIndex: 8966
{
	// Fields
	[SerializeField] // RVA: 0xCD0DB8 Offset: 0xCD0DB8 VA: 0xCD0DB8
	private UISprite masterIconBg; // 0x18
	[SerializeField] // RVA: 0xCD0DC8 Offset: 0xCD0DC8 VA: 0xCD0DC8
	private UserGradeComponent gradeComp; // 0x20

	// Methods

	// RVA: 0x1AE8E4C Offset: 0x1AE8E4C VA: 0x1AE8E4C
	public void .ctor() { }

	// RVA: 0x1AE8E54 Offset: 0x1AE8E54 VA: 0x1AE8E54
	public void Initialize() { }
}

// Namespace: 
public static class BattleUtility // TypeDefIndex: 8967
{
	// Methods

	// RVA: 0x1AE94D0 Offset: 0x1AE94D0 VA: 0x1AE94D0
	public static float Lerp(float a, float b, float t) { }

	// RVA: 0x1AE9518 Offset: 0x1AE9518 VA: 0x1AE9518
	public static double LerpDouble(double a, double b, float t) { }

	// RVA: 0x1AE0C04 Offset: 0x1AE0C04 VA: 0x1AE0C04
	public static int FloorToInt(float f) { }

	// RVA: 0x1AE956C Offset: 0x1AE956C VA: 0x1AE956C
	public static int FloorToInt(double d) { }

	// RVA: 0x1AE9564 Offset: 0x1AE9564 VA: 0x1AE9564
	public static long FloorToLong(double f) { }

	// RVA: 0x1AE9574 Offset: 0x1AE9574 VA: 0x1AE9574
	public static float Abs(float f) { }

	// RVA: 0x1AE957C Offset: 0x1AE957C VA: 0x1AE957C
	public static int Abs(int value) { }
}

// Namespace: 
public class BattleWarBoardInfo // TypeDefIndex: 8968
{
	// Fields
	public int stageId; // 0x10
	public bool isPrecedingPlayer; // 0x14
	public int battleTurn; // 0x18
	public BattleWarBoardInfo.WarBoardServantInfo[] svtInfo; // 0x20
	public BattleWarBoardInfo.WarBoardMasterInfo[] masterInfo; // 0x28
	public int bgNo; // 0x30
	public int bgType; // 0x34

	// Methods

	// RVA: 0x1AEC068 Offset: 0x1AEC068 VA: 0x1AEC068
	public void .ctor() { }
}

// Namespace: 
public class BattleWarBoardInfo.WarBoardServantInfo // TypeDefIndex: 8969
{
	// Fields
	public long id; // 0x10
	public int maxDefeatPoint; // 0x18
	public int defeatPoint; // 0x1C
	public int currentHp; // 0x20
	public int hp; // 0x24
	public int currentNp; // 0x28
	public int nextNpTurn; // 0x2C
	public BattleBuffData.SaveData buffDataSave; // 0x30
	public int skill1Ct; // 0x38
	public int skill2Ct; // 0x3C
	public int skill3Ct; // 0x40
	public int aftSquareIndex; // 0x44
	public int befSquareIndex; // 0x48
	public int transformIndex; // 0x4C
	public int transformLimitCount; // 0x50
	public bool isSleepWaitMode; // 0x54
	public bool isEffectedDoNotActState; // 0x55
	public int criticalStars; // 0x58
	public int squareEffectSkillId; // 0x5C
	public int squareEffectSkillLv; // 0x60
	public long npcSvtEquipId; // 0x68

	// Methods

	// RVA: 0x1AEC078 Offset: 0x1AEC078 VA: 0x1AEC078
	public void .ctor() { }
}

// Namespace: 
public class BattleWarBoardInfo.WarBoardMasterInfo // TypeDefIndex: 8970
{
	// Fields
	public int forceId; // 0x10
	public int groupId; // 0x14
	public int skill1Ct; // 0x18
	public int skill1SealedTurn; // 0x1C
	public int skill2Ct; // 0x20
	public int skill2SealedTurn; // 0x24
	public int skill3Ct; // 0x28
	public int skill3SealedTurn; // 0x2C
	public int commandSpellNum; // 0x30

	// Methods

	// RVA: 0x1AEC070 Offset: 0x1AEC070 VA: 0x1AEC070
	public void .ctor() { }
}

// Namespace: 
public class CardEffectComponent : EffectComponent // TypeDefIndex: 8971
{
	// Fields
	[SerializeField] // RVA: 0xCD0DD8 Offset: 0xCD0DD8 VA: 0xCD0DD8
	private UIUnityRenderer[] onCardEffectArray; // 0x80
	[SerializeField] // RVA: 0xCD0DE8 Offset: 0xCD0DE8 VA: 0xCD0DE8
	private UIUnityRenderer[] underCardEffectArray; // 0x88

	// Methods

	// RVA: 0x192C3A8 Offset: 0x192C3A8 VA: 0x192C3A8
	public void .ctor() { }

	// RVA: 0x192C410 Offset: 0x192C410 VA: 0x192C410
	public void SetCardEffectDepth(int onBaseDepth, int underBaseDepth) { }
}

// Namespace: 
public class ChangeRendererMaterialColorEffect : MonoBehaviour // TypeDefIndex: 8972
{
	// Fields
	[SerializeField] // RVA: 0xCD0DF8 Offset: 0xCD0DF8 VA: 0xCD0DF8
	private GameObject targetObject; // 0x18
	[SerializeField] // RVA: 0xCD0E08 Offset: 0xCD0E08 VA: 0xCD0E08
	private ChangeRendererMaterialColorEffect.RendererType[] targetRendererTypes; // 0x20
	[SerializeField] // RVA: 0xCD0E18 Offset: 0xCD0E18 VA: 0xCD0E18
	private string propertyName; // 0x28
	[SerializeField] // RVA: 0xCD0E28 Offset: 0xCD0E28 VA: 0xCD0E28
	private Color toColor; // 0x30
	[SerializeField] // RVA: 0xCD0E38 Offset: 0xCD0E38 VA: 0xCD0E38
	private float time; // 0x40
	[SerializeField] // RVA: 0xCD0E48 Offset: 0xCD0E48 VA: 0xCD0E48
	private iTween.EaseType easeType; // 0x44
	[SerializeField] // RVA: 0xCD0E58 Offset: 0xCD0E58 VA: 0xCD0E58
	private bool isMaterialAll; // 0x48
	[SerializeField] // RVA: 0xCD0E68 Offset: 0xCD0E68 VA: 0xCD0E68
	private bool isDestroyCompleted; // 0x49
	private List<Renderer> targetRenderers; // 0x50
	private Dictionary<int, Color> materialColors; // 0x58
	private Action onCompleteCallback; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCD0E78 Offset: 0xCD0E78 VA: 0xCD0E78
	private static Action <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1F0C554 Offset: 0x1F0C554 VA: 0x1F0C554
	public void .ctor() { }

	// RVA: 0x1F0C5AC Offset: 0x1F0C5AC VA: 0x1F0C5AC
	public static Type ToRendererType(ChangeRendererMaterialColorEffect.RendererType rendererType) { }

	// RVA: 0x1F0C6B0 Offset: 0x1F0C6B0 VA: 0x1F0C6B0
	private void Start() { }

	// RVA: 0x1F0C828 Offset: 0x1F0C828 VA: 0x1F0C828
	public void StartEffect(GameObject targetObject, ChangeRendererMaterialColorEffect.RendererType[] targetRendererTypes, string propertyName, Color toColor, float time, iTween.EaseType easeType, bool isMaterialAll, bool isDestroyCompleted, Action onCompleteCallback) { }

	// RVA: 0x1F0D24C Offset: 0x1F0D24C VA: 0x1F0D24C
	private void onUpdateEffect(float percentage) { }

	// RVA: 0x1F0D7CC Offset: 0x1F0D7CC VA: 0x1F0D7CC
	private void onCompleteEffect() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A924 Offset: 0xD3A924 VA: 0xD3A924
	// RVA: 0x1F0D858 Offset: 0x1F0D858 VA: 0x1F0D858
	private static void <Start>m__0() { }
}

// Namespace: 
public enum ChangeRendererMaterialColorEffect.RendererType // TypeDefIndex: 8973
{
	// Fields
	public int value__; // 0x0
	public const ChangeRendererMaterialColorEffect.RendererType Renderer = 0;
	public const ChangeRendererMaterialColorEffect.RendererType ParticleSystemRenderer = 1;
	public const ChangeRendererMaterialColorEffect.RendererType MeshRenderer = 2;
	public const ChangeRendererMaterialColorEffect.RendererType SkinnedMeshRenderer = 3;
	public const ChangeRendererMaterialColorEffect.RendererType SpriteRenderer = 4;
}

// Namespace: 
[ExecuteAlways] // RVA: 0xC969CC Offset: 0xC969CC VA: 0xC969CC
public class ChrBlurSetMatrix : MonoBehaviour // TypeDefIndex: 8974
{
	// Fields
	[SerializeField] // RVA: 0xCD0E88 Offset: 0xCD0E88 VA: 0xCD0E88
	private Transform targetObj; // 0x18
	[SerializeField] // RVA: 0xCD0E98 Offset: 0xCD0E98 VA: 0xCD0E98
	private int _frameLag; // 0x20
	[SerializeField] // RVA: 0xCD0EA8 Offset: 0xCD0EA8 VA: 0xCD0EA8
	private string targetShader; // 0x28
	[SerializeField] // RVA: 0xCD0EB8 Offset: 0xCD0EB8 VA: 0xCD0EB8
	private string positionStr; // 0x30
	[SerializeField] // RVA: 0xCD0EC8 Offset: 0xCD0EC8 VA: 0xCD0EC8
	private string prevPositionStr; // 0x38
	[SerializeField] // RVA: 0xCD0ED8 Offset: 0xCD0ED8 VA: 0xCD0ED8
	private string IsEnemyStr; // 0x40
	private float _enemyValue; // 0x48
	private bool _isPlayingNoble; // 0x4C
	private float _tempEnemyValue; // 0x50
	private Queue<Vector3> _recentPositions; // 0x58
	private Material _smearMat; // 0x60

	// Methods

	// RVA: 0x1F25200 Offset: 0x1F25200 VA: 0x1F25200
	public void .ctor() { }

	// RVA: 0x1F252C4 Offset: 0x1F252C4 VA: 0x1F252C4
	private void setupMaterial() { }

	// RVA: 0x1F2575C Offset: 0x1F2575C VA: 0x1F2575C
	private BattleActorControl findBattleActorControl() { }

	// RVA: 0x1F25868 Offset: 0x1F25868 VA: 0x1F25868
	private void updateEnemyValue() { }

	// RVA: 0x1F259B8 Offset: 0x1F259B8 VA: 0x1F259B8
	public void SetMatrixData() { }

	// RVA: 0x1F25CEC Offset: 0x1F25CEC VA: 0x1F25CEC
	private void FixedUpdate() { }
}

// Namespace: 
public class ChrBulr : MonoBehaviour // TypeDefIndex: 8975
{
	// Fields
	private Queue<Vector3> _recentPositions; // 0x18
	[SerializeField] // RVA: 0xCD0EE8 Offset: 0xCD0EE8 VA: 0xCD0EE8
	private Transform chrObj; // 0x20
	[SerializeField] // RVA: 0xCD0EF8 Offset: 0xCD0EF8 VA: 0xCD0EF8
	private Transform targetObj; // 0x28
	[SerializeField] // RVA: 0xCD0F08 Offset: 0xCD0F08 VA: 0xCD0F08
	private bool _blur; // 0x30
	[SerializeField] // RVA: 0xCD0F18 Offset: 0xCD0F18 VA: 0xCD0F18
	private int _frameLag; // 0x34
	private Material _smearMat; // 0x38
	private string prevPositionStr; // 0x40
	private string positionStr; // 0x48

	// Properties
	public Material smearMat { get; }

	// Methods

	// RVA: 0x1F25CF0 Offset: 0x1F25CF0 VA: 0x1F25CF0
	public void .ctor() { }

	// RVA: 0x1F25D80 Offset: 0x1F25D80 VA: 0x1F25D80
	public Material get_smearMat() { }

	// RVA: 0x1F25EE0 Offset: 0x1F25EE0 VA: 0x1F25EE0
	public void SetBulrFlag(bool flg) { }

	// RVA: 0x1F25EEC Offset: 0x1F25EEC VA: 0x1F25EEC
	public void SetFrameLag(int value) { }

	// RVA: 0x1F25EF4 Offset: 0x1F25EF4 VA: 0x1F25EF4
	private void LateUpdate() { }
}

// Namespace: 
[ExecuteAlways] // RVA: 0xC969DC Offset: 0xC969DC VA: 0xC969DC
public class ChrDirectionalLight : MonoBehaviour // TypeDefIndex: 8976
{
	// Fields
	[SerializeField] // RVA: 0xCD0F28 Offset: 0xCD0F28 VA: 0xCD0F28
	private Light RenderingLight; // 0x18
	[SerializeField] // RVA: 0xCD0F38 Offset: 0xCD0F38 VA: 0xCD0F38
	private Renderer[] targetRenderers; // 0x20
	[SerializeField] // RVA: 0xCD0F48 Offset: 0xCD0F48 VA: 0xCD0F48
	private ChrDirectionalLight.MaterialType materialType; // 0x28
	[SerializeField] // RVA: 0xCD0F58 Offset: 0xCD0F58 VA: 0xCD0F58
	private bool destroyRendererMaterial; // 0x2C
	private bool isInitialized; // 0x2D
	private List<Material> targetRendererMaterials; // 0x30
	private List<Material> destroyMaterials; // 0x38

	// Properties
	private ChrDirectionalLight.MaterialType useMaterialType { get; }

	// Methods

	// RVA: 0x1F261CC Offset: 0x1F261CC VA: 0x1F261CC
	public void .ctor() { }

	// RVA: 0x1F261D4 Offset: 0x1F261D4 VA: 0x1F261D4
	private ChrDirectionalLight.MaterialType get_useMaterialType() { }

	// RVA: 0x1F261DC Offset: 0x1F261DC VA: 0x1F261DC
	private void Update() { }

	// RVA: 0x1F26408 Offset: 0x1F26408 VA: 0x1F26408
	private void LateUpdate() { }

	// RVA: 0x1F2663C Offset: 0x1F2663C VA: 0x1F2663C
	private void OnDestroy() { }

	// RVA: 0x1F26640 Offset: 0x1F26640 VA: 0x1F26640
	public void Reset() { }

	// RVA: 0x1F26418 Offset: 0x1F26418 VA: 0x1F26418
	public void UpdateMaterial() { }

	// RVA: 0x1F261E0 Offset: 0x1F261E0 VA: 0x1F261E0
	private void initialize() { }
}

// Namespace: 
public enum ChrDirectionalLight.MaterialType // TypeDefIndex: 8977
{
	// Fields
	public int value__; // 0x0
	public const ChrDirectionalLight.MaterialType ShareMaterial = 0;
	public const ChrDirectionalLight.MaterialType NormalMaterial = 1;
}

// Namespace: 
[ExecuteAlways] // RVA: 0xC969EC Offset: 0xC969EC VA: 0xC969EC
public class ChrRenderMatrix : MonoBehaviour // TypeDefIndex: 8978
{
	// Fields
	[SerializeField] // RVA: 0xCD0F68 Offset: 0xCD0F68 VA: 0xCD0F68
	private Light RenderingLight; // 0x18
	[SerializeField] // RVA: 0xCD0F78 Offset: 0xCD0F78 VA: 0xCD0F78
	private GameObject[] ef_nodeObjects; // 0x20
	[SerializeField] // RVA: 0xCD0F88 Offset: 0xCD0F88 VA: 0xCD0F88
	private Camera RenderingCamera; // 0x28
	[SerializeField] // RVA: 0xCD0F98 Offset: 0xCD0F98 VA: 0xCD0F98
	private Camera targetCamera; // 0x30
	[SerializeField] // RVA: 0xCD0FA8 Offset: 0xCD0FA8 VA: 0xCD0FA8
	private string targetCameraPath; // 0x38
	[SerializeField] // RVA: 0xCD0FB8 Offset: 0xCD0FB8 VA: 0xCD0FB8
	private float cameraOffsetZ; // 0x40
	[SerializeField] // RVA: 0xCD0FC8 Offset: 0xCD0FC8 VA: 0xCD0FC8
	private Vector3 posA; // 0x44
	[SerializeField] // RVA: 0xCD0FD8 Offset: 0xCD0FD8 VA: 0xCD0FD8
	[RangeAttribute] // RVA: 0xCD0FD8 Offset: 0xCD0FD8 VA: 0xCD0FD8
	private float rotAY; // 0x50
	[SerializeField] // RVA: 0xCD1020 Offset: 0xCD1020 VA: 0xCD1020
	[RangeAttribute] // RVA: 0xCD1020 Offset: 0xCD1020 VA: 0xCD1020
	private float scaleFlat_Z; // 0x54
	[SerializeField] // RVA: 0xCD1064 Offset: 0xCD1064 VA: 0xCD1064
	private int cameraUpdateCount; // 0x58
	[SerializeField] // RVA: 0xCD1074 Offset: 0xCD1074 VA: 0xCD1074
	private Transform targetObj; // 0x60
	[SerializeField] // RVA: 0xCD1084 Offset: 0xCD1084 VA: 0xCD1084
	private string targetObjPath; // 0x68
	[SerializeField] // RVA: 0xCD1094 Offset: 0xCD1094 VA: 0xCD1094
	private Renderer[] targetRenderers; // 0x70
	[SerializeField] // RVA: 0xCD10A4 Offset: 0xCD10A4 VA: 0xCD10A4
	private ChrRenderMatrix.MaterialType materialType; // 0x78
	[SerializeField] // RVA: 0xCD10B4 Offset: 0xCD10B4 VA: 0xCD10B4
	private bool destroyRendererMaterial; // 0x7C
	[SerializeField] // RVA: 0xCD10C4 Offset: 0xCD10C4 VA: 0xCD10C4
	private string _GameCamVP; // 0x80
	[SerializeField] // RVA: 0xCD10D4 Offset: 0xCD10D4 VA: 0xCD10D4
	private string _LocalRot; // 0x88
	private bool isInitialized; // 0x90
	private float rotValue; // 0x94
	private int _cameraUpdateCount; // 0x98
	private List<Material> targetRendererMaterials; // 0xA0
	private List<Material> destroyMaterials; // 0xA8
	private List<ChrRenderMatrix.EfNodeObject> ef_nodeWorkObjects; // 0xB0

	// Properties
	private ChrRenderMatrix.MaterialType useMaterialType { get; }

	// Methods

	// RVA: 0x1F26774 Offset: 0x1F26774 VA: 0x1F26774
	public void .ctor() { }

	// RVA: 0x1F267F0 Offset: 0x1F267F0 VA: 0x1F267F0
	private ChrRenderMatrix.MaterialType get_useMaterialType() { }

	// RVA: 0x1F267F8 Offset: 0x1F267F8 VA: 0x1F267F8
	private void Update() { }

	// RVA: 0x1F26D28 Offset: 0x1F26D28 VA: 0x1F26D28
	private void LateUpdate() { }

	// RVA: 0x1F27048 Offset: 0x1F27048 VA: 0x1F27048
	private void OnDestroy() { }

	// RVA: 0x1F2704C Offset: 0x1F2704C VA: 0x1F2704C
	private void Reset() { }

	// RVA: 0x1F27044 Offset: 0x1F27044 VA: 0x1F27044
	public void UpdateMatrix() { }

	// RVA: 0x1F28974 Offset: 0x1F28974 VA: 0x1F28974
	public void SetTargetObj(GameObject obj) { }

	// RVA: 0x1F289B0 Offset: 0x1F289B0 VA: 0x1F289B0
	private Matrix4x4 cnvOrthogonalMatrix(float left, float right, float bottom, float top, float near, float far) { }

	// RVA: 0x1F267FC Offset: 0x1F267FC VA: 0x1F267FC
	private void initialize() { }

	// RVA: 0x1F26D7C Offset: 0x1F26D7C VA: 0x1F26D7C
	private void updateRenderCameraPos() { }

	// RVA: 0x1F27650 Offset: 0x1F27650 VA: 0x1F27650
	private void updateMatrix(Renderer[] targetRenderers) { }

	// RVA: 0x1F28BC0 Offset: 0x1F28BC0 VA: 0x1F28BC0
	private Bounds calcRendererBounds() { }
}

// Namespace: 
public enum ChrRenderMatrix.MaterialType // TypeDefIndex: 8979
{
	// Fields
	public int value__; // 0x0
	public const ChrRenderMatrix.MaterialType ShareMaterial = 0;
	public const ChrRenderMatrix.MaterialType NormalMaterial = 1;
}

// Namespace: 
private class ChrRenderMatrix.EfNodeObject // TypeDefIndex: 8980
{
	// Fields
	private GameObject orgObject; // 0x10
	private GameObject dupObject; // 0x18

	// Methods

	// RVA: 0x1F28B90 Offset: 0x1F28B90 VA: 0x1F28B90
	public void .ctor(GameObject gameObject) { }

	// RVA: 0x1F290C0 Offset: 0x1F290C0 VA: 0x1F290C0
	public void Setup(GameObject gameObject) { }

	// RVA: 0x1F27264 Offset: 0x1F27264 VA: 0x1F27264
	public void Reset() { }

	// RVA: 0x1F28DB4 Offset: 0x1F28DB4 VA: 0x1F28DB4
	public void SetMatrix(Matrix4x4 AllMat) { }

	// RVA: 0x1F29610 Offset: 0x1F29610 VA: 0x1F29610
	private void copyTransform(GameObject dst, GameObject src) { }
}

// Namespace: 
public class BattleComboData // TypeDefIndex: 8981
{
	// Fields
	public bool flash; // 0x10
	public bool chainError; // 0x11
	public int samecount; // 0x14
	public bool[] sameflg; // 0x18
	public int addAtk; // 0x20
	public int addTdGauge; // 0x24
	public int addCritical; // 0x28
	public int tdChain; // 0x2C
	public int flashtype; // 0x30
	private bool isTreasureDvc; // 0x34

	// Methods

	// RVA: 0x15B6A20 Offset: 0x15B6A20 VA: 0x15B6A20
	public void .ctor() { }

	// RVA: 0x15B6A8C Offset: 0x15B6A8C VA: 0x15B6A8C
	public bool isGrand() { }

	// RVA: 0x15B6AB0 Offset: 0x15B6AB0 VA: 0x15B6AB0
	public bool isExtraAttack() { }

	// RVA: 0x15B6AC0 Offset: 0x15B6AC0 VA: 0x15B6AC0
	public bool isChainError() { }

