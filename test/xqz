	// RVA: 0x1676118 Offset: 0x1676118 VA: 0x1676118
	public bool checkID(int id) { }

	// RVA: 0x1676128 Offset: 0x1676128 VA: 0x1676128
	public void addParamObject(GameObject obj) { }

	// RVA: 0x16722AC Offset: 0x16722AC VA: 0x16722AC
	public void resetParamObject() { }

	// RVA: 0x16761D4 Offset: 0x16761D4 VA: 0x16761D4
	public void delParamObject(GameObject obj) { }

	// RVA: 0x1676280 Offset: 0x1676280 VA: 0x1676280
	public void initTacticalFaze() { }

	// RVA: 0x16762F4 Offset: 0x16762F4 VA: 0x16762F4
	public int getStepRate() { }

	// RVA: 0x166A2C0 Offset: 0x166A2C0 VA: 0x166A2C0
	public bool isAlive(bool isResurrectable = False) { }

	// RVA: 0x1676320 Offset: 0x1676320 VA: 0x1676320
	public bool isAliveLogic(bool isCheckDefeatPoint = True) { }

	// RVA: 0x1676420 Offset: 0x1676420 VA: 0x1676420
	public bool ExistsResurrection() { }

	// RVA: 0x167646C Offset: 0x167646C VA: 0x167646C
	public bool isDeadWaitNotAlive() { }

	// RVA: 0x16763D0 Offset: 0x16763D0 VA: 0x16763D0
	public bool isGuts() { }

	// RVA: 0x16764A0 Offset: 0x16764A0 VA: 0x16764A0
	public bool isGuts(out BattleBuffData.BuffData buff) { }

	// RVA: 0x16764F4 Offset: 0x16764F4 VA: 0x16764F4
	public int useGuts(int maxhp, out string motionName) { }

	// RVA: 0x167653C Offset: 0x167653C VA: 0x167653C
	public bool isUpHate(int[] opSvtIndiv) { }

	// RVA: 0x167628C Offset: 0x167628C VA: 0x167628C
	public void setOverKillTargetId(int Id) { }

	// RVA: 0x1676590 Offset: 0x1676590 VA: 0x1676590
	public bool checkOverKill(int targetId) { }

	// RVA: 0x16765A0 Offset: 0x16765A0 VA: 0x16765A0
	public bool isOverKill() { }

	// RVA: 0x16765B0 Offset: 0x16765B0 VA: 0x16765B0
	public int getAccumulationDamage() { }

	// RVA: 0x16765F0 Offset: 0x16765F0 VA: 0x16765F0
	public void resetAccumulationDamage() { }

	// RVA: 0x16765F8 Offset: 0x16765F8 VA: 0x16765F8
	public bool checkPerHP(int val, bool flg) { }

	// RVA: 0x1676660 Offset: 0x1676660 VA: 0x1676660
	public bool playDead() { }

	// RVA: 0x1676684 Offset: 0x1676684 VA: 0x1676684
	public bool checkUseTDvc(BattleData battleData, bool flg = True) { }

	// RVA: 0x1676754 Offset: 0x1676754 VA: 0x1676754
	public void SetServantCommandCard() { }

	// RVA: 0x1676A70 Offset: 0x1676A70 VA: 0x1676A70
	public int getMotionId(BattleCommandData command) { }

	// RVA: 0x1676C18 Offset: 0x1676C18 VA: 0x1676C18
	public int getAttackType(BattleCommandData command) { }

	// RVA: 0x1676DC0 Offset: 0x1676DC0 VA: 0x1676DC0
	public int[] getAttackRaito(BattleCommandData command, BattleServantData opSvt, out int multiatk) { }

	// RVA: 0x1676E64 Offset: 0x1676E64 VA: 0x1676E64
	private int[] getAttackRaitoBase(BattleCommandData command) { }

	// RVA: 0x1677110 Offset: 0x1677110 VA: 0x1677110
	public int[] getServantCommandIndividuality(BattleCommandData command) { }

	// RVA: 0x16772C8 Offset: 0x16772C8 VA: 0x16772C8
	public int getNPVal() { }

	// RVA: 0x16772F8 Offset: 0x16772F8 VA: 0x16772F8
	public void usedTpWeapon(int addPer, BattleData battleData) { }

	// RVA: 0x16772F0 Offset: 0x16772F0 VA: 0x16772F0
	public int getNp() { }

	// RVA: 0x1677474 Offset: 0x1677474 VA: 0x1677474
	public int getNpPer() { }

	// RVA: 0x16774B8 Offset: 0x16774B8 VA: 0x16774B8
	public bool IsEnableNpInfo() { }

	// RVA: 0x16774E8 Offset: 0x16774E8 VA: 0x16774E8
	public int getTreasureDvcCardId(bool useTDTypeChangedValue = True) { }

	// RVA: 0x167759C Offset: 0x167759C VA: 0x167759C
	public int getNextTDTurn() { }

	// RVA: 0x16775A4 Offset: 0x16775A4 VA: 0x16775A4
	public int getMaxNextTDTurn() { }

	// RVA: 0x166C438 Offset: 0x166C438 VA: 0x166C438
	public int getNowHp() { }

	// RVA: 0x166C444 Offset: 0x166C444 VA: 0x166C444
	public int getMaxHp() { }

	// RVA: 0x16775AC Offset: 0x16775AC VA: 0x16775AC
	public int getCriticalRate(BattleCommandData command, BattleServantData optSvt) { }

	// RVA: 0x16777DC Offset: 0x16777DC VA: 0x16777DC
	public int getOriginCriticalRate() { }

	// RVA: 0x16777E4 Offset: 0x16777E4 VA: 0x16777E4
	public void setHp(int inhp, bool isAccumulation = True) { }

	// RVA: 0x1674C04 Offset: 0x1674C04 VA: 0x1674C04
	public bool updownNextTDTurn(int val) { }

	// RVA: 0x16778E4 Offset: 0x16778E4 VA: 0x16778E4
	public void setReadySpecial(bool flg) { }

	// RVA: 0x16778F0 Offset: 0x16778F0 VA: 0x16778F0
	public bool checkReadySpecail() { }

	// RVA: 0x16778F8 Offset: 0x16778F8 VA: 0x16778F8
	public void refreshActionBattle() { }

	// RVA: 0x1677900 Offset: 0x1677900 VA: 0x1677900
	public bool isDead() { }

	// RVA: 0x1677964 Offset: 0x1677964 VA: 0x1677964
	public bool IsDisplayDead() { }

	// RVA: 0x166C3E4 Offset: 0x166C3E4 VA: 0x166C3E4
	public bool isAction() { }

	// RVA: 0x1677988 Offset: 0x1677988 VA: 0x1677988
	public bool isCardTypeAction(BattleCommandData commandType) { }

	// RVA: 0x167672C Offset: 0x167672C VA: 0x167672C
	public bool isNobleAction() { }

	// RVA: 0x16779D8 Offset: 0x16779D8 VA: 0x16779D8
	public bool isNobleAction(out BuffList.ACTION invokeAct) { }

	// RVA: 0x1674BBC Offset: 0x1674BBC VA: 0x1674BBC
	public bool isNobleSeal() { }

	// RVA: 0x1677A34 Offset: 0x1677A34 VA: 0x1677A34
	public bool isNobleConditionMismatch() { }

	// RVA: 0x1677A88 Offset: 0x1677A88 VA: 0x1677A88
	public void addDamage(int damage, bool noAccumulation = False) { }

	// RVA: 0x1677CA0 Offset: 0x1677CA0 VA: 0x1677CA0
	public bool healHp(int heal, bool isForce = False) { }

	// RVA: 0x16778CC Offset: 0x16778CC VA: 0x16778CC
	public void procAccumulationDamage(int before, int after) { }

	// RVA: 0x1677F18 Offset: 0x1677F18 VA: 0x1677F18
	private void sendParamMessage(string funcName) { }

	// RVA: 0x1678090 Offset: 0x1678090 VA: 0x1678090
	public void changeUpdateStatus() { }

	// RVA: 0x16780E0 Offset: 0x16780E0 VA: 0x16780E0
	public void UpdateStatusUIByTransform() { }

	// RVA: 0x167825C Offset: 0x167825C VA: 0x167825C
	public void fixUpdateStatus() { }

	// RVA: 0x16783D8 Offset: 0x16783D8 VA: 0x16783D8
	public void shiftUpdateStatus() { }

	// RVA: 0x1678554 Offset: 0x1678554 VA: 0x1678554
	public void updateNpGauge() { }

	// RVA: 0x16786D0 Offset: 0x16786D0 VA: 0x16786D0
	public void updateNpGauge(int[] incNpArray, int index) { }

	// RVA: 0x1678910 Offset: 0x1678910 VA: 0x1678910
	public void updateView() { }

	// RVA: 0x1678A8C Offset: 0x1678A8C VA: 0x1678A8C
	public void updateTDGauge() { }

	// RVA: 0x166FE0C Offset: 0x166FE0C VA: 0x166FE0C
	public int getMaxNp() { }

	// RVA: 0x1678C08 Offset: 0x1678C08 VA: 0x1678C08
	public int getCountMaxNp() { }

	// RVA: 0x1678C14 Offset: 0x1678C14 VA: 0x1678C14
	public bool isAddNpGauge() { }

	// RVA: 0x1673244 Offset: 0x1673244 VA: 0x1673244
	public int addNp(int intp, bool flg = True) { }

	// RVA: 0x1678C20 Offset: 0x1678C20 VA: 0x1678C20
	public bool IsNpMax() { }

	// RVA: 0x1678C3C Offset: 0x1678C3C VA: 0x1678C3C
	public void changeNp(int intp, bool flg = True) { }

	// RVA: 0x1678DE4 Offset: 0x1678DE4 VA: 0x1678DE4
	public void addNpPer(float per) { }

	// RVA: 0x1678E20 Offset: 0x1678E20 VA: 0x1678E20
	public void setMaxHp() { }

	// RVA: 0x1674C30 Offset: 0x1674C30 VA: 0x1674C30
	public void updateHp() { }

	// RVA: 0x1674F80 Offset: 0x1674F80 VA: 0x1674F80
	public void updateBuff(bool doAuraUpdate = True) { }

	// RVA: 0x1678E58 Offset: 0x1678E58 VA: 0x1678E58
	public bool ChangeBuffValue(int changeValue, int[] targetIndivi, bool isTurn, bool isAny) { }

	// RVA: 0x167917C Offset: 0x167917C VA: 0x167917C
	public void skillChageShorten(int param, int max = 0) { }

	// RVA: 0x167925C Offset: 0x167925C VA: 0x167925C
	public void skillChageExtend(int param, int max = 999) { }

	// RVA: 0x1679340 Offset: 0x1679340 VA: 0x1679340
	public float getheadUpY() { }

	// RVA: 0x1679384 Offset: 0x1679384 VA: 0x1679384
	public int getBaseATK() { }

	// RVA: 0x167938C Offset: 0x167938C VA: 0x167938C
	public float getCommandCardATK(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x16795E0 Offset: 0x16795E0 VA: 0x16795E0
	public float getCommandCardNP(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1679790 Offset: 0x1679790 VA: 0x1679790
	public int getBaseStarRate() { }

	// RVA: 0x16797BC Offset: 0x16797BC VA: 0x16797BC
	public int getDownBaseStarRate() { }

	// RVA: 0x16797C4 Offset: 0x16797C4 VA: 0x16797C4
	public float getCommandStar(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1679974 Offset: 0x1679974 VA: 0x1679974
	public float getClassAtk() { }

	// RVA: 0x16799B0 Offset: 0x16799B0 VA: 0x16799B0
	public float getUpDownAtk(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1679A88 Offset: 0x1679A88 VA: 0x1679A88
	public float getUpDownDef(BattleCommandData command, BattleServantData targetSvt, bool pierce) { }

	// RVA: 0x1679C04 Offset: 0x1679C04 VA: 0x1679C04
	public float getUpDownSpecialDef(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1679CDC Offset: 0x1679CDC VA: 0x1679CDC
	public float getUpdownPower(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1679F08 Offset: 0x1679F08 VA: 0x1679F08
	public float getUpdownPowerSpecial(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x1679FFC Offset: 0x1679FFC VA: 0x1679FFC
	public float getUpdownCriticalAtk(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167A110 Offset: 0x167A110 VA: 0x167A110
	public int[] getConcatSvtIndividualities(BattleCommandData command) { }

	// RVA: 0x167A1A4 Offset: 0x167A1A4 VA: 0x167A1A4
	public int[] getConcatServantAndBuffIndividualityies(BattleCommandData command, bool isIncludeIgnoreIndiv = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x167A2B8 Offset: 0x167A2B8 VA: 0x167A2B8
	public float getUpdownNpAtk(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167A390 Offset: 0x167A390 VA: 0x167A390
	public float getUpdownSelfDamage(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167A468 Offset: 0x167A468 VA: 0x167A468
	public float getUpdownDropStar(BattleCommandData command, BattleServantData opSvt, bool isAttack) { }

	// RVA: 0x167A54C Offset: 0x167A54C VA: 0x167A54C
	public float GetUpDownDropStarDamageTaken(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1677618 Offset: 0x1677618 VA: 0x1677618
	public int getUpDownCriticalRate(out string missText) { }

	// RVA: 0x16776F0 Offset: 0x16776F0 VA: 0x16776F0
	public int GetUpDownCriticalRateDamageTaken(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1674730 Offset: 0x1674730 VA: 0x1674730
	public int getUpDownHeal(out int digit) { }

	// RVA: 0x167A674 Offset: 0x167A674 VA: 0x167A674
	public float getUpDownGiveHeal(BattleServantData opSvt) { }

	// RVA: 0x167A748 Offset: 0x167A748 VA: 0x167A748
	public int getUpDownGutsHp(out int digit) { }

	// RVA: 0x167A7F8 Offset: 0x167A7F8 VA: 0x167A7F8
	public int getCorrectedValueFuncGainNp(int tmpVal) { }

	// RVA: 0x167A8C8 Offset: 0x167A8C8 VA: 0x167A8C8
	public int getAttackBaseNp(BattleCommandData command, bool isNoble) { }

	// RVA: 0x167AA00 Offset: 0x167AA00 VA: 0x167AA00
	public int getDefenceBaseNp() { }

	// RVA: 0x167AA3C Offset: 0x167AA3C VA: 0x167AA3C
	public float getTdRate() { }

	// RVA: 0x167AA54 Offset: 0x167AA54 VA: 0x167AA54
	public float getAtkTdRate() { }

	// RVA: 0x167AA6C Offset: 0x167AA6C VA: 0x167AA6C
	public float getDeathRate() { }

	// RVA: 0x167AA84 Offset: 0x167AA84 VA: 0x167AA84
	public float getBuffResistInstantDeath(BattleServantData opSvt) { }

	// RVA: 0x167AB64 Offset: 0x167AB64 VA: 0x167AB64
	public float getBuffNonResistInstantDeath(BattleServantData opSvt) { }

	// RVA: 0x167AC44 Offset: 0x167AC44 VA: 0x167AC44
	public float getBuffResistDelayNPTurn(BattleServantData opSvt) { }

	// RVA: 0x167AD24 Offset: 0x167AD24 VA: 0x167AD24
	public bool checkAvoidInstantDeath(BattleServantData opSvt) { }

	// RVA: 0x167ADD0 Offset: 0x167ADD0 VA: 0x167ADD0
	public float getGrantInstantDeathMagnification(BattleServantData opSvt) { }

	// RVA: 0x167AEA4 Offset: 0x167AEA4 VA: 0x167AEA4
	public float getUpDownDropNp(BattleCommandData command, BattleServantData opSvt, bool isAttack) { }

	// RVA: 0x167AF88 Offset: 0x167AF88 VA: 0x167AF88
	public float getUpDownDamageDropNp(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x16746D0 Offset: 0x16746D0 VA: 0x16746D0
	public bool isGainNp(bool checkCount = False) { }

	// RVA: 0x167B060 Offset: 0x167B060 VA: 0x167B060
	public float getUpDownGiveNp(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x167B138 Offset: 0x167B138 VA: 0x167B138
	public float getBuffDamageValue(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B218 Offset: 0x167B218 VA: 0x167B218
	public float getBuffSelfDamageValue(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B2F8 Offset: 0x167B2F8 VA: 0x167B2F8
	public bool checkPierceInvincible(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B364 Offset: 0x167B364 VA: 0x167B364
	public bool checkInvincible(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B3D8 Offset: 0x167B3D8 VA: 0x167B3D8
	public bool checkBreakAvoidance(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B444 Offset: 0x167B444 VA: 0x167B444
	public bool checkAvoidance(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B4B8 Offset: 0x167B4B8 VA: 0x167B4B8
	public bool CheckAvoidanceIndividuality(BattleCommandData command, BattleServantData targetSvt, out int targetBuffId) { }

	// RVA: 0x1679B98 Offset: 0x1679B98 VA: 0x1679B98
	public bool checkPierceDefence(BattleCommandData command, BattleServantData targetSvt) { }

	// RVA: 0x167B554 Offset: 0x167B554 VA: 0x167B554
	public float getBuffGRANTSTATEMagnification(int[] buffIndiv, BattleServantData opSvt, out string missText) { }

	// RVA: 0x167B830 Offset: 0x167B830 VA: 0x167B830
	public float getBuffTOLERANCEMagnification(int[] buffIndiv, BattleServantData opSvt, out string missText) { }

	// RVA: 0x167B920 Offset: 0x167B920 VA: 0x167B920
	public float getBuffGRANTSUBSTATEMagnification(int[] indiv, BattleServantData opSvt) { }

	// RVA: 0x167BA34 Offset: 0x167BA34 VA: 0x167BA34
	public float getBuffTOLERANCESUBSTATEMagnification(int[] indiv, BattleServantData opSvt) { }

	// RVA: 0x167BB14 Offset: 0x167BB14 VA: 0x167BB14
	public bool isBuffClassRelatioAtk(BattleCommandData command, BattleServantData opSvt, out float val, bool isAct) { }

	// RVA: 0x167BBE0 Offset: 0x167BBE0 VA: 0x167BBE0
	public bool isBuffClassRelatioDef(BattleCommandData command, BattleServantData opSvt, out float val, bool isAct) { }

	// RVA: 0x167BCBC Offset: 0x167BCBC VA: 0x167BCBC
	public BattleBuffData.BuffData[] getBuffOverwriteClassRelationArray(BattleCommandData command, BattleServantData opSvt, bool isAct) { }

	// RVA: 0x167BD30 Offset: 0x167BD30 VA: 0x167BD30
	public bool checkBuffAvoid(int[] buffIndiv, BattleServantData opSvt) { }

	// RVA: 0x1673454 Offset: 0x1673454 VA: 0x1673454
	public bool canUseSkill(int index = -1) { }

	// RVA: 0x167BF38 Offset: 0x167BF38 VA: 0x167BF38
	public int getSkillSealTurn() { }

	// RVA: 0x167BDB4 Offset: 0x167BDB4 VA: 0x167BDB4
	public bool[] getSkillSealSelect() { }

	// RVA: 0x167BFC8 Offset: 0x167BFC8 VA: 0x167BFC8
	public int getSkillSealSelectTurn(int index) { }

	// RVA: 0x167C098 Offset: 0x167C098 VA: 0x167C098
	public int getNotActTurn() { }

	// RVA: 0x167C128 Offset: 0x167C128 VA: 0x167C128
	public bool checkRegainNPUsedNoble() { }

	// RVA: 0x167C220 Offset: 0x167C220 VA: 0x167C220
	public bool isAfterImage() { }

	// RVA: 0x167C228 Offset: 0x167C228 VA: 0x167C228
	public bool isJustHit() { }

	// RVA: 0x167C230 Offset: 0x167C230 VA: 0x167C230
	public int getCriticalWeight(BattleCommandData command) { }

	// RVA: 0x1674844 Offset: 0x1674844 VA: 0x1674844
	public void provisionalHeal(int heal) { }

	// RVA: 0x16749A8 Offset: 0x16749A8 VA: 0x16749A8
	public bool provisionalDamage(int damage) { }

	// RVA: 0x1673574 Offset: 0x1673574 VA: 0x1673574
	public void resetReducedHp() { }

	// RVA: 0x167C328 Offset: 0x167C328 VA: 0x167C328
	public void addBuff(BattleBuffData.BuffData buff, bool fieldflg = True, bool changeMaxHpflg = False, bool unFix = False) { }

	// RVA: 0x167C3C4 Offset: 0x167C3C4 VA: 0x167C3C4
	public bool checkUpdateUpdownHp(int before_maxhp, bool isHeal) { }

	// RVA: 0x167C52C Offset: 0x167C52C VA: 0x167C52C
	public bool CheckUpdateUpdownOnlyDisplayHp(int beforeMaxhp, bool isHeal) { }

	// RVA: 0x167C5CC Offset: 0x167C5CC VA: 0x167C5CC
	public bool checkUpdateResumptionHpFromLossMaxHp() { }

	// RVA: 0x167C6C4 Offset: 0x167C6C4 VA: 0x167C6C4
	public bool subBuffFromIndividualites(int[] individuality, int cntFromHead, int cntFromTail, ref List<BattleBuffData.BuffData> subBuffList, bool isCreateDummy = True, bool isForceSubState = False) { }

	// RVA: 0x166CCE0 Offset: 0x166CCE0 VA: 0x166CCE0
	public void InitializeBuff() { }

	// RVA: 0x167C76C Offset: 0x167C76C VA: 0x167C76C
	public BattleBuffData getBuffData() { }

	// RVA: 0x167C774 Offset: 0x167C774 VA: 0x167C774
	public int getActiveIndividualitiesNum(int[] indv) { }

	// RVA: 0x167C7AC Offset: 0x167C7AC VA: 0x167C7AC
	public int getActiveBuffNum(int[] ids) { }

	// RVA: 0x167C7E4 Offset: 0x167C7E4 VA: 0x167C7E4
	public void checkFieldBuff(int[] fieldList, FieldAliveServantData aliveSvtData, BattleLogic logic) { }

	// RVA: 0x167C8D8 Offset: 0x167C8D8 VA: 0x167C8D8
	public static int get_CriticalIndividuality() { }

	// RVA: 0x166C550 Offset: 0x166C550 VA: 0x166C550
	public int[] getIndividualities(BattleCommandData command) { }

	// RVA: 0x167B65C Offset: 0x167B65C VA: 0x167B65C
	public int[] getIndividualities(int[] addIndiv) { }

	// RVA: 0x167C9A8 Offset: 0x167C9A8 VA: 0x167C9A8
	public int[] getWeaponIndividualities() { }

	// RVA: 0x167CA40 Offset: 0x167CA40 VA: 0x167CA40
	public bool checkIndividualities(int[] indv) { }

	// RVA: 0x167CA6C Offset: 0x167CA6C VA: 0x167CA6C
	public bool checkBuffIndividualities(int[] indv, bool isActiveOnly = False, bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x167CACC Offset: 0x167CACC VA: 0x167CACC
	public bool checkBuffId(int[] buffIdlist) { }

	// RVA: 0x166C83C Offset: 0x166C83C VA: 0x166C83C
	public int[] getBuffIndividualities(bool isActiveOnly, bool isIncludeIgnoreIndiv = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x167CB04 Offset: 0x167CB04 VA: 0x167CB04
	public int getSameIndiualityBuffSum(int[] indv, bool isActiveOnly, bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x167CB64 Offset: 0x167CB64 VA: 0x167CB64
	public int getSameIndiualityServantSum(int[] checkIndvArray) { }

	// RVA: 0x167CC44 Offset: 0x167CC44 VA: 0x167CC44
	public void recordUse() { }

	// RVA: 0x167CC74 Offset: 0x167CC74 VA: 0x167CC74
	public bool isSphitBuff(out int effectId) { }

	// RVA: 0x167CCAC Offset: 0x167CCAC VA: 0x167CCAC
	public BattleBuffData.ShowBuffData[] getRecBuffList(bool isAtkSide, bool isShowOverwriteClassRelation = True, bool isShowDarkClassRelation = False) { }

	// RVA: 0x1676294 Offset: 0x1676294 VA: 0x1676294
	public void resetActionHistory() { }

	// RVA: 0x1674AA4 Offset: 0x1674AA4 VA: 0x1674AA4
	public void setActionHistory(int actUniqueId, BattleServantActionHistory.TYPE actType, int wavecount, bool isOpponent) { }

	// RVA: 0x1675594 Offset: 0x1675594 VA: 0x1675594
	public int getRevengeTargetUniqueId() { }

	// RVA: 0x16753F4 Offset: 0x16753F4 VA: 0x16753F4
	public int getRevengeTargetUniqueIdFromOpponent() { }

	// RVA: 0x167CCFC Offset: 0x167CCFC VA: 0x167CCFC
	public int getDeadTargetUniqueId() { }

	// RVA: 0x167CD9C Offset: 0x167CD9C VA: 0x167CD9C
	public BattleSkillInfoData getSkillInfoDataByAiActType(AiAct.TYPE type) { }

	// RVA: 0x167CDF0 Offset: 0x167CDF0 VA: 0x167CDF0
	public void recordDeadTurn(BattleData.TYPETURN turn) { }

	// RVA: 0x167CDF8 Offset: 0x167CDF8 VA: 0x167CDF8
	public bool checkDeadTurn(BattleData.TYPETURN turn) { }

	// RVA: 0x167743C Offset: 0x167743C VA: 0x167743C
	public void RegisterWaveTurnEvent(ServantWaveTurnEvent ev) { }

	// RVA: -1 Offset: -1
	private bool HasWaveTurnEvent<T>(int wave, int turn) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x255B1E4 Offset: 0x255B1E4 VA: 0x255B1E4
	|-BattleServantData.HasWaveTurnEvent<MoveToSubMemberWaveTurnEvent>
	|-BattleServantData.HasWaveTurnEvent<object>
	|-BattleServantData.HasWaveTurnEvent<UseNoblePhantasmWaveTurnEvent>
	*/

	// RVA: 0x167CE08 Offset: 0x167CE08 VA: 0x167CE08
	public bool IsMoveToSubMember(int wave, int turn) { }

	// RVA: 0x1674B54 Offset: 0x1674B54 VA: 0x1674B54
	public bool IsUseNoblePhantasmOnThisWaveTurn(int wave, int turn) { }

	// RVA: 0x167CE70 Offset: 0x167CE70 VA: 0x167CE70
	public int[] GetCommandCodeIds() { }

	// RVA: 0x167D088 Offset: 0x167D088 VA: 0x167D088
	public int[] GetCommandCodeIdsEX() { }

	// RVA: 0x167D1D0 Offset: 0x167D1D0 VA: 0x167D1D0
	public int GetCommandCardIndex(long userCommandCodeId) { }

	// RVA: 0x167D250 Offset: 0x167D250 VA: 0x167D250
	public BattleServantData.ConnectData getConnenctData() { }

	// RVA: 0x16748E8 Offset: 0x16748E8 VA: 0x16748E8
	public bool resultHeal(int heal) { }

	// RVA: 0x1674A18 Offset: 0x1674A18 VA: 0x1674A18
	public bool resultDamage(int damage, int minHp = 0) { }

	// RVA: 0x1673584 Offset: 0x1673584 VA: 0x1673584
	public void updateResultState() { }

	// RVA: 0x16763AC Offset: 0x16763AC VA: 0x16763AC
	public bool isLogicResultAlive() { }

	// RVA: 0x167D320 Offset: 0x167D320 VA: 0x167D320
	public bool isLogicDeadAndNoRevive() { }

	// RVA: 0x1674DEC Offset: 0x1674DEC VA: 0x1674DEC
	public void updateConditionsBuff(int[] fieldInfividualities, BattlePerformance perf) { }

	// RVA: 0x167D368 Offset: 0x167D368 VA: 0x167D368
	public int[] getAuraIdList() { }

	// RVA: 0x167D490 Offset: 0x167D490 VA: 0x167D490
	public void setStateString(string str) { }

	// RVA: 0x167D498 Offset: 0x167D498 VA: 0x167D498
	public string getStateString() { }

	// RVA: 0x167D4A0 Offset: 0x167D4A0 VA: 0x167D4A0
	public bool isShiftServant() { }

	// RVA: 0x1674984 Offset: 0x1674984 VA: 0x1674984
	public bool isShiftableServant() { }

	// RVA: 0x167D4D4 Offset: 0x167D4D4 VA: 0x167D4D4
	public bool isShiftReady() { }

	// RVA: 0x167D518 Offset: 0x167D518 VA: 0x167D518
	public int GetMaxShiftIconCount() { }

	// RVA: 0x167D550 Offset: 0x167D550 VA: 0x167D550
	public int GetMaxShiftIconPos() { }

	// RVA: 0x167D590 Offset: 0x167D590 VA: 0x167D590
	public int GetCurrentShiftPos() { }

	// RVA: 0x167D5C8 Offset: 0x167D5C8 VA: 0x167D5C8
	public void SetShiftServantChange(BattleData data, EnemySimpleHpData defHp, int shiftValue = 1) { }

	// RVA: 0x167D640 Offset: 0x167D640 VA: 0x167D640
	public void setShiftServant(BattleData data, int shiftValue = 1) { }

	// RVA: 0x167D848 Offset: 0x167D848 VA: 0x167D848
	public bool isChangeServant() { }

	// RVA: 0x167D87C Offset: 0x167D87C VA: 0x167D87C
	public void setChangeServant(BattleData data, int val) { }

	// RVA: 0x167DAF8 Offset: 0x167DAF8 VA: 0x167DAF8 Slot: 19
	public virtual double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams) { }

	// RVA: 0x167E24C Offset: 0x167E24C VA: 0x167E24C
	private long[] convertLong(int[] param) { }

	// RVA: 0x167E160 Offset: 0x167E160 VA: 0x167E160
	private double[] convertDouble(int[] param) { }

	// RVA: 0x167E334 Offset: 0x167E334 VA: 0x167E334 Slot: 5
	public bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }

	// RVA: 0x167A624 Offset: 0x167A624 VA: 0x167A624 Slot: 6
	public void setBuffState() { }

	// RVA: 0x167E3F8 Offset: 0x167E3F8 VA: 0x167E3F8
	public double GetWkHpRatio() { }

	// RVA: 0x167E448 Offset: 0x167E448 VA: 0x167E448 Slot: 7
	public int getBuffStateValue(BuffList.CHANGEVALUE changeValue, int ratioParam) { }

	// RVA: 0x167E51C Offset: 0x167E51C VA: 0x167E51C Slot: 8
	public int getBuffRangeValue(int lowEffectValue, int highEffectValue, int lowRange, int highRange) { }

	// RVA: 0x167E64C Offset: 0x167E64C VA: 0x167E64C
	private double CalcHpRangeRatio(int value) { }

	// RVA: 0x167E684 Offset: 0x167E684 VA: 0x167E684
	public void orderAppearanceId(int id) { }

	// RVA: 0x167E68C Offset: 0x167E68C VA: 0x167E68C
	public void SetForceAppearance(bool flg) { }

	// RVA: 0x167E698 Offset: 0x167E698 VA: 0x167E698
	public bool IsForceAppearance() { }

	// RVA: 0x167E6A0 Offset: 0x167E6A0 VA: 0x167E6A0
	public bool IsTDAppearance() { }

	// RVA: 0x167E6F4 Offset: 0x167E6F4 VA: 0x167E6F4
	public int getAppearanceId() { }

	// RVA: 0x166B9B8 Offset: 0x166B9B8 VA: 0x166B9B8
	public void changeAppearanceId() { }

	// RVA: 0x167E77C Offset: 0x167E77C VA: 0x167E77C
	public bool isAppearanceId() { }

	// RVA: 0x166B960 Offset: 0x166B960 VA: 0x166B960
	public bool isChangeAppearance() { }

	// RVA: 0x166BE88 Offset: 0x166BE88 VA: 0x166BE88
	private bool isChangeAppearanceBuff(BattleBuffData.BuffData[] list) { }

	// RVA: 0x167E78C Offset: 0x167E78C VA: 0x167E78C
	public bool IsNoVoice() { }

	// RVA: 0x167E7A0 Offset: 0x167E7A0 VA: 0x167E7A0
	public int GetBillBoardGroup() { }

	// RVA: 0x167CFB8 Offset: 0x167CFB8 VA: 0x167CFB8
	public CommandCodeInfo GetCommandCodeInfo(long userCommandCodeId) { }

	// RVA: 0x167E7C0 Offset: 0x167E7C0 VA: 0x167E7C0
	public bool CheckFirstNpPlay(BattleData data) { }

	// RVA: 0x167E98C Offset: 0x167E98C VA: 0x167E98C
	private bool IsContainsSeqId(BattleData data, int seqId) { }

	// RVA: 0x167EB24 Offset: 0x167EB24 VA: 0x167EB24
	public void SaveFirstNpPlay(BattleData data) { }

	// RVA: 0x167ED6C Offset: 0x167ED6C VA: 0x167ED6C
	public void SetIsSleepWaitMode(bool value) { }

	// RVA: 0x167ED80 Offset: 0x167ED80 VA: 0x167ED80
	public void forceDead() { }

	// RVA: 0x167EDC8 Offset: 0x167EDC8 VA: 0x167EDC8
	public bool isTargetRarity(int[] targetRarityList) { }

	// RVA: 0x167EE68 Offset: 0x167EE68 VA: 0x167EE68
	public bool checkAllIndividualities(int[] indv) { }

	// RVA: 0x1671444 Offset: 0x1671444 VA: 0x1671444
	private void checkServantTreasureDvcEntity() { }

	// RVA: 0x167EE94 Offset: 0x167EE94 VA: 0x167EE94
	public bool isMultiTargetCore() { }

	// RVA: 0x167EEA8 Offset: 0x167EEA8 VA: 0x167EEA8
	public bool isMultiTargetUp() { }

	// RVA: 0x167EEBC Offset: 0x167EEBC VA: 0x167EEBC
	public bool isMultiTargetUnder() { }

	// RVA: 0x167EED0 Offset: 0x167EED0 VA: 0x167EED0
	public bool isMultiTargetBattleStartPos() { }

	// RVA: 0x167EEE4 Offset: 0x167EEE4 VA: 0x167EEE4
	public int getMultiTargetBattleDeadChangePos() { }

	// RVA: 0x167EEFC Offset: 0x167EEFC VA: 0x167EEFC
	public void SetServantNPSpeedCommonFlag(int buttonIndex) { }

	// RVA: 0x167EF3C Offset: 0x167EF3C VA: 0x167EF3C
	public void SetSelectedTreasureDevice() { }

	// RVA: 0x167EF70 Offset: 0x167EF70 VA: 0x167EF70
	public void ResetSelectedTreasureDevice() { }

	// RVA: 0x167EF7C Offset: 0x167EF7C VA: 0x167EF7C
	public bool checkSpecialInvincible(BattleCommandData command, BattleServantData targetSvt, out bool isSpecialInvincible) { }

	// RVA: 0x167F018 Offset: 0x167F018 VA: 0x167F018
	public void UpdateAfterShowBuff(BattleActionData.BuffData actBuff) { }

	// RVA: 0x167F080 Offset: 0x167F080 VA: 0x167F080
	public bool IsEquip() { }

	// RVA: 0x167F2C0 Offset: 0x167F2C0 VA: 0x167F2C0
	public void ClearOverwriteServantName() { }

	// RVA: 0x167F2C8 Offset: 0x167F2C8 VA: 0x167F2C8 Slot: 20
	public virtual void PrevActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor) { }

	// RVA: 0x167F2CC Offset: 0x167F2CC VA: 0x167F2CC Slot: 21
	public virtual void AfterActorNoblePhantasm(BattleSequenceManager battleSeqManager, BattleActorControl actor, BattlePerformance perf) { }

	// RVA: 0x167F2D0 Offset: 0x167F2D0 VA: 0x167F2D0
	public bool IsCounterWaitMotion() { }

	// RVA: 0x167F314 Offset: 0x167F314 VA: 0x167F314
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD240 Offset: 0xCCD240 VA: 0xCCD240
	// RVA: 0x167F318 Offset: 0x167F318 VA: 0x167F318
	private static bool <getPassiveSkills>m__0(BattleSkillInfoData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD250 Offset: 0xCCD250 VA: 0xCCD250
	// RVA: 0x167F340 Offset: 0x167F340 VA: 0x167F340
	private static bool <getActiveSkillInfos>m__1(BattleSkillInfoData s) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD260 Offset: 0xCCD260 VA: 0xCCD260
	// RVA: 0x167F380 Offset: 0x167F380 VA: 0x167F380
	private static int <getAttackSideEffectBuffList>m__2(BattleBuffData.BuffData a1, BattleBuffData.BuffData a2) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD270 Offset: 0xCCD270 VA: 0xCCD270
	// RVA: -1 Offset: -1
	private static bool <HasWaveTurnEvent`1>m__3<T>(ServantWaveTurnEvent x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x255B19C Offset: 0x255B19C VA: 0x255B19C
	|-BattleServantData.<HasWaveTurnEvent`1>m__3<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xCCD280 Offset: 0xCCD280 VA: 0xCCD280
	// RVA: 0x167F3C0 Offset: 0x167F3C0 VA: 0x167F3C0
	private static int <getAiParam>m__4(long s) { }
}

// Namespace: 
public enum BattleServantData.STATUS // TypeDefIndex: 8965
{
	// Fields
	public int value__; // 0x0
	public const BattleServantData.STATUS NOMAL = 0;
	public const BattleServantData.STATUS ACT_RESURRECTION = 1;
	public const BattleServantData.STATUS ACT_DEAD = 2;
	public const BattleServantData.STATUS ACT_WITHDRAW = 3;
	public const BattleServantData.STATUS ACT_CHANGEAPP = 4;
}

// Namespace: 
public enum BattleServantData.DEADTYPE // TypeDefIndex: 8966
{
	// Fields
	public int value__; // 0x0
	public const BattleServantData.DEADTYPE NORMAL = 0;
	public const BattleServantData.DEADTYPE ESCAPE = 1;
	public const BattleServantData.DEADTYPE STAND = 2;
	public const BattleServantData.DEADTYPE EFFECT = 3;
	public const BattleServantData.DEADTYPE WAIT = 4;
}

// Namespace: 
public class BattleServantData.Adjustment // TypeDefIndex: 8967
{
	// Fields
	public bool isCritical; // 0x10
	public bool isWeak; // 0x11
	public bool isRegist; // 0x12
	public bool isNoDamage; // 0x13
	public Vector3 offSet; // 0x14

	// Methods

	// RVA: 0x166AAF0 Offset: 0x166AAF0 VA: 0x166AAF0
	public void .ctor() { }
}

// Namespace: 
public class BattleServantData.SaveData // TypeDefIndex: 8968
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC63778 Offset: 0xC63778 VA: 0xC63778
	public int index; // 0x10
	[PackKeyAttribute] // RVA: 0xC637B0 Offset: 0xC637B0 VA: 0xC637B0
	public int hp; // 0x14
	[PackKeyAttribute] // RVA: 0xC637E8 Offset: 0xC637E8 VA: 0xC637E8
	public int np; // 0x18
	[PackKeyAttribute] // RVA: 0xC63820 Offset: 0xC63820 VA: 0xC63820
	public int nextNp; // 0x1C
	[PackKeyAttribute] // RVA: 0xC63858 Offset: 0xC63858 VA: 0xC63858
	public int isEntry; // 0x20
	[PackKeyAttribute] // RVA: 0xC63890 Offset: 0xC63890 VA: 0xC63890
	public int isDeadAnime; // 0x24
	[PackKeyAttribute] // RVA: 0xC638C8 Offset: 0xC638C8 VA: 0xC638C8
	public int[] skillinfoid_list; // 0x28
	[PackKeyAttribute] // RVA: 0xC63900 Offset: 0xC63900 VA: 0xC63900
	public int[] skillcharge_list; // 0x30
	[PackKeyAttribute] // RVA: 0xC63938 Offset: 0xC63938 VA: 0xC63938
	public AiState.SaveData aistateSave; // 0x38
	[PackKeyAttribute] // RVA: 0xC63970 Offset: 0xC63970 VA: 0xC63970
	public BattleBuffData.SaveData buffDataSave; // 0x40
	[PackKeyAttribute] // RVA: 0xC639A8 Offset: 0xC639A8 VA: 0xC639A8
	public int deckIndex; // 0x48
	[PackKeyAttribute] // RVA: 0xC639E0 Offset: 0xC639E0 VA: 0xC639E0
	public int transformIndex; // 0x4C
	[PackKeyAttribute] // RVA: 0xC63A18 Offset: 0xC63A18 VA: 0xC63A18
	public int dressDispId; // 0x50
	[PackKeyAttribute] // RVA: 0xC63A50 Offset: 0xC63A50 VA: 0xC63A50
	public int accumulationDamage; // 0x54
	[PackKeyAttribute] // RVA: 0xC63A88 Offset: 0xC63A88 VA: 0xC63A88
	public string statestring; // 0x58
	[PackKeyAttribute] // RVA: 0xC63AC0 Offset: 0xC63AC0 VA: 0xC63AC0
	public int summonNpcId; // 0x60
	[PackKeyAttribute] // RVA: 0xC63AF8 Offset: 0xC63AF8 VA: 0xC63AF8
	public int uniqueId; // 0x64
	[PackKeyAttribute] // RVA: 0xC63B30 Offset: 0xC63B30 VA: 0xC63B30
	public int shiftDeckIndex; // 0x68
	[PackKeyAttribute] // RVA: 0xC63B68 Offset: 0xC63B68 VA: 0xC63B68
	public int changeSvtIndex; // 0x6C
	[PackKeyAttribute] // RVA: 0xC63BA0 Offset: 0xC63BA0 VA: 0xC63BA0
	public bool isSleepWaitMode; // 0x70
	[PackKeyAttribute] // RVA: 0xC63BD8 Offset: 0xC63BD8 VA: 0xC63BD8
	public int shiftNpcId; // 0x74
	[PackKeyAttribute] // RVA: 0xC63C10 Offset: 0xC63C10 VA: 0xC63C10
	public long beforeUserSvtId; // 0x78
	[PackKeyAttribute] // RVA: 0xC63C48 Offset: 0xC63C48 VA: 0xC63C48
	public bool isAlreadyDrop; // 0x80
	[PackKeyAttribute] // RVA: 0xC63C80 Offset: 0xC63C80 VA: 0xC63C80
	public int lowLimitShift; // 0x84
	[PackKeyAttribute] // RVA: 0xC63CB8 Offset: 0xC63CB8 VA: 0xC63CB8
	public int playedNPCount; // 0x88
	[PackKeyAttribute] // RVA: 0xC63CF0 Offset: 0xC63CF0 VA: 0xC63CF0
	public int defeatPoint; // 0x8C
	[PackKeyAttribute] // RVA: 0xC63D28 Offset: 0xC63D28 VA: 0xC63D28
	public int befSquareIndex; // 0x90
	[PackKeyAttribute] // RVA: 0xC63D60 Offset: 0xC63D60 VA: 0xC63D60
	public int aftSquareIndex; // 0x94
	[PackKeyAttribute] // RVA: 0xC63D98 Offset: 0xC63D98 VA: 0xC63D98
	public bool isAppliedHaveStars; // 0x98
	[PackKeyAttribute] // RVA: 0xC63DD0 Offset: 0xC63DD0 VA: 0xC63DD0
	public int maxDefeatPoint; // 0x9C
	[PackKeyAttribute] // RVA: 0xC63E08 Offset: 0xC63E08 VA: 0xC63E08
	public int squareEffectSkillId; // 0xA0
	[PackKeyAttribute] // RVA: 0xC63E40 Offset: 0xC63E40 VA: 0xC63E40
	public int squareEffectSkillLv; // 0xA4
	[PackKeyAttribute] // RVA: 0xC63E78 Offset: 0xC63E78 VA: 0xC63E78
	public int deadtype; // 0xA8
	[PackKeyAttribute] // RVA: 0xC63EB0 Offset: 0xC63EB0 VA: 0xC63EB0
	public int transformLimitCount; // 0xAC
	[PackKeyAttribute] // RVA: 0xC63EE8 Offset: 0xC63EE8 VA: 0xC63EE8
	public AiState.SaveData[] npcAiStates; // 0xB0
	[PackKeyAttribute] // RVA: 0xC63F20 Offset: 0xC63F20 VA: 0xC63F20
	public int npcActCount; // 0xB8
	[PackKeyAttribute] // RVA: 0xC63F58 Offset: 0xC63F58 VA: 0xC63F58
	public int npcTotalActCount; // 0xBC

	// Methods

	// RVA: 0x166B3E4 Offset: 0x166B3E4 VA: 0x166B3E4
	public void .ctor() { }
}

// Namespace: 
public class BattleServantData.ConnectData // TypeDefIndex: 8969
{
	// Fields
	public int uniqueId; // 0x10
	public int hp; // 0x14
	public int atk; // 0x18

	// Methods

	// RVA: 0x167D2E0 Offset: 0x167D2E0 VA: 0x167D2E0
	public void .ctor(int uniqueId, int hp, int atk) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F04 Offset: 0xC43F04 VA: 0xC43F04
private sealed class BattleServantData.<setBaseServantData>c__AnonStorey0 // TypeDefIndex: 8970
{
	// Fields
	internal CommandCodeInfo info; // 0x10

	// Methods

	// RVA: 0x166F96C Offset: 0x166F96C VA: 0x166F96C
	public void .ctor() { }

	// RVA: 0x167F768 Offset: 0x167F768 VA: 0x167F768
	internal bool <>m__0(long id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F14 Offset: 0xC43F14 VA: 0xC43F14
private sealed class BattleServantData.<ReplaceSelfSkillInfo>c__AnonStorey1 // TypeDefIndex: 8971
{
	// Fields
	internal BattleSkillInfoData.TYPE skillInfoType; // 0x10
	internal int index; // 0x14

	// Methods

	// RVA: 0x1671840 Offset: 0x1671840 VA: 0x1671840
	public void .ctor() { }

	// RVA: 0x167F624 Offset: 0x167F624 VA: 0x167F624
	internal bool <>m__0(BattleSkillInfoData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F24 Offset: 0xC43F24 VA: 0xC43F24
private sealed class BattleServantData.<GetHasSideEffectSkillEffectIds>c__AnonStorey2 // TypeDefIndex: 8972
{
	// Fields
	internal FunctionMaster funcMst; // 0x10
	internal List<int> retList; // 0x18

	// Methods

	// RVA: 0x1671E50 Offset: 0x1671E50 VA: 0x1671E50
	public void .ctor() { }

	// RVA: 0x167F400 Offset: 0x167F400 VA: 0x167F400
	internal void <>m__0(SkillLvEntity ent) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F34 Offset: 0xC43F34 VA: 0xC43F34
private sealed class BattleServantData.<isUseSelfSkill>c__AnonStorey3 // TypeDefIndex: 8973
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x16737C0 Offset: 0x16737C0 VA: 0x16737C0
	public void .ctor() { }

	// RVA: 0x167F718 Offset: 0x167F718 VA: 0x167F718
	internal bool <>m__0(BattleSkillInfoData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43F44 Offset: 0xC43F44 VA: 0xC43F44
private sealed class BattleServantData.<getSelfSkillInfo>c__AnonStorey4 // TypeDefIndex: 8974
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x16737C8 Offset: 0x16737C8 VA: 0x16737C8
	public void .ctor() { }

	// RVA: 0x167F678 Offset: 0x167F678 VA: 0x167F678
	internal bool <>m__0(BattleSkillInfoData s) { }
}
