
	[DebuggerHiddenAttribute] // RVA: 0xD44F64 Offset: 0xD44F64 VA: 0xD44F64
	// RVA: 0x1F35CBC Offset: 0x1F35CBC VA: 0x1F35CBC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44F74 Offset: 0xD44F74 VA: 0xD44F74
	// RVA: 0x1F35CC4 Offset: 0x1F35CC4 VA: 0x1F35CC4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44F84 Offset: 0xD44F84 VA: 0xD44F84
	// RVA: 0x1F35CCC Offset: 0x1F35CCC VA: 0x1F35CCC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44F94 Offset: 0xD44F94 VA: 0xD44F94
	// RVA: 0x1F35CE0 Offset: 0x1F35CE0 VA: 0x1F35CE0 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCADA40 Offset: 0xCADA40 VA: 0xCADA40
private sealed class WallHackDetector.<CaptureFrame>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5261
{
	// Fields
	internal RenderTexture <previousActive>__0; // 0x10
	internal bool <detected>__0; // 0x18
	internal WallHackDetector $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD44FA4 Offset: 0xD44FA4 VA: 0xD44FA4
	// RVA: 0x1F35138 Offset: 0x1F35138 VA: 0x1F35138
	public void .ctor() { }

	// RVA: 0x1F352D8 Offset: 0x1F352D8 VA: 0x1F352D8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44FB4 Offset: 0xD44FB4 VA: 0xD44FB4
	// RVA: 0x1F35AC8 Offset: 0x1F35AC8 VA: 0x1F35AC8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44FC4 Offset: 0xD44FC4 VA: 0xD44FC4
	// RVA: 0x1F35AD0 Offset: 0x1F35AD0 VA: 0x1F35AD0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44FD4 Offset: 0xD44FD4 VA: 0xD44FD4
	// RVA: 0x1F35AD8 Offset: 0x1F35AD8 VA: 0x1F35AD8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD44FE4 Offset: 0xD44FE4 VA: 0xD44FE4
	// RVA: 0x1F35AEC Offset: 0x1F35AEC VA: 0x1F35AEC Slot: 6
	public void Reset() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredBool : IEquatable<ObscuredBool> // TypeDefIndex: 5262
{
	// Fields
	private static byte cryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6A1C Offset: 0xCB6A1C VA: 0xCB6A1C
	private byte currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6A2C Offset: 0xCB6A2C VA: 0xCB6A2C
	private int hiddenValue; // 0x4
	[SerializeField] // RVA: 0xCB6A3C Offset: 0xCB6A3C VA: 0xCB6A3C
	private bool fakeValue; // 0x8
	[SerializeField] // RVA: 0xCB6A4C Offset: 0xCB6A4C VA: 0xCB6A4C
	private bool fakeValueChanged; // 0x9
	[SerializeField] // RVA: 0xCB6A5C Offset: 0xCB6A5C VA: 0xCB6A5C
	private bool inited; // 0xA

	// Methods

	// RVA: 0xDC5174 Offset: 0xDC5174 VA: 0xDC5174
	private void .ctor(int value) { }

	// RVA: 0x1F35DD4 Offset: 0x1F35DD4 VA: 0x1F35DD4
	public static void SetNewCryptoKey(byte newKey) { }

	// RVA: 0x1F35E40 Offset: 0x1F35E40 VA: 0x1F35E40
	public static int Encrypt(bool value) { }

	// RVA: 0x1F35EA8 Offset: 0x1F35EA8 VA: 0x1F35EA8
	public static int Encrypt(bool value, byte key) { }

	// RVA: 0x1F35F40 Offset: 0x1F35F40 VA: 0x1F35F40
	public static bool Decrypt(int value) { }

	// RVA: 0x1F35FA8 Offset: 0x1F35FA8 VA: 0x1F35FA8
	public static bool Decrypt(int value, byte key) { }

	// RVA: 0xDC517C Offset: 0xDC517C VA: 0xDC517C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC5184 Offset: 0xDC5184 VA: 0xDC5184
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC518C Offset: 0xDC518C VA: 0xDC518C
	public int GetEncrypted() { }

	// RVA: 0xDC51B4 Offset: 0xDC51B4 VA: 0xDC51B4
	public void SetEncrypted(int encrypted) { }

	// RVA: 0xDC51BC Offset: 0xDC51BC VA: 0xDC51BC
	private bool InternalDecrypt() { }

	// RVA: 0x1F36338 Offset: 0x1F36338 VA: 0x1F36338
	public static ObscuredBool op_Implicit(bool value) { }

	// RVA: 0x1F363E4 Offset: 0x1F363E4 VA: 0x1F363E4
	public static bool op_Implicit(ObscuredBool value) { }

	// RVA: 0xDC51C4 Offset: 0xDC51C4 VA: 0xDC51C4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC51CC Offset: 0xDC51CC VA: 0xDC51CC Slot: 4
	public bool Equals(ObscuredBool obj) { }

	// RVA: 0xDC51D8 Offset: 0xDC51D8 VA: 0xDC51D8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC520C Offset: 0xDC520C VA: 0xDC520C Slot: 3
	public override string ToString() { }

	// RVA: 0x1F365B4 Offset: 0x1F365B4 VA: 0x1F365B4
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredByte : IEquatable<ObscuredByte>, IFormattable // TypeDefIndex: 5263
{
	// Fields
	private static byte cryptoKey; // 0x0
	private byte currentCryptoKey; // 0x0
	private byte hiddenValue; // 0x1
	private byte fakeValue; // 0x2
	private bool inited; // 0x3

	// Methods

	// RVA: 0xDC5294 Offset: 0xDC5294 VA: 0xDC5294
	private void .ctor(byte value) { }

	// RVA: 0x1F36690 Offset: 0x1F36690 VA: 0x1F36690
	public static void SetNewCryptoKey(byte newKey) { }

	// RVA: 0x1F366FC Offset: 0x1F366FC VA: 0x1F366FC
	public static byte EncryptDecrypt(byte value) { }

	// RVA: 0x1F36764 Offset: 0x1F36764 VA: 0x1F36764
	public static byte EncryptDecrypt(byte value, byte key) { }

	// RVA: 0xDC529C Offset: 0xDC529C VA: 0xDC529C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC52A4 Offset: 0xDC52A4 VA: 0xDC52A4
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC52AC Offset: 0xDC52AC VA: 0xDC52AC
	public byte GetEncrypted() { }

	// RVA: 0xDC52D4 Offset: 0xDC52D4 VA: 0xDC52D4
	public void SetEncrypted(byte encrypted) { }

	// RVA: 0xDC52DC Offset: 0xDC52DC VA: 0xDC52DC
	private byte InternalDecrypt() { }

	// RVA: 0x1F36AFC Offset: 0x1F36AFC VA: 0x1F36AFC
	public static ObscuredByte op_Implicit(byte value) { }

	// RVA: 0x1F36B8C Offset: 0x1F36B8C VA: 0x1F36B8C
	public static byte op_Implicit(ObscuredByte value) { }

	// RVA: 0x1F36BB0 Offset: 0x1F36BB0 VA: 0x1F36BB0
	public static ObscuredByte op_Increment(ObscuredByte input) { }

	// RVA: 0x1F36C50 Offset: 0x1F36C50 VA: 0x1F36C50
	public static ObscuredByte op_Decrement(ObscuredByte input) { }

	// RVA: 0xDC52E4 Offset: 0xDC52E4 VA: 0xDC52E4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC52EC Offset: 0xDC52EC VA: 0xDC52EC Slot: 4
	public bool Equals(ObscuredByte obj) { }

	// RVA: 0xDC52F8 Offset: 0xDC52F8 VA: 0xDC52F8 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC5328 Offset: 0xDC5328 VA: 0xDC5328
	public string ToString(string format) { }

	// RVA: 0xDC5360 Offset: 0xDC5360 VA: 0xDC5360 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC5390 Offset: 0xDC5390 VA: 0xDC5390
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC53C8 Offset: 0xDC53C8 VA: 0xDC53C8 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1F36F30 Offset: 0x1F36F30 VA: 0x1F36F30
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredChar : IEquatable<ObscuredChar> // TypeDefIndex: 5264
{
	// Fields
	private static char cryptoKey; // 0x0
	private char currentCryptoKey; // 0x0
	private char hiddenValue; // 0x2
	private char fakeValue; // 0x4
	private bool inited; // 0x6

	// Methods

	// RVA: 0xDC5464 Offset: 0xDC5464 VA: 0xDC5464
	private void .ctor(char value) { }

	// RVA: 0x1F37010 Offset: 0x1F37010 VA: 0x1F37010
	public static void SetNewCryptoKey(char newKey) { }

	// RVA: 0x1F3707C Offset: 0x1F3707C VA: 0x1F3707C
	public static char EncryptDecrypt(char value) { }

	// RVA: 0x1F370E4 Offset: 0x1F370E4 VA: 0x1F370E4
	public static char EncryptDecrypt(char value, char key) { }

	// RVA: 0xDC546C Offset: 0xDC546C VA: 0xDC546C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC5474 Offset: 0xDC5474 VA: 0xDC5474
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC547C Offset: 0xDC547C VA: 0xDC547C
	public char GetEncrypted() { }

	// RVA: 0xDC54A4 Offset: 0xDC54A4 VA: 0xDC54A4
	public void SetEncrypted(char encrypted) { }

	// RVA: 0xDC54AC Offset: 0xDC54AC VA: 0xDC54AC
	private char InternalDecrypt() { }

	// RVA: 0x1F37480 Offset: 0x1F37480 VA: 0x1F37480
	public static ObscuredChar op_Implicit(char value) { }

	// RVA: 0x1F37510 Offset: 0x1F37510 VA: 0x1F37510
	public static char op_Implicit(ObscuredChar value) { }

	// RVA: 0x1F37534 Offset: 0x1F37534 VA: 0x1F37534
	public static ObscuredChar op_Increment(ObscuredChar input) { }

	// RVA: 0x1F375D4 Offset: 0x1F375D4 VA: 0x1F375D4
	public static ObscuredChar op_Decrement(ObscuredChar input) { }

	// RVA: 0xDC54B4 Offset: 0xDC54B4 VA: 0xDC54B4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC54BC Offset: 0xDC54BC VA: 0xDC54BC Slot: 4
	public bool Equals(ObscuredChar obj) { }

	// RVA: 0xDC54C4 Offset: 0xDC54C4 VA: 0xDC54C4 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC54F4 Offset: 0xDC54F4 VA: 0xDC54F4
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC552C Offset: 0xDC552C VA: 0xDC552C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F37838 Offset: 0x1F37838 VA: 0x1F37838
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredDecimal : IEquatable<ObscuredDecimal>, IFormattable // TypeDefIndex: 5265
{
	// Fields
	private static long cryptoKey; // 0x0
	private long currentCryptoKey; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xCB6A6C Offset: 0xCB6A6C VA: 0xCB6A6C
	private byte[] hiddenValueOld; // 0x8
	private ACTkByte16 hiddenValue; // 0x10
	private Decimal fakeValue; // 0x20
	private bool inited; // 0x30

	// Methods

	// RVA: 0xDC5720 Offset: 0xDC5720 VA: 0xDC5720
	private void .ctor(ACTkByte16 value) { }

	// RVA: 0x1F3793C Offset: 0x1F3793C VA: 0x1F3793C
	public static void SetNewCryptoKey(long newKey) { }

	// RVA: 0x1F379A8 Offset: 0x1F379A8 VA: 0x1F379A8
	public static Decimal Encrypt(Decimal value) { }

	// RVA: 0x1F37A28 Offset: 0x1F37A28 VA: 0x1F37A28
	public static Decimal Encrypt(Decimal value, long key) { }

	// RVA: 0x1F37A34 Offset: 0x1F37A34 VA: 0x1F37A34
	private static ACTkByte16 InternalEncrypt(Decimal value) { }

	// RVA: 0x1F37AAC Offset: 0x1F37AAC VA: 0x1F37AAC
	private static ACTkByte16 InternalEncrypt(Decimal value, long key) { }

	// RVA: 0x1F37B34 Offset: 0x1F37B34 VA: 0x1F37B34
	public static Decimal Decrypt(Decimal value) { }

	// RVA: 0x1F37BB4 Offset: 0x1F37BB4 VA: 0x1F37BB4
	public static Decimal Decrypt(Decimal value, long key) { }

	// RVA: 0xDC5728 Offset: 0xDC5728 VA: 0xDC5728
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC5730 Offset: 0xDC5730 VA: 0xDC5730
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC5738 Offset: 0xDC5738 VA: 0xDC5738
	public Decimal GetEncrypted() { }

	// RVA: 0xDC5760 Offset: 0xDC5760 VA: 0xDC5760
	public void SetEncrypted(Decimal encrypted) { }

	// RVA: 0xDC5768 Offset: 0xDC5768 VA: 0xDC5768
	private Decimal InternalDecrypt() { }

	// RVA: 0x1F37F84 Offset: 0x1F37F84 VA: 0x1F37F84
	public static ObscuredDecimal op_Implicit(Decimal value) { }

	// RVA: 0x1F3805C Offset: 0x1F3805C VA: 0x1F3805C
	public static Decimal op_Implicit(ObscuredDecimal value) { }

	// RVA: 0x1F38060 Offset: 0x1F38060 VA: 0x1F38060
	public static ObscuredDecimal op_Explicit(ObscuredFloat f) { }

	// RVA: 0x1F38170 Offset: 0x1F38170 VA: 0x1F38170
	public static ObscuredDecimal op_Increment(ObscuredDecimal input) { }

	// RVA: 0x1F38290 Offset: 0x1F38290 VA: 0x1F38290
	public static ObscuredDecimal op_Decrement(ObscuredDecimal input) { }

	// RVA: 0xDC5770 Offset: 0xDC5770 VA: 0xDC5770 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC57A0 Offset: 0xDC57A0 VA: 0xDC57A0
	public string ToString(string format) { }

	// RVA: 0xDC57E0 Offset: 0xDC57E0 VA: 0xDC57E0
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC5820 Offset: 0xDC5820 VA: 0xDC5820 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xDC5868 Offset: 0xDC5868 VA: 0xDC5868 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC5870 Offset: 0xDC5870 VA: 0xDC5870 Slot: 4
	public bool Equals(ObscuredDecimal obj) { }

	// RVA: 0xDC58B8 Offset: 0xDC58B8 VA: 0xDC58B8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F385CC Offset: 0x1F385CC VA: 0x1F385CC
	private static void .cctor() { }
}

// Namespace: 
private struct ObscuredDecimal.DecimalLongBytesUnion // TypeDefIndex: 5266
{
	// Fields
	public Decimal d; // 0x0
	public long l1; // 0x0
	public long l2; // 0x8
	public ACTkByte16 b16; // 0x0
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredDouble : IEquatable<ObscuredDouble>, IFormattable // TypeDefIndex: 5267
{
	// Fields
	private static long cryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6AA4 Offset: 0xCB6AA4 VA: 0xCB6AA4
	private long currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6AB4 Offset: 0xCB6AB4 VA: 0xCB6AB4
	private ACTkByte8 hiddenValue; // 0x8
	[SerializeField] // RVA: 0xCB6AC4 Offset: 0xCB6AC4 VA: 0xCB6AC4
	[FormerlySerializedAsAttribute] // RVA: 0xCB6AC4 Offset: 0xCB6AC4 VA: 0xCB6AC4
	private byte[] hiddenValueOld; // 0x10
	[SerializeField] // RVA: 0xCB6B10 Offset: 0xCB6B10 VA: 0xCB6B10
	private double fakeValue; // 0x18
	[SerializeField] // RVA: 0xCB6B20 Offset: 0xCB6B20 VA: 0xCB6B20
	private bool inited; // 0x20

	// Methods

	// RVA: 0xDC5AAC Offset: 0xDC5AAC VA: 0xDC5AAC
	private void .ctor(ACTkByte8 value) { }

	// RVA: 0x1F386AC Offset: 0x1F386AC VA: 0x1F386AC
	public static void SetNewCryptoKey(long newKey) { }

	// RVA: 0x1F38718 Offset: 0x1F38718 VA: 0x1F38718
	public static long Encrypt(double value) { }

	// RVA: 0x1F38794 Offset: 0x1F38794 VA: 0x1F38794
	public static long Encrypt(double value, long key) { }

	// RVA: 0x1F387A0 Offset: 0x1F387A0 VA: 0x1F387A0
	private static ACTkByte8 InternalEncrypt(double value) { }

	// RVA: 0x1F38810 Offset: 0x1F38810 VA: 0x1F38810
	private static ACTkByte8 InternalEncrypt(double value, long key) { }

	// RVA: 0x1F38894 Offset: 0x1F38894 VA: 0x1F38894
	public static double Decrypt(long value) { }

	// RVA: 0x1F38908 Offset: 0x1F38908 VA: 0x1F38908
	public static double Decrypt(long value, long key) { }

	// RVA: 0xDC5AB4 Offset: 0xDC5AB4 VA: 0xDC5AB4
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC5ABC Offset: 0xDC5ABC VA: 0xDC5ABC
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC5AC4 Offset: 0xDC5AC4 VA: 0xDC5AC4
	public long GetEncrypted() { }

	// RVA: 0xDC5AEC Offset: 0xDC5AEC VA: 0xDC5AEC
	public void SetEncrypted(long encrypted) { }

	// RVA: 0xDC5AF4 Offset: 0xDC5AF4 VA: 0xDC5AF4
	private double InternalDecrypt() { }

	// RVA: 0x1F38C18 Offset: 0x1F38C18 VA: 0x1F38C18
	public static ObscuredDouble op_Implicit(double value) { }

	// RVA: 0x1F38CD0 Offset: 0x1F38CD0 VA: 0x1F38CD0
	public static double op_Implicit(ObscuredDouble value) { }

	// RVA: 0x1F38CD4 Offset: 0x1F38CD4 VA: 0x1F38CD4
	public static ObscuredDouble op_Increment(ObscuredDouble input) { }

	// RVA: 0x1F38D90 Offset: 0x1F38D90 VA: 0x1F38D90
	public static ObscuredDouble op_Decrement(ObscuredDouble input) { }

	// RVA: 0xDC5AFC Offset: 0xDC5AFC VA: 0xDC5AFC Slot: 3
	public override string ToString() { }

	// RVA: 0xDC5B2C Offset: 0xDC5B2C VA: 0xDC5B2C
	public string ToString(string format) { }

	// RVA: 0xDC5B64 Offset: 0xDC5B64 VA: 0xDC5B64
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC5B9C Offset: 0xDC5B9C VA: 0xDC5B9C Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xDC5BE4 Offset: 0xDC5BE4 VA: 0xDC5BE4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC5BEC Offset: 0xDC5BEC VA: 0xDC5BEC Slot: 4
	public bool Equals(ObscuredDouble obj) { }

	// RVA: 0xDC5C2C Offset: 0xDC5C2C VA: 0xDC5C2C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F39038 Offset: 0x1F39038 VA: 0x1F39038
	private static void .cctor() { }
}

// Namespace: 
private struct ObscuredDouble.DoubleLongBytesUnion // TypeDefIndex: 5268
{
	// Fields
	public double d; // 0x0
	public long l; // 0x0
	public ACTkByte8 b8; // 0x0
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredFloat : IEquatable<ObscuredFloat>, IFormattable // TypeDefIndex: 5269
{
	// Fields
	private static int cryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6B30 Offset: 0xCB6B30 VA: 0xCB6B30
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6B40 Offset: 0xCB6B40 VA: 0xCB6B40
	private ACTkByte4 hiddenValue; // 0x4
	[SerializeField] // RVA: 0xCB6B50 Offset: 0xCB6B50 VA: 0xCB6B50
	[FormerlySerializedAsAttribute] // RVA: 0xCB6B50 Offset: 0xCB6B50 VA: 0xCB6B50
	private byte[] hiddenValueOld; // 0x8
	[SerializeField] // RVA: 0xCB6B9C Offset: 0xCB6B9C VA: 0xCB6B9C
	private float fakeValue; // 0x10
	[SerializeField] // RVA: 0xCB6BAC Offset: 0xCB6BAC VA: 0xCB6BAC
	private bool inited; // 0x14

	// Methods

	// RVA: 0xDC5E20 Offset: 0xDC5E20 VA: 0xDC5E20
	private void .ctor(ACTkByte4 value) { }

	// RVA: 0x1F3911C Offset: 0x1F3911C VA: 0x1F3911C
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1F39188 Offset: 0x1F39188 VA: 0x1F39188
	public static int Encrypt(float value) { }

	// RVA: 0x1F39204 Offset: 0x1F39204 VA: 0x1F39204
	public static int Encrypt(float value, int key) { }

	// RVA: 0x1F39210 Offset: 0x1F39210 VA: 0x1F39210
	private static ACTkByte4 InternalEncrypt(float value) { }

	// RVA: 0x1F39288 Offset: 0x1F39288 VA: 0x1F39288
	private static ACTkByte4 InternalEncrypt(float value, int key) { }

	// RVA: 0x1F3930C Offset: 0x1F3930C VA: 0x1F3930C
	public static float Decrypt(int value) { }

	// RVA: 0x1F39380 Offset: 0x1F39380 VA: 0x1F39380
	public static float Decrypt(int value, int key) { }

	// RVA: 0xDC5E2C Offset: 0xDC5E2C VA: 0xDC5E2C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC5E34 Offset: 0xDC5E34 VA: 0xDC5E34
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC5E3C Offset: 0xDC5E3C VA: 0xDC5E3C
	public int GetEncrypted() { }

	// RVA: 0xDC5E64 Offset: 0xDC5E64 VA: 0xDC5E64
	public void SetEncrypted(int encrypted) { }

	// RVA: 0xDC5E6C Offset: 0xDC5E6C VA: 0xDC5E6C
	private float InternalDecrypt() { }

	// RVA: 0x1F396CC Offset: 0x1F396CC VA: 0x1F396CC
	public static ObscuredFloat op_Implicit(float value) { }

	// RVA: 0x1F3816C Offset: 0x1F3816C VA: 0x1F3816C
	public static float op_Implicit(ObscuredFloat value) { }

	// RVA: 0x1F39778 Offset: 0x1F39778 VA: 0x1F39778
	public static ObscuredFloat op_Increment(ObscuredFloat input) { }

	// RVA: 0x1F3982C Offset: 0x1F3982C VA: 0x1F3982C
	public static ObscuredFloat op_Decrement(ObscuredFloat input) { }

	// RVA: 0xDC5E74 Offset: 0xDC5E74 VA: 0xDC5E74 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC5E7C Offset: 0xDC5E7C VA: 0xDC5E7C Slot: 4
	public bool Equals(ObscuredFloat obj) { }

	// RVA: 0xDC5EB4 Offset: 0xDC5EB4 VA: 0xDC5EB4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC5EE4 Offset: 0xDC5EE4 VA: 0xDC5EE4 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC5F14 Offset: 0xDC5F14 VA: 0xDC5F14
	public string ToString(string format) { }

	// RVA: 0xDC5F4C Offset: 0xDC5F4C VA: 0xDC5F4C
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC5F84 Offset: 0xDC5F84 VA: 0xDC5F84 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1F39ACC Offset: 0x1F39ACC VA: 0x1F39ACC
	private static void .cctor() { }
}

// Namespace: 
private struct ObscuredFloat.FloatIntBytesUnion // TypeDefIndex: 5270
{
	// Fields
	public float f; // 0x0
	public int i; // 0x0
	public ACTkByte4 b4; // 0x0
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredInt : IEquatable<ObscuredInt>, IFormattable // TypeDefIndex: 5271
{
	// Fields
	private static int cryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6BBC Offset: 0xCB6BBC VA: 0xCB6BBC
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6BCC Offset: 0xCB6BCC VA: 0xCB6BCC
	private int hiddenValue; // 0x4
	[SerializeField] // RVA: 0xCB6BDC Offset: 0xCB6BDC VA: 0xCB6BDC
	private int fakeValue; // 0x8
	[SerializeField] // RVA: 0xCB6BEC Offset: 0xCB6BEC VA: 0xCB6BEC
	private bool inited; // 0xC

	// Methods

	// RVA: 0xDC6020 Offset: 0xDC6020 VA: 0xDC6020
	private void .ctor(int value) { }

	// RVA: 0x1F39BAC Offset: 0x1F39BAC VA: 0x1F39BAC
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1F39C18 Offset: 0x1F39C18 VA: 0x1F39C18
	public static int Encrypt(int value) { }

	// RVA: 0x1F39C80 Offset: 0x1F39C80 VA: 0x1F39C80
	public static int Encrypt(int value, int key) { }

	// RVA: 0x1F39D00 Offset: 0x1F39D00 VA: 0x1F39D00
	public static int Decrypt(int value) { }

	// RVA: 0x1F39D68 Offset: 0x1F39D68 VA: 0x1F39D68
	public static int Decrypt(int value, int key) { }

	// RVA: 0xDC6028 Offset: 0xDC6028 VA: 0xDC6028
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC6030 Offset: 0xDC6030 VA: 0xDC6030
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC6038 Offset: 0xDC6038 VA: 0xDC6038
	public int GetEncrypted() { }

	// RVA: 0xDC6060 Offset: 0xDC6060 VA: 0xDC6060
	public void SetEncrypted(int encrypted) { }

	// RVA: 0xDC6068 Offset: 0xDC6068 VA: 0xDC6068
	private int InternalDecrypt() { }

	// RVA: 0x1F20BFC Offset: 0x1F20BFC VA: 0x1F20BFC
	public static ObscuredInt op_Implicit(int value) { }

	// RVA: 0x1F20C8C Offset: 0x1F20C8C VA: 0x1F20C8C
	public static int op_Implicit(ObscuredInt value) { }

	// RVA: 0x1F3A100 Offset: 0x1F3A100 VA: 0x1F3A100
	public static ObscuredFloat op_Implicit(ObscuredInt value) { }

	// RVA: 0x1F3A184 Offset: 0x1F3A184 VA: 0x1F3A184
	public static ObscuredDouble op_Implicit(ObscuredInt value) { }

	// RVA: 0x1F3A208 Offset: 0x1F3A208 VA: 0x1F3A208
	public static ObscuredUInt op_Explicit(ObscuredInt value) { }

	// RVA: 0x1F3A288 Offset: 0x1F3A288 VA: 0x1F3A288
	public static ObscuredInt op_Increment(ObscuredInt input) { }

	// RVA: 0x1F3A324 Offset: 0x1F3A324 VA: 0x1F3A324
	public static ObscuredInt op_Decrement(ObscuredInt input) { }

	// RVA: 0xDC6070 Offset: 0xDC6070 VA: 0xDC6070 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC6078 Offset: 0xDC6078 VA: 0xDC6078 Slot: 4
	public bool Equals(ObscuredInt obj) { }

	// RVA: 0xDC6080 Offset: 0xDC6080 VA: 0xDC6080 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC60B0 Offset: 0xDC60B0 VA: 0xDC60B0 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC60E0 Offset: 0xDC60E0 VA: 0xDC60E0
	public string ToString(string format) { }

	// RVA: 0xDC6118 Offset: 0xDC6118 VA: 0xDC6118
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC6150 Offset: 0xDC6150 VA: 0xDC6150 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1F3A5FC Offset: 0x1F3A5FC VA: 0x1F3A5FC
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredLong : IEquatable<ObscuredLong>, IFormattable // TypeDefIndex: 5272
{
	// Fields
	private static long cryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6BFC Offset: 0xCB6BFC VA: 0xCB6BFC
	private long currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xCB6C0C Offset: 0xCB6C0C VA: 0xCB6C0C
	private long hiddenValue; // 0x8
	[SerializeField] // RVA: 0xCB6C1C Offset: 0xCB6C1C VA: 0xCB6C1C
	private long fakeValue; // 0x10
	[SerializeField] // RVA: 0xCB6C2C Offset: 0xCB6C2C VA: 0xCB6C2C
	private bool inited; // 0x18

	// Methods

	// RVA: 0xDC7684 Offset: 0xDC7684 VA: 0xDC7684
	private void .ctor(long value) { }

	// RVA: 0x21301C8 Offset: 0x21301C8 VA: 0x21301C8
	public static void SetNewCryptoKey(long newKey) { }

	// RVA: 0x2130234 Offset: 0x2130234 VA: 0x2130234
	public static long Encrypt(long value) { }

	// RVA: 0x213031C Offset: 0x213031C VA: 0x213031C
	public static long Decrypt(long value) { }

	// RVA: 0x213029C Offset: 0x213029C VA: 0x213029C
	public static long Encrypt(long value, long key) { }

	// RVA: 0x2130384 Offset: 0x2130384 VA: 0x2130384
	public static long Decrypt(long value, long key) { }

	// RVA: 0xDC768C Offset: 0xDC768C VA: 0xDC768C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xDC7694 Offset: 0xDC7694 VA: 0xDC7694
	public void RandomizeCryptoKey() { }

	// RVA: 0xDC769C Offset: 0xDC769C VA: 0xDC769C
	public long GetEncrypted() { }

	// RVA: 0xDC76C4 Offset: 0xDC76C4 VA: 0xDC76C4
	public void SetEncrypted(long encrypted) { }

	// RVA: 0xDC76CC Offset: 0xDC76CC VA: 0xDC76CC
	private long InternalDecrypt() { }

	// RVA: 0x21306F0 Offset: 0x21306F0 VA: 0x21306F0
	public static ObscuredLong op_Implicit(long value) { }

	// RVA: 0x2130798 Offset: 0x2130798 VA: 0x2130798
	public static long op_Implicit(ObscuredLong value) { }

	// RVA: 0x213079C Offset: 0x213079C VA: 0x213079C
	public static ObscuredLong op_Increment(ObscuredLong input) { }

	// RVA: 0x213084C Offset: 0x213084C VA: 0x213084C
	public static ObscuredLong op_Decrement(ObscuredLong input) { }

	// RVA: 0xDC76D4 Offset: 0xDC76D4 VA: 0xDC76D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xDC76DC Offset: 0xDC76DC VA: 0xDC76DC Slot: 4
	public bool Equals(ObscuredLong obj) { }

	// RVA: 0xDC7714 Offset: 0xDC7714 VA: 0xDC7714 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDC7744 Offset: 0xDC7744 VA: 0xDC7744 Slot: 3
	public override string ToString() { }

	// RVA: 0xDC7774 Offset: 0xDC7774 VA: 0xDC7774
	public string ToString(string format) { }

	// RVA: 0xDC77AC Offset: 0xDC77AC VA: 0xDC77AC
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xDC77E4 Offset: 0xDC77E4 VA: 0xDC77E4 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x2130B4C Offset: 0x2130B4C VA: 0x2130B4C
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
public static class ObscuredPrefs // TypeDefIndex: 5273
{
	// Fields
	private const byte VERSION = 2;
	private const string RAW_NOT_FOUND = "{not_found}";
	private const string DATA_SEPARATOR = "|";
	private static bool foreignSavesReported; // 0x0
	private static string cryptoKey; // 0x8
	private static string deviceId; // 0x10
	private static uint deviceIdHash; // 0x18
	public static Action onAlterationDetected; // 0x20
	public static bool preservePlayerPrefs; // 0x28
	public static Action onPossibleForeignSavesDetected; // 0x30
	public static ObscuredPrefs.DeviceLockLevel lockToDevice; // 0x38
	public static bool readForeignSaves; // 0x39
	public static bool emergencyMode; // 0x3A
	private const char DEPRECATED_RAW_SEPARATOR = '\x3a';
	private static string deprecatedDeviceId; // 0x40

	// Properties
	public static string CryptoKey { get; set; }
	public static string DeviceId { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4BB9C Offset: 0xD4BB9C VA: 0xD4BB9C
	internal static string DeviceID { get; set; }
	private static uint DeviceIdHash { get; }
	private static string DeprecatedDeviceId { get; }

	// Methods

	// RVA: 0x2130BA4 Offset: 0x2130BA4 VA: 0x2130BA4
	public static void set_CryptoKey(string value) { }

	// RVA: 0x2130C10 Offset: 0x2130C10 VA: 0x2130C10
	public static string get_CryptoKey() { }

	// RVA: 0x2130C78 Offset: 0x2130C78 VA: 0x2130C78
	public static string get_DeviceId() { }

	// RVA: 0x2130DCC Offset: 0x2130DCC VA: 0x2130DCC
	public static void set_DeviceId(string value) { }

	// RVA: 0x2130E38 Offset: 0x2130E38 VA: 0x2130E38
	internal static string get_DeviceID() { }

	// RVA: 0x2130E94 Offset: 0x2130E94 VA: 0x2130E94
	internal static void set_DeviceID(string value) { }

	// RVA: 0x2130EF8 Offset: 0x2130EF8 VA: 0x2130EF8
	private static uint get_DeviceIdHash() { }

	// RVA: 0x21310C8 Offset: 0x21310C8 VA: 0x21310C8
	public static void ForceLockToDeviceInit() { }

	[ObsoleteAttribute] // RVA: 0xD34FC8 Offset: 0xD34FC8 VA: 0xD34FC8
	// RVA: 0x21311A4 Offset: 0x21311A4 VA: 0x21311A4
	internal static void SetNewCryptoKey(string newKey) { }

	// RVA: 0x2131208 Offset: 0x2131208 VA: 0x2131208
	public static void SetInt(string key, int value) { }

	// RVA: 0x2131460 Offset: 0x2131460 VA: 0x2131460
	public static int GetInt(string key) { }

	// RVA: 0x21314C8 Offset: 0x21314C8 VA: 0x21314C8
	public static int GetInt(string key, int defaultValue) { }

	// RVA: 0x21313B4 Offset: 0x21313B4 VA: 0x21313B4
	internal static string EncryptIntValue(string key, int value) { }

	// RVA: 0x2131720 Offset: 0x2131720 VA: 0x2131720
	internal static int DecryptIntValue(string key, string encryptedInput, int defaultValue) { }

	// RVA: 0x2132718 Offset: 0x2132718 VA: 0x2132718
	public static void SetUInt(string key, uint value) { }

	// RVA: 0x2132854 Offset: 0x2132854 VA: 0x2132854
	public static uint GetUInt(string key) { }

	// RVA: 0x21328BC Offset: 0x21328BC VA: 0x21328BC
	public static uint GetUInt(string key, uint defaultValue) { }

	// RVA: 0x21327A8 Offset: 0x21327A8 VA: 0x21327A8
	private static string EncryptUIntValue(string key, uint value) { }

	// RVA: 0x21329B8 Offset: 0x21329B8 VA: 0x21329B8
	private static uint DecryptUIntValue(string key, string encryptedInput, uint defaultValue) { }

	// RVA: 0x2132B44 Offset: 0x2132B44 VA: 0x2132B44
	public static void SetString(string key, string value) { }

	// RVA: 0x2132C9C Offset: 0x2132C9C VA: 0x2132C9C
	public static string GetString(string key) { }

	// RVA: 0x2132D34 Offset: 0x2132D34 VA: 0x2132D34
	public static string GetString(string key, string defaultValue) { }

	// RVA: 0x2132BD4 Offset: 0x2132BD4 VA: 0x2132BD4
	internal static string EncryptStringValue(string key, string value) { }

	// RVA: 0x2132EDC Offset: 0x2132EDC VA: 0x2132EDC
	internal static string DecryptStringValue(string key, string encryptedInput, string defaultValue) { }

	// RVA: 0x2133080 Offset: 0x2133080 VA: 0x2133080
	public static void SetFloat(string key, float value) { }

	// RVA: 0x21331BC Offset: 0x21331BC VA: 0x21331BC
	public static float GetFloat(string key) { }

	// RVA: 0x2133224 Offset: 0x2133224 VA: 0x2133224
	public static float GetFloat(string key, float defaultValue) { }

	// RVA: 0x2133110 Offset: 0x2133110 VA: 0x2133110
	internal static string EncryptFloatValue(string key, float value) { }

	// RVA: 0x21333D0 Offset: 0x21333D0 VA: 0x21333D0
	internal static float DecryptFloatValue(string key, string encryptedInput, float defaultValue) { }

	// RVA: 0x213355C Offset: 0x213355C VA: 0x213355C
	public static void SetDouble(string key, double value) { }

	// RVA: 0x2133698 Offset: 0x2133698 VA: 0x2133698
	public static double GetDouble(string key) { }

	// RVA: 0x2133700 Offset: 0x2133700 VA: 0x2133700
	public static double GetDouble(string key, double defaultValue) { }

	// RVA: 0x21335EC Offset: 0x21335EC VA: 0x21335EC
	private static string EncryptDoubleValue(string key, double value) { }

	// RVA: 0x2133808 Offset: 0x2133808 VA: 0x2133808
	private static double DecryptDoubleValue(string key, string encryptedInput, double defaultValue) { }

	// RVA: 0x2133994 Offset: 0x2133994 VA: 0x2133994
	public static void SetLong(string key, long value) { }

	// RVA: 0x2133AD0 Offset: 0x2133AD0 VA: 0x2133AD0
	public static long GetLong(string key) { }

	// RVA: 0x2133B38 Offset: 0x2133B38 VA: 0x2133B38
	public static long GetLong(string key, long defaultValue) { }

	// RVA: 0x2133A24 Offset: 0x2133A24 VA: 0x2133A24
	private static string EncryptLongValue(string key, long value) { }

	// RVA: 0x2133C34 Offset: 0x2133C34 VA: 0x2133C34
	private static long DecryptLongValue(string key, string encryptedInput, long defaultValue) { }

	// RVA: 0x2133DC0 Offset: 0x2133DC0 VA: 0x2133DC0
	public static void SetBool(string key, bool value) { }

	// RVA: 0x2133EFC Offset: 0x2133EFC VA: 0x2133EFC
	public static bool GetBool(string key) { }

	// RVA: 0x2133F64 Offset: 0x2133F64 VA: 0x2133F64
	public static bool GetBool(string key, bool defaultValue) { }

	// RVA: 0x2133E50 Offset: 0x2133E50 VA: 0x2133E50
	private static string EncryptBoolValue(string key, bool value) { }

	// RVA: 0x2134060 Offset: 0x2134060 VA: 0x2134060
	private static bool DecryptBoolValue(string key, string encryptedInput, bool defaultValue) { }

	// RVA: 0x21341F8 Offset: 0x21341F8 VA: 0x21341F8
	public static void SetByteArray(string key, byte[] value) { }

	// RVA: 0x2134300 Offset: 0x2134300 VA: 0x2134300
	public static byte[] GetByteArray(string key) { }

	// RVA: 0x213436C Offset: 0x213436C VA: 0x213436C
	public static byte[] GetByteArray(string key, byte defaultValue, int defaultLength) { }

	// RVA: 0x2134288 Offset: 0x2134288 VA: 0x2134288
	private static string EncryptByteArrayValue(string key, byte[] value) { }

	// RVA: 0x2134554 Offset: 0x2134554 VA: 0x2134554
	private static byte[] DecryptByteArrayValue(string key, string encryptedInput, byte defaultValue, int defaultLength) { }

	// RVA: 0x2134498 Offset: 0x2134498 VA: 0x2134498
	private static byte[] ConstructByteArray(byte value, int length) { }

	// RVA: 0x2134718 Offset: 0x2134718 VA: 0x2134718
	public static void SetVector2(string key, Vector2 value) { }

	// RVA: 0x21348B0 Offset: 0x21348B0 VA: 0x21348B0
	public static Vector2 GetVector2(string key) { }

	// RVA: 0x2134954 Offset: 0x2134954 VA: 0x2134954
	public static Vector2 GetVector2(string key, Vector2 defaultValue) { }

	// RVA: 0x21347B0 Offset: 0x21347B0 VA: 0x21347B0
	private static string EncryptVector2Value(string key, Vector2 value) { }

	// RVA: 0x2134A60 Offset: 0x2134A60 VA: 0x2134A60
	private static Vector2 DecryptVector2Value(string key, string encryptedInput, Vector2 defaultValue) { }

	// RVA: 0x2134D14 Offset: 0x2134D14 VA: 0x2134D14
	public static void SetVector3(string key, Vector3 value) { }

	// RVA: 0x2134EEC Offset: 0x2134EEC VA: 0x2134EEC
	public static Vector3 GetVector3(string key) { }

	// RVA: 0x2134FA0 Offset: 0x2134FA0 VA: 0x2134FA0
	public static Vector3 GetVector3(string key, Vector3 defaultValue) { }

	// RVA: 0x2134DBC Offset: 0x2134DBC VA: 0x2134DBC
	private static string EncryptVector3Value(string key, Vector3 value) { }

	// RVA: 0x21350C4 Offset: 0x21350C4 VA: 0x21350C4
	private static Vector3 DecryptVector3Value(string key, string encryptedInput, Vector3 defaultValue) { }

	// RVA: 0x21353D0 Offset: 0x21353D0 VA: 0x21353D0
	public static void SetQuaternion(string key, Quaternion value) { }

	// RVA: 0x21355D8 Offset: 0x21355D8 VA: 0x21355D8
	public static Quaternion GetQuaternion(string key) { }

	// RVA: 0x2135694 Offset: 0x2135694 VA: 0x2135694
	public static Quaternion GetQuaternion(string key, Quaternion defaultValue) { }

	// RVA: 0x2135480 Offset: 0x2135480 VA: 0x2135480
