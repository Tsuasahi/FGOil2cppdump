
	// RVA: 0x1969318 Offset: 0x1969318 VA: 0x1969318
	private void Awake() { }

	// RVA: 0x1969438 Offset: 0x1969438 VA: 0x1969438 Slot: 4
	protected override void OnDestroy() { }

	// RVA: 0x19695C8 Offset: 0x19695C8 VA: 0x19695C8
	private void OnLevelWasLoadedNew(Scene scene, LoadSceneMode mode) { }

	// RVA: 0x19695CC Offset: 0x19695CC VA: 0x19695CC
	private void OnLevelLoadedCallback() { }

	// RVA: 0x19696C0 Offset: 0x19696C0 VA: 0x19696C0
	private void FixedUpdate() { }

	// RVA: 0x1969814 Offset: 0x1969814 VA: 0x1969814
	private void Update() { }

	// RVA: 0x1968D40 Offset: 0x1968D40 VA: 0x1968D40
	private void StartDetectionInternal(UnityAction callback, Vector3 servicePosition, byte falsePositivesInRow) { }

	// RVA: 0x19699E0 Offset: 0x19699E0 VA: 0x19699E0 Slot: 9
	protected override void StartDetectionAutomatically() { }

	// RVA: 0x19699F4 Offset: 0x19699F4 VA: 0x19699F4 Slot: 11
	protected override void PauseDetector() { }

	// RVA: 0x1969A44 Offset: 0x1969A44 VA: 0x1969A44 Slot: 12
	protected override void ResumeDetector() { }

	// RVA: 0x1969AC0 Offset: 0x1969AC0 VA: 0x1969AC0 Slot: 10
	protected override void StopDetectionInternal() { }

	// RVA: 0x1969AFC Offset: 0x1969AFC VA: 0x1969AFC Slot: 6
	protected override void DisposeInternal() { }

	// RVA: 0x1966BA4 Offset: 0x1966BA4 VA: 0x1966BA4
	private void UpdateServiceContainer() { }

	[DebuggerHiddenAttribute] // RVA: 0xCC78D4 Offset: 0xCC78D4 VA: 0xCC78D4
	// RVA: 0x1969970 Offset: 0x1969970 VA: 0x1969970
	private IEnumerator InitDetector() { }

	// RVA: 0x19681C4 Offset: 0x19681C4 VA: 0x19681C4
	private void StartRigidModule() { }

	// RVA: 0x1968608 Offset: 0x1968608 VA: 0x1968608
	private void StartControllerModule() { }

	// RVA: 0x19688E8 Offset: 0x19688E8 VA: 0x19688E8
	private void StartWireframeModule() { }

	// RVA: 0x196A1EC Offset: 0x196A1EC VA: 0x196A1EC
	private void ShootWireframeModule() { }

	[DebuggerHiddenAttribute] // RVA: 0xCC78E4 Offset: 0xCC78E4 VA: 0xCC78E4
	// RVA: 0x196A260 Offset: 0x196A260 VA: 0x196A260
	private IEnumerator CaptureFrame() { }

	// RVA: 0x1968A9C Offset: 0x1968A9C VA: 0x1968A9C
	private void StartRaycastModule() { }

	// RVA: 0x196A2D8 Offset: 0x196A2D8 VA: 0x196A2D8
	private void ShootRaycastModule() { }

	// RVA: 0x1968444 Offset: 0x1968444 VA: 0x1968444
	private void StopRigidModule() { }

	// RVA: 0x196878C Offset: 0x196878C VA: 0x196878C
	private void StopControllerModule() { }

	// RVA: 0x1968978 Offset: 0x1968978 VA: 0x1968978
	private void StopWireframeModule() { }

	// RVA: 0x1968B18 Offset: 0x1968B18 VA: 0x1968B18
	private void StopRaycastModule() { }

	// RVA: 0x1969D90 Offset: 0x1969D90 VA: 0x1969D90
	private void InitRigidModule() { }

	// RVA: 0x196A030 Offset: 0x196A030 VA: 0x196A030
	private void InitControllerModule() { }

	// RVA: 0x1969CC8 Offset: 0x1969CC8 VA: 0x1969CC8
	private void UninitRigidModule() { }

	// RVA: 0x1969F68 Offset: 0x1969F68 VA: 0x1969F68
	private void UninitControllerModule() { }

	// RVA: 0x19697B8 Offset: 0x19697B8 VA: 0x19697B8
	private bool Detect() { }

	// RVA: 0x1969BE8 Offset: 0x1969BE8 VA: 0x1969BE8
	private static Color32 GenerateColor() { }

	// RVA: 0x1969C64 Offset: 0x1969C64 VA: 0x1969C64
	private static bool ColorsSimilar(Color32 c1, Color32 c2, int tolerance) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41994 Offset: 0xC41994 VA: 0xC41994
private sealed class WallHackDetector.<InitDetector>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5260
{
	// Fields
	internal WallHackDetector $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD7BF0 Offset: 0xCD7BF0 VA: 0xCD7BF0
	// RVA: 0x1969CC0 Offset: 0x1969CC0 VA: 0x1969CC0
	public void .ctor() { }

	// RVA: 0x196ACEC Offset: 0x196ACEC VA: 0x196ACEC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C00 Offset: 0xCD7C00 VA: 0xCD7C00
	// RVA: 0x196AE54 Offset: 0x196AE54 VA: 0x196AE54 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C10 Offset: 0xCD7C10 VA: 0xCD7C10
	// RVA: 0x196AE5C Offset: 0x196AE5C VA: 0x196AE5C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C20 Offset: 0xCD7C20 VA: 0xCD7C20
	// RVA: 0x196AE64 Offset: 0x196AE64 VA: 0x196AE64 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C30 Offset: 0xCD7C30 VA: 0xCD7C30
	// RVA: 0x196AE78 Offset: 0x196AE78 VA: 0x196AE78 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC419A4 Offset: 0xC419A4 VA: 0xC419A4
private sealed class WallHackDetector.<CaptureFrame>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5261
{
	// Fields
	internal RenderTexture <previousActive>__0; // 0x10
	internal bool <detected>__0; // 0x18
	internal WallHackDetector $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD7C40 Offset: 0xCD7C40 VA: 0xCD7C40
	// RVA: 0x196A2D0 Offset: 0x196A2D0 VA: 0x196A2D0
	public void .ctor() { }

	// RVA: 0x196A470 Offset: 0x196A470 VA: 0x196A470 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C50 Offset: 0xCD7C50 VA: 0xCD7C50
	// RVA: 0x196AC60 Offset: 0x196AC60 VA: 0x196AC60 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C60 Offset: 0xCD7C60 VA: 0xCD7C60
	// RVA: 0x196AC68 Offset: 0x196AC68 VA: 0x196AC68 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C70 Offset: 0xCD7C70 VA: 0xCD7C70
	// RVA: 0x196AC70 Offset: 0x196AC70 VA: 0x196AC70 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD7C80 Offset: 0xCD7C80 VA: 0xCD7C80
	// RVA: 0x196AC84 Offset: 0x196AC84 VA: 0x196AC84 Slot: 6
	public void Reset() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredBool : IEquatable<ObscuredBool> // TypeDefIndex: 5262
{
	// Fields
	private static byte cryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4A990 Offset: 0xC4A990 VA: 0xC4A990
	private byte currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4A9A0 Offset: 0xC4A9A0 VA: 0xC4A9A0
	private int hiddenValue; // 0x4
	[SerializeField] // RVA: 0xC4A9B0 Offset: 0xC4A9B0 VA: 0xC4A9B0
	private bool fakeValue; // 0x8
	[SerializeField] // RVA: 0xC4A9C0 Offset: 0xC4A9C0 VA: 0xC4A9C0
	private bool fakeValueChanged; // 0x9
	[SerializeField] // RVA: 0xC4A9D0 Offset: 0xC4A9D0 VA: 0xC4A9D0
	private bool inited; // 0xA

	// Methods

	// RVA: 0xD582DC Offset: 0xD582DC VA: 0xD582DC
	private void .ctor(int value) { }

	// RVA: 0x196AF6C Offset: 0x196AF6C VA: 0x196AF6C
	public static void SetNewCryptoKey(byte newKey) { }

	// RVA: 0x196AFD8 Offset: 0x196AFD8 VA: 0x196AFD8
	public static int Encrypt(bool value) { }

	// RVA: 0x196B040 Offset: 0x196B040 VA: 0x196B040
	public static int Encrypt(bool value, byte key) { }

	// RVA: 0x196B0D8 Offset: 0x196B0D8 VA: 0x196B0D8
	public static bool Decrypt(int value) { }

	// RVA: 0x196B140 Offset: 0x196B140 VA: 0x196B140
	public static bool Decrypt(int value, byte key) { }

	// RVA: 0xD582E4 Offset: 0xD582E4 VA: 0xD582E4
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD582EC Offset: 0xD582EC VA: 0xD582EC
	public void RandomizeCryptoKey() { }

	// RVA: 0xD582F4 Offset: 0xD582F4 VA: 0xD582F4
	public int GetEncrypted() { }

	// RVA: 0xD5831C Offset: 0xD5831C VA: 0xD5831C
	public void SetEncrypted(int encrypted) { }

	// RVA: 0xD58324 Offset: 0xD58324 VA: 0xD58324
	private bool InternalDecrypt() { }

	// RVA: 0x196B4D0 Offset: 0x196B4D0 VA: 0x196B4D0
	public static ObscuredBool op_Implicit(bool value) { }

	// RVA: 0x196B57C Offset: 0x196B57C VA: 0x196B57C
	public static bool op_Implicit(ObscuredBool value) { }

	// RVA: 0xD5832C Offset: 0xD5832C VA: 0xD5832C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD58334 Offset: 0xD58334 VA: 0xD58334 Slot: 4
	public bool Equals(ObscuredBool obj) { }

	// RVA: 0xD58340 Offset: 0xD58340 VA: 0xD58340 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD58374 Offset: 0xD58374 VA: 0xD58374 Slot: 3
	public override string ToString() { }

	// RVA: 0x196B74C Offset: 0x196B74C VA: 0x196B74C
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredByte : IEquatable<ObscuredByte>, IFormattable // TypeDefIndex: 5263
{
	// Fields
	private static byte cryptoKey; // 0x0
	private byte currentCryptoKey; // 0x0
	private byte hiddenValue; // 0x1
	private byte fakeValue; // 0x2
	private bool inited; // 0x3

	// Methods

	// RVA: 0xD583FC Offset: 0xD583FC VA: 0xD583FC
	private void .ctor(byte value) { }

	// RVA: 0x196B828 Offset: 0x196B828 VA: 0x196B828
	public static void SetNewCryptoKey(byte newKey) { }

	// RVA: 0x196B894 Offset: 0x196B894 VA: 0x196B894
	public static byte EncryptDecrypt(byte value) { }

	// RVA: 0x196B8FC Offset: 0x196B8FC VA: 0x196B8FC
	public static byte EncryptDecrypt(byte value, byte key) { }

	// RVA: 0xD58404 Offset: 0xD58404 VA: 0xD58404
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5840C Offset: 0xD5840C VA: 0xD5840C
	public void RandomizeCryptoKey() { }

	// RVA: 0xD58414 Offset: 0xD58414 VA: 0xD58414
	public byte GetEncrypted() { }

	// RVA: 0xD5843C Offset: 0xD5843C VA: 0xD5843C
	public void SetEncrypted(byte encrypted) { }

	// RVA: 0xD58444 Offset: 0xD58444 VA: 0xD58444
	private byte InternalDecrypt() { }

	// RVA: 0x196BC94 Offset: 0x196BC94 VA: 0x196BC94
	public static ObscuredByte op_Implicit(byte value) { }

	// RVA: 0x196BD24 Offset: 0x196BD24 VA: 0x196BD24
	public static byte op_Implicit(ObscuredByte value) { }

	// RVA: 0x196BD48 Offset: 0x196BD48 VA: 0x196BD48
	public static ObscuredByte op_Increment(ObscuredByte input) { }

	// RVA: 0x196BDE8 Offset: 0x196BDE8 VA: 0x196BDE8
	public static ObscuredByte op_Decrement(ObscuredByte input) { }

	// RVA: 0xD5844C Offset: 0xD5844C VA: 0xD5844C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD58454 Offset: 0xD58454 VA: 0xD58454 Slot: 4
	public bool Equals(ObscuredByte obj) { }

	// RVA: 0xD58460 Offset: 0xD58460 VA: 0xD58460 Slot: 3
	public override string ToString() { }

	// RVA: 0xD58490 Offset: 0xD58490 VA: 0xD58490
	public string ToString(string format) { }

	// RVA: 0xD584C8 Offset: 0xD584C8 VA: 0xD584C8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD584F8 Offset: 0xD584F8 VA: 0xD584F8
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD58530 Offset: 0xD58530 VA: 0xD58530 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x196C0C8 Offset: 0x196C0C8 VA: 0x196C0C8
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredChar : IEquatable<ObscuredChar> // TypeDefIndex: 5264
{
	// Fields
	private static char cryptoKey; // 0x0
	private char currentCryptoKey; // 0x0
	private char hiddenValue; // 0x2
	private char fakeValue; // 0x4
	private bool inited; // 0x6

	// Methods

	// RVA: 0xD585CC Offset: 0xD585CC VA: 0xD585CC
	private void .ctor(char value) { }

	// RVA: 0x196C1A8 Offset: 0x196C1A8 VA: 0x196C1A8
	public static void SetNewCryptoKey(char newKey) { }

	// RVA: 0x196C214 Offset: 0x196C214 VA: 0x196C214
	public static char EncryptDecrypt(char value) { }

	// RVA: 0x196C27C Offset: 0x196C27C VA: 0x196C27C
	public static char EncryptDecrypt(char value, char key) { }

	// RVA: 0xD585D4 Offset: 0xD585D4 VA: 0xD585D4
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD585DC Offset: 0xD585DC VA: 0xD585DC
	public void RandomizeCryptoKey() { }

	// RVA: 0xD585E4 Offset: 0xD585E4 VA: 0xD585E4
	public char GetEncrypted() { }

	// RVA: 0xD5860C Offset: 0xD5860C VA: 0xD5860C
	public void SetEncrypted(char encrypted) { }

	// RVA: 0xD58614 Offset: 0xD58614 VA: 0xD58614
	private char InternalDecrypt() { }

	// RVA: 0x196C618 Offset: 0x196C618 VA: 0x196C618
	public static ObscuredChar op_Implicit(char value) { }

	// RVA: 0x196C6A8 Offset: 0x196C6A8 VA: 0x196C6A8
	public static char op_Implicit(ObscuredChar value) { }

	// RVA: 0x196C6CC Offset: 0x196C6CC VA: 0x196C6CC
	public static ObscuredChar op_Increment(ObscuredChar input) { }

	// RVA: 0x196C76C Offset: 0x196C76C VA: 0x196C76C
	public static ObscuredChar op_Decrement(ObscuredChar input) { }

	// RVA: 0xD5861C Offset: 0xD5861C VA: 0xD5861C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD58624 Offset: 0xD58624 VA: 0xD58624 Slot: 4
	public bool Equals(ObscuredChar obj) { }

	// RVA: 0xD5862C Offset: 0xD5862C VA: 0xD5862C Slot: 3
	public override string ToString() { }

	// RVA: 0xD5865C Offset: 0xD5865C VA: 0xD5865C
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD58694 Offset: 0xD58694 VA: 0xD58694 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x196C9D0 Offset: 0x196C9D0 VA: 0x196C9D0
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredDecimal : IEquatable<ObscuredDecimal>, IFormattable // TypeDefIndex: 5265
{
	// Fields
	private static long cryptoKey; // 0x0
	private long currentCryptoKey; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xC4A9E0 Offset: 0xC4A9E0 VA: 0xC4A9E0
	private byte[] hiddenValueOld; // 0x8
	private ACTkByte16 hiddenValue; // 0x10
	private Decimal fakeValue; // 0x20
	private bool inited; // 0x30

	// Methods

	// RVA: 0xD58888 Offset: 0xD58888 VA: 0xD58888
	private void .ctor(ACTkByte16 value) { }

	// RVA: 0x196CAD4 Offset: 0x196CAD4 VA: 0x196CAD4
	public static void SetNewCryptoKey(long newKey) { }

	// RVA: 0x196CB40 Offset: 0x196CB40 VA: 0x196CB40
	public static Decimal Encrypt(Decimal value) { }

	// RVA: 0x196CBC0 Offset: 0x196CBC0 VA: 0x196CBC0
	public static Decimal Encrypt(Decimal value, long key) { }

	// RVA: 0x196CBCC Offset: 0x196CBCC VA: 0x196CBCC
	private static ACTkByte16 InternalEncrypt(Decimal value) { }

	// RVA: 0x196CC44 Offset: 0x196CC44 VA: 0x196CC44
	private static ACTkByte16 InternalEncrypt(Decimal value, long key) { }

	// RVA: 0x196CCCC Offset: 0x196CCCC VA: 0x196CCCC
	public static Decimal Decrypt(Decimal value) { }

	// RVA: 0x196CD4C Offset: 0x196CD4C VA: 0x196CD4C
	public static Decimal Decrypt(Decimal value, long key) { }

	// RVA: 0xD58890 Offset: 0xD58890 VA: 0xD58890
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD58898 Offset: 0xD58898 VA: 0xD58898
	public void RandomizeCryptoKey() { }

	// RVA: 0xD588A0 Offset: 0xD588A0 VA: 0xD588A0
	public Decimal GetEncrypted() { }

	// RVA: 0xD588C8 Offset: 0xD588C8 VA: 0xD588C8
	public void SetEncrypted(Decimal encrypted) { }

	// RVA: 0xD588D0 Offset: 0xD588D0 VA: 0xD588D0
	private Decimal InternalDecrypt() { }

	// RVA: 0x196D11C Offset: 0x196D11C VA: 0x196D11C
	public static ObscuredDecimal op_Implicit(Decimal value) { }

	// RVA: 0x196D1F4 Offset: 0x196D1F4 VA: 0x196D1F4
	public static Decimal op_Implicit(ObscuredDecimal value) { }

	// RVA: 0x196D1F8 Offset: 0x196D1F8 VA: 0x196D1F8
	public static ObscuredDecimal op_Explicit(ObscuredFloat f) { }

	// RVA: 0x196D308 Offset: 0x196D308 VA: 0x196D308
	public static ObscuredDecimal op_Increment(ObscuredDecimal input) { }

	// RVA: 0x196D428 Offset: 0x196D428 VA: 0x196D428
	public static ObscuredDecimal op_Decrement(ObscuredDecimal input) { }

	// RVA: 0xD588D8 Offset: 0xD588D8 VA: 0xD588D8 Slot: 3
	public override string ToString() { }

	// RVA: 0xD58908 Offset: 0xD58908 VA: 0xD58908
	public string ToString(string format) { }

	// RVA: 0xD58948 Offset: 0xD58948 VA: 0xD58948
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD58988 Offset: 0xD58988 VA: 0xD58988 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD589D0 Offset: 0xD589D0 VA: 0xD589D0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD589D8 Offset: 0xD589D8 VA: 0xD589D8 Slot: 4
	public bool Equals(ObscuredDecimal obj) { }

	// RVA: 0xD58A20 Offset: 0xD58A20 VA: 0xD58A20 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x196D764 Offset: 0x196D764 VA: 0x196D764
	private static void .cctor() { }
}

// Namespace: 
private struct ObscuredDecimal.DecimalLongBytesUnion // TypeDefIndex: 5266
{
	// Fields
	public Decimal d; // 0x0
	public long l1; // 0x0
	public long l2; // 0x8
	public ACTkByte16 b16; // 0x0
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredDouble : IEquatable<ObscuredDouble>, IFormattable // TypeDefIndex: 5267
{
	// Fields
	private static long cryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AA18 Offset: 0xC4AA18 VA: 0xC4AA18
	private long currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AA28 Offset: 0xC4AA28 VA: 0xC4AA28
	private ACTkByte8 hiddenValue; // 0x8
	[SerializeField] // RVA: 0xC4AA38 Offset: 0xC4AA38 VA: 0xC4AA38
	[FormerlySerializedAsAttribute] // RVA: 0xC4AA38 Offset: 0xC4AA38 VA: 0xC4AA38
	private byte[] hiddenValueOld; // 0x10
	[SerializeField] // RVA: 0xC4AA84 Offset: 0xC4AA84 VA: 0xC4AA84
	private double fakeValue; // 0x18
	[SerializeField] // RVA: 0xC4AA94 Offset: 0xC4AA94 VA: 0xC4AA94
	private bool inited; // 0x20

	// Methods

	// RVA: 0xD58C14 Offset: 0xD58C14 VA: 0xD58C14
	private void .ctor(ACTkByte8 value) { }

	// RVA: 0x196D844 Offset: 0x196D844 VA: 0x196D844
	public static void SetNewCryptoKey(long newKey) { }

	// RVA: 0x196D8B0 Offset: 0x196D8B0 VA: 0x196D8B0
	public static long Encrypt(double value) { }

	// RVA: 0x196D92C Offset: 0x196D92C VA: 0x196D92C
	public static long Encrypt(double value, long key) { }

	// RVA: 0x196D938 Offset: 0x196D938 VA: 0x196D938
	private static ACTkByte8 InternalEncrypt(double value) { }

	// RVA: 0x196D9A8 Offset: 0x196D9A8 VA: 0x196D9A8
	private static ACTkByte8 InternalEncrypt(double value, long key) { }

	// RVA: 0x196DA2C Offset: 0x196DA2C VA: 0x196DA2C
	public static double Decrypt(long value) { }

	// RVA: 0x196DAA0 Offset: 0x196DAA0 VA: 0x196DAA0
	public static double Decrypt(long value, long key) { }

	// RVA: 0xD58C1C Offset: 0xD58C1C VA: 0xD58C1C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD58C24 Offset: 0xD58C24 VA: 0xD58C24
	public void RandomizeCryptoKey() { }

	// RVA: 0xD58C2C Offset: 0xD58C2C VA: 0xD58C2C
	public long GetEncrypted() { }

	// RVA: 0xD58C54 Offset: 0xD58C54 VA: 0xD58C54
	public void SetEncrypted(long encrypted) { }

	// RVA: 0xD58C5C Offset: 0xD58C5C VA: 0xD58C5C
	private double InternalDecrypt() { }

	// RVA: 0x196DDB0 Offset: 0x196DDB0 VA: 0x196DDB0
	public static ObscuredDouble op_Implicit(double value) { }

	// RVA: 0x196DE68 Offset: 0x196DE68 VA: 0x196DE68
	public static double op_Implicit(ObscuredDouble value) { }

	// RVA: 0x196DE6C Offset: 0x196DE6C VA: 0x196DE6C
	public static ObscuredDouble op_Increment(ObscuredDouble input) { }

	// RVA: 0x196DF28 Offset: 0x196DF28 VA: 0x196DF28
	public static ObscuredDouble op_Decrement(ObscuredDouble input) { }

	// RVA: 0xD58C64 Offset: 0xD58C64 VA: 0xD58C64 Slot: 3
	public override string ToString() { }

	// RVA: 0xD58C94 Offset: 0xD58C94 VA: 0xD58C94
	public string ToString(string format) { }

	// RVA: 0xD58CCC Offset: 0xD58CCC VA: 0xD58CCC
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD58D04 Offset: 0xD58D04 VA: 0xD58D04 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD58D4C Offset: 0xD58D4C VA: 0xD58D4C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD58D54 Offset: 0xD58D54 VA: 0xD58D54 Slot: 4
	public bool Equals(ObscuredDouble obj) { }

	// RVA: 0xD58D94 Offset: 0xD58D94 VA: 0xD58D94 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x196E1D0 Offset: 0x196E1D0 VA: 0x196E1D0
	private static void .cctor() { }
}

// Namespace: 
private struct ObscuredDouble.DoubleLongBytesUnion // TypeDefIndex: 5268
{
	// Fields
	public double d; // 0x0
	public long l; // 0x0
	public ACTkByte8 b8; // 0x0
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredFloat : IEquatable<ObscuredFloat>, IFormattable // TypeDefIndex: 5269
{
	// Fields
	private static int cryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AAA4 Offset: 0xC4AAA4 VA: 0xC4AAA4
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AAB4 Offset: 0xC4AAB4 VA: 0xC4AAB4
	private ACTkByte4 hiddenValue; // 0x4
	[SerializeField] // RVA: 0xC4AAC4 Offset: 0xC4AAC4 VA: 0xC4AAC4
	[FormerlySerializedAsAttribute] // RVA: 0xC4AAC4 Offset: 0xC4AAC4 VA: 0xC4AAC4
	private byte[] hiddenValueOld; // 0x8
	[SerializeField] // RVA: 0xC4AB10 Offset: 0xC4AB10 VA: 0xC4AB10
	private float fakeValue; // 0x10
	[SerializeField] // RVA: 0xC4AB20 Offset: 0xC4AB20 VA: 0xC4AB20
	private bool inited; // 0x14

	// Methods

	// RVA: 0xD5D354 Offset: 0xD5D354 VA: 0xD5D354
	private void .ctor(ACTkByte4 value) { }

	// RVA: 0x1E876F8 Offset: 0x1E876F8 VA: 0x1E876F8
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1E87764 Offset: 0x1E87764 VA: 0x1E87764
	public static int Encrypt(float value) { }

	// RVA: 0x1E877E0 Offset: 0x1E877E0 VA: 0x1E877E0
	public static int Encrypt(float value, int key) { }

	// RVA: 0x1E877EC Offset: 0x1E877EC VA: 0x1E877EC
	private static ACTkByte4 InternalEncrypt(float value) { }

	// RVA: 0x1E87864 Offset: 0x1E87864 VA: 0x1E87864
	private static ACTkByte4 InternalEncrypt(float value, int key) { }

	// RVA: 0x1E878E8 Offset: 0x1E878E8 VA: 0x1E878E8
	public static float Decrypt(int value) { }

	// RVA: 0x1E8795C Offset: 0x1E8795C VA: 0x1E8795C
	public static float Decrypt(int value, int key) { }

	// RVA: 0xD5D360 Offset: 0xD5D360 VA: 0xD5D360
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5D368 Offset: 0xD5D368 VA: 0xD5D368
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5D370 Offset: 0xD5D370 VA: 0xD5D370
	public int GetEncrypted() { }

	// RVA: 0xD5D398 Offset: 0xD5D398 VA: 0xD5D398
	public void SetEncrypted(int encrypted) { }

	// RVA: 0xD5D3A0 Offset: 0xD5D3A0 VA: 0xD5D3A0
	private float InternalDecrypt() { }

	// RVA: 0x1E87C54 Offset: 0x1E87C54 VA: 0x1E87C54
	public static ObscuredFloat op_Implicit(float value) { }

	// RVA: 0x1E87D04 Offset: 0x1E87D04 VA: 0x1E87D04
	public static float op_Implicit(ObscuredFloat value) { }

	// RVA: 0x1E87D08 Offset: 0x1E87D08 VA: 0x1E87D08
	public static ObscuredFloat op_Increment(ObscuredFloat input) { }

	// RVA: 0x1E87DC0 Offset: 0x1E87DC0 VA: 0x1E87DC0
	public static ObscuredFloat op_Decrement(ObscuredFloat input) { }

	// RVA: 0xD5D3A8 Offset: 0xD5D3A8 VA: 0xD5D3A8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5D3B0 Offset: 0xD5D3B0 VA: 0xD5D3B0 Slot: 4
	public bool Equals(ObscuredFloat obj) { }

	// RVA: 0xD5D3E8 Offset: 0xD5D3E8 VA: 0xD5D3E8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5D418 Offset: 0xD5D418 VA: 0xD5D418 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5D448 Offset: 0xD5D448 VA: 0xD5D448
	public string ToString(string format) { }

	// RVA: 0xD5D480 Offset: 0xD5D480 VA: 0xD5D480
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5D4B8 Offset: 0xD5D4B8 VA: 0xD5D4B8 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E88064 Offset: 0x1E88064 VA: 0x1E88064
	private static void .cctor() { }
}

// Namespace: 
private struct ObscuredFloat.FloatIntBytesUnion // TypeDefIndex: 5270
{
	// Fields
	public float f; // 0x0
	public int i; // 0x0
	public ACTkByte4 b4; // 0x0
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredInt : IEquatable<ObscuredInt>, IFormattable // TypeDefIndex: 5271
{
	// Fields
	private static int cryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AB30 Offset: 0xC4AB30 VA: 0xC4AB30
	private int currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AB40 Offset: 0xC4AB40 VA: 0xC4AB40
	private int hiddenValue; // 0x4
	[SerializeField] // RVA: 0xC4AB50 Offset: 0xC4AB50 VA: 0xC4AB50
	private int fakeValue; // 0x8
	[SerializeField] // RVA: 0xC4AB60 Offset: 0xC4AB60 VA: 0xC4AB60
	private bool inited; // 0xC

	// Methods

	// RVA: 0xD5D554 Offset: 0xD5D554 VA: 0xD5D554
	private void .ctor(int value) { }

	// RVA: 0x1E88144 Offset: 0x1E88144 VA: 0x1E88144
	public static void SetNewCryptoKey(int newKey) { }

	// RVA: 0x1E881B0 Offset: 0x1E881B0 VA: 0x1E881B0
	public static int Encrypt(int value) { }

	// RVA: 0x1E88218 Offset: 0x1E88218 VA: 0x1E88218
	public static int Encrypt(int value, int key) { }

	// RVA: 0x1E88298 Offset: 0x1E88298 VA: 0x1E88298
	public static int Decrypt(int value) { }

	// RVA: 0x1E88300 Offset: 0x1E88300 VA: 0x1E88300
	public static int Decrypt(int value, int key) { }

	// RVA: 0xD5D55C Offset: 0xD5D55C VA: 0xD5D55C
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5D564 Offset: 0xD5D564 VA: 0xD5D564
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5D56C Offset: 0xD5D56C VA: 0xD5D56C
	public int GetEncrypted() { }

	// RVA: 0xD5D594 Offset: 0xD5D594 VA: 0xD5D594
	public void SetEncrypted(int encrypted) { }

	// RVA: 0xD5D59C Offset: 0xD5D59C VA: 0xD5D59C
	private int InternalDecrypt() { }

	// RVA: 0x1E88670 Offset: 0x1E88670 VA: 0x1E88670
	public static ObscuredInt op_Implicit(int value) { }

	// RVA: 0x1E88704 Offset: 0x1E88704 VA: 0x1E88704
	public static int op_Implicit(ObscuredInt value) { }

	// RVA: 0x1E88728 Offset: 0x1E88728 VA: 0x1E88728
	public static ObscuredFloat op_Implicit(ObscuredInt value) { }

	// RVA: 0x1E887AC Offset: 0x1E887AC VA: 0x1E887AC
	public static ObscuredDouble op_Implicit(ObscuredInt value) { }

	// RVA: 0x1E88834 Offset: 0x1E88834 VA: 0x1E88834
	public static ObscuredUInt op_Explicit(ObscuredInt value) { }

	// RVA: 0x1E88944 Offset: 0x1E88944 VA: 0x1E88944
	public static ObscuredInt op_Increment(ObscuredInt input) { }

	// RVA: 0x1E889E4 Offset: 0x1E889E4 VA: 0x1E889E4
	public static ObscuredInt op_Decrement(ObscuredInt input) { }

	// RVA: 0xD5D5A4 Offset: 0xD5D5A4 VA: 0xD5D5A4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5D5AC Offset: 0xD5D5AC VA: 0xD5D5AC Slot: 4
	public bool Equals(ObscuredInt obj) { }

	// RVA: 0xD5D5B4 Offset: 0xD5D5B4 VA: 0xD5D5B4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5D5E4 Offset: 0xD5D5E4 VA: 0xD5D5E4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5D614 Offset: 0xD5D614 VA: 0xD5D614
	public string ToString(string format) { }

	// RVA: 0xD5D64C Offset: 0xD5D64C VA: 0xD5D64C
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5D684 Offset: 0xD5D684 VA: 0xD5D684 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E88CC0 Offset: 0x1E88CC0 VA: 0x1E88CC0
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
[Serializable]
public struct ObscuredLong : IEquatable<ObscuredLong>, IFormattable // TypeDefIndex: 5272
{
	// Fields
	private static long cryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AB70 Offset: 0xC4AB70 VA: 0xC4AB70
	private long currentCryptoKey; // 0x0
	[SerializeField] // RVA: 0xC4AB80 Offset: 0xC4AB80 VA: 0xC4AB80
	private long hiddenValue; // 0x8
	[SerializeField] // RVA: 0xC4AB90 Offset: 0xC4AB90 VA: 0xC4AB90
	private long fakeValue; // 0x10
	[SerializeField] // RVA: 0xC4ABA0 Offset: 0xC4ABA0 VA: 0xC4ABA0
	private bool inited; // 0x18

	// Methods

	// RVA: 0xD5D720 Offset: 0xD5D720 VA: 0xD5D720
	private void .ctor(long value) { }

	// RVA: 0x1E88DA0 Offset: 0x1E88DA0 VA: 0x1E88DA0
	public static void SetNewCryptoKey(long newKey) { }

	// RVA: 0x1E88E0C Offset: 0x1E88E0C VA: 0x1E88E0C
	public static long Encrypt(long value) { }

	// RVA: 0x1E88EF4 Offset: 0x1E88EF4 VA: 0x1E88EF4
	public static long Decrypt(long value) { }

	// RVA: 0x1E88E74 Offset: 0x1E88E74 VA: 0x1E88E74
	public static long Encrypt(long value, long key) { }

	// RVA: 0x1E88F5C Offset: 0x1E88F5C VA: 0x1E88F5C
	public static long Decrypt(long value, long key) { }

	// RVA: 0xD5D728 Offset: 0xD5D728 VA: 0xD5D728
	public void ApplyNewCryptoKey() { }

	// RVA: 0xD5D730 Offset: 0xD5D730 VA: 0xD5D730
	public void RandomizeCryptoKey() { }

	// RVA: 0xD5D738 Offset: 0xD5D738 VA: 0xD5D738
	public long GetEncrypted() { }

	// RVA: 0xD5D760 Offset: 0xD5D760 VA: 0xD5D760
	public void SetEncrypted(long encrypted) { }

	// RVA: 0xD5D768 Offset: 0xD5D768 VA: 0xD5D768
	private long InternalDecrypt() { }

	// RVA: 0x1E892C8 Offset: 0x1E892C8 VA: 0x1E892C8
	public static ObscuredLong op_Implicit(long value) { }

	// RVA: 0x1E89370 Offset: 0x1E89370 VA: 0x1E89370
	public static long op_Implicit(ObscuredLong value) { }

	// RVA: 0x1E89374 Offset: 0x1E89374 VA: 0x1E89374
	public static ObscuredLong op_Increment(ObscuredLong input) { }

	// RVA: 0x1E89424 Offset: 0x1E89424 VA: 0x1E89424
	public static ObscuredLong op_Decrement(ObscuredLong input) { }

	// RVA: 0xD5D770 Offset: 0xD5D770 VA: 0xD5D770 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD5D778 Offset: 0xD5D778 VA: 0xD5D778 Slot: 4
	public bool Equals(ObscuredLong obj) { }

	// RVA: 0xD5D7B0 Offset: 0xD5D7B0 VA: 0xD5D7B0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD5D7E0 Offset: 0xD5D7E0 VA: 0xD5D7E0 Slot: 3
	public override string ToString() { }

	// RVA: 0xD5D810 Offset: 0xD5D810 VA: 0xD5D810
	public string ToString(string format) { }

	// RVA: 0xD5D848 Offset: 0xD5D848 VA: 0xD5D848
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD5D880 Offset: 0xD5D880 VA: 0xD5D880 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0x1E89724 Offset: 0x1E89724 VA: 0x1E89724
	private static void .cctor() { }
}

// Namespace: CodeStage.AntiCheat.ObscuredTypes
public static class ObscuredPrefs // TypeDefIndex: 5273
{
	// Fields
	private const byte VERSION = 2;
	private const string RAW_NOT_FOUND = "{not_found}";
	private const string DATA_SEPARATOR = "|";
	private static bool foreignSavesReported; // 0x0
	private static string cryptoKey; // 0x8
	private static string deviceId; // 0x10
	private static uint deviceIdHash; // 0x18
	public static Action onAlterationDetected; // 0x20
	public static bool preservePlayerPrefs; // 0x28
	public static Action onPossibleForeignSavesDetected; // 0x30
	public static ObscuredPrefs.DeviceLockLevel lockToDevice; // 0x38
	public static bool readForeignSaves; // 0x39
	public static bool emergencyMode; // 0x3A
	private const char DEPRECATED_RAW_SEPARATOR = '\x3a';
	private static string deprecatedDeviceId; // 0x40

	// Properties
	public static string CryptoKey { get; set; }
	public static string DeviceId { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDE948 Offset: 0xCDE948 VA: 0xCDE948
	internal static string DeviceID { get; set; }
	private static uint DeviceIdHash { get; }
	private static string DeprecatedDeviceId { get; }

	// Methods

	// RVA: 0x1E8977C Offset: 0x1E8977C VA: 0x1E8977C
	public static void set_CryptoKey(string value) { }

	// RVA: 0x1E897E8 Offset: 0x1E897E8 VA: 0x1E897E8
	public static string get_CryptoKey() { }

	// RVA: 0x1E89850 Offset: 0x1E89850 VA: 0x1E89850
	public static string get_DeviceId() { }

	// RVA: 0x1E899A4 Offset: 0x1E899A4 VA: 0x1E899A4
	public static void set_DeviceId(string value) { }

	// RVA: 0x1E89A10 Offset: 0x1E89A10 VA: 0x1E89A10
	internal static string get_DeviceID() { }

	// RVA: 0x1E89A6C Offset: 0x1E89A6C VA: 0x1E89A6C
	internal static void set_DeviceID(string value) { }

	// RVA: 0x1E89AD0 Offset: 0x1E89AD0 VA: 0x1E89AD0
	private static uint get_DeviceIdHash() { }

	// RVA: 0x1E89CA0 Offset: 0x1E89CA0 VA: 0x1E89CA0
	public static void ForceLockToDeviceInit() { }

	[ObsoleteAttribute] // RVA: 0xCC78F4 Offset: 0xCC78F4 VA: 0xCC78F4
	// RVA: 0x1E89D7C Offset: 0x1E89D7C VA: 0x1E89D7C
	internal static void SetNewCryptoKey(string newKey) { }

	// RVA: 0x1E89DE0 Offset: 0x1E89DE0 VA: 0x1E89DE0
	public static void SetInt(string key, int value) { }

	// RVA: 0x1E8A038 Offset: 0x1E8A038 VA: 0x1E8A038
	public static int GetInt(string key) { }

	// RVA: 0x1E8A0A0 Offset: 0x1E8A0A0 VA: 0x1E8A0A0
	public static int GetInt(string key, int defaultValue) { }

	// RVA: 0x1E89F8C Offset: 0x1E89F8C VA: 0x1E89F8C
	internal static string EncryptIntValue(string key, int value) { }

	// RVA: 0x1E8A2F8 Offset: 0x1E8A2F8 VA: 0x1E8A2F8
	internal static int DecryptIntValue(string key, string encryptedInput, int defaultValue) { }

	// RVA: 0x1E8B2F0 Offset: 0x1E8B2F0 VA: 0x1E8B2F0
	public static void SetUInt(string key, uint value) { }

	// RVA: 0x1E8B42C Offset: 0x1E8B42C VA: 0x1E8B42C
	public static uint GetUInt(string key) { }

	// RVA: 0x1E8B494 Offset: 0x1E8B494 VA: 0x1E8B494
	public static uint GetUInt(string key, uint defaultValue) { }

	// RVA: 0x1E8B380 Offset: 0x1E8B380 VA: 0x1E8B380
	private static string EncryptUIntValue(string key, uint value) { }

	// RVA: 0x1E8B590 Offset: 0x1E8B590 VA: 0x1E8B590
	private static uint DecryptUIntValue(string key, string encryptedInput, uint defaultValue) { }

	// RVA: 0x1E8B71C Offset: 0x1E8B71C VA: 0x1E8B71C
	public static void SetString(string key, string value) { }

	// RVA: 0x1E8B874 Offset: 0x1E8B874 VA: 0x1E8B874
	public static string GetString(string key) { }

	// RVA: 0x1E8B90C Offset: 0x1E8B90C VA: 0x1E8B90C
	public static string GetString(string key, string defaultValue) { }

	// RVA: 0x1E8B7AC Offset: 0x1E8B7AC VA: 0x1E8B7AC
	internal static string EncryptStringValue(string key, string value) { }
