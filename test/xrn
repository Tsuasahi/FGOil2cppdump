	public UISprite skillIconSplit; // 0xE8
	public float skillIconOffset; // 0xF0
	public float skillIconSplitSpace; // 0xF4
	private BattleServantSkillIConComponent[] skillIcon; // 0xF8
	private GameObject skillBtnFlashObject; // 0x100
	public Transform chargeTimeRoot; // 0x108
	public UILabel chargeTimeLabel; // 0x110
	public Transform addSkillChargeTimeRoot; // 0x118
	public UILabel addSkillChargeTimeLabel; // 0x120
	public UILabel addSkillAddChargeTimeSplitLabel; // 0x128
	public UILabel addSkillAddChargeTimeLabel; // 0x130
	public GameObject masterSkillBadStatus; // 0x138
	public UILabel masterSkillBadStatusLabel; // 0x140
	private const float chargeTimeRootPosYTop = -38;
	private const float chargeTimeRootPosYBottom = -58;
	public BattleBoostSkillIconComponent boostSkillIcon; // 0x148
	public BattleSkillConfComponent boostSkillConfWindow; // 0x150
	public BattlePerformanceEnemyMst enemyMasterPerf; // 0x158
	public GameObject masterSkillChargeRoot; // 0x160
	public UILabel masterSkillChargeLabel; // 0x168
	private GameObject masterBuffEffect; // 0x170
	public BattleItemListWindowComponent itemListWindow; // 0x178
	private bool isMasterBuffEffectPlaying; // 0x180
	private GameObject masterBuffPopLabelEffect; // 0x188
	private string masterBuffPopLabel; // 0x190
	private int masterBuffPopLabelColor; // 0x198
	private int[] masterBuffEffectList; // 0x1A0
	private const float masterIconFadeTime = 0.25;
	private const float masterIconHideAlpha = 0.01;
	private TweenAlpha effectTween; // 0x1A8
	private const float alphatime = 0.15;
	private const float appeartime = 0.1;
	private Vector3 pos_skillbtn; // 0x1B0
	private Vector3 pos_menubtn; // 0x1BC
	private bool isLongTap; // 0x1C8
	private int tmp_commandSpellId; // 0x1CC
	private BattleSelectServantWindow selectSvtWindow; // 0x1D0
	private BattleLogic.UseSkillObject tmp_useSkill; // 0x1D8
	private BattleLogic.UseSkillObject useSkillObject; // 0x1E0
	private BattleLogic.UseSkillObject actSkillObject; // 0x1E8
	private BattleSelectServantWindow skillselectSvtWindow; // 0x1F0
	private BattleSelectMainSubServantWindow selectMSWindow; // 0x1F8
	private int tmp_index; // 0x200
	[CompilerGeneratedAttribute] // RVA: 0xC664C8 Offset: 0xC664C8 VA: 0xC664C8
	private static Predicate<string> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC664D8 Offset: 0xC664D8 VA: 0xC664D8
	private static Predicate<string> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC664E8 Offset: 0xC664E8 VA: 0xC664E8
	private static Action <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC664F8 Offset: 0xC664F8 VA: 0xC664F8
	private static Action <>f__am$cache3; // 0x20

	// Properties
	public bool IsMasterBuffEffectPlaying { get; }

	// Methods

	// RVA: 0x11456F8 Offset: 0x11456F8 VA: 0x11456F8
	public void .ctor() { }

	// RVA: 0x1145714 Offset: 0x1145714 VA: 0x1145714
	public bool get_IsMasterBuffEffectPlaying() { }

	// RVA: 0x114571C Offset: 0x114571C VA: 0x114571C
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x1146028 Offset: 0x1146028 VA: 0x1146028
	public void loadData() { }

	// RVA: 0x1146788 Offset: 0x1146788 VA: 0x1146788
	private void SetupMasterSkillBtn() { }

	// RVA: 0x113B988 Offset: 0x113B988 VA: 0x113B988
	public void updateCommandSpellIcon() { }

	// RVA: 0x1146960 Offset: 0x1146960 VA: 0x1146960
	public void updateSkillIcon() { }

	// RVA: 0x11476F0 Offset: 0x11476F0 VA: 0x11476F0
	public void startTac() { }

	// RVA: 0x1147754 Offset: 0x1147754 VA: 0x1147754
	public void modeTac() { }

	// RVA: 0x11479E0 Offset: 0x11479E0 VA: 0x11479E0
	public void procOpenSkillWindow() { }

	// RVA: 0x1147BB0 Offset: 0x1147BB0 VA: 0x1147BB0
	public void compOpenSkillWindow() { }

	// RVA: 0x1147C20 Offset: 0x1147C20 VA: 0x1147C20
	public void procCloseSkillWindow() { }

	// RVA: 0x1147CEC Offset: 0x1147CEC VA: 0x1147CEC
	public void compCloseSkillWindow() { }

	// RVA: 0x1147D5C Offset: 0x1147D5C VA: 0x1147D5C
	public void procOpenMasterMenu() { }

	// RVA: 0x1147E10 Offset: 0x1147E10 VA: 0x1147E10
	public void compOpenMasterMenu() { }

	// RVA: 0x1147E8C Offset: 0x1147E8C VA: 0x1147E8C
	public void procCloseSkill() { }

	// RVA: 0x1147EE0 Offset: 0x1147EE0 VA: 0x1147EE0
	public void compCloseALL() { }

	// RVA: 0x1147F44 Offset: 0x1147F44 VA: 0x1147F44
	public void compCloseSkill() { }

	// RVA: 0x1147FA8 Offset: 0x1147FA8 VA: 0x1147FA8
	public void procOpenSpellWindow() { }

	// RVA: 0x114812C Offset: 0x114812C VA: 0x114812C
	public void compOpenSpellWindow() { }

	// RVA: 0x1148190 Offset: 0x1148190 VA: 0x1148190
	public void procCloseSpellWindow() { }

	// RVA: 0x1148250 Offset: 0x1148250 VA: 0x1148250
	public void compCloseSpellWindow() { }

	// RVA: 0x11482C0 Offset: 0x11482C0 VA: 0x11482C0
	public void procCloseButtonCommandSpellWindow() { }

	// RVA: 0x1148324 Offset: 0x1148324 VA: 0x1148324
	public void procUseCommandSpell(int commandSpellId) { }

	// RVA: 0x1148398 Offset: 0x1148398 VA: 0x1148398
	public void checkCommandSpellTarget() { }

	// RVA: 0x11484D4 Offset: 0x11484D4 VA: 0x11484D4
	public void openSelectSvtWindow() { }

	// RVA: 0x1148698 Offset: 0x1148698 VA: 0x1148698
	public void selectedSvt(int uniqueId) { }

	// RVA: 0x11489E4 Offset: 0x11489E4 VA: 0x11489E4
	public void checkSkipFlg() { }

	// RVA: 0x1148B40 Offset: 0x1148B40 VA: 0x1148B40
	public void procOpenSkillConf() { }

	// RVA: 0x1148C34 Offset: 0x1148C34 VA: 0x1148C34
	public void OpenSkillConfComplete() { }

	// RVA: 0x1148C98 Offset: 0x1148C98 VA: 0x1148C98
	public void procCloseSkillConf() { }

	// RVA: 0x1148D58 Offset: 0x1148D58 VA: 0x1148D58
	public void CloseSkillConfComp() { }

	// RVA: 0x1148DBC Offset: 0x1148DBC VA: 0x1148DBC
	public void clickBoostSkillIcon(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1148E50 Offset: 0x1148E50 VA: 0x1148E50
	public void procOpenBoostSkillConf() { }

	// RVA: 0x1148F44 Offset: 0x1148F44 VA: 0x1148F44
	public void OpenBoostSkillConfComplete() { }

	// RVA: 0x1148FA8 Offset: 0x1148FA8 VA: 0x1148FA8
	public void procCloseBoostSkillConf() { }

	// RVA: 0x1149068 Offset: 0x1149068 VA: 0x1149068
	public void CloseBoostSkillConfComp() { }

	// RVA: 0x11490CC Offset: 0x11490CC VA: 0x11490CC
	public void flashBoostSkillIcon() { }

	// RVA: 0x11490FC Offset: 0x11490FC VA: 0x11490FC
	public void clickSkillIcon(BattleSkillInfoData skillInfo, bool isLong) { }

	// RVA: 0x11491CC Offset: 0x11491CC VA: 0x11491CC
	public void UseSkill(bool playSe) { }

	// RVA: 0x11496BC Offset: 0x11496BC VA: 0x11496BC
	public void openSkillSelectSvtWindow() { }

	// RVA: 0x11497EC Offset: 0x11497EC VA: 0x11497EC
	public void onClickSkillOK(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1149880 Offset: 0x1149880 VA: 0x1149880
	public void onClickSkillCancel() { }

	// RVA: 0x11498E4 Offset: 0x11498E4 VA: 0x11498E4
	public void selectedSkillSvt(int uniqueId) { }

	// RVA: 0x1149474 Offset: 0x1149474 VA: 0x1149474
	public void openSkillSelectMainSubSvtWindow() { }

	// RVA: 0x1149C48 Offset: 0x1149C48 VA: 0x1149C48
	public void callBackSelectedMainSub(bool flg, int mainUniqueId, int subUniqueId) { }

	// RVA: 0x1149D58 Offset: 0x1149D58 VA: 0x1149D58
	public void endSelectSvtError(bool flg) { }

	// RVA: 0x1149DE4 Offset: 0x1149DE4 VA: 0x1149DE4
	public void procOpenMenuWindow() { }

	// RVA: 0x1149F04 Offset: 0x1149F04 VA: 0x1149F04
	public void compOpenMenu() { }

	// RVA: 0x1149F74 Offset: 0x1149F74 VA: 0x1149F74
	public void procCloseMenuWindow() { }

	// RVA: 0x114A03C Offset: 0x114A03C VA: 0x114A03C
	public void compCloseMenu() { }

	// RVA: 0x114A0AC Offset: 0x114A0AC VA: 0x114A0AC
	public void changeShortSkill() { }

	// RVA: 0x1145E84 Offset: 0x1145E84 VA: 0x1145E84
	public void updateShortSkill() { }

	// RVA: 0x114A14C Offset: 0x114A14C VA: 0x114A14C
	public void changeTdConstantVelocity() { }

	// RVA: 0x1145F10 Offset: 0x1145F10 VA: 0x1145F10
	public void updateTdConstantVelocity() { }

	// RVA: 0x114A1EC Offset: 0x114A1EC VA: 0x114A1EC
	public void changeSkipDead() { }

	// RVA: 0x1145F9C Offset: 0x1145F9C VA: 0x1145F9C
	public void updateSkipDead() { }

	// RVA: 0x114A28C Offset: 0x114A28C VA: 0x114A28C
	public void startSkill(int type = 0) { }

	// RVA: 0x114A314 Offset: 0x114A314 VA: 0x114A314
	public void endSkill() { }

	// RVA: 0x114A380 Offset: 0x114A380 VA: 0x114A380
	public void showRetireDialog() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE548 Offset: 0xCCE548 VA: 0xCCE548
	// RVA: 0x114A4D4 Offset: 0x114A4D4 VA: 0x114A4D4
	private IEnumerator openRetireDialog() { }

	// RVA: 0x114A54C Offset: 0x114A54C VA: 0x114A54C
	public void retRetireDialog(bool flg) { }

	// RVA: 0x114A5D8 Offset: 0x114A5D8 VA: 0x114A5D8
	public void procCloseAll() { }

	// RVA: 0x114A798 Offset: 0x114A798 VA: 0x114A798
	public void startCommand() { }

	// RVA: 0x114A7FC Offset: 0x114A7FC VA: 0x114A7FC
	public void modeCom() { }

	// RVA: 0x1147AE0 Offset: 0x1147AE0 VA: 0x1147AE0
	public void proclight(GameObject obj, bool flg) { }

	// RVA: 0x114A92C Offset: 0x114A92C VA: 0x114A92C
	public void checkTutorial() { }

	// RVA: 0x114A9C4 Offset: 0x114A9C4 VA: 0x114A9C4
	public bool isWinMenuWindowOpenOrOpening() { }

	// RVA: 0x114A9F4 Offset: 0x114A9F4 VA: 0x114A9F4
	public bool isWinSpellWindowOpenOrOpening() { }

	// RVA: 0x114AA24 Offset: 0x114AA24 VA: 0x114AA24
	public bool isCloseEnemyConf() { }

	// RVA: 0x114AAA0 Offset: 0x114AAA0 VA: 0x114AAA0
	public void showEnemyServant(int index) { }

	// RVA: 0x114AB14 Offset: 0x114AB14 VA: 0x114AB14
	public void procOpenEnemyConf() { }

	// RVA: 0x114AC80 Offset: 0x114AC80 VA: 0x114AC80
	public void compOpenEnemyConf() { }

	// RVA: 0x114ACE4 Offset: 0x114ACE4 VA: 0x114ACE4
	public void onCloseEnemyServantConf() { }

	// RVA: 0x114AD48 Offset: 0x114AD48 VA: 0x114AD48
	public void procCloseEnemyConf() { }

	// RVA: 0x114AE20 Offset: 0x114AE20 VA: 0x114AE20
	public void compCloseEnemyConf() { }

	// RVA: 0x114AE84 Offset: 0x114AE84 VA: 0x114AE84
	public void onClickSpellButton() { }

	// RVA: 0x114AFE0 Offset: 0x114AFE0 VA: 0x114AFE0
	public void onClickMenuButton() { }

	// RVA: 0x114B090 Offset: 0x114B090 VA: 0x114B090
	public void setMasterBuffEffectData(string popLabel, int popLabelColor, int[] effectList) { }

	// RVA: 0x114B0A0 Offset: 0x114B0A0 VA: 0x114B0A0
	public void startMasterBuffEffect() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE558 Offset: 0xCCE558 VA: 0xCCE558
	// RVA: 0x114B9E0 Offset: 0x114B9E0 VA: 0x114B9E0
	private IEnumerator waitMasterBuffEffect(float waitTime) { }

	// RVA: 0x1147808 Offset: 0x1147808 VA: 0x1147808
	public void endMasterBuffEffect(UIWidget widget) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE568 Offset: 0xCCE568 VA: 0xCCE568
	// RVA: 0x114BA7C Offset: 0x114BA7C VA: 0x114BA7C
	public IEnumerator endMasterBuffEffectFadeOut() { }

	// RVA: 0x114BAF4 Offset: 0x114BAF4 VA: 0x114BAF4
	private void procOpenItemListWindow() { }

	// RVA: 0x114BC18 Offset: 0x114BC18 VA: 0x114BC18
	private void compOpenItemListWindow() { }

	// RVA: 0x114BC7C Offset: 0x114BC7C VA: 0x114BC7C
	public void OpenRetireWindowSA() { }

	// RVA: 0x114BCE0 Offset: 0x114BCE0 VA: 0x114BCE0
	private void ShowRetireSA() { }

	// RVA: 0x114BD9C Offset: 0x114BD9C VA: 0x114BD9C
	private void OnCompShowRetireSA() { }

	// RVA: 0x114BE00 Offset: 0x114BE00 VA: 0x114BE00
	private void CloseRetireSA() { }

	// RVA: 0x114BE94 Offset: 0x114BE94 VA: 0x114BE94
	private void OnCompCloseRetireSA() { }

	// RVA: 0x114BEF8 Offset: 0x114BEF8 VA: 0x114BEF8
	public bool IsTacticalPhaseWait() { }

	// RVA: 0x114BF80 Offset: 0x114BF80 VA: 0x114BF80
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE578 Offset: 0xCCE578 VA: 0xCCE578
	// RVA: 0x114BFDC Offset: 0x114BFDC VA: 0x114BFDC
	private static bool <updateSkillIcon>m__0(string x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE588 Offset: 0xCCE588 VA: 0xCCE588
	// RVA: 0x114C050 Offset: 0x114C050 VA: 0x114C050
	private static bool <updateSkillIcon>m__1(string x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE598 Offset: 0xCCE598 VA: 0xCCE598
	// RVA: 0x114C0C4 Offset: 0x114C0C4 VA: 0x114C0C4
	private static void <selectedSvt>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE5A8 Offset: 0xCCE5A8 VA: 0xCCE5A8
	// RVA: 0x114C0C8 Offset: 0x114C0C8 VA: 0x114C0C8
	private static void <selectedSkillSvt>m__3() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44424 Offset: 0xC44424 VA: 0xC44424
private sealed class BattlePerformanceMaster.<Initialize>c__AnonStorey3 // TypeDefIndex: 9295
{
	// Fields
	internal string flashPrefabName; // 0x10

	// Methods

	// RVA: 0x1145E7C Offset: 0x1145E7C VA: 0x1145E7C
	public void .ctor() { }

	// RVA: 0x114C0CC Offset: 0x114C0CC VA: 0x114C0CC
	internal bool <>m__0(GameObject x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44434 Offset: 0xC44434 VA: 0xC44434
private sealed class BattlePerformanceMaster.<openRetireDialog>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9296
{
	// Fields
	internal BattlePerformanceMaster $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBB80 Offset: 0xCDBB80 VA: 0xCDBB80
	// RVA: 0x114A544 Offset: 0x114A544 VA: 0x114A544
	public void .ctor() { }

	// RVA: 0x114C4C4 Offset: 0x114C4C4 VA: 0x114C4C4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB90 Offset: 0xCDBB90 VA: 0xCDBB90
	// RVA: 0x114C608 Offset: 0x114C608 VA: 0x114C608 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBBA0 Offset: 0xCDBBA0 VA: 0xCDBBA0
	// RVA: 0x114C610 Offset: 0x114C610 VA: 0x114C610 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBBB0 Offset: 0xCDBBB0 VA: 0xCDBBB0
	// RVA: 0x114C618 Offset: 0x114C618 VA: 0x114C618 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBBC0 Offset: 0xCDBBC0 VA: 0xCDBBC0
	// RVA: 0x114C62C Offset: 0x114C62C VA: 0x114C62C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44444 Offset: 0xC44444 VA: 0xC44444
private sealed class BattlePerformanceMaster.<startMasterBuffEffect>c__AnonStorey4 // TypeDefIndex: 9297
{
	// Fields
	internal float waitTime; // 0x10
	internal BattlePerformanceMaster $this; // 0x18

	// Methods

	// RVA: 0x114B9D8 Offset: 0x114B9D8 VA: 0x114B9D8
	public void .ctor() { }

	// RVA: 0x114C694 Offset: 0x114C694 VA: 0x114C694
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44454 Offset: 0xC44454 VA: 0xC44454
private sealed class BattlePerformanceMaster.<waitMasterBuffEffect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9298
{
	// Fields
	internal float waitTime; // 0x10
	internal BattlePerformanceMaster $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBBD0 Offset: 0xCDBBD0 VA: 0xCDBBD0
	// RVA: 0x114BA74 Offset: 0x114BA74 VA: 0x114BA74
	public void .ctor() { }

	// RVA: 0x114C700 Offset: 0x114C700 VA: 0x114C700 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBBE0 Offset: 0xCDBBE0 VA: 0xCDBBE0
	// RVA: 0x114C7B8 Offset: 0x114C7B8 VA: 0x114C7B8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBBF0 Offset: 0xCDBBF0 VA: 0xCDBBF0
	// RVA: 0x114C7C0 Offset: 0x114C7C0 VA: 0x114C7C0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC00 Offset: 0xCDBC00 VA: 0xCDBC00
	// RVA: 0x114C7C8 Offset: 0x114C7C8 VA: 0x114C7C8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC10 Offset: 0xCDBC10 VA: 0xCDBC10
	// RVA: 0x114C7DC Offset: 0x114C7DC VA: 0x114C7DC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44464 Offset: 0xC44464 VA: 0xC44464
private sealed class BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9299
{
	// Fields
	internal BattlePerformanceMaster $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24
	private BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2.<endMasterBuffEffectFadeOut>c__AnonStorey5 $locvar0; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBC20 Offset: 0xCDBC20 VA: 0xCDBC20
	// RVA: 0x114BAEC Offset: 0x114BAEC VA: 0x114BAEC
	public void .ctor() { }

	// RVA: 0x114C120 Offset: 0x114C120 VA: 0x114C120 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC30 Offset: 0xCDBC30 VA: 0xCDBC30
	// RVA: 0x114C3F0 Offset: 0x114C3F0 VA: 0x114C3F0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC40 Offset: 0xCDBC40 VA: 0xCDBC40
	// RVA: 0x114C3F8 Offset: 0x114C3F8 VA: 0x114C3F8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC50 Offset: 0xCDBC50 VA: 0xCDBC50
	// RVA: 0x114C400 Offset: 0x114C400 VA: 0x114C400 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC60 Offset: 0xCDBC60 VA: 0xCDBC60
	// RVA: 0x114C414 Offset: 0x114C414 VA: 0x114C414 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2.<endMasterBuffEffectFadeOut>c__AnonStorey5 // TypeDefIndex: 9300
{
	// Fields
	internal UIWidget widget; // 0x10
	internal BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x114C3E8 Offset: 0x114C3E8 VA: 0x114C3E8
	public void .ctor() { }

	// RVA: 0x114C47C Offset: 0x114C47C VA: 0x114C47C
	internal void <>m__0() { }
}

// Namespace: 
public class BattlePerformancePlayer : MonoBehaviour // TypeDefIndex: 9301
{
	// Fields
	public PlayMakerFSM myfsm; // 0x18
	public PlayMakerFSM otherFsm; // 0x20
	private BattlePerformance perf; // 0x28
	private BattleData data; // 0x30
	private BattleLogic logic; // 0x38
	public BattleServantParamComponent[] list_param; // 0x40
	private int[] list_ID; // 0x48
	public BattleServantConfConponent confwindowComp; // 0x50
	public BattleSkillConfComponent skillConfWindow; // 0x58
	private Vector3[] list_pos; // 0x60
	private Vector3 conf_pos; // 0x68
	private bool isLongTap; // 0x74
	private int tmp_uniqueId; // 0x78
	private BattleLogic.UseSkillObject tmp_useSkill; // 0x80
	private BattleLogic.UseSkillObject useSkillObject; // 0x88
	private BattleLogic.UseSkillObject actSkillObject; // 0x90
	private BattleSelectServantWindow selectSvtWindow; // 0x98
	private BattleSelectCommandTypeWindow selectCommandTypeWindow; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC66508 Offset: 0xC66508 VA: 0xC66508
	private static Action <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC66518 Offset: 0xC66518 VA: 0xC66518
	private static Action <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x114C844 Offset: 0x114C844 VA: 0x114C844
	public void .ctor() { }

	// RVA: 0x114C8BC Offset: 0x114C8BC VA: 0x114C8BC
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x114CBEC Offset: 0x114CBEC VA: 0x114CBEC
	public void deleteStatus(int index) { }

	// RVA: 0x114CDE8 Offset: 0x114CDE8 VA: 0x114CDE8
	public void setParam(int index, BattleServantData svtdata) { }

	// RVA: 0x114D000 Offset: 0x114D000 VA: 0x114D000
	public void startTac() { }

	// RVA: 0x114D064 Offset: 0x114D064 VA: 0x114D064
	public void modeTacPlayerStatus() { }

	// RVA: 0x114D2CC Offset: 0x114D2CC VA: 0x114D2CC
	public void onClickServant(int uniqueID) { }

	// RVA: 0x114D384 Offset: 0x114D384 VA: 0x114D384
	public void procSelectServant() { }

	// RVA: 0x114D720 Offset: 0x114D720 VA: 0x114D720
	public void onClickConfClose() { }

	// RVA: 0x114D784 Offset: 0x114D784 VA: 0x114D784
	public void procCloseConf(bool flg) { }

	// RVA: 0x114D964 Offset: 0x114D964 VA: 0x114D964
	public void onCloseConfComplete() { }

	// RVA: 0x114DAD0 Offset: 0x114DAD0 VA: 0x114DAD0
	public void procCloseAll() { }

	// RVA: 0x114DB84 Offset: 0x114DB84 VA: 0x114DB84
	public void startCommand() { }

	// RVA: 0x114DBE8 Offset: 0x114DBE8 VA: 0x114DBE8
	public void modeComPlayerStatus() { }

	// RVA: 0x114DFA8 Offset: 0x114DFA8 VA: 0x114DFA8
	public void onClickSkillIcon(BattleSkillInfoData skillInfo, bool isLong) { }

	// RVA: 0x114E13C Offset: 0x114E13C VA: 0x114E13C
	public void checkSkipFlg() { }

	// RVA: 0x114E328 Offset: 0x114E328 VA: 0x114E328
	public void procOpenSkillConf(bool cancelFlg = True) { }

	// RVA: 0x114E450 Offset: 0x114E450 VA: 0x114E450
	public void OpenSkillConfComplete() { }

	// RVA: 0x114E480 Offset: 0x114E480 VA: 0x114E480
	public void procCloseSkillConf() { }

	// RVA: 0x114E540 Offset: 0x114E540 VA: 0x114E540
	public void CloseSkillConfComp() { }

	// RVA: 0x114E5CC Offset: 0x114E5CC VA: 0x114E5CC
	public void useSkillIcon(BattleSkillInfoData skillInfo) { }

	// RVA: 0x114E660 Offset: 0x114E660 VA: 0x114E660
	public void onClickSkillOK(BattleSkillInfoData skillInfo) { }

	// RVA: 0x114E6F4 Offset: 0x114E6F4 VA: 0x114E6F4
	public void onClickSkillCancel() { }

	// RVA: 0x114E758 Offset: 0x114E758 VA: 0x114E758
	public void UseSkill(bool playSe) { }

	// RVA: 0x114EC9C Offset: 0x114EC9C VA: 0x114EC9C
	public void openSelectSvtWindow() { }

	// RVA: 0x114EFD4 Offset: 0x114EFD4 VA: 0x114EFD4
	public void selectedSvt(int uniqueId) { }

	// RVA: 0x114F31C Offset: 0x114F31C VA: 0x114F31C
	public void startSkill() { }

	// RVA: 0x114F380 Offset: 0x114F380 VA: 0x114F380
	public void endSkill() { }

	// RVA: 0x114EAEC Offset: 0x114EAEC VA: 0x114EAEC
	public void openSelectCommandTypeWindow() { }

	// RVA: 0x114F3E4 Offset: 0x114F3E4 VA: 0x114F3E4
	public void selectedCommandType(int uniqueId, int cmdType) { }

	// RVA: 0x114D19C Offset: 0x114D19C VA: 0x114D19C
	public void updateView() { }

	// RVA: 0x114F4FC Offset: 0x114F4FC VA: 0x114F4FC
	public void updateBuff() { }

	// RVA: 0x114F500 Offset: 0x114F500 VA: 0x114F500
	public void playAttackEffect(int uniqueID) { }

	// RVA: 0x114CAF8 Offset: 0x114CAF8 VA: 0x114CAF8
	public void initSvtConfWindow() { }

	// RVA: 0x114D690 Offset: 0x114D690 VA: 0x114D690
	public void openSvtConfWindow(float alphatime) { }

	// RVA: 0x114F5E4 Offset: 0x114F5E4 VA: 0x114F5E4
	public bool isOpenSvtConf() { }

	// RVA: 0x114F614 Offset: 0x114F614 VA: 0x114F614
	public void onOpenConfComplete() { }

	// RVA: 0x114D92C Offset: 0x114D92C VA: 0x114D92C
	public void closeSvtConfWindow(float alphatime, BattleWindowComponent.EndCall endCall) { }

	// RVA: 0x114F678 Offset: 0x114F678 VA: 0x114F678
	public void checkTutorial() { }

	// RVA: 0x114EE88 Offset: 0x114EE88 VA: 0x114EE88
	public void procTurorial(int param) { }

	// RVA: 0x114F800 Offset: 0x114F800 VA: 0x114F800
	public void tutorialSetArrowIcon() { }

	// RVA: 0x114F8FC Offset: 0x114F8FC VA: 0x114F8FC
	public void tutorialSetSelect() { }

	// RVA: 0x114FA00 Offset: 0x114FA00 VA: 0x114FA00
	public void tutorialSetSelectSvt() { }

	// RVA: 0x114FAF8 Offset: 0x114FAF8 VA: 0x114FAF8
	public bool showSideEffect(BattleActionData.BuffData buffData) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE5B8 Offset: 0xCCE5B8 VA: 0xCCE5B8
	// RVA: 0x114FC14 Offset: 0x114FC14 VA: 0x114FC14
	private static void <UseSkill>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE5C8 Offset: 0xCCE5C8 VA: 0xCCE5C8
	// RVA: 0x114FC18 Offset: 0x114FC18 VA: 0x114FC18
	private static void <selectedSvt>m__1() { }
}

// Namespace: 
public class BattlePerformanceStatus : BaseMonoBehaviour // TypeDefIndex: 9302
{
	// Fields
	public PlayMakerFSM fsm; // 0x18
	private BattlePerformance perf; // 0x20
	private BattleData data; // 0x28
	private BattleLogic logic; // 0x30
	public BattlePerformancePlayer playerPerf; // 0x38
	public BattlePerformanceMaster masterPerf; // 0x40
	public BattlePerformanceEnemy enemyPref; // 0x48
	public BattlePerformanceEnemyMst enemyMasterPerf; // 0x50
	public BattleBuffConfWindowComponent buffConfWindow; // 0x58
	public GameObject effect_takecri; // 0x60
	public Transform criticalpointTr; // 0x68
	public DrumRollLabel criticalpointlabel; // 0x70
	public Transform dropItemTr; // 0x78
	[SerializeField] // RVA: 0xC66528 Offset: 0xC66528 VA: 0xC66528
	private UILabel totalCriticalpointlabel; // 0x80
	private GameObject totalCriticalStarObj; // 0x88
	private int lastTotalCriticalPoint; // 0x90
	public BattlePerformanceInfoComponent InfoComp; // 0x98
	public BattleSelectServantWindow selectSvtWindow; // 0xA0
	public BattleSelectMainSubServantWindow selectMainSubSvtWindow; // 0xA8
	[SerializeField] // RVA: 0xC66538 Offset: 0xC66538 VA: 0xC66538
	private BattleSelectCommandTypeWindow selectCommandTypeWindow; // 0xB0
	public GameObject tapObject; // 0xB8
	[SerializeField] // RVA: 0xC66548 Offset: 0xC66548 VA: 0xC66548
	private GameObject effect_increaseGorgeousStar; // 0xC0
	[SerializeField] // RVA: 0xC66558 Offset: 0xC66558 VA: 0xC66558
	private GameObject effect_reduceGorgeousStar; // 0xC8
	private ParticleSystem.Burst[] tempBurst; // 0xD0
	private float gorgeousStarEffectTime; // 0xD8
	private BattlePerformanceStatus.TouchEventDelegate tapEvent; // 0xE0

	// Methods

	// RVA: 0x114FC1C Offset: 0x114FC1C VA: 0x114FC1C
	public void .ctor() { }

	// RVA: 0x114FC24 Offset: 0x114FC24 VA: 0x114FC24
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x114FF0C Offset: 0x114FF0C VA: 0x114FF0C
	public Transform getCollectDropTransform() { }

	// RVA: 0x114FF14 Offset: 0x114FF14 VA: 0x114FF14
	public void updateDropItemCount() { }

	// RVA: 0x114FF48 Offset: 0x114FF48 VA: 0x114FF48
	public void changeLayer(GameObject obj) { }

	// RVA: 0x115007C Offset: 0x115007C VA: 0x115007C
	public void initQuest() { }

	// RVA: 0x11500B0 Offset: 0x11500B0 VA: 0x11500B0
	public void loadMaster() { }

	// RVA: 0x11500DC Offset: 0x11500DC VA: 0x11500DC
	public void deletePlayerStatus(int index) { }

	// RVA: 0x1150110 Offset: 0x1150110 VA: 0x1150110
	public void setPlayerParam(int index, BattleServantData svtdata) { }

	// RVA: 0x1150154 Offset: 0x1150154 VA: 0x1150154
	public void deleteEnemyStatus(int index) { }

	// RVA: 0x1150188 Offset: 0x1150188 VA: 0x1150188
	public void setEnemyParam(int index, BattleServantData svtdata, GameObject obj) { }

	// RVA: 0x11501D4 Offset: 0x11501D4 VA: 0x11501D4
	public void setEnemyParamPosition() { }

	// RVA: 0x1150200 Offset: 0x1150200 VA: 0x1150200
	public void setTargetParam(BattleServantData svtdata) { }

	// RVA: 0x1150234 Offset: 0x1150234 VA: 0x1150234
	public void setOffTarget() { }

	// RVA: 0x1150260 Offset: 0x1150260 VA: 0x1150260
	public bool checkRaidHPUpdate() { }

	// RVA: 0x115028C Offset: 0x115028C VA: 0x115028C
	public void updateRaindInfo(BattleRaidInfo[] infos, bool fixUpdate = False) { }

	// RVA: 0x11502D0 Offset: 0x11502D0 VA: 0x11502D0
	public void updateRaidHp() { }

	// RVA: 0x11502FC Offset: 0x11502FC VA: 0x11502FC
	public void updateSuperBossInfo(BattleSuperBossInfo[] infos, bool fixUpdate = False) { }

	// RVA: 0x1150340 Offset: 0x1150340 VA: 0x1150340
	public long getTurnSituationParam() { }

	// RVA: 0x115036C Offset: 0x115036C VA: 0x115036C
	public void loadEnemyMaster() { }

	// RVA: 0x1150398 Offset: 0x1150398 VA: 0x1150398
	public bool isLoading() { }

	// RVA: 0x11503CC Offset: 0x11503CC VA: 0x11503CC
	public void setShowWave(int now, int max) { }

	// RVA: 0x1150410 Offset: 0x1150410 VA: 0x1150410
	public void setShowTurn(BattleData bdata, int addturn = 0) { }

	// RVA: 0x1150454 Offset: 0x1150454 VA: 0x1150454
	public void updateNokoriEnemyCount() { }

	// RVA: 0x1150488 Offset: 0x1150488 VA: 0x1150488
	public void updateCriticalPoint(int maxLabelCont = -1, bool isUseEffect = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE5D8 Offset: 0xCCE5D8 VA: 0xCCE5D8
	// RVA: 0x11506EC Offset: 0x11506EC VA: 0x11506EC
	private IEnumerator DoCreateCriticalEffect(float waitTime) { }

	// RVA: 0x11506B8 Offset: 0x11506B8 VA: 0x11506B8
	private void ShowCriticalStarEffectForSkill(int starCount) { }

	// RVA: 0x1150788 Offset: 0x1150788 VA: 0x1150788
	private void GorgeousStarCommonFunc(GameObject starEffectPrefab, short starCount) { }

	// RVA: 0x11505DC Offset: 0x11505DC VA: 0x11505DC
	public void updateTotalCriticalPoint() { }

	// RVA: 0x11509DC Offset: 0x11509DC VA: 0x11509DC
	public void ChangeCriticalLabelColor(Color color) { }

	// RVA: 0x1150A3C Offset: 0x1150A3C VA: 0x1150A3C
	public void SetActiveTotalCriticalStar(bool value) { }

	// RVA: 0x1150A74 Offset: 0x1150A74 VA: 0x1150A74
	public void updateView() { }

	// RVA: 0x1150ABC Offset: 0x1150ABC VA: 0x1150ABC
	public void modeStartWave() { }

	// RVA: 0x1150AE8 Offset: 0x1150AE8 VA: 0x1150AE8
	public void modeTactical() { }

	// RVA: 0x1150B9C Offset: 0x1150B9C VA: 0x1150B9C
	public void modeCommand() { }

	// RVA: 0x1150C24 Offset: 0x1150C24 VA: 0x1150C24
	public void modeAction() { }

	// RVA: 0x1150C50 Offset: 0x1150C50 VA: 0x1150C50
	public void updateBuff() { }

	// RVA: 0x1150C94 Offset: 0x1150C94 VA: 0x1150C94
	public void playAttackEffect(int uniqueID) { }

	// RVA: 0x1150CC8 Offset: 0x1150CC8 VA: 0x1150CC8
	public void startSkill() { }

	// RVA: 0x1150D50 Offset: 0x1150D50 VA: 0x1150D50
	public void endSkill() { }

	// RVA: 0x1150DD8 Offset: 0x1150DD8 VA: 0x1150DD8
	public BattleSelectServantWindow getSelectSvtWindow() { }

	// RVA: 0x1150DE0 Offset: 0x1150DE0 VA: 0x1150DE0
	public BattleSelectMainSubServantWindow getSelectMainSubSvtWindow() { }

	// RVA: 0x1150DE8 Offset: 0x1150DE8 VA: 0x1150DE8
	public BattleSelectCommandTypeWindow getSelectCommandTypeWindow() { }

	// RVA: 0x1150DF0 Offset: 0x1150DF0 VA: 0x1150DF0
	public void OpenBuffConf(int Id) { }

	// RVA: 0x114D658 Offset: 0x114D658 VA: 0x114D658
	public void CloseBuffConf() { }

	// RVA: 0x1150EEC Offset: 0x1150EEC VA: 0x1150EEC
	public void clickServantWindow(int index) { }

	// RVA: 0x1150FB8 Offset: 0x1150FB8 VA: 0x1150FB8
	public int getSelectedUniqueID() { }

	// RVA: 0x114FECC Offset: 0x114FECC VA: 0x114FECC
	private void initActionTouch() { }

	// RVA: 0x1150FC0 Offset: 0x1150FC0 VA: 0x1150FC0
	public void actionTouchEvent() { }

	// RVA: 0x11511D4 Offset: 0x11511D4 VA: 0x11511D4
	public void setTouchOn(BattlePerformanceStatus.TouchEventDelegate inTapEvent) { }

	// RVA: 0x11512D8 Offset: 0x11512D8 VA: 0x11512D8
	public void setTouchOff(BattlePerformanceStatus.TouchEventDelegate inTapEvent) { }

	// RVA: 0x11513BC Offset: 0x11513BC VA: 0x11513BC
	public void setWinView() { }

	// RVA: 0x11513E8 Offset: 0x11513E8 VA: 0x11513E8
	public void updateStateString() { }

	// RVA: 0x1151414 Offset: 0x1151414 VA: 0x1151414
	public void playShiftEffectBefore(int uniqueId) { }

	// RVA: 0x1151448 Offset: 0x1151448 VA: 0x1151448
	public void playShiftEffect(int uniqueId) { }

	// RVA: 0x115147C Offset: 0x115147C VA: 0x115147C
	public void showSideEffect(BattleActionData.BuffData buffData) { }

	// RVA: 0x11514EC Offset: 0x11514EC VA: 0x11514EC
	public bool isOpenOrOpeningMainWindow() { }

	// RVA: 0x11515A8 Offset: 0x11515A8 VA: 0x11515A8
	public BattleServantParamComponent GetEnemySvtParamComponent(int uniqueId) { }
}

// Namespace: 
public sealed class BattlePerformanceStatus.TouchEventDelegate : MulticastDelegate // TypeDefIndex: 9303
{
	// Methods

	// RVA: 0x11517B4 Offset: 0x11517B4 VA: 0x11517B4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1150FD4 Offset: 0x1150FD4 VA: 0x1150FD4 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x11517C4 Offset: 0x11517C4 VA: 0x11517C4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x11517F8 Offset: 0x11517F8 VA: 0x11517F8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44474 Offset: 0xC44474 VA: 0xC44474
private sealed class BattlePerformanceStatus.<DoCreateCriticalEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9304
{
	// Fields
	internal float waitTime; // 0x10
	internal BattlePerformanceStatus $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBC70 Offset: 0xCDBC70 VA: 0xCDBC70
	// RVA: 0x1150780 Offset: 0x1150780 VA: 0x1150780
	public void .ctor() { }

	// RVA: 0x11515DC Offset: 0x11515DC VA: 0x11515DC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC80 Offset: 0xCDBC80 VA: 0xCDBC80
	// RVA: 0x1151728 Offset: 0x1151728 VA: 0x1151728 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBC90 Offset: 0xCDBC90 VA: 0xCDBC90
	// RVA: 0x1151730 Offset: 0x1151730 VA: 0x1151730 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBCA0 Offset: 0xCDBCA0 VA: 0xCDBCA0
	// RVA: 0x1151738 Offset: 0x1151738 VA: 0x1151738 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBCB0 Offset: 0xCDBCB0 VA: 0xCDBCB0
	// RVA: 0x115174C Offset: 0x115174C VA: 0x115174C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePerformanceTurnSituationComponent : MonoBehaviour // TypeDefIndex: 9305
{
	// Fields
	private static readonly string LABEL_WITH_RAIDNAME_KEY; // 0x0
	public BattlePerformanceTurnSituationComponent.ComponentType componentType; // 0x18
	public int changeSpriteId; // 0x1C

	// Methods

	// RVA: 0x1151804 Offset: 0x1151804 VA: 0x1151804
	public void .ctor() { }

	// RVA: 0x115180C Offset: 0x115180C VA: 0x115180C
	public void setMessage(string message) { }

	// RVA: 0x11518D0 Offset: 0x11518D0 VA: 0x11518D0
	public void SetLabelWithRaidName(int situationNo, string bossName, long param) { }

	// RVA: 0x1151A20 Offset: 0x1151A20 VA: 0x1151A20
	private static void .cctor() { }
}

// Namespace: 
public enum BattlePerformanceTurnSituationComponent.ComponentType // TypeDefIndex: 9306
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceTurnSituationComponent.ComponentType NONE = 0;
	public const BattlePerformanceTurnSituationComponent.ComponentType LABEL = 1;
	public const BattlePerformanceTurnSituationComponent.ComponentType CHANGE_SPRITE = 2;
	public const BattlePerformanceTurnSituationComponent.ComponentType LABEL_WITH_RAIDNAME = 3;
}

