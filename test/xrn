	public void selectSvt(BattleSelectMainSubServantWindow.POSITION position, int uniqueId) { }

	// RVA: 0x1535FF8 Offset: 0x1535FF8 VA: 0x1535FF8
	public void setBattleData(BattleData data) { }

	// RVA: 0x1536000 Offset: 0x1536000 VA: 0x1536000 Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x153615C Offset: 0x153615C VA: 0x153615C
	public void atlasLoadEnd() { }

	// RVA: 0x1536004 Offset: 0x1536004 VA: 0x1536004
	public void OpenImpl(BattleWindowComponent.EndCall call) { }

	// RVA: 0x15361C8 Offset: 0x15361C8 VA: 0x15361C8 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1536344 Offset: 0x1536344 VA: 0x1536344
	public void onCloseButton() { }

	// RVA: 0x1536660 Offset: 0x1536660 VA: 0x1536660
	public void onActionButton() { }

	// RVA: 0x153682C Offset: 0x153682C VA: 0x153682C
	public void endErrorDialog(bool flg) { }

	// RVA: 0x1535AAC Offset: 0x1535AAC VA: 0x1535AAC
	private bool CheckCanOrderChangeServant(BattleServantData servantData) { }

	// RVA: 0x1536898 Offset: 0x1536898 VA: 0x1536898 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public sealed class BattleSelectMainSubServantWindow.SelectedCallBack : MulticastDelegate // TypeDefIndex: 9285
{
	// Methods

	// RVA: 0x15368E0 Offset: 0x15368E0 VA: 0x15368E0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15363F4 Offset: 0x15363F4 VA: 0x15363F4 Slot: 11
	public virtual void Invoke(bool flg, int mainUniqueId, int subUniqueId) { }

	// RVA: 0x15368F0 Offset: 0x15368F0 VA: 0x15368F0 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool flg, int mainUniqueId, int subUniqueId, AsyncCallback callback, object object) { }

	// RVA: 0x15369B4 Offset: 0x15369B4 VA: 0x15369B4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum BattleSelectMainSubServantWindow.POSITION // TypeDefIndex: 9286
{
	// Fields
	public int value__; // 0x0
	public const BattleSelectMainSubServantWindow.POSITION MAIN = 1;
	public const BattleSelectMainSubServantWindow.POSITION SUB = 2;
}

// Namespace: 
public class BattleSelectServantComponent : BaseMonoBehaviour // TypeDefIndex: 9287
{
	// Fields
	public GameObject root; // 0x18
	public ServantFaceIconComponent servantIcon; // 0x20
	public UILabel nameLabel; // 0x28
	public UILabel hpLabel; // 0x30
	public BattleHpGaugeBarComponent hpGauge; // 0x38
	public BattleNpGaugeSystemComponent npGauge; // 0x40
	public UISprite deckindexSprite; // 0x48
	public GameObject targetObject; // 0x50
	public GameObject servantSelectMask; // 0x58
	public UILabel servantSelectMaskLabel; // 0x60
	private BattleSelectServantComponent.CallBack selectCallBack; // 0x68
	private int uniqueId; // 0x70
	private BattleSelectMainSubServantWindow.POSITION position; // 0x74
	private bool isUse; // 0x78
	private bool canSelectFlag; // 0x79
	private static readonly int SERVANT_NAME_FONT_SIZE; // 0x0

	// Methods

	// RVA: 0x15369C0 Offset: 0x15369C0 VA: 0x15369C0
	public void .ctor() { }

	// RVA: 0x1535590 Offset: 0x1535590 VA: 0x1535590
	public void setData(BattleServantData svtData, BattleSelectMainSubServantWindow.POSITION position, int index, BattleSelectServantComponent.CallBack call) { }

	// RVA: 0x1535C80 Offset: 0x1535C80 VA: 0x1535C80
	public void setNone() { }

	// RVA: 0x1535B38 Offset: 0x1535B38 VA: 0x1535B38
	public void setSelectMask(bool canSelect) { }

	// RVA: 0x1535F90 Offset: 0x1535F90 VA: 0x1535F90
	public void setTarget(int selectUniqueId) { }

	// RVA: 0x15369D0 Offset: 0x15369D0 VA: 0x15369D0
	public void OnServantClick() { }

	// RVA: 0x1536314 Offset: 0x1536314 VA: 0x1536314
	public void ClearFaceAtlas() { }

	// RVA: 0x1536CCC Offset: 0x1536CCC VA: 0x1536CCC
	private static void .cctor() { }
}

// Namespace: 
public sealed class BattleSelectServantComponent.CallBack : MulticastDelegate // TypeDefIndex: 9288
{
	// Methods

	// RVA: 0x1535580 Offset: 0x1535580 VA: 0x1535580
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1536A88 Offset: 0x1536A88 VA: 0x1536A88 Slot: 11
	public virtual void Invoke(BattleSelectMainSubServantWindow.POSITION position, int uniqueId) { }

	// RVA: 0x1536D20 Offset: 0x1536D20 VA: 0x1536D20 Slot: 12
	public virtual IAsyncResult BeginInvoke(BattleSelectMainSubServantWindow.POSITION position, int uniqueId, AsyncCallback callback, object object) { }

	// RVA: 0x1536DC8 Offset: 0x1536DC8 VA: 0x1536DC8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleSelectServantWindow : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9289
{
	// Fields
	private BattleSelectServantWindow.SelectServantCallBack selectCallBack; // 0x50
	public UILabel title_label; // 0x58
	public GameObject parentPanel; // 0x60
	public UIGrid svtRoot; // 0x68
	public UITexture[] servantTop; // 0x70
	public bool useClose; // 0x78
	public bool isSelected; // 0x79
	public Collider cnancelButton; // 0x80
	private BattleServantData[] svtList; // 0x88

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1536DD4 Offset: 0x1536DD4 VA: 0x1536DD4
	public void .ctor() { }

	// RVA: 0x1536DE4 Offset: 0x1536DE4 VA: 0x1536DE4 Slot: 7
	public override void setInitialPos() { }

	// RVA: 0x1536EC0 Offset: 0x1536EC0 VA: 0x1536EC0 Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1536F78 Offset: 0x1536F78 VA: 0x1536F78 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1536FD4 Offset: 0x1536FD4 VA: 0x1536FD4
	public void SetServantData(BattleServantData[] svtList) { }

	// RVA: 0x1537510 Offset: 0x1537510 VA: 0x1537510
	public void SetCallBack(BattleSelectServantWindow.SelectServantCallBack callback) { }

	// RVA: 0x1537518 Offset: 0x1537518 VA: 0x1537518
	public void setUseClose(bool flg) { }

	// RVA: 0x15375D0 Offset: 0x15375D0 VA: 0x15375D0
	public void onCloseButton() { }

	// RVA: 0x15376AC Offset: 0x15376AC VA: 0x15376AC
	public void SelectA() { }

	// RVA: 0x1537714 Offset: 0x1537714 VA: 0x1537714
	public void SelectB() { }

	// RVA: 0x1537780 Offset: 0x1537780 VA: 0x1537780
	public void SelectC() { }

	// RVA: 0x15375E4 Offset: 0x15375E4 VA: 0x15375E4
	public void SelectServant(int uniqeId) { }

	// RVA: 0x1537A18 Offset: 0x1537A18 VA: 0x1537A18 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public sealed class BattleSelectServantWindow.SelectServantCallBack : MulticastDelegate // TypeDefIndex: 9290
{
	// Methods

	// RVA: 0x1537A60 Offset: 0x1537A60 VA: 0x1537A60
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15377EC Offset: 0x15377EC VA: 0x15377EC Slot: 11
	public virtual void Invoke(int uniqueId) { }

	// RVA: 0x1537A70 Offset: 0x1537A70 VA: 0x1537A70 Slot: 12
	public virtual IAsyncResult BeginInvoke(int uniqueId, AsyncCallback callback, object object) { }

	// RVA: 0x1537AFC Offset: 0x1537AFC VA: 0x1537AFC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleServantBreakPointComponent : MonoBehaviour // TypeDefIndex: 9291
{
	// Fields
	public float basePosX; // 0x18
	public float addPosX; // 0x1C
	public float scale; // 0x20
	private List<GameObject> breakPointObjList; // 0x28
	public GameObject baseObj; // 0x30
	public UISprite breakPointBackGroundSpr; // 0x38
	public UISprite breakPointSpr; // 0x40

	// Methods

	// RVA: 0x154441C Offset: 0x154441C VA: 0x154441C
	public void .ctor() { }

	// RVA: 0x154448C Offset: 0x154448C VA: 0x154448C
	public void Initialize(int breakPoint, int maxbreakPoint) { }
}

// Namespace: 
public class BattleServantBuffIconComponent : MonoBehaviour // TypeDefIndex: 9292
{
	// Fields
	public UISprite iconSprite; // 0x18
	public UISprite backSprite; // 0x20
	public BattlePerformanceStatus targetPerf; // 0x28
	public int buffId; // 0x30
	public bool isReady; // 0x34
	public GameObject flashEffectObj; // 0x38
	public GameObject flashEffectObjInstance; // 0x40
	private BattleBuffData.ShowBuffData nowBuff; // 0x48
	private BattleBuffData.ShowBuffData oldBuff; // 0x50

	// Methods

	// RVA: 0x1544838 Offset: 0x1544838 VA: 0x1544838
	public void .ctor() { }

	// RVA: 0x1544850 Offset: 0x1544850 VA: 0x1544850
	public void setIcon(int buffId) { }

	// RVA: 0x1544938 Offset: 0x1544938 VA: 0x1544938
	public void setIcon(BattleBuffData.ShowBuffData buff) { }

	// RVA: 0x1544E64 Offset: 0x1544E64 VA: 0x1544E64
	public void setImageId(int iconId) { }

	// RVA: 0x1544F94 Offset: 0x1544F94 VA: 0x1544F94
	public void OnClick() { }

	// RVA: 0x1545040 Offset: 0x1545040 VA: 0x1545040
	public void ParentHasChanged() { }

	// RVA: 0x1544BE8 Offset: 0x1544BE8 VA: 0x1544BE8
	private void ShowHighLight() { }

	// RVA: 0x1545144 Offset: 0x1545144 VA: 0x1545144
	public BattleBuffData.ShowBuffData GetNowBuff() { }

	// RVA: 0x154514C Offset: 0x154514C VA: 0x154514C
	public void UpdateActiveBuff() { }

	// RVA: 0x15451D8 Offset: 0x15451D8 VA: 0x15451D8
	public void AddDepth(int addDepth) { }
}

// Namespace: 
public class BattleServantChangeBarComponent : BaseMonoBehaviour // TypeDefIndex: 9293
{
	// Fields
	public UISprite hpframe; // 0x18
	public UISprite frontHpBart; // 0x20
	public UISprite backHpBar; // 0x28
	public UISprite damageHpBart; // 0x30
	public Transform splitTr; // 0x38
	public UISprite splitSprite; // 0x40
	public bool isBoss; // 0x48
	private int bartype; // 0x4C
	private GameObject[] splitList; // 0x50

	// Methods

	// RVA: 0x1545244 Offset: 0x1545244 VA: 0x1545244
	public void .ctor() { }

	// RVA: 0x15452AC Offset: 0x15452AC VA: 0x15452AC
	public void setBarType(int type, int shiftIndex = 0) { }

	// RVA: 0x1545724 Offset: 0x1545724 VA: 0x1545724
	public void setHpFrames(int type, int shiftIndex) { }

	// RVA: 0x15454BC Offset: 0x15454BC VA: 0x15454BC
	public void setMpFrames(int type) { }

	// RVA: 0x1545D58 Offset: 0x1545D58 VA: 0x1545D58
	public void setSplitHp(long[] split, long maxHp) { }
}

// Namespace: 
public class BattleServantConfConponent : BattleWindowComponent // TypeDefIndex: 9294
{
	// Fields
	public UILabel atklabel; // 0x48
	public UILabel shortNameLabel; // 0x50
	public BattleCommandComponent commandCard; // 0x58
	public UILabel npdetail; // 0x60
	public UILabel nplevel; // 0x68
	public UILabel maxNp; // 0x70
	public SkillIconComponent equipSkillSprite; // 0x78
	public UILabel equipSkillNameLabel; // 0x80
	public UILabel equipSkillConfLabel; // 0x88
	public BattleViewBufflistComponent buffListView; // 0x90
	public GameObject npRoot; // 0x98
	public UILabel havenotTdLabel; // 0xA0
	public UITexture facetex; // 0xA8
	private BattleServantData bsvtData; // 0xB0
	public BattleServantConfConponent.CloseButtonCallBack callback_close; // 0xB8
	public GameObject BattleServantAbilityObj; // 0xC0
	public GameObject AbillityTab; // 0xC8
	public GameObject AbillityBtnBg; // 0xD0
	public UIButton AbillityBtn; // 0xD8
	public UISprite AbillityName; // 0xE0
	public GameObject BattleServantStateObj; // 0xE8
	public GameObject StateTab; // 0xF0
	public GameObject StateBtnBg; // 0xF8
	public UIButton StateBtn; // 0x100
	public UISprite StateName; // 0x108
	public BattleCommandComponent[] CommandCardList; // 0x110
	public UILabel NoCommandCodeLabel; // 0x118
	public GameObject CommandCodeInfoPrefab; // 0x120
	public GameObject CommandCodeListParent; // 0x128
	public UIScrollView AbillityScrollView; // 0x130
	public UIWidget AbillityScrollBarWiget; // 0x138
	public UIScrollView StateScrollView; // 0x140
	public UIWidget StateScrollBarWiget; // 0x148
	public UILabel NoEquipLabel; // 0x150
	public GameObject CardAndCommandObj; // 0x158
	public float NotEquipObjHeightPos; // 0x160
	[SerializeField] // RVA: 0xCD3314 Offset: 0xCD3314 VA: 0xCD3314
	private BattleServantNPSpeedChangeComponent npSpeedChange; // 0x168
	[SerializeField] // RVA: 0xCD3324 Offset: 0xCD3324 VA: 0xCD3324
	private GameObject equipObj; // 0x170
	public ServantClassIconComponent classIcon; // 0x178
	public GameObject ClassSkillObj; // 0x180
	public UISprite ClassSkillTitle; // 0x188
	public GameObject ClassSkillInfoPrefab; // 0x190
	public GameObject ClassSkillListParent; // 0x198
	private ServantStatusSkillComponent[] ClassSkillList; // 0x1A0
	[SerializeField] // RVA: 0xCD3334 Offset: 0xCD3334 VA: 0xCD3334
	private float ClassSkillOffset; // 0x1A8
	public GameObject AppendSkillObj; // 0x1B0
	public UISprite AppendSkillTitle; // 0x1B8
	public GameObject AppendSkillInfoPrefab; // 0x1C0
	public GameObject AppendSkillListParent; // 0x1C8
	private ServantStatusSkillComponent[] AppendSkillList; // 0x1D0
	[SerializeField] // RVA: 0xCD3344 Offset: 0xCD3344 VA: 0xCD3344
	private float AppendSkillOffset; // 0x1D8
	private BattleData data; // 0x1E0
	private UIAtlas BattleAssetUIAtlas; // 0x1E8
	private bool isEquip; // 0x1F0
	private const string SAVEKEY_BATTLE_SERVANT_DETAIL_TAB = "BattleServantDetailTab";
	private bool isOpenAfter; // 0x1F1
	private bool isCommandCardUnderIcon; // 0x1F2
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DETAIL_LABEL_DEFAULT_HEIGHT; // 0x4
	private static readonly int DETAIL_LABEL_MAX_HEIGHT; // 0x8
	private static readonly int EQIUP_SKILL_LABEL_DEFAULT_HEIGHT; // 0xC
	private int adjustHeight; // 0x1F4
	[CompilerGeneratedAttribute] // RVA: 0xCD3354 Offset: 0xCD3354 VA: 0xCD3354
	private static Predicate<int> <>f__am$cache0; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD3364 Offset: 0xCD3364 VA: 0xCD3364
	private static Predicate<int> <>f__am$cache1; // 0x18

	// Properties
	public BattleServantData svtData { get; }
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1546014 Offset: 0x1546014 VA: 0x1546014
	public void .ctor() { }

	// RVA: 0x154602C Offset: 0x154602C VA: 0x154602C
	public BattleServantData get_svtData() { }

	// RVA: 0x1546034 Offset: 0x1546034 VA: 0x1546034
	public void Initialize(BattleData data) { }

	// RVA: 0x1546298 Offset: 0x1546298 VA: 0x1546298
	public bool isTargetSvt(int uniqueId) { }

	// RVA: 0x15462CC Offset: 0x15462CC VA: 0x15462CC
	public void setConfData(BattleServantData inbsvtData, bool isShowBuffIcon = True) { }

	// RVA: 0x1546DB4 Offset: 0x1546DB4 VA: 0x1546DB4
	public void setEquipList() { }

	// RVA: 0x1549540 Offset: 0x1549540 VA: 0x1549540
	public void ChangeLayout() { }

	// RVA: 0x15474F0 Offset: 0x15474F0 VA: 0x15474F0
	public void SetClassSkillList() { }

	// RVA: 0x1547EA4 Offset: 0x1547EA4 VA: 0x1547EA4
	public void SetAppendSkillList() { }

	// RVA: 0x1549C3C Offset: 0x1549C3C VA: 0x1549C3C
	private void GetAppendSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, out bool[] releaseStateList, out int[] lvList, int[] releaseSkillIds, int[] releaseSkillLvs) { }

	// RVA: 0x1548930 Offset: 0x1548930 VA: 0x1548930
	public void SetCommandCard() { }

	// RVA: 0x1548C48 Offset: 0x1548C48 VA: 0x1548C48
	public void SetCommandCodeSkillList() { }

	// RVA: 0x154A654 Offset: 0x154A654 VA: 0x154A654
	public void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x154A950 Offset: 0x154A950 VA: 0x154A950
	public void CompOpen() { }

	// RVA: 0x154AA18 Offset: 0x154AA18 VA: 0x154AA18
	public void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x154AA68 Offset: 0x154AA68 VA: 0x154AA68
	public void setCallBackPushClose(BattleServantConfConponent.CloseButtonCallBack callback) { }

	// RVA: 0x154AA70 Offset: 0x154AA70 VA: 0x154AA70
	public void OnClick() { }

	// RVA: 0x154A6AC Offset: 0x154A6AC VA: 0x154A6AC
	public void ResetScroll() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BC1C Offset: 0xD3BC1C VA: 0xD3BC1C
	// RVA: 0x154A9A8 Offset: 0x154A9A8 VA: 0x154A9A8
	private IEnumerator StartOpenTab() { }

	// RVA: 0x154ABB4 Offset: 0x154ABB4 VA: 0x154ABB4
	public bool IsLastOpenServantAbility() { }

	// RVA: 0x154AC38 Offset: 0x154AC38 VA: 0x154AC38
	public void OnClickServantAbility() { }

	// RVA: 0x154AE44 Offset: 0x154AE44 VA: 0x154AE44
	public void OnClickServantState() { }

	// RVA: 0x154A534 Offset: 0x154A534 VA: 0x154A534
	private void SetCommandCardTypeChangeBuff(BattleCommandComponent commandCard) { }

	// RVA: 0x1549B30 Offset: 0x1549B30 VA: 0x1549B30
	public bool SetAtlas() { }

	// RVA: 0x154B050 Offset: 0x154B050 VA: 0x154B050 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x154B10C Offset: 0x154B10C VA: 0x154B10C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BC2C Offset: 0xD3BC2C VA: 0xD3BC2C
	// RVA: 0x154B18C Offset: 0x154B18C VA: 0x154B18C
	private static bool <ChangeLayout>m__0(int codeId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BC3C Offset: 0xD3BC3C VA: 0xD3BC3C
	// RVA: 0x154B198 Offset: 0x154B198 VA: 0x154B198
	private static bool <SetCommandCodeSkillList>m__1(int id) { }
}

// Namespace: 
public sealed class BattleServantConfConponent.CloseButtonCallBack : MulticastDelegate // TypeDefIndex: 9295
{
	// Methods

	// RVA: 0x1B86DC0 Offset: 0x1B86DC0 VA: 0x1B86DC0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B86DD0 Offset: 0x1B86DD0 VA: 0x1B86DD0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1B86FD0 Offset: 0x1B86FD0 VA: 0x1B86FD0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1B87004 Offset: 0x1B87004 VA: 0x1B87004 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private enum BattleServantConfConponent.TAB // TypeDefIndex: 9296
{
	// Fields
	public int value__; // 0x0
	public const BattleServantConfConponent.TAB ABILLITY = 0;
	public const BattleServantConfConponent.TAB STATE = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0520 Offset: 0xCB0520 VA: 0xCB0520
private sealed class BattleServantConfConponent.<StartOpenTab>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9297
{
	// Fields
	internal BattleServantConfConponent $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48F34 Offset: 0xD48F34 VA: 0xD48F34
	// RVA: 0x1B86BB8 Offset: 0x1B86BB8 VA: 0x1B86BB8
	public void .ctor() { }

	// RVA: 0x1B86BC0 Offset: 0x1B86BC0 VA: 0x1B86BC0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F44 Offset: 0xD48F44 VA: 0xD48F44
	// RVA: 0x1B86D34 Offset: 0x1B86D34 VA: 0x1B86D34 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F54 Offset: 0xD48F54 VA: 0xD48F54
	// RVA: 0x1B86D3C Offset: 0x1B86D3C VA: 0x1B86D3C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F64 Offset: 0xD48F64 VA: 0xD48F64
	// RVA: 0x1B86D44 Offset: 0x1B86D44 VA: 0x1B86D44 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F74 Offset: 0xD48F74 VA: 0xD48F74
	// RVA: 0x1B86D58 Offset: 0x1B86D58 VA: 0x1B86D58 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleServantConfSkillComponent : BaseMonoBehaviour // TypeDefIndex: 9298
{
	// Fields
	[SerializeField] // RVA: 0xCD3374 Offset: 0xCD3374 VA: 0xCD3374
	protected GameObject skillBase; // 0x18
	[SerializeField] // RVA: 0xCD3384 Offset: 0xCD3384 VA: 0xCD3384
	protected UISprite titleNumFirstSprite; // 0x20
	[SerializeField] // RVA: 0xCD3394 Offset: 0xCD3394 VA: 0xCD3394
	protected UISprite titleNumSecondSprite; // 0x28
	[SerializeField] // RVA: 0xCD33A4 Offset: 0xCD33A4 VA: 0xCD33A4
	protected SkillIconComponent skillIcon; // 0x30
	[SerializeField] // RVA: 0xCD33B4 Offset: 0xCD33B4 VA: 0xCD33B4
	protected UIRangeLabel skillTitleRangeLabel; // 0x38
	[SerializeField] // RVA: 0xCD33C4 Offset: 0xCD33C4 VA: 0xCD33C4
	protected UILabel skillExplanationLabel; // 0x40
	[SerializeField] // RVA: 0xCD33D4 Offset: 0xCD33D4 VA: 0xCD33D4
	private int DETAIL_FONT_SIZE; // 0x48
	[SerializeField] // RVA: 0xCD33E4 Offset: 0xCD33E4 VA: 0xCD33E4
	private int DEFAULT_HEIGHT; // 0x4C
	private static readonly int MAX_HEIGHT; // 0x0
	private static readonly int ADJUST_HEIGHT; // 0x4
	private static readonly string SKILL_NO_FILE_PREFIX; // 0x8
	private static readonly int MAX_LEVEL; // 0x10

	// Methods

	// RVA: 0x1B87010 Offset: 0x1B87010 VA: 0x1B87010
	public void .ctor() { }

	// RVA: 0x1B87024 Offset: 0x1B87024 VA: 0x1B87024
	public void SetItem(int num, int skillId, string titleMessage, string explanationMessage, bool releaseState, int skillLv) { }

	// RVA: 0x1B874B0 Offset: 0x1B874B0 VA: 0x1B874B0
	public int GetDefaultHeight() { }

	// RVA: 0x1B874B8 Offset: 0x1B874B8 VA: 0x1B874B8
	public int GetHeight() { }

	// RVA: 0x1B874E8 Offset: 0x1B874E8 VA: 0x1B874E8
	private static void .cctor() { }
}

// Namespace: 
public class BattleServantDeadComponent : MonoBehaviour // TypeDefIndex: 9299
{
	// Fields
	[SerializeField] // RVA: 0xCD33F4 Offset: 0xCD33F4 VA: 0xCD33F4
	[TooltipAttribute] // RVA: 0xCD33F4 Offset: 0xCD33F4 VA: 0xCD33F4
	private List<BattleServantDeadComponent.ReplaceShader> replaceShaders; // 0x18
	[SerializeField] // RVA: 0xCD3440 Offset: 0xCD3440 VA: 0xCD3440
	[TooltipAttribute] // RVA: 0xCD3440 Offset: 0xCD3440 VA: 0xCD3440
	private List<BattleServantDeadComponent.ReplaceShader> replaceChocoShaders; // 0x20

	// Methods

	// RVA: 0x1B9CE2C Offset: 0x1B9CE2C VA: 0x1B9CE2C
	public void .ctor() { }

	// RVA: 0x1B9CEBC Offset: 0x1B9CEBC VA: 0x1B9CEBC
	public Shader getReplaceDeadShader(Shader shader, Shader defaultDeadShader) { }

	// RVA: 0x1B9D16C Offset: 0x1B9D16C VA: 0x1B9D16C
	public Shader getReplaceChocoShader(Shader shader, Shader defaultChocoShader) { }
}

// Namespace: 
[Serializable]
public class BattleServantDeadComponent.ReplaceShader // TypeDefIndex: 9300
{
	// Fields
	public Shader targetShader; // 0x10
	public Shader deadShader; // 0x18

	// Methods

	// RVA: 0x1B9D41C Offset: 0x1B9D41C VA: 0x1B9D41C
	public void .ctor() { }
}

// Namespace: 
public class BattleServantHeadUpComponent : MonoBehaviour // TypeDefIndex: 9301
{
	// Fields
	public GameObject rootObject; // 0x18
	public GameObject targetRoot; // 0x20
	public GameObject targetMark; // 0x28
	public GameObject lockTargetMark; // 0x30
	public BattleServantData tmp_svtData; // 0x38
	public int index; // 0x40
	private bool flgTarget; // 0x44
	private BattleServantHeadUpComponent.MODE mode; // 0x48

	// Methods

	// RVA: 0x1B9DA30 Offset: 0x1B9DA30 VA: 0x1B9DA30
	public void .ctor() { }

	// RVA: 0x1B9DA38 Offset: 0x1B9DA38 VA: 0x1B9DA38
	public void ShowStatus(bool flg) { }

	// RVA: 0x1B9DABC Offset: 0x1B9DABC VA: 0x1B9DABC
	public void setModeWaveStart() { }

	// RVA: 0x1B9DAE8 Offset: 0x1B9DAE8 VA: 0x1B9DAE8
	public void setModeTac() { }

	// RVA: 0x1B9DBCC Offset: 0x1B9DBCC VA: 0x1B9DBCC
	public void setModeCommand() { }

	// RVA: 0x1B9DC00 Offset: 0x1B9DC00 VA: 0x1B9DC00
	public void setModeAction() { }

	// RVA: 0x1B9DB1C Offset: 0x1B9DB1C VA: 0x1B9DB1C
	public void setTargetRoot(bool flg) { }

	// RVA: 0x1B9DC34 Offset: 0x1B9DC34 VA: 0x1B9DC34
	public void setData(BattleServantData svtData) { }

	// RVA: 0x1B9DD60 Offset: 0x1B9DD60 VA: 0x1B9DD60
	public void updateView() { }

	// RVA: 0x1B9DDA4 Offset: 0x1B9DDA4 VA: 0x1B9DDA4
	public void setTargetMark(int uniqueId, bool isTargetLock = False) { }

	// RVA: 0x1B9E00C Offset: 0x1B9E00C VA: 0x1B9E00C
	private void SetEnableTargetMark(bool enable) { }
}

// Namespace: 
private enum BattleServantHeadUpComponent.MODE // TypeDefIndex: 9302
{
	// Fields
	public int value__; // 0x0
	public const BattleServantHeadUpComponent.MODE NONE = 0;
	public const BattleServantHeadUpComponent.MODE WAVE_START = 1;
	public const BattleServantHeadUpComponent.MODE COMMAND = 2;
	public const BattleServantHeadUpComponent.MODE TAC = 3;
	public const BattleServantHeadUpComponent.MODE ACTION = 4;
}

// Namespace: 
public class BattleServantHpShiftComponent : BaseMonoBehaviour // TypeDefIndex: 9303
{
	// Fields
	public GameObject shiftIconClone; // 0x18
	public Vector2 addPos; // 0x20
	private int imageType; // 0x28
	private GameObject[] iconList; // 0x30

	// Methods

	// RVA: 0x1B9E324 Offset: 0x1B9E324 VA: 0x1B9E324
	public void .ctor() { }

	// RVA: 0x1B9E334 Offset: 0x1B9E334 VA: 0x1B9E334
	public int setInitValue(BattleServantData svtData) { }

	// RVA: 0x1B9E508 Offset: 0x1B9E508 VA: 0x1B9E508
	public string getSpriteName(int count) { }

	// RVA: 0x1B9E710 Offset: 0x1B9E710 VA: 0x1B9E710
	public void createIconList(int shiftCount) { }

	// RVA: 0x1B9EABC Offset: 0x1B9EABC VA: 0x1B9EABC
	public void setValue(BattleServantData svtData) { }

	// RVA: 0x1B9EC78 Offset: 0x1B9EC78 VA: 0x1B9EC78
	public void UpdateHideInvalidIcon(int dispMaxPos) { }

	// RVA: 0x1B9EDF4 Offset: 0x1B9EDF4 VA: 0x1B9EDF4
	public void UpdateIcon(int index, bool isEmpty, bool isActive = True) { }

	// RVA: 0x1B9EF30 Offset: 0x1B9EF30 VA: 0x1B9EF30
	public void UpdateIconActive(int index, bool isActive = True) { }

	// RVA: 0x1B9F000 Offset: 0x1B9F000 VA: 0x1B9F000
	public bool IsIconActive(int index) { }

	// RVA: 0x1B9F0CC Offset: 0x1B9F0CC VA: 0x1B9F0CC
	public void playShiftEffectBefore(BattleServantData svtData) { }

	// RVA: 0x1B9F310 Offset: 0x1B9F310 VA: 0x1B9F310
	public void playShiftEffect(BattleServantData svtData) { }

	// RVA: 0x1B9F5D8 Offset: 0x1B9F5D8 VA: 0x1B9F5D8
	public bool PlayShiftEffectGeneral(int index, BattleServantHpShiftComponent.EffectData effectData, Action<int> callBack) { }
}

// Namespace: 
public class BattleServantHpShiftComponent.EffectData // TypeDefIndex: 9304
{
	// Fields
	public string prefixAsset; // 0x10
	public string prefixEffect; // 0x18

	// Methods

	// RVA: 0x1AD52B0 Offset: 0x1AD52B0 VA: 0x1AD52B0
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0530 Offset: 0xCB0530 VA: 0xCB0530
private sealed class BattleServantHpShiftComponent.<PlayShiftEffectGeneral>c__AnonStorey0 // TypeDefIndex: 9305
{
	// Fields
	internal Action<int> callBack; // 0x10
	internal int index; // 0x18

	// Methods

	// RVA: 0x1AD5254 Offset: 0x1AD5254 VA: 0x1AD5254
	public void .ctor() { }

	// RVA: 0x1AD525C Offset: 0x1AD525C VA: 0x1AD525C
	internal void <>m__0() { }
}

// Namespace: 
public class BattleServantNPSpeedChangeComponent : MonoBehaviour // TypeDefIndex: 9306
{
	// Fields
	private const float defaultPositionZ = -698;
	private const float offsetZ = 126;
	private readonly Color maskColor; // 0x18
	private readonly Color maskLabelEffectColor; // 0x28
	[SerializeField] // RVA: 0xCD348C Offset: 0xCD348C VA: 0xCD348C
	private UICommonButton[] npSpeedButtonArray; // 0x38
	[SerializeField] // RVA: 0xCD349C Offset: 0xCD349C VA: 0xCD349C
	private UISprite[] npSpeedButtonSpriteArray; // 0x40
	[SerializeField] // RVA: 0xCD34AC Offset: 0xCD34AC VA: 0xCD34AC
	private UIRangeLabel[] npSpeedLabelArray; // 0x48
	[SerializeField] // RVA: 0xCD34BC Offset: 0xCD34BC VA: 0xCD34BC
	private UILabel explanationLabel; // 0x50
	[SerializeField] // RVA: 0xCD34CC Offset: 0xCD34CC VA: 0xCD34CC
	private UILabel supportServantLabel; // 0x58
	private BattleServantData battleServantData; // 0x60
	public float equipeOffsetZ; // 0x68
	private bool isSupport; // 0x6C

	// Methods

	// RVA: 0x1AD5328 Offset: 0x1AD5328 VA: 0x1AD5328
	public void .ctor() { }

	// RVA: 0x1AD53E0 Offset: 0x1AD53E0 VA: 0x1AD53E0
	public void SetData(BattleServantData battleSvtData) { }

	// RVA: 0x1AD5CE4 Offset: 0x1AD5CE4 VA: 0x1AD5CE4
	public void SetButtonPosition(int commandCodeSkillLength) { }

	// RVA: 0x1AD5D9C Offset: 0x1AD5D9C VA: 0x1AD5D9C
	public float CalcCommandCodeOffset(int commandCodeSkillLength) { }

	// RVA: 0x1AD5A4C Offset: 0x1AD5A4C VA: 0x1AD5A4C
	public void SetButton() { }

	// RVA: 0x1AD5DCC Offset: 0x1AD5DCC VA: 0x1AD5DCC
	private int GetSelectedButtonIndex(int svtCommonFlag) { }

	// RVA: 0x1AD5DE4 Offset: 0x1AD5DE4 VA: 0x1AD5DE4
	public void OnClickButton(UICommonButton button) { }

	// RVA: 0x1AD568C Offset: 0x1AD568C VA: 0x1AD568C
	private void SetSupportServantButton() { }
}

// Namespace: 
public class BattleServantParamComponent : BaseMonoBehaviour, IEventMessageRecieve, IEventSystemHandler // TypeDefIndex: 9307
{
	// Fields
	public GameObject root; // 0x18
	public GameObject target; // 0x20
	public int index; // 0x28
	public int uniqueID; // 0x2C
	public bool hpformatflg; // 0x30
	public UILabel hplabel; // 0x38
	public UILabel maxhplabel; // 0x40
	public UILabel totalhplabel; // 0x48
	public UISprite breakSprite; // 0x50
	public BattleHpGaugeBarComponent hpGauge; // 0x58
	public BattleServantChangeBarComponent hpChange; // 0x60
	public BattleServantHpShiftComponent hpShift; // 0x68
	public ServantClassIconComponent clsIconComponent; // 0x70
	public UILabel levelLabel; // 0x78
	public UILabel nameLabel; // 0x80
	public UILabel shortNameLabel; // 0x88
	private int defaultShortNameLabelWidth; // 0x90
	public BattleNpGaugeSystemComponent npcomp; // 0x98
	public BattleNextTDgaugeComponent nextTdGauge; // 0xA0
	public UITexture facetex; // 0xA8
	public UISprite bg; // 0xB0
	public UISprite friendIcon; // 0xB8
	public UISprite roleTypeSprite; // 0xC0
	public BattleServantShowBuffComponent showBuffComponent; // 0xC8
	public Transform skillRoot; // 0xD0
	public BattleServantSkillIConComponent[] skillIcon; // 0xD8
	public GameObject targetMark; // 0xE0
	public GameObject lockTargetMark; // 0xE8
	public BattleServantBreakPointComponent breakPoint; // 0xF0
	private BattleServantData data; // 0xF8
	protected BattlePerformance perf; // 0x100
	private GameObject[] effectobj; // 0x108
	private Queue<BattleActionData.BuffData> sideEffectShowQueue; // 0x110
	private bool isShowingSideEffect; // 0x118
	public BattleEffectControl battleEffectControl; // 0x120
	[SerializeField] // RVA: 0xCD34DC Offset: 0xCD34DC VA: 0xCD34DC
	[TooltipAttribute] // RVA: 0xCD34DC Offset: 0xCD34DC VA: 0xCD34DC
	private Vector3 sideEffectScl; // 0x128
	[SerializeField] // RVA: 0xCD3528 Offset: 0xCD3528 VA: 0xCD3528
	[TooltipAttribute] // RVA: 0xCD3528 Offset: 0xCD3528 VA: 0xCD3528
	private float sideEffectLabelWidth; // 0x134
	private static readonly float SideEffectShowWaitTime; // 0x0
	private BattleServantParamComponent.WINDOW_MODE modeWindow; // 0x138
	private int shiftGaugeMaxHp; // 0x13C
	private readonly Color GRAY; // 0x140
	private bool isActiveHpBar; // 0x150

	// Methods

	// RVA: 0x1AD5F30 Offset: 0x1AD5F30 VA: 0x1AD5F30
	public void .ctor() { }

	// RVA: 0x1AD6050 Offset: 0x1AD6050 VA: 0x1AD6050 Slot: 6
	public virtual void setData(BattleServantData data) { }

	// RVA: 0x1AD76AC Offset: 0x1AD76AC VA: 0x1AD76AC
	public BattleServantData getData() { }

	// RVA: 0x1AD76B4 Offset: 0x1AD76B4 VA: 0x1AD76B4
	public void setPerf(BattlePerformance inperf) { }

	// RVA: 0x1AD76BC Offset: 0x1AD76BC VA: 0x1AD76BC
	public bool isNone() { }

	// RVA: 0x1AD76CC Offset: 0x1AD76CC VA: 0x1AD76CC
	public void OnClick() { }

	// RVA: 0x1AD77B4 Offset: 0x1AD77B4 VA: 0x1AD77B4
	public void playStartShowServant() { }

	// RVA: 0x1AD77B8 Offset: 0x1AD77B8 VA: 0x1AD77B8
	public void playSelectServant() { }

	// RVA: 0x1AD7970 Offset: 0x1AD7970 VA: 0x1AD7970
	public void playCloseSelectServant() { }

	// RVA: 0x1AD7A4C Offset: 0x1AD7A4C VA: 0x1AD7A4C
	public void playEndShowServant() { }

	// RVA: 0x1AD7B28 Offset: 0x1AD7B28 VA: 0x1AD7B28
	public void setCloseMode() { }

	// RVA: 0x1AD80B8 Offset: 0x1AD80B8 VA: 0x1AD80B8
	public void setOpenMode() { }

	// RVA: 0x1AD8B14 Offset: 0x1AD8B14 VA: 0x1AD8B14
	public void setVisible(bool flg) { }

	// RVA: 0x1AD7894 Offset: 0x1AD7894 VA: 0x1AD7894
	public void setTouch(bool flg) { }

	// RVA: 0x1AD8BF8 Offset: 0x1AD8BF8 VA: 0x1AD8BF8
	public bool checkId(int Id) { }

	// RVA: 0x1AD8010 Offset: 0x1AD8010 VA: 0x1AD8010
	public void setSkillFlash(bool flg) { }

	// RVA: 0x1AD8C18 Offset: 0x1AD8C18 VA: 0x1AD8C18 Slot: 7
	public virtual void SetEnemyParamPosition(BaseEnemyParamPosData paramPosData) { }

	// RVA: 0x1AD8D30 Offset: 0x1AD8D30 VA: 0x1AD8D30
	public void updateNp(BattleServantData svtdata) { }

	// RVA: 0x1AD8E30 Offset: 0x1AD8E30 VA: 0x1AD8E30 Slot: 4
	public void updateNp(BattleServantData svtdata, int[] npArray, int index) { }

	// RVA: 0x1AD8F68 Offset: 0x1AD8F68 VA: 0x1AD8F68
	public void updateTDGauge(BattleServantData svtData) { }

	// RVA: 0x1AD908C Offset: 0x1AD908C VA: 0x1AD908C Slot: 8
	public virtual void changeHp(BattleServantData svtdata) { }

	// RVA: 0x1AD95C8 Offset: 0x1AD95C8 VA: 0x1AD95C8
	public void updateHpbar(int now, int max) { }

	// RVA: 0x1AD915C Offset: 0x1AD915C VA: 0x1AD915C
	public void updateHplabel(int now, int max, bool isDispBreak = True) { }

	// RVA: 0x1AD96F8 Offset: 0x1AD96F8 VA: 0x1AD96F8
	public void setClassIcon() { }

	// RVA: 0x1AD97E8 Offset: 0x1AD97E8 VA: 0x1AD97E8
	public void setRoleTyoe() { }

	// RVA: 0x1AD9A10 Offset: 0x1AD9A10 VA: 0x1AD9A10
	public void playAttackEffect() { }

	// RVA: 0x1AD9BE4 Offset: 0x1AD9BE4 VA: 0x1AD9BE4
	public void fixUpdateStatus() { }

	// RVA: 0x1AD6140 Offset: 0x1AD6140 VA: 0x1AD6140
	public void initUpdateView(int notUpdateFlag = 0) { }

	// RVA: 0x1AD9D94 Offset: 0x1AD9D94 VA: 0x1AD9D94
	public void UpdateStatusByTransform() { }

	// RVA: 0x1AD6B8C Offset: 0x1AD6B8C VA: 0x1AD6B8C
	public void updateView() { }

	// RVA: 0x1AD9BEC Offset: 0x1AD9BEC VA: 0x1AD9BEC
	public void setAtlas() { }

	// RVA: 0x1AD87FC Offset: 0x1AD87FC VA: 0x1AD87FC
	public void updateSkillIcon(bool flg = False) { }

	// RVA: 0x1ADA9FC Offset: 0x1ADA9FC VA: 0x1ADA9FC
	public void callSkillIcon() { }

	// RVA: 0x1AD6E44 Offset: 0x1AD6E44 VA: 0x1AD6E44
	public void UpdateSkillRankUpEffect() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BC4C Offset: 0xD3BC4C VA: 0xD3BC4C
	// RVA: 0x1ADAC48 Offset: 0x1ADAC48 VA: 0x1ADAC48
	private IEnumerator coroutineUpdateSkillRankUpEffect() { }

	// RVA: 0x1ADABC8 Offset: 0x1ADABC8 VA: 0x1ADABC8
	public void DeleteSkillRankUpEffect() { }

	// RVA: 0x1AD8A94 Offset: 0x1AD8A94 VA: 0x1AD8A94
	public void RemoveEffectClearRankUpBuff() { }

	// RVA: 0x1ADADC0 Offset: 0x1ADADC0 VA: 0x1ADADC0
	public void clickSkillIcon(BattleSkillInfoData skillInfo, bool isLongTap) { }

	// RVA: 0x1ADAE98 Offset: 0x1ADAE98 VA: 0x1ADAE98 Slot: 5
	public void updateBuffIconList(BattleServantData svtData, bool doAuraUpdate) { }

	// RVA: 0x1ADB048 Offset: 0x1ADB048 VA: 0x1ADB048
	public void updateBuffIconSelf() { }

	// RVA: 0x1ADA22C Offset: 0x1ADA22C VA: 0x1ADA22C
	public void updateBuffIcon(BattleBuffData buffData) { }

	// RVA: 0x1ADB3DC Offset: 0x1ADB3DC VA: 0x1ADB3DC
	public void onClickEnemyTarget() { }

	// RVA: 0x1ADB508 Offset: 0x1ADB508 VA: 0x1ADB508
	public void onLongPressEnemyTarget() { }

	// RVA: 0x1AD6E8C Offset: 0x1AD6E8C VA: 0x1AD6E8C
	public void setTargetMark(int uniqueId, bool isTargetLock = False) { }

	// RVA: 0x1ADB564 Offset: 0x1ADB564 VA: 0x1ADB564
	public void playShiftEffectBefore() { }

	// RVA: 0x1ADB610 Offset: 0x1ADB610 VA: 0x1ADB610
	public void playShiftEffect() { }

	// RVA: 0x1ADB6BC Offset: 0x1ADB6BC VA: 0x1ADB6BC
