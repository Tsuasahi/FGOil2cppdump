	|
	|-RVA: 0xD6F508 Offset: 0xD6F508 VA: 0xD6F508
	|-Nullable<CriAtomExMic.Config>.get_HasValue
	|
	|-RVA: 0xD6F914 Offset: 0xD6F914 VA: 0xD6F914
	|-Nullable<CriAtomExMic.DeviceInfo>.get_HasValue
	|
	|-RVA: 0xD6FC60 Offset: 0xD6FC60 VA: 0xD6FC60
	|-Nullable<Player.Status>.get_HasValue
	|
	|-RVA: 0xD6FE8C Offset: 0xD6FE8C VA: 0xD6FE8C
	|-Nullable<bool>.get_HasValue
	|
	|-RVA: 0xD700E4 Offset: 0xD700E4 VA: 0xD700E4
	|-Nullable<char>.get_HasValue
	|
	|-RVA: 0xD70310 Offset: 0xD70310 VA: 0xD70310
	|-Nullable<DateTime>.get_HasValue
	|
	|-RVA: 0xD7055C Offset: 0xD7055C VA: 0xD7055C
	|-Nullable<int>.get_HasValue
	|
	|-RVA: 0xD70784 Offset: 0xD70784 VA: 0xD70784
	|-Nullable<long>.get_HasValue
	|
	|-RVA: 0xD70988 Offset: 0xD70988 VA: 0xD70988
	|-Nullable<GCHandle>.get_HasValue
	|
	|-RVA: 0xD70BB0 Offset: 0xD70BB0 VA: 0xD70BB0
	|-Nullable<float>.get_HasValue
	|
	|-RVA: 0xD70DF4 Offset: 0xD70DF4 VA: 0xD70DF4
	|-Nullable<TimeSpan>.get_HasValue
	|
	|-RVA: 0xD70FF8 Offset: 0xD70FF8 VA: 0xD70FF8
	|-Nullable<uint>.get_HasValue
	|
	|-RVA: 0xD71220 Offset: 0xD71220 VA: 0xD71220
	|-Nullable<Vector2>.get_HasValue
	|
	|-RVA: 0xD714F0 Offset: 0xD714F0 VA: 0xD714F0
	|-Nullable<Vector3>.get_HasValue
	*/

	// RVA: -1 Offset: -1
	public T get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD6CFD4 Offset: 0xD6CFD4 VA: 0xD6CFD4
	|-Nullable<ConnectMarkFadeInLagType>.get_Value
	|
	|-RVA: 0xD6D1FC Offset: 0xD6D1FC VA: 0xD6D1FC
	|-Nullable<CriAtomEx.Randomize3dConfig>.get_Value
	|
	|-RVA: 0xD6F254 Offset: 0xD6F254 VA: 0xD6F254
	|-Nullable<CriAtomExAuxIn.Config>.get_Value
	|
	|-RVA: 0xD6F57C Offset: 0xD6F57C VA: 0xD6F57C
	|-Nullable<CriAtomExMic.Config>.get_Value
	|
	|-RVA: 0xD6FEB0 Offset: 0xD6FEB0 VA: 0xD6FEB0
	|-Nullable<bool>.get_Value
	|
	|-RVA: 0xD70108 Offset: 0xD70108 VA: 0xD70108
	|-Nullable<char>.get_Value
	|
	|-RVA: 0xD70580 Offset: 0xD70580 VA: 0xD70580
	|-Nullable<int>.get_Value
	|
	|-RVA: 0xD707A8 Offset: 0xD707A8 VA: 0xD707A8
	|-Nullable<long>.get_Value
	|
	|-RVA: 0xD709AC Offset: 0xD709AC VA: 0xD709AC
	|-Nullable<GCHandle>.get_Value
	|
	|-RVA: 0xD70BD4 Offset: 0xD70BD4 VA: 0xD70BD4
	|-Nullable<float>.get_Value
	|
	|-RVA: 0xD7101C Offset: 0xD7101C VA: 0xD7101C
	|-Nullable<uint>.get_Value
	|
	|-RVA: 0xD71258 Offset: 0xD71258 VA: 0xD71258
	|-Nullable<Vector2>.get_Value
	|
	|-RVA: 0xD71528 Offset: 0xD71528 VA: 0xD71528
	|-Nullable<Vector3>.get_Value
	|
	|-RVA: 0xD6F970 Offset: 0xD6F970 VA: 0xD6F970
	|-Nullable<CriAtomExMic.DeviceInfo>.get_Value
	|
	|-RVA: 0xD6FC84 Offset: 0xD6FC84 VA: 0xD6FC84
	|-Nullable<Player.Status>.get_Value
	|
	|-RVA: 0xD70334 Offset: 0xD70334 VA: 0xD70334
	|-Nullable<DateTime>.get_Value
	|
	|-RVA: 0xD70E18 Offset: 0xD70E18 VA: 0xD70E18
	|-Nullable<TimeSpan>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD6D028 Offset: 0xD6D028 VA: 0xD6D028
	|-Nullable<ConnectMarkFadeInLagType>.Equals
	|
	|-RVA: 0xD6D258 Offset: 0xD6D258 VA: 0xD6D258
	|-Nullable<CriAtomEx.Randomize3dConfig>.Equals
	|
	|-RVA: 0xD6F2CC Offset: 0xD6F2CC VA: 0xD6F2CC
	|-Nullable<CriAtomExAuxIn.Config>.Equals
	|
	|-RVA: 0xD6F60C Offset: 0xD6F60C VA: 0xD6F60C
	|-Nullable<CriAtomExMic.Config>.Equals
	|
	|-RVA: 0xD6F9E8 Offset: 0xD6F9E8 VA: 0xD6F9E8
	|-Nullable<CriAtomExMic.DeviceInfo>.Equals
	|
	|-RVA: 0xD6FCD8 Offset: 0xD6FCD8 VA: 0xD6FCD8
	|-Nullable<Player.Status>.Equals
	|
	|-RVA: 0xD6FF10 Offset: 0xD6FF10 VA: 0xD6FF10
	|-Nullable<bool>.Equals
	|
	|-RVA: 0xD7015C Offset: 0xD7015C VA: 0xD7015C
	|-Nullable<char>.Equals
	|
	|-RVA: 0xD70390 Offset: 0xD70390 VA: 0xD70390
	|-Nullable<DateTime>.Equals
	|
	|-RVA: 0xD705D4 Offset: 0xD705D4 VA: 0xD705D4
	|-Nullable<int>.Equals
	|
	|-RVA: 0xD707F8 Offset: 0xD707F8 VA: 0xD707F8
	|-Nullable<long>.Equals
	|
	|-RVA: 0xD70A04 Offset: 0xD70A04 VA: 0xD70A04
	|-Nullable<GCHandle>.Equals
	|
	|-RVA: 0xD70C30 Offset: 0xD70C30 VA: 0xD70C30
	|-Nullable<float>.Equals
	|
	|-RVA: 0xD70E68 Offset: 0xD70E68 VA: 0xD70E68
	|-Nullable<TimeSpan>.Equals
	|
	|-RVA: 0xD71070 Offset: 0xD71070 VA: 0xD71070
	|-Nullable<uint>.Equals
	|
	|-RVA: 0xD712CC Offset: 0xD712CC VA: 0xD712CC
	|-Nullable<Vector2>.Equals
	|
	|-RVA: 0xD715A0 Offset: 0xD715A0 VA: 0xD715A0
	|-Nullable<Vector3>.Equals
	*/

	// RVA: -1 Offset: -1
	private bool Equals(Nullable<T> other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD6D080 Offset: 0xD6D080 VA: 0xD6D080
	|-Nullable<ConnectMarkFadeInLagType>.Equals
	|
	|-RVA: 0xD6D2B8 Offset: 0xD6D2B8 VA: 0xD6D2B8
	|-Nullable<CriAtomEx.Randomize3dConfig>.Equals
	|
	|-RVA: 0xD6F344 Offset: 0xD6F344 VA: 0xD6F344
	|-Nullable<CriAtomExAuxIn.Config>.Equals
	|
	|-RVA: 0xD6F6A0 Offset: 0xD6F6A0 VA: 0xD6F6A0
	|-Nullable<CriAtomExMic.Config>.Equals
	|
	|-RVA: 0xD6FA64 Offset: 0xD6FA64 VA: 0xD6FA64
	|-Nullable<CriAtomExMic.DeviceInfo>.Equals
	|
	|-RVA: 0xD6FD30 Offset: 0xD6FD30 VA: 0xD6FD30
	|-Nullable<Player.Status>.Equals
	|
	|-RVA: 0xD6FF70 Offset: 0xD6FF70 VA: 0xD6FF70
	|-Nullable<bool>.Equals
	|
	|-RVA: 0xD701B4 Offset: 0xD701B4 VA: 0xD701B4
	|-Nullable<char>.Equals
	|
	|-RVA: 0xD703F0 Offset: 0xD703F0 VA: 0xD703F0
	|-Nullable<DateTime>.Equals
	|
	|-RVA: 0xD7062C Offset: 0xD7062C VA: 0xD7062C
	|-Nullable<int>.Equals
	|
	|-RVA: 0xD7084C Offset: 0xD7084C VA: 0xD7084C
	|-Nullable<long>.Equals
	|
	|-RVA: 0xD70A5C Offset: 0xD70A5C VA: 0xD70A5C
	|-Nullable<GCHandle>.Equals
	|
	|-RVA: 0xD70C90 Offset: 0xD70C90 VA: 0xD70C90
	|-Nullable<float>.Equals
	|
	|-RVA: 0xD70EBC Offset: 0xD70EBC VA: 0xD70EBC
	|-Nullable<TimeSpan>.Equals
	|
	|-RVA: 0xD710C8 Offset: 0xD710C8 VA: 0xD710C8
	|-Nullable<uint>.Equals
	|
	|-RVA: 0xD71344 Offset: 0xD71344 VA: 0xD71344
	|-Nullable<Vector2>.Equals
	|
	|-RVA: 0xD7161C Offset: 0xD7161C VA: 0xD7161C
	|-Nullable<Vector3>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD6D0D8 Offset: 0xD6D0D8 VA: 0xD6D0D8
	|-Nullable<ConnectMarkFadeInLagType>.GetHashCode
	|
	|-RVA: 0xD6D32C Offset: 0xD6D32C VA: 0xD6D32C
	|-Nullable<CriAtomEx.Randomize3dConfig>.GetHashCode
	|
	|-RVA: 0xD6F3BC Offset: 0xD6F3BC VA: 0xD6F3BC
	|-Nullable<CriAtomExAuxIn.Config>.GetHashCode
	|
	|-RVA: 0xD6F750 Offset: 0xD6F750 VA: 0xD6F750
	|-Nullable<CriAtomExMic.Config>.GetHashCode
	|
	|-RVA: 0xD6FAFC Offset: 0xD6FAFC VA: 0xD6FAFC
	|-Nullable<CriAtomExMic.DeviceInfo>.GetHashCode
	|
	|-RVA: 0xD6FD88 Offset: 0xD6FD88 VA: 0xD6FD88
	|-Nullable<Player.Status>.GetHashCode
	|
	|-RVA: 0xD6FFD4 Offset: 0xD6FFD4 VA: 0xD6FFD4
	|-Nullable<bool>.GetHashCode
	|
	|-RVA: 0xD70210 Offset: 0xD70210 VA: 0xD70210
	|-Nullable<char>.GetHashCode
	|
	|-RVA: 0xD70464 Offset: 0xD70464 VA: 0xD70464
	|-Nullable<DateTime>.GetHashCode
	|
	|-RVA: 0xD70684 Offset: 0xD70684 VA: 0xD70684
	|-Nullable<int>.GetHashCode
	|
	|-RVA: 0xD708A0 Offset: 0xD708A0 VA: 0xD708A0
	|-Nullable<long>.GetHashCode
	|
	|-RVA: 0xD70AB4 Offset: 0xD70AB4 VA: 0xD70AB4
	|-Nullable<GCHandle>.GetHashCode
	|
	|-RVA: 0xD70CF0 Offset: 0xD70CF0 VA: 0xD70CF0
	|-Nullable<float>.GetHashCode
	|
	|-RVA: 0xD70F10 Offset: 0xD70F10 VA: 0xD70F10
	|-Nullable<TimeSpan>.GetHashCode
	|
	|-RVA: 0xD71120 Offset: 0xD71120 VA: 0xD71120
	|-Nullable<uint>.GetHashCode
	|
	|-RVA: 0xD713C0 Offset: 0xD713C0 VA: 0xD713C0
	|-Nullable<Vector2>.GetHashCode
	|
	|-RVA: 0xD71698 Offset: 0xD71698 VA: 0xD71698
	|-Nullable<Vector3>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public T GetValueOrDefault() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD6D148 Offset: 0xD6D148 VA: 0xD6D148
	|-Nullable<ConnectMarkFadeInLagType>.GetValueOrDefault
	|
	|-RVA: 0xD6FDF8 Offset: 0xD6FDF8 VA: 0xD6FDF8
	|-Nullable<Player.Status>.GetValueOrDefault
	|
	|-RVA: 0xD706F4 Offset: 0xD706F4 VA: 0xD706F4
	|-Nullable<int>.GetValueOrDefault
	|
	|-RVA: 0xD71434 Offset: 0xD71434 VA: 0xD71434
	|-Nullable<Vector2>.GetValueOrDefault
	|
	|-RVA: 0xD6D384 Offset: 0xD6D384 VA: 0xD6D384
	|-Nullable<CriAtomEx.Randomize3dConfig>.GetValueOrDefault
	|
	|-RVA: 0xD6F430 Offset: 0xD6F430 VA: 0xD6F430
	|-Nullable<CriAtomExAuxIn.Config>.GetValueOrDefault
	|
	|-RVA: 0xD6F7E0 Offset: 0xD6F7E0 VA: 0xD6F7E0
	|-Nullable<CriAtomExMic.Config>.GetValueOrDefault
	|
	|-RVA: 0xD6FB74 Offset: 0xD6FB74 VA: 0xD6FB74
	|-Nullable<CriAtomExMic.DeviceInfo>.GetValueOrDefault
	|
	|-RVA: 0xD70040 Offset: 0xD70040 VA: 0xD70040
	|-Nullable<bool>.GetValueOrDefault
	|
	|-RVA: 0xD70280 Offset: 0xD70280 VA: 0xD70280
	|-Nullable<char>.GetValueOrDefault
	|
	|-RVA: 0xD704D0 Offset: 0xD704D0 VA: 0xD704D0
	|-Nullable<DateTime>.GetValueOrDefault
	|
	|-RVA: 0xD70908 Offset: 0xD70908 VA: 0xD70908
	|-Nullable<long>.GetValueOrDefault
	|
	|-RVA: 0xD70B20 Offset: 0xD70B20 VA: 0xD70B20
	|-Nullable<GCHandle>.GetValueOrDefault
	|
	|-RVA: 0xD70D5C Offset: 0xD70D5C VA: 0xD70D5C
	|-Nullable<float>.GetValueOrDefault
	|
	|-RVA: 0xD70F78 Offset: 0xD70F78 VA: 0xD70F78
	|-Nullable<TimeSpan>.GetValueOrDefault
	|
	|-RVA: 0xD71190 Offset: 0xD71190 VA: 0xD71190
	|-Nullable<uint>.GetValueOrDefault
	|
	|-RVA: 0xD71724 Offset: 0xD71724 VA: 0xD71724
	|-Nullable<Vector3>.GetValueOrDefault
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xD6D180 Offset: 0xD6D180 VA: 0xD6D180
	|-Nullable<ConnectMarkFadeInLagType>.ToString
	|
	|-RVA: 0xD6D3B0 Offset: 0xD6D3B0 VA: 0xD6D3B0
	|-Nullable<CriAtomEx.Randomize3dConfig>.ToString
	|
	|-RVA: 0xD6F480 Offset: 0xD6F480 VA: 0xD6F480
	|-Nullable<CriAtomExAuxIn.Config>.ToString
	|
	|-RVA: 0xD6F878 Offset: 0xD6F878 VA: 0xD6F878
	|-Nullable<CriAtomExMic.Config>.ToString
	|
	|-RVA: 0xD6FBE0 Offset: 0xD6FBE0 VA: 0xD6FBE0
	|-Nullable<CriAtomExMic.DeviceInfo>.ToString
	|
	|-RVA: 0xD6FE30 Offset: 0xD6FE30 VA: 0xD6FE30
	|-Nullable<Player.Status>.ToString
	|
	|-RVA: 0xD70084 Offset: 0xD70084 VA: 0xD70084
	|-Nullable<bool>.ToString
	|
	|-RVA: 0xD702B8 Offset: 0xD702B8 VA: 0xD702B8
	|-Nullable<char>.ToString
	|
	|-RVA: 0xD704FC Offset: 0xD704FC VA: 0xD704FC
	|-Nullable<DateTime>.ToString
	|
	|-RVA: 0xD7072C Offset: 0xD7072C VA: 0xD7072C
	|-Nullable<int>.ToString
	|
	|-RVA: 0xD7092C Offset: 0xD7092C VA: 0xD7092C
	|-Nullable<long>.ToString
	|
	|-RVA: 0xD70B58 Offset: 0xD70B58 VA: 0xD70B58
	|-Nullable<GCHandle>.ToString
	|
	|-RVA: 0xD70D94 Offset: 0xD70D94 VA: 0xD70D94
	|-Nullable<float>.ToString
	|
	|-RVA: 0xD70F9C Offset: 0xD70F9C VA: 0xD70F9C
	|-Nullable<TimeSpan>.ToString
	|
	|-RVA: 0xD711C8 Offset: 0xD711C8 VA: 0xD711C8
	|-Nullable<uint>.ToString
	|
	|-RVA: 0xD71474 Offset: 0xD71474 VA: 0xD71474
	|-Nullable<Vector2>.ToString
	|
	|-RVA: 0xD71778 Offset: 0xD71778 VA: 0xD71778
	|-Nullable<Vector3>.ToString
	*/
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 87
{
	// Properties
	public static int OffsetToStringData { get; }

	// Methods

	// RVA: 0x1F8DFE8 Offset: 0x1F8DFE8 VA: 0x1F8DFE8
	private static void InitializeArray(Array array, IntPtr fldHandle) { }

	// RVA: 0x1F8DFEC Offset: 0x1F8DFEC VA: 0x1F8DFEC
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }

	// RVA: 0x1F8E0A8 Offset: 0x1F8E0A8 VA: 0x1F8E0A8
	public static int get_OffsetToStringData() { }

	// RVA: 0x1F8E0AC Offset: 0x1F8E0AC VA: 0x1F8E0AC
	private static void RunClassConstructor(IntPtr type) { }

	// RVA: 0x1F8E0B0 Offset: 0x1F8E0B0 VA: 0x1F8E0B0
	public static void RunClassConstructor(RuntimeTypeHandle type) { }
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 88
{
	// Methods

	// RVA: 0x26F1F04 Offset: 0x26F1F04 VA: 0x26F1F04
	public static string GetText(string msg) { }

	// RVA: 0x26F1F08 Offset: 0x26F1F08 VA: 0x26F1F08
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBC3F90 Offset: 0xBC3F90 VA: 0xBC3F90
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 89
{
	// Fields
	private string comment; // 0x10

	// Methods

	// RVA: 0x21E6240 Offset: 0x21E6240 VA: 0x21E6240
	public void .ctor() { }

	// RVA: 0x21E570C Offset: 0x21E570C VA: 0x21E570C
	public void .ctor(string comment) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBC3FCC Offset: 0xBC3FCC VA: 0xBC3FCC
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute // TypeDefIndex: 90
{
	// Methods

	// RVA: 0x21E56E0 Offset: 0x21E56E0 VA: 0x21E56E0
	public void .ctor(string comment) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBC4008 Offset: 0xBC4008 VA: 0xBC4008
internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 91
{
	// Methods

	// RVA: 0x21E6214 Offset: 0x21E6214 VA: 0x21E6214
	public void .ctor(string comment) { }
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 92
{
	// Properties
	public override bool IsInvalid { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0xBCC644 Offset: 0xBCC644 VA: 0xBCC644
	// RVA: 0x26F1F80 Offset: 0x26F1F80 VA: 0x26F1F80
	protected void .ctor(bool ownsHandle) { }

	// RVA: 0x26F1FBC Offset: 0x26F1FBC VA: 0x26F1FBC Slot: 7
	public override bool get_IsInvalid() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 93
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xBCC65C Offset: 0xBCC65C VA: 0xBCC65C
	// RVA: 0x26F2028 Offset: 0x26F2028 VA: 0x26F2028
	public void .ctor(IntPtr existingHandle, bool ownsHandle) { }

	// RVA: 0x26F2080 Offset: 0x26F2080 VA: 0x26F2080 Slot: 6
	protected override bool ReleaseHandle() { }
}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 94
{
	// Fields
	private readonly CodePointIndexer.TableRange[] ranges; // 0x10
	public readonly int TotalCount; // 0x18
	private int defaultIndex; // 0x1C
	private int defaultCP; // 0x20

	// Methods

	// RVA: 0x26F20A0 Offset: 0x26F20A0 VA: 0x26F20A0
	public void .ctor(int[] starts, int[] ends, int defaultIndex, int defaultCP) { }

	// RVA: 0x26F2354 Offset: 0x26F2354 VA: 0x26F2354
	public int ToIndex(int cp) { }
}

// Namespace: 
[Serializable]
internal struct CodePointIndexer.TableRange // TypeDefIndex: 95
{
	// Fields
	public readonly int Start; // 0x0
	public readonly int End; // 0x4
	public readonly int Count; // 0x8
	public readonly int IndexStart; // 0xC
	public readonly int IndexEnd; // 0x10

	// Methods

	// RVA: 0xD72D88 Offset: 0xD72D88 VA: 0xD72D88
	public void .ctor(int start, int end, int indexStart) { }
}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 96
{
	// Fields
	public readonly int LCID; // 0x10
	public readonly int TailoringIndex; // 0x14
	public readonly int TailoringCount; // 0x18
	public readonly bool FrenchSort; // 0x1C

	// Methods

	// RVA: 0x26F2E1C Offset: 0x26F2E1C VA: 0x26F2E1C
	public void .ctor(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 97
{
	// Fields
	public readonly char[] Source; // 0x10
	public readonly string Replacement; // 0x18
	public readonly byte[] SortKey; // 0x20

	// Methods

	// RVA: 0x26F24AC Offset: 0x26F24AC VA: 0x26F24AC
	public void .ctor(char[] source, string replacement, byte[] sortkey) { }
}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer // TypeDefIndex: 98
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x0

	// Methods

	// RVA: 0x26F24EC Offset: 0x26F24EC VA: 0x26F24EC
	public void .ctor() { }

	// RVA: 0x26F24F4 Offset: 0x26F24F4 VA: 0x26F24F4
	private static void .cctor() { }

	// RVA: 0x26F2558 Offset: 0x26F2558 VA: 0x26F2558 Slot: 4
	public int Compare(object o1, object o2) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 99
{
	// Fields
	public byte Source; // 0x10
	public byte Replace; // 0x11

	// Methods

	// RVA: 0x26F27BC Offset: 0x26F27BC VA: 0x26F27BC
	public void .ctor(byte source, byte replace) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer // TypeDefIndex: 100
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x0

	// Methods

	// RVA: 0x26F27F8 Offset: 0x26F27F8 VA: 0x26F27F8
	public void .ctor() { }

	// RVA: 0x26F2800 Offset: 0x26F2800 VA: 0x26F2800
	private static void .cctor() { }

	// RVA: 0x26F2864 Offset: 0x26F2864 VA: 0x26F2864 Slot: 4
	public int Compare(object o1, object o2) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 101
{
	// Fields
	public static int MaxExpansionLength; // 0x0
	private static readonly byte* ignorableFlags; // 0x8
	private static readonly byte* categories; // 0x10
	private static readonly byte* level1; // 0x18
	private static readonly byte* level2; // 0x20
	private static readonly byte* level3; // 0x28
	private static byte* cjkCHScategory; // 0x30
	private static byte* cjkCHTcategory; // 0x38
	private static byte* cjkJAcategory; // 0x40
	private static byte* cjkKOcategory; // 0x48
	private static byte* cjkCHSlv1; // 0x50
	private static byte* cjkCHTlv1; // 0x58
	private static byte* cjkJAlv1; // 0x60
	private static byte* cjkKOlv1; // 0x68
	private static byte* cjkKOlv2; // 0x70
	private static readonly char[] tailoringArr; // 0x78
	private static readonly TailoringInfo[] tailoringInfos; // 0x80
	private static object forLock; // 0x88
	public static readonly bool isReady; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xBCB404 Offset: 0xBCB404 VA: 0xBCB404
	private static Dictionary<string, int> <>f__switch$map2; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xBCB414 Offset: 0xBCB414 VA: 0xBCB414
	private static Dictionary<string, int> <>f__switch$map3; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xBCB424 Offset: 0xBCB424 VA: 0xBCB424
	private static Dictionary<string, int> <>f__switch$map4; // 0xA8

	// Properties
	public static bool IsReady { get; }

	// Methods

	// RVA: 0x26F29C8 Offset: 0x26F29C8 VA: 0x26F29C8
	private static void .cctor() { }

	// RVA: 0x26F2E70 Offset: 0x26F2E70 VA: 0x26F2E70
	public static TailoringInfo GetTailoringInfo(int lcid) { }

	// RVA: 0x26F2FDC Offset: 0x26F2FDC VA: 0x26F2FDC
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals) { }

	// RVA: 0x26F36C4 Offset: 0x26F36C4 VA: 0x26F36C4
	private static void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x26F3AB0 Offset: 0x26F3AB0 VA: 0x26F3AB0
	public static byte Category(int cp) { }

	// RVA: 0x26F3B70 Offset: 0x26F3B70 VA: 0x26F3B70
	public static byte Level1(int cp) { }

	// RVA: 0x26F3C30 Offset: 0x26F3C30 VA: 0x26F3C30
	public static byte Level2(int cp) { }

	// RVA: 0x26F3CF0 Offset: 0x26F3CF0 VA: 0x26F3CF0
	public static byte Level3(int cp) { }

	// RVA: 0x26F3DB0 Offset: 0x26F3DB0 VA: 0x26F3DB0
	public static bool IsIgnorable(int cp, byte flag) { }

	// RVA: 0x26F3EDC Offset: 0x26F3EDC VA: 0x26F3EDC
	public static bool IsIgnorableNonSpacing(int cp) { }

	// RVA: 0x26F3F44 Offset: 0x26F3F44 VA: 0x26F3F44
	public static int ToKanaTypeInsensitive(int i) { }

	// RVA: 0x26F3F64 Offset: 0x26F3F64 VA: 0x26F3F64
	public static int ToWidthCompat(int i) { }

	// RVA: 0x26F40EC Offset: 0x26F40EC VA: 0x26F40EC
	public static bool HasSpecialWeight(char c) { }

	// RVA: 0x26F4180 Offset: 0x26F4180 VA: 0x26F4180
	public static bool IsHalfWidthKana(char c) { }

	// RVA: 0x26F4194 Offset: 0x26F4194 VA: 0x26F4194
	public static bool IsHiragana(char c) { }

	// RVA: 0x26F41AC Offset: 0x26F41AC VA: 0x26F41AC
	public static bool IsJapaneseSmallLetter(char c) { }

	// RVA: 0x26F4280 Offset: 0x26F4280 VA: 0x26F4280
	public static bool get_IsReady() { }

	// RVA: 0x26F2D5C Offset: 0x26F2D5C VA: 0x26F2D5C
	private static IntPtr GetResource(string name) { }

	// RVA: 0x26F2DEC Offset: 0x26F2DEC VA: 0x26F2DEC
	private static uint UInt32FromBytePtr(byte* raw, uint idx) { }

	// RVA: 0x26F42E8 Offset: 0x26F42E8 VA: 0x26F42E8
	public static void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x26F4444 Offset: 0x26F4444 VA: 0x26F4444
	private static void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 102
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x8
	public static readonly CodePointIndexer Level1; // 0x10
	public static readonly CodePointIndexer Level2; // 0x18
	public static readonly CodePointIndexer Level3; // 0x20
	public static readonly CodePointIndexer CjkCHS; // 0x28
	public static readonly CodePointIndexer Cjk; // 0x30

	// Methods

	// RVA: 0x26F4BFC Offset: 0x26F4BFC VA: 0x26F4BFC
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 103
{
	// Fields
	private static bool QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x8
	private readonly TextInfo textInfo; // 0x10
	private readonly bool frenchSort; // 0x18
	private readonly byte* cjkCatTable; // 0x20
	private readonly byte* cjkLv1Table; // 0x28
	private readonly CodePointIndexer cjkIndexer; // 0x30
	private readonly byte* cjkLv2Table; // 0x38
	private readonly CodePointIndexer cjkLv2Indexer; // 0x40
	private readonly int lcid; // 0x48
	private readonly Contraction[] contractions; // 0x50
	private readonly Level2Map[] level2Maps; // 0x58
	private readonly byte[] unsafeFlags; // 0x60

	// Methods

	// RVA: 0x26F526C Offset: 0x26F526C VA: 0x26F526C
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x26F578C Offset: 0x26F578C VA: 0x26F578C
	private static void .cctor() { }

	// RVA: 0x26F569C Offset: 0x26F569C VA: 0x26F569C
	private void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x26F588C Offset: 0x26F588C VA: 0x26F588C
	private static CultureInfo GetNeutralCulture(CultureInfo info) { }

	// RVA: 0x26F5914 Offset: 0x26F5914 VA: 0x26F5914
	private byte Category(int cp) { }

	// RVA: 0x26F59CC Offset: 0x26F59CC VA: 0x26F59CC
	private byte Level1(int cp) { }

	// RVA: 0x26F5A84 Offset: 0x26F5A84 VA: 0x26F5A84
	private byte Level2(int cp, SimpleCollator.ExtenderType ext) { }

	// RVA: 0x26F5C80 Offset: 0x26F5C80 VA: 0x26F5C80
	private static bool IsHalfKana(int cp, CompareOptions opt) { }

	// RVA: 0x26F5D08 Offset: 0x26F5D08 VA: 0x26F5D08
	private Contraction GetContraction(string s, int start, int end) { }

	// RVA: 0x26F5DE8 Offset: 0x26F5DE8 VA: 0x26F5DE8
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x26F5F74 Offset: 0x26F5F74 VA: 0x26F5F74
	private Contraction GetTailContraction(string s, int start, int end) { }

	// RVA: 0x26F6054 Offset: 0x26F6054 VA: 0x26F6054
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x26F6334 Offset: 0x26F6334 VA: 0x26F6334
	private int FilterOptions(int i, CompareOptions opt) { }

	// RVA: 0x26F6470 Offset: 0x26F6470 VA: 0x26F6470
	private SimpleCollator.ExtenderType GetExtenderType(int i) { }

	// RVA: 0x26F6570 Offset: 0x26F6570 VA: 0x26F6570
	private static byte ToDashTypeValue(SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x26F65A0 Offset: 0x26F65A0 VA: 0x26F65A0
	private int FilterExtender(int i, SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x26F67D4 Offset: 0x26F67D4 VA: 0x26F67D4
	private static bool IsIgnorable(int i, CompareOptions opt) { }

	// RVA: 0x26F686C Offset: 0x26F686C VA: 0x26F686C
	private bool IsSafe(int i) { }

	// RVA: 0x26F6928 Offset: 0x26F6928 VA: 0x26F6928
	public SortKey GetSortKey(string s, CompareOptions options) { }

	// RVA: 0x26F6980 Offset: 0x26F6980 VA: 0x26F6980
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options) { }

	// RVA: 0x26F6C78 Offset: 0x26F6C78 VA: 0x26F6C78
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x26F70DC Offset: 0x26F70DC VA: 0x26F70DC
	private void FillSortKeyRaw(int i, SimpleCollator.ExtenderType ext, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x26F77C0 Offset: 0x26F77C0 VA: 0x26F77C0
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf) { }

	// RVA: 0x26F7984 Offset: 0x26F7984 VA: 0x26F7984
	private int CompareOrdinal(string s1, int idx1, int len1, string s2, int idx2, int len2) { }

	// RVA: 0x26F7E38 Offset: 0x26F7E38 VA: 0x26F7E38
	private int CompareQuick(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool sourceConsumed, out bool targetConsumed, bool immediateBreakup) { }

	// RVA: 0x26F86AC Offset: 0x26F86AC VA: 0x26F86AC
	private int CompareOrdinalIgnoreCase(string s1, int idx1, int len1, string s2, int idx2, int len2) { }

	// RVA: 0x26F8BFC Offset: 0x26F8BFC VA: 0x26F8BFC
	public int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options) { }

	// RVA: 0x26F709C Offset: 0x26F709C VA: 0x26F709C
	private void ClearBuffer(byte* buffer, int size) { }

	// RVA: 0x26F8DC0 Offset: 0x26F8DC0 VA: 0x26F8DC0
	private bool QuickCheckPossible(string s1, int idx1, int end1, string s2, int idx2, int end2) { }

	// RVA: 0x26F8DC8 Offset: 0x26F8DC8 VA: 0x26F8DC8
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FA62C Offset: 0x26FA62C VA: 0x26FA62C
	private int CompareFlagPair(bool b1, bool b2) { }

	// RVA: 0x26FA64C Offset: 0x26FA64C VA: 0x26FA64C
	public bool IsPrefix(string src, string target, CompareOptions opt) { }

	// RVA: 0x26FA6AC Offset: 0x26FA6AC VA: 0x26FA6AC
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x26FA7F0 Offset: 0x26FA7F0 VA: 0x26FA7F0
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FA8A8 Offset: 0x26FA8A8 VA: 0x26FA8A8
	public bool IsSuffix(string src, string target, CompareOptions opt) { }

	// RVA: 0x26FA93C Offset: 0x26FA93C VA: 0x26FA93C
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x26FABEC Offset: 0x26FABEC VA: 0x26FABEC
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable) { }

	// RVA: 0x26FADB8 Offset: 0x26FADB8 VA: 0x26FADB8
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x26FAF98 Offset: 0x26FAF98 VA: 0x26FAF98
	private int IndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x26FB0C8 Offset: 0x26FB0C8 VA: 0x26FB0C8
	private int IndexOfOrdinalIgnoreCase(string s, string target, int start, int length) { }

	// RVA: 0x26FB7D0 Offset: 0x26FB7D0 VA: 0x26FB7D0
	private int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FB25C Offset: 0x26FB25C VA: 0x26FB25C
	private int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FAA34 Offset: 0x26FAA34 VA: 0x26FAA34
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x26FBA54 Offset: 0x26FBA54 VA: 0x26FBA54
	private int LastIndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x26FBCAC Offset: 0x26FBCAC VA: 0x26FBCAC
	private int LastIndexOfOrdinalIgnoreCase(string s, string target, int start, int length) { }

	// RVA: 0x26FC56C Offset: 0x26FC56C VA: 0x26FC56C
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FBF98 Offset: 0x26FBF98 VA: 0x26FBF98
	private int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FB870 Offset: 0x26FB870 VA: 0x26FB870
	private bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FC80C Offset: 0x26FC80C VA: 0x26FC80C
	private bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FCC6C Offset: 0x26FCC6C VA: 0x26FCC6C
	private bool MatchesPrimitive(CompareOptions opt, byte* source, int si, SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4) { }

	// RVA: 0x26FC61C Offset: 0x26FC61C VA: 0x26FC61C
	private bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x26FD034 Offset: 0x26FD034 VA: 0x26FD034
	private bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }
}

// Namespace: 
internal struct SimpleCollator.Context // TypeDefIndex: 104
{
	// Fields
	public readonly CompareOptions Option; // 0x0
	public readonly byte* NeverMatchFlags; // 0x8
	public readonly byte* AlwaysMatchFlags; // 0x10
	public byte* Buffer1; // 0x18
	public byte* Buffer2; // 0x20
	public int PrevCode; // 0x28
	public byte* PrevSortKey; // 0x30
	public readonly bool QuickCheckPossible; // 0x38

	// Methods

	// RVA: 0xD72E34 Offset: 0xD72E34 VA: 0xD72E34
	public void .ctor(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1, bool quickCheckPossible) { }
}

// Namespace: 
private struct SimpleCollator.PreviousInfo // TypeDefIndex: 105
{
	// Fields
	public int Code; // 0x0
	public byte* SortKey; // 0x8

	// Methods

	// RVA: 0xD72F18 Offset: 0xD72F18 VA: 0xD72F18
	public void .ctor(bool dummy) { }
}

// Namespace: 
private struct SimpleCollator.Escape // TypeDefIndex: 106
{
	// Fields
	public string Source; // 0x0
	public int Index; // 0x8
	public int Start; // 0xC
	public int End; // 0x10
	public int Optional; // 0x14
}

// Namespace: 
private enum SimpleCollator.ExtenderType // TypeDefIndex: 107
{
	// Fields
	public int value__; // 0x0
	public const SimpleCollator.ExtenderType None = 0;
	public const SimpleCollator.ExtenderType Simple = 1;
	public const SimpleCollator.ExtenderType Voiced = 2;
	public const SimpleCollator.ExtenderType Conditional = 3;
	public const SimpleCollator.ExtenderType Buggy = 4;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xBC4044 Offset: 0xBC4044 VA: 0xBC4044
[Serializable]
public class SortKey // TypeDefIndex: 108
{
	// Fields
	private readonly string source; // 0x10
	private readonly CompareOptions options; // 0x18
	private readonly byte[] key; // 0x20
	private readonly int lcid; // 0x28

	// Properties
	public virtual string OriginalString { get; }
	public virtual byte[] KeyData { get; }

	// Methods

	// RVA: 0x23B6E74 Offset: 0x23B6E74 VA: 0x23B6E74
	internal void .ctor(int lcid, string source, CompareOptions opt) { }

	// RVA: 0x23BE070 Offset: 0x23BE070 VA: 0x23BE070
	internal void .ctor(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength) { }

	// RVA: 0x23BE0C4 Offset: 0x23BE0C4 VA: 0x23BE0C4
	public static int Compare(SortKey sortkey1, SortKey sortkey2) { }

	// RVA: 0x23BE2F4 Offset: 0x23BE2F4 VA: 0x23BE2F4 Slot: 4
	public virtual string get_OriginalString() { }

	// RVA: 0x23BE2FC Offset: 0x23BE2FC VA: 0x23BE2FC Slot: 5
	public virtual byte[] get_KeyData() { }

	// RVA: 0x23BE304 Offset: 0x23BE304 VA: 0x23BE304 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x23BE3C4 Offset: 0x23BE3C4 VA: 0x23BE3C4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23BE4AC Offset: 0x23BE4AC VA: 0x23BE4AC Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 109
{
	// Fields
	private int l1; // 0x10
	private int l2; // 0x14
	private int l3; // 0x18
	private int l4s; // 0x1C
	private int l4t; // 0x20
	private int l4k; // 0x24
	private int l4w; // 0x28
	private int l5; // 0x2C
	private byte[] l1b; // 0x30
	private byte[] l2b; // 0x38
