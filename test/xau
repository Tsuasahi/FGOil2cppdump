	|
	|-RVA: 0xDD1C68 Offset: 0xDD1C68 VA: 0xDD1C68
	|-Nullable<CriAtomExMic.Config>.get_HasValue
	|
	|-RVA: 0xDD360C Offset: 0xDD360C VA: 0xDD360C
	|-Nullable<CriAtomExMic.DeviceInfo>.get_HasValue
	|
	|-RVA: 0xDD3958 Offset: 0xDD3958 VA: 0xDD3958
	|-Nullable<Player.Status>.get_HasValue
	|
	|-RVA: 0xDD3B84 Offset: 0xDD3B84 VA: 0xDD3B84
	|-Nullable<bool>.get_HasValue
	|
	|-RVA: 0xDD3DDC Offset: 0xDD3DDC VA: 0xDD3DDC
	|-Nullable<char>.get_HasValue
	|
	|-RVA: 0xDD4008 Offset: 0xDD4008 VA: 0xDD4008
	|-Nullable<DateTime>.get_HasValue
	|
	|-RVA: 0xDD4254 Offset: 0xDD4254 VA: 0xDD4254
	|-Nullable<int>.get_HasValue
	|
	|-RVA: 0xDD447C Offset: 0xDD447C VA: 0xDD447C
	|-Nullable<long>.get_HasValue
	|
	|-RVA: 0xDD4680 Offset: 0xDD4680 VA: 0xDD4680
	|-Nullable<GCHandle>.get_HasValue
	|
	|-RVA: 0xDD48A8 Offset: 0xDD48A8 VA: 0xDD48A8
	|-Nullable<float>.get_HasValue
	|
	|-RVA: 0xDD4AEC Offset: 0xDD4AEC VA: 0xDD4AEC
	|-Nullable<TimeSpan>.get_HasValue
	|
	|-RVA: 0xDD4CF0 Offset: 0xDD4CF0 VA: 0xDD4CF0
	|-Nullable<uint>.get_HasValue
	|
	|-RVA: 0xDD4F18 Offset: 0xDD4F18 VA: 0xDD4F18
	|-Nullable<Vector2>.get_HasValue
	|
	|-RVA: 0xDD51E8 Offset: 0xDD51E8 VA: 0xDD51E8
	|-Nullable<Vector3>.get_HasValue
	*/

	// RVA: -1 Offset: -1
	public T get_Value() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD1550 Offset: 0xDD1550 VA: 0xDD1550
	|-Nullable<ConnectMarkFadeInLagType>.get_Value
	|
	|-RVA: 0xDD1778 Offset: 0xDD1778 VA: 0xDD1778
	|-Nullable<CriAtomEx.Randomize3dConfig>.get_Value
	|
	|-RVA: 0xDD19B4 Offset: 0xDD19B4 VA: 0xDD19B4
	|-Nullable<CriAtomExAuxIn.Config>.get_Value
	|
	|-RVA: 0xDD1CDC Offset: 0xDD1CDC VA: 0xDD1CDC
	|-Nullable<CriAtomExMic.Config>.get_Value
	|
	|-RVA: 0xDD3BA8 Offset: 0xDD3BA8 VA: 0xDD3BA8
	|-Nullable<bool>.get_Value
	|
	|-RVA: 0xDD3E00 Offset: 0xDD3E00 VA: 0xDD3E00
	|-Nullable<char>.get_Value
	|
	|-RVA: 0xDD4278 Offset: 0xDD4278 VA: 0xDD4278
	|-Nullable<int>.get_Value
	|
	|-RVA: 0xDD44A0 Offset: 0xDD44A0 VA: 0xDD44A0
	|-Nullable<long>.get_Value
	|
	|-RVA: 0xDD46A4 Offset: 0xDD46A4 VA: 0xDD46A4
	|-Nullable<GCHandle>.get_Value
	|
	|-RVA: 0xDD48CC Offset: 0xDD48CC VA: 0xDD48CC
	|-Nullable<float>.get_Value
	|
	|-RVA: 0xDD4D14 Offset: 0xDD4D14 VA: 0xDD4D14
	|-Nullable<uint>.get_Value
	|
	|-RVA: 0xDD4F50 Offset: 0xDD4F50 VA: 0xDD4F50
	|-Nullable<Vector2>.get_Value
	|
	|-RVA: 0xDD5220 Offset: 0xDD5220 VA: 0xDD5220
	|-Nullable<Vector3>.get_Value
	|
	|-RVA: 0xDD3668 Offset: 0xDD3668 VA: 0xDD3668
	|-Nullable<CriAtomExMic.DeviceInfo>.get_Value
	|
	|-RVA: 0xDD397C Offset: 0xDD397C VA: 0xDD397C
	|-Nullable<Player.Status>.get_Value
	|
	|-RVA: 0xDD402C Offset: 0xDD402C VA: 0xDD402C
	|-Nullable<DateTime>.get_Value
	|
	|-RVA: 0xDD4B10 Offset: 0xDD4B10 VA: 0xDD4B10
	|-Nullable<TimeSpan>.get_Value
	*/

	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD15A4 Offset: 0xDD15A4 VA: 0xDD15A4
	|-Nullable<ConnectMarkFadeInLagType>.Equals
	|
	|-RVA: 0xDD17D4 Offset: 0xDD17D4 VA: 0xDD17D4
	|-Nullable<CriAtomEx.Randomize3dConfig>.Equals
	|
	|-RVA: 0xDD1A2C Offset: 0xDD1A2C VA: 0xDD1A2C
	|-Nullable<CriAtomExAuxIn.Config>.Equals
	|
	|-RVA: 0xDD1D6C Offset: 0xDD1D6C VA: 0xDD1D6C
	|-Nullable<CriAtomExMic.Config>.Equals
	|
	|-RVA: 0xDD36E0 Offset: 0xDD36E0 VA: 0xDD36E0
	|-Nullable<CriAtomExMic.DeviceInfo>.Equals
	|
	|-RVA: 0xDD39D0 Offset: 0xDD39D0 VA: 0xDD39D0
	|-Nullable<Player.Status>.Equals
	|
	|-RVA: 0xDD3C08 Offset: 0xDD3C08 VA: 0xDD3C08
	|-Nullable<bool>.Equals
	|
	|-RVA: 0xDD3E54 Offset: 0xDD3E54 VA: 0xDD3E54
	|-Nullable<char>.Equals
	|
	|-RVA: 0xDD4088 Offset: 0xDD4088 VA: 0xDD4088
	|-Nullable<DateTime>.Equals
	|
	|-RVA: 0xDD42CC Offset: 0xDD42CC VA: 0xDD42CC
	|-Nullable<int>.Equals
	|
	|-RVA: 0xDD44F0 Offset: 0xDD44F0 VA: 0xDD44F0
	|-Nullable<long>.Equals
	|
	|-RVA: 0xDD46FC Offset: 0xDD46FC VA: 0xDD46FC
	|-Nullable<GCHandle>.Equals
	|
	|-RVA: 0xDD4928 Offset: 0xDD4928 VA: 0xDD4928
	|-Nullable<float>.Equals
	|
	|-RVA: 0xDD4B60 Offset: 0xDD4B60 VA: 0xDD4B60
	|-Nullable<TimeSpan>.Equals
	|
	|-RVA: 0xDD4D68 Offset: 0xDD4D68 VA: 0xDD4D68
	|-Nullable<uint>.Equals
	|
	|-RVA: 0xDD4FC4 Offset: 0xDD4FC4 VA: 0xDD4FC4
	|-Nullable<Vector2>.Equals
	|
	|-RVA: 0xDD5298 Offset: 0xDD5298 VA: 0xDD5298
	|-Nullable<Vector3>.Equals
	*/

	// RVA: -1 Offset: -1
	private bool Equals(Nullable<T> other) { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD15FC Offset: 0xDD15FC VA: 0xDD15FC
	|-Nullable<ConnectMarkFadeInLagType>.Equals
	|
	|-RVA: 0xDD1834 Offset: 0xDD1834 VA: 0xDD1834
	|-Nullable<CriAtomEx.Randomize3dConfig>.Equals
	|
	|-RVA: 0xDD1AA4 Offset: 0xDD1AA4 VA: 0xDD1AA4
	|-Nullable<CriAtomExAuxIn.Config>.Equals
	|
	|-RVA: 0xDD1E00 Offset: 0xDD1E00 VA: 0xDD1E00
	|-Nullable<CriAtomExMic.Config>.Equals
	|
	|-RVA: 0xDD375C Offset: 0xDD375C VA: 0xDD375C
	|-Nullable<CriAtomExMic.DeviceInfo>.Equals
	|
	|-RVA: 0xDD3A28 Offset: 0xDD3A28 VA: 0xDD3A28
	|-Nullable<Player.Status>.Equals
	|
	|-RVA: 0xDD3C68 Offset: 0xDD3C68 VA: 0xDD3C68
	|-Nullable<bool>.Equals
	|
	|-RVA: 0xDD3EAC Offset: 0xDD3EAC VA: 0xDD3EAC
	|-Nullable<char>.Equals
	|
	|-RVA: 0xDD40E8 Offset: 0xDD40E8 VA: 0xDD40E8
	|-Nullable<DateTime>.Equals
	|
	|-RVA: 0xDD4324 Offset: 0xDD4324 VA: 0xDD4324
	|-Nullable<int>.Equals
	|
	|-RVA: 0xDD4544 Offset: 0xDD4544 VA: 0xDD4544
	|-Nullable<long>.Equals
	|
	|-RVA: 0xDD4754 Offset: 0xDD4754 VA: 0xDD4754
	|-Nullable<GCHandle>.Equals
	|
	|-RVA: 0xDD4988 Offset: 0xDD4988 VA: 0xDD4988
	|-Nullable<float>.Equals
	|
	|-RVA: 0xDD4BB4 Offset: 0xDD4BB4 VA: 0xDD4BB4
	|-Nullable<TimeSpan>.Equals
	|
	|-RVA: 0xDD4DC0 Offset: 0xDD4DC0 VA: 0xDD4DC0
	|-Nullable<uint>.Equals
	|
	|-RVA: 0xDD503C Offset: 0xDD503C VA: 0xDD503C
	|-Nullable<Vector2>.Equals
	|
	|-RVA: 0xDD5314 Offset: 0xDD5314 VA: 0xDD5314
	|-Nullable<Vector3>.Equals
	*/

	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD1654 Offset: 0xDD1654 VA: 0xDD1654
	|-Nullable<ConnectMarkFadeInLagType>.GetHashCode
	|
	|-RVA: 0xDD18A8 Offset: 0xDD18A8 VA: 0xDD18A8
	|-Nullable<CriAtomEx.Randomize3dConfig>.GetHashCode
	|
	|-RVA: 0xDD1B1C Offset: 0xDD1B1C VA: 0xDD1B1C
	|-Nullable<CriAtomExAuxIn.Config>.GetHashCode
	|
	|-RVA: 0xDD1EB0 Offset: 0xDD1EB0 VA: 0xDD1EB0
	|-Nullable<CriAtomExMic.Config>.GetHashCode
	|
	|-RVA: 0xDD37F4 Offset: 0xDD37F4 VA: 0xDD37F4
	|-Nullable<CriAtomExMic.DeviceInfo>.GetHashCode
	|
	|-RVA: 0xDD3A80 Offset: 0xDD3A80 VA: 0xDD3A80
	|-Nullable<Player.Status>.GetHashCode
	|
	|-RVA: 0xDD3CCC Offset: 0xDD3CCC VA: 0xDD3CCC
	|-Nullable<bool>.GetHashCode
	|
	|-RVA: 0xDD3F08 Offset: 0xDD3F08 VA: 0xDD3F08
	|-Nullable<char>.GetHashCode
	|
	|-RVA: 0xDD415C Offset: 0xDD415C VA: 0xDD415C
	|-Nullable<DateTime>.GetHashCode
	|
	|-RVA: 0xDD437C Offset: 0xDD437C VA: 0xDD437C
	|-Nullable<int>.GetHashCode
	|
	|-RVA: 0xDD4598 Offset: 0xDD4598 VA: 0xDD4598
	|-Nullable<long>.GetHashCode
	|
	|-RVA: 0xDD47AC Offset: 0xDD47AC VA: 0xDD47AC
	|-Nullable<GCHandle>.GetHashCode
	|
	|-RVA: 0xDD49E8 Offset: 0xDD49E8 VA: 0xDD49E8
	|-Nullable<float>.GetHashCode
	|
	|-RVA: 0xDD4C08 Offset: 0xDD4C08 VA: 0xDD4C08
	|-Nullable<TimeSpan>.GetHashCode
	|
	|-RVA: 0xDD4E18 Offset: 0xDD4E18 VA: 0xDD4E18
	|-Nullable<uint>.GetHashCode
	|
	|-RVA: 0xDD50B8 Offset: 0xDD50B8 VA: 0xDD50B8
	|-Nullable<Vector2>.GetHashCode
	|
	|-RVA: 0xDD5390 Offset: 0xDD5390 VA: 0xDD5390
	|-Nullable<Vector3>.GetHashCode
	*/

	// RVA: -1 Offset: -1
	public T GetValueOrDefault() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD16C4 Offset: 0xDD16C4 VA: 0xDD16C4
	|-Nullable<ConnectMarkFadeInLagType>.GetValueOrDefault
	|
	|-RVA: 0xDD3AF0 Offset: 0xDD3AF0 VA: 0xDD3AF0
	|-Nullable<Player.Status>.GetValueOrDefault
	|
	|-RVA: 0xDD43EC Offset: 0xDD43EC VA: 0xDD43EC
	|-Nullable<int>.GetValueOrDefault
	|
	|-RVA: 0xDD512C Offset: 0xDD512C VA: 0xDD512C
	|-Nullable<Vector2>.GetValueOrDefault
	|
	|-RVA: 0xDD1900 Offset: 0xDD1900 VA: 0xDD1900
	|-Nullable<CriAtomEx.Randomize3dConfig>.GetValueOrDefault
	|
	|-RVA: 0xDD1B90 Offset: 0xDD1B90 VA: 0xDD1B90
	|-Nullable<CriAtomExAuxIn.Config>.GetValueOrDefault
	|
	|-RVA: 0xDD1F40 Offset: 0xDD1F40 VA: 0xDD1F40
	|-Nullable<CriAtomExMic.Config>.GetValueOrDefault
	|
	|-RVA: 0xDD386C Offset: 0xDD386C VA: 0xDD386C
	|-Nullable<CriAtomExMic.DeviceInfo>.GetValueOrDefault
	|
	|-RVA: 0xDD3D38 Offset: 0xDD3D38 VA: 0xDD3D38
	|-Nullable<bool>.GetValueOrDefault
	|
	|-RVA: 0xDD3F78 Offset: 0xDD3F78 VA: 0xDD3F78
	|-Nullable<char>.GetValueOrDefault
	|
	|-RVA: 0xDD41C8 Offset: 0xDD41C8 VA: 0xDD41C8
	|-Nullable<DateTime>.GetValueOrDefault
	|
	|-RVA: 0xDD4600 Offset: 0xDD4600 VA: 0xDD4600
	|-Nullable<long>.GetValueOrDefault
	|
	|-RVA: 0xDD4818 Offset: 0xDD4818 VA: 0xDD4818
	|-Nullable<GCHandle>.GetValueOrDefault
	|
	|-RVA: 0xDD4A54 Offset: 0xDD4A54 VA: 0xDD4A54
	|-Nullable<float>.GetValueOrDefault
	|
	|-RVA: 0xDD4C70 Offset: 0xDD4C70 VA: 0xDD4C70
	|-Nullable<TimeSpan>.GetValueOrDefault
	|
	|-RVA: 0xDD4E88 Offset: 0xDD4E88 VA: 0xDD4E88
	|-Nullable<uint>.GetValueOrDefault
	|
	|-RVA: 0xDD541C Offset: 0xDD541C VA: 0xDD541C
	|-Nullable<Vector3>.GetValueOrDefault
	*/

	// RVA: -1 Offset: -1 Slot: 3
	public override string ToString() { }
	/* GenericInstMethod :
	|
	|-RVA: 0xDD16FC Offset: 0xDD16FC VA: 0xDD16FC
	|-Nullable<ConnectMarkFadeInLagType>.ToString
	|
	|-RVA: 0xDD192C Offset: 0xDD192C VA: 0xDD192C
	|-Nullable<CriAtomEx.Randomize3dConfig>.ToString
	|
	|-RVA: 0xDD1BE0 Offset: 0xDD1BE0 VA: 0xDD1BE0
	|-Nullable<CriAtomExAuxIn.Config>.ToString
	|
	|-RVA: 0xDD1FD8 Offset: 0xDD1FD8 VA: 0xDD1FD8
	|-Nullable<CriAtomExMic.Config>.ToString
	|
	|-RVA: 0xDD38D8 Offset: 0xDD38D8 VA: 0xDD38D8
	|-Nullable<CriAtomExMic.DeviceInfo>.ToString
	|
	|-RVA: 0xDD3B28 Offset: 0xDD3B28 VA: 0xDD3B28
	|-Nullable<Player.Status>.ToString
	|
	|-RVA: 0xDD3D7C Offset: 0xDD3D7C VA: 0xDD3D7C
	|-Nullable<bool>.ToString
	|
	|-RVA: 0xDD3FB0 Offset: 0xDD3FB0 VA: 0xDD3FB0
	|-Nullable<char>.ToString
	|
	|-RVA: 0xDD41F4 Offset: 0xDD41F4 VA: 0xDD41F4
	|-Nullable<DateTime>.ToString
	|
	|-RVA: 0xDD4424 Offset: 0xDD4424 VA: 0xDD4424
	|-Nullable<int>.ToString
	|
	|-RVA: 0xDD4624 Offset: 0xDD4624 VA: 0xDD4624
	|-Nullable<long>.ToString
	|
	|-RVA: 0xDD4850 Offset: 0xDD4850 VA: 0xDD4850
	|-Nullable<GCHandle>.ToString
	|
	|-RVA: 0xDD4A8C Offset: 0xDD4A8C VA: 0xDD4A8C
	|-Nullable<float>.ToString
	|
	|-RVA: 0xDD4C94 Offset: 0xDD4C94 VA: 0xDD4C94
	|-Nullable<TimeSpan>.ToString
	|
	|-RVA: 0xDD4EC0 Offset: 0xDD4EC0 VA: 0xDD4EC0
	|-Nullable<uint>.ToString
	|
	|-RVA: 0xDD516C Offset: 0xDD516C VA: 0xDD516C
	|-Nullable<Vector2>.ToString
	|
	|-RVA: 0xDD5470 Offset: 0xDD5470 VA: 0xDD5470
	|-Nullable<Vector3>.ToString
	*/
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 87
{
	// Properties
	public static int OffsetToStringData { get; }

	// Methods

	// RVA: 0xF2895C Offset: 0xF2895C VA: 0xF2895C
	private static void InitializeArray(Array array, IntPtr fldHandle) { }

	// RVA: 0xF28960 Offset: 0xF28960 VA: 0xF28960
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }

	// RVA: 0xF28A1C Offset: 0xF28A1C VA: 0xF28A1C
	public static int get_OffsetToStringData() { }

	// RVA: 0xF28A20 Offset: 0xF28A20 VA: 0xF28A20
	private static void RunClassConstructor(IntPtr type) { }

	// RVA: 0xF28A24 Offset: 0xF28A24 VA: 0xF28A24
	public static void RunClassConstructor(RuntimeTypeHandle type) { }
}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 88
{
	// Methods

	// RVA: 0x1279EC8 Offset: 0x1279EC8 VA: 0x1279EC8
	public static string GetText(string msg) { }

	// RVA: 0x1279ECC Offset: 0x1279ECC VA: 0x1279ECC
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC300B8 Offset: 0xC300B8 VA: 0xC300B8
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 89
{
	// Fields
	private string comment; // 0x10

	// Methods

	// RVA: 0x10714A8 Offset: 0x10714A8 VA: 0x10714A8
	public void .ctor() { }

	// RVA: 0x1070974 Offset: 0x1070974 VA: 0x1070974
	public void .ctor(string comment) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC300F4 Offset: 0xC300F4 VA: 0xC300F4
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute // TypeDefIndex: 90
{
	// Methods

	// RVA: 0x1070948 Offset: 0x1070948 VA: 0x1070948
	public void .ctor(string comment) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC30130 Offset: 0xC30130 VA: 0xC30130
internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 91
{
	// Methods

	// RVA: 0x107147C Offset: 0x107147C VA: 0x107147C
	public void .ctor(string comment) { }
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 92
{
	// Properties
	public override bool IsInvalid { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0xC3876C Offset: 0xC3876C VA: 0xC3876C
	// RVA: 0x1279F44 Offset: 0x1279F44 VA: 0x1279F44
	protected void .ctor(bool ownsHandle) { }

	// RVA: 0x1279F80 Offset: 0x1279F80 VA: 0x1279F80 Slot: 7
	public override bool get_IsInvalid() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 93
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xC38784 Offset: 0xC38784 VA: 0xC38784
	// RVA: 0x1279FEC Offset: 0x1279FEC VA: 0x1279FEC
	public void .ctor(IntPtr existingHandle, bool ownsHandle) { }

	// RVA: 0x127A044 Offset: 0x127A044 VA: 0x127A044 Slot: 6
	protected override bool ReleaseHandle() { }
}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 94
{
	// Fields
	private readonly CodePointIndexer.TableRange[] ranges; // 0x10
	public readonly int TotalCount; // 0x18
	private int defaultIndex; // 0x1C
	private int defaultCP; // 0x20

	// Methods

	// RVA: 0x127A064 Offset: 0x127A064 VA: 0x127A064
	public void .ctor(int[] starts, int[] ends, int defaultIndex, int defaultCP) { }

	// RVA: 0x127A318 Offset: 0x127A318 VA: 0x127A318
	public int ToIndex(int cp) { }
}

// Namespace: 
[Serializable]
internal struct CodePointIndexer.TableRange // TypeDefIndex: 95
{
	// Fields
	public readonly int Start; // 0x0
	public readonly int End; // 0x4
	public readonly int Count; // 0x8
	public readonly int IndexStart; // 0xC
	public readonly int IndexEnd; // 0x10

	// Methods

	// RVA: 0xBC02E8 Offset: 0xBC02E8 VA: 0xBC02E8
	public void .ctor(int start, int end, int indexStart) { }
}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 96
{
	// Fields
	public readonly int LCID; // 0x10
	public readonly int TailoringIndex; // 0x14
	public readonly int TailoringCount; // 0x18
	public readonly bool FrenchSort; // 0x1C

	// Methods

	// RVA: 0x127ADE0 Offset: 0x127ADE0 VA: 0x127ADE0
	public void .ctor(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 97
{
	// Fields
	public readonly char[] Source; // 0x10
	public readonly string Replacement; // 0x18
	public readonly byte[] SortKey; // 0x20

	// Methods

	// RVA: 0x127A470 Offset: 0x127A470 VA: 0x127A470
	public void .ctor(char[] source, string replacement, byte[] sortkey) { }
}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer // TypeDefIndex: 98
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x0

	// Methods

	// RVA: 0x127A4B0 Offset: 0x127A4B0 VA: 0x127A4B0
	public void .ctor() { }

	// RVA: 0x127A4B8 Offset: 0x127A4B8 VA: 0x127A4B8
	private static void .cctor() { }

	// RVA: 0x127A51C Offset: 0x127A51C VA: 0x127A51C Slot: 4
	public int Compare(object o1, object o2) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 99
{
	// Fields
	public byte Source; // 0x10
	public byte Replace; // 0x11

	// Methods

	// RVA: 0x127A780 Offset: 0x127A780 VA: 0x127A780
	public void .ctor(byte source, byte replace) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer // TypeDefIndex: 100
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x0

	// Methods

	// RVA: 0x127A7BC Offset: 0x127A7BC VA: 0x127A7BC
	public void .ctor() { }

	// RVA: 0x127A7C4 Offset: 0x127A7C4 VA: 0x127A7C4
	private static void .cctor() { }

	// RVA: 0x127A828 Offset: 0x127A828 VA: 0x127A828 Slot: 4
	public int Compare(object o1, object o2) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 101
{
	// Fields
	public static int MaxExpansionLength; // 0x0
	private static readonly byte* ignorableFlags; // 0x8
	private static readonly byte* categories; // 0x10
	private static readonly byte* level1; // 0x18
	private static readonly byte* level2; // 0x20
	private static readonly byte* level3; // 0x28
	private static byte* cjkCHScategory; // 0x30
	private static byte* cjkCHTcategory; // 0x38
	private static byte* cjkJAcategory; // 0x40
	private static byte* cjkKOcategory; // 0x48
	private static byte* cjkCHSlv1; // 0x50
	private static byte* cjkCHTlv1; // 0x58
	private static byte* cjkJAlv1; // 0x60
	private static byte* cjkKOlv1; // 0x68
	private static byte* cjkKOlv2; // 0x70
	private static readonly char[] tailoringArr; // 0x78
	private static readonly TailoringInfo[] tailoringInfos; // 0x80
	private static object forLock; // 0x88
	public static readonly bool isReady; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC3752C Offset: 0xC3752C VA: 0xC3752C
	private static Dictionary<string, int> <>f__switch$map2; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xC3753C Offset: 0xC3753C VA: 0xC3753C
	private static Dictionary<string, int> <>f__switch$map3; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC3754C Offset: 0xC3754C VA: 0xC3754C
	private static Dictionary<string, int> <>f__switch$map4; // 0xA8

	// Properties
	public static bool IsReady { get; }

	// Methods

	// RVA: 0x127A98C Offset: 0x127A98C VA: 0x127A98C
	private static void .cctor() { }

	// RVA: 0x127AE34 Offset: 0x127AE34 VA: 0x127AE34
	public static TailoringInfo GetTailoringInfo(int lcid) { }

	// RVA: 0x127AFA0 Offset: 0x127AFA0 VA: 0x127AFA0
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals) { }

	// RVA: 0x127B688 Offset: 0x127B688 VA: 0x127B688
	private static void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x127BA74 Offset: 0x127BA74 VA: 0x127BA74
	public static byte Category(int cp) { }

	// RVA: 0x127BB34 Offset: 0x127BB34 VA: 0x127BB34
	public static byte Level1(int cp) { }

	// RVA: 0x127BBF4 Offset: 0x127BBF4 VA: 0x127BBF4
	public static byte Level2(int cp) { }

	// RVA: 0x127BCB4 Offset: 0x127BCB4 VA: 0x127BCB4
	public static byte Level3(int cp) { }

	// RVA: 0x127BD74 Offset: 0x127BD74 VA: 0x127BD74
	public static bool IsIgnorable(int cp, byte flag) { }

	// RVA: 0x127BEA0 Offset: 0x127BEA0 VA: 0x127BEA0
	public static bool IsIgnorableNonSpacing(int cp) { }

	// RVA: 0x127BF08 Offset: 0x127BF08 VA: 0x127BF08
	public static int ToKanaTypeInsensitive(int i) { }

	// RVA: 0x127BF28 Offset: 0x127BF28 VA: 0x127BF28
	public static int ToWidthCompat(int i) { }

	// RVA: 0x127C0B0 Offset: 0x127C0B0 VA: 0x127C0B0
	public static bool HasSpecialWeight(char c) { }

	// RVA: 0x127C144 Offset: 0x127C144 VA: 0x127C144
	public static bool IsHalfWidthKana(char c) { }

	// RVA: 0x127C158 Offset: 0x127C158 VA: 0x127C158
	public static bool IsHiragana(char c) { }

	// RVA: 0x127C170 Offset: 0x127C170 VA: 0x127C170
	public static bool IsJapaneseSmallLetter(char c) { }

	// RVA: 0x127C244 Offset: 0x127C244 VA: 0x127C244
	public static bool get_IsReady() { }

	// RVA: 0x127AD20 Offset: 0x127AD20 VA: 0x127AD20
	private static IntPtr GetResource(string name) { }

	// RVA: 0x127ADB0 Offset: 0x127ADB0 VA: 0x127ADB0
	private static uint UInt32FromBytePtr(byte* raw, uint idx) { }

	// RVA: 0x127C2AC Offset: 0x127C2AC VA: 0x127C2AC
	public static void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x127C408 Offset: 0x127C408 VA: 0x127C408
	private static void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 102
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x8
	public static readonly CodePointIndexer Level1; // 0x10
	public static readonly CodePointIndexer Level2; // 0x18
	public static readonly CodePointIndexer Level3; // 0x20
	public static readonly CodePointIndexer CjkCHS; // 0x28
	public static readonly CodePointIndexer Cjk; // 0x30

	// Methods

	// RVA: 0x127CBC0 Offset: 0x127CBC0 VA: 0x127CBC0
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 103
{
	// Fields
	private static bool QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x8
	private readonly TextInfo textInfo; // 0x10
	private readonly bool frenchSort; // 0x18
	private readonly byte* cjkCatTable; // 0x20
	private readonly byte* cjkLv1Table; // 0x28
	private readonly CodePointIndexer cjkIndexer; // 0x30
	private readonly byte* cjkLv2Table; // 0x38
	private readonly CodePointIndexer cjkLv2Indexer; // 0x40
	private readonly int lcid; // 0x48
	private readonly Contraction[] contractions; // 0x50
	private readonly Level2Map[] level2Maps; // 0x58
	private readonly byte[] unsafeFlags; // 0x60

	// Methods

	// RVA: 0x127D230 Offset: 0x127D230 VA: 0x127D230
	public void .ctor(CultureInfo culture) { }

	// RVA: 0x127D750 Offset: 0x127D750 VA: 0x127D750
	private static void .cctor() { }

	// RVA: 0x127D660 Offset: 0x127D660 VA: 0x127D660
	private void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }

	// RVA: 0x127D850 Offset: 0x127D850 VA: 0x127D850
	private static CultureInfo GetNeutralCulture(CultureInfo info) { }

	// RVA: 0x127D8D8 Offset: 0x127D8D8 VA: 0x127D8D8
	private byte Category(int cp) { }

	// RVA: 0x127D990 Offset: 0x127D990 VA: 0x127D990
	private byte Level1(int cp) { }

	// RVA: 0x127DA48 Offset: 0x127DA48 VA: 0x127DA48
	private byte Level2(int cp, SimpleCollator.ExtenderType ext) { }

	// RVA: 0x127DC44 Offset: 0x127DC44 VA: 0x127DC44
	private static bool IsHalfKana(int cp, CompareOptions opt) { }

	// RVA: 0x127DCCC Offset: 0x127DCCC VA: 0x127DCCC
	private Contraction GetContraction(string s, int start, int end) { }

	// RVA: 0x127DDAC Offset: 0x127DDAC VA: 0x127DDAC
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x127DF38 Offset: 0x127DF38 VA: 0x127DF38
	private Contraction GetTailContraction(string s, int start, int end) { }

	// RVA: 0x127E018 Offset: 0x127E018 VA: 0x127E018
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist) { }

	// RVA: 0x127E2F8 Offset: 0x127E2F8 VA: 0x127E2F8
	private int FilterOptions(int i, CompareOptions opt) { }

	// RVA: 0x127E434 Offset: 0x127E434 VA: 0x127E434
	private SimpleCollator.ExtenderType GetExtenderType(int i) { }

	// RVA: 0x127E534 Offset: 0x127E534 VA: 0x127E534
	private static byte ToDashTypeValue(SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x127E564 Offset: 0x127E564 VA: 0x127E564
	private int FilterExtender(int i, SimpleCollator.ExtenderType ext, CompareOptions opt) { }

	// RVA: 0x127E798 Offset: 0x127E798 VA: 0x127E798
	private static bool IsIgnorable(int i, CompareOptions opt) { }

	// RVA: 0x127E830 Offset: 0x127E830 VA: 0x127E830
	private bool IsSafe(int i) { }

	// RVA: 0x127E8EC Offset: 0x127E8EC VA: 0x127E8EC
	public SortKey GetSortKey(string s, CompareOptions options) { }

	// RVA: 0x127E944 Offset: 0x127E944 VA: 0x127E944
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options) { }

	// RVA: 0x127EC3C Offset: 0x127EC3C VA: 0x127EC3C
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x127F0A0 Offset: 0x127F0A0 VA: 0x127F0A0
	private void FillSortKeyRaw(int i, SimpleCollator.ExtenderType ext, SortKeyBuffer buf, CompareOptions opt) { }

	// RVA: 0x127F784 Offset: 0x127F784 VA: 0x127F784
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf) { }

	// RVA: 0x127F948 Offset: 0x127F948 VA: 0x127F948
	private int CompareOrdinal(string s1, int idx1, int len1, string s2, int idx2, int len2) { }

	// RVA: 0x127FDFC Offset: 0x127FDFC VA: 0x127FDFC
	private int CompareQuick(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool sourceConsumed, out bool targetConsumed, bool immediateBreakup) { }

	// RVA: 0x1280670 Offset: 0x1280670 VA: 0x1280670
	private int CompareOrdinalIgnoreCase(string s1, int idx1, int len1, string s2, int idx2, int len2) { }

	// RVA: 0x1280BC0 Offset: 0x1280BC0 VA: 0x1280BC0
	public int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options) { }

	// RVA: 0x127F060 Offset: 0x127F060 VA: 0x127F060
	private void ClearBuffer(byte* buffer, int size) { }

	// RVA: 0x1280D84 Offset: 0x1280D84 VA: 0x1280D84
	private bool QuickCheckPossible(string s1, int idx1, int end1, string s2, int idx2, int end2) { }

	// RVA: 0x1280D8C Offset: 0x1280D8C VA: 0x1280D8C
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref SimpleCollator.Context ctx) { }

	// RVA: 0x12825F0 Offset: 0x12825F0 VA: 0x12825F0
	private int CompareFlagPair(bool b1, bool b2) { }

	// RVA: 0x1282610 Offset: 0x1282610 VA: 0x1282610
	public bool IsPrefix(string src, string target, CompareOptions opt) { }

	// RVA: 0x1282670 Offset: 0x1282670 VA: 0x1282670
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x12827B4 Offset: 0x12827B4 VA: 0x12827B4
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref SimpleCollator.Context ctx) { }

	// RVA: 0x128286C Offset: 0x128286C VA: 0x128286C
	public bool IsSuffix(string src, string target, CompareOptions opt) { }

	// RVA: 0x1282900 Offset: 0x1282900 VA: 0x1282900
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x1282BB0 Offset: 0x1282BB0 VA: 0x1282BB0
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable) { }

	// RVA: 0x1282D7C Offset: 0x1282D7C VA: 0x1282D7C
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x1282F5C Offset: 0x1282F5C VA: 0x1282F5C
	private int IndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x128308C Offset: 0x128308C VA: 0x128308C
	private int IndexOfOrdinalIgnoreCase(string s, string target, int start, int length) { }

	// RVA: 0x1283794 Offset: 0x1283794 VA: 0x1283794
	private int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1283220 Offset: 0x1283220 VA: 0x1283220
	private int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x12829F8 Offset: 0x12829F8 VA: 0x12829F8
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt) { }

	// RVA: 0x1283A18 Offset: 0x1283A18 VA: 0x1283A18
	private int LastIndexOfOrdinal(string s, string target, int start, int length) { }

	// RVA: 0x1283C70 Offset: 0x1283C70 VA: 0x1283C70
	private int LastIndexOfOrdinalIgnoreCase(string s, string target, int start, int length) { }

	// RVA: 0x1284530 Offset: 0x1284530 VA: 0x1284530
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1283F5C Offset: 0x1283F5C VA: 0x1283F5C
	private int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1283834 Offset: 0x1283834 VA: 0x1283834
	private bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x12847D0 Offset: 0x12847D0 VA: 0x12847D0
	private bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1284C30 Offset: 0x1284C30 VA: 0x1284C30
	private bool MatchesPrimitive(CompareOptions opt, byte* source, int si, SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4) { }

	// RVA: 0x12845E0 Offset: 0x12845E0 VA: 0x12845E0
	private bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }

	// RVA: 0x1284FF8 Offset: 0x1284FF8 VA: 0x1284FF8
	private bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }
}

// Namespace: 
internal struct SimpleCollator.Context // TypeDefIndex: 104
{
	// Fields
	public readonly CompareOptions Option; // 0x0
	public readonly byte* NeverMatchFlags; // 0x8
	public readonly byte* AlwaysMatchFlags; // 0x10
	public byte* Buffer1; // 0x18
	public byte* Buffer2; // 0x20
	public int PrevCode; // 0x28
	public byte* PrevSortKey; // 0x30
	public readonly bool QuickCheckPossible; // 0x38

	// Methods

	// RVA: 0xBC0394 Offset: 0xBC0394 VA: 0xBC0394
	public void .ctor(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1, bool quickCheckPossible) { }
}

// Namespace: 
private struct SimpleCollator.PreviousInfo // TypeDefIndex: 105
{
	// Fields
	public int Code; // 0x0
	public byte* SortKey; // 0x8

	// Methods

	// RVA: 0xBC0478 Offset: 0xBC0478 VA: 0xBC0478
	public void .ctor(bool dummy) { }
}

// Namespace: 
private struct SimpleCollator.Escape // TypeDefIndex: 106
{
	// Fields
	public string Source; // 0x0
	public int Index; // 0x8
	public int Start; // 0xC
	public int End; // 0x10
	public int Optional; // 0x14
}

// Namespace: 
private enum SimpleCollator.ExtenderType // TypeDefIndex: 107
{
	// Fields
	public int value__; // 0x0
	public const SimpleCollator.ExtenderType None = 0;
	public const SimpleCollator.ExtenderType Simple = 1;
	public const SimpleCollator.ExtenderType Voiced = 2;
	public const SimpleCollator.ExtenderType Conditional = 3;
	public const SimpleCollator.ExtenderType Buggy = 4;
}

// Namespace: System.Globalization
[ComVisibleAttribute] // RVA: 0xC3016C Offset: 0xC3016C VA: 0xC3016C
[Serializable]
public class SortKey // TypeDefIndex: 108
{
	// Fields
	private readonly string source; // 0x10
	private readonly CompareOptions options; // 0x18
	private readonly byte[] key; // 0x20
	private readonly int lcid; // 0x28

	// Properties
	public virtual string OriginalString { get; }
	public virtual byte[] KeyData { get; }

	// Methods

	// RVA: 0x1181B1C Offset: 0x1181B1C VA: 0x1181B1C
	internal void .ctor(int lcid, string source, CompareOptions opt) { }

	// RVA: 0x1188D18 Offset: 0x1188D18 VA: 0x1188D18
	internal void .ctor(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength) { }

	// RVA: 0x1188D6C Offset: 0x1188D6C VA: 0x1188D6C
	public static int Compare(SortKey sortkey1, SortKey sortkey2) { }

	// RVA: 0x1188F9C Offset: 0x1188F9C VA: 0x1188F9C Slot: 4
	public virtual string get_OriginalString() { }

	// RVA: 0x1188FA4 Offset: 0x1188FA4 VA: 0x1188FA4 Slot: 5
	public virtual byte[] get_KeyData() { }

	// RVA: 0x1188FAC Offset: 0x1188FAC VA: 0x1188FAC Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x118906C Offset: 0x118906C VA: 0x118906C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1189154 Offset: 0x1189154 VA: 0x1189154 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 109
{
	// Fields
	private int l1; // 0x10
	private int l2; // 0x14
	private int l3; // 0x18
	private int l4s; // 0x1C
	private int l4t; // 0x20
	private int l4k; // 0x24
	private int l4w; // 0x28
	private int l5; // 0x2C
	private byte[] l1b; // 0x30
	private byte[] l2b; // 0x38
