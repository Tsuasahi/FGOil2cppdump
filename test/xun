
	// RVA: 0x17FE7E0 Offset: 0x17FE7E0 VA: 0x17FE7E0
	public int GetFreeQuestCount() { }

	// RVA: 0x17FE7E8 Offset: 0x17FE7E8 VA: 0x17FE7E8
	public void SetFreeQuestCount(int freeQuestCount) { }

	// RVA: 0x17FE7F0 Offset: 0x17FE7F0 VA: 0x17FE7F0
	public void AddFreeQuestCount(int addCount) { }

	// RVA: 0x17FE800 Offset: 0x17FE800 VA: 0x17FE800
	public bool IsNextDisp() { }

	// RVA: 0x17FCC0C Offset: 0x17FCC0C VA: 0x17FCC0C
	public void SetMine(int spotId) { }

	// RVA: 0x17FE634 Offset: 0x17FE634 VA: 0x17FE634
	public SpotEntity GetMine() { }

	// RVA: 0x17FE824 Offset: 0x17FE824 VA: 0x17FE824
	private SpotMaster GetSpotMaster() { }
}

// Namespace: 
public enum MapControl.SpotInfo.DispType // TypeDefIndex: 11039
{
	// Fields
	public int value__; // 0x0
	public const MapControl.SpotInfo.DispType None = 0;
	public const MapControl.SpotInfo.DispType Normal = 1;
	public const MapControl.SpotInfo.DispType Gray = 2;
}

// Namespace: 
public enum MapControl.SpotInfo.TouchType // TypeDefIndex: 11040
{
	// Fields
	public int value__; // 0x0
	public const MapControl.SpotInfo.TouchType Disable = 0;
	public const MapControl.SpotInfo.TouchType Enable = 1;
}

// Namespace: 
public class MapControl.SpotRoadInfo // TypeDefIndex: 11041
{
	// Fields
	private MapControl.SpotRoadInfo.DispType dispType; // 0x10
	private int spotRoadId; // 0x14
	private SpotRoadMaster spotRoadMaster; // 0x18

	// Methods

	// RVA: 0x17FCCC0 Offset: 0x17FCCC0 VA: 0x17FCCC0
	public void .ctor() { }

	// RVA: 0x17FCAA4 Offset: 0x17FCAA4 VA: 0x17FCAA4
	public void Reset() { }

	// RVA: 0x17FE8A4 Offset: 0x17FE8A4 VA: 0x17FE8A4
	public void SetDispType(MapControl.SpotRoadInfo.DispType dispType) { }

	// RVA: 0x17FE8AC Offset: 0x17FE8AC VA: 0x17FE8AC
	public MapControl.SpotRoadInfo.DispType GetDispType() { }

	// RVA: 0x17FCCC8 Offset: 0x17FCCC8 VA: 0x17FCCC8
	public void SetMine(int spotRoadId) { }

	// RVA: 0x17FE8B4 Offset: 0x17FE8B4 VA: 0x17FE8B4
	public SpotRoadEntity GetMine() { }

	// RVA: 0x17FE9A0 Offset: 0x17FE9A0 VA: 0x17FE9A0
	public int GetSpotRoadId() { }

	// RVA: 0x17FE920 Offset: 0x17FE920 VA: 0x17FE920
	private SpotRoadMaster GetSpotRoadMaster() { }
}

// Namespace: 
public enum MapControl.SpotRoadInfo.DispType // TypeDefIndex: 11042
{
	// Fields
	public int value__; // 0x0
	public const MapControl.SpotRoadInfo.DispType None = 0;
	public const MapControl.SpotRoadInfo.DispType Normal = 1;
	public const MapControl.SpotRoadInfo.DispType Gray = 2;
}

// Namespace: 
public class MapControl.MapGimmickInfo // TypeDefIndex: 11043
{
	// Fields
	private MapControl.MapGimmickInfo.DispType dispType; // 0x10
	private int mapGimmickId; // 0x14
	private MapGimmickMaster mapGimmickMaster; // 0x18

	// Methods

	// RVA: 0x17FC3BC Offset: 0x17FC3BC VA: 0x17FC3BC
	public void .ctor() { }

	// RVA: 0x17FC3C4 Offset: 0x17FC3C4 VA: 0x17FC3C4
	public void Reset() { }

	// RVA: 0x17FC3CC Offset: 0x17FC3CC VA: 0x17FC3CC
	public void SetDispType(MapControl.MapGimmickInfo.DispType dispType) { }

	// RVA: 0x17FC3D4 Offset: 0x17FC3D4 VA: 0x17FC3D4
	public MapControl.MapGimmickInfo.DispType GetDispType() { }

	// RVA: 0x17FC3DC Offset: 0x17FC3DC VA: 0x17FC3DC
	public void SetMine(int mapGimmickId) { }

	// RVA: 0x17FC3E4 Offset: 0x17FC3E4 VA: 0x17FC3E4
	public MapGimmickEntity GetMine() { }

	// RVA: 0x17FC4D0 Offset: 0x17FC4D0 VA: 0x17FC4D0
	public int GetMapGimmickId() { }

	// RVA: 0x17FC450 Offset: 0x17FC450 VA: 0x17FC450
	private MapGimmickMaster GetMapGimmickMaster() { }
}

// Namespace: 
public enum MapControl.MapGimmickInfo.DispType // TypeDefIndex: 11044
{
	// Fields
	public int value__; // 0x0
	public const MapControl.MapGimmickInfo.DispType None = 0;
	public const MapControl.MapGimmickInfo.DispType Normal = 1;
}

// Namespace: 
public class MapControl.MapInfo // TypeDefIndex: 11045
{
	// Fields
	private int warId; // 0x10
	private int mapId; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCE8D48 Offset: 0xCE8D48 VA: 0xCE8D48
	[DebuggerBrowsableAttribute] // RVA: 0xCE8D48 Offset: 0xCE8D48 VA: 0xCE8D48
	private bool <IsNext>k__BackingField; // 0x18
	private List<MapControl.SpotInfo> spotInfoList; // 0x20
	private List<MapControl.SpotRoadInfo> spotRoadInfoList; // 0x28
	private List<MapControl.MapGimmickInfo> mapGimmickInfoList; // 0x30
	private MapMaster mapMaster; // 0x38

	// Properties
	public bool IsNext { get; set; }

	// Methods

	// RVA: 0x17FC4D8 Offset: 0x17FC4D8 VA: 0x17FC4D8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40CEC Offset: 0xD40CEC VA: 0xD40CEC
	// RVA: 0x17FC5F8 Offset: 0x17FC5F8 VA: 0x17FC5F8
	public bool get_IsNext() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40CFC Offset: 0xD40CFC VA: 0xD40CFC
	// RVA: 0x17FC600 Offset: 0x17FC600 VA: 0x17FC600
	public void set_IsNext(bool value) { }

	// RVA: 0x17FC60C Offset: 0x17FC60C VA: 0x17FC60C
	public void Reset() { }

	// RVA: 0x17F7078 Offset: 0x17F7078 VA: 0x17F7078
	public int GetMapID() { }

	// RVA: 0x17FCAAC Offset: 0x17FCAAC VA: 0x17FCAAC
	public MapControl.SpotInfo AddChild(int spotId) { }

	// RVA: 0x17FCC14 Offset: 0x17FCC14 VA: 0x17FCC14
	public List<MapControl.SpotInfo> GetSpotList() { }

	// RVA: 0x17FCC1C Offset: 0x17FCC1C VA: 0x17FCC1C
	public MapControl.SpotRoadInfo AddSpotRoad(int spotRoadId) { }

	// RVA: 0x17FCCD0 Offset: 0x17FCCD0 VA: 0x17FCCD0
	public List<MapControl.SpotRoadInfo> GetSpotRoadList() { }

	// RVA: 0x17FCCD8 Offset: 0x17FCCD8 VA: 0x17FCCD8
	public MapControl.MapGimmickInfo AddMapGimmick(int mapGimmickId) { }

	// RVA: 0x17FCD7C Offset: 0x17FCD7C VA: 0x17FCD7C
	public List<MapControl.MapGimmickInfo> GetMapGimmickList() { }

	// RVA: 0x17FCD84 Offset: 0x17FCD84 VA: 0x17FCD84
	public void SetMine(int mapId, int warId) { }

	// RVA: 0x17FCD8C Offset: 0x17FCD8C VA: 0x17FCD8C
	public MapEntity GetMine() { }

	// RVA: 0x17FCE04 Offset: 0x17FCE04 VA: 0x17FCE04
	private MapMaster GetMapMaster() { }
}

// Namespace: 
public class MapControl.WarInfo // TypeDefIndex: 11046
{
	// Fields
	private readonly int DEFAULT_WAR_CHECK_STATUS; // 0x10
	private int warId; // 0x14
	private int status; // 0x18
	private List<MapControl.MapInfo> mapInfoList; // 0x20
	private WarEntity mine; // 0x28

	// Methods

	// RVA: 0x17FDF18 Offset: 0x17FDF18 VA: 0x17FDF18
	public void .ctor() { }

	// RVA: 0x17FDC20 Offset: 0x17FDC20 VA: 0x17FDC20
	public void Reset() { }

	// RVA: 0x17FE9A8 Offset: 0x17FE9A8 VA: 0x17FE9A8
	public MapControl.MapInfo AddChild(int mapId) { }

	// RVA: 0x17FEA4C Offset: 0x17FEA4C VA: 0x17FEA4C
	public List<MapControl.MapInfo> GetMapList() { }

	// RVA: 0x17FEA54 Offset: 0x17FEA54 VA: 0x17FEA54
	public MapControl.MapInfo GetMap(int mapId) { }

	// RVA: 0x17FEC44 Offset: 0x17FEC44 VA: 0x17FEC44
	public MapControl.MapInfo GetNextMap() { }

	// RVA: 0x17FEBD8 Offset: 0x17FEBD8 VA: 0x17FEBD8
	public bool IsMultiMap() { }

	// RVA: 0x17FEDC4 Offset: 0x17FEDC4 VA: 0x17FEDC4
	public MapControl.MapInfo GetActionMap(QuestAfterAction.COMMAND_TYPE commandType, int target) { }

	// RVA: 0x17FE4D4 Offset: 0x17FE4D4 VA: 0x17FE4D4
	public int GetWarID() { }

	// RVA: 0x17FE4DC Offset: 0x17FE4DC VA: 0x17FE4DC
	public MapControl.WarInfo.Status GetStatus() { }

	// RVA: 0x17FF168 Offset: 0x17FF168 VA: 0x17FF168
	public bool IsClosedWar() { }

	// RVA: 0x17F704C Offset: 0x17F704C VA: 0x17F704C
	public int GetEventId() { }

	// RVA: 0x17FF1E4 Offset: 0x17FF1E4 VA: 0x17FF1E4
	public bool IsEvent() { }

	// RVA: 0x17FDFB8 Offset: 0x17FDFB8 VA: 0x17FDFB8
	public void SetMine(int warId) { }

	// RVA: 0x17FF158 Offset: 0x17FF158 VA: 0x17FF158
	public bool IsStatusCheckFlagAvailable(MapControl.WarInfo.StatusCheckFlag flag) { }

	// RVA: 0x17FF218 Offset: 0x17FF218 VA: 0x17FF218
	public void SetStatusCheckFlag(MapControl.WarInfo.StatusCheckFlag flag, bool setTo) { }

	// RVA: 0x17FE110 Offset: 0x17FE110 VA: 0x17FE110
	public WarEntity GetMine() { }
}

// Namespace: 
public enum MapControl.WarInfo.Status // TypeDefIndex: 11047
{
	// Fields
	public int value__; // 0x0
	public const MapControl.WarInfo.Status None = 0;
	public const MapControl.WarInfo.Status Normal = 1;
	public const MapControl.WarInfo.Status New = 2;
	public const MapControl.WarInfo.Status Clear = 3;
	public const MapControl.WarInfo.Status Complete = 4;
}

// Namespace: 
public enum MapControl.WarInfo.StatusCheckFlag // TypeDefIndex: 11048
{
	// Fields
	public int value__; // 0x0
	public const MapControl.WarInfo.StatusCheckFlag isClosed = 1;
	public const MapControl.WarInfo.StatusCheckFlag isClearingAll = 2;
	public const MapControl.WarInfo.StatusCheckFlag isHasNoneUserQuest = 4;
	public const MapControl.WarInfo.StatusCheckFlag isWarLastQuestCleard = 8;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1A90 Offset: 0xCB1A90 VA: 0xCB1A90
private sealed class MapControl.WarInfo.<GetActionMap>c__AnonStorey0 // TypeDefIndex: 11049
{
	// Fields
	internal int target; // 0x10

	// Methods

	// RVA: 0x17FF150 Offset: 0x17FF150 VA: 0x17FF150
	public void .ctor() { }

	// RVA: 0x17FF240 Offset: 0x17FF240 VA: 0x17FF240
	internal bool <>m__0(MapControl.SpotInfo x) { }

	// RVA: 0x17FF27C Offset: 0x17FF27C VA: 0x17FF27C
	internal bool <>m__1(MapControl.SpotRoadInfo x) { }

	// RVA: 0x17FF2B8 Offset: 0x17FF2B8 VA: 0x17FF2B8
	internal bool <>m__2(MapControl.MapGimmickInfo x) { }
}

// Namespace: 
public class MapControl.RootInfo // TypeDefIndex: 11050
{
	// Fields
	private List<MapControl.WarInfo> warInfoList; // 0x10

	// Methods

	// RVA: 0x17FDA54 Offset: 0x17FDA54 VA: 0x17FDA54
	public void .ctor() { }

	// RVA: 0x17FDAE4 Offset: 0x17FDAE4 VA: 0x17FDAE4
	public void Reset() { }

	// RVA: 0x17FDD64 Offset: 0x17FDD64 VA: 0x17FDD64
	public void Remove(int warId) { }

	// RVA: 0x17FDE78 Offset: 0x17FDE78 VA: 0x17FDE78
	public MapControl.WarInfo AddChild(int warId) { }

	// RVA: 0x17FDFC0 Offset: 0x17FDFC0 VA: 0x17FDFC0
	public MapControl.WarInfo GetChildByWarID(int warId) { }

	// RVA: 0x17FE20C Offset: 0x17FE20C VA: 0x17FE20C
	public MapControl.WarInfo GetChildByEventID(int eventId) { }

	// RVA: 0x17FE35C Offset: 0x17FE35C VA: 0x17FE35C
	public bool IsOpenedMainScenarioWar(int warId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1AA0 Offset: 0xCB1AA0 VA: 0xCB1AA0
private sealed class MapControl.RootInfo.<Remove>c__AnonStorey0 // TypeDefIndex: 11051
{
	// Fields
	internal int warId; // 0x10

	// Methods

	// RVA: 0x17FDE70 Offset: 0x17FDE70 VA: 0x17FDE70
	public void .ctor() { }

	// RVA: 0x17FE514 Offset: 0x17FE514 VA: 0x17FE514
	internal bool <>m__0(MapControl.WarInfo x) { }
}

// Namespace: 
public class MapEffectComponent : CommonEffectComponent // TypeDefIndex: 11052
{
	// Fields
	[SerializeField] // RVA: 0xCE8D84 Offset: 0xCE8D84 VA: 0xCE8D84
	private bool isCameraFollow; // 0xA8
	private MapCamera mapCamera; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xCE8D94 Offset: 0xCE8D94 VA: 0xCE8D94
	[DebuggerBrowsableAttribute] // RVA: 0xCE8D94 Offset: 0xCE8D94 VA: 0xCE8D94
	private float <OffestPositionY>k__BackingField; // 0xB8

	// Properties
	public float OffestPositionY { get; set; }

	// Methods

	// RVA: 0x17FF2F4 Offset: 0x17FF2F4 VA: 0x17FF2F4
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D0C Offset: 0xD40D0C VA: 0xD40D0C
	// RVA: 0x17FF2FC Offset: 0x17FF2FC VA: 0x17FF2FC
	public float get_OffestPositionY() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D1C Offset: 0xD40D1C VA: 0xD40D1C
	// RVA: 0x17FF304 Offset: 0x17FF304 VA: 0x17FF304
	public void set_OffestPositionY(float value) { }

	// RVA: 0x17FF30C Offset: 0x17FF30C VA: 0x17FF30C
	private void LateUpdate() { }

	// RVA: 0x17FF440 Offset: 0x17FF440 VA: 0x17FF440
	public void Setup(GameObject parent, MapCamera mapCamera) { }

	// RVA: 0x17FF310 Offset: 0x17FF310 VA: 0x17FF310
	protected void UpdateCameraFollow() { }
}

// Namespace: 
public class MapGimmickComponent : MonoBehaviour // TypeDefIndex: 11053
{
	// Fields
	private const float FIXED_VAL = 1000;
	private const float MAP_GIMMICK_OFFSET_CENTER_Y = 576;
	[SerializeField] // RVA: 0xCE8DD0 Offset: 0xCE8DD0 VA: 0xCE8DD0
	private UISprite mSprite; // 0x18
	[SerializeField] // RVA: 0xCE8DE0 Offset: 0xCE8DE0 VA: 0xCE8DE0
	private int mDepthBase; // 0x20
	[SerializeField] // RVA: 0xCE8DF0 Offset: 0xCE8DF0 VA: 0xCE8DF0
	private float mScaleBase; // 0x24
	[SerializeField] // RVA: 0xCE8E00 Offset: 0xCE8E00 VA: 0xCE8E00
	private float mAnimTime; // 0x28
	[SerializeField] // RVA: 0xCE8E10 Offset: 0xCE8E10 VA: 0xCE8E10
	private Easing.TYPE mEasingType; // 0x2C
	[SerializeField] // RVA: 0xCE8E20 Offset: 0xCE8E20 VA: 0xCE8E20
	private string mHideSeName; // 0x30
	[SerializeField] // RVA: 0xCE8E30 Offset: 0xCE8E30 VA: 0xCE8E30
	private string mDispSeName; // 0x38
	private CStateManager<MapGimmickComponent> mFSM; // 0x40
	private long mOldDispTime; // 0x48
	private CommonEffectComponent commonEffectComponent; // 0x50
	private CommonEffectComponent actionEffect; // 0x58
	private MapControl.MapGimmickInfo mMapCtrl_MapGimmickInfo; // 0x60
	private Action mStateEndAct; // 0x68

	// Methods

	// RVA: 0x17FFDE4 Offset: 0x17FFDE4 VA: 0x17FFDE4
	public void .ctor() { }

	// RVA: 0x17FFE88 Offset: 0x17FFE88 VA: 0x17FFE88
	public static string GetGobjName(int id) { }

	// RVA: 0x17FFF20 Offset: 0x17FFF20 VA: 0x17FFF20
	public MapControl.MapGimmickInfo GetMapCtrl_MapGimmickInfo() { }

	// RVA: 0x17FFF28 Offset: 0x17FFF28 VA: 0x17FFF28
	private float GetAnimTime() { }

	// RVA: 0x17FFF88 Offset: 0x17FFF88 VA: 0x17FFF88
	private void Awake() { }

	// RVA: 0x18001C0 Offset: 0x18001C0 VA: 0x18001C0
	private void Update() { }

	// RVA: 0x1800220 Offset: 0x1800220 VA: 0x1800220
	public void Setup(MapControl.MapGimmickInfo mg_inf, MapCamera mapCamera, List<UIAtlas> atlases, AssetData assetData, AssetData multiAssetData) { }

	// RVA: 0x1800F24 Offset: 0x1800F24 VA: 0x1800F24
	private GameObject GetEffectPrefab(string effectPrefabName, AssetData assetData, AssetData multiAssetData) { }

	// RVA: 0x180102C Offset: 0x180102C VA: 0x180102C
	private CommonEffectComponent GetCommonEffectComponent(GameObject prefab, MapCamera mapCamera) { }

	// RVA: 0x18014D8 Offset: 0x18014D8 VA: 0x18014D8
	public MapGimmickComponent.STATE GetState() { }

	// RVA: 0x1800148 Offset: 0x1800148 VA: 0x1800148
	public void SetState(MapGimmickComponent.STATE state, Action end_act) { }

	// RVA: 0x1801538 Offset: 0x1801538 VA: 0x1801538
	private void StartActionEffect() { }

	// RVA: 0x180160C Offset: 0x180160C VA: 0x180160C
	private void StateDispAnimEnd() { }

	// RVA: 0x1801640 Offset: 0x1801640 VA: 0x1801640
	public void SetDispAnim(bool is_disp) { }

	// RVA: 0x1801A5C Offset: 0x1801A5C VA: 0x1801A5C
	public void SetDispAnimQuick(bool is_disp) { }

	// RVA: 0x1801670 Offset: 0x1801670 VA: 0x1801670
	private void SetDispAnim(bool is_disp, float time, bool is_play_se) { }

	// RVA: 0x1801C24 Offset: 0x1801C24 VA: 0x1801C24
	public void SetMoveAnim(Vector3 posTo, float time, Easing.TYPE easeType, Action callback) { }

	// RVA: 0x1801B50 Offset: 0x1801B50 VA: 0x1801B50
	private void StateHideAnimEnd() { }

	// RVA: 0x1801A74 Offset: 0x1801A74 VA: 0x1801A74
	private void SetTouchEnable(bool enabled) { }
}

// Namespace: 
public enum MapGimmickComponent.STATE // TypeDefIndex: 11054
{
	// Fields
	public int value__; // 0x0
	public const MapGimmickComponent.STATE NONE = 0;
	public const MapGimmickComponent.STATE MAP_MAIN = 1;
	public const MapGimmickComponent.STATE HIDE_ANIM = 2;
	public const MapGimmickComponent.STATE DISP_ANIM = 3;
	public const MapGimmickComponent.STATE SIZEOF = 4;
}

// Namespace: 
private class MapGimmickComponent.StateNone : IState<MapGimmickComponent> // TypeDefIndex: 11055
{
	// Methods

	// RVA: 0x1800128 Offset: 0x1800128 VA: 0x1800128
	public void .ctor() { }

	// RVA: 0x1802870 Offset: 0x1802870 VA: 0x1802870 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x1802874 Offset: 0x1802874 VA: 0x1802874 Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x1802878 Offset: 0x1802878 VA: 0x1802878 Slot: 6
	public void end(MapGimmickComponent that) { }
}

// Namespace: 
private class MapGimmickComponent.StateMapMain : IState<MapGimmickComponent> // TypeDefIndex: 11056
{
	// Fields
	public static readonly int CHECK_DISP_ITVL_SEC; // 0x0
	private MapGimmickComponent mThat; // 0x10

	// Methods

	// RVA: 0x1800130 Offset: 0x1800130 VA: 0x1800130
	public void .ctor() { }

	// RVA: 0x1802674 Offset: 0x1802674 VA: 0x1802674 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x180267C Offset: 0x180267C VA: 0x180267C Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x1802818 Offset: 0x1802818 VA: 0x1802818 Slot: 6
	public void end(MapGimmickComponent that) { }

	// RVA: 0x1802680 Offset: 0x1802680 VA: 0x1802680
	private void CheckDispTime() { }

	// RVA: 0x180281C Offset: 0x180281C VA: 0x180281C
	private static void .cctor() { }
}

// Namespace: 
private class MapGimmickComponent.StateHideAnim : IState<MapGimmickComponent> // TypeDefIndex: 11057
{
	// Methods

	// RVA: 0x1800138 Offset: 0x1800138 VA: 0x1800138
	public void .ctor() { }

	// RVA: 0x18025F4 Offset: 0x18025F4 VA: 0x18025F4 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x180266C Offset: 0x180266C VA: 0x180266C Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x1802670 Offset: 0x1802670 VA: 0x1802670 Slot: 6
	public void end(MapGimmickComponent that) { }
}

// Namespace: 
private class MapGimmickComponent.StateDispAnim : IState<MapGimmickComponent> // TypeDefIndex: 11058
{
	// Methods

	// RVA: 0x1800140 Offset: 0x1800140 VA: 0x1800140
	public void .ctor() { }

	// RVA: 0x1802560 Offset: 0x1802560 VA: 0x1802560 Slot: 4
	public void begin(MapGimmickComponent that) { }

	// RVA: 0x18025EC Offset: 0x18025EC VA: 0x18025EC Slot: 5
	public void update(MapGimmickComponent that) { }

	// RVA: 0x18025F0 Offset: 0x18025F0 VA: 0x18025F0 Slot: 6
	public void end(MapGimmickComponent that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1AB0 Offset: 0xCB1AB0 VA: 0xCB1AB0
private sealed class MapGimmickComponent.<Setup>c__AnonStorey0 // TypeDefIndex: 11059
{
	// Fields
	internal MapGimmickEntity mg_ent; // 0x10

	// Methods

	// RVA: 0x1800ECC Offset: 0x1800ECC VA: 0x1800ECC
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1AC0 Offset: 0xCB1AC0 VA: 0xCB1AC0
private sealed class MapGimmickComponent.<Setup>c__AnonStorey1 // TypeDefIndex: 11060
{
	// Fields
	internal EventDetailEntity eventDetailEnt; // 0x10
	internal EventMissionEntity[] eventMissionEntList; // 0x18
	internal MapGimmickComponent.<Setup>c__AnonStorey0 <>f__ref$0; // 0x20

	// Methods

	// RVA: 0x1801324 Offset: 0x1801324 VA: 0x1801324
	public void .ctor() { }

	// RVA: 0x180210C Offset: 0x180210C VA: 0x180210C
	internal void <>m__0() { }

	// RVA: 0x18022F8 Offset: 0x18022F8 VA: 0x18022F8
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1AD0 Offset: 0xCB1AD0 VA: 0xCB1AD0
private sealed class MapGimmickComponent.<SetDispAnim>c__AnonStorey2 // TypeDefIndex: 11061
{
	// Fields
	internal int to; // 0x10
	internal float from; // 0x14
	internal EasingObject eo; // 0x18
	internal MapGimmickComponent $this; // 0x20

	// Methods

	// RVA: 0x1801A6C Offset: 0x1801A6C VA: 0x1801A6C
	public void .ctor() { }

	// RVA: 0x1801E28 Offset: 0x1801E28 VA: 0x1801E28
	internal void <>m__0() { }

	// RVA: 0x1801EAC Offset: 0x1801EAC VA: 0x1801EAC
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1AE0 Offset: 0xCB1AE0 VA: 0xCB1AE0
private sealed class MapGimmickComponent.<SetMoveAnim>c__AnonStorey3 // TypeDefIndex: 11062
{
	// Fields
	internal Vector3 posTo; // 0x10
	internal Action callback; // 0x20
	internal Vector3 posFrom; // 0x28
	internal EasingObject eo; // 0x38
	internal MapGimmickComponent $this; // 0x40

	// Methods

	// RVA: 0x1801E20 Offset: 0x1801E20 VA: 0x1801E20
	public void .ctor() { }

	// RVA: 0x1801F40 Offset: 0x1801F40 VA: 0x1801F40
	internal void <>m__0() { }

	// RVA: 0x1801FD4 Offset: 0x1801FD4 VA: 0x1801FD4
	internal void <>m__1() { }
}

// Namespace: 
public class MapGimmickEffectComponent : CommonEffectComponent // TypeDefIndex: 11063
{
	// Fields
	[SerializeField] // RVA: 0xCE8E40 Offset: 0xCE8E40 VA: 0xCE8E40
	protected string startAnimationName; // 0xA8
	[SerializeField] // RVA: 0xCE8E50 Offset: 0xCE8E50 VA: 0xCE8E50
	protected string loopAnimationName; // 0xB0
	[SerializeField] // RVA: 0xCE8E60 Offset: 0xCE8E60 VA: 0xCE8E60
	protected string endAnimationName; // 0xB8

	// Methods

	// RVA: 0x180287C Offset: 0x180287C VA: 0x180287C
	public void .ctor() { }

	// RVA: 0x1802884 Offset: 0x1802884 VA: 0x1802884
	private string GetAnimationName(CommonEffectComponent.Status status) { }

	// RVA: 0x1802CB0 Offset: 0x1802CB0 VA: 0x1802CB0 Slot: 5
	protected override void NextPlayAnimation(CommonEffectComponent.Status next) { }

	// RVA: 0x18030F4 Offset: 0x18030F4 VA: 0x18030F4 Slot: 6
	public override void ForceStart(bool isOverWrite, Action callback) { }

	// RVA: 0x1803404 Offset: 0x1803404 VA: 0x1803404 Slot: 7
	public override void ForceLoop(bool isOverWrite) { }

	// RVA: 0x1803704 Offset: 0x1803704 VA: 0x1803704 Slot: 8
	public override void Stop(bool isDestroy = True, Action callback) { }
}

// Namespace: 
public class MapScroll // TypeDefIndex: 11064
{
	// Fields
	private const int AcceptTouchCountMin = 1;
	private const int AcceptTouchCountMax = 2;
	private MapCamera mMapCamera; // 0x10
	private Vector2 mTgt; // 0x18
	private Vector2 mTchDif; // 0x20
	private Vector2 mTchDifOld; // 0x28
	private Vector2 mSpd; // 0x30
	private Vector2 mInertiaSpd; // 0x38
	private Camera mCamera; // 0x40
	private MapTouchDetector touchDetector; // 0x48
	private Action mPlaySEAction_Flick; // 0x50
	private Vector2 mAutoMvStPos; // 0x58
	private Vector2 mAutoMvEdPos; // 0x60
	private float mAutoMvTime; // 0x68
	private float mAutoMvDuration; // 0x6C
	private Easing.TYPE mAutoMvEaseType; // 0x70
	private Action mAutoMvEndAct; // 0x78
	public float UserTotalScrollAmount; // 0x80

	// Methods

	// RVA: 0x17F85C4 Offset: 0x17F85C4 VA: 0x17F85C4
	public void .ctor() { }

	// RVA: 0x17F85CC Offset: 0x17F85CC VA: 0x17F85CC
	public void Init(MapCamera mc, MapTouchDetector touchDetector) { }

	// RVA: 0x17F8700 Offset: 0x17F8700 VA: 0x17F8700
	public void UnInit() { }

	// RVA: 0x17F8884 Offset: 0x17F8884 VA: 0x17F8884
	public void Process() { }

	// RVA: 0x17F9AB0 Offset: 0x17F9AB0 VA: 0x17F9AB0
	public void StartAutoMove(Vector3 screenPos, float sec, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0x1804A90 Offset: 0x1804A90 VA: 0x1804A90
	public void Stop(bool is_force = False) { }

	// RVA: 0x1804B94 Offset: 0x1804B94 VA: 0x1804B94
	public bool IsStop() { }

	// RVA: 0x1804CE0 Offset: 0x1804CE0 VA: 0x1804CE0
	public Vector2 GetScrlTgtPos() { }

	// RVA: 0x1804CE8 Offset: 0x1804CE8 VA: 0x1804CE8
	public void SetScrlTgtPos(Vector2 pos) { }

	// RVA: 0x1804CF0 Offset: 0x1804CF0 VA: 0x1804CF0
	public void AddScrlTgtPos(Vector2 pos) { }

	// RVA: 0x1804B44 Offset: 0x1804B44 VA: 0x1804B44
	private bool BrakeMv(float spd_rate = 0) { }

	// RVA: 0x1804D88 Offset: 0x1804D88 VA: 0x1804D88
	private bool BrakeMv(Rect cam_rect, float spd_rate = 0) { }

	// RVA: 0x1804C1C Offset: 0x1804C1C VA: 0x1804C1C
	private void LimitMv() { }

	// RVA: 0x1804F80 Offset: 0x1804F80 VA: 0x1804F80
	private Vector2 LimitMv(Vector2 pos, Rect cam_rect, float rebound_rate = 0) { }

	// RVA: 0x17FF484 Offset: 0x17FF484 VA: 0x17FF484
	public Vector2 GetScrlPos() { }

	// RVA: 0x17FB3AC Offset: 0x17FB3AC VA: 0x17FB3AC
	public Vector3 GetScrlPosVec3() { }

	// RVA: 0x1804A40 Offset: 0x1804A40 VA: 0x1804A40
	public void SetScrlPos(Vector2 pos) { }
}

// Namespace: 
public class MapShakerComponent : MonoBehaviour // TypeDefIndex: 11065
{
	// Fields
	public float MagnitudeXMax; // 0x18
	public float MagnitudeXMin; // 0x1C
	public float MagnitudeYMax; // 0x20
	public float MagnitudeYMin; // 0x24
	public MapShakerComponent.ShakeType shakeType; // 0x28
	private GameObject toShake; // 0x30
	private int flag; // 0x38
	private int frameCnt; // 0x3C

	// Methods

	// RVA: 0x19E80B8 Offset: 0x19E80B8 VA: 0x19E80B8
	public void .ctor() { }

	// RVA: 0x19E80D8 Offset: 0x19E80D8 VA: 0x19E80D8
	private void Start() { }

	// RVA: 0x19E8178 Offset: 0x19E8178 VA: 0x19E8178
	private void Update() { }

	// RVA: 0x19E83B8 Offset: 0x19E83B8 VA: 0x19E83B8
	private void OnDisable() { }

	// RVA: 0x19E80DC Offset: 0x19E80DC VA: 0x19E80DC
	private void getMap() { }
}

// Namespace: 
public enum MapShakerComponent.ShakeType // TypeDefIndex: 11066
{
	// Fields
	public int value__; // 0x0
	public const MapShakerComponent.ShakeType RANDOM_COORDINATE = 0;
	public const MapShakerComponent.ShakeType FLAGED_RANDOM = 1;
	public const MapShakerComponent.ShakeType FREQUENTIZED_RANDOM = 2;
}

// Namespace: 
public class MapZoom // TypeDefIndex: 11067
{
	// Fields
	public static readonly float ZOOM_DEFAULT; // 0x0
	public static readonly float ZOOM_MIN; // 0x4
	public static readonly float ZOOM_BASE_MAX_X; // 0x8
	public static readonly float ZOOM_BASE_MAX_Y; // 0xC
	public static readonly float ZOOM_MARGIN; // 0x10
	private const int AcceptTouchCountMin = 2;
	private const int AcceptTouchCountMax = 2;
	private float mZoomMax; // 0x10
	private float mZoomRange; // 0x14
	private float mZoomMargin; // 0x18
	private MapCamera mMapCamera; // 0x20
	private float mTgt; // 0x28
	private float mSpd; // 0x2C
	private Camera mCamera; // 0x30
	private MapTouchDetector touchDetector; // 0x38
	private float startMTgt; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCE8E70 Offset: 0xCE8E70 VA: 0xCE8E70
	[DebuggerBrowsableAttribute] // RVA: 0xCE8E70 Offset: 0xCE8E70 VA: 0xCE8E70
	private bool <IsZoomMaxFit>k__BackingField; // 0x44
	[CompilerGeneratedAttribute] // RVA: 0xCE8EAC Offset: 0xCE8EAC VA: 0xCE8EAC
	[DebuggerBrowsableAttribute] // RVA: 0xCE8EAC Offset: 0xCE8EAC VA: 0xCE8EAC
	private bool <IsZoomMaxFitPosFix>k__BackingField; // 0x45
	private float mAutoZmStVal; // 0x48
	private float mAutoZmEdVal; // 0x4C
	private float mAutoZmTime; // 0x50
	private float mAutoZmDuration; // 0x54
	private Easing.TYPE mAutoZmEaseType; // 0x58
	private Action mAutoZmEndAct; // 0x60
	private bool mIsAutoZoom; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCE8EE8 Offset: 0xCE8EE8 VA: 0xCE8EE8
	[DebuggerBrowsableAttribute] // RVA: 0xCE8EE8 Offset: 0xCE8EE8 VA: 0xCE8EE8
	private float <UserTotalZoomAmount>k__BackingField; // 0x6C

	// Properties
	public float ZoomMargin { get; }
	public float ZoomMin { get; }
	public float ZoomMax { get; }
	public bool IsZoomMaxFit { get; set; }
	public bool IsZoomMaxFitPosFix { get; set; }
	public bool IsAutoZoom { get; }
	public float UserTotalZoomAmount { get; set; }

	// Methods

	// RVA: 0x19E8D80 Offset: 0x19E8D80 VA: 0x19E8D80
	public void .ctor() { }

	// RVA: 0x19E8D88 Offset: 0x19E8D88 VA: 0x19E8D88
	public float get_ZoomMargin() { }

	// RVA: 0x19E8D90 Offset: 0x19E8D90 VA: 0x19E8D90
	public float get_ZoomMin() { }

	// RVA: 0x19E8DF8 Offset: 0x19E8DF8 VA: 0x19E8DF8
	public float get_ZoomMax() { }

	// RVA: 0x19E8E00 Offset: 0x19E8E00 VA: 0x19E8E00
	public void SetZoomRate(float rate, bool xBaseUse) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D2C Offset: 0xD40D2C VA: 0xD40D2C
	// RVA: 0x19E8F10 Offset: 0x19E8F10 VA: 0x19E8F10
	public bool get_IsZoomMaxFit() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D3C Offset: 0xD40D3C VA: 0xD40D3C
	// RVA: 0x19E8F04 Offset: 0x19E8F04 VA: 0x19E8F04
	private void set_IsZoomMaxFit(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D4C Offset: 0xD40D4C VA: 0xD40D4C
	// RVA: 0x19E8F18 Offset: 0x19E8F18 VA: 0x19E8F18
	public bool get_IsZoomMaxFitPosFix() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D5C Offset: 0xD40D5C VA: 0xD40D5C
	// RVA: 0x19E8F20 Offset: 0x19E8F20 VA: 0x19E8F20
	private void set_IsZoomMaxFitPosFix(bool value) { }

	// RVA: 0x19E8F2C Offset: 0x19E8F2C VA: 0x19E8F2C
	public bool get_IsAutoZoom() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D6C Offset: 0xD40D6C VA: 0xD40D6C
	// RVA: 0x19E8F34 Offset: 0x19E8F34 VA: 0x19E8F34
	public float get_UserTotalZoomAmount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40D7C Offset: 0xD40D7C VA: 0xD40D7C
	// RVA: 0x19E8F3C Offset: 0x19E8F3C VA: 0x19E8F3C
	private void set_UserTotalZoomAmount(float value) { }

	// RVA: 0x19E8F44 Offset: 0x19E8F44 VA: 0x19E8F44
	public void Init(MapCamera mc, MapTouchDetector touchDetector) { }

	// RVA: 0x19E9120 Offset: 0x19E9120 VA: 0x19E9120
	public void UnInit() { }

	// RVA: 0x19E9230 Offset: 0x19E9230 VA: 0x19E9230
	public void Process() { }

	// RVA: 0x19E978C Offset: 0x19E978C VA: 0x19E978C
	public void StartAutoZoom(float zoom, float sec, Easing.TYPE easeType = 5, Action endAct) { }

	// RVA: 0x19E9758 Offset: 0x19E9758 VA: 0x19E9758
	public void ResetZoomMaxFlag() { }

	// RVA: 0x19E9770 Offset: 0x19E9770 VA: 0x19E9770
	public void Stop(bool is_force = False) { }

	// RVA: 0x19E9760 Offset: 0x19E9760 VA: 0x19E9760
	public bool IsStop() { }

	// RVA: 0x19E9548 Offset: 0x19E9548 VA: 0x19E9548
	private void Limit(float spd_rate) { }

	// RVA: 0x19E9518 Offset: 0x19E9518 VA: 0x19E9518
	public float GetZoomSize() { }

	// RVA: 0x19E912C Offset: 0x19E912C VA: 0x19E912C
	public void SetZoomSize(float size, bool is_tgt_update = False, bool ignoreMaxFlag = False) { }

	// RVA: 0x19E97F0 Offset: 0x19E97F0 VA: 0x19E97F0
	public float GetZoomRate() { }

	// RVA: 0x19E9618 Offset: 0x19E9618 VA: 0x19E9618
	private float CalcZoomByPinch() { }

	[ConditionalAttribute] // RVA: 0xD40D8C Offset: 0xD40D8C VA: 0xD40D8C
	// RVA: 0x19E98C8 Offset: 0x19E98C8 VA: 0x19E98C8
	private void MouseScrollWheel() { }

	// RVA: 0x19E9994 Offset: 0x19E9994 VA: 0x19E9994
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40DC4 Offset: 0xD40DC4 VA: 0xD40DC4
	// RVA: 0x19E9A30 Offset: 0x19E9A30 VA: 0x19E9A30
	private void <Init>m__0(int oldTouchCount, int newTouchCount) { }
}

// Namespace: 
public class PlayerStatusRaidPointComponent : MonoBehaviour // TypeDefIndex: 11068
{
	// Fields
	private static readonly int RAID_MARKDISP_STEP_DEFAULT; // 0x0
	private static readonly string[] RP_SPNAME_FRAME; // 0x8
	private static readonly string[] RP_SPNAME_NORMAL; // 0x10
	private static readonly string[] RP_SPNAME_OVER; // 0x18
	private static readonly int[] RP_OFFSET; // 0x20
	[SerializeField] // RVA: 0xCE8F24 Offset: 0xCE8F24 VA: 0xCE8F24
	private UISprite raidPointSp; // 0x18
	[SerializeField] // RVA: 0xCE8F34 Offset: 0xCE8F34 VA: 0xCE8F34
	private UISprite raidFrameSp; // 0x20
	[SerializeField] // RVA: 0xCE8F44 Offset: 0xCE8F44 VA: 0xCE8F44
	private UISprite markFrontSp; // 0x28
	[SerializeField] // RVA: 0xCE8F54 Offset: 0xCE8F54 VA: 0xCE8F54
	private UISprite markBackSp; // 0x30
	private int BpType; // 0x38

	// Methods

	// RVA: 0x1BD4934 Offset: 0x1BD4934 VA: 0x1BD4934
	public void .ctor() { }

	// RVA: 0x1BD493C Offset: 0x1BD493C VA: 0x1BD493C
	public void Setup(int index, int iBpType) { }

	// RVA: 0x1BD4C18 Offset: 0x1BD4C18 VA: 0x1BD4C18
	public void SetDispType(PlayerStatusRaidPointComponent.DispType dispType) { }

	// RVA: 0x1BD4E10 Offset: 0x1BD4E10 VA: 0x1BD4E10
	private static void .cctor() { }
}

// Namespace: 
public enum PlayerStatusRaidPointComponent.DispType // TypeDefIndex: 11069
{
	// Fields
	public int value__; // 0x0
	public const PlayerStatusRaidPointComponent.DispType EMPTY = 0;
	public const PlayerStatusRaidPointComponent.DispType NORMAL = 1;
	public const PlayerStatusRaidPointComponent.DispType OVER = 2;
}

// Namespace: 
public class QuestAfterAction : SingletonMonoBehaviour<QuestAfterAction> // TypeDefIndex: 11070
{
	// Fields
	public const float ANIM_TIME = 0.5;
	public const UITweener.Method ANIM_TWEEN_METHOD = 2;
	private const string MESSAGE_KEY_PREFIX = "QUEST_AFTER_ACTION_MESSAGE_";
	public const string AFTER_ACTION_QUEST_KEY = "afterActionBk";
	private const int NOTICE_WINDOW_DEPTH = 210;
	private const int NOTICE_OTHER_WINDOW_FONT_SIZE = 28;
	private const float NOTICE_OTHER_WINDOW_POSITION_Y = 40;
	private const float NOTICE_OTHER_WINDOW_BUTTON_Y = -162.5;
	private const int NOTICE_WINDOW_BOOST_SUPPOR_FONT_SIZE = 30;
	private const float NOTICE_WINDOW_BOOST_SUPPOR_POSITION_Y = 30;
	private List<int> invalidMapGimmickIdList; // 0x18
	private const int COMMAND_SIZE = 2;
	private QuestAfterAction.Command[] commandBuf; // 0x20
	private int commandIdx; // 0x28
	private Dictionary<QuestAfterAction.COMMAND_TYPE, List<int>> commandTypeIds; // 0x30
	private Dictionary<int, QuestAfterAction.VoiceInfo> svtVoices; // 0x38
	private CStateManager<QuestAfterAction> fsm; // 0x40
