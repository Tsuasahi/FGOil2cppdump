	// RVA: 0x1B371F0 Offset: 0x1B371F0 VA: 0x1B371F0
	public void .ctor() { }

	// RVA: 0x1B37240 Offset: 0x1B37240 VA: 0x1B37240 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B37254 Offset: 0x1B37254 VA: 0x1B37254
	public static string CreatePK(long userId, int svtId) { }
}

// Namespace: 
public class UserSvtCoinMaster : DataMasterBase<UserSvtCoinMaster, UserSvtCoinEntity, string> // TypeDefIndex: 7506
{
	// Methods

	// RVA: 0x1B37260 Offset: 0x1B37260 VA: 0x1B37260
	public void .ctor() { }

	// RVA: 0x1B372B4 Offset: 0x1B372B4 VA: 0x1B372B4
	public UserSvtCoinEntity GetEntity(long userId, int svtId) { }

	// RVA: 0x1B37328 Offset: 0x1B37328 VA: 0x1B37328
	public bool TryGetEntity(out UserSvtCoinEntity entity, long userId, int svtId) { }
}

// Namespace: 
public class ViewEnemyEntity : DataEntityBase<string> // TypeDefIndex: 7507
{
	// Fields
	private static readonly int SVT_ID_TO_ICON_ID; // 0x0
	public int questId; // 0x10
	public int enemyId; // 0x14
	public string name; // 0x18
	public int classId; // 0x20
	public int svtId; // 0x24
	public int limitCount; // 0x28
	public int iconId; // 0x2C
	public int displayType; // 0x30
	public int[] missionIds; // 0x38

	// Methods

	// RVA: 0x1B373C4 Offset: 0x1B373C4 VA: 0x1B373C4
	public void .ctor() { }

	// RVA: 0x1B37414 Offset: 0x1B37414 VA: 0x1B37414
	public void .ctor(ViewEnemyEntity old) { }

	// RVA: 0x1B3756C Offset: 0x1B3756C VA: 0x1B3756C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B375DC Offset: 0x1B375DC VA: 0x1B375DC
	public static string CreatePK(int questId, int enemyId) { }

	// RVA: 0x1B375EC Offset: 0x1B375EC VA: 0x1B375EC
	public bool IsIconIdUnique() { }

	// RVA: 0x1B3768C Offset: 0x1B3768C VA: 0x1B3768C
	public void IsMissionTarget(int questId, out QuestInformationListViewItem.MissionTargetState missionTargetState) { }

	// RVA: 0x1B37EB4 Offset: 0x1B37EB4 VA: 0x1B37EB4
	private bool IsAllEnableMissionTarget(QuestInformationListViewItem.MissionTargetState missionTargetState) { }

	// RVA: 0x1B37C94 Offset: 0x1B37C94 VA: 0x1B37C94
	private bool isMissionGoing(int id, UserEventMissionMaster usrEvMissionMst, EventMissionConditionMaster missionCondMst) { }

	// RVA: 0x1B37EE8 Offset: 0x1B37EE8 VA: 0x1B37EE8
	public string getBattleName() { }

	// RVA: 0x1B37E14 Offset: 0x1B37E14 VA: 0x1B37E14
	private bool isRandomMissionGoing(int missionId) { }

	// RVA: 0x1B37FF0 Offset: 0x1B37FF0 VA: 0x1B37FF0
	private static void .cctor() { }
}

// Namespace: 
public class ViewEnemyMaster : DataMasterBase<ViewEnemyMaster, ViewEnemyEntity, string> // TypeDefIndex: 7508
{
	// Methods

	// RVA: 0x1B38044 Offset: 0x1B38044 VA: 0x1B38044
	public void .ctor() { }

	// RVA: 0x1B38098 Offset: 0x1B38098 VA: 0x1B38098
	public ViewEnemyEntity GetEntity(int questId, int enemyId) { }

	// RVA: 0x1B3812C Offset: 0x1B3812C VA: 0x1B3812C
	public bool TryGetEntity(out ViewEnemyEntity entity, int questId, int enemyId) { }

	// RVA: 0x1B381D0 Offset: 0x1B381D0 VA: 0x1B381D0
	public ViewEnemyEntity getEntityFromId(int questId) { }

	// RVA: 0x1B382D0 Offset: 0x1B382D0 VA: 0x1B382D0
	public ViewEnemyEntity[] GetEntityListFromQuestId(int questId) { }
}

// Namespace: 
public class ViewQuestEnemyInfoEntity : DataEntityBase<int> // TypeDefIndex: 7509
{
	// Fields
	public int questId; // 0x10
	public int enemyNum; // 0x14

	// Methods

	// RVA: 0x1B38518 Offset: 0x1B38518 VA: 0x1B38518
	public void .ctor() { }

	// RVA: 0x1B38568 Offset: 0x1B38568 VA: 0x1B38568 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class ViewQuestEnemyInfoMaster : DataMasterBase<ViewQuestEnemyInfoMaster, ViewQuestEnemyInfoEntity, int> // TypeDefIndex: 7510
{
	// Methods

	// RVA: 0x1B38570 Offset: 0x1B38570 VA: 0x1B38570
	public void .ctor() { }

	// RVA: 0x1B385C4 Offset: 0x1B385C4 VA: 0x1B385C4
	public ViewQuestEnemyInfoEntity getEntityFromId(int questId) { }
}

// Namespace: 
public class ViewQuestInfoEntity : DataEntityBase<int> // TypeDefIndex: 7511
{
	// Fields
	public int questId; // 0x10
	public int dropSvtNum; // 0x14
	public int dropItemNum; // 0x18

	// Methods

	// RVA: 0x1B386C4 Offset: 0x1B386C4 VA: 0x1B386C4
	public void .ctor() { }

	// RVA: 0x1B38714 Offset: 0x1B38714 VA: 0x1B38714 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class ViewQuestInfoMaster : DataMasterBase<ViewQuestInfoMaster, ViewQuestInfoEntity, int> // TypeDefIndex: 7512
{
	// Methods

	// RVA: 0x1B3871C Offset: 0x1B3871C VA: 0x1B3871C
	public void .ctor() { }

	// RVA: 0x1B38770 Offset: 0x1B38770 VA: 0x1B38770
	public ViewQuestInfoEntity getEntityFromId(int questId) { }
}

// Namespace: 
public class VoiceClosedMessageEntity : DataEntityBase<int> // TypeDefIndex: 7513
{
	// Fields
	public int id; // 0x10
	public string message; // 0x18

	// Methods

	// RVA: 0x1B3A358 Offset: 0x1B3A358 VA: 0x1B3A358
	public void .ctor() { }

	// RVA: 0x1B3A3A8 Offset: 0x1B3A3A8 VA: 0x1B3A3A8 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class VoiceClosedMessageMaster : DataMasterBase<VoiceClosedMessageMaster, VoiceClosedMessageEntity, int> // TypeDefIndex: 7514
{
	// Methods

	// RVA: 0x1B3A3B0 Offset: 0x1B3A3B0 VA: 0x1B3A3B0
	public void .ctor() { }

	// RVA: 0x1B3A404 Offset: 0x1B3A404 VA: 0x1B3A404
	public string GetClosedMessage(int id) { }
}

// Namespace: 
public class VoiceCondEntity : DataEntityBase<string> // TypeDefIndex: 7515
{
	// Fields
	public ObscuredInt svtId; // 0x10
	public int voicePrefix; // 0x20
	public ObscuredString voiceId; // 0x28
	public int condType; // 0x30
	public int targetId; // 0x34
	public int condGroup; // 0x38
	public int condValue; // 0x3C
	public int priority; // 0x40
	public int closedType; // 0x44
	public int condPriority; // 0x48
	public int closedMessageId; // 0x4C

	// Methods

	// RVA: 0x1B3A4CC Offset: 0x1B3A4CC VA: 0x1B3A4CC
	public void .ctor() { }

	// RVA: 0x1B3A51C Offset: 0x1B3A51C VA: 0x1B3A51C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B3A5F0 Offset: 0x1B3A5F0 VA: 0x1B3A5F0
	public static string CreatePK(int svtId, int voicePrefix, string voiceId, int condType, int targetId, int condGroup) { }

	// RVA: 0x1B3A60C Offset: 0x1B3A60C VA: 0x1B3A60C
	public bool IsEnable(int svtId, int voicePrefix) { }
}

// Namespace: 
public class VoiceCondMaster : DataMasterBase<VoiceCondMaster, VoiceCondEntity, string> // TypeDefIndex: 7516
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1F74 Offset: 0xCC1F74 VA: 0xCC1F74
	private static Comparison<VoiceCondEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1B3A6CC Offset: 0x1B3A6CC VA: 0x1B3A6CC
	public void .ctor() { }

	// RVA: 0x1B3A720 Offset: 0x1B3A720 VA: 0x1B3A720
	public bool IsEnable(ref int closedType, int svtVoiceId, string voiceId, int voicePrefix, bool isMainResult, int svtId, ref string overwriteCloseMessage) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3810C Offset: 0xD3810C VA: 0xD3810C
	// RVA: 0x1B3AEA4 Offset: 0x1B3AEA4 VA: 0x1B3AEA4
	private static int <IsEnable>m__0(VoiceCondEntity a, VoiceCondEntity b) { }
}

// Namespace: 
public class VoiceEntity : DataEntityBase<string> // TypeDefIndex: 7517
{
	// Fields
	public ObscuredString id; // 0x10
	public int priority; // 0x18
	public int svtVoiceType; // 0x1C
	public ObscuredString name; // 0x20
	public ObscuredString nameDefault; // 0x28
	public int condType; // 0x30
	public int condValue; // 0x34
	public int voicePlayedValue; // 0x38
	public int firstPlayPriority; // 0x3C
	public int closedType; // 0x40
	public int flag; // 0x44

	// Methods

	// RVA: 0x1B3AFEC Offset: 0x1B3AFEC VA: 0x1B3AFEC
	public void .ctor() { }

	// RVA: 0x1B3B03C Offset: 0x1B3B03C VA: 0x1B3B03C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B3B0A8 Offset: 0x1B3B0A8 VA: 0x1B3B0A8
	public bool IsCondEnable(int svtId) { }

	// RVA: 0x1B3B22C Offset: 0x1B3B22C VA: 0x1B3B22C
	public bool IsHide() { }

	// RVA: 0x1B3B23C Offset: 0x1B3B23C VA: 0x1B3B23C
	public bool HasFlag(VoiceEntity.Flag typeFlag) { }
}

// Namespace: 
public enum VoiceEntity.Flag // TypeDefIndex: 7518
{
	// Fields
	public int value__; // 0x0
	public const VoiceEntity.Flag MATERIAL_OPEN = 2;
}

// Namespace: 
public class VoiceMaster : DataMasterBase<VoiceMaster, VoiceEntity, string> // TypeDefIndex: 7519
{
	// Methods

	// RVA: 0x1B3B27C Offset: 0x1B3B27C VA: 0x1B3B27C
	public void .ctor() { }

	// RVA: 0x1B3B2D0 Offset: 0x1B3B2D0 VA: 0x1B3B2D0
	public VoiceEntity getEntityFromId(string id) { }

	// RVA: 0x1B3B3E0 Offset: 0x1B3B3E0 VA: 0x1B3B3E0
	private bool isEnableBirthdayVoice(long userBirthDay, long createDay) { }

	// RVA: 0x1B3B758 Offset: 0x1B3B758 VA: 0x1B3B758
	public VoiceInfo[] getEnableInfo(int svtId, int changeSvtVoiceId, int limitCount, List<CondType.Kind> disableCondTypeList, bool isCheckPlayCond = True, bool isMaterial = False) { }

	// RVA: 0x1B3D1BC Offset: 0x1B3D1BC VA: 0x1B3D1BC
	public int getFlagRequestNumber(int svtId, string labelName, bool isUpdate = True) { }

	// RVA: 0x1B3D50C Offset: 0x1B3D50C VA: 0x1B3D50C
	public int getFirstPlayPriority(int svtId, string labelName) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEF70 Offset: 0xCAEF70 VA: 0xCAEF70
private sealed class VoiceMaster.<getEnableInfo>c__AnonStorey0 // TypeDefIndex: 7520
{
	// Fields
	internal UserServantCollectionEntity userStvCollectionEntity; // 0x10

	// Methods

	// RVA: 0x1B3D1B4 Offset: 0x1B3D1B4 VA: 0x1B3D1B4
	public void .ctor() { }

	// RVA: 0x1B3D748 Offset: 0x1B3D748 VA: 0x1B3D748
	internal bool <>m__0(int id) { }
}

// Namespace: 
public class VoiceMaterialCondEntity : DataEntityBase<string> // TypeDefIndex: 7521
{
	// Fields
	public ObscuredInt svtId; // 0x10
	public int voicePrefix; // 0x20
	public ObscuredString voiceId; // 0x28
	public int idx; // 0x30
	public int condGroup; // 0x34
	public int condType; // 0x38
	public int targetId; // 0x3C
	public int[] condValues; // 0x40

	// Methods

	// RVA: 0x1B3D7E0 Offset: 0x1B3D7E0 VA: 0x1B3D7E0
	public void .ctor() { }

	// RVA: 0x1B3D830 Offset: 0x1B3D830 VA: 0x1B3D830 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B3D900 Offset: 0x1B3D900 VA: 0x1B3D900
	public static string CreatePK(int svtId, int voicePrefix, string voiceId, int idx) { }

	// RVA: 0x1B3D914 Offset: 0x1B3D914 VA: 0x1B3D914
	public CondType.Kind getCondType() { }

	// RVA: 0x1B3D91C Offset: 0x1B3D91C VA: 0x1B3D91C
	public int getCondValue() { }
}

// Namespace: 
public class VoiceMaterialCondMaster : DataMasterBase<VoiceMaterialCondMaster, VoiceMaterialCondEntity, string> // TypeDefIndex: 7522
{
	// Methods

	// RVA: 0x1B3D988 Offset: 0x1B3D988 VA: 0x1B3D988
	public void .ctor() { }

	// RVA: 0x1B3D9DC Offset: 0x1B3D9DC VA: 0x1B3D9DC
	public List<VoiceMaterialCondEntity> GetEntityList(int servantId, int voicePrefix, string voiceId) { }

	// RVA: 0x1B3DCA0 Offset: 0x1B3DCA0 VA: 0x1B3DCA0
	public List<int> GetPlayableLimitCountList(int servantId, int voicePrefix, string voiceId) { }

	// RVA: 0x1B3DE4C Offset: 0x1B3DE4C VA: 0x1B3DE4C
	private int GetVoicePrefix(ref string voiceId) { }

	// RVA: 0x1B3DF4C Offset: 0x1B3DF4C VA: 0x1B3DF4C
	public bool IsVoicePlay(int svtId, int voicePrefix, string voiceId, int limitCount) { }
}

// Namespace: 
public class VoicePlayCondEntity : DataEntityBase<string> // TypeDefIndex: 7523
{
	// Fields
	public ObscuredInt svtId; // 0x10
	public int voicePrefix; // 0x20
	public ObscuredString voiceId; // 0x28
	public int idx; // 0x30
	public int condGroup; // 0x34
	public int condType; // 0x38
	public int targetId; // 0x3C
	public int[] condValues; // 0x40

	// Methods

	// RVA: 0x1B3E1A4 Offset: 0x1B3E1A4 VA: 0x1B3E1A4
	public void .ctor() { }

	// RVA: 0x1B3E1F4 Offset: 0x1B3E1F4 VA: 0x1B3E1F4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B3E2C4 Offset: 0x1B3E2C4 VA: 0x1B3E2C4
	public static string CreatePK(int svtId, int voicePrefix, string voiceId, int idx) { }

	// RVA: 0x1B3E2D8 Offset: 0x1B3E2D8 VA: 0x1B3E2D8
	public CondType.Kind getCondType() { }

	// RVA: 0x1B3E2E0 Offset: 0x1B3E2E0 VA: 0x1B3E2E0
	public int getCondValue() { }
}

// Namespace: 
public class VoicePlayCondMaster : DataMasterBase<VoicePlayCondMaster, VoicePlayCondEntity, string> // TypeDefIndex: 7524
{
	// Fields
	private static readonly int VOICE_PREFIX_NONE; // 0x0

	// Methods

	// RVA: 0x1B3E34C Offset: 0x1B3E34C VA: 0x1B3E34C
	public void .ctor() { }

	// RVA: 0x1B3E3A0 Offset: 0x1B3E3A0 VA: 0x1B3E3A0
	public bool isVoicePlay(int svtId, string voiceId, List<CondType.Kind> disableCondTypeList, long userSvtId = -1, int genderType = -1) { }

	// RVA: 0x1B3E98C Offset: 0x1B3E98C VA: 0x1B3E98C
	public bool isVoiceCond(int svtId, string voiceId, CondType.Kind cond) { }

	// RVA: 0x1B3E7AC Offset: 0x1B3E7AC VA: 0x1B3E7AC
	private bool IsNotPrefix(int svtId, string voiceId, int idx) { }

	// RVA: 0x1B3EBF8 Offset: 0x1B3EBF8 VA: 0x1B3EBF8
	private static void .cctor() { }
}

// Namespace: 
public class VoicePlayGroupEntity : DataEntityBase<string> // TypeDefIndex: 7525
{
	// Fields
	public ObscuredString id; // 0x10
	public int svtVoiceType; // 0x18

	// Methods

	// RVA: 0x1B3EC4C Offset: 0x1B3EC4C VA: 0x1B3EC4C
	public void .ctor() { }

	// RVA: 0x1B3EC9C Offset: 0x1B3EC9C VA: 0x1B3EC9C Slot: 5
	protected sealed override string CreatePrimaryKey() { }
}

// Namespace: 
public class VoicePlayGroupMaster : DataMasterBase<VoicePlayGroupMaster, VoicePlayGroupEntity, string> // TypeDefIndex: 7526
{
	// Methods

	// RVA: 0x1B3ED08 Offset: 0x1B3ED08 VA: 0x1B3ED08
	public void .ctor() { }

	// RVA: 0x1B3ED5C Offset: 0x1B3ED5C VA: 0x1B3ED5C
	public string[] getVoiceIDList(int voiceType) { }
}

// Namespace: 
public class VoiceReleaseEntity : DataEntityBase<string> // TypeDefIndex: 7527
{
	// Fields
	public ObscuredString voiceId; // 0x10
	public int condType; // 0x18
	public int condValue; // 0x1C

	// Methods

	// RVA: 0x1B3F020 Offset: 0x1B3F020 VA: 0x1B3F020
	public void .ctor() { }

	// RVA: 0x1B3F070 Offset: 0x1B3F070 VA: 0x1B3F070 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B3F0E8 Offset: 0x1B3F0E8 VA: 0x1B3F0E8
	public static string CreatePK(string voiceId, int condType) { }

	// RVA: 0x1B3F0F4 Offset: 0x1B3F0F4 VA: 0x1B3F0F4
	public bool IsCondEnable(int svtId) { }
}

// Namespace: 
public class VoiceReleaseMaster : DataMasterBase<VoiceReleaseMaster, VoiceReleaseEntity, string> // TypeDefIndex: 7528
{
	// Methods

	// RVA: 0x1B3F1AC Offset: 0x1B3F1AC VA: 0x1B3F1AC
	public void .ctor() { }

	// RVA: 0x1B3F200 Offset: 0x1B3F200 VA: 0x1B3F200
	public VoiceReleaseEntity[] GetEntitiyList(string voiceId) { }

	// RVA: 0x1B3B17C Offset: 0x1B3B17C VA: 0x1B3B17C
	public bool IsCondEnable(string voiceId, int svtId) { }
}

// Namespace: 
public class WarAddEntity : DataEntityBase<string> // TypeDefIndex: 7529
{
	// Fields
	public static readonly string BG_CHANGE_TYPE_KEY; // 0x0
	public static readonly string BG_CHANGE_TIME_KEY; // 0x8
	public static readonly string EVENT_TOWER_ID; // 0x10
	public int warId; // 0x10
	public int type; // 0x14
	public int priority; // 0x18
	public int overwriteId; // 0x1C
	public string overwriteStr; // 0x20
	public int condType; // 0x28
	public int targetId; // 0x2C
	public int value; // 0x30
	public long startedAt; // 0x38
	public long endedAt; // 0x40
	public Dictionary<string, object> script; // 0x48

	// Methods

	// RVA: 0x1B3F3B4 Offset: 0x1B3F3B4 VA: 0x1B3F3B4
	public void .ctor() { }

	// RVA: 0x1B3F404 Offset: 0x1B3F404 VA: 0x1B3F404 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1B3F484 Offset: 0x1B3F484 VA: 0x1B3F484
	public static string CreatePK(int warId, int type, int priority) { }

	// RVA: 0x1B3F498 Offset: 0x1B3F498 VA: 0x1B3F498
	public CondType.Kind GetCondType() { }

	// RVA: 0x1B3F4A0 Offset: 0x1B3F4A0 VA: 0x1B3F4A0
	public bool HasBGChange() { }

	// RVA: 0x1B3F534 Offset: 0x1B3F534 VA: 0x1B3F534
	public int getScript(string key, int defVal = 0) { }

	// RVA: 0x1B3F638 Offset: 0x1B3F638 VA: 0x1B3F638
	private static void .cctor() { }
}

// Namespace: 
public enum WarAddEntity.WarOverwriteType // TypeDefIndex: 7530
{
	// Fields
	public int value__; // 0x0
	public const WarAddEntity.WarOverwriteType BGM = 1;
	public const WarAddEntity.WarOverwriteType PARENT_WAR = 2;
	public const WarAddEntity.WarOverwriteType BANNER = 3;
	public const WarAddEntity.WarOverwriteType BG_IMAGE = 4;
	public const WarAddEntity.WarOverwriteType SVT_IMAGE = 5;
	public const WarAddEntity.WarOverwriteType FLAG = 6;
	public const WarAddEntity.WarOverwriteType BASE_MAP_ID = 7;
	public const WarAddEntity.WarOverwriteType NAME = 8;
	public const WarAddEntity.WarOverwriteType LONG_NAME = 9;
	public const WarAddEntity.WarOverwriteType MATERIAL_PARENT_WAR = 10;
	public const WarAddEntity.WarOverwriteType COORDINATES = 11;
	public const WarAddEntity.WarOverwriteType EFFECT_CHANGE_BLACK_MARK = 12;
	public const WarAddEntity.WarOverwriteType QUEST_BOARD_SECTION_IMAGE = 13;
	public const WarAddEntity.WarOverwriteType WAR_FORCE_DISP = 14;
	public const WarAddEntity.WarOverwriteType WAR_FORCE_HIDE = 15;
	public const WarAddEntity.WarOverwriteType START_TYPE = 16;
	public const WarAddEntity.WarOverwriteType NOTICE_DIALOG_TEXT = 17;
}

// Namespace: 
public class WarAddMaster : DataMasterBase<WarAddMaster, WarAddEntity, string> // TypeDefIndex: 7531
{
	// Methods

	// RVA: 0x1B3F6C0 Offset: 0x1B3F6C0 VA: 0x1B3F6C0
	public void .ctor() { }

	// RVA: 0x1B3F714 Offset: 0x1B3F714 VA: 0x1B3F714
	public WarAddEntity GetEntity(int warId, int type, int priority) { }

	// RVA: 0x1B3F7B8 Offset: 0x1B3F7B8 VA: 0x1B3F7B8
	public bool TryGetEntity(out WarAddEntity entity, int warId, int type, int priority) { }

	// RVA: 0x1B3F864 Offset: 0x1B3F864 VA: 0x1B3F864
	public WarAddEntity GetPrioredEntity(WarAddEntity.WarOverwriteType type, int warId) { }

	// RVA: 0x1B3FAA8 Offset: 0x1B3FAA8 VA: 0x1B3FAA8
	public int GetPrioredID(WarAddEntity.WarOverwriteType type, int warId, int defVal) { }

	// RVA: 0x1B3FAD4 Offset: 0x1B3FAD4 VA: 0x1B3FAD4
	public string GetPrioredStr(WarAddEntity.WarOverwriteType type, int warId, string defVal) { }

	// RVA: 0x1B3FB00 Offset: 0x1B3FB00 VA: 0x1B3FB00
	public int GetBGImageID(out WarAddEntity changeWarAdd, int warId, int beforeClearQuestId) { }

	// RVA: 0x1B3FF38 Offset: 0x1B3FF38 VA: 0x1B3FF38
	public int GetEventTowerBackGroundId(int warId, int type, int towerId) { }
}

// Namespace: 
public class WarBoardActionPointEntity : DataEntityBase<string> // TypeDefIndex: 7532
{
	// Fields
	public int stageId; // 0x10
	public int forceId; // 0x14
	public int groupId; // 0x18
	public int baseActionPoint; // 0x1C
	public int attackCost; // 0x20
	public int moveCost; // 0x24
	public int masterMoveCost; // 0x28
	public int itemCost; // 0x2C

	// Methods

	// RVA: 0x18DDF5C Offset: 0x18DDF5C VA: 0x18DDF5C
	public void .ctor() { }

	// RVA: 0x18DDFAC Offset: 0x18DDFAC VA: 0x18DDFAC Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x18DDFC0 Offset: 0x18DDFC0 VA: 0x18DDFC0
	public static string CreatePK(int stageId, int forceId, int groupId) { }
}

// Namespace: 
public class WarBoardActionPointMaster : DataMasterBase<WarBoardActionPointMaster, WarBoardActionPointEntity, string> // TypeDefIndex: 7533
{
	// Methods

	// RVA: 0x18DDFD4 Offset: 0x18DDFD4 VA: 0x18DDFD4
	public void .ctor() { }

	// RVA: 0x18DE028 Offset: 0x18DE028 VA: 0x18DE028
	public WarBoardActionPointEntity GetEntity(int stageId, int forceId, int groupId) { }

	// RVA: 0x18DE0AC Offset: 0x18DE0AC VA: 0x18DE0AC
	public bool TryGetEntity(out WarBoardActionPointEntity entity, int stageId, int forceId, int groupId) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3811C Offset: 0xD3811C VA: 0xD3811C
	// RVA: 0x18DE138 Offset: 0x18DE138 VA: 0x18DE138
	public IEnumerable<WarBoardActionPointEntity> GetWarBoardActionPointEntities(int stageId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEF80 Offset: 0xCAEF80 VA: 0xCAEF80
private sealed class WarBoardActionPointMaster.<GetWarBoardActionPointEntities>c__Iterator0 : IEnumerable, IEnumerable<WarBoardActionPointEntity>, IEnumerator, IDisposable, IEnumerator<WarBoardActionPointEntity> // TypeDefIndex: 7534
{
	// Fields
	internal int <count>__0; // 0x10
	internal int <i>__1; // 0x14
	internal WarBoardActionPointEntity <entity>__2; // 0x18
	internal int stageId; // 0x20
	internal WarBoardActionPointMaster $this; // 0x28
	internal WarBoardActionPointEntity $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private WarBoardActionPointEntity System.Collections.Generic.IEnumerator<WarBoardActionPointEntity>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46454 Offset: 0xD46454 VA: 0xD46454
	// RVA: 0x18DE1E4 Offset: 0x18DE1E4 VA: 0x18DE1E4
	public void .ctor() { }

	// RVA: 0x18DE1EC Offset: 0x18DE1EC VA: 0x18DE1EC Slot: 7
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46464 Offset: 0xD46464 VA: 0xD46464
	// RVA: 0x18DE398 Offset: 0x18DE398 VA: 0x18DE398 Slot: 10
	private WarBoardActionPointEntity System.Collections.Generic.IEnumerator<WarBoardActionPointEntity>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46474 Offset: 0xD46474 VA: 0xD46474
	// RVA: 0x18DE3A0 Offset: 0x18DE3A0 VA: 0x18DE3A0 Slot: 6
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46484 Offset: 0xD46484 VA: 0xD46484
	// RVA: 0x18DE3A8 Offset: 0x18DE3A8 VA: 0x18DE3A8 Slot: 9
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46494 Offset: 0xD46494 VA: 0xD46494
	// RVA: 0x18DE3BC Offset: 0x18DE3BC VA: 0x18DE3BC Slot: 8
	public void Reset() { }

	[DebuggerHiddenAttribute] // RVA: 0xD464A4 Offset: 0xD464A4 VA: 0xD464A4
	// RVA: 0x18DE424 Offset: 0x18DE424 VA: 0x18DE424 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[DebuggerHiddenAttribute] // RVA: 0xD464B4 Offset: 0xD464B4 VA: 0xD464B4
	// RVA: 0x18DE428 Offset: 0x18DE428 VA: 0x18DE428 Slot: 5
	private IEnumerator<WarBoardActionPointEntity> System.Collections.Generic.IEnumerable<WarBoardActionPointEntity>.GetEnumerator() { }
}

// Namespace: 
public class WarBoardActionTrendConditionEntity : DataEntityBase<int> // TypeDefIndex: 7535
{
	// Fields
	public int id; // 0x10
	public int[] conditionTypes; // 0x18
	public int value; // 0x20

	// Methods

	// RVA: 0x18DE4E8 Offset: 0x18DE4E8 VA: 0x18DE4E8
	public void .ctor() { }

	// RVA: 0x18DE55C Offset: 0x18DE55C VA: 0x18DE55C
	public void .ctor(WarBoardActionTrendConditionEntity cSrc) { }

	// RVA: 0x18DE60C Offset: 0x18DE60C VA: 0x18DE60C Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x18DE614 Offset: 0x18DE614 VA: 0x18DE614
	public WarBoardActionTrendConditionEntity.ConditionType GetConditionType(int conditionType) { }
}

// Namespace: 
public enum WarBoardActionTrendConditionEntity.ConditionType // TypeDefIndex: 7536
{
	// Fields
	public int value__; // 0x0
	public const WarBoardActionTrendConditionEntity.ConditionType ATTACK_RANGE = 1;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_ATTACK_RANGE = 2;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ATTACK_RANGE = 3;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_MOVE_BY_ATTACK_RANGE = 4;
	public const WarBoardActionTrendConditionEntity.ConditionType REPLACE = 5;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_REPLACE = 6;
	public const WarBoardActionTrendConditionEntity.ConditionType DEFENSE_AREA_ON_ENEMY = 7;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_DEFENSE_AREA_ENEMY = 8;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_DEFENSE_AREA_ON_ENEMY = 9;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_MOVE_BY_DEFENSE_AREA_ON_ENEMY = 10;
	public const WarBoardActionTrendConditionEntity.ConditionType DEFENSE_AREA_ON_MY_SERVANT = 11;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_DEFENSE_AREA_ON_MY_SERVANT = 12;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_DEFENSE_AREA_ON_MY_SERVANT = 13;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_MOVE_BY_DEFENSE_AREA_ON_MY_SERVANT = 14;
	public const WarBoardActionTrendConditionEntity.ConditionType BENEFIT_RANGE = 15;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_BENEFIT_RANGE = 16;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_BENEFIT_RANGE = 17;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_MOVE_BY_BENEFIT_RANGE = 18;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_CLASS_ADVANTAGE_SERVANT = 19;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_CLASS_ADVANTAGE_SERVANT = 20;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_CLASS_DIS_ADVANTAGE_SERVANT = 21;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_CLASS_DIS_ADVANTAGE_SERVANT = 22;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_DESIGNATION_ITEM = 23;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_DESIGNATION_ITEM = 24;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MASTER_AND_ENEMY_RANGE_APPROACH = 25;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MASTER_AND_ENEMY_RANGE_LEAVE = 26;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MASTER_AND_ENEMY_RANGE_NO_CHANGE = 27;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MY_SERVANT_AND_ENEMY_RANGE_APPROACH = 28;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MY_SERVANT_AND_ENEMY_RANGE_LEAVE = 29;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MY_SERVANT_AND_ENEMY_RANGE_NO_CHANGE = 30;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MY_SERVANT_AND_MASTER_RANGE_APPROACH = 31;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MY_SERVANT_AND_MASTER_RANGE_LEAVE = 32;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MY_SERVANT_AND_MASTER_RANGE_NO_CHANGE = 33;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_CLASS_ADVANTAGE_SERVANT_RANGE_APPROACH = 34;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_CLASS_ADVANTAGE_SERVANT_RANGE_LEAVE = 35;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_CLASS_ADVANTAGE_SERVANT_RANGE_NO_CHANGE = 36;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_CLASS_DIS_ADVANTAGE_SERVANT_RANGE_APPROACH = 37;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_CLASS_DIS_ADVANTAGE_SERVANT_RANGE_LEAVE = 38;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_CLASS_DIS_ADVANTAGE_SERVANT_RANGE_NO_CHANGE = 39;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DESIGNATION_ITEM_RANGE_APPROACH = 40;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DESIGNATION_ITEM_RANGE_LEAVE = 41;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DESIGNATION_ITEM_RANGE_NO_CHANGE = 42;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_ATTACK_ADVANTAGE_SERVANT = 43;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_ATTACK_ADVANTAGE_SERVANT = 44;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_ATTACK_DIS_ADVANTAGE_SERVANT = 45;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_ATTACK_DIS_ADVANTAGE_SERVANT = 46;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_DEFENSE_ADVANTAGE_SERVANT = 47;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_DEFENSE_ADVANTAGE_SERVANT = 48;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_DEFENSE_DIS_ADVANTAGE_SERVANT = 49;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_DEFENSE_DIS_ADVANTAGE_SERVANT = 50;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_ATTACK_ADVANTAGE_SERVANT_RANGE_APPROACH = 51;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_ATTACK_ADVANTAGE_SERVANT_RANGE_LEAVE = 52;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_ATTACK_ADVANTAGE_SERVANT_RANGE_NO_CHANGE = 53;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_ATTACK_DIS_ADVANTAGE_SERVANT_RANGE_APPROACH = 54;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_ATTACK_DIS_ADVANTAGE_SERVANT_RANGE_LEAVE = 55;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_ATTACK_DIS_ADVANTAGE_SERVANT_RANGE_NO_CHANGE = 56;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DEFENSE_ADVANTAGE_SERVANT_RANGE_APPROACH = 57;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DEFENSE_ADVANTAGE_SERVANT_RANGE_LEAVE = 58;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DEFENSE_ADVANTAGE_SERVANT_RANGE_NO_CHANGE = 59;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DEFENSE_DIS_ADVANTAGE_SERVANT_RANGE_APPROACH = 60;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DEFENSE_DIS_ADVANTAGE_SERVANT_RANGE_LEAVE = 61;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_SERVANT_AND_DEFENSE_DIS_ADVANTAGE_SERVANT_RANGE_NO_CHANGE = 62;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ATTACK_RQANGE_ENEMY_MASTER = 63;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_MOVE_BY_ATTACK_RQANGE_ENEMY_MASTER = 64;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ENEMY_MASTER_RANGE_APPROACH = 65;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ENEMY_MASTER_RANGE_LEAVE = 66;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ENEMY_MASTER_RANGE_NO_CHANGE = 67;
	public const WarBoardActionTrendConditionEntity.ConditionType ATTACK_MASTER = 68;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_ATTACK_MASTER = 69;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_TYPE = 70;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_COUNT_ON_THIS_TURN = 71;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_COUNT_ON_THIS_TURN_OVER = 72;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_COUNT_ON_THIS_TURN_UNDER = 73;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_TARGET = 74;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_TARGET = 75;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_TARGET_ENEMY = 76;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_NOT_TARGET_ENEMY = 77;
	public const WarBoardActionTrendConditionEntity.ConditionType AROUND_TARGET = 78;
	public const WarBoardActionTrendConditionEntity.ConditionType NOR_AROUND_TARGET = 79;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_TARGET_RANGE_APPROACH = 80;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_TARGET_RANGE_LEAVE = 81;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_TARGET_RANGE_NO_CHANGE = 82;
	public const WarBoardActionTrendConditionEntity.ConditionType DETOUR_TARGET_ROUTE = 83;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_DETOUR_TARGET_ROUTE = 84;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_USE_DRTOUR_TARGET_RANGE_APPROACH = 85;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_USE_DRTOUR_TARGET_RANGE_LEAVE = 86;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_USE_DRTOUR_TARGET_RANGE_NO_CHANGE = 87;
	public const WarBoardActionTrendConditionEntity.ConditionType ALLY_BLOCK_SHORTEST_ROUTE_ENEMY_AND_MASTER = 88;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_ALLY_BLOCK_SHORTEST_ROUTE_ENEMY_AND_MASTER = 89;
	public const WarBoardActionTrendConditionEntity.ConditionType MOBE_BY_ALLY_BLOCK_SHORTEST_ROUTE_ENEMY_AND_MASTER = 90;
	public const WarBoardActionTrendConditionEntity.ConditionType MOBE_BY_NOT_ALLY_BLOCK_SHORTEST_ROUTE_ENEMY_AND_MASTER = 91;
	public const WarBoardActionTrendConditionEntity.ConditionType ON_SHORTEST_ROUTE_ENEMY_AND_MASTER = 92;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_ON_SHORTEST_ROUTE_ENEMY_AND_MASTER = 93;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ON_SHORTEST_ROUTE_ENEMY_AND_MASTER = 94;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_NOT_ON_SHORTEST_ROUTE_ENEMY_AND_MASTER = 95;
	public const WarBoardActionTrendConditionEntity.ConditionType ENEMY_IN_SHORTEST_ROUTE_TARGET = 96;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_ENEMY_IN_SHORTEST_ROUTE_TARGET = 97;
	public const WarBoardActionTrendConditionEntity.ConditionType EXIST_ENEMY_IN_RANGE_UNDER = 98;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_EXIST_ENEMY_IN_RANGE_UNDER = 99;
	public const WarBoardActionTrendConditionEntity.ConditionType ATTACK_COUNT_ON_THIS_TURN = 100;
	public const WarBoardActionTrendConditionEntity.ConditionType ATTACK_COUNT_ON_THIS_TURN_OVER = 101;
	public const WarBoardActionTrendConditionEntity.ConditionType ATTACK_COUNT_ON_THIS_TURN_UNDER = 102;
	public const WarBoardActionTrendConditionEntity.ConditionType AROUND_ALLY_MASTER = 103;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_AROUND_ALLY_MASTER = 104;
	public const WarBoardActionTrendConditionEntity.ConditionType AROUND_ALLY_SERVANT = 105;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_AROUND_ALLY_SERVANT = 106;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_MASTER_ENEMY_SHORTEST_ROUTE_WITHIN_ALLY_SERVANT = 107;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_MOVE_BY_MASTER_ENEMY_SHORTEST_ROUTE_WITHIN_ALLY_SERVANT = 108;
	public const WarBoardActionTrendConditionEntity.ConditionType DEFENSE_AREA_WITHIN_ENEMY_ALL_BLOCK = 109;
	public const WarBoardActionTrendConditionEntity.ConditionType NOT_DEFENSE_AREA_WITHIN_ENEMY_ALL_BLOCK = 110;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_TARGET_ALLY = 111;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_NOT_TARGET_ALLY = 112;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_ON_DETOUR_ROUTE = 113;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_NOT_ON_DETOUR_ROUTE = 114;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_TYPE_ADVANCE = 115;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_TYPE_MIDDLE = 116;
	public const WarBoardActionTrendConditionEntity.ConditionType ACTION_TYPE_REAR = 117;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_ALL_DEFENSE_AREA_ENEMY_ROUTE_BLOCK = 118;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_NOT_ALL_DEFENSE_AREA_ENEMY_ROUTE_BLOCK = 119;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_COME_BACK_SQUARE = 120;
	public const WarBoardActionTrendConditionEntity.ConditionType IS_NOT_COME_BACK_SQUARE = 121;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_USE_DRTOUR_TARGET_RANGE_APPROACH_DRTOUR = 122;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_USE_DRTOUR_TARGET_RANGE_LEAVE_DRTOUR = 123;
	public const WarBoardActionTrendConditionEntity.ConditionType MOVE_BY_USE_DRTOUR_TARGET_RANGE_NO_CHANGE_DRTOUR = 124;
}

// Namespace: 
public class WarBoardActionTrendConditionMaster : DataMasterBase<WarBoardActionTrendConditionMaster, WarBoardActionTrendConditionEntity, int> // TypeDefIndex: 7537
{
	// Methods

	// RVA: 0x18DE61C Offset: 0x18DE61C VA: 0x18DE61C
	public void .ctor() { }
}

// Namespace: 
public class WarBoardActionTrendEntity : DataEntityBase<int> // TypeDefIndex: 7538
{
	// Fields
	public int id; // 0x10
	public int[] conditionIds; // 0x18
	public int viewPoint; // 0x20
	public int[] actionTypeIds; // 0x28
	public int attackValue; // 0x30
	public int moveValue; // 0x34

	// Methods

	// RVA: 0x18DE670 Offset: 0x18DE670 VA: 0x18DE670
	public void .ctor() { }

	// RVA: 0x18DE75C Offset: 0x18DE75C VA: 0x18DE75C
	public void .ctor(WarBoardActionTrendEntity cSrc) { }

	// RVA: 0x18DE860 Offset: 0x18DE860 VA: 0x18DE860 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x18DE868 Offset: 0x18DE868 VA: 0x18DE868
	public WarBoardActionTrendEntity.ActionType GetActionType(int attackTypeId) { }

	// RVA: 0x18DE870 Offset: 0x18DE870 VA: 0x18DE870
	public WarBoardRatingBaseEntity.Viewpoint GetViewPoint() { }

	// RVA: 0x18DE878 Offset: 0x18DE878 VA: 0x18DE878
	public float GetAttackValue() { }

	// RVA: 0x18DE890 Offset: 0x18DE890 VA: 0x18DE890
	public float GetMoveValue() { }
}

// Namespace: 
public enum WarBoardActionTrendEntity.ActionType // TypeDefIndex: 7539
{
	// Fields
	public int value__; // 0x0
	public const WarBoardActionTrendEntity.ActionType ATTACK = 1;
	public const WarBoardActionTrendEntity.ActionType MASTER_DEFENSE = 2;
}

// Namespace: 
public class WarBoardActionTrendMaster : DataMasterBase<WarBoardActionTrendMaster, WarBoardActionTrendEntity, int> // TypeDefIndex: 7540
{
	// Methods

	// RVA: 0x18DE8A8 Offset: 0x18DE8A8 VA: 0x18DE8A8
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIEntity : DataEntityBase<int> // TypeDefIndex: 7541
{
	// Fields
	public int id; // 0x10
	public int[] actionTrendIds; // 0x18
	public int[] ratingOffsetIds; // 0x20

	// Methods

	// RVA: 0x1B43BEC Offset: 0x1B43BEC VA: 0x1B43BEC
	public void .ctor() { }

	// RVA: 0x1B43C6C Offset: 0x1B43C6C VA: 0x1B43C6C Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class WarBoardAIMaster : DataMasterBase<WarBoardAIMaster, WarBoardAIEntity, int> // TypeDefIndex: 7542
{
	// Methods

	// RVA: 0x1B499EC Offset: 0x1B499EC VA: 0x1B499EC
	public void .ctor() { }
}

// Namespace: 
public class WarBoardDataEntity : DataEntityBase<string> // TypeDefIndex: 7543
{
	// Fields
	public WarBoardUserServantData[] svtInfo; // 0x10
	public WarBoardUserMasterData[] masterInfo; // 0x18
	public WarBoardUserGetItemData[] getItemInfo; // 0x20
	public WarBoardUserTreasureData[] treasureInfo; // 0x28
	public WarBoardDataEntity.WarBoardDeckData myDeck; // 0x30
	public WarBoardDataEntity.WarBoardDeckData enemyDeck; // 0x38
	public WarBoardDataEntity.WarBoardDeckData transformDeck; // 0x40
	public CommandCodeInfo[] userCommandCode; // 0x48
	public int userId; // 0x50
	public int turn; // 0x54
	public int progressType; // 0x58
	public int turnForceId; // 0x5C
	public int turnGroupId; // 0x60
	public int questId; // 0x64
	public int questPhase; // 0x68
	public int stageId; // 0x6C
	public int seed; // 0x70

	// Methods

	// RVA: 0x18EDAEC Offset: 0x18EDAEC VA: 0x18EDAEC
	public void .ctor() { }

	// RVA: 0x18EDB3C Offset: 0x18EDB3C VA: 0x18EDB3C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x18EDB4C Offset: 0x18EDB4C VA: 0x18EDB4C
	public static string CreatePK(int questId, int questPhase) { }
}

// Namespace: 
public enum WarBoardDataEntity.ProgressType // TypeDefIndex: 7544
{
	// Fields
	public int value__; // 0x0
	public const WarBoardDataEntity.ProgressType NORMAL = 1;
	public const WarBoardDataEntity.ProgressType BATTLE = 2;
	public const WarBoardDataEntity.ProgressType PREPARE = 3;
}

// Namespace: 
public class WarBoardDataEntity.WarBoardDeckData : DeckData // TypeDefIndex: 7545
{
	// Fields
	public int userEquipId; // 0x20

	// Methods

	// RVA: 0x18EDB5C Offset: 0x18EDB5C VA: 0x18EDB5C
	public void .ctor() { }
}

// Namespace: 
public class WarBoardDataMaster : DataMasterBase<WarBoardDataMaster, WarBoardDataEntity, string> // TypeDefIndex: 7546
{
	// Methods

	// RVA: 0x18EDB64 Offset: 0x18EDB64 VA: 0x18EDB64
	public void .ctor() { }

	// RVA: 0x18EDBB8 Offset: 0x18EDBB8 VA: 0x18EDBB8
	public WarBoardDataEntity GetEntity(int questId, int questPhase) { }

	// RVA: 0x18EDC2C Offset: 0x18EDC2C VA: 0x18EDC2C
	public bool TryGetEntity(out WarBoardDataEntity entity, int questId, int questPhase) { }
}

// Namespace: 
public class WarBoardEffectEntity : DataEntityBase<int> // TypeDefIndex: 7547
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
