	// RVA: 0x20E2368 Offset: 0x20E2368 VA: 0x20E2368 Slot: 12
	public void Reset(IMemoable other) { }

	// RVA: 0x20E2440 Offset: 0x20E2440 VA: 0x20E2440
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class MD4Digest : GeneralDigest // TypeDefIndex: 4641
{
	// Fields
	private const int DigestLength = 16;
	private int H1; // 0x28
	private int H2; // 0x2C
	private int H3; // 0x30
	private int H4; // 0x34
	private int[] X; // 0x38
	private int xOff; // 0x40
	private const int S11 = 3;
	private const int S12 = 7;
	private const int S13 = 11;
	private const int S14 = 19;
	private const int S21 = 3;
	private const int S22 = 5;
	private const int S23 = 9;
	private const int S24 = 13;
	private const int S31 = 3;
	private const int S32 = 9;
	private const int S33 = 11;
	private const int S34 = 15;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E24BC Offset: 0x20E24BC VA: 0x20E24BC
	public void .ctor() { }

	// RVA: 0x20E2528 Offset: 0x20E2528 VA: 0x20E2528
	public void .ctor(MD4Digest t) { }

	// RVA: 0x20E25A0 Offset: 0x20E25A0 VA: 0x20E25A0
	private void CopyIn(MD4Digest t) { }

	// RVA: 0x20E26B8 Offset: 0x20E26B8 VA: 0x20E26B8 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x20E2700 Offset: 0x20E2700 VA: 0x20E2700 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x20E2708 Offset: 0x20E2708 VA: 0x20E2708 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x20E287C Offset: 0x20E287C VA: 0x20E287C Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x20E2928 Offset: 0x20E2928 VA: 0x20E2928
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x20E2A18 Offset: 0x20E2A18 VA: 0x20E2A18 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20E2A9C Offset: 0x20E2A9C VA: 0x20E2A9C Slot: 13
	public override void Reset() { }

	// RVA: 0x20E2B34 Offset: 0x20E2B34 VA: 0x20E2B34
	private int RotateLeft(int x, int n) { }

	// RVA: 0x20E2B44 Offset: 0x20E2B44 VA: 0x20E2B44
	private int F(int u, int v, int w) { }

	// RVA: 0x20E2B54 Offset: 0x20E2B54 VA: 0x20E2B54
	private int G(int u, int v, int w) { }

	// RVA: 0x20E2B68 Offset: 0x20E2B68 VA: 0x20E2B68
	private int H(int u, int v, int w) { }

	// RVA: 0x20E2B74 Offset: 0x20E2B74 VA: 0x20E2B74 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x20E3A44 Offset: 0x20E3A44 VA: 0x20E3A44 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x20E3AA4 Offset: 0x20E3AA4 VA: 0x20E3AA4 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class MD5Digest : GeneralDigest // TypeDefIndex: 4642
{
	// Fields
	private const int DigestLength = 16;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint[] X; // 0x38
	private int xOff; // 0x40
	private static readonly int S11; // 0x0
	private static readonly int S12; // 0x4
	private static readonly int S13; // 0x8
	private static readonly int S14; // 0xC
	private static readonly int S21; // 0x10
	private static readonly int S22; // 0x14
	private static readonly int S23; // 0x18
	private static readonly int S24; // 0x1C
	private static readonly int S31; // 0x20
	private static readonly int S32; // 0x24
	private static readonly int S33; // 0x28
	private static readonly int S34; // 0x2C
	private static readonly int S41; // 0x30
	private static readonly int S42; // 0x34
	private static readonly int S43; // 0x38
	private static readonly int S44; // 0x3C

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E3B7C Offset: 0x20E3B7C VA: 0x20E3B7C
	public void .ctor() { }

	// RVA: 0x20E3BE8 Offset: 0x20E3BE8 VA: 0x20E3BE8
	public void .ctor(MD5Digest t) { }

	// RVA: 0x20E3C60 Offset: 0x20E3C60 VA: 0x20E3C60
	private void CopyIn(MD5Digest t) { }

	// RVA: 0x20E3D78 Offset: 0x20E3D78 VA: 0x20E3D78 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x20E3DC0 Offset: 0x20E3DC0 VA: 0x20E3DC0 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x20E3DC8 Offset: 0x20E3DC8 VA: 0x20E3DC8 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x20E3E6C Offset: 0x20E3E6C VA: 0x20E3E6C Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x20E3F90 Offset: 0x20E3F90 VA: 0x20E3F90 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20E4024 Offset: 0x20E4024 VA: 0x20E4024 Slot: 13
	public override void Reset() { }

	// RVA: 0x20E40BC Offset: 0x20E40BC VA: 0x20E40BC
	private static uint RotateLeft(uint x, int n) { }

	// RVA: 0x20E40CC Offset: 0x20E40CC VA: 0x20E40CC
	private static uint F(uint u, uint v, uint w) { }

	// RVA: 0x20E40DC Offset: 0x20E40DC VA: 0x20E40DC
	private static uint G(uint u, uint v, uint w) { }

	// RVA: 0x20E40EC Offset: 0x20E40EC VA: 0x20E40EC
	private static uint H(uint u, uint v, uint w) { }

	// RVA: 0x20E40F8 Offset: 0x20E40F8 VA: 0x20E40F8
	private static uint K(uint u, uint v, uint w) { }

	// RVA: 0x20E4104 Offset: 0x20E4104 VA: 0x20E4104 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x20E5C28 Offset: 0x20E5C28 VA: 0x20E5C28 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x20E5C88 Offset: 0x20E5C88 VA: 0x20E5C88 Slot: 21
	public override void Reset(IMemoable other) { }

	// RVA: 0x20E5D60 Offset: 0x20E5D60 VA: 0x20E5D60
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class NullDigest : IDigest // TypeDefIndex: 4643
{
	// Fields
	private readonly MemoryStream bOut; // 0x10

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E5E70 Offset: 0x20E5E70 VA: 0x20E5E70
	public void .ctor() { }

	// RVA: 0x20E5ED8 Offset: 0x20E5ED8 VA: 0x20E5ED8 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x20E5F20 Offset: 0x20E5F20 VA: 0x20E5F20 Slot: 6
	public int GetByteLength() { }

	// RVA: 0x20E5F28 Offset: 0x20E5F28 VA: 0x20E5F28 Slot: 5
	public int GetDigestSize() { }

	// RVA: 0x20E5F60 Offset: 0x20E5F60 VA: 0x20E5F60 Slot: 7
	public void Update(byte b) { }

	// RVA: 0x20E5FA0 Offset: 0x20E5FA0 VA: 0x20E5FA0 Slot: 8
	public void BlockUpdate(byte[] inBytes, int inOff, int len) { }

	// RVA: 0x20E5FF8 Offset: 0x20E5FF8 VA: 0x20E5FF8 Slot: 9
	public int DoFinal(byte[] outBytes, int outOff) { }

	// RVA: 0x20E60A0 Offset: 0x20E60A0 VA: 0x20E60A0 Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD128Digest : GeneralDigest // TypeDefIndex: 4644
{
	// Fields
	private const int DigestLength = 16;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int[] X; // 0x38
	private int xOff; // 0x40

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E60DC Offset: 0x20E60DC VA: 0x20E60DC
	public void .ctor() { }

	// RVA: 0x20E6148 Offset: 0x20E6148 VA: 0x20E6148
	public void .ctor(RipeMD128Digest t) { }

	// RVA: 0x20E61C0 Offset: 0x20E61C0 VA: 0x20E61C0
	private void CopyIn(RipeMD128Digest t) { }

	// RVA: 0x20E62D8 Offset: 0x20E62D8 VA: 0x20E62D8 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x20E6320 Offset: 0x20E6320 VA: 0x20E6320 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x20E6328 Offset: 0x20E6328 VA: 0x20E6328 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x20E649C Offset: 0x20E649C VA: 0x20E649C Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x20E6548 Offset: 0x20E6548 VA: 0x20E6548
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x20E6638 Offset: 0x20E6638 VA: 0x20E6638 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20E66BC Offset: 0x20E66BC VA: 0x20E66BC Slot: 13
	public override void Reset() { }

	// RVA: 0x20E6754 Offset: 0x20E6754 VA: 0x20E6754
	private int RL(int x, int n) { }

	// RVA: 0x20E6764 Offset: 0x20E6764 VA: 0x20E6764
	private int F1(int x, int y, int z) { }

	// RVA: 0x20E6770 Offset: 0x20E6770 VA: 0x20E6770
	private int F2(int x, int y, int z) { }

	// RVA: 0x20E6780 Offset: 0x20E6780 VA: 0x20E6780
	private int F3(int x, int y, int z) { }

	// RVA: 0x20E678C Offset: 0x20E678C VA: 0x20E678C
	private int F4(int x, int y, int z) { }

	// RVA: 0x20E679C Offset: 0x20E679C VA: 0x20E679C
	private int F1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E67BC Offset: 0x20E67BC VA: 0x20E67BC
	private int F2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E67EC Offset: 0x20E67EC VA: 0x20E67EC
	private int F3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E6818 Offset: 0x20E6818 VA: 0x20E6818
	private int F4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E6848 Offset: 0x20E6848 VA: 0x20E6848
	private int FF1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E6868 Offset: 0x20E6868 VA: 0x20E6868
	private int FF2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E6898 Offset: 0x20E6898 VA: 0x20E6898
	private int FF3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E68C4 Offset: 0x20E68C4 VA: 0x20E68C4
	private int FF4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x20E68F4 Offset: 0x20E68F4 VA: 0x20E68F4 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x20E9380 Offset: 0x20E9380 VA: 0x20E9380 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x20E93E0 Offset: 0x20E93E0 VA: 0x20E93E0 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD160Digest : GeneralDigest // TypeDefIndex: 4645
{
	// Fields
	private const int DigestLength = 20;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int H4; // 0x38
	private int[] X; // 0x40
	private int xOff; // 0x48

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E94B8 Offset: 0x20E94B8 VA: 0x20E94B8
	public void .ctor() { }

	// RVA: 0x20E9524 Offset: 0x20E9524 VA: 0x20E9524
	public void .ctor(RipeMD160Digest t) { }

	// RVA: 0x20E959C Offset: 0x20E959C VA: 0x20E959C
	private void CopyIn(RipeMD160Digest t) { }

	// RVA: 0x20E96D0 Offset: 0x20E96D0 VA: 0x20E96D0 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x20E9718 Offset: 0x20E9718 VA: 0x20E9718 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x20E9720 Offset: 0x20E9720 VA: 0x20E9720 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x20E9894 Offset: 0x20E9894 VA: 0x20E9894 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x20E9940 Offset: 0x20E9940 VA: 0x20E9940
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x20E9A30 Offset: 0x20E9A30 VA: 0x20E9A30 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20E9AC4 Offset: 0x20E9AC4 VA: 0x20E9AC4 Slot: 13
	public override void Reset() { }

	// RVA: 0x20E9B68 Offset: 0x20E9B68 VA: 0x20E9B68
	private int RL(int x, int n) { }

	// RVA: 0x20E9B78 Offset: 0x20E9B78 VA: 0x20E9B78
	private int F1(int x, int y, int z) { }

	// RVA: 0x20E9B84 Offset: 0x20E9B84 VA: 0x20E9B84
	private int F2(int x, int y, int z) { }

	// RVA: 0x20E9B94 Offset: 0x20E9B94 VA: 0x20E9B94
	private int F3(int x, int y, int z) { }

	// RVA: 0x20E9BA0 Offset: 0x20E9BA0 VA: 0x20E9BA0
	private int F4(int x, int y, int z) { }

	// RVA: 0x20E9BB0 Offset: 0x20E9BB0 VA: 0x20E9BB0
	private int F5(int x, int y, int z) { }

	// RVA: 0x20E9BBC Offset: 0x20E9BBC VA: 0x20E9BBC Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x20EDD44 Offset: 0x20EDD44 VA: 0x20EDD44 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x20EDDA4 Offset: 0x20EDDA4 VA: 0x20EDDA4 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD256Digest : GeneralDigest // TypeDefIndex: 4646
{
	// Fields
	private const int DigestLength = 32;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int H4; // 0x38
	private int H5; // 0x3C
	private int H6; // 0x40
	private int H7; // 0x44
	private int[] X; // 0x48
	private int xOff; // 0x50

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x200ECAC Offset: 0x200ECAC VA: 0x200ECAC
	public void .ctor() { }

	// RVA: 0x200ED1C Offset: 0x200ED1C VA: 0x200ED1C
	public void .ctor(RipeMD256Digest t) { }

	// RVA: 0x200EF24 Offset: 0x200EF24 VA: 0x200EF24 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x200EF6C Offset: 0x200EF6C VA: 0x200EF6C Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x200ED98 Offset: 0x200ED98 VA: 0x200ED98
	private void CopyIn(RipeMD256Digest t) { }

	// RVA: 0x200EF74 Offset: 0x200EF74 VA: 0x200EF74 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x200F0E8 Offset: 0x200F0E8 VA: 0x200F0E8 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x200F194 Offset: 0x200F194 VA: 0x200F194
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x200F284 Offset: 0x200F284 VA: 0x200F284 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x200F34C Offset: 0x200F34C VA: 0x200F34C Slot: 13
	public override void Reset() { }

	// RVA: 0x200F3F4 Offset: 0x200F3F4 VA: 0x200F3F4
	private int RL(int x, int n) { }

	// RVA: 0x200F404 Offset: 0x200F404 VA: 0x200F404
	private int F1(int x, int y, int z) { }

	// RVA: 0x200F410 Offset: 0x200F410 VA: 0x200F410
	private int F2(int x, int y, int z) { }

	// RVA: 0x200F420 Offset: 0x200F420 VA: 0x200F420
	private int F3(int x, int y, int z) { }

	// RVA: 0x200F42C Offset: 0x200F42C VA: 0x200F42C
	private int F4(int x, int y, int z) { }

	// RVA: 0x200F43C Offset: 0x200F43C VA: 0x200F43C
	private int F1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F45C Offset: 0x200F45C VA: 0x200F45C
	private int F2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F48C Offset: 0x200F48C VA: 0x200F48C
	private int F3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F4B8 Offset: 0x200F4B8 VA: 0x200F4B8
	private int F4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F4E8 Offset: 0x200F4E8 VA: 0x200F4E8
	private int FF1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F508 Offset: 0x200F508 VA: 0x200F508
	private int FF2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F538 Offset: 0x200F538 VA: 0x200F538
	private int FF3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F564 Offset: 0x200F564 VA: 0x200F564
	private int FF4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x200F594 Offset: 0x200F594 VA: 0x200F594 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2012144 Offset: 0x2012144 VA: 0x2012144 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x20121A4 Offset: 0x20121A4 VA: 0x20121A4 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD320Digest : GeneralDigest // TypeDefIndex: 4647
{
	// Fields
	private const int DigestLength = 40;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int H4; // 0x38
	private int H5; // 0x3C
	private int H6; // 0x40
	private int H7; // 0x44
	private int H8; // 0x48
	private int H9; // 0x4C
	private int[] X; // 0x50
	private int xOff; // 0x58

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x201227C Offset: 0x201227C VA: 0x201227C
	public void .ctor() { }

	// RVA: 0x20122EC Offset: 0x20122EC VA: 0x20122EC
	public void .ctor(RipeMD320Digest t) { }

	// RVA: 0x201252C Offset: 0x201252C VA: 0x201252C Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x2012574 Offset: 0x2012574 VA: 0x2012574 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x2012368 Offset: 0x2012368 VA: 0x2012368
	private void CopyIn(RipeMD320Digest t) { }

	// RVA: 0x201257C Offset: 0x201257C VA: 0x201257C Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x20126F0 Offset: 0x20126F0 VA: 0x20126F0 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x201279C Offset: 0x201279C VA: 0x201279C
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x201288C Offset: 0x201288C VA: 0x201288C Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x2012974 Offset: 0x2012974 VA: 0x2012974 Slot: 13
	public override void Reset() { }

	// RVA: 0x2012A30 Offset: 0x2012A30 VA: 0x2012A30
	private int RL(int x, int n) { }

	// RVA: 0x2012A40 Offset: 0x2012A40 VA: 0x2012A40
	private int F1(int x, int y, int z) { }

	// RVA: 0x2012A4C Offset: 0x2012A4C VA: 0x2012A4C
	private int F2(int x, int y, int z) { }

	// RVA: 0x2012A5C Offset: 0x2012A5C VA: 0x2012A5C
	private int F3(int x, int y, int z) { }

	// RVA: 0x2012A68 Offset: 0x2012A68 VA: 0x2012A68
	private int F4(int x, int y, int z) { }

	// RVA: 0x2012A78 Offset: 0x2012A78 VA: 0x2012A78
	private int F5(int x, int y, int z) { }

	// RVA: 0x2012A84 Offset: 0x2012A84 VA: 0x2012A84 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2016AC0 Offset: 0x2016AC0 VA: 0x2016AC0 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x2016B20 Offset: 0x2016B20 VA: 0x2016B20 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha1Digest : GeneralDigest // TypeDefIndex: 4648
{
	// Fields
	private const int DigestLength = 20;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint H5; // 0x38
	private uint[] X; // 0x40
	private int xOff; // 0x48
	private const uint Y1 = 1518500249;
	private const uint Y2 = 1859775393;
	private const uint Y3 = 2400959708;
	private const uint Y4 = 3395469782;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x2016BF8 Offset: 0x2016BF8 VA: 0x2016BF8
	public void .ctor() { }

	// RVA: 0x2016C68 Offset: 0x2016C68 VA: 0x2016C68
	public void .ctor(Sha1Digest t) { }

	// RVA: 0x2016CE4 Offset: 0x2016CE4 VA: 0x2016CE4
	private void CopyIn(Sha1Digest t) { }

	// RVA: 0x2016E1C Offset: 0x2016E1C VA: 0x2016E1C Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x2016E64 Offset: 0x2016E64 VA: 0x2016E64 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x2016E6C Offset: 0x2016E6C VA: 0x2016E6C Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x2016F10 Offset: 0x2016F10 VA: 0x2016F10 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x2016FBC Offset: 0x2016FBC VA: 0x2016FBC Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x2017068 Offset: 0x2017068 VA: 0x2017068 Slot: 13
	public override void Reset() { }

	// RVA: 0x20170C8 Offset: 0x20170C8 VA: 0x20170C8
	private static uint F(uint u, uint v, uint w) { }

	// RVA: 0x20170D8 Offset: 0x20170D8 VA: 0x20170D8
	private static uint H(uint u, uint v, uint w) { }

	// RVA: 0x20170E4 Offset: 0x20170E4 VA: 0x20170E4
	private static uint G(uint u, uint v, uint w) { }

	// RVA: 0x20170F8 Offset: 0x20170F8 VA: 0x20170F8 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2017BF0 Offset: 0x2017BF0 VA: 0x2017BF0 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x2017C50 Offset: 0x2017C50 VA: 0x2017C50 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha224Digest : GeneralDigest // TypeDefIndex: 4649
{
	// Fields
	private const int DigestLength = 28;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint H5; // 0x38
	private uint H6; // 0x3C
	private uint H7; // 0x40
	private uint H8; // 0x44
	private uint[] X; // 0x48
	private int xOff; // 0x50
	internal static readonly uint[] K; // 0x0

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x2017D28 Offset: 0x2017D28 VA: 0x2017D28
	public void .ctor() { }

	// RVA: 0x2017D98 Offset: 0x2017D98 VA: 0x2017D98
	public void .ctor(Sha224Digest t) { }

	// RVA: 0x2017E14 Offset: 0x2017E14 VA: 0x2017E14
	private void CopyIn(Sha224Digest t) { }

	// RVA: 0x2017FA0 Offset: 0x2017FA0 VA: 0x2017FA0 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x2017FE8 Offset: 0x2017FE8 VA: 0x2017FE8 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x2017FF0 Offset: 0x2017FF0 VA: 0x2017FF0 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x2018094 Offset: 0x2018094 VA: 0x2018094 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x2018140 Offset: 0x2018140 VA: 0x2018140 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x2018214 Offset: 0x2018214 VA: 0x2018214 Slot: 13
	public override void Reset() { }

	// RVA: 0x2018274 Offset: 0x2018274 VA: 0x2018274 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2018D14 Offset: 0x2018D14 VA: 0x2018D14
	private static uint Ch(uint x, uint y, uint z) { }

	// RVA: 0x2018D34 Offset: 0x2018D34 VA: 0x2018D34
	private static uint Maj(uint x, uint y, uint z) { }

	// RVA: 0x2018D24 Offset: 0x2018D24 VA: 0x2018D24
	private static uint Sum0(uint x) { }

	// RVA: 0x2018D04 Offset: 0x2018D04 VA: 0x2018D04
	private static uint Sum1(uint x) { }

	// RVA: 0x2018CF4 Offset: 0x2018CF4 VA: 0x2018CF4
	private static uint Theta0(uint x) { }

	// RVA: 0x2018CE4 Offset: 0x2018CE4 VA: 0x2018CE4
	private static uint Theta1(uint x) { }

	// RVA: 0x2018D48 Offset: 0x2018D48 VA: 0x2018D48 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x2018DA8 Offset: 0x2018DA8 VA: 0x2018DA8 Slot: 21
	public override void Reset(IMemoable other) { }

	// RVA: 0x2018E80 Offset: 0x2018E80 VA: 0x2018E80
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha256Digest : GeneralDigest // TypeDefIndex: 4650
{
	// Fields
	private const int DigestLength = 32;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint H5; // 0x38
	private uint H6; // 0x3C
	private uint H7; // 0x40
	private uint H8; // 0x44
	private uint[] X; // 0x48
	private int xOff; // 0x50
	private static readonly uint[] K; // 0x0

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x2018EFC Offset: 0x2018EFC VA: 0x2018EFC
	public void .ctor() { }

	// RVA: 0x2018F94 Offset: 0x2018F94 VA: 0x2018F94
	public void .ctor(Sha256Digest t) { }

	// RVA: 0x2019010 Offset: 0x2019010 VA: 0x2019010
	private void CopyIn(Sha256Digest t) { }

	// RVA: 0x201919C Offset: 0x201919C VA: 0x201919C Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x20191E4 Offset: 0x20191E4 VA: 0x20191E4 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x20191EC Offset: 0x20191EC VA: 0x20191EC Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x2019290 Offset: 0x2019290 VA: 0x2019290 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x201933C Offset: 0x201933C VA: 0x201933C Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x2019424 Offset: 0x2019424 VA: 0x2019424 Slot: 13
	public override void Reset() { }

	// RVA: 0x2018F78 Offset: 0x2018F78 VA: 0x2018F78
	private void initHs() { }

	// RVA: 0x2019484 Offset: 0x2019484 VA: 0x2019484 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2019F14 Offset: 0x2019F14 VA: 0x2019F14
	private static uint Sum1Ch(uint x, uint y, uint z) { }

	// RVA: 0x2019F34 Offset: 0x2019F34 VA: 0x2019F34
	private static uint Sum0Maj(uint x, uint y, uint z) { }

	// RVA: 0x2019F04 Offset: 0x2019F04 VA: 0x2019F04
	private static uint Theta0(uint x) { }

	// RVA: 0x2019EF4 Offset: 0x2019EF4 VA: 0x2019EF4
	private static uint Theta1(uint x) { }

	// RVA: 0x2019F58 Offset: 0x2019F58 VA: 0x2019F58 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x2019FB8 Offset: 0x2019FB8 VA: 0x2019FB8 Slot: 21
	public override void Reset(IMemoable other) { }

	// RVA: 0x201A090 Offset: 0x201A090 VA: 0x201A090
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha384Digest : LongDigest // TypeDefIndex: 4651
{
	// Fields
	private const int DigestLength = 48;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x201A10C Offset: 0x201A10C VA: 0x201A10C
	public void .ctor() { }

	// RVA: 0x201A174 Offset: 0x201A174 VA: 0x201A174
	public void .ctor(Sha384Digest t) { }

	// RVA: 0x201A1EC Offset: 0x201A1EC VA: 0x201A1EC Slot: 14
	public override string get_AlgorithmName() { }

	// RVA: 0x201A234 Offset: 0x201A234 VA: 0x201A234 Slot: 15
	public override int GetDigestSize() { }

	// RVA: 0x201A23C Offset: 0x201A23C VA: 0x201A23C Slot: 16
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x201A2FC Offset: 0x201A2FC VA: 0x201A2FC Slot: 13
	public override void Reset() { }

	// RVA: 0x201A350 Offset: 0x201A350 VA: 0x201A350 Slot: 17
	public override IMemoable Copy() { }

	// RVA: 0x201A3B0 Offset: 0x201A3B0 VA: 0x201A3B0 Slot: 18
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha3Digest : KeccakDigest // TypeDefIndex: 4652
{
	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x201A48C Offset: 0x201A48C VA: 0x201A48C
	public void .ctor() { }

	// RVA: 0x201A494 Offset: 0x201A494 VA: 0x201A494
	public void .ctor(int bitLength) { }

	// RVA: 0x201A634 Offset: 0x201A634 VA: 0x201A634
	public void .ctor(Sha3Digest source) { }

	// RVA: 0x201A51C Offset: 0x201A51C VA: 0x201A51C
	private static int CheckBitLength(int bitLength) { }

	// RVA: 0x201A6AC Offset: 0x201A6AC VA: 0x201A6AC Slot: 13
	public override string get_AlgorithmName() { }

	// RVA: 0x201A750 Offset: 0x201A750 VA: 0x201A750 Slot: 17
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x201A810 Offset: 0x201A810 VA: 0x201A810 Slot: 18
	protected override int DoFinal(byte[] output, int outOff, byte partialByte, int partialBits) { }

	// RVA: 0x201A968 Offset: 0x201A968 VA: 0x201A968 Slot: 23
	public override IMemoable Copy() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha512Digest : LongDigest // TypeDefIndex: 4653
{
	// Fields
	private const int DigestLength = 64;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x201A9C8 Offset: 0x201A9C8 VA: 0x201A9C8
	public void .ctor() { }

	// RVA: 0x201AA30 Offset: 0x201AA30 VA: 0x201AA30
	public void .ctor(Sha512Digest t) { }

	// RVA: 0x201AAA8 Offset: 0x201AAA8 VA: 0x201AAA8 Slot: 14
	public override string get_AlgorithmName() { }

	// RVA: 0x201AAF0 Offset: 0x201AAF0 VA: 0x201AAF0 Slot: 15
	public override int GetDigestSize() { }

	// RVA: 0x201AAF8 Offset: 0x201AAF8 VA: 0x201AAF8 Slot: 16
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x201ABE0 Offset: 0x201ABE0 VA: 0x201ABE0 Slot: 13
	public override void Reset() { }

	// RVA: 0x201AC34 Offset: 0x201AC34 VA: 0x201AC34 Slot: 17
	public override IMemoable Copy() { }

	// RVA: 0x201AC94 Offset: 0x201AC94 VA: 0x201AC94 Slot: 18
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha512tDigest : LongDigest // TypeDefIndex: 4654
{
	// Fields
	private const ulong A5 = 11936128518282651045;
	private readonly int digestLength; // 0x84
	private ulong H1t; // 0x88
	private ulong H2t; // 0x90
	private ulong H3t; // 0x98
	private ulong H4t; // 0xA0
	private ulong H5t; // 0xA8
	private ulong H6t; // 0xB0
	private ulong H7t; // 0xB8
	private ulong H8t; // 0xC0

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x201AD70 Offset: 0x201AD70 VA: 0x201AD70
	public void .ctor(int bitLength) { }

	// RVA: 0x201B05C Offset: 0x201B05C VA: 0x201B05C
	public void .ctor(Sha512tDigest t) { }

	// RVA: 0x201B100 Offset: 0x201B100 VA: 0x201B100 Slot: 14
	public override string get_AlgorithmName() { }

	// RVA: 0x201B1A8 Offset: 0x201B1A8 VA: 0x201B1A8 Slot: 15
	public override int GetDigestSize() { }

	// RVA: 0x201B1B0 Offset: 0x201B1B0 VA: 0x201B1B0 Slot: 16
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x201B328 Offset: 0x201B328 VA: 0x201B328 Slot: 13
	public override void Reset() { }

	// RVA: 0x201AECC Offset: 0x201AECC VA: 0x201AECC
	private void tIvGenerate(int bitLength) { }

	// RVA: 0x201B2B4 Offset: 0x201B2B4 VA: 0x201B2B4
	private static void UInt64_To_BE(ulong n, byte[] bs, int off, int max) { }

	// RVA: 0x201B36C Offset: 0x201B36C VA: 0x201B36C
	private static void UInt32_To_BE(uint n, byte[] bs, int off, int max) { }

	// RVA: 0x201B410 Offset: 0x201B410 VA: 0x201B410 Slot: 17
	public override IMemoable Copy() { }

	// RVA: 0x201B470 Offset: 0x201B470 VA: 0x201B470 Slot: 18
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class ShakeDigest : KeccakDigest, IXof, IDigest // TypeDefIndex: 4655
{
	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x201B5E4 Offset: 0x201B5E4 VA: 0x201B5E4
	public void .ctor() { }

	// RVA: 0x201B5EC Offset: 0x201B5EC VA: 0x201B5EC
	public void .ctor(int bitLength) { }

	// RVA: 0x201B778 Offset: 0x201B778 VA: 0x201B778
	public void .ctor(ShakeDigest source) { }

	// RVA: 0x201B674 Offset: 0x201B674 VA: 0x201B674
	private static int CheckBitLength(int bitLength) { }

	// RVA: 0x201B7F0 Offset: 0x201B7F0 VA: 0x201B7F0 Slot: 13
	public override string get_AlgorithmName() { }

	// RVA: 0x201B894 Offset: 0x201B894 VA: 0x201B894 Slot: 17
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x201B8F0 Offset: 0x201B8F0 VA: 0x201B8F0 Slot: 27
	public virtual int DoFinal(byte[] output, int outOff, int outLen) { }

	// RVA: 0x201B938 Offset: 0x201B938 VA: 0x201B938 Slot: 28
	public virtual int DoOutput(byte[] output, int outOff, int outLen) { }

	// RVA: 0x201BA20 Offset: 0x201BA20 VA: 0x201BA20 Slot: 18
	protected override int DoFinal(byte[] output, int outOff, byte partialByte, int partialBits) { }

	// RVA: 0x201BA94 Offset: 0x201BA94 VA: 0x201BA94 Slot: 29
	protected virtual int DoFinal(byte[] output, int outOff, int outLen, byte partialByte, int partialBits) { }

	// RVA: 0x201BC68 Offset: 0x201BC68 VA: 0x201BC68 Slot: 23
	public override IMemoable Copy() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class TigerDigest : IDigest, IMemoable // TypeDefIndex: 4656
{
	// Fields
	private const int MyByteLength = 64;
	private static readonly long[] t1; // 0x0
	private static readonly long[] t2; // 0x8
	private static readonly long[] t3; // 0x10
	private static readonly long[] t4; // 0x18
