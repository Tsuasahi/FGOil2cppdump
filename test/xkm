	public void .ctor() { }

	// RVA: 0x2470CD0 Offset: 0x2470CD0 VA: 0x2470CD0
	public void .ctor(MD5Digest t) { }

	// RVA: 0x2470D48 Offset: 0x2470D48 VA: 0x2470D48
	private void CopyIn(MD5Digest t) { }

	// RVA: 0x2470E60 Offset: 0x2470E60 VA: 0x2470E60 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x2470EA8 Offset: 0x2470EA8 VA: 0x2470EA8 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x2470EB0 Offset: 0x2470EB0 VA: 0x2470EB0 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x2470F54 Offset: 0x2470F54 VA: 0x2470F54 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x2471078 Offset: 0x2471078 VA: 0x2471078 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x247110C Offset: 0x247110C VA: 0x247110C Slot: 13
	public override void Reset() { }

	// RVA: 0x24711A4 Offset: 0x24711A4 VA: 0x24711A4
	private static uint RotateLeft(uint x, int n) { }

	// RVA: 0x24711B4 Offset: 0x24711B4 VA: 0x24711B4
	private static uint F(uint u, uint v, uint w) { }

	// RVA: 0x24711C4 Offset: 0x24711C4 VA: 0x24711C4
	private static uint G(uint u, uint v, uint w) { }

	// RVA: 0x24711D4 Offset: 0x24711D4 VA: 0x24711D4
	private static uint H(uint u, uint v, uint w) { }

	// RVA: 0x24711E0 Offset: 0x24711E0 VA: 0x24711E0
	private static uint K(uint u, uint v, uint w) { }

	// RVA: 0x24711EC Offset: 0x24711EC VA: 0x24711EC Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2472D10 Offset: 0x2472D10 VA: 0x2472D10 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x2472D70 Offset: 0x2472D70 VA: 0x2472D70 Slot: 21
	public override void Reset(IMemoable other) { }

	// RVA: 0x2472E48 Offset: 0x2472E48 VA: 0x2472E48
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class NullDigest : IDigest // TypeDefIndex: 4643
{
	// Fields
	private readonly MemoryStream bOut; // 0x10

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x2472F58 Offset: 0x2472F58 VA: 0x2472F58
	public void .ctor() { }

	// RVA: 0x2472FC0 Offset: 0x2472FC0 VA: 0x2472FC0 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x2473008 Offset: 0x2473008 VA: 0x2473008 Slot: 6
	public int GetByteLength() { }

	// RVA: 0x2473010 Offset: 0x2473010 VA: 0x2473010 Slot: 5
	public int GetDigestSize() { }

	// RVA: 0x2473048 Offset: 0x2473048 VA: 0x2473048 Slot: 7
	public void Update(byte b) { }

	// RVA: 0x2473088 Offset: 0x2473088 VA: 0x2473088 Slot: 8
	public void BlockUpdate(byte[] inBytes, int inOff, int len) { }

	// RVA: 0x24730E0 Offset: 0x24730E0 VA: 0x24730E0 Slot: 9
	public int DoFinal(byte[] outBytes, int outOff) { }

	// RVA: 0x2473188 Offset: 0x2473188 VA: 0x2473188 Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD128Digest : GeneralDigest // TypeDefIndex: 4644
{
	// Fields
	private const int DigestLength = 16;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int[] X; // 0x38
	private int xOff; // 0x40

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x24731C4 Offset: 0x24731C4 VA: 0x24731C4
	public void .ctor() { }

	// RVA: 0x2473230 Offset: 0x2473230 VA: 0x2473230
	public void .ctor(RipeMD128Digest t) { }

	// RVA: 0x24732A8 Offset: 0x24732A8 VA: 0x24732A8
	private void CopyIn(RipeMD128Digest t) { }

	// RVA: 0x24733C0 Offset: 0x24733C0 VA: 0x24733C0 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x2473408 Offset: 0x2473408 VA: 0x2473408 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x2473410 Offset: 0x2473410 VA: 0x2473410 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x2473584 Offset: 0x2473584 VA: 0x2473584 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x2473630 Offset: 0x2473630 VA: 0x2473630
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x2473720 Offset: 0x2473720 VA: 0x2473720 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x24737A4 Offset: 0x24737A4 VA: 0x24737A4 Slot: 13
	public override void Reset() { }

	// RVA: 0x247383C Offset: 0x247383C VA: 0x247383C
	private int RL(int x, int n) { }

	// RVA: 0x247384C Offset: 0x247384C VA: 0x247384C
	private int F1(int x, int y, int z) { }

	// RVA: 0x2473858 Offset: 0x2473858 VA: 0x2473858
	private int F2(int x, int y, int z) { }

	// RVA: 0x2473868 Offset: 0x2473868 VA: 0x2473868
	private int F3(int x, int y, int z) { }

	// RVA: 0x2473874 Offset: 0x2473874 VA: 0x2473874
	private int F4(int x, int y, int z) { }

	// RVA: 0x2473884 Offset: 0x2473884 VA: 0x2473884
	private int F1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x24738A4 Offset: 0x24738A4 VA: 0x24738A4
	private int F2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x24738D4 Offset: 0x24738D4 VA: 0x24738D4
	private int F3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x2473900 Offset: 0x2473900 VA: 0x2473900
	private int F4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x2473930 Offset: 0x2473930 VA: 0x2473930
	private int FF1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x2473950 Offset: 0x2473950 VA: 0x2473950
	private int FF2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x2473980 Offset: 0x2473980 VA: 0x2473980
	private int FF3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x24739AC Offset: 0x24739AC VA: 0x24739AC
	private int FF4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x24739DC Offset: 0x24739DC VA: 0x24739DC Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x2476468 Offset: 0x2476468 VA: 0x2476468 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x24764C8 Offset: 0x24764C8 VA: 0x24764C8 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD160Digest : GeneralDigest // TypeDefIndex: 4645
{
	// Fields
	private const int DigestLength = 20;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int H4; // 0x38
	private int[] X; // 0x40
	private int xOff; // 0x48

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x24765A0 Offset: 0x24765A0 VA: 0x24765A0
	public void .ctor() { }

	// RVA: 0x247660C Offset: 0x247660C VA: 0x247660C
	public void .ctor(RipeMD160Digest t) { }

	// RVA: 0x2476684 Offset: 0x2476684 VA: 0x2476684
	private void CopyIn(RipeMD160Digest t) { }

	// RVA: 0x24767B8 Offset: 0x24767B8 VA: 0x24767B8 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x2476800 Offset: 0x2476800 VA: 0x2476800 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x2476808 Offset: 0x2476808 VA: 0x2476808 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x247697C Offset: 0x247697C VA: 0x247697C Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x2476A28 Offset: 0x2476A28 VA: 0x2476A28
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x2476B18 Offset: 0x2476B18 VA: 0x2476B18 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x2476BAC Offset: 0x2476BAC VA: 0x2476BAC Slot: 13
	public override void Reset() { }

	// RVA: 0x2476C50 Offset: 0x2476C50 VA: 0x2476C50
	private int RL(int x, int n) { }

	// RVA: 0x2476C60 Offset: 0x2476C60 VA: 0x2476C60
	private int F1(int x, int y, int z) { }

	// RVA: 0x2476C6C Offset: 0x2476C6C VA: 0x2476C6C
	private int F2(int x, int y, int z) { }

	// RVA: 0x2476C7C Offset: 0x2476C7C VA: 0x2476C7C
	private int F3(int x, int y, int z) { }

	// RVA: 0x2476C88 Offset: 0x2476C88 VA: 0x2476C88
	private int F4(int x, int y, int z) { }

	// RVA: 0x2476C98 Offset: 0x2476C98 VA: 0x2476C98
	private int F5(int x, int y, int z) { }

	// RVA: 0x2476CA4 Offset: 0x2476CA4 VA: 0x2476CA4 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x247AE2C Offset: 0x247AE2C VA: 0x247AE2C Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x247AE8C Offset: 0x247AE8C VA: 0x247AE8C Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD256Digest : GeneralDigest // TypeDefIndex: 4646
{
	// Fields
	private const int DigestLength = 32;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int H4; // 0x38
	private int H5; // 0x3C
	private int H6; // 0x40
	private int H7; // 0x44
	private int[] X; // 0x48
	private int xOff; // 0x50

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x247AF64 Offset: 0x247AF64 VA: 0x247AF64
	public void .ctor() { }

	// RVA: 0x247AFD0 Offset: 0x247AFD0 VA: 0x247AFD0
	public void .ctor(RipeMD256Digest t) { }

	// RVA: 0x247B1D0 Offset: 0x247B1D0 VA: 0x247B1D0 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x247B218 Offset: 0x247B218 VA: 0x247B218 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x247B048 Offset: 0x247B048 VA: 0x247B048
	private void CopyIn(RipeMD256Digest t) { }

	// RVA: 0x247B220 Offset: 0x247B220 VA: 0x247B220 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x247B394 Offset: 0x247B394 VA: 0x247B394 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x247B440 Offset: 0x247B440 VA: 0x247B440
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x247B530 Offset: 0x247B530 VA: 0x247B530 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x247B5F4 Offset: 0x247B5F4 VA: 0x247B5F4 Slot: 13
	public override void Reset() { }

	// RVA: 0x247B698 Offset: 0x247B698 VA: 0x247B698
	private int RL(int x, int n) { }

	// RVA: 0x247B6A8 Offset: 0x247B6A8 VA: 0x247B6A8
	private int F1(int x, int y, int z) { }

	// RVA: 0x247B6B4 Offset: 0x247B6B4 VA: 0x247B6B4
	private int F2(int x, int y, int z) { }

	// RVA: 0x247B6C4 Offset: 0x247B6C4 VA: 0x247B6C4
	private int F3(int x, int y, int z) { }

	// RVA: 0x247B6D0 Offset: 0x247B6D0 VA: 0x247B6D0
	private int F4(int x, int y, int z) { }

	// RVA: 0x247B6E0 Offset: 0x247B6E0 VA: 0x247B6E0
	private int F1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B700 Offset: 0x247B700 VA: 0x247B700
	private int F2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B730 Offset: 0x247B730 VA: 0x247B730
	private int F3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B75C Offset: 0x247B75C VA: 0x247B75C
	private int F4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B78C Offset: 0x247B78C VA: 0x247B78C
	private int FF1(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B7AC Offset: 0x247B7AC VA: 0x247B7AC
	private int FF2(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B7DC Offset: 0x247B7DC VA: 0x247B7DC
	private int FF3(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B808 Offset: 0x247B808 VA: 0x247B808
	private int FF4(int a, int b, int c, int d, int x, int s) { }

	// RVA: 0x247B838 Offset: 0x247B838 VA: 0x247B838 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x247E3E8 Offset: 0x247E3E8 VA: 0x247E3E8 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x247E448 Offset: 0x247E448 VA: 0x247E448 Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class RipeMD320Digest : GeneralDigest // TypeDefIndex: 4647
{
	// Fields
	private const int DigestLength = 40;
	private int H0; // 0x28
	private int H1; // 0x2C
	private int H2; // 0x30
	private int H3; // 0x34
	private int H4; // 0x38
	private int H5; // 0x3C
	private int H6; // 0x40
	private int H7; // 0x44
	private int H8; // 0x48
	private int H9; // 0x4C
	private int[] X; // 0x50
	private int xOff; // 0x58

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23C9DD8 Offset: 0x23C9DD8 VA: 0x23C9DD8
	public void .ctor() { }

	// RVA: 0x23C9E48 Offset: 0x23C9E48 VA: 0x23C9E48
	public void .ctor(RipeMD320Digest t) { }

	// RVA: 0x23CA088 Offset: 0x23CA088 VA: 0x23CA088 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x23CA0D0 Offset: 0x23CA0D0 VA: 0x23CA0D0 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x23C9EC4 Offset: 0x23C9EC4 VA: 0x23C9EC4
	private void CopyIn(RipeMD320Digest t) { }

	// RVA: 0x23CA0D8 Offset: 0x23CA0D8 VA: 0x23CA0D8 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x23CA24C Offset: 0x23CA24C VA: 0x23CA24C Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x23CA2F8 Offset: 0x23CA2F8 VA: 0x23CA2F8
	private void UnpackWord(int word, byte[] outBytes, int outOff) { }

	// RVA: 0x23CA3E8 Offset: 0x23CA3E8 VA: 0x23CA3E8 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23CA4D0 Offset: 0x23CA4D0 VA: 0x23CA4D0 Slot: 13
	public override void Reset() { }

	// RVA: 0x23CA58C Offset: 0x23CA58C VA: 0x23CA58C
	private int RL(int x, int n) { }

	// RVA: 0x23CA59C Offset: 0x23CA59C VA: 0x23CA59C
	private int F1(int x, int y, int z) { }

	// RVA: 0x23CA5A8 Offset: 0x23CA5A8 VA: 0x23CA5A8
	private int F2(int x, int y, int z) { }

	// RVA: 0x23CA5B8 Offset: 0x23CA5B8 VA: 0x23CA5B8
	private int F3(int x, int y, int z) { }

	// RVA: 0x23CA5C4 Offset: 0x23CA5C4 VA: 0x23CA5C4
	private int F4(int x, int y, int z) { }

	// RVA: 0x23CA5D4 Offset: 0x23CA5D4 VA: 0x23CA5D4
	private int F5(int x, int y, int z) { }

	// RVA: 0x23CA5E0 Offset: 0x23CA5E0 VA: 0x23CA5E0 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x23CE61C Offset: 0x23CE61C VA: 0x23CE61C Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x23CE67C Offset: 0x23CE67C VA: 0x23CE67C Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha1Digest : GeneralDigest // TypeDefIndex: 4648
{
	// Fields
	private const int DigestLength = 20;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint H5; // 0x38
	private uint[] X; // 0x40
	private int xOff; // 0x48
	private const uint Y1 = 1518500249;
	private const uint Y2 = 1859775393;
	private const uint Y3 = 2400959708;
	private const uint Y4 = 3395469782;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23CE754 Offset: 0x23CE754 VA: 0x23CE754
	public void .ctor() { }

	// RVA: 0x23CE7C4 Offset: 0x23CE7C4 VA: 0x23CE7C4
	public void .ctor(Sha1Digest t) { }

	// RVA: 0x23CE840 Offset: 0x23CE840 VA: 0x23CE840
	private void CopyIn(Sha1Digest t) { }

	// RVA: 0x23CE978 Offset: 0x23CE978 VA: 0x23CE978 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x23CE9C0 Offset: 0x23CE9C0 VA: 0x23CE9C0 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x23CE9C8 Offset: 0x23CE9C8 VA: 0x23CE9C8 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x23CEA6C Offset: 0x23CEA6C VA: 0x23CEA6C Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x23CEB18 Offset: 0x23CEB18 VA: 0x23CEB18 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23CEBC4 Offset: 0x23CEBC4 VA: 0x23CEBC4 Slot: 13
	public override void Reset() { }

	// RVA: 0x23CEC24 Offset: 0x23CEC24 VA: 0x23CEC24
	private static uint F(uint u, uint v, uint w) { }

	// RVA: 0x23CEC34 Offset: 0x23CEC34 VA: 0x23CEC34
	private static uint H(uint u, uint v, uint w) { }

	// RVA: 0x23CEC40 Offset: 0x23CEC40 VA: 0x23CEC40
	private static uint G(uint u, uint v, uint w) { }

	// RVA: 0x23CEC54 Offset: 0x23CEC54 VA: 0x23CEC54 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x23CF74C Offset: 0x23CF74C VA: 0x23CF74C Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x23CF7AC Offset: 0x23CF7AC VA: 0x23CF7AC Slot: 21
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha224Digest : GeneralDigest // TypeDefIndex: 4649
{
	// Fields
	private const int DigestLength = 28;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint H5; // 0x38
	private uint H6; // 0x3C
	private uint H7; // 0x40
	private uint H8; // 0x44
	private uint[] X; // 0x48
	private int xOff; // 0x50
	internal static readonly uint[] K; // 0x0

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23CF884 Offset: 0x23CF884 VA: 0x23CF884
	public void .ctor() { }

	// RVA: 0x23CF8F4 Offset: 0x23CF8F4 VA: 0x23CF8F4
	public void .ctor(Sha224Digest t) { }

	// RVA: 0x23CF970 Offset: 0x23CF970 VA: 0x23CF970
	private void CopyIn(Sha224Digest t) { }

	// RVA: 0x23CFAFC Offset: 0x23CFAFC VA: 0x23CFAFC Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x23CFB44 Offset: 0x23CFB44 VA: 0x23CFB44 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x23CFB4C Offset: 0x23CFB4C VA: 0x23CFB4C Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x23CFBF0 Offset: 0x23CFBF0 VA: 0x23CFBF0 Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x23CFC9C Offset: 0x23CFC9C VA: 0x23CFC9C Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23CFD70 Offset: 0x23CFD70 VA: 0x23CFD70 Slot: 13
	public override void Reset() { }

	// RVA: 0x23CFDD0 Offset: 0x23CFDD0 VA: 0x23CFDD0 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x23D0870 Offset: 0x23D0870 VA: 0x23D0870
	private static uint Ch(uint x, uint y, uint z) { }

	// RVA: 0x23D0890 Offset: 0x23D0890 VA: 0x23D0890
	private static uint Maj(uint x, uint y, uint z) { }

	// RVA: 0x23D0880 Offset: 0x23D0880 VA: 0x23D0880
	private static uint Sum0(uint x) { }

	// RVA: 0x23D0860 Offset: 0x23D0860 VA: 0x23D0860
	private static uint Sum1(uint x) { }

	// RVA: 0x23D0850 Offset: 0x23D0850 VA: 0x23D0850
	private static uint Theta0(uint x) { }

	// RVA: 0x23D0840 Offset: 0x23D0840 VA: 0x23D0840
	private static uint Theta1(uint x) { }

	// RVA: 0x23D08A4 Offset: 0x23D08A4 VA: 0x23D08A4 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x23D0904 Offset: 0x23D0904 VA: 0x23D0904 Slot: 21
	public override void Reset(IMemoable other) { }

	// RVA: 0x23D09DC Offset: 0x23D09DC VA: 0x23D09DC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha256Digest : GeneralDigest // TypeDefIndex: 4650
{
	// Fields
	private const int DigestLength = 32;
	private uint H1; // 0x28
	private uint H2; // 0x2C
	private uint H3; // 0x30
	private uint H4; // 0x34
	private uint H5; // 0x38
	private uint H6; // 0x3C
	private uint H7; // 0x40
	private uint H8; // 0x44
	private uint[] X; // 0x48
	private int xOff; // 0x50
	private static readonly uint[] K; // 0x0

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D0A58 Offset: 0x23D0A58 VA: 0x23D0A58
	public void .ctor() { }

	// RVA: 0x23D0AF0 Offset: 0x23D0AF0 VA: 0x23D0AF0
	public void .ctor(Sha256Digest t) { }

	// RVA: 0x23D0B6C Offset: 0x23D0B6C VA: 0x23D0B6C
	private void CopyIn(Sha256Digest t) { }

	// RVA: 0x23D0CF8 Offset: 0x23D0CF8 VA: 0x23D0CF8 Slot: 17
	public override string get_AlgorithmName() { }

	// RVA: 0x23D0D40 Offset: 0x23D0D40 VA: 0x23D0D40 Slot: 18
	public override int GetDigestSize() { }

	// RVA: 0x23D0D48 Offset: 0x23D0D48 VA: 0x23D0D48 Slot: 14
	internal override void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x23D0DEC Offset: 0x23D0DEC VA: 0x23D0DEC Slot: 15
	internal override void ProcessLength(long bitLength) { }

	// RVA: 0x23D0E98 Offset: 0x23D0E98 VA: 0x23D0E98 Slot: 19
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D0F80 Offset: 0x23D0F80 VA: 0x23D0F80 Slot: 13
	public override void Reset() { }

	// RVA: 0x23D0AD4 Offset: 0x23D0AD4 VA: 0x23D0AD4
	private void initHs() { }

	// RVA: 0x23D0FE0 Offset: 0x23D0FE0 VA: 0x23D0FE0 Slot: 16
	internal override void ProcessBlock() { }

	// RVA: 0x23D1A70 Offset: 0x23D1A70 VA: 0x23D1A70
	private static uint Sum1Ch(uint x, uint y, uint z) { }

	// RVA: 0x23D1A90 Offset: 0x23D1A90 VA: 0x23D1A90
	private static uint Sum0Maj(uint x, uint y, uint z) { }

	// RVA: 0x23D1A60 Offset: 0x23D1A60 VA: 0x23D1A60
	private static uint Theta0(uint x) { }

	// RVA: 0x23D1A50 Offset: 0x23D1A50 VA: 0x23D1A50
	private static uint Theta1(uint x) { }

	// RVA: 0x23D1AB4 Offset: 0x23D1AB4 VA: 0x23D1AB4 Slot: 20
	public override IMemoable Copy() { }

	// RVA: 0x23D1B14 Offset: 0x23D1B14 VA: 0x23D1B14 Slot: 21
	public override void Reset(IMemoable other) { }

	// RVA: 0x23D1BEC Offset: 0x23D1BEC VA: 0x23D1BEC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha384Digest : LongDigest // TypeDefIndex: 4651
{
	// Fields
	private const int DigestLength = 48;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D1C68 Offset: 0x23D1C68 VA: 0x23D1C68
	public void .ctor() { }

	// RVA: 0x23D1CD0 Offset: 0x23D1CD0 VA: 0x23D1CD0
	public void .ctor(Sha384Digest t) { }

	// RVA: 0x23D1D48 Offset: 0x23D1D48 VA: 0x23D1D48 Slot: 14
	public override string get_AlgorithmName() { }

	// RVA: 0x23D1D90 Offset: 0x23D1D90 VA: 0x23D1D90 Slot: 15
	public override int GetDigestSize() { }

	// RVA: 0x23D1D98 Offset: 0x23D1D98 VA: 0x23D1D98 Slot: 16
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D1E58 Offset: 0x23D1E58 VA: 0x23D1E58 Slot: 13
	public override void Reset() { }

	// RVA: 0x23D1EAC Offset: 0x23D1EAC VA: 0x23D1EAC Slot: 17
	public override IMemoable Copy() { }

	// RVA: 0x23D1F0C Offset: 0x23D1F0C VA: 0x23D1F0C Slot: 18
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha3Digest : KeccakDigest // TypeDefIndex: 4652
{
	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D1FE8 Offset: 0x23D1FE8 VA: 0x23D1FE8
	public void .ctor() { }

	// RVA: 0x23D1FF0 Offset: 0x23D1FF0 VA: 0x23D1FF0
	public void .ctor(int bitLength) { }

	// RVA: 0x23D2190 Offset: 0x23D2190 VA: 0x23D2190
	public void .ctor(Sha3Digest source) { }

	// RVA: 0x23D2078 Offset: 0x23D2078 VA: 0x23D2078
	private static int CheckBitLength(int bitLength) { }

	// RVA: 0x23D2208 Offset: 0x23D2208 VA: 0x23D2208 Slot: 13
	public override string get_AlgorithmName() { }

	// RVA: 0x23D22AC Offset: 0x23D22AC VA: 0x23D22AC Slot: 17
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D236C Offset: 0x23D236C VA: 0x23D236C Slot: 18
	protected override int DoFinal(byte[] output, int outOff, byte partialByte, int partialBits) { }

	// RVA: 0x23D24C4 Offset: 0x23D24C4 VA: 0x23D24C4 Slot: 23
	public override IMemoable Copy() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha512Digest : LongDigest // TypeDefIndex: 4653
{
	// Fields
	private const int DigestLength = 64;

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D2524 Offset: 0x23D2524 VA: 0x23D2524
	public void .ctor() { }

	// RVA: 0x23D258C Offset: 0x23D258C VA: 0x23D258C
	public void .ctor(Sha512Digest t) { }

	// RVA: 0x23D2604 Offset: 0x23D2604 VA: 0x23D2604 Slot: 14
	public override string get_AlgorithmName() { }

	// RVA: 0x23D264C Offset: 0x23D264C VA: 0x23D264C Slot: 15
	public override int GetDigestSize() { }

	// RVA: 0x23D2654 Offset: 0x23D2654 VA: 0x23D2654 Slot: 16
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D273C Offset: 0x23D273C VA: 0x23D273C Slot: 13
	public override void Reset() { }

	// RVA: 0x23D2790 Offset: 0x23D2790 VA: 0x23D2790 Slot: 17
	public override IMemoable Copy() { }

	// RVA: 0x23D27F0 Offset: 0x23D27F0 VA: 0x23D27F0 Slot: 18
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Sha512tDigest : LongDigest // TypeDefIndex: 4654
{
	// Fields
	private const ulong A5 = 11936128518282651045;
	private readonly int digestLength; // 0x84
	private ulong H1t; // 0x88
	private ulong H2t; // 0x90
	private ulong H3t; // 0x98
	private ulong H4t; // 0xA0
	private ulong H5t; // 0xA8
	private ulong H6t; // 0xB0
	private ulong H7t; // 0xB8
	private ulong H8t; // 0xC0

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D28CC Offset: 0x23D28CC VA: 0x23D28CC
	public void .ctor(int bitLength) { }

	// RVA: 0x23D2BB8 Offset: 0x23D2BB8 VA: 0x23D2BB8
	public void .ctor(Sha512tDigest t) { }

	// RVA: 0x23D2C5C Offset: 0x23D2C5C VA: 0x23D2C5C Slot: 14
	public override string get_AlgorithmName() { }

	// RVA: 0x23D2D04 Offset: 0x23D2D04 VA: 0x23D2D04 Slot: 15
	public override int GetDigestSize() { }

	// RVA: 0x23D2D0C Offset: 0x23D2D0C VA: 0x23D2D0C Slot: 16
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D2E84 Offset: 0x23D2E84 VA: 0x23D2E84 Slot: 13
	public override void Reset() { }

	// RVA: 0x23D2A28 Offset: 0x23D2A28 VA: 0x23D2A28
	private void tIvGenerate(int bitLength) { }

	// RVA: 0x23D2E10 Offset: 0x23D2E10 VA: 0x23D2E10
	private static void UInt64_To_BE(ulong n, byte[] bs, int off, int max) { }

	// RVA: 0x23D2EC8 Offset: 0x23D2EC8 VA: 0x23D2EC8
	private static void UInt32_To_BE(uint n, byte[] bs, int off, int max) { }

	// RVA: 0x23D2F6C Offset: 0x23D2F6C VA: 0x23D2F6C Slot: 17
	public override IMemoable Copy() { }

	// RVA: 0x23D2FCC Offset: 0x23D2FCC VA: 0x23D2FCC Slot: 18
	public override void Reset(IMemoable other) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class ShakeDigest : KeccakDigest, IXof, IDigest // TypeDefIndex: 4655
{
	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D3140 Offset: 0x23D3140 VA: 0x23D3140
	public void .ctor() { }

	// RVA: 0x23D3148 Offset: 0x23D3148 VA: 0x23D3148
	public void .ctor(int bitLength) { }

	// RVA: 0x23D32D4 Offset: 0x23D32D4 VA: 0x23D32D4
	public void .ctor(ShakeDigest source) { }

	// RVA: 0x23D31D0 Offset: 0x23D31D0 VA: 0x23D31D0
	private static int CheckBitLength(int bitLength) { }

	// RVA: 0x23D334C Offset: 0x23D334C VA: 0x23D334C Slot: 13
	public override string get_AlgorithmName() { }

	// RVA: 0x23D33F0 Offset: 0x23D33F0 VA: 0x23D33F0 Slot: 17
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D344C Offset: 0x23D344C VA: 0x23D344C Slot: 27
	public virtual int DoFinal(byte[] output, int outOff, int outLen) { }

	// RVA: 0x23D3494 Offset: 0x23D3494 VA: 0x23D3494 Slot: 28
	public virtual int DoOutput(byte[] output, int outOff, int outLen) { }

	// RVA: 0x23D357C Offset: 0x23D357C VA: 0x23D357C Slot: 18
	protected override int DoFinal(byte[] output, int outOff, byte partialByte, int partialBits) { }

	// RVA: 0x23D35F0 Offset: 0x23D35F0 VA: 0x23D35F0 Slot: 29
	protected virtual int DoFinal(byte[] output, int outOff, int outLen, byte partialByte, int partialBits) { }

	// RVA: 0x23D37C4 Offset: 0x23D37C4 VA: 0x23D37C4 Slot: 23
	public override IMemoable Copy() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class TigerDigest : IDigest, IMemoable // TypeDefIndex: 4656
{
	// Fields
	private const int MyByteLength = 64;
	private static readonly long[] t1; // 0x0
	private static readonly long[] t2; // 0x8
	private static readonly long[] t3; // 0x10
	private static readonly long[] t4; // 0x18
	private const int DigestLength = 24;
	private long a; // 0x10
	private long b; // 0x18
	private long c; // 0x20
	private long byteCount; // 0x28
	private byte[] Buffer; // 0x30
	private int bOff; // 0x38
	private long[] x; // 0x40
	private int xOff; // 0x48

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D3824 Offset: 0x23D3824 VA: 0x23D3824
	public void .ctor() { }

	// RVA: 0x23D39B4 Offset: 0x23D39B4 VA: 0x23D39B4
	public void .ctor(TigerDigest t) { }

	// RVA: 0x23D3C88 Offset: 0x23D3C88 VA: 0x23D3C88 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x23D3CD0 Offset: 0x23D3CD0 VA: 0x23D3CD0 Slot: 5
	public int GetDigestSize() { }

	// RVA: 0x23D3CD8 Offset: 0x23D3CD8 VA: 0x23D3CD8 Slot: 6
	public int GetByteLength() { }

	// RVA: 0x23D3CE0 Offset: 0x23D3CE0 VA: 0x23D3CE0
	private void ProcessWord(byte[] b, int off) { }

	// RVA: 0x23D4584 Offset: 0x23D4584 VA: 0x23D4584 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x23D4628 Offset: 0x23D4628 VA: 0x23D4628 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x23D477C Offset: 0x23D477C VA: 0x23D477C
	private void RoundABC(long x, long mul) { }

	// RVA: 0x23D4A60 Offset: 0x23D4A60 VA: 0x23D4A60
	private void RoundBCA(long x, long mul) { }

	// RVA: 0x23D4D44 Offset: 0x23D4D44 VA: 0x23D4D44
	private void RoundCAB(long x, long mul) { }

	// RVA: 0x23D5024 Offset: 0x23D5024 VA: 0x23D5024
	private void KeySchedule() { }

	// RVA: 0x23D3F2C Offset: 0x23D3F2C VA: 0x23D3F2C
	private void ProcessBlock() { }

	// RVA: 0x23D57C8 Offset: 0x23D57C8 VA: 0x23D57C8
	private void UnpackWord(long r, byte[] output, int outOff) { }

	// RVA: 0x23D5978 Offset: 0x23D5978 VA: 0x23D5978
	private void ProcessLength(long bitLength) { }

	// RVA: 0x23D59C4 Offset: 0x23D59C4 VA: 0x23D59C4
	private void Finish() { }

	// RVA: 0x23D5A14 Offset: 0x23D5A14 VA: 0x23D5A14 Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x23D38A4 Offset: 0x23D38A4 VA: 0x23D38A4 Slot: 10
	public void Reset() { }

	// RVA: 0x23D5A80 Offset: 0x23D5A80 VA: 0x23D5A80 Slot: 11
	public IMemoable Copy() { }

	// RVA: 0x23D3A44 Offset: 0x23D3A44 VA: 0x23D3A44 Slot: 12
	public void Reset(IMemoable other) { }

	// RVA: 0x23D5AE0 Offset: 0x23D5AE0 VA: 0x23D5AE0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public sealed class WhirlpoolDigest : IDigest, IMemoable // TypeDefIndex: 4657
{
	// Fields
	private const int BYTE_LENGTH = 64;
	private const int DIGEST_LENGTH_BYTES = 64;
	private const int ROUNDS = 10;
	private const int REDUCTION_POLYNOMIAL = 285;
	private static readonly int[] SBOX; // 0x0
	private static readonly long[] C0; // 0x8
	private static readonly long[] C1; // 0x10
	private static readonly long[] C2; // 0x18
	private static readonly long[] C3; // 0x20
	private static readonly long[] C4; // 0x28
	private static readonly long[] C5; // 0x30
	private static readonly long[] C6; // 0x38
	private static readonly long[] C7; // 0x40
	private readonly long[] _rc; // 0x10
	private static readonly short[] EIGHT; // 0x48
	private const int BITCOUNT_ARRAY_SIZE = 32;
	private byte[] _buffer; // 0x18
	private int _bufferPos; // 0x20
	private short[] _bitCount; // 0x28
	private long[] _hash; // 0x30
	private long[] _K; // 0x38
	private long[] _L; // 0x40
	private long[] _block; // 0x48
	private long[] _state; // 0x50

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x23D5BF4 Offset: 0x23D5BF4 VA: 0x23D5BF4
	private static void .cctor() { }

	// RVA: 0x23D6218 Offset: 0x23D6218 VA: 0x23D6218
	public void .ctor() { }

	// RVA: 0x23D6604 Offset: 0x23D6604 VA: 0x23D6604
	public void .ctor(WhirlpoolDigest originalDigest) { }

