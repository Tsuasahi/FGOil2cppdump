
// Namespace: 
public class WarBoardUserServantData : BattleUserServantData // TypeDefIndex: 11828
{
	// Fields
	public int currentHp; // 0x1F4
	public int currentNp; // 0x1F8
	public int nextNpTurn; // 0x1FC
	public int defeatPoint; // 0x200
	public BattleBuffData.SaveData buffDataSave; // 0x208
	public int forceId; // 0x210
	public int groupId; // 0x214
	public int pieceIndex; // 0x218
	public int skill1Ct; // 0x21C
	public int skill2Ct; // 0x220
	public int skill3Ct; // 0x224
	public int squareIndex; // 0x228
	public int currentActionPoint; // 0x22C
	public int limitActionPoint; // 0x230
	public int attackCount; // 0x234
	private BattleBuffData buffData; // 0x238
	public int transformIndex; // 0x240
	public int transformLimitCount; // 0x244
	public bool isSleepWaitMode; // 0x248
	public uint consumedActionPointDateTime; // 0x24C
	public int criticalStars; // 0x250
	public long npcSvtEquipId; // 0x258

	// Methods

	// RVA: 0x1537E78 Offset: 0x1537E78 VA: 0x1537E78
	public void .ctor() { }

	// RVA: 0x1537E88 Offset: 0x1537E88 VA: 0x1537E88
	public void FromBattleServantData(BattleServantData servantData) { }

	// RVA: 0x1538068 Offset: 0x1538068 VA: 0x1538068
	public void SetBattleServantData(BattleServantData servantData) { }

	// RVA: 0x15382FC Offset: 0x15382FC VA: 0x15382FC
	public string ToJson() { }

	// RVA: 0x1538380 Offset: 0x1538380 VA: 0x1538380
	public static WarBoardUserServantData FromJson(string json) { }
}

// Namespace: 
public class WarBoardUserTreasureData // TypeDefIndex: 11829
{
	// Fields
	public int treasureId; // 0x10
	public bool isReceived; // 0x14

	// Methods

	// RVA: 0x1538480 Offset: 0x1538480 VA: 0x1538480
	public void .ctor() { }

	// RVA: 0x1538488 Offset: 0x1538488 VA: 0x1538488
	public string ToJson() { }

	// RVA: 0x15384F8 Offset: 0x15384F8 VA: 0x15384F8
	public static WarBoardUserTreasureData FromJson(string json) { }
}

// Namespace: 
public class WarBoardManager : SingletonMonoBehaviour<WarBoardManager> // TypeDefIndex: 11830
{
	// Fields
	[SerializeField] // RVA: 0xC82EE0 Offset: 0xC82EE0 VA: 0xC82EE0
	private GameObject boardRoot; // 0x18
	[SerializeField] // RVA: 0xC82EF0 Offset: 0xC82EF0 VA: 0xC82EF0
	private GameObject boardObjectRoot; // 0x20
	[SerializeField] // RVA: 0xC82F00 Offset: 0xC82F00 VA: 0xC82F00
	private MapCamera mapCamera; // 0x28
	[SerializeField] // RVA: 0xC82F10 Offset: 0xC82F10 VA: 0xC82F10
	private Camera uiCamera; // 0x30
	[SerializeField] // RVA: 0xC82F20 Offset: 0xC82F20 VA: 0xC82F20
	private WarBoardTouchBlockObject forceCloseTouchBlockObj; // 0x38
	private AssetData commonAssetData; // 0x40
	private GameObject squarePrefab; // 0x48
	private GameObject roadPrefab; // 0x50
	private GameObject itemPrefab; // 0x58
	private GameObject treasurePrefab; // 0x60
	private GameObject effectPrefab; // 0x68
	private GameObject masterPiecePrefab; // 0x70
	private GameObject servantPiecePrefab; // 0x78
	private GameObject effectStartPrefab; // 0x80
	private GameObject effectPlayerTurnPrefab; // 0x88
	private GameObject effectEnemyTurnPrefab; // 0x90
	private GameObject effectWinPrefab; // 0x98
	private GameObject effectLosePrefab; // 0xA0
	private GameObject cameraRootPrefab; // 0xA8
	private SimpleAnimation cameraRootAnimation; // 0xB0
	private WarBoardMapCameraComponent mapCameraComponent; // 0xB8
	private GameObject effectAttackPrefab; // 0xC0
	private GameObject effectEncountPrefab; // 0xC8
	private UIAtlas itemIconAtlas; // 0xD0
	private UIAtlas treasureIconAtlas; // 0xD8
	private UIAtlas effectIconAtlas; // 0xE0
	private UIFont numberFont2; // 0xE8
	private GameObject effectOnBoardBuffPrefab; // 0xF0
	private GameObject effectOnBoardDeBuffPrefab; // 0xF8
	[SerializeField] // RVA: 0xC82F30 Offset: 0xC82F30 VA: 0xC82F30
	private WarBoardSeSetting seSetting; // 0x100
	private WarBoardBackgroundComponent backgroundComponent; // 0x108
	private WarBoardRoadComponent[] roadComponents; // 0x110
	private AssetData backgroundAssetData; // 0x118
	private AssetData imageSetAssetData; // 0x120
	private UIAtlas imageSetAtlas; // 0x128
	private WarBoardAIManager aiManager; // 0x130
	private Vector2 centerPosition; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xC82F40 Offset: 0xC82F40 VA: 0xC82F40
	[DebuggerBrowsableAttribute] // RVA: 0xC82F40 Offset: 0xC82F40 VA: 0xC82F40
	private WarBoardData <warBoardData>k__BackingField; // 0x140
	private Dictionary<int, Vector3> squarePositionDict; // 0x148
	[SerializeField] // RVA: 0xC82F7C Offset: 0xC82F7C VA: 0xC82F7C
	private Transform uiRoot; // 0x150
	private WarBoardConfigurationUIContoroller configurationUIController; // 0x158
	private WarBoardPlayingUIController playingUIController; // 0x160
	private WarBoardZoomSwitchButton zoomSwitchUI; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xC82F8C Offset: 0xC82F8C VA: 0xC82F8C
	[DebuggerBrowsableAttribute] // RVA: 0xC82F8C Offset: 0xC82F8C VA: 0xC82F8C
	private WarBoardManager.ControllType <controllType>k__BackingField; // 0x170
	[SerializeField] // RVA: 0xC82FC8 Offset: 0xC82FC8 VA: 0xC82FC8
	private GameObject touchBlock; // 0x178
	private bool isMapTouchEnabled; // 0x180
	private int mapTouchDisableCount; // 0x184
	private int touchBlockEnableCount; // 0x188
	private bool beginTouch; // 0x18C
	private bool touchGesture; // 0x18D
	private Touch[] tchInfs; // 0x190
	private bool isForceDispZoomSwitchUI; // 0x198
	private int treasureId; // 0x19C
	[SerializeField] // RVA: 0xC82FD8 Offset: 0xC82FD8 VA: 0xC82FD8
	private BattleData battleData; // 0x1A0
	private BattleInfoData battleInfo; // 0x1A8
	private BattleLogicFunction logicFunc; // 0x1B0
	private BattleLogicTarget logicTarget; // 0x1B8
	private BattleEntity battleEntity; // 0x1C0
	public BattleRandom battleRandom; // 0x1C8
	private ServantLimitAddMaster svtLimitAddMaster; // 0x1D0
	private List<AssetData> cacheBattleDatas; // 0x1D8
	private int[] battleBgList; // 0x1E0
	private const int MIDDLE_MEMORY_SIZE = 2048;
	private const int DEFAULT_MAX_SERVANT_CACHE_COUNT = 12;
	private const int DEFAULT_MIDDLE_MEMORY_SERVANT_CACHE_COUNT = 6;
	private int maxCacheServantCount; // 0x1E8
	private int middleMemoryCacheServantCount; // 0x1EC
	private WarBoardPieceData selectPiece; // 0x1F0
	public bool attackTreasureEnemy; // 0x1F8
	public int currentActionPoint; // 0x1FC
	private int maxActionPoint; // 0x200
	private int turnForceId; // 0x204
	private int turnGroupId; // 0x208
	private uint moveActionPieceUniqueIndex; // 0x20C
	private uint moveTargetPieceUniqueIndex; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xC82FE8 Offset: 0xC82FE8 VA: 0xC82FE8
	[DebuggerBrowsableAttribute] // RVA: 0xC82FE8 Offset: 0xC82FE8 VA: 0xC82FE8
	private uint <lastSelectPieceUniqueIndex>k__BackingField; // 0x214
	private static readonly Color COST_LABEL_CAN_MOVE_TOP_COLOR; // 0x0
	private static readonly Color COST_LABEL_CAN_MOVE_BOTTOM_COLOR; // 0x10
	private WarBoardActionPointEntity _warBoardActionPointEntity; // 0x218
	private static readonly int WIN_BGM_ID; // 0x20
	private static readonly int LOSE_BGM_ID; // 0x24
	private static readonly float START_BGM_FADEOUT_TIME; // 0x28
	private static readonly float SKILL_ZOOM_OUT_SIZE; // 0x2C
	private static readonly float SKILL_ZOOM_IN_SIZE; // 0x30
	private WarBoardOnboardSkillNameComponent onboardSkillNameObj; // 0x220
	[CompilerGeneratedAttribute] // RVA: 0xC83024 Offset: 0xC83024 VA: 0xC83024
	[DebuggerBrowsableAttribute] // RVA: 0xC83024 Offset: 0xC83024 VA: 0xC83024
	private bool <notOnboardSkillFlag>k__BackingField; // 0x228
	private AssetData partyOrganizationAssetData; // 0x230
	private WarBoardPartyOrganizationMenu partyMenu; // 0x238
	[CompilerGeneratedAttribute] // RVA: 0xC83060 Offset: 0xC83060 VA: 0xC83060
	[DebuggerBrowsableAttribute] // RVA: 0xC83060 Offset: 0xC83060 VA: 0xC83060
	private bool <IsEditingUserEquip>k__BackingField; // 0x240
	[CompilerGeneratedAttribute] // RVA: 0xC8309C Offset: 0xC8309C VA: 0xC8309C
	[DebuggerBrowsableAttribute] // RVA: 0xC8309C Offset: 0xC8309C VA: 0xC8309C
	private SceneJumpInfo <UserEquipSceneInfo>k__BackingField; // 0x248
	private WarBoardSimplePopup simplePopup; // 0x250
	private BattleServantConfConponent servantDetailPopup; // 0x258
	private BattleServantConfConponent enemyServantDetailPopup; // 0x260
	private WarBoardCommonMiniPopup commonMiniPopup; // 0x268
	private GameObject simplePopupElementServantPrefab; // 0x270
	private GameObject simplePopupElementBuffPrefab; // 0x278
	private GameObject simplePopupPrefab; // 0x280
	private GameObject servantDetailPopupPrefab; // 0x288
	private GameObject enemyServantDetailPopupPrefab; // 0x290
	private GameObject servantEquipSimpleDialogPrefab; // 0x298
	private bool popupControlIsReady; // 0x2A0
	private AssetData servantCommandCardAsset; // 0x2A8
	private Queue<WarBoardManager.WarBoardPerformanceQueue> taskQueue; // 0x2B0
	private IEnumerator taskExecute; // 0x2B8
	private List<WarBoardTaskBase> nonBlockTasks; // 0x2C0
	private IEnumerator nonBlockTaskExecute; // 0x2C8
	private bool isPause; // 0x2D0
	private bool isPauseImmediate; // 0x2D1
	[CompilerGeneratedAttribute] // RVA: 0xC830D8 Offset: 0xC830D8 VA: 0xC830D8
	private static Func<WarBoardPieceData, bool> <>f__am$cache0; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC830E8 Offset: 0xC830E8 VA: 0xC830E8
	private static Func<WarBoardPieceData, bool> <>f__am$cache1; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC830F8 Offset: 0xC830F8 VA: 0xC830F8
	private static Func<WarBoardPieceData, int> <>f__am$cache2; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC83108 Offset: 0xC83108 VA: 0xC83108
	private static Func<WarBoardPieceData, long> <>f__am$cache3; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC83118 Offset: 0xC83118 VA: 0xC83118
	private static Func<WarBoardPieceData, long> <>f__am$cache4; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC83128 Offset: 0xC83128 VA: 0xC83128
	private static Func<WarBoardPieceData, int> <>f__am$cache5; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC83138 Offset: 0xC83138 VA: 0xC83138
	private static Func<BattleSkillInfoData, int> <>f__am$cache6; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC83148 Offset: 0xC83148 VA: 0xC83148
	private static Func<BattleSkillInfoData, int> <>f__am$cache7; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC83158 Offset: 0xC83158 VA: 0xC83158
	private static WarBoardTaskBase.TaskCallback <>f__am$cache8; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC83168 Offset: 0xC83168 VA: 0xC83168
	private static WarBoardTaskBase.TaskCallback <>f__am$cache9; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC83178 Offset: 0xC83178 VA: 0xC83178
	private static Action<WarBoardPieceData> <>f__am$cacheA; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC83188 Offset: 0xC83188 VA: 0xC83188
	private static Action<WarBoardPieceData> <>f__am$cacheB; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC83198 Offset: 0xC83198 VA: 0xC83198
	private static Func<WarBoardPieceData, bool> <>f__am$cacheC; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xC831A8 Offset: 0xC831A8 VA: 0xC831A8
	private static Func<WarBoardPieceData, int> <>f__am$cacheD; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC831B8 Offset: 0xC831B8 VA: 0xC831B8
	private static Action<WarBoardPieceData> <>f__am$cacheE; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xC831C8 Offset: 0xC831C8 VA: 0xC831C8
	private static Func<WarBoardPieceData, bool> <>f__am$cacheF; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xC831D8 Offset: 0xC831D8 VA: 0xC831D8
	private static Func<WarBoardPieceData, bool> <>f__am$cache10; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xC831E8 Offset: 0xC831E8 VA: 0xC831E8
	private static Predicate<WarBoardPieceData> <>f__am$cache11; // 0xC0

	// Properties
	public WarBoardSeSetting SeSetting { get; }
	public WarBoardData warBoardData { get; set; }
	public WarBoardManager.ControllType controllType { get; set; }
	public bool isSelectedPiece { get; }
	public uint lastSelectPieceUniqueIndex { get; set; }
	private WarBoardActionPointEntity warBoardActionPointEntity { get; }
	public bool notOnboardSkillFlag { get; set; }
	private bool IsPartyMenuOpen { get; }
	public bool IsEditingUserEquip { get; set; }
	public SceneJumpInfo UserEquipSceneInfo { get; set; }

	// Methods

	// RVA: 0x1344584 Offset: 0x1344584 VA: 0x1344584
	public void .ctor() { }

	// RVA: 0x134468C Offset: 0x134468C VA: 0x134468C
	public static WarBoardDataEntity GetWarBoardDataEntityFromResponse(string reponse) { }

	// RVA: 0x1341CF0 Offset: 0x1341CF0 VA: 0x1341CF0
	public WarBoardSeSetting get_SeSetting() { }

	// RVA: 0x1344804 Offset: 0x1344804 VA: 0x1344804
	public void Initialize(WarBoardDataEntity data, Action initialized) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5DD0 Offset: 0xCD5DD0 VA: 0xCD5DD0
	// RVA: 0x1344830 Offset: 0x1344830 VA: 0x1344830
	private IEnumerator coInitialize(WarBoardDataEntity warBoardDataEntity, Action initialized) { }

	// RVA: 0x13448DC Offset: 0x13448DC VA: 0x13448DC
	public void Resume(WarBoardDataEntity warBoardDataEntity, Action resumed) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5DE0 Offset: 0xCD5DE0 VA: 0xCD5DE0
	// RVA: 0x1344908 Offset: 0x1344908 VA: 0x1344908
	private IEnumerator coResume(WarBoardDataEntity warBoardDataEntity, Action resumed) { }

	// RVA: 0x13449B0 Offset: 0x13449B0 VA: 0x13449B0
	private void CreateSquare(WarBoardSquareData[] datas) { }

	// RVA: 0x1344B0C Offset: 0x1344B0C VA: 0x1344B0C
	private void CreateRoad(WarBoardRoadEntity[] roads) { }

	// RVA: 0x1344D98 Offset: 0x1344D98 VA: 0x1344D98
	private void CreatePiece() { }

	// RVA: 0x1344F90 Offset: 0x1344F90 VA: 0x1344F90
	private void CreateItem() { }

	// RVA: 0x13450F8 Offset: 0x13450F8 VA: 0x13450F8
	private void CreateTreasure() { }

	// RVA: 0x1345264 Offset: 0x1345264 VA: 0x1345264
	private void CreateEffect() { }

	// RVA: 0x13453D0 Offset: 0x13453D0 VA: 0x13453D0
	private void NondisplacedPieceDeactive() { }

	// RVA: 0x1345478 Offset: 0x1345478 VA: 0x1345478
	private void EnableEditPosition() { }

	// RVA: 0x1345570 Offset: 0x1345570 VA: 0x1345570
	private void DisableEditPosition() { }

	// RVA: 0x1345610 Offset: 0x1345610 VA: 0x1345610
	private void ChangeRoadColorDarkness(bool immediate = False) { }

	// RVA: 0x1345704 Offset: 0x1345704 VA: 0x1345704
	private void ChangeRoadColorNormal(bool immediate = False) { }

	// RVA: 0x13457F8 Offset: 0x13457F8 VA: 0x13457F8
	private void ChangeBgColorDarkness(bool immediate = False) { }

	// RVA: 0x13458A8 Offset: 0x13458A8 VA: 0x13458A8
	private void ChangeBgColorNormal(bool immediate = False) { }

	// RVA: -1 Offset: -1
	public T GetCommonEffectAsset<T>(string name) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C32500 Offset: 0x1C32500 VA: 0x1C32500
	|-WarBoardManager.GetCommonEffectAsset<object>
	|-WarBoardManager.GetCommonEffectAsset<GameObject>
	*/

	// RVA: 0x1345958 Offset: 0x1345958 VA: 0x1345958
	public UIFont GetNumberFont2() { }

	// RVA: 0x1345960 Offset: 0x1345960 VA: 0x1345960
	public UIAtlas GetItemIconAtlas() { }

	// RVA: 0x1345968 Offset: 0x1345968 VA: 0x1345968
	public UIAtlas GetEffectIconAtlas() { }

	// RVA: 0x1345970 Offset: 0x1345970 VA: 0x1345970
	public UIAtlas GetImageSetAtlas() { }

	// RVA: 0x1345978 Offset: 0x1345978 VA: 0x1345978
	public void Finish() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5DF0 Offset: 0xCD5DF0 VA: 0xCD5DF0
	// RVA: 0x1344F88 Offset: 0x1344F88 VA: 0x1344F88
	public WarBoardData get_warBoardData() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E00 Offset: 0xCD5E00 VA: 0xCD5E00
	// RVA: 0x13460DC Offset: 0x13460DC VA: 0x13460DC
	private void set_warBoardData(WarBoardData value) { }

	// RVA: 0x1341700 Offset: 0x1341700 VA: 0x1341700
	public Vector3 GetSquarePosition(int squareIndex) { }

	// RVA: 0x13460E4 Offset: 0x13460E4 VA: 0x13460E4
	public MapCamera GetMapCamera() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E10 Offset: 0xCD5E10 VA: 0xCD5E10
	// RVA: 0x13460EC Offset: 0x13460EC VA: 0x13460EC
	public WarBoardManager.ControllType get_controllType() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E20 Offset: 0xCD5E20 VA: 0xCD5E20
	// RVA: 0x13460F4 Offset: 0x13460F4 VA: 0x13460F4
	private void set_controllType(WarBoardManager.ControllType value) { }

	// RVA: 0x13460FC Offset: 0x13460FC VA: 0x13460FC
	public void ResumeBgm() { }

	// RVA: 0x13461F8 Offset: 0x13461F8 VA: 0x13461F8
	private void TransitionConfigurationMode() { }

	// RVA: 0x1346310 Offset: 0x1346310 VA: 0x1346310
	public void TransitionPlayFromConfigurationMode() { }

	// RVA: 0x1346A54 Offset: 0x1346A54 VA: 0x1346A54
	private void SetupResponse(string result) { }

	// RVA: 0x134767C Offset: 0x134767C VA: 0x134767C
	private void BuffSaveResponse(string result) { }

	// RVA: 0x1347BC4 Offset: 0x1347BC4 VA: 0x1347BC4
	public void TransitionPlayMode() { }

	// RVA: 0x1348FF4 Offset: 0x1348FF4 VA: 0x1348FF4
	public void TransitionBattle() { }

	// RVA: 0x1349024 Offset: 0x1349024 VA: 0x1349024
	public void ReturnBattle() { }

	// RVA: 0x1346A18 Offset: 0x1346A18 VA: 0x1346A18
	public void SetAllTouchBlock(bool isBlock, bool force = False) { }

	// RVA: 0x1349054 Offset: 0x1349054 VA: 0x1349054
	public void SetTouchBlock(bool active, bool force = False) { }

	// RVA: 0x1349148 Offset: 0x1349148 VA: 0x1349148
	public void SetMapTouchEnable(bool enable, bool force = False) { }

	// RVA: 0x1349218 Offset: 0x1349218 VA: 0x1349218
	public void SetTouchEnablePlayerServantSquare(bool isEnable, bool withOnObject = False) { }

	// RVA: 0x134947C Offset: 0x134947C VA: 0x134947C
	public void SetTouchEnableAllSquare(bool isEnable, bool withOnObject = False) { }

	// RVA: 0x1349588 Offset: 0x1349588 VA: 0x1349588
	private void AddTaskForResolveTouchBlockLag() { }

	// RVA: 0x1349760 Offset: 0x1349760 VA: 0x1349760
	private void CTouchDeselectPieceProc() { }

	// RVA: 0x1349DB8 Offset: 0x1349DB8 VA: 0x1349DB8
	public Camera GetUICamera() { }

	// RVA: 0x1349DC0 Offset: 0x1349DC0 VA: 0x1349DC0
	private void CheckResetZoomSwitchButton() { }

	// RVA: 0x1349EB8 Offset: 0x1349EB8 VA: 0x1349EB8
	public void SetForceDispZoomSwitchButton(bool isDisp) { }

	// RVA: 0x1349EC4 Offset: 0x1349EC4 VA: 0x1349EC4
	private void Update() { }

	// RVA: 0x134A1D8 Offset: 0x134A1D8 VA: 0x134A1D8
	protected void Awake() { }

	// RVA: 0x134A228 Offset: 0x134A228 VA: 0x134A228
	private void MasterAttackRequest(WarBoardPieceData attacker, WarBoardPieceData target, WarBoardTaskBase.TaskCallback endCallback) { }

	// RVA: 0x134A5E4 Offset: 0x134A5E4 VA: 0x134A5E4
	private void TrunEndRequest(WarBoardTaskBase.TaskCallback endCallback) { }

	// RVA: 0x134A848 Offset: 0x134A848 VA: 0x134A848
	private void ResponseWarBoardDataEntity(string result) { }

	// RVA: 0x134A938 Offset: 0x134A938 VA: 0x134A938
	private void ServantAttackRequest(WarBoardPieceData attacker, WarBoardPieceData target) { }

	// RVA: 0x134AF24 Offset: 0x134AF24 VA: 0x134AF24
	private void BattleSetupResponse(string result) { }

	// RVA: 0x134B044 Offset: 0x134B044 VA: 0x134B044
	private void ChangeBattle() { }

	// RVA: 0x1347EF0 Offset: 0x1347EF0 VA: 0x1347EF0
	public void TreasureGetRequest(WarBoardTreasureData treasureData) { }

	// RVA: 0x134B0FC Offset: 0x134B0FC VA: 0x134B0FC
	private void TreasureResponse(string response) { }

	// RVA: 0x134B238 Offset: 0x134B238 VA: 0x134B238
	private void GameSetRequest(WarBoardManager.WarBoardResult result, WarBoardTaskBase.TaskCallback endCallback) { }

	// RVA: 0x134B470 Offset: 0x134B470 VA: 0x134B470
	private void GameSetupResponse(string result) { }

	// RVA: 0x134B60C Offset: 0x134B60C VA: 0x134B60C
	public BattleData GetBattleData() { }

	// RVA: 0x134B614 Offset: 0x134B614 VA: 0x134B614
	private void InitializeLogic(WarBoardDataEntity warBoardData, bool loadServerData) { }

	// RVA: 0x134BE74 Offset: 0x134BE74 VA: 0x134BE74
	public void UpdateFormServerData_BattleLogic(WarBoardDataEntity warBoardData) { }

	// RVA: 0x1346C94 Offset: 0x1346C94 VA: 0x1346C94
	public void UpdatePlayerServant(WarBoardDataEntity warBoardData) { }

	// RVA: 0x134B8D0 Offset: 0x134B8D0 VA: 0x134B8D0
	private void CreatePlayerServantList(bool loadServerData, CommandCodeInfo[] userCommandCode) { }

	// RVA: 0x134BBBC Offset: 0x134BBBC VA: 0x134BBBC
	private void CreateEnemyServantList(bool loadServerData, CommandCodeInfo[] userCommandCode) { }

	// RVA: 0x134BEB0 Offset: 0x134BEB0 VA: 0x134BEB0
	private void SetBattleServantFromCurrentData(BattleServantData servantData) { }

	// RVA: 0x134BFF0 Offset: 0x134BFF0 VA: 0x134BFF0
	private void SetCurrentDataFromBattleServant(BattleServantData servantData) { }

	// RVA: 0x134C130 Offset: 0x134C130 VA: 0x134C130
	public BattleServantData GetBattleServant(long userSvtId) { }

	// RVA: 0x134C280 Offset: 0x134C280 VA: 0x134C280
	public BattleServantData GetBattleServantFromUniqueId(int uniqueId) { }

	// RVA: 0x1346D3C Offset: 0x1346D3C VA: 0x1346D3C
	private void actPlayerPassiveSkill() { }

	// RVA: 0x1347188 Offset: 0x1347188 VA: 0x1347188
	private void actEnemyPtPassiveSkill(int actUniqueId = 0, bool isShift = False) { }

	// RVA: 0x134C3D0 Offset: 0x134C3D0 VA: 0x134C3D0
	private void actPassiveSkill(BattleSkillInfoData skillInfo, bool isShift = False) { }

	// RVA: 0x1343AC0 Offset: 0x1343AC0 VA: 0x1343AC0
	public bool ExecuteProcList(WarBoardPieceData pieceData, int targetId, int[] funcList, DataVals[] dataVals, int skillId = 0, int[] pttargetIds, bool isUpdateStatus = True) { }

	// RVA: 0x134C7C8 Offset: 0x134C7C8 VA: 0x134C7C8
	public void RemoveSkillBuff(BattleServantData battleServant, int skillId) { }

	// RVA: 0x13477F8 Offset: 0x13477F8 VA: 0x13477F8
	private void LoadBattleResourceCache(Action endCallback) { }

	// RVA: 0x134C7D4 Offset: 0x134C7D4 VA: 0x134C7D4
	private void LoadBattleBgCache(Action endCallback) { }

	// RVA: 0x134D228 Offset: 0x134D228 VA: 0x134D228
	private void DownloadServantVoice(Action endCallback) { }

	// RVA: 0x134CB30 Offset: 0x134CB30 VA: 0x134CB30
	private void LoadServantAssetCache(Action endCallback) { }

	// RVA: 0x1345F9C Offset: 0x1345F9C VA: 0x1345F9C
	private void ReleaseBattleResourceCache() { }

	// RVA: 0x134D620 Offset: 0x134D620 VA: 0x134D620
	private List<string> GetServantAssetNames(BattleServantData svtData) { }

	// RVA: 0x134D7F4 Offset: 0x134D7F4 VA: 0x134D7F4
	private List<string> GetServantAssetNames(int svtId, int limit, int weapon, int cameraId, int overwriteVoideId, int appearanceId, int[] commandCodeIds, List<BattleSkillInfoData> skillList, int effectWeapon, int effectFolder) { }

	// RVA: 0x134D4C8 Offset: 0x134D4C8 VA: 0x134D4C8
	private List<string> GetServantVoiceNames(BattleServantData svtData) { }

	// RVA: 0x134DE6C Offset: 0x134DE6C VA: 0x134DE6C
	private List<string> GetServantVoiceNames(int svtId, int limit, int weapon, int cameraId, int overwriteVoideId, int appearanceId, int[] commandCodeIds, List<BattleSkillInfoData> skillList) { }

	// RVA: 0x134DBC4 Offset: 0x134DBC4 VA: 0x134DBC4
	private string getBattleActorAssetName(int svtId, int limitCount, int appearanceId = 0, bool isForce = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5E30 Offset: 0xCD5E30 VA: 0xCD5E30
	// RVA: 0x134DCB8 Offset: 0x134DCB8 VA: 0x134DCB8
	private IEnumerable<string> GetCommandCodeAssetNames(int[] commandCodeIds) { }

	// RVA: 0x134DD44 Offset: 0x134DD44 VA: 0x134DD44
	public string GetWeaponEffectAssetName(int weapongroup, int effectFolder) { }

	// RVA: 0x134E030 Offset: 0x134E030 VA: 0x134E030
	private string getServantVoiceName(int svtId, int limitCount, int overwriteSvtVoiceId) { }

	// RVA: 0x134E12C Offset: 0x134E12C VA: 0x134E12C
	public string getSkillAnyVoiceName(BattleSkillInfoData _skillInfo) { }

	// RVA: 0x1341CE0 Offset: 0x1341CE0 VA: 0x1341CE0
	public bool get_isSelectedPiece() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E40 Offset: 0xCD5E40 VA: 0xCD5E40
	// RVA: 0x134E248 Offset: 0x134E248 VA: 0x134E248
	public uint get_lastSelectPieceUniqueIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E50 Offset: 0xCD5E50 VA: 0xCD5E50
	// RVA: 0x134E250 Offset: 0x134E250 VA: 0x134E250
	private void set_lastSelectPieceUniqueIndex(uint value) { }

	// RVA: 0x134E258 Offset: 0x134E258 VA: 0x134E258
	private WarBoardActionPointEntity get_warBoardActionPointEntity() { }

	// RVA: 0x134E2D8 Offset: 0x134E2D8 VA: 0x134E2D8
	public void Retire(Action callback) { }

	// RVA: 0x134E3AC Offset: 0x134E3AC VA: 0x134E3AC
	public bool IsNowTurn(WarBoardPieceData piece) { }

	// RVA: 0x134E438 Offset: 0x134E438 VA: 0x134E438
	public bool IsNowTurn(int forceId, int groupId) { }

	// RVA: 0x134A038 Offset: 0x134A038 VA: 0x134A038
	public bool IsPlayerTurn() { }

	// RVA: 0x134E45C Offset: 0x134E45C VA: 0x134E45C
	public bool JudgmentGameSet() { }

	// RVA: 0x134ECDC Offset: 0x134ECDC VA: 0x134ECDC
	private void EndGameSetRequest() { }

	// RVA: 0x1348428 Offset: 0x1348428 VA: 0x1348428
	private void ChangeTurn(bool playStartBattle) { }

	// RVA: 0x134ED94 Offset: 0x134ED94 VA: 0x134ED94
	private void MoveCameraLastPiece(List<WarBoardTaskBase> performances) { }

	// RVA: 0x1350AD4 Offset: 0x1350AD4 VA: 0x1350AD4
	private void EndPlayerTurnEffect() { }

	// RVA: 0x1350CC4 Offset: 0x1350CC4 VA: 0x1350CC4
	private void EndEnemyTurnEffect() { }

	// RVA: 0x1350D4C Offset: 0x1350D4C VA: 0x1350D4C
	public void PlayBgmForPlaying() { }

	// RVA: 0x1350E14 Offset: 0x1350E14 VA: 0x1350E14
	public void NextTurn(bool startEffect = False) { }

	// RVA: 0x1351018 Offset: 0x1351018 VA: 0x1351018
	public bool IsSelectedPieceSameForce(int forceId) { }

	// RVA: 0x1351058 Offset: 0x1351058 VA: 0x1351058
	public bool IsSelectedPieceSame(WarBoardPieceData piece) { }

	// RVA: 0x13510B4 Offset: 0x13510B4 VA: 0x13510B4
	public bool EnableAttack() { }

	// RVA: 0x13510FC Offset: 0x13510FC VA: 0x13510FC
	public bool EnableMove(bool swap = False, bool isContainMaster = False) { }

	// RVA: 0x1351178 Offset: 0x1351178 VA: 0x1351178
	public bool EnableAction() { }

	// RVA: 0x13511D8 Offset: 0x13511D8 VA: 0x13511D8
	public bool ExistEnableActionPiece() { }

	// RVA: 0x1351314 Offset: 0x1351314 VA: 0x1351314
	public bool ExistEnableActionPieceExtend() { }

	// RVA: 0x13519E4 Offset: 0x13519E4 VA: 0x13519E4
	public void SelectPiece(WarBoardPieceData piece) { }

	// RVA: 0x1351518 Offset: 0x1351518 VA: 0x1351518
	public bool CheckSelectSquare(WarBoardPieceData piece, WarBoardSquareData square, bool isUpdateLabel = True) { }

	// RVA: 0x1349A3C Offset: 0x1349A3C VA: 0x1349A3C
	public void DeselectPiece(bool showActionTarget = True, int[] removeSquareIndex) { }

	// RVA: 0x1351DAC Offset: 0x1351DAC VA: 0x1351DAC
	private void CompatibilityDisplay() { }

	// RVA: 0x1350BF8 Offset: 0x1350BF8 VA: 0x1350BF8
	private void ShowActionTarget() { }

	// RVA: 0x13508F8 Offset: 0x13508F8 VA: 0x13508F8
	private void HideActionTarget() { }

	// RVA: 0x1341CF8 Offset: 0x1341CF8 VA: 0x1341CF8
	public void SelectedPieceAction(int targetSquareIndex) { }

	// RVA: 0x13533FC Offset: 0x13533FC VA: 0x13533FC
	public bool PieceAction(int forceId, int groupId, int unitIndex, int targetSquareIndex, WarBoardTaskBase endTask) { }

	// RVA: 0x1352690 Offset: 0x1352690 VA: 0x1352690
	public bool PieceAction(WarBoardPieceData actionPiece, int targetSquareIndex, WarBoardTaskBase endTask) { }

	// RVA: 0x1353490 Offset: 0x1353490 VA: 0x1353490
	private void MoveEndProc() { }

	// RVA: 0x1347FF8 Offset: 0x1347FF8 VA: 0x1347FF8
	private bool UpdateFromServerData(WarBoardDataEntity warBoardDataEntity, bool forceUpdate = False) { }

	// RVA: 0x1353708 Offset: 0x1353708 VA: 0x1353708
	private void OpenAttackConfirmPopup(Action okCall, Action cancelCall) { }

	// RVA: 0x1352598 Offset: 0x1352598 VA: 0x1352598
	private void OpenSwapMoveConfirmPopup(bool isContainMaster, Action okCall, Action cancelCall) { }

	// RVA: 0x1353BEC Offset: 0x1353BEC VA: 0x1353BEC
	public WarBoardCommonEffectPerformance CreateAttackEffectTask(Vector3 position, bool isLocal) { }

	// RVA: 0x1353CFC Offset: 0x1353CFC VA: 0x1353CFC
	public WarBoardCommonEffectPerformance CreateEncountkEffectTask(Vector3 position, bool isLocal) { }

	// RVA: 0x1353E0C Offset: 0x1353E0C VA: 0x1353E0C
	public WarBoardMapCameraPerformance GetCameraPerformanceTask(Nullable<Vector3> position, Nullable<float> size, bool calcBoardToCamera = True) { }

	// RVA: 0x1354030 Offset: 0x1354030 VA: 0x1354030
	public void DispBattleRange(int[] squareIndecis, bool onlyServant = True) { }

	// RVA: 0x135414C Offset: 0x135414C VA: 0x135414C
	public void NondispBattleRange(int[] squareIndecis) { }

	// RVA: 0x1354240 Offset: 0x1354240 VA: 0x1354240
	public WarBoardTaskBase GetCameraShakeTask() { }

	// RVA: 0x1350A28 Offset: 0x1350A28 VA: 0x1350A28
	public Vector2 BoardObjectPostionToCameraPosition(Vector3 pos, float targetSize) { }

	// RVA: 0x13522E4 Offset: 0x13522E4 VA: 0x13522E4
	public float GetCameraSize(Vector3 basePosition, int[] squareindexies, float margin) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E60 Offset: 0xCD5E60 VA: 0xCD5E60
	// RVA: 0x13508F0 Offset: 0x13508F0 VA: 0x13508F0
	public bool get_notOnboardSkillFlag() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E70 Offset: 0xCD5E70 VA: 0xCD5E70
	// RVA: 0x13509A0 Offset: 0x13509A0 VA: 0x13509A0
	public void set_notOnboardSkillFlag(bool value) { }

	// RVA: 0x134F194 Offset: 0x134F194 VA: 0x134F194
	private void OnBoardSkillStart(WarBoardOnboardSkillEntity.SkillTiming timing, int turn, List<WarBoardTaskBase> performances, Action endCallback) { }

	// RVA: 0x13468E8 Offset: 0x13468E8 VA: 0x13468E8
	private bool get_IsPartyMenuOpen() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5E80 Offset: 0xCD5E80 VA: 0xCD5E80
	// RVA: 0x13542C4 Offset: 0x13542C4 VA: 0x13542C4
	private IEnumerator InitPartyMenu() { }

	// RVA: 0x1345E74 Offset: 0x1345E74 VA: 0x1345E74
	private void ReleasePartyOrganization() { }

	// RVA: 0x135433C Offset: 0x135433C VA: 0x135433C
	public void OpenPartyMenu(WarBoardPieceData focusPiece) { }

	// RVA: 0x1346988 Offset: 0x1346988 VA: 0x1346988
	public void ClosePartyMenu() { }

	// RVA: 0x1354584 Offset: 0x1354584 VA: 0x1354584
	public void OnFinishedEditPiece(WarBoardPartyOrganizationMenu.ResponseData[] dataList) { }

	// RVA: 0x1354968 Offset: 0x1354968 VA: 0x1354968
	public void SquareSelect(int squareIndex) { }

	// RVA: 0x13544E4 Offset: 0x13544E4 VA: 0x13544E4
	public void SquarDeselect() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5E90 Offset: 0xCD5E90 VA: 0xCD5E90
	// RVA: 0x13549C0 Offset: 0x13549C0 VA: 0x13549C0
	public bool get_IsEditingUserEquip() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5EA0 Offset: 0xCD5EA0 VA: 0xCD5EA0
	// RVA: 0x13549C8 Offset: 0x13549C8 VA: 0x13549C8
	private void set_IsEditingUserEquip(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5EB0 Offset: 0xCD5EB0 VA: 0xCD5EB0
	// RVA: 0x13549D4 Offset: 0x13549D4 VA: 0x13549D4
	public SceneJumpInfo get_UserEquipSceneInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5EC0 Offset: 0xCD5EC0 VA: 0xCD5EC0
	// RVA: 0x13549DC Offset: 0x13549DC VA: 0x13549DC
	private void set_UserEquipSceneInfo(SceneJumpInfo value) { }

	// RVA: 0x13549E4 Offset: 0x13549E4 VA: 0x13549E4
	public void OpenUserEquipScene() { }

	// RVA: 0x1354ABC Offset: 0x1354ABC VA: 0x1354ABC
	public void OnCloseUserEquipScene() { }

	// RVA: 0x1354B40 Offset: 0x1354B40 VA: 0x1354B40
	public void ShowServantSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x1354F1C Offset: 0x1354F1C VA: 0x1354F1C
	public void ShowServantEquipSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x13426A4 Offset: 0x13426A4 VA: 0x13426A4
	public void ShowItemSimplePopup(WarBoardItemData itemData, Vector3 squarePosition) { }

	// RVA: 0x135531C Offset: 0x135531C VA: 0x135531C
	public void ShowEffectSimplePopup(WarBoardEffectData effectData, Vector3 squarePosition) { }

	// RVA: 0x13521F0 Offset: 0x13521F0 VA: 0x13521F0
	public void HideSimplePopup(Action hideCompleteCallback) { }

	// RVA: 0x13556C0 Offset: 0x13556C0 VA: 0x13556C0
	public void ShowServantDetailPopup(WarBoardPieceData selectedPiece, bool playOpenSe = True) { }

	// RVA: 0x1355B6C Offset: 0x1355B6C VA: 0x1355B6C
	public void HideServantDetailPopup() { }

	// RVA: 0x1353800 Offset: 0x1353800 VA: 0x1353800
	public void ShowAttackConfirmPopup(Action<bool> clickCallback) { }

	// RVA: 0x1355CBC Offset: 0x1355CBC VA: 0x1355CBC
	public void HideAttackConfirmPopup(Action hideCallback) { }

	// RVA: 0x13539F4 Offset: 0x13539F4 VA: 0x13539F4
	public void ShowSwapConfirmPopup(bool isContainMaster, Action<bool> clickCallback) { }

	// RVA: 0x1355D9C Offset: 0x1355D9C VA: 0x1355D9C
	public void HideSwapConfirmPopup(Action hideCallback) { }

	// RVA: 0x1355E7C Offset: 0x1355E7C VA: 0x1355E7C
	public void ShowTurnEndConfirmPopup(Action<bool> clickCallback) { }

	// RVA: 0x1355FD8 Offset: 0x1355FD8 VA: 0x1355FD8
	public void HideTurnEndConfirmPopup(Action hideCallback) { }

	// RVA: 0x13560B8 Offset: 0x13560B8 VA: 0x13560B8
	public void ShowActionCountDecreaseNoticePopup(Action<bool> clickCallback) { }

	// RVA: 0x13561EC Offset: 0x13561EC VA: 0x13561EC
	public void HideActionCountDecreaseNoticePopup(Action hideCallback) { }

	// RVA: 0x1354CFC Offset: 0x1354CFC VA: 0x1354CFC
	private void PrShowServantSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x1354F20 Offset: 0x1354F20 VA: 0x1354F20
	private void PrShowServantEquipSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x1355120 Offset: 0x1355120 VA: 0x1355120
	private void PrShowItemSimplePopup(WarBoardItemData itemData, Vector3 squarePosition) { }

	// RVA: 0x13563AC Offset: 0x13563AC VA: 0x13563AC
	private void AddItemSimplePopup(int squareIndex) { }

	// RVA: 0x13554B8 Offset: 0x13554B8 VA: 0x13554B8
	private void PrShowEffectSimplePopup(WarBoardEffectData effectData, Vector3 squarePosition) { }

	// RVA: 0x13562CC Offset: 0x13562CC VA: 0x13562CC
	private void AddEffectSimplePopup(int squareIndex) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5ED0 Offset: 0xCD5ED0 VA: 0xCD5ED0
	// RVA: 0x1354C38 Offset: 0x1354C38 VA: 0x1354C38
	private IEnumerator ReplaceServantSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5EE0 Offset: 0xCD5EE0 VA: 0xCD5EE0
	// RVA: 0x135505C Offset: 0x135505C VA: 0x135505C
	private IEnumerator ReplaceItemSimplePopup(WarBoardItemData itemData, Vector3 squarePosition) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5EF0 Offset: 0xCD5EF0 VA: 0xCD5EF0
	// RVA: 0x13553F4 Offset: 0x13553F4 VA: 0x13553F4
	private IEnumerator ReplaceEffectSimplePopup(WarBoardEffectData effectData, Vector3 squarePosition) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5F00 Offset: 0xCD5F00 VA: 0xCD5F00
	// RVA: 0x13564A4 Offset: 0x13564A4 VA: 0x13564A4
	private IEnumerator InitializeOnPartOfPopupControl() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5F10 Offset: 0xCD5F10 VA: 0xCD5F10
	// RVA: 0x135651C Offset: 0x135651C VA: 0x135651C
	private IEnumerator ReloadBuffIconAtlas() { }

	// RVA: 0x1345BD0 Offset: 0x1345BD0 VA: 0x1345BD0
	private void FinishOnPartOfPopupControl() { }

	// RVA: 0x1355AF4 Offset: 0x1355AF4 VA: 0x1355AF4
	private void ReleaseAssetsForServantDetailPopup() { }

	// RVA: 0x134B0E8 Offset: 0x134B0E8 VA: 0x134B0E8
	public void PauseScheduler(bool immediate = False) { }

	// RVA: 0x1356580 Offset: 0x1356580 VA: 0x1356580
	public void ResumeScheduler() { }

	// RVA: 0x1342C4C Offset: 0x1342C4C VA: 0x1342C4C
	public void AddTask(bool enableInput, WarBoardTaskBase[] performances) { }

	// RVA: 0x13509AC Offset: 0x13509AC VA: 0x13509AC
	public void AddTask(bool enableInput, List<WarBoardTaskBase> performances) { }

	// RVA: 0x1356588 Offset: 0x1356588 VA: 0x1356588
	public void InsertTask(bool enableInput, WarBoardTaskBase[] performances) { }

	// RVA: 0x1356714 Offset: 0x1356714 VA: 0x1356714
	public void InsertTask(bool enableInput, List<WarBoardTaskBase> performances) { }

	// RVA: 0x1356790 Offset: 0x1356790 VA: 0x1356790
	public bool IsNonBlockTaskEnmpty() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5F20 Offset: 0xCD5F20 VA: 0xCD5F20
	// RVA: 0x13567FC Offset: 0x13567FC VA: 0x13567FC
	private IEnumerator TaskExecute() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5F30 Offset: 0xCD5F30 VA: 0xCD5F30
	// RVA: 0x135686C Offset: 0x135686C VA: 0x135686C
	private IEnumerator NonBlockTaskExecute() { }

	// RVA: 0x13568E4 Offset: 0x13568E4 VA: 0x13568E4
	public static bool IEnumeratorExecute(IEnumerator enumerator) { }

	// RVA: 0x134A058 Offset: 0x134A058 VA: 0x134A058
	private void TaskUpdate() { }

	// RVA: 0x1356BD4 Offset: 0x1356BD4 VA: 0x1356BD4
	private void ShowWarBoardIntroTutorial(Action callbackAfter) { }

	// RVA: 0x1356CC0 Offset: 0x1356CC0 VA: 0x1356CC0
	private void ShowWarBoardMapTutorial() { }

	// RVA: 0x13548CC Offset: 0x13548CC VA: 0x13548CC
	private void ShowWarBoardSetUpTutorial() { }

	// RVA: 0x1350B5C Offset: 0x1350B5C VA: 0x1350B5C
	private void ShowWarBoardStartTutorial() { }

	// RVA: 0x1356D5C Offset: 0x1356D5C VA: 0x1356D5C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5F40 Offset: 0xCD5F40 VA: 0xCD5F40
	// RVA: 0x1356E58 Offset: 0x1356E58 VA: 0x1356E58
	private static bool <TransitionPlayFromConfigurationMode>m__0(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5F50 Offset: 0xCD5F50 VA: 0xCD5F50
	// RVA: 0x1356E84 Offset: 0x1356E84 VA: 0x1356E84
	private static bool <TransitionPlayFromConfigurationMode>m__1(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5F60 Offset: 0xCD5F60 VA: 0xCD5F60
	// RVA: 0x1356EE0 Offset: 0x1356EE0 VA: 0x1356EE0
	private static int <TransitionPlayFromConfigurationMode>m__2(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5F70 Offset: 0xCD5F70 VA: 0xCD5F70
	// RVA: 0x1356F0C Offset: 0x1356F0C VA: 0x1356F0C
	private static long <TransitionPlayFromConfigurationMode>m__3(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5F80 Offset: 0xCD5F80 VA: 0xCD5F80
	// RVA: 0x1356F38 Offset: 0x1356F38 VA: 0x1356F38
	private static long <TransitionPlayFromConfigurationMode>m__4(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5F90 Offset: 0xCD5F90 VA: 0xCD5F90
	// RVA: 0x1356F64 Offset: 0x1356F64 VA: 0x1356F64
	private static int <SetTouchEnablePlayerServantSquare>m__5(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5FA0 Offset: 0xCD5FA0 VA: 0xCD5FA0
	// RVA: 0x1356F90 Offset: 0x1356F90 VA: 0x1356F90
	private void <AddTaskForResolveTouchBlockLag>m__6() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5FB0 Offset: 0xCD5FB0 VA: 0xCD5FB0
	// RVA: 0x1356FC4 Offset: 0x1356FC4 VA: 0x1356FC4
	private void <TreasureResponse>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5FC0 Offset: 0xCD5FC0 VA: 0xCD5FC0
	// RVA: 0x1357010 Offset: 0x1357010 VA: 0x1357010
	private static int <actPlayerPassiveSkill>m__8(BattleSkillInfoData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5FD0 Offset: 0xCD5FD0 VA: 0xCD5FD0
	// RVA: 0x1357038 Offset: 0x1357038 VA: 0x1357038
	private static int <actEnemyPtPassiveSkill>m__9(BattleSkillInfoData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5FE0 Offset: 0xCD5FE0 VA: 0xCD5FE0
	// RVA: 0x1357060 Offset: 0x1357060 VA: 0x1357060
	private static void <JudgmentGameSet>m__A() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5FF0 Offset: 0xCD5FF0 VA: 0xCD5FF0
	// RVA: 0x1357204 Offset: 0x1357204 VA: 0x1357204
	private static void <JudgmentGameSet>m__B() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6000 Offset: 0xCD6000 VA: 0xCD6000
	// RVA: 0x13573F0 Offset: 0x13573F0 VA: 0x13573F0
	private void <ChangeTurn>m__C() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6010 Offset: 0xCD6010 VA: 0xCD6010
	// RVA: 0x13574BC Offset: 0x13574BC VA: 0x13574BC
	private void <ChangeTurn>m__D() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6020 Offset: 0xCD6020 VA: 0xCD6020
	// RVA: 0x13574C0 Offset: 0x13574C0 VA: 0x13574C0
	private void <ChangeTurn>m__E() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6030 Offset: 0xCD6030 VA: 0xCD6030
	// RVA: 0x13574C4 Offset: 0x13574C4 VA: 0x13574C4
	private bool <ChangeTurn>m__F(WarBoardUserMasterData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6040 Offset: 0xCD6040 VA: 0xCD6040
	// RVA: 0x1357518 Offset: 0x1357518 VA: 0x1357518
	private static void <ChangeTurn>m__10(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6050 Offset: 0xCD6050 VA: 0xCD6050
	// RVA: 0x1357544 Offset: 0x1357544 VA: 0x1357544
	private static void <ChangeTurn>m__11(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6060 Offset: 0xCD6060 VA: 0xCD6060
	// RVA: 0x1357570 Offset: 0x1357570 VA: 0x1357570
	private static bool <MoveCameraLastPiece>m__12(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6070 Offset: 0xCD6070 VA: 0xCD6070
	// RVA: 0x135759C Offset: 0x135759C VA: 0x135759C
	private bool <MoveCameraLastPiece>m__13(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6080 Offset: 0xCD6080 VA: 0xCD6080
	// RVA: 0x13575E0 Offset: 0x13575E0 VA: 0x13575E0
	private static int <MoveCameraLastPiece>m__14(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6090 Offset: 0xCD6090 VA: 0xCD6090
	// RVA: 0x135760C Offset: 0x135760C VA: 0x135760C
	private static void <NextTurn>m__15(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD60A0 Offset: 0xCD60A0 VA: 0xCD60A0
	// RVA: 0x1357638 Offset: 0x1357638 VA: 0x1357638
	private static bool <ExistEnableActionPiece>m__16(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD60B0 Offset: 0xCD60B0 VA: 0xCD60B0
	// RVA: 0x1357690 Offset: 0x1357690 VA: 0x1357690
	private static bool <CompatibilityDisplay>m__17(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD60C0 Offset: 0xCD60C0 VA: 0xCD60C0
	// RVA: 0x1357708 Offset: 0x1357708 VA: 0x1357708
	private bool <MoveEndProc>m__18(WarBoardUserMasterData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD60D0 Offset: 0xCD60D0 VA: 0xCD60D0
	// RVA: 0x135775C Offset: 0x135775C VA: 0x135775C
	private bool <UpdateFromServerData>m__19(WarBoardUserMasterData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD60E0 Offset: 0xCD60E0 VA: 0xCD60E0
	// RVA: 0x13577B0 Offset: 0x13577B0 VA: 0x13577B0
	private static bool <OnFinishedEditPiece>m__1A(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD60F0 Offset: 0xCD60F0 VA: 0xCD60F0
	// RVA: 0x13577E8 Offset: 0x13577E8 VA: 0x13577E8
	private void <PrShowServantSimplePopup>m__1B() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6100 Offset: 0xCD6100 VA: 0xCD6100
	// RVA: 0x13577F0 Offset: 0x13577F0 VA: 0x13577F0
	private void <PrShowItemSimplePopup>m__1C() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6110 Offset: 0xCD6110 VA: 0xCD6110
	// RVA: 0x13577F8 Offset: 0x13577F8 VA: 0x13577F8
	private void <PrShowEffectSimplePopup>m__1D() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6120 Offset: 0xCD6120 VA: 0xCD6120
	// RVA: 0x1357800 Offset: 0x1357800 VA: 0x1357800
	private void <InsertTask>m__1E(WarBoardManager.WarBoardPerformanceQueue x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6130 Offset: 0xCD6130 VA: 0xCD6130
	// RVA: 0x1357878 Offset: 0x1357878 VA: 0x1357878
	private void <ShowWarBoardMapTutorial>m__1F() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6140 Offset: 0xCD6140 VA: 0xCD6140
	// RVA: 0x1357884 Offset: 0x1357884 VA: 0x1357884
	private void <ShowWarBoardSetUpTutorial>m__20() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD6150 Offset: 0xCD6150 VA: 0xCD6150
	// RVA: 0x1357890 Offset: 0x1357890 VA: 0x1357890
