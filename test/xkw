	// RVA: 0x2262BE4 Offset: 0x2262BE4 VA: 0x2262BE4 Slot: 12
	protected virtual KeyParameter GenerateRecordMacKey(IStreamCipher cipher) { }

	// RVA: 0x2262D1C Offset: 0x2262D1C VA: 0x2262D1C Slot: 13
	protected virtual byte[] CalculateRecordMac(KeyParameter macKey, byte[] additionalData, byte[] buf, int off, int len) { }

	// RVA: 0x2262EDC Offset: 0x2262EDC VA: 0x2262EDC Slot: 14
	protected virtual void UpdateRecordMacLength(IMac mac, int len) { }

	// RVA: 0x2262FCC Offset: 0x2262FCC VA: 0x2262FCC Slot: 15
	protected virtual void UpdateRecordMacText(IMac mac, byte[] buf, int off, int len) { }

	// RVA: 0x2263184 Offset: 0x2263184 VA: 0x2263184 Slot: 16
	protected virtual byte[] GetAdditionalData(long seqNo, byte type, int len) { }

	// RVA: 0x22632E8 Offset: 0x22632E8 VA: 0x22632E8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ChangeCipherSpec // TypeDefIndex: 4905
{
	// Fields
	public const byte change_cipher_spec = 1;

	// Methods

	// RVA: 0x226334C Offset: 0x226334C VA: 0x226334C
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class CipherSuite // TypeDefIndex: 4906
{
	// Fields
	public const int TLS_NULL_WITH_NULL_NULL = 0;
	public const int TLS_RSA_WITH_NULL_MD5 = 1;
	public const int TLS_RSA_WITH_NULL_SHA = 2;
	public const int TLS_RSA_EXPORT_WITH_RC4_40_MD5 = 3;
	public const int TLS_RSA_WITH_RC4_128_MD5 = 4;
	public const int TLS_RSA_WITH_RC4_128_SHA = 5;
	public const int TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6;
	public const int TLS_RSA_WITH_IDEA_CBC_SHA = 7;
	public const int TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = 8;
	public const int TLS_RSA_WITH_DES_CBC_SHA = 9;
	public const int TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10;
	public const int TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11;
	public const int TLS_DH_DSS_WITH_DES_CBC_SHA = 12;
	public const int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;
	public const int TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14;
	public const int TLS_DH_RSA_WITH_DES_CBC_SHA = 15;
	public const int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;
	public const int TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17;
	public const int TLS_DHE_DSS_WITH_DES_CBC_SHA = 18;
	public const int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;
	public const int TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20;
	public const int TLS_DHE_RSA_WITH_DES_CBC_SHA = 21;
	public const int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;
	public const int TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23;
	public const int TLS_DH_anon_WITH_RC4_128_MD5 = 24;
	public const int TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25;
	public const int TLS_DH_anon_WITH_DES_CBC_SHA = 26;
	public const int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;
	public const int TLS_RSA_WITH_AES_128_CBC_SHA = 47;
	public const int TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48;
	public const int TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49;
	public const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50;
	public const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51;
	public const int TLS_DH_anon_WITH_AES_128_CBC_SHA = 52;
	public const int TLS_RSA_WITH_AES_256_CBC_SHA = 53;
	public const int TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54;
	public const int TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55;
	public const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56;
	public const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57;
	public const int TLS_DH_anon_WITH_AES_256_CBC_SHA = 58;
	public const int TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = 65;
	public const int TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 66;
	public const int TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 67;
	public const int TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 68;
	public const int TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 69;
	public const int TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA = 70;
	public const int TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = 132;
	public const int TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 133;
	public const int TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 134;
	public const int TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 135;
	public const int TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 136;
	public const int TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA = 137;
	public const int TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 186;
	public const int TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 187;
	public const int TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 188;
	public const int TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 189;
	public const int TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 190;
	public const int TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 = 191;
	public const int TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 192;
	public const int TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 193;
	public const int TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 194;
	public const int TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 195;
	public const int TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 196;
	public const int TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 = 197;
	public const int TLS_RSA_WITH_SEED_CBC_SHA = 150;
	public const int TLS_DH_DSS_WITH_SEED_CBC_SHA = 151;
	public const int TLS_DH_RSA_WITH_SEED_CBC_SHA = 152;
	public const int TLS_DHE_DSS_WITH_SEED_CBC_SHA = 153;
	public const int TLS_DHE_RSA_WITH_SEED_CBC_SHA = 154;
	public const int TLS_DH_anon_WITH_SEED_CBC_SHA = 155;
	public const int TLS_PSK_WITH_RC4_128_SHA = 138;
	public const int TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139;
	public const int TLS_PSK_WITH_AES_128_CBC_SHA = 140;
	public const int TLS_PSK_WITH_AES_256_CBC_SHA = 141;
	public const int TLS_DHE_PSK_WITH_RC4_128_SHA = 142;
	public const int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143;
	public const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144;
	public const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145;
	public const int TLS_RSA_PSK_WITH_RC4_128_SHA = 146;
	public const int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147;
	public const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148;
	public const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149;
	public const int TLS_ECDH_ECDSA_WITH_NULL_SHA = 49153;
	public const int TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 49154;
	public const int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 49155;
	public const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 49156;
	public const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 49157;
	public const int TLS_ECDHE_ECDSA_WITH_NULL_SHA = 49158;
	public const int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 49159;
	public const int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 49160;
	public const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161;
	public const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162;
	public const int TLS_ECDH_RSA_WITH_NULL_SHA = 49163;
	public const int TLS_ECDH_RSA_WITH_RC4_128_SHA = 49164;
	public const int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 49165;
	public const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 49166;
	public const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 49167;
	public const int TLS_ECDHE_RSA_WITH_NULL_SHA = 49168;
	public const int TLS_ECDHE_RSA_WITH_RC4_128_SHA = 49169;
	public const int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 49170;
	public const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171;
	public const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172;
	public const int TLS_ECDH_anon_WITH_NULL_SHA = 49173;
	public const int TLS_ECDH_anon_WITH_RC4_128_SHA = 49174;
	public const int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 49175;
	public const int TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 49176;
	public const int TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 49177;
	public const int TLS_PSK_WITH_NULL_SHA = 44;
	public const int TLS_DHE_PSK_WITH_NULL_SHA = 45;
	public const int TLS_RSA_PSK_WITH_NULL_SHA = 46;
	public const int TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 49178;
	public const int TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 49179;
	public const int TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 49180;
	public const int TLS_SRP_SHA_WITH_AES_128_CBC_SHA = 49181;
	public const int TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 49182;
	public const int TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 49183;
	public const int TLS_SRP_SHA_WITH_AES_256_CBC_SHA = 49184;
	public const int TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 49185;
	public const int TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 49186;
	public const int TLS_RSA_WITH_NULL_SHA256 = 59;
	public const int TLS_RSA_WITH_AES_128_CBC_SHA256 = 60;
	public const int TLS_RSA_WITH_AES_256_CBC_SHA256 = 61;
	public const int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62;
	public const int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63;
	public const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64;
	public const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103;
	public const int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104;
	public const int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105;
	public const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106;
	public const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107;
	public const int TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108;
	public const int TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109;
	public const int TLS_RSA_WITH_AES_128_GCM_SHA256 = 156;
	public const int TLS_RSA_WITH_AES_256_GCM_SHA384 = 157;
	public const int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158;
	public const int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159;
	public const int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160;
	public const int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161;
	public const int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162;
	public const int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163;
	public const int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164;
	public const int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165;
	public const int TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166;
	public const int TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167;
	public const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187;
	public const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 49188;
	public const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 49189;
	public const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 49190;
	public const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191;
	public const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 49192;
	public const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 49193;
	public const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 49194;
	public const int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195;
	public const int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196;
	public const int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 49197;
	public const int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 49198;
	public const int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199;
	public const int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200;
	public const int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 49201;
	public const int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 49202;
	public const int TLS_PSK_WITH_AES_128_GCM_SHA256 = 168;
	public const int TLS_PSK_WITH_AES_256_GCM_SHA384 = 169;
	public const int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170;
	public const int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171;
	public const int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172;
	public const int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173;
	public const int TLS_PSK_WITH_AES_128_CBC_SHA256 = 174;
	public const int TLS_PSK_WITH_AES_256_CBC_SHA384 = 175;
	public const int TLS_PSK_WITH_NULL_SHA256 = 176;
	public const int TLS_PSK_WITH_NULL_SHA384 = 177;
	public const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178;
	public const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179;
	public const int TLS_DHE_PSK_WITH_NULL_SHA256 = 180;
	public const int TLS_DHE_PSK_WITH_NULL_SHA384 = 181;
	public const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182;
	public const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183;
	public const int TLS_RSA_PSK_WITH_NULL_SHA256 = 184;
	public const int TLS_RSA_PSK_WITH_NULL_SHA384 = 185;
	public const int TLS_ECDHE_PSK_WITH_RC4_128_SHA = 49203;
	public const int TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 49204;
	public const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = 49205;
	public const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = 49206;
	public const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 49207;
	public const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 49208;
	public const int TLS_ECDHE_PSK_WITH_NULL_SHA = 49209;
	public const int TLS_ECDHE_PSK_WITH_NULL_SHA256 = 49210;
	public const int TLS_ECDHE_PSK_WITH_NULL_SHA384 = 49211;
	public const int TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255;
	public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 49266;
	public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 49267;
	public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 49268;
	public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 49269;
	public const int TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 49270;
	public const int TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 49271;
	public const int TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 49272;
	public const int TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 49273;
	public const int TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49274;
	public const int TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49275;
	public const int TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49276;
	public const int TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49277;
	public const int TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49278;
	public const int TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49279;
	public const int TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 49280;
	public const int TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 49281;
	public const int TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 49282;
	public const int TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 49283;
	public const int TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 = 49284;
	public const int TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 = 49285;
	public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 49286;
	public const int TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 49287;
	public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 49288;
	public const int TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 49289;
	public const int TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49290;
	public const int TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49291;
	public const int TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49292;
	public const int TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49293;
	public const int TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49294;
	public const int TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49295;
	public const int TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49296;
	public const int TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49297;
	public const int TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49298;
	public const int TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49299;
	public const int TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49300;
	public const int TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49301;
	public const int TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49302;
	public const int TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49303;
	public const int TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49304;
	public const int TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49305;
	public const int TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49306;
	public const int TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49307;
	public const int TLS_RSA_WITH_AES_128_CCM = 49308;
	public const int TLS_RSA_WITH_AES_256_CCM = 49309;
	public const int TLS_DHE_RSA_WITH_AES_128_CCM = 49310;
	public const int TLS_DHE_RSA_WITH_AES_256_CCM = 49311;
	public const int TLS_RSA_WITH_AES_128_CCM_8 = 49312;
	public const int TLS_RSA_WITH_AES_256_CCM_8 = 49313;
	public const int TLS_DHE_RSA_WITH_AES_128_CCM_8 = 49314;
	public const int TLS_DHE_RSA_WITH_AES_256_CCM_8 = 49315;
	public const int TLS_PSK_WITH_AES_128_CCM = 49316;
	public const int TLS_PSK_WITH_AES_256_CCM = 49317;
	public const int TLS_DHE_PSK_WITH_AES_128_CCM = 49318;
	public const int TLS_DHE_PSK_WITH_AES_256_CCM = 49319;
	public const int TLS_PSK_WITH_AES_128_CCM_8 = 49320;
	public const int TLS_PSK_WITH_AES_256_CCM_8 = 49321;
	public const int TLS_PSK_DHE_WITH_AES_128_CCM_8 = 49322;
	public const int TLS_PSK_DHE_WITH_AES_256_CCM_8 = 49323;
	public const int TLS_ECDHE_ECDSA_WITH_AES_128_CCM = 49324;
	public const int TLS_ECDHE_ECDSA_WITH_AES_256_CCM = 49325;
	public const int TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 49326;
	public const int TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 49327;
	public const int TLS_FALLBACK_SCSV = 22016;
	public const int DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52392;
	public const int DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52393;
	public const int DRAFT_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52394;
	public const int DRAFT_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52395;
	public const int DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52396;
	public const int DRAFT_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52397;
	public const int DRAFT_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52398;
	public const int DRAFT_TLS_DHE_RSA_WITH_AES_128_OCB = 65280;
	public const int DRAFT_TLS_DHE_RSA_WITH_AES_256_OCB = 65281;
	public const int DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB = 65282;
	public const int DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB = 65283;
	public const int DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB = 65284;
	public const int DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB = 65285;
	public const int DRAFT_TLS_PSK_WITH_AES_128_OCB = 65296;
	public const int DRAFT_TLS_PSK_WITH_AES_256_OCB = 65297;
	public const int DRAFT_TLS_DHE_PSK_WITH_AES_128_OCB = 65298;
	public const int DRAFT_TLS_DHE_PSK_WITH_AES_256_OCB = 65299;
	public const int DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB = 65300;
	public const int DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB = 65301;

	// Methods

	// RVA: 0x2263354 Offset: 0x2263354 VA: 0x2263354
	protected void .ctor() { }

	// RVA: 0x226335C Offset: 0x226335C VA: 0x226335C
	public static bool IsScsv(int cipherSuite) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class CipherType // TypeDefIndex: 4907
{
	// Fields
	public const int stream = 0;
	public const int block = 1;
	public const int aead = 2;

	// Methods

	// RVA: 0x226337C Offset: 0x226337C VA: 0x226337C
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ClientCertificateType // TypeDefIndex: 4908
{
	// Fields
	public const byte rsa_sign = 1;
	public const byte dss_sign = 2;
	public const byte rsa_fixed_dh = 3;
	public const byte dss_fixed_dh = 4;
	public const byte rsa_ephemeral_dh_RESERVED = 5;
	public const byte dss_ephemeral_dh_RESERVED = 6;
	public const byte fortezza_dms_RESERVED = 20;
	public const byte ecdsa_sign = 64;
	public const byte rsa_fixed_ecdh = 65;
	public const byte ecdsa_fixed_ecdh = 66;

	// Methods

	// RVA: 0x2263384 Offset: 0x2263384 VA: 0x2263384
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class CombinedHash : TlsHandshakeHash, IDigest // TypeDefIndex: 4909
{
	// Fields
	protected TlsContext mContext; // 0x10
	protected IDigest mMd5; // 0x18
	protected IDigest mSha1; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x226338C Offset: 0x226338C VA: 0x226338C
	internal void .ctor() { }

	// RVA: 0x2263418 Offset: 0x2263418 VA: 0x2263418
	internal void .ctor(CombinedHash t) { }

	// RVA: 0x22634E8 Offset: 0x22634E8 VA: 0x22634E8 Slot: 18
	public virtual void Init(TlsContext context) { }

	// RVA: 0x22634F0 Offset: 0x22634F0 VA: 0x22634F0 Slot: 19
	public virtual TlsHandshakeHash NotifyPrfDetermined() { }

	// RVA: 0x22634F4 Offset: 0x22634F4 VA: 0x22634F4 Slot: 20
	public virtual void TrackHashAlgorithm(byte hashAlgorithm) { }

	// RVA: 0x2263568 Offset: 0x2263568 VA: 0x2263568 Slot: 21
	public virtual void SealHashAlgorithms() { }

	// RVA: 0x226356C Offset: 0x226356C VA: 0x226356C Slot: 22
	public virtual TlsHandshakeHash StopTracking() { }

	// RVA: 0x22635CC Offset: 0x22635CC VA: 0x22635CC Slot: 23
	public virtual IDigest ForkPrfHash() { }

	// RVA: 0x226362C Offset: 0x226362C VA: 0x226362C Slot: 24
	public virtual byte[] GetFinalHash(byte hashAlgorithm) { }

	// RVA: 0x22636A0 Offset: 0x22636A0 VA: 0x22636A0 Slot: 25
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2263814 Offset: 0x2263814 VA: 0x2263814 Slot: 26
	public virtual int GetByteLength() { }

	// RVA: 0x226395C Offset: 0x226395C VA: 0x226395C Slot: 27
	public virtual int GetDigestSize() { }

	// RVA: 0x2263A9C Offset: 0x2263A9C VA: 0x2263A9C Slot: 28
	public virtual void Update(byte input) { }

	// RVA: 0x2263BDC Offset: 0x2263BDC VA: 0x2263BDC Slot: 29
	public virtual void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x2263D3C Offset: 0x2263D3C VA: 0x2263D3C Slot: 30
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x2263F4C Offset: 0x2263F4C VA: 0x2263F4C Slot: 31
	public virtual void Reset() { }

	// RVA: 0x2264080 Offset: 0x2264080 VA: 0x2264080 Slot: 32
	protected virtual void Ssl3Complete(IDigest d, byte[] ipad, byte[] opad, int padLength) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class CompressionMethod // TypeDefIndex: 4910
{
	// Fields
	public const byte cls_null = 0;
	public const byte DEFLATE = 1;

	// Methods

	// RVA: 0x226445C Offset: 0x226445C VA: 0x226445C
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ConnectionEnd // TypeDefIndex: 4911
{
	// Fields
	public const int server = 0;
	public const int client = 1;

	// Methods

	// RVA: 0x2264464 Offset: 0x2264464 VA: 0x2264464
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ContentType // TypeDefIndex: 4912
{
	// Fields
	public const byte change_cipher_spec = 20;
	public const byte alert = 21;
	public const byte handshake = 22;
	public const byte application_data = 23;
	public const byte heartbeat = 24;

	// Methods

	// RVA: 0x226446C Offset: 0x226446C VA: 0x226446C
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface DatagramTransport // TypeDefIndex: 4913
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetReceiveLimit();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetSendLimit();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int Receive(byte[] buf, int off, int len, int waitMillis);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Send(byte[] buf, int off, int len);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Close();
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class DefaultTlsCipherFactory : AbstractTlsCipherFactory // TypeDefIndex: 4914
{
	// Methods

	// RVA: 0x225BD10 Offset: 0x225BD10 VA: 0x225BD10
	public void .ctor() { }

	// RVA: 0x2264474 Offset: 0x2264474 VA: 0x2264474 Slot: 5
	public override TlsCipher CreateCipher(TlsContext context, int encryptionAlgorithm, int macAlgorithm) { }

	// RVA: 0x226469C Offset: 0x226469C VA: 0x226469C Slot: 6
	protected virtual TlsBlockCipher CreateAESCipher(TlsContext context, int cipherKeySize, int macAlgorithm) { }

	// RVA: 0x22647A4 Offset: 0x22647A4 VA: 0x22647A4 Slot: 7
	protected virtual TlsBlockCipher CreateCamelliaCipher(TlsContext context, int cipherKeySize, int macAlgorithm) { }

	// RVA: 0x22648AC Offset: 0x22648AC VA: 0x22648AC Slot: 8
	protected virtual TlsCipher CreateChaCha20Poly1305(TlsContext context) { }

	// RVA: 0x226490C Offset: 0x226490C VA: 0x226490C Slot: 9
	protected virtual TlsAeadCipher CreateCipher_Aes_Ccm(TlsContext context, int cipherKeySize, int macSize) { }

	// RVA: 0x22649D0 Offset: 0x22649D0 VA: 0x22649D0 Slot: 10
	protected virtual TlsAeadCipher CreateCipher_Aes_Gcm(TlsContext context, int cipherKeySize, int macSize) { }

	// RVA: 0x2264A94 Offset: 0x2264A94 VA: 0x2264A94 Slot: 11
	protected virtual TlsAeadCipher CreateCipher_Aes_Ocb(TlsContext context, int cipherKeySize, int macSize) { }

	// RVA: 0x2264B5C Offset: 0x2264B5C VA: 0x2264B5C Slot: 12
	protected virtual TlsAeadCipher CreateCipher_Camellia_Gcm(TlsContext context, int cipherKeySize, int macSize) { }

	// RVA: 0x2264C20 Offset: 0x2264C20 VA: 0x2264C20 Slot: 13
	protected virtual TlsBlockCipher CreateDesEdeCipher(TlsContext context, int macAlgorithm) { }

	// RVA: 0x2264D1C Offset: 0x2264D1C VA: 0x2264D1C Slot: 14
	protected virtual TlsNullCipher CreateNullCipher(TlsContext context, int macAlgorithm) { }

	// RVA: 0x2264DD4 Offset: 0x2264DD4 VA: 0x2264DD4 Slot: 15
	protected virtual TlsStreamCipher CreateRC4Cipher(TlsContext context, int cipherKeySize, int macAlgorithm) { }

	// RVA: 0x2264EE8 Offset: 0x2264EE8 VA: 0x2264EE8 Slot: 16
	protected virtual TlsBlockCipher CreateSeedCipher(TlsContext context, int macAlgorithm) { }

	// RVA: 0x2264FE4 Offset: 0x2264FE4 VA: 0x2264FE4 Slot: 17
	protected virtual IBlockCipher CreateAesEngine() { }

	// RVA: 0x2265040 Offset: 0x2265040 VA: 0x2265040 Slot: 18
	protected virtual IBlockCipher CreateCamelliaEngine() { }

	// RVA: 0x226509C Offset: 0x226509C VA: 0x226509C Slot: 19
	protected virtual IBlockCipher CreateAesBlockCipher() { }

	// RVA: 0x226511C Offset: 0x226511C VA: 0x226511C Slot: 20
	protected virtual IAeadBlockCipher CreateAeadBlockCipher_Aes_Ccm() { }

	// RVA: 0x226519C Offset: 0x226519C VA: 0x226519C Slot: 21
	protected virtual IAeadBlockCipher CreateAeadBlockCipher_Aes_Gcm() { }

	// RVA: 0x226521C Offset: 0x226521C VA: 0x226521C Slot: 22
	protected virtual IAeadBlockCipher CreateAeadBlockCipher_Aes_Ocb() { }

	// RVA: 0x22652C0 Offset: 0x22652C0 VA: 0x22652C0 Slot: 23
	protected virtual IAeadBlockCipher CreateAeadBlockCipher_Camellia_Gcm() { }

	// RVA: 0x2265340 Offset: 0x2265340 VA: 0x2265340 Slot: 24
	protected virtual IBlockCipher CreateCamelliaBlockCipher() { }

	// RVA: 0x22653C0 Offset: 0x22653C0 VA: 0x22653C0 Slot: 25
	protected virtual IBlockCipher CreateDesEdeBlockCipher() { }

	// RVA: 0x226543C Offset: 0x226543C VA: 0x226543C Slot: 26
	protected virtual IStreamCipher CreateRC4StreamCipher() { }

	// RVA: 0x2265498 Offset: 0x2265498 VA: 0x2265498 Slot: 27
	protected virtual IBlockCipher CreateSeedBlockCipher() { }

	// RVA: 0x2265514 Offset: 0x2265514 VA: 0x2265514 Slot: 28
	protected virtual IDigest CreateHMacDigest(int macAlgorithm) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class DefaultTlsClient : AbstractTlsClient // TypeDefIndex: 4915
{
	// Methods

	// RVA: 0x2265688 Offset: 0x2265688 VA: 0x2265688
	public void .ctor() { }

	// RVA: 0x226568C Offset: 0x226568C VA: 0x226568C
	public void .ctor(TlsCipherFactory cipherFactory) { }

	// RVA: 0x22656B8 Offset: 0x22656B8 VA: 0x22656B8 Slot: 48
	public override int[] GetCipherSuites() { }

	// RVA: 0x2265724 Offset: 0x2265724 VA: 0x2265724 Slot: 55
	public override TlsKeyExchange GetKeyExchange() { }

	// RVA: 0x2265854 Offset: 0x2265854 VA: 0x2265854 Slot: 59
	protected virtual TlsKeyExchange CreateDHKeyExchange(int keyExchange) { }

	// RVA: 0x22658D0 Offset: 0x22658D0 VA: 0x22658D0 Slot: 60
	protected virtual TlsKeyExchange CreateDheKeyExchange(int keyExchange) { }

	// RVA: 0x226594C Offset: 0x226594C VA: 0x226594C Slot: 61
	protected virtual TlsKeyExchange CreateECDHKeyExchange(int keyExchange) { }

	// RVA: 0x22659E0 Offset: 0x22659E0 VA: 0x22659E0 Slot: 62
	protected virtual TlsKeyExchange CreateECDheKeyExchange(int keyExchange) { }

	// RVA: 0x2265A74 Offset: 0x2265A74 VA: 0x2265A74 Slot: 63
	protected virtual TlsKeyExchange CreateRsaKeyExchange() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class DeferredHash : TlsHandshakeHash, IDigest // TypeDefIndex: 4916
{
	// Fields
	protected const int BUFFERING_HASH_LIMIT = 4;
	protected TlsContext mContext; // 0x10
	private DigestInputBuffer mBuf; // 0x18
	private IDictionary mHashes; // 0x20
	private int mPrfHashAlgorithm; // 0x28

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2265ADC Offset: 0x2265ADC VA: 0x2265ADC
	internal void .ctor() { }

	// RVA: 0x2265B84 Offset: 0x2265B84 VA: 0x2265B84
	private void .ctor(byte prfHashAlgorithm, IDigest prfHash) { }

	// RVA: 0x2265CC0 Offset: 0x2265CC0 VA: 0x2265CC0 Slot: 18
	public virtual void Init(TlsContext context) { }

	// RVA: 0x2265CC8 Offset: 0x2265CC8 VA: 0x2265CC8 Slot: 19
	public virtual TlsHandshakeHash NotifyPrfDetermined() { }

	// RVA: 0x2265F00 Offset: 0x2265F00 VA: 0x2265F00 Slot: 20
	public virtual void TrackHashAlgorithm(byte hashAlgorithm) { }

	// RVA: 0x2265FAC Offset: 0x2265FAC VA: 0x2265FAC Slot: 21
	public virtual void SealHashAlgorithms() { }

	// RVA: 0x2265FBC Offset: 0x2265FBC VA: 0x2265FBC Slot: 22
	public virtual TlsHandshakeHash StopTracking() { }

	// RVA: 0x22661C0 Offset: 0x22661C0 VA: 0x22661C0 Slot: 23
	public virtual IDigest ForkPrfHash() { }

	// RVA: 0x22663D4 Offset: 0x22663D4 VA: 0x22663D4 Slot: 24
	public virtual byte[] GetFinalHash(byte hashAlgorithm) { }

	// RVA: 0x2266650 Offset: 0x2266650 VA: 0x2266650 Slot: 25
	public virtual string get_AlgorithmName() { }

	// RVA: 0x22666C4 Offset: 0x22666C4 VA: 0x22666C4 Slot: 26
	public virtual int GetByteLength() { }

	// RVA: 0x2266738 Offset: 0x2266738 VA: 0x2266738 Slot: 27
	public virtual int GetDigestSize() { }

	// RVA: 0x22667AC Offset: 0x22667AC VA: 0x22667AC Slot: 28
	public virtual void Update(byte input) { }

	// RVA: 0x2266BDC Offset: 0x2266BDC VA: 0x2266BDC Slot: 29
	public virtual void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x2267030 Offset: 0x2267030 VA: 0x2267030 Slot: 30
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x22670A4 Offset: 0x22670A4 VA: 0x22670A4 Slot: 31
	public virtual void Reset() { }

	// RVA: 0x22674C0 Offset: 0x22674C0 VA: 0x22674C0 Slot: 32
	protected virtual void CheckStopBuffering() { }

	// RVA: 0x22678F0 Offset: 0x22678F0 VA: 0x22678F0 Slot: 33
	protected virtual void CheckTrackingHash(byte hashAlgorithm) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class DigestInputBuffer : MemoryStream // TypeDefIndex: 4917
{
	// Methods

	// RVA: 0x2265B7C Offset: 0x2265B7C VA: 0x2265B7C
	public void .ctor() { }

	// RVA: 0x2265E80 Offset: 0x2265E80 VA: 0x2265E80
	internal void UpdateDigest(IDigest d) { }
}

// Namespace: 
private class DigestInputBuffer.DigStream : BaseOutputStream // TypeDefIndex: 4918
{
	// Fields
	private readonly IDigest d; // 0x18

	// Methods

	// RVA: 0x2267AAC Offset: 0x2267AAC VA: 0x2267AAC
	internal void .ctor(IDigest d) { }

	// RVA: 0x2267AD8 Offset: 0x2267AD8 VA: 0x2267AD8 Slot: 24
	public override void WriteByte(byte b) { }

	// RVA: 0x2267BA0 Offset: 0x2267BA0 VA: 0x2267BA0 Slot: 23
	public override void Write(byte[] buf, int off, int len) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class DigitallySigned // TypeDefIndex: 4919
{
	// Fields
	protected readonly SignatureAndHashAlgorithm mAlgorithm; // 0x10
	protected readonly byte[] mSignature; // 0x18

	// Properties
	public virtual SignatureAndHashAlgorithm Algorithm { get; }
	public virtual byte[] Signature { get; }

	// Methods

	// RVA: 0x2267C80 Offset: 0x2267C80 VA: 0x2267C80
	public void .ctor(SignatureAndHashAlgorithm algorithm, byte[] signature) { }

	// RVA: 0x2267D28 Offset: 0x2267D28 VA: 0x2267D28 Slot: 4
	public virtual SignatureAndHashAlgorithm get_Algorithm() { }

	// RVA: 0x2267D30 Offset: 0x2267D30 VA: 0x2267D30 Slot: 5
	public virtual byte[] get_Signature() { }

	// RVA: 0x2267D38 Offset: 0x2267D38 VA: 0x2267D38 Slot: 6
	public virtual void Encode(Stream output) { }

	// RVA: 0x225D0A4 Offset: 0x225D0A4 VA: 0x225D0A4
	public static DigitallySigned Parse(TlsContext context, Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ECBasisType // TypeDefIndex: 4920
{
	// Fields
	public const byte ec_basis_trinomial = 1;
	public const byte ec_basis_pentanomial = 2;

	// Methods

	// RVA: 0x266B9C8 Offset: 0x266B9C8 VA: 0x266B9C8
	protected void .ctor() { }

	// RVA: 0x266B9D0 Offset: 0x266B9D0 VA: 0x266B9D0
	public static bool IsValid(byte ecBasisType) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ECCurveType // TypeDefIndex: 4921
{
	// Fields
	public const byte explicit_prime = 1;
	public const byte explicit_char2 = 2;
	public const byte named_curve = 3;

	// Methods

	// RVA: 0x266B9E4 Offset: 0x266B9E4 VA: 0x266B9E4
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ECPointFormat // TypeDefIndex: 4922
{
	// Fields
	public const byte uncompressed = 0;
	public const byte ansiX962_compressed_prime = 1;
	public const byte ansiX962_compressed_char2 = 2;

	// Methods

	// RVA: 0x266B9EC Offset: 0x266B9EC VA: 0x266B9EC
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class EncryptionAlgorithm // TypeDefIndex: 4923
{
	// Fields
	public const int NULL = 0;
	public const int RC4_40 = 1;
	public const int RC4_128 = 2;
	public const int RC2_CBC_40 = 3;
	public const int IDEA_CBC = 4;
	public const int DES40_CBC = 5;
	public const int DES_CBC = 6;
	public const int cls_3DES_EDE_CBC = 7;
	public const int AES_128_CBC = 8;
	public const int AES_256_CBC = 9;
	public const int AES_128_GCM = 10;
	public const int AES_256_GCM = 11;
	public const int CAMELLIA_128_CBC = 12;
	public const int CAMELLIA_256_CBC = 13;
	public const int SEED_CBC = 14;
	public const int AES_128_CCM = 15;
	public const int AES_128_CCM_8 = 16;
	public const int AES_256_CCM = 17;
	public const int AES_256_CCM_8 = 18;
	public const int CAMELLIA_128_GCM = 19;
	public const int CAMELLIA_256_GCM = 20;
	public const int CHACHA20_POLY1305 = 102;
	[ObsoleteAttribute] // RVA: 0xCB647C Offset: 0xCB647C VA: 0xCB647C
	public const int AEAD_CHACHA20_POLY1305 = 102;
	public const int AES_128_OCB_TAGLEN96 = 103;
	public const int AES_256_OCB_TAGLEN96 = 104;

	// Methods

	// RVA: 0x266B9F4 Offset: 0x266B9F4 VA: 0x266B9F4
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ExporterLabel // TypeDefIndex: 4924
{
	// Fields
	public const string client_finished = "client finished";
	public const string server_finished = "server finished";
	public const string master_secret = "master secret";
	public const string key_expansion = "key expansion";
	public const string client_EAP_encryption = "client EAP encryption";
	public const string ttls_keying_material = "ttls keying material";
	public const string ttls_challenge = "ttls challenge";
	public const string dtls_srtp = "EXTRACTOR-dtls_srtp";
	public static readonly string extended_master_secret; // 0x0

	// Methods

	// RVA: 0x266B9FC Offset: 0x266B9FC VA: 0x266B9FC
	protected void .ctor() { }

	// RVA: 0x266BA04 Offset: 0x266BA04 VA: 0x266BA04
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class ExtensionType // TypeDefIndex: 4925
{
	// Fields
	public const int server_name = 0;
	public const int max_fragment_length = 1;
	public const int client_certificate_url = 2;
	public const int trusted_ca_keys = 3;
	public const int truncated_hmac = 4;
	public const int status_request = 5;
	public const int user_mapping = 6;
	public const int client_authz = 7;
	public const int server_authz = 8;
	public const int cert_type = 9;
	public const int supported_groups = 10;
	public const int elliptic_curves = 10;
	public const int ec_point_formats = 11;
	public const int srp = 12;
	public const int signature_algorithms = 13;
	public const int use_srtp = 14;
	public const int heartbeat = 15;
	public const int application_layer_protocol_negotiation = 16;
	public const int status_request_v2 = 17;
	public const int signed_certificate_timestamp = 18;
	public const int client_certificate_type = 19;
	public const int server_certificate_type = 20;
	public const int padding = 21;
	public const int encrypt_then_mac = 22;
	public const int extended_master_secret = 23;
	public const int session_ticket = 35;
	public static readonly int negotiated_ff_dhe_groups; // 0x0
	public const int renegotiation_info = 65281;

	// Methods

	// RVA: 0x266BA60 Offset: 0x266BA60 VA: 0x266BA60
	protected void .ctor() { }

	// RVA: 0x266BA68 Offset: 0x266BA68 VA: 0x266BA68
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class FiniteFieldDheGroup // TypeDefIndex: 4926
{
	// Fields
	public const byte ffdhe2432 = 0;
	public const byte ffdhe3072 = 1;
	public const byte ffdhe4096 = 2;
	public const byte ffdhe6144 = 3;
	public const byte ffdhe8192 = 4;

	// Methods

	// RVA: 0x266BABC Offset: 0x266BABC VA: 0x266BABC
	protected void .ctor() { }

	// RVA: 0x266BAC4 Offset: 0x266BAC4 VA: 0x266BAC4
	public static bool IsValid(byte group) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HandshakeType // TypeDefIndex: 4927
{
	// Fields
	public const byte hello_request = 0;
	public const byte client_hello = 1;
	public const byte server_hello = 2;
	public const byte certificate = 11;
	public const byte server_key_exchange = 12;
	public const byte certificate_request = 13;
	public const byte server_hello_done = 14;
	public const byte certificate_verify = 15;
	public const byte client_key_exchange = 16;
	public const byte finished = 20;
	public const byte certificate_url = 21;
	public const byte certificate_status = 22;
	public const byte hello_verify_request = 3;
	public const byte supplemental_data = 23;
	public const byte session_ticket = 4;

	// Methods

	// RVA: 0x266BAD4 Offset: 0x266BAD4 VA: 0x266BAD4
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HashAlgorithm // TypeDefIndex: 4928
{
	// Fields
	public const byte none = 0;
	public const byte md5 = 1;
	public const byte sha1 = 2;
	public const byte sha224 = 3;
	public const byte sha256 = 4;
	public const byte sha384 = 5;
	public const byte sha512 = 6;

	// Methods

	// RVA: 0x266BADC Offset: 0x266BADC VA: 0x266BADC
	protected void .ctor() { }

	// RVA: 0x266BAE4 Offset: 0x266BAE4 VA: 0x266BAE4
	public static string GetName(byte hashAlgorithm) { }

	// RVA: 0x266BB50 Offset: 0x266BB50 VA: 0x266BB50
	public static string GetText(byte hashAlgorithm) { }

	// RVA: 0x266BD4C Offset: 0x266BD4C VA: 0x266BD4C
	public static bool IsPrivate(byte hashAlgorithm) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class HeartbeatExtension // TypeDefIndex: 4929
{
	// Fields
	protected readonly byte mMode; // 0x10

	// Properties
	public virtual byte Mode { get; }

	// Methods

	// RVA: 0x266BD5C Offset: 0x266BD5C VA: 0x266BD5C
	public void .ctor(byte mode) { }

	// RVA: 0x266BE2C Offset: 0x266BE2C VA: 0x266BE2C Slot: 4
	public virtual byte get_Mode() { }

	// RVA: 0x266BE34 Offset: 0x266BE34 VA: 0x266BE34 Slot: 5
	public virtual void Encode(Stream output) { }

	// RVA: 0x266BEB0 Offset: 0x266BEB0 VA: 0x266BEB0
	public static HeartbeatExtension Parse(Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HeartbeatMessageType // TypeDefIndex: 4930
{
	// Fields
	public const byte heartbeat_request = 1;
	public const byte heartbeat_response = 2;

	// Methods

	// RVA: 0x266BFCC Offset: 0x266BFCC VA: 0x266BFCC
	protected void .ctor() { }

	// RVA: 0x266BFD4 Offset: 0x266BFD4 VA: 0x266BFD4
	public static bool IsValid(byte heartbeatMessageType) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HeartbeatMode // TypeDefIndex: 4931
{
	// Fields
	public const byte peer_allowed_to_send = 1;
	public const byte peer_not_allowed_to_send = 2;

	// Methods

	// RVA: 0x266BFE8 Offset: 0x266BFE8 VA: 0x266BFE8
	protected void .ctor() { }

	// RVA: 0x266BE18 Offset: 0x266BE18 VA: 0x266BE18
	public static bool IsValid(byte heartbeatMode) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface ICertificateVerifyer // TypeDefIndex: 4932
{
	// Methods

