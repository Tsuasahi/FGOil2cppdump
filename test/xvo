	public void SetOwner(WarBoardData data) { }

	// RVA: 0x1A8E864 Offset: 0x1A8E864 VA: 0x1A8E864
	public void Save() { }

	// RVA: 0x1A8E9D8 Offset: 0x1A8E9D8 VA: 0x1A8E9D8
	public void Load() { }
}

// Namespace: 
public class WarBoardUserGetItemData // TypeDefIndex: 11788
{
	// Fields
	public int forceId; // 0x10
	public int groupId; // 0x14
	public int pieceIndex; // 0x18
	public int squareIndex; // 0x1C
	public bool isUse; // 0x20

	// Methods

	// RVA: 0x1A8FBE0 Offset: 0x1A8FBE0 VA: 0x1A8FBE0
	public void .ctor() { }

	// RVA: 0x1A8FBE8 Offset: 0x1A8FBE8 VA: 0x1A8FBE8
	public string ToJson() { }

	// RVA: 0x1A8FC58 Offset: 0x1A8FC58 VA: 0x1A8FC58
	public static WarBoardUserGetItemData FromJson(string json) { }
}

// Namespace: 
public class WarBoardUserMasterData // TypeDefIndex: 11789
{
	// Fields
	public int commandSpellNum; // 0x10
	public int userEquipId; // 0x14
	public int skill1Ct; // 0x18
	public int skill2Ct; // 0x1C
	public int skill3Ct; // 0x20
	public int currentForceActionPoint; // 0x24
	public int forceActionPoint; // 0x28
	public int currentLimitActionPoint; // 0x2C
	public int limitActionPoint; // 0x30
	public int attackCount; // 0x34
	public int squareIndex; // 0x38
	public int forceId; // 0x3C
	public int groupId; // 0x40
	public int defeatPoint; // 0x44

	// Methods

	// RVA: 0x1A8FD28 Offset: 0x1A8FD28 VA: 0x1A8FD28
	public void .ctor() { }

	// RVA: 0x1A8FD30 Offset: 0x1A8FD30 VA: 0x1A8FD30
	public void SetBattleData(BattleData battleData) { }

	// RVA: 0x1A8FE7C Offset: 0x1A8FE7C VA: 0x1A8FE7C
	public string ToJson() { }

	// RVA: 0x1A8FEEC Offset: 0x1A8FEEC VA: 0x1A8FEEC
	public static WarBoardUserMasterData FromJson(string json) { }
}

// Namespace: 
public class WarBoardUserServantData : BattleUserServantData // TypeDefIndex: 11790
{
	// Fields
	public int currentHp; // 0x1F4
	public int currentNp; // 0x1F8
	public int nextNpTurn; // 0x1FC
	public int defeatPoint; // 0x200
	public BattleBuffData.SaveData buffDataSave; // 0x208
	public int forceId; // 0x210
	public int groupId; // 0x214
	public int pieceIndex; // 0x218
	public int skill1Ct; // 0x21C
	public int skill2Ct; // 0x220
	public int skill3Ct; // 0x224
	public int squareIndex; // 0x228
	public int currentActionPoint; // 0x22C
	public int limitActionPoint; // 0x230
	public int attackCount; // 0x234
	private BattleBuffData buffData; // 0x238
	public int transformIndex; // 0x240
	public int transformLimitCount; // 0x244
	public bool isSleepWaitMode; // 0x248
	public uint consumedActionPointDateTime; // 0x24C
	public int criticalStars; // 0x250
	public long npcSvtEquipId; // 0x258

	// Methods

	// RVA: 0x1A8FFBC Offset: 0x1A8FFBC VA: 0x1A8FFBC
	public void .ctor() { }

	// RVA: 0x1A8FFCC Offset: 0x1A8FFCC VA: 0x1A8FFCC
	public void FromBattleServantData(BattleServantData servantData) { }

	// RVA: 0x1A901AC Offset: 0x1A901AC VA: 0x1A901AC
	public void SetBattleServantData(BattleServantData servantData) { }

	// RVA: 0x1A90440 Offset: 0x1A90440 VA: 0x1A90440
	public string ToJson() { }

	// RVA: 0x1A904C4 Offset: 0x1A904C4 VA: 0x1A904C4
	public static WarBoardUserServantData FromJson(string json) { }
}

// Namespace: 
public class WarBoardUserTreasureData // TypeDefIndex: 11791
{
	// Fields
	public int treasureId; // 0x10
	public bool isReceived; // 0x14

	// Methods

	// RVA: 0x1A905C4 Offset: 0x1A905C4 VA: 0x1A905C4
	public void .ctor() { }

	// RVA: 0x1A905CC Offset: 0x1A905CC VA: 0x1A905CC
	public string ToJson() { }

	// RVA: 0x1A9063C Offset: 0x1A9063C VA: 0x1A9063C
	public static WarBoardUserTreasureData FromJson(string json) { }
}

// Namespace: 
public class WarBoardManager : SingletonMonoBehaviour<WarBoardManager> // TypeDefIndex: 11792
{
	// Fields
	[SerializeField] // RVA: 0xCEF5B4 Offset: 0xCEF5B4 VA: 0xCEF5B4
	private GameObject boardRoot; // 0x18
	[SerializeField] // RVA: 0xCEF5C4 Offset: 0xCEF5C4 VA: 0xCEF5C4
	private GameObject boardObjectRoot; // 0x20
	[SerializeField] // RVA: 0xCEF5D4 Offset: 0xCEF5D4 VA: 0xCEF5D4
	private MapCamera mapCamera; // 0x28
	[SerializeField] // RVA: 0xCEF5E4 Offset: 0xCEF5E4 VA: 0xCEF5E4
	private Camera uiCamera; // 0x30
	[SerializeField] // RVA: 0xCEF5F4 Offset: 0xCEF5F4 VA: 0xCEF5F4
	private WarBoardTouchBlockObject forceCloseTouchBlockObj; // 0x38
	private AssetData commonAssetData; // 0x40
	private GameObject squarePrefab; // 0x48
	private GameObject roadPrefab; // 0x50
	private GameObject itemPrefab; // 0x58
	private GameObject treasurePrefab; // 0x60
	private GameObject effectPrefab; // 0x68
	private GameObject masterPiecePrefab; // 0x70
	private GameObject servantPiecePrefab; // 0x78
	private GameObject effectStartPrefab; // 0x80
	private GameObject effectPlayerTurnPrefab; // 0x88
	private GameObject effectEnemyTurnPrefab; // 0x90
	private GameObject effectWinPrefab; // 0x98
	private GameObject effectLosePrefab; // 0xA0
	private GameObject cameraRootPrefab; // 0xA8
	private SimpleAnimation cameraRootAnimation; // 0xB0
	private WarBoardMapCameraComponent mapCameraComponent; // 0xB8
	private GameObject effectAttackPrefab; // 0xC0
	private GameObject effectEncountPrefab; // 0xC8
	private UIAtlas itemIconAtlas; // 0xD0
	private UIAtlas treasureIconAtlas; // 0xD8
	private UIAtlas effectIconAtlas; // 0xE0
	private UIFont numberFont2; // 0xE8
	private GameObject effectOnBoardBuffPrefab; // 0xF0
	private GameObject effectOnBoardDeBuffPrefab; // 0xF8
	[SerializeField] // RVA: 0xCEF604 Offset: 0xCEF604 VA: 0xCEF604
	private WarBoardSeSetting seSetting; // 0x100
	private WarBoardBackgroundComponent backgroundComponent; // 0x108
	private WarBoardRoadComponent[] roadComponents; // 0x110
	private AssetData backgroundAssetData; // 0x118
	private AssetData imageSetAssetData; // 0x120
	private UIAtlas imageSetAtlas; // 0x128
	private WarBoardAIManager aiManager; // 0x130
	private Vector2 centerPosition; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xCEF614 Offset: 0xCEF614 VA: 0xCEF614
	[DebuggerBrowsableAttribute] // RVA: 0xCEF614 Offset: 0xCEF614 VA: 0xCEF614
	private WarBoardData <warBoardData>k__BackingField; // 0x140
	private Dictionary<int, Vector3> squarePositionDict; // 0x148
	[SerializeField] // RVA: 0xCEF650 Offset: 0xCEF650 VA: 0xCEF650
	private Transform uiRoot; // 0x150
	private WarBoardConfigurationUIContoroller configurationUIController; // 0x158
	private WarBoardPlayingUIController playingUIController; // 0x160
	private WarBoardZoomSwitchButton zoomSwitchUI; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xCEF660 Offset: 0xCEF660 VA: 0xCEF660
	[DebuggerBrowsableAttribute] // RVA: 0xCEF660 Offset: 0xCEF660 VA: 0xCEF660
	private WarBoardManager.ControllType <controllType>k__BackingField; // 0x170
	[SerializeField] // RVA: 0xCEF69C Offset: 0xCEF69C VA: 0xCEF69C
	private GameObject touchBlock; // 0x178
	private bool isMapTouchEnabled; // 0x180
	private int mapTouchDisableCount; // 0x184
	private int touchBlockEnableCount; // 0x188
	private bool beginTouch; // 0x18C
	private bool touchGesture; // 0x18D
	private Touch[] tchInfs; // 0x190
	private bool isForceDispZoomSwitchUI; // 0x198
	private int treasureId; // 0x19C
	[SerializeField] // RVA: 0xCEF6AC Offset: 0xCEF6AC VA: 0xCEF6AC
	private BattleData battleData; // 0x1A0
	private BattleInfoData battleInfo; // 0x1A8
	private BattleLogicFunction logicFunc; // 0x1B0
	private BattleLogicTarget logicTarget; // 0x1B8
	private BattleEntity battleEntity; // 0x1C0
	public BattleRandom battleRandom; // 0x1C8
	private ServantLimitAddMaster svtLimitAddMaster; // 0x1D0
	private List<AssetData> cacheBattleDatas; // 0x1D8
	private int[] battleBgList; // 0x1E0
	private const int MIDDLE_MEMORY_SIZE = 2048;
	private const int DEFAULT_MAX_SERVANT_CACHE_COUNT = 12;
	private const int DEFAULT_MIDDLE_MEMORY_SERVANT_CACHE_COUNT = 6;
	private int maxCacheServantCount; // 0x1E8
	private int middleMemoryCacheServantCount; // 0x1EC
	private WarBoardPieceData selectPiece; // 0x1F0
	public bool attackTreasureEnemy; // 0x1F8
	public int currentActionPoint; // 0x1FC
	private int maxActionPoint; // 0x200
	private int turnForceId; // 0x204
	private int turnGroupId; // 0x208
	private uint moveActionPieceUniqueIndex; // 0x20C
	private uint moveTargetPieceUniqueIndex; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xCEF6BC Offset: 0xCEF6BC VA: 0xCEF6BC
	[DebuggerBrowsableAttribute] // RVA: 0xCEF6BC Offset: 0xCEF6BC VA: 0xCEF6BC
	private uint <lastSelectPieceUniqueIndex>k__BackingField; // 0x214
	private static readonly Color COST_LABEL_CAN_MOVE_TOP_COLOR; // 0x0
	private static readonly Color COST_LABEL_CAN_MOVE_BOTTOM_COLOR; // 0x10
	private WarBoardActionPointEntity _warBoardActionPointEntity; // 0x218
	private static readonly int WIN_BGM_ID; // 0x20
	private static readonly int LOSE_BGM_ID; // 0x24
	private static readonly float START_BGM_FADEOUT_TIME; // 0x28
	private static readonly float SKILL_ZOOM_OUT_SIZE; // 0x2C
	private static readonly float SKILL_ZOOM_IN_SIZE; // 0x30
	private WarBoardOnboardSkillNameComponent onboardSkillNameObj; // 0x220
	[CompilerGeneratedAttribute] // RVA: 0xCEF6F8 Offset: 0xCEF6F8 VA: 0xCEF6F8
	[DebuggerBrowsableAttribute] // RVA: 0xCEF6F8 Offset: 0xCEF6F8 VA: 0xCEF6F8
	private bool <notOnboardSkillFlag>k__BackingField; // 0x228
	private AssetData partyOrganizationAssetData; // 0x230
	private WarBoardPartyOrganizationMenu partyMenu; // 0x238
	[CompilerGeneratedAttribute] // RVA: 0xCEF734 Offset: 0xCEF734 VA: 0xCEF734
	[DebuggerBrowsableAttribute] // RVA: 0xCEF734 Offset: 0xCEF734 VA: 0xCEF734
	private bool <IsEditingUserEquip>k__BackingField; // 0x240
	[CompilerGeneratedAttribute] // RVA: 0xCEF770 Offset: 0xCEF770 VA: 0xCEF770
	[DebuggerBrowsableAttribute] // RVA: 0xCEF770 Offset: 0xCEF770 VA: 0xCEF770
	private SceneJumpInfo <UserEquipSceneInfo>k__BackingField; // 0x248
	private WarBoardSimplePopup simplePopup; // 0x250
	private BattleServantConfConponent servantDetailPopup; // 0x258
	private BattleServantConfConponent enemyServantDetailPopup; // 0x260
	private WarBoardCommonMiniPopup commonMiniPopup; // 0x268
	private GameObject simplePopupElementServantPrefab; // 0x270
	private GameObject simplePopupElementBuffPrefab; // 0x278
	private GameObject simplePopupPrefab; // 0x280
	private GameObject servantDetailPopupPrefab; // 0x288
	private GameObject enemyServantDetailPopupPrefab; // 0x290
	private GameObject servantEquipSimpleDialogPrefab; // 0x298
	private bool popupControlIsReady; // 0x2A0
	private AssetData servantCommandCardAsset; // 0x2A8
	private Queue<WarBoardManager.WarBoardPerformanceQueue> taskQueue; // 0x2B0
	private IEnumerator taskExecute; // 0x2B8
	private List<WarBoardTaskBase> nonBlockTasks; // 0x2C0
	private IEnumerator nonBlockTaskExecute; // 0x2C8
	private bool isPause; // 0x2D0
	private bool isPauseImmediate; // 0x2D1
	[CompilerGeneratedAttribute] // RVA: 0xCEF7AC Offset: 0xCEF7AC VA: 0xCEF7AC
	private static Func<WarBoardPieceData, bool> <>f__am$cache0; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCEF7BC Offset: 0xCEF7BC VA: 0xCEF7BC
	private static Func<WarBoardPieceData, bool> <>f__am$cache1; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCEF7CC Offset: 0xCEF7CC VA: 0xCEF7CC
	private static Func<WarBoardPieceData, int> <>f__am$cache2; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCEF7DC Offset: 0xCEF7DC VA: 0xCEF7DC
	private static Func<WarBoardPieceData, long> <>f__am$cache3; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCEF7EC Offset: 0xCEF7EC VA: 0xCEF7EC
	private static Func<WarBoardPieceData, long> <>f__am$cache4; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCEF7FC Offset: 0xCEF7FC VA: 0xCEF7FC
	private static Func<WarBoardPieceData, int> <>f__am$cache5; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCEF80C Offset: 0xCEF80C VA: 0xCEF80C
	private static Func<BattleSkillInfoData, int> <>f__am$cache6; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCEF81C Offset: 0xCEF81C VA: 0xCEF81C
	private static Func<BattleSkillInfoData, int> <>f__am$cache7; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCEF82C Offset: 0xCEF82C VA: 0xCEF82C
	private static WarBoardTaskBase.TaskCallback <>f__am$cache8; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCEF83C Offset: 0xCEF83C VA: 0xCEF83C
	private static WarBoardTaskBase.TaskCallback <>f__am$cache9; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCEF84C Offset: 0xCEF84C VA: 0xCEF84C
	private static Action<WarBoardPieceData> <>f__am$cacheA; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCEF85C Offset: 0xCEF85C VA: 0xCEF85C
	private static Action<WarBoardPieceData> <>f__am$cacheB; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xCEF86C Offset: 0xCEF86C VA: 0xCEF86C
	private static Func<WarBoardPieceData, bool> <>f__am$cacheC; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xCEF87C Offset: 0xCEF87C VA: 0xCEF87C
	private static Func<WarBoardPieceData, int> <>f__am$cacheD; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xCEF88C Offset: 0xCEF88C VA: 0xCEF88C
	private static Action<WarBoardPieceData> <>f__am$cacheE; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xCEF89C Offset: 0xCEF89C VA: 0xCEF89C
	private static Func<WarBoardPieceData, bool> <>f__am$cacheF; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xCEF8AC Offset: 0xCEF8AC VA: 0xCEF8AC
	private static Func<WarBoardPieceData, bool> <>f__am$cache10; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xCEF8BC Offset: 0xCEF8BC VA: 0xCEF8BC
	private static Predicate<WarBoardPieceData> <>f__am$cache11; // 0xC0

	// Properties
	public WarBoardSeSetting SeSetting { get; }
	public WarBoardData warBoardData { get; set; }
	public WarBoardManager.ControllType controllType { get; set; }
	public bool isSelectedPiece { get; }
	public uint lastSelectPieceUniqueIndex { get; set; }
	private WarBoardActionPointEntity warBoardActionPointEntity { get; }
	public bool notOnboardSkillFlag { get; set; }
	private bool IsPartyMenuOpen { get; }
	public bool IsEditingUserEquip { get; set; }
	public SceneJumpInfo UserEquipSceneInfo { get; set; }

	// Methods

	// RVA: 0x18A2514 Offset: 0x18A2514 VA: 0x18A2514
	public void .ctor() { }

	// RVA: 0x18A261C Offset: 0x18A261C VA: 0x18A261C
	public static WarBoardDataEntity GetWarBoardDataEntityFromResponse(string reponse) { }

	// RVA: 0x189FC80 Offset: 0x189FC80 VA: 0x189FC80
	public WarBoardSeSetting get_SeSetting() { }

	// RVA: 0x18A2794 Offset: 0x18A2794 VA: 0x18A2794
	public void Initialize(WarBoardDataEntity data, Action initialized) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43134 Offset: 0xD43134 VA: 0xD43134
	// RVA: 0x18A27C0 Offset: 0x18A27C0 VA: 0x18A27C0
	private IEnumerator coInitialize(WarBoardDataEntity warBoardDataEntity, Action initialized) { }

	// RVA: 0x18A286C Offset: 0x18A286C VA: 0x18A286C
	public void Resume(WarBoardDataEntity warBoardDataEntity, Action resumed) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43144 Offset: 0xD43144 VA: 0xD43144
	// RVA: 0x18A2898 Offset: 0x18A2898 VA: 0x18A2898
	private IEnumerator coResume(WarBoardDataEntity warBoardDataEntity, Action resumed) { }

	// RVA: 0x18A2940 Offset: 0x18A2940 VA: 0x18A2940
	private void CreateSquare(WarBoardSquareData[] datas) { }

	// RVA: 0x18A2A9C Offset: 0x18A2A9C VA: 0x18A2A9C
	private void CreateRoad(WarBoardRoadEntity[] roads) { }

	// RVA: 0x18A2D28 Offset: 0x18A2D28 VA: 0x18A2D28
	private void CreatePiece() { }

	// RVA: 0x18A2F20 Offset: 0x18A2F20 VA: 0x18A2F20
	private void CreateItem() { }

	// RVA: 0x18A3088 Offset: 0x18A3088 VA: 0x18A3088
	private void CreateTreasure() { }

	// RVA: 0x18A31F4 Offset: 0x18A31F4 VA: 0x18A31F4
	private void CreateEffect() { }

	// RVA: 0x18A3360 Offset: 0x18A3360 VA: 0x18A3360
	private void NondisplacedPieceDeactive() { }

	// RVA: 0x18A3408 Offset: 0x18A3408 VA: 0x18A3408
	private void EnableEditPosition() { }

	// RVA: 0x18A3500 Offset: 0x18A3500 VA: 0x18A3500
	private void DisableEditPosition() { }

	// RVA: 0x18A35A0 Offset: 0x18A35A0 VA: 0x18A35A0
	private void ChangeRoadColorDarkness(bool immediate = False) { }

	// RVA: 0x18A3694 Offset: 0x18A3694 VA: 0x18A3694
	private void ChangeRoadColorNormal(bool immediate = False) { }

	// RVA: 0x18A3788 Offset: 0x18A3788 VA: 0x18A3788
	private void ChangeBgColorDarkness(bool immediate = False) { }

	// RVA: 0x18A3838 Offset: 0x18A3838 VA: 0x18A3838
	private void ChangeBgColorNormal(bool immediate = False) { }

	// RVA: -1 Offset: -1
	public T GetCommonEffectAsset<T>(string name) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21A1160 Offset: 0x21A1160 VA: 0x21A1160
	|-WarBoardManager.GetCommonEffectAsset<object>
	|-WarBoardManager.GetCommonEffectAsset<GameObject>
	*/

	// RVA: 0x18A38E8 Offset: 0x18A38E8 VA: 0x18A38E8
	public UIFont GetNumberFont2() { }

	// RVA: 0x18A38F0 Offset: 0x18A38F0 VA: 0x18A38F0
	public UIAtlas GetItemIconAtlas() { }

	// RVA: 0x18A38F8 Offset: 0x18A38F8 VA: 0x18A38F8
	public UIAtlas GetEffectIconAtlas() { }

	// RVA: 0x18A3900 Offset: 0x18A3900 VA: 0x18A3900
	public UIAtlas GetImageSetAtlas() { }

	// RVA: 0x18A3908 Offset: 0x18A3908 VA: 0x18A3908
	public void Finish() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43154 Offset: 0xD43154 VA: 0xD43154
	// RVA: 0x18A2F18 Offset: 0x18A2F18 VA: 0x18A2F18
	public WarBoardData get_warBoardData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43164 Offset: 0xD43164 VA: 0xD43164
	// RVA: 0x18A406C Offset: 0x18A406C VA: 0x18A406C
	private void set_warBoardData(WarBoardData value) { }

	// RVA: 0x189F690 Offset: 0x189F690 VA: 0x189F690
	public Vector3 GetSquarePosition(int squareIndex) { }

	// RVA: 0x18A4074 Offset: 0x18A4074 VA: 0x18A4074
	public MapCamera GetMapCamera() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43174 Offset: 0xD43174 VA: 0xD43174
	// RVA: 0x18A407C Offset: 0x18A407C VA: 0x18A407C
	public WarBoardManager.ControllType get_controllType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43184 Offset: 0xD43184 VA: 0xD43184
	// RVA: 0x18A4084 Offset: 0x18A4084 VA: 0x18A4084
	private void set_controllType(WarBoardManager.ControllType value) { }

	// RVA: 0x18A408C Offset: 0x18A408C VA: 0x18A408C
	public void ResumeBgm() { }

	// RVA: 0x18A4188 Offset: 0x18A4188 VA: 0x18A4188
	private void TransitionConfigurationMode() { }

	// RVA: 0x18A42A0 Offset: 0x18A42A0 VA: 0x18A42A0
	public void TransitionPlayFromConfigurationMode() { }

	// RVA: 0x18A49E4 Offset: 0x18A49E4 VA: 0x18A49E4
	private void SetupResponse(string result) { }

	// RVA: 0x18A560C Offset: 0x18A560C VA: 0x18A560C
	private void BuffSaveResponse(string result) { }

	// RVA: 0x18A5B54 Offset: 0x18A5B54 VA: 0x18A5B54
	public void TransitionPlayMode() { }

	// RVA: 0x18A6F84 Offset: 0x18A6F84 VA: 0x18A6F84
	public void TransitionBattle() { }

	// RVA: 0x18A6FB4 Offset: 0x18A6FB4 VA: 0x18A6FB4
	public void ReturnBattle() { }

	// RVA: 0x18A49A8 Offset: 0x18A49A8 VA: 0x18A49A8
	public void SetAllTouchBlock(bool isBlock, bool force = False) { }

	// RVA: 0x18A6FE4 Offset: 0x18A6FE4 VA: 0x18A6FE4
	public void SetTouchBlock(bool active, bool force = False) { }

	// RVA: 0x18A70D8 Offset: 0x18A70D8 VA: 0x18A70D8
	public void SetMapTouchEnable(bool enable, bool force = False) { }

	// RVA: 0x18A71A8 Offset: 0x18A71A8 VA: 0x18A71A8
	public void SetTouchEnablePlayerServantSquare(bool isEnable, bool withOnObject = False) { }

	// RVA: 0x18A740C Offset: 0x18A740C VA: 0x18A740C
	public void SetTouchEnableAllSquare(bool isEnable, bool withOnObject = False) { }

	// RVA: 0x18A7518 Offset: 0x18A7518 VA: 0x18A7518
	private void AddTaskForResolveTouchBlockLag() { }

	// RVA: 0x18A76F0 Offset: 0x18A76F0 VA: 0x18A76F0
	private void CTouchDeselectPieceProc() { }

	// RVA: 0x18A7D48 Offset: 0x18A7D48 VA: 0x18A7D48
	public Camera GetUICamera() { }

	// RVA: 0x18A7D50 Offset: 0x18A7D50 VA: 0x18A7D50
	private void CheckResetZoomSwitchButton() { }

	// RVA: 0x18A7E48 Offset: 0x18A7E48 VA: 0x18A7E48
	public void SetForceDispZoomSwitchButton(bool isDisp) { }

	// RVA: 0x18A7E54 Offset: 0x18A7E54 VA: 0x18A7E54
	private void Update() { }

	// RVA: 0x18A8168 Offset: 0x18A8168 VA: 0x18A8168
	protected void Awake() { }

	// RVA: 0x18A81B8 Offset: 0x18A81B8 VA: 0x18A81B8
	private void MasterAttackRequest(WarBoardPieceData attacker, WarBoardPieceData target, WarBoardTaskBase.TaskCallback endCallback) { }

	// RVA: 0x18A8574 Offset: 0x18A8574 VA: 0x18A8574
	private void TrunEndRequest(WarBoardTaskBase.TaskCallback endCallback) { }

	// RVA: 0x18A87D8 Offset: 0x18A87D8 VA: 0x18A87D8
	private void ResponseWarBoardDataEntity(string result) { }

	// RVA: 0x18A88C8 Offset: 0x18A88C8 VA: 0x18A88C8
	private void ServantAttackRequest(WarBoardPieceData attacker, WarBoardPieceData target) { }

	// RVA: 0x18A8EB4 Offset: 0x18A8EB4 VA: 0x18A8EB4
	private void BattleSetupResponse(string result) { }

	// RVA: 0x18A8FD4 Offset: 0x18A8FD4 VA: 0x18A8FD4
	private void ChangeBattle() { }

	// RVA: 0x18A5E80 Offset: 0x18A5E80 VA: 0x18A5E80
	public void TreasureGetRequest(WarBoardTreasureData treasureData) { }

	// RVA: 0x18A908C Offset: 0x18A908C VA: 0x18A908C
	private void TreasureResponse(string response) { }

	// RVA: 0x18A91C8 Offset: 0x18A91C8 VA: 0x18A91C8
	private void GameSetRequest(WarBoardManager.WarBoardResult result, WarBoardTaskBase.TaskCallback endCallback) { }

	// RVA: 0x18A9400 Offset: 0x18A9400 VA: 0x18A9400
	private void GameSetupResponse(string result) { }

	// RVA: 0x18A959C Offset: 0x18A959C VA: 0x18A959C
	public BattleData GetBattleData() { }

	// RVA: 0x18A95A4 Offset: 0x18A95A4 VA: 0x18A95A4
	private void InitializeLogic(WarBoardDataEntity warBoardData, bool loadServerData) { }

	// RVA: 0x18A9E04 Offset: 0x18A9E04 VA: 0x18A9E04
	public void UpdateFormServerData_BattleLogic(WarBoardDataEntity warBoardData) { }

	// RVA: 0x18A4C24 Offset: 0x18A4C24 VA: 0x18A4C24
	public void UpdatePlayerServant(WarBoardDataEntity warBoardData) { }

	// RVA: 0x18A9860 Offset: 0x18A9860 VA: 0x18A9860
	private void CreatePlayerServantList(bool loadServerData, CommandCodeInfo[] userCommandCode) { }

	// RVA: 0x18A9B4C Offset: 0x18A9B4C VA: 0x18A9B4C
	private void CreateEnemyServantList(bool loadServerData, CommandCodeInfo[] userCommandCode) { }

	// RVA: 0x18A9E40 Offset: 0x18A9E40 VA: 0x18A9E40
	private void SetBattleServantFromCurrentData(BattleServantData servantData) { }

	// RVA: 0x18A9F80 Offset: 0x18A9F80 VA: 0x18A9F80
	private void SetCurrentDataFromBattleServant(BattleServantData servantData) { }

	// RVA: 0x18AA0C0 Offset: 0x18AA0C0 VA: 0x18AA0C0
	public BattleServantData GetBattleServant(long userSvtId) { }

	// RVA: 0x18AA210 Offset: 0x18AA210 VA: 0x18AA210
	public BattleServantData GetBattleServantFromUniqueId(int uniqueId) { }

	// RVA: 0x18A4CCC Offset: 0x18A4CCC VA: 0x18A4CCC
	private void actPlayerPassiveSkill() { }

	// RVA: 0x18A5118 Offset: 0x18A5118 VA: 0x18A5118
	private void actEnemyPtPassiveSkill(int actUniqueId = 0, bool isShift = False) { }

	// RVA: 0x18AA360 Offset: 0x18AA360 VA: 0x18AA360
	private void actPassiveSkill(BattleSkillInfoData skillInfo, bool isShift = False) { }

	// RVA: 0x18A1A50 Offset: 0x18A1A50 VA: 0x18A1A50
	public bool ExecuteProcList(WarBoardPieceData pieceData, int targetId, int[] funcList, DataVals[] dataVals, int skillId = 0, int[] pttargetIds, bool isUpdateStatus = True) { }

	// RVA: 0x18AA758 Offset: 0x18AA758 VA: 0x18AA758
	public void RemoveSkillBuff(BattleServantData battleServant, int skillId) { }

	// RVA: 0x18A5788 Offset: 0x18A5788 VA: 0x18A5788
	private void LoadBattleResourceCache(Action endCallback) { }

	// RVA: 0x18AA764 Offset: 0x18AA764 VA: 0x18AA764
	private void LoadBattleBgCache(Action endCallback) { }

	// RVA: 0x18AB1B8 Offset: 0x18AB1B8 VA: 0x18AB1B8
	private void DownloadServantVoice(Action endCallback) { }

	// RVA: 0x18AAAC0 Offset: 0x18AAAC0 VA: 0x18AAAC0
	private void LoadServantAssetCache(Action endCallback) { }

	// RVA: 0x18A3F2C Offset: 0x18A3F2C VA: 0x18A3F2C
	private void ReleaseBattleResourceCache() { }

	// RVA: 0x18AB5B0 Offset: 0x18AB5B0 VA: 0x18AB5B0
	private List<string> GetServantAssetNames(BattleServantData svtData) { }

	// RVA: 0x18AB784 Offset: 0x18AB784 VA: 0x18AB784
	private List<string> GetServantAssetNames(int svtId, int limit, int weapon, int cameraId, int overwriteVoideId, int appearanceId, int[] commandCodeIds, List<BattleSkillInfoData> skillList, int effectWeapon, int effectFolder) { }

	// RVA: 0x18AB458 Offset: 0x18AB458 VA: 0x18AB458
	private List<string> GetServantVoiceNames(BattleServantData svtData) { }

	// RVA: 0x18ABDFC Offset: 0x18ABDFC VA: 0x18ABDFC
	private List<string> GetServantVoiceNames(int svtId, int limit, int weapon, int cameraId, int overwriteVoideId, int appearanceId, int[] commandCodeIds, List<BattleSkillInfoData> skillList) { }

	// RVA: 0x18ABB54 Offset: 0x18ABB54 VA: 0x18ABB54
	private string getBattleActorAssetName(int svtId, int limitCount, int appearanceId = 0, bool isForce = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43194 Offset: 0xD43194 VA: 0xD43194
	// RVA: 0x18ABC48 Offset: 0x18ABC48 VA: 0x18ABC48
	private IEnumerable<string> GetCommandCodeAssetNames(int[] commandCodeIds) { }

	// RVA: 0x18ABCD4 Offset: 0x18ABCD4 VA: 0x18ABCD4
	public string GetWeaponEffectAssetName(int weapongroup, int effectFolder) { }

	// RVA: 0x18ABFC0 Offset: 0x18ABFC0 VA: 0x18ABFC0
	private string getServantVoiceName(int svtId, int limitCount, int overwriteSvtVoiceId) { }

	// RVA: 0x18AC0BC Offset: 0x18AC0BC VA: 0x18AC0BC
	public string getSkillAnyVoiceName(BattleSkillInfoData _skillInfo) { }

	// RVA: 0x189FC70 Offset: 0x189FC70 VA: 0x189FC70
	public bool get_isSelectedPiece() { }

	[CompilerGeneratedAttribute] // RVA: 0xD431A4 Offset: 0xD431A4 VA: 0xD431A4
	// RVA: 0x18AC1D8 Offset: 0x18AC1D8 VA: 0x18AC1D8
	public uint get_lastSelectPieceUniqueIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD431B4 Offset: 0xD431B4 VA: 0xD431B4
	// RVA: 0x18AC1E0 Offset: 0x18AC1E0 VA: 0x18AC1E0
	private void set_lastSelectPieceUniqueIndex(uint value) { }

	// RVA: 0x18AC1E8 Offset: 0x18AC1E8 VA: 0x18AC1E8
	private WarBoardActionPointEntity get_warBoardActionPointEntity() { }

	// RVA: 0x18AC268 Offset: 0x18AC268 VA: 0x18AC268
	public void Retire(Action callback) { }

	// RVA: 0x18AC33C Offset: 0x18AC33C VA: 0x18AC33C
	public bool IsNowTurn(WarBoardPieceData piece) { }

	// RVA: 0x18AC3C8 Offset: 0x18AC3C8 VA: 0x18AC3C8
	public bool IsNowTurn(int forceId, int groupId) { }

	// RVA: 0x18A7FC8 Offset: 0x18A7FC8 VA: 0x18A7FC8
	public bool IsPlayerTurn() { }

	// RVA: 0x18AC3EC Offset: 0x18AC3EC VA: 0x18AC3EC
	public bool JudgmentGameSet() { }

	// RVA: 0x18ACC6C Offset: 0x18ACC6C VA: 0x18ACC6C
	private void EndGameSetRequest() { }

	// RVA: 0x18A63B8 Offset: 0x18A63B8 VA: 0x18A63B8
	private void ChangeTurn(bool playStartBattle) { }

	// RVA: 0x18ACD24 Offset: 0x18ACD24 VA: 0x18ACD24
	private void MoveCameraLastPiece(List<WarBoardTaskBase> performances) { }

	// RVA: 0x18AEA64 Offset: 0x18AEA64 VA: 0x18AEA64
	private void EndPlayerTurnEffect() { }

	// RVA: 0x18AEC54 Offset: 0x18AEC54 VA: 0x18AEC54
	private void EndEnemyTurnEffect() { }

	// RVA: 0x18AECDC Offset: 0x18AECDC VA: 0x18AECDC
	public void PlayBgmForPlaying() { }

	// RVA: 0x18AEDA4 Offset: 0x18AEDA4 VA: 0x18AEDA4
	public void NextTurn(bool startEffect = False) { }

	// RVA: 0x18AEFA8 Offset: 0x18AEFA8 VA: 0x18AEFA8
	public bool IsSelectedPieceSameForce(int forceId) { }

	// RVA: 0x18AEFE8 Offset: 0x18AEFE8 VA: 0x18AEFE8
	public bool IsSelectedPieceSame(WarBoardPieceData piece) { }

	// RVA: 0x18AF044 Offset: 0x18AF044 VA: 0x18AF044
	public bool EnableAttack() { }

	// RVA: 0x18AF08C Offset: 0x18AF08C VA: 0x18AF08C
	public bool EnableMove(bool swap = False, bool isContainMaster = False) { }

	// RVA: 0x18AF108 Offset: 0x18AF108 VA: 0x18AF108
	public bool EnableAction() { }

	// RVA: 0x18AF168 Offset: 0x18AF168 VA: 0x18AF168
	public bool ExistEnableActionPiece() { }

	// RVA: 0x18AF2A4 Offset: 0x18AF2A4 VA: 0x18AF2A4
	public bool ExistEnableActionPieceExtend() { }

	// RVA: 0x18AF974 Offset: 0x18AF974 VA: 0x18AF974
	public void SelectPiece(WarBoardPieceData piece) { }

	// RVA: 0x18AF4A8 Offset: 0x18AF4A8 VA: 0x18AF4A8
	public bool CheckSelectSquare(WarBoardPieceData piece, WarBoardSquareData square, bool isUpdateLabel = True) { }

	// RVA: 0x18A79CC Offset: 0x18A79CC VA: 0x18A79CC
	public void DeselectPiece(bool showActionTarget = True, int[] removeSquareIndex) { }

	// RVA: 0x18AFD3C Offset: 0x18AFD3C VA: 0x18AFD3C
	private void CompatibilityDisplay() { }

	// RVA: 0x18AEB88 Offset: 0x18AEB88 VA: 0x18AEB88
	private void ShowActionTarget() { }

	// RVA: 0x18AE888 Offset: 0x18AE888 VA: 0x18AE888
	private void HideActionTarget() { }

	// RVA: 0x189FC88 Offset: 0x189FC88 VA: 0x189FC88
	public void SelectedPieceAction(int targetSquareIndex) { }

	// RVA: 0x18B138C Offset: 0x18B138C VA: 0x18B138C
	public bool PieceAction(int forceId, int groupId, int unitIndex, int targetSquareIndex, WarBoardTaskBase endTask) { }

	// RVA: 0x18B0620 Offset: 0x18B0620 VA: 0x18B0620
	public bool PieceAction(WarBoardPieceData actionPiece, int targetSquareIndex, WarBoardTaskBase endTask) { }

	// RVA: 0x18B1420 Offset: 0x18B1420 VA: 0x18B1420
	private void MoveEndProc() { }

	// RVA: 0x18A5F88 Offset: 0x18A5F88 VA: 0x18A5F88
	private bool UpdateFromServerData(WarBoardDataEntity warBoardDataEntity, bool forceUpdate = False) { }

	// RVA: 0x18B1698 Offset: 0x18B1698 VA: 0x18B1698
	private void OpenAttackConfirmPopup(Action okCall, Action cancelCall) { }

	// RVA: 0x18B0528 Offset: 0x18B0528 VA: 0x18B0528
	private void OpenSwapMoveConfirmPopup(bool isContainMaster, Action okCall, Action cancelCall) { }

	// RVA: 0x18B1B7C Offset: 0x18B1B7C VA: 0x18B1B7C
	public WarBoardCommonEffectPerformance CreateAttackEffectTask(Vector3 position, bool isLocal) { }

	// RVA: 0x18B1C8C Offset: 0x18B1C8C VA: 0x18B1C8C
	public WarBoardCommonEffectPerformance CreateEncountkEffectTask(Vector3 position, bool isLocal) { }

	// RVA: 0x18B1D9C Offset: 0x18B1D9C VA: 0x18B1D9C
	public WarBoardMapCameraPerformance GetCameraPerformanceTask(Nullable<Vector3> position, Nullable<float> size, bool calcBoardToCamera = True) { }

	// RVA: 0x18B1FC0 Offset: 0x18B1FC0 VA: 0x18B1FC0
	public void DispBattleRange(int[] squareIndecis, bool onlyServant = True) { }

	// RVA: 0x18B20DC Offset: 0x18B20DC VA: 0x18B20DC
	public void NondispBattleRange(int[] squareIndecis) { }

	// RVA: 0x18B21D0 Offset: 0x18B21D0 VA: 0x18B21D0
	public WarBoardTaskBase GetCameraShakeTask() { }

	// RVA: 0x18AE9B8 Offset: 0x18AE9B8 VA: 0x18AE9B8
	public Vector2 BoardObjectPostionToCameraPosition(Vector3 pos, float targetSize) { }

	// RVA: 0x18B0274 Offset: 0x18B0274 VA: 0x18B0274
	public float GetCameraSize(Vector3 basePosition, int[] squareindexies, float margin) { }

	[CompilerGeneratedAttribute] // RVA: 0xD431C4 Offset: 0xD431C4 VA: 0xD431C4
	// RVA: 0x18AE880 Offset: 0x18AE880 VA: 0x18AE880
	public bool get_notOnboardSkillFlag() { }

	[CompilerGeneratedAttribute] // RVA: 0xD431D4 Offset: 0xD431D4 VA: 0xD431D4
	// RVA: 0x18AE930 Offset: 0x18AE930 VA: 0x18AE930
	public void set_notOnboardSkillFlag(bool value) { }

	// RVA: 0x18AD124 Offset: 0x18AD124 VA: 0x18AD124
	private void OnBoardSkillStart(WarBoardOnboardSkillEntity.SkillTiming timing, int turn, List<WarBoardTaskBase> performances, Action endCallback) { }

	// RVA: 0x18A4878 Offset: 0x18A4878 VA: 0x18A4878
	private bool get_IsPartyMenuOpen() { }

	[DebuggerHiddenAttribute] // RVA: 0xD431E4 Offset: 0xD431E4 VA: 0xD431E4
	// RVA: 0x18B2254 Offset: 0x18B2254 VA: 0x18B2254
	private IEnumerator InitPartyMenu() { }

	// RVA: 0x18A3E04 Offset: 0x18A3E04 VA: 0x18A3E04
	private void ReleasePartyOrganization() { }

	// RVA: 0x18B22CC Offset: 0x18B22CC VA: 0x18B22CC
	public void OpenPartyMenu(WarBoardPieceData focusPiece) { }

	// RVA: 0x18A4918 Offset: 0x18A4918 VA: 0x18A4918
	public void ClosePartyMenu() { }

	// RVA: 0x18B2514 Offset: 0x18B2514 VA: 0x18B2514
	public void OnFinishedEditPiece(WarBoardPartyOrganizationMenu.ResponseData[] dataList) { }

	// RVA: 0x18B28F8 Offset: 0x18B28F8 VA: 0x18B28F8
	public void SquareSelect(int squareIndex) { }

	// RVA: 0x18B2474 Offset: 0x18B2474 VA: 0x18B2474
	public void SquarDeselect() { }

	[CompilerGeneratedAttribute] // RVA: 0xD431F4 Offset: 0xD431F4 VA: 0xD431F4
	// RVA: 0x18B2950 Offset: 0x18B2950 VA: 0x18B2950
	public bool get_IsEditingUserEquip() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43204 Offset: 0xD43204 VA: 0xD43204
	// RVA: 0x18B2958 Offset: 0x18B2958 VA: 0x18B2958
	private void set_IsEditingUserEquip(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD43214 Offset: 0xD43214 VA: 0xD43214
	// RVA: 0x18B2964 Offset: 0x18B2964 VA: 0x18B2964
	public SceneJumpInfo get_UserEquipSceneInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43224 Offset: 0xD43224 VA: 0xD43224
	// RVA: 0x18B296C Offset: 0x18B296C VA: 0x18B296C
	private void set_UserEquipSceneInfo(SceneJumpInfo value) { }

	// RVA: 0x18B2974 Offset: 0x18B2974 VA: 0x18B2974
	public void OpenUserEquipScene() { }

	// RVA: 0x18B2A4C Offset: 0x18B2A4C VA: 0x18B2A4C
	public void OnCloseUserEquipScene() { }

	// RVA: 0x18B2AD0 Offset: 0x18B2AD0 VA: 0x18B2AD0
	public void ShowServantSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x18B2EAC Offset: 0x18B2EAC VA: 0x18B2EAC
	public void ShowServantEquipSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x18A0634 Offset: 0x18A0634 VA: 0x18A0634
	public void ShowItemSimplePopup(WarBoardItemData itemData, Vector3 squarePosition) { }

	// RVA: 0x18B32AC Offset: 0x18B32AC VA: 0x18B32AC
	public void ShowEffectSimplePopup(WarBoardEffectData effectData, Vector3 squarePosition) { }

	// RVA: 0x18B0180 Offset: 0x18B0180 VA: 0x18B0180
	public void HideSimplePopup(Action hideCompleteCallback) { }

	// RVA: 0x18B3650 Offset: 0x18B3650 VA: 0x18B3650
	public void ShowServantDetailPopup(WarBoardPieceData selectedPiece, bool playOpenSe = True) { }

	// RVA: 0x18B3AFC Offset: 0x18B3AFC VA: 0x18B3AFC
	public void HideServantDetailPopup() { }

	// RVA: 0x18B1790 Offset: 0x18B1790 VA: 0x18B1790
	public void ShowAttackConfirmPopup(Action<bool> clickCallback) { }

	// RVA: 0x18B3C4C Offset: 0x18B3C4C VA: 0x18B3C4C
	public void HideAttackConfirmPopup(Action hideCallback) { }

	// RVA: 0x18B1984 Offset: 0x18B1984 VA: 0x18B1984
	public void ShowSwapConfirmPopup(bool isContainMaster, Action<bool> clickCallback) { }

	// RVA: 0x18B3D2C Offset: 0x18B3D2C VA: 0x18B3D2C
	public void HideSwapConfirmPopup(Action hideCallback) { }

	// RVA: 0x18B3E0C Offset: 0x18B3E0C VA: 0x18B3E0C
	public void ShowTurnEndConfirmPopup(Action<bool> clickCallback) { }

	// RVA: 0x18B3F68 Offset: 0x18B3F68 VA: 0x18B3F68
	public void HideTurnEndConfirmPopup(Action hideCallback) { }

	// RVA: 0x18B4048 Offset: 0x18B4048 VA: 0x18B4048
	public void ShowActionCountDecreaseNoticePopup(Action<bool> clickCallback) { }

	// RVA: 0x18B417C Offset: 0x18B417C VA: 0x18B417C
	public void HideActionCountDecreaseNoticePopup(Action hideCallback) { }

	// RVA: 0x18B2C8C Offset: 0x18B2C8C VA: 0x18B2C8C
	private void PrShowServantSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x18B2EB0 Offset: 0x18B2EB0 VA: 0x18B2EB0
	private void PrShowServantEquipSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	// RVA: 0x18B30B0 Offset: 0x18B30B0 VA: 0x18B30B0
	private void PrShowItemSimplePopup(WarBoardItemData itemData, Vector3 squarePosition) { }

	// RVA: 0x18B433C Offset: 0x18B433C VA: 0x18B433C
	private void AddItemSimplePopup(int squareIndex) { }

	// RVA: 0x18B3448 Offset: 0x18B3448 VA: 0x18B3448
	private void PrShowEffectSimplePopup(WarBoardEffectData effectData, Vector3 squarePosition) { }

	// RVA: 0x18B425C Offset: 0x18B425C VA: 0x18B425C
	private void AddEffectSimplePopup(int squareIndex) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43234 Offset: 0xD43234 VA: 0xD43234
	// RVA: 0x18B2BC8 Offset: 0x18B2BC8 VA: 0x18B2BC8
	private IEnumerator ReplaceServantSimplePopup(WarBoardPieceData selectedPiece, Vector3 piecePosition) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43244 Offset: 0xD43244 VA: 0xD43244
	// RVA: 0x18B2FEC Offset: 0x18B2FEC VA: 0x18B2FEC
	private IEnumerator ReplaceItemSimplePopup(WarBoardItemData itemData, Vector3 squarePosition) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43254 Offset: 0xD43254 VA: 0xD43254
	// RVA: 0x18B3384 Offset: 0x18B3384 VA: 0x18B3384
	private IEnumerator ReplaceEffectSimplePopup(WarBoardEffectData effectData, Vector3 squarePosition) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43264 Offset: 0xD43264 VA: 0xD43264
	// RVA: 0x18B4434 Offset: 0x18B4434 VA: 0x18B4434
	private IEnumerator InitializeOnPartOfPopupControl() { }

	[DebuggerHiddenAttribute] // RVA: 0xD43274 Offset: 0xD43274 VA: 0xD43274
	// RVA: 0x18B44AC Offset: 0x18B44AC VA: 0x18B44AC
	private IEnumerator ReloadBuffIconAtlas() { }

	// RVA: 0x18A3B60 Offset: 0x18A3B60 VA: 0x18A3B60
	private void FinishOnPartOfPopupControl() { }

	// RVA: 0x18B3A84 Offset: 0x18B3A84 VA: 0x18B3A84
	private void ReleaseAssetsForServantDetailPopup() { }

	// RVA: 0x18A9078 Offset: 0x18A9078 VA: 0x18A9078
	public void PauseScheduler(bool immediate = False) { }

	// RVA: 0x18B4510 Offset: 0x18B4510 VA: 0x18B4510
	public void ResumeScheduler() { }

	// RVA: 0x18A0BDC Offset: 0x18A0BDC VA: 0x18A0BDC
	public void AddTask(bool enableInput, WarBoardTaskBase[] performances) { }

	// RVA: 0x18AE93C Offset: 0x18AE93C VA: 0x18AE93C
	public void AddTask(bool enableInput, List<WarBoardTaskBase> performances) { }

	// RVA: 0x18B4518 Offset: 0x18B4518 VA: 0x18B4518
	public void InsertTask(bool enableInput, WarBoardTaskBase[] performances) { }

	// RVA: 0x18B46A4 Offset: 0x18B46A4 VA: 0x18B46A4
	public void InsertTask(bool enableInput, List<WarBoardTaskBase> performances) { }

	// RVA: 0x18B4720 Offset: 0x18B4720 VA: 0x18B4720
	public bool IsNonBlockTaskEnmpty() { }

	[DebuggerHiddenAttribute] // RVA: 0xD43284 Offset: 0xD43284 VA: 0xD43284
	// RVA: 0x18B478C Offset: 0x18B478C VA: 0x18B478C
	private IEnumerator TaskExecute() { }

	[DebuggerHiddenAttribute] // RVA: 0xD43294 Offset: 0xD43294 VA: 0xD43294
	// RVA: 0x18B47FC Offset: 0x18B47FC VA: 0x18B47FC
	private IEnumerator NonBlockTaskExecute() { }

	// RVA: 0x18B4874 Offset: 0x18B4874 VA: 0x18B4874
	public static bool IEnumeratorExecute(IEnumerator enumerator) { }

	// RVA: 0x18A7FE8 Offset: 0x18A7FE8 VA: 0x18A7FE8
	private void TaskUpdate() { }

	// RVA: 0x18B4B64 Offset: 0x18B4B64 VA: 0x18B4B64
	private void ShowWarBoardIntroTutorial(Action callbackAfter) { }

	// RVA: 0x18B4C50 Offset: 0x18B4C50 VA: 0x18B4C50
	private void ShowWarBoardMapTutorial() { }

	// RVA: 0x18B285C Offset: 0x18B285C VA: 0x18B285C
	private void ShowWarBoardSetUpTutorial() { }

	// RVA: 0x18AEAEC Offset: 0x18AEAEC VA: 0x18AEAEC
	private void ShowWarBoardStartTutorial() { }

	// RVA: 0x18B4CEC Offset: 0x18B4CEC VA: 0x18B4CEC
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD432A4 Offset: 0xD432A4 VA: 0xD432A4
	// RVA: 0x18B4DE8 Offset: 0x18B4DE8 VA: 0x18B4DE8
	private static bool <TransitionPlayFromConfigurationMode>m__0(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD432B4 Offset: 0xD432B4 VA: 0xD432B4
	// RVA: 0x18B4E14 Offset: 0x18B4E14 VA: 0x18B4E14
	private static bool <TransitionPlayFromConfigurationMode>m__1(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD432C4 Offset: 0xD432C4 VA: 0xD432C4
	// RVA: 0x18B4E70 Offset: 0x18B4E70 VA: 0x18B4E70
	private static int <TransitionPlayFromConfigurationMode>m__2(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD432D4 Offset: 0xD432D4 VA: 0xD432D4
	// RVA: 0x18B4E9C Offset: 0x18B4E9C VA: 0x18B4E9C
	private static long <TransitionPlayFromConfigurationMode>m__3(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD432E4 Offset: 0xD432E4 VA: 0xD432E4
	// RVA: 0x18B4EC8 Offset: 0x18B4EC8 VA: 0x18B4EC8
	private static long <TransitionPlayFromConfigurationMode>m__4(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD432F4 Offset: 0xD432F4 VA: 0xD432F4
	// RVA: 0x18B4EF4 Offset: 0x18B4EF4 VA: 0x18B4EF4
	private static int <SetTouchEnablePlayerServantSquare>m__5(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD43304 Offset: 0xD43304 VA: 0xD43304
	// RVA: 0x18B4F20 Offset: 0x18B4F20 VA: 0x18B4F20
	private void <AddTaskForResolveTouchBlockLag>m__6() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43314 Offset: 0xD43314 VA: 0xD43314
	// RVA: 0x18B4F54 Offset: 0x18B4F54 VA: 0x18B4F54
	private void <TreasureResponse>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43324 Offset: 0xD43324 VA: 0xD43324
	// RVA: 0x18B4FA0 Offset: 0x18B4FA0 VA: 0x18B4FA0
	private static int <actPlayerPassiveSkill>m__8(BattleSkillInfoData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD43334 Offset: 0xD43334 VA: 0xD43334
	// RVA: 0x18B4FC8 Offset: 0x18B4FC8 VA: 0x18B4FC8
	private static int <actEnemyPtPassiveSkill>m__9(BattleSkillInfoData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD43344 Offset: 0xD43344 VA: 0xD43344
	// RVA: 0x18B4FF0 Offset: 0x18B4FF0 VA: 0x18B4FF0
	private static void <JudgmentGameSet>m__A() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43354 Offset: 0xD43354 VA: 0xD43354
	// RVA: 0x18B5194 Offset: 0x18B5194 VA: 0x18B5194
	private static void <JudgmentGameSet>m__B() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43364 Offset: 0xD43364 VA: 0xD43364
	// RVA: 0x18B5380 Offset: 0x18B5380 VA: 0x18B5380
	private void <ChangeTurn>m__C() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43374 Offset: 0xD43374 VA: 0xD43374
	// RVA: 0x18B544C Offset: 0x18B544C VA: 0x18B544C
	private void <ChangeTurn>m__D() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43384 Offset: 0xD43384 VA: 0xD43384
	// RVA: 0x18B5450 Offset: 0x18B5450 VA: 0x18B5450
	private void <ChangeTurn>m__E() { }

	[CompilerGeneratedAttribute] // RVA: 0xD43394 Offset: 0xD43394 VA: 0xD43394
	// RVA: 0x18B5454 Offset: 0x18B5454 VA: 0x18B5454
	private bool <ChangeTurn>m__F(WarBoardUserMasterData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD433A4 Offset: 0xD433A4 VA: 0xD433A4
	// RVA: 0x18B54A8 Offset: 0x18B54A8 VA: 0x18B54A8
	private static void <ChangeTurn>m__10(WarBoardPieceData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD433B4 Offset: 0xD433B4 VA: 0xD433B4
	// RVA: 0x18B54D4 Offset: 0x18B54D4 VA: 0x18B54D4
