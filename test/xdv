	// Methods

	// RVA: 0x22E65D0 Offset: 0x22E65D0 VA: 0x22E65D0
	internal MarshalAsAttribute ToMarshalAsAttribute() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC5DE4 Offset: 0xBC5DE4 VA: 0xBC5DE4
[Serializable]
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 351
{
	// Methods

	// RVA: 0x21E66E0 Offset: 0x21E66E0 VA: 0x21E66E0
	public void .ctor() { }

	// RVA: 0x21E4A40 Offset: 0x21E4A40 VA: 0x21E4A40
	public void .ctor(string message) { }

	// RVA: 0x21F2068 Offset: 0x21F2068 VA: 0x21F2068
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xBC5DF8 Offset: 0xBC5DF8 VA: 0xBC5DF8
[ComDefaultInterfaceAttribute] // RVA: 0xBC5DF8 Offset: 0xBC5DF8 VA: 0xBC5DF8
[ComVisibleAttribute] // RVA: 0xBC5DF8 Offset: 0xBC5DF8 VA: 0xBC5DF8
[Serializable]
public class Assembly : ICustomAttributeProvider, _Assembly // TypeDefIndex: 352
{
	// Fields
	private IntPtr _mono_assembly; // 0x10
	private Assembly.ResolveEventHolder resolve_event_holder; // 0x18
	private Evidence _evidence; // 0x20
	internal PermissionSet _minimum; // 0x28
	internal PermissionSet _optional; // 0x30
	internal PermissionSet _refuse; // 0x38
	private PermissionSet _granted; // 0x40
	private PermissionSet _denied; // 0x48
	private bool fromByteArray; // 0x50
	private string assemblyName; // 0x58

	// Properties
	public virtual string FullName { get; }
	public virtual string Location { get; }
	internal PermissionSet GrantedPermissionSet { get; }
	internal PermissionSet DeniedPermissionSet { get; }

	// Methods

	// RVA: 0x21F2070 Offset: 0x21F2070 VA: 0x21F2070
	internal void .ctor() { }

	// RVA: 0x21F20C8 Offset: 0x21F20C8 VA: 0x21F20C8
	private string get_code_base(bool escaped) { }

	// RVA: 0x21F20D0 Offset: 0x21F20D0 VA: 0x21F20D0
	private string get_fullname() { }

	// RVA: 0x21F20D4 Offset: 0x21F20D4 VA: 0x21F20D4
	private string get_location() { }

	// RVA: 0x21F20D8 Offset: 0x21F20D8 VA: 0x21F20D8
	private string GetCodeBase(bool escaped) { }

	// RVA: 0x21F20E0 Offset: 0x21F20E0 VA: 0x21F20E0 Slot: 6
	public virtual string get_FullName() { }

	// RVA: 0x21F20EC Offset: 0x21F20EC VA: 0x21F20EC
	internal Evidence UnprotectedGetEvidence() { }

	// RVA: 0x21F2178 Offset: 0x21F2178 VA: 0x21F2178 Slot: 7
	public virtual string get_Location() { }

	// RVA: 0x21F21F8 Offset: 0x21F21F8 VA: 0x21F21F8 Slot: 8
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x21F2274 Offset: 0x21F2274 VA: 0x21F2274 Slot: 9
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x21F22F0 Offset: 0x21F22F0 VA: 0x21F22F0
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module) { }

	// RVA: 0x21F22F4 Offset: 0x21F22F4 VA: 0x21F22F4 Slot: 10
	public virtual Stream GetManifestResourceStream(string name) { }

	// RVA: 0x21F2624 Offset: 0x21F2624 VA: 0x21F2624 Slot: 11
	internal virtual Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x21F262C Offset: 0x21F262C VA: 0x21F262C Slot: 12
	public virtual Type[] GetTypes() { }

	// RVA: 0x21F263C Offset: 0x21F263C VA: 0x21F263C Slot: 13
	public virtual Type GetType(string name, bool throwOnError) { }

	// RVA: 0x21F2740 Offset: 0x21F2740 VA: 0x21F2740 Slot: 14
	public virtual Type GetType(string name) { }

	// RVA: 0x21F274C Offset: 0x21F274C VA: 0x21F274C
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x21F2648 Offset: 0x21F2648 VA: 0x21F2648 Slot: 15
	public Type GetType(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x21F2758 Offset: 0x21F2758 VA: 0x21F2758
	private static void FillName(Assembly ass, AssemblyName aname) { }

	[MonoTODOAttribute] // RVA: 0xBCCBF0 Offset: 0xBCCBF0 VA: 0xBCCBF0
	// RVA: 0x21F275C Offset: 0x21F275C VA: 0x21F275C Slot: 16
	public virtual AssemblyName GetName(bool copiedName) { }

	// RVA: 0x21F27E4 Offset: 0x21F27E4 VA: 0x21F27E4 Slot: 17
	public virtual AssemblyName GetName() { }

	// RVA: 0x21F27F8 Offset: 0x21F27F8 VA: 0x21F27F8 Slot: 18
	internal virtual AssemblyName UnprotectedGetName() { }

	// RVA: 0x21F2870 Offset: 0x21F2870 VA: 0x21F2870 Slot: 3
	public override string ToString() { }

	// RVA: 0x21F28A0 Offset: 0x21F28A0 VA: 0x21F28A0
	public static Assembly GetEntryAssembly() { }

	// RVA: 0x21F28A4 Offset: 0x21F28A4 VA: 0x21F28A4
	public static Assembly Load(string assemblyString) { }

	[ObsoleteAttribute] // RVA: 0xBCCC28 Offset: 0xBCCC28 VA: 0xBCCC28
	// RVA: 0x21F28E0 Offset: 0x21F28E0 VA: 0x21F28E0
	public static Assembly LoadWithPartialName(string partialName) { }

	// RVA: 0x21F28F4 Offset: 0x21F28F4 VA: 0x21F28F4
	private static Assembly load_with_partial_name(string name, Evidence e) { }

	[ObsoleteAttribute] // RVA: 0xBCCC60 Offset: 0xBCCC60 VA: 0xBCCC60
	// RVA: 0x21F28EC Offset: 0x21F28EC VA: 0x21F28EC
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence) { }

	// RVA: 0x21F28F8 Offset: 0x21F28F8 VA: 0x21F28F8
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior) { }

	// RVA: 0x21F29A8 Offset: 0x21F29A8 VA: 0x21F29A8 Slot: 19
	public Module GetModule(string name) { }

	// RVA: 0x21F2D5C Offset: 0x21F2D5C VA: 0x21F2D5C Slot: 20
	internal virtual Module[] GetModulesInternal() { }

	// RVA: 0x21F2B60 Offset: 0x21F2B60 VA: 0x21F2B60 Slot: 21
	public Module[] GetModules(bool getResourceModules) { }

	// RVA: 0x21F2D60 Offset: 0x21F2D60 VA: 0x21F2D60 Slot: 22
	public virtual string[] GetManifestResourceNames() { }

	// RVA: 0x21F2D64 Offset: 0x21F2D64 VA: 0x21F2D64
	public static Assembly GetExecutingAssembly() { }

	// RVA: 0x21F2DB8 Offset: 0x21F2DB8 VA: 0x21F2DB8
	public static Assembly GetCallingAssembly() { }

	// RVA: 0x21F2DBC Offset: 0x21F2DBC VA: 0x21F2DBC
	private bool GetManifestResourceInfoInternal(string name, ManifestResourceInfo info) { }

	// RVA: 0x21F2DC0 Offset: 0x21F2DC0 VA: 0x21F2DC0 Slot: 23
	public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName) { }

	// RVA: 0x21F2EC4 Offset: 0x21F2EC4 VA: 0x21F2EC4
	internal void Resolve() { }

	// RVA: 0x21F32A4 Offset: 0x21F32A4 VA: 0x21F32A4
	internal PermissionSet get_GrantedPermissionSet() { }

	// RVA: 0x21F33A0 Offset: 0x21F33A0 VA: 0x21F33A0
	internal PermissionSet get_DeniedPermissionSet() { }

	// RVA: 0x21F349C Offset: 0x21F349C VA: 0x21F349C
	internal static bool LoadPermissions(Assembly a, ref IntPtr minimum, ref int minLength, ref IntPtr optional, ref int optLength, ref IntPtr refused, ref int refLength) { }

	// RVA: 0x21F3068 Offset: 0x21F3068 VA: 0x21F3068
	private void LoadAssemblyPermissions() { }
}

// Namespace: 
internal class Assembly.ResolveEventHolder // TypeDefIndex: 353
{
	// Fields
	private ModuleResolveEventHandler ModuleResolve; // 0x10

	// Methods

	// RVA: 0x21F20C4 Offset: 0x21F20C4 VA: 0x21F20C4
	public void .ctor() { }
}

// Namespace: 
private class Assembly.ResourceCloseHandler // TypeDefIndex: 354
{
	// Fields
	private Module module; // 0x10

	// Methods

	// RVA: 0x21F261C Offset: 0x21F261C VA: 0x21F261C
	public void .ctor(Module module) { }

	// RVA: 0x21F34A0 Offset: 0x21F34A0 VA: 0x21F34A0
	public void OnClose(object sender, EventArgs e) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC5E84 Offset: 0xBC5E84 VA: 0xBC5E84
[AttributeUsageAttribute] // RVA: 0xBC5E84 Offset: 0xBC5E84 VA: 0xBC5E84
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 355
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F34A8 Offset: 0x21F34A8 VA: 0x21F34A8
	public void .ctor(string company) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC5ED8 Offset: 0xBC5ED8 VA: 0xBC5ED8
[AttributeUsageAttribute] // RVA: 0xBC5ED8 Offset: 0xBC5ED8 VA: 0xBC5ED8
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 356
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F34D4 Offset: 0x21F34D4 VA: 0x21F34D4
	public void .ctor(string configuration) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC5F2C Offset: 0xBC5F2C VA: 0xBC5F2C
[AttributeUsageAttribute] // RVA: 0xBC5F2C Offset: 0xBC5F2C VA: 0xBC5F2C
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 357
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F3500 Offset: 0x21F3500 VA: 0x21F3500
	public void .ctor(string copyright) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC5F80 Offset: 0xBC5F80 VA: 0xBC5F80
[ComVisibleAttribute] // RVA: 0xBC5F80 Offset: 0xBC5F80 VA: 0xBC5F80
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 358
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F352C Offset: 0x21F352C VA: 0x21F352C
	public void .ctor(string defaultAlias) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC5FD4 Offset: 0xBC5FD4 VA: 0xBC5FD4
[ComVisibleAttribute] // RVA: 0xBC5FD4 Offset: 0xBC5FD4 VA: 0xBC5FD4
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 359
{
	// Fields
	private bool delay; // 0x10

	// Methods

	// RVA: 0x21F3558 Offset: 0x21F3558 VA: 0x21F3558
	public void .ctor(bool delaySign) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC6028 Offset: 0xBC6028 VA: 0xBC6028
[ComVisibleAttribute] // RVA: 0xBC6028 Offset: 0xBC6028 VA: 0xBC6028
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 360
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F3588 Offset: 0x21F3588 VA: 0x21F3588
	public void .ctor(string description) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC607C Offset: 0xBC607C VA: 0xBC607C
[ComVisibleAttribute] // RVA: 0xBC607C Offset: 0xBC607C VA: 0xBC607C
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 361
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F35B4 Offset: 0x21F35B4 VA: 0x21F35B4
	public void .ctor(string version) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC60D0 Offset: 0xBC60D0 VA: 0xBC60D0
[ComVisibleAttribute] // RVA: 0xBC60D0 Offset: 0xBC60D0 VA: 0xBC60D0
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 362
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F3658 Offset: 0x21F3658 VA: 0x21F3658
	public void .ctor(string informationalVersion) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC6124 Offset: 0xBC6124 VA: 0xBC6124
[AttributeUsageAttribute] // RVA: 0xBC6124 Offset: 0xBC6124 VA: 0xBC6124
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 363
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F3684 Offset: 0x21F3684 VA: 0x21F3684
	public void .ctor(string keyFile) { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0xBC6178 Offset: 0xBC6178 VA: 0xBC6178
[ComVisibleAttribute] // RVA: 0xBC6178 Offset: 0xBC6178 VA: 0xBC6178
[ClassInterfaceAttribute] // RVA: 0xBC6178 Offset: 0xBC6178 VA: 0xBC6178
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback // TypeDefIndex: 364
{
	// Fields
	private string name; // 0x10
	private string codebase; // 0x18
	private int major; // 0x20
	private int minor; // 0x24
	private int build; // 0x28
	private int revision; // 0x2C
	private CultureInfo cultureinfo; // 0x30
	private AssemblyNameFlags flags; // 0x38
	private AssemblyHashAlgorithm hashalg; // 0x3C
	private StrongNameKeyPair keypair; // 0x40
	private byte[] publicKey; // 0x48
	private byte[] keyToken; // 0x50
	private AssemblyVersionCompatibility versioncompat; // 0x58
	private Version version; // 0x60
	private ProcessorArchitecture processor_architecture; // 0x68

	// Properties
	public string Name { get; set; }
	public CultureInfo CultureInfo { get; }
	public AssemblyNameFlags Flags { get; }
	public string FullName { get; }
	public StrongNameKeyPair KeyPair { get; }
	public Version Version { get; set; }
	private bool IsPublicKeyValid { get; }

	// Methods

	// RVA: 0x21F2864 Offset: 0x21F2864 VA: 0x21F2864
	public void .ctor() { }

	// RVA: 0x21F36B0 Offset: 0x21F36B0 VA: 0x21F36B0
	internal void .ctor(SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x21F3BD4 Offset: 0x21F3BD4 VA: 0x21F3BD4
	public string get_Name() { }

	// RVA: 0x21F3BDC Offset: 0x21F3BDC VA: 0x21F3BDC
	public void set_Name(string value) { }

	// RVA: 0x21F3BE4 Offset: 0x21F3BE4 VA: 0x21F3BE4
	public CultureInfo get_CultureInfo() { }

	// RVA: 0x21F3BEC Offset: 0x21F3BEC VA: 0x21F3BEC
	public AssemblyNameFlags get_Flags() { }

	// RVA: 0x21F3BF4 Offset: 0x21F3BF4 VA: 0x21F3BF4
	public string get_FullName() { }

	// RVA: 0x21F4030 Offset: 0x21F4030 VA: 0x21F4030
	public StrongNameKeyPair get_KeyPair() { }

	// RVA: 0x21F3F50 Offset: 0x21F3F50 VA: 0x21F3F50
	public Version get_Version() { }

	// RVA: 0x21F4038 Offset: 0x21F4038 VA: 0x21F4038
	public void set_Version(Version value) { }

	// RVA: 0x21F4110 Offset: 0x21F4110 VA: 0x21F4110 Slot: 3
	public override string ToString() { }

	// RVA: 0x21F4144 Offset: 0x21F4144 VA: 0x21F4144
	public byte[] GetPublicKey() { }

	// RVA: 0x21F414C Offset: 0x21F414C VA: 0x21F414C
	public byte[] GetPublicKeyToken() { }

	// RVA: 0x21F4224 Offset: 0x21F4224 VA: 0x21F4224
	private bool get_IsPublicKeyValid() { }

	// RVA: 0x21F3F58 Offset: 0x21F3F58 VA: 0x21F3F58
	private byte[] InternalGetPublicKeyToken() { }

	// RVA: 0x21F448C Offset: 0x21F448C VA: 0x21F448C
	private byte[] ComputePublicKeyToken() { }

	// RVA: 0x21F4558 Offset: 0x21F4558 VA: 0x21F4558
	public void SetPublicKey(byte[] publicKey) { }

	// RVA: 0x21F4578 Offset: 0x21F4578 VA: 0x21F4578
	public void SetPublicKeyToken(byte[] publicKeyToken) { }

	// RVA: 0x21F4580 Offset: 0x21F4580 VA: 0x21F4580 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21F47F0 Offset: 0x21F47F0 VA: 0x21F47F0 Slot: 4
	public object Clone() { }

	// RVA: 0x21F49CC Offset: 0x21F49CC VA: 0x21F49CC Slot: 6
	public void OnDeserialization(object sender) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xBC6204 Offset: 0xBC6204 VA: 0xBC6204
[ComVisibleAttribute] // RVA: 0xBC6204 Offset: 0xBC6204 VA: 0xBC6204
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 365
{
	// Fields
	public int value__; // 0x0
	public const AssemblyNameFlags None = 0;
	public const AssemblyNameFlags PublicKey = 1;
	public const AssemblyNameFlags Retargetable = 256;
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384;
	public const AssemblyNameFlags EnableJITcompileTracking = 32768;
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC6240 Offset: 0xBC6240 VA: 0xBC6240
[ComVisibleAttribute] // RVA: 0xBC6240 Offset: 0xBC6240 VA: 0xBC6240
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 366
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F49D4 Offset: 0x21F49D4 VA: 0x21F49D4
	public void .ctor(string product) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xBC6294 Offset: 0xBC6294 VA: 0xBC6294
[ComVisibleAttribute] // RVA: 0xBC6294 Offset: 0xBC6294 VA: 0xBC6294
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 367
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F4A00 Offset: 0x21F4A00 VA: 0x21F4A00
	public void .ctor(string title) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC62E8 Offset: 0xBC62E8 VA: 0xBC62E8
[AttributeUsageAttribute] // RVA: 0xBC62E8 Offset: 0xBC62E8 VA: 0xBC62E8
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 368
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x21F4A2C Offset: 0x21F4A2C VA: 0x21F4A2C
	public void .ctor(string trademark) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC633C Offset: 0xBC633C VA: 0xBC633C
[ClassInterfaceAttribute] // RVA: 0xBC633C Offset: 0xBC633C VA: 0xBC633C
[Serializable]
public abstract class Binder // TypeDefIndex: 369
{
	// Fields
	private static Binder default_binder; // 0x0

	// Properties
	internal static Binder DefaultBinder { get; }

	// Methods

	// RVA: 0x21F4A58 Offset: 0x21F4A58 VA: 0x21F4A58
	protected void .ctor() { }

	// RVA: 0x21F4A5C Offset: 0x21F4A5C VA: 0x21F4A5C
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object ChangeType(object value, Type type, CultureInfo culture);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void ReorderArgumentArray(ref object[] args, object state);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);

	// RVA: 0x21E673C Offset: 0x21E673C VA: 0x21E673C
	internal static Binder get_DefaultBinder() { }

	// RVA: 0x21F4B28 Offset: 0x21F4B28 VA: 0x21F4B28
	internal static bool ConvertArgs(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture) { }

	// RVA: 0x21F4D18 Offset: 0x21F4D18 VA: 0x21F4D18
	internal static int GetDerivedLevel(Type type) { }

	// RVA: 0x21E6C3C Offset: 0x21E6C3C VA: 0x21E6C3C
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match) { }
}

// Namespace: 
internal sealed class Binder.Default : Binder // TypeDefIndex: 370
{
	// Methods

	// RVA: 0x21F4AC4 Offset: 0x21F4AC4 VA: 0x21F4AC4
	public void .ctor() { }

	// RVA: 0x21F4D80 Offset: 0x21F4D80 VA: 0x21F4D80 Slot: 4
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state) { }

	// RVA: 0x21F54B0 Offset: 0x21F54B0 VA: 0x21F54B0
	private void ReorderParameters(string[] names, ref object[] args, MethodBase selected) { }

	// RVA: 0x21F574C Offset: 0x21F574C VA: 0x21F574C
	private static bool IsArrayAssignable(Type object_type, Type target_type) { }

	// RVA: 0x21F5810 Offset: 0x21F5810 VA: 0x21F5810 Slot: 5
	public override object ChangeType(object value, Type type, CultureInfo culture) { }

	[MonoTODOAttribute] // RVA: 0xBCCC98 Offset: 0xBCCC98 VA: 0xBCCC98
	// RVA: 0x21F5FB8 Offset: 0x21F5FB8 VA: 0x21F5FB8 Slot: 6
	public override void ReorderArgumentArray(ref object[] args, object state) { }

	// RVA: 0x21F5B78 Offset: 0x21F5B78 VA: 0x21F5B78
	private static bool check_type(Type from, Type to) { }

	// RVA: 0x21F5FBC Offset: 0x21F5FBC VA: 0x21F5FBC
	private static bool check_arguments(Type[] types, ParameterInfo[] args, bool allowByRefMatch) { }

	// RVA: 0x21F6160 Offset: 0x21F6160 VA: 0x21F6160 Slot: 7
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x21F4F8C Offset: 0x21F4F8C VA: 0x21F4F8C
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch) { }

	// RVA: 0x21F6168 Offset: 0x21F6168 VA: 0x21F6168
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types) { }

	// RVA: 0x21F6498 Offset: 0x21F6498 VA: 0x21F6498
	private int CompareCloserType(Type t1, Type t2) { }

	// RVA: 0x21F66BC Offset: 0x21F66BC VA: 0x21F66BC Slot: 8
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }

	// RVA: 0x21F692C Offset: 0x21F692C VA: 0x21F692C
	private static int check_arguments_with_score(Type[] types, ParameterInfo[] args) { }

	// RVA: 0x21F6A1C Offset: 0x21F6A1C VA: 0x21F6A1C
	private static int check_type_with_score(Type from, Type to) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC637C Offset: 0xBC637C VA: 0xBC637C
[FlagsAttribute] // RVA: 0xBC637C Offset: 0xBC637C VA: 0xBC637C
[Serializable]
public enum BindingFlags // TypeDefIndex: 371
{
	// Fields
	public int value__; // 0x0
	public const BindingFlags Default = 0;
	public const BindingFlags IgnoreCase = 1;
	public const BindingFlags DeclaredOnly = 2;
	public const BindingFlags Instance = 4;
	public const BindingFlags Static = 8;
	public const BindingFlags Public = 16;
	public const BindingFlags NonPublic = 32;
	public const BindingFlags FlattenHierarchy = 64;
	public const BindingFlags InvokeMethod = 256;
	public const BindingFlags CreateInstance = 512;
	public const BindingFlags GetField = 1024;
	public const BindingFlags SetField = 2048;
	public const BindingFlags GetProperty = 4096;
	public const BindingFlags SetProperty = 8192;
	public const BindingFlags PutDispProperty = 16384;
	public const BindingFlags PutRefDispProperty = 32768;
	public const BindingFlags ExactBinding = 65536;
	public const BindingFlags SuppressChangeType = 131072;
	public const BindingFlags OptionalParamBinding = 262144;
	public const BindingFlags IgnoreReturn = 16777216;
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xBC63B8 Offset: 0xBC63B8 VA: 0xBC63B8
[ComVisibleAttribute] // RVA: 0xBC63B8 Offset: 0xBC63B8 VA: 0xBC63B8
[Serializable]
public enum CallingConventions // TypeDefIndex: 372
{
	// Fields
	public int value__; // 0x0
	public const CallingConventions Standard = 1;
	public const CallingConventions VarArgs = 2;
	public const CallingConventions Any = 3;
	public const CallingConventions HasThis = 32;
	public const CallingConventions ExplicitThis = 64;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xBC63F4 Offset: 0xBC63F4 VA: 0xBC63F4
[ComDefaultInterfaceAttribute] // RVA: 0xBC63F4 Offset: 0xBC63F4 VA: 0xBC63F4
[ComVisibleAttribute] // RVA: 0xBC63F4 Offset: 0xBC63F4 VA: 0xBC63F4
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 373
{
	// Fields
	[ComVisibleAttribute] // RVA: 0xBCB5C8 Offset: 0xBCB5C8 VA: 0xBCB5C8
	public static readonly string ConstructorName; // 0x0
	[ComVisibleAttribute] // RVA: 0xBCB5DC Offset: 0xBCB5DC VA: 0xBCB5DC
	public static readonly string TypeConstructorName; // 0x8

	// Properties
	[ComVisibleAttribute] // RVA: 0xBCF18C Offset: 0xBCF18C VA: 0xBCF18C
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x21F6CBC Offset: 0x21F6CBC VA: 0x21F6CBC
	protected void .ctor() { }

	// RVA: 0x21F6CC4 Offset: 0x21F6CC4 VA: 0x21F6CC4
	private static void .cctor() { }

	// RVA: 0x21F6D38 Offset: 0x21F6D38 VA: 0x21F6D38 Slot: 7
	public override MemberTypes get_MemberType() { }

	[DebuggerStepThroughAttribute] // RVA: 0xBCCCD0 Offset: 0xBCCCD0 VA: 0xBCCCD0
	[DebuggerHiddenAttribute] // RVA: 0xBCCCD0 Offset: 0xBCCCD0 VA: 0xBCCCD0
	// RVA: 0x21F6D40 Offset: 0x21F6D40 VA: 0x21F6D40
	public object Invoke(object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC6480 Offset: 0xBC6480 VA: 0xBC6480
[Serializable]
public sealed class CustomAttributeData // TypeDefIndex: 374
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x10
	private IList<CustomAttributeTypedArgument> ctorArgs; // 0x18
	private IList<CustomAttributeNamedArgument> namedArgs; // 0x20

	// Properties
	[ComVisibleAttribute] // RVA: 0xBCF1A0 Offset: 0xBCF1A0 VA: 0xBCF1A0
	public ConstructorInfo Constructor { get; }
	[ComVisibleAttribute] // RVA: 0xBCF1B4 Offset: 0xBCF1B4 VA: 0xBCF1B4
	public IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
	public IList<CustomAttributeNamedArgument> NamedArguments { get; }

	// Methods

	// RVA: 0x21F6DC8 Offset: 0x21F6DC8 VA: 0x21F6DC8
	internal void .ctor(ConstructorInfo ctorInfo, object[] ctorArgs, object[] namedArgs) { }

	// RVA: 0x21F6EB0 Offset: 0x21F6EB0 VA: 0x21F6EB0
	public ConstructorInfo get_Constructor() { }

	// RVA: 0x21F6EB8 Offset: 0x21F6EB8 VA: 0x21F6EB8
	public IList<CustomAttributeTypedArgument> get_ConstructorArguments() { }

	// RVA: 0x21F6EC0 Offset: 0x21F6EC0 VA: 0x21F6EC0
	public IList<CustomAttributeNamedArgument> get_NamedArguments() { }

	// RVA: 0x21F6EC8 Offset: 0x21F6EC8 VA: 0x21F6EC8
	public static IList<CustomAttributeData> GetCustomAttributes(Assembly target) { }

	// RVA: 0x21F6F2C Offset: 0x21F6F2C VA: 0x21F6F2C
	public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target) { }

	// RVA: 0x21F6F90 Offset: 0x21F6F90 VA: 0x21F6F90
	public static IList<CustomAttributeData> GetCustomAttributes(Module target) { }

	// RVA: 0x21F6FF4 Offset: 0x21F6FF4 VA: 0x21F6FF4
	public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target) { }

	// RVA: 0x21F7058 Offset: 0x21F7058 VA: 0x21F7058 Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1
	private static T[] UnboxValues<T>(object[] values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B206DC Offset: 0x2B206DC VA: 0x2B206DC
	|-CustomAttributeData.UnboxValues<CustomAttributeNamedArgument>
	|
	|-RVA: 0x2B20874 Offset: 0x2B20874 VA: 0x2B20874
	|-CustomAttributeData.UnboxValues<CustomAttributeTypedArgument>
	|
	|-RVA: 0x2B2057C Offset: 0x2B2057C VA: 0x2B2057C
	|-CustomAttributeData.UnboxValues<object>
	*/

	// RVA: 0x21F7938 Offset: 0x21F7938 VA: 0x21F7938 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x21F8170 Offset: 0x21F8170 VA: 0x21F8170 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC6494 Offset: 0xBC6494 VA: 0xBC6494
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 375
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x0
	private MemberInfo memberInfo; // 0x10

	// Methods

	// RVA: 0xD67A58 Offset: 0xD67A58 VA: 0xD67A58 Slot: 3
	public override string ToString() { }

	// RVA: 0xD67A60 Offset: 0xD67A60 VA: 0xD67A60 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD67A68 Offset: 0xD67A68 VA: 0xD67A68 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC64A8 Offset: 0xBC64A8 VA: 0xBC64A8
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 376
{
	// Fields
	private Type argumentType; // 0x0
	private object value; // 0x8

	// Methods

	// RVA: 0xD67ABC Offset: 0xD67ABC VA: 0xD67ABC Slot: 3
	public override string ToString() { }

	// RVA: 0xD67AC4 Offset: 0xD67AC4 VA: 0xD67AC4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD67ACC Offset: 0xD67ACC VA: 0xD67ACC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC64BC Offset: 0xBC64BC VA: 0xBC64BC
[FlagsAttribute] // RVA: 0xBC64BC Offset: 0xBC64BC VA: 0xBC64BC
[Serializable]
public enum EventAttributes // TypeDefIndex: 377
{
	// Fields
	public int value__; // 0x0
	public const EventAttributes None = 0;
	public const EventAttributes SpecialName = 512;
	public const EventAttributes ReservedMask = 1024;
	public const EventAttributes RTSpecialName = 1024;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC64F8 Offset: 0xBC64F8 VA: 0xBC64F8
[ComDefaultInterfaceAttribute] // RVA: 0xBC64F8 Offset: 0xBC64F8 VA: 0xBC64F8
[ClassInterfaceAttribute] // RVA: 0xBC64F8 Offset: 0xBC64F8 VA: 0xBC64F8
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 378
{
	// Fields
	private EventInfo.AddEventAdapter cached_add_event; // 0x10

	// Properties
	public abstract EventAttributes Attributes { get; }
	public Type EventHandlerType { get; }
	public bool IsMulticast { get; }
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x22E66C8 Offset: 0x22E66C8 VA: 0x22E66C8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract EventAttributes get_Attributes();

	// RVA: 0x22E66D8 Offset: 0x22E66D8 VA: 0x22E66D8 Slot: 15
	public Type get_EventHandlerType() { }

	// RVA: 0x22E6768 Offset: 0x22E6768 VA: 0x22E6768 Slot: 16
	public bool get_IsMulticast() { }

	// RVA: 0x22E6770 Offset: 0x22E6770 VA: 0x22E6770 Slot: 7
	public override MemberTypes get_MemberType() { }

	[DebuggerHiddenAttribute] // RVA: 0xBCCD08 Offset: 0xBCCD08 VA: 0xBCCD08
	[DebuggerStepThroughAttribute] // RVA: 0xBCCD08 Offset: 0xBCCD08 VA: 0xBCCD08
	// RVA: 0x22E6778 Offset: 0x22E6778 VA: 0x22E6778 Slot: 17
	public void AddEventHandler(object target, Delegate handler) { }

	// RVA: 0x22E6974 Offset: 0x22E6974 VA: 0x22E6974 Slot: 18
	public MethodInfo GetAddMethod() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodInfo GetAddMethod(bool nonPublic);

	// RVA: 0x22E719C Offset: 0x22E719C VA: 0x22E719C Slot: 20
	public MethodInfo GetRemoveMethod() { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract MethodInfo GetRemoveMethod(bool nonPublic);

	[DebuggerHiddenAttribute] // RVA: 0xBCCD40 Offset: 0xBCCD40 VA: 0xBCCD40
	[DebuggerStepThroughAttribute] // RVA: 0xBCCD40 Offset: 0xBCCD40 VA: 0xBCCD40
	// RVA: 0x22E71B0 Offset: 0x22E71B0 VA: 0x22E71B0 Slot: 22
	public void RemoveEventHandler(object target, Delegate handler) { }

	// RVA: -1 Offset: -1
	private static void AddEventFrame<T, D>(EventInfo.AddEvent<T, D> addEvent, object obj, object dele) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C187BC Offset: 0x1C187BC VA: 0x1C187BC
	|-EventInfo.AddEventFrame<object, object>
	*/

	// RVA: 0x22E6988 Offset: 0x22E6988 VA: 0x22E6988
	private static EventInfo.AddEventAdapter CreateAddEventDelegate(MethodInfo method) { }
}

// Namespace: 
private sealed class EventInfo.AddEventAdapter : MulticastDelegate // TypeDefIndex: 379
{
	// Methods

	// RVA: 0x22E72EC Offset: 0x22E72EC VA: 0x22E72EC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x22E6DDC Offset: 0x22E6DDC VA: 0x22E6DDC Slot: 11
	public virtual void Invoke(object _this, Delegate dele) { }

	// RVA: 0x22E72FC Offset: 0x22E72FC VA: 0x22E72FC Slot: 12
	public virtual IAsyncResult BeginInvoke(object _this, Delegate dele, AsyncCallback callback, object object) { }

	// RVA: 0x22E732C Offset: 0x22E732C VA: 0x22E732C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class EventInfo.AddEvent<T, D> : MulticastDelegate // TypeDefIndex: 380
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2610A24 Offset: 0x2610A24 VA: 0x2610A24
	|-EventInfo.AddEvent<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T _this, D dele) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2610A34 Offset: 0x2610A34 VA: 0x2610A34
	|-EventInfo.AddEvent<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T _this, D dele, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2610DF4 Offset: 0x2610DF4 VA: 0x2610DF4
	|-EventInfo.AddEvent<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2610E24 Offset: 0x2610E24 VA: 0x2610E24
	|-EventInfo.AddEvent<object, object>.EndInvoke
	*/
}

// Namespace: 
private sealed class EventInfo.StaticAddEvent<D> : MulticastDelegate // TypeDefIndex: 381
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2610E30 Offset: 0x2610E30 VA: 0x2610E30
	|-EventInfo.StaticAddEvent<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(D dele) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2610E40 Offset: 0x2610E40 VA: 0x2610E40
	|-EventInfo.StaticAddEvent<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(D dele, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26111E0 Offset: 0x26111E0 VA: 0x26111E0
	|-EventInfo.StaticAddEvent<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2611204 Offset: 0x2611204 VA: 0x2611204
	|-EventInfo.StaticAddEvent<object>.EndInvoke
	*/
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC6584 Offset: 0xBC6584 VA: 0xBC6584
[FlagsAttribute] // RVA: 0xBC6584 Offset: 0xBC6584 VA: 0xBC6584
[Serializable]
public enum FieldAttributes // TypeDefIndex: 382
{
	// Fields
	public int value__; // 0x0
	public const FieldAttributes FieldAccessMask = 7;
	public const FieldAttributes PrivateScope = 0;
	public const FieldAttributes Private = 1;
	public const FieldAttributes FamANDAssem = 2;
	public const FieldAttributes Assembly = 3;
	public const FieldAttributes Family = 4;
	public const FieldAttributes FamORAssem = 5;
	public const FieldAttributes Public = 6;
	public const FieldAttributes Static = 16;
	public const FieldAttributes InitOnly = 32;
	public const FieldAttributes Literal = 64;
	public const FieldAttributes NotSerialized = 128;
	public const FieldAttributes HasFieldRVA = 256;
	public const FieldAttributes SpecialName = 512;
	public const FieldAttributes RTSpecialName = 1024;
	public const FieldAttributes HasFieldMarshal = 4096;
	public const FieldAttributes PinvokeImpl = 8192;
	public const FieldAttributes HasDefault = 32768;
	public const FieldAttributes ReservedMask = 38144;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xBC65C0 Offset: 0xBC65C0 VA: 0xBC65C0
[ComVisibleAttribute] // RVA: 0xBC65C0 Offset: 0xBC65C0 VA: 0xBC65C0
[ComDefaultInterfaceAttribute] // RVA: 0xBC65C0 Offset: 0xBC65C0 VA: 0xBC65C0
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 383
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; }
	public bool IsLiteral { get; }
	public bool IsStatic { get; }
	public bool IsPublic { get; }
	public bool IsNotSerialized { get; }
