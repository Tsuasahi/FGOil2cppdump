[Serializable]
public class Assembly : ICustomAttributeProvider, _Assembly // TypeDefIndex: 352
{
	// Fields
	private IntPtr _mono_assembly; // 0x10
	private Assembly.ResolveEventHolder resolve_event_holder; // 0x18
	private Evidence _evidence; // 0x20
	internal PermissionSet _minimum; // 0x28
	internal PermissionSet _optional; // 0x30
	internal PermissionSet _refuse; // 0x38
	private PermissionSet _granted; // 0x40
	private PermissionSet _denied; // 0x48
	private bool fromByteArray; // 0x50
	private string assemblyName; // 0x58

	// Properties
	public virtual string FullName { get; }
	public virtual string Location { get; }
	internal PermissionSet GrantedPermissionSet { get; }
	internal PermissionSet DeniedPermissionSet { get; }

	// Methods

	// RVA: 0x107D2D8 Offset: 0x107D2D8 VA: 0x107D2D8
	internal void .ctor() { }

	// RVA: 0x107D330 Offset: 0x107D330 VA: 0x107D330
	private string get_code_base(bool escaped) { }

	// RVA: 0x107D338 Offset: 0x107D338 VA: 0x107D338
	private string get_fullname() { }

	// RVA: 0x107D33C Offset: 0x107D33C VA: 0x107D33C
	private string get_location() { }

	// RVA: 0x107D340 Offset: 0x107D340 VA: 0x107D340
	private string GetCodeBase(bool escaped) { }

	// RVA: 0x107D348 Offset: 0x107D348 VA: 0x107D348 Slot: 6
	public virtual string get_FullName() { }

	// RVA: 0x107D354 Offset: 0x107D354 VA: 0x107D354
	internal Evidence UnprotectedGetEvidence() { }

	// RVA: 0x107D3E0 Offset: 0x107D3E0 VA: 0x107D3E0 Slot: 7
	public virtual string get_Location() { }

	// RVA: 0x107D460 Offset: 0x107D460 VA: 0x107D460 Slot: 8
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x107D4DC Offset: 0x107D4DC VA: 0x107D4DC Slot: 9
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x107D558 Offset: 0x107D558 VA: 0x107D558
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module) { }

	// RVA: 0x107D55C Offset: 0x107D55C VA: 0x107D55C Slot: 10
	public virtual Stream GetManifestResourceStream(string name) { }

	// RVA: 0x107D88C Offset: 0x107D88C VA: 0x107D88C Slot: 11
	internal virtual Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x107D894 Offset: 0x107D894 VA: 0x107D894 Slot: 12
	public virtual Type[] GetTypes() { }

	// RVA: 0x107D8A4 Offset: 0x107D8A4 VA: 0x107D8A4 Slot: 13
	public virtual Type GetType(string name, bool throwOnError) { }

	// RVA: 0x107D9A8 Offset: 0x107D9A8 VA: 0x107D9A8 Slot: 14
	public virtual Type GetType(string name) { }

	// RVA: 0x107D9B4 Offset: 0x107D9B4 VA: 0x107D9B4
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x107D8B0 Offset: 0x107D8B0 VA: 0x107D8B0 Slot: 15
	public Type GetType(string name, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x107D9C0 Offset: 0x107D9C0 VA: 0x107D9C0
	private static void FillName(Assembly ass, AssemblyName aname) { }

	[MonoTODOAttribute] // RVA: 0xC38D18 Offset: 0xC38D18 VA: 0xC38D18
	// RVA: 0x107D9C4 Offset: 0x107D9C4 VA: 0x107D9C4 Slot: 16
	public virtual AssemblyName GetName(bool copiedName) { }

	// RVA: 0x107DA4C Offset: 0x107DA4C VA: 0x107DA4C Slot: 17
	public virtual AssemblyName GetName() { }

	// RVA: 0x107DA60 Offset: 0x107DA60 VA: 0x107DA60 Slot: 18
	internal virtual AssemblyName UnprotectedGetName() { }

	// RVA: 0x107DAD8 Offset: 0x107DAD8 VA: 0x107DAD8 Slot: 3
	public override string ToString() { }

	// RVA: 0x107DB08 Offset: 0x107DB08 VA: 0x107DB08
	public static Assembly GetEntryAssembly() { }

	// RVA: 0x107DB0C Offset: 0x107DB0C VA: 0x107DB0C
	public static Assembly Load(string assemblyString) { }

	[ObsoleteAttribute] // RVA: 0xC38D50 Offset: 0xC38D50 VA: 0xC38D50
	// RVA: 0x107DB48 Offset: 0x107DB48 VA: 0x107DB48
	public static Assembly LoadWithPartialName(string partialName) { }

	// RVA: 0x107DB5C Offset: 0x107DB5C VA: 0x107DB5C
	private static Assembly load_with_partial_name(string name, Evidence e) { }

	[ObsoleteAttribute] // RVA: 0xC38D88 Offset: 0xC38D88 VA: 0xC38D88
	// RVA: 0x107DB54 Offset: 0x107DB54 VA: 0x107DB54
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence) { }

	// RVA: 0x107DB60 Offset: 0x107DB60 VA: 0x107DB60
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior) { }

	// RVA: 0x107DC10 Offset: 0x107DC10 VA: 0x107DC10 Slot: 19
	public Module GetModule(string name) { }

	// RVA: 0x107DFC4 Offset: 0x107DFC4 VA: 0x107DFC4 Slot: 20
	internal virtual Module[] GetModulesInternal() { }

	// RVA: 0x107DDC8 Offset: 0x107DDC8 VA: 0x107DDC8 Slot: 21
	public Module[] GetModules(bool getResourceModules) { }

	// RVA: 0x107DFC8 Offset: 0x107DFC8 VA: 0x107DFC8 Slot: 22
	public virtual string[] GetManifestResourceNames() { }

	// RVA: 0x107DFCC Offset: 0x107DFCC VA: 0x107DFCC
	public static Assembly GetExecutingAssembly() { }

	// RVA: 0x107E020 Offset: 0x107E020 VA: 0x107E020
	public static Assembly GetCallingAssembly() { }

	// RVA: 0x107E024 Offset: 0x107E024 VA: 0x107E024
	private bool GetManifestResourceInfoInternal(string name, ManifestResourceInfo info) { }

	// RVA: 0x107E028 Offset: 0x107E028 VA: 0x107E028 Slot: 23
	public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName) { }

	// RVA: 0x107E12C Offset: 0x107E12C VA: 0x107E12C
	internal void Resolve() { }

	// RVA: 0x107E50C Offset: 0x107E50C VA: 0x107E50C
	internal PermissionSet get_GrantedPermissionSet() { }

	// RVA: 0x107E608 Offset: 0x107E608 VA: 0x107E608
	internal PermissionSet get_DeniedPermissionSet() { }

	// RVA: 0x107E704 Offset: 0x107E704 VA: 0x107E704
	internal static bool LoadPermissions(Assembly a, ref IntPtr minimum, ref int minLength, ref IntPtr optional, ref int optLength, ref IntPtr refused, ref int refLength) { }

	// RVA: 0x107E2D0 Offset: 0x107E2D0 VA: 0x107E2D0
	private void LoadAssemblyPermissions() { }
}

// Namespace: 
internal class Assembly.ResolveEventHolder // TypeDefIndex: 353
{
	// Fields
	private ModuleResolveEventHandler ModuleResolve; // 0x10

	// Methods

	// RVA: 0x107D32C Offset: 0x107D32C VA: 0x107D32C
	public void .ctor() { }
}

// Namespace: 
private class Assembly.ResourceCloseHandler // TypeDefIndex: 354
{
	// Fields
	private Module module; // 0x10

	// Methods

	// RVA: 0x107D884 Offset: 0x107D884 VA: 0x107D884
	public void .ctor(Module module) { }

	// RVA: 0x107E708 Offset: 0x107E708 VA: 0x107E708
	public void OnClose(object sender, EventArgs e) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC31FAC Offset: 0xC31FAC VA: 0xC31FAC
[AttributeUsageAttribute] // RVA: 0xC31FAC Offset: 0xC31FAC VA: 0xC31FAC
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 355
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E710 Offset: 0x107E710 VA: 0x107E710
	public void .ctor(string company) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32000 Offset: 0xC32000 VA: 0xC32000
[AttributeUsageAttribute] // RVA: 0xC32000 Offset: 0xC32000 VA: 0xC32000
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 356
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E73C Offset: 0x107E73C VA: 0x107E73C
	public void .ctor(string configuration) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32054 Offset: 0xC32054 VA: 0xC32054
[AttributeUsageAttribute] // RVA: 0xC32054 Offset: 0xC32054 VA: 0xC32054
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 357
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E768 Offset: 0x107E768 VA: 0x107E768
	public void .ctor(string copyright) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC320A8 Offset: 0xC320A8 VA: 0xC320A8
[ComVisibleAttribute] // RVA: 0xC320A8 Offset: 0xC320A8 VA: 0xC320A8
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 358
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E794 Offset: 0x107E794 VA: 0x107E794
	public void .ctor(string defaultAlias) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC320FC Offset: 0xC320FC VA: 0xC320FC
[ComVisibleAttribute] // RVA: 0xC320FC Offset: 0xC320FC VA: 0xC320FC
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 359
{
	// Fields
	private bool delay; // 0x10

	// Methods

	// RVA: 0x107E7C0 Offset: 0x107E7C0 VA: 0x107E7C0
	public void .ctor(bool delaySign) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC32150 Offset: 0xC32150 VA: 0xC32150
[ComVisibleAttribute] // RVA: 0xC32150 Offset: 0xC32150 VA: 0xC32150
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 360
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E7F0 Offset: 0x107E7F0 VA: 0x107E7F0
	public void .ctor(string description) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC321A4 Offset: 0xC321A4 VA: 0xC321A4
[ComVisibleAttribute] // RVA: 0xC321A4 Offset: 0xC321A4 VA: 0xC321A4
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 361
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E81C Offset: 0x107E81C VA: 0x107E81C
	public void .ctor(string version) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC321F8 Offset: 0xC321F8 VA: 0xC321F8
[ComVisibleAttribute] // RVA: 0xC321F8 Offset: 0xC321F8 VA: 0xC321F8
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 362
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E8C0 Offset: 0x107E8C0 VA: 0x107E8C0
	public void .ctor(string informationalVersion) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC3224C Offset: 0xC3224C VA: 0xC3224C
[AttributeUsageAttribute] // RVA: 0xC3224C Offset: 0xC3224C VA: 0xC3224C
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 363
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107E8EC Offset: 0x107E8EC VA: 0x107E8EC
	public void .ctor(string keyFile) { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0xC322A0 Offset: 0xC322A0 VA: 0xC322A0
[ComVisibleAttribute] // RVA: 0xC322A0 Offset: 0xC322A0 VA: 0xC322A0
[ClassInterfaceAttribute] // RVA: 0xC322A0 Offset: 0xC322A0 VA: 0xC322A0
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback // TypeDefIndex: 364
{
	// Fields
	private string name; // 0x10
	private string codebase; // 0x18
	private int major; // 0x20
	private int minor; // 0x24
	private int build; // 0x28
	private int revision; // 0x2C
	private CultureInfo cultureinfo; // 0x30
	private AssemblyNameFlags flags; // 0x38
	private AssemblyHashAlgorithm hashalg; // 0x3C
	private StrongNameKeyPair keypair; // 0x40
	private byte[] publicKey; // 0x48
	private byte[] keyToken; // 0x50
	private AssemblyVersionCompatibility versioncompat; // 0x58
	private Version version; // 0x60
	private ProcessorArchitecture processor_architecture; // 0x68

	// Properties
	public string Name { get; set; }
	public CultureInfo CultureInfo { get; }
	public AssemblyNameFlags Flags { get; }
	public string FullName { get; }
	public StrongNameKeyPair KeyPair { get; }
	public Version Version { get; set; }
	private bool IsPublicKeyValid { get; }

	// Methods

	// RVA: 0x107DACC Offset: 0x107DACC VA: 0x107DACC
	public void .ctor() { }

	// RVA: 0x107E918 Offset: 0x107E918 VA: 0x107E918
	internal void .ctor(SerializationInfo si, StreamingContext sc) { }

	// RVA: 0x107EE3C Offset: 0x107EE3C VA: 0x107EE3C
	public string get_Name() { }

	// RVA: 0x107EE44 Offset: 0x107EE44 VA: 0x107EE44
	public void set_Name(string value) { }

	// RVA: 0x107EE4C Offset: 0x107EE4C VA: 0x107EE4C
	public CultureInfo get_CultureInfo() { }

	// RVA: 0x107EE54 Offset: 0x107EE54 VA: 0x107EE54
	public AssemblyNameFlags get_Flags() { }

	// RVA: 0x107EE5C Offset: 0x107EE5C VA: 0x107EE5C
	public string get_FullName() { }

	// RVA: 0x107F298 Offset: 0x107F298 VA: 0x107F298
	public StrongNameKeyPair get_KeyPair() { }

	// RVA: 0x107F1B8 Offset: 0x107F1B8 VA: 0x107F1B8
	public Version get_Version() { }

	// RVA: 0x107F2A0 Offset: 0x107F2A0 VA: 0x107F2A0
	public void set_Version(Version value) { }

	// RVA: 0x107F378 Offset: 0x107F378 VA: 0x107F378 Slot: 3
	public override string ToString() { }

	// RVA: 0x107F3AC Offset: 0x107F3AC VA: 0x107F3AC
	public byte[] GetPublicKey() { }

	// RVA: 0x107F3B4 Offset: 0x107F3B4 VA: 0x107F3B4
	public byte[] GetPublicKeyToken() { }

	// RVA: 0x107F48C Offset: 0x107F48C VA: 0x107F48C
	private bool get_IsPublicKeyValid() { }

	// RVA: 0x107F1C0 Offset: 0x107F1C0 VA: 0x107F1C0
	private byte[] InternalGetPublicKeyToken() { }

	// RVA: 0x107F6F4 Offset: 0x107F6F4 VA: 0x107F6F4
	private byte[] ComputePublicKeyToken() { }

	// RVA: 0x107F7C0 Offset: 0x107F7C0 VA: 0x107F7C0
	public void SetPublicKey(byte[] publicKey) { }

	// RVA: 0x107F7E0 Offset: 0x107F7E0 VA: 0x107F7E0
	public void SetPublicKeyToken(byte[] publicKeyToken) { }

	// RVA: 0x107F7E8 Offset: 0x107F7E8 VA: 0x107F7E8 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x107FA58 Offset: 0x107FA58 VA: 0x107FA58 Slot: 4
	public object Clone() { }

	// RVA: 0x107FC34 Offset: 0x107FC34 VA: 0x107FC34 Slot: 6
	public void OnDeserialization(object sender) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xC3232C Offset: 0xC3232C VA: 0xC3232C
[ComVisibleAttribute] // RVA: 0xC3232C Offset: 0xC3232C VA: 0xC3232C
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 365
{
	// Fields
	public int value__; // 0x0
	public const AssemblyNameFlags None = 0;
	public const AssemblyNameFlags PublicKey = 1;
	public const AssemblyNameFlags Retargetable = 256;
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384;
	public const AssemblyNameFlags EnableJITcompileTracking = 32768;
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC32368 Offset: 0xC32368 VA: 0xC32368
[ComVisibleAttribute] // RVA: 0xC32368 Offset: 0xC32368 VA: 0xC32368
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 366
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107FC3C Offset: 0x107FC3C VA: 0x107FC3C
	public void .ctor(string product) { }
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xC323BC Offset: 0xC323BC VA: 0xC323BC
[ComVisibleAttribute] // RVA: 0xC323BC Offset: 0xC323BC VA: 0xC323BC
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 367
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107FC68 Offset: 0x107FC68 VA: 0x107FC68
	public void .ctor(string title) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32410 Offset: 0xC32410 VA: 0xC32410
[AttributeUsageAttribute] // RVA: 0xC32410 Offset: 0xC32410 VA: 0xC32410
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 368
{
	// Fields
	private string name; // 0x10

	// Methods

	// RVA: 0x107FC94 Offset: 0x107FC94 VA: 0x107FC94
	public void .ctor(string trademark) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32464 Offset: 0xC32464 VA: 0xC32464
[ClassInterfaceAttribute] // RVA: 0xC32464 Offset: 0xC32464 VA: 0xC32464
[Serializable]
public abstract class Binder // TypeDefIndex: 369
{
	// Fields
	private static Binder default_binder; // 0x0

	// Properties
	internal static Binder DefaultBinder { get; }

	// Methods

	// RVA: 0x107FCC0 Offset: 0x107FCC0 VA: 0x107FCC0
	protected void .ctor() { }

	// RVA: 0x107FCC4 Offset: 0x107FCC4 VA: 0x107FCC4
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract object ChangeType(object value, Type type, CultureInfo culture);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void ReorderArgumentArray(ref object[] args, object state);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);

	// RVA: 0x10719A4 Offset: 0x10719A4 VA: 0x10719A4
	internal static Binder get_DefaultBinder() { }

	// RVA: 0x107FD90 Offset: 0x107FD90 VA: 0x107FD90
	internal static bool ConvertArgs(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture) { }

	// RVA: 0x107FF80 Offset: 0x107FF80 VA: 0x107FF80
	internal static int GetDerivedLevel(Type type) { }

	// RVA: 0x1071EA4 Offset: 0x1071EA4 VA: 0x1071EA4
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match) { }
}

// Namespace: 
internal sealed class Binder.Default : Binder // TypeDefIndex: 370
{
	// Methods

	// RVA: 0x107FD2C Offset: 0x107FD2C VA: 0x107FD2C
	public void .ctor() { }

	// RVA: 0x107FFE8 Offset: 0x107FFE8 VA: 0x107FFE8 Slot: 4
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state) { }

	// RVA: 0x1080718 Offset: 0x1080718 VA: 0x1080718
	private void ReorderParameters(string[] names, ref object[] args, MethodBase selected) { }

	// RVA: 0x10809B4 Offset: 0x10809B4 VA: 0x10809B4
	private static bool IsArrayAssignable(Type object_type, Type target_type) { }

	// RVA: 0x1080A78 Offset: 0x1080A78 VA: 0x1080A78 Slot: 5
	public override object ChangeType(object value, Type type, CultureInfo culture) { }

	[MonoTODOAttribute] // RVA: 0xC38DC0 Offset: 0xC38DC0 VA: 0xC38DC0
	// RVA: 0x1081220 Offset: 0x1081220 VA: 0x1081220 Slot: 6
	public override void ReorderArgumentArray(ref object[] args, object state) { }

	// RVA: 0x1080DE0 Offset: 0x1080DE0 VA: 0x1080DE0
	private static bool check_type(Type from, Type to) { }

	// RVA: 0x1081224 Offset: 0x1081224 VA: 0x1081224
	private static bool check_arguments(Type[] types, ParameterInfo[] args, bool allowByRefMatch) { }

	// RVA: 0x10813C8 Offset: 0x10813C8 VA: 0x10813C8 Slot: 7
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x10801F4 Offset: 0x10801F4 VA: 0x10801F4
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch) { }

	// RVA: 0x10813D0 Offset: 0x10813D0 VA: 0x10813D0
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types) { }

	// RVA: 0x1081700 Offset: 0x1081700 VA: 0x1081700
	private int CompareCloserType(Type t1, Type t2) { }

	// RVA: 0x1081924 Offset: 0x1081924 VA: 0x1081924 Slot: 8
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }

	// RVA: 0x1081B94 Offset: 0x1081B94 VA: 0x1081B94
	private static int check_arguments_with_score(Type[] types, ParameterInfo[] args) { }

	// RVA: 0x1081C84 Offset: 0x1081C84 VA: 0x1081C84
	private static int check_type_with_score(Type from, Type to) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC324A4 Offset: 0xC324A4 VA: 0xC324A4
[FlagsAttribute] // RVA: 0xC324A4 Offset: 0xC324A4 VA: 0xC324A4
[Serializable]
public enum BindingFlags // TypeDefIndex: 371
{
	// Fields
	public int value__; // 0x0
	public const BindingFlags Default = 0;
	public const BindingFlags IgnoreCase = 1;
	public const BindingFlags DeclaredOnly = 2;
	public const BindingFlags Instance = 4;
	public const BindingFlags Static = 8;
	public const BindingFlags Public = 16;
	public const BindingFlags NonPublic = 32;
	public const BindingFlags FlattenHierarchy = 64;
	public const BindingFlags InvokeMethod = 256;
	public const BindingFlags CreateInstance = 512;
	public const BindingFlags GetField = 1024;
	public const BindingFlags SetField = 2048;
	public const BindingFlags GetProperty = 4096;
	public const BindingFlags SetProperty = 8192;
	public const BindingFlags PutDispProperty = 16384;
	public const BindingFlags PutRefDispProperty = 32768;
	public const BindingFlags ExactBinding = 65536;
	public const BindingFlags SuppressChangeType = 131072;
	public const BindingFlags OptionalParamBinding = 262144;
	public const BindingFlags IgnoreReturn = 16777216;
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xC324E0 Offset: 0xC324E0 VA: 0xC324E0
[ComVisibleAttribute] // RVA: 0xC324E0 Offset: 0xC324E0 VA: 0xC324E0
[Serializable]
public enum CallingConventions // TypeDefIndex: 372
{
	// Fields
	public int value__; // 0x0
	public const CallingConventions Standard = 1;
	public const CallingConventions VarArgs = 2;
	public const CallingConventions Any = 3;
	public const CallingConventions HasThis = 32;
	public const CallingConventions ExplicitThis = 64;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xC3251C Offset: 0xC3251C VA: 0xC3251C
[ComDefaultInterfaceAttribute] // RVA: 0xC3251C Offset: 0xC3251C VA: 0xC3251C
[ComVisibleAttribute] // RVA: 0xC3251C Offset: 0xC3251C VA: 0xC3251C
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 373
{
	// Fields
	[ComVisibleAttribute] // RVA: 0xC376F0 Offset: 0xC376F0 VA: 0xC376F0
	public static readonly string ConstructorName; // 0x0
	[ComVisibleAttribute] // RVA: 0xC37704 Offset: 0xC37704 VA: 0xC37704
	public static readonly string TypeConstructorName; // 0x8

	// Properties
	[ComVisibleAttribute] // RVA: 0xC3B2B4 Offset: 0xC3B2B4 VA: 0xC3B2B4
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x1081F24 Offset: 0x1081F24 VA: 0x1081F24
	protected void .ctor() { }

	// RVA: 0x1081F2C Offset: 0x1081F2C VA: 0x1081F2C
	private static void .cctor() { }

	// RVA: 0x1081FA0 Offset: 0x1081FA0 VA: 0x1081FA0 Slot: 7
	public override MemberTypes get_MemberType() { }

	[DebuggerStepThroughAttribute] // RVA: 0xC38DF8 Offset: 0xC38DF8 VA: 0xC38DF8
	[DebuggerHiddenAttribute] // RVA: 0xC38DF8 Offset: 0xC38DF8 VA: 0xC38DF8
	// RVA: 0x1081FA8 Offset: 0x1081FA8 VA: 0x1081FA8
	public object Invoke(object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC325A8 Offset: 0xC325A8 VA: 0xC325A8
[Serializable]
public sealed class CustomAttributeData // TypeDefIndex: 374
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x10
	private IList<CustomAttributeTypedArgument> ctorArgs; // 0x18
	private IList<CustomAttributeNamedArgument> namedArgs; // 0x20

	// Properties
	[ComVisibleAttribute] // RVA: 0xC3B2C8 Offset: 0xC3B2C8 VA: 0xC3B2C8
	public ConstructorInfo Constructor { get; }
	[ComVisibleAttribute] // RVA: 0xC3B2DC Offset: 0xC3B2DC VA: 0xC3B2DC
	public IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
	public IList<CustomAttributeNamedArgument> NamedArguments { get; }

	// Methods

	// RVA: 0x1082030 Offset: 0x1082030 VA: 0x1082030
	internal void .ctor(ConstructorInfo ctorInfo, object[] ctorArgs, object[] namedArgs) { }

	// RVA: 0x1082118 Offset: 0x1082118 VA: 0x1082118
	public ConstructorInfo get_Constructor() { }

	// RVA: 0x1082120 Offset: 0x1082120 VA: 0x1082120
	public IList<CustomAttributeTypedArgument> get_ConstructorArguments() { }

	// RVA: 0x1082128 Offset: 0x1082128 VA: 0x1082128
	public IList<CustomAttributeNamedArgument> get_NamedArguments() { }

	// RVA: 0x1082130 Offset: 0x1082130 VA: 0x1082130
	public static IList<CustomAttributeData> GetCustomAttributes(Assembly target) { }

	// RVA: 0x1082194 Offset: 0x1082194 VA: 0x1082194
	public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target) { }

	// RVA: 0x10821F8 Offset: 0x10821F8 VA: 0x10821F8
	public static IList<CustomAttributeData> GetCustomAttributes(Module target) { }

	// RVA: 0x108225C Offset: 0x108225C VA: 0x108225C
	public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target) { }

	// RVA: 0x10822C0 Offset: 0x10822C0 VA: 0x10822C0 Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1
	private static T[] UnboxValues<T>(object[] values) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B81C54 Offset: 0x2B81C54 VA: 0x2B81C54
	|-CustomAttributeData.UnboxValues<CustomAttributeNamedArgument>
	|
	|-RVA: 0x2B81DEC Offset: 0x2B81DEC VA: 0x2B81DEC
	|-CustomAttributeData.UnboxValues<CustomAttributeTypedArgument>
	|
	|-RVA: 0x2B81AF4 Offset: 0x2B81AF4 VA: 0x2B81AF4
	|-CustomAttributeData.UnboxValues<object>
	*/

	// RVA: 0x1082BA0 Offset: 0x1082BA0 VA: 0x1082BA0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10833D8 Offset: 0x10833D8 VA: 0x10833D8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC325BC Offset: 0xC325BC VA: 0xC325BC
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 375
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x0
	private MemberInfo memberInfo; // 0x10

	// Methods

	// RVA: 0xBBA9E0 Offset: 0xBBA9E0 VA: 0xBBA9E0 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBA9E8 Offset: 0xBBA9E8 VA: 0xBBA9E8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBA9F0 Offset: 0xBBA9F0 VA: 0xBBA9F0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC325D0 Offset: 0xC325D0 VA: 0xC325D0
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 376
{
	// Fields
	private Type argumentType; // 0x0
	private object value; // 0x8

	// Methods

	// RVA: 0xBBAA44 Offset: 0xBBAA44 VA: 0xBBAA44 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBAA4C Offset: 0xBBAA4C VA: 0xBBAA4C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBAA54 Offset: 0xBBAA54 VA: 0xBBAA54 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC325E4 Offset: 0xC325E4 VA: 0xC325E4
[FlagsAttribute] // RVA: 0xC325E4 Offset: 0xC325E4 VA: 0xC325E4
[Serializable]
public enum EventAttributes // TypeDefIndex: 377
{
	// Fields
	public int value__; // 0x0
	public const EventAttributes None = 0;
	public const EventAttributes SpecialName = 512;
	public const EventAttributes ReservedMask = 1024;
	public const EventAttributes RTSpecialName = 1024;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32620 Offset: 0xC32620 VA: 0xC32620
[ComDefaultInterfaceAttribute] // RVA: 0xC32620 Offset: 0xC32620 VA: 0xC32620
[ClassInterfaceAttribute] // RVA: 0xC32620 Offset: 0xC32620 VA: 0xC32620
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 378
{
	// Fields
	private EventInfo.AddEventAdapter cached_add_event; // 0x10

	// Properties
	public abstract EventAttributes Attributes { get; }
	public Type EventHandlerType { get; }
	public bool IsMulticast { get; }
	public override MemberTypes MemberType { get; }

	// Methods

	// RVA: 0x11105D0 Offset: 0x11105D0 VA: 0x11105D0
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract EventAttributes get_Attributes();

	// RVA: 0x11105E0 Offset: 0x11105E0 VA: 0x11105E0 Slot: 15
	public Type get_EventHandlerType() { }

	// RVA: 0x1110670 Offset: 0x1110670 VA: 0x1110670 Slot: 16
	public bool get_IsMulticast() { }

	// RVA: 0x1110678 Offset: 0x1110678 VA: 0x1110678 Slot: 7
	public override MemberTypes get_MemberType() { }

	[DebuggerHiddenAttribute] // RVA: 0xC38E30 Offset: 0xC38E30 VA: 0xC38E30
	[DebuggerStepThroughAttribute] // RVA: 0xC38E30 Offset: 0xC38E30 VA: 0xC38E30
	// RVA: 0x1110680 Offset: 0x1110680 VA: 0x1110680 Slot: 17
	public void AddEventHandler(object target, Delegate handler) { }

	// RVA: 0x111087C Offset: 0x111087C VA: 0x111087C Slot: 18
	public MethodInfo GetAddMethod() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodInfo GetAddMethod(bool nonPublic);

	// RVA: 0x11110A4 Offset: 0x11110A4 VA: 0x11110A4 Slot: 20
	public MethodInfo GetRemoveMethod() { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract MethodInfo GetRemoveMethod(bool nonPublic);

	[DebuggerHiddenAttribute] // RVA: 0xC38E68 Offset: 0xC38E68 VA: 0xC38E68
	[DebuggerStepThroughAttribute] // RVA: 0xC38E68 Offset: 0xC38E68 VA: 0xC38E68
	// RVA: 0x11110B8 Offset: 0x11110B8 VA: 0x11110B8 Slot: 22
	public void RemoveEventHandler(object target, Delegate handler) { }

	// RVA: -1 Offset: -1
	private static void AddEventFrame<T, D>(EventInfo.AddEvent<T, D> addEvent, object obj, object dele) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218741C Offset: 0x218741C VA: 0x218741C
	|-EventInfo.AddEventFrame<object, object>
	*/

	// RVA: 0x1110890 Offset: 0x1110890 VA: 0x1110890
	private static EventInfo.AddEventAdapter CreateAddEventDelegate(MethodInfo method) { }
}

// Namespace: 
private sealed class EventInfo.AddEventAdapter : MulticastDelegate // TypeDefIndex: 379
{
	// Methods

	// RVA: 0x11111F4 Offset: 0x11111F4 VA: 0x11111F4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1110CE4 Offset: 0x1110CE4 VA: 0x1110CE4 Slot: 11
	public virtual void Invoke(object _this, Delegate dele) { }

	// RVA: 0x1111204 Offset: 0x1111204 VA: 0x1111204 Slot: 12
	public virtual IAsyncResult BeginInvoke(object _this, Delegate dele, AsyncCallback callback, object object) { }

	// RVA: 0x1111234 Offset: 0x1111234 VA: 0x1111234 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class EventInfo.AddEvent<T, D> : MulticastDelegate // TypeDefIndex: 380
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x274FBA0 Offset: 0x274FBA0 VA: 0x274FBA0
	|-EventInfo.AddEvent<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T _this, D dele) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x274FBB0 Offset: 0x274FBB0 VA: 0x274FBB0
	|-EventInfo.AddEvent<object, object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T _this, D dele, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x274FF70 Offset: 0x274FF70 VA: 0x274FF70
	|-EventInfo.AddEvent<object, object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x274FFA0 Offset: 0x274FFA0 VA: 0x274FFA0
	|-EventInfo.AddEvent<object, object>.EndInvoke
	*/
}

// Namespace: 
private sealed class EventInfo.StaticAddEvent<D> : MulticastDelegate // TypeDefIndex: 381
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x274FFAC Offset: 0x274FFAC VA: 0x274FFAC
	|-EventInfo.StaticAddEvent<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(D dele) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x274FFBC Offset: 0x274FFBC VA: 0x274FFBC
	|-EventInfo.StaticAddEvent<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(D dele, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x275035C Offset: 0x275035C VA: 0x275035C
	|-EventInfo.StaticAddEvent<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2750380 Offset: 0x2750380 VA: 0x2750380
	|-EventInfo.StaticAddEvent<object>.EndInvoke
	*/
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC326AC Offset: 0xC326AC VA: 0xC326AC
[FlagsAttribute] // RVA: 0xC326AC Offset: 0xC326AC VA: 0xC326AC
[Serializable]
public enum FieldAttributes // TypeDefIndex: 382
{
	// Fields
	public int value__; // 0x0
	public const FieldAttributes FieldAccessMask = 7;
	public const FieldAttributes PrivateScope = 0;
	public const FieldAttributes Private = 1;
	public const FieldAttributes FamANDAssem = 2;
	public const FieldAttributes Assembly = 3;
	public const FieldAttributes Family = 4;
	public const FieldAttributes FamORAssem = 5;
	public const FieldAttributes Public = 6;
	public const FieldAttributes Static = 16;
	public const FieldAttributes InitOnly = 32;
	public const FieldAttributes Literal = 64;
	public const FieldAttributes NotSerialized = 128;
	public const FieldAttributes HasFieldRVA = 256;
	public const FieldAttributes SpecialName = 512;
	public const FieldAttributes RTSpecialName = 1024;
	public const FieldAttributes HasFieldMarshal = 4096;
	public const FieldAttributes PinvokeImpl = 8192;
	public const FieldAttributes HasDefault = 32768;
	public const FieldAttributes ReservedMask = 38144;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xC326E8 Offset: 0xC326E8 VA: 0xC326E8
[ComVisibleAttribute] // RVA: 0xC326E8 Offset: 0xC326E8 VA: 0xC326E8
[ComDefaultInterfaceAttribute] // RVA: 0xC326E8 Offset: 0xC326E8 VA: 0xC326E8
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 383
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; }
	public bool IsLiteral { get; }
	public bool IsStatic { get; }
	public bool IsPublic { get; }
	public bool IsNotSerialized { get; }
	internal virtual UnmanagedMarshal UMarshal { get; }

	// Methods

	// RVA: 0x1111240 Offset: 0x1111240 VA: 0x1111240
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract FieldAttributes get_Attributes();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract RuntimeFieldHandle get_FieldHandle();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract Type get_FieldType();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract object GetValue(object obj);

	// RVA: 0x1111248 Offset: 0x1111248 VA: 0x1111248 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x1111250 Offset: 0x1111250 VA: 0x1111250 Slot: 18
	public bool get_IsLiteral() { }

	// RVA: 0x110F3D4 Offset: 0x110F3D4 VA: 0x110F3D4 Slot: 19
	public bool get_IsStatic() { }
