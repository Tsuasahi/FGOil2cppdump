{
	// Fields
	public int svtId; // 0x10
	public int num; // 0x14

	// Methods

	// RVA: 0x157E5BC Offset: 0x157E5BC VA: 0x157E5BC
	public void .ctor() { }
}

// Namespace: 
public class CombineLimitUpWarningDialog : BaseDialog // TypeDefIndex: 9621
{
	// Fields
	private readonly Color DisableColor; // 0x58
	[SerializeField] // RVA: 0xCD807C Offset: 0xCD807C VA: 0xCD807C
	protected UILabel titleLabel; // 0x68
	[SerializeField] // RVA: 0xCD808C Offset: 0xCD808C VA: 0xCD808C
	protected UILabel warningLabel; // 0x70
	[SerializeField] // RVA: 0xCD809C Offset: 0xCD809C VA: 0xCD809C
	protected UILabel reInforeceLabel; // 0x78
	[SerializeField] // RVA: 0xCD80AC Offset: 0xCD80AC VA: 0xCD80AC
	protected UILabel decideButtonLabel; // 0x80
	[SerializeField] // RVA: 0xCD80BC Offset: 0xCD80BC VA: 0xCD80BC
	protected UILabel cancelButtonLabel; // 0x88
	[SerializeField] // RVA: 0xCD80CC Offset: 0xCD80CC VA: 0xCD80CC
	protected UISprite sliderSprite; // 0x90
	[SerializeField] // RVA: 0xCD80DC Offset: 0xCD80DC VA: 0xCD80DC
	protected UIButtonColor decideButton; // 0x98
	[SerializeField] // RVA: 0xCD80EC Offset: 0xCD80EC VA: 0xCD80EC
	protected BoxCollider sliderCollider; // 0xA0
	[SerializeField] // RVA: 0xCD80FC Offset: 0xCD80FC VA: 0xCD80FC
	protected BoxCollider sliderThumbCollider; // 0xA8
	[SerializeField] // RVA: 0xCD810C Offset: 0xCD810C VA: 0xCD810C
	protected UISlider checkSlider; // 0xB0
	protected CombineLimitUpWarningDialog.State state; // 0xB8
	protected CombineLimitUpWarningDialog.ClickDelegate closeFunc; // 0xC0
	protected Action closeCallbackFunc; // 0xC8

	// Methods

	// RVA: 0x15844DC Offset: 0x15844DC VA: 0x15844DC
	public void .ctor() { }

	// RVA: 0x1584588 Offset: 0x1584588 VA: 0x1584588
	public void Init() { }

	// RVA: 0x1584794 Offset: 0x1584794 VA: 0x1584794
	private void SetSlider(bool sliderOn) { }

	// RVA: 0x15848DC Offset: 0x15848DC VA: 0x15848DC
	private void OnSliderDragFinished() { }

	// RVA: 0x1584974 Offset: 0x1584974 VA: 0x1584974
	public void Open(CombineLimitUpWarningDialog.ClickDelegate closeCallback) { }

	// RVA: 0x1584B40 Offset: 0x1584B40 VA: 0x1584B40
	protected void EndOpen() { }

	// RVA: 0x1584B4C Offset: 0x1584B4C VA: 0x1584B4C
	public void Close() { }

	// RVA: 0x1584B60 Offset: 0x1584B60 VA: 0x1584B60
	protected void EndClose() { }

	// RVA: 0x1584B64 Offset: 0x1584B64 VA: 0x1584B64
	public void OnClickDecide() { }

	// RVA: 0x1584C74 Offset: 0x1584C74 VA: 0x1584C74
	public void OnClickCancel() { }

	// RVA: 0x1584D38 Offset: 0x1584D38 VA: 0x1584D38
	public void OnEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3CFD4 Offset: 0xD3CFD4 VA: 0xD3CFD4
	// RVA: 0x1584DC0 Offset: 0x1584DC0 VA: 0x1584DC0
	private void <OnClickDecide>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3CFE4 Offset: 0xD3CFE4 VA: 0xD3CFE4
	// RVA: 0x1585020 Offset: 0x1585020 VA: 0x1585020
	private void <OnClickCancel>m__1() { }
}

// Namespace: 
protected enum CombineLimitUpWarningDialog.State // TypeDefIndex: 9622
{
	// Fields
	public int value__; // 0x0
	public const CombineLimitUpWarningDialog.State INIT = 0;
	public const CombineLimitUpWarningDialog.State OPEN = 1;
	public const CombineLimitUpWarningDialog.State INPUT = 2;
	public const CombineLimitUpWarningDialog.State CLOSE = 3;
}

// Namespace: 
public sealed class CombineLimitUpWarningDialog.ClickDelegate : MulticastDelegate // TypeDefIndex: 9623
{
	// Methods

	// RVA: 0x1585054 Offset: 0x1585054 VA: 0x1585054
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1584DF4 Offset: 0x1584DF4 VA: 0x1584DF4 Slot: 11
	public virtual void Invoke(bool isDecide) { }

	// RVA: 0x1585064 Offset: 0x1585064 VA: 0x1585064 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool isDecide, AsyncCallback callback, object object) { }

	// RVA: 0x15850F4 Offset: 0x15850F4 VA: 0x15850F4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class CombineServantListViewItem : ListViewItem // TypeDefIndex: 9624
{
	// Fields
	public const float FIXED_VAL = 1000;
	private const int MATERIAL_ITEM = 7999;
	private const int MATERIAL_ITEM_NUM = 1;
	private const int tdUpMaxQp = 1200000;
	protected CombineServantListViewItem.Type type; // 0x70
	protected UserServantEntity userSvtEntity; // 0x78
	protected ServantEntity servantEntity; // 0x80
	protected EventUpValSetupInfo setupInfo; // 0x88
	protected int svtId; // 0x90
	protected int rarity; // 0x94
	protected bool isFavorite; // 0x98
	protected bool isParty; // 0x99
	protected bool isNeed; // 0x9A
	protected bool isLock; // 0x9B
	protected bool isLimitCntTarget; // 0x9C
	protected bool isLvMax; // 0x9D
	protected bool isFriendshipRankMax; // 0x9E
	protected bool isLimitCntMax; // 0x9F
	protected bool isChoice; // 0xA0
	protected bool isBaseSvt; // 0xA1
	protected bool isMaterialSvt; // 0xA2
	public bool isLastSelectMaterial; // 0xA3
	protected bool isHeroineSvt; // 0xA4
	protected int materialExp; // 0xA8
	protected bool isMaxSelect; // 0xAC
	protected string sortInfoText; // 0xB0
	protected int classId; // 0xB8
	protected int friendship; // 0xBC
	protected int friendshipMax; // 0xC0
	protected bool isLimitUpItemNum; // 0xC4
	protected bool isCanLimitUp; // 0xC5
	protected bool isSkillLvMax; // 0xC6
	protected bool isSkillUpItemNum; // 0xC7
	private bool isAppendSkillLvMax; // 0xC8
	private bool isAppendSkillUpItemNum; // 0xC9
	public bool isAppendSkillOpenItemNum; // 0xCA
	protected bool isTdLvMax; // 0xCB
	protected bool isSameSvt; // 0xCC
	protected bool isSameBaseSvt; // 0xCD
	protected bool isEquiped; // 0xCE
	protected bool isEventJoin; // 0xCF
	protected bool isPush; // 0xD0
	protected int adjustHpMax; // 0xD4
	protected int adjustAtkMax; // 0xD8
	protected int hpBase; // 0xDC
	protected int atkBase; // 0xE0
	protected bool isStatusUpSvt; // 0xE4
	protected bool isCanStUp; // 0xE5
	protected bool isExpUpSvt; // 0xE6
	protected bool isEventJoinBaseSvt; // 0xE7
	protected bool isMaterialTdSvt; // 0xE8
	protected IconLabelInfo iconLabelInfo1; // 0xF0
	protected IconLabelInfo iconLabelInfo2; // 0xF8
	protected long amountSortValue; // 0x100
	protected ListViewSort.BonusFilterKind bonusKind; // 0x108
	protected int bonusKindId; // 0x10C
	protected bool isEventUpVal; // 0x110
	protected int maxLimitCnt; // 0x114
	protected int currentLimitCnt; // 0x118
	protected bool isBaseLvMax; // 0x11C
	protected bool isMaxNextLv; // 0x11D
	protected bool isUseSupport; // 0x11E
	protected int priority; // 0x120
	protected bool isLvExceedMax; // 0x124
	protected bool isLvExceedItemNum; // 0x125
	protected bool isFriendshipExceedMax; // 0x126
	protected bool isFriendshipExceedItemNum; // 0x127
	protected List<int> enableSkillUp; // 0x128
	private List<int> enableAppendSkillUp; // 0x130
	protected bool isAtkUpMax; // 0x138
	protected bool isHpUpMax; // 0x139
	protected bool isAtkSecondUpMax; // 0x13A
	protected bool isHpSecondUpMax; // 0x13B
	protected bool isNotSelectStatusUpHp; // 0x13C
	protected bool isNotSelectStatusUpAtk; // 0x13D
	protected bool isNotSelectSecondStatusUpHp; // 0x13E
	protected bool isNotSelectSecondStatusUpAtk; // 0x13F
	protected bool isSameClass; // 0x140
	protected bool isSwapLock; // 0x141
	protected bool isSwapChoice; // 0x142
	protected int dragSelectNum; // 0x144
	protected bool isCanNotLock; // 0x148
	protected int hpReinforceValue; // 0x14C
	protected int atkReinforceValue; // 0x150
	protected int nowMaxHpReinforceValue; // 0x154
	protected int nowMaxAtkReinforceValue; // 0x158
	private bool isDispAtkStatusUpInfo; // 0x15C
	private bool isDispHpStatusUpInfo; // 0x15D
	private bool isEquipedCmdCard; // 0x15E
	private bool isCmdCardSlotOpen; // 0x15F
	private bool isCombineExpCampaignTarget; // 0x160
	private float combineExpCampaignValue; // 0x164
	private bool isCommandCardExceedMax; // 0x168
	private bool isIgnoreCombineLimitSpecial; // 0x169
	[CompilerGeneratedAttribute] // RVA: 0xCD811C Offset: 0xCD811C VA: 0xCD811C
	[DebuggerBrowsableAttribute] // RVA: 0xCD811C Offset: 0xCD811C VA: 0xCD811C
	private CombineServantListViewNoticeTween <NoticeTween>k__BackingField; // 0x170

	// Properties
	public CombineServantListViewItem.Type ListType { get; }
	public UserServantEntity UserSvtEntity { get; }
	public ServantEntity ServantEntity { get; }
	public long UserSvtId { get; }
	public int SvtId { get; }
	public string NameText { get; }
	public string LevelText { get; }
	public string RarityText { get; }
	public string CostText { get; }
	public int Hp { get; }
	public int AdjustHp { get; }
	public int Attack { get; }
	public int AdjustAttack { get; }
	public string ImageName { get; }
	public bool IsCanNotBaseSelect { get; }
	public bool IsCanNotSelect { get; }
	public bool IsCanNotSelectMaterial { get; }
	public bool IsFavorite { get; }
	public bool IsParty { get; }
	public bool IsHeroine { get; }
	public bool IsLock { get; }
	public bool IsChoice { get; }
	public bool IsProtected { get; }
	public bool IsPush { get; }
	public bool IsLimitTarget { get; }
	public int GetMaterialExp { get; }
	public int SvtRariry { get; }
	public bool IsBaseSvt { get; }
	public bool IsMtSelect { get; set; }
	public bool IsSelectMax { get; set; }
	public IconLabelInfo IconInfo1 { get; }
	public IconLabelInfo IconInfo2 { get; }
	public bool IsCanNotLimitUp { get; }
	public bool IsLimitCntMax { get; }
	public bool IsLvMax { get; }
	public bool IsFriendshipRankMax { get; }
	public bool IsLimitUpItemNum { get; }
	public bool IsSkillUpItemNum { get; }
	public List<int> GetEnableSkillupList { get; }
	public List<int> GetEnableAppendSkillupList { get; }
	public int SkillOpenItemId { get; }
	public int SkillOpenItemNum { get; }
	public bool IsSameServant { get; }
	public bool IsEquip { get; }
	public bool IsStatusUp { get; }
	public bool IsCanStatusUp { get; }
	public bool IsExpUpSvt { get; }
	public bool IsMaterialTdSvt { get; }
	public int GetHpUpVal { get; }
	public int GetAtkUpVal { get; }
	public bool IsHpAdjustMax { get; }
	public int GetHpAdjustMax { get; }
	public bool IsSecondHpAdjustMax { get; }
	public bool IsAtkAdjustMax { get; }
	public int GetAtkAdjustMax { get; }
	public bool IsSecondAtkAdjustMax { get; }
	public bool IsAtkStatusMax { get; set; }
	public bool IsHpStatusMax { get; set; }
	public bool IsSecondAtkStatusMax { get; set; }
	public bool IsSecondHpStatusMax { get; set; }
	public int GetMaxLimitCnt { get; }
	public int GetCurrentLimitCnt { get; }
	public bool IsEventJoin { get; }
	public bool IsMaxNextLv { get; set; }
	public bool IsBaseLvMax { get; }
	public bool IsOrganization { get; }
	public bool IsCombineEnableServant { get; }
	public bool IsUseSupportServant { get; }
	public bool IsLvExceedItemNum { get; }
	public bool IsLvExceedMax { get; }
	public bool IsFriendshipExceedItemNum { get; }
	public bool IsFriendshipExceedMax { get; }
	public bool IsCommandCardExceedmax { get; }
	public bool IsAtkUpMax { get; }
	public bool IsSecondAtkUpMax { get; }
	public bool IsHpUpMax { get; }
	public bool IsSecondHpUpMax { get; }
	public bool IsSwapLock { get; }
	public bool IsDispLock { get; }
	public bool IsSwapChoice { get; }
	public bool IsDispChoice { get; }
	public bool IsDragSelect { get; set; }
	public int DragSelectNum { get; set; }
	public bool IsCanNotLock { get; set; }
	public bool IsDispAtkStatusUpInfo { get; }
	public bool IsDispHpStatusUpInfo { get; }
	public bool IsEquipedCmdCard { get; }
	public bool IsCmdCardSlotOpen { get; }
	public bool IsCombineExpCampaignTarget { get; }
	public float CombineExpCampaignValue { get; }
	public bool IsIgnoreCombineLimitSpecial { get; }
	public bool IsCanNotSelectPush { get; }
	public CombineServantListViewNoticeTween NoticeTween { get; set; }

	// Methods

	// RVA: 0x1E39DC0 Offset: 0x1E39DC0 VA: 0x1E39DC0
	public void .ctor(CombineServantListViewItem.Type type, int index, UserServantEntity userSvtEntity, bool isFavorite, bool isParty, UserServantEntity baseUsrSvtData, bool isMtSvt, EventUpValSetupInfo setupInfo, Dictionary<int, List<int>> cachedUserServantNpLvDict) { }

	// RVA: 0x1E3DA64 Offset: 0x1E3DA64 VA: 0x1E3DA64 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1E3CEC8 Offset: 0x1E3CEC8 VA: 0x1E3CEC8
	public void SetSkillInfo() { }

	// RVA: 0x1E3D3F8 Offset: 0x1E3D3F8 VA: 0x1E3D3F8
	public void SetAppendSkillInfo() { }

	// RVA: 0x1E3DA6C Offset: 0x1E3DA6C VA: 0x1E3DA6C
	public void ModifyItem(bool isFavorite) { }

	// RVA: 0x1E3DAB4 Offset: 0x1E3DAB4 VA: 0x1E3DAB4
	public void ModifyLockItem() { }

	// RVA: 0x1E3DAF8 Offset: 0x1E3DAF8 VA: 0x1E3DAF8
	public void ModifyChoiceItem() { }

	// RVA: 0x1E3DB3C Offset: 0x1E3DB3C VA: 0x1E3DB3C
	public void ModifyPushItem() { }

	// RVA: 0x1E3DC04 Offset: 0x1E3DC04 VA: 0x1E3DC04
	private bool IsMatchServantFilter(ListViewSort sort) { }

	// RVA: 0x1E3DEC0 Offset: 0x1E3DEC0 VA: 0x1E3DEC0
	private bool IsMatchBaseServantFilter(ListViewSort sort) { }

	// RVA: 0x1E3E1E0 Offset: 0x1E3E1E0 VA: 0x1E3E1E0
	private bool IsMatchMaterialFilter(ListViewSort sort) { }

	// RVA: 0x1E3E73C Offset: 0x1E3E73C VA: 0x1E3E73C Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x1E40474 Offset: 0x1E40474 VA: 0x1E40474
	public void SetIsCombineExpCampaignTarget(List<EventCampaignEntity> eventCampaignEntities) { }

	// RVA: 0x1E4078C Offset: 0x1E4078C VA: 0x1E4078C
	public void SetNoticeTween(CombineServantListViewNoticeTween noticeTween) { }

	// RVA: 0x1E40300 Offset: 0x1E40300 VA: 0x1E40300
	public CombineServantListViewItem.Type get_ListType() { }

	// RVA: 0x1E4079C Offset: 0x1E4079C VA: 0x1E4079C
	public void setUserServantEntity(UserServantEntity entity) { }

	// RVA: 0x1E407A4 Offset: 0x1E407A4 VA: 0x1E407A4
	public UserServantEntity get_UserSvtEntity() { }

	// RVA: 0x1E408A4 Offset: 0x1E408A4 VA: 0x1E408A4
	public ServantEntity get_ServantEntity() { }

	// RVA: 0x1E408AC Offset: 0x1E408AC VA: 0x1E408AC
	public long get_UserSvtId() { }

	// RVA: 0x1E40948 Offset: 0x1E40948 VA: 0x1E40948
	public int get_SvtId() { }

	// RVA: 0x1E40950 Offset: 0x1E40950 VA: 0x1E40950
	public string get_NameText() { }

	// RVA: 0x1E40A0C Offset: 0x1E40A0C VA: 0x1E40A0C
	public string get_LevelText() { }

	// RVA: 0x1E40A98 Offset: 0x1E40A98 VA: 0x1E40A98
	public string get_RarityText() { }

	// RVA: 0x1E40B04 Offset: 0x1E40B04 VA: 0x1E40B04
	public string get_CostText() { }

	// RVA: 0x1E40B90 Offset: 0x1E40B90 VA: 0x1E40B90
	public int get_Hp() { }

	// RVA: 0x1E40BA8 Offset: 0x1E40BA8 VA: 0x1E40BA8
	public int get_AdjustHp() { }

	// RVA: 0x1E40BC0 Offset: 0x1E40BC0 VA: 0x1E40BC0
	public int get_Attack() { }

	// RVA: 0x1E40BD8 Offset: 0x1E40BD8 VA: 0x1E40BD8
	public int get_AdjustAttack() { }

	// RVA: 0x1E40BF0 Offset: 0x1E40BF0 VA: 0x1E40BF0
	public string get_ImageName() { }

	// RVA: 0x1E4003C Offset: 0x1E4003C VA: 0x1E4003C
	public bool get_IsCanNotBaseSelect() { }

	// RVA: 0x1E3E62C Offset: 0x1E3E62C VA: 0x1E3E62C
	public bool get_IsCanNotSelect() { }

	// RVA: 0x1E3FF08 Offset: 0x1E3FF08 VA: 0x1E3FF08
	public bool get_IsCanNotSelectMaterial() { }

	// RVA: 0x1E40C70 Offset: 0x1E40C70 VA: 0x1E40C70
	public bool isStatusMax() { }

	// RVA: 0x1E40CBC Offset: 0x1E40CBC VA: 0x1E40CBC
	public bool isCanNotSelectSecondStatusMaterial() { }

	// RVA: 0x1E40D24 Offset: 0x1E40D24 VA: 0x1E40D24
	public bool get_IsFavorite() { }

	// RVA: 0x1E40D2C Offset: 0x1E40D2C VA: 0x1E40D2C
	public bool get_IsParty() { }

	// RVA: 0x1E40C58 Offset: 0x1E40C58 VA: 0x1E40C58
	public bool get_IsHeroine() { }

	// RVA: 0x1E40D34 Offset: 0x1E40D34 VA: 0x1E40D34
	public bool get_IsLock() { }

	// RVA: 0x1E40D3C Offset: 0x1E40D3C VA: 0x1E40D3C
	public bool get_IsChoice() { }

	// RVA: 0x1E40D08 Offset: 0x1E40D08 VA: 0x1E40D08
	public bool get_IsProtected() { }

	// RVA: 0x1E40D44 Offset: 0x1E40D44 VA: 0x1E40D44
	public bool get_IsPush() { }

	// RVA: 0x1E40D4C Offset: 0x1E40D4C VA: 0x1E40D4C
	public bool get_IsLimitTarget() { }

	// RVA: 0x1E40D54 Offset: 0x1E40D54 VA: 0x1E40D54
	private string ToString() { }

	// RVA: 0x1E40DD8 Offset: 0x1E40DD8 VA: 0x1E40DD8
	public int get_GetMaterialExp() { }

	// RVA: 0x1E40DE0 Offset: 0x1E40DE0 VA: 0x1E40DE0
	public int get_SvtRariry() { }

	// RVA: 0x1E3FEE0 Offset: 0x1E3FEE0 VA: 0x1E3FEE0
	public bool get_IsBaseSvt() { }

	// RVA: 0x1E40DE8 Offset: 0x1E40DE8 VA: 0x1E40DE8
	public bool get_IsMtSelect() { }

	// RVA: 0x1E40DF0 Offset: 0x1E40DF0 VA: 0x1E40DF0
	public void set_IsMtSelect(bool value) { }

	// RVA: 0x1E3D99C Offset: 0x1E3D99C VA: 0x1E3D99C
	public bool GetNpInfo(out int tdId, out int tdLv, out int tdMaxLv) { }

	// RVA: 0x1E40DFC Offset: 0x1E40DFC VA: 0x1E40DFC
	public bool get_IsSelectMax() { }

	// RVA: 0x1E40E04 Offset: 0x1E40E04 VA: 0x1E40E04
	public void set_IsSelectMax(bool value) { }

	// RVA: 0x1E40E10 Offset: 0x1E40E10 VA: 0x1E40E10
	public IconLabelInfo get_IconInfo1() { }

	// RVA: 0x1E40E18 Offset: 0x1E40E18 VA: 0x1E40E18
	public IconLabelInfo get_IconInfo2() { }

	// RVA: 0x1E40E20 Offset: 0x1E40E20 VA: 0x1E40E20
	public bool get_IsCanNotLimitUp() { }

	// RVA: 0x1E40E28 Offset: 0x1E40E28 VA: 0x1E40E28
	public bool get_IsLimitCntMax() { }

	// RVA: 0x1E40E30 Offset: 0x1E40E30 VA: 0x1E40E30
	public bool get_IsLvMax() { }

	// RVA: 0x1E40E38 Offset: 0x1E40E38 VA: 0x1E40E38
	public bool get_IsFriendshipRankMax() { }

	// RVA: 0x1E40E40 Offset: 0x1E40E40 VA: 0x1E40E40
	public bool get_IsLimitUpItemNum() { }

	// RVA: 0x1E40E48 Offset: 0x1E40E48 VA: 0x1E40E48
	public bool get_IsSkillUpItemNum() { }

	// RVA: 0x1E40E50 Offset: 0x1E40E50 VA: 0x1E40E50
	public List<int> get_GetEnableSkillupList() { }

	// RVA: 0x1E40E58 Offset: 0x1E40E58 VA: 0x1E40E58
	public List<int> get_GetEnableAppendSkillupList() { }

	// RVA: 0x1E40E60 Offset: 0x1E40E60 VA: 0x1E40E60
	public int get_SkillOpenItemId() { }

	// RVA: 0x1E40F08 Offset: 0x1E40F08 VA: 0x1E40F08
	public int get_SkillOpenItemNum() { }

	// RVA: 0x1E41054 Offset: 0x1E41054 VA: 0x1E41054
	public bool get_IsSameServant() { }

	// RVA: 0x1E4105C Offset: 0x1E4105C VA: 0x1E4105C
	public bool get_IsEquip() { }

	// RVA: 0x1E40D1C Offset: 0x1E40D1C VA: 0x1E40D1C
	public bool get_IsStatusUp() { }

	// RVA: 0x1E41064 Offset: 0x1E41064 VA: 0x1E41064
	public bool get_IsCanStatusUp() { }

	// RVA: 0x1E4106C Offset: 0x1E4106C VA: 0x1E4106C
	public bool get_IsExpUpSvt() { }

	// RVA: 0x1E40C68 Offset: 0x1E40C68 VA: 0x1E40C68
	public bool get_IsMaterialTdSvt() { }

	// RVA: 0x1E41074 Offset: 0x1E41074 VA: 0x1E41074
	public int get_GetHpUpVal() { }

	// RVA: 0x1E4107C Offset: 0x1E4107C VA: 0x1E4107C
	public int get_GetAtkUpVal() { }

	// RVA: 0x1E41084 Offset: 0x1E41084 VA: 0x1E41084
	public bool get_IsHpAdjustMax() { }

	// RVA: 0x1E410B4 Offset: 0x1E410B4 VA: 0x1E410B4
	public int get_GetHpAdjustMax() { }

	// RVA: 0x1E410BC Offset: 0x1E410BC VA: 0x1E410BC
	public bool get_IsSecondHpAdjustMax() { }

	// RVA: 0x1E410EC Offset: 0x1E410EC VA: 0x1E410EC
	public bool get_IsAtkAdjustMax() { }

	// RVA: 0x1E4111C Offset: 0x1E4111C VA: 0x1E4111C
	public int get_GetAtkAdjustMax() { }

	// RVA: 0x1E41124 Offset: 0x1E41124 VA: 0x1E41124
	public bool get_IsSecondAtkAdjustMax() { }

	// RVA: 0x1E41154 Offset: 0x1E41154 VA: 0x1E41154
	public bool get_IsAtkStatusMax() { }

	// RVA: 0x1E4115C Offset: 0x1E4115C VA: 0x1E4115C
	public void set_IsAtkStatusMax(bool value) { }

	// RVA: 0x1E41194 Offset: 0x1E41194 VA: 0x1E41194
	public bool get_IsHpStatusMax() { }

	// RVA: 0x1E4119C Offset: 0x1E4119C VA: 0x1E4119C
	public void set_IsHpStatusMax(bool value) { }

	// RVA: 0x1E411D4 Offset: 0x1E411D4 VA: 0x1E411D4
	public bool get_IsSecondAtkStatusMax() { }

	// RVA: 0x1E411DC Offset: 0x1E411DC VA: 0x1E411DC
	public void set_IsSecondAtkStatusMax(bool value) { }

	// RVA: 0x1E41214 Offset: 0x1E41214 VA: 0x1E41214
	public bool get_IsSecondHpStatusMax() { }

	// RVA: 0x1E4121C Offset: 0x1E4121C VA: 0x1E4121C
	public void set_IsSecondHpStatusMax(bool value) { }

	// RVA: 0x1E41254 Offset: 0x1E41254 VA: 0x1E41254
	public int get_GetMaxLimitCnt() { }

	// RVA: 0x1E4125C Offset: 0x1E4125C VA: 0x1E4125C
	public int get_GetCurrentLimitCnt() { }

	// RVA: 0x1E40034 Offset: 0x1E40034 VA: 0x1E40034
	public bool get_IsEventJoin() { }

	// RVA: 0x1E41264 Offset: 0x1E41264 VA: 0x1E41264
	public bool get_IsMaxNextLv() { }

	// RVA: 0x1E4126C Offset: 0x1E4126C VA: 0x1E4126C
	public void set_IsMaxNextLv(bool value) { }

	// RVA: 0x1E41278 Offset: 0x1E41278 VA: 0x1E41278
	public bool get_IsBaseLvMax() { }

	// RVA: 0x1E41280 Offset: 0x1E41280 VA: 0x1E41280
	public bool get_IsOrganization() { }

	// RVA: 0x1E412B0 Offset: 0x1E412B0 VA: 0x1E412B0
	public bool get_IsCombineEnableServant() { }

	// RVA: 0x1E412D0 Offset: 0x1E412D0 VA: 0x1E412D0
	public bool get_IsUseSupportServant() { }

	// RVA: 0x1E412D8 Offset: 0x1E412D8 VA: 0x1E412D8
	public bool GetSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x1E41398 Offset: 0x1E41398 VA: 0x1E41398
	public SvtUseSkillData GetAppendSkillData() { }

	// RVA: 0x1E41410 Offset: 0x1E41410 VA: 0x1E41410
	public bool get_IsLvExceedItemNum() { }

	// RVA: 0x1E41418 Offset: 0x1E41418 VA: 0x1E41418
	public bool get_IsLvExceedMax() { }

	// RVA: 0x1E41420 Offset: 0x1E41420 VA: 0x1E41420
	public bool get_IsFriendshipExceedItemNum() { }

	// RVA: 0x1E41428 Offset: 0x1E41428 VA: 0x1E41428
	public bool get_IsFriendshipExceedMax() { }

	// RVA: 0x1E41430 Offset: 0x1E41430 VA: 0x1E41430
	public bool get_IsCommandCardExceedmax() { }

	// RVA: 0x1E41438 Offset: 0x1E41438 VA: 0x1E41438
	public bool get_IsAtkUpMax() { }

	// RVA: 0x1E41440 Offset: 0x1E41440 VA: 0x1E41440
	public bool get_IsSecondAtkUpMax() { }

	// RVA: 0x1E41448 Offset: 0x1E41448 VA: 0x1E41448
	public bool get_IsHpUpMax() { }

	// RVA: 0x1E41450 Offset: 0x1E41450 VA: 0x1E41450
	public bool get_IsSecondHpUpMax() { }

	// RVA: 0x1E41458 Offset: 0x1E41458 VA: 0x1E41458
	public bool SwapLock() { }

	// RVA: 0x1E41474 Offset: 0x1E41474 VA: 0x1E41474
	public bool get_IsSwapLock() { }

	// RVA: 0x1E3FEE8 Offset: 0x1E3FEE8 VA: 0x1E3FEE8
	public bool get_IsDispLock() { }

	// RVA: 0x1E4147C Offset: 0x1E4147C VA: 0x1E4147C
	public bool SwapChoice() { }

	// RVA: 0x1E41498 Offset: 0x1E41498 VA: 0x1E41498
	public bool get_IsSwapChoice() { }

	// RVA: 0x1E3DEA0 Offset: 0x1E3DEA0 VA: 0x1E3DEA0
	public bool get_IsDispChoice() { }

	// RVA: 0x1E414A0 Offset: 0x1E414A0 VA: 0x1E414A0
	public bool get_IsDragSelect() { }

	// RVA: 0x1E414B0 Offset: 0x1E414B0 VA: 0x1E414B0
	public void set_IsDragSelect(bool value) { }

	// RVA: 0x1E414E0 Offset: 0x1E414E0 VA: 0x1E414E0
	public int get_DragSelectNum() { }

	// RVA: 0x1E414E8 Offset: 0x1E414E8 VA: 0x1E414E8
	public void set_DragSelectNum(int value) { }

	// RVA: 0x1E414F0 Offset: 0x1E414F0 VA: 0x1E414F0
	public bool get_IsCanNotLock() { }

	// RVA: 0x1E414F8 Offset: 0x1E414F8 VA: 0x1E414F8
	public void set_IsCanNotLock(bool value) { }

	// RVA: 0x1E41504 Offset: 0x1E41504 VA: 0x1E41504
	public bool get_IsDispAtkStatusUpInfo() { }

	// RVA: 0x1E4150C Offset: 0x1E4150C VA: 0x1E4150C
	public bool get_IsDispHpStatusUpInfo() { }

	// RVA: 0x1E41514 Offset: 0x1E41514 VA: 0x1E41514
	public bool get_IsEquipedCmdCard() { }

	// RVA: 0x1E4151C Offset: 0x1E4151C VA: 0x1E4151C
	public bool get_IsCmdCardSlotOpen() { }

	// RVA: 0x1E41524 Offset: 0x1E41524 VA: 0x1E41524
	public bool get_IsCombineExpCampaignTarget() { }

	// RVA: 0x1E4152C Offset: 0x1E4152C VA: 0x1E4152C
	public float get_CombineExpCampaignValue() { }

	// RVA: 0x1E40C60 Offset: 0x1E40C60 VA: 0x1E40C60
	public bool get_IsIgnoreCombineLimitSpecial() { }

	// RVA: 0x1E41534 Offset: 0x1E41534 VA: 0x1E41534
	public bool get_IsCanNotSelectPush() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3CFF4 Offset: 0xD3CFF4 VA: 0xD3CFF4
	// RVA: 0x1E415DC Offset: 0x1E415DC VA: 0x1E415DC
	public CombineServantListViewNoticeTween get_NoticeTween() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3D004 Offset: 0xD3D004 VA: 0xD3D004
	// RVA: 0x1E40794 Offset: 0x1E40794 VA: 0x1E40794
	private void set_NoticeTween(CombineServantListViewNoticeTween value) { }
}

// Namespace: 
public enum CombineServantListViewItem.Type // TypeDefIndex: 9625
{
	// Fields
	public int value__; // 0x0
	public const CombineServantListViewItem.Type BASE = 0;
	public const CombineServantListViewItem.Type MATERIAL = 1;
	public const CombineServantListViewItem.Type LIMITUP_BASE = 2;
	public const CombineServantListViewItem.Type SKILL_BASE = 3;
	public const CombineServantListViewItem.Type NP_BASE = 4;
	public const CombineServantListViewItem.Type NP_MATERIAL = 5;
	public const CombineServantListViewItem.Type LVEXCEED_BASE = 6;
	public const CombineServantListViewItem.Type COMMANDCARD_BASE = 7;
	public const CombineServantListViewItem.Type FRIENDSHIP_EXCEED_BASE = 8;
	public const CombineServantListViewItem.Type SPECIAL_ASCENSION_BASE = 9;
	public const CombineServantListViewItem.Type COMMAND_CARD_EXCEED_BASE = 10;
	public const CombineServantListViewItem.Type APPEND_SKILL_BASE = 11;
	public const CombineServantListViewItem.Type SUM = 12;
}

// Namespace: 
public class CombineServantListViewItemDraw : BaseMonoBehaviour // TypeDefIndex: 9626
{
	// Fields
	public UICommonButton baseButton; // 0x18
	public ServantFaceIconComponent servantFaceIcon; // 0x20
	public DragSelectComponent dragSelect; // 0x28
	public UISprite faceImg; // 0x30
	public UISprite frameImg; // 0x38
	public UISprite partyImg; // 0x40
	public UISprite removeImg; // 0x48
	public UISprite choiceImg; // 0x50
	public FlashingIconComponent partyIcon; // 0x58
	public UISprite lockImg; // 0x60
	public UILabel statusTxtLb; // 0x68
	public LimitCountIconComponent limitCountIcon; // 0x70
	public GameObject npLvInfo; // 0x78
	public UIIconLabel npIconLabel; // 0x80
	public UIIconLabel subIconLabel; // 0x88
	public UILabel skillLvLabel; // 0x90
	public UISprite maskSprite; // 0x98
	public UILabel maskLabel; // 0xA0
	public UISprite pushImg; // 0xA8
	[SerializeField] // RVA: 0xCD8158 Offset: 0xCD8158 VA: 0xCD8158
	private UISprite materialTdSprite; // 0xB0
	[SerializeField] // RVA: 0xCD8168 Offset: 0xCD8168 VA: 0xCD8168
	private GameObject coinInfo; // 0xB8
	[SerializeField] // RVA: 0xCD8178 Offset: 0xCD8178 VA: 0xCD8178
	private ItemIconComponent coinIcon; // 0xC0
	[SerializeField] // RVA: 0xCD8188 Offset: 0xCD8188 VA: 0xCD8188
	private UILabel coinNumLabel; // 0xC8
	[SerializeField] // RVA: 0xCD8198 Offset: 0xCD8198 VA: 0xCD8198
	private ServantCommandCardListComponent svtCommandCardList; // 0xD0
	[SerializeField] // RVA: 0xCD81A8 Offset: 0xCD81A8 VA: 0xCD81A8
	private SwitchUIWidgetComponent switchInfoComp; // 0xD8
	[SerializeField] // RVA: 0xCD81B8 Offset: 0xCD81B8 VA: 0xCD81B8
	private UIWidget[] switchInfoList; // 0xE0

	// Methods

	// RVA: 0x1E415E4 Offset: 0x1E415E4 VA: 0x1E415E4
	public void .ctor() { }

	// RVA: 0x1E415EC Offset: 0x1E415EC VA: 0x1E415EC
	public void SetItem(CombineServantListViewItem item, CombineServantListViewItemDraw.DispMode mode, bool isSelectEnable, CombineServantListViewManager.ModeKind modeKind) { }

	// RVA: 0x1E46260 Offset: 0x1E46260 VA: 0x1E46260
	public void SetInput(CombineServantListViewItem item, bool isSelectEnable) { }

	// RVA: 0x1E46178 Offset: 0x1E46178 VA: 0x1E46178
	protected void SetSelectDisp(CombineServantListViewItem item) { }
}

// Namespace: 
public enum CombineServantListViewItemDraw.DispMode // TypeDefIndex: 9627
{
	// Fields
	public int value__; // 0x0
	public const CombineServantListViewItemDraw.DispMode INVISIBLE = 0;
	public const CombineServantListViewItemDraw.DispMode INVALID = 1;
	public const CombineServantListViewItemDraw.DispMode VALID = 2;
	public const CombineServantListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class CombineServantListViewManager : ListViewManager // TypeDefIndex: 9628
{
	// Fields
	private static readonly float COLOR_VAL; // 0x0
	private static readonly int FILTER2_MAX_KIND_NUM; // 0x4
	private static readonly int LIMIT_UP_FILTER2_MAX_KIND_NUM; // 0x8
	private static readonly int BASE_SVT_NAME_MAX_WIDTH; // 0xC
	private static readonly int RES_LVUP_ARROW_SPACING; // 0x10
	private static readonly Color LV_UP_COLOR; // 0x14
	private static readonly float SCROLL_TO_ITEM_OFFSET; // 0x24
	[SerializeField] // RVA: 0xCD81C8 Offset: 0xCD81C8 VA: 0xCD81C8
	private CombineRootComponent combineRootComponent; // 0x138
	[SerializeField] // RVA: 0xCD81D8 Offset: 0xCD81D8 VA: 0xCD81D8
	private GameObject servantListView; // 0x140
	[SerializeField] // RVA: 0xCD81E8 Offset: 0xCD81E8 VA: 0xCD81E8
	private GameObject servantNumInfo; // 0x148
	[SerializeField] // RVA: 0xCD81F8 Offset: 0xCD81F8 VA: 0xCD81F8
	private UILabel servantInfoLabel; // 0x150
	[SerializeField] // RVA: 0xCD8208 Offset: 0xCD8208 VA: 0xCD8208
	private GameObject cardNumInfo; // 0x158
	[SerializeField] // RVA: 0xCD8218 Offset: 0xCD8218 VA: 0xCD8218
	private UILabel cardInfoLabel; // 0x160
	[SerializeField] // RVA: 0xCD8228 Offset: 0xCD8228 VA: 0xCD8228
	private UILabel emptyListNoticeLabel; // 0x168
	[SerializeField] // RVA: 0xCD8238 Offset: 0xCD8238 VA: 0xCD8238
	private UILabel selectInfoLabel; // 0x170
	[SerializeField] // RVA: 0xCD8248 Offset: 0xCD8248 VA: 0xCD8248
	private GameObject combineViewInfo; // 0x178
	[SerializeField] // RVA: 0xCD8258 Offset: 0xCD8258 VA: 0xCD8258
	private UISprite combineSvtInfoBg; // 0x180
	[SerializeField] // RVA: 0xCD8268 Offset: 0xCD8268 VA: 0xCD8268
	private UILabel combineSvtInfoLabel; // 0x188
	[SerializeField] // RVA: 0xCD8278 Offset: 0xCD8278 VA: 0xCD8278
	private UISprite combineSvtInfoIcon; // 0x190
	[SerializeField] // RVA: 0xCD8288 Offset: 0xCD8288 VA: 0xCD8288
	private UISprite qpAndExpInfoBg; // 0x198
	[SerializeField] // RVA: 0xCD8298 Offset: 0xCD8298 VA: 0xCD8298
	private UILabel spendQpInfoLabel; // 0x1A0
	[SerializeField] // RVA: 0xCD82A8 Offset: 0xCD82A8 VA: 0xCD82A8
	private UILabel spendQpLabel; // 0x1A8
	[SerializeField] // RVA: 0xCD82B8 Offset: 0xCD82B8 VA: 0xCD82B8
	private UISprite spendQpInfoImg; // 0x1B0
	[SerializeField] // RVA: 0xCD82C8 Offset: 0xCD82C8 VA: 0xCD82C8
	private UISprite spendQpBg; // 0x1B8
	[SerializeField] // RVA: 0xCD82D8 Offset: 0xCD82D8 VA: 0xCD82D8
	private GameObject spendQpMask; // 0x1C0
	[SerializeField] // RVA: 0xCD82E8 Offset: 0xCD82E8 VA: 0xCD82E8
	private UILabel haveQpLabel; // 0x1C8
	[SerializeField] // RVA: 0xCD82F8 Offset: 0xCD82F8 VA: 0xCD82F8
	private UISprite haveQpInfoImg; // 0x1D0
	[SerializeField] // RVA: 0xCD8308 Offset: 0xCD8308 VA: 0xCD8308
	private UISprite haveQpBg; // 0x1D8
	[SerializeField] // RVA: 0xCD8318 Offset: 0xCD8318 VA: 0xCD8318
	private GameObject haveQpMask; // 0x1E0
	[SerializeField] // RVA: 0xCD8328 Offset: 0xCD8328 VA: 0xCD8328
	private UILabel getExpInfoLabel; // 0x1E8
	[SerializeField] // RVA: 0xCD8338 Offset: 0xCD8338 VA: 0xCD8338
	private UISprite getExpInfoImg; // 0x1F0
	[SerializeField] // RVA: 0xCD8348 Offset: 0xCD8348 VA: 0xCD8348
	private UILabel getExpLabel; // 0x1F8
	[SerializeField] // RVA: 0xCD8358 Offset: 0xCD8358 VA: 0xCD8358
	private UISprite getExpBg; // 0x200
	[SerializeField] // RVA: 0xCD8368 Offset: 0xCD8368 VA: 0xCD8368
	private GameObject getExpMask; // 0x208
	[SerializeField] // RVA: 0xCD8378 Offset: 0xCD8378 VA: 0xCD8378
	private UILabel nextExpLabel; // 0x210
	[SerializeField] // RVA: 0xCD8388 Offset: 0xCD8388 VA: 0xCD8388
	private UISprite nextExpInfoImg; // 0x218
	[SerializeField] // RVA: 0xCD8398 Offset: 0xCD8398 VA: 0xCD8398
	private UISprite nextExpBg; // 0x220
	[SerializeField] // RVA: 0xCD83A8 Offset: 0xCD83A8 VA: 0xCD83A8
	private GameObject nextExpMask; // 0x228
	[SerializeField] // RVA: 0xCD83B8 Offset: 0xCD83B8 VA: 0xCD83B8
	private UISprite enhancementInfoBg; // 0x230
	[SerializeField] // RVA: 0xCD83C8 Offset: 0xCD83C8 VA: 0xCD83C8
	private UISprite enhancementInfoImage; // 0x238
	[SerializeField] // RVA: 0xCD83D8 Offset: 0xCD83D8 VA: 0xCD83D8
	private UISprite enhancementInfoArrow; // 0x240
	[SerializeField] // RVA: 0xCD83E8 Offset: 0xCD83E8 VA: 0xCD83E8
	private UISprite enhancementInfoDot; // 0x248
	[SerializeField] // RVA: 0xCD83F8 Offset: 0xCD83F8 VA: 0xCD83F8
	private UISlider currentExpBar; // 0x250
	[SerializeField] // RVA: 0xCD8408 Offset: 0xCD8408 VA: 0xCD8408
	private UILabel currentLvLabel; // 0x258
	[SerializeField] // RVA: 0xCD8418 Offset: 0xCD8418 VA: 0xCD8418
	private UISprite currentLvImage; // 0x260
	[SerializeField] // RVA: 0xCD8428 Offset: 0xCD8428 VA: 0xCD8428
	private UISlider resCurrentExpBar; // 0x268
	[SerializeField] // RVA: 0xCD8438 Offset: 0xCD8438 VA: 0xCD8438
	private UISlider resExpBar; // 0x270
	[SerializeField] // RVA: 0xCD8448 Offset: 0xCD8448 VA: 0xCD8448
	private UISlider resNextExpBar; // 0x278
	[SerializeField] // RVA: 0xCD8458 Offset: 0xCD8458 VA: 0xCD8458
	private UILabel resLvLabel; // 0x280
	[SerializeField] // RVA: 0xCD8468 Offset: 0xCD8468 VA: 0xCD8468
	private UISprite resLvImage; // 0x288
	[SerializeField] // RVA: 0xCD8478 Offset: 0xCD8478 VA: 0xCD8478
	private UICommonButton allReleaseButton; // 0x290
	[SerializeField] // RVA: 0xCD8488 Offset: 0xCD8488 VA: 0xCD8488
	private UIButton decideButton; // 0x298
	[SerializeField] // RVA: 0xCD8498 Offset: 0xCD8498 VA: 0xCD8498
	private UISprite decideBtnBg; // 0x2A0
	private bool isDecideFlg; // 0x2A8
	[SerializeField] // RVA: 0xCD84A8 Offset: 0xCD84A8 VA: 0xCD84A8
	private int selectMax; // 0x2AC
	[SerializeField] // RVA: 0xCD84B8 Offset: 0xCD84B8 VA: 0xCD84B8
	private UISprite levelUpInfoImg; // 0x2B0
	[SerializeField] // RVA: 0xCD84C8 Offset: 0xCD84C8 VA: 0xCD84C8
	private UILabel combineInfoMsgLb; // 0x2B8
	[SerializeField] // RVA: 0xCD84D8 Offset: 0xCD84D8 VA: 0xCD84D8
	private UISprite sortExplanationSprite; // 0x2C0
	[SerializeField] // RVA: 0xCD84E8 Offset: 0xCD84E8 VA: 0xCD84E8
	private UISprite statusTabSprite; // 0x2C8
	[SerializeField] // RVA: 0xCD84F8 Offset: 0xCD84F8 VA: 0xCD84F8
	private UISprite lockTabSprite; // 0x2D0
	[SerializeField] // RVA: 0xCD8508 Offset: 0xCD8508 VA: 0xCD8508
	private UISprite choiceSprite; // 0x2D8
	[SerializeField] // RVA: 0xCD8518 Offset: 0xCD8518 VA: 0xCD8518
	private UISprite pushSprite; // 0x2E0
	[SerializeField] // RVA: 0xCD8528 Offset: 0xCD8528 VA: 0xCD8528
	private UICommonButton statusTabButton; // 0x2E8
	[SerializeField] // RVA: 0xCD8538 Offset: 0xCD8538 VA: 0xCD8538
	private UICommonButton lockTabButton; // 0x2F0
	[SerializeField] // RVA: 0xCD8548 Offset: 0xCD8548 VA: 0xCD8548
	private UICommonButton choiceTabButton; // 0x2F8
	[SerializeField] // RVA: 0xCD8558 Offset: 0xCD8558 VA: 0xCD8558
	private UICommonButton pushTabButton; // 0x300
	[SerializeField] // RVA: 0xCD8568 Offset: 0xCD8568 VA: 0xCD8568
	private UISprite filterSprite; // 0x308
	[SerializeField] // RVA: 0xCD8578 Offset: 0xCD8578 VA: 0xCD8578
	private UICommonButton bonusFilterKindButton; // 0x310
	[SerializeField] // RVA: 0xCD8588 Offset: 0xCD8588 VA: 0xCD8588
	private UILabel bonusFilterKindLabel; // 0x318
	[SerializeField] // RVA: 0xCD8598 Offset: 0xCD8598 VA: 0xCD8598
	private ListViewItemSeed normalSizeSeed; // 0x320
	[SerializeField] // RVA: 0xCD85A8 Offset: 0xCD85A8 VA: 0xCD85A8
	private ListViewItemSeed smallSizeSeed; // 0x328
	[SerializeField] // RVA: 0xCD85B8 Offset: 0xCD85B8 VA: 0xCD85B8
	private ListViewItemSeed extremelySmallSizeSeed; // 0x330
	[SerializeField] // RVA: 0xCD85C8 Offset: 0xCD85C8 VA: 0xCD85C8
	private ListViewItemSeed appendNormalSizeSeed; // 0x338
	[SerializeField] // RVA: 0xCD85D8 Offset: 0xCD85D8 VA: 0xCD85D8
	private ListViewItemSeed appendSmallSizeSeed; // 0x340
	[SerializeField] // RVA: 0xCD85E8 Offset: 0xCD85E8 VA: 0xCD85E8
	private ListViewItemSeed appendExtremelySmallSizeSeed; // 0x348
	[SerializeField] // RVA: 0xCD85F8 Offset: 0xCD85F8 VA: 0xCD85F8
	private UICommonButton scaleChangeButton; // 0x350
	[SerializeField] // RVA: 0xCD8608 Offset: 0xCD8608 VA: 0xCD8608
	private UISprite scaleChangeButtonSprite; // 0x358
	[SerializeField] // RVA: 0xCD8618 Offset: 0xCD8618 VA: 0xCD8618
	private CombineExpUpInfo combineMaterialNumInfo; // 0x360
	[SerializeField] // RVA: 0xCD8628 Offset: 0xCD8628 VA: 0xCD8628
	private UISprite bgTxtSprite; // 0x368
	[SerializeField] // RVA: 0xCD8638 Offset: 0xCD8638 VA: 0xCD8638
	private MenuListControl menuListCtr; // 0x370
	public static readonly string SORT_SAVE_KEY; // 0x28
	private static bool isInitSystem; // 0x30
	private static ListViewSort[] sortStatusList; // 0x38
	private CheckCombineResStatus combineResStatus; // 0x378
	private List<long> tempMaterialUserServantIdList; // 0x380
	private List<long> selectedMaterialUserServantIdList; // 0x388
	private SetCombineData combineData; // 0x390
	private UserServantEntity selectUsrSvtEntity; // 0x398
	private CombineServantListViewItem.Type itemType; // 0x3A0
	private List<EventCampaignEntity> eventCampaignEntities; // 0x3A8
	private int[] bonusEventIdList; // 0x3B0
	private int[] servantFilterIdList; // 0x3B8
	private int[] eventCampaignIdList; // 0x3C0
	private List<int[]> eventCampaignServantIdList; // 0x3C8
	private CombineServantListViewNoticeTween noticeTween; // 0x3D0
	private CombineServantListViewManager.InitMode initMode; // 0x3D8
	private CombineServantListViewManager.ModeKind modeKind; // 0x3DC
	private ListViewSort.ScaleType scaleType; // 0x3E0
	[CompilerGeneratedAttribute] // RVA: 0xCD8648 Offset: 0xCD8648 VA: 0xCD8648
	[DebuggerBrowsableAttribute] // RVA: 0xCD8648 Offset: 0xCD8648 VA: 0xCD8648
	private CombineServantListViewManager.CallbackFunc callbackFunc; // 0x3E8
	[CompilerGeneratedAttribute] // RVA: 0xCD8684 Offset: 0xCD8684 VA: 0xCD8684
	[DebuggerBrowsableAttribute] // RVA: 0xCD8684 Offset: 0xCD8684 VA: 0xCD8684
	private Action callbackFunc2; // 0x3F0
	private int callbackCount; // 0x3F8
	private CombineServantListViewManager.RequestCallbackFunc requestCallback; // 0x400
	private UserServantMaster userServantMaster; // 0x408
	private int userQP; // 0x410
	private int selectSum; // 0x414
	private int selectQp; // 0x418
	private int selectExp; // 0x41C
	private int selectBaseIndex; // 0x420
	private UserServantEntity baseUsrSvtData; // 0x428
	private long[] highRarityList; // 0x430
	private int expType; // 0x438
	private int totalExp; // 0x43C
	private int increLv; // 0x440
	private int checkLv; // 0x444
	private int getHpUpVal; // 0x448
	private int getAtkUpVal; // 0x44C
	private bool isAllUpMax; // 0x450
	private bool isSecondAllUpMax; // 0x451
	private int sellEnableRestCnt; // 0x454
	private int minimumKeep; // 0x458
	private bool isSelectMaterial; // 0x45C
	private CombineServantListViewItem.Type currentType; // 0x460
	private int dragSelectSum; // 0x464
	private int dragServantSelectSum; // 0x468
	private int dragStartIndex; // 0x46C
	private int dragEndIndex; // 0x470
	private bool isDragSelect; // 0x474
	private TimeOverChecker timeOverChecker; // 0x478
	[CompilerGeneratedAttribute] // RVA: 0xCD86C0 Offset: 0xCD86C0 VA: 0xCD86C0
	private static Comparison<CombineServantListViewItem> <>f__am$cache0; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCD86D0 Offset: 0xCD86D0 VA: 0xCD86D0
	private static Action <>f__am$cache1; // 0x48

	// Properties
	public List<CombineServantListViewObject> ObjectList { get; }
	public List<CombineServantListViewObject> ClippingObjectList { get; }
	public CombineServantListViewManager.ModeKind getModeKind { get; }

	// Methods

