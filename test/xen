
	// RVA: 0x12C8C08 Offset: 0x12C8C08 VA: 0x12C8C08 Slot: 17
	public override Decoder GetDecoder() { }

	// RVA: 0x12C8CA8 Offset: 0x12C8CA8 VA: 0x12C8CA8 Slot: 21
	public override byte[] GetPreamble() { }

	// RVA: 0x12C8DB0 Offset: 0x12C8DB0 VA: 0x12C8DB0 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x12C8E9C Offset: 0x12C8E9C VA: 0x12C8E9C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x12C813C Offset: 0x12C813C VA: 0x12C813C
	private static void CopyChars(byte* src, byte* dest, int count, bool bigEndian) { }
}

// Namespace: 
private sealed class UnicodeEncoding.UnicodeDecoder : Decoder // TypeDefIndex: 925
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x24

	// Methods

	// RVA: 0x12C8C74 Offset: 0x12C8C74 VA: 0x12C8C74
	public void .ctor(bool bigEndian) { }

	// RVA: 0x12C8EA0 Offset: 0x12C8EA0 VA: 0x12C8EA0 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Threading
internal enum AsyncFlowControlType // TypeDefIndex: 926
{
	// Fields
	public int value__; // 0x0
	public const AsyncFlowControlType None = 0;
	public const AsyncFlowControlType Execution = 1;
	public const AsyncFlowControlType Security = 2;
}

// Namespace: System.Threading
public struct AsyncFlowControl : IDisposable // TypeDefIndex: 927
{
	// Fields
	private Thread _t; // 0x0
	private AsyncFlowControlType _type; // 0x8

	// Methods

	// RVA: 0xBC04D4 Offset: 0xBC04D4 VA: 0xBC04D4
	internal void .ctor(Thread t, AsyncFlowControlType type) { }

	// RVA: 0xBC04E0 Offset: 0xBC04E0 VA: 0xBC04E0 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0xBC0510 Offset: 0xBC0510 VA: 0xBC0510
	public void Undo() { }

	// RVA: 0xBC0518 Offset: 0xBC0518 VA: 0xBC0518 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC0520 Offset: 0xBC0520 VA: 0xBC0520 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36914 Offset: 0xC36914 VA: 0xC36914
public sealed class AutoResetEvent : EventWaitHandle // TypeDefIndex: 928
{
	// Methods

	// RVA: 0x12C9510 Offset: 0x12C9510 VA: 0x12C9510
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
[Serializable]
public sealed class CompressedStack : ISerializable // TypeDefIndex: 929
{
	// Fields
	private ArrayList _list; // 0x10

	// Methods

	// RVA: 0x12C95D4 Offset: 0x12C95D4 VA: 0x12C95D4
	internal void .ctor(int length) { }

	// RVA: 0x12C9658 Offset: 0x12C9658 VA: 0x12C9658
	internal void .ctor(CompressedStack cs) { }

	[ComVisibleAttribute] // RVA: 0xC3A2C4 Offset: 0xC3A2C4 VA: 0xC3A2C4
	// RVA: 0x12C9750 Offset: 0x12C9750 VA: 0x12C9750
	public CompressedStack CreateCopy() { }

	// RVA: 0x12C97B0 Offset: 0x12C97B0 VA: 0x12C97B0
	public static CompressedStack Capture() { }

	[MonoTODOAttribute] // RVA: 0xC3A2D8 Offset: 0xC3A2D8 VA: 0xC3A2D8
	// RVA: 0x12C99E4 Offset: 0x12C99E4 VA: 0x12C99E4 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x12C9A6C Offset: 0x12C9A6C VA: 0x12C9A6C
	public static void Run(CompressedStack compressedStack, ContextCallback callback, object state) { }

	// RVA: 0x12C9FE8 Offset: 0x12C9FE8 VA: 0x12C9FE8
	internal bool IsEmpty() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36928 Offset: 0xC36928 VA: 0xC36928
public enum EventResetMode // TypeDefIndex: 930
{
	// Fields
	public int value__; // 0x0
	public const EventResetMode AutoReset = 0;
	public const EventResetMode ManualReset = 1;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC3693C Offset: 0xC3693C VA: 0xC3693C
public class EventWaitHandle : WaitHandle // TypeDefIndex: 931
{
	// Methods

	// RVA: 0x12C951C Offset: 0x12C951C VA: 0x12C951C
	public void .ctor(bool initialState, EventResetMode mode) { }

	// RVA: 0x12CA060 Offset: 0x12CA060 VA: 0x12CA060
	private bool IsManualReset(EventResetMode mode) { }

	// RVA: 0x12CA100 Offset: 0x12CA100 VA: 0x12CA100
	public bool Reset() { }

	// RVA: 0x12CA138 Offset: 0x12CA138 VA: 0x12CA138
	public bool Set() { }
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : ISerializable // TypeDefIndex: 932
{
	// Fields
	private SecurityContext _sc; // 0x10
	private bool _suppressFlow; // 0x18
	private bool _capture; // 0x19

	// Properties
	internal SecurityContext SecurityContext { get; set; }
	internal bool FlowSuppressed { get; set; }

	// Methods

	// RVA: 0x12CA170 Offset: 0x12CA170 VA: 0x12CA170
	internal void .ctor() { }

	// RVA: 0x12CA178 Offset: 0x12CA178 VA: 0x12CA178
	internal void .ctor(ExecutionContext ec) { }

	[MonoTODOAttribute] // RVA: 0xC3A310 Offset: 0xC3A310 VA: 0xC3A310
	// RVA: 0x12CA218 Offset: 0x12CA218 VA: 0x12CA218
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x12CA290 Offset: 0x12CA290 VA: 0x12CA290
	public static ExecutionContext Capture() { }

	[MonoTODOAttribute] // RVA: 0xC3A320 Offset: 0xC3A320 VA: 0xC3A320
	// RVA: 0x12CA46C Offset: 0x12CA46C VA: 0x12CA46C Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x12CA508 Offset: 0x12CA508 VA: 0x12CA508
	internal SecurityContext get_SecurityContext() { }

	// RVA: 0x12CA464 Offset: 0x12CA464 VA: 0x12CA464
	internal void set_SecurityContext(SecurityContext value) { }

	// RVA: 0x12CA45C Offset: 0x12CA45C VA: 0x12CA45C
	internal bool get_FlowSuppressed() { }

	// RVA: 0x12CA574 Offset: 0x12CA574 VA: 0x12CA574
	internal void set_FlowSuppressed(bool value) { }

	// RVA: 0x12CA580 Offset: 0x12CA580 VA: 0x12CA580
	public static bool IsFlowSuppressed() { }

	// RVA: 0x12C9338 Offset: 0x12C9338 VA: 0x12C9338
	public static void RestoreFlow() { }
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 933
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xC3A330 Offset: 0xC3A330 VA: 0xC3A330
	// RVA: 0x12CA5FC Offset: 0x12CA5FC VA: 0x12CA5FC
	public static int CompareExchange(ref int location1, int value, int comparand) { }

	// RVA: 0x12CA600 Offset: 0x12CA600 VA: 0x12CA600
	public static float CompareExchange(ref float location1, float value, float comparand) { }

	[ReliabilityContractAttribute] // RVA: 0xC3A348 Offset: 0xC3A348 VA: 0xC3A348
	// RVA: 0x12CA604 Offset: 0x12CA604 VA: 0x12CA604
	public static int Increment(ref int location) { }

	// RVA: 0x12CA608 Offset: 0x12CA608 VA: 0x12CA608
	public static long Increment(ref long location) { }

	[ReliabilityContractAttribute] // RVA: 0xC3A360 Offset: 0xC3A360 VA: 0xC3A360
	[ComVisibleAttribute] // RVA: 0xC3A360 Offset: 0xC3A360 VA: 0xC3A360
	// RVA: -1 Offset: -1
	public static T CompareExchange<T>(ref T location1, T value, T comparand) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Interlocked.CompareExchange<object>
	*/
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36950 Offset: 0xC36950 VA: 0xC36950
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 934
{
	// Methods

	// RVA: 0x12CA60C Offset: 0x12CA60C VA: 0x12CA60C
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36964 Offset: 0xC36964 VA: 0xC36964
public static class Monitor // TypeDefIndex: 935
{
	// Methods

	// RVA: 0x12CA618 Offset: 0x12CA618 VA: 0x12CA618
	private static bool Monitor_try_enter(object obj, int ms) { }

	// RVA: 0x12BB50C Offset: 0x12BB50C VA: 0x12BB50C
	public static void Enter(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0xC3A3A4 Offset: 0xC3A3A4 VA: 0xC3A3A4
	// RVA: 0x12BB510 Offset: 0x12BB510 VA: 0x12BB510
	public static void Exit(object obj) { }

	// RVA: 0x12CA61C Offset: 0x12CA61C VA: 0x12CA61C
	private static void Monitor_pulse(object obj) { }

	// RVA: 0x12CA620 Offset: 0x12CA620 VA: 0x12CA620
	private static bool Monitor_test_synchronised(object obj) { }

	// RVA: 0x12CA624 Offset: 0x12CA624 VA: 0x12CA624
	public static void Pulse(object obj) { }

	// RVA: 0x12CA718 Offset: 0x12CA718 VA: 0x12CA718
	private static void Monitor_pulse_all(object obj) { }

	// RVA: 0x12CA71C Offset: 0x12CA71C VA: 0x12CA71C
	public static void PulseAll(object obj) { }

	// RVA: 0x12CA7DC Offset: 0x12CA7DC VA: 0x12CA7DC
	public static bool TryEnter(object obj) { }

	// RVA: 0x12CA7E4 Offset: 0x12CA7E4 VA: 0x12CA7E4
	public static bool TryEnter(object obj, int millisecondsTimeout) { }

	// RVA: 0x12CA8E0 Offset: 0x12CA8E0 VA: 0x12CA8E0
	public static bool TryEnter(object obj, TimeSpan timeout) { }

	// RVA: 0x12CA9A8 Offset: 0x12CA9A8 VA: 0x12CA9A8
	private static bool Monitor_wait(object obj, int ms) { }

	// RVA: 0x12CA9AC Offset: 0x12CA9AC VA: 0x12CA9AC
	public static bool Wait(object obj) { }

	// RVA: 0x12CA9B4 Offset: 0x12CA9B4 VA: 0x12CA9B4
	public static bool Wait(object obj, int millisecondsTimeout) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36978 Offset: 0xC36978 VA: 0xC36978
public sealed class Mutex : WaitHandle // TypeDefIndex: 936
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xC3A3BC Offset: 0xC3A3BC VA: 0xC3A3BC
	// RVA: 0x12CAAC4 Offset: 0x12CAAC4 VA: 0x12CAAC4
	public void .ctor(bool initiallyOwned) { }

	// RVA: 0x12CAB64 Offset: 0x12CAB64 VA: 0x12CAB64
	private static IntPtr CreateMutex_internal(bool initiallyOwned, string name, out bool created) { }

	// RVA: 0x12CAB6C Offset: 0x12CAB6C VA: 0x12CAB6C
	private static bool ReleaseMutex_internal(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0xC3A3D4 Offset: 0xC3A3D4 VA: 0xC3A3D4
	// RVA: 0x12CAB70 Offset: 0x12CAB70 VA: 0x12CAB70
	public void ReleaseMutex() { }
}

// Namespace: System.Threading
internal sealed class NativeEventCalls // TypeDefIndex: 937
{
	// Methods

	// RVA: 0x12CA0F4 Offset: 0x12CA0F4 VA: 0x12CA0F4
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out bool created) { }

	// RVA: 0x12CA16C Offset: 0x12CA16C VA: 0x12CA16C
	public static bool SetEvent_internal(IntPtr handle) { }

	// RVA: 0x12CA134 Offset: 0x12CA134 VA: 0x12CA134
	public static bool ResetEvent_internal(IntPtr handle) { }

	// RVA: 0x12CAC0C Offset: 0x12CAC0C VA: 0x12CAC0C
	public static void CloseEvent_internal(IntPtr handle) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC3698C Offset: 0xC3698C VA: 0xC3698C
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 938
{
	// Fields
	private WaitHandle _waitObject; // 0x18
	private WaitOrTimerCallback _callback; // 0x20
	private TimeSpan _timeout; // 0x28
	private object _state; // 0x30
	private bool _executeOnlyOnce; // 0x38
	private WaitHandle _finalEvent; // 0x40
	private ManualResetEvent _cancelEvent; // 0x48
	private int _callsInProcess; // 0x50
	private bool _unregistered; // 0x54

	// Methods

	// RVA: 0x12CAFF0 Offset: 0x12CAFF0 VA: 0x12CAFF0
	internal void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce) { }

	// RVA: 0x12CB0A8 Offset: 0x12CB0A8 VA: 0x12CB0A8
	internal void Wait(object state) { }

	// RVA: 0x12CB4D0 Offset: 0x12CB4D0 VA: 0x12CB4D0
	private void DoCallBack(object timedOut) { }
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 939
{
	// Fields
	private bool notification_required; // 0x10
	[ThreadStaticAttribute] // RVA: 0xC37864 Offset: 0xC37864 VA: 0xC37864
	private static SynchronizationContext currentContext; // 0x80000000

	// Properties
	public static SynchronizationContext Current { get; }

	// Methods

	// RVA: 0x12CBA3C Offset: 0x12CBA3C VA: 0x12CBA3C
	public void .ctor() { }

	// RVA: 0x12CBA44 Offset: 0x12CBA44 VA: 0x12CBA44
	public static SynchronizationContext get_Current() { }

	// RVA: 0x12CBA98 Offset: 0x12CBA98 VA: 0x12CBA98 Slot: 4
	public virtual void OperationCompleted() { }

	// RVA: 0x12CBA9C Offset: 0x12CBA9C VA: 0x12CBA9C Slot: 5
	public virtual void OperationStarted() { }

	// RVA: 0x12CBAA0 Offset: 0x12CBAA0 VA: 0x12CBAA0 Slot: 6
	public virtual void Post(SendOrPostCallback d, object state) { }

	// RVA: 0x12CBB20 Offset: 0x12CBB20 VA: 0x12CBB20 Slot: 7
	public virtual void Send(SendOrPostCallback d, object state) { }

	// RVA: 0x12CBB58 Offset: 0x12CBB58 VA: 0x12CBB58
	public static void SetSynchronizationContext(SynchronizationContext syncContext) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC369A0 Offset: 0xC369A0 VA: 0xC369A0
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 940
{
	// Methods

	// RVA: 0x12CBBB0 Offset: 0x12CBBB0 VA: 0x12CBBB0
	public void .ctor() { }

	// RVA: 0x12CA6E4 Offset: 0x12CA6E4 VA: 0x12CA6E4
	public void .ctor(string message) { }

	// RVA: 0x12CBC18 Offset: 0x12CBC18 VA: 0x12CBC18
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ClassInterfaceAttribute] // RVA: 0xC369B4 Offset: 0xC369B4 VA: 0xC369B4
[ComDefaultInterfaceAttribute] // RVA: 0xC369B4 Offset: 0xC369B4 VA: 0xC369B4
[ComVisibleAttribute] // RVA: 0xC369B4 Offset: 0xC369B4 VA: 0xC369B4
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 941
{
	// Fields
	private int lock_thread_id; // 0x10
	private IntPtr system_thread_handle; // 0x18
	private object cached_culture_info; // 0x20
	private IntPtr unused0; // 0x28
	private bool threadpool_thread; // 0x30
	private IntPtr name; // 0x38
	private int name_len; // 0x40
	private ThreadState state; // 0x44
	private object abort_exc; // 0x48
	private int abort_state_handle; // 0x50
	private long thread_id; // 0x58
	private IntPtr start_notify; // 0x60
	private IntPtr stack_ptr; // 0x68
	private UIntPtr static_data; // 0x70
	private IntPtr jit_data; // 0x78
	private IntPtr lock_data; // 0x80
	private object current_appcontext; // 0x88
	private int stack_size; // 0x90
	private object start_obj; // 0x98
	private IntPtr appdomain_refs; // 0xA0
	private int interruption_requested; // 0xA8
	private IntPtr suspend_event; // 0xB0
	private IntPtr suspended_event; // 0xB8
	private IntPtr resume_event; // 0xC0
	private IntPtr synch_cs; // 0xC8
	private IntPtr serialized_culture_info; // 0xD0
	private int serialized_culture_info_len; // 0xD8
	private IntPtr serialized_ui_culture_info; // 0xE0
	private int serialized_ui_culture_info_len; // 0xE8
	private bool thread_dump_requested; // 0xEC
	private IntPtr end_stack; // 0xF0
	private bool thread_interrupt_requested; // 0xF8
	private byte apartment_state; // 0xF9
	private int critical_region_level; // 0xFC
	private int small_id; // 0x100
	private IntPtr manage_callback; // 0x108
	private object pending_exception; // 0x110
	private ExecutionContext ec_to_set; // 0x118
	private IntPtr interrupt_on_stop; // 0x120
	private IntPtr unused3; // 0x128
	private IntPtr unused4; // 0x130
	private IntPtr unused5; // 0x138
	private IntPtr unused6; // 0x140
	[ThreadStaticAttribute] // RVA: 0xC37874 Offset: 0xC37874 VA: 0xC37874
	private static object[] local_slots; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0xC37884 Offset: 0xC37884 VA: 0xC37884
	private static ExecutionContext _ec; // 0x80000008
	private MulticastDelegate threadstart; // 0x148
	private int managed_id; // 0x150
	private IPrincipal _principal; // 0x158
	private static Hashtable datastorehash; // 0x0
	private static object datastore_lock; // 0x8
	private bool in_currentculture; // 0x160
	private static object culture_lock; // 0x10

	// Properties
	public static Context CurrentContext { get; }
	public static IPrincipal CurrentPrincipal { get; set; }
	public static Thread CurrentThread { get; }
	public CultureInfo CurrentCulture { get; set; }
	public CultureInfo CurrentUICulture { get; }
	public bool IsAlive { get; }
	public bool IsBackground { set; }
	public string Name { set; }
	public ThreadState ThreadState { get; }
	[MonoTODOAttribute] // RVA: 0xC3B590 Offset: 0xC3B590 VA: 0xC3B590
	public ExecutionContext ExecutionContext { get; }
	public int ManagedThreadId { get; }

	// Methods

	// RVA: 0x12CBC20 Offset: 0x12CBC20 VA: 0x12CBC20
	public void .ctor(ThreadStart start) { }

	// RVA: 0x12CBCD4 Offset: 0x12CBCD4 VA: 0x12CBCD4
	public void .ctor(ParameterizedThreadStart start) { }

	// RVA: 0x12CBD84 Offset: 0x12CBD84 VA: 0x12CBD84
	private static void .cctor() { }

	// RVA: 0x12CBE18 Offset: 0x12CBE18 VA: 0x12CBE18
	public static Context get_CurrentContext() { }

	// RVA: 0x12CBE20 Offset: 0x12CBE20 VA: 0x12CBE20
	public static IPrincipal get_CurrentPrincipal() { }

	// RVA: 0x12CBF3C Offset: 0x12CBF3C VA: 0x12CBF3C
	public static void set_CurrentPrincipal(IPrincipal value) { }

	// RVA: 0x12CC004 Offset: 0x12CC004 VA: 0x12CC004
	private static Thread CurrentThread_internal() { }

	[ReliabilityContractAttribute] // RVA: 0xC3A3EC Offset: 0xC3A3EC VA: 0xC3A3EC
	// RVA: 0x12C9908 Offset: 0x12C9908 VA: 0x12C9908
	public static Thread get_CurrentThread() { }

	// RVA: 0x12CC008 Offset: 0x12CC008 VA: 0x12CC008
	internal static void FreeLocalSlotValues(int slot, bool thread_local) { }

	// RVA: 0x12CBF34 Offset: 0x12CBF34 VA: 0x12CBF34
	public static AppDomain GetDomain() { }

	// RVA: 0x12CC010 Offset: 0x12CC010 VA: 0x12CC010
	public static int GetDomainID() { }

	// RVA: 0x12CC014 Offset: 0x12CC014 VA: 0x12CC014
	private static void ResetAbort_internal() { }

	// RVA: 0x12CC018 Offset: 0x12CC018 VA: 0x12CC018
	public static void ResetAbort() { }

	// RVA: 0x12CC074 Offset: 0x12CC074 VA: 0x12CC074
	private static void Sleep_internal(int ms) { }

	// RVA: 0x12CC078 Offset: 0x12CC078 VA: 0x12CC078
	public static void Sleep(int millisecondsTimeout) { }

	// RVA: 0x12CC134 Offset: 0x12CC134 VA: 0x12CC134
	private IntPtr Thread_internal(MulticastDelegate start) { }

	// RVA: 0x12CBCD0 Offset: 0x12CBCD0 VA: 0x12CBCD0
	private void Thread_init() { }

	// RVA: 0x12CC138 Offset: 0x12CC138 VA: 0x12CC138
	private CultureInfo GetCachedCurrentCulture() { }

	// RVA: 0x12CC13C Offset: 0x12CC13C VA: 0x12CC13C
	private byte[] GetSerializedCurrentCulture() { }

	// RVA: 0x12CC140 Offset: 0x12CC140 VA: 0x12CC140
	private void SetCachedCurrentCulture(CultureInfo culture) { }

	// RVA: 0x12CC144 Offset: 0x12CC144 VA: 0x12CC144
	private void SetSerializedCurrentCulture(byte[] culture) { }

	// RVA: 0x12CC148 Offset: 0x12CC148 VA: 0x12CC148
	private CultureInfo GetCachedCurrentUICulture() { }

	// RVA: 0x12CC14C Offset: 0x12CC14C VA: 0x12CC14C
	private byte[] GetSerializedCurrentUICulture() { }

	// RVA: 0x12CC150 Offset: 0x12CC150 VA: 0x12CC150
	private void SetCachedCurrentUICulture(CultureInfo culture) { }

	// RVA: 0x12CC154 Offset: 0x12CC154 VA: 0x12CC154
	public CultureInfo get_CurrentCulture() { }

	// RVA: 0x12CC4A0 Offset: 0x12CC4A0 VA: 0x12CC4A0
	public void set_CurrentCulture(CultureInfo value) { }

	// RVA: 0x12CC6B0 Offset: 0x12CC6B0 VA: 0x12CC6B0
	public CultureInfo get_CurrentUICulture() { }

	// RVA: 0x12CC9A8 Offset: 0x12CC9A8 VA: 0x12CC9A8
	public bool get_IsAlive() { }

	// RVA: 0x12CC9E0 Offset: 0x12CC9E0 VA: 0x12CC9E0
	public void set_IsBackground(bool value) { }

	// RVA: 0x12CC9FC Offset: 0x12CC9FC VA: 0x12CC9FC
	private void SetName_internal(string name) { }

	// RVA: 0x12CCA00 Offset: 0x12CCA00 VA: 0x12CCA00
	public void set_Name(string value) { }

	// RVA: 0x12CCA04 Offset: 0x12CCA04 VA: 0x12CCA04
	public ThreadState get_ThreadState() { }

	// RVA: 0x12CCA08 Offset: 0x12CCA08 VA: 0x12CCA08
	private void Abort_internal(object stateInfo) { }

	// RVA: 0x12CCA0C Offset: 0x12CCA0C VA: 0x12CCA0C
	public void Abort() { }

	// RVA: 0x12CCA14 Offset: 0x12CCA14 VA: 0x12CCA14
	private void Interrupt_internal() { }

	// RVA: 0x12CCA18 Offset: 0x12CCA18 VA: 0x12CCA18
	public void Interrupt() { }

	// RVA: 0x12CCA1C Offset: 0x12CCA1C VA: 0x12CCA1C
	public void Start() { }

	// RVA: 0x12CCB4C Offset: 0x12CCB4C VA: 0x12CCB4C
	private void Thread_free_internal(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0xC3A404 Offset: 0xC3A404 VA: 0xC3A404
	// RVA: 0x12CCB50 Offset: 0x12CCB50 VA: 0x12CCB50 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x12CC9F4 Offset: 0x12CC9F4 VA: 0x12CC9F4
	private void SetState(ThreadState set) { }

	// RVA: 0x12CC9F8 Offset: 0x12CC9F8 VA: 0x12CC9F8
	private void ClrState(ThreadState clr) { }

	// RVA: 0x12CC9DC Offset: 0x12CC9DC VA: 0x12CC9DC
	private ThreadState GetState() { }

	// RVA: 0x12CCBC8 Offset: 0x12CCBC8 VA: 0x12CCBC8
	private static int GetNewManagedId() { }

	// RVA: 0x12CCC24 Offset: 0x12CCC24 VA: 0x12CCC24
	private static int GetNewManagedId_internal() { }

	[ReliabilityContractAttribute] // RVA: 0xC3A41C Offset: 0xC3A41C VA: 0xC3A41C
	// RVA: 0x12CA380 Offset: 0x12CA380 VA: 0x12CA380
	public ExecutionContext get_ExecutionContext() { }

	[ReliabilityContractAttribute] // RVA: 0xC3A434 Offset: 0xC3A434 VA: 0xC3A434
	// RVA: 0x12CCC28 Offset: 0x12CCC28 VA: 0x12CCC28
	public int get_ManagedThreadId() { }

	[ComVisibleAttribute] // RVA: 0xC3A44C Offset: 0xC3A44C VA: 0xC3A44C
	// RVA: 0x12CCCAC Offset: 0x12CCCAC VA: 0x12CCCAC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x12CCCB0 Offset: 0x12CCCB0 VA: 0x12CCCB0
	public void Start(object parameter) { }

	[ObsoleteAttribute] // RVA: 0xC3A460 Offset: 0xC3A460 VA: 0xC3A460
	// RVA: 0x12C9964 Offset: 0x12C9964 VA: 0x12C9964
	public CompressedStack GetCompressedStack() { }

	[ObsoleteAttribute] // RVA: 0xC3A498 Offset: 0xC3A498 VA: 0xC3A498
	// RVA: 0x12C9BFC Offset: 0x12C9BFC VA: 0x12C9BFC
	public void SetCompressedStack(CompressedStack stack) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36A40 Offset: 0xC36A40 VA: 0xC36A40
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 942
{
	// Methods

	// RVA: 0x12CCCB8 Offset: 0x12CCCB8 VA: 0x12CCCB8
	private void .ctor() { }

	// RVA: 0x12CCD38 Offset: 0x12CCD38 VA: 0x12CCD38
	private void .ctor(SerializationInfo info, StreamingContext sc) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36A54 Offset: 0xC36A54 VA: 0xC36A54
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 943
{
	// Methods

	// RVA: 0x12CCD40 Offset: 0x12CCD40 VA: 0x12CCD40
	public void .ctor() { }

	// RVA: 0x12CCDA8 Offset: 0x12CCDA8 VA: 0x12CCDA8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 944
{
	// Methods

	// RVA: 0x12CCDB0 Offset: 0x12CCDB0 VA: 0x12CCDB0
	public static bool QueueUserWorkItem(WaitCallback callBack) { }

	// RVA: 0x12CB41C Offset: 0x12CB41C VA: 0x12CB41C
	public static bool QueueUserWorkItem(WaitCallback callBack, object state) { }

	// RVA: 0x12CCDB8 Offset: 0x12CCDB8 VA: 0x12CCDB8
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce) { }

	// RVA: 0x12CCF40 Offset: 0x12CCF40 VA: 0x12CCF40
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36A68 Offset: 0xC36A68 VA: 0xC36A68
[FlagsAttribute] // RVA: 0xC36A68 Offset: 0xC36A68 VA: 0xC36A68
[Serializable]
public enum ThreadState // TypeDefIndex: 945
{
	// Fields
	public int value__; // 0x0
	public const ThreadState Running = 0;
	public const ThreadState StopRequested = 1;
	public const ThreadState SuspendRequested = 2;
	public const ThreadState Background = 4;
	public const ThreadState Unstarted = 8;
	public const ThreadState Stopped = 16;
	public const ThreadState WaitSleepJoin = 32;
	public const ThreadState Suspended = 64;
	public const ThreadState AbortRequested = 128;
	public const ThreadState Aborted = 256;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36AA4 Offset: 0xC36AA4 VA: 0xC36AA4
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 946
{
	// Methods

	// RVA: 0x12CD1F0 Offset: 0x12CD1F0 VA: 0x12CD1F0
	public void .ctor() { }

	// RVA: 0x12CD258 Offset: 0x12CD258 VA: 0x12CD258
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36AB8 Offset: 0xC36AB8 VA: 0xC36AB8
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 947
{
	// Fields
	private static Timer.Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0x18
	private object state; // 0x20
	private long due_time_ms; // 0x28
	private long period_ms; // 0x30
	private long next_run; // 0x38
	private bool disposed; // 0x40

	// Methods

	// RVA: 0x12CD260 Offset: 0x12CD260 VA: 0x12CD260
	public void .ctor(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x12CD398 Offset: 0x12CD398 VA: 0x12CD398
	private static void .cctor() { }

	// RVA: 0x12CD2DC Offset: 0x12CD2DC VA: 0x12CD2DC
	private void Init(TimerCallback callback, object state, long dueTime, long period) { }

	// RVA: 0x12CD63C Offset: 0x12CD63C VA: 0x12CD63C
	public bool Change(TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x12CD6A0 Offset: 0x12CD6A0 VA: 0x12CD6A0 Slot: 6
	public void Dispose() { }

	// RVA: 0x12CD474 Offset: 0x12CD474 VA: 0x12CD474
	private bool Change(long dueTime, long period, bool first) { }
}

// Namespace: 
private sealed class Timer.TimerComparer : IComparer // TypeDefIndex: 948
{
	// Methods

	// RVA: 0x12CDA14 Offset: 0x12CDA14 VA: 0x12CDA14
	public void .ctor() { }

	// RVA: 0x12CE40C Offset: 0x12CE40C VA: 0x12CE40C Slot: 4
	public int Compare(object x, object y) { }
}

// Namespace: 
private sealed class Timer.Scheduler // TypeDefIndex: 949
{
	// Fields
	private static Timer.Scheduler instance; // 0x0
	private SortedList list; // 0x10

	// Properties
	public static Timer.Scheduler Instance { get; }

	// Methods

	// RVA: 0x12CD900 Offset: 0x12CD900 VA: 0x12CD900
	private void .ctor() { }

	// RVA: 0x12CDA1C Offset: 0x12CDA1C VA: 0x12CDA1C
	private static void .cctor() { }

	// RVA: 0x12CD40C Offset: 0x12CD40C VA: 0x12CD40C
	public static Timer.Scheduler get_Instance() { }

	// RVA: 0x12CD73C Offset: 0x12CD73C VA: 0x12CD73C
	public void Remove(Timer timer) { }

	// RVA: 0x12CD7DC Offset: 0x12CD7DC VA: 0x12CD7DC
	public void Change(Timer timer, long new_next_run) { }

	// RVA: 0x12CDB00 Offset: 0x12CDB00 VA: 0x12CDB00
	private void Add(Timer timer) { }

	// RVA: 0x12CDA7C Offset: 0x12CDA7C VA: 0x12CDA7C
	private int InternalRemove(Timer timer) { }

	// RVA: 0x12CDCC0 Offset: 0x12CDCC0 VA: 0x12CDCC0
	private void SchedulerThread() { }

	// RVA: 0x12CE360 Offset: 0x12CE360 VA: 0x12CE360
	private void ShrinkIfNeeded(ArrayList list, int initial) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC36ACC Offset: 0xC36ACC VA: 0xC36ACC
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 950
{
	// Fields
	public const int WaitTimeout = 258;
	private SafeWaitHandle safe_wait_handle; // 0x18
	protected static readonly IntPtr InvalidHandle; // 0x0
	private bool disposed; // 0x20

	// Properties
	[ObsoleteAttribute] // RVA: 0xC3B5C8 Offset: 0xC3B5C8 VA: 0xC3B5C8
	public virtual IntPtr Handle { get; set; }

	// Methods

	// RVA: 0x12F8FC8 Offset: 0x12F8FC8 VA: 0x12F8FC8
	protected void .ctor() { }

	// RVA: 0x12F8FD0 Offset: 0x12F8FD0 VA: 0x12F8FD0
	private static void .cctor() { }

	// RVA: 0x12F902C Offset: 0x12F902C VA: 0x12F902C Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x12F9060 Offset: 0x12F9060 VA: 0x12F9060
	private static void CheckArray(WaitHandle[] handles, bool waitAll) { }

	// RVA: 0x12F91DC Offset: 0x12F91DC VA: 0x12F91DC
	private static int WaitAny_internal(WaitHandle[] handles, int ms, bool exitContext) { }

	[ReliabilityContractAttribute] // RVA: 0xC3A4D0 Offset: 0xC3A4D0 VA: 0xC3A4D0
	// RVA: 0x12F91E4 Offset: 0x12F91E4 VA: 0x12F91E4
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext) { }

	// RVA: 0x12F93A8 Offset: 0x12F93A8 VA: 0x12F93A8 Slot: 7
	public virtual IntPtr get_Handle() { }

	// RVA: 0x12F93D8 Offset: 0x12F93D8 VA: 0x12F93D8 Slot: 8
	public virtual void set_Handle(IntPtr value) { }

	// RVA: 0x12F94CC Offset: 0x12F94CC VA: 0x12F94CC
	private bool WaitOne_internal(IntPtr handle, int ms, bool exitContext) { }

	// RVA: 0x12F94D4 Offset: 0x12F94D4 VA: 0x12F94D4 Slot: 9
	protected virtual void Dispose(bool explicitDisposing) { }

	// RVA: 0x12F9578 Offset: 0x12F9578 VA: 0x12F9578 Slot: 10
	public virtual bool WaitOne() { }

	// RVA: 0x12F9758 Offset: 0x12F9758 VA: 0x12F9758 Slot: 11
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext) { }

	// RVA: 0x12F9924 Offset: 0x12F9924 VA: 0x12F9924 Slot: 12
	public virtual bool WaitOne(int millisecondsTimeout) { }

	// RVA: 0x12F9934 Offset: 0x12F9934 VA: 0x12F9934 Slot: 13
	public virtual bool WaitOne(TimeSpan timeout) { }

	// RVA: 0x12F9948 Offset: 0x12F9948 VA: 0x12F9948 Slot: 14
	public virtual bool WaitOne(TimeSpan timeout, bool exitContext) { }

	// RVA: 0x12F9698 Offset: 0x12F9698 VA: 0x12F9698
	internal void CheckDisposed() { }

	// RVA: 0x12F9B30 Offset: 0x12F9B30 VA: 0x12F9B30 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36AE0 Offset: 0xC36AE0 VA: 0xC36AE0
[Serializable]
public class AccessViolationException : SystemException // TypeDefIndex: 951
{
	// Methods

	// RVA: 0x10C9DDC Offset: 0x10C9DDC VA: 0x10C9DDC
	public void .ctor() { }

	// RVA: 0x10C9E50 Offset: 0x10C9E50 VA: 0x10C9E50
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36AF4 Offset: 0xC36AF4 VA: 0xC36AF4
[Serializable]
public sealed class ActivationContext : IDisposable, ISerializable // TypeDefIndex: 952
{
	// Fields
	private bool _disposed; // 0x10

	// Methods

	[MonoTODOAttribute] // RVA: 0xC3A4E8 Offset: 0xC3A4E8 VA: 0xC3A4E8
	// RVA: 0x10C9E58 Offset: 0x10C9E58 VA: 0x10C9E58 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x10C9EDC Offset: 0x10C9EDC VA: 0x10C9EDC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10C9F08 Offset: 0x10C9F08 VA: 0x10C9F08 Slot: 4
	public void Dispose() { }

	// RVA: 0x10C9EF4 Offset: 0x10C9EF4 VA: 0x10C9EF4
	private void Dispose(bool disposing) { }
}

// Namespace: System
[ComDefaultInterfaceAttribute] // RVA: 0xC36B08 Offset: 0xC36B08 VA: 0xC36B08
[ClassInterfaceAttribute] // RVA: 0xC36B08 Offset: 0xC36B08 VA: 0xC36B08
[ComVisibleAttribute] // RVA: 0xC36B08 Offset: 0xC36B08 VA: 0xC36B08
public sealed class Activator : _Activator // TypeDefIndex: 953
{
	// Methods

	// RVA: -1 Offset: -1
	public static T CreateInstance<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2190420 Offset: 0x2190420 VA: 0x2190420
	|-Activator.CreateInstance<int>
	|
	|-RVA: 0x21904C8 Offset: 0x21904C8 VA: 0x21904C8
	|-Activator.CreateInstance<object>
	*/

	// RVA: 0x10C9F20 Offset: 0x10C9F20 VA: 0x10C9F20
	public static object CreateInstance(Type type) { }

	// RVA: 0x10CA1C0 Offset: 0x10CA1C0 VA: 0x10CA1C0
	public static object CreateInstance(Type type, object[] args) { }

	// RVA: 0x10CA22C Offset: 0x10CA22C VA: 0x10CA22C
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes) { }

	// RVA: 0x10CA2BC Offset: 0x10CA2BC VA: 0x10CA2BC
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes) { }

	// RVA: 0x10C9F28 Offset: 0x10C9F28 VA: 0x10C9F28
	public static object CreateInstance(Type type, bool nonPublic) { }

	// RVA: 0x10CA9AC Offset: 0x10CA9AC VA: 0x10CA9AC
	private static void CheckType(Type type) { }

	// RVA: 0x10CAC14 Offset: 0x10CAC14 VA: 0x10CAC14
	private static void CheckAbstractType(Type type) { }

	// RVA: 0x10CAC10 Offset: 0x10CAC10 VA: 0x10CAC10
	internal static object CreateInstanceInternal(Type type) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36B94 Offset: 0xC36B94 VA: 0xC36B94
[ClassInterfaceAttribute] // RVA: 0xC36B94 Offset: 0xC36B94 VA: 0xC36B94
public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 954
{
	// Fields
	private IntPtr _mono_app_domain; // 0x18
	private static string _process_guid; // 0x0
	[ThreadStaticAttribute] // RVA: 0xC37894 Offset: 0xC37894 VA: 0xC37894
	private static Hashtable type_resolve_in_progress; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0xC378A4 Offset: 0xC378A4 VA: 0xC378A4
	private static Hashtable assembly_resolve_in_progress; // 0x80000008
	[ThreadStaticAttribute] // RVA: 0xC378B4 Offset: 0xC378B4 VA: 0xC378B4
	private static Hashtable assembly_resolve_in_progress_refonly; // 0x80000010
	private Evidence _evidence; // 0x20
	private PermissionSet _granted; // 0x28
	private PrincipalPolicy _principalPolicy; // 0x30
	[ThreadStaticAttribute] // RVA: 0xC378C4 Offset: 0xC378C4 VA: 0xC378C4
	private static IPrincipal _principal; // 0x80000018
	private static AppDomain default_domain; // 0x8
	private AppDomainManager _domain_manager; // 0x38
	private ActivationContext _activation; // 0x40
	private ApplicationIdentity _applicationIdentity; // 0x48
	private AssemblyLoadEventHandler AssemblyLoad; // 0x50
	private ResolveEventHandler AssemblyResolve; // 0x58
	private EventHandler DomainUnload; // 0x60
	private EventHandler ProcessExit; // 0x68
	private ResolveEventHandler ResourceResolve; // 0x70
	private ResolveEventHandler TypeResolve; // 0x78
	private UnhandledExceptionEventHandler UnhandledException; // 0x80
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x88

	// Properties
	public string FriendlyName { get; }
	internal IPrincipal DefaultPrincipal { get; }
	internal PermissionSet GrantedPermissionSet { get; }
	public static AppDomain CurrentDomain { get; }
	public AppDomainManager DomainManager { get; }

	// Methods

	// RVA: 0x10CAD30 Offset: 0x10CAD30 VA: 0x10CAD30
	private void .ctor() { }

	// RVA: 0x10CAD38 Offset: 0x10CAD38 VA: 0x10CAD38
	public void add_AssemblyLoad(AssemblyLoadEventHandler value) { }

	// RVA: 0x10CADFC Offset: 0x10CADFC VA: 0x10CADFC
