
	[CLSCompliantAttribute] // RVA: 0xBCE148 Offset: 0xBCE148 VA: 0xBCE148
	[ComVisibleAttribute] // RVA: 0xBCE148 Offset: 0xBCE148 VA: 0xBCE148
	// RVA: 0x27CAF10 Offset: 0x27CAF10 VA: 0x27CAF10 Slot: 27
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x27CAB98 Offset: 0x27CAB98 VA: 0x27CAB98
	private int GetBytesInternal(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x27CB2B4 Offset: 0x27CB2B4 VA: 0x27CB2B4 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x27CB41C Offset: 0x27CB41C VA: 0x27CB41C Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	[ComVisibleAttribute] // RVA: 0xBCE188 Offset: 0xBCE188 VA: 0xBCE188
	// RVA: 0x27CB784 Offset: 0x27CB784 VA: 0x27CB784 Slot: 22
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x27CB690 Offset: 0x27CB690 VA: 0x27CB690
	private int GetCharsInternal(byte* bytes, int byteCount, char* chars, int charCount) { }

	// RVA: 0x27CB990 Offset: 0x27CB990 VA: 0x27CB990 Slot: 19
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x27CBA4C Offset: 0x27CBA4C VA: 0x27CBA4C Slot: 20
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x27CBB08 Offset: 0x27CBB08 VA: 0x27CBB08 Slot: 17
	public override Decoder GetDecoder() { }

	// RVA: 0x27CBBA8 Offset: 0x27CBBA8 VA: 0x27CBBA8 Slot: 21
	public override byte[] GetPreamble() { }

	// RVA: 0x27CBCB0 Offset: 0x27CBCB0 VA: 0x27CBCB0 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27CBD9C Offset: 0x27CBD9C VA: 0x27CBD9C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x27CB03C Offset: 0x27CB03C VA: 0x27CB03C
	private static void CopyChars(byte* src, byte* dest, int count, bool bigEndian) { }
}

// Namespace: 
private sealed class UnicodeEncoding.UnicodeDecoder : Decoder // TypeDefIndex: 925
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x24

	// Methods

	// RVA: 0x27CBB74 Offset: 0x27CBB74 VA: 0x27CBB74
	public void .ctor(bool bigEndian) { }

	// RVA: 0x27CBDA0 Offset: 0x27CBDA0 VA: 0x27CBDA0 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Threading
internal enum AsyncFlowControlType // TypeDefIndex: 926
{
	// Fields
	public int value__; // 0x0
	public const AsyncFlowControlType None = 0;
	public const AsyncFlowControlType Execution = 1;
	public const AsyncFlowControlType Security = 2;
}

// Namespace: System.Threading
public struct AsyncFlowControl : IDisposable // TypeDefIndex: 927
{
	// Fields
	private Thread _t; // 0x0
	private AsyncFlowControlType _type; // 0x8

	// Methods

	// RVA: 0xD72F74 Offset: 0xD72F74 VA: 0xD72F74
	internal void .ctor(Thread t, AsyncFlowControlType type) { }

	// RVA: 0xD72F80 Offset: 0xD72F80 VA: 0xD72F80 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0xD72FB0 Offset: 0xD72FB0 VA: 0xD72FB0
	public void Undo() { }

	// RVA: 0xD72FB8 Offset: 0xD72FB8 VA: 0xD72FB8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD72FC0 Offset: 0xD72FC0 VA: 0xD72FC0 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA7EC Offset: 0xBCA7EC VA: 0xBCA7EC
public sealed class AutoResetEvent : EventWaitHandle // TypeDefIndex: 928
{
	// Methods

	// RVA: 0x27CC410 Offset: 0x27CC410 VA: 0x27CC410
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
[Serializable]
public sealed class CompressedStack : ISerializable // TypeDefIndex: 929
{
	// Fields
	private ArrayList _list; // 0x10

	// Methods

	// RVA: 0x27CC4D4 Offset: 0x27CC4D4 VA: 0x27CC4D4
	internal void .ctor(int length) { }

	// RVA: 0x27CC558 Offset: 0x27CC558 VA: 0x27CC558
	internal void .ctor(CompressedStack cs) { }

	[ComVisibleAttribute] // RVA: 0xBCE19C Offset: 0xBCE19C VA: 0xBCE19C
	// RVA: 0x27CC650 Offset: 0x27CC650 VA: 0x27CC650
	public CompressedStack CreateCopy() { }

	// RVA: 0x27CC6B0 Offset: 0x27CC6B0 VA: 0x27CC6B0
	public static CompressedStack Capture() { }

	[MonoTODOAttribute] // RVA: 0xBCE1B0 Offset: 0xBCE1B0 VA: 0xBCE1B0
	// RVA: 0x27CC8E4 Offset: 0x27CC8E4 VA: 0x27CC8E4 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27CC96C Offset: 0x27CC96C VA: 0x27CC96C
	public static void Run(CompressedStack compressedStack, ContextCallback callback, object state) { }

	// RVA: 0x27CCEE8 Offset: 0x27CCEE8 VA: 0x27CCEE8
	internal bool IsEmpty() { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA800 Offset: 0xBCA800 VA: 0xBCA800
public enum EventResetMode // TypeDefIndex: 930
{
	// Fields
	public int value__; // 0x0
	public const EventResetMode AutoReset = 0;
	public const EventResetMode ManualReset = 1;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA814 Offset: 0xBCA814 VA: 0xBCA814
public class EventWaitHandle : WaitHandle // TypeDefIndex: 931
{
	// Methods

	// RVA: 0x27CC41C Offset: 0x27CC41C VA: 0x27CC41C
	public void .ctor(bool initialState, EventResetMode mode) { }

	// RVA: 0x27CCF60 Offset: 0x27CCF60 VA: 0x27CCF60
	private bool IsManualReset(EventResetMode mode) { }

	// RVA: 0x27CD000 Offset: 0x27CD000 VA: 0x27CD000
	public bool Reset() { }

	// RVA: 0x27CD038 Offset: 0x27CD038 VA: 0x27CD038
	public bool Set() { }
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : ISerializable // TypeDefIndex: 932
{
	// Fields
	private SecurityContext _sc; // 0x10
	private bool _suppressFlow; // 0x18
	private bool _capture; // 0x19

	// Properties
	internal SecurityContext SecurityContext { get; set; }
	internal bool FlowSuppressed { get; set; }

	// Methods

	// RVA: 0x27CD070 Offset: 0x27CD070 VA: 0x27CD070
	internal void .ctor() { }

	// RVA: 0x27CD078 Offset: 0x27CD078 VA: 0x27CD078
	internal void .ctor(ExecutionContext ec) { }

	[MonoTODOAttribute] // RVA: 0xBCE1E8 Offset: 0xBCE1E8 VA: 0xBCE1E8
	// RVA: 0x27CD118 Offset: 0x27CD118 VA: 0x27CD118
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27CD190 Offset: 0x27CD190 VA: 0x27CD190
	public static ExecutionContext Capture() { }

	[MonoTODOAttribute] // RVA: 0xBCE1F8 Offset: 0xBCE1F8 VA: 0xBCE1F8
	// RVA: 0x27CD36C Offset: 0x27CD36C VA: 0x27CD36C Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27CD408 Offset: 0x27CD408 VA: 0x27CD408
	internal SecurityContext get_SecurityContext() { }

	// RVA: 0x27CD364 Offset: 0x27CD364 VA: 0x27CD364
	internal void set_SecurityContext(SecurityContext value) { }

	// RVA: 0x27CD35C Offset: 0x27CD35C VA: 0x27CD35C
	internal bool get_FlowSuppressed() { }

	// RVA: 0x27CD474 Offset: 0x27CD474 VA: 0x27CD474
	internal void set_FlowSuppressed(bool value) { }

	// RVA: 0x27CD480 Offset: 0x27CD480 VA: 0x27CD480
	public static bool IsFlowSuppressed() { }

	// RVA: 0x27CC238 Offset: 0x27CC238 VA: 0x27CC238
	public static void RestoreFlow() { }
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 933
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xBCE208 Offset: 0xBCE208 VA: 0xBCE208
	// RVA: 0x27CD4FC Offset: 0x27CD4FC VA: 0x27CD4FC
	public static int CompareExchange(ref int location1, int value, int comparand) { }

	// RVA: 0x27CD500 Offset: 0x27CD500 VA: 0x27CD500
	public static float CompareExchange(ref float location1, float value, float comparand) { }

	[ReliabilityContractAttribute] // RVA: 0xBCE220 Offset: 0xBCE220 VA: 0xBCE220
	// RVA: 0x27CD504 Offset: 0x27CD504 VA: 0x27CD504
	public static int Increment(ref int location) { }

	// RVA: 0x27CD508 Offset: 0x27CD508 VA: 0x27CD508
	public static long Increment(ref long location) { }

	[ReliabilityContractAttribute] // RVA: 0xBCE238 Offset: 0xBCE238 VA: 0xBCE238
	[ComVisibleAttribute] // RVA: 0xBCE238 Offset: 0xBCE238 VA: 0xBCE238
	// RVA: -1 Offset: -1
	public static T CompareExchange<T>(ref T location1, T value, T comparand) { }
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-Interlocked.CompareExchange<object>
	*/
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA828 Offset: 0xBCA828 VA: 0xBCA828
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 934
{
	// Methods

	// RVA: 0x27CD50C Offset: 0x27CD50C VA: 0x27CD50C
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA83C Offset: 0xBCA83C VA: 0xBCA83C
public static class Monitor // TypeDefIndex: 935
{
	// Methods

	// RVA: 0x27CD518 Offset: 0x27CD518 VA: 0x27CD518
	private static bool Monitor_try_enter(object obj, int ms) { }

	// RVA: 0x27BE40C Offset: 0x27BE40C VA: 0x27BE40C
	public static void Enter(object obj) { }

	[ReliabilityContractAttribute] // RVA: 0xBCE27C Offset: 0xBCE27C VA: 0xBCE27C
	// RVA: 0x27BE410 Offset: 0x27BE410 VA: 0x27BE410
	public static void Exit(object obj) { }

	// RVA: 0x27CD51C Offset: 0x27CD51C VA: 0x27CD51C
	private static void Monitor_pulse(object obj) { }

	// RVA: 0x27CD520 Offset: 0x27CD520 VA: 0x27CD520
	private static bool Monitor_test_synchronised(object obj) { }

	// RVA: 0x27CD524 Offset: 0x27CD524 VA: 0x27CD524
	public static void Pulse(object obj) { }

	// RVA: 0x27CD618 Offset: 0x27CD618 VA: 0x27CD618
	private static void Monitor_pulse_all(object obj) { }

	// RVA: 0x27CD61C Offset: 0x27CD61C VA: 0x27CD61C
	public static void PulseAll(object obj) { }

	// RVA: 0x27CD6DC Offset: 0x27CD6DC VA: 0x27CD6DC
	public static bool TryEnter(object obj) { }

	// RVA: 0x27CD6E4 Offset: 0x27CD6E4 VA: 0x27CD6E4
	public static bool TryEnter(object obj, int millisecondsTimeout) { }

	// RVA: 0x27CD7E0 Offset: 0x27CD7E0 VA: 0x27CD7E0
	public static bool TryEnter(object obj, TimeSpan timeout) { }

	// RVA: 0x27CD8A8 Offset: 0x27CD8A8 VA: 0x27CD8A8
	private static bool Monitor_wait(object obj, int ms) { }

	// RVA: 0x27CD8AC Offset: 0x27CD8AC VA: 0x27CD8AC
	public static bool Wait(object obj) { }

	// RVA: 0x27CD8B4 Offset: 0x27CD8B4 VA: 0x27CD8B4
	public static bool Wait(object obj, int millisecondsTimeout) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA850 Offset: 0xBCA850 VA: 0xBCA850
public sealed class Mutex : WaitHandle // TypeDefIndex: 936
{
	// Methods

	[ReliabilityContractAttribute] // RVA: 0xBCE294 Offset: 0xBCE294 VA: 0xBCE294
	// RVA: 0x27CD9C4 Offset: 0x27CD9C4 VA: 0x27CD9C4
	public void .ctor(bool initiallyOwned) { }

	// RVA: 0x27CDA64 Offset: 0x27CDA64 VA: 0x27CDA64
	private static IntPtr CreateMutex_internal(bool initiallyOwned, string name, out bool created) { }

	// RVA: 0x27CDA6C Offset: 0x27CDA6C VA: 0x27CDA6C
	private static bool ReleaseMutex_internal(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0xBCE2AC Offset: 0xBCE2AC VA: 0xBCE2AC
	// RVA: 0x27CDA70 Offset: 0x27CDA70 VA: 0x27CDA70
	public void ReleaseMutex() { }
}

// Namespace: System.Threading
internal sealed class NativeEventCalls // TypeDefIndex: 937
{
	// Methods

	// RVA: 0x27CCFF4 Offset: 0x27CCFF4 VA: 0x27CCFF4
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out bool created) { }

	// RVA: 0x27CD06C Offset: 0x27CD06C VA: 0x27CD06C
	public static bool SetEvent_internal(IntPtr handle) { }

	// RVA: 0x27CD034 Offset: 0x27CD034 VA: 0x27CD034
	public static bool ResetEvent_internal(IntPtr handle) { }

	// RVA: 0x27CDB0C Offset: 0x27CDB0C VA: 0x27CDB0C
	public static void CloseEvent_internal(IntPtr handle) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA864 Offset: 0xBCA864 VA: 0xBCA864
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 938
{
	// Fields
	private WaitHandle _waitObject; // 0x18
	private WaitOrTimerCallback _callback; // 0x20
	private TimeSpan _timeout; // 0x28
	private object _state; // 0x30
	private bool _executeOnlyOnce; // 0x38
	private WaitHandle _finalEvent; // 0x40
	private ManualResetEvent _cancelEvent; // 0x48
	private int _callsInProcess; // 0x50
	private bool _unregistered; // 0x54

	// Methods

	// RVA: 0x27CDEF0 Offset: 0x27CDEF0 VA: 0x27CDEF0
	internal void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce) { }

	// RVA: 0x27CDFA8 Offset: 0x27CDFA8 VA: 0x27CDFA8
	internal void Wait(object state) { }

	// RVA: 0x27CE3D0 Offset: 0x27CE3D0 VA: 0x27CE3D0
	private void DoCallBack(object timedOut) { }
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 939
{
	// Fields
	private bool notification_required; // 0x10
	[ThreadStaticAttribute] // RVA: 0xBCB73C Offset: 0xBCB73C VA: 0xBCB73C
	private static SynchronizationContext currentContext; // 0x80000000

	// Properties
	public static SynchronizationContext Current { get; }

	// Methods

	// RVA: 0x27CE93C Offset: 0x27CE93C VA: 0x27CE93C
	public void .ctor() { }

	// RVA: 0x27CE944 Offset: 0x27CE944 VA: 0x27CE944
	public static SynchronizationContext get_Current() { }

	// RVA: 0x27CE998 Offset: 0x27CE998 VA: 0x27CE998 Slot: 4
	public virtual void OperationCompleted() { }

	// RVA: 0x27CE99C Offset: 0x27CE99C VA: 0x27CE99C Slot: 5
	public virtual void OperationStarted() { }

	// RVA: 0x27CE9A0 Offset: 0x27CE9A0 VA: 0x27CE9A0 Slot: 6
	public virtual void Post(SendOrPostCallback d, object state) { }

	// RVA: 0x27CEA20 Offset: 0x27CEA20 VA: 0x27CEA20 Slot: 7
	public virtual void Send(SendOrPostCallback d, object state) { }

	// RVA: 0x27CEA58 Offset: 0x27CEA58 VA: 0x27CEA58
	public static void SetSynchronizationContext(SynchronizationContext syncContext) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA878 Offset: 0xBCA878 VA: 0xBCA878
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 940
{
	// Methods

	// RVA: 0x27CEAB0 Offset: 0x27CEAB0 VA: 0x27CEAB0
	public void .ctor() { }

	// RVA: 0x27CD5E4 Offset: 0x27CD5E4 VA: 0x27CD5E4
	public void .ctor(string message) { }

	// RVA: 0x27CEB18 Offset: 0x27CEB18 VA: 0x27CEB18
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ClassInterfaceAttribute] // RVA: 0xBCA88C Offset: 0xBCA88C VA: 0xBCA88C
[ComDefaultInterfaceAttribute] // RVA: 0xBCA88C Offset: 0xBCA88C VA: 0xBCA88C
[ComVisibleAttribute] // RVA: 0xBCA88C Offset: 0xBCA88C VA: 0xBCA88C
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 941
{
	// Fields
	private int lock_thread_id; // 0x10
	private IntPtr system_thread_handle; // 0x18
	private object cached_culture_info; // 0x20
	private IntPtr unused0; // 0x28
	private bool threadpool_thread; // 0x30
	private IntPtr name; // 0x38
	private int name_len; // 0x40
	private ThreadState state; // 0x44
	private object abort_exc; // 0x48
	private int abort_state_handle; // 0x50
	private long thread_id; // 0x58
	private IntPtr start_notify; // 0x60
	private IntPtr stack_ptr; // 0x68
	private UIntPtr static_data; // 0x70
	private IntPtr jit_data; // 0x78
	private IntPtr lock_data; // 0x80
	private object current_appcontext; // 0x88
	private int stack_size; // 0x90
	private object start_obj; // 0x98
	private IntPtr appdomain_refs; // 0xA0
	private int interruption_requested; // 0xA8
	private IntPtr suspend_event; // 0xB0
	private IntPtr suspended_event; // 0xB8
	private IntPtr resume_event; // 0xC0
	private IntPtr synch_cs; // 0xC8
	private IntPtr serialized_culture_info; // 0xD0
	private int serialized_culture_info_len; // 0xD8
	private IntPtr serialized_ui_culture_info; // 0xE0
	private int serialized_ui_culture_info_len; // 0xE8
	private bool thread_dump_requested; // 0xEC
	private IntPtr end_stack; // 0xF0
	private bool thread_interrupt_requested; // 0xF8
	private byte apartment_state; // 0xF9
	private int critical_region_level; // 0xFC
	private int small_id; // 0x100
	private IntPtr manage_callback; // 0x108
	private object pending_exception; // 0x110
	private ExecutionContext ec_to_set; // 0x118
	private IntPtr interrupt_on_stop; // 0x120
	private IntPtr unused3; // 0x128
	private IntPtr unused4; // 0x130
	private IntPtr unused5; // 0x138
	private IntPtr unused6; // 0x140
	[ThreadStaticAttribute] // RVA: 0xBCB74C Offset: 0xBCB74C VA: 0xBCB74C
	private static object[] local_slots; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0xBCB75C Offset: 0xBCB75C VA: 0xBCB75C
	private static ExecutionContext _ec; // 0x80000008
	private MulticastDelegate threadstart; // 0x148
	private int managed_id; // 0x150
	private IPrincipal _principal; // 0x158
	private static Hashtable datastorehash; // 0x0
	private static object datastore_lock; // 0x8
	private bool in_currentculture; // 0x160
	private static object culture_lock; // 0x10

	// Properties
	public static Context CurrentContext { get; }
	public static IPrincipal CurrentPrincipal { get; set; }
	public static Thread CurrentThread { get; }
	public CultureInfo CurrentCulture { get; set; }
	public CultureInfo CurrentUICulture { get; }
	public bool IsAlive { get; }
	public bool IsBackground { set; }
	public string Name { set; }
	public ThreadState ThreadState { get; }
	[MonoTODOAttribute] // RVA: 0xBCF468 Offset: 0xBCF468 VA: 0xBCF468
	public ExecutionContext ExecutionContext { get; }
	public int ManagedThreadId { get; }

	// Methods

	// RVA: 0x27CEB20 Offset: 0x27CEB20 VA: 0x27CEB20
	public void .ctor(ThreadStart start) { }

	// RVA: 0x27CEBD4 Offset: 0x27CEBD4 VA: 0x27CEBD4
	public void .ctor(ParameterizedThreadStart start) { }

	// RVA: 0x27CEC84 Offset: 0x27CEC84 VA: 0x27CEC84
	private static void .cctor() { }

	// RVA: 0x27CED18 Offset: 0x27CED18 VA: 0x27CED18
	public static Context get_CurrentContext() { }

	// RVA: 0x27CED20 Offset: 0x27CED20 VA: 0x27CED20
	public static IPrincipal get_CurrentPrincipal() { }

	// RVA: 0x27CEE3C Offset: 0x27CEE3C VA: 0x27CEE3C
	public static void set_CurrentPrincipal(IPrincipal value) { }

	// RVA: 0x27CEF04 Offset: 0x27CEF04 VA: 0x27CEF04
	private static Thread CurrentThread_internal() { }

	[ReliabilityContractAttribute] // RVA: 0xBCE2C4 Offset: 0xBCE2C4 VA: 0xBCE2C4
	// RVA: 0x27CC808 Offset: 0x27CC808 VA: 0x27CC808
	public static Thread get_CurrentThread() { }

	// RVA: 0x27CEF08 Offset: 0x27CEF08 VA: 0x27CEF08
	internal static void FreeLocalSlotValues(int slot, bool thread_local) { }

	// RVA: 0x27CEE34 Offset: 0x27CEE34 VA: 0x27CEE34
	public static AppDomain GetDomain() { }

	// RVA: 0x27CEF10 Offset: 0x27CEF10 VA: 0x27CEF10
	public static int GetDomainID() { }

	// RVA: 0x27CEF14 Offset: 0x27CEF14 VA: 0x27CEF14
	private static void ResetAbort_internal() { }

	// RVA: 0x27CEF18 Offset: 0x27CEF18 VA: 0x27CEF18
	public static void ResetAbort() { }

	// RVA: 0x27CEF74 Offset: 0x27CEF74 VA: 0x27CEF74
	private static void Sleep_internal(int ms) { }

	// RVA: 0x27CEF78 Offset: 0x27CEF78 VA: 0x27CEF78
	public static void Sleep(int millisecondsTimeout) { }

	// RVA: 0x27CF034 Offset: 0x27CF034 VA: 0x27CF034
	private IntPtr Thread_internal(MulticastDelegate start) { }

	// RVA: 0x27CEBD0 Offset: 0x27CEBD0 VA: 0x27CEBD0
	private void Thread_init() { }

	// RVA: 0x27CF038 Offset: 0x27CF038 VA: 0x27CF038
	private CultureInfo GetCachedCurrentCulture() { }

	// RVA: 0x27CF03C Offset: 0x27CF03C VA: 0x27CF03C
	private byte[] GetSerializedCurrentCulture() { }

	// RVA: 0x27CF040 Offset: 0x27CF040 VA: 0x27CF040
	private void SetCachedCurrentCulture(CultureInfo culture) { }

	// RVA: 0x27CF044 Offset: 0x27CF044 VA: 0x27CF044
	private void SetSerializedCurrentCulture(byte[] culture) { }

	// RVA: 0x27CF048 Offset: 0x27CF048 VA: 0x27CF048
	private CultureInfo GetCachedCurrentUICulture() { }

	// RVA: 0x27CF04C Offset: 0x27CF04C VA: 0x27CF04C
	private byte[] GetSerializedCurrentUICulture() { }

	// RVA: 0x27CF050 Offset: 0x27CF050 VA: 0x27CF050
	private void SetCachedCurrentUICulture(CultureInfo culture) { }

	// RVA: 0x27CF054 Offset: 0x27CF054 VA: 0x27CF054
	public CultureInfo get_CurrentCulture() { }

	// RVA: 0x27CF3A0 Offset: 0x27CF3A0 VA: 0x27CF3A0
	public void set_CurrentCulture(CultureInfo value) { }

	// RVA: 0x27CF5B0 Offset: 0x27CF5B0 VA: 0x27CF5B0
	public CultureInfo get_CurrentUICulture() { }

	// RVA: 0x27CF8A8 Offset: 0x27CF8A8 VA: 0x27CF8A8
	public bool get_IsAlive() { }

	// RVA: 0x27CF8E0 Offset: 0x27CF8E0 VA: 0x27CF8E0
	public void set_IsBackground(bool value) { }

	// RVA: 0x27CF8FC Offset: 0x27CF8FC VA: 0x27CF8FC
	private void SetName_internal(string name) { }

	// RVA: 0x27CF900 Offset: 0x27CF900 VA: 0x27CF900
	public void set_Name(string value) { }

	// RVA: 0x27CF904 Offset: 0x27CF904 VA: 0x27CF904
	public ThreadState get_ThreadState() { }

	// RVA: 0x27CF908 Offset: 0x27CF908 VA: 0x27CF908
	private void Abort_internal(object stateInfo) { }

	// RVA: 0x27CF90C Offset: 0x27CF90C VA: 0x27CF90C
	public void Abort() { }

	// RVA: 0x27CF914 Offset: 0x27CF914 VA: 0x27CF914
	private void Interrupt_internal() { }

	// RVA: 0x27CF918 Offset: 0x27CF918 VA: 0x27CF918
	public void Interrupt() { }

	// RVA: 0x27CF91C Offset: 0x27CF91C VA: 0x27CF91C
	public void Start() { }

	// RVA: 0x27CFA4C Offset: 0x27CFA4C VA: 0x27CFA4C
	private void Thread_free_internal(IntPtr handle) { }

	[ReliabilityContractAttribute] // RVA: 0xBCE2DC Offset: 0xBCE2DC VA: 0xBCE2DC
	// RVA: 0x27CFA50 Offset: 0x27CFA50 VA: 0x27CFA50 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x27CF8F4 Offset: 0x27CF8F4 VA: 0x27CF8F4
	private void SetState(ThreadState set) { }

	// RVA: 0x27CF8F8 Offset: 0x27CF8F8 VA: 0x27CF8F8
	private void ClrState(ThreadState clr) { }

	// RVA: 0x27CF8DC Offset: 0x27CF8DC VA: 0x27CF8DC
	private ThreadState GetState() { }

	// RVA: 0x27CFAC8 Offset: 0x27CFAC8 VA: 0x27CFAC8
	private static int GetNewManagedId() { }

	// RVA: 0x27CFB24 Offset: 0x27CFB24 VA: 0x27CFB24
	private static int GetNewManagedId_internal() { }

	[ReliabilityContractAttribute] // RVA: 0xBCE2F4 Offset: 0xBCE2F4 VA: 0xBCE2F4
	// RVA: 0x27CD280 Offset: 0x27CD280 VA: 0x27CD280
	public ExecutionContext get_ExecutionContext() { }

	[ReliabilityContractAttribute] // RVA: 0xBCE30C Offset: 0xBCE30C VA: 0xBCE30C
	// RVA: 0x27CFB28 Offset: 0x27CFB28 VA: 0x27CFB28
	public int get_ManagedThreadId() { }

	[ComVisibleAttribute] // RVA: 0xBCE324 Offset: 0xBCE324 VA: 0xBCE324
	// RVA: 0x27CFBAC Offset: 0x27CFBAC VA: 0x27CFBAC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x27CFBB0 Offset: 0x27CFBB0 VA: 0x27CFBB0
	public void Start(object parameter) { }

	[ObsoleteAttribute] // RVA: 0xBCE338 Offset: 0xBCE338 VA: 0xBCE338
	// RVA: 0x27CC864 Offset: 0x27CC864 VA: 0x27CC864
	public CompressedStack GetCompressedStack() { }

	[ObsoleteAttribute] // RVA: 0xBCE370 Offset: 0xBCE370 VA: 0xBCE370
	// RVA: 0x27CCAFC Offset: 0x27CCAFC VA: 0x27CCAFC
	public void SetCompressedStack(CompressedStack stack) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA918 Offset: 0xBCA918 VA: 0xBCA918
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 942
{
	// Methods

	// RVA: 0x27CFBB8 Offset: 0x27CFBB8 VA: 0x27CFBB8
	private void .ctor() { }

	// RVA: 0x27CFC38 Offset: 0x27CFC38 VA: 0x27CFC38
	private void .ctor(SerializationInfo info, StreamingContext sc) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA92C Offset: 0xBCA92C VA: 0xBCA92C
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 943
{
	// Methods

	// RVA: 0x27CFC40 Offset: 0x27CFC40 VA: 0x27CFC40
	public void .ctor() { }

	// RVA: 0x27CFCA8 Offset: 0x27CFCA8 VA: 0x27CFCA8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 944
{
	// Methods

	// RVA: 0x27CFCB0 Offset: 0x27CFCB0 VA: 0x27CFCB0
	public static bool QueueUserWorkItem(WaitCallback callBack) { }

	// RVA: 0x27CE31C Offset: 0x27CE31C VA: 0x27CE31C
	public static bool QueueUserWorkItem(WaitCallback callBack, object state) { }

	// RVA: 0x27CFCB8 Offset: 0x27CFCB8 VA: 0x27CFCB8
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce) { }

	// RVA: 0x27CFE40 Offset: 0x27CFE40 VA: 0x27CFE40
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA940 Offset: 0xBCA940 VA: 0xBCA940
[FlagsAttribute] // RVA: 0xBCA940 Offset: 0xBCA940 VA: 0xBCA940
[Serializable]
public enum ThreadState // TypeDefIndex: 945
{
	// Fields
	public int value__; // 0x0
	public const ThreadState Running = 0;
	public const ThreadState StopRequested = 1;
	public const ThreadState SuspendRequested = 2;
	public const ThreadState Background = 4;
	public const ThreadState Unstarted = 8;
	public const ThreadState Stopped = 16;
	public const ThreadState WaitSleepJoin = 32;
	public const ThreadState Suspended = 64;
	public const ThreadState AbortRequested = 128;
	public const ThreadState Aborted = 256;
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA97C Offset: 0xBCA97C VA: 0xBCA97C
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 946
{
	// Methods

	// RVA: 0x27D00F0 Offset: 0x27D00F0 VA: 0x27D00F0
	public void .ctor() { }

	// RVA: 0x27D0158 Offset: 0x27D0158 VA: 0x27D0158
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA990 Offset: 0xBCA990 VA: 0xBCA990
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 947
{
	// Fields
	private static Timer.Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0x18
	private object state; // 0x20
	private long due_time_ms; // 0x28
	private long period_ms; // 0x30
	private long next_run; // 0x38
	private bool disposed; // 0x40

	// Methods

	// RVA: 0x27D0160 Offset: 0x27D0160 VA: 0x27D0160
	public void .ctor(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x27D0298 Offset: 0x27D0298 VA: 0x27D0298
	private static void .cctor() { }

	// RVA: 0x27D01DC Offset: 0x27D01DC VA: 0x27D01DC
	private void Init(TimerCallback callback, object state, long dueTime, long period) { }

	// RVA: 0x27D053C Offset: 0x27D053C VA: 0x27D053C
	public bool Change(TimeSpan dueTime, TimeSpan period) { }

	// RVA: 0x27D05A0 Offset: 0x27D05A0 VA: 0x27D05A0 Slot: 6
	public void Dispose() { }

	// RVA: 0x27D0374 Offset: 0x27D0374 VA: 0x27D0374
	private bool Change(long dueTime, long period, bool first) { }
}

// Namespace: 
private sealed class Timer.TimerComparer : IComparer // TypeDefIndex: 948
{
	// Methods

	// RVA: 0x27D0914 Offset: 0x27D0914 VA: 0x27D0914
	public void .ctor() { }

	// RVA: 0x27D130C Offset: 0x27D130C VA: 0x27D130C Slot: 4
	public int Compare(object x, object y) { }
}

// Namespace: 
private sealed class Timer.Scheduler // TypeDefIndex: 949
{
	// Fields
	private static Timer.Scheduler instance; // 0x0
	private SortedList list; // 0x10

	// Properties
	public static Timer.Scheduler Instance { get; }

	// Methods

	// RVA: 0x27D0800 Offset: 0x27D0800 VA: 0x27D0800
	private void .ctor() { }

	// RVA: 0x27D091C Offset: 0x27D091C VA: 0x27D091C
	private static void .cctor() { }

	// RVA: 0x27D030C Offset: 0x27D030C VA: 0x27D030C
	public static Timer.Scheduler get_Instance() { }

	// RVA: 0x27D063C Offset: 0x27D063C VA: 0x27D063C
	public void Remove(Timer timer) { }

	// RVA: 0x27D06DC Offset: 0x27D06DC VA: 0x27D06DC
	public void Change(Timer timer, long new_next_run) { }

	// RVA: 0x27D0A00 Offset: 0x27D0A00 VA: 0x27D0A00
	private void Add(Timer timer) { }

	// RVA: 0x27D097C Offset: 0x27D097C VA: 0x27D097C
	private int InternalRemove(Timer timer) { }

	// RVA: 0x27D0BC0 Offset: 0x27D0BC0 VA: 0x27D0BC0
	private void SchedulerThread() { }

	// RVA: 0x27D1260 Offset: 0x27D1260 VA: 0x27D1260
	private void ShrinkIfNeeded(ArrayList list, int initial) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xBCA9A4 Offset: 0xBCA9A4 VA: 0xBCA9A4
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 950
{
	// Fields
	public const int WaitTimeout = 258;
	private SafeWaitHandle safe_wait_handle; // 0x18
	protected static readonly IntPtr InvalidHandle; // 0x0
	private bool disposed; // 0x20

	// Properties
	[ObsoleteAttribute] // RVA: 0xBCF4A0 Offset: 0xBCF4A0 VA: 0xBCF4A0
	public virtual IntPtr Handle { get; set; }

	// Methods

	// RVA: 0x2AEBC2C Offset: 0x2AEBC2C VA: 0x2AEBC2C
	protected void .ctor() { }

	// RVA: 0x2AEBC34 Offset: 0x2AEBC34 VA: 0x2AEBC34
	private static void .cctor() { }

	// RVA: 0x2AEBC90 Offset: 0x2AEBC90 VA: 0x2AEBC90 Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2AEBCC4 Offset: 0x2AEBCC4 VA: 0x2AEBCC4
	private static void CheckArray(WaitHandle[] handles, bool waitAll) { }

	// RVA: 0x2AEBE40 Offset: 0x2AEBE40 VA: 0x2AEBE40
	private static int WaitAny_internal(WaitHandle[] handles, int ms, bool exitContext) { }

	[ReliabilityContractAttribute] // RVA: 0xBCE3A8 Offset: 0xBCE3A8 VA: 0xBCE3A8
	// RVA: 0x2AEBE48 Offset: 0x2AEBE48 VA: 0x2AEBE48
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext) { }

	// RVA: 0x2AEC00C Offset: 0x2AEC00C VA: 0x2AEC00C Slot: 7
	public virtual IntPtr get_Handle() { }

	// RVA: 0x2AEC03C Offset: 0x2AEC03C VA: 0x2AEC03C Slot: 8
	public virtual void set_Handle(IntPtr value) { }

	// RVA: 0x2AEC130 Offset: 0x2AEC130 VA: 0x2AEC130
	private bool WaitOne_internal(IntPtr handle, int ms, bool exitContext) { }

	// RVA: 0x2AEC138 Offset: 0x2AEC138 VA: 0x2AEC138 Slot: 9
	protected virtual void Dispose(bool explicitDisposing) { }

	// RVA: 0x2AEC1DC Offset: 0x2AEC1DC VA: 0x2AEC1DC Slot: 10
	public virtual bool WaitOne() { }

	// RVA: 0x2AEC3BC Offset: 0x2AEC3BC VA: 0x2AEC3BC Slot: 11
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext) { }

	// RVA: 0x2AEC588 Offset: 0x2AEC588 VA: 0x2AEC588 Slot: 12
	public virtual bool WaitOne(int millisecondsTimeout) { }

	// RVA: 0x2AEC598 Offset: 0x2AEC598 VA: 0x2AEC598 Slot: 13
	public virtual bool WaitOne(TimeSpan timeout) { }

	// RVA: 0x2AEC5AC Offset: 0x2AEC5AC VA: 0x2AEC5AC Slot: 14
	public virtual bool WaitOne(TimeSpan timeout, bool exitContext) { }

	// RVA: 0x2AEC2FC Offset: 0x2AEC2FC VA: 0x2AEC2FC
	internal void CheckDisposed() { }

	// RVA: 0x2AEC794 Offset: 0x2AEC794 VA: 0x2AEC794 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCA9B8 Offset: 0xBCA9B8 VA: 0xBCA9B8
[Serializable]
public class AccessViolationException : SystemException // TypeDefIndex: 951
{
	// Methods

	// RVA: 0x22785F0 Offset: 0x22785F0 VA: 0x22785F0
	public void .ctor() { }

	// RVA: 0x2278664 Offset: 0x2278664 VA: 0x2278664
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCA9CC Offset: 0xBCA9CC VA: 0xBCA9CC
[Serializable]
public sealed class ActivationContext : IDisposable, ISerializable // TypeDefIndex: 952
{
	// Fields
	private bool _disposed; // 0x10

	// Methods

	[MonoTODOAttribute] // RVA: 0xBCE3C0 Offset: 0xBCE3C0 VA: 0xBCE3C0
	// RVA: 0x227866C Offset: 0x227866C VA: 0x227866C Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22786F0 Offset: 0x22786F0 VA: 0x22786F0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x227871C Offset: 0x227871C VA: 0x227871C Slot: 4
	public void Dispose() { }

	// RVA: 0x2278708 Offset: 0x2278708 VA: 0x2278708
	private void Dispose(bool disposing) { }
}

// Namespace: System
[ComDefaultInterfaceAttribute] // RVA: 0xBCA9E0 Offset: 0xBCA9E0 VA: 0xBCA9E0
[ClassInterfaceAttribute] // RVA: 0xBCA9E0 Offset: 0xBCA9E0 VA: 0xBCA9E0
[ComVisibleAttribute] // RVA: 0xBCA9E0 Offset: 0xBCA9E0 VA: 0xBCA9E0
public sealed class Activator : _Activator // TypeDefIndex: 953
{
	// Methods

	// RVA: -1 Offset: -1
	public static T CreateInstance<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C217C0 Offset: 0x1C217C0 VA: 0x1C217C0
	|-Activator.CreateInstance<int>
	|
	|-RVA: 0x1C21868 Offset: 0x1C21868 VA: 0x1C21868
	|-Activator.CreateInstance<object>
	*/

	// RVA: 0x2278734 Offset: 0x2278734 VA: 0x2278734
	public static object CreateInstance(Type type) { }

	// RVA: 0x22789D4 Offset: 0x22789D4 VA: 0x22789D4
	public static object CreateInstance(Type type, object[] args) { }

	// RVA: 0x2278A40 Offset: 0x2278A40 VA: 0x2278A40
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes) { }

	// RVA: 0x2278AD0 Offset: 0x2278AD0 VA: 0x2278AD0
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes) { }

	// RVA: 0x227873C Offset: 0x227873C VA: 0x227873C
	public static object CreateInstance(Type type, bool nonPublic) { }

	// RVA: 0x22791C0 Offset: 0x22791C0 VA: 0x22791C0
	private static void CheckType(Type type) { }

	// RVA: 0x2279428 Offset: 0x2279428 VA: 0x2279428
	private static void CheckAbstractType(Type type) { }

	// RVA: 0x2279424 Offset: 0x2279424 VA: 0x2279424
	internal static object CreateInstanceInternal(Type type) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAA6C Offset: 0xBCAA6C VA: 0xBCAA6C
[ClassInterfaceAttribute] // RVA: 0xBCAA6C Offset: 0xBCAA6C VA: 0xBCAA6C
public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 954
{
	// Fields
	private IntPtr _mono_app_domain; // 0x18
	private static string _process_guid; // 0x0
	[ThreadStaticAttribute] // RVA: 0xBCB76C Offset: 0xBCB76C VA: 0xBCB76C
	private static Hashtable type_resolve_in_progress; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0xBCB77C Offset: 0xBCB77C VA: 0xBCB77C
	private static Hashtable assembly_resolve_in_progress; // 0x80000008
	[ThreadStaticAttribute] // RVA: 0xBCB78C Offset: 0xBCB78C VA: 0xBCB78C
	private static Hashtable assembly_resolve_in_progress_refonly; // 0x80000010
	private Evidence _evidence; // 0x20
	private PermissionSet _granted; // 0x28
	private PrincipalPolicy _principalPolicy; // 0x30
	[ThreadStaticAttribute] // RVA: 0xBCB79C Offset: 0xBCB79C VA: 0xBCB79C
	private static IPrincipal _principal; // 0x80000018
	private static AppDomain default_domain; // 0x8
	private AppDomainManager _domain_manager; // 0x38
