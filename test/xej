	private bool IsEmpty(StrongNameIdentityPermission.SNIP snip) { }

	// RVA: 0x243510C Offset: 0x243510C VA: 0x243510C
	private bool IsEmpty() { }

	// RVA: 0x24363A0 Offset: 0x24363A0 VA: 0x24363A0
	private StrongNameIdentityPermission Cast(IPermission target) { }

	// RVA: 0x2435B30 Offset: 0x2435B30 VA: 0x2435B30
	private bool Match(string target) { }
}

// Namespace: 
private struct StrongNameIdentityPermission.SNIP // TypeDefIndex: 815
{
	// Fields
	public StrongNamePublicKeyBlob PublicKey; // 0x0
	public string Name; // 0x8
	public Version AssemblyVersion; // 0x10

	// Methods

	// RVA: 0xD6B240 Offset: 0xD6B240 VA: 0xD6B240
	internal void .ctor(StrongNamePublicKeyBlob pk, string name, Version version) { }

	// RVA: 0x24347AC Offset: 0x24347AC VA: 0x24347AC
	internal static StrongNameIdentityPermission.SNIP CreateDefault() { }

	// RVA: 0xD6B24C Offset: 0xD6B24C VA: 0xD6B24C
	internal bool IsNameSubsetOf(string target) { }

	// RVA: 0xD6B254 Offset: 0xD6B254 VA: 0xD6B254
	internal bool IsSubsetOf(StrongNameIdentityPermission.SNIP target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9D58 Offset: 0xBC9D58 VA: 0xBC9D58
[Serializable]
public sealed class StrongNamePublicKeyBlob // TypeDefIndex: 816
{
	// Fields
	internal byte[] pubkey; // 0x10

	// Methods

	// RVA: 0x2437460 Offset: 0x2437460 VA: 0x2437460
	public void .ctor(byte[] publicKey) { }

	// RVA: 0x2435790 Offset: 0x2435790 VA: 0x2435790
	internal static StrongNamePublicKeyBlob FromString(string s) { }

	// RVA: 0x2437504 Offset: 0x2437504 VA: 0x2437504
	private static byte CharToByte(char c) { }

	// RVA: 0x2435CD4 Offset: 0x2435CD4 VA: 0x2435CD4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2437590 Offset: 0x2437590 VA: 0x2437590 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2436AD4 Offset: 0x2436AD4 VA: 0x2436AD4 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9D6C Offset: 0xBC9D6C VA: 0xBC9D6C
[Serializable]
public sealed class UIPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 817
{
	// Fields
	private UIPermissionWindow _window; // 0x10
	private UIPermissionClipboard _clipboard; // 0x14

	// Properties
	public UIPermissionClipboard Clipboard { set; }
	public UIPermissionWindow Window { set; }

	// Methods

	// RVA: 0x2437644 Offset: 0x2437644 VA: 0x2437644
	public void .ctor(PermissionState state) { }

	// RVA: 0x2437690 Offset: 0x2437690 VA: 0x2437690
	public void .ctor(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag) { }

	// RVA: 0x24376D8 Offset: 0x24376D8 VA: 0x24376D8
	public void set_Clipboard(UIPermissionClipboard value) { }

	// RVA: 0x2437870 Offset: 0x2437870 VA: 0x2437870
	public void set_Window(UIPermissionWindow value) { }

	// RVA: 0x2437A08 Offset: 0x2437A08 VA: 0x2437A08 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x2437A7C Offset: 0x2437A7C VA: 0x2437A7C Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x2437C80 Offset: 0x2437C80 VA: 0x2437C80 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x2437DE8 Offset: 0x2437DE8 VA: 0x2437DE8 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x2437E64 Offset: 0x2437E64 VA: 0x2437E64 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x2437E88 Offset: 0x2437E88 VA: 0x2437E88 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x2437FF8 Offset: 0x2437FF8 VA: 0x2437FF8 Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x2437DD8 Offset: 0x2437DD8 VA: 0x2437DD8
	private bool IsEmpty(UIPermissionWindow w, UIPermissionClipboard c) { }

	// RVA: 0x2437D2C Offset: 0x2437D2C VA: 0x2437D2C
	private UIPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9D80 Offset: 0xBC9D80 VA: 0xBC9D80
[Serializable]
public enum UIPermissionClipboard // TypeDefIndex: 818
{
	// Fields
	public int value__; // 0x0
	public const UIPermissionClipboard NoClipboard = 0;
	public const UIPermissionClipboard OwnClipboard = 1;
	public const UIPermissionClipboard AllClipboard = 2;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9D94 Offset: 0xBC9D94 VA: 0xBC9D94
[Serializable]
public enum UIPermissionWindow // TypeDefIndex: 819
{
	// Fields
	public int value__; // 0x0
	public const UIPermissionWindow NoWindows = 0;
	public const UIPermissionWindow SafeSubWindows = 1;
	public const UIPermissionWindow SafeTopLevelWindows = 2;
	public const UIPermissionWindow AllWindows = 3;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9DA8 Offset: 0xBC9DA8 VA: 0xBC9DA8
[Serializable]
public sealed class ZoneIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 820
{
	// Fields
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone SecurityZone { set; }

	// Methods

	// RVA: 0x24380B8 Offset: 0x24380B8 VA: 0x24380B8
	public void .ctor(SecurityZone zone) { }

	// RVA: 0x2438280 Offset: 0x2438280 VA: 0x2438280 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x24382F0 Offset: 0x24382F0 VA: 0x24382F0 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x24383F0 Offset: 0x24383F0 VA: 0x24383F0 Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x24384E4 Offset: 0x24384E4 VA: 0x24384E4 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x2438534 Offset: 0x2438534 VA: 0x2438534 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x243865C Offset: 0x243865C VA: 0x243865C Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x24380E8 Offset: 0x24380E8 VA: 0x24380E8
	public void set_SecurityZone(SecurityZone value) { }

	// RVA: 0x2438344 Offset: 0x2438344 VA: 0x2438344
	private ZoneIdentityPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9DBC Offset: 0xBC9DBC VA: 0xBC9DBC
[Serializable]
public sealed class AllMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 821
{
	// Fields
	private readonly int version; // 0x10

	// Methods

	// RVA: 0x2438728 Offset: 0x2438728 VA: 0x2438728
	public void .ctor() { }

	// RVA: 0x2438738 Offset: 0x2438738 VA: 0x2438738 Slot: 4
	public bool Check(Evidence evidence) { }

	// RVA: 0x2438740 Offset: 0x2438740 VA: 0x2438740 Slot: 5
	public IMembershipCondition Copy() { }

	// RVA: 0x24387A4 Offset: 0x24387A4 VA: 0x24387A4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x2438808 Offset: 0x2438808 VA: 0x2438808 Slot: 7
	public void FromXml(SecurityElement e) { }

	// RVA: 0x243880C Offset: 0x243880C VA: 0x243880C Slot: 9
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x2438898 Offset: 0x2438898 VA: 0x2438898 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2438924 Offset: 0x2438924 VA: 0x2438924 Slot: 3
	public override string ToString() { }

	// RVA: 0x243896C Offset: 0x243896C VA: 0x243896C Slot: 8
	public SecurityElement ToXml() { }

	// RVA: 0x2438970 Offset: 0x2438970 VA: 0x2438970 Slot: 10
	public SecurityElement ToXml(PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9DD0 Offset: 0xBC9DD0 VA: 0xBC9DD0
public static class ApplicationSecurityManager // TypeDefIndex: 822
{
	// Fields
	private static IApplicationTrustManager _appTrustManager; // 0x0

	// Properties
	public static IApplicationTrustManager ApplicationTrustManager { get; }

	// Methods

	// RVA: 0x2438A20 Offset: 0x2438A20 VA: 0x2438A20
	public static IApplicationTrustManager get_ApplicationTrustManager() { }

	[MonoTODOAttribute] // RVA: 0xBCD90C Offset: 0xBCD90C VA: 0xBCD90C
	// RVA: 0x2428E7C Offset: 0x2428E7C VA: 0x2428E7C
	public static bool DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9DE4 Offset: 0xBC9DE4 VA: 0xBC9DE4
[Serializable]
public sealed class ApplicationTrust : ISecurityEncodable // TypeDefIndex: 823
{
	// Fields
	private ApplicationIdentity _appid; // 0x10
	private PolicyStatement _defaultPolicy; // 0x18
	private object _xtranfo; // 0x20
	private bool _trustrun; // 0x28
	private bool _persist; // 0x29
	private IList<StrongName> fullTrustAssemblies; // 0x30

	// Properties
	public PolicyStatement DefaultGrantSet { get; }
	public bool IsApplicationTrustedToRun { get; }

	// Methods

	// RVA: 0x2428FA0 Offset: 0x2428FA0 VA: 0x2428FA0
	public void .ctor() { }

	// RVA: 0x2429018 Offset: 0x2429018 VA: 0x2429018
	public void .ctor(ApplicationIdentity applicationIdentity) { }

	// RVA: 0x2438AB0 Offset: 0x2438AB0 VA: 0x2438AB0
	public PolicyStatement get_DefaultGrantSet() { }

	// RVA: 0x2438AA8 Offset: 0x2438AA8 VA: 0x2438AA8
	public bool get_IsApplicationTrustedToRun() { }

	// RVA: 0x2438B58 Offset: 0x2438B58 VA: 0x2438B58 Slot: 4
	public void FromXml(SecurityElement element) { }

	// RVA: 0x243901C Offset: 0x243901C VA: 0x243901C Slot: 5
	public SecurityElement ToXml() { }

	// RVA: 0x2438ADC Offset: 0x2438ADC VA: 0x2438ADC
	private PolicyStatement GetDefaultGrantSet() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9DF8 Offset: 0xBC9DF8 VA: 0xBC9DF8
[Serializable]
public class CodeConnectAccess // TypeDefIndex: 824
{
	// Fields
	public static readonly string AnyScheme; // 0x0
	public static readonly int DefaultPort; // 0x8
	public static readonly int OriginPort; // 0xC
	public static readonly string OriginScheme; // 0x10
	private string _scheme; // 0x10
	private int _port; // 0x18

	// Methods

	// RVA: 0x24393B4 Offset: 0x24393B4 VA: 0x24393B4
	private static void .cctor() { }

	// RVA: 0x2439440 Offset: 0x2439440 VA: 0x2439440 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x2439528 Offset: 0x2439528 VA: 0x2439528 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9E0C Offset: 0xBC9E0C VA: 0xBC9E0C
[Serializable]
public abstract class CodeGroup // TypeDefIndex: 825
{
	// Fields
	private PolicyStatement m_policy; // 0x10
	private IMembershipCondition m_membershipCondition; // 0x18
	private string m_description; // 0x20
	private string m_name; // 0x28
	private ArrayList m_children; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xBCB70C Offset: 0xBCB70C VA: 0xBCB70C
	private static Dictionary<string, int> <>f__switch$map2A; // 0x0

	// Properties
	public PolicyStatement PolicyStatement { get; set; }
	public string Description { get; set; }
	public IMembershipCondition MembershipCondition { get; }
	public string Name { get; set; }
	public IList Children { get; }

	// Methods

	// RVA: 0x2439568 Offset: 0x2439568 VA: 0x2439568
	protected void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy) { }

	// RVA: 0x24396B0 Offset: 0x24396B0 VA: 0x24396B0
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract CodeGroup Copy();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract PolicyStatement Resolve(Evidence evidence);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract CodeGroup ResolveMatchingCodeGroups(Evidence evidence);

	// RVA: 0x2439F40 Offset: 0x2439F40 VA: 0x2439F40
	public PolicyStatement get_PolicyStatement() { }

	// RVA: 0x2439F48 Offset: 0x2439F48 VA: 0x2439F48
	public void set_PolicyStatement(PolicyStatement value) { }

	// RVA: 0x2439F50 Offset: 0x2439F50 VA: 0x2439F50
	public string get_Description() { }

	// RVA: 0x2439F58 Offset: 0x2439F58 VA: 0x2439F58
	public void set_Description(string value) { }

	// RVA: 0x2439F60 Offset: 0x2439F60 VA: 0x2439F60
	public IMembershipCondition get_MembershipCondition() { }

	// RVA: 0x2439F68 Offset: 0x2439F68 VA: 0x2439F68
	public string get_Name() { }

	// RVA: 0x2439F70 Offset: 0x2439F70 VA: 0x2439F70
	public void set_Name(string value) { }

	// RVA: 0x2439F78 Offset: 0x2439F78 VA: 0x2439F78
	public IList get_Children() { }

	// RVA: 0x2439F80 Offset: 0x2439F80 VA: 0x2439F80
	public void AddChild(CodeGroup group) { }

	// RVA: 0x243A04C Offset: 0x243A04C VA: 0x243A04C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x243A0F0 Offset: 0x243A0F0 VA: 0x243A0F0
	public bool Equals(CodeGroup cg, bool compareChildren) { }

	// RVA: 0x243A62C Offset: 0x243A62C VA: 0x243A62C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2439738 Offset: 0x2439738 VA: 0x2439738
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x243AAE4 Offset: 0x243AAE4 VA: 0x243AAE4 Slot: 7
	protected virtual void ParseXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x243AAE8 Offset: 0x243AAE8 VA: 0x243AAE8
	public SecurityElement ToXml() { }

	// RVA: 0x243AAF0 Offset: 0x243AAF0 VA: 0x243AAF0
	public SecurityElement ToXml(PolicyLevel level) { }

	// RVA: 0x243B088 Offset: 0x243B088 VA: 0x243B088 Slot: 8
	protected virtual void CreateXml(SecurityElement element, PolicyLevel level) { }

	// RVA: 0x243A688 Offset: 0x243A688 VA: 0x243A688
	internal static CodeGroup CreateFromXml(SecurityElement se, PolicyLevel level) { }
}

// Namespace: System.Security.Policy
internal static class DefaultPolicies // TypeDefIndex: 826
{
	// Fields
	private static Version _fxVersion; // 0x0
	private static byte[] _ecmaKey; // 0x8
	private static StrongNamePublicKeyBlob _ecma; // 0x10
	private static byte[] _msFinalKey; // 0x18
	private static StrongNamePublicKeyBlob _msFinal; // 0x20
	private static NamedPermissionSet _fullTrust; // 0x28
	private static NamedPermissionSet _localIntranet; // 0x30
	private static NamedPermissionSet _internet; // 0x38
	private static NamedPermissionSet _skipVerification; // 0x40
	private static NamedPermissionSet _execution; // 0x48
	private static NamedPermissionSet _nothing; // 0x50
	private static NamedPermissionSet _everything; // 0x58

	// Properties
	public static PermissionSet FullTrust { get; }
	public static PermissionSet LocalIntranet { get; }
	public static PermissionSet Internet { get; }
	public static PermissionSet SkipVerification { get; }
	public static PermissionSet Execution { get; }
	public static PermissionSet Nothing { get; }
	public static PermissionSet Everything { get; }

	// Methods

	// RVA: 0x1F4A408 Offset: 0x1F4A408 VA: 0x1F4A408
	private static void .cctor() { }

	// RVA: 0x1F4A4D4 Offset: 0x1F4A4D4 VA: 0x1F4A4D4
	public static PermissionSet get_FullTrust() { }

	// RVA: 0x1F4A5FC Offset: 0x1F4A5FC VA: 0x1F4A5FC
	public static PermissionSet get_LocalIntranet() { }

	// RVA: 0x1F4A994 Offset: 0x1F4A994 VA: 0x1F4A994
	public static PermissionSet get_Internet() { }

	// RVA: 0x1F4AC84 Offset: 0x1F4AC84 VA: 0x1F4AC84
	public static PermissionSet get_SkipVerification() { }

	// RVA: 0x1F4ADE8 Offset: 0x1F4ADE8 VA: 0x1F4ADE8
	public static PermissionSet get_Execution() { }

	// RVA: 0x1F4AF4C Offset: 0x1F4AF4C VA: 0x1F4AF4C
	public static PermissionSet get_Nothing() { }

	// RVA: 0x1F4B074 Offset: 0x1F4B074 VA: 0x1F4B074
	public static PermissionSet get_Everything() { }

	// RVA: 0x1F4B640 Offset: 0x1F4B640 VA: 0x1F4B640
	public static StrongNameMembershipCondition FullTrustMembership(string name, DefaultPolicies.Key key) { }

	// RVA: 0x1F4A590 Offset: 0x1F4A590 VA: 0x1F4A590
	private static NamedPermissionSet BuildFullTrust() { }

	// RVA: 0x1F4A6B8 Offset: 0x1F4A6B8 VA: 0x1F4A6B8
	private static NamedPermissionSet BuildLocalIntranet() { }

	// RVA: 0x1F4AA50 Offset: 0x1F4AA50 VA: 0x1F4AA50
	private static NamedPermissionSet BuildInternet() { }

	// RVA: 0x1F4AD40 Offset: 0x1F4AD40 VA: 0x1F4AD40
	private static NamedPermissionSet BuildSkipVerification() { }

	// RVA: 0x1F4AEA4 Offset: 0x1F4AEA4 VA: 0x1F4AEA4
	private static NamedPermissionSet BuildExecution() { }

	// RVA: 0x1F4B008 Offset: 0x1F4B008 VA: 0x1F4B008
	private static NamedPermissionSet BuildNothing() { }

	// RVA: 0x1F4B130 Offset: 0x1F4B130 VA: 0x1F4B130
	private static NamedPermissionSet BuildEverything() { }

	// RVA: 0x1F4BA1C Offset: 0x1F4BA1C VA: 0x1F4BA1C
	private static SecurityElement PrintingPermission(string level) { }
}

// Namespace: 
public enum DefaultPolicies.Key // TypeDefIndex: 827
{
	// Fields
	public int value__; // 0x0
	public const DefaultPolicies.Key Ecma = 0;
	public const DefaultPolicies.Key MsFinal = 1;
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9E20 Offset: 0xBC9E20 VA: 0xBC9E20
[MonoTODOAttribute] // RVA: 0xBC9E20 Offset: 0xBC9E20 VA: 0xBC9E20
[Serializable]
public sealed class Evidence : IEnumerable, ICollection // TypeDefIndex: 828
{
	// Fields
	private bool _locked; // 0x10
	private ArrayList hostEvidenceList; // 0x18
	private ArrayList assemblyEvidenceList; // 0x20
	private int _hashCode; // 0x28

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	internal ArrayList HostEvidenceList { get; }
	internal ArrayList AssemblyEvidenceList { get; }

	// Methods

	// RVA: 0x1F4BCEC Offset: 0x1F4BCEC VA: 0x1F4BCEC
	public void .ctor() { }

	// RVA: 0x1F4BCF4 Offset: 0x1F4BCF4 VA: 0x1F4BCF4
	public void .ctor(Evidence evidence) { }

	// RVA: 0x1F4C1A8 Offset: 0x1F4C1A8 VA: 0x1F4C1A8 Slot: 5
	public int get_Count() { }

	// RVA: 0x1F4C208 Offset: 0x1F4C208 VA: 0x1F4C208 Slot: 6
	public bool get_IsSynchronized() { }

	// RVA: 0x1F4C210 Offset: 0x1F4C210 VA: 0x1F4C210 Slot: 7
	public object get_SyncRoot() { }

	// RVA: 0x1F4C214 Offset: 0x1F4C214 VA: 0x1F4C214
	internal ArrayList get_HostEvidenceList() { }

	// RVA: 0x1F4C2A8 Offset: 0x1F4C2A8 VA: 0x1F4C2A8
	internal ArrayList get_AssemblyEvidenceList() { }

	// RVA: 0x1F4C33C Offset: 0x1F4C33C VA: 0x1F4C33C
	public void AddAssembly(object id) { }

	// RVA: 0x1F4C390 Offset: 0x1F4C390 VA: 0x1F4C390
	public void AddHost(object id) { }

	// RVA: 0x1F4C478 Offset: 0x1F4C478 VA: 0x1F4C478 Slot: 8
	public void CopyTo(Array array, int index) { }

	[ComVisibleAttribute] // RVA: 0xBCD944 Offset: 0xBCD944 VA: 0xBCD944
	// RVA: 0x1F4C560 Offset: 0x1F4C560 VA: 0x1F4C560 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1F4C888 Offset: 0x1F4C888 VA: 0x1F4C888 Slot: 4
	public IEnumerator GetEnumerator() { }

	[ComVisibleAttribute] // RVA: 0xBCD958 Offset: 0xBCD958 VA: 0xBCD958
	// RVA: 0x1F4C97C Offset: 0x1F4C97C VA: 0x1F4C97C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F4CACC Offset: 0x1F4CACC VA: 0x1F4CACC
	public IEnumerator GetHostEnumerator() { }

	// RVA: 0x1F4BD34 Offset: 0x1F4BD34 VA: 0x1F4BD34
	public void Merge(Evidence evidence) { }

	// RVA: 0x1F4CB04 Offset: 0x1F4CB04 VA: 0x1F4CB04
	internal static Evidence GetDefaultHostEvidence(Assembly a) { }
}

// Namespace: 
private class Evidence.EvidenceEnumerator : IEnumerator // TypeDefIndex: 829
{
	// Fields
	private IEnumerator currentEnum; // 0x10
	private IEnumerator hostEnum; // 0x18
	private IEnumerator assemblyEnum; // 0x20

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x1F4C940 Offset: 0x1F4C940 VA: 0x1F4C940
	public void .ctor(IEnumerator hostenum, IEnumerator assemblyenum) { }

	// RVA: 0x1F4CB60 Offset: 0x1F4CB60 VA: 0x1F4CB60 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1F4CCB4 Offset: 0x1F4CCB4 VA: 0x1F4CCB4 Slot: 6
	public void Reset() { }

	// RVA: 0x1F4CE04 Offset: 0x1F4CE04 VA: 0x1F4CE04 Slot: 4
	public object get_Current() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9E70 Offset: 0xBC9E70 VA: 0xBC9E70
[Serializable]
public sealed class FileCodeGroup : CodeGroup // TypeDefIndex: 830
{
	// Fields
	private FileIOPermissionAccess m_access; // 0x38

	// Methods

	// RVA: 0x1F4CEB8 Offset: 0x1F4CEB8 VA: 0x1F4CEB8
	public void .ctor(IMembershipCondition membershipCondition, FileIOPermissionAccess access) { }

	// RVA: 0x1F4CEE8 Offset: 0x1F4CEE8 VA: 0x1F4CEE8
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F4CEF0 Offset: 0x1F4CEF0 VA: 0x1F4CEF0 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0x1F4D2F0 Offset: 0x1F4D2F0 VA: 0x1F4D2F0 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0x1F4DA3C Offset: 0x1F4DA3C VA: 0x1F4DA3C Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	// RVA: 0x1F4DED0 Offset: 0x1F4DED0 VA: 0x1F4DED0 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F4DFE0 Offset: 0x1F4DFE0 VA: 0x1F4DFE0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F4E054 Offset: 0x1F4E054 VA: 0x1F4E054 Slot: 7
	protected override void ParseXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F4E204 Offset: 0x1F4E204 VA: 0x1F4E204 Slot: 8
	protected override void CreateXml(SecurityElement element, PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9E84 Offset: 0xBC9E84 VA: 0xBC9E84
[Serializable]
public sealed class FirstMatchCodeGroup : CodeGroup // TypeDefIndex: 831
{
	// Methods

	// RVA: 0x1F4E2B0 Offset: 0x1F4E2B0 VA: 0x1F4E2B0
	public void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy) { }

	// RVA: 0x1F4E2B8 Offset: 0x1F4E2B8 VA: 0x1F4E2B8
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F4E2C0 Offset: 0x1F4E2C0 VA: 0x1F4E2C0 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0x1F4E720 Offset: 0x1F4E720 VA: 0x1F4E720 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0x1F4EBAC Offset: 0x1F4EBAC VA: 0x1F4EBAC Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	// RVA: 0x1F4E634 Offset: 0x1F4E634 VA: 0x1F4E634
	private FirstMatchCodeGroup CopyNoChildren() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9E98 Offset: 0xBC9E98 VA: 0xBC9E98
[Serializable]
public sealed class Hash : ISerializable, IBuiltInEvidence // TypeDefIndex: 832
{
	// Fields
	private Assembly assembly; // 0x10
	private byte[] data; // 0x18

	// Methods

	// RVA: 0x1F4F050 Offset: 0x1F4F050 VA: 0x1F4F050
	internal void .ctor() { }

	// RVA: 0x1F4F058 Offset: 0x1F4F058 VA: 0x1F4F058
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1F4F18C Offset: 0x1F4F18C VA: 0x1F4F18C Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1F4F3BC Offset: 0x1F4F3BC VA: 0x1F4F3BC Slot: 3
	public override string ToString() { }

	// RVA: 0x1F4F240 Offset: 0x1F4F240 VA: 0x1F4F240
	private byte[] GetData() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9EAC Offset: 0xBC9EAC VA: 0xBC9EAC
public interface IApplicationTrustManager : ISecurityEncodable // TypeDefIndex: 833
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context);
}

// Namespace: System.Security.Policy
internal interface IBuiltInEvidence // TypeDefIndex: 834
{}

// Namespace: System.Security.Policy
internal interface IConstantMembershipCondition // TypeDefIndex: 835
{}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9EC0 Offset: 0xBC9EC0 VA: 0xBC9EC0
public interface IIdentityPermissionFactory // TypeDefIndex: 836
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IPermission CreateIdentityPermission(Evidence evidence);
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9ED4 Offset: 0xBC9ED4 VA: 0xBC9ED4
public interface IMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 837
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Check(Evidence evidence);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IMembershipCondition Copy();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool Equals(object obj);
}

// Namespace: System.Security.Policy
internal sealed class MembershipConditionHelper // TypeDefIndex: 838
{
	// Fields
	private static readonly string XmlTag; // 0x0

	// Methods

	// RVA: 0x1F4F8B4 Offset: 0x1F4F8B4 VA: 0x1F4F8B4
	private static void .cctor() { }

	// RVA: 0x1F4F910 Offset: 0x1F4F910 VA: 0x1F4F910
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion) { }

	// RVA: 0x1F4FE74 Offset: 0x1F4FE74 VA: 0x1F4FE74
	internal static SecurityElement Element(Type type, int version) { }
}

// Namespace: System.Security.Policy
internal class MonoTrustManager : IApplicationTrustManager, ISecurityEncodable // TypeDefIndex: 839
{
	// Methods

	// RVA: 0x1F504A8 Offset: 0x1F504A8 VA: 0x1F504A8
	public void .ctor() { }

	// RVA: 0x1F504B0 Offset: 0x1F504B0 VA: 0x1F504B0 Slot: 4
	public ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context) { }

	// RVA: 0x1F5053C Offset: 0x1F5053C VA: 0x1F5053C Slot: 5
	public void FromXml(SecurityElement e) { }

	// RVA: 0x1F50658 Offset: 0x1F50658 VA: 0x1F50658 Slot: 6
	public SecurityElement ToXml() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9EE8 Offset: 0xBC9EE8 VA: 0xBC9EE8
[Serializable]
public sealed class NetCodeGroup : CodeGroup // TypeDefIndex: 840
{
	// Fields
	public static readonly string AbsentOriginScheme; // 0x0
	public static readonly string AnyOtherOriginScheme; // 0x8
	private Hashtable _rules; // 0x38
	private int _hashcode; // 0x40

	// Methods

	// RVA: 0x1F50784 Offset: 0x1F50784 VA: 0x1F50784
	public void .ctor(IMembershipCondition membershipCondition) { }

	// RVA: 0x1F50800 Offset: 0x1F50800 VA: 0x1F50800
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F50880 Offset: 0x1F50880 VA: 0x1F50880
	private static void .cctor() { }

	// RVA: 0x1F50914 Offset: 0x1F50914 VA: 0x1F50914 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0x1F50D30 Offset: 0x1F50D30 VA: 0x1F50D30
	private bool Equals(CodeConnectAccess[] rules1, CodeConnectAccess[] rules2) { }

	// RVA: 0x1F50E2C Offset: 0x1F50E2C VA: 0x1F50E2C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F5128C Offset: 0x1F5128C VA: 0x1F5128C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F51610 Offset: 0x1F51610 VA: 0x1F51610 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0x1F51BB8 Offset: 0x1F51BB8 VA: 0x1F51BB8 Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	[MonoTODOAttribute] // RVA: 0xBCD96C Offset: 0xBCD96C VA: 0xBCD96C
	// RVA: 0x1F52018 Offset: 0x1F52018 VA: 0x1F52018 Slot: 8
	protected override void CreateXml(SecurityElement element, PolicyLevel level) { }

	[MonoTODOAttribute] // RVA: 0xBCD9A4 Offset: 0xBCD9A4 VA: 0xBCD9A4
	// RVA: 0x1F52020 Offset: 0x1F52020 VA: 0x1F52020 Slot: 7
	protected override void ParseXml(SecurityElement e, PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9EFC Offset: 0xBC9EFC VA: 0xBC9EFC
[Serializable]
public sealed class PermissionRequestEvidence : IBuiltInEvidence // TypeDefIndex: 841
{
	// Fields
	private PermissionSet requested; // 0x10
	private PermissionSet optional; // 0x18
	private PermissionSet denied; // 0x20

	// Methods

	// RVA: 0x1F52028 Offset: 0x1F52028 VA: 0x1F52028
	public void .ctor(PermissionSet request, PermissionSet optional, PermissionSet denied) { }

	// RVA: 0x1F52108 Offset: 0x1F52108 VA: 0x1F52108 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9F10 Offset: 0xBC9F10 VA: 0xBC9F10
[Serializable]
public class PolicyException : SystemException, _Exception // TypeDefIndex: 842
{
	// Methods

	// RVA: 0x1F52330 Offset: 0x1F52330 VA: 0x1F52330
	public void .ctor() { }

	// RVA: 0x1F52390 Offset: 0x1F52390 VA: 0x1F52390
	public void .ctor(string message) { }

	// RVA: 0x1F52398 Offset: 0x1F52398 VA: 0x1F52398
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9F24 Offset: 0xBC9F24 VA: 0xBC9F24
[Serializable]
public sealed class PolicyLevel // TypeDefIndex: 843
{
	// Fields
	private string label; // 0x10
	private CodeGroup root_code_group; // 0x18
	private ArrayList full_trust_assemblies; // 0x20
	private ArrayList named_permission_sets; // 0x28
	private string _location; // 0x30
	private PolicyLevelType _type; // 0x38
	private Hashtable fullNames; // 0x40
	private SecurityElement xml; // 0x48

	// Properties
	[ComVisibleAttribute] // RVA: 0xBCF340 Offset: 0xBCF340 VA: 0xBCF340
	public PolicyLevelType Type { get; }

	// Methods

	// RVA: 0x1F523A0 Offset: 0x1F523A0 VA: 0x1F523A0
	internal void .ctor(string label, PolicyLevelType type) { }

	// RVA: 0x1F5243C Offset: 0x1F5243C VA: 0x1F5243C
	internal void LoadFromFile(string filename) { }

	// RVA: 0x1F54918 Offset: 0x1F54918 VA: 0x1F54918
	internal void LoadFromString(string xml) { }

	// RVA: 0x1F52A00 Offset: 0x1F52A00 VA: 0x1F52A00
	private SecurityElement FromString(string xml) { }

	// RVA: 0x1F54948 Offset: 0x1F54948 VA: 0x1F54948
	public PolicyLevelType get_Type() { }

	// RVA: 0x1F52EAC Offset: 0x1F52EAC VA: 0x1F52EAC
	public void FromXml(SecurityElement e) { }

	// RVA: 0x1F54FD8 Offset: 0x1F54FD8 VA: 0x1F54FD8
	public NamedPermissionSet GetNamedPermissionSet(string name) { }

	// RVA: 0x1F55478 Offset: 0x1F55478 VA: 0x1F55478
	public PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0x1F55544 Offset: 0x1F55544 VA: 0x1F55544
	public CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	// RVA: 0x1F555F8 Offset: 0x1F555F8 VA: 0x1F555F8
	public SecurityElement ToXml() { }

	// RVA: 0x1F545A4 Offset: 0x1F545A4 VA: 0x1F545A4
	internal void Save() { }

	// RVA: 0x1F540B8 Offset: 0x1F540B8 VA: 0x1F540B8
	internal void CreateDefaultLevel(PolicyLevelType type) { }

	// RVA: 0x1F53BC4 Offset: 0x1F53BC4 VA: 0x1F53BC4
	internal void CreateDefaultFullTrustAssemblies() { }

	// RVA: 0x1F53E0C Offset: 0x1F53E0C VA: 0x1F53E0C
	internal void CreateDefaultNamedPermissionSets() { }

	// RVA: 0x1F56574 Offset: 0x1F56574 VA: 0x1F56574
	internal bool IsFullTrustAssembly(Assembly a) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9F38 Offset: 0xBC9F38 VA: 0xBC9F38
[Serializable]
public sealed class PolicyStatement : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 844
{
	// Fields
	private PermissionSet perms; // 0x10
	private PolicyStatementAttribute attrs; // 0x18

	// Properties
	public PermissionSet PermissionSet { get; set; }
	public PolicyStatementAttribute Attributes { get; }

	// Methods

	// RVA: 0x1F5652C Offset: 0x1F5652C VA: 0x1F5652C
	public void .ctor(PermissionSet permSet) { }

	// RVA: 0x1F56A90 Offset: 0x1F56A90 VA: 0x1F56A90
	public void .ctor(PermissionSet permSet, PolicyStatementAttribute attributes) { }

	// RVA: 0x1F4D8B4 Offset: 0x1F4D8B4 VA: 0x1F4D8B4
	public PermissionSet get_PermissionSet() { }

	// RVA: 0x1F4DA34 Offset: 0x1F4DA34 VA: 0x1F4DA34
	public void set_PermissionSet(PermissionSet value) { }

	// RVA: 0x1F56AFC Offset: 0x1F56AFC VA: 0x1F56AFC
	public PolicyStatementAttribute get_Attributes() { }

	// RVA: 0x1F4D940 Offset: 0x1F4D940 VA: 0x1F4D940
	public PolicyStatement Copy() { }

	// RVA: 0x1F56B04 Offset: 0x1F56B04 VA: 0x1F56B04 Slot: 4
	public void FromXml(SecurityElement et) { }

	// RVA: 0x1F56B08 Offset: 0x1F56B08 VA: 0x1F56B08 Slot: 6
	public void FromXml(SecurityElement et, PolicyLevel level) { }

	// RVA: 0x1F56D04 Offset: 0x1F56D04 VA: 0x1F56D04 Slot: 5
	public SecurityElement ToXml() { }

	// RVA: 0x1F56D08 Offset: 0x1F56D08 VA: 0x1F56D08 Slot: 7
	public SecurityElement ToXml(PolicyLevel level) { }

	[ComVisibleAttribute] // RVA: 0xBCD9DC Offset: 0xBCD9DC VA: 0xBCD9DC
	// RVA: 0x1F56E4C Offset: 0x1F56E4C VA: 0x1F56E4C Slot: 0
	public override bool Equals(object obj) { }

	[ComVisibleAttribute] // RVA: 0xBCD9F0 Offset: 0xBCD9F0 VA: 0xBCD9F0
	// RVA: 0x1F56F08 Offset: 0x1F56F08 VA: 0x1F56F08 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F4D9B4 Offset: 0x1F4D9B4 VA: 0x1F4D9B4
	internal static PolicyStatement Empty() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9F4C Offset: 0xBC9F4C VA: 0xBC9F4C
[FlagsAttribute] // RVA: 0xBC9F4C Offset: 0xBC9F4C VA: 0xBC9F4C
[Serializable]
public enum PolicyStatementAttribute // TypeDefIndex: 845
{
	// Fields
	public int value__; // 0x0
	public const PolicyStatementAttribute Nothing = 0;
	public const PolicyStatementAttribute Exclusive = 1;
	public const PolicyStatementAttribute LevelFinal = 2;
	public const PolicyStatementAttribute All = 3;
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9F88 Offset: 0xBC9F88 VA: 0xBC9F88
[Serializable]
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 846
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x10
	private string name; // 0x18
	private Version version; // 0x20

	// Properties
	public string Name { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }
	public Version Version { get; }
