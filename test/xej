
	// RVA: 0xBBDA30 Offset: 0xBBDA30 VA: 0xBBDA30
	internal bool IsNameSubsetOf(string target) { }

	// RVA: 0xBBDA38 Offset: 0xBBDA38 VA: 0xBBDA38
	internal bool IsSubsetOf(StrongNameIdentityPermission.SNIP target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xC35E80 Offset: 0xC35E80 VA: 0xC35E80
[Serializable]
public sealed class StrongNamePublicKeyBlob // TypeDefIndex: 816
{
	// Fields
	internal byte[] pubkey; // 0x10

	// Methods

	// RVA: 0x11DF3DC Offset: 0x11DF3DC VA: 0x11DF3DC
	public void .ctor(byte[] publicKey) { }

	// RVA: 0x11DD70C Offset: 0x11DD70C VA: 0x11DD70C
	internal static StrongNamePublicKeyBlob FromString(string s) { }

	// RVA: 0x11DF480 Offset: 0x11DF480 VA: 0x11DF480
	private static byte CharToByte(char c) { }

	// RVA: 0x11DDC50 Offset: 0x11DDC50 VA: 0x11DDC50 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x11DF50C Offset: 0x11DF50C VA: 0x11DF50C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x11DEA50 Offset: 0x11DEA50 VA: 0x11DEA50 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xC35E94 Offset: 0xC35E94 VA: 0xC35E94
[Serializable]
public sealed class UIPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 817
{
	// Fields
	private UIPermissionWindow _window; // 0x10
	private UIPermissionClipboard _clipboard; // 0x14

	// Properties
	public UIPermissionClipboard Clipboard { set; }
	public UIPermissionWindow Window { set; }

	// Methods

	// RVA: 0x11DF5C0 Offset: 0x11DF5C0 VA: 0x11DF5C0
	public void .ctor(PermissionState state) { }

	// RVA: 0x11DF60C Offset: 0x11DF60C VA: 0x11DF60C
	public void .ctor(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag) { }

	// RVA: 0x11DF654 Offset: 0x11DF654 VA: 0x11DF654
	public void set_Clipboard(UIPermissionClipboard value) { }

	// RVA: 0x11DF7EC Offset: 0x11DF7EC VA: 0x11DF7EC
	public void set_Window(UIPermissionWindow value) { }

	// RVA: 0x11DF984 Offset: 0x11DF984 VA: 0x11DF984 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x11DF9F8 Offset: 0x11DF9F8 VA: 0x11DF9F8 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x11DFBFC Offset: 0x11DFBFC VA: 0x11DFBFC Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x11DFD64 Offset: 0x11DFD64 VA: 0x11DFD64 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x11DFDE0 Offset: 0x11DFDE0 VA: 0x11DFDE0 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x11DFE04 Offset: 0x11DFE04 VA: 0x11DFE04 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x11DFF74 Offset: 0x11DFF74 VA: 0x11DFF74 Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x11DFD54 Offset: 0x11DFD54 VA: 0x11DFD54
	private bool IsEmpty(UIPermissionWindow w, UIPermissionClipboard c) { }

	// RVA: 0x11DFCA8 Offset: 0x11DFCA8 VA: 0x11DFCA8
	private UIPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xC35EA8 Offset: 0xC35EA8 VA: 0xC35EA8
[Serializable]
public enum UIPermissionClipboard // TypeDefIndex: 818
{
	// Fields
	public int value__; // 0x0
	public const UIPermissionClipboard NoClipboard = 0;
	public const UIPermissionClipboard OwnClipboard = 1;
	public const UIPermissionClipboard AllClipboard = 2;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xC35EBC Offset: 0xC35EBC VA: 0xC35EBC
[Serializable]
public enum UIPermissionWindow // TypeDefIndex: 819
{
	// Fields
	public int value__; // 0x0
	public const UIPermissionWindow NoWindows = 0;
	public const UIPermissionWindow SafeSubWindows = 1;
	public const UIPermissionWindow SafeTopLevelWindows = 2;
	public const UIPermissionWindow AllWindows = 3;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xC35ED0 Offset: 0xC35ED0 VA: 0xC35ED0
[Serializable]
public sealed class ZoneIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 820
{
	// Fields
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone SecurityZone { set; }

	// Methods

	// RVA: 0x11E0034 Offset: 0x11E0034 VA: 0x11E0034
	public void .ctor(SecurityZone zone) { }

	// RVA: 0x11E01FC Offset: 0x11E01FC VA: 0x11E01FC Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x11E026C Offset: 0x11E026C VA: 0x11E026C Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x11E036C Offset: 0x11E036C VA: 0x11E036C Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x11E0460 Offset: 0x11E0460 VA: 0x11E0460 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x11E04B0 Offset: 0x11E04B0 VA: 0x11E04B0 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x11E05D8 Offset: 0x11E05D8 VA: 0x11E05D8 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x11E0064 Offset: 0x11E0064 VA: 0x11E0064
	public void set_SecurityZone(SecurityZone value) { }

	// RVA: 0x11E02C0 Offset: 0x11E02C0 VA: 0x11E02C0
	private ZoneIdentityPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35EE4 Offset: 0xC35EE4 VA: 0xC35EE4
[Serializable]
public sealed class AllMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 821
{
	// Fields
	private readonly int version; // 0x10

	// Methods

	// RVA: 0x11E06A4 Offset: 0x11E06A4 VA: 0x11E06A4
	public void .ctor() { }

	// RVA: 0x11E06B4 Offset: 0x11E06B4 VA: 0x11E06B4 Slot: 4
	public bool Check(Evidence evidence) { }

	// RVA: 0x11E06BC Offset: 0x11E06BC VA: 0x11E06BC Slot: 5
	public IMembershipCondition Copy() { }

	// RVA: 0x11E0720 Offset: 0x11E0720 VA: 0x11E0720 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x11E0784 Offset: 0x11E0784 VA: 0x11E0784 Slot: 7
	public void FromXml(SecurityElement e) { }

	// RVA: 0x11E0788 Offset: 0x11E0788 VA: 0x11E0788 Slot: 9
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x11E0814 Offset: 0x11E0814 VA: 0x11E0814 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x11E08A0 Offset: 0x11E08A0 VA: 0x11E08A0 Slot: 3
	public override string ToString() { }

	// RVA: 0x11E08E8 Offset: 0x11E08E8 VA: 0x11E08E8 Slot: 8
	public SecurityElement ToXml() { }

	// RVA: 0x11E08EC Offset: 0x11E08EC VA: 0x11E08EC Slot: 10
	public SecurityElement ToXml(PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35EF8 Offset: 0xC35EF8 VA: 0xC35EF8
public static class ApplicationSecurityManager // TypeDefIndex: 822
{
	// Fields
	private static IApplicationTrustManager _appTrustManager; // 0x0

	// Properties
	public static IApplicationTrustManager ApplicationTrustManager { get; }

	// Methods

	// RVA: 0x11E099C Offset: 0x11E099C VA: 0x11E099C
	public static IApplicationTrustManager get_ApplicationTrustManager() { }

	[MonoTODOAttribute] // RVA: 0xC39A34 Offset: 0xC39A34 VA: 0xC39A34
	// RVA: 0x11D0DF8 Offset: 0x11D0DF8 VA: 0x11D0DF8
	public static bool DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35F0C Offset: 0xC35F0C VA: 0xC35F0C
[Serializable]
public sealed class ApplicationTrust : ISecurityEncodable // TypeDefIndex: 823
{
	// Fields
	private ApplicationIdentity _appid; // 0x10
	private PolicyStatement _defaultPolicy; // 0x18
	private object _xtranfo; // 0x20
	private bool _trustrun; // 0x28
	private bool _persist; // 0x29
	private IList<StrongName> fullTrustAssemblies; // 0x30

	// Properties
	public PolicyStatement DefaultGrantSet { get; }
	public bool IsApplicationTrustedToRun { get; }

	// Methods

	// RVA: 0x11D0F1C Offset: 0x11D0F1C VA: 0x11D0F1C
	public void .ctor() { }

	// RVA: 0x11D0F94 Offset: 0x11D0F94 VA: 0x11D0F94
	public void .ctor(ApplicationIdentity applicationIdentity) { }

	// RVA: 0x11E0A2C Offset: 0x11E0A2C VA: 0x11E0A2C
	public PolicyStatement get_DefaultGrantSet() { }

	// RVA: 0x11E0A24 Offset: 0x11E0A24 VA: 0x11E0A24
	public bool get_IsApplicationTrustedToRun() { }

	// RVA: 0x11E0AD4 Offset: 0x11E0AD4 VA: 0x11E0AD4 Slot: 4
	public void FromXml(SecurityElement element) { }

	// RVA: 0x11E0F98 Offset: 0x11E0F98 VA: 0x11E0F98 Slot: 5
	public SecurityElement ToXml() { }

	// RVA: 0x11E0A58 Offset: 0x11E0A58 VA: 0x11E0A58
	private PolicyStatement GetDefaultGrantSet() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35F20 Offset: 0xC35F20 VA: 0xC35F20
[Serializable]
public class CodeConnectAccess // TypeDefIndex: 824
{
	// Fields
	public static readonly string AnyScheme; // 0x0
	public static readonly int DefaultPort; // 0x8
	public static readonly int OriginPort; // 0xC
	public static readonly string OriginScheme; // 0x10
	private string _scheme; // 0x10
	private int _port; // 0x18

	// Methods

	// RVA: 0x11E1330 Offset: 0x11E1330 VA: 0x11E1330
	private static void .cctor() { }

	// RVA: 0x11E13BC Offset: 0x11E13BC VA: 0x11E13BC Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x11E14A4 Offset: 0x11E14A4 VA: 0x11E14A4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35F34 Offset: 0xC35F34 VA: 0xC35F34
[Serializable]
public abstract class CodeGroup // TypeDefIndex: 825
{
	// Fields
	private PolicyStatement m_policy; // 0x10
	private IMembershipCondition m_membershipCondition; // 0x18
	private string m_description; // 0x20
	private string m_name; // 0x28
	private ArrayList m_children; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC37834 Offset: 0xC37834 VA: 0xC37834
	private static Dictionary<string, int> <>f__switch$map2A; // 0x0

	// Properties
	public PolicyStatement PolicyStatement { get; set; }
	public string Description { get; set; }
	public IMembershipCondition MembershipCondition { get; }
	public string Name { get; set; }
	public IList Children { get; }

	// Methods

	// RVA: 0x11E14E4 Offset: 0x11E14E4 VA: 0x11E14E4
	protected void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy) { }

	// RVA: 0x11E162C Offset: 0x11E162C VA: 0x11E162C
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract CodeGroup Copy();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract PolicyStatement Resolve(Evidence evidence);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract CodeGroup ResolveMatchingCodeGroups(Evidence evidence);

	// RVA: 0x11E1EBC Offset: 0x11E1EBC VA: 0x11E1EBC
	public PolicyStatement get_PolicyStatement() { }

	// RVA: 0x11E1EC4 Offset: 0x11E1EC4 VA: 0x11E1EC4
	public void set_PolicyStatement(PolicyStatement value) { }

	// RVA: 0x11E1ECC Offset: 0x11E1ECC VA: 0x11E1ECC
	public string get_Description() { }

	// RVA: 0x11E1ED4 Offset: 0x11E1ED4 VA: 0x11E1ED4
	public void set_Description(string value) { }

	// RVA: 0x11E1EDC Offset: 0x11E1EDC VA: 0x11E1EDC
	public IMembershipCondition get_MembershipCondition() { }

	// RVA: 0x11E1EE4 Offset: 0x11E1EE4 VA: 0x11E1EE4
	public string get_Name() { }

	// RVA: 0x11E1EEC Offset: 0x11E1EEC VA: 0x11E1EEC
	public void set_Name(string value) { }

	// RVA: 0x11E1EF4 Offset: 0x11E1EF4 VA: 0x11E1EF4
	public IList get_Children() { }

	// RVA: 0x11E1EFC Offset: 0x11E1EFC VA: 0x11E1EFC
	public void AddChild(CodeGroup group) { }

	// RVA: 0x11E1FC8 Offset: 0x11E1FC8 VA: 0x11E1FC8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x11E206C Offset: 0x11E206C VA: 0x11E206C
	public bool Equals(CodeGroup cg, bool compareChildren) { }

	// RVA: 0x11E25A8 Offset: 0x11E25A8 VA: 0x11E25A8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x11E16B4 Offset: 0x11E16B4 VA: 0x11E16B4
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x11E2A60 Offset: 0x11E2A60 VA: 0x11E2A60 Slot: 7
	protected virtual void ParseXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x11E2A64 Offset: 0x11E2A64 VA: 0x11E2A64
	public SecurityElement ToXml() { }

	// RVA: 0x11E2A6C Offset: 0x11E2A6C VA: 0x11E2A6C
	public SecurityElement ToXml(PolicyLevel level) { }

	// RVA: 0x11E3004 Offset: 0x11E3004 VA: 0x11E3004 Slot: 8
	protected virtual void CreateXml(SecurityElement element, PolicyLevel level) { }

	// RVA: 0x11E2604 Offset: 0x11E2604 VA: 0x11E2604
	internal static CodeGroup CreateFromXml(SecurityElement se, PolicyLevel level) { }
}

// Namespace: System.Security.Policy
internal static class DefaultPolicies // TypeDefIndex: 826
{
	// Fields
	private static Version _fxVersion; // 0x0
	private static byte[] _ecmaKey; // 0x8
	private static StrongNamePublicKeyBlob _ecma; // 0x10
	private static byte[] _msFinalKey; // 0x18
	private static StrongNamePublicKeyBlob _msFinal; // 0x20
	private static NamedPermissionSet _fullTrust; // 0x28
	private static NamedPermissionSet _localIntranet; // 0x30
	private static NamedPermissionSet _internet; // 0x38
	private static NamedPermissionSet _skipVerification; // 0x40
	private static NamedPermissionSet _execution; // 0x48
	private static NamedPermissionSet _nothing; // 0x50
	private static NamedPermissionSet _everything; // 0x58

	// Properties
	public static PermissionSet FullTrust { get; }
	public static PermissionSet LocalIntranet { get; }
	public static PermissionSet Internet { get; }
	public static PermissionSet SkipVerification { get; }
	public static PermissionSet Execution { get; }
	public static PermissionSet Nothing { get; }
	public static PermissionSet Everything { get; }

	// Methods

	// RVA: 0xEE4D7C Offset: 0xEE4D7C VA: 0xEE4D7C
	private static void .cctor() { }

	// RVA: 0xEE4E48 Offset: 0xEE4E48 VA: 0xEE4E48
	public static PermissionSet get_FullTrust() { }

	// RVA: 0xEE4F70 Offset: 0xEE4F70 VA: 0xEE4F70
	public static PermissionSet get_LocalIntranet() { }

	// RVA: 0xEE5308 Offset: 0xEE5308 VA: 0xEE5308
	public static PermissionSet get_Internet() { }

	// RVA: 0xEE55F8 Offset: 0xEE55F8 VA: 0xEE55F8
	public static PermissionSet get_SkipVerification() { }

	// RVA: 0xEE575C Offset: 0xEE575C VA: 0xEE575C
	public static PermissionSet get_Execution() { }

	// RVA: 0xEE58C0 Offset: 0xEE58C0 VA: 0xEE58C0
	public static PermissionSet get_Nothing() { }

	// RVA: 0xEE59E8 Offset: 0xEE59E8 VA: 0xEE59E8
	public static PermissionSet get_Everything() { }

	// RVA: 0xEE5FB4 Offset: 0xEE5FB4 VA: 0xEE5FB4
	public static StrongNameMembershipCondition FullTrustMembership(string name, DefaultPolicies.Key key) { }

	// RVA: 0xEE4F04 Offset: 0xEE4F04 VA: 0xEE4F04
	private static NamedPermissionSet BuildFullTrust() { }

	// RVA: 0xEE502C Offset: 0xEE502C VA: 0xEE502C
	private static NamedPermissionSet BuildLocalIntranet() { }

	// RVA: 0xEE53C4 Offset: 0xEE53C4 VA: 0xEE53C4
	private static NamedPermissionSet BuildInternet() { }

	// RVA: 0xEE56B4 Offset: 0xEE56B4 VA: 0xEE56B4
	private static NamedPermissionSet BuildSkipVerification() { }

	// RVA: 0xEE5818 Offset: 0xEE5818 VA: 0xEE5818
	private static NamedPermissionSet BuildExecution() { }

	// RVA: 0xEE597C Offset: 0xEE597C VA: 0xEE597C
	private static NamedPermissionSet BuildNothing() { }

	// RVA: 0xEE5AA4 Offset: 0xEE5AA4 VA: 0xEE5AA4
	private static NamedPermissionSet BuildEverything() { }

	// RVA: 0xEE6390 Offset: 0xEE6390 VA: 0xEE6390
	private static SecurityElement PrintingPermission(string level) { }
}

// Namespace: 
public enum DefaultPolicies.Key // TypeDefIndex: 827
{
	// Fields
	public int value__; // 0x0
	public const DefaultPolicies.Key Ecma = 0;
	public const DefaultPolicies.Key MsFinal = 1;
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35F48 Offset: 0xC35F48 VA: 0xC35F48
[MonoTODOAttribute] // RVA: 0xC35F48 Offset: 0xC35F48 VA: 0xC35F48
[Serializable]
public sealed class Evidence : IEnumerable, ICollection // TypeDefIndex: 828
{
	// Fields
	private bool _locked; // 0x10
	private ArrayList hostEvidenceList; // 0x18
	private ArrayList assemblyEvidenceList; // 0x20
	private int _hashCode; // 0x28

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	internal ArrayList HostEvidenceList { get; }
	internal ArrayList AssemblyEvidenceList { get; }

	// Methods

	// RVA: 0xEE6660 Offset: 0xEE6660 VA: 0xEE6660
	public void .ctor() { }

	// RVA: 0xEE6668 Offset: 0xEE6668 VA: 0xEE6668
	public void .ctor(Evidence evidence) { }

	// RVA: 0xEE6B1C Offset: 0xEE6B1C VA: 0xEE6B1C Slot: 5
	public int get_Count() { }

	// RVA: 0xEE6B7C Offset: 0xEE6B7C VA: 0xEE6B7C Slot: 6
	public bool get_IsSynchronized() { }

	// RVA: 0xEE6B84 Offset: 0xEE6B84 VA: 0xEE6B84 Slot: 7
	public object get_SyncRoot() { }

	// RVA: 0xEE6B88 Offset: 0xEE6B88 VA: 0xEE6B88
	internal ArrayList get_HostEvidenceList() { }

	// RVA: 0xEE6C1C Offset: 0xEE6C1C VA: 0xEE6C1C
	internal ArrayList get_AssemblyEvidenceList() { }

	// RVA: 0xEE6CB0 Offset: 0xEE6CB0 VA: 0xEE6CB0
	public void AddAssembly(object id) { }

	// RVA: 0xEE6D04 Offset: 0xEE6D04 VA: 0xEE6D04
	public void AddHost(object id) { }

	// RVA: 0xEE6DEC Offset: 0xEE6DEC VA: 0xEE6DEC Slot: 8
	public void CopyTo(Array array, int index) { }

	[ComVisibleAttribute] // RVA: 0xC39A6C Offset: 0xC39A6C VA: 0xC39A6C
	// RVA: 0xEE6ED4 Offset: 0xEE6ED4 VA: 0xEE6ED4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xEE71FC Offset: 0xEE71FC VA: 0xEE71FC Slot: 4
	public IEnumerator GetEnumerator() { }

	[ComVisibleAttribute] // RVA: 0xC39A80 Offset: 0xC39A80 VA: 0xC39A80
	// RVA: 0xEE72F0 Offset: 0xEE72F0 VA: 0xEE72F0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEE7440 Offset: 0xEE7440 VA: 0xEE7440
	public IEnumerator GetHostEnumerator() { }

	// RVA: 0xEE66A8 Offset: 0xEE66A8 VA: 0xEE66A8
	public void Merge(Evidence evidence) { }

	// RVA: 0xEE7478 Offset: 0xEE7478 VA: 0xEE7478
	internal static Evidence GetDefaultHostEvidence(Assembly a) { }
}

// Namespace: 
private class Evidence.EvidenceEnumerator : IEnumerator // TypeDefIndex: 829
{
	// Fields
	private IEnumerator currentEnum; // 0x10
	private IEnumerator hostEnum; // 0x18
	private IEnumerator assemblyEnum; // 0x20

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0xEE72B4 Offset: 0xEE72B4 VA: 0xEE72B4
	public void .ctor(IEnumerator hostenum, IEnumerator assemblyenum) { }

	// RVA: 0xEE74D4 Offset: 0xEE74D4 VA: 0xEE74D4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0xEE7628 Offset: 0xEE7628 VA: 0xEE7628 Slot: 6
	public void Reset() { }

	// RVA: 0xEE7778 Offset: 0xEE7778 VA: 0xEE7778 Slot: 4
	public object get_Current() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35F98 Offset: 0xC35F98 VA: 0xC35F98
[Serializable]
public sealed class FileCodeGroup : CodeGroup // TypeDefIndex: 830
{
	// Fields
	private FileIOPermissionAccess m_access; // 0x38

	// Methods

	// RVA: 0xEE782C Offset: 0xEE782C VA: 0xEE782C
	public void .ctor(IMembershipCondition membershipCondition, FileIOPermissionAccess access) { }

	// RVA: 0xEE785C Offset: 0xEE785C VA: 0xEE785C
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEE7864 Offset: 0xEE7864 VA: 0xEE7864 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0xEE7C64 Offset: 0xEE7C64 VA: 0xEE7C64 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0xEE83B0 Offset: 0xEE83B0 VA: 0xEE83B0 Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	// RVA: 0xEE8844 Offset: 0xEE8844 VA: 0xEE8844 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xEE8954 Offset: 0xEE8954 VA: 0xEE8954 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEE89C8 Offset: 0xEE89C8 VA: 0xEE89C8 Slot: 7
	protected override void ParseXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEE8B78 Offset: 0xEE8B78 VA: 0xEE8B78 Slot: 8
	protected override void CreateXml(SecurityElement element, PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35FAC Offset: 0xC35FAC VA: 0xC35FAC
[Serializable]
public sealed class FirstMatchCodeGroup : CodeGroup // TypeDefIndex: 831
{
	// Methods

	// RVA: 0xEE8C24 Offset: 0xEE8C24 VA: 0xEE8C24
	public void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy) { }

	// RVA: 0xEE8C2C Offset: 0xEE8C2C VA: 0xEE8C2C
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEE8C34 Offset: 0xEE8C34 VA: 0xEE8C34 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0xEE9094 Offset: 0xEE9094 VA: 0xEE9094 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0xEE9520 Offset: 0xEE9520 VA: 0xEE9520 Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	// RVA: 0xEE8FA8 Offset: 0xEE8FA8 VA: 0xEE8FA8
	private FirstMatchCodeGroup CopyNoChildren() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35FC0 Offset: 0xC35FC0 VA: 0xC35FC0
[Serializable]
public sealed class Hash : ISerializable, IBuiltInEvidence // TypeDefIndex: 832
{
	// Fields
	private Assembly assembly; // 0x10
	private byte[] data; // 0x18

	// Methods

	// RVA: 0xEE99C4 Offset: 0xEE99C4 VA: 0xEE99C4
	internal void .ctor() { }

	// RVA: 0xEE99CC Offset: 0xEE99CC VA: 0xEE99CC
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEE9B00 Offset: 0xEE9B00 VA: 0xEE9B00 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEE9D30 Offset: 0xEE9D30 VA: 0xEE9D30 Slot: 3
	public override string ToString() { }

	// RVA: 0xEE9BB4 Offset: 0xEE9BB4 VA: 0xEE9BB4
	private byte[] GetData() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35FD4 Offset: 0xC35FD4 VA: 0xC35FD4
public interface IApplicationTrustManager : ISecurityEncodable // TypeDefIndex: 833
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context);
}

// Namespace: System.Security.Policy
internal interface IBuiltInEvidence // TypeDefIndex: 834
{}

// Namespace: System.Security.Policy
internal interface IConstantMembershipCondition // TypeDefIndex: 835
{}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35FE8 Offset: 0xC35FE8 VA: 0xC35FE8
public interface IIdentityPermissionFactory // TypeDefIndex: 836
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IPermission CreateIdentityPermission(Evidence evidence);
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC35FFC Offset: 0xC35FFC VA: 0xC35FFC
public interface IMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 837
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Check(Evidence evidence);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IMembershipCondition Copy();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool Equals(object obj);
}

// Namespace: System.Security.Policy
internal sealed class MembershipConditionHelper // TypeDefIndex: 838
{
	// Fields
	private static readonly string XmlTag; // 0x0

	// Methods

	// RVA: 0xEEA228 Offset: 0xEEA228 VA: 0xEEA228
	private static void .cctor() { }

	// RVA: 0xEEA284 Offset: 0xEEA284 VA: 0xEEA284
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion) { }

	// RVA: 0xEEA7E8 Offset: 0xEEA7E8 VA: 0xEEA7E8
	internal static SecurityElement Element(Type type, int version) { }
}

// Namespace: System.Security.Policy
internal class MonoTrustManager : IApplicationTrustManager, ISecurityEncodable // TypeDefIndex: 839
{
	// Methods

	// RVA: 0xEEAE1C Offset: 0xEEAE1C VA: 0xEEAE1C
	public void .ctor() { }

	// RVA: 0xEEAE24 Offset: 0xEEAE24 VA: 0xEEAE24 Slot: 4
	public ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context) { }

	// RVA: 0xEEAEB0 Offset: 0xEEAEB0 VA: 0xEEAEB0 Slot: 5
	public void FromXml(SecurityElement e) { }

	// RVA: 0xEEAFCC Offset: 0xEEAFCC VA: 0xEEAFCC Slot: 6
	public SecurityElement ToXml() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36010 Offset: 0xC36010 VA: 0xC36010
[Serializable]
public sealed class NetCodeGroup : CodeGroup // TypeDefIndex: 840
{
	// Fields
	public static readonly string AbsentOriginScheme; // 0x0
	public static readonly string AnyOtherOriginScheme; // 0x8
	private Hashtable _rules; // 0x38
	private int _hashcode; // 0x40

	// Methods

	// RVA: 0xEEB0F8 Offset: 0xEEB0F8 VA: 0xEEB0F8
	public void .ctor(IMembershipCondition membershipCondition) { }

	// RVA: 0xEEB174 Offset: 0xEEB174 VA: 0xEEB174
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEEB1F4 Offset: 0xEEB1F4 VA: 0xEEB1F4
	private static void .cctor() { }

	// RVA: 0xEEB288 Offset: 0xEEB288 VA: 0xEEB288 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0xEEB6A4 Offset: 0xEEB6A4 VA: 0xEEB6A4
	private bool Equals(CodeConnectAccess[] rules1, CodeConnectAccess[] rules2) { }

	// RVA: 0xEEB7A0 Offset: 0xEEB7A0 VA: 0xEEB7A0 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xEEBC00 Offset: 0xEEBC00 VA: 0xEEBC00 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEEBF84 Offset: 0xEEBF84 VA: 0xEEBF84 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0xEEC52C Offset: 0xEEC52C VA: 0xEEC52C Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	[MonoTODOAttribute] // RVA: 0xC39A94 Offset: 0xC39A94 VA: 0xC39A94
	// RVA: 0xEEC98C Offset: 0xEEC98C VA: 0xEEC98C Slot: 8
	protected override void CreateXml(SecurityElement element, PolicyLevel level) { }

	[MonoTODOAttribute] // RVA: 0xC39ACC Offset: 0xC39ACC VA: 0xC39ACC
	// RVA: 0xEEC994 Offset: 0xEEC994 VA: 0xEEC994 Slot: 7
	protected override void ParseXml(SecurityElement e, PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36024 Offset: 0xC36024 VA: 0xC36024
[Serializable]
public sealed class PermissionRequestEvidence : IBuiltInEvidence // TypeDefIndex: 841
{
	// Fields
	private PermissionSet requested; // 0x10
	private PermissionSet optional; // 0x18
	private PermissionSet denied; // 0x20

	// Methods

	// RVA: 0xEEC99C Offset: 0xEEC99C VA: 0xEEC99C
	public void .ctor(PermissionSet request, PermissionSet optional, PermissionSet denied) { }

	// RVA: 0xEECA7C Offset: 0xEECA7C VA: 0xEECA7C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36038 Offset: 0xC36038 VA: 0xC36038
[Serializable]
public class PolicyException : SystemException, _Exception // TypeDefIndex: 842
{
	// Methods

	// RVA: 0xEECCA4 Offset: 0xEECCA4 VA: 0xEECCA4
	public void .ctor() { }

	// RVA: 0xEECD04 Offset: 0xEECD04 VA: 0xEECD04
	public void .ctor(string message) { }

	// RVA: 0xEECD0C Offset: 0xEECD0C VA: 0xEECD0C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC3604C Offset: 0xC3604C VA: 0xC3604C
[Serializable]
public sealed class PolicyLevel // TypeDefIndex: 843
{
	// Fields
	private string label; // 0x10
	private CodeGroup root_code_group; // 0x18
	private ArrayList full_trust_assemblies; // 0x20
	private ArrayList named_permission_sets; // 0x28
	private string _location; // 0x30
	private PolicyLevelType _type; // 0x38
	private Hashtable fullNames; // 0x40
	private SecurityElement xml; // 0x48

	// Properties
	[ComVisibleAttribute] // RVA: 0xC3B468 Offset: 0xC3B468 VA: 0xC3B468
	public PolicyLevelType Type { get; }

	// Methods

	// RVA: 0xEECD14 Offset: 0xEECD14 VA: 0xEECD14
	internal void .ctor(string label, PolicyLevelType type) { }

	// RVA: 0xEECDB0 Offset: 0xEECDB0 VA: 0xEECDB0
	internal void LoadFromFile(string filename) { }

	// RVA: 0xEEF28C Offset: 0xEEF28C VA: 0xEEF28C
	internal void LoadFromString(string xml) { }

	// RVA: 0xEED374 Offset: 0xEED374 VA: 0xEED374
	private SecurityElement FromString(string xml) { }

	// RVA: 0xEEF2BC Offset: 0xEEF2BC VA: 0xEEF2BC
	public PolicyLevelType get_Type() { }

	// RVA: 0xEED820 Offset: 0xEED820 VA: 0xEED820
	public void FromXml(SecurityElement e) { }

	// RVA: 0xEEF94C Offset: 0xEEF94C VA: 0xEEF94C
	public NamedPermissionSet GetNamedPermissionSet(string name) { }

	// RVA: 0xEEFDEC Offset: 0xEEFDEC VA: 0xEEFDEC
	public PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0xEEFEB8 Offset: 0xEEFEB8 VA: 0xEEFEB8
	public CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }

	// RVA: 0xEEFF6C Offset: 0xEEFF6C VA: 0xEEFF6C
	public SecurityElement ToXml() { }

	// RVA: 0xEEEF18 Offset: 0xEEEF18 VA: 0xEEEF18
	internal void Save() { }

	// RVA: 0xEEEA2C Offset: 0xEEEA2C VA: 0xEEEA2C
	internal void CreateDefaultLevel(PolicyLevelType type) { }

	// RVA: 0xEEE538 Offset: 0xEEE538 VA: 0xEEE538
	internal void CreateDefaultFullTrustAssemblies() { }

	// RVA: 0xEEE780 Offset: 0xEEE780 VA: 0xEEE780
	internal void CreateDefaultNamedPermissionSets() { }

	// RVA: 0xEF0EE8 Offset: 0xEF0EE8 VA: 0xEF0EE8
	internal bool IsFullTrustAssembly(Assembly a) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36060 Offset: 0xC36060 VA: 0xC36060
[Serializable]
public sealed class PolicyStatement : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 844
{
	// Fields
	private PermissionSet perms; // 0x10
	private PolicyStatementAttribute attrs; // 0x18

	// Properties
	public PermissionSet PermissionSet { get; set; }
	public PolicyStatementAttribute Attributes { get; }

	// Methods

	// RVA: 0xEF0EA0 Offset: 0xEF0EA0 VA: 0xEF0EA0
	public void .ctor(PermissionSet permSet) { }

	// RVA: 0xEF1404 Offset: 0xEF1404 VA: 0xEF1404
	public void .ctor(PermissionSet permSet, PolicyStatementAttribute attributes) { }

	// RVA: 0xEE8228 Offset: 0xEE8228 VA: 0xEE8228
	public PermissionSet get_PermissionSet() { }

	// RVA: 0xEE83A8 Offset: 0xEE83A8 VA: 0xEE83A8
	public void set_PermissionSet(PermissionSet value) { }

	// RVA: 0xEF1470 Offset: 0xEF1470 VA: 0xEF1470
	public PolicyStatementAttribute get_Attributes() { }

	// RVA: 0xEE82B4 Offset: 0xEE82B4 VA: 0xEE82B4
	public PolicyStatement Copy() { }

	// RVA: 0xEF1478 Offset: 0xEF1478 VA: 0xEF1478 Slot: 4
	public void FromXml(SecurityElement et) { }

	// RVA: 0xEF147C Offset: 0xEF147C VA: 0xEF147C Slot: 6
	public void FromXml(SecurityElement et, PolicyLevel level) { }

	// RVA: 0xEF1678 Offset: 0xEF1678 VA: 0xEF1678 Slot: 5
	public SecurityElement ToXml() { }

	// RVA: 0xEF167C Offset: 0xEF167C VA: 0xEF167C Slot: 7
	public SecurityElement ToXml(PolicyLevel level) { }

	[ComVisibleAttribute] // RVA: 0xC39B04 Offset: 0xC39B04 VA: 0xC39B04
	// RVA: 0xEF17C0 Offset: 0xEF17C0 VA: 0xEF17C0 Slot: 0
	public override bool Equals(object obj) { }

	[ComVisibleAttribute] // RVA: 0xC39B18 Offset: 0xC39B18 VA: 0xC39B18
	// RVA: 0xEF187C Offset: 0xEF187C VA: 0xEF187C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEE8328 Offset: 0xEE8328 VA: 0xEE8328
	internal static PolicyStatement Empty() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36074 Offset: 0xC36074 VA: 0xC36074
[FlagsAttribute] // RVA: 0xC36074 Offset: 0xC36074 VA: 0xC36074
[Serializable]
public enum PolicyStatementAttribute // TypeDefIndex: 845
{
	// Fields
	public int value__; // 0x0
	public const PolicyStatementAttribute Nothing = 0;
	public const PolicyStatementAttribute Exclusive = 1;
	public const PolicyStatementAttribute LevelFinal = 2;
	public const PolicyStatementAttribute All = 3;
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC360B0 Offset: 0xC360B0 VA: 0xC360B0
[Serializable]
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 846
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x10
	private string name; // 0x18
	private Version version; // 0x20

	// Properties
	public string Name { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }
	public Version Version { get; }

	// Methods

	// RVA: 0xEF18C0 Offset: 0xEF18C0 VA: 0xEF18C0
	public string get_Name() { }

	// RVA: 0xEF18C8 Offset: 0xEF18C8 VA: 0xEF18C8
	public StrongNamePublicKeyBlob get_PublicKey() { }

	// RVA: 0xEF18D0 Offset: 0xEF18D0 VA: 0xEF18D0
	public Version get_Version() { }

	// RVA: 0xEF18D8 Offset: 0xEF18D8 VA: 0xEF18D8 Slot: 4
	public IPermission CreateIdentityPermission(Evidence evidence) { }

	// RVA: 0xEF1954 Offset: 0xEF1954 VA: 0xEF1954 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xEF1A60 Offset: 0xEF1A60 VA: 0xEF1A60 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEF1A90 Offset: 0xEF1A90 VA: 0xEF1A90 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC360C4 Offset: 0xC360C4 VA: 0xC360C4
