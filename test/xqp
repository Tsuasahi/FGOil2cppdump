
// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B04 Offset: 0xC43B04 VA: 0xC43B04
private sealed class BattleActionData.<GetMaxSideEffectCountByTarget>c__AnonStoreyA // TypeDefIndex: 8751
{
	// Fields
	internal Dictionary<int, int> dicTarget; // 0x10
	internal bool isAtkFirst; // 0x18
	internal bool isAtkLast; // 0x19

	// Methods

	// RVA: 0x1988954 Offset: 0x1988954 VA: 0x1988954
	public void .ctor() { }

	// RVA: 0x198895C Offset: 0x198895C VA: 0x198895C
	internal void <>m__0(BattleActionData data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B14 Offset: 0xC43B14 VA: 0xC43B14
private sealed class BattleActionData.<SetSideEffectCountByTarget>c__AnonStoreyB // TypeDefIndex: 8752
{
	// Fields
	internal List<int> targetList; // 0x10
	internal BattleActionData $this; // 0x18
	private static Func<BattleActionData.BuffData, int> <>f__am$cache0; // 0x0
	private static Func<BattleActionData.HealData, int> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1988A20 Offset: 0x1988A20 VA: 0x1988A20
	public void .ctor() { }

	// RVA: 0x1988A28 Offset: 0x1988A28 VA: 0x1988A28
	internal void <>m__0() { }

	// RVA: 0x1988C1C Offset: 0x1988C1C VA: 0x1988C1C
	private static int <>m__1(BattleActionData.BuffData x) { }

	// RVA: 0x1988C44 Offset: 0x1988C44 VA: 0x1988C44
	private static int <>m__2(BattleActionData.HealData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B24 Offset: 0xC43B24 VA: 0xC43B24
private sealed class BattleActionData.<getSideEffectList>c__AnonStoreyC // TypeDefIndex: 8753
{
	// Fields
	internal BattleActionData.ACTTYPE actType; // 0x10

	// Methods

	// RVA: 0x1988DC0 Offset: 0x1988DC0 VA: 0x1988DC0
	public void .ctor() { }

	// RVA: 0x1988DC8 Offset: 0x1988DC8 VA: 0x1988DC8
	internal bool <>m__0(BattleActionData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B34 Offset: 0xC43B34 VA: 0xC43B34
private sealed class BattleActionData.<AddSideEffectAfterAction>c__AnonStoreyD // TypeDefIndex: 8754
{
	// Fields
	internal BattlePerformance perf; // 0x10

	// Methods

	// RVA: 0x1988604 Offset: 0x1988604 VA: 0x1988604
	public void .ctor() { }

	// RVA: 0x198860C Offset: 0x198860C VA: 0x198860C
	internal bool <>m__0(BattleActionData act) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43B44 Offset: 0xC43B44 VA: 0xC43B44
private sealed class BattleActionData.<addReflectLogicResultServantId>c__AnonStoreyE // TypeDefIndex: 8755
{
	// Fields
	internal int uniqueSvtId; // 0x10

	// Methods

	// RVA: 0x1988C6C Offset: 0x1988C6C VA: 0x1988C6C
	public void .ctor() { }

	// RVA: 0x1988C74 Offset: 0x1988C74 VA: 0x1988C74
	internal bool <>m__0(BattleActionData.ServantLogicResultData x) { }
}

// Namespace: 
public class BattleActionEffect // TypeDefIndex: 8756
{
	// Methods

	// RVA: 0x198A464 Offset: 0x198A464 VA: 0x198A464
	public void .ctor() { }
}

// Namespace: 
public class BattleActionEffect.Base // TypeDefIndex: 8757
{
	// Methods

	// RVA: 0x198A580 Offset: 0x198A580 VA: 0x198A580
	public void .ctor() { }

	// RVA: 0x198A588 Offset: 0x198A588 VA: 0x198A588 Slot: 4
	public virtual void PreActionProc(BattleData data) { }

	// RVA: 0x198A58C Offset: 0x198A58C VA: 0x198A58C Slot: 5
	public virtual void AfterEffectProc(BattleData data) { }
}

// Namespace: 
public class BattleActionEffect.BaseServant : BattleActionEffect.Base // TypeDefIndex: 8758
{
	// Fields
	protected int targetId; // 0x10

	// Methods

	// RVA: 0x198A598 Offset: 0x198A598 VA: 0x198A598
	public void .ctor() { }

	// RVA: 0x198A5A0 Offset: 0x198A5A0 VA: 0x198A5A0
	protected BattleServantData GetServant(BattleData data) { }

	// RVA: 0x198A5D8 Offset: 0x198A5D8 VA: 0x198A5D8 Slot: 5
	public override void AfterEffectProc(BattleData data) { }

	// RVA: 0x198A624 Offset: 0x198A624 VA: 0x198A624 Slot: 6
	protected virtual void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.MaxHpBuffServant : BattleActionEffect.BaseServant // TypeDefIndex: 8759
{
	// Fields
	protected BattleBuffData.BuffData[] buffArray; // 0x18
	protected int diffVal; // 0x20

	// Methods

	// RVA: 0x198A474 Offset: 0x198A474 VA: 0x198A474
	public void .ctor() { }

	// RVA: 0x198A6E4 Offset: 0x198A6E4 VA: 0x198A6E4 Slot: 7
	public virtual BattleActionEffect.MaxHpBuffServant InitBuff(BattleBuffData.BuffData[] buffArray, int targetId, int diffVal) { }

	// RVA: 0x198A6F4 Offset: 0x198A6F4 VA: 0x198A6F4 Slot: 4
	public override void PreActionProc(BattleData data) { }

	// RVA: 0x198A784 Offset: 0x198A784 VA: 0x198A784 Slot: 8
	protected virtual void PartialPreActionProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.AddChangeMaxHpBuff : BattleActionEffect.MaxHpBuffServant // TypeDefIndex: 8760
{
	// Methods

	// RVA: 0x198A46C Offset: 0x198A46C VA: 0x198A46C
	public void .ctor() { }

	// RVA: 0x198A47C Offset: 0x198A47C VA: 0x198A47C Slot: 8
	protected override void PartialPreActionProc(BattleData data, BattleServantData svt) { }

	// RVA: 0x198A4C8 Offset: 0x198A4C8 VA: 0x198A4C8 Slot: 6
	protected override void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.SubChangeMaxHpBuff : BattleActionEffect.MaxHpBuffServant // TypeDefIndex: 8761
{
	// Methods

	// RVA: 0x198A788 Offset: 0x198A788 VA: 0x198A788
	public void .ctor() { }

	// RVA: 0x198A790 Offset: 0x198A790 VA: 0x198A790 Slot: 8
	protected override void PartialPreActionProc(BattleData data, BattleServantData svt) { }

	// RVA: 0x198A7DC Offset: 0x198A7DC VA: 0x198A7DC Slot: 6
	protected override void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: 
public class BattleActionEffect.BaseFuncServant : BattleActionEffect.BaseServant // TypeDefIndex: 8762
{
	// Methods

	// RVA: 0x198A590 Offset: 0x198A590 VA: 0x198A590
	public void .ctor() { }
}

// Namespace: 
public class BattleActionEffect.LossHPFunc : BattleActionEffect.BaseFuncServant // TypeDefIndex: 8763
{
	// Fields
	private int lossHp; // 0x14
	private bool isSafe; // 0x18

	// Methods

	// RVA: 0x198A628 Offset: 0x198A628 VA: 0x198A628
	public void .ctor(int targetId, int lossHp, bool isSafe) { }

	// RVA: 0x198A66C Offset: 0x198A66C VA: 0x198A66C Slot: 6
	protected override void PartialAfterEffectProc(BattleData data, BattleServantData svt) { }
}

// Namespace: BattleAction
public abstract class ShiftHpData // TypeDefIndex: 8764
{
	// Fields
	protected int hpDetailIndex; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC5FF90 Offset: 0xC5FF90 VA: 0xC5FF90
	[DebuggerBrowsableAttribute] // RVA: 0xC5FF90 Offset: 0xC5FF90 VA: 0xC5FF90
	private List<ShiftHpData.HpDetail> <HpDetailList>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC5FFCC Offset: 0xC5FFCC VA: 0xC5FFCC
	[DebuggerBrowsableAttribute] // RVA: 0xC5FFCC Offset: 0xC5FFCC VA: 0xC5FFCC
	private int <CurGaugeIndex>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC60008 Offset: 0xC60008 VA: 0xC60008
	[DebuggerBrowsableAttribute] // RVA: 0xC60008 Offset: 0xC60008 VA: 0xC60008
	private int <MaxGaugeIconIndex>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xC60044 Offset: 0xC60044 VA: 0xC60044
	private static Func<ShiftHpData.HpDetail, float> <>f__am$cache0; // 0x0

	// Properties
	public List<ShiftHpData.HpDetail> HpDetailList { get; set; }
	public int CurGaugeIndex { get; set; }
	public int MaxGaugeIconIndex { get; set; }
	public abstract int PlayGaugeIndex { get; }
	public float TotalMovePer { get; }

	// Methods

	// RVA: 0xF69AF8 Offset: 0xF69AF8 VA: 0xF69AF8
	public void .ctor(int curGaugeIndex, int maxGaugeIconIndex) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC3E8 Offset: 0xCCC3E8 VA: 0xCCC3E8
	// RVA: 0xF69C5C Offset: 0xF69C5C VA: 0xF69C5C
	protected void set_HpDetailList(List<ShiftHpData.HpDetail> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC3F8 Offset: 0xCCC3F8 VA: 0xCCC3F8
	// RVA: 0xF69B80 Offset: 0xF69B80 VA: 0xF69B80
	public List<ShiftHpData.HpDetail> get_HpDetailList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC408 Offset: 0xCCC408 VA: 0xCCC408
	// RVA: 0xF69C4C Offset: 0xF69C4C VA: 0xF69C4C
	protected void set_CurGaugeIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC418 Offset: 0xCCC418 VA: 0xCCC418
	// RVA: 0xF69670 Offset: 0xF69670 VA: 0xF69670
	public int get_CurGaugeIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC428 Offset: 0xCCC428 VA: 0xCCC428
	// RVA: 0xF69C54 Offset: 0xF69C54 VA: 0xF69C54
	protected void set_MaxGaugeIconIndex(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC438 Offset: 0xCCC438 VA: 0xCCC438
	// RVA: 0xF6992C Offset: 0xF6992C VA: 0xF6992C
	public int get_MaxGaugeIconIndex() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_PlayGaugeIndex();

	// RVA: 0xF69238 Offset: 0xF69238 VA: 0xF69238
	public float get_TotalMovePer() { }

	// RVA: 0xF69608 Offset: 0xF69608 VA: 0xF69608
	public ShiftHpData.HpDetail GetHpDetail() { }

	// RVA: 0xF69C64 Offset: 0xF69C64 VA: 0xF69C64
	public void InitHpIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC448 Offset: 0xCCC448 VA: 0xCCC448
	// RVA: 0xF69C6C Offset: 0xF69C6C VA: 0xF69C6C
	private static float <get_TotalMovePer>m__0(ShiftHpData.HpDetail x) { }
}

// Namespace: 
public class ShiftHpData.HpDetail // TypeDefIndex: 8765
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC60054 Offset: 0xC60054 VA: 0xC60054
	[DebuggerBrowsableAttribute] // RVA: 0xC60054 Offset: 0xC60054 VA: 0xC60054
	private int <StartHp>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC60090 Offset: 0xC60090 VA: 0xC60090
	[DebuggerBrowsableAttribute] // RVA: 0xC60090 Offset: 0xC60090 VA: 0xC60090
	private int <EndHp>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC600CC Offset: 0xC600CC VA: 0xC600CC
	[DebuggerBrowsableAttribute] // RVA: 0xC600CC Offset: 0xC600CC VA: 0xC600CC
	private int <MaxHp>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC60108 Offset: 0xC60108 VA: 0xC60108
	[DebuggerBrowsableAttribute] // RVA: 0xC60108 Offset: 0xC60108 VA: 0xC60108
	private float <MovePer>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC60144 Offset: 0xC60144 VA: 0xC60144
	[DebuggerBrowsableAttribute] // RVA: 0xC60144 Offset: 0xC60144 VA: 0xC60144
	private bool <IsHpChange>k__BackingField; // 0x20

	// Properties
	public int StartHp { get; set; }
	public int EndHp { get; set; }
	public int MaxHp { get; set; }
	public float MovePer { get; set; }
	public bool IsHpChange { get; set; }

	// Methods

	// RVA: 0xF69B88 Offset: 0xF69B88 VA: 0xF69B88
	public void .ctor(int startHp, int endHp, int maxHp, bool isHpChange = False) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC458 Offset: 0xCCC458 VA: 0xCCC458
	// RVA: 0xF69C94 Offset: 0xF69C94 VA: 0xF69C94
	private void set_StartHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC468 Offset: 0xCCC468 VA: 0xCCC468
	// RVA: 0xF69678 Offset: 0xF69678 VA: 0xF69678
	public int get_StartHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC478 Offset: 0xCCC478 VA: 0xCCC478
	// RVA: 0xF69C9C Offset: 0xF69C9C VA: 0xF69C9C
	private void set_EndHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC488 Offset: 0xCCC488 VA: 0xCCC488
	// RVA: 0xF69680 Offset: 0xF69680 VA: 0xF69680
	public int get_EndHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC498 Offset: 0xCCC498 VA: 0xCCC498
	// RVA: 0xF69CA4 Offset: 0xF69CA4 VA: 0xF69CA4
	private void set_MaxHp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC4A8 Offset: 0xCCC4A8 VA: 0xCCC4A8
	// RVA: 0xF69688 Offset: 0xF69688 VA: 0xF69688
	public int get_MaxHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC4B8 Offset: 0xCCC4B8 VA: 0xCCC4B8
	// RVA: 0xF69CB8 Offset: 0xF69CB8 VA: 0xF69CB8
	private void set_MovePer(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC4C8 Offset: 0xCCC4C8 VA: 0xCCC4C8
	// RVA: 0xF69690 Offset: 0xF69690 VA: 0xF69690
	public float get_MovePer() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC4D8 Offset: 0xCCC4D8 VA: 0xCCC4D8
	// RVA: 0xF69CAC Offset: 0xF69CAC VA: 0xF69CAC
	private void set_IsHpChange(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC4E8 Offset: 0xCCC4E8 VA: 0xCCC4E8
	// RVA: 0xF69668 Offset: 0xF69668 VA: 0xF69668
	public bool get_IsHpChange() { }
}

// Namespace: BattleAction
public class ShiftUpHpData : ShiftHpData // TypeDefIndex: 8766
{
	// Properties
	public override int PlayGaugeIndex { get; }

	// Methods

	// RVA: 0xF69CC0 Offset: 0xF69CC0 VA: 0xF69CC0
	public void .ctor(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }

	// RVA: 0xF69E84 Offset: 0xF69E84 VA: 0xF69E84 Slot: 4
	public override int get_PlayGaugeIndex() { }
}

// Namespace: BattleAction
public class ShiftDownHpData : ShiftHpData // TypeDefIndex: 8767
{
	// Properties
	public override int PlayGaugeIndex { get; }

	// Methods

	// RVA: 0xF69934 Offset: 0xF69934 VA: 0xF69934
	public void .ctor(int curGaugeIndex, int maxGaugeIconIndex, SimpleHpData prevHp, SimpleHpData curHp) { }

	// RVA: 0xF69C44 Offset: 0xF69C44 VA: 0xF69C44 Slot: 4
	public override int get_PlayGaugeIndex() { }
}

// Namespace: BattleAction
public abstract class BasePlayShiftGauge // TypeDefIndex: 8768
{
	// Fields
	protected BattleActionData.BaseShiftGaugeData shiftData; // 0x10
	protected Action<int> callBack; // 0x18

	// Properties
	protected abstract BattleActionData.BaseShiftGaugeData.PlayedStateFlag PlayedFlag { get; }

	// Methods

	// RVA: 0xF68E7C Offset: 0xF68E7C VA: 0xF68E7C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract BattleActionData.BaseShiftGaugeData.PlayedStateFlag get_PlayedFlag();

	// RVA: 0xF68E84 Offset: 0xF68E84 VA: 0xF68E84 Slot: 5
	protected virtual void StartPlayEffect(BattlePerformanceStatus status) { }

	// RVA: 0xF68E88 Offset: 0xF68E88 VA: 0xF68E88 Slot: 6
	public virtual void OnCompleteChangeHp(BattleServantParamComponent comp) { }

	// RVA: 0xF68E8C Offset: 0xF68E8C VA: 0xF68E8C Slot: 7
	public virtual BasePlayShiftGauge Init(BattleActionData.BaseShiftGaugeData data) { }

	// RVA: 0xF68E94 Offset: 0xF68E94 VA: 0xF68E94
	public void Start(BattlePerformanceStatus status, Action<int> callBack) { }

	// RVA: 0xF68F04 Offset: 0xF68F04 VA: 0xF68F04
	protected void End() { }
}

// Namespace: BattleAction
public class PlayShiftGaugeMain : BasePlayShiftGauge // TypeDefIndex: 8769
{
	// Fields
	protected float hpGaugeSpeed; // 0x20
	protected ShiftHpData curShiftHp; // 0x28

	// Properties
	protected override BattleActionData.BaseShiftGaugeData.PlayedStateFlag PlayedFlag { get; }

	// Methods

	// RVA: 0xF68FC4 Offset: 0xF68FC4 VA: 0xF68FC4
	public void .ctor() { }

	// RVA: 0xF69300 Offset: 0xF69300 VA: 0xF69300 Slot: 4
	protected override BattleActionData.BaseShiftGaugeData.PlayedStateFlag get_PlayedFlag() { }

	// RVA: 0xF69308 Offset: 0xF69308 VA: 0xF69308 Slot: 8
	protected virtual void PlayEffectMain(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0xF6930C Offset: 0xF6930C VA: 0xF6930C Slot: 5
	protected override void StartPlayEffect(BattlePerformanceStatus status) { }

	// RVA: 0xF69414 Offset: 0xF69414 VA: 0xF69414 Slot: 9
	protected virtual void NextPlayEffect(BattleServantParamComponent comp) { }

	// RVA: 0xF6948C Offset: 0xF6948C VA: 0xF6948C Slot: 10
	protected virtual void StartHpChangeGauge(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0xF6951C Offset: 0xF6951C VA: 0xF6951C Slot: 11
	protected virtual void NextHpChangeGauge(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0xF69698 Offset: 0xF69698 VA: 0xF69698 Slot: 6
	public override void OnCompleteChangeHp(BattleServantParamComponent comp) { }

	// RVA: 0xF69124 Offset: 0xF69124 VA: 0xF69124
	protected void InitNextTdGauge(BattleServantParamComponent comp) { }
}

// Namespace: BattleAction
public class PlayUpShiftGaugeUpMain : PlayShiftGaugeMain // TypeDefIndex: 8770
{
	// Methods

	// RVA: 0xF696A8 Offset: 0xF696A8 VA: 0xF696A8
	public void .ctor() { }

	// RVA: 0xF696BC Offset: 0xF696BC VA: 0xF696BC Slot: 8
	protected override void PlayEffectMain(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0xF69824 Offset: 0xF69824 VA: 0xF69824
	protected void DelayStartHpChangeGauge(BattleServantParamComponent comp, ShiftHpData hpData) { }
}

// Namespace: BattleAction
public class PlayDownShiftGaugeMain : PlayShiftGaugeMain // TypeDefIndex: 8771
{
	// Methods

	// RVA: 0xF68FB0 Offset: 0xF68FB0 VA: 0xF68FB0
	public void .ctor() { }

	// RVA: 0xF68FD8 Offset: 0xF68FD8 VA: 0xF68FD8 Slot: 8
	protected override void PlayEffectMain(BattleServantParamComponent comp, ShiftHpData hpData) { }

	// RVA: 0xF69178 Offset: 0xF69178 VA: 0xF69178
	protected void DelayPlayDownShiftEffect(BattleServantParamComponent comp, ShiftHpData hpData) { }
}

// Namespace: 
public class BattleActionWaitCond // TypeDefIndex: 8772
{
	// Methods

	// RVA: 0x198B0F8 Offset: 0x198B0F8 VA: 0x198B0F8
	public void .ctor() { }
}

// Namespace: 
public class BattleActionWaitCond.Base // TypeDefIndex: 8773
{
	// Methods

	// RVA: 0x198B100 Offset: 0x198B100 VA: 0x198B100
	public void .ctor() { }

	// RVA: 0x198B108 Offset: 0x198B108 VA: 0x198B108 Slot: 4
	public virtual bool IsWait(float elapsedTime) { }
}

// Namespace: 
public class BattleActionWaitCond.LimitTime : BattleActionWaitCond.Base // TypeDefIndex: 8774
{
	// Fields
	protected float limit; // 0x10

	// Methods

	// RVA: 0x198B110 Offset: 0x198B110 VA: 0x198B110
	public void .ctor(float limit) { }

	// RVA: 0x198B144 Offset: 0x198B144 VA: 0x198B144 Slot: 5
	protected virtual bool IsWaitCond() { }

	// RVA: 0x198B14C Offset: 0x198B14C VA: 0x198B14C
	protected bool IsInLimitTime(float elapsedTime) { }

	// RVA: 0x198B15C Offset: 0x198B15C VA: 0x198B15C Slot: 4
	public override bool IsWait(float elapsedTime) { }
}

// Namespace: 
public class BattleActionWaitCond.UntilSideEffectInvisible : BattleActionWaitCond.LimitTime // TypeDefIndex: 8775
{
	// Fields
	private BattlePerformance perf; // 0x18

	// Methods

	// RVA: 0x198B17C Offset: 0x198B17C VA: 0x198B17C
	public void .ctor(BattlePerformance perf) { }

	// RVA: 0x198B1B0 Offset: 0x198B1B0 VA: 0x198B1B0 Slot: 5
	protected override bool IsWaitCond() { }
}

// Namespace: 
public class BattleActorEffectMesh : MonoBehaviour // TypeDefIndex: 8776
{
	// Fields
	[TooltipAttribute] // RVA: 0xC60180 Offset: 0xC60180 VA: 0xC60180
	public ParticleSystem[] particles; // 0x18
	public BattleActorEffectMesh.MeshType type; // 0x20
	[TooltipAttribute] // RVA: 0xC601B8 Offset: 0xC601B8 VA: 0xC601B8
	public string topNodeName; // 0x28
	[TooltipAttribute] // RVA: 0xC601F0 Offset: 0xC601F0 VA: 0xC601F0
	public string meshObjName; // 0x30

	// Methods

	// RVA: 0x1782488 Offset: 0x1782488 VA: 0x1782488
	public void .ctor() { }

	// RVA: 0x1782510 Offset: 0x1782510 VA: 0x1782510
	private void OnTransformParentChanged() { }
}

// Namespace: 
public enum BattleActorEffectMesh.MeshType // TypeDefIndex: 8777
{
	// Fields
	public int value__; // 0x0
	public const BattleActorEffectMesh.MeshType SkinnedMeshRenderer = 0;
	public const BattleActorEffectMesh.MeshType MeshRenderer = 1;
}

// Namespace: 
public class BattleActorNodeLookAt : MonoBehaviour // TypeDefIndex: 8778
{
	// Fields
	public BattleActorNodeLookAt.Type type; // 0x18
	public Vector3 lookWorldVec; // 0x1C
	public Transform lookTargetObj; // 0x28
	public float speed; // 0x30
	private Transform selfTransform; // 0x38

	// Methods

	// RVA: 0x1782964 Offset: 0x1782964 VA: 0x1782964
	public void .ctor() { }

	// RVA: 0x1782974 Offset: 0x1782974 VA: 0x1782974
	private void Awake() { }

	// RVA: 0x178299C Offset: 0x178299C VA: 0x178299C
	private void LateUpdate() { }
}

// Namespace: 
public enum BattleActorNodeLookAt.Type // TypeDefIndex: 8779
{
	// Fields
	public int value__; // 0x0
	public const BattleActorNodeLookAt.Type WorldLook = 0;
	public const BattleActorNodeLookAt.Type TargetLook = 1;
}

// Namespace: 
public class BattleActorRotationComponent : MonoBehaviour // TypeDefIndex: 8780
{
	// Fields
	[HeaderAttribute] // RVA: 0xC60228 Offset: 0xC60228 VA: 0xC60228
	public bool IsRotation; // 0x18
	[HeaderAttribute] // RVA: 0xC60260 Offset: 0xC60260 VA: 0xC60260
	public float RotationSpeed_Y; // 0x1C
	private float RotationY; // 0x20
	private float ResetRotationY; // 0x24

	// Properties
	private float RotationSpeedYPerSecond { get; }

	// Methods

	// RVA: 0x1782C6C Offset: 0x1782C6C VA: 0x1782C6C
	public void .ctor() { }

	// RVA: 0x1782C7C Offset: 0x1782C7C VA: 0x1782C7C
	private float get_RotationSpeedYPerSecond() { }

	// RVA: 0x1782C8C Offset: 0x1782C8C VA: 0x1782C8C
	private void Start() { }

	// RVA: 0x1782CEC Offset: 0x1782CEC VA: 0x1782CEC
	private void Update() { }

	// RVA: 0x1782DF8 Offset: 0x1782DF8 VA: 0x1782DF8
	public void RotationStop() { }

	// RVA: 0x1782ECC Offset: 0x1782ECC VA: 0x1782ECC
	public void RotationReStart() { }
}

// Namespace: 
public class BattleActorShakeComponent : MonoBehaviour // TypeDefIndex: 8781
{
	// Fields
	[HeaderAttribute] // RVA: 0xC60298 Offset: 0xC60298 VA: 0xC60298
	public bool IsAnimation; // 0x18
	[HeaderAttribute] // RVA: 0xC602D0 Offset: 0xC602D0 VA: 0xC602D0
	public AnimationCurve animationCurvel; // 0x20
	[HeaderAttribute] // RVA: 0xC60308 Offset: 0xC60308 VA: 0xC60308
	public float animationSpeed; // 0x28
	private float elapsedTime; // 0x2C
	[HeaderAttribute] // RVA: 0xC60340 Offset: 0xC60340 VA: 0xC60340
	public Vector3 vector; // 0x30

	// Methods

	// RVA: 0x1782ED8 Offset: 0x1782ED8 VA: 0x1782ED8
	public void .ctor() { }

	// RVA: 0x1782EE8 Offset: 0x1782EE8 VA: 0x1782EE8
	private void Update() { }
}

// Namespace: 
public abstract class BattleAttack // TypeDefIndex: 8782
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC60378 Offset: 0xC60378 VA: 0xC60378
	[DebuggerBrowsableAttribute] // RVA: 0xC60378 Offset: 0xC60378 VA: 0xC60378
	private int <AttackedInAction>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC603B4 Offset: 0xC603B4 VA: 0xC603B4
	[DebuggerBrowsableAttribute] // RVA: 0xC603B4 Offset: 0xC603B4 VA: 0xC603B4
	private BattleLogic.LOGICTYPE[] <LogicArray>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC603F0 Offset: 0xC603F0 VA: 0xC603F0
	private static Func<BattleLogic.LOGICTYPE, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC60400 Offset: 0xC60400 VA: 0xC60400
	private static Func<BattleLogic.LOGICTYPE, bool> <>f__am$cache1; // 0x8

	// Properties
	public abstract bool IsEnemy { get; }
	public int AttackedInAction { get; set; }
	public BattleLogic.LOGICTYPE[] LogicArray { get; set; }

	// Methods

	// RVA: 0x1783098 Offset: 0x1783098 VA: 0x1783098
	public void .ctor(BattleLogic.LOGICTYPE[] logicArray) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_IsEnemy();

	[CompilerGeneratedAttribute] // RVA: 0xCCC4F8 Offset: 0xCCC4F8 VA: 0xCCC4F8
	// RVA: 0x178320C Offset: 0x178320C VA: 0x178320C
	private void set_AttackedInAction(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC508 Offset: 0xCCC508 VA: 0xCCC508
	// RVA: 0x1783204 Offset: 0x1783204 VA: 0x1783204
	public int get_AttackedInAction() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC518 Offset: 0xCCC518 VA: 0xCCC518
	// RVA: 0x17831FC Offset: 0x17831FC VA: 0x17831FC
	private void set_LogicArray(BattleLogic.LOGICTYPE[] value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC528 Offset: 0xCCC528 VA: 0xCCC528
	// RVA: 0x1783214 Offset: 0x1783214 VA: 0x1783214
	public BattleLogic.LOGICTYPE[] get_LogicArray() { }

	// RVA: 0x178321C Offset: 0x178321C VA: 0x178321C
	public bool IsActionAttacked(bool isEnemy) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC538 Offset: 0xCCC538 VA: 0xCCC538
	// RVA: 0x1783238 Offset: 0x1783238 VA: 0x1783238
	private static bool <BattleAttack>m__0(BattleLogic.LOGICTYPE x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC548 Offset: 0xCCC548 VA: 0xCCC548
	// RVA: 0x1783244 Offset: 0x1783244 VA: 0x1783244
	private static bool <BattleAttack>m__1(BattleLogic.LOGICTYPE x) { }
}

// Namespace: 
public enum BattleAttack.SideType // TypeDefIndex: 8783
{
	// Fields
	public int value__; // 0x0
	public const BattleAttack.SideType PLAYER = 1;
	public const BattleAttack.SideType ENEMY = 2;
	public const BattleAttack.SideType ALL = 3;
}

// Namespace: 
public class BattleAttackPlayer : BattleAttack // TypeDefIndex: 8784
{
	// Properties
	public override bool IsEnemy { get; }

	// Methods

	// RVA: 0x17835C8 Offset: 0x17835C8 VA: 0x17835C8
	public void .ctor(BattleLogic.LOGICTYPE[] logicArray) { }

	// RVA: 0x17837EC Offset: 0x17837EC VA: 0x17837EC Slot: 4
	public override bool get_IsEnemy() { }
}

// Namespace: 
public class BattleAttackEnemy : BattleAttack // TypeDefIndex: 8785
{
	// Properties
	public override bool IsEnemy { get; }

	// Methods

	// RVA: 0x1783250 Offset: 0x1783250 VA: 0x1783250
	public void .ctor(BattleLogic.LOGICTYPE[] logicArray) { }

	// RVA: 0x1783254 Offset: 0x1783254 VA: 0x1783254 Slot: 4
	public override bool get_IsEnemy() { }
}

// Namespace: 
public class BattleAttackManager // TypeDefIndex: 8786
{
	// Fields
	protected int attackIndex; // 0x10
	protected List<BattleAttack> attackList; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC60410 Offset: 0xC60410 VA: 0xC60410
	[DebuggerBrowsableAttribute] // RVA: 0xC60410 Offset: 0xC60410 VA: 0xC60410
	private bool <IsTurnEnd>k__BackingField; // 0x20

	// Properties
	public bool IsTurnStart { get; }
	public bool IsTurnEnd { get; set; }
	public bool IsEnemyAttack { get; }
	protected BattleAttack Current { get; }
	protected BattleAttack Previous { get; }
	protected virtual bool IsTurnLastAttackPlayer { get; }

	// Methods

	// RVA: 0x178325C Offset: 0x178325C VA: 0x178325C
	public void .ctor() { }

	// RVA: 0x17832DC Offset: 0x17832DC VA: 0x17832DC
	public static BattleAttackManager Make(bool isPrecedingPlayer, BattleLogic.LOGICTYPE[] allLogicArray) { }

	// RVA: 0x1783388 Offset: 0x1783388 VA: 0x1783388
	public bool get_IsTurnStart() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC558 Offset: 0xCCC558 VA: 0xCCC558
	// RVA: 0x1783398 Offset: 0x1783398 VA: 0x1783398
	private void set_IsTurnEnd(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCC568 Offset: 0xCCC568 VA: 0xCCC568
	// RVA: 0x17833A4 Offset: 0x17833A4 VA: 0x17833A4
	public bool get_IsTurnEnd() { }

	// RVA: 0x17833AC Offset: 0x17833AC VA: 0x17833AC
	public bool get_IsEnemyAttack() { }

	// RVA: 0x17833FC Offset: 0x17833FC VA: 0x17833FC
	protected BattleAttack get_Current() { }

	// RVA: 0x1783454 Offset: 0x1783454 VA: 0x1783454
	protected BattleAttack get_Previous() { }

	// RVA: 0x178352C Offset: 0x178352C VA: 0x178352C Slot: 4
	protected virtual bool get_IsTurnLastAttackPlayer() { }

	// RVA: 0x1783534 Offset: 0x1783534 VA: 0x1783534 Slot: 5
	public virtual BattleAttackManager Init(BattleLogic.LOGICTYPE[] allLogicArray) { }

	// RVA: 0x17835CC Offset: 0x17835CC VA: 0x17835CC
	public BattleLogic.LOGICTYPE GetLogicType(int index) { }

	// RVA: 0x1783664 Offset: 0x1783664 VA: 0x1783664
	public bool IsNextActionAttacked(bool isEnemy) { }

	// RVA: 0x17836B8 Offset: 0x17836B8 VA: 0x17836B8
	public bool IsPrevActionAttacked(bool isEnemy) { }

	// RVA: 0x17834B8 Offset: 0x17834B8 VA: 0x17834B8
	protected int PrevIndex() { }

	// RVA: 0x178370C Offset: 0x178370C VA: 0x178370C
	public void Next() { }

	// RVA: 0x1783730 Offset: 0x1783730 VA: 0x1783730 Slot: 6
	public virtual void Reset() { }

	// RVA: 0x1783738 Offset: 0x1783738 VA: 0x1783738 Slot: 7
	public virtual void InitTurn() { }

	// RVA: 0x1783740 Offset: 0x1783740 VA: 0x1783740
	public void SetEndActionAttack(bool isPlayer) { }

	// RVA: 0x1783780 Offset: 0x1783780 VA: 0x1783780 Slot: 8
	public virtual void GetSaveData(BattleData.SaveData save) { }

	// RVA: 0x17837B0 Offset: 0x17837B0 VA: 0x17837B0 Slot: 9
	public virtual void SetSaveData(BattleData.SaveData save) { }

	// RVA: 0x17837E4 Offset: 0x17837E4 VA: 0x17837E4 Slot: 10
	public virtual void PrevProcTactical(BattleData data) { }

	// RVA: 0x17837E8 Offset: 0x17837E8 VA: 0x17837E8 Slot: 11
	public virtual void AfterLoadQuest(BattleData data) { }
}

// Namespace: 
public class PlayerFirstAttackManager : BattleAttackManager // TypeDefIndex: 8787
{
	// Methods

	// RVA: 0x177E65C Offset: 0x177E65C VA: 0x177E65C
	public void .ctor() { }
}

// Namespace: 
public class EnemyFirstAttackManager : BattleAttackManager // TypeDefIndex: 8788
{
	// Properties
	protected override bool IsTurnLastAttackPlayer { get; }

	// Methods

	// RVA: 0x16FDB2C Offset: 0x16FDB2C VA: 0x16FDB2C
	public void .ctor() { }

	// RVA: 0x16FDB34 Offset: 0x16FDB34 VA: 0x16FDB34 Slot: 4
	protected override bool get_IsTurnLastAttackPlayer() { }

	// RVA: 0x16FDB3C Offset: 0x16FDB3C VA: 0x16FDB3C Slot: 5
	public override BattleAttackManager Init(BattleLogic.LOGICTYPE[] allLogicArray) { }

	// RVA: 0x16FDD44 Offset: 0x16FDD44 VA: 0x16FDD44 Slot: 10
	public override void PrevProcTactical(BattleData data) { }
}

// Namespace: 
public class BattleBgComponent : MonoBehaviour // TypeDefIndex: 8789
{
	// Fields
	public bool isRecAnimation; // 0x18
	public string motionKey; // 0x20
	public bool isLoadEndPlay; // 0x28
	public bool isCutNodeNoble; // 0x29
	private BattleActionCamera actionCamera; // 0x30

	// Methods

	// RVA: 0x17837F4 Offset: 0x17837F4 VA: 0x17837F4
	public void .ctor() { }

	// RVA: 0x17837FC Offset: 0x17837FC VA: 0x17837FC
	public bool checkKey(string key) { }

	// RVA: 0x1783810 Offset: 0x1783810 VA: 0x1783810
	public void playAnimation(string animName, float timeline) { }

	// RVA: 0x1783A9C Offset: 0x1783A9C VA: 0x1783A9C
	public void playLoadEndAnimation() { }

	// RVA: 0x1783C28 Offset: 0x1783C28 VA: 0x1783C28
	public void setCutNodeNoble(bool flg) { }

	// RVA: 0x1783C68 Offset: 0x1783C68 VA: 0x1783C68
	public void setActionCamera(BattleActionCamera inActionCamera) { }

	// RVA: 0x1783C70 Offset: 0x1783C70 VA: 0x1783C70
	public void shakeCamera(float power) { }

	// RVA: 0x1783D90 Offset: 0x1783D90 VA: 0x1783D90
	public void playCameraAnimation(string name) { }

	// RVA: 0x1783E40 Offset: 0x1783E40 VA: 0x1783E40
	public bool isSave() { }

	// RVA: 0x1783E48 Offset: 0x1783E48 VA: 0x1783E48
	public BattleBgComponent.SaveData getSaveData() { }

	// RVA: 0x17846C8 Offset: 0x17846C8 VA: 0x17846C8
	public void loadSaveData(BattleBgComponent.SaveData save) { }
}

// Namespace: 
public class BattleBgComponent.SaveData // TypeDefIndex: 8790
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC6044C Offset: 0xC6044C VA: 0xC6044C
	public string animName; // 0x10
	[PackKeyAttribute] // RVA: 0xC60484 Offset: 0xC60484 VA: 0xC60484
	public float timeline; // 0x18

	// Methods

	// RVA: 0x1784650 Offset: 0x1784650 VA: 0x1784650
	public void .ctor() { }
}

// Namespace: 
public class BattleBoostItem // TypeDefIndex: 8791
{
	// Fields
	public ItemEntity item; // 0x10
	public int skillId; // 0x18

	// Methods

	// RVA: 0x1784D88 Offset: 0x1784D88 VA: 0x1784D88
	public void .ctor(ItemEntity item, int skillId) { }

	// RVA: 0x1784DC4 Offset: 0x1784DC4 VA: 0x1784DC4
	public bool checkEffectTiming(BattleBoostItemInfoData.EFFECT_TIMING timing) { }
}

// Namespace: 
public class BattleBoostItemInfoData : BattleSkillInfoData // TypeDefIndex: 8792
{
	// Fields
	public static readonly string KEY_SCRIPT_BOOST_EFFECT_ICON; // 0x0
	public static readonly string KEY_SCRIPT_BOOST_EFFECT_TIMING; // 0x8
	public BattleBoostItemInfoData.EFFECT_TIMING effectTiming; // 0x70
	public ItemEntity boostItemEntity; // 0x78

	// Methods

	// RVA: 0x1784E68 Offset: 0x1784E68 VA: 0x1784E68
	public void .ctor() { }

	// RVA: 0x1784E70 Offset: 0x1784E70 VA: 0x1784E70
	public bool checkEffectTiming(BattleBoostItemInfoData.EFFECT_TIMING timing) { }

	// RVA: 0x1784F14 Offset: 0x1784F14 VA: 0x1784F14
	public bool useCustomEffectIcon() { }

	// RVA: 0x1784FAC Offset: 0x1784FAC VA: 0x1784FAC
	public int effectIconAtlasImageId() { }

	// RVA: 0x1785054 Offset: 0x1785054 VA: 0x1785054
	public string infoMessage() { }

	// RVA: 0x1785118 Offset: 0x1785118 VA: 0x1785118
	private static void .cctor() { }
}

// Namespace: 
public enum BattleBoostItemInfoData.EFFECT_TIMING // TypeDefIndex: 8793
{
	// Fields
	public int value__; // 0x0
	public const BattleBoostItemInfoData.EFFECT_TIMING BATTLE_ACTION = 0;
	public const BattleBoostItemInfoData.EFFECT_TIMING BATTLE_START = 1;
}

// Namespace: 
public class BattleBuddyPointInfo // TypeDefIndex: 8794
