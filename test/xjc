	public abstract void set_enabled(bool value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_time();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_time(float value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_normalizedTime();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void set_normalizedTime(float value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_speed();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void set_speed(float value);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_name();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void set_name(string value);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract float get_weight();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void set_weight(float value);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract float get_length();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract AnimationClip get_clip();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract WrapMode get_wrapMode();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract WrapMode get_overwrittenWrapMode();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void set_overwrittenWrapMode(WrapMode value);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool get_isOverwrittenWrapMode();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract float get_wrapModeChangedTime();
}

// Namespace: 
public class SimpleAnimationPlayable.StateHandle : SimpleAnimationPlayable.IState // TypeDefIndex: 3719
{
	// Fields
	private SimpleAnimationPlayable m_Parent; // 0x10
	private int m_Index; // 0x18
	private Playable m_Target; // 0x20

	// Properties
	public bool enabled { get; set; }
	public float time { get; set; }
	public float normalizedTime { get; set; }
	public float speed { get; set; }
	public string name { get; set; }
	public float weight { get; set; }
	public float length { get; }
	public AnimationClip clip { get; }
	public WrapMode wrapMode { get; }
	public WrapMode overwrittenWrapMode { get; set; }
	public bool isOverwrittenWrapMode { get; }
	public float wrapModeChangedTime { get; }
	public int index { get; }

	// Methods

	// RVA: 0x131C430 Offset: 0x131C430 VA: 0x131C430
	public void .ctor(SimpleAnimationPlayable s, int index, Playable target) { }

	// RVA: 0x131EAE0 Offset: 0x131EAE0 VA: 0x131EAE0 Slot: 4
	public bool IsValid() { }

	// RVA: 0x131EB28 Offset: 0x131EB28 VA: 0x131EB28 Slot: 5
	public bool get_enabled() { }

	// RVA: 0x131EBF8 Offset: 0x131EBF8 VA: 0x131EBF8 Slot: 6
	public void set_enabled(bool value) { }

	// RVA: 0x131ED74 Offset: 0x131ED74 VA: 0x131ED74 Slot: 7
	public float get_time() { }

	// RVA: 0x131EE30 Offset: 0x131EE30 VA: 0x131EE30 Slot: 8
	public void set_time(float value) { }

	// RVA: 0x131EEFC Offset: 0x131EEFC VA: 0x131EEFC Slot: 9
	public float get_normalizedTime() { }

	// RVA: 0x131F0EC Offset: 0x131F0EC VA: 0x131F0EC Slot: 10
	public void set_normalizedTime(float value) { }

	// RVA: 0x131F200 Offset: 0x131F200 VA: 0x131F200 Slot: 11
	public float get_speed() { }

	// RVA: 0x131F340 Offset: 0x131F340 VA: 0x131F340 Slot: 12
	public void set_speed(float value) { }

	// RVA: 0x131F4A0 Offset: 0x131F4A0 VA: 0x131F4A0 Slot: 13
	public string get_name() { }

	// RVA: 0x131F5E0 Offset: 0x131F5E0 VA: 0x131F5E0 Slot: 14
	public void set_name(string value) { }

	// RVA: 0x131F764 Offset: 0x131F764 VA: 0x131F764 Slot: 15
	public float get_weight() { }

	// RVA: 0x131F834 Offset: 0x131F834 VA: 0x131F834 Slot: 16
	public void set_weight(float value) { }

	// RVA: 0x131F9CC Offset: 0x131F9CC VA: 0x131F9CC Slot: 17
	public float get_length() { }

	// RVA: 0x131FBB4 Offset: 0x131FBB4 VA: 0x131FBB4 Slot: 18
	public AnimationClip get_clip() { }

	// RVA: 0x131FCF4 Offset: 0x131FCF4 VA: 0x131FCF4 Slot: 19
	public WrapMode get_wrapMode() { }

	// RVA: 0x131FE34 Offset: 0x131FE34 VA: 0x131FE34 Slot: 20
	public WrapMode get_overwrittenWrapMode() { }

	// RVA: 0x131FF74 Offset: 0x131FF74 VA: 0x131FF74 Slot: 21
	public void set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x13200F0 Offset: 0x13200F0 VA: 0x13200F0 Slot: 22
	public bool get_isOverwrittenWrapMode() { }

	// RVA: 0x1320230 Offset: 0x1320230 VA: 0x1320230 Slot: 23
	public float get_wrapModeChangedTime() { }

	// RVA: 0x131D148 Offset: 0x131D148 VA: 0x131D148
	public int get_index() { }
}

// Namespace: 
private class SimpleAnimationPlayable.StateInfo // TypeDefIndex: 3720
{
	// Fields
	private bool m_Enabled; // 0x10
	private int m_Index; // 0x14
	private string m_StateName; // 0x18
	private bool m_Fading; // 0x20
	private float m_Time; // 0x24
	private float m_TargetWeight; // 0x28
	private float m_Weight; // 0x2C
	private float m_FadeSpeed; // 0x30
	private AnimationClip m_Clip; // 0x38
	private Playable m_Playable; // 0x40
	private WrapMode m_WrapMode; // 0x50
	private WrapMode m_OverwrittenWrapMode; // 0x54
	private bool m_IsOverwrittenWrapMode; // 0x58
	private float m_WrapModeChangedTime; // 0x5C
	private bool m_IsClone; // 0x60
	public SimpleAnimationPlayable.StateHandle m_ParentState; // 0x68
	private bool m_WeightDirty; // 0x70
	private bool m_EnabledDirty; // 0x71
	private bool m_TimeIsUpToDate; // 0x72

	// Properties
	public bool enabled { get; }
	public int index { get; set; }
	public string stateName { get; set; }
	public bool fading { get; }
	public float targetWeight { get; }
	public float weight { get; }
	public float fadeSpeed { get; }
	public float speed { get; set; }
	public float playableDuration { get; }
	public AnimationClip clip { get; }
	public bool isDone { get; }
	public Playable playable { get; }
	public WrapMode wrapMode { get; }
	public WrapMode overwrittenWrapMode { get; set; }
	public bool isOverwrittenWrapMode { get; }
	public float wrapModeChangedTime { get; }
	public bool isClone { get; }
	public SimpleAnimationPlayable.StateHandle parentState { get; }
	public bool enabledDirty { get; }
	public bool weightDirty { get; }

	// Methods

	// RVA: 0x1320370 Offset: 0x1320370 VA: 0x1320370
	public void .ctor() { }

	// RVA: 0x131C7CC Offset: 0x131C7CC VA: 0x131C7CC
	public void Initialize(string name, AnimationClip clip, WrapMode wrapMode) { }

	// RVA: 0x131D398 Offset: 0x131D398 VA: 0x131D398
	public float GetTime() { }

	// RVA: 0x1320378 Offset: 0x1320378 VA: 0x1320378
	public void SetTime(float newTime) { }

	// RVA: 0x131CD14 Offset: 0x131CD14 VA: 0x131CD14
	public void Enable() { }

	// RVA: 0x131DF90 Offset: 0x131DF90 VA: 0x131DF90
	public void Disable() { }

	// RVA: 0x131C7EC Offset: 0x131C7EC VA: 0x131C7EC
	public void Pause() { }

	// RVA: 0x131DF3C Offset: 0x131DF3C VA: 0x131DF3C
	public void Play() { }

	// RVA: 0x131DEB0 Offset: 0x131DEB0 VA: 0x131DEB0
	public void Stop() { }

	// RVA: 0x131CD30 Offset: 0x131CD30 VA: 0x131CD30
	public void ForceWeight(float weight) { }

	// RVA: 0x131DEA0 Offset: 0x131DEA0 VA: 0x131DEA0
	public void SetWeight(float weight) { }

	// RVA: 0x131D65C Offset: 0x131D65C VA: 0x131D65C
	public void FadeTo(float weight, float speed) { }

	// RVA: 0x132041C Offset: 0x132041C VA: 0x132041C
	public void DestroyPlayable() { }

	// RVA: 0x131D864 Offset: 0x131D864 VA: 0x131D864
	public void SetAsCloneOf(SimpleAnimationPlayable.StateHandle handle) { }

	// RVA: 0x131BF24 Offset: 0x131BF24 VA: 0x131BF24
	public bool get_enabled() { }

	// RVA: 0x131BF2C Offset: 0x131BF2C VA: 0x131BF2C
	public int get_index() { }

	// RVA: 0x13204B0 Offset: 0x13204B0 VA: 0x13204B0
	public void set_index(int value) { }

	// RVA: 0x131D85C Offset: 0x131D85C VA: 0x131D85C
	public string get_stateName() { }

	// RVA: 0x13204B8 Offset: 0x13204B8 VA: 0x13204B8
	public void set_stateName(string value) { }

	// RVA: 0x131D644 Offset: 0x131D644 VA: 0x131D644
	public bool get_fading() { }

	// RVA: 0x131D64C Offset: 0x131D64C VA: 0x131D64C
	public float get_targetWeight() { }

	// RVA: 0x131D63C Offset: 0x131D63C VA: 0x131D63C
	public float get_weight() { }

	// RVA: 0x131D654 Offset: 0x131D654 VA: 0x131D654
	public float get_fadeSpeed() { }

	// RVA: 0x131D340 Offset: 0x131D340 VA: 0x131D340
	public float get_speed() { }

	// RVA: 0x13204C0 Offset: 0x13204C0 VA: 0x13204C0
	public void set_speed(float value) { }

	// RVA: 0x131D41C Offset: 0x131D41C VA: 0x131D41C
	public float get_playableDuration() { }

	// RVA: 0x131D40C Offset: 0x131D40C VA: 0x131D40C
	public AnimationClip get_clip() { }

	// RVA: 0x131C7E4 Offset: 0x131C7E4 VA: 0x131C7E4
	public void SetPlayable(Playable playable) { }

	// RVA: 0x131D2F0 Offset: 0x131D2F0 VA: 0x131D2F0
	public bool get_isDone() { }

	// RVA: 0x131C424 Offset: 0x131C424 VA: 0x131C424
	public Playable get_playable() { }

	// RVA: 0x131C7DC Offset: 0x131C7DC VA: 0x131C7DC
	public WrapMode get_wrapMode() { }

	// RVA: 0x131D2E8 Offset: 0x131D2E8 VA: 0x131D2E8
	public WrapMode get_overwrittenWrapMode() { }

	// RVA: 0x1320520 Offset: 0x1320520 VA: 0x1320520
	public void set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x131D2E0 Offset: 0x131D2E0 VA: 0x131D2E0
	public bool get_isOverwrittenWrapMode() { }

	// RVA: 0x131D414 Offset: 0x131D414 VA: 0x131D414
	public float get_wrapModeChangedTime() { }

	// RVA: 0x131D158 Offset: 0x131D158 VA: 0x131D158
	public bool get_isClone() { }

	// RVA: 0x131D150 Offset: 0x131D150 VA: 0x131D150
	public SimpleAnimationPlayable.StateHandle get_parentState() { }

	// RVA: 0x131DF34 Offset: 0x131DF34 VA: 0x131DF34
	public bool get_enabledDirty() { }

	// RVA: 0x131DFA8 Offset: 0x131DFA8 VA: 0x131DFA8
	public bool get_weightDirty() { }

	// RVA: 0x131DFB0 Offset: 0x131DFB0 VA: 0x131DFB0
	public void ResetDirtyFlags() { }

	// RVA: 0x131E49C Offset: 0x131E49C VA: 0x131E49C
	public void InvalidateTime() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC895FC Offset: 0xC895FC VA: 0xC895FC
private class SimpleAnimationPlayable.StateManagement // TypeDefIndex: 3721
{
	// Fields
	private List<SimpleAnimationPlayable.StateInfo> m_States; // 0x10
	private int m_Count; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC896A4 Offset: 0xC896A4 VA: 0xC896A4
	private static Predicate<SimpleAnimationPlayable.StateInfo> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC896B4 Offset: 0xC896B4 VA: 0xC896B4
	private static Predicate<SimpleAnimationPlayable.StateInfo> <>f__am$cache1; // 0x8

	// Properties
	public int Count { get; }
	public SimpleAnimationPlayable.StateInfo Item { get; }

	// Methods

	// RVA: 0x131BD88 Offset: 0x131BD88 VA: 0x131BD88
	public void .ctor() { }

	// RVA: 0x131C0C4 Offset: 0x131C0C4 VA: 0x131C0C4
	public int get_Count() { }

	// RVA: 0x131BEB4 Offset: 0x131BEB4 VA: 0x131BEB4
	public SimpleAnimationPlayable.StateInfo get_Item(int i) { }

	// RVA: 0x131C634 Offset: 0x131C634 VA: 0x131C634
	public SimpleAnimationPlayable.StateInfo InsertState() { }

	// RVA: 0x131D208 Offset: 0x131D208 VA: 0x131D208
	public bool AnyStatePlaying() { }

	// RVA: 0x131CA58 Offset: 0x131CA58 VA: 0x131CA58
	public void RemoveState(int index) { }

	// RVA: 0x131CB38 Offset: 0x131CB38 VA: 0x131CB38
	public bool RemoveClip(AnimationClip clip) { }

	// RVA: 0x131C314 Offset: 0x131C314 VA: 0x131C314
	public SimpleAnimationPlayable.StateInfo FindState(string name) { }

	// RVA: 0x131D7C8 Offset: 0x131D7C8 VA: 0x131D7C8
	public void EnableState(int index) { }

	// RVA: 0x131ECE0 Offset: 0x131ECE0 VA: 0x131ECE0
	public void DisableState(int index) { }

	// RVA: 0x131F934 Offset: 0x131F934 VA: 0x131F934
	public void SetInputWeight(int index, float weight) { }

	// RVA: 0x131D0B4 Offset: 0x131D0B4 VA: 0x131D0B4
	public void SetStateTime(int index, float time) { }

	// RVA: 0x131E120 Offset: 0x131E120 VA: 0x131E120
	public float GetStateTime(int index) { }

	// RVA: 0x1320570 Offset: 0x1320570 VA: 0x1320570
	public bool IsCloneOf(int potentialCloneIndex, int originalIndex) { }

	// RVA: 0x131F2BC Offset: 0x131F2BC VA: 0x131F2BC
	public float GetStateSpeed(int index) { }

	// RVA: 0x131F40C Offset: 0x131F40C VA: 0x131F40C
	public void SetStateSpeed(int index, float value) { }

	// RVA: 0x1320620 Offset: 0x1320620 VA: 0x1320620
	public float GetInputWeight(int index) { }

	// RVA: 0x131FA88 Offset: 0x131FA88 VA: 0x131FA88
	public float GetStateLength(int index) { }

	// RVA: 0x131F00C Offset: 0x131F00C VA: 0x131F00C
	public float GetClipLength(int index) { }

	// RVA: 0x13206A4 Offset: 0x13206A4 VA: 0x13206A4
	public float GetStatePlayableDuration(int index) { }

	// RVA: 0x131FC70 Offset: 0x131FC70 VA: 0x131FC70
	public AnimationClip GetStateClip(int index) { }

	// RVA: 0x131FDB0 Offset: 0x131FDB0 VA: 0x131FDB0
	public WrapMode GetStateWrapMode(int index) { }

	// RVA: 0x131FEF0 Offset: 0x131FEF0 VA: 0x131FEF0
	public WrapMode GetStateOverwrittenWrapMode(int index) { }

	// RVA: 0x1320040 Offset: 0x1320040 VA: 0x1320040
	public void SetStateOverwrittenWrapMode(int index, WrapMode wrapMode) { }

	// RVA: 0x13201AC Offset: 0x13201AC VA: 0x13201AC
	public bool IsStateOverwrittenWrapMode(int index) { }

	// RVA: 0x13202EC Offset: 0x13202EC VA: 0x13202EC
	public float GetStateWrapModeChangedTime(int index) { }

	// RVA: 0x131F55C Offset: 0x131F55C VA: 0x131F55C
	public string GetStateName(int index) { }

	// RVA: 0x131F6DC Offset: 0x131F6DC VA: 0x131F6DC
	public void SetStateName(int index, string name) { }

	// RVA: 0x131D160 Offset: 0x131D160 VA: 0x131D160
	public void StopState(int index, bool cleanup) { }

	[CompilerGeneratedAttribute] // RVA: 0xC896D4 Offset: 0xC896D4 VA: 0xC896D4
	// RVA: 0x1320728 Offset: 0x1320728 VA: 0x1320728
	private static bool <InsertState>m__0(SimpleAnimationPlayable.StateInfo s) { }

	[CompilerGeneratedAttribute] // RVA: 0xC896E4 Offset: 0xC896E4 VA: 0xC896E4
	// RVA: 0x1320734 Offset: 0x1320734 VA: 0x1320734
	private static bool <AnyStatePlaying>m__1(SimpleAnimationPlayable.StateInfo s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC89634 Offset: 0xC89634 VA: 0xC89634
private sealed class SimpleAnimationPlayable.StateManagement.<FindState>c__AnonStorey0 // TypeDefIndex: 3722
{
	// Fields
	internal string name; // 0x10

	// Methods

	// RVA: 0x1320568 Offset: 0x1320568 VA: 0x1320568
	public void .ctor() { }

	// RVA: 0x1320748 Offset: 0x1320748 VA: 0x1320748
	internal bool <>m__0(SimpleAnimationPlayable.StateInfo s) { }
}

// Namespace: 
private struct SimpleAnimationPlayable.QueuedState // TypeDefIndex: 3723
{
	// Fields
	public SimpleAnimationPlayable.StateHandle state; // 0x0
	public float fadeTime; // 0x8

	// Methods

	// RVA: 0xBC0C10 Offset: 0xBC0C10 VA: 0xBC0C10
	public void .ctor(SimpleAnimationPlayable.StateHandle s, float t) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3724
{}

// Namespace: 
public enum CurveAutoTangentModes // TypeDefIndex: 3725
{
	// Fields
	public int value__; // 0x0
	public const CurveAutoTangentModes None = 0;
	public const CurveAutoTangentModes Smooth = 1;
	public const CurveAutoTangentModes Flatten = 2;
	public const CurveAutoTangentModes RightLinear = 3;
	public const CurveAutoTangentModes RightConstant = 4;
	public const CurveAutoTangentModes LeftLinear = 5;
	public const CurveAutoTangentModes LeftConstant = 6;
	public const CurveAutoTangentModes BothLinear = 7;
	public const CurveAutoTangentModes BothConstant = 8;
	public const CurveAutoTangentModes Count = 9;
}

// Namespace: WellFired
[Serializable]
public class AnimationClipData : ScriptableObject // TypeDefIndex: 3726
{
	// Fields
	[SerializeField] // RVA: 0xC89B60 Offset: 0xC89B60 VA: 0xC89B60
	private bool crossFade; // 0x18
	[SerializeField] // RVA: 0xC89B70 Offset: 0xC89B70 VA: 0xC89B70
	private float transitionDuration; // 0x1C
	[SerializeField] // RVA: 0xC89B80 Offset: 0xC89B80 VA: 0xC89B80
	private float startTime; // 0x20
	[SerializeField] // RVA: 0xC89B90 Offset: 0xC89B90 VA: 0xC89B90
	private float playbackDuration; // 0x24
	[SerializeField] // RVA: 0xC89BA0 Offset: 0xC89BA0 VA: 0xC89BA0
	private float stateDuration; // 0x28
	[HideInInspector] // RVA: 0xC89BB0 Offset: 0xC89BB0 VA: 0xC89BB0
	[SerializeField] // RVA: 0xC89BB0 Offset: 0xC89BB0 VA: 0xC89BB0
	private string stateName; // 0x30
	[SerializeField] // RVA: 0xC89BE8 Offset: 0xC89BE8 VA: 0xC89BE8
	private AnimationTrack track; // 0x38
	[HideInInspector] // RVA: 0xC89BF8 Offset: 0xC89BF8 VA: 0xC89BF8
	[SerializeField] // RVA: 0xC89BF8 Offset: 0xC89BF8 VA: 0xC89BF8
	private GameObject targetObject; // 0x40
	[HideInInspector] // RVA: 0xC89C30 Offset: 0xC89C30 VA: 0xC89C30
	private bool dirty; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC89C40 Offset: 0xC89C40 VA: 0xC89C40
	private int <RunningLayer>k__BackingField; // 0x4C

	// Properties
	public bool CrossFade { get; set; }
	public float TransitionDuration { get; set; }
	public float StartTime { get; set; }
	public float PlaybackDuration { get; set; }
	public float StateDuration { get; set; }
	public string StateName { get; set; }
	public AnimationTrack Track { get; set; }
	public string FriendlyName { get; set; }
	public GameObject TargetObject { get; set; }
	public bool Dirty { get; set; }
	public float EndTime { get; set; }
	public int RunningLayer { get; set; }

	// Methods

	// RVA: 0xFDAF68 Offset: 0xFDAF68 VA: 0xFDAF68
	public bool get_CrossFade() { }

	// RVA: 0xFDAF70 Offset: 0xFDAF70 VA: 0xFDAF70
	public void set_CrossFade(bool value) { }

	// RVA: 0xFDAF7C Offset: 0xFDAF7C VA: 0xFDAF7C
	public float get_TransitionDuration() { }

	// RVA: 0xFDAF84 Offset: 0xFDAF84 VA: 0xFDAF84
	public void set_TransitionDuration(float value) { }

	// RVA: 0xFDAF8C Offset: 0xFDAF8C VA: 0xFDAF8C
	public float get_StartTime() { }

	// RVA: 0xFDAF94 Offset: 0xFDAF94 VA: 0xFDAF94
	public void set_StartTime(float value) { }

	// RVA: 0xFDAFA4 Offset: 0xFDAFA4 VA: 0xFDAFA4
	public float get_PlaybackDuration() { }

	// RVA: 0xFDAFAC Offset: 0xFDAFAC VA: 0xFDAFAC
	public void set_PlaybackDuration(float value) { }

	// RVA: 0xFDAFBC Offset: 0xFDAFBC VA: 0xFDAFBC
	public float get_StateDuration() { }

	// RVA: 0xFDAFC4 Offset: 0xFDAFC4 VA: 0xFDAFC4
	public void set_StateDuration(float value) { }

	// RVA: 0xFDAFD4 Offset: 0xFDAFD4 VA: 0xFDAFD4
	public string get_StateName() { }

	// RVA: 0xFDAFDC Offset: 0xFDAFDC VA: 0xFDAFDC
	public void set_StateName(string value) { }

	// RVA: 0xFDB0D4 Offset: 0xFDB0D4 VA: 0xFDB0D4
	public AnimationTrack get_Track() { }

	// RVA: 0xFDB0DC Offset: 0xFDB0DC VA: 0xFDB0DC
	public void set_Track(AnimationTrack value) { }

	// RVA: 0xFDB0EC Offset: 0xFDB0EC VA: 0xFDB0EC
	public string get_FriendlyName() { }

	// RVA: 0xFDB0D0 Offset: 0xFDB0D0 VA: 0xFDB0D0
	private void set_FriendlyName(string value) { }

	// RVA: 0xFDB0F4 Offset: 0xFDB0F4 VA: 0xFDB0F4
	public GameObject get_TargetObject() { }

	// RVA: 0xFDB0FC Offset: 0xFDB0FC VA: 0xFDB0FC
	public void set_TargetObject(GameObject value) { }

	// RVA: 0xFDB10C Offset: 0xFDB10C VA: 0xFDB10C
	public bool get_Dirty() { }

	// RVA: 0xFDB114 Offset: 0xFDB114 VA: 0xFDB114
	public void set_Dirty(bool value) { }

	// RVA: 0xFDB120 Offset: 0xFDB120 VA: 0xFDB120
	public float get_EndTime() { }

	// RVA: 0xFDB12C Offset: 0xFDB12C VA: 0xFDB12C
	private void set_EndTime(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8A468 Offset: 0xC8A468 VA: 0xC8A468
	// RVA: 0xFDB130 Offset: 0xFDB130 VA: 0xFDB130
	public int get_RunningLayer() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8A478 Offset: 0xC8A478 VA: 0xC8A478
	// RVA: 0xFDB138 Offset: 0xFDB138 VA: 0xFDB138
	public void set_RunningLayer(int value) { }

	// RVA: 0xFDB140 Offset: 0xFDB140 VA: 0xFDB140
	public static bool IsClipNotRunning(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0xFDB17C Offset: 0xFDB17C VA: 0xFDB17C
	public static bool IsClipRunning(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0xFDB1D0 Offset: 0xFDB1D0 VA: 0xFDB1D0
	public static bool IsClipFinished(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0xFDB00C Offset: 0xFDB00C VA: 0xFDB00C
	public static string MakeFriendlyStateName(string stateName) { }

	// RVA: 0xFDB210 Offset: 0xFDB210 VA: 0xFDB210
	public void .ctor() { }
}

// Namespace: 
public sealed class AnimationClipData.StateCheck : MulticastDelegate // TypeDefIndex: 3727
{
	// Methods

	// RVA: 0xFDB268 Offset: 0xFDB268 VA: 0xFDB268
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xFDB278 Offset: 0xFDB278 VA: 0xFDB278 Slot: 11
	public virtual bool Invoke(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0xFDB4C0 Offset: 0xFDB4C0 VA: 0xFDB4C0 Slot: 12
	public virtual IAsyncResult BeginInvoke(float sequencerTime, AnimationClipData clipData, AsyncCallback callback, object object) { }

	// RVA: 0xFDB558 Offset: 0xFDB558 VA: 0xFDB558 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: WellFired
[ExecuteInEditMode] // RVA: 0xC89754 Offset: 0xC89754 VA: 0xC89754
public class AnimationTimelineController : MonoBehaviour // TypeDefIndex: 3728
{
	// Fields
	private Animator animator; // 0x18
	private USTimelineAnimation animationTimeline; // 0x20

	// Properties
	private Animator Animator { get; }
	private USTimelineAnimation AnimationTimeline { get; set; }

	// Methods

	// RVA: 0xFDB594 Offset: 0xFDB594 VA: 0xFDB594
	private Animator get_Animator() { }

	// RVA: 0xFDB62C Offset: 0xFDB62C VA: 0xFDB62C
	private USTimelineAnimation get_AnimationTimeline() { }

	// RVA: 0xFDB634 Offset: 0xFDB634 VA: 0xFDB634
	public void set_AnimationTimeline(USTimelineAnimation value) { }

	// RVA: 0xFDB63C Offset: 0xFDB63C VA: 0xFDB63C
	private void OnAnimatorMove() { }

	// RVA: 0xFDB730 Offset: 0xFDB730 VA: 0xFDB730
	public void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class AnimationTrack : ScriptableObject // TypeDefIndex: 3729
{
	// Fields
	[SerializeField] // RVA: 0xC89C50 Offset: 0xC89C50 VA: 0xC89C50
	private List<AnimationClipData> trackClipList; // 0x18
	[SerializeField] // RVA: 0xC89C60 Offset: 0xC89C60 VA: 0xC89C60
	private int layer; // 0x20

	// Properties
	public int Layer { get; set; }
	public List<AnimationClipData> TrackClips { get; set; }

	// Methods

	// RVA: 0xFDB738 Offset: 0xFDB738 VA: 0xFDB738
	public int get_Layer() { }

	// RVA: 0xFDB740 Offset: 0xFDB740 VA: 0xFDB740
	public void set_Layer(int value) { }

	// RVA: 0xFDB748 Offset: 0xFDB748 VA: 0xFDB748
	public List<AnimationClipData> get_TrackClips() { }

	// RVA: 0xFDB750 Offset: 0xFDB750 VA: 0xFDB750
	private void set_TrackClips(List<AnimationClipData> value) { }

	// RVA: 0xFDB758 Offset: 0xFDB758 VA: 0xFDB758
	public void AddClip(AnimationClipData clipData) { }

	// RVA: 0xFDB838 Offset: 0xFDB838 VA: 0xFDB838
	public void RemoveClip(AnimationClipData clipData) { }

	// RVA: 0xFDB918 Offset: 0xFDB918 VA: 0xFDB918
	private void SortClips() { }

	// RVA: 0xFDBA28 Offset: 0xFDBA28 VA: 0xFDBA28
	public void SetClipData(List<AnimationClipData> animationClipData) { }

	// RVA: 0xFDBA30 Offset: 0xFDBA30 VA: 0xFDBA30
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC89764 Offset: 0xC89764 VA: 0xC89764
[Serializable]
private sealed class AnimationTrack.<>c // TypeDefIndex: 3730
{
	// Fields
	public static readonly AnimationTrack.<>c <>9; // 0x0
	public static Func<AnimationClipData, float> <>9__10_0; // 0x8

	// Methods

	// RVA: 0xFDBAA0 Offset: 0xFDBAA0 VA: 0xFDBAA0
	private static void .cctor() { }

	// RVA: 0xFDBB04 Offset: 0xFDBB04 VA: 0xFDBB04
	public void .ctor() { }

	// RVA: 0xFDBB0C Offset: 0xFDBB0C VA: 0xFDBB0C
	internal float <SortClips>b__10_0(AnimationClipData trackClip) { }
}

// Namespace: WellFired
[Serializable]
public class USInternalCurve : ScriptableObject // TypeDefIndex: 3731
{
	// Fields
	[SerializeField] // RVA: 0xC89C70 Offset: 0xC89C70 VA: 0xC89C70
	private AnimationCurve animationCurve; // 0x18
	[SerializeField] // RVA: 0xC89C80 Offset: 0xC89C80 VA: 0xC89C80
	private List<USInternalKeyframe> internalKeyframes; // 0x20
	[SerializeField] // RVA: 0xC89C90 Offset: 0xC89C90 VA: 0xC89C90
	private bool useCurrentValue; // 0x28
	[SerializeField] // RVA: 0xC89CA0 Offset: 0xC89CA0 VA: 0xC89CA0
	private float duration; // 0x2C

	// Properties
	public float Duration { get; set; }
	public float FirstKeyframeTime { get; }
	public float LastKeyframeTime { get; }
	public AnimationCurve UnityAnimationCurve { get; set; }
	public List<USInternalKeyframe> Keys { get; }
	public bool UseCurrentValue { get; set; }

	// Methods

	// RVA: 0xFE2D50 Offset: 0xFE2D50 VA: 0xFE2D50
	public static int KeyframeComparer(USInternalKeyframe a, USInternalKeyframe b) { }

	// RVA: 0xFE2E48 Offset: 0xFE2E48 VA: 0xFE2E48
	public float get_Duration() { }

	// RVA: 0xFE2E50 Offset: 0xFE2E50 VA: 0xFE2E50
	public void set_Duration(float value) { }

	// RVA: 0xFE2E58 Offset: 0xFE2E58 VA: 0xFE2E58
	public float get_FirstKeyframeTime() { }

	// RVA: 0xFE2F00 Offset: 0xFE2F00 VA: 0xFE2F00
	public float get_LastKeyframeTime() { }

	// RVA: 0xFE2FE0 Offset: 0xFE2FE0 VA: 0xFE2FE0
	public void set_UnityAnimationCurve(AnimationCurve value) { }

	// RVA: 0xFE3518 Offset: 0xFE3518 VA: 0xFE3518
	public AnimationCurve get_UnityAnimationCurve() { }

	// RVA: 0xFE3520 Offset: 0xFE3520 VA: 0xFE3520
	public List<USInternalKeyframe> get_Keys() { }

	// RVA: 0xFE3528 Offset: 0xFE3528 VA: 0xFE3528
	public bool get_UseCurrentValue() { }

	// RVA: 0xFE3530 Offset: 0xFE3530 VA: 0xFE3530
	public void set_UseCurrentValue(bool value) { }

	// RVA: 0xFE353C Offset: 0xFE353C VA: 0xFE353C
	private void OnEnable() { }

	// RVA: 0xFE36EC Offset: 0xFE36EC VA: 0xFE36EC
	public float Evaluate(float time) { }

	// RVA: 0xFE3124 Offset: 0xFE3124 VA: 0xFE3124
	public void BuildInternalCurveFromAnimationCurve() { }

	// RVA: 0xFE378C Offset: 0xFE378C VA: 0xFE378C
	public void BuildAnimationCurveFromInternalCurve() { }

	// RVA: 0xFE3A6C Offset: 0xFE3A6C VA: 0xFE3A6C
	public void ValidateKeyframeTimes() { }

	// RVA: 0xFE3C30 Offset: 0xFE3C30 VA: 0xFE3C30
	public USInternalKeyframe AddKeyframe(float time, float value) { }

	// RVA: 0xFE4364 Offset: 0xFE4364 VA: 0xFE4364
	public void RemoveKeyframe(USInternalKeyframe internalKeyframe) { }

	// RVA: 0xFE45B0 Offset: 0xFE45B0 VA: 0xFE45B0
	public USInternalKeyframe GetNextKeyframe(USInternalKeyframe keyframe) { }

	// RVA: 0xFE4784 Offset: 0xFE4784 VA: 0xFE4784
	public USInternalKeyframe GetPrevKeyframe(USInternalKeyframe keyframe) { }

	// RVA: 0xFE492C Offset: 0xFE492C VA: 0xFE492C
	public bool Contains(USInternalKeyframe keyframe) { }

	// RVA: 0xFE4A20 Offset: 0xFE4A20 VA: 0xFE4A20
	public float FindNextKeyframeTime(float time) { }

	// RVA: 0xFE4B60 Offset: 0xFE4B60 VA: 0xFE4B60
	public float FindPrevKeyframeTime(float time) { }

	// RVA: 0xFE4CA4 Offset: 0xFE4CA4 VA: 0xFE4CA4
	public bool CanSetKeyframeToTime(float newTime) { }

	// RVA: 0xFE4E18 Offset: 0xFE4E18 VA: 0xFE4E18
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC89774 Offset: 0xC89774 VA: 0xC89774
[Serializable]
private sealed class USInternalCurve.<>c // TypeDefIndex: 3732
{
	// Fields
	public static readonly USInternalCurve.<>c <>9; // 0x0
	public static Func<USInternalKeyframe, float> <>9__20_0; // 0x8
	public static Func<USInternalKeyframe, float> <>9__25_0; // 0x10
	public static Func<USInternalKeyframe, float> <>9__26_0; // 0x18

	// Methods

	// RVA: 0xFE4E20 Offset: 0xFE4E20 VA: 0xFE4E20
	private static void .cctor() { }

	// RVA: 0xFE4E84 Offset: 0xFE4E84 VA: 0xFE4E84
	public void .ctor() { }

	// RVA: 0xFE4E8C Offset: 0xFE4E8C VA: 0xFE4E8C
	internal float <OnEnable>b__20_0(USInternalKeyframe keyframe) { }

	// RVA: 0xFE4EB8 Offset: 0xFE4EB8 VA: 0xFE4EB8
	internal float <AddKeyframe>b__25_0(USInternalKeyframe keyframe) { }

	// RVA: 0xFE4EE4 Offset: 0xFE4EE4 VA: 0xFE4EE4
	internal float <RemoveKeyframe>b__26_0(USInternalKeyframe keyframe) { }
}

// Namespace: WellFired
[Serializable]
public class USInternalKeyframe : ScriptableObject // TypeDefIndex: 3733
{
	// Fields
	[SerializeField] // RVA: 0xC89CB0 Offset: 0xC89CB0 VA: 0xC89CB0
	private float value; // 0x18
	[SerializeField] // RVA: 0xC89CC0 Offset: 0xC89CC0 VA: 0xC89CC0
	private float time; // 0x1C
	[SerializeField] // RVA: 0xC89CD0 Offset: 0xC89CD0 VA: 0xC89CD0
	private float inTangent; // 0x20
	[SerializeField] // RVA: 0xC89CE0 Offset: 0xC89CE0 VA: 0xC89CE0
	private float outTangent; // 0x24
	[SerializeField] // RVA: 0xC89CF0 Offset: 0xC89CF0 VA: 0xC89CF0
	private bool brokenTangents; // 0x28
	[SerializeField] // RVA: 0xC89D00 Offset: 0xC89D00 VA: 0xC89D00
	public USInternalCurve curve; // 0x30

	// Properties
	public float Value { get; set; }
	public float Time { get; set; }
	public float InTangent { get; set; }
	public float OutTangent { get; set; }
	public bool BrokenTangents { get; set; }

	// Methods

	// RVA: 0xFE3A54 Offset: 0xFE3A54 VA: 0xFE3A54
	public float get_Value() { }

	// RVA: 0xFE416C Offset: 0xFE416C VA: 0xFE416C
	public void set_Value(float value) { }

	// RVA: 0xFE2E40 Offset: 0xFE2E40 VA: 0xFE2E40
	public float get_Time() { }

	// RVA: 0xFE4054 Offset: 0xFE4054 VA: 0xFE4054
	public void set_Time(float value) { }

	// RVA: 0xFE3A5C Offset: 0xFE3A5C VA: 0xFE3A5C
	public float get_InTangent() { }

	// RVA: 0xFE4214 Offset: 0xFE4214 VA: 0xFE4214
	public void set_InTangent(float value) { }

	// RVA: 0xFE3A64 Offset: 0xFE3A64 VA: 0xFE3A64
	public float get_OutTangent() { }

	// RVA: 0xFE42BC Offset: 0xFE42BC VA: 0xFE42BC
	public void set_OutTangent(float value) { }

	// RVA: 0xFE4F10 Offset: 0xFE4F10 VA: 0xFE4F10
	public bool get_BrokenTangents() { }

	// RVA: 0xFE4F18 Offset: 0xFE4F18 VA: 0xFE4F18
	public void set_BrokenTangents(bool value) { }

	// RVA: 0xFE4FC4 Offset: 0xFE4FC4 VA: 0xFE4FC4
	private void OnEnable() { }

	// RVA: 0xFE372C Offset: 0xFE372C VA: 0xFE372C
	public void ConvertFrom(Keyframe keyframe) { }

	// RVA: 0xFE4FC8 Offset: 0xFE4FC8 VA: 0xFE4FC8
	public void Smooth() { }

	// RVA: 0xFE51D0 Offset: 0xFE51D0 VA: 0xFE51D0
	public void Flatten() { }

	// RVA: 0xFE5268 Offset: 0xFE5268 VA: 0xFE5268
	public void RightTangentLinear() { }

	// RVA: 0xFE53B0 Offset: 0xFE53B0 VA: 0xFE53B0
	public void RightTangentConstant() { }

	// RVA: 0xFE53E4 Offset: 0xFE53E4 VA: 0xFE53E4
	public void LeftTangentLinear() { }

	// RVA: 0xFE552C Offset: 0xFE552C VA: 0xFE552C
	public void LeftTangentConstant() { }

	// RVA: 0xFE5560 Offset: 0xFE5560 VA: 0xFE5560
	public void BothTangentLinear() { }

	// RVA: 0xFE5584 Offset: 0xFE5584 VA: 0xFE5584
	public void BothTangentConstant() { }

	// RVA: 0xFE55A8 Offset: 0xFE55A8 VA: 0xFE55A8
	public void .ctor() { }
}

// Namespace: WellFired
public class USequencerEventHideDurationAttribute : Attribute // TypeDefIndex: 3734
{
	// Methods

	// RVA: 0x1353F94 Offset: 0x1353F94 VA: 0x1353F94
	public void .ctor() { }
}

// Namespace: WellFired
public class USequencerEventAttribute : Attribute // TypeDefIndex: 3735
{
	// Fields
	private string eventPath; // 0x10

	// Methods

	// RVA: 0x1353F68 Offset: 0x1353F68 VA: 0x1353F68
	public void .ctor(string myEventPath) { }
}

// Namespace: WellFired
public class USequencerFriendlyNameAttribute : Attribute // TypeDefIndex: 3736
{
	// Fields
	private string friendlyName; // 0x10

	// Methods

	// RVA: 0x1353F9C Offset: 0x1353F9C VA: 0x1353F9C
	public void .ctor(string myFriendlyName) { }
}

// Namespace: WellFired
[ExecuteInEditMode] // RVA: 0xC89784 Offset: 0xC89784 VA: 0xC89784
[Serializable]
public abstract class USEventBase : MonoBehaviour // TypeDefIndex: 3737
{
	// Fields
	[SerializeField] // RVA: 0xC89D10 Offset: 0xC89D10 VA: 0xC89D10
	private bool fireOnSkip; // 0x18
	[SerializeField] // RVA: 0xC89D20 Offset: 0xC89D20 VA: 0xC89D20
	private float firetime; // 0x1C
	[SerializeField] // RVA: 0xC89D30 Offset: 0xC89D30 VA: 0xC89D30
	private float duration; // 0x20
	[SerializeField] // RVA: 0xC89D40 Offset: 0xC89D40 VA: 0xC89D40
	[HideInInspector] // RVA: 0xC89D40 Offset: 0xC89D40 VA: 0xC89D40
	private string[] serializedAdditionalObjectsPaths; // 0x28

	// Properties
	public float FireTime { get; set; }
	public float Duration { get; set; }
	public USSequencer Sequence { get; }
	public USTimelineBase Timeline { get; }
