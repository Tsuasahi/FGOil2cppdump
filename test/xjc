	private void UpdateDoneStatus() { }

	// RVA: 0x2B2D07C Offset: 0x2B2D07C VA: 0x2B2D07C
	private void DisconnectInput(int index) { }

	// RVA: 0x2B2CFA4 Offset: 0x2B2CFA4 VA: 0x2B2CFA4
	private void ConnectInput(int index) { }

	// RVA: 0x2B2EBBC Offset: 0x2B2EBBC VA: 0x2B2EBBC
	private void UpdateStates(float deltaTime) { }

	// RVA: 0x2B2F028 Offset: 0x2B2F028 VA: 0x2B2F028
	private float CalculateQueueTimes() { }

	// RVA: 0x2B2F214 Offset: 0x2B2F214 VA: 0x2B2F214
	private void ClearQueuedStates() { }

	// RVA: 0x2B2F394 Offset: 0x2B2F394 VA: 0x2B2F394
	private void UpdateQueuedStates() { }

	// RVA: 0x2B2F498 Offset: 0x2B2F498 VA: 0x2B2F498
	private void InvalidateStateTimes() { }

	// RVA: 0x2B2F514 Offset: 0x2B2F514 VA: 0x2B2F514 Slot: 19
	public override void PrepareFrame(Playable owner, FrameData data) { }

	// RVA: 0x2B2F558 Offset: 0x2B2F558 VA: 0x2B2F558
	public bool ValidateInput(int index, Playable input) { }

	// RVA: 0x2B2F688 Offset: 0x2B2F688 VA: 0x2B2F688
	public bool ValidateIndex(int index) { }

	// RVA: 0x2B2D95C Offset: 0x2B2D95C VA: 0x2B2D95C
	private void InvalidateStates() { }

	// RVA: 0x2B2E038 Offset: 0x2B2E038 VA: 0x2B2E038
	private SimpleAnimationPlayable.StateHandle StateInfoToHandle(SimpleAnimationPlayable.StateInfo info) { }
}

// Namespace: 
private class SimpleAnimationPlayable.StateEnumerable : IEnumerable<SimpleAnimationPlayable.IState>, IEnumerable // TypeDefIndex: 3716
{
	// Fields
	private SimpleAnimationPlayable m_Owner; // 0x10

	// Methods

	// RVA: 0x2B2D358 Offset: 0x2B2D358 VA: 0x2B2D358
	public void .ctor(SimpleAnimationPlayable owner) { }

	// RVA: 0x2B2F6CC Offset: 0x2B2F6CC VA: 0x2B2F6CC Slot: 4
	public IEnumerator<SimpleAnimationPlayable.IState> GetEnumerator() { }

	// RVA: 0x2B2F77C Offset: 0x2B2F77C VA: 0x2B2F77C Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private class SimpleAnimationPlayable.StateEnumerable.StateEnumerator : IEnumerator<SimpleAnimationPlayable.IState>, IEnumerator, IDisposable // TypeDefIndex: 3717
{
	// Fields
	private int m_Index; // 0x10
	private int m_Version; // 0x14
	private SimpleAnimationPlayable m_Owner; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private SimpleAnimationPlayable.IState System.Collections.Generic.IEnumerator<SimpleAnimationPlayable.IState>.Current { get; }

	// Methods

	// RVA: 0x2B2F730 Offset: 0x2B2F730 VA: 0x2B2F730
	public void .ctor(SimpleAnimationPlayable owner) { }

	// RVA: 0x2B2F884 Offset: 0x2B2F884 VA: 0x2B2F884
	private bool IsValid() { }

	// RVA: 0x2B2F8A8 Offset: 0x2B2F8A8 VA: 0x2B2F8A8
	private SimpleAnimationPlayable.IState GetCurrentHandle(int index) { }

	// RVA: 0x2B2F9FC Offset: 0x2B2F9FC VA: 0x2B2F9FC Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2B2FA04 Offset: 0x2B2FA04 VA: 0x2B2FA04 Slot: 4
	private SimpleAnimationPlayable.IState System.Collections.Generic.IEnumerator<SimpleAnimationPlayable.IState>.get_Current() { }

	// RVA: 0x2B2FA0C Offset: 0x2B2FA0C VA: 0x2B2FA0C Slot: 8
	public void Dispose() { }

	// RVA: 0x2B2FA10 Offset: 0x2B2FA10 VA: 0x2B2FA10 Slot: 6
	public bool MoveNext() { }

	// RVA: 0x2B2F7E0 Offset: 0x2B2F7E0 VA: 0x2B2F7E0 Slot: 7
	public void Reset() { }
}

// Namespace: 
public interface SimpleAnimationPlayable.IState // TypeDefIndex: 3718
{
	// Properties
	public abstract bool enabled { get; set; }
	public abstract float time { get; set; }
	public abstract float normalizedTime { get; set; }
	public abstract float speed { get; set; }
	public abstract string name { get; set; }
	public abstract float weight { get; set; }
	public abstract float length { get; }
	public abstract AnimationClip clip { get; }
	public abstract WrapMode wrapMode { get; }
	public abstract WrapMode overwrittenWrapMode { get; set; }
	public abstract bool isOverwrittenWrapMode { get; }
	public abstract float wrapModeChangedTime { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsValid();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_enabled();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_enabled(bool value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_time();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_time(float value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_normalizedTime();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void set_normalizedTime(float value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_speed();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void set_speed(float value);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_name();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void set_name(string value);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract float get_weight();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void set_weight(float value);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract float get_length();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract AnimationClip get_clip();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract WrapMode get_wrapMode();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract WrapMode get_overwrittenWrapMode();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void set_overwrittenWrapMode(WrapMode value);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool get_isOverwrittenWrapMode();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract float get_wrapModeChangedTime();
}

// Namespace: 
public class SimpleAnimationPlayable.StateHandle : SimpleAnimationPlayable.IState // TypeDefIndex: 3719
{
	// Fields
	private SimpleAnimationPlayable m_Parent; // 0x10
	private int m_Index; // 0x18
	private Playable m_Target; // 0x20

	// Properties
	public bool enabled { get; set; }
	public float time { get; set; }
	public float normalizedTime { get; set; }
	public float speed { get; set; }
	public string name { get; set; }
	public float weight { get; set; }
	public float length { get; }
	public AnimationClip clip { get; }
	public WrapMode wrapMode { get; }
	public WrapMode overwrittenWrapMode { get; set; }
	public bool isOverwrittenWrapMode { get; }
	public float wrapModeChangedTime { get; }
	public int index { get; }

	// Methods

	// RVA: 0x2B2D4A0 Offset: 0x2B2D4A0 VA: 0x2B2D4A0
	public void .ctor(SimpleAnimationPlayable s, int index, Playable target) { }

	// RVA: 0x2B2FB50 Offset: 0x2B2FB50 VA: 0x2B2FB50 Slot: 4
	public bool IsValid() { }

	// RVA: 0x2B2FB98 Offset: 0x2B2FB98 VA: 0x2B2FB98 Slot: 5
	public bool get_enabled() { }

	// RVA: 0x2B2FC68 Offset: 0x2B2FC68 VA: 0x2B2FC68 Slot: 6
	public void set_enabled(bool value) { }

	// RVA: 0x2B2FDE4 Offset: 0x2B2FDE4 VA: 0x2B2FDE4 Slot: 7
	public float get_time() { }

	// RVA: 0x2B2FEA0 Offset: 0x2B2FEA0 VA: 0x2B2FEA0 Slot: 8
	public void set_time(float value) { }

	// RVA: 0x2B2FF6C Offset: 0x2B2FF6C VA: 0x2B2FF6C Slot: 9
	public float get_normalizedTime() { }

	// RVA: 0x2B3015C Offset: 0x2B3015C VA: 0x2B3015C Slot: 10
	public void set_normalizedTime(float value) { }

	// RVA: 0x2B30270 Offset: 0x2B30270 VA: 0x2B30270 Slot: 11
	public float get_speed() { }

	// RVA: 0x2B303B0 Offset: 0x2B303B0 VA: 0x2B303B0 Slot: 12
	public void set_speed(float value) { }

	// RVA: 0x2B30510 Offset: 0x2B30510 VA: 0x2B30510 Slot: 13
	public string get_name() { }

	// RVA: 0x2B30650 Offset: 0x2B30650 VA: 0x2B30650 Slot: 14
	public void set_name(string value) { }

	// RVA: 0x2B307D4 Offset: 0x2B307D4 VA: 0x2B307D4 Slot: 15
	public float get_weight() { }

	// RVA: 0x2B308A4 Offset: 0x2B308A4 VA: 0x2B308A4 Slot: 16
	public void set_weight(float value) { }

	// RVA: 0x2B30A3C Offset: 0x2B30A3C VA: 0x2B30A3C Slot: 17
	public float get_length() { }

	// RVA: 0x2B30C24 Offset: 0x2B30C24 VA: 0x2B30C24 Slot: 18
	public AnimationClip get_clip() { }

	// RVA: 0x2B30D64 Offset: 0x2B30D64 VA: 0x2B30D64 Slot: 19
	public WrapMode get_wrapMode() { }

	// RVA: 0x2B30EA4 Offset: 0x2B30EA4 VA: 0x2B30EA4 Slot: 20
	public WrapMode get_overwrittenWrapMode() { }

	// RVA: 0x2B30FE4 Offset: 0x2B30FE4 VA: 0x2B30FE4 Slot: 21
	public void set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x2B31160 Offset: 0x2B31160 VA: 0x2B31160 Slot: 22
	public bool get_isOverwrittenWrapMode() { }

	// RVA: 0x2B312A0 Offset: 0x2B312A0 VA: 0x2B312A0 Slot: 23
	public float get_wrapModeChangedTime() { }

	// RVA: 0x2B2E1B8 Offset: 0x2B2E1B8 VA: 0x2B2E1B8
	public int get_index() { }
}

// Namespace: 
private class SimpleAnimationPlayable.StateInfo // TypeDefIndex: 3720
{
	// Fields
	private bool m_Enabled; // 0x10
	private int m_Index; // 0x14
	private string m_StateName; // 0x18
	private bool m_Fading; // 0x20
	private float m_Time; // 0x24
	private float m_TargetWeight; // 0x28
	private float m_Weight; // 0x2C
	private float m_FadeSpeed; // 0x30
	private AnimationClip m_Clip; // 0x38
	private Playable m_Playable; // 0x40
	private WrapMode m_WrapMode; // 0x50
	private WrapMode m_OverwrittenWrapMode; // 0x54
	private bool m_IsOverwrittenWrapMode; // 0x58
	private float m_WrapModeChangedTime; // 0x5C
	private bool m_IsClone; // 0x60
	public SimpleAnimationPlayable.StateHandle m_ParentState; // 0x68
	private bool m_WeightDirty; // 0x70
	private bool m_EnabledDirty; // 0x71
	private bool m_TimeIsUpToDate; // 0x72

	// Properties
	public bool enabled { get; }
	public int index { get; set; }
	public string stateName { get; set; }
	public bool fading { get; }
	public float targetWeight { get; }
	public float weight { get; }
	public float fadeSpeed { get; }
	public float speed { get; set; }
	public float playableDuration { get; }
	public AnimationClip clip { get; }
	public bool isDone { get; }
	public Playable playable { get; }
	public WrapMode wrapMode { get; }
	public WrapMode overwrittenWrapMode { get; set; }
	public bool isOverwrittenWrapMode { get; }
	public float wrapModeChangedTime { get; }
	public bool isClone { get; }
	public SimpleAnimationPlayable.StateHandle parentState { get; }
	public bool enabledDirty { get; }
	public bool weightDirty { get; }

	// Methods

	// RVA: 0x2B313E0 Offset: 0x2B313E0 VA: 0x2B313E0
	public void .ctor() { }

	// RVA: 0x2B2D83C Offset: 0x2B2D83C VA: 0x2B2D83C
	public void Initialize(string name, AnimationClip clip, WrapMode wrapMode) { }

	// RVA: 0x2B2E408 Offset: 0x2B2E408 VA: 0x2B2E408
	public float GetTime() { }

	// RVA: 0x2B313E8 Offset: 0x2B313E8 VA: 0x2B313E8
	public void SetTime(float newTime) { }

	// RVA: 0x2B2DD84 Offset: 0x2B2DD84 VA: 0x2B2DD84
	public void Enable() { }

	// RVA: 0x2B2F000 Offset: 0x2B2F000 VA: 0x2B2F000
	public void Disable() { }

	// RVA: 0x2B2D85C Offset: 0x2B2D85C VA: 0x2B2D85C
	public void Pause() { }

	// RVA: 0x2B2EFAC Offset: 0x2B2EFAC VA: 0x2B2EFAC
	public void Play() { }

	// RVA: 0x2B2EF20 Offset: 0x2B2EF20 VA: 0x2B2EF20
	public void Stop() { }

	// RVA: 0x2B2DDA0 Offset: 0x2B2DDA0 VA: 0x2B2DDA0
	public void ForceWeight(float weight) { }

	// RVA: 0x2B2EF10 Offset: 0x2B2EF10 VA: 0x2B2EF10
	public void SetWeight(float weight) { }

	// RVA: 0x2B2E6CC Offset: 0x2B2E6CC VA: 0x2B2E6CC
	public void FadeTo(float weight, float speed) { }

	// RVA: 0x2B3148C Offset: 0x2B3148C VA: 0x2B3148C
	public void DestroyPlayable() { }

	// RVA: 0x2B2E8D4 Offset: 0x2B2E8D4 VA: 0x2B2E8D4
	public void SetAsCloneOf(SimpleAnimationPlayable.StateHandle handle) { }

	// RVA: 0x2B2CF94 Offset: 0x2B2CF94 VA: 0x2B2CF94
	public bool get_enabled() { }

	// RVA: 0x2B2CF9C Offset: 0x2B2CF9C VA: 0x2B2CF9C
	public int get_index() { }

	// RVA: 0x2B31520 Offset: 0x2B31520 VA: 0x2B31520
	public void set_index(int value) { }

	// RVA: 0x2B2E8CC Offset: 0x2B2E8CC VA: 0x2B2E8CC
	public string get_stateName() { }

	// RVA: 0x2B31528 Offset: 0x2B31528 VA: 0x2B31528
	public void set_stateName(string value) { }

	// RVA: 0x2B2E6B4 Offset: 0x2B2E6B4 VA: 0x2B2E6B4
	public bool get_fading() { }

	// RVA: 0x2B2E6BC Offset: 0x2B2E6BC VA: 0x2B2E6BC
	public float get_targetWeight() { }

	// RVA: 0x2B2E6AC Offset: 0x2B2E6AC VA: 0x2B2E6AC
	public float get_weight() { }

	// RVA: 0x2B2E6C4 Offset: 0x2B2E6C4 VA: 0x2B2E6C4
	public float get_fadeSpeed() { }

	// RVA: 0x2B2E3B0 Offset: 0x2B2E3B0 VA: 0x2B2E3B0
	public float get_speed() { }

	// RVA: 0x2B31530 Offset: 0x2B31530 VA: 0x2B31530
	public void set_speed(float value) { }

	// RVA: 0x2B2E48C Offset: 0x2B2E48C VA: 0x2B2E48C
	public float get_playableDuration() { }

	// RVA: 0x2B2E47C Offset: 0x2B2E47C VA: 0x2B2E47C
	public AnimationClip get_clip() { }

	// RVA: 0x2B2D854 Offset: 0x2B2D854 VA: 0x2B2D854
	public void SetPlayable(Playable playable) { }

	// RVA: 0x2B2E360 Offset: 0x2B2E360 VA: 0x2B2E360
	public bool get_isDone() { }

	// RVA: 0x2B2D494 Offset: 0x2B2D494 VA: 0x2B2D494
	public Playable get_playable() { }

	// RVA: 0x2B2D84C Offset: 0x2B2D84C VA: 0x2B2D84C
	public WrapMode get_wrapMode() { }

	// RVA: 0x2B2E358 Offset: 0x2B2E358 VA: 0x2B2E358
	public WrapMode get_overwrittenWrapMode() { }

	// RVA: 0x2B31590 Offset: 0x2B31590 VA: 0x2B31590
	public void set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x2B2E350 Offset: 0x2B2E350 VA: 0x2B2E350
	public bool get_isOverwrittenWrapMode() { }

	// RVA: 0x2B2E484 Offset: 0x2B2E484 VA: 0x2B2E484
	public float get_wrapModeChangedTime() { }

	// RVA: 0x2B2E1C8 Offset: 0x2B2E1C8 VA: 0x2B2E1C8
	public bool get_isClone() { }

	// RVA: 0x2B2E1C0 Offset: 0x2B2E1C0 VA: 0x2B2E1C0
	public SimpleAnimationPlayable.StateHandle get_parentState() { }

	// RVA: 0x2B2EFA4 Offset: 0x2B2EFA4 VA: 0x2B2EFA4
	public bool get_enabledDirty() { }

	// RVA: 0x2B2F018 Offset: 0x2B2F018 VA: 0x2B2F018
	public bool get_weightDirty() { }

	// RVA: 0x2B2F020 Offset: 0x2B2F020 VA: 0x2B2F020
	public void ResetDirtyFlags() { }

	// RVA: 0x2B2F50C Offset: 0x2B2F50C VA: 0x2B2F50C
	public void InvalidateTime() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC1D4D4 Offset: 0xC1D4D4 VA: 0xC1D4D4
private class SimpleAnimationPlayable.StateManagement // TypeDefIndex: 3721
{
	// Fields
	private List<SimpleAnimationPlayable.StateInfo> m_States; // 0x10
	private int m_Count; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC1D57C Offset: 0xC1D57C VA: 0xC1D57C
	private static Predicate<SimpleAnimationPlayable.StateInfo> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC1D58C Offset: 0xC1D58C VA: 0xC1D58C
	private static Predicate<SimpleAnimationPlayable.StateInfo> <>f__am$cache1; // 0x8

	// Properties
	public int Count { get; }
	public SimpleAnimationPlayable.StateInfo Item { get; }

	// Methods

	// RVA: 0x2B2CDF8 Offset: 0x2B2CDF8 VA: 0x2B2CDF8
	public void .ctor() { }

	// RVA: 0x2B2D134 Offset: 0x2B2D134 VA: 0x2B2D134
	public int get_Count() { }

	// RVA: 0x2B2CF24 Offset: 0x2B2CF24 VA: 0x2B2CF24
	public SimpleAnimationPlayable.StateInfo get_Item(int i) { }

	// RVA: 0x2B2D6A4 Offset: 0x2B2D6A4 VA: 0x2B2D6A4
	public SimpleAnimationPlayable.StateInfo InsertState() { }

	// RVA: 0x2B2E278 Offset: 0x2B2E278 VA: 0x2B2E278
	public bool AnyStatePlaying() { }

	// RVA: 0x2B2DAC8 Offset: 0x2B2DAC8 VA: 0x2B2DAC8
	public void RemoveState(int index) { }

	// RVA: 0x2B2DBA8 Offset: 0x2B2DBA8 VA: 0x2B2DBA8
	public bool RemoveClip(AnimationClip clip) { }

	// RVA: 0x2B2D384 Offset: 0x2B2D384 VA: 0x2B2D384
	public SimpleAnimationPlayable.StateInfo FindState(string name) { }

	// RVA: 0x2B2E838 Offset: 0x2B2E838 VA: 0x2B2E838
	public void EnableState(int index) { }

	// RVA: 0x2B2FD50 Offset: 0x2B2FD50 VA: 0x2B2FD50
	public void DisableState(int index) { }

	// RVA: 0x2B309A4 Offset: 0x2B309A4 VA: 0x2B309A4
	public void SetInputWeight(int index, float weight) { }

	// RVA: 0x2B2E124 Offset: 0x2B2E124 VA: 0x2B2E124
	public void SetStateTime(int index, float time) { }

	// RVA: 0x2B2F190 Offset: 0x2B2F190 VA: 0x2B2F190
	public float GetStateTime(int index) { }

	// RVA: 0x2B315E0 Offset: 0x2B315E0 VA: 0x2B315E0
	public bool IsCloneOf(int potentialCloneIndex, int originalIndex) { }

	// RVA: 0x2B3032C Offset: 0x2B3032C VA: 0x2B3032C
	public float GetStateSpeed(int index) { }

	// RVA: 0x2B3047C Offset: 0x2B3047C VA: 0x2B3047C
	public void SetStateSpeed(int index, float value) { }

	// RVA: 0x2B31690 Offset: 0x2B31690 VA: 0x2B31690
	public float GetInputWeight(int index) { }

	// RVA: 0x2B30AF8 Offset: 0x2B30AF8 VA: 0x2B30AF8
	public float GetStateLength(int index) { }

	// RVA: 0x2B3007C Offset: 0x2B3007C VA: 0x2B3007C
	public float GetClipLength(int index) { }

	// RVA: 0x2B31714 Offset: 0x2B31714 VA: 0x2B31714
	public float GetStatePlayableDuration(int index) { }

	// RVA: 0x2B30CE0 Offset: 0x2B30CE0 VA: 0x2B30CE0
	public AnimationClip GetStateClip(int index) { }

	// RVA: 0x2B30E20 Offset: 0x2B30E20 VA: 0x2B30E20
	public WrapMode GetStateWrapMode(int index) { }

	// RVA: 0x2B30F60 Offset: 0x2B30F60 VA: 0x2B30F60
	public WrapMode GetStateOverwrittenWrapMode(int index) { }

	// RVA: 0x2B310B0 Offset: 0x2B310B0 VA: 0x2B310B0
	public void SetStateOverwrittenWrapMode(int index, WrapMode wrapMode) { }

	// RVA: 0x2B3121C Offset: 0x2B3121C VA: 0x2B3121C
	public bool IsStateOverwrittenWrapMode(int index) { }

	// RVA: 0x2B3135C Offset: 0x2B3135C VA: 0x2B3135C
	public float GetStateWrapModeChangedTime(int index) { }

	// RVA: 0x2B305CC Offset: 0x2B305CC VA: 0x2B305CC
	public string GetStateName(int index) { }

	// RVA: 0x2B3074C Offset: 0x2B3074C VA: 0x2B3074C
	public void SetStateName(int index, string name) { }

	// RVA: 0x2B2E1D0 Offset: 0x2B2E1D0 VA: 0x2B2E1D0
	public void StopState(int index, bool cleanup) { }

	[CompilerGeneratedAttribute] // RVA: 0xC1D5AC Offset: 0xC1D5AC VA: 0xC1D5AC
	// RVA: 0x2B31798 Offset: 0x2B31798 VA: 0x2B31798
	private static bool <InsertState>m__0(SimpleAnimationPlayable.StateInfo s) { }

	[CompilerGeneratedAttribute] // RVA: 0xC1D5BC Offset: 0xC1D5BC VA: 0xC1D5BC
	// RVA: 0x2B317A4 Offset: 0x2B317A4 VA: 0x2B317A4
	private static bool <AnyStatePlaying>m__1(SimpleAnimationPlayable.StateInfo s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D50C Offset: 0xC1D50C VA: 0xC1D50C
private sealed class SimpleAnimationPlayable.StateManagement.<FindState>c__AnonStorey0 // TypeDefIndex: 3722
{
	// Fields
	internal string name; // 0x10

	// Methods

	// RVA: 0x2B315D8 Offset: 0x2B315D8 VA: 0x2B315D8
	public void .ctor() { }

	// RVA: 0x2B317B8 Offset: 0x2B317B8 VA: 0x2B317B8
	internal bool <>m__0(SimpleAnimationPlayable.StateInfo s) { }
}

// Namespace: 
private struct SimpleAnimationPlayable.QueuedState // TypeDefIndex: 3723
{
	// Fields
	public SimpleAnimationPlayable.StateHandle state; // 0x0
	public float fadeTime; // 0x8

	// Methods

	// RVA: 0xD73CB8 Offset: 0xD73CB8 VA: 0xD73CB8
	public void .ctor(SimpleAnimationPlayable.StateHandle s, float t) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 3724
{}

// Namespace: 
public enum CurveAutoTangentModes // TypeDefIndex: 3725
{
	// Fields
	public int value__; // 0x0
	public const CurveAutoTangentModes None = 0;
	public const CurveAutoTangentModes Smooth = 1;
	public const CurveAutoTangentModes Flatten = 2;
	public const CurveAutoTangentModes RightLinear = 3;
	public const CurveAutoTangentModes RightConstant = 4;
	public const CurveAutoTangentModes LeftLinear = 5;
	public const CurveAutoTangentModes LeftConstant = 6;
	public const CurveAutoTangentModes BothLinear = 7;
	public const CurveAutoTangentModes BothConstant = 8;
	public const CurveAutoTangentModes Count = 9;
}

// Namespace: WellFired
[Serializable]
public class AnimationClipData : ScriptableObject // TypeDefIndex: 3726
{
	// Fields
	[SerializeField] // RVA: 0xC1DA38 Offset: 0xC1DA38 VA: 0xC1DA38
	private bool crossFade; // 0x18
	[SerializeField] // RVA: 0xC1DA48 Offset: 0xC1DA48 VA: 0xC1DA48
	private float transitionDuration; // 0x1C
	[SerializeField] // RVA: 0xC1DA58 Offset: 0xC1DA58 VA: 0xC1DA58
	private float startTime; // 0x20
	[SerializeField] // RVA: 0xC1DA68 Offset: 0xC1DA68 VA: 0xC1DA68
	private float playbackDuration; // 0x24
	[SerializeField] // RVA: 0xC1DA78 Offset: 0xC1DA78 VA: 0xC1DA78
	private float stateDuration; // 0x28
	[HideInInspector] // RVA: 0xC1DA88 Offset: 0xC1DA88 VA: 0xC1DA88
	[SerializeField] // RVA: 0xC1DA88 Offset: 0xC1DA88 VA: 0xC1DA88
	private string stateName; // 0x30
	[SerializeField] // RVA: 0xC1DAC0 Offset: 0xC1DAC0 VA: 0xC1DAC0
	private AnimationTrack track; // 0x38
	[HideInInspector] // RVA: 0xC1DAD0 Offset: 0xC1DAD0 VA: 0xC1DAD0
	[SerializeField] // RVA: 0xC1DAD0 Offset: 0xC1DAD0 VA: 0xC1DAD0
	private GameObject targetObject; // 0x40
	[HideInInspector] // RVA: 0xC1DB08 Offset: 0xC1DB08 VA: 0xC1DB08
	private bool dirty; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC1DB18 Offset: 0xC1DB18 VA: 0xC1DB18
	private int <RunningLayer>k__BackingField; // 0x4C

	// Properties
	public bool CrossFade { get; set; }
	public float TransitionDuration { get; set; }
	public float StartTime { get; set; }
	public float PlaybackDuration { get; set; }
	public float StateDuration { get; set; }
	public string StateName { get; set; }
	public AnimationTrack Track { get; set; }
	public string FriendlyName { get; set; }
	public GameObject TargetObject { get; set; }
	public bool Dirty { get; set; }
	public float EndTime { get; set; }
	public int RunningLayer { get; set; }

	// Methods

	// RVA: 0x20EF5D0 Offset: 0x20EF5D0 VA: 0x20EF5D0
	public bool get_CrossFade() { }

	// RVA: 0x20EF5D8 Offset: 0x20EF5D8 VA: 0x20EF5D8
	public void set_CrossFade(bool value) { }

	// RVA: 0x20EF5E4 Offset: 0x20EF5E4 VA: 0x20EF5E4
	public float get_TransitionDuration() { }

	// RVA: 0x20EF5EC Offset: 0x20EF5EC VA: 0x20EF5EC
	public void set_TransitionDuration(float value) { }

	// RVA: 0x20EF5F4 Offset: 0x20EF5F4 VA: 0x20EF5F4
	public float get_StartTime() { }

	// RVA: 0x20EF5FC Offset: 0x20EF5FC VA: 0x20EF5FC
	public void set_StartTime(float value) { }

	// RVA: 0x20EF60C Offset: 0x20EF60C VA: 0x20EF60C
	public float get_PlaybackDuration() { }

	// RVA: 0x20EF614 Offset: 0x20EF614 VA: 0x20EF614
	public void set_PlaybackDuration(float value) { }

	// RVA: 0x20EF624 Offset: 0x20EF624 VA: 0x20EF624
	public float get_StateDuration() { }

	// RVA: 0x20EF62C Offset: 0x20EF62C VA: 0x20EF62C
	public void set_StateDuration(float value) { }

	// RVA: 0x20EF63C Offset: 0x20EF63C VA: 0x20EF63C
	public string get_StateName() { }

	// RVA: 0x20EF644 Offset: 0x20EF644 VA: 0x20EF644
	public void set_StateName(string value) { }

	// RVA: 0x20EF73C Offset: 0x20EF73C VA: 0x20EF73C
	public AnimationTrack get_Track() { }

	// RVA: 0x20EF744 Offset: 0x20EF744 VA: 0x20EF744
	public void set_Track(AnimationTrack value) { }

	// RVA: 0x20EF754 Offset: 0x20EF754 VA: 0x20EF754
	public string get_FriendlyName() { }

	// RVA: 0x20EF738 Offset: 0x20EF738 VA: 0x20EF738
	private void set_FriendlyName(string value) { }

	// RVA: 0x20EF75C Offset: 0x20EF75C VA: 0x20EF75C
	public GameObject get_TargetObject() { }

	// RVA: 0x20EF764 Offset: 0x20EF764 VA: 0x20EF764
	public void set_TargetObject(GameObject value) { }

	// RVA: 0x20EF774 Offset: 0x20EF774 VA: 0x20EF774
	public bool get_Dirty() { }

	// RVA: 0x20EF77C Offset: 0x20EF77C VA: 0x20EF77C
	public void set_Dirty(bool value) { }

	// RVA: 0x20EF788 Offset: 0x20EF788 VA: 0x20EF788
	public float get_EndTime() { }

	// RVA: 0x20EF794 Offset: 0x20EF794 VA: 0x20EF794
	private void set_EndTime(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC1E340 Offset: 0xC1E340 VA: 0xC1E340
	// RVA: 0x20EF798 Offset: 0x20EF798 VA: 0x20EF798
	public int get_RunningLayer() { }

	[CompilerGeneratedAttribute] // RVA: 0xC1E350 Offset: 0xC1E350 VA: 0xC1E350
	// RVA: 0x20EF7A0 Offset: 0x20EF7A0 VA: 0x20EF7A0
	public void set_RunningLayer(int value) { }

	// RVA: 0x20EF7A8 Offset: 0x20EF7A8 VA: 0x20EF7A8
	public static bool IsClipNotRunning(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0x20EF7E4 Offset: 0x20EF7E4 VA: 0x20EF7E4
	public static bool IsClipRunning(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0x20EF838 Offset: 0x20EF838 VA: 0x20EF838
	public static bool IsClipFinished(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0x20EF674 Offset: 0x20EF674 VA: 0x20EF674
	public static string MakeFriendlyStateName(string stateName) { }

	// RVA: 0x20EF878 Offset: 0x20EF878 VA: 0x20EF878
	public void .ctor() { }
}

// Namespace: 
public sealed class AnimationClipData.StateCheck : MulticastDelegate // TypeDefIndex: 3727
{
	// Methods

	// RVA: 0x20EF8D0 Offset: 0x20EF8D0 VA: 0x20EF8D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x20EF8E0 Offset: 0x20EF8E0 VA: 0x20EF8E0 Slot: 11
	public virtual bool Invoke(float sequencerTime, AnimationClipData clipData) { }

	// RVA: 0x20EFB28 Offset: 0x20EFB28 VA: 0x20EFB28 Slot: 12
	public virtual IAsyncResult BeginInvoke(float sequencerTime, AnimationClipData clipData, AsyncCallback callback, object object) { }

	// RVA: 0x20EFBC0 Offset: 0x20EFBC0 VA: 0x20EFBC0 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: WellFired
[ExecuteInEditMode] // RVA: 0xC1D62C Offset: 0xC1D62C VA: 0xC1D62C
public class AnimationTimelineController : MonoBehaviour // TypeDefIndex: 3728
{
	// Fields
	private Animator animator; // 0x18
	private USTimelineAnimation animationTimeline; // 0x20

	// Properties
	private Animator Animator { get; }
	private USTimelineAnimation AnimationTimeline { get; set; }

	// Methods

	// RVA: 0x20EFBFC Offset: 0x20EFBFC VA: 0x20EFBFC
	private Animator get_Animator() { }

	// RVA: 0x20EFC94 Offset: 0x20EFC94 VA: 0x20EFC94
	private USTimelineAnimation get_AnimationTimeline() { }

	// RVA: 0x20EFC9C Offset: 0x20EFC9C VA: 0x20EFC9C
	public void set_AnimationTimeline(USTimelineAnimation value) { }

	// RVA: 0x20EFCA4 Offset: 0x20EFCA4 VA: 0x20EFCA4
	private void OnAnimatorMove() { }

	// RVA: 0x20EFD98 Offset: 0x20EFD98 VA: 0x20EFD98
	public void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class AnimationTrack : ScriptableObject // TypeDefIndex: 3729
{
	// Fields
	[SerializeField] // RVA: 0xC1DB28 Offset: 0xC1DB28 VA: 0xC1DB28
	private List<AnimationClipData> trackClipList; // 0x18
	[SerializeField] // RVA: 0xC1DB38 Offset: 0xC1DB38 VA: 0xC1DB38
	private int layer; // 0x20

	// Properties
	public int Layer { get; set; }
	public List<AnimationClipData> TrackClips { get; set; }

	// Methods

	// RVA: 0x20EFDA0 Offset: 0x20EFDA0 VA: 0x20EFDA0
	public int get_Layer() { }

	// RVA: 0x20EFDA8 Offset: 0x20EFDA8 VA: 0x20EFDA8
	public void set_Layer(int value) { }

	// RVA: 0x20EFDB0 Offset: 0x20EFDB0 VA: 0x20EFDB0
	public List<AnimationClipData> get_TrackClips() { }

	// RVA: 0x20EFDB8 Offset: 0x20EFDB8 VA: 0x20EFDB8
	private void set_TrackClips(List<AnimationClipData> value) { }

	// RVA: 0x20EFDC0 Offset: 0x20EFDC0 VA: 0x20EFDC0
	public void AddClip(AnimationClipData clipData) { }

	// RVA: 0x20EFEA0 Offset: 0x20EFEA0 VA: 0x20EFEA0
	public void RemoveClip(AnimationClipData clipData) { }

	// RVA: 0x20EFF80 Offset: 0x20EFF80 VA: 0x20EFF80
	private void SortClips() { }

	// RVA: 0x20F0090 Offset: 0x20F0090 VA: 0x20F0090
	public void SetClipData(List<AnimationClipData> animationClipData) { }

	// RVA: 0x20F0098 Offset: 0x20F0098 VA: 0x20F0098
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D63C Offset: 0xC1D63C VA: 0xC1D63C
[Serializable]
private sealed class AnimationTrack.<>c // TypeDefIndex: 3730
{
	// Fields
	public static readonly AnimationTrack.<>c <>9; // 0x0
	public static Func<AnimationClipData, float> <>9__10_0; // 0x8

	// Methods

	// RVA: 0x20F0108 Offset: 0x20F0108 VA: 0x20F0108
	private static void .cctor() { }

	// RVA: 0x20F016C Offset: 0x20F016C VA: 0x20F016C
	public void .ctor() { }

	// RVA: 0x20F0174 Offset: 0x20F0174 VA: 0x20F0174
	internal float <SortClips>b__10_0(AnimationClipData trackClip) { }
}

// Namespace: WellFired
[Serializable]
public class USInternalCurve : ScriptableObject // TypeDefIndex: 3731
{
	// Fields
	[SerializeField] // RVA: 0xC1DB48 Offset: 0xC1DB48 VA: 0xC1DB48
	private AnimationCurve animationCurve; // 0x18
	[SerializeField] // RVA: 0xC1DB58 Offset: 0xC1DB58 VA: 0xC1DB58
	private List<USInternalKeyframe> internalKeyframes; // 0x20
	[SerializeField] // RVA: 0xC1DB68 Offset: 0xC1DB68 VA: 0xC1DB68
	private bool useCurrentValue; // 0x28
	[SerializeField] // RVA: 0xC1DB78 Offset: 0xC1DB78 VA: 0xC1DB78
	private float duration; // 0x2C

	// Properties
	public float Duration { get; set; }
	public float FirstKeyframeTime { get; }
	public float LastKeyframeTime { get; }
	public AnimationCurve UnityAnimationCurve { get; set; }
	public List<USInternalKeyframe> Keys { get; }
	public bool UseCurrentValue { get; set; }

	// Methods

	// RVA: 0x20F73B8 Offset: 0x20F73B8 VA: 0x20F73B8
	public static int KeyframeComparer(USInternalKeyframe a, USInternalKeyframe b) { }

	// RVA: 0x20F74B0 Offset: 0x20F74B0 VA: 0x20F74B0
	public float get_Duration() { }

	// RVA: 0x20F74B8 Offset: 0x20F74B8 VA: 0x20F74B8
	public void set_Duration(float value) { }

	// RVA: 0x20F74C0 Offset: 0x20F74C0 VA: 0x20F74C0
	public float get_FirstKeyframeTime() { }

	// RVA: 0x20F7568 Offset: 0x20F7568 VA: 0x20F7568
	public float get_LastKeyframeTime() { }

	// RVA: 0x20F7648 Offset: 0x20F7648 VA: 0x20F7648
	public void set_UnityAnimationCurve(AnimationCurve value) { }

	// RVA: 0x20F7B80 Offset: 0x20F7B80 VA: 0x20F7B80
	public AnimationCurve get_UnityAnimationCurve() { }

	// RVA: 0x20F7B88 Offset: 0x20F7B88 VA: 0x20F7B88
	public List<USInternalKeyframe> get_Keys() { }

	// RVA: 0x20F7B90 Offset: 0x20F7B90 VA: 0x20F7B90
	public bool get_UseCurrentValue() { }

	// RVA: 0x20F7B98 Offset: 0x20F7B98 VA: 0x20F7B98
	public void set_UseCurrentValue(bool value) { }

	// RVA: 0x20F7BA4 Offset: 0x20F7BA4 VA: 0x20F7BA4
	private void OnEnable() { }

	// RVA: 0x20F7D54 Offset: 0x20F7D54 VA: 0x20F7D54
	public float Evaluate(float time) { }

	// RVA: 0x20F778C Offset: 0x20F778C VA: 0x20F778C
	public void BuildInternalCurveFromAnimationCurve() { }

	// RVA: 0x20F7DF4 Offset: 0x20F7DF4 VA: 0x20F7DF4
	public void BuildAnimationCurveFromInternalCurve() { }

	// RVA: 0x20F80D4 Offset: 0x20F80D4 VA: 0x20F80D4
	public void ValidateKeyframeTimes() { }

	// RVA: 0x20F8298 Offset: 0x20F8298 VA: 0x20F8298
	public USInternalKeyframe AddKeyframe(float time, float value) { }

	// RVA: 0x20F89CC Offset: 0x20F89CC VA: 0x20F89CC
	public void RemoveKeyframe(USInternalKeyframe internalKeyframe) { }

	// RVA: 0x20F8C18 Offset: 0x20F8C18 VA: 0x20F8C18
	public USInternalKeyframe GetNextKeyframe(USInternalKeyframe keyframe) { }

	// RVA: 0x20F8DEC Offset: 0x20F8DEC VA: 0x20F8DEC
	public USInternalKeyframe GetPrevKeyframe(USInternalKeyframe keyframe) { }

	// RVA: 0x20F8F94 Offset: 0x20F8F94 VA: 0x20F8F94
	public bool Contains(USInternalKeyframe keyframe) { }

	// RVA: 0x20F9088 Offset: 0x20F9088 VA: 0x20F9088
	public float FindNextKeyframeTime(float time) { }

	// RVA: 0x20F91C8 Offset: 0x20F91C8 VA: 0x20F91C8
	public float FindPrevKeyframeTime(float time) { }

	// RVA: 0x20F930C Offset: 0x20F930C VA: 0x20F930C
	public bool CanSetKeyframeToTime(float newTime) { }

	// RVA: 0x20F9480 Offset: 0x20F9480 VA: 0x20F9480
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D64C Offset: 0xC1D64C VA: 0xC1D64C
[Serializable]
private sealed class USInternalCurve.<>c // TypeDefIndex: 3732
{
	// Fields
	public static readonly USInternalCurve.<>c <>9; // 0x0
	public static Func<USInternalKeyframe, float> <>9__20_0; // 0x8
	public static Func<USInternalKeyframe, float> <>9__25_0; // 0x10
	public static Func<USInternalKeyframe, float> <>9__26_0; // 0x18

	// Methods

	// RVA: 0x20F9488 Offset: 0x20F9488 VA: 0x20F9488
	private static void .cctor() { }

	// RVA: 0x20F94EC Offset: 0x20F94EC VA: 0x20F94EC
	public void .ctor() { }

	// RVA: 0x20F94F4 Offset: 0x20F94F4 VA: 0x20F94F4
	internal float <OnEnable>b__20_0(USInternalKeyframe keyframe) { }

	// RVA: 0x20F9520 Offset: 0x20F9520 VA: 0x20F9520
	internal float <AddKeyframe>b__25_0(USInternalKeyframe keyframe) { }

	// RVA: 0x20F954C Offset: 0x20F954C VA: 0x20F954C
	internal float <RemoveKeyframe>b__26_0(USInternalKeyframe keyframe) { }
}

// Namespace: WellFired
[Serializable]
public class USInternalKeyframe : ScriptableObject // TypeDefIndex: 3733
{
	// Fields
	[SerializeField] // RVA: 0xC1DB88 Offset: 0xC1DB88 VA: 0xC1DB88
	private float value; // 0x18
	[SerializeField] // RVA: 0xC1DB98 Offset: 0xC1DB98 VA: 0xC1DB98
	private float time; // 0x1C
	[SerializeField] // RVA: 0xC1DBA8 Offset: 0xC1DBA8 VA: 0xC1DBA8
	private float inTangent; // 0x20
	[SerializeField] // RVA: 0xC1DBB8 Offset: 0xC1DBB8 VA: 0xC1DBB8
	private float outTangent; // 0x24
	[SerializeField] // RVA: 0xC1DBC8 Offset: 0xC1DBC8 VA: 0xC1DBC8
	private bool brokenTangents; // 0x28
	[SerializeField] // RVA: 0xC1DBD8 Offset: 0xC1DBD8 VA: 0xC1DBD8
	public USInternalCurve curve; // 0x30

	// Properties
	public float Value { get; set; }
	public float Time { get; set; }
	public float InTangent { get; set; }
	public float OutTangent { get; set; }
