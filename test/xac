	// RVA: 0x1F65F3C Offset: 0x1F65F3C VA: 0x1F65F3C
	private string[] InternalSplit(char[] separator, int count, int options) { }

	// RVA: 0x1F669DC Offset: 0x1F669DC VA: 0x1F669DC
	internal static string InternalAllocateStr(int length) { }

	// RVA: 0x1F6D18C Offset: 0x1F6D18C VA: 0x1F6D18C
	private static string InternalIntern(string str) { }

	// RVA: 0x1F55404 Offset: 0x1F55404 VA: 0x1F55404
	public static bool op_Equality(string a, string b) { }

	// RVA: 0x1F4FBE0 Offset: 0x1F4FBE0 VA: 0x1F4FBE0
	public static bool op_Inequality(string a, string b) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3238 Offset: 0xBC3238 VA: 0xBC3238
public interface ICloneable // TypeDefIndex: 28
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Clone();
}

// Namespace: System.Collections.Generic
public interface IEnumerable<T> : IEnumerable // TypeDefIndex: 29
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator<T> GetEnumerator();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerable<object>.GetEnumerator
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC324C Offset: 0xBC324C VA: 0xBC324C
[Serializable]
public struct Single : IFormattable, IConvertible, IComparable, IComparable<float>, IEquatable<float> // TypeDefIndex: 30
{
	// Fields
	public const float Epsilon = 1E-45;
	public const float MaxValue = 3.4028235E+38;
	public const float MinValue = -3.4028235E+38;
	public const float NaN = NaN;
	public const float PositiveInfinity = ∞;
	public const float NegativeInfinity = -∞;
	private const double MaxValueEpsilon = 3.6147112457961776E+29;
	internal float m_value; // 0x0

	// Methods

	// RVA: 0xD63840 Offset: 0xD63840 VA: 0xD63840 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD63848 Offset: 0xD63848 VA: 0xD63848 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD63850 Offset: 0xD63850 VA: 0xD63850 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD63858 Offset: 0xD63858 VA: 0xD63858 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD63860 Offset: 0xD63860 VA: 0xD63860 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD63868 Offset: 0xD63868 VA: 0xD63868 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD63870 Offset: 0xD63870 VA: 0xD63870 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD63878 Offset: 0xD63878 VA: 0xD63878 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD63880 Offset: 0xD63880 VA: 0xD63880 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD63888 Offset: 0xD63888 VA: 0xD63888 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD63890 Offset: 0xD63890 VA: 0xD63890 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD63898 Offset: 0xD63898 VA: 0xD63898 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD638A0 Offset: 0xD638A0 VA: 0xD638A0 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD638A8 Offset: 0xD638A8 VA: 0xD638A8 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD638B0 Offset: 0xD638B0 VA: 0xD638B0 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD638B8 Offset: 0xD638B8 VA: 0xD638B8 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD638C0 Offset: 0xD638C0 VA: 0xD638C0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD638C8 Offset: 0xD638C8 VA: 0xD638C8 Slot: 22
	public int CompareTo(float value) { }

	// RVA: 0xD638D0 Offset: 0xD638D0 VA: 0xD638D0 Slot: 23
	public bool Equals(float obj) { }

	// RVA: 0xD638F0 Offset: 0xD638F0 VA: 0xD638F0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F64918 Offset: 0x1F64918 VA: 0x1F64918
	public static bool IsInfinity(float f) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBAFC Offset: 0xBCBAFC VA: 0xBCBAFC
	// RVA: 0x1F6476C Offset: 0x1F6476C VA: 0x1F6476C
	public static bool IsNaN(float f) { }

	// RVA: 0x1F64730 Offset: 0x1F64730 VA: 0x1F64730
	public static bool IsNegativeInfinity(float f) { }

	// RVA: 0x1F646F4 Offset: 0x1F646F4 VA: 0x1F646F4
	public static bool IsPositiveInfinity(float f) { }

	// RVA: 0x1F64940 Offset: 0x1F64940 VA: 0x1F64940
	public static float Parse(string s) { }

	// RVA: 0x1F64A08 Offset: 0x1F64A08 VA: 0x1F64A08
	public static float Parse(string s, IFormatProvider provider) { }

	// RVA: 0x1F64ADC Offset: 0x1F64ADC VA: 0x1F64ADC
	public static float Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x1F64BB4 Offset: 0x1F64BB4 VA: 0x1F64BB4
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result) { }

	// RVA: 0x1F64C44 Offset: 0x1F64C44 VA: 0x1F64C44
	public static bool TryParse(string s, out float result) { }

	// RVA: 0xD638F8 Offset: 0xD638F8 VA: 0xD638F8 Slot: 3
	public override string ToString() { }

	// RVA: 0xD63900 Offset: 0xD63900 VA: 0xD63900 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD63908 Offset: 0xD63908 VA: 0xD63908
	public string ToString(string format) { }

	// RVA: 0xD63914 Offset: 0xD63914 VA: 0xD63914 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD6391C Offset: 0xD6391C VA: 0xD6391C Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3260 Offset: 0xBC3260 VA: 0xBC3260
[Serializable]
public struct Double : IFormattable, IConvertible, IComparable, IComparable<double>, IEquatable<double> // TypeDefIndex: 31
{
	// Fields
	public const double Epsilon = 5E-324;
	public const double MaxValue = 1.7976931348623157E+308;
	public const double MinValue = -1.7976931348623157E+308;
	public const double NaN = NaN;
	public const double NegativeInfinity = -∞;
	public const double PositiveInfinity = ∞;
	private const int State_AllowSign = 1;
	private const int State_Digits = 2;
	private const int State_Decimal = 3;
	private const int State_ExponentSign = 4;
	private const int State_Exponent = 5;
	private const int State_ConsumeWhiteSpace = 6;
	private const int State_Exit = 7;
	internal double m_value; // 0x0

	// Methods

	// RVA: 0xD69400 Offset: 0xD69400 VA: 0xD69400 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD69408 Offset: 0xD69408 VA: 0xD69408 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD69410 Offset: 0xD69410 VA: 0xD69410 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD69418 Offset: 0xD69418 VA: 0xD69418 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD69424 Offset: 0xD69424 VA: 0xD69424 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD69430 Offset: 0xD69430 VA: 0xD69430 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD69438 Offset: 0xD69438 VA: 0xD69438 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD69440 Offset: 0xD69440 VA: 0xD69440 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD69448 Offset: 0xD69448 VA: 0xD69448 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD69450 Offset: 0xD69450 VA: 0xD69450 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD69458 Offset: 0xD69458 VA: 0xD69458 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD69460 Offset: 0xD69460 VA: 0xD69460 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD69468 Offset: 0xD69468 VA: 0xD69468 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD69470 Offset: 0xD69470 VA: 0xD69470 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD69478 Offset: 0xD69478 VA: 0xD69478 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD69480 Offset: 0xD69480 VA: 0xD69480 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD69488 Offset: 0xD69488 VA: 0xD69488 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD69490 Offset: 0xD69490 VA: 0xD69490 Slot: 22
	public int CompareTo(double value) { }

	// RVA: 0xD69498 Offset: 0xD69498 VA: 0xD69498 Slot: 23
	public bool Equals(double obj) { }

	// RVA: 0xD694B8 Offset: 0xD694B8 VA: 0xD694B8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23ADB74 Offset: 0x23ADB74 VA: 0x23ADB74
	public static bool IsInfinity(double d) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBB14 Offset: 0xBCBB14 VA: 0xBCBB14
	// RVA: 0x23A6264 Offset: 0x23A6264 VA: 0x23A6264
	public static bool IsNaN(double d) { }

	// RVA: 0x23A6270 Offset: 0x23A6270 VA: 0x23A6270
	public static bool IsNegativeInfinity(double d) { }

	// RVA: 0x23A62AC Offset: 0x23A62AC VA: 0x23A62AC
	public static bool IsPositiveInfinity(double d) { }

	// RVA: 0x23ADB9C Offset: 0x23ADB9C VA: 0x23ADB9C
	public static double Parse(string s) { }

	// RVA: 0x23ADC44 Offset: 0x23ADC44 VA: 0x23ADC44
	public static double Parse(string s, IFormatProvider provider) { }

	// RVA: 0x23ADBA8 Offset: 0x23ADBA8 VA: 0x23ADBA8
	public static double Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x23ADC54 Offset: 0x23ADC54 VA: 0x23ADC54
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc) { }

	// RVA: 0x23AEBBC Offset: 0x23AEBBC VA: 0x23AEBBC
	private static bool TryParseStringConstant(string format, string s, int start, int end) { }

	// RVA: 0x23AECC0 Offset: 0x23AECC0 VA: 0x23AECC0
	private static bool ParseImpl(byte* byte_ptr, out double value) { }

	// RVA: 0x23AECC4 Offset: 0x23AECC4 VA: 0x23AECC4
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out double result) { }

	// RVA: 0x23AED10 Offset: 0x23AED10 VA: 0x23AED10
	public static bool TryParse(string s, out double result) { }

	// RVA: 0xD694C4 Offset: 0xD694C4 VA: 0xD694C4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD694CC Offset: 0xD694CC VA: 0xD694CC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xD694D4 Offset: 0xD694D4 VA: 0xD694D4
	public string ToString(string format) { }

	// RVA: 0xD694E0 Offset: 0xD694E0 VA: 0xD694E0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3274 Offset: 0xBC3274 VA: 0xBC3274
[Serializable]
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable<Decimal>, IEquatable<Decimal> // TypeDefIndex: 32
{
	// Fields
	[DecimalConstantAttribute] // RVA: 0xBCB328 Offset: 0xBCB328 VA: 0xBCB328
	public static readonly Decimal MinValue; // 0x0
	[DecimalConstantAttribute] // RVA: 0xBCB34C Offset: 0xBCB34C VA: 0xBCB34C
	public static readonly Decimal MaxValue; // 0x10
	[DecimalConstantAttribute] // RVA: 0xBCB370 Offset: 0xBCB370 VA: 0xBCB370
	public static readonly Decimal MinusOne; // 0x20
	[DecimalConstantAttribute] // RVA: 0xBCB394 Offset: 0xBCB394 VA: 0xBCB394
	public static readonly Decimal One; // 0x30
	[DecimalConstantAttribute] // RVA: 0xBCB3B8 Offset: 0xBCB3B8 VA: 0xBCB3B8
	public static readonly Decimal Zero; // 0x40
	private const int DECIMAL_DIVIDE_BY_ZERO = 5;
	private const uint MAX_SCALE = 28;
	private const int iMAX_SCALE = 28;
	private const uint SIGN_FLAG = 2147483648;
	private const uint SCALE_MASK = 16711680;
	private const int SCALE_SHIFT = 16;
	private const uint RESERVED_SS32_BITS = 2130771967;
	private static readonly Decimal MaxValueDiv10; // 0x50
	private uint flags; // 0x0
	private uint hi; // 0x4
	private uint lo; // 0x8
	private uint mid; // 0xC

	// Methods

	// RVA: 0xD69268 Offset: 0xD69268 VA: 0xD69268
	public void .ctor(int lo, int mid, int hi, bool isNegative, byte scale) { }

	// RVA: 0xD69274 Offset: 0xD69274 VA: 0xD69274
	public void .ctor(int value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBB2C Offset: 0xBCBB2C VA: 0xBCBB2C
	// RVA: 0xD6929C Offset: 0xD6929C VA: 0xD6929C
	public void .ctor(uint value) { }

	// RVA: 0xD692A8 Offset: 0xD692A8 VA: 0xD692A8
	public void .ctor(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBB40 Offset: 0xBCBB40 VA: 0xBCBB40
	// RVA: 0xD692D0 Offset: 0xD692D0 VA: 0xD692D0
	public void .ctor(ulong value) { }

	// RVA: 0xD692E0 Offset: 0xD692E0 VA: 0xD692E0
	public void .ctor(float value) { }

	// RVA: 0xD692E8 Offset: 0xD692E8 VA: 0xD692E8
	public void .ctor(double value) { }

	// RVA: 0xD692F0 Offset: 0xD692F0 VA: 0xD692F0
	public void .ctor(int[] bits) { }

	// RVA: 0x23A651C Offset: 0x23A651C VA: 0x23A651C
	private static void .cctor() { }

	// RVA: 0xD692F8 Offset: 0xD692F8 VA: 0xD692F8 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD69300 Offset: 0xD69300 VA: 0xD69300 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD69308 Offset: 0xD69308 VA: 0xD69308 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD69310 Offset: 0xD69310 VA: 0xD69310 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD6931C Offset: 0xD6931C VA: 0xD6931C Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD69328 Offset: 0xD69328 VA: 0xD69328 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD69334 Offset: 0xD69334 VA: 0xD69334 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD6933C Offset: 0xD6933C VA: 0xD6933C Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD69344 Offset: 0xD69344 VA: 0xD69344 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD6934C Offset: 0xD6934C VA: 0xD6934C Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD69354 Offset: 0xD69354 VA: 0xD69354 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD6935C Offset: 0xD6935C VA: 0xD6935C Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD69364 Offset: 0xD69364 VA: 0xD69364 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD6936C Offset: 0xD6936C VA: 0xD6936C Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD69374 Offset: 0xD69374 VA: 0xD69374 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x23A6C84 Offset: 0x23A6C84 VA: 0x23A6C84
	public static int[] GetBits(Decimal d) { }

	// RVA: 0x23A6D78 Offset: 0x23A6D78 VA: 0x23A6D78
	public static Decimal Add(Decimal d1, Decimal d2) { }

	// RVA: 0x23A6E54 Offset: 0x23A6E54 VA: 0x23A6E54
	public static Decimal Subtract(Decimal d1, Decimal d2) { }

	// RVA: 0xD6937C Offset: 0xD6937C VA: 0xD6937C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23A6FAC Offset: 0x23A6FAC VA: 0x23A6FAC
	private static ulong u64(Decimal value) { }

	// RVA: 0x23A7078 Offset: 0x23A7078 VA: 0x23A7078
	private static long s64(Decimal value) { }

	// RVA: 0x23A7140 Offset: 0x23A7140 VA: 0x23A7140
	public static bool Equals(Decimal d1, Decimal d2) { }

	// RVA: 0xD69394 Offset: 0xD69394 VA: 0xD69394 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0xD6939C Offset: 0xD6939C VA: 0xD6939C
	private bool IsZero() { }

	// RVA: 0x23A732C Offset: 0x23A732C VA: 0x23A732C
	public static Decimal Floor(Decimal d) { }

	// RVA: 0x23A73A4 Offset: 0x23A73A4 VA: 0x23A73A4
	public static Decimal Truncate(Decimal d) { }

	// RVA: 0x23A741C Offset: 0x23A741C VA: 0x23A741C
	public static Decimal Multiply(Decimal d1, Decimal d2) { }

	// RVA: 0x23A7534 Offset: 0x23A7534 VA: 0x23A7534
	public static Decimal Divide(Decimal d1, Decimal d2) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBB54 Offset: 0xBCBB54 VA: 0xBCBB54
	// RVA: 0x23A71D8 Offset: 0x23A71D8 VA: 0x23A71D8
	public static int Compare(Decimal d1, Decimal d2) { }

	// RVA: 0xD693C4 Offset: 0xD693C4 VA: 0xD693C4 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xD693CC Offset: 0xD693CC VA: 0xD693CC Slot: 22
	public int CompareTo(Decimal value) { }

	// RVA: 0xD693D4 Offset: 0xD693D4 VA: 0xD693D4 Slot: 23
	public bool Equals(Decimal value) { }

	// RVA: 0x23A78F4 Offset: 0x23A78F4 VA: 0x23A78F4
	public static Decimal Parse(string s, IFormatProvider provider) { }

	// RVA: 0x23A796C Offset: 0x23A796C VA: 0x23A796C
	private static void ThrowAtPos(int pos) { }

	// RVA: 0x23A7A7C Offset: 0x23A7A7C VA: 0x23A7A7C
	private static void ThrowInvalidExp() { }

	// RVA: 0x23A7B00 Offset: 0x23A7B00 VA: 0x23A7B00
	private static string stripStyles(string s, NumberStyles style, NumberFormatInfo nfi, out int decPos, out bool isNegative, out bool expFlag, out int exp, bool throwex) { }

	// RVA: 0x23A5F38 Offset: 0x23A5F38 VA: 0x23A5F38
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x23A87D0 Offset: 0x23A87D0 VA: 0x23A87D0
	private static bool PerformParse(string s, NumberStyles style, IFormatProvider provider, out Decimal res, bool throwex) { }

	// RVA: 0x23A8EDC Offset: 0x23A8EDC VA: 0x23A8EDC
	public static double ToDouble(Decimal d) { }

	// RVA: 0x23A8F54 Offset: 0x23A8F54 VA: 0x23A8F54
	public static int ToInt32(Decimal d) { }

	// RVA: 0xD693DC Offset: 0xD693DC VA: 0xD693DC Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xD693E4 Offset: 0xD693E4 VA: 0xD693E4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD693EC Offset: 0xD693EC VA: 0xD693EC
	public string ToString(string format) { }

	// RVA: 0xD693F8 Offset: 0xD693F8 VA: 0xD693F8 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x23A7074 Offset: 0x23A7074 VA: 0x23A7074
	private static int decimal2UInt64(ref Decimal val, out ulong result) { }

	// RVA: 0x23A713C Offset: 0x23A713C VA: 0x23A713C
	private static int decimal2Int64(ref Decimal val, out long result) { }

	// RVA: 0x23A6E50 Offset: 0x23A6E50 VA: 0x23A6E50
	private static int decimalIncr(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x23A8ED4 Offset: 0x23A8ED4 VA: 0x23A8ED4
	internal static int string2decimal(out Decimal val, string sDigits, uint decPos, int sign) { }

	// RVA: 0x23A8ED8 Offset: 0x23A8ED8 VA: 0x23A8ED8
	internal static int decimalSetExponent(ref Decimal val, int exp) { }

	// RVA: 0x23A9394 Offset: 0x23A9394 VA: 0x23A9394
	private static double decimal2double(ref Decimal val) { }

	// RVA: 0x23A7070 Offset: 0x23A7070 VA: 0x23A7070
	private static void decimalFloorAndTrunc(ref Decimal val, int floorFlag) { }

	// RVA: 0x23A7530 Offset: 0x23A7530 VA: 0x23A7530
	private static int decimalMult(ref Decimal pd1, ref Decimal pd2) { }

	// RVA: 0x23A76DC Offset: 0x23A76DC VA: 0x23A76DC
	private static int decimalDiv(out Decimal pc, ref Decimal pa, ref Decimal pb) { }

	// RVA: 0x23A76E0 Offset: 0x23A76E0 VA: 0x23A76E0
	private static int decimalCompare(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x23A9398 Offset: 0x23A9398 VA: 0x23A9398
	public static Decimal op_Addition(Decimal d1, Decimal d2) { }

	// RVA: 0x23A9424 Offset: 0x23A9424 VA: 0x23A9424
	public static Decimal op_Increment(Decimal d) { }

	// RVA: 0x23A94A0 Offset: 0x23A94A0 VA: 0x23A94A0
	public static Decimal op_Subtraction(Decimal d1, Decimal d2) { }

	// RVA: 0x23A952C Offset: 0x23A952C VA: 0x23A952C
	public static Decimal op_Multiply(Decimal d1, Decimal d2) { }

	// RVA: 0x23A95B8 Offset: 0x23A95B8 VA: 0x23A95B8
	public static Decimal op_Division(Decimal d1, Decimal d2) { }

	// RVA: 0x23A9644 Offset: 0x23A9644 VA: 0x23A9644
	public static byte op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBB6C Offset: 0xBCBB6C VA: 0xBCBB6C
	// RVA: 0x23A96E0 Offset: 0x23A96E0 VA: 0x23A96E0
	public static sbyte op_Explicit(Decimal value) { }

	// RVA: 0x23A977C Offset: 0x23A977C VA: 0x23A977C
	public static short op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBB80 Offset: 0xBCBB80 VA: 0xBCBB80
	// RVA: 0x23A9818 Offset: 0x23A9818 VA: 0x23A9818
	public static ushort op_Explicit(Decimal value) { }

	// RVA: 0x23A91B0 Offset: 0x23A91B0 VA: 0x23A91B0
	public static int op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBB94 Offset: 0xBCBB94 VA: 0xBCBB94
	// RVA: 0x23A98B4 Offset: 0x23A98B4 VA: 0x23A98B4
	public static uint op_Explicit(Decimal value) { }

	// RVA: 0x23A9950 Offset: 0x23A9950 VA: 0x23A9950
	public static long op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBBA8 Offset: 0xBCBBA8 VA: 0xBCBBA8
	// RVA: 0x23A99C4 Offset: 0x23A99C4 VA: 0x23A99C4
	public static ulong op_Explicit(Decimal value) { }

	// RVA: 0x23A9A38 Offset: 0x23A9A38 VA: 0x23A9A38
	public static Decimal op_Implicit(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBBBC Offset: 0xBCBBBC VA: 0xBCBBBC
	// RVA: 0x23A9A44 Offset: 0x23A9A44 VA: 0x23A9A44
	public static Decimal op_Implicit(sbyte value) { }

	// RVA: 0x23A9A5C Offset: 0x23A9A5C VA: 0x23A9A5C
	public static Decimal op_Implicit(short value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBBD0 Offset: 0xBCBBD0 VA: 0xBCBBD0
	// RVA: 0x23A9A74 Offset: 0x23A9A74 VA: 0x23A9A74
	public static Decimal op_Implicit(ushort value) { }

	// RVA: 0x23A9A80 Offset: 0x23A9A80 VA: 0x23A9A80
	public static Decimal op_Implicit(int value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBBE4 Offset: 0xBCBBE4 VA: 0xBCBBE4
	// RVA: 0x23A9A90 Offset: 0x23A9A90 VA: 0x23A9A90
	public static Decimal op_Implicit(uint value) { }

	// RVA: 0x23A9A9C Offset: 0x23A9A9C VA: 0x23A9A9C
	public static Decimal op_Implicit(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBBF8 Offset: 0xBCBBF8 VA: 0xBCBBF8
	// RVA: 0x23A9AB0 Offset: 0x23A9AB0 VA: 0x23A9AB0
	public static Decimal op_Implicit(ulong value) { }

	// RVA: 0x23A9AC0 Offset: 0x23A9AC0 VA: 0x23A9AC0
	public static Decimal op_Explicit(float value) { }

	// RVA: 0x23A9AE8 Offset: 0x23A9AE8 VA: 0x23A9AE8
	public static Decimal op_Explicit(double value) { }

	// RVA: 0x23A9B10 Offset: 0x23A9B10 VA: 0x23A9B10
	public static float op_Explicit(Decimal value) { }

	// RVA: 0x23A9B8C Offset: 0x23A9B8C VA: 0x23A9B8C
	public static double op_Explicit(Decimal value) { }

	// RVA: 0x23A9BFC Offset: 0x23A9BFC VA: 0x23A9BFC
	public static bool op_Inequality(Decimal d1, Decimal d2) { }

	// RVA: 0x23A9C94 Offset: 0x23A9C94 VA: 0x23A9C94
	public static bool op_Equality(Decimal d1, Decimal d2) { }

	// RVA: 0x23A9084 Offset: 0x23A9084 VA: 0x23A9084
	public static bool op_GreaterThan(Decimal d1, Decimal d2) { }

	// RVA: 0x23A9D20 Offset: 0x23A9D20 VA: 0x23A9D20
	public static bool op_GreaterThanOrEqual(Decimal d1, Decimal d2) { }

	// RVA: 0x23A911C Offset: 0x23A911C VA: 0x23A911C
	public static bool op_LessThan(Decimal d1, Decimal d2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3288 Offset: 0xBC3288 VA: 0xBC3288
[Serializable]
public struct Boolean : IConvertible, IComparable, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 33
{
	// Fields
	public static readonly string FalseString; // 0x0
	public static readonly string TrueString; // 0x8
	internal bool m_value; // 0x0

	// Methods

	// RVA: 0x22833A0 Offset: 0x22833A0 VA: 0x22833A0
	private static void .cctor() { }

	// RVA: 0xD67D18 Offset: 0xD67D18 VA: 0xD67D18 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xD67D20 Offset: 0xD67D20 VA: 0xD67D20 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xD67D30 Offset: 0xD67D30 VA: 0xD67D30 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xD67D38 Offset: 0xD67D38 VA: 0xD67D38 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xD67D44 Offset: 0xD67D44 VA: 0xD67D44 Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xD67D50 Offset: 0xD67D50 VA: 0xD67D50 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xD67D58 Offset: 0xD67D58 VA: 0xD67D58 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xD67D60 Offset: 0xD67D60 VA: 0xD67D60 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xD67D68 Offset: 0xD67D68 VA: 0xD67D68 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xD67D70 Offset: 0xD67D70 VA: 0xD67D70 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xD67D78 Offset: 0xD67D78 VA: 0xD67D78 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xD67D80 Offset: 0xD67D80 VA: 0xD67D80 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xD67D88 Offset: 0xD67D88 VA: 0xD67D88 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xD67D90 Offset: 0xD67D90 VA: 0xD67D90 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xD67D98 Offset: 0xD67D98 VA: 0xD67D98 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xD67DA0 Offset: 0xD67DA0 VA: 0xD67DA0 Slot: 20
	public int CompareTo(object obj) { }

	// RVA: 0xD67DA8 Offset: 0xD67DA8 VA: 0xD67DA8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD67DB0 Offset: 0xD67DB0 VA: 0xD67DB0 Slot: 21
	public int CompareTo(bool value) { }

	// RVA: 0xD67DD0 Offset: 0xD67DD0 VA: 0xD67DD0 Slot: 22
	public bool Equals(bool obj) { }

	// RVA: 0xD67DE4 Offset: 0xD67DE4 VA: 0xD67DE4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2283C88 Offset: 0x2283C88 VA: 0x2283C88
	public static bool Parse(string value) { }

	// RVA: 0x2283EAC Offset: 0x2283EAC VA: 0x2283EAC
	public static bool TryParse(string value, out bool result) { }

	// RVA: 0xD67DF4 Offset: 0xD67DF4 VA: 0xD67DF4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD67DFC Offset: 0xD67DFC VA: 0xD67DFC Slot: 23
	public TypeCode GetTypeCode() { }

	// RVA: 0xD67E04 Offset: 0xD67E04 VA: 0xD67E04 Slot: 15
	public string ToString(IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC329C Offset: 0xBC329C VA: 0xBC329C
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 34
{
	// Fields
	private void* m_value; // 0x0
	public static readonly IntPtr Zero; // 0x0

	// Properties
	public static int Size { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0xBCBC0C Offset: 0xBCBC0C VA: 0xBCBC0C
	// RVA: 0xD678FC Offset: 0xD678FC VA: 0xD678FC
	public void .ctor(int value) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBC24 Offset: 0xBCBC24 VA: 0xBCBC24
	// RVA: 0xD67908 Offset: 0xD67908 VA: 0xD67908
	public void .ctor(long value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBC3C Offset: 0xBCBC3C VA: 0xBCBC3C
	[ReliabilityContractAttribute] // RVA: 0xBCBC3C Offset: 0xBCBC3C VA: 0xBCBC3C
	// RVA: 0xD67910 Offset: 0xD67910 VA: 0xD67910
	public void .ctor(void* value) { }

	// RVA: 0xD67918 Offset: 0xD67918 VA: 0xD67918
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xD67920 Offset: 0xD67920 VA: 0xD67920 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBC80 Offset: 0xBCBC80 VA: 0xBCBC80
	// RVA: 0x21E1DB8 Offset: 0x21E1DB8 VA: 0x21E1DB8
	public static int get_Size() { }

	// RVA: 0xD67928 Offset: 0xD67928 VA: 0xD67928 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD67930 Offset: 0xD67930 VA: 0xD67930 Slot: 2
	public override int GetHashCode() { }

	[ReliabilityContractAttribute] // RVA: 0xBCBC98 Offset: 0xBCBC98 VA: 0xBCBC98
	// RVA: 0xD67938 Offset: 0xD67938 VA: 0xD67938
	public int ToInt32() { }

	[ReliabilityContractAttribute] // RVA: 0xBCBCB0 Offset: 0xBCBCB0 VA: 0xBCBCB0
	// RVA: 0xD67940 Offset: 0xD67940 VA: 0xD67940
	public long ToInt64() { }

	[ReliabilityContractAttribute] // RVA: 0xBCBCC8 Offset: 0xBCBCC8 VA: 0xBCBCC8
	[CLSCompliantAttribute] // RVA: 0xBCBCC8 Offset: 0xBCBCC8 VA: 0xBCBCC8
	// RVA: 0xD67948 Offset: 0xD67948 VA: 0xD67948
	public void* ToPointer() { }

	// RVA: 0xD67950 Offset: 0xD67950 VA: 0xD67950 Slot: 3
	public override string ToString() { }

	// RVA: 0xD67980 Offset: 0xD67980 VA: 0xD67980
	public string ToString(string format) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBD0C Offset: 0xBCBD0C VA: 0xBCBD0C
	// RVA: 0x21E1EBC Offset: 0x21E1EBC VA: 0x21E1EBC
	public static bool op_Equality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBD24 Offset: 0xBCBD24 VA: 0xBCBD24
	// RVA: 0x21E1EC8 Offset: 0x21E1EC8 VA: 0x21E1EC8
	public static bool op_Inequality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBD3C Offset: 0xBCBD3C VA: 0xBCBD3C
	// RVA: 0x21E1ED4 Offset: 0x21E1ED4 VA: 0x21E1ED4
	public static IntPtr op_Explicit(int value) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBD54 Offset: 0xBCBD54 VA: 0xBCBD54
	// RVA: 0x21E1EDC Offset: 0x21E1EDC VA: 0x21E1EDC
	public static IntPtr op_Explicit(long value) { }

	[ReliabilityContractAttribute] // RVA: 0xBCBD6C Offset: 0xBCBD6C VA: 0xBCBD6C
	[CLSCompliantAttribute] // RVA: 0xBCBD6C Offset: 0xBCBD6C VA: 0xBCBD6C
	// RVA: 0x21E1EE0 Offset: 0x21E1EE0 VA: 0x21E1EE0
	public static IntPtr op_Explicit(void* value) { }

	// RVA: 0x21E1EE4 Offset: 0x21E1EE4 VA: 0x21E1EE4
	public static int op_Explicit(IntPtr value) { }

	// RVA: 0x21E1EE8 Offset: 0x21E1EE8 VA: 0x21E1EE8
	public static long op_Explicit(IntPtr value) { }

	[CLSCompliantAttribute] // RVA: 0xBCBDB0 Offset: 0xBCBDB0 VA: 0xBCBDB0
	// RVA: 0x21E1EEC Offset: 0x21E1EEC VA: 0x21E1EEC
	public static void* op_Explicit(IntPtr value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xBC32B0 Offset: 0xBC32B0 VA: 0xBC32B0
public interface ISerializable // TypeDefIndex: 35
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xBC32C4 Offset: 0xBC32C4 VA: 0xBC32C4
[ComVisibleAttribute] // RVA: 0xBC32C4 Offset: 0xBC32C4 VA: 0xBC32C4
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 36
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private void* _pointer; // 0x0

	// Methods

	// RVA: 0xD73BD8 Offset: 0xD73BD8 VA: 0xD73BD8
	public void .ctor(uint value) { }

	// RVA: 0x2AF6228 Offset: 0x2AF6228 VA: 0x2AF6228
	private static void .cctor() { }

	// RVA: 0xD73BE4 Offset: 0xD73BE4 VA: 0xD73BE4 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xD73BEC Offset: 0xD73BEC VA: 0xD73BEC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD73BF4 Offset: 0xD73BF4 VA: 0xD73BF4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD73BFC Offset: 0xD73BFC VA: 0xD73BFC Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3304 Offset: 0xBC3304 VA: 0xBC3304
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 37
{
	// Fields
	private MulticastDelegate prev; // 0x58
	private MulticastDelegate kpm_next; // 0x60

	// Methods

	// RVA: 0x21E8870 Offset: 0x21E8870 VA: 0x21E8870 Slot: 7
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21E8878 Offset: 0x21E8878 VA: 0x21E8878 Slot: 0
	public sealed override bool Equals(object obj) { }

	// RVA: 0x21E895C Offset: 0x21E895C VA: 0x21E895C Slot: 2
	public sealed override int GetHashCode() { }

	// RVA: 0x21E8964 Offset: 0x21E8964 VA: 0x21E8964 Slot: 8
	public sealed override Delegate[] GetInvocationList() { }

	// RVA: 0x21E8D74 Offset: 0x21E8D74 VA: 0x21E8D74 Slot: 9
	protected sealed override Delegate CombineImpl(Delegate follow) { }

	// RVA: 0x21E9230 Offset: 0x21E9230 VA: 0x21E9230
	private bool BaseEquals(MulticastDelegate value) { }

	// RVA: 0x21E9238 Offset: 0x21E9238 VA: 0x21E9238
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail) { }

	// RVA: 0x21E9388 Offset: 0x21E9388 VA: 0x21E9388 Slot: 10
	protected sealed override Delegate RemoveImpl(Delegate value) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3318 Offset: 0xBC3318 VA: 0xBC3318
[ClassInterfaceAttribute] // RVA: 0xBC3318 Offset: 0xBC3318 VA: 0xBC3318
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 38
{
	// Fields
	private IntPtr method_ptr; // 0x10
	private IntPtr invoke_impl; // 0x18
	private object m_target; // 0x20
	private IntPtr method; // 0x28
	private IntPtr delegate_trampoline; // 0x30
	private IntPtr method_code; // 0x38
	private MethodInfo method_info; // 0x40
	private MethodInfo original_method_info; // 0x48
	private DelegateData data; // 0x50

	// Properties
	public MethodInfo Method { get; }
	public object Target { get; }

	// Methods

	// RVA: 0x23A9DB8 Offset: 0x23A9DB8 VA: 0x23A9DB8
	public MethodInfo get_Method() { }

	// RVA: 0x23A9EC8 Offset: 0x23A9EC8 VA: 0x23A9EC8
	public object get_Target() { }

	// RVA: 0x23A9ED0 Offset: 0x23A9ED0 VA: 0x23A9ED0
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure) { }

	// RVA: 0x23A9ED8 Offset: 0x23A9ED8 VA: 0x23A9ED8
	internal void SetMulticastInvoke() { }

	// RVA: 0x23A9EDC Offset: 0x23A9EDC VA: 0x23A9EDC
	private static bool arg_type_match(Type delArgType, Type argType) { }

	// RVA: 0x23A9F54 Offset: 0x23A9F54 VA: 0x23A9F54
	private static bool return_type_match(Type delReturnType, Type returnType) { }

	// RVA: 0x23A9FCC Offset: 0x23A9FCC VA: 0x23A9FCC
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x23AA7FC Offset: 0x23AA7FC VA: 0x23AA7FC
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method) { }

	// RVA: 0x23AA804 Offset: 0x23AA804 VA: 0x23AA804
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x23AA818 Offset: 0x23AA818 VA: 0x23AA818
	public static Delegate CreateDelegate(Type type, MethodInfo method) { }

	// RVA: 0x23AA82C Offset: 0x23AA82C VA: 0x23AA82C
	public static Delegate CreateDelegate(Type type, object target, string method) { }

	// RVA: 0x23AA844 Offset: 0x23AA844 VA: 0x23AA844
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x23AAC00 Offset: 0x23AAC00 VA: 0x23AAC00
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x23AACE4 Offset: 0x23AACE4 VA: 0x23AACE4
	public static Delegate CreateDelegate(Type type, Type target, string method) { }

	// RVA: 0x23AACF0 Offset: 0x23AACF0 VA: 0x23AACF0
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x23AA838 Offset: 0x23AA838 VA: 0x23AA838
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase) { }

	// RVA: 0x23AADE0 Offset: 0x23AADE0 VA: 0x23AADE0 Slot: 6
	public virtual object Clone() { }

	// RVA: 0x23AADE8 Offset: 0x23AADE8 VA: 0x23AADE8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x23AAF14 Offset: 0x23AAF14 VA: 0x23AAF14 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23AAF64 Offset: 0x23AAF64 VA: 0x23AAF64 Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x23AB190 Offset: 0x23AB190 VA: 0x23AB190 Slot: 8
	public virtual Delegate[] GetInvocationList() { }

	// RVA: 0x23AB240 Offset: 0x23AB240 VA: 0x23AB240
	public static Delegate Combine(Delegate a, Delegate b) { }

	[ComVisibleAttribute] // RVA: 0xBCBDC4 Offset: 0xBCBDC4 VA: 0xBCBDC4
	// RVA: 0x23AB338 Offset: 0x23AB338 VA: 0x23AB338
	public static Delegate Combine(Delegate[] delegates) { }

	// RVA: 0x23AB3C0 Offset: 0x23AB3C0 VA: 0x23AB3C0 Slot: 9
	protected virtual Delegate CombineImpl(Delegate d) { }

	// RVA: 0x23AB458 Offset: 0x23AB458 VA: 0x23AB458
	public static Delegate Remove(Delegate source, Delegate value) { }

	// RVA: 0x23AB46C Offset: 0x23AB46C VA: 0x23AB46C Slot: 10
	protected virtual Delegate RemoveImpl(Delegate d) { }

	// RVA: 0x23AB49C Offset: 0x23AB49C VA: 0x23AB49C
	public static bool op_Equality(Delegate d1, Delegate d2) { }

	// RVA: 0x23AB4C4 Offset: 0x23AB4C4 VA: 0x23AB4C4
	public static bool op_Inequality(Delegate d1, Delegate d2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBC3358 Offset: 0xBC3358 VA: 0xBC3358
[Serializable]
public abstract class Enum : ValueType, IFormattable, IConvertible, IComparable // TypeDefIndex: 39
{
	// Fields
	private static char[] split_char; // 0x0

	// Properties
	private object Value { get; }

	// Methods

