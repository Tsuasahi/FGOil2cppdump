	// RVA: 0xF008B0 Offset: 0xF008B0 VA: 0xF008B0
	private string[] InternalSplit(char[] separator, int count, int options) { }

	// RVA: 0xF01350 Offset: 0xF01350 VA: 0xF01350
	internal static string InternalAllocateStr(int length) { }

	// RVA: 0xF07B00 Offset: 0xF07B00 VA: 0xF07B00
	private static string InternalIntern(string str) { }

	// RVA: 0xEEFD78 Offset: 0xEEFD78 VA: 0xEEFD78
	public static bool op_Equality(string a, string b) { }

	// RVA: 0xEEA554 Offset: 0xEEA554 VA: 0xEEA554
	public static bool op_Inequality(string a, string b) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F360 Offset: 0xC2F360 VA: 0xC2F360
public interface ICloneable // TypeDefIndex: 28
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Clone();
}

// Namespace: System.Collections.Generic
public interface IEnumerable<T> : IEnumerable // TypeDefIndex: 29
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator<T> GetEnumerator();
	/* GenericInstMethod :
	|
	|-RVA: -1 Offset: -1
	|-IEnumerable<object>.GetEnumerator
	*/
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F374 Offset: 0xC2F374 VA: 0xC2F374
[Serializable]
public struct Single : IFormattable, IConvertible, IComparable, IComparable<float>, IEquatable<float> // TypeDefIndex: 30
{
	// Fields
	public const float Epsilon = 1E-45;
	public const float MaxValue = 3.4028235E+38;
	public const float MinValue = -3.4028235E+38;
	public const float NaN = NaN;
	public const float PositiveInfinity = ∞;
	public const float NegativeInfinity = -∞;
	private const double MaxValueEpsilon = 3.6147112457961776E+29;
	internal float m_value; // 0x0

	// Methods

	// RVA: 0xBB7390 Offset: 0xBB7390 VA: 0xBB7390 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBB7398 Offset: 0xBB7398 VA: 0xBB7398 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBB73A0 Offset: 0xBB73A0 VA: 0xBB73A0 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBB73A8 Offset: 0xBB73A8 VA: 0xBB73A8 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBB73B0 Offset: 0xBB73B0 VA: 0xBB73B0 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBB73B8 Offset: 0xBB73B8 VA: 0xBB73B8 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBB73C0 Offset: 0xBB73C0 VA: 0xBB73C0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBB73C8 Offset: 0xBB73C8 VA: 0xBB73C8 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBB73D0 Offset: 0xBB73D0 VA: 0xBB73D0 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBB73D8 Offset: 0xBB73D8 VA: 0xBB73D8 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBB73E0 Offset: 0xBB73E0 VA: 0xBB73E0 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBB73E8 Offset: 0xBB73E8 VA: 0xBB73E8 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBB73F0 Offset: 0xBB73F0 VA: 0xBB73F0 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBB73F8 Offset: 0xBB73F8 VA: 0xBB73F8 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBB7400 Offset: 0xBB7400 VA: 0xBB7400 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBB7408 Offset: 0xBB7408 VA: 0xBB7408 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBB7410 Offset: 0xBB7410 VA: 0xBB7410 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBB7418 Offset: 0xBB7418 VA: 0xBB7418 Slot: 22
	public int CompareTo(float value) { }

	// RVA: 0xBB7420 Offset: 0xBB7420 VA: 0xBB7420 Slot: 23
	public bool Equals(float obj) { }

	// RVA: 0xBB7440 Offset: 0xBB7440 VA: 0xBB7440 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEFF28C Offset: 0xEFF28C VA: 0xEFF28C
	public static bool IsInfinity(float f) { }

	[ReliabilityContractAttribute] // RVA: 0xC37C24 Offset: 0xC37C24 VA: 0xC37C24
	// RVA: 0xEFF0E0 Offset: 0xEFF0E0 VA: 0xEFF0E0
	public static bool IsNaN(float f) { }

	// RVA: 0xEFF0A4 Offset: 0xEFF0A4 VA: 0xEFF0A4
	public static bool IsNegativeInfinity(float f) { }

	// RVA: 0xEFF068 Offset: 0xEFF068 VA: 0xEFF068
	public static bool IsPositiveInfinity(float f) { }

	// RVA: 0xEFF2B4 Offset: 0xEFF2B4 VA: 0xEFF2B4
	public static float Parse(string s) { }

	// RVA: 0xEFF37C Offset: 0xEFF37C VA: 0xEFF37C
	public static float Parse(string s, IFormatProvider provider) { }

	// RVA: 0xEFF450 Offset: 0xEFF450 VA: 0xEFF450
	public static float Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0xEFF528 Offset: 0xEFF528 VA: 0xEFF528
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result) { }

	// RVA: 0xEFF5B8 Offset: 0xEFF5B8 VA: 0xEFF5B8
	public static bool TryParse(string s, out float result) { }

	// RVA: 0xBB7448 Offset: 0xBB7448 VA: 0xBB7448 Slot: 3
	public override string ToString() { }

	// RVA: 0xBB7450 Offset: 0xBB7450 VA: 0xBB7450 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBB7458 Offset: 0xBB7458 VA: 0xBB7458
	public string ToString(string format) { }

	// RVA: 0xBB7464 Offset: 0xBB7464 VA: 0xBB7464 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xBB746C Offset: 0xBB746C VA: 0xBB746C Slot: 24
	public TypeCode GetTypeCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F388 Offset: 0xC2F388 VA: 0xC2F388
[Serializable]
public struct Double : IFormattable, IConvertible, IComparable, IComparable<double>, IEquatable<double> // TypeDefIndex: 31
{
	// Fields
	public const double Epsilon = 5E-324;
	public const double MaxValue = 1.7976931348623157E+308;
	public const double MinValue = -1.7976931348623157E+308;
	public const double NaN = NaN;
	public const double NegativeInfinity = -∞;
	public const double PositiveInfinity = ∞;
	private const int State_AllowSign = 1;
	private const int State_Digits = 2;
	private const int State_Decimal = 3;
	private const int State_ExponentSign = 4;
	private const int State_Exponent = 5;
	private const int State_ConsumeWhiteSpace = 6;
	private const int State_Exit = 7;
	internal double m_value; // 0x0

	// Methods

	// RVA: 0xBBBBE4 Offset: 0xBBBBE4 VA: 0xBBBBE4 Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBBBEC Offset: 0xBBBBEC VA: 0xBBBBEC Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBBBF4 Offset: 0xBBBBF4 VA: 0xBBBBF4 Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBBBFC Offset: 0xBBBBFC VA: 0xBBBBFC Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBBC08 Offset: 0xBBBC08 VA: 0xBBBC08 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBBC14 Offset: 0xBBBC14 VA: 0xBBBC14 Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBBC1C Offset: 0xBBBC1C VA: 0xBBBC1C Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBBC24 Offset: 0xBBBC24 VA: 0xBBBC24 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBBC2C Offset: 0xBBBC2C VA: 0xBBBC2C Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBBC34 Offset: 0xBBBC34 VA: 0xBBBC34 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBBC3C Offset: 0xBBBC3C VA: 0xBBBC3C Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBBC44 Offset: 0xBBBC44 VA: 0xBBBC44 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBBC4C Offset: 0xBBBC4C VA: 0xBBBC4C Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBBC54 Offset: 0xBBBC54 VA: 0xBBBC54 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBBC5C Offset: 0xBBBC5C VA: 0xBBBC5C Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBBBC64 Offset: 0xBBBC64 VA: 0xBBBC64 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBBBC6C Offset: 0xBBBC6C VA: 0xBBBC6C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBBC74 Offset: 0xBBBC74 VA: 0xBBBC74 Slot: 22
	public int CompareTo(double value) { }

	// RVA: 0xBBBC7C Offset: 0xBBBC7C VA: 0xBBBC7C Slot: 23
	public bool Equals(double obj) { }

	// RVA: 0xBBBC9C Offset: 0xBBBC9C VA: 0xBBBC9C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x117881C Offset: 0x117881C VA: 0x117881C
	public static bool IsInfinity(double d) { }

	[ReliabilityContractAttribute] // RVA: 0xC37C3C Offset: 0xC37C3C VA: 0xC37C3C
	// RVA: 0x1170F0C Offset: 0x1170F0C VA: 0x1170F0C
	public static bool IsNaN(double d) { }

	// RVA: 0x1170F18 Offset: 0x1170F18 VA: 0x1170F18
	public static bool IsNegativeInfinity(double d) { }

	// RVA: 0x1170F54 Offset: 0x1170F54 VA: 0x1170F54
	public static bool IsPositiveInfinity(double d) { }

	// RVA: 0x1178844 Offset: 0x1178844 VA: 0x1178844
	public static double Parse(string s) { }

	// RVA: 0x11788EC Offset: 0x11788EC VA: 0x11788EC
	public static double Parse(string s, IFormatProvider provider) { }

	// RVA: 0x1178850 Offset: 0x1178850 VA: 0x1178850
	public static double Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x11788FC Offset: 0x11788FC VA: 0x11788FC
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc) { }

	// RVA: 0x1179864 Offset: 0x1179864 VA: 0x1179864
	private static bool TryParseStringConstant(string format, string s, int start, int end) { }

	// RVA: 0x1179968 Offset: 0x1179968 VA: 0x1179968
	private static bool ParseImpl(byte* byte_ptr, out double value) { }

	// RVA: 0x117996C Offset: 0x117996C VA: 0x117996C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out double result) { }

	// RVA: 0x11799B8 Offset: 0x11799B8 VA: 0x11799B8
	public static bool TryParse(string s, out double result) { }

	// RVA: 0xBBBCA8 Offset: 0xBBBCA8 VA: 0xBBBCA8 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBBCB0 Offset: 0xBBBCB0 VA: 0xBBBCB0 Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0xBBBCB8 Offset: 0xBBBCB8 VA: 0xBBBCB8
	public string ToString(string format) { }

	// RVA: 0xBBBCC4 Offset: 0xBBBCC4 VA: 0xBBBCC4 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F39C Offset: 0xC2F39C VA: 0xC2F39C
[Serializable]
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable<Decimal>, IEquatable<Decimal> // TypeDefIndex: 32
{
	// Fields
	[DecimalConstantAttribute] // RVA: 0xC37450 Offset: 0xC37450 VA: 0xC37450
	public static readonly Decimal MinValue; // 0x0
	[DecimalConstantAttribute] // RVA: 0xC37474 Offset: 0xC37474 VA: 0xC37474
	public static readonly Decimal MaxValue; // 0x10
	[DecimalConstantAttribute] // RVA: 0xC37498 Offset: 0xC37498 VA: 0xC37498
	public static readonly Decimal MinusOne; // 0x20
	[DecimalConstantAttribute] // RVA: 0xC374BC Offset: 0xC374BC VA: 0xC374BC
	public static readonly Decimal One; // 0x30
	[DecimalConstantAttribute] // RVA: 0xC374E0 Offset: 0xC374E0 VA: 0xC374E0
	public static readonly Decimal Zero; // 0x40
	private const int DECIMAL_DIVIDE_BY_ZERO = 5;
	private const uint MAX_SCALE = 28;
	private const int iMAX_SCALE = 28;
	private const uint SIGN_FLAG = 2147483648;
	private const uint SCALE_MASK = 16711680;
	private const int SCALE_SHIFT = 16;
	private const uint RESERVED_SS32_BITS = 2130771967;
	private static readonly Decimal MaxValueDiv10; // 0x50
	private uint flags; // 0x0
	private uint hi; // 0x4
	private uint lo; // 0x8
	private uint mid; // 0xC

	// Methods

	// RVA: 0xBBBA4C Offset: 0xBBBA4C VA: 0xBBBA4C
	public void .ctor(int lo, int mid, int hi, bool isNegative, byte scale) { }

	// RVA: 0xBBBA58 Offset: 0xBBBA58 VA: 0xBBBA58
	public void .ctor(int value) { }

	[CLSCompliantAttribute] // RVA: 0xC37C54 Offset: 0xC37C54 VA: 0xC37C54
	// RVA: 0xBBBA80 Offset: 0xBBBA80 VA: 0xBBBA80
	public void .ctor(uint value) { }

	// RVA: 0xBBBA8C Offset: 0xBBBA8C VA: 0xBBBA8C
	public void .ctor(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC37C68 Offset: 0xC37C68 VA: 0xC37C68
	// RVA: 0xBBBAB4 Offset: 0xBBBAB4 VA: 0xBBBAB4
	public void .ctor(ulong value) { }

	// RVA: 0xBBBAC4 Offset: 0xBBBAC4 VA: 0xBBBAC4
	public void .ctor(float value) { }

	// RVA: 0xBBBACC Offset: 0xBBBACC VA: 0xBBBACC
	public void .ctor(double value) { }

	// RVA: 0xBBBAD4 Offset: 0xBBBAD4 VA: 0xBBBAD4
	public void .ctor(int[] bits) { }

	// RVA: 0x11711C4 Offset: 0x11711C4 VA: 0x11711C4
	private static void .cctor() { }

	// RVA: 0xBBBADC Offset: 0xBBBADC VA: 0xBBBADC Slot: 17
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBBAE4 Offset: 0xBBBAE4 VA: 0xBBBAE4 Slot: 5
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBBAEC Offset: 0xBBBAEC VA: 0xBBBAEC Slot: 6
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBBAF4 Offset: 0xBBBAF4 VA: 0xBBBAF4 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBBB00 Offset: 0xBBBB00 VA: 0xBBBB00 Slot: 8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBBB0C Offset: 0xBBBB0C VA: 0xBBBB0C Slot: 9
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBBB18 Offset: 0xBBBB18 VA: 0xBBBB18 Slot: 10
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBBB20 Offset: 0xBBBB20 VA: 0xBBBB20 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBBB28 Offset: 0xBBBB28 VA: 0xBBBB28 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBBB30 Offset: 0xBBBB30 VA: 0xBBBB30 Slot: 13
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBBB38 Offset: 0xBBBB38 VA: 0xBBBB38 Slot: 14
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBBB40 Offset: 0xBBBB40 VA: 0xBBBB40 Slot: 15
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBBB48 Offset: 0xBBBB48 VA: 0xBBBB48 Slot: 18
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBBB50 Offset: 0xBBBB50 VA: 0xBBBB50 Slot: 19
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBBB58 Offset: 0xBBBB58 VA: 0xBBBB58 Slot: 20
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0x117192C Offset: 0x117192C VA: 0x117192C
	public static int[] GetBits(Decimal d) { }

	// RVA: 0x1171A20 Offset: 0x1171A20 VA: 0x1171A20
	public static Decimal Add(Decimal d1, Decimal d2) { }

	// RVA: 0x1171AFC Offset: 0x1171AFC VA: 0x1171AFC
	public static Decimal Subtract(Decimal d1, Decimal d2) { }

	// RVA: 0xBBBB60 Offset: 0xBBBB60 VA: 0xBBBB60 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1171C54 Offset: 0x1171C54 VA: 0x1171C54
	private static ulong u64(Decimal value) { }

	// RVA: 0x1171D20 Offset: 0x1171D20 VA: 0x1171D20
	private static long s64(Decimal value) { }

	// RVA: 0x1171DE8 Offset: 0x1171DE8 VA: 0x1171DE8
	public static bool Equals(Decimal d1, Decimal d2) { }

	// RVA: 0xBBBB78 Offset: 0xBBBB78 VA: 0xBBBB78 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0xBBBB80 Offset: 0xBBBB80 VA: 0xBBBB80
	private bool IsZero() { }

	// RVA: 0x1171FD4 Offset: 0x1171FD4 VA: 0x1171FD4
	public static Decimal Floor(Decimal d) { }

	// RVA: 0x117204C Offset: 0x117204C VA: 0x117204C
	public static Decimal Truncate(Decimal d) { }

	// RVA: 0x11720C4 Offset: 0x11720C4 VA: 0x11720C4
	public static Decimal Multiply(Decimal d1, Decimal d2) { }

	// RVA: 0x11721DC Offset: 0x11721DC VA: 0x11721DC
	public static Decimal Divide(Decimal d1, Decimal d2) { }

	[ReliabilityContractAttribute] // RVA: 0xC37C7C Offset: 0xC37C7C VA: 0xC37C7C
	// RVA: 0x1171E80 Offset: 0x1171E80 VA: 0x1171E80
	public static int Compare(Decimal d1, Decimal d2) { }

	// RVA: 0xBBBBA8 Offset: 0xBBBBA8 VA: 0xBBBBA8 Slot: 21
	public int CompareTo(object value) { }

	// RVA: 0xBBBBB0 Offset: 0xBBBBB0 VA: 0xBBBBB0 Slot: 22
	public int CompareTo(Decimal value) { }

	// RVA: 0xBBBBB8 Offset: 0xBBBBB8 VA: 0xBBBBB8 Slot: 23
	public bool Equals(Decimal value) { }

	// RVA: 0x117259C Offset: 0x117259C VA: 0x117259C
	public static Decimal Parse(string s, IFormatProvider provider) { }

	// RVA: 0x1172614 Offset: 0x1172614 VA: 0x1172614
	private static void ThrowAtPos(int pos) { }

	// RVA: 0x1172724 Offset: 0x1172724 VA: 0x1172724
	private static void ThrowInvalidExp() { }

	// RVA: 0x11727A8 Offset: 0x11727A8 VA: 0x11727A8
	private static string stripStyles(string s, NumberStyles style, NumberFormatInfo nfi, out int decPos, out bool isNegative, out bool expFlag, out int exp, bool throwex) { }

	// RVA: 0x1170BE0 Offset: 0x1170BE0 VA: 0x1170BE0
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider) { }

	// RVA: 0x1173478 Offset: 0x1173478 VA: 0x1173478
	private static bool PerformParse(string s, NumberStyles style, IFormatProvider provider, out Decimal res, bool throwex) { }

	// RVA: 0x1173B84 Offset: 0x1173B84 VA: 0x1173B84
	public static double ToDouble(Decimal d) { }

	// RVA: 0x1173BFC Offset: 0x1173BFC VA: 0x1173BFC
	public static int ToInt32(Decimal d) { }

	// RVA: 0xBBBBC0 Offset: 0xBBBBC0 VA: 0xBBBBC0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }

	// RVA: 0xBBBBC8 Offset: 0xBBBBC8 VA: 0xBBBBC8 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBBBD0 Offset: 0xBBBBD0 VA: 0xBBBBD0
	public string ToString(string format) { }

	// RVA: 0xBBBBDC Offset: 0xBBBBDC VA: 0xBBBBDC Slot: 16
	public string ToString(IFormatProvider provider) { }

	// RVA: 0x1171D1C Offset: 0x1171D1C VA: 0x1171D1C
	private static int decimal2UInt64(ref Decimal val, out ulong result) { }

	// RVA: 0x1171DE4 Offset: 0x1171DE4 VA: 0x1171DE4
	private static int decimal2Int64(ref Decimal val, out long result) { }

	// RVA: 0x1171AF8 Offset: 0x1171AF8 VA: 0x1171AF8
	private static int decimalIncr(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x1173B7C Offset: 0x1173B7C VA: 0x1173B7C
	internal static int string2decimal(out Decimal val, string sDigits, uint decPos, int sign) { }

	// RVA: 0x1173B80 Offset: 0x1173B80 VA: 0x1173B80
	internal static int decimalSetExponent(ref Decimal val, int exp) { }

	// RVA: 0x117403C Offset: 0x117403C VA: 0x117403C
	private static double decimal2double(ref Decimal val) { }

	// RVA: 0x1171D18 Offset: 0x1171D18 VA: 0x1171D18
	private static void decimalFloorAndTrunc(ref Decimal val, int floorFlag) { }

	// RVA: 0x11721D8 Offset: 0x11721D8 VA: 0x11721D8
	private static int decimalMult(ref Decimal pd1, ref Decimal pd2) { }

	// RVA: 0x1172384 Offset: 0x1172384 VA: 0x1172384
	private static int decimalDiv(out Decimal pc, ref Decimal pa, ref Decimal pb) { }

	// RVA: 0x1172388 Offset: 0x1172388 VA: 0x1172388
	private static int decimalCompare(ref Decimal d1, ref Decimal d2) { }

	// RVA: 0x1174040 Offset: 0x1174040 VA: 0x1174040
	public static Decimal op_Addition(Decimal d1, Decimal d2) { }

	// RVA: 0x11740CC Offset: 0x11740CC VA: 0x11740CC
	public static Decimal op_Increment(Decimal d) { }

	// RVA: 0x1174148 Offset: 0x1174148 VA: 0x1174148
	public static Decimal op_Subtraction(Decimal d1, Decimal d2) { }

	// RVA: 0x11741D4 Offset: 0x11741D4 VA: 0x11741D4
	public static Decimal op_Multiply(Decimal d1, Decimal d2) { }

	// RVA: 0x1174260 Offset: 0x1174260 VA: 0x1174260
	public static Decimal op_Division(Decimal d1, Decimal d2) { }

	// RVA: 0x11742EC Offset: 0x11742EC VA: 0x11742EC
	public static byte op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC37C94 Offset: 0xC37C94 VA: 0xC37C94
	// RVA: 0x1174388 Offset: 0x1174388 VA: 0x1174388
	public static sbyte op_Explicit(Decimal value) { }

	// RVA: 0x1174424 Offset: 0x1174424 VA: 0x1174424
	public static short op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC37CA8 Offset: 0xC37CA8 VA: 0xC37CA8
	// RVA: 0x11744C0 Offset: 0x11744C0 VA: 0x11744C0
	public static ushort op_Explicit(Decimal value) { }

	// RVA: 0x1173E58 Offset: 0x1173E58 VA: 0x1173E58
	public static int op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC37CBC Offset: 0xC37CBC VA: 0xC37CBC
	// RVA: 0x117455C Offset: 0x117455C VA: 0x117455C
	public static uint op_Explicit(Decimal value) { }

	// RVA: 0x11745F8 Offset: 0x11745F8 VA: 0x11745F8
	public static long op_Explicit(Decimal value) { }

	[CLSCompliantAttribute] // RVA: 0xC37CD0 Offset: 0xC37CD0 VA: 0xC37CD0
	// RVA: 0x117466C Offset: 0x117466C VA: 0x117466C
	public static ulong op_Explicit(Decimal value) { }

	// RVA: 0x11746E0 Offset: 0x11746E0 VA: 0x11746E0
	public static Decimal op_Implicit(byte value) { }

	[CLSCompliantAttribute] // RVA: 0xC37CE4 Offset: 0xC37CE4 VA: 0xC37CE4
	// RVA: 0x11746EC Offset: 0x11746EC VA: 0x11746EC
	public static Decimal op_Implicit(sbyte value) { }

	// RVA: 0x1174704 Offset: 0x1174704 VA: 0x1174704
	public static Decimal op_Implicit(short value) { }

	[CLSCompliantAttribute] // RVA: 0xC37CF8 Offset: 0xC37CF8 VA: 0xC37CF8
	// RVA: 0x117471C Offset: 0x117471C VA: 0x117471C
	public static Decimal op_Implicit(ushort value) { }

	// RVA: 0x1174728 Offset: 0x1174728 VA: 0x1174728
	public static Decimal op_Implicit(int value) { }

	[CLSCompliantAttribute] // RVA: 0xC37D0C Offset: 0xC37D0C VA: 0xC37D0C
	// RVA: 0x1174738 Offset: 0x1174738 VA: 0x1174738
	public static Decimal op_Implicit(uint value) { }

	// RVA: 0x1174744 Offset: 0x1174744 VA: 0x1174744
	public static Decimal op_Implicit(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC37D20 Offset: 0xC37D20 VA: 0xC37D20
	// RVA: 0x1174758 Offset: 0x1174758 VA: 0x1174758
	public static Decimal op_Implicit(ulong value) { }

	// RVA: 0x1174768 Offset: 0x1174768 VA: 0x1174768
	public static Decimal op_Explicit(float value) { }

	// RVA: 0x1174790 Offset: 0x1174790 VA: 0x1174790
	public static Decimal op_Explicit(double value) { }

	// RVA: 0x11747B8 Offset: 0x11747B8 VA: 0x11747B8
	public static float op_Explicit(Decimal value) { }

	// RVA: 0x1174834 Offset: 0x1174834 VA: 0x1174834
	public static double op_Explicit(Decimal value) { }

	// RVA: 0x11748A4 Offset: 0x11748A4 VA: 0x11748A4
	public static bool op_Inequality(Decimal d1, Decimal d2) { }

	// RVA: 0x117493C Offset: 0x117493C VA: 0x117493C
	public static bool op_Equality(Decimal d1, Decimal d2) { }

	// RVA: 0x1173D2C Offset: 0x1173D2C VA: 0x1173D2C
	public static bool op_GreaterThan(Decimal d1, Decimal d2) { }

	// RVA: 0x11749C8 Offset: 0x11749C8 VA: 0x11749C8
	public static bool op_GreaterThanOrEqual(Decimal d1, Decimal d2) { }

	// RVA: 0x1173DC4 Offset: 0x1173DC4 VA: 0x1173DC4
	public static bool op_LessThan(Decimal d1, Decimal d2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F3B0 Offset: 0xC2F3B0 VA: 0xC2F3B0
[Serializable]
public struct Boolean : IConvertible, IComparable, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 33
{
	// Fields
	public static readonly string FalseString; // 0x0
	public static readonly string TrueString; // 0x8
	internal bool m_value; // 0x0

	// Methods

	// RVA: 0x10D4B8C Offset: 0x10D4B8C VA: 0x10D4B8C
	private static void .cctor() { }

	// RVA: 0xBBACA0 Offset: 0xBBACA0 VA: 0xBBACA0 Slot: 16
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }

	// RVA: 0xBBACA8 Offset: 0xBBACA8 VA: 0xBBACA8 Slot: 4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }

	// RVA: 0xBBACB8 Offset: 0xBBACB8 VA: 0xBBACB8 Slot: 5
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }

	// RVA: 0xBBACC0 Offset: 0xBBACC0 VA: 0xBBACC0 Slot: 6
	private char System.IConvertible.ToChar(IFormatProvider provider) { }

	// RVA: 0xBBACCC Offset: 0xBBACCC VA: 0xBBACCC Slot: 7
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }

	// RVA: 0xBBACD8 Offset: 0xBBACD8 VA: 0xBBACD8 Slot: 8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }

	// RVA: 0xBBACE0 Offset: 0xBBACE0 VA: 0xBBACE0 Slot: 9
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }

	// RVA: 0xBBACE8 Offset: 0xBBACE8 VA: 0xBBACE8 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }

	// RVA: 0xBBACF0 Offset: 0xBBACF0 VA: 0xBBACF0 Slot: 11
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }

	// RVA: 0xBBACF8 Offset: 0xBBACF8 VA: 0xBBACF8 Slot: 12
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }

	// RVA: 0xBBAD00 Offset: 0xBBAD00 VA: 0xBBAD00 Slot: 13
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }

	// RVA: 0xBBAD08 Offset: 0xBBAD08 VA: 0xBBAD08 Slot: 14
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }

	// RVA: 0xBBAD10 Offset: 0xBBAD10 VA: 0xBBAD10 Slot: 17
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }

	// RVA: 0xBBAD18 Offset: 0xBBAD18 VA: 0xBBAD18 Slot: 18
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }

	// RVA: 0xBBAD20 Offset: 0xBBAD20 VA: 0xBBAD20 Slot: 19
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }

	// RVA: 0xBBAD28 Offset: 0xBBAD28 VA: 0xBBAD28 Slot: 20
	public int CompareTo(object obj) { }

	// RVA: 0xBBAD30 Offset: 0xBBAD30 VA: 0xBBAD30 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBAD38 Offset: 0xBBAD38 VA: 0xBBAD38 Slot: 21
	public int CompareTo(bool value) { }

	// RVA: 0xBBAD58 Offset: 0xBBAD58 VA: 0xBBAD58 Slot: 22
	public bool Equals(bool obj) { }

	// RVA: 0xBBAD6C Offset: 0xBBAD6C VA: 0xBBAD6C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10D5474 Offset: 0x10D5474 VA: 0x10D5474
	public static bool Parse(string value) { }

	// RVA: 0x10D5698 Offset: 0x10D5698 VA: 0x10D5698
	public static bool TryParse(string value, out bool result) { }

	// RVA: 0xBBAD7C Offset: 0xBBAD7C VA: 0xBBAD7C Slot: 3
	public override string ToString() { }

	// RVA: 0xBBAD84 Offset: 0xBBAD84 VA: 0xBBAD84 Slot: 23
	public TypeCode GetTypeCode() { }

	// RVA: 0xBBAD8C Offset: 0xBBAD8C VA: 0xBBAD8C Slot: 15
	public string ToString(IFormatProvider provider) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F3C4 Offset: 0xC2F3C4 VA: 0xC2F3C4
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 34
{
	// Fields
	private void* m_value; // 0x0
	public static readonly IntPtr Zero; // 0x0

	// Properties
	public static int Size { get; }

	// Methods

	[ReliabilityContractAttribute] // RVA: 0xC37D34 Offset: 0xC37D34 VA: 0xC37D34
	// RVA: 0xBBA884 Offset: 0xBBA884 VA: 0xBBA884
	public void .ctor(int value) { }

	[ReliabilityContractAttribute] // RVA: 0xC37D4C Offset: 0xC37D4C VA: 0xC37D4C
	// RVA: 0xBBA890 Offset: 0xBBA890 VA: 0xBBA890
	public void .ctor(long value) { }

	[CLSCompliantAttribute] // RVA: 0xC37D64 Offset: 0xC37D64 VA: 0xC37D64
	[ReliabilityContractAttribute] // RVA: 0xC37D64 Offset: 0xC37D64 VA: 0xC37D64
	// RVA: 0xBBA898 Offset: 0xBBA898 VA: 0xBBA898
	public void .ctor(void* value) { }

	// RVA: 0xBBA8A0 Offset: 0xBBA8A0 VA: 0xBBA8A0
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xBBA8A8 Offset: 0xBBA8A8 VA: 0xBBA8A8 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0xC37DA8 Offset: 0xC37DA8 VA: 0xC37DA8
	// RVA: 0x106D020 Offset: 0x106D020 VA: 0x106D020
	public static int get_Size() { }

	// RVA: 0xBBA8B0 Offset: 0xBBA8B0 VA: 0xBBA8B0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBA8B8 Offset: 0xBBA8B8 VA: 0xBBA8B8 Slot: 2
	public override int GetHashCode() { }

	[ReliabilityContractAttribute] // RVA: 0xC37DC0 Offset: 0xC37DC0 VA: 0xC37DC0
	// RVA: 0xBBA8C0 Offset: 0xBBA8C0 VA: 0xBBA8C0
	public int ToInt32() { }

	[ReliabilityContractAttribute] // RVA: 0xC37DD8 Offset: 0xC37DD8 VA: 0xC37DD8
	// RVA: 0xBBA8C8 Offset: 0xBBA8C8 VA: 0xBBA8C8
	public long ToInt64() { }

	[ReliabilityContractAttribute] // RVA: 0xC37DF0 Offset: 0xC37DF0 VA: 0xC37DF0
	[CLSCompliantAttribute] // RVA: 0xC37DF0 Offset: 0xC37DF0 VA: 0xC37DF0
	// RVA: 0xBBA8D0 Offset: 0xBBA8D0 VA: 0xBBA8D0
	public void* ToPointer() { }

	// RVA: 0xBBA8D8 Offset: 0xBBA8D8 VA: 0xBBA8D8 Slot: 3
	public override string ToString() { }

	// RVA: 0xBBA908 Offset: 0xBBA908 VA: 0xBBA908
	public string ToString(string format) { }

	[ReliabilityContractAttribute] // RVA: 0xC37E34 Offset: 0xC37E34 VA: 0xC37E34
	// RVA: 0x106D124 Offset: 0x106D124 VA: 0x106D124
	public static bool op_Equality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0xC37E4C Offset: 0xC37E4C VA: 0xC37E4C
	// RVA: 0x106D130 Offset: 0x106D130 VA: 0x106D130
	public static bool op_Inequality(IntPtr value1, IntPtr value2) { }

	[ReliabilityContractAttribute] // RVA: 0xC37E64 Offset: 0xC37E64 VA: 0xC37E64
	// RVA: 0x106D13C Offset: 0x106D13C VA: 0x106D13C
	public static IntPtr op_Explicit(int value) { }

	[ReliabilityContractAttribute] // RVA: 0xC37E7C Offset: 0xC37E7C VA: 0xC37E7C
	// RVA: 0x106D144 Offset: 0x106D144 VA: 0x106D144
	public static IntPtr op_Explicit(long value) { }

	[ReliabilityContractAttribute] // RVA: 0xC37E94 Offset: 0xC37E94 VA: 0xC37E94
	[CLSCompliantAttribute] // RVA: 0xC37E94 Offset: 0xC37E94 VA: 0xC37E94
	// RVA: 0x106D148 Offset: 0x106D148 VA: 0x106D148
	public static IntPtr op_Explicit(void* value) { }

	// RVA: 0x106D14C Offset: 0x106D14C VA: 0x106D14C
	public static int op_Explicit(IntPtr value) { }

	// RVA: 0x106D150 Offset: 0x106D150 VA: 0x106D150
	public static long op_Explicit(IntPtr value) { }

	[CLSCompliantAttribute] // RVA: 0xC37ED8 Offset: 0xC37ED8 VA: 0xC37ED8
	// RVA: 0x106D154 Offset: 0x106D154 VA: 0x106D154
	public static void* op_Explicit(IntPtr value) { }
}

// Namespace: System.Runtime.Serialization
[ComVisibleAttribute] // RVA: 0xC2F3D8 Offset: 0xC2F3D8 VA: 0xC2F3D8
public interface ISerializable // TypeDefIndex: 35
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System
[CLSCompliantAttribute] // RVA: 0xC2F3EC Offset: 0xC2F3EC VA: 0xC2F3EC
[ComVisibleAttribute] // RVA: 0xC2F3EC Offset: 0xC2F3EC VA: 0xC2F3EC
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 36
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private void* _pointer; // 0x0

	// Methods

	// RVA: 0xBC0B6C Offset: 0xBC0B6C VA: 0xBC0B6C
	public void .ctor(uint value) { }

	// RVA: 0x13035C4 Offset: 0x13035C4 VA: 0x13035C4
	private static void .cctor() { }

	// RVA: 0xBC0B78 Offset: 0xBC0B78 VA: 0xBC0B78 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xBC0B80 Offset: 0xBC0B80 VA: 0xBC0B80 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBC0B88 Offset: 0xBC0B88 VA: 0xBC0B88 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC0B90 Offset: 0xBC0B90 VA: 0xBC0B90 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F42C Offset: 0xC2F42C VA: 0xC2F42C
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 37
{
	// Fields
	private MulticastDelegate prev; // 0x58
	private MulticastDelegate kpm_next; // 0x60

	// Methods

	// RVA: 0x1073AD8 Offset: 0x1073AD8 VA: 0x1073AD8 Slot: 7
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1073AE0 Offset: 0x1073AE0 VA: 0x1073AE0 Slot: 0
	public sealed override bool Equals(object obj) { }

	// RVA: 0x1073BC4 Offset: 0x1073BC4 VA: 0x1073BC4 Slot: 2
	public sealed override int GetHashCode() { }

	// RVA: 0x1073BCC Offset: 0x1073BCC VA: 0x1073BCC Slot: 8
	public sealed override Delegate[] GetInvocationList() { }

	// RVA: 0x1073FDC Offset: 0x1073FDC VA: 0x1073FDC Slot: 9
	protected sealed override Delegate CombineImpl(Delegate follow) { }

	// RVA: 0x1074498 Offset: 0x1074498 VA: 0x1074498
	private bool BaseEquals(MulticastDelegate value) { }

	// RVA: 0x10744A0 Offset: 0x10744A0 VA: 0x10744A0
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail) { }

	// RVA: 0x10745F0 Offset: 0x10745F0 VA: 0x10745F0 Slot: 10
	protected sealed override Delegate RemoveImpl(Delegate value) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F440 Offset: 0xC2F440 VA: 0xC2F440
[ClassInterfaceAttribute] // RVA: 0xC2F440 Offset: 0xC2F440 VA: 0xC2F440
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 38
{
	// Fields
	private IntPtr method_ptr; // 0x10
	private IntPtr invoke_impl; // 0x18
	private object m_target; // 0x20
	private IntPtr method; // 0x28
	private IntPtr delegate_trampoline; // 0x30
	private IntPtr method_code; // 0x38
	private MethodInfo method_info; // 0x40
	private MethodInfo original_method_info; // 0x48
	private DelegateData data; // 0x50

	// Properties
	public MethodInfo Method { get; }
	public object Target { get; }

	// Methods

	// RVA: 0x1174A60 Offset: 0x1174A60 VA: 0x1174A60
	public MethodInfo get_Method() { }

	// RVA: 0x1174B70 Offset: 0x1174B70 VA: 0x1174B70
	public object get_Target() { }

	// RVA: 0x1174B78 Offset: 0x1174B78 VA: 0x1174B78
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure) { }

	// RVA: 0x1174B80 Offset: 0x1174B80 VA: 0x1174B80
	internal void SetMulticastInvoke() { }

	// RVA: 0x1174B84 Offset: 0x1174B84 VA: 0x1174B84
	private static bool arg_type_match(Type delArgType, Type argType) { }

	// RVA: 0x1174BFC Offset: 0x1174BFC VA: 0x1174BFC
	private static bool return_type_match(Type delReturnType, Type returnType) { }

	// RVA: 0x1174C74 Offset: 0x1174C74 VA: 0x1174C74
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x11754A4 Offset: 0x11754A4 VA: 0x11754A4
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method) { }

	// RVA: 0x11754AC Offset: 0x11754AC VA: 0x11754AC
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure) { }

	// RVA: 0x11754C0 Offset: 0x11754C0 VA: 0x11754C0
	public static Delegate CreateDelegate(Type type, MethodInfo method) { }

	// RVA: 0x11754D4 Offset: 0x11754D4 VA: 0x11754D4
	public static Delegate CreateDelegate(Type type, object target, string method) { }

	// RVA: 0x11754EC Offset: 0x11754EC VA: 0x11754EC
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x11758A8 Offset: 0x11758A8 VA: 0x11758A8
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x117598C Offset: 0x117598C VA: 0x117598C
	public static Delegate CreateDelegate(Type type, Type target, string method) { }

	// RVA: 0x1175998 Offset: 0x1175998 VA: 0x1175998
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) { }

	// RVA: 0x11754E0 Offset: 0x11754E0 VA: 0x11754E0
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase) { }

	// RVA: 0x1175A88 Offset: 0x1175A88 VA: 0x1175A88 Slot: 6
	public virtual object Clone() { }

	// RVA: 0x1175A90 Offset: 0x1175A90 VA: 0x1175A90 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1175BBC Offset: 0x1175BBC VA: 0x1175BBC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1175C0C Offset: 0x1175C0C VA: 0x1175C0C Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1175E38 Offset: 0x1175E38 VA: 0x1175E38 Slot: 8
	public virtual Delegate[] GetInvocationList() { }

	// RVA: 0x1175EE8 Offset: 0x1175EE8 VA: 0x1175EE8
	public static Delegate Combine(Delegate a, Delegate b) { }

	[ComVisibleAttribute] // RVA: 0xC37EEC Offset: 0xC37EEC VA: 0xC37EEC
	// RVA: 0x1175FE0 Offset: 0x1175FE0 VA: 0x1175FE0
	public static Delegate Combine(Delegate[] delegates) { }

	// RVA: 0x1176068 Offset: 0x1176068 VA: 0x1176068 Slot: 9
	protected virtual Delegate CombineImpl(Delegate d) { }

	// RVA: 0x1176100 Offset: 0x1176100 VA: 0x1176100
	public static Delegate Remove(Delegate source, Delegate value) { }

	// RVA: 0x1176114 Offset: 0x1176114 VA: 0x1176114 Slot: 10
	protected virtual Delegate RemoveImpl(Delegate d) { }

	// RVA: 0x1176144 Offset: 0x1176144 VA: 0x1176144
	public static bool op_Equality(Delegate d1, Delegate d2) { }

	// RVA: 0x117616C Offset: 0x117616C VA: 0x117616C
	public static bool op_Inequality(Delegate d1, Delegate d2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC2F480 Offset: 0xC2F480 VA: 0xC2F480
[Serializable]
public abstract class Enum : ValueType, IFormattable, IConvertible, IComparable // TypeDefIndex: 39
{
	// Fields
	private static char[] split_char; // 0x0

	// Properties
	private object Value { get; }

	// Methods

