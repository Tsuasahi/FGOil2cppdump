
	// RVA: 0x1CF0338 Offset: 0x1CF0338 VA: 0x1CF0338
	protected void .ctor() { }

	// RVA: 0x1CF0340 Offset: 0x1CF0340 VA: 0x1CF0340
	public static bool IsValid(byte group) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HandshakeType // TypeDefIndex: 4927
{
	// Fields
	public const byte hello_request = 0;
	public const byte client_hello = 1;
	public const byte server_hello = 2;
	public const byte certificate = 11;
	public const byte server_key_exchange = 12;
	public const byte certificate_request = 13;
	public const byte server_hello_done = 14;
	public const byte certificate_verify = 15;
	public const byte client_key_exchange = 16;
	public const byte finished = 20;
	public const byte certificate_url = 21;
	public const byte certificate_status = 22;
	public const byte hello_verify_request = 3;
	public const byte supplemental_data = 23;
	public const byte session_ticket = 4;

	// Methods

	// RVA: 0x1CF0350 Offset: 0x1CF0350 VA: 0x1CF0350
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HashAlgorithm // TypeDefIndex: 4928
{
	// Fields
	public const byte none = 0;
	public const byte md5 = 1;
	public const byte sha1 = 2;
	public const byte sha224 = 3;
	public const byte sha256 = 4;
	public const byte sha384 = 5;
	public const byte sha512 = 6;

	// Methods

	// RVA: 0x1CF0358 Offset: 0x1CF0358 VA: 0x1CF0358
	protected void .ctor() { }

	// RVA: 0x1CF0360 Offset: 0x1CF0360 VA: 0x1CF0360
	public static string GetName(byte hashAlgorithm) { }

	// RVA: 0x1CEE740 Offset: 0x1CEE740 VA: 0x1CEE740
	public static string GetText(byte hashAlgorithm) { }

	// RVA: 0x1CF03CC Offset: 0x1CF03CC VA: 0x1CF03CC
	public static bool IsPrivate(byte hashAlgorithm) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class HeartbeatExtension // TypeDefIndex: 4929
{
	// Fields
	protected readonly byte mMode; // 0x10

	// Properties
	public virtual byte Mode { get; }

	// Methods

	// RVA: 0x1CF03DC Offset: 0x1CF03DC VA: 0x1CF03DC
	public void .ctor(byte mode) { }

	// RVA: 0x1CF04AC Offset: 0x1CF04AC VA: 0x1CF04AC Slot: 4
	public virtual byte get_Mode() { }

	// RVA: 0x1CF04B4 Offset: 0x1CF04B4 VA: 0x1CF04B4 Slot: 5
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CF0530 Offset: 0x1CF0530 VA: 0x1CF0530
	public static HeartbeatExtension Parse(Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HeartbeatMessageType // TypeDefIndex: 4930
{
	// Fields
	public const byte heartbeat_request = 1;
	public const byte heartbeat_response = 2;

	// Methods

	// RVA: 0x1CF0608 Offset: 0x1CF0608 VA: 0x1CF0608
	protected void .ctor() { }

	// RVA: 0x1CF0610 Offset: 0x1CF0610 VA: 0x1CF0610
	public static bool IsValid(byte heartbeatMessageType) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class HeartbeatMode // TypeDefIndex: 4931
{
	// Fields
	public const byte peer_allowed_to_send = 1;
	public const byte peer_not_allowed_to_send = 2;

	// Methods

	// RVA: 0x1CF0624 Offset: 0x1CF0624 VA: 0x1CF0624
	protected void .ctor() { }

	// RVA: 0x1CF0498 Offset: 0x1CF0498 VA: 0x1CF0498
	public static bool IsValid(byte heartbeatMode) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface ICertificateVerifyer // TypeDefIndex: 4932
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsValid(Uri targetUri, X509CertificateStructure[] certs);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class KeyExchangeAlgorithm // TypeDefIndex: 4933
{
	// Fields
	public const int NULL = 0;
	public const int RSA = 1;
	public const int RSA_EXPORT = 2;
	public const int DHE_DSS = 3;
	public const int DHE_DSS_EXPORT = 4;
	public const int DHE_RSA = 5;
	public const int DHE_RSA_EXPORT = 6;
	public const int DH_DSS = 7;
	public const int DH_DSS_EXPORT = 8;
	public const int DH_RSA = 9;
	public const int DH_RSA_EXPORT = 10;
	public const int DH_anon = 11;
	public const int DH_anon_EXPORT = 12;
	public const int PSK = 13;
	public const int DHE_PSK = 14;
	public const int RSA_PSK = 15;
	public const int ECDH_ECDSA = 16;
	public const int ECDHE_ECDSA = 17;
	public const int ECDH_RSA = 18;
	public const int ECDHE_RSA = 19;
	public const int ECDH_anon = 20;
	public const int SRP = 21;
	public const int SRP_DSS = 22;
	public const int SRP_RSA = 23;
	public const int ECDHE_PSK = 24;

	// Methods

	// RVA: 0x1CF062C Offset: 0x1CF062C VA: 0x1CF062C
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public interface IClientCredentialsProvider // TypeDefIndex: 4934
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TlsCredentials GetClientCredentials(TlsContext context, CertificateRequest certificateRequest);
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class LegacyTlsAuthentication : TlsAuthentication // TypeDefIndex: 4935
{
	// Fields
	protected ICertificateVerifyer verifyer; // 0x10
	protected IClientCredentialsProvider credProvider; // 0x18
	protected Uri TargetUri; // 0x20

	// Methods

	// RVA: 0x1CF0634 Offset: 0x1CF0634 VA: 0x1CF0634
	public void .ctor(Uri targetUri, ICertificateVerifyer verifyer, IClientCredentialsProvider prov) { }

	// RVA: 0x1CF0674 Offset: 0x1CF0674 VA: 0x1CF0674 Slot: 6
	public virtual void NotifyServerCertificate(Certificate serverCertificate) { }

	// RVA: 0x1CF07A0 Offset: 0x1CF07A0 VA: 0x1CF07A0 Slot: 7
	public virtual TlsCredentials GetClientCredentials(TlsContext context, CertificateRequest certificateRequest) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public sealed class LegacyTlsClient : DefaultTlsClient // TypeDefIndex: 4936
{
	// Fields
	private readonly Uri TargetUri; // 0x50
	private readonly ICertificateVerifyer verifyer; // 0x58
	private readonly IClientCredentialsProvider credProvider; // 0x60

	// Methods

	// RVA: 0x1CF0878 Offset: 0x1CF0878 VA: 0x1CF0878
	public void .ctor(Uri targetUri, ICertificateVerifyer verifyer, IClientCredentialsProvider prov, List<string> hostNames) { }

	// RVA: 0x1CF08D0 Offset: 0x1CF08D0 VA: 0x1CF08D0 Slot: 56
	public override TlsAuthentication GetAuthentication() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class MacAlgorithm // TypeDefIndex: 4937
{
	// Fields
	public const int cls_null = 0;
	public const int md5 = 1;
	public const int sha = 2;
	public const int hmac_md5 = 1;
	public const int hmac_sha1 = 2;
	public const int hmac_sha256 = 3;
	public const int hmac_sha384 = 4;
	public const int hmac_sha512 = 5;

	// Methods

	// RVA: 0x1CF0950 Offset: 0x1CF0950 VA: 0x1CF0950
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class MaxFragmentLength // TypeDefIndex: 4938
{
	// Fields
	public const byte pow2_9 = 1;
	public const byte pow2_10 = 2;
	public const byte pow2_11 = 3;
	public const byte pow2_12 = 4;

	// Methods

	// RVA: 0x1CF0958 Offset: 0x1CF0958 VA: 0x1CF0958
	protected void .ctor() { }

	// RVA: 0x1CF0960 Offset: 0x1CF0960 VA: 0x1CF0960
	public static bool IsValid(byte maxFragmentLength) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class NamedCurve // TypeDefIndex: 4939
{
	// Fields
	public const int sect163k1 = 1;
	public const int sect163r1 = 2;
	public const int sect163r2 = 3;
	public const int sect193r1 = 4;
	public const int sect193r2 = 5;
	public const int sect233k1 = 6;
	public const int sect233r1 = 7;
	public const int sect239k1 = 8;
	public const int sect283k1 = 9;
	public const int sect283r1 = 10;
	public const int sect409k1 = 11;
	public const int sect409r1 = 12;
	public const int sect571k1 = 13;
	public const int sect571r1 = 14;
	public const int secp160k1 = 15;
	public const int secp160r1 = 16;
	public const int secp160r2 = 17;
	public const int secp192k1 = 18;
	public const int secp192r1 = 19;
	public const int secp224k1 = 20;
	public const int secp224r1 = 21;
	public const int secp256k1 = 22;
	public const int secp256r1 = 23;
	public const int secp384r1 = 24;
	public const int secp521r1 = 25;
	public const int brainpoolP256r1 = 26;
	public const int brainpoolP384r1 = 27;
	public const int brainpoolP512r1 = 28;
	public const int arbitrary_explicit_prime_curves = 65281;
	public const int arbitrary_explicit_char2_curves = 65282;

	// Methods

	// RVA: 0x1CF0988 Offset: 0x1CF0988 VA: 0x1CF0988
	protected void .ctor() { }

	// RVA: 0x1CF0990 Offset: 0x1CF0990 VA: 0x1CF0990
	public static bool IsValid(int namedCurve) { }

	// RVA: 0x1CF09B8 Offset: 0x1CF09B8 VA: 0x1CF09B8
	public static bool RefersToASpecificNamedCurve(int namedCurve) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class NameType // TypeDefIndex: 4940
{
	// Fields
	public const byte host_name = 0;

	// Methods

	// RVA: 0x1CF0974 Offset: 0x1CF0974 VA: 0x1CF0974
	protected void .ctor() { }

	// RVA: 0x1CF097C Offset: 0x1CF097C VA: 0x1CF097C
	public static bool IsValid(byte nameType) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class NewSessionTicket // TypeDefIndex: 4941
{
	// Fields
	protected readonly long mTicketLifetimeHint; // 0x10
	protected readonly byte[] mTicket; // 0x18

	// Properties
	public virtual long TicketLifetimeHint { get; }
	public virtual byte[] Ticket { get; }

	// Methods

	// RVA: 0x1CF09DC Offset: 0x1CF09DC VA: 0x1CF09DC
	public void .ctor(long ticketLifetimeHint, byte[] ticket) { }

	// RVA: 0x1CF0A14 Offset: 0x1CF0A14 VA: 0x1CF0A14 Slot: 4
	public virtual long get_TicketLifetimeHint() { }

	// RVA: 0x1CF0A1C Offset: 0x1CF0A1C VA: 0x1CF0A1C Slot: 5
	public virtual byte[] get_Ticket() { }

	// RVA: 0x1CF0A24 Offset: 0x1CF0A24 VA: 0x1CF0A24 Slot: 6
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CF0AB0 Offset: 0x1CF0AB0 VA: 0x1CF0AB0
	public static NewSessionTicket Parse(Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class OcspStatusRequest // TypeDefIndex: 4942
{
	// Fields
	protected readonly IList mResponderIDList; // 0x10
	protected readonly X509Extensions mRequestExtensions; // 0x18

	// Properties
	public virtual IList ResponderIDList { get; }
	public virtual X509Extensions RequestExtensions { get; }

	// Methods

	// RVA: 0x1CF0B60 Offset: 0x1CF0B60 VA: 0x1CF0B60
	public void .ctor(IList responderIDList, X509Extensions requestExtensions) { }

	// RVA: 0x1CF0B98 Offset: 0x1CF0B98 VA: 0x1CF0B98 Slot: 4
	public virtual IList get_ResponderIDList() { }

	// RVA: 0x1CF0BA0 Offset: 0x1CF0BA0 VA: 0x1CF0BA0 Slot: 5
	public virtual X509Extensions get_RequestExtensions() { }

	// RVA: 0x1CF0BA8 Offset: 0x1CF0BA8 VA: 0x1CF0BA8 Slot: 6
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CE8A74 Offset: 0x1CE8A74 VA: 0x1CE8A74
	public static OcspStatusRequest Parse(Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class PrfAlgorithm // TypeDefIndex: 4943
{
	// Fields
	public const int tls_prf_legacy = 0;
	public const int tls_prf_sha256 = 1;
	public const int tls_prf_sha384 = 2;

	// Methods

	// RVA: 0x1CF1020 Offset: 0x1CF1020 VA: 0x1CF1020
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public sealed class ProtocolVersion // TypeDefIndex: 4944
{
	// Fields
	public static readonly ProtocolVersion SSLv3; // 0x0
	public static readonly ProtocolVersion TLSv10; // 0x8
	public static readonly ProtocolVersion TLSv11; // 0x10
	public static readonly ProtocolVersion TLSv12; // 0x18
	public static readonly ProtocolVersion DTLSv10; // 0x20
	public static readonly ProtocolVersion DTLSv12; // 0x28
	private readonly int version; // 0x10
	private readonly string name; // 0x18

	// Properties
	public int FullVersion { get; }
	public int MajorVersion { get; }
	public int MinorVersion { get; }
	public bool IsDtls { get; }
	public bool IsSsl { get; }
	public bool IsTls { get; }

	// Methods

	// RVA: 0x1CF1028 Offset: 0x1CF1028 VA: 0x1CF1028
	private void .ctor(int v, string name) { }

	// RVA: 0x1CF1068 Offset: 0x1CF1068 VA: 0x1CF1068
	public int get_FullVersion() { }

	// RVA: 0x1CF1070 Offset: 0x1CF1070 VA: 0x1CF1070
	public int get_MajorVersion() { }

	// RVA: 0x1CF107C Offset: 0x1CF107C VA: 0x1CF107C
	public int get_MinorVersion() { }

	// RVA: 0x1CF1084 Offset: 0x1CF1084 VA: 0x1CF1084
	public bool get_IsDtls() { }

	// RVA: 0x1CF1098 Offset: 0x1CF1098 VA: 0x1CF1098
	public bool get_IsSsl() { }

	// RVA: 0x1CF110C Offset: 0x1CF110C VA: 0x1CF110C
	public bool get_IsTls() { }

	// RVA: 0x1CF1120 Offset: 0x1CF1120 VA: 0x1CF1120
	public ProtocolVersion GetEquivalentTLSVersion() { }

	// RVA: 0x1CF11EC Offset: 0x1CF11EC VA: 0x1CF11EC
	public bool IsEqualOrEarlierVersionOf(ProtocolVersion version) { }

	// RVA: 0x1CF126C Offset: 0x1CF126C VA: 0x1CF126C
	public bool IsLaterVersionOf(ProtocolVersion version) { }

	// RVA: 0x1CF12E8 Offset: 0x1CF12E8 VA: 0x1CF12E8 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x1CF1378 Offset: 0x1CF1378 VA: 0x1CF1378
	public bool Equals(ProtocolVersion other) { }

	// RVA: 0x1CF1398 Offset: 0x1CF1398 VA: 0x1CF1398 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1CF13A0 Offset: 0x1CF13A0 VA: 0x1CF13A0
	public static ProtocolVersion Get(int major, int minor) { }

	// RVA: 0x1CF1770 Offset: 0x1CF1770 VA: 0x1CF1770 Slot: 3
	public override string ToString() { }

	// RVA: 0x1CF15EC Offset: 0x1CF15EC VA: 0x1CF15EC
	private static ProtocolVersion GetUnknownVersion(int major, int minor, string prefix) { }

	// RVA: 0x1CF1778 Offset: 0x1CF1778 VA: 0x1CF1778
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class RecordStream // TypeDefIndex: 4945
{
	// Fields
	private const int DEFAULT_PLAINTEXT_LIMIT = 16384;
	internal const int TLS_HEADER_SIZE = 5;
	internal const int TLS_HEADER_TYPE_OFFSET = 0;
	internal const int TLS_HEADER_VERSION_OFFSET = 1;
	internal const int TLS_HEADER_LENGTH_OFFSET = 3;
	private TlsProtocol mHandler; // 0x10
	private Stream mInput; // 0x18
	private Stream mOutput; // 0x20
	private TlsCompression mPendingCompression; // 0x28
	private TlsCompression mReadCompression; // 0x30
	private TlsCompression mWriteCompression; // 0x38
	private TlsCipher mPendingCipher; // 0x40
	private TlsCipher mReadCipher; // 0x48
	private TlsCipher mWriteCipher; // 0x50
	private long mReadSeqNo; // 0x58
	private long mWriteSeqNo; // 0x60
	private MemoryStream mBuffer; // 0x68
	private TlsHandshakeHash mHandshakeHash; // 0x70
	private ProtocolVersion mReadVersion; // 0x78
	private ProtocolVersion mWriteVersion; // 0x80
	private bool mRestrictReadVersion; // 0x88
	private int mPlaintextLimit; // 0x8C
	private int mCompressedLimit; // 0x90
	private int mCiphertextLimit; // 0x94

	// Properties
	internal virtual ProtocolVersion ReadVersion { get; set; }
	internal virtual TlsHandshakeHash HandshakeHash { get; }

	// Methods

	// RVA: 0x1CF1904 Offset: 0x1CF1904 VA: 0x1CF1904
	internal void .ctor(TlsProtocol handler, Stream input, Stream output) { }

	// RVA: 0x1CF19C4 Offset: 0x1CF19C4 VA: 0x1CF19C4 Slot: 4
	internal virtual void Init(TlsContext context) { }

	// RVA: 0x1CF1B0C Offset: 0x1CF1B0C VA: 0x1CF1B0C Slot: 5
	internal virtual int GetPlaintextLimit() { }

	// RVA: 0x1CF1B14 Offset: 0x1CF1B14 VA: 0x1CF1B14 Slot: 6
	internal virtual void SetPlaintextLimit(int plaintextLimit) { }

	// RVA: 0x1CF1B28 Offset: 0x1CF1B28 VA: 0x1CF1B28 Slot: 7
	internal virtual ProtocolVersion get_ReadVersion() { }

	// RVA: 0x1CF1B30 Offset: 0x1CF1B30 VA: 0x1CF1B30 Slot: 8
	internal virtual void set_ReadVersion(ProtocolVersion value) { }

	// RVA: 0x1CF1B38 Offset: 0x1CF1B38 VA: 0x1CF1B38 Slot: 9
	internal virtual void SetWriteVersion(ProtocolVersion writeVersion) { }

	// RVA: 0x1CF1B40 Offset: 0x1CF1B40 VA: 0x1CF1B40 Slot: 10
	internal virtual void SetRestrictReadVersion(bool enabled) { }

	// RVA: 0x1CF1B4C Offset: 0x1CF1B4C VA: 0x1CF1B4C Slot: 11
	internal virtual void SetPendingConnectionState(TlsCompression tlsCompression, TlsCipher tlsCipher) { }

	// RVA: 0x1CF1B58 Offset: 0x1CF1B58 VA: 0x1CF1B58 Slot: 12
	internal virtual void SentWriteCipherSpec() { }

	// RVA: 0x1CF1BEC Offset: 0x1CF1BEC VA: 0x1CF1BEC Slot: 13
	internal virtual void ReceivedReadCipherSpec() { }

	// RVA: 0x1CF1C80 Offset: 0x1CF1C80 VA: 0x1CF1C80 Slot: 14
	internal virtual void FinaliseHandshake() { }

	// RVA: 0x1CF1D30 Offset: 0x1CF1D30 VA: 0x1CF1D30 Slot: 15
	internal virtual bool ReadRecord() { }

	// RVA: 0x1CF2180 Offset: 0x1CF2180 VA: 0x1CF2180 Slot: 16
	internal virtual byte[] DecodeAndVerify(byte type, Stream input, int len) { }

	// RVA: 0x1CF2568 Offset: 0x1CF2568 VA: 0x1CF2568 Slot: 17
	internal virtual void WriteRecord(byte type, byte[] plaintext, int plaintextOffset, int plaintextLength) { }

	// RVA: 0x1CF29F8 Offset: 0x1CF29F8 VA: 0x1CF29F8 Slot: 18
	internal virtual void NotifyHelloComplete() { }

	// RVA: 0x1CF2AB8 Offset: 0x1CF2AB8 VA: 0x1CF2AB8 Slot: 19
	internal virtual TlsHandshakeHash get_HandshakeHash() { }

	// RVA: 0x1CF2AC0 Offset: 0x1CF2AC0 VA: 0x1CF2AC0 Slot: 20
	internal virtual TlsHandshakeHash PrepareToFinish() { }

	// RVA: 0x1CF2B84 Offset: 0x1CF2B84 VA: 0x1CF2B84 Slot: 21
	internal virtual void UpdateHandshakeData(byte[] message, int offset, int len) { }

	// RVA: 0x1CF2C64 Offset: 0x1CF2C64 VA: 0x1CF2C64 Slot: 22
	internal virtual void SafeClose() { }

	// RVA: 0x1CF2DE8 Offset: 0x1CF2DE8 VA: 0x1CF2DE8 Slot: 23
	internal virtual void Flush() { }

	// RVA: 0x1CF24F8 Offset: 0x1CF24F8 VA: 0x1CF24F8
	private byte[] GetBufferContents() { }

	// RVA: 0x1CF1F3C Offset: 0x1CF1F3C VA: 0x1CF1F3C
	private static void CheckType(byte type, byte alertDescription) { }

	// RVA: 0x1CF2468 Offset: 0x1CF2468 VA: 0x1CF2468
	private static void CheckLength(int length, int limit, byte alertDescription) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class SecurityParameters // TypeDefIndex: 4946
{
	// Fields
	internal int entity; // 0x10
	internal int cipherSuite; // 0x14
	internal byte compressionAlgorithm; // 0x18
	internal int prfAlgorithm; // 0x1C
	internal int verifyDataLength; // 0x20
	internal byte[] masterSecret; // 0x28
	internal byte[] clientRandom; // 0x30
	internal byte[] serverRandom; // 0x38
	internal byte[] sessionHash; // 0x40
	internal byte[] pskIdentity; // 0x48
	internal byte[] srpIdentity; // 0x50
	internal short maxFragmentLength; // 0x58
	internal bool truncatedHMac; // 0x5A
	internal bool encryptThenMac; // 0x5B
	internal bool extendedMasterSecret; // 0x5C

	// Properties
	public virtual int Entity { get; }
	public virtual int CipherSuite { get; }
	public byte CompressionAlgorithm { get; }
	public virtual int PrfAlgorithm { get; }
	public virtual int VerifyDataLength { get; }
	public virtual byte[] MasterSecret { get; }
	public virtual byte[] ClientRandom { get; }
	public virtual byte[] ServerRandom { get; }
	public virtual byte[] SessionHash { get; }
	public virtual byte[] PskIdentity { get; }
	public virtual byte[] SrpIdentity { get; }

	// Methods

	// RVA: 0x1CF2E20 Offset: 0x1CF2E20 VA: 0x1CF2E20
	public void .ctor() { }

	// RVA: 0x1CF2E3C Offset: 0x1CF2E3C VA: 0x1CF2E3C Slot: 4
	internal virtual void Clear() { }

	// RVA: 0x1CF2E70 Offset: 0x1CF2E70 VA: 0x1CF2E70 Slot: 5
	public virtual int get_Entity() { }

	// RVA: 0x1CF2E78 Offset: 0x1CF2E78 VA: 0x1CF2E78 Slot: 6
	public virtual int get_CipherSuite() { }

	// RVA: 0x1CF2E80 Offset: 0x1CF2E80 VA: 0x1CF2E80
	public byte get_CompressionAlgorithm() { }

	// RVA: 0x1CF2E88 Offset: 0x1CF2E88 VA: 0x1CF2E88 Slot: 7
	public virtual int get_PrfAlgorithm() { }

	// RVA: 0x1CF2E90 Offset: 0x1CF2E90 VA: 0x1CF2E90 Slot: 8
	public virtual int get_VerifyDataLength() { }

	// RVA: 0x1CF2E98 Offset: 0x1CF2E98 VA: 0x1CF2E98 Slot: 9
	public virtual byte[] get_MasterSecret() { }

	// RVA: 0x1CF2EA0 Offset: 0x1CF2EA0 VA: 0x1CF2EA0 Slot: 10
	public virtual byte[] get_ClientRandom() { }

	// RVA: 0x1CF2EA8 Offset: 0x1CF2EA8 VA: 0x1CF2EA8 Slot: 11
	public virtual byte[] get_ServerRandom() { }

	// RVA: 0x1CF2EB0 Offset: 0x1CF2EB0 VA: 0x1CF2EB0 Slot: 12
	public virtual byte[] get_SessionHash() { }

	// RVA: 0x1CF2EB8 Offset: 0x1CF2EB8 VA: 0x1CF2EB8 Slot: 13
	public virtual byte[] get_PskIdentity() { }

	// RVA: 0x1CF2EC0 Offset: 0x1CF2EC0 VA: 0x1CF2EC0 Slot: 14
	public virtual byte[] get_SrpIdentity() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class ServerDHParams // TypeDefIndex: 4947
{
	// Fields
	protected readonly DHPublicKeyParameters mPublicKey; // 0x10

	// Properties
	public virtual DHPublicKeyParameters PublicKey { get; }

	// Methods

	// RVA: 0x1CF2EC8 Offset: 0x1CF2EC8 VA: 0x1CF2EC8
	public void .ctor(DHPublicKeyParameters publicKey) { }

	// RVA: 0x1CF2F6C Offset: 0x1CF2F6C VA: 0x1CF2F6C Slot: 4
	public virtual DHPublicKeyParameters get_PublicKey() { }

	// RVA: 0x1CF2F74 Offset: 0x1CF2F74 VA: 0x1CF2F74 Slot: 5
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CF3100 Offset: 0x1CF3100 VA: 0x1CF3100
	public static ServerDHParams Parse(Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class ServerName // TypeDefIndex: 4948
{
	// Fields
	protected readonly byte mNameType; // 0x10
	protected readonly object mName; // 0x18

	// Properties
	public virtual byte NameType { get; }
	public virtual object Name { get; }

	// Methods

	// RVA: 0x1CF343C Offset: 0x1CF343C VA: 0x1CF343C
	public void .ctor(byte nameType, object name) { }

	// RVA: 0x1CF35C8 Offset: 0x1CF35C8 VA: 0x1CF35C8 Slot: 4
	public virtual byte get_NameType() { }

	// RVA: 0x1CF35D0 Offset: 0x1CF35D0 VA: 0x1CF35D0 Slot: 5
	public virtual object get_Name() { }

	// RVA: 0x1CF35D8 Offset: 0x1CF35D8 VA: 0x1CF35D8 Slot: 6
	public virtual string GetHostName() { }

	// RVA: 0x1CF3704 Offset: 0x1CF3704 VA: 0x1CF3704 Slot: 7
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CF387C Offset: 0x1CF387C VA: 0x1CF387C
	public static ServerName Parse(Stream input) { }

	// RVA: 0x1CF3500 Offset: 0x1CF3500 VA: 0x1CF3500
	protected static bool IsCorrectType(byte nameType, object name) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class ServerNameList // TypeDefIndex: 4949
{
	// Fields
	protected readonly IList mServerNameList; // 0x10

	// Properties
	public virtual IList ServerNames { get; }

	// Methods

	// RVA: 0x1CF399C Offset: 0x1CF399C VA: 0x1CF399C
	public void .ctor(IList serverNameList) { }

	// RVA: 0x1CF3A40 Offset: 0x1CF3A40 VA: 0x1CF3A40 Slot: 4
	public virtual IList get_ServerNames() { }

	// RVA: 0x1CF3A48 Offset: 0x1CF3A48 VA: 0x1CF3A48 Slot: 5
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CF3F4C Offset: 0x1CF3F4C VA: 0x1CF3F4C
	public static ServerNameList Parse(Stream input) { }

	// RVA: 0x1CF3EF8 Offset: 0x1CF3EF8 VA: 0x1CF3EF8
	private static byte[] CheckNameType(byte[] nameTypesSeen, byte nameType) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public sealed class SessionParameters // TypeDefIndex: 4950
{
	// Fields
	private int mCipherSuite; // 0x10
	private byte mCompressionAlgorithm; // 0x14
	private byte[] mMasterSecret; // 0x18
	private Certificate mPeerCertificate; // 0x20
	private byte[] mPskIdentity; // 0x28
	private byte[] mSrpIdentity; // 0x30
	private byte[] mEncodedServerExtensions; // 0x38

	// Properties
	public int CipherSuite { get; }
	public byte CompressionAlgorithm { get; }
	public byte[] MasterSecret { get; }
	public Certificate PeerCertificate { get; }
	public byte[] PskIdentity { get; }
	public byte[] SrpIdentity { get; }

	// Methods

	// RVA: 0x1CF41D4 Offset: 0x1CF41D4 VA: 0x1CF41D4
	private void .ctor(int cipherSuite, byte compressionAlgorithm, byte[] masterSecret, Certificate peerCertificate, byte[] pskIdentity, byte[] srpIdentity, byte[] encodedServerExtensions) { }

	// RVA: 0x1CF4264 Offset: 0x1CF4264 VA: 0x1CF4264
	public void Clear() { }

	// RVA: 0x1CF427C Offset: 0x1CF427C VA: 0x1CF427C
	public SessionParameters Copy() { }

	// RVA: 0x1CF4328 Offset: 0x1CF4328 VA: 0x1CF4328
	public int get_CipherSuite() { }

	// RVA: 0x1CF4330 Offset: 0x1CF4330 VA: 0x1CF4330
	public byte get_CompressionAlgorithm() { }

	// RVA: 0x1CF4338 Offset: 0x1CF4338 VA: 0x1CF4338
	public byte[] get_MasterSecret() { }

	// RVA: 0x1CF4340 Offset: 0x1CF4340 VA: 0x1CF4340
	public Certificate get_PeerCertificate() { }

	// RVA: 0x1CF4348 Offset: 0x1CF4348 VA: 0x1CF4348
	public byte[] get_PskIdentity() { }

	// RVA: 0x1CF4350 Offset: 0x1CF4350 VA: 0x1CF4350
	public byte[] get_SrpIdentity() { }

	// RVA: 0x1CF4358 Offset: 0x1CF4358 VA: 0x1CF4358
	public IDictionary ReadServerExtensions() { }
}

// Namespace: 
public sealed class SessionParameters.Builder // TypeDefIndex: 4951
{
	// Fields
	private int mCipherSuite; // 0x10
	private short mCompressionAlgorithm; // 0x14
	private byte[] mMasterSecret; // 0x18
	private Certificate mPeerCertificate; // 0x20
	private byte[] mPskIdentity; // 0x28
	private byte[] mSrpIdentity; // 0x30
	private byte[] mEncodedServerExtensions; // 0x38

	// Methods

	// RVA: 0x1CF4734 Offset: 0x1CF4734 VA: 0x1CF4734
	public void .ctor() { }

	// RVA: 0x1CF474C Offset: 0x1CF474C VA: 0x1CF474C
	public SessionParameters Build() { }

	// RVA: 0x1CF4924 Offset: 0x1CF4924 VA: 0x1CF4924
	public SessionParameters.Builder SetCipherSuite(int cipherSuite) { }

	// RVA: 0x1CF492C Offset: 0x1CF492C VA: 0x1CF492C
	public SessionParameters.Builder SetCompressionAlgorithm(byte compressionAlgorithm) { }

	// RVA: 0x1CF4938 Offset: 0x1CF4938 VA: 0x1CF4938
	public SessionParameters.Builder SetMasterSecret(byte[] masterSecret) { }

	// RVA: 0x1CF4940 Offset: 0x1CF4940 VA: 0x1CF4940
	public SessionParameters.Builder SetPeerCertificate(Certificate peerCertificate) { }

	// RVA: 0x1CF4948 Offset: 0x1CF4948 VA: 0x1CF4948
	public SessionParameters.Builder SetPskIdentity(byte[] pskIdentity) { }

	// RVA: 0x1CF4950 Offset: 0x1CF4950 VA: 0x1CF4950
	public SessionParameters.Builder SetSrpIdentity(byte[] srpIdentity) { }

	// RVA: 0x1CF4958 Offset: 0x1CF4958 VA: 0x1CF4958
	public SessionParameters.Builder SetServerExtensions(IDictionary serverExtensions) { }

	// RVA: 0x1CF484C Offset: 0x1CF484C VA: 0x1CF484C
	private void Validate(bool condition, string parameter) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public abstract class SignatureAlgorithm // TypeDefIndex: 4952
{
	// Fields
	public const byte anonymous = 0;
	public const byte rsa = 1;
	public const byte dsa = 2;
	public const byte ecdsa = 3;

	// Methods

	// RVA: 0x1CF4B1C Offset: 0x1CF4B1C VA: 0x1CF4B1C
	protected void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class SignatureAndHashAlgorithm // TypeDefIndex: 4953
{
	// Fields
	protected readonly byte mHash; // 0x10
	protected readonly byte mSignature; // 0x11

	// Properties
	public virtual byte Hash { get; }
	public virtual byte Signature { get; }

	// Methods

	// RVA: 0x1CF4B24 Offset: 0x1CF4B24 VA: 0x1CF4B24
	public void .ctor(byte hash, byte signature) { }

	// RVA: 0x1CF4C78 Offset: 0x1CF4C78 VA: 0x1CF4C78 Slot: 4
	public virtual byte get_Hash() { }

	// RVA: 0x1CF4C80 Offset: 0x1CF4C80 VA: 0x1CF4C80 Slot: 5
	public virtual byte get_Signature() { }

	// RVA: 0x1CF4C88 Offset: 0x1CF4C88 VA: 0x1CF4C88 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1CF4D68 Offset: 0x1CF4D68 VA: 0x1CF4D68 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1CF4DB0 Offset: 0x1CF4DB0 VA: 0x1CF4DB0 Slot: 6
	public virtual void Encode(Stream output) { }

	// RVA: 0x1CF0194 Offset: 0x1CF0194 VA: 0x1CF0194
	public static SignatureAndHashAlgorithm Parse(Stream input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
internal class SignerInputBuffer : MemoryStream // TypeDefIndex: 4954
{
	// Methods

	// RVA: 0x1CF4E5C Offset: 0x1CF4E5C VA: 0x1CF4E5C
	public void .ctor() { }

	// RVA: 0x1CF4E64 Offset: 0x1CF4E64 VA: 0x1CF4E64
	internal void UpdateSigner(ISigner s) { }
}

// Namespace: 
private class SignerInputBuffer.SigStream : BaseOutputStream // TypeDefIndex: 4955
{
	// Fields
	private readonly ISigner s; // 0x18

	// Methods

	// RVA: 0x1CF4EE4 Offset: 0x1CF4EE4 VA: 0x1CF4EE4
	internal void .ctor(ISigner s) { }

	// RVA: 0x1CF4F10 Offset: 0x1CF4F10 VA: 0x1CF4F10 Slot: 24
	public override void WriteByte(byte b) { }

	// RVA: 0x1CF4FD8 Offset: 0x1CF4FD8 VA: 0x1CF4FD8 Slot: 23
	public override void Write(byte[] buf, int off, int len) { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class Ssl3Mac : IMac // TypeDefIndex: 4956
{
	// Fields
	private const byte IPAD_BYTE = 54;
	private const byte OPAD_BYTE = 92;
	internal static readonly byte[] IPAD; // 0x0
	internal static readonly byte[] OPAD; // 0x8
	private readonly IDigest digest; // 0x10
	private readonly int padLength; // 0x18
	private byte[] secret; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1CF50B8 Offset: 0x1CF50B8 VA: 0x1CF50B8
	public void .ctor(IDigest digest) { }

	// RVA: 0x1CF51A0 Offset: 0x1CF51A0 VA: 0x1CF51A0 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1CF5294 Offset: 0x1CF5294 VA: 0x1CF5294 Slot: 12
	public virtual void Init(ICipherParameters parameters) { }

	// RVA: 0x1CF540C Offset: 0x1CF540C VA: 0x1CF540C Slot: 13
	public virtual int GetMacSize() { }

	// RVA: 0x1CF54C4 Offset: 0x1CF54C4 VA: 0x1CF54C4 Slot: 14
	public virtual void Update(byte input) { }

	// RVA: 0x1CF558C Offset: 0x1CF558C VA: 0x1CF558C Slot: 15
	public virtual void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x1CF566C Offset: 0x1CF566C VA: 0x1CF566C Slot: 16
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1CF5A5C Offset: 0x1CF5A5C VA: 0x1CF5A5C Slot: 17
	public virtual void Reset() { }

	// RVA: 0x1CF5C70 Offset: 0x1CF5C70 VA: 0x1CF5C70
	private static byte[] GenPad(byte b, int count) { }

	// RVA: 0x1CF5CE4 Offset: 0x1CF5CE4 VA: 0x1CF5CE4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class SupplementalDataEntry // TypeDefIndex: 4957
{
	// Fields
	protected readonly int mDataType; // 0x10
	protected readonly byte[] mData; // 0x18

	// Properties
	public virtual int DataType { get; }
	public virtual byte[] Data { get; }

	// Methods

	// RVA: 0x1CF5D58 Offset: 0x1CF5D58 VA: 0x1CF5D58
	public void .ctor(int dataType, byte[] data) { }

	// RVA: 0x1CF5D94 Offset: 0x1CF5D94 VA: 0x1CF5D94 Slot: 4
	public virtual int get_DataType() { }

	// RVA: 0x1CF5D9C Offset: 0x1CF5D9C VA: 0x1CF5D9C Slot: 5
	public virtual byte[] get_Data() { }
}

// Namespace: Org.BouncyCastle.Crypto.Tls
public class TlsAeadCipher : TlsCipher // TypeDefIndex: 4958
{
	// Fields
	public const int NONCE_RFC5288 = 1;
	internal const int NONCE_DRAFT_CHACHA20_POLY1305 = 2;
	protected readonly TlsContext context; // 0x10
	protected readonly int macSize; // 0x18
	protected readonly int record_iv_length; // 0x1C
	protected readonly IAeadBlockCipher encryptCipher; // 0x20
	protected readonly IAeadBlockCipher decryptCipher; // 0x28
	protected readonly byte[] encryptImplicitNonce; // 0x30
	protected readonly byte[] decryptImplicitNonce; // 0x38
	protected readonly int nonceMode; // 0x40

	// Methods

	// RVA: 0x1CEC020 Offset: 0x1CEC020 VA: 0x1CEC020
	public void .ctor(TlsContext context, IAeadBlockCipher clientWriteCipher, IAeadBlockCipher serverWriteCipher, int cipherKeySize, int macSize) { }

	// RVA: 0x1CEC1B0 Offset: 0x1CEC1B0 VA: 0x1CEC1B0
	internal void .ctor(TlsContext context, IAeadBlockCipher clientWriteCipher, IAeadBlockCipher serverWriteCipher, int cipherKeySize, int macSize, int nonceMode) { }

	// RVA: 0x1CF5DA4 Offset: 0x1CF5DA4 VA: 0x1CF5DA4 Slot: 7
	public virtual int GetPlaintextLimit(int ciphertextLimit) { }

	// RVA: 0x1CF5DB4 Offset: 0x1CF5DB4 VA: 0x1CF5DB4 Slot: 8
	public virtual byte[] EncodePlaintext(long seqNo, byte type, byte[] plaintext, int offset, int len) { }
