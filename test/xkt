	public static void SetOddParity(byte[] bytes, int off, int len) { }

	// RVA: 0x1DC9D24 Offset: 0x1DC9D24 VA: 0x1DC9D24
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4818
{
	// Fields
	private readonly DHParameters parameters; // 0x20

	// Properties
	public DHParameters Parameters { get; }

	// Methods

	// RVA: 0x1DC7C84 Offset: 0x1DC7C84 VA: 0x1DC7C84
	public void .ctor(SecureRandom random, DHParameters parameters) { }

	// RVA: 0x1DC7D40 Offset: 0x1DC7D40 VA: 0x1DC7D40
	public DHParameters get_Parameters() { }

	// RVA: 0x1DC7CD0 Offset: 0x1DC7CD0 VA: 0x1DC7CD0
	internal static int GetStrength(DHParameters parameters) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4819
{
	// Fields
	private readonly DHParameters parameters; // 0x18
	private readonly DerObjectIdentifier algorithmOid; // 0x20

	// Properties
	public DHParameters Parameters { get; }
	public DerObjectIdentifier AlgorithmOid { get; }

	// Methods

	// RVA: 0x1DC7D58 Offset: 0x1DC7D58 VA: 0x1DC7D58
	protected void .ctor(bool isPrivate, DHParameters parameters) { }

	// RVA: 0x1DC7DE8 Offset: 0x1DC7DE8 VA: 0x1DC7DE8
	protected void .ctor(bool isPrivate, DHParameters parameters, DerObjectIdentifier algorithmOid) { }

	// RVA: 0x1DC7E24 Offset: 0x1DC7E24 VA: 0x1DC7E24
	public DHParameters get_Parameters() { }

	// RVA: 0x1DC7E2C Offset: 0x1DC7E2C VA: 0x1DC7E2C
	public DerObjectIdentifier get_AlgorithmOid() { }

	// RVA: 0x1DC7E34 Offset: 0x1DC7E34 VA: 0x1DC7E34 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DC7EE4 Offset: 0x1DC7EE4 VA: 0x1DC7EE4
	protected bool Equals(DHKeyParameters other) { }

	// RVA: 0x1DC7F50 Offset: 0x1DC7F50 VA: 0x1DC7F50 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHParameters : ICipherParameters // TypeDefIndex: 4820
{
	// Fields
	private const int DefaultMinimumLength = 160;
	private readonly BigInteger p; // 0x10
	private readonly BigInteger g; // 0x18
	private readonly BigInteger q; // 0x20
	private readonly BigInteger j; // 0x28
	private readonly int m; // 0x30
	private readonly int l; // 0x34
	private readonly DHValidationParameters validation; // 0x38

	// Properties
	public BigInteger P { get; }
	public BigInteger G { get; }
	public BigInteger Q { get; }
	public BigInteger J { get; }
	public int M { get; }
	public int L { get; }
	public DHValidationParameters ValidationParameters { get; }

	// Methods

	// RVA: 0x1DC7F98 Offset: 0x1DC7F98 VA: 0x1DC7F98
	public void .ctor(BigInteger p, BigInteger g) { }

	// RVA: 0x1DC804C Offset: 0x1DC804C VA: 0x1DC804C
	public void .ctor(BigInteger p, BigInteger g, BigInteger q) { }

	// RVA: 0x1DC7FC8 Offset: 0x1DC7FC8 VA: 0x1DC7FC8
	public void .ctor(BigInteger p, BigInteger g, BigInteger q, int l) { }

	// RVA: 0x1DC83C4 Offset: 0x1DC83C4 VA: 0x1DC83C4
	public void .ctor(BigInteger p, BigInteger g, BigInteger q, int m, int l) { }

	// RVA: 0x1DC83E8 Offset: 0x1DC83E8 VA: 0x1DC83E8
	public void .ctor(BigInteger p, BigInteger g, BigInteger q, BigInteger j, DHValidationParameters validation) { }

	// RVA: 0x1DC8090 Offset: 0x1DC8090 VA: 0x1DC8090
	public void .ctor(BigInteger p, BigInteger g, BigInteger q, int m, int l, BigInteger j, DHValidationParameters validation) { }

	// RVA: 0x1DC8078 Offset: 0x1DC8078 VA: 0x1DC8078
	private static int GetDefaultMParam(int lParam) { }

	// RVA: 0x1DC7D50 Offset: 0x1DC7D50 VA: 0x1DC7D50
	public BigInteger get_P() { }

	// RVA: 0x1DC841C Offset: 0x1DC841C VA: 0x1DC841C
	public BigInteger get_G() { }

	// RVA: 0x1DC8424 Offset: 0x1DC8424 VA: 0x1DC8424
	public BigInteger get_Q() { }

	// RVA: 0x1DC842C Offset: 0x1DC842C VA: 0x1DC842C
	public BigInteger get_J() { }

	// RVA: 0x1DC8434 Offset: 0x1DC8434 VA: 0x1DC8434
	public int get_M() { }

	// RVA: 0x1DC7D48 Offset: 0x1DC7D48 VA: 0x1DC7D48
	public int get_L() { }

	// RVA: 0x1DC843C Offset: 0x1DC843C VA: 0x1DC843C
	public DHValidationParameters get_ValidationParameters() { }

	// RVA: 0x1DC8444 Offset: 0x1DC8444 VA: 0x1DC8444 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DC84FC Offset: 0x1DC84FC VA: 0x1DC84FC Slot: 4
	protected virtual bool Equals(DHParameters other) { }

	// RVA: 0x1DC85A8 Offset: 0x1DC85A8 VA: 0x1DC85A8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHPrivateKeyParameters : DHKeyParameters // TypeDefIndex: 4821
{
	// Fields
	private readonly BigInteger x; // 0x28

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x1DC8634 Offset: 0x1DC8634 VA: 0x1DC8634
	public void .ctor(BigInteger x, DHParameters parameters) { }

	// RVA: 0x1DC8660 Offset: 0x1DC8660 VA: 0x1DC8660
	public void .ctor(BigInteger x, DHParameters parameters, DerObjectIdentifier algorithmOid) { }

	// RVA: 0x1DC86A4 Offset: 0x1DC86A4 VA: 0x1DC86A4
	public BigInteger get_X() { }

	// RVA: 0x1DC86AC Offset: 0x1DC86AC VA: 0x1DC86AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DC875C Offset: 0x1DC875C VA: 0x1DC875C
	protected bool Equals(DHPrivateKeyParameters other) { }

	// RVA: 0x1DC87D8 Offset: 0x1DC87D8 VA: 0x1DC87D8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHPublicKeyParameters : DHKeyParameters // TypeDefIndex: 4822
{
	// Fields
	private readonly BigInteger y; // 0x28

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x1DC8824 Offset: 0x1DC8824 VA: 0x1DC8824
	public void .ctor(BigInteger y, DHParameters parameters) { }

	// RVA: 0x1DC88D0 Offset: 0x1DC88D0 VA: 0x1DC88D0
	public void .ctor(BigInteger y, DHParameters parameters, DerObjectIdentifier algorithmOid) { }

	// RVA: 0x1DC898C Offset: 0x1DC898C VA: 0x1DC898C
	public BigInteger get_Y() { }

	// RVA: 0x1DC8994 Offset: 0x1DC8994 VA: 0x1DC8994 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DC8A44 Offset: 0x1DC8A44 VA: 0x1DC8A44
	protected bool Equals(DHPublicKeyParameters other) { }

	// RVA: 0x1DC8AC0 Offset: 0x1DC8AC0 VA: 0x1DC8AC0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHValidationParameters // TypeDefIndex: 4823
{
	// Fields
	private readonly byte[] seed; // 0x10
	private readonly int counter; // 0x18

	// Properties
	public int Counter { get; }

	// Methods

	// RVA: 0x1DC8B0C Offset: 0x1DC8B0C VA: 0x1DC8B0C
	public void .ctor(byte[] seed, int counter) { }

	// RVA: 0x1DC8C40 Offset: 0x1DC8C40 VA: 0x1DC8C40
	public byte[] GetSeed() { }

	// RVA: 0x1DC8D18 Offset: 0x1DC8D18 VA: 0x1DC8D18
	public int get_Counter() { }

	// RVA: 0x1DC8D20 Offset: 0x1DC8D20 VA: 0x1DC8D20 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DC8DD0 Offset: 0x1DC8DD0 VA: 0x1DC8DD0
	protected bool Equals(DHValidationParameters other) { }

	// RVA: 0x1DC8E34 Offset: 0x1DC8E34 VA: 0x1DC8E34 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4824
{
	// Fields
	private readonly DsaParameters parameters; // 0x20

	// Properties
	public DsaParameters Parameters { get; }

	// Methods

	// RVA: 0x1DC9DA0 Offset: 0x1DC9DA0 VA: 0x1DC9DA0
	public void .ctor(SecureRandom random, DsaParameters parameters) { }

	// RVA: 0x1DC9E14 Offset: 0x1DC9E14 VA: 0x1DC9E14
	public DsaParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public abstract class DsaKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4825
{
	// Fields
	private readonly DsaParameters parameters; // 0x18

	// Properties
	public DsaParameters Parameters { get; }

	// Methods

	// RVA: 0x1DC9E1C Offset: 0x1DC9E1C VA: 0x1DC9E1C
	protected void .ctor(bool isPrivate, DsaParameters parameters) { }

	// RVA: 0x1DC9E4C Offset: 0x1DC9E4C VA: 0x1DC9E4C
	public DsaParameters get_Parameters() { }

	// RVA: 0x1DC9E54 Offset: 0x1DC9E54 VA: 0x1DC9E54 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DC9F04 Offset: 0x1DC9F04 VA: 0x1DC9F04
	protected bool Equals(DsaKeyParameters other) { }

	// RVA: 0x1DC9F70 Offset: 0x1DC9F70 VA: 0x1DC9F70 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaParameters : ICipherParameters // TypeDefIndex: 4826
{
	// Fields
	private readonly BigInteger p; // 0x10
	private readonly BigInteger q; // 0x18
	private readonly BigInteger g; // 0x20
	private readonly DsaValidationParameters validation; // 0x28

	// Properties
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger G { get; }
	public DsaValidationParameters ValidationParameters { get; }

	// Methods

	// RVA: 0x1DC9FB8 Offset: 0x1DC9FB8 VA: 0x1DC9FB8
	public void .ctor(BigInteger p, BigInteger q, BigInteger g) { }

	// RVA: 0x1DC9FC0 Offset: 0x1DC9FC0 VA: 0x1DC9FC0
	public void .ctor(BigInteger p, BigInteger q, BigInteger g, DsaValidationParameters parameters) { }

	// RVA: 0x1DC9E0C Offset: 0x1DC9E0C VA: 0x1DC9E0C
	public BigInteger get_P() { }

	// RVA: 0x1DCA0BC Offset: 0x1DCA0BC VA: 0x1DCA0BC
	public BigInteger get_Q() { }

	// RVA: 0x1DCA0C4 Offset: 0x1DCA0C4 VA: 0x1DCA0C4
	public BigInteger get_G() { }

	// RVA: 0x1DCA0CC Offset: 0x1DCA0CC VA: 0x1DCA0CC
	public DsaValidationParameters get_ValidationParameters() { }

	// RVA: 0x1DCA0D4 Offset: 0x1DCA0D4 VA: 0x1DCA0D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCA184 Offset: 0x1DCA184 VA: 0x1DCA184
	protected bool Equals(DsaParameters other) { }

	// RVA: 0x1DCA248 Offset: 0x1DCA248 VA: 0x1DCA248 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaPrivateKeyParameters : DsaKeyParameters // TypeDefIndex: 4827
{
	// Fields
	private readonly BigInteger x; // 0x20

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x1DCA2DC Offset: 0x1DCA2DC VA: 0x1DCA2DC
	public void .ctor(BigInteger x, DsaParameters parameters) { }

	// RVA: 0x1DCA38C Offset: 0x1DCA38C VA: 0x1DCA38C
	public BigInteger get_X() { }

	// RVA: 0x1DCA394 Offset: 0x1DCA394 VA: 0x1DCA394 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCA444 Offset: 0x1DCA444 VA: 0x1DCA444
	protected bool Equals(DsaPrivateKeyParameters other) { }

	// RVA: 0x1DCA4C0 Offset: 0x1DCA4C0 VA: 0x1DCA4C0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaPublicKeyParameters : DsaKeyParameters // TypeDefIndex: 4828
{
	// Fields
	private readonly BigInteger y; // 0x20

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x1DCA50C Offset: 0x1DCA50C VA: 0x1DCA50C
	public void .ctor(BigInteger y, DsaParameters parameters) { }

	// RVA: 0x1DCA5BC Offset: 0x1DCA5BC VA: 0x1DCA5BC
	public BigInteger get_Y() { }

	// RVA: 0x1DCA5C4 Offset: 0x1DCA5C4 VA: 0x1DCA5C4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCA674 Offset: 0x1DCA674 VA: 0x1DCA674
	protected bool Equals(DsaPublicKeyParameters other) { }

	// RVA: 0x1DCA6F0 Offset: 0x1DCA6F0 VA: 0x1DCA6F0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaValidationParameters // TypeDefIndex: 4829
{
	// Fields
	private readonly byte[] seed; // 0x10
	private readonly int counter; // 0x18
	private readonly int usageIndex; // 0x1C

	// Properties
	public virtual int Counter { get; }
	public virtual int UsageIndex { get; }

	// Methods

	// RVA: 0x1DCA73C Offset: 0x1DCA73C VA: 0x1DCA73C
	public void .ctor(byte[] seed, int counter) { }

	// RVA: 0x1DCA744 Offset: 0x1DCA744 VA: 0x1DCA744
	public void .ctor(byte[] seed, int counter, int usageIndex) { }

	// RVA: 0x1DCA87C Offset: 0x1DCA87C VA: 0x1DCA87C Slot: 4
	public virtual byte[] GetSeed() { }

	// RVA: 0x1DCA954 Offset: 0x1DCA954 VA: 0x1DCA954 Slot: 5
	public virtual int get_Counter() { }

	// RVA: 0x1DCA95C Offset: 0x1DCA95C VA: 0x1DCA95C Slot: 6
	public virtual int get_UsageIndex() { }

	// RVA: 0x1DCA964 Offset: 0x1DCA964 VA: 0x1DCA964 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCAA1C Offset: 0x1DCAA1C VA: 0x1DCAA1C Slot: 7
	protected virtual bool Equals(DsaValidationParameters other) { }

	// RVA: 0x1DCAA80 Offset: 0x1DCAA80 VA: 0x1DCAA80 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECDomainParameters // TypeDefIndex: 4830
{
	// Fields
	internal ECCurve curve; // 0x10
	internal byte[] seed; // 0x18
	internal ECPoint g; // 0x20
	internal BigInteger n; // 0x28
	internal BigInteger h; // 0x30

	// Properties
	public ECCurve Curve { get; }
	public ECPoint G { get; }
	public BigInteger N { get; }
	public BigInteger H { get; }

	// Methods

	// RVA: 0x1DCAAC8 Offset: 0x1DCAAC8 VA: 0x1DCAAC8
	public void .ctor(ECCurve curve, ECPoint g, BigInteger n) { }

	// RVA: 0x1DCAB64 Offset: 0x1DCAB64 VA: 0x1DCAB64
	public void .ctor(ECCurve curve, ECPoint g, BigInteger n, BigInteger h) { }

	// RVA: 0x1DCAB6C Offset: 0x1DCAB6C VA: 0x1DCAB6C
	public void .ctor(ECCurve curve, ECPoint g, BigInteger n, BigInteger h, byte[] seed) { }

	// RVA: 0x1DCACBC Offset: 0x1DCACBC VA: 0x1DCACBC
	public ECCurve get_Curve() { }

	// RVA: 0x1DCACC4 Offset: 0x1DCACC4 VA: 0x1DCACC4
	public ECPoint get_G() { }

	// RVA: 0x1DCACCC Offset: 0x1DCACCC VA: 0x1DCACCC
	public BigInteger get_N() { }

	// RVA: 0x1DCACD4 Offset: 0x1DCACD4 VA: 0x1DCACD4
	public BigInteger get_H() { }

	// RVA: 0x1DCACDC Offset: 0x1DCACDC VA: 0x1DCACDC
	public byte[] GetSeed() { }

	// RVA: 0x1DCACE8 Offset: 0x1DCACE8 VA: 0x1DCACE8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCADA0 Offset: 0x1DCADA0 VA: 0x1DCADA0 Slot: 4
	protected virtual bool Equals(ECDomainParameters other) { }

	// RVA: 0x1DCAE98 Offset: 0x1DCAE98 VA: 0x1DCAE98 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4831
{
	// Fields
	private readonly ECDomainParameters domainParams; // 0x20
	private readonly DerObjectIdentifier publicKeyParamSet; // 0x28

	// Properties
	public ECDomainParameters DomainParameters { get; }
	public DerObjectIdentifier PublicKeyParamSet { get; }

	// Methods

	// RVA: 0x1DCAF5C Offset: 0x1DCAF5C VA: 0x1DCAF5C
	public void .ctor(ECDomainParameters domainParameters, SecureRandom random) { }

	// RVA: 0x1DCAFC8 Offset: 0x1DCAFC8 VA: 0x1DCAFC8
	public void .ctor(DerObjectIdentifier publicKeyParamSet, SecureRandom random) { }

	// RVA: 0x1DCB1F0 Offset: 0x1DCB1F0 VA: 0x1DCB1F0
	public ECDomainParameters get_DomainParameters() { }

	// RVA: 0x1DCB1F8 Offset: 0x1DCB1F8 VA: 0x1DCB1F8
	public DerObjectIdentifier get_PublicKeyParamSet() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public abstract class ECKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4832
{
	// Fields
	private static readonly string[] algorithms; // 0x0
	private readonly string algorithm; // 0x18
	private readonly ECDomainParameters parameters; // 0x20
	private readonly DerObjectIdentifier publicKeyParamSet; // 0x28

	// Properties
	public string AlgorithmName { get; }
	public ECDomainParameters Parameters { get; }
	public DerObjectIdentifier PublicKeyParamSet { get; }

	// Methods

	// RVA: 0x1DCB200 Offset: 0x1DCB200 VA: 0x1DCB200
	protected void .ctor(string algorithm, bool isPrivate, ECDomainParameters parameters) { }

	// RVA: 0x1DCB464 Offset: 0x1DCB464 VA: 0x1DCB464
	protected void .ctor(string algorithm, bool isPrivate, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCB570 Offset: 0x1DCB570 VA: 0x1DCB570
	public string get_AlgorithmName() { }

	// RVA: 0x1DCB578 Offset: 0x1DCB578 VA: 0x1DCB578
	public ECDomainParameters get_Parameters() { }

	// RVA: 0x1DCB580 Offset: 0x1DCB580 VA: 0x1DCB580
	public DerObjectIdentifier get_PublicKeyParamSet() { }

	// RVA: 0x1DCB588 Offset: 0x1DCB588 VA: 0x1DCB588 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCB640 Offset: 0x1DCB640 VA: 0x1DCB640
	protected bool Equals(ECKeyParameters other) { }

	// RVA: 0x1DCB6C0 Offset: 0x1DCB6C0 VA: 0x1DCB6C0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1DCB710 Offset: 0x1DCB710 VA: 0x1DCB710
	internal ECKeyGenerationParameters CreateKeyGenerationParameters(SecureRandom random) { }

	// RVA: 0x1DCB300 Offset: 0x1DCB300 VA: 0x1DCB300
	internal static string VerifyAlgorithmName(string algorithm) { }

	// RVA: 0x1DCB054 Offset: 0x1DCB054 VA: 0x1DCB054
	internal static ECDomainParameters LookupParameters(DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCB7B0 Offset: 0x1DCB7B0 VA: 0x1DCB7B0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECPrivateKeyParameters : ECKeyParameters // TypeDefIndex: 4833
{
	// Fields
	private readonly BigInteger d; // 0x30

	// Properties
	public BigInteger D { get; }

	// Methods

	// RVA: 0x1DCBA14 Offset: 0x1DCBA14 VA: 0x1DCBA14
	public void .ctor(BigInteger d, ECDomainParameters parameters) { }

	[ObsoleteAttribute] // RVA: 0xCC74EC Offset: 0xCC74EC VA: 0xCC74EC
	// RVA: 0x1DCBB58 Offset: 0x1DCBB58 VA: 0x1DCBB58
	public void .ctor(BigInteger d, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCBA7C Offset: 0x1DCBA7C VA: 0x1DCBA7C
	public void .ctor(string algorithm, BigInteger d, ECDomainParameters parameters) { }

	// RVA: 0x1DCBC30 Offset: 0x1DCBC30 VA: 0x1DCBC30
	public void .ctor(string algorithm, BigInteger d, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCBD0C Offset: 0x1DCBD0C VA: 0x1DCBD0C
	public BigInteger get_D() { }

	// RVA: 0x1DCBD14 Offset: 0x1DCBD14 VA: 0x1DCBD14 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCBDC4 Offset: 0x1DCBDC4 VA: 0x1DCBDC4
	protected bool Equals(ECPrivateKeyParameters other) { }

	// RVA: 0x1DCBE40 Offset: 0x1DCBE40 VA: 0x1DCBE40 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECPublicKeyParameters : ECKeyParameters // TypeDefIndex: 4834
{
	// Fields
	private readonly ECPoint q; // 0x30

	// Properties
	public ECPoint Q { get; }

	// Methods

	// RVA: 0x1DCBE8C Offset: 0x1DCBE8C VA: 0x1DCBE8C
	public void .ctor(ECPoint q, ECDomainParameters parameters) { }

	[ObsoleteAttribute] // RVA: 0xCC7524 Offset: 0xCC7524 VA: 0xCC7524
	// RVA: 0x1DCBFE4 Offset: 0x1DCBFE4 VA: 0x1DCBFE4
	public void .ctor(ECPoint q, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCBEF4 Offset: 0x1DCBEF4 VA: 0x1DCBEF4
	public void .ctor(string algorithm, ECPoint q, ECDomainParameters parameters) { }

	// RVA: 0x1DCC0D0 Offset: 0x1DCC0D0 VA: 0x1DCC0D0
	public void .ctor(string algorithm, ECPoint q, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCC1C0 Offset: 0x1DCC1C0 VA: 0x1DCC1C0
	public ECPoint get_Q() { }

	// RVA: 0x1DCC1C8 Offset: 0x1DCC1C8 VA: 0x1DCC1C8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCC278 Offset: 0x1DCC278 VA: 0x1DCC278
	protected bool Equals(ECPublicKeyParameters other) { }

	// RVA: 0x1DCC2F8 Offset: 0x1DCC2F8 VA: 0x1DCC2F8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4835
{
	// Fields
	private readonly ElGamalParameters parameters; // 0x20

	// Properties
	public ElGamalParameters Parameters { get; }

	// Methods

	// RVA: 0x1DCC344 Offset: 0x1DCC344 VA: 0x1DCC344
	public void .ctor(SecureRandom random, ElGamalParameters parameters) { }

	// RVA: 0x1DCC400 Offset: 0x1DCC400 VA: 0x1DCC400
	public ElGamalParameters get_Parameters() { }

	// RVA: 0x1DCC390 Offset: 0x1DCC390 VA: 0x1DCC390
	internal static int GetStrength(ElGamalParameters parameters) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4836
{
	// Fields
	private readonly ElGamalParameters parameters; // 0x18

	// Properties
	public ElGamalParameters Parameters { get; }

	// Methods

	// RVA: 0x1DCC418 Offset: 0x1DCC418 VA: 0x1DCC418
	protected void .ctor(bool isPrivate, ElGamalParameters parameters) { }

	// RVA: 0x1DCC448 Offset: 0x1DCC448 VA: 0x1DCC448
	public ElGamalParameters get_Parameters() { }

	// RVA: 0x1DCC450 Offset: 0x1DCC450 VA: 0x1DCC450 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCC500 Offset: 0x1DCC500 VA: 0x1DCC500
	protected bool Equals(ElGamalKeyParameters other) { }

	// RVA: 0x1DCC56C Offset: 0x1DCC56C VA: 0x1DCC56C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalParameters : ICipherParameters // TypeDefIndex: 4837
{
	// Fields
	private readonly BigInteger p; // 0x10
	private readonly BigInteger g; // 0x18
	private readonly int l; // 0x20

	// Properties
	public BigInteger P { get; }
	public BigInteger G { get; }
	public int L { get; }

	// Methods

	// RVA: 0x1DCC5B4 Offset: 0x1DCC5B4 VA: 0x1DCC5B4
	public void .ctor(BigInteger p, BigInteger g) { }

	// RVA: 0x1DCC5BC Offset: 0x1DCC5BC VA: 0x1DCC5BC
	public void .ctor(BigInteger p, BigInteger g, int l) { }

	// RVA: 0x1DCC410 Offset: 0x1DCC410 VA: 0x1DCC410
	public BigInteger get_P() { }

	// RVA: 0x1DCC694 Offset: 0x1DCC694 VA: 0x1DCC694
	public BigInteger get_G() { }

	// RVA: 0x1DCC408 Offset: 0x1DCC408 VA: 0x1DCC408
	public int get_L() { }

	// RVA: 0x1DCC69C Offset: 0x1DCC69C VA: 0x1DCC69C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCC74C Offset: 0x1DCC74C VA: 0x1DCC74C
	protected bool Equals(ElGamalParameters other) { }

	// RVA: 0x1DCC7F0 Offset: 0x1DCC7F0 VA: 0x1DCC7F0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalPrivateKeyParameters : ElGamalKeyParameters // TypeDefIndex: 4838
{
	// Fields
	private readonly BigInteger x; // 0x20

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x1DCC864 Offset: 0x1DCC864 VA: 0x1DCC864
	public void .ctor(BigInteger x, ElGamalParameters parameters) { }

	// RVA: 0x1DCC914 Offset: 0x1DCC914 VA: 0x1DCC914
	public BigInteger get_X() { }

	// RVA: 0x1DCC91C Offset: 0x1DCC91C VA: 0x1DCC91C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCC9CC Offset: 0x1DCC9CC VA: 0x1DCC9CC
	protected bool Equals(ElGamalPrivateKeyParameters other) { }

	// RVA: 0x1DCCA48 Offset: 0x1DCCA48 VA: 0x1DCCA48 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalPublicKeyParameters : ElGamalKeyParameters // TypeDefIndex: 4839
{
	// Fields
	private readonly BigInteger y; // 0x20

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x1DCCA94 Offset: 0x1DCCA94 VA: 0x1DCCA94
	public void .ctor(BigInteger y, ElGamalParameters parameters) { }

	// RVA: 0x1DCCB44 Offset: 0x1DCCB44 VA: 0x1DCCB44
	public BigInteger get_Y() { }

	// RVA: 0x1DCCB4C Offset: 0x1DCCB4C VA: 0x1DCCB4C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCCBFC Offset: 0x1DCCBFC VA: 0x1DCCBFC
	protected bool Equals(ElGamalPublicKeyParameters other) { }

	// RVA: 0x1DCCC78 Offset: 0x1DCCC78 VA: 0x1DCCC78 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public abstract class Gost3410KeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4840
{
	// Fields
	private readonly Gost3410Parameters parameters; // 0x18
	private readonly DerObjectIdentifier publicKeyParamSet; // 0x20

	// Properties
	public Gost3410Parameters Parameters { get; }
	public DerObjectIdentifier PublicKeyParamSet { get; }

	// Methods

	// RVA: 0x1DCCCC4 Offset: 0x1DCCCC4 VA: 0x1DCCCC4
	protected void .ctor(bool isPrivate, Gost3410Parameters parameters) { }

	// RVA: 0x1DCCCF4 Offset: 0x1DCCCF4 VA: 0x1DCCCF4
	protected void .ctor(bool isPrivate, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCCE88 Offset: 0x1DCCE88 VA: 0x1DCCE88
	public Gost3410Parameters get_Parameters() { }

	// RVA: 0x1DCCE90 Offset: 0x1DCCE90 VA: 0x1DCCE90
	public DerObjectIdentifier get_PublicKeyParamSet() { }

	// RVA: 0x1DCCD2C Offset: 0x1DCCD2C VA: 0x1DCCD2C
	private static Gost3410Parameters LookupParameters(DerObjectIdentifier publicKeyParamSet) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410Parameters : ICipherParameters // TypeDefIndex: 4841
{
	// Fields
	private readonly BigInteger p; // 0x10
	private readonly BigInteger q; // 0x18
	private readonly BigInteger a; // 0x20
	private readonly Gost3410ValidationParameters validation; // 0x28

	// Properties
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger A { get; }
	public Gost3410ValidationParameters ValidationParameters { get; }

	// Methods

	// RVA: 0x1DCCE98 Offset: 0x1DCCE98 VA: 0x1DCCE98
	public void .ctor(BigInteger p, BigInteger q, BigInteger a) { }

	// RVA: 0x1DCCEA0 Offset: 0x1DCCEA0 VA: 0x1DCCEA0
	public void .ctor(BigInteger p, BigInteger q, BigInteger a, Gost3410ValidationParameters validation) { }

	// RVA: 0x1DCCF9C Offset: 0x1DCCF9C VA: 0x1DCCF9C
	public BigInteger get_P() { }

	// RVA: 0x1DCCFA4 Offset: 0x1DCCFA4 VA: 0x1DCCFA4
	public BigInteger get_Q() { }

	// RVA: 0x1DCCFAC Offset: 0x1DCCFAC VA: 0x1DCCFAC
	public BigInteger get_A() { }

	// RVA: 0x1DCCFB4 Offset: 0x1DCCFB4 VA: 0x1DCCFB4
	public Gost3410ValidationParameters get_ValidationParameters() { }

	// RVA: 0x1DCCFBC Offset: 0x1DCCFBC VA: 0x1DCCFBC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCD06C Offset: 0x1DCD06C VA: 0x1DCD06C
	protected bool Equals(Gost3410Parameters other) { }

	// RVA: 0x1DCD130 Offset: 0x1DCD130 VA: 0x1DCD130 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410PrivateKeyParameters : Gost3410KeyParameters // TypeDefIndex: 4842
{
	// Fields
	private readonly BigInteger x; // 0x28

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x1DCD1C4 Offset: 0x1DCD1C4 VA: 0x1DCD1C4
	public void .ctor(BigInteger x, Gost3410Parameters parameters) { }

	// RVA: 0x1DCD2F0 Offset: 0x1DCD2F0 VA: 0x1DCD2F0
	public void .ctor(BigInteger x, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCD424 Offset: 0x1DCD424 VA: 0x1DCD424
	public BigInteger get_X() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410PublicKeyParameters : Gost3410KeyParameters // TypeDefIndex: 4843
{
	// Fields
	private readonly BigInteger y; // 0x28

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x1DCD42C Offset: 0x1DCD42C VA: 0x1DCD42C
	public void .ctor(BigInteger y, Gost3410Parameters parameters) { }

	// RVA: 0x1DCD538 Offset: 0x1DCD538 VA: 0x1DCD538
	public void .ctor(BigInteger y, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x1DCD64C Offset: 0x1DCD64C VA: 0x1DCD64C
	public BigInteger get_Y() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410ValidationParameters // TypeDefIndex: 4844
{
	// Fields
	private int x0; // 0x10
	private int c; // 0x14
	private long x0L; // 0x18
	private long cL; // 0x20

	// Properties
	public int C { get; }
	public int X0 { get; }
	public long CL { get; }
	public long X0L { get; }

	// Methods

	// RVA: 0x1DCD654 Offset: 0x1DCD654 VA: 0x1DCD654
	public void .ctor(int x0, int c) { }

	// RVA: 0x1DCD68C Offset: 0x1DCD68C VA: 0x1DCD68C
	public void .ctor(long x0L, long cL) { }

	// RVA: 0x1DCD6C4 Offset: 0x1DCD6C4 VA: 0x1DCD6C4
	public int get_C() { }

	// RVA: 0x1DCD6CC Offset: 0x1DCD6CC VA: 0x1DCD6CC
	public int get_X0() { }

	// RVA: 0x1DCD6D4 Offset: 0x1DCD6D4 VA: 0x1DCD6D4
	public long get_CL() { }

	// RVA: 0x1DCD6DC Offset: 0x1DCD6DC VA: 0x1DCD6DC
	public long get_X0L() { }

	// RVA: 0x1DCD6E4 Offset: 0x1DCD6E4 VA: 0x1DCD6E4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCD7B0 Offset: 0x1DCD7B0 VA: 0x1DCD7B0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class IesParameters : ICipherParameters // TypeDefIndex: 4845
{
	// Fields
	private byte[] derivation; // 0x10
	private byte[] encoding; // 0x18
	private int macKeySize; // 0x20

	// Properties
	public int MacKeySize { get; }

	// Methods

	// RVA: 0x1DCD81C Offset: 0x1DCD81C VA: 0x1DCD81C
	public void .ctor(byte[] derivation, byte[] encoding, int macKeySize) { }

	// RVA: 0x1DCD85C Offset: 0x1DCD85C VA: 0x1DCD85C
	public byte[] GetDerivationV() { }

	// RVA: 0x1DCD864 Offset: 0x1DCD864 VA: 0x1DCD864
	public byte[] GetEncodingV() { }

	// RVA: 0x1DCD86C Offset: 0x1DCD86C VA: 0x1DCD86C
	public int get_MacKeySize() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class IesWithCipherParameters : IesParameters // TypeDefIndex: 4846
{
	// Fields
	private int cipherKeySize; // 0x24

	// Properties
	public int CipherKeySize { get; }

	// Methods

	// RVA: 0x1DCD874 Offset: 0x1DCD874 VA: 0x1DCD874
	public void .ctor(byte[] derivation, byte[] encoding, int macKeySize, int cipherKeySize) { }

	// RVA: 0x1DCD8C0 Offset: 0x1DCD8C0 VA: 0x1DCD8C0
	public int get_CipherKeySize() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Iso18033KdfParameters : IDerivationParameters // TypeDefIndex: 4847
{
	// Fields
	private byte[] seed; // 0x10

	// Methods

	// RVA: 0x1DCD8C8 Offset: 0x1DCD8C8 VA: 0x1DCD8C8
	public void .ctor(byte[] seed) { }

	// RVA: 0x1DCD8F4 Offset: 0x1DCD8F4 VA: 0x1DCD8F4
	public byte[] GetSeed() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class KdfParameters : IDerivationParameters // TypeDefIndex: 4848
{
	// Fields
	private byte[] iv; // 0x10
	private byte[] shared; // 0x18

	// Methods

	// RVA: 0x1DCD8FC Offset: 0x1DCD8FC VA: 0x1DCD8FC
	public void .ctor(byte[] shared, byte[] iv) { }

	// RVA: 0x1DCD934 Offset: 0x1DCD934 VA: 0x1DCD934
	public byte[] GetSharedSecret() { }

	// RVA: 0x1DCD93C Offset: 0x1DCD93C VA: 0x1DCD93C
	public byte[] GetIV() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class KeyParameter : ICipherParameters // TypeDefIndex: 4849
{
	// Fields
	private readonly byte[] key; // 0x10
