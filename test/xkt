	// RVA: 0x236FEA4 Offset: 0x236FEA4 VA: 0x236FEA4
	public int get_L() { }

	// RVA: 0x2370598 Offset: 0x2370598 VA: 0x2370598
	public DHValidationParameters get_ValidationParameters() { }

	// RVA: 0x23705A0 Offset: 0x23705A0 VA: 0x23705A0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2370658 Offset: 0x2370658 VA: 0x2370658 Slot: 4
	protected virtual bool Equals(DHParameters other) { }

	// RVA: 0x2370704 Offset: 0x2370704 VA: 0x2370704 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHPrivateKeyParameters : DHKeyParameters // TypeDefIndex: 4821
{
	// Fields
	private readonly BigInteger x; // 0x28

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x2370790 Offset: 0x2370790 VA: 0x2370790
	public void .ctor(BigInteger x, DHParameters parameters) { }

	// RVA: 0x23707BC Offset: 0x23707BC VA: 0x23707BC
	public void .ctor(BigInteger x, DHParameters parameters, DerObjectIdentifier algorithmOid) { }

	// RVA: 0x2370800 Offset: 0x2370800 VA: 0x2370800
	public BigInteger get_X() { }

	// RVA: 0x2370808 Offset: 0x2370808 VA: 0x2370808 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x23708B8 Offset: 0x23708B8 VA: 0x23708B8
	protected bool Equals(DHPrivateKeyParameters other) { }

	// RVA: 0x2370934 Offset: 0x2370934 VA: 0x2370934 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHPublicKeyParameters : DHKeyParameters // TypeDefIndex: 4822
{
	// Fields
	private readonly BigInteger y; // 0x28

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x2370980 Offset: 0x2370980 VA: 0x2370980
	public void .ctor(BigInteger y, DHParameters parameters) { }

	// RVA: 0x2370A2C Offset: 0x2370A2C VA: 0x2370A2C
	public void .ctor(BigInteger y, DHParameters parameters, DerObjectIdentifier algorithmOid) { }

	// RVA: 0x2370AE8 Offset: 0x2370AE8 VA: 0x2370AE8
	public BigInteger get_Y() { }

	// RVA: 0x2370AF0 Offset: 0x2370AF0 VA: 0x2370AF0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2370BA0 Offset: 0x2370BA0 VA: 0x2370BA0
	protected bool Equals(DHPublicKeyParameters other) { }

	// RVA: 0x2370C1C Offset: 0x2370C1C VA: 0x2370C1C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DHValidationParameters // TypeDefIndex: 4823
{
	// Fields
	private readonly byte[] seed; // 0x10
	private readonly int counter; // 0x18

	// Properties
	public int Counter { get; }

	// Methods

	// RVA: 0x2370C68 Offset: 0x2370C68 VA: 0x2370C68
	public void .ctor(byte[] seed, int counter) { }

	// RVA: 0x2370D9C Offset: 0x2370D9C VA: 0x2370D9C
	public byte[] GetSeed() { }

	// RVA: 0x2370E74 Offset: 0x2370E74 VA: 0x2370E74
	public int get_Counter() { }

	// RVA: 0x2370E7C Offset: 0x2370E7C VA: 0x2370E7C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2370F2C Offset: 0x2370F2C VA: 0x2370F2C
	protected bool Equals(DHValidationParameters other) { }

	// RVA: 0x2370F90 Offset: 0x2370F90 VA: 0x2370F90 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4824
{
	// Fields
	private readonly DsaParameters parameters; // 0x20

	// Properties
	public DsaParameters Parameters { get; }

	// Methods

	// RVA: 0x2371C94 Offset: 0x2371C94 VA: 0x2371C94
	public void .ctor(SecureRandom random, DsaParameters parameters) { }

	// RVA: 0x2371D08 Offset: 0x2371D08 VA: 0x2371D08
	public DsaParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public abstract class DsaKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4825
{
	// Fields
	private readonly DsaParameters parameters; // 0x18

	// Properties
	public DsaParameters Parameters { get; }

	// Methods

	// RVA: 0x2371D10 Offset: 0x2371D10 VA: 0x2371D10
	protected void .ctor(bool isPrivate, DsaParameters parameters) { }

	// RVA: 0x2371D40 Offset: 0x2371D40 VA: 0x2371D40
	public DsaParameters get_Parameters() { }

	// RVA: 0x2371D48 Offset: 0x2371D48 VA: 0x2371D48 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2371DF8 Offset: 0x2371DF8 VA: 0x2371DF8
	protected bool Equals(DsaKeyParameters other) { }

	// RVA: 0x2371E64 Offset: 0x2371E64 VA: 0x2371E64 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaParameters : ICipherParameters // TypeDefIndex: 4826
{
	// Fields
	private readonly BigInteger p; // 0x10
	private readonly BigInteger q; // 0x18
	private readonly BigInteger g; // 0x20
	private readonly DsaValidationParameters validation; // 0x28

	// Properties
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger G { get; }
	public DsaValidationParameters ValidationParameters { get; }

	// Methods

	// RVA: 0x2371EAC Offset: 0x2371EAC VA: 0x2371EAC
	public void .ctor(BigInteger p, BigInteger q, BigInteger g) { }

	// RVA: 0x2371EB4 Offset: 0x2371EB4 VA: 0x2371EB4
	public void .ctor(BigInteger p, BigInteger q, BigInteger g, DsaValidationParameters parameters) { }

	// RVA: 0x2371D00 Offset: 0x2371D00 VA: 0x2371D00
	public BigInteger get_P() { }

	// RVA: 0x2371FB0 Offset: 0x2371FB0 VA: 0x2371FB0
	public BigInteger get_Q() { }

	// RVA: 0x2371FB8 Offset: 0x2371FB8 VA: 0x2371FB8
	public BigInteger get_G() { }

	// RVA: 0x2371FC0 Offset: 0x2371FC0 VA: 0x2371FC0
	public DsaValidationParameters get_ValidationParameters() { }

	// RVA: 0x2371FC8 Offset: 0x2371FC8 VA: 0x2371FC8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2372078 Offset: 0x2372078 VA: 0x2372078
	protected bool Equals(DsaParameters other) { }

	// RVA: 0x237213C Offset: 0x237213C VA: 0x237213C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaPrivateKeyParameters : DsaKeyParameters // TypeDefIndex: 4827
{
	// Fields
	private readonly BigInteger x; // 0x20

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x23721D0 Offset: 0x23721D0 VA: 0x23721D0
	public void .ctor(BigInteger x, DsaParameters parameters) { }

	// RVA: 0x2372280 Offset: 0x2372280 VA: 0x2372280
	public BigInteger get_X() { }

	// RVA: 0x2372288 Offset: 0x2372288 VA: 0x2372288 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2372338 Offset: 0x2372338 VA: 0x2372338
	protected bool Equals(DsaPrivateKeyParameters other) { }

	// RVA: 0x23723B4 Offset: 0x23723B4 VA: 0x23723B4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaPublicKeyParameters : DsaKeyParameters // TypeDefIndex: 4828
{
	// Fields
	private readonly BigInteger y; // 0x20

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x2372400 Offset: 0x2372400 VA: 0x2372400
	public void .ctor(BigInteger y, DsaParameters parameters) { }

	// RVA: 0x23724B0 Offset: 0x23724B0 VA: 0x23724B0
	public BigInteger get_Y() { }

	// RVA: 0x23724B8 Offset: 0x23724B8 VA: 0x23724B8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2372568 Offset: 0x2372568 VA: 0x2372568
	protected bool Equals(DsaPublicKeyParameters other) { }

	// RVA: 0x23725E4 Offset: 0x23725E4 VA: 0x23725E4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class DsaValidationParameters // TypeDefIndex: 4829
{
	// Fields
	private readonly byte[] seed; // 0x10
	private readonly int counter; // 0x18
	private readonly int usageIndex; // 0x1C

	// Properties
	public virtual int Counter { get; }
	public virtual int UsageIndex { get; }

	// Methods

	// RVA: 0x2372630 Offset: 0x2372630 VA: 0x2372630
	public void .ctor(byte[] seed, int counter) { }

	// RVA: 0x2372638 Offset: 0x2372638 VA: 0x2372638
	public void .ctor(byte[] seed, int counter, int usageIndex) { }

	// RVA: 0x2372770 Offset: 0x2372770 VA: 0x2372770 Slot: 4
	public virtual byte[] GetSeed() { }

	// RVA: 0x2372848 Offset: 0x2372848 VA: 0x2372848 Slot: 5
	public virtual int get_Counter() { }

	// RVA: 0x2372850 Offset: 0x2372850 VA: 0x2372850 Slot: 6
	public virtual int get_UsageIndex() { }

	// RVA: 0x2372858 Offset: 0x2372858 VA: 0x2372858 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2372910 Offset: 0x2372910 VA: 0x2372910 Slot: 7
	protected virtual bool Equals(DsaValidationParameters other) { }

	// RVA: 0x2372974 Offset: 0x2372974 VA: 0x2372974 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECDomainParameters // TypeDefIndex: 4830
{
	// Fields
	internal ECCurve curve; // 0x10
	internal byte[] seed; // 0x18
	internal ECPoint g; // 0x20
	internal BigInteger n; // 0x28
	internal BigInteger h; // 0x30

	// Properties
	public ECCurve Curve { get; }
	public ECPoint G { get; }
	public BigInteger N { get; }
	public BigInteger H { get; }

	// Methods

	// RVA: 0x23729BC Offset: 0x23729BC VA: 0x23729BC
	public void .ctor(ECCurve curve, ECPoint g, BigInteger n) { }

	// RVA: 0x2372A58 Offset: 0x2372A58 VA: 0x2372A58
	public void .ctor(ECCurve curve, ECPoint g, BigInteger n, BigInteger h) { }

	// RVA: 0x2372A60 Offset: 0x2372A60 VA: 0x2372A60
	public void .ctor(ECCurve curve, ECPoint g, BigInteger n, BigInteger h, byte[] seed) { }

	// RVA: 0x2372BB0 Offset: 0x2372BB0 VA: 0x2372BB0
	public ECCurve get_Curve() { }

	// RVA: 0x2372BB8 Offset: 0x2372BB8 VA: 0x2372BB8
	public ECPoint get_G() { }

	// RVA: 0x2372BC0 Offset: 0x2372BC0 VA: 0x2372BC0
	public BigInteger get_N() { }

	// RVA: 0x2372BC8 Offset: 0x2372BC8 VA: 0x2372BC8
	public BigInteger get_H() { }

	// RVA: 0x2372BD0 Offset: 0x2372BD0 VA: 0x2372BD0
	public byte[] GetSeed() { }

	// RVA: 0x2372BDC Offset: 0x2372BDC VA: 0x2372BDC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2372C94 Offset: 0x2372C94 VA: 0x2372C94 Slot: 4
	protected virtual bool Equals(ECDomainParameters other) { }

	// RVA: 0x2372D8C Offset: 0x2372D8C VA: 0x2372D8C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4831
{
	// Fields
	private readonly ECDomainParameters domainParams; // 0x20
	private readonly DerObjectIdentifier publicKeyParamSet; // 0x28

	// Properties
	public ECDomainParameters DomainParameters { get; }
	public DerObjectIdentifier PublicKeyParamSet { get; }

	// Methods

	// RVA: 0x2372E50 Offset: 0x2372E50 VA: 0x2372E50
	public void .ctor(ECDomainParameters domainParameters, SecureRandom random) { }

	// RVA: 0x2372EBC Offset: 0x2372EBC VA: 0x2372EBC
	public void .ctor(DerObjectIdentifier publicKeyParamSet, SecureRandom random) { }

	// RVA: 0x23730E4 Offset: 0x23730E4 VA: 0x23730E4
	public ECDomainParameters get_DomainParameters() { }

	// RVA: 0x23730EC Offset: 0x23730EC VA: 0x23730EC
	public DerObjectIdentifier get_PublicKeyParamSet() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public abstract class ECKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4832
{
	// Fields
	private static readonly string[] algorithms; // 0x0
	private readonly string algorithm; // 0x18
	private readonly ECDomainParameters parameters; // 0x20
	private readonly DerObjectIdentifier publicKeyParamSet; // 0x28

	// Properties
	public string AlgorithmName { get; }
	public ECDomainParameters Parameters { get; }
	public DerObjectIdentifier PublicKeyParamSet { get; }

	// Methods

	// RVA: 0x23730F4 Offset: 0x23730F4 VA: 0x23730F4
	protected void .ctor(string algorithm, bool isPrivate, ECDomainParameters parameters) { }

	// RVA: 0x2373358 Offset: 0x2373358 VA: 0x2373358
	protected void .ctor(string algorithm, bool isPrivate, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x2373464 Offset: 0x2373464 VA: 0x2373464
	public string get_AlgorithmName() { }

	// RVA: 0x237346C Offset: 0x237346C VA: 0x237346C
	public ECDomainParameters get_Parameters() { }

	// RVA: 0x2373474 Offset: 0x2373474 VA: 0x2373474
	public DerObjectIdentifier get_PublicKeyParamSet() { }

	// RVA: 0x237347C Offset: 0x237347C VA: 0x237347C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2373534 Offset: 0x2373534 VA: 0x2373534
	protected bool Equals(ECKeyParameters other) { }

	// RVA: 0x23735B4 Offset: 0x23735B4 VA: 0x23735B4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2373604 Offset: 0x2373604 VA: 0x2373604
	internal ECKeyGenerationParameters CreateKeyGenerationParameters(SecureRandom random) { }

	// RVA: 0x23731F4 Offset: 0x23731F4 VA: 0x23731F4
	internal static string VerifyAlgorithmName(string algorithm) { }

	// RVA: 0x2372F48 Offset: 0x2372F48 VA: 0x2372F48
	internal static ECDomainParameters LookupParameters(DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x23736A4 Offset: 0x23736A4 VA: 0x23736A4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECPrivateKeyParameters : ECKeyParameters // TypeDefIndex: 4833
{
	// Fields
	private readonly BigInteger d; // 0x30

	// Properties
	public BigInteger D { get; }

	// Methods

	// RVA: 0x2373908 Offset: 0x2373908 VA: 0x2373908
	public void .ctor(BigInteger d, ECDomainParameters parameters) { }

	[ObsoleteAttribute] // RVA: 0xD34BC0 Offset: 0xD34BC0 VA: 0xD34BC0
	// RVA: 0x2373A4C Offset: 0x2373A4C VA: 0x2373A4C
	public void .ctor(BigInteger d, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x2373970 Offset: 0x2373970 VA: 0x2373970
	public void .ctor(string algorithm, BigInteger d, ECDomainParameters parameters) { }

	// RVA: 0x2373B24 Offset: 0x2373B24 VA: 0x2373B24
	public void .ctor(string algorithm, BigInteger d, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x2373C00 Offset: 0x2373C00 VA: 0x2373C00
	public BigInteger get_D() { }

	// RVA: 0x2373C08 Offset: 0x2373C08 VA: 0x2373C08 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2373CB8 Offset: 0x2373CB8 VA: 0x2373CB8
	protected bool Equals(ECPrivateKeyParameters other) { }

	// RVA: 0x2373D34 Offset: 0x2373D34 VA: 0x2373D34 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ECPublicKeyParameters : ECKeyParameters // TypeDefIndex: 4834
{
	// Fields
	private readonly ECPoint q; // 0x30

	// Properties
	public ECPoint Q { get; }

	// Methods

	// RVA: 0x2248C68 Offset: 0x2248C68 VA: 0x2248C68
	public void .ctor(ECPoint q, ECDomainParameters parameters) { }

	[ObsoleteAttribute] // RVA: 0xD34BF8 Offset: 0xD34BF8 VA: 0xD34BF8
	// RVA: 0x2248DC4 Offset: 0x2248DC4 VA: 0x2248DC4
	public void .ctor(ECPoint q, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x2248CD0 Offset: 0x2248CD0 VA: 0x2248CD0
	public void .ctor(string algorithm, ECPoint q, ECDomainParameters parameters) { }

	// RVA: 0x2248EB4 Offset: 0x2248EB4 VA: 0x2248EB4
	public void .ctor(string algorithm, ECPoint q, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x2248FA8 Offset: 0x2248FA8 VA: 0x2248FA8
	public ECPoint get_Q() { }

	// RVA: 0x2248FB0 Offset: 0x2248FB0 VA: 0x2248FB0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2249060 Offset: 0x2249060 VA: 0x2249060
	protected bool Equals(ECPublicKeyParameters other) { }

	// RVA: 0x22490E4 Offset: 0x22490E4 VA: 0x22490E4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4835
{
	// Fields
	private readonly ElGamalParameters parameters; // 0x20

	// Properties
	public ElGamalParameters Parameters { get; }

	// Methods

	// RVA: 0x2249134 Offset: 0x2249134 VA: 0x2249134
	public void .ctor(SecureRandom random, ElGamalParameters parameters) { }

	// RVA: 0x22491F0 Offset: 0x22491F0 VA: 0x22491F0
	public ElGamalParameters get_Parameters() { }

	// RVA: 0x2249180 Offset: 0x2249180 VA: 0x2249180
	internal static int GetStrength(ElGamalParameters parameters) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4836
{
	// Fields
	private readonly ElGamalParameters parameters; // 0x18

	// Properties
	public ElGamalParameters Parameters { get; }

	// Methods

	// RVA: 0x2249208 Offset: 0x2249208 VA: 0x2249208
	protected void .ctor(bool isPrivate, ElGamalParameters parameters) { }

	// RVA: 0x2249238 Offset: 0x2249238 VA: 0x2249238
	public ElGamalParameters get_Parameters() { }

	// RVA: 0x2249240 Offset: 0x2249240 VA: 0x2249240 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22492F0 Offset: 0x22492F0 VA: 0x22492F0
	protected bool Equals(ElGamalKeyParameters other) { }

	// RVA: 0x224935C Offset: 0x224935C VA: 0x224935C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalParameters : ICipherParameters // TypeDefIndex: 4837
{
	// Fields
	private readonly BigInteger p; // 0x10
	private readonly BigInteger g; // 0x18
	private readonly int l; // 0x20

	// Properties
	public BigInteger P { get; }
	public BigInteger G { get; }
	public int L { get; }

	// Methods

	// RVA: 0x22493A4 Offset: 0x22493A4 VA: 0x22493A4
	public void .ctor(BigInteger p, BigInteger g) { }

	// RVA: 0x22493AC Offset: 0x22493AC VA: 0x22493AC
	public void .ctor(BigInteger p, BigInteger g, int l) { }

	// RVA: 0x2249200 Offset: 0x2249200 VA: 0x2249200
	public BigInteger get_P() { }

	// RVA: 0x2249484 Offset: 0x2249484 VA: 0x2249484
	public BigInteger get_G() { }

	// RVA: 0x22491F8 Offset: 0x22491F8 VA: 0x22491F8
	public int get_L() { }

	// RVA: 0x224948C Offset: 0x224948C VA: 0x224948C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224953C Offset: 0x224953C VA: 0x224953C
	protected bool Equals(ElGamalParameters other) { }

	// RVA: 0x22495E0 Offset: 0x22495E0 VA: 0x22495E0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalPrivateKeyParameters : ElGamalKeyParameters // TypeDefIndex: 4838
{
	// Fields
	private readonly BigInteger x; // 0x20

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x2249654 Offset: 0x2249654 VA: 0x2249654
	public void .ctor(BigInteger x, ElGamalParameters parameters) { }

	// RVA: 0x2249704 Offset: 0x2249704 VA: 0x2249704
	public BigInteger get_X() { }

	// RVA: 0x224970C Offset: 0x224970C VA: 0x224970C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22497BC Offset: 0x22497BC VA: 0x22497BC
	protected bool Equals(ElGamalPrivateKeyParameters other) { }

	// RVA: 0x2249838 Offset: 0x2249838 VA: 0x2249838 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ElGamalPublicKeyParameters : ElGamalKeyParameters // TypeDefIndex: 4839
{
	// Fields
	private readonly BigInteger y; // 0x20

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x2249884 Offset: 0x2249884 VA: 0x2249884
	public void .ctor(BigInteger y, ElGamalParameters parameters) { }

	// RVA: 0x2249934 Offset: 0x2249934 VA: 0x2249934
	public BigInteger get_Y() { }

	// RVA: 0x224993C Offset: 0x224993C VA: 0x224993C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22499EC Offset: 0x22499EC VA: 0x22499EC
	protected bool Equals(ElGamalPublicKeyParameters other) { }

	// RVA: 0x2249A68 Offset: 0x2249A68 VA: 0x2249A68 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public abstract class Gost3410KeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4840
{
	// Fields
	private readonly Gost3410Parameters parameters; // 0x18
	private readonly DerObjectIdentifier publicKeyParamSet; // 0x20

	// Properties
	public Gost3410Parameters Parameters { get; }
	public DerObjectIdentifier PublicKeyParamSet { get; }

	// Methods

	// RVA: 0x2249AB4 Offset: 0x2249AB4 VA: 0x2249AB4
	protected void .ctor(bool isPrivate, Gost3410Parameters parameters) { }

	// RVA: 0x2249AE4 Offset: 0x2249AE4 VA: 0x2249AE4
	protected void .ctor(bool isPrivate, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x2249C78 Offset: 0x2249C78 VA: 0x2249C78
	public Gost3410Parameters get_Parameters() { }

	// RVA: 0x2249C80 Offset: 0x2249C80 VA: 0x2249C80
	public DerObjectIdentifier get_PublicKeyParamSet() { }

	// RVA: 0x2249B1C Offset: 0x2249B1C VA: 0x2249B1C
	private static Gost3410Parameters LookupParameters(DerObjectIdentifier publicKeyParamSet) { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410Parameters : ICipherParameters // TypeDefIndex: 4841
{
	// Fields
	private readonly BigInteger p; // 0x10
	private readonly BigInteger q; // 0x18
	private readonly BigInteger a; // 0x20
	private readonly Gost3410ValidationParameters validation; // 0x28

	// Properties
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger A { get; }
	public Gost3410ValidationParameters ValidationParameters { get; }

	// Methods

	// RVA: 0x2249C88 Offset: 0x2249C88 VA: 0x2249C88
	public void .ctor(BigInteger p, BigInteger q, BigInteger a) { }

	// RVA: 0x2249C90 Offset: 0x2249C90 VA: 0x2249C90
	public void .ctor(BigInteger p, BigInteger q, BigInteger a, Gost3410ValidationParameters validation) { }

	// RVA: 0x2249D8C Offset: 0x2249D8C VA: 0x2249D8C
	public BigInteger get_P() { }

	// RVA: 0x2249D94 Offset: 0x2249D94 VA: 0x2249D94
	public BigInteger get_Q() { }

	// RVA: 0x2249D9C Offset: 0x2249D9C VA: 0x2249D9C
	public BigInteger get_A() { }

	// RVA: 0x2249DA4 Offset: 0x2249DA4 VA: 0x2249DA4
	public Gost3410ValidationParameters get_ValidationParameters() { }

	// RVA: 0x2249DAC Offset: 0x2249DAC VA: 0x2249DAC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2249E5C Offset: 0x2249E5C VA: 0x2249E5C
	protected bool Equals(Gost3410Parameters other) { }

	// RVA: 0x2249F20 Offset: 0x2249F20 VA: 0x2249F20 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410PrivateKeyParameters : Gost3410KeyParameters // TypeDefIndex: 4842
{
	// Fields
	private readonly BigInteger x; // 0x28

	// Properties
	public BigInteger X { get; }

	// Methods

	// RVA: 0x2249FB4 Offset: 0x2249FB4 VA: 0x2249FB4
	public void .ctor(BigInteger x, Gost3410Parameters parameters) { }

	// RVA: 0x224A0E0 Offset: 0x224A0E0 VA: 0x224A0E0
	public void .ctor(BigInteger x, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x224A214 Offset: 0x224A214 VA: 0x224A214
	public BigInteger get_X() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410PublicKeyParameters : Gost3410KeyParameters // TypeDefIndex: 4843
{
	// Fields
	private readonly BigInteger y; // 0x28

	// Properties
	public BigInteger Y { get; }

	// Methods

	// RVA: 0x224A21C Offset: 0x224A21C VA: 0x224A21C
	public void .ctor(BigInteger y, Gost3410Parameters parameters) { }

	// RVA: 0x224A328 Offset: 0x224A328 VA: 0x224A328
	public void .ctor(BigInteger y, DerObjectIdentifier publicKeyParamSet) { }

	// RVA: 0x224A43C Offset: 0x224A43C VA: 0x224A43C
	public BigInteger get_Y() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Gost3410ValidationParameters // TypeDefIndex: 4844
{
	// Fields
	private int x0; // 0x10
	private int c; // 0x14
	private long x0L; // 0x18
	private long cL; // 0x20

	// Properties
	public int C { get; }
	public int X0 { get; }
	public long CL { get; }
	public long X0L { get; }

	// Methods

	// RVA: 0x224A444 Offset: 0x224A444 VA: 0x224A444
	public void .ctor(int x0, int c) { }

	// RVA: 0x224A47C Offset: 0x224A47C VA: 0x224A47C
	public void .ctor(long x0L, long cL) { }

	// RVA: 0x224A4B4 Offset: 0x224A4B4 VA: 0x224A4B4
	public int get_C() { }

	// RVA: 0x224A4BC Offset: 0x224A4BC VA: 0x224A4BC
	public int get_X0() { }

	// RVA: 0x224A4C4 Offset: 0x224A4C4 VA: 0x224A4C4
	public long get_CL() { }

	// RVA: 0x224A4CC Offset: 0x224A4CC VA: 0x224A4CC
	public long get_X0L() { }

	// RVA: 0x224A4D4 Offset: 0x224A4D4 VA: 0x224A4D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224A5A0 Offset: 0x224A5A0 VA: 0x224A5A0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class IesParameters : ICipherParameters // TypeDefIndex: 4845
{
	// Fields
	private byte[] derivation; // 0x10
	private byte[] encoding; // 0x18
	private int macKeySize; // 0x20

	// Properties
	public int MacKeySize { get; }

	// Methods

	// RVA: 0x224A60C Offset: 0x224A60C VA: 0x224A60C
	public void .ctor(byte[] derivation, byte[] encoding, int macKeySize) { }

	// RVA: 0x224A64C Offset: 0x224A64C VA: 0x224A64C
	public byte[] GetDerivationV() { }

	// RVA: 0x224A654 Offset: 0x224A654 VA: 0x224A654
	public byte[] GetEncodingV() { }

	// RVA: 0x224A65C Offset: 0x224A65C VA: 0x224A65C
	public int get_MacKeySize() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class IesWithCipherParameters : IesParameters // TypeDefIndex: 4846
{
	// Fields
	private int cipherKeySize; // 0x24

	// Properties
	public int CipherKeySize { get; }

	// Methods

	// RVA: 0x224A664 Offset: 0x224A664 VA: 0x224A664
	public void .ctor(byte[] derivation, byte[] encoding, int macKeySize, int cipherKeySize) { }

	// RVA: 0x224A6B0 Offset: 0x224A6B0 VA: 0x224A6B0
	public int get_CipherKeySize() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class Iso18033KdfParameters : IDerivationParameters // TypeDefIndex: 4847
{
	// Fields
	private byte[] seed; // 0x10

	// Methods

	// RVA: 0x224A6B8 Offset: 0x224A6B8 VA: 0x224A6B8
	public void .ctor(byte[] seed) { }

	// RVA: 0x224A6E4 Offset: 0x224A6E4 VA: 0x224A6E4
	public byte[] GetSeed() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class KdfParameters : IDerivationParameters // TypeDefIndex: 4848
{
	// Fields
	private byte[] iv; // 0x10
	private byte[] shared; // 0x18

	// Methods

	// RVA: 0x224A6EC Offset: 0x224A6EC VA: 0x224A6EC
	public void .ctor(byte[] shared, byte[] iv) { }

	// RVA: 0x224A724 Offset: 0x224A724 VA: 0x224A724
	public byte[] GetSharedSecret() { }

	// RVA: 0x224A72C Offset: 0x224A72C VA: 0x224A72C
	public byte[] GetIV() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class KeyParameter : ICipherParameters // TypeDefIndex: 4849
{
	// Fields
	private readonly byte[] key; // 0x10

	// Methods

	// RVA: 0x224A734 Offset: 0x224A734 VA: 0x224A734
	public void .ctor(byte[] key) { }

	// RVA: 0x224A858 Offset: 0x224A858 VA: 0x224A858
	public void .ctor(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x224A9A4 Offset: 0x224A9A4 VA: 0x224A9A4
	public byte[] GetKey() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class MqvPrivateParameters : ICipherParameters // TypeDefIndex: 4850
{
	// Fields
	private readonly ECPrivateKeyParameters staticPrivateKey; // 0x10
	private readonly ECPrivateKeyParameters ephemeralPrivateKey; // 0x18
	private readonly ECPublicKeyParameters ephemeralPublicKey; // 0x20

	// Properties
	public virtual ECPrivateKeyParameters StaticPrivateKey { get; }
	public virtual ECPrivateKeyParameters EphemeralPrivateKey { get; }
	public virtual ECPublicKeyParameters EphemeralPublicKey { get; }

	// Methods

	// RVA: 0x224AA7C Offset: 0x224AA7C VA: 0x224AA7C
	public void .ctor(ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey) { }

	// RVA: 0x224AA84 Offset: 0x224AA84 VA: 0x224AA84
	public void .ctor(ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey, ECPublicKeyParameters ephemeralPublicKey) { }

	// RVA: 0x224AC7C Offset: 0x224AC7C VA: 0x224AC7C Slot: 4
	public virtual ECPrivateKeyParameters get_StaticPrivateKey() { }

	// RVA: 0x224AC84 Offset: 0x224AC84 VA: 0x224AC84 Slot: 5
	public virtual ECPrivateKeyParameters get_EphemeralPrivateKey() { }

	// RVA: 0x224AC8C Offset: 0x224AC8C VA: 0x224AC8C Slot: 6
	public virtual ECPublicKeyParameters get_EphemeralPublicKey() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class MqvPublicParameters : ICipherParameters // TypeDefIndex: 4851
{
	// Fields
	private readonly ECPublicKeyParameters staticPublicKey; // 0x10
	private readonly ECPublicKeyParameters ephemeralPublicKey; // 0x18

	// Properties
	public virtual ECPublicKeyParameters StaticPublicKey { get; }
	public virtual ECPublicKeyParameters EphemeralPublicKey { get; }

	// Methods

	// RVA: 0x224AC94 Offset: 0x224AC94 VA: 0x224AC94
	public void .ctor(ECPublicKeyParameters staticPublicKey, ECPublicKeyParameters ephemeralPublicKey) { }

	// RVA: 0x224ADD4 Offset: 0x224ADD4 VA: 0x224ADD4 Slot: 4
	public virtual ECPublicKeyParameters get_StaticPublicKey() { }

	// RVA: 0x224ADDC Offset: 0x224ADDC VA: 0x224ADDC Slot: 5
	public virtual ECPublicKeyParameters get_EphemeralPublicKey() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithIV : ICipherParameters // TypeDefIndex: 4852
{
	// Fields
	private readonly ICipherParameters parameters; // 0x10
	private readonly byte[] iv; // 0x18

	// Properties
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x224ADE4 Offset: 0x224ADE4 VA: 0x224ADE4
	public void .ctor(ICipherParameters parameters, byte[] iv) { }

	// RVA: 0x224AE30 Offset: 0x224AE30 VA: 0x224AE30
	public void .ctor(ICipherParameters parameters, byte[] iv, int ivOff, int ivLen) { }

	// RVA: 0x224AF1C Offset: 0x224AF1C VA: 0x224AF1C
	public byte[] GetIV() { }

	// RVA: 0x224AFF4 Offset: 0x224AFF4 VA: 0x224AFF4
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithRandom : ICipherParameters // TypeDefIndex: 4853
{
	// Fields
	private readonly ICipherParameters parameters; // 0x10
	private readonly SecureRandom random; // 0x18

	// Properties
	public SecureRandom Random { get; }
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x224AFFC Offset: 0x224AFFC VA: 0x224AFFC
	public void .ctor(ICipherParameters parameters, SecureRandom random) { }

	// RVA: 0x224B0C4 Offset: 0x224B0C4 VA: 0x224B0C4
	public void .ctor(ICipherParameters parameters) { }

	[ObsoleteAttribute] // RVA: 0xD34C30 Offset: 0xD34C30 VA: 0xD34C30
	// RVA: 0x224B138 Offset: 0x224B138 VA: 0x224B138
	public SecureRandom GetRandom() { }

	// RVA: 0x224B140 Offset: 0x224B140 VA: 0x224B140
	public SecureRandom get_Random() { }

	// RVA: 0x224B148 Offset: 0x224B148 VA: 0x224B148
	public ICipherParameters get_Parameters() { }
}

