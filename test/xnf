{
	// Fields
	private Spawner.ResourcePrecacher resourcePrecacher; // 0x18
	private Queue<Spawner.RequestByPath> requestsByPath; // 0x20
	private Spawner.SpawnerImpl spawnerImpl; // 0x28
	private const int DefaultCacheSize = 0;

	// Methods

	// RVA: 0x13DAC34 Offset: 0x13DAC34 VA: 0x13DAC34
	public void .ctor() { }

	// RVA: 0x13DAC84 Offset: 0x13DAC84 VA: 0x13DAC84
	private void Awake() { }

	// RVA: 0x13DAED4 Offset: 0x13DAED4 VA: 0x13DAED4
	public void Precache(string path) { }

	// RVA: 0x13DAEE0 Offset: 0x13DAEE0 VA: 0x13DAEE0
	public void Precache(string path, int cacheSize) { }

	// RVA: 0x13DAEE8 Offset: 0x13DAEE8 VA: 0x13DAEE8
	public void Precache(string path, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x13DB110 Offset: 0x13DB110 VA: 0x13DB110
	public void Precache(Object prefab) { }

	// RVA: 0x13DB11C Offset: 0x13DB11C VA: 0x13DB11C
	public void Precache(Object prefab, int cacheSize) { }

	// RVA: 0x13DB124 Offset: 0x13DB124 VA: 0x13DB124
	public void Precache(Object prefab, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x13DB258 Offset: 0x13DB258 VA: 0x13DB258
	public bool HasCached() { }

	// RVA: 0x13DB760 Offset: 0x13DB760 VA: 0x13DB760
	public GameObject Spawn(string path) { }

	// RVA: 0x13DB8BC Offset: 0x13DB8BC VA: 0x13DB8BC
	public GameObject Spawn(string path, Vector3 position, Quaternion rotation) { }

	// RVA: 0x13DB7AC Offset: 0x13DB7AC VA: 0x13DB7AC
	public GameObject Spawn(Object prefab) { }

	// RVA: 0x13DB960 Offset: 0x13DB960 VA: 0x13DB960
	public GameObject Spawn(Object prefab, Vector3 position, Quaternion rotation) { }

	// RVA: 0x13DBD2C Offset: 0x13DBD2C VA: 0x13DBD2C
	public void Despawn(GameObject objectToDespawn, bool sendsDespawn = True) { }

	// RVA: 0x13DC204 Offset: 0x13DC204 VA: 0x13DC204
	public bool ContainCache(GameObject obj) { }
}

// Namespace: 
private struct Spawner.RequestByPath // TypeDefIndex: 6307
{
	// Fields
	public string path; // 0x0
	public int cacheSize; // 0x8
	public SpawnerOverflowPolicy overflowPolicy; // 0xC

	// Methods

	// RVA: 0xD57470 Offset: 0xD57470 VA: 0xD57470
	public void .ctor(string path, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }
}

// Namespace: 
private class Spawner.ResourcePrecacher // TypeDefIndex: 6308
{
	// Fields
	private Dictionary<string, Spawner.ResourcePrecacher.Element> elements; // 0x10

	// Properties
	public ICollection<string> Paths { get; }

	// Methods

	// RVA: 0x13DAD58 Offset: 0x13DAD58 VA: 0x13DAD58
	public void .ctor() { }

	// RVA: 0x13DB034 Offset: 0x13DB034 VA: 0x13DB034
	public void Precache(string path) { }

	// RVA: 0x13DC2B0 Offset: 0x13DC2B0 VA: 0x13DC2B0
	private void OnDestroy() { }

	// RVA: 0x13DAFC4 Offset: 0x13DAFC4 VA: 0x13DAFC4
	public bool HasElement(string path) { }

	// RVA: 0x13DC468 Offset: 0x13DC468 VA: 0x13DC468
	public bool HasElements() { }

	// RVA: 0x13DB37C Offset: 0x13DB37C VA: 0x13DB37C
	public bool HasCached() { }

	// RVA: 0x13DC4D4 Offset: 0x13DC4D4 VA: 0x13DC4D4
	public ICollection<string> get_Paths() { }

	// RVA: 0x13DB508 Offset: 0x13DB508 VA: 0x13DB508
	public Object GetResource(string path) { }

	// RVA: 0x13DC2B4 Offset: 0x13DC2B4 VA: 0x13DC2B4
	public void UnloadAndClear() { }
}

// Namespace: 
private class Spawner.ResourcePrecacher.Element // TypeDefIndex: 6309
{
	// Fields
	public ResourceRequest request; // 0x10
	public Object asset; // 0x18

	// Methods

	// RVA: 0x13DC2A8 Offset: 0x13DC2A8 VA: 0x13DC2A8
	public void .ctor() { }
}

// Namespace: 
private class Spawner.SpawnerImpl // TypeDefIndex: 6310
{
	// Fields
	private Transform parent; // 0x10
	private Dictionary<Object, Spawner.SpawnerImpl.ObjectCache> caches; // 0x18
	private Dictionary<GameObject, bool> managedObjects; // 0x20
	private HashSet<GameObject> destroyedUnmanagedObjects; // 0x28
	private Dictionary<Object, int> serialNumbers; // 0x30
	private const int InitialCapacityOfCaches = 32;
	private const int CacheCountPerFrame = 32;
	private const float GCInterval = 59;
	private float lastGCAt; // 0x38
	private static Queue<Transform> q; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC536C0 Offset: 0xC536C0 VA: 0xC536C0
	private static Func<Transform, GameObject> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC536D0 Offset: 0xC536D0 VA: 0xC536D0
	private static Predicate<GameObject> <>f__am$cache1; // 0x10

	// Methods

	// RVA: 0x13DADCC Offset: 0x13DADCC VA: 0x13DADCC
	public void .ctor(Transform parent) { }

	// RVA: 0x13DB170 Offset: 0x13DB170 VA: 0x13DB170
	public void Precache(Object prefab, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x13DB5EC Offset: 0x13DB5EC VA: 0x13DB5EC
	public bool HasCached() { }

	// RVA: 0x13DB9F0 Offset: 0x13DB9F0 VA: 0x13DB9F0
	public GameObject Spawn(Object prefab, Vector3 position, Quaternion rotation, bool overridesPositionAndRotation) { }

	// RVA: 0x13DCA54 Offset: 0x13DCA54 VA: 0x13DCA54
	private void Number(Object prefab, GameObject obj) { }

	// RVA: 0x13DCBB0 Offset: 0x13DCBB0 VA: 0x13DCBB0
	private static List<Transform> BreadthFirstSearch(Transform root) { }

	// RVA: 0x13DBD70 Offset: 0x13DBD70 VA: 0x13DBD70
	public void Despawn(GameObject objectToDespawn, bool sendsDespawn) { }

	// RVA: 0x13DCF10 Offset: 0x13DCF10 VA: 0x13DCF10
	private void DeactivateCachedObject(GameObject obj) { }

	// RVA: 0x13DCFD8 Offset: 0x13DCFD8 VA: 0x13DCFD8
	private void DestroyUnmanagedObject(GameObject obj) { }

	// RVA: 0x13DD0B0 Offset: 0x13DD0B0 VA: 0x13DD0B0
	private void GC() { }

	// RVA: 0x13DCE14 Offset: 0x13DCE14 VA: 0x13DCE14
	public bool IsAlive(GameObject obj) { }

	// RVA: 0x13DC238 Offset: 0x13DC238 VA: 0x13DC238
	public bool ContainCache(Object obj) { }

	// RVA: 0x13DD1C4 Offset: 0x13DD1C4 VA: 0x13DD1C4
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8DF4 Offset: 0xCC8DF4 VA: 0xCC8DF4
	// RVA: 0x13DD238 Offset: 0x13DD238 VA: 0x13DD238
	private static GameObject <Despawn>m__0(Transform x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E04 Offset: 0xCC8E04 VA: 0xCC8E04
	// RVA: 0x13DD264 Offset: 0x13DD264 VA: 0x13DD264
	private bool <Despawn>m__1(GameObject x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E14 Offset: 0xCC8E14 VA: 0xCC8E14
	// RVA: 0x13DD2D4 Offset: 0x13DD2D4 VA: 0x13DD2D4
	private static bool <GC>m__2(GameObject x) { }
}

// Namespace: 
private class Spawner.SpawnerImpl.ObjectCache // TypeDefIndex: 6311
{
	// Fields
	private Spawner.SpawnerImpl spawnerImpl; // 0x10
	private Object prefab; // 0x18
	private int cacheSize; // 0x20
	private SpawnerOverflowPolicy overflowPolicy; // 0x24
	private GameObject[] objects; // 0x28
	private int cacheIndex; // 0x30
	private Vector3 defaultLocalPosition; // 0x34
	private Quaternion defaultLocalRotation; // 0x40
	private Vector3 defaultLocalScale; // 0x50

	// Properties
	public int CacheSize { get; }
	public bool IsInitialized { get; }

	// Methods

	// RVA: 0x13DC534 Offset: 0x13DC534 VA: 0x13DC534
	public void .ctor(Spawner.SpawnerImpl spawnerImpl, Object prefab, int cacheSize, SpawnerOverflowPolicy overflowPolicy) { }

	// RVA: 0x13DC7F4 Offset: 0x13DC7F4 VA: 0x13DC7F4
	public int get_CacheSize() { }

	// RVA: 0x13DC580 Offset: 0x13DC580 VA: 0x13DC580
	public bool get_IsInitialized() { }

	// RVA: 0x13DC590 Offset: 0x13DC590 VA: 0x13DC590
	public void Initialize() { }

	// RVA: 0x13DC7FC Offset: 0x13DC7FC VA: 0x13DC7FC
	public GameObject GetNextObjectInCache() { }
}

// Namespace: 
public class StandFigureCamera : MonoBehaviour // TypeDefIndex: 6312
{
	// Fields
	[SerializeField] // RVA: 0xC536E0 Offset: 0xC536E0 VA: 0xC536E0
	protected StandFigureManager manager; // 0x18
	protected StandFigureCamera.State state; // 0x20
	protected RenderTexture recycleTexture; // 0x28

	// Methods

	// RVA: 0x179B510 Offset: 0x179B510 VA: 0x179B510
	public void .ctor() { }

	// RVA: 0x179B518 Offset: 0x179B518 VA: 0x179B518
	public bool Request(RenderTexture recycleTexture) { }

	// RVA: 0x179B738 Offset: 0x179B738 VA: 0x179B738
	protected void OnPreRender() { }

	// RVA: 0x179B750 Offset: 0x179B750 VA: 0x179B750
	protected void OnPostRender() { }
}

// Namespace: 
protected enum StandFigureCamera.State // TypeDefIndex: 6313
{
	// Fields
	public int value__; // 0x0
	public const StandFigureCamera.State IDLE = 0;
	public const StandFigureCamera.State START = 1;
	public const StandFigureCamera.State RENDER = 2;
	public const StandFigureCamera.State SEND = 3;
	public const StandFigureCamera.State ERROR = 4;
}

// Namespace: 
public class StandFigureManager : SingletonMonoBehaviour<StandFigureManager> // TypeDefIndex: 6314
{
	// Fields
	[SerializeField] // RVA: 0xC536F0 Offset: 0xC536F0 VA: 0xC536F0
	protected GameObject standFigureMPrefab; // 0x18
	[SerializeField] // RVA: 0xC53700 Offset: 0xC53700 VA: 0xC53700
	protected GameObject standFigureRPrefab; // 0x20
	[SerializeField] // RVA: 0xC53710 Offset: 0xC53710 VA: 0xC53710
	protected UIStandFigureRender standFigureRender; // 0x28
	[SerializeField] // RVA: 0xC53720 Offset: 0xC53720 VA: 0xC53720
	protected StandFigureCamera standFigureCamera; // 0x30
	protected Queue<StandFigureRenderWaitStatus> renderWaitList; // 0x38
	protected StandFigureRenderWaitStatus renderInfo; // 0x40
	protected bool isRenderWait; // 0x48

	// Methods

	// RVA: 0x179B9D8 Offset: 0x179B9D8 VA: 0x179B9D8
	public void .ctor() { }

	// RVA: 0x179BA50 Offset: 0x179BA50 VA: 0x179BA50
	public static string GetAssetName(int svtId, int limitCount, int lv) { }

	// RVA: 0x179BB00 Offset: 0x179BB00 VA: 0x179BB00
	public static string GetAssetName(int svtId, int imageLimitCount) { }

	// RVA: 0x179BB78 Offset: 0x179BB78 VA: 0x179BB78
	public static string GetAssetName(int id) { }

	// RVA: 0x179BBE0 Offset: 0x179BBE0 VA: 0x179BBE0
	public static string GetAssetNameByForm(int svtId, int imageLimitCount, int formId) { }

	// RVA: 0x179BC60 Offset: 0x179BC60 VA: 0x179BC60
	public static void DownloadAsset(int svtId, int limitCount, int lv, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x179BD24 Offset: 0x179BD24 VA: 0x179BD24
	public static void DownloadAsset(int svtId, int imageLimitCount, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x179BDB8 Offset: 0x179BDB8 VA: 0x179BDB8
	public static void LoadAsset(int svtId, int limitCount, int lv, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x179BE7C Offset: 0x179BE7C VA: 0x179BE7C
	public static void LoadAsset(int svtId, int imageLimitCount, AssetLoader.LoadEndDataHandler callback) { }

	// RVA: 0x179BF10 Offset: 0x179BF10 VA: 0x179BF10
	public static void ReleaseAsset(int svtId, int limitCount, int lv) { }

	// RVA: 0x179BFC8 Offset: 0x179BFC8 VA: 0x179BFC8
	public static void ReleaseAsset(int svtId, int imageLimitCount) { }

	// RVA: 0x179C050 Offset: 0x179C050 VA: 0x179C050
	public static UIStandFigureM CreateMeshPrefab(GameObject parent) { }

	// RVA: 0x179C390 Offset: 0x179C390 VA: 0x179C390
	public static UIStandFigureM CreateMeshPrefab(GameObject parent, int svtId, int limitCount, int lv, Face.Type faceType, int panelDepth, Action callbackFunc) { }

	// RVA: 0x179C588 Offset: 0x179C588 VA: 0x179C588
	public static UIStandFigureM CreateMeshPrefab(GameObject parent, int svtId, int imageLimitCount, Face.Type faceType, int panelDepth, Action callbackFunc, bool loadRequiredResource = False) { }

	// RVA: 0x179C640 Offset: 0x179C640 VA: 0x179C640
	public static UIStandFigureR CreateRenderPrefab(GameObject parent) { }

	// RVA: 0x179C998 Offset: 0x179C998 VA: 0x179C998
	public static UIStandFigureR CreateRenderPrefab(GameObject parent, int svtId, int limitCount, int lv, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc) { }

	// RVA: 0x179CDF4 Offset: 0x179CDF4 VA: 0x179CDF4
	public static UIStandFigureR CreateRenderPrefab(GameObject parent, int svtId, int imageLimitCount, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc, bool isIgnoreFormChange = False, int friendship = -1) { }

	// RVA: 0x179CEC8 Offset: 0x179CEC8 VA: 0x179CEC8
	public static UIStandFigureR CreatePrefabForImageId(GameObject parent, int imageId, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc, bool isIgnoreFormChange = False, int friendship = -1) { }

	// RVA: 0x179D0C4 Offset: 0x179D0C4 VA: 0x179D0C4
	public static UIStandFigureR CreatePrefabForImageIdAndForm(GameObject parent, int imageId, int formId, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc) { }

	// RVA: 0x179D270 Offset: 0x179D270 VA: 0x179D270
	public static UIStandFigureR CreateRenderPrefab(GameObject parent, int svtId, int imageLimitCount, int formId, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc, bool isIgnoreFormChange = False, int friendship = -1) { }

	// RVA: 0x179D648 Offset: 0x179D648 VA: 0x179D648
	public static void Render(int svtId, int limitCount, int lv, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179D80C Offset: 0x179D80C VA: 0x179D80C
	public static void Render(int svtId, int imageLimitCount, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179D8D8 Offset: 0x179D8D8 VA: 0x179D8D8
	public static void Render(int id, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179D988 Offset: 0x179D988 VA: 0x179D988
	public static void Render(RenderTexture renderTex, int svtId, int limitCount, int lv, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179DAEC Offset: 0x179DAEC VA: 0x179DAEC
	public static void Render(RenderTexture renderTex, int svtId, int imageLimitCount, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179DBC4 Offset: 0x179DBC4 VA: 0x179DBC4
	public static void Render(RenderTexture renderTex, int id, Face.Type faceType, int formId, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179DCEC Offset: 0x179DCEC VA: 0x179DCEC
	public static void Release(RenderTexture renderTex) { }

	// RVA: 0x179DCF4 Offset: 0x179DCF4 VA: 0x179DCF4
	public static void ReleaseCharaFigure() { }

	// RVA: 0x179DDDC Offset: 0x179DDDC VA: 0x179DDDC
	public void Reboot() { }

	// RVA: 0x179D79C Offset: 0x179D79C VA: 0x179D79C
	protected void AddRender(StandFigureRenderWaitStatus info) { }

	// RVA: 0x179DE70 Offset: 0x179DE70 VA: 0x179DE70
	protected bool RenderStart() { }

	// RVA: 0x179DF18 Offset: 0x179DF18 VA: 0x179DF18
	protected void LateUpdate() { }

	// RVA: 0x179B95C Offset: 0x179B95C VA: 0x179B95C
	public void OnRenderEnd(RenderTexture renderTexture) { }

	// RVA: 0x179C0B4 Offset: 0x179C0B4 VA: 0x179C0B4
	public UIStandFigureM CreateMeshLocal(GameObject parent) { }

	// RVA: 0x179E0CC Offset: 0x179E0CC VA: 0x179E0CC
	public static string CreateStandFigureMName(int svtId, int imageLimitCount) { }

	// RVA: 0x179C480 Offset: 0x179C480 VA: 0x179C480
	public UIStandFigureM CreateMeshLocal(GameObject parent, int svtId, int imageLimitCount, Face.Type faceType, int panelDepth, Action callbackFunc, bool loadRequiredResource = False) { }

	// RVA: 0x179C6A4 Offset: 0x179C6A4 VA: 0x179C6A4
	public UIStandFigureR CreateRenderLocal(GameObject parent) { }

	// RVA: 0x179CA98 Offset: 0x179CA98 VA: 0x179CA98
	public UIStandFigureR CreateRenderLocal(GameObject parent, int svtId, int imageLimitCount, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc, bool isIgnoreFormChange, int friendship = -1) { }

	// RVA: 0x179D33C Offset: 0x179D33C VA: 0x179D33C
	public UIStandFigureR CreateRenderLocal(GameObject parent, int svtId, int imageLimitCount, int formId, ServantScriptEntity.OffsetKind offsetKind, Face.Type faceType, int depth, Action callbackFunc, bool isIgnoreFormChange, int friendship = -1) { }
}

// Namespace: 
public class StandFigureRenderWaitStatus // TypeDefIndex: 6315
{
	// Fields
	protected int imageId; // 0x10
	protected Face.Type faceType; // 0x14
	protected int formId; // 0x18
	protected Texture2D[] textureList; // 0x20
	protected RenderTexture renderTex; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC53730 Offset: 0xC53730 VA: 0xC53730
	[DebuggerBrowsableAttribute] // RVA: 0xC53730 Offset: 0xC53730 VA: 0xC53730
	private StandFigureRenderWaitStatus.EndHandler callbackFunc; // 0x30

	// Methods

	// RVA: 0x179D744 Offset: 0x179D744 VA: 0x179D744
	public void .ctor(int id, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179DA90 Offset: 0x179DA90 VA: 0x179DA90
	public void .ctor(RenderTexture renderTex, int id, Face.Type faceType, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179DC84 Offset: 0x179DC84 VA: 0x179DC84
	public void .ctor(RenderTexture renderTex, int id, Face.Type faceType, int formId, Texture2D[] textureList, StandFigureRenderWaitStatus.EndHandler callback) { }

	// RVA: 0x179E2D0 Offset: 0x179E2D0 VA: 0x179E2D0
	protected void add_callbackFunc(StandFigureRenderWaitStatus.EndHandler value) { }

	// RVA: 0x179E3BC Offset: 0x179E3BC VA: 0x179E3BC
	protected void remove_callbackFunc(StandFigureRenderWaitStatus.EndHandler value) { }

	// RVA: 0x179E01C Offset: 0x179E01C VA: 0x179E01C
	public RenderTexture GetRenderTexture() { }

	// RVA: 0x179E024 Offset: 0x179E024 VA: 0x179E024
	public void SetCharacter(UIStandFigureRender standFigureRender) { }

	// RVA: 0x179E080 Offset: 0x179E080 VA: 0x179E080
	public void Callback(RenderTexture renderTex) { }
}

// Namespace: 
public sealed class StandFigureRenderWaitStatus.EndHandler : MulticastDelegate // TypeDefIndex: 6316
{
	// Methods

	// RVA: 0x179E848 Offset: 0x179E848 VA: 0x179E848
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x179E4A8 Offset: 0x179E4A8 VA: 0x179E4A8 Slot: 11
	public virtual void Invoke(RenderTexture texture) { }

	// RVA: 0x179E858 Offset: 0x179E858 VA: 0x179E858 Slot: 12
	public virtual IAsyncResult BeginInvoke(RenderTexture texture, AsyncCallback callback, object object) { }

	// RVA: 0x179E87C Offset: 0x179E87C VA: 0x179E87C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class SummonAssetManager : SingletonMonoBehaviour<SummonAssetManager> // TypeDefIndex: 6317
{
	// Fields
	protected AssetData summonAssets; // 0x18

	// Methods

	// RVA: 0x117FC38 Offset: 0x117FC38 VA: 0x117FC38
	public void .ctor() { }

	// RVA: 0x117FC88 Offset: 0x117FC88 VA: 0x117FC88
	public void LoadSummonAssets(Action onLoad) { }

	// RVA: 0x117FDB4 Offset: 0x117FDB4 VA: 0x117FDB4
	public ServantRewardAction InstantiateSvtGetPrefab(Transform parent, bool isForBattle = False) { }

	// RVA: 0x1180018 Offset: 0x1180018 VA: 0x1180018
	public void UnloadSummonAssets() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC427A4 Offset: 0xC427A4 VA: 0xC427A4
private sealed class SummonAssetManager.<LoadSummonAssets>c__AnonStorey0 // TypeDefIndex: 6318
{
	// Fields
	internal Action onLoad; // 0x10
	internal SummonAssetManager $this; // 0x18

	// Methods

	// RVA: 0x117FDAC Offset: 0x117FDAC VA: 0x117FDAC
	public void .ctor() { }

	// RVA: 0x1180090 Offset: 0x1180090 VA: 0x1180090
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public class SwitchParameterDisplayManager : SingletonMonoBehaviour<SwitchParameterDisplayManager> // TypeDefIndex: 6319
{
	// Fields
	protected readonly float FADE_TIME; // 0x18
	protected readonly float DISP_TIME; // 0x1C
	protected SwitchParameterDisplayManager.State state; // 0x20
	protected float dispTime; // 0x24
	protected int count; // 0x28
	protected float alpha; // 0x2C
	protected List<SwitchParameterDisplayComponent> componentList; // 0x30

	// Properties
	public int Count { get; }
	public float Alpha { get; }

	// Methods

	// RVA: 0x1087240 Offset: 0x1087240 VA: 0x1087240
	public void .ctor() { }

	// RVA: 0x10872CC Offset: 0x10872CC VA: 0x10872CC
	public int get_Count() { }

	// RVA: 0x10872D4 Offset: 0x10872D4 VA: 0x10872D4
	public float get_Alpha() { }

	// RVA: 0x10872DC Offset: 0x10872DC VA: 0x10872DC
	public void Reset() { }

	// RVA: 0x10872EC Offset: 0x10872EC VA: 0x10872EC
	public void Reboot() { }

	// RVA: 0x108735C Offset: 0x108735C VA: 0x108735C
	public void Initialize() { }

	// RVA: 0x1087360 Offset: 0x1087360 VA: 0x1087360
	public void AddComponent(SwitchParameterDisplayComponent component) { }

	// RVA: 0x108740C Offset: 0x108740C VA: 0x108740C
	public void RemoveComponent(SwitchParameterDisplayComponent component) { }

	// RVA: 0x108747C Offset: 0x108747C VA: 0x108747C
	protected void Update() { }
}

// Namespace: 
protected enum SwitchParameterDisplayManager.State // TypeDefIndex: 6320
{
	// Fields
	public int value__; // 0x0
	public const SwitchParameterDisplayManager.State FADE_IN = 0;
	public const SwitchParameterDisplayManager.State DISP = 1;
	public const SwitchParameterDisplayManager.State FADE_OUT = 2;
}

// Namespace: 
public class TouchEffectManager : SingletonMonoBehaviour<TouchEffectManager> // TypeDefIndex: 6321
{
	// Fields
	private static readonly int CREATE_EFFECT_MAX; // 0x0
	[SerializeField] // RVA: 0xC5376C Offset: 0xC5376C VA: 0xC5376C
	protected GameObject effectParent; // 0x18
	[SerializeField] // RVA: 0xC5377C Offset: 0xC5377C VA: 0xC5377C
	protected Camera effectCamera; // 0x20
	[SerializeField] // RVA: 0xC5378C Offset: 0xC5378C VA: 0xC5378C
	protected GameObject tapPrefab; // 0x28
	[SerializeField] // RVA: 0xC5379C Offset: 0xC5379C VA: 0xC5379C
	protected GameObject dragPrefab; // 0x30
	[SerializeField] // RVA: 0xC537AC Offset: 0xC537AC VA: 0xC537AC
	protected float dragUnitLong; // 0x38
	private static int blockCount; // 0x4
	private static float dragCount; // 0x8
	private static List<CommonParticleControlComponent> effectList; // 0x10
	private static int effectIdx; // 0x18

	// Methods

	// RVA: 0x1885B0C Offset: 0x1885B0C VA: 0x1885B0C
	public void .ctor() { }

	// RVA: 0x1885B64 Offset: 0x1885B64 VA: 0x1885B64
	private void Start() { }

	// RVA: 0x1885DCC Offset: 0x1885DCC VA: 0x1885DCC
	public static void SetBlock(bool isBlock) { }

	// RVA: 0x1886058 Offset: 0x1886058 VA: 0x1886058
	public static void Press(Vector2 p) { }

	// RVA: 0x18864CC Offset: 0x18864CC VA: 0x18864CC
	public static void UnPress() { }

	// RVA: 0x1886538 Offset: 0x1886538 VA: 0x1886538
	public static void Drag(Vector2 v) { }

	// RVA: 0x188616C Offset: 0x188616C VA: 0x188616C
	public void CreateLocal(GameObject prefab, Vector2 p) { }

	// RVA: 0x1885F48 Offset: 0x1885F48 VA: 0x1885F48
	public void StopLocal() { }

	// RVA: 0x1886764 Offset: 0x1886764 VA: 0x1886764
	private static void .cctor() { }
}

// Namespace: 
public static class UnityWebRequestDecryptFileWithCrc // TypeDefIndex: 6322
{
	// Fields
	private const int BufferSize = 524288;

	// Methods

	// RVA: 0x1AFC4BC Offset: 0x1AFC4BC VA: 0x1AFC4BC
	public static UnityWebRequest CreateRequest(string uri, string key) { }
}

// Namespace: 
public class DownloadHandlerDecryptFileWithCrc : DownloadHandlerScript // TypeDefIndex: 6323
{
	// Fields
	private uint crc; // 0x18
	private CryptoStream stream; // 0x20
	private MemoryStream outputStream; // 0x28
	private int contentSize; // 0x30
	private int nowDataLength; // 0x34
	private byte[] decryptData; // 0x38
	private string key; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC537BC Offset: 0xC537BC VA: 0xC537BC
	[DebuggerBrowsableAttribute] // RVA: 0xC537BC Offset: 0xC537BC VA: 0xC537BC
	private Exception <error>k__BackingField; // 0x48

	// Properties
	public Exception error { get; set; }
	public uint Crc { get; }

	// Methods

	// RVA: 0x10D11AC Offset: 0x10D11AC VA: 0x10D11AC
	public void .ctor() { }

	// RVA: 0x10D11F0 Offset: 0x10D11F0 VA: 0x10D11F0
	public void .ctor(byte[] buffer, string key) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E24 Offset: 0xCC8E24 VA: 0xCC8E24
	// RVA: 0x10D122C Offset: 0x10D122C VA: 0x10D122C
	public Exception get_error() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E34 Offset: 0xCC8E34 VA: 0xCC8E34
	// RVA: 0x10D11E8 Offset: 0x10D11E8 VA: 0x10D11E8
	private void set_error(Exception value) { }

	// RVA: 0x10D1234 Offset: 0x10D1234 VA: 0x10D1234
	public uint get_Crc() { }

	// RVA: 0x10D123C Offset: 0x10D123C VA: 0x10D123C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10D1388 Offset: 0x10D1388 VA: 0x10D1388 Slot: 10
	protected override float GetProgress() { }

	// RVA: 0x10D13B0 Offset: 0x10D13B0 VA: 0x10D13B0 Slot: 5
	protected override byte[] GetData() { }

	// RVA: 0x10D13B8 Offset: 0x10D13B8 VA: 0x10D13B8 Slot: 8
	protected override void ReceiveContentLength(int contentLength) { }

	// RVA: 0x10D13C4 Offset: 0x10D13C4 VA: 0x10D13C4 Slot: 7
	protected override bool ReceiveData(byte[] data, int dataLength) { }

	// RVA: 0x10D15B4 Offset: 0x10D15B4 VA: 0x10D15B4 Slot: 9
	protected override void CompleteContent() { }

	// RVA: 0x10D12B0 Offset: 0x10D12B0 VA: 0x10D12B0
	public void CloseStream() { }
}

// Namespace: 
public static class UnityWebRequestFileWithCrcCheck // TypeDefIndex: 6324
{
	// Fields
	private const int BufferSize = 524288;

	// Methods

	// RVA: 0x1AFC580 Offset: 0x1AFC580 VA: 0x1AFC580
	public static UnityWebRequest CreateRequest(string uri, string path, bool isDecrypt, string key) { }
}

// Namespace: 
public class DownloadHandlerFileWithCrcCheck : DownloadHandlerScript // TypeDefIndex: 6325
{
	// Fields
	private uint crc; // 0x18
	private string path; // 0x20
	private FileStream fileStream; // 0x28
	private bool isDecrypt; // 0x30
	private CryptoStream cryptoStream; // 0x38
	private MemoryStream outputStream; // 0x40
	private byte[] decryptData; // 0x48
	private int nowDataLength; // 0x50
	private int contentSize; // 0x54
	private string key; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC537F8 Offset: 0xC537F8 VA: 0xC537F8
	[DebuggerBrowsableAttribute] // RVA: 0xC537F8 Offset: 0xC537F8 VA: 0xC537F8
	private Exception <error>k__BackingField; // 0x60

	// Properties
	public Exception error { get; set; }
	public uint Crc { get; }

	// Methods

	// RVA: 0x10D18B4 Offset: 0x10D18B4 VA: 0x10D18B4
	public void .ctor(string path, bool isDecrypt) { }

	// RVA: 0x10D190C Offset: 0x10D190C VA: 0x10D190C
	public void .ctor(string path, bool isDecrypt, byte[] buffer, string key) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E44 Offset: 0xCC8E44 VA: 0xCC8E44
	// RVA: 0x10D1964 Offset: 0x10D1964 VA: 0x10D1964
	public Exception get_error() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E54 Offset: 0xCC8E54 VA: 0xCC8E54
	// RVA: 0x10D1904 Offset: 0x10D1904 VA: 0x10D1904
	private void set_error(Exception value) { }

	// RVA: 0x10D196C Offset: 0x10D196C VA: 0x10D196C
	public uint get_Crc() { }

	// RVA: 0x10D1974 Offset: 0x10D1974 VA: 0x10D1974 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10D1AD4 Offset: 0x10D1AD4 VA: 0x10D1AD4 Slot: 10
	protected override float GetProgress() { }

	// RVA: 0x10D1AFC Offset: 0x10D1AFC VA: 0x10D1AFC Slot: 5
	protected override byte[] GetData() { }

	// RVA: 0x10D1B14 Offset: 0x10D1B14 VA: 0x10D1B14 Slot: 8
	protected override void ReceiveContentLength(int contentLength) { }

	// RVA: 0x10D1B20 Offset: 0x10D1B20 VA: 0x10D1B20 Slot: 7
	protected override bool ReceiveData(byte[] data, int dataLength) { }

	// RVA: 0x10D1DD0 Offset: 0x10D1DD0 VA: 0x10D1DD0 Slot: 9
	protected override void CompleteContent() { }

	// RVA: 0x10D19E8 Offset: 0x10D19E8 VA: 0x10D19E8
	public void CloseStream() { }
}

// Namespace: 
public class Base2DUILocationInfo // TypeDefIndex: 6326
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC53834 Offset: 0xC53834 VA: 0xC53834
	[DebuggerBrowsableAttribute] // RVA: 0xC53834 Offset: 0xC53834 VA: 0xC53834
	private List<Rect> <rects>k__BackingField; // 0x10

	// Properties
	public List<Rect> rects { get; set; }

	// Methods

	// RVA: 0xF6487C Offset: 0xF6487C VA: 0xF6487C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E64 Offset: 0xCC8E64 VA: 0xCC8E64
	// RVA: 0xF648F8 Offset: 0xF648F8 VA: 0xF648F8
	public List<Rect> get_rects() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E74 Offset: 0xCC8E74 VA: 0xCC8E74
	// RVA: 0xF648F0 Offset: 0xF648F0 VA: 0xF648F0
	protected void set_rects(List<Rect> value) { }

	// RVA: 0xF64900 Offset: 0xF64900 VA: 0xF64900 Slot: 4
	protected virtual Rect GetTitleInfoRect() { }

	// RVA: 0xF64980 Offset: 0xF64980 VA: 0xF64980 Slot: 5
	protected virtual Rect GetMenuButtonRect() { }

	// RVA: 0xF649A0 Offset: 0xF649A0 VA: 0xF649A0 Slot: 6
	protected virtual Rect GetMapChangeButtonRect() { }

	// RVA: 0xF649C0 Offset: 0xF649C0 VA: 0xF649C0 Slot: 7
	protected virtual Rect GetMasterIconSurroundsRect() { }

	// RVA: 0xF649E0 Offset: 0xF649E0 VA: 0xF649E0
	public Rect[] GetRects() { }
}

// Namespace: 
public static class UiRectFactory // TypeDefIndex: 6327
{
	// Methods

	// RVA: 0x1AFBF44 Offset: 0x1AFBF44 VA: 0x1AFBF44
	public static Rect RightBottomRect(float x, float y, float width, float height) { }

	// RVA: 0x1AFC024 Offset: 0x1AFC024 VA: 0x1AFC024
	public static Rect LeftBottomRect(float x, float y, float width, float height) { }

	// RVA: 0x1AFC100 Offset: 0x1AFC100 VA: 0x1AFC100
	public static Rect RightTopRect(float x, float y, float width, float height) { }

	// RVA: 0x1AFC1E4 Offset: 0x1AFC1E4 VA: 0x1AFC1E4
	public static Rect LeftTopRect(float x, float y, float width, float height) { }

	// RVA: 0x1AFC2C4 Offset: 0x1AFC2C4 VA: 0x1AFC2C4
	public static Rect CenterBottomRect(float x, float y, float width, float height) { }

	// RVA: 0x1AFC394 Offset: 0x1AFC394 VA: 0x1AFC394
	public static Rect CenterTopRect(float x, float y, float width, float height) { }

	// RVA: 0x1AFC468 Offset: 0x1AFC468 VA: 0x1AFC468
	public static Rect CenterRect(float x, float y, float width, float height) { }
}

// Namespace: 
public static class MapCameraViewAdjusterUtil // TypeDefIndex: 6328
{
	// Fields
	private static readonly float CHECK_OFFSET_INTERVAL; // 0x0
	private static readonly float CHECK_ZOOM_INTERVAL; // 0x4

	// Methods

	// RVA: 0x2BAE260 Offset: 0x2BAE260 VA: 0x2BAE260
	public static Rect CalculateEachRectIntersectAvoidedCameraRect(MapCamera camera, Rect[] rectsOnMap, Rect[] rects2DUI, out MapCameraViewAdjusterUtil.FailedReason failedReason) { }

	// RVA: 0x2BAEDE8 Offset: 0x2BAEDE8 VA: 0x2BAEDE8
	public static Rect CalculateLostSomeRectsAllowedCameraRect(MapCamera camera, Rect[] rectsOnMap, Rect[] rects2DUI, Rect[] essentialRectsOnMap, out MapCameraViewAdjusterUtil.FailedReason failedReason) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC8E84 Offset: 0xCC8E84 VA: 0xCC8E84
	// RVA: 0x2BAEB0C Offset: 0x2BAEB0C VA: 0x2BAEB0C
	private static IEnumerable<Rect> GenerateCameraRects(float ZoomMin, float ZoomMax, float ZoomInterval, float offsetInterval, Rect brakeRect, Vector3 center) { }

	// RVA: 0x2BAEC5C Offset: 0x2BAEC5C VA: 0x2BAEC5C
	private static bool HasAnyIntersects(Rect[] containRects, Rect[] containRects2DUI, Rect cameraRect) { }

	// RVA: 0x2BAE904 Offset: 0x2BAE904 VA: 0x2BAE904
	private static Rect CreateCoveringRect(Rect[] rects) { }

	// RVA: 0x2BAE824 Offset: 0x2BAE824 VA: 0x2BAE824
	private static Rect ResizedToViewAspectRect(Rect baseRect) { }

	// RVA: 0x2BAD9B0 Offset: 0x2BAD9B0 VA: 0x2BAD9B0
	public static MapCameraViewAdjusterUtil.CameraDestinationInfo GetSafeCameraDestination(MapCamera camera, Nullable<Vector3> expectedDestPos, Nullable<float> expectedDestZoom) { }

	// RVA: 0x2BAF590 Offset: 0x2BAF590 VA: 0x2BAF590
	private static void .cctor() { }
}

// Namespace: 
public enum MapCameraViewAdjusterUtil.FailedReason // TypeDefIndex: 6329
{
	// Fields
	public int value__; // 0x0
	public const MapCameraViewAdjusterUtil.FailedReason NONE = 0;
	public const MapCameraViewAdjusterUtil.FailedReason HAS_INTERSECT = 1;
	public const MapCameraViewAdjusterUtil.FailedReason OVERFLOW_CAMERA_RECT_UNAVOIDABLE = 2;
}

// Namespace: 
public class MapCameraViewAdjusterUtil.CameraDestinationInfo // TypeDefIndex: 6330
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC53870 Offset: 0xC53870 VA: 0xC53870
	[DebuggerBrowsableAttribute] // RVA: 0xC53870 Offset: 0xC53870 VA: 0xC53870
	private Vector3 <position>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC538AC Offset: 0xC538AC VA: 0xC538AC
	[DebuggerBrowsableAttribute] // RVA: 0xC538AC Offset: 0xC538AC VA: 0xC538AC
	private float <size>k__BackingField; // 0x1C

	// Properties
	public Vector3 position { get; set; }
	public float size { get; set; }

	// Methods

	// RVA: 0x2BAF544 Offset: 0x2BAF544 VA: 0x2BAF544
	public void .ctor(Vector3 position, float size) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8E94 Offset: 0xCC8E94 VA: 0xCC8E94
	// RVA: 0x2BADD2C Offset: 0x2BADD2C VA: 0x2BADD2C
	public Vector3 get_position() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8EA4 Offset: 0xCC8EA4 VA: 0xCC8EA4
	// RVA: 0x2BAFCF0 Offset: 0x2BAFCF0 VA: 0x2BAFCF0
	private void set_position(Vector3 value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8EB4 Offset: 0xCC8EB4 VA: 0xCC8EB4
	// RVA: 0x2BADD24 Offset: 0x2BADD24 VA: 0x2BADD24
	public float get_size() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8EC4 Offset: 0xCC8EC4 VA: 0xCC8EC4
	// RVA: 0x2BAFCFC Offset: 0x2BAFCFC VA: 0x2BAFCFC
	private void set_size(float value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC427B4 Offset: 0xC427B4 VA: 0xC427B4
private sealed class MapCameraViewAdjusterUtil.<GenerateCameraRects>c__Iterator0 : IEnumerable, IEnumerable<Rect>, IEnumerator, IDisposable, IEnumerator<Rect> // TypeDefIndex: 6331
{
	// Fields
	internal Vector2 <windowSize>__0; // 0x10
	internal float ZoomMin; // 0x18
	internal float <size>__1; // 0x1C
	internal float ZoomMax; // 0x20
	internal Rect <cameraRect>__2; // 0x24
	internal Vector3 center; // 0x34
	internal Rect brakeRect; // 0x40
	internal float offsetInterval; // 0x50
	internal int <offsetXMinIndex>__2; // 0x54
	internal int <offsetXMaxIndex>__2; // 0x58
	internal int <offsetYMinIndex>__2; // 0x5C
	internal int <offsetYMaxIndex>__2; // 0x60
	internal int <loopX>__2; // 0x64
	internal int <loopY>__2; // 0x68
	internal int <x>__3; // 0x6C
	internal int <offsetXIndex>__4; // 0x70
	internal float <offsetX>__4; // 0x74
	internal int <y>__5; // 0x78
	internal int <offsetYIndex>__6; // 0x7C
	internal float <offsetY>__6; // 0x80
	internal float ZoomInterval; // 0x84
	internal Rect $current; // 0x88
	internal bool $disposing; // 0x98
	internal int $PC; // 0x9C

	// Properties
	private Rect System.Collections.Generic.IEnumerator<UnityEngine.Rect>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD8A00 Offset: 0xCD8A00 VA: 0xCD8A00
	// RVA: 0x2BAF53C Offset: 0x2BAF53C VA: 0x2BAF53C
	public void .ctor() { }

	// RVA: 0x2BAF5F8 Offset: 0x2BAF5F8 VA: 0x2BAF5F8 Slot: 7
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A10 Offset: 0xCD8A10 VA: 0xCD8A10
	// RVA: 0x2BAFAC4 Offset: 0x2BAFAC4 VA: 0x2BAFAC4 Slot: 10
	private Rect System.Collections.Generic.IEnumerator<UnityEngine.Rect>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A20 Offset: 0xCD8A20 VA: 0xCD8A20
	// RVA: 0x2BAFAD0 Offset: 0x2BAFAD0 VA: 0x2BAFAD0 Slot: 6
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A30 Offset: 0xCD8A30 VA: 0xCD8A30
	// RVA: 0x2BAFB34 Offset: 0x2BAFB34 VA: 0x2BAFB34 Slot: 9
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A40 Offset: 0xCD8A40 VA: 0xCD8A40
	// RVA: 0x2BAFB48 Offset: 0x2BAFB48 VA: 0x2BAFB48 Slot: 8
	public void Reset() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A50 Offset: 0xCD8A50 VA: 0xCD8A50
	// RVA: 0x2BAFBB0 Offset: 0x2BAFBB0 VA: 0x2BAFBB0 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A60 Offset: 0xCD8A60 VA: 0xCD8A60
	// RVA: 0x2BAFBB4 Offset: 0x2BAFBB4 VA: 0x2BAFBB4 Slot: 5
	private IEnumerator<Rect> System.Collections.Generic.IEnumerable<UnityEngine.Rect>.GetEnumerator() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC25294 Offset: 0xC25294 VA: 0xC25294
public class AllocMem : MonoBehaviour // TypeDefIndex: 6332
{
	// Fields
	public bool show; // 0x18
	public bool showFPS; // 0x19
	public bool showInEditor; // 0x1A
	private float lastCollect; // 0x1C
	private float lastCollectNum; // 0x20
	private float delta; // 0x24
	private float lastDeltaTime; // 0x28
	private int allocRate; // 0x2C
	private int lastAllocMemory; // 0x30
	private float lastAllocSet; // 0x34
	private int allocMem; // 0x38
	private int collectAlloc; // 0x3C
	private int peakAlloc; // 0x40

	// Methods

	// RVA: 0x107462C Offset: 0x107462C VA: 0x107462C
	public void .ctor() { }

	// RVA: 0x1074648 Offset: 0x1074648 VA: 0x1074648
	public void Start() { }

	// RVA: 0x1074654 Offset: 0x1074654 VA: 0x1074654
	public void OnGUI() { }
}

// Namespace: 
