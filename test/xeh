{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18
	private byte[] param; // 0x20

	// Properties
	public byte[] Parameter { get; set; }
	public override string Parameters { get; }
	public RandomNumberGenerator Rng { get; set; }

	// Methods

	// RVA: 0x1D74DCC Offset: 0x1D74DCC VA: 0x1D74DCC
	public void .ctor() { }

	// RVA: 0x1D73E10 Offset: 0x1D73E10 VA: 0x1D73E10
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x1D74DF4 Offset: 0x1D74DF4 VA: 0x1D74DF4
	public byte[] get_Parameter() { }

	// RVA: 0x1D74DFC Offset: 0x1D74DFC VA: 0x1D74DFC
	public void set_Parameter(byte[] value) { }

	// RVA: 0x1D74E04 Offset: 0x1D74E04 VA: 0x1D74E04 Slot: 4
	public override string get_Parameters() { }

	// RVA: 0x1D74E0C Offset: 0x1D74E0C VA: 0x1D74E0C
	public RandomNumberGenerator get_Rng() { }

	// RVA: 0x1D74E14 Offset: 0x1D74E14 VA: 0x1D74E14
	public void set_Rng(RandomNumberGenerator value) { }

	// RVA: 0x1D74E1C Offset: 0x1D74E1C VA: 0x1D74E1C Slot: 5
	public override byte[] CreateKeyExchange(byte[] rgbData) { }

	// RVA: 0x1D74F6C Offset: 0x1D74F6C VA: 0x1D74F6C Slot: 6
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType) { }

	// RVA: 0x1D74F78 Offset: 0x1D74F78 VA: 0x1D74F78 Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC96AC Offset: 0xBC96AC VA: 0xBC96AC
public class RSAPKCS1KeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 757
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18

	// Properties
	public override string Parameters { get; set; }
	public RandomNumberGenerator RNG { get; set; }

	// Methods

	// RVA: 0x1D75048 Offset: 0x1D75048 VA: 0x1D75048
	public void .ctor() { }

	// RVA: 0x1D73C30 Offset: 0x1D73C30 VA: 0x1D73C30
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x1D75050 Offset: 0x1D75050 VA: 0x1D75050 Slot: 4
	public override string get_Parameters() { }

	// RVA: 0x1D75058 Offset: 0x1D75058 VA: 0x1D75058 Slot: 5
	public override void set_Parameters(string value) { }

	// RVA: 0x1D7505C Offset: 0x1D7505C VA: 0x1D7505C
	public RandomNumberGenerator get_RNG() { }

	// RVA: 0x1D75064 Offset: 0x1D75064 VA: 0x1D75064
	public void set_RNG(RandomNumberGenerator value) { }

	// RVA: 0x1D7506C Offset: 0x1D7506C VA: 0x1D7506C Slot: 6
	public override byte[] DecryptKeyExchange(byte[] rgbIn) { }

	// RVA: 0x1D7518C Offset: 0x1D7518C VA: 0x1D7518C Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC96C0 Offset: 0xBC96C0 VA: 0xBC96C0
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 758
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18

	// Properties
	public RandomNumberGenerator Rng { get; set; }
	public override string Parameters { get; }

	// Methods

	// RVA: 0x1D7525C Offset: 0x1D7525C VA: 0x1D7525C
	public void .ctor() { }

	// RVA: 0x1D73E48 Offset: 0x1D73E48 VA: 0x1D73E48
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x1D75378 Offset: 0x1D75378 VA: 0x1D75378
	public RandomNumberGenerator get_Rng() { }

	// RVA: 0x1D75380 Offset: 0x1D75380 VA: 0x1D75380
	public void set_Rng(RandomNumberGenerator value) { }

	// RVA: 0x1D75388 Offset: 0x1D75388 VA: 0x1D75388 Slot: 4
	public override string get_Parameters() { }

	// RVA: 0x1D753D0 Offset: 0x1D753D0 VA: 0x1D753D0 Slot: 5
	public override byte[] CreateKeyExchange(byte[] rgbData) { }

	// RVA: 0x1D75500 Offset: 0x1D75500 VA: 0x1D75500 Slot: 6
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType) { }

	// RVA: 0x1D75264 Offset: 0x1D75264 VA: 0x1D75264
	private void SetRSAKey(AsymmetricAlgorithm key) { }

	// RVA: 0x1D7550C Offset: 0x1D7550C VA: 0x1D7550C Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC96D4 Offset: 0xBC96D4 VA: 0xBC96D4
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 759
{
	// Fields
	private RSA rsa; // 0x10
	private string hashName; // 0x18

	// Methods

	// RVA: 0x1D755C0 Offset: 0x1D755C0 VA: 0x1D755C0
	public void .ctor() { }

	// RVA: 0x1D755C8 Offset: 0x1D755C8 VA: 0x1D755C8
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x1D75600 Offset: 0x1D75600 VA: 0x1D75600 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x1D75698 Offset: 0x1D75698 VA: 0x1D75698 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }

	// RVA: 0x1D757AC Offset: 0x1D757AC VA: 0x1D757AC Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC96E8 Offset: 0xBC96E8 VA: 0xBC96E8
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 760
{
	// Fields
	private RSA rsa; // 0x10
	private HashAlgorithm hash; // 0x18

	// Methods

	// RVA: 0x1D7590C Offset: 0x1D7590C VA: 0x1D7590C
	public void .ctor() { }

	// RVA: 0x1D75914 Offset: 0x1D75914 VA: 0x1D75914
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x1D7594C Offset: 0x1D7594C VA: 0x1D7594C Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x1D75A78 Offset: 0x1D75A78 VA: 0x1D75A78 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x1D75AA0 Offset: 0x1D75AA0 VA: 0x1D75AA0 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC96FC Offset: 0xBC96FC VA: 0xBC96FC
[Serializable]
public struct RSAParameters // TypeDefIndex: 761
{
	// Fields
	public byte[] P; // 0x0
	public byte[] Q; // 0x8
	public byte[] D; // 0x10
	public byte[] DP; // 0x18
	public byte[] DQ; // 0x20
	public byte[] InverseQ; // 0x28
	public byte[] Modulus; // 0x30
	public byte[] Exponent; // 0x38
}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator // TypeDefIndex: 762
{
	// Methods

	// RVA: 0x1D720FC Offset: 0x1D720FC VA: 0x1D720FC
	protected void .ctor() { }

	// RVA: 0x1D74F24 Offset: 0x1D74F24 VA: 0x1D74F24
	public static RandomNumberGenerator Create() { }

	// RVA: 0x1D75BB4 Offset: 0x1D75BB4 VA: 0x1D75BB4
	public static RandomNumberGenerator Create(string rngName) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void GetBytes(byte[] data);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetNonZeroBytes(byte[] data);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9710 Offset: 0xBC9710 VA: 0xBC9710
public class Rfc2898DeriveBytes : DeriveBytes // TypeDefIndex: 763
{
	// Fields
	private const int defaultIterations = 1000;
	private int _iteration; // 0x10
	private byte[] _salt; // 0x18
	private HMACSHA1 _hmac; // 0x20
	private byte[] _buffer; // 0x28
	private int _pos; // 0x30
	private int _f; // 0x34

	// Properties
	public int IterationCount { get; set; }
	public byte[] Salt { get; set; }

	// Methods

	// RVA: 0x1D75CA8 Offset: 0x1D75CA8 VA: 0x1D75CA8
	public void .ctor(string password, byte[] salt) { }

	// RVA: 0x1D75CB0 Offset: 0x1D75CB0 VA: 0x1D75CB0
	public void .ctor(string password, byte[] salt, int iterations) { }

	// RVA: 0x1D75FD4 Offset: 0x1D75FD4 VA: 0x1D75FD4
	public void .ctor(byte[] password, byte[] salt, int iterations) { }

	// RVA: 0x1D760BC Offset: 0x1D760BC VA: 0x1D760BC
	public void .ctor(string password, int saltSize) { }

	// RVA: 0x1D760C4 Offset: 0x1D760C4 VA: 0x1D760C4
	public void .ctor(string password, int saltSize, int iterations) { }

	// RVA: 0x1D76238 Offset: 0x1D76238 VA: 0x1D76238
	public int get_IterationCount() { }

	// RVA: 0x1D75F38 Offset: 0x1D75F38 VA: 0x1D75F38
	public void set_IterationCount(int value) { }

	// RVA: 0x1D76240 Offset: 0x1D76240 VA: 0x1D76240
	public byte[] get_Salt() { }

	// RVA: 0x1D75DE8 Offset: 0x1D75DE8 VA: 0x1D75DE8
	public void set_Salt(byte[] value) { }

	// RVA: 0x1D76318 Offset: 0x1D76318 VA: 0x1D76318
	private byte[] F(byte[] s, int c, int i) { }

	// RVA: 0x1D7652C Offset: 0x1D7652C VA: 0x1D7652C Slot: 4
	public override byte[] GetBytes(int cb) { }

	// RVA: 0x1D76754 Offset: 0x1D76754 VA: 0x1D76754 Slot: 5
	public override void Reset() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9724 Offset: 0xBC9724 VA: 0xBC9724
public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 764
{
	// Methods

	// RVA: 0x1D7675C Offset: 0x1D7675C VA: 0x1D7675C
	protected void .ctor() { }

	// RVA: 0x1D76904 Offset: 0x1D76904 VA: 0x1D76904
	public static Rijndael Create() { }

	// RVA: 0x1D7694C Offset: 0x1D7694C VA: 0x1D7694C
	public static Rijndael Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9738 Offset: 0xBC9738 VA: 0xBC9738
public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 765
{
	// Methods

	// RVA: 0x1D76A40 Offset: 0x1D76A40 VA: 0x1D76A40
	public void .ctor() { }

	// RVA: 0x1D76A44 Offset: 0x1D76A44 VA: 0x1D76A44 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x1D76A74 Offset: 0x1D76A74 VA: 0x1D76A74 Slot: 27
	public override void GenerateKey() { }

	// RVA: 0x1D76AA4 Offset: 0x1D76AA4 VA: 0x1D76AA4 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x1D76BD8 Offset: 0x1D76BD8 VA: 0x1D76BD8 Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }
}

// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform // TypeDefIndex: 766
{
	// Fields
	private uint[] expandedKey; // 0x58
	private int Nb; // 0x60
	private int Nk; // 0x64
	private int Nr; // 0x68
	private static readonly uint[] Rcon; // 0x0
	private static readonly byte[] SBox; // 0x8
	private static readonly byte[] iSBox; // 0x10
	private static readonly uint[] T0; // 0x18
	private static readonly uint[] T1; // 0x20
	private static readonly uint[] T2; // 0x28
	private static readonly uint[] T3; // 0x30
	private static readonly uint[] iT0; // 0x38
	private static readonly uint[] iT1; // 0x40
	private static readonly uint[] iT2; // 0x48
	private static readonly uint[] iT3; // 0x50

	// Methods

	// RVA: 0x1D76C54 Offset: 0x1D76C54 VA: 0x1D76C54
	public void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x1D77AC4 Offset: 0x1D77AC4 VA: 0x1D77AC4
	private static void .cctor() { }

	// RVA: 0x1D77754 Offset: 0x1D77754 VA: 0x1D77754
	public void Clear() { }

	// RVA: 0x1D77D30 Offset: 0x1D77D30 VA: 0x1D77D30 Slot: 17
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x1D77948 Offset: 0x1D77948 VA: 0x1D77948
	private uint SubByte(uint a) { }

	// RVA: 0x1D77D9C Offset: 0x1D77D9C VA: 0x1D77D9C
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x1D7D034 Offset: 0x1D7D034 VA: 0x1D7D034
	private void Encrypt192(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x1D854B4 Offset: 0x1D854B4 VA: 0x1D854B4
	private void Encrypt256(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x1D8F90C Offset: 0x1D8F90C VA: 0x1D8F90C
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x1D94B68 Offset: 0x1D94B68 VA: 0x1D94B68
	private void Decrypt192(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0x1D9C9F0 Offset: 0x1D9C9F0 VA: 0x1D9C9F0
	private void Decrypt256(byte[] indata, byte[] outdata, uint[] ekey) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC974C Offset: 0xBC974C VA: 0xBC974C
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform // TypeDefIndex: 767
{
	// Fields
	private RijndaelTransform _st; // 0x10
	private int _bs; // 0x18

	// Properties
	public int BlockSizeValue { get; }
	public bool CanTransformMultipleBlocks { get; }
	public bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x1D76B20 Offset: 0x1D76B20 VA: 0x1D76B20
	internal void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x1D7771C Offset: 0x1D7771C VA: 0x1D7771C Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1D77764 Offset: 0x1D77764 VA: 0x1D77764
	public int get_BlockSizeValue() { }

	// RVA: 0x1D7776C Offset: 0x1D7776C VA: 0x1D7776C Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x1D777A0 Offset: 0x1D777A0 VA: 0x1D777A0 Slot: 5
	public bool get_CanReuseTransform() { }

	// RVA: 0x1D777D4 Offset: 0x1D777D4 VA: 0x1D777D4 Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0x1D7780C Offset: 0x1D7780C VA: 0x1D7780C Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0x1D77844 Offset: 0x1D77844 VA: 0x1D77844
	public void Clear() { }

	[MonoTODOAttribute] // RVA: 0xBCD704 Offset: 0xBCD704 VA: 0xBCD704
	// RVA: 0x1D7787C Offset: 0x1D7787C VA: 0x1D7787C
	public void Reset() { }

	// RVA: 0x1D77880 Offset: 0x1D77880 VA: 0x1D77880 Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x1D778F0 Offset: 0x1D778F0 VA: 0x1D778F0 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9760 Offset: 0xBC9760 VA: 0xBC9760
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 768
{
	// Methods

	// RVA: 0x241DA20 Offset: 0x241DA20 VA: 0x241DA20
	protected void .ctor() { }

	// RVA: 0x241DA4C Offset: 0x241DA4C VA: 0x241DA4C
	public static SHA1 Create() { }

	// RVA: 0x241DA94 Offset: 0x241DA94 VA: 0x241DA94
	public static SHA1 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 769
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64;
	private const int HASH_SIZE_BYTES = 20;
	private uint[] _H; // 0x10
	private ulong count; // 0x18
	private byte[] _ProcessingBuffer; // 0x20
	private int _ProcessingBufferCount; // 0x28
	private uint[] buff; // 0x30

	// Methods

	// RVA: 0x241DBF8 Offset: 0x241DBF8 VA: 0x241DBF8
	public void .ctor() { }

	// RVA: 0x241DD64 Offset: 0x241DD64 VA: 0x241DD64
	public void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x241DE98 Offset: 0x241DE98 VA: 0x241DE98
	public byte[] HashFinal() { }

	// RVA: 0x241DFE8 Offset: 0x241DFE8 VA: 0x241DFE8
	public void Initialize() { }

	// RVA: 0x241E120 Offset: 0x241E120 VA: 0x241E120
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset) { }

	// RVA: 0x241EBD8 Offset: 0x241EBD8 VA: 0x241EBD8
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset) { }

	// RVA: 0x241FA24 Offset: 0x241FA24 VA: 0x241FA24
	private static void FillBuff(uint[] buff) { }

	// RVA: 0x241E99C Offset: 0x241E99C VA: 0x241E99C
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x24200AC Offset: 0x24200AC VA: 0x24200AC
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9774 Offset: 0xBC9774 VA: 0xBC9774
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 770
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Methods

	// RVA: 0x241DB88 Offset: 0x241DB88 VA: 0x241DB88
	public void .ctor() { }

	// RVA: 0x241DC88 Offset: 0x241DC88 VA: 0x241DC88 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x241DD04 Offset: 0x241DD04 VA: 0x241DD04 Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0x241DD10 Offset: 0x241DD10 VA: 0x241DD10 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x241DE68 Offset: 0x241DE68 VA: 0x241DE68 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x241DFBC Offset: 0x241DFBC VA: 0x241DFBC Slot: 17
	public override void Initialize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9788 Offset: 0xBC9788 VA: 0xBC9788
public class SHA1Managed : SHA1 // TypeDefIndex: 771
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Methods

	// RVA: 0x2420264 Offset: 0x2420264 VA: 0x2420264
	public void .ctor() { }

	// RVA: 0x24202D4 Offset: 0x24202D4 VA: 0x24202D4 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x2420328 Offset: 0x2420328 VA: 0x2420328 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x2420358 Offset: 0x2420358 VA: 0x2420358 Slot: 17
	public override void Initialize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC979C Offset: 0xBC979C VA: 0xBC979C
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 772
{
	// Methods

	// RVA: 0x2420384 Offset: 0x2420384 VA: 0x2420384
	protected void .ctor() { }

	// RVA: 0x24203B0 Offset: 0x24203B0 VA: 0x24203B0
	public static SHA256 Create() { }

	// RVA: 0x24203F8 Offset: 0x24203F8 VA: 0x24203F8
	public static SHA256 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC97B0 Offset: 0xBC97B0 VA: 0xBC97B0
public class SHA256Managed : SHA256 // TypeDefIndex: 773
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64;
	private const int HASH_SIZE_BYTES = 32;
	private uint[] _H; // 0x28
	private ulong count; // 0x30
	private byte[] _ProcessingBuffer; // 0x38
	private int _ProcessingBufferCount; // 0x40
	private uint[] buff; // 0x48

	// Methods

	// RVA: 0x24204EC Offset: 0x24204EC VA: 0x24204EC
	public void .ctor() { }

	// RVA: 0x2420590 Offset: 0x2420590 VA: 0x2420590 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x2420DF0 Offset: 0x2420DF0 VA: 0x2420DF0 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x2421140 Offset: 0x2421140 VA: 0x2421140 Slot: 17
	public override void Initialize() { }

	// RVA: 0x242069C Offset: 0x242069C VA: 0x242069C
	private void ProcessBlock(byte[] inputBuffer, int inputOffset) { }

	// RVA: 0x2420F18 Offset: 0x2420F18 VA: 0x2420F18
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x2421320 Offset: 0x2421320 VA: 0x2421320
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC97C4 Offset: 0xBC97C4 VA: 0xBC97C4
public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 774
{
	// Methods

	// RVA: 0x24214D8 Offset: 0x24214D8 VA: 0x24214D8
	protected void .ctor() { }

	// RVA: 0x2421504 Offset: 0x2421504 VA: 0x2421504
	public static SHA384 Create() { }

	// RVA: 0x242154C Offset: 0x242154C VA: 0x242154C
	public static SHA384 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC97D8 Offset: 0xBC97D8 VA: 0xBC97D8
public class SHA384Managed : SHA384 // TypeDefIndex: 775
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x30
	private ulong byteCount1; // 0x38
	private ulong byteCount2; // 0x40
	private ulong H1; // 0x48
	private ulong H2; // 0x50
	private ulong H3; // 0x58
	private ulong H4; // 0x60
	private ulong H5; // 0x68
	private ulong H6; // 0x70
	private ulong H7; // 0x78
	private ulong H8; // 0x80
	private ulong[] W; // 0x88
	private int wOff; // 0x90

	// Methods

	// RVA: 0x2421640 Offset: 0x2421640 VA: 0x2421640
	public void .ctor() { }

	// RVA: 0x24216F4 Offset: 0x24216F4 VA: 0x24216F4
	private void Initialize(bool reuse) { }

	// RVA: 0x2421818 Offset: 0x2421818 VA: 0x2421818 Slot: 17
	public override void Initialize() { }

	// RVA: 0x2421820 Offset: 0x2421820 VA: 0x2421820 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x2421CB0 Offset: 0x2421CB0 VA: 0x2421CB0 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x24219B8 Offset: 0x24219B8 VA: 0x24219B8
	private void update(byte input) { }

	// RVA: 0x2421A60 Offset: 0x2421A60 VA: 0x2421A60
	private void processWord(byte[] input, int inOff) { }

	// RVA: 0x2422214 Offset: 0x2422214 VA: 0x2422214
	private void unpackWord(ulong word, byte[] output, int outOff) { }

	// RVA: 0x2421DDC Offset: 0x2421DDC VA: 0x2421DDC
	private void adjustByteCounts() { }

	// RVA: 0x2421DFC Offset: 0x2421DFC VA: 0x2421DFC
	private void processLength(ulong lowW, ulong hiW) { }

	// RVA: 0x2421E9C Offset: 0x2421E9C VA: 0x2421E9C
	private void processBlock() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC97EC Offset: 0xBC97EC VA: 0xBC97EC
public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 776
{
	// Methods

	// RVA: 0x24223C4 Offset: 0x24223C4 VA: 0x24223C4
	protected void .ctor() { }

	// RVA: 0x24223F0 Offset: 0x24223F0 VA: 0x24223F0
	public static SHA512 Create() { }

	// RVA: 0x2422438 Offset: 0x2422438 VA: 0x2422438
	public static SHA512 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9800 Offset: 0xBC9800 VA: 0xBC9800
public class SHA512Managed : SHA512 // TypeDefIndex: 777
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x30
	private ulong byteCount1; // 0x38
	private ulong byteCount2; // 0x40
	private ulong H1; // 0x48
	private ulong H2; // 0x50
	private ulong H3; // 0x58
	private ulong H4; // 0x60
	private ulong H5; // 0x68
	private ulong H6; // 0x70
	private ulong H7; // 0x78
	private ulong H8; // 0x80
	private ulong[] W; // 0x88
	private int wOff; // 0x90

	// Methods

	// RVA: 0x242252C Offset: 0x242252C VA: 0x242252C
	public void .ctor() { }

	// RVA: 0x24225E0 Offset: 0x24225E0 VA: 0x24225E0
	private void Initialize(bool reuse) { }

	// RVA: 0x2422704 Offset: 0x2422704 VA: 0x2422704 Slot: 17
	public override void Initialize() { }

	// RVA: 0x242270C Offset: 0x242270C VA: 0x242270C Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x2422B9C Offset: 0x2422B9C VA: 0x2422B9C Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x24228A4 Offset: 0x24228A4 VA: 0x24228A4
	private void update(byte input) { }

	// RVA: 0x242294C Offset: 0x242294C VA: 0x242294C
	private void processWord(byte[] input, int inOff) { }

	// RVA: 0x2423154 Offset: 0x2423154 VA: 0x2423154
	private void unpackWord(ulong word, byte[] output, int outOff) { }

	// RVA: 0x2422CE8 Offset: 0x2422CE8 VA: 0x2422CE8
	private void adjustByteCounts() { }

	// RVA: 0x2422D08 Offset: 0x2422D08 VA: 0x2422D08
	private void processLength(ulong lowW, ulong hiW) { }

	// RVA: 0x2422DA8 Offset: 0x2422DA8 VA: 0x2422DA8
	private void processBlock() { }

	// RVA: 0x2423368 Offset: 0x2423368 VA: 0x2423368
	private ulong rotateRight(ulong x, int n) { }

	// RVA: 0x2423334 Offset: 0x2423334 VA: 0x2423334
	private ulong Ch(ulong x, ulong y, ulong z) { }

	// RVA: 0x2423354 Offset: 0x2423354 VA: 0x2423354
	private ulong Maj(ulong x, ulong y, ulong z) { }

	// RVA: 0x2423344 Offset: 0x2423344 VA: 0x2423344
	private ulong Sum0(ulong x) { }

	// RVA: 0x2423324 Offset: 0x2423324 VA: 0x2423324
	private ulong Sum1(ulong x) { }

	// RVA: 0x2423314 Offset: 0x2423314 VA: 0x2423314
	private ulong Sigma0(ulong x) { }

	// RVA: 0x2423304 Offset: 0x2423304 VA: 0x2423304
	private ulong Sigma1(ulong x) { }
}

// Namespace: System.Security.Cryptography
internal static class SHAConstants // TypeDefIndex: 778
{
	// Fields
	public static readonly uint[] K1; // 0x0
	public static readonly ulong[] K2; // 0x8

	// Methods

	// RVA: 0x2423374 Offset: 0x2423374 VA: 0x2423374
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9814 Offset: 0xBC9814 VA: 0xBC9814
public class SignatureDescription // TypeDefIndex: 779
{
	// Fields
	private string _DeformatterAlgorithm; // 0x10
	private string _DigestAlgorithm; // 0x18
	private string _FormatterAlgorithm; // 0x20
	private string _KeyAlgorithm; // 0x28

	// Properties
	public string DeformatterAlgorithm { get; set; }
	public string DigestAlgorithm { get; set; }
	public string FormatterAlgorithm { get; set; }
	public string KeyAlgorithm { get; set; }

	// Methods

	// RVA: 0x2423428 Offset: 0x2423428 VA: 0x2423428
	public void .ctor() { }

	// RVA: 0x2423430 Offset: 0x2423430 VA: 0x2423430
	public void .ctor(SecurityElement el) { }

	// RVA: 0x242358C Offset: 0x242358C VA: 0x242358C
	public string get_DeformatterAlgorithm() { }

	// RVA: 0x2423594 Offset: 0x2423594 VA: 0x2423594
	public void set_DeformatterAlgorithm(string value) { }

	// RVA: 0x242359C Offset: 0x242359C VA: 0x242359C
	public string get_DigestAlgorithm() { }

	// RVA: 0x24235A4 Offset: 0x24235A4 VA: 0x24235A4
	public void set_DigestAlgorithm(string value) { }

	// RVA: 0x24235AC Offset: 0x24235AC VA: 0x24235AC
	public string get_FormatterAlgorithm() { }

	// RVA: 0x24235B4 Offset: 0x24235B4 VA: 0x24235B4
	public void set_FormatterAlgorithm(string value) { }

	// RVA: 0x24235BC Offset: 0x24235BC VA: 0x24235BC
	public string get_KeyAlgorithm() { }

	// RVA: 0x24235C4 Offset: 0x24235C4 VA: 0x24235C4
	public void set_KeyAlgorithm(string value) { }

	// RVA: 0x24235CC Offset: 0x24235CC VA: 0x24235CC Slot: 4
	public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key) { }

	// RVA: 0x242376C Offset: 0x242376C VA: 0x242376C Slot: 5
	public virtual HashAlgorithm CreateDigest() { }

	// RVA: 0x24238AC Offset: 0x24238AC VA: 0x24238AC Slot: 6
	public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription // TypeDefIndex: 780
{
	// Methods

	// RVA: 0x23A387C Offset: 0x23A387C VA: 0x23A387C
	public void .ctor() { }
}

// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription // TypeDefIndex: 781
{
	// Methods

	// RVA: 0x1D75510 Offset: 0x1D75510 VA: 0x1D75510
	public void .ctor() { }

	// RVA: 0x1D755B8 Offset: 0x1D755B8 VA: 0x1D755B8 Slot: 4
	public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9828 Offset: 0xBC9828 VA: 0xBC9828
public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 782
{
	// Fields
	protected int BlockSizeValue; // 0x10
	protected byte[] IVValue; // 0x18
	protected int KeySizeValue; // 0x20
	protected byte[] KeyValue; // 0x28
	protected KeySizes[] LegalBlockSizesValue; // 0x30
	protected KeySizes[] LegalKeySizesValue; // 0x38
	protected int FeedbackSizeValue; // 0x40
	protected CipherMode ModeValue; // 0x44
	protected PaddingMode PaddingValue; // 0x48
	private bool m_disposed; // 0x4C

	// Properties
	public virtual int BlockSize { get; set; }
	public virtual int FeedbackSize { get; set; }
	public virtual byte[] IV { get; set; }
	public virtual byte[] Key { get; set; }
	public virtual int KeySize { get; set; }
	public virtual KeySizes[] LegalBlockSizes { get; }
	public virtual KeySizes[] LegalKeySizes { get; }
	public virtual CipherMode Mode { get; set; }
	public virtual PaddingMode Padding { get; set; }

	// Methods

	// RVA: 0x2423A4C Offset: 0x2423A4C VA: 0x2423A4C
	protected void .ctor() { }

	// RVA: 0x2423A80 Offset: 0x2423A80 VA: 0x2423A80 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2423AB4 Offset: 0x2423AB4 VA: 0x2423AB4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2423B34 Offset: 0x2423B34 VA: 0x2423B34
	public void Clear() { }

	// RVA: 0x2423B44 Offset: 0x2423B44 VA: 0x2423B44 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2423B8C Offset: 0x2423B8C VA: 0x2423B8C Slot: 6
	public virtual int get_BlockSize() { }

	// RVA: 0x2423B94 Offset: 0x2423B94 VA: 0x2423B94 Slot: 7
	public virtual void set_BlockSize(int value) { }

	// RVA: 0x2423C60 Offset: 0x2423C60 VA: 0x2423C60 Slot: 8
	public virtual int get_FeedbackSize() { }

	// RVA: 0x2423C68 Offset: 0x2423C68 VA: 0x2423C68 Slot: 9
	public virtual void set_FeedbackSize(int value) { }

	// RVA: 0x2423D24 Offset: 0x2423D24 VA: 0x2423D24 Slot: 10
	public virtual byte[] get_IV() { }

	// RVA: 0x2423E18 Offset: 0x2423E18 VA: 0x2423E18 Slot: 11
	public virtual void set_IV(byte[] value) { }

	// RVA: 0x2423F90 Offset: 0x2423F90 VA: 0x2423F90 Slot: 12
	public virtual byte[] get_Key() { }

	// RVA: 0x2424084 Offset: 0x2424084 VA: 0x2424084 Slot: 13
	public virtual void set_Key(byte[] value) { }

	// RVA: 0x2424208 Offset: 0x2424208 VA: 0x2424208 Slot: 14
	public virtual int get_KeySize() { }

	// RVA: 0x2424210 Offset: 0x2424210 VA: 0x2424210 Slot: 15
	public virtual void set_KeySize(int value) { }

	// RVA: 0x24242D0 Offset: 0x24242D0 VA: 0x24242D0 Slot: 16
	public virtual KeySizes[] get_LegalBlockSizes() { }

	// RVA: 0x24242D8 Offset: 0x24242D8 VA: 0x24242D8 Slot: 17
	public virtual KeySizes[] get_LegalKeySizes() { }

	// RVA: 0x24242E0 Offset: 0x24242E0 VA: 0x24242E0 Slot: 18
	public virtual CipherMode get_Mode() { }

	// RVA: 0x24242E8 Offset: 0x24242E8 VA: 0x24242E8 Slot: 19
	public virtual void set_Mode(CipherMode value) { }

	// RVA: 0x242441C Offset: 0x242441C VA: 0x242441C Slot: 20
	public virtual PaddingMode get_Padding() { }

	// RVA: 0x2424424 Offset: 0x2424424 VA: 0x2424424 Slot: 21
	public virtual void set_Padding(PaddingMode value) { }

	// RVA: 0x2424558 Offset: 0x2424558 VA: 0x2424558 Slot: 22
	public virtual ICryptoTransform CreateDecryptor() { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);

	// RVA: 0x24245AC Offset: 0x24245AC VA: 0x24245AC Slot: 24
	public virtual ICryptoTransform CreateEncryptor() { }

	// RVA: -1 Offset: -1 Slot: 25
	public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);

	// RVA: -1 Offset: -1 Slot: 26
	public abstract void GenerateIV();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract void GenerateKey();

	// RVA: 0x2424600 Offset: 0x2424600 VA: 0x2424600
	public bool ValidKeySize(int bitLength) { }

	// RVA: 0x242460C Offset: 0x242460C VA: 0x242460C
	public static SymmetricAlgorithm Create() { }

	// RVA: 0x2424654 Offset: 0x2424654 VA: 0x2424654
	public static SymmetricAlgorithm Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC983C Offset: 0xBC983C VA: 0xBC983C
public class ToBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 783
{
	// Fields
	private const int inputBlockSize = 3;
	private const int outputBlockSize = 4;
	private bool m_disposed; // 0x10

	// Properties
	public bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x2424748 Offset: 0x2424748 VA: 0x2424748
	public void .ctor() { }

	// RVA: 0x2424750 Offset: 0x2424750 VA: 0x2424750 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x2424784 Offset: 0x2424784 VA: 0x2424784 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2424804 Offset: 0x2424804 VA: 0x2424804 Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x242480C Offset: 0x242480C VA: 0x242480C Slot: 11
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x2424814 Offset: 0x2424814 VA: 0x2424814 Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0x242481C Offset: 0x242481C VA: 0x242481C Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0x2424824 Offset: 0x2424824 VA: 0x2424824
	public void Clear() { }

	// RVA: 0x2424834 Offset: 0x2424834 VA: 0x2424834 Slot: 12
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x242484C Offset: 0x242484C VA: 0x242484C Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }
