
	// RVA: 0xE4876C Offset: 0xE4876C VA: 0xE4876C
	public RandomNumberGenerator get_Rng() { }

	// RVA: 0xE48774 Offset: 0xE48774 VA: 0xE48774
	public void set_Rng(RandomNumberGenerator value) { }

	// RVA: 0xE4877C Offset: 0xE4877C VA: 0xE4877C Slot: 5
	public override byte[] CreateKeyExchange(byte[] rgbData) { }

	// RVA: 0xE488CC Offset: 0xE488CC VA: 0xE488CC Slot: 6
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType) { }

	// RVA: 0xE488D8 Offset: 0xE488D8 VA: 0xE488D8 Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC357D4 Offset: 0xC357D4 VA: 0xC357D4
public class RSAPKCS1KeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 757
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18

	// Properties
	public override string Parameters { get; set; }
	public RandomNumberGenerator RNG { get; set; }

	// Methods

	// RVA: 0xE489A8 Offset: 0xE489A8 VA: 0xE489A8
	public void .ctor() { }

	// RVA: 0xE47590 Offset: 0xE47590 VA: 0xE47590
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0xE489B0 Offset: 0xE489B0 VA: 0xE489B0 Slot: 4
	public override string get_Parameters() { }

	// RVA: 0xE489B8 Offset: 0xE489B8 VA: 0xE489B8 Slot: 5
	public override void set_Parameters(string value) { }

	// RVA: 0xE489BC Offset: 0xE489BC VA: 0xE489BC
	public RandomNumberGenerator get_RNG() { }

	// RVA: 0xE489C4 Offset: 0xE489C4 VA: 0xE489C4
	public void set_RNG(RandomNumberGenerator value) { }

	// RVA: 0xE489CC Offset: 0xE489CC VA: 0xE489CC Slot: 6
	public override byte[] DecryptKeyExchange(byte[] rgbIn) { }

	// RVA: 0xE48AEC Offset: 0xE48AEC VA: 0xE48AEC Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC357E8 Offset: 0xC357E8 VA: 0xC357E8
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 758
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18

	// Properties
	public RandomNumberGenerator Rng { get; set; }
	public override string Parameters { get; }

	// Methods

	// RVA: 0xE48BBC Offset: 0xE48BBC VA: 0xE48BBC
	public void .ctor() { }

	// RVA: 0xE477A8 Offset: 0xE477A8 VA: 0xE477A8
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0xE48CD8 Offset: 0xE48CD8 VA: 0xE48CD8
	public RandomNumberGenerator get_Rng() { }

	// RVA: 0xE48CE0 Offset: 0xE48CE0 VA: 0xE48CE0
	public void set_Rng(RandomNumberGenerator value) { }

	// RVA: 0xE48CE8 Offset: 0xE48CE8 VA: 0xE48CE8 Slot: 4
	public override string get_Parameters() { }

	// RVA: 0xE48D30 Offset: 0xE48D30 VA: 0xE48D30 Slot: 5
	public override byte[] CreateKeyExchange(byte[] rgbData) { }

	// RVA: 0xE48E60 Offset: 0xE48E60 VA: 0xE48E60 Slot: 6
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType) { }

	// RVA: 0xE48BC4 Offset: 0xE48BC4 VA: 0xE48BC4
	private void SetRSAKey(AsymmetricAlgorithm key) { }

	// RVA: 0xE48E6C Offset: 0xE48E6C VA: 0xE48E6C Slot: 7
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC357FC Offset: 0xC357FC VA: 0xC357FC
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 759
{
	// Fields
	private RSA rsa; // 0x10
	private string hashName; // 0x18

	// Methods

	// RVA: 0xE48F20 Offset: 0xE48F20 VA: 0xE48F20
	public void .ctor() { }

	// RVA: 0xE48F28 Offset: 0xE48F28 VA: 0xE48F28
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0xE48F60 Offset: 0xE48F60 VA: 0xE48F60 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0xE48FF8 Offset: 0xE48FF8 VA: 0xE48FF8 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }

	// RVA: 0xE4910C Offset: 0xE4910C VA: 0xE4910C Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35810 Offset: 0xC35810 VA: 0xC35810
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 760
{
	// Fields
	private RSA rsa; // 0x10
	private HashAlgorithm hash; // 0x18

	// Methods

	// RVA: 0xE4926C Offset: 0xE4926C VA: 0xE4926C
	public void .ctor() { }

	// RVA: 0xE49274 Offset: 0xE49274 VA: 0xE49274
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0xE492AC Offset: 0xE492AC VA: 0xE492AC Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0xE493D8 Offset: 0xE493D8 VA: 0xE493D8 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0xE49400 Offset: 0xE49400 VA: 0xE49400 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35824 Offset: 0xC35824 VA: 0xC35824
[Serializable]
public struct RSAParameters // TypeDefIndex: 761
{
	// Fields
	public byte[] P; // 0x0
	public byte[] Q; // 0x8
	public byte[] D; // 0x10
	public byte[] DP; // 0x18
	public byte[] DQ; // 0x20
	public byte[] InverseQ; // 0x28
	public byte[] Modulus; // 0x30
	public byte[] Exponent; // 0x38
}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator // TypeDefIndex: 762
{
	// Methods

	// RVA: 0xE45A5C Offset: 0xE45A5C VA: 0xE45A5C
	protected void .ctor() { }

	// RVA: 0xE48884 Offset: 0xE48884 VA: 0xE48884
	public static RandomNumberGenerator Create() { }

	// RVA: 0xE49514 Offset: 0xE49514 VA: 0xE49514
	public static RandomNumberGenerator Create(string rngName) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void GetBytes(byte[] data);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void GetNonZeroBytes(byte[] data);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35838 Offset: 0xC35838 VA: 0xC35838
public class Rfc2898DeriveBytes : DeriveBytes // TypeDefIndex: 763
{
	// Fields
	private const int defaultIterations = 1000;
	private int _iteration; // 0x10
	private byte[] _salt; // 0x18
	private HMACSHA1 _hmac; // 0x20
	private byte[] _buffer; // 0x28
	private int _pos; // 0x30
	private int _f; // 0x34

	// Properties
	public int IterationCount { get; set; }
	public byte[] Salt { get; set; }

	// Methods

	// RVA: 0xE49608 Offset: 0xE49608 VA: 0xE49608
	public void .ctor(string password, byte[] salt) { }

	// RVA: 0xE49610 Offset: 0xE49610 VA: 0xE49610
	public void .ctor(string password, byte[] salt, int iterations) { }

	// RVA: 0xE49934 Offset: 0xE49934 VA: 0xE49934
	public void .ctor(byte[] password, byte[] salt, int iterations) { }

	// RVA: 0xE49A1C Offset: 0xE49A1C VA: 0xE49A1C
	public void .ctor(string password, int saltSize) { }

	// RVA: 0xE49A24 Offset: 0xE49A24 VA: 0xE49A24
	public void .ctor(string password, int saltSize, int iterations) { }

	// RVA: 0xE49B98 Offset: 0xE49B98 VA: 0xE49B98
	public int get_IterationCount() { }

	// RVA: 0xE49898 Offset: 0xE49898 VA: 0xE49898
	public void set_IterationCount(int value) { }

	// RVA: 0xE49BA0 Offset: 0xE49BA0 VA: 0xE49BA0
	public byte[] get_Salt() { }

	// RVA: 0xE49748 Offset: 0xE49748 VA: 0xE49748
	public void set_Salt(byte[] value) { }

	// RVA: 0xE49C78 Offset: 0xE49C78 VA: 0xE49C78
	private byte[] F(byte[] s, int c, int i) { }

	// RVA: 0xE49E8C Offset: 0xE49E8C VA: 0xE49E8C Slot: 4
	public override byte[] GetBytes(int cb) { }

	// RVA: 0xE4A0B4 Offset: 0xE4A0B4 VA: 0xE4A0B4 Slot: 5
	public override void Reset() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3584C Offset: 0xC3584C VA: 0xC3584C
public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 764
{
	// Methods

	// RVA: 0xE4A0BC Offset: 0xE4A0BC VA: 0xE4A0BC
	protected void .ctor() { }

	// RVA: 0xE4A264 Offset: 0xE4A264 VA: 0xE4A264
	public static Rijndael Create() { }

	// RVA: 0xE4A2AC Offset: 0xE4A2AC VA: 0xE4A2AC
	public static Rijndael Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35860 Offset: 0xC35860 VA: 0xC35860
public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 765
{
	// Methods

	// RVA: 0xE4A3A0 Offset: 0xE4A3A0 VA: 0xE4A3A0
	public void .ctor() { }

	// RVA: 0xE4A3A4 Offset: 0xE4A3A4 VA: 0xE4A3A4 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0xE4A3D4 Offset: 0xE4A3D4 VA: 0xE4A3D4 Slot: 27
	public override void GenerateKey() { }

	// RVA: 0xE4A404 Offset: 0xE4A404 VA: 0xE4A404 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0xE4A538 Offset: 0xE4A538 VA: 0xE4A538 Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }
}

// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform // TypeDefIndex: 766
{
	// Fields
	private uint[] expandedKey; // 0x58
	private int Nb; // 0x60
	private int Nk; // 0x64
	private int Nr; // 0x68
	private static readonly uint[] Rcon; // 0x0
	private static readonly byte[] SBox; // 0x8
	private static readonly byte[] iSBox; // 0x10
	private static readonly uint[] T0; // 0x18
	private static readonly uint[] T1; // 0x20
	private static readonly uint[] T2; // 0x28
	private static readonly uint[] T3; // 0x30
	private static readonly uint[] iT0; // 0x38
	private static readonly uint[] iT1; // 0x40
	private static readonly uint[] iT2; // 0x48
	private static readonly uint[] iT3; // 0x50

	// Methods

	// RVA: 0xE4A5B4 Offset: 0xE4A5B4 VA: 0xE4A5B4
	public void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0xE4B424 Offset: 0xE4B424 VA: 0xE4B424
	private static void .cctor() { }

	// RVA: 0xE4B0B4 Offset: 0xE4B0B4 VA: 0xE4B0B4
	public void Clear() { }

	// RVA: 0xE4B690 Offset: 0xE4B690 VA: 0xE4B690 Slot: 17
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0xE4B2A8 Offset: 0xE4B2A8 VA: 0xE4B2A8
	private uint SubByte(uint a) { }

	// RVA: 0xE4B6FC Offset: 0xE4B6FC VA: 0xE4B6FC
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0xE50994 Offset: 0xE50994 VA: 0xE50994
	private void Encrypt192(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0xE58E14 Offset: 0xE58E14 VA: 0xE58E14
	private void Encrypt256(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0xE6326C Offset: 0xE6326C VA: 0xE6326C
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0xE684C8 Offset: 0xE684C8 VA: 0xE684C8
	private void Decrypt192(byte[] indata, byte[] outdata, uint[] ekey) { }

	// RVA: 0xE70350 Offset: 0xE70350 VA: 0xE70350
	private void Decrypt256(byte[] indata, byte[] outdata, uint[] ekey) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35874 Offset: 0xC35874 VA: 0xC35874
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform // TypeDefIndex: 767
{
	// Fields
	private RijndaelTransform _st; // 0x10
	private int _bs; // 0x18

	// Properties
	public int BlockSizeValue { get; }
	public bool CanTransformMultipleBlocks { get; }
	public bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0xE4A480 Offset: 0xE4A480 VA: 0xE4A480
	internal void .ctor(Rijndael algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0xE4B07C Offset: 0xE4B07C VA: 0xE4B07C Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0xE4B0C4 Offset: 0xE4B0C4 VA: 0xE4B0C4
	public int get_BlockSizeValue() { }

	// RVA: 0xE4B0CC Offset: 0xE4B0CC VA: 0xE4B0CC Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0xE4B100 Offset: 0xE4B100 VA: 0xE4B100 Slot: 5
	public bool get_CanReuseTransform() { }

	// RVA: 0xE4B134 Offset: 0xE4B134 VA: 0xE4B134 Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0xE4B16C Offset: 0xE4B16C VA: 0xE4B16C Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0xE4B1A4 Offset: 0xE4B1A4 VA: 0xE4B1A4
	public void Clear() { }

	[MonoTODOAttribute] // RVA: 0xC3982C Offset: 0xC3982C VA: 0xC3982C
	// RVA: 0xE4B1DC Offset: 0xE4B1DC VA: 0xE4B1DC
	public void Reset() { }

	// RVA: 0xE4B1E0 Offset: 0xE4B1E0 VA: 0xE4B1E0 Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0xE4B250 Offset: 0xE4B250 VA: 0xE4B250 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35888 Offset: 0xC35888 VA: 0xC35888
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 768
{
	// Methods

	// RVA: 0x11C599C Offset: 0x11C599C VA: 0x11C599C
	protected void .ctor() { }

	// RVA: 0x11C59C8 Offset: 0x11C59C8 VA: 0x11C59C8
	public static SHA1 Create() { }

	// RVA: 0x11C5A10 Offset: 0x11C5A10 VA: 0x11C5A10
	public static SHA1 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 769
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64;
	private const int HASH_SIZE_BYTES = 20;
	private uint[] _H; // 0x10
	private ulong count; // 0x18
	private byte[] _ProcessingBuffer; // 0x20
	private int _ProcessingBufferCount; // 0x28
	private uint[] buff; // 0x30

	// Methods

	// RVA: 0x11C5B74 Offset: 0x11C5B74 VA: 0x11C5B74
	public void .ctor() { }

	// RVA: 0x11C5CE0 Offset: 0x11C5CE0 VA: 0x11C5CE0
	public void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x11C5E14 Offset: 0x11C5E14 VA: 0x11C5E14
	public byte[] HashFinal() { }

	// RVA: 0x11C5F64 Offset: 0x11C5F64 VA: 0x11C5F64
	public void Initialize() { }

	// RVA: 0x11C609C Offset: 0x11C609C VA: 0x11C609C
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset) { }

	// RVA: 0x11C6B54 Offset: 0x11C6B54 VA: 0x11C6B54
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset) { }

	// RVA: 0x11C79A0 Offset: 0x11C79A0 VA: 0x11C79A0
	private static void FillBuff(uint[] buff) { }

	// RVA: 0x11C6918 Offset: 0x11C6918 VA: 0x11C6918
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x11C8028 Offset: 0x11C8028 VA: 0x11C8028
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3589C Offset: 0xC3589C VA: 0xC3589C
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 770
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Methods

	// RVA: 0x11C5B04 Offset: 0x11C5B04 VA: 0x11C5B04
	public void .ctor() { }

	// RVA: 0x11C5C04 Offset: 0x11C5C04 VA: 0x11C5C04 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11C5C80 Offset: 0x11C5C80 VA: 0x11C5C80 Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0x11C5C8C Offset: 0x11C5C8C VA: 0x11C5C8C Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x11C5DE4 Offset: 0x11C5DE4 VA: 0x11C5DE4 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x11C5F38 Offset: 0x11C5F38 VA: 0x11C5F38 Slot: 17
	public override void Initialize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC358B0 Offset: 0xC358B0 VA: 0xC358B0
public class SHA1Managed : SHA1 // TypeDefIndex: 771
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Methods

	// RVA: 0x11C81E0 Offset: 0x11C81E0 VA: 0x11C81E0
	public void .ctor() { }

	// RVA: 0x11C8250 Offset: 0x11C8250 VA: 0x11C8250 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x11C82A4 Offset: 0x11C82A4 VA: 0x11C82A4 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x11C82D4 Offset: 0x11C82D4 VA: 0x11C82D4 Slot: 17
	public override void Initialize() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC358C4 Offset: 0xC358C4 VA: 0xC358C4
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 772
{
	// Methods

	// RVA: 0x11C8300 Offset: 0x11C8300 VA: 0x11C8300
	protected void .ctor() { }

	// RVA: 0x11C832C Offset: 0x11C832C VA: 0x11C832C
	public static SHA256 Create() { }

	// RVA: 0x11C8374 Offset: 0x11C8374 VA: 0x11C8374
	public static SHA256 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC358D8 Offset: 0xC358D8 VA: 0xC358D8
public class SHA256Managed : SHA256 // TypeDefIndex: 773
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64;
	private const int HASH_SIZE_BYTES = 32;
	private uint[] _H; // 0x28
	private ulong count; // 0x30
	private byte[] _ProcessingBuffer; // 0x38
	private int _ProcessingBufferCount; // 0x40
	private uint[] buff; // 0x48

	// Methods

	// RVA: 0x11C8468 Offset: 0x11C8468 VA: 0x11C8468
	public void .ctor() { }

	// RVA: 0x11C850C Offset: 0x11C850C VA: 0x11C850C Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x11C8D6C Offset: 0x11C8D6C VA: 0x11C8D6C Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x11C90BC Offset: 0x11C90BC VA: 0x11C90BC Slot: 17
	public override void Initialize() { }

	// RVA: 0x11C8618 Offset: 0x11C8618 VA: 0x11C8618
	private void ProcessBlock(byte[] inputBuffer, int inputOffset) { }

	// RVA: 0x11C8E94 Offset: 0x11C8E94 VA: 0x11C8E94
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x11C929C Offset: 0x11C929C VA: 0x11C929C
	internal void AddLength(ulong length, byte[] buffer, int position) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC358EC Offset: 0xC358EC VA: 0xC358EC
public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 774
{
	// Methods

	// RVA: 0x11C9454 Offset: 0x11C9454 VA: 0x11C9454
	protected void .ctor() { }

	// RVA: 0x11C9480 Offset: 0x11C9480 VA: 0x11C9480
	public static SHA384 Create() { }

	// RVA: 0x11C94C8 Offset: 0x11C94C8 VA: 0x11C94C8
	public static SHA384 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35900 Offset: 0xC35900 VA: 0xC35900
public class SHA384Managed : SHA384 // TypeDefIndex: 775
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x30
	private ulong byteCount1; // 0x38
	private ulong byteCount2; // 0x40
	private ulong H1; // 0x48
	private ulong H2; // 0x50
	private ulong H3; // 0x58
	private ulong H4; // 0x60
	private ulong H5; // 0x68
	private ulong H6; // 0x70
	private ulong H7; // 0x78
	private ulong H8; // 0x80
	private ulong[] W; // 0x88
	private int wOff; // 0x90

	// Methods

	// RVA: 0x11C95BC Offset: 0x11C95BC VA: 0x11C95BC
	public void .ctor() { }

	// RVA: 0x11C9670 Offset: 0x11C9670 VA: 0x11C9670
	private void Initialize(bool reuse) { }

	// RVA: 0x11C9794 Offset: 0x11C9794 VA: 0x11C9794 Slot: 17
	public override void Initialize() { }

	// RVA: 0x11C979C Offset: 0x11C979C VA: 0x11C979C Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x11C9C2C Offset: 0x11C9C2C VA: 0x11C9C2C Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x11C9934 Offset: 0x11C9934 VA: 0x11C9934
	private void update(byte input) { }

	// RVA: 0x11C99DC Offset: 0x11C99DC VA: 0x11C99DC
	private void processWord(byte[] input, int inOff) { }

	// RVA: 0x11CA190 Offset: 0x11CA190 VA: 0x11CA190
	private void unpackWord(ulong word, byte[] output, int outOff) { }

	// RVA: 0x11C9D58 Offset: 0x11C9D58 VA: 0x11C9D58
	private void adjustByteCounts() { }

	// RVA: 0x11C9D78 Offset: 0x11C9D78 VA: 0x11C9D78
	private void processLength(ulong lowW, ulong hiW) { }

	// RVA: 0x11C9E18 Offset: 0x11C9E18 VA: 0x11C9E18
	private void processBlock() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35914 Offset: 0xC35914 VA: 0xC35914
public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 776
{
	// Methods

	// RVA: 0x11CA340 Offset: 0x11CA340 VA: 0x11CA340
	protected void .ctor() { }

	// RVA: 0x11CA36C Offset: 0x11CA36C VA: 0x11CA36C
	public static SHA512 Create() { }

	// RVA: 0x11CA3B4 Offset: 0x11CA3B4 VA: 0x11CA3B4
	public static SHA512 Create(string hashName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35928 Offset: 0xC35928 VA: 0xC35928
public class SHA512Managed : SHA512 // TypeDefIndex: 777
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x30
	private ulong byteCount1; // 0x38
	private ulong byteCount2; // 0x40
	private ulong H1; // 0x48
	private ulong H2; // 0x50
	private ulong H3; // 0x58
	private ulong H4; // 0x60
	private ulong H5; // 0x68
	private ulong H6; // 0x70
	private ulong H7; // 0x78
	private ulong H8; // 0x80
	private ulong[] W; // 0x88
	private int wOff; // 0x90

	// Methods

	// RVA: 0x11CA4A8 Offset: 0x11CA4A8 VA: 0x11CA4A8
	public void .ctor() { }

	// RVA: 0x11CA55C Offset: 0x11CA55C VA: 0x11CA55C
	private void Initialize(bool reuse) { }

	// RVA: 0x11CA680 Offset: 0x11CA680 VA: 0x11CA680 Slot: 17
	public override void Initialize() { }

	// RVA: 0x11CA688 Offset: 0x11CA688 VA: 0x11CA688 Slot: 14
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }

	// RVA: 0x11CAB18 Offset: 0x11CAB18 VA: 0x11CAB18 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x11CA820 Offset: 0x11CA820 VA: 0x11CA820
	private void update(byte input) { }

	// RVA: 0x11CA8C8 Offset: 0x11CA8C8 VA: 0x11CA8C8
	private void processWord(byte[] input, int inOff) { }

	// RVA: 0x11CB0D0 Offset: 0x11CB0D0 VA: 0x11CB0D0
	private void unpackWord(ulong word, byte[] output, int outOff) { }

	// RVA: 0x11CAC64 Offset: 0x11CAC64 VA: 0x11CAC64
	private void adjustByteCounts() { }

	// RVA: 0x11CAC84 Offset: 0x11CAC84 VA: 0x11CAC84
	private void processLength(ulong lowW, ulong hiW) { }

	// RVA: 0x11CAD24 Offset: 0x11CAD24 VA: 0x11CAD24
	private void processBlock() { }

	// RVA: 0x11CB2E4 Offset: 0x11CB2E4 VA: 0x11CB2E4
	private ulong rotateRight(ulong x, int n) { }

	// RVA: 0x11CB2B0 Offset: 0x11CB2B0 VA: 0x11CB2B0
	private ulong Ch(ulong x, ulong y, ulong z) { }

	// RVA: 0x11CB2D0 Offset: 0x11CB2D0 VA: 0x11CB2D0
	private ulong Maj(ulong x, ulong y, ulong z) { }

	// RVA: 0x11CB2C0 Offset: 0x11CB2C0 VA: 0x11CB2C0
	private ulong Sum0(ulong x) { }

	// RVA: 0x11CB2A0 Offset: 0x11CB2A0 VA: 0x11CB2A0
	private ulong Sum1(ulong x) { }

	// RVA: 0x11CB290 Offset: 0x11CB290 VA: 0x11CB290
	private ulong Sigma0(ulong x) { }

	// RVA: 0x11CB280 Offset: 0x11CB280 VA: 0x11CB280
	private ulong Sigma1(ulong x) { }
}

// Namespace: System.Security.Cryptography
internal static class SHAConstants // TypeDefIndex: 778
{
	// Fields
	public static readonly uint[] K1; // 0x0
	public static readonly ulong[] K2; // 0x8

	// Methods

	// RVA: 0x11CB2F0 Offset: 0x11CB2F0 VA: 0x11CB2F0
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3593C Offset: 0xC3593C VA: 0xC3593C
public class SignatureDescription // TypeDefIndex: 779
{
	// Fields
	private string _DeformatterAlgorithm; // 0x10
	private string _DigestAlgorithm; // 0x18
	private string _FormatterAlgorithm; // 0x20
	private string _KeyAlgorithm; // 0x28

	// Properties
	public string DeformatterAlgorithm { get; set; }
	public string DigestAlgorithm { get; set; }
	public string FormatterAlgorithm { get; set; }
	public string KeyAlgorithm { get; set; }

	// Methods

	// RVA: 0x11CB3A4 Offset: 0x11CB3A4 VA: 0x11CB3A4
	public void .ctor() { }

	// RVA: 0x11CB3AC Offset: 0x11CB3AC VA: 0x11CB3AC
	public void .ctor(SecurityElement el) { }

	// RVA: 0x11CB508 Offset: 0x11CB508 VA: 0x11CB508
	public string get_DeformatterAlgorithm() { }

	// RVA: 0x11CB510 Offset: 0x11CB510 VA: 0x11CB510
	public void set_DeformatterAlgorithm(string value) { }

	// RVA: 0x11CB518 Offset: 0x11CB518 VA: 0x11CB518
	public string get_DigestAlgorithm() { }

	// RVA: 0x11CB520 Offset: 0x11CB520 VA: 0x11CB520
	public void set_DigestAlgorithm(string value) { }

	// RVA: 0x11CB528 Offset: 0x11CB528 VA: 0x11CB528
	public string get_FormatterAlgorithm() { }

	// RVA: 0x11CB530 Offset: 0x11CB530 VA: 0x11CB530
	public void set_FormatterAlgorithm(string value) { }

	// RVA: 0x11CB538 Offset: 0x11CB538 VA: 0x11CB538
	public string get_KeyAlgorithm() { }

	// RVA: 0x11CB540 Offset: 0x11CB540 VA: 0x11CB540
	public void set_KeyAlgorithm(string value) { }

	// RVA: 0x11CB548 Offset: 0x11CB548 VA: 0x11CB548 Slot: 4
	public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key) { }

	// RVA: 0x11CB6E8 Offset: 0x11CB6E8 VA: 0x11CB6E8 Slot: 5
	public virtual HashAlgorithm CreateDigest() { }

	// RVA: 0x11CB828 Offset: 0x11CB828 VA: 0x11CB828 Slot: 6
	public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription // TypeDefIndex: 780
{
	// Methods

	// RVA: 0x116E524 Offset: 0x116E524 VA: 0x116E524
	public void .ctor() { }
}

// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription // TypeDefIndex: 781
{
	// Methods

	// RVA: 0xE48E70 Offset: 0xE48E70 VA: 0xE48E70
	public void .ctor() { }

	// RVA: 0xE48F18 Offset: 0xE48F18 VA: 0xE48F18 Slot: 4
	public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35950 Offset: 0xC35950 VA: 0xC35950
public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 782
{
	// Fields
	protected int BlockSizeValue; // 0x10
	protected byte[] IVValue; // 0x18
	protected int KeySizeValue; // 0x20
	protected byte[] KeyValue; // 0x28
	protected KeySizes[] LegalBlockSizesValue; // 0x30
	protected KeySizes[] LegalKeySizesValue; // 0x38
	protected int FeedbackSizeValue; // 0x40
	protected CipherMode ModeValue; // 0x44
	protected PaddingMode PaddingValue; // 0x48
	private bool m_disposed; // 0x4C

	// Properties
	public virtual int BlockSize { get; set; }
	public virtual int FeedbackSize { get; set; }
	public virtual byte[] IV { get; set; }
	public virtual byte[] Key { get; set; }
	public virtual int KeySize { get; set; }
	public virtual KeySizes[] LegalBlockSizes { get; }
	public virtual KeySizes[] LegalKeySizes { get; }
	public virtual CipherMode Mode { get; set; }
	public virtual PaddingMode Padding { get; set; }

	// Methods

	// RVA: 0x11CB9C8 Offset: 0x11CB9C8 VA: 0x11CB9C8
	protected void .ctor() { }

	// RVA: 0x11CB9FC Offset: 0x11CB9FC VA: 0x11CB9FC Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x11CBA30 Offset: 0x11CBA30 VA: 0x11CBA30 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11CBAB0 Offset: 0x11CBAB0 VA: 0x11CBAB0
	public void Clear() { }

	// RVA: 0x11CBAC0 Offset: 0x11CBAC0 VA: 0x11CBAC0 Slot: 5
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x11CBB08 Offset: 0x11CBB08 VA: 0x11CBB08 Slot: 6
	public virtual int get_BlockSize() { }

	// RVA: 0x11CBB10 Offset: 0x11CBB10 VA: 0x11CBB10 Slot: 7
	public virtual void set_BlockSize(int value) { }

	// RVA: 0x11CBBDC Offset: 0x11CBBDC VA: 0x11CBBDC Slot: 8
	public virtual int get_FeedbackSize() { }

	// RVA: 0x11CBBE4 Offset: 0x11CBBE4 VA: 0x11CBBE4 Slot: 9
	public virtual void set_FeedbackSize(int value) { }

	// RVA: 0x11CBCA0 Offset: 0x11CBCA0 VA: 0x11CBCA0 Slot: 10
	public virtual byte[] get_IV() { }

	// RVA: 0x11CBD94 Offset: 0x11CBD94 VA: 0x11CBD94 Slot: 11
	public virtual void set_IV(byte[] value) { }

	// RVA: 0x11CBF0C Offset: 0x11CBF0C VA: 0x11CBF0C Slot: 12
	public virtual byte[] get_Key() { }

	// RVA: 0x11CC000 Offset: 0x11CC000 VA: 0x11CC000 Slot: 13
	public virtual void set_Key(byte[] value) { }

	// RVA: 0x11CC184 Offset: 0x11CC184 VA: 0x11CC184 Slot: 14
	public virtual int get_KeySize() { }

	// RVA: 0x11CC18C Offset: 0x11CC18C VA: 0x11CC18C Slot: 15
	public virtual void set_KeySize(int value) { }

	// RVA: 0x11CC24C Offset: 0x11CC24C VA: 0x11CC24C Slot: 16
	public virtual KeySizes[] get_LegalBlockSizes() { }

	// RVA: 0x11CC254 Offset: 0x11CC254 VA: 0x11CC254 Slot: 17
	public virtual KeySizes[] get_LegalKeySizes() { }

	// RVA: 0x11CC25C Offset: 0x11CC25C VA: 0x11CC25C Slot: 18
	public virtual CipherMode get_Mode() { }

	// RVA: 0x11CC264 Offset: 0x11CC264 VA: 0x11CC264 Slot: 19
	public virtual void set_Mode(CipherMode value) { }

	// RVA: 0x11CC398 Offset: 0x11CC398 VA: 0x11CC398 Slot: 20
	public virtual PaddingMode get_Padding() { }

	// RVA: 0x11CC3A0 Offset: 0x11CC3A0 VA: 0x11CC3A0 Slot: 21
	public virtual void set_Padding(PaddingMode value) { }

	// RVA: 0x11CC4D4 Offset: 0x11CC4D4 VA: 0x11CC4D4 Slot: 22
	public virtual ICryptoTransform CreateDecryptor() { }

	// RVA: -1 Offset: -1 Slot: 23
	public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);

	// RVA: 0x11CC528 Offset: 0x11CC528 VA: 0x11CC528 Slot: 24
	public virtual ICryptoTransform CreateEncryptor() { }

	// RVA: -1 Offset: -1 Slot: 25
	public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);

	// RVA: -1 Offset: -1 Slot: 26
	public abstract void GenerateIV();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract void GenerateKey();

	// RVA: 0x11CC57C Offset: 0x11CC57C VA: 0x11CC57C
	public bool ValidKeySize(int bitLength) { }

	// RVA: 0x11CC588 Offset: 0x11CC588 VA: 0x11CC588
	public static SymmetricAlgorithm Create() { }

	// RVA: 0x11CC5D0 Offset: 0x11CC5D0 VA: 0x11CC5D0
	public static SymmetricAlgorithm Create(string algName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35964 Offset: 0xC35964 VA: 0xC35964
public class ToBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 783
{
	// Fields
	private const int inputBlockSize = 3;
	private const int outputBlockSize = 4;
	private bool m_disposed; // 0x10

	// Properties
	public bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x11CC6C4 Offset: 0x11CC6C4 VA: 0x11CC6C4
	public void .ctor() { }

	// RVA: 0x11CC6CC Offset: 0x11CC6CC VA: 0x11CC6CC Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x11CC700 Offset: 0x11CC700 VA: 0x11CC700 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11CC780 Offset: 0x11CC780 VA: 0x11CC780 Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x11CC788 Offset: 0x11CC788 VA: 0x11CC788 Slot: 11
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x11CC790 Offset: 0x11CC790 VA: 0x11CC790 Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0x11CC798 Offset: 0x11CC798 VA: 0x11CC798 Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0x11CC7A0 Offset: 0x11CC7A0 VA: 0x11CC7A0
	public void Clear() { }

	// RVA: 0x11CC7B0 Offset: 0x11CC7B0 VA: 0x11CC7B0 Slot: 12
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x11CC7C8 Offset: 0x11CC7C8 VA: 0x11CC7C8 Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x11CCA6C Offset: 0x11CCA6C VA: 0x11CCA6C
	internal static void InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x11CCCF4 Offset: 0x11CCCF4 VA: 0x11CCCF4 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x11CCEC4 Offset: 0x11CCEC4 VA: 0x11CCEC4
	internal static byte[] InternalTransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35978 Offset: 0xC35978 VA: 0xC35978
public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 784
{
	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x11CD2DC Offset: 0x11CD2DC VA: 0x11CD2DC
	protected void .ctor() { }

	// RVA: 0x11CD488 Offset: 0x11CD488 VA: 0x11CD488 Slot: 12
	public override byte[] get_Key() { }

	// RVA: 0x11CD7A0 Offset: 0x11CD7A0 VA: 0x11CD7A0 Slot: 13
