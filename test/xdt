	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D521C Offset: 0x22D521C VA: 0x22D521C Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x22D5284 Offset: 0x22D5284 VA: 0x22D5284 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D52EC Offset: 0x22D52EC VA: 0x22D52EC Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x22D5354 Offset: 0x22D5354 VA: 0x22D5354 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x22D53BC Offset: 0x22D53BC VA: 0x22D53BC Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x22D5424 Offset: 0x22D5424 VA: 0x22D5424 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D548C Offset: 0x22D548C VA: 0x22D548C Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D54F4 Offset: 0x22D54F4 VA: 0x22D54F4 Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x22D5524 Offset: 0x22D5524 VA: 0x22D5524 Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x22D552C Offset: 0x22D552C VA: 0x22D552C Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x22D5534 Offset: 0x22D5534 VA: 0x22D5534 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x22D553C Offset: 0x22D553C VA: 0x22D553C Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x22D5544 Offset: 0x22D5544 VA: 0x22D5544 Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x22D554C Offset: 0x22D554C VA: 0x22D554C Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x22D55B4 Offset: 0x22D55B4 VA: 0x22D55B4 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x22D561C Offset: 0x22D561C VA: 0x22D561C Slot: 42
	public override bool IsInstanceOfType(object o) { }

	// RVA: 0x22D5624 Offset: 0x22D5624 VA: 0x22D5624 Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x22D562C Offset: 0x22D562C VA: 0x22D562C Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x22D5664 Offset: 0x22D5664 VA: 0x22D5664 Slot: 89
	public override Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x22D56CC Offset: 0x22D56CC VA: 0x22D56CC Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x22D5734 Offset: 0x22D5734 VA: 0x22D5734 Slot: 92
	public override Type MakeByRefType() { }

	// RVA: 0x22D5794 Offset: 0x22D5794 VA: 0x22D5794 Slot: 3
	public override string ToString() { }

	// RVA: 0x22D57E4 Offset: 0x22D57E4 VA: 0x22D57E4 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x22D581C Offset: 0x22D581C VA: 0x22D581C Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x22D592C Offset: 0x22D592C VA: 0x22D592C Slot: 18
	public override string get_FullName() { }

	// RVA: 0x22D5980 Offset: 0x22D5980 VA: 0x22D5980 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D59D0 Offset: 0x22D59D0 VA: 0x22D59D0 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22D5A04 Offset: 0x22D5A04 VA: 0x22D5A04 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x22D5A3C Offset: 0x22D5A3C VA: 0x22D5A3C Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x22D5AA4 Offset: 0x22D5AA4 VA: 0x22D5AA4 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x22D5AC8 Offset: 0x22D5AC8 VA: 0x22D5AC8 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D5B30 Offset: 0x22D5B30 VA: 0x22D5B30 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22D5B98 Offset: 0x22D5B98 VA: 0x22D5B98 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection.Emit
internal class ArrayType : DerivedType // TypeDefIndex: 322
{
	// Fields
	private int rank; // 0x20

	// Properties
	public override Type BaseType { get; }

	// Methods

	// RVA: 0x21F8530 Offset: 0x21F8530 VA: 0x21F8530
	internal void .ctor(Type elementType, int rank) { }

	// RVA: 0x21F855C Offset: 0x21F855C VA: 0x21F855C Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x21F8564 Offset: 0x21F8564 VA: 0x21F8564 Slot: 43
	public override int GetArrayRank() { }

	// RVA: 0x21F8574 Offset: 0x21F8574 VA: 0x21F8574 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x21F85E4 Offset: 0x21F85E4 VA: 0x21F85E4 Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x21F8788 Offset: 0x21F8788 VA: 0x21F8788 Slot: 93
	internal override string FormatName(string elementName) { }
}

// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType // TypeDefIndex: 323
{
	// Properties
	public override Type BaseType { get; }

	// Methods

	// RVA: 0x22D39BC Offset: 0x22D39BC VA: 0x22D39BC
	internal void .ctor(Type elementType) { }

	// RVA: 0x22D3A3C Offset: 0x22D3A3C VA: 0x22D3A3C Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x22D3A44 Offset: 0x22D3A44 VA: 0x22D3A44 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x22D3AB4 Offset: 0x22D3AB4 VA: 0x22D3AB4 Slot: 93
	internal override string FormatName(string elementName) { }

	// RVA: 0x22D3B3C Offset: 0x22D3B3C VA: 0x22D3B3C Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x22D3BB0 Offset: 0x22D3BB0 VA: 0x22D3BB0 Slot: 92
	public override Type MakeByRefType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5754 Offset: 0xBC5754 VA: 0xBC5754
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 324
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private string name; // 0x18
	private Type returnType; // 0x20
	private Type[] parameters; // 0x28
	private MethodAttributes attributes; // 0x30
	private CallingConventions callingConvention; // 0x34
	private Module module; // 0x38
	private bool skipVisibility; // 0x40
	private bool init_locals; // 0x41
	private ILGenerator ilgen; // 0x48
	private int nrefs; // 0x50
	private object[] refs; // 0x58
	private IntPtr referenced_by; // 0x60
	private Type owner; // 0x68
	private Delegate deleg; // 0x70
	private MonoMethod method; // 0x78
	private ParameterBuilder[] pinfo; // 0x80
	internal bool creating; // 0x88

	// Properties
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type DeclaringType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }
	public override Type ReturnType { get; }

	// Methods

	// RVA: 0x22D5C00 Offset: 0x22D5C00 VA: 0x22D5C00
	private void create_dynamic_method(DynamicMethod m) { }

	// RVA: 0x22D5C74 Offset: 0x22D5C74 VA: 0x22D5C74
	private void destroy_dynamic_method(DynamicMethod m) { }

	// RVA: 0x22D5CE8 Offset: 0x22D5CE8 VA: 0x22D5CE8
	private void CreateDynMethod() { }

	// RVA: 0x22D5FD4 Offset: 0x22D5FD4 VA: 0x22D5FD4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x22D604C Offset: 0x22D604C VA: 0x22D604C Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	[MonoTODOAttribute] // RVA: 0xBCC928 Offset: 0xBCC928 VA: 0xBCC928
	// RVA: 0x22D6050 Offset: 0x22D6050 VA: 0x22D6050 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	[MonoTODOAttribute] // RVA: 0xBCC960 Offset: 0xBCC960 VA: 0xBCC960
	// RVA: 0x22D60B8 Offset: 0x22D60B8 VA: 0x22D60B8 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22D6120 Offset: 0x22D6120 VA: 0x22D6120 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x22D62E0 Offset: 0x22D62E0 VA: 0x22D62E0 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	[MonoTODOAttribute] // RVA: 0xBCC998 Offset: 0xBCC998 VA: 0xBCC998
	// RVA: 0x22D64D4 Offset: 0x22D64D4 VA: 0x22D64D4 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D653C Offset: 0x22D653C VA: 0x22D653C Slot: 3
	public override string ToString() { }

	// RVA: 0x22D6914 Offset: 0x22D6914 VA: 0x22D6914 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x22D691C Offset: 0x22D691C VA: 0x22D691C Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x22D6924 Offset: 0x22D6924 VA: 0x22D6924 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22D692C Offset: 0x22D692C VA: 0x22D692C Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x22D6934 Offset: 0x22D6934 VA: 0x22D6934 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22D690C Offset: 0x22D690C VA: 0x22D690C Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D693C Offset: 0x22D693C VA: 0x22D693C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22D6904 Offset: 0x22D6904 VA: 0x22D6904 Slot: 31
	public override Type get_ReturnType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5768 Offset: 0xBC5768 VA: 0xBC5768
[ComDefaultInterfaceAttribute] // RVA: 0xBC5768 Offset: 0xBC5768 VA: 0xBC5768
[ClassInterfaceAttribute] // RVA: 0xBC5768 Offset: 0xBC5768 VA: 0xBC5768
public sealed class EnumBuilder : Type, _EnumBuilder // TypeDefIndex: 325
{
	// Fields
	private TypeBuilder _tb; // 0x18
	private Type _underlyingType; // 0x20

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x22D6944 Offset: 0x22D6944 VA: 0x22D6944 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x22D69AC Offset: 0x22D69AC VA: 0x22D69AC Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x22D6A8C Offset: 0x22D6A8C VA: 0x22D6A8C Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x22D6AC0 Offset: 0x22D6AC0 VA: 0x22D6AC0 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22D6AF4 Offset: 0x22D6AF4 VA: 0x22D6AF4 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x22D6B28 Offset: 0x22D6B28 VA: 0x22D6B28 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22D6B54 Offset: 0x22D6B54 VA: 0x22D6B54 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D6B80 Offset: 0x22D6B80 VA: 0x22D6B80 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x22D6BB4 Offset: 0x22D6BB4 VA: 0x22D6BB4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22D6BE8 Offset: 0x22D6BE8 VA: 0x22D6BE8 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x22D6C54 Offset: 0x22D6C54 VA: 0x22D6C54 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x22D6C5C Offset: 0x22D6C5C VA: 0x22D6C5C Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x22D6C88 Offset: 0x22D6C88 VA: 0x22D6C88 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0xBCC9D0 Offset: 0xBCC9D0 VA: 0xBCC9D0
	// RVA: 0x22D6CF0 Offset: 0x22D6CF0 VA: 0x22D6CF0 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x22D6DE4 Offset: 0x22D6DE4 VA: 0x22D6DE4 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22D6E5C Offset: 0x22D6E5C VA: 0x22D6E5C Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22D6EF4 Offset: 0x22D6EF4 VA: 0x22D6EF4 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x22D6F74 Offset: 0x22D6F74 VA: 0x22D6F74 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D7010 Offset: 0x22D7010 VA: 0x22D7010 Slot: 47
	public override EventInfo[] GetEvents() { }

	// RVA: 0x22D7048 Offset: 0x22D7048 VA: 0x22D7048 Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x22D7144 Offset: 0x22D7144 VA: 0x22D7144 Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D7310 Offset: 0x22D7310 VA: 0x22D7310 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x22D752C Offset: 0x22D752C VA: 0x22D752C Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x22D7630 Offset: 0x22D7630 VA: 0x22D7630 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D76D8 Offset: 0x22D76D8 VA: 0x22D76D8 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x22D7728 Offset: 0x22D7728 VA: 0x22D7728 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x22D7950 Offset: 0x22D7950 VA: 0x22D7950 Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x22D7BA8 Offset: 0x22D7BA8 VA: 0x22D7BA8 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D7C5C Offset: 0x22D7C5C VA: 0x22D7C5C Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x22D7C8C Offset: 0x22D7C8C VA: 0x22D7C8C Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x22D7DB8 Offset: 0x22D7DB8 VA: 0x22D7DB8 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x22D7DC0 Offset: 0x22D7DC0 VA: 0x22D7DC0 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x22D7DC8 Offset: 0x22D7DC8 VA: 0x22D7DC8 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x22D7DD0 Offset: 0x22D7DD0 VA: 0x22D7DD0 Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x22D7DD8 Offset: 0x22D7DD8 VA: 0x22D7DD8 Slot: 76
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x22D7DE0 Offset: 0x22D7DE0 VA: 0x22D7DE0 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D7EF0 Offset: 0x22D7EF0 VA: 0x22D7EF0 Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x22D7F58 Offset: 0x22D7F58 VA: 0x22D7F58 Slot: 92
	public override Type MakeByRefType() { }

	// RVA: 0x22D7BF4 Offset: 0x22D7BF4 VA: 0x22D7BF4
	private Exception CreateNotSupportedException() { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0xBC57F4 Offset: 0xBC57F4 VA: 0xBC57F4
[ComDefaultInterfaceAttribute] // RVA: 0xBC57F4 Offset: 0xBC57F4 VA: 0xBC57F4
[ComVisibleAttribute] // RVA: 0xBC57F4 Offset: 0xBC57F4 VA: 0xBC57F4
public sealed class EventBuilder : _EventBuilder // TypeDefIndex: 326
{}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xBC5880 Offset: 0xBC5880 VA: 0xBC5880
[ClassInterfaceAttribute] // RVA: 0xBC5880 Offset: 0xBC5880 VA: 0xBC5880
[ComVisibleAttribute] // RVA: 0xBC5880 Offset: 0xBC5880 VA: 0xBC5880
public sealed class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 327
{
	// Fields
	private FieldAttributes attrs; // 0x10
	private Type type; // 0x18
	private string name; // 0x20
	internal TypeBuilder typeb; // 0x28
	private UnmanagedMarshal marshal_info; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }
	internal override UnmanagedMarshal UMarshal { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x22D7FB8 Offset: 0x22D7FB8 VA: 0x22D7FB8 Slot: 14
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x22D7FC0 Offset: 0x22D7FC0 VA: 0x22D7FC0 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22D7FC8 Offset: 0x22D7FC8 VA: 0x22D7FC8 Slot: 15
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x22D807C Offset: 0x22D807C VA: 0x22D807C Slot: 16
	public override Type get_FieldType() { }

	// RVA: 0x22D8084 Offset: 0x22D8084 VA: 0x22D8084 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D808C Offset: 0x22D808C VA: 0x22D808C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22D8094 Offset: 0x22D8094 VA: 0x22D8094 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22D8140 Offset: 0x22D8140 VA: 0x22D8140 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22D81F4 Offset: 0x22D81F4 VA: 0x22D81F4 Slot: 17
	public override object GetValue(object obj) { }

	// RVA: 0x22D8240 Offset: 0x22D8240 VA: 0x22D8240 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D828C Offset: 0x22D828C VA: 0x22D828C Slot: 24
	internal override int GetFieldOffset() { }

	// RVA: 0x22D8294 Offset: 0x22D8294 VA: 0x22D8294 Slot: 22
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x22D82E0 Offset: 0x22D82E0 VA: 0x22D82E0 Slot: 25
	internal override UnmanagedMarshal get_UMarshal() { }

	// RVA: 0x22D8014 Offset: 0x22D8014 VA: 0x22D8014
	private Exception CreateNotSupportedException() { }

	// RVA: 0x22D82E8 Offset: 0x22D82E8 VA: 0x22D82E8 Slot: 10
	public override Module get_Module() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC590C Offset: 0xBC590C VA: 0xBC590C
public sealed class GenericTypeParameterBuilder : Type // TypeDefIndex: 328
{
	// Fields
	private TypeBuilder tbuilder; // 0x18
	private MethodBuilder mbuilder; // 0x20
	private string name; // 0x28
	private Type base_type; // 0x30

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }
	public override bool IsGenericType { get; }
	public override bool IsGenericTypeDefinition { get; }

	// Methods

	[ComVisibleAttribute] // RVA: 0xBCC9E4 Offset: 0xBCC9E4 VA: 0xBCC9E4
	// RVA: 0x22D82EC Offset: 0x22D82EC VA: 0x22D82EC Slot: 39
	public override bool IsSubclassOf(Type c) { }

	// RVA: 0x22D8514 Offset: 0x22D8514 VA: 0x22D8514 Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x22D86A0 Offset: 0x22D86A0 VA: 0x22D86A0 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0xBCC9F8 Offset: 0xBCC9F8 VA: 0xBCC9F8
	// RVA: 0x22D86EC Offset: 0x22D86EC VA: 0x22D86EC Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x22D8738 Offset: 0x22D8738 VA: 0x22D8738 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D8784 Offset: 0x22D8784 VA: 0x22D8784 Slot: 47
	public override EventInfo[] GetEvents() { }

	// RVA: 0x22D87D0 Offset: 0x22D87D0 VA: 0x22D87D0 Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x22D881C Offset: 0x22D881C VA: 0x22D881C Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D8868 Offset: 0x22D8868 VA: 0x22D8868 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x22D88B4 Offset: 0x22D88B4 VA: 0x22D88B4 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x22D8900 Offset: 0x22D8900 VA: 0x22D8900 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x22D894C Offset: 0x22D894C VA: 0x22D894C Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D8998 Offset: 0x22D8998 VA: 0x22D8998 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x22D89E4 Offset: 0x22D89E4 VA: 0x22D89E4 Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x22D8A30 Offset: 0x22D8A30 VA: 0x22D8A30 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x22D8A7C Offset: 0x22D8A7C VA: 0x22D8A7C Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x22D8A84 Offset: 0x22D8A84 VA: 0x22D8A84 Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x22D8AD0 Offset: 0x22D8AD0 VA: 0x22D8AD0 Slot: 42
	public override bool IsInstanceOfType(object o) { }

	// RVA: 0x22D8B1C Offset: 0x22D8B1C VA: 0x22D8B1C Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x22D8B24 Offset: 0x22D8B24 VA: 0x22D8B24 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x22D8B2C Offset: 0x22D8B2C VA: 0x22D8B2C Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x22D8B34 Offset: 0x22D8B34 VA: 0x22D8B34 Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x22D8B3C Offset: 0x22D8B3C VA: 0x22D8B3C Slot: 76
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x22D8B50 Offset: 0x22D8B50 VA: 0x22D8B50 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x22D8B9C Offset: 0x22D8B9C VA: 0x22D8B9C Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x22D8BE8 Offset: 0x22D8BE8 VA: 0x22D8BE8 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x22D8BEC Offset: 0x22D8BEC VA: 0x22D8BEC Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x22D8C28 Offset: 0x22D8C28 VA: 0x22D8C28 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x22D850C Offset: 0x22D850C VA: 0x22D850C Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x22D8C30 Offset: 0x22D8C30 VA: 0x22D8C30 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x22D8C38 Offset: 0x22D8C38 VA: 0x22D8C38 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D8C84 Offset: 0x22D8C84 VA: 0x22D8C84 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22D8CD0 Offset: 0x22D8CD0 VA: 0x22D8CD0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22D8D1C Offset: 0x22D8D1C VA: 0x22D8D1C Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D8D24 Offset: 0x22D8D24 VA: 0x22D8D24 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x22D8D2C Offset: 0x22D8D2C VA: 0x22D8D2C Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22D8D58 Offset: 0x22D8D58 VA: 0x22D8D58 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22D8D7C Offset: 0x22D8D7C VA: 0x22D8D7C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22D8D98 Offset: 0x22D8D98 VA: 0x22D8D98 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x22D8DE4 Offset: 0x22D8DE4 VA: 0x22D8DE4 Slot: 84
	public override Type[] GetGenericArguments() { }

	// RVA: 0x22D8E4C Offset: 0x22D8E4C VA: 0x22D8E4C Slot: 87
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x22D8EB4 Offset: 0x22D8EB4 VA: 0x22D8EB4 Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x22D8EBC Offset: 0x22D8EBC VA: 0x22D8EBC Slot: 90
	public override bool get_IsGenericParameter() { }

	// RVA: 0x22D8EC4 Offset: 0x22D8EC4 VA: 0x22D8EC4 Slot: 88
	public override bool get_IsGenericType() { }

	// RVA: 0x22D8ECC Offset: 0x22D8ECC VA: 0x22D8ECC Slot: 86
	public override bool get_IsGenericTypeDefinition() { }

	// RVA: 0x22D84B0 Offset: 0x22D84B0 VA: 0x22D84B0
	private Exception not_supported() { }

	// RVA: 0x22D8ED4 Offset: 0x22D8ED4 VA: 0x22D8ED4 Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0xBCCA0C Offset: 0xBCCA0C VA: 0xBCCA0C
	// RVA: 0x22D8EDC Offset: 0x22D8EDC VA: 0x22D8EDC Slot: 0
	public override bool Equals(object o) { }

	[MonoTODOAttribute] // RVA: 0xBCCA1C Offset: 0xBCCA1C VA: 0xBCCA1C
	// RVA: 0x22D8EE4 Offset: 0x22D8EE4 VA: 0x22D8EE4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x22D8EEC Offset: 0x22D8EEC VA: 0x22D8EEC Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x22D8F54 Offset: 0x22D8F54 VA: 0x22D8F54 Slot: 92
	public override Type MakeByRefType() { }

	[MonoTODOAttribute] // RVA: 0xBCCA2C Offset: 0xBCCA2C VA: 0xBCCA2C
	// RVA: 0x22D8FB4 Offset: 0x22D8FB4 VA: 0x22D8FB4 Slot: 89
	public override Type MakeGenericType(Type[] typeArguments) { }
}

// Namespace: System.Reflection.Emit
internal struct ILTokenInfo // TypeDefIndex: 329
{
	// Fields
	public MemberInfo member; // 0x0
	public int code_pos; // 0x8
}

// Namespace: System.Reflection.Emit
internal interface TokenGenerator // TypeDefIndex: 330
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetToken(string str);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetToken(MemberInfo member);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetToken(MethodInfo method, Type[] opt_param_types);
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0xBC5920 Offset: 0xBC5920 VA: 0xBC5920
[ComVisibleAttribute] // RVA: 0xBC5920 Offset: 0xBC5920 VA: 0xBC5920
[ComDefaultInterfaceAttribute] // RVA: 0xBC5920 Offset: 0xBC5920 VA: 0xBC5920
public class ILGenerator : _ILGenerator // TypeDefIndex: 331
{
	// Fields
	private static readonly Type void_type; // 0x0
	private byte[] code; // 0x10
	private int code_len; // 0x18
	private int max_stack; // 0x1C
	private int cur_stack; // 0x20
	private LocalBuilder[] locals; // 0x28
	private int num_token_fixups; // 0x30
	private ILTokenInfo[] token_fixups; // 0x38
	private ILGenerator.LabelData[] labels; // 0x40
	private int num_labels; // 0x48
	private ILGenerator.LabelFixup[] fixups; // 0x50
	private int num_fixups; // 0x58
	internal Module module; // 0x60
	private TokenGenerator token_gen; // 0x68

	// Methods

	// RVA: 0x22D4A38 Offset: 0x22D4A38 VA: 0x22D4A38
	internal void .ctor(Module m, TokenGenerator token_gen, int size) { }

	// RVA: 0x22D8FBC Offset: 0x22D8FBC VA: 0x22D8FBC
	private static void .cctor() { }

	// RVA: 0x22D9044 Offset: 0x22D9044 VA: 0x22D9044
	private void add_token_fixup(MemberInfo mi) { }

	// RVA: 0x22D9174 Offset: 0x22D9174 VA: 0x22D9174
	private void make_room(int nbytes) { }

	// RVA: 0x22D9238 Offset: 0x22D9238 VA: 0x22D9238
	private void emit_int(int val) { }

	// RVA: 0x22D936C Offset: 0x22D936C VA: 0x22D936C
	private void ll_emit(OpCode opcode) { }

	// RVA: 0x22D94C8 Offset: 0x22D94C8 VA: 0x22D94C8
	private static int target_len(OpCode opcode) { }

	// RVA: 0x22D94E0 Offset: 0x22D94E0 VA: 0x22D94E0 Slot: 4
	public virtual LocalBuilder DeclareLocal(Type localType) { }

	// RVA: 0x22D94F0 Offset: 0x22D94F0 VA: 0x22D94F0 Slot: 5
	public virtual LocalBuilder DeclareLocal(Type localType, bool pinned) { }

	// RVA: 0x22D9778 Offset: 0x22D9778 VA: 0x22D9778 Slot: 6
	public virtual Label DefineLabel() { }

	// RVA: 0x22D9894 Offset: 0x22D9894 VA: 0x22D9894 Slot: 7
	public virtual void Emit(OpCode opcode) { }

	// RVA: 0x22D98C4 Offset: 0x22D98C4 VA: 0x22D98C4 Slot: 8
	public virtual void Emit(OpCode opcode, byte arg) { }

	[ComVisibleAttribute] // RVA: 0xBCCA3C Offset: 0xBCCA3C VA: 0xBCCA3C
	// RVA: 0x22D9944 Offset: 0x22D9944 VA: 0x22D9944 Slot: 9
	public virtual void Emit(OpCode opcode, ConstructorInfo con) { }

	// RVA: 0x22D9AC4 Offset: 0x22D9AC4 VA: 0x22D9AC4 Slot: 10
	public virtual void Emit(OpCode opcode, FieldInfo field) { }

	// RVA: 0x22D9C08 Offset: 0x22D9C08 VA: 0x22D9C08 Slot: 11
	public virtual void Emit(OpCode opcode, int arg) { }

	// RVA: 0x22D9C50 Offset: 0x22D9C50 VA: 0x22D9C50 Slot: 12
	public virtual void Emit(OpCode opcode, Label label) { }

	// RVA: 0x22D9EBC Offset: 0x22D9EBC VA: 0x22D9EBC Slot: 13
	public virtual void Emit(OpCode opcode, LocalBuilder local) { }

	// RVA: 0x22DA328 Offset: 0x22DA328 VA: 0x22DA328 Slot: 14
	public virtual void Emit(OpCode opcode, MethodInfo meth) { }

	// RVA: 0x22DA660 Offset: 0x22DA660 VA: 0x22DA660
	private void Emit(OpCode opcode, MethodInfo method, int token) { }

	// RVA: 0x22DA7B0 Offset: 0x22DA7B0 VA: 0x22DA7B0 Slot: 15
	public virtual void Emit(OpCode opcode, string str) { }

	// RVA: 0x22DA8A0 Offset: 0x22DA8A0 VA: 0x22DA8A0 Slot: 16
	public virtual void Emit(OpCode opcode, Type cls) { }

	[MonoLimitationAttribute] // RVA: 0xBCCA50 Offset: 0xBCCA50 VA: 0xBCCA50
	// RVA: 0x22DA990 Offset: 0x22DA990 VA: 0x22DA990 Slot: 17
	public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) { }

	// RVA: 0x22DAC68 Offset: 0x22DAC68 VA: 0x22DAC68 Slot: 18
	public virtual void MarkLabel(Label loc) { }

	// RVA: 0x22D4D28 Offset: 0x22D4D28 VA: 0x22D4D28
	internal void label_fixup() { }

	[ObsoleteAttribute] // RVA: 0xBCCA88 Offset: 0xBCCA88 VA: 0xBCCA88
	// RVA: 0x22D4D00 Offset: 0x22D4D00 VA: 0x22D4D00
	internal static int Mono_GetCurrentOffset(ILGenerator ig) { }
}

// Namespace: 
private struct ILGenerator.LabelFixup // TypeDefIndex: 332
{
	// Fields
	public int offset; // 0x0
	public int pos; // 0x4
	public int label_idx; // 0x8
}

// Namespace: 
private struct ILGenerator.LabelData // TypeDefIndex: 333
{
	// Fields
	public int addr; // 0x0
	public int maxStack; // 0x4

	// Methods

	// RVA: 0xD68954 Offset: 0xD68954 VA: 0xD68954
	public void .ctor(int addr, int maxStack) { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC59AC Offset: 0xBC59AC VA: 0xBC59AC
[Serializable]
public struct Label // TypeDefIndex: 334
{
	// Fields
	internal int label; // 0x0

	// Methods

	// RVA: 0xD689A8 Offset: 0xD689A8 VA: 0xD689A8
	internal void .ctor(int val) { }

	// RVA: 0xD689B0 Offset: 0xD689B0 VA: 0xD689B0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xD689B8 Offset: 0xD689B8 VA: 0xD689B8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC59C0 Offset: 0xBC59C0 VA: 0xBC59C0
[ClassInterfaceAttribute] // RVA: 0xBC59C0 Offset: 0xBC59C0 VA: 0xBC59C0
[ComDefaultInterfaceAttribute] // RVA: 0xBC59C0 Offset: 0xBC59C0 VA: 0xBC59C0
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 335
{
	// Fields
	internal ILGenerator ilgen; // 0x20

	// Methods

	// RVA: 0x22D973C Offset: 0x22D973C VA: 0x22D973C
	internal void .ctor(Type t, ILGenerator ilgen) { }
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xBC5A4C Offset: 0xBC5A4C VA: 0xBC5A4C
[ComVisibleAttribute] // RVA: 0xBC5A4C Offset: 0xBC5A4C VA: 0xBC5A4C
[ClassInterfaceAttribute] // RVA: 0xBC5A4C Offset: 0xBC5A4C VA: 0xBC5A4C
public sealed class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 336
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private Type rtype; // 0x18
	internal Type[] parameters; // 0x20
	private MethodAttributes attrs; // 0x28
	private MethodImplAttributes iattrs; // 0x2C
	private string name; // 0x30
	private int table_idx; // 0x38
	private byte[] code; // 0x40
	private ILGenerator ilgen; // 0x48
	private TypeBuilder type; // 0x50
	internal ParameterBuilder[] pinfo; // 0x58
	private CustomAttributeBuilder[] cattrs; // 0x60
	private MethodInfo override_method; // 0x68
	private string pi_dll; // 0x70
	private string pi_entry; // 0x78
	private CharSet charset; // 0x80
	private uint extra_flags; // 0x84
	private CallingConvention native_cc; // 0x88
	private CallingConventions call_conv; // 0x8C
	private bool init_locals; // 0x90
	private IntPtr generic_container; // 0x98
	internal GenericTypeParameterBuilder[] generic_params; // 0xA0
	private Type[] returnModReq; // 0xA8
	private Type[] returnModOpt; // 0xB0
	private Type[][] paramModReq; // 0xB8
	private Type[][] paramModOpt; // 0xC0
	private RefEmitPermissionSet[] permissions; // 0xC8

	// Properties
	public override bool ContainsGenericParameters { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Type ReturnType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x22DAEB0 Offset: 0x22DAEB0 VA: 0x22DAEB0
	internal void .ctor(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }

	// RVA: 0x22DB1F0 Offset: 0x22DB1F0 VA: 0x22DB1F0 Slot: 27
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x22DB258 Offset: 0x22DB258 VA: 0x22DB258 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x22DB30C Offset: 0x22DB30C VA: 0x22DB30C Slot: 31
	public override Type get_ReturnType() { }

	// RVA: 0x22DB314 Offset: 0x22DB314 VA: 0x22DB314 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22D8D74 Offset: 0x22D8D74 VA: 0x22D8D74 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22DB31C Offset: 0x22DB31C VA: 0x22DB31C Slot: 8
	public override string get_Name() { }

	// RVA: 0x22DB324 Offset: 0x22DB324 VA: 0x22DB324 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x22DB32C Offset: 0x22DB32C VA: 0x22DB32C Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x22DB1E4 Offset: 0x22DB1E4 VA: 0x22DB1E4
	public MethodToken GetToken() { }

	// RVA: 0x22DB334 Offset: 0x22DB334 VA: 0x22DB334 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	// RVA: 0x22DB338 Offset: 0x22DB338 VA: 0x22DB338 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x22DB524 Offset: 0x22DB524 VA: 0x22DB524 Slot: 15
	internal override int GetParameterCount() { }

	// RVA: 0x22DB53C Offset: 0x22DB53C VA: 0x22DB53C Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x22DB588 Offset: 0x22DB588 VA: 0x22DB588 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22DB5D4 Offset: 0x22DB5D4 VA: 0x22DB5D4 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22DB680 Offset: 0x22DB680 VA: 0x22DB680 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22DB734 Offset: 0x22DB734 VA: 0x22DB734
	public ILGenerator GetILGenerator() { }

	// RVA: 0x22DB73C Offset: 0x22DB73C VA: 0x22DB73C
	public ILGenerator GetILGenerator(int size) { }

	// RVA: 0x22DB950 Offset: 0x22DB950 VA: 0x22DB950
	internal void check_override() { }

	// RVA: 0x22DBA70 Offset: 0x22DBA70 VA: 0x22DBA70
	internal void fixup() { }

	// RVA: 0x22DBBD4 Offset: 0x22DBBD4 VA: 0x22DBBD4 Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0xBCCAC0 Offset: 0xBCCAC0 VA: 0xBCCAC0
	// RVA: 0x22DBE04 Offset: 0x22DBE04 VA: 0x22DBE04 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22DBE0C Offset: 0x22DBE0C VA: 0x22DBE0C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x22DB198 Offset: 0x22DB198 VA: 0x22DB198 Slot: 25
	internal override int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x22DBE3C Offset: 0x22DBE3C VA: 0x22DBE3C
	internal void set_override(MethodInfo mdecl) { }

	// RVA: 0x22DB2A4 Offset: 0x22DB2A4 VA: 0x22DB2A4
	private Exception NotSupported() { }

	// RVA: 0x22DBE44 Offset: 0x22DBE44 VA: 0x22DBE44 Slot: 32
	public override MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	// RVA: 0x22DBE48 Offset: 0x22DBE48 VA: 0x22DBE48 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x22DBE58 Offset: 0x22DBE58 VA: 0x22DBE58 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x22DBE68 Offset: 0x22DBE68 VA: 0x22DBE68 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x22DBFCC Offset: 0x22DBFCC VA: 0x22DBFCC Slot: 10
	public override Module get_Module() { }
}

