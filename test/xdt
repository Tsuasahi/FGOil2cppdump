	protected override bool HasElementTypeImpl() { }

	// RVA: 0x10FF434 Offset: 0x10FF434 VA: 0x10FF434 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x10FF43C Offset: 0x10FF43C VA: 0x10FF43C Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x10FF444 Offset: 0x10FF444 VA: 0x10FF444 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x10FF44C Offset: 0x10FF44C VA: 0x10FF44C Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x10FF454 Offset: 0x10FF454 VA: 0x10FF454 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x10FF4BC Offset: 0x10FF4BC VA: 0x10FF4BC Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x10FF524 Offset: 0x10FF524 VA: 0x10FF524 Slot: 42
	public override bool IsInstanceOfType(object o) { }

	// RVA: 0x10FF52C Offset: 0x10FF52C VA: 0x10FF52C Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x10FF534 Offset: 0x10FF534 VA: 0x10FF534 Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x10FF56C Offset: 0x10FF56C VA: 0x10FF56C Slot: 89
	public override Type MakeGenericType(Type[] typeArguments) { }

	// RVA: 0x10FF5D4 Offset: 0x10FF5D4 VA: 0x10FF5D4 Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x10FF63C Offset: 0x10FF63C VA: 0x10FF63C Slot: 92
	public override Type MakeByRefType() { }

	// RVA: 0x10FF69C Offset: 0x10FF69C VA: 0x10FF69C Slot: 3
	public override string ToString() { }

	// RVA: 0x10FF6EC Offset: 0x10FF6EC VA: 0x10FF6EC Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x10FF724 Offset: 0x10FF724 VA: 0x10FF724 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x10FF834 Offset: 0x10FF834 VA: 0x10FF834 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x10FF888 Offset: 0x10FF888 VA: 0x10FF888 Slot: 8
	public override string get_Name() { }

	// RVA: 0x10FF8D8 Offset: 0x10FF8D8 VA: 0x10FF8D8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x10FF90C Offset: 0x10FF90C VA: 0x10FF90C Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x10FF944 Offset: 0x10FF944 VA: 0x10FF944 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x10FF9AC Offset: 0x10FF9AC VA: 0x10FF9AC Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x10FF9D0 Offset: 0x10FF9D0 VA: 0x10FF9D0 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x10FFA38 Offset: 0x10FFA38 VA: 0x10FFA38 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x10FFAA0 Offset: 0x10FFAA0 VA: 0x10FFAA0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection.Emit
internal class ArrayType : DerivedType // TypeDefIndex: 322
{
	// Fields
	private int rank; // 0x20

	// Properties
	public override Type BaseType { get; }

	// Methods

	// RVA: 0x1083798 Offset: 0x1083798 VA: 0x1083798
	internal void .ctor(Type elementType, int rank) { }

	// RVA: 0x10837C4 Offset: 0x10837C4 VA: 0x10837C4 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x10837CC Offset: 0x10837CC VA: 0x10837CC Slot: 43
	public override int GetArrayRank() { }

	// RVA: 0x10837DC Offset: 0x10837DC VA: 0x10837DC Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x108384C Offset: 0x108384C VA: 0x108384C Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x10839F0 Offset: 0x10839F0 VA: 0x10839F0 Slot: 93
	internal override string FormatName(string elementName) { }
}

// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType // TypeDefIndex: 323
{
	// Properties
	public override Type BaseType { get; }

	// Methods

	// RVA: 0x10FD8C4 Offset: 0x10FD8C4 VA: 0x10FD8C4
	internal void .ctor(Type elementType) { }

	// RVA: 0x10FD944 Offset: 0x10FD944 VA: 0x10FD944 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x10FD94C Offset: 0x10FD94C VA: 0x10FD94C Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x10FD9BC Offset: 0x10FD9BC VA: 0x10FD9BC Slot: 93
	internal override string FormatName(string elementName) { }

	// RVA: 0x10FDA44 Offset: 0x10FDA44 VA: 0x10FDA44 Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x10FDAB8 Offset: 0x10FDAB8 VA: 0x10FDAB8 Slot: 92
	public override Type MakeByRefType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC3187C Offset: 0xC3187C VA: 0xC3187C
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 324
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private string name; // 0x18
	private Type returnType; // 0x20
	private Type[] parameters; // 0x28
	private MethodAttributes attributes; // 0x30
	private CallingConventions callingConvention; // 0x34
	private Module module; // 0x38
	private bool skipVisibility; // 0x40
	private bool init_locals; // 0x41
	private ILGenerator ilgen; // 0x48
	private int nrefs; // 0x50
	private object[] refs; // 0x58
	private IntPtr referenced_by; // 0x60
	private Type owner; // 0x68
	private Delegate deleg; // 0x70
	private MonoMethod method; // 0x78
	private ParameterBuilder[] pinfo; // 0x80
	internal bool creating; // 0x88

	// Properties
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type DeclaringType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }
	public override Type ReturnType { get; }

	// Methods

	// RVA: 0x10FFB08 Offset: 0x10FFB08 VA: 0x10FFB08
	private void create_dynamic_method(DynamicMethod m) { }

	// RVA: 0x10FFB7C Offset: 0x10FFB7C VA: 0x10FFB7C
	private void destroy_dynamic_method(DynamicMethod m) { }

	// RVA: 0x10FFBF0 Offset: 0x10FFBF0 VA: 0x10FFBF0
	private void CreateDynMethod() { }

	// RVA: 0x10FFEDC Offset: 0x10FFEDC VA: 0x10FFEDC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10FFF54 Offset: 0x10FFF54 VA: 0x10FFF54 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	[MonoTODOAttribute] // RVA: 0xC38A50 Offset: 0xC38A50 VA: 0xC38A50
	// RVA: 0x10FFF58 Offset: 0x10FFF58 VA: 0x10FFF58 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	[MonoTODOAttribute] // RVA: 0xC38A88 Offset: 0xC38A88 VA: 0xC38A88
	// RVA: 0x10FFFC0 Offset: 0x10FFFC0 VA: 0x10FFFC0 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1100028 Offset: 0x1100028 VA: 0x1100028 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x11001E8 Offset: 0x11001E8 VA: 0x11001E8 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	[MonoTODOAttribute] // RVA: 0xC38AC0 Offset: 0xC38AC0 VA: 0xC38AC0
	// RVA: 0x11003DC Offset: 0x11003DC VA: 0x11003DC Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1100444 Offset: 0x1100444 VA: 0x1100444 Slot: 3
	public override string ToString() { }

	// RVA: 0x110081C Offset: 0x110081C VA: 0x110081C Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x1100824 Offset: 0x1100824 VA: 0x1100824 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x110082C Offset: 0x110082C VA: 0x110082C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x1100834 Offset: 0x1100834 VA: 0x1100834 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x110083C Offset: 0x110083C VA: 0x110083C Slot: 10
	public override Module get_Module() { }

	// RVA: 0x1100814 Offset: 0x1100814 VA: 0x1100814 Slot: 8
	public override string get_Name() { }

	// RVA: 0x1100844 Offset: 0x1100844 VA: 0x1100844 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x110080C Offset: 0x110080C VA: 0x110080C Slot: 31
	public override Type get_ReturnType() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31890 Offset: 0xC31890 VA: 0xC31890
[ComDefaultInterfaceAttribute] // RVA: 0xC31890 Offset: 0xC31890 VA: 0xC31890
[ClassInterfaceAttribute] // RVA: 0xC31890 Offset: 0xC31890 VA: 0xC31890
public sealed class EnumBuilder : Type, _EnumBuilder // TypeDefIndex: 325
{
	// Fields
	private TypeBuilder _tb; // 0x18
	private Type _underlyingType; // 0x20

	// Properties
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override string FullName { get; }
	public override Module Module { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x110084C Offset: 0x110084C VA: 0x110084C Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x11008B4 Offset: 0x11008B4 VA: 0x11008B4 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x1100994 Offset: 0x1100994 VA: 0x1100994 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x11009C8 Offset: 0x11009C8 VA: 0x11009C8 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x11009FC Offset: 0x11009FC VA: 0x11009FC Slot: 18
	public override string get_FullName() { }

	// RVA: 0x1100A30 Offset: 0x1100A30 VA: 0x1100A30 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x1100A5C Offset: 0x1100A5C VA: 0x1100A5C Slot: 8
	public override string get_Name() { }

	// RVA: 0x1100A88 Offset: 0x1100A88 VA: 0x1100A88 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x1100ABC Offset: 0x1100ABC VA: 0x1100ABC Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x1100AF0 Offset: 0x1100AF0 VA: 0x1100AF0 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x1100B5C Offset: 0x1100B5C VA: 0x1100B5C Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x1100B64 Offset: 0x1100B64 VA: 0x1100B64 Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x1100B90 Offset: 0x1100B90 VA: 0x1100B90 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0xC38AF8 Offset: 0xC38AF8 VA: 0xC38AF8
	// RVA: 0x1100BF8 Offset: 0x1100BF8 VA: 0x1100BF8 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x1100CEC Offset: 0x1100CEC VA: 0x1100CEC Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1100D64 Offset: 0x1100D64 VA: 0x1100D64 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1100DFC Offset: 0x1100DFC VA: 0x1100DFC Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x1100E7C Offset: 0x1100E7C VA: 0x1100E7C Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1100F18 Offset: 0x1100F18 VA: 0x1100F18 Slot: 47
	public override EventInfo[] GetEvents() { }

	// RVA: 0x1100F50 Offset: 0x1100F50 VA: 0x1100F50 Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x110104C Offset: 0x110104C VA: 0x110104C Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1101218 Offset: 0x1101218 VA: 0x1101218 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x1101434 Offset: 0x1101434 VA: 0x1101434 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x1101538 Offset: 0x1101538 VA: 0x1101538 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x11015E0 Offset: 0x11015E0 VA: 0x11015E0 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x1101630 Offset: 0x1101630 VA: 0x1101630 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x1101858 Offset: 0x1101858 VA: 0x1101858 Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x1101AB0 Offset: 0x1101AB0 VA: 0x1101AB0 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x1101B64 Offset: 0x1101B64 VA: 0x1101B64 Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x1101B94 Offset: 0x1101B94 VA: 0x1101B94 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x1101CC0 Offset: 0x1101CC0 VA: 0x1101CC0 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x1101CC8 Offset: 0x1101CC8 VA: 0x1101CC8 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x1101CD0 Offset: 0x1101CD0 VA: 0x1101CD0 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x1101CD8 Offset: 0x1101CD8 VA: 0x1101CD8 Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x1101CE0 Offset: 0x1101CE0 VA: 0x1101CE0 Slot: 76
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x1101CE8 Offset: 0x1101CE8 VA: 0x1101CE8 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1101DF8 Offset: 0x1101DF8 VA: 0x1101DF8 Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x1101E60 Offset: 0x1101E60 VA: 0x1101E60 Slot: 92
	public override Type MakeByRefType() { }

	// RVA: 0x1101AFC Offset: 0x1101AFC VA: 0x1101AFC
	private Exception CreateNotSupportedException() { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0xC3191C Offset: 0xC3191C VA: 0xC3191C
[ComDefaultInterfaceAttribute] // RVA: 0xC3191C Offset: 0xC3191C VA: 0xC3191C
[ComVisibleAttribute] // RVA: 0xC3191C Offset: 0xC3191C VA: 0xC3191C
public sealed class EventBuilder : _EventBuilder // TypeDefIndex: 326
{}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xC319A8 Offset: 0xC319A8 VA: 0xC319A8
[ClassInterfaceAttribute] // RVA: 0xC319A8 Offset: 0xC319A8 VA: 0xC319A8
[ComVisibleAttribute] // RVA: 0xC319A8 Offset: 0xC319A8 VA: 0xC319A8
public sealed class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 327
{
	// Fields
	private FieldAttributes attrs; // 0x10
	private Type type; // 0x18
	private string name; // 0x20
	internal TypeBuilder typeb; // 0x28
	private UnmanagedMarshal marshal_info; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override string Name { get; }
	public override Type ReflectedType { get; }
	internal override UnmanagedMarshal UMarshal { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x1101EC0 Offset: 0x1101EC0 VA: 0x1101EC0 Slot: 14
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x1101EC8 Offset: 0x1101EC8 VA: 0x1101EC8 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x1101ED0 Offset: 0x1101ED0 VA: 0x1101ED0 Slot: 15
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x1101F84 Offset: 0x1101F84 VA: 0x1101F84 Slot: 16
	public override Type get_FieldType() { }

	// RVA: 0x1101F8C Offset: 0x1101F8C VA: 0x1101F8C Slot: 8
	public override string get_Name() { }

	// RVA: 0x1101F94 Offset: 0x1101F94 VA: 0x1101F94 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x1101F9C Offset: 0x1101F9C VA: 0x1101F9C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1102048 Offset: 0x1102048 VA: 0x1102048 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x11020FC Offset: 0x11020FC VA: 0x11020FC Slot: 17
	public override object GetValue(object obj) { }

	// RVA: 0x1102148 Offset: 0x1102148 VA: 0x1102148 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1102194 Offset: 0x1102194 VA: 0x1102194 Slot: 24
	internal override int GetFieldOffset() { }

	// RVA: 0x110219C Offset: 0x110219C VA: 0x110219C Slot: 22
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x11021E8 Offset: 0x11021E8 VA: 0x11021E8 Slot: 25
	internal override UnmanagedMarshal get_UMarshal() { }

	// RVA: 0x1101F1C Offset: 0x1101F1C VA: 0x1101F1C
	private Exception CreateNotSupportedException() { }

	// RVA: 0x11021F0 Offset: 0x11021F0 VA: 0x11021F0 Slot: 10
	public override Module get_Module() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31A34 Offset: 0xC31A34 VA: 0xC31A34
public sealed class GenericTypeParameterBuilder : Type // TypeDefIndex: 328
{
	// Fields
	private TypeBuilder tbuilder; // 0x18
	private MethodBuilder mbuilder; // 0x20
	private string name; // 0x28
	private Type base_type; // 0x30

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }
	public override bool IsGenericType { get; }
	public override bool IsGenericTypeDefinition { get; }

	// Methods

	[ComVisibleAttribute] // RVA: 0xC38B0C Offset: 0xC38B0C VA: 0xC38B0C
	// RVA: 0x11021F4 Offset: 0x11021F4 VA: 0x11021F4 Slot: 39
	public override bool IsSubclassOf(Type c) { }

	// RVA: 0x110241C Offset: 0x110241C VA: 0x110241C Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x11025A8 Offset: 0x11025A8 VA: 0x11025A8 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	[ComVisibleAttribute] // RVA: 0xC38B20 Offset: 0xC38B20 VA: 0xC38B20
	// RVA: 0x11025F4 Offset: 0x11025F4 VA: 0x11025F4 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x1102640 Offset: 0x1102640 VA: 0x1102640 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x110268C Offset: 0x110268C VA: 0x110268C Slot: 47
	public override EventInfo[] GetEvents() { }

	// RVA: 0x11026D8 Offset: 0x11026D8 VA: 0x11026D8 Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x1102724 Offset: 0x1102724 VA: 0x1102724 Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1102770 Offset: 0x1102770 VA: 0x1102770 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x11027BC Offset: 0x11027BC VA: 0x11027BC Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x1102808 Offset: 0x1102808 VA: 0x1102808 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x1102854 Offset: 0x1102854 VA: 0x1102854 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x11028A0 Offset: 0x11028A0 VA: 0x11028A0 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x11028EC Offset: 0x11028EC VA: 0x11028EC Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x1102938 Offset: 0x1102938 VA: 0x1102938 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x1102984 Offset: 0x1102984 VA: 0x1102984 Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x110298C Offset: 0x110298C VA: 0x110298C Slot: 41
	public override bool IsAssignableFrom(Type c) { }

	// RVA: 0x11029D8 Offset: 0x11029D8 VA: 0x11029D8 Slot: 42
	public override bool IsInstanceOfType(object o) { }

	// RVA: 0x1102A24 Offset: 0x1102A24 VA: 0x1102A24 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x1102A2C Offset: 0x1102A2C VA: 0x1102A2C Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x1102A34 Offset: 0x1102A34 VA: 0x1102A34 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x1102A3C Offset: 0x1102A3C VA: 0x1102A3C Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x1102A44 Offset: 0x1102A44 VA: 0x1102A44 Slot: 76
	protected override bool IsValueTypeImpl() { }

	// RVA: 0x1102A58 Offset: 0x1102A58 VA: 0x1102A58 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x1102AA4 Offset: 0x1102AA4 VA: 0x1102AA4 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x1102AF0 Offset: 0x1102AF0 VA: 0x1102AF0 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x1102AF4 Offset: 0x1102AF4 VA: 0x1102AF4 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x1102B30 Offset: 0x1102B30 VA: 0x1102B30 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x1102414 Offset: 0x1102414 VA: 0x1102414 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x1102B38 Offset: 0x1102B38 VA: 0x1102B38 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x1102B40 Offset: 0x1102B40 VA: 0x1102B40 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1102B8C Offset: 0x1102B8C VA: 0x1102B8C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1102BD8 Offset: 0x1102BD8 VA: 0x1102BD8 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1102C24 Offset: 0x1102C24 VA: 0x1102C24 Slot: 8
	public override string get_Name() { }

	// RVA: 0x1102C2C Offset: 0x1102C2C VA: 0x1102C2C Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x1102C34 Offset: 0x1102C34 VA: 0x1102C34 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x1102C60 Offset: 0x1102C60 VA: 0x1102C60 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x1102C84 Offset: 0x1102C84 VA: 0x1102C84 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x1102CA0 Offset: 0x1102CA0 VA: 0x1102CA0 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x1102CEC Offset: 0x1102CEC VA: 0x1102CEC Slot: 84
	public override Type[] GetGenericArguments() { }

	// RVA: 0x1102D54 Offset: 0x1102D54 VA: 0x1102D54 Slot: 87
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x1102DBC Offset: 0x1102DBC VA: 0x1102DBC Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x1102DC4 Offset: 0x1102DC4 VA: 0x1102DC4 Slot: 90
	public override bool get_IsGenericParameter() { }

	// RVA: 0x1102DCC Offset: 0x1102DCC VA: 0x1102DCC Slot: 88
	public override bool get_IsGenericType() { }

	// RVA: 0x1102DD4 Offset: 0x1102DD4 VA: 0x1102DD4 Slot: 86
	public override bool get_IsGenericTypeDefinition() { }

	// RVA: 0x11023B8 Offset: 0x11023B8 VA: 0x11023B8
	private Exception not_supported() { }

	// RVA: 0x1102DDC Offset: 0x1102DDC VA: 0x1102DDC Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0xC38B34 Offset: 0xC38B34 VA: 0xC38B34
	// RVA: 0x1102DE4 Offset: 0x1102DE4 VA: 0x1102DE4 Slot: 0
	public override bool Equals(object o) { }

	[MonoTODOAttribute] // RVA: 0xC38B44 Offset: 0xC38B44 VA: 0xC38B44
	// RVA: 0x1102DEC Offset: 0x1102DEC VA: 0x1102DEC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1102DF4 Offset: 0x1102DF4 VA: 0x1102DF4 Slot: 91
	public override Type MakeArrayType() { }

	// RVA: 0x1102E5C Offset: 0x1102E5C VA: 0x1102E5C Slot: 92
	public override Type MakeByRefType() { }

	[MonoTODOAttribute] // RVA: 0xC38B54 Offset: 0xC38B54 VA: 0xC38B54
	// RVA: 0x1102EBC Offset: 0x1102EBC VA: 0x1102EBC Slot: 89
	public override Type MakeGenericType(Type[] typeArguments) { }
}

// Namespace: System.Reflection.Emit
internal struct ILTokenInfo // TypeDefIndex: 329
{
	// Fields
	public MemberInfo member; // 0x0
	public int code_pos; // 0x8
}

// Namespace: System.Reflection.Emit
internal interface TokenGenerator // TypeDefIndex: 330
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetToken(string str);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetToken(MemberInfo member);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetToken(MethodInfo method, Type[] opt_param_types);
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0xC31A48 Offset: 0xC31A48 VA: 0xC31A48
[ComVisibleAttribute] // RVA: 0xC31A48 Offset: 0xC31A48 VA: 0xC31A48
[ComDefaultInterfaceAttribute] // RVA: 0xC31A48 Offset: 0xC31A48 VA: 0xC31A48
public class ILGenerator : _ILGenerator // TypeDefIndex: 331
{
	// Fields
	private static readonly Type void_type; // 0x0
	private byte[] code; // 0x10
	private int code_len; // 0x18
	private int max_stack; // 0x1C
	private int cur_stack; // 0x20
	private LocalBuilder[] locals; // 0x28
	private int num_token_fixups; // 0x30
	private ILTokenInfo[] token_fixups; // 0x38
	private ILGenerator.LabelData[] labels; // 0x40
	private int num_labels; // 0x48
	private ILGenerator.LabelFixup[] fixups; // 0x50
	private int num_fixups; // 0x58
	internal Module module; // 0x60
	private TokenGenerator token_gen; // 0x68

	// Methods

	// RVA: 0x10FE940 Offset: 0x10FE940 VA: 0x10FE940
	internal void .ctor(Module m, TokenGenerator token_gen, int size) { }

	// RVA: 0x1102EC4 Offset: 0x1102EC4 VA: 0x1102EC4
	private static void .cctor() { }

	// RVA: 0x1102F4C Offset: 0x1102F4C VA: 0x1102F4C
	private void add_token_fixup(MemberInfo mi) { }

	// RVA: 0x110307C Offset: 0x110307C VA: 0x110307C
	private void make_room(int nbytes) { }

	// RVA: 0x1103140 Offset: 0x1103140 VA: 0x1103140
	private void emit_int(int val) { }

	// RVA: 0x1103274 Offset: 0x1103274 VA: 0x1103274
	private void ll_emit(OpCode opcode) { }

	// RVA: 0x11033D0 Offset: 0x11033D0 VA: 0x11033D0
	private static int target_len(OpCode opcode) { }

	// RVA: 0x11033E8 Offset: 0x11033E8 VA: 0x11033E8 Slot: 4
	public virtual LocalBuilder DeclareLocal(Type localType) { }

	// RVA: 0x11033F8 Offset: 0x11033F8 VA: 0x11033F8 Slot: 5
	public virtual LocalBuilder DeclareLocal(Type localType, bool pinned) { }

	// RVA: 0x1103680 Offset: 0x1103680 VA: 0x1103680 Slot: 6
	public virtual Label DefineLabel() { }

	// RVA: 0x110379C Offset: 0x110379C VA: 0x110379C Slot: 7
	public virtual void Emit(OpCode opcode) { }

	// RVA: 0x11037CC Offset: 0x11037CC VA: 0x11037CC Slot: 8
	public virtual void Emit(OpCode opcode, byte arg) { }

	[ComVisibleAttribute] // RVA: 0xC38B64 Offset: 0xC38B64 VA: 0xC38B64
	// RVA: 0x110384C Offset: 0x110384C VA: 0x110384C Slot: 9
	public virtual void Emit(OpCode opcode, ConstructorInfo con) { }

	// RVA: 0x11039CC Offset: 0x11039CC VA: 0x11039CC Slot: 10
	public virtual void Emit(OpCode opcode, FieldInfo field) { }

	// RVA: 0x1103B10 Offset: 0x1103B10 VA: 0x1103B10 Slot: 11
	public virtual void Emit(OpCode opcode, int arg) { }

	// RVA: 0x1103B58 Offset: 0x1103B58 VA: 0x1103B58 Slot: 12
	public virtual void Emit(OpCode opcode, Label label) { }

	// RVA: 0x1103DC4 Offset: 0x1103DC4 VA: 0x1103DC4 Slot: 13
	public virtual void Emit(OpCode opcode, LocalBuilder local) { }

	// RVA: 0x1104230 Offset: 0x1104230 VA: 0x1104230 Slot: 14
	public virtual void Emit(OpCode opcode, MethodInfo meth) { }

	// RVA: 0x1104568 Offset: 0x1104568 VA: 0x1104568
	private void Emit(OpCode opcode, MethodInfo method, int token) { }

	// RVA: 0x11046B8 Offset: 0x11046B8 VA: 0x11046B8 Slot: 15
	public virtual void Emit(OpCode opcode, string str) { }

	// RVA: 0x11047A8 Offset: 0x11047A8 VA: 0x11047A8 Slot: 16
	public virtual void Emit(OpCode opcode, Type cls) { }

	[MonoLimitationAttribute] // RVA: 0xC38B78 Offset: 0xC38B78 VA: 0xC38B78
	// RVA: 0x1104898 Offset: 0x1104898 VA: 0x1104898 Slot: 17
	public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) { }

	// RVA: 0x1104B70 Offset: 0x1104B70 VA: 0x1104B70 Slot: 18
	public virtual void MarkLabel(Label loc) { }

	// RVA: 0x10FEC30 Offset: 0x10FEC30 VA: 0x10FEC30
	internal void label_fixup() { }

	[ObsoleteAttribute] // RVA: 0xC38BB0 Offset: 0xC38BB0 VA: 0xC38BB0
	// RVA: 0x10FEC08 Offset: 0x10FEC08 VA: 0x10FEC08
	internal static int Mono_GetCurrentOffset(ILGenerator ig) { }
}

// Namespace: 
private struct ILGenerator.LabelFixup // TypeDefIndex: 332
{
	// Fields
	public int offset; // 0x0
	public int pos; // 0x4
	public int label_idx; // 0x8
}

// Namespace: 
private struct ILGenerator.LabelData // TypeDefIndex: 333
{
	// Fields
	public int addr; // 0x0
	public int maxStack; // 0x4

	// Methods

	// RVA: 0xBBB138 Offset: 0xBBB138 VA: 0xBBB138
	public void .ctor(int addr, int maxStack) { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31AD4 Offset: 0xC31AD4 VA: 0xC31AD4
[Serializable]
public struct Label // TypeDefIndex: 334
{
	// Fields
	internal int label; // 0x0

	// Methods

	// RVA: 0xBBB18C Offset: 0xBBB18C VA: 0xBBB18C
	internal void .ctor(int val) { }

	// RVA: 0xBBB194 Offset: 0xBBB194 VA: 0xBBB194 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBB19C Offset: 0xBBB19C VA: 0xBBB19C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31AE8 Offset: 0xC31AE8 VA: 0xC31AE8
[ClassInterfaceAttribute] // RVA: 0xC31AE8 Offset: 0xC31AE8 VA: 0xC31AE8
[ComDefaultInterfaceAttribute] // RVA: 0xC31AE8 Offset: 0xC31AE8 VA: 0xC31AE8
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 335
{
	// Fields
	internal ILGenerator ilgen; // 0x20

	// Methods

	// RVA: 0x1103644 Offset: 0x1103644 VA: 0x1103644
	internal void .ctor(Type t, ILGenerator ilgen) { }
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xC31B74 Offset: 0xC31B74 VA: 0xC31B74
[ComVisibleAttribute] // RVA: 0xC31B74 Offset: 0xC31B74 VA: 0xC31B74
[ClassInterfaceAttribute] // RVA: 0xC31B74 Offset: 0xC31B74 VA: 0xC31B74
public sealed class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 336
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private Type rtype; // 0x18
	internal Type[] parameters; // 0x20
	private MethodAttributes attrs; // 0x28
	private MethodImplAttributes iattrs; // 0x2C
	private string name; // 0x30
	private int table_idx; // 0x38
	private byte[] code; // 0x40
	private ILGenerator ilgen; // 0x48
	private TypeBuilder type; // 0x50
	internal ParameterBuilder[] pinfo; // 0x58
	private CustomAttributeBuilder[] cattrs; // 0x60
	private MethodInfo override_method; // 0x68
	private string pi_dll; // 0x70
	private string pi_entry; // 0x78
	private CharSet charset; // 0x80
	private uint extra_flags; // 0x84
	private CallingConvention native_cc; // 0x88
	private CallingConventions call_conv; // 0x8C
	private bool init_locals; // 0x90
	private IntPtr generic_container; // 0x98
	internal GenericTypeParameterBuilder[] generic_params; // 0xA0
	private Type[] returnModReq; // 0xA8
	private Type[] returnModOpt; // 0xB0
	private Type[][] paramModReq; // 0xB8
	private Type[][] paramModOpt; // 0xC0
	private RefEmitPermissionSet[] permissions; // 0xC8

	// Properties
	public override bool ContainsGenericParameters { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Type ReturnType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override Module Module { get; }

	// Methods

	// RVA: 0x1104DB8 Offset: 0x1104DB8 VA: 0x1104DB8
	internal void .ctor(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }

	// RVA: 0x11050F8 Offset: 0x11050F8 VA: 0x11050F8 Slot: 27
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x1105160 Offset: 0x1105160 VA: 0x1105160 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x1105214 Offset: 0x1105214 VA: 0x1105214 Slot: 31
	public override Type get_ReturnType() { }

	// RVA: 0x110521C Offset: 0x110521C VA: 0x110521C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x1102C7C Offset: 0x1102C7C VA: 0x1102C7C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x1105224 Offset: 0x1105224 VA: 0x1105224 Slot: 8
	public override string get_Name() { }

	// RVA: 0x110522C Offset: 0x110522C VA: 0x110522C Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x1105234 Offset: 0x1105234 VA: 0x1105234 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x11050EC Offset: 0x11050EC VA: 0x11050EC
	public MethodToken GetToken() { }

	// RVA: 0x110523C Offset: 0x110523C VA: 0x110523C Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	// RVA: 0x1105240 Offset: 0x1105240 VA: 0x1105240 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x110542C Offset: 0x110542C VA: 0x110542C Slot: 15
	internal override int GetParameterCount() { }

	// RVA: 0x1105444 Offset: 0x1105444 VA: 0x1105444 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x1105490 Offset: 0x1105490 VA: 0x1105490 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x11054DC Offset: 0x11054DC VA: 0x11054DC Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1105588 Offset: 0x1105588 VA: 0x1105588 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x110563C Offset: 0x110563C VA: 0x110563C
	public ILGenerator GetILGenerator() { }

	// RVA: 0x1105644 Offset: 0x1105644 VA: 0x1105644
	public ILGenerator GetILGenerator(int size) { }

	// RVA: 0x1105858 Offset: 0x1105858 VA: 0x1105858
	internal void check_override() { }

	// RVA: 0x1105978 Offset: 0x1105978 VA: 0x1105978
	internal void fixup() { }

	// RVA: 0x1105ADC Offset: 0x1105ADC VA: 0x1105ADC Slot: 3
	public override string ToString() { }

	[MonoTODOAttribute] // RVA: 0xC38BE8 Offset: 0xC38BE8 VA: 0xC38BE8
	// RVA: 0x1105D0C Offset: 0x1105D0C VA: 0x1105D0C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1105D14 Offset: 0x1105D14 VA: 0x1105D14 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x11050A0 Offset: 0x11050A0 VA: 0x11050A0 Slot: 25
	internal override int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x1105D44 Offset: 0x1105D44 VA: 0x1105D44
	internal void set_override(MethodInfo mdecl) { }

	// RVA: 0x11051AC Offset: 0x11051AC VA: 0x11051AC
	private Exception NotSupported() { }

	// RVA: 0x1105D4C Offset: 0x1105D4C VA: 0x1105D4C Slot: 32
	public override MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	// RVA: 0x1105D50 Offset: 0x1105D50 VA: 0x1105D50 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x1105D60 Offset: 0x1105D60 VA: 0x1105D60 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x1105D70 Offset: 0x1105D70 VA: 0x1105D70 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x1105ED4 Offset: 0x1105ED4 VA: 0x1105ED4 Slot: 10
	public override Module get_Module() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31C00 Offset: 0xC31C00 VA: 0xC31C00
[Serializable]
public struct MethodToken // TypeDefIndex: 337
{
	// Fields
	internal int tokValue; // 0x0
	public static readonly MethodToken Empty; // 0x0

	// Properties
	public int Token { get; }

	// Methods

	// RVA: 0xBBB1A8 Offset: 0xBBB1A8 VA: 0xBBB1A8
	internal void .ctor(int val) { }

	// RVA: 0x1105ED8 Offset: 0x1105ED8 VA: 0x1105ED8
	private static void .cctor() { }

	// RVA: 0xBBB1B0 Offset: 0xBBB1B0 VA: 0xBBB1B0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBB1B8 Offset: 0xBBB1B8 VA: 0xBBB1B8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBBB1C0 Offset: 0xBBB1C0 VA: 0xBBB1C0
