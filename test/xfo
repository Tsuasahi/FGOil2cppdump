}

// Namespace: System.Net.Security
public enum ProtectionLevel // TypeDefIndex: 1464
{
	// Fields
	public int value__; // 0x0
	public const ProtectionLevel None = 0;
	public const ProtectionLevel Sign = 1;
	public const ProtectionLevel EncryptAndSign = 2;
}

// Namespace: System.Net.Security
[FlagsAttribute] // RVA: 0xBD0744 Offset: 0xBD0744 VA: 0xBD0744
public enum SslPolicyErrors // TypeDefIndex: 1465
{
	// Fields
	public int value__; // 0x0
	public const SslPolicyErrors None = 0;
	public const SslPolicyErrors RemoteCertificateNotAvailable = 1;
	public const SslPolicyErrors RemoteCertificateNameMismatch = 2;
	public const SslPolicyErrors RemoteCertificateChainErrors = 4;
}

// Namespace: System.Net.Security
[MonoTODOAttribute] // RVA: 0xBD0754 Offset: 0xBD0754 VA: 0xBD0754
public class SslStream : AuthenticatedStream // TypeDefIndex: 1466
{
	// Fields
	private SslStreamBase ssl_stream; // 0x20
	private RemoteCertificateValidationCallback validation_callback; // 0x28
	private LocalCertificateSelectionCallback selection_callback; // 0x30

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanTimeout { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	public override bool IsAuthenticated { get; }
	public override bool IsEncrypted { get; }
	public override bool IsMutuallyAuthenticated { get; }
	public override bool IsServer { get; }
	public override bool IsSigned { get; }
	public override int ReadTimeout { get; set; }
	public override int WriteTimeout { get; set; }
	public virtual bool CheckCertRevocationStatus { get; }
	public virtual CipherAlgorithmType CipherAlgorithm { get; }
	public virtual int CipherStrength { get; }
	public virtual HashAlgorithmType HashAlgorithm { get; }
	public virtual int HashStrength { get; }
	public virtual ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
	public virtual int KeyExchangeStrength { get; }
	public virtual X509Certificate LocalCertificate { get; }
	public virtual X509Certificate RemoteCertificate { get; }
	public virtual SslProtocols SslProtocol { get; }

	// Methods

	// RVA: 0x230E9E8 Offset: 0x230E9E8 VA: 0x230E9E8
	public void .ctor(Stream innerStream) { }

	// RVA: 0x230E9F4 Offset: 0x230E9F4 VA: 0x230E9F4
	public void .ctor(Stream innerStream, bool leaveStreamOpen) { }

	[MonoTODOAttribute] // RVA: 0xBD1888 Offset: 0xBD1888 VA: 0xBD1888
	// RVA: 0x230EA00 Offset: 0x230EA00 VA: 0x230EA00
	public void .ctor(Stream innerStream, bool leaveStreamOpen, RemoteCertificateValidationCallback certValidationCallback) { }

	[MonoTODOAttribute] // RVA: 0xBD18C0 Offset: 0xBD18C0 VA: 0xBD18C0
	// RVA: 0x230EA30 Offset: 0x230EA30 VA: 0x230EA30
	public void .ctor(Stream innerStream, bool leaveStreamOpen, RemoteCertificateValidationCallback certValidationCallback, LocalCertificateSelectionCallback certSelectionCallback) { }

	// RVA: 0x230EA6C Offset: 0x230EA6C VA: 0x230EA6C Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x230EAA4 Offset: 0x230EAA4 VA: 0x230EAA4 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x230EADC Offset: 0x230EADC VA: 0x230EADC Slot: 8
	public override bool get_CanTimeout() { }

	// RVA: 0x230EB14 Offset: 0x230EB14 VA: 0x230EB14 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x230EB4C Offset: 0x230EB4C VA: 0x230EB4C Slot: 9
	public override long get_Length() { }

	// RVA: 0x230EB84 Offset: 0x230EB84 VA: 0x230EB84 Slot: 10
	public override long get_Position() { }

	// RVA: 0x230EBBC Offset: 0x230EBBC VA: 0x230EBBC Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x230EC30 Offset: 0x230EC30 VA: 0x230EC30 Slot: 29
	public override bool get_IsAuthenticated() { }

	// RVA: 0x230EC40 Offset: 0x230EC40 VA: 0x230EC40 Slot: 30
	public override bool get_IsEncrypted() { }

	// RVA: 0x230EC50 Offset: 0x230EC50 VA: 0x230EC50 Slot: 31
	public override bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x230ECC8 Offset: 0x230ECC8 VA: 0x230ECC8 Slot: 32
	public override bool get_IsServer() { }

	// RVA: 0x230ED4C Offset: 0x230ED4C VA: 0x230ED4C Slot: 33
	public override bool get_IsSigned() { }

	// RVA: 0x230ED5C Offset: 0x230ED5C VA: 0x230ED5C Slot: 14
	public override int get_ReadTimeout() { }

	// RVA: 0x230ED98 Offset: 0x230ED98 VA: 0x230ED98 Slot: 15
	public override void set_ReadTimeout(int value) { }

	// RVA: 0x230EDDC Offset: 0x230EDDC VA: 0x230EDDC Slot: 16
	public override int get_WriteTimeout() { }

	// RVA: 0x230EE18 Offset: 0x230EE18 VA: 0x230EE18 Slot: 17
	public override void set_WriteTimeout(int value) { }

	// RVA: 0x230EE5C Offset: 0x230EE5C VA: 0x230EE5C Slot: 34
	public virtual bool get_CheckCertRevocationStatus() { }

	// RVA: 0x230EEB4 Offset: 0x230EEB4 VA: 0x230EEB4 Slot: 35
	public virtual CipherAlgorithmType get_CipherAlgorithm() { }

	// RVA: 0x230F084 Offset: 0x230F084 VA: 0x230F084 Slot: 36
	public virtual int get_CipherStrength() { }

	// RVA: 0x230F0BC Offset: 0x230F0BC VA: 0x230F0BC Slot: 37
	public virtual HashAlgorithmType get_HashAlgorithm() { }

	// RVA: 0x230F178 Offset: 0x230F178 VA: 0x230F178 Slot: 38
	public virtual int get_HashStrength() { }

	// RVA: 0x230F1B0 Offset: 0x230F1B0 VA: 0x230F1B0 Slot: 39
	public virtual ExchangeAlgorithmType get_KeyExchangeAlgorithm() { }

	// RVA: 0x230F27C Offset: 0x230F27C VA: 0x230F27C Slot: 40
	public virtual int get_KeyExchangeStrength() { }

	// RVA: 0x230F2B4 Offset: 0x230F2B4 VA: 0x230F2B4 Slot: 41
	public virtual X509Certificate get_LocalCertificate() { }

	// RVA: 0x230F450 Offset: 0x230F450 VA: 0x230F450 Slot: 42
	public virtual X509Certificate get_RemoteCertificate() { }

	// RVA: 0x230F5EC Offset: 0x230F5EC VA: 0x230F5EC Slot: 43
	public virtual SslProtocols get_SslProtocol() { }

	// RVA: 0x230F6C8 Offset: 0x230F6C8 VA: 0x230F6C8
	private X509Certificate OnCertificateSelection(X509CertificateCollection clientCerts, X509Certificate serverCert, string targetHost, X509CertificateCollection serverRequestedCerts) { }

	// RVA: 0x230F844 Offset: 0x230F844 VA: 0x230F844 Slot: 44
	public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x230F8E4 Offset: 0x230F8E4 VA: 0x230F8E4 Slot: 45
	public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols sslProtocolType, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x230FC10 Offset: 0x230FC10 VA: 0x230FC10 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x230FC88 Offset: 0x230FC88 VA: 0x230FC88 Slot: 46
	public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, AsyncCallback callback, object asyncState) { }

	// RVA: 0x230FCB4 Offset: 0x230FCB4 VA: 0x230FCB4 Slot: 47
	public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols sslProtocolType, bool checkCertificateRevocation, AsyncCallback callback, object asyncState) { }

	// RVA: 0x230FBE0 Offset: 0x230FBE0 VA: 0x230FBE0
	private SecurityProtocolType GetMonoSslProtocol(SslProtocols ms) { }

	// RVA: 0x230FF54 Offset: 0x230FF54 VA: 0x230FF54 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x230FFCC Offset: 0x230FFCC VA: 0x230FFCC Slot: 48
	public virtual void AuthenticateAsClient(string targetHost) { }

	// RVA: 0x2310054 Offset: 0x2310054 VA: 0x2310054 Slot: 49
	public virtual void AuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols sslProtocolType, bool checkCertificateRevocation) { }

	// RVA: 0x23100A0 Offset: 0x23100A0 VA: 0x23100A0 Slot: 50
	public virtual void AuthenticateAsServer(X509Certificate serverCertificate) { }

	// RVA: 0x23100BC Offset: 0x23100BC VA: 0x23100BC Slot: 51
	public virtual void AuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols sslProtocolType, bool checkCertificateRevocation) { }

	// RVA: 0x231010C Offset: 0x231010C VA: 0x231010C Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2310150 Offset: 0x2310150 VA: 0x2310150 Slot: 52
	public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult) { }

	// RVA: 0x23101C4 Offset: 0x23101C4 VA: 0x23101C4 Slot: 53
	public virtual void EndAuthenticateAsServer(IAsyncResult asyncResult) { }

	// RVA: 0x2310238 Offset: 0x2310238 VA: 0x2310238 Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x2310280 Offset: 0x2310280 VA: 0x2310280 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x23102C8 Offset: 0x23102C8 VA: 0x23102C8 Slot: 18
	public override void Flush() { }

	// RVA: 0x2310310 Offset: 0x2310310 VA: 0x2310310 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2310358 Offset: 0x2310358 VA: 0x2310358 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x23103CC Offset: 0x23103CC VA: 0x23103CC Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2310410 Offset: 0x2310410 VA: 0x2310410 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2310458 Offset: 0x2310458 VA: 0x2310458
	public void Write(byte[] buffer) { }

	// RVA: 0x230EFE8 Offset: 0x230EFE8 VA: 0x230EFE8
	private void CheckConnectionAuthenticated() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xBD078C Offset: 0xBD078C VA: 0xBD078C
private sealed class SslStream.<BeginAuthenticateAsClient>c__AnonStorey7 // TypeDefIndex: 1467
{
	// Fields
	internal X509CertificateCollection clientCertificates; // 0x10
	internal SslStream <>f__this; // 0x18

	// Methods

	// RVA: 0x230FBD8 Offset: 0x230FBD8 VA: 0x230FBD8
	public void .ctor() { }

	// RVA: 0x23104A0 Offset: 0x23104A0 VA: 0x23104A0
	internal AsymmetricAlgorithm <>m__7(X509Certificate cert, string host) { }

	// RVA: 0x2310764 Offset: 0x2310764 VA: 0x2310764
	internal bool <>m__8(X509Certificate cert, int[] certErrors) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xBD079C Offset: 0xBD079C VA: 0xBD079C
private sealed class SslStream.<BeginAuthenticateAsServer>c__AnonStorey8 // TypeDefIndex: 1468
{
	// Fields
	internal X509Certificate serverCertificate; // 0x10
	internal SslStream <>f__this; // 0x18

	// Methods

	// RVA: 0x230FF4C Offset: 0x230FF4C VA: 0x230FF4C
	public void .ctor() { }

	// RVA: 0x2310A94 Offset: 0x2310A94 VA: 0x2310A94
	internal AsymmetricAlgorithm <>m__9(X509Certificate cert, string targetHost) { }

	// RVA: 0x2310B48 Offset: 0x2310B48 VA: 0x2310B48
	internal bool <>m__A(X509Certificate cert, int[] certErrors) { }
}

// Namespace: System.Net.Sockets
public enum AddressFamily // TypeDefIndex: 1469
{
	// Fields
	public int value__; // 0x0
	public const AddressFamily Unknown = -1;
	public const AddressFamily Unspecified = 0;
	public const AddressFamily Unix = 1;
	public const AddressFamily InterNetwork = 2;
	public const AddressFamily ImpLink = 3;
	public const AddressFamily Pup = 4;
	public const AddressFamily Chaos = 5;
	public const AddressFamily NS = 6;
	public const AddressFamily Ipx = 6;
	public const AddressFamily Iso = 7;
	public const AddressFamily Osi = 7;
	public const AddressFamily Ecma = 8;
	public const AddressFamily DataKit = 9;
	public const AddressFamily Ccitt = 10;
	public const AddressFamily Sna = 11;
	public const AddressFamily DecNet = 12;
	public const AddressFamily DataLink = 13;
	public const AddressFamily Lat = 14;
	public const AddressFamily HyperChannel = 15;
	public const AddressFamily AppleTalk = 16;
	public const AddressFamily NetBios = 17;
	public const AddressFamily VoiceView = 18;
	public const AddressFamily FireFox = 19;
	public const AddressFamily Banyan = 21;
	public const AddressFamily Atm = 22;
	public const AddressFamily InterNetworkV6 = 23;
	public const AddressFamily Cluster = 24;
	public const AddressFamily Ieee12844 = 25;
	public const AddressFamily Irda = 26;
	public const AddressFamily NetworkDesigners = 28;
	public const AddressFamily Max = 29;
}

// Namespace: System.Net.Sockets
public enum IOControlCode // TypeDefIndex: 1470
{
	// Fields
	public long value__; // 0x0
	public const IOControlCode AbsorbRouterAlert = 2550136837;
	public const IOControlCode AddMulticastGroupOnInterface = 2550136842;
	public const IOControlCode AddressListChange = 671088663;
	public const IOControlCode AddressListQuery = 1207959574;
	public const IOControlCode AddressListSort = 3355443225;
	public const IOControlCode AssociateHandle = 2281701377;
	public const IOControlCode AsyncIO = 2147772029;
	public const IOControlCode BindToInterface = 2550136840;
	public const IOControlCode DataToRead = 1074030207;
	public const IOControlCode DeleteMulticastGroupFromInterface = 2550136843;
	public const IOControlCode EnableCircularQueuing = 671088642;
	public const IOControlCode Flush = 671088644;
	public const IOControlCode GetBroadcastAddress = 1207959557;
	public const IOControlCode GetExtensionFunctionPointer = 3355443206;
	public const IOControlCode GetGroupQos = 3355443208;
	public const IOControlCode GetQos = 3355443207;
	public const IOControlCode KeepAliveValues = 2550136836;
	public const IOControlCode LimitBroadcasts = 2550136839;
	public const IOControlCode MulticastInterface = 2550136841;
	public const IOControlCode MulticastScope = 2281701386;
	public const IOControlCode MultipointLoopback = 2281701385;
	public const IOControlCode NamespaceChange = 2281701401;
	public const IOControlCode NonBlockingIO = 2147772030;
	public const IOControlCode OobDataRead = 1074033415;
	public const IOControlCode QueryTargetPnpHandle = 1207959576;
	public const IOControlCode ReceiveAll = 2550136833;
	public const IOControlCode ReceiveAllIgmpMulticast = 2550136835;
	public const IOControlCode ReceiveAllMulticast = 2550136834;
	public const IOControlCode RoutingInterfaceChange = 2281701397;
	public const IOControlCode RoutingInterfaceQuery = 3355443220;
	public const IOControlCode SetGroupQos = 2281701388;
	public const IOControlCode SetQos = 2281701387;
	public const IOControlCode TranslateHandle = 3355443213;
	public const IOControlCode UnicastInterface = 2550136838;
}

// Namespace: System.Net.Sockets
public struct IPPacketInformation // TypeDefIndex: 1471
{
	// Fields
	private IPAddress address; // 0x0
	private int iface; // 0x8

	// Properties
	public IPAddress Address { get; }
	public int Interface { get; }

	// Methods

	// RVA: 0xD68DD8 Offset: 0xD68DD8 VA: 0xD68DD8
	internal void .ctor(IPAddress address, int iface) { }

	// RVA: 0xD68DE4 Offset: 0xD68DE4 VA: 0xD68DE4
	public IPAddress get_Address() { }

	// RVA: 0xD68DEC Offset: 0xD68DEC VA: 0xD68DEC
	public int get_Interface() { }

	// RVA: 0xD68DF4 Offset: 0xD68DF4 VA: 0xD68DF4 Slot: 0
	public override bool Equals(object comparand) { }

	// RVA: 0xD68DFC Offset: 0xD68DFC VA: 0xD68DFC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2315F0C Offset: 0x2315F0C VA: 0x2315F0C
	public static bool op_Equality(IPPacketInformation p1, IPPacketInformation p2) { }

	// RVA: 0x2315F8C Offset: 0x2315F8C VA: 0x2315F8C
	public static bool op_Inequality(IPPacketInformation p1, IPPacketInformation p2) { }
}

// Namespace: System.Net.Sockets
public class IPv6MulticastOption // TypeDefIndex: 1472
{
	// Fields
	private IPAddress group; // 0x10
	private long ifIndex; // 0x18

	// Properties
	public IPAddress Group { get; set; }
	public long InterfaceIndex { get; set; }

	// Methods

	// RVA: 0x2316010 Offset: 0x2316010 VA: 0x2316010
	public void .ctor(IPAddress group) { }

	// RVA: 0x2316018 Offset: 0x2316018 VA: 0x2316018
	public void .ctor(IPAddress group, long ifindex) { }

	// RVA: 0x23160F4 Offset: 0x23160F4 VA: 0x23160F4
	public IPAddress get_Group() { }

	// RVA: 0x23160FC Offset: 0x23160FC VA: 0x23160FC
	public void set_Group(IPAddress value) { }

	// RVA: 0x2316194 Offset: 0x2316194 VA: 0x2316194
	public long get_InterfaceIndex() { }

	// RVA: 0x231619C Offset: 0x231619C VA: 0x231619C
	public void set_InterfaceIndex(long value) { }
}

// Namespace: System.Net.Sockets
public class LingerOption // TypeDefIndex: 1473
{
	// Fields
	private bool enabled; // 0x10
	private int seconds; // 0x14

	// Properties
	public bool Enabled { get; set; }
	public int LingerTime { get; set; }

	// Methods

	// RVA: 0x2316238 Offset: 0x2316238 VA: 0x2316238
	public void .ctor(bool enable, int secs) { }

	// RVA: 0x2316278 Offset: 0x2316278 VA: 0x2316278
	public bool get_Enabled() { }

	// RVA: 0x2316280 Offset: 0x2316280 VA: 0x2316280
	public void set_Enabled(bool value) { }

	// RVA: 0x231628C Offset: 0x231628C VA: 0x231628C
	public int get_LingerTime() { }

	// RVA: 0x2316294 Offset: 0x2316294 VA: 0x2316294
	public void set_LingerTime(int value) { }
}

// Namespace: System.Net.Sockets
public class MulticastOption // TypeDefIndex: 1474
{
	// Fields
	private IPAddress group; // 0x10
	private IPAddress local; // 0x18
	private int iface_index; // 0x20

	// Properties
	public IPAddress Group { get; set; }
	public IPAddress LocalAddress { get; set; }
	public int InterfaceIndex { get; set; }

	// Methods

	// RVA: 0x231629C Offset: 0x231629C VA: 0x231629C
	public void .ctor(IPAddress group) { }

	// RVA: 0x23163E4 Offset: 0x23163E4 VA: 0x23163E4
	public void .ctor(IPAddress group, int interfaceIndex) { }

	// RVA: 0x231631C Offset: 0x231631C VA: 0x231631C
	public void .ctor(IPAddress group, IPAddress mcint) { }

	// RVA: 0x23164C4 Offset: 0x23164C4 VA: 0x23164C4
	public IPAddress get_Group() { }

	// RVA: 0x23164CC Offset: 0x23164CC VA: 0x23164CC
	public void set_Group(IPAddress value) { }

	// RVA: 0x23164D4 Offset: 0x23164D4 VA: 0x23164D4
	public IPAddress get_LocalAddress() { }

	// RVA: 0x23164DC Offset: 0x23164DC VA: 0x23164DC
	public void set_LocalAddress(IPAddress value) { }

	// RVA: 0x23164E8 Offset: 0x23164E8 VA: 0x23164E8
	public int get_InterfaceIndex() { }

	// RVA: 0x23164F0 Offset: 0x23164F0 VA: 0x23164F0
	public void set_InterfaceIndex(int value) { }
}

// Namespace: System.Net.Sockets
public class NetworkStream : Stream, IDisposable // TypeDefIndex: 1475
{
	// Fields
	private FileAccess access; // 0x10
	private Socket socket; // 0x18
	private bool owns_socket; // 0x20
	private bool readable; // 0x21
	private bool writeable; // 0x22
	private bool disposed; // 0x23

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanTimeout { get; }
	public override bool CanWrite { get; }
	public virtual bool DataAvailable { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	protected bool Readable { get; set; }
	public override int ReadTimeout { get; set; }
	protected Socket Socket { get; }
	protected bool Writeable { get; set; }
	public override int WriteTimeout { get; set; }

	// Methods

	// RVA: 0x2316590 Offset: 0x2316590 VA: 0x2316590
	public void .ctor(Socket socket) { }

	// RVA: 0x2316748 Offset: 0x2316748 VA: 0x2316748
	public void .ctor(Socket socket, bool owns_socket) { }

	// RVA: 0x2316754 Offset: 0x2316754 VA: 0x2316754
	public void .ctor(Socket socket, FileAccess access) { }

	// RVA: 0x231659C Offset: 0x231659C VA: 0x231659C
	public void .ctor(Socket socket, FileAccess access, bool owns_socket) { }

	// RVA: 0x2316774 Offset: 0x2316774 VA: 0x2316774 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x23167A8 Offset: 0x23167A8 VA: 0x23167A8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x23167BC Offset: 0x23167BC VA: 0x23167BC Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x23167C4 Offset: 0x23167C4 VA: 0x23167C4 Slot: 8
	public override bool get_CanTimeout() { }

	// RVA: 0x23167CC Offset: 0x23167CC VA: 0x23167CC Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x23167E0 Offset: 0x23167E0 VA: 0x23167E0 Slot: 29
	public virtual bool get_DataAvailable() { }

	// RVA: 0x23169FC Offset: 0x23169FC VA: 0x23169FC Slot: 9
	public override long get_Length() { }

	// RVA: 0x2316A64 Offset: 0x2316A64 VA: 0x2316A64 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2316ACC Offset: 0x2316ACC VA: 0x2316ACC Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2316B34 Offset: 0x2316B34 VA: 0x2316B34
	protected bool get_Readable() { }

	// RVA: 0x2316B3C Offset: 0x2316B3C VA: 0x2316B3C
	protected void set_Readable(bool value) { }

	// RVA: 0x2316B48 Offset: 0x2316B48 VA: 0x2316B48 Slot: 14
	public override int get_ReadTimeout() { }

	// RVA: 0x2316C54 Offset: 0x2316C54 VA: 0x2316C54 Slot: 15
	public override void set_ReadTimeout(int value) { }

	// RVA: 0x2316E70 Offset: 0x2316E70 VA: 0x2316E70
	protected Socket get_Socket() { }

	// RVA: 0x2316E78 Offset: 0x2316E78 VA: 0x2316E78
	protected bool get_Writeable() { }

	// RVA: 0x2316E80 Offset: 0x2316E80 VA: 0x2316E80
	protected void set_Writeable(bool value) { }

	// RVA: 0x2316E8C Offset: 0x2316E8C VA: 0x2316E8C Slot: 16
	public override int get_WriteTimeout() { }

	// RVA: 0x2316F98 Offset: 0x2316F98 VA: 0x2316F98 Slot: 17
	public override void set_WriteTimeout(int value) { }

	// RVA: 0x23171B4 Offset: 0x23171B4 VA: 0x23171B4 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback callback, object state) { }

	// RVA: 0x2317710 Offset: 0x2317710 VA: 0x2317710 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback callback, object state) { }

	// RVA: 0x2317CB8 Offset: 0x2317CB8 VA: 0x2317CB8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2317D38 Offset: 0x2317D38 VA: 0x2317D38 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2317E28 Offset: 0x2317E28 VA: 0x2317E28 Slot: 27
	public override int EndRead(IAsyncResult ar) { }

	// RVA: 0x2317FB4 Offset: 0x2317FB4 VA: 0x2317FB4 Slot: 28
	public override void EndWrite(IAsyncResult ar) { }

	// RVA: 0x2318140 Offset: 0x2318140 VA: 0x2318140 Slot: 18
	public override void Flush() { }

	// RVA: 0x2318144 Offset: 0x2318144 VA: 0x2318144 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int size) { }

	// RVA: 0x2318540 Offset: 0x2318540 VA: 0x2318540 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x23185A8 Offset: 0x23185A8 VA: 0x23185A8 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2318610 Offset: 0x2318610 VA: 0x2318610 Slot: 23
	public override void Write(byte[] buffer, int offset, int size) { }

	// RVA: 0x2316820 Offset: 0x2316820 VA: 0x2316820
	private void CheckDisposed() { }
}

// Namespace: 
public static class NetworkStream.Timeout // TypeDefIndex: 1476
{
	// Fields
	public static readonly float Infinite; // 0x0

	// Methods

	// RVA: 0x23189EC Offset: 0x23189EC VA: 0x23189EC
	private static void .cctor() { }
}

// Namespace: System.Net.Sockets
public enum ProtocolFamily // TypeDefIndex: 1477
{
	// Fields
	public int value__; // 0x0
	public const ProtocolFamily Unknown = -1;
	public const ProtocolFamily Unspecified = 0;
	public const ProtocolFamily Unix = 1;
	public const ProtocolFamily InterNetwork = 2;
	public const ProtocolFamily ImpLink = 3;
	public const ProtocolFamily Pup = 4;
	public const ProtocolFamily Chaos = 5;
	public const ProtocolFamily Ipx = 6;
	public const ProtocolFamily Iso = 7;
	public const ProtocolFamily Ecma = 8;
	public const ProtocolFamily DataKit = 9;
	public const ProtocolFamily Ccitt = 10;
	public const ProtocolFamily Sna = 11;
	public const ProtocolFamily DecNet = 12;
	public const ProtocolFamily DataLink = 13;
	public const ProtocolFamily Lat = 14;
	public const ProtocolFamily HyperChannel = 15;
	public const ProtocolFamily AppleTalk = 16;
	public const ProtocolFamily NetBios = 17;
	public const ProtocolFamily VoiceView = 18;
	public const ProtocolFamily FireFox = 19;
	public const ProtocolFamily Banyan = 21;
	public const ProtocolFamily Atm = 22;
	public const ProtocolFamily InterNetworkV6 = 23;
	public const ProtocolFamily Cluster = 24;
	public const ProtocolFamily Ieee12844 = 25;
	public const ProtocolFamily Irda = 26;
	public const ProtocolFamily NetworkDesigners = 28;
	public const ProtocolFamily Max = 29;
	public const ProtocolFamily NS = 6;
	public const ProtocolFamily Osi = 7;
}

// Namespace: System.Net.Sockets
public enum ProtocolType // TypeDefIndex: 1478
{
	// Fields
	public int value__; // 0x0
	public const ProtocolType IP = 0;
	public const ProtocolType Icmp = 1;
	public const ProtocolType Igmp = 2;
	public const ProtocolType Ggp = 3;
	public const ProtocolType Tcp = 6;
	public const ProtocolType Pup = 12;
	public const ProtocolType Udp = 17;
	public const ProtocolType Idp = 22;
	public const ProtocolType IPv6 = 41;
	public const ProtocolType ND = 77;
	public const ProtocolType Raw = 255;
	public const ProtocolType Unspecified = 0;
	public const ProtocolType Ipx = 1000;
	public const ProtocolType Spx = 1256;
	public const ProtocolType SpxII = 1257;
	public const ProtocolType Unknown = -1;
	public const ProtocolType IPv4 = 4;
	public const ProtocolType IPv6RoutingHeader = 43;
	public const ProtocolType IPv6FragmentHeader = 44;
	public const ProtocolType IPSecEncapsulatingSecurityPayload = 50;
	public const ProtocolType IPSecAuthenticationHeader = 51;
	public const ProtocolType IcmpV6 = 58;
	public const ProtocolType IPv6NoNextHeader = 59;
	public const ProtocolType IPv6DestinationOptions = 60;
	public const ProtocolType IPv6HopByHopOptions = 0;
}

// Namespace: System.Net.Sockets
public enum SelectMode // TypeDefIndex: 1479
{
	// Fields
	public int value__; // 0x0
	public const SelectMode SelectRead = 0;
	public const SelectMode SelectWrite = 1;
	public const SelectMode SelectError = 2;
}

// Namespace: System.Net.Sockets
public class SendPacketsElement // TypeDefIndex: 1480
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xBD0E2C Offset: 0xBD0E2C VA: 0xBD0E2C
	private byte[] <Buffer>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBD0E3C Offset: 0xBD0E3C VA: 0xBD0E3C
	private int <Count>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBD0E4C Offset: 0xBD0E4C VA: 0xBD0E4C
	private bool <EndOfPacket>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xBD0E5C Offset: 0xBD0E5C VA: 0xBD0E5C
	private string <FilePath>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xBD0E6C Offset: 0xBD0E6C VA: 0xBD0E6C
	private int <Offset>k__BackingField; // 0x28

	// Properties
	public byte[] Buffer { get; set; }
	public int Count { get; set; }
	public bool EndOfPacket { get; set; }
	public string FilePath { get; set; }
	public int Offset { get; set; }

	// Methods

	// RVA: 0x2318A40 Offset: 0x2318A40 VA: 0x2318A40
	public void .ctor(byte[] buffer) { }

	// RVA: 0x2318A9C Offset: 0x2318A9C VA: 0x2318A9C
	public void .ctor(byte[] buffer, int offset, int count) { }

	// RVA: 0x2318AA4 Offset: 0x2318AA4 VA: 0x2318AA4
	public void .ctor(byte[] buffer, int offset, int count, bool endOfPacket) { }

	// RVA: 0x2318C04 Offset: 0x2318C04 VA: 0x2318C04
	public void .ctor(string filepath) { }

	// RVA: 0x2318CE0 Offset: 0x2318CE0 VA: 0x2318CE0
	public void .ctor(string filepath, int offset, int count) { }

	// RVA: 0x2318C14 Offset: 0x2318C14 VA: 0x2318C14
	public void .ctor(string filepath, int offset, int count, bool endOfPacket) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD18F8 Offset: 0xBD18F8 VA: 0xBD18F8
	// RVA: 0x2318CE8 Offset: 0x2318CE8 VA: 0x2318CE8
	public byte[] get_Buffer() { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1908 Offset: 0xBD1908 VA: 0xBD1908
	// RVA: 0x2318BD8 Offset: 0x2318BD8 VA: 0x2318BD8
	private void set_Buffer(byte[] value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1918 Offset: 0xBD1918 VA: 0xBD1918
	// RVA: 0x2318CF0 Offset: 0x2318CF0 VA: 0x2318CF0
	public int get_Count() { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1928 Offset: 0xBD1928 VA: 0xBD1928
	// RVA: 0x2318BE8 Offset: 0x2318BE8 VA: 0x2318BE8
	private void set_Count(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1938 Offset: 0xBD1938 VA: 0xBD1938
	// RVA: 0x2318CF8 Offset: 0x2318CF8 VA: 0x2318CF8
	public bool get_EndOfPacket() { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1948 Offset: 0xBD1948 VA: 0xBD1948
	// RVA: 0x2318BF0 Offset: 0x2318BF0 VA: 0x2318BF0
	private void set_EndOfPacket(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1958 Offset: 0xBD1958 VA: 0xBD1958
	// RVA: 0x2318D00 Offset: 0x2318D00 VA: 0x2318D00
	public string get_FilePath() { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1968 Offset: 0xBD1968 VA: 0xBD1968
	// RVA: 0x2318BFC Offset: 0x2318BFC VA: 0x2318BFC
	private void set_FilePath(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1978 Offset: 0xBD1978 VA: 0xBD1978
	// RVA: 0x2318D08 Offset: 0x2318D08 VA: 0x2318D08
	public int get_Offset() { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1988 Offset: 0xBD1988 VA: 0xBD1988
	// RVA: 0x2318BE0 Offset: 0x2318BE0 VA: 0x2318BE0
	private void set_Offset(int value) { }
}

// Namespace: System.Net.Sockets
public class Socket : IDisposable // TypeDefIndex: 1481
{
	// Fields
	private Queue readQ; // 0x10
	private Queue writeQ; // 0x18
	private bool islistening; // 0x20
	private bool useoverlappedIO; // 0x21
	private readonly int MinListenPort; // 0x24
	private readonly int MaxListenPort; // 0x28
	private static int ipv4Supported; // 0x0
	private static int ipv6Supported; // 0x4
	private int linger_timeout; // 0x2C
	private IntPtr socket; // 0x30
	private AddressFamily address_family; // 0x38
	private SocketType socket_type; // 0x3C
	private ProtocolType protocol_type; // 0x40
	internal bool blocking; // 0x44
	private Thread blocking_thread; // 0x48
	private bool isbound; // 0x50
	private static int current_bind_count; // 0x8
	private readonly int max_bind_count; // 0x54
	private bool connected; // 0x58
	private bool closed; // 0x59
	internal bool disposed; // 0x5A
	internal EndPoint seed_endpoint; // 0x60
	private static MethodInfo check_socket_policy; // 0x10

	// Properties
	public int Available { get; }
	public bool DontFragment { get; set; }
	public bool EnableBroadcast { get; set; }
	public bool ExclusiveAddressUse { get; set; }
	public bool IsBound { get; }
	public LingerOption LingerState { get; set; }
	public bool MulticastLoopback { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD356C Offset: 0xBD356C VA: 0xBD356C
	public bool UseOnlyOverlappedIO { get; set; }
	public IntPtr Handle { get; }
	public EndPoint LocalEndPoint { get; }
	public SocketType SocketType { get; }
	public int SendTimeout { get; set; }
	public int ReceiveTimeout { get; set; }
	public static bool SupportsIPv4 { get; }
	[ObsoleteAttribute] // RVA: 0xBD35A4 Offset: 0xBD35A4 VA: 0xBD35A4
	public static bool SupportsIPv6 { get; }
	public static bool OSSupportsIPv4 { get; }
	public static bool OSSupportsIPv6 { get; }
	public AddressFamily AddressFamily { get; }
	public bool Blocking { get; set; }
	public bool Connected { get; set; }
	public ProtocolType ProtocolType { get; }
	public bool NoDelay { get; set; }
	public int ReceiveBufferSize { get; set; }
	public int SendBufferSize { get; set; }
	public short Ttl { get; set; }
	public EndPoint RemoteEndPoint { get; }

	// Methods

	// RVA: 0x2318D10 Offset: 0x2318D10 VA: 0x2318D10
	private void .ctor(AddressFamily family, SocketType type, ProtocolType proto, IntPtr sock) { }

	[MonoTODOAttribute] // RVA: 0xBD1998 Offset: 0xBD1998 VA: 0xBD1998
	// RVA: 0x2318DF0 Offset: 0x2318DF0 VA: 0x2318DF0
	public void .ctor(SocketInformation socketInformation) { }

	// RVA: 0x2318ED4 Offset: 0x2318ED4 VA: 0x2318ED4
	public void .ctor(AddressFamily family, SocketType type, ProtocolType proto) { }

	// RVA: 0x231904C Offset: 0x231904C VA: 0x231904C
	private static void .cctor() { }

	// RVA: 0x2319348 Offset: 0x2319348 VA: 0x2319348
	private static void AddSockets(ArrayList sockets, IList list, string name) { }

	// RVA: 0x23196F8 Offset: 0x23196F8 VA: 0x23196F8
	private static void Select_internal(ref Socket[] sockets, int microSeconds, out int error) { }

	// RVA: 0x23196FC Offset: 0x23196FC VA: 0x23196FC
	public static void Select(IList checkRead, IList checkWrite, IList checkError, int microSeconds) { }

	// RVA: 0x231A104 Offset: 0x231A104 VA: 0x231A104
	private void SocketDefaults() { }

	// RVA: 0x231A308 Offset: 0x231A308 VA: 0x231A308
	private static int Available_internal(IntPtr socket, out int error) { }

	// RVA: 0x23168D8 Offset: 0x23168D8 VA: 0x23168D8
	public int get_Available() { }

	// RVA: 0x231A30C Offset: 0x231A30C VA: 0x231A30C
	public bool get_DontFragment() { }

	// RVA: 0x231A1D0 Offset: 0x231A1D0 VA: 0x231A1D0
	public void set_DontFragment(bool value) { }

	// RVA: 0x231A594 Offset: 0x231A594 VA: 0x231A594
	public bool get_EnableBroadcast() { }

	// RVA: 0x231A6B8 Offset: 0x231A6B8 VA: 0x231A6B8
	public void set_EnableBroadcast(bool value) { }

	// RVA: 0x231A7CC Offset: 0x231A7CC VA: 0x231A7CC
	public bool get_ExclusiveAddressUse() { }

	// RVA: 0x231A8B4 Offset: 0x231A8B4 VA: 0x231A8B4
	public void set_ExclusiveAddressUse(bool value) { }

	// RVA: 0x231A9CC Offset: 0x231A9CC VA: 0x231A9CC
	public bool get_IsBound() { }

	// RVA: 0x231A9D4 Offset: 0x231A9D4 VA: 0x231A9D4
	public LingerOption get_LingerState() { }

	// RVA: 0x231AB28 Offset: 0x231AB28 VA: 0x231AB28
	public void set_LingerState(LingerOption value) { }

	// RVA: 0x231AF80 Offset: 0x231AF80 VA: 0x231AF80
	public bool get_MulticastLoopback() { }

	// RVA: 0x231B0EC Offset: 0x231B0EC VA: 0x231B0EC
	public void set_MulticastLoopback(bool value) { }

	// RVA: 0x231B254 Offset: 0x231B254 VA: 0x231B254
	public bool get_UseOnlyOverlappedIO() { }

	// RVA: 0x231B25C Offset: 0x231B25C VA: 0x231B25C
	public void set_UseOnlyOverlappedIO(bool value) { }

	// RVA: 0x231B268 Offset: 0x231B268 VA: 0x231B268
	public IntPtr get_Handle() { }

	// RVA: 0x231B270 Offset: 0x231B270 VA: 0x231B270
	private static SocketAddress LocalEndPoint_internal(IntPtr socket, out int error) { }

	// RVA: 0x231B274 Offset: 0x231B274 VA: 0x231B274
	public EndPoint get_LocalEndPoint() { }

	// RVA: 0x231675C Offset: 0x231675C VA: 0x231675C
	public SocketType get_SocketType() { }

	// RVA: 0x2316EB8 Offset: 0x2316EB8 VA: 0x2316EB8
	public int get_SendTimeout() { }

	// RVA: 0x231708C Offset: 0x231708C VA: 0x231708C
	public void set_SendTimeout(int value) { }

	// RVA: 0x2316B74 Offset: 0x2316B74 VA: 0x2316B74
	public int get_ReceiveTimeout() { }

	// RVA: 0x2316D48 Offset: 0x2316D48 VA: 0x2316D48
	public void set_ReceiveTimeout(int value) { }

	// RVA: 0x231B3D4 Offset: 0x231B3D4 VA: 0x231B3D4
	public bool AcceptAsync(SocketAsyncEventArgs e) { }

	// RVA: 0x231B6F8 Offset: 0x231B6F8 VA: 0x231B6F8
	private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking) { }

	// RVA: 0x231B700 Offset: 0x231B700 VA: 0x231B700
	public Socket Accept() { }

	// RVA: 0x231BB34 Offset: 0x231BB34 VA: 0x231BB34
	internal void Accept(Socket acceptSocket) { }

	// RVA: 0x231BE7C Offset: 0x231BE7C VA: 0x231BE7C
	public IAsyncResult BeginAccept(AsyncCallback callback, object state) { }

	// RVA: 0x231C0F0 Offset: 0x231C0F0 VA: 0x231C0F0
	public IAsyncResult BeginAccept(int receiveSize, AsyncCallback callback, object state) { }

	// RVA: 0x231C30C Offset: 0x231C30C VA: 0x231C30C
	public IAsyncResult BeginAccept(Socket acceptSocket, int receiveSize, AsyncCallback callback, object state) { }

	// RVA: 0x231C5C8 Offset: 0x231C5C8 VA: 0x231C5C8
	public IAsyncResult BeginConnect(EndPoint end_point, AsyncCallback callback, object state) { }

	// RVA: 0x231C5D0 Offset: 0x231C5D0 VA: 0x231C5D0
	internal IAsyncResult BeginConnect(EndPoint end_point, AsyncCallback callback, object state, bool bypassSocketSecurity) { }

	// RVA: 0x231CA48 Offset: 0x231CA48 VA: 0x231CA48
	public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback callback, object state) { }

	// RVA: 0x231CC18 Offset: 0x231CC18 VA: 0x231CC18
	public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback callback, object state) { }

	// RVA: 0x231CE64 Offset: 0x231CE64 VA: 0x231CE64
	public IAsyncResult BeginConnect(string host, int port, AsyncCallback callback, object state) { }

	// RVA: 0x231D024 Offset: 0x231D024 VA: 0x231D024
	public IAsyncResult BeginDisconnect(bool reuseSocket, AsyncCallback callback, object state) { }

	// RVA: 0x23173B0 Offset: 0x23173B0 VA: 0x23173B0
	public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socket_flags, AsyncCallback callback, object state) { }

	// RVA: 0x231D1A8 Offset: 0x231D1A8 VA: 0x231D1A8
	public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags flags, out SocketError error, AsyncCallback callback, object state) { }

	[CLSCompliantAttribute] // RVA: 0xBD19A8 Offset: 0xBD19A8 VA: 0xBD19A8
	// RVA: 0x231D1B8 Offset: 0x231D1B8 VA: 0x231D1B8
	public IAsyncResult BeginReceive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state) { }

	[CLSCompliantAttribute] // RVA: 0xBD19BC Offset: 0xBD19BC VA: 0xBD19BC
	// RVA: 0x231D478 Offset: 0x231D478 VA: 0x231D478
	public IAsyncResult BeginReceive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state) { }

	// RVA: 0x231D488 Offset: 0x231D488 VA: 0x231D488
	public IAsyncResult BeginReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socket_flags, ref EndPoint remote_end, AsyncCallback callback, object state) { }

	[MonoTODOAttribute] // RVA: 0xBD19D0 Offset: 0xBD19D0 VA: 0xBD19D0
	// RVA: 0x231D844 Offset: 0x231D844 VA: 0x231D844
