	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanTimeout { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	public override bool IsAuthenticated { get; }
	public override bool IsEncrypted { get; }
	public override bool IsMutuallyAuthenticated { get; }
	public override bool IsServer { get; }
	public override bool IsSigned { get; }
	public override int ReadTimeout { get; set; }
	public override int WriteTimeout { get; set; }
	public virtual bool CheckCertRevocationStatus { get; }
	public virtual CipherAlgorithmType CipherAlgorithm { get; }
	public virtual int CipherStrength { get; }
	public virtual HashAlgorithmType HashAlgorithm { get; }
	public virtual int HashStrength { get; }
	public virtual ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
	public virtual int KeyExchangeStrength { get; }
	public virtual X509Certificate LocalCertificate { get; }
	public virtual X509Certificate RemoteCertificate { get; }
	public virtual SslProtocols SslProtocol { get; }

	// Methods

	// RVA: 0x11378F0 Offset: 0x11378F0 VA: 0x11378F0
	public void .ctor(Stream innerStream) { }

	// RVA: 0x11378FC Offset: 0x11378FC VA: 0x11378FC
	public void .ctor(Stream innerStream, bool leaveStreamOpen) { }

	[MonoTODOAttribute] // RVA: 0xC3D9B0 Offset: 0xC3D9B0 VA: 0xC3D9B0
	// RVA: 0x1137908 Offset: 0x1137908 VA: 0x1137908
	public void .ctor(Stream innerStream, bool leaveStreamOpen, RemoteCertificateValidationCallback certValidationCallback) { }

	[MonoTODOAttribute] // RVA: 0xC3D9E8 Offset: 0xC3D9E8 VA: 0xC3D9E8
	// RVA: 0x1137938 Offset: 0x1137938 VA: 0x1137938
	public void .ctor(Stream innerStream, bool leaveStreamOpen, RemoteCertificateValidationCallback certValidationCallback, LocalCertificateSelectionCallback certSelectionCallback) { }

	// RVA: 0x1137974 Offset: 0x1137974 VA: 0x1137974 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x11379AC Offset: 0x11379AC VA: 0x11379AC Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x11379E4 Offset: 0x11379E4 VA: 0x11379E4 Slot: 8
	public override bool get_CanTimeout() { }

	// RVA: 0x1137A1C Offset: 0x1137A1C VA: 0x1137A1C Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1137A54 Offset: 0x1137A54 VA: 0x1137A54 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1137A8C Offset: 0x1137A8C VA: 0x1137A8C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1137AC4 Offset: 0x1137AC4 VA: 0x1137AC4 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1137B38 Offset: 0x1137B38 VA: 0x1137B38 Slot: 29
	public override bool get_IsAuthenticated() { }

	// RVA: 0x1137B48 Offset: 0x1137B48 VA: 0x1137B48 Slot: 30
	public override bool get_IsEncrypted() { }

	// RVA: 0x1137B58 Offset: 0x1137B58 VA: 0x1137B58 Slot: 31
	public override bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x1137BD0 Offset: 0x1137BD0 VA: 0x1137BD0 Slot: 32
	public override bool get_IsServer() { }

	// RVA: 0x1137C54 Offset: 0x1137C54 VA: 0x1137C54 Slot: 33
	public override bool get_IsSigned() { }

	// RVA: 0x1137C64 Offset: 0x1137C64 VA: 0x1137C64 Slot: 14
	public override int get_ReadTimeout() { }

	// RVA: 0x1137CA0 Offset: 0x1137CA0 VA: 0x1137CA0 Slot: 15
	public override void set_ReadTimeout(int value) { }

	// RVA: 0x1137CE4 Offset: 0x1137CE4 VA: 0x1137CE4 Slot: 16
	public override int get_WriteTimeout() { }

	// RVA: 0x1137D20 Offset: 0x1137D20 VA: 0x1137D20 Slot: 17
	public override void set_WriteTimeout(int value) { }

	// RVA: 0x1137D64 Offset: 0x1137D64 VA: 0x1137D64 Slot: 34
	public virtual bool get_CheckCertRevocationStatus() { }

	// RVA: 0x1137DBC Offset: 0x1137DBC VA: 0x1137DBC Slot: 35
	public virtual CipherAlgorithmType get_CipherAlgorithm() { }

	// RVA: 0x1137F8C Offset: 0x1137F8C VA: 0x1137F8C Slot: 36
	public virtual int get_CipherStrength() { }

	// RVA: 0x1137FC4 Offset: 0x1137FC4 VA: 0x1137FC4 Slot: 37
	public virtual HashAlgorithmType get_HashAlgorithm() { }

	// RVA: 0x1138080 Offset: 0x1138080 VA: 0x1138080 Slot: 38
	public virtual int get_HashStrength() { }

	// RVA: 0x11380B8 Offset: 0x11380B8 VA: 0x11380B8 Slot: 39
	public virtual ExchangeAlgorithmType get_KeyExchangeAlgorithm() { }

	// RVA: 0x1138184 Offset: 0x1138184 VA: 0x1138184 Slot: 40
	public virtual int get_KeyExchangeStrength() { }

	// RVA: 0x11381BC Offset: 0x11381BC VA: 0x11381BC Slot: 41
	public virtual X509Certificate get_LocalCertificate() { }

	// RVA: 0x1138358 Offset: 0x1138358 VA: 0x1138358 Slot: 42
	public virtual X509Certificate get_RemoteCertificate() { }

	// RVA: 0x11384F4 Offset: 0x11384F4 VA: 0x11384F4 Slot: 43
	public virtual SslProtocols get_SslProtocol() { }

	// RVA: 0x11385D0 Offset: 0x11385D0 VA: 0x11385D0
	private X509Certificate OnCertificateSelection(X509CertificateCollection clientCerts, X509Certificate serverCert, string targetHost, X509CertificateCollection serverRequestedCerts) { }

	// RVA: 0x113874C Offset: 0x113874C VA: 0x113874C Slot: 44
	public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x11387EC Offset: 0x11387EC VA: 0x11387EC Slot: 45
	public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols sslProtocolType, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x1138B18 Offset: 0x1138B18 VA: 0x1138B18 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x1138B90 Offset: 0x1138B90 VA: 0x1138B90 Slot: 46
	public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, AsyncCallback callback, object asyncState) { }

	// RVA: 0x1138BBC Offset: 0x1138BBC VA: 0x1138BBC Slot: 47
	public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols sslProtocolType, bool checkCertificateRevocation, AsyncCallback callback, object asyncState) { }

	// RVA: 0x1138AE8 Offset: 0x1138AE8 VA: 0x1138AE8
	private SecurityProtocolType GetMonoSslProtocol(SslProtocols ms) { }

	// RVA: 0x1138E5C Offset: 0x1138E5C VA: 0x1138E5C Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState) { }

	// RVA: 0x1138ED4 Offset: 0x1138ED4 VA: 0x1138ED4 Slot: 48
	public virtual void AuthenticateAsClient(string targetHost) { }

	// RVA: 0x1138F5C Offset: 0x1138F5C VA: 0x1138F5C Slot: 49
	public virtual void AuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols sslProtocolType, bool checkCertificateRevocation) { }

	// RVA: 0x1138FA8 Offset: 0x1138FA8 VA: 0x1138FA8 Slot: 50
	public virtual void AuthenticateAsServer(X509Certificate serverCertificate) { }

	// RVA: 0x1138FC4 Offset: 0x1138FC4 VA: 0x1138FC4 Slot: 51
	public virtual void AuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols sslProtocolType, bool checkCertificateRevocation) { }

	// RVA: 0x1139014 Offset: 0x1139014 VA: 0x1139014 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1139058 Offset: 0x1139058 VA: 0x1139058 Slot: 52
	public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult) { }

	// RVA: 0x11390CC Offset: 0x11390CC VA: 0x11390CC Slot: 53
	public virtual void EndAuthenticateAsServer(IAsyncResult asyncResult) { }

	// RVA: 0x1139140 Offset: 0x1139140 VA: 0x1139140 Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x1139188 Offset: 0x1139188 VA: 0x1139188 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x11391D0 Offset: 0x11391D0 VA: 0x11391D0 Slot: 18
	public override void Flush() { }

	// RVA: 0x1139218 Offset: 0x1139218 VA: 0x1139218 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1139260 Offset: 0x1139260 VA: 0x1139260 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x11392D4 Offset: 0x11392D4 VA: 0x11392D4 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1139318 Offset: 0x1139318 VA: 0x1139318 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1139360 Offset: 0x1139360 VA: 0x1139360
	public void Write(byte[] buffer) { }

	// RVA: 0x1137EF0 Offset: 0x1137EF0 VA: 0x1137EF0
	private void CheckConnectionAuthenticated() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC3C8B4 Offset: 0xC3C8B4 VA: 0xC3C8B4
private sealed class SslStream.<BeginAuthenticateAsClient>c__AnonStorey7 // TypeDefIndex: 1467
{
	// Fields
	internal X509CertificateCollection clientCertificates; // 0x10
	internal SslStream <>f__this; // 0x18

	// Methods

	// RVA: 0x1138AE0 Offset: 0x1138AE0 VA: 0x1138AE0
	public void .ctor() { }

	// RVA: 0x11393A8 Offset: 0x11393A8 VA: 0x11393A8
	internal AsymmetricAlgorithm <>m__7(X509Certificate cert, string host) { }

	// RVA: 0x113966C Offset: 0x113966C VA: 0x113966C
	internal bool <>m__8(X509Certificate cert, int[] certErrors) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC3C8C4 Offset: 0xC3C8C4 VA: 0xC3C8C4
private sealed class SslStream.<BeginAuthenticateAsServer>c__AnonStorey8 // TypeDefIndex: 1468
{
	// Fields
	internal X509Certificate serverCertificate; // 0x10
	internal SslStream <>f__this; // 0x18

	// Methods

	// RVA: 0x1138E54 Offset: 0x1138E54 VA: 0x1138E54
	public void .ctor() { }

	// RVA: 0x113999C Offset: 0x113999C VA: 0x113999C
	internal AsymmetricAlgorithm <>m__9(X509Certificate cert, string targetHost) { }

	// RVA: 0x1139A50 Offset: 0x1139A50 VA: 0x1139A50
	internal bool <>m__A(X509Certificate cert, int[] certErrors) { }
}

// Namespace: System.Net.Sockets
public enum AddressFamily // TypeDefIndex: 1469
{
	// Fields
	public int value__; // 0x0
	public const AddressFamily Unknown = -1;
	public const AddressFamily Unspecified = 0;
	public const AddressFamily Unix = 1;
	public const AddressFamily InterNetwork = 2;
	public const AddressFamily ImpLink = 3;
	public const AddressFamily Pup = 4;
	public const AddressFamily Chaos = 5;
	public const AddressFamily NS = 6;
	public const AddressFamily Ipx = 6;
	public const AddressFamily Iso = 7;
	public const AddressFamily Osi = 7;
	public const AddressFamily Ecma = 8;
	public const AddressFamily DataKit = 9;
	public const AddressFamily Ccitt = 10;
	public const AddressFamily Sna = 11;
	public const AddressFamily DecNet = 12;
	public const AddressFamily DataLink = 13;
	public const AddressFamily Lat = 14;
	public const AddressFamily HyperChannel = 15;
	public const AddressFamily AppleTalk = 16;
	public const AddressFamily NetBios = 17;
	public const AddressFamily VoiceView = 18;
	public const AddressFamily FireFox = 19;
	public const AddressFamily Banyan = 21;
	public const AddressFamily Atm = 22;
	public const AddressFamily InterNetworkV6 = 23;
	public const AddressFamily Cluster = 24;
	public const AddressFamily Ieee12844 = 25;
	public const AddressFamily Irda = 26;
	public const AddressFamily NetworkDesigners = 28;
	public const AddressFamily Max = 29;
}

// Namespace: System.Net.Sockets
public enum IOControlCode // TypeDefIndex: 1470
{
	// Fields
	public long value__; // 0x0
	public const IOControlCode AbsorbRouterAlert = 2550136837;
	public const IOControlCode AddMulticastGroupOnInterface = 2550136842;
	public const IOControlCode AddressListChange = 671088663;
	public const IOControlCode AddressListQuery = 1207959574;
	public const IOControlCode AddressListSort = 3355443225;
	public const IOControlCode AssociateHandle = 2281701377;
	public const IOControlCode AsyncIO = 2147772029;
	public const IOControlCode BindToInterface = 2550136840;
	public const IOControlCode DataToRead = 1074030207;
	public const IOControlCode DeleteMulticastGroupFromInterface = 2550136843;
	public const IOControlCode EnableCircularQueuing = 671088642;
	public const IOControlCode Flush = 671088644;
	public const IOControlCode GetBroadcastAddress = 1207959557;
	public const IOControlCode GetExtensionFunctionPointer = 3355443206;
	public const IOControlCode GetGroupQos = 3355443208;
	public const IOControlCode GetQos = 3355443207;
	public const IOControlCode KeepAliveValues = 2550136836;
	public const IOControlCode LimitBroadcasts = 2550136839;
	public const IOControlCode MulticastInterface = 2550136841;
	public const IOControlCode MulticastScope = 2281701386;
	public const IOControlCode MultipointLoopback = 2281701385;
	public const IOControlCode NamespaceChange = 2281701401;
	public const IOControlCode NonBlockingIO = 2147772030;
	public const IOControlCode OobDataRead = 1074033415;
	public const IOControlCode QueryTargetPnpHandle = 1207959576;
	public const IOControlCode ReceiveAll = 2550136833;
	public const IOControlCode ReceiveAllIgmpMulticast = 2550136835;
	public const IOControlCode ReceiveAllMulticast = 2550136834;
	public const IOControlCode RoutingInterfaceChange = 2281701397;
	public const IOControlCode RoutingInterfaceQuery = 3355443220;
	public const IOControlCode SetGroupQos = 2281701388;
	public const IOControlCode SetQos = 2281701387;
	public const IOControlCode TranslateHandle = 3355443213;
	public const IOControlCode UnicastInterface = 2550136838;
}

// Namespace: System.Net.Sockets
public struct IPPacketInformation // TypeDefIndex: 1471
{
	// Fields
	private IPAddress address; // 0x0
	private int iface; // 0x8

	// Properties
	public IPAddress Address { get; }
	public int Interface { get; }

	// Methods

	// RVA: 0xBBB5BC Offset: 0xBBB5BC VA: 0xBBB5BC
	internal void .ctor(IPAddress address, int iface) { }

	// RVA: 0xBBB5C8 Offset: 0xBBB5C8 VA: 0xBBB5C8
	public IPAddress get_Address() { }

	// RVA: 0xBBB5D0 Offset: 0xBBB5D0 VA: 0xBBB5D0
	public int get_Interface() { }

	// RVA: 0xBBB5D8 Offset: 0xBBB5D8 VA: 0xBBB5D8 Slot: 0
	public override bool Equals(object comparand) { }

	// RVA: 0xBBB5E0 Offset: 0xBBB5E0 VA: 0xBBB5E0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x113EE14 Offset: 0x113EE14 VA: 0x113EE14
	public static bool op_Equality(IPPacketInformation p1, IPPacketInformation p2) { }

	// RVA: 0x113EE94 Offset: 0x113EE94 VA: 0x113EE94
	public static bool op_Inequality(IPPacketInformation p1, IPPacketInformation p2) { }
}

// Namespace: System.Net.Sockets
public class IPv6MulticastOption // TypeDefIndex: 1472
{
	// Fields
	private IPAddress group; // 0x10
	private long ifIndex; // 0x18

	// Properties
	public IPAddress Group { get; set; }
	public long InterfaceIndex { get; set; }

	// Methods

	// RVA: 0x113EF18 Offset: 0x113EF18 VA: 0x113EF18
	public void .ctor(IPAddress group) { }

	// RVA: 0x113EF20 Offset: 0x113EF20 VA: 0x113EF20
	public void .ctor(IPAddress group, long ifindex) { }

	// RVA: 0x113EFFC Offset: 0x113EFFC VA: 0x113EFFC
	public IPAddress get_Group() { }

	// RVA: 0x113F004 Offset: 0x113F004 VA: 0x113F004
	public void set_Group(IPAddress value) { }

	// RVA: 0x113F09C Offset: 0x113F09C VA: 0x113F09C
	public long get_InterfaceIndex() { }

	// RVA: 0x113F0A4 Offset: 0x113F0A4 VA: 0x113F0A4
	public void set_InterfaceIndex(long value) { }
}

// Namespace: System.Net.Sockets
public class LingerOption // TypeDefIndex: 1473
{
	// Fields
	private bool enabled; // 0x10
	private int seconds; // 0x14

	// Properties
	public bool Enabled { get; set; }
	public int LingerTime { get; set; }

	// Methods

	// RVA: 0x113F140 Offset: 0x113F140 VA: 0x113F140
	public void .ctor(bool enable, int secs) { }

	// RVA: 0x113F180 Offset: 0x113F180 VA: 0x113F180
	public bool get_Enabled() { }

	// RVA: 0x113F188 Offset: 0x113F188 VA: 0x113F188
	public void set_Enabled(bool value) { }

	// RVA: 0x113F194 Offset: 0x113F194 VA: 0x113F194
	public int get_LingerTime() { }

	// RVA: 0x113F19C Offset: 0x113F19C VA: 0x113F19C
	public void set_LingerTime(int value) { }
}

// Namespace: System.Net.Sockets
public class MulticastOption // TypeDefIndex: 1474
{
	// Fields
	private IPAddress group; // 0x10
	private IPAddress local; // 0x18
	private int iface_index; // 0x20

	// Properties
	public IPAddress Group { get; set; }
	public IPAddress LocalAddress { get; set; }
	public int InterfaceIndex { get; set; }

	// Methods

	// RVA: 0x113F1A4 Offset: 0x113F1A4 VA: 0x113F1A4
	public void .ctor(IPAddress group) { }

	// RVA: 0x113F2EC Offset: 0x113F2EC VA: 0x113F2EC
	public void .ctor(IPAddress group, int interfaceIndex) { }

	// RVA: 0x113F224 Offset: 0x113F224 VA: 0x113F224
	public void .ctor(IPAddress group, IPAddress mcint) { }

	// RVA: 0x113F3CC Offset: 0x113F3CC VA: 0x113F3CC
	public IPAddress get_Group() { }

	// RVA: 0x113F3D4 Offset: 0x113F3D4 VA: 0x113F3D4
	public void set_Group(IPAddress value) { }

	// RVA: 0x113F3DC Offset: 0x113F3DC VA: 0x113F3DC
	public IPAddress get_LocalAddress() { }

	// RVA: 0x113F3E4 Offset: 0x113F3E4 VA: 0x113F3E4
	public void set_LocalAddress(IPAddress value) { }

	// RVA: 0x113F3F0 Offset: 0x113F3F0 VA: 0x113F3F0
	public int get_InterfaceIndex() { }

	// RVA: 0x113F3F8 Offset: 0x113F3F8 VA: 0x113F3F8
	public void set_InterfaceIndex(int value) { }
}

// Namespace: System.Net.Sockets
public class NetworkStream : Stream, IDisposable // TypeDefIndex: 1475
{
	// Fields
	private FileAccess access; // 0x10
	private Socket socket; // 0x18
	private bool owns_socket; // 0x20
	private bool readable; // 0x21
	private bool writeable; // 0x22
	private bool disposed; // 0x23

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanTimeout { get; }
	public override bool CanWrite { get; }
	public virtual bool DataAvailable { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	protected bool Readable { get; set; }
	public override int ReadTimeout { get; set; }
	protected Socket Socket { get; }
	protected bool Writeable { get; set; }
	public override int WriteTimeout { get; set; }

	// Methods

	// RVA: 0x113F498 Offset: 0x113F498 VA: 0x113F498
	public void .ctor(Socket socket) { }

	// RVA: 0x113F650 Offset: 0x113F650 VA: 0x113F650
	public void .ctor(Socket socket, bool owns_socket) { }

	// RVA: 0x113F65C Offset: 0x113F65C VA: 0x113F65C
	public void .ctor(Socket socket, FileAccess access) { }

	// RVA: 0x113F4A4 Offset: 0x113F4A4 VA: 0x113F4A4
	public void .ctor(Socket socket, FileAccess access, bool owns_socket) { }

	// RVA: 0x113F67C Offset: 0x113F67C VA: 0x113F67C Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x113F6B0 Offset: 0x113F6B0 VA: 0x113F6B0 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x113F6C4 Offset: 0x113F6C4 VA: 0x113F6C4 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x113F6CC Offset: 0x113F6CC VA: 0x113F6CC Slot: 8
	public override bool get_CanTimeout() { }

	// RVA: 0x113F6D4 Offset: 0x113F6D4 VA: 0x113F6D4 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x113F6E8 Offset: 0x113F6E8 VA: 0x113F6E8 Slot: 29
	public virtual bool get_DataAvailable() { }

	// RVA: 0x113F904 Offset: 0x113F904 VA: 0x113F904 Slot: 9
	public override long get_Length() { }

	// RVA: 0x113F96C Offset: 0x113F96C VA: 0x113F96C Slot: 10
	public override long get_Position() { }

	// RVA: 0x113F9D4 Offset: 0x113F9D4 VA: 0x113F9D4 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x113FA3C Offset: 0x113FA3C VA: 0x113FA3C
	protected bool get_Readable() { }

	// RVA: 0x113FA44 Offset: 0x113FA44 VA: 0x113FA44
	protected void set_Readable(bool value) { }

	// RVA: 0x113FA50 Offset: 0x113FA50 VA: 0x113FA50 Slot: 14
	public override int get_ReadTimeout() { }

	// RVA: 0x113FB5C Offset: 0x113FB5C VA: 0x113FB5C Slot: 15
	public override void set_ReadTimeout(int value) { }

	// RVA: 0x113FD78 Offset: 0x113FD78 VA: 0x113FD78
	protected Socket get_Socket() { }

	// RVA: 0x113FD80 Offset: 0x113FD80 VA: 0x113FD80
	protected bool get_Writeable() { }

	// RVA: 0x113FD88 Offset: 0x113FD88 VA: 0x113FD88
	protected void set_Writeable(bool value) { }

	// RVA: 0x113FD94 Offset: 0x113FD94 VA: 0x113FD94 Slot: 16
	public override int get_WriteTimeout() { }

	// RVA: 0x113FEA0 Offset: 0x113FEA0 VA: 0x113FEA0 Slot: 17
	public override void set_WriteTimeout(int value) { }

	// RVA: 0x11400BC Offset: 0x11400BC VA: 0x11400BC Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback callback, object state) { }

	// RVA: 0x1140618 Offset: 0x1140618 VA: 0x1140618 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback callback, object state) { }

	// RVA: 0x1140BC0 Offset: 0x1140BC0 VA: 0x1140BC0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1140C40 Offset: 0x1140C40 VA: 0x1140C40 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1140D30 Offset: 0x1140D30 VA: 0x1140D30 Slot: 27
	public override int EndRead(IAsyncResult ar) { }

	// RVA: 0x1140EBC Offset: 0x1140EBC VA: 0x1140EBC Slot: 28
	public override void EndWrite(IAsyncResult ar) { }

	// RVA: 0x1141048 Offset: 0x1141048 VA: 0x1141048 Slot: 18
	public override void Flush() { }

	// RVA: 0x114104C Offset: 0x114104C VA: 0x114104C Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int size) { }

	// RVA: 0x1141448 Offset: 0x1141448 VA: 0x1141448 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x11414B0 Offset: 0x11414B0 VA: 0x11414B0 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1141518 Offset: 0x1141518 VA: 0x1141518 Slot: 23
	public override void Write(byte[] buffer, int offset, int size) { }

	// RVA: 0x113F728 Offset: 0x113F728 VA: 0x113F728
	private void CheckDisposed() { }
}

// Namespace: 
public static class NetworkStream.Timeout // TypeDefIndex: 1476
{
	// Fields
	public static readonly float Infinite; // 0x0

	// Methods

	// RVA: 0x11418F4 Offset: 0x11418F4 VA: 0x11418F4
	private static void .cctor() { }
}

// Namespace: System.Net.Sockets
public enum ProtocolFamily // TypeDefIndex: 1477
{
	// Fields
	public int value__; // 0x0
	public const ProtocolFamily Unknown = -1;
	public const ProtocolFamily Unspecified = 0;
	public const ProtocolFamily Unix = 1;
	public const ProtocolFamily InterNetwork = 2;
	public const ProtocolFamily ImpLink = 3;
	public const ProtocolFamily Pup = 4;
	public const ProtocolFamily Chaos = 5;
	public const ProtocolFamily Ipx = 6;
	public const ProtocolFamily Iso = 7;
	public const ProtocolFamily Ecma = 8;
	public const ProtocolFamily DataKit = 9;
	public const ProtocolFamily Ccitt = 10;
	public const ProtocolFamily Sna = 11;
	public const ProtocolFamily DecNet = 12;
	public const ProtocolFamily DataLink = 13;
	public const ProtocolFamily Lat = 14;
	public const ProtocolFamily HyperChannel = 15;
	public const ProtocolFamily AppleTalk = 16;
	public const ProtocolFamily NetBios = 17;
	public const ProtocolFamily VoiceView = 18;
	public const ProtocolFamily FireFox = 19;
	public const ProtocolFamily Banyan = 21;
	public const ProtocolFamily Atm = 22;
	public const ProtocolFamily InterNetworkV6 = 23;
	public const ProtocolFamily Cluster = 24;
	public const ProtocolFamily Ieee12844 = 25;
	public const ProtocolFamily Irda = 26;
	public const ProtocolFamily NetworkDesigners = 28;
	public const ProtocolFamily Max = 29;
	public const ProtocolFamily NS = 6;
	public const ProtocolFamily Osi = 7;
}

// Namespace: System.Net.Sockets
public enum ProtocolType // TypeDefIndex: 1478
{
	// Fields
	public int value__; // 0x0
	public const ProtocolType IP = 0;
	public const ProtocolType Icmp = 1;
	public const ProtocolType Igmp = 2;
	public const ProtocolType Ggp = 3;
	public const ProtocolType Tcp = 6;
	public const ProtocolType Pup = 12;
	public const ProtocolType Udp = 17;
	public const ProtocolType Idp = 22;
	public const ProtocolType IPv6 = 41;
	public const ProtocolType ND = 77;
	public const ProtocolType Raw = 255;
	public const ProtocolType Unspecified = 0;
	public const ProtocolType Ipx = 1000;
	public const ProtocolType Spx = 1256;
	public const ProtocolType SpxII = 1257;
	public const ProtocolType Unknown = -1;
	public const ProtocolType IPv4 = 4;
	public const ProtocolType IPv6RoutingHeader = 43;
	public const ProtocolType IPv6FragmentHeader = 44;
	public const ProtocolType IPSecEncapsulatingSecurityPayload = 50;
	public const ProtocolType IPSecAuthenticationHeader = 51;
	public const ProtocolType IcmpV6 = 58;
	public const ProtocolType IPv6NoNextHeader = 59;
	public const ProtocolType IPv6DestinationOptions = 60;
	public const ProtocolType IPv6HopByHopOptions = 0;
}

// Namespace: System.Net.Sockets
public enum SelectMode // TypeDefIndex: 1479
{
	// Fields
	public int value__; // 0x0
	public const SelectMode SelectRead = 0;
	public const SelectMode SelectWrite = 1;
	public const SelectMode SelectError = 2;
}

// Namespace: System.Net.Sockets
public class SendPacketsElement // TypeDefIndex: 1480
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC3CF54 Offset: 0xC3CF54 VA: 0xC3CF54
	private byte[] <Buffer>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3CF64 Offset: 0xC3CF64 VA: 0xC3CF64
	private int <Count>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC3CF74 Offset: 0xC3CF74 VA: 0xC3CF74
	private bool <EndOfPacket>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC3CF84 Offset: 0xC3CF84 VA: 0xC3CF84
	private string <FilePath>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC3CF94 Offset: 0xC3CF94 VA: 0xC3CF94
	private int <Offset>k__BackingField; // 0x28

	// Properties
	public byte[] Buffer { get; set; }
	public int Count { get; set; }
	public bool EndOfPacket { get; set; }
	public string FilePath { get; set; }
	public int Offset { get; set; }

	// Methods

	// RVA: 0x1141948 Offset: 0x1141948 VA: 0x1141948
	public void .ctor(byte[] buffer) { }

	// RVA: 0x11419A4 Offset: 0x11419A4 VA: 0x11419A4
	public void .ctor(byte[] buffer, int offset, int count) { }

	// RVA: 0x11419AC Offset: 0x11419AC VA: 0x11419AC
	public void .ctor(byte[] buffer, int offset, int count, bool endOfPacket) { }

	// RVA: 0x1141B0C Offset: 0x1141B0C VA: 0x1141B0C
	public void .ctor(string filepath) { }

	// RVA: 0x1141BE8 Offset: 0x1141BE8 VA: 0x1141BE8
	public void .ctor(string filepath, int offset, int count) { }

	// RVA: 0x1141B1C Offset: 0x1141B1C VA: 0x1141B1C
	public void .ctor(string filepath, int offset, int count, bool endOfPacket) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA20 Offset: 0xC3DA20 VA: 0xC3DA20
	// RVA: 0x1141BF0 Offset: 0x1141BF0 VA: 0x1141BF0
	public byte[] get_Buffer() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA30 Offset: 0xC3DA30 VA: 0xC3DA30
	// RVA: 0x1141AE0 Offset: 0x1141AE0 VA: 0x1141AE0
	private void set_Buffer(byte[] value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA40 Offset: 0xC3DA40 VA: 0xC3DA40
	// RVA: 0x1141BF8 Offset: 0x1141BF8 VA: 0x1141BF8
	public int get_Count() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA50 Offset: 0xC3DA50 VA: 0xC3DA50
	// RVA: 0x1141AF0 Offset: 0x1141AF0 VA: 0x1141AF0
	private void set_Count(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA60 Offset: 0xC3DA60 VA: 0xC3DA60
	// RVA: 0x1141C00 Offset: 0x1141C00 VA: 0x1141C00
	public bool get_EndOfPacket() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA70 Offset: 0xC3DA70 VA: 0xC3DA70
	// RVA: 0x1141AF8 Offset: 0x1141AF8 VA: 0x1141AF8
	private void set_EndOfPacket(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA80 Offset: 0xC3DA80 VA: 0xC3DA80
	// RVA: 0x1141C08 Offset: 0x1141C08 VA: 0x1141C08
	public string get_FilePath() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DA90 Offset: 0xC3DA90 VA: 0xC3DA90
	// RVA: 0x1141B04 Offset: 0x1141B04 VA: 0x1141B04
	private void set_FilePath(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DAA0 Offset: 0xC3DAA0 VA: 0xC3DAA0
	// RVA: 0x1141C10 Offset: 0x1141C10 VA: 0x1141C10
	public int get_Offset() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3DAB0 Offset: 0xC3DAB0 VA: 0xC3DAB0
	// RVA: 0x1141AE8 Offset: 0x1141AE8 VA: 0x1141AE8
	private void set_Offset(int value) { }
}

// Namespace: System.Net.Sockets
public class Socket : IDisposable // TypeDefIndex: 1481
{
	// Fields
	private Queue readQ; // 0x10
	private Queue writeQ; // 0x18
	private bool islistening; // 0x20
	private bool useoverlappedIO; // 0x21
	private readonly int MinListenPort; // 0x24
	private readonly int MaxListenPort; // 0x28
	private static int ipv4Supported; // 0x0
	private static int ipv6Supported; // 0x4
	private int linger_timeout; // 0x2C
	private IntPtr socket; // 0x30
	private AddressFamily address_family; // 0x38
	private SocketType socket_type; // 0x3C
	private ProtocolType protocol_type; // 0x40
	internal bool blocking; // 0x44
	private Thread blocking_thread; // 0x48
	private bool isbound; // 0x50
	private static int current_bind_count; // 0x8
	private readonly int max_bind_count; // 0x54
	private bool connected; // 0x58
	private bool closed; // 0x59
	internal bool disposed; // 0x5A
	internal EndPoint seed_endpoint; // 0x60
	private static MethodInfo check_socket_policy; // 0x10

	// Properties
	public int Available { get; }
	public bool DontFragment { get; set; }
	public bool EnableBroadcast { get; set; }
	public bool ExclusiveAddressUse { get; set; }
	public bool IsBound { get; }
	public LingerOption LingerState { get; set; }
	public bool MulticastLoopback { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F694 Offset: 0xC3F694 VA: 0xC3F694
	public bool UseOnlyOverlappedIO { get; set; }
	public IntPtr Handle { get; }
	public EndPoint LocalEndPoint { get; }
	public SocketType SocketType { get; }
	public int SendTimeout { get; set; }
	public int ReceiveTimeout { get; set; }
	public static bool SupportsIPv4 { get; }
	[ObsoleteAttribute] // RVA: 0xC3F6CC Offset: 0xC3F6CC VA: 0xC3F6CC
	public static bool SupportsIPv6 { get; }
	public static bool OSSupportsIPv4 { get; }
	public static bool OSSupportsIPv6 { get; }
	public AddressFamily AddressFamily { get; }
	public bool Blocking { get; set; }
	public bool Connected { get; set; }
	public ProtocolType ProtocolType { get; }
	public bool NoDelay { get; set; }
	public int ReceiveBufferSize { get; set; }
	public int SendBufferSize { get; set; }
	public short Ttl { get; set; }
	public EndPoint RemoteEndPoint { get; }

	// Methods

	// RVA: 0x1141C18 Offset: 0x1141C18 VA: 0x1141C18
	private void .ctor(AddressFamily family, SocketType type, ProtocolType proto, IntPtr sock) { }

	[MonoTODOAttribute] // RVA: 0xC3DAC0 Offset: 0xC3DAC0 VA: 0xC3DAC0
	// RVA: 0x1141CF8 Offset: 0x1141CF8 VA: 0x1141CF8
	public void .ctor(SocketInformation socketInformation) { }

	// RVA: 0x1141DDC Offset: 0x1141DDC VA: 0x1141DDC
	public void .ctor(AddressFamily family, SocketType type, ProtocolType proto) { }

	// RVA: 0x1141F54 Offset: 0x1141F54 VA: 0x1141F54
	private static void .cctor() { }

	// RVA: 0x1142250 Offset: 0x1142250 VA: 0x1142250
	private static void AddSockets(ArrayList sockets, IList list, string name) { }

	// RVA: 0x1142600 Offset: 0x1142600 VA: 0x1142600
	private static void Select_internal(ref Socket[] sockets, int microSeconds, out int error) { }

	// RVA: 0x1142604 Offset: 0x1142604 VA: 0x1142604
	public static void Select(IList checkRead, IList checkWrite, IList checkError, int microSeconds) { }

	// RVA: 0x114300C Offset: 0x114300C VA: 0x114300C
	private void SocketDefaults() { }

	// RVA: 0x1143210 Offset: 0x1143210 VA: 0x1143210
	private static int Available_internal(IntPtr socket, out int error) { }

	// RVA: 0x113F7E0 Offset: 0x113F7E0 VA: 0x113F7E0
	public int get_Available() { }

	// RVA: 0x1143214 Offset: 0x1143214 VA: 0x1143214
	public bool get_DontFragment() { }

	// RVA: 0x11430D8 Offset: 0x11430D8 VA: 0x11430D8
	public void set_DontFragment(bool value) { }

	// RVA: 0x114349C Offset: 0x114349C VA: 0x114349C
	public bool get_EnableBroadcast() { }

	// RVA: 0x11435C0 Offset: 0x11435C0 VA: 0x11435C0
	public void set_EnableBroadcast(bool value) { }

	// RVA: 0x11436D4 Offset: 0x11436D4 VA: 0x11436D4
	public bool get_ExclusiveAddressUse() { }

	// RVA: 0x11437BC Offset: 0x11437BC VA: 0x11437BC
	public void set_ExclusiveAddressUse(bool value) { }

	// RVA: 0x11438D4 Offset: 0x11438D4 VA: 0x11438D4
	public bool get_IsBound() { }

	// RVA: 0x11438DC Offset: 0x11438DC VA: 0x11438DC
	public LingerOption get_LingerState() { }

	// RVA: 0x1143A30 Offset: 0x1143A30 VA: 0x1143A30
	public void set_LingerState(LingerOption value) { }

	// RVA: 0x1143E88 Offset: 0x1143E88 VA: 0x1143E88
	public bool get_MulticastLoopback() { }

	// RVA: 0x1143FF4 Offset: 0x1143FF4 VA: 0x1143FF4
	public void set_MulticastLoopback(bool value) { }

	// RVA: 0x114415C Offset: 0x114415C VA: 0x114415C
	public bool get_UseOnlyOverlappedIO() { }

	// RVA: 0x1144164 Offset: 0x1144164 VA: 0x1144164
	public void set_UseOnlyOverlappedIO(bool value) { }

	// RVA: 0x1144170 Offset: 0x1144170 VA: 0x1144170
	public IntPtr get_Handle() { }

	// RVA: 0x1144178 Offset: 0x1144178 VA: 0x1144178
	private static SocketAddress LocalEndPoint_internal(IntPtr socket, out int error) { }

	// RVA: 0x114417C Offset: 0x114417C VA: 0x114417C
	public EndPoint get_LocalEndPoint() { }

	// RVA: 0x113F664 Offset: 0x113F664 VA: 0x113F664
	public SocketType get_SocketType() { }

	// RVA: 0x113FDC0 Offset: 0x113FDC0 VA: 0x113FDC0
	public int get_SendTimeout() { }

	// RVA: 0x113FF94 Offset: 0x113FF94 VA: 0x113FF94
	public void set_SendTimeout(int value) { }

	// RVA: 0x113FA7C Offset: 0x113FA7C VA: 0x113FA7C
	public int get_ReceiveTimeout() { }

	// RVA: 0x113FC50 Offset: 0x113FC50 VA: 0x113FC50
	public void set_ReceiveTimeout(int value) { }

	// RVA: 0x11442DC Offset: 0x11442DC VA: 0x11442DC
	public bool AcceptAsync(SocketAsyncEventArgs e) { }

	// RVA: 0x1144600 Offset: 0x1144600 VA: 0x1144600
	private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking) { }

	// RVA: 0x1144608 Offset: 0x1144608 VA: 0x1144608
	public Socket Accept() { }

	// RVA: 0x1144A3C Offset: 0x1144A3C VA: 0x1144A3C
	internal void Accept(Socket acceptSocket) { }

	// RVA: 0x1144D84 Offset: 0x1144D84 VA: 0x1144D84
	public IAsyncResult BeginAccept(AsyncCallback callback, object state) { }

	// RVA: 0x1144FF8 Offset: 0x1144FF8 VA: 0x1144FF8
	public IAsyncResult BeginAccept(int receiveSize, AsyncCallback callback, object state) { }

	// RVA: 0x1145214 Offset: 0x1145214 VA: 0x1145214
	public IAsyncResult BeginAccept(Socket acceptSocket, int receiveSize, AsyncCallback callback, object state) { }

	// RVA: 0x11454D0 Offset: 0x11454D0 VA: 0x11454D0
	public IAsyncResult BeginConnect(EndPoint end_point, AsyncCallback callback, object state) { }

	// RVA: 0x11454D8 Offset: 0x11454D8 VA: 0x11454D8
	internal IAsyncResult BeginConnect(EndPoint end_point, AsyncCallback callback, object state, bool bypassSocketSecurity) { }

	// RVA: 0x1145950 Offset: 0x1145950 VA: 0x1145950
	public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback callback, object state) { }

	// RVA: 0x1145B20 Offset: 0x1145B20 VA: 0x1145B20
	public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback callback, object state) { }

	// RVA: 0x1145D6C Offset: 0x1145D6C VA: 0x1145D6C
	public IAsyncResult BeginConnect(string host, int port, AsyncCallback callback, object state) { }

	// RVA: 0x1145F2C Offset: 0x1145F2C VA: 0x1145F2C
	public IAsyncResult BeginDisconnect(bool reuseSocket, AsyncCallback callback, object state) { }

	// RVA: 0x11402B8 Offset: 0x11402B8 VA: 0x11402B8
	public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags socket_flags, AsyncCallback callback, object state) { }

	// RVA: 0x11460B0 Offset: 0x11460B0 VA: 0x11460B0
	public IAsyncResult BeginReceive(byte[] buffer, int offset, int size, SocketFlags flags, out SocketError error, AsyncCallback callback, object state) { }

	[CLSCompliantAttribute] // RVA: 0xC3DAD0 Offset: 0xC3DAD0 VA: 0xC3DAD0
	// RVA: 0x11460C0 Offset: 0x11460C0 VA: 0x11460C0
	public IAsyncResult BeginReceive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state) { }

	[CLSCompliantAttribute] // RVA: 0xC3DAE4 Offset: 0xC3DAE4 VA: 0xC3DAE4
	// RVA: 0x1146380 Offset: 0x1146380 VA: 0x1146380
	public IAsyncResult BeginReceive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state) { }

	// RVA: 0x1146390 Offset: 0x1146390 VA: 0x1146390
	public IAsyncResult BeginReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socket_flags, ref EndPoint remote_end, AsyncCallback callback, object state) { }

	[MonoTODOAttribute] // RVA: 0xC3DAF8 Offset: 0xC3DAF8 VA: 0xC3DAF8
	// RVA: 0x114674C Offset: 0x114674C VA: 0x114674C
	public IAsyncResult BeginReceiveMessageFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP, AsyncCallback callback, object state) { }

	// RVA: 0x1140804 Offset: 0x1140804 VA: 0x1140804
	public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socket_flags, AsyncCallback callback, object state) { }

	// RVA: 0x11468FC Offset: 0x11468FC VA: 0x11468FC
	public IAsyncResult BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state) { }

	// RVA: 0x11469E4 Offset: 0x11469E4 VA: 0x11469E4
	public IAsyncResult BeginSend(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state) { }

	[CLSCompliantAttribute] // RVA: 0xC3DB08 Offset: 0xC3DB08 VA: 0xC3DB08
	// RVA: 0x1146CD0 Offset: 0x1146CD0 VA: 0x1146CD0
	public IAsyncResult BeginSend(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, object state) { }

	// RVA: 0x1146DA0 Offset: 0x1146DA0 VA: 0x1146DA0
	public IAsyncResult BeginSendFile(string fileName, AsyncCallback callback, object state) { }

	// RVA: 0x1146EF8 Offset: 0x1146EF8 VA: 0x1146EF8
	public IAsyncResult BeginSendFile(string fileName, byte[] preBuffer, byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state) { }

	// RVA: 0x11471C0 Offset: 0x11471C0 VA: 0x11471C0
	public IAsyncResult BeginSendTo(byte[] buffer, int offset, int size, SocketFlags socket_flags, EndPoint remote_end, AsyncCallback callback, object state) { }

	// RVA: 0x1147574 Offset: 0x1147574 VA: 0x1147574
	private static void Bind_internal(IntPtr sock, SocketAddress sa, out int error) { }

	// RVA: 0x113ACE8 Offset: 0x113ACE8 VA: 0x113ACE8
	public void Bind(EndPoint local_end) { }

	// RVA: 0x1147578 Offset: 0x1147578 VA: 0x1147578
	public bool ConnectAsync(SocketAsyncEventArgs e) { }

