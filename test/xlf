	// RVA: 0x267C97C Offset: 0x267C97C VA: 0x267C97C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x267CAE0 Offset: 0x267CAE0 VA: 0x267CAE0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x267CC4C Offset: 0x267CC4C VA: 0x267CC4C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x267CC88 Offset: 0x267CC88 VA: 0x267CC88 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x267CD28 Offset: 0x267CD28 VA: 0x267CD28 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x267CE68 Offset: 0x267CE68 VA: 0x267CE68 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x267CF04 Offset: 0x267CF04 VA: 0x267CF04 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x267D898 Offset: 0x267D898 VA: 0x267D898 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x267DCA8 Offset: 0x267DCA8 VA: 0x267DCA8 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x267E33C Offset: 0x267E33C VA: 0x267E33C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193Field // TypeDefIndex: 5081
{
	// Fields
	private const ulong M01 = 1;
	private const ulong M49 = 562949953421311;

	// Methods

	// RVA: 0x267E4F8 Offset: 0x267E4F8 VA: 0x267E4F8
	public void .ctor() { }

	// RVA: 0x267E500 Offset: 0x267E500 VA: 0x267E500
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x267E6D8 Offset: 0x267E6D8 VA: 0x267E6D8
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x267E9DC Offset: 0x267E9DC VA: 0x267E9DC
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x267EB14 Offset: 0x267EB14 VA: 0x267EB14
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x267EC40 Offset: 0x267EC40 VA: 0x267EC40
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x267EEBC Offset: 0x267EEBC VA: 0x267EEBC
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x267F7B0 Offset: 0x267F7B0 VA: 0x267F7B0
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x267F594 Offset: 0x267F594 VA: 0x267F594
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x267EB44 Offset: 0x267EB44 VA: 0x267EB44
	public static void Reduce63(ulong[] z, int zOff) { }

	// RVA: 0x267F804 Offset: 0x267F804 VA: 0x267F804
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x267EDF4 Offset: 0x267EDF4 VA: 0x267EDF4
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x267FAB4 Offset: 0x267FAB4 VA: 0x267FAB4
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x267EE3C Offset: 0x267EE3C VA: 0x267EE3C
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x267FB00 Offset: 0x267FB00 VA: 0x267FB00
	public static uint Trace(ulong[] x) { }

	// RVA: 0x267FB44 Offset: 0x267FB44 VA: 0x267FB44
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x267FDB8 Offset: 0x267FDB8 VA: 0x267FDB8
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x267EF0C Offset: 0x267EF0C VA: 0x267EF0C
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x267FF0C Offset: 0x267FF0C VA: 0x267FF0C
	protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x267F9B0 Offset: 0x267F9B0 VA: 0x267F9B0
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193FieldElement : ECFieldElement // TypeDefIndex: 5082
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2680390 Offset: 0x2680390 VA: 0x2680390
	public void .ctor(BigInteger x) { }

	// RVA: 0x268047C Offset: 0x268047C VA: 0x268047C
	public void .ctor() { }

	// RVA: 0x26804AC Offset: 0x26804AC VA: 0x26804AC
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x26804D8 Offset: 0x26804D8 VA: 0x26804D8 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x26804E4 Offset: 0x26804E4 VA: 0x26804E4 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x26804F0 Offset: 0x26804F0 VA: 0x26804F0 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2680538 Offset: 0x2680538 VA: 0x2680538 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2680544 Offset: 0x2680544 VA: 0x2680544 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x268058C Offset: 0x268058C VA: 0x268058C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2680594 Offset: 0x2680594 VA: 0x2680594 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2680714 Offset: 0x2680714 VA: 0x2680714 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2680794 Offset: 0x2680794 VA: 0x2680794 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26807A0 Offset: 0x26807A0 VA: 0x26807A0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2680920 Offset: 0x2680920 VA: 0x2680920 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2680930 Offset: 0x2680930 VA: 0x2680930 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2680C9C Offset: 0x2680C9C VA: 0x2680C9C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2680CEC Offset: 0x2680CEC VA: 0x2680CEC Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2680CF0 Offset: 0x2680CF0 VA: 0x2680CF0 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2680D70 Offset: 0x2680D70 VA: 0x2680D70 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2680D80 Offset: 0x2680D80 VA: 0x2680D80 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2681004 Offset: 0x2681004 VA: 0x2681004 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x268109C Offset: 0x268109C VA: 0x268109C Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x268111C Offset: 0x268111C VA: 0x268111C Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x268119C Offset: 0x268119C VA: 0x268119C Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x26811A4 Offset: 0x26811A4 VA: 0x26811A4 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x26811AC Offset: 0x26811AC VA: 0x26811AC Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x26811B4 Offset: 0x26811B4 VA: 0x26811B4 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x26811BC Offset: 0x26811BC VA: 0x26811BC Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x26811C4 Offset: 0x26811C4 VA: 0x26811C4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2681260 Offset: 0x2681260 VA: 0x2681260 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x26812FC Offset: 0x26812FC VA: 0x26812FC Slot: 32
	public virtual bool Equals(SecT193FieldElement other) { }

	// RVA: 0x2681328 Offset: 0x2681328 VA: 0x2681328 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R1Curve : AbstractF2mCurve // TypeDefIndex: 5083
{
	// Fields
	private const int SecT193R1_DEFAULT_COORDS = 6;
	protected readonly SecT193R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2681358 Offset: 0x2681358 VA: 0x2681358
	public void .ctor() { }

	// RVA: 0x2681524 Offset: 0x2681524 VA: 0x2681524 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x268157C Offset: 0x268157C VA: 0x268157C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2681588 Offset: 0x2681588 VA: 0x2681588 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2681590 Offset: 0x2681590 VA: 0x2681590 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2681598 Offset: 0x2681598 VA: 0x2681598 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26815F8 Offset: 0x26815F8 VA: 0x26815F8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2681758 Offset: 0x2681758 VA: 0x2681758 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26817F8 Offset: 0x26817F8 VA: 0x26817F8 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2681800 Offset: 0x2681800 VA: 0x2681800 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2681808 Offset: 0x2681808 VA: 0x2681808 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2681810 Offset: 0x2681810 VA: 0x2681810 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2681818 Offset: 0x2681818 VA: 0x2681818 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2681820 Offset: 0x2681820 VA: 0x2681820 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R1Point : AbstractF2mPoint // TypeDefIndex: 5084
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x268151C Offset: 0x268151C VA: 0x268151C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2681680 Offset: 0x2681680 VA: 0x2681680
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26817EC Offset: 0x26817EC VA: 0x26817EC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2681828 Offset: 0x2681828 VA: 0x2681828 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x26818C8 Offset: 0x26818C8 VA: 0x26818C8 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2681A08 Offset: 0x2681A08 VA: 0x2681A08 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2681AA4 Offset: 0x2681AA4 VA: 0x2681AA4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2682440 Offset: 0x2682440 VA: 0x2682440 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2682888 Offset: 0x2682888 VA: 0x2682888 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2682F68 Offset: 0x2682F68 VA: 0x2682F68 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R2Curve : AbstractF2mCurve // TypeDefIndex: 5085
{
	// Fields
	private const int SecT193R2_DEFAULT_COORDS = 6;
	protected readonly SecT193R2Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x261D588 Offset: 0x261D588 VA: 0x261D588
	public void .ctor() { }

	// RVA: 0x261D754 Offset: 0x261D754 VA: 0x261D754 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x261D7AC Offset: 0x261D7AC VA: 0x261D7AC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x261D7B8 Offset: 0x261D7B8 VA: 0x261D7B8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x261D7C0 Offset: 0x261D7C0 VA: 0x261D7C0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x261D7C8 Offset: 0x261D7C8 VA: 0x261D7C8 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x261D82C Offset: 0x261D82C VA: 0x261D82C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x261D98C Offset: 0x261D98C VA: 0x261D98C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x261DA2C Offset: 0x261DA2C VA: 0x261DA2C Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x261DA34 Offset: 0x261DA34 VA: 0x261DA34 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x261DA3C Offset: 0x261DA3C VA: 0x261DA3C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x261DA44 Offset: 0x261DA44 VA: 0x261DA44 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x261DA4C Offset: 0x261DA4C VA: 0x261DA4C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x261DA54 Offset: 0x261DA54 VA: 0x261DA54 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R2Point : AbstractF2mPoint // TypeDefIndex: 5086
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x261D74C Offset: 0x261D74C VA: 0x261D74C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x261D8B4 Offset: 0x261D8B4 VA: 0x261D8B4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x261DA20 Offset: 0x261DA20 VA: 0x261DA20
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x261DA5C Offset: 0x261DA5C VA: 0x261DA5C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x261DAFC Offset: 0x261DAFC VA: 0x261DAFC Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x261DC3C Offset: 0x261DC3C VA: 0x261DC3C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x261DCD8 Offset: 0x261DCD8 VA: 0x261DCD8 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x261E674 Offset: 0x261E674 VA: 0x261E674 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x261EABC Offset: 0x261EABC VA: 0x261EABC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x261F19C Offset: 0x261F19C VA: 0x261F19C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233Field // TypeDefIndex: 5087
{
	// Fields
	private const ulong M41 = 2199023255551;
	private const ulong M59 = 576460752303423487;

	// Methods

	// RVA: 0x261F358 Offset: 0x261F358 VA: 0x261F358
	public void .ctor() { }

	// RVA: 0x261F360 Offset: 0x261F360 VA: 0x261F360
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x261F538 Offset: 0x261F538 VA: 0x261F538
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x261F8A0 Offset: 0x261F8A0 VA: 0x261F8A0
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x261F9D8 Offset: 0x261F9D8 VA: 0x261F9D8
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x261FB00 Offset: 0x261FB00 VA: 0x261FB00
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x261FD2C Offset: 0x261FD2C VA: 0x261FD2C
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x26206DC Offset: 0x26206DC VA: 0x26206DC
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2620484 Offset: 0x2620484 VA: 0x2620484
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x261FA08 Offset: 0x261FA08 VA: 0x261FA08
	public static void Reduce23(ulong[] z, int zOff) { }

	// RVA: 0x2620730 Offset: 0x2620730 VA: 0x2620730
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x261FCE4 Offset: 0x261FCE4 VA: 0x261FCE4
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x2620BE8 Offset: 0x2620BE8 VA: 0x2620BE8
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x261FD7C Offset: 0x261FD7C VA: 0x261FD7C
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x2620C34 Offset: 0x2620C34 VA: 0x2620C34
	public static uint Trace(ulong[] x) { }

	// RVA: 0x2620C9C Offset: 0x2620C9C VA: 0x2620C9C
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x2620F10 Offset: 0x2620F10 VA: 0x2620F10
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x261FDFC Offset: 0x261FDFC VA: 0x261FDFC
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2621064 Offset: 0x2621064 VA: 0x2621064
	protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x2620AA0 Offset: 0x2620AA0 VA: 0x2620AA0
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233FieldElement : ECFieldElement // TypeDefIndex: 5088
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2621410 Offset: 0x2621410 VA: 0x2621410
	public void .ctor(BigInteger x) { }

	// RVA: 0x26214FC Offset: 0x26214FC VA: 0x26214FC
	public void .ctor() { }

	// RVA: 0x262152C Offset: 0x262152C VA: 0x262152C
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2621558 Offset: 0x2621558 VA: 0x2621558 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2621564 Offset: 0x2621564 VA: 0x2621564 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2621570 Offset: 0x2621570 VA: 0x2621570 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x26215B8 Offset: 0x26215B8 VA: 0x26215B8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x26215C4 Offset: 0x26215C4 VA: 0x26215C4 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x262160C Offset: 0x262160C VA: 0x262160C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2621614 Offset: 0x2621614 VA: 0x2621614 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2621794 Offset: 0x2621794 VA: 0x2621794 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2621814 Offset: 0x2621814 VA: 0x2621814 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2621820 Offset: 0x2621820 VA: 0x2621820 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x26219A0 Offset: 0x26219A0 VA: 0x26219A0 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26219B0 Offset: 0x26219B0 VA: 0x26219B0 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2621D1C Offset: 0x2621D1C VA: 0x2621D1C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2621D6C Offset: 0x2621D6C VA: 0x2621D6C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2621D70 Offset: 0x2621D70 VA: 0x2621D70 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2621DF0 Offset: 0x2621DF0 VA: 0x2621DF0 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2621E00 Offset: 0x2621E00 VA: 0x2621E00 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2622084 Offset: 0x2622084 VA: 0x2622084 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x262211C Offset: 0x262211C VA: 0x262211C Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x262219C Offset: 0x262219C VA: 0x262219C Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x262221C Offset: 0x262221C VA: 0x262221C Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2622224 Offset: 0x2622224 VA: 0x2622224 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x262222C Offset: 0x262222C VA: 0x262222C Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2622234 Offset: 0x2622234 VA: 0x2622234 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x262223C Offset: 0x262223C VA: 0x262223C Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2622244 Offset: 0x2622244 VA: 0x2622244 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x26222E0 Offset: 0x26222E0 VA: 0x26222E0 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x262237C Offset: 0x262237C VA: 0x262237C Slot: 32
	public virtual bool Equals(SecT233FieldElement other) { }

	// RVA: 0x26223A8 Offset: 0x26223A8 VA: 0x26223A8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233K1Curve : AbstractF2mCurve // TypeDefIndex: 5089
{
	// Fields
	private const int SecT233K1_DEFAULT_COORDS = 6;
	protected readonly SecT233K1Point m_infinity; // 0x58

	// Properties
	public override int FieldSize { get; }
	public override ECPoint Infinity { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x26223D8 Offset: 0x26223D8 VA: 0x26223D8
	public void .ctor() { }

	// RVA: 0x2622544 Offset: 0x2622544 VA: 0x2622544 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x262259C Offset: 0x262259C VA: 0x262259C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x26225A8 Offset: 0x26225A8 VA: 0x26225A8 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2622604 Offset: 0x2622604 VA: 0x2622604 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x262260C Offset: 0x262260C VA: 0x262260C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x262266C Offset: 0x262266C VA: 0x262266C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26227CC Offset: 0x26227CC VA: 0x26227CC Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262286C Offset: 0x262286C VA: 0x262286C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2622874 Offset: 0x2622874 VA: 0x2622874 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x262287C Offset: 0x262287C VA: 0x262287C Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2622884 Offset: 0x2622884 VA: 0x2622884 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x262288C Offset: 0x262288C VA: 0x262288C Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2622894 Offset: 0x2622894 VA: 0x2622894 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x262289C Offset: 0x262289C VA: 0x262289C Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233K1Point : AbstractF2mPoint // TypeDefIndex: 5090
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x262253C Offset: 0x262253C VA: 0x262253C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26226F4 Offset: 0x26226F4 VA: 0x26226F4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2622860 Offset: 0x2622860 VA: 0x2622860
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26228A4 Offset: 0x26228A4 VA: 0x26228A4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2622944 Offset: 0x2622944 VA: 0x2622944 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2622A84 Offset: 0x2622A84 VA: 0x2622A84 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2622B20 Offset: 0x2622B20 VA: 0x2622B20 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2623458 Offset: 0x2623458 VA: 0x2623458 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x26238BC Offset: 0x26238BC VA: 0x26238BC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2623F10 Offset: 0x2623F10 VA: 0x2623F10 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233R1Curve : AbstractF2mCurve // TypeDefIndex: 5091
{
	// Fields
	private const int SecT233R1_DEFAULT_COORDS = 6;
	protected readonly SecT233R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x26240CC Offset: 0x26240CC VA: 0x26240CC
	public void .ctor() { }

	// RVA: 0x2624268 Offset: 0x2624268 VA: 0x2624268 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x26242C0 Offset: 0x26242C0 VA: 0x26242C0 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x26242CC Offset: 0x26242CC VA: 0x26242CC Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26242D4 Offset: 0x26242D4 VA: 0x26242D4 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x26242DC Offset: 0x26242DC VA: 0x26242DC Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x262433C Offset: 0x262433C VA: 0x262433C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x262449C Offset: 0x262449C VA: 0x262449C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262453C Offset: 0x262453C VA: 0x262453C Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2624544 Offset: 0x2624544 VA: 0x2624544 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x262454C Offset: 0x262454C VA: 0x262454C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2624554 Offset: 0x2624554 VA: 0x2624554 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x262455C Offset: 0x262455C VA: 0x262455C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2624564 Offset: 0x2624564 VA: 0x2624564 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233R1Point : AbstractF2mPoint // TypeDefIndex: 5092
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2624260 Offset: 0x2624260 VA: 0x2624260
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26243C4 Offset: 0x26243C4 VA: 0x26243C4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2624530 Offset: 0x2624530 VA: 0x2624530
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262456C Offset: 0x262456C VA: 0x262456C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x262460C Offset: 0x262460C VA: 0x262460C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x262474C Offset: 0x262474C VA: 0x262474C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x26247E8 Offset: 0x26247E8 VA: 0x26247E8 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x262517C Offset: 0x262517C VA: 0x262517C Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x262558C Offset: 0x262558C VA: 0x262558C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2625C20 Offset: 0x2625C20 VA: 0x2625C20 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239Field // TypeDefIndex: 5093
{
	// Fields
	private const ulong M47 = 140737488355327;
	private const ulong M60 = 1152921504606846975;

	// Methods

	// RVA: 0x2625DDC Offset: 0x2625DDC VA: 0x2625DDC
	public void .ctor() { }

	// RVA: 0x2625DE4 Offset: 0x2625DE4 VA: 0x2625DE4
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2625FBC Offset: 0x2625FBC VA: 0x2625FBC
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x2626324 Offset: 0x2626324 VA: 0x2626324
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x262645C Offset: 0x262645C VA: 0x262645C
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2626584 Offset: 0x2626584 VA: 0x2626584
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x26267E8 Offset: 0x26267E8 VA: 0x26267E8
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2627174 Offset: 0x2627174 VA: 0x2627174
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2626F40 Offset: 0x2626F40 VA: 0x2626F40
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x262648C Offset: 0x262648C VA: 0x262648C
	public static void Reduce17(ulong[] z, int zOff) { }

	// RVA: 0x26271C8 Offset: 0x26271C8 VA: 0x26271C8
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x26267A0 Offset: 0x26267A0 VA: 0x26267A0
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x26276FC Offset: 0x26276FC VA: 0x26276FC
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x2626838 Offset: 0x2626838 VA: 0x2626838
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x2627748 Offset: 0x2627748 VA: 0x2627748
	public static uint Trace(ulong[] x) { }

	// RVA: 0x26277E0 Offset: 0x26277E0 VA: 0x26277E0
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x2627A54 Offset: 0x2627A54 VA: 0x2627A54
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x26268B8 Offset: 0x26268B8 VA: 0x26268B8
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2627BA8 Offset: 0x2627BA8 VA: 0x2627BA8
	protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x26275B4 Offset: 0x26275B4 VA: 0x26275B4
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239FieldElement : ECFieldElement // TypeDefIndex: 5094
{
	// Fields
	protected ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2627F74 Offset: 0x2627F74 VA: 0x2627F74
	public void .ctor(BigInteger x) { }

	// RVA: 0x2628060 Offset: 0x2628060 VA: 0x2628060
	public void .ctor() { }

	// RVA: 0x2628090 Offset: 0x2628090 VA: 0x2628090
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x26280BC Offset: 0x26280BC VA: 0x26280BC Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x26280C8 Offset: 0x26280C8 VA: 0x26280C8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x26280D4 Offset: 0x26280D4 VA: 0x26280D4 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x262811C Offset: 0x262811C VA: 0x262811C Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2628128 Offset: 0x2628128 VA: 0x2628128 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2628170 Offset: 0x2628170 VA: 0x2628170 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2628178 Offset: 0x2628178 VA: 0x2628178 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x26282F8 Offset: 0x26282F8 VA: 0x26282F8 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2628378 Offset: 0x2628378 VA: 0x2628378 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2628384 Offset: 0x2628384 VA: 0x2628384 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2628504 Offset: 0x2628504 VA: 0x2628504 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2628514 Offset: 0x2628514 VA: 0x2628514 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2628880 Offset: 0x2628880 VA: 0x2628880 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x26288D0 Offset: 0x26288D0 VA: 0x26288D0 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x26288D4 Offset: 0x26288D4 VA: 0x26288D4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2628954 Offset: 0x2628954 VA: 0x2628954 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2628964 Offset: 0x2628964 VA: 0x2628964 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2628BE8 Offset: 0x2628BE8 VA: 0x2628BE8 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2628C80 Offset: 0x2628C80 VA: 0x2628C80 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2628D00 Offset: 0x2628D00 VA: 0x2628D00 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2628D80 Offset: 0x2628D80 VA: 0x2628D80 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2628D88 Offset: 0x2628D88 VA: 0x2628D88 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x2628D90 Offset: 0x2628D90 VA: 0x2628D90 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2628D98 Offset: 0x2628D98 VA: 0x2628D98 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x2628DA0 Offset: 0x2628DA0 VA: 0x2628DA0 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2628DA8 Offset: 0x2628DA8 VA: 0x2628DA8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2628E44 Offset: 0x2628E44 VA: 0x2628E44 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2628EE0 Offset: 0x2628EE0 VA: 0x2628EE0 Slot: 32
	public virtual bool Equals(SecT239FieldElement other) { }

	// RVA: 0x2628F0C Offset: 0x2628F0C VA: 0x2628F0C Slot: 2
	public override int GetHashCode() { }
}

