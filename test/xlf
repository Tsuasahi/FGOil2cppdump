
	// RVA: 0x278B23C Offset: 0x278B23C VA: 0x278B23C
	public void .ctor() { }

	// RVA: 0x278B26C Offset: 0x278B26C VA: 0x278B26C
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x278B298 Offset: 0x278B298 VA: 0x278B298 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x278B2A4 Offset: 0x278B2A4 VA: 0x278B2A4 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x278B2B0 Offset: 0x278B2B0 VA: 0x278B2B0 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x278B2F8 Offset: 0x278B2F8 VA: 0x278B2F8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x278B304 Offset: 0x278B304 VA: 0x278B304 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x278B34C Offset: 0x278B34C VA: 0x278B34C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x278B354 Offset: 0x278B354 VA: 0x278B354 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x278B4D4 Offset: 0x278B4D4 VA: 0x278B4D4 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x278B554 Offset: 0x278B554 VA: 0x278B554 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x278B560 Offset: 0x278B560 VA: 0x278B560 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x278B6E0 Offset: 0x278B6E0 VA: 0x278B6E0 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x278B6F0 Offset: 0x278B6F0 VA: 0x278B6F0 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x278BA5C Offset: 0x278BA5C VA: 0x278BA5C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x278BAAC Offset: 0x278BAAC VA: 0x278BAAC Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x278BAB0 Offset: 0x278BAB0 VA: 0x278BAB0 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x278BB30 Offset: 0x278BB30 VA: 0x278BB30 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x278BB40 Offset: 0x278BB40 VA: 0x278BB40 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x278BDC4 Offset: 0x278BDC4 VA: 0x278BDC4 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x278BE5C Offset: 0x278BE5C VA: 0x278BE5C Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x278BEDC Offset: 0x278BEDC VA: 0x278BEDC Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x278BF5C Offset: 0x278BF5C VA: 0x278BF5C Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x278BF64 Offset: 0x278BF64 VA: 0x278BF64 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x278BF6C Offset: 0x278BF6C VA: 0x278BF6C Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x278BF74 Offset: 0x278BF74 VA: 0x278BF74 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x278BF7C Offset: 0x278BF7C VA: 0x278BF7C Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x278BF84 Offset: 0x278BF84 VA: 0x278BF84 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x278C020 Offset: 0x278C020 VA: 0x278C020 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x278C0BC Offset: 0x278C0BC VA: 0x278C0BC Slot: 32
	public virtual bool Equals(SecT193FieldElement other) { }

	// RVA: 0x278C0E8 Offset: 0x278C0E8 VA: 0x278C0E8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R1Curve : AbstractF2mCurve // TypeDefIndex: 5083
{
	// Fields
	private const int SecT193R1_DEFAULT_COORDS = 6;
	protected readonly SecT193R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x278C118 Offset: 0x278C118 VA: 0x278C118
	public void .ctor() { }

	// RVA: 0x278C2E4 Offset: 0x278C2E4 VA: 0x278C2E4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x278C33C Offset: 0x278C33C VA: 0x278C33C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x278C348 Offset: 0x278C348 VA: 0x278C348 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x278C350 Offset: 0x278C350 VA: 0x278C350 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x278C358 Offset: 0x278C358 VA: 0x278C358 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x278C3B8 Offset: 0x278C3B8 VA: 0x278C3B8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x278C518 Offset: 0x278C518 VA: 0x278C518 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x278C5B8 Offset: 0x278C5B8 VA: 0x278C5B8 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x278C5C0 Offset: 0x278C5C0 VA: 0x278C5C0 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x278C5C8 Offset: 0x278C5C8 VA: 0x278C5C8 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x278C5D0 Offset: 0x278C5D0 VA: 0x278C5D0 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x278C5D8 Offset: 0x278C5D8 VA: 0x278C5D8 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x278C5E0 Offset: 0x278C5E0 VA: 0x278C5E0 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R1Point : AbstractF2mPoint // TypeDefIndex: 5084
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x278C2DC Offset: 0x278C2DC VA: 0x278C2DC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x278C440 Offset: 0x278C440 VA: 0x278C440
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x278C5AC Offset: 0x278C5AC VA: 0x278C5AC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x278C5E8 Offset: 0x278C5E8 VA: 0x278C5E8 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x278C688 Offset: 0x278C688 VA: 0x278C688 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x278C7C8 Offset: 0x278C7C8 VA: 0x278C7C8 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x278C864 Offset: 0x278C864 VA: 0x278C864 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x278D200 Offset: 0x278D200 VA: 0x278D200 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x278D648 Offset: 0x278D648 VA: 0x278D648 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x278DD28 Offset: 0x278DD28 VA: 0x278DD28 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R2Curve : AbstractF2mCurve // TypeDefIndex: 5085
{
	// Fields
	private const int SecT193R2_DEFAULT_COORDS = 6;
	protected readonly SecT193R2Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2708D44 Offset: 0x2708D44 VA: 0x2708D44
	public void .ctor() { }

	// RVA: 0x2708F10 Offset: 0x2708F10 VA: 0x2708F10 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2708F68 Offset: 0x2708F68 VA: 0x2708F68 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2708F74 Offset: 0x2708F74 VA: 0x2708F74 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2708F7C Offset: 0x2708F7C VA: 0x2708F7C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2708F84 Offset: 0x2708F84 VA: 0x2708F84 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2708FE8 Offset: 0x2708FE8 VA: 0x2708FE8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2709148 Offset: 0x2709148 VA: 0x2709148 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x27091E8 Offset: 0x27091E8 VA: 0x27091E8 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x27091F0 Offset: 0x27091F0 VA: 0x27091F0 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x27091F8 Offset: 0x27091F8 VA: 0x27091F8 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2709200 Offset: 0x2709200 VA: 0x2709200 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2709208 Offset: 0x2709208 VA: 0x2709208 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2709210 Offset: 0x2709210 VA: 0x2709210 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193R2Point : AbstractF2mPoint // TypeDefIndex: 5086
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2708F08 Offset: 0x2708F08 VA: 0x2708F08
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2709070 Offset: 0x2709070 VA: 0x2709070
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x27091DC Offset: 0x27091DC VA: 0x27091DC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2709218 Offset: 0x2709218 VA: 0x2709218 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x27092B8 Offset: 0x27092B8 VA: 0x27092B8 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x27093F8 Offset: 0x27093F8 VA: 0x27093F8 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2709494 Offset: 0x2709494 VA: 0x2709494 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2709E30 Offset: 0x2709E30 VA: 0x2709E30 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x270A278 Offset: 0x270A278 VA: 0x270A278 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x270A958 Offset: 0x270A958 VA: 0x270A958 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233Field // TypeDefIndex: 5087
{
	// Fields
	private const ulong M41 = 2199023255551;
	private const ulong M59 = 576460752303423487;

	// Methods

	// RVA: 0x270AB14 Offset: 0x270AB14 VA: 0x270AB14
	public void .ctor() { }

	// RVA: 0x270AB1C Offset: 0x270AB1C VA: 0x270AB1C
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x270ACF4 Offset: 0x270ACF4 VA: 0x270ACF4
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x270B05C Offset: 0x270B05C VA: 0x270B05C
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x270B194 Offset: 0x270B194 VA: 0x270B194
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x270B2BC Offset: 0x270B2BC VA: 0x270B2BC
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x270B4E8 Offset: 0x270B4E8 VA: 0x270B4E8
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x270BE98 Offset: 0x270BE98 VA: 0x270BE98
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x270BC40 Offset: 0x270BC40 VA: 0x270BC40
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x270B1C4 Offset: 0x270B1C4 VA: 0x270B1C4
	public static void Reduce23(ulong[] z, int zOff) { }

	// RVA: 0x270BEEC Offset: 0x270BEEC VA: 0x270BEEC
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x270B4A0 Offset: 0x270B4A0 VA: 0x270B4A0
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x270C3A4 Offset: 0x270C3A4 VA: 0x270C3A4
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x270B538 Offset: 0x270B538 VA: 0x270B538
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x270C3F0 Offset: 0x270C3F0 VA: 0x270C3F0
	public static uint Trace(ulong[] x) { }

	// RVA: 0x270C458 Offset: 0x270C458 VA: 0x270C458
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x270C6CC Offset: 0x270C6CC VA: 0x270C6CC
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x270B5B8 Offset: 0x270B5B8 VA: 0x270B5B8
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x270C820 Offset: 0x270C820 VA: 0x270C820
	protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x270C25C Offset: 0x270C25C VA: 0x270C25C
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233FieldElement : ECFieldElement // TypeDefIndex: 5088
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x270CBCC Offset: 0x270CBCC VA: 0x270CBCC
	public void .ctor(BigInteger x) { }

	// RVA: 0x270CCB8 Offset: 0x270CCB8 VA: 0x270CCB8
	public void .ctor() { }

	// RVA: 0x270CCE8 Offset: 0x270CCE8 VA: 0x270CCE8
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x270CD14 Offset: 0x270CD14 VA: 0x270CD14 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x270CD20 Offset: 0x270CD20 VA: 0x270CD20 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x270CD2C Offset: 0x270CD2C VA: 0x270CD2C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x270CD74 Offset: 0x270CD74 VA: 0x270CD74 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x270CD80 Offset: 0x270CD80 VA: 0x270CD80 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x270CDC8 Offset: 0x270CDC8 VA: 0x270CDC8 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x270CDD0 Offset: 0x270CDD0 VA: 0x270CDD0 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x270CF50 Offset: 0x270CF50 VA: 0x270CF50 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x270CFD0 Offset: 0x270CFD0 VA: 0x270CFD0 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x270CFDC Offset: 0x270CFDC VA: 0x270CFDC Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x270D15C Offset: 0x270D15C VA: 0x270D15C Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x270D16C Offset: 0x270D16C VA: 0x270D16C Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x270D4D8 Offset: 0x270D4D8 VA: 0x270D4D8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x270D528 Offset: 0x270D528 VA: 0x270D528 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x270D52C Offset: 0x270D52C VA: 0x270D52C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x270D5AC Offset: 0x270D5AC VA: 0x270D5AC Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x270D5BC Offset: 0x270D5BC VA: 0x270D5BC Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x270D840 Offset: 0x270D840 VA: 0x270D840 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x270D8D8 Offset: 0x270D8D8 VA: 0x270D8D8 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x270D958 Offset: 0x270D958 VA: 0x270D958 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x270D9D8 Offset: 0x270D9D8 VA: 0x270D9D8 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x270D9E0 Offset: 0x270D9E0 VA: 0x270D9E0 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x270D9E8 Offset: 0x270D9E8 VA: 0x270D9E8 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x270D9F0 Offset: 0x270D9F0 VA: 0x270D9F0 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x270D9F8 Offset: 0x270D9F8 VA: 0x270D9F8 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x270DA00 Offset: 0x270DA00 VA: 0x270DA00 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x270DA9C Offset: 0x270DA9C VA: 0x270DA9C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x270DB38 Offset: 0x270DB38 VA: 0x270DB38 Slot: 32
	public virtual bool Equals(SecT233FieldElement other) { }

	// RVA: 0x270DB64 Offset: 0x270DB64 VA: 0x270DB64 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233K1Curve : AbstractF2mCurve // TypeDefIndex: 5089
{
	// Fields
	private const int SecT233K1_DEFAULT_COORDS = 6;
	protected readonly SecT233K1Point m_infinity; // 0x58

	// Properties
	public override int FieldSize { get; }
	public override ECPoint Infinity { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x270DB94 Offset: 0x270DB94 VA: 0x270DB94
	public void .ctor() { }

	// RVA: 0x270DD00 Offset: 0x270DD00 VA: 0x270DD00 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x270DD58 Offset: 0x270DD58 VA: 0x270DD58 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x270DD64 Offset: 0x270DD64 VA: 0x270DD64 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x270DDC0 Offset: 0x270DDC0 VA: 0x270DDC0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x270DDC8 Offset: 0x270DDC8 VA: 0x270DDC8 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x270DE28 Offset: 0x270DE28 VA: 0x270DE28 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x270DF88 Offset: 0x270DF88 VA: 0x270DF88 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x270E028 Offset: 0x270E028 VA: 0x270E028 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x270E030 Offset: 0x270E030 VA: 0x270E030 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x270E038 Offset: 0x270E038 VA: 0x270E038 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x270E040 Offset: 0x270E040 VA: 0x270E040 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x270E048 Offset: 0x270E048 VA: 0x270E048 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x270E050 Offset: 0x270E050 VA: 0x270E050 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x270E058 Offset: 0x270E058 VA: 0x270E058 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233K1Point : AbstractF2mPoint // TypeDefIndex: 5090
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x270DCF8 Offset: 0x270DCF8 VA: 0x270DCF8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x270DEB0 Offset: 0x270DEB0 VA: 0x270DEB0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x270E01C Offset: 0x270E01C VA: 0x270E01C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x270E060 Offset: 0x270E060 VA: 0x270E060 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x270E100 Offset: 0x270E100 VA: 0x270E100 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x270E240 Offset: 0x270E240 VA: 0x270E240 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x270E2DC Offset: 0x270E2DC VA: 0x270E2DC Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x270EC14 Offset: 0x270EC14 VA: 0x270EC14 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x270F078 Offset: 0x270F078 VA: 0x270F078 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x270F6CC Offset: 0x270F6CC VA: 0x270F6CC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233R1Curve : AbstractF2mCurve // TypeDefIndex: 5091
{
	// Fields
	private const int SecT233R1_DEFAULT_COORDS = 6;
	protected readonly SecT233R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x270F888 Offset: 0x270F888 VA: 0x270F888
	public void .ctor() { }

	// RVA: 0x270FA24 Offset: 0x270FA24 VA: 0x270FA24 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x270FA7C Offset: 0x270FA7C VA: 0x270FA7C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x270FA88 Offset: 0x270FA88 VA: 0x270FA88 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x270FA90 Offset: 0x270FA90 VA: 0x270FA90 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x270FA98 Offset: 0x270FA98 VA: 0x270FA98 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x270FAF8 Offset: 0x270FAF8 VA: 0x270FAF8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x270FC58 Offset: 0x270FC58 VA: 0x270FC58 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x270FCF8 Offset: 0x270FCF8 VA: 0x270FCF8 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x270FD00 Offset: 0x270FD00 VA: 0x270FD00 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x270FD08 Offset: 0x270FD08 VA: 0x270FD08 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x270FD10 Offset: 0x270FD10 VA: 0x270FD10 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x270FD18 Offset: 0x270FD18 VA: 0x270FD18 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x270FD20 Offset: 0x270FD20 VA: 0x270FD20 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT233R1Point : AbstractF2mPoint // TypeDefIndex: 5092
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x270FA1C Offset: 0x270FA1C VA: 0x270FA1C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x270FB80 Offset: 0x270FB80 VA: 0x270FB80
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x270FCEC Offset: 0x270FCEC VA: 0x270FCEC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x270FD28 Offset: 0x270FD28 VA: 0x270FD28 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x270FDC8 Offset: 0x270FDC8 VA: 0x270FDC8 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x270FF08 Offset: 0x270FF08 VA: 0x270FF08 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x270FFA4 Offset: 0x270FFA4 VA: 0x270FFA4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2710938 Offset: 0x2710938 VA: 0x2710938 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2710D48 Offset: 0x2710D48 VA: 0x2710D48 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x27113DC Offset: 0x27113DC VA: 0x27113DC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239Field // TypeDefIndex: 5093
{
	// Fields
	private const ulong M47 = 140737488355327;
	private const ulong M60 = 1152921504606846975;

	// Methods

	// RVA: 0x2711598 Offset: 0x2711598 VA: 0x2711598
	public void .ctor() { }

	// RVA: 0x27115A0 Offset: 0x27115A0 VA: 0x27115A0
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2711778 Offset: 0x2711778 VA: 0x2711778
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x2711AE0 Offset: 0x2711AE0 VA: 0x2711AE0
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x2711C18 Offset: 0x2711C18 VA: 0x2711C18
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2711D40 Offset: 0x2711D40 VA: 0x2711D40
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x2711FA4 Offset: 0x2711FA4 VA: 0x2711FA4
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2712930 Offset: 0x2712930 VA: 0x2712930
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x27126FC Offset: 0x27126FC VA: 0x27126FC
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x2711C48 Offset: 0x2711C48 VA: 0x2711C48
	public static void Reduce17(ulong[] z, int zOff) { }

	// RVA: 0x2712984 Offset: 0x2712984 VA: 0x2712984
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x2711F5C Offset: 0x2711F5C VA: 0x2711F5C
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x2712EB8 Offset: 0x2712EB8 VA: 0x2712EB8
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x2711FF4 Offset: 0x2711FF4 VA: 0x2711FF4
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x2712F04 Offset: 0x2712F04 VA: 0x2712F04
	public static uint Trace(ulong[] x) { }

	// RVA: 0x2712F9C Offset: 0x2712F9C VA: 0x2712F9C
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x2713210 Offset: 0x2713210 VA: 0x2713210
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x2712074 Offset: 0x2712074 VA: 0x2712074
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2713364 Offset: 0x2713364 VA: 0x2713364
	protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x2712D70 Offset: 0x2712D70 VA: 0x2712D70
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239FieldElement : ECFieldElement // TypeDefIndex: 5094
{
	// Fields
	protected ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2713730 Offset: 0x2713730 VA: 0x2713730
	public void .ctor(BigInteger x) { }

	// RVA: 0x271381C Offset: 0x271381C VA: 0x271381C
	public void .ctor() { }

	// RVA: 0x271384C Offset: 0x271384C VA: 0x271384C
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2713878 Offset: 0x2713878 VA: 0x2713878 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2713884 Offset: 0x2713884 VA: 0x2713884 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2713890 Offset: 0x2713890 VA: 0x2713890 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x27138D8 Offset: 0x27138D8 VA: 0x27138D8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x27138E4 Offset: 0x27138E4 VA: 0x27138E4 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x271392C Offset: 0x271392C VA: 0x271392C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2713934 Offset: 0x2713934 VA: 0x2713934 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2713AB4 Offset: 0x2713AB4 VA: 0x2713AB4 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2713B34 Offset: 0x2713B34 VA: 0x2713B34 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2713B40 Offset: 0x2713B40 VA: 0x2713B40 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2713CC0 Offset: 0x2713CC0 VA: 0x2713CC0 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2713CD0 Offset: 0x2713CD0 VA: 0x2713CD0 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x271403C Offset: 0x271403C VA: 0x271403C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x271408C Offset: 0x271408C VA: 0x271408C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2714090 Offset: 0x2714090 VA: 0x2714090 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2714110 Offset: 0x2714110 VA: 0x2714110 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2714120 Offset: 0x2714120 VA: 0x2714120 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27143A4 Offset: 0x27143A4 VA: 0x27143A4 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x271443C Offset: 0x271443C VA: 0x271443C Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x27144BC Offset: 0x27144BC VA: 0x27144BC Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x271453C Offset: 0x271453C VA: 0x271453C Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2714544 Offset: 0x2714544 VA: 0x2714544 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x271454C Offset: 0x271454C VA: 0x271454C Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2714554 Offset: 0x2714554 VA: 0x2714554 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x271455C Offset: 0x271455C VA: 0x271455C Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2714564 Offset: 0x2714564 VA: 0x2714564 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2714600 Offset: 0x2714600 VA: 0x2714600 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x271469C Offset: 0x271469C VA: 0x271469C Slot: 32
	public virtual bool Equals(SecT239FieldElement other) { }

	// RVA: 0x27146C8 Offset: 0x27146C8 VA: 0x27146C8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239K1Curve : AbstractF2mCurve // TypeDefIndex: 5095
{
	// Fields
	private const int SecT239K1_DEFAULT_COORDS = 6;
	protected readonly SecT239K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x27146F8 Offset: 0x27146F8 VA: 0x27146F8
	public void .ctor() { }

	// RVA: 0x2714864 Offset: 0x2714864 VA: 0x2714864 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x27148BC Offset: 0x27148BC VA: 0x27148BC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x27148C8 Offset: 0x27148C8 VA: 0x27148C8 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2714924 Offset: 0x2714924 VA: 0x2714924 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x271492C Offset: 0x271492C VA: 0x271492C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2714934 Offset: 0x2714934 VA: 0x2714934 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2714994 Offset: 0x2714994 VA: 0x2714994 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2714AF4 Offset: 0x2714AF4 VA: 0x2714AF4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2714B94 Offset: 0x2714B94 VA: 0x2714B94 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2714B9C Offset: 0x2714B9C VA: 0x2714B9C Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2714BA4 Offset: 0x2714BA4 VA: 0x2714BA4 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2714BAC Offset: 0x2714BAC VA: 0x2714BAC Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2714BB4 Offset: 0x2714BB4 VA: 0x2714BB4 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2714BBC Offset: 0x2714BBC VA: 0x2714BBC Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239K1Point : AbstractF2mPoint // TypeDefIndex: 5096
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x271485C Offset: 0x271485C VA: 0x271485C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2714A1C Offset: 0x2714A1C VA: 0x2714A1C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2714B88 Offset: 0x2714B88 VA: 0x2714B88
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2714BC4 Offset: 0x2714BC4 VA: 0x2714BC4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2714C64 Offset: 0x2714C64 VA: 0x2714C64 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2714DA4 Offset: 0x2714DA4 VA: 0x2714DA4 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2714E40 Offset: 0x2714E40 VA: 0x2714E40 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2715778 Offset: 0x2715778 VA: 0x2715778 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2715BDC Offset: 0x2715BDC VA: 0x2715BDC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2716230 Offset: 0x2716230 VA: 0x2716230 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283Field // TypeDefIndex: 5097
{
	// Fields
	private const ulong M27 = 134217727;
	private const ulong M57 = 144115188075855871;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x27163EC Offset: 0x27163EC VA: 0x27163EC
	public void .ctor() { }

	// RVA: 0x27163F4 Offset: 0x27163F4 VA: 0x27163F4
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2716630 Offset: 0x2716630 VA: 0x2716630
