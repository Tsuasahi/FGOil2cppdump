	|-DataManager.GetMasterData<CommandCodeSkillMaster>
	|-DataManager.GetMasterData<CommonConsumeMaster>
	|-DataManager.GetMasterData<CommonReleaseMaster>
	|-DataManager.GetMasterData<EventBossStatusUiMaster>
	|-DataManager.GetMasterData<EventCampaignMaster>
	|-DataManager.GetMasterData<EventDetailMaster>
	|-DataManager.GetMasterData<EventMaster>
	|-DataManager.GetMasterData<EventMissionConditionMaster>
	|-DataManager.GetMasterData<EventPointGroupMaster>
	|-DataManager.GetMasterData<EventQuestCooltimeMaster>
	|-DataManager.GetMasterData<EventRaidMaster>
	|-DataManager.GetMasterData<EventRewardMaster>
	|-DataManager.GetMasterData<EventRewardSceneMaster>
	|-DataManager.GetMasterData<FieldMotionMaster>
	|-DataManager.GetMasterData<FunctionCategoryMaster>
	|-DataManager.GetMasterData<FunctionMaster>
	|-DataManager.GetMasterData<GachaMaster>
	|-DataManager.GetMasterData<GiftMaster>
	|-DataManager.GetMasterData<ItemMaster>
	|-DataManager.GetMasterData<MyRoomAddMaster>
	|-DataManager.GetMasterData<QuestAddMaster>
	|-DataManager.GetMasterData<QuestMaster>
	|-DataManager.GetMasterData<QuestPhaseMaster>
	|-DataManager.GetMasterData<QuestReleaseMaster>
	|-DataManager.GetMasterData<ServantCommentAddMaster>
	|-DataManager.GetMasterData<ServantCommentMaster>
	|-DataManager.GetMasterData<ServantCostumeMaster>
	|-DataManager.GetMasterData<ServantCostumeReleaseMaster>
	|-DataManager.GetMasterData<ServantLimitAddMaster>
	|-DataManager.GetMasterData<ServantLimitImageMaster>
	|-DataManager.GetMasterData<ServantLimitMaster>
	|-DataManager.GetMasterData<ServantMaster>
	|-DataManager.GetMasterData<ServantScriptMaster>
	|-DataManager.GetMasterData<ServantTreasureDeviceReleaseMaster>
	|-DataManager.GetMasterData<ServantVoiceMaster>
	|-DataManager.GetMasterData<ServantVoiceRelationMaster>
	|-DataManager.GetMasterData<ShopMaster>
	|-DataManager.GetMasterData<ShopReleaseMaster>
	|-DataManager.GetMasterData<SkillLvMaster>
	|-DataManager.GetMasterData<SpotMaster>
	|-DataManager.GetMasterData<SvtCoinMaster>
	|-DataManager.GetMasterData<SvtMaterialTdMaster>
	|-DataManager.GetMasterData<SvtMultiPortraitMaster>
	|-DataManager.GetMasterData<object>
	|-DataManager.GetMasterData<TreasureBoxGiftMaster>
	|-DataManager.GetMasterData<TreasureBoxMaster>
	|-DataManager.GetMasterData<TreasureBoxTalkMaster>
	|-DataManager.GetMasterData<TreasureDvcMaster>
	|-DataManager.GetMasterData<UpdateProfileDialogInfoMaster>
	|-DataManager.GetMasterData<UserCoinRoomMaster>
	|-DataManager.GetMasterData<UserCommandCodeMaster>
	|-DataManager.GetMasterData<UserDeckMaster>
	|-DataManager.GetMasterData<UserDeleteReservationMaster>
	|-DataManager.GetMasterData<UserEventMaster>
	|-DataManager.GetMasterData<UserEventRaidMaster>
	|-DataManager.GetMasterData<UserFriendPointGachaFreeDrawCampaignLogMaster>
	|-DataManager.GetMasterData<UserGachaExtraCountMaster>
	|-DataManager.GetMasterData<UserGachaMaster>
	|-DataManager.GetMasterData<UserItemMaster>
	|-DataManager.GetMasterData<UserQuestMaster>
	|-DataManager.GetMasterData<UserServantCollectionMaster>
	|-DataManager.GetMasterData<UserServantMaster>
	|-DataManager.GetMasterData<UserShopMaster>
	|-DataManager.GetMasterData<UserSvtCoinMaster>
	|-DataManager.GetMasterData<VoiceMaster>
	|-DataManager.GetMasterData<VoicePlayCondMaster>
	|-DataManager.GetMasterData<WarMaster>
	*/

	[ObsoleteAttribute] // RVA: 0xCC9EC8 Offset: 0xCC9EC8 VA: 0xCC9EC8
	// RVA: 0x11DA23C Offset: 0x11DA23C VA: 0x11DA23C
	public DataMasterBase getMasterData(DataNameKind.Kind kind) { }

	[ObsoleteAttribute] // RVA: 0xCC9F00 Offset: 0xCC9F00 VA: 0xCC9F00
	// RVA: -1 Offset: -1
	public T getMasterData<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1E010 Offset: 0x1C1E010 VA: 0x1C1E010
	|-DataManager.getMasterData<AiActMaster>
	|-DataManager.getMasterData<AiFieldMaster>
	|-DataManager.getMasterData<AiMaster>
	|-DataManager.getMasterData<AssistMaster>
	|-DataManager.getMasterData<AttriRelationMaster>
	|-DataManager.getMasterData<AuraEffectMaster>
	|-DataManager.getMasterData<AuraEffectPosOverwriteMaster>
	|-DataManager.getMasterData<BankShopMaster>
	|-DataManager.getMasterData<BannerAddMaster>
	|-DataManager.getMasterData<BannerMaster>
	|-DataManager.getMasterData<BattleBgMaster>
	|-DataManager.getMasterData<BgmMaster>
	|-DataManager.getMasterData<BgmReleaseMaster>
	|-DataManager.getMasterData<BoardMessageMaster>
	|-DataManager.getMasterData<BoardMessageReleaseMaster>
	|-DataManager.getMasterData<BoostMaster>
	|-DataManager.getMasterData<BoxGachaBaseMaster>
	|-DataManager.getMasterData<BoxGachaHistoryMaster>
	|-DataManager.getMasterData<BoxGachaMaster>
	|-DataManager.getMasterData<BoxGachaTalkMaster>
	|-DataManager.getMasterData<BuffMaster>
	|-DataManager.getMasterData<CampaignInfoMaster>
	|-DataManager.getMasterData<CardMaster>
	|-DataManager.getMasterData<ClassRelationMaster>
	|-DataManager.getMasterData<ClassRelationOverwriteMaster>
	|-DataManager.getMasterData<ClosedMessageMaster>
	|-DataManager.getMasterData<CombineCostumeMaster>
	|-DataManager.getMasterData<CombineLimitMaster>
	|-DataManager.getMasterData<CombineMaster>
	|-DataManager.getMasterData<CombineMaterialMaster>
	|-DataManager.getMasterData<CombineQpMaster>
	|-DataManager.getMasterData<CombineQpSvtEquipMaster>
	|-DataManager.getMasterData<CombineSkillMaster>
	|-DataManager.getMasterData<CommandCardRankParamMaster>
	|-DataManager.getMasterData<CommandCodeCommentMaster>
	|-DataManager.getMasterData<CommandCodeMaster>
	|-DataManager.getMasterData<CommandCodeSkillMaster>
	|-DataManager.getMasterData<CommandCodeSkillReleaseMaster>
	|-DataManager.getMasterData<CommandSpellMaster>
	|-DataManager.getMasterData<CommonConsumeMaster>
	|-DataManager.getMasterData<CommonReleaseMaster>
	|-DataManager.getMasterData<CommonRestrictionMaster>
	|-DataManager.getMasterData<CompleteMissionMaster>
	|-DataManager.getMasterData<ConstantLongMaster>
	|-DataManager.getMasterData<ConstantMaster>
	|-DataManager.getMasterData<ConstantStrMaster>
	|-DataManager.getMasterData<DialogMessageMaster>
	|-DataManager.getMasterData<EffectMaster>
	|-DataManager.getMasterData<EnemyMstBattleMaster>
	|-DataManager.getMasterData<EquipExpMaster>
	|-DataManager.getMasterData<EquipMaster>
	|-DataManager.getMasterData<EquipSkillMaster>
	|-DataManager.getMasterData<EventAddMaster>
	|-DataManager.getMasterData<EventBoardGameCellMaster>
	|-DataManager.getMasterData<EventBoardGameTokenMaster>
	|-DataManager.getMasterData<EventBoardGameTokenRewardMaster>
	|-DataManager.getMasterData<EventBonusFilterGroupInfoMaster>
	|-DataManager.getMasterData<EventBonusFilterGroupMemberMaster>
	|-DataManager.getMasterData<EventBonusFilterMaster>
	|-DataManager.getMasterData<EventBoostItemUsedMaster>
	|-DataManager.getMasterData<EventBossStatusUiMaster>
	|-DataManager.getMasterData<EventBulletinBoardMaster>
	|-DataManager.getMasterData<EventBulletinBoardReleaseMaster>
	|-DataManager.getMasterData<EventCampaignMaster>
	|-DataManager.getMasterData<EventCampaignReleaseMaster>
	|-DataManager.getMasterData<EventCombineCostumeMaster>
	|-DataManager.getMasterData<EventConquestRewardMaster>
	|-DataManager.getMasterData<EventDetailMaster>
	|-DataManager.getMasterData<EventEquipSkillReleaseMaster>
	|-DataManager.getMasterData<EventFactoryMaster>
	|-DataManager.getMasterData<EventFatigueRecoveryMaster>
	|-DataManager.getMasterData<EventFilterMaster>
	|-DataManager.getMasterData<EventGroupMaster>
	|-DataManager.getMasterData<EventItemDisplayGroupMaster>
	|-DataManager.getMasterData<EventItemDisplayMaster>
	|-DataManager.getMasterData<EventItemDisplayReleaseMaster>
	|-DataManager.getMasterData<EventLocationCampaignMaster>
	|-DataManager.getMasterData<EventMaster>
	|-DataManager.getMasterData<EventMissionActionAddMaster>
	|-DataManager.getMasterData<EventMissionActionMaster>
	|-DataManager.getMasterData<EventMissionAddMaster>
	|-DataManager.getMasterData<EventMissionCondDetailMaster>
	|-DataManager.getMasterData<EventMissionConditionMaster>
	|-DataManager.getMasterData<EventMissionMaster>
	|-DataManager.getMasterData<EventPanelMapDetailMaster>
	|-DataManager.getMasterData<EventPanelMapMaster>
	|-DataManager.getMasterData<EventPanelScanMaster>
	|-DataManager.getMasterData<EventPanelSpotMaster>
	|-DataManager.getMasterData<EventPointActivityMaster>
	|-DataManager.getMasterData<EventPointBuffMaster>
	|-DataManager.getMasterData<EventPointGroupAddMaster>
	|-DataManager.getMasterData<EventPointGroupMaster>
	|-DataManager.getMasterData<EventPointMaster>
	|-DataManager.getMasterData<EventPointUpperMaster>
	|-DataManager.getMasterData<EventPointUpperReleaseMaster>
	|-DataManager.getMasterData<EventQuestCooltimeMaster>
	|-DataManager.getMasterData<EventQuestMaster>
	|-DataManager.getMasterData<EventRaceMaster>
	|-DataManager.getMasterData<EventRaceResultMaster>
	|-DataManager.getMasterData<EventRaidMaster>
	|-DataManager.getMasterData<EventRewardBgMaster>
	|-DataManager.getMasterData<EventRewardGuideReleaseMaster>
	|-DataManager.getMasterData<EventRewardMaster>
	|-DataManager.getMasterData<EventRewardSceneMaster>
	|-DataManager.getMasterData<EventRewardSceneReleaseMaster>
	|-DataManager.getMasterData<EventScriptMaster>
	|-DataManager.getMasterData<EventScriptReleaseMaster>
	|-DataManager.getMasterData<EventServantFatigueMaster>
	|-DataManager.getMasterData<EventServantMaster>
	|-DataManager.getMasterData<EventStatusMaster>
	|-DataManager.getMasterData<EventStatusQuestMaster>
	|-DataManager.getMasterData<EventSuperBossMaster>
	|-DataManager.getMasterData<EventTowerMaster>
	|-DataManager.getMasterData<EventTowerRewardMaster>
	|-DataManager.getMasterData<EventTutorialCondMaster>
	|-DataManager.getMasterData<EventTutorialMaster>
	|-DataManager.getMasterData<EventUiMaster>
	|-DataManager.getMasterData<EventUiReleaseMaster>
	|-DataManager.getMasterData<EventUiValueMaster>
	|-DataManager.getMasterData<EventVoicePlayMaster>
	|-DataManager.getMasterData<FriendshipMaster>
	|-DataManager.getMasterData<FriendshipQuestDialogInfoMaster>
	|-DataManager.getMasterData<FunctionGroupMaster>
	|-DataManager.getMasterData<FunctionMaster>
	|-DataManager.getMasterData<GachaBehaviorMaster>
	|-DataManager.getMasterData<GachaDetailMaster>
	|-DataManager.getMasterData<GachaMaster>
	|-DataManager.getMasterData<GachaReleaseMaster>
	|-DataManager.getMasterData<GachaStoryAdjustMaster>
	|-DataManager.getMasterData<GachaSubMaster>
	|-DataManager.getMasterData<GiftAddMaster>
	|-DataManager.getMasterData<GiftMaster>
	|-DataManager.getMasterData<GuideMaster>
	|-DataManager.getMasterData<ItemMaster>
	|-DataManager.getMasterData<ItemSelectMaster>
	|-DataManager.getMasterData<LoginQuestMaster>
	|-DataManager.getMasterData<MapButtonMaster>
	|-DataManager.getMasterData<MapCondMaster>
	|-DataManager.getMasterData<MapGimmickMaster>
	|-DataManager.getMasterData<MapGimmickReleaseMaster>
	|-DataManager.getMasterData<MapMaster>
	|-DataManager.getMasterData<MaterialFolderMaster>
	|-DataManager.getMasterData<MstMissionDisplayInfoMaster>
	|-DataManager.getMasterData<MstMissionMaster>
	|-DataManager.getMasterData<NewsMaster>
	|-DataManager.getMasterData<NotEndEventMissionFixMaster>
	|-DataManager.getMasterData<NpcFollowerMaster>
	|-DataManager.getMasterData<NpcFollowerReleaseMaster>
	|-DataManager.getMasterData<NpcServantEquipMaster>
	|-DataManager.getMasterData<NpcServantFollowerMaster>
	|-DataManager.getMasterData<OpeningMovieMaster>
	|-DataManager.getMasterData<OtherUserGameMaster>
	|-DataManager.getMasterData<PartialMaintenanceMaster>
	|-DataManager.getMasterData<PickupUserFollowerMaster>
	|-DataManager.getMasterData<PrivilegeMaster>
	|-DataManager.getMasterData<QuestBehaviorMaster>
	|-DataManager.getMasterData<QuestConsumeItemMaster>
	|-DataManager.getMasterData<QuestDateRangeMaster>
	|-DataManager.getMasterData<QuestGroupMaster>
	|-DataManager.getMasterData<QuestMaster>
	|-DataManager.getMasterData<QuestMessageMaster>
	|-DataManager.getMasterData<QuestPhaseDetailAddMaster>
	|-DataManager.getMasterData<QuestPhaseDetailMaster>
	|-DataManager.getMasterData<QuestPhaseMaster>
	|-DataManager.getMasterData<QuestPickupMaster>
	|-DataManager.getMasterData<QuestRacePointMaster>
	|-DataManager.getMasterData<QuestRandomGroupMaster>
	|-DataManager.getMasterData<QuestReleaseMaster>
	|-DataManager.getMasterData<QuestResetMaster>
	|-DataManager.getMasterData<QuestRestrictionInfoMaster>
	|-DataManager.getMasterData<QuestRestrictionMaster>
	|-DataManager.getMasterData<QuestScriptMaster>
	|-DataManager.getMasterData<QuestScriptReleaseMaster>
	|-DataManager.getMasterData<QuestSpotReleaseMaster>
	|-DataManager.getMasterData<RecoverMaster>
	|-DataManager.getMasterData<RestrictionMaster>
	|-DataManager.getMasterData<ServantAnimationOverwriteMaster>
	|-DataManager.getMasterData<ServantChangeMaster>
	|-DataManager.getMasterData<ServantClassMaster>
	|-DataManager.getMasterData<ServantCollectionMaster>
	|-DataManager.getMasterData<ServantCommandCodeUnlockMaster>
	|-DataManager.getMasterData<ServantCommentAddMaster>
	|-DataManager.getMasterData<ServantCommentMaster>
	|-DataManager.getMasterData<ServantCostumeMaster>
	|-DataManager.getMasterData<ServantCostumeReleaseMaster>
	|-DataManager.getMasterData<ServantExceedMaster>
	|-DataManager.getMasterData<ServantExpMaster>
	|-DataManager.getMasterData<ServantFilterMaster>
	|-DataManager.getMasterData<ServantFlagMaster>
	|-DataManager.getMasterData<ServantFlagReleaseMaster>
	|-DataManager.getMasterData<ServantGroupMaster>
	|-DataManager.getMasterData<ServantLimitAddMaster>
	|-DataManager.getMasterData<ServantLimitImageMaster>
	|-DataManager.getMasterData<ServantLimitMaster>
	|-DataManager.getMasterData<ServantLimitSpoilerProtectionMaster>
	|-DataManager.getMasterData<ServantLvDetailMaster>
	|-DataManager.getMasterData<ServantMaster>
	|-DataManager.getMasterData<ServantMaterialFolderMaster>
	|-DataManager.getMasterData<ServantPassiveSkillMaster>
	|-DataManager.getMasterData<ServantPassiveSkillReleaseMaster>
	|-DataManager.getMasterData<ServantProfileMaster>
	|-DataManager.getMasterData<ServantRarityMaster>
	|-DataManager.getMasterData<ServantScriptAddMaster>
	|-DataManager.getMasterData<ServantScriptMaster>
	|-DataManager.getMasterData<ServantSkillMaster>
	|-DataManager.getMasterData<ServantSkillReleaseMaster>
	|-DataManager.getMasterData<ServantTreasureDeviceAddMaster>
	|-DataManager.getMasterData<ServantTreasureDeviceDamageMaster>
	|-DataManager.getMasterData<ServantTreasureDeviceReleaseMaster>
	|-DataManager.getMasterData<ServantTreasureDvcMaster>
	|-DataManager.getMasterData<ServantVoiceMaster>
	|-DataManager.getMasterData<ServantVoiceRelationMaster>
	|-DataManager.getMasterData<SetItemMaster>
	|-DataManager.getMasterData<ShopActionMaster>
	|-DataManager.getMasterData<ShopDetailMaster>
	|-DataManager.getMasterData<ShopGroupMaster>
	|-DataManager.getMasterData<ShopMaster>
	|-DataManager.getMasterData<ShopReleaseMaster>
	|-DataManager.getMasterData<ShopScriptMaster>
	|-DataManager.getMasterData<SkillAddMaster>
	|-DataManager.getMasterData<SkillDetailMaster>
	|-DataManager.getMasterData<SkillLvMaster>
	|-DataManager.getMasterData<SkillMaster>
	|-DataManager.getMasterData<SpotAddMaster>
	|-DataManager.getMasterData<SpotImageMaster>
	|-DataManager.getMasterData<SpotMaster>
	|-DataManager.getMasterData<SpotPathMaster>
	|-DataManager.getMasterData<SpotRoadMaster>
	|-DataManager.getMasterData<StatusEffectPosOverwriteMaster>
	|-DataManager.getMasterData<StoneShopMaster>
	|-DataManager.getMasterData<object>
	|-DataManager.getMasterData<TblFriendMaster>
	|-DataManager.getMasterData<TblUserMaster>
	|-DataManager.getMasterData<TipsBattleMaster>
	|-DataManager.getMasterData<TotalBoxGachaMaster>
	|-DataManager.getMasterData<TotalEventPointMaster>
	|-DataManager.getMasterData<TotalEventRaceMaster>
	|-DataManager.getMasterData<TotalEventRaidMaster>
	|-DataManager.getMasterData<TotalLoginMaster>
	|-DataManager.getMasterData<TreasureDvcDetailMaster>
	|-DataManager.getMasterData<TreasureDvcLvMaster>
	|-DataManager.getMasterData<TreasureDvcMaster>
	|-DataManager.getMasterData<UserBlacklistMaster>
	|-DataManager.getMasterData<UserBoxGachaMaster>
	|-DataManager.getMasterData<UserCombineExpMaster>
	|-DataManager.getMasterData<UserCommandCodeCollectionMaster>
	|-DataManager.getMasterData<UserCommandCodeMaster>
	|-DataManager.getMasterData<UserContinueMaster>
	|-DataManager.getMasterData<UserDeckMaster>
	|-DataManager.getMasterData<UserEquipMaster>
	|-DataManager.getMasterData<UserEventBoardGameTokenMaster>
	|-DataManager.getMasterData<UserEventDeckMaster>
	|-DataManager.getMasterData<UserEventMapMaster>
	|-DataManager.getMasterData<UserEventMaster>
	|-DataManager.getMasterData<UserEventMissionCondDetailMaster>
	|-DataManager.getMasterData<UserEventMissionFixMaster>
	|-DataManager.getMasterData<UserEventMissionMaster>
	|-DataManager.getMasterData<UserEventPointMaster>
	|-DataManager.getMasterData<UserEventQuestCooltimeMaster>
	|-DataManager.getMasterData<UserEventRaceMaster>
	|-DataManager.getMasterData<UserEventRaidMaster>
	|-DataManager.getMasterData<UserEventServantFatigueMaster>
	|-DataManager.getMasterData<UserEventSpotMaster>
	|-DataManager.getMasterData<UserExpMaster>
	|-DataManager.getMasterData<UserFollowMaster>
	|-DataManager.getMasterData<UserFollowerMaster>
	|-DataManager.getMasterData<UserFriendRequestHistoryMaster>
	|-DataManager.getMasterData<UserGachaExtraCountMaster>
	|-DataManager.getMasterData<UserGachaMaster>
	|-DataManager.getMasterData<UserGameMaster>
	|-DataManager.getMasterData<UserItemMaster>
	|-DataManager.getMasterData<UserPresentBoxMaster>
	|-DataManager.getMasterData<UserPresentHistoryMaster>
	|-DataManager.getMasterData<UserPrivilegeMaster>
	|-DataManager.getMasterData<UserProfileMaster>
	|-DataManager.getMasterData<UserQuestInfoMaster>
	|-DataManager.getMasterData<UserQuestMaster>
	|-DataManager.getMasterData<UserQuestRecordMaster>
	|-DataManager.getMasterData<UserQuestRouteMaster>
	|-DataManager.getMasterData<UserServantCollectionMaster>
	|-DataManager.getMasterData<UserServantCommandCardMaster>
	|-DataManager.getMasterData<UserServantCommandCodeMaster>
	|-DataManager.getMasterData<UserServantLeaderMaster>
	|-DataManager.getMasterData<UserServantMaster>
	|-DataManager.getMasterData<UserServantStorageMaster>
	|-DataManager.getMasterData<UserShopMaster>
	|-DataManager.getMasterData<UserSuperBossMaster>
	|-DataManager.getMasterData<UserSupportDeckMaster>
	|-DataManager.getMasterData<ViewEnemyMaster>
	|-DataManager.getMasterData<ViewQuestInfoMaster>
	|-DataManager.getMasterData<VoiceClosedMessageMaster>
	|-DataManager.getMasterData<VoiceCondMaster>
	|-DataManager.getMasterData<VoiceMaster>
	|-DataManager.getMasterData<VoiceMaterialCondMaster>
	|-DataManager.getMasterData<VoicePlayCondMaster>
	|-DataManager.getMasterData<VoicePlayGroupMaster>
	|-DataManager.getMasterData<VoiceReleaseMaster>
	|-DataManager.getMasterData<WarAddMaster>
	|-DataManager.getMasterData<WarBoardAIMaster>
	|-DataManager.getMasterData<WarBoardActionPointMaster>
	|-DataManager.getMasterData<WarBoardActionTrendConditionMaster>
	|-DataManager.getMasterData<WarBoardActionTrendMaster>
	|-DataManager.getMasterData<WarBoardEffectMaster>
	|-DataManager.getMasterData<WarBoardIndividualityClassMaster>
	|-DataManager.getMasterData<WarBoardItemMaster>
	|-DataManager.getMasterData<WarBoardMaster>
	|-DataManager.getMasterData<WarBoardOnboardSkillMaster>
	|-DataManager.getMasterData<WarBoardQuestMaster>
	|-DataManager.getMasterData<WarBoardRatingBaseMaster>
	|-DataManager.getMasterData<WarBoardRatingOffsetMaster>
	|-DataManager.getMasterData<WarBoardRoadMaster>
	|-DataManager.getMasterData<WarBoardSquareMaster>
	|-DataManager.getMasterData<WarBoardStageLayoutMaster>
	|-DataManager.getMasterData<WarBoardStageMaster>
	|-DataManager.getMasterData<WarBoardStageNpcMaster>
	|-DataManager.getMasterData<WarBoardStagePieceDetailMaster>
	|-DataManager.getMasterData<WarBoardTacticalTrendMaster>
	|-DataManager.getMasterData<WarBoardTreasureMaster>
	|-DataManager.getMasterData<WarGroupMaster>
	|-DataManager.getMasterData<WarMaster>
	*/

	// RVA: 0x11DA3B4 Offset: 0x11DA3B4 VA: 0x11DA3B4
	public List<DataEntityBase> getEntityList(DataNameKind.Kind kind) { }

	// RVA: 0x11DA3E8 Offset: 0x11DA3E8 VA: 0x11DA3E8
	public DataEntityBase[] getEntitys(DataNameKind.Kind kind) { }

	// RVA: -1 Offset: -1
	public T[] getEntitys<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F504 Offset: 0x2B1F504 VA: 0x2B1F504
	|-DataManager.getEntitys<EventCampaignEntity>
	|-DataManager.getEntitys<EventEntity>
	|-DataManager.getEntitys<EventRewardExtraEntity>
	|-DataManager.getEntitys<GiftEntity>
	|-DataManager.getEntitys<MstMissionEntity>
	|-DataManager.getEntitys<QuestReleaseEntity>
	|-DataManager.getEntitys<ServantTreasureDvcEntity>
	|-DataManager.getEntitys<object>
	|-DataManager.getEntitys<WarEntity>
	*/

	// RVA: -1 Offset: -1
	public T getSingleEntity<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1E0FC Offset: 0x1C1E0FC VA: 0x1C1E0FC
	|-DataManager.getSingleEntity<BattleEntity>
	|-DataManager.getSingleEntity<object>
	|-DataManager.getSingleEntity<UserContinueEntity>
	|-DataManager.getSingleEntity<UserGameEntity>
	*/

	// RVA: -1 Offset: -1
	public T getUserIdEntity<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1E15C Offset: 0x1C1E15C VA: 0x1C1E15C
	|-DataManager.getUserIdEntity<object>
	*/

	// RVA: 0x11DA474 Offset: 0x11DA474 VA: 0x11DA474
	private static DataMasterBase[] CreateMasterData() { }

	// RVA: 0x11E38EC Offset: 0x11E38EC VA: 0x11E38EC
	private static void .cctor() { }
}

// Namespace: 
public enum DataManager.ReadMasterVersionResult // TypeDefIndex: 6593
{
	// Fields
	public int value__; // 0x0
	public const DataManager.ReadMasterVersionResult BUSY = 0;
	public const DataManager.ReadMasterVersionResult OK = 1;
	public const DataManager.ReadMasterVersionResult CRYPT_ERROR = 2;
	public const DataManager.ReadMasterVersionResult JSON_ERROR = 3;
	public const DataManager.ReadMasterVersionResult READ_ERROR = 4;
	public const DataManager.ReadMasterVersionResult EMPTY_MASTER_ERROR = 5;
}

// Namespace: 
public enum DataManager.ReadMasterDataResult // TypeDefIndex: 6594
{
	// Fields
	public int value__; // 0x0
	public const DataManager.ReadMasterDataResult BUSY = 0;
	public const DataManager.ReadMasterDataResult OK = 1;
	public const DataManager.ReadMasterDataResult CRYPT_ERROR = 2;
	public const DataManager.ReadMasterDataResult JSON_ERROR = 3;
	public const DataManager.ReadMasterDataResult READ_ERROR = 4;
	public const DataManager.ReadMasterDataResult EMPTY_MASTER_ERROR = 5;
}

// Namespace: 
public enum DataManager.UpdateMasterDataResult // TypeDefIndex: 6595
{
	// Fields
	public int value__; // 0x0
	public const DataManager.UpdateMasterDataResult BUSY = 0;
	public const DataManager.UpdateMasterDataResult OK = 1;
	public const DataManager.UpdateMasterDataResult CRYPT_ERROR = 2;
	public const DataManager.UpdateMasterDataResult JSON_ERROR = 3;
	public const DataManager.UpdateMasterDataResult WRITE_ERROR = 4;
	public const DataManager.UpdateMasterDataResult EMPTY_MASTER_ERROR = 5;
	public const DataManager.UpdateMasterDataResult EMPTY_MASTER_DATA_ERROR = 6;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42AF4 Offset: 0xC42AF4 VA: 0xC42AF4
private sealed class DataManager.<updateWebViewData>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6596
{
	// Fields
	internal Dictionary<string, object> <data>__1; // 0x10
	internal string <cryptString>__1; // 0x18
	internal object <dataObject>__1; // 0x20
	internal DataManager $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9000 Offset: 0xCD9000 VA: 0xCD9000
	// RVA: 0x11D5C38 Offset: 0x11D5C38 VA: 0x11D5C38
	public void .ctor() { }

	// RVA: 0x11E66BC Offset: 0x11E66BC VA: 0x11E66BC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9010 Offset: 0xCD9010 VA: 0xCD9010
	// RVA: 0x11E6D5C Offset: 0x11E6D5C VA: 0x11E6D5C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9020 Offset: 0xCD9020 VA: 0xCD9020
	// RVA: 0x11E6D64 Offset: 0x11E6D64 VA: 0x11E6D64 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9030 Offset: 0xCD9030 VA: 0xCD9030
	// RVA: 0x11E6D6C Offset: 0x11E6D6C VA: 0x11E6D6C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9040 Offset: 0xCD9040 VA: 0xCD9040
	// RVA: 0x11E6D80 Offset: 0x11E6D80 VA: 0x11E6D80 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B04 Offset: 0xC42B04 VA: 0xC42B04
private sealed class DataManager.<readMasterVersion>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6597
{
	// Fields
	internal DataManager $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9050 Offset: 0xCD9050 VA: 0xCD9050
	// RVA: 0x11D6018 Offset: 0x11D6018 VA: 0x11D6018
	public void .ctor() { }

	// RVA: 0x11E4854 Offset: 0x11E4854 VA: 0x11E4854 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9060 Offset: 0xCD9060 VA: 0xCD9060
	// RVA: 0x11E49F0 Offset: 0x11E49F0 VA: 0x11E49F0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9070 Offset: 0xCD9070 VA: 0xCD9070
	// RVA: 0x11E49F8 Offset: 0x11E49F8 VA: 0x11E49F8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9080 Offset: 0xCD9080 VA: 0xCD9080
	// RVA: 0x11E4A00 Offset: 0x11E4A00 VA: 0x11E4A00 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9090 Offset: 0xCD9090 VA: 0xCD9090
	// RVA: 0x11E4A14 Offset: 0x11E4A14 VA: 0x11E4A14 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B14 Offset: 0xC42B14 VA: 0xC42B14
private sealed class DataManager.<readMasterData>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6598
{
	// Fields
	internal string <mainDataFileName>__1; // 0x10
	internal DataManager $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD90A0 Offset: 0xCD90A0 VA: 0xCD90A0
	// RVA: 0x11D6090 Offset: 0x11D6090 VA: 0x11D6090
	public void .ctor() { }

	// RVA: 0x11E3C3C Offset: 0x11E3C3C VA: 0x11E3C3C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD90B0 Offset: 0xCD90B0 VA: 0xCD90B0
	// RVA: 0x11E47C8 Offset: 0x11E47C8 VA: 0x11E47C8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD90C0 Offset: 0xCD90C0 VA: 0xCD90C0
	// RVA: 0x11E47D0 Offset: 0x11E47D0 VA: 0x11E47D0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD90D0 Offset: 0xCD90D0 VA: 0xCD90D0
	// RVA: 0x11E47D8 Offset: 0x11E47D8 VA: 0x11E47D8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD90E0 Offset: 0xCD90E0 VA: 0xCD90E0
	// RVA: 0x11E47EC Offset: 0x11E47EC VA: 0x11E47EC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B24 Offset: 0xC42B24 VA: 0xC42B24
private sealed class DataManager.<updateMasterData>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6599
{
	// Fields
	internal int <dataListCount>__0; // 0x10
	internal int <saveDataCount>__0; // 0x14
	internal bool <isAdd>__0; // 0x18
	internal Dictionary<string, long[]> <dataMapDict>__1; // 0x20
	internal object <dataMapObject>__1; // 0x28
	internal byte[] <cryptBytes>__1; // 0x30
	internal int <i>__2; // 0x38
	internal long[] <dataMap>__4; // 0x40
	internal List<int> <loadedIndices>__0; // 0x48
	internal bool isUseTips; // 0x50
	internal DataNameKind.Kind[] <profileDispMasterList>__5; // 0x58
	internal DataNameKind.Kind[] $locvar0; // 0x60
	internal int $locvar1; // 0x68
	internal ServantProfileMaster <servantProfileMaster>__5; // 0x70
	internal object $locvar2; // 0x78
	internal int <i>__6; // 0x80
	internal DataManager $this; // 0x88
	internal object $current; // 0x90
	internal bool $disposing; // 0x98
	internal int $PC; // 0x9C
	private DataManager.<updateMasterData>c__Iterator3.<updateMasterData>c__AnonStorey4 $locvar3; // 0xA0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD90F0 Offset: 0xCD90F0 VA: 0xCD90F0
	// RVA: 0x11D619C Offset: 0x11D619C VA: 0x11D619C
	public void .ctor() { }

	// RVA: 0x11E4A7C Offset: 0x11E4A7C VA: 0x11E4A7C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9100 Offset: 0xCD9100 VA: 0xCD9100
	// RVA: 0x11E650C Offset: 0x11E650C VA: 0x11E650C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9110 Offset: 0xCD9110 VA: 0xCD9110
	// RVA: 0x11E6514 Offset: 0x11E6514 VA: 0x11E6514 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9120 Offset: 0xCD9120 VA: 0xCD9120
	// RVA: 0x11E651C Offset: 0x11E651C VA: 0x11E651C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9130 Offset: 0xCD9130 VA: 0xCD9130
	// RVA: 0x11E6530 Offset: 0x11E6530 VA: 0x11E6530 Slot: 6
	public void Reset() { }

	// RVA: 0x11E6598 Offset: 0x11E6598 VA: 0x11E6598
	internal bool <>m__0() { }
}

// Namespace: 
private sealed class DataManager.<updateMasterData>c__Iterator3.<updateMasterData>c__AnonStorey4 // TypeDefIndex: 6600
{
	// Fields
	internal string masterName; // 0x10
	internal DataManager.<updateMasterData>c__Iterator3 <>f__ref$3; // 0x18

	// Methods

	// RVA: 0x11E64FC Offset: 0x11E64FC VA: 0x11E64FC
	public void .ctor() { }

	// RVA: 0x11E65C4 Offset: 0x11E65C4 VA: 0x11E65C4
	internal bool <>m__0(string x) { }
}

// Namespace: 
private sealed class DataManager.<updateMasterData>c__Iterator3.<updateMasterData>c__AnonStorey5 // TypeDefIndex: 6601
{
	// Fields
	internal string masterName; // 0x10
	internal DataManager.<updateMasterData>c__Iterator3 <>f__ref$3; // 0x18

	// Methods

	// RVA: 0x11E6504 Offset: 0x11E6504 VA: 0x11E6504
	public void .ctor() { }

	// RVA: 0x11E6640 Offset: 0x11E6640 VA: 0x11E6640
	internal bool <>m__0(string x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B34 Offset: 0xC42B34 VA: 0xC42B34
private sealed class DataManager.<StartMasterLoadThread>c__AnonStorey7 // TypeDefIndex: 6602
{
	// Fields
	internal List<int> loadedIndices; // 0x10
	internal DataManager $this; // 0x18

	// Methods

	// RVA: 0x11D645C Offset: 0x11D645C VA: 0x11D645C
	public void .ctor() { }

	// RVA: 0x11E3B20 Offset: 0x11E3B20 VA: 0x11E3B20
	internal int <>m__0(int a, int b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B44 Offset: 0xC42B44 VA: 0xC42B44
private sealed class DataManager.<StartMasterLoadThread>c__AnonStorey6 // TypeDefIndex: 6603
{
	// Fields
	internal int i; // 0x10
	internal DataManager.<StartMasterLoadThread>c__AnonStorey7 <>f__ref$7; // 0x18

	// Methods

	// RVA: 0x11D6464 Offset: 0x11D6464 VA: 0x11D6464
	public void .ctor() { }

	// RVA: 0x11E3A60 Offset: 0x11E3A60 VA: 0x11E3A60
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B54 Offset: 0xC42B54 VA: 0xC42B54
private sealed class DataManager.<LoadMasterDataThread>c__AnonStorey8 // TypeDefIndex: 6604
{
	// Fields
	internal string masterName; // 0x10

	// Methods

	// RVA: 0x11D68E8 Offset: 0x11D68E8 VA: 0x11D68E8
	public void .ctor() { }

	// RVA: 0x11E3968 Offset: 0x11E3968 VA: 0x11E3968
	internal bool <>m__0(DataMasterBase x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42B64 Offset: 0xC42B64 VA: 0xC42B64
private sealed class DataManager.<LoadMasterDataThread>c__AnonStorey9 // TypeDefIndex: 6605
{
	// Fields
	internal Exception ex; // 0x10

	// Methods

	// RVA: 0x11D69E4 Offset: 0x11D69E4 VA: 0x11D69E4
	public void .ctor() { }

	// RVA: 0x11E39F4 Offset: 0x11E39F4 VA: 0x11E39F4
	internal void <>m__0(object _) { }
}

// Namespace: 
public class DataVals // TypeDefIndex: 6606
{
	// Fields
	public Dictionary<string, int> vals; // 0x10
	public FuncList.TYPE funcType; // 0x18
	public Target.TYPE targetType; // 0x1C
	public int funcIndex; // 0x20
	public FunctionEntity funcEnt; // 0x28
	public string svals; // 0x30
	private Dictionary<string, string> strVals; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC55440 Offset: 0xC55440 VA: 0xC55440
	[DebuggerBrowsableAttribute] // RVA: 0xC55440 Offset: 0xC55440 VA: 0xC55440
	private bool <isOverCharge>k__BackingField; // 0x40
	public int overChargeState; // 0x44
	public bool flgBoost; // 0x48
	public bool isShowForcedEffect; // 0x49
	private List<DataVals> dependDataValsList; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC5547C Offset: 0xC5547C VA: 0xC5547C
	[DebuggerBrowsableAttribute] // RVA: 0xC5547C Offset: 0xC5547C VA: 0xC5547C
	private bool[] <dependOverChargeArray>k__BackingField; // 0x58
	public bool defCheckDead; // 0x60
	private static readonly int MAX_DEPEND_FUNC; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC554B8 Offset: 0xC554B8 VA: 0xC554B8
	private static Func<DataVals, bool> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC554C8 Offset: 0xC554C8 VA: 0xC554C8
	private static Func<DataVals, int> <>f__am$cache1; // 0x10

	// Properties
	public bool isOverCharge { get; set; }
	public List<DataVals> DependDataValsList { get; }
	public bool[] dependOverChargeArray { get; set; }

	// Methods

	// RVA: 0x11ED328 Offset: 0x11ED328 VA: 0x11ED328
	public void .ctor(string str) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F38 Offset: 0xCC9F38 VA: 0xCC9F38
	// RVA: 0x11ED3B4 Offset: 0x11ED3B4 VA: 0x11ED3B4
	public bool get_isOverCharge() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F48 Offset: 0xCC9F48 VA: 0xCC9F48
	// RVA: 0x11ED3BC Offset: 0x11ED3BC VA: 0x11ED3BC
	protected void set_isOverCharge(bool value) { }

	// RVA: 0x11ED3C8 Offset: 0x11ED3C8 VA: 0x11ED3C8
	public List<DataVals> get_DependDataValsList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F58 Offset: 0xCC9F58 VA: 0xCC9F58
	// RVA: 0x11ED3D0 Offset: 0x11ED3D0 VA: 0x11ED3D0
	public bool[] get_dependOverChargeArray() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9F68 Offset: 0xCC9F68 VA: 0xCC9F68
	// RVA: 0x11ED3D8 Offset: 0x11ED3D8 VA: 0x11ED3D8
	protected void set_dependOverChargeArray(bool[] value) { }

	// RVA: 0x11ED3E0 Offset: 0x11ED3E0 VA: 0x11ED3E0
	public void SetTempType(FunctionMaster funcMst, FuncList.TYPE ft) { }

	// RVA: 0x11ED724 Offset: 0x11ED724 VA: 0x11ED724
	protected void SetType(FuncList.TYPE ft) { }

	// RVA: 0x11EE318 Offset: 0x11EE318 VA: 0x11EE318
	public void SetType(FunctionEntity funcEnt, int funcIndex) { }

	// RVA: 0x11ED428 Offset: 0x11ED428 VA: 0x11ED428
	public void SetDependDataVals(FunctionMaster funcMst, ref int funcIndex) { }

	// RVA: 0x11EE70C Offset: 0x11EE70C VA: 0x11EE70C
	public DataVals[] GetDependDataValsArray(List<FuncList.TYPE> funcTypeList, bool isCheckNotFound = True) { }

	// RVA: 0x11EE464 Offset: 0x11EE464 VA: 0x11EE464
	public string cutValue(string key, char startWord = '\x5b', char endWord = '\x5d', bool isDelKeyValue = True) { }

	// RVA: 0x11EE814 Offset: 0x11EE814 VA: 0x11EE814
	public int[] GetDependFuncIdArray() { }

	// RVA: 0x11EE9F4 Offset: 0x11EE9F4 VA: 0x11EE9F4
	public void loadActSet() { }

	// RVA: 0x11EE388 Offset: 0x11EE388 VA: 0x11EE388
	public string ConcatenateTypeValue(DataVals.TYPE type, int value) { }

	// RVA: 0x11EEDF4 Offset: 0x11EEDF4 VA: 0x11EEDF4
	public int GetParam(DataVals.TYPE type) { }

	// RVA: 0x11EEEEC Offset: 0x11EEEEC VA: 0x11EEEEC
	public int GetTriggeredFuncIndex() { }

	// RVA: 0x11EEF08 Offset: 0x11EEF08 VA: 0x11EEF08
	public string GetStrParam(DataVals.TYPE type) { }

	// RVA: 0x11EF01C Offset: 0x11EF01C VA: 0x11EF01C
	public bool isParam(DataVals.TYPE type) { }

	// RVA: 0x11EF0E4 Offset: 0x11EF0E4 VA: 0x11EF0E4
	public int GetValue() { }

	// RVA: 0x11EF0EC Offset: 0x11EF0EC VA: 0x11EF0EC
	public int GetValue2() { }

	// RVA: 0x11EF0F4 Offset: 0x11EF0F4 VA: 0x11EF0F4
	public int GetDisplayLastFuncInvalidType() { }

	// RVA: 0x11EF0FC Offset: 0x11EF0FC VA: 0x11EF0FC
	public bool isLossHpChangeDamage() { }

	// RVA: 0x11EF11C Offset: 0x11EF11C VA: 0x11EF11C
	public int GetMotionChange() { }

	// RVA: 0x11EF124 Offset: 0x11EF124 VA: 0x11EF124
	public bool checkActSet() { }

	// RVA: 0x11EF144 Offset: 0x11EF144 VA: 0x11EF144
	public int getActSet() { }

	// RVA: 0x11EF14C Offset: 0x11EF14C VA: 0x11EF14C
	public int getActSetWeight() { }

	// RVA: 0x11EF154 Offset: 0x11EF154 VA: 0x11EF154
	public int[] GetTargetList() { }

	// RVA: 0x11EF250 Offset: 0x11EF250 VA: 0x11EF250
	public int[] GetTargetIndiv() { }

	// RVA: 0x11EF348 Offset: 0x11EF348 VA: 0x11EF348
	public int[] GetAddIndividualty() { }

	// RVA: 0x11EF444 Offset: 0x11EF444 VA: 0x11EF444
	public int[] GetLinkageTargetIndividualty() { }

	// RVA: 0x11EF540 Offset: 0x11EF540 VA: 0x11EF540
	public int[] GetSameBuffLimitTargetIndividuality() { }

	// RVA: 0x11EF63C Offset: 0x11EF63C VA: 0x11EF63C
	public int[] GetTargetRarityList() { }

	// RVA: 0x11EF738 Offset: 0x11EF738 VA: 0x11EF738
	public int[] GetAndCheckIndividuality() { }

	// RVA: 0x11EF834 Offset: 0x11EF834 VA: 0x11EF834
	public bool isSameBuffLimit() { }

	// RVA: 0x11EF854 Offset: 0x11EF854 VA: 0x11EF854
	public bool isCheckDuplicate() { }

	// RVA: 0x11EF874 Offset: 0x11EF874 VA: 0x11EF874
	public bool isHideMiss() { }

	// RVA: 0x11EF894 Offset: 0x11EF894 VA: 0x11EF894
	public bool isHideNoEffect() { }

	// RVA: 0x11EF8B4 Offset: 0x11EF8B4 VA: 0x11EF8B4
	public bool isUnaffected() { }

	// RVA: 0x11EF8D4 Offset: 0x11EF8D4 VA: 0x11EF8D4
	public bool isShowState() { }

	// RVA: 0x11EF8F4 Offset: 0x11EF8F4 VA: 0x11EF8F4
	public bool isShowQuestNoEffect() { }

	// RVA: 0x11EF914 Offset: 0x11EF914 VA: 0x11EF914
	public bool isCheckDead() { }

	// RVA: 0x11EF95C Offset: 0x11EF95C VA: 0x11EF95C
	public bool isShowCommand() { }

	// RVA: 0x11EF97C Offset: 0x11EF97C VA: 0x11EF97C
	public bool isEffectSummon() { }

	// RVA: 0x11EF99C Offset: 0x11EF99C VA: 0x11EF99C
	public bool isRatioHpRange() { }

	// RVA: 0x11EF9E0 Offset: 0x11EF9E0 VA: 0x11EF9E0
	public bool IsOpponentOnly() { }

	// RVA: 0x11EFA00 Offset: 0x11EFA00 VA: 0x11EFA00
	public bool IsEndBattle() { }

	// RVA: 0x11EFA20 Offset: 0x11EFA20 VA: 0x11EFA20
	public bool IsLoseBattle() { }

	// RVA: 0x11EFA40 Offset: 0x11EFA40 VA: 0x11EFA40
	public bool IsWinBattleNotRelatedSurvivalStatus() { }

	// RVA: 0x11EFA60 Offset: 0x11EFA60 VA: 0x11EFA60
	public bool IsAddIndividualty() { }

	// RVA: 0x11EFB00 Offset: 0x11EFB00 VA: 0x11EFB00
	public bool IsAddLinkageTargetIndividualty() { }

	// RVA: 0x11EFBA0 Offset: 0x11EFBA0 VA: 0x11EFBA0
	public bool IsChangeTDCommandType() { }

	// RVA: 0x11EE700 Offset: 0x11EE700 VA: 0x11EE700
	public void SetOverCharge(bool flg) { }

	// RVA: 0x11EFBC0 Offset: 0x11EFBC0 VA: 0x11EFBC0
	public void SetDependOverChargeFlag(List<DataVals> dependDataList) { }

	// RVA: 0x11EE69C Offset: 0x11EE69C VA: 0x11EE69C
	public bool IsDependOverCharge(int index) { }

	// RVA: 0x11EFD50 Offset: 0x11EFD50 VA: 0x11EFD50
	public bool CheckOverCharge(DataVals baseVals) { }

	// RVA: 0x11EFF1C Offset: 0x11EFF1C VA: 0x11EFF1C
	public void OnOverChargeState(DataVals compVals, DataVals.TYPE type, DataVals.OverChargeState state) { }

	// RVA: 0x11EFF8C Offset: 0x11EFF8C VA: 0x11EFF8C
	public bool IsOverChargeState(DataVals.OverChargeState state) { }

	// RVA: 0x11EFF9C Offset: 0x11EFF9C VA: 0x11EFF9C
	public int GetFunctionTriggerStarNum() { }

	// RVA: 0x11F0084 Offset: 0x11F0084 VA: 0x11F0084
	public bool CheckFunctionTriggerStar(int totalStar) { }

	// RVA: 0x11F00B8 Offset: 0x11F00B8 VA: 0x11F00B8
	public int GetCardIndex() { }

	// RVA: 0x11F00F8 Offset: 0x11F00F8 VA: 0x11F00F8
	public int GetCardIndividuality() { }

	// RVA: 0x11F0138 Offset: 0x11F0138 VA: 0x11F0138
	public int[] GetParamArray(DataVals.TYPE paramType) { }

	// RVA: 0x11F0244 Offset: 0x11F0244 VA: 0x11F0244
