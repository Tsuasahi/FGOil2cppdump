	|-DataManager.getMasterData<WarAddMaster>
	|-DataManager.getMasterData<WarBoardAIMaster>
	|-DataManager.getMasterData<WarBoardActionPointMaster>
	|-DataManager.getMasterData<WarBoardActionTrendConditionMaster>
	|-DataManager.getMasterData<WarBoardActionTrendMaster>
	|-DataManager.getMasterData<WarBoardEffectMaster>
	|-DataManager.getMasterData<WarBoardIndividualityClassMaster>
	|-DataManager.getMasterData<WarBoardItemMaster>
	|-DataManager.getMasterData<WarBoardMaster>
	|-DataManager.getMasterData<WarBoardOnboardSkillMaster>
	|-DataManager.getMasterData<WarBoardQuestMaster>
	|-DataManager.getMasterData<WarBoardRatingBaseMaster>
	|-DataManager.getMasterData<WarBoardRatingOffsetMaster>
	|-DataManager.getMasterData<WarBoardRoadMaster>
	|-DataManager.getMasterData<WarBoardSquareMaster>
	|-DataManager.getMasterData<WarBoardStageLayoutMaster>
	|-DataManager.getMasterData<WarBoardStageMaster>
	|-DataManager.getMasterData<WarBoardStageNpcMaster>
	|-DataManager.getMasterData<WarBoardStagePieceDetailMaster>
	|-DataManager.getMasterData<WarBoardTacticalTrendMaster>
	|-DataManager.getMasterData<WarBoardTreasureMaster>
	|-DataManager.getMasterData<WarGroupMaster>
	|-DataManager.getMasterData<WarMaster>
	*/

	// RVA: 0x1772290 Offset: 0x1772290 VA: 0x1772290
	public List<DataEntityBase> getEntityList(DataNameKind.Kind kind) { }

	// RVA: 0x17722C4 Offset: 0x17722C4 VA: 0x17722C4
	public DataEntityBase[] getEntitys(DataNameKind.Kind kind) { }

	// RVA: -1 Offset: -1
	public T[] getEntitys<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B80A7C Offset: 0x2B80A7C VA: 0x2B80A7C
	|-DataManager.getEntitys<EventCampaignEntity>
	|-DataManager.getEntitys<EventEntity>
	|-DataManager.getEntitys<EventRewardExtraEntity>
	|-DataManager.getEntitys<GiftEntity>
	|-DataManager.getEntitys<MstMissionEntity>
	|-DataManager.getEntitys<QuestReleaseEntity>
	|-DataManager.getEntitys<ServantTreasureDvcEntity>
	|-DataManager.getEntitys<object>
	|-DataManager.getEntitys<WarEntity>
	*/

	// RVA: -1 Offset: -1
	public T getSingleEntity<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218CD5C Offset: 0x218CD5C VA: 0x218CD5C
	|-DataManager.getSingleEntity<BattleEntity>
	|-DataManager.getSingleEntity<object>
	|-DataManager.getSingleEntity<UserContinueEntity>
	|-DataManager.getSingleEntity<UserGameEntity>
	*/

	// RVA: -1 Offset: -1
	public T getUserIdEntity<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218CDBC Offset: 0x218CDBC VA: 0x218CDBC
	|-DataManager.getUserIdEntity<object>
	*/

	// RVA: 0x1772350 Offset: 0x1772350 VA: 0x1772350
	private static DataMasterBase[] CreateMasterData() { }

	// RVA: 0x177B5D4 Offset: 0x177B5D4 VA: 0x177B5D4
	private static void .cctor() { }
}

// Namespace: 
public enum DataManager.ReadMasterVersionResult // TypeDefIndex: 6589
{
	// Fields
	public int value__; // 0x0
	public const DataManager.ReadMasterVersionResult BUSY = 0;
	public const DataManager.ReadMasterVersionResult OK = 1;
	public const DataManager.ReadMasterVersionResult CRYPT_ERROR = 2;
	public const DataManager.ReadMasterVersionResult JSON_ERROR = 3;
	public const DataManager.ReadMasterVersionResult READ_ERROR = 4;
	public const DataManager.ReadMasterVersionResult EMPTY_MASTER_ERROR = 5;
}

// Namespace: 
public enum DataManager.ReadMasterDataResult // TypeDefIndex: 6590
{
	// Fields
	public int value__; // 0x0
	public const DataManager.ReadMasterDataResult BUSY = 0;
	public const DataManager.ReadMasterDataResult OK = 1;
	public const DataManager.ReadMasterDataResult CRYPT_ERROR = 2;
	public const DataManager.ReadMasterDataResult JSON_ERROR = 3;
	public const DataManager.ReadMasterDataResult READ_ERROR = 4;
	public const DataManager.ReadMasterDataResult EMPTY_MASTER_ERROR = 5;
}

// Namespace: 
public enum DataManager.UpdateMasterDataResult // TypeDefIndex: 6591
{
	// Fields
	public int value__; // 0x0
	public const DataManager.UpdateMasterDataResult BUSY = 0;
	public const DataManager.UpdateMasterDataResult OK = 1;
	public const DataManager.UpdateMasterDataResult CRYPT_ERROR = 2;
	public const DataManager.UpdateMasterDataResult JSON_ERROR = 3;
	public const DataManager.UpdateMasterDataResult WRITE_ERROR = 4;
	public const DataManager.UpdateMasterDataResult EMPTY_MASTER_ERROR = 5;
	public const DataManager.UpdateMasterDataResult EMPTY_MASTER_DATA_ERROR = 6;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEBE0 Offset: 0xCAEBE0 VA: 0xCAEBE0
private sealed class DataManager.<updateWebViewData>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6592
{
	// Fields
	internal Dictionary<string, object> <data>__1; // 0x10
	internal string <cryptString>__1; // 0x18
	internal object <dataObject>__1; // 0x20
	internal DataManager $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46314 Offset: 0xD46314 VA: 0xD46314
	// RVA: 0x176DB14 Offset: 0x176DB14 VA: 0x176DB14
	public void .ctor() { }

	// RVA: 0x177E3A4 Offset: 0x177E3A4 VA: 0x177E3A4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46324 Offset: 0xD46324 VA: 0xD46324
	// RVA: 0x177EA44 Offset: 0x177EA44 VA: 0x177EA44 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46334 Offset: 0xD46334 VA: 0xD46334
	// RVA: 0x177EA4C Offset: 0x177EA4C VA: 0x177EA4C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46344 Offset: 0xD46344 VA: 0xD46344
	// RVA: 0x177EA54 Offset: 0x177EA54 VA: 0x177EA54 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46354 Offset: 0xD46354 VA: 0xD46354
	// RVA: 0x177EA68 Offset: 0x177EA68 VA: 0x177EA68 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEBF0 Offset: 0xCAEBF0 VA: 0xCAEBF0
private sealed class DataManager.<readMasterVersion>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6593
{
	// Fields
	internal DataManager $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46364 Offset: 0xD46364 VA: 0xD46364
	// RVA: 0x176DEF4 Offset: 0x176DEF4 VA: 0x176DEF4
	public void .ctor() { }

	// RVA: 0x177C53C Offset: 0x177C53C VA: 0x177C53C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46374 Offset: 0xD46374 VA: 0xD46374
	// RVA: 0x177C6D8 Offset: 0x177C6D8 VA: 0x177C6D8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46384 Offset: 0xD46384 VA: 0xD46384
	// RVA: 0x177C6E0 Offset: 0x177C6E0 VA: 0x177C6E0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46394 Offset: 0xD46394 VA: 0xD46394
	// RVA: 0x177C6E8 Offset: 0x177C6E8 VA: 0x177C6E8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD463A4 Offset: 0xD463A4 VA: 0xD463A4
	// RVA: 0x177C6FC Offset: 0x177C6FC VA: 0x177C6FC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC00 Offset: 0xCAEC00 VA: 0xCAEC00
private sealed class DataManager.<readMasterData>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6594
{
	// Fields
	internal string <mainDataFileName>__1; // 0x10
	internal DataManager $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD463B4 Offset: 0xD463B4 VA: 0xD463B4
	// RVA: 0x176DF6C Offset: 0x176DF6C VA: 0x176DF6C
	public void .ctor() { }

	// RVA: 0x177B924 Offset: 0x177B924 VA: 0x177B924 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD463C4 Offset: 0xD463C4 VA: 0xD463C4
	// RVA: 0x177C4B0 Offset: 0x177C4B0 VA: 0x177C4B0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD463D4 Offset: 0xD463D4 VA: 0xD463D4
	// RVA: 0x177C4B8 Offset: 0x177C4B8 VA: 0x177C4B8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD463E4 Offset: 0xD463E4 VA: 0xD463E4
	// RVA: 0x177C4C0 Offset: 0x177C4C0 VA: 0x177C4C0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD463F4 Offset: 0xD463F4 VA: 0xD463F4
	// RVA: 0x177C4D4 Offset: 0x177C4D4 VA: 0x177C4D4 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC10 Offset: 0xCAEC10 VA: 0xCAEC10
private sealed class DataManager.<updateMasterData>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6595
{
	// Fields
	internal int <dataListCount>__0; // 0x10
	internal int <saveDataCount>__0; // 0x14
	internal bool <isAdd>__0; // 0x18
	internal Dictionary<string, long[]> <dataMapDict>__1; // 0x20
	internal object <dataMapObject>__1; // 0x28
	internal byte[] <cryptBytes>__1; // 0x30
	internal int <i>__2; // 0x38
	internal long[] <dataMap>__4; // 0x40
	internal List<int> <loadedIndices>__0; // 0x48
	internal bool isUseTips; // 0x50
	internal DataNameKind.Kind[] <profileDispMasterList>__5; // 0x58
	internal DataNameKind.Kind[] $locvar0; // 0x60
	internal int $locvar1; // 0x68
	internal ServantProfileMaster <servantProfileMaster>__5; // 0x70
	internal object $locvar2; // 0x78
	internal int <i>__6; // 0x80
	internal DataManager $this; // 0x88
	internal object $current; // 0x90
	internal bool $disposing; // 0x98
	internal int $PC; // 0x9C
	private DataManager.<updateMasterData>c__Iterator3.<updateMasterData>c__AnonStorey4 $locvar3; // 0xA0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD46404 Offset: 0xD46404 VA: 0xD46404
	// RVA: 0x176E078 Offset: 0x176E078 VA: 0x176E078
	public void .ctor() { }

	// RVA: 0x177C764 Offset: 0x177C764 VA: 0x177C764 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46414 Offset: 0xD46414 VA: 0xD46414
	// RVA: 0x177E1F4 Offset: 0x177E1F4 VA: 0x177E1F4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46424 Offset: 0xD46424 VA: 0xD46424
	// RVA: 0x177E1FC Offset: 0x177E1FC VA: 0x177E1FC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46434 Offset: 0xD46434 VA: 0xD46434
	// RVA: 0x177E204 Offset: 0x177E204 VA: 0x177E204 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD46444 Offset: 0xD46444 VA: 0xD46444
	// RVA: 0x177E218 Offset: 0x177E218 VA: 0x177E218 Slot: 6
	public void Reset() { }

	// RVA: 0x177E280 Offset: 0x177E280 VA: 0x177E280
	internal bool <>m__0() { }
}

// Namespace: 
private sealed class DataManager.<updateMasterData>c__Iterator3.<updateMasterData>c__AnonStorey4 // TypeDefIndex: 6596
{
	// Fields
	internal string masterName; // 0x10
	internal DataManager.<updateMasterData>c__Iterator3 <>f__ref$3; // 0x18

	// Methods

	// RVA: 0x177E1E4 Offset: 0x177E1E4 VA: 0x177E1E4
	public void .ctor() { }

	// RVA: 0x177E2AC Offset: 0x177E2AC VA: 0x177E2AC
	internal bool <>m__0(string x) { }
}

// Namespace: 
private sealed class DataManager.<updateMasterData>c__Iterator3.<updateMasterData>c__AnonStorey5 // TypeDefIndex: 6597
{
	// Fields
	internal string masterName; // 0x10
	internal DataManager.<updateMasterData>c__Iterator3 <>f__ref$3; // 0x18

	// Methods

	// RVA: 0x177E1EC Offset: 0x177E1EC VA: 0x177E1EC
	public void .ctor() { }

	// RVA: 0x177E328 Offset: 0x177E328 VA: 0x177E328
	internal bool <>m__0(string x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC20 Offset: 0xCAEC20 VA: 0xCAEC20
private sealed class DataManager.<StartMasterLoadThread>c__AnonStorey7 // TypeDefIndex: 6598
{
	// Fields
	internal List<int> loadedIndices; // 0x10
	internal DataManager $this; // 0x18

	// Methods

	// RVA: 0x176E338 Offset: 0x176E338 VA: 0x176E338
	public void .ctor() { }

	// RVA: 0x177B808 Offset: 0x177B808 VA: 0x177B808
	internal int <>m__0(int a, int b) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC30 Offset: 0xCAEC30 VA: 0xCAEC30
private sealed class DataManager.<StartMasterLoadThread>c__AnonStorey6 // TypeDefIndex: 6599
{
	// Fields
	internal int i; // 0x10
	internal DataManager.<StartMasterLoadThread>c__AnonStorey7 <>f__ref$7; // 0x18

	// Methods

	// RVA: 0x176E340 Offset: 0x176E340 VA: 0x176E340
	public void .ctor() { }

	// RVA: 0x177B748 Offset: 0x177B748 VA: 0x177B748
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC40 Offset: 0xCAEC40 VA: 0xCAEC40
private sealed class DataManager.<LoadMasterDataThread>c__AnonStorey8 // TypeDefIndex: 6600
{
	// Fields
	internal string masterName; // 0x10

	// Methods

	// RVA: 0x176E7C4 Offset: 0x176E7C4 VA: 0x176E7C4
	public void .ctor() { }

	// RVA: 0x177B650 Offset: 0x177B650 VA: 0x177B650
	internal bool <>m__0(DataMasterBase x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC50 Offset: 0xCAEC50 VA: 0xCAEC50
private sealed class DataManager.<LoadMasterDataThread>c__AnonStorey9 // TypeDefIndex: 6601
{
	// Fields
	internal Exception ex; // 0x10

	// Methods

	// RVA: 0x176E8C0 Offset: 0x176E8C0 VA: 0x176E8C0
	public void .ctor() { }

	// RVA: 0x177B6DC Offset: 0x177B6DC VA: 0x177B6DC
	internal void <>m__0(object _) { }
}

// Namespace: 
public class DataVals // TypeDefIndex: 6602
{
	// Fields
	public Dictionary<string, int> vals; // 0x10
	public FuncList.TYPE funcType; // 0x18
	public Target.TYPE targetType; // 0x1C
	public int funcIndex; // 0x20
	public FunctionEntity funcEnt; // 0x28
	public string svals; // 0x30
	private Dictionary<string, string> strVals; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCC1328 Offset: 0xCC1328 VA: 0xCC1328
	[DebuggerBrowsableAttribute] // RVA: 0xCC1328 Offset: 0xCC1328 VA: 0xCC1328
	private bool <isOverCharge>k__BackingField; // 0x40
	public int overChargeState; // 0x44
	public bool flgBoost; // 0x48
	public bool isShowForcedEffect; // 0x49
	private List<DataVals> dependDataValsList; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCC1364 Offset: 0xCC1364 VA: 0xCC1364
	[DebuggerBrowsableAttribute] // RVA: 0xCC1364 Offset: 0xCC1364 VA: 0xCC1364
	private bool[] <dependOverChargeArray>k__BackingField; // 0x58
	public bool defCheckDead; // 0x60
	private static readonly int MAX_DEPEND_FUNC; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCC13A0 Offset: 0xCC13A0 VA: 0xCC13A0
	private static Func<DataVals, bool> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCC13B0 Offset: 0xCC13B0 VA: 0xCC13B0
	private static Func<DataVals, int> <>f__am$cache1; // 0x10

	// Properties
	public bool isOverCharge { get; set; }
	public List<DataVals> DependDataValsList { get; }
	public bool[] dependOverChargeArray { get; set; }

	// Methods

	// RVA: 0x1784EF4 Offset: 0x1784EF4 VA: 0x1784EF4
	public void .ctor(string str) { }

	[CompilerGeneratedAttribute] // RVA: 0xD375FC Offset: 0xD375FC VA: 0xD375FC
	// RVA: 0x1784F80 Offset: 0x1784F80 VA: 0x1784F80
	public bool get_isOverCharge() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3760C Offset: 0xD3760C VA: 0xD3760C
	// RVA: 0x1784F88 Offset: 0x1784F88 VA: 0x1784F88
	protected void set_isOverCharge(bool value) { }

	// RVA: 0x1784F94 Offset: 0x1784F94 VA: 0x1784F94
	public List<DataVals> get_DependDataValsList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3761C Offset: 0xD3761C VA: 0xD3761C
	// RVA: 0x1784F9C Offset: 0x1784F9C VA: 0x1784F9C
	public bool[] get_dependOverChargeArray() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3762C Offset: 0xD3762C VA: 0xD3762C
	// RVA: 0x1784FA4 Offset: 0x1784FA4 VA: 0x1784FA4
	protected void set_dependOverChargeArray(bool[] value) { }

	// RVA: 0x1784FAC Offset: 0x1784FAC VA: 0x1784FAC
	public void SetTempType(FunctionMaster funcMst, FuncList.TYPE ft) { }

	// RVA: 0x17852F0 Offset: 0x17852F0 VA: 0x17852F0
	protected void SetType(FuncList.TYPE ft) { }

	// RVA: 0x1785EE4 Offset: 0x1785EE4 VA: 0x1785EE4
	public void SetType(FunctionEntity funcEnt, int funcIndex) { }

	// RVA: 0x1784FF4 Offset: 0x1784FF4 VA: 0x1784FF4
	public void SetDependDataVals(FunctionMaster funcMst, ref int funcIndex) { }

	// RVA: 0x17862D8 Offset: 0x17862D8 VA: 0x17862D8
	public DataVals[] GetDependDataValsArray(List<FuncList.TYPE> funcTypeList, bool isCheckNotFound = True) { }

	// RVA: 0x1786030 Offset: 0x1786030 VA: 0x1786030
	public string cutValue(string key, char startWord = '\x5b', char endWord = '\x5d', bool isDelKeyValue = True) { }

	// RVA: 0x17863E0 Offset: 0x17863E0 VA: 0x17863E0
	public int[] GetDependFuncIdArray() { }

	// RVA: 0x17865C0 Offset: 0x17865C0 VA: 0x17865C0
	public void loadActSet() { }

	// RVA: 0x1785F54 Offset: 0x1785F54 VA: 0x1785F54
	public string ConcatenateTypeValue(DataVals.TYPE type, int value) { }

	// RVA: 0x17869C0 Offset: 0x17869C0 VA: 0x17869C0
	public int GetParam(DataVals.TYPE type) { }

	// RVA: 0x1786AB8 Offset: 0x1786AB8 VA: 0x1786AB8
	public int GetTriggeredFuncIndex() { }

	// RVA: 0x1786AD4 Offset: 0x1786AD4 VA: 0x1786AD4
	public string GetStrParam(DataVals.TYPE type) { }

	// RVA: 0x1786BE8 Offset: 0x1786BE8 VA: 0x1786BE8
	public bool isParam(DataVals.TYPE type) { }

	// RVA: 0x1786CB0 Offset: 0x1786CB0 VA: 0x1786CB0
	public int GetValue() { }

	// RVA: 0x1786CB8 Offset: 0x1786CB8 VA: 0x1786CB8
	public int GetValue2() { }

	// RVA: 0x1786CC0 Offset: 0x1786CC0 VA: 0x1786CC0
	public int GetDisplayLastFuncInvalidType() { }

	// RVA: 0x1786CC8 Offset: 0x1786CC8 VA: 0x1786CC8
	public bool isLossHpChangeDamage() { }

	// RVA: 0x1786CE8 Offset: 0x1786CE8 VA: 0x1786CE8
	public int GetMotionChange() { }

	// RVA: 0x1786CF0 Offset: 0x1786CF0 VA: 0x1786CF0
	public bool checkActSet() { }

	// RVA: 0x1786D10 Offset: 0x1786D10 VA: 0x1786D10
	public int getActSet() { }

	// RVA: 0x1786D18 Offset: 0x1786D18 VA: 0x1786D18
	public int getActSetWeight() { }

	// RVA: 0x1786D20 Offset: 0x1786D20 VA: 0x1786D20
	public int[] GetTargetList() { }

	// RVA: 0x1786E1C Offset: 0x1786E1C VA: 0x1786E1C
	public int[] GetTargetIndiv() { }

	// RVA: 0x1786F14 Offset: 0x1786F14 VA: 0x1786F14
	public int[] GetAddIndividualty() { }

	// RVA: 0x1787010 Offset: 0x1787010 VA: 0x1787010
	public int[] GetLinkageTargetIndividualty() { }

	// RVA: 0x178710C Offset: 0x178710C VA: 0x178710C
	public int[] GetSameBuffLimitTargetIndividuality() { }

	// RVA: 0x1787208 Offset: 0x1787208 VA: 0x1787208
	public int[] GetTargetRarityList() { }

	// RVA: 0x1787304 Offset: 0x1787304 VA: 0x1787304
	public int[] GetAndCheckIndividuality() { }

	// RVA: 0x1787400 Offset: 0x1787400 VA: 0x1787400
	public bool isSameBuffLimit() { }

	// RVA: 0x1787420 Offset: 0x1787420 VA: 0x1787420
	public bool isCheckDuplicate() { }

	// RVA: 0x1787440 Offset: 0x1787440 VA: 0x1787440
	public bool isHideMiss() { }

	// RVA: 0x1787460 Offset: 0x1787460 VA: 0x1787460
	public bool isHideNoEffect() { }

	// RVA: 0x1787480 Offset: 0x1787480 VA: 0x1787480
	public bool isUnaffected() { }

	// RVA: 0x17874A0 Offset: 0x17874A0 VA: 0x17874A0
	public bool isShowState() { }

	// RVA: 0x17874C0 Offset: 0x17874C0 VA: 0x17874C0
	public bool isShowQuestNoEffect() { }

	// RVA: 0x17874E0 Offset: 0x17874E0 VA: 0x17874E0
	public bool isCheckDead() { }

	// RVA: 0x1787528 Offset: 0x1787528 VA: 0x1787528
	public bool isShowCommand() { }

	// RVA: 0x1787548 Offset: 0x1787548 VA: 0x1787548
	public bool isEffectSummon() { }

	// RVA: 0x1787568 Offset: 0x1787568 VA: 0x1787568
	public bool isRatioHpRange() { }

	// RVA: 0x17875AC Offset: 0x17875AC VA: 0x17875AC
	public bool IsOpponentOnly() { }

	// RVA: 0x17875CC Offset: 0x17875CC VA: 0x17875CC
	public bool IsEndBattle() { }

	// RVA: 0x17875EC Offset: 0x17875EC VA: 0x17875EC
	public bool IsLoseBattle() { }

	// RVA: 0x178760C Offset: 0x178760C VA: 0x178760C
	public bool IsWinBattleNotRelatedSurvivalStatus() { }

	// RVA: 0x178762C Offset: 0x178762C VA: 0x178762C
	public bool IsAddIndividualty() { }

	// RVA: 0x17876CC Offset: 0x17876CC VA: 0x17876CC
	public bool IsAddLinkageTargetIndividualty() { }

	// RVA: 0x178776C Offset: 0x178776C VA: 0x178776C
	public bool IsChangeTDCommandType() { }

	// RVA: 0x17862CC Offset: 0x17862CC VA: 0x17862CC
	public void SetOverCharge(bool flg) { }

	// RVA: 0x178778C Offset: 0x178778C VA: 0x178778C
	public void SetDependOverChargeFlag(List<DataVals> dependDataList) { }

	// RVA: 0x1786268 Offset: 0x1786268 VA: 0x1786268
	public bool IsDependOverCharge(int index) { }

	// RVA: 0x178791C Offset: 0x178791C VA: 0x178791C
	public bool CheckOverCharge(DataVals baseVals) { }

	// RVA: 0x1787AE8 Offset: 0x1787AE8 VA: 0x1787AE8
	public void OnOverChargeState(DataVals compVals, DataVals.TYPE type, DataVals.OverChargeState state) { }

	// RVA: 0x1787B58 Offset: 0x1787B58 VA: 0x1787B58
	public bool IsOverChargeState(DataVals.OverChargeState state) { }

	// RVA: 0x1787B68 Offset: 0x1787B68 VA: 0x1787B68
	public int GetFunctionTriggerStarNum() { }

	// RVA: 0x1787C50 Offset: 0x1787C50 VA: 0x1787C50
	public bool CheckFunctionTriggerStar(int totalStar) { }

	// RVA: 0x1787C84 Offset: 0x1787C84 VA: 0x1787C84
	public int GetCardIndex() { }

	// RVA: 0x1787CC4 Offset: 0x1787CC4 VA: 0x1787CC4
	public int GetCardIndividuality() { }

	// RVA: 0x1787D04 Offset: 0x1787D04 VA: 0x1787D04
	public int[] GetParamArray(DataVals.TYPE paramType) { }

	// RVA: 0x1787E10 Offset: 0x1787E10 VA: 0x1787E10
	public bool isParamAddIndividuality() { }

	// RVA: 0x1787E94 Offset: 0x1787E94 VA: 0x1787E94
	public bool isMultipleGainStar() { }

	// RVA: 0x1787EB4 Offset: 0x1787EB4 VA: 0x1787EB4
	public bool isForcedEffectSpeedOne() { }

	// RVA: 0x1787ED4 Offset: 0x1787ED4 VA: 0x1787ED4
	public bool isCheckEnemyFieldSpace() { }

	// RVA: 0x1787EF4 Offset: 0x1787EF4 VA: 0x1787EF4
	public int[] GetFixDamageRates() { }

	// RVA: 0x1787F8C Offset: 0x1787F8C VA: 0x1787F8C
	public bool IsIncludeIgnoreIndividuality() { }

	// RVA: 0x1787FAC Offset: 0x1787FAC VA: 0x1787FAC
	public bool IsEvenIfWinDie() { }

	// RVA: 0x1787FCC Offset: 0x1787FCC VA: 0x1787FCC
	public int GetCallSvtEffectId() { }

	// RVA: 0x1787FD4 Offset: 0x1787FD4 VA: 0x1787FD4
	public bool IsOnParty() { }

	// RVA: 0x1787FF4 Offset: 0x1787FF4 VA: 0x1787FF4
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3763C Offset: 0xD3763C VA: 0xD3763C
	// RVA: 0x1788048 Offset: 0x1788048 VA: 0x1788048
	private static bool <GetDependFuncIdArray>m__0(DataVals x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3764C Offset: 0xD3764C VA: 0xD3764C
	// RVA: 0x1788078 Offset: 0x1788078 VA: 0x1788078
	private static int <GetDependFuncIdArray>m__1(DataVals x) { }
}

// Namespace: 
public enum DataVals.TYPE // TypeDefIndex: 6603
{
	// Fields
	public int value__; // 0x0
	public const DataVals.TYPE Rate = 0;
	public const DataVals.TYPE Turn = 1;
	public const DataVals.TYPE Count = 2;
	public const DataVals.TYPE Value = 3;
	public const DataVals.TYPE Value2 = 4;
	public const DataVals.TYPE UseRate = 5;
	public const DataVals.TYPE Target = 6;
	public const DataVals.TYPE Correction = 7;
	public const DataVals.TYPE ParamAdd = 8;
	public const DataVals.TYPE ParamMax = 9;
	public const DataVals.TYPE HideMiss = 10;
	public const DataVals.TYPE OnField = 11;
	public const DataVals.TYPE HideNoEffect = 12;
	public const DataVals.TYPE Unaffected = 13;
	public const DataVals.TYPE ShowState = 14;
	public const DataVals.TYPE AuraEffectId = 15;
	public const DataVals.TYPE ActSet = 16;
	public const DataVals.TYPE ActSetWeight = 17;
	public const DataVals.TYPE ShowQuestNoEffect = 18;
	public const DataVals.TYPE CheckDead = 19;
	public const DataVals.TYPE RatioHPHigh = 20;
	public const DataVals.TYPE RatioHPLow = 21;
	public const DataVals.TYPE SetPassiveFrame = 22;
	public const DataVals.TYPE ProcPassive = 23;
	public const DataVals.TYPE ProcActive = 24;
	public const DataVals.TYPE HideParam = 25;
	public const DataVals.TYPE SkillID = 26;
	public const DataVals.TYPE SkillLV = 27;
	public const DataVals.TYPE ShowCardOnly = 28;
	public const DataVals.TYPE EffectSummon = 29;
	public const DataVals.TYPE RatioHPRangeHigh = 30;
	public const DataVals.TYPE RatioHPRangeLow = 31;
	public const DataVals.TYPE TargetList = 32;
	public const DataVals.TYPE OpponentOnly = 33;
	public const DataVals.TYPE StatusEffectId = 34;
	public const DataVals.TYPE EndBattle = 35;
	public const DataVals.TYPE LoseBattle = 36;
	public const DataVals.TYPE AddIndividualty = 37;
	public const DataVals.TYPE AddLinkageTargetIndividualty = 38;
	public const DataVals.TYPE SameBuffLimitTargetIndividuality = 39;
	public const DataVals.TYPE SameBuffLimitNum = 40;
	public const DataVals.TYPE CheckDuplicate = 41;
	public const DataVals.TYPE OnFieldCount = 42;
	public const DataVals.TYPE TargetRarityList = 43;
	public const DataVals.TYPE DependFuncId = 44;
	public const DataVals.TYPE DependFuncVals = 45;
	public const DataVals.TYPE InvalidHide = 46;
	public const DataVals.TYPE OutEnemyNpcId = 47;
	public const DataVals.TYPE InEnemyNpcId = 48;
	public const DataVals.TYPE OutEnemyPosition = 49;
	public const DataVals.TYPE IgnoreIndividuality = 50;
	public const DataVals.TYPE StarHigher = 51;
	public const DataVals.TYPE ChangeTDCommandType = 52;
	public const DataVals.TYPE ShiftNpcId = 53;
	public const DataVals.TYPE DisplayLastFuncInvalidType = 54;
	public const DataVals.TYPE AndCheckIndividualityList = 55;
	public const DataVals.TYPE WinBattleNotRelatedSurvivalStatus = 56;
	public const DataVals.TYPE ForceSelfInstantDeath = 57;
	public const DataVals.TYPE ChangeMaxBreakGauge = 58;
	public const DataVals.TYPE ParamAddMaxValue = 59;
	public const DataVals.TYPE ParamAddMaxCount = 60;
	public const DataVals.TYPE LossHpChangeDamage = 61;
	public const DataVals.TYPE IncludePassiveIndividuality = 62;
	public const DataVals.TYPE MotionChange = 63;
	public const DataVals.TYPE PopLabelDelay = 64;
	public const DataVals.TYPE NoTargetNoAct = 65;
	public const DataVals.TYPE CardIndex = 66;
	public const DataVals.TYPE CardIndividuality = 67;
	public const DataVals.TYPE WarBoardTakeOverBuff = 68;
	public const DataVals.TYPE ParamAddSelfIndividuality = 69;
	public const DataVals.TYPE ParamAddOpIndividuality = 70;
	public const DataVals.TYPE ParamAddFieldIndividuality = 71;
	public const DataVals.TYPE ParamAddValue = 72;
	public const DataVals.TYPE MultipleGainStar = 73;
	public const DataVals.TYPE NoCheckIndividualityIfNotUnit = 74;
	public const DataVals.TYPE ForcedEffectSpeedOne = 75;
	public const DataVals.TYPE SetLimitCount = 76;
	public const DataVals.TYPE CheckEnemyFieldSpace = 77;
	public const DataVals.TYPE TriggeredFuncPosition = 78;
	public const DataVals.TYPE DamageCount = 79;
	public const DataVals.TYPE DamageRates = 80;
	public const DataVals.TYPE OnPositions = 81;
	public const DataVals.TYPE OffPositions = 82;
	public const DataVals.TYPE TargetIndiv = 83;
	public const DataVals.TYPE IncludeIgnoreIndividuality = 84;
	public const DataVals.TYPE EvenIfWinDie = 85;
	public const DataVals.TYPE CallSvtEffectId = 86;
	public const DataVals.TYPE ForceAddState = 87;
	public const DataVals.TYPE UnSubState = 88;
	public const DataVals.TYPE ForceSubState = 89;
	public const DataVals.TYPE IgnoreIndivUnreleaseable = 90;
	public const DataVals.TYPE OnParty = 91;
}

// Namespace: 
public enum DataVals.OverChargeState // TypeDefIndex: 6604
{
	// Fields
	public int value__; // 0x0
	public const DataVals.OverChargeState VALUE = 1;
	public const DataVals.OverChargeState VALUE2 = 2;
	public const DataVals.OverChargeState RATE = 4;
	public const DataVals.OverChargeState CORRECTION = 8;
	public const DataVals.OverChargeState TARGET = 16;
	public const DataVals.OverChargeState COUNT = 32;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAEC60 Offset: 0xCAEC60 VA: 0xCAEC60
private sealed class DataVals.<GetDependDataValsArray>c__AnonStorey0 // TypeDefIndex: 6605
{
	// Fields
	internal List<FuncList.TYPE> funcTypeList; // 0x10

	// Methods

	// RVA: 0x17863D8 Offset: 0x17863D8 VA: 0x17863D8
	public void .ctor() { }

	// RVA: 0x17880B0 Offset: 0x17880B0 VA: 0x17880B0
	internal bool <>m__0(DataVals x) { }
}

// Namespace: 
public class DeckData // TypeDefIndex: 6606
{
	// Fields
	public BattleDeckServantData[] svts; // 0x10
	public int followerType; // 0x18
	public int stageId; // 0x1C

	// Methods

	// RVA: 0x162346C Offset: 0x162346C VA: 0x162346C
	public void .ctor() { }
}

// Namespace: 
public class DeckServant // TypeDefIndex: 6607
{
	// Fields
	public DeckServantData[] svts; // 0x10
	public long userEquipId; // 0x18

	// Methods

	// RVA: 0x1627548 Offset: 0x1627548 VA: 0x1627548
	public void .ctor() { }

	// RVA: 0x1627550 Offset: 0x1627550 VA: 0x1627550
	public void .ctor(int sum, long userEquipId) { }

	// RVA: 0x1627758 Offset: 0x1627758 VA: 0x1627758
	public void .ctor(int sum, DeckServant deckInfo) { }

	// RVA: 0x162796C Offset: 0x162796C VA: 0x162796C
	public UserServantEntity GetUserServant(int menber) { }

	// RVA: 0x1627B20 Offset: 0x1627B20 VA: 0x1627B20
	public long[] GetEquipList(int menber) { }

	// RVA: 0x1627E08 Offset: 0x1627E08 VA: 0x1627E08
	public long[] GetEquipList(long userSvtId) { }

	// RVA: 0x16280E0 Offset: 0x16280E0 VA: 0x16280E0
	public bool IsEquip(long userSvtId) { }

	// RVA: 0x16283FC Offset: 0x16283FC VA: 0x16283FC
	public bool IsEquip(long userSvtId, out long equipedUserSvtId) { }

	// RVA: 0x1628678 Offset: 0x1628678 VA: 0x1628678
	public void CollectUserSvtId(List<long> svtCollectList, List<long> equipCollectList) { }
}

// Namespace: 
public class DeckServantData // TypeDefIndex: 6608
{
	// Fields
	public int id; // 0x10
	public long userSvtId; // 0x18
	public long[] userSvtEquipIds; // 0x20
	public bool isFollowerSvt; // 0x28
	public long npcFollowerSvtId; // 0x30
	public int followerType; // 0x38

	// Methods

	// RVA: 0x16276C4 Offset: 0x16276C4 VA: 0x16276C4
	public void .ctor() { }
}

// Namespace: 
public class DropInfo // TypeDefIndex: 6609
{
	// Fields
	public int type; // 0x10
	public int objectId; // 0x14
	public int num; // 0x18
	public int limitCount; // 0x1C
	public int lv; // 0x20
	public int rarity; // 0x24
	public bool isRateUp; // 0x28
	public int originalNum; // 0x2C

	// Methods

	// RVA: 0x1633030 Offset: 0x1633030 VA: 0x1633030
	public void .ctor() { }

	// RVA: 0x1633038 Offset: 0x1633038 VA: 0x1633038
	public bool isItem() { }

	// RVA: 0x1633044 Offset: 0x1633044 VA: 0x1633044
	public bool isServant() { }

	// RVA: 0x1633050 Offset: 0x1633050 VA: 0x1633050
	public void setNum(int num) { }
}

// Namespace: 
public class DropUpInfo // TypeDefIndex: 6610
{
	// Fields
	public int itemId; // 0x10
	public int dropUpRate; // 0x14

	// Methods

	// RVA: 0x163305C Offset: 0x163305C VA: 0x163305C
	public void .ctor() { }
}

// Namespace: 
public static class EntityScriptUtil // TypeDefIndex: 6611
{
	// Methods

	// RVA: -1 Offset: -1
	public static TDestination GetScriptValue<TSource, TDestination>(Dictionary<string, object> script, string key, Func<TSource, TDestination> converter, TDestination defaultValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21A1300 Offset: 0x21A1300 VA: 0x21A1300
	|-EntityScriptUtil.GetScriptValue<List<object>, SubBgmPlayArgs[]>
	|-EntityScriptUtil.GetScriptValue<List<object>, List<int>>
	|-EntityScriptUtil.GetScriptValue<object, object>
	|
	|-RVA: 0x21A11AC Offset: 0x21A11AC VA: 0x21A11AC
	|-EntityScriptUtil.GetScriptValue<long, Nullable<int>>
	*/

	// RVA: 0x1CD1D44 Offset: 0x1CD1D44 VA: 0x1CD1D44
	public static bool ScriptHasKey(Dictionary<string, object> script, string key) { }

	// RVA: 0x1CD1DBC Offset: 0x1CD1DBC VA: 0x1CD1DBC
	public static string GetStringValue(Dictionary<string, object> script, string key, string defaultValue) { }

	// RVA: 0x1CD1E34 Offset: 0x1CD1E34 VA: 0x1CD1E34
	public static int GetIntValue(Dictionary<string, object> script, string key, int defaultValue = 0) { }
}

// Namespace: 
public static class EntityScriptValueConvertLogic // TypeDefIndex: 6612
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC13C0 Offset: 0xCC13C0 VA: 0xCC13C0
	private static Func<string, int> <>f__mg$cache0; // 0x0

	// Methods

	// RVA: 0x1CD1EAC Offset: 0x1CD1EAC VA: 0x1CD1EAC
	public static List<int> ObjectListToIntList(List<object> rawValue) { }

	// RVA: 0x1CD2130 Offset: 0x1CD2130 VA: 0x1CD2130
	public static int[][] ObjectListTo2DimensionalIntArray(List<object> rawValue, char separator = '\x2c') { }

	// RVA: 0x1CD2368 Offset: 0x1CD2368 VA: 0x1CD2368
	public static string[][] ObjectListTo2DimensionalStringArray(List<object> rawValue, char separator = '\x2c') { }
}

// Namespace: 
public class EquipTargetInfo // TypeDefIndex: 6613
{
	// Fields
	private static int LOT_RATE; // 0x0
	public long userId; // 0x10
	public ObscuredLong userSvtId; // 0x18
	public ObscuredInt svtId; // 0x38
	public int limitCount; // 0x48
	public int lv; // 0x4C
	public int exp; // 0x50
	public int hp; // 0x54
	public int atk; // 0x58
	public int skillId1; // 0x5C
	public int skillId2; // 0x60
	public int skillId3; // 0x64
	public int skillLv1; // 0x68
	public int skillLv2; // 0x6C
	public int skillLv3; // 0x70
	public long updatedAt; // 0x78

	// Methods

	// RVA: 0x1CDE9C8 Offset: 0x1CDE9C8 VA: 0x1CDE9C8
	public void .ctor() { }

	// RVA: 0x1CDE9D0 Offset: 0x1CDE9D0 VA: 0x1CDE9D0
	public void .ctor(EquipTargetInfo equipTargetInfo) { }

	// RVA: 0x1CDEA7C Offset: 0x1CDEA7C VA: 0x1CDEA7C
	public void .ctor(int svtId, int limitCnt = 0, int level = 1) { }

	// RVA: 0x1CDEF14 Offset: 0x1CDEF14 VA: 0x1CDEF14
	public int getServantLevel() { }

	// RVA: 0x1CDEF1C Offset: 0x1CDEF1C VA: 0x1CDEF1C
	public int getLevelMax() { }

	// RVA: 0x1CDF050 Offset: 0x1CDF050 VA: 0x1CDF050
	public int[] getSkillIdList() { }

	// RVA: 0x1CDF14C Offset: 0x1CDF14C VA: 0x1CDF14C
	public int[] getSkillLevelList() { }

	// RVA: 0x1CDF248 Offset: 0x1CDF248 VA: 0x1CDF248
	public void getSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x1CDF570 Offset: 0x1CDF570 VA: 0x1CDF570
	public int getFriendPointUpVal() { }

	// RVA: 0x1CDF768 Offset: 0x1CDF768 VA: 0x1CDF768
	public FuncList.TYPE getFriendPointUpType() { }

	// RVA: 0x1CDF98C Offset: 0x1CDF98C VA: 0x1CDF98C
