
	[CompilerGeneratedAttribute] // RVA: 0xD3F45C Offset: 0xD3F45C VA: 0xD3F45C
	// RVA: 0x1481A80 Offset: 0x1481A80 VA: 0x1481A80
	private void set_FocusQua(Quaternion value) { }

	// RVA: 0x1481A8C Offset: 0x1481A8C VA: 0x1481A8C Slot: 4
	protected virtual void LateUpdate() { }

	// RVA: 0x1481A90 Offset: 0x1481A90 VA: 0x1481A90 Slot: 5
	protected virtual string GetEffectName() { }

	// RVA: 0x1481A98 Offset: 0x1481A98 VA: 0x1481A98
	public void Setup(bool isActive, Camera earthEffCamera) { }

	// RVA: 0x1482204 Offset: 0x1482204 VA: 0x1482204
	public float GetDotXZ(ref Vector3 vec) { }

	// RVA: 0x1481FF0 Offset: 0x1481FF0 VA: 0x1481FF0
	public float GetDotXZ_Deg(ref Vector3 vec) { }

	// RVA: 0x1482348 Offset: 0x1482348 VA: 0x1482348
	public static float Cos2Deg(float _cos) { }

	// RVA: 0x14823C4 Offset: 0x14823C4 VA: 0x14823C4
	private static void .cctor() { }
}

// Namespace: 
public class TerminalBoardOptionTextData // TypeDefIndex: 10854
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCE6E2C Offset: 0xCE6E2C VA: 0xCE6E2C
	[DebuggerBrowsableAttribute] // RVA: 0xCE6E2C Offset: 0xCE6E2C VA: 0xCE6E2C
	private string <ForwardText>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE6E68 Offset: 0xCE6E68 VA: 0xCE6E68
	[DebuggerBrowsableAttribute] // RVA: 0xCE6E68 Offset: 0xCE6E68 VA: 0xCE6E68
	private string <BehindText>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE6EA4 Offset: 0xCE6EA4 VA: 0xCE6EA4
	[DebuggerBrowsableAttribute] // RVA: 0xCE6EA4 Offset: 0xCE6EA4 VA: 0xCE6EA4
	private string <BehindTextFormat>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE6EE0 Offset: 0xCE6EE0 VA: 0xCE6EE0
	[DebuggerBrowsableAttribute] // RVA: 0xCE6EE0 Offset: 0xCE6EE0 VA: 0xCE6EE0
	private int <ItemImageId>k__BackingField; // 0x28

	// Properties
	public string ForwardText { get; set; }
	public string BehindText { get; set; }
	public string BehindTextFormat { get; set; }
	public int ItemImageId { get; set; }

	// Methods

	// RVA: 0x15EE770 Offset: 0x15EE770 VA: 0x15EE770
	public void .ctor(string forwardText, string behindTextFormat, int itemImageId = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F46C Offset: 0xD3F46C VA: 0xD3F46C
	// RVA: 0x15EE7CC Offset: 0x15EE7CC VA: 0x15EE7CC
	public string get_ForwardText() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F47C Offset: 0xD3F47C VA: 0xD3F47C
	// RVA: 0x15EE7B4 Offset: 0x15EE7B4 VA: 0x15EE7B4
	public void set_ForwardText(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F48C Offset: 0xD3F48C VA: 0xD3F48C
	// RVA: 0x15EE7D4 Offset: 0x15EE7D4 VA: 0x15EE7D4
	public string get_BehindText() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F49C Offset: 0xD3F49C VA: 0xD3F49C
	// RVA: 0x15EE7DC Offset: 0x15EE7DC VA: 0x15EE7DC
	public void set_BehindText(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F4AC Offset: 0xD3F4AC VA: 0xD3F4AC
	// RVA: 0x15EE7E4 Offset: 0x15EE7E4 VA: 0x15EE7E4
	public string get_BehindTextFormat() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F4BC Offset: 0xD3F4BC VA: 0xD3F4BC
	// RVA: 0x15EE7BC Offset: 0x15EE7BC VA: 0x15EE7BC
	private void set_BehindTextFormat(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F4CC Offset: 0xD3F4CC VA: 0xD3F4CC
	// RVA: 0x15EE7EC Offset: 0x15EE7EC VA: 0x15EE7EC
	public int get_ItemImageId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F4DC Offset: 0xD3F4DC VA: 0xD3F4DC
	// RVA: 0x15EE7C4 Offset: 0x15EE7C4 VA: 0x15EE7C4
	private void set_ItemImageId(int value) { }

	// RVA: 0x15EE7F4 Offset: 0x15EE7F4 VA: 0x15EE7F4
	public void SetParamsToBehindText(object[] args) { }
}

// Namespace: 
public class BoardOptionEventTargetComponent : MonoBehaviour // TypeDefIndex: 10855
{
	// Fields
	private bool mIsBuildingList; // 0x18
	private string[] loadedAssets; // 0x20
	private bool loading; // 0x28
	protected List<ListViewItem> itemList; // 0x30
	[SerializeField] // RVA: 0xCE6F1C Offset: 0xCE6F1C VA: 0xCE6F1C
	private BoardOptionEventTargetListViewItemDraw[] eventTargetItemDrawList; // 0x38
	[SerializeField] // RVA: 0xCE6F2C Offset: 0xCE6F2C VA: 0xCE6F2C
	private GameObject missionTargetLabel; // 0x40
	private int nowOffset; // 0x48
	private Texture2D mChocoTex; // 0x50
	private Material mChocoMaterialTx; // 0x58
	private Material mChocoMaterialSp; // 0x60
	private static readonly string CHOCO_SHADER_TX; // 0x0
	private static readonly string CHOCO_SHADER_SP; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCE6F3C Offset: 0xCE6F3C VA: 0xCE6F3C
	private static Func<ViewEnemyEntity, bool> <>f__am$cache0; // 0x10

	// Methods

	// RVA: 0x1EF311C Offset: 0x1EF311C VA: 0x1EF311C
	public void .ctor() { }

	// RVA: 0x1EF3124 Offset: 0x1EF3124 VA: 0x1EF3124
	public void CreateEnemyList(int questId, int[] enemies) { }

	// RVA: 0x1EF3978 Offset: 0x1EF3978 VA: 0x1EF3978
	private void DispEmptyList(int useNum) { }

	// RVA: 0x1EF40F4 Offset: 0x1EF40F4 VA: 0x1EF40F4
	private void CreateEnemyList(int questId, int[] enemies, ViewEnemyEntity[] veEnts) { }

	// RVA: 0x1EF4334 Offset: 0x1EF4334 VA: 0x1EF4334
	private void DispList(int offset = 0) { }

	// RVA: 0x1EF42AC Offset: 0x1EF42AC VA: 0x1EF42AC
	public void DestroyList() { }

	// RVA: 0x1EF46F0 Offset: 0x1EF46F0 VA: 0x1EF46F0
	public Material NewChocoMaterialForTexture() { }

	// RVA: 0x1EF4850 Offset: 0x1EF4850 VA: 0x1EF4850
	public Material NewChocoMaterialForSprite() { }

	// RVA: 0x1EF4630 Offset: 0x1EF4630 VA: 0x1EF4630
	public void SetAlpha(float alpha) { }

	// RVA: 0x1EF49F4 Offset: 0x1EF49F4 VA: 0x1EF49F4
	public bool IsNeedAnim() { }

	// RVA: 0x1EF4A78 Offset: 0x1EF4A78 VA: 0x1EF4A78
	public void SetNextTarget() { }

	// RVA: 0x1EF4B7C Offset: 0x1EF4B7C VA: 0x1EF4B7C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F4EC Offset: 0xD3F4EC VA: 0xD3F4EC
	// RVA: 0x1EF4BF0 Offset: 0x1EF4BF0 VA: 0x1EF4BF0
	private static bool <CreateEnemyList>m__0(ViewEnemyEntity n) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1750 Offset: 0xCB1750 VA: 0xCB1750
private sealed class BoardOptionEventTargetComponent.<CreateEnemyList>c__AnonStorey0 // TypeDefIndex: 10856
{
	// Fields
	internal int questId; // 0x10
	internal int[] enemies; // 0x18
	internal ViewEnemyEntity[] veEnts; // 0x20
	internal BoardOptionEventTargetComponent $this; // 0x28

	// Methods

	// RVA: 0x1EF3970 Offset: 0x1EF3970 VA: 0x1EF3970
	public void .ctor() { }

	// RVA: 0x1EF4BFC Offset: 0x1EF4BFC VA: 0x1EF4BFC
	internal void <>m__0() { }

	// RVA: 0x1EF4CB4 Offset: 0x1EF4CB4 VA: 0x1EF4CB4
	internal void <>m__1() { }
}

// Namespace: 
public class BoardOptionEventTargetListViewItemDraw : QuestInformationListViewItemDraw // TypeDefIndex: 10857
{
	// Fields
	private static readonly string BASE_SPRITE_NAME; // 0x0
	[SerializeField] // RVA: 0xCE6F4C Offset: 0xCE6F4C VA: 0xCE6F4C
	private BoardOptionEventTargetComponent eventTargetComponent; // 0x90
	[SerializeField] // RVA: 0xCE6F5C Offset: 0xCE6F5C VA: 0xCE6F5C
	private UISprite iconBaseSprite; // 0x98

	// Methods

	// RVA: 0x1EF4CF4 Offset: 0x1EF4CF4 VA: 0x1EF4CF4
	public void .ctor() { }

	// RVA: 0x1EF3B0C Offset: 0x1EF3B0C VA: 0x1EF3B0C
	public void SetItem(QuestInformationListViewItem item, QuestInformationListViewItemDraw.DispMode mode) { }

	// RVA: 0x1EF4E30 Offset: 0x1EF4E30 VA: 0x1EF4E30
	protected void SetDispType(DisplayType.Type dispTp, UISpriteAltMat sp) { }

	// RVA: 0x1EF5014 Offset: 0x1EF5014 VA: 0x1EF5014
	protected void SetDispType(DisplayType.Type dispTp, UITexture texture) { }

	// RVA: 0x1EF4D64 Offset: 0x1EF4D64 VA: 0x1EF4D64
	private void SetFrame() { }

	// RVA: 0x1EF49B0 Offset: 0x1EF49B0 VA: 0x1EF49B0
	public void SetAlpha(float alpha) { }

	// RVA: 0x1EF5400 Offset: 0x1EF5400 VA: 0x1EF5400
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1760 Offset: 0xCB1760 VA: 0xCB1760
private sealed class BoardOptionEventTargetListViewItemDraw.<SetItem>c__AnonStorey0 // TypeDefIndex: 10858
{
	// Fields
	internal QuestInformationListViewItem item; // 0x10
	internal BoardOptionEventTargetListViewItemDraw $this; // 0x18

	// Methods

	// RVA: 0x1EF4D5C Offset: 0x1EF4D5C VA: 0x1EF4D5C
	public void .ctor() { }

	// RVA: 0x1EF545C Offset: 0x1EF545C VA: 0x1EF545C
	internal void <>m__0() { }
}

// Namespace: 
public class BoardOptionTextWithIconComponent : MonoBehaviour // TypeDefIndex: 10859
{
	// Fields
	[SerializeField] // RVA: 0xCE6F6C Offset: 0xCE6F6C VA: 0xCE6F6C
	private UILabel forwardLabel; // 0x18
	[SerializeField] // RVA: 0xCE6F7C Offset: 0xCE6F7C VA: 0xCE6F7C
	private UILabel behindLabel; // 0x20
	[SerializeField] // RVA: 0xCE6F8C Offset: 0xCE6F8C VA: 0xCE6F8C
	private UISprite itemIconSprite; // 0x28
	[SerializeField] // RVA: 0xCE6F9C Offset: 0xCE6F9C VA: 0xCE6F9C
	private int itemIconPaddingLeft; // 0x30
	[SerializeField] // RVA: 0xCE6FAC Offset: 0xCE6FAC VA: 0xCE6FAC
	private int itemIconPaddingRight; // 0x34
	private TerminalBoardOptionTextData data; // 0x38
	private float alpha; // 0x40

	// Properties
	public string forwardLabelText { get; }
	public string behindLabelText { get; }
	public float Alpha { get; set; }
	public Color LabelGradientTop { set; }
	public Color LabelGradientBottom { set; }
	public int LabelFontSize { set; }
	private float iconSpaceWidth { get; }

	// Methods

	// RVA: 0x1EF5530 Offset: 0x1EF5530 VA: 0x1EF5530
	public void .ctor() { }

	// RVA: 0x1EF5540 Offset: 0x1EF5540 VA: 0x1EF5540
	public string get_forwardLabelText() { }

	// RVA: 0x1EF5608 Offset: 0x1EF5608 VA: 0x1EF5608
	public string get_behindLabelText() { }

	// RVA: 0x1EF56D0 Offset: 0x1EF56D0 VA: 0x1EF56D0
	public float get_Alpha() { }

	// RVA: 0x1EF56D8 Offset: 0x1EF56D8 VA: 0x1EF56D8
	public void set_Alpha(float value) { }

	// RVA: 0x1EF5850 Offset: 0x1EF5850 VA: 0x1EF5850
	public void set_LabelGradientTop(Color value) { }

	// RVA: 0x1EF598C Offset: 0x1EF598C VA: 0x1EF598C
	public void set_LabelGradientBottom(Color value) { }

	// RVA: 0x1EF5AC8 Offset: 0x1EF5AC8 VA: 0x1EF5AC8
	public void set_LabelFontSize(int value) { }

	// RVA: 0x1EF5BC8 Offset: 0x1EF5BC8 VA: 0x1EF5BC8
	private float get_iconSpaceWidth() { }

	// RVA: 0x1EF5C94 Offset: 0x1EF5C94 VA: 0x1EF5C94
	public void UpdateUI(TerminalBoardOptionTextData data, int wholeWidth) { }

	// RVA: 0x1EF64CC Offset: 0x1EF64CC VA: 0x1EF64CC
	public bool IsTextEmpty() { }

	// RVA: 0x1EF6598 Offset: 0x1EF6598 VA: 0x1EF6598
	public int GetBehindLabelWrappedWidth() { }

	// RVA: 0x1EF6284 Offset: 0x1EF6284 VA: 0x1EF6284
	private void AdjustContentsAnchor() { }

	// RVA: 0x1EF5EF8 Offset: 0x1EF5EF8 VA: 0x1EF5EF8
	private void SetForwardText(string text) { }

	// RVA: 0x1EF601C Offset: 0x1EF601C VA: 0x1EF601C
	private void SetBehindText(string text) { }

	// RVA: 0x1EF6140 Offset: 0x1EF6140 VA: 0x1EF6140
	private void SetCondensedScale(int wholeWidth) { }

	// RVA: 0x1EF6674 Offset: 0x1EF6674 VA: 0x1EF6674
	private float GetForwardTextWidth(float totalTextWidth) { }

	// RVA: 0x1EF67A8 Offset: 0x1EF67A8 VA: 0x1EF67A8
	private float GetBehindTextWidth(float totalTextWidth) { }

	// RVA: 0x1EF5D58 Offset: 0x1EF5D58 VA: 0x1EF5D58
	private void SetItemIconAtlas(int itemImageId) { }
}

// Namespace: 
public class CaldeaFolderTutorial // TypeDefIndex: 10860
{
	// Fields
	public static readonly int CALDEA_GATE_WAR_ID; // 0x0
	public static readonly int CALDEA_WEEKLY_WAR_ID; // 0x4
	public static readonly int CALDEA_FRIEND_STORY_WAR_ID; // 0x8
	private static Dictionary<int, CaldeaFolderTutorial.TutorialData> FolderTutorials; // 0x10

	// Methods

	// RVA: 0x1926B18 Offset: 0x1926B18 VA: 0x1926B18
	public void .ctor() { }

	// RVA: 0x1926B20 Offset: 0x1926B20 VA: 0x1926B20
	public static bool CheckTutorial(int warId, Action callback) { }

	// RVA: 0x1926CCC Offset: 0x1926CCC VA: 0x1926CCC
	public static void OnClickHelp(int warId) { }

	// RVA: 0x1926E10 Offset: 0x1926E10 VA: 0x1926E10
	private static void .cctor() { }
}

// Namespace: 
private class CaldeaFolderTutorial.TutorialData // TypeDefIndex: 10861
{
	// Fields
	public TutorialFlag.ImageId[] imageIds; // 0x10
	public TutorialFlag.Id flag; // 0x18

	// Methods

	// RVA: 0x1927070 Offset: 0x1927070 VA: 0x1927070
	public void .ctor(TutorialFlag.ImageId[] imgs, TutorialFlag.Id flg) { }
}

// Namespace: 
public class MapTouchDetector : TouchDetectorBase // TypeDefIndex: 10862
{
	// Methods

	// RVA: 0x19E8470 Offset: 0x19E8470 VA: 0x19E8470
	public void .ctor() { }

	// RVA: 0x19E8478 Offset: 0x19E8478 VA: 0x19E8478 Slot: 4
	protected override void DetectTouchLocally() { }

	// RVA: 0x19E85C8 Offset: 0x19E85C8 VA: 0x19E85C8 Slot: 5
	protected virtual bool IsTouchStart() { }

	// RVA: 0x19E88D0 Offset: 0x19E88D0 VA: 0x19E88D0 Slot: 6
	protected virtual bool IsTouchKeep() { }

	// RVA: 0x19E8A4C Offset: 0x19E8A4C VA: 0x19E8A4C Slot: 7
	protected virtual TouchDetectorBase.TouchInfo GetCurrentTouchInfo() { }

	// RVA: 0x19E8748 Offset: 0x19E8748 VA: 0x19E8748
	private List<Touch> GetAvaliableTouchList() { }
}

// Namespace: 
public abstract class TouchDetectorBase // TypeDefIndex: 10863
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCE6FBC Offset: 0xCE6FBC VA: 0xCE6FBC
	[DebuggerBrowsableAttribute] // RVA: 0xCE6FBC Offset: 0xCE6FBC VA: 0xCE6FBC
	private TouchDetectorBase.TouchInfo <StartTouchInfo>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE6FF8 Offset: 0xCE6FF8 VA: 0xCE6FF8
	[DebuggerBrowsableAttribute] // RVA: 0xCE6FF8 Offset: 0xCE6FF8 VA: 0xCE6FF8
	private TouchDetectorBase.TouchInfo <CurrentTouchInfo>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE7034 Offset: 0xCE7034 VA: 0xCE7034
	[DebuggerBrowsableAttribute] // RVA: 0xCE7034 Offset: 0xCE7034 VA: 0xCE7034
	private TouchDetectorBase.TouchInfo <PrevTouchInfo>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE7070 Offset: 0xCE7070 VA: 0xCE7070
	[DebuggerBrowsableAttribute] // RVA: 0xCE7070 Offset: 0xCE7070 VA: 0xCE7070
	private Action<int, int> <OnChangeTouchCount>k__BackingField; // 0x28
	private int currentTouchCountCache; // 0x30
	private bool isTouchEnable; // 0x34

	// Properties
	public TouchDetectorBase.TouchInfo StartTouchInfo { get; set; }
	public TouchDetectorBase.TouchInfo CurrentTouchInfo { get; set; }
	public TouchDetectorBase.TouchInfo PrevTouchInfo { get; set; }
	public Action<int, int> OnChangeTouchCount { get; set; }
	public int CurrentTouchCount { get; }
	public bool IsTouchEnable { get; set; }

	// Methods

	// RVA: 0x1E05CF4 Offset: 0x1E05CF4 VA: 0x1E05CF4
	protected void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F4FC Offset: 0xD3F4FC VA: 0xD3F4FC
	// RVA: 0x1E05CFC Offset: 0x1E05CFC VA: 0x1E05CFC
	public TouchDetectorBase.TouchInfo get_StartTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F50C Offset: 0xD3F50C VA: 0xD3F50C
	// RVA: 0x1E05D04 Offset: 0x1E05D04 VA: 0x1E05D04
	protected void set_StartTouchInfo(TouchDetectorBase.TouchInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F51C Offset: 0xD3F51C VA: 0xD3F51C
	// RVA: 0x1E05D0C Offset: 0x1E05D0C VA: 0x1E05D0C
	public TouchDetectorBase.TouchInfo get_CurrentTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F52C Offset: 0xD3F52C VA: 0xD3F52C
	// RVA: 0x1E05D14 Offset: 0x1E05D14 VA: 0x1E05D14
	protected void set_CurrentTouchInfo(TouchDetectorBase.TouchInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F53C Offset: 0xD3F53C VA: 0xD3F53C
	// RVA: 0x1E05D1C Offset: 0x1E05D1C VA: 0x1E05D1C
	public TouchDetectorBase.TouchInfo get_PrevTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F54C Offset: 0xD3F54C VA: 0xD3F54C
	// RVA: 0x1E05D24 Offset: 0x1E05D24 VA: 0x1E05D24
	protected void set_PrevTouchInfo(TouchDetectorBase.TouchInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F55C Offset: 0xD3F55C VA: 0xD3F55C
	// RVA: 0x1E05D2C Offset: 0x1E05D2C VA: 0x1E05D2C
	public Action<int, int> get_OnChangeTouchCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F56C Offset: 0xD3F56C VA: 0xD3F56C
	// RVA: 0x1E05D34 Offset: 0x1E05D34 VA: 0x1E05D34
	public void set_OnChangeTouchCount(Action<int, int> value) { }

	// RVA: 0x1E05D3C Offset: 0x1E05D3C VA: 0x1E05D3C
	public int get_CurrentTouchCount() { }

	// RVA: 0x1E05DAC Offset: 0x1E05DAC VA: 0x1E05DAC
	public bool get_IsTouchEnable() { }

	// RVA: 0x1E05DB4 Offset: 0x1E05DB4 VA: 0x1E05DB4
	public void set_IsTouchEnable(bool value) { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract void DetectTouchLocally();

	// RVA: 0x1E05DD8 Offset: 0x1E05DD8 VA: 0x1E05DD8
	public void DetectTouch() { }

	// RVA: 0x1E05DCC Offset: 0x1E05DCC VA: 0x1E05DCC
	public void ClearTouchInfo() { }

	// RVA: 0x1E05E1C Offset: 0x1E05E1C VA: 0x1E05E1C
	protected void CheckUpdateCurrentTouchCount() { }
}

// Namespace: 
public class TouchDetectorBase.TouchInfo // TypeDefIndex: 10864
{
	// Fields
	private const float MinTouchInterval = 10;
	[CompilerGeneratedAttribute] // RVA: 0xCE70AC Offset: 0xCE70AC VA: 0xCE70AC
	[DebuggerBrowsableAttribute] // RVA: 0xCE70AC Offset: 0xCE70AC VA: 0xCE70AC
	private List<Vector2> <TouchPosList>k__BackingField; // 0x10
	private Nullable<float> touchIntervalCache; // 0x18

	// Properties
	public List<Vector2> TouchPosList { get; set; }
	public int TouchCount { get; }
	public float TouchInterval { get; }
	public Vector2 TouchCenter { get; }

	// Methods

	// RVA: 0x1E05ECC Offset: 0x1E05ECC VA: 0x1E05ECC
	public void .ctor(Vector2 primaryTouchPos, Vector2[] optionalTouchPosArray) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F57C Offset: 0xD3F57C VA: 0xD3F57C
	// RVA: 0x1E05FCC Offset: 0x1E05FCC VA: 0x1E05FCC
	public List<Vector2> get_TouchPosList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F58C Offset: 0xD3F58C VA: 0xD3F58C
	// RVA: 0x1E05FC4 Offset: 0x1E05FC4 VA: 0x1E05FC4
	private void set_TouchPosList(List<Vector2> value) { }

	// RVA: 0x1E05D4C Offset: 0x1E05D4C VA: 0x1E05D4C
	public int get_TouchCount() { }

	// RVA: 0x1E05FD4 Offset: 0x1E05FD4 VA: 0x1E05FD4
	public float get_TouchInterval() { }

	// RVA: 0x1E06304 Offset: 0x1E06304 VA: 0x1E06304
	public Vector2 get_TouchCenter() { }
}

// Namespace: 
public class clsQuestCheck : SingletonTemplate<clsQuestCheck> // TypeDefIndex: 10865
{
	// Fields
	private List<QuestReleaseEntity> qrs; // 0x10
	private List<QuestReleaseEntity> cQuestReleaseListP; // 0x18
	private static readonly string KEY_QUEST_START_EFFECT; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCE70E8 Offset: 0xCE70E8 VA: 0xCE70E8
	private static Func<QuestReleaseEntity, bool> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCE70F8 Offset: 0xCE70F8 VA: 0xCE70F8
	private static Comparison<QuestReleaseEntity> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE7108 Offset: 0xCE7108 VA: 0xCE7108
	private static Action <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCE7118 Offset: 0xCE7118 VA: 0xCE7118
	private static Action <>f__am$cache3; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCE7128 Offset: 0xCE7128 VA: 0xCE7128
	private static ServantFrameShortDlgComponent.CallbackFunc <>f__am$cache4; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCE7138 Offset: 0xCE7138 VA: 0xCE7138
	private static ServantFrameShortDlgComponent.CallbackFunc <>f__am$cache5; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCE7148 Offset: 0xCE7148 VA: 0xCE7148
	private static ServantFrameShortDlgComponent.CallbackFunc <>f__am$cache6; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCE7158 Offset: 0xCE7158 VA: 0xCE7158
	private static Action <>f__am$cache7; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCE7168 Offset: 0xCE7168 VA: 0xCE7168
	private static Action <>f__am$cache8; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCE7178 Offset: 0xCE7178 VA: 0xCE7178
	private static CommonConfirmDialog.ClickDelegate <>f__am$cache9; // 0x50

	// Methods

	// RVA: 0x1DDE5D0 Offset: 0x1DDE5D0 VA: 0x1DDE5D0
	public void .ctor() { }

	// RVA: 0x1DDE688 Offset: 0x1DDE688 VA: 0x1DDE688
	public static void DeleteContinueData() { }

	// RVA: 0x1DDE724 Offset: 0x1DDE724 VA: 0x1DDE724
	public bool mfQuestReleaseCheckGetEntityByQuestID(int iQuestID, out QuestReleaseEntity rQuestRlsNG, MapControl.QuestInfo qinf) { }

	// RVA: 0x1DDF2EC Offset: 0x1DDF2EC VA: 0x1DDF2EC
	private bool IsValidQuestRandomGroup(MapControl.QuestInfo questInfo) { }

	// RVA: 0x1DDF5B4 Offset: 0x1DDF5B4 VA: 0x1DDF5B4
	public bool CheckQuestPlayableNow(int iQuestID) { }

	// RVA: 0x1DDF94C Offset: 0x1DDF94C VA: 0x1DDF94C
	public bool IsQuestRelease(int quest_id, int old_val = -1, CondType.Kind old_val_qr_type = 0) { }

	// RVA: 0x1DDFC14 Offset: 0x1DDFC14 VA: 0x1DDFC14
	public bool IsEncountRaidBoss(int eventId, int day) { }

	// RVA: 0x1DDFE44 Offset: 0x1DDFE44 VA: 0x1DDFE44
	public bool IsWarClear(int war_id) { }

	// RVA: 0x1DDFF08 Offset: 0x1DDFF08 VA: 0x1DDFF08
	public bool IsLastWarClear() { }

	// RVA: 0x1DDFF64 Offset: 0x1DDFF64 VA: 0x1DDFF64
	public bool IsMainInterlude(int war_id) { }

	// RVA: 0x1DDF1A0 Offset: 0x1DDF1A0 VA: 0x1DDF1A0
	private bool mfQuestReleaseCheckAlreadyClear(int qid) { }

	// RVA: 0x1DDF93C Offset: 0x1DDF93C VA: 0x1DDF93C
	private bool IsQuestRelease(QuestReleaseEntity qrd, MapControl.QuestInfo qinf) { }

	// RVA: 0x1DDFC0C Offset: 0x1DDFC0C VA: 0x1DDFC0C
	private bool IsQuestRelease(QuestReleaseEntity qrd, int old_val) { }

	// RVA: 0x1DE0010 Offset: 0x1DE0010 VA: 0x1DE0010
	private bool IsQuestRelease(QuestReleaseEntity qrd, int old_val, MapControl.QuestInfo qinf) { }

	// RVA: 0x1DE09F4 Offset: 0x1DE09F4 VA: 0x1DE09F4
	private void checkCondTypeItemGet(ref bool is_release, QuestReleaseEntity qrd, bool itemGet) { }

	// RVA: 0x1DE0BC8 Offset: 0x1DE0BC8 VA: 0x1DE0BC8
	public bool mfCheck_IsQuestNew(int qid) { }

	// RVA: 0x1DE0D44 Offset: 0x1DE0D44 VA: 0x1DE0D44
	public int mfGetQuestPhaseByQuestID(int qid) { }

	// RVA: 0x1DDFDB8 Offset: 0x1DDFDB8 VA: 0x1DDFDB8
	public bool IsQuestClear(int qid, bool is_quest_after_action = False) { }

	// RVA: 0x1DE0F8C Offset: 0x1DE0F8C VA: 0x1DE0F8C
	public bool IsQuestClearRaw(int qid, bool is_quest_after_action = False) { }

	// RVA: 0x1DE1018 Offset: 0x1DE1018 VA: 0x1DE1018
	public bool IsQuestPhaseClear(int qid, int phase, bool is_quest_after_action = False) { }

	// RVA: 0x1DE0EB8 Offset: 0x1DE0EB8 VA: 0x1DE0EB8
	public int GetBeforeClearQuestId(bool is_quest_after_action) { }

	// RVA: 0x1DE10E0 Offset: 0x1DE10E0 VA: 0x1DE10E0
	public List<int> mfIsQuestOpenByQuestClear(int iQuestID) { }

	// RVA: 0x1DE1264 Offset: 0x1DE1264 VA: 0x1DE1264
	public List<int> mfIsQuestOpenByItemGet(int iItemID) { }

	// RVA: 0x1DE13E8 Offset: 0x1DE13E8 VA: 0x1DE13E8
	public List<int> GetReleaseQuestIdByServantLv(int svt_id, int oldLv) { }

	// RVA: 0x1DE13F0 Offset: 0x1DE13F0 VA: 0x1DE13F0
	public List<int> GetReleaseQuestIdByServantLv(int svt_id, int oldLv, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x1DE1604 Offset: 0x1DE1604 VA: 0x1DE1604
	public List<int> GetReleaseQuestIdByServantLimit(int svt_id, int oldLimitCount) { }

	// RVA: 0x1DE160C Offset: 0x1DE160C VA: 0x1DE160C
	public List<int> GetReleaseQuestIdByServantLimit(int svt_id, int oldLimitCount, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x1DE19E0 Offset: 0x1DE19E0 VA: 0x1DE19E0
	public List<int> GetReleaseQuestIdByServantLimit(int svt_id, int oldLimitCount, int newLimitCount, QuestEntity.TypeFlag type_flag = 238) { }

	// RVA: 0x1DE1E80 Offset: 0x1DE1E80 VA: 0x1DE1E80
	public List<int> GetReleaseQuestIdByServantGet(int servantId, QuestEntity.TypeFlag typeFlag = 238) { }

	// RVA: 0x1DE228C Offset: 0x1DE228C VA: 0x1DE228C
	public List<QuestEntity> GetReleaseQuestEntityByServantGet(int servantId, QuestEntity.TypeFlag typeFlag = 238) { }

	// RVA: 0x1DE2480 Offset: 0x1DE2480 VA: 0x1DE2480
	public List<int> GetReleaseQuestIdByServantFriendShip(int svt_id, int oldFriendShipRank, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x1DE2854 Offset: 0x1DE2854 VA: 0x1DE2854
	public List<QuestEntity> GetReleaseQuestEntityByServantFriendShip(int svt_id, int oldFriendShipRank, QuestEntity.TypeFlag type_flag) { }

	// RVA: 0x1DE22A4 Offset: 0x1DE22A4 VA: 0x1DE22A4
	private List<QuestEntity> GetQuestEntityByQuestId(List<int> qids) { }

	// RVA: 0x1DE286C Offset: 0x1DE286C VA: 0x1DE286C
	public bool isPlayQuestStartAction() { }

	// RVA: 0x1DE2928 Offset: 0x1DE2928 VA: 0x1DE2928
	public void PlayQuestStartAction(Action end_act) { }

	// RVA: 0x1DE2A0C Offset: 0x1DE2A0C VA: 0x1DE2A0C
	public bool IsTapSkipQuestStart(int questId, int questPhase, string effectName, bool isMyRoomMaterial) { }

	// RVA: 0x1DE2E40 Offset: 0x1DE2E40 VA: 0x1DE2E40
	public bool CheckQuestPlayable(MapControl.QuestInfo questInfo, long srcEndTime, int boostId = 0) { }

	// RVA: 0x1DE498C Offset: 0x1DE498C VA: 0x1DE498C
	private void RecoverItemListDialogCallback(MapControl.QuestInfo qinf, long endTime, RecoverDlgComponent.Result result, int boostId = 0) { }

	// RVA: 0x1DE4C94 Offset: 0x1DE4C94 VA: 0x1DE4C94
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F59C Offset: 0xD3F59C VA: 0xD3F59C
	// RVA: 0x1DE4CF0 Offset: 0x1DE4CF0 VA: 0x1DE4CF0
	private static bool <mfQuestReleaseCheckGetEntityByQuestID>m__0(QuestReleaseEntity n) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F5AC Offset: 0xD3F5AC VA: 0xD3F5AC
	// RVA: 0x1DE4D28 Offset: 0x1DE4D28 VA: 0x1DE4D28
	private static int <mfQuestReleaseCheckGetEntityByQuestID>m__1(QuestReleaseEntity a, QuestReleaseEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F5BC Offset: 0xD3F5BC VA: 0xD3F5BC
	// RVA: 0x1DE4D80 Offset: 0x1DE4D80 VA: 0x1DE4D80
	private static void <CheckQuestPlayable>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F5CC Offset: 0xD3F5CC VA: 0xD3F5CC
	// RVA: 0x1DE4E18 Offset: 0x1DE4E18 VA: 0x1DE4E18
	private static void <CheckQuestPlayable>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F5DC Offset: 0xD3F5DC VA: 0xD3F5DC
	// RVA: 0x1DE4E1C Offset: 0x1DE4E1C VA: 0x1DE4E1C
	private static void <CheckQuestPlayable>m__4(ServantFrameShortDlgComponent.resultClicked result) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F5EC Offset: 0xD3F5EC VA: 0xD3F5EC
	// RVA: 0x1DE4EEC Offset: 0x1DE4EEC VA: 0x1DE4EEC
	private static void <CheckQuestPlayable>m__5(ServantFrameShortDlgComponent.resultClicked result) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F5FC Offset: 0xD3F5FC VA: 0xD3F5FC
	// RVA: 0x1DE4FBC Offset: 0x1DE4FBC VA: 0x1DE4FBC
	private static void <CheckQuestPlayable>m__6(ServantFrameShortDlgComponent.resultClicked result) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F60C Offset: 0xD3F60C VA: 0xD3F60C
	// RVA: 0x1DE508C Offset: 0x1DE508C VA: 0x1DE508C
	private static void <CheckQuestPlayable>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F61C Offset: 0xD3F61C VA: 0xD3F61C
	// RVA: 0x1DE50FC Offset: 0x1DE50FC VA: 0x1DE50FC
	private static void <CheckQuestPlayable>m__8() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F62C Offset: 0xD3F62C VA: 0xD3F62C
	// RVA: 0x1DE516C Offset: 0x1DE516C VA: 0x1DE516C
	private static void <CheckQuestPlayable>m__9(bool isDecide) { }
}

// Namespace: 
public enum clsQuestCheck.QUEST_START_EFFECT_SKIP // TypeDefIndex: 10866
{
	// Fields
	public int value__; // 0x0
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP NONE = 0;
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP FIRST = 1;
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP SECOND = 2;
	public const clsQuestCheck.QUEST_START_EFFECT_SKIP DESABLE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1770 Offset: 0xCB1770 VA: 0xCB1770
private sealed class clsQuestCheck.<IsTapSkipQuestStart>c__AnonStorey0 // TypeDefIndex: 10867
{
	// Fields
	internal string effectName; // 0x10

	// Methods

	// RVA: 0x23ED7C4 Offset: 0x23ED7C4 VA: 0x23ED7C4
	public void .ctor() { }

	// RVA: 0x23ED7CC Offset: 0x23ED7CC VA: 0x23ED7CC
	internal bool <>m__0(string a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1780 Offset: 0xCB1780 VA: 0xCB1780
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey4 // TypeDefIndex: 10868
{
	// Fields
	internal MapControl.QuestInfo questInfo; // 0x10
	internal long srcEndTime; // 0x18
	internal int boostId; // 0x20
	internal clsQuestCheck $this; // 0x28

	// Methods

	// RVA: 0x23ED6A8 Offset: 0x23ED6A8 VA: 0x23ED6A8
	public void .ctor() { }

	// RVA: 0x23ED6B0 Offset: 0x23ED6B0 VA: 0x23ED6B0
	internal void <>m__0(RecoverDlgComponent.Result result) { }

	// RVA: 0x23ED70C Offset: 0x23ED70C VA: 0x23ED70C
	internal void <>m__1(RecoverDlgComponent.Result result) { }

	// RVA: 0x23ED768 Offset: 0x23ED768 VA: 0x23ED768
	internal void <>m__2(RecoverDlgComponent.Result result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1790 Offset: 0xCB1790 VA: 0xCB1790
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey1 // TypeDefIndex: 10869
{
	// Fields
	internal ServantFrameShortDlgComponent.resultClicked result; // 0x10

	// Methods

	// RVA: 0x23ED318 Offset: 0x23ED318 VA: 0x23ED318
	public void .ctor() { }

	// RVA: 0x23ED320 Offset: 0x23ED320 VA: 0x23ED320
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB17A0 Offset: 0xCB17A0 VA: 0xCB17A0
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey2 // TypeDefIndex: 10870
{
	// Fields
	internal ServantFrameShortDlgComponent.resultClicked result; // 0x10

	// Methods

	// RVA: 0x23ED46C Offset: 0x23ED46C VA: 0x23ED46C
	public void .ctor() { }

	// RVA: 0x23ED474 Offset: 0x23ED474 VA: 0x23ED474
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB17B0 Offset: 0xCB17B0 VA: 0xCB17B0
private sealed class clsQuestCheck.<CheckQuestPlayable>c__AnonStorey3 // TypeDefIndex: 10871
{
	// Fields
	internal ServantFrameShortDlgComponent.resultClicked result; // 0x10

	// Methods

	// RVA: 0x23ED5E4 Offset: 0x23ED5E4 VA: 0x23ED5E4
	public void .ctor() { }

	// RVA: 0x23ED5EC Offset: 0x23ED5EC VA: 0x23ED5EC
	internal void <>m__0() { }
}

// Namespace: 
public class CostumeOpenConfirmDialog : BaseDialog // TypeDefIndex: 10872
{
	// Fields
	private const float CHANGE_FIGURE_ONLY_Y = 130;
	private const float CHANGE_FIGURE_ONLY_ICON_Y = -54;
	[SerializeField] // RVA: 0xCE7188 Offset: 0xCE7188 VA: 0xCE7188
	private UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCE7198 Offset: 0xCE7198 VA: 0xCE7198
	private UILabel message; // 0x60
	[SerializeField] // RVA: 0xCE71A8 Offset: 0xCE71A8 VA: 0xCE71A8
	private UILabel description; // 0x68
	[SerializeField] // RVA: 0xCE71B8 Offset: 0xCE71B8 VA: 0xCE71B8
	private UILabel closeLabel; // 0x70
	[SerializeField] // RVA: 0xCE71C8 Offset: 0xCE71C8 VA: 0xCE71C8
	private ServantFaceIconComponent svtFaceIcon; // 0x78
	private Action closeAction; // 0x80

	// Methods

	// RVA: 0x197AC68 Offset: 0x197AC68 VA: 0x197AC68
	public void .ctor() { }

	// RVA: 0x197ACD0 Offset: 0x197ACD0 VA: 0x197ACD0
	private void Init() { }

	// RVA: 0x197AE1C Offset: 0x197AE1C VA: 0x197AE1C
	public void Setup(UserServantCollectionEntity userSvtColEntity, ServantCostumeEntity svtCostumeEntity, string svtName) { }

	// RVA: 0x197B1B8 Offset: 0x197B1B8 VA: 0x197B1B8
	public void Open(Action closeAction) { }

	// RVA: 0x197B1EC Offset: 0x197B1EC VA: 0x197B1EC
	public void OnClickCloseButton() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F63C Offset: 0xD3F63C VA: 0xD3F63C
	// RVA: 0x197B290 Offset: 0x197B290 VA: 0x197B290
	private void <OnClickCloseButton>m__0() { }
}

// Namespace: 
public class CylinderCore : BaseCore // TypeDefIndex: 10873
{
	// Fields
	public const float CORE_SCL = 1;
	public const float ZOOM_IN_SPD_TIME = 1.5;
	public const float ZOOM_OUT_SPD_TIME = 1.5;
	public const float EARTH_RADIUS = 143;
	public const float LATITUDE_SPECTRUM = 120;
	public const float GREENWICH_OFFSET = 192;
	public const float MODEL_OFFSET = 90;
	private static readonly float BASE_ROT_X; // 0x0
	private static readonly float BASE_ROT_Z; // 0x4
	public const float FOCUS_SPD_RATE = 0.35;
	public static readonly Vector3 FOCUS_IN_POS; // 0x8
	public static readonly Vector3 FOCUS_OUT_POS; // 0x14
	public static readonly Vector3 ZOOM_IN_POS; // 0x20
	private CStateManager<CylinderCore> mFSM; // 0x98
	private CylinderCore.StateMain mStateMain; // 0xA0

	// Properties
	public CylinderPoint mFocusCylinderPoint { get; }

	// Methods

	// RVA: 0x1981680 Offset: 0x1981680 VA: 0x1981680
	public void .ctor() { }

	// RVA: 0x19816F0 Offset: 0x19816F0 VA: 0x19816F0
	public CylinderCore.StateMain GetStateMain() { }

	// RVA: 0x19816F8 Offset: 0x19816F8 VA: 0x19816F8
	public CylinderPoint get_mFocusCylinderPoint() { }

	// RVA: 0x198177C Offset: 0x198177C VA: 0x198177C Slot: 4
	public override void FocusInOut(bool isFocusIn, bool isForce = False) { }

	// RVA: 0x1981870 Offset: 0x1981870 VA: 0x1981870 Slot: 5
	public override void Awake() { }

	// RVA: 0x1981B08 Offset: 0x1981B08 VA: 0x1981B08 Slot: 6
	public override void Update() { }

	// RVA: 0x1981BFC Offset: 0x1981BFC VA: 0x1981BFC Slot: 7
	public override void OnPress() { }

	// RVA: 0x1981C60 Offset: 0x1981C60 VA: 0x1981C60 Slot: 14
	public override float GetStateMainInertialSpdOld() { }

	// RVA: 0x1981C94 Offset: 0x1981C94 VA: 0x1981C94 Slot: 8
	public override void Setup(List<MapControl.WarInfo> warInfoList, bool isFocusIn) { }

	// RVA: 0x19822D8 Offset: 0x19822D8 VA: 0x19822D8 Slot: 9
	public override void mcbfStartMain() { }

	// RVA: 0x19822E0 Offset: 0x19822E0 VA: 0x19822E0 Slot: 10
	public override void mcbfStartZoomOut() { }

	// RVA: 0x19822E8 Offset: 0x19822E8 VA: 0x19822E8 Slot: 11
	public override void mcbfStartZoomIn() { }

	// RVA: 0x19822F4 Offset: 0x19822F4 VA: 0x19822F4 Slot: 12
	public override void SetDisp(bool is_disp) { }

	// RVA: 0x1981B9C Offset: 0x1981B9C VA: 0x1981B9C
	public BaseCore.STATE GetState() { }

	// RVA: 0x1981A98 Offset: 0x1981A98 VA: 0x1981A98
	public void SetState(BaseCore.STATE state) { }

	// RVA: 0x198235C Offset: 0x198235C VA: 0x198235C
	private static void .cctor() { }
}

// Namespace: 
private class CylinderCore.StateNone : IState<CylinderCore> // TypeDefIndex: 10874
{
	// Methods

	// RVA: 0x1981A80 Offset: 0x1981A80 VA: 0x1981A80
	public void .ctor() { }

	// RVA: 0x1982780 Offset: 0x1982780 VA: 0x1982780 Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x1982784 Offset: 0x1982784 VA: 0x1982784 Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x1982788 Offset: 0x1982788 VA: 0x1982788 Slot: 6
	public void end(CylinderCore that) { }
}

// Namespace: 
public class CylinderCore.StateMain : IState<CylinderCore> // TypeDefIndex: 10875
{
	// Fields
	private const float DRAG_SPD_RATE = -0.2;
	private const float INERTIAL_SPD_RATE = 0.88;
	private const float INERTIAL_SPD_END = 0.004;
	private float mInertialSpd; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCE71D8 Offset: 0xCE71D8 VA: 0xCE71D8
	[DebuggerBrowsableAttribute] // RVA: 0xCE71D8 Offset: 0xCE71D8 VA: 0xCE71D8
	private float <InertialSpdOld>k__BackingField; // 0x14

	// Properties
	public float InertialSpd { get; }
	public float InertialSpdOld { get; set; }

	// Methods

	// RVA: 0x19816E8 Offset: 0x19816E8 VA: 0x19816E8
	public void .ctor() { }

	// RVA: 0x1981C50 Offset: 0x1981C50 VA: 0x1981C50
	public float get_InertialSpd() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F64C Offset: 0xD3F64C VA: 0xD3F64C
	// RVA: 0x1981C8C Offset: 0x1981C8C VA: 0x1981C8C
	public float get_InertialSpdOld() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3F65C Offset: 0xD3F65C VA: 0xD3F65C
	// RVA: 0x1981C58 Offset: 0x1981C58 VA: 0x1981C58
	public void set_InertialSpdOld(float value) { }

	// RVA: 0x1982494 Offset: 0x1982494 VA: 0x1982494 Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x198249C Offset: 0x198249C VA: 0x198249C Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x198277C Offset: 0x198277C VA: 0x198277C Slot: 6
	public void end(CylinderCore that) { }
}

// Namespace: 
private class CylinderCore.StateZoomIn : IState<CylinderCore> // TypeDefIndex: 10876
{
	// Fields
	private CylinderCore mCore; // 0x10
	private float mStartTime; // 0x18
	private float mSpdTime; // 0x1C

	// Methods

	// RVA: 0x1981A88 Offset: 0x1981A88 VA: 0x1981A88
	public void .ctor() { }

	// RVA: 0x198278C Offset: 0x198278C VA: 0x198278C Slot: 4
	public void begin(CylinderCore that) { }

	// RVA: 0x1982E44 Offset: 0x1982E44 VA: 0x1982E44 Slot: 5
	public void update(CylinderCore that) { }

	// RVA: 0x1982F30 Offset: 0x1982F30 VA: 0x1982F30 Slot: 6
	public void end(CylinderCore that) { }

	// RVA: 0x1982D74 Offset: 0x1982D74 VA: 0x1982D74
	private void GoNext() { }

	// RVA: 0x1982F34 Offset: 0x1982F34 VA: 0x1982F34
	private void updateFadeTime() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB17C0 Offset: 0xCB17C0 VA: 0xCB17C0
private sealed class CylinderCore.StateZoomIn.<begin>c__AnonStorey0 // TypeDefIndex: 10877
{
	// Fields
	internal EasingObject eo; // 0x10
	internal Vector3 startPos; // 0x18
	internal Vector3 endPos; // 0x24
	internal CylinderCore that; // 0x30
