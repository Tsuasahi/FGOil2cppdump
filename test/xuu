	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
private class QuestRewardOrderGradeAction.StateItemLabel : IState<QuestRewardOrderGradeAction> // TypeDefIndex: 11230
{
	// Fields
	private const float MV_TIME = 0.25;

	// Methods

	// RVA: 0x1277068 Offset: 0x1277068 VA: 0x1277068
	public void .ctor() { }

	// RVA: 0x12776A0 Offset: 0x12776A0 VA: 0x12776A0 Slot: 4
	public void begin(QuestRewardOrderGradeAction that) { }

	// RVA: 0x1277958 Offset: 0x1277958 VA: 0x1277958 Slot: 5
	public void update(QuestRewardOrderGradeAction that) { }

	// RVA: 0x127795C Offset: 0x127795C VA: 0x127795C Slot: 6
	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45CF4 Offset: 0xC45CF4 VA: 0xC45CF4
private sealed class QuestRewardOrderGradeAction.StateItemLabel.<begin>c__AnonStorey0 // TypeDefIndex: 11231
{
	// Fields
	internal GameObject tgt_obj; // 0x10
	internal MoveObject mo; // 0x18
	internal QuestRewardOrderGradeAction that; // 0x20

	// Methods

	// RVA: 0x1277950 Offset: 0x1277950 VA: 0x1277950
	public void .ctor() { }

	// RVA: 0x1277960 Offset: 0x1277960 VA: 0x1277960
	internal void <>m__0() { }

	// RVA: 0x127799C Offset: 0x127799C VA: 0x127799C
	internal void <>m__1() { }
}

// Namespace: 
private class QuestRewardOrderGradeAction.StateTouchWait : IState<QuestRewardOrderGradeAction> // TypeDefIndex: 11232
{
	// Methods

	// RVA: 0x1277070 Offset: 0x1277070 VA: 0x1277070
	public void .ctor() { }

	// RVA: 0x1277F08 Offset: 0x1277F08 VA: 0x1277F08 Slot: 4
	public void begin(QuestRewardOrderGradeAction that) { }

	// RVA: 0x1277F64 Offset: 0x1277F64 VA: 0x1277F64 Slot: 5
	public void update(QuestRewardOrderGradeAction that) { }

	// RVA: 0x1278148 Offset: 0x1278148 VA: 0x1278148 Slot: 6
	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D04 Offset: 0xC45D04 VA: 0xC45D04
private sealed class QuestRewardOrderGradeAction.StateTouchWait.<update>c__AnonStorey0 // TypeDefIndex: 11233
{
	// Fields
	internal QuestRewardOrderGradeAction that; // 0x10

	// Methods

	// RVA: 0x1278140 Offset: 0x1278140 VA: 0x1278140
	public void .ctor() { }

	// RVA: 0x127814C Offset: 0x127814C VA: 0x127814C
	internal void <>m__0() { }
}

// Namespace: 
public class QuestRewardTokenAction : MonoBehaviour // TypeDefIndex: 11234
{
	// Fields
	private static readonly int TOKEN_EVENT_ID; // 0x0
	private static readonly int TOKEN_IMAGE_ID; // 0x4
	private static readonly int TOKEN_UNKNOWN_IMAGE_ID; // 0x8
	private CStateManager<QuestRewardTokenAction> fsm; // 0x18
	private Animation animation; // 0x20
	private SimpleAnimation simpleAnimation; // 0x28
	private Action endAct; // 0x30
	private bool isEventUILoad; // 0x38
	private Action eventUILoadCallbackFunc; // 0x40
	private AssetData eventUIAssetData; // 0x48
	private UIAtlas eventUIDownloadAtlas; // 0x50
	[SerializeField] // RVA: 0xC7DB38 Offset: 0xC7DB38 VA: 0xC7DB38
	[HeaderAttribute] // RVA: 0xC7DB38 Offset: 0xC7DB38 VA: 0xC7DB38
	private UISprite[] tokenSprite; // 0x58
	[SerializeField] // RVA: 0xC7DB84 Offset: 0xC7DB84 VA: 0xC7DB84
	[HeaderAttribute] // RVA: 0xC7DB84 Offset: 0xC7DB84 VA: 0xC7DB84
	private UILabel[] tokenName; // 0x60
	private ScreenTouchInformationComponent screenTouchInfo; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC7DBD0 Offset: 0xC7DBD0 VA: 0xC7DBD0
	private static Comparison<QuestRewardInfo> <>f__am$cache0; // 0x10

	// Methods

	// RVA: 0x127817C Offset: 0x127817C VA: 0x127817C
	public void .ctor() { }

	// RVA: 0x1278184 Offset: 0x1278184 VA: 0x1278184
	private void Awake() { }

	// RVA: 0x1278368 Offset: 0x1278368 VA: 0x1278368
	private void Update() { }

	// RVA: 0x12783F0 Offset: 0x12783F0 VA: 0x12783F0
	public void DestroyData() { }

	// RVA: 0x12784C4 Offset: 0x12784C4 VA: 0x12784C4
	public void LoadData(Action endAct) { }

	// RVA: 0x127857C Offset: 0x127857C VA: 0x127857C
	private void LoadEventUI(Action callback, int loadParallelMax = 1) { }

	// RVA: 0x1278710 Offset: 0x1278710 VA: 0x1278710
	protected void LoadEventUIEnd(AssetData assetData) { }

	// RVA: 0x12787A4 Offset: 0x12787A4 VA: 0x12787A4
	private UIAtlas CreateUIAtlasFromAssetData(AssetData assetData, string name) { }

	// RVA: 0x12783F4 Offset: 0x12783F4 VA: 0x12783F4
	private void ReleaseEventUI() { }

	// RVA: 0x127886C Offset: 0x127886C VA: 0x127886C
	private bool SetEventUI(UISprite sprite, string spriteName) { }

	// RVA: 0x12789D4 Offset: 0x12789D4 VA: 0x12789D4
	public void Init() { }

	// RVA: 0x1278FAC Offset: 0x1278FAC VA: 0x1278FAC
	public void Setup(QuestRewardInfo[] infos) { }

	// RVA: 0x127945C Offset: 0x127945C VA: 0x127945C
	public void Play(Action end_act, float fade_in_time = 0) { }

	// RVA: 0x1279570 Offset: 0x1279570 VA: 0x1279570
	public QuestRewardTokenAction.STATE GetState() { }

	// RVA: 0x12782F8 Offset: 0x12782F8 VA: 0x12782F8
	public void SetState(QuestRewardTokenAction.STATE state) { }

	// RVA: 0x12795D0 Offset: 0x12795D0 VA: 0x12795D0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3C60 Offset: 0xCD3C60 VA: 0xCD3C60
	// RVA: 0x127964C Offset: 0x127964C VA: 0x127964C
	private static int <Setup>m__0(QuestRewardInfo x, QuestRewardInfo y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3C70 Offset: 0xCD3C70 VA: 0xCD3C70
	// RVA: 0x127968C Offset: 0x127968C VA: 0x127968C
	private void <Play>m__1() { }
}

// Namespace: 
public enum QuestRewardTokenAction.STATE // TypeDefIndex: 11235
{
	// Fields
	public int value__; // 0x0
	public const QuestRewardTokenAction.STATE NONE = 0;
	public const QuestRewardTokenAction.STATE PLAY = 1;
	public const QuestRewardTokenAction.STATE TOUCH_WAIT = 2;
	public const QuestRewardTokenAction.STATE SIZEOF = 3;
}

// Namespace: 
private class QuestRewardTokenAction.StateNone : IState<QuestRewardTokenAction> // TypeDefIndex: 11236
{
	// Methods

	// RVA: 0x12782E0 Offset: 0x12782E0 VA: 0x12782E0
	public void .ctor() { }

	// RVA: 0x12796A8 Offset: 0x12796A8 VA: 0x12796A8 Slot: 4
	public void begin(QuestRewardTokenAction that) { }

	// RVA: 0x12796AC Offset: 0x12796AC VA: 0x12796AC Slot: 5
	public void update(QuestRewardTokenAction that) { }

	// RVA: 0x12796B0 Offset: 0x12796B0 VA: 0x12796B0 Slot: 6
	public void end(QuestRewardTokenAction that) { }
}

// Namespace: 
private class QuestRewardTokenAction.StatePlay : IState<QuestRewardTokenAction> // TypeDefIndex: 11237
{
	// Methods

	// RVA: 0x12782E8 Offset: 0x12782E8 VA: 0x12782E8
	public void .ctor() { }

	// RVA: 0x12796B4 Offset: 0x12796B4 VA: 0x12796B4 Slot: 4
	public void begin(QuestRewardTokenAction that) { }

	// RVA: 0x1279B80 Offset: 0x1279B80 VA: 0x1279B80 Slot: 5
	public void update(QuestRewardTokenAction that) { }

	// RVA: 0x1279D34 Offset: 0x1279D34 VA: 0x1279D34 Slot: 6
	public void end(QuestRewardTokenAction that) { }
}

// Namespace: 
private class QuestRewardTokenAction.StateTouchWait : IState<QuestRewardTokenAction> // TypeDefIndex: 11238
{
	// Methods

	// RVA: 0x12782F0 Offset: 0x12782F0 VA: 0x12782F0
	public void .ctor() { }

	// RVA: 0x1279D38 Offset: 0x1279D38 VA: 0x1279D38 Slot: 4
	public void begin(QuestRewardTokenAction that) { }

	// RVA: 0x1279D94 Offset: 0x1279D94 VA: 0x1279D94 Slot: 5
	public void update(QuestRewardTokenAction that) { }

	// RVA: 0x1279F78 Offset: 0x1279F78 VA: 0x1279F78 Slot: 6
	public void end(QuestRewardTokenAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D24 Offset: 0xC45D24 VA: 0xC45D24
private sealed class QuestRewardTokenAction.StateTouchWait.<update>c__AnonStorey0 // TypeDefIndex: 11239
{
	// Fields
	internal QuestRewardTokenAction that; // 0x10

	// Methods

	// RVA: 0x1279F70 Offset: 0x1279F70 VA: 0x1279F70
	public void .ctor() { }

	// RVA: 0x1279F7C Offset: 0x1279F7C VA: 0x1279F7C
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D14 Offset: 0xC45D14 VA: 0xC45D14
private sealed class QuestRewardTokenAction.<LoadData>c__AnonStorey0 // TypeDefIndex: 11240
{
	// Fields
	internal Action endAct; // 0x10

	// Methods

	// RVA: 0x1278574 Offset: 0x1278574 VA: 0x1278574
	public void .ctor() { }

	// RVA: 0x1279694 Offset: 0x1279694 VA: 0x1279694
	internal void <>m__0() { }
}

// Namespace: 
public class QuestTree : SingletonTemplate<QuestTree> // TypeDefIndex: 11241
{
	// Fields
	private MapControl.RootInfo mapControlRootInfo; // 0x10
	private List<MapControl.QuestInfo> allQuestInfoList; // 0x18
	private List<MapControl.SpotInfo> allSpotInfoList; // 0x20
	private List<MapControl.SpotRoadInfo> allSpotRoadInfoList; // 0x28
	private List<MapControl.MapGimmickInfo> allMapGimmickInfoList; // 0x30
	private List<MapControl.MapInfo> allMapInfoList; // 0x38
	private List<MapControl.WarInfo> allWarInfoList; // 0x40
	private bool isInit; // 0x48
	private int MonitoringDataMasterRevision; // 0x4C
	private long forceUpdateTime; // 0x50
	private List<QuestReleaseEntity> questReleaseEntList; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC7DBE0 Offset: 0xC7DBE0 VA: 0xC7DBE0
	private static Func<MapButtonEntity, int> <>f__am$cache0; // 0x0

	// Properties
	private clsQuestCheck QuestCheckInst { get; }

	// Methods

	// RVA: 0x127C6E0 Offset: 0x127C6E0 VA: 0x127C6E0
	public void .ctor() { }

	// RVA: 0x127C890 Offset: 0x127C890 VA: 0x127C890
	private clsQuestCheck get_QuestCheckInst() { }

	// RVA: 0x127C8F8 Offset: 0x127C8F8 VA: 0x127C8F8
	public List<MapControl.WarInfo> GetWarInfoAll() { }

	// RVA: 0x127C900 Offset: 0x127C900 VA: 0x127C900
	public List<MapControl.WarInfo> GetWarInfoAll_OrderReverse() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3C80 Offset: 0xCD3C80 VA: 0xCD3C80
	// RVA: 0x127C990 Offset: 0x127C990 VA: 0x127C990
	public IEnumerator Init(Action endCallback) { }

	// RVA: 0x127CA2C Offset: 0x127CA2C VA: 0x127CA2C
	private bool IsNeedUpdateQuestTree() { }

	// RVA: 0x127CAE4 Offset: 0x127CAE4 VA: 0x127CAE4
	private void UpdateMonitoringValue() { }

	// RVA: 0x127CB58 Offset: 0x127CB58 VA: 0x127CB58
	private void UpdateForceUpdateTime(long nowTime, long[] times) { }

	// RVA: 0x127CC44 Offset: 0x127CC44 VA: 0x127CC44
	public MapControl.RootInfo mfGetMapCtrlP() { }

	// RVA: 0x127CC4C Offset: 0x127CC4C VA: 0x127CC4C
	public List<MapControl.QuestInfo> mfGetQuestInfoListP() { }

	// RVA: 0x127CC54 Offset: 0x127CC54 VA: 0x127CC54
	public MapControl.SpotInfo GetSpotInfo(int spotId) { }

	// RVA: 0x127CD2C Offset: 0x127CD2C VA: 0x127CD2C
	public MapControl.QuestInfo GetQuestInfo(int questId) { }

	// RVA: 0x127CE04 Offset: 0x127CE04 VA: 0x127CE04
	public WarEntity mfGetWarEntityByWarID(int warId) { }

	// RVA: 0x127CE34 Offset: 0x127CE34 VA: 0x127CE34
	public MapControl.WarInfo mfGetWarInfoByWarID(int warId) { }

	// RVA: 0x127CE48 Offset: 0x127CE48 VA: 0x127CE48
	public MapControl.WarInfo GetWarInfoByEventID(int eventId) { }

	// RVA: 0x127CE5C Offset: 0x127CE5C VA: 0x127CE5C
	public MapControl.MapInfo mfGetMapInfoByMapID(int mapId) { }

	// RVA: 0x127CF38 Offset: 0x127CF38 VA: 0x127CF38
	public int GetQuestCount(int warId) { }

	// RVA: 0x127D794 Offset: 0x127D794 VA: 0x127D794
	private List<MapControl.MapInfo> GetUserReachableMapList(MapControl.WarInfo warInfo) { }

	// RVA: 0x127DA90 Offset: 0x127DA90 VA: 0x127DA90
	private Dictionary<int, int> GetShareQuestIdToGroupIdDict(List<int> questIdList) { }

	// RVA: 0x127DB28 Offset: 0x127DB28 VA: 0x127DB28
	public int GetQuestCountForMap(int mapId) { }

	// RVA: 0x127E09C Offset: 0x127E09C VA: 0x127E09C
	public int GetWarID_ByQuestID(int questId) { }

	// RVA: 0x127E190 Offset: 0x127E190 VA: 0x127E190
	public int GetMapIdByQuestId(int questId) { }

	// RVA: 0x127E1E8 Offset: 0x127E1E8 VA: 0x127E1E8
	public bool IsWarOpen(int warId) { }

	// RVA: 0x127E53C Offset: 0x127E53C VA: 0x127E53C
	public bool IsActiveEventWar(int warId) { }

	// RVA: 0x127E654 Offset: 0x127E654 VA: 0x127E654
	public bool IsActiveEventWar(WarEntity warEnt) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3C90 Offset: 0xCD3C90 VA: 0xCD3C90
	// RVA: 0x127E86C Offset: 0x127E86C VA: 0x127E86C
	private IEnumerator mfBaseTreeMakeWithOpenCheck(Action endCallback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3CA0 Offset: 0xCD3CA0 VA: 0xCD3CA0
	// RVA: 0x127E908 Offset: 0x127E908 VA: 0x127E908
	public IEnumerator mfBaseTreeUpdateWithOpenCheck(int targetWarId, Action endCallback) { }

	// RVA: 0x127E9BC Offset: 0x127E9BC VA: 0x127E9BC
	private void InitInfo() { }

	// RVA: 0x127EAEC Offset: 0x127EAEC VA: 0x127EAEC
	private void SetupSpotInfo(SpotEntity spotEnt, ref MapControl.SpotInfo spotInfo) { }

	// RVA: 0x127EBBC Offset: 0x127EBBC VA: 0x127EBBC
	public bool IsSpotSatisfyingDisplayCond(SpotEntity spotEnt, bool checkBeforeClearQuest = True) { }

	// RVA: 0x127ECD0 Offset: 0x127ECD0 VA: 0x127ECD0
	public bool IsSpotSatisfyingActiveCond(SpotEntity spotEnt) { }

	// RVA: 0x127EDC0 Offset: 0x127EDC0 VA: 0x127EDC0
	private void SetupSpotRoadInfo(SpotRoadEntity spotRoadEnt, ref MapControl.SpotRoadInfo spotRoadInfo) { }

	// RVA: 0x127F030 Offset: 0x127F030 VA: 0x127F030
	private void SetupMapGimmickInfo(ref MapControl.MapGimmickInfo mapGimmickInfo) { }

	// RVA: 0x127F250 Offset: 0x127F250 VA: 0x127F250
	private MapControl.QuestInfo.DispType CheckQuestOpen(QuestEntity questEnt, MapControl.QuestInfo questInfo, int warId) { }

	// RVA: 0x127F868 Offset: 0x127F868 VA: 0x127F868
	private long GetEndTime(MapControl.QuestInfo questInfo) { }

	// RVA: 0x127ED98 Offset: 0x127ED98 VA: 0x127ED98
	public bool CheckSpotCond(int spotId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x127F008 Offset: 0x127F008 VA: 0x127F008
	public bool CheckSpotRoadCond(int spoRoadtId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x128075C Offset: 0x128075C VA: 0x128075C
	public bool CheckMapGimmickCond(int mapGimmickId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x127FBE8 Offset: 0x127FBE8 VA: 0x127FBE8
	public bool CheckSpotCond(QuestAfterAction.COMMAND_TYPE commandType, int commandTypeId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x127F088 Offset: 0x127F088 VA: 0x127F088
	public bool CheckMapGimmickCond(MapControl.MapGimmickInfo mapGimmickInfo) { }

	// RVA: 0x127E3B0 Offset: 0x127E3B0 VA: 0x127E3B0
	private List<MapControl.QuestInfo> GetQuestInfoByWarId(int warId) { }

	// RVA: 0x1280784 Offset: 0x1280784 VA: 0x1280784
	public bool IsWarNew(int warId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3CB0 Offset: 0xCD3CB0 VA: 0xCD3CB0
	// RVA: 0x12808FC Offset: 0x12808FC VA: 0x12808FC
	private static int <GetUserReachableMapList>m__0(MapButtonEntity x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D34 Offset: 0xC45D34 VA: 0xC45D34
private sealed class QuestTree.<Init>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11242
{
	// Fields
	internal Action endCallback; // 0x10
	internal QuestTree $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDCE90 Offset: 0xCDCE90 VA: 0xCDCE90
	// RVA: 0x127CA24 Offset: 0x127CA24 VA: 0x127CA24
	public void .ctor() { }

	// RVA: 0x1280A94 Offset: 0x1280A94 VA: 0x1280A94 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCEA0 Offset: 0xCDCEA0 VA: 0xCDCEA0
	// RVA: 0x1280D50 Offset: 0x1280D50 VA: 0x1280D50 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCEB0 Offset: 0xCDCEB0 VA: 0xCDCEB0
	// RVA: 0x1280D58 Offset: 0x1280D58 VA: 0x1280D58 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCEC0 Offset: 0xCDCEC0 VA: 0xCDCEC0
	// RVA: 0x1280D60 Offset: 0x1280D60 VA: 0x1280D60 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCED0 Offset: 0xCDCED0 VA: 0xCDCED0
	// RVA: 0x1280D74 Offset: 0x1280D74 VA: 0x1280D74 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D44 Offset: 0xC45D44 VA: 0xC45D44
private sealed class QuestTree.<GetSpotInfo>c__AnonStorey3 // TypeDefIndex: 11243
{
	// Fields
	internal int spotId; // 0x10

	// Methods

	// RVA: 0x127CD24 Offset: 0x127CD24 VA: 0x127CD24
	public void .ctor() { }

	// RVA: 0x1280968 Offset: 0x1280968 VA: 0x1280968
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D54 Offset: 0xC45D54 VA: 0xC45D54
private sealed class QuestTree.<GetQuestInfo>c__AnonStorey4 // TypeDefIndex: 11244
{
	// Fields
	internal int questId; // 0x10

	// Methods

	// RVA: 0x127CDFC Offset: 0x127CDFC VA: 0x127CDFC
	public void .ctor() { }

	// RVA: 0x1280924 Offset: 0x1280924 VA: 0x1280924
	internal bool <>m__0(MapControl.QuestInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D64 Offset: 0xC45D64 VA: 0xC45D64
private sealed class QuestTree.<mfGetMapInfoByMapID>c__AnonStorey5 // TypeDefIndex: 11245
{
	// Fields
	internal int mapId; // 0x10

	// Methods

	// RVA: 0x127CF30 Offset: 0x127CF30 VA: 0x127CF30
	public void .ctor() { }

	// RVA: 0x128547C Offset: 0x128547C VA: 0x128547C
	internal bool <>m__0(MapControl.MapInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D74 Offset: 0xC45D74 VA: 0xC45D74
private sealed class QuestTree.<GetUserReachableMapList>c__AnonStorey6 // TypeDefIndex: 11246
{
	// Fields
	internal List<int> reachableMapIds; // 0x10

	// Methods

	// RVA: 0x127DB20 Offset: 0x127DB20 VA: 0x127DB20
	public void .ctor() { }

	// RVA: 0x12809AC Offset: 0x12809AC VA: 0x12809AC
	internal bool <>m__0(MapControl.MapInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D84 Offset: 0xC45D84 VA: 0xC45D84
private sealed class QuestTree.<GetWarID_ByQuestID>c__AnonStorey7 // TypeDefIndex: 11247
{
	// Fields
	internal int questId; // 0x10

	// Methods

	// RVA: 0x127E188 Offset: 0x127E188 VA: 0x127E188
	public void .ctor() { }

	// RVA: 0x1280A38 Offset: 0x1280A38 VA: 0x1280A38
	internal bool <>m__0(MapControl.QuestInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45D94 Offset: 0xC45D94 VA: 0xC45D94
private sealed class QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11248
{
	// Fields
	internal DataManager <dataManager>__0; // 0x10
	internal MapMaster <mapMaster>__0; // 0x18
	internal SpotMaster <spotMaster>__0; // 0x20
	internal QuestMaster <questMaster>__0; // 0x28
	internal QuestPhaseMaster <questPhaseMaster>__0; // 0x30
	internal EventMaster <eventMaster>__0; // 0x38
	internal EventDetailMaster <eventDetailMaster>__0; // 0x40
	internal EventStatusMaster <eventStatusMaster>__0; // 0x48
	internal EventStatusQuestMaster <eventStatusQuestMaster>__0; // 0x50
	internal SpotRoadMaster <spotRoadMaster>__0; // 0x58
	internal MapGimmickMaster <mapGimmickMaster>__0; // 0x60
	internal QuestPickupMaster <questPickupMaster>__0; // 0x68
	internal Dictionary<int, List<int>> <eventStatusQuestMismatchDictionary>__0; // 0x70
	internal WarEntity[] <warList>__0; // 0x78
	internal long <nowTime>__0; // 0x80
	internal int <warIdx>__1; // 0x88
	internal int <warCount>__1; // 0x8C
	internal int <warId>__2; // 0x90
	internal MapControl.WarInfo <warInfo>__2; // 0x98
	internal EventEntity <eventEnt>__3; // 0xA0
	internal EventDetailEntity <eventDetailEnt>__4; // 0xA8
	internal MapEntity[] <mapList>__2; // 0xB0
	internal int <mapIdx>__5; // 0xB8
	internal int <mapCount>__5; // 0xBC
	internal int <mapId>__6; // 0xC0
	internal MapControl.WarInfo <warInfo>__7; // 0xC8
	internal MapControl.MapInfo <mapInfo>__7; // 0xD0
	internal MapControl.SpotInfo <spotInfo>__7; // 0xD8
	internal WarEntity <warEnt>__7; // 0xE0
	internal UserQuestMaster <userQuestMaster>__7; // 0xE8
	internal int <mapInfoNow>__7; // 0xF0
	internal int <warInfoNow>__7; // 0xF4
	internal int <breakInterval>__7; // 0xF8
	internal int <questIdx>__8; // 0xFC
	internal int <questCount>__8; // 0x100
	internal QuestEntity <tmpQuestEnt>__9; // 0x108
	internal int <questId>__9; // 0x110
	internal UserQuestEntity <userQuestEnt>__9; // 0x118
	internal int <phaseCnt>__9; // 0x120
	internal bool <isQuestCleared>__9; // 0x124
	internal int <newSpotId>__9; // 0x128
	internal int <newMapId>__10; // 0x12C
	internal int <newWarId>__11; // 0x130
	internal MapControl.QuestInfo <questInfo>__9; // 0x138
	internal MapControl.QuestInfo.DispType <questDispType>__12; // 0x140
	internal List<int> <questMismatchList>__13; // 0x148
	internal QuestPhaseEntity[] <questPhaseList>__9; // 0x150
	internal Action endCallback; // 0x158
	internal QuestTree $this; // 0x160
	internal object $current; // 0x168
	internal bool $disposing; // 0x170
	internal int $PC; // 0x174
	private static Comparison<MapControl.WarInfo> <>f__am$cache0; // 0x0
	private QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1.<mfBaseTreeMakeWithOpenCheck>c__AnonStorey8 $locvar0; // 0x178
	private static Comparison<MapControl.QuestInfo> <>f__am$cache1; // 0x8

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDCEE0 Offset: 0xCDCEE0 VA: 0xCDCEE0
	// RVA: 0x127E900 Offset: 0x127E900 VA: 0x127E900
	public void .ctor() { }

	// RVA: 0x1280DDC Offset: 0x1280DDC VA: 0x1280DDC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCEF0 Offset: 0xCDCEF0 VA: 0xCDCEF0
	// RVA: 0x12828A8 Offset: 0x12828A8 VA: 0x12828A8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF00 Offset: 0xCDCF00 VA: 0xCDCF00
	// RVA: 0x12828B0 Offset: 0x12828B0 VA: 0x12828B0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF10 Offset: 0xCDCF10 VA: 0xCDCF10
	// RVA: 0x12828B8 Offset: 0x12828B8 VA: 0x12828B8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF20 Offset: 0xCDCF20 VA: 0xCDCF20
	// RVA: 0x12828CC Offset: 0x12828CC VA: 0x12828CC Slot: 6
	public void Reset() { }

	// RVA: 0x1282934 Offset: 0x1282934 VA: 0x1282934
	private static int <>m__0(MapControl.WarInfo a, MapControl.WarInfo b) { }

	// RVA: 0x12829A8 Offset: 0x12829A8 VA: 0x12829A8
	private static int <>m__1(MapControl.QuestInfo a, MapControl.QuestInfo b) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1.<mfBaseTreeMakeWithOpenCheck>c__AnonStorey8 // TypeDefIndex: 11249
{
	// Fields
	internal int spotInfoNow; // 0x10
	internal QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x12828A0 Offset: 0x12828A0 VA: 0x12828A0
	public void .ctor() { }

	// RVA: 0x1282A30 Offset: 0x1282A30 VA: 0x1282A30
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45DA4 Offset: 0xC45DA4 VA: 0xC45DA4
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11250
{
	// Fields
	internal DataManager <dataManager>__0; // 0x10
	internal MapMaster <mapMaster>__0; // 0x18
	internal SpotMaster <spotMaster>__0; // 0x20
	internal QuestMaster <questMaster>__0; // 0x28
	internal QuestPhaseMaster <questPhaseMaster>__0; // 0x30
	internal EventMaster <eventMaster>__0; // 0x38
	internal EventDetailMaster <eventDetailMaster>__0; // 0x40
	internal EventStatusMaster <eventStatusMaster>__0; // 0x48
	internal EventStatusQuestMaster <eventStatusQuestMaster>__0; // 0x50
	internal SpotRoadMaster <spotRoadMaster>__0; // 0x58
	internal MapGimmickMaster <mapGimmickMaster>__0; // 0x60
	internal QuestPickupMaster <questPickupMaster>__0; // 0x68
	internal Dictionary<int, List<int>> <eventStatusQuestMismatchDictionary>__0; // 0x70
	internal long <nowTime>__1; // 0x78
	internal int targetWarId; // 0x80
	internal WarEntity <warEntity>__1; // 0x88
	internal int <index>__1; // 0x90
	internal MapControl.WarInfo <warInfo>__1; // 0x98
	internal EventEntity <eventEnt>__2; // 0xA0
	internal EventDetailEntity <eventDetailEnt>__3; // 0xA8
	internal MapEntity[] <mapList>__1; // 0xB0
	internal int <mapIdx>__4; // 0xB8
	internal int <mapCount>__4; // 0xBC
	internal MapControl.MapInfo <mapInfo>__5; // 0xC0
	internal SpotEntity[] <spotList>__5; // 0xC8
	internal SpotRoadEntity[] <spotRoadList>__5; // 0xD0
	internal MapGimmickEntity[] <mapGimmickList>__5; // 0xD8
	internal MapControl.WarInfo <warInfo>__6; // 0xE0
	internal MapControl.MapInfo <mapInfo>__6; // 0xE8
	internal MapControl.SpotInfo <spotInfo>__6; // 0xF0
	internal WarEntity <warEnt>__6; // 0xF8
	internal UserQuestMaster <userQuestMaster>__6; // 0x100
	internal int <nowMapId>__6; // 0x108
	internal int <nowWarId>__6; // 0x10C
	internal int <breakInterval>__6; // 0x110
	internal int <cnt>__6; // 0x114
	internal List.Enumerator<MapControl.SpotInfo> $locvar0; // 0x118
	internal MapControl.SpotInfo <x>__7; // 0x130
	internal QuestEntity[] <questList>__6; // 0x138
	internal int <questIdx>__8; // 0x140
	internal int <questCount>__8; // 0x144
	internal QuestEntity <tmpQuestEnt>__9; // 0x148
	internal int <phaseCnt>__9; // 0x150
	internal bool <isQuestCleared>__9; // 0x154
	internal UserQuestEntity <userQuestEnt>__9; // 0x158
	internal int <newSpotId>__9; // 0x160
	internal int <newMapId>__10; // 0x164
	internal int <newWarId>__11; // 0x168
	internal MapControl.QuestInfo <questInfo>__12; // 0x170
	internal MapControl.QuestInfo.DispType <questDispType>__13; // 0x178
	internal List<int> <questMismatchList>__14; // 0x180
	internal QuestPhaseEntity[] <questPhaseList>__9; // 0x188
	internal Action endCallback; // 0x190
	internal QuestTree $this; // 0x198
	internal object $current; // 0x1A0
	internal bool $disposing; // 0x1A8
	internal int $PC; // 0x1AC
	private QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 $locvar1; // 0x1B0
	private QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyA $locvar2; // 0x1B8
	private static Comparison<MapControl.WarInfo> <>f__am$cache0; // 0x0
	private QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyE $locvar6; // 0x1C0
	private static Comparison<MapControl.QuestInfo> <>f__am$cache1; // 0x8

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDCF30 Offset: 0xCDCF30 VA: 0xCDCF30
	// RVA: 0x127E9B4 Offset: 0x127E9B4 VA: 0x127E9B4
	public void .ctor() { }

	// RVA: 0x1282A74 Offset: 0x1282A74 VA: 0x1282A74 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF40 Offset: 0xCDCF40 VA: 0xCDCF40
	// RVA: 0x1284F98 Offset: 0x1284F98 VA: 0x1284F98 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF50 Offset: 0xCDCF50 VA: 0xCDCF50
	// RVA: 0x1284FA0 Offset: 0x1284FA0 VA: 0x1284FA0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF60 Offset: 0xCDCF60 VA: 0xCDCF60
	// RVA: 0x1284FA8 Offset: 0x1284FA8 VA: 0x1284FA8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF70 Offset: 0xCDCF70 VA: 0xCDCF70
	// RVA: 0x1285020 Offset: 0x1285020 VA: 0x1285020 Slot: 6
	public void Reset() { }

	// RVA: 0x1285088 Offset: 0x1285088 VA: 0x1285088
	private static int <>m__0(MapControl.WarInfo a, MapControl.WarInfo b) { }

	// RVA: 0x12850FC Offset: 0x12850FC VA: 0x12850FC
	private static int <>m__1(MapControl.QuestInfo a, MapControl.QuestInfo b) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 // TypeDefIndex: 11251
{
	// Fields
	internal int targetWarId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x1284F68 Offset: 0x1284F68 VA: 0x1284F68
	public void .ctor() { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyA // TypeDefIndex: 11252
{
	// Fields
	internal int warId; // 0x10
	internal int mapId; // 0x14
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 <>f__ref$9; // 0x20

	// Methods

	// RVA: 0x1284F70 Offset: 0x1284F70 VA: 0x1284F70
	public void .ctor() { }

	// RVA: 0x1285184 Offset: 0x1285184 VA: 0x1285184
	internal bool <>m__0(WarEntity x) { }

	// RVA: 0x12851DC Offset: 0x12851DC VA: 0x12851DC
	internal bool <>m__1(MapControl.WarInfo x) { }

	// RVA: 0x1285220 Offset: 0x1285220 VA: 0x1285220
	internal bool <>m__2(MapControl.MapInfo x) { }

	// RVA: 0x1285264 Offset: 0x1285264 VA: 0x1285264
	internal bool <>m__3(MapControl.MapInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyB // TypeDefIndex: 11253
{
	// Fields
	internal int spotId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x1284F78 Offset: 0x1284F78 VA: 0x1284F78
	public void .ctor() { }

	// RVA: 0x12852A8 Offset: 0x12852A8 VA: 0x12852A8
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyC // TypeDefIndex: 11254
{
	// Fields
	internal int spotRoadId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x1284F80 Offset: 0x1284F80 VA: 0x1284F80
	public void .ctor() { }

	// RVA: 0x12852EC Offset: 0x12852EC VA: 0x12852EC
	internal bool <>m__0(MapControl.SpotRoadInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyD // TypeDefIndex: 11255
{
	// Fields
	internal int mapGimmickId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x1284F88 Offset: 0x1284F88 VA: 0x1284F88
	public void .ctor() { }

	// RVA: 0x1285330 Offset: 0x1285330 VA: 0x1285330
	internal bool <>m__0(MapControl.MapGimmickInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyE // TypeDefIndex: 11256
{
	// Fields
	internal List<int> spotInfoList; // 0x10
	internal int nowSpotId; // 0x18
	internal int questId; // 0x1C
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x20
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 <>f__ref$9; // 0x28

	// Methods

	// RVA: 0x1284F90 Offset: 0x1284F90 VA: 0x1284F90
	public void .ctor() { }

	// RVA: 0x1285374 Offset: 0x1285374 VA: 0x1285374
	internal bool <>m__0(QuestEntity x) { }

	// RVA: 0x12853F4 Offset: 0x12853F4 VA: 0x12853F4
	internal bool <>m__1(MapControl.SpotInfo x) { }

	// RVA: 0x1285438 Offset: 0x1285438 VA: 0x1285438
	internal bool <>m__2(MapControl.QuestInfo x) { }
}

// Namespace: 
public class ScrollConfirmDialog : BaseDialog // TypeDefIndex: 11257
{
	// Fields
	private static readonly int TITLE_WIDTH; // 0x0
	private static readonly float CANCEL_BUTTON_DEFAULT_POSITION_X; // 0x4
	private static readonly float CANCEL_BUTTON_CENTER_POSITION_X; // 0x8
	protected static readonly int MESSAGE_POS_WHEN_ITEM_ICON_DISPLAY; // 0xC
	protected static readonly int INTERVAL_OF_MESSAGE_AND_ITEM_ICON; // 0x10
	[SerializeField] // RVA: 0xC7DBF0 Offset: 0xC7DBF0 VA: 0xC7DBF0
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xC7DC00 Offset: 0xC7DC00 VA: 0xC7DC00
	protected UIScrollView scrollView; // 0x60
	[SerializeField] // RVA: 0xC7DC10 Offset: 0xC7DC10 VA: 0xC7DC10
	protected GameObject scrollLabelSpace; // 0x68
	[SerializeField] // RVA: 0xC7DC20 Offset: 0xC7DC20 VA: 0xC7DC20
	protected UILabel scrollLabel; // 0x70
	[SerializeField] // RVA: 0xC7DC30 Offset: 0xC7DC30 VA: 0xC7DC30
	protected UISprite descriptionSprite; // 0x78
	[SerializeField] // RVA: 0xC7DC40 Offset: 0xC7DC40 VA: 0xC7DC40
	protected UILabel messageLabel; // 0x80
	[SerializeField] // RVA: 0xC7DC50 Offset: 0xC7DC50 VA: 0xC7DC50
	protected GameObject buttonDecideObject; // 0x88
	[SerializeField] // RVA: 0xC7DC60 Offset: 0xC7DC60 VA: 0xC7DC60
	protected UILabel buttonDecideLabel; // 0x90
	[SerializeField] // RVA: 0xC7DC70 Offset: 0xC7DC70 VA: 0xC7DC70
	protected GameObject buttonCancelObject; // 0x98
	[SerializeField] // RVA: 0xC7DC80 Offset: 0xC7DC80 VA: 0xC7DC80
	protected UILabel buttonCancelLabel; // 0xA0
	[SerializeField] // RVA: 0xC7DC90 Offset: 0xC7DC90 VA: 0xC7DC90
	public QuestDialogIconImageComponent questDialogIconImageComponent; // 0xA8
	[SerializeField] // RVA: 0xC7DCA0 Offset: 0xC7DCA0 VA: 0xC7DCA0
	protected UILabel RearMessageLabel; // 0xB0
	protected ScrollConfirmDialog.ClickDelegate clickFunc; // 0xB8
	protected Action closeCallbackFunc; // 0xC0
	protected bool isButtonEnable; // 0xC8
	protected bool isDecideBtnSe; // 0xC9
	protected SeManager.SystemSeKind decideSe; // 0xCC

	// Properties
	public UILabel ScrollLabel { get; }
	public UILabel ButtonDecideLabel { get; }
	public UILabel ButtonCancelLabel { get; }
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x172AD88 Offset: 0x172AD88 VA: 0x172AD88
	public void .ctor() { }

	// RVA: 0x172ADF0 Offset: 0x172ADF0 VA: 0x172ADF0
	public UILabel get_ScrollLabel() { }

	// RVA: 0x172ADF8 Offset: 0x172ADF8 VA: 0x172ADF8
	public UILabel get_ButtonDecideLabel() { }

	// RVA: 0x172AE00 Offset: 0x172AE00 VA: 0x172AE00
	public UILabel get_ButtonCancelLabel() { }

	// RVA: 0x172AE08 Offset: 0x172AE08 VA: 0x172AE08
	public void Init() { }

	// RVA: 0x172B2F8 Offset: 0x172B2F8 VA: 0x172B2F8
	public void Open(string title, string scrollMessage, string footMessage, ScrollConfirmDialog.ClickDelegate func) { }

	// RVA: 0x172BA3C Offset: 0x172BA3C VA: 0x172BA3C
	public void Open(string title, string scrollMessage, string footMessage, string decideTxt, string cancleTxt, ScrollConfirmDialog.ClickDelegate func) { }

	// RVA: 0x172BDFC Offset: 0x172BDFC VA: 0x172BDFC
	public void OpenDecideDlg(string title, string scrollMessage, string footMessage, string decideTxt, string cancleTxt, ScrollConfirmDialog.ClickDelegate func, SeManager.SystemSeKind decideSe = 8, float offY = 0) { }

	// RVA: 0x172C1F8 Offset: 0x172C1F8 VA: 0x172C1F8
	public void OpenItemIconDlg(string title, string scrollMessage, QuestConsumeItemEntity itemConsumeEnt, string rearScrollMessage, string footMessage, string decideTxt, string cancleTxt, ScrollConfirmDialog.ClickDelegate func, SeManager.SystemSeKind decideSe = 8) { }

	// RVA: 0x172C814 Offset: 0x172C814 VA: 0x172C814
	public void OpenNoticeDlg(string title, string scrollMessage, string footMessage, string cancleTxt, ScrollConfirmDialog.ClickDelegate func, float offY = 0) { }

	// RVA: 0x172C924 Offset: 0x172C924 VA: 0x172C924
	public void OpenImageDlg(string title, string imageName, string footMessage, string decideTxt, string cancleTxt, ScrollConfirmDialog.ClickDelegate func, SeManager.SystemSeKind decideSe = 8) { }

	// RVA: 0x172CCD8 Offset: 0x172CCD8 VA: 0x172CCD8
	protected void EndOpen() { }

	// RVA: 0x172CCE4 Offset: 0x172CCE4 VA: 0x172CCE4
	public void Close() { }

	// RVA: 0x172CCEC Offset: 0x172CCEC VA: 0x172CCEC
	public void Close(Action callback) { }

	// RVA: 0x172CD78 Offset: 0x172CD78 VA: 0x172CD78
	protected void EndClose() { }

	// RVA: 0x172CDDC Offset: 0x172CDDC VA: 0x172CDDC
	public void OnClickDecide() { }

	// RVA: 0x172D15C Offset: 0x172D15C VA: 0x172D15C
	public void OnClickDecide2() { }

	// RVA: 0x172D27C Offset: 0x172D27C VA: 0x172D27C
	public void OnClickCancel() { }

	// RVA: 0x172D39C Offset: 0x172D39C VA: 0x172D39C
	public void OnClickClose() { }

	// RVA: 0x172B77C Offset: 0x172B77C VA: 0x172B77C
	private void ResetScrollPosition(float offY = 0) { }

	// RVA: 0x172B648 Offset: 0x172B648 VA: 0x172B648
	private void SetTitleText(string title) { }

	// RVA: 0x172B1A8 Offset: 0x172B1A8 VA: 0x172B1A8
	private void SetDecideButtonActive(bool isActive) { }

	// RVA: 0x172B258 Offset: 0x172B258 VA: 0x172B258
	private void SetCanelButtonPositionX(float x) { }

	// RVA: 0x172D430 Offset: 0x172D430 VA: 0x172D430 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x172D478 Offset: 0x172D478 VA: 0x172D478
	private static void .cctor() { }
}

// Namespace: 
public sealed class ScrollConfirmDialog.ClickDelegate : MulticastDelegate // TypeDefIndex: 11258
{
	// Methods

	// RVA: 0x172D4F8 Offset: 0x172D4F8 VA: 0x172D4F8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x172CF30 Offset: 0x172CF30 VA: 0x172CF30 Slot: 11
