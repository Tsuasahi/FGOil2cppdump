
	// RVA: 0x2B322E8 Offset: 0x2B322E8 VA: 0x2B322E8
	public void .ctor() { }

	[FreeFunctionAttribute] // RVA: 0xBF6E3C Offset: 0xBF6E3C VA: 0xBF6E3C
	// RVA: 0x2B32374 Offset: 0x2B32374 VA: 0x2B32374
	private static void Internal_CreateAnimationClip(AnimationClip self) { }

	// RVA: 0x2B323E0 Offset: 0x2B323E0 VA: 0x2B323E0
	public float get_length() { }

	[FreeFunctionAttribute] // RVA: 0xBF6E74 Offset: 0xBF6E74 VA: 0xBF6E74
	// RVA: 0x2B3244C Offset: 0x2B3244C VA: 0x2B3244C
	public void SetCurve(string relativePath, Type type, string propertyName, AnimationCurve curve) { }

	// RVA: 0x2B324E8 Offset: 0x2B324E8 VA: 0x2B324E8
	public WrapMode get_wrapMode() { }

	[NativeMethodAttribute] // RVA: 0xBF6EBC Offset: 0xBF6EBC VA: 0xBF6EBC
	// RVA: 0x2B32554 Offset: 0x2B32554 VA: 0x2B32554
	public bool get_legacy() { }

	// RVA: 0x2B325C0 Offset: 0x2B325C0 VA: 0x2B325C0
	public AnimationEvent[] get_events() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xBF6EF4 Offset: 0xBF6EF4 VA: 0xBF6EF4
	// RVA: 0x2B32684 Offset: 0x2B32684 VA: 0x2B32684
	internal Array GetEventsInternal() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xBF5A98 Offset: 0xBF5A98 VA: 0xBF5A98
[RequiredByNativeCodeAttribute] // RVA: 0xBF5A98 Offset: 0xBF5A98 VA: 0xBF5A98
[StaticAccessorAttribute] // RVA: 0xBF5A98 Offset: 0xBF5A98 VA: 0xBF5A98
[NativeHeaderAttribute] // RVA: 0xBF5A98 Offset: 0xBF5A98 VA: 0xBF5A98
public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 2679
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods

	// RVA: 0xD78040 Offset: 0xD78040 VA: 0xD78040
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x2B32F74 Offset: 0x2B32F74 VA: 0x2B32F74
	public static AnimationClipPlayable Create(PlayableGraph graph, AnimationClip clip) { }

	// RVA: 0x2B32FB0 Offset: 0x2B32FB0 VA: 0x2B32FB0
	private static PlayableHandle CreateHandle(PlayableGraph graph, AnimationClip clip) { }

	// RVA: 0xD78048 Offset: 0xD78048 VA: 0xD78048 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0x2B330B4 Offset: 0x2B330B4 VA: 0x2B330B4
	public static Playable op_Implicit(AnimationClipPlayable playable) { }

	// RVA: 0xD78054 Offset: 0xD78054 VA: 0xD78054 Slot: 5
	public bool Equals(AnimationClipPlayable other) { }

	// RVA: 0xD7805C Offset: 0xD7805C VA: 0xD7805C
	public AnimationClip GetAnimationClip() { }

	// RVA: 0xD78064 Offset: 0xD78064 VA: 0xD78064
	public bool GetApplyFootIK() { }

	// RVA: 0xD7806C Offset: 0xD7806C VA: 0xD7806C
	public bool GetApplyPlayableIK() { }

	// RVA: 0xD78074 Offset: 0xD78074 VA: 0xD78074
	internal bool GetRemoveStartOffset() { }

	[NativeThrowsAttribute] // RVA: 0xBF6F04 Offset: 0xBF6F04 VA: 0xBF6F04
	// RVA: 0x2B33078 Offset: 0x2B33078 VA: 0x2B33078
	private static bool CreateHandleInternal(PlayableGraph graph, AnimationClip clip, ref PlayableHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F14 Offset: 0xBF6F14 VA: 0xBF6F14
	// RVA: 0x2B3317C Offset: 0x2B3317C VA: 0x2B3317C
	private static AnimationClip GetAnimationClipInternal(ref PlayableHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F24 Offset: 0xBF6F24 VA: 0xBF6F24
	// RVA: 0x2B331EC Offset: 0x2B331EC VA: 0x2B331EC
	private static bool GetApplyFootIKInternal(ref PlayableHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F34 Offset: 0xBF6F34 VA: 0xBF6F34
	// RVA: 0x2B3325C Offset: 0x2B3325C VA: 0x2B3325C
	private static bool GetApplyPlayableIKInternal(ref PlayableHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F44 Offset: 0xBF6F44 VA: 0xBF6F44
	// RVA: 0x2B332CC Offset: 0x2B332CC VA: 0x2B332CC
	private static bool GetRemoveStartOffsetInternal(ref PlayableHandle handle) { }

	// RVA: 0x2B33338 Offset: 0x2B33338 VA: 0x2B33338
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, AnimationClip clip, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Experimental.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xBF5B30 Offset: 0xBF5B30 VA: 0xBF5B30
[NativeHeaderAttribute] // RVA: 0xBF5B30 Offset: 0xBF5B30 VA: 0xBF5B30
[NativeHeaderAttribute] // RVA: 0xBF5B30 Offset: 0xBF5B30 VA: 0xBF5B30
public struct AnimationHumanStream // TypeDefIndex: 2680
{
	// Fields
	private IntPtr stream; // 0x0
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xBF5BA0 Offset: 0xBF5BA0 VA: 0xBF5BA0
[StaticAccessorAttribute] // RVA: 0xBF5BA0 Offset: 0xBF5BA0 VA: 0xBF5BA0
[NativeHeaderAttribute] // RVA: 0xBF5BA0 Offset: 0xBF5BA0 VA: 0xBF5BA0
[RequiredByNativeCodeAttribute] // RVA: 0xBF5BA0 Offset: 0xBF5BA0 VA: 0xBF5BA0
[NativeHeaderAttribute] // RVA: 0xBF5BA0 Offset: 0xBF5BA0 VA: 0xBF5BA0
public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 2681
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD7807C Offset: 0xD7807C VA: 0xD7807C
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xD78084 Offset: 0xD78084 VA: 0xD78084 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD78090 Offset: 0xD78090 VA: 0xD78090 Slot: 5
	public bool Equals(AnimationLayerMixerPlayable other) { }

	// RVA: 0x2B33510 Offset: 0x2B33510 VA: 0x2B33510
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xBF5C5C Offset: 0xBF5C5C VA: 0xBF5C5C
[StaticAccessorAttribute] // RVA: 0xBF5C5C Offset: 0xBF5C5C VA: 0xBF5C5C
[NativeHeaderAttribute] // RVA: 0xBF5C5C Offset: 0xBF5C5C VA: 0xBF5C5C
[NativeHeaderAttribute] // RVA: 0xBF5C5C Offset: 0xBF5C5C VA: 0xBF5C5C
[NativeHeaderAttribute] // RVA: 0xBF5C5C Offset: 0xBF5C5C VA: 0xBF5C5C
public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2682
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD78098 Offset: 0xD78098 VA: 0xD78098
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x2B33670 Offset: 0x2B33670 VA: 0x2B33670
	public static AnimationMixerPlayable Create(PlayableGraph graph, int inputCount = 0, bool normalizeWeights = False) { }

	// RVA: 0x2B33728 Offset: 0x2B33728 VA: 0x2B33728
	private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount = 0, bool normalizeWeights = False) { }

	// RVA: 0xD780A0 Offset: 0xD780A0 VA: 0xD780A0 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD780AC Offset: 0xD780AC VA: 0xD780AC Slot: 5
	public bool Equals(AnimationMixerPlayable other) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F54 Offset: 0xBF6F54 VA: 0xBF6F54
	// RVA: 0x2B33834 Offset: 0x2B33834 VA: 0x2B33834
	private static bool CreateHandleInternal(PlayableGraph graph, int inputCount, bool normalizeWeights, ref PlayableHandle handle) { }

	// RVA: 0x2B339E8 Offset: 0x2B339E8 VA: 0x2B339E8
	private static void .cctor() { }

	// RVA: 0x2B3395C Offset: 0x2B3395C VA: 0x2B3395C
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, int inputCount, bool normalizeWeights, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xBF5D18 Offset: 0xBF5D18 VA: 0xBF5D18
[StaticAccessorAttribute] // RVA: 0xBF5D18 Offset: 0xBF5D18 VA: 0xBF5D18
[NativeHeaderAttribute] // RVA: 0xBF5D18 Offset: 0xBF5D18 VA: 0xBF5D18
internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2683
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD780B4 Offset: 0xD780B4 VA: 0xD780B4
	private void .ctor(PlayableHandle handle) { }

	// RVA: 0xD780BC Offset: 0xD780BC VA: 0xD780BC Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD780C8 Offset: 0xD780C8 VA: 0xD780C8 Slot: 5
	public bool Equals(AnimationMotionXToDeltaPlayable other) { }

	// RVA: 0x2B33BDC Offset: 0x2B33BDC VA: 0x2B33BDC
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xBF5D8C Offset: 0xBF5D8C VA: 0xBF5D8C
[NativeHeaderAttribute] // RVA: 0xBF5D8C Offset: 0xBF5D8C VA: 0xBF5D8C
[StaticAccessorAttribute] // RVA: 0xBF5D8C Offset: 0xBF5D8C VA: 0xBF5D8C
[NativeHeaderAttribute] // RVA: 0xBF5D8C Offset: 0xBF5D8C VA: 0xBF5D8C
[RequiredByNativeCodeAttribute] // RVA: 0xBF5D8C Offset: 0xBF5D8C VA: 0xBF5D8C
internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2684
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD780D0 Offset: 0xD780D0 VA: 0xD780D0
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xD780D8 Offset: 0xD780D8 VA: 0xD780D8 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD780E4 Offset: 0xD780E4 VA: 0xD780E4 Slot: 5
	public bool Equals(AnimationOffsetPlayable other) { }

	// RVA: 0x2B33E18 Offset: 0x2B33E18 VA: 0x2B33E18
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[StaticAccessorAttribute] // RVA: 0xBF5E48 Offset: 0xBF5E48 VA: 0xBF5E48
[NativeHeaderAttribute] // RVA: 0xBF5E48 Offset: 0xBF5E48 VA: 0xBF5E48
[NativeHeaderAttribute] // RVA: 0xBF5E48 Offset: 0xBF5E48 VA: 0xBF5E48
[ExtensionAttribute] // RVA: 0xBF5E48 Offset: 0xBF5E48 VA: 0xBF5E48
[NativeHeaderAttribute] // RVA: 0xBF5E48 Offset: 0xBF5E48 VA: 0xBF5E48
[NativeHeaderAttribute] // RVA: 0xBF5E48 Offset: 0xBF5E48 VA: 0xBF5E48
internal static class AnimationPlayableGraphExtensions // TypeDefIndex: 2685
{
	// Methods

	[ExtensionAttribute] // RVA: 0xBF6F64 Offset: 0xBF6F64 VA: 0xBF6F64
	// RVA: 0x2B33EB8 Offset: 0x2B33EB8 VA: 0x2B33EB8
	internal static void SyncUpdateAndTimeMode(PlayableGraph graph, Animator animator) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F74 Offset: 0xBF6F74 VA: 0xBF6F74
	// RVA: 0x2B33F54 Offset: 0x2B33F54 VA: 0x2B33F54
	internal static bool InternalCreateAnimationOutput(ref PlayableGraph graph, string name, out PlayableOutputHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F84 Offset: 0xBF6F84 VA: 0xBF6F84
	// RVA: 0x2B33EE0 Offset: 0x2B33EE0 VA: 0x2B33EE0
	internal static void InternalSyncUpdateAndTimeMode(ref PlayableGraph graph, Animator animator) { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
[RequiredByNativeCodeAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
[NativeHeaderAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
[NativeHeaderAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
[StaticAccessorAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
[NativeHeaderAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
[NativeHeaderAttribute] // RVA: 0xBF5F28 Offset: 0xBF5F28 VA: 0xBF5F28
public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2686
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Properties
	public static AnimationPlayableOutput Null { get; }

	// Methods

	// RVA: 0xD780EC Offset: 0xD780EC VA: 0xD780EC
	internal void .ctor(PlayableOutputHandle handle) { }

	// RVA: 0x2B34098 Offset: 0x2B34098 VA: 0x2B34098
	public static AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target) { }

	// RVA: 0x2B34104 Offset: 0x2B34104 VA: 0x2B34104
	public static AnimationPlayableOutput get_Null() { }

	// RVA: 0xD780F4 Offset: 0xD780F4 VA: 0xD780F4 Slot: 4
	public PlayableOutputHandle GetHandle() { }

	// RVA: 0xD78100 Offset: 0xD78100 VA: 0xD78100
	public Animator GetTarget() { }

	// RVA: 0xD78108 Offset: 0xD78108 VA: 0xD78108
	public void SetTarget(Animator value) { }

	[NativeThrowsAttribute] // RVA: 0xBF6F94 Offset: 0xBF6F94 VA: 0xBF6F94
	// RVA: 0x2B341A4 Offset: 0x2B341A4 VA: 0x2B341A4
	private static Animator InternalGetTarget(ref PlayableOutputHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xBF6FA4 Offset: 0xBF6FA4 VA: 0xBF6FA4
	// RVA: 0x2B34210 Offset: 0x2B34210 VA: 0x2B34210
	private static void InternalSetTarget(ref PlayableOutputHandle handle, Animator target) { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xBF602C Offset: 0xBF602C VA: 0xBF602C
[NativeHeaderAttribute] // RVA: 0xBF602C Offset: 0xBF602C VA: 0xBF602C
[NativeHeaderAttribute] // RVA: 0xBF602C Offset: 0xBF602C VA: 0xBF602C
[RequiredByNativeCodeAttribute] // RVA: 0xBF602C Offset: 0xBF602C VA: 0xBF602C
[StaticAccessorAttribute] // RVA: 0xBF602C Offset: 0xBF602C VA: 0xBF602C
internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2687
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationPosePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD78110 Offset: 0xD78110 VA: 0xD78110
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xD78118 Offset: 0xD78118 VA: 0xD78118 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD78124 Offset: 0xD78124 VA: 0xD78124 Slot: 5
	public bool Equals(AnimationPosePlayable other) { }

	// RVA: 0x2B34420 Offset: 0x2B34420 VA: 0x2B34420
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xBF60E8 Offset: 0xBF60E8 VA: 0xBF60E8
[NativeHeaderAttribute] // RVA: 0xBF60E8 Offset: 0xBF60E8 VA: 0xBF60E8
[StaticAccessorAttribute] // RVA: 0xBF60E8 Offset: 0xBF60E8 VA: 0xBF60E8
[RequiredByNativeCodeAttribute] // RVA: 0xBF60E8 Offset: 0xBF60E8 VA: 0xBF60E8
[NativeHeaderAttribute] // RVA: 0xBF60E8 Offset: 0xBF60E8 VA: 0xBF60E8
internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2688
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD7812C Offset: 0xD7812C VA: 0xD7812C
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xD78134 Offset: 0xD78134 VA: 0xD78134 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD78140 Offset: 0xD78140 VA: 0xD78140 Slot: 5
	public bool Equals(AnimationRemoveScalePlayable other) { }

	// RVA: 0x2B3465C Offset: 0x2B3465C VA: 0x2B3465C
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xBF61A4 Offset: 0xBF61A4 VA: 0xBF61A4
[NativeHeaderAttribute] // RVA: 0xBF61A4 Offset: 0xBF61A4 VA: 0xBF61A4
[RequiredByNativeCodeAttribute] // RVA: 0xBF61A4 Offset: 0xBF61A4 VA: 0xBF61A4
[StaticAccessorAttribute] // RVA: 0xBF61A4 Offset: 0xBF61A4 VA: 0xBF61A4
[NativeHeaderAttribute] // RVA: 0xBF61A4 Offset: 0xBF61A4 VA: 0xBF61A4
public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable<AnimationScriptPlayable>, IPlayable // TypeDefIndex: 2689
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationScriptPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xD78368 Offset: 0xD78368 VA: 0xD78368
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xD78370 Offset: 0xD78370 VA: 0xD78370 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xD7837C Offset: 0xD7837C VA: 0xD7837C Slot: 5
	public bool Equals(AnimationScriptPlayable other) { }

	// RVA: 0x2B38E28 Offset: 0x2B38E28 VA: 0x2B38E28
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xBF6260 Offset: 0xBF6260 VA: 0xBF6260
[RequiredByNativeCodeAttribute] // RVA: 0xBF6260 Offset: 0xBF6260 VA: 0xBF6260
[NativeHeaderAttribute] // RVA: 0xBF6260 Offset: 0xBF6260 VA: 0xBF6260
public struct AnimationStream // TypeDefIndex: 2690
{
	// Fields
	private uint m_AnimatorBindingsVersion; // 0x0
	private IntPtr constant; // 0x8
	private IntPtr input; // 0x10
	private IntPtr output; // 0x18
	private IntPtr workspace; // 0x20
	private IntPtr inputStreamAccessor; // 0x28
	private IntPtr animationHandleBinder; // 0x30
}

// Namespace: UnityEngine
public enum AvatarTarget // TypeDefIndex: 2691
{
	// Fields
	public int value__; // 0x0
	public const AvatarTarget Root = 0;
	public const AvatarTarget Body = 1;
	public const AvatarTarget LeftFoot = 2;
	public const AvatarTarget RightFoot = 3;
	public const AvatarTarget LeftHand = 4;
	public const AvatarTarget RightHand = 5;
}

// Namespace: UnityEngine
public enum AvatarIKGoal // TypeDefIndex: 2692
{
	// Fields
	public int value__; // 0x0
	public const AvatarIKGoal LeftFoot = 0;
	public const AvatarIKGoal RightFoot = 1;
	public const AvatarIKGoal LeftHand = 2;
	public const AvatarIKGoal RightHand = 3;
}

// Namespace: UnityEngine
internal enum StateInfoIndex // TypeDefIndex: 2693
{
	// Fields
	public int value__; // 0x0
	public const StateInfoIndex CurrentState = 0;
	public const StateInfoIndex NextState = 1;
	public const StateInfoIndex ExitState = 2;
	public const StateInfoIndex InterruptedState = 3;
}

// Namespace: UnityEngine
public enum AnimatorCullingMode // TypeDefIndex: 2694
{
	// Fields
	public int value__; // 0x0
	public const AnimatorCullingMode AlwaysAnimate = 0;
	public const AnimatorCullingMode CullUpdateTransforms = 1;
	public const AnimatorCullingMode CullCompletely = 2;
}

// Namespace: UnityEngine
public enum AnimatorUpdateMode // TypeDefIndex: 2695
{
	// Fields
	public int value__; // 0x0
	public const AnimatorUpdateMode Normal = 0;
	public const AnimatorUpdateMode AnimatePhysics = 1;
	public const AnimatorUpdateMode UnscaledTime = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF62D0 Offset: 0xBF62D0 VA: 0xBF62D0
[UsedByNativeCodeAttribute] // RVA: 0xBF62D0 Offset: 0xBF62D0 VA: 0xBF62D0
[NativeHeaderAttribute] // RVA: 0xBF62D0 Offset: 0xBF62D0 VA: 0xBF62D0
public struct AnimatorClipInfo // TypeDefIndex: 2696
{
	// Fields
	private int m_ClipInstanceID; // 0x0
	private float m_Weight; // 0x4
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF6340 Offset: 0xBF6340 VA: 0xBF6340
[RequiredByNativeCodeAttribute] // RVA: 0xBF6340 Offset: 0xBF6340 VA: 0xBF6340
public struct AnimatorStateInfo // TypeDefIndex: 2697
{
	// Fields
	private int m_Name; // 0x0
	private int m_Path; // 0x4
	private int m_FullPath; // 0x8
	private float m_NormalizedTime; // 0xC
	private float m_Length; // 0x10
	private float m_Speed; // 0x14
	private float m_SpeedMultiplier; // 0x18
	private int m_Tag; // 0x1C
	private int m_Loop; // 0x20

	// Properties
	public int fullPathHash { get; }
	public int shortNameHash { get; }
	public float normalizedTime { get; }
	public float length { get; }
	public int tagHash { get; }
	public bool loop { get; }

	// Methods

	// RVA: 0xD781C4 Offset: 0xD781C4 VA: 0xD781C4
	public bool IsName(string name) { }

	// RVA: 0xD78214 Offset: 0xD78214 VA: 0xD78214
	public int get_fullPathHash() { }

	// RVA: 0xD7821C Offset: 0xD7821C VA: 0xD7821C
	public int get_shortNameHash() { }

	// RVA: 0xD78224 Offset: 0xD78224 VA: 0xD78224
	public float get_normalizedTime() { }

	// RVA: 0xD7822C Offset: 0xD7822C VA: 0xD7822C
	public float get_length() { }

	// RVA: 0xD78234 Offset: 0xD78234 VA: 0xD78234
	public int get_tagHash() { }

	// RVA: 0xD7823C Offset: 0xD7823C VA: 0xD7823C
	public bool IsTag(string tag) { }

	// RVA: 0xD7826C Offset: 0xD7826C VA: 0xD7826C
	public bool get_loop() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF638C Offset: 0xBF638C VA: 0xBF638C
[RequiredByNativeCodeAttribute] // RVA: 0xBF638C Offset: 0xBF638C VA: 0xBF638C
public struct AnimatorTransitionInfo // TypeDefIndex: 2698
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBF6A80 Offset: 0xBF6A80 VA: 0xBF6A80
	private int m_FullPath; // 0x0
	[NativeNameAttribute] // RVA: 0xBF6AB8 Offset: 0xBF6AB8 VA: 0xBF6AB8
	private int m_UserName; // 0x4
	[NativeNameAttribute] // RVA: 0xBF6AF0 Offset: 0xBF6AF0 VA: 0xBF6AF0
	private int m_Name; // 0x8
	[NativeNameAttribute] // RVA: 0xBF6B28 Offset: 0xBF6B28 VA: 0xBF6B28
	private bool m_HasFixedDuration; // 0xC
	[NativeNameAttribute] // RVA: 0xBF6B60 Offset: 0xBF6B60 VA: 0xBF6B60
	private float m_Duration; // 0x10
	[NativeNameAttribute] // RVA: 0xBF6B98 Offset: 0xBF6B98 VA: 0xBF6B98
	private float m_NormalizedTime; // 0x14
	[NativeNameAttribute] // RVA: 0xBF6BD0 Offset: 0xBF6BD0 VA: 0xBF6BD0
	private bool m_AnyState; // 0x18
	[NativeNameAttribute] // RVA: 0xBF6C08 Offset: 0xBF6C08 VA: 0xBF6C08
	private int m_TransitionType; // 0x1C

	// Properties
	public int nameHash { get; }
	public int userNameHash { get; }
	public float normalizedTime { get; }

	// Methods

	// RVA: 0xD78318 Offset: 0xD78318 VA: 0xD78318
	public bool IsName(string name) { }

	// RVA: 0xD78320 Offset: 0xD78320 VA: 0xD78320
	public bool IsUserName(string name) { }

	// RVA: 0xD78350 Offset: 0xD78350 VA: 0xD78350
	public int get_nameHash() { }

	// RVA: 0xD78358 Offset: 0xD78358 VA: 0xD78358
	public int get_userNameHash() { }

	// RVA: 0xD78360 Offset: 0xD78360 VA: 0xD78360
	public float get_normalizedTime() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBF63D8 Offset: 0xBF63D8 VA: 0xBF63D8
public struct MatchTargetWeightMask // TypeDefIndex: 2699
{
	// Fields
	private Vector3 m_PositionXYZWeight; // 0x0
	private float m_RotationWeight; // 0xC

	// Methods

	// RVA: 0xD78458 Offset: 0xD78458 VA: 0xD78458
	public void .ctor(Vector3 positionXYZWeight, float rotationWeight) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xBF6410 Offset: 0xBF6410 VA: 0xBF6410
[NativeHeaderAttribute] // RVA: 0xBF6410 Offset: 0xBF6410 VA: 0xBF6410
[NativeHeaderAttribute] // RVA: 0xBF6410 Offset: 0xBF6410 VA: 0xBF6410
[NativeHeaderAttribute] // RVA: 0xBF6410 Offset: 0xBF6410 VA: 0xBF6410
public class Animator : Behaviour // TypeDefIndex: 2700
{
	// Properties
	public bool isHuman { get; }
	public float humanScale { get; }
	public Vector3 deltaPosition { get; }
	public Quaternion deltaRotation { get; }
	public Vector3 rootPosition { get; }
	public Quaternion rootRotation { get; }
	public bool applyRootMotion { get; set; }
	public AnimatorUpdateMode updateMode { set; }
	public float gravityWeight { get; }
	public Vector3 bodyPosition { get; set; }
	internal Vector3 bodyPositionInternal { get; set; }
	public Quaternion bodyRotation { get; set; }
	internal Quaternion bodyRotationInternal { get; set; }
	public bool stabilizeFeet { get; set; }
	public int layerCount { get; }
	public float feetPivotActive { get; set; }
	public float pivotWeight { get; }
	public Vector3 pivotPosition { get; }
	public bool isMatchingTarget { get; }
	public float speed { get; set; }
	public Vector3 targetPosition { get; }
	public Quaternion targetRotation { get; }
	public AnimatorCullingMode cullingMode { get; set; }
	public float playbackTime { get; set; }
	public float recorderStartTime { get; }
	public float recorderStopTime { get; }
	public bool hasBoundPlayables { get; }
	public bool layersAffectMassCenter { get; set; }
	public float leftFeetBottomHeight { get; }
	public float rightFeetBottomHeight { get; }
	public bool logWarnings { get; }

	// Methods

	// RVA: 0x2B356CC Offset: 0x2B356CC VA: 0x2B356CC
	public void .ctor() { }

	[NativeMethodAttribute] // RVA: 0xBF6FB4 Offset: 0xBF6FB4 VA: 0xBF6FB4
	// RVA: 0x2B356D4 Offset: 0x2B356D4 VA: 0x2B356D4
	public bool get_isHuman() { }

	// RVA: 0x2B35740 Offset: 0x2B35740 VA: 0x2B35740
	public float get_humanScale() { }

	// RVA: 0x2B357AC Offset: 0x2B357AC VA: 0x2B357AC
	public float GetFloat(int id) { }

	// RVA: 0x2B35824 Offset: 0x2B35824 VA: 0x2B35824
	public void SetFloat(int id, float value) { }

	// RVA: 0x2B358B4 Offset: 0x2B358B4 VA: 0x2B358B4
	public void SetFloat(int id, float value, float dampTime, float deltaTime) { }

	// RVA: 0x2B3595C Offset: 0x2B3595C VA: 0x2B3595C
	public bool GetBool(int id) { }

	// RVA: 0x2B359D4 Offset: 0x2B359D4 VA: 0x2B359D4
	public void SetBool(int id, bool value) { }

	// RVA: 0x2B35A60 Offset: 0x2B35A60 VA: 0x2B35A60
	public int GetInteger(int id) { }

	// RVA: 0x2B35AD8 Offset: 0x2B35AD8 VA: 0x2B35AD8
	public void SetInteger(string name, int value) { }

	// RVA: 0x2B35B60 Offset: 0x2B35B60 VA: 0x2B35B60
	public void SetInteger(int id, int value) { }

	// RVA: 0x2B35BE8 Offset: 0x2B35BE8 VA: 0x2B35BE8
	public void SetTrigger(string name) { }

	// RVA: 0x2B35C60 Offset: 0x2B35C60 VA: 0x2B35C60
	public void ResetTrigger(string name) { }

	// RVA: 0x2B35CD8 Offset: 0x2B35CD8 VA: 0x2B35CD8
	public bool IsParameterControlledByCurve(string name) { }

	// RVA: 0x2B35D50 Offset: 0x2B35D50 VA: 0x2B35D50
	public Vector3 get_deltaPosition() { }

	// RVA: 0x2B35DF4 Offset: 0x2B35DF4 VA: 0x2B35DF4
	public Quaternion get_deltaRotation() { }

	[NativeMethodAttribute] // RVA: 0xBF6FEC Offset: 0xBF6FEC VA: 0xBF6FEC
	// RVA: 0x2B35E94 Offset: 0x2B35E94 VA: 0x2B35E94
	public Vector3 get_rootPosition() { }

	[NativeMethodAttribute] // RVA: 0xBF7024 Offset: 0xBF7024 VA: 0xBF7024
	// RVA: 0x2B35F38 Offset: 0x2B35F38 VA: 0x2B35F38
	public Quaternion get_rootRotation() { }

	// RVA: 0x2B35FD8 Offset: 0x2B35FD8 VA: 0x2B35FD8
	public bool get_applyRootMotion() { }

	// RVA: 0x2B36044 Offset: 0x2B36044 VA: 0x2B36044
	public void set_applyRootMotion(bool value) { }

	// RVA: 0x2B360B8 Offset: 0x2B360B8 VA: 0x2B360B8
	public void set_updateMode(AnimatorUpdateMode value) { }

	// RVA: 0x2B3612C Offset: 0x2B3612C VA: 0x2B3612C
	public float get_gravityWeight() { }

	// RVA: 0x2B36198 Offset: 0x2B36198 VA: 0x2B36198
	public Vector3 get_bodyPosition() { }

	// RVA: 0x2B362A0 Offset: 0x2B362A0 VA: 0x2B362A0
	public void set_bodyPosition(Vector3 value) { }

	[NativeMethodAttribute] // RVA: 0xBF705C Offset: 0xBF705C VA: 0xBF705C
	// RVA: 0x2B36270 Offset: 0x2B36270 VA: 0x2B36270
	internal Vector3 get_bodyPositionInternal() { }

	[NativeMethodAttribute] // RVA: 0xBF7094 Offset: 0xBF7094 VA: 0xBF7094
	// RVA: 0x2B362F8 Offset: 0x2B362F8 VA: 0x2B362F8
	internal void set_bodyPositionInternal(Vector3 value) { }

	// RVA: 0x2B36408 Offset: 0x2B36408 VA: 0x2B36408
	public Quaternion get_bodyRotation() { }

	// RVA: 0x2B36474 Offset: 0x2B36474 VA: 0x2B36474
	public void set_bodyRotation(Quaternion value) { }

	[NativeMethodAttribute] // RVA: 0xBF70CC Offset: 0xBF70CC VA: 0xBF70CC
	// RVA: 0x2B36448 Offset: 0x2B36448 VA: 0x2B36448
	internal Quaternion get_bodyRotationInternal() { }

	[NativeMethodAttribute] // RVA: 0xBF7104 Offset: 0xBF7104 VA: 0xBF7104
	// RVA: 0x2B364D0 Offset: 0x2B364D0 VA: 0x2B364D0
	internal void set_bodyRotationInternal(Quaternion value) { }

	// RVA: 0x2B365E0 Offset: 0x2B365E0 VA: 0x2B365E0
	public Vector3 GetIKPosition(AvatarIKGoal goal) { }

	// RVA: 0x2B3662C Offset: 0x2B3662C VA: 0x2B3662C
	private Vector3 GetGoalPosition(AvatarIKGoal goal) { }

	// RVA: 0x2B366E0 Offset: 0x2B366E0 VA: 0x2B366E0
	public void SetIKPosition(AvatarIKGoal goal, Vector3 goalPosition) { }

	// RVA: 0x2B36740 Offset: 0x2B36740 VA: 0x2B36740
	private void SetGoalPosition(AvatarIKGoal goal, Vector3 goalPosition) { }

	// RVA: 0x2B367EC Offset: 0x2B367EC VA: 0x2B367EC
	public Quaternion GetIKRotation(AvatarIKGoal goal) { }

	// RVA: 0x2B36834 Offset: 0x2B36834 VA: 0x2B36834
	private Quaternion GetGoalRotation(AvatarIKGoal goal) { }

	// RVA: 0x2B368E4 Offset: 0x2B368E4 VA: 0x2B368E4
	public void SetIKRotation(AvatarIKGoal goal, Quaternion goalRotation) { }

	// RVA: 0x2B36948 Offset: 0x2B36948 VA: 0x2B36948
	private void SetGoalRotation(AvatarIKGoal goal, Quaternion goalRotation) { }

	// RVA: 0x2B369F4 Offset: 0x2B369F4 VA: 0x2B369F4
	public float GetIKPositionWeight(AvatarIKGoal goal) { }

	// RVA: 0x2B36A20 Offset: 0x2B36A20 VA: 0x2B36A20
	private float GetGoalWeightPosition(AvatarIKGoal goal) { }

	// RVA: 0x2B36A94 Offset: 0x2B36A94 VA: 0x2B36A94
	public void SetIKPositionWeight(AvatarIKGoal goal, float value) { }

	// RVA: 0x2B36AD0 Offset: 0x2B36AD0 VA: 0x2B36AD0
	private void SetGoalWeightPosition(AvatarIKGoal goal, float value) { }

	// RVA: 0x2B36B5C Offset: 0x2B36B5C VA: 0x2B36B5C
	public float GetIKRotationWeight(AvatarIKGoal goal) { }

	// RVA: 0x2B36B88 Offset: 0x2B36B88 VA: 0x2B36B88
	private float GetGoalWeightRotation(AvatarIKGoal goal) { }

	// RVA: 0x2B36BFC Offset: 0x2B36BFC VA: 0x2B36BFC
	public void SetIKRotationWeight(AvatarIKGoal goal, float value) { }

	// RVA: 0x2B36C38 Offset: 0x2B36C38 VA: 0x2B36C38
	private void SetGoalWeightRotation(AvatarIKGoal goal, float value) { }

	// RVA: 0x2B36CC4 Offset: 0x2B36CC4 VA: 0x2B36CC4
	public void SetLookAtPosition(Vector3 lookAtPosition) { }

	[NativeMethodAttribute] // RVA: 0xBF713C Offset: 0xBF713C VA: 0xBF713C
	// RVA: 0x2B36D1C Offset: 0x2B36D1C VA: 0x2B36D1C
	private void SetLookAtPositionInternal(Vector3 lookAtPosition) { }

	// RVA: 0x2B36DB8 Offset: 0x2B36DB8 VA: 0x2B36DB8
	public void SetLookAtWeight(float weight) { }

	// RVA: 0x2B36EA0 Offset: 0x2B36EA0 VA: 0x2B36EA0
	public void SetLookAtWeight(float weight, float bodyWeight) { }

	// RVA: 0x2B36EE8 Offset: 0x2B36EE8 VA: 0x2B36EE8
	public void SetLookAtWeight(float weight, float bodyWeight, float headWeight) { }

	// RVA: 0x2B36F3C Offset: 0x2B36F3C VA: 0x2B36F3C
	public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight) { }

	// RVA: 0x2B36F94 Offset: 0x2B36F94 VA: 0x2B36F94
	public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight) { }

	[NativeMethodAttribute] // RVA: 0xBF7174 Offset: 0xBF7174 VA: 0xBF7174
	// RVA: 0x2B36DFC Offset: 0x2B36DFC VA: 0x2B36DFC
	private void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight) { }

	// RVA: -1 Offset: -1
	private static T[] ConvertStateMachineBehaviour<T>(ScriptableObject[] rawObjects) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B209DC Offset: 0x2B209DC VA: 0x2B209DC
	|-Animator.ConvertStateMachineBehaviour<object>
	*/

	// RVA: -1 Offset: -1
	public T[] GetBehaviours<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B20B44 Offset: 0x2B20B44 VA: 0x2B20B44
	|-Animator.GetBehaviours<ScriptActionAdvPrefabActorGoNextState>
	|-Animator.GetBehaviours<object>
	*/

	[FreeFunctionAttribute] // RVA: 0xBF71AC Offset: 0xBF71AC VA: 0xBF71AC
	// RVA: 0x2B36FF8 Offset: 0x2B36FF8 VA: 0x2B36FF8
	internal ScriptableObject[] InternalGetBehaviours(Type type) { }

	// RVA: 0x2B3706C Offset: 0x2B3706C VA: 0x2B3706C
	public bool get_stabilizeFeet() { }

	// RVA: 0x2B370D8 Offset: 0x2B370D8 VA: 0x2B370D8
	public void set_stabilizeFeet(bool value) { }

	// RVA: 0x2B3714C Offset: 0x2B3714C VA: 0x2B3714C
	public int get_layerCount() { }

	// RVA: 0x2B371B8 Offset: 0x2B371B8 VA: 0x2B371B8
	public string GetLayerName(int layerIndex) { }

	// RVA: 0x2B3722C Offset: 0x2B3722C VA: 0x2B3722C
	public float GetLayerWeight(int layerIndex) { }

	// RVA: 0x2B372A0 Offset: 0x2B372A0 VA: 0x2B372A0
	public void SetLayerWeight(int layerIndex, float weight) { }

	// RVA: 0x2B3732C Offset: 0x2B3732C VA: 0x2B3732C
	private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, out AnimatorStateInfo info) { }

	// RVA: 0x2B373B8 Offset: 0x2B373B8 VA: 0x2B373B8
	public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex) { }

	// RVA: 0x2B3740C Offset: 0x2B3740C VA: 0x2B3740C
	public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex) { }

	// RVA: 0x2B37460 Offset: 0x2B37460 VA: 0x2B37460
	private void GetAnimatorTransitionInfo(int layerIndex, out AnimatorTransitionInfo info) { }

	// RVA: 0x2B374E4 Offset: 0x2B374E4 VA: 0x2B374E4
	public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex) { }

	[FreeFunctionAttribute] // RVA: 0xBF7200 Offset: 0xBF7200 VA: 0xBF7200
	// RVA: 0x2B37520 Offset: 0x2B37520 VA: 0x2B37520
	public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex) { }

	// RVA: 0x2B37594 Offset: 0x2B37594 VA: 0x2B37594
	public bool IsInTransition(int layerIndex) { }

	// RVA: 0x2B37608 Offset: 0x2B37608 VA: 0x2B37608
	public float get_feetPivotActive() { }

	// RVA: 0x2B37674 Offset: 0x2B37674 VA: 0x2B37674
	public void set_feetPivotActive(float value) { }

	// RVA: 0x2B376E8 Offset: 0x2B376E8 VA: 0x2B376E8
	public float get_pivotWeight() { }

	// RVA: 0x2B37754 Offset: 0x2B37754 VA: 0x2B37754
	public Vector3 get_pivotPosition() { }

	// RVA: 0x2B377F8 Offset: 0x2B377F8 VA: 0x2B377F8
	private void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, int targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime) { }

	// RVA: 0x2B3790C Offset: 0x2B3790C VA: 0x2B3790C
	public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime) { }

	// RVA: 0x2B37930 Offset: 0x2B37930 VA: 0x2B37930
	public void InterruptMatchTarget(bool completeMatch) { }

	[NativeMethodAttribute] // RVA: 0xBF7254 Offset: 0xBF7254 VA: 0xBF7254
	// RVA: 0x2B379A4 Offset: 0x2B379A4 VA: 0x2B379A4
	public bool get_isMatchingTarget() { }

	// RVA: 0x2B37A10 Offset: 0x2B37A10 VA: 0x2B37A10
	public float get_speed() { }

	// RVA: 0x2B37A7C Offset: 0x2B37A7C VA: 0x2B37A7C
	public void set_speed(float value) { }

	// RVA: 0x2B37AF0 Offset: 0x2B37AF0 VA: 0x2B37AF0
	public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset) { }

	// RVA: 0x2B37B40 Offset: 0x2B37B40 VA: 0x2B37B40
	public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime) { }

	[FreeFunctionAttribute] // RVA: 0xBF728C Offset: 0xBF728C VA: 0xBF728C
	// RVA: 0x2B37C08 Offset: 0x2B37C08 VA: 0x2B37C08
	public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime) { }

	// RVA: 0x2B37CAC Offset: 0x2B37CAC VA: 0x2B37CAC
	public void Play(string stateName, int layer, float normalizedTime) { }

	[FreeFunctionAttribute] // RVA: 0xBF72E0 Offset: 0xBF72E0 VA: 0xBF72E0
	// RVA: 0x2B37CF0 Offset: 0x2B37CF0 VA: 0x2B37CF0
	public void Play(int stateNameHash, int layer, float normalizedTime) { }

	// RVA: 0x2B37D7C Offset: 0x2B37D7C VA: 0x2B37D7C
	public void SetTarget(AvatarTarget targetIndex, float targetNormalizedTime) { }

	// RVA: 0x2B37E08 Offset: 0x2B37E08 VA: 0x2B37E08
	public Vector3 get_targetPosition() { }

	// RVA: 0x2B37EAC Offset: 0x2B37EAC VA: 0x2B37EAC
	public Quaternion get_targetRotation() { }

	// RVA: 0x2B37F4C Offset: 0x2B37F4C VA: 0x2B37F4C
	public Transform GetBoneTransform(HumanBodyBones humanBoneId) { }

	[NativeMethodAttribute] // RVA: 0xBF7334 Offset: 0xBF7334 VA: 0xBF7334
	// RVA: 0x2B380BC Offset: 0x2B380BC VA: 0x2B380BC
	internal Transform GetBoneTransformInternal(int humanBoneId) { }

	// RVA: 0x2B38130 Offset: 0x2B38130 VA: 0x2B38130
	public AnimatorCullingMode get_cullingMode() { }

	// RVA: 0x2B3819C Offset: 0x2B3819C VA: 0x2B3819C
	public void set_cullingMode(AnimatorCullingMode value) { }

	// RVA: 0x2B38210 Offset: 0x2B38210 VA: 0x2B38210
	public void StartPlayback() { }

	// RVA: 0x2B3827C Offset: 0x2B3827C VA: 0x2B3827C
	public void StopPlayback() { }

	// RVA: 0x2B382E8 Offset: 0x2B382E8 VA: 0x2B382E8
	public float get_playbackTime() { }

	// RVA: 0x2B38354 Offset: 0x2B38354 VA: 0x2B38354
	public void set_playbackTime(float value) { }

	// RVA: 0x2B383C8 Offset: 0x2B383C8 VA: 0x2B383C8
	public void StartRecording(int frameCount) { }

	// RVA: 0x2B3843C Offset: 0x2B3843C VA: 0x2B3843C
	public void StopRecording() { }

	// RVA: 0x2B384A8 Offset: 0x2B384A8 VA: 0x2B384A8
	public float get_recorderStartTime() { }

	// RVA: 0x2B384AC Offset: 0x2B384AC VA: 0x2B384AC
	private float GetRecorderStartTime() { }

	// RVA: 0x2B38518 Offset: 0x2B38518 VA: 0x2B38518
	public float get_recorderStopTime() { }

	// RVA: 0x2B3851C Offset: 0x2B3851C VA: 0x2B3851C
	private float GetRecorderStopTime() { }

	[NativeMethodAttribute] // RVA: 0xBF736C Offset: 0xBF736C VA: 0xBF736C
	// RVA: 0x2B38588 Offset: 0x2B38588 VA: 0x2B38588
	public bool get_hasBoundPlayables() { }

	[NativeMethodAttribute] // RVA: 0xBF73A4 Offset: 0xBF73A4 VA: 0xBF73A4
	// RVA: 0x2B37B9C Offset: 0x2B37B9C VA: 0x2B37B9C
	public static int StringToHash(string name) { }

	// RVA: 0x2B361DC Offset: 0x2B361DC VA: 0x2B361DC
	private void CheckIfInIKPass() { }

	// RVA: 0x2B38660 Offset: 0x2B38660 VA: 0x2B38660
	private bool IsInIKPass() { }

	[FreeFunctionAttribute] // RVA: 0xBF73F8 Offset: 0xBF73F8 VA: 0xBF73F8
	// RVA: 0x2B35828 Offset: 0x2B35828 VA: 0x2B35828
	private void SetFloatID(int id, float value) { }

	[FreeFunctionAttribute] // RVA: 0xBF744C Offset: 0xBF744C VA: 0xBF744C
	// RVA: 0x2B357B0 Offset: 0x2B357B0 VA: 0x2B357B0
	private float GetFloatID(int id) { }

	[FreeFunctionAttribute] // RVA: 0xBF74A0 Offset: 0xBF74A0 VA: 0xBF74A0
	// RVA: 0x2B359DC Offset: 0x2B359DC VA: 0x2B359DC
	private void SetBoolID(int id, bool value) { }

	[FreeFunctionAttribute] // RVA: 0xBF74F4 Offset: 0xBF74F4 VA: 0xBF74F4
	// RVA: 0x2B35960 Offset: 0x2B35960 VA: 0x2B35960
	private bool GetBoolID(int id) { }

	[FreeFunctionAttribute] // RVA: 0xBF7548 Offset: 0xBF7548 VA: 0xBF7548
	// RVA: 0x2B35ADC Offset: 0x2B35ADC VA: 0x2B35ADC
	private void SetIntegerString(string name, int value) { }

	[FreeFunctionAttribute] // RVA: 0xBF759C Offset: 0xBF759C VA: 0xBF759C
	// RVA: 0x2B35B64 Offset: 0x2B35B64 VA: 0x2B35B64
	private void SetIntegerID(int id, int value) { }

	[FreeFunctionAttribute] // RVA: 0xBF75F0 Offset: 0xBF75F0 VA: 0xBF75F0
	// RVA: 0x2B35A64 Offset: 0x2B35A64 VA: 0x2B35A64
	private int GetIntegerID(int id) { }

	[FreeFunctionAttribute] // RVA: 0xBF7644 Offset: 0xBF7644 VA: 0xBF7644
	// RVA: 0x2B35BEC Offset: 0x2B35BEC VA: 0x2B35BEC
	private void SetTriggerString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xBF7698 Offset: 0xBF7698 VA: 0xBF7698
	// RVA: 0x2B35C64 Offset: 0x2B35C64 VA: 0x2B35C64
	private void ResetTriggerString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xBF76EC Offset: 0xBF76EC VA: 0xBF76EC
	// RVA: 0x2B35CDC Offset: 0x2B35CDC VA: 0x2B35CDC
	private bool IsParameterControlledByCurveString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xBF7740 Offset: 0xBF7740 VA: 0xBF7740
	// RVA: 0x2B358B8 Offset: 0x2B358B8 VA: 0x2B358B8
	private void SetFloatIDDamp(int id, float value, float dampTime, float deltaTime) { }

