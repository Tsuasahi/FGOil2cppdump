
	// RVA: 0xBC0CAC Offset: 0xBC0CAC VA: 0xBC0CAC Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0CB8 Offset: 0xBC0CB8 VA: 0xBC0CB8 Slot: 5
	public bool Equals(AnimationLayerMixerPlayable other) { }

	// RVA: 0x13234A0 Offset: 0x13234A0 VA: 0x13234A0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xC61D84 Offset: 0xC61D84 VA: 0xC61D84
[StaticAccessorAttribute] // RVA: 0xC61D84 Offset: 0xC61D84 VA: 0xC61D84
[NativeHeaderAttribute] // RVA: 0xC61D84 Offset: 0xC61D84 VA: 0xC61D84
[NativeHeaderAttribute] // RVA: 0xC61D84 Offset: 0xC61D84 VA: 0xC61D84
[NativeHeaderAttribute] // RVA: 0xC61D84 Offset: 0xC61D84 VA: 0xC61D84
public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2682
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMixerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0CC0 Offset: 0xBC0CC0 VA: 0xBC0CC0
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0x1323600 Offset: 0x1323600 VA: 0x1323600
	public static AnimationMixerPlayable Create(PlayableGraph graph, int inputCount = 0, bool normalizeWeights = False) { }

	// RVA: 0x13236B8 Offset: 0x13236B8 VA: 0x13236B8
	private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount = 0, bool normalizeWeights = False) { }

	// RVA: 0xBC0CC8 Offset: 0xBC0CC8 VA: 0xBC0CC8 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0CD4 Offset: 0xBC0CD4 VA: 0xBC0CD4 Slot: 5
	public bool Equals(AnimationMixerPlayable other) { }

	[NativeThrowsAttribute] // RVA: 0xC6307C Offset: 0xC6307C VA: 0xC6307C
	// RVA: 0x13237C4 Offset: 0x13237C4 VA: 0x13237C4
	private static bool CreateHandleInternal(PlayableGraph graph, int inputCount, bool normalizeWeights, ref PlayableHandle handle) { }

	// RVA: 0x1323978 Offset: 0x1323978 VA: 0x1323978
	private static void .cctor() { }

	// RVA: 0x13238EC Offset: 0x13238EC VA: 0x13238EC
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, int inputCount, bool normalizeWeights, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xC61E40 Offset: 0xC61E40 VA: 0xC61E40
[StaticAccessorAttribute] // RVA: 0xC61E40 Offset: 0xC61E40 VA: 0xC61E40
[NativeHeaderAttribute] // RVA: 0xC61E40 Offset: 0xC61E40 VA: 0xC61E40
internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2683
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0CDC Offset: 0xBC0CDC VA: 0xBC0CDC
	private void .ctor(PlayableHandle handle) { }

	// RVA: 0xBC0CE4 Offset: 0xBC0CE4 VA: 0xBC0CE4 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0CF0 Offset: 0xBC0CF0 VA: 0xBC0CF0 Slot: 5
	public bool Equals(AnimationMotionXToDeltaPlayable other) { }

	// RVA: 0x1323B6C Offset: 0x1323B6C VA: 0x1323B6C
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xC61EB4 Offset: 0xC61EB4 VA: 0xC61EB4
[NativeHeaderAttribute] // RVA: 0xC61EB4 Offset: 0xC61EB4 VA: 0xC61EB4
[StaticAccessorAttribute] // RVA: 0xC61EB4 Offset: 0xC61EB4 VA: 0xC61EB4
[NativeHeaderAttribute] // RVA: 0xC61EB4 Offset: 0xC61EB4 VA: 0xC61EB4
[RequiredByNativeCodeAttribute] // RVA: 0xC61EB4 Offset: 0xC61EB4 VA: 0xC61EB4
internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2684
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0CF8 Offset: 0xBC0CF8 VA: 0xBC0CF8
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xBC0D00 Offset: 0xBC0D00 VA: 0xBC0D00 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0D0C Offset: 0xBC0D0C VA: 0xBC0D0C Slot: 5
	public bool Equals(AnimationOffsetPlayable other) { }

	// RVA: 0x1323DA8 Offset: 0x1323DA8 VA: 0x1323DA8
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[StaticAccessorAttribute] // RVA: 0xC61F70 Offset: 0xC61F70 VA: 0xC61F70
[NativeHeaderAttribute] // RVA: 0xC61F70 Offset: 0xC61F70 VA: 0xC61F70
[NativeHeaderAttribute] // RVA: 0xC61F70 Offset: 0xC61F70 VA: 0xC61F70
[ExtensionAttribute] // RVA: 0xC61F70 Offset: 0xC61F70 VA: 0xC61F70
[NativeHeaderAttribute] // RVA: 0xC61F70 Offset: 0xC61F70 VA: 0xC61F70
[NativeHeaderAttribute] // RVA: 0xC61F70 Offset: 0xC61F70 VA: 0xC61F70
internal static class AnimationPlayableGraphExtensions // TypeDefIndex: 2685
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC6308C Offset: 0xC6308C VA: 0xC6308C
	// RVA: 0x1323E48 Offset: 0x1323E48 VA: 0x1323E48
	internal static void SyncUpdateAndTimeMode(PlayableGraph graph, Animator animator) { }

	[NativeThrowsAttribute] // RVA: 0xC6309C Offset: 0xC6309C VA: 0xC6309C
	// RVA: 0x1323EE4 Offset: 0x1323EE4 VA: 0x1323EE4
	internal static bool InternalCreateAnimationOutput(ref PlayableGraph graph, string name, out PlayableOutputHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xC630AC Offset: 0xC630AC VA: 0xC630AC
	// RVA: 0x1323E70 Offset: 0x1323E70 VA: 0x1323E70
	internal static void InternalSyncUpdateAndTimeMode(ref PlayableGraph graph, Animator animator) { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
[RequiredByNativeCodeAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
[NativeHeaderAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
[NativeHeaderAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
[StaticAccessorAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
[NativeHeaderAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
[NativeHeaderAttribute] // RVA: 0xC62050 Offset: 0xC62050 VA: 0xC62050
public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2686
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Properties
	public static AnimationPlayableOutput Null { get; }

	// Methods

	// RVA: 0xBC0D14 Offset: 0xBC0D14 VA: 0xBC0D14
	internal void .ctor(PlayableOutputHandle handle) { }

	// RVA: 0x1324028 Offset: 0x1324028 VA: 0x1324028
	public static AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target) { }

	// RVA: 0x1324094 Offset: 0x1324094 VA: 0x1324094
	public static AnimationPlayableOutput get_Null() { }

	// RVA: 0xBC0D1C Offset: 0xBC0D1C VA: 0xBC0D1C Slot: 4
	public PlayableOutputHandle GetHandle() { }

	// RVA: 0xBC0D28 Offset: 0xBC0D28 VA: 0xBC0D28
	public Animator GetTarget() { }

	// RVA: 0xBC0D30 Offset: 0xBC0D30 VA: 0xBC0D30
	public void SetTarget(Animator value) { }

	[NativeThrowsAttribute] // RVA: 0xC630BC Offset: 0xC630BC VA: 0xC630BC
	// RVA: 0x1324134 Offset: 0x1324134 VA: 0x1324134
	private static Animator InternalGetTarget(ref PlayableOutputHandle handle) { }

	[NativeThrowsAttribute] // RVA: 0xC630CC Offset: 0xC630CC VA: 0xC630CC
	// RVA: 0x13241A0 Offset: 0x13241A0 VA: 0x13241A0
	private static void InternalSetTarget(ref PlayableOutputHandle handle, Animator target) { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xC62154 Offset: 0xC62154 VA: 0xC62154
[NativeHeaderAttribute] // RVA: 0xC62154 Offset: 0xC62154 VA: 0xC62154
[NativeHeaderAttribute] // RVA: 0xC62154 Offset: 0xC62154 VA: 0xC62154
[RequiredByNativeCodeAttribute] // RVA: 0xC62154 Offset: 0xC62154 VA: 0xC62154
[StaticAccessorAttribute] // RVA: 0xC62154 Offset: 0xC62154 VA: 0xC62154
internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2687
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationPosePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0D38 Offset: 0xBC0D38 VA: 0xBC0D38
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xBC0D40 Offset: 0xBC0D40 VA: 0xBC0D40 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0D4C Offset: 0xBC0D4C VA: 0xBC0D4C Slot: 5
	public bool Equals(AnimationPosePlayable other) { }

	// RVA: 0x13243B0 Offset: 0x13243B0 VA: 0x13243B0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[NativeHeaderAttribute] // RVA: 0xC62210 Offset: 0xC62210 VA: 0xC62210
[NativeHeaderAttribute] // RVA: 0xC62210 Offset: 0xC62210 VA: 0xC62210
[StaticAccessorAttribute] // RVA: 0xC62210 Offset: 0xC62210 VA: 0xC62210
[RequiredByNativeCodeAttribute] // RVA: 0xC62210 Offset: 0xC62210 VA: 0xC62210
[NativeHeaderAttribute] // RVA: 0xC62210 Offset: 0xC62210 VA: 0xC62210
internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2688
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0D54 Offset: 0xBC0D54 VA: 0xBC0D54
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xBC0D5C Offset: 0xBC0D5C VA: 0xBC0D5C Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0D68 Offset: 0xBC0D68 VA: 0xBC0D68 Slot: 5
	public bool Equals(AnimationRemoveScalePlayable other) { }

	// RVA: 0x13245EC Offset: 0x13245EC VA: 0x13245EC
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xC622CC Offset: 0xC622CC VA: 0xC622CC
[NativeHeaderAttribute] // RVA: 0xC622CC Offset: 0xC622CC VA: 0xC622CC
[RequiredByNativeCodeAttribute] // RVA: 0xC622CC Offset: 0xC622CC VA: 0xC622CC
[StaticAccessorAttribute] // RVA: 0xC622CC Offset: 0xC622CC VA: 0xC622CC
[NativeHeaderAttribute] // RVA: 0xC622CC Offset: 0xC622CC VA: 0xC622CC
public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable<AnimationScriptPlayable>, IPlayable // TypeDefIndex: 2689
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationScriptPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0F90 Offset: 0xBC0F90 VA: 0xBC0F90
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xBC0F98 Offset: 0xBC0F98 VA: 0xBC0F98 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0FA4 Offset: 0xBC0FA4 VA: 0xBC0FA4 Slot: 5
	public bool Equals(AnimationScriptPlayable other) { }

	// RVA: 0x1328DB8 Offset: 0x1328DB8 VA: 0x1328DB8
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Animations
[NativeHeaderAttribute] // RVA: 0xC62388 Offset: 0xC62388 VA: 0xC62388
[RequiredByNativeCodeAttribute] // RVA: 0xC62388 Offset: 0xC62388 VA: 0xC62388
[NativeHeaderAttribute] // RVA: 0xC62388 Offset: 0xC62388 VA: 0xC62388
public struct AnimationStream // TypeDefIndex: 2690
{
	// Fields
	private uint m_AnimatorBindingsVersion; // 0x0
	private IntPtr constant; // 0x8
	private IntPtr input; // 0x10
	private IntPtr output; // 0x18
	private IntPtr workspace; // 0x20
	private IntPtr inputStreamAccessor; // 0x28
	private IntPtr animationHandleBinder; // 0x30
}

// Namespace: UnityEngine
public enum AvatarTarget // TypeDefIndex: 2691
{
	// Fields
	public int value__; // 0x0
	public const AvatarTarget Root = 0;
	public const AvatarTarget Body = 1;
	public const AvatarTarget LeftFoot = 2;
	public const AvatarTarget RightFoot = 3;
	public const AvatarTarget LeftHand = 4;
	public const AvatarTarget RightHand = 5;
}

// Namespace: UnityEngine
public enum AvatarIKGoal // TypeDefIndex: 2692
{
	// Fields
	public int value__; // 0x0
	public const AvatarIKGoal LeftFoot = 0;
	public const AvatarIKGoal RightFoot = 1;
	public const AvatarIKGoal LeftHand = 2;
	public const AvatarIKGoal RightHand = 3;
}

// Namespace: UnityEngine
internal enum StateInfoIndex // TypeDefIndex: 2693
{
	// Fields
	public int value__; // 0x0
	public const StateInfoIndex CurrentState = 0;
	public const StateInfoIndex NextState = 1;
	public const StateInfoIndex ExitState = 2;
	public const StateInfoIndex InterruptedState = 3;
}

// Namespace: UnityEngine
public enum AnimatorCullingMode // TypeDefIndex: 2694
{
	// Fields
	public int value__; // 0x0
	public const AnimatorCullingMode AlwaysAnimate = 0;
	public const AnimatorCullingMode CullUpdateTransforms = 1;
	public const AnimatorCullingMode CullCompletely = 2;
}

// Namespace: UnityEngine
public enum AnimatorUpdateMode // TypeDefIndex: 2695
{
	// Fields
	public int value__; // 0x0
	public const AnimatorUpdateMode Normal = 0;
	public const AnimatorUpdateMode AnimatePhysics = 1;
	public const AnimatorUpdateMode UnscaledTime = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC623F8 Offset: 0xC623F8 VA: 0xC623F8
[UsedByNativeCodeAttribute] // RVA: 0xC623F8 Offset: 0xC623F8 VA: 0xC623F8
[NativeHeaderAttribute] // RVA: 0xC623F8 Offset: 0xC623F8 VA: 0xC623F8
public struct AnimatorClipInfo // TypeDefIndex: 2696
{
	// Fields
	private int m_ClipInstanceID; // 0x0
	private float m_Weight; // 0x4
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC62468 Offset: 0xC62468 VA: 0xC62468
[RequiredByNativeCodeAttribute] // RVA: 0xC62468 Offset: 0xC62468 VA: 0xC62468
public struct AnimatorStateInfo // TypeDefIndex: 2697
{
	// Fields
	private int m_Name; // 0x0
	private int m_Path; // 0x4
	private int m_FullPath; // 0x8
	private float m_NormalizedTime; // 0xC
	private float m_Length; // 0x10
	private float m_Speed; // 0x14
	private float m_SpeedMultiplier; // 0x18
	private int m_Tag; // 0x1C
	private int m_Loop; // 0x20

	// Properties
	public int fullPathHash { get; }
	public int shortNameHash { get; }
	public float normalizedTime { get; }
	public float length { get; }
	public int tagHash { get; }
	public bool loop { get; }

	// Methods

	// RVA: 0xBC0DEC Offset: 0xBC0DEC VA: 0xBC0DEC
	public bool IsName(string name) { }

	// RVA: 0xBC0E3C Offset: 0xBC0E3C VA: 0xBC0E3C
	public int get_fullPathHash() { }

	// RVA: 0xBC0E44 Offset: 0xBC0E44 VA: 0xBC0E44
	public int get_shortNameHash() { }

	// RVA: 0xBC0E4C Offset: 0xBC0E4C VA: 0xBC0E4C
	public float get_normalizedTime() { }

	// RVA: 0xBC0E54 Offset: 0xBC0E54 VA: 0xBC0E54
	public float get_length() { }

	// RVA: 0xBC0E5C Offset: 0xBC0E5C VA: 0xBC0E5C
	public int get_tagHash() { }

	// RVA: 0xBC0E64 Offset: 0xBC0E64 VA: 0xBC0E64
	public bool IsTag(string tag) { }

	// RVA: 0xBC0E94 Offset: 0xBC0E94 VA: 0xBC0E94
	public bool get_loop() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC624B4 Offset: 0xC624B4 VA: 0xC624B4
[RequiredByNativeCodeAttribute] // RVA: 0xC624B4 Offset: 0xC624B4 VA: 0xC624B4
public struct AnimatorTransitionInfo // TypeDefIndex: 2698
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC62BA8 Offset: 0xC62BA8 VA: 0xC62BA8
	private int m_FullPath; // 0x0
	[NativeNameAttribute] // RVA: 0xC62BE0 Offset: 0xC62BE0 VA: 0xC62BE0
	private int m_UserName; // 0x4
	[NativeNameAttribute] // RVA: 0xC62C18 Offset: 0xC62C18 VA: 0xC62C18
	private int m_Name; // 0x8
	[NativeNameAttribute] // RVA: 0xC62C50 Offset: 0xC62C50 VA: 0xC62C50
	private bool m_HasFixedDuration; // 0xC
	[NativeNameAttribute] // RVA: 0xC62C88 Offset: 0xC62C88 VA: 0xC62C88
	private float m_Duration; // 0x10
	[NativeNameAttribute] // RVA: 0xC62CC0 Offset: 0xC62CC0 VA: 0xC62CC0
	private float m_NormalizedTime; // 0x14
	[NativeNameAttribute] // RVA: 0xC62CF8 Offset: 0xC62CF8 VA: 0xC62CF8
	private bool m_AnyState; // 0x18
	[NativeNameAttribute] // RVA: 0xC62D30 Offset: 0xC62D30 VA: 0xC62D30
	private int m_TransitionType; // 0x1C

	// Properties
	public int nameHash { get; }
	public int userNameHash { get; }
	public float normalizedTime { get; }

	// Methods

	// RVA: 0xBC0F40 Offset: 0xBC0F40 VA: 0xBC0F40
	public bool IsName(string name) { }

	// RVA: 0xBC0F48 Offset: 0xBC0F48 VA: 0xBC0F48
	public bool IsUserName(string name) { }

	// RVA: 0xBC0F78 Offset: 0xBC0F78 VA: 0xBC0F78
	public int get_nameHash() { }

	// RVA: 0xBC0F80 Offset: 0xBC0F80 VA: 0xBC0F80
	public int get_userNameHash() { }

	// RVA: 0xBC0F88 Offset: 0xBC0F88 VA: 0xBC0F88
	public float get_normalizedTime() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC62500 Offset: 0xC62500 VA: 0xC62500
public struct MatchTargetWeightMask // TypeDefIndex: 2699
{
	// Fields
	private Vector3 m_PositionXYZWeight; // 0x0
	private float m_RotationWeight; // 0xC

	// Methods

	// RVA: 0xBC1080 Offset: 0xBC1080 VA: 0xBC1080
	public void .ctor(Vector3 positionXYZWeight, float rotationWeight) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xC62538 Offset: 0xC62538 VA: 0xC62538
[NativeHeaderAttribute] // RVA: 0xC62538 Offset: 0xC62538 VA: 0xC62538
[NativeHeaderAttribute] // RVA: 0xC62538 Offset: 0xC62538 VA: 0xC62538
[NativeHeaderAttribute] // RVA: 0xC62538 Offset: 0xC62538 VA: 0xC62538
public class Animator : Behaviour // TypeDefIndex: 2700
{
	// Properties
	public bool isHuman { get; }
	public float humanScale { get; }
	public Vector3 deltaPosition { get; }
	public Quaternion deltaRotation { get; }
	public Vector3 rootPosition { get; }
	public Quaternion rootRotation { get; }
	public bool applyRootMotion { get; set; }
	public AnimatorUpdateMode updateMode { set; }
	public float gravityWeight { get; }
	public Vector3 bodyPosition { get; set; }
	internal Vector3 bodyPositionInternal { get; set; }
	public Quaternion bodyRotation { get; set; }
	internal Quaternion bodyRotationInternal { get; set; }
	public bool stabilizeFeet { get; set; }
	public int layerCount { get; }
	public float feetPivotActive { get; set; }
	public float pivotWeight { get; }
	public Vector3 pivotPosition { get; }
	public bool isMatchingTarget { get; }
	public float speed { get; set; }
	public Vector3 targetPosition { get; }
	public Quaternion targetRotation { get; }
	public AnimatorCullingMode cullingMode { get; set; }
	public float playbackTime { get; set; }
	public float recorderStartTime { get; }
	public float recorderStopTime { get; }
	public bool hasBoundPlayables { get; }
	public bool layersAffectMassCenter { get; set; }
	public float leftFeetBottomHeight { get; }
	public float rightFeetBottomHeight { get; }
	public bool logWarnings { get; }

	// Methods

	// RVA: 0x132565C Offset: 0x132565C VA: 0x132565C
	public void .ctor() { }

	[NativeMethodAttribute] // RVA: 0xC630DC Offset: 0xC630DC VA: 0xC630DC
	// RVA: 0x1325664 Offset: 0x1325664 VA: 0x1325664
	public bool get_isHuman() { }

	// RVA: 0x13256D0 Offset: 0x13256D0 VA: 0x13256D0
	public float get_humanScale() { }

	// RVA: 0x132573C Offset: 0x132573C VA: 0x132573C
	public float GetFloat(int id) { }

	// RVA: 0x13257B4 Offset: 0x13257B4 VA: 0x13257B4
	public void SetFloat(int id, float value) { }

	// RVA: 0x1325844 Offset: 0x1325844 VA: 0x1325844
	public void SetFloat(int id, float value, float dampTime, float deltaTime) { }

	// RVA: 0x13258EC Offset: 0x13258EC VA: 0x13258EC
	public bool GetBool(int id) { }

	// RVA: 0x1325964 Offset: 0x1325964 VA: 0x1325964
	public void SetBool(int id, bool value) { }

	// RVA: 0x13259F0 Offset: 0x13259F0 VA: 0x13259F0
	public int GetInteger(int id) { }

	// RVA: 0x1325A68 Offset: 0x1325A68 VA: 0x1325A68
	public void SetInteger(string name, int value) { }

	// RVA: 0x1325AF0 Offset: 0x1325AF0 VA: 0x1325AF0
	public void SetInteger(int id, int value) { }

	// RVA: 0x1325B78 Offset: 0x1325B78 VA: 0x1325B78
	public void SetTrigger(string name) { }

	// RVA: 0x1325BF0 Offset: 0x1325BF0 VA: 0x1325BF0
	public void ResetTrigger(string name) { }

	// RVA: 0x1325C68 Offset: 0x1325C68 VA: 0x1325C68
	public bool IsParameterControlledByCurve(string name) { }

	// RVA: 0x1325CE0 Offset: 0x1325CE0 VA: 0x1325CE0
	public Vector3 get_deltaPosition() { }

	// RVA: 0x1325D84 Offset: 0x1325D84 VA: 0x1325D84
	public Quaternion get_deltaRotation() { }

	[NativeMethodAttribute] // RVA: 0xC63114 Offset: 0xC63114 VA: 0xC63114
	// RVA: 0x1325E24 Offset: 0x1325E24 VA: 0x1325E24
	public Vector3 get_rootPosition() { }

	[NativeMethodAttribute] // RVA: 0xC6314C Offset: 0xC6314C VA: 0xC6314C
	// RVA: 0x1325EC8 Offset: 0x1325EC8 VA: 0x1325EC8
	public Quaternion get_rootRotation() { }

	// RVA: 0x1325F68 Offset: 0x1325F68 VA: 0x1325F68
	public bool get_applyRootMotion() { }

	// RVA: 0x1325FD4 Offset: 0x1325FD4 VA: 0x1325FD4
	public void set_applyRootMotion(bool value) { }

	// RVA: 0x1326048 Offset: 0x1326048 VA: 0x1326048
	public void set_updateMode(AnimatorUpdateMode value) { }

	// RVA: 0x13260BC Offset: 0x13260BC VA: 0x13260BC
	public float get_gravityWeight() { }

	// RVA: 0x1326128 Offset: 0x1326128 VA: 0x1326128
	public Vector3 get_bodyPosition() { }

	// RVA: 0x1326230 Offset: 0x1326230 VA: 0x1326230
	public void set_bodyPosition(Vector3 value) { }

	[NativeMethodAttribute] // RVA: 0xC63184 Offset: 0xC63184 VA: 0xC63184
	// RVA: 0x1326200 Offset: 0x1326200 VA: 0x1326200
	internal Vector3 get_bodyPositionInternal() { }

	[NativeMethodAttribute] // RVA: 0xC631BC Offset: 0xC631BC VA: 0xC631BC
	// RVA: 0x1326288 Offset: 0x1326288 VA: 0x1326288
	internal void set_bodyPositionInternal(Vector3 value) { }

	// RVA: 0x1326398 Offset: 0x1326398 VA: 0x1326398
	public Quaternion get_bodyRotation() { }

	// RVA: 0x1326404 Offset: 0x1326404 VA: 0x1326404
	public void set_bodyRotation(Quaternion value) { }

	[NativeMethodAttribute] // RVA: 0xC631F4 Offset: 0xC631F4 VA: 0xC631F4
	// RVA: 0x13263D8 Offset: 0x13263D8 VA: 0x13263D8
	internal Quaternion get_bodyRotationInternal() { }

	[NativeMethodAttribute] // RVA: 0xC6322C Offset: 0xC6322C VA: 0xC6322C
	// RVA: 0x1326460 Offset: 0x1326460 VA: 0x1326460
	internal void set_bodyRotationInternal(Quaternion value) { }

	// RVA: 0x1326570 Offset: 0x1326570 VA: 0x1326570
	public Vector3 GetIKPosition(AvatarIKGoal goal) { }

	// RVA: 0x13265BC Offset: 0x13265BC VA: 0x13265BC
	private Vector3 GetGoalPosition(AvatarIKGoal goal) { }

	// RVA: 0x1326670 Offset: 0x1326670 VA: 0x1326670
	public void SetIKPosition(AvatarIKGoal goal, Vector3 goalPosition) { }

	// RVA: 0x13266D0 Offset: 0x13266D0 VA: 0x13266D0
	private void SetGoalPosition(AvatarIKGoal goal, Vector3 goalPosition) { }

	// RVA: 0x132677C Offset: 0x132677C VA: 0x132677C
	public Quaternion GetIKRotation(AvatarIKGoal goal) { }

	// RVA: 0x13267C4 Offset: 0x13267C4 VA: 0x13267C4
	private Quaternion GetGoalRotation(AvatarIKGoal goal) { }

	// RVA: 0x1326874 Offset: 0x1326874 VA: 0x1326874
	public void SetIKRotation(AvatarIKGoal goal, Quaternion goalRotation) { }

	// RVA: 0x13268D8 Offset: 0x13268D8 VA: 0x13268D8
	private void SetGoalRotation(AvatarIKGoal goal, Quaternion goalRotation) { }

	// RVA: 0x1326984 Offset: 0x1326984 VA: 0x1326984
	public float GetIKPositionWeight(AvatarIKGoal goal) { }

	// RVA: 0x13269B0 Offset: 0x13269B0 VA: 0x13269B0
	private float GetGoalWeightPosition(AvatarIKGoal goal) { }

	// RVA: 0x1326A24 Offset: 0x1326A24 VA: 0x1326A24
	public void SetIKPositionWeight(AvatarIKGoal goal, float value) { }

	// RVA: 0x1326A60 Offset: 0x1326A60 VA: 0x1326A60
	private void SetGoalWeightPosition(AvatarIKGoal goal, float value) { }

	// RVA: 0x1326AEC Offset: 0x1326AEC VA: 0x1326AEC
	public float GetIKRotationWeight(AvatarIKGoal goal) { }

	// RVA: 0x1326B18 Offset: 0x1326B18 VA: 0x1326B18
	private float GetGoalWeightRotation(AvatarIKGoal goal) { }

	// RVA: 0x1326B8C Offset: 0x1326B8C VA: 0x1326B8C
	public void SetIKRotationWeight(AvatarIKGoal goal, float value) { }

	// RVA: 0x1326BC8 Offset: 0x1326BC8 VA: 0x1326BC8
	private void SetGoalWeightRotation(AvatarIKGoal goal, float value) { }

	// RVA: 0x1326C54 Offset: 0x1326C54 VA: 0x1326C54
	public void SetLookAtPosition(Vector3 lookAtPosition) { }

	[NativeMethodAttribute] // RVA: 0xC63264 Offset: 0xC63264 VA: 0xC63264
	// RVA: 0x1326CAC Offset: 0x1326CAC VA: 0x1326CAC
	private void SetLookAtPositionInternal(Vector3 lookAtPosition) { }

	// RVA: 0x1326D48 Offset: 0x1326D48 VA: 0x1326D48
	public void SetLookAtWeight(float weight) { }

	// RVA: 0x1326E30 Offset: 0x1326E30 VA: 0x1326E30
	public void SetLookAtWeight(float weight, float bodyWeight) { }

	// RVA: 0x1326E78 Offset: 0x1326E78 VA: 0x1326E78
	public void SetLookAtWeight(float weight, float bodyWeight, float headWeight) { }

	// RVA: 0x1326ECC Offset: 0x1326ECC VA: 0x1326ECC
	public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight) { }

	// RVA: 0x1326F24 Offset: 0x1326F24 VA: 0x1326F24
	public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight) { }

	[NativeMethodAttribute] // RVA: 0xC6329C Offset: 0xC6329C VA: 0xC6329C
	// RVA: 0x1326D8C Offset: 0x1326D8C VA: 0x1326D8C
	private void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight) { }

	// RVA: -1 Offset: -1
	private static T[] ConvertStateMachineBehaviour<T>(ScriptableObject[] rawObjects) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B81F54 Offset: 0x2B81F54 VA: 0x2B81F54
	|-Animator.ConvertStateMachineBehaviour<object>
	*/

	// RVA: -1 Offset: -1
	public T[] GetBehaviours<T>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B820BC Offset: 0x2B820BC VA: 0x2B820BC
	|-Animator.GetBehaviours<ScriptActionAdvPrefabActorGoNextState>
	|-Animator.GetBehaviours<object>
	*/

	[FreeFunctionAttribute] // RVA: 0xC632D4 Offset: 0xC632D4 VA: 0xC632D4
	// RVA: 0x1326F88 Offset: 0x1326F88 VA: 0x1326F88
	internal ScriptableObject[] InternalGetBehaviours(Type type) { }

	// RVA: 0x1326FFC Offset: 0x1326FFC VA: 0x1326FFC
	public bool get_stabilizeFeet() { }

	// RVA: 0x1327068 Offset: 0x1327068 VA: 0x1327068
	public void set_stabilizeFeet(bool value) { }

	// RVA: 0x13270DC Offset: 0x13270DC VA: 0x13270DC
	public int get_layerCount() { }

	// RVA: 0x1327148 Offset: 0x1327148 VA: 0x1327148
	public string GetLayerName(int layerIndex) { }

	// RVA: 0x13271BC Offset: 0x13271BC VA: 0x13271BC
	public float GetLayerWeight(int layerIndex) { }

	// RVA: 0x1327230 Offset: 0x1327230 VA: 0x1327230
	public void SetLayerWeight(int layerIndex, float weight) { }

	// RVA: 0x13272BC Offset: 0x13272BC VA: 0x13272BC
	private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, out AnimatorStateInfo info) { }

	// RVA: 0x1327348 Offset: 0x1327348 VA: 0x1327348
	public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex) { }

	// RVA: 0x132739C Offset: 0x132739C VA: 0x132739C
	public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex) { }

	// RVA: 0x13273F0 Offset: 0x13273F0 VA: 0x13273F0
	private void GetAnimatorTransitionInfo(int layerIndex, out AnimatorTransitionInfo info) { }

	// RVA: 0x1327474 Offset: 0x1327474 VA: 0x1327474
	public AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex) { }

	[FreeFunctionAttribute] // RVA: 0xC63328 Offset: 0xC63328 VA: 0xC63328
	// RVA: 0x13274B0 Offset: 0x13274B0 VA: 0x13274B0
	public AnimatorClipInfo[] GetCurrentAnimatorClipInfo(int layerIndex) { }

	// RVA: 0x1327524 Offset: 0x1327524 VA: 0x1327524
	public bool IsInTransition(int layerIndex) { }

	// RVA: 0x1327598 Offset: 0x1327598 VA: 0x1327598
	public float get_feetPivotActive() { }

	// RVA: 0x1327604 Offset: 0x1327604 VA: 0x1327604
	public void set_feetPivotActive(float value) { }

	// RVA: 0x1327678 Offset: 0x1327678 VA: 0x1327678
	public float get_pivotWeight() { }

	// RVA: 0x13276E4 Offset: 0x13276E4 VA: 0x13276E4
	public Vector3 get_pivotPosition() { }

	// RVA: 0x1327788 Offset: 0x1327788 VA: 0x1327788
	private void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, int targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime) { }

	// RVA: 0x132789C Offset: 0x132789C VA: 0x132789C
	public void MatchTarget(Vector3 matchPosition, Quaternion matchRotation, AvatarTarget targetBodyPart, MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime) { }

	// RVA: 0x13278C0 Offset: 0x13278C0 VA: 0x13278C0
	public void InterruptMatchTarget(bool completeMatch) { }

	[NativeMethodAttribute] // RVA: 0xC6337C Offset: 0xC6337C VA: 0xC6337C
	// RVA: 0x1327934 Offset: 0x1327934 VA: 0x1327934
	public bool get_isMatchingTarget() { }

	// RVA: 0x13279A0 Offset: 0x13279A0 VA: 0x13279A0
	public float get_speed() { }

	// RVA: 0x1327A0C Offset: 0x1327A0C VA: 0x1327A0C
	public void set_speed(float value) { }

	// RVA: 0x1327A80 Offset: 0x1327A80 VA: 0x1327A80
	public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset) { }

	// RVA: 0x1327AD0 Offset: 0x1327AD0 VA: 0x1327AD0
	public void CrossFade(string stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime) { }

	[FreeFunctionAttribute] // RVA: 0xC633B4 Offset: 0xC633B4 VA: 0xC633B4
	// RVA: 0x1327B98 Offset: 0x1327B98 VA: 0x1327B98
	public void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime) { }

	// RVA: 0x1327C3C Offset: 0x1327C3C VA: 0x1327C3C
	public void Play(string stateName, int layer, float normalizedTime) { }

	[FreeFunctionAttribute] // RVA: 0xC63408 Offset: 0xC63408 VA: 0xC63408
	// RVA: 0x1327C80 Offset: 0x1327C80 VA: 0x1327C80
	public void Play(int stateNameHash, int layer, float normalizedTime) { }

	// RVA: 0x1327D0C Offset: 0x1327D0C VA: 0x1327D0C
	public void SetTarget(AvatarTarget targetIndex, float targetNormalizedTime) { }

	// RVA: 0x1327D98 Offset: 0x1327D98 VA: 0x1327D98
	public Vector3 get_targetPosition() { }

	// RVA: 0x1327E3C Offset: 0x1327E3C VA: 0x1327E3C
	public Quaternion get_targetRotation() { }

	// RVA: 0x1327EDC Offset: 0x1327EDC VA: 0x1327EDC
	public Transform GetBoneTransform(HumanBodyBones humanBoneId) { }

	[NativeMethodAttribute] // RVA: 0xC6345C Offset: 0xC6345C VA: 0xC6345C
	// RVA: 0x132804C Offset: 0x132804C VA: 0x132804C
	internal Transform GetBoneTransformInternal(int humanBoneId) { }

	// RVA: 0x13280C0 Offset: 0x13280C0 VA: 0x13280C0
	public AnimatorCullingMode get_cullingMode() { }

	// RVA: 0x132812C Offset: 0x132812C VA: 0x132812C
	public void set_cullingMode(AnimatorCullingMode value) { }

	// RVA: 0x13281A0 Offset: 0x13281A0 VA: 0x13281A0
	public void StartPlayback() { }

	// RVA: 0x132820C Offset: 0x132820C VA: 0x132820C
	public void StopPlayback() { }

	// RVA: 0x1328278 Offset: 0x1328278 VA: 0x1328278
	public float get_playbackTime() { }

	// RVA: 0x13282E4 Offset: 0x13282E4 VA: 0x13282E4
	public void set_playbackTime(float value) { }

	// RVA: 0x1328358 Offset: 0x1328358 VA: 0x1328358
	public void StartRecording(int frameCount) { }

	// RVA: 0x13283CC Offset: 0x13283CC VA: 0x13283CC
	public void StopRecording() { }

	// RVA: 0x1328438 Offset: 0x1328438 VA: 0x1328438
	public float get_recorderStartTime() { }

	// RVA: 0x132843C Offset: 0x132843C VA: 0x132843C
	private float GetRecorderStartTime() { }

	// RVA: 0x13284A8 Offset: 0x13284A8 VA: 0x13284A8
	public float get_recorderStopTime() { }

	// RVA: 0x13284AC Offset: 0x13284AC VA: 0x13284AC
	private float GetRecorderStopTime() { }

	[NativeMethodAttribute] // RVA: 0xC63494 Offset: 0xC63494 VA: 0xC63494
	// RVA: 0x1328518 Offset: 0x1328518 VA: 0x1328518
	public bool get_hasBoundPlayables() { }

	[NativeMethodAttribute] // RVA: 0xC634CC Offset: 0xC634CC VA: 0xC634CC
	// RVA: 0x1327B2C Offset: 0x1327B2C VA: 0x1327B2C
	public static int StringToHash(string name) { }

	// RVA: 0x132616C Offset: 0x132616C VA: 0x132616C
	private void CheckIfInIKPass() { }

	// RVA: 0x13285F0 Offset: 0x13285F0 VA: 0x13285F0
	private bool IsInIKPass() { }

	[FreeFunctionAttribute] // RVA: 0xC63520 Offset: 0xC63520 VA: 0xC63520
	// RVA: 0x13257B8 Offset: 0x13257B8 VA: 0x13257B8
	private void SetFloatID(int id, float value) { }

	[FreeFunctionAttribute] // RVA: 0xC63574 Offset: 0xC63574 VA: 0xC63574
	// RVA: 0x1325740 Offset: 0x1325740 VA: 0x1325740
	private float GetFloatID(int id) { }

	[FreeFunctionAttribute] // RVA: 0xC635C8 Offset: 0xC635C8 VA: 0xC635C8
	// RVA: 0x132596C Offset: 0x132596C VA: 0x132596C
	private void SetBoolID(int id, bool value) { }

	[FreeFunctionAttribute] // RVA: 0xC6361C Offset: 0xC6361C VA: 0xC6361C
	// RVA: 0x13258F0 Offset: 0x13258F0 VA: 0x13258F0
	private bool GetBoolID(int id) { }

	[FreeFunctionAttribute] // RVA: 0xC63670 Offset: 0xC63670 VA: 0xC63670
	// RVA: 0x1325A6C Offset: 0x1325A6C VA: 0x1325A6C
	private void SetIntegerString(string name, int value) { }

	[FreeFunctionAttribute] // RVA: 0xC636C4 Offset: 0xC636C4 VA: 0xC636C4
	// RVA: 0x1325AF4 Offset: 0x1325AF4 VA: 0x1325AF4
	private void SetIntegerID(int id, int value) { }

	[FreeFunctionAttribute] // RVA: 0xC63718 Offset: 0xC63718 VA: 0xC63718
	// RVA: 0x13259F4 Offset: 0x13259F4 VA: 0x13259F4
	private int GetIntegerID(int id) { }

	[FreeFunctionAttribute] // RVA: 0xC6376C Offset: 0xC6376C VA: 0xC6376C
	// RVA: 0x1325B7C Offset: 0x1325B7C VA: 0x1325B7C
	private void SetTriggerString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xC637C0 Offset: 0xC637C0 VA: 0xC637C0
	// RVA: 0x1325BF4 Offset: 0x1325BF4 VA: 0x1325BF4
	private void ResetTriggerString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xC63814 Offset: 0xC63814 VA: 0xC63814
	// RVA: 0x1325C6C Offset: 0x1325C6C VA: 0x1325C6C
	private bool IsParameterControlledByCurveString(string name) { }

	[FreeFunctionAttribute] // RVA: 0xC63868 Offset: 0xC63868 VA: 0xC63868
	// RVA: 0x1325848 Offset: 0x1325848 VA: 0x1325848
	private void SetFloatIDDamp(int id, float value, float dampTime, float deltaTime) { }

	// RVA: 0x132865C Offset: 0x132865C VA: 0x132865C
	public bool get_layersAffectMassCenter() { }

	// RVA: 0x13286C8 Offset: 0x13286C8 VA: 0x13286C8
	public void set_layersAffectMassCenter(bool value) { }

	// RVA: 0x132873C Offset: 0x132873C VA: 0x132873C
	public float get_leftFeetBottomHeight() { }

	// RVA: 0x13287A8 Offset: 0x13287A8 VA: 0x13287A8
	public float get_rightFeetBottomHeight() { }

	[NativeMethodAttribute] // RVA: 0xC638BC Offset: 0xC638BC VA: 0xC638BC
	// RVA: 0x1328814 Offset: 0x1328814 VA: 0x1328814
	public void Update(float deltaTime) { }

	// RVA: 0x1328584 Offset: 0x1328584 VA: 0x1328584
	public bool get_logWarnings() { }

	// RVA: 0x1325D10 Offset: 0x1325D10 VA: 0x1325D10
	private void get_deltaPosition_Injected(out Vector3 ret) { }

	// RVA: 0x1325DB0 Offset: 0x1325DB0 VA: 0x1325DB0
	private void get_deltaRotation_Injected(out Quaternion ret) { }

	// RVA: 0x1325E54 Offset: 0x1325E54 VA: 0x1325E54
	private void get_rootPosition_Injected(out Vector3 ret) { }

	// RVA: 0x1325EF4 Offset: 0x1325EF4 VA: 0x1325EF4
	private void get_rootRotation_Injected(out Quaternion ret) { }

	// RVA: 0x13262B0 Offset: 0x13262B0 VA: 0x13262B0
	private void get_bodyPositionInternal_Injected(out Vector3 ret) { }

	// RVA: 0x1326324 Offset: 0x1326324 VA: 0x1326324
	private void set_bodyPositionInternal_Injected(ref Vector3 value) { }

	// RVA: 0x1326488 Offset: 0x1326488 VA: 0x1326488
	private void get_bodyRotationInternal_Injected(out Quaternion ret) { }

	// RVA: 0x13264FC Offset: 0x13264FC VA: 0x13264FC
	private void set_bodyRotationInternal_Injected(ref Quaternion value) { }

	// RVA: 0x13265EC Offset: 0x13265EC VA: 0x13265EC
	private void GetGoalPosition_Injected(AvatarIKGoal goal, out Vector3 ret) { }

	// RVA: 0x13266F8 Offset: 0x13266F8 VA: 0x13266F8
	private void SetGoalPosition_Injected(AvatarIKGoal goal, ref Vector3 goalPosition) { }

	// RVA: 0x13267F0 Offset: 0x13267F0 VA: 0x13267F0
	private void GetGoalRotation_Injected(AvatarIKGoal goal, out Quaternion ret) { }

	// RVA: 0x1326900 Offset: 0x1326900 VA: 0x1326900
	private void SetGoalRotation_Injected(AvatarIKGoal goal, ref Quaternion goalRotation) { }

	// RVA: 0x1326CD4 Offset: 0x1326CD4 VA: 0x1326CD4
	private void SetLookAtPositionInternal_Injected(ref Vector3 lookAtPosition) { }

	// RVA: 0x1327714 Offset: 0x1327714 VA: 0x1327714
	private void get_pivotPosition_Injected(out Vector3 ret) { }

	// RVA: 0x13277E8 Offset: 0x13277E8 VA: 0x13277E8
	private void MatchTarget_Injected(ref Vector3 matchPosition, ref Quaternion matchRotation, int targetBodyPart, ref MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime) { }

	// RVA: 0x1327DC8 Offset: 0x1327DC8 VA: 0x1327DC8
	private void get_targetPosition_Injected(out Vector3 ret) { }

	// RVA: 0x1327E68 Offset: 0x1327E68 VA: 0x1327E68
	private void get_targetRotation_Injected(out Quaternion ret) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
[NativeHeaderAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
[NativeHeaderAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
[NativeHeaderAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
[NativeHeaderAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
[StaticAccessorAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
[NativeHeaderAttribute] // RVA: 0xC625CC Offset: 0xC625CC VA: 0xC625CC
public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2701
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x0

	// Methods

	// RVA: 0xBC0D70 Offset: 0xBC0D70 VA: 0xBC0D70
	internal void .ctor(PlayableHandle handle) { }

	// RVA: 0xBC0D78 Offset: 0xBC0D78 VA: 0xBC0D78 Slot: 4
	public PlayableHandle GetHandle() { }

	// RVA: 0xBC0D84 Offset: 0xBC0D84 VA: 0xBC0D84
	public void SetHandle(PlayableHandle handle) { }

	// RVA: 0xBC0D8C Offset: 0xBC0D8C VA: 0xBC0D8C Slot: 5
	public bool Equals(AnimatorControllerPlayable other) { }

	// RVA: 0x13248A4 Offset: 0x13248A4 VA: 0x13248A4
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xC626D0 Offset: 0xC626D0 VA: 0xC626D0
[NativeHeaderAttribute] // RVA: 0xC626D0 Offset: 0xC626D0 VA: 0xC626D0
[NativeHeaderAttribute] // RVA: 0xC626D0 Offset: 0xC626D0 VA: 0xC626D0
[UsedByNativeCodeAttribute] // RVA: 0xC626D0 Offset: 0xC626D0 VA: 0xC626D0
public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2702
{
	// Fields
	internal AnimatorOverrideController.OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x18

	// Methods

	[NativeConditionalAttribute] // RVA: 0xC638F4 Offset: 0xC638F4 VA: 0xC638F4
	[RequiredByNativeCodeAttribute] // RVA: 0xC638F4 Offset: 0xC638F4 VA: 0xC638F4
	// RVA: 0x1328888 Offset: 0x1328888 VA: 0x1328888
	internal static void OnInvalidateOverrideController(AnimatorOverrideController controller) { }
}

// Namespace: 
