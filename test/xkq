	public void .ctor() { }

	// RVA: 0x235D744 Offset: 0x235D744 VA: 0x235D744 Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x235D78C Offset: 0x235D78C VA: 0x235D78C Slot: 11
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x235D794 Offset: 0x235D794 VA: 0x235D794 Slot: 12
	public virtual int GetBlockSize() { }

	// RVA: 0x235D79C Offset: 0x235D79C VA: 0x235D79C Slot: 13
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x235D9EC Offset: 0x235D9EC VA: 0x235D9EC Slot: 14
	public virtual int ProcessBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x235DD40 Offset: 0x235DD40 VA: 0x235DD40 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x235D97C Offset: 0x235D97C VA: 0x235D97C
	private void setKey(byte[] key) { }

	// RVA: 0x235DB68 Offset: 0x235DB68 VA: 0x235DB68
	private int encryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x235DC58 Offset: 0x235DC58 VA: 0x235DC58
	private int decryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public sealed class TwofishEngine : IBlockCipher // TypeDefIndex: 4731
{
	// Fields
	private static readonly byte[,] P; // 0x0
	private const int P_00 = 1;
	private const int P_01 = 0;
	private const int P_02 = 0;
	private const int P_03 = 1;
	private const int P_04 = 1;
	private const int P_10 = 0;
	private const int P_11 = 0;
	private const int P_12 = 1;
	private const int P_13 = 1;
	private const int P_14 = 0;
	private const int P_20 = 1;
	private const int P_21 = 1;
	private const int P_22 = 0;
	private const int P_23 = 0;
	private const int P_24 = 0;
	private const int P_30 = 0;
	private const int P_31 = 1;
	private const int P_32 = 1;
	private const int P_33 = 0;
	private const int P_34 = 1;
	private const int GF256_FDBK = 361;
	private const int GF256_FDBK_2 = 180;
	private const int GF256_FDBK_4 = 90;
	private const int RS_GF_FDBK = 333;
	private const int ROUNDS = 16;
	private const int MAX_ROUNDS = 16;
	private const int BLOCK_SIZE = 16;
	private const int MAX_KEY_BITS = 256;
	private const int INPUT_WHITEN = 0;
	private const int OUTPUT_WHITEN = 4;
	private const int ROUND_SUBKEYS = 8;
	private const int TOTAL_SUBKEYS = 40;
	private const int SK_STEP = 33686018;
	private const int SK_BUMP = 16843009;
	private const int SK_ROTL = 9;
	private bool encrypting; // 0x10
	private int[] gMDS0; // 0x18
	private int[] gMDS1; // 0x20
	private int[] gMDS2; // 0x28
	private int[] gMDS3; // 0x30
	private int[] gSubKeys; // 0x38
	private int[] gSBox; // 0x40
	private int k64Cnt; // 0x48
	private byte[] workingKey; // 0x50

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x235DD44 Offset: 0x235DD44 VA: 0x235DD44
	public void .ctor() { }

	// RVA: 0x235E3F0 Offset: 0x235E3F0 VA: 0x235E3F0 Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x235F73C Offset: 0x235F73C VA: 0x235F73C Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x235F784 Offset: 0x235F784 VA: 0x235F784 Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x235F78C Offset: 0x235F78C VA: 0x235F78C Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x236008C Offset: 0x236008C VA: 0x236008C Slot: 9
	public void Reset() { }

	// RVA: 0x236009C Offset: 0x236009C VA: 0x236009C Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x235E660 Offset: 0x235E660 VA: 0x235E660
	private void SetKey(byte[] key) { }

	// RVA: 0x235F8B8 Offset: 0x235F8B8 VA: 0x235F8B8
	private void EncryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex) { }

	// RVA: 0x235FC9C Offset: 0x235FC9C VA: 0x235FC9C
	private void DecryptBlock(byte[] src, int srcIndex, byte[] dst, int dstIndex) { }

	// RVA: 0x236023C Offset: 0x236023C VA: 0x236023C
	private int F32(int x, int[] k32) { }

	// RVA: 0x236019C Offset: 0x236019C VA: 0x236019C
	private int RS_MDS_Encode(int k0, int k1) { }

	// RVA: 0x2361128 Offset: 0x2361128 VA: 0x2361128
	private int RS_rem(int x) { }

	// RVA: 0x2361168 Offset: 0x2361168 VA: 0x2361168
	private int LFSR1(int x) { }

	// RVA: 0x236117C Offset: 0x236117C VA: 0x236117C
	private int LFSR2(int x) { }

	// RVA: 0x235E394 Offset: 0x235E394 VA: 0x235E394
	private int Mx_X(int x) { }

	// RVA: 0x235E3BC Offset: 0x235E3BC VA: 0x235E3BC
	private int Mx_Y(int x) { }

	// RVA: 0x2360DB0 Offset: 0x2360DB0 VA: 0x2360DB0
	private int M_b0(int x) { }

	// RVA: 0x2360DB8 Offset: 0x2360DB8 VA: 0x2360DB8
	private int M_b1(int x) { }

	// RVA: 0x2360DC0 Offset: 0x2360DC0 VA: 0x2360DC0
	private int M_b2(int x) { }

	// RVA: 0x2360DC8 Offset: 0x2360DC8 VA: 0x2360DC8
	private int M_b3(int x) { }

	// RVA: 0x2360DD0 Offset: 0x2360DD0 VA: 0x2360DD0
	private int Fe32_0(int x) { }

	// RVA: 0x2360F00 Offset: 0x2360F00 VA: 0x2360F00
	private int Fe32_3(int x) { }

	// RVA: 0x23600A4 Offset: 0x23600A4 VA: 0x23600A4
	private int BytesTo32Bits(byte[] b, int p) { }

	// RVA: 0x2361038 Offset: 0x2361038 VA: 0x2361038
	private void Bits32ToBytes(int inData, byte[] b, int offset) { }

	// RVA: 0x23611A0 Offset: 0x23611A0 VA: 0x23611A0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class VmpcEngine : IStreamCipher // TypeDefIndex: 4732
{
	// Fields
	protected byte n; // 0x10
	protected byte[] P; // 0x18
	protected byte s; // 0x20
	protected byte[] workingIV; // 0x28
	protected byte[] workingKey; // 0x30

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2361238 Offset: 0x2361238 VA: 0x2361238
	public void .ctor() { }

	// RVA: 0x2361240 Offset: 0x2361240 VA: 0x2361240 Slot: 9
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2361288 Offset: 0x2361288 VA: 0x2361288 Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23614B8 Offset: 0x23614B8 VA: 0x23614B8 Slot: 11
	protected virtual void InitKey(byte[] keyBytes, byte[] ivBytes) { }

	// RVA: 0x23618A4 Offset: 0x23618A4 VA: 0x23618A4 Slot: 12
	public virtual void ProcessBytes(byte[] input, int inOff, int len, byte[] output, int outOff) { }

	// RVA: 0x2361BC8 Offset: 0x2361BC8 VA: 0x2361BC8 Slot: 13
	public virtual void Reset() { }

	// RVA: 0x2361BD8 Offset: 0x2361BD8 VA: 0x2361BD8 Slot: 14
	public virtual byte ReturnByte(byte input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class VmpcKsa3Engine : VmpcEngine // TypeDefIndex: 4733
{
	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x2361DE4 Offset: 0x2361DE4 VA: 0x2361DE4
	public void .ctor() { }

	// RVA: 0x2361DEC Offset: 0x2361DEC VA: 0x2361DEC Slot: 9
	public override string get_AlgorithmName() { }

	// RVA: 0x2361E34 Offset: 0x2361E34 VA: 0x2361E34 Slot: 11
	protected override void InitKey(byte[] keyBytes, byte[] ivBytes) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class XteaEngine : IBlockCipher // TypeDefIndex: 4734
{
	// Fields
	private const int rounds = 32;
	private const int block_size = 8;
	private const int delta = -1640531527;
	private uint[] _S; // 0x10
	private uint[] _sum0; // 0x18
	private uint[] _sum1; // 0x20
	private bool _initialised; // 0x28
	private bool _forEncryption; // 0x29

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x23623AC Offset: 0x23623AC VA: 0x23623AC
	public void .ctor() { }

	// RVA: 0x2362434 Offset: 0x2362434 VA: 0x2362434 Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x236247C Offset: 0x236247C VA: 0x236247C Slot: 11
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x2362484 Offset: 0x2362484 VA: 0x2362484 Slot: 12
	public virtual int GetBlockSize() { }

	// RVA: 0x236248C Offset: 0x236248C VA: 0x236248C Slot: 13
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x2362808 Offset: 0x2362808 VA: 0x2362808 Slot: 14
	public virtual int ProcessBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x2362BFC Offset: 0x2362BFC VA: 0x2362BFC Slot: 15
	public virtual void Reset() { }

	// RVA: 0x236266C Offset: 0x236266C VA: 0x236266C
	private void setKey(byte[] key) { }

	// RVA: 0x2362984 Offset: 0x2362984 VA: 0x2362984
	private int encryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x2362AC0 Offset: 0x2362AC0 VA: 0x2362AC0
	private int decryptBlock(byte[] inBytes, int inOff, byte[] outBytes, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class DHBasicKeyPairGenerator : IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4735
{
	// Fields
	private DHKeyGenerationParameters param; // 0x10

	// Methods

	// RVA: 0x2362C00 Offset: 0x2362C00 VA: 0x2362C00
	public void .ctor() { }

	// RVA: 0x2362C08 Offset: 0x2362C08 VA: 0x2362C08 Slot: 6
	public virtual void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x2362CD8 Offset: 0x2362CD8 VA: 0x2362CD8 Slot: 7
	public virtual AsymmetricCipherKeyPair GenerateKeyPair() { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
internal class DHKeyGeneratorHelper // TypeDefIndex: 4736
{
	// Fields
	internal static readonly DHKeyGeneratorHelper Instance; // 0x0

	// Methods

	// RVA: 0x2363154 Offset: 0x2363154 VA: 0x2363154
	private void .ctor() { }

	// RVA: 0x2362E48 Offset: 0x2362E48 VA: 0x2362E48
	internal BigInteger CalculatePrivate(DHParameters dhParams, SecureRandom random) { }

	// RVA: 0x23630C8 Offset: 0x23630C8 VA: 0x23630C8
	internal BigInteger CalculatePublic(DHParameters dhParams, BigInteger x) { }

	// RVA: 0x236315C Offset: 0x236315C VA: 0x236315C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class DHKeyPairGenerator : IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4737
{
	// Fields
	private DHKeyGenerationParameters param; // 0x10

	// Methods

	// RVA: 0x23631C0 Offset: 0x23631C0 VA: 0x23631C0
	public void .ctor() { }

	// RVA: 0x23631C8 Offset: 0x23631C8 VA: 0x23631C8 Slot: 6
	public virtual void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x2363298 Offset: 0x2363298 VA: 0x2363298 Slot: 7
	public virtual AsymmetricCipherKeyPair GenerateKeyPair() { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
internal class DHParametersHelper // TypeDefIndex: 4738
{
	// Fields
	private static readonly BigInteger Six; // 0x0
	private static readonly int[][] primeLists; // 0x8
	private static readonly int[] primeProducts; // 0x10
	private static readonly BigInteger[] BigPrimeProducts; // 0x18

	// Methods

	// RVA: 0x2363408 Offset: 0x2363408 VA: 0x2363408
	public void .ctor() { }

	// RVA: 0x2363410 Offset: 0x2363410 VA: 0x2363410
	private static BigInteger[] ConstructBigPrimeProducts(int[] primeProducts) { }

	// RVA: 0x2363550 Offset: 0x2363550 VA: 0x2363550
	internal static BigInteger[] GenerateSafePrimes(int size, int certainty, SecureRandom random) { }

	// RVA: 0x2363BA0 Offset: 0x2363BA0 VA: 0x2363BA0
	internal static BigInteger SelectGenerator(BigInteger p, BigInteger q, SecureRandom random) { }

	// RVA: 0x2363CD4 Offset: 0x2363CD4 VA: 0x2363CD4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class DsaKeyPairGenerator : IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4739
{
	// Fields
	private static readonly BigInteger One; // 0x0
	private DsaKeyGenerationParameters param; // 0x10

	// Methods

	// RVA: 0x2363D90 Offset: 0x2363D90 VA: 0x2363D90
	public void .ctor() { }

	// RVA: 0x2363D98 Offset: 0x2363D98 VA: 0x2363D98 Slot: 4
	public void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x2363EAC Offset: 0x2363EAC VA: 0x2363EAC Slot: 5
	public AsymmetricCipherKeyPair GenerateKeyPair() { }

	// RVA: 0x236405C Offset: 0x236405C VA: 0x236405C
	private static BigInteger GeneratePrivateKey(BigInteger q, SecureRandom random) { }

	// RVA: 0x2364168 Offset: 0x2364168 VA: 0x2364168
	private static BigInteger CalculatePublicKey(BigInteger p, BigInteger g, BigInteger x) { }

	// RVA: 0x23641B0 Offset: 0x23641B0 VA: 0x23641B0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class ECKeyPairGenerator : IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4740
{
	// Fields
	private readonly string algorithm; // 0x10
	private ECDomainParameters parameters; // 0x18
	private DerObjectIdentifier publicKeyParamSet; // 0x20
	private SecureRandom random; // 0x28

	// Methods

	// RVA: 0x1E051BC Offset: 0x1E051BC VA: 0x1E051BC
	public void .ctor() { }

	// RVA: 0x1E0520C Offset: 0x1E0520C VA: 0x1E0520C
	public void .ctor(string algorithm) { }

	// RVA: 0x1E052DC Offset: 0x1E052DC VA: 0x1E052DC Slot: 4
	public void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x1E05700 Offset: 0x1E05700 VA: 0x1E05700 Slot: 5
	public AsymmetricCipherKeyPair GenerateKeyPair() { }

	// RVA: 0x1E05A0C Offset: 0x1E05A0C VA: 0x1E05A0C Slot: 6
	protected virtual ECMultiplier CreateBasePointMultiplier() { }

	// RVA: 0x1E05674 Offset: 0x1E05674 VA: 0x1E05674
	internal static X9ECParameters FindECCurveByOid(DerObjectIdentifier oid) { }

	// RVA: 0x1E05A68 Offset: 0x1E05A68 VA: 0x1E05A68
	internal static ECPublicKeyParameters GetCorrespondingPublicKey(ECPrivateKeyParameters privKey) { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class ElGamalKeyPairGenerator : IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4741
{
	// Fields
	private ElGamalKeyGenerationParameters param; // 0x10

	// Methods

	// RVA: 0x1E05C28 Offset: 0x1E05C28 VA: 0x1E05C28
	public void .ctor() { }

	// RVA: 0x1E05C30 Offset: 0x1E05C30 VA: 0x1E05C30 Slot: 4
	public void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x1E05D00 Offset: 0x1E05D00 VA: 0x1E05D00 Slot: 5
	public AsymmetricCipherKeyPair GenerateKeyPair() { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class Poly1305KeyGenerator : CipherKeyGenerator // TypeDefIndex: 4742
{
	// Fields
	private const byte R_MASK_LOW_2 = 252;
	private const byte R_MASK_HIGH_4 = 15;

	// Methods

	// RVA: 0x1E05F2C Offset: 0x1E05F2C VA: 0x1E05F2C
	public void .ctor() { }

	// RVA: 0x1E05F34 Offset: 0x1E05F34 VA: 0x1E05F34 Slot: 4
	protected override void engineInit(KeyGenerationParameters param) { }

	// RVA: 0x1E05F70 Offset: 0x1E05F70 VA: 0x1E05F70 Slot: 5
	protected override byte[] engineGenerateKey() { }

	// RVA: 0x1E05F9C Offset: 0x1E05F9C VA: 0x1E05F9C
	public static void Clamp(byte[] key) { }

	// RVA: 0x1E0608C Offset: 0x1E0608C VA: 0x1E0608C
	public static void CheckKey(byte[] key) { }

	// RVA: 0x1E06220 Offset: 0x1E06220 VA: 0x1E06220
	private static void CheckMask(byte b, byte mask) { }
}

// Namespace: Org.BouncyCastle.Crypto.Generators
public class RsaKeyPairGenerator : IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4743
{
	// Fields
	private static readonly int[] SPECIAL_E_VALUES; // 0x0
	private static readonly int SPECIAL_E_HIGHEST; // 0x8
	private static readonly int SPECIAL_E_BITS; // 0xC
	protected static readonly BigInteger One; // 0x10
	protected static readonly BigInteger DefaultPublicExponent; // 0x18
	protected const int DefaultTests = 100;
	protected RsaKeyGenerationParameters parameters; // 0x10

	// Methods

	// RVA: 0x1E062BC Offset: 0x1E062BC VA: 0x1E062BC
	public void .ctor() { }

	// RVA: 0x1E062C4 Offset: 0x1E062C4 VA: 0x1E062C4 Slot: 6
	public virtual void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x1E063CC Offset: 0x1E063CC VA: 0x1E063CC Slot: 7
	public virtual AsymmetricCipherKeyPair GenerateKeyPair() { }

	// RVA: 0x1E06814 Offset: 0x1E06814 VA: 0x1E06814 Slot: 8
	protected virtual BigInteger ChooseRandomPrime(int bitlength, BigInteger e) { }

	// RVA: 0x1E06AAC Offset: 0x1E06AAC VA: 0x1E06AAC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto
public interface IAsymmetricBlockCipher // TypeDefIndex: 4744
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forEncryption, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetInputBlockSize();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int GetOutputBlockSize();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IAsymmetricCipherKeyPairGenerator // TypeDefIndex: 4745
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(KeyGenerationParameters parameters);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract AsymmetricCipherKeyPair GenerateKeyPair();
}

// Namespace: Org.BouncyCastle.Crypto
public interface IBasicAgreement // TypeDefIndex: 4746
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetFieldSize();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract BigInteger CalculateAgreement(ICipherParameters pubKey);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IBlockCipher // TypeDefIndex: 4747
{
	// Properties
	public abstract string AlgorithmName { get; }
	public abstract bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forEncryption, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetBlockSize();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool get_IsPartialBlockOkay();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto
public interface IBlockResult // TypeDefIndex: 4748
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract byte[] Collect();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int Collect(byte[] destination, int offset);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IBufferedCipher // TypeDefIndex: 4749
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forEncryption, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetBlockSize();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int GetOutputSize(int inputLen);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int GetUpdateOutputSize(int inputLen);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract byte[] ProcessByte(byte input);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract int ProcessByte(byte input, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract byte[] ProcessBytes(byte[] input);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract byte[] ProcessBytes(byte[] input, int inOff, int length);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract int ProcessBytes(byte[] input, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract byte[] DoFinal();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract byte[] DoFinal(byte[] input);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract byte[] DoFinal(byte[] input, int inOff, int length);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract int DoFinal(byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract int DoFinal(byte[] input, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 16
	public abstract int DoFinal(byte[] input, int inOff, int length, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto
public interface ICipherParameters // TypeDefIndex: 4750
{}

// Namespace: Org.BouncyCastle.Crypto
public interface IDerivationFunction // TypeDefIndex: 4751
{
	// Properties
	public abstract IDigest Digest { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(IDerivationParameters parameters);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IDigest get_Digest();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GenerateBytes(byte[] output, int outOff, int length);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IDerivationParameters // TypeDefIndex: 4752
{}

// Namespace: Org.BouncyCastle.Crypto
public interface IDigest // TypeDefIndex: 4753
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetDigestSize();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetByteLength();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Update(byte input);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void BlockUpdate(byte[] input, int inOff, int length);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int DoFinal(byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto
public interface IDsa // TypeDefIndex: 4754
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forSigning, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract BigInteger[] GenerateSignature(byte[] message);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool VerifySignature(byte[] message, BigInteger r, BigInteger s);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IMac // TypeDefIndex: 4755
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int GetMacSize();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Update(byte input);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void BlockUpdate(byte[] input, int inOff, int len);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int DoFinal(byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto
[Serializable]
public class InvalidCipherTextException : CryptoException // TypeDefIndex: 4756
{
	// Methods

	// RVA: 0x1E06C0C Offset: 0x1E06C0C VA: 0x1E06C0C
	public void .ctor() { }

	// RVA: 0x1E06C14 Offset: 0x1E06C14 VA: 0x1E06C14
	public void .ctor(string message) { }

	// RVA: 0x1E06C1C Offset: 0x1E06C1C VA: 0x1E06C1C
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Crypto
public interface ISignatureFactory // TypeDefIndex: 4757
{
	// Properties
	public abstract object AlgorithmDetails { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_AlgorithmDetails();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IStreamCalculator CreateCalculator();
}

// Namespace: Org.BouncyCastle.Crypto
public interface ISigner // TypeDefIndex: 4758
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forSigning, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Update(byte input);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void BlockUpdate(byte[] input, int inOff, int length);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] GenerateSignature();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool VerifySignature(byte[] signature);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto
public interface ISignerWithRecovery : ISigner // TypeDefIndex: 4759
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool HasFullMessage();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte[] GetRecoveredMessage();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void UpdateWithRecoveredMessage(byte[] signature);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IStreamCalculator // TypeDefIndex: 4760
{
	// Properties
	public abstract Stream Stream { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Stream get_Stream();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object GetResult();
}

// Namespace: Org.BouncyCastle.Crypto
public interface IStreamCipher // TypeDefIndex: 4761
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forEncryption, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract byte ReturnByte(byte input);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Reset();
}

// Namespace: Org.BouncyCastle.Crypto
public interface IVerifier // TypeDefIndex: 4762
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsVerified(byte[] data);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsVerified(byte[] source, int off, int length);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IVerifierFactory // TypeDefIndex: 4763
{
	// Properties
	public abstract object AlgorithmDetails { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_AlgorithmDetails();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IStreamCalculator CreateCalculator();
}

// Namespace: Org.BouncyCastle.Crypto
public interface IVerifierFactoryProvider // TypeDefIndex: 4764
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IVerifierFactory CreateVerifierFactory(object algorithmDetails);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IWrapper // TypeDefIndex: 4765
{
	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(bool forWrapping, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract byte[] Wrap(byte[] input, int inOff, int length);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract byte[] Unwrap(byte[] input, int inOff, int length);
}

// Namespace: Org.BouncyCastle.Crypto
public interface IXof : IDigest // TypeDefIndex: 4766
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int DoFinal(byte[] output, int outOff, int outLen);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int DoOutput(byte[] output, int outOff, int outLen);
}

// Namespace: Org.BouncyCastle.Crypto
public class KeyGenerationParameters // TypeDefIndex: 4767
{
	// Fields
	private SecureRandom random; // 0x10
	private int strength; // 0x18

	// Properties
	public SecureRandom Random { get; }
	public int Strength { get; }

	// Methods

	// RVA: 0x1E06C24 Offset: 0x1E06C24 VA: 0x1E06C24
	public void .ctor(SecureRandom random, int strength) { }

	// RVA: 0x1E056F8 Offset: 0x1E056F8 VA: 0x1E056F8
	public SecureRandom get_Random() { }

	// RVA: 0x1E0566C Offset: 0x1E0566C VA: 0x1E0566C
	public int get_Strength() { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class CbcBlockCipherMac : IMac // TypeDefIndex: 4768
{
	// Fields
	private byte[] buf; // 0x10
	private int bufOff; // 0x18
	private IBlockCipher cipher; // 0x20
	private IBlockCipherPadding padding; // 0x28
	private int macSize; // 0x30

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E080B8 Offset: 0x1E080B8 VA: 0x1E080B8
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E08320 Offset: 0x1E08320 VA: 0x1E08320
	public void .ctor(IBlockCipher cipher, IBlockCipherPadding padding) { }

	// RVA: 0x1E0840C Offset: 0x1E0840C VA: 0x1E0840C
	public void .ctor(IBlockCipher cipher, int macSizeInBits) { }

	// RVA: 0x1E081A0 Offset: 0x1E081A0 VA: 0x1E081A0
	public void .ctor(IBlockCipher cipher, int macSizeInBits, IBlockCipherPadding padding) { }

	// RVA: 0x1E08414 Offset: 0x1E08414 VA: 0x1E08414 Slot: 5
	public string get_AlgorithmName() { }

	// RVA: 0x1E084C8 Offset: 0x1E084C8 VA: 0x1E084C8 Slot: 4
	public void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0867C Offset: 0x1E0867C VA: 0x1E0867C Slot: 6
	public int GetMacSize() { }

	// RVA: 0x1E08684 Offset: 0x1E08684 VA: 0x1E08684 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x1E087D0 Offset: 0x1E087D0 VA: 0x1E087D0 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int len) { }
