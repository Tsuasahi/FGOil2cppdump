
	// RVA: 0x119CF0C Offset: 0x119CF0C VA: 0x119CF0C
	public void SetBusSendLevel(string busName, float level) { }

	// RVA: 0x119CFE4 Offset: 0x119CFE4 VA: 0x119CFE4
	public bool GetBusSendLevel(string busName, out float level) { }

	[ObsoleteAttribute] // RVA: 0xC8F9A4 Offset: 0xC8F9A4 VA: 0xC8F9A4
	// RVA: 0x119D0C0 Offset: 0x119D0C0 VA: 0x119D0C0
	public void SetBusSendLevel(int busId, float level) { }

	// RVA: 0x119D184 Offset: 0x119D184 VA: 0x119D184
	public void SetBusSendLevelOffset(string busName, float levelOffset) { }

	// RVA: 0x119D25C Offset: 0x119D25C VA: 0x119D25C
	public bool GetBusSendLevelOffset(string busName, out float level) { }

	[ObsoleteAttribute] // RVA: 0xC8F9DC Offset: 0xC8F9DC VA: 0xC8F9DC
	// RVA: 0x119D338 Offset: 0x119D338 VA: 0x119D338
	public void SetBusSendLevelOffset(int busId, float levelOffset) { }

	// RVA: 0x119D3FC Offset: 0x119D3FC VA: 0x119D3FC
	public void AttachAisac(string globalAisacName) { }

	// RVA: 0x119D4C4 Offset: 0x119D4C4 VA: 0x119D4C4
	public void DetachAisac(string globalAisacName) { }

	// RVA: 0x119D58C Offset: 0x119D58C VA: 0x119D58C
	public void SetAisacControl(string controlName, float value) { }

	[ObsoleteAttribute] // RVA: 0xC8FA14 Offset: 0xC8FA14 VA: 0xC8FA14
	// RVA: 0x119D664 Offset: 0x119D664 VA: 0x119D664
	public void SetAisac(string controlName, float value) { }

	// RVA: 0x119D66C Offset: 0x119D66C VA: 0x119D66C
	public void SetAisacControl(uint controlId, float value) { }

	[ObsoleteAttribute] // RVA: 0xC8FA4C Offset: 0xC8FA4C VA: 0xC8FA4C
	// RVA: 0x119D730 Offset: 0x119D730 VA: 0x119D730
	public void SetAisac(uint controlId, float value) { }

	// RVA: 0x119D738 Offset: 0x119D738 VA: 0x119D738
	public bool GetAttachedAisacInfo(int aisacAttachedIndex, out CriAtomEx.AisacInfo aisacInfo) { }

	// RVA: 0x119D9C4 Offset: 0x119D9C4 VA: 0x119D9C4
	public void Set3dSource(CriAtomEx3dSource source) { }

	// RVA: 0x119DAE0 Offset: 0x119DAE0 VA: 0x119DAE0
	public void Set3dListener(CriAtomEx3dListener listener) { }

	// RVA: 0x119DBFC Offset: 0x119DBFC VA: 0x119DBFC
	public void SetStartTime(long startTimeMs) { }

	// RVA: 0x119DCB0 Offset: 0x119DCB0 VA: 0x119DCB0
	public void SetFirstBlockIndex(int index) { }

	// RVA: 0x119DD64 Offset: 0x119DD64 VA: 0x119DD64
	public void SetSelectorLabel(string selector, string label) { }

	// RVA: 0x119DE48 Offset: 0x119DE48 VA: 0x119DE48
	public void UnsetSelectorLabel(string selector) { }

	// RVA: 0x119DF10 Offset: 0x119DF10 VA: 0x119DF10
	public void ClearSelectorLabels() { }

	// RVA: 0x119DFB4 Offset: 0x119DFB4 VA: 0x119DFB4
	public void SetCategory(int categoryId) { }

	// RVA: 0x119E068 Offset: 0x119E068 VA: 0x119E068
	public void SetCategory(string categoryName) { }

	// RVA: 0x119E130 Offset: 0x119E130 VA: 0x119E130
	public void UnsetCategory() { }

	// RVA: 0x119E1D4 Offset: 0x119E1D4 VA: 0x119E1D4
	public void SetCuePriority(int priority) { }

	// RVA: 0x119E288 Offset: 0x119E288 VA: 0x119E288
	public void SetVoicePriority(int priority) { }

	// RVA: 0x119E33C Offset: 0x119E33C VA: 0x119E33C
	public void SetVoiceControlMethod(CriAtomEx.VoiceControlMethod method) { }

	// RVA: 0x119E3F0 Offset: 0x119E3F0 VA: 0x119E3F0
	public void SetPreDelayTime(float time) { }

	// RVA: 0x119E4A4 Offset: 0x119E4A4 VA: 0x119E4A4
	public void SetEnvelopeAttackTime(float time) { }

	// RVA: 0x119E558 Offset: 0x119E558 VA: 0x119E558
	public void SetEnvelopeHoldTime(float time) { }

	// RVA: 0x119E60C Offset: 0x119E60C VA: 0x119E60C
	public void SetEnvelopeDecayTime(float time) { }

	// RVA: 0x119E6C0 Offset: 0x119E6C0 VA: 0x119E6C0
	public void SetEnvelopeReleaseTime(float time) { }

	// RVA: 0x119E774 Offset: 0x119E774 VA: 0x119E774
	public void SetEnvelopeSustainLevel(float level) { }

	// RVA: 0x119E828 Offset: 0x119E828 VA: 0x119E828
	public void AttachFader() { }

	// RVA: 0x119E93C Offset: 0x119E93C VA: 0x119E93C
	public void DetachFader() { }

	// RVA: 0x119E9E0 Offset: 0x119E9E0 VA: 0x119E9E0
	public void SetFadeOutTime(int ms) { }

	// RVA: 0x119EA94 Offset: 0x119EA94 VA: 0x119EA94
	public void SetFadeInTime(int ms) { }

	// RVA: 0x119EB48 Offset: 0x119EB48 VA: 0x119EB48
	public void SetFadeInStartOffset(int ms) { }

	// RVA: 0x119EBFC Offset: 0x119EBFC VA: 0x119EBFC
	public void SetFadeOutEndDelay(int ms) { }

	// RVA: 0x119ECB0 Offset: 0x119ECB0 VA: 0x119ECB0
	public bool IsFading() { }

	// RVA: 0x119ED5C Offset: 0x119ED5C VA: 0x119ED5C
	public void ResetFaderParameters() { }

	// RVA: 0x119EE00 Offset: 0x119EE00 VA: 0x119EE00
	public void SetGroupNumber(int group_no) { }

	// RVA: 0x119EEB4 Offset: 0x119EEB4 VA: 0x119EEB4
	public void Update(CriAtomExPlayback playback) { }

	// RVA: 0x119EF68 Offset: 0x119EF68 VA: 0x119EF68
	public void UpdateAll() { }

	// RVA: 0x119F00C Offset: 0x119F00C VA: 0x119F00C
	public void ResetParameters() { }

	// RVA: 0x119F0B0 Offset: 0x119F0B0 VA: 0x119F0B0
	public long GetTime() { }

	// RVA: 0x11978F0 Offset: 0x11978F0 VA: 0x11978F0
	public CriAtomExPlayer.Status GetStatus() { }

	// RVA: 0x119F1F0 Offset: 0x119F1F0 VA: 0x119F1F0
	public float GetParameterFloat32(CriAtomEx.Parameter id) { }

	// RVA: 0x119F2A4 Offset: 0x119F2A4 VA: 0x119F2A4
	public uint GetParameterUint32(CriAtomEx.Parameter id) { }

	// RVA: 0x119F358 Offset: 0x119F358 VA: 0x119F358
	public int GetParameterSint32(CriAtomEx.Parameter id) { }

	// RVA: 0x119F40C Offset: 0x119F40C VA: 0x119F40C
	public void SetSoundRendererType(CriAtomEx.SoundRendererType type) { }

	// RVA: 0x119F4C0 Offset: 0x119F4C0 VA: 0x119F4C0
	public void SetRandomSeed(uint seed) { }

	// RVA: 0x119F574 Offset: 0x119F574 VA: 0x119F574
	public void Loop(bool sw) { }

	// RVA: 0x119F8D0 Offset: 0x119F8D0 VA: 0x119F8D0
	public void SetAsrRackId(int asr_rack_id) { }

	// RVA: 0x119F984 Offset: 0x119F984 VA: 0x119F984
	public void SetVoicePoolIdentifier(uint identifier) { }

	// RVA: 0x119FA38 Offset: 0x119FA38 VA: 0x119FA38
	public void SetDspTimeStretchRatio(float ratio) { }

	// RVA: 0x119FA4C Offset: 0x119FA4C VA: 0x119FA4C
	public void SetDspPitchShifterPitch(float pitch) { }

	// RVA: 0x119FA44 Offset: 0x119FA44 VA: 0x119FA44
	public void SetDspParameter(int id, float value) { }

	// RVA: 0x119FB28 Offset: 0x119FB28 VA: 0x119FB28
	public void SetSequencePrepareTime(uint ms) { }

	// RVA: 0x119FBDC Offset: 0x119FBDC VA: 0x119FBDC
	public void AttachTween(CriAtomExTween tween) { }

	// RVA: 0x119FCC4 Offset: 0x119FCC4 VA: 0x119FCC4
	public void DetachTween(CriAtomExTween tween) { }

	// RVA: 0x119FDA4 Offset: 0x119FDA4 VA: 0x119FDA4
	public void DetachTweenAll() { }

	// RVA: 0x119FE48 Offset: 0x119FE48 VA: 0x119FE48
	public void Stop() { }

	// RVA: 0x11979AC Offset: 0x11979AC VA: 0x11979AC
	public void StopWithoutReleaseTime() { }

	// RVA: 0x119FE84 Offset: 0x119FE84 VA: 0x119FE84
	public void Pause(bool sw) { }

	// RVA: 0x119FE90 Offset: 0x119FE90 VA: 0x119FE90 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x119FF0C Offset: 0x119FF0C VA: 0x119FF0C
	private void OnBeatSyncCallbackChainInternal(ref CriAtomExBeatSync.Info info) { }

	// RVA: 0x119FF68 Offset: 0x119FF68 VA: 0x119FF68
	private void OnSequenceCallbackChainInternal(ref CriAtomExSequencer.CriAtomExSequenceEventInfo info) { }

	// RVA: 0x119A1C4 Offset: 0x119A1C4 VA: 0x119A1C4
	private static extern IntPtr criAtomExPlayer_Create(ref CriAtomExPlayer.Config config, IntPtr work, int work_size) { }

	// RVA: 0x119ABA0 Offset: 0x119ABA0 VA: 0x119ABA0
	private static extern void criAtomExPlayer_Destroy(IntPtr player) { }

	// RVA: 0x119ADF4 Offset: 0x119ADF4 VA: 0x119ADF4
	private static extern void criAtomExPlayer_SetCueId(IntPtr player, IntPtr acb_hn, int id) { }

	// RVA: 0x119ACB4 Offset: 0x119ACB4 VA: 0x119ACB4
	private static extern void criAtomExPlayer_SetCueName(IntPtr player, IntPtr acb_hn, string cue_name) { }

	// RVA: 0x119AF20 Offset: 0x119AF20 VA: 0x119AF20
	private static extern void criAtomExPlayer_SetCueIndex(IntPtr player, IntPtr acb_hn, int index) { }

	// RVA: 0x119B178 Offset: 0x119B178 VA: 0x119B178
	private static extern void criAtomExPlayer_SetFile(IntPtr player, IntPtr binder, string path) { }

	// RVA: 0x119B248 Offset: 0x119B248 VA: 0x119B248
	private static extern void criAtomExPlayer_SetData(IntPtr player, byte[] buffer, int size) { }

	// RVA: 0x119B30C Offset: 0x119B30C VA: 0x119B30C
	private static extern void criAtomExPlayer_SetData(IntPtr player, IntPtr buffer, int size) { }

	// RVA: 0x119B04C Offset: 0x119B04C VA: 0x119B04C
	private static extern void criAtomExPlayer_SetContentId(IntPtr player, IntPtr binder, int id) { }

	// RVA: 0x119F98C Offset: 0x119F98C VA: 0x119F98C
	private static extern void criAtomExPlayer_SetVoicePoolIdentifier(IntPtr player, uint identifier) { }

	// RVA: 0x119C1E8 Offset: 0x119C1E8 VA: 0x119C1E8
	private static extern uint criAtomExPlayer_Start(IntPtr player) { }

	// RVA: 0x119C2A0 Offset: 0x119C2A0 VA: 0x119C2A0
	private static extern uint criAtomExPlayer_Prepare(IntPtr player) { }

	// RVA: 0x119C3D0 Offset: 0x119C3D0 VA: 0x119C3D0
	private static extern void criAtomExPlayer_Stop(IntPtr player) { }

	// RVA: 0x119C46C Offset: 0x119C46C VA: 0x119C46C
	private static extern void criAtomExPlayer_StopWithoutReleaseTime(IntPtr player) { }

	// RVA: 0x119C5B0 Offset: 0x119C5B0 VA: 0x119C5B0
	private static extern void criAtomExPlayer_Pause(IntPtr player, bool sw) { }

	// RVA: 0x119C664 Offset: 0x119C664 VA: 0x119C664
	private static extern void criAtomExPlayer_Resume(IntPtr player, CriAtomEx.ResumeMode mode) { }

	// RVA: 0x119C718 Offset: 0x119C718 VA: 0x119C718
	private static extern bool criAtomExPlayer_IsPaused(IntPtr player) { }

	// RVA: 0x119F154 Offset: 0x119F154 VA: 0x119F154
	private static extern CriAtomExPlayer.Status criAtomExPlayer_GetStatus(IntPtr player) { }

	// RVA: 0x119F0B8 Offset: 0x119F0B8 VA: 0x119F0B8
	private static extern long criAtomExPlayer_GetTime(IntPtr player) { }

	// RVA: 0x119B3C8 Offset: 0x119B3C8 VA: 0x119B3C8
	private static extern void criAtomExPlayer_SetFormat(IntPtr player, CriAtomEx.Format format) { }

	// RVA: 0x119B47C Offset: 0x119B47C VA: 0x119B47C
	private static extern void criAtomExPlayer_SetNumChannels(IntPtr player, int num_channels) { }

	// RVA: 0x119B530 Offset: 0x119B530 VA: 0x119B530
	private static extern void criAtomExPlayer_SetSamplingRate(IntPtr player, int sampling_rate) { }

	// RVA: 0x119B684 Offset: 0x119B684 VA: 0x119B684
	private static extern IntPtr CRIWARE403F1372(IntPtr player, int capacity, int max_path, bool stopOnEmpty) { }

	// RVA: 0x119AB04 Offset: 0x119AB04 VA: 0x119AB04
	private static extern void CRIWARE37423455(IntPtr pool) { }

	// RVA: 0x119B7B0 Offset: 0x119B7B0 VA: 0x119B7B0
	private static extern int CRIWARE81598A72(IntPtr pool) { }

	// RVA: 0x119B8B4 Offset: 0x119B8B4 VA: 0x119B8B4
	private static extern int CRIWARE9B277B23(IntPtr pool) { }

	// RVA: 0x119C14C Offset: 0x119C14C VA: 0x119C14C
	private static extern void CRIWARE942D5C71(IntPtr pool) { }

	// RVA: 0x119BA10 Offset: 0x119BA10 VA: 0x119BA10
	private static extern bool CRIWAREF997453C(IntPtr pool, IntPtr binder, string path, bool repeat, int max_path) { }

	// RVA: 0x119BBB0 Offset: 0x119BBB0 VA: 0x119BBB0
	private static extern bool CRIWARE418B7DFF(IntPtr pool, IntPtr binder, int id, bool repeat) { }

	// RVA: 0x119BD14 Offset: 0x119BD14 VA: 0x119BD14
	private static extern bool CRIWARE674D0907(IntPtr pool, byte[] buffer, int size, bool repeat) { }

	// RVA: 0x119BE80 Offset: 0x119BE80 VA: 0x119BE80
	private static extern bool CRIWARE674D0907(IntPtr pool, IntPtr buffer, int size, bool repeat) { }

	// RVA: 0x119C000 Offset: 0x119C000 VA: 0x119C000
	private static extern bool CRIWAREC2A489BF(IntPtr pool, IntPtr acbhn, string name, bool repeat) { }

	// RVA: 0x119C508 Offset: 0x119C508 VA: 0x119C508
	private static extern void CRIWAREE7084891(IntPtr pool) { }

	// RVA: 0x119DC04 Offset: 0x119DC04 VA: 0x119DC04
	private static extern void criAtomExPlayer_SetStartTime(IntPtr player, long start_time_ms) { }

	// RVA: 0x119FB30 Offset: 0x119FB30 VA: 0x119FB30
	private static extern void criAtomExPlayer_SetSequencePrepareTime(IntPtr player, uint seq_prep_time_ms) { }

	// RVA: 0x119F614 Offset: 0x119F614 VA: 0x119F614
	private static extern void criAtomExPlayer_LimitLoopCount(IntPtr player, int count) { }

	// RVA: 0x119EEBC Offset: 0x119EEBC VA: 0x119EEBC
	private static extern void criAtomExPlayer_Update(IntPtr player, uint id) { }

	// RVA: 0x119EF70 Offset: 0x119EF70 VA: 0x119EF70
	private static extern void criAtomExPlayer_UpdateAll(IntPtr player) { }

	// RVA: 0x119F014 Offset: 0x119F014 VA: 0x119F014
	private static extern void criAtomExPlayer_ResetParameters(IntPtr player) { }

	// RVA: 0x119F1F8 Offset: 0x119F1F8 VA: 0x119F1F8
	private static extern float criAtomExPlayer_GetParameterFloat32(IntPtr player, CriAtomEx.Parameter id) { }

	// RVA: 0x119F2AC Offset: 0x119F2AC VA: 0x119F2AC
	private static extern uint criAtomExPlayer_GetParameterUint32(IntPtr player, CriAtomEx.Parameter id) { }

	// RVA: 0x119F360 Offset: 0x119F360 VA: 0x119F360
	private static extern int criAtomExPlayer_GetParameterSint32(IntPtr player, CriAtomEx.Parameter id) { }

	// RVA: 0x119F788 Offset: 0x119F788 VA: 0x119F788
	private static extern IntPtr criAtomExPlayer_GetPlayerParameter(IntPtr player) { }

	// RVA: 0x119F824 Offset: 0x119F824 VA: 0x119F824
	private static extern void criAtomExPlayerParameter_RemoveParameter(IntPtr player_parameter, ushort id) { }

	// RVA: 0x119C7C4 Offset: 0x119C7C4 VA: 0x119C7C4
	private static extern void criAtomExPlayer_SetVolume(IntPtr player, float volume) { }

	// RVA: 0x119C878 Offset: 0x119C878 VA: 0x119C878
	private static extern void criAtomExPlayer_SetPitch(IntPtr player, float pitch) { }

	// RVA: 0x119C92C Offset: 0x119C92C VA: 0x119C92C
	private static extern void criAtomExPlayer_SetPlaybackRatio(IntPtr player, float playback_ratio) { }

	// RVA: 0x119C9E0 Offset: 0x119C9E0 VA: 0x119C9E0
	private static extern void criAtomExPlayer_SetPan3dAngle(IntPtr player, float pan3d_angle) { }

	// RVA: 0x119CA94 Offset: 0x119CA94 VA: 0x119CA94
	private static extern void criAtomExPlayer_SetPan3dInteriorDistance(IntPtr player, float pan3d_interior_distance) { }

	// RVA: 0x119CB48 Offset: 0x119CB48 VA: 0x119CB48
	private static extern void criAtomExPlayer_SetPan3dVolume(IntPtr player, float pan3d_volume) { }

	// RVA: 0x119CBFC Offset: 0x119CBFC VA: 0x119CBFC
	private static extern void criAtomExPlayer_SetPanType(IntPtr player, CriAtomEx.PanType panType) { }

	// RVA: 0x119CCB0 Offset: 0x119CCB0 VA: 0x119CCB0
	private static extern void criAtomExPlayer_SetSendLevel(IntPtr player, int channel, CriAtomEx.Speaker id, float level) { }

	// RVA: 0x119D0C8 Offset: 0x119D0C8 VA: 0x119D0C8
	private static extern void criAtomExPlayer_SetBusSendLevel(IntPtr player, int bus_id, float level) { }

	// RVA: 0x119CF14 Offset: 0x119CF14 VA: 0x119CF14
	private static extern void criAtomExPlayer_SetBusSendLevelByName(IntPtr player, string bus_name, float level) { }

	// RVA: 0x119CFEC Offset: 0x119CFEC VA: 0x119CFEC
	private static extern bool criAtomExPlayer_GetBusSendLevelByName(IntPtr player, string bus_name, out float level) { }

	// RVA: 0x119D340 Offset: 0x119D340 VA: 0x119D340
	private static extern void criAtomExPlayer_SetBusSendLevelOffset(IntPtr player, int bus_id, float level_offset) { }

	// RVA: 0x119D18C Offset: 0x119D18C VA: 0x119D18C
	private static extern void criAtomExPlayer_SetBusSendLevelOffsetByName(IntPtr player, string bus_name, float level_offset) { }

	// RVA: 0x119D264 Offset: 0x119D264 VA: 0x119D264
	private static extern bool criAtomExPlayer_GetBusSendLevelOffsetByName(IntPtr player, string bus_name, out float level_offset) { }

	// RVA: 0x119CE58 Offset: 0x119CE58 VA: 0x119CE58
	private static extern void criAtomExPlayer_SetBandpassFilterParameters(IntPtr player, float cof_low, float cof_high) { }

	// RVA: 0x119CD7C Offset: 0x119CD7C VA: 0x119CD7C
	private static extern void criAtomExPlayer_SetBiquadFilterParameters(IntPtr player, CriAtomEx.BiquadFilterType type, float frequency, float gain, float q) { }

	// RVA: 0x119E290 Offset: 0x119E290 VA: 0x119E290
	private static extern void criAtomExPlayer_SetVoicePriority(IntPtr player, int priority) { }

	// RVA: 0x119E344 Offset: 0x119E344 VA: 0x119E344
	private static extern void criAtomExPlayer_SetVoiceControlMethod(IntPtr player, CriAtomEx.VoiceControlMethod method) { }

	// RVA: 0x119D674 Offset: 0x119D674 VA: 0x119D674
	private static extern void criAtomExPlayer_SetAisacControlById(IntPtr player, ushort control_id, float control_value) { }

	// RVA: 0x119D594 Offset: 0x119D594 VA: 0x119D594
	private static extern void criAtomExPlayer_SetAisacControlByName(IntPtr player, string control_name, float control_value) { }

	// RVA: 0x119DA34 Offset: 0x119DA34 VA: 0x119DA34
	private static extern void criAtomExPlayer_Set3dSourceHn(IntPtr player, IntPtr source) { }

	// RVA: 0x119DB50 Offset: 0x119DB50 VA: 0x119DB50
	private static extern void criAtomExPlayer_Set3dListenerHn(IntPtr player, IntPtr listener) { }

	// RVA: 0x119DFBC Offset: 0x119DFBC VA: 0x119DFBC
	private static extern void criAtomExPlayer_SetCategoryById(IntPtr player, uint category_id) { }

	// RVA: 0x119E070 Offset: 0x119E070 VA: 0x119E070
	private static extern void criAtomExPlayer_SetCategoryByName(IntPtr player, string category_name) { }

	// RVA: 0x119E138 Offset: 0x119E138 VA: 0x119E138
	private static extern void criAtomExPlayer_UnsetCategory(IntPtr player) { }

	// RVA: 0x119E1DC Offset: 0x119E1DC VA: 0x119E1DC
	private static extern void criAtomExPlayer_SetCuePriority(IntPtr player, int cue_priority) { }

	// RVA: 0x119E3F8 Offset: 0x119E3F8 VA: 0x119E3F8
	private static extern void criAtomExPlayer_SetPreDelayTime(IntPtr player, float predelay_time_ms) { }

	// RVA: 0x119E4AC Offset: 0x119E4AC VA: 0x119E4AC
	private static extern void criAtomExPlayer_SetEnvelopeAttackTime(IntPtr player, float attack_time_ms) { }

	// RVA: 0x119E560 Offset: 0x119E560 VA: 0x119E560
	private static extern void criAtomExPlayer_SetEnvelopeHoldTime(IntPtr player, float hold_time_ms) { }

	// RVA: 0x119E614 Offset: 0x119E614 VA: 0x119E614
	private static extern void criAtomExPlayer_SetEnvelopeDecayTime(IntPtr player, float decay_time_ms) { }

	// RVA: 0x119E6C8 Offset: 0x119E6C8 VA: 0x119E6C8
	private static extern void criAtomExPlayer_SetEnvelopeReleaseTime(IntPtr player, float release_time_ms) { }

	// RVA: 0x119E77C Offset: 0x119E77C VA: 0x119E77C
	private static extern void criAtomExPlayer_SetEnvelopeSustainLevel(IntPtr player, float susutain_level) { }

	// RVA: 0x119E878 Offset: 0x119E878 VA: 0x119E878
	private static extern void criAtomExPlayer_AttachFader(IntPtr player, IntPtr config, IntPtr work, int work_size) { }

	// RVA: 0x119D404 Offset: 0x119D404 VA: 0x119D404
	private static extern void criAtomExPlayer_AttachAisac(IntPtr player, string globalAisacName) { }

	// RVA: 0x119D4CC Offset: 0x119D4CC VA: 0x119D4CC
	private static extern void criAtomExPlayer_DetachAisac(IntPtr player, string globalAisacName) { }

	// RVA: 0x119E944 Offset: 0x119E944 VA: 0x119E944
	private static extern void criAtomExPlayer_DetachFader(IntPtr player) { }

	// RVA: 0x119E9E8 Offset: 0x119E9E8 VA: 0x119E9E8
	private static extern void criAtomExPlayer_SetFadeOutTime(IntPtr player, int ms) { }

	// RVA: 0x119EA9C Offset: 0x119EA9C VA: 0x119EA9C
	private static extern void criAtomExPlayer_SetFadeInTime(IntPtr player, int ms) { }

	// RVA: 0x119EB50 Offset: 0x119EB50 VA: 0x119EB50
	private static extern void criAtomExPlayer_SetFadeInStartOffset(IntPtr player, int ms) { }

	// RVA: 0x119EC04 Offset: 0x119EC04 VA: 0x119EC04
	private static extern void criAtomExPlayer_SetFadeOutEndDelay(IntPtr player, int ms) { }

	// RVA: 0x119ECB8 Offset: 0x119ECB8 VA: 0x119ECB8
	private static extern bool criAtomExPlayer_IsFading(IntPtr player) { }

	// RVA: 0x119ED64 Offset: 0x119ED64 VA: 0x119ED64
	private static extern void criAtomExPlayer_ResetFaderParameters(IntPtr player) { }

	// RVA: 0x119EE08 Offset: 0x119EE08 VA: 0x119EE08
	private static extern void criAtomExPlayer_SetGroupNumber(IntPtr player, int group_no) { }

	// RVA: 0x119D908 Offset: 0x119D908 VA: 0x119D908
	private static extern bool criAtomExPlayer_GetAttachedAisacInfo(IntPtr player, int aisac_attached_index, IntPtr aisac_info) { }

	// RVA: 0x119DCB8 Offset: 0x119DCB8 VA: 0x119DCB8
	private static extern void criAtomExPlayer_SetFirstBlockIndex(IntPtr player, int index) { }

	// RVA: 0x119DD6C Offset: 0x119DD6C VA: 0x119DD6C
	private static extern void criAtomExPlayer_SetSelectorLabel(IntPtr player, string selector, string label) { }

	// RVA: 0x119DE50 Offset: 0x119DE50 VA: 0x119DE50
	private static extern void criAtomExPlayer_UnsetSelectorLabel(IntPtr player, string selector) { }

	// RVA: 0x119DF18 Offset: 0x119DF18 VA: 0x119DF18
	private static extern void criAtomExPlayer_ClearSelectorLabels(IntPtr player) { }

	// RVA: 0x119F414 Offset: 0x119F414 VA: 0x119F414
	private static extern void criAtomExPlayer_SetSoundRendererType(IntPtr player, CriAtomEx.SoundRendererType type) { }

	// RVA: 0x119F4C8 Offset: 0x119F4C8 VA: 0x119F4C8
	private static extern void criAtomExPlayer_SetRandomSeed(IntPtr player, uint seed) { }

	// RVA: 0x11A01F0 Offset: 0x11A01F0 VA: 0x11A01F0
	private static extern void CRIWARE250770DC(IntPtr player, bool sw) { }

	// RVA: 0x119F8D8 Offset: 0x119F8D8 VA: 0x119F8D8
	private static extern void criAtomExPlayer_SetAsrRackId(IntPtr player, int asr_rack_id) { }

	// RVA: 0x119FA6C Offset: 0x119FA6C VA: 0x119FA6C
	private static extern void criAtomExPlayer_SetDspParameter(IntPtr player, int id, float value) { }

	// RVA: 0x119FC18 Offset: 0x119FC18 VA: 0x119FC18
	private static extern void criAtomExPlayer_AttachTween(IntPtr player, IntPtr tween) { }

	// RVA: 0x119FCF8 Offset: 0x119FCF8 VA: 0x119FCF8
	private static extern void criAtomExPlayer_DetachTween(IntPtr player, IntPtr tween) { }

	// RVA: 0x119FDAC Offset: 0x119FDAC VA: 0x119FDAC
	private static extern void criAtomExPlayer_DetachTweenAll(IntPtr player) { }
}

// Namespace: 
public enum CriAtomExPlayer.Status // TypeDefIndex: 3955
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExPlayer.Status Stop = 0;
	public const CriAtomExPlayer.Status Prep = 1;
	public const CriAtomExPlayer.Status Playing = 2;
	public const CriAtomExPlayer.Status PlayEnd = 3;
	public const CriAtomExPlayer.Status Error = 4;
}

// Namespace: 
private struct CriAtomExPlayer.Config // TypeDefIndex: 3956
{
	// Fields
	public CriAtomEx.VoiceAllocationMethod voiceAllocationMethod; // 0x0
	public int maxPathStrings; // 0x4
	public int maxPath; // 0x8
	public int maxAisacs; // 0xC
	public bool updatesTime; // 0x10
	public bool enableAudioSyncedTimer; // 0x11
}

// Namespace: 
public enum CriAtomExPlayer.TimeStretchParameterId // TypeDefIndex: 3957
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExPlayer.TimeStretchParameterId Ratio = 0;
	public const CriAtomExPlayer.TimeStretchParameterId FrameTime = 1;
	public const CriAtomExPlayer.TimeStretchParameterId Quality = 2;
}

// Namespace: 
public enum CriAtomExPlayer.PitchShifterParameterId // TypeDefIndex: 3958
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExPlayer.PitchShifterParameterId Pitch = 0;
	public const CriAtomExPlayer.PitchShifterParameterId Formant = 1;
	public const CriAtomExPlayer.PitchShifterParameterId Mode = 2;
}

// Namespace: 
[ObsoleteAttribute] // RVA: 0xC8B03C Offset: 0xC8B03C VA: 0xC8B03C
public class CriAtomExPlayerOutputAnalyzer : CriAtomExOutputAnalyzer // TypeDefIndex: 3959
{
	// Methods

	// RVA: 0x11A029C Offset: 0x11A029C VA: 0x11A029C
	public void .ctor(CriAtomExPlayerOutputAnalyzer.Type[] types, CriAtomExPlayerOutputAnalyzer.Config[] configs) { }
}

// Namespace: 
public enum CriAtomExPlayerOutputAnalyzer.Type // TypeDefIndex: 3960
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExPlayerOutputAnalyzer.Type LevelMeter = 0;
	public const CriAtomExPlayerOutputAnalyzer.Type SpectrumAnalyzer = 1;
	public const CriAtomExPlayerOutputAnalyzer.Type PcmCapture = 2;
}

// Namespace: 
public struct CriAtomExPlayerOutputAnalyzer.Config // TypeDefIndex: 3961
{
	// Fields
	public int num_spectrum_analyzer_bands; // 0x0
	public int num_stored_output_data; // 0x4

	// Methods

	// RVA: 0xBBCF2C Offset: 0xBBCF2C VA: 0xBBCF2C
	public void .ctor(int num_spectrum_analyzer_bands = 8, int num_stored_output_data = 4096) { }
}

// Namespace: 
public class CriAtomExSoundObject : CriDisposable // TypeDefIndex: 3962
{
	// Fields
	private IntPtr handle; // 0x20

	// Properties
	public IntPtr nativeHandle { get; }

	// Methods

	// RVA: 0x11A0BB0 Offset: 0x11A0BB0 VA: 0x11A0BB0
	public void .ctor(bool enableVoiceLimitScope, bool enableCategoryCueLimitScope) { }

	// RVA: 0x11A0DBC Offset: 0x11A0DBC VA: 0x11A0DBC
	public IntPtr get_nativeHandle() { }

	// RVA: 0x11A0DC4 Offset: 0x11A0DC4 VA: 0x11A0DC4 Slot: 5
	public override void Dispose() { }

	// RVA: 0x11A0EF4 Offset: 0x11A0EF4 VA: 0x11A0EF4
	public void AddPlayer(CriAtomExPlayer player) { }

	// RVA: 0x11A0FD4 Offset: 0x11A0FD4 VA: 0x11A0FD4
	public void DeletePlayer(CriAtomExPlayer player) { }

	// RVA: 0x11A10B4 Offset: 0x11A10B4 VA: 0x11A10B4
	public void DeleteAllPlayers() { }

	// RVA: 0x11A1158 Offset: 0x11A1158 VA: 0x11A1158 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11A0CDC Offset: 0x11A0CDC VA: 0x11A0CDC
	private static extern IntPtr criAtomExSoundObject_Create(ref CriAtomExSoundObject.Config config, IntPtr work, int work_size) { }

	// RVA: 0x11A0E58 Offset: 0x11A0E58 VA: 0x11A0E58
	private static extern void criAtomExSoundObject_Destroy(IntPtr soundObject) { }

	// RVA: 0x11A0F28 Offset: 0x11A0F28 VA: 0x11A0F28
	private static extern void criAtomExSoundObject_AddPlayer(IntPtr soundObject, IntPtr player) { }

	// RVA: 0x11A1008 Offset: 0x11A1008 VA: 0x11A1008
	private static extern void criAtomExSoundObject_DeletePlayer(IntPtr soundObject, IntPtr player) { }

	// RVA: 0x11A10BC Offset: 0x11A10BC VA: 0x11A10BC
	private static extern void criAtomExSoundObject_DeleteAllPlayers(IntPtr soundObject) { }
}

// Namespace: 
private struct CriAtomExSoundObject.Config // TypeDefIndex: 3963
{
	// Fields
	public bool enableVoiceLimitScope; // 0x0
	public bool enableCategoryCueLimitScope; // 0x1
}

// Namespace: 
public class CriAtomExTween : CriDisposable // TypeDefIndex: 3964
{
	// Fields
	private IntPtr handle; // 0x20

	// Properties
	internal IntPtr nativeHandle { get; }
	public float Value { get; }
	public bool IsActive { get; }

	// Methods

	// RVA: 0x11A140C Offset: 0x11A140C VA: 0x11A140C
	public void .ctor() { }

	// RVA: 0x11A1418 Offset: 0x11A1418 VA: 0x11A1418
	public void .ctor(CriAtomEx.Parameter parameterId) { }

	// RVA: 0x11A1548 Offset: 0x11A1548 VA: 0x11A1548
	public void .ctor(uint aisacId) { }

	// RVA: 0x11A1428 Offset: 0x11A1428 VA: 0x11A1428
	public void .ctor(CriAtomExTween.ParameterType parameterType, uint targetId) { }

	// RVA: 0x119FC10 Offset: 0x119FC10 VA: 0x119FC10
	internal IntPtr get_nativeHandle() { }

	// RVA: 0x11A160C Offset: 0x11A160C VA: 0x11A160C Slot: 5
	public override void Dispose() { }

	// RVA: 0x11A1728 Offset: 0x11A1728 VA: 0x11A1728
	public float get_Value() { }

	// RVA: 0x11A17CC Offset: 0x11A17CC VA: 0x11A17CC
	public bool get_IsActive() { }

	// RVA: 0x11A1878 Offset: 0x11A1878 VA: 0x11A1878
	public void MoveTo(ushort durationMs, float value) { }

	// RVA: 0x11A193C Offset: 0x11A193C VA: 0x11A193C
	public void MoveFrom(ushort durationMs, float value) { }

	// RVA: 0x11A1A00 Offset: 0x11A1A00 VA: 0x11A1A00
	public void Stop() { }

	// RVA: 0x11A1AA4 Offset: 0x11A1AA4 VA: 0x11A1AA4
	public void Reset() { }

	// RVA: 0x11A1B48 Offset: 0x11A1B48 VA: 0x11A1B48 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11A1558 Offset: 0x11A1558 VA: 0x11A1558
	private static extern IntPtr criAtomExTween_Create(ref CriAtomExTween.Config config, IntPtr work, int work_size) { }

	// RVA: 0x11A168C Offset: 0x11A168C VA: 0x11A168C
	private static extern void criAtomExTween_Destroy(IntPtr tween) { }

	// RVA: 0x11A1730 Offset: 0x11A1730 VA: 0x11A1730
	private static extern float criAtomExTween_GetValue(IntPtr tween) { }

	// RVA: 0x11A1880 Offset: 0x11A1880 VA: 0x11A1880
	private static extern void criAtomExTween_MoveTo(IntPtr tween, ushort time_ms, float value) { }

	// RVA: 0x11A1944 Offset: 0x11A1944 VA: 0x11A1944
	private static extern void criAtomExTween_MoveFrom(IntPtr tween, ushort time_ms, float value) { }

	// RVA: 0x11A1A08 Offset: 0x11A1A08 VA: 0x11A1A08
	private static extern void criAtomExTween_Stop(IntPtr tween) { }

	// RVA: 0x11A1AAC Offset: 0x11A1AAC VA: 0x11A1AAC
	private static extern void criAtomExTween_Reset(IntPtr tween) { }

	// RVA: 0x11A17D4 Offset: 0x11A17D4 VA: 0x11A17D4
	private static extern bool criAtomExTween_IsActive(IntPtr tween) { }
}

// Namespace: 
public enum CriAtomExTween.ParameterType // TypeDefIndex: 3965
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExTween.ParameterType Basic = 0;
	public const CriAtomExTween.ParameterType Aisac = 1;
}

// Namespace: 
private struct CriAtomExTween.Config // TypeDefIndex: 3966
{
	// Fields
	public CriAtomExTween.Config.Target target; // 0x0
	public CriAtomExTween.ParameterType parameterType; // 0x4
}

// Namespace: 
public struct CriAtomExTween.Config.Target // TypeDefIndex: 3967
{
	// Fields
	public CriAtomEx.Parameter parameterId; // 0x0
	public uint aisacIds; // 0x0
}

// Namespace: 
public abstract class CriAtomExVoicePool : CriDisposable // TypeDefIndex: 3968
{
	// Fields
	public const int StandardMemoryAsrVoicePoolId = 0;
	public const int StandardStreamingAsrVoicePoolId = 1;
	public const int StandardMemoryNsrVoicePoolId = 2;
	public const int StandardStreamingNsrVoicePoolId = 3;
	protected IntPtr _handle; // 0x20
	protected uint _identifier; // 0x28
	protected int _numVoices; // 0x2C
	protected int _maxChannels; // 0x30
	protected int _maxSamplingRate; // 0x34

	// Properties
	public IntPtr nativeHandle { get; }
	public uint identifier { get; }
	public int numVoices { get; }
	public int maxChannels { get; }
	public int maxSamplingRate { get; }

	// Methods

	// RVA: 0x11A059C Offset: 0x11A059C VA: 0x11A059C
	protected void .ctor() { }

	// RVA: 0x11A1BC4 Offset: 0x11A1BC4 VA: 0x11A1BC4
	public static CriAtomExVoicePool.UsedVoicesInfo GetNumUsedVoices(CriAtomExVoicePool.VoicePoolId voicePoolId) { }

	// RVA: 0x11A1CA8 Offset: 0x11A1CA8 VA: 0x11A1CA8
	public IntPtr get_nativeHandle() { }

	// RVA: 0x11A1CB0 Offset: 0x11A1CB0 VA: 0x11A1CB0
	public uint get_identifier() { }

	// RVA: 0x11A1CB8 Offset: 0x11A1CB8 VA: 0x11A1CB8
	public int get_numVoices() { }

	// RVA: 0x11A1CC0 Offset: 0x11A1CC0 VA: 0x11A1CC0
	public int get_maxChannels() { }

	// RVA: 0x11A1CC8 Offset: 0x11A1CC8 VA: 0x11A1CC8
	public int get_maxSamplingRate() { }

	// RVA: 0x11A1CD0 Offset: 0x11A1CD0 VA: 0x11A1CD0 Slot: 5
	public override void Dispose() { }

	// RVA: 0x11A1E00 Offset: 0x11A1E00 VA: 0x11A1E00
	public CriAtomExVoicePool.UsedVoicesInfo GetNumUsedVoices() { }

	// RVA: 0x11A1F38 Offset: 0x11A1F38 VA: 0x11A1F38
	public void AttachDspTimeStretch() { }

	// RVA: 0x11A2088 Offset: 0x11A2088 VA: 0x11A2088
	public void AttachDspPitchShifter(CriAtomExVoicePool.PitchShifterMode mode = 0, int windosSize = 1024, int overlapTimes = 4) { }

	// RVA: 0x11A21FC Offset: 0x11A21FC VA: 0x11A21FC
	public void DetachDsp() { }

	// RVA: 0x11A22FC Offset: 0x11A22FC VA: 0x11A22FC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11A1BF4 Offset: 0x11A1BF4 VA: 0x11A1BF4
	private static extern void CRIWARE9CE3EB11(int voice_pool_id, out int num_used_voices, out int num_pool_voices) { }

	// RVA: 0x11A1E84 Offset: 0x11A1E84 VA: 0x11A1E84
	private static extern void criAtomExVoicePool_GetNumUsedVoices(IntPtr pool, out int num_used_voices, out int num_pool_voices) { }

	// RVA: 0x11A1D64 Offset: 0x11A1D64 VA: 0x11A1D64
	public static extern void criAtomExVoicePool_Free(IntPtr pool) { }

	// RVA: 0x11A1FC4 Offset: 0x11A1FC4 VA: 0x11A1FC4
	private static extern void criAtomExVoicePool_AttachDspTimeStretch(IntPtr pool, ref CriAtomExVoicePool.ExTimeStretchConfig config, IntPtr work, int work_size) { }

	// RVA: 0x11A2138 Offset: 0x11A2138 VA: 0x11A2138
	private static extern void criAtomExVoicePool_AttachDspPitchShifter(IntPtr pool, ref CriAtomExVoicePool.ExPitchShifterConfig config, IntPtr work, int work_size) { }

	// RVA: 0x11A2260 Offset: 0x11A2260 VA: 0x11A2260
	private static extern void criAtomExVoicePool_DetachDsp(IntPtr pool) { }
}

// Namespace: 
public enum CriAtomExVoicePool.VoicePoolId // TypeDefIndex: 3969
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExVoicePool.VoicePoolId StandardMemory = 0;
	public const CriAtomExVoicePool.VoicePoolId StandardStreaming = 1;
	public const CriAtomExVoicePool.VoicePoolId HcaMxMemory = 4;
	public const CriAtomExVoicePool.VoicePoolId HcaMxStreaming = 5;
	public const CriAtomExVoicePool.VoicePoolId LowLatencyMemory = 2;
	public const CriAtomExVoicePool.VoicePoolId LowLatencyStreaming = 3;
}

// Namespace: 
public enum CriAtomExVoicePool.PitchShifterMode // TypeDefIndex: 3970
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExVoicePool.PitchShifterMode Music = 0;
	public const CriAtomExVoicePool.PitchShifterMode Vocal = 1;
	public const CriAtomExVoicePool.PitchShifterMode SoundEffect = 2;
	public const CriAtomExVoicePool.PitchShifterMode Speech = 3;
}

// Namespace: 
public struct CriAtomExVoicePool.UsedVoicesInfo // TypeDefIndex: 3971
{
	// Fields
	public int numUsedVoices; // 0x0
	public int numPoolVoices; // 0x4
}

// Namespace: 
protected struct CriAtomExVoicePool.PlayerConfig // TypeDefIndex: 3972
{
	// Fields
	public int maxChannels; // 0x0
	public int maxSamplingRate; // 0x4
	public bool streamingFlag; // 0x8
	public int soundRendererType; // 0xC
	public int decodeLatency; // 0x10
}

// Namespace: 
protected struct CriAtomExVoicePool.VoicePoolConfig // TypeDefIndex: 3973
{
	// Fields
	public uint identifier; // 0x0
	public int numVoices; // 0x4
	public CriAtomExVoicePool.PlayerConfig playerConfig; // 0x8
}

// Namespace: 
private struct CriAtomExVoicePool.PitchShifterConfig // TypeDefIndex: 3974
{
	// Fields
	public int mode; // 0x0
	public int windowSize; // 0x4
	public int overlapTimes; // 0x8
}

// Namespace: 
private struct CriAtomExVoicePool.ExPitchShifterConfig // TypeDefIndex: 3975
{
	// Fields
	public int numDsp; // 0x0
	public int maxChannels; // 0x4
	public int maxSamplingRate; // 0x8
	public CriAtomExVoicePool.PitchShifterConfig config; // 0xC
}

// Namespace: 
private struct CriAtomExVoicePool.TimeStretchConfig // TypeDefIndex: 3976
{
	// Fields
	public int reserved; // 0x0
}

// Namespace: 
private struct CriAtomExVoicePool.ExTimeStretchConfig // TypeDefIndex: 3977
{
	// Fields
	public int numDsp; // 0x0
	public int maxChannels; // 0x4
	public int maxSamplingRate; // 0x8
	public CriAtomExVoicePool.TimeStretchConfig config; // 0xC
}

// Namespace: 
public class CriAtomExStandardVoicePool : CriAtomExVoicePool // TypeDefIndex: 3978
{
	// Methods

	// RVA: 0x11A11D4 Offset: 0x11A11D4 VA: 0x11A11D4
	public void .ctor(int numVoices, int maxChannels, int maxSamplingRate, bool streamingFlag, uint identifier = 0) { }

	// RVA: 0x11A1310 Offset: 0x11A1310 VA: 0x11A1310
	private static extern IntPtr criAtomExVoicePool_AllocateStandardVoicePool(ref CriAtomExVoicePool.VoicePoolConfig config, IntPtr work, int work_size) { }
}

// Namespace: 
public class CriAtomExWaveVoicePool : CriAtomExVoicePool // TypeDefIndex: 3979
{
	// Methods

	// RVA: 0x11A2378 Offset: 0x11A2378 VA: 0x11A2378
	public void .ctor(int numVoices, int maxChannels, int maxSamplingRate, bool streamingFlag, uint identifier = 0) { }

	// RVA: 0x11A24B4 Offset: 0x11A24B4 VA: 0x11A24B4
	private static extern IntPtr criAtomExVoicePool_AllocateWaveVoicePool(ref CriAtomExVoicePool.VoicePoolConfig config, IntPtr work, int work_size) { }
}

// Namespace: 
public class CriAtomExRawPcmVoicePool : CriAtomExVoicePool // TypeDefIndex: 3980
{
	// Methods

	// RVA: 0x11A046C Offset: 0x11A046C VA: 0x11A046C
	public void .ctor(int numVoices, int maxChannels, int maxSamplingRate, CriAtomExRawPcmVoicePool.RawPcmFormat format, uint identifier = 0) { }

	// RVA: 0x11A05E8 Offset: 0x11A05E8 VA: 0x11A05E8
	private static extern IntPtr criAtomExVoicePool_AllocateRawPcmVoicePool(ref CriAtomExRawPcmVoicePool.RawPcmVoicePoolConfig config, IntPtr work, int work_size) { }
}

// Namespace: 
public enum CriAtomExRawPcmVoicePool.RawPcmFormat // TypeDefIndex: 3981
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExRawPcmVoicePool.RawPcmFormat Sint16 = 0;
	public const CriAtomExRawPcmVoicePool.RawPcmFormat Float32 = 1;
}

// Namespace: 
protected struct CriAtomExRawPcmVoicePool.RawPcmPlayerConfig // TypeDefIndex: 3982
{
	// Fields
	public CriAtomExRawPcmVoicePool.RawPcmFormat format; // 0x0
	public int maxChannels; // 0x4
	public int maxSamplingRate; // 0x8
	public int soundRendererType; // 0xC
	public int decodeLatency; // 0x10
}

// Namespace: 
protected struct CriAtomExRawPcmVoicePool.RawPcmVoicePoolConfig // TypeDefIndex: 3983
{
	// Fields
	public uint identifier; // 0x0
	public int numVoices; // 0x4
	public CriAtomExRawPcmVoicePool.RawPcmPlayerConfig playerConfig; // 0x8
}

// Namespace: 
public class CriAudioReadStream // TypeDefIndex: 3984
{
	// Fields
	private CriAudioReadStream.InternalDelegate internalDelegate; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC8CF5C Offset: 0xC8CF5C VA: 0xC8CF5C
	[DebuggerBrowsableAttribute] // RVA: 0xC8CF5C Offset: 0xC8CF5C VA: 0xC8CF5C
	private IntPtr <callbackFunction>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC8CF98 Offset: 0xC8CF98 VA: 0xC8CF98
	[DebuggerBrowsableAttribute] // RVA: 0xC8CF98 Offset: 0xC8CF98 VA: 0xC8CF98
	private IntPtr <callbackPointer>k__BackingField; // 0x20

	// Properties
	public IntPtr callbackFunction { get; set; }
	public IntPtr callbackPointer { get; set; }

	// Methods

	// RVA: 0x11AB010 Offset: 0x11AB010 VA: 0x11AB010
	public void .ctor(IntPtr callbackFunction, IntPtr callbackPointer) { }

	// RVA: 0x11AB058 Offset: 0x11AB058 VA: 0x11AB058
	public void .ctor(CriAudioReadStream.Delegate callback, int numChannels, int bufferSize = 256) { }

