
	// RVA: 0x15E7564 Offset: 0x15E7564 VA: 0x15E7564
	public void OnClickCancel() { }
}

// Namespace: 
protected enum TakeoverConfirmMenu.State // TypeDefIndex: 11667
{
	// Fields
	public int value__; // 0x0
	public const TakeoverConfirmMenu.State INIT = 0;
	public const TakeoverConfirmMenu.State OPEN = 1;
	public const TakeoverConfirmMenu.State INPUT = 2;
	public const TakeoverConfirmMenu.State SELECTED = 3;
	public const TakeoverConfirmMenu.State CLOSE = 4;
}

// Namespace: 
public sealed class TakeoverConfirmMenu.CallbackFunc : MulticastDelegate // TypeDefIndex: 11668
{
	// Methods

	// RVA: 0x15E7604 Offset: 0x15E7604 VA: 0x15E7604
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15E7298 Offset: 0x15E7298 VA: 0x15E7298 Slot: 11
	public virtual void Invoke(bool result) { }

	// RVA: 0x15E7614 Offset: 0x15E7614 VA: 0x15E7614 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool result, AsyncCallback callback, object object) { }

	// RVA: 0x15E76A4 Offset: 0x15E76A4 VA: 0x15E76A4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class TakeoverDecideMenu : BaseDialog // TypeDefIndex: 11669
{
	// Fields
	[SerializeField] // RVA: 0xCED60C Offset: 0xCED60C VA: 0xCED60C
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCED61C Offset: 0xCED61C VA: 0xCED61C
	protected UILabel messageLabel; // 0x60
	[SerializeField] // RVA: 0xCED62C Offset: 0xCED62C VA: 0xCED62C
	protected UILabel info1Label; // 0x68
	[SerializeField] // RVA: 0xCED63C Offset: 0xCED63C VA: 0xCED63C
	protected UILabel info2Label; // 0x70
	[SerializeField] // RVA: 0xCED64C Offset: 0xCED64C VA: 0xCED64C
	protected UILabel warningLabel; // 0x78
	[SerializeField] // RVA: 0xCED65C Offset: 0xCED65C VA: 0xCED65C
	protected UILabel closeLabel; // 0x80
	[SerializeField] // RVA: 0xCED66C Offset: 0xCED66C VA: 0xCED66C
	protected UIButton closeButton; // 0x88
	protected TakeoverDecideMenu.State state; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xCED67C Offset: 0xCED67C VA: 0xCED67C
	[DebuggerBrowsableAttribute] // RVA: 0xCED67C Offset: 0xCED67C VA: 0xCED67C
	private TakeoverDecideMenu.CallbackFunc callbackFunc; // 0x98
	protected Action closeCallbackFunc; // 0xA0

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x15E76B0 Offset: 0x15E76B0 VA: 0x15E76B0
	public void .ctor() { }

	// RVA: 0x15E7718 Offset: 0x15E7718 VA: 0x15E7718
	protected void add_callbackFunc(TakeoverDecideMenu.CallbackFunc value) { }

	// RVA: 0x15E7804 Offset: 0x15E7804 VA: 0x15E7804
	protected void remove_callbackFunc(TakeoverDecideMenu.CallbackFunc value) { }

	// RVA: 0x15E78F0 Offset: 0x15E78F0 VA: 0x15E78F0
	public void Init() { }

	// RVA: 0x15E7A6C Offset: 0x15E7A6C VA: 0x15E7A6C
	public void Open(string userName, TakeoverDecideMenu.CallbackFunc callback) { }

	// RVA: 0x15E7CBC Offset: 0x15E7CBC VA: 0x15E7CBC
	protected void EndOpen() { }

	// RVA: 0x15E7CC8 Offset: 0x15E7CC8 VA: 0x15E7CC8
	public void Close() { }

	// RVA: 0x15E7CD0 Offset: 0x15E7CD0 VA: 0x15E7CD0
	public void Close(Action callback) { }

	// RVA: 0x15E7D60 Offset: 0x15E7D60 VA: 0x15E7D60
	protected void EndClose() { }

	// RVA: 0x15E7D9C Offset: 0x15E7D9C VA: 0x15E7D9C
	protected void Callback(bool result) { }

	// RVA: 0x15E7FE8 Offset: 0x15E7FE8 VA: 0x15E7FE8
	public void OnClickClose() { }

	// RVA: 0x15E8088 Offset: 0x15E8088 VA: 0x15E8088 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
protected enum TakeoverDecideMenu.State // TypeDefIndex: 11670
{
	// Fields
	public int value__; // 0x0
	public const TakeoverDecideMenu.State INIT = 0;
	public const TakeoverDecideMenu.State OPEN = 1;
	public const TakeoverDecideMenu.State INPUT = 2;
	public const TakeoverDecideMenu.State SELECTED = 3;
	public const TakeoverDecideMenu.State CLOSE = 4;
}

// Namespace: 
public sealed class TakeoverDecideMenu.CallbackFunc : MulticastDelegate // TypeDefIndex: 11671
{
	// Methods

	// RVA: 0x15E80D0 Offset: 0x15E80D0 VA: 0x15E80D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15E7DBC Offset: 0x15E7DBC VA: 0x15E7DBC Slot: 11
	public virtual void Invoke(bool result) { }

	// RVA: 0x15E80E0 Offset: 0x15E80E0 VA: 0x15E80E0 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool result, AsyncCallback callback, object object) { }

	// RVA: 0x15E8170 Offset: 0x15E8170 VA: 0x15E8170 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class TermsOfUseMenu : BaseDialog // TypeDefIndex: 11672
{
	// Fields
	protected static readonly string SAVE_KEY; // 0x0
	protected static readonly string SAVE_DEFAULT_STR; // 0x8
	[SerializeField] // RVA: 0xCED6B8 Offset: 0xCED6B8 VA: 0xCED6B8
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCED6C8 Offset: 0xCED6C8 VA: 0xCED6C8
	protected UILabel messageLabel; // 0x60
	[SerializeField] // RVA: 0xCED6D8 Offset: 0xCED6D8 VA: 0xCED6D8
	protected UILabel showLabel; // 0x68
	[SerializeField] // RVA: 0xCED6E8 Offset: 0xCED6E8 VA: 0xCED6E8
	protected UILabel decideLabel; // 0x70
	[SerializeField] // RVA: 0xCED6F8 Offset: 0xCED6F8 VA: 0xCED6F8
	protected UILabel cancelLabel; // 0x78
	protected TermsOfUseMenu.State state; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCED708 Offset: 0xCED708 VA: 0xCED708
	[DebuggerBrowsableAttribute] // RVA: 0xCED708 Offset: 0xCED708 VA: 0xCED708
	private TermsOfUseMenu.CallbackFunc callbackFunc; // 0x88
	protected Action closeCallbackFunc; // 0x90

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x141B970 Offset: 0x141B970 VA: 0x141B970
	public void .ctor() { }

	// RVA: 0x141B9D8 Offset: 0x141B9D8 VA: 0x141B9D8
	protected void add_callbackFunc(TermsOfUseMenu.CallbackFunc value) { }

	// RVA: 0x141BAC4 Offset: 0x141BAC4 VA: 0x141BAC4
	protected void remove_callbackFunc(TermsOfUseMenu.CallbackFunc value) { }

	// RVA: 0x141BBB0 Offset: 0x141BBB0 VA: 0x141BBB0
	public bool IsConcent() { }

	// RVA: 0x141BCC4 Offset: 0x141BCC4 VA: 0x141BCC4
	public bool IsConcentFirst() { }

	// RVA: 0x141B77C Offset: 0x141B77C VA: 0x141B77C
	public static void Save() { }

	// RVA: 0x141BDB4 Offset: 0x141BDB4 VA: 0x141BDB4
	public void Init() { }

	// RVA: 0x141BED8 Offset: 0x141BED8 VA: 0x141BED8
	public void Open(TermsOfUseMenu.CallbackFunc callback) { }

	// RVA: 0x141C118 Offset: 0x141C118 VA: 0x141C118
	protected void EndOpen() { }

	// RVA: 0x141C124 Offset: 0x141C124 VA: 0x141C124
	public void Close() { }

	// RVA: 0x141C12C Offset: 0x141C12C VA: 0x141C12C
	public void Close(Action callback) { }

	// RVA: 0x141C1BC Offset: 0x141C1BC VA: 0x141C1BC
	protected void EndClose() { }

	// RVA: 0x141C1F8 Offset: 0x141C1F8 VA: 0x141C1F8
	protected void Callback(bool result) { }

	// RVA: 0x141C444 Offset: 0x141C444 VA: 0x141C444
	public void OnClickShow() { }

	// RVA: 0x141C5A0 Offset: 0x141C5A0 VA: 0x141C5A0
	protected void OnEndShowWebView() { }

	// RVA: 0x141C5A4 Offset: 0x141C5A4 VA: 0x141C5A4
	public void OnClickDecide() { }

	// RVA: 0x141C668 Offset: 0x141C668 VA: 0x141C668
	public void OnClickCancel() { }

	// RVA: 0x141C708 Offset: 0x141C708 VA: 0x141C708 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x141C750 Offset: 0x141C750 VA: 0x141C750
	private static void .cctor() { }
}

// Namespace: 
protected enum TermsOfUseMenu.State // TypeDefIndex: 11673
{
	// Fields
	public int value__; // 0x0
	public const TermsOfUseMenu.State INIT = 0;
	public const TermsOfUseMenu.State OPEN = 1;
	public const TermsOfUseMenu.State INPUT = 2;
	public const TermsOfUseMenu.State SELECTED = 3;
	public const TermsOfUseMenu.State CLOSE = 4;
}

// Namespace: 
public sealed class TermsOfUseMenu.CallbackFunc : MulticastDelegate // TypeDefIndex: 11674
{
	// Methods

	// RVA: 0x141C7C4 Offset: 0x141C7C4 VA: 0x141C7C4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x141C218 Offset: 0x141C218 VA: 0x141C218 Slot: 11
	public virtual void Invoke(bool result) { }

	// RVA: 0x141C7D4 Offset: 0x141C7D4 VA: 0x141C7D4 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool result, AsyncCallback callback, object object) { }

	// RVA: 0x141C864 Offset: 0x141C864 VA: 0x141C864 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class TitleBgEffectComponent : MonoBehaviour // TypeDefIndex: 11675
{
	// Fields
	[SerializeField] // RVA: 0xCED744 Offset: 0xCED744 VA: 0xCED744
	protected MeshRenderer mesh; // 0x18
	[SerializeField] // RVA: 0xCED754 Offset: 0xCED754 VA: 0xCED754
	protected ParticleSystemRenderer particle; // 0x20
	[SerializeField] // RVA: 0xCED764 Offset: 0xCED764 VA: 0xCED764
	protected Camera targetCamera; // 0x28

	// Methods

	// RVA: 0x141E9E0 Offset: 0x141E9E0 VA: 0x141E9E0
	public void .ctor() { }

	// RVA: 0x141E9E8 Offset: 0x141E9E8 VA: 0x141E9E8
	public void Release() { }
}

// Namespace: 
public class TitleEffect : MonoBehaviour // TypeDefIndex: 11676
{
	// Fields
	public ParticleSystem titlePsLeft; // 0x18
	public ParticleSystem titlePsRight; // 0x20

	// Methods

	// RVA: 0x141EC0C Offset: 0x141EC0C VA: 0x141EC0C
	public void .ctor() { }

	// RVA: 0x141EC14 Offset: 0x141EC14 VA: 0x141EC14
	private void Start() { }
}

// Namespace: 
public class TitleIlluminationComponent : MonoBehaviour // TypeDefIndex: 11677
{
	// Fields
	public int IlluminationX; // 0x18
	public int IlluminationY; // 0x1C
	public float lifetime; // 0x20
	public float lifetimeMax; // 0x24
	protected TitleIlluminationManager manager; // 0x28

	// Methods

	// RVA: 0x141EC64 Offset: 0x141EC64 VA: 0x141EC64
	public void .ctor() { }

	// RVA: 0x141EC6C Offset: 0x141EC6C VA: 0x141EC6C
	public void Setup(int x, int y, int sz, float lifetime, TitleIlluminationManager manager) { }

	// RVA: 0x141EE14 Offset: 0x141EE14 VA: 0x141EE14
	private void Start() { }

	// RVA: 0x141EE18 Offset: 0x141EE18 VA: 0x141EE18
	private void Update() { }
}

// Namespace: 
public class TitleIlluminationManager : MonoBehaviour // TypeDefIndex: 11678
{
	// Fields
	[SerializeField] // RVA: 0xCED774 Offset: 0xCED774 VA: 0xCED774
	protected int IlluminationCountMax; // 0x18
	protected int IlluminationCount; // 0x1C
	[SerializeField] // RVA: 0xCED784 Offset: 0xCED784 VA: 0xCED784
	protected int[] IlluminationPopFrames; // 0x20
	[SerializeField] // RVA: 0xCED794 Offset: 0xCED794 VA: 0xCED794
	protected int[] IlluminationPopProb; // 0x28
	[SerializeField] // RVA: 0xCED7A4 Offset: 0xCED7A4 VA: 0xCED7A4
	protected GameObject IlluminationPrefab; // 0x30
	[SerializeField] // RVA: 0xCED7B4 Offset: 0xCED7B4 VA: 0xCED7B4
	protected UIPanel TargetPanel; // 0x38
	[SerializeField] // RVA: 0xCED7C4 Offset: 0xCED7C4 VA: 0xCED7C4
	protected List<GameObject> IlluminationPool; // 0x40
	[SerializeField] // RVA: 0xCED7D4 Offset: 0xCED7D4 VA: 0xCED7D4
	protected List<GameObject> IlluminationDisp; // 0x48
	[SerializeField] // RVA: 0xCED7E4 Offset: 0xCED7E4 VA: 0xCED7E4
	protected static readonly int IlluminationPoolCount; // 0x0
	[SerializeField] // RVA: 0xCED7F4 Offset: 0xCED7F4 VA: 0xCED7F4
	protected float MoveSpeed; // 0x50
	[SerializeField] // RVA: 0xCED804 Offset: 0xCED804 VA: 0xCED804
	protected float FadeSpeed; // 0x54
	protected static readonly int IlluminationWidth; // 0x4
	protected static readonly int IlluminationHeight; // 0x8
	protected static readonly int IlluminationSize; // 0xC
	protected bool Spawn; // 0x58
	protected float PopTime; // 0x5C
	protected TitleIlluminationManager.IlluminationInfo[] IlluminationObjects; // 0x60
	private static int[,,] DirTable; // 0x10

	// Methods

	// RVA: 0x141F060 Offset: 0x141F060 VA: 0x141F060
	public void .ctor() { }

	// RVA: 0x141F080 Offset: 0x141F080 VA: 0x141F080
	public void StartIllumination() { }

	// RVA: 0x141F0A8 Offset: 0x141F0A8 VA: 0x141F0A8
	public void Initialize() { }

	// RVA: 0x141EF5C Offset: 0x141EF5C VA: 0x141EF5C
	public void ReturnIllumination(TitleIlluminationComponent obj) { }

	// RVA: 0x141F4D8 Offset: 0x141F4D8 VA: 0x141F4D8
	public void StartEffect() { }

	// RVA: 0x141F4EC Offset: 0x141F4EC VA: 0x141F4EC
	protected void CreateIllumination() { }

	// RVA: 0x141F68C Offset: 0x141F68C VA: 0x141F68C
	protected void SpawnIllumination(int x, int y) { }

	// RVA: 0x141F890 Offset: 0x141F890 VA: 0x141F890
	protected void UpdateIllumination(float delta) { }

	// RVA: 0x141FC58 Offset: 0x141FC58 VA: 0x141FC58
	private void Update() { }

	// RVA: 0x141FD9C Offset: 0x141FD9C VA: 0x141FD9C
	private void OnDestroy() { }

	// RVA: 0x141FDA4 Offset: 0x141FDA4 VA: 0x141FDA4
	private static void .cctor() { }
}

// Namespace: 
protected class TitleIlluminationManager.IlluminationInfo // TypeDefIndex: 11679
{
	// Fields
	public int x; // 0x10
	public int y; // 0x14
	public int prevX; // 0x18
	public int prevY; // 0x1C
	public int restCount; // 0x20
	public float moveTime; // 0x24
	public bool exists; // 0x28

	// Methods

	// RVA: 0x141F4E4 Offset: 0x141F4E4 VA: 0x141F4E4
	public void .ctor() { }
}

// Namespace: 
public class WarBoardBackgroundComponent : MonoBehaviour // TypeDefIndex: 11680
{
	// Fields
	[SerializeField] // RVA: 0xCED814 Offset: 0xCED814 VA: 0xCED814
	private UITexture boardBg; // 0x18
	[SerializeField] // RVA: 0xCED824 Offset: 0xCED824 VA: 0xCED824
	private UISprite maskSprite; // 0x20

	// Properties
	public UITexture BoardBackground { get; }

	// Methods

	// RVA: 0x18DF6B4 Offset: 0x18DF6B4 VA: 0x18DF6B4
	public void .ctor() { }

	// RVA: 0x18DF6BC Offset: 0x18DF6BC VA: 0x18DF6BC
	public UITexture get_BoardBackground() { }

	// RVA: 0x18DF6C4 Offset: 0x18DF6C4 VA: 0x18DF6C4
	public void ChangeColorDarkness(bool immediate = False) { }

	// RVA: 0x18DF84C Offset: 0x18DF84C VA: 0x18DF84C
	public void ChangeColorNormal(bool immediate = False) { }

	// RVA: 0x18DF6D0 Offset: 0x18DF6D0 VA: 0x18DF6D0
	private void ChangeMaskSpriteAlpha(float alpha, bool immediate) { }
}

// Namespace: 
public class WarBoardBreakPointComponent : MonoBehaviour // TypeDefIndex: 11681
{
	// Fields
	[SerializeField] // RVA: 0xCED834 Offset: 0xCED834 VA: 0xCED834
	private UISprite activeObject; // 0x18
	[SerializeField] // RVA: 0xCED844 Offset: 0xCED844 VA: 0xCED844
	private UISprite deactiveObject; // 0x20
	[SerializeField] // RVA: 0xCED854 Offset: 0xCED854 VA: 0xCED854
	private UISprite baseObject; // 0x28
	[SerializeField] // RVA: 0xCED864 Offset: 0xCED864 VA: 0xCED864
	public float maxSpacing; // 0x30
	[SerializeField] // RVA: 0xCED874 Offset: 0xCED874 VA: 0xCED874
	private bool startState; // 0x34
	private int objectColorNumber; // 0x38
	private bool isMaster; // 0x3C
	[CompilerGeneratedAttribute] // RVA: 0xCED884 Offset: 0xCED884 VA: 0xCED884
	[DebuggerBrowsableAttribute] // RVA: 0xCED884 Offset: 0xCED884 VA: 0xCED884
	private bool <isActive>k__BackingField; // 0x3D
	private static readonly string BreakPointOnImageName; // 0x0
	private static readonly string BreakPointOffImageName; // 0x8
	private static readonly string BreakPointEffectName; // 0x10
	private static readonly string MasterPointOnImageName; // 0x18
	private static readonly string MasterPointOffImageName; // 0x20
	private static readonly string MasterPointEffectName; // 0x28

	// Properties
	public bool isActive { get; set; }

	// Methods

	// RVA: 0x18E37A4 Offset: 0x18E37A4 VA: 0x18E37A4
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD425E4 Offset: 0xD425E4 VA: 0xD425E4
	// RVA: 0x18E37AC Offset: 0x18E37AC VA: 0x18E37AC
	public bool get_isActive() { }

	[CompilerGeneratedAttribute] // RVA: 0xD425F4 Offset: 0xD425F4 VA: 0xD425F4
	// RVA: 0x18E37B4 Offset: 0x18E37B4 VA: 0x18E37B4
	private void set_isActive(bool value) { }

	// RVA: 0x18E37C0 Offset: 0x18E37C0 VA: 0x18E37C0
	public void Initialize(int depth, int number, bool isMaster) { }

	// RVA: 0x18E3CBC Offset: 0x18E3CBC VA: 0x18E3CBC
	public void OnBreak(List<WarBoardTaskBase> taskList) { }

	// RVA: 0x18E3B78 Offset: 0x18E3B78 VA: 0x18E3B78
	public void SetActive(bool active, bool force = False) { }

	// RVA: 0x18E44A8 Offset: 0x18E44A8 VA: 0x18E44A8
	public void SetBreakPointFadeOut(float duration) { }

	// RVA: 0x18E45CC Offset: 0x18E45CC VA: 0x18E45CC
	public void SetBreakPointFadeIn(float duration) { }

	// RVA: 0x18E46F0 Offset: 0x18E46F0 VA: 0x18E46F0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42604 Offset: 0xD42604 VA: 0xD42604
	// RVA: 0x18E47B4 Offset: 0x18E47B4 VA: 0x18E47B4
	private void <OnBreak>m__0() { }
}

// Namespace: 
public class WarBoardBreakPointEffectComponent : MonoBehaviour // TypeDefIndex: 11682
{
	// Fields
	private WarBoardBreakPointComponent parentComponent; // 0x18

	// Methods

	// RVA: 0x18E47C0 Offset: 0x18E47C0 VA: 0x18E47C0
	public void .ctor() { }

	// RVA: 0x18E4180 Offset: 0x18E4180 VA: 0x18E4180
	public void Initialize(WarBoardBreakPointComponent parentComponent) { }

	// RVA: 0x18E47C8 Offset: 0x18E47C8 VA: 0x18E47C8
	public void SetBreakPointFadeOut(float duration) { }

	// RVA: 0x18E4874 Offset: 0x18E4874 VA: 0x18E4874
	public void SetBreakPointFadeIn(float duration) { }

	// RVA: 0x18E4920 Offset: 0x18E4920 VA: 0x18E4920
	public void SetBreakPointActive(bool active) { }
}

// Namespace: 
public class WarBoardEffectComponent : MonoBehaviour // TypeDefIndex: 11683
{
	// Fields
	[SerializeField] // RVA: 0xCED8C0 Offset: 0xCED8C0 VA: 0xCED8C0
	private UISprite effectIcon; // 0x18
	[SerializeField] // RVA: 0xCED8D0 Offset: 0xCED8D0 VA: 0xCED8D0
	private UICommonButton button; // 0x20
	private WarBoardEffectData effectData; // 0x28
	private bool isSelectable; // 0x30
	protected UIWidget[] uIWidgets; // 0x38

	// Methods

	// RVA: 0x18EDCB0 Offset: 0x18EDCB0 VA: 0x18EDCB0
	public void .ctor() { }

	// RVA: 0x18EDCB8 Offset: 0x18EDCB8 VA: 0x18EDCB8
	public void Initialize(WarBoardEffectData data, UIAtlas itemIconAtlas) { }

	// RVA: 0x18EDF38 Offset: 0x18EDF38 VA: 0x18EDF38
	protected void SetButtonTweenTarget(Transform[] parents) { }

	// RVA: 0x18EE174 Offset: 0x18EE174 VA: 0x18EE174
	public void SetTouchEnable(bool enable) { }

	// RVA: 0x18EE228 Offset: 0x18EE228 VA: 0x18EE228
	public void OnClick() { }

	// RVA: 0x18EE420 Offset: 0x18EE420 VA: 0x18EE420
	public void OnLongClick() { }

	// RVA: 0x18EE540 Offset: 0x18EE540 VA: 0x18EE540 Slot: 4
	public virtual void Selectable() { }

	// RVA: 0x18EE54C Offset: 0x18EE54C VA: 0x18EE54C Slot: 5
	public virtual void Unselectable() { }

	// RVA: 0x18EE554 Offset: 0x18EE554 VA: 0x18EE554
	protected void WidgetDepthIncrement(int value) { }
}

// Namespace: 
public class WarBoardItemComponent : MonoBehaviour // TypeDefIndex: 11684
{
	// Fields
	[SerializeField] // RVA: 0xCED8E0 Offset: 0xCED8E0 VA: 0xCED8E0
	private UISprite itemIcon; // 0x18
	[SerializeField] // RVA: 0xCED8F0 Offset: 0xCED8F0 VA: 0xCED8F0
	private UICommonButton button; // 0x20
	private WarBoardItemData itemData; // 0x28
	private bool isSelectable; // 0x30
	protected UIWidget[] uIWidgets; // 0x38

	// Methods

	// RVA: 0x189F3AC Offset: 0x189F3AC VA: 0x189F3AC
	public void .ctor() { }

	// RVA: 0x189F3B4 Offset: 0x189F3B4 VA: 0x189F3B4
	public void Initialize(WarBoardItemData data, UIAtlas itemIconAtlas) { }

	// RVA: 0x189F750 Offset: 0x189F750 VA: 0x189F750
	protected void SetButtonTweenTarget(Transform[] parents) { }

	// RVA: 0x189F9AC Offset: 0x189F9AC VA: 0x189F9AC
	public void SetTouchEnable(bool enable) { }

	// RVA: 0x189FA60 Offset: 0x189FA60 VA: 0x189FA60
	public void OnClick() { }

	// RVA: 0x18A070C Offset: 0x18A070C VA: 0x18A070C
	public void OnLongClick() { }

	// RVA: 0x18A0858 Offset: 0x18A0858 VA: 0x18A0858 Slot: 4
	public virtual void Selectable() { }

	// RVA: 0x18A089C Offset: 0x18A089C VA: 0x18A089C Slot: 5
	public virtual void Unselectable() { }

	// RVA: 0x18A08DC Offset: 0x18A08DC VA: 0x18A08DC
	public void OnUse(int squareIndex) { }

	// RVA: 0x18A0C58 Offset: 0x18A0C58 VA: 0x18A0C58
	public void OnGet() { }

	// RVA: 0x18A0E48 Offset: 0x18A0E48 VA: 0x18A0E48
	private void ItemGetEffectEndCallback() { }

	// RVA: 0x18A0E80 Offset: 0x18A0E80 VA: 0x18A0E80
	protected void WidgetDepthIncrement(int value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB26A0 Offset: 0xCB26A0 VA: 0xCB26A0
private sealed class WarBoardItemComponent.<OnUse>c__AnonStorey0 // TypeDefIndex: 11685
{
	// Fields
	internal int squareIndex; // 0x10
	internal WarBoardItemComponent $this; // 0x18

	// Methods

	// RVA: 0x18A0BD4 Offset: 0x18A0BD4 VA: 0x18A0BD4
	public void .ctor() { }

	// RVA: 0x18A0F9C Offset: 0x18A0F9C VA: 0x18A0F9C
	internal void <>m__0() { }
}

// Namespace: 
public class WarBoardMapCameraComponent : MonoBehaviour // TypeDefIndex: 11686
{
	// Fields
	[SerializeField] // RVA: 0xCED900 Offset: 0xCED900 VA: 0xCED900
	public float cameraAutoMoveSec; // 0x18
	[SerializeField] // RVA: 0xCED910 Offset: 0xCED910 VA: 0xCED910
	public float onAttackCameraMargin; // 0x1C
	[SerializeField] // RVA: 0xCED920 Offset: 0xCED920 VA: 0xCED920
	public float AutoMoveCameraMinSize; // 0x20
	[SerializeField] // RVA: 0xCED930 Offset: 0xCED930 VA: 0xCED930
	public float cameraYCorrectionDiff; // 0x24

	// Methods

	// RVA: 0x1BF9B78 Offset: 0x1BF9B78 VA: 0x1BF9B78
	public void .ctor() { }
}

// Namespace: 
public class WarBoardMasterPieceComponent : WarBoardPieceBaseComponent // TypeDefIndex: 11687
{
	// Fields
	private static readonly string ENEMY_MASTER_FACE_ASSET_NAME; // 0x0
	private static readonly string ENEMY_MASTER_FACE_TEXTURE_NAME; // 0x8
	[SerializeField] // RVA: 0xCED940 Offset: 0xCED940 VA: 0xCED940
	private UITexture masterIcon; // 0xA8
	private AssetData[] assetDatas; // 0xB0
	[SerializeField] // RVA: 0xCED950 Offset: 0xCED950 VA: 0xCED950
	private int playerMasterIconSize; // 0xB8
	[SerializeField] // RVA: 0xCED960 Offset: 0xCED960 VA: 0xCED960
	private Vector3 playerMasterIconAngle; // 0xBC
	[SerializeField] // RVA: 0xCED970 Offset: 0xCED970 VA: 0xCED970
	private int enemyMasterIconSize; // 0xC8
	[SerializeField] // RVA: 0xCED980 Offset: 0xCED980 VA: 0xCED980
	private Vector3 enemyMasterIconAngle; // 0xCC
	[SerializeField] // RVA: 0xCED990 Offset: 0xCED990 VA: 0xCED990
	private GameObject commandSpellIconRoot; // 0xD8
	[SerializeField] // RVA: 0xCED9A0 Offset: 0xCED9A0 VA: 0xCED9A0
	private CommandSpellIconComponent commandSpellIconComponent; // 0xE0

	// Methods

	// RVA: 0x1BFA4AC Offset: 0x1BFA4AC VA: 0x1BFA4AC
	public void .ctor() { }

	// RVA: 0x1BFA52C Offset: 0x1BFA52C VA: 0x1BFA52C Slot: 4
	public override void Initialize(WarBoardPieceData pieceData) { }

	// RVA: 0x1BFAC68 Offset: 0x1BFAC68 VA: 0x1BFAC68 Slot: 28
	public override void OnDead(List<WarBoardTaskBase> taskList) { }

	// RVA: 0x1BFAECC Offset: 0x1BFAECC VA: 0x1BFAECC Slot: 12
	protected override bool ShowStatus() { }

	// RVA: 0x1BFAC0C Offset: 0x1BFAC0C VA: 0x1BFAC0C
	public void SetMasterIcon() { }

	// RVA: 0x1BFB368 Offset: 0x1BFB368 VA: 0x1BFB368
	public void SetCommandSpellRemain(int remain) { }

	// RVA: 0x1BFAF60 Offset: 0x1BFAF60 VA: 0x1BFAF60
	private void SetPlayerMasterIcon() { }

	// RVA: 0x1BFB160 Offset: 0x1BFB160 VA: 0x1BFB160
	private void SetEnemyMasterIcon() { }

	// RVA: 0x1BFB3B0 Offset: 0x1BFB3B0 VA: 0x1BFB3B0 Slot: 29
	protected override Vector3 GetIconPosition() { }

	// RVA: 0x1BFB3F8 Offset: 0x1BFB3F8 VA: 0x1BFB3F8 Slot: 30
	protected override Vector3 GetIconLocalPosition() { }

	// RVA: 0x1BFB440 Offset: 0x1BFB440 VA: 0x1BFB440
	private void OnDestroy() { }

	// RVA: 0x1BFB4B8 Offset: 0x1BFB4B8 VA: 0x1BFB4B8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42614 Offset: 0xD42614 VA: 0xD42614
	// RVA: 0x1BFB52C Offset: 0x1BFB52C VA: 0x1BFB52C
	private void <OnDead>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42624 Offset: 0xD42624 VA: 0xD42624
	// RVA: 0x1BFB564 Offset: 0x1BFB564 VA: 0x1BFB564
	private void <SetEnemyMasterIcon>m__1(AssetData asset) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB26B0 Offset: 0xCB26B0 VA: 0xCB26B0
private sealed class WarBoardMasterPieceComponent.<SetPlayerMasterIcon>c__AnonStorey0 // TypeDefIndex: 11688
{
	// Fields
	internal string[] loadAssets; // 0x10
	internal WarBoardMasterPieceComponent $this; // 0x18

	// Methods

	// RVA: 0x1BFB3A0 Offset: 0x1BFB3A0 VA: 0x1BFB3A0
	public void .ctor() { }

	// RVA: 0x1BFB728 Offset: 0x1BFB728 VA: 0x1BFB728
	internal void <>m__0() { }
}

// Namespace: 
public class WarBoardObjectAnimationEvent : MonoBehaviour // TypeDefIndex: 11689
{
	// Fields
	private bool isInit; // 0x18
	private UIWidget myWidget; // 0x20
	private UIWidget[] children; // 0x28

	// Methods

	// RVA: 0x1BFBEFC Offset: 0x1BFBEFC VA: 0x1BFBEFC
	public void .ctor() { }

	// RVA: 0x1BFBF04 Offset: 0x1BFBF04 VA: 0x1BFBF04
	private void Init() { }

	// RVA: 0x1BFBFC8 Offset: 0x1BFBFC8 VA: 0x1BFBFC8
	public void SetWidgetDepth(string nameAndDepth) { }

	// RVA: 0x1BFC2F8 Offset: 0x1BFC2F8 VA: 0x1BFC2F8
	public void AllWidgetDepthIncrement(int value) { }
}

// Namespace: 
public class WarBoardPieceBaseComponent : MonoBehaviour // TypeDefIndex: 11690
{
	// Fields
	[SerializeField] // RVA: 0xCED9B0 Offset: 0xCED9B0 VA: 0xCED9B0
	protected UIWidget breakPointParent; // 0x18
	[SerializeField] // RVA: 0xCED9C0 Offset: 0xCED9C0 VA: 0xCED9C0
	protected GameObject breakPointPrefab; // 0x20
	[SerializeField] // RVA: 0xCED9D0 Offset: 0xCED9D0 VA: 0xCED9D0
	protected UISprite frameSprite; // 0x28
	[SerializeField] // RVA: 0xCED9E0 Offset: 0xCED9E0 VA: 0xCED9E0
	protected GameObject selectObject; // 0x30
	[SerializeField] // RVA: 0xCED9F0 Offset: 0xCED9F0 VA: 0xCED9F0
	protected GameObject currentActionPointRoot; // 0x38
	[SerializeField] // RVA: 0xCEDA00 Offset: 0xCEDA00 VA: 0xCEDA00
	protected UILabel currentActionPointLabel; // 0x40
	[SerializeField] // RVA: 0xCEDA10 Offset: 0xCEDA10 VA: 0xCEDA10
	protected UICommonButton button; // 0x48
	[SerializeField] // RVA: 0xCEDA20 Offset: 0xCEDA20 VA: 0xCEDA20
	protected float pixelPerSecond; // 0x50
	[SerializeField] // RVA: 0xCEDA30 Offset: 0xCEDA30 VA: 0xCEDA30
	protected float lengthOnAttack; // 0x54
	[SerializeField] // RVA: 0xCEDA40 Offset: 0xCEDA40 VA: 0xCEDA40
	protected float lengthOnEncount; // 0x58
	[SerializeField] // RVA: 0xCEDA50 Offset: 0xCEDA50 VA: 0xCEDA50
	protected float encountCameraSize; // 0x5C
	[SerializeField] // RVA: 0xCEDA60 Offset: 0xCEDA60 VA: 0xCEDA60
	protected float lengthMoveAttack; // 0x60
	[SerializeField] // RVA: 0xCEDA70 Offset: 0xCEDA70 VA: 0xCEDA70
	protected UIWidget[] cannotActTurnDurk; // 0x68
	protected SimpleAnimation simpleAnimation; // 0x70
	protected WarBoardBreakPointComponent[] breakPoints; // 0x78
	protected WarBoardPieceData pieceData; // 0x80
	protected bool isSelectable; // 0x88
	protected string baseFrameName; // 0x90
	protected int dispPriotiry; // 0x98
	private const int DepthOffset = 20;
	protected UIWidget[] uiWidgets; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xCEDA80 Offset: 0xCEDA80 VA: 0xCEDA80
	private static Action<UIWidget> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCEDA90 Offset: 0xCEDA90 VA: 0xCEDA90
	private static Func<UIWidget, GameObject> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCEDAA0 Offset: 0xCEDAA0 VA: 0xCEDAA0
	private static Action<UIWidget> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCEDAB0 Offset: 0xCEDAB0 VA: 0xCEDAB0
	private static Func<UIWidget, GameObject> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCEDAC0 Offset: 0xCEDAC0 VA: 0xCEDAC0
	private static Action <>f__am$cache4; // 0x20

	// Methods

	// RVA: 0x1BFA4C0 Offset: 0x1BFA4C0 VA: 0x1BFA4C0
	public void .ctor() { }

	// RVA: 0x1BFA6E4 Offset: 0x1BFA6E4 VA: 0x1BFA6E4 Slot: 4
	public virtual void Initialize(WarBoardPieceData pieceData) { }

	// RVA: 0x1C04D54 Offset: 0x1C04D54 VA: 0x1C04D54
	protected void SetButtonTweenTarget(Transform[] parents) { }

	// RVA: 0x1C051D8 Offset: 0x1C051D8 VA: 0x1C051D8
	public void SetTouchEnable(bool enable) { }

	// RVA: 0x1C0528C Offset: 0x1C0528C VA: 0x1C0528C Slot: 5
	public virtual void ClickIcon() { }

	// RVA: 0x1C05674 Offset: 0x1C05674 VA: 0x1C05674 Slot: 6
	public virtual void LongTapIcon() { }

	// RVA: 0x1C05678 Offset: 0x1C05678 VA: 0x1C05678 Slot: 7
	public virtual void ShowActionCount() { }

	// RVA: 0x1C0571C Offset: 0x1C0571C VA: 0x1C0571C Slot: 8
	public virtual void HideActionCount() { }

	// RVA: 0x1C0578C Offset: 0x1C0578C VA: 0x1C0578C Slot: 9
	public virtual void UpdateDisplayActionCount() { }

	// RVA: 0x1C0584C Offset: 0x1C0584C VA: 0x1C0584C Slot: 10
	protected virtual void ActionEnableIcon() { }

	// RVA: 0x1C05AD4 Offset: 0x1C05AD4 VA: 0x1C05AD4 Slot: 11
	protected virtual void ActionDisableIcon() { }

	// RVA: 0x1C05DA0 Offset: 0x1C05DA0 VA: 0x1C05DA0 Slot: 12
	protected virtual bool ShowStatus() { }

	// RVA: 0x1C05DA8 Offset: 0x1C05DA8 VA: 0x1C05DA8 Slot: 13
	protected virtual void HideStatus() { }

	// RVA: 0x1C05E0C Offset: 0x1C05E0C VA: 0x1C05E0C Slot: 14
	protected virtual void EditPiece() { }

	// RVA: 0x1C05E10 Offset: 0x1C05E10 VA: 0x1C05E10 Slot: 15
	public virtual void ChangeStatus(bool isBreak) { }

	// RVA: 0x1C05E14 Offset: 0x1C05E14 VA: 0x1C05E14 Slot: 16
	public virtual bool IsModifyStatus() { }

	// RVA: 0x1C05E1C Offset: 0x1C05E1C VA: 0x1C05E1C Slot: 17
	public virtual void ChangeCriticalStars() { }

	// RVA: 0x1C05E20 Offset: 0x1C05E20 VA: 0x1C05E20 Slot: 18
	public virtual void Selectable() { }

	// RVA: 0x1C05E2C Offset: 0x1C05E2C VA: 0x1C05E2C Slot: 19
	public virtual void Unselectable() { }

	// RVA: 0x1C05E34 Offset: 0x1C05E34 VA: 0x1C05E34 Slot: 20
	public virtual void ShowActionTarget() { }

	// RVA: 0x1C05E68 Offset: 0x1C05E68 VA: 0x1C05E68 Slot: 21
	public virtual void HideActionTarget() { }

	// RVA: 0x1C05E9C Offset: 0x1C05E9C VA: 0x1C05E9C Slot: 22
	public virtual void OnSelect() { }

	// RVA: 0x1C05F30 Offset: 0x1C05F30 VA: 0x1C05F30 Slot: 23
	public virtual void OnDeselect() { }

	// RVA: 0x1C05FCC Offset: 0x1C05FCC VA: 0x1C05FCC Slot: 24
	public virtual void OnMove(int squareIndex) { }

	// RVA: 0x1C06708 Offset: 0x1C06708 VA: 0x1C06708 Slot: 25
	public virtual void OnAttack(int squareIndex) { }

	// RVA: 0x1C075C4 Offset: 0x1C075C4 VA: 0x1C075C4 Slot: 26
	public virtual void OnAfterAttack(int squareIndex, bool attackTreasure) { }

	// RVA: 0x1C04F90 Offset: 0x1C04F90 VA: 0x1C04F90
	protected void WidgetDepthIncrement(int value) { }

	// RVA: 0x1C07B34 Offset: 0x1C07B34 VA: 0x1C07B34
	protected void PlaySimpleAnimation(string animationName) { }

	// RVA: 0x1C07BB8 Offset: 0x1C07BB8 VA: 0x1C07BB8
	protected void StopSimpleAnimation(string animationName) { }

	// RVA: 0x1BFAE54 Offset: 0x1BFAE54 VA: 0x1BFAE54
	protected WarBoardSimpleAnimationPerformance GetSimpleAnimationPerformance(string animationName) { }

	// RVA: 0x1C07C4C Offset: 0x1C07C4C VA: 0x1C07C4C Slot: 27
	public virtual void OnBreak(int oldBreakPoint, List<WarBoardTaskBase> taskList, int dummyPoint = -1) { }

	// RVA: 0x1C07D64 Offset: 0x1C07D64 VA: 0x1C07D64 Slot: 28
	public virtual void OnDead(List<WarBoardTaskBase> taskList) { }

	// RVA: 0x1C07D9C Offset: 0x1C07D9C VA: 0x1C07D9C Slot: 29
	protected virtual Vector3 GetIconPosition() { }

	// RVA: 0x1C07DFC Offset: 0x1C07DFC VA: 0x1C07DFC Slot: 30
	protected virtual Vector3 GetIconLocalPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xD42634 Offset: 0xD42634 VA: 0xD42634
	// RVA: 0x1C07E5C Offset: 0x1C07E5C VA: 0x1C07E5C
	private static void <ActionEnableIcon>m__0(UIWidget x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42644 Offset: 0xD42644 VA: 0xD42644
	// RVA: 0x1C07EC4 Offset: 0x1C07EC4 VA: 0x1C07EC4
	private static GameObject <ActionEnableIcon>m__1(UIWidget x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42654 Offset: 0xD42654 VA: 0xD42654
	// RVA: 0x1C07EF0 Offset: 0x1C07EF0 VA: 0x1C07EF0
	private static void <ActionDisableIcon>m__2(UIWidget x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42664 Offset: 0xD42664 VA: 0xD42664
	// RVA: 0x1C07F58 Offset: 0x1C07F58 VA: 0x1C07F58
	private static GameObject <ActionDisableIcon>m__3(UIWidget x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD42674 Offset: 0xD42674 VA: 0xD42674
	// RVA: 0x1C07F84 Offset: 0x1C07F84 VA: 0x1C07F84
	private static void <OnAttack>m__4() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB26C0 Offset: 0xCB26C0 VA: 0xCB26C0
private sealed class WarBoardPieceBaseComponent.<ActionEnableIcon>c__AnonStorey0 // TypeDefIndex: 11691
{
	// Fields
	internal GameObject[] gameObjects; // 0x10

	// Methods

	// RVA: 0x1C05ACC Offset: 0x1C05ACC VA: 0x1C05ACC
	public void .ctor() { }

	// RVA: 0x1C08050 Offset: 0x1C08050 VA: 0x1C08050
	internal bool <>m__0(GameObject x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB26D0 Offset: 0xCB26D0 VA: 0xCB26D0
private sealed class WarBoardPieceBaseComponent.<ActionDisableIcon>c__AnonStorey1 // TypeDefIndex: 11692
{
	// Fields
	internal GameObject[] gameObjects; // 0x10

	// Methods

	// RVA: 0x1C05D98 Offset: 0x1C05D98 VA: 0x1C05D98
	public void .ctor() { }

	// RVA: 0x1C07FF0 Offset: 0x1C07FF0 VA: 0x1C07FF0
	internal bool <>m__0(GameObject x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB26E0 Offset: 0xCB26E0 VA: 0xCB26E0
private sealed class WarBoardPieceBaseComponent.<OnMove>c__AnonStorey2 // TypeDefIndex: 11693
{
	// Fields
	internal WarBoardSquareData targetSquareData; // 0x10

	// Methods

	// RVA: 0x1C066C8 Offset: 0x1C066C8 VA: 0x1C066C8
	public void .ctor() { }

	// RVA: 0x1C084B4 Offset: 0x1C084B4 VA: 0x1C084B4
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB26F0 Offset: 0xCB26F0 VA: 0xCB26F0
private sealed class WarBoardPieceBaseComponent.<OnAttack>c__AnonStorey3 // TypeDefIndex: 11694
{
	// Fields
	internal WarBoardSquareData targetSquareData; // 0x10
	internal WarBoardManager warBoardManager; // 0x18

	// Methods

	// RVA: 0x1C074CC Offset: 0x1C074CC VA: 0x1C074CC
	public void .ctor() { }

	// RVA: 0x1C082E8 Offset: 0x1C082E8 VA: 0x1C082E8
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2700 Offset: 0xCB2700 VA: 0xCB2700
private sealed class WarBoardPieceBaseComponent.<OnAttack>c__AnonStorey4 // TypeDefIndex: 11695
{
	// Fields
	internal float prevCameraSize; // 0x10
	internal Vector2 prevCameraPos; // 0x14
	internal WarBoardPieceBaseComponent.<OnAttack>c__AnonStorey3 <>f__ref$3; // 0x20

	// Methods
