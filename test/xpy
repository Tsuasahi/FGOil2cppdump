	public override void requestCompleted(ResponseData[] responseList) { }
}

// Namespace: 
public class WarBoardTreasureRequest : RequestBase // TypeDefIndex: 8387
{
	// Methods

	// RVA: 0x1537588 Offset: 0x1537588 VA: 0x1537588
	public void .ctor() { }

	// RVA: 0x1537590 Offset: 0x1537590 VA: 0x1537590 Slot: 4
	public override string getURL() { }

	// RVA: 0x1537634 Offset: 0x1537634 VA: 0x1537634
	public void beginRequest(int treasureId, WarBoardData warBoardData) { }

	// RVA: 0x15376F8 Offset: 0x15376F8 VA: 0x15376F8 Slot: 10
	public override void requestCompleted(ResponseData[] responseList) { }
}

// Namespace: 
public class WarBoardTurnEndRequest : RequestBase // TypeDefIndex: 8388
{
	// Fields
	private int retryCount; // 0x28
	private const int MaxRetryCount = 3;

	// Methods

	// RVA: 0x15377E4 Offset: 0x15377E4 VA: 0x15377E4
	public void .ctor() { }

	// RVA: 0x15377EC Offset: 0x15377EC VA: 0x15377EC Slot: 4
	public override string getURL() { }

	// RVA: 0x1537890 Offset: 0x1537890 VA: 0x1537890 Slot: 8
	public override bool isBackgroundRequest() { }

	// RVA: 0x1537898 Offset: 0x1537898 VA: 0x1537898 Slot: 11
	public override bool backgroundErrorRequest(string errorCode) { }

	// RVA: 0x15378B8 Offset: 0x15378B8 VA: 0x15378B8 Slot: 12
	public override void backgroundErrorRetry() { }

	// RVA: 0x1537920 Offset: 0x1537920 VA: 0x1537920
	public void beginRequest(int stageId, WarBoardData warBoardData) { }

	// RVA: 0x15379B0 Offset: 0x15379B0 VA: 0x15379B0 Slot: 10
	public override void requestCompleted(ResponseData[] responseList) { }
}

// Namespace: 
public class BackTaskAmountAdjuster // TypeDefIndex: 8389
{
	// Fields
	private const float TaskIncreaseMinVelocity = 0.1;
	private const float HardWorkJudgeTimeRate = 1.1;
	private const float MilliDivisor = 1000;
	private float minWorkDeltaTime; // 0x10
	private float actualWorkDeltaTime; // 0x14
	private float plannedWorkDeltaTime; // 0x18
	private float expectedDeltaTime; // 0x1C
	private Stopwatch stopwatch; // 0x20

	// Methods

	// RVA: 0xF5DD64 Offset: 0xF5DD64 VA: 0xF5DD64
	public void .ctor() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB520 Offset: 0xCCB520 VA: 0xCCB520
	// RVA: 0xF5DDF0 Offset: 0xF5DDF0 VA: 0xF5DDF0
	public IEnumerator Execute(IEnumerator bgTask) { }

	// RVA: 0xF5DE8C Offset: 0xF5DE8C VA: 0xF5DE8C
	private void PlanNextWork() { }

	// RVA: 0xF5E008 Offset: 0xF5E008 VA: 0xF5E008
	private bool IsOverWork() { }

	// RVA: 0xF5E08C Offset: 0xF5E08C VA: 0xF5E08C
	private void SaveActualWorkDeltaTime() { }

	// RVA: 0xF5DF8C Offset: 0xF5DF8C VA: 0xF5DF8C
	private float CalcExtendedDeltaTime(float deltaTime) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC431D4 Offset: 0xC431D4 VA: 0xC431D4
private sealed class BackTaskAmountAdjuster.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8390
{
	// Fields
	internal IEnumerator bgTask; // 0x10
	internal object <current>__1; // 0x18
	internal BackTaskAmountAdjuster $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD96D0 Offset: 0xCD96D0 VA: 0xCD96D0
	// RVA: 0xF5DE84 Offset: 0xF5DE84 VA: 0xF5DE84
	public void .ctor() { }

	// RVA: 0xF5E0D8 Offset: 0xF5E0D8 VA: 0xF5E0D8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD96E0 Offset: 0xCD96E0 VA: 0xCD96E0
	// RVA: 0xF5E2D0 Offset: 0xF5E2D0 VA: 0xF5E2D0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD96F0 Offset: 0xCD96F0 VA: 0xCD96F0
	// RVA: 0xF5E2D8 Offset: 0xF5E2D8 VA: 0xF5E2D8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9700 Offset: 0xCD9700 VA: 0xCD9700
	// RVA: 0xF5E2E0 Offset: 0xF5E2E0 VA: 0xF5E2E0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9710 Offset: 0xCD9710 VA: 0xCD9710
	// RVA: 0xF5E2F4 Offset: 0xF5E2F4 VA: 0xF5E2F4 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class MapCameraPerformance : SchedulerTaskBase // TypeDefIndex: 8391
{
	// Fields
	protected Nullable<Vector2> position; // 0x2C
	protected Nullable<float> size; // 0x38
	protected Easing.TYPE easeType; // 0x40
	protected float second; // 0x44
	protected MapCamera mapCamera; // 0x48

	// Methods

	// RVA: 0x2BADDB0 Offset: 0x2BADDB0 VA: 0x2BADDB0
	public void .ctor(MapCamera mapCamera, float second, Nullable<Vector2> position, Nullable<float> size, Easing.TYPE easeType = 15) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB530 Offset: 0xCCB530 VA: 0xCCB530
	// RVA: 0x2BADE1C Offset: 0x2BADE1C VA: 0x2BADE1C Slot: 4
	public override IEnumerator Execute() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC431E4 Offset: 0xC431E4 VA: 0xC431E4
private sealed class MapCameraPerformance.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8392
{
	// Fields
	internal MapCameraPerformance $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24
	private MapCameraPerformance.<Execute>c__Iterator0.<Execute>c__AnonStorey1 $locvar0; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9720 Offset: 0xCD9720 VA: 0xCD9720
	// RVA: 0x2BADE8C Offset: 0x2BADE8C VA: 0x2BADE8C
	public void .ctor() { }

	// RVA: 0x2BADE94 Offset: 0x2BADE94 VA: 0x2BADE94 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9730 Offset: 0xCD9730 VA: 0xCD9730
	// RVA: 0x2BAE1C0 Offset: 0x2BAE1C0 VA: 0x2BAE1C0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9740 Offset: 0xCD9740 VA: 0xCD9740
	// RVA: 0x2BAE1C8 Offset: 0x2BAE1C8 VA: 0x2BAE1C8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9750 Offset: 0xCD9750 VA: 0xCD9750
	// RVA: 0x2BAE1D0 Offset: 0x2BAE1D0 VA: 0x2BAE1D0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9760 Offset: 0xCD9760 VA: 0xCD9760
	// RVA: 0x2BAE1E4 Offset: 0x2BAE1E4 VA: 0x2BAE1E4 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class MapCameraPerformance.<Execute>c__Iterator0.<Execute>c__AnonStorey1 // TypeDefIndex: 8393
{
	// Fields
	internal bool workFinished; // 0x10
	internal MapCameraPerformance.<Execute>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x2BAE1B8 Offset: 0x2BAE1B8 VA: 0x2BAE1B8
	public void .ctor() { }

	// RVA: 0x2BAE24C Offset: 0x2BAE24C VA: 0x2BAE24C
	internal void <>m__0() { }

	// RVA: 0x2BAE258 Offset: 0x2BAE258 VA: 0x2BAE258
	internal bool <>m__1() { }
}

// Namespace: 
public class SchedulerTaskApiRequest : SchedulerTaskBase // TypeDefIndex: 8394
{
	// Fields
	private RequestBase request; // 0x30
	private bool onStartBeginRequest; // 0x38
	private bool requestDone; // 0x39
	private bool isShowConnect; // 0x3A
	private NetworkManager.ResultCallbackFunc resultCallback; // 0x40
	private string responseStr; // 0x48

	// Methods

	// RVA: 0xED6F08 Offset: 0xED6F08 VA: 0xED6F08
	public void .ctor(RequestBase request, NetworkManager.ResultCallbackFunc resultCallback, bool onStartBeginRequest) { }

	// RVA: 0xED70C0 Offset: 0xED70C0 VA: 0xED70C0 Slot: 5
	public override void OnStart() { }

	// RVA: 0xED71F4 Offset: 0xED71F4 VA: 0xED71F4
	private void requestComplete(string result) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB540 Offset: 0xCCB540 VA: 0xCCB540
	// RVA: 0xED7204 Offset: 0xED7204 VA: 0xED7204 Slot: 4
	public override IEnumerator Execute() { }

	// RVA: 0xED727C Offset: 0xED727C VA: 0xED727C Slot: 6
	public override void OnEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC431F4 Offset: 0xC431F4 VA: 0xC431F4
private sealed class SchedulerTaskApiRequest.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8395
{
	// Fields
	internal SchedulerTaskApiRequest $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9770 Offset: 0xCD9770 VA: 0xCD9770
	// RVA: 0xED7274 Offset: 0xED7274 VA: 0xED7274
	public void .ctor() { }

	// RVA: 0xED733C Offset: 0xED733C VA: 0xED733C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9780 Offset: 0xCD9780 VA: 0xCD9780
	// RVA: 0xED7434 Offset: 0xED7434 VA: 0xED7434 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9790 Offset: 0xCD9790 VA: 0xCD9790
	// RVA: 0xED743C Offset: 0xED743C VA: 0xED743C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD97A0 Offset: 0xCD97A0 VA: 0xCD97A0
	// RVA: 0xED7444 Offset: 0xED7444 VA: 0xED7444 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD97B0 Offset: 0xCD97B0 VA: 0xCD97B0
	// RVA: 0xED7458 Offset: 0xED7458 VA: 0xED7458 Slot: 6
	public void Reset() { }

	// RVA: 0xED74C0 Offset: 0xED74C0 VA: 0xED74C0
	internal bool <>m__0() { }
}

// Namespace: 
public abstract class SchedulerTaskBase // TypeDefIndex: 8396
{
	// Fields
	public bool NonBlocking; // 0x10
	public SchedulerTaskBase.TaskCallback StartCallback; // 0x18
	public SchedulerTaskBase.TaskCallback EndCallback; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC5E0A8 Offset: 0xC5E0A8 VA: 0xC5E0A8
	[DebuggerBrowsableAttribute] // RVA: 0xC5E0A8 Offset: 0xC5E0A8 VA: 0xC5E0A8
	private bool <IsPlaying>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC5E0E4 Offset: 0xC5E0E4 VA: 0xC5E0E4
	[DebuggerBrowsableAttribute] // RVA: 0xC5E0E4 Offset: 0xC5E0E4 VA: 0xC5E0E4
	private bool <IsPause>k__BackingField; // 0x29

	// Properties
	public bool IsPlaying { get; set; }
	public bool IsPause { get; set; }

	// Methods

	// RVA: 0xED70B8 Offset: 0xED70B8 VA: 0xED70B8
	protected void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB550 Offset: 0xCCB550 VA: 0xCCB550
	// RVA: 0xED74EC Offset: 0xED74EC VA: 0xED74EC
	public bool get_IsPlaying() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB560 Offset: 0xCCB560 VA: 0xCCB560
	// RVA: 0xED74F4 Offset: 0xED74F4 VA: 0xED74F4
	protected void set_IsPlaying(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB570 Offset: 0xCCB570 VA: 0xCCB570
	// RVA: 0xED7500 Offset: 0xED7500 VA: 0xED7500
	public bool get_IsPause() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB580 Offset: 0xCCB580 VA: 0xCCB580
	// RVA: 0xED7508 Offset: 0xED7508 VA: 0xED7508
	protected void set_IsPause(bool value) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB590 Offset: 0xCCB590 VA: 0xCCB590
	// RVA: 0xED7514 Offset: 0xED7514 VA: 0xED7514 Slot: 4
	public virtual IEnumerator Execute() { }

	// RVA: 0xED71D4 Offset: 0xED71D4 VA: 0xED71D4 Slot: 5
	public virtual void OnStart() { }

	// RVA: 0xED7320 Offset: 0xED7320 VA: 0xED7320 Slot: 6
	public virtual void OnEnd() { }

	// RVA: 0xED7778 Offset: 0xED7778 VA: 0xED7778 Slot: 7
	public virtual void OnPause() { }

	// RVA: 0xED7784 Offset: 0xED7784 VA: 0xED7784 Slot: 8
	public virtual void OnResume() { }
}

// Namespace: 
public sealed class SchedulerTaskBase.TaskCallback : MulticastDelegate // TypeDefIndex: 8397
{
	// Methods

	// RVA: 0xED7818 Offset: 0xED7818 VA: 0xED7818
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xED7578 Offset: 0xED7578 VA: 0xED7578 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0xED7828 Offset: 0xED7828 VA: 0xED7828 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xED785C Offset: 0xED785C VA: 0xED785C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43204 Offset: 0xC43204 VA: 0xC43204
private sealed class SchedulerTaskBase.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8398
{
	// Fields
	internal object $current; // 0x10
	internal bool $disposing; // 0x18
	internal int $PC; // 0x1C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD97C0 Offset: 0xCD97C0 VA: 0xCD97C0
	// RVA: 0xED7570 Offset: 0xED7570 VA: 0xED7570
	public void .ctor() { }

	// RVA: 0xED778C Offset: 0xED778C VA: 0xED778C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD97D0 Offset: 0xCD97D0 VA: 0xCD97D0
	// RVA: 0xED779C Offset: 0xED779C VA: 0xED779C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD97E0 Offset: 0xCD97E0 VA: 0xCD97E0
	// RVA: 0xED77A4 Offset: 0xED77A4 VA: 0xED77A4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD97F0 Offset: 0xCD97F0 VA: 0xCD97F0
	// RVA: 0xED77AC Offset: 0xED77AC VA: 0xED77AC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9800 Offset: 0xCD9800 VA: 0xCD9800
	// RVA: 0xED77B0 Offset: 0xED77B0 VA: 0xED77B0 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class SchedulerTaskCommonEffect : SchedulerTaskBase // TypeDefIndex: 8399
{
	// Fields
	private GameObject effectObject; // 0x30
	private CommonEffectComponent commonEffect; // 0x38
	private bool animationPlay; // 0x40
	private Action animantionStartEndCallback; // 0x48
	private Action animantionEndCallback; // 0x50
	private ComponentPool<CommonEffectComponent> pool; // 0x58

	// Methods

	// RVA: 0xED7868 Offset: 0xED7868 VA: 0xED7868
	public void .ctor(Transform parent, GameObject effetctPrefab, Nullable<Vector3> position, Nullable<Vector3> angle, Nullable<Vector3> scale, bool isLocal = False, bool doInstantiate = True) { }

	// RVA: 0xED7C4C Offset: 0xED7C4C VA: 0xED7C4C
	public void .ctor(Transform parent, ComponentPool<CommonEffectComponent> pool, Nullable<Vector3> position, Nullable<Vector3> angle, Nullable<Vector3> scale, bool isLocal = False) { }

	// RVA: 0xED7A20 Offset: 0xED7A20 VA: 0xED7A20
	protected void AdjustTransform(Nullable<Vector3> position, Nullable<Vector3> angle, Nullable<Vector3> scale, bool isLocal = False) { }

	// RVA: 0xED7D88 Offset: 0xED7D88 VA: 0xED7D88
	public void SetAnimantionStartEndCallback(Action callback) { }

	// RVA: 0xED7D90 Offset: 0xED7D90 VA: 0xED7D90
	public void SetAnimantionEndCallback(Action callback) { }

	// RVA: 0xED7D98 Offset: 0xED7D98 VA: 0xED7D98 Slot: 5
	public override void OnStart() { }

	// RVA: 0xED7EE0 Offset: 0xED7EE0 VA: 0xED7EE0
	private void AnimantionEndStartCallback() { }

	// RVA: 0xED7F84 Offset: 0xED7F84 VA: 0xED7F84
	private void AnimantionEndCallback() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB5A0 Offset: 0xCCB5A0 VA: 0xCCB5A0
	// RVA: 0xED7F98 Offset: 0xED7F98 VA: 0xED7F98 Slot: 4
	public override IEnumerator Execute() { }

	// RVA: 0xED8010 Offset: 0xED8010 VA: 0xED8010 Slot: 6
	public override void OnEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43214 Offset: 0xC43214 VA: 0xC43214
private sealed class SchedulerTaskCommonEffect.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8400
{
	// Fields
	internal SchedulerTaskCommonEffect $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9810 Offset: 0xCD9810 VA: 0xCD9810
	// RVA: 0xED8008 Offset: 0xED8008 VA: 0xED8008
	public void .ctor() { }

	// RVA: 0xED80FC Offset: 0xED80FC VA: 0xED80FC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9820 Offset: 0xCD9820 VA: 0xCD9820
	// RVA: 0xED823C Offset: 0xED823C VA: 0xED823C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9830 Offset: 0xCD9830 VA: 0xCD9830
	// RVA: 0xED8244 Offset: 0xED8244 VA: 0xED8244 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9840 Offset: 0xCD9840 VA: 0xCD9840
	// RVA: 0xED824C Offset: 0xED824C VA: 0xED824C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9850 Offset: 0xCD9850 VA: 0xCD9850
	// RVA: 0xED8260 Offset: 0xED8260 VA: 0xED8260 Slot: 6
	public void Reset() { }

	// RVA: 0xED82C8 Offset: 0xED82C8 VA: 0xED82C8
	internal bool <>m__0() { }
}

// Namespace: 
public class SchedulerTaskMovePerformance : SchedulerTaskBase // TypeDefIndex: 8401
{
	// Fields
	private GameObject target; // 0x30
	private float duration; // 0x38
	private Vector3 from; // 0x3C
	private Vector3 to; // 0x48
	private Easing.TYPE easeType; // 0x54

	// Methods

	// RVA: 0xED82F4 Offset: 0xED82F4 VA: 0xED82F4
	public void .ctor(GameObject target, Vector3 from, Vector3 to, float pixelPerSec, Easing.TYPE easeType = 0) { }

	// RVA: 0xED840C Offset: 0xED840C VA: 0xED840C Slot: 5
	public override void OnStart() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB5B0 Offset: 0xCCB5B0 VA: 0xCCB5B0
	// RVA: 0xED8494 Offset: 0xED8494 VA: 0xED8494 Slot: 4
	public override IEnumerator Execute() { }

	// RVA: 0xED850C Offset: 0xED850C VA: 0xED850C Slot: 6
	public override void OnEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43224 Offset: 0xC43224 VA: 0xC43224
private sealed class SchedulerTaskMovePerformance.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8402
{
	// Fields
	internal float <now>__0; // 0x10
	internal Vector3 <dir>__0; // 0x14
	internal float <percent>__1; // 0x20
	internal SchedulerTaskMovePerformance $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9860 Offset: 0xCD9860 VA: 0xCD9860
	// RVA: 0xED8504 Offset: 0xED8504 VA: 0xED8504
	public void .ctor() { }

	// RVA: 0xED85A4 Offset: 0xED85A4 VA: 0xED85A4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9870 Offset: 0xCD9870 VA: 0xCD9870
	// RVA: 0xED885C Offset: 0xED885C VA: 0xED885C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9880 Offset: 0xCD9880 VA: 0xCD9880
	// RVA: 0xED8864 Offset: 0xED8864 VA: 0xED8864 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9890 Offset: 0xCD9890 VA: 0xCD9890
	// RVA: 0xED886C Offset: 0xED886C VA: 0xED886C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD98A0 Offset: 0xCD98A0 VA: 0xCD98A0
	// RVA: 0xED8880 Offset: 0xED8880 VA: 0xED8880 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class SchedulerTaskNone : SchedulerTaskBase // TypeDefIndex: 8403
{
	// Methods

	// RVA: 0xED88E8 Offset: 0xED88E8 VA: 0xED88E8
	public void .ctor() { }
}

// Namespace: 
public class SchedulerTaskOrthostichy : SchedulerTaskBase // TypeDefIndex: 8404
{
	// Fields
	private SchedulerTaskBase[] tasks; // 0x30

	// Methods

	// RVA: 0xED88F0 Offset: 0xED88F0 VA: 0xED88F0
	public void .ctor(SchedulerTaskBase[] taskBases) { }

	// RVA: 0xED891C Offset: 0xED891C VA: 0xED891C
	public void .ctor(List<SchedulerTaskBase> taskBases) { }

	// RVA: 0xED8998 Offset: 0xED8998 VA: 0xED8998 Slot: 5
	public override void OnStart() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB5C0 Offset: 0xCCB5C0 VA: 0xCCB5C0
	// RVA: 0xED89B8 Offset: 0xED89B8 VA: 0xED89B8 Slot: 4
	public override IEnumerator Execute() { }

	// RVA: 0xED8A30 Offset: 0xED8A30 VA: 0xED8A30 Slot: 6
	public override void OnEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43234 Offset: 0xC43234 VA: 0xC43234
private sealed class SchedulerTaskOrthostichy.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8405
{
	// Fields
	internal int <count>__0; // 0x10
	internal int <i>__1; // 0x14
	internal IEnumerator <executes>__2; // 0x18
	internal SchedulerTaskOrthostichy $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD98B0 Offset: 0xCD98B0 VA: 0xCD98B0
	// RVA: 0xED8A28 Offset: 0xED8A28 VA: 0xED8A28
	public void .ctor() { }

	// RVA: 0xED8A4C Offset: 0xED8A4C VA: 0xED8A4C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD98C0 Offset: 0xCD98C0 VA: 0xCD98C0
	// RVA: 0xED8DE0 Offset: 0xED8DE0 VA: 0xED8DE0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD98D0 Offset: 0xCD98D0 VA: 0xCD98D0
	// RVA: 0xED8DE8 Offset: 0xED8DE8 VA: 0xED8DE8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD98E0 Offset: 0xCD98E0 VA: 0xCD98E0
	// RVA: 0xED8DF0 Offset: 0xED8DF0 VA: 0xED8DF0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD98F0 Offset: 0xCD98F0 VA: 0xCD98F0
	// RVA: 0xED8E04 Offset: 0xED8E04 VA: 0xED8E04 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class SchedulerTaskParallel : SchedulerTaskBase // TypeDefIndex: 8406
{
	// Fields
	private SchedulerTaskBase[] tasks; // 0x30

	// Methods

	// RVA: 0xED8E6C Offset: 0xED8E6C VA: 0xED8E6C
	public void .ctor(SchedulerTaskBase[] taskBases) { }

	// RVA: 0xED8E98 Offset: 0xED8E98 VA: 0xED8E98
	public void .ctor(List<SchedulerTaskBase> taskBases) { }

	// RVA: 0xED8F14 Offset: 0xED8F14 VA: 0xED8F14 Slot: 5
	public override void OnStart() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB5D0 Offset: 0xCCB5D0 VA: 0xCCB5D0
	// RVA: 0xED9008 Offset: 0xED9008 VA: 0xED9008 Slot: 4
	public override IEnumerator Execute() { }

	// RVA: 0xED9080 Offset: 0xED9080 VA: 0xED9080 Slot: 6
	public override void OnEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43244 Offset: 0xC43244 VA: 0xC43244
private sealed class SchedulerTaskParallel.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8407
{
	// Fields
	internal int <count>__0; // 0x10
	internal bool[] <endFlags>__0; // 0x18
	internal object[] <currentObjects>__0; // 0x20
	internal IEnumerator[] <executes>__0; // 0x28
	internal SchedulerTaskParallel $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44
	private static Func<bool, bool> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9900 Offset: 0xCD9900 VA: 0xCD9900
	// RVA: 0xED9078 Offset: 0xED9078 VA: 0xED9078
	public void .ctor() { }

	// RVA: 0xED909C Offset: 0xED909C VA: 0xED909C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9910 Offset: 0xCD9910 VA: 0xCD9910
	// RVA: 0xED96BC Offset: 0xED96BC VA: 0xED96BC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9920 Offset: 0xCD9920 VA: 0xCD9920
	// RVA: 0xED96C4 Offset: 0xED96C4 VA: 0xED96C4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9930 Offset: 0xCD9930 VA: 0xCD9930
	// RVA: 0xED96CC Offset: 0xED96CC VA: 0xED96CC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9940 Offset: 0xCD9940 VA: 0xCD9940
	// RVA: 0xED96E0 Offset: 0xED96E0 VA: 0xED96E0 Slot: 6
	public void Reset() { }

	// RVA: 0xED9748 Offset: 0xED9748 VA: 0xED9748
	private static bool <>m__0(bool x) { }
}

// Namespace: 
public class SchedulerTaskSimpleAnimation : SchedulerTaskBase // TypeDefIndex: 8408
{
	// Fields
	private SimpleAnimation animation; // 0x30
	private string animationName; // 0x38
	private bool isStart; // 0x40

	// Methods

	// RVA: 0xED9750 Offset: 0xED9750 VA: 0xED9750
	public void .ctor(SimpleAnimation animation, string animationName) { }

	// RVA: 0xED9788 Offset: 0xED9788 VA: 0xED9788 Slot: 5
	public override void OnStart() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB5E0 Offset: 0xCCB5E0 VA: 0xCCB5E0
	// RVA: 0xED986C Offset: 0xED986C VA: 0xED986C Slot: 4
	public override IEnumerator Execute() { }

	// RVA: 0xED98E4 Offset: 0xED98E4 VA: 0xED98E4 Slot: 6
	public override void OnEnd() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43254 Offset: 0xC43254 VA: 0xC43254
private sealed class SchedulerTaskSimpleAnimation.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8409
{
	// Fields
	internal SchedulerTaskSimpleAnimation $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9950 Offset: 0xCD9950 VA: 0xCD9950
	// RVA: 0xED98DC Offset: 0xED98DC VA: 0xED98DC
	public void .ctor() { }

	// RVA: 0xED9900 Offset: 0xED9900 VA: 0xED9900 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9960 Offset: 0xCD9960 VA: 0xCD9960
	// RVA: 0xED9A10 Offset: 0xED9A10 VA: 0xED9A10 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9970 Offset: 0xCD9970 VA: 0xCD9970
	// RVA: 0xED9A18 Offset: 0xED9A18 VA: 0xED9A18 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9980 Offset: 0xCD9980 VA: 0xCD9980
	// RVA: 0xED9A20 Offset: 0xED9A20 VA: 0xED9A20 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9990 Offset: 0xCD9990 VA: 0xCD9990
	// RVA: 0xED9A34 Offset: 0xED9A34 VA: 0xED9A34 Slot: 6
	public void Reset() { }

	// RVA: 0xED9A9C Offset: 0xED9A9C VA: 0xED9A9C
	internal bool <>m__0() { }
}

// Namespace: 
public class SchedulerTaskWaitLoadAsset : SchedulerTaskBase // TypeDefIndex: 8410
{
	// Fields
	private string assetName; // 0x30
	private bool isCompleate; // 0x38

	// Methods

	// RVA: 0xED9AE8 Offset: 0xED9AE8 VA: 0xED9AE8
	public void .ctor(string assetName) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB5F0 Offset: 0xCCB5F0 VA: 0xCCB5F0
	// RVA: 0xED9BCC Offset: 0xED9BCC VA: 0xED9BCC Slot: 4
	public override IEnumerator Execute() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB600 Offset: 0xCCB600 VA: 0xCCB600
	// RVA: 0xED9C44 Offset: 0xED9C44 VA: 0xED9C44
	private void <SchedulerTaskWaitLoadAsset>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43264 Offset: 0xC43264 VA: 0xC43264
private sealed class SchedulerTaskWaitLoadAsset.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8411
{
	// Fields
	internal SchedulerTaskWaitLoadAsset $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD99A0 Offset: 0xCD99A0 VA: 0xCD99A0
	// RVA: 0xED9C3C Offset: 0xED9C3C VA: 0xED9C3C
	public void .ctor() { }

	// RVA: 0xED9C50 Offset: 0xED9C50 VA: 0xED9C50 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD99B0 Offset: 0xCD99B0 VA: 0xCD99B0
	// RVA: 0xED9CC4 Offset: 0xED9CC4 VA: 0xED9CC4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD99C0 Offset: 0xCD99C0 VA: 0xCD99C0
	// RVA: 0xED9CCC Offset: 0xED9CCC VA: 0xED9CCC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD99D0 Offset: 0xCD99D0 VA: 0xCD99D0
	// RVA: 0xED9CD4 Offset: 0xED9CD4 VA: 0xED9CD4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD99E0 Offset: 0xCD99E0 VA: 0xCD99E0
	// RVA: 0xED9CE8 Offset: 0xED9CE8 VA: 0xED9CE8 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class SchedulerTaskWaitTime : SchedulerTaskBase // TypeDefIndex: 8412
{
	// Fields
	private float waitTime; // 0x2C

	// Methods

	// RVA: 0xED9D50 Offset: 0xED9D50 VA: 0xED9D50
	public void .ctor(float waitTime) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB610 Offset: 0xCCB610 VA: 0xCCB610
	// RVA: 0xED9D84 Offset: 0xED9D84 VA: 0xED9D84 Slot: 4
	public override IEnumerator Execute() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43274 Offset: 0xC43274 VA: 0xC43274
private sealed class SchedulerTaskWaitTime.<Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8413
{
	// Fields
	internal float <espTime>__1; // 0x10
	internal SchedulerTaskWaitTime $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD99F0 Offset: 0xCD99F0 VA: 0xCD99F0
	// RVA: 0xED9DF4 Offset: 0xED9DF4 VA: 0xED9DF4
	public void .ctor() { }

	// RVA: 0xED9DFC Offset: 0xED9DFC VA: 0xED9DFC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9A00 Offset: 0xCD9A00 VA: 0xCD9A00
	// RVA: 0xED9EE8 Offset: 0xED9EE8 VA: 0xED9EE8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9A10 Offset: 0xCD9A10 VA: 0xCD9A10
	// RVA: 0xED9EF0 Offset: 0xED9EF0 VA: 0xED9EF0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9A20 Offset: 0xCD9A20 VA: 0xCD9A20
	// RVA: 0xED9EF8 Offset: 0xED9EF8 VA: 0xED9EF8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9A30 Offset: 0xCD9A30 VA: 0xCD9A30
	// RVA: 0xED9F0C Offset: 0xED9F0C VA: 0xED9F0C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class TaskScheduler // TypeDefIndex: 8414
{
	// Fields
	private Queue<TaskScheduler.PerformanceQueue> taskQueue; // 0x10
	private IEnumerator taskExecute; // 0x18
	private List<SchedulerTaskBase> nonBlockTasks; // 0x20
	private IEnumerator nonBlockTaskExecute; // 0x28
	private bool isPause; // 0x30
	private bool isPauseImmediate; // 0x31
	[CompilerGeneratedAttribute] // RVA: 0xC5E120 Offset: 0xC5E120 VA: 0xC5E120
	[DebuggerBrowsableAttribute] // RVA: 0xC5E120 Offset: 0xC5E120 VA: 0xC5E120
	private Action<bool> <AllTouchBlockMethod>k__BackingField; // 0x38

	// Properties
	private Action<bool> AllTouchBlockMethod { get; set; }

	// Methods

	// RVA: 0x108BDC4 Offset: 0x108BDC4 VA: 0x108BDC4
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB620 Offset: 0xCCB620 VA: 0xCCB620
	// RVA: 0x108BE5C Offset: 0x108BE5C VA: 0x108BE5C
	private Action<bool> get_AllTouchBlockMethod() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB630 Offset: 0xCCB630 VA: 0xCCB630
	// RVA: 0x108BE64 Offset: 0x108BE64 VA: 0x108BE64
	public void set_AllTouchBlockMethod(Action<bool> value) { }

	// RVA: 0x108BE6C Offset: 0x108BE6C VA: 0x108BE6C
	public void Activate() { }

	// RVA: 0x108BF7C Offset: 0x108BF7C VA: 0x108BF7C Slot: 4
	public virtual void SetAllTouchBlock(bool isBlock) { }

	// RVA: 0x108BFF0 Offset: 0x108BFF0 VA: 0x108BFF0
	public void PauseScheduler(bool immediate = False) { }

	// RVA: 0x108C004 Offset: 0x108C004 VA: 0x108C004
	public void ResumeScheduler() { }

	// RVA: 0x108C00C Offset: 0x108C00C VA: 0x108C00C
	public void AddTask(bool enableInput, SchedulerTaskBase[] performances) { }

	// RVA: 0x108C088 Offset: 0x108C088 VA: 0x108C088
	public void AddTask(bool enableInput, List<SchedulerTaskBase> performances) { }

	// RVA: 0x108C104 Offset: 0x108C104 VA: 0x108C104
	public void InsertTask(bool enableInput, SchedulerTaskBase[] performances) { }

	// RVA: 0x108C290 Offset: 0x108C290 VA: 0x108C290
	public void InsertTask(bool enableInput, List<SchedulerTaskBase> performances) { }

	// RVA: 0x108C30C Offset: 0x108C30C VA: 0x108C30C
	public bool IsNonBlockTaskEmpty() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB640 Offset: 0xCCB640 VA: 0xCCB640
	// RVA: 0x108BE9C Offset: 0x108BE9C VA: 0x108BE9C
	private IEnumerator TaskExecute() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB650 Offset: 0xCCB650 VA: 0xCCB650
	// RVA: 0x108BF0C Offset: 0x108BF0C VA: 0x108BF0C
	private IEnumerator NonBlockTaskExecute() { }

	// RVA: 0x108C388 Offset: 0x108C388 VA: 0x108C388
	public static bool IEnumeratorExecute(IEnumerator enumerator) { }

	// RVA: 0x108C64C Offset: 0x108C64C VA: 0x108C64C
	public void TaskUpdate() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB660 Offset: 0xCCB660 VA: 0xCCB660
	// RVA: 0x108C780 Offset: 0x108C780 VA: 0x108C780
	private void <InsertTask>m__0(TaskScheduler.PerformanceQueue x) { }
}

// Namespace: 
private struct TaskScheduler.PerformanceQueue // TypeDefIndex: 8415
{
	// Fields
	public SchedulerTaskBase[] Tasks; // 0x0
	public bool EnableInput; // 0x8
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43284 Offset: 0xC43284 VA: 0xC43284
private sealed class TaskScheduler.<TaskExecute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8416
{
	// Fields
	internal WaitUntil <emptyWait>__0; // 0x10
	internal WaitWhile <pauseWait>__0; // 0x18
	internal WaitWhile <fadeWait>__0; // 0x20
	internal TaskScheduler.PerformanceQueue <queue>__1; // 0x28
	internal int <count>__1; // 0x38
	internal int <i>__2; // 0x3C
	internal SchedulerTaskBase <task>__3; // 0x40
	internal IEnumerator <execute>__3; // 0x48
	internal TaskScheduler $this; // 0x50
	internal object $current; // 0x58
	internal bool $disposing; // 0x60
	internal int $PC; // 0x64
	private static Func<bool> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9A40 Offset: 0xCD9A40 VA: 0xCD9A40
	// RVA: 0x108C378 Offset: 0x108C378 VA: 0x108C378
	public void .ctor() { }

