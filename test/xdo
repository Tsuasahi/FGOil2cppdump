	public void .ctor(Hashtable host, Hashtable.EnumeratorMode mode) { }

	// RVA: 0x2524714 Offset: 0x2524714 VA: 0x2524714
	private static void .cctor() { }

	// RVA: 0x2524770 Offset: 0x2524770 VA: 0x2524770
	private void FailFast() { }

	// RVA: 0x25246E8 Offset: 0x25246E8 VA: 0x25246E8 Slot: 6
	public void Reset() { }

	// RVA: 0x2524838 Offset: 0x2524838 VA: 0x2524838 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x2524970 Offset: 0x2524970 VA: 0x2524970 Slot: 7
	public DictionaryEntry get_Entry() { }

	// RVA: 0x2524A18 Offset: 0x2524A18 VA: 0x2524A18 Slot: 8
	public object get_Key() { }

	// RVA: 0x2524AA4 Offset: 0x2524AA4 VA: 0x2524AA4 Slot: 9
	public object get_Value() { }

	// RVA: 0x2524B30 Offset: 0x2524B30 VA: 0x2524B30 Slot: 4
	public object get_Current() { }
}

// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0xBC483C Offset: 0xBC483C VA: 0xBC483C
[DebuggerTypeProxyAttribute] // RVA: 0xBC483C Offset: 0xBC483C VA: 0xBC483C
[Serializable]
private class Hashtable.HashKeys : IEnumerable, ICollection // TypeDefIndex: 212
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x2524C40 Offset: 0x2524C40 VA: 0x2524C40
	public void .ctor(Hashtable host) { }

	// RVA: 0x2524CD8 Offset: 0x2524CD8 VA: 0x2524CD8 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x2524D10 Offset: 0x2524D10 VA: 0x2524D10 Slot: 10
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x2524D48 Offset: 0x2524D48 VA: 0x2524D48 Slot: 11
	public virtual object get_SyncRoot() { }

	// RVA: 0x2524D80 Offset: 0x2524D80 VA: 0x2524D80 Slot: 12
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x2524EF4 Offset: 0x2524EF4 VA: 0x2524EF4 Slot: 13
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0xBC48C4 Offset: 0xBC48C4 VA: 0xBC48C4
[DebuggerTypeProxyAttribute] // RVA: 0xBC48C4 Offset: 0xBC48C4 VA: 0xBC48C4
[Serializable]
private class Hashtable.HashValues : IEnumerable, ICollection // TypeDefIndex: 213
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x2524F5C Offset: 0x2524F5C VA: 0x2524F5C
	public void .ctor(Hashtable host) { }

	// RVA: 0x2524FF4 Offset: 0x2524FF4 VA: 0x2524FF4 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x252502C Offset: 0x252502C VA: 0x252502C Slot: 10
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x2525064 Offset: 0x2525064 VA: 0x2525064 Slot: 11
	public virtual object get_SyncRoot() { }

	// RVA: 0x252509C Offset: 0x252509C VA: 0x252509C Slot: 12
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x2525210 Offset: 0x2525210 VA: 0x2525210 Slot: 13
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xBC494C Offset: 0xBC494C VA: 0xBC494C
[Serializable]
private class Hashtable.SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 214
{
	// Fields
	private Hashtable host; // 0x68

	// Properties
	public override int Count { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override ICollection Keys { get; }
	public override ICollection Values { get; }
	public override object Item { get; set; }

	// Methods

	// RVA: 0x25252E4 Offset: 0x25252E4 VA: 0x25252E4
	public void .ctor(Hashtable host) { }

	// RVA: 0x252539C Offset: 0x252539C VA: 0x252539C
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x25254FC Offset: 0x25254FC VA: 0x25254FC Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x2525564 Offset: 0x2525564 VA: 0x2525564 Slot: 40
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x25255D8 Offset: 0x25255D8 VA: 0x25255D8 Slot: 23
	public override int get_Count() { }

	// RVA: 0x2525610 Offset: 0x2525610 VA: 0x2525610 Slot: 24
	public override bool get_IsSynchronized() { }

	// RVA: 0x2525618 Offset: 0x2525618 VA: 0x2525618 Slot: 25
	public override object get_SyncRoot() { }

	// RVA: 0x2525650 Offset: 0x2525650 VA: 0x2525650 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x2525688 Offset: 0x2525688 VA: 0x2525688 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x25256C0 Offset: 0x25256C0 VA: 0x25256C0 Slot: 28
	public override ICollection get_Keys() { }

	// RVA: 0x2525784 Offset: 0x2525784 VA: 0x2525784 Slot: 29
	public override ICollection get_Values() { }

	// RVA: 0x2525848 Offset: 0x2525848 VA: 0x2525848 Slot: 30
	public override object get_Item(object key) { }

	// RVA: 0x2525888 Offset: 0x2525888 VA: 0x2525888 Slot: 31
	public override void set_Item(object key, object value) { }

	// RVA: 0x252596C Offset: 0x252596C VA: 0x252596C Slot: 32
	public override void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x25259BC Offset: 0x25259BC VA: 0x25259BC Slot: 33
	public override void Add(object key, object value) { }

	// RVA: 0x2525AA0 Offset: 0x2525AA0 VA: 0x2525AA0 Slot: 34
	public override void Clear() { }

	// RVA: 0x2525B64 Offset: 0x2525B64 VA: 0x2525B64 Slot: 35
	public override bool Contains(object key) { }

	// RVA: 0x2525BA8 Offset: 0x2525BA8 VA: 0x2525BA8 Slot: 36
	public override IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x2525C10 Offset: 0x2525C10 VA: 0x2525C10 Slot: 37
	public override void Remove(object key) { }

	// RVA: 0x2525CEC Offset: 0x2525CEC VA: 0x2525CEC Slot: 38
	public override bool ContainsKey(object key) { }

	// RVA: 0x2525D2C Offset: 0x2525D2C VA: 0x2525D2C Slot: 39
	public override object Clone() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC4984 Offset: 0xBC4984 VA: 0xBC4984
public interface IComparer // TypeDefIndex: 215
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(object x, object y);
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xBC4998 Offset: 0xBC4998 VA: 0xBC4998
[ComVisibleAttribute] // RVA: 0xBC4998 Offset: 0xBC4998 VA: 0xBC4998
public interface IDictionary : IEnumerable, ICollection // TypeDefIndex: 216
{
	// Properties
	public abstract bool IsFixedSize { get; }
	public abstract bool IsReadOnly { get; }
	public abstract object Item { get; set; }
	public abstract ICollection Keys { get; }
	public abstract ICollection Values { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsFixedSize();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_Item(object key);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Item(object key, object value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract ICollection get_Keys();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract ICollection get_Values();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Add(object key, object value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void Clear();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool Contains(object key);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract IDictionaryEnumerator GetEnumerator();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void Remove(object key);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC49E8 Offset: 0xBC49E8 VA: 0xBC49E8
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 217
{
	// Properties
	public abstract DictionaryEntry Entry { get; }
	public abstract object Key { get; }
	public abstract object Value { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract DictionaryEntry get_Entry();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Key();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_Value();
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC49FC Offset: 0xBC49FC VA: 0xBC49FC
public interface IEqualityComparer // TypeDefIndex: 218
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object x, object y);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(object obj);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC4A10 Offset: 0xBC4A10 VA: 0xBC4A10
[ObsoleteAttribute] // RVA: 0xBC4A10 Offset: 0xBC4A10 VA: 0xBC4A10
public interface IHashCodeProvider // TypeDefIndex: 219
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetHashCode(object obj);
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0xBC4A60 Offset: 0xBC4A60 VA: 0xBC4A60
[ComVisibleAttribute] // RVA: 0xBC4A60 Offset: 0xBC4A60 VA: 0xBC4A60
[DebuggerDisplayAttribute] // RVA: 0xBC4A60 Offset: 0xBC4A60 VA: 0xBC4A60
[Serializable]
public class Queue : IEnumerable, ICloneable, ICollection // TypeDefIndex: 220
{
	// Fields
	private object[] _array; // 0x10
	private int _head; // 0x18
	private int _size; // 0x1C
	private int _tail; // 0x20
	private int _growFactor; // 0x24
	private int _version; // 0x28

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x2525ED0 Offset: 0x2525ED0 VA: 0x2525ED0
	public void .ctor() { }

	// RVA: 0x2525FFC Offset: 0x2525FFC VA: 0x2525FFC
	public void .ctor(int capacity) { }

	// RVA: 0x2526004 Offset: 0x2526004 VA: 0x2526004
	public void .ctor(ICollection col) { }

	// RVA: 0x2525EDC Offset: 0x2525EDC VA: 0x2525EDC
	public void .ctor(int capacity, float growFactor) { }

	// RVA: 0x2526384 Offset: 0x2526384 VA: 0x2526384 Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x252638C Offset: 0x252638C VA: 0x252638C Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x2526394 Offset: 0x2526394 VA: 0x2526394 Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x2526398 Offset: 0x2526398 VA: 0x2526398 Slot: 13
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x2526550 Offset: 0x2526550 VA: 0x2526550 Slot: 14
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x25265F4 Offset: 0x25265F4 VA: 0x25265F4 Slot: 15
	public virtual object Clone() { }

	// RVA: 0x25266F0 Offset: 0x25266F0 VA: 0x25266F0 Slot: 16
	public virtual void Clear() { }

	// RVA: 0x2526784 Offset: 0x2526784 VA: 0x2526784 Slot: 17
	public virtual object Dequeue() { }

	// RVA: 0x25268C0 Offset: 0x25268C0 VA: 0x25268C0 Slot: 18
	public virtual void Enqueue(object obj) { }

	// RVA: 0x2526AAC Offset: 0x2526AAC VA: 0x2526AAC Slot: 19
	public virtual object Peek() { }

	// RVA: 0x2526B68 Offset: 0x2526B68 VA: 0x2526B68 Slot: 20
	public virtual object[] ToArray() { }

	// RVA: 0x25269B4 Offset: 0x25269B4 VA: 0x25269B4
	private void grow() { }
}

// Namespace: 
[Serializable]
private class Queue.QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 221
{
	// Fields
	private Queue queue; // 0x10
	private int _version; // 0x18
	private int current; // 0x1C

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0x25265B0 Offset: 0x25265B0 VA: 0x25265B0
	internal void .ctor(Queue q) { }

	// RVA: 0x2526BDC Offset: 0x2526BDC VA: 0x2526BDC Slot: 7
	public object Clone() { }

	// RVA: 0x2526C7C Offset: 0x2526C7C VA: 0x2526C7C Slot: 8
	public virtual object get_Current() { }

	// RVA: 0x2526DEC Offset: 0x2526DEC VA: 0x2526DEC Slot: 9
	public virtual bool MoveNext() { }

	// RVA: 0x2526ECC Offset: 0x2526ECC VA: 0x2526ECC Slot: 10
	public virtual void Reset() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xBC4AFC Offset: 0xBC4AFC VA: 0xBC4AFC
[Serializable]
public abstract class ReadOnlyCollectionBase : IEnumerable, ICollection // TypeDefIndex: 222
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	public virtual int Count { get; }
	protected ArrayList InnerList { get; }

	// Methods

	// RVA: 0x2526F74 Offset: 0x2526F74 VA: 0x2526F74
	protected void .ctor() { }

	// RVA: 0x2526FE0 Offset: 0x2526FE0 VA: 0x2526FE0 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x2526FEC Offset: 0x2526FEC VA: 0x2526FEC Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x25270B8 Offset: 0x25270B8 VA: 0x25270B8 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x25270F0 Offset: 0x25270F0 VA: 0x25270F0 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x2527128 Offset: 0x2527128 VA: 0x2527128 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x2527160 Offset: 0x2527160 VA: 0x2527160 Slot: 10
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x25270B0 Offset: 0x25270B0 VA: 0x25270B0
	protected ArrayList get_InnerList() { }
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0xBC4B10 Offset: 0xBC4B10 VA: 0xBC4B10
[ComVisibleAttribute] // RVA: 0xBC4B10 Offset: 0xBC4B10 VA: 0xBC4B10
[DefaultMemberAttribute] // RVA: 0xBC4B10 Offset: 0xBC4B10 VA: 0xBC4B10
[Serializable]
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary // TypeDefIndex: 223
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x0
	private int inUse; // 0x10
	private int modificationCount; // 0x14
	private SortedList.Slot[] table; // 0x18
	private IComparer comparer; // 0x20
	private int defaultCapacity; // 0x28

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual object Item { get; set; }
	public virtual int Capacity { get; set; }

	// Methods

	// RVA: 0x2527198 Offset: 0x2527198 VA: 0x2527198
	public void .ctor() { }

	// RVA: 0x25272FC Offset: 0x25272FC VA: 0x25272FC
	public void .ctor(int initialCapacity) { }

	// RVA: 0x252720C Offset: 0x252720C VA: 0x252720C
	public void .ctor(IComparer comparer, int capacity) { }

	// RVA: 0x2527384 Offset: 0x2527384 VA: 0x2527384
	public void .ctor(IDictionary d, IComparer comparer) { }

	// RVA: 0x25276A4 Offset: 0x25276A4 VA: 0x25276A4
	private static void .cctor() { }

	// RVA: 0x25276F8 Offset: 0x25276F8 VA: 0x25276F8 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x25277DC Offset: 0x25277DC VA: 0x25277DC Slot: 21
	public virtual int get_Count() { }

	// RVA: 0x25277E4 Offset: 0x25277E4 VA: 0x25277E4 Slot: 22
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x25277EC Offset: 0x25277EC VA: 0x25277EC Slot: 23
	public virtual object get_SyncRoot() { }

	// RVA: 0x25277F0 Offset: 0x25277F0 VA: 0x25277F0 Slot: 24
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x25277F8 Offset: 0x25277F8 VA: 0x25277F8 Slot: 25
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x2527800 Offset: 0x2527800 VA: 0x2527800 Slot: 26
	public virtual ICollection get_Keys() { }

	// RVA: 0x25278F8 Offset: 0x25278F8 VA: 0x25278F8 Slot: 27
	public virtual ICollection get_Values() { }

	// RVA: 0x25279F0 Offset: 0x25279F0 VA: 0x25279F0 Slot: 28
	public virtual object get_Item(object key) { }

	// RVA: 0x2527AE8 Offset: 0x2527AE8 VA: 0x2527AE8 Slot: 29
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x2528344 Offset: 0x2528344 VA: 0x2528344 Slot: 30
	public virtual int get_Capacity() { }

	// RVA: 0x2528370 Offset: 0x2528370 VA: 0x2528370 Slot: 31
	public virtual void set_Capacity(int value) { }

	// RVA: 0x25284A0 Offset: 0x25284A0 VA: 0x25284A0 Slot: 32
	public virtual void Add(object key, object value) { }

	// RVA: 0x25284A8 Offset: 0x25284A8 VA: 0x25284A8 Slot: 33
	public virtual void Clear() { }

	// RVA: 0x2528538 Offset: 0x2528538 VA: 0x2528538 Slot: 34
	public virtual bool Contains(object key) { }

	// RVA: 0x2528660 Offset: 0x2528660 VA: 0x2528660 Slot: 35
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x25286C4 Offset: 0x25286C4 VA: 0x25286C4 Slot: 36
	public virtual void Remove(object key) { }

	// RVA: 0x2528718 Offset: 0x2528718 VA: 0x2528718 Slot: 37
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x25289F0 Offset: 0x25289F0 VA: 0x25289F0 Slot: 38
	public virtual object Clone() { }

	// RVA: 0x2528A74 Offset: 0x2528A74 VA: 0x2528A74 Slot: 39
	public virtual void RemoveAt(int index) { }

	// RVA: 0x2528BB4 Offset: 0x2528BB4 VA: 0x2528BB4 Slot: 40
	public virtual int IndexOfKey(object key) { }

	// RVA: 0x2528CD8 Offset: 0x2528CD8 VA: 0x2528CD8 Slot: 41
	public virtual int IndexOfValue(object value) { }

	// RVA: 0x2528D78 Offset: 0x2528D78 VA: 0x2528D78 Slot: 42
	public virtual bool ContainsKey(object key) { }

	// RVA: 0x2528EA8 Offset: 0x2528EA8 VA: 0x2528EA8 Slot: 43
	public virtual bool ContainsValue(object value) { }

	// RVA: 0x2528ED0 Offset: 0x2528ED0 VA: 0x2528ED0 Slot: 44
	public virtual object GetByIndex(int index) { }

	// RVA: 0x2528FB8 Offset: 0x2528FB8 VA: 0x2528FB8 Slot: 45
	public virtual object GetKey(int index) { }

	// RVA: 0x25290A0 Offset: 0x25290A0 VA: 0x25290A0
	private void EnsureCapacity(int n, int free) { }

	// RVA: 0x2527DB4 Offset: 0x2527DB4 VA: 0x2527DB4
	private void PutImpl(object key, object value, bool overwrite) { }

	// RVA: 0x2527A80 Offset: 0x2527A80 VA: 0x2527A80
	private object GetImpl(object key) { }

	// RVA: 0x252730C Offset: 0x252730C VA: 0x252730C
	private void InitTable(int capacity, bool forceSize) { }

	// RVA: 0x2529234 Offset: 0x2529234 VA: 0x2529234
	private void CopyToArray(Array arr, int i, SortedList.EnumeratorMode mode) { }

	// RVA: 0x2527C0C Offset: 0x2527C0C VA: 0x2527C0C
	private int Find(object key) { }
}

// Namespace: 
[Serializable]
internal struct SortedList.Slot // TypeDefIndex: 224
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x8
}

// Namespace: 
private enum SortedList.EnumeratorMode // TypeDefIndex: 225
{
	// Fields
	public int value__; // 0x0
	public const SortedList.EnumeratorMode KEY_MODE = 0;
	public const SortedList.EnumeratorMode VALUE_MODE = 1;
	public const SortedList.EnumeratorMode ENTRY_MODE = 2;
}

// Namespace: 
private sealed class SortedList.Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator // TypeDefIndex: 226
{
	// Fields
	private SortedList host; // 0x10
	private int stamp; // 0x18
	private int pos; // 0x1C
	private int size; // 0x20
	private SortedList.EnumeratorMode mode; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30
	private bool invalid; // 0x38
	private static readonly string xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x252775C Offset: 0x252775C VA: 0x252775C
	public void .ctor(SortedList host, SortedList.EnumeratorMode mode) { }

	// RVA: 0x252953C Offset: 0x252953C VA: 0x252953C
	private static void .cctor() { }

	// RVA: 0x2529460 Offset: 0x2529460 VA: 0x2529460 Slot: 6
	public void Reset() { }

	// RVA: 0x2529598 Offset: 0x2529598 VA: 0x2529598 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x25296E0 Offset: 0x25296E0 VA: 0x25296E0 Slot: 8
	public DictionaryEntry get_Entry() { }

	// RVA: 0x25297C8 Offset: 0x25297C8 VA: 0x25297C8 Slot: 9
	public object get_Key() { }

	// RVA: 0x2529894 Offset: 0x2529894 VA: 0x2529894 Slot: 10
	public object get_Value() { }

	// RVA: 0x2529960 Offset: 0x2529960 VA: 0x2529960 Slot: 4
	public object get_Current() { }

	// RVA: 0x2529B00 Offset: 0x2529B00 VA: 0x2529B00 Slot: 7
	public object Clone() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xBC4B84 Offset: 0xBC4B84 VA: 0xBC4B84
[Serializable]
private class SortedList.ListKeys : IEnumerable, ICollection, IList // TypeDefIndex: 227
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x2527860 Offset: 0x2527860 VA: 0x2527860
	public void .ctor(SortedList host) { }

	// RVA: 0x2529C14 Offset: 0x2529C14 VA: 0x2529C14 Slot: 20
	public virtual int get_Count() { }

	// RVA: 0x2529C4C Offset: 0x2529C4C VA: 0x2529C4C Slot: 21
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x2529C84 Offset: 0x2529C84 VA: 0x2529C84 Slot: 22
	public virtual object get_SyncRoot() { }

	// RVA: 0x2529CBC Offset: 0x2529CBC VA: 0x2529CBC Slot: 23
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x2529D04 Offset: 0x2529D04 VA: 0x2529D04 Slot: 24
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x2529D0C Offset: 0x2529D0C VA: 0x2529D0C Slot: 25
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x2529D14 Offset: 0x2529D14 VA: 0x2529D14 Slot: 26
	public virtual object get_Item(int index) { }

	// RVA: 0x2529D54 Offset: 0x2529D54 VA: 0x2529D54 Slot: 27
	public virtual void set_Item(int index, object value) { }

	// RVA: 0x2529DC8 Offset: 0x2529DC8 VA: 0x2529DC8 Slot: 28
	public virtual int Add(object value) { }

	// RVA: 0x2529E3C Offset: 0x2529E3C VA: 0x2529E3C Slot: 29
	public virtual void Clear() { }

	// RVA: 0x2529EB0 Offset: 0x2529EB0 VA: 0x2529EB0 Slot: 30
	public virtual bool Contains(object key) { }

	// RVA: 0x2529EF0 Offset: 0x2529EF0 VA: 0x2529EF0 Slot: 31
	public virtual int IndexOf(object key) { }

	// RVA: 0x2529F30 Offset: 0x2529F30 VA: 0x2529F30 Slot: 32
	public virtual void Insert(int index, object value) { }

	// RVA: 0x2529FA4 Offset: 0x2529FA4 VA: 0x2529FA4 Slot: 33
	public virtual void Remove(object value) { }

	// RVA: 0x252A018 Offset: 0x252A018 VA: 0x252A018 Slot: 34
	public virtual void RemoveAt(int index) { }

	// RVA: 0x252A08C Offset: 0x252A08C VA: 0x252A08C Slot: 35
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xBC4BBC Offset: 0xBC4BBC VA: 0xBC4BBC
[Serializable]
private class SortedList.ListValues : IEnumerable, ICollection, IList // TypeDefIndex: 228
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x2527958 Offset: 0x2527958 VA: 0x2527958
	public void .ctor(SortedList host) { }

	// RVA: 0x252A0F4 Offset: 0x252A0F4 VA: 0x252A0F4 Slot: 20
	public virtual int get_Count() { }

	// RVA: 0x252A12C Offset: 0x252A12C VA: 0x252A12C Slot: 21
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x252A164 Offset: 0x252A164 VA: 0x252A164 Slot: 22
	public virtual object get_SyncRoot() { }

	// RVA: 0x252A19C Offset: 0x252A19C VA: 0x252A19C Slot: 23
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x252A1E4 Offset: 0x252A1E4 VA: 0x252A1E4 Slot: 24
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x252A1EC Offset: 0x252A1EC VA: 0x252A1EC Slot: 25
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x252A1F4 Offset: 0x252A1F4 VA: 0x252A1F4 Slot: 26
	public virtual object get_Item(int index) { }

	// RVA: 0x252A234 Offset: 0x252A234 VA: 0x252A234 Slot: 27
	public virtual void set_Item(int index, object value) { }

	// RVA: 0x252A2A8 Offset: 0x252A2A8 VA: 0x252A2A8 Slot: 28
	public virtual int Add(object value) { }

	// RVA: 0x252A31C Offset: 0x252A31C VA: 0x252A31C Slot: 29
	public virtual void Clear() { }

	// RVA: 0x252A390 Offset: 0x252A390 VA: 0x252A390 Slot: 30
	public virtual bool Contains(object value) { }

	// RVA: 0x252A3D0 Offset: 0x252A3D0 VA: 0x252A3D0 Slot: 31
	public virtual int IndexOf(object value) { }

	// RVA: 0x252A410 Offset: 0x252A410 VA: 0x252A410 Slot: 32
	public virtual void Insert(int index, object value) { }

	// RVA: 0x252A484 Offset: 0x252A484 VA: 0x252A484 Slot: 33
	public virtual void Remove(object value) { }

	// RVA: 0x252A4F8 Offset: 0x252A4F8 VA: 0x252A4F8 Slot: 34
	public virtual void RemoveAt(int index) { }

	// RVA: 0x252A56C Offset: 0x252A56C VA: 0x252A56C Slot: 35
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0xBC4BF4 Offset: 0xBC4BF4 VA: 0xBC4BF4
[DebuggerDisplayAttribute] // RVA: 0xBC4BF4 Offset: 0xBC4BF4 VA: 0xBC4BF4
[ComVisibleAttribute] // RVA: 0xBC4BF4 Offset: 0xBC4BF4 VA: 0xBC4BF4
[Serializable]
public class Stack : IEnumerable, ICloneable, ICollection // TypeDefIndex: 229
{
	// Fields
	private object[] contents; // 0x10
	private int current; // 0x18
	private int count; // 0x1C
	private int capacity; // 0x20
	private int modCount; // 0x24

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x252A5D4 Offset: 0x252A5D4 VA: 0x252A5D4
	public void .ctor() { }

	// RVA: 0x252A648 Offset: 0x252A648 VA: 0x252A648
	public void .ctor(ICollection col) { }

	// RVA: 0x252A9C4 Offset: 0x252A9C4 VA: 0x252A9C4
	public void .ctor(int initialCapacity) { }

	// RVA: 0x252AA88 Offset: 0x252AA88 VA: 0x252AA88
	private void Resize(int ncapacity) { }

	// RVA: 0x252AB24 Offset: 0x252AB24 VA: 0x252AB24 Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x252AB2C Offset: 0x252AB2C VA: 0x252AB2C Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x252AB34 Offset: 0x252AB34 VA: 0x252AB34 Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x252AB38 Offset: 0x252AB38 VA: 0x252AB38 Slot: 13
	public virtual void Clear() { }

	// RVA: 0x252ABC8 Offset: 0x252ABC8 VA: 0x252ABC8 Slot: 14
	public virtual object Clone() { }

	// RVA: 0x252AC68 Offset: 0x252AC68 VA: 0x252AC68 Slot: 15
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x252AE20 Offset: 0x252AE20 VA: 0x252AE20 Slot: 16
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x252AEC4 Offset: 0x252AEC4 VA: 0x252AEC4 Slot: 17
	public virtual object Peek() { }

	// RVA: 0x252AF7C Offset: 0x252AF7C VA: 0x252AF7C Slot: 18
	public virtual object Pop() { }

	// RVA: 0x252B0CC Offset: 0x252B0CC VA: 0x252B0CC Slot: 19
	public virtual void Push(object obj) { }
}

// Namespace: 
private class Stack.Enumerator : IEnumerator, ICloneable // TypeDefIndex: 230
{
	// Fields
	private Stack stack; // 0x10
	private int modCount; // 0x18
	private int current; // 0x1C

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0x252AE80 Offset: 0x252AE80 VA: 0x252AE80
	internal void .ctor(Stack s) { }

	// RVA: 0x252B194 Offset: 0x252B194 VA: 0x252B194 Slot: 7
	public object Clone() { }

	// RVA: 0x252B19C Offset: 0x252B19C VA: 0x252B19C Slot: 8
	public virtual object get_Current() { }

	// RVA: 0x252B2AC Offset: 0x252B2AC VA: 0x252B2AC Slot: 9
	public virtual bool MoveNext() { }

	// RVA: 0x252B390 Offset: 0x252B390 VA: 0x252B390 Slot: 10
	public virtual void Reset() { }
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0xBC4C90 Offset: 0xBC4C90 VA: 0xBC4C90
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 231
{
	// Fields
	public int value__; // 0x0
	public const AssemblyHashAlgorithm None = 0;
	public const AssemblyHashAlgorithm MD5 = 32771;
	public const AssemblyHashAlgorithm SHA1 = 32772;
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0xBC4CA4 Offset: 0xBC4CA4 VA: 0xBC4CA4
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 232
{
	// Fields
	public int value__; // 0x0
	public const AssemblyVersionCompatibility SameMachine = 1;
	public const AssemblyVersionCompatibility SameProcess = 2;
	public const AssemblyVersionCompatibility SameDomain = 3;
}

// Namespace: System.Diagnostics.SymbolStore
[ComVisibleAttribute] // RVA: 0xBC4CB8 Offset: 0xBC4CB8 VA: 0xBC4CB8
public interface ISymbolWriter // TypeDefIndex: 233
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize(IntPtr emitter, string filename, bool fFullBuild);
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xBC4CCC Offset: 0xBC4CCC VA: 0xBC4CCC
[AttributeUsageAttribute] // RVA: 0xBC4CCC Offset: 0xBC4CCC VA: 0xBC4CCC
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 234
{
	// Fields
	private bool JITTrackingEnabledFlag; // 0x10
	private bool JITOptimizerDisabledFlag; // 0x11
	private DebuggableAttribute.DebuggingModes debuggingModes; // 0x14

	// Methods

	// RVA: 0x23ABC0C Offset: 0x23ABC0C VA: 0x23ABC0C
	public void .ctor(DebuggableAttribute.DebuggingModes modes) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xBC4D0C Offset: 0xBC4D0C VA: 0xBC4D0C
[ComVisibleAttribute] // RVA: 0xBC4D0C Offset: 0xBC4D0C VA: 0xBC4D0C
public enum DebuggableAttribute.DebuggingModes // TypeDefIndex: 235
{
	// Fields
	public int value__; // 0x0
	public const DebuggableAttribute.DebuggingModes None = 0;
	public const DebuggableAttribute.DebuggingModes Default = 1;
	public const DebuggableAttribute.DebuggingModes IgnoreSymbolStoreSequencePoints = 2;
	public const DebuggableAttribute.DebuggingModes EnableEditAndContinue = 4;
	public const DebuggableAttribute.DebuggingModes DisableOptimizations = 256;
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xBC4D48 Offset: 0xBC4D48 VA: 0xBC4D48
[MonoTODOAttribute] // RVA: 0xBC4D48 Offset: 0xBC4D48 VA: 0xBC4D48
public sealed class Debugger // TypeDefIndex: 236
{
	// Fields
	public static readonly string DefaultCategory; // 0x0

	// Properties
	public static bool IsAttached { get; }

	// Methods

	// RVA: 0x23ABC48 Offset: 0x23ABC48 VA: 0x23ABC48
	private static void .cctor() { }

	// RVA: 0x23ABCC4 Offset: 0x23ABCC4 VA: 0x23ABCC4
	public static bool get_IsAttached() { }

	// RVA: 0x23ABD20 Offset: 0x23ABD20 VA: 0x23ABD20
	private static bool IsAttached_internal() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xBC4D98 Offset: 0xBC4D98 VA: 0xBC4D98
[ComVisibleAttribute] // RVA: 0xBC4D98 Offset: 0xBC4D98 VA: 0xBC4D98
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 237
{
	// Fields
	private DebuggerBrowsableState state; // 0x10

	// Methods

	// RVA: 0x23ABD24 Offset: 0x23ABD24 VA: 0x23ABD24
	public void .ctor(DebuggerBrowsableState state) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xBC4DD8 Offset: 0xBC4DD8 VA: 0xBC4DD8
public enum DebuggerBrowsableState // TypeDefIndex: 238
{
	// Fields
	public int value__; // 0x0
	public const DebuggerBrowsableState Never = 0;
	public const DebuggerBrowsableState Collapsed = 2;
	public const DebuggerBrowsableState RootHidden = 3;
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xBC4DEC Offset: 0xBC4DEC VA: 0xBC4DEC
[AttributeUsageAttribute] // RVA: 0xBC4DEC Offset: 0xBC4DEC VA: 0xBC4DEC
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 239
{
	// Fields
	private string value; // 0x10
	private string type; // 0x18
	private string name; // 0x20

	// Properties
	public string Name { set; }

	// Methods

	// RVA: 0x23ABD50 Offset: 0x23ABD50 VA: 0x23ABD50
	public void .ctor(string value) { }

	// RVA: 0x23ABE0C Offset: 0x23ABE0C VA: 0x23ABE0C
	public void set_Name(string value) { }
