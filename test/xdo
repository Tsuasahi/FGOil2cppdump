// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0xC30964 Offset: 0xC30964 VA: 0xC30964
[DebuggerTypeProxyAttribute] // RVA: 0xC30964 Offset: 0xC30964 VA: 0xC30964
[Serializable]
private class Hashtable.HashKeys : IEnumerable, ICollection // TypeDefIndex: 212
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x121F418 Offset: 0x121F418 VA: 0x121F418
	public void .ctor(Hashtable host) { }

	// RVA: 0x121F4B0 Offset: 0x121F4B0 VA: 0x121F4B0 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x121F4E8 Offset: 0x121F4E8 VA: 0x121F4E8 Slot: 10
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x121F520 Offset: 0x121F520 VA: 0x121F520 Slot: 11
	public virtual object get_SyncRoot() { }

	// RVA: 0x121F558 Offset: 0x121F558 VA: 0x121F558 Slot: 12
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x121F6CC Offset: 0x121F6CC VA: 0x121F6CC Slot: 13
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DebuggerDisplayAttribute] // RVA: 0xC309EC Offset: 0xC309EC VA: 0xC309EC
[DebuggerTypeProxyAttribute] // RVA: 0xC309EC Offset: 0xC309EC VA: 0xC309EC
[Serializable]
private class Hashtable.HashValues : IEnumerable, ICollection // TypeDefIndex: 213
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x121F734 Offset: 0x121F734 VA: 0x121F734
	public void .ctor(Hashtable host) { }

	// RVA: 0x121F7CC Offset: 0x121F7CC VA: 0x121F7CC Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x121F804 Offset: 0x121F804 VA: 0x121F804 Slot: 10
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x121F83C Offset: 0x121F83C VA: 0x121F83C Slot: 11
	public virtual object get_SyncRoot() { }

	// RVA: 0x121F874 Offset: 0x121F874 VA: 0x121F874 Slot: 12
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x121F9E8 Offset: 0x121F9E8 VA: 0x121F9E8 Slot: 13
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC30A74 Offset: 0xC30A74 VA: 0xC30A74
[Serializable]
private class Hashtable.SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 214
{
	// Fields
	private Hashtable host; // 0x68

	// Properties
	public override int Count { get; }
	public override bool IsSynchronized { get; }
	public override object SyncRoot { get; }
	public override bool IsFixedSize { get; }
	public override bool IsReadOnly { get; }
	public override ICollection Keys { get; }
	public override ICollection Values { get; }
	public override object Item { get; set; }

	// Methods

	// RVA: 0x121FABC Offset: 0x121FABC VA: 0x121FABC
	public void .ctor(Hashtable host) { }

	// RVA: 0x121FB74 Offset: 0x121FB74 VA: 0x121FB74
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x121FCD4 Offset: 0x121FCD4 VA: 0x121FCD4 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x121FD3C Offset: 0x121FD3C VA: 0x121FD3C Slot: 40
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x121FDB0 Offset: 0x121FDB0 VA: 0x121FDB0 Slot: 23
	public override int get_Count() { }

	// RVA: 0x121FDE8 Offset: 0x121FDE8 VA: 0x121FDE8 Slot: 24
	public override bool get_IsSynchronized() { }

	// RVA: 0x121FDF0 Offset: 0x121FDF0 VA: 0x121FDF0 Slot: 25
	public override object get_SyncRoot() { }

	// RVA: 0x121FE28 Offset: 0x121FE28 VA: 0x121FE28 Slot: 26
	public override bool get_IsFixedSize() { }

	// RVA: 0x121FE60 Offset: 0x121FE60 VA: 0x121FE60 Slot: 27
	public override bool get_IsReadOnly() { }

	// RVA: 0x121FE98 Offset: 0x121FE98 VA: 0x121FE98 Slot: 28
	public override ICollection get_Keys() { }

	// RVA: 0x121FF5C Offset: 0x121FF5C VA: 0x121FF5C Slot: 29
	public override ICollection get_Values() { }

	// RVA: 0x1220020 Offset: 0x1220020 VA: 0x1220020 Slot: 30
	public override object get_Item(object key) { }

	// RVA: 0x1220060 Offset: 0x1220060 VA: 0x1220060 Slot: 31
	public override void set_Item(object key, object value) { }

	// RVA: 0x1220144 Offset: 0x1220144 VA: 0x1220144 Slot: 32
	public override void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x1220194 Offset: 0x1220194 VA: 0x1220194 Slot: 33
	public override void Add(object key, object value) { }

	// RVA: 0x1220278 Offset: 0x1220278 VA: 0x1220278 Slot: 34
	public override void Clear() { }

	// RVA: 0x122033C Offset: 0x122033C VA: 0x122033C Slot: 35
	public override bool Contains(object key) { }

	// RVA: 0x1220380 Offset: 0x1220380 VA: 0x1220380 Slot: 36
	public override IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x12203E8 Offset: 0x12203E8 VA: 0x12203E8 Slot: 37
	public override void Remove(object key) { }

	// RVA: 0x12204C4 Offset: 0x12204C4 VA: 0x12204C4 Slot: 38
	public override bool ContainsKey(object key) { }

	// RVA: 0x1220504 Offset: 0x1220504 VA: 0x1220504 Slot: 39
	public override object Clone() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30AAC Offset: 0xC30AAC VA: 0xC30AAC
public interface IComparer // TypeDefIndex: 215
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(object x, object y);
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xC30AC0 Offset: 0xC30AC0 VA: 0xC30AC0
[ComVisibleAttribute] // RVA: 0xC30AC0 Offset: 0xC30AC0 VA: 0xC30AC0
public interface IDictionary : IEnumerable, ICollection // TypeDefIndex: 216
{
	// Properties
	public abstract bool IsFixedSize { get; }
	public abstract bool IsReadOnly { get; }
	public abstract object Item { get; set; }
	public abstract ICollection Keys { get; }
	public abstract ICollection Values { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsFixedSize();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_Item(object key);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Item(object key, object value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract ICollection get_Keys();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract ICollection get_Values();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Add(object key, object value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void Clear();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool Contains(object key);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract IDictionaryEnumerator GetEnumerator();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void Remove(object key);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30B10 Offset: 0xC30B10 VA: 0xC30B10
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 217
{
	// Properties
	public abstract DictionaryEntry Entry { get; }
	public abstract object Key { get; }
	public abstract object Value { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract DictionaryEntry get_Entry();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Key();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_Value();
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30B24 Offset: 0xC30B24 VA: 0xC30B24
public interface IEqualityComparer // TypeDefIndex: 218
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object x, object y);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(object obj);
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30B38 Offset: 0xC30B38 VA: 0xC30B38
[ObsoleteAttribute] // RVA: 0xC30B38 Offset: 0xC30B38 VA: 0xC30B38
public interface IHashCodeProvider // TypeDefIndex: 219
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetHashCode(object obj);
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0xC30B88 Offset: 0xC30B88 VA: 0xC30B88
[ComVisibleAttribute] // RVA: 0xC30B88 Offset: 0xC30B88 VA: 0xC30B88
[DebuggerDisplayAttribute] // RVA: 0xC30B88 Offset: 0xC30B88 VA: 0xC30B88
[Serializable]
public class Queue : IEnumerable, ICloneable, ICollection // TypeDefIndex: 220
{
	// Fields
	private object[] _array; // 0x10
	private int _head; // 0x18
	private int _size; // 0x1C
	private int _tail; // 0x20
	private int _growFactor; // 0x24
	private int _version; // 0x28

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x12206A8 Offset: 0x12206A8 VA: 0x12206A8
	public void .ctor() { }

	// RVA: 0x12207D4 Offset: 0x12207D4 VA: 0x12207D4
	public void .ctor(int capacity) { }

	// RVA: 0x12207DC Offset: 0x12207DC VA: 0x12207DC
	public void .ctor(ICollection col) { }

	// RVA: 0x12206B4 Offset: 0x12206B4 VA: 0x12206B4
	public void .ctor(int capacity, float growFactor) { }

	// RVA: 0x1220B5C Offset: 0x1220B5C VA: 0x1220B5C Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x1220B64 Offset: 0x1220B64 VA: 0x1220B64 Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1220B6C Offset: 0x1220B6C VA: 0x1220B6C Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x1220B70 Offset: 0x1220B70 VA: 0x1220B70 Slot: 13
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x1220D28 Offset: 0x1220D28 VA: 0x1220D28 Slot: 14
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x1220DCC Offset: 0x1220DCC VA: 0x1220DCC Slot: 15
	public virtual object Clone() { }

	// RVA: 0x1220EC8 Offset: 0x1220EC8 VA: 0x1220EC8 Slot: 16
	public virtual void Clear() { }

	// RVA: 0x1220F5C Offset: 0x1220F5C VA: 0x1220F5C Slot: 17
	public virtual object Dequeue() { }

	// RVA: 0x1221098 Offset: 0x1221098 VA: 0x1221098 Slot: 18
	public virtual void Enqueue(object obj) { }

	// RVA: 0x1221284 Offset: 0x1221284 VA: 0x1221284 Slot: 19
	public virtual object Peek() { }

	// RVA: 0x1221340 Offset: 0x1221340 VA: 0x1221340 Slot: 20
	public virtual object[] ToArray() { }

	// RVA: 0x122118C Offset: 0x122118C VA: 0x122118C
	private void grow() { }
}

// Namespace: 
[Serializable]
private class Queue.QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 221
{
	// Fields
	private Queue queue; // 0x10
	private int _version; // 0x18
	private int current; // 0x1C

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0x1220D88 Offset: 0x1220D88 VA: 0x1220D88
	internal void .ctor(Queue q) { }

	// RVA: 0x12213B4 Offset: 0x12213B4 VA: 0x12213B4 Slot: 7
	public object Clone() { }

	// RVA: 0x1221454 Offset: 0x1221454 VA: 0x1221454 Slot: 8
	public virtual object get_Current() { }

	// RVA: 0x12215C4 Offset: 0x12215C4 VA: 0x12215C4 Slot: 9
	public virtual bool MoveNext() { }

	// RVA: 0x12216A4 Offset: 0x12216A4 VA: 0x12216A4 Slot: 10
	public virtual void Reset() { }
}

// Namespace: System.Collections
[ComVisibleAttribute] // RVA: 0xC30C24 Offset: 0xC30C24 VA: 0xC30C24
[Serializable]
public abstract class ReadOnlyCollectionBase : IEnumerable, ICollection // TypeDefIndex: 222
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	public virtual int Count { get; }
	protected ArrayList InnerList { get; }

	// Methods

	// RVA: 0x122174C Offset: 0x122174C VA: 0x122174C
	protected void .ctor() { }

	// RVA: 0x12217B8 Offset: 0x12217B8 VA: 0x12217B8 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x12217C4 Offset: 0x12217C4 VA: 0x12217C4 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x1221890 Offset: 0x1221890 VA: 0x1221890 Slot: 7
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x12218C8 Offset: 0x12218C8 VA: 0x12218C8 Slot: 6
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x1221900 Offset: 0x1221900 VA: 0x1221900 Slot: 9
	public virtual int get_Count() { }

	// RVA: 0x1221938 Offset: 0x1221938 VA: 0x1221938 Slot: 10
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x1221888 Offset: 0x1221888 VA: 0x1221888
	protected ArrayList get_InnerList() { }
}

// Namespace: System.Collections
[DebuggerDisplayAttribute] // RVA: 0xC30C38 Offset: 0xC30C38 VA: 0xC30C38
[ComVisibleAttribute] // RVA: 0xC30C38 Offset: 0xC30C38 VA: 0xC30C38
[DefaultMemberAttribute] // RVA: 0xC30C38 Offset: 0xC30C38 VA: 0xC30C38
[Serializable]
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary // TypeDefIndex: 223
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x0
	private int inUse; // 0x10
	private int modificationCount; // 0x14
	private SortedList.Slot[] table; // 0x18
	private IComparer comparer; // 0x20
	private int defaultCapacity; // 0x28

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual object Item { get; set; }
	public virtual int Capacity { get; set; }

	// Methods

	// RVA: 0x1221970 Offset: 0x1221970 VA: 0x1221970
	public void .ctor() { }

	// RVA: 0x1221AD4 Offset: 0x1221AD4 VA: 0x1221AD4
	public void .ctor(int initialCapacity) { }

	// RVA: 0x12219E4 Offset: 0x12219E4 VA: 0x12219E4
	public void .ctor(IComparer comparer, int capacity) { }

	// RVA: 0x1221B5C Offset: 0x1221B5C VA: 0x1221B5C
	public void .ctor(IDictionary d, IComparer comparer) { }

	// RVA: 0x1221E7C Offset: 0x1221E7C VA: 0x1221E7C
	private static void .cctor() { }

	// RVA: 0x1221ED0 Offset: 0x1221ED0 VA: 0x1221ED0 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1221FB4 Offset: 0x1221FB4 VA: 0x1221FB4 Slot: 21
	public virtual int get_Count() { }

	// RVA: 0x1221FBC Offset: 0x1221FBC VA: 0x1221FBC Slot: 22
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1221FC4 Offset: 0x1221FC4 VA: 0x1221FC4 Slot: 23
	public virtual object get_SyncRoot() { }

	// RVA: 0x1221FC8 Offset: 0x1221FC8 VA: 0x1221FC8 Slot: 24
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x1221FD0 Offset: 0x1221FD0 VA: 0x1221FD0 Slot: 25
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1221FD8 Offset: 0x1221FD8 VA: 0x1221FD8 Slot: 26
	public virtual ICollection get_Keys() { }

	// RVA: 0x12220D0 Offset: 0x12220D0 VA: 0x12220D0 Slot: 27
	public virtual ICollection get_Values() { }

	// RVA: 0x12221C8 Offset: 0x12221C8 VA: 0x12221C8 Slot: 28
	public virtual object get_Item(object key) { }

	// RVA: 0x12222C0 Offset: 0x12222C0 VA: 0x12222C0 Slot: 29
	public virtual void set_Item(object key, object value) { }

	// RVA: 0x1222B1C Offset: 0x1222B1C VA: 0x1222B1C Slot: 30
	public virtual int get_Capacity() { }

	// RVA: 0x1222B48 Offset: 0x1222B48 VA: 0x1222B48 Slot: 31
	public virtual void set_Capacity(int value) { }

	// RVA: 0x1222C78 Offset: 0x1222C78 VA: 0x1222C78 Slot: 32
	public virtual void Add(object key, object value) { }

	// RVA: 0x1222C80 Offset: 0x1222C80 VA: 0x1222C80 Slot: 33
	public virtual void Clear() { }

	// RVA: 0x1222D10 Offset: 0x1222D10 VA: 0x1222D10 Slot: 34
	public virtual bool Contains(object key) { }

	// RVA: 0x1222E38 Offset: 0x1222E38 VA: 0x1222E38 Slot: 35
	public virtual IDictionaryEnumerator GetEnumerator() { }

	// RVA: 0x1222E9C Offset: 0x1222E9C VA: 0x1222E9C Slot: 36
	public virtual void Remove(object key) { }

	// RVA: 0x1222EF0 Offset: 0x1222EF0 VA: 0x1222EF0 Slot: 37
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x12231C8 Offset: 0x12231C8 VA: 0x12231C8 Slot: 38
	public virtual object Clone() { }

	// RVA: 0x122324C Offset: 0x122324C VA: 0x122324C Slot: 39
	public virtual void RemoveAt(int index) { }

	// RVA: 0x122338C Offset: 0x122338C VA: 0x122338C Slot: 40
	public virtual int IndexOfKey(object key) { }

	// RVA: 0x12234B0 Offset: 0x12234B0 VA: 0x12234B0 Slot: 41
	public virtual int IndexOfValue(object value) { }

	// RVA: 0x1223550 Offset: 0x1223550 VA: 0x1223550 Slot: 42
	public virtual bool ContainsKey(object key) { }

	// RVA: 0x1223680 Offset: 0x1223680 VA: 0x1223680 Slot: 43
	public virtual bool ContainsValue(object value) { }

	// RVA: 0x12236A8 Offset: 0x12236A8 VA: 0x12236A8 Slot: 44
	public virtual object GetByIndex(int index) { }

	// RVA: 0x1223790 Offset: 0x1223790 VA: 0x1223790 Slot: 45
	public virtual object GetKey(int index) { }

	// RVA: 0x1223878 Offset: 0x1223878 VA: 0x1223878
	private void EnsureCapacity(int n, int free) { }

	// RVA: 0x122258C Offset: 0x122258C VA: 0x122258C
	private void PutImpl(object key, object value, bool overwrite) { }

	// RVA: 0x1222258 Offset: 0x1222258 VA: 0x1222258
	private object GetImpl(object key) { }

	// RVA: 0x1221AE4 Offset: 0x1221AE4 VA: 0x1221AE4
	private void InitTable(int capacity, bool forceSize) { }

	// RVA: 0x1223A0C Offset: 0x1223A0C VA: 0x1223A0C
	private void CopyToArray(Array arr, int i, SortedList.EnumeratorMode mode) { }

	// RVA: 0x12223E4 Offset: 0x12223E4 VA: 0x12223E4
	private int Find(object key) { }
}

// Namespace: 
[Serializable]
internal struct SortedList.Slot // TypeDefIndex: 224
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x8
}

// Namespace: 
private enum SortedList.EnumeratorMode // TypeDefIndex: 225
{
	// Fields
	public int value__; // 0x0
	public const SortedList.EnumeratorMode KEY_MODE = 0;
	public const SortedList.EnumeratorMode VALUE_MODE = 1;
	public const SortedList.EnumeratorMode ENTRY_MODE = 2;
}

// Namespace: 
private sealed class SortedList.Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator // TypeDefIndex: 226
{
	// Fields
	private SortedList host; // 0x10
	private int stamp; // 0x18
	private int pos; // 0x1C
	private int size; // 0x20
	private SortedList.EnumeratorMode mode; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30
	private bool invalid; // 0x38
	private static readonly string xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods

	// RVA: 0x1221F34 Offset: 0x1221F34 VA: 0x1221F34
	public void .ctor(SortedList host, SortedList.EnumeratorMode mode) { }

	// RVA: 0x1223D14 Offset: 0x1223D14 VA: 0x1223D14
	private static void .cctor() { }

	// RVA: 0x1223C38 Offset: 0x1223C38 VA: 0x1223C38 Slot: 6
	public void Reset() { }

	// RVA: 0x1223D70 Offset: 0x1223D70 VA: 0x1223D70 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1223EB8 Offset: 0x1223EB8 VA: 0x1223EB8 Slot: 8
	public DictionaryEntry get_Entry() { }

	// RVA: 0x1223FA0 Offset: 0x1223FA0 VA: 0x1223FA0 Slot: 9
	public object get_Key() { }

	// RVA: 0x122406C Offset: 0x122406C VA: 0x122406C Slot: 10
	public object get_Value() { }

	// RVA: 0x1224138 Offset: 0x1224138 VA: 0x1224138 Slot: 4
	public object get_Current() { }

	// RVA: 0x12242D8 Offset: 0x12242D8 VA: 0x12242D8 Slot: 7
	public object Clone() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC30CAC Offset: 0xC30CAC VA: 0xC30CAC
[Serializable]
private class SortedList.ListKeys : IEnumerable, ICollection, IList // TypeDefIndex: 227
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x1222038 Offset: 0x1222038 VA: 0x1222038
	public void .ctor(SortedList host) { }

	// RVA: 0x12243EC Offset: 0x12243EC VA: 0x12243EC Slot: 20
	public virtual int get_Count() { }

	// RVA: 0x1224424 Offset: 0x1224424 VA: 0x1224424 Slot: 21
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x122445C Offset: 0x122445C VA: 0x122445C Slot: 22
	public virtual object get_SyncRoot() { }

	// RVA: 0x1224494 Offset: 0x1224494 VA: 0x1224494 Slot: 23
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x12244DC Offset: 0x12244DC VA: 0x12244DC Slot: 24
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x12244E4 Offset: 0x12244E4 VA: 0x12244E4 Slot: 25
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x12244EC Offset: 0x12244EC VA: 0x12244EC Slot: 26
	public virtual object get_Item(int index) { }

	// RVA: 0x122452C Offset: 0x122452C VA: 0x122452C Slot: 27
	public virtual void set_Item(int index, object value) { }

	// RVA: 0x12245A0 Offset: 0x12245A0 VA: 0x12245A0 Slot: 28
	public virtual int Add(object value) { }

	// RVA: 0x1224614 Offset: 0x1224614 VA: 0x1224614 Slot: 29
	public virtual void Clear() { }

	// RVA: 0x1224688 Offset: 0x1224688 VA: 0x1224688 Slot: 30
	public virtual bool Contains(object key) { }

	// RVA: 0x12246C8 Offset: 0x12246C8 VA: 0x12246C8 Slot: 31
	public virtual int IndexOf(object key) { }

	// RVA: 0x1224708 Offset: 0x1224708 VA: 0x1224708 Slot: 32
	public virtual void Insert(int index, object value) { }

	// RVA: 0x122477C Offset: 0x122477C VA: 0x122477C Slot: 33
	public virtual void Remove(object value) { }

	// RVA: 0x12247F0 Offset: 0x12247F0 VA: 0x12247F0 Slot: 34
	public virtual void RemoveAt(int index) { }

	// RVA: 0x1224864 Offset: 0x1224864 VA: 0x1224864 Slot: 35
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC30CE4 Offset: 0xC30CE4 VA: 0xC30CE4
[Serializable]
private class SortedList.ListValues : IEnumerable, ICollection, IList // TypeDefIndex: 228
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual object Item { get; set; }

	// Methods

	// RVA: 0x1222130 Offset: 0x1222130 VA: 0x1222130
	public void .ctor(SortedList host) { }

	// RVA: 0x12248CC Offset: 0x12248CC VA: 0x12248CC Slot: 20
	public virtual int get_Count() { }

	// RVA: 0x1224904 Offset: 0x1224904 VA: 0x1224904 Slot: 21
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x122493C Offset: 0x122493C VA: 0x122493C Slot: 22
	public virtual object get_SyncRoot() { }

	// RVA: 0x1224974 Offset: 0x1224974 VA: 0x1224974 Slot: 23
	public virtual void CopyTo(Array array, int arrayIndex) { }

	// RVA: 0x12249BC Offset: 0x12249BC VA: 0x12249BC Slot: 24
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x12249C4 Offset: 0x12249C4 VA: 0x12249C4 Slot: 25
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x12249CC Offset: 0x12249CC VA: 0x12249CC Slot: 26
	public virtual object get_Item(int index) { }

	// RVA: 0x1224A0C Offset: 0x1224A0C VA: 0x1224A0C Slot: 27
	public virtual void set_Item(int index, object value) { }

	// RVA: 0x1224A80 Offset: 0x1224A80 VA: 0x1224A80 Slot: 28
	public virtual int Add(object value) { }

	// RVA: 0x1224AF4 Offset: 0x1224AF4 VA: 0x1224AF4 Slot: 29
	public virtual void Clear() { }

	// RVA: 0x1224B68 Offset: 0x1224B68 VA: 0x1224B68 Slot: 30
	public virtual bool Contains(object value) { }

	// RVA: 0x1224BA8 Offset: 0x1224BA8 VA: 0x1224BA8 Slot: 31
	public virtual int IndexOf(object value) { }

	// RVA: 0x1224BE8 Offset: 0x1224BE8 VA: 0x1224BE8 Slot: 32
	public virtual void Insert(int index, object value) { }

	// RVA: 0x1224C5C Offset: 0x1224C5C VA: 0x1224C5C Slot: 33
	public virtual void Remove(object value) { }

	// RVA: 0x1224CD0 Offset: 0x1224CD0 VA: 0x1224CD0 Slot: 34
	public virtual void RemoveAt(int index) { }

	// RVA: 0x1224D44 Offset: 0x1224D44 VA: 0x1224D44 Slot: 35
	public virtual IEnumerator GetEnumerator() { }
}

// Namespace: System.Collections
[DebuggerTypeProxyAttribute] // RVA: 0xC30D1C Offset: 0xC30D1C VA: 0xC30D1C
[DebuggerDisplayAttribute] // RVA: 0xC30D1C Offset: 0xC30D1C VA: 0xC30D1C
[ComVisibleAttribute] // RVA: 0xC30D1C Offset: 0xC30D1C VA: 0xC30D1C
[Serializable]
public class Stack : IEnumerable, ICloneable, ICollection // TypeDefIndex: 229
{
	// Fields
	private object[] contents; // 0x10
	private int current; // 0x18
	private int count; // 0x1C
	private int capacity; // 0x20
	private int modCount; // 0x24

	// Properties
	public virtual int Count { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x1224DAC Offset: 0x1224DAC VA: 0x1224DAC
	public void .ctor() { }

	// RVA: 0x1224E20 Offset: 0x1224E20 VA: 0x1224E20
	public void .ctor(ICollection col) { }

	// RVA: 0x122519C Offset: 0x122519C VA: 0x122519C
	public void .ctor(int initialCapacity) { }

	// RVA: 0x1225260 Offset: 0x1225260 VA: 0x1225260
	private void Resize(int ncapacity) { }

	// RVA: 0x12252FC Offset: 0x12252FC VA: 0x12252FC Slot: 10
	public virtual int get_Count() { }

	// RVA: 0x1225304 Offset: 0x1225304 VA: 0x1225304 Slot: 11
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x122530C Offset: 0x122530C VA: 0x122530C Slot: 12
	public virtual object get_SyncRoot() { }

	// RVA: 0x1225310 Offset: 0x1225310 VA: 0x1225310 Slot: 13
	public virtual void Clear() { }

	// RVA: 0x12253A0 Offset: 0x12253A0 VA: 0x12253A0 Slot: 14
	public virtual object Clone() { }

	// RVA: 0x1225440 Offset: 0x1225440 VA: 0x1225440 Slot: 15
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x12255F8 Offset: 0x12255F8 VA: 0x12255F8 Slot: 16
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x122569C Offset: 0x122569C VA: 0x122569C Slot: 17
	public virtual object Peek() { }

	// RVA: 0x1225754 Offset: 0x1225754 VA: 0x1225754 Slot: 18
	public virtual object Pop() { }

	// RVA: 0x12258A4 Offset: 0x12258A4 VA: 0x12258A4 Slot: 19
	public virtual void Push(object obj) { }
}

// Namespace: 
private class Stack.Enumerator : IEnumerator, ICloneable // TypeDefIndex: 230
{
	// Fields
	private Stack stack; // 0x10
	private int modCount; // 0x18
	private int current; // 0x1C

	// Properties
	public virtual object Current { get; }

	// Methods

	// RVA: 0x1225658 Offset: 0x1225658 VA: 0x1225658
	internal void .ctor(Stack s) { }

	// RVA: 0x122596C Offset: 0x122596C VA: 0x122596C Slot: 7
	public object Clone() { }

	// RVA: 0x1225974 Offset: 0x1225974 VA: 0x1225974 Slot: 8
	public virtual object get_Current() { }

	// RVA: 0x1225A84 Offset: 0x1225A84 VA: 0x1225A84 Slot: 9
	public virtual bool MoveNext() { }

	// RVA: 0x1225B68 Offset: 0x1225B68 VA: 0x1225B68 Slot: 10
	public virtual void Reset() { }
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0xC30DB8 Offset: 0xC30DB8 VA: 0xC30DB8
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 231
{
	// Fields
	public int value__; // 0x0
	public const AssemblyHashAlgorithm None = 0;
	public const AssemblyHashAlgorithm MD5 = 32771;
	public const AssemblyHashAlgorithm SHA1 = 32772;
}

// Namespace: System.Configuration.Assemblies
[ComVisibleAttribute] // RVA: 0xC30DCC Offset: 0xC30DCC VA: 0xC30DCC
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 232
{
	// Fields
	public int value__; // 0x0
	public const AssemblyVersionCompatibility SameMachine = 1;
	public const AssemblyVersionCompatibility SameProcess = 2;
	public const AssemblyVersionCompatibility SameDomain = 3;
}

// Namespace: System.Diagnostics.SymbolStore
[ComVisibleAttribute] // RVA: 0xC30DE0 Offset: 0xC30DE0 VA: 0xC30DE0
public interface ISymbolWriter // TypeDefIndex: 233
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize(IntPtr emitter, string filename, bool fFullBuild);
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xC30DF4 Offset: 0xC30DF4 VA: 0xC30DF4
[AttributeUsageAttribute] // RVA: 0xC30DF4 Offset: 0xC30DF4 VA: 0xC30DF4
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 234
{
	// Fields
	private bool JITTrackingEnabledFlag; // 0x10
	private bool JITOptimizerDisabledFlag; // 0x11
	private DebuggableAttribute.DebuggingModes debuggingModes; // 0x14

	// Methods

	// RVA: 0x11768B4 Offset: 0x11768B4 VA: 0x11768B4
	public void .ctor(DebuggableAttribute.DebuggingModes modes) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC30E34 Offset: 0xC30E34 VA: 0xC30E34
[ComVisibleAttribute] // RVA: 0xC30E34 Offset: 0xC30E34 VA: 0xC30E34
public enum DebuggableAttribute.DebuggingModes // TypeDefIndex: 235
{
	// Fields
	public int value__; // 0x0
	public const DebuggableAttribute.DebuggingModes None = 0;
	public const DebuggableAttribute.DebuggingModes Default = 1;
	public const DebuggableAttribute.DebuggingModes IgnoreSymbolStoreSequencePoints = 2;
	public const DebuggableAttribute.DebuggingModes EnableEditAndContinue = 4;
	public const DebuggableAttribute.DebuggingModes DisableOptimizations = 256;
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xC30E70 Offset: 0xC30E70 VA: 0xC30E70
[MonoTODOAttribute] // RVA: 0xC30E70 Offset: 0xC30E70 VA: 0xC30E70
public sealed class Debugger // TypeDefIndex: 236
{
	// Fields
	public static readonly string DefaultCategory; // 0x0

	// Properties
	public static bool IsAttached { get; }

	// Methods

	// RVA: 0x11768F0 Offset: 0x11768F0 VA: 0x11768F0
	private static void .cctor() { }

	// RVA: 0x117696C Offset: 0x117696C VA: 0x117696C
	public static bool get_IsAttached() { }

	// RVA: 0x11769C8 Offset: 0x11769C8 VA: 0x11769C8
	private static bool IsAttached_internal() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xC30EC0 Offset: 0xC30EC0 VA: 0xC30EC0
[ComVisibleAttribute] // RVA: 0xC30EC0 Offset: 0xC30EC0 VA: 0xC30EC0
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 237
{
	// Fields
	private DebuggerBrowsableState state; // 0x10

	// Methods

	// RVA: 0x11769CC Offset: 0x11769CC VA: 0x11769CC
	public void .ctor(DebuggerBrowsableState state) { }
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xC30F00 Offset: 0xC30F00 VA: 0xC30F00
public enum DebuggerBrowsableState // TypeDefIndex: 238
{
	// Fields
	public int value__; // 0x0
	public const DebuggerBrowsableState Never = 0;
	public const DebuggerBrowsableState Collapsed = 2;
	public const DebuggerBrowsableState RootHidden = 3;
}

// Namespace: System.Diagnostics
[ComVisibleAttribute] // RVA: 0xC30F14 Offset: 0xC30F14 VA: 0xC30F14
[AttributeUsageAttribute] // RVA: 0xC30F14 Offset: 0xC30F14 VA: 0xC30F14
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 239
{
	// Fields
	private string value; // 0x10
	private string type; // 0x18
	private string name; // 0x20

	// Properties
	public string Name { set; }

	// Methods

	// RVA: 0x11769F8 Offset: 0x11769F8 VA: 0x11769F8
	public void .ctor(string value) { }

	// RVA: 0x1176AB4 Offset: 0x1176AB4 VA: 0x1176AB4
	public void set_Name(string value) { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xC30F68 Offset: 0xC30F68 VA: 0xC30F68
[ComVisibleAttribute] // RVA: 0xC30F68 Offset: 0xC30F68 VA: 0xC30F68
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 240
{
	// Methods

	// RVA: 0x1176AC4 Offset: 0x1176AC4 VA: 0x1176AC4
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xC30FBC Offset: 0xC30FBC VA: 0xC30FBC
[ComVisibleAttribute] // RVA: 0xC30FBC Offset: 0xC30FBC VA: 0xC30FBC
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 241
{
	// Fields
	private string proxy_type_name; // 0x10

	// Methods

	// RVA: 0x1176ACC Offset: 0x1176ACC VA: 0x1176ACC
	public void .ctor(Type type) { }
}
