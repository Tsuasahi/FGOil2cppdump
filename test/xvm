	public void Initialize(UIAtlas imageSetAtlas, WarBoardRoadEntity road, Vector3 position1, Vector3 position2) { }

	// RVA: 0x1527F28 Offset: 0x1527F28 VA: 0x1527F28
	public bool SameRoad(int squareIndex1, int squareIndex2) { }

	// RVA: 0x1527F68 Offset: 0x1527F68 VA: 0x1527F68
	public void EnablePass() { }

	// RVA: 0x1527FCC Offset: 0x1527FCC VA: 0x1527FCC
	public void DisablePass() { }

	// RVA: 0x1528030 Offset: 0x1528030 VA: 0x1528030
	public void ChangeColorDarkness(bool immediate = False) { }

	// RVA: 0x1528324 Offset: 0x1528324 VA: 0x1528324
	public void ChangeColorNormal(bool immediate = False) { }

	// RVA: 0x1528124 Offset: 0x1528124 VA: 0x1528124
	private void ChangeColor(Color color, float duration, bool immediate, UIWidget[] targets) { }
}

// Namespace: 
public class WarBoardServantPieceComponent : WarBoardPieceBaseComponent // TypeDefIndex: 11737
{
	// Fields
	[SerializeField] // RVA: 0xC8140C Offset: 0xC8140C VA: 0xC8140C
	private GameObject classIconRoot; // 0xA8
	[SerializeField] // RVA: 0xC8141C Offset: 0xC8141C VA: 0xC8141C
	private UISprite classIcon; // 0xB0
	[SerializeField] // RVA: 0xC8142C Offset: 0xC8142C VA: 0xC8142C
	private GameObject servantIconRoot; // 0xB8
	[SerializeField] // RVA: 0xC8143C Offset: 0xC8143C VA: 0xC8143C
	private UIMeshSprite servantIcon; // 0xC0
	[SerializeField] // RVA: 0xC8144C Offset: 0xC8144C VA: 0xC8144C
	private UIMeshSprite equipeIcon; // 0xC8
	[SerializeField] // RVA: 0xC8145C Offset: 0xC8145C VA: 0xC8145C
	private UISprite frameInClassIcon; // 0xD0
	[SerializeField] // RVA: 0xC8146C Offset: 0xC8146C VA: 0xC8146C
	private UISprite hpBar; // 0xD8
	[SerializeField] // RVA: 0xC8147C Offset: 0xC8147C VA: 0xC8147C
	private UISprite[] npBars; // 0xE0
	[SerializeField] // RVA: 0xC8148C Offset: 0xC8148C VA: 0xC8148C
	private GameObject criticalStarsBase; // 0xE8
	[SerializeField] // RVA: 0xC8149C Offset: 0xC8149C VA: 0xC8149C
	private UILabel criticalStarsLabel; // 0xF0
	[SerializeField] // RVA: 0xC814AC Offset: 0xC814AC VA: 0xC814AC
	private float gaugeAnimationFullDuration; // 0xF8
	[SerializeField] // RVA: 0xC814BC Offset: 0xC814BC VA: 0xC814BC
	private GameObject npBarEffect; // 0x100
	[SerializeField] // RVA: 0xC814CC Offset: 0xC814CC VA: 0xC814CC
	private GameObject faceEffect; // 0x108
	[SerializeField] // RVA: 0xC814DC Offset: 0xC814DC VA: 0xC814DC
	private GameObject EquipIcon; // 0x110
	[SerializeField] // RVA: 0xC814EC Offset: 0xC814EC VA: 0xC814EC
	protected ServantClassCompatibilityIconComponent classCompatibilityIcon; // 0x118
	[SerializeField] // RVA: 0xC814FC Offset: 0xC814FC VA: 0xC814FC
	private UISprite supportSprite; // 0x120
	[SerializeField] // RVA: 0xC8150C Offset: 0xC8150C VA: 0xC8150C
	private UILabel servantLevel; // 0x128
	[SerializeField] // RVA: 0xC8151C Offset: 0xC8151C VA: 0xC8151C
	private Vector3 positionLevel; // 0x130
	[SerializeField] // RVA: 0xC8152C Offset: 0xC8152C VA: 0xC8152C
	private Vector3 positionLevelDanger; // 0x13C
	[SerializeField] // RVA: 0xC8153C Offset: 0xC8153C VA: 0xC8153C
	private Vector3 positionLevelNpc; // 0x148
	[SerializeField] // RVA: 0xC8154C Offset: 0xC8154C VA: 0xC8154C
	private GameObject RoleTypeLabel; // 0x158
	private float nowNpProgress; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xC8155C Offset: 0xC8155C VA: 0xC8155C
	private static WarBoardTaskBase.TaskCallback <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1529B34 Offset: 0x1529B34 VA: 0x1529B34
	public void .ctor() { }

	// RVA: 0x1529C1C Offset: 0x1529C1C VA: 0x1529C1C Slot: 4
	public override void Initialize(WarBoardPieceData pieceData) { }

	// RVA: 0x152A1E4 Offset: 0x152A1E4 VA: 0x152A1E4
	private void SetClassIcon() { }

	// RVA: 0x152A488 Offset: 0x152A488 VA: 0x152A488
	public void SetServantIcon() { }

	// RVA: 0x152AC88 Offset: 0x152AC88 VA: 0x152AC88
	public void SetServant(long userServantId) { }

	// RVA: 0x152ACD4 Offset: 0x152ACD4 VA: 0x152ACD4
	public void SetServantEquip(long userServantEquipId) { }

	// RVA: 0x152AD20 Offset: 0x152AD20 VA: 0x152AD20 Slot: 12
	protected override bool ShowStatus() { }

	// RVA: 0x152ADEC Offset: 0x152ADEC VA: 0x152ADEC Slot: 6
	public override void LongTapIcon() { }

	// RVA: 0x152AE5C Offset: 0x152AE5C VA: 0x152AE5C Slot: 14
	protected override void EditPiece() { }

	// RVA: 0x152AEC8 Offset: 0x152AEC8 VA: 0x152AEC8 Slot: 16
	public override bool IsModifyStatus() { }

	// RVA: 0x1529F90 Offset: 0x1529F90 VA: 0x1529F90
	private void UpdateNpBars(float progress) { }

	// RVA: 0x152B08C Offset: 0x152B08C VA: 0x152B08C Slot: 15
	public override void ChangeStatus(bool isBreak) { }

	// RVA: 0x152AF6C Offset: 0x152AF6C VA: 0x152AF6C
	public void ChangeDyingAnimation() { }

	// RVA: 0x152B178 Offset: 0x152B178 VA: 0x152B178 Slot: 17
	public override void ChangeCriticalStars() { }

	// RVA: 0x152B250 Offset: 0x152B250 VA: 0x152B250 Slot: 27
	public override void OnBreak(int oldBreakPoint, List<WarBoardTaskBase> taskList, int dummyPoint = -1) { }

	// RVA: 0x152B548 Offset: 0x152B548 VA: 0x152B548 Slot: 28
	public override void OnDead(List<WarBoardTaskBase> taskList) { }

	// RVA: 0x152B8E0 Offset: 0x152B8E0 VA: 0x152B8E0 Slot: 29
	protected override Vector3 GetIconPosition() { }

	// RVA: 0x152B928 Offset: 0x152B928 VA: 0x152B928 Slot: 30
	protected override Vector3 GetIconLocalPosition() { }

	// RVA: 0x152B970 Offset: 0x152B970 VA: 0x152B970
	public void CompatibilityDisplay(WarBoardPieceData selectPiece) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5320 Offset: 0xCD5320 VA: 0xCD5320
	// RVA: 0x152BAC4 Offset: 0x152BAC4 VA: 0x152BAC4
	private static void <OnBreak>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5330 Offset: 0xCD5330 VA: 0xCD5330
	// RVA: 0x152BB60 Offset: 0x152BB60 VA: 0x152BB60
	private void <OnDead>m__1() { }
}

// Namespace: 
public class WarBoardSquareComponent : MonoBehaviour // TypeDefIndex: 11738
{
	// Fields
	[SerializeField] // RVA: 0xC8156C Offset: 0xC8156C VA: 0xC8156C
	private UISprite squareImage; // 0x18
	[SerializeField] // RVA: 0xC8157C Offset: 0xC8157C VA: 0xC8157C
	private UILabel costLabel; // 0x20
	[SerializeField] // RVA: 0xC8158C Offset: 0xC8158C VA: 0xC8158C
	private UIButton button; // 0x28
	[SerializeField] // RVA: 0xC8159C Offset: 0xC8159C VA: 0xC8159C
	private GameObject selectMarker; // 0x30
	private CommonEffectComponent selectMarkerCommonEffect; // 0x38
	[SerializeField] // RVA: 0xC815AC Offset: 0xC815AC VA: 0xC815AC
	private UISprite selectMarkerArrow; // 0x40
	[SerializeField] // RVA: 0xC815BC Offset: 0xC815BC VA: 0xC815BC
	private GameObject selectCircle; // 0x48
	private CommonEffectComponent selectCircleCommonEffect; // 0x50
	[SerializeField] // RVA: 0xC815CC Offset: 0xC815CC VA: 0xC815CC
	private GameObject battleTargetPlayer; // 0x58
	private CommonEffectComponent battleTargetPlayerCommonEffect; // 0x60
	[SerializeField] // RVA: 0xC815DC Offset: 0xC815DC VA: 0xC815DC
	private GameObject battleTargetEnemy; // 0x68
	private CommonEffectComponent battleTargetEnemyCommonEffect; // 0x70
	[SerializeField] // RVA: 0xC815EC Offset: 0xC815EC VA: 0xC815EC
	private Vector3 costLabelPos; // 0x78
	[SerializeField] // RVA: 0xC815FC Offset: 0xC815FC VA: 0xC815FC
	private Vector3 costLabelMovePos; // 0x84
	[SerializeField] // RVA: 0xC8160C Offset: 0xC8160C VA: 0xC8160C
	private float costAnimScale; // 0x90
	[SerializeField] // RVA: 0xC8161C Offset: 0xC8161C VA: 0xC8161C
	private float costAnimScaleTime; // 0x94
	[SerializeField] // RVA: 0xC8162C Offset: 0xC8162C VA: 0xC8162C
	private float costAnimFadeTime; // 0x98
	private GameObject movePoint; // 0xA0
	private CommonEffectComponent movePointCommonEffect; // 0xA8
	private WarBoardSquareData squareData; // 0xB0
	private bool isSelectable; // 0xB8
	private TweenScale tweenScale; // 0xC0
	private TweenPosition tweenPosition; // 0xC8
	private TweenAlpha tweenAlpha; // 0xD0

	// Methods

	// RVA: 0x152F53C Offset: 0x152F53C VA: 0x152F53C
	public void .ctor() { }

	// RVA: 0x152F5F4 Offset: 0x152F5F4 VA: 0x152F5F4
	public void Initialize(UIAtlas imageSetAtlas, WarBoardSquareData data) { }

	// RVA: 0x152FCDC Offset: 0x152FCDC VA: 0x152FCDC
	public void EnableEditPosition() { }

	// RVA: 0x152FD3C Offset: 0x152FD3C VA: 0x152FD3C
	public void DisableEditPosition() { }

	// RVA: 0x152FE04 Offset: 0x152FE04 VA: 0x152FE04
	public void ActiveEditPointArrow() { }

	// RVA: 0x152FEA4 Offset: 0x152FEA4 VA: 0x152FEA4
	public void DeactiveEditPointArrow() { }

	// RVA: 0x152FBA0 Offset: 0x152FBA0 VA: 0x152FBA0
	public void SetSprite() { }

	// RVA: 0x152FF44 Offset: 0x152FF44 VA: 0x152FF44
	public void SetCost(int cost, Color gradientTop, Color gradientBottom) { }

	// RVA: 0x1530348 Offset: 0x1530348 VA: 0x1530348
	public void SetTouchEnable(bool enable) { }

	// RVA: 0x15303FC Offset: 0x15303FC VA: 0x15303FC
	public void OnSelect() { }

	// RVA: 0x153045C Offset: 0x153045C VA: 0x153045C
	public void OnDeselect() { }

	// RVA: 0x1530524 Offset: 0x1530524 VA: 0x1530524
	public void Selectable(bool isOnActionPiece = False) { }

	// RVA: 0x153069C Offset: 0x153069C VA: 0x153069C
	public void Unselectable(bool isDispCostLabel) { }

	// RVA: 0x1530794 Offset: 0x1530794 VA: 0x1530794
	public void PlayUnDispCostAnim() { }

	// RVA: 0x1530910 Offset: 0x1530910 VA: 0x1530910
	public void PlayUnDispCostAnim2() { }

	// RVA: 0x1530BCC Offset: 0x1530BCC VA: 0x1530BCC
	public void FinishUnDispCostAnim() { }

	// RVA: 0x15301E4 Offset: 0x15301E4 VA: 0x15301E4
	private void InitCostAnim() { }

	// RVA: 0x1530D08 Offset: 0x1530D08 VA: 0x1530D08
	public void DispBattleRange(bool isPlayerForce) { }

	// RVA: 0x1530D98 Offset: 0x1530D98 VA: 0x1530D98
	public void NondispBattleRange(bool isPlayerForce) { }

	// RVA: 0x1530EA8 Offset: 0x1530EA8 VA: 0x1530EA8
	public void OnClickSquare() { }

	// RVA: 0x15311C8 Offset: 0x15311C8 VA: 0x15311C8
	public void OnLongClickSquare() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5340 Offset: 0xCD5340 VA: 0xCD5340
	// RVA: 0x15313EC Offset: 0x15313EC VA: 0x15313EC
	private void <DisableEditPosition>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5350 Offset: 0xCD5350 VA: 0xCD5350
	// RVA: 0x1531420 Offset: 0x1531420 VA: 0x1531420
	private void <OnDeselect>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5360 Offset: 0xCD5360 VA: 0xCD5360
	// RVA: 0x1531474 Offset: 0x1531474 VA: 0x1531474
	private void <NondispBattleRange>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5370 Offset: 0xCD5370 VA: 0xCD5370
	// RVA: 0x15314C8 Offset: 0x15314C8 VA: 0x15314C8
	private void <NondispBattleRange>m__3() { }
}

// Namespace: 
public class WarBoardTreasureComponent : MonoBehaviour // TypeDefIndex: 11739
{
	// Fields
	[SerializeField] // RVA: 0xC8163C Offset: 0xC8163C VA: 0xC8163C
	private UISprite itemIcon; // 0x18
	[SerializeField] // RVA: 0xC8164C Offset: 0xC8164C VA: 0xC8164C
	private UICommonButton button; // 0x20
	private WarBoardTreasureData treasureData; // 0x28
	private bool isSelectable; // 0x30
	public static readonly int RARITY_TYPE; // 0x0

	// Methods

	// RVA: 0x1535944 Offset: 0x1535944 VA: 0x1535944
	public void .ctor() { }

	// RVA: 0x153594C Offset: 0x153594C VA: 0x153594C
	public void Initialize(WarBoardTreasureData data, UIAtlas itemIconAtlas) { }

	// RVA: 0x1535C3C Offset: 0x1535C3C VA: 0x1535C3C
	protected void SetButtonTweenTarget(Transform[] parents) { }

	// RVA: 0x1535E80 Offset: 0x1535E80 VA: 0x1535E80
	public void SetTouchEnable(bool enable) { }

	// RVA: 0x1535F34 Offset: 0x1535F34 VA: 0x1535F34
	public void OnClick() { }

	// RVA: 0x153606C Offset: 0x153606C VA: 0x153606C Slot: 4
	public virtual void Selectable() { }

	// RVA: 0x15360A8 Offset: 0x15360A8 VA: 0x15360A8 Slot: 5
	public virtual void Unselectable() { }

	// RVA: 0x15360E0 Offset: 0x15360E0 VA: 0x15360E0
	public void OnUse(int squareIndex, Action endCallback) { }

	// RVA: 0x1536324 Offset: 0x1536324 VA: 0x1536324
	private string GetAnimationNameByRarity() { }

	// RVA: 0x15363A4 Offset: 0x15363A4 VA: 0x15363A4
	private static void .cctor() { }
}

// Namespace: 
private enum WarBoardTreasureComponent.Rarity // TypeDefIndex: 11740
{
	// Fields
	public int value__; // 0x0
	public const WarBoardTreasureComponent.Rarity COMMON = 0;
	public const WarBoardTreasureComponent.Rarity RARE = 1;
	public const WarBoardTreasureComponent.Rarity SRARE = 2;
	public const WarBoardTreasureComponent.Rarity COMMON_PLUS = 3;
	public const WarBoardTreasureComponent.Rarity RARE_PLUS = 4;
	public const WarBoardTreasureComponent.Rarity SRARE_PLUS = 5;
	public const WarBoardTreasureComponent.Rarity COMMON_PLUS2 = 6;
	public const WarBoardTreasureComponent.Rarity RARE_PLUS2 = 7;
	public const WarBoardTreasureComponent.Rarity SRARE_PLUS2 = 8;
	public const WarBoardTreasureComponent.Rarity ITEM_ICON = 9;
	public const WarBoardTreasureComponent.Rarity ITEM_ICON_PLUS = 10;
	public const WarBoardTreasureComponent.Rarity ITEM_ICON_PLUS2 = 11;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46694 Offset: 0xC46694 VA: 0xC46694
private sealed class WarBoardTreasureComponent.<OnUse>c__AnonStorey0 // TypeDefIndex: 11741
{
	// Fields
	internal Action endCallback; // 0x10
	internal WarBoardTreasureComponent $this; // 0x18

	// Methods

	// RVA: 0x153631C Offset: 0x153631C VA: 0x153631C
	public void .ctor() { }

	// RVA: 0x15363F8 Offset: 0x15363F8 VA: 0x15363F8
	internal void <>m__0() { }
}

// Namespace: 
public class WarBoardRatingBase // TypeDefIndex: 11742
{
	// Fields
	protected WarBoardRatingBaseEntity ratingBase; // 0x10

	// Properties
	public int adjustmentValueA1 { get; }
	public int adjustmentValueB { get; }

	// Methods

	// RVA: 0x169B600 Offset: 0x169B600 VA: 0x169B600
	public void .ctor() { }

	// RVA: 0x169B608 Offset: 0x169B608 VA: 0x169B608
	public int GetId() { }

	// RVA: 0x169B634 Offset: 0x169B634 VA: 0x169B634
	public WarBoardRatingBaseEntity.Viewpoint GetViewpoint() { }

	// RVA: 0x169B660 Offset: 0x169B660 VA: 0x169B660
	public void Init(WarBoardRatingBaseEntity ratingBase) { }

	// RVA: 0x169B668 Offset: 0x169B668 VA: 0x169B668
	public int get_adjustmentValueA1() { }

	// RVA: 0x169B694 Offset: 0x169B694 VA: 0x169B694
	public int get_adjustmentValueB() { }

	// RVA: 0x169B6C0 Offset: 0x169B6C0 VA: 0x169B6C0 Slot: 4
	public virtual float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }

	// RVA: 0x169B6C8 Offset: 0x169B6C8 VA: 0x169B6C8
	protected void DebugLog(WarBoardSquareData calcSquare, WarBoardSquareData targetSquare) { }
}

// Namespace: 
public class ShortestDistanceFromAllyMaster : WarBoardRatingBase // TypeDefIndex: 11743
{
	// Methods

	// RVA: 0x1520744 Offset: 0x1520744 VA: 0x1520744
	public void .ctor() { }

	// RVA: 0x152074C Offset: 0x152074C VA: 0x152074C Slot: 4
	public override float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }
}

// Namespace: 
public class ShortestDistanceFromAllyServant : WarBoardRatingBase // TypeDefIndex: 11744
{
	// Methods

	// RVA: 0x15209E0 Offset: 0x15209E0 VA: 0x15209E0
	public void .ctor() { }

	// RVA: 0x15209E8 Offset: 0x15209E8 VA: 0x15209E8 Slot: 4
	public override float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }
}

// Namespace: 
public class ShortestDistanceFromEnemyMaster : WarBoardRatingBase // TypeDefIndex: 11745
{
	// Methods

	// RVA: 0x1520C74 Offset: 0x1520C74 VA: 0x1520C74
	public void .ctor() { }

	// RVA: 0x1520C7C Offset: 0x1520C7C VA: 0x1520C7C Slot: 4
	public override float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }
}

// Namespace: 
public class ShortestDistanceFromEnemyServant : WarBoardRatingBase // TypeDefIndex: 11746
{
	// Methods

	// RVA: 0x1520EA0 Offset: 0x1520EA0 VA: 0x1520EA0
	public void .ctor() { }

	// RVA: 0x1520EA8 Offset: 0x1520EA8 VA: 0x1520EA8 Slot: 4
	public override float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }
}

// Namespace: 
public class ShortestDistanceFromItem : WarBoardRatingBase // TypeDefIndex: 11747
{
	// Methods

	// RVA: 0x15210CC Offset: 0x15210CC VA: 0x15210CC
	public void .ctor() { }

	// RVA: 0x15210D4 Offset: 0x15210D4 VA: 0x15210D4 Slot: 4
	public override float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC466A4 Offset: 0xC466A4 VA: 0xC466A4
private sealed class ShortestDistanceFromItem.<GetRatingBase>c__AnonStorey0 // TypeDefIndex: 11748
{
	// Fields
	internal WarBoardSquareData targetSquare; // 0x10

	// Methods

	// RVA: 0x1521338 Offset: 0x1521338 VA: 0x1521338
	public void .ctor() { }

	// RVA: 0x1521340 Offset: 0x1521340 VA: 0x1521340
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
public class ShortestDistanceFromPrioritySpace : WarBoardRatingBase // TypeDefIndex: 11749
{
	// Methods

	// RVA: 0x15213E4 Offset: 0x15213E4 VA: 0x15213E4
	public void .ctor() { }

	// RVA: 0x15213EC Offset: 0x15213EC VA: 0x15213EC Slot: 4
	public override float GetRatingBase(int forceId, WarBoardSquareData calcSquare, WarBoardSquareData targetSquare, Dictionary<int, uint> dicPiecePlaceData, List<WarBoardAIRoute.RouteData> routeDataList) { }
}

// Namespace: 
public class WarBoardAI // TypeDefIndex: 11750
{
	// Fields
	private WarBoardAIRoute routeClass; // 0x10
	private List<WarBoardAIRoute.RouteData> executeRoute; // 0x18
	public bool isEndPhase; // 0x20
	public bool isEndRoute; // 0x21
	private int routeIndex; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xC8165C Offset: 0xC8165C VA: 0xC8165C
	private static Func<Decimal, Decimal> <>f__am$cache0; // 0x0

	// Properties
	public int ForceId { get; }
	public int GroupId { get; }

	// Methods

	// RVA: 0x14817F4 Offset: 0x14817F4 VA: 0x14817F4
	public void .ctor(WarBoardStageNpcEntity npc) { }

	// RVA: 0x1482274 Offset: 0x1482274 VA: 0x1482274
	public void Clear() { }

	// RVA: 0x1482300 Offset: 0x1482300 VA: 0x1482300
	public int get_ForceId() { }

	// RVA: 0x148232C Offset: 0x148232C VA: 0x148232C
	public int get_GroupId() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD5380 Offset: 0xCD5380 VA: 0xCD5380
	// RVA: 0x1482358 Offset: 0x1482358 VA: 0x1482358
	public IEnumerator Think() { }

	// RVA: 0x14823D0 Offset: 0x14823D0 VA: 0x14823D0
	public bool Execute() { }

	// RVA: 0x14826D8 Offset: 0x14826D8 VA: 0x14826D8
	public int GetRandomIndex(List<Decimal> weightTable) { }

	// RVA: 0x1482908 Offset: 0x1482908 VA: 0x1482908
	private string ConvertForceGroupIndexToString(int forceId, int groupId, int index) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5390 Offset: 0xCD5390 VA: 0xCD5390
	// RVA: 0x14829E8 Offset: 0x14829E8 VA: 0x14829E8
	private static Decimal <GetRandomIndex>m__0(Decimal x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC466B4 Offset: 0xC466B4 VA: 0xC466B4
private sealed class WarBoardAI.<Think>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11751
{
	// Fields
	internal List<List<WarBoardAIRoute.RouteData>> <allRouteList>__0; // 0x10
	internal int <pickValue>__1; // 0x18
	internal List<WarBoardAIRoute.RouteData>[] <sortList>__1; // 0x20
	internal List<WarBoardAIRoute.RouteData>[] <evalValueSortList>__1; // 0x28
	internal List<Decimal> <weightList>__1; // 0x30
	internal WarBoardAI $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C
	private static Func<List<WarBoardAIRoute.RouteData>, Decimal> <>f__am$cache0; // 0x0
	private static Func<WarBoardAIRoute.RouteData, Decimal> <>f__am$cache1; // 0x8
	private static Func<WarBoardAIRoute.RouteData, bool> <>f__am$cache2; // 0x10
	private static Func<WarBoardAIRoute.RouteData, Decimal> <>f__am$cache3; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDD610 Offset: 0xCDD610 VA: 0xCDD610
	// RVA: 0x14823C8 Offset: 0x14823C8 VA: 0x14823C8
	public void .ctor() { }

	// RVA: 0x14829EC Offset: 0x14829EC VA: 0x14829EC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD620 Offset: 0xCDD620 VA: 0xCDD620
	// RVA: 0x1484FEC Offset: 0x1484FEC VA: 0x1484FEC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD630 Offset: 0xCDD630 VA: 0xCDD630
	// RVA: 0x1484FF4 Offset: 0x1484FF4 VA: 0x1484FF4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD640 Offset: 0xCDD640 VA: 0xCDD640
	// RVA: 0x1484FFC Offset: 0x1484FFC VA: 0x1484FFC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD650 Offset: 0xCDD650 VA: 0xCDD650
	// RVA: 0x1485010 Offset: 0x1485010 VA: 0x1485010 Slot: 6
	public void Reset() { }

	// RVA: 0x1485078 Offset: 0x1485078 VA: 0x1485078
	private static Decimal <>m__0(List<WarBoardAIRoute.RouteData> x) { }

	// RVA: 0x1485130 Offset: 0x1485130 VA: 0x1485130
	private static Decimal <>m__1(WarBoardAIRoute.RouteData y) { }

	// RVA: 0x14851B0 Offset: 0x14851B0 VA: 0x14851B0
	private static bool <>m__2(WarBoardAIRoute.RouteData y) { }

	// RVA: 0x14851DC Offset: 0x14851DC VA: 0x14851DC
	private static Decimal <>m__3(WarBoardAIRoute.RouteData y) { }
}

// Namespace: 
public class WarBoardAIEvalCalcurater // TypeDefIndex: 11752
{
	// Fields
	private WarBoardAIRoute.PiecePersonality piecePersonalityList; // 0x10

	// Methods

	// RVA: 0x14852E4 Offset: 0x14852E4 VA: 0x14852E4
	public void .ctor(WarBoardAIRoute.PiecePersonality piecePersonality) { }

	// RVA: 0x1485310 Offset: 0x1485310 VA: 0x1485310
	public void CalcRatingOffsetReviewCondition(ref WarBoardAIRoute.RouteData route) { }

	// RVA: 0x1487570 Offset: 0x1487570 VA: 0x1487570
	public void AddRatingBaseOffsetValue(ref WarBoardAIRoute.RouteData route, WarBoardActionTrendEntity trend, bool isAdd) { }

	// RVA: 0x148784C Offset: 0x148784C VA: 0x148784C
	public void CalcRatingOffsetAddCondition(ref WarBoardAIRoute.RouteData route, float avgBeneValue) { }

	// RVA: 0x1487890 Offset: 0x1487890 VA: 0x1487890
	public void JudgeRatingOffsetAddCondition(ref WarBoardAIRoute.RouteData route, List<WarBoardRatingOffsetEntity> ratingOffsetList, float avgBeneValue) { }

	// RVA: 0x148900C Offset: 0x148900C VA: 0x148900C
	public void AddRatingOffsetAddCondition(ref WarBoardAIRoute.RouteData route, WarBoardRatingOffsetEntity ratingOffset, bool isAdd, WarBoardRatingOffsetEntity.Category category) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC466C4 Offset: 0xC466C4 VA: 0xC466C4
private sealed class WarBoardAIEvalCalcurater.<CalcRatingOffsetReviewCondition>c__AnonStorey0 // TypeDefIndex: 11753
{
	// Fields
	internal WarBoardActionTrendConditionEntity condition; // 0x10

	// Methods

	// RVA: 0x14874B8 Offset: 0x14874B8 VA: 0x14874B8
	public void .ctor() { }

	// RVA: 0x14890FC Offset: 0x14890FC VA: 0x14890FC
	internal bool <>m__0(KeyValuePair<uint, int> x) { }

	// RVA: 0x1489180 Offset: 0x1489180 VA: 0x1489180
	internal bool <>m__1(KeyValuePair<uint, int> x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC466D4 Offset: 0xC466D4 VA: 0xC466D4
private sealed class WarBoardAIEvalCalcurater.<JudgeRatingOffsetAddCondition>c__AnonStorey1 // TypeDefIndex: 11754
{
	// Fields
	internal WarBoardRatingOffsetEntity ratingOffset; // 0x10

	// Methods

	// RVA: 0x1488F94 Offset: 0x1488F94 VA: 0x1488F94
	public void .ctor() { }

	// RVA: 0x1489204 Offset: 0x1489204 VA: 0x1489204
	internal bool <>m__0(KeyValuePair<uint, int> x) { }

	// RVA: 0x1489288 Offset: 0x1489288 VA: 0x1489288
	internal bool <>m__1(KeyValuePair<uint, int> x) { }

	// RVA: 0x148930C Offset: 0x148930C VA: 0x148930C
	internal bool <>m__2(KeyValuePair<uint, int> x) { }

	// RVA: 0x148938C Offset: 0x148938C VA: 0x148938C
	internal bool <>m__3(KeyValuePair<uint, int> x) { }

	// RVA: 0x1489410 Offset: 0x1489410 VA: 0x1489410
	internal bool <>m__4(KeyValuePair<uint, int> x) { }

	// RVA: 0x1489490 Offset: 0x1489490 VA: 0x1489490
	internal bool <>m__5(KeyValuePair<uint, int> x) { }
}

// Namespace: 
public class WarBoardAIManager // TypeDefIndex: 11755
{
	// Fields
	[SerializeField] // RVA: 0xC8166C Offset: 0xC8166C VA: 0xC8166C
	private List<WarBoardAI> warBoardAIList; // 0x10
	private bool isPause; // 0x18
	private bool exec; // 0x19
	private IEnumerator executeTask; // 0x20
	private static Dictionary<int, WarBoardPieceData> dicSquareIndexEnemyPiece; // 0x0
	private static Dictionary<uint, WarBoardPieceData> dicUniqueIndexPiece; // 0x8
	private static Dictionary<int, WarBoardSquareData> dicIndexSquare; // 0x10
	private static Dictionary<int, WarBoardItemData> dicIndexItem; // 0x18

	// Methods

	// RVA: 0x1489514 Offset: 0x1489514 VA: 0x1489514
	public void .ctor() { }

	// RVA: 0x1489584 Offset: 0x1489584 VA: 0x1489584
	public void Initialize(List<WarBoardStageNpcEntity> npcList) { }

	// RVA: 0x14896E4 Offset: 0x14896E4 VA: 0x14896E4
	public void CreateAI(WarBoardStageNpcEntity npc) { }

	// RVA: 0x1489770 Offset: 0x1489770 VA: 0x1489770
	public void Pause() { }

	// RVA: 0x148977C Offset: 0x148977C VA: 0x148977C
	public void Resume() { }

	// RVA: 0x1489784 Offset: 0x1489784 VA: 0x1489784
	public void AIEnd() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD53A0 Offset: 0xCD53A0 VA: 0xCD53A0
	// RVA: 0x148978C Offset: 0x148978C VA: 0x148978C
	public IEnumerator Wait() { }

	// RVA: 0x1489804 Offset: 0x1489804 VA: 0x1489804
	public void StartAIPhase(int forceId, int groupId) { }

	// RVA: 0x1489954 Offset: 0x1489954 VA: 0x1489954
	public void StartThink(int forceId, int groupId) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD53B0 Offset: 0xCD53B0 VA: 0xCD53B0
	// RVA: 0x1489F4C Offset: 0x1489F4C VA: 0x1489F4C
	public IEnumerator Execute(int forceId, int groupId) { }

	// RVA: 0x1489FF8 Offset: 0x1489FF8 VA: 0x1489FF8
	public void Update() { }

	// RVA: 0x148A074 Offset: 0x148A074 VA: 0x148A074
	public static bool IsEqualPiece(WarBoardPieceData one, WarBoardPieceData two) { }

	// RVA: 0x1487518 Offset: 0x1487518 VA: 0x1487518
	public static bool IsAllyPiece(WarBoardPieceData one, WarBoardPieceData two) { }

	// RVA: 0x14874C0 Offset: 0x14874C0 VA: 0x14874C0
	public static bool IsEnemyPiece(WarBoardPieceData one, WarBoardPieceData two) { }

	// RVA: 0x1488F9C Offset: 0x1488F9C VA: 0x1488F9C
	public static float GetBreakPoint(WarBoardPieceData piece) { }

	// RVA: 0x148A118 Offset: 0x148A118 VA: 0x148A118
	public static Dictionary<int, WarBoardPieceData> GetEnemyPiece() { }

	// RVA: 0x148A180 Offset: 0x148A180 VA: 0x148A180
	public static WarBoardPieceData GetEnemyPieceSquareIndex(int squareIndex) { }

	// RVA: 0x148A22C Offset: 0x148A22C VA: 0x148A22C
	public static WarBoardPieceData GetPieceUnique(uint uniqueIndex) { }

	// RVA: 0x148262C Offset: 0x148262C VA: 0x148262C
	public static WarBoardSquareData GetSquare(int squareIndex) { }

	// RVA: 0x148A2D8 Offset: 0x148A2D8 VA: 0x148A2D8
	public static WarBoardItemData GetItem(int squareIndex) { }

	// RVA: 0x148A384 Offset: 0x148A384 VA: 0x148A384
	public static bool IsEnemyBlock(int squareIndex) { }

	// RVA: 0x148A3F4 Offset: 0x148A3F4 VA: 0x148A3F4
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC466E4 Offset: 0xC466E4 VA: 0xC466E4
private sealed class WarBoardAIManager.<Wait>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11756
{
	// Fields
	internal WarBoardAIManager $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDD660 Offset: 0xCDD660 VA: 0xCDD660
	// RVA: 0x14897FC Offset: 0x14897FC VA: 0x14897FC
	public void .ctor() { }

	// RVA: 0x148AE80 Offset: 0x148AE80 VA: 0x148AE80 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD670 Offset: 0xCDD670 VA: 0xCDD670
	// RVA: 0x148AF78 Offset: 0x148AF78 VA: 0x148AF78 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD680 Offset: 0xCDD680 VA: 0xCDD680
	// RVA: 0x148AF80 Offset: 0x148AF80 VA: 0x148AF80 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD690 Offset: 0xCDD690 VA: 0xCDD690
	// RVA: 0x148AF88 Offset: 0x148AF88 VA: 0x148AF88 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD6A0 Offset: 0xCDD6A0 VA: 0xCDD6A0
	// RVA: 0x148AF9C Offset: 0x148AF9C VA: 0x148AF9C Slot: 6
	public void Reset() { }

	// RVA: 0x148B004 Offset: 0x148B004 VA: 0x148B004
	internal bool <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC466F4 Offset: 0xC466F4 VA: 0xC466F4
private sealed class WarBoardAIManager.<StartAIPhase>c__AnonStorey2 // TypeDefIndex: 11757
{
	// Fields
	internal int forceId; // 0x10
	internal int groupId; // 0x14

	// Methods

	// RVA: 0x148994C Offset: 0x148994C VA: 0x148994C
	public void .ctor() { }

	// RVA: 0x148AD88 Offset: 0x148AD88 VA: 0x148AD88
	internal bool <>m__0(WarBoardAI x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46704 Offset: 0xC46704 VA: 0xC46704
private sealed class WarBoardAIManager.<StartThink>c__AnonStorey3 // TypeDefIndex: 11758
{
	// Fields
	internal int forceId; // 0x10
	internal int groupId; // 0x14

	// Methods

	// RVA: 0x1489F44 Offset: 0x1489F44 VA: 0x1489F44
	public void .ctor() { }

	// RVA: 0x148AE04 Offset: 0x148AE04 VA: 0x148AE04
	internal bool <>m__0(WarBoardAI x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46714 Offset: 0xC46714 VA: 0xC46714
private sealed class WarBoardAIManager.<Execute>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11759
{
	// Fields
	internal int forceId; // 0x10
	internal int groupId; // 0x14
	internal WarBoardAI <ai>__0; // 0x18
	internal bool <isNextPhase>__1; // 0x20
	internal IEnumerator <exe>__1; // 0x28
	internal float <prevTime>__1; // 0x30
	internal IEnumerator <enumeratorChild>__2; // 0x38
	internal WarBoardAIManager $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54
	private WarBoardAIManager.<Execute>c__Iterator1.<Execute>c__AnonStorey4 $locvar0; // 0x58

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDD6B0 Offset: 0xCDD6B0 VA: 0xCDD6B0
	// RVA: 0x1489FF0 Offset: 0x1489FF0 VA: 0x1489FF0
	public void .ctor() { }

	// RVA: 0x148A4F8 Offset: 0x148A4F8 VA: 0x148A4F8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD6C0 Offset: 0xCDD6C0 VA: 0xCDD6C0
	// RVA: 0x148AC80 Offset: 0x148AC80 VA: 0x148AC80 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD6D0 Offset: 0xCDD6D0 VA: 0xCDD6D0
	// RVA: 0x148AC88 Offset: 0x148AC88 VA: 0x148AC88 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD6E0 Offset: 0xCDD6E0 VA: 0xCDD6E0
	// RVA: 0x148AC90 Offset: 0x148AC90 VA: 0x148AC90 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD6F0 Offset: 0xCDD6F0 VA: 0xCDD6F0
	// RVA: 0x148ACA4 Offset: 0x148ACA4 VA: 0x148ACA4 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class WarBoardAIManager.<Execute>c__Iterator1.<Execute>c__AnonStorey4 // TypeDefIndex: 11760
{
	// Fields
	internal int forceId; // 0x10
	internal int groupId; // 0x14
	internal WarBoardAIManager.<Execute>c__Iterator1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x148AC78 Offset: 0x148AC78 VA: 0x148AC78
	public void .ctor() { }

	// RVA: 0x148AD0C Offset: 0x148AD0C VA: 0x148AD0C
	internal bool <>m__0(WarBoardAI x) { }
}

// Namespace: 
public class WarBoardAIRoute // TypeDefIndex: 11761
{
	// Fields
	private readonly int TEMP_SEARCH_DEPTH; // 0x10
	public int forceId; // 0x14
	public int groupId; // 0x18
	public int pickValue; // 0x1C
	private int moveCost; // 0x20
	private int masterMoveCost; // 0x24
	private int attackCost; // 0x28
	private WarBoardPieceData[] allAllyPiece; // 0x30
	private WarBoardSquareData[] allSquare; // 0x38
	private WarBoardPieceData[] allEnemyPiece; // 0x40
	private WarBoardItemData[] allItemData; // 0x48
	private WarBoardTreasureData[] allTreasureData; // 0x50
	public Dictionary<int, uint> placePieceData; // 0x58
	private uint masterUniqueIndex; // 0x60
	public List<WarBoardTacticalTrendEntity> tacticalTrendList; // 0x68
	public List<WarBoardRatingBase> ratingBaseList; // 0x70
	public List<WarBoardAIRoute.PiecePersonality> piecePersonalityList; // 0x78
	public float averageBenefitValue; // 0x80
	public List<List<WarBoardAIRoute.RouteData>> allRouteList; // 0x88
	public Dictionary<uint, WarBoardAIRoute.AdvantagePieceData> dicUniqueKeyAdvantagePieceData; // 0x90
	private Dictionary<IEnumerator, float> dictionaryCreateRouteDataEvalValue; // 0x98
	public Dictionary<uint, WarBoardAIRoute.DesignationItemData> dicUniqueKeyDesignationItem; // 0xA0
	public Dictionary<uint, WarBoardAIRoute.PutSquareTarget> dicUniqueKeyTarget; // 0xA8
	private Dictionary<int, WarBoardEvalValueSquare.CalcEval> dicRatingbaseCalcValue; // 0xB0
	private WarBoardStageNpcEntity npcData; // 0xB8
	private int enemyMasterSquareIndex; // 0xC0
	private Decimal sumAttackEvalOffsetAddValue; // 0xC4
	private Decimal sumMoveEvalOffsetAddValue; // 0xD4
	private Decimal sumWarAttackEvalOffsetMagnification; // 0xE4
	private Decimal sumWarMoveEvalOffsetMagnification; // 0xF4
	private Decimal sumBenAttackEvalOffsetMagnification; // 0x104
	private Decimal sumBenMoveEvalOffsetMagnification; // 0x114
	[CompilerGeneratedAttribute] // RVA: 0xC8167C Offset: 0xC8167C VA: 0xC8167C
	private static Func<WarBoardAIRoute.PiecePersonality, IEnumerable<WarBoardRatingOffsetEntity>> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC8168C Offset: 0xC8168C VA: 0xC8168C
	private static Func<WarBoardRatingOffsetEntity, bool> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC8169C Offset: 0xC8169C VA: 0xC8169C
	private static Func<WarBoardRatingOffsetEntity, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC816AC Offset: 0xC816AC VA: 0xC816AC
	private static Func<WarBoardRatingOffsetEntity, bool> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC816BC Offset: 0xC816BC VA: 0xC816BC
	private static Func<WarBoardRatingOffsetEntity, int> <>f__am$cache4; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC816CC Offset: 0xC816CC VA: 0xC816CC
	private static Func<WarBoardAIRoute.PiecePersonality, IEnumerable<WarBoardActionTrendEntity>> <>f__am$cache5; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC816DC Offset: 0xC816DC VA: 0xC816DC
	private static Func<WarBoardActionTrendEntity, bool> <>f__am$cache6; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC816EC Offset: 0xC816EC VA: 0xC816EC
	private static Func<WarBoardActionTrendEntity, Decimal> <>f__am$cache7; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC816FC Offset: 0xC816FC VA: 0xC816FC
	private static Func<WarBoardActionTrendEntity, Decimal> <>f__am$cache8; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC8170C Offset: 0xC8170C VA: 0xC8170C
	private static Func<WarBoardActionTrendEntity, bool> <>f__am$cache9; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC8171C Offset: 0xC8171C VA: 0xC8171C
	private static Func<WarBoardActionTrendEntity, Decimal> <>f__am$cacheA; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC8172C Offset: 0xC8172C VA: 0xC8172C
	private static Func<WarBoardActionTrendEntity, Decimal> <>f__am$cacheB; // 0x58

	// Methods

	// RVA: 0x148186C Offset: 0x148186C VA: 0x148186C
	public void .ctor(WarBoardStageNpcEntity npc) { }

	// RVA: 0x148B0B0 Offset: 0x148B0B0 VA: 0x148B0B0
	public static WarBoardAIRoute.DistanceType CalcurateDistanceType(int newDistance, int oldDistance) { }

	// RVA: 0x14822A0 Offset: 0x14822A0 VA: 0x14822A0
	public void Clear() { }

	// RVA: 0x14834D8 Offset: 0x14834D8 VA: 0x14834D8
	public void BeforeCreateRouteData() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD53C0 Offset: 0xCD53C0 VA: 0xCD53C0
	// RVA: 0x1484F20 Offset: 0x1484F20 VA: 0x1484F20
	public IEnumerator CreateRouteData(Dictionary<int, uint> piecePlaceData, int searchCount, List<WarBoardAIRoute.RouteData> routeDataList) { }

	// RVA: 0x148B0CC Offset: 0x148B0CC VA: 0x148B0CC
	private Dictionary<uint, int> GetRouteDataActionList(List<WarBoardAIRoute.RouteData> routeDataList, out int replaceCount, out int actionCount, out int masterActionCount, out int masterReplaceCount) { }

	// RVA: 0x148B3F0 Offset: 0x148B3F0 VA: 0x148B3F0
	private int GetRequiredCost(int moveCost, int masterMoveCost, int replaceCount, int actionCount, int masterActionCount, int masterReplaceCount) { }

	// RVA: 0x148B408 Offset: 0x148B408 VA: 0x148B408
	public HashSet<int> GetEvalValueTargetSquareList(Dictionary<int, uint> piecePlaceData, Dictionary<uint, int> routeDataActionList, out int masterSquareIndex) { }

	// RVA: 0x148B744 Offset: 0x148B744 VA: 0x148B744
	public WarBoardAIRoute.RouteData.Flag GetFlagDefenseArea(int masterSquareIndex, out HashSet<int> defenseAreaSquareIndexs, out int masterAndEnemyRange, out List<int[]> shortestRoutes, int[] allyPieces, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x148BE4C Offset: 0x148BE4C VA: 0x148BE4C
	private WarBoardEvalValueSquare.EvalValueSquare GetEvalValueSquare(Dictionary<int, WarBoardEvalValueSquare.EvalValueSquare> evalValueSquareList, int index) { }

	// RVA: 0x148BEB8 Offset: 0x148BEB8 VA: 0x148BEB8
	public int GetRangeShortMost(Dictionary<int, WarBoardPieceData> dicPieceList, int baseSquareIndex) { }

	// RVA: 0x148C06C Offset: 0x148C06C VA: 0x148C06C
	public static WarBoardAIRoute.DistanceType CompareBaseRangeToActionRange(Dictionary<int, WarBoardPieceData> dicPieceList, int baseRange, int actionIndex) { }

	// RVA: 0x148C22C Offset: 0x148C22C VA: 0x148C22C
	private bool CanAcquireItem(int targetSquare, List<int> alreadyGetItemList) { }

	// RVA: 0x148C2E4 Offset: 0x148C2E4 VA: 0x148C2E4
	public static WarBoardAIRoute.DistanceType CompareBaseRange(int baseRange, int actionRange) { }

	// RVA: 0x148BCC8 Offset: 0x148BCC8 VA: 0x148BCC8
	public static bool IsDetour(int[] route, int[] blockPieces) { }

	// RVA: 0x148C300 Offset: 0x148C300 VA: 0x148C300
	public static bool IsBlockShortestRouteEnemyAndMaster(List<int[]> shortestEnemyRoute, int index) { }

	// RVA: 0x148C4BC Offset: 0x148C4BC VA: 0x148C4BC
	public static bool IsAllBlockShortestRouteEnemyAndMastr(List<int[]> shortestEnemyRoute, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x148C86C Offset: 0x148C86C VA: 0x148C86C
	private void GetTargetItemToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicItemPutSquareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

