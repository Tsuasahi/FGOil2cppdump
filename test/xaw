
// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8 // TypeDefIndex: 129
{
	// Methods

	// RVA: 0x1245F70 Offset: 0x1245F70 VA: 0x1245F70
	private void .ctor() { }

	// RVA: 0x1245F78 Offset: 0x1245F78 VA: 0x1245F78
	public static PKCS8.KeyInfo GetType(byte[] data) { }
}

// Namespace: 
public enum PKCS8.KeyInfo // TypeDefIndex: 130
{
	// Fields
	public int value__; // 0x0
	public const PKCS8.KeyInfo PrivateKey = 0;
	public const PKCS8.KeyInfo EncryptedPrivateKey = 1;
	public const PKCS8.KeyInfo Unknown = 2;
}

// Namespace: 
public class PKCS8.PrivateKeyInfo // TypeDefIndex: 131
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x18
	private byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Properties
	public string Algorithm { get; set; }
	public ArrayList Attributes { get; }
	public byte[] PrivateKey { get; set; }
	public int Version { get; set; }

	// Methods

	// RVA: 0x1246BE8 Offset: 0x1246BE8 VA: 0x1246BE8
	public void .ctor() { }

	// RVA: 0x1246C58 Offset: 0x1246C58 VA: 0x1246C58
	public void .ctor(byte[] data) { }

	// RVA: 0x1246FB4 Offset: 0x1246FB4 VA: 0x1246FB4
	public string get_Algorithm() { }

	// RVA: 0x1246FBC Offset: 0x1246FBC VA: 0x1246FBC
	public void set_Algorithm(string value) { }

	// RVA: 0x1246FC4 Offset: 0x1246FC4 VA: 0x1246FC4
	public ArrayList get_Attributes() { }

	// RVA: 0x1246FCC Offset: 0x1246FCC VA: 0x1246FCC
	public byte[] get_PrivateKey() { }

	// RVA: 0x1247098 Offset: 0x1247098 VA: 0x1247098
	public void set_PrivateKey(byte[] value) { }

	// RVA: 0x12471B0 Offset: 0x12471B0 VA: 0x12471B0
	public int get_Version() { }

	// RVA: 0x12471B8 Offset: 0x12471B8 VA: 0x12471B8
	public void set_Version(int value) { }

	// RVA: 0x1246C84 Offset: 0x1246C84 VA: 0x1246C84
	private void Decode(byte[] data) { }

	// RVA: 0x1247250 Offset: 0x1247250 VA: 0x1247250
	public byte[] GetBytes() { }

	// RVA: 0x1247720 Offset: 0x1247720 VA: 0x1247720
	private static byte[] RemoveLeadingZero(byte[] bigInt) { }

	// RVA: 0x12477F4 Offset: 0x12477F4 VA: 0x12477F4
	private static byte[] Normalize(byte[] bigInt, int length) { }

	// RVA: 0x12478AC Offset: 0x12478AC VA: 0x12478AC
	public static RSA DecodeRSA(byte[] keypair) { }

	// RVA: 0x1247D80 Offset: 0x1247D80 VA: 0x1247D80
	public static byte[] Encode(RSA rsa) { }

	// RVA: 0x1248024 Offset: 0x1248024 VA: 0x1248024
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters) { }

	// RVA: 0x1248184 Offset: 0x1248184 VA: 0x1248184
	public static byte[] Encode(DSA dsa) { }

	// RVA: 0x12481F4 Offset: 0x12481F4 VA: 0x12481F4
	public static byte[] Encode(AsymmetricAlgorithm aa) { }
}

// Namespace: 
public class PKCS8.EncryptedPrivateKeyInfo // TypeDefIndex: 132
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x18
	private int _iterations; // 0x20
	private byte[] _data; // 0x28

	// Properties
	public string Algorithm { get; set; }
	public byte[] EncryptedData { get; set; }
	public byte[] Salt { get; set; }
	public int IterationCount { get; set; }

	// Methods

	// RVA: 0x1246174 Offset: 0x1246174 VA: 0x1246174
	public void .ctor() { }

	// RVA: 0x124617C Offset: 0x124617C VA: 0x124617C
	public void .ctor(byte[] data) { }

	// RVA: 0x1246520 Offset: 0x1246520 VA: 0x1246520
	public string get_Algorithm() { }

	// RVA: 0x1246528 Offset: 0x1246528 VA: 0x1246528
	public void set_Algorithm(string value) { }

	// RVA: 0x1246530 Offset: 0x1246530 VA: 0x1246530
	public byte[] get_EncryptedData() { }

	// RVA: 0x12465FC Offset: 0x12465FC VA: 0x12465FC
	public void set_EncryptedData(byte[] value) { }

	// RVA: 0x12466E8 Offset: 0x12466E8 VA: 0x12466E8
	public byte[] get_Salt() { }

	// RVA: 0x1246814 Offset: 0x1246814 VA: 0x1246814
	public void set_Salt(byte[] value) { }

	// RVA: 0x12468F0 Offset: 0x12468F0 VA: 0x12468F0
	public int get_IterationCount() { }

	// RVA: 0x12468F8 Offset: 0x12468F8 VA: 0x12468F8
	public void set_IterationCount(int value) { }

	// RVA: 0x12461AC Offset: 0x12461AC VA: 0x12461AC
	private void Decode(byte[] data) { }

	// RVA: 0x124699C Offset: 0x124699C VA: 0x124699C
	public byte[] GetBytes() { }
}

// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA // TypeDefIndex: 133
{
	// Fields
	private const int defaultKeySize = 1024;
	private bool isCRTpossible; // 0x20
	private bool keyBlinding; // 0x21
	private bool keypairGenerated; // 0x22
	private bool m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private RSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Properties
	public override int KeySize { get; }
	public override string KeyExchangeAlgorithm { get; }
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }
	public bool UseKeyBlinding { get; set; }
	public bool IsCrtPossible { get; }

	// Methods

	// RVA: 0x1248318 Offset: 0x1248318 VA: 0x1248318
	public void .ctor() { }

	// RVA: 0x1248320 Offset: 0x1248320 VA: 0x1248320
	public void .ctor(int keySize) { }

	// RVA: 0x1248428 Offset: 0x1248428 VA: 0x1248428
	public void add_KeyGenerated(RSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x12484EC Offset: 0x12484EC VA: 0x12484EC
	public void remove_KeyGenerated(RSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x12485B0 Offset: 0x12485B0 VA: 0x12485B0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1248630 Offset: 0x1248630 VA: 0x1248630
	private void GenerateKeyPair() { }

	// RVA: 0x1248D04 Offset: 0x1248D04 VA: 0x1248D04 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x1248D58 Offset: 0x1248D58 VA: 0x1248D58 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x1248DA0 Offset: 0x1248DA0 VA: 0x1248DA0
	public bool get_PublicOnly() { }

	// RVA: 0x1248E6C Offset: 0x1248E6C VA: 0x1248E6C Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x1248EB4 Offset: 0x1248EB4 VA: 0x1248EB4 Slot: 14
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x1249398 Offset: 0x1249398 VA: 0x1249398 Slot: 13
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x12494DC Offset: 0x12494DC VA: 0x12494DC Slot: 15
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x12498AC Offset: 0x12498AC VA: 0x12498AC Slot: 16
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x1249DC0 Offset: 0x1249DC0 VA: 0x1249DC0 Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x124A0A8 Offset: 0x124A0A8 VA: 0x124A0A8 Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: 0x124A7DC Offset: 0x124A7DC VA: 0x124A7DC
	public bool get_UseKeyBlinding() { }

	// RVA: 0x124A7E4 Offset: 0x124A7E4 VA: 0x124A7E4
	public void set_UseKeyBlinding(bool value) { }

	// RVA: 0x124A7F0 Offset: 0x124A7F0 VA: 0x124A7F0
	public bool get_IsCrtPossible() { }

	// RVA: 0x12492CC Offset: 0x12492CC VA: 0x12492CC
	private byte[] GetPaddedValue(BigInteger value, int length) { }
}

// Namespace: 
public sealed class RSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 134
{
	// Methods

	// RVA: 0x124A810 Offset: 0x124A810 VA: 0x124A810
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1248944 Offset: 0x1248944 VA: 0x1248944 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x124A820 Offset: 0x124A820 VA: 0x124A820 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x124A850 Offset: 0x124A850 VA: 0x124A850 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 135
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected bool encrypt; // 0x18
	private int BlockSizeByte; // 0x1C
	private byte[] temp; // 0x20
	private byte[] temp2; // 0x28
	private byte[] workBuff; // 0x30
	private byte[] workout; // 0x38
	private int FeedBackByte; // 0x40
	private int FeedBackIter; // 0x44
	private bool m_disposed; // 0x48
	private bool lastBlock; // 0x49
	private RandomNumberGenerator _rng; // 0x50

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public virtual int InputBlockSize { get; }
	public virtual int OutputBlockSize { get; }
	private bool KeepLastBlock { get; }

	// Methods

	// RVA: 0x124A85C Offset: 0x124A85C VA: 0x124A85C
	public void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV) { }

	// RVA: 0x124AB60 Offset: 0x124AB60 VA: 0x124AB60 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x124AB94 Offset: 0x124AB94 VA: 0x124AB94 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x124AC14 Offset: 0x124AC14 VA: 0x124AC14 Slot: 11
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x124AC74 Offset: 0x124AC74 VA: 0x124AC74 Slot: 12
	public virtual bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x124AC7C Offset: 0x124AC7C VA: 0x124AC7C Slot: 13
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x124AC84 Offset: 0x124AC84 VA: 0x124AC84 Slot: 14
	public virtual int get_InputBlockSize() { }

	// RVA: 0x124AC8C Offset: 0x124AC8C VA: 0x124AC8C Slot: 15
	public virtual int get_OutputBlockSize() { }

	// RVA: 0x124AC94 Offset: 0x124AC94 VA: 0x124AC94 Slot: 16
	protected virtual void Transform(byte[] input, byte[] output) { }

	// RVA: -1 Offset: -1 Slot: 17
	protected abstract void ECB(byte[] input, byte[] output);

	// RVA: 0x124AE68 Offset: 0x124AE68 VA: 0x124AE68 Slot: 18
	protected virtual void CBC(byte[] input, byte[] output) { }

	// RVA: 0x124B044 Offset: 0x124B044 VA: 0x124B044 Slot: 19
	protected virtual void CFB(byte[] input, byte[] output) { }

	// RVA: 0x124B30C Offset: 0x124B30C VA: 0x124B30C Slot: 20
	protected virtual void OFB(byte[] input, byte[] output) { }

	// RVA: 0x124B380 Offset: 0x124B380 VA: 0x124B380 Slot: 21
	protected virtual void CTS(byte[] input, byte[] output) { }

	// RVA: 0x124B3F4 Offset: 0x124B3F4 VA: 0x124B3F4
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x124B550 Offset: 0x124B550 VA: 0x124B550 Slot: 22
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x124B7B0 Offset: 0x124B7B0 VA: 0x124B7B0
	private bool get_KeepLastBlock() { }

	// RVA: 0x124B834 Offset: 0x124B834 VA: 0x124B834
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x124BA08 Offset: 0x124BA08 VA: 0x124BA08
	private void Random(byte[] buffer, int start, int length) { }

	// RVA: 0x124BACC Offset: 0x124BACC VA: 0x124BACC
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position) { }

	// RVA: 0x124BCAC Offset: 0x124BCAC VA: 0x124BCAC
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x124C00C Offset: 0x124C00C VA: 0x124C00C
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x124C3CC Offset: 0x124C3CC VA: 0x124C3CC Slot: 23
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: Mono.Security.X509.Extensions
internal class BasicConstraintsExtension : X509Extension // TypeDefIndex: 136
{
	// Fields
	private bool cA; // 0x28
	private int pathLenConstraint; // 0x2C

	// Properties
	public bool CertificateAuthority { get; }

	// Methods

	// RVA: 0x124EDBC Offset: 0x124EDBC VA: 0x124EDBC
	public void .ctor(X509Extension extension) { }

	// RVA: 0x124EF54 Offset: 0x124EF54 VA: 0x124EF54 Slot: 4
	protected override void Decode() { }

	// RVA: 0x124F11C Offset: 0x124F11C VA: 0x124F11C Slot: 5
	protected override void Encode() { }

	// RVA: 0x124F278 Offset: 0x124F278 VA: 0x124F278
	public bool get_CertificateAuthority() { }

	// RVA: 0x124F280 Offset: 0x124F280 VA: 0x124F280 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 137
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Properties
	public string BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x1252B54 Offset: 0x1252B54 VA: 0x1252B54
	public void .ctor(string bagOID, ASN1 asn1) { }

	// RVA: 0x12514D8 Offset: 0x12514D8 VA: 0x12514D8
	public string get_BagOID() { }

	// RVA: 0x12514E0 Offset: 0x12514E0 VA: 0x12514E0
	public ASN1 get_ASN1() { }
}

// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable // TypeDefIndex: 138
{
	// Fields
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private bool _keyBagsChanged; // 0x30
	private bool _secretBagsChanged; // 0x31
	private bool _certsChanged; // 0x32
	private int _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static int password_max_length; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xC3758C Offset: 0xC3758C VA: 0xC3758C
	private static Dictionary<string, int> <>f__switch$map8; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC3759C Offset: 0xC3759C VA: 0xC3759C
	private static Dictionary<string, int> <>f__switch$map9; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC375AC Offset: 0xC375AC VA: 0xC375AC
	private static Dictionary<string, int> <>f__switch$mapA; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC375BC Offset: 0xC375BC VA: 0xC375BC
	private static Dictionary<string, int> <>f__switch$mapB; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC375CC Offset: 0xC375CC VA: 0xC375CC
	private static Dictionary<string, int> <>f__switch$mapF; // 0x28

	// Properties
	public string Password { set; }
	public int IterationCount { get; set; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static int MaximumPasswordLength { get; }

	// Methods

	// RVA: 0x124F470 Offset: 0x124F470 VA: 0x124F470
	public void .ctor() { }

	// RVA: 0x124F56C Offset: 0x124F56C VA: 0x124F56C
	public void .ctor(byte[] data) { }

	// RVA: 0x12500A0 Offset: 0x12500A0 VA: 0x12500A0
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x12500E4 Offset: 0x12500E4 VA: 0x12500E4
	private static void .cctor() { }

	// RVA: 0x124F750 Offset: 0x124F750 VA: 0x124F750
	private void Decode(byte[] data) { }

	// RVA: 0x1250F8C Offset: 0x1250F8C VA: 0x1250F8C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x124F5C8 Offset: 0x124F5C8 VA: 0x124F5C8
	public void set_Password(string value) { }

	// RVA: 0x1251080 Offset: 0x1251080 VA: 0x1251080
	public int get_IterationCount() { }

	// RVA: 0x1251088 Offset: 0x1251088 VA: 0x1251088
	public void set_IterationCount(int value) { }

	// RVA: 0x1251090 Offset: 0x1251090 VA: 0x1251090
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x12514E8 Offset: 0x12514E8 VA: 0x12514E8
	internal RandomNumberGenerator get_RNG() { }

	// RVA: 0x1250324 Offset: 0x1250324 VA: 0x1250324
	private bool Compare(byte[] expected, byte[] actual) { }

	// RVA: 0x1251514 Offset: 0x1251514 VA: 0x1251514
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount) { }

	// RVA: 0x1251E50 Offset: 0x1251E50 VA: 0x1251E50
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData) { }

	// RVA: 0x1250E94 Offset: 0x1250E94 VA: 0x1250E94
	public byte[] Decrypt(PKCS7.EncryptedData ed) { }

	// RVA: 0x1251FF0 Offset: 0x1251FF0 VA: 0x1251FF0
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data) { }

	// RVA: 0x12521E0 Offset: 0x12521E0 VA: 0x12521E0
	private DSAParameters GetExistingParameters(out bool found) { }

	// RVA: 0x12529BC Offset: 0x12529BC VA: 0x12529BC
	private void AddPrivateKey(PKCS8.PrivateKeyInfo pki) { }

	// RVA: 0x12503F4 Offset: 0x12503F4 VA: 0x12503F4
	private void ReadSafeBag(ASN1 safeBag) { }

	// RVA: 0x1252B8C Offset: 0x1252B8C VA: 0x1252B8C
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }

	// RVA: 0x1250148 Offset: 0x1250148 VA: 0x1250148
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data) { }

	// RVA: 0x1253B3C Offset: 0x1253B3C VA: 0x1253B3C
	public byte[] GetBytes() { }

	// RVA: 0x1255E98 Offset: 0x1255E98 VA: 0x1255E98
	private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid) { }

	// RVA: 0x1255E90 Offset: 0x1255E90 VA: 0x1255E90
	public void AddCertificate(X509Certificate cert) { }

	// RVA: 0x1256240 Offset: 0x1256240 VA: 0x1256240
	public void AddCertificate(X509Certificate cert, IDictionary attributes) { }

	// RVA: 0x1255E88 Offset: 0x1255E88 VA: 0x1255E88
	public void RemoveCertificate(X509Certificate cert) { }

	// RVA: 0x1256534 Offset: 0x1256534 VA: 0x1256534
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }

	// RVA: 0x1256BCC Offset: 0x1256BCC VA: 0x1256BCC Slot: 4
	public object Clone() { }

	// RVA: 0x1251018 Offset: 0x1251018 VA: 0x1251018
	public static int get_MaximumPasswordLength() { }
}

// Namespace: 
public class PKCS12.DeriveBytes // TypeDefIndex: 139
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x8
	private static byte[] macDiversifier; // 0x10
	private string _hashName; // 0x10
	private int _iterations; // 0x18
	private byte[] _password; // 0x20
	private byte[] _salt; // 0x28

	// Properties
	public string HashName { set; }
	public int IterationCount { set; }
	public byte[] Password { set; }
	public byte[] Salt { set; }

	// Methods

	// RVA: 0x1251B78 Offset: 0x1251B78 VA: 0x1251B78
	public void .ctor() { }

	// RVA: 0x1256CD8 Offset: 0x1256CD8 VA: 0x1256CD8
	private static void .cctor() { }

	// RVA: 0x1251D48 Offset: 0x1251D48 VA: 0x1251D48
	public void set_HashName(string value) { }

	// RVA: 0x1251D40 Offset: 0x1251D40 VA: 0x1251D40
	public void set_IterationCount(int value) { }

	// RVA: 0x1251B80 Offset: 0x1251B80 VA: 0x1251B80
	public void set_Password(byte[] value) { }

	// RVA: 0x1251C6C Offset: 0x1251C6C VA: 0x1251C6C
	public void set_Salt(byte[] value) { }

	// RVA: 0x1256DBC Offset: 0x1256DBC VA: 0x1256DBC
	private void Adjust(byte[] a, int aOff, byte[] b) { }

	// RVA: 0x1256F68 Offset: 0x1256F68 VA: 0x1256F68
	private byte[] Derive(byte[] diversifier, int n) { }

	// RVA: 0x1251D50 Offset: 0x1251D50 VA: 0x1251D50
	public byte[] DeriveKey(int size) { }

	// RVA: 0x1251DD0 Offset: 0x1251DD0 VA: 0x1251DD0
	public byte[] DeriveIV(int size) { }

	// RVA: 0x1253ABC Offset: 0x1253ABC VA: 0x1253ABC
	public byte[] DeriveMAC(int size) { }
}

// Namespace: Mono.Security.X509
internal sealed class X501 // TypeDefIndex: 140
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x8
	private static byte[] organizationalUnitName; // 0x10
	private static byte[] commonName; // 0x18
	private static byte[] localityName; // 0x20
	private static byte[] stateOrProvinceName; // 0x28
	private static byte[] streetAddress; // 0x30
	private static byte[] domainComponent; // 0x38
	private static byte[] userid; // 0x40
	private static byte[] email; // 0x48
	private static byte[] dnQualifier; // 0x50
	private static byte[] title; // 0x58
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x68
	private static byte[] initial; // 0x70

	// Methods

	// RVA: 0x125752C Offset: 0x125752C VA: 0x125752C
	private static void .cctor() { }

	// RVA: 0x124E060 Offset: 0x124E060 VA: 0x124E060
	public static string ToString(ASN1 seq) { }

	// RVA: 0x1258584 Offset: 0x1258584 VA: 0x1258584
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes) { }

	// RVA: 0x1257C9C Offset: 0x1257C9C VA: 0x1257C9C
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes) { }
}

// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable // TypeDefIndex: 141
{
	// Fields
	private ASN1 decoder; // 0x10
	private byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private string m_issuername; // 0x48
	private string m_keyalgo; // 0x50
	private byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private string m_subject; // 0x68
	private byte[] m_publickey; // 0x70
	private byte[] signature; // 0x78
	private string m_signaturealgo; // 0x80
	private byte[] m_signaturealgoparams; // 0x88
	private byte[] certhash; // 0x90
	private RSA _rsa; // 0x98
	private DSA _dsa; // 0xA0
	private int version; // 0xA8
	private byte[] serialnumber; // 0xB0
	private byte[] issuerUniqueID; // 0xB8
	private byte[] subjectUniqueID; // 0xC0
	private X509ExtensionCollection extensions; // 0xC8
	private static string encoding_error; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC375DC Offset: 0xC375DC VA: 0xC375DC
	private static Dictionary<string, int> <>f__switch$map13; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC375EC Offset: 0xC375EC VA: 0xC375EC
	private static Dictionary<string, int> <>f__switch$map14; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC375FC Offset: 0xC375FC VA: 0xC375FC
	private static Dictionary<string, int> <>f__switch$map15; // 0x18

	// Properties
	public DSA DSA { get; }
	public X509ExtensionCollection Extensions { get; }
	public byte[] Hash { get; }
	public virtual string IssuerName { get; }
	public virtual string KeyAlgorithm { get; }
	public virtual byte[] KeyAlgorithmParameters { get; }
	public virtual byte[] PublicKey { get; }
	public virtual RSA RSA { get; }
	public virtual byte[] RawData { get; }
	public virtual byte[] SerialNumber { get; }
	public virtual byte[] Signature { get; }
	public virtual string SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }
	public int Version { get; }
	public bool IsCurrent { get; }
	public bool IsSelfSigned { get; }

	// Methods

	// RVA: 0x124D4D0 Offset: 0x124D4D0 VA: 0x124D4D0
	public void .ctor(byte[] data) { }

	// RVA: 0x1259434 Offset: 0x1259434 VA: 0x1259434
	private static void .cctor() { }

	// RVA: 0x1258940 Offset: 0x1258940 VA: 0x1258940
	private void Parse(byte[] data) { }

	// RVA: 0x1259498 Offset: 0x1259498 VA: 0x1259498
	private byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x12525D4 Offset: 0x12525D4 VA: 0x12525D4
	public DSA get_DSA() { }

	// RVA: 0x1259550 Offset: 0x1259550 VA: 0x1259550
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x1259558 Offset: 0x1259558 VA: 0x1259558
	public byte[] get_Hash() { }

	// RVA: 0x1259908 Offset: 0x1259908 VA: 0x1259908 Slot: 5
	public virtual string get_IssuerName() { }

	// RVA: 0x1259910 Offset: 0x1259910 VA: 0x1259910 Slot: 6
	public virtual string get_KeyAlgorithm() { }

	// RVA: 0x1259918 Offset: 0x1259918 VA: 0x1259918 Slot: 7
	public virtual byte[] get_KeyAlgorithmParameters() { }

	// RVA: 0x12599E4 Offset: 0x12599E4 VA: 0x12599E4 Slot: 8
	public virtual byte[] get_PublicKey() { }

	// RVA: 0x1259AB0 Offset: 0x1259AB0 VA: 0x1259AB0 Slot: 9
	public virtual RSA get_RSA() { }

	// RVA: 0x1259C88 Offset: 0x1259C88 VA: 0x1259C88 Slot: 10
	public virtual byte[] get_RawData() { }

	// RVA: 0x1259D54 Offset: 0x1259D54 VA: 0x1259D54 Slot: 11
	public virtual byte[] get_SerialNumber() { }

	// RVA: 0x1259E20 Offset: 0x1259E20 VA: 0x1259E20 Slot: 12
	public virtual byte[] get_Signature() { }

	// RVA: 0x125A340 Offset: 0x125A340 VA: 0x125A340 Slot: 13
	public virtual string get_SubjectName() { }

	// RVA: 0x125A348 Offset: 0x125A348 VA: 0x125A348 Slot: 14
	public virtual DateTime get_ValidFrom() { }

	// RVA: 0x125A354 Offset: 0x125A354 VA: 0x125A354 Slot: 15
	public virtual DateTime get_ValidUntil() { }

	// RVA: 0x125A360 Offset: 0x125A360 VA: 0x125A360
	public int get_Version() { }

	// RVA: 0x125A368 Offset: 0x125A368 VA: 0x125A368
	public bool get_IsCurrent() { }

	// RVA: 0x125A3E4 Offset: 0x125A3E4 VA: 0x125A3E4
	public bool WasCurrent(DateTime instant) { }

	// RVA: 0x125A4F4 Offset: 0x125A4F4 VA: 0x125A4F4
	internal string GetHashNameFromOID(string oid) { }

	// RVA: 0x125A748 Offset: 0x125A748 VA: 0x125A748
	internal bool VerifySignature(RSA rsa) { }

	// RVA: 0x125A8A4 Offset: 0x125A8A4 VA: 0x125A8A4
	public bool get_IsSelfSigned() { }

	// RVA: 0x125A954 Offset: 0x125A954 VA: 0x125A954
	public ASN1 GetIssuerName() { }

	// RVA: 0x125A95C Offset: 0x125A95C VA: 0x125A95C
	public ASN1 GetSubjectName() { }

	// RVA: 0x125A964 Offset: 0x125A964 VA: 0x125A964 Slot: 16
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x125877C Offset: 0x125877C VA: 0x125877C
	private static byte[] PEM(string type, byte[] data) { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xC30180 Offset: 0xC30180 VA: 0xC30180
[Serializable]
internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 142
{
	// Properties
	public X509Certificate Item { get; }

	// Methods

	// RVA: 0x124D4C8 Offset: 0x124D4C8 VA: 0x124D4C8
	public void .ctor() { }

	// RVA: 0x125A9D8 Offset: 0x125A9D8 VA: 0x125A9D8 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x125AA14 Offset: 0x125AA14 VA: 0x125AA14
	public X509Certificate get_Item(int index) { }

	// RVA: 0x124D664 Offset: 0x124D664 VA: 0x124D664
	public int Add(X509Certificate value) { }

	// RVA: 0x125AB10 Offset: 0x125AB10 VA: 0x125AB10
	public void AddRange(X509CertificateCollection value) { }

	// RVA: 0x125AC30 Offset: 0x125AC30 VA: 0x125AC30
	public bool Contains(X509Certificate value) { }

	// RVA: 0x1252434 Offset: 0x1252434 VA: 0x1252434
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x125AED8 Offset: 0x125AED8 VA: 0x125AED8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x125AC4C Offset: 0x125AC4C VA: 0x125AC4C
	public int IndexOf(X509Certificate value) { }

	// RVA: 0x125AF10 Offset: 0x125AF10 VA: 0x125AF10
	private bool Compare(byte[] array1, byte[] array2) { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 143
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x125AE08 Offset: 0x125AE08 VA: 0x125AE08
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x125AFD4 Offset: 0x125AFD4 VA: 0x125AFD4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x125B088 Offset: 0x125B088 VA: 0x125B088 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x125B140 Offset: 0x125B140 VA: 0x125B140 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x1252494 Offset: 0x1252494 VA: 0x1252494
	public X509Certificate get_Current() { }

	// RVA: 0x1252904 Offset: 0x1252904 VA: 0x1252904 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x125B1F8 Offset: 0x125B1F8 VA: 0x125B1F8 Slot: 8
	public void Reset() { }
}

// Namespace: Mono.Security.X509
internal class X509Chain // TypeDefIndex: 144
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x18
	private X509Certificate _root; // 0x20
	private X509CertificateCollection _chain; // 0x28
	private X509ChainStatusFlags _status; // 0x30

	// Properties
	public X509CertificateCollection TrustAnchors { get; }

	// Methods

	// RVA: 0x125B2B0 Offset: 0x125B2B0 VA: 0x125B2B0
	public void .ctor() { }

	// RVA: 0x125B31C Offset: 0x125B31C VA: 0x125B31C
	public X509CertificateCollection get_TrustAnchors() { }

	// RVA: 0x125B3B4 Offset: 0x125B3B4 VA: 0x125B3B4
	public void LoadCertificates(X509CertificateCollection collection) { }

	// RVA: 0x125B3E8 Offset: 0x125B3E8 VA: 0x125B3E8
	public bool Build(X509Certificate leaf) { }

	// RVA: 0x125BD34 Offset: 0x125BD34 VA: 0x125BD34
	public void Reset() { }

	// RVA: 0x125BCE8 Offset: 0x125BCE8 VA: 0x125BCE8
	private bool IsValid(X509Certificate cert) { }

	// RVA: 0x125B770 Offset: 0x125B770 VA: 0x125B770
	private X509Certificate FindCertificateParent(X509Certificate child) { }

	// RVA: 0x125B944 Offset: 0x125B944 VA: 0x125B944
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot) { }

	// RVA: 0x125BD8C Offset: 0x125BD8C VA: 0x125BD8C
	private bool IsTrusted(X509Certificate potentialTrusted) { }

	// RVA: 0x125BB58 Offset: 0x125BB58 VA: 0x125BB58
	private bool IsParent(X509Certificate child, X509Certificate parent) { }
}

// Namespace: Mono.Security.X509
[FlagsAttribute] // RVA: 0xC301B8 Offset: 0xC301B8 VA: 0xC301B8
[Serializable]
internal enum X509ChainStatusFlags // TypeDefIndex: 145
{
	// Fields
	public int value__; // 0x0
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024;
	public const X509ChainStatusFlags NoError = 0;
	public const X509ChainStatusFlags NotSignatureValid = 8;
	public const X509ChainStatusFlags NotTimeNested = 2;
	public const X509ChainStatusFlags NotTimeValid = 1;
	public const X509ChainStatusFlags PartialChain = 65536;
	public const X509ChainStatusFlags UntrustedRoot = 32;
}

// Namespace: Mono.Security.X509
internal class X509Extension // TypeDefIndex: 146
{
	// Fields
	protected string extnOid; // 0x10
	protected bool extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Properties
	public string Oid { get; }
	public bool Critical { get; }
	public ASN1 Value { get; }

	// Methods

	// RVA: 0x125BDCC Offset: 0x125BDCC VA: 0x125BDCC
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x124EDC0 Offset: 0x124EDC0 VA: 0x124EDC0
	public void .ctor(X509Extension extension) { }

	// RVA: 0x125C200 Offset: 0x125C200 VA: 0x125C200 Slot: 4
	protected virtual void Decode() { }

	// RVA: 0x125C204 Offset: 0x125C204 VA: 0x125C204 Slot: 5
	protected virtual void Encode() { }

	// RVA: 0x125C1F0 Offset: 0x125C1F0 VA: 0x125C1F0
	public string get_Oid() { }

	// RVA: 0x125C1F8 Offset: 0x125C1F8 VA: 0x125C1F8
	public bool get_Critical() { }

	// RVA: 0x125C1B8 Offset: 0x125C1B8 VA: 0x125C1B8
	public ASN1 get_Value() { }

	// RVA: 0x125C208 Offset: 0x125C208 VA: 0x125C208 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x125C3D4 Offset: 0x125C3D4 VA: 0x125C3D4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x125C404 Offset: 0x125C404 VA: 0x125C404
	private void WriteLine(StringBuilder sb, int n, int pos) { }

	// RVA: 0x125C6A4 Offset: 0x125C6A4 VA: 0x125C6A4 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xC301C8 Offset: 0xC301C8 VA: 0xC301C8
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 147
{
	// Fields
	private bool readOnly; // 0x18

	// Properties
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x10C5EBC Offset: 0x10C5EBC VA: 0x10C5EBC
	public void .ctor() { }

	// RVA: 0x10C5ECC Offset: 0x10C5ECC VA: 0x10C5ECC
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x10C6090 Offset: 0x10C6090 VA: 0x10C6090 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x10C60C8 Offset: 0x10C60C8 VA: 0x10C60C8
	public int IndexOf(string oid) { }

	// RVA: 0x10C633C Offset: 0x10C633C VA: 0x10C633C
	public X509Extension get_Item(string oid) { }
}

// Namespace: Mono.Security.X509
internal class X509Store // TypeDefIndex: 148
{
	// Fields
	private string _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x18
	private bool _crl; // 0x20

	// Properties
	public X509CertificateCollection Certificates { get; }

	// Methods

	// RVA: 0x10C644C Offset: 0x10C644C VA: 0x10C644C
	internal void .ctor(string path, bool crl) { }

	// RVA: 0x10C648C Offset: 0x10C648C VA: 0x10C648C
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x10C6680 Offset: 0x10C6680 VA: 0x10C6680
	private byte[] Load(string filename) { }

	// RVA: 0x10C680C Offset: 0x10C680C VA: 0x10C680C
	private X509Certificate LoadCertificate(string filename) { }

	// RVA: 0x10C6880 Offset: 0x10C6880 VA: 0x10C6880
	private bool CheckStore(string path, bool throwException) { }

	// RVA: 0x10C64C0 Offset: 0x10C64C0 VA: 0x10C64C0
