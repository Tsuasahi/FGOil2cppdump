
// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8 // TypeDefIndex: 129
{
	// Methods

	// RVA: 0x25CA304 Offset: 0x25CA304 VA: 0x25CA304
	private void .ctor() { }

	// RVA: 0x25CA30C Offset: 0x25CA30C VA: 0x25CA30C
	public static PKCS8.KeyInfo GetType(byte[] data) { }
}

// Namespace: 
public enum PKCS8.KeyInfo // TypeDefIndex: 130
{
	// Fields
	public int value__; // 0x0
	public const PKCS8.KeyInfo PrivateKey = 0;
	public const PKCS8.KeyInfo EncryptedPrivateKey = 1;
	public const PKCS8.KeyInfo Unknown = 2;
}

// Namespace: 
public class PKCS8.PrivateKeyInfo // TypeDefIndex: 131
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x18
	private byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Properties
	public string Algorithm { get; set; }
	public ArrayList Attributes { get; }
	public byte[] PrivateKey { get; set; }
	public int Version { get; set; }

	// Methods

	// RVA: 0x25CAF7C Offset: 0x25CAF7C VA: 0x25CAF7C
	public void .ctor() { }

	// RVA: 0x25CAFEC Offset: 0x25CAFEC VA: 0x25CAFEC
	public void .ctor(byte[] data) { }

	// RVA: 0x25CB348 Offset: 0x25CB348 VA: 0x25CB348
	public string get_Algorithm() { }

	// RVA: 0x25CB350 Offset: 0x25CB350 VA: 0x25CB350
	public void set_Algorithm(string value) { }

	// RVA: 0x25CB358 Offset: 0x25CB358 VA: 0x25CB358
	public ArrayList get_Attributes() { }

	// RVA: 0x25CB360 Offset: 0x25CB360 VA: 0x25CB360
	public byte[] get_PrivateKey() { }

	// RVA: 0x25CB42C Offset: 0x25CB42C VA: 0x25CB42C
	public void set_PrivateKey(byte[] value) { }

	// RVA: 0x25CB544 Offset: 0x25CB544 VA: 0x25CB544
	public int get_Version() { }

	// RVA: 0x25CB54C Offset: 0x25CB54C VA: 0x25CB54C
	public void set_Version(int value) { }

	// RVA: 0x25CB018 Offset: 0x25CB018 VA: 0x25CB018
	private void Decode(byte[] data) { }

	// RVA: 0x25CB5E4 Offset: 0x25CB5E4 VA: 0x25CB5E4
	public byte[] GetBytes() { }

	// RVA: 0x25CBAB4 Offset: 0x25CBAB4 VA: 0x25CBAB4
	private static byte[] RemoveLeadingZero(byte[] bigInt) { }

	// RVA: 0x25CBB88 Offset: 0x25CBB88 VA: 0x25CBB88
	private static byte[] Normalize(byte[] bigInt, int length) { }

	// RVA: 0x25CBC40 Offset: 0x25CBC40 VA: 0x25CBC40
	public static RSA DecodeRSA(byte[] keypair) { }

	// RVA: 0x25CC114 Offset: 0x25CC114 VA: 0x25CC114
	public static byte[] Encode(RSA rsa) { }

	// RVA: 0x25CC3B8 Offset: 0x25CC3B8 VA: 0x25CC3B8
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters) { }

	// RVA: 0x25CC518 Offset: 0x25CC518 VA: 0x25CC518
	public static byte[] Encode(DSA dsa) { }

	// RVA: 0x25CC588 Offset: 0x25CC588 VA: 0x25CC588
	public static byte[] Encode(AsymmetricAlgorithm aa) { }
}

// Namespace: 
public class PKCS8.EncryptedPrivateKeyInfo // TypeDefIndex: 132
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x18
	private int _iterations; // 0x20
	private byte[] _data; // 0x28

	// Properties
	public string Algorithm { get; set; }
	public byte[] EncryptedData { get; set; }
	public byte[] Salt { get; set; }
	public int IterationCount { get; set; }

	// Methods

	// RVA: 0x25CA508 Offset: 0x25CA508 VA: 0x25CA508
	public void .ctor() { }

	// RVA: 0x25CA510 Offset: 0x25CA510 VA: 0x25CA510
	public void .ctor(byte[] data) { }

	// RVA: 0x25CA8B4 Offset: 0x25CA8B4 VA: 0x25CA8B4
	public string get_Algorithm() { }

	// RVA: 0x25CA8BC Offset: 0x25CA8BC VA: 0x25CA8BC
	public void set_Algorithm(string value) { }

	// RVA: 0x25CA8C4 Offset: 0x25CA8C4 VA: 0x25CA8C4
	public byte[] get_EncryptedData() { }

	// RVA: 0x25CA990 Offset: 0x25CA990 VA: 0x25CA990
	public void set_EncryptedData(byte[] value) { }

	// RVA: 0x25CAA7C Offset: 0x25CAA7C VA: 0x25CAA7C
	public byte[] get_Salt() { }

	// RVA: 0x25CABA8 Offset: 0x25CABA8 VA: 0x25CABA8
	public void set_Salt(byte[] value) { }

	// RVA: 0x25CAC84 Offset: 0x25CAC84 VA: 0x25CAC84
	public int get_IterationCount() { }

	// RVA: 0x25CAC8C Offset: 0x25CAC8C VA: 0x25CAC8C
	public void set_IterationCount(int value) { }

	// RVA: 0x25CA540 Offset: 0x25CA540 VA: 0x25CA540
	private void Decode(byte[] data) { }

	// RVA: 0x25CAD30 Offset: 0x25CAD30 VA: 0x25CAD30
	public byte[] GetBytes() { }
}

// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA // TypeDefIndex: 133
{
	// Fields
	private const int defaultKeySize = 1024;
	private bool isCRTpossible; // 0x20
	private bool keyBlinding; // 0x21
	private bool keypairGenerated; // 0x22
	private bool m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private RSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Properties
	public override int KeySize { get; }
	public override string KeyExchangeAlgorithm { get; }
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }
	public bool UseKeyBlinding { get; set; }
	public bool IsCrtPossible { get; }

	// Methods

	// RVA: 0x25CC6AC Offset: 0x25CC6AC VA: 0x25CC6AC
	public void .ctor() { }

	// RVA: 0x25CC6B4 Offset: 0x25CC6B4 VA: 0x25CC6B4
	public void .ctor(int keySize) { }

	// RVA: 0x25CC7BC Offset: 0x25CC7BC VA: 0x25CC7BC
	public void add_KeyGenerated(RSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x25CC880 Offset: 0x25CC880 VA: 0x25CC880
	public void remove_KeyGenerated(RSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x25CC944 Offset: 0x25CC944 VA: 0x25CC944 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25CC9C4 Offset: 0x25CC9C4 VA: 0x25CC9C4
	private void GenerateKeyPair() { }

	// RVA: 0x25CD098 Offset: 0x25CD098 VA: 0x25CD098 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x25CD0EC Offset: 0x25CD0EC VA: 0x25CD0EC Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x25CD134 Offset: 0x25CD134 VA: 0x25CD134
	public bool get_PublicOnly() { }

	// RVA: 0x25CD200 Offset: 0x25CD200 VA: 0x25CD200 Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x25CD248 Offset: 0x25CD248 VA: 0x25CD248 Slot: 14
	public override byte[] DecryptValue(byte[] rgb) { }

	// RVA: 0x25CD72C Offset: 0x25CD72C VA: 0x25CD72C Slot: 13
	public override byte[] EncryptValue(byte[] rgb) { }

	// RVA: 0x25CD870 Offset: 0x25CD870 VA: 0x25CD870 Slot: 15
	public override RSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x25CDC40 Offset: 0x25CDC40 VA: 0x25CDC40 Slot: 16
	public override void ImportParameters(RSAParameters parameters) { }

	// RVA: 0x25CE154 Offset: 0x25CE154 VA: 0x25CE154 Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x25CE43C Offset: 0x25CE43C VA: 0x25CE43C Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: 0x25CEB70 Offset: 0x25CEB70 VA: 0x25CEB70
	public bool get_UseKeyBlinding() { }

	// RVA: 0x25CEB78 Offset: 0x25CEB78 VA: 0x25CEB78
	public void set_UseKeyBlinding(bool value) { }

	// RVA: 0x25CEB84 Offset: 0x25CEB84 VA: 0x25CEB84
	public bool get_IsCrtPossible() { }

	// RVA: 0x25CD660 Offset: 0x25CD660 VA: 0x25CD660
	private byte[] GetPaddedValue(BigInteger value, int length) { }
}

// Namespace: 
public sealed class RSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 134
{
	// Methods

	// RVA: 0x25CEBA4 Offset: 0x25CEBA4 VA: 0x25CEBA4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x25CCCD8 Offset: 0x25CCCD8 VA: 0x25CCCD8 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x25CEBB4 Offset: 0x25CEBB4 VA: 0x25CEBB4 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x25CEBE4 Offset: 0x25CEBE4 VA: 0x25CEBE4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 135
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected bool encrypt; // 0x18
	private int BlockSizeByte; // 0x1C
	private byte[] temp; // 0x20
	private byte[] temp2; // 0x28
	private byte[] workBuff; // 0x30
	private byte[] workout; // 0x38
	private int FeedBackByte; // 0x40
	private int FeedBackIter; // 0x44
	private bool m_disposed; // 0x48
	private bool lastBlock; // 0x49
	private RandomNumberGenerator _rng; // 0x50

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public virtual int InputBlockSize { get; }
	public virtual int OutputBlockSize { get; }
	private bool KeepLastBlock { get; }

	// Methods

	// RVA: 0x25CEBF0 Offset: 0x25CEBF0 VA: 0x25CEBF0
	public void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV) { }

	// RVA: 0x25CEEF4 Offset: 0x25CEEF4 VA: 0x25CEEF4 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x25CEF28 Offset: 0x25CEF28 VA: 0x25CEF28 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25CEFA8 Offset: 0x25CEFA8 VA: 0x25CEFA8 Slot: 11
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x25CF008 Offset: 0x25CF008 VA: 0x25CF008 Slot: 12
	public virtual bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x25CF010 Offset: 0x25CF010 VA: 0x25CF010 Slot: 13
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x25CF018 Offset: 0x25CF018 VA: 0x25CF018 Slot: 14
	public virtual int get_InputBlockSize() { }

	// RVA: 0x25CF020 Offset: 0x25CF020 VA: 0x25CF020 Slot: 15
	public virtual int get_OutputBlockSize() { }

	// RVA: 0x25CF028 Offset: 0x25CF028 VA: 0x25CF028 Slot: 16
	protected virtual void Transform(byte[] input, byte[] output) { }

	// RVA: -1 Offset: -1 Slot: 17
	protected abstract void ECB(byte[] input, byte[] output);

	// RVA: 0x25CF1FC Offset: 0x25CF1FC VA: 0x25CF1FC Slot: 18
	protected virtual void CBC(byte[] input, byte[] output) { }

	// RVA: 0x25CF3D8 Offset: 0x25CF3D8 VA: 0x25CF3D8 Slot: 19
	protected virtual void CFB(byte[] input, byte[] output) { }

	// RVA: 0x25CF6A0 Offset: 0x25CF6A0 VA: 0x25CF6A0 Slot: 20
	protected virtual void OFB(byte[] input, byte[] output) { }

	// RVA: 0x25CF714 Offset: 0x25CF714 VA: 0x25CF714 Slot: 21
	protected virtual void CTS(byte[] input, byte[] output) { }

	// RVA: 0x25CF788 Offset: 0x25CF788 VA: 0x25CF788
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x25CF8E4 Offset: 0x25CF8E4 VA: 0x25CF8E4 Slot: 22
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x25CFB44 Offset: 0x25CFB44 VA: 0x25CFB44
	private bool get_KeepLastBlock() { }

	// RVA: 0x25CFBC8 Offset: 0x25CFBC8 VA: 0x25CFBC8
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x25CFD9C Offset: 0x25CFD9C VA: 0x25CFD9C
	private void Random(byte[] buffer, int start, int length) { }

	// RVA: 0x25CFE60 Offset: 0x25CFE60 VA: 0x25CFE60
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position) { }

	// RVA: 0x25D0040 Offset: 0x25D0040 VA: 0x25D0040
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x25D03A0 Offset: 0x25D03A0 VA: 0x25D03A0
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x25D0760 Offset: 0x25D0760 VA: 0x25D0760 Slot: 23
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: Mono.Security.X509.Extensions
internal class BasicConstraintsExtension : X509Extension // TypeDefIndex: 136
{
	// Fields
	private bool cA; // 0x28
	private int pathLenConstraint; // 0x2C

	// Properties
	public bool CertificateAuthority { get; }

	// Methods

	// RVA: 0x25D3150 Offset: 0x25D3150 VA: 0x25D3150
	public void .ctor(X509Extension extension) { }

	// RVA: 0x25D32E8 Offset: 0x25D32E8 VA: 0x25D32E8 Slot: 4
	protected override void Decode() { }

	// RVA: 0x25D34B0 Offset: 0x25D34B0 VA: 0x25D34B0 Slot: 5
	protected override void Encode() { }

	// RVA: 0x25D360C Offset: 0x25D360C VA: 0x25D360C
	public bool get_CertificateAuthority() { }

	// RVA: 0x25D3614 Offset: 0x25D3614 VA: 0x25D3614 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 137
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Properties
	public string BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x25D6EE8 Offset: 0x25D6EE8 VA: 0x25D6EE8
	public void .ctor(string bagOID, ASN1 asn1) { }

	// RVA: 0x25D586C Offset: 0x25D586C VA: 0x25D586C
	public string get_BagOID() { }

	// RVA: 0x25D5874 Offset: 0x25D5874 VA: 0x25D5874
	public ASN1 get_ASN1() { }
}

// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable // TypeDefIndex: 138
{
	// Fields
	private static int recommendedIterationCount; // 0x0
	private byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private bool _keyBagsChanged; // 0x30
	private bool _secretBagsChanged; // 0x31
	private bool _certsChanged; // 0x32
	private int _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static int password_max_length; // 0x4
	[CompilerGeneratedAttribute] // RVA: 0xBCB464 Offset: 0xBCB464 VA: 0xBCB464
	private static Dictionary<string, int> <>f__switch$map8; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBCB474 Offset: 0xBCB474 VA: 0xBCB474
	private static Dictionary<string, int> <>f__switch$map9; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBCB484 Offset: 0xBCB484 VA: 0xBCB484
	private static Dictionary<string, int> <>f__switch$mapA; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBCB494 Offset: 0xBCB494 VA: 0xBCB494
	private static Dictionary<string, int> <>f__switch$mapB; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xBCB4A4 Offset: 0xBCB4A4 VA: 0xBCB4A4
	private static Dictionary<string, int> <>f__switch$mapF; // 0x28

	// Properties
	public string Password { set; }
	public int IterationCount { get; set; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static int MaximumPasswordLength { get; }

	// Methods

	// RVA: 0x25D3804 Offset: 0x25D3804 VA: 0x25D3804
	public void .ctor() { }

	// RVA: 0x25D3900 Offset: 0x25D3900 VA: 0x25D3900
	public void .ctor(byte[] data) { }

	// RVA: 0x25D4434 Offset: 0x25D4434 VA: 0x25D4434
	public void .ctor(byte[] data, string password) { }

	// RVA: 0x25D4478 Offset: 0x25D4478 VA: 0x25D4478
	private static void .cctor() { }

	// RVA: 0x25D3AE4 Offset: 0x25D3AE4 VA: 0x25D3AE4
	private void Decode(byte[] data) { }

	// RVA: 0x25D5320 Offset: 0x25D5320 VA: 0x25D5320 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25D395C Offset: 0x25D395C VA: 0x25D395C
	public void set_Password(string value) { }

	// RVA: 0x25D5414 Offset: 0x25D5414 VA: 0x25D5414
	public int get_IterationCount() { }

	// RVA: 0x25D541C Offset: 0x25D541C VA: 0x25D541C
	public void set_IterationCount(int value) { }

	// RVA: 0x25D5424 Offset: 0x25D5424 VA: 0x25D5424
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x25D587C Offset: 0x25D587C VA: 0x25D587C
	internal RandomNumberGenerator get_RNG() { }

	// RVA: 0x25D46B8 Offset: 0x25D46B8 VA: 0x25D46B8
	private bool Compare(byte[] expected, byte[] actual) { }

	// RVA: 0x25D58A8 Offset: 0x25D58A8 VA: 0x25D58A8
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount) { }

	// RVA: 0x25D61E4 Offset: 0x25D61E4 VA: 0x25D61E4
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData) { }

	// RVA: 0x25D5228 Offset: 0x25D5228 VA: 0x25D5228
	public byte[] Decrypt(PKCS7.EncryptedData ed) { }

	// RVA: 0x25D6384 Offset: 0x25D6384 VA: 0x25D6384
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data) { }

	// RVA: 0x25D6574 Offset: 0x25D6574 VA: 0x25D6574
	private DSAParameters GetExistingParameters(out bool found) { }

	// RVA: 0x25D6D50 Offset: 0x25D6D50 VA: 0x25D6D50
	private void AddPrivateKey(PKCS8.PrivateKeyInfo pki) { }

	// RVA: 0x25D4788 Offset: 0x25D4788 VA: 0x25D4788
	private void ReadSafeBag(ASN1 safeBag) { }

	// RVA: 0x25D6F20 Offset: 0x25D6F20 VA: 0x25D6F20
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }

	// RVA: 0x25D44DC Offset: 0x25D44DC VA: 0x25D44DC
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data) { }

	// RVA: 0x25D7ED0 Offset: 0x25D7ED0 VA: 0x25D7ED0
	public byte[] GetBytes() { }

	// RVA: 0x25DA22C Offset: 0x25DA22C VA: 0x25DA22C
	private PKCS7.ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid) { }

	// RVA: 0x25DA224 Offset: 0x25DA224 VA: 0x25DA224
	public void AddCertificate(X509Certificate cert) { }

	// RVA: 0x25DA5D4 Offset: 0x25DA5D4 VA: 0x25DA5D4
	public void AddCertificate(X509Certificate cert, IDictionary attributes) { }

	// RVA: 0x25DA21C Offset: 0x25DA21C VA: 0x25DA21C
	public void RemoveCertificate(X509Certificate cert) { }

	// RVA: 0x25DA8C8 Offset: 0x25DA8C8 VA: 0x25DA8C8
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }

	// RVA: 0x25DAF60 Offset: 0x25DAF60 VA: 0x25DAF60 Slot: 4
	public object Clone() { }

	// RVA: 0x25D53AC Offset: 0x25D53AC VA: 0x25D53AC
	public static int get_MaximumPasswordLength() { }
}

// Namespace: 
public class PKCS12.DeriveBytes // TypeDefIndex: 139
{
	// Fields
	private static byte[] keyDiversifier; // 0x0
	private static byte[] ivDiversifier; // 0x8
	private static byte[] macDiversifier; // 0x10
	private string _hashName; // 0x10
	private int _iterations; // 0x18
	private byte[] _password; // 0x20
	private byte[] _salt; // 0x28

	// Properties
	public string HashName { set; }
	public int IterationCount { set; }
	public byte[] Password { set; }
	public byte[] Salt { set; }

	// Methods

	// RVA: 0x25D5F0C Offset: 0x25D5F0C VA: 0x25D5F0C
	public void .ctor() { }

	// RVA: 0x25DB06C Offset: 0x25DB06C VA: 0x25DB06C
	private static void .cctor() { }

	// RVA: 0x25D60DC Offset: 0x25D60DC VA: 0x25D60DC
	public void set_HashName(string value) { }

	// RVA: 0x25D60D4 Offset: 0x25D60D4 VA: 0x25D60D4
	public void set_IterationCount(int value) { }

	// RVA: 0x25D5F14 Offset: 0x25D5F14 VA: 0x25D5F14
	public void set_Password(byte[] value) { }

	// RVA: 0x25D6000 Offset: 0x25D6000 VA: 0x25D6000
	public void set_Salt(byte[] value) { }

	// RVA: 0x25DB150 Offset: 0x25DB150 VA: 0x25DB150
	private void Adjust(byte[] a, int aOff, byte[] b) { }

	// RVA: 0x25DB2FC Offset: 0x25DB2FC VA: 0x25DB2FC
	private byte[] Derive(byte[] diversifier, int n) { }

	// RVA: 0x25D60E4 Offset: 0x25D60E4 VA: 0x25D60E4
	public byte[] DeriveKey(int size) { }

	// RVA: 0x25D6164 Offset: 0x25D6164 VA: 0x25D6164
	public byte[] DeriveIV(int size) { }

	// RVA: 0x25D7E50 Offset: 0x25D7E50 VA: 0x25D7E50
	public byte[] DeriveMAC(int size) { }
}

// Namespace: Mono.Security.X509
internal sealed class X501 // TypeDefIndex: 140
{
	// Fields
	private static byte[] countryName; // 0x0
	private static byte[] organizationName; // 0x8
	private static byte[] organizationalUnitName; // 0x10
	private static byte[] commonName; // 0x18
	private static byte[] localityName; // 0x20
	private static byte[] stateOrProvinceName; // 0x28
	private static byte[] streetAddress; // 0x30
	private static byte[] domainComponent; // 0x38
	private static byte[] userid; // 0x40
	private static byte[] email; // 0x48
	private static byte[] dnQualifier; // 0x50
	private static byte[] title; // 0x58
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x68
	private static byte[] initial; // 0x70

	// Methods

	// RVA: 0x25DB8C0 Offset: 0x25DB8C0 VA: 0x25DB8C0
	private static void .cctor() { }

	// RVA: 0x25D23F4 Offset: 0x25D23F4 VA: 0x25D23F4
	public static string ToString(ASN1 seq) { }

	// RVA: 0x25DC918 Offset: 0x25DC918 VA: 0x25DC918
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes) { }

	// RVA: 0x25DC030 Offset: 0x25DC030 VA: 0x25DC030
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes) { }
}

// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable // TypeDefIndex: 141
{
	// Fields
	private ASN1 decoder; // 0x10
	private byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private string m_issuername; // 0x48
	private string m_keyalgo; // 0x50
	private byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private string m_subject; // 0x68
	private byte[] m_publickey; // 0x70
	private byte[] signature; // 0x78
	private string m_signaturealgo; // 0x80
	private byte[] m_signaturealgoparams; // 0x88
	private byte[] certhash; // 0x90
	private RSA _rsa; // 0x98
	private DSA _dsa; // 0xA0
	private int version; // 0xA8
	private byte[] serialnumber; // 0xB0
	private byte[] issuerUniqueID; // 0xB8
	private byte[] subjectUniqueID; // 0xC0
	private X509ExtensionCollection extensions; // 0xC8
	private static string encoding_error; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBCB4B4 Offset: 0xBCB4B4 VA: 0xBCB4B4
	private static Dictionary<string, int> <>f__switch$map13; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBCB4C4 Offset: 0xBCB4C4 VA: 0xBCB4C4
	private static Dictionary<string, int> <>f__switch$map14; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBCB4D4 Offset: 0xBCB4D4 VA: 0xBCB4D4
	private static Dictionary<string, int> <>f__switch$map15; // 0x18

	// Properties
	public DSA DSA { get; }
	public X509ExtensionCollection Extensions { get; }
	public byte[] Hash { get; }
	public virtual string IssuerName { get; }
	public virtual string KeyAlgorithm { get; }
	public virtual byte[] KeyAlgorithmParameters { get; }
	public virtual byte[] PublicKey { get; }
	public virtual RSA RSA { get; }
	public virtual byte[] RawData { get; }
	public virtual byte[] SerialNumber { get; }
	public virtual byte[] Signature { get; }
	public virtual string SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }
	public int Version { get; }
	public bool IsCurrent { get; }
	public bool IsSelfSigned { get; }

	// Methods

	// RVA: 0x25D1864 Offset: 0x25D1864 VA: 0x25D1864
	public void .ctor(byte[] data) { }

	// RVA: 0x25DD7C8 Offset: 0x25DD7C8 VA: 0x25DD7C8
	private static void .cctor() { }

	// RVA: 0x25DCCD4 Offset: 0x25DCCD4 VA: 0x25DCCD4
	private void Parse(byte[] data) { }

	// RVA: 0x25DD82C Offset: 0x25DD82C VA: 0x25DD82C
	private byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x25D6968 Offset: 0x25D6968 VA: 0x25D6968
	public DSA get_DSA() { }

	// RVA: 0x25DD8E4 Offset: 0x25DD8E4 VA: 0x25DD8E4
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x25DD8EC Offset: 0x25DD8EC VA: 0x25DD8EC
	public byte[] get_Hash() { }

	// RVA: 0x25DDC9C Offset: 0x25DDC9C VA: 0x25DDC9C Slot: 5
	public virtual string get_IssuerName() { }

	// RVA: 0x25DDCA4 Offset: 0x25DDCA4 VA: 0x25DDCA4 Slot: 6
	public virtual string get_KeyAlgorithm() { }

	// RVA: 0x25DDCAC Offset: 0x25DDCAC VA: 0x25DDCAC Slot: 7
	public virtual byte[] get_KeyAlgorithmParameters() { }

	// RVA: 0x25DDD78 Offset: 0x25DDD78 VA: 0x25DDD78 Slot: 8
	public virtual byte[] get_PublicKey() { }

	// RVA: 0x25DDE44 Offset: 0x25DDE44 VA: 0x25DDE44 Slot: 9
	public virtual RSA get_RSA() { }

	// RVA: 0x25DE01C Offset: 0x25DE01C VA: 0x25DE01C Slot: 10
	public virtual byte[] get_RawData() { }

	// RVA: 0x25DE0E8 Offset: 0x25DE0E8 VA: 0x25DE0E8 Slot: 11
	public virtual byte[] get_SerialNumber() { }

	// RVA: 0x25DE1B4 Offset: 0x25DE1B4 VA: 0x25DE1B4 Slot: 12
	public virtual byte[] get_Signature() { }

	// RVA: 0x25DE6D4 Offset: 0x25DE6D4 VA: 0x25DE6D4 Slot: 13
	public virtual string get_SubjectName() { }

	// RVA: 0x25DE6DC Offset: 0x25DE6DC VA: 0x25DE6DC Slot: 14
	public virtual DateTime get_ValidFrom() { }

	// RVA: 0x25DE6E8 Offset: 0x25DE6E8 VA: 0x25DE6E8 Slot: 15
	public virtual DateTime get_ValidUntil() { }

	// RVA: 0x25DE6F4 Offset: 0x25DE6F4 VA: 0x25DE6F4
	public int get_Version() { }

	// RVA: 0x25DE6FC Offset: 0x25DE6FC VA: 0x25DE6FC
	public bool get_IsCurrent() { }

	// RVA: 0x25DE778 Offset: 0x25DE778 VA: 0x25DE778
	public bool WasCurrent(DateTime instant) { }

	// RVA: 0x25DE888 Offset: 0x25DE888 VA: 0x25DE888
	internal string GetHashNameFromOID(string oid) { }

	// RVA: 0x25DEADC Offset: 0x25DEADC VA: 0x25DEADC
	internal bool VerifySignature(RSA rsa) { }

	// RVA: 0x25DEC38 Offset: 0x25DEC38 VA: 0x25DEC38
	public bool get_IsSelfSigned() { }

	// RVA: 0x25DECE8 Offset: 0x25DECE8 VA: 0x25DECE8
	public ASN1 GetIssuerName() { }

	// RVA: 0x25DECF0 Offset: 0x25DECF0 VA: 0x25DECF0
	public ASN1 GetSubjectName() { }

	// RVA: 0x25DECF8 Offset: 0x25DECF8 VA: 0x25DECF8 Slot: 16
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x25DCB10 Offset: 0x25DCB10 VA: 0x25DCB10
	private static byte[] PEM(string type, byte[] data) { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xBC4058 Offset: 0xBC4058 VA: 0xBC4058
[Serializable]
internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 142
{
	// Properties
	public X509Certificate Item { get; }

	// Methods

	// RVA: 0x25D185C Offset: 0x25D185C VA: 0x25D185C
	public void .ctor() { }

	// RVA: 0x25DED6C Offset: 0x25DED6C VA: 0x25DED6C Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x25DEDA8 Offset: 0x25DEDA8 VA: 0x25DEDA8
	public X509Certificate get_Item(int index) { }

	// RVA: 0x25D19F8 Offset: 0x25D19F8 VA: 0x25D19F8
	public int Add(X509Certificate value) { }

	// RVA: 0x25DEEA4 Offset: 0x25DEEA4 VA: 0x25DEEA4
	public void AddRange(X509CertificateCollection value) { }

	// RVA: 0x25DEFC4 Offset: 0x25DEFC4 VA: 0x25DEFC4
	public bool Contains(X509Certificate value) { }

	// RVA: 0x25D67C8 Offset: 0x25D67C8 VA: 0x25D67C8
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x25DF26C Offset: 0x25DF26C VA: 0x25DF26C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x25DEFE0 Offset: 0x25DEFE0 VA: 0x25DEFE0
	public int IndexOf(X509Certificate value) { }

	// RVA: 0x25DF2A4 Offset: 0x25DF2A4 VA: 0x25DF2A4
	private bool Compare(byte[] array1, byte[] array2) { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 143
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x25DF19C Offset: 0x25DF19C VA: 0x25DF19C
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x25DF368 Offset: 0x25DF368 VA: 0x25DF368 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x25DF41C Offset: 0x25DF41C VA: 0x25DF41C Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x25DF4D4 Offset: 0x25DF4D4 VA: 0x25DF4D4 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x25D6828 Offset: 0x25D6828 VA: 0x25D6828
	public X509Certificate get_Current() { }

	// RVA: 0x25D6C98 Offset: 0x25D6C98 VA: 0x25D6C98 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x25DF58C Offset: 0x25DF58C VA: 0x25DF58C Slot: 8
	public void Reset() { }
}

// Namespace: Mono.Security.X509
internal class X509Chain // TypeDefIndex: 144
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x18
	private X509Certificate _root; // 0x20
	private X509CertificateCollection _chain; // 0x28
	private X509ChainStatusFlags _status; // 0x30

	// Properties
	public X509CertificateCollection TrustAnchors { get; }

	// Methods

	// RVA: 0x25DF644 Offset: 0x25DF644 VA: 0x25DF644
	public void .ctor() { }

	// RVA: 0x25DF6B0 Offset: 0x25DF6B0 VA: 0x25DF6B0
	public X509CertificateCollection get_TrustAnchors() { }

	// RVA: 0x25DF748 Offset: 0x25DF748 VA: 0x25DF748
	public void LoadCertificates(X509CertificateCollection collection) { }

	// RVA: 0x25DF77C Offset: 0x25DF77C VA: 0x25DF77C
	public bool Build(X509Certificate leaf) { }

	// RVA: 0x25E00C8 Offset: 0x25E00C8 VA: 0x25E00C8
	public void Reset() { }

	// RVA: 0x25E007C Offset: 0x25E007C VA: 0x25E007C
	private bool IsValid(X509Certificate cert) { }

	// RVA: 0x25DFB04 Offset: 0x25DFB04 VA: 0x25DFB04
	private X509Certificate FindCertificateParent(X509Certificate child) { }

	// RVA: 0x25DFCD8 Offset: 0x25DFCD8 VA: 0x25DFCD8
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot) { }

	// RVA: 0x25E0120 Offset: 0x25E0120 VA: 0x25E0120
	private bool IsTrusted(X509Certificate potentialTrusted) { }

	// RVA: 0x25DFEEC Offset: 0x25DFEEC VA: 0x25DFEEC
	private bool IsParent(X509Certificate child, X509Certificate parent) { }
}

// Namespace: Mono.Security.X509
[FlagsAttribute] // RVA: 0xBC4090 Offset: 0xBC4090 VA: 0xBC4090
[Serializable]
internal enum X509ChainStatusFlags // TypeDefIndex: 145
{
	// Fields
	public int value__; // 0x0
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024;
	public const X509ChainStatusFlags NoError = 0;
	public const X509ChainStatusFlags NotSignatureValid = 8;
	public const X509ChainStatusFlags NotTimeNested = 2;
	public const X509ChainStatusFlags NotTimeValid = 1;
	public const X509ChainStatusFlags PartialChain = 65536;
	public const X509ChainStatusFlags UntrustedRoot = 32;
}

// Namespace: Mono.Security.X509
internal class X509Extension // TypeDefIndex: 146
{
	// Fields
	protected string extnOid; // 0x10
	protected bool extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Properties
	public string Oid { get; }
	public bool Critical { get; }
	public ASN1 Value { get; }

	// Methods

	// RVA: 0x25E0160 Offset: 0x25E0160 VA: 0x25E0160
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x25D3154 Offset: 0x25D3154 VA: 0x25D3154
	public void .ctor(X509Extension extension) { }

	// RVA: 0x25E0594 Offset: 0x25E0594 VA: 0x25E0594 Slot: 4
	protected virtual void Decode() { }

	// RVA: 0x25E0598 Offset: 0x25E0598 VA: 0x25E0598 Slot: 5
	protected virtual void Encode() { }

	// RVA: 0x25E0584 Offset: 0x25E0584 VA: 0x25E0584
	public string get_Oid() { }

	// RVA: 0x25E058C Offset: 0x25E058C VA: 0x25E058C
	public bool get_Critical() { }

	// RVA: 0x25E054C Offset: 0x25E054C VA: 0x25E054C
	public ASN1 get_Value() { }

	// RVA: 0x25E059C Offset: 0x25E059C VA: 0x25E059C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x25E0768 Offset: 0x25E0768 VA: 0x25E0768 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x25E0798 Offset: 0x25E0798 VA: 0x25E0798
	private void WriteLine(StringBuilder sb, int n, int pos) { }

	// RVA: 0x25E0A38 Offset: 0x25E0A38 VA: 0x25E0A38 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xBC40A0 Offset: 0xBC40A0 VA: 0xBC40A0
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 147
{
	// Fields
	private bool readOnly; // 0x18

	// Properties
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x22746D0 Offset: 0x22746D0 VA: 0x22746D0
	public void .ctor() { }

	// RVA: 0x22746E0 Offset: 0x22746E0 VA: 0x22746E0
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x22748A4 Offset: 0x22748A4 VA: 0x22748A4 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x22748DC Offset: 0x22748DC VA: 0x22748DC
	public int IndexOf(string oid) { }

	// RVA: 0x2274B50 Offset: 0x2274B50 VA: 0x2274B50
	public X509Extension get_Item(string oid) { }
}

// Namespace: Mono.Security.X509
internal class X509Store // TypeDefIndex: 148
{
	// Fields
	private string _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x18
	private bool _crl; // 0x20

	// Properties
	public X509CertificateCollection Certificates { get; }

	// Methods

	// RVA: 0x2274C60 Offset: 0x2274C60 VA: 0x2274C60
	internal void .ctor(string path, bool crl) { }

	// RVA: 0x2274CA0 Offset: 0x2274CA0 VA: 0x2274CA0
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x2274E94 Offset: 0x2274E94 VA: 0x2274E94
	private byte[] Load(string filename) { }

	// RVA: 0x2275020 Offset: 0x2275020 VA: 0x2275020
	private X509Certificate LoadCertificate(string filename) { }

	// RVA: 0x2275094 Offset: 0x2275094 VA: 0x2275094
	private bool CheckStore(string path, bool throwException) { }

	// RVA: 0x2274CD4 Offset: 0x2274CD4 VA: 0x2274CD4
