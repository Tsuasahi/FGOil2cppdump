	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xCC268C Offset: 0xCC268C VA: 0xCC268C
	protected Color erasureColor; // 0x1C0
	protected bool isWaitEndEffect; // 0x1D0
	protected UIStandFigureM figure; // 0x1D8
	protected CommonEffectComponent childEffect; // 0x1E0
	protected float addVolume; // 0x1E8
	protected Vector2 bodySize; // 0x1EC

	// Methods

	// RVA: 0x1F10AE8 Offset: 0x1F10AE8 VA: 0x1F10AE8
	public void .ctor() { }

	// RVA: 0x1F10B24 Offset: 0x1F10B24 VA: 0x1F10B24 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1F10B98 Offset: 0x1F10B98 VA: 0x1F10B98 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1F10D24 Offset: 0x1F10D24 VA: 0x1F10D24
	public void ErasureStart(UIStandFigureM figure) { }

	// RVA: 0x1F110F4 Offset: 0x1F110F4 VA: 0x1F110F4
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1F111F0 Offset: 0x1F111F0 VA: 0x1F111F0 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1F11110 Offset: 0x1F11110 VA: 0x1F11110
	protected void EffectResume() { }

	// RVA: 0x1F11214 Offset: 0x1F11214 VA: 0x1F11214
	protected void OnEndEffect() { }

	// RVA: 0x1F11294 Offset: 0x1F11294 VA: 0x1F11294
	protected void OnDestroy() { }

	// RVA: 0x1F1134C Offset: 0x1F1134C VA: 0x1F1134C Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaFlashEffectComponent : ProgramEffectComponent // TypeDefIndex: 7691
{
	// Fields
	[SerializeField] // RVA: 0xCC269C Offset: 0xCC269C VA: 0xCC269C
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xCC26AC Offset: 0xCC26AC VA: 0xCC26AC
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xCC26BC Offset: 0xCC26BC VA: 0xCC26BC
	protected Color flashColor; // 0x1C0
	[SerializeField] // RVA: 0xCC26CC Offset: 0xCC26CC VA: 0xCC26CC
	protected string wipeName; // 0x1D0
	[SerializeField] // RVA: 0xCC26DC Offset: 0xCC26DC VA: 0xCC26DC
	protected ExUIMeshRenderer backFlashMesh; // 0x1D8
	protected bool isWaitEndEffect; // 0x1E0
	protected UIStandFigureM figure; // 0x1E8
	protected AssetData wipeData; // 0x1F0
	protected CommonEffectComponent childEffect; // 0x1F8
	protected float addVolume; // 0x200
	protected Vector2 bodySize; // 0x204

	// Methods

	// RVA: 0x1F11420 Offset: 0x1F11420 VA: 0x1F11420
	public void .ctor() { }

	// RVA: 0x1F11490 Offset: 0x1F11490 VA: 0x1F11490 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1F11538 Offset: 0x1F11538 VA: 0x1F11538 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1F115A8 Offset: 0x1F115A8 VA: 0x1F115A8
	public void FlashStart(UIStandFigureM figure) { }

	// RVA: 0x1F11768 Offset: 0x1F11768 VA: 0x1F11768
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1F11BC4 Offset: 0x1F11BC4 VA: 0x1F11BC4
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1F11CC0 Offset: 0x1F11CC0 VA: 0x1F11CC0 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1F11BE0 Offset: 0x1F11BE0 VA: 0x1F11BE0
	protected void EffectResume() { }

	// RVA: 0x1F11CE4 Offset: 0x1F11CE4 VA: 0x1F11CE4
	protected void OnEndEffect() { }

	// RVA: 0x1F11DA0 Offset: 0x1F11DA0 VA: 0x1F11DA0
	protected void OnDestroy() { }

	// RVA: 0x1F11EE4 Offset: 0x1F11EE4 VA: 0x1F11EE4 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaWipeEffectComponent : ProgramEffectComponent // TypeDefIndex: 7692
{
	// Fields
	[SerializeField] // RVA: 0xCC26EC Offset: 0xCC26EC VA: 0xCC26EC
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xCC26FC Offset: 0xCC26FC VA: 0xCC26FC
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xCC270C Offset: 0xCC270C VA: 0xCC270C
	protected Color wipeColor; // 0x1C0
	[SerializeField] // RVA: 0xCC271C Offset: 0xCC271C VA: 0xCC271C
	protected string wipeName; // 0x1D0
	protected bool isWaitEndEffect; // 0x1D8
	protected UIStandFigureM figure; // 0x1E0
	protected AssetData wipeData; // 0x1E8
	protected CommonEffectComponent childEffect; // 0x1F0
	protected float addVolume; // 0x1F8
	protected Vector2 bodySize; // 0x1FC

	// Methods

	// RVA: 0x1F1900C Offset: 0x1F1900C VA: 0x1F1900C
	public void .ctor() { }

	// RVA: 0x1F1907C Offset: 0x1F1907C VA: 0x1F1907C Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1F190F0 Offset: 0x1F190F0 VA: 0x1F190F0 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1F19134 Offset: 0x1F19134 VA: 0x1F19134
	public void WipeStart(UIStandFigureM figure) { }

	// RVA: 0x1F192B4 Offset: 0x1F192B4 VA: 0x1F192B4
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1F195B8 Offset: 0x1F195B8 VA: 0x1F195B8
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1F196B4 Offset: 0x1F196B4 VA: 0x1F196B4 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1F195D4 Offset: 0x1F195D4 VA: 0x1F195D4
	protected void EffectResume() { }

	// RVA: 0x1F196D8 Offset: 0x1F196D8 VA: 0x1F196D8
	protected void OnEndEffect() { }

	// RVA: 0x1F19758 Offset: 0x1F19758 VA: 0x1F19758
	protected void OnDestroy() { }

	// RVA: 0x1F19848 Offset: 0x1F19848 VA: 0x1F19848 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaWipeTimeEffectComponent : ProgramEffectComponent // TypeDefIndex: 7693
{
	// Fields
	[SerializeField] // RVA: 0xCC272C Offset: 0xCC272C VA: 0xCC272C
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xCC273C Offset: 0xCC273C VA: 0xCC273C
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xCC274C Offset: 0xCC274C VA: 0xCC274C
	protected Color wipeColor; // 0x1C0
	[SerializeField] // RVA: 0xCC275C Offset: 0xCC275C VA: 0xCC275C
	protected string wipeName; // 0x1D0
	protected bool isWaitEndEffect; // 0x1D8
	protected UIStandFigureM figure; // 0x1E0
	protected AssetData wipeData; // 0x1E8
	protected CommonEffectComponent childEffect; // 0x1F0
	protected float addVolume; // 0x1F8
	protected Vector2 bodySize; // 0x1FC

	// Methods

	// RVA: 0x1F1991C Offset: 0x1F1991C VA: 0x1F1991C
	public void .ctor() { }

	// RVA: 0x1F1998C Offset: 0x1F1998C VA: 0x1F1998C Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1F19A00 Offset: 0x1F19A00 VA: 0x1F19A00 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1F19A44 Offset: 0x1F19A44 VA: 0x1F19A44
	public void WipeStart(UIStandFigureM figure) { }

	// RVA: 0x1F19BA8 Offset: 0x1F19BA8 VA: 0x1F19BA8
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1F19EC8 Offset: 0x1F19EC8 VA: 0x1F19EC8
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1F19FC4 Offset: 0x1F19FC4 VA: 0x1F19FC4 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1F19EE4 Offset: 0x1F19EE4 VA: 0x1F19EE4
	protected void EffectResume() { }

	// RVA: 0x1F19FE8 Offset: 0x1F19FE8 VA: 0x1F19FE8
	protected void OnEndEffect() { }

	// RVA: 0x1F1A068 Offset: 0x1F1A068 VA: 0x1F1A068
	protected void OnDestroy() { }

	// RVA: 0x1F1A158 Offset: 0x1F1A158 VA: 0x1F1A158 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaWipeTimeReverseEffectComponent : ProgramEffectComponent // TypeDefIndex: 7694
{
	// Fields
	[SerializeField] // RVA: 0xCC276C Offset: 0xCC276C VA: 0xCC276C
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xCC277C Offset: 0xCC277C VA: 0xCC277C
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xCC278C Offset: 0xCC278C VA: 0xCC278C
	protected Color wipeColor; // 0x1C0
	[SerializeField] // RVA: 0xCC279C Offset: 0xCC279C VA: 0xCC279C
	protected string wipeName; // 0x1D0
	protected bool isWaitEndEffect; // 0x1D8
	protected UIStandFigureM figure; // 0x1E0
	protected AssetData wipeData; // 0x1E8
	protected CommonEffectComponent childEffect; // 0x1F0
	protected float addVolume; // 0x1F8
	protected Vector2 bodySize; // 0x1FC
	protected float maxAlpha; // 0x204

	// Methods

	// RVA: 0x1F1A22C Offset: 0x1F1A22C VA: 0x1F1A22C
	public void .ctor() { }

	// RVA: 0x1F1A29C Offset: 0x1F1A29C VA: 0x1F1A29C Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1F1A310 Offset: 0x1F1A310 VA: 0x1F1A310 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1F1A354 Offset: 0x1F1A354 VA: 0x1F1A354
	public void WipeStart(UIStandFigureM figure) { }

	// RVA: 0x1F1A4B8 Offset: 0x1F1A4B8 VA: 0x1F1A4B8
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1F1A7EC Offset: 0x1F1A7EC VA: 0x1F1A7EC
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1F1A8E8 Offset: 0x1F1A8E8 VA: 0x1F1A8E8 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1F1A808 Offset: 0x1F1A808 VA: 0x1F1A808
	protected void EffectResume() { }

	// RVA: 0x1F1A90C Offset: 0x1F1A90C VA: 0x1F1A90C
	protected void OnEndEffect() { }

	// RVA: 0x1F1A98C Offset: 0x1F1A98C VA: 0x1F1A98C
	protected void OnDestroy() { }

	// RVA: 0x1F1AA7C Offset: 0x1F1AA7C VA: 0x1F1AA7C Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CommonEffectActionComponent : MonoBehaviour // TypeDefIndex: 7695
{
	// Fields
	protected Action startAction; // 0x18
	protected Action endAction; // 0x20
	protected Dictionary<int, Action> eventActionList; // 0x28

	// Methods

	// RVA: 0x148EB68 Offset: 0x148EB68 VA: 0x148EB68
	public void .ctor() { }

	// RVA: 0x148EB70 Offset: 0x148EB70 VA: 0x148EB70
	private void Awake() { }

	// RVA: 0x148EBD8 Offset: 0x148EBD8 VA: 0x148EBD8
	public void SetStartAction(Action startAction) { }

	// RVA: 0x148EBE0 Offset: 0x148EBE0 VA: 0x148EBE0
	public void CallStartAction() { }

	// RVA: 0x148EBEC Offset: 0x148EBEC VA: 0x148EBEC
	public void SetEndAction(Action endAction) { }

	// RVA: 0x148EBF4 Offset: 0x148EBF4 VA: 0x148EBF4
	public void CallEndAction() { }

	// RVA: 0x148EC00 Offset: 0x148EC00 VA: 0x148EC00
	public void SetEventAction(int key, Action action) { }

	// RVA: 0x148EC7C Offset: 0x148EC7C VA: 0x148EC7C
	public void CallEventAction(int key) { }
}

// Namespace: 
public class CommonEffectComponent : BaseMonoBehaviour // TypeDefIndex: 7696
{
	// Fields
	[SerializeField] // RVA: 0xCC27AC Offset: 0xCC27AC VA: 0xCC27AC
	protected float endtime; // 0x18
	[SerializeField] // RVA: 0xCC27BC Offset: 0xCC27BC VA: 0xCC27BC
	protected float losttime; // 0x1C
	[SerializeField] // RVA: 0xCC27CC Offset: 0xCC27CC VA: 0xCC27CC
	protected bool loop; // 0x20
	[SerializeField] // RVA: 0xCC27DC Offset: 0xCC27DC VA: 0xCC27DC
	protected ParticleSystem[] particlelist; // 0x28
	protected CommonEffectComponent.Status status; // 0x30
	protected string requestAnimation; // 0x38
	protected string playAnimation; // 0x40
	protected string effectName; // 0x48
	protected string baseName; // 0x50
	protected AssetData asset; // 0x58
	protected float totaltime; // 0x60
	protected bool isDestroy; // 0x64
	protected bool isEndless; // 0x65
	protected bool isSkip; // 0x66
	protected bool isPause; // 0x67
	protected bool isStart; // 0x68
	protected Action callAfterStart; // 0x70
	protected Action callAfterStop; // 0x78
	protected int useAnimNum; // 0x80
	protected SimpleAnimation simpleAnimationComponent; // 0x88
	protected Animation animationComponent; // 0x90
	protected string settedVoiceStr; // 0x98
	private Action voiceCallback; // 0xA0

	// Properties
	public string EffectName { get; }
	public bool IsStart { get; }
	public bool IsEndStatus { get; }

	// Methods

	// RVA: 0x148ED24 Offset: 0x148ED24 VA: 0x148ED24
	public void .ctor() { }

	// RVA: 0x148ED40 Offset: 0x148ED40 VA: 0x148ED40
	public string get_EffectName() { }

	// RVA: 0x148ED48 Offset: 0x148ED48 VA: 0x148ED48
	public bool get_IsStart() { }

	// RVA: 0x148ED50 Offset: 0x148ED50 VA: 0x148ED50
	public bool get_IsEndStatus() { }

	// RVA: 0x148ED60 Offset: 0x148ED60 VA: 0x148ED60
	public void Init(bool isSkip = False, bool isPause = False) { }

	// RVA: 0x148F450 Offset: 0x148F450 VA: 0x148F450
	public void Init(string effectName, bool isSkip = False, bool isPause = False) { }

	// RVA: 0x148F470 Offset: 0x148F470 VA: 0x148F470
	public void Init(AssetData data, bool isSkip = False, bool isPause = False) { }

	// RVA: 0x148F4E4 Offset: 0x148F4E4 VA: 0x148F4E4
	public void Resume(bool isSkip) { }

	// RVA: 0x148F600 Offset: 0x148F600 VA: 0x148F600 Slot: 4
	public virtual void SetParam(object param) { }

	// RVA: 0x148F604 Offset: 0x148F604 VA: 0x148F604 Slot: 5
	protected virtual void NextPlayAnimation(CommonEffectComponent.Status next) { }

	// RVA: 0x148F5EC Offset: 0x148F5EC VA: 0x148F5EC
	public void ForceStart() { }

	// RVA: 0x1490148 Offset: 0x1490148 VA: 0x1490148 Slot: 6
	public virtual void ForceStart(bool isOverWrite, Action callback) { }

	// RVA: 0x1490464 Offset: 0x1490464 VA: 0x1490464
	public void ForceLoop() { }

	// RVA: 0x1490474 Offset: 0x1490474 VA: 0x1490474 Slot: 7
	public virtual void ForceLoop(bool isOverWrite) { }

	// RVA: 0x14907CC Offset: 0x14907CC VA: 0x14907CC Slot: 8
	public virtual void Stop(bool isDestroy = True, Action callback) { }

	// RVA: 0x1490ABC Offset: 0x1490ABC VA: 0x1490ABC Slot: 9
	public virtual void ForceStop(bool isDestroy = True, Action callback) { }

	// RVA: 0x14907E0 Offset: 0x14907E0 VA: 0x14907E0
	protected void StopInternal(bool force, bool isDestroy, Action onStoppedCallback) { }

	// RVA: 0x1490AD0 Offset: 0x1490AD0 VA: 0x1490AD0
	public void Rewind() { }

	// RVA: 0x148F118 Offset: 0x148F118 VA: 0x148F118
	protected void SetChildInit(Transform tf, int layer) { }

	// RVA: 0x1490B6C Offset: 0x1490B6C VA: 0x1490B6C
	protected void Awake() { }

	// RVA: 0x1490BDC Offset: 0x1490BDC VA: 0x1490BDC
	protected void Start() { }

	// RVA: 0x1490BE8 Offset: 0x1490BE8 VA: 0x1490BE8
	protected void Update() { }

	// RVA: 0x149106C Offset: 0x149106C VA: 0x149106C
	protected void OnDestroy() { }

	// RVA: 0x14910EC Offset: 0x14910EC VA: 0x14910EC
	public void SetEndlessEnable(bool isEnable) { }

	// RVA: 0x14910F8 Offset: 0x14910F8 VA: 0x14910F8
	protected void PlaySe(string name) { }

	// RVA: 0x14912F4 Offset: 0x14912F4 VA: 0x14912F4
	protected void PlayVoice(string name) { }

	// RVA: 0x14912FC Offset: 0x14912FC VA: 0x14912FC
	protected void PlayVoice(string name, Action callback) { }

	// RVA: 0x1491554 Offset: 0x1491554 VA: 0x1491554
	public void SetVoice(string voiceStr) { }

	// RVA: 0x149155C Offset: 0x149155C VA: 0x149155C
	public void SetVoice(string voiceStr, Action callback) { }

	// RVA: 0x1491564 Offset: 0x1491564 VA: 0x1491564
	public void SetUseAnimNum(int num) { }

	// RVA: 0x149156C Offset: 0x149156C VA: 0x149156C
	protected void PlaySettedVoice() { }

	// RVA: 0x1491580 Offset: 0x1491580 VA: 0x1491580
	protected void SetSePitch(string str) { }

	// RVA: 0x14916A4 Offset: 0x14916A4 VA: 0x14916A4
	public void ResetPrewarmParticleList() { }
}

// Namespace: 
protected enum CommonEffectComponent.Status // TypeDefIndex: 7697
{
	// Fields
	public int value__; // 0x0
	public const CommonEffectComponent.Status INIT = 0;
	public const CommonEffectComponent.Status PAUSE = 1;
	public const CommonEffectComponent.Status DESTORY = 2;
	public const CommonEffectComponent.Status START = 3;
	public const CommonEffectComponent.Status LOOP = 4;
	public const CommonEffectComponent.Status END = 5;
}

// Namespace: 
public class CommonEffectLoadComponent : BaseMonoBehaviour // TypeDefIndex: 7698
{
	// Fields
	[SerializeField] // RVA: 0xCC27EC Offset: 0xCC27EC VA: 0xCC27EC
	protected string effectName; // 0x18
	protected bool isInit; // 0x20
	protected bool isEnable; // 0x21
	[CompilerGeneratedAttribute] // RVA: 0xCC27FC Offset: 0xCC27FC VA: 0xCC27FC
	[DebuggerBrowsableAttribute] // RVA: 0xCC27FC Offset: 0xCC27FC VA: 0xCC27FC
	private CommonEffectLoadComponent.LoadEndHandler loadCallback; // 0x28
	protected object param; // 0x30
	protected bool isSkip; // 0x38
	protected bool isPause; // 0x39
	protected CommonEffectManager.FlipKind flip; // 0x3C

	// Properties
	public string EffectName { get; }

	// Methods

	// RVA: 0x1491814 Offset: 0x1491814 VA: 0x1491814
	public void .ctor() { }

	// RVA: 0x149181C Offset: 0x149181C VA: 0x149181C
	protected void add_loadCallback(CommonEffectLoadComponent.LoadEndHandler value) { }

	// RVA: 0x1491908 Offset: 0x1491908 VA: 0x1491908
	protected void remove_loadCallback(CommonEffectLoadComponent.LoadEndHandler value) { }

	// RVA: 0x14919F4 Offset: 0x14919F4 VA: 0x14919F4
	public string get_EffectName() { }

	// RVA: 0x14919FC Offset: 0x14919FC VA: 0x14919FC
	public void Init(string filename, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x1491A20 Offset: 0x1491A20 VA: 0x1491A20
	public void Init(string filename, object param, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x1491AD0 Offset: 0x1491AD0 VA: 0x1491AD0
	public void Init(string filename) { }

	// RVA: 0x1491FFC Offset: 0x1491FFC VA: 0x1491FFC
	protected void EndLoad(AssetData data) { }

	// RVA: 0x14926E0 Offset: 0x14926E0 VA: 0x14926E0
	public void Resume(bool isSkip) { }

	// RVA: 0x14926F0 Offset: 0x14926F0 VA: 0x14926F0
	protected void Start() { }

	// RVA: 0x1492778 Offset: 0x1492778 VA: 0x1492778
	public bool Stop() { }

	// RVA: 0x1492854 Offset: 0x1492854 VA: 0x1492854
	protected void OnDestroy() { }
}

// Namespace: 
public sealed class CommonEffectLoadComponent.LoadEndHandler : MulticastDelegate // TypeDefIndex: 7699
{
	// Methods

	// RVA: 0x14928D8 Offset: 0x14928D8 VA: 0x14928D8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1491C5C Offset: 0x1491C5C VA: 0x1491C5C Slot: 11
	public virtual void Invoke(CommonEffectComponent effect) { }

	// RVA: 0x14928E8 Offset: 0x14928E8 VA: 0x14928E8 Slot: 12
	public virtual IAsyncResult BeginInvoke(CommonEffectComponent effect, AsyncCallback callback, object object) { }

	// RVA: 0x149290C Offset: 0x149290C VA: 0x149290C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class CommonEffectManager : SingletonMonoBehaviour<CommonEffectManager> // TypeDefIndex: 7700
{
	// Fields
	[SerializeField] // RVA: 0xCC2838 Offset: 0xCC2838 VA: 0xCC2838
	protected GameObject loadEffectPrefab; // 0x18
	[SerializeField] // RVA: 0xCC2848 Offset: 0xCC2848 VA: 0xCC2848
	protected GameObject communicationCharaEffectPrefab; // 0x20
	[SerializeField] // RVA: 0xCC2858 Offset: 0xCC2858 VA: 0xCC2858
	protected CommonEffectManager.skinLoadEffect[] skinEffectLoadLists; // 0x28
	protected static string effectAssetStoragePath; // 0x0
	protected static string skinEffectAssetStoragePath; // 0x8
	protected static GameObject testEffectPrefab; // 0x10
	protected static GameObject testBackEffectPrefab; // 0x18
	protected static GameObject testCharaEffectPrefab; // 0x20
	protected static GameObject testCharaBackEffectPrefab; // 0x28
	private Dictionary<string, GameObject> skinedEffects; // 0x30
	private string loadedSkinAssetName; // 0x38
	private Action callbackAfterSkinLoad; // 0x40

	// Methods

	// RVA: 0x1492918 Offset: 0x1492918 VA: 0x1492918
	public void .ctor() { }

	// RVA: 0x14925EC Offset: 0x14925EC VA: 0x14925EC
	public static Quaternion GetFlipQuaternion(CommonEffectManager.FlipKind flip) { }

	// RVA: 0x1492968 Offset: 0x1492968 VA: 0x1492968
	public static string GetAssetName(string effectName) { }

	// RVA: 0x1492A04 Offset: 0x1492A04 VA: 0x1492A04
	public static CommonEffectComponent[] Get(GameObject parent) { }

	// RVA: 0x1492BC0 Offset: 0x1492BC0 VA: 0x1492BC0
	public static bool IsBusy(GameObject parent) { }

	// RVA: 0x1492D74 Offset: 0x1492D74 VA: 0x1492D74
	public static bool IsBusy(GameObject parent, string effectName) { }

	// RVA: 0x1492FEC Offset: 0x1492FEC VA: 0x1492FEC
	public static bool IsStart(GameObject parent) { }

	// RVA: 0x14931B8 Offset: 0x14931B8 VA: 0x14931B8
	public static bool IsStart(GameObject parent, string effectName) { }

	// RVA: 0x1493438 Offset: 0x1493438 VA: 0x1493438
	public static CommonEffectComponent Create(GameObject parent, string effectName, GameObject prefab) { }

	// RVA: 0x1493798 Offset: 0x1493798 VA: 0x1493798
	public static CommonEffectComponent Create(GameObject parent, string effectName, GameObject prefab, bool isSkip) { }

	// RVA: 0x149386C Offset: 0x149386C VA: 0x149386C
	public static CommonEffectComponent Create(GameObject parent, string effectName, GameObject prefab, Vector3 pos) { }

	// RVA: 0x149350C Offset: 0x149350C VA: 0x149350C
	public static CommonEffectComponent Create(GameObject parent, string effectName, GameObject prefab, Vector3 pos, bool isSkip, CommonEffectManager.FlipKind flip) { }

	// RVA: 0x1493940 Offset: 0x1493940 VA: 0x1493940
	public static CommonEffectComponent Create(GameObject parent, AssetData data, GameObject prefab) { }

	// RVA: 0x1493C88 Offset: 0x1493C88 VA: 0x1493C88
	public static CommonEffectComponent Create(GameObject parent, AssetData data, GameObject prefab, bool isSkip) { }

	// RVA: 0x1493D5C Offset: 0x1493D5C VA: 0x1493D5C
	public static CommonEffectComponent Create(GameObject parent, AssetData data, GameObject prefab, Vector3 pos) { }

	// RVA: 0x1493A14 Offset: 0x1493A14 VA: 0x1493A14
	public static CommonEffectComponent Create(GameObject parent, AssetData data, GameObject prefab, Vector3 pos, bool isSkip, CommonEffectManager.FlipKind flip) { }

	// RVA: 0x1493E08 Offset: 0x1493E08 VA: 0x1493E08
	public static void Create(GameObject parent, string effectName, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x1494504 Offset: 0x1494504 VA: 0x1494504
	public static void Create(GameObject parent, string effectName, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x1494610 Offset: 0x1494610 VA: 0x1494610
	public static void Create(GameObject parent, string effectName, Vector3 pos, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x14946E0 Offset: 0x14946E0 VA: 0x14946E0
	public static void Create(GameObject parent, string effectName, Vector3 pos, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x14947BC Offset: 0x14947BC VA: 0x14947BC
	public static void CreateParam(GameObject parent, string effectName, object param, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x14948C8 Offset: 0x14948C8 VA: 0x14948C8
	public static void CreateParam(GameObject parent, string effectName, object param, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x14949D8 Offset: 0x14949D8 VA: 0x14949D8
	public static void CreateParam(GameObject parent, string effectName, Vector3 pos, object param, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x1494AB4 Offset: 0x1494AB4 VA: 0x1494AB4
	public static void CreateParam(GameObject parent, string effectName, Vector3 pos, object param, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip = False, bool isPause = False, CommonEffectManager.FlipKind flip = 0) { }

	// RVA: 0x1494B94 Offset: 0x1494B94 VA: 0x1494B94
	public static void Resume(GameObject parent, bool isSkip = False) { }

	// RVA: 0x1494D80 Offset: 0x1494D80 VA: 0x1494D80
	public static void Resume(GameObject parent, string effectName, bool isSkip = False) { }

	// RVA: 0x1495038 Offset: 0x1495038 VA: 0x1495038
	public static bool Stop(GameObject parent, bool isSkip = False, bool isLoadStop = False) { }

	// RVA: 0x14953B8 Offset: 0x14953B8 VA: 0x14953B8
	public static bool Stop(GameObject parent, string effectName, bool isSkip = False, bool isLoadStop = False) { }

	// RVA: 0x1495448 Offset: 0x1495448 VA: 0x1495448
	public static bool ForceStop(GameObject parent, bool isSkip = False, bool isLoadStop = False) { }

	// RVA: 0x14954CC Offset: 0x14954CC VA: 0x14954CC
	public static bool ForceStop(GameObject parent, string effectName, bool isSkip = False, bool isLoadStop = False) { }

	// RVA: 0x14950BC Offset: 0x14950BC VA: 0x14950BC
	public static bool StopInternal(bool force, GameObject parent, string effectName, bool isSkip = False, bool isLoadStop = False) { }

	// RVA: 0x149555C Offset: 0x149555C VA: 0x149555C
	public static void Destroy(GameObject parent) { }

	// RVA: 0x1495868 Offset: 0x1495868 VA: 0x1495868
	public static void Destroy(GameObject parent, string effectName) { }

	// RVA: 0x1495C24 Offset: 0x1495C24 VA: 0x1495C24
	public static void SetTestEffectPrefab(GameObject effectPrefab, GameObject backEffectPrefab, GameObject charaEffectPrefab, GameObject charaBackEffectPrefab) { }

	// RVA: 0x1493F08 Offset: 0x1493F08 VA: 0x1493F08
	protected void LoadCreateLocal(GameObject parent, string effectName, Vector3 pos, object param, CommonEffectLoadComponent.LoadEndHandler callback, bool isSkip, bool isPause, CommonEffectManager.FlipKind flip) { }

	// RVA: 0x1495CC4 Offset: 0x1495CC4 VA: 0x1495CC4
	public static void Reboot() { }

	// RVA: 0x1495EDC Offset: 0x1495EDC VA: 0x1495EDC
	public void LoadSkinEffectsLocal(Action callback, int loadParallelMax = 1) { }

	// RVA: 0x1495D20 Offset: 0x1495D20 VA: 0x1495D20
	public void ReleaseSkinEffectsLocal() { }

	// RVA: 0x14960A4 Offset: 0x14960A4 VA: 0x14960A4
	public void SetSkinEffectsLocal(string[] effects, GameObject parent, bool doSetDepthZero) { }

	// RVA: 0x149625C Offset: 0x149625C VA: 0x149625C
	public GameObject SetSkinEffectLocal(string effect, GameObject parent) { }

	// RVA: 0x1496370 Offset: 0x1496370 VA: 0x1496370
	public bool IsSkinEffectLoaded() { }

	// RVA: 0x1496380 Offset: 0x1496380 VA: 0x1496380
	public static void LoadSkinEffects(Action callback, int loadParallelMax = 1) { }

	// RVA: 0x14963F4 Offset: 0x14963F4 VA: 0x14963F4
	public static void ReleaseSkinEffects() { }

	// RVA: 0x1496450 Offset: 0x1496450 VA: 0x1496450
	public static void SetSkinEffects(string[] effects, GameObject parent, bool doSetDepthZero) { }

	// RVA: 0x14964CC Offset: 0x14964CC VA: 0x14964CC
	public static GameObject SetSkinEffect(string effects, GameObject parent) { }

	// RVA: 0x1496540 Offset: 0x1496540 VA: 0x1496540
	public static bool IsLoadedSkinData() { }

	// RVA: 0x14965A4 Offset: 0x14965A4 VA: 0x14965A4
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38314 Offset: 0xD38314 VA: 0xD38314
	// RVA: 0x1496618 Offset: 0x1496618 VA: 0x1496618
	private void <LoadSkinEffectsLocal>m__0(AssetData data) { }
}

// Namespace: 
public enum CommonEffectManager.FlipKind // TypeDefIndex: 7701
{
	// Fields
	public int value__; // 0x0
	public const CommonEffectManager.FlipKind NORMAL = 0;
	public const CommonEffectManager.FlipKind HORIZONTAL = 1;
	public const CommonEffectManager.FlipKind VERTICAL = 2;
	public const CommonEffectManager.FlipKind FULL = 3;
}

// Namespace: 
[Serializable]
protected struct CommonEffectManager.skinLoadEffect // TypeDefIndex: 7702
{
	// Fields
	public string[] EffectName; // 0x0
}

// Namespace: 
public class CommonEffectParam // TypeDefIndex: 7703
{
	// Fields
	public string title; // 0x10
	public string message; // 0x18
	public string messageRuby; // 0x20
	public int type; // 0x28
	public int questMessageLabelMaxLine; // 0x2C
	public int questId; // 0x30

	// Methods

	// RVA: 0x149683C Offset: 0x149683C VA: 0x149683C
	public void .ctor() { }
}

// Namespace: 
public class CommonParticleControlComponent : MonoBehaviour // TypeDefIndex: 7704
{
	// Fields
	[SerializeField] // RVA: 0xCC2868 Offset: 0xCC2868 VA: 0xCC2868
	private List<ParticleSystem> particleParent; // 0x18

	// Methods

	// RVA: 0x149C828 Offset: 0x149C828 VA: 0x149C828
	public void .ctor() { }

	// RVA: 0x149C830 Offset: 0x149C830 VA: 0x149C830
	public void init(int layer) { }

	// RVA: 0x149C950 Offset: 0x149C950 VA: 0x149C950
	private void Update() { }

	// RVA: 0x149C884 Offset: 0x149C884 VA: 0x149C884
	private void setupLayer(int layer) { }

	// RVA: 0x149CAE4 Offset: 0x149CAE4 VA: 0x149CAE4
	public void particleStart(bool withChildren = True) { }

	// RVA: 0x149CBE0 Offset: 0x149CBE0 VA: 0x149CBE0
	public void particleAllStop(bool withChildren = True) { }

	// RVA: 0x149CCD8 Offset: 0x149CCD8 VA: 0x149CCD8
	public void particleStop(int idx, bool withChildren = True) { }

	// RVA: 0x149CA14 Offset: 0x149CA14 VA: 0x149CA14
	public bool isAlive(int idx, bool withChildren = True) { }
}

// Namespace: 
public class CommunicationCharaEffectComponent : CommonEffectComponent // TypeDefIndex: 7705
{
	// Fields
	[SerializeField] // RVA: 0xCC2878 Offset: 0xCC2878 VA: 0xCC2878
	protected GameObject figureBase; // 0xA8
	[SerializeField] // RVA: 0xCC2888 Offset: 0xCC2888 VA: 0xCC2888
	protected CommonEffectComponent noiseEffect1; // 0xB0
	[SerializeField] // RVA: 0xCC2898 Offset: 0xCC2898 VA: 0xCC2898
	protected CommonEffectComponent noiseEffect2; // 0xB8
	protected CommunicationCharaEffectParam communicationCharaParam; // 0xC0
	protected UIStandFigureM figure; // 0xC8
	protected bool isLoad; // 0xD0
	protected float noiseCount; // 0xD4

	// Methods

	// RVA: 0x18247F8 Offset: 0x18247F8 VA: 0x18247F8
	public void .ctor() { }

	// RVA: 0x1824800 Offset: 0x1824800 VA: 0x1824800 Slot: 4
	public override void SetParam(object param) { }

	// RVA: 0x18249B0 Offset: 0x18249B0 VA: 0x18249B0
	protected void EndDispFigure() { }

	// RVA: 0x1824A80 Offset: 0x1824A80 VA: 0x1824A80
	protected void Update() { }

	// RVA: 0x1824B08 Offset: 0x1824B08 VA: 0x1824B08
	public void SetFace(Face.Type faceType) { }
}

// Namespace: 
public class CommunicationCharaEffectParam // TypeDefIndex: 7706
{
	// Fields
	public int noiseKind; // 0x10
	public int svtId; // 0x14
	public int limitCount; // 0x18
	public Face.Type faceType; // 0x1C
	public bool isStartLoop; // 0x20
	public Action callback; // 0x28

	// Methods

	// RVA: 0x1824BBC Offset: 0x1824BBC VA: 0x1824BBC
	public void .ctor() { }
}

// Namespace: 
public class CutInEffectComponent : CommonEffectComponent // TypeDefIndex: 7707
{
	// Fields
	[SerializeField] // RVA: 0xCC28A8 Offset: 0xCC28A8 VA: 0xCC28A8
	[TooltipAttribute] // RVA: 0xCC28A8 Offset: 0xCC28A8 VA: 0xCC28A8
	private GameObject[] prefabRoots; // 0xA8
	private string[] voiceStrs; // 0xB0
	private BattlePerformance battlePerformance; // 0xB8

	// Methods

	// RVA: 0x1980F58 Offset: 0x1980F58 VA: 0x1980F58
	public void .ctor() { }

	// RVA: 0x1980F60 Offset: 0x1980F60 VA: 0x1980F60
	public void PlayVoiceFromIdx(int idx) { }

	// RVA: 0x1981060 Offset: 0x1981060 VA: 0x1981060
	public void SetVoiceStrs(string[] voiceStrs) { }

	// RVA: 0x1981068 Offset: 0x1981068 VA: 0x1981068
	public GameObject GetPrefabRoot(int idx) { }

	// RVA: 0x19810EC Offset: 0x19810EC VA: 0x19810EC
	public void SetBattlePerformance(BattlePerformance performance) { }

	// RVA: 0x19810F4 Offset: 0x19810F4 VA: 0x19810F4
	private void PlayBuffEffect(int functionIndex) { }
}

// Namespace: 
public class CuttingEffectComponent : ProgramEffectComponent // TypeDefIndex: 7708
{
	// Fields
	[SerializeField] // RVA: 0xCC28F4 Offset: 0xCC28F4 VA: 0xCC28F4
	protected ExUIMeshRenderer leftMeshRenderer; // 0x1B0
	[SerializeField] // RVA: 0xCC2904 Offset: 0xCC2904 VA: 0xCC2904
	protected ExUIMeshRenderer rightMeshRenderer; // 0x1B8

	// Methods

	// RVA: 0x19811A4 Offset: 0x19811A4 VA: 0x19811A4
	public void .ctor() { }

	// RVA: 0x19811AC Offset: 0x19811AC VA: 0x19811AC
	public void CuttingStart(Texture texture) { }

	// RVA: 0x1981534 Offset: 0x1981534 VA: 0x1981534 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x198137C Offset: 0x198137C VA: 0x198137C
	protected void EffectResume() { }

	// RVA: 0x1981558 Offset: 0x1981558 VA: 0x1981558
	protected void OnEndEffect() { }
}

// Namespace: 
public class EffectSoundPlayerComponent : BaseMonoBehaviour // TypeDefIndex: 7709
{
	// Methods

	// RVA: 0x1CC9798 Offset: 0x1CC9798 VA: 0x1CC9798
	public void .ctor() { }

	// RVA: 0x1CC97A0 Offset: 0x1CC97A0 VA: 0x1CC97A0
	protected void PlaySe(string name) { }

	// RVA: 0x1CC991C Offset: 0x1CC991C VA: 0x1CC991C
	protected void PlaySeContinue(string name) { }

	// RVA: 0x1CC9A98 Offset: 0x1CC9A98 VA: 0x1CC9A98
	protected void PlayBgm(string bgmId) { }

	// RVA: 0x1CC9BC4 Offset: 0x1CC9BC4 VA: 0x1CC9BC4
	protected void StopBgm() { }

	// RVA: 0x1CC9C24 Offset: 0x1CC9C24 VA: 0x1CC9C24
	protected void PauseBgm() { }

	// RVA: 0x1CC9C88 Offset: 0x1CC9C88 VA: 0x1CC9C88
	protected void ResumeBgm() { }

	// RVA: 0x1CC9CEC Offset: 0x1CC9CEC VA: 0x1CC9CEC
	protected void ChangeVolumeBgm(string name) { }
}

// Namespace: 
public class EffectSubComponent : BaseMonoBehaviour // TypeDefIndex: 7710
{
	// Methods

	// RVA: 0x1CC9F2C Offset: 0x1CC9F2C VA: 0x1CC9F2C
	public void .ctor() { }

	// RVA: 0x1CC9F34 Offset: 0x1CC9F34 VA: 0x1CC9F34 Slot: 4
	public virtual void RecvParam(object param) { }
}

// Namespace: 
public class FlashEffectComponent : ProgramEffectComponent // TypeDefIndex: 7711
{
	// Fields
	[SerializeField] // RVA: 0xCC2914 Offset: 0xCC2914 VA: 0xCC2914
	protected Color flashColor; // 0x1B0
	[SerializeField] // RVA: 0xCC2924 Offset: 0xCC2924 VA: 0xCC2924
	protected string wipeName; // 0x1C0
	[SerializeField] // RVA: 0xCC2934 Offset: 0xCC2934 VA: 0xCC2934
	protected ExUIMeshRenderer backFlashMesh; // 0x1C8
	protected bool isWaitEndEffect; // 0x1D0
	protected AssetData wipeData; // 0x1D8
	protected float addVolume; // 0x1E0

	// Methods

	// RVA: 0x1902F10 Offset: 0x1902F10 VA: 0x1902F10
	public void .ctor() { }

	// RVA: 0x1902F80 Offset: 0x1902F80 VA: 0x1902F80 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1902FF4 Offset: 0x1902FF4 VA: 0x1902FF4 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1903040 Offset: 0x1903040 VA: 0x1903040
	public void FlashStart() { }

	// RVA: 0x19031D4 Offset: 0x19031D4 VA: 0x19031D4
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x19034FC Offset: 0x19034FC VA: 0x19034FC Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1903418 Offset: 0x1903418 VA: 0x1903418
	protected void EffectResume() { }

	// RVA: 0x1903520 Offset: 0x1903520 VA: 0x1903520
	protected void OnEndEffect() { }

	// RVA: 0x19035A4 Offset: 0x19035A4 VA: 0x19035A4
	protected void OnDestroy() { }

	// RVA: 0x1903670 Offset: 0x1903670 VA: 0x1903670 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public interface IEffectMesh // TypeDefIndex: 7712
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void SetTargetId(int targetId);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Execute();
}

// Namespace: 
public class LapTimeEffectSubComponent : EffectSubComponent // TypeDefIndex: 7713
{
	// Fields
	[SerializeField] // RVA: 0xCC2944 Offset: 0xCC2944 VA: 0xCC2944
	protected UILabel label; // 0x18

	// Methods

	// RVA: 0x1728BD4 Offset: 0x1728BD4 VA: 0x1728BD4
	public void .ctor() { }

	// RVA: 0x1728BDC Offset: 0x1728BDC VA: 0x1728BDC Slot: 4
	public override void RecvParam(object param) { }
}

// Namespace: 
public class ObjectSwitchEffectSubComponent : EffectSubComponent // TypeDefIndex: 7714
{
	// Fields
	[SerializeField] // RVA: 0xCC2954 Offset: 0xCC2954 VA: 0xCC2954
	protected int parameterIndex; // 0x18
	[SerializeField] // RVA: 0xCC2964 Offset: 0xCC2964 VA: 0xCC2964
	protected GameObject[] switchObjectList; // 0x20

