	private UILabel selectSkillDetail; // 0x40
	[SerializeField] // RVA: 0xC563C4 Offset: 0xC563C4 VA: 0xC563C4
	private UIInput skillLvInput; // 0x48
	[SerializeField] // RVA: 0xC563D4 Offset: 0xC563D4 VA: 0xC563D4
	private UILabel targetServantTitle; // 0x50
	private BattleLogic battleLogic; // 0x58
	private BattleData battleData; // 0x60
	private GameObject debugMenu; // 0x68
	private bool isFirstOpen; // 0x70
	private bool isPlayerChange; // 0x71

	// Methods

	// RVA: 0x11F420C Offset: 0x11F420C VA: 0x11F420C
	public void .ctor() { }

	// RVA: 0x11F421C Offset: 0x11F421C VA: 0x11F421C
	public void Open(BattleLogic logic, BattleData data, GameObject menu, bool isPlayerChange) { }

	// RVA: 0x11F44F0 Offset: 0x11F44F0 VA: 0x11F44F0
	public void Close() { }

	// RVA: 0x11F43A0 Offset: 0x11F43A0 VA: 0x11F43A0
	public void DecideSkillIdInput(string value) { }

	// RVA: 0x11F454C Offset: 0x11F454C VA: 0x11F454C
	private void SelectSkill(int skillId, string skillName, string skillDetail) { }

	// RVA: 0x11F4634 Offset: 0x11F4634 VA: 0x11F4634
	private BattleServantData[] getTargetServantDataArray() { }

	// RVA: 0x11F47E8 Offset: 0x11F47E8 VA: 0x11F47E8
	private BattleSkillInfoData[] getTargetSkillInfoDataArray(BattleServantData[] targetServantDataArray) { }

	// RVA: 0x11F49B0 Offset: 0x11F49B0 VA: 0x11F49B0
	public void DecideSkillChange() { }
}

// Namespace: 
public class DebugMenuComponent : MonoBehaviour // TypeDefIndex: 7686
{
	// Fields
	public UILabel titlelabel; // 0x18
	private DebugMenuComponent.TYPE type; // 0x20
	private string title; // 0x28
	private string originalTitle; // 0x30
	private int param; // 0x38
	private string strParam; // 0x40
	private bool flg; // 0x48
	private int min; // 0x4C
	private int max; // 0x50
	private DebugPanelRootComponent.menuDelegate menudel; // 0x58
	private DebugPanelRootComponent.tgrDelegate tgrdel; // 0x60
	private DebugPanelRootComponent.paramDelegate paramdel; // 0x68
	private DebugPanelRootComponent.paramtgrDelegate paramtgrdel; // 0x70
	private DebugPanelRootComponent.paramStrDelegate paramStrdel; // 0x78
	[SerializeField] // RVA: 0xC563E4 Offset: 0xC563E4 VA: 0xC563E4
	private GameObject checkMark; // 0x80

	// Properties
	public bool isFavorite { get; }

	// Methods

	// RVA: 0x11F69C8 Offset: 0x11F69C8 VA: 0x11F69C8
	public void .ctor() { }

	// RVA: 0x11F69D0 Offset: 0x11F69D0 VA: 0x11F69D0
	public bool get_isFavorite() { }

	// RVA: 0x11F6A00 Offset: 0x11F6A00 VA: 0x11F6A00
	public void setTitle(string txt) { }

	// RVA: 0x11F6A10 Offset: 0x11F6A10 VA: 0x11F6A10
	public void setParam(int param) { }

	// RVA: 0x11F6A18 Offset: 0x11F6A18 VA: 0x11F6A18
	public void setStringParam(string param) { }

	// RVA: 0x11F6A20 Offset: 0x11F6A20 VA: 0x11F6A20
	public void setTgr(bool initFlg) { }

	// RVA: 0x11F6A2C Offset: 0x11F6A2C VA: 0x11F6A2C
	public void updateTitleLabel() { }

	// RVA: 0x11F6CD0 Offset: 0x11F6CD0 VA: 0x11F6CD0
	public void setInitDlg(string txt, DebugPanelRootComponent.menuDelegate del) { }

	// RVA: 0x11F6CE0 Offset: 0x11F6CE0 VA: 0x11F6CE0
	public void setInitDlg(string txt, DebugPanelRootComponent.tgrDelegate del, bool flg) { }

	// RVA: 0x11F6CFC Offset: 0x11F6CFC VA: 0x11F6CFC
	public void setInitDlg(string txt, DebugPanelRootComponent.paramDelegate del, int param) { }

	// RVA: 0x11F6D14 Offset: 0x11F6D14 VA: 0x11F6D14
	public void setInitDlg(string txt, DebugPanelRootComponent.paramtgrDelegate del, int param, bool flg) { }

	// RVA: 0x11F6D34 Offset: 0x11F6D34 VA: 0x11F6D34
	public void setInitDlg(string txt, DebugPanelRootComponent.paramStrDelegate del, string param) { }

	// RVA: 0x11F6D4C Offset: 0x11F6D4C VA: 0x11F6D4C
	public void setInitDlg(string txt, DebugPanelRootComponent.paramDelegate del, int param, int min, int max) { }

	// RVA: 0x11F6D68 Offset: 0x11F6D68 VA: 0x11F6D68
	public string getTitle() { }

	// RVA: 0x11F6D70 Offset: 0x11F6D70 VA: 0x11F6D70
	public void OnClickMenu() { }

	// RVA: 0x11F6A08 Offset: 0x11F6A08 VA: 0x11F6A08
	private string SetSelectMenuColor(string title) { }

	// RVA: 0x11F6EF4 Offset: 0x11F6EF4 VA: 0x11F6EF4
	public void SetFavorite(bool favorite) { }

	// RVA: 0x11F6F2C Offset: 0x11F6F2C VA: 0x11F6F2C
	public void OnClickCheckBox() { }
}

// Namespace: 
public enum DebugMenuComponent.TYPE // TypeDefIndex: 7687
{
	// Fields
	public int value__; // 0x0
	public const DebugMenuComponent.TYPE SELECT = 0;
	public const DebugMenuComponent.TYPE TGR = 1;
	public const DebugMenuComponent.TYPE PARAM = 2;
	public const DebugMenuComponent.TYPE PARAM_TGR = 3;
	public const DebugMenuComponent.TYPE PARAM_STR = 4;
	public const DebugMenuComponent.TYPE PARAM_CHANGE = 5;
}

// Namespace: 
public class DebugOutputLabelLog : MonoBehaviour // TypeDefIndex: 7688
{
	// Methods

	// RVA: 0x10B9870 Offset: 0x10B9870 VA: 0x10B9870
	public void .ctor() { }
}

// Namespace: 
public class DebugPanelRootComponent : MonoBehaviour // TypeDefIndex: 7689
{
	// Fields
	public Transform menuRoot; // 0x18
	public UILabel debugStr; // 0x20
	public GameObject debugOutputLabel; // 0x28
	public GameObject mst_selectmenu; // 0x30
	public List<GameObject> list; // 0x38
	public DebugInputComponent debuginput; // 0x40
	protected DebugInputComponent.EndInputCallBack debugInputCallBackFunc; // 0x48
	public DebugInputBuffComponent debugBuffinput; // 0x50
	public DebugInputSkillChangeComponent debugInputSkillChange; // 0x58
	[SerializeField] // RVA: 0xC563F4 Offset: 0xC563F4 VA: 0xC563F4
	private GameObject checkMark; // 0x60
	private const int MenuDifference = -70;
	private const string DebugMenuSaveKey = "BattleDebugMenuFavorite";
	private const string FavoriteSaveKey = "BattleKeepFavorite";
	public List<string> strlist; // 0x68

	// Methods

	// RVA: 0x10B9878 Offset: 0x10B9878 VA: 0x10B9878
	public void .ctor() { }

	// RVA: 0x10B9910 Offset: 0x10B9910 VA: 0x10B9910
	public void OpenWindow() { }

	// RVA: 0x10B9914 Offset: 0x10B9914 VA: 0x10B9914
	public void CloseWindow() { }

	// RVA: 0x10B9CAC Offset: 0x10B9CAC VA: 0x10B9CAC
	public void ClearMenu() { }

	// RVA: 0x10B9E14 Offset: 0x10B9E14 VA: 0x10B9E14
	private DebugMenuComponent createMenu() { }

	// RVA: 0x10BA050 Offset: 0x10BA050 VA: 0x10BA050
	public void setMenu(string title, DebugPanelRootComponent.menuDelegate dg) { }

	// RVA: 0x10BA098 Offset: 0x10BA098 VA: 0x10BA098
	public void setMenu(string title, DebugPanelRootComponent.tgrDelegate dg, bool init) { }

	// RVA: 0x10BA0E8 Offset: 0x10BA0E8 VA: 0x10BA0E8
	public void setMenu(string title, DebugPanelRootComponent.paramDelegate dg, int param) { }

	// RVA: 0x10BA138 Offset: 0x10BA138 VA: 0x10BA138
	public void setMenu(string title, DebugPanelRootComponent.paramtgrDelegate dg, int param, bool init) { }

	// RVA: 0x10BA198 Offset: 0x10BA198 VA: 0x10BA198
	public void setMenu(string title, DebugPanelRootComponent.paramStrDelegate dg, string param) { }

	// RVA: 0x10BA1E8 Offset: 0x10BA1E8 VA: 0x10BA1E8
	public void setMenu(string title, DebugPanelRootComponent.paramDelegate dg, int param, int min, int max) { }

	// RVA: 0x10BA250 Offset: 0x10BA250 VA: 0x10BA250
	public void setLog(string str) { }

	// RVA: 0x10BA288 Offset: 0x10BA288 VA: 0x10BA288
	public void setLog(string[] strlist) { }

	// RVA: 0x10BA3AC Offset: 0x10BA3AC VA: 0x10BA3AC
	public void openInputWindow(DebugInputComponent.EndInputCallBack cb) { }

	// RVA: 0x10BA4FC Offset: 0x10BA4FC VA: 0x10BA4FC
	public void debugInputCallBack(string input, bool submit) { }

	// RVA: 0x10BA5B8 Offset: 0x10BA5B8 VA: 0x10BA5B8
	public void openInputBuffWindow(BattleLogic logic, BattleData data) { }

	// RVA: 0x10BA670 Offset: 0x10BA670 VA: 0x10BA670
	public void openInputSkillChangeWindow(BattleLogic logic, BattleData data, bool isPlayerChange) { }

	// RVA: 0x10BA760 Offset: 0x10BA760 VA: 0x10BA760
	public void OnClickFavoriteOnly() { }

	// RVA: 0x10B9AC8 Offset: 0x10B9AC8 VA: 0x10B9AC8
	private void SaveDebugMenuFavorite() { }

	// RVA: 0x10BAB44 Offset: 0x10BAB44 VA: 0x10BAB44
	public void LoadDebugMenuFavorite() { }
}

// Namespace: 
public sealed class DebugPanelRootComponent.menuDelegate : MulticastDelegate // TypeDefIndex: 7690
{
	// Methods

	// RVA: 0x10BAEAC Offset: 0x10BAEAC VA: 0x10BAEAC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10BAEBC Offset: 0x10BAEBC VA: 0x10BAEBC Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x10BB0BC Offset: 0x10BB0BC VA: 0x10BB0BC Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x10BB0F0 Offset: 0x10BB0F0 VA: 0x10BB0F0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DebugPanelRootComponent.tgrDelegate : MulticastDelegate // TypeDefIndex: 7691
{
	// Methods

	// RVA: 0x10BBAC0 Offset: 0x10BBAC0 VA: 0x10BBAC0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10BBAD0 Offset: 0x10BBAD0 VA: 0x10BBAD0 Slot: 11
	public virtual void Invoke(bool flg) { }

	// RVA: 0x10BBCFC Offset: 0x10BBCFC VA: 0x10BBCFC Slot: 12
	public virtual IAsyncResult BeginInvoke(bool flg, AsyncCallback callback, object object) { }

	// RVA: 0x10BBD8C Offset: 0x10BBD8C VA: 0x10BBD8C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DebugPanelRootComponent.paramDelegate : MulticastDelegate // TypeDefIndex: 7692
{
	// Methods

	// RVA: 0x10BB0FC Offset: 0x10BB0FC VA: 0x10BB0FC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10BB10C Offset: 0x10BB10C VA: 0x10BB10C Slot: 11
	public virtual void Invoke(int param) { }

	// RVA: 0x10BB338 Offset: 0x10BB338 VA: 0x10BB338 Slot: 12
	public virtual IAsyncResult BeginInvoke(int param, AsyncCallback callback, object object) { }

	// RVA: 0x10BB3C4 Offset: 0x10BB3C4 VA: 0x10BB3C4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DebugPanelRootComponent.paramStrDelegate : MulticastDelegate // TypeDefIndex: 7693
{
	// Methods

	// RVA: 0x10BB3D0 Offset: 0x10BB3D0 VA: 0x10BB3D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10BB3E0 Offset: 0x10BB3E0 VA: 0x10BB3E0 Slot: 11
	public virtual void Invoke(string param) { }

	// RVA: 0x10BB780 Offset: 0x10BB780 VA: 0x10BB780 Slot: 12
	public virtual IAsyncResult BeginInvoke(string param, AsyncCallback callback, object object) { }

	// RVA: 0x10BB7A4 Offset: 0x10BB7A4 VA: 0x10BB7A4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DebugPanelRootComponent.paramtgrDelegate : MulticastDelegate // TypeDefIndex: 7694
{
	// Methods

	// RVA: 0x10BB7B0 Offset: 0x10BB7B0 VA: 0x10BB7B0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10BB7C0 Offset: 0x10BB7C0 VA: 0x10BB7C0 Slot: 11
	public virtual void Invoke(int param, bool flg) { }

	// RVA: 0x10BBA04 Offset: 0x10BBA04 VA: 0x10BBA04 Slot: 12
	public virtual IAsyncResult BeginInvoke(int param, bool flg, AsyncCallback callback, object object) { }

	// RVA: 0x10BBAB4 Offset: 0x10BBAB4 VA: 0x10BBAB4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum DebugPanelRootComponent.TAG // TypeDefIndex: 7695
{
	// Fields
	public int value__; // 0x0
	public const DebugPanelRootComponent.TAG SVT = 0;
	public const DebugPanelRootComponent.TAG AI = 1;
}

// Namespace: 
public class DebugPanelRootShortCutComponent : MonoBehaviour // TypeDefIndex: 7696
{
	// Methods

	// RVA: 0x10BBD98 Offset: 0x10BBD98 VA: 0x10BBD98
	public void .ctor() { }
}

// Namespace: 
public class DebugSkillSelectCellComponent : MonoBehaviour // TypeDefIndex: 7697
{
	// Fields
	[SerializeField] // RVA: 0xC56404 Offset: 0xC56404 VA: 0xC56404
	private UILabel ShowLabel; // 0x18
	private int id; // 0x20
	private string name; // 0x28
	private string detail; // 0x30
	private Action<int, string, string> callback; // 0x38

	// Methods

	// RVA: 0x10BD4D8 Offset: 0x10BD4D8 VA: 0x10BD4D8
	public void .ctor() { }

	// RVA: 0x10BD4E0 Offset: 0x10BD4E0 VA: 0x10BD4E0
	public void Set(int _id, string _name, string _detail, Action<int, string, string> _callback) { }

	// RVA: 0x10BD5D8 Offset: 0x10BD5D8 VA: 0x10BD5D8
	public void Tap() { }
}

// Namespace: 
public class DebugSkillSelectComponent : MonoBehaviour // TypeDefIndex: 7698
{
	// Fields
	[SerializeField] // RVA: 0xC56414 Offset: 0xC56414 VA: 0xC56414
	private GameObject BaseCell; // 0x18
	[SerializeField] // RVA: 0xC56424 Offset: 0xC56424 VA: 0xC56424
	private UIGrid grid; // 0x20
	private Action<int, string, string> callback; // 0x28
	private bool isListCreate; // 0x30

	// Methods

	// RVA: 0x10BD640 Offset: 0x10BD640 VA: 0x10BD640
	public void .ctor() { }

	// RVA: 0x10BD648 Offset: 0x10BD648 VA: 0x10BD648
	public void Open(Action<int, string, string> _callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCAB78 Offset: 0xCCAB78 VA: 0xCCAB78
	// RVA: 0x10BD6EC Offset: 0x10BD6EC VA: 0x10BD6EC
	private IEnumerator CreateListCoroutine() { }

	// RVA: 0x10BD764 Offset: 0x10BD764 VA: 0x10BD764
	public void Close() { }

	// RVA: 0x10BD79C Offset: 0x10BD79C VA: 0x10BD79C
	public void TapSkillSelectCallback(int id, string name, string detail) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43014 Offset: 0xC43014 VA: 0xC43014
private sealed class DebugSkillSelectComponent.<CreateListCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 7699
{
	// Fields
	internal SkillMaster <skillMst>__0; // 0x10
	internal SkillEntity[] <skillEntList>__0; // 0x18
	internal SkillDetailMaster <detailMst>__0; // 0x20
	internal int <interval>__0; // 0x28
	internal int <cnt>__0; // 0x2C
	internal int <i>__1; // 0x30
	internal GameObject <cell>__2; // 0x38
	internal string <skillDetail>__2; // 0x40
	internal SkillDetailEntity <skillDetailEnt>__2; // 0x48
	internal DebugSkillSelectComponent $this; // 0x50
	internal object $current; // 0x58
	internal bool $disposing; // 0x60
	internal int $PC; // 0x64

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD9430 Offset: 0xCD9430 VA: 0xCD9430
	// RVA: 0x10BD75C Offset: 0x10BD75C VA: 0x10BD75C
	public void .ctor() { }

	// RVA: 0x10BD840 Offset: 0x10BD840 VA: 0x10BD840 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9440 Offset: 0xCD9440 VA: 0xCD9440
	// RVA: 0x10BDE28 Offset: 0x10BDE28 VA: 0x10BDE28 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9450 Offset: 0xCD9450 VA: 0xCD9450
	// RVA: 0x10BDE30 Offset: 0x10BDE30 VA: 0x10BDE30 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9460 Offset: 0xCD9460 VA: 0xCD9460
	// RVA: 0x10BDE38 Offset: 0x10BDE38 VA: 0x10BDE38 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD9470 Offset: 0xCD9470 VA: 0xCD9470
	// RVA: 0x10BDE4C Offset: 0x10BDE4C VA: 0x10BDE4C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class DisplayPrint : SingletonMonoBehaviour<DisplayPrint> // TypeDefIndex: 7700
{
	// Methods

	// RVA: 0x10D1140 Offset: 0x10D1140 VA: 0x10D1140
	public void .ctor() { }

	[ConditionalAttribute] // RVA: 0xCCAB88 Offset: 0xCCAB88 VA: 0xCCAB88
	// RVA: 0x10D1190 Offset: 0x10D1190 VA: 0x10D1190
	public static void CreateDisplayPrintPanel() { }

	[ConditionalAttribute] // RVA: 0xCCABC0 Offset: 0xCCABC0 VA: 0xCCABC0
	// RVA: 0x10D1194 Offset: 0x10D1194 VA: 0x10D1194
	public void DrawString(string key, float posX, float posY, string text) { }

	[ConditionalAttribute] // RVA: 0xCCABF8 Offset: 0xCCABF8 VA: 0xCCABF8
	// RVA: 0x10D1198 Offset: 0x10D1198 VA: 0x10D1198
	public void DrawString(string key, float posX, float posY, UIWidget.Pivot pivot, string text, Color color, Vector2 widgetSize) { }

	[ConditionalAttribute] // RVA: 0xCCAC30 Offset: 0xCCAC30 VA: 0xCCAC30
	// RVA: 0x10D119C Offset: 0x10D119C VA: 0x10D119C
	public void Remove(string key) { }

	[ConditionalAttribute] // RVA: 0xCCAC68 Offset: 0xCCAC68 VA: 0xCCAC68
	// RVA: 0x10D11A0 Offset: 0x10D11A0 VA: 0x10D11A0
	public void Clear() { }
}

// Namespace: 
public class MultiLapStopWatch // TypeDefIndex: 7701
{
	// Fields
	private static readonly string DEFAULT_KEY; // 0x0
	private Stopwatch sw; // 0x10
	private Dictionary<string, MultiLapStopWatch.LapDetail> laps; // 0x18
	private string currentLapKey; // 0x20
	private long currentLapStartMilliSeconds; // 0x28

	// Methods

	// RVA: 0x11A3364 Offset: 0x11A3364 VA: 0x11A3364
	public void .ctor() { }

	// RVA: 0x11A343C Offset: 0x11A343C VA: 0x11A343C
	public void Start() { }

	// RVA: 0x11A3674 Offset: 0x11A3674 VA: 0x11A3674
	public void Stop() { }

	// RVA: 0x11A34F0 Offset: 0x11A34F0 VA: 0x11A34F0
	public void LapResume(string key) { }

	// RVA: 0x11A36AC Offset: 0x11A36AC VA: 0x11A36AC
	public void LapPause() { }

	// RVA: 0x11A376C Offset: 0x11A376C VA: 0x11A376C
	public void ShowLap() { }

	// RVA: 0x11A3724 Offset: 0x11A3724 VA: 0x11A3724
	private long GetElapsedMilliSeconds() { }

	// RVA: 0x11A39E0 Offset: 0x11A39E0 VA: 0x11A39E0
	private static void .cctor() { }
}

// Namespace: 
private class MultiLapStopWatch.LapDetail // TypeDefIndex: 7702
{
	// Fields
	public long milliSec; // 0x10
	public long lapCount; // 0x18

	// Methods

	// RVA: 0x11A371C Offset: 0x11A371C VA: 0x11A371C
	public void .ctor() { }
}

// Namespace: 
public class BattleChangeSpecialShader : MonoBehaviour, IEffectMesh // TypeDefIndex: 7703
{
	// Fields
	[SerializeField] // RVA: 0xC56434 Offset: 0xC56434 VA: 0xC56434
	private int sourceServantId; // 0x18
	[SerializeField] // RVA: 0xC56444 Offset: 0xC56444 VA: 0xC56444
	private bool isCheckUniqueId; // 0x1C
	[SerializeField] // RVA: 0xC56454 Offset: 0xC56454 VA: 0xC56454
	[TooltipAttribute] // RVA: 0xC56454 Offset: 0xC56454 VA: 0xC56454
	private List<Renderer> targetRendererList; // 0x20
	[SerializeField] // RVA: 0xC564A0 Offset: 0xC564A0 VA: 0xC564A0
	[TooltipAttribute] // RVA: 0xC564A0 Offset: 0xC564A0 VA: 0xC564A0
	private bool isNPEffect; // 0x28
	[SerializeField] // RVA: 0xC564EC Offset: 0xC564EC VA: 0xC564EC
	[TooltipAttribute] // RVA: 0xC564EC Offset: 0xC564EC VA: 0xC564EC
	private bool isCreateShadowAura; // 0x29
	[SerializeField] // RVA: 0xC56538 Offset: 0xC56538 VA: 0xC56538
	[TooltipAttribute] // RVA: 0xC56538 Offset: 0xC56538 VA: 0xC56538
	private string shadowAuraNodeName; // 0x30
	private int targetId; // 0x38

	// Methods

	// RVA: 0x179838C Offset: 0x179838C VA: 0x179838C
	public void .ctor() { }

	// RVA: 0x1798404 Offset: 0x1798404 VA: 0x1798404
	private void Start() { }

	// RVA: 0x1798418 Offset: 0x1798418 VA: 0x1798418 Slot: 4
	public void SetTargetId(int uniqueId) { }

	// RVA: 0x1798414 Offset: 0x1798414 VA: 0x1798414 Slot: 5
	public void Execute() { }

	// RVA: 0x1798420 Offset: 0x1798420 VA: 0x1798420
	private void ChangeShader() { }

	// RVA: 0x1798A48 Offset: 0x1798A48 VA: 0x1798A48
	private BattleActorControl GetModelBattleActor() { }
}

// Namespace: 
public class BattleEffectChangeTexture : MonoBehaviour, IEffectMesh // TypeDefIndex: 7704
{
	// Fields
	[SerializeField] // RVA: 0xC56584 Offset: 0xC56584 VA: 0xC56584
	private int sourceServantId; // 0x18
	[SerializeField] // RVA: 0xC56594 Offset: 0xC56594 VA: 0xC56594
	private int[] sourceServantIds; // 0x20
	[SerializeField] // RVA: 0xC565A4 Offset: 0xC565A4 VA: 0xC565A4
	private bool isCheckUniqueId; // 0x28
	[SerializeField] // RVA: 0xC565B4 Offset: 0xC565B4 VA: 0xC565B4
	[TooltipAttribute] // RVA: 0xC565B4 Offset: 0xC565B4 VA: 0xC565B4
	private bool isNPEffect; // 0x29
	[SerializeField] // RVA: 0xC56600 Offset: 0xC56600 VA: 0xC56600
	[TooltipAttribute] // RVA: 0xC56600 Offset: 0xC56600 VA: 0xC56600
	private string searchMeshWord; // 0x30
	[SerializeField] // RVA: 0xC5664C Offset: 0xC5664C VA: 0xC5664C
	[TooltipAttribute] // RVA: 0xC5664C Offset: 0xC5664C VA: 0xC5664C
	private List<Renderer> targetRendererList; // 0x38
	[SpaceAttribute] // RVA: 0xC56698 Offset: 0xC56698 VA: 0xC56698
	[SerializeField] // RVA: 0xC56698 Offset: 0xC56698 VA: 0xC56698
	[TooltipAttribute] // RVA: 0xC56698 Offset: 0xC56698 VA: 0xC56698
	private bool isCreateShadowAura; // 0x40
	[SerializeField] // RVA: 0xC566F8 Offset: 0xC566F8 VA: 0xC566F8
	[TooltipAttribute] // RVA: 0xC566F8 Offset: 0xC566F8 VA: 0xC566F8
	private string shadowAuraNodeName; // 0x48
	private int targetId; // 0x50

	// Methods

	// RVA: 0x1121224 Offset: 0x1121224 VA: 0x1121224
	public void .ctor() { }

	// RVA: 0x11212B4 Offset: 0x11212B4 VA: 0x11212B4
	private void Start() { }

	// RVA: 0x11212C4 Offset: 0x11212C4 VA: 0x11212C4 Slot: 5
	public void Execute() { }

	// RVA: 0x1121C7C Offset: 0x1121C7C VA: 0x1121C7C Slot: 4
	public void SetTargetId(int uniqueId) { }

	// RVA: 0x1121BCC Offset: 0x1121BCC VA: 0x1121BCC
	private void ChangeTexture(int servantId) { }

	// RVA: 0x1121428 Offset: 0x1121428 VA: 0x1121428
	private void ChangeTexture(BattleActorControl actor) { }

	// RVA: 0x1121C84 Offset: 0x1121C84 VA: 0x1121C84
	private BattleActorControl GetModelBattleActor(int servantId) { }
}

// Namespace: 
public class CharaAppearanceEffectComponent : ProgramEffectComponent // TypeDefIndex: 7705
{
	// Fields
	[SerializeField] // RVA: 0xC56744 Offset: 0xC56744 VA: 0xC56744
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC56754 Offset: 0xC56754 VA: 0xC56754
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC56764 Offset: 0xC56764 VA: 0xC56764
	protected Color erasureColor; // 0x1C0
	protected bool isWaitEndEffect; // 0x1D0
	protected UIStandFigureM figure; // 0x1D8
	protected CommonEffectComponent childEffect; // 0x1E0
	protected float addVolume; // 0x1E8
	protected Vector2 bodySize; // 0x1EC

	// Methods

	// RVA: 0x1A43380 Offset: 0x1A43380 VA: 0x1A43380
	public void .ctor() { }

	// RVA: 0x1A433BC Offset: 0x1A433BC VA: 0x1A433BC Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A43430 Offset: 0x1A43430 VA: 0x1A43430 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A435C4 Offset: 0x1A435C4 VA: 0x1A435C4
	public void AppearanceStart(UIStandFigureM figure) { }

	// RVA: 0x1A439E4 Offset: 0x1A439E4 VA: 0x1A439E4
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1A43AE0 Offset: 0x1A43AE0 VA: 0x1A43AE0 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A43A00 Offset: 0x1A43A00 VA: 0x1A43A00
	protected void EffectResume() { }

	// RVA: 0x1A43B04 Offset: 0x1A43B04 VA: 0x1A43B04
	protected void OnEndEffect() { }

	// RVA: 0x1A43B84 Offset: 0x1A43B84 VA: 0x1A43B84
	protected void OnDestroy() { }

	// RVA: 0x1A43C3C Offset: 0x1A43C3C VA: 0x1A43C3C Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaAppearanceReverseEffectComponent : ProgramEffectComponent // TypeDefIndex: 7706
{
	// Fields
	[SerializeField] // RVA: 0xC56774 Offset: 0xC56774 VA: 0xC56774
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC56784 Offset: 0xC56784 VA: 0xC56784
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC56794 Offset: 0xC56794 VA: 0xC56794
	protected Color erasureColor; // 0x1C0
	protected bool isWaitEndEffect; // 0x1D0
	protected UIStandFigureM figure; // 0x1D8
	protected CommonEffectComponent childEffect; // 0x1E0
	protected float addVolume; // 0x1E8
	protected Vector2 bodySize; // 0x1EC

	// Methods

	// RVA: 0x1A43D10 Offset: 0x1A43D10 VA: 0x1A43D10
	public void .ctor() { }

	// RVA: 0x1A43D4C Offset: 0x1A43D4C VA: 0x1A43D4C Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A43DC0 Offset: 0x1A43DC0 VA: 0x1A43DC0 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A43F54 Offset: 0x1A43F54 VA: 0x1A43F54
	public void AppearanceStart(UIStandFigureM figure) { }

	// RVA: 0x1A44374 Offset: 0x1A44374 VA: 0x1A44374
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1A44470 Offset: 0x1A44470 VA: 0x1A44470 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A44390 Offset: 0x1A44390 VA: 0x1A44390
	protected void EffectResume() { }

	// RVA: 0x1A44494 Offset: 0x1A44494 VA: 0x1A44494
	protected void OnEndEffect() { }

	// RVA: 0x1A44514 Offset: 0x1A44514 VA: 0x1A44514
	protected void OnDestroy() { }

	// RVA: 0x1A445CC Offset: 0x1A445CC VA: 0x1A445CC Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaCutEffectComponent : ProgramEffectComponent // TypeDefIndex: 7707
{
	// Fields
	protected UIImageM image; // 0x1B0
	protected AssetData wipeData; // 0x1B8
	protected float addVolume; // 0x1C0
	protected Vector2 bodySize; // 0x1C4
	protected float mgd; // 0x1CC
	protected bool isCutBusy; // 0x1D0

	// Methods

	// RVA: 0x1A446A0 Offset: 0x1A446A0 VA: 0x1A446A0
	public void .ctor() { }

	// RVA: 0x1A446A8 Offset: 0x1A446A8 VA: 0x1A446A8 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A4471C Offset: 0x1A4471C VA: 0x1A4471C Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A44760 Offset: 0x1A44760 VA: 0x1A44760
	public bool IsBusyCut() { }

	// RVA: 0x1A44768 Offset: 0x1A44768 VA: 0x1A44768
	public void CutinStart(UIImageM image, string wipeName, float mgd) { }

	// RVA: 0x1A44870 Offset: 0x1A44870 VA: 0x1A44870
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1A44BA4 Offset: 0x1A44BA4 VA: 0x1A44BA4 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A44940 Offset: 0x1A44940 VA: 0x1A44940
	protected void CutinResume() { }

	// RVA: 0x1A44BC8 Offset: 0x1A44BC8 VA: 0x1A44BC8
	protected void OnEndCutinEffect() { }

	// RVA: 0x1A44BD0 Offset: 0x1A44BD0 VA: 0x1A44BD0
	public void CutoutStart(float time, bool isSkip) { }

	// RVA: 0x1A44D14 Offset: 0x1A44D14 VA: 0x1A44D14
	protected void OnEndCutoutEffect() { }

	// RVA: 0x1A44D94 Offset: 0x1A44D94 VA: 0x1A44D94
	protected void OnDestroy() { }
}

// Namespace: 
public class CharaErasureEffectComponent : ProgramEffectComponent // TypeDefIndex: 7708
{
	// Fields
	[SerializeField] // RVA: 0xC567A4 Offset: 0xC567A4 VA: 0xC567A4
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC567B4 Offset: 0xC567B4 VA: 0xC567B4
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC567C4 Offset: 0xC567C4 VA: 0xC567C4
	protected Color erasureColor; // 0x1C0
	protected bool isWaitEndEffect; // 0x1D0
	protected UIStandFigureM figure; // 0x1D8
	protected CommonEffectComponent childEffect; // 0x1E0
	protected float addVolume; // 0x1E8
	protected Vector2 bodySize; // 0x1EC

	// Methods

	// RVA: 0x1A44E84 Offset: 0x1A44E84 VA: 0x1A44E84
	public void .ctor() { }

	// RVA: 0x1A44EC0 Offset: 0x1A44EC0 VA: 0x1A44EC0 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A44F34 Offset: 0x1A44F34 VA: 0x1A44F34 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A450C8 Offset: 0x1A450C8 VA: 0x1A450C8
	public void ErasureStart(UIStandFigureM figure) { }

	// RVA: 0x1A45498 Offset: 0x1A45498 VA: 0x1A45498
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1A45594 Offset: 0x1A45594 VA: 0x1A45594 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A454B4 Offset: 0x1A454B4 VA: 0x1A454B4
	protected void EffectResume() { }

	// RVA: 0x1A455B8 Offset: 0x1A455B8 VA: 0x1A455B8
	protected void OnEndEffect() { }

	// RVA: 0x1A45638 Offset: 0x1A45638 VA: 0x1A45638
	protected void OnDestroy() { }

	// RVA: 0x1A456F0 Offset: 0x1A456F0 VA: 0x1A456F0 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaErasureReverseEffectComponent : ProgramEffectComponent // TypeDefIndex: 7709
{
	// Fields
	[SerializeField] // RVA: 0xC567D4 Offset: 0xC567D4 VA: 0xC567D4
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC567E4 Offset: 0xC567E4 VA: 0xC567E4
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC567F4 Offset: 0xC567F4 VA: 0xC567F4
	protected Color erasureColor; // 0x1C0
	protected bool isWaitEndEffect; // 0x1D0
	protected UIStandFigureM figure; // 0x1D8
	protected CommonEffectComponent childEffect; // 0x1E0
	protected float addVolume; // 0x1E8
	protected Vector2 bodySize; // 0x1EC

	// Methods

	// RVA: 0x1A457C4 Offset: 0x1A457C4 VA: 0x1A457C4
	public void .ctor() { }

	// RVA: 0x1A45800 Offset: 0x1A45800 VA: 0x1A45800 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A45874 Offset: 0x1A45874 VA: 0x1A45874 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A45A00 Offset: 0x1A45A00 VA: 0x1A45A00
	public void ErasureStart(UIStandFigureM figure) { }

	// RVA: 0x1A45DD0 Offset: 0x1A45DD0 VA: 0x1A45DD0
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1A45ECC Offset: 0x1A45ECC VA: 0x1A45ECC Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A45DEC Offset: 0x1A45DEC VA: 0x1A45DEC
	protected void EffectResume() { }

	// RVA: 0x1A45EF0 Offset: 0x1A45EF0 VA: 0x1A45EF0
	protected void OnEndEffect() { }

	// RVA: 0x1A45F70 Offset: 0x1A45F70 VA: 0x1A45F70
	protected void OnDestroy() { }

	// RVA: 0x1A46028 Offset: 0x1A46028 VA: 0x1A46028 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaFlashEffectComponent : ProgramEffectComponent // TypeDefIndex: 7710
{
	// Fields
	[SerializeField] // RVA: 0xC56804 Offset: 0xC56804 VA: 0xC56804
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC56814 Offset: 0xC56814 VA: 0xC56814
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC56824 Offset: 0xC56824 VA: 0xC56824
	protected Color flashColor; // 0x1C0
	[SerializeField] // RVA: 0xC56834 Offset: 0xC56834 VA: 0xC56834
	protected string wipeName; // 0x1D0
	[SerializeField] // RVA: 0xC56844 Offset: 0xC56844 VA: 0xC56844
	protected ExUIMeshRenderer backFlashMesh; // 0x1D8
	protected bool isWaitEndEffect; // 0x1E0
	protected UIStandFigureM figure; // 0x1E8
	protected AssetData wipeData; // 0x1F0
	protected CommonEffectComponent childEffect; // 0x1F8
	protected float addVolume; // 0x200
	protected Vector2 bodySize; // 0x204

	// Methods

	// RVA: 0x1A460FC Offset: 0x1A460FC VA: 0x1A460FC
	public void .ctor() { }

	// RVA: 0x1A4616C Offset: 0x1A4616C VA: 0x1A4616C Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A46214 Offset: 0x1A46214 VA: 0x1A46214 Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A46284 Offset: 0x1A46284 VA: 0x1A46284
	public void FlashStart(UIStandFigureM figure) { }

	// RVA: 0x1A46444 Offset: 0x1A46444 VA: 0x1A46444
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1A468A0 Offset: 0x1A468A0 VA: 0x1A468A0
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1A4699C Offset: 0x1A4699C VA: 0x1A4699C Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A468BC Offset: 0x1A468BC VA: 0x1A468BC
	protected void EffectResume() { }

	// RVA: 0x1A469C0 Offset: 0x1A469C0 VA: 0x1A469C0
	protected void OnEndEffect() { }

	// RVA: 0x1A46A7C Offset: 0x1A46A7C VA: 0x1A46A7C
	protected void OnDestroy() { }

	// RVA: 0x1A46BC0 Offset: 0x1A46BC0 VA: 0x1A46BC0 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaWipeEffectComponent : ProgramEffectComponent // TypeDefIndex: 7711
{
	// Fields
	[SerializeField] // RVA: 0xC56854 Offset: 0xC56854 VA: 0xC56854
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC56864 Offset: 0xC56864 VA: 0xC56864
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC56874 Offset: 0xC56874 VA: 0xC56874
	protected Color wipeColor; // 0x1C0
	[SerializeField] // RVA: 0xC56884 Offset: 0xC56884 VA: 0xC56884
	protected string wipeName; // 0x1D0
	protected bool isWaitEndEffect; // 0x1D8
	protected UIStandFigureM figure; // 0x1E0
	protected AssetData wipeData; // 0x1E8
	protected CommonEffectComponent childEffect; // 0x1F0
	protected float addVolume; // 0x1F8
	protected Vector2 bodySize; // 0x1FC

	// Methods

	// RVA: 0x1A4DCE8 Offset: 0x1A4DCE8 VA: 0x1A4DCE8
	public void .ctor() { }

	// RVA: 0x1A4DD58 Offset: 0x1A4DD58 VA: 0x1A4DD58 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A4DDCC Offset: 0x1A4DDCC VA: 0x1A4DDCC Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A4DE10 Offset: 0x1A4DE10 VA: 0x1A4DE10
	public void WipeStart(UIStandFigureM figure) { }

	// RVA: 0x1A4DF90 Offset: 0x1A4DF90 VA: 0x1A4DF90
	protected void EndLoadWipe(AssetData data) { }

	// RVA: 0x1A4E294 Offset: 0x1A4E294 VA: 0x1A4E294
	protected void EndCreateEffect(CommonEffectComponent effect) { }

	// RVA: 0x1A4E390 Offset: 0x1A4E390 VA: 0x1A4E390 Slot: 43
	public override void Resume(bool isSkip) { }

	// RVA: 0x1A4E2B0 Offset: 0x1A4E2B0 VA: 0x1A4E2B0
	protected void EffectResume() { }

	// RVA: 0x1A4E3B4 Offset: 0x1A4E3B4 VA: 0x1A4E3B4
	protected void OnEndEffect() { }

	// RVA: 0x1A4E434 Offset: 0x1A4E434 VA: 0x1A4E434
	protected void OnDestroy() { }

	// RVA: 0x1A4E524 Offset: 0x1A4E524 VA: 0x1A4E524 Slot: 21
	protected override void OnUpdate() { }
}

// Namespace: 
public class CharaWipeTimeEffectComponent : ProgramEffectComponent // TypeDefIndex: 7712
{
	// Fields
	[SerializeField] // RVA: 0xC56894 Offset: 0xC56894 VA: 0xC56894
	protected GameObject subEffectBase; // 0x1B0
	[SerializeField] // RVA: 0xC568A4 Offset: 0xC568A4 VA: 0xC568A4
	protected string subEffectName; // 0x1B8
	[SerializeField] // RVA: 0xC568B4 Offset: 0xC568B4 VA: 0xC568B4
	protected Color wipeColor; // 0x1C0
	[SerializeField] // RVA: 0xC568C4 Offset: 0xC568C4 VA: 0xC568C4
	protected string wipeName; // 0x1D0
	protected bool isWaitEndEffect; // 0x1D8
	protected UIStandFigureM figure; // 0x1E0
	protected AssetData wipeData; // 0x1E8
	protected CommonEffectComponent childEffect; // 0x1F0
	protected float addVolume; // 0x1F8
	protected Vector2 bodySize; // 0x1FC

	// Methods

	// RVA: 0x1A4E5F8 Offset: 0x1A4E5F8 VA: 0x1A4E5F8
	public void .ctor() { }

	// RVA: 0x1A4E668 Offset: 0x1A4E668 VA: 0x1A4E668 Slot: 39
	public override void SetTweenColor(Color c) { }

	// RVA: 0x1A4E6DC Offset: 0x1A4E6DC VA: 0x1A4E6DC Slot: 41
	public override void SetTweenVolume(float v) { }

	// RVA: 0x1A4E720 Offset: 0x1A4E720 VA: 0x1A4E720
	public void WipeStart(UIStandFigureM figure) { }

	// RVA: 0x1A4E884 Offset: 0x1A4E884 VA: 0x1A4E884
