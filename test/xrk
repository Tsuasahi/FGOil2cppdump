
	// RVA: 0x1993A18 Offset: 0x1993A18 VA: 0x1993A18
	public bool checkGEvent(string name) { }

	// RVA: 0x1993B64 Offset: 0x1993B64 VA: 0x1993B64
	public bool checkMotionEvent(string name) { }

	// RVA: 0x1993CA4 Offset: 0x1993CA4 VA: 0x1993CA4
	public bool ExistMotionEvent(string eventName) { }

	// RVA: 0x1993D98 Offset: 0x1993D98 VA: 0x1993D98
	public void setStepFlg(bool flg) { }

	// RVA: 0x1993DA4 Offset: 0x1993DA4 VA: 0x1993DA4
	public bool checkStepFlg() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE2D8 Offset: 0xCCE2D8 VA: 0xCCE2D8
	// RVA: 0x1993DAC Offset: 0x1993DAC VA: 0x1993DAC
	public bool get_IsStepInBattle() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE2E8 Offset: 0xCCE2E8 VA: 0xCCE2E8
	// RVA: 0x1993DB4 Offset: 0x1993DB4 VA: 0x1993DB4
	private void set_IsStepInBattle(bool value) { }

	// RVA: 0x1993DC0 Offset: 0x1993DC0 VA: 0x1993DC0
	public void SetStepInBattle(bool isInBattle) { }

	// RVA: 0x1993DCC Offset: 0x1993DCC VA: 0x1993DCC
	public bool checkStepIn() { }

	// RVA: 0x1993E6C Offset: 0x1993E6C VA: 0x1993E6C
	public void sendMotionEventFSM(string name, bool isCallFinishInterrupt = False) { }

	// RVA: 0x1993EC0 Offset: 0x1993EC0 VA: 0x1993EC0
	public void sendMotionEventFSMCommon(string name) { }

	// RVA: 0x19936CC Offset: 0x19936CC VA: 0x19936CC
	public void sendEventFSM(string name, bool isCallFinishInterrupt = False) { }

	// RVA: 0x1993F40 Offset: 0x1993F40 VA: 0x1993F40
	public GameObject playSideEffect(string effectname, Vector3 vec3, bool sideflip) { }

	// RVA: 0x1994338 Offset: 0x1994338 VA: 0x1994338
	public Transform getFieldRoot() { }

	// RVA: 0x1994364 Offset: 0x1994364 VA: 0x1994364
	public void setCriteriaPos(Transform tr) { }

	// RVA: 0x199453C Offset: 0x199453C VA: 0x199453C
	public void setDirLeft() { }

	// RVA: 0x1994690 Offset: 0x1994690 VA: 0x1994690
	public void setDirRight() { }

	// RVA: 0x19947E0 Offset: 0x19947E0 VA: 0x19947E0
	public void setDir() { }

	// RVA: 0x1994A0C Offset: 0x1994A0C VA: 0x1994A0C
	public Vector3 getTargetObjectVec(BattleActorControl.POS pos) { }

	// RVA: 0x1994E0C Offset: 0x1994E0C VA: 0x1994E0C
	public void setInitActionBattle() { }

	// RVA: 0x1994E14 Offset: 0x1994E14 VA: 0x1994E14
	public Vector3 getCriterialPos() { }

	// RVA: 0x1993ED0 Offset: 0x1993ED0 VA: 0x1993ED0
	public BattleActorControl.ActorMotionActiveCheck get_CheckMotion() { }

	// RVA: 0x1994E20 Offset: 0x1994E20 VA: 0x1994E20
	public bool checkPrevAttackMe() { }

	// RVA: 0x1994E40 Offset: 0x1994E40 VA: 0x1994E40
	public bool checkNextAttackMe() { }

	// RVA: 0x1994E60 Offset: 0x1994E60 VA: 0x1994E60
	public bool IsAllSucceededMovingToSubMember() { }

	// RVA: 0x1994F84 Offset: 0x1994F84 VA: 0x1994F84
	public bool isThree() { }

	// RVA: 0x1994FAC Offset: 0x1994FAC VA: 0x1994FAC
	public bool isFlash() { }

	// RVA: 0x1994FDC Offset: 0x1994FDC VA: 0x1994FDC
	public bool isPairFlash() { }

	// RVA: 0x1995004 Offset: 0x1995004 VA: 0x1995004
	public bool isThreeFlash() { }

	// RVA: 0x199502C Offset: 0x199502C VA: 0x199502C
	public void sendDamageEvent() { }

	// RVA: 0x19950B0 Offset: 0x19950B0 VA: 0x19950B0
	public Transform getDropTransform() { }

	// RVA: 0x19950E4 Offset: 0x19950E4 VA: 0x19950E4
	public void playMotion(string name) { }

	// RVA: 0x19950EC Offset: 0x19950EC VA: 0x19950EC
	public void playNoActionDataMotion(string name, float afterWaitTime) { }

	// RVA: 0x1995144 Offset: 0x1995144 VA: 0x1995144
	public void playBattleActionData(BattleActionData badata) { }

	// RVA: 0x1995254 Offset: 0x1995254 VA: 0x1995254
	protected void playBattleActionDataLocal(BattleActionData badata) { }

	// RVA: 0x19958A4 Offset: 0x19958A4 VA: 0x19958A4
	public void finishMotion(string finishFsmName) { }

	// RVA: 0x1995AD8 Offset: 0x1995AD8 VA: 0x1995AD8
	protected void finishMotion() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE2F8 Offset: 0xCCE2F8 VA: 0xCCE2F8
	// RVA: 0x1995988 Offset: 0x1995988 VA: 0x1995988
	private IEnumerator coroutinePostCallBack(BattleCallBackBase callBack, float waitTime) { }

	// RVA: 0x1995BAC Offset: 0x1995BAC VA: 0x1995BAC
	public void endFinishMotion() { }

	// RVA: 0x1995E14 Offset: 0x1995E14 VA: 0x1995E14
	public void invisibleSvtModel(bool hideFlg = True) { }

	// RVA: 0x1995F64 Offset: 0x1995F64 VA: 0x1995F64
	public bool IsVisibleByTargetNodeScale() { }

	// RVA: 0x1995D40 Offset: 0x1995D40 VA: 0x1995D40
	public void updateBuffIcon(BattleActionData actionData) { }

	// RVA: 0x1996058 Offset: 0x1996058 VA: 0x1996058
	public bool checkVoice(Voice.BATTLE type, bool isNp = False) { }

	// RVA: 0x19960E0 Offset: 0x19960E0 VA: 0x19960E0
	public bool checkVoice(string voiceTypeId, bool isNp = False) { }

	// RVA: 0x19961E0 Offset: 0x19961E0 VA: 0x19961E0
	public void playVoice(Voice.BATTLE type, float volume, Action callback, bool isSaveVoicePlayed = False) { }

	// RVA: 0x1996288 Offset: 0x1996288 VA: 0x1996288
	public void playVoice(string voiceTypeId, float volume, Action callback, bool isSaveVoicePlayed = False) { }

	// RVA: 0x19964C0 Offset: 0x19964C0 VA: 0x19964C0
	public void AddServantVoicePlayed(string[] playedSoundArray) { }

	// RVA: 0x19965BC Offset: 0x19965BC VA: 0x19965BC
	public void playVoiceNp(Voice.BATTLE type, float volume, Action callback) { }

	// RVA: 0x1996654 Offset: 0x1996654 VA: 0x1996654
	public void playVoiceNp(string voiceTypeId, float volume, Action callback) { }

	// RVA: 0x199674C Offset: 0x199674C VA: 0x199674C
	public string GetPrefixVoiceId(string voiceId) { }

	// RVA: 0x1996834 Offset: 0x1996834 VA: 0x1996834
	public SePlayer playVoiceSe(string fileName, float volume) { }

	// RVA: 0x1996930 Offset: 0x1996930 VA: 0x1996930
	public void setNpDamageVoice(bool flg) { }

	// RVA: 0x1996A88 Offset: 0x1996A88 VA: 0x1996A88
	private void OnEvent(string name) { }

	// RVA: 0x1996BF0 Offset: 0x1996BF0 VA: 0x1996BF0
	private void Complete(string name) { }

	// RVA: 0x1996DA4 Offset: 0x1996DA4 VA: 0x1996DA4
	private void setAnimationEvent(string name, BattleActorControl.EventClass ec) { }

	// RVA: 0x1996E4C Offset: 0x1996E4C VA: 0x1996E4C
	private void setAnimationComplete(string name, BattleActorControl.EventClass ec) { }

	// RVA: 0x1996EF4 Offset: 0x1996EF4 VA: 0x1996EF4
	public void endMotion(string call) { }

	// RVA: 0x1996EFC Offset: 0x1996EFC VA: 0x1996EFC
	public void playCallAnimation(string animname, string endevent, string starttag) { }

	// RVA: 0x1997454 Offset: 0x1997454 VA: 0x1997454
	public bool checkAnimation(string animname) { }

	// RVA: 0x199748C Offset: 0x199748C VA: 0x199748C
	public void playAnimation(Hashtable table) { }

	// RVA: 0x199712C Offset: 0x199712C VA: 0x199712C
	public void playAnimation(string animname, bool isDontOverwrite = False) { }

	// RVA: 0x1997058 Offset: 0x1997058 VA: 0x1997058
	public void playAnimationFtag(string animname, string tag) { }

	// RVA: 0x19977E8 Offset: 0x19977E8 VA: 0x19977E8
	public void setTimeScale(float time) { }

	// RVA: 0x199782C Offset: 0x199782C VA: 0x199782C
	public void stopAnimation() { }

	// RVA: 0x1997868 Offset: 0x1997868 VA: 0x1997868
	public void resumeAnimation() { }

	// RVA: 0x19978AC Offset: 0x19978AC VA: 0x19978AC
	public void setMyStage(GameObject obj) { }

	// RVA: 0x19978B4 Offset: 0x19978B4 VA: 0x19978B4
	public void setEnemyStage(GameObject obj) { }

	// RVA: 0x19978BC Offset: 0x19978BC VA: 0x19978BC
	public void startDropItem(bool isSlient = False) { }

	// RVA: 0x1997BF8 Offset: 0x1997BF8 VA: 0x1997BF8
	public void startDeadEffect() { }

	// RVA: 0x1998360 Offset: 0x1998360 VA: 0x1998360
	public void startWaitDeadEffect() { }

	// RVA: 0x1998270 Offset: 0x1998270 VA: 0x1998270
	public float getHeight() { }

	// RVA: 0x1998854 Offset: 0x1998854 VA: 0x1998854
	public void OnFinishDead() { }

	// RVA: 0x1998900 Offset: 0x1998900 VA: 0x1998900
	public void updateDeadEffect(float val) { }

	// RVA: 0x1998E18 Offset: 0x1998E18 VA: 0x1998E18
	public void motion_Jump(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1998FF4 Offset: 0x1998FF4 VA: 0x1998FF4
	public void motion_StepWait(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1999268 Offset: 0x1999268 VA: 0x1999268
	public void motion_Step(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1999444 Offset: 0x1999444 VA: 0x1999444
	public void motion_BackStep(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1999620 Offset: 0x1999620 VA: 0x1999620
	public void motion_TreasureArms(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x19997FC Offset: 0x19997FC VA: 0x19997FC
	public void motion_Cancel() { }

	// RVA: 0x1999878 Offset: 0x1999878 VA: 0x1999878
	public void moveStep(Hashtable table) { }

	// RVA: 0x19999B0 Offset: 0x19999B0 VA: 0x19999B0
	public void moveStep(float hight, float time, BattleActorControl.POS pos) { }

	// RVA: 0x1999F90 Offset: 0x1999F90 VA: 0x1999F90
	public void moveJump(Hashtable table) { }

	// RVA: 0x199A0C8 Offset: 0x199A0C8 VA: 0x199A0C8
	public void moveJump(float hight, float time, BattleActorControl.POS pos) { }

	// RVA: 0x19999F8 Offset: 0x19999F8 VA: 0x19999F8
	public void movePos(BattleActorControl.POS pos, float time, string endcall, GameObject callbackObject, string callbackEvent) { }

	// RVA: 0x199A110 Offset: 0x199A110 VA: 0x199A110
	public void moveUp(Hashtable table) { }

	// RVA: 0x1999CCC Offset: 0x1999CCC VA: 0x1999CCC
	public void moveUp(float hight, float time) { }

	// RVA: 0x199A1F4 Offset: 0x199A1F4 VA: 0x199A1F4
	public void moveDown(float time) { }

	// RVA: 0x199A3D4 Offset: 0x199A3D4 VA: 0x199A3D4
	public void startNoblePhantasm(Action callback, bool flg) { }

	// RVA: 0x199AA04 Offset: 0x199AA04 VA: 0x199AA04
	public void startBattleUIFade(float time, float targetAlpha) { }

	// RVA: 0x199AA4C Offset: 0x199AA4C VA: 0x199AA4C
	private void OnNoblePhantasmLoadComplete(GameObject obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE308 Offset: 0xCCE308 VA: 0xCCE308
	// RVA: 0x199ADA8 Offset: 0x199ADA8 VA: 0x199ADA8
	private IEnumerator WaitToNoblePhantasmPlay() { }

	// RVA: 0x199AE20 Offset: 0x199AE20 VA: 0x199AE20
	private void OnNoblePhantasmPlayComplete(USSequencer seq) { }

	// RVA: 0x199B590 Offset: 0x199B590 VA: 0x199B590
	private void ChangeRotationEnemy(bool enable) { }

	// RVA: 0x199B780 Offset: 0x199B780 VA: 0x199B780
	private void ChangeAnimationCurveEnemy(bool enable) { }

	// RVA: 0x199B954 Offset: 0x199B954 VA: 0x199B954
	public GameObject GetShadowSvtEffect() { }

	// RVA: 0x198D014 Offset: 0x198D014 VA: 0x198D014
	public void SetDispServant(bool isShadow, bool isChoco) { }

	// RVA: 0x198DE98 Offset: 0x198DE98 VA: 0x198DE98
	public void ChangeShadowTexture(int shadowId) { }

	// RVA: 0x199B95C Offset: 0x199B95C VA: 0x199B95C
	public void ChangeShadowColor(Color col, float duration = 0.3) { }

	// RVA: 0x198E378 Offset: 0x198E378 VA: 0x198E378
	public void changeSpecialShadow(int shadowEffectId) { }

	// RVA: 0x199BD70 Offset: 0x199BD70 VA: 0x199BD70
	public void changeShadowType(bool isNormal) { }

	// RVA: 0x198E17C Offset: 0x198E17C VA: 0x198E17C
	public void SetShadowColor(Color col) { }

	// RVA: 0x198E6DC Offset: 0x198E6DC VA: 0x198E6DC
	public void SetShadowSize(int btlSize) { }

	// RVA: 0x198CFD4 Offset: 0x198CFD4 VA: 0x198CFD4
	public bool isShadowServant() { }

	// RVA: 0x198CFF4 Offset: 0x198CFF4 VA: 0x198CFF4
	public bool isChocoServant() { }

	// RVA: 0x199BE94 Offset: 0x199BE94 VA: 0x199BE94
	private void SetMaterialWhite() { }

	// RVA: 0x199C07C Offset: 0x199C07C VA: 0x199C07C
	public void SetMaterialColor(Color fadeColour, float alpha) { }

	// RVA: 0x199C37C Offset: 0x199C37C VA: 0x199C37C
	public Color GetMainColor() { }

	// RVA: 0x199C44C Offset: 0x199C44C VA: 0x199C44C
	public Color GetAddColor() { }

	// RVA: 0x199C51C Offset: 0x199C51C VA: 0x199C51C
	public void SetMainColor(Color col) { }

	// RVA: 0x199C76C Offset: 0x199C76C VA: 0x199C76C
	public void SetAddColor(Color col) { }

	// RVA: 0x199C9BC Offset: 0x199C9BC VA: 0x199C9BC
	private void SetActorAlpha(float alpha) { }

	// RVA: -1 Offset: -1
	private void UpdateMaterialsOnRenderders<T>(IEnumerable<T> rendererEnumerable, Action<Material> updateFunc) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5F304 Offset: 0x1C5F304 VA: 0x1C5F304
	|-BattleActorControl.UpdateMaterialsOnRenderders<object>
	|-BattleActorControl.UpdateMaterialsOnRenderders<SkinnedMeshRenderer>
	*/

	// RVA: 0x199CA94 Offset: 0x199CA94 VA: 0x199CA94
	public void RemoveChildNodesRenderer(GameObject obj) { }

	// RVA: 0x199CBB0 Offset: 0x199CBB0 VA: 0x199CBB0
	public void AddChildNodesRenderer(GameObject obj) { }

	// RVA: 0x199CCCC Offset: 0x199CCCC VA: 0x199CCCC
	public bool isMonsterServant() { }

	// RVA: 0x199CD00 Offset: 0x199CD00 VA: 0x199CD00
	public bool isNoVoice() { }

	// RVA: 0x199CD2C Offset: 0x199CD2C VA: 0x199CD2C
	public void ShakePosition(Vector3 range, float tm) { }

	// RVA: 0x199CD4C Offset: 0x199CD4C VA: 0x199CD4C
	private void Update() { }

	// RVA: 0x199CEFC Offset: 0x199CEFC VA: 0x199CEFC
	public void onTouchEvent() { }

	// RVA: 0x199CFD4 Offset: 0x199CFD4 VA: 0x199CFD4
	public void offTouchEvent() { }

	// RVA: 0x199D0AC Offset: 0x199D0AC VA: 0x199D0AC
	public void skipVoice() { }

	// RVA: 0x199D130 Offset: 0x199D130 VA: 0x199D130
	public void stopVoice() { }

	// RVA: 0x199D1D0 Offset: 0x199D1D0 VA: 0x199D1D0
	public void onTouchSkipDeadEvent() { }

	// RVA: 0x199D270 Offset: 0x199D270 VA: 0x199D270
	public void offTouchSkipDeadEvent() { }

	// RVA: 0x199D310 Offset: 0x199D310 VA: 0x199D310
	public void skipDead() { }

	// RVA: 0x199D3A4 Offset: 0x199D3A4 VA: 0x199D3A4
	public void loadTransformServant() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE318 Offset: 0xCCE318 VA: 0xCCE318
	// RVA: 0x199D3D0 Offset: 0x199D3D0 VA: 0x199D3D0
	private IEnumerator colloadTransformServant() { }

	// RVA: 0x199D448 Offset: 0x199D448 VA: 0x199D448
	public void loadDressServant(bool flg) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE328 Offset: 0xCCE328 VA: 0xCCE328
	// RVA: 0x199D478 Offset: 0x199D478 VA: 0x199D478
	private IEnumerator colloadDressServant(bool flg) { }

	// RVA: 0x199D51C Offset: 0x199D51C VA: 0x199D51C
	public void checkChangeAppearance() { }

	// RVA: 0x199D5AC Offset: 0x199D5AC VA: 0x199D5AC
	public void startChangeApp() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE338 Offset: 0xCCE338 VA: 0xCCE338
	// RVA: 0x199AD14 Offset: 0x199AD14 VA: 0x199AD14
	private IEnumerator waitChangeApp(Action callback) { }

	// RVA: 0x199D638 Offset: 0x199D638 VA: 0x199D638
	public void endChangeAppearance() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE348 Offset: 0xCCE348 VA: 0xCCE348
	// RVA: 0x199D68C Offset: 0x199D68C VA: 0x199D68C
	public IEnumerator collChangeAppearance() { }

	// RVA: 0x199D704 Offset: 0x199D704 VA: 0x199D704
	public void resetAura() { }

	// RVA: 0x199D8AC Offset: 0x199D8AC VA: 0x199D8AC
	public void setAuraFlip(bool flg) { }

	// RVA: 0x199DA70 Offset: 0x199DA70 VA: 0x199DA70
	public void resetAuraFlip() { }

	// RVA: 0x199DC24 Offset: 0x199DC24 VA: 0x199DC24
	public void addAura(int auraEffectId, int priority) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE358 Offset: 0xCCE358 VA: 0xCCE358
	// RVA: 0x199DC50 Offset: 0x199DC50 VA: 0x199DC50
	private IEnumerator coAddAura(int auraEffectId, int priority) { }

	// RVA: 0x198D874 Offset: 0x198D874 VA: 0x198D874
	public void updateAura(int[] auraEffectList) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE368 Offset: 0xCCE368 VA: 0xCCE368
	// RVA: 0x199DD04 Offset: 0x199DD04 VA: 0x199DD04
	private IEnumerator DestroyAuraEffect(GameObject effectObject) { }

	// RVA: 0x199DD74 Offset: 0x199DD74 VA: 0x199DD74
	public bool CheckAuraPriority(int priority) { }

	// RVA: 0x199DD8C Offset: 0x199DD8C VA: 0x199DD8C
	public void setSlientDead() { }

	// RVA: 0x199DDF4 Offset: 0x199DDF4 VA: 0x199DDF4
	public void callServant() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE378 Offset: 0xCCE378 VA: 0xCCE378
	// RVA: 0x199DE2C Offset: 0x199DE2C VA: 0x199DE2C
	public IEnumerator colShiftServant(BattleActionData.ShiftServant shiftSvt, bool isShift = True) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE388 Offset: 0xCCE388 VA: 0xCCE388
	// RVA: 0x199DEE8 Offset: 0x199DEE8 VA: 0x199DEE8
	public IEnumerator colShiftServantChange(BattleActionData.ShiftServant shiftSvt, bool isShift = True) { }

	// RVA: 0x199DFA4 Offset: 0x199DFA4 VA: 0x199DFA4
	public void ShiftServantChangeAfter(bool isShift = True) { }

	// RVA: 0x199E040 Offset: 0x199E040 VA: 0x199E040
	public void endPigReturnEffect() { }

	// RVA: 0x199E1F0 Offset: 0x199E1F0 VA: 0x199E1F0
	public void SetBillBoardGroup(int gId) { }

	// RVA: 0x199757C Offset: 0x199757C VA: 0x199757C
	public string CheckAnimationAndChangeSleepWaitIfNeeded(string animname, bool isSaveAnim = True) { }

	// RVA: 0x199E260 Offset: 0x199E260 VA: 0x199E260
	public string OverwriteAnimation(string animname, bool isSaveAnim = True) { }

	// RVA: 0x199769C Offset: 0x199769C VA: 0x199769C
	public string CheckAnimationAndChangeCounterAttackWait(string animname, bool isSaveAnim = True) { }

	// RVA: 0x199E2C0 Offset: 0x199E2C0 VA: 0x199E2C0
	public ChangeBattlePhaseNotify GetChangePhaseNotify() { }

	// RVA: 0x198D718 Offset: 0x198D718 VA: 0x198D718
	private void AddOverwriteEachPhaseAnimation(int svtId, int limitCount, bool isEnemy) { }

	// RVA: 0x198BA9C Offset: 0x198BA9C VA: 0x198BA9C
	private void RemoveOverwriteEachPhaseAnimation() { }

	// RVA: 0x199E3B4 Offset: 0x199E3B4 VA: 0x199E3B4
	public void SetTempDefaultAnimation() { }

	// RVA: 0x199E490 Offset: 0x199E490 VA: 0x199E490
	public void RevertDefaultAnimation() { }

	// RVA: 0x199B2CC Offset: 0x199B2CC VA: 0x199B2CC
	private void ApplySpecialWaitModeFlag() { }

	// RVA: 0x199E534 Offset: 0x199E534 VA: 0x199E534
	public bool IsAlreadyDrop() { }

	// RVA: 0x1997BE4 Offset: 0x1997BE4 VA: 0x1997BE4
	public void SetAlreadyDrop(bool isDrop) { }

	// RVA: 0x199E554 Offset: 0x199E554 VA: 0x199E554
	public void AddReservedEffectBuffEffectId(int effectId) { }

	// RVA: 0x199E600 Offset: 0x199E600 VA: 0x199E600
	public void ActiveReservedBuffEffect(int effectId) { }

	// RVA: 0x1995A1C Offset: 0x1995A1C VA: 0x1995A1C
	public void ActiveRemainReservedBuffEffect() { }

	// RVA: 0x199E7F4 Offset: 0x199E7F4 VA: 0x199E7F4
	private void addBuffLoopEffect(BuffEntity buffEntity) { }

	// RVA: 0x1998400 Offset: 0x1998400 VA: 0x1998400
	public void updateBuffLoopEffect() { }

	// RVA: 0x1995578 Offset: 0x1995578 VA: 0x1995578
	public void LoopEffectParticleSwitch(bool isPlay, bool isNoblePhantasm = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE398 Offset: 0xCCE398 VA: 0xCCE398
	// RVA: 0x199EFC8 Offset: 0x199EFC8 VA: 0x199EFC8
	private IEnumerator DestroyEffectOnParticleStop(int key) { }

	// RVA: 0x199F064 Offset: 0x199F064 VA: 0x199F064
	private void DestroyLoopEffect(int effectId) { }

	// RVA: 0x198B920 Offset: 0x198B920 VA: 0x198B920
	private void DestroyAllLoopEffect() { }

	// RVA: 0x199A960 Offset: 0x199A960 VA: 0x199A960
	private void LoopEffectSwitchInNoblePhantasm(bool isPlay) { }

	// RVA: 0x199F2CC Offset: 0x199F2CC VA: 0x199F2CC
	private List<int> MoveLoopEffectFromActorObject() { }

	// RVA: 0x199F618 Offset: 0x199F618 VA: 0x199F618
	private void MoveLoopEffectToActorObject(List<int> movedEffect) { }

	// RVA: 0x199FDE0 Offset: 0x199FDE0 VA: 0x199FDE0
	public void UpdateActorVisibilityByBuff() { }

	// RVA: 0x198DE20 Offset: 0x198DE20 VA: 0x198DE20
	private bool IsHideShadow() { }

	// RVA: 0x1995E7C Offset: 0x1995E7C VA: 0x1995E7C
	public void SetShadowActive(bool active) { }

	// RVA: 0x1990DD0 Offset: 0x1990DD0 VA: 0x1990DD0
	private List<int> GetDelayEndSequenceIdListFromMotion() { }

	// RVA: 0x199FF34 Offset: 0x199FF34 VA: 0x199FF34
	public bool IsDelayEndSequence(TreasureDvcEntity entity) { }

	// RVA: 0x19A0054 Offset: 0x19A0054 VA: 0x19A0054
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE3A8 Offset: 0xCCE3A8 VA: 0xCCE3A8
	// RVA: 0x19A00A8 Offset: 0x19A00A8 VA: 0x19A00A8
	private static bool <setServantData>m__0(SkinnedMeshRenderer x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE3B8 Offset: 0xCCE3B8 VA: 0xCCE3B8
	// RVA: 0x19A01F8 Offset: 0x19A01F8 VA: 0x19A01F8
	private static bool <IsAllSucceededMovingToSubMember>m__1(BattleActionData.MoveToSubMember x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE3C8 Offset: 0xCCE3C8 VA: 0xCCE3C8
	// RVA: 0x19A0220 Offset: 0x19A0220 VA: 0x19A0220
	private void <AddServantVoicePlayed>m__2(string playedSoundId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE3D8 Offset: 0xCCE3D8 VA: 0xCCE3D8
	// RVA: 0x19A02E4 Offset: 0x19A02E4 VA: 0x19A02E4
	private void <startNoblePhantasm>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE3E8 Offset: 0xCCE3E8 VA: 0xCCE3E8
	// RVA: 0x19A0488 Offset: 0x19A0488 VA: 0x19A0488
	private void <OnNoblePhantasmLoadComplete>m__4() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE3F8 Offset: 0xCCE3F8 VA: 0xCCE3F8
	// RVA: 0x19A04B4 Offset: 0x19A04B4 VA: 0x19A04B4
	private void <OnNoblePhantasmPlayComplete>m__5() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE408 Offset: 0xCCE408 VA: 0xCCE408
	// RVA: -1 Offset: -1
	private static bool <UpdateMaterialsOnRenderders`1>m__6<T>(T x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x255B0C4 Offset: 0x255B0C4 VA: 0x255B0C4
	|-BattleActorControl.<UpdateMaterialsOnRenderders`1>m__6<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xCCE418 Offset: 0xCCE418 VA: 0xCCE418
	// RVA: -1 Offset: -1
	private static bool <UpdateMaterialsOnRenderders`1>m__7<T>(Material x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x255B130 Offset: 0x255B130 VA: 0x255B130
	|-BattleActorControl.<UpdateMaterialsOnRenderders`1>m__7<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xCCE428 Offset: 0xCCE428 VA: 0xCCE428
	// RVA: 0x19A0590 Offset: 0x19A0590 VA: 0x19A0590
	private static bool <updateAura>m__8(KeyValuePair<int, GameObject> x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE438 Offset: 0xCCE438 VA: 0xCCE438
	// RVA: 0x19A0628 Offset: 0x19A0628 VA: 0x19A0628
	private void <ActiveRemainReservedBuffEffect>m__9(int iconId) { }
}

// Namespace: 
private enum BattleActorControl.DIR // TypeDefIndex: 9235
{
	// Fields
	public int value__; // 0x0
	public const BattleActorControl.DIR RIGHT = 0;
	public const BattleActorControl.DIR LEFT = 1;
}

// Namespace: 
public enum BattleActorControl.POS // TypeDefIndex: 9236
{
	// Fields
	public int value__; // 0x0
	public const BattleActorControl.POS FRONT = 0;
	public const BattleActorControl.POS BACK = 1;
	public const BattleActorControl.POS CENTER = 2;
	public const BattleActorControl.POS CRITERIA = 3;
	public const BattleActorControl.POS MYSTAGE = 4;
	public const BattleActorControl.POS ENEMYSTAGE = 5;
	public const BattleActorControl.POS REPLACE = 6;
	public const BattleActorControl.POS NPSTAGE = 7;
}

// Namespace: 
private class BattleActorControl.ExtraLoadedVoiceArgs // TypeDefIndex: 9237
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC66194 Offset: 0xC66194 VA: 0xC66194
	[DebuggerBrowsableAttribute] // RVA: 0xC66194 Offset: 0xC66194 VA: 0xC66194
	private int <svtId>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC661D0 Offset: 0xC661D0 VA: 0xC661D0
	[DebuggerBrowsableAttribute] // RVA: 0xC661D0 Offset: 0xC661D0 VA: 0xC661D0
	private int <dispLimitCount>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC6620C Offset: 0xC6620C VA: 0xC6620C
	[DebuggerBrowsableAttribute] // RVA: 0xC6620C Offset: 0xC6620C VA: 0xC6620C
	private int <overwriteSvtVoiceId>k__BackingField; // 0x18

	// Properties
	public int svtId { get; set; }
	public int dispLimitCount { get; set; }
	public int overwriteSvtVoiceId { get; set; }

	// Methods

	// RVA: 0x17823A4 Offset: 0x17823A4 VA: 0x17823A4
	public void .ctor(BattleServantData svtData) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE448 Offset: 0xCCE448 VA: 0xCCE448
	// RVA: 0x1782470 Offset: 0x1782470 VA: 0x1782470
	public int get_svtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE458 Offset: 0xCCE458 VA: 0xCCE458
	// RVA: 0x1782458 Offset: 0x1782458 VA: 0x1782458
	private void set_svtId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE468 Offset: 0xCCE468 VA: 0xCCE468
	// RVA: 0x1782478 Offset: 0x1782478 VA: 0x1782478
	public int get_dispLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE478 Offset: 0xCCE478 VA: 0xCCE478
	// RVA: 0x1782460 Offset: 0x1782460 VA: 0x1782460
	private void set_dispLimitCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE488 Offset: 0xCCE488 VA: 0xCCE488
	// RVA: 0x1782480 Offset: 0x1782480 VA: 0x1782480
	public int get_overwriteSvtVoiceId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE498 Offset: 0xCCE498 VA: 0xCCE498
	// RVA: 0x1782468 Offset: 0x1782468 VA: 0x1782468
	private void set_overwriteSvtVoiceId(int value) { }
}

// Namespace: 
private sealed class BattleActorControl.EndCallEvent : MulticastDelegate // TypeDefIndex: 9238
{
	// Methods

	// RVA: 0x1781EEC Offset: 0x1781EEC VA: 0x1781EEC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1781EFC Offset: 0x1781EFC VA: 0x1781EFC Slot: 11
	public virtual void Invoke(Hashtable hash) { }

	// RVA: 0x178229C Offset: 0x178229C VA: 0x178229C Slot: 12
	public virtual IAsyncResult BeginInvoke(Hashtable hash, AsyncCallback callback, object object) { }

	// RVA: 0x17822C0 Offset: 0x17822C0 VA: 0x17822C0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private class BattleActorControl.EventClass // TypeDefIndex: 9239
{
	// Fields
	public BattleActorControl.EndCallEvent eventcall; // 0x10
	public Hashtable table; // 0x18

	// Methods

	// RVA: 0x17822CC Offset: 0x17822CC VA: 0x17822CC
	public void .ctor() { }

	// RVA: 0x17822D4 Offset: 0x17822D4 VA: 0x17822D4
	public void Add(string key, object obj) { }

	// RVA: 0x1782370 Offset: 0x1782370 VA: 0x1782370
	public void Proc() { }
}

// Namespace: 
public class BattleActorControl.ActorMotionActiveCheck // TypeDefIndex: 9240
{
	// Fields
	private int uniqueId; // 0x10
	private int wave; // 0x14
	private BattleActorControl battleActor; // 0x18
	public float afterWaitTime; // 0x20
	private List<string> _activeFsmNameList; // 0x28
	private Queue<BattleCallBackBase> _callBackQueue; // 0x30

	// Properties
	public List<string> ActiveFsmNameList { get; }
	public bool IsActiveFSM { get; }
	public Queue<BattleCallBackBase> CallBackQueue { get; }

	// Methods

	// RVA: 0x17819FC Offset: 0x17819FC VA: 0x17819FC
	public void .ctor(BattleActorControl actor) { }

	// RVA: 0x1781ABC Offset: 0x1781ABC VA: 0x1781ABC
	public List<string> get_ActiveFsmNameList() { }

	// RVA: 0x1781C0C Offset: 0x1781C0C VA: 0x1781C0C
	public bool get_IsActiveFSM() { }

	// RVA: 0x1781C80 Offset: 0x1781C80 VA: 0x1781C80
	public Queue<BattleCallBackBase> get_CallBackQueue() { }

	// RVA: 0x1781AE0 Offset: 0x1781AE0 VA: 0x1781AE0
	private void init() { }

	// RVA: 0x1781CA4 Offset: 0x1781CA4 VA: 0x1781CA4
	public void activeFSM(string fsmName) { }

	// RVA: 0x1781D54 Offset: 0x1781D54 VA: 0x1781D54
	public bool inactiveFSM(string fsmName) { }

	// RVA: 0x1781DCC Offset: 0x1781DCC VA: 0x1781DCC
	public void enqueueCallBack(BattleCallBackBase callBack) { }

	// RVA: 0x1781E44 Offset: 0x1781E44 VA: 0x1781E44
	public BattleCallBackBase getAbleCallBack() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44314 Offset: 0xC44314 VA: 0xC44314
private sealed class BattleActorControl.<setServantData>c__AnonStoreyB // TypeDefIndex: 9241
{
	// Fields
	internal int index; // 0x10
	internal BattleActorControl $this; // 0x18

	// Methods

	// RVA: 0x198D694 Offset: 0x198D694 VA: 0x198D694
	public void .ctor() { }

	// RVA: 0x19A41D0 Offset: 0x19A41D0 VA: 0x19A41D0
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44324 Offset: 0xC44324 VA: 0xC44324
private sealed class BattleActorControl.<ExistMotionEvent>c__AnonStoreyC // TypeDefIndex: 9242
{
	// Fields
	internal string eventName; // 0x10

	// Methods

	// RVA: 0x1993D90 Offset: 0x1993D90 VA: 0x1993D90
	public void .ctor() { }

	// RVA: 0x19A0D70 Offset: 0x19A0D70 VA: 0x19A0D70
	internal bool <>m__0(PlayMakerFSM fsm) { }

	// RVA: 0x19A0E6C Offset: 0x19A0E6C VA: 0x19A0E6C
	internal bool <>m__1(FsmTransition x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44334 Offset: 0xC44334 VA: 0xC44334
private sealed class BattleActorControl.<coroutinePostCallBack>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9243
{
	// Fields
	internal float waitTime; // 0x10
	internal BattleCallBackBase callBack; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB770 Offset: 0xCDB770 VA: 0xCDB770
	// RVA: 0x1995BA4 Offset: 0x1995BA4 VA: 0x1995BA4
	public void .ctor() { }

	// RVA: 0x19A4020 Offset: 0x19A4020 VA: 0x19A4020 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB780 Offset: 0xCDB780 VA: 0xCDB780
	// RVA: 0x19A4144 Offset: 0x19A4144 VA: 0x19A4144 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB790 Offset: 0xCDB790 VA: 0xCDB790
	// RVA: 0x19A414C Offset: 0x19A414C VA: 0x19A414C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB7A0 Offset: 0xCDB7A0 VA: 0xCDB7A0
	// RVA: 0x19A4154 Offset: 0x19A4154 VA: 0x19A4154 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB7B0 Offset: 0xCDB7B0 VA: 0xCDB7B0
	// RVA: 0x19A4168 Offset: 0x19A4168 VA: 0x19A4168 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44344 Offset: 0xC44344 VA: 0xC44344
private sealed class BattleActorControl.<WaitToNoblePhantasmPlay>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9244
{
	// Fields
	internal int <i>__1; // 0x10
	internal int <tempId>__0; // 0x14
	internal int <ignoreSvtId>__0; // 0x18
	internal BattleActorControl $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB7C0 Offset: 0xCDB7C0 VA: 0xCDB7C0
	// RVA: 0x199AE18 Offset: 0x199AE18 VA: 0x199AE18
	public void .ctor() { }

	// RVA: 0x19A0F84 Offset: 0x19A0F84 VA: 0x19A0F84 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB7D0 Offset: 0xCDB7D0 VA: 0xCDB7D0
	// RVA: 0x19A16AC Offset: 0x19A16AC VA: 0x19A16AC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB7E0 Offset: 0xCDB7E0 VA: 0xCDB7E0
	// RVA: 0x19A16B4 Offset: 0x19A16B4 VA: 0x19A16B4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB7F0 Offset: 0xCDB7F0 VA: 0xCDB7F0
	// RVA: 0x19A16BC Offset: 0x19A16BC VA: 0x19A16BC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB800 Offset: 0xCDB800 VA: 0xCDB800
	// RVA: 0x19A16D0 Offset: 0x19A16D0 VA: 0x19A16D0 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44354 Offset: 0xC44354 VA: 0xC44354
private sealed class BattleActorControl.<SetActorAlpha>c__AnonStoreyD // TypeDefIndex: 9245
{
	// Fields
	internal float alpha; // 0x10

	// Methods

	// RVA: 0x199CA8C Offset: 0x199CA8C VA: 0x199CA8C
	public void .ctor() { }

	// RVA: 0x19A0F08 Offset: 0x19A0F08 VA: 0x19A0F08
	internal void <>m__0(Material material) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44364 Offset: 0xC44364 VA: 0xC44364
private sealed class BattleActorControl.<colloadTransformServant>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9246
{
	// Fields
	internal List<int> <moveEffect>__0; // 0x10
	internal BattleActorControl.ExtraLoadedVoiceArgs <voiceArgs>__0; // 0x18
	internal List.Enumerator<BattleActionData.TransformServant> $locvar0; // 0x20
	internal BattleActorControl $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB810 Offset: 0xCDB810 VA: 0xCDB810
	// RVA: 0x199D440 Offset: 0x199D440 VA: 0x199D440
	public void .ctor() { }

	// RVA: 0x19A35F8 Offset: 0x19A35F8 VA: 0x19A35F8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB820 Offset: 0xCDB820 VA: 0xCDB820
	// RVA: 0x19A3F94 Offset: 0x19A3F94 VA: 0x19A3F94 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB830 Offset: 0xCDB830 VA: 0xCDB830
	// RVA: 0x19A3F9C Offset: 0x19A3F9C VA: 0x19A3F9C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB840 Offset: 0xCDB840 VA: 0xCDB840
	// RVA: 0x19A3FA4 Offset: 0x19A3FA4 VA: 0x19A3FA4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB850 Offset: 0xCDB850 VA: 0xCDB850
	// RVA: 0x19A3FB8 Offset: 0x19A3FB8 VA: 0x19A3FB8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44374 Offset: 0xC44374 VA: 0xC44374
private sealed class BattleActorControl.<colloadDressServant>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9247
{
	// Fields
	internal int <dressId>__0; // 0x10
	internal List<int> <moveEffect>__1; // 0x18
	internal bool flg; // 0x20
	internal BattleActorControl $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB860 Offset: 0xCDB860 VA: 0xCDB860
	// RVA: 0x199D514 Offset: 0x199D514 VA: 0x199D514
	public void .ctor() { }

	// RVA: 0x19A2EB8 Offset: 0x19A2EB8 VA: 0x19A2EB8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB870 Offset: 0xCDB870 VA: 0xCDB870
	// RVA: 0x19A356C Offset: 0x19A356C VA: 0x19A356C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB880 Offset: 0xCDB880 VA: 0xCDB880
	// RVA: 0x19A3574 Offset: 0x19A3574 VA: 0x19A3574 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB890 Offset: 0xCDB890 VA: 0xCDB890
	// RVA: 0x19A357C Offset: 0x19A357C VA: 0x19A357C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB8A0 Offset: 0xCDB8A0 VA: 0xCDB8A0
	// RVA: 0x19A3590 Offset: 0x19A3590 VA: 0x19A3590 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44384 Offset: 0xC44384 VA: 0xC44384
private sealed class BattleActorControl.<waitChangeApp>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9248
{
	// Fields
	internal Action callback; // 0x10
	internal BattleActorControl $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

