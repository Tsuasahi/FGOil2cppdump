	[DebuggerHiddenAttribute] // RVA: 0xD48C24 Offset: 0xD48C24 VA: 0xD48C24
	// RVA: 0x1EAB65C Offset: 0x1EAB65C VA: 0x1EAB65C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C34 Offset: 0xD48C34 VA: 0xD48C34
	// RVA: 0x1EAB664 Offset: 0x1EAB664 VA: 0x1EAB664 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C44 Offset: 0xD48C44 VA: 0xD48C44
	// RVA: 0x1EAB66C Offset: 0x1EAB66C VA: 0x1EAB66C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C54 Offset: 0xD48C54 VA: 0xD48C54
	// RVA: 0x1EAB680 Offset: 0x1EAB680 VA: 0x1EAB680 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0460 Offset: 0xCB0460 VA: 0xCB0460
private sealed class BattleActorControl.<colShiftServant>c__Iterator8 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9226
{
	// Fields
	internal BattleActionData.ShiftServant shiftSvt; // 0x10
	internal bool isShift; // 0x18
	internal BattleActorControl $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48C64 Offset: 0xD48C64 VA: 0xD48C64
	// RVA: 0x1EA8CC0 Offset: 0x1EA8CC0 VA: 0x1EA8CC0
	public void .ctor() { }

	// RVA: 0x1EACBC8 Offset: 0x1EACBC8 VA: 0x1EACBC8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C74 Offset: 0xD48C74 VA: 0xD48C74
	// RVA: 0x1EACD10 Offset: 0x1EACD10 VA: 0x1EACD10 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C84 Offset: 0xD48C84 VA: 0xD48C84
	// RVA: 0x1EACD18 Offset: 0x1EACD18 VA: 0x1EACD18 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C94 Offset: 0xD48C94 VA: 0xD48C94
	// RVA: 0x1EACD20 Offset: 0x1EACD20 VA: 0x1EACD20 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48CA4 Offset: 0xD48CA4 VA: 0xD48CA4
	// RVA: 0x1EACD34 Offset: 0x1EACD34 VA: 0x1EACD34 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0470 Offset: 0xCB0470 VA: 0xCB0470
private sealed class BattleActorControl.<colShiftServantChange>c__Iterator9 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9227
{
	// Fields
	internal BattleActionData.ShiftServant shiftSvt; // 0x10
	internal NGUIFader <fadeComp>__1; // 0x18
	internal bool isShift; // 0x20
	internal List<int> <moveEffect>__1; // 0x28
	internal BattleActorControl $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48CB4 Offset: 0xD48CB4 VA: 0xD48CB4
	// RVA: 0x1EA8D7C Offset: 0x1EA8D7C VA: 0x1EA8D7C
	public void .ctor() { }

	// RVA: 0x1EACD9C Offset: 0x1EACD9C VA: 0x1EACD9C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48CC4 Offset: 0xD48CC4 VA: 0xD48CC4
	// RVA: 0x1EAD564 Offset: 0x1EAD564 VA: 0x1EAD564 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48CD4 Offset: 0xD48CD4 VA: 0xD48CD4
	// RVA: 0x1EAD56C Offset: 0x1EAD56C VA: 0x1EAD56C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48CE4 Offset: 0xD48CE4 VA: 0xD48CE4
	// RVA: 0x1EAD574 Offset: 0x1EAD574 VA: 0x1EAD574 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48CF4 Offset: 0xD48CF4 VA: 0xD48CF4
	// RVA: 0x1EAD588 Offset: 0x1EAD588 VA: 0x1EAD588 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0480 Offset: 0xCB0480 VA: 0xCB0480
private sealed class BattleActorControl.<DestroyEffectOnParticleStop>c__IteratorA : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9228
{
	// Fields
	internal int key; // 0x10
	internal ParticleSystem[] <particleArray>__0; // 0x18
	internal EffectComponent <effectComponent>__0; // 0x20
	internal int <aliveCount>__1; // 0x28
	internal ParticleSystem[] $locvar0; // 0x30
	internal int $locvar1; // 0x38
	internal BattleActorControl $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48D04 Offset: 0xD48D04 VA: 0xD48D04
	// RVA: 0x1EA9E28 Offset: 0x1EA9E28 VA: 0x1EA9E28
	public void .ctor() { }

	// RVA: 0x1EAB6E8 Offset: 0x1EAB6E8 VA: 0x1EAB6E8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D14 Offset: 0xD48D14 VA: 0xD48D14
	// RVA: 0x1EAB9EC Offset: 0x1EAB9EC VA: 0x1EAB9EC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D24 Offset: 0xD48D24 VA: 0xD48D24
	// RVA: 0x1EAB9F4 Offset: 0x1EAB9F4 VA: 0x1EAB9F4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D34 Offset: 0xD48D34 VA: 0xD48D34
	// RVA: 0x1EAB9FC Offset: 0x1EAB9FC VA: 0x1EAB9FC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D44 Offset: 0xD48D44 VA: 0xD48D44
	// RVA: 0x1EABA10 Offset: 0x1EABA10 VA: 0x1EABA10 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleBoostSkillIconComponent : BattleServantSkillIConComponent // TypeDefIndex: 9229
{
	// Fields
	public GameObject flashEffect; // 0xB8

	// Methods

	// RVA: 0x1D55FD4 Offset: 0x1D55FD4 VA: 0x1D55FD4
	public void .ctor() { }

	// RVA: 0x1D55FDC Offset: 0x1D55FDC VA: 0x1D55FDC Slot: 5
	public override void OnClickIcon() { }

	// RVA: 0x1D560A0 Offset: 0x1D560A0 VA: 0x1D560A0
	public void procFlash() { }
}

// Namespace: 
public class BattleBuffConfWindowComponent : BattleWindowComponent // TypeDefIndex: 9230
{
	// Fields
	public BattleServantBuffIconComponent buffIcon; // 0x48
	public UILabel nameLabel; // 0x50
	public UILabel detailLabel; // 0x58
	private int buffId; // 0x60

	// Methods

	// RVA: 0x1D56130 Offset: 0x1D56130 VA: 0x1D56130
	public void .ctor() { }

	// RVA: 0x1D56140 Offset: 0x1D56140 VA: 0x1D56140
	public void setData(int buffId) { }

	// RVA: 0x1D5625C Offset: 0x1D5625C VA: 0x1D5625C
	public bool checkBuffId(int buffId) { }

	// RVA: 0x1D5626C Offset: 0x1D5626C VA: 0x1D5626C Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1D56274 Offset: 0x1D56274 VA: 0x1D56274 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }
}

// Namespace: 
public class BattleBuffListObjectComponent : MonoBehaviour // TypeDefIndex: 9231
{
	// Fields
	private static readonly int DEFAULT_FONT_SIZE; // 0x0
	public BattleServantBuffIconComponent buffIcon; // 0x18
	public UILabel nameLabel; // 0x20
	public UILabel confLabel; // 0x28
	public UILabel atTurnLabel; // 0x30
	public UILabel atCountLabel; // 0x38

	// Methods

	// RVA: 0x1D66A7C Offset: 0x1D66A7C VA: 0x1D66A7C
	public void .ctor() { }

	// RVA: 0x1D66A84 Offset: 0x1D66A84 VA: 0x1D66A84
	public void setData(BattleBuffData.ShowBuffData buffData) { }

	// RVA: 0x1D66E64 Offset: 0x1D66E64 VA: 0x1D66E64
	private static void .cctor() { }
}

// Namespace: 
public class BattleButtonComponent : UIButton // TypeDefIndex: 9232
{
	// Properties
	public virtual bool isHide { get; set; }

	// Methods

	// RVA: 0x1D66EB8 Offset: 0x1D66EB8 VA: 0x1D66EB8
	public void .ctor() { }

	// RVA: 0x1D66EC0 Offset: 0x1D66EC0 VA: 0x1D66EC0 Slot: 16
	public virtual bool get_isHide() { }

	// RVA: 0x1D66F80 Offset: 0x1D66F80 VA: 0x1D66F80 Slot: 17
	public virtual void set_isHide(bool value) { }
}

// Namespace: 
public class BattleDefenceTargetHpGaugeComponent : BattleHpGaugeBarComponent // TypeDefIndex: 9233
{
	// Methods

	// RVA: 0x165BD60 Offset: 0x165BD60 VA: 0x165BD60
	public void .ctor() { }

	// RVA: 0x165BD70 Offset: 0x165BD70 VA: 0x165BD70
	public void SetInitDefenceTargetValue(int nowHp, int maxHp) { }

	// RVA: 0x165BFD8 Offset: 0x165BFD8 VA: 0x165BFD8
	public void UpdateDefenceTargetValue(int nowHp) { }

	// RVA: 0x165C4D4 Offset: 0x165C4D4 VA: 0x165C4D4
	public void UpdateDefenceTargetDamageGauge(float per) { }

	// RVA: 0x165C518 Offset: 0x165C518 VA: 0x165C518
	public void CompleteDefenceTargetDamageGauge() { }

	// RVA: 0x165C588 Offset: 0x165C588 VA: 0x165C588
	public void SetHpGauge(int nowHp) { }
}

// Namespace: 
public class BattleHpGaugeBarComponent : MonoBehaviour // TypeDefIndex: 9234
{
	// Fields
	public UIProgressBar frontGauge; // 0x18
	public UISprite frontSprite; // 0x20
	public UIProgressBar damageGauge; // 0x28
	protected long wkprevval; // 0x30
	protected long prevval; // 0x38
	protected long nowval; // 0x40
	protected long maxval; // 0x48

	// Methods

	// RVA: 0x165BD68 Offset: 0x165BD68 VA: 0x165BD68
	public void .ctor() { }

	// RVA: 0x1671CF0 Offset: 0x1671CF0 VA: 0x1671CF0
	public void setInitValue(int now, int max) { }

	// RVA: 0x1671D28 Offset: 0x1671D28 VA: 0x1671D28
	public void setInitValue(long now, long max) { }

	// RVA: 0x1671D58 Offset: 0x1671D58 VA: 0x1671D58
	public void setZero() { }

	// RVA: 0x1671D84 Offset: 0x1671D84 VA: 0x1671D84
	public bool setValue(int now, int max) { }

	// RVA: 0x1671D90 Offset: 0x1671D90 VA: 0x1671D90
	public bool setValue(long now, long max) { }

	// RVA: 0x165BDAC Offset: 0x165BDAC VA: 0x165BDAC
	public void updateNomalGauge(long val) { }

	// RVA: 0x165BF00 Offset: 0x165BF00 VA: 0x165BF00
	public void updateDamageGauge(float par) { }

	// RVA: 0x1672354 Offset: 0x1672354 VA: 0x1672354
	public void completeDamageGauge() { }
}

// Namespace: 
public class BattleInfoMessageComponent : BaseMonoBehaviour // TypeDefIndex: 9235
{
	// Fields
	public UILabel[] textLabel; // 0x18
	public Transform objTarget; // 0x20
	public Transform commandTarget; // 0x28
	private GameObject battleCommand; // 0x30
	public UISprite itemSprite; // 0x38

	// Methods

	// RVA: 0x1673DCC Offset: 0x1673DCC VA: 0x1673DCC
	public void .ctor() { }

	// RVA: 0x1673DD4 Offset: 0x1673DD4 VA: 0x1673DD4
	public void setText(string str) { }

	// RVA: 0x1673E34 Offset: 0x1673E34 VA: 0x1673E34
	public void setText(string str, string str2) { }

	// RVA: 0x1673F88 Offset: 0x1673F88 VA: 0x1673F88
	public void setSkillText(string str, int skillLevel) { }

	// RVA: 0x16740AC Offset: 0x16740AC VA: 0x16740AC
	public Transform getTargetTr() { }

	// RVA: 0x1674154 Offset: 0x1674154 VA: 0x1674154
	public void setCommandObject(GameObject command, BattleServantData svtData) { }

	// RVA: 0x16743AC Offset: 0x16743AC VA: 0x16743AC
	public void setItemSprite(int imageId, bool useSelfAtlas = False) { }
}

// Namespace: 
public class BaseBattleInfoPosData // TypeDefIndex: 9236
{
	// Fields
	protected const float COMMON_SKIP_POS_X = -500;
	protected const float COMMON_OVER_OFFSET_Y = -173;
	[CompilerGeneratedAttribute] // RVA: 0xCD2F40 Offset: 0xCD2F40 VA: 0xCD2F40
	[DebuggerBrowsableAttribute] // RVA: 0xCD2F40 Offset: 0xCD2F40 VA: 0xCD2F40
	private BattlePerformance <Perf>k__BackingField; // 0x10

	// Properties
	public BattlePerformance Perf { get; set; }
	public virtual Vector3 SkillSkipTrLocalPos { get; }
	public virtual float OverTrLocalPosY { get; }

	// Methods

	// RVA: 0x1480880 Offset: 0x1480880 VA: 0x1480880
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA7C Offset: 0xD3BA7C VA: 0xD3BA7C
	// RVA: 0x1480888 Offset: 0x1480888 VA: 0x1480888
	private void set_Perf(BattlePerformance value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA8C Offset: 0xD3BA8C VA: 0xD3BA8C
	// RVA: 0x1480890 Offset: 0x1480890 VA: 0x1480890
	public BattlePerformance get_Perf() { }

	// RVA: 0x1480898 Offset: 0x1480898 VA: 0x1480898 Slot: 4
	public virtual Vector3 get_SkillSkipTrLocalPos() { }

	// RVA: 0x14808F8 Offset: 0x14808F8 VA: 0x14808F8 Slot: 5
	public virtual float get_OverTrLocalPosY() { }

	// RVA: 0x1480920 Offset: 0x1480920 VA: 0x1480920 Slot: 6
	public virtual void Init(BattlePerformance perf) { }
}

// Namespace: 
public class PosCountNormalBattleInfoPosData : BaseBattleInfoPosData // TypeDefIndex: 9237
{
	// Fields
	protected readonly Vector3 skipPos; // 0x18

	// Properties
	public override Vector3 SkillSkipTrLocalPos { get; }

	// Methods

	// RVA: 0x1BD6CCC Offset: 0x1BD6CCC VA: 0x1BD6CCC
	public void .ctor() { }

	// RVA: 0x1BD6D34 Offset: 0x1BD6D34 VA: 0x1BD6D34 Slot: 4
	public override Vector3 get_SkillSkipTrLocalPos() { }
}

// Namespace: 
public class NormalRaidTypeBossBattleInfoPosData : BaseBattleInfoPosData // TypeDefIndex: 9238
{
	// Fields
	protected readonly Vector3 onlyBossSkipPos; // 0x18
	protected readonly Vector3 existsOtherSkipPos; // 0x24

	// Properties
	public override Vector3 SkillSkipTrLocalPos { get; }

	// Methods

	// RVA: 0x18CA9AC Offset: 0x18CA9AC VA: 0x18CA9AC
	public void .ctor() { }

	// RVA: 0x18CAA54 Offset: 0x18CAA54 VA: 0x18CAA54 Slot: 4
	public override Vector3 get_SkillSkipTrLocalPos() { }
}

// Namespace: 
public class PosCountSpBattleInfoPosData : BaseBattleInfoPosData // TypeDefIndex: 9239
{
	// Fields
	protected readonly Vector3 existsFrontRowSkipPos; // 0x18
	protected readonly Vector3 onlyBackRowSkipPos; // 0x24

	// Properties
	public override Vector3 SkillSkipTrLocalPos { get; }

	// Methods

	// RVA: 0x1BD6D54 Offset: 0x1BD6D54 VA: 0x1BD6D54
	public void .ctor() { }

	// RVA: 0x1BD6DFC Offset: 0x1BD6DFC VA: 0x1BD6DFC Slot: 4
	public override Vector3 get_SkillSkipTrLocalPos() { }
}

// Namespace: 
public class BattleInformationComponent : BaseMonoBehaviour // TypeDefIndex: 9240
{
	// Fields
	private BattlePerformance perf; // 0x18
	private BattleData data; // 0x20
	public GameObject totalLabelPrefab; // 0x28
	public Transform totalMessageRoot; // 0x30
	public GameObject commonLabelPrefab; // 0x38
	public Transform commonMessageRoot; // 0x40
	public GameObject playerAttackInfoPrefab; // 0x48
	public GameObject enemyAttackInfoPrefab; // 0x50
	public GameObject nobleInfoPrefab; // 0x58
	public Transform nobleInfoRoot; // 0x60
	public GameObject skillInfoPrefab; // 0x68
	public GameObject skillInfoEnemyPrefab; // 0x70
	public Transform skillInfoRoot; // 0x78
	public GameObject skillSkipRoot; // 0x80
	public GameObject skillSkipPrefab; // 0x88
	public GameObject skillSkipObj; // 0x90
	private BaseBattleInfoPosData infoPosData; // 0x98
	public GameObject fsOffsetRoot; // 0xA0
	public GameObject overRoot; // 0xA8
	private string[] overLabel; // 0xB0
	private GameObject[] overObjectList; // 0xB8
	private bool[] isAlreadyOverKill; // 0xC0
	private float[] timeStartOverKill; // 0xC8
	private Vector3[] showPositions; // 0xD0
	private List<GameObject> motionMessageObjList; // 0xD8
	protected static readonly string NobleInfoAnimPrefix; // 0x0
	private GameObject commonMessageObject; // 0xE0
	private string[] attackCount; // 0xE8

	// Properties
	public List<GameObject> MotionMessageObjList { get; }
	public GameObject CommonMessageObject { get; }

	// Methods

	// RVA: 0x16746F8 Offset: 0x16746F8 VA: 0x16746F8
	public void .ctor() { }

	// RVA: 0x1674AE8 Offset: 0x1674AE8 VA: 0x1674AE8
	public List<GameObject> get_MotionMessageObjList() { }

	// RVA: 0x1674AF0 Offset: 0x1674AF0 VA: 0x1674AF0
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x1674EBC Offset: 0x1674EBC VA: 0x1674EBC
	public void SwitchPopupFullScreen(bool isFullScreen) { }

	// RVA: 0x1674EFC Offset: 0x1674EFC VA: 0x1674EFC
	public void InitializeEachWave() { }

	// RVA: 0x1674F20 Offset: 0x1674F20 VA: 0x1674F20
	protected BaseBattleInfoPosData MakeBattleInfoPosData() { }

	// RVA: 0x1675068 Offset: 0x1675068 VA: 0x1675068
	public void showTotalDamage(BattleActionData actionData) { }

	// RVA: 0x16752A0 Offset: 0x16752A0 VA: 0x16752A0
	public void showNoblePhantasmInfo(int tresureDeviceId, int treasureDeviceLevel, int treasureDevicePer = 500, bool isHideInfo = False, string[] overrideTd) { }

	// RVA: 0x1675964 Offset: 0x1675964 VA: 0x1675964
	public GameObject showSkillName(bool isPlayer, string message, int skillLevel = 0) { }

	// RVA: 0x1675ACC Offset: 0x1675ACC VA: 0x1675ACC
	public GameObject showBoostSkillName(int imageId, string message) { }

	// RVA: 0x1675CA0 Offset: 0x1675CA0 VA: 0x1675CA0
	public void showSpecialName(BattleActionData actionData) { }

	// RVA: 0x1675E6C Offset: 0x1675E6C VA: 0x1675E6C
	public GameObject get_CommonMessageObject() { }

	// RVA: 0x1675E74 Offset: 0x1675E74 VA: 0x1675E74
	public void showCommonMessage(BattleActionData actionData) { }

	// RVA: 0x16763A0 Offset: 0x16763A0 VA: 0x16763A0
	public void DestroyDisplayingMessage() { }

	// RVA: 0x1676A00 Offset: 0x1676A00 VA: 0x1676A00
	private void showOverMessageBase(BattleActionData actionData, BattleInformationComponent.TYPEOVER inOverType) { }

	// RVA: 0x16770E8 Offset: 0x16770E8 VA: 0x16770E8
	public void showOverKillMessage(BattleActionData actionData) { }

	// RVA: 0x1677260 Offset: 0x1677260 VA: 0x1677260
	public void showOverGaugeMessage(BattleActionData actionData) { }

	// RVA: 0x16772D4 Offset: 0x16772D4 VA: 0x16772D4
	private void hideOverBase(BattleInformationComponent.TYPEOVER type) { }

	// RVA: 0x1677170 Offset: 0x1677170 VA: 0x1677170
	private void shiftOverMessage(BattleInformationComponent.TYPEOVER type, int zureIndex = 0) { }

	// RVA: 0x1677660 Offset: 0x1677660 VA: 0x1677660
	public void hideOverKillMessage() { }

	// RVA: 0x1677668 Offset: 0x1677668 VA: 0x1677668
	public void hideOverGaugeMessage() { }

	// RVA: 0x1677670 Offset: 0x1677670 VA: 0x1677670
	public void showCommonMessage(string message) { }

	// RVA: 0x1677674 Offset: 0x1677674 VA: 0x1677674
	public void ShowActionMessage(BattleActionData actionData) { }

	// RVA: 0x1676560 Offset: 0x1676560 VA: 0x1676560
	public void showMotionMessage(string motionMessage, int actorId) { }

	// RVA: 0x16776E4 Offset: 0x16776E4 VA: 0x16776E4
	public void CreateSkillSkip() { }

	// RVA: 0x1677830 Offset: 0x1677830 VA: 0x1677830
	public void DeleteSkillSkip() { }

	// RVA: 0x16778DC Offset: 0x16778DC VA: 0x16778DC
	private static void .cctor() { }
}

// Namespace: 
private enum BattleInformationComponent.TYPEOVER // TypeDefIndex: 9241
{
	// Fields
	public int value__; // 0x0
	public const BattleInformationComponent.TYPEOVER NONE = -1;
	public const BattleInformationComponent.TYPEOVER KILL = 0;
	public const BattleInformationComponent.TYPEOVER GAUGE = 1;
	public const BattleInformationComponent.TYPEOVER MAX = 2;
}

// Namespace: 
public class BattleItemListWindowComponent : BattleWindowComponent // TypeDefIndex: 9242
{
	// Fields
	[SerializeField] // RVA: 0xCD2F7C Offset: 0xCD2F7C VA: 0xCD2F7C
	private PlayMakerFSM masterFsm; // 0x48
	[SerializeField] // RVA: 0xCD2F8C Offset: 0xCD2F8C VA: 0xCD2F8C
	private BattleViewItemlistComponent itemList; // 0x50
	[SerializeField] // RVA: 0xCD2F9C Offset: 0xCD2F9C VA: 0xCD2F9C
	private int itemColumnCount; // 0x58
	private BattleData battleData; // 0x60
	private bool isFromBattleMenu; // 0x68
	private string closeFsmEvent; // 0x70

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x17516C4 Offset: 0x17516C4 VA: 0x17516C4
	public void .ctor() { }

	// RVA: 0x17516D4 Offset: 0x17516D4 VA: 0x17516D4
	public void SetBattleData(BattleData data) { }

	// RVA: 0x17516DC Offset: 0x17516DC VA: 0x17516DC
	public void Open(bool fromBattleMenu, BattleWindowComponent.EndCall call) { }

	// RVA: 0x17517E8 Offset: 0x17517E8 VA: 0x17517E8 Slot: 11
	public override void CompOpen() { }

	// RVA: 0x1751828 Offset: 0x1751828 VA: 0x1751828
	private void CloseWindow() { }

	// RVA: 0x17518C8 Offset: 0x17518C8 VA: 0x17518C8 Slot: 13
	public override void CompClose() { }

	// RVA: 0x1751934 Offset: 0x1751934 VA: 0x1751934
	private void OnItemClick(BattleDropItem dropItem) { }

	// RVA: 0x1751938 Offset: 0x1751938 VA: 0x1751938 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleMasterSkillWindowComponent : BattleWindowComponent // TypeDefIndex: 9243
{
	// Methods

	// RVA: 0x15008D8 Offset: 0x15008D8 VA: 0x15008D8
	public void .ctor() { }

	// RVA: 0x15008E0 Offset: 0x15008E0 VA: 0x15008E0
	public void setInitData(BattleWindowComponent.ACTIONTYPE type, float time = 0.15, bool ocflg = False) { }
}

// Namespace: 
public class BattleMenuWindowComponent : BattleWindowComponent // TypeDefIndex: 9244
{
	// Fields
	public PlayMakerFSM myFsm; // 0x48
	public BattleData data; // 0x50
	public GameObject reserveitemlist_object; // 0x58
	public BattleRetireWindowComponent checkRetireWindow; // 0x60
	public GameObject RetireButton; // 0x68
	public UISprite classChartSp; // 0x70
	public BattleItemListWindowComponent itemListWindow; // 0x78
	public BattleWindowComponent setVolumeWindow; // 0x80
	public SetVolumeControl setVolumeControl; // 0x88
	public GameObject setVolumeWindowMask; // 0x90
	public UISprite itemListBtnSpr; // 0x98

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1500934 Offset: 0x1500934 VA: 0x1500934
	public void .ctor() { }

	// RVA: 0x150093C Offset: 0x150093C VA: 0x150093C
	public void Init() { }

	// RVA: 0x15009B4 Offset: 0x15009B4 VA: 0x15009B4
	public void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1500A74 Offset: 0x1500A74 VA: 0x1500A74
	public void OpenImpl(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1500F30 Offset: 0x1500F30 VA: 0x1500F30
	public void CompOpen() { }

	// RVA: 0x1500F38 Offset: 0x1500F38 VA: 0x1500F38
	public void showConf(BattleDropItem drop) { }

	// RVA: 0x1500F3C Offset: 0x1500F3C VA: 0x1500F3C
	public void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1500F44 Offset: 0x1500F44 VA: 0x1500F44
	public void CompClose() { }

	// RVA: 0x15009E0 Offset: 0x15009E0 VA: 0x15009E0
	public void modeCkRetire() { }

	// RVA: 0x1500F4C Offset: 0x1500F4C VA: 0x1500F4C
	public void endCloseCkRetire() { }

	// RVA: 0x1500FB0 Offset: 0x1500FB0 VA: 0x1500FB0
	public void modeRetire() { }

	// RVA: 0x15010E4 Offset: 0x15010E4 VA: 0x15010E4
	public void endOpenCkRetire() { }

	// RVA: 0x1501148 Offset: 0x1501148 VA: 0x1501148
	public void modeItemListWindow() { }

	// RVA: 0x15012A8 Offset: 0x15012A8 VA: 0x15012A8
	public void endOpenItemListWindow() { }

	// RVA: 0x150130C Offset: 0x150130C VA: 0x150130C
	public void modeSetVolumeWindow() { }

	// RVA: 0x1501408 Offset: 0x1501408 VA: 0x1501408
	public void endOpenSetVolumeWindow() { }

	// RVA: 0x150148C Offset: 0x150148C VA: 0x150148C
	public void closeSetVolumeWindow() { }

	// RVA: 0x150155C Offset: 0x150155C VA: 0x150155C
	public void endCloseSetVolumeWindow() { }

	// RVA: 0x15015C0 Offset: 0x15015C0 VA: 0x15015C0 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleNextTDgaugeComponent : BaseMonoBehaviour // TypeDefIndex: 9245
{
	// Fields
	public Transform gaugeFrontRoot; // 0x18
	public Transform gaugeBackRoot; // 0x20
	public GameObject gaugeIcon; // 0x28
	public GameObject gaugebackIcon; // 0x30
	public float width; // 0x38
	private GameObject[] gaugeList; // 0x40
	private GameObject[] gaugebackList; // 0x48

	// Methods

	// RVA: 0x15025A0 Offset: 0x15025A0 VA: 0x15025A0
	public void .ctor() { }

	// RVA: 0x15025B0 Offset: 0x15025B0 VA: 0x15025B0
	public void setHide() { }

	// RVA: 0x1502638 Offset: 0x1502638 VA: 0x1502638
	public void setInitGauge(int now, int max, bool isTDSeraled) { }

	// RVA: 0x1502A94 Offset: 0x1502A94 VA: 0x1502A94
	public void setValue(int nextVal) { }

	// RVA: 0x1502CEC Offset: 0x1502CEC VA: 0x1502CEC
	public void changeGauge(int index, int type) { }
}

// Namespace: 
public class BattleNoSynchroAnime : MonoBehaviour // TypeDefIndex: 9246
{
	// Methods

	// RVA: 0x1502E44 Offset: 0x1502E44 VA: 0x1502E44
	public void .ctor() { }

	// RVA: 0x1502E4C Offset: 0x1502E4C VA: 0x1502E4C
	private void Start() { }
}

// Namespace: 
public class BattleNpGaugeSystemComponent : MonoBehaviour // TypeDefIndex: 9247
{
	// Fields
	public UIProgressBar[] sliderlist; // 0x18
	public UISprite fullGauge; // 0x20
	public UISprite overGauge; // 0x28
	public UILabel label; // 0x30
	public UISprite frameSprite; // 0x38
	public int maxparam; // 0x40
	public int nowparam; // 0x44
	public int prevparam; // 0x48
	public int lineCount; // 0x4C
	public bool isPercent; // 0x50
	private List<float> sliderDefaultValue; // 0x58

	// Methods

	// RVA: 0x15036EC Offset: 0x15036EC VA: 0x15036EC
	public void .ctor() { }

	// RVA: 0x1503764 Offset: 0x1503764 VA: 0x1503764
	public void InitSliderValue() { }

	// RVA: 0x1503954 Offset: 0x1503954 VA: 0x1503954
	public void resetSlider() { }

	// RVA: 0x1503B44 Offset: 0x1503B44 VA: 0x1503B44
	public void setUseNp(bool flg) { }

	// RVA: 0x1503C44 Offset: 0x1503C44 VA: 0x1503C44
	public void setLineCount(int count) { }

	// RVA: 0x1503C4C Offset: 0x1503C4C VA: 0x1503C4C
	public void setMaxParam(int maxparam) { }

	// RVA: 0x1503C54 Offset: 0x1503C54 VA: 0x1503C54
	public void setNowParam(int nowparam) { }

	// RVA: 0x15040C8 Offset: 0x15040C8 VA: 0x15040C8
	public void changeParam(int param) { }

	// RVA: 0x15045DC Offset: 0x15045DC VA: 0x15045DC
	private void EndTweenFunc(int targetParam) { }

	// RVA: 0x15045E4 Offset: 0x15045E4 VA: 0x15045E4
	public void updateNpGauge(int now) { }

	// RVA: 0x1503C68 Offset: 0x1503C68 VA: 0x1503C68
	public void updateNpGauge(int now, int max) { }
}

// Namespace: 
public class BattlePerformanceBg : MonoBehaviour // TypeDefIndex: 9248
{
	// Fields
	public Transform bgRoot; // 0x18
	public Transform bgRootCamera; // 0x20
	public int nowBgId; // 0x28
	public int newBgId; // 0x2C
	public GameObject bgobject; // 0x30
	public GameObject frontobject; // 0x38
	public BattleActionCamera actionCamera; // 0x40
	private Color tmpcolor; // 0x48
	private int loadbgno; // 0x58
	private int loadbgType; // 0x5C
	private Vector3 pos; // 0x60
	private Vector3 rot; // 0x6C
	private AssetData BgAssetData; // 0x78
	private List<string> loadedChangeBgList; // 0x80
	private string initLoadedBgPath; // 0x88
	public Dictionary<string, BattlePerformanceBg.BgState> historyBgState; // 0x90
	private BattlePerformanceBg.BgState nowBgState; // 0x98
	private BattlePerformanceBg.FADE fade; // 0xA0
	public string[] debuglist; // 0xA8
	private bool changeDirect; // 0xB0
	private bool parentCamera; // 0xB1
	private Action EndCallback; // 0xB8
	protected bool IsLoading; // 0xC0
	protected List<BattlePerformanceBg.BgInfo> bgInfoList; // 0xC8
	protected static readonly string Frontfile; // 0x0

	// Properties
	public bool IsBusy { get; }

	// Methods

	// RVA: 0x16847A0 Offset: 0x16847A0 VA: 0x16847A0
	public void .ctor() { }

	// RVA: 0x1684898 Offset: 0x1684898 VA: 0x1684898
	public static string GetAssetPass(int bgNo) { }

	// RVA: 0x1684924 Offset: 0x1684924 VA: 0x1684924
	public BattlePerformanceBg.SaveData getSaveData() { }

	// RVA: 0x1684F54 Offset: 0x1684F54 VA: 0x1684F54
	public void setSaveData(BattlePerformanceBg.SaveData saveData) { }

	// RVA: 0x1685448 Offset: 0x1685448 VA: 0x1685448
	public bool get_IsBusy() { }

	// RVA: 0x1685450 Offset: 0x1685450 VA: 0x1685450
	public string[] getChangeBgList() { }

	// RVA: 0x1685458 Offset: 0x1685458 VA: 0x1685458
	public void ReleaseBg() { }

	// RVA: 0x1685108 Offset: 0x1685108 VA: 0x1685108
	public BattleBgComponent[] getBattleBgComponents(bool includeInactive = False) { }

	// RVA: 0x1685728 Offset: 0x1685728 VA: 0x1685728
	public void ReleaseChangeBgAssets() { }

	// RVA: 0x1685630 Offset: 0x1685630 VA: 0x1685630
	protected void ReleaseBg(int no) { }

	// RVA: 0x16858C0 Offset: 0x16858C0 VA: 0x16858C0
	public bool isReload() { }

	// RVA: 0x16858E4 Offset: 0x16858E4 VA: 0x16858E4
	public void reloadBg(out int outNo, out int outType) { }

	// RVA: 0x16858FC Offset: 0x16858FC VA: 0x16858FC
	public void loadBg(int no, int tp = 0) { }

	// RVA: 0x16859F8 Offset: 0x16859F8 VA: 0x16859F8
	public void endloadBg(AssetData data) { }

	// RVA: 0x16864BC Offset: 0x16864BC VA: 0x16864BC
	protected void AddChangeBgInfo(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }

	// RVA: 0x1686658 Offset: 0x1686658 VA: 0x1686658
	protected bool ExistsLoadBgInfo() { }

	// RVA: 0x16866C4 Offset: 0x16866C4 VA: 0x16866C4
	protected BattlePerformanceBg.BgInfo FetchBgInfo() { }

	// RVA: 0x1686770 Offset: 0x1686770 VA: 0x1686770
	public void changeBg(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }

	// RVA: 0x1685F9C Offset: 0x1685F9C VA: 0x1685F9C
	private GameObject getBgObject(AssetData data, int tp) { }

	// RVA: 0x16862B4 Offset: 0x16862B4 VA: 0x16862B4
	private GameObject getFrontObject(AssetData data, int tp) { }

	// RVA: 0x1686FA0 Offset: 0x1686FA0 VA: 0x1686FA0
	public void endChangeBg(AssetData data) { }

	// RVA: 0x1687828 Offset: 0x1687828 VA: 0x1687828
	public void UpdateColor(Color color) { }

	// RVA: 0x1686D7C Offset: 0x1686D7C VA: 0x1686D7C
	public void endChangeColor() { }

	// RVA: 0x1687830 Offset: 0x1687830 VA: 0x1687830
	public Texture2D GetShadowTexture(int shadowId) { }

	// RVA: 0x16878FC Offset: 0x16878FC VA: 0x16878FC
	public void DebugPrint(AssetData data) { }

	// RVA: 0x1686D1C Offset: 0x1686D1C VA: 0x1686D1C
	protected void OnEndBgLoad() { }

	// RVA: 0x1684C44 Offset: 0x1684C44 VA: 0x1684C44
	public BattlePerformanceBg.BgState saveHistoryBgState(string inName) { }

	// RVA: 0x1687B48 Offset: 0x1687B48 VA: 0x1687B48
	public void playAnimation(string key, string animName, float timeline = 0) { }

	// RVA: 0x1687C18 Offset: 0x1687C18 VA: 0x1687C18
	public void playLoadEndAnimation() { }

	// RVA: 0x1687CAC Offset: 0x1687CAC VA: 0x1687CAC
	public void setCutNodeNoble(bool flg) { }

	// RVA: 0x1687D4C Offset: 0x1687D4C VA: 0x1687D4C
	public void playBgAnimationOut() { }

	// RVA: 0x1687DAC Offset: 0x1687DAC VA: 0x1687DAC
	public void playBgAnimationIn() { }

	// RVA: 0x1687E0C Offset: 0x1687E0C VA: 0x1687E0C
	private static void .cctor() { }
}

// Namespace: 
public class BattlePerformanceBg.BgState // TypeDefIndex: 9249
{
	// Fields
	public string bgName; // 0x10
	public Dictionary<string, BattleBgComponent.SaveData> compDictionary; // 0x18

	// Methods

	// RVA: 0x1687AC4 Offset: 0x1687AC4 VA: 0x1687AC4
	public void .ctor(string inName) { }

	// RVA: 0x168796C Offset: 0x168796C VA: 0x168796C
	public void setSaveData(BattleBgComponent[] list) { }

	// RVA: 0x16852A4 Offset: 0x16852A4 VA: 0x16852A4
	public void loadSaveData(BattleBgComponent[] list, BattleActionCamera actionCamera) { }
}

// Namespace: 
private enum BattlePerformanceBg.FADE // TypeDefIndex: 9250
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceBg.FADE NONE = 0;
	public const BattlePerformanceBg.FADE IN = 1;
	public const BattlePerformanceBg.FADE OUT = 2;
}

// Namespace: 
public class BattlePerformanceBg.SaveData // TypeDefIndex: 9251
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCD2FAC Offset: 0xCD2FAC VA: 0xCD2FAC
	public string bgName; // 0x10
	[PackKeyAttribute] // RVA: 0xCD2FE4 Offset: 0xCD2FE4 VA: 0xCD2FE4
	public BattlePerformanceBg.SaveData.CompSaveData[] compSaveDataList; // 0x18
	[PackKeyAttribute] // RVA: 0xCD301C Offset: 0xCD301C VA: 0xCD301C
	public int bgNo; // 0x20
	[PackKeyAttribute] // RVA: 0xCD3054 Offset: 0xCD3054 VA: 0xCD3054
	public int bgTp; // 0x24

	// Methods

	// RVA: 0x1684EB0 Offset: 0x1684EB0 VA: 0x1684EB0
	public void .ctor() { }
}

// Namespace: 
public class BattlePerformanceBg.SaveData.CompSaveData // TypeDefIndex: 9252
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCD308C Offset: 0xCD308C VA: 0xCD308C
	public string bgCompName; // 0x10
	[PackKeyAttribute] // RVA: 0xCD30C4 Offset: 0xCD30C4 VA: 0xCD30C4
	public BattleBgComponent.SaveData bgCompData; // 0x18

	// Methods

	// RVA: 0x1684F4C Offset: 0x1684F4C VA: 0x1684F4C
	public void .ctor() { }
}

// Namespace: 
protected class BattlePerformanceBg.BgInfo // TypeDefIndex: 9253
{
	// Fields
	public int bgNo; // 0x10
	public int tp; // 0x14
	public Vector3 pos; // 0x18
	public Vector3 rot; // 0x24
	public bool changeDirect; // 0x30
	public bool parentCamera; // 0x31
	public Action callback; // 0x38

