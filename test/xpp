	[TooltipAttribute] // RVA: 0xCC9888 Offset: 0xCC9888 VA: 0xCC9888
	public FsmFloat volume; // 0x50
	[TooltipAttribute] // RVA: 0xCC98DC Offset: 0xCC98DC VA: 0xCC98DC
	public FsmString seAssetName; // 0x58
	[TooltipAttribute] // RVA: 0xCC9914 Offset: 0xCC9914 VA: 0xCC9914
	public FsmString seObjectName; // 0x60
	[TooltipAttribute] // RVA: 0xCC994C Offset: 0xCC994C VA: 0xCC994C
	public FsmEvent finishedEvent; // 0x68
	protected SePlayer player; // 0x70

	// Methods

	// RVA: 0x21E25FC Offset: 0x21E25FC VA: 0x21E25FC
	public void .ctor() { }

	// RVA: 0x21E2630 Offset: 0x21E2630 VA: 0x21E2630 Slot: 28
	public override void Reset() { }

	// RVA: 0x21E2638 Offset: 0x21E2638 VA: 0x21E2638 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21E2758 Offset: 0x21E2758 VA: 0x21E2758
	protected void EndPlaySe() { }

	// RVA: 0x21E27BC Offset: 0x21E27BC VA: 0x21E27BC Slot: 37
	public override void OnExit() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94428 Offset: 0xC94428 VA: 0xC94428
public class PopScene : FsmStateAction // TypeDefIndex: 8054
{
	// Methods

	// RVA: 0x21E3E64 Offset: 0x21E3E64 VA: 0x21E3E64
	public void .ctor() { }

	// RVA: 0x21E3E6C Offset: 0x21E3E6C VA: 0x21E3E6C Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94460 Offset: 0xC94460 VA: 0xC94460
[TooltipAttribute] // RVA: 0xC94460 Offset: 0xC94460 VA: 0xC94460
public class PreloadBgm : FsmStateAction // TypeDefIndex: 8055
{
	// Fields
	[ObjectTypeAttribute] // RVA: 0xCC9984 Offset: 0xCC9984 VA: 0xCC9984
	[TooltipAttribute] // RVA: 0xCC9984 Offset: 0xCC9984 VA: 0xCC9984
	public FsmString bgmName; // 0x50
	[TooltipAttribute] // RVA: 0xCC9A0C Offset: 0xCC9A0C VA: 0xCC9A0C
	public FsmEvent finishedEvent; // 0x58

	// Methods

	// RVA: 0x21E3EE4 Offset: 0x21E3EE4 VA: 0x21E3EE4
	public void .ctor() { }

	// RVA: 0x21E3EEC Offset: 0x21E3EEC VA: 0x21E3EEC Slot: 28
	public override void Reset() { }

	// RVA: 0x21E3EF0 Offset: 0x21E3EF0 VA: 0x21E3EF0 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21E3EF8 Offset: 0x21E3EF8 VA: 0x21E3EF8
	protected void EndLoadBgm() { }

	// RVA: 0x21E3F00 Offset: 0x21E3F00 VA: 0x21E3F00 Slot: 37
	public override void OnExit() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC944B0 Offset: 0xC944B0 VA: 0xC944B0
public class PushScene : FsmStateAction // TypeDefIndex: 8056
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9A44 Offset: 0xCC9A44 VA: 0xCC9A44
	public SceneList.Type SceneType; // 0x4C

	// Methods

	// RVA: 0x21E468C Offset: 0x21E468C VA: 0x21E468C
	public void .ctor() { }

	// RVA: 0x21E4694 Offset: 0x21E4694 VA: 0x21E4694 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC944E8 Offset: 0xC944E8 VA: 0xC944E8
[TooltipAttribute] // RVA: 0xC944E8 Offset: 0xC944E8 VA: 0xC944E8
public class PushTestNotiffication : FsmStateAction // TypeDefIndex: 8057
{
	// Methods

	// RVA: 0x21E471C Offset: 0x21E471C VA: 0x21E471C
	public void .ctor() { }

	// RVA: 0x21E4724 Offset: 0x21E4724 VA: 0x21E4724 Slot: 28
	public override void Reset() { }

	// RVA: 0x21E4728 Offset: 0x21E4728 VA: 0x21E4728 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21E472C Offset: 0x21E472C VA: 0x21E472C
	protected void EndPlaySe() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94538 Offset: 0xC94538 VA: 0xC94538
public class ReleaseScene : FsmStateAction // TypeDefIndex: 8058
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9A54 Offset: 0xCC9A54 VA: 0xCC9A54
	public SceneList.Type SceneType; // 0x4C
	[RequiredFieldAttribute] // RVA: 0xCC9A64 Offset: 0xCC9A64 VA: 0xCC9A64
	public AvalonSceneManager.FadeType fadeType; // 0x50

	// Methods

	// RVA: 0x21EF108 Offset: 0x21EF108 VA: 0x21EF108
	public void .ctor() { }

	// RVA: 0x21EF118 Offset: 0x21EF118 VA: 0x21EF118 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94570 Offset: 0xC94570 VA: 0xC94570
[TooltipAttribute] // RVA: 0xC94570 Offset: 0xC94570 VA: 0xC94570
public class ResumeBgm : FsmStateAction // TypeDefIndex: 8059
{
	// Methods

	// RVA: 0x21EF58C Offset: 0x21EF58C VA: 0x21EF58C
	public void .ctor() { }

	// RVA: 0x21EF594 Offset: 0x21EF594 VA: 0x21EF594 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC945C0 Offset: 0xC945C0 VA: 0xC945C0
public class SetPositionEx : FsmStateAction // TypeDefIndex: 8060
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9A74 Offset: 0xCC9A74 VA: 0xCC9A74
	public FsmGameObject gameObject; // 0x50
	public FsmGameObject spawnPoint; // 0x58
	public FsmVector3 addposition; // 0x60
	public FsmBool flipX; // 0x68

	// Methods

	// RVA: 0x211FAB8 Offset: 0x211FAB8 VA: 0x211FAB8
	public void .ctor() { }

	// RVA: 0x211FAEC Offset: 0x211FAEC VA: 0x211FAEC Slot: 28
	public override void Reset() { }

	// RVA: 0x211FAF4 Offset: 0x211FAF4 VA: 0x211FAF4 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC945F8 Offset: 0xC945F8 VA: 0xC945F8
public class setTransformEx : FsmStateAction // TypeDefIndex: 8061
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9A84 Offset: 0xCC9A84 VA: 0xCC9A84
	public FsmGameObject gameObject; // 0x50
	public FsmGameObject setTransform; // 0x58

	// Methods

	// RVA: 0x249A93C Offset: 0x249A93C VA: 0x249A93C
	public void .ctor() { }

	// RVA: 0x249A944 Offset: 0x249A944 VA: 0x249A944 Slot: 28
	public override void Reset() { }

	// RVA: 0x249A948 Offset: 0x249A948 VA: 0x249A948 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94630 Offset: 0xC94630 VA: 0xC94630
public class ShowAll : FsmStateAction // TypeDefIndex: 8062
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9A94 Offset: 0xCC9A94 VA: 0xCC9A94
	public FsmGameObject actObject; // 0x50
	[TooltipAttribute] // RVA: 0xCC9AA4 Offset: 0xCC9AA4 VA: 0xCC9AA4
	public FsmFloat time; // 0x58
	private BattlePerformance perf; // 0x60
	private int[] funcIndexList; // 0x68
	private int index; // 0x70
	private float timer; // 0x74
	protected float basetimer; // 0x78
	private float waitTime; // 0x7C
	private float noEffectTimer; // 0x80

	// Methods

	// RVA: 0x212495C Offset: 0x212495C VA: 0x212495C
	public void .ctor() { }

	// RVA: 0x2124964 Offset: 0x2124964 VA: 0x2124964 Slot: 62
	protected virtual float GetBaseInterval() { }

	// RVA: 0x21249C4 Offset: 0x21249C4 VA: 0x21249C4 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x2124B2C Offset: 0x2124B2C VA: 0x2124B2C Slot: 63
	public virtual float showData(int funcIndex, BattlePerformance performance) { }

	// RVA: 0x2124C58 Offset: 0x2124C58 VA: 0x2124C58 Slot: 64
	protected virtual int[] getFunctionList(BattlePerformance performance) { }

	// RVA: 0x2124CAC Offset: 0x2124CAC VA: 0x2124CAC Slot: 65
	protected virtual bool IsDerivedPerformancesFinished(bool isMainEffectPerforming = False) { }

	// RVA: 0x2124D98 Offset: 0x2124D98 VA: 0x2124D98 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
public class ShowAllEx : ShowAll // TypeDefIndex: 8063
{
	// Fields
	private int displayFuncNum; // 0x84

	// Methods

	// RVA: 0x2125018 Offset: 0x2125018 VA: 0x2125018
	public void .ctor() { }

	// RVA: 0x2125028 Offset: 0x2125028 VA: 0x2125028 Slot: 64
	protected override int[] getFunctionList(BattlePerformance performance) { }

	// RVA: 0x2125090 Offset: 0x2125090 VA: 0x2125090 Slot: 62
	protected override float GetBaseInterval() { }

	// RVA: 0x2125134 Offset: 0x2125134 VA: 0x2125134 Slot: 63
	public override float showData(int funcIndex, BattlePerformance performance) { }

	// RVA: 0x2125170 Offset: 0x2125170 VA: 0x2125170
	protected float ShowMultiDamageFunc(int funcIndex, BattlePerformance performance, float nextInterval) { }

	// RVA: 0x2125454 Offset: 0x2125454 VA: 0x2125454
	private void ShowDamageFunc(ShowAllEx.DamageFuncArgument arg) { }

	// RVA: 0x21252F8 Offset: 0x21252F8 VA: 0x21252F8
	private BattleActionData.DamageData[] GetDamageDataArrayDistinctIndex(int funcIndex, BattlePerformance performance) { }

	// RVA: 0x21255A4 Offset: 0x21255A4 VA: 0x21255A4
	private void GetDamageEffectIdAndNode(BattleActionData.DamageData damageData, int damageIndex, out int effectId, out string nodeName) { }
}

// Namespace: 
public struct ShowAllEx.DamageFuncArgument // TypeDefIndex: 8064
{
	// Fields
	public BattlePerformance perf; // 0x0
	public BattleActionData.DamageData damage; // 0x8
	public int damageIndex; // 0x10
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94668 Offset: 0xC94668 VA: 0xC94668
public class ShowBattleEffect : FsmStateAction // TypeDefIndex: 8065
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9ADC Offset: 0xCC9ADC VA: 0xCC9ADC
	public FsmGameObject actObject; // 0x50
	public FsmGameObject targetObject; // 0x58
	public FsmInt effectId; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmVector3 position; // 0x70
	public FsmBool sideflip; // 0x78
	public FsmBool isXFlip; // 0x80
	public FsmBool isZFlip; // 0x88
	public FsmBool isParent; // 0x90
	public FsmBool isAbsScale; // 0x98
	public FsmBool isWait; // 0xA0
	public FsmGameObject storeObject; // 0xA8
	public FsmBool skipIfNonPositiveEffectId; // 0xB0
	private GameObject effectObject; // 0xB8

	// Methods

	// RVA: 0x2125660 Offset: 0x2125660 VA: 0x2125660
	public void .ctor() { }

	// RVA: 0x21256D4 Offset: 0x21256D4 VA: 0x21256D4 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2126108 Offset: 0x2126108 VA: 0x2126108 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC946A0 Offset: 0xC946A0 VA: 0xC946A0
public class ShowBattleEffectA : FsmStateAction // TypeDefIndex: 8066
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9AEC Offset: 0xCC9AEC VA: 0xCC9AEC
	public FsmGameObject actObject; // 0x50
	public FsmGameObject targetObject; // 0x58
	public FsmInt effectId; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmVector3 position; // 0x70
	public FsmBool sideflip; // 0x78
	public FsmBool isXFlip; // 0x80
	public FsmBool isZFlip2018; // 0x88
	public FsmBool isParent; // 0x90
	public FsmBool isAbsScale; // 0x98
	public FsmGameObject storeObject; // 0xA0
	public FsmBool skipIfNonPositiveEffectId; // 0xA8
	public bool isEffectServant; // 0xB0

	// Methods

	// RVA: 0x2126194 Offset: 0x2126194 VA: 0x2126194
	public void .ctor() { }

	// RVA: 0x21261F8 Offset: 0x21261F8 VA: 0x21261F8 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC946D8 Offset: 0xC946D8 VA: 0xC946D8
public class ShowBattleEffectCallServant : ShowBattleEffect // TypeDefIndex: 8067
{
	// Methods

	// RVA: 0x2127A60 Offset: 0x2127A60 VA: 0x2127A60
	public void .ctor() { }

	// RVA: 0x2127A64 Offset: 0x2127A64 VA: 0x2127A64 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2127CDC Offset: 0x2127CDC VA: 0x2127CDC Slot: 34
	public override void OnUpdate() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF1B0 Offset: 0xCAF1B0 VA: 0xCAF1B0
private sealed class ShowBattleEffectCallServant.<OnEnter>c__AnonStorey0 // TypeDefIndex: 8068
{
	// Fields
	internal BattleActorControl actor; // 0x10

	// Methods

	// RVA: 0x2127CD4 Offset: 0x2127CD4 VA: 0x2127CD4
	public void .ctor() { }

	// RVA: 0x2127CE0 Offset: 0x2127CE0 VA: 0x2127CE0
	internal bool <>m__0(BattleActionData.SummonServant x) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94710 Offset: 0xC94710 VA: 0xC94710
public class ShowBattleEffectEx : FsmStateAction // TypeDefIndex: 8069
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9AFC Offset: 0xCC9AFC VA: 0xCC9AFC
	public FsmGameObject actObject; // 0x50
	public FsmGameObject targetObject; // 0x58
	public FsmInt effectId; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmVector3 position; // 0x70
	public FsmBool sideflip; // 0x78
	public FsmBool isParent; // 0x80
	public FsmBool isWait; // 0x88
	public FsmGameObject storeObject; // 0x90
	public FsmBool skipIfNonPositiveEffectId; // 0x98
	public bool isEffectServant; // 0xA0
	private GameObject effectObject; // 0xA8

	// Methods

	// RVA: 0x2127D2C Offset: 0x2127D2C VA: 0x2127D2C
	public void .ctor() { }

	// RVA: 0x2127D70 Offset: 0x2127D70 VA: 0x2127D70 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2128704 Offset: 0x2128704 VA: 0x2128704 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94748 Offset: 0xC94748 VA: 0xC94748
public class ShowBattleEffectWithSetRotation : FsmStateAction // TypeDefIndex: 8070
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B0C Offset: 0xCC9B0C VA: 0xCC9B0C
	public FsmGameObject actObject; // 0x50
	public FsmGameObject targetObject; // 0x58
	public FsmInt effectId; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmVector3 position; // 0x70
	public FsmBool sideflip; // 0x78
	public FsmBool xRotFlip; // 0x80
	public FsmBool sideflip2018; // 0x88
	public FsmBool isXFlip; // 0x90
	public FsmBool isZFlip; // 0x98
	public FsmBool isParent; // 0xA0
	public FsmGameObject storeObject; // 0xA8
	public FsmBool skipIfNonPositiveEffectId; // 0xB0
	public FsmFloat xAngle; // 0xB8
	public FsmFloat yAngle; // 0xC0
	public FsmFloat zAngle; // 0xC8
	public Space space; // 0xD0
	private GameObject effectObject; // 0xD8

	// Methods

	// RVA: 0x2128790 Offset: 0x2128790 VA: 0x2128790
	public void .ctor() { }

	// RVA: 0x21287E4 Offset: 0x21287E4 VA: 0x21287E4 Slot: 28
	public override void Reset() { }

	// RVA: 0x21288D4 Offset: 0x21288D4 VA: 0x21288D4 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21295B4 Offset: 0x21295B4 VA: 0x21295B4 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x2129438 Offset: 0x2129438 VA: 0x2129438
	private void DoSetRotation(Transform transform) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94780 Offset: 0xC94780 VA: 0xC94780
public class ShowBattleUIEffect : FsmStateAction // TypeDefIndex: 8071
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B1C Offset: 0xCC9B1C VA: 0xCC9B1C
	public FsmGameObject PerformanceObject; // 0x50
	public FsmInt effectId; // 0x58
	public FsmBool isWait; // 0x60
	private GameObject effectObject; // 0x68

	// Methods

	// RVA: 0x2129640 Offset: 0x2129640 VA: 0x2129640
	public void .ctor() { }

	// RVA: 0x2129674 Offset: 0x2129674 VA: 0x2129674 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21297F8 Offset: 0x21297F8 VA: 0x21297F8 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC947B8 Offset: 0xC947B8 VA: 0xC947B8
public class ShowBuff : FsmStateAction // TypeDefIndex: 8072
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B2C Offset: 0xCC9B2C VA: 0xCC9B2C
	public FsmGameObject actObject; // 0x50
	public FsmInt functionIndex; // 0x58
	private BattlePerformance perf; // 0x60

	// Methods

	// RVA: 0x2129884 Offset: 0x2129884 VA: 0x2129884
	public void .ctor() { }

	// RVA: 0x21298B8 Offset: 0x21298B8 VA: 0x21298B8 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x2129974 Offset: 0x2129974 VA: 0x2129974 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC947F0 Offset: 0xC947F0 VA: 0xC947F0
public class ShowDamage : FsmStateAction // TypeDefIndex: 8073
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B3C Offset: 0xCC9B3C VA: 0xCC9B3C
	public FsmGameObject actObject; // 0x50
	public FsmInt nomalEffectId; // 0x58
	public FsmInt criticalEffectId; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmInt functionIndex; // 0x70
	public FsmInt startValue; // 0x78
	public FsmInt countValue; // 0x80

	// Methods

	// RVA: 0x2129D20 Offset: 0x2129D20 VA: 0x2129D20
	public void .ctor() { }

	// RVA: 0x2129D74 Offset: 0x2129D74 VA: 0x2129D74 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94828 Offset: 0xC94828 VA: 0xC94828
public class ShowDamageMultiple : ShowDamage // TypeDefIndex: 8074
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B4C Offset: 0xCC9B4C VA: 0xCC9B4C
	public FsmInt[] changeMultipleEffectId; // 0x88
	public FsmInt[] changeMultipleCriticalEffectId; // 0x90

	// Methods

	// RVA: 0x212A00C Offset: 0x212A00C VA: 0x212A00C
	public void .ctor() { }

	// RVA: 0x212A078 Offset: 0x212A078 VA: 0x212A078 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94860 Offset: 0xC94860 VA: 0xC94860
public class ShowDefenceTargetAddBuffEffect : FsmStateAction // TypeDefIndex: 8075
{
	// Fields
	public FsmGameObject actObject; // 0x50
	public FsmInt functionIndex; // 0x58
	public ShowDefenceTargetAddBuffEffect.AddType addType; // 0x60
	public FsmEvent finishEvent; // 0x68
	public float whiteOutWaitTIme; // 0x70

	// Methods

	// RVA: 0x212A4EC Offset: 0x212A4EC VA: 0x212A4EC
	public void .ctor() { }

	// RVA: 0x212A4FC Offset: 0x212A4FC VA: 0x212A4FC Slot: 32
	public override void OnEnter() { }

	[CompilerGeneratedAttribute] // RVA: 0xD385BC Offset: 0xD385BC VA: 0xD385BC
	// RVA: 0x212A640 Offset: 0x212A640 VA: 0x212A640
	private void <OnEnter>m__0() { }
}

// Namespace: 
public enum ShowDefenceTargetAddBuffEffect.AddType // TypeDefIndex: 8076
{
	// Fields
	public int value__; // 0x0
	public const ShowDefenceTargetAddBuffEffect.AddType NoblePhantasm = 0;
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94898 Offset: 0xC94898 VA: 0xC94898
public class ShowDefenceTargetDamage : FsmStateAction // TypeDefIndex: 8077
{
	// Fields
	public FsmGameObject actObject; // 0x50
	public FsmBool defenceTargetNoDamage; // 0x58
	public string damageSe; // 0x60

	// Methods

	// RVA: 0x212A698 Offset: 0x212A698 VA: 0x212A698
	public void .ctor() { }

	// RVA: 0x212A6F0 Offset: 0x212A6F0 VA: 0x212A6F0 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC948D0 Offset: 0xC948D0 VA: 0xC948D0
public class ShowDefenceTargetGuardEffect : FsmStateAction // TypeDefIndex: 8078
{
	// Fields
	public FsmGameObject actObject; // 0x50
	public FsmBool defenceTargetNoDamage; // 0x58

	// Methods

	// RVA: 0x212A7E0 Offset: 0x212A7E0 VA: 0x212A7E0
	public void .ctor() { }

	// RVA: 0x212A7E8 Offset: 0x212A7E8 VA: 0x212A7E8 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94908 Offset: 0xC94908 VA: 0xC94908
public class ShowHeal : FsmStateAction // TypeDefIndex: 8079
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B5C Offset: 0xCC9B5C VA: 0xCC9B5C
	public FsmGameObject actObject; // 0x50
	public FsmInt functionIndex; // 0x58

	// Methods

	// RVA: 0x212A8E4 Offset: 0x212A8E4 VA: 0x212A8E4
	public void .ctor() { }

	// RVA: 0x212A918 Offset: 0x212A918 VA: 0x212A918 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94940 Offset: 0xC94940 VA: 0xC94940
public class ShowSkillEffect : FsmStateAction // TypeDefIndex: 8080
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9B6C Offset: 0xCC9B6C VA: 0xCC9B6C
	public FsmGameObject actObject; // 0x50
	public FsmGameObject targetObject; // 0x58
	public FsmInt effectIndex; // 0x60
	public FsmString attachNodename; // 0x68
	public FsmVector3 position; // 0x70
	public FsmBool sideflip; // 0x78
	public FsmBool isParent; // 0x80
	public FsmBool isWait; // 0x88
	public FsmGameObject storeObject; // 0x90
	private GameObject effectObject; // 0x98

	// Methods

	// RVA: 0x212AA98 Offset: 0x212AA98 VA: 0x212AA98
	public void .ctor() { }

	// RVA: 0x212AAEC Offset: 0x212AAEC VA: 0x212AAEC Slot: 32
	public override void OnEnter() { }

	// RVA: 0x212B0A8 Offset: 0x212B0A8 VA: 0x212B0A8 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: 
public class StateLog : SingletonMonoBehaviour<StateLog> // TypeDefIndex: 8081
{
	// Methods

	// RVA: 0x1D04248 Offset: 0x1D04248 VA: 0x1D04248
	public void .ctor() { }
}

// Namespace: 
public struct StateLog.FSMHistory // TypeDefIndex: 8082
{
	// Fields
	public string fsmName; // 0x0
	public List<string> history; // 0x8
}

// Namespace: 
public enum StateLog.LogType // TypeDefIndex: 8083
{
	// Fields
	public int value__; // 0x0
	public const StateLog.LogType ALL = 0;
	public const StateLog.LogType SHORT = 1;
	public const StateLog.LogType NOW = 2;
	public const StateLog.LogType STOP = 3;
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94978 Offset: 0xC94978 VA: 0xC94978
[TooltipAttribute] // RVA: 0xC94978 Offset: 0xC94978 VA: 0xC94978
public class StopBgm : FsmStateAction // TypeDefIndex: 8084
{
	// Methods

	// RVA: 0x212DDE8 Offset: 0x212DDE8 VA: 0x212DDE8
	public void .ctor() { }

	// RVA: 0x212DDF0 Offset: 0x212DDF0 VA: 0x212DDF0 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC949C8 Offset: 0xC949C8 VA: 0xC949C8
public class StopSe : FsmStateAction // TypeDefIndex: 8085
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9B7C Offset: 0xCC9B7C VA: 0xCC9B7C
	public float fadeoutTime; // 0x4C
	[TooltipAttribute] // RVA: 0xCC9BB4 Offset: 0xCC9BB4 VA: 0xCC9BB4
	public FsmString targetSeName; // 0x50

	// Methods

	// RVA: 0x212DE74 Offset: 0x212DE74 VA: 0x212DE74
	public void .ctor() { }

	// RVA: 0x212DE7C Offset: 0x212DE7C VA: 0x212DE7C Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94A00 Offset: 0xC94A00 VA: 0xC94A00
public class TransitionScene : FsmStateAction // TypeDefIndex: 8086
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9BEC Offset: 0xCC9BEC VA: 0xCC9BEC
	public SceneList.Type SceneType; // 0x4C

	// Methods

	// RVA: 0x216B6BC Offset: 0x216B6BC VA: 0x216B6BC
	public void .ctor() { }

	// RVA: 0x216B6C4 Offset: 0x216B6C4 VA: 0x216B6C4 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94A38 Offset: 0xC94A38 VA: 0xC94A38
[TooltipAttribute] // RVA: 0xC94A38 Offset: 0xC94A38 VA: 0xC94A38
public class TutorialCheckFlag : FsmStateAction // TypeDefIndex: 8087
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9BFC Offset: 0xCC9BFC VA: 0xCC9BFC
	public FsmString flagName; // 0x50

	// Methods

	// RVA: 0x216D2C4 Offset: 0x216D2C4 VA: 0x216D2C4
	public void .ctor() { }

	// RVA: 0x216D2CC Offset: 0x216D2CC VA: 0x216D2CC Slot: 28
	public override void Reset() { }

	// RVA: 0x216D2D0 Offset: 0x216D2D0 VA: 0x216D2D0 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94A88 Offset: 0xC94A88 VA: 0xC94A88
[TooltipAttribute] // RVA: 0xC94A88 Offset: 0xC94A88 VA: 0xC94A88
public class TutorialCheckProgressFlag : FsmStateAction // TypeDefIndex: 8088
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9C34 Offset: 0xCC9C34 VA: 0xCC9C34
	public FsmInt cmpData; // 0x50

	// Methods

	// RVA: 0x216D3B0 Offset: 0x216D3B0 VA: 0x216D3B0
	public void .ctor() { }

	// RVA: 0x216D3B8 Offset: 0x216D3B8 VA: 0x216D3B8 Slot: 28
	public override void Reset() { }

	// RVA: 0x216D3BC Offset: 0x216D3BC VA: 0x216D3BC Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94AD8 Offset: 0xC94AD8 VA: 0xC94AD8
[TooltipAttribute] // RVA: 0xC94AD8 Offset: 0xC94AD8 VA: 0xC94AD8
public class TutorialRequestFlag : FsmStateAction // TypeDefIndex: 8089
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9C6C Offset: 0xCC9C6C VA: 0xCC9C6C
	public FsmString flagName; // 0x50

	// Methods

	// RVA: 0x216D4E4 Offset: 0x216D4E4 VA: 0x216D4E4
	public void .ctor() { }

	// RVA: 0x216D4EC Offset: 0x216D4EC VA: 0x216D4EC Slot: 28
	public override void Reset() { }

	// RVA: 0x216D4F0 Offset: 0x216D4F0 VA: 0x216D4F0 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x216D608 Offset: 0x216D608 VA: 0x216D608
	protected void EndRequest(string result) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94B28 Offset: 0xC94B28 VA: 0xC94B28
[TooltipAttribute] // RVA: 0xC94B28 Offset: 0xC94B28 VA: 0xC94B28
public class TutorialSetFlag : FsmStateAction // TypeDefIndex: 8090
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9CA4 Offset: 0xCC9CA4 VA: 0xCC9CA4
	public FsmString flagName; // 0x50

	// Methods

	// RVA: 0x216D6E0 Offset: 0x216D6E0 VA: 0x216D6E0
	public void .ctor() { }

	// RVA: 0x216D6E8 Offset: 0x216D6E8 VA: 0x216D6E8 Slot: 28
	public override void Reset() { }

	// RVA: 0x216D6EC Offset: 0x216D6EC VA: 0x216D6EC Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94B78 Offset: 0xC94B78 VA: 0xC94B78
[TooltipAttribute] // RVA: 0xC94B78 Offset: 0xC94B78 VA: 0xC94B78
public class TutorialSetProgressFlag : FsmStateAction // TypeDefIndex: 8091
{
	// Fields
	[TooltipAttribute] // RVA: 0xCC9CDC Offset: 0xCC9CDC VA: 0xCC9CDC
	public FsmInt flagData; // 0x50

	// Methods

	// RVA: 0x216D784 Offset: 0x216D784 VA: 0x216D784
	public void .ctor() { }

	// RVA: 0x216D78C Offset: 0x216D78C VA: 0x216D78C Slot: 28
	public override void Reset() { }

	// RVA: 0x216D790 Offset: 0x216D790 VA: 0x216D790 Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC94BC8 Offset: 0xC94BC8 VA: 0xC94BC8
public class TweenColorEx : FsmStateAction // TypeDefIndex: 8092
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCC9D14 Offset: 0xCC9D14 VA: 0xCC9D14
	public FsmGameObject gameObject; // 0x50
	public FsmColor endcolor; // 0x58
	public FsmFloat time; // 0x60

	// Methods

	// RVA: 0x216D828 Offset: 0x216D828 VA: 0x216D828
	public void .ctor() { }

	// RVA: 0x216D874 Offset: 0x216D874 VA: 0x216D874 Slot: 28
	public override void Reset() { }

	// RVA: 0x216D878 Offset: 0x216D878 VA: 0x216D878 Slot: 32
	public override void OnEnter() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94C00 Offset: 0xC94C00 VA: 0xC94C00
[USequencerEventAttribute] // RVA: 0xC94C00 Offset: 0xC94C00 VA: 0xC94C00
public class USFGOUpdateChrAnimEvent : USEventBase // TypeDefIndex: 8093
{
	// Fields
	private Animation anim; // 0x30
	public string animationName; // 0x38
	public float playbackSpeed; // 0x40
	public string startEvent; // 0x48
	public string stopEvent; // 0x50
	public float startTime; // 0x58
	public float stopTime; // 0x5C

	// Methods

	// RVA: 0x1DD0710 Offset: 0x1DD0710 VA: 0x1DD0710
	public void .ctor() { }

	// RVA: 0x1DD07A8 Offset: 0x1DD07A8 VA: 0x1DD07A8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DD11B0 Offset: 0x1DD11B0 VA: 0x1DD11B0 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DD11B4 Offset: 0x1DD11B4 VA: 0x1DD11B4 Slot: 8
	public override void StopEvent() { }
}

// Namespace: 
public class FGOSequenceManager : SingletonMonoBehaviour<FGOSequenceManager> // TypeDefIndex: 8094
{
	// Fields
	public Camera mainCamera; // 0x18
	public Camera effectCamera; // 0x20
	public Camera cutInCamera; // 0x28
	public Transform bgRoot; // 0x30
	public Transform allEffectRoot; // 0x38
	public GameObject standardCutIn; // 0x40
	public GameObject cameraPos; // 0x48
	public GameObject fieldPos; // 0x50
	public GameObject faderObject; // 0x58
	public bool isEditorMode; // 0x60
	private GameObject oldBg; // 0x68
	protected bool isInitialized; // 0x70
	private GameObject[] uniqueFieldPosArray; // 0x78

	// Methods

	// RVA: 0x1613910 Offset: 0x1613910 VA: 0x1613910
	public void .ctor() { }

	// RVA: 0x1613960 Offset: 0x1613960 VA: 0x1613960
	private void Awake() { }

	// RVA: 0x16139B0 Offset: 0x16139B0 VA: 0x16139B0
	private void setup() { }

	// RVA: 0x1613BCC Offset: 0x1613BCC VA: 0x1613BCC
	public void SetupSound() { }

	// RVA: 0x1613C4C Offset: 0x1613C4C VA: 0x1613C4C
	private void Start() { }

	// RVA: 0x1613C50 Offset: 0x1613C50 VA: 0x1613C50
	public void InitNoblePhantasm() { }

	// RVA: 0x1613CFC Offset: 0x1613CFC VA: 0x1613CFC
	public Transform getCameraTransform(string name) { }

	// RVA: 0x1613DAC Offset: 0x1613DAC VA: 0x1613DAC
	public Transform getCharacterPosition(string name) { }

	// RVA: 0x1613FBC Offset: 0x1613FBC VA: 0x1613FBC
	public void ChangeBg(string name, string bgType, bool parentCamera, Vector3 pos, Vector3 rot, Action callback) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC94C60 Offset: 0xC94C60 VA: 0xC94C60
[USequencerEventAttribute] // RVA: 0xC94C60 Offset: 0xC94C60 VA: 0xC94C60
public class USFGOActorAxisRotation : USEventBase // TypeDefIndex: 8095
{
	// Fields
	[SerializeField] // RVA: 0xCC9D24 Offset: 0xCC9D24 VA: 0xCC9D24
	private List<USFGOActorAxisRotation.AxisData> axisDataList; // 0x30
	[SerializeField] // RVA: 0xCC9D34 Offset: 0xCC9D34 VA: 0xCC9D34
	private float lowerLimitPosY; // 0x38
	[SerializeField] // RVA: 0xCC9D44 Offset: 0xCC9D44 VA: 0xCC9D44
	private float lowerAcceptableRangeY; // 0x3C
	private int currentIndex; // 0x40
	private Transform charactorObj; // 0x48
	private GameObject middleObj; // 0x50
	private Vector3 saveCharactorScale; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCC9D54 Offset: 0xCC9D54 VA: 0xCC9D54
	private static Action<USFGOActorAxisRotation.AxisData> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1941874 Offset: 0x1941874 VA: 0x1941874
	public void .ctor() { }

	// RVA: 0x19418E4 Offset: 0x19418E4 VA: 0x19418E4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1941BB8 Offset: 0x1941BB8 VA: 0x1941BB8
	private void ChangeAxisRotation() { }

	// RVA: 0x194206C Offset: 0x194206C VA: 0x194206C
	private int GetLimitCount() { }

	// RVA: 0x1942180 Offset: 0x1942180 VA: 0x1942180
	private Transform GetTargetNode(USFGOActorAxisRotation.AxisData axisData, int value) { }

	// RVA: 0x19421F0 Offset: 0x19421F0 VA: 0x19421F0
	private USFGOActorAxisRotation.BaseNodeSearchData[] MakeNodeSearchArray(USFGOActorAxisRotation.AxisData axisData) { }

	// RVA: 0x19425A0 Offset: 0x19425A0 VA: 0x19425A0
	private USFGOActorAxisRotation.BaseNodeSearchData MakeNodeSearchData(string baseName, string appendName = "") { }

	// RVA: 0x194238C Offset: 0x194238C VA: 0x194238C
	private void SaveNodeSearchData(string targetNodeName, USFGOActorAxisRotation.BaseNodeSearchData[] searchArray) { }

	// RVA: 0x19424F4 Offset: 0x19424F4 VA: 0x19424F4
	private Transform GetMatchCondNode(USFGOActorAxisRotation.BaseNodeSearchData[] searchArray, int value) { }

	// RVA: 0x1942838 Offset: 0x1942838 VA: 0x1942838 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1942A28 Offset: 0x1942A28 VA: 0x1942A28
	private void ResetAxis(int index) { }

	// RVA: 0x1942D5C Offset: 0x1942D5C VA: 0x1942D5C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1942D68 Offset: 0x1942D68 VA: 0x1942D68 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1942D74 Offset: 0x1942D74 VA: 0x1942D74 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	[CompilerGeneratedAttribute] // RVA: 0xD385CC Offset: 0xD385CC VA: 0xD385CC
	// RVA: 0x1942EB0 Offset: 0x1942EB0 VA: 0x1942EB0
	private static void <FireEvent>m__0(USFGOActorAxisRotation.AxisData axis) { }
}

// Namespace: 
private class USFGOActorAxisRotation.NodeSearchDetailData // TypeDefIndex: 8096
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC9D64 Offset: 0xCC9D64 VA: 0xCC9D64
	[DebuggerBrowsableAttribute] // RVA: 0xCC9D64 Offset: 0xCC9D64 VA: 0xCC9D64
	private string <NodeName>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCC9DA0 Offset: 0xCC9DA0 VA: 0xCC9DA0
	[DebuggerBrowsableAttribute] // RVA: 0xCC9DA0 Offset: 0xCC9DA0 VA: 0xCC9DA0
	private float <Priority>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCC9DDC Offset: 0xCC9DDC VA: 0xCC9DDC
