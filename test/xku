// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithSalt : ICipherParameters // TypeDefIndex: 4854
{
	// Fields
	private byte[] salt; // 0x10
	private ICipherParameters parameters; // 0x18

	// Properties
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x224B198 Offset: 0x224B198 VA: 0x224B198
	public void .ctor(ICipherParameters parameters, byte[] salt) { }

	// RVA: 0x224B1E4 Offset: 0x224B1E4 VA: 0x224B1E4
	public void .ctor(ICipherParameters parameters, byte[] salt, int saltOff, int saltLen) { }

	// RVA: 0x224B284 Offset: 0x224B284 VA: 0x224B284
	public byte[] GetSalt() { }

	// RVA: 0x224B28C Offset: 0x224B28C VA: 0x224B28C
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithSBox : ICipherParameters // TypeDefIndex: 4855
{
	// Fields
	private ICipherParameters parameters; // 0x10
	private byte[] sBox; // 0x18

	// Properties
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x224B150 Offset: 0x224B150 VA: 0x224B150
	public void .ctor(ICipherParameters parameters, byte[] sBox) { }

	// RVA: 0x224B188 Offset: 0x224B188 VA: 0x224B188
	public byte[] GetSBox() { }

	// RVA: 0x224B190 Offset: 0x224B190 VA: 0x224B190
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RC2Parameters : KeyParameter // TypeDefIndex: 4856
{
	// Fields
	private readonly int bits; // 0x18

	// Properties
	public int EffectiveKeyBits { get; }

	// Methods

	// RVA: 0x224B294 Offset: 0x224B294 VA: 0x224B294
	public void .ctor(byte[] key) { }

	// RVA: 0x224B320 Offset: 0x224B320 VA: 0x224B320
	public void .ctor(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x224B2F8 Offset: 0x224B2F8 VA: 0x224B2F8
	public void .ctor(byte[] key, int bits) { }

	// RVA: 0x224B388 Offset: 0x224B388 VA: 0x224B388
	public void .ctor(byte[] key, int keyOff, int keyLen, int bits) { }

	// RVA: 0x224B3B0 Offset: 0x224B3B0 VA: 0x224B3B0
	public int get_EffectiveKeyBits() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RC5Parameters : KeyParameter // TypeDefIndex: 4857
{
	// Fields
	private readonly int rounds; // 0x18

	// Properties
	public int Rounds { get; }

	// Methods

	// RVA: 0x224B3B8 Offset: 0x224B3B8 VA: 0x224B3B8
	public void .ctor(byte[] key, int rounds) { }

	// RVA: 0x224B474 Offset: 0x224B474 VA: 0x224B474
	public int get_Rounds() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaBlindingParameters : ICipherParameters // TypeDefIndex: 4858
{
	// Fields
	private readonly RsaKeyParameters publicKey; // 0x10
	private readonly BigInteger blindingFactor; // 0x18

	// Properties
	public RsaKeyParameters PublicKey { get; }
	public BigInteger BlindingFactor { get; }

	// Methods

	// RVA: 0x224B47C Offset: 0x224B47C VA: 0x224B47C
	public void .ctor(RsaKeyParameters publicKey, BigInteger blindingFactor) { }

	// RVA: 0x224B53C Offset: 0x224B53C VA: 0x224B53C
	public RsaKeyParameters get_PublicKey() { }

	// RVA: 0x224B544 Offset: 0x224B544 VA: 0x224B544
	public BigInteger get_BlindingFactor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4859
{
	// Fields
	private readonly BigInteger publicExponent; // 0x20
	private readonly int certainty; // 0x28

	// Properties
	public BigInteger PublicExponent { get; }
	public int Certainty { get; }

	// Methods

	// RVA: 0x224B54C Offset: 0x224B54C VA: 0x224B54C
	public void .ctor(BigInteger publicExponent, SecureRandom random, int strength, int certainty) { }

	// RVA: 0x224B590 Offset: 0x224B590 VA: 0x224B590
	public BigInteger get_PublicExponent() { }

	// RVA: 0x224B598 Offset: 0x224B598 VA: 0x224B598
	public int get_Certainty() { }

	// RVA: 0x224B5A0 Offset: 0x224B5A0 VA: 0x224B5A0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224B67C Offset: 0x224B67C VA: 0x224B67C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4860
{
	// Fields
	private readonly BigInteger modulus; // 0x18
	private readonly BigInteger exponent; // 0x20

	// Properties
	public BigInteger Modulus { get; }
	public BigInteger Exponent { get; }

	// Methods

	// RVA: 0x224B6DC Offset: 0x224B6DC VA: 0x224B6DC
	public void .ctor(bool isPrivate, BigInteger modulus, BigInteger exponent) { }

	// RVA: 0x224B838 Offset: 0x224B838 VA: 0x224B838
	public BigInteger get_Modulus() { }

	// RVA: 0x224B840 Offset: 0x224B840 VA: 0x224B840
	public BigInteger get_Exponent() { }

	// RVA: 0x224B848 Offset: 0x224B848 VA: 0x224B848 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224B970 Offset: 0x224B970 VA: 0x224B970 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaPrivateCrtKeyParameters : RsaKeyParameters // TypeDefIndex: 4861
{
	// Fields
	private readonly BigInteger e; // 0x28
	private readonly BigInteger p; // 0x30
	private readonly BigInteger q; // 0x38
	private readonly BigInteger dP; // 0x40
	private readonly BigInteger dQ; // 0x48
	private readonly BigInteger qInv; // 0x50

	// Properties
	public BigInteger PublicExponent { get; }
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger DP { get; }
	public BigInteger DQ { get; }
	public BigInteger QInv { get; }

	// Methods

	// RVA: 0x224BA08 Offset: 0x224BA08 VA: 0x224BA08
	public void .ctor(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger p, BigInteger q, BigInteger dP, BigInteger dQ, BigInteger qInv) { }

	// RVA: 0x224BC80 Offset: 0x224BC80 VA: 0x224BC80
	public BigInteger get_PublicExponent() { }

	// RVA: 0x224BC88 Offset: 0x224BC88 VA: 0x224BC88
	public BigInteger get_P() { }

	// RVA: 0x224BC90 Offset: 0x224BC90 VA: 0x224BC90
	public BigInteger get_Q() { }

	// RVA: 0x224BC98 Offset: 0x224BC98 VA: 0x224BC98
	public BigInteger get_DP() { }

	// RVA: 0x224BCA0 Offset: 0x224BCA0 VA: 0x224BCA0
	public BigInteger get_DQ() { }

	// RVA: 0x224BCA8 Offset: 0x224BCA8 VA: 0x224BCA8
	public BigInteger get_QInv() { }

	// RVA: 0x224BCB0 Offset: 0x224BCB0 VA: 0x224BCB0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x224BEC0 Offset: 0x224BEC0 VA: 0x224BEC0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x224BB68 Offset: 0x224BB68 VA: 0x224BB68
	private static void ValidateValue(BigInteger x, string name, string desc) { }
}

// Namespace: Org.BouncyCastle.Crypto
public abstract class PbeParametersGenerator // TypeDefIndex: 4862
{
	// Fields
	protected byte[] mPassword; // 0x10
	protected byte[] mSalt; // 0x18
	protected int mIterationCount; // 0x20

	// Properties
	public virtual byte[] Password { get; }
	public virtual byte[] Salt { get; }
	public virtual int IterationCount { get; }

	// Methods

	// RVA: 0x224C02C Offset: 0x224C02C VA: 0x224C02C
	protected void .ctor() { }

	// RVA: 0x224C034 Offset: 0x224C034 VA: 0x224C034 Slot: 4
	public virtual void Init(byte[] password, byte[] salt, int iterationCount) { }

	// RVA: 0x224C11C Offset: 0x224C11C VA: 0x224C11C Slot: 5
	public virtual byte[] get_Password() { }

	[ObsoleteAttribute] // RVA: 0xD34C68 Offset: 0xD34C68 VA: 0xD34C68
	// RVA: 0x224C128 Offset: 0x224C128 VA: 0x224C128
	public byte[] GetPassword() { }

	// RVA: 0x224C134 Offset: 0x224C134 VA: 0x224C134 Slot: 6
	public virtual byte[] get_Salt() { }

	[ObsoleteAttribute] // RVA: 0xD34CA0 Offset: 0xD34CA0 VA: 0xD34CA0
	// RVA: 0x224C140 Offset: 0x224C140 VA: 0x224C140
	public byte[] GetSalt() { }

	// RVA: 0x224C14C Offset: 0x224C14C VA: 0x224C14C Slot: 7
	public virtual int get_IterationCount() { }

	[ObsoleteAttribute] // RVA: 0xD34CD8 Offset: 0xD34CD8 VA: 0xD34CD8
	// RVA: -1 Offset: -1 Slot: 8
	public abstract ICipherParameters GenerateDerivedParameters(int keySize);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract ICipherParameters GenerateDerivedParameters(string algorithm, int keySize);

	[ObsoleteAttribute] // RVA: 0xD34D10 Offset: 0xD34D10 VA: 0xD34D10
	// RVA: -1 Offset: -1 Slot: 10
	public abstract ICipherParameters GenerateDerivedParameters(int keySize, int ivSize);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract ICipherParameters GenerateDerivedParameters(string algorithm, int keySize, int ivSize);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract ICipherParameters GenerateDerivedMacParameters(int keySize);

	// RVA: 0x224C154 Offset: 0x224C154 VA: 0x224C154
	public static byte[] Pkcs5PasswordToBytes(char[] password) { }

	[ObsoleteAttribute] // RVA: 0xD34D48 Offset: 0xD34D48 VA: 0xD34D48
	// RVA: 0x224C1BC Offset: 0x224C1BC VA: 0x224C1BC
	public static byte[] Pkcs5PasswordToBytes(string password) { }

	// RVA: 0x224C224 Offset: 0x224C224 VA: 0x224C224
	public static byte[] Pkcs5PasswordToUtf8Bytes(char[] password) { }

	[ObsoleteAttribute] // RVA: 0xD34D80 Offset: 0xD34D80 VA: 0xD34D80
	// RVA: 0x224C2C8 Offset: 0x224C2C8 VA: 0x224C2C8
	public static byte[] Pkcs5PasswordToUtf8Bytes(string password) { }

	// RVA: 0x224C36C Offset: 0x224C36C VA: 0x224C36C
	public static byte[] Pkcs12PasswordToBytes(char[] password) { }

	// RVA: 0x224C374 Offset: 0x224C374 VA: 0x224C374
	public static byte[] Pkcs12PasswordToBytes(char[] password, bool wrongPkcs12Zero) { }
}

// Namespace: Org.BouncyCastle.Crypto.Prng
public class CryptoApiRandomGenerator : IRandomGenerator // TypeDefIndex: 4863
{
	// Fields
	private readonly RandomNumberGenerator rndProv; // 0x10

	// Methods

	// RVA: 0x224C470 Offset: 0x224C470 VA: 0x224C470
	public void .ctor() { }

	// RVA: 0x224C4DC Offset: 0x224C4DC VA: 0x224C4DC
	public void .ctor(RandomNumberGenerator rng) { }

	// RVA: 0x224C508 Offset: 0x224C508 VA: 0x224C508 Slot: 8
	public virtual void AddSeedMaterial(byte[] seed) { }

	// RVA: 0x224C50C Offset: 0x224C50C VA: 0x224C50C Slot: 9
	public virtual void AddSeedMaterial(long seed) { }

	// RVA: 0x224C510 Offset: 0x224C510 VA: 0x224C510 Slot: 10
	public virtual void NextBytes(byte[] bytes) { }

	// RVA: 0x224C54C Offset: 0x224C54C VA: 0x224C54C Slot: 11
	public virtual void NextBytes(byte[] bytes, int start, int len) { }
}

// Namespace: Org.BouncyCastle.Crypto.Prng
public class DigestRandomGenerator : IRandomGenerator // TypeDefIndex: 4864
{
	// Fields
	private const long CYCLE_COUNT = 10;
	private long stateCounter; // 0x10
	private long seedCounter; // 0x18
	private IDigest digest; // 0x20
	private byte[] state; // 0x28
	private byte[] seed; // 0x30

	// Methods

	// RVA: 0x224C6B8 Offset: 0x224C6B8 VA: 0x224C6B8
	public void .ctor(IDigest digest) { }

	// RVA: 0x224C83C Offset: 0x224C83C VA: 0x224C83C Slot: 4
	public void AddSeedMaterial(byte[] inSeed) { }

	// RVA: 0x224CA98 Offset: 0x224CA98 VA: 0x224CA98 Slot: 5
	public void AddSeedMaterial(long rSeed) { }

	// RVA: 0x224CC50 Offset: 0x224CC50 VA: 0x224CC50 Slot: 6
	public void NextBytes(byte[] bytes) { }

	// RVA: 0x224CC8C Offset: 0x224CC8C VA: 0x224CC8C Slot: 7
	public void NextBytes(byte[] bytes, int start, int len) { }

	// RVA: 0x224CEA0 Offset: 0x224CEA0 VA: 0x224CEA0
	private void CycleSeed() { }

	// RVA: 0x224CE1C Offset: 0x224CE1C VA: 0x224CE1C
	private void GenerateState() { }

	// RVA: 0x224CB40 Offset: 0x224CB40 VA: 0x224CB40
	private void DigestAddCounter(long seedVal) { }

	// RVA: 0x224C8E4 Offset: 0x224C8E4 VA: 0x224C8E4
	private void DigestUpdate(byte[] inSeed) { }

	// RVA: 0x224C9CC Offset: 0x224C9CC VA: 0x224C9CC
	private void DigestDoFinal(byte[] result) { }
}

// Namespace: Org.BouncyCastle.Crypto.Prng
public interface IRandomGenerator // TypeDefIndex: 4865
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void AddSeedMaterial(byte[] seed);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void AddSeedMaterial(long seed);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void NextBytes(byte[] bytes);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void NextBytes(byte[] bytes, int start, int len);
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class DsaDigestSigner : ISigner // TypeDefIndex: 4866
{
	// Fields
	private readonly IDigest digest; // 0x10
	private readonly IDsa dsaSigner; // 0x18
	private bool forSigning; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x224CEE0 Offset: 0x224CEE0 VA: 0x224CEE0
	public void .ctor(IDsa signer, IDigest digest) { }

	// RVA: 0x224CF18 Offset: 0x224CF18 VA: 0x224CF18 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x224D08C Offset: 0x224D08C VA: 0x224D08C Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x224D2E8 Offset: 0x224D2E8 VA: 0x224D2E8 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x224D3B0 Offset: 0x224D3B0 VA: 0x224D3B0 Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x224D490 Offset: 0x224D490 VA: 0x224D490 Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x224D880 Offset: 0x224D880 VA: 0x224D880 Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x224DF88 Offset: 0x224DF88 VA: 0x224DF88 Slot: 17
	public virtual void Reset() { }

	// RVA: 0x224D704 Offset: 0x224D704 VA: 0x224D704
	private byte[] DerEncode(BigInteger r, BigInteger s) { }

	// RVA: 0x224DB98 Offset: 0x224DB98 VA: 0x224DB98
	private BigInteger[] DerDecode(byte[] encoding) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class DsaSigner : IDsa // TypeDefIndex: 4867
{
	// Fields
	protected readonly IDsaKCalculator kCalculator; // 0x10
	protected DsaKeyParameters key; // 0x18
	protected SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x224E040 Offset: 0x224E040 VA: 0x224E040
	public void .ctor() { }

	// RVA: 0x224E0B4 Offset: 0x224E0B4 VA: 0x224E0B4
	public void .ctor(IDsaKCalculator kCalculator) { }

	// RVA: 0x224E0E0 Offset: 0x224E0E0 VA: 0x224E0E0 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x224E128 Offset: 0x224E128 VA: 0x224E128 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x224E378 Offset: 0x224E378 VA: 0x224E378 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x224E910 Offset: 0x224E910 VA: 0x224E910 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }

	// RVA: 0x224ED04 Offset: 0x224ED04 VA: 0x224ED04 Slot: 12
	protected virtual BigInteger CalculateE(BigInteger n, byte[] message) { }

	// RVA: 0x224EDD8 Offset: 0x224EDD8 VA: 0x224EDD8 Slot: 13
	protected virtual SecureRandom InitSecureRandom(bool needed, SecureRandom provided) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class ECDsaSigner : IDsa // TypeDefIndex: 4868
{
	// Fields
	private static readonly BigInteger Eight; // 0x0
	protected readonly IDsaKCalculator kCalculator; // 0x10
	protected ECKeyParameters key; // 0x18
	protected SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x224EE58 Offset: 0x224EE58 VA: 0x224EE58
	public void .ctor() { }

	// RVA: 0x224EEC4 Offset: 0x224EEC4 VA: 0x224EEC4
	public void .ctor(IDsaKCalculator kCalculator) { }

	// RVA: 0x224EEF0 Offset: 0x224EEF0 VA: 0x224EEF0 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x224EF38 Offset: 0x224EF38 VA: 0x224EF38 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x224F18C Offset: 0x224F18C VA: 0x224F18C Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x224F804 Offset: 0x224F804 VA: 0x224F804 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }

	// RVA: 0x224FD74 Offset: 0x224FD74 VA: 0x224FD74 Slot: 12
	protected virtual BigInteger CalculateE(BigInteger n, byte[] message) { }

	// RVA: 0x224FE60 Offset: 0x224FE60 VA: 0x224FE60 Slot: 13
	protected virtual ECMultiplier CreateBasePointMultiplier() { }

	// RVA: 0x224FEBC Offset: 0x224FEBC VA: 0x224FEBC Slot: 14
	protected virtual ECFieldElement GetDenominator(int coordinateSystem, ECPoint p) { }

	// RVA: 0x224FF74 Offset: 0x224FF74 VA: 0x224FF74 Slot: 15
	protected virtual SecureRandom InitSecureRandom(bool needed, SecureRandom provided) { }

	// RVA: 0x224FFF4 Offset: 0x224FFF4 VA: 0x224FFF4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class ECGost3410Signer : IDsa // TypeDefIndex: 4869
{
	// Fields
	private ECKeyParameters key; // 0x10
	private SecureRandom random; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2250070 Offset: 0x2250070 VA: 0x2250070
	public void .ctor() { }

	// RVA: 0x2250078 Offset: 0x2250078 VA: 0x2250078 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x22500C0 Offset: 0x22500C0 VA: 0x22500C0 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x2250254 Offset: 0x2250254 VA: 0x2250254 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x22507B0 Offset: 0x22507B0 VA: 0x22507B0 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }

	// RVA: 0x2250C9C Offset: 0x2250C9C VA: 0x2250C9C Slot: 12
	protected virtual ECMultiplier CreateBasePointMultiplier() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class ECNRSigner : IDsa // TypeDefIndex: 4870
{
	// Fields
	private bool forSigning; // 0x10
	private ECKeyParameters key; // 0x18
	private SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2250CF8 Offset: 0x2250CF8 VA: 0x2250CF8
	public void .ctor() { }

	// RVA: 0x2250D00 Offset: 0x2250D00 VA: 0x2250D00 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2250D48 Offset: 0x2250D48 VA: 0x2250D48 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x2250EE4 Offset: 0x2250EE4 VA: 0x2250EE4 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x22515F8 Offset: 0x22515F8 VA: 0x22515F8 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class GenericSigner : ISigner // TypeDefIndex: 4871
{
	// Fields
	private readonly IAsymmetricBlockCipher engine; // 0x10
	private readonly IDigest digest; // 0x18
	private bool forSigning; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x22519F8 Offset: 0x22519F8 VA: 0x22519F8
	public void .ctor(IAsymmetricBlockCipher engine, IDigest digest) { }

	// RVA: 0x2251A30 Offset: 0x2251A30 VA: 0x2251A30 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2251D68 Offset: 0x2251D68 VA: 0x2251D68 Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x2251FC4 Offset: 0x2251FC4 VA: 0x2251FC4 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x225208C Offset: 0x225208C VA: 0x225208C Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x225216C Offset: 0x225216C VA: 0x225216C Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x22523B0 Offset: 0x22523B0 VA: 0x22523B0 Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x2252708 Offset: 0x2252708 VA: 0x2252708 Slot: 17
	public virtual void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class Gost3410DigestSigner : ISigner // TypeDefIndex: 4872
{
	// Fields
	private readonly IDigest digest; // 0x10
	private readonly IDsa dsaSigner; // 0x18
	private bool forSigning; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x22527C0 Offset: 0x22527C0 VA: 0x22527C0
	public void .ctor(IDsa signer, IDigest digest) { }

	// RVA: 0x22527F8 Offset: 0x22527F8 VA: 0x22527F8 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x225296C Offset: 0x225296C VA: 0x225296C Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x2252BC8 Offset: 0x2252BC8 VA: 0x2252BC8 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x2252C90 Offset: 0x2252C90 VA: 0x2252C90 Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x2252D70 Offset: 0x2252D70 VA: 0x2252D70 Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x225317C Offset: 0x225317C VA: 0x225317C Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x22534C0 Offset: 0x22534C0 VA: 0x22534C0 Slot: 17
	public virtual void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class Gost3410Signer : IDsa // TypeDefIndex: 4873
{
	// Fields
	private Gost3410KeyParameters key; // 0x10
	private SecureRandom random; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2253578 Offset: 0x2253578 VA: 0x2253578
	public void .ctor() { }

	// RVA: 0x2253580 Offset: 0x2253580 VA: 0x2253580 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x22535C8 Offset: 0x22535C8 VA: 0x22535C8 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x225375C Offset: 0x225375C VA: 0x225375C Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x2253B80 Offset: 0x2253B80 VA: 0x2253B80 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class HMacDsaKCalculator : IDsaKCalculator // TypeDefIndex: 4874
{
	// Fields
	private readonly HMac hMac; // 0x10
	private readonly byte[] K; // 0x18
	private readonly byte[] V; // 0x20
	private BigInteger n; // 0x28

	// Properties
	public virtual bool IsDeterministic { get; }

	// Methods

	// RVA: 0x2254040 Offset: 0x2254040 VA: 0x2254040
	public void .ctor(IDigest digest) { }

	// RVA: 0x2254130 Offset: 0x2254130 VA: 0x2254130 Slot: 8
	public virtual bool get_IsDeterministic() { }

	// RVA: 0x2254138 Offset: 0x2254138 VA: 0x2254138 Slot: 9
	public virtual void Init(BigInteger n, SecureRandom random) { }

	// RVA: 0x22541AC Offset: 0x22541AC VA: 0x22541AC Slot: 6
	public void Init(BigInteger n, BigInteger d, byte[] message) { }

	// RVA: 0x2254840 Offset: 0x2254840 VA: 0x2254840 Slot: 10
	public virtual BigInteger NextK() { }

	// RVA: 0x2254744 Offset: 0x2254744 VA: 0x2254744
	private BigInteger BitsToInt(byte[] t) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public interface IDsaKCalculator // TypeDefIndex: 4875
{
	// Properties
	public abstract bool IsDeterministic { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsDeterministic();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(BigInteger n, SecureRandom random);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Init(BigInteger n, BigInteger d, byte[] message);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract BigInteger NextK();
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class Iso9796d2Signer : ISignerWithRecovery, ISigner // TypeDefIndex: 4876
{
	// Fields
	[ObsoleteAttribute] // RVA: 0xCB6088 Offset: 0xCB6088 VA: 0xCB6088
	public const int TrailerImplicit = 188;
	[ObsoleteAttribute] // RVA: 0xCB60C0 Offset: 0xCB60C0 VA: 0xCB60C0
	public const int TrailerRipeMD160 = 12748;
	[ObsoleteAttribute] // RVA: 0xCB60F8 Offset: 0xCB60F8 VA: 0xCB60F8
	public const int TrailerRipeMD128 = 13004;
	[ObsoleteAttribute] // RVA: 0xCB6130 Offset: 0xCB6130 VA: 0xCB6130
	public const int TrailerSha1 = 13260;
	[ObsoleteAttribute] // RVA: 0xCB6168 Offset: 0xCB6168 VA: 0xCB6168
	public const int TrailerSha256 = 13516;
	[ObsoleteAttribute] // RVA: 0xCB61A0 Offset: 0xCB61A0 VA: 0xCB61A0
	public const int TrailerSha512 = 13772;
	[ObsoleteAttribute] // RVA: 0xCB61D8 Offset: 0xCB61D8 VA: 0xCB61D8
	public const int TrailerSha384 = 14028;
	[ObsoleteAttribute] // RVA: 0xCB6210 Offset: 0xCB6210 VA: 0xCB6210
	public const int TrailerWhirlpool = 14284;
	private IDigest digest; // 0x10
	private IAsymmetricBlockCipher cipher; // 0x18
	private int trailer; // 0x20
	private int keyBits; // 0x24
	private byte[] block; // 0x28
	private byte[] mBuf; // 0x30
	private int messageLength; // 0x38
	private bool fullMessage; // 0x3C
	private byte[] recoveredMessage; // 0x40
	private byte[] preSig; // 0x48
	private byte[] preBlock; // 0x50

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2254B70 Offset: 0x2254B70 VA: 0x2254B70
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, bool isImplicit) { }

	// RVA: 0x2254FD4 Offset: 0x2254FD4 VA: 0x2254FD4
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x2254FDC Offset: 0x2254FDC VA: 0x2254FDC Slot: 5
	public byte[] GetRecoveredMessage() { }

	// RVA: 0x2254FE4 Offset: 0x2254FE4 VA: 0x2254FE4 Slot: 14
	public virtual string get_AlgorithmName() { }

	// RVA: 0x22550D8 Offset: 0x22550D8 VA: 0x22550D8 Slot: 15
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x2255354 Offset: 0x2255354 VA: 0x2255354
	private bool IsSameAs(byte[] a, byte[] b) { }

	// RVA: 0x22554AC Offset: 0x22554AC VA: 0x22554AC
	private void ClearBlock(byte[] block) { }

	// RVA: 0x22554E4 Offset: 0x22554E4 VA: 0x22554E4 Slot: 16
	public virtual void UpdateWithRecoveredMessage(byte[] signature) { }

	// RVA: 0x2255AA4 Offset: 0x2255AA4 VA: 0x2255AA4 Slot: 17
	public virtual void Update(byte input) { }

	// RVA: 0x2255BD4 Offset: 0x2255BD4 VA: 0x2255BD4 Slot: 18
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x2255D50 Offset: 0x2255D50 VA: 0x2255D50 Slot: 19
	public virtual void Reset() { }

	// RVA: 0x2255E44 Offset: 0x2255E44 VA: 0x2255E44 Slot: 20
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x2256390 Offset: 0x2256390 VA: 0x2256390 Slot: 21
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x2256CF0 Offset: 0x2256CF0 VA: 0x2256CF0
	private bool ReturnFalse(byte[] block) { }

	// RVA: 0x2256D24 Offset: 0x2256D24 VA: 0x2256D24 Slot: 22
	public virtual bool HasFullMessage() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class IsoTrailers // TypeDefIndex: 4877
{
	// Fields
	public const int TRAILER_IMPLICIT = 188;
	public const int TRAILER_RIPEMD160 = 12748;
	public const int TRAILER_RIPEMD128 = 13004;
	public const int TRAILER_SHA1 = 13260;
	public const int TRAILER_SHA256 = 13516;
	public const int TRAILER_SHA512 = 13772;
	public const int TRAILER_SHA384 = 14028;
	public const int TRAILER_WHIRLPOOL = 14284;
	public const int TRAILER_SHA224 = 14540;
	public const int TRAILER_SHA512_224 = 14796;
	public const int TRAILER_SHA512_256 = 16588;
	private static readonly IDictionary trailerMap; // 0x0

	// Methods

	// RVA: 0x2256D2C Offset: 0x2256D2C VA: 0x2256D2C
	public void .ctor() { }

	// RVA: 0x2256D34 Offset: 0x2256D34 VA: 0x2256D34
	private static IDictionary CreateTrailerMap() { }

	// RVA: 0x2254DF0 Offset: 0x2254DF0 VA: 0x2254DF0
	public static int GetTrailer(IDigest digest) { }

	// RVA: 0x2254C88 Offset: 0x2254C88 VA: 0x2254C88
	public static bool NoTrailerAvailable(IDigest digest) { }

	// RVA: 0x22573E8 Offset: 0x22573E8 VA: 0x22573E8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class PssSigner : ISigner // TypeDefIndex: 4878
{
	// Fields
	public const byte TrailerImplicit = 188;
	private readonly IDigest contentDigest1; // 0x10
	private readonly IDigest contentDigest2; // 0x18
	private readonly IDigest mgfDigest; // 0x20
	private readonly IAsymmetricBlockCipher cipher; // 0x28
	private SecureRandom random; // 0x30
	private int hLen; // 0x38
	private int mgfhLen; // 0x3C
	private int sLen; // 0x40
	private bool sSet; // 0x44
	private int emBits; // 0x48
	private byte[] salt; // 0x50
	private byte[] mDash; // 0x58
	private byte[] block; // 0x60
	private byte trailer; // 0x68

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x225743C Offset: 0x225743C VA: 0x225743C
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x2257530 Offset: 0x2257530 VA: 0x2257530
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, int saltLen) { }

	// RVA: 0x2257598 Offset: 0x2257598 VA: 0x2257598
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, byte[] salt) { }

	// RVA: 0x22577D0 Offset: 0x22577D0 VA: 0x22577D0
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen) { }

	// RVA: 0x2257844 Offset: 0x2257844 VA: 0x2257844
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, byte[] salt) { }

	// RVA: 0x2257564 Offset: 0x2257564 VA: 0x2257564
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, int saltLen, byte trailer) { }

	// RVA: 0x2257808 Offset: 0x2257808 VA: 0x2257808
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen, byte trailer) { }

	// RVA: 0x2257600 Offset: 0x2257600 VA: 0x2257600
	private void .ctor(IAsymmetricBlockCipher cipher, IDigest contentDigest1, IDigest contentDigest2, IDigest mgfDigest, int saltLen, byte[] salt, byte trailer) { }

	// RVA: 0x22578B8 Offset: 0x22578B8 VA: 0x22578B8
	public static PssSigner CreateRawSigner(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x22579E8 Offset: 0x22579E8 VA: 0x22579E8
	public static PssSigner CreateRawSigner(IAsymmetricBlockCipher cipher, IDigest contentDigest, IDigest mgfDigest, int saltLen, byte trailer) { }

	// RVA: 0x2257AAC Offset: 0x2257AAC VA: 0x2257AAC Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2257BA0 Offset: 0x2257BA0 VA: 0x2257BA0 Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x2257E58 Offset: 0x2257E58 VA: 0x2257E58
	private void ClearBlock(byte[] block) { }

	// RVA: 0x2257E90 Offset: 0x2257E90 VA: 0x2257E90 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x2257F58 Offset: 0x2257F58 VA: 0x2257F58 Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x2258038 Offset: 0x2258038 VA: 0x2258038 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x22580F0 Offset: 0x22580F0 VA: 0x22580F0 Slot: 16
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x2258BA4 Offset: 0x2258BA4 VA: 0x2258BA4 Slot: 17
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x22592A8 Offset: 0x22592A8 VA: 0x22592A8
	private void ItoOSP(int i, byte[] sp) { }

	// RVA: 0x2258698 Offset: 0x2258698 VA: 0x2258698
	private byte[] MaskGeneratorFunction1(byte[] Z, int zOff, int zLen, int length) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class RandomDsaKCalculator : IDsaKCalculator // TypeDefIndex: 4879
{
	// Fields
	private BigInteger q; // 0x10
	private SecureRandom random; // 0x18

	// Properties
	public virtual bool IsDeterministic { get; }

	// Methods

	// RVA: 0x224E0AC Offset: 0x224E0AC VA: 0x224E0AC
	public void .ctor() { }

	// RVA: 0x225935C Offset: 0x225935C VA: 0x225935C Slot: 8
	public virtual bool get_IsDeterministic() { }

	// RVA: 0x2259364 Offset: 0x2259364 VA: 0x2259364 Slot: 9
	public virtual void Init(BigInteger n, SecureRandom random) { }

	// RVA: 0x225936C Offset: 0x225936C VA: 0x225936C Slot: 10
	public virtual void Init(BigInteger n, BigInteger d, byte[] message) { }

	// RVA: 0x22593E0 Offset: 0x22593E0 VA: 0x22593E0 Slot: 11
	public virtual BigInteger NextK() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class RsaDigestSigner : ISigner // TypeDefIndex: 4880
{
	// Fields
	private readonly IAsymmetricBlockCipher rsaEngine; // 0x10
	private readonly AlgorithmIdentifier algId; // 0x18
	private readonly IDigest digest; // 0x20
	private bool forSigning; // 0x28
	private static readonly IDictionary oidMap; // 0x0

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x22594C0 Offset: 0x22594C0 VA: 0x22594C0
	private static void .cctor() { }

	// RVA: 0x2259C80 Offset: 0x2259C80 VA: 0x2259C80
	public void .ctor(IDigest digest) { }

	// RVA: 0x2259E88 Offset: 0x2259E88 VA: 0x2259E88
	public void .ctor(IDigest digest, DerObjectIdentifier digestOid) { }

	// RVA: 0x2259F3C Offset: 0x2259F3C VA: 0x2259F3C
	public void .ctor(IDigest digest, AlgorithmIdentifier algId) { }

	// RVA: 0x2259FE4 Offset: 0x2259FE4 VA: 0x2259FE4 Slot: 11
	public virtual string get_AlgorithmName() { }

