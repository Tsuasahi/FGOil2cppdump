
	// Methods

	// RVA: 0x1DC975C Offset: 0x1DC975C VA: 0x1DC975C
	public void .ctor(byte[] key) { }

	// RVA: 0x1DC99CC Offset: 0x1DC99CC VA: 0x1DC99CC
	public void .ctor(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x1DCD944 Offset: 0x1DCD944 VA: 0x1DCD944
	public byte[] GetKey() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class MqvPrivateParameters : ICipherParameters // TypeDefIndex: 4850
{
	// Fields
	private readonly ECPrivateKeyParameters staticPrivateKey; // 0x10
	private readonly ECPrivateKeyParameters ephemeralPrivateKey; // 0x18
	private readonly ECPublicKeyParameters ephemeralPublicKey; // 0x20

	// Properties
	public virtual ECPrivateKeyParameters StaticPrivateKey { get; }
	public virtual ECPrivateKeyParameters EphemeralPrivateKey { get; }
	public virtual ECPublicKeyParameters EphemeralPublicKey { get; }

	// Methods

	// RVA: 0x1DCDA1C Offset: 0x1DCDA1C VA: 0x1DCDA1C
	public void .ctor(ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey) { }

	// RVA: 0x1DCDA24 Offset: 0x1DCDA24 VA: 0x1DCDA24
	public void .ctor(ECPrivateKeyParameters staticPrivateKey, ECPrivateKeyParameters ephemeralPrivateKey, ECPublicKeyParameters ephemeralPublicKey) { }

	// RVA: 0x1DCDBE0 Offset: 0x1DCDBE0 VA: 0x1DCDBE0 Slot: 4
	public virtual ECPrivateKeyParameters get_StaticPrivateKey() { }

	// RVA: 0x1DCDBE8 Offset: 0x1DCDBE8 VA: 0x1DCDBE8 Slot: 5
	public virtual ECPrivateKeyParameters get_EphemeralPrivateKey() { }

	// RVA: 0x1DCDBF0 Offset: 0x1DCDBF0 VA: 0x1DCDBF0 Slot: 6
	public virtual ECPublicKeyParameters get_EphemeralPublicKey() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class MqvPublicParameters : ICipherParameters // TypeDefIndex: 4851
{
	// Fields
	private readonly ECPublicKeyParameters staticPublicKey; // 0x10
	private readonly ECPublicKeyParameters ephemeralPublicKey; // 0x18

	// Properties
	public virtual ECPublicKeyParameters StaticPublicKey { get; }
	public virtual ECPublicKeyParameters EphemeralPublicKey { get; }

	// Methods

	// RVA: 0x1DCDBF8 Offset: 0x1DCDBF8 VA: 0x1DCDBF8
	public void .ctor(ECPublicKeyParameters staticPublicKey, ECPublicKeyParameters ephemeralPublicKey) { }

	// RVA: 0x1DCDD20 Offset: 0x1DCDD20 VA: 0x1DCDD20 Slot: 4
	public virtual ECPublicKeyParameters get_StaticPublicKey() { }

	// RVA: 0x1DCDD28 Offset: 0x1DCDD28 VA: 0x1DCDD28 Slot: 5
	public virtual ECPublicKeyParameters get_EphemeralPublicKey() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithIV : ICipherParameters // TypeDefIndex: 4852
{
	// Fields
	private readonly ICipherParameters parameters; // 0x10
	private readonly byte[] iv; // 0x18

	// Properties
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x1DCDD30 Offset: 0x1DCDD30 VA: 0x1DCDD30
	public void .ctor(ICipherParameters parameters, byte[] iv) { }

	// RVA: 0x1DCDD7C Offset: 0x1DCDD7C VA: 0x1DCDD7C
	public void .ctor(ICipherParameters parameters, byte[] iv, int ivOff, int ivLen) { }

	// RVA: 0x1DCDE68 Offset: 0x1DCDE68 VA: 0x1DCDE68
	public byte[] GetIV() { }

	// RVA: 0x1DCDF40 Offset: 0x1DCDF40 VA: 0x1DCDF40
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithRandom : ICipherParameters // TypeDefIndex: 4853
{
	// Fields
	private readonly ICipherParameters parameters; // 0x10
	private readonly SecureRandom random; // 0x18

	// Properties
	public SecureRandom Random { get; }
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x1DCDF48 Offset: 0x1DCDF48 VA: 0x1DCDF48
	public void .ctor(ICipherParameters parameters, SecureRandom random) { }

	// RVA: 0x1DCE010 Offset: 0x1DCE010 VA: 0x1DCE010
	public void .ctor(ICipherParameters parameters) { }

	[ObsoleteAttribute] // RVA: 0xCC755C Offset: 0xCC755C VA: 0xCC755C
	// RVA: 0x1DCE084 Offset: 0x1DCE084 VA: 0x1DCE084
	public SecureRandom GetRandom() { }

	// RVA: 0x1DCE08C Offset: 0x1DCE08C VA: 0x1DCE08C
	public SecureRandom get_Random() { }

	// RVA: 0x1DCE094 Offset: 0x1DCE094 VA: 0x1DCE094
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithSalt : ICipherParameters // TypeDefIndex: 4854
{
	// Fields
	private byte[] salt; // 0x10
	private ICipherParameters parameters; // 0x18

	// Properties
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x1DCE0E4 Offset: 0x1DCE0E4 VA: 0x1DCE0E4
	public void .ctor(ICipherParameters parameters, byte[] salt) { }

	// RVA: 0x1DCE130 Offset: 0x1DCE130 VA: 0x1DCE130
	public void .ctor(ICipherParameters parameters, byte[] salt, int saltOff, int saltLen) { }

	// RVA: 0x1DCE1D0 Offset: 0x1DCE1D0 VA: 0x1DCE1D0
	public byte[] GetSalt() { }

	// RVA: 0x1DCE1D8 Offset: 0x1DCE1D8 VA: 0x1DCE1D8
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class ParametersWithSBox : ICipherParameters // TypeDefIndex: 4855
{
	// Fields
	private ICipherParameters parameters; // 0x10
	private byte[] sBox; // 0x18

	// Properties
	public ICipherParameters Parameters { get; }

	// Methods

	// RVA: 0x1DCE09C Offset: 0x1DCE09C VA: 0x1DCE09C
	public void .ctor(ICipherParameters parameters, byte[] sBox) { }

	// RVA: 0x1DCE0D4 Offset: 0x1DCE0D4 VA: 0x1DCE0D4
	public byte[] GetSBox() { }

	// RVA: 0x1DCE0DC Offset: 0x1DCE0DC VA: 0x1DCE0DC
	public ICipherParameters get_Parameters() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RC2Parameters : KeyParameter // TypeDefIndex: 4856
{
	// Fields
	private readonly int bits; // 0x18

	// Properties
	public int EffectiveKeyBits { get; }

	// Methods

	// RVA: 0x1DCE1E0 Offset: 0x1DCE1E0 VA: 0x1DCE1E0
	public void .ctor(byte[] key) { }

	// RVA: 0x1DCE26C Offset: 0x1DCE26C VA: 0x1DCE26C
	public void .ctor(byte[] key, int keyOff, int keyLen) { }

	// RVA: 0x1DCE244 Offset: 0x1DCE244 VA: 0x1DCE244
	public void .ctor(byte[] key, int bits) { }

	// RVA: 0x1DCE2D4 Offset: 0x1DCE2D4 VA: 0x1DCE2D4
	public void .ctor(byte[] key, int keyOff, int keyLen, int bits) { }

	// RVA: 0x1DCE2FC Offset: 0x1DCE2FC VA: 0x1DCE2FC
	public int get_EffectiveKeyBits() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RC5Parameters : KeyParameter // TypeDefIndex: 4857
{
	// Fields
	private readonly int rounds; // 0x18

	// Properties
	public int Rounds { get; }

	// Methods

	// RVA: 0x1DCE304 Offset: 0x1DCE304 VA: 0x1DCE304
	public void .ctor(byte[] key, int rounds) { }

	// RVA: 0x1DCE3C0 Offset: 0x1DCE3C0 VA: 0x1DCE3C0
	public int get_Rounds() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaBlindingParameters : ICipherParameters // TypeDefIndex: 4858
{
	// Fields
	private readonly RsaKeyParameters publicKey; // 0x10
	private readonly BigInteger blindingFactor; // 0x18

	// Properties
	public RsaKeyParameters PublicKey { get; }
	public BigInteger BlindingFactor { get; }

	// Methods

	// RVA: 0x1DCE3C8 Offset: 0x1DCE3C8 VA: 0x1DCE3C8
	public void .ctor(RsaKeyParameters publicKey, BigInteger blindingFactor) { }

	// RVA: 0x1DCE488 Offset: 0x1DCE488 VA: 0x1DCE488
	public RsaKeyParameters get_PublicKey() { }

	// RVA: 0x1DCE490 Offset: 0x1DCE490 VA: 0x1DCE490
	public BigInteger get_BlindingFactor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaKeyGenerationParameters : KeyGenerationParameters // TypeDefIndex: 4859
{
	// Fields
	private readonly BigInteger publicExponent; // 0x20
	private readonly int certainty; // 0x28

	// Properties
	public BigInteger PublicExponent { get; }
	public int Certainty { get; }

	// Methods

	// RVA: 0x1DCE498 Offset: 0x1DCE498 VA: 0x1DCE498
	public void .ctor(BigInteger publicExponent, SecureRandom random, int strength, int certainty) { }

	// RVA: 0x1DCE4DC Offset: 0x1DCE4DC VA: 0x1DCE4DC
	public BigInteger get_PublicExponent() { }

	// RVA: 0x1DCE4E4 Offset: 0x1DCE4E4 VA: 0x1DCE4E4
	public int get_Certainty() { }

	// RVA: 0x1DCE4EC Offset: 0x1DCE4EC VA: 0x1DCE4EC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCE5C8 Offset: 0x1DCE5C8 VA: 0x1DCE5C8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaKeyParameters : AsymmetricKeyParameter // TypeDefIndex: 4860
{
	// Fields
	private readonly BigInteger modulus; // 0x18
	private readonly BigInteger exponent; // 0x20

	// Properties
	public BigInteger Modulus { get; }
	public BigInteger Exponent { get; }

	// Methods

	// RVA: 0x1DCE628 Offset: 0x1DCE628 VA: 0x1DCE628
	public void .ctor(bool isPrivate, BigInteger modulus, BigInteger exponent) { }

	// RVA: 0x1DCE784 Offset: 0x1DCE784 VA: 0x1DCE784
	public BigInteger get_Modulus() { }

	// RVA: 0x1DCE78C Offset: 0x1DCE78C VA: 0x1DCE78C
	public BigInteger get_Exponent() { }

	// RVA: 0x1DCE794 Offset: 0x1DCE794 VA: 0x1DCE794 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCE8BC Offset: 0x1DCE8BC VA: 0x1DCE8BC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto.Parameters
public class RsaPrivateCrtKeyParameters : RsaKeyParameters // TypeDefIndex: 4861
{
	// Fields
	private readonly BigInteger e; // 0x28
	private readonly BigInteger p; // 0x30
	private readonly BigInteger q; // 0x38
	private readonly BigInteger dP; // 0x40
	private readonly BigInteger dQ; // 0x48
	private readonly BigInteger qInv; // 0x50

	// Properties
	public BigInteger PublicExponent { get; }
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger DP { get; }
	public BigInteger DQ { get; }
	public BigInteger QInv { get; }

	// Methods

	// RVA: 0x1DCE954 Offset: 0x1DCE954 VA: 0x1DCE954
	public void .ctor(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger p, BigInteger q, BigInteger dP, BigInteger dQ, BigInteger qInv) { }

	// RVA: 0x1DCEBCC Offset: 0x1DCEBCC VA: 0x1DCEBCC
	public BigInteger get_PublicExponent() { }

	// RVA: 0x1DCEBD4 Offset: 0x1DCEBD4 VA: 0x1DCEBD4
	public BigInteger get_P() { }

	// RVA: 0x1DCEBDC Offset: 0x1DCEBDC VA: 0x1DCEBDC
	public BigInteger get_Q() { }

	// RVA: 0x1DCEBE4 Offset: 0x1DCEBE4 VA: 0x1DCEBE4
	public BigInteger get_DP() { }

	// RVA: 0x1DCEBEC Offset: 0x1DCEBEC VA: 0x1DCEBEC
	public BigInteger get_DQ() { }

	// RVA: 0x1DCEBF4 Offset: 0x1DCEBF4 VA: 0x1DCEBF4
	public BigInteger get_QInv() { }

	// RVA: 0x1DCEBFC Offset: 0x1DCEBFC VA: 0x1DCEBFC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1DCEE0C Offset: 0x1DCEE0C VA: 0x1DCEE0C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1DCEAB4 Offset: 0x1DCEAB4 VA: 0x1DCEAB4
	private static void ValidateValue(BigInteger x, string name, string desc) { }
}

// Namespace: Org.BouncyCastle.Crypto
public abstract class PbeParametersGenerator // TypeDefIndex: 4862
{
	// Fields
	protected byte[] mPassword; // 0x10
	protected byte[] mSalt; // 0x18
	protected int mIterationCount; // 0x20

	// Properties
	public virtual byte[] Password { get; }
	public virtual byte[] Salt { get; }
	public virtual int IterationCount { get; }

	// Methods

	// RVA: 0x1DCEF78 Offset: 0x1DCEF78 VA: 0x1DCEF78
	protected void .ctor() { }

	// RVA: 0x1DCEF80 Offset: 0x1DCEF80 VA: 0x1DCEF80 Slot: 4
	public virtual void Init(byte[] password, byte[] salt, int iterationCount) { }

	// RVA: 0x1DCF068 Offset: 0x1DCF068 VA: 0x1DCF068 Slot: 5
	public virtual byte[] get_Password() { }

	[ObsoleteAttribute] // RVA: 0xCC7594 Offset: 0xCC7594 VA: 0xCC7594
	// RVA: 0x1DCF074 Offset: 0x1DCF074 VA: 0x1DCF074
	public byte[] GetPassword() { }

	// RVA: 0x1DCF080 Offset: 0x1DCF080 VA: 0x1DCF080 Slot: 6
	public virtual byte[] get_Salt() { }

	[ObsoleteAttribute] // RVA: 0xCC75CC Offset: 0xCC75CC VA: 0xCC75CC
	// RVA: 0x1DCF08C Offset: 0x1DCF08C VA: 0x1DCF08C
	public byte[] GetSalt() { }

	// RVA: 0x1DCF098 Offset: 0x1DCF098 VA: 0x1DCF098 Slot: 7
	public virtual int get_IterationCount() { }

	[ObsoleteAttribute] // RVA: 0xCC7604 Offset: 0xCC7604 VA: 0xCC7604
	// RVA: -1 Offset: -1 Slot: 8
	public abstract ICipherParameters GenerateDerivedParameters(int keySize);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract ICipherParameters GenerateDerivedParameters(string algorithm, int keySize);

	[ObsoleteAttribute] // RVA: 0xCC763C Offset: 0xCC763C VA: 0xCC763C
	// RVA: -1 Offset: -1 Slot: 10
	public abstract ICipherParameters GenerateDerivedParameters(int keySize, int ivSize);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract ICipherParameters GenerateDerivedParameters(string algorithm, int keySize, int ivSize);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract ICipherParameters GenerateDerivedMacParameters(int keySize);

	// RVA: 0x1DCF0A0 Offset: 0x1DCF0A0 VA: 0x1DCF0A0
	public static byte[] Pkcs5PasswordToBytes(char[] password) { }

	[ObsoleteAttribute] // RVA: 0xCC7674 Offset: 0xCC7674 VA: 0xCC7674
	// RVA: 0x1DCF108 Offset: 0x1DCF108 VA: 0x1DCF108
	public static byte[] Pkcs5PasswordToBytes(string password) { }

	// RVA: 0x1DCF170 Offset: 0x1DCF170 VA: 0x1DCF170
	public static byte[] Pkcs5PasswordToUtf8Bytes(char[] password) { }

	[ObsoleteAttribute] // RVA: 0xCC76AC Offset: 0xCC76AC VA: 0xCC76AC
	// RVA: 0x1DCF214 Offset: 0x1DCF214 VA: 0x1DCF214
	public static byte[] Pkcs5PasswordToUtf8Bytes(string password) { }

	// RVA: 0x1DCF2B8 Offset: 0x1DCF2B8 VA: 0x1DCF2B8
	public static byte[] Pkcs12PasswordToBytes(char[] password) { }

	// RVA: 0x1DCF2C0 Offset: 0x1DCF2C0 VA: 0x1DCF2C0
	public static byte[] Pkcs12PasswordToBytes(char[] password, bool wrongPkcs12Zero) { }
}

// Namespace: Org.BouncyCastle.Crypto.Prng
public class CryptoApiRandomGenerator : IRandomGenerator // TypeDefIndex: 4863
{
	// Fields
	private readonly RandomNumberGenerator rndProv; // 0x10

	// Methods

	// RVA: 0x1DCF3BC Offset: 0x1DCF3BC VA: 0x1DCF3BC
	public void .ctor() { }

	// RVA: 0x1DCF428 Offset: 0x1DCF428 VA: 0x1DCF428
	public void .ctor(RandomNumberGenerator rng) { }

	// RVA: 0x1DCF454 Offset: 0x1DCF454 VA: 0x1DCF454 Slot: 8
	public virtual void AddSeedMaterial(byte[] seed) { }

	// RVA: 0x1DCF458 Offset: 0x1DCF458 VA: 0x1DCF458 Slot: 9
	public virtual void AddSeedMaterial(long seed) { }

	// RVA: 0x1DCF45C Offset: 0x1DCF45C VA: 0x1DCF45C Slot: 10
	public virtual void NextBytes(byte[] bytes) { }

	// RVA: 0x1DCF498 Offset: 0x1DCF498 VA: 0x1DCF498 Slot: 11
	public virtual void NextBytes(byte[] bytes, int start, int len) { }
}

// Namespace: Org.BouncyCastle.Crypto.Prng
public class DigestRandomGenerator : IRandomGenerator // TypeDefIndex: 4864
{
	// Fields
	private const long CYCLE_COUNT = 10;
	private long stateCounter; // 0x10
	private long seedCounter; // 0x18
	private IDigest digest; // 0x20
	private byte[] state; // 0x28
	private byte[] seed; // 0x30

	// Methods

	// RVA: 0x1DCF604 Offset: 0x1DCF604 VA: 0x1DCF604
	public void .ctor(IDigest digest) { }

	// RVA: 0x1DCF788 Offset: 0x1DCF788 VA: 0x1DCF788 Slot: 4
	public void AddSeedMaterial(byte[] inSeed) { }

	// RVA: 0x1DCF9E4 Offset: 0x1DCF9E4 VA: 0x1DCF9E4 Slot: 5
	public void AddSeedMaterial(long rSeed) { }

	// RVA: 0x1DCFB9C Offset: 0x1DCFB9C VA: 0x1DCFB9C Slot: 6
	public void NextBytes(byte[] bytes) { }

	// RVA: 0x1DCFBD8 Offset: 0x1DCFBD8 VA: 0x1DCFBD8 Slot: 7
	public void NextBytes(byte[] bytes, int start, int len) { }

	// RVA: 0x1DCFDEC Offset: 0x1DCFDEC VA: 0x1DCFDEC
	private void CycleSeed() { }

	// RVA: 0x1DCFD68 Offset: 0x1DCFD68 VA: 0x1DCFD68
	private void GenerateState() { }

	// RVA: 0x1DCFA8C Offset: 0x1DCFA8C VA: 0x1DCFA8C
	private void DigestAddCounter(long seedVal) { }

	// RVA: 0x1DCF830 Offset: 0x1DCF830 VA: 0x1DCF830
	private void DigestUpdate(byte[] inSeed) { }

	// RVA: 0x1DCF918 Offset: 0x1DCF918 VA: 0x1DCF918
	private void DigestDoFinal(byte[] result) { }
}

// Namespace: Org.BouncyCastle.Crypto.Prng
public interface IRandomGenerator // TypeDefIndex: 4865
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void AddSeedMaterial(byte[] seed);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void AddSeedMaterial(long seed);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void NextBytes(byte[] bytes);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void NextBytes(byte[] bytes, int start, int len);
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class DsaDigestSigner : ISigner // TypeDefIndex: 4866
{
	// Fields
	private readonly IDigest digest; // 0x10
	private readonly IDsa dsaSigner; // 0x18
	private bool forSigning; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DCFE2C Offset: 0x1DCFE2C VA: 0x1DCFE2C
	public void .ctor(IDsa signer, IDigest digest) { }

	// RVA: 0x1DCFE64 Offset: 0x1DCFE64 VA: 0x1DCFE64 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DCFFD8 Offset: 0x1DCFFD8 VA: 0x1DCFFD8 Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD0234 Offset: 0x1DD0234 VA: 0x1DD0234 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x1DD02FC Offset: 0x1DD02FC VA: 0x1DD02FC Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x1DD03DC Offset: 0x1DD03DC VA: 0x1DD03DC Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DD07CC Offset: 0x1DD07CC VA: 0x1DD07CC Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x1DD0ED4 Offset: 0x1DD0ED4 VA: 0x1DD0ED4 Slot: 17
	public virtual void Reset() { }

	// RVA: 0x1DD0650 Offset: 0x1DD0650 VA: 0x1DD0650
	private byte[] DerEncode(BigInteger r, BigInteger s) { }

	// RVA: 0x1DD0AE4 Offset: 0x1DD0AE4 VA: 0x1DD0AE4
	private BigInteger[] DerDecode(byte[] encoding) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class DsaSigner : IDsa // TypeDefIndex: 4867
{
	// Fields
	protected readonly IDsaKCalculator kCalculator; // 0x10
	protected DsaKeyParameters key; // 0x18
	protected SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD0F8C Offset: 0x1DD0F8C VA: 0x1DD0F8C
	public void .ctor() { }

	// RVA: 0x1DD1000 Offset: 0x1DD1000 VA: 0x1DD1000
	public void .ctor(IDsaKCalculator kCalculator) { }

	// RVA: 0x1DD102C Offset: 0x1DD102C VA: 0x1DD102C Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD1074 Offset: 0x1DD1074 VA: 0x1DD1074 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD12C4 Offset: 0x1DD12C4 VA: 0x1DD12C4 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x1DD180C Offset: 0x1DD180C VA: 0x1DD180C Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }

	// RVA: 0x1DD1BA0 Offset: 0x1DD1BA0 VA: 0x1DD1BA0 Slot: 12
	protected virtual BigInteger CalculateE(BigInteger n, byte[] message) { }

	// RVA: 0x1DD1C74 Offset: 0x1DD1C74 VA: 0x1DD1C74 Slot: 13
	protected virtual SecureRandom InitSecureRandom(bool needed, SecureRandom provided) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class ECDsaSigner : IDsa // TypeDefIndex: 4868
{
	// Fields
	private static readonly BigInteger Eight; // 0x0
	protected readonly IDsaKCalculator kCalculator; // 0x10
	protected ECKeyParameters key; // 0x18
	protected SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD1CF4 Offset: 0x1DD1CF4 VA: 0x1DD1CF4
	public void .ctor() { }

	// RVA: 0x1DD1D60 Offset: 0x1DD1D60 VA: 0x1DD1D60
	public void .ctor(IDsaKCalculator kCalculator) { }

	// RVA: 0x1DD1D8C Offset: 0x1DD1D8C VA: 0x1DD1D8C Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD1DD4 Offset: 0x1DD1DD4 VA: 0x1DD1DD4 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD2028 Offset: 0x1DD2028 VA: 0x1DD2028 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x1DD2664 Offset: 0x1DD2664 VA: 0x1DD2664 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }

	// RVA: 0x1DD2BAC Offset: 0x1DD2BAC VA: 0x1DD2BAC Slot: 12
	protected virtual BigInteger CalculateE(BigInteger n, byte[] message) { }

	// RVA: 0x1DD2C98 Offset: 0x1DD2C98 VA: 0x1DD2C98 Slot: 13
	protected virtual ECMultiplier CreateBasePointMultiplier() { }

	// RVA: 0x1DD2CF4 Offset: 0x1DD2CF4 VA: 0x1DD2CF4 Slot: 14
	protected virtual ECFieldElement GetDenominator(int coordinateSystem, ECPoint p) { }

	// RVA: 0x1DD2DAC Offset: 0x1DD2DAC VA: 0x1DD2DAC Slot: 15
	protected virtual SecureRandom InitSecureRandom(bool needed, SecureRandom provided) { }

	// RVA: 0x1DD2E2C Offset: 0x1DD2E2C VA: 0x1DD2E2C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class ECGost3410Signer : IDsa // TypeDefIndex: 4869
{
	// Fields
	private ECKeyParameters key; // 0x10
	private SecureRandom random; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD2EA8 Offset: 0x1DD2EA8 VA: 0x1DD2EA8
	public void .ctor() { }

	// RVA: 0x1DD2EB0 Offset: 0x1DD2EB0 VA: 0x1DD2EB0 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD2EF8 Offset: 0x1DD2EF8 VA: 0x1DD2EF8 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD308C Offset: 0x1DD308C VA: 0x1DD308C Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x1DD35AC Offset: 0x1DD35AC VA: 0x1DD35AC Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }

	// RVA: 0x1DD3A6C Offset: 0x1DD3A6C VA: 0x1DD3A6C Slot: 12
	protected virtual ECMultiplier CreateBasePointMultiplier() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class ECNRSigner : IDsa // TypeDefIndex: 4870
{
	// Fields
	private bool forSigning; // 0x10
	private ECKeyParameters key; // 0x18
	private SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD3AC8 Offset: 0x1DD3AC8 VA: 0x1DD3AC8
	public void .ctor() { }

	// RVA: 0x1DD3AD0 Offset: 0x1DD3AD0 VA: 0x1DD3AD0 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD3B18 Offset: 0x1DD3B18 VA: 0x1DD3B18 Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD3CB4 Offset: 0x1DD3CB4 VA: 0x1DD3CB4 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x1DD4358 Offset: 0x1DD4358 VA: 0x1DD4358 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class GenericSigner : ISigner // TypeDefIndex: 4871
{
	// Fields
	private readonly IAsymmetricBlockCipher engine; // 0x10
	private readonly IDigest digest; // 0x18
	private bool forSigning; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD470C Offset: 0x1DD470C VA: 0x1DD470C
	public void .ctor(IAsymmetricBlockCipher engine, IDigest digest) { }

	// RVA: 0x1DD4744 Offset: 0x1DD4744 VA: 0x1DD4744 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD4A7C Offset: 0x1DD4A7C VA: 0x1DD4A7C Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD4CD8 Offset: 0x1DD4CD8 VA: 0x1DD4CD8 Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x1DD4DA0 Offset: 0x1DD4DA0 VA: 0x1DD4DA0 Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x1DD4E80 Offset: 0x1DD4E80 VA: 0x1DD4E80 Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DD50C4 Offset: 0x1DD50C4 VA: 0x1DD50C4 Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x1DD541C Offset: 0x1DD541C VA: 0x1DD541C Slot: 17
	public virtual void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class Gost3410DigestSigner : ISigner // TypeDefIndex: 4872
{
	// Fields
	private readonly IDigest digest; // 0x10
	private readonly IDsa dsaSigner; // 0x18
	private bool forSigning; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD54D4 Offset: 0x1DD54D4 VA: 0x1DD54D4
	public void .ctor(IDsa signer, IDigest digest) { }

	// RVA: 0x1DD550C Offset: 0x1DD550C VA: 0x1DD550C Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD5680 Offset: 0x1DD5680 VA: 0x1DD5680 Slot: 12
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD58DC Offset: 0x1DD58DC VA: 0x1DD58DC Slot: 13
	public virtual void Update(byte input) { }

	// RVA: 0x1DD59A4 Offset: 0x1DD59A4 VA: 0x1DD59A4 Slot: 14
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x1DD5A84 Offset: 0x1DD5A84 VA: 0x1DD5A84 Slot: 15
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DD5E90 Offset: 0x1DD5E90 VA: 0x1DD5E90 Slot: 16
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x1DD61D4 Offset: 0x1DD61D4 VA: 0x1DD61D4 Slot: 17
	public virtual void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class Gost3410Signer : IDsa // TypeDefIndex: 4873
{
	// Fields
	private Gost3410KeyParameters key; // 0x10
	private SecureRandom random; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD628C Offset: 0x1DD628C VA: 0x1DD628C
	public void .ctor() { }

	// RVA: 0x1DD6294 Offset: 0x1DD6294 VA: 0x1DD6294 Slot: 8
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD62DC Offset: 0x1DD62DC VA: 0x1DD62DC Slot: 9
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD6470 Offset: 0x1DD6470 VA: 0x1DD6470 Slot: 10
	public virtual BigInteger[] GenerateSignature(byte[] message) { }

	// RVA: 0x1DD6894 Offset: 0x1DD6894 VA: 0x1DD6894 Slot: 11
	public virtual bool VerifySignature(byte[] message, BigInteger r, BigInteger s) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class HMacDsaKCalculator : IDsaKCalculator // TypeDefIndex: 4874
{
	// Fields
	private readonly HMac hMac; // 0x10
	private readonly byte[] K; // 0x18
	private readonly byte[] V; // 0x20
	private BigInteger n; // 0x28

	// Properties
	public virtual bool IsDeterministic { get; }

	// Methods

	// RVA: 0x1DD6D54 Offset: 0x1DD6D54 VA: 0x1DD6D54
	public void .ctor(IDigest digest) { }

	// RVA: 0x1DD6E44 Offset: 0x1DD6E44 VA: 0x1DD6E44 Slot: 8
	public virtual bool get_IsDeterministic() { }

	// RVA: 0x1DD6E4C Offset: 0x1DD6E4C VA: 0x1DD6E4C Slot: 9
	public virtual void Init(BigInteger n, SecureRandom random) { }

	// RVA: 0x1DD6EC0 Offset: 0x1DD6EC0 VA: 0x1DD6EC0 Slot: 6
	public void Init(BigInteger n, BigInteger d, byte[] message) { }

	// RVA: 0x1DD7554 Offset: 0x1DD7554 VA: 0x1DD7554 Slot: 10
	public virtual BigInteger NextK() { }

	// RVA: 0x1DD7458 Offset: 0x1DD7458 VA: 0x1DD7458
	private BigInteger BitsToInt(byte[] t) { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public interface IDsaKCalculator // TypeDefIndex: 4875
{
	// Properties
	public abstract bool IsDeterministic { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_IsDeterministic();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Init(BigInteger n, SecureRandom random);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Init(BigInteger n, BigInteger d, byte[] message);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract BigInteger NextK();
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class Iso9796d2Signer : ISignerWithRecovery, ISigner // TypeDefIndex: 4876
{
	// Fields
	[ObsoleteAttribute] // RVA: 0xC49FFC Offset: 0xC49FFC VA: 0xC49FFC
	public const int TrailerImplicit = 188;
	[ObsoleteAttribute] // RVA: 0xC4A034 Offset: 0xC4A034 VA: 0xC4A034
	public const int TrailerRipeMD160 = 12748;
	[ObsoleteAttribute] // RVA: 0xC4A06C Offset: 0xC4A06C VA: 0xC4A06C
	public const int TrailerRipeMD128 = 13004;
	[ObsoleteAttribute] // RVA: 0xC4A0A4 Offset: 0xC4A0A4 VA: 0xC4A0A4
	public const int TrailerSha1 = 13260;
	[ObsoleteAttribute] // RVA: 0xC4A0DC Offset: 0xC4A0DC VA: 0xC4A0DC
	public const int TrailerSha256 = 13516;
	[ObsoleteAttribute] // RVA: 0xC4A114 Offset: 0xC4A114 VA: 0xC4A114
	public const int TrailerSha512 = 13772;
	[ObsoleteAttribute] // RVA: 0xC4A14C Offset: 0xC4A14C VA: 0xC4A14C
	public const int TrailerSha384 = 14028;
	[ObsoleteAttribute] // RVA: 0xC4A184 Offset: 0xC4A184 VA: 0xC4A184
	public const int TrailerWhirlpool = 14284;
	private IDigest digest; // 0x10
	private IAsymmetricBlockCipher cipher; // 0x18
	private int trailer; // 0x20
	private int keyBits; // 0x24
	private byte[] block; // 0x28
	private byte[] mBuf; // 0x30
	private int messageLength; // 0x38
	private bool fullMessage; // 0x3C
	private byte[] recoveredMessage; // 0x40
	private byte[] preSig; // 0x48
	private byte[] preBlock; // 0x50

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1DD7884 Offset: 0x1DD7884 VA: 0x1DD7884
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest, bool isImplicit) { }

	// RVA: 0x1DD7CE8 Offset: 0x1DD7CE8 VA: 0x1DD7CE8
	public void .ctor(IAsymmetricBlockCipher cipher, IDigest digest) { }

	// RVA: 0x1DD7CF0 Offset: 0x1DD7CF0 VA: 0x1DD7CF0 Slot: 5
	public byte[] GetRecoveredMessage() { }

	// RVA: 0x1DD7CF8 Offset: 0x1DD7CF8 VA: 0x1DD7CF8 Slot: 14
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1DD7DEC Offset: 0x1DD7DEC VA: 0x1DD7DEC Slot: 15
	public virtual void Init(bool forSigning, ICipherParameters parameters) { }

	// RVA: 0x1DD8068 Offset: 0x1DD8068 VA: 0x1DD8068
	private bool IsSameAs(byte[] a, byte[] b) { }

	// RVA: 0x1DD81C0 Offset: 0x1DD81C0 VA: 0x1DD81C0
	private void ClearBlock(byte[] block) { }

	// RVA: 0x1DD81F8 Offset: 0x1DD81F8 VA: 0x1DD81F8 Slot: 16
	public virtual void UpdateWithRecoveredMessage(byte[] signature) { }

	// RVA: 0x1DD87B8 Offset: 0x1DD87B8 VA: 0x1DD87B8 Slot: 17
	public virtual void Update(byte input) { }

	// RVA: 0x1DD88E8 Offset: 0x1DD88E8 VA: 0x1DD88E8 Slot: 18
	public virtual void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x1DD8A64 Offset: 0x1DD8A64 VA: 0x1DD8A64 Slot: 19
	public virtual void Reset() { }

	// RVA: 0x1DD8B58 Offset: 0x1DD8B58 VA: 0x1DD8B58 Slot: 20
	public virtual byte[] GenerateSignature() { }

	// RVA: 0x1DD90A4 Offset: 0x1DD90A4 VA: 0x1DD90A4 Slot: 21
	public virtual bool VerifySignature(byte[] signature) { }

	// RVA: 0x1DD9A04 Offset: 0x1DD9A04 VA: 0x1DD9A04
	private bool ReturnFalse(byte[] block) { }

	// RVA: 0x1DD9A38 Offset: 0x1DD9A38 VA: 0x1DD9A38 Slot: 22
	public virtual bool HasFullMessage() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class IsoTrailers // TypeDefIndex: 4877
{
	// Fields
	public const int TRAILER_IMPLICIT = 188;
	public const int TRAILER_RIPEMD160 = 12748;
	public const int TRAILER_RIPEMD128 = 13004;
	public const int TRAILER_SHA1 = 13260;
	public const int TRAILER_SHA256 = 13516;
	public const int TRAILER_SHA512 = 13772;
	public const int TRAILER_SHA384 = 14028;
	public const int TRAILER_WHIRLPOOL = 14284;
	public const int TRAILER_SHA224 = 14540;
	public const int TRAILER_SHA512_224 = 14796;
	public const int TRAILER_SHA512_256 = 16588;
	private static readonly IDictionary trailerMap; // 0x0

	// Methods

	// RVA: 0x1DD9A40 Offset: 0x1DD9A40 VA: 0x1DD9A40
	public void .ctor() { }

	// RVA: 0x1DD9A48 Offset: 0x1DD9A48 VA: 0x1DD9A48
	private static IDictionary CreateTrailerMap() { }

	// RVA: 0x1DD7B04 Offset: 0x1DD7B04 VA: 0x1DD7B04
	public static int GetTrailer(IDigest digest) { }

	// RVA: 0x1DD799C Offset: 0x1DD799C VA: 0x1DD799C
	public static bool NoTrailerAvailable(IDigest digest) { }

	// RVA: 0x1DDA0FC Offset: 0x1DDA0FC VA: 0x1DDA0FC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Signers
public class PssSigner : ISigner // TypeDefIndex: 4878
{
	// Fields
	public const byte TrailerImplicit = 188;
	private readonly IDigest contentDigest1; // 0x10
	private readonly IDigest contentDigest2; // 0x18
	private readonly IDigest mgfDigest; // 0x20
	private readonly IAsymmetricBlockCipher cipher; // 0x28
	private SecureRandom random; // 0x30
	private int hLen; // 0x38
	private int mgfhLen; // 0x3C
	private int sLen; // 0x40
	private bool sSet; // 0x44
	private int emBits; // 0x48
	private byte[] salt; // 0x50
	private byte[] mDash; // 0x58
	private byte[] block; // 0x60
	private byte trailer; // 0x68

	// Properties
	public virtual string AlgorithmName { get; }
