	public virtual int Next(int minValue, int maxValue) { }

	// RVA: 0x107D124 Offset: 0x107D124 VA: 0x107D124 Slot: 8
	public virtual void NextBytes(byte[] buffer) { }

	// RVA: 0x107D214 Offset: 0x107D214 VA: 0x107D214 Slot: 9
	public virtual double NextDouble() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC370E0 Offset: 0xC370E0 VA: 0xC370E0
[Serializable]
public class RankException : SystemException // TypeDefIndex: 1037
{
	// Methods

	// RVA: 0x107D220 Offset: 0x107D220 VA: 0x107D220
	public void .ctor() { }

	// RVA: 0x107D294 Offset: 0x107D294 VA: 0x107D294
	public void .ctor(string message) { }

	// RVA: 0x107D2C8 Offset: 0x107D2C8 VA: 0x107D2C8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC370F4 Offset: 0xC370F4 VA: 0xC370F4
public class ResolveEventArgs : EventArgs // TypeDefIndex: 1038
{
	// Fields
	private string m_Name; // 0x10

	// Methods

	// RVA: 0xF24390 Offset: 0xF24390 VA: 0xF24390
	public void .ctor(string name) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37108 Offset: 0xC37108 VA: 0xC37108
[MonoTODOAttribute] // RVA: 0xC37108 Offset: 0xC37108 VA: 0xC37108
[Serializable]
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 1039
{
	// Fields
	private IntPtr value; // 0x0

	// Properties
	public IntPtr Value { get; }

	// Methods

	// RVA: 0xBBB908 Offset: 0xBBB908 VA: 0xBBB908
	internal void .ctor(IntPtr v) { }

	// RVA: 0xBBB910 Offset: 0xBBB910 VA: 0xBBB910
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xBBB918 Offset: 0xBBB918 VA: 0xBBB918
	public IntPtr get_Value() { }

	// RVA: 0xBBB920 Offset: 0xBBB920 VA: 0xBBB920 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ReliabilityContractAttribute] // RVA: 0xC3AEF4 Offset: 0xC3AEF4 VA: 0xC3AEF4
	// RVA: 0xBBB928 Offset: 0xBBB928 VA: 0xBBB928 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0xBBB930 Offset: 0xBBB930 VA: 0xBBB930 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37158 Offset: 0xC37158 VA: 0xC37158
[Serializable]
public sealed class StackOverflowException : SystemException // TypeDefIndex: 1040
{
	// Methods

	// RVA: 0xEFF764 Offset: 0xEFF764 VA: 0xEFF764
	public void .ctor() { }

	// RVA: 0xEFF7C4 Offset: 0xEFF7C4 VA: 0xEFF7C4
	public void .ctor(string message) { }

	// RVA: 0xEFF7CC Offset: 0xEFF7CC VA: 0xEFF7CC
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC3716C Offset: 0xC3716C VA: 0xC3716C
[Serializable]
public abstract class StringComparer : IComparer<string>, IEqualityComparer<string>, IComparer, IEqualityComparer // TypeDefIndex: 1041
{
	// Fields
	private static StringComparer invariantCultureIgnoreCase; // 0x0
	private static StringComparer invariantCulture; // 0x8
	private static StringComparer ordinalIgnoreCase; // 0x10
	private static StringComparer ordinal; // 0x18

	// Properties
	public static StringComparer InvariantCultureIgnoreCase { get; }
	public static StringComparer OrdinalIgnoreCase { get; }

	// Methods

	// RVA: 0x12B60F4 Offset: 0x12B60F4 VA: 0x12B60F4
	protected void .ctor() { }

	// RVA: 0x12B60FC Offset: 0x12B60FC VA: 0x12B60FC
	private static void .cctor() { }

	// RVA: 0x12B6230 Offset: 0x12B6230 VA: 0x12B6230
	public static StringComparer get_InvariantCultureIgnoreCase() { }

	// RVA: 0x12B6298 Offset: 0x12B6298 VA: 0x12B6298
	public static StringComparer get_OrdinalIgnoreCase() { }

	// RVA: 0x12B6300 Offset: 0x12B6300 VA: 0x12B6300 Slot: 7
	public int Compare(object x, object y) { }

	// RVA: 0x12B6480 Offset: 0x12B6480 VA: 0x12B6480 Slot: 8
	public bool Equals(object x, object y) { }

	// RVA: 0x12B6550 Offset: 0x12B6550 VA: 0x12B6550 Slot: 9
	public int GetHashCode(object obj) { }

	// RVA: -1 Offset: -1 Slot: 10
	public abstract int Compare(string x, string y);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool Equals(string x, string y);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract int GetHashCode(string obj);
}

// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 1042
{
	// Fields
	private readonly bool _ignoreCase; // 0x10
	private readonly CompareInfo _compareInfo; // 0x18

	// Methods

	// RVA: 0x1230A48 Offset: 0x1230A48 VA: 0x1230A48
	public void .ctor(CultureInfo ci, bool ignore_case) { }

	// RVA: 0x1230AEC Offset: 0x1230AEC VA: 0x1230AEC Slot: 10
	public override int Compare(string x, string y) { }

	// RVA: 0x1230B40 Offset: 0x1230B40 VA: 0x1230B40 Slot: 11
	public override bool Equals(string x, string y) { }

	// RVA: 0x1230B5C Offset: 0x1230B5C VA: 0x1230B5C Slot: 12
	public override int GetHashCode(string s) { }
}

// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 1043
{
	// Fields
	private readonly bool _ignoreCase; // 0x10

	// Methods

	// RVA: 0x107C68C Offset: 0x107C68C VA: 0x107C68C
	public void .ctor(bool ignoreCase) { }

	// RVA: 0x107C70C Offset: 0x107C70C VA: 0x107C70C Slot: 10
	public override int Compare(string x, string y) { }

	// RVA: 0x107C7DC Offset: 0x107C7DC VA: 0x107C7DC Slot: 11
	public override bool Equals(string x, string y) { }

	// RVA: 0x107C888 Offset: 0x107C888 VA: 0x107C888 Slot: 12
	public override int GetHashCode(string s) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37180 Offset: 0xC37180 VA: 0xC37180
[Serializable]
public enum StringComparison // TypeDefIndex: 1044
{
	// Fields
	public int value__; // 0x0
	public const StringComparison CurrentCulture = 0;
	public const StringComparison CurrentCultureIgnoreCase = 1;
	public const StringComparison InvariantCulture = 2;
	public const StringComparison InvariantCultureIgnoreCase = 3;
	public const StringComparison Ordinal = 4;
	public const StringComparison OrdinalIgnoreCase = 5;
}

// Namespace: System
[FlagsAttribute] // RVA: 0xC37194 Offset: 0xC37194 VA: 0xC37194
[ComVisibleAttribute] // RVA: 0xC37194 Offset: 0xC37194 VA: 0xC37194
public enum StringSplitOptions // TypeDefIndex: 1045
{
	// Fields
	public int value__; // 0x0
	public const StringSplitOptions None = 0;
	public const StringSplitOptions RemoveEmptyEntries = 1;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC371D0 Offset: 0xC371D0 VA: 0xC371D0
[Serializable]
public class SystemException : Exception // TypeDefIndex: 1046
{
	// Methods

	// RVA: 0x12B6624 Offset: 0x12B6624 VA: 0x12B6624
	public void .ctor() { }

	// RVA: 0x12B6698 Offset: 0x12B6698 VA: 0x12B6698
	public void .ctor(string message) { }

	// RVA: 0x12B66CC Offset: 0x12B66CC VA: 0x12B66CC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x12B66D4 Offset: 0x12B66D4 VA: 0x12B66D4
	public void .ctor(string message, Exception innerException) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC371E4 Offset: 0xC371E4 VA: 0xC371E4
[ComVisibleAttribute] // RVA: 0xC371E4 Offset: 0xC371E4 VA: 0xC371E4
[Serializable]
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 1047
{
	// Methods

	// RVA: 0x12C9228 Offset: 0x12C9228 VA: 0x12C9228
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37238 Offset: 0xC37238 VA: 0xC37238
[Serializable]
public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan> // TypeDefIndex: 1048
{
	// Fields
	public const long TicksPerDay = 864000000000;
	public const long TicksPerHour = 36000000000;
	public const long TicksPerMillisecond = 10000;
	public const long TicksPerMinute = 600000000;
	public const long TicksPerSecond = 10000000;
	public static readonly TimeSpan MaxValue; // 0x0
	public static readonly TimeSpan MinValue; // 0x8
	public static readonly TimeSpan Zero; // 0x10
	private long _ticks; // 0x0

	// Properties
	public int Days { get; }
	public int Hours { get; }
	public int Milliseconds { get; }
	public int Minutes { get; }
	public int Seconds { get; }
	public long Ticks { get; }
	public double TotalDays { get; }
	public double TotalHours { get; }
	public double TotalMilliseconds { get; }
	public double TotalMinutes { get; }
	public double TotalSeconds { get; }

	// Methods

	// RVA: 0xBC0604 Offset: 0xBC0604 VA: 0xBC0604
	public void .ctor(long ticks) { }

	// RVA: 0xBC060C Offset: 0xBC060C VA: 0xBC060C
	public void .ctor(int hours, int minutes, int seconds) { }

	// RVA: 0xBC0614 Offset: 0xBC0614 VA: 0xBC0614
	public void .ctor(int days, int hours, int minutes, int seconds) { }

	// RVA: 0xBC061C Offset: 0xBC061C VA: 0xBC061C
	public void .ctor(int days, int hours, int minutes, int seconds, int milliseconds) { }

	// RVA: 0x12FA378 Offset: 0x12FA378 VA: 0x12FA378
	private static void .cctor() { }

	// RVA: 0x12FA0F8 Offset: 0x12FA0F8 VA: 0x12FA0F8
	internal static long CalculateTicks(int days, int hours, int minutes, int seconds, int milliseconds) { }

	// RVA: 0xBC0624 Offset: 0xBC0624 VA: 0xBC0624
	public int get_Days() { }

	// RVA: 0xBC0650 Offset: 0xBC0650 VA: 0xBC0650
	public int get_Hours() { }

	// RVA: 0xBC06A8 Offset: 0xBC06A8 VA: 0xBC06A8
	public int get_Milliseconds() { }

	// RVA: 0xBC06FC Offset: 0xBC06FC VA: 0xBC06FC
	public int get_Minutes() { }

	// RVA: 0xBC0750 Offset: 0xBC0750 VA: 0xBC0750
	public int get_Seconds() { }

	// RVA: 0xBC07A4 Offset: 0xBC07A4 VA: 0xBC07A4
	public long get_Ticks() { }

	// RVA: 0xBC07AC Offset: 0xBC07AC VA: 0xBC07AC
	public double get_TotalDays() { }

	// RVA: 0xBC07C4 Offset: 0xBC07C4 VA: 0xBC07C4
	public double get_TotalHours() { }

	// RVA: 0xBC07DC Offset: 0xBC07DC VA: 0xBC07DC
	public double get_TotalMilliseconds() { }

	// RVA: 0xBC07F4 Offset: 0xBC07F4 VA: 0xBC07F4
	public double get_TotalMinutes() { }

	// RVA: 0xBC080C Offset: 0xBC080C VA: 0xBC080C
	public double get_TotalSeconds() { }

	// RVA: 0xBC0824 Offset: 0xBC0824 VA: 0xBC0824
	public TimeSpan Add(TimeSpan ts) { }

	// RVA: 0x12FA7A0 Offset: 0x12FA7A0 VA: 0x12FA7A0
	public static int Compare(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0xBC082C Offset: 0xBC082C VA: 0xBC082C Slot: 4
	public int CompareTo(object value) { }

	// RVA: 0xBC0834 Offset: 0xBC0834 VA: 0xBC0834 Slot: 5
	public int CompareTo(TimeSpan value) { }

	// RVA: 0xBC083C Offset: 0xBC083C VA: 0xBC083C Slot: 6
	public bool Equals(TimeSpan obj) { }

	// RVA: 0xBC084C Offset: 0xBC084C VA: 0xBC084C
	public TimeSpan Duration() { }

	// RVA: 0xBC0898 Offset: 0xBC0898 VA: 0xBC0898 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x12FAA2C Offset: 0x12FAA2C VA: 0x12FAA2C
	public static TimeSpan FromDays(double value) { }

	// RVA: 0x12FADD0 Offset: 0x12FADD0 VA: 0x12FADD0
	public static TimeSpan FromHours(double value) { }

	// RVA: 0x12FAE48 Offset: 0x12FAE48 VA: 0x12FAE48
	public static TimeSpan FromMinutes(double value) { }

	// RVA: 0x12FAEBC Offset: 0x12FAEBC VA: 0x12FAEBC
	public static TimeSpan FromSeconds(double value) { }

	// RVA: 0x12FAF30 Offset: 0x12FAF30 VA: 0x12FAF30
	public static TimeSpan FromMilliseconds(double value) { }

	// RVA: 0x12FAAA4 Offset: 0x12FAAA4 VA: 0x12FAAA4
	private static TimeSpan From(double value, long tickMultiplicator) { }

	// RVA: 0x12FAFA0 Offset: 0x12FAFA0 VA: 0x12FAFA0
	public static TimeSpan FromTicks(long value) { }

	// RVA: 0xBC08A0 Offset: 0xBC08A0 VA: 0xBC08A0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC08AC Offset: 0xBC08AC VA: 0xBC08AC
	public TimeSpan Negate() { }

	// RVA: 0x12FB08C Offset: 0x12FB08C VA: 0x12FB08C
	public static TimeSpan Parse(string s) { }

	// RVA: 0xBC08B4 Offset: 0xBC08B4 VA: 0xBC08B4
	public TimeSpan Subtract(TimeSpan ts) { }

	// RVA: 0xBC08BC Offset: 0xBC08BC VA: 0xBC08BC Slot: 3
	public override string ToString() { }

	// RVA: 0x12FB894 Offset: 0x12FB894 VA: 0x12FB894
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB8B8 Offset: 0x12FB8B8 VA: 0x12FB8B8
	public static bool op_Equality(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB8C4 Offset: 0x12FB8C4 VA: 0x12FB8C4
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB8D0 Offset: 0x12FB8D0 VA: 0x12FB8D0
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB8DC Offset: 0x12FB8DC VA: 0x12FB8DC
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB8E8 Offset: 0x12FB8E8 VA: 0x12FB8E8
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB8F4 Offset: 0x12FB8F4 VA: 0x12FB8F4
	public static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2) { }

	// RVA: 0x12FB900 Offset: 0x12FB900 VA: 0x12FB900
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2) { }
}

// Namespace: 
private class TimeSpan.Parser // TypeDefIndex: 1049
{
	// Fields
	private string _src; // 0x10
	private int _cur; // 0x18
	private int _length; // 0x1C
	private bool formatError; // 0x20

	// Properties
	public bool AtEnd { get; }

	// Methods

	// RVA: 0x12FB140 Offset: 0x12FB140 VA: 0x12FB140
	public void .ctor(string src) { }

	// RVA: 0x12FB924 Offset: 0x12FB924 VA: 0x12FB924
	public bool get_AtEnd() { }

	// RVA: 0x12FB934 Offset: 0x12FB934 VA: 0x12FB934
	private void ParseWhiteSpace() { }

	// RVA: 0x12FB9D4 Offset: 0x12FB9D4 VA: 0x12FB9D4
	private bool ParseSign() { }

	// RVA: 0x12FBA48 Offset: 0x12FBA48 VA: 0x12FBA48
	private int ParseInt(bool optional) { }

	// RVA: 0x12FBBC4 Offset: 0x12FBBC4 VA: 0x12FBBC4
	private bool ParseOptDot() { }

	// RVA: 0x12FBC38 Offset: 0x12FBC38 VA: 0x12FBC38
	private void ParseOptColon() { }

	// RVA: 0x12FBCAC Offset: 0x12FBCAC VA: 0x12FBCAC
	private long ParseTicks() { }

	// RVA: 0x12FB188 Offset: 0x12FB188 VA: 0x12FB188
	public TimeSpan Execute() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC3724C Offset: 0xC3724C VA: 0xC3724C
[Serializable]
public abstract class TimeZone // TypeDefIndex: 1050
{
	// Fields
	private static TimeZone currentTimeZone; // 0x0
	private static object tz_lock; // 0x8
	private static long timezone_check; // 0x10

	// Properties
	public static TimeZone CurrentTimeZone { get; }

	// Methods

	// RVA: 0x12FBDCC Offset: 0x12FBDCC VA: 0x12FBDCC
	protected void .ctor() { }

	// RVA: 0x12FBDD4 Offset: 0x12FBDD4 VA: 0x12FBDD4
	private static void .cctor() { }

	// RVA: 0x12FBE40 Offset: 0x12FBE40 VA: 0x12FBE40
	public static TimeZone get_CurrentTimeZone() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract DaylightTime GetDaylightChanges(int year);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract TimeSpan GetUtcOffset(DateTime time);

	// RVA: 0x12FC018 Offset: 0x12FC018 VA: 0x12FC018 Slot: 6
	public virtual bool IsDaylightSavingTime(DateTime time) { }

	// RVA: 0x12FC0D0 Offset: 0x12FC0D0 VA: 0x12FC0D0
	public static bool IsDaylightSavingTime(DateTime time, DaylightTime daylightTimes) { }

	// RVA: 0x12FC35C Offset: 0x12FC35C VA: 0x12FC35C Slot: 7
	public virtual DateTime ToLocalTime(DateTime time) { }

	// RVA: 0x12FC6E0 Offset: 0x12FC6E0 VA: 0x12FC6E0 Slot: 8
	public virtual DateTime ToUniversalTime(DateTime time) { }

	// RVA: 0x12FC8A8 Offset: 0x12FC8A8 VA: 0x12FC8A8
	internal TimeSpan GetLocalTimeDiff(DateTime time) { }

	// RVA: 0x12FC8F0 Offset: 0x12FC8F0 VA: 0x12FC8F0
	internal TimeSpan GetLocalTimeDiff(DateTime time, TimeSpan utc_offset) { }
}

// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone, IDeserializationCallback // TypeDefIndex: 1051
{
	// Fields
	private string m_standardName; // 0x10
	private string m_daylightName; // 0x18
	private Hashtable m_CachedDaylightChanges; // 0x20
	private long m_ticksOffset; // 0x28
	private TimeSpan utcOffsetWithOutDLS; // 0x30
	private TimeSpan utcOffsetWithDLS; // 0x38
	private static int this_year; // 0x0
	private static DaylightTime this_year_dlt; // 0x8

	// Methods

	// RVA: 0x1230C34 Offset: 0x1230C34 VA: 0x1230C34
	internal void .ctor() { }

	// RVA: 0x1230CC0 Offset: 0x1230CC0 VA: 0x1230CC0
	internal void .ctor(long lnow) { }

	// RVA: 0x1231514 Offset: 0x1231514 VA: 0x1231514 Slot: 9
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x12311D4 Offset: 0x12311D4 VA: 0x12311D4
	private static bool GetTimeZoneData(int year, out long[] data, out string[] names) { }

	// RVA: 0x123151C Offset: 0x123151C VA: 0x123151C Slot: 4
	public override DaylightTime GetDaylightChanges(int year) { }

	// RVA: 0x12318C0 Offset: 0x12318C0 VA: 0x12318C0 Slot: 5
	public override TimeSpan GetUtcOffset(DateTime time) { }

	// RVA: 0x12312DC Offset: 0x12312DC VA: 0x12312DC
	private void OnDeserialization(DaylightTime dlt) { }

	// RVA: 0x12311D8 Offset: 0x12311D8 VA: 0x12311D8
	private DaylightTime GetDaylightTimeFromData(long[] data) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37260 Offset: 0xC37260 VA: 0xC37260
[Serializable]
public class TimeoutException : SystemException // TypeDefIndex: 1052
{
	// Methods

	// RVA: 0x12FCBF8 Offset: 0x12FCBF8 VA: 0x12FCBF8
	public void .ctor() { }

	// RVA: 0x12FCC6C Offset: 0x12FCC6C VA: 0x12FCC6C
	public void .ctor(string message) { }

	// RVA: 0x12FCCA0 Offset: 0x12FCCA0 VA: 0x12FCCA0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37274 Offset: 0xC37274 VA: 0xC37274
[Serializable]
public enum TypeCode // TypeDefIndex: 1053
{
	// Fields
	public int value__; // 0x0
	public const TypeCode Empty = 0;
	public const TypeCode Object = 1;
	public const TypeCode DBNull = 2;
	public const TypeCode Boolean = 3;
	public const TypeCode Char = 4;
	public const TypeCode SByte = 5;
	public const TypeCode Byte = 6;
	public const TypeCode Int16 = 7;
	public const TypeCode UInt16 = 8;
	public const TypeCode Int32 = 9;
	public const TypeCode UInt32 = 10;
	public const TypeCode Int64 = 11;
	public const TypeCode UInt64 = 12;
	public const TypeCode Single = 13;
	public const TypeCode Double = 14;
	public const TypeCode Decimal = 15;
	public const TypeCode DateTime = 16;
	public const TypeCode String = 18;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37288 Offset: 0xC37288 VA: 0xC37288
[Serializable]
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 1054
{
	// Fields
	private string type_name; // 0x60

	// Methods

	// RVA: 0x12FF42C Offset: 0x12FF42C VA: 0x12FF42C
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x12FF4C8 Offset: 0x12FF4C8 VA: 0x12FF4C8 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC3729C Offset: 0xC3729C VA: 0xC3729C
[Serializable]
public class TypeLoadException : SystemException // TypeDefIndex: 1055
{
	// Fields
	private const int Result = -2146233054;
	private string className; // 0x60
	private string assemblyName; // 0x68

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x12FF064 Offset: 0x12FF064 VA: 0x12FF064
	public void .ctor() { }

	// RVA: 0x12FDC94 Offset: 0x12FDC94 VA: 0x12FDC94
	public void .ctor(string message) { }

	// RVA: 0x12FF564 Offset: 0x12FF564 VA: 0x12FF564
	internal void .ctor(string className, string assemblyName) { }

	// RVA: 0x12FF598 Offset: 0x12FF598 VA: 0x12FF598
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x12FF68C Offset: 0x12FF68C VA: 0x12FF68C Slot: 6
	public override string get_Message() { }

	// RVA: 0x12FF7B4 Offset: 0x12FF7B4 VA: 0x12FF7B4 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC372B0 Offset: 0xC372B0 VA: 0xC372B0
[Serializable]
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 1056
{
	// Methods

	// RVA: 0x1303764 Offset: 0x1303764 VA: 0x1303764
	public void .ctor() { }

	// RVA: 0x13037D8 Offset: 0x13037D8 VA: 0x13037D8
	public void .ctor(string message) { }

	// RVA: 0x130380C Offset: 0x130380C VA: 0x130380C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC372C4 Offset: 0xC372C4 VA: 0xC372C4
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 1057
{
	// Fields
	private object exception; // 0x10
	private bool m_isTerminating; // 0x18

	// Properties
	public object ExceptionObject { get; }
	public bool IsTerminating { get; }

	// Methods

	// RVA: 0x1303814 Offset: 0x1303814 VA: 0x1303814
	public void .ctor(object exception, bool isTerminating) { }

	[ReliabilityContractAttribute] // RVA: 0xC3AF0C Offset: 0xC3AF0C VA: 0xC3AF0C
	// RVA: 0x130389C Offset: 0x130389C VA: 0x130389C
	public object get_ExceptionObject() { }

	[ReliabilityContractAttribute] // RVA: 0xC3AF24 Offset: 0xC3AF24 VA: 0xC3AF24
	// RVA: 0x13038A4 Offset: 0x13038A4 VA: 0x13038A4
	public bool get_IsTerminating() { }
}

// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 1058
{
	// Fields
	private string _data; // 0x10
	private UnitySerializationHolder.UnityType _unityType; // 0x18
	private string _assemblyName; // 0x20

	// Methods

	// RVA: 0x1303CB8 Offset: 0x1303CB8 VA: 0x1303CB8
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x1303DA4 Offset: 0x1303DA4 VA: 0x1303DA4
	public static void GetTypeData(Type instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x1303F2C Offset: 0x1303F2C VA: 0x1303F2C
	public static void GetDBNullData(DBNull instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x13040B4 Offset: 0x13040B4 VA: 0x13040B4
	public static void GetModuleData(Module instance, SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x1304238 Offset: 0x1304238 VA: 0x1304238 Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x13042A0 Offset: 0x13042A0 VA: 0x13042A0 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
}

// Namespace: 
private enum UnitySerializationHolder.UnityType // TypeDefIndex: 1059
{
	// Fields
	public byte value__; // 0x0
	public const UnitySerializationHolder.UnityType DBNull = 2;
	public const UnitySerializationHolder.UnityType Type = 4;
	public const UnitySerializationHolder.UnityType Module = 5;
	public const UnitySerializationHolder.UnityType Assembly = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC372D8 Offset: 0xC372D8 VA: 0xC372D8
[Serializable]
public sealed class Version : IComparable, ICloneable, IComparable<Version>, IEquatable<Version> // TypeDefIndex: 1060
{
	// Fields
	private const int UNDEFINED = -1;
	private int _Major; // 0x10
	private int _Minor; // 0x14
	private int _Build; // 0x18
	private int _Revision; // 0x1C

	// Properties
	public int Build { get; }
	public int Major { get; }
	public int Minor { get; }
	public int Revision { get; }

	// Methods

	// RVA: 0x130465C Offset: 0x130465C VA: 0x130465C
	public void .ctor() { }

	// RVA: 0x13047F8 Offset: 0x13047F8 VA: 0x13047F8
	public void .ctor(string version) { }

	// RVA: 0x1304A20 Offset: 0x1304A20 VA: 0x1304A20
	public void .ctor(int major, int minor) { }

	// RVA: 0x1304A6C Offset: 0x1304A6C VA: 0x1304A6C
	public void .ctor(int major, int minor, int build) { }

	// RVA: 0x1304ABC Offset: 0x1304ABC VA: 0x1304ABC
	public void .ctor(int major, int minor, int build, int revision) { }

	// RVA: 0x13046B0 Offset: 0x13046B0 VA: 0x13046B0
	private void CheckedSet(int defined, int major, int minor, int build, int revision) { }

	// RVA: 0x1304B18 Offset: 0x1304B18 VA: 0x1304B18
	public int get_Build() { }

	// RVA: 0x1304B20 Offset: 0x1304B20 VA: 0x1304B20
	public int get_Major() { }

	// RVA: 0x1304B28 Offset: 0x1304B28 VA: 0x1304B28
	public int get_Minor() { }

	// RVA: 0x1304B30 Offset: 0x1304B30 VA: 0x1304B30
	public int get_Revision() { }

	// RVA: 0x1304B38 Offset: 0x1304B38 VA: 0x1304B38 Slot: 5
	public object Clone() { }

	// RVA: 0x1304C34 Offset: 0x1304C34 VA: 0x1304C34 Slot: 4
	public int CompareTo(object version) { }

	// RVA: 0x1304DB8 Offset: 0x1304DB8 VA: 0x1304DB8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1304D08 Offset: 0x1304D08 VA: 0x1304D08 Slot: 6
	public int CompareTo(Version value) { }

	// RVA: 0x1304E2C Offset: 0x1304E2C VA: 0x1304E2C Slot: 7
	public bool Equals(Version obj) { }

	// RVA: 0x1304EDC Offset: 0x1304EDC VA: 0x1304EDC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1304EF8 Offset: 0x1304EF8 VA: 0x1304EF8 Slot: 3
	public override string ToString() { }

	// RVA: 0x1305060 Offset: 0x1305060 VA: 0x1305060
	internal static Version CreateFromString(string info) { }

	// RVA: 0x1304EB4 Offset: 0x1304EB4 VA: 0x1304EB4
	public static bool op_Equality(Version v1, Version v2) { }

	// RVA: 0x1304EBC Offset: 0x1304EBC VA: 0x1304EBC
	public static bool op_Inequality(Version v1, Version v2) { }

	// RVA: 0x13052CC Offset: 0x13052CC VA: 0x13052CC
	public static bool op_GreaterThan(Version v1, Version v2) { }

	// RVA: 0x1305308 Offset: 0x1305308 VA: 0x1305308
	public static bool op_GreaterThanOrEqual(Version v1, Version v2) { }

	// RVA: 0x1305344 Offset: 0x1305344 VA: 0x1305344
	public static bool op_LessThan(Version v1, Version v2) { }

	// RVA: 0x130537C Offset: 0x130537C VA: 0x130537C
	public static bool op_LessThanOrEqual(Version v1, Version v2) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC372EC Offset: 0xC372EC VA: 0xC372EC
[Serializable]
public class WeakReference : ISerializable // TypeDefIndex: 1061
{
	// Fields
	private bool isLongReference; // 0x10
	private GCHandle gcHandle; // 0x14

	// Properties
	public virtual bool IsAlive { get; }
	public virtual object Target { get; }
	public virtual bool TrackResurrection { get; }

	// Methods

	// RVA: 0x13053B8 Offset: 0x13053B8 VA: 0x13053B8
	protected void .ctor() { }

	// RVA: 0x13053C0 Offset: 0x13053C0 VA: 0x13053C0
	public void .ctor(object target) { }

	// RVA: 0x1305400 Offset: 0x1305400 VA: 0x1305400
	public void .ctor(object target, bool trackResurrection) { }

	// RVA: 0x1305480 Offset: 0x1305480 VA: 0x1305480
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x130544C Offset: 0x130544C VA: 0x130544C
	private void AllocateHandle(object target) { }

	// RVA: 0x13055A0 Offset: 0x13055A0 VA: 0x13055A0 Slot: 5
	public virtual bool get_IsAlive() { }

	// RVA: 0x13055C4 Offset: 0x13055C4 VA: 0x13055C4 Slot: 6
	public virtual object get_Target() { }

	// RVA: 0x13055D0 Offset: 0x13055D0 VA: 0x13055D0 Slot: 7
	public virtual bool get_TrackResurrection() { }

	// RVA: 0x13055D8 Offset: 0x13055D8 VA: 0x13055D8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1305654 Offset: 0x1305654 VA: 0x1305654 Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTest : MulticastDelegate // TypeDefIndex: 1062
{
	// Methods

	// RVA: 0x128B9B4 Offset: 0x128B9B4 VA: 0x128B9B4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x128BDA0 Offset: 0x128BDA0 VA: 0x128BDA0 Slot: 11
	public virtual bool Invoke(BigInteger bi, ConfidenceFactor confidence) { }

	// RVA: 0x128C16C Offset: 0x128C16C VA: 0x128C16C Slot: 12
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, object object) { }

	// RVA: 0x128C208 Offset: 0x128C208 VA: 0x128C208 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC37300 Offset: 0xC37300 VA: 0xC37300
[Serializable]
public sealed class MemberFilter : MulticastDelegate // TypeDefIndex: 1063
{
	// Methods

	// RVA: 0x11117D4 Offset: 0x11117D4 VA: 0x11117D4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x11117E4 Offset: 0x11117E4 VA: 0x11117E4 Slot: 11
	public virtual bool Invoke(MemberInfo m, object filterCriteria) { }

	// RVA: 0x1111BA8 Offset: 0x1111BA8 VA: 0x1111BA8 Slot: 12
	public virtual IAsyncResult BeginInvoke(MemberInfo m, object filterCriteria, AsyncCallback callback, object object) { }

	// RVA: 0x1111BD8 Offset: 0x1111BD8 VA: 0x1111BD8 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC37314 Offset: 0xC37314 VA: 0xC37314
[Serializable]
public sealed class ModuleResolveEventHandler : MulticastDelegate // TypeDefIndex: 1064
{
	// Methods

	// RVA: 0x11133B8 Offset: 0x11133B8 VA: 0x11133B8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x11133C8 Offset: 0x11133C8 VA: 0x11133C8 Slot: 11
	public virtual Module Invoke(object sender, ResolveEventArgs e) { }

	// RVA: 0x111378C Offset: 0x111378C VA: 0x111378C Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, ResolveEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x11137BC Offset: 0x11137BC VA: 0x11137BC Slot: 13
	public virtual Module EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC37328 Offset: 0xC37328 VA: 0xC37328
[Serializable]
public sealed class TypeFilter : MulticastDelegate // TypeDefIndex: 1065
{
	// Methods

	// RVA: 0xF23F50 Offset: 0xF23F50 VA: 0xF23F50
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF23F60 Offset: 0xF23F60 VA: 0xF23F60 Slot: 11
	public virtual bool Invoke(Type m, object filterCriteria) { }

	// RVA: 0xF24324 Offset: 0xF24324 VA: 0xF24324 Slot: 12
	public virtual IAsyncResult BeginInvoke(Type m, object filterCriteria, AsyncCallback callback, object object) { }

	// RVA: 0xF24354 Offset: 0xF24354 VA: 0xF24354 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xC3733C Offset: 0xC3733C VA: 0xC3733C
public sealed class CrossContextDelegate : MulticastDelegate // TypeDefIndex: 1066
{
	// Methods

	// RVA: 0xF3C320 Offset: 0xF3C320 VA: 0xF3C320
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF3C330 Offset: 0xF3C330 VA: 0xF3C330 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0xF3C530 Offset: 0xF3C530 VA: 0xF3C530 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xF3C564 Offset: 0xF3C564 VA: 0xF3C564 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[ComVisibleAttribute] // RVA: 0xC37350 Offset: 0xC37350 VA: 0xC37350
public sealed class HeaderHandler : MulticastDelegate // TypeDefIndex: 1067
{
	// Methods

	// RVA: 0xEA044C Offset: 0xEA044C VA: 0xEA044C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEA045C Offset: 0xEA045C VA: 0xEA045C Slot: 11
	public virtual object Invoke(Header[] headers) { }

	// RVA: 0xEA0800 Offset: 0xEA0800 VA: 0xEA0800 Slot: 12
	public virtual IAsyncResult BeginInvoke(Header[] headers, AsyncCallback callback, object object) { }

	// RVA: 0xEA0824 Offset: 0xEA0824 VA: 0xEA0824 Slot: 13
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC37364 Offset: 0xC37364 VA: 0xC37364
public sealed class ContextCallback : MulticastDelegate // TypeDefIndex: 1068
{
	// Methods

	// RVA: 0x12CA020 Offset: 0x12CA020 VA: 0x12CA020
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x12C9C48 Offset: 0x12C9C48 VA: 0x12C9C48 Slot: 11
	public virtual void Invoke(object state) { }

	// RVA: 0x12CA030 Offset: 0x12CA030 VA: 0x12CA030 Slot: 12
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }

	// RVA: 0x12CA054 Offset: 0x12CA054 VA: 0x12CA054 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[ComVisibleAttribute] // RVA: 0xC37378 Offset: 0xC37378 VA: 0xC37378
public sealed class ParameterizedThreadStart : MulticastDelegate // TypeDefIndex: 1069
{
	// Methods

	// RVA: 0x12CAC10 Offset: 0x12CAC10 VA: 0x12CAC10
	public void .ctor(object object, IntPtr method) { }
