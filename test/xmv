{
	// Fields
	[SerializeField] // RVA: 0xC532A8 Offset: 0xC532A8 VA: 0xC532A8
	private int uvAnimationTileX; // 0x18
	[SerializeField] // RVA: 0xC532B8 Offset: 0xC532B8 VA: 0xC532B8
	private int uvAnimationTileY; // 0x1C
	[SerializeField] // RVA: 0xC532C8 Offset: 0xC532C8 VA: 0xC532C8
	private float framesPerSecond; // 0x20
	private Renderer compRenderer; // 0x28

	// Methods

	// RVA: 0x10B43E4 Offset: 0x10B43E4 VA: 0x10B43E4
	public void .ctor() { }

	// RVA: 0x10B4400 Offset: 0x10B4400 VA: 0x10B4400
	private void OnEnable() { }

	// RVA: 0x10B4458 Offset: 0x10B4458 VA: 0x10B4458
	private void Update() { }
}

// Namespace: 
public class FGOStandFigureMColor : MonoBehaviour // TypeDefIndex: 6051
{
	// Fields
	public Color color; // 0x18
	protected Color backupColor; // 0x28
	public MeshRenderer[] renderers; // 0x38

	// Methods

	// RVA: 0x10B4DD4 Offset: 0x10B4DD4 VA: 0x10B4DD4
	public void .ctor() { }

	// RVA: 0x10B4E18 Offset: 0x10B4E18 VA: 0x10B4E18
	private void Start() { }

	// RVA: 0x10B4E34 Offset: 0x10B4E34 VA: 0x10B4E34
	public void OnUpdate() { }

	// RVA: 0x10B4F20 Offset: 0x10B4F20 VA: 0x10B4F20
	private void Update() { }
}

// Namespace: 
public class FGOUv0Anim : MonoBehaviour // TypeDefIndex: 6052
{
	// Fields
	public Vector2 m_Offset; // 0x18
	public bool isShared; // 0x20
	private static int mainTexID; // 0x0

	// Methods

	// RVA: 0x10B4F24 Offset: 0x10B4F24 VA: 0x10B4F24
	public void .ctor() { }

	// RVA: 0x10B4F6C Offset: 0x10B4F6C VA: 0x10B4F6C
	private void Start() { }

	// RVA: 0x10B4F70 Offset: 0x10B4F70 VA: 0x10B4F70
	private void Update() { }

	// RVA: 0x10B4F74 Offset: 0x10B4F74 VA: 0x10B4F74
	public void UpdateUV() { }

	// RVA: 0x10B51A0 Offset: 0x10B51A0 VA: 0x10B51A0
	private static void .cctor() { }
}

// Namespace: 
public class FGOUv1Anim : MonoBehaviour // TypeDefIndex: 6053
{
	// Fields
	public Vector2 m_Offset; // 0x18
	public bool isShared; // 0x20
	private static int subTexID; // 0x0

	// Methods

	// RVA: 0x10B5204 Offset: 0x10B5204 VA: 0x10B5204
	public void .ctor() { }

	// RVA: 0x10B524C Offset: 0x10B524C VA: 0x10B524C
	private void Start() { }

	// RVA: 0x10B5250 Offset: 0x10B5250 VA: 0x10B5250
	private void Update() { }

	// RVA: 0x10B5254 Offset: 0x10B5254 VA: 0x10B5254
	public void UpdateUV() { }

	// RVA: 0x10B5480 Offset: 0x10B5480 VA: 0x10B5480
	private static void .cctor() { }
}

// Namespace: 
public class UISkinnedEffectLoad : MonoBehaviour // TypeDefIndex: 6054
{
	// Fields
	[SerializeField] // RVA: 0xC532D8 Offset: 0xC532D8 VA: 0xC532D8
	private AtlasManager.SkinType skinType; // 0x18
	public UISkinnedEffectLoad.skinEffect[] skinEffects; // 0x20
	public UISkinnedEffectLoad.ReplaceData[] replaceDatas; // 0x28
	public bool SetDepthZero; // 0x30
	private string assetName; // 0x38
	private bool isSetEffectsDone; // 0x40

	// Methods

	// RVA: 0x1822E5C Offset: 0x1822E5C VA: 0x1822E5C
	public void .ctor() { }

	// RVA: 0x1822E64 Offset: 0x1822E64 VA: 0x1822E64
	public void OnEnable() { }

	// RVA: 0x1822E98 Offset: 0x1822E98 VA: 0x1822E98
	public void SetEffects() { }

	// RVA: 0x1822F9C Offset: 0x1822F9C VA: 0x1822F9C
	public string[] GetEffectNames(int uiChangeType) { }

	// RVA: 0x1823068 Offset: 0x1823068 VA: 0x1823068
	private string[] GetReplaceEffectnames(int uiChangeType, int version) { }
}

// Namespace: 
[Serializable]
public struct UISkinnedEffectLoad.skinEffect // TypeDefIndex: 6055
{
	// Fields
	public string[] EffectName; // 0x0
}

// Namespace: 
[Serializable]
public class UISkinnedEffectLoad.ReplaceData // TypeDefIndex: 6056
{
	// Fields
	public int UiChangeType; // 0x10
	public int Version; // 0x14
	public string[] EffectName; // 0x18

	// Methods

	// RVA: 0x18231B0 Offset: 0x18231B0 VA: 0x18231B0
	public void .ctor() { }
}

// Namespace: 
public class UVScroll : MonoBehaviour // TypeDefIndex: 6057
{
	// Fields
	public Vector2 m_Offset; // 0x18

	// Methods

	// RVA: 0x1AFBB58 Offset: 0x1AFBB58 VA: 0x1AFBB58
	public void .ctor() { }

	// RVA: 0x1AFBBA0 Offset: 0x1AFBBA0 VA: 0x1AFBBA0
	private void Start() { }

	// RVA: 0x1AFBBA4 Offset: 0x1AFBBA4 VA: 0x1AFBBA4
	private void Update() { }

	// RVA: 0x1AFBBA8 Offset: 0x1AFBBA8 VA: 0x1AFBBA8
	public void UpdateUV() { }
}

// Namespace: 
public static class ActionType // TypeDefIndex: 6058
{}

// Namespace: 
public enum ActionType.Type // TypeDefIndex: 6059
{
	// Fields
	public int value__; // 0x0
	public const ActionType.Type TALK = 1;
	public const ActionType.Type SYSTEM_WINDOW = 2;
	public const ActionType.Type SCROLL_MISSION = 3;
	public const ActionType.Type TRANSITION_TERMINAL = 4;
	public const ActionType.Type VOICE = 5;
	public const ActionType.Type IMAGE_WINDOW = 6;
	public const ActionType.Type MASTER_MISSION_VOICE = 7;
	public const ActionType.Type WAIT_VOICE = 8;
}

// Namespace: 
public enum AdstoreAction // TypeDefIndex: 6060
{
	// Fields
	public int value__; // 0x0
	public const AdstoreAction StartApplication = 0;
	public const AdstoreAction EndSimulationBattle = 1;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25204 Offset: 0xC25204 VA: 0xC25204
internal static class AdstoreActionExt // TypeDefIndex: 6061
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC8894 Offset: 0xCC8894 VA: 0xCC8894
	// RVA: 0x106B860 Offset: 0x106B860 VA: 0x106B860
	public static string DisplayName(AdstoreAction action) { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25214 Offset: 0xC25214 VA: 0xC25214
public static class Ai // TypeDefIndex: 6062
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC88A4 Offset: 0xCC88A4 VA: 0xCC88A4
	// RVA: 0x106FE48 Offset: 0x106FE48 VA: 0x106FE48
	public static bool Check(Ai.ACT_NUM actNum, int num) { }

	// RVA: 0x106FE54 Offset: 0x106FE54 VA: 0x106FE54
	public static Ai.COND getCond(int intype) { }

	// RVA: 0x106FE60 Offset: 0x106FE60 VA: 0x106FE60
	public static bool getReversal(int intype) { }

	// RVA: 0x106FE68 Offset: 0x106FE68 VA: 0x106FE68
	public static int getChangeThinking(int[] avals) { }
}

// Namespace: 
public enum Ai.COND // TypeDefIndex: 6063
{
	// Fields
	public int value__; // 0x0
	public const Ai.COND NONE = 0;
	public const Ai.COND HP_HIGHER = 10;
	public const Ai.COND HP_LOWER = 11;
	public const Ai.COND ACTCOUNT = 20;
	public const Ai.COND ACTCOUNT_MULTIPLE = 21;
	public const Ai.COND TURN = 30;
	public const Ai.COND TURN_MULTIPLE = 31;
	public const Ai.COND BEFORE_ACT_ID = 40;
	public const Ai.COND BEFORE_ACT_TYPE = 41;
	public const Ai.COND BEFORE_NOT_ACT_ID = 42;
	public const Ai.COND BEFORE_NOT_ACT_TYPE = 43;
	public const Ai.COND CHECK_SELF_BUFF = 50;
	public const Ai.COND CHECK_SELF_INDIVIDUALITY = 51;
	public const Ai.COND CHECK_PT_BUFF = 52;
	public const Ai.COND CHECK_PT_INDIVIDUALITY = 53;
	public const Ai.COND CHECK_OPPONENT_BUFF = 55;
	public const Ai.COND CHECK_OPPONENT_INDIVIDUALITY = 56;
	public const Ai.COND CHECK_SELF_BUFF_INDIVIDUALITY = 57;
	public const Ai.COND CHECK_PT_BUFF_INDIVIDUALITY = 58;
	public const Ai.COND CHECK_OPPONENT_BUFF_INDIVIDUALITY = 59;
	public const Ai.COND CHECK_SELF_NPTURN = 60;
	public const Ai.COND CHECK_PT_LOWER_NPTURN = 61;
	public const Ai.COND CHECK_OPPONENT_HEIGHT_NPGAUGE = 62;
	public const Ai.COND ACTCOUNT_THISTURN = 63;
	public const Ai.COND CHECK_PT_HP_HIGHER = 64;
	public const Ai.COND CHECK_PT_HP_LOWER = 65;
	public const Ai.COND CHECK_SELF_NOT_BUFF_INDIVIDUALITY = 66;
	public const Ai.COND TURN_AND_ACTCOUNT_THISTURN = 67;
	public const Ai.COND FIELDTURN = 68;
	public const Ai.COND FIELDTURN_MULTIPLE = 69;
	public const Ai.COND CHECK_PT_LOWER_TDTURN = 70;
	public const Ai.COND RAID_HP_HIGHER = 71;
	public const Ai.COND RAID_HP_LOWER = 72;
	public const Ai.COND RAID_COUNT_HIGHER = 73;
	public const Ai.COND RAID_COUNT_LOWER = 74;
	public const Ai.COND RAID_COUNT_VALUE_HIGHER = 75;
	public const Ai.COND RAID_COUNT_VALUE_LOWER = 76;
	public const Ai.COND CHECK_SPACE = 77;
	public const Ai.COND TURN_HIGHER = 78;
	public const Ai.COND TURN_LOWER = 79;
	public const Ai.COND CHARACTOR_TURN_HIGHER = 80;
	public const Ai.COND CHARACTOR_TURN_LOWER = 81;
	public const Ai.COND COUNT_ALIVE_PT = 82;
	public const Ai.COND COUNT_ALIVE_OPPONENT = 83;
	public const Ai.COND COUNT_PT_REST_HIGHER = 84;
	public const Ai.COND COUNT_PT_REST_LOWER = 85;
	public const Ai.COND COUNT_OPPONENT_REST_HIGHER = 86;
	public const Ai.COND COUNT_OPPONENT_REST_LOWER = 87;
	public const Ai.COND COUNT_ITEM_HIGHER = 88;
	public const Ai.COND COUNT_ITEM_LOWER = 89;
	public const Ai.COND CHECK_SELF_BUFFCOUNT_INDIVIDUALITY = 90;
	public const Ai.COND CHECK_PT_BUFFCOUNT_INDIVIDUALITY = 91;
	public const Ai.COND CHECK_SELF_BUFF_ACTIVE = 92;
	public const Ai.COND CHECK_PT_BUFF_ACTIVE = 93;
	public const Ai.COND CHECK_OPPONENT_BUFF_ACTIVE = 94;
	public const Ai.COND COUNT_ENEMY_COMMAND_SPELL_HIGHER = 95;
	public const Ai.COND CHECK_PT_ALL_INDIVIDUALITY = 96;
	public const Ai.COND CHECK_OPPONENT_ALL_INDIVIDUALITY = 97;
	public const Ai.COND STAR_HIGHER = 98;
	public const Ai.COND STAR_LOWER = 99;
	public const Ai.COND CHECK_OPPONENT_HP_HIGHER = 100;
	public const Ai.COND CHECK_OPPONENT_HP_LOWER = 101;
	public const Ai.COND CHECK_TARGET_POSITION = 102;
	public const Ai.COND CHECK_SELF_BUFF_ACTIVE_AND_PASSIVE_INDIVIDUALITY = 103;
	public const Ai.COND CHECK_PT_BUFF_ACTIVE_AND_PASSIVE_INDIVIDUALITY = 104;
	public const Ai.COND CHECK_OPPONENT_BUFF_ACTIVE_AND_PASSIVE_INDIVIDUALITY = 105;
	public const Ai.COND CHECK_PT_ALL_BUFF = 106;
	public const Ai.COND CHECK_OPPONENT_ALL_BUFF = 107;
	public const Ai.COND CHECK_PT_ALL_BUFF_INDIVIDUALITY = 108;
	public const Ai.COND CHECK_OPPONENT_ALL_BUFF_INDIVIDUALITY = 109;
	public const Ai.COND COUNT_ALIVE_PT_ALL = 110;
	public const Ai.COND COUNT_ALIVE_OPPONENT_ALL = 111;
	public const Ai.COND CHECK_PT_ALL_BUFF_ACTIVE = 112;
	public const Ai.COND CHECK_OPPONENT_ALL_BUFF_ACTIVE = 113;
	public const Ai.COND COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_PT = 114;
	public const Ai.COND COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_PT_ALL = 115;
	public const Ai.COND COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_OPPONENT = 116;
	public const Ai.COND COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_OPPONENT_ALL = 117;
	public const Ai.COND COUNT_HIGHER_BUFF_INDIVIDUALITY_SUM_SELF = 118;
	public const Ai.COND COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_PT = 119;
	public const Ai.COND COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_PT_ALL = 120;
	public const Ai.COND COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_OPPONENT = 121;
	public const Ai.COND COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_OPPONENT_ALL = 122;
	public const Ai.COND COUNT_LOWER_BUFF_INDIVIDUALITY_SUM_SELF = 123;
	public const Ai.COND COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_PT = 124;
	public const Ai.COND COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_PT_ALL = 125;
	public const Ai.COND COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_OPPONENT = 126;
	public const Ai.COND COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_OPPONENT_ALL = 127;
	public const Ai.COND COUNT_EQUAL_BUFF_INDIVIDUALITY_SUM_SELF = 128;
	public const Ai.COND EXIST_INDIVIDUALITY_OPPONENT_FRONT = 129;
	public const Ai.COND EXIST_INDIVIDUALITY_OPPONENT_CENTER = 130;
	public const Ai.COND EXIST_INDIVIDUALITY_OPPONENT_BACK = 131;
	public const Ai.COND TOTAL_COUNT_HIGHER_INDIVIDUALITY_PT = 132;
	public const Ai.COND TOTAL_COUNT_HIGHER_INDIVIDUALITY_PT_ALL = 133;
	public const Ai.COND TOTAL_COUNT_HIGHER_INDIVIDUALITY_OPPONENT = 134;
	public const Ai.COND TOTAL_COUNT_HIGHER_INDIVIDUALITY_OPPONENT_ALL = 135;
	public const Ai.COND TOTAL_COUNT_HIGHER_INDIVIDUALITY_ALL_FIELD = 136;
	public const Ai.COND TOTAL_COUNT_LOWER_INDIVIDUALITY_PT = 137;
	public const Ai.COND TOTAL_COUNT_LOWER_INDIVIDUALITY_PT_ALL = 138;
	public const Ai.COND TOTAL_COUNT_LOWER_INDIVIDUALITY_OPPONENT = 139;
	public const Ai.COND TOTAL_COUNT_LOWER_INDIVIDUALITY_OPPONENT_ALL = 140;
	public const Ai.COND TOTAL_COUNT_LOWER_INDIVIDUALITY_ALL_FIELD = 141;
	public const Ai.COND TOTAL_COUNT_EQUAL_INDIVIDUALITY_PT = 142;
	public const Ai.COND TOTAL_COUNT_EQUAL_INDIVIDUALITY_PT_ALL = 143;
	public const Ai.COND TOTAL_COUNT_EQUAL_INDIVIDUALITY_OPPONENT = 144;
	public const Ai.COND TOTAL_COUNT_EQUAL_INDIVIDUALITY_OPPONENT_ALL = 145;
	public const Ai.COND TOTAL_COUNT_EQUAL_INDIVIDUALITY_ALL_FIELD = 146;
	public const Ai.COND PT_FRONT_DEAD_EQUAL = 147;
	public const Ai.COND PT_CENTER_DEAD_EQUAL = 148;
	public const Ai.COND PT_BACK_DEAD_EQUAL = 149;
	public const Ai.COND COUNT_HIGHER_INDIVIDUALITY_PT_FRONT = 150;
	public const Ai.COND COUNT_HIGHER_INDIVIDUALITY_PT_CENTER = 151;
	public const Ai.COND COUNT_HIGHER_INDIVIDUALITY_PT_BACK = 152;
	public const Ai.COND COUNT_HIGHER_INDIVIDUALITY_OPPONENT_FRONT = 153;
	public const Ai.COND COUNT_HIGHER_INDIVIDUALITY_OPPONENT_CENTER = 154;
	public const Ai.COND COUNT_HIGHER_INDIVIDUALITY_OPPONENT_BACK = 155;
	public const Ai.COND COUNT_LOWER_INDIVIDUALITY_PT_FRONT = 156;
	public const Ai.COND COUNT_LOWER_INDIVIDUALITY_PT_CENTER = 157;
	public const Ai.COND COUNT_LOWER_INDIVIDUALITY_PT_BACK = 158;
	public const Ai.COND COUNT_LOWER_INDIVIDUALITY_OPPONENT_FRONT = 159;
	public const Ai.COND COUNT_LOWER_INDIVIDUALITY_OPPONENT_CENTER = 160;
	public const Ai.COND COUNT_LOWER_INDIVIDUALITY_OPPONENT_BACK = 161;
	public const Ai.COND COUNT_EQUAL_INDIVIDUALITY_PT_FRONT = 162;
	public const Ai.COND COUNT_EQUAL_INDIVIDUALITY_PT_CENTER = 163;
	public const Ai.COND COUNT_EQUAL_INDIVIDUALITY_PT_BACK = 164;
	public const Ai.COND COUNT_EQUAL_INDIVIDUALITY_OPPONENT_FRONT = 165;
	public const Ai.COND COUNT_EQUAL_INDIVIDUALITY_OPPONENT_CENTER = 166;
	public const Ai.COND COUNT_EQUAL_INDIVIDUALITY_OPPONENT_BACK = 167;
	public const Ai.COND CHECK_PRECEDING_ENEMY = 168;
	public const Ai.COND COUNT_HIGHER_REMAIN_TURN = 169;
	public const Ai.COND COUNT_LOWER_REMAIN_TURN = 170;
	public const Ai.COND COUNT_HIGHER_AI_171 = 171;
	public const Ai.COND COUNT_LOWER_AI_172 = 172;
	public const Ai.COND COUNT_EQUAL_AI_173 = 173;
	public const Ai.COND CHECK_AI_174 = 174;
	public const Ai.COND CHECK_SELF_NPTURN_HIGHER = 175;
	public const Ai.COND CHECK_SELF_NPTURN_LOWER = 176;
	public const Ai.COND CHECK_USE_SKILL_THISTURN = 177;
	public const Ai.COND COUNT_CHAIN_HIGHER = 178;
	public const Ai.COND COUNT_CHAIN_LOWER = 179;
	public const Ai.COND COUNT_CHAIN_EQUAL = 180;
}

// Namespace: 
public enum Ai.ACT_NUM // TypeDefIndex: 6064
{
	// Fields
	public int value__; // 0x0
	public const Ai.ACT_NUM NOMAL = 0;
	public const Ai.ACT_NUM ANYTIME = -1;
	public const Ai.ACT_NUM REACTION_ENEMYTURN_START = -4;
	public const Ai.ACT_NUM REACTION_ENEMYTURN_END = -5;
	public const Ai.ACT_NUM REACTION_DEAD = -6;
	public const Ai.ACT_NUM REACTION_PLAYERACTIONEND = -7;
	public const Ai.ACT_NUM REACTION_WAVESTART = -8;
	public const Ai.ACT_NUM MAXNP = -9;
	public const Ai.ACT_NUM SHIFT_SARVANT_AFTER = -10;
	public const Ai.ACT_NUM USENP_TARGET = -11;
	public const Ai.ACT_NUM REACTION_TURNSTART = -12;
	public const Ai.ACT_NUM REACTION_PLAYERACTIONSTART = -13;
	public const Ai.ACT_NUM REACTION_ENTRY_UNIT = -14;
}

// Namespace: 
public enum Ai.TIMING // TypeDefIndex: 6065
{
	// Fields
	public int value__; // 0x0
	public const Ai.TIMING NONE = 0;
	public const Ai.TIMING ANYTIME = -1;
	public const Ai.TIMING REACTION_DAMAGE = -2;
	public const Ai.TIMING REACTION_SKILL = -3;
	public const Ai.TIMING REACTION_ENEMYTURN_START = -4;
	public const Ai.TIMING REACTION_ENEMYTURN_END = -5;
	public const Ai.TIMING REACTION_DEAD = -6;
	public const Ai.TIMING REACTION_PLAYERACTIONEND = -7;
	public const Ai.TIMING REACTION_WAVESTART = -8;
	public const Ai.TIMING MAXNP = -9;
	public const Ai.TIMING WAVE_START = 1;
	public const Ai.TIMING TURN_START = 2;
	public const Ai.TIMING TURN_PLAYER_START = 3;
	public const Ai.TIMING TURN_PLAYER_END = 4;
	public const Ai.TIMING TURN_ENEMY_START = 5;
	public const Ai.TIMING TURN_ENEMY_END = 6;
	public const Ai.TIMING ENTRY_UNIT = 7;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25224 Offset: 0xC25224 VA: 0xC25224
public static class AiAct // TypeDefIndex: 6066
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC88B4 Offset: 0xCC88B4 VA: 0xCC88B4
	// RVA: 0x106FE88 Offset: 0x106FE88 VA: 0x106FE88
	public static bool Check(AiAct.TYPE type, int intype) { }

	// RVA: 0x106FE94 Offset: 0x106FE94 VA: 0x106FE94
	public static AiAct.TYPE getType(int intype) { }

	// RVA: 0x106FE98 Offset: 0x106FE98 VA: 0x106FE98
	public static bool isThinkEnd(int intype) { }

	[ExtensionAttribute] // RVA: 0xCC88C4 Offset: 0xCC88C4 VA: 0xCC88C4
	// RVA: 0x106FEA4 Offset: 0x106FEA4 VA: 0x106FEA4
	public static bool isThinkEnd(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC88D4 Offset: 0xCC88D4 VA: 0xCC88D4
	// RVA: 0x106FEB0 Offset: 0x106FEB0 VA: 0x106FEB0
	public static int getInt(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC88E4 Offset: 0xCC88E4 VA: 0xCC88E4
	// RVA: 0x106FEB4 Offset: 0x106FEB4 VA: 0x106FEB4
	public static bool isAttackType(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC88F4 Offset: 0xCC88F4 VA: 0xCC88F4
	// RVA: 0x106FEE0 Offset: 0x106FEE0 VA: 0x106FEE0
	public static bool isAttackCritical(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC8904 Offset: 0xCC8904 VA: 0xCC8904
	// RVA: 0x106FF08 Offset: 0x106FF08 VA: 0x106FF08
	public static bool isAttackArts(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC8914 Offset: 0xCC8914 VA: 0xCC8914
	// RVA: 0x106FF20 Offset: 0x106FF20 VA: 0x106FF20
	public static bool isAttackBuster(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC8924 Offset: 0xCC8924 VA: 0xCC8924
	// RVA: 0x106FF38 Offset: 0x106FF38 VA: 0x106FF38
	public static bool isAttackQuick(AiAct.TYPE type) { }

	[ExtensionAttribute] // RVA: 0xCC8934 Offset: 0xCC8934 VA: 0xCC8934
	// RVA: 0x106FF50 Offset: 0x106FF50 VA: 0x106FF50
	public static bool isSkillType(AiAct.TYPE type) { }
}

// Namespace: 
public enum AiAct.TYPE // TypeDefIndex: 6067
{
	// Fields
	public int value__; // 0x0
	public const AiAct.TYPE NONE = 0;
	public const AiAct.TYPE RANDOM = 1;
	public const AiAct.TYPE ATTACK = 2;
	public const AiAct.TYPE SKILL_RANDOM = 10;
	public const AiAct.TYPE SKILL1 = 11;
	public const AiAct.TYPE SKILL2 = 12;
	public const AiAct.TYPE SKILL3 = 13;
	public const AiAct.TYPE PLAY_MOTION = 71;
	public const AiAct.TYPE NOBLE_PHANTASM = 80;
	public const AiAct.TYPE CHANGE_THINKING = 99;
	public const AiAct.TYPE ATTACK_CRITICAL = 30;
	public const AiAct.TYPE SKILL_ID = 40;
	public const AiAct.TYPE BATTLE_END = 90;
	public const AiAct.TYPE LOSE_END = 91;
	public const AiAct.TYPE ATTACK_A = 14;
	public const AiAct.TYPE ATTACK_B = 15;
	public const AiAct.TYPE ATTACK_Q = 16;
	public const AiAct.TYPE ATTACK_A_CRITICAL = 17;
	public const AiAct.TYPE ATTACK_B_CRITICAL = 18;
	public const AiAct.TYPE ATTACK_Q_CRITICAL = 19;
	public const AiAct.TYPE SKILL_ID_CHECKBUFF = 41;
	public const AiAct.TYPE RESURRECTION = 42;
}

// Namespace: 
public enum AiAct.TARGET // TypeDefIndex: 6068
{
	// Fields
	public int value__; // 0x0
	public const AiAct.TARGET NONE = 0;
	public const AiAct.TARGET RANDOM = 1;
	public const AiAct.TARGET HP_HIGHER = 2;
	public const AiAct.TARGET HP_LOWER = 3;
	public const AiAct.TARGET NPTURN_LOWER = 10;
	public const AiAct.TARGET NPGAUGE_HIGHER = 11;
	public const AiAct.TARGET REVENGE = 12;
	public const AiAct.TARGET INDIVIDUALITY_ACTIVE = 13;
	public const AiAct.TARGET BUFF_ACTIVE = 14;
	public const AiAct.TARGET FRONT = 15;
	public const AiAct.TARGET CENTER = 16;
	public const AiAct.TARGET BACK = 17;
}

// Namespace: 
public class AnimationList // TypeDefIndex: 6069
{
	// Fields
	private static Dictionary<string, int> _dictionary; // 0x0

	// Methods

	// RVA: 0x107B174 Offset: 0x107B174 VA: 0x107B174
	private static void .cctor() { }

	// RVA: 0x107B2D4 Offset: 0x107B2D4 VA: 0x107B2D4
	public void .ctor() { }

	// RVA: 0x107B2DC Offset: 0x107B2DC VA: 0x107B2DC
	public static int getIndex(string name) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8944 Offset: 0xCC8944 VA: 0xCC8944
	// RVA: 0x107B394 Offset: 0x107B394 VA: 0x107B394
	private static string <AnimationList>m__0(AnimationList.NAME x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8954 Offset: 0xCC8954 VA: 0xCC8954
	// RVA: 0x107B428 Offset: 0x107B428 VA: 0x107B428
	private static int <AnimationList>m__1(AnimationList.NAME x) { }
}

// Namespace: 
public enum AnimationList.NAME // TypeDefIndex: 6070
{
	// Fields
	public int value__; // 0x0
	public const AnimationList.NAME attack_a = 0;
	public const AnimationList.NAME attack_b = 1;
	public const AnimationList.NAME attack_q = 2;
	public const AnimationList.NAME attack_gen = 3;
	public const AnimationList.NAME damage_01 = 4;
	public const AnimationList.NAME spell = 5;
	public const AnimationList.NAME step_back = 6;
	public const AnimationList.NAME step_front = 7;
	public const AnimationList.NAME treasure_arms = 8;
	public const AnimationList.NAME wait = 9;
	public const AnimationList.NAME death_01 = 10;
	public const AnimationList.NAME attack_ex = 11;
	public const AnimationList.NAME attack_a02 = 12;
	public const AnimationList.NAME attack_b02 = 13;
	public const AnimationList.NAME attack_q02 = 14;
	public const AnimationList.NAME attack_gen02 = 15;
	public const AnimationList.NAME attack_ex02 = 16;
	public const AnimationList.NAME attack_a03 = 17;
	public const AnimationList.NAME attack_b03 = 18;
	public const AnimationList.NAME attack_q03 = 19;
	public const AnimationList.NAME attack_gen03 = 20;
	public const AnimationList.NAME attack_ex03 = 21;
	public const AnimationList.NAME spell02 = 22;
	public const AnimationList.NAME spell03 = 23;
	public const AnimationList.NAME step_back02 = 24;
	public const AnimationList.NAME step_front02 = 25;
	public const AnimationList.NAME attack_a04 = 26;
	public const AnimationList.NAME attack_b04 = 27;
	public const AnimationList.NAME attack_q04 = 28;
	public const AnimationList.NAME attack_gen04 = 29;
	public const AnimationList.NAME attack_ex04 = 30;
	public const AnimationList.NAME damage_02 = 31;
	public const AnimationList.NAME spell_loop = 32;
	public const AnimationList.NAME treasureArms1_a = 33;
	public const AnimationList.NAME treasureArms2_a = 34;
	public const AnimationList.NAME treasureArms3_a = 35;
	public const AnimationList.NAME treasureArms4_a = 36;
	public const AnimationList.NAME treasureArms5_a = 37;
	public const AnimationList.NAME wait02 = 38;
	public const AnimationList.NAME wait03 = 39;
	public const AnimationList.NAME attack_a05 = 40;
	public const AnimationList.NAME attack_b05 = 41;
	public const AnimationList.NAME attack_q05 = 42;
	public const AnimationList.NAME attack_gen05 = 43;
	public const AnimationList.NAME attack_ex05 = 44;
	public const AnimationList.NAME spell04 = 45;
	public const AnimationList.NAME spell05 = 46;
	public const AnimationList.NAME sleep_wait01 = 47;
	public const AnimationList.NAME counter_wait01 = 48;
	public const AnimationList.NAME counter_attack01 = 49;
	public const AnimationList.NAME max = 50;
}

// Namespace: 
public class AssetsFile // TypeDefIndex: 6071
{
	// Fields
	protected static Dictionary<AssetsFile.Path, string> filelist; // 0x0

	// Methods

	// RVA: 0x141DAC8 Offset: 0x141DAC8 VA: 0x141DAC8
	public void .ctor() { }

	// RVA: 0x141DAD0 Offset: 0x141DAD0 VA: 0x141DAD0
	private static void .cctor() { }
}

// Namespace: 
public enum AssetsFile.Path // TypeDefIndex: 6072
{
	// Fields
	public int value__; // 0x0
	public const AssetsFile.Path NONE = 0;
	public const AssetsFile.Path SERVANTS = 1;
	public const AssetsFile.Path BG = 2;
}

// Namespace: 
public class Bank // TypeDefIndex: 6073
{
	// Methods

	// RVA: 0xF62F40 Offset: 0xF62F40 VA: 0xF62F40
	public void .ctor() { }
}

// Namespace: 
public enum Bank.Type // TypeDefIndex: 6074
{
	// Fields
	public int value__; // 0x0
	public const Bank.Type NONE = 0;
	public const Bank.Type AU_GAMES = 1;
	public const Bank.Type GOOGLE_PLAY = 2;
	public const Bank.Type APP_STORE = 3;
}

// Namespace: 
public static class BattleCommand // TypeDefIndex: 6075
{
	// Methods

	// RVA: 0x1039988 Offset: 0x1039988 VA: 0x1039988
	public static BattleCommand.TYPE getType(int type) { }

	// RVA: 0x103998C Offset: 0x103998C VA: 0x103998C
	public static float getMagnification(BattleCommandData data) { }

	// RVA: 0x10399EC Offset: 0x10399EC VA: 0x10399EC
	public static float getMagnification(int type, int index) { }

	// RVA: 0x10399F4 Offset: 0x10399F4 VA: 0x10399F4
	public static float getNpMagnification(BattleCommandData command) { }

	// RVA: 0x1039A48 Offset: 0x1039A48 VA: 0x1039A48
	public static float getNpMagnification(int type, int index) { }

	// RVA: 0x1039A50 Offset: 0x1039A50 VA: 0x1039A50
	public static float getCriticalMagnification(BattleCommandData data) { }

	// RVA: 0x1039AA4 Offset: 0x1039AA4 VA: 0x1039AA4
	public static float getCriticalMagnification(int type, int index) { }

	// RVA: 0x1039AAC Offset: 0x1039AAC VA: 0x1039AAC
	public static int[] getIndividuality(int type, int num) { }

	// RVA: 0x1039AB4 Offset: 0x1039AB4 VA: 0x1039AB4
	public static bool isARTS(int type) { }

	// RVA: 0x1039AC0 Offset: 0x1039AC0 VA: 0x1039AC0
	public static bool isBUSTER(int type) { }

	// RVA: 0x1039ACC Offset: 0x1039ACC VA: 0x1039ACC
	public static bool isQUICK(int type) { }

	// RVA: 0x1039AD8 Offset: 0x1039AD8 VA: 0x1039AD8
	public static bool isADDATTACK(int type) { }

	// RVA: 0x1039AE4 Offset: 0x1039AE4 VA: 0x1039AE4
	public static bool isBLANK(int type) { }

	// RVA: 0x1039AF0 Offset: 0x1039AF0 VA: 0x1039AF0
	public static bool isNomalCommand(int type) { }

	// RVA: 0x1039B00 Offset: 0x1039B00 VA: 0x1039B00
	public static bool isShowCommandAction(int type) { }

	// RVA: 0x1039B28 Offset: 0x1039B28 VA: 0x1039B28
	public static void setSprite(UISprite sprite, BattleCommand.TYPE type) { }
}

// Namespace: 
public enum BattleCommand.TYPE // TypeDefIndex: 6076
{
	// Fields
	public int value__; // 0x0
	public const BattleCommand.TYPE NONE = 0;
	public const BattleCommand.TYPE ARTS = 1;
	public const BattleCommand.TYPE BUSTER = 2;
	public const BattleCommand.TYPE QUICK = 3;
	public const BattleCommand.TYPE ADDATTACK = 4;
	public const BattleCommand.TYPE BLANK = 5;
	public const BattleCommand.TYPE WEAK = 10;
	public const BattleCommand.TYPE STRENGTH = 11;
}

// Namespace: 
public class BehaviorType // TypeDefIndex: 6077
{
	// Methods

	// RVA: 0x1578840 Offset: 0x1578840 VA: 0x1578840
	public void .ctor() { }
}

// Namespace: 
public enum BehaviorType.Kind // TypeDefIndex: 6078
{
	// Fields
	public int value__; // 0x0
	public const BehaviorType.Kind SKILL = 1;
	public const BehaviorType.Kind ENABLE_CONTINUE = 2;
	public const BehaviorType.Kind BATTLE_BG = 3;
	public const BehaviorType.Kind INDIVIDUALITY = 4;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25234 Offset: 0xC25234 VA: 0xC25234
public static class BuffList // TypeDefIndex: 6079
{
	// Fields
	private static Dictionary<BuffList.ACTION, BuffList.ActInfo> ActionList; // 0x0
	public static readonly BuffList.TYPE[] GutsList; // 0x8
	public static readonly BuffList.ACTION[] CommandCodeFunctionActs; // 0x10

	// Methods

	// RVA: 0x14D5088 Offset: 0x14D5088 VA: 0x14D5088
	public static BuffList.ActInfo getActInfo(BuffList.ACTION action, BattleServantData opponentSvt) { }

	[ExtensionAttribute] // RVA: 0xCC8964 Offset: 0xCC8964 VA: 0xCC8964
	// RVA: 0x14D515C Offset: 0x14D515C VA: 0x14D515C
	public static bool CheckType(BuffList.TYPE self, int type) { }

	// RVA: 0x14D5168 Offset: 0x14D5168 VA: 0x14D5168
	public static bool CheckUpdateHp(int type) { }

	// RVA: 0x14D5238 Offset: 0x14D5238 VA: 0x14D5238
	public static bool CheckAccumulation(int type) { }

	// RVA: 0x14D52A0 Offset: 0x14D52A0 VA: 0x14D52A0
	public static bool isSpHit(int type) { }

	// RVA: 0x14D5390 Offset: 0x14D5390 VA: 0x14D5390
	public static bool CheckGutsType(int type) { }

	// RVA: 0x14D545C Offset: 0x14D545C VA: 0x14D545C
	public static int GetProgressTurnCond(int type) { }

	// RVA: 0x14D549C Offset: 0x14D549C VA: 0x14D549C
	public static bool IsForceProgressSelfTurnType(int type) { }

	// RVA: 0x14D54B8 Offset: 0x14D54B8 VA: 0x14D54B8
	public static void SetBattleData(BattleData setData) { }

	// RVA: 0x14D5620 Offset: 0x14D5620 VA: 0x14D5620
	private static void .cctor() { }
}

// Namespace: 
public enum BuffList.TYPE // TypeDefIndex: 6080
{
	// Fields
	public int value__; // 0x0
	public const BuffList.TYPE NONE = 0;
	public const BuffList.TYPE UP_COMMANDATK = 1;
	public const BuffList.TYPE UP_STARWEIGHT = 2;
	public const BuffList.TYPE UP_CRITICALPOINT = 3;
	public const BuffList.TYPE DOWN_CRITICALPOINT = 4;
	public const BuffList.TYPE REGAIN_NP = 5;
	public const BuffList.TYPE REGAIN_STAR = 6;
	public const BuffList.TYPE REGAIN_HP = 7;
	public const BuffList.TYPE REDUCE_HP = 8;
	public const BuffList.TYPE UP_ATK = 9;
	public const BuffList.TYPE DOWN_ATK = 10;
	public const BuffList.TYPE UP_DAMAGE = 11;
	public const BuffList.TYPE DOWN_DAMAGE = 12;
	public const BuffList.TYPE ADD_DAMAGE = 13;
	public const BuffList.TYPE SUB_DAMAGE = 14;
	public const BuffList.TYPE UP_NPDAMAGE = 15;
	public const BuffList.TYPE DOWN_NPDAMAGE = 16;
	public const BuffList.TYPE UP_DROPNP = 17;
	public const BuffList.TYPE UP_CRITICALDAMAGE = 18;
	public const BuffList.TYPE DOWN_CRITICALDAMAGE = 19;
	public const BuffList.TYPE UP_SELFDAMAGE = 20;
	public const BuffList.TYPE DOWN_SELFDAMAGE = 21;
	public const BuffList.TYPE ADD_SELFDAMAGE = 22;
	public const BuffList.TYPE SUB_SELFDAMAGE = 23;
	public const BuffList.TYPE AVOIDANCE = 24;
	public const BuffList.TYPE BREAK_AVOIDANCE = 25;
	public const BuffList.TYPE INVINCIBLE = 26;
	public const BuffList.TYPE UP_GRANTSTATE = 27;
	public const BuffList.TYPE DOWN_GRANTSTATE = 28;
	public const BuffList.TYPE UP_TOLERANCE = 29;
	public const BuffList.TYPE DOWN_TOLERANCE = 30;
	public const BuffList.TYPE AVOID_STATE = 31;
	public const BuffList.TYPE DONOT_ACT = 32;
	public const BuffList.TYPE DONOT_SKILL = 33;
	public const BuffList.TYPE DONOT_NOBLE = 34;
	public const BuffList.TYPE DONOT_RECOVERY = 35;
	public const BuffList.TYPE DISABLE_GENDER = 36;
	public const BuffList.TYPE GUTS = 37;
	public const BuffList.TYPE UP_HATE = 38;
	public const BuffList.TYPE ADD_INDIVIDUALITY = 40;
	public const BuffList.TYPE SUB_INDIVIDUALITY = 41;
	public const BuffList.TYPE UP_DEFENCE = 42;
	public const BuffList.TYPE DOWN_DEFENCE = 43;
	public const BuffList.TYPE UP_COMMANDSTAR = 50;
	public const BuffList.TYPE UP_COMMANDNP = 51;
	public const BuffList.TYPE UP_COMMANDALL = 52;
	public const BuffList.TYPE DOWN_COMMANDALL = 60;
	public const BuffList.TYPE DOWN_STARWEIGHT = 61;
	public const BuffList.TYPE REDUCE_NP = 62;
	public const BuffList.TYPE DOWN_DROPNP = 63;
	public const BuffList.TYPE UP_GAIN_HP = 64;
	public const BuffList.TYPE DOWN_GAIN_HP = 65;
	public const BuffList.TYPE DOWN_COMMANDATK = 66;
	public const BuffList.TYPE DOWN_COMMANSTAR = 67;
	public const BuffList.TYPE DOWN_COMMANDNP = 68;
	public const BuffList.TYPE UP_CRITICALRATE = 70;
	public const BuffList.TYPE DOWN_CRITICALRATE = 71;
	public const BuffList.TYPE PIERCE_INVINCIBLE = 72;
	public const BuffList.TYPE AVOID_INSTANTDEATH = 73;
	public const BuffList.TYPE UP_RESIST_INSTANTDEATH = 74;
	public const BuffList.TYPE UP_NONRESIST_INSTANTDEATH = 75;
	public const BuffList.TYPE DELAY_FUNCTION = 76;
	public const BuffList.TYPE REGAIN_NP_USED_NOBLE = 77;
	public const BuffList.TYPE DEAD_FUNCTION = 78;
	public const BuffList.TYPE UP_MAXHP = 79;
	public const BuffList.TYPE DOWN_MAXHP = 80;
	public const BuffList.TYPE ADD_MAXHP = 81;
	public const BuffList.TYPE SUB_MAXHP = 82;
	public const BuffList.TYPE BATTLESTART_FUNCTION = 83;
	public const BuffList.TYPE WAVESTART_FUNCTION = 84;
	public const BuffList.TYPE SELFTURNEND_FUNCTION = 85;
	public const BuffList.TYPE UP_GIVEGAIN_HP = 87;
	public const BuffList.TYPE DOWN_GIVEGAIN_HP = 88;
	public const BuffList.TYPE COMMANDATTACK_FUNCTION = 89;
	public const BuffList.TYPE DEADATTACK_FUNCTION = 90;
	public const BuffList.TYPE UP_SPECIALDEFENCE = 91;
	public const BuffList.TYPE DOWN_SPECIALDEFENCE = 92;
	public const BuffList.TYPE UP_DAMAGEDROPNP = 93;
	public const BuffList.TYPE DOWN_DAMAGEDROPNP = 94;
	public const BuffList.TYPE ENTRY_FUNCTION = 95;
	public const BuffList.TYPE UP_CHAGETD = 96;
	public const BuffList.TYPE REFLECTION_FUNCTION = 97;
	public const BuffList.TYPE UP_GRANT_SUBSTATE = 98;
	public const BuffList.TYPE DOWN_GRANT_SUBSTATE = 99;
	public const BuffList.TYPE UP_TOLERANCE_SUBSTATE = 100;
	public const BuffList.TYPE DOWN_TOLERANCE_SUBSTATE = 101;
	public const BuffList.TYPE UP_GRANT_INSTANTDEATH = 102;
	public const BuffList.TYPE DOWN_GRANT_INSTANTDEATH = 103;
	public const BuffList.TYPE GUTS_RATIO = 104;
	public const BuffList.TYPE DAMAGE_FUNCTION = 86;
	public const BuffList.TYPE UP_DEFENCECOMMANDALL = 105;
	public const BuffList.TYPE DOWN_DEFENCECOMMANDALL = 106;
	public const BuffList.TYPE OVERWRITE_BATTLECLASS = 107;
	public const BuffList.TYPE OVERWRITE_CLASSRELATIO_ATK = 108;
	public const BuffList.TYPE OVERWRITE_CLASSRELATIO_DEF = 109;
	public const BuffList.TYPE UP_DAMAGE_INDIVIDUALITY = 110;
	public const BuffList.TYPE DOWN_DAMAGE_INDIVIDUALITY = 111;
	public const BuffList.TYPE UP_DAMAGE_INDIVIDUALITY_ACTIVEONLY = 112;
	public const BuffList.TYPE DOWN_DAMAGE_INDIVIDUALITY_ACTIVEONLY = 113;
	public const BuffList.TYPE UP_NPTURNVAL = 114;
	public const BuffList.TYPE DOWN_NPTURNVAL = 115;
	public const BuffList.TYPE MULTIATTACK = 116;
	public const BuffList.TYPE UP_GIVE_NP = 117;
	public const BuffList.TYPE DOWN_GIVE_NP = 118;
	public const BuffList.TYPE UP_RESISTANCE_DELAY_NPTURN = 119;
	public const BuffList.TYPE DOWN_RESISTANCE_DELAY_NPTURN = 120;
	public const BuffList.TYPE PIERCE_DEFENCE = 121;
	public const BuffList.TYPE UP_GUTS_HP = 122;
	public const BuffList.TYPE DOWN_GUTS_HP = 123;
	public const BuffList.TYPE UP_FUNCGAIN_NP = 124;
	public const BuffList.TYPE DOWN_FUNCGAIN_NP = 125;
	public const BuffList.TYPE UP_FUNC_HP_REDUCE = 126;
	public const BuffList.TYPE DOWN_FUNC_HP_REDUCE = 127;
	public const BuffList.TYPE UP_DEFENCECOMMAN_DAMAGE = 128;
	public const BuffList.TYPE DOWN_DEFENCECOMMAN_DAMAGE = 129;
	public const BuffList.TYPE NPATTACK_PREV_BUFF = 130;
	public const BuffList.TYPE FIX_COMMANDCARD = 131;
	public const BuffList.TYPE DONOT_GAINNP = 132;
	public const BuffList.TYPE FIELD_INDIVIDUALITY = 133;
	public const BuffList.TYPE DONOT_ACT_COMMANDTYPE = 134;
	public const BuffList.TYPE UP_DAMAGE_EVENT_POINT = 135;
	public const BuffList.TYPE UP_DAMAGE_SPECIAL = 136;
	public const BuffList.TYPE ATTACK_FUNCTION = 137;
	public const BuffList.TYPE COMMANDCODEATTACK_FUNCTION = 138;
	public const BuffList.TYPE DONOT_NOBLE_COND_MISMATCH = 139;
	public const BuffList.TYPE DONOT_SELECT_COMMANDCARD = 140;
	public const BuffList.TYPE DONOT_REPLACE = 141;
	public const BuffList.TYPE SHORTEN_USER_EQUIP_SKILL = 142;
	public const BuffList.TYPE TD_TYPE_CHANGE = 143;
	public const BuffList.TYPE OVERWRITE_CLASS_RELATION = 144;
	public const BuffList.TYPE TD_TYPE_CHANGE_ARTS = 145;
	public const BuffList.TYPE TD_TYPE_CHANGE_BUSTER = 146;
	public const BuffList.TYPE TD_TYPE_CHANGE_QUICK = 147;
	public const BuffList.TYPE COMMANDATTACK_BEFORE_FUNCTION = 148;
	public const BuffList.TYPE GUTS_FUNCTION = 149;
	public const BuffList.TYPE UP_CRITICAL_RATE_DAMAGE_TAKEN = 150;
	public const BuffList.TYPE DOWN_CRITICAL_RATE_DAMAGE_TAKEN = 151;
	public const BuffList.TYPE UP_CRITICAL_STAR_DAMAGE_TAKEN = 152;
	public const BuffList.TYPE DOWN_CRITICAL_STAR_DAMAGE_TAKEN = 153;
	public const BuffList.TYPE SKILL_RANK_UP = 154;
	public const BuffList.TYPE AVOIDANCE_INDIVIDUALITY = 155;
	public const BuffList.TYPE CHANGE_COMMAND_CARD_TYPE = 156;
	public const BuffList.TYPE SPECIAL_INVINCIBLE = 157;
	public const BuffList.TYPE PREVENT_DEATH_BY_DAMAGE = 158;
	public const BuffList.TYPE COMMANDCODEATTACK_AFTER_FUNCTION = 159;
	public const BuffList.TYPE ATTACK_BEFORE_FUNCTION = 160;
	public const BuffList.TYPE DONOT_SKILL_SELECT = 161;
	public const BuffList.TYPE INVISIBLE_BATTLE_CHARA = 163;
	public const BuffList.TYPE BUFF_RATE = 162;
	public const BuffList.TYPE COUNTER_FUNCTION = 165;
}

// Namespace: 
public enum BuffList.LIMIT // TypeDefIndex: 6081
{
	// Fields
	public int value__; // 0x0
	public const BuffList.LIMIT NONE = 0;
	public const BuffList.LIMIT UPPER = 1;
	public const BuffList.LIMIT LOWER = 2;
	public const BuffList.LIMIT NORMAL = 3;
}

// Namespace: 
public enum BuffList.ACTION // TypeDefIndex: 6082
{
	// Fields
	public int value__; // 0x0
	public const BuffList.ACTION NONE = 0;
	public const BuffList.ACTION COMMAND_ATK = 1;
	public const BuffList.ACTION COMMAND_DEF = 2;
	public const BuffList.ACTION ATK = 3;
	public const BuffList.ACTION DEFENCE = 4;
	public const BuffList.ACTION DEFENCE_PIERCE = 5;
	public const BuffList.ACTION SPECIALDEFENCE = 6;
	public const BuffList.ACTION DAMAGE = 7;
	public const BuffList.ACTION DAMAGE_INDIVIDUALITY = 8;
	public const BuffList.ACTION DAMAGE_INDIVIDUALITY_ACTIVEONLY = 9;
	public const BuffList.ACTION SELFDAMAGE = 10;
	public const BuffList.ACTION CRITICAL_DAMAGE = 11;
	public const BuffList.ACTION NPDAMAGE = 12;
	public const BuffList.ACTION GIVEN_DAMAGE = 13;
	public const BuffList.ACTION RECEIVE_DAMAGE = 14;
	public const BuffList.ACTION PIERCE_INVINCIBLE = 15;
	public const BuffList.ACTION INVINCIBLE = 16;
	public const BuffList.ACTION BREAK_AVOIDANCE = 17;
	public const BuffList.ACTION AVOIDANCE = 18;
	public const BuffList.ACTION OVERWRITE_BATTLECLASS = 19;
	public const BuffList.ACTION OVERWRITE_CLASSRELATIO_ATK = 20;
	public const BuffList.ACTION OVERWRITE_CLASSRELATIO_DEF = 21;
	public const BuffList.ACTION COMMAND_NP_ATK = 22;
	public const BuffList.ACTION COMMAND_NP_DEF = 23;
	public const BuffList.ACTION DROP_NP = 24;
	public const BuffList.ACTION DROP_NP_DAMAGE = 25;
	public const BuffList.ACTION COMMAND_STAR_ATK = 26;
	public const BuffList.ACTION COMMAND_STAR_DEF = 27;
	public const BuffList.ACTION CRITICAL_POINT = 28;
	public const BuffList.ACTION STARWEIGHT = 29;
	public const BuffList.ACTION TURNEND_NP = 30;
	public const BuffList.ACTION TURNEND_STAR = 31;
	public const BuffList.ACTION TURNEND_HP_REGAIN = 32;
	public const BuffList.ACTION TURNEND_HP_REDUCE = 33;
	public const BuffList.ACTION GAIN_HP = 34;
	public const BuffList.ACTION TURNVAL_NP = 35;
	public const BuffList.ACTION GRANT_STATE = 36;
	public const BuffList.ACTION RESISTANCE_STATE = 37;
	public const BuffList.ACTION AVOID_STATE = 38;
	public const BuffList.ACTION DONOT_ACT = 39;
	public const BuffList.ACTION DONOT_SKILL = 40;
	public const BuffList.ACTION DONOT_NOBLE = 41;
	public const BuffList.ACTION DONOT_RECOVERY = 42;
	public const BuffList.ACTION INDIVIDUALITY_ADD = 43;
	public const BuffList.ACTION INDIVIDUALITY_SUB = 44;
	public const BuffList.ACTION HATE = 45;
	public const BuffList.ACTION CRITICAL_RATE = 46;
