
	// Methods

	// RVA: 0x2628694 Offset: 0x2628694 VA: 0x2628694
	public void .ctor() { }

	// RVA: 0x262869C Offset: 0x262869C VA: 0x262869C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2628A2C Offset: 0x2628A2C VA: 0x2628A2C
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2628B54 Offset: 0x2628B54 VA: 0x2628B54
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2628C5C Offset: 0x2628C5C VA: 0x2628C5C
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2628D4C Offset: 0x2628D4C VA: 0x2628D4C
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2628E34 Offset: 0x2628E34 VA: 0x2628E34
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x262936C Offset: 0x262936C VA: 0x262936C
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2629490 Offset: 0x2629490 VA: 0x2629490
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2628ECC Offset: 0x2628ECC VA: 0x2628ECC
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x262953C Offset: 0x262953C VA: 0x262953C
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x2629894 Offset: 0x2629894 VA: 0x2629894
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x2629924 Offset: 0x2629924 VA: 0x2629924
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x2629A08 Offset: 0x2629A08 VA: 0x2629A08
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2629D28 Offset: 0x2629D28 VA: 0x2629D28
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2629DDC Offset: 0x2629DDC VA: 0x2629DDC
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x26287A8 Offset: 0x26287A8 VA: 0x26287A8
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x2629AA4 Offset: 0x2629AA4 VA: 0x2629AA4
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x2629EE8 Offset: 0x2629EE8 VA: 0x2629EE8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1FieldElement : ECFieldElement // TypeDefIndex: 5051
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x26282C0 Offset: 0x26282C0 VA: 0x26282C0
	public void .ctor(BigInteger x) { }

	// RVA: 0x2629F9C Offset: 0x2629F9C VA: 0x2629F9C
	public void .ctor() { }

	// RVA: 0x2629FCC Offset: 0x2629FCC VA: 0x2629FCC
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2629FF8 Offset: 0x2629FF8 VA: 0x2629FF8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x262A004 Offset: 0x262A004 VA: 0x262A004 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x262A010 Offset: 0x262A010 VA: 0x262A010 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x262A038 Offset: 0x262A038 VA: 0x262A038 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x262A044 Offset: 0x262A044 VA: 0x262A044 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x262A08C Offset: 0x262A08C VA: 0x262A08C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x262A108 Offset: 0x262A108 VA: 0x262A108 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x262A2AC Offset: 0x262A2AC VA: 0x262A2AC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x262A350 Offset: 0x262A350 VA: 0x262A350 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x262A4F4 Offset: 0x262A4F4 VA: 0x262A4F4 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x262A698 Offset: 0x262A698 VA: 0x262A698 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x262A87C Offset: 0x262A87C VA: 0x262A87C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x262A920 Offset: 0x262A920 VA: 0x262A920 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x262A9C4 Offset: 0x262A9C4 VA: 0x262A9C4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x262AAA4 Offset: 0x262AAA4 VA: 0x262AAA4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x262AC84 Offset: 0x262AC84 VA: 0x262AC84 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x262AD20 Offset: 0x262AD20 VA: 0x262AD20 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x262ADBC Offset: 0x262ADBC VA: 0x262ADBC Slot: 27
	public virtual bool Equals(SecP256R1FieldElement other) { }

	// RVA: 0x262ADE8 Offset: 0x262ADE8 VA: 0x262ADE8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x262AE90 Offset: 0x262AE90 VA: 0x262AE90
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1Point : AbstractFpPoint // TypeDefIndex: 5052
{
	// Methods

	// RVA: 0x2628108 Offset: 0x2628108 VA: 0x2628108
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262846C Offset: 0x262846C VA: 0x262846C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26285D8 Offset: 0x26285D8 VA: 0x26285D8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262AF0C Offset: 0x262AF0C VA: 0x262AF0C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x262AFAC Offset: 0x262AFAC VA: 0x262AFAC Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x262B9D8 Offset: 0x262B9D8 VA: 0x262B9D8 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x262C090 Offset: 0x262C090 VA: 0x262C090 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x262C194 Offset: 0x262C194 VA: 0x262C194 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x262C230 Offset: 0x262C230 VA: 0x262C230 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1Curve : AbstractFpCurve // TypeDefIndex: 5053
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP384R1_DEFAULT_COORDS = 2;
	protected readonly SecP384R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x262C338 Offset: 0x262C338 VA: 0x262C338
	public void .ctor() { }

	// RVA: 0x262C520 Offset: 0x262C520 VA: 0x262C520 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x262C578 Offset: 0x262C578 VA: 0x262C578 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x262C584 Offset: 0x262C584 VA: 0x262C584 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x262C5EC Offset: 0x262C5EC VA: 0x262C5EC Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x262C5F4 Offset: 0x262C5F4 VA: 0x262C5F4 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x262C670 Offset: 0x262C670 VA: 0x262C670 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x262C7F4 Offset: 0x262C7F4 VA: 0x262C7F4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x262C954 Offset: 0x262C954 VA: 0x262C954 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262C9F4 Offset: 0x262C9F4 VA: 0x262C9F4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1Field // TypeDefIndex: 5054
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P11 = 4294967295;
	private const uint PExt23 = 4294967295;

	// Methods

	// RVA: 0x262CAA4 Offset: 0x262CAA4 VA: 0x262CAA4
	public void .ctor() { }

	// RVA: 0x262CAAC Offset: 0x262CAAC VA: 0x262CAAC
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x262CD88 Offset: 0x262CD88 VA: 0x262CD88
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x262CF14 Offset: 0x262CF14 VA: 0x262CF14
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x262D020 Offset: 0x262D020 VA: 0x262D020
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x262D11C Offset: 0x262D11C VA: 0x262D11C
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x262D208 Offset: 0x262D208 VA: 0x262D208
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x262D960 Offset: 0x262D960 VA: 0x262D960
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x262D2A4 Offset: 0x262D2A4 VA: 0x262D2A4
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x262DA18 Offset: 0x262DA18 VA: 0x262DA18
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x262DCB0 Offset: 0x262DCB0 VA: 0x262DCB0
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x262DD44 Offset: 0x262DD44 VA: 0x262DD44
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x262DE2C Offset: 0x262DE2C VA: 0x262DE2C
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x262E094 Offset: 0x262E094 VA: 0x262E094
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x262E1AC Offset: 0x262E1AC VA: 0x262E1AC
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x262CBC0 Offset: 0x262CBC0 VA: 0x262CBC0
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x262DECC Offset: 0x262DECC VA: 0x262DECC
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x262E2BC Offset: 0x262E2BC VA: 0x262E2BC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1FieldElement : ECFieldElement // TypeDefIndex: 5055
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x262C6D0 Offset: 0x262C6D0 VA: 0x262C6D0
	public void .ctor(BigInteger x) { }

	// RVA: 0x262E3A0 Offset: 0x262E3A0 VA: 0x262E3A0
	public void .ctor() { }

	// RVA: 0x262E3D4 Offset: 0x262E3D4 VA: 0x262E3D4
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x262E400 Offset: 0x262E400 VA: 0x262E400 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x262E410 Offset: 0x262E410 VA: 0x262E410 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x262E420 Offset: 0x262E420 VA: 0x262E420 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x262E448 Offset: 0x262E448 VA: 0x262E448 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x262E458 Offset: 0x262E458 VA: 0x262E458 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x262E4A0 Offset: 0x262E4A0 VA: 0x262E4A0 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x262E51C Offset: 0x262E51C VA: 0x262E51C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x262E6C4 Offset: 0x262E6C4 VA: 0x262E6C4 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x262E76C Offset: 0x262E76C VA: 0x262E76C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x262E914 Offset: 0x262E914 VA: 0x262E914 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x262EABC Offset: 0x262EABC VA: 0x262EABC Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x262ECA4 Offset: 0x262ECA4 VA: 0x262ECA4 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x262ED4C Offset: 0x262ED4C VA: 0x262ED4C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x262EDF4 Offset: 0x262EDF4 VA: 0x262EDF4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x262EED8 Offset: 0x262EED8 VA: 0x262EED8 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x262F1AC Offset: 0x262F1AC VA: 0x262F1AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x262F248 Offset: 0x262F248 VA: 0x262F248 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x262F2E4 Offset: 0x262F2E4 VA: 0x262F2E4 Slot: 27
	public virtual bool Equals(SecP384R1FieldElement other) { }

	// RVA: 0x262F318 Offset: 0x262F318 VA: 0x262F318 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x262F3C0 Offset: 0x262F3C0 VA: 0x262F3C0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1Point : AbstractFpPoint // TypeDefIndex: 5056
{
	// Methods

	// RVA: 0x262C518 Offset: 0x262C518 VA: 0x262C518
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262C87C Offset: 0x262C87C VA: 0x262C87C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x262C9E8 Offset: 0x262C9E8 VA: 0x262C9E8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262F43C Offset: 0x262F43C VA: 0x262F43C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x262F4DC Offset: 0x262F4DC VA: 0x262F4DC Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x262FF58 Offset: 0x262FF58 VA: 0x262FF58 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2630624 Offset: 0x2630624 VA: 0x2630624 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2630728 Offset: 0x2630728 VA: 0x2630728 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x26307C4 Offset: 0x26307C4 VA: 0x26307C4 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1Curve : AbstractFpCurve // TypeDefIndex: 5057
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP521R1_DEFAULT_COORDS = 2;
	protected readonly SecP521R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x26308CC Offset: 0x26308CC VA: 0x26308CC
	public void .ctor() { }

	// RVA: 0x2630AB4 Offset: 0x2630AB4 VA: 0x2630AB4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2630B0C Offset: 0x2630B0C VA: 0x2630B0C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2630B18 Offset: 0x2630B18 VA: 0x2630B18 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x2630B80 Offset: 0x2630B80 VA: 0x2630B80 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2630B88 Offset: 0x2630B88 VA: 0x2630B88 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2630C04 Offset: 0x2630C04 VA: 0x2630C04 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2630D88 Offset: 0x2630D88 VA: 0x2630D88 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2630EE8 Offset: 0x2630EE8 VA: 0x2630EE8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2630F88 Offset: 0x2630F88 VA: 0x2630F88
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1Field // TypeDefIndex: 5058
{
	// Fields
	internal static readonly uint[] P; // 0x0
	private const int P16 = 511;

	// Methods

	// RVA: 0x2631038 Offset: 0x2631038 VA: 0x2631038
	public void .ctor() { }

	// RVA: 0x2631040 Offset: 0x2631040 VA: 0x2631040
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x26311A8 Offset: 0x26311A8 VA: 0x26311A8
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x26312D8 Offset: 0x26312D8 VA: 0x26312D8
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2631384 Offset: 0x2631384 VA: 0x2631384
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2631424 Offset: 0x2631424 VA: 0x2631424
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2631704 Offset: 0x2631704 VA: 0x2631704
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x26315AC Offset: 0x26315AC VA: 0x26315AC
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x26317BC Offset: 0x26317BC VA: 0x26317BC
	public static void Reduce23(uint[] z) { }

	// RVA: 0x26318D8 Offset: 0x26318D8 VA: 0x26318D8
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x2631A1C Offset: 0x2631A1C VA: 0x2631A1C
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x2631B08 Offset: 0x2631B08 VA: 0x2631B08
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2631C00 Offset: 0x2631C00 VA: 0x2631C00
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x26314C0 Offset: 0x26314C0 VA: 0x26314C0
	protected static void ImplMultiply(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x263196C Offset: 0x263196C VA: 0x263196C
	protected static void ImplSquare(uint[] x, uint[] zz) { }

	// RVA: 0x2631C9C Offset: 0x2631C9C VA: 0x2631C9C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1FieldElement : ECFieldElement // TypeDefIndex: 5059
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2630C64 Offset: 0x2630C64 VA: 0x2630C64
	public void .ctor(BigInteger x) { }

	// RVA: 0x2631D18 Offset: 0x2631D18 VA: 0x2631D18
	public void .ctor() { }

	// RVA: 0x2631D4C Offset: 0x2631D4C VA: 0x2631D4C
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2631D78 Offset: 0x2631D78 VA: 0x2631D78 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2631D88 Offset: 0x2631D88 VA: 0x2631D88 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2631D98 Offset: 0x2631D98 VA: 0x2631D98 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2631DC0 Offset: 0x2631DC0 VA: 0x2631DC0 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2631DD0 Offset: 0x2631DD0 VA: 0x2631DD0 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2631E18 Offset: 0x2631E18 VA: 0x2631E18 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2631E94 Offset: 0x2631E94 VA: 0x2631E94 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x263203C Offset: 0x263203C VA: 0x263203C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x26320E4 Offset: 0x26320E4 VA: 0x26320E4 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x263228C Offset: 0x263228C VA: 0x263228C Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2632434 Offset: 0x2632434 VA: 0x2632434 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x263261C Offset: 0x263261C VA: 0x263261C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x26326C4 Offset: 0x26326C4 VA: 0x26326C4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x263276C Offset: 0x263276C VA: 0x263276C Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2632850 Offset: 0x2632850 VA: 0x2632850 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2632964 Offset: 0x2632964 VA: 0x2632964 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2632A00 Offset: 0x2632A00 VA: 0x2632A00 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2632A9C Offset: 0x2632A9C VA: 0x2632A9C Slot: 27
	public virtual bool Equals(SecP521R1FieldElement other) { }

	// RVA: 0x2632AD0 Offset: 0x2632AD0 VA: 0x2632AD0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2632B78 Offset: 0x2632B78 VA: 0x2632B78
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1Point : AbstractFpPoint // TypeDefIndex: 5060
{
	// Methods

	// RVA: 0x2630AAC Offset: 0x2630AAC VA: 0x2630AAC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2630E10 Offset: 0x2630E10 VA: 0x2630E10
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2630F7C Offset: 0x2630F7C VA: 0x2630F7C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2632BF4 Offset: 0x2632BF4 VA: 0x2632BF4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2632C94 Offset: 0x2632C94 VA: 0x2632C94 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2633718 Offset: 0x2633718 VA: 0x2633718 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2633DE4 Offset: 0x2633DE4 VA: 0x2633DE4 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2633EE8 Offset: 0x2633EE8 VA: 0x2633EE8 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2633F84 Offset: 0x2633F84 VA: 0x2633F84 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113Field // TypeDefIndex: 5061
{
	// Fields
	private const ulong M49 = 562949953421311;
	private const ulong M57 = 144115188075855871;

	// Methods

	// RVA: 0x263408C Offset: 0x263408C VA: 0x263408C
	public void .ctor() { }

	// RVA: 0x2634094 Offset: 0x2634094 VA: 0x2634094
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x26341A4 Offset: 0x26341A4 VA: 0x26341A4
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x263437C Offset: 0x263437C VA: 0x263437C
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x2634434 Offset: 0x2634434 VA: 0x2634434
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2634524 Offset: 0x2634524 VA: 0x2634524
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x2634714 Offset: 0x2634714 VA: 0x2634714
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2634C04 Offset: 0x2634C04 VA: 0x2634C04
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2634ABC Offset: 0x2634ABC VA: 0x2634ABC
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x2634464 Offset: 0x2634464 VA: 0x2634464
	public static void Reduce15(ulong[] z, int zOff) { }

	// RVA: 0x2634C58 Offset: 0x2634C58 VA: 0x2634C58
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x26346CC Offset: 0x26346CC VA: 0x26346CC
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x2634DD0 Offset: 0x2634DD0 VA: 0x2634DD0
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x2634764 Offset: 0x2634764 VA: 0x2634764
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x2634E1C Offset: 0x2634E1C VA: 0x2634E1C
	public static uint Trace(ulong[] x) { }

	// RVA: 0x26347E4 Offset: 0x26347E4 VA: 0x26347E4
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2634E60 Offset: 0x2634E60 VA: 0x2634E60
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x2634D50 Offset: 0x2634D50 VA: 0x2634D50
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113FieldElement : ECFieldElement // TypeDefIndex: 5062
{
	// Fields
	protected internal readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2635214 Offset: 0x2635214 VA: 0x2635214
	public void .ctor(BigInteger x) { }

	// RVA: 0x2635300 Offset: 0x2635300 VA: 0x2635300
	public void .ctor() { }

	// RVA: 0x2635330 Offset: 0x2635330 VA: 0x2635330
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x263535C Offset: 0x263535C VA: 0x263535C Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2635368 Offset: 0x2635368 VA: 0x2635368 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2635374 Offset: 0x2635374 VA: 0x2635374 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x26353BC Offset: 0x26353BC VA: 0x26353BC Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x26353C8 Offset: 0x26353C8 VA: 0x26353C8 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2635410 Offset: 0x2635410 VA: 0x2635410 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2635418 Offset: 0x2635418 VA: 0x2635418 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2635598 Offset: 0x2635598 VA: 0x2635598 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2635618 Offset: 0x2635618 VA: 0x2635618 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2635624 Offset: 0x2635624 VA: 0x2635624 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x26357A4 Offset: 0x26357A4 VA: 0x26357A4 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26357B4 Offset: 0x26357B4 VA: 0x26357B4 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2635B20 Offset: 0x2635B20 VA: 0x2635B20 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2635B70 Offset: 0x2635B70 VA: 0x2635B70 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2635B74 Offset: 0x2635B74 VA: 0x2635B74 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2635BF4 Offset: 0x2635BF4 VA: 0x2635BF4 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2635C04 Offset: 0x2635C04 VA: 0x2635C04 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2635E88 Offset: 0x2635E88 VA: 0x2635E88 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2635F20 Offset: 0x2635F20 VA: 0x2635F20 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2635FA0 Offset: 0x2635FA0 VA: 0x2635FA0 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2636020 Offset: 0x2636020 VA: 0x2636020 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2636028 Offset: 0x2636028 VA: 0x2636028 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x2636030 Offset: 0x2636030 VA: 0x2636030 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2636038 Offset: 0x2636038 VA: 0x2636038 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x2636040 Offset: 0x2636040 VA: 0x2636040 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2636048 Offset: 0x2636048 VA: 0x2636048 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x26360E4 Offset: 0x26360E4 VA: 0x26360E4 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2636180 Offset: 0x2636180 VA: 0x2636180 Slot: 32
	public virtual bool Equals(SecT113FieldElement other) { }

	// RVA: 0x26361AC Offset: 0x26361AC VA: 0x26361AC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R1Curve : AbstractF2mCurve // TypeDefIndex: 5063
{
	// Fields
	private const int SecT113R1_DEFAULT_COORDS = 6;
	protected readonly SecT113R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x27761F0 Offset: 0x27761F0 VA: 0x27761F0
	public void .ctor() { }

	// RVA: 0x27763BC Offset: 0x27763BC VA: 0x27763BC Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2776414 Offset: 0x2776414 VA: 0x2776414 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2776420 Offset: 0x2776420 VA: 0x2776420 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2776428 Offset: 0x2776428 VA: 0x2776428 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2776430 Offset: 0x2776430 VA: 0x2776430 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2776494 Offset: 0x2776494 VA: 0x2776494 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x27765F4 Offset: 0x27765F4 VA: 0x27765F4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2776694 Offset: 0x2776694 VA: 0x2776694 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x277669C Offset: 0x277669C VA: 0x277669C Slot: 33
	protected override ECPoint DecompressPoint(int yTilde, BigInteger X1) { }

	// RVA: 0x2776924 Offset: 0x2776924 VA: 0x2776924
	private ECFieldElement SolveQuadraticEquation(ECFieldElement beta) { }

	// RVA: 0x2776B84 Offset: 0x2776B84 VA: 0x2776B84 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2776B8C Offset: 0x2776B8C VA: 0x2776B8C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2776B94 Offset: 0x2776B94 VA: 0x2776B94 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2776B9C Offset: 0x2776B9C VA: 0x2776B9C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2776BA4 Offset: 0x2776BA4 VA: 0x2776BA4 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R1Point : AbstractF2mPoint // TypeDefIndex: 5064
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x27763B4 Offset: 0x27763B4 VA: 0x27763B4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277651C Offset: 0x277651C VA: 0x277651C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2776688 Offset: 0x2776688 VA: 0x2776688
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2776BAC Offset: 0x2776BAC VA: 0x2776BAC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2776C4C Offset: 0x2776C4C VA: 0x2776C4C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2776D8C Offset: 0x2776D8C VA: 0x2776D8C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2776E28 Offset: 0x2776E28 VA: 0x2776E28 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x27777C4 Offset: 0x27777C4 VA: 0x27777C4 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2777C0C Offset: 0x2777C0C VA: 0x2777C0C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x27782EC Offset: 0x27782EC VA: 0x27782EC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R2Curve : AbstractF2mCurve // TypeDefIndex: 5065
{
	// Fields
	private const int SecT113R2_DEFAULT_COORDS = 6;
	protected readonly SecT113R2Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x27784A8 Offset: 0x27784A8 VA: 0x27784A8
	public void .ctor() { }

	// RVA: 0x2778674 Offset: 0x2778674 VA: 0x2778674 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x27786CC Offset: 0x27786CC VA: 0x27786CC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x27786D8 Offset: 0x27786D8 VA: 0x27786D8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x27786E0 Offset: 0x27786E0 VA: 0x27786E0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x27786E8 Offset: 0x27786E8 VA: 0x27786E8 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x277874C Offset: 0x277874C VA: 0x277874C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x27788AC Offset: 0x27788AC VA: 0x27788AC Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x277894C Offset: 0x277894C VA: 0x277894C Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2778954 Offset: 0x2778954 VA: 0x2778954 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x277895C Offset: 0x277895C VA: 0x277895C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2778964 Offset: 0x2778964 VA: 0x2778964 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x277896C Offset: 0x277896C VA: 0x277896C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2778974 Offset: 0x2778974 VA: 0x2778974 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R2Point : AbstractF2mPoint // TypeDefIndex: 5066
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x277866C Offset: 0x277866C VA: 0x277866C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27787D4 Offset: 0x27787D4 VA: 0x27787D4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2778940 Offset: 0x2778940 VA: 0x2778940
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

