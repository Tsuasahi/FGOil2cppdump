
	// RVA: 0x24A3CE0 Offset: 0x24A3CE0 VA: 0x24A3CE0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24A3E84 Offset: 0x24A3E84 VA: 0x24A3E84 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24A4068 Offset: 0x24A4068 VA: 0x24A4068 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24A410C Offset: 0x24A410C VA: 0x24A410C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24A41B0 Offset: 0x24A41B0 VA: 0x24A41B0 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24A4290 Offset: 0x24A4290 VA: 0x24A4290 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24A4568 Offset: 0x24A4568 VA: 0x24A4568 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24A4604 Offset: 0x24A4604 VA: 0x24A4604 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24A46A0 Offset: 0x24A46A0 VA: 0x24A46A0 Slot: 27
	public virtual bool Equals(SecP256K1FieldElement other) { }

	// RVA: 0x24A46CC Offset: 0x24A46CC VA: 0x24A46CC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24A4774 Offset: 0x24A4774 VA: 0x24A4774
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256K1Point : AbstractFpPoint // TypeDefIndex: 5048
{
	// Methods

	// RVA: 0x24A2314 Offset: 0x24A2314 VA: 0x24A2314
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24A2678 Offset: 0x24A2678 VA: 0x24A2678
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24A27E4 Offset: 0x24A27E4 VA: 0x24A27E4
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24A47F0 Offset: 0x24A47F0 VA: 0x24A47F0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24A4890 Offset: 0x24A4890 VA: 0x24A4890 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24A52BC Offset: 0x24A52BC VA: 0x24A52BC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24A58F0 Offset: 0x24A58F0 VA: 0x24A58F0 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24A59F4 Offset: 0x24A59F4 VA: 0x24A59F4 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24A5A90 Offset: 0x24A5A90 VA: 0x24A5A90 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1Curve : AbstractFpCurve // TypeDefIndex: 5049
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP256R1_DEFAULT_COORDS = 2;
	protected readonly SecP256R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24A5B98 Offset: 0x24A5B98 VA: 0x24A5B98
	public void .ctor() { }

	// RVA: 0x24A5D80 Offset: 0x24A5D80 VA: 0x24A5D80 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24A5DD8 Offset: 0x24A5DD8 VA: 0x24A5DD8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24A5DE4 Offset: 0x24A5DE4 VA: 0x24A5DE4 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24A5E4C Offset: 0x24A5E4C VA: 0x24A5E4C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24A5E54 Offset: 0x24A5E54 VA: 0x24A5E54 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24A5ED0 Offset: 0x24A5ED0 VA: 0x24A5ED0 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24A6054 Offset: 0x24A6054 VA: 0x24A6054 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24A61B4 Offset: 0x24A61B4 VA: 0x24A61B4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24A6254 Offset: 0x24A6254 VA: 0x24A6254
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1Field // TypeDefIndex: 5050
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	internal const uint P7 = 4294967295;
	internal const uint PExt15 = 4294967294;

	// Methods

	// RVA: 0x24A6304 Offset: 0x24A6304 VA: 0x24A6304
	public void .ctor() { }

	// RVA: 0x24A630C Offset: 0x24A630C VA: 0x24A630C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24A669C Offset: 0x24A669C VA: 0x24A669C
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24A67C4 Offset: 0x24A67C4 VA: 0x24A67C4
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24A68CC Offset: 0x24A68CC VA: 0x24A68CC
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24A69BC Offset: 0x24A69BC VA: 0x24A69BC
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24A6AA4 Offset: 0x24A6AA4 VA: 0x24A6AA4
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24A6FDC Offset: 0x24A6FDC VA: 0x24A6FDC
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24A7100 Offset: 0x24A7100 VA: 0x24A7100
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24A6B3C Offset: 0x24A6B3C VA: 0x24A6B3C
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24A71AC Offset: 0x24A71AC VA: 0x24A71AC
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24A7504 Offset: 0x24A7504 VA: 0x24A7504
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24A7594 Offset: 0x24A7594 VA: 0x24A7594
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24A7678 Offset: 0x24A7678 VA: 0x24A7678
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24A7998 Offset: 0x24A7998 VA: 0x24A7998
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24A7A4C Offset: 0x24A7A4C VA: 0x24A7A4C
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24A6418 Offset: 0x24A6418 VA: 0x24A6418
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x24A7714 Offset: 0x24A7714 VA: 0x24A7714
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x24A7B58 Offset: 0x24A7B58 VA: 0x24A7B58
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1FieldElement : ECFieldElement // TypeDefIndex: 5051
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24A5F30 Offset: 0x24A5F30 VA: 0x24A5F30
	public void .ctor(BigInteger x) { }

	// RVA: 0x24A7C0C Offset: 0x24A7C0C VA: 0x24A7C0C
	public void .ctor() { }

	// RVA: 0x24A7C3C Offset: 0x24A7C3C VA: 0x24A7C3C
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24A7C68 Offset: 0x24A7C68 VA: 0x24A7C68 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24A7C74 Offset: 0x24A7C74 VA: 0x24A7C74 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24A7C80 Offset: 0x24A7C80 VA: 0x24A7C80 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24A7CA8 Offset: 0x24A7CA8 VA: 0x24A7CA8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24A7CB4 Offset: 0x24A7CB4 VA: 0x24A7CB4 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24A7CFC Offset: 0x24A7CFC VA: 0x24A7CFC Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24A7D78 Offset: 0x24A7D78 VA: 0x24A7D78 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24A7F1C Offset: 0x24A7F1C VA: 0x24A7F1C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24A7FC0 Offset: 0x24A7FC0 VA: 0x24A7FC0 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24A8164 Offset: 0x24A8164 VA: 0x24A8164 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24A8308 Offset: 0x24A8308 VA: 0x24A8308 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24A84EC Offset: 0x24A84EC VA: 0x24A84EC Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24A8590 Offset: 0x24A8590 VA: 0x24A8590 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24A8634 Offset: 0x24A8634 VA: 0x24A8634 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24A8714 Offset: 0x24A8714 VA: 0x24A8714 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24A88F4 Offset: 0x24A88F4 VA: 0x24A88F4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24A8990 Offset: 0x24A8990 VA: 0x24A8990 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24A8A2C Offset: 0x24A8A2C VA: 0x24A8A2C Slot: 27
	public virtual bool Equals(SecP256R1FieldElement other) { }

	// RVA: 0x24A8A58 Offset: 0x24A8A58 VA: 0x24A8A58 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24A8B00 Offset: 0x24A8B00 VA: 0x24A8B00
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP256R1Point : AbstractFpPoint // TypeDefIndex: 5052
{
	// Methods

	// RVA: 0x24A5D78 Offset: 0x24A5D78 VA: 0x24A5D78
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24A60DC Offset: 0x24A60DC VA: 0x24A60DC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24A6248 Offset: 0x24A6248 VA: 0x24A6248
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24A8B7C Offset: 0x24A8B7C VA: 0x24A8B7C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24A8C1C Offset: 0x24A8C1C VA: 0x24A8C1C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24A9648 Offset: 0x24A9648 VA: 0x24A9648 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24A9D00 Offset: 0x24A9D00 VA: 0x24A9D00 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24A9E04 Offset: 0x24A9E04 VA: 0x24A9E04 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24A9EA0 Offset: 0x24A9EA0 VA: 0x24A9EA0 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1Curve : AbstractFpCurve // TypeDefIndex: 5053
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP384R1_DEFAULT_COORDS = 2;
	protected readonly SecP384R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24A9FA8 Offset: 0x24A9FA8 VA: 0x24A9FA8
	public void .ctor() { }

	// RVA: 0x24AA190 Offset: 0x24AA190 VA: 0x24AA190 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24AA1E8 Offset: 0x24AA1E8 VA: 0x24AA1E8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24AA1F4 Offset: 0x24AA1F4 VA: 0x24AA1F4 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24AA25C Offset: 0x24AA25C VA: 0x24AA25C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24AA264 Offset: 0x24AA264 VA: 0x24AA264 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24AA2E0 Offset: 0x24AA2E0 VA: 0x24AA2E0 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24AA464 Offset: 0x24AA464 VA: 0x24AA464 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24AA5C4 Offset: 0x24AA5C4 VA: 0x24AA5C4 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24AA664 Offset: 0x24AA664 VA: 0x24AA664
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1Field // TypeDefIndex: 5054
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P11 = 4294967295;
	private const uint PExt23 = 4294967295;

	// Methods

	// RVA: 0x24AA714 Offset: 0x24AA714 VA: 0x24AA714
	public void .ctor() { }

	// RVA: 0x24AA71C Offset: 0x24AA71C VA: 0x24AA71C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24AA9F8 Offset: 0x24AA9F8 VA: 0x24AA9F8
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24AAB84 Offset: 0x24AAB84 VA: 0x24AAB84
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24AAC90 Offset: 0x24AAC90 VA: 0x24AAC90
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24AAD8C Offset: 0x24AAD8C VA: 0x24AAD8C
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24AAE78 Offset: 0x24AAE78 VA: 0x24AAE78
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24AB5D0 Offset: 0x24AB5D0 VA: 0x24AB5D0
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24AAF14 Offset: 0x24AAF14 VA: 0x24AAF14
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24AB688 Offset: 0x24AB688 VA: 0x24AB688
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24AB920 Offset: 0x24AB920 VA: 0x24AB920
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24AB9B4 Offset: 0x24AB9B4 VA: 0x24AB9B4
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24ABA9C Offset: 0x24ABA9C VA: 0x24ABA9C
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24ABD04 Offset: 0x24ABD04 VA: 0x24ABD04
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24ABE1C Offset: 0x24ABE1C VA: 0x24ABE1C
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24AA830 Offset: 0x24AA830 VA: 0x24AA830
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x24ABB3C Offset: 0x24ABB3C VA: 0x24ABB3C
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x24ABF2C Offset: 0x24ABF2C VA: 0x24ABF2C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1FieldElement : ECFieldElement // TypeDefIndex: 5055
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24AA340 Offset: 0x24AA340 VA: 0x24AA340
	public void .ctor(BigInteger x) { }

	// RVA: 0x24AC010 Offset: 0x24AC010 VA: 0x24AC010
	public void .ctor() { }

	// RVA: 0x24AC044 Offset: 0x24AC044 VA: 0x24AC044
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24AC070 Offset: 0x24AC070 VA: 0x24AC070 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24AC080 Offset: 0x24AC080 VA: 0x24AC080 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24AC090 Offset: 0x24AC090 VA: 0x24AC090 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24AC0B8 Offset: 0x24AC0B8 VA: 0x24AC0B8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24AC0C8 Offset: 0x24AC0C8 VA: 0x24AC0C8 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24AC110 Offset: 0x24AC110 VA: 0x24AC110 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24AC18C Offset: 0x24AC18C VA: 0x24AC18C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24AC334 Offset: 0x24AC334 VA: 0x24AC334 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24AC3DC Offset: 0x24AC3DC VA: 0x24AC3DC Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24AC584 Offset: 0x24AC584 VA: 0x24AC584 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24AC72C Offset: 0x24AC72C VA: 0x24AC72C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24AC914 Offset: 0x24AC914 VA: 0x24AC914 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24AC9BC Offset: 0x24AC9BC VA: 0x24AC9BC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24ACA64 Offset: 0x24ACA64 VA: 0x24ACA64 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24ACB48 Offset: 0x24ACB48 VA: 0x24ACB48 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24ACE1C Offset: 0x24ACE1C VA: 0x24ACE1C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24ACEB8 Offset: 0x24ACEB8 VA: 0x24ACEB8 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24ACF54 Offset: 0x24ACF54 VA: 0x24ACF54 Slot: 27
	public virtual bool Equals(SecP384R1FieldElement other) { }

	// RVA: 0x24ACF88 Offset: 0x24ACF88 VA: 0x24ACF88 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24AD030 Offset: 0x24AD030 VA: 0x24AD030
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP384R1Point : AbstractFpPoint // TypeDefIndex: 5056
{
	// Methods

	// RVA: 0x24AA188 Offset: 0x24AA188 VA: 0x24AA188
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24AA4EC Offset: 0x24AA4EC VA: 0x24AA4EC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24AA658 Offset: 0x24AA658 VA: 0x24AA658
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24AD0AC Offset: 0x24AD0AC VA: 0x24AD0AC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24AD14C Offset: 0x24AD14C VA: 0x24AD14C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24ADBC8 Offset: 0x24ADBC8 VA: 0x24ADBC8 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24AE294 Offset: 0x24AE294 VA: 0x24AE294 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24AE398 Offset: 0x24AE398 VA: 0x24AE398 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24AE434 Offset: 0x24AE434 VA: 0x24AE434 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1Curve : AbstractFpCurve // TypeDefIndex: 5057
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP521R1_DEFAULT_COORDS = 2;
	protected readonly SecP521R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24AE53C Offset: 0x24AE53C VA: 0x24AE53C
	public void .ctor() { }

	// RVA: 0x24AE724 Offset: 0x24AE724 VA: 0x24AE724 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24AE77C Offset: 0x24AE77C VA: 0x24AE77C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24AE788 Offset: 0x24AE788 VA: 0x24AE788 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24AE7F0 Offset: 0x24AE7F0 VA: 0x24AE7F0 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24AE7F8 Offset: 0x24AE7F8 VA: 0x24AE7F8 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24AE874 Offset: 0x24AE874 VA: 0x24AE874 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24AE9F8 Offset: 0x24AE9F8 VA: 0x24AE9F8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24AEB58 Offset: 0x24AEB58 VA: 0x24AEB58 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24AEBF8 Offset: 0x24AEBF8 VA: 0x24AEBF8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1Field // TypeDefIndex: 5058
{
	// Fields
	internal static readonly uint[] P; // 0x0
	private const int P16 = 511;

	// Methods

	// RVA: 0x24AECA8 Offset: 0x24AECA8 VA: 0x24AECA8
	public void .ctor() { }

	// RVA: 0x24AECB0 Offset: 0x24AECB0 VA: 0x24AECB0
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24AEE18 Offset: 0x24AEE18 VA: 0x24AEE18
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24AEF48 Offset: 0x24AEF48 VA: 0x24AEF48
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24AEFF4 Offset: 0x24AEFF4 VA: 0x24AEFF4
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24AF094 Offset: 0x24AF094 VA: 0x24AF094
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24AF374 Offset: 0x24AF374 VA: 0x24AF374
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24AF21C Offset: 0x24AF21C VA: 0x24AF21C
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24AF42C Offset: 0x24AF42C VA: 0x24AF42C
	public static void Reduce23(uint[] z) { }

	// RVA: 0x24AF548 Offset: 0x24AF548 VA: 0x24AF548
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24AF68C Offset: 0x24AF68C VA: 0x24AF68C
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24AF778 Offset: 0x24AF778 VA: 0x24AF778
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24AF870 Offset: 0x24AF870 VA: 0x24AF870
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24AF130 Offset: 0x24AF130 VA: 0x24AF130
	protected static void ImplMultiply(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24AF5DC Offset: 0x24AF5DC VA: 0x24AF5DC
	protected static void ImplSquare(uint[] x, uint[] zz) { }

	// RVA: 0x24AF90C Offset: 0x24AF90C VA: 0x24AF90C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1FieldElement : ECFieldElement // TypeDefIndex: 5059
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24AE8D4 Offset: 0x24AE8D4 VA: 0x24AE8D4
	public void .ctor(BigInteger x) { }

	// RVA: 0x24AF988 Offset: 0x24AF988 VA: 0x24AF988
	public void .ctor() { }

	// RVA: 0x24AF9BC Offset: 0x24AF9BC VA: 0x24AF9BC
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24AF9E8 Offset: 0x24AF9E8 VA: 0x24AF9E8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24AF9F8 Offset: 0x24AF9F8 VA: 0x24AF9F8 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24AFA08 Offset: 0x24AFA08 VA: 0x24AFA08 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24AFA30 Offset: 0x24AFA30 VA: 0x24AFA30 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24AFA40 Offset: 0x24AFA40 VA: 0x24AFA40 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24AFA88 Offset: 0x24AFA88 VA: 0x24AFA88 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24AFB04 Offset: 0x24AFB04 VA: 0x24AFB04 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24AFCAC Offset: 0x24AFCAC VA: 0x24AFCAC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24AFD54 Offset: 0x24AFD54 VA: 0x24AFD54 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24AFEFC Offset: 0x24AFEFC VA: 0x24AFEFC Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24B00A4 Offset: 0x24B00A4 VA: 0x24B00A4 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24B028C Offset: 0x24B028C VA: 0x24B028C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24B0334 Offset: 0x24B0334 VA: 0x24B0334 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24B03DC Offset: 0x24B03DC VA: 0x24B03DC Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24B04C0 Offset: 0x24B04C0 VA: 0x24B04C0 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24B05D4 Offset: 0x24B05D4 VA: 0x24B05D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24B0670 Offset: 0x24B0670 VA: 0x24B0670 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24B070C Offset: 0x24B070C VA: 0x24B070C Slot: 27
	public virtual bool Equals(SecP521R1FieldElement other) { }

	// RVA: 0x24B0740 Offset: 0x24B0740 VA: 0x24B0740 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24B07E8 Offset: 0x24B07E8 VA: 0x24B07E8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP521R1Point : AbstractFpPoint // TypeDefIndex: 5060
{
	// Methods

	// RVA: 0x24AE71C Offset: 0x24AE71C VA: 0x24AE71C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24AEA80 Offset: 0x24AEA80 VA: 0x24AEA80
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24AEBEC Offset: 0x24AEBEC VA: 0x24AEBEC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24B0864 Offset: 0x24B0864 VA: 0x24B0864 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24B0904 Offset: 0x24B0904 VA: 0x24B0904 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24B1388 Offset: 0x24B1388 VA: 0x24B1388 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24B1A54 Offset: 0x24B1A54 VA: 0x24B1A54 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24B1B58 Offset: 0x24B1B58 VA: 0x24B1B58 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24B1BF4 Offset: 0x24B1BF4 VA: 0x24B1BF4 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113Field // TypeDefIndex: 5061
{
	// Fields
	private const ulong M49 = 562949953421311;
	private const ulong M57 = 144115188075855871;

	// Methods

	// RVA: 0x24B1CFC Offset: 0x24B1CFC VA: 0x24B1CFC
	public void .ctor() { }

	// RVA: 0x24B1D04 Offset: 0x24B1D04 VA: 0x24B1D04
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x24B1E14 Offset: 0x24B1E14 VA: 0x24B1E14
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x24B1FEC Offset: 0x24B1FEC VA: 0x24B1FEC
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x24B20A4 Offset: 0x24B20A4 VA: 0x24B20A4
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24B2194 Offset: 0x24B2194 VA: 0x24B2194
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x24B2384 Offset: 0x24B2384 VA: 0x24B2384
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x24B2874 Offset: 0x24B2874 VA: 0x24B2874
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x24B272C Offset: 0x24B272C VA: 0x24B272C
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x24B20D4 Offset: 0x24B20D4 VA: 0x24B20D4
	public static void Reduce15(ulong[] z, int zOff) { }

	// RVA: 0x24B28C8 Offset: 0x24B28C8 VA: 0x24B28C8
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x24B233C Offset: 0x24B233C VA: 0x24B233C
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x24B2A40 Offset: 0x24B2A40 VA: 0x24B2A40
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x24B23D4 Offset: 0x24B23D4 VA: 0x24B23D4
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x24B2A8C Offset: 0x24B2A8C VA: 0x24B2A8C
	public static uint Trace(ulong[] x) { }

	// RVA: 0x24B2454 Offset: 0x24B2454 VA: 0x24B2454
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x24B2AD0 Offset: 0x24B2AD0 VA: 0x24B2AD0
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x24B29C0 Offset: 0x24B29C0 VA: 0x24B29C0
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113FieldElement : ECFieldElement // TypeDefIndex: 5062
{
	// Fields
	protected internal readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x24B2E84 Offset: 0x24B2E84 VA: 0x24B2E84
	public void .ctor(BigInteger x) { }

	// RVA: 0x24B2F70 Offset: 0x24B2F70 VA: 0x24B2F70
	public void .ctor() { }

	// RVA: 0x24B2FA0 Offset: 0x24B2FA0 VA: 0x24B2FA0
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x24B2FCC Offset: 0x24B2FCC VA: 0x24B2FCC Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24B2FD8 Offset: 0x24B2FD8 VA: 0x24B2FD8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24B2FE4 Offset: 0x24B2FE4 VA: 0x24B2FE4 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24B302C Offset: 0x24B302C VA: 0x24B302C Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24B3038 Offset: 0x24B3038 VA: 0x24B3038 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24B3080 Offset: 0x24B3080 VA: 0x24B3080 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24B3088 Offset: 0x24B3088 VA: 0x24B3088 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24B3208 Offset: 0x24B3208 VA: 0x24B3208 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24B3288 Offset: 0x24B3288 VA: 0x24B3288 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24B3294 Offset: 0x24B3294 VA: 0x24B3294 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24B3414 Offset: 0x24B3414 VA: 0x24B3414 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24B3424 Offset: 0x24B3424 VA: 0x24B3424 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24B3790 Offset: 0x24B3790 VA: 0x24B3790 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24B37E0 Offset: 0x24B37E0 VA: 0x24B37E0 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24B37E4 Offset: 0x24B37E4 VA: 0x24B37E4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24B3864 Offset: 0x24B3864 VA: 0x24B3864 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24B3874 Offset: 0x24B3874 VA: 0x24B3874 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24B3AF8 Offset: 0x24B3AF8 VA: 0x24B3AF8 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x24B3B90 Offset: 0x24B3B90 VA: 0x24B3B90 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24B3C10 Offset: 0x24B3C10 VA: 0x24B3C10 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24B3C90 Offset: 0x24B3C90 VA: 0x24B3C90 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x24B3C98 Offset: 0x24B3C98 VA: 0x24B3C98 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x24B3CA0 Offset: 0x24B3CA0 VA: 0x24B3CA0 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x24B3CA8 Offset: 0x24B3CA8 VA: 0x24B3CA8 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x24B3CB0 Offset: 0x24B3CB0 VA: 0x24B3CB0 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x24B3CB8 Offset: 0x24B3CB8 VA: 0x24B3CB8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24B3D54 Offset: 0x24B3D54 VA: 0x24B3D54 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24B3DF0 Offset: 0x24B3DF0 VA: 0x24B3DF0 Slot: 32
	public virtual bool Equals(SecT113FieldElement other) { }

	// RVA: 0x24B3E1C Offset: 0x24B3E1C VA: 0x24B3E1C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R1Curve : AbstractF2mCurve // TypeDefIndex: 5063
{
	// Fields
	private const int SecT113R1_DEFAULT_COORDS = 6;
	protected readonly SecT113R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x266B430 Offset: 0x266B430 VA: 0x266B430
	public void .ctor() { }

	// RVA: 0x266B5FC Offset: 0x266B5FC VA: 0x266B5FC Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x266B654 Offset: 0x266B654 VA: 0x266B654 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x266B660 Offset: 0x266B660 VA: 0x266B660 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x266B668 Offset: 0x266B668 VA: 0x266B668 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x266B670 Offset: 0x266B670 VA: 0x266B670 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x266B6D4 Offset: 0x266B6D4 VA: 0x266B6D4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x266B834 Offset: 0x266B834 VA: 0x266B834 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x266B8D4 Offset: 0x266B8D4 VA: 0x266B8D4 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x266B8DC Offset: 0x266B8DC VA: 0x266B8DC Slot: 33
	protected override ECPoint DecompressPoint(int yTilde, BigInteger X1) { }

	// RVA: 0x266BB64 Offset: 0x266BB64 VA: 0x266BB64
	private ECFieldElement SolveQuadraticEquation(ECFieldElement beta) { }

	// RVA: 0x266BDC4 Offset: 0x266BDC4 VA: 0x266BDC4 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x266BDCC Offset: 0x266BDCC VA: 0x266BDCC Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x266BDD4 Offset: 0x266BDD4 VA: 0x266BDD4 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x266BDDC Offset: 0x266BDDC VA: 0x266BDDC Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x266BDE4 Offset: 0x266BDE4 VA: 0x266BDE4 Slot: 43
	public virtual int get_K3() { }
