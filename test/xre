	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0200 Offset: 0xCB0200 VA: 0xCB0200
private sealed class BattleLogic.<coroutineLoadSaveWave>c__IteratorE : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9070
{
	// Fields
	internal BattleServantData[] <svtlist>__0; // 0x10
	internal BattleServantData[] $locvar4; // 0x18
	internal int $locvar5; // 0x20
	internal BattleLogic $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48834 Offset: 0xD48834 VA: 0xD48834
	// RVA: 0x1D91FD4 Offset: 0x1D91FD4 VA: 0x1D91FD4
	public void .ctor() { }

	// RVA: 0x1D91FDC Offset: 0x1D91FDC VA: 0x1D91FDC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48844 Offset: 0xD48844 VA: 0xD48844
	// RVA: 0x1D9246C Offset: 0x1D9246C VA: 0x1D9246C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48854 Offset: 0xD48854 VA: 0xD48854
	// RVA: 0x1D92474 Offset: 0x1D92474 VA: 0x1D92474 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48864 Offset: 0xD48864 VA: 0xD48864
	// RVA: 0x1D9247C Offset: 0x1D9247C VA: 0x1D9247C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48874 Offset: 0xD48874 VA: 0xD48874
	// RVA: 0x1D92490 Offset: 0x1D92490 VA: 0x1D92490 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0210 Offset: 0xCB0210 VA: 0xCB0210
private sealed class BattleLogic.<updateFieldBuff>c__AnonStorey18 // TypeDefIndex: 9071
{
	// Fields
	internal int[] fieldSvtIds; // 0x10
	internal FieldAliveServantData aliveSvtData; // 0x18
	internal BattleLogic $this; // 0x20

	// Methods

	// RVA: 0x1D93AB4 Offset: 0x1D93AB4 VA: 0x1D93AB4
	public void .ctor() { }

	// RVA: 0x1D93ABC Offset: 0x1D93ABC VA: 0x1D93ABC
	internal void <>m__0(AiNpcBattleServantData npc) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0220 Offset: 0xCB0220 VA: 0xCB0220
private sealed class BattleLogic.<CorCallServant>c__IteratorF : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9072
{
	// Fields
	internal BattleActionData actionData; // 0x10
	internal BattleActorControl <actor>__0; // 0x18
	internal BattleActionData.SummonServant[] <list>__0; // 0x20
	internal List<BattleLogic.SummonInfo> <infoList>__0; // 0x28
	internal List.Enumerator<BattleLogic.SummonInfo> $locvar0; // 0x30
	internal BattleLogic $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48884 Offset: 0xD48884 VA: 0xD48884
	// RVA: 0x176997C Offset: 0x176997C VA: 0x176997C
	public void .ctor() { }

	// RVA: 0x176A578 Offset: 0x176A578 VA: 0x176A578 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48894 Offset: 0xD48894 VA: 0xD48894
	// RVA: 0x176A9F8 Offset: 0x176A9F8 VA: 0x176A9F8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD488A4 Offset: 0xD488A4 VA: 0xD488A4
	// RVA: 0x176AA00 Offset: 0x176AA00 VA: 0x176AA00 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD488B4 Offset: 0xD488B4 VA: 0xD488B4
	// RVA: 0x176AA08 Offset: 0x176AA08 VA: 0x176AA08 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD488C4 Offset: 0xD488C4 VA: 0xD488C4
	// RVA: 0x176AA1C Offset: 0x176AA1C VA: 0x176AA1C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0230 Offset: 0xCB0230 VA: 0xCB0230
private sealed class BattleLogic.<CorFieldCallServant>c__Iterator10 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9073
{
	// Fields
	internal BattleActionData actionData; // 0x10
	internal BattleActionData.SummonServant[] <summonArray>__0; // 0x18
	internal List<BattleLogic.SummonInfo> <summonInfoList>__0; // 0x20
	internal List<BattleActorControl> <summonActorList>__0; // 0x28
	internal List.Enumerator<BattleLogic.SummonInfo> $locvar0; // 0x30
	internal int <summonEndCount>__0; // 0x48
	internal List.Enumerator<BattleActorControl> $locvar1; // 0x50
	internal BattleLogic $this; // 0x68
	internal object $current; // 0x70
	internal bool $disposing; // 0x78
	internal int $PC; // 0x7C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD488D4 Offset: 0xD488D4 VA: 0xD488D4
	// RVA: 0x1769C8C Offset: 0x1769C8C VA: 0x1769C8C
	public void .ctor() { }

	// RVA: 0x176AA84 Offset: 0x176AA84 VA: 0x176AA84 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD488E4 Offset: 0xD488E4 VA: 0xD488E4
	// RVA: 0x176B028 Offset: 0x176B028 VA: 0x176B028 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD488F4 Offset: 0xD488F4 VA: 0xD488F4
	// RVA: 0x176B030 Offset: 0x176B030 VA: 0x176B030 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48904 Offset: 0xD48904 VA: 0xD48904
	// RVA: 0x176B038 Offset: 0x176B038 VA: 0x176B038 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48914 Offset: 0xD48914 VA: 0xD48914
	// RVA: 0x176B04C Offset: 0x176B04C VA: 0x176B04C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0240 Offset: 0xCB0240 VA: 0xCB0240
private sealed class BattleLogic.<CoroutineCheckAssistSkill>c__Iterator11 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9074
{
	// Fields
	internal List<BattleLogicTask> <logicTaskList>__1; // 0x10
	internal BattleLogic $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48924 Offset: 0xD48924 VA: 0xD48924
	// RVA: 0x176A038 Offset: 0x176A038 VA: 0x176A038
	public void .ctor() { }

	// RVA: 0x176B0B4 Offset: 0x176B0B4 VA: 0x176B0B4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48934 Offset: 0xD48934 VA: 0xD48934
	// RVA: 0x176B810 Offset: 0x176B810 VA: 0x176B810 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48944 Offset: 0xD48944 VA: 0xD48944
	// RVA: 0x176B818 Offset: 0x176B818 VA: 0x176B818 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48954 Offset: 0xD48954 VA: 0xD48954
	// RVA: 0x176B820 Offset: 0x176B820 VA: 0x176B820 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48964 Offset: 0xD48964 VA: 0xD48964
	// RVA: 0x176B834 Offset: 0x176B834 VA: 0x176B834 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleLogicBuff // TypeDefIndex: 9075
{
	// Methods

	// RVA: 0x1D94CCC Offset: 0x1D94CCC VA: 0x1D94CCC
	public void .ctor() { }
}

// Namespace: 
public class BattleLogicBuff.BaseProcess // TypeDefIndex: 9076
{
	// Methods

	// RVA: 0x1D94CD4 Offset: 0x1D94CD4 VA: 0x1D94CD4
	public void .ctor() { }

	// RVA: 0x1D94CDC Offset: 0x1D94CDC VA: 0x1D94CDC Slot: 4
	public virtual void PrevAddCalcBuffParam(BattleBuffData.BuffData damageBuff, int totalParam, int plusMinus, ref int curParam) { }

	// RVA: 0x1D94CE0 Offset: 0x1D94CE0 VA: 0x1D94CE0 Slot: 5
	public virtual void AfterAllAddCalcBuffParam(ref int totalParam) { }
}

// Namespace: 
public class BattleLogicBuff.ReduceHpProcess : BattleLogicBuff.BaseProcess // TypeDefIndex: 9077
{
	// Fields
	private List<BattleLogicBuff.ReduceHpProcess.BuffInfo> buffList; // 0x10
	private BattleLogicBuff.PreventDeathDamageProcess preventDeathProc; // 0x18

	// Methods

	// RVA: 0x1D950B8 Offset: 0x1D950B8 VA: 0x1D950B8
	public void .ctor(BattleServantData svtData) { }

	// RVA: 0x1D9515C Offset: 0x1D9515C VA: 0x1D9515C Slot: 4
	public override void PrevAddCalcBuffParam(BattleBuffData.BuffData damageBuff, int totalParam, int plusMinus, ref int curParam) { }

	// RVA: 0x1D9524C Offset: 0x1D9524C VA: 0x1D9524C Slot: 5
	public override void AfterAllAddCalcBuffParam(ref int totalParam) { }
}

// Namespace: 
public class BattleLogicBuff.ReduceHpProcess.BuffInfo // TypeDefIndex: 9078
{
	// Fields
	public BattleBuffData.BuffData buff; // 0x10
	public int damage; // 0x18

	// Methods

	// RVA: 0x1D95244 Offset: 0x1D95244 VA: 0x1D95244
	public void .ctor() { }
}

// Namespace: 
public class BattleLogicBuff.PreventDeathDamageProcess // TypeDefIndex: 9079
{
	// Fields
	private BattleServantData selfSvt; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD1D44 Offset: 0xCD1D44 VA: 0xCD1D44
	private static Action<BattleBuffData.BuffData> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1D94CE4 Offset: 0x1D94CE4 VA: 0x1D94CE4
	public void .ctor(BattleServantData svtData) { }

	// RVA: 0x1D94D10 Offset: 0x1D94D10 VA: 0x1D94D10
	private bool IsApplyEffect(int curHp, List<BattleLogicBuff.ReduceHpProcess.BuffInfo> reduceHpBuffList) { }

	// RVA: 0x1D95010 Offset: 0x1D95010 VA: 0x1D95010
	public int GetDamageAffectedEffect(int damage, List<BattleLogicBuff.ReduceHpProcess.BuffInfo> reduceHpBuffList) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE34 Offset: 0xD3AE34 VA: 0xD3AE34
	// RVA: 0x1D9508C Offset: 0x1D9508C VA: 0x1D9508C
	private static void <IsApplyEffect>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
public class BattleLogicClassRelation // TypeDefIndex: 9080
{
	// Fields
	private BattleLogicClassRelation.Process[] _procArray; // 0x10
	private ClassRelationOverwriteMaster _overwriteMst; // 0x18

	// Properties
	public ClassRelationOverwriteMaster OverwriteMst { get; }

	// Methods

	// RVA: 0x1D952A0 Offset: 0x1D952A0 VA: 0x1D952A0
	public void .ctor() { }

	// RVA: 0x1D954D0 Offset: 0x1D954D0 VA: 0x1D954D0
	public ClassRelationOverwriteMaster get_OverwriteMst() { }

	// RVA: 0x1D95550 Offset: 0x1D95550 VA: 0x1D95550
	public BattleLogicClassRelation.ResultData proc(BattleLogicClassRelation.Argument arg) { }
}

// Namespace: 
public class BattleLogicClassRelation.Argument // TypeDefIndex: 9081
{
	// Fields
	public BattleCommandData command; // 0x10
	public BattleServantData atkSvt; // 0x18
	public BattleServantData defSvt; // 0x20
	public bool isAction; // 0x28
	public int atkClassId; // 0x2C
	public int defClassId; // 0x30
	public int atkRelationId; // 0x34
	public int defRelationId; // 0x38

	// Methods

	// RVA: 0x1D95634 Offset: 0x1D95634 VA: 0x1D95634
	public void .ctor(BattleCommandData command, BattleServantData attackSvt, BattleServantData defenseSvt, bool isAct) { }

	// RVA: 0x1D95788 Offset: 0x1D95788 VA: 0x1D95788 Slot: 4
	public virtual BattleLogicClassRelation.ResultData initResultData() { }
}

// Namespace: 
public class BattleLogicClassRelation.DamageRateData // TypeDefIndex: 9082
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD1D54 Offset: 0xCD1D54 VA: 0xCD1D54
	[DebuggerBrowsableAttribute] // RVA: 0xCD1D54 Offset: 0xCD1D54 VA: 0xCD1D54
	private BattleLogicClassRelation.ResultData <Result>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD1D90 Offset: 0xCD1D90 VA: 0xCD1D90
	[DebuggerBrowsableAttribute] // RVA: 0xCD1D90 Offset: 0xCD1D90 VA: 0xCD1D90
	private int <Priority>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD1DCC Offset: 0xCD1DCC VA: 0xCD1DCC
	[DebuggerBrowsableAttribute] // RVA: 0xCD1DCC Offset: 0xCD1DCC VA: 0xCD1DCC
	private float <Value>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xCD1E08 Offset: 0xCD1E08 VA: 0xCD1E08
	[DebuggerBrowsableAttribute] // RVA: 0xCD1E08 Offset: 0xCD1E08 VA: 0xCD1E08
	private int <GeneralType>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD1E44 Offset: 0xCD1E44 VA: 0xCD1E44
	[DebuggerBrowsableAttribute] // RVA: 0xCD1E44 Offset: 0xCD1E44 VA: 0xCD1E44
	private bool <IsInvoked>k__BackingField; // 0x24
	private BattleLogicClassRelation.Process _proc; // 0x28

	// Properties
	public BattleLogicClassRelation.ResultData Result { get; set; }
	public int Priority { get; set; }
	public float Value { get; set; }
	public int GeneralType { get; set; }
	public bool IsInvoked { get; set; }
	public bool IsAction { get; }

	// Methods

	// RVA: 0x1D95C80 Offset: 0x1D95C80 VA: 0x1D95C80
	public void .ctor(BattleLogicClassRelation.ResultData result) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE44 Offset: 0xD3AE44 VA: 0xD3AE44
	// RVA: 0x1D95CB8 Offset: 0x1D95CB8 VA: 0x1D95CB8
	private void set_Result(BattleLogicClassRelation.ResultData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE54 Offset: 0xD3AE54 VA: 0xD3AE54
	// RVA: 0x1D95CE4 Offset: 0x1D95CE4 VA: 0x1D95CE4
	public BattleLogicClassRelation.ResultData get_Result() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE64 Offset: 0xD3AE64 VA: 0xD3AE64
	// RVA: 0x1D95CC0 Offset: 0x1D95CC0 VA: 0x1D95CC0
	private void set_Priority(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE74 Offset: 0xD3AE74 VA: 0xD3AE74
	// RVA: 0x1D95CEC Offset: 0x1D95CEC VA: 0x1D95CEC
	public int get_Priority() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE84 Offset: 0xD3AE84 VA: 0xD3AE84
	// RVA: 0x1D95CC8 Offset: 0x1D95CC8 VA: 0x1D95CC8
	private void set_Value(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AE94 Offset: 0xD3AE94 VA: 0xD3AE94
	// RVA: 0x1D95CF4 Offset: 0x1D95CF4 VA: 0x1D95CF4
	public float get_Value() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AEA4 Offset: 0xD3AEA4 VA: 0xD3AEA4
	// RVA: 0x1D95CD0 Offset: 0x1D95CD0 VA: 0x1D95CD0
	private void set_GeneralType(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AEB4 Offset: 0xD3AEB4 VA: 0xD3AEB4
	// RVA: 0x1D95CFC Offset: 0x1D95CFC VA: 0x1D95CFC
	public int get_GeneralType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AEC4 Offset: 0xD3AEC4 VA: 0xD3AEC4
	// RVA: 0x1D95D04 Offset: 0x1D95D04 VA: 0x1D95D04
	public bool get_IsInvoked() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AED4 Offset: 0xD3AED4 VA: 0xD3AED4
	// RVA: 0x1D95CD8 Offset: 0x1D95CD8 VA: 0x1D95CD8
	protected void set_IsInvoked(bool value) { }

	// RVA: 0x1D95D0C Offset: 0x1D95D0C VA: 0x1D95D0C
	public bool get_IsAction() { }

	// RVA: 0x1D95D1C Offset: 0x1D95D1C VA: 0x1D95D1C
	public bool updateValue(int priority, float value, int type, BattleLogicClassRelation.Process proc) { }

	// RVA: 0x1D95D48 Offset: 0x1D95D48 VA: 0x1D95D48
	public float getFixRate(float rate) { }
}

// Namespace: 
public class BattleLogicClassRelation.ResultData // TypeDefIndex: 9083
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD1E80 Offset: 0xCD1E80 VA: 0xCD1E80
	[DebuggerBrowsableAttribute] // RVA: 0xCD1E80 Offset: 0xCD1E80 VA: 0xCD1E80
	private float <BaseRate>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD1EBC Offset: 0xCD1EBC VA: 0xCD1EBC
	[DebuggerBrowsableAttribute] // RVA: 0xCD1EBC Offset: 0xCD1EBC VA: 0xCD1EBC
	private BattleLogicClassRelation.DamageRateData <AtkRateData>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD1EF8 Offset: 0xCD1EF8 VA: 0xCD1EF8
	[DebuggerBrowsableAttribute] // RVA: 0xCD1EF8 Offset: 0xCD1EF8 VA: 0xCD1EF8
	private BattleLogicClassRelation.DamageRateData <DefRateData>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD1F34 Offset: 0xCD1F34 VA: 0xCD1F34
	[DebuggerBrowsableAttribute] // RVA: 0xCD1F34 Offset: 0xCD1F34 VA: 0xCD1F34
	private float <FixRate>k__BackingField; // 0x28

	// Properties
	public float BaseRate { get; set; }
	public BattleLogicClassRelation.DamageRateData AtkRateData { get; set; }
	public BattleLogicClassRelation.DamageRateData DefRateData { get; set; }
	public float FixRate { get; set; }
	public bool IsPriorAttack { get; }

	// Methods

	// RVA: 0x1D957E8 Offset: 0x1D957E8 VA: 0x1D957E8
	public void .ctor(BattleLogicClassRelation.Argument arg) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AEE4 Offset: 0xD3AEE4 VA: 0xD3AEE4
	// RVA: 0x1D9627C Offset: 0x1D9627C VA: 0x1D9627C
	private void set_BaseRate(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AEF4 Offset: 0xD3AEF4 VA: 0xD3AEF4
	// RVA: 0x1D9629C Offset: 0x1D9629C VA: 0x1D9629C
	public float get_BaseRate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF04 Offset: 0xD3AF04 VA: 0xD3AF04
	// RVA: 0x1D96284 Offset: 0x1D96284 VA: 0x1D96284
	private void set_AtkRateData(BattleLogicClassRelation.DamageRateData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF14 Offset: 0xD3AF14 VA: 0xD3AF14
	// RVA: 0x1D959B8 Offset: 0x1D959B8 VA: 0x1D959B8
	public BattleLogicClassRelation.DamageRateData get_AtkRateData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF24 Offset: 0xD3AF24 VA: 0xD3AF24
	// RVA: 0x1D9628C Offset: 0x1D9628C VA: 0x1D9628C
	private void set_DefRateData(BattleLogicClassRelation.DamageRateData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF34 Offset: 0xD3AF34 VA: 0xD3AF34
	// RVA: 0x1D95E64 Offset: 0x1D95E64 VA: 0x1D95E64
	public BattleLogicClassRelation.DamageRateData get_DefRateData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF44 Offset: 0xD3AF44 VA: 0xD3AF44
	// RVA: 0x1D96294 Offset: 0x1D96294 VA: 0x1D96294
	private void set_FixRate(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF54 Offset: 0xD3AF54 VA: 0xD3AF54
	// RVA: 0x1D962A4 Offset: 0x1D962A4 VA: 0x1D962A4
	public float get_FixRate() { }

	// RVA: 0x1D962AC Offset: 0x1D962AC VA: 0x1D962AC
	public bool get_IsPriorAttack() { }

	// RVA: 0x1D96300 Offset: 0x1D96300 VA: 0x1D96300 Slot: 4
	public virtual void fixResult() { }

	// RVA: 0x1D96484 Offset: 0x1D96484 VA: 0x1D96484
	protected float getFixRatePriorityAsc(BattleLogicClassRelation.DamageRateData[] damageRateArray) { }

	// RVA: 0x1D96540 Offset: 0x1D96540 VA: 0x1D96540
	public void getBuffShowState(BattleLogicClassRelation.DamageRateData damageRate, BattleLogicClassRelation.DamageRateData opponentDamageRate, bool isAtkSide, out BattleLogic.ClassRelationBuffShowState state) { }
}

// Namespace: 
public abstract class BattleLogicClassRelation.Process // TypeDefIndex: 9084
{
	// Methods

	// RVA: 0x1D95E6C Offset: 0x1D95E6C VA: 0x1D95E6C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void exec(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result);

	// RVA: 0x1D961F8 Offset: 0x1D961F8 VA: 0x1D961F8 Slot: 5
	public virtual float getFixRate(BattleLogicClassRelation.DamageRateData self, float compRate) { }
}

// Namespace: 
public abstract class BattleLogicClassRelation.OverwriteProcess : BattleLogicClassRelation.Process // TypeDefIndex: 9085
{
	// Properties
	protected abstract bool IsAtkSide { get; }

	// Methods

	// RVA: 0x1D958E8 Offset: 0x1D958E8 VA: 0x1D958E8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 6
	protected abstract bool get_IsAtkSide();

	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void execLocal(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result);

	// RVA: 0x1D960FC Offset: 0x1D960FC VA: 0x1D960FC Slot: 4
	public override void exec(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result) { }

	// RVA: 0x1D959C0 Offset: 0x1D959C0 VA: 0x1D959C0
	protected void overwriteDamageRate(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.DamageRateData damageRate, BattleBuffData.BuffData[] buffArray) { }

	// RVA: 0x1D96108 Offset: 0x1D96108 VA: 0x1D96108 Slot: 5
	public override float getFixRate(BattleLogicClassRelation.DamageRateData self, float compRate) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3AF64 Offset: 0xD3AF64 VA: 0xD3AF64
	// RVA: 0x1D96224 Offset: 0x1D96224 VA: 0x1D96224
	private int <overwriteDamageRate>m__0(BattleBuffData.BuffData b1, BattleBuffData.BuffData b2) { }
}

// Namespace: 
public class BattleLogicClassRelation.AttackOverwriteProcess : BattleLogicClassRelation.OverwriteProcess // TypeDefIndex: 9086
{
	// Properties
	protected override bool IsAtkSide { get; }

	// Methods

	// RVA: 0x1D954C0 Offset: 0x1D954C0 VA: 0x1D954C0
	public void .ctor() { }

	// RVA: 0x1D958F0 Offset: 0x1D958F0 VA: 0x1D958F0 Slot: 6
	protected override bool get_IsAtkSide() { }

	// RVA: 0x1D958F8 Offset: 0x1D958F8 VA: 0x1D958F8 Slot: 7
	protected override void execLocal(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result) { }
}

// Namespace: 
public class BattleLogicClassRelation.DefenseOverwriteProcess : BattleLogicClassRelation.OverwriteProcess // TypeDefIndex: 9087
{
	// Properties
	protected override bool IsAtkSide { get; }

	// Methods

	// RVA: 0x1D954C8 Offset: 0x1D954C8 VA: 0x1D954C8
	public void .ctor() { }

	// RVA: 0x1D95D98 Offset: 0x1D95D98 VA: 0x1D95D98 Slot: 6
	protected override bool get_IsAtkSide() { }

	// RVA: 0x1D95DA0 Offset: 0x1D95DA0 VA: 0x1D95DA0 Slot: 7
	protected override void execLocal(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result) { }
}

// Namespace: 
public class BattleLogicClassRelation.OldAttackOverwriteProcess : BattleLogicClassRelation.Process // TypeDefIndex: 9088
{
	// Methods

	// RVA: 0x1D954B0 Offset: 0x1D954B0 VA: 0x1D954B0
	public void .ctor() { }

	// RVA: 0x1D95E74 Offset: 0x1D95E74 VA: 0x1D95E74 Slot: 4
	public override void exec(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result) { }
}

// Namespace: 
public class BattleLogicClassRelation.OldDefenseOverwriteProcess : BattleLogicClassRelation.Process // TypeDefIndex: 9089
{
	// Methods

	// RVA: 0x1D954B8 Offset: 0x1D954B8 VA: 0x1D954B8
	public void .ctor() { }

	// RVA: 0x1D95FB8 Offset: 0x1D95FB8 VA: 0x1D95FB8 Slot: 4
	public override void exec(BattleLogicClassRelation logic, BattleLogicClassRelation.Argument arg, BattleLogicClassRelation.ResultData result) { }
}

// Namespace: 
public class BattleLogicDebug : SingletonMonoBehaviour<BattleLogicDebug> // TypeDefIndex: 9090
{
	// Methods

	// RVA: 0x1D96610 Offset: 0x1D96610 VA: 0x1D96610
	public void .ctor() { }

	// RVA: 0x1D96660 Offset: 0x1D96660 VA: 0x1D96660
	public void OutputDebugLog() { }
}

// Namespace: 
public class BattleLogicDebugKeyAssign : MonoBehaviour // TypeDefIndex: 9091
{
	// Methods

	// RVA: 0x1D96664 Offset: 0x1D96664 VA: 0x1D96664
	public void .ctor() { }
}

// Namespace: 
public class BattleLogicEnemyAi // TypeDefIndex: 9092
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicTarget logictarget; // 0x20
	public BattleLogicNomal logicNomal; // 0x28
	public AiLogic aiLogic; // 0x30
	private AiActMaster aiActMst; // 0x38
	private AiEntity noThinkAiEnt; // 0x40
	public List<BattleServantData> actlist; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCD1F70 Offset: 0xCD1F70 VA: 0xCD1F70
	private static Func<BattleServantData, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD1F80 Offset: 0xCD1F80 VA: 0xCD1F80
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD1F90 Offset: 0xCD1F90 VA: 0xCD1F90
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD1FA0 Offset: 0xCD1FA0 VA: 0xCD1FA0
	private static Func<BattleServantData, int> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD1FB0 Offset: 0xCD1FB0 VA: 0xCD1FB0
	private static Predicate<BattleServantData> <>f__am$cache4; // 0x20

	// Properties
	public BaseBattleEvent BattleEvent { get; }

	// Methods

	// RVA: 0x1D9666C Offset: 0x1D9666C VA: 0x1D9666C
	public void .ctor() { }

	// RVA: 0x1D966DC Offset: 0x1D966DC VA: 0x1D966DC
	public BaseBattleEvent get_BattleEvent() { }

	[ConditionalAttribute] // RVA: 0xD3AF74 Offset: 0xD3AF74 VA: 0xD3AF74
	// RVA: 0x1D96708 Offset: 0x1D96708 VA: 0x1D96708
	protected void DebugLog(string str) { }

	[ConditionalAttribute] // RVA: 0xD3AFAC Offset: 0xD3AFAC VA: 0xD3AFAC
	// RVA: 0x1D9670C Offset: 0x1D9670C VA: 0x1D9670C
	protected void InitDebugLog(BattleServantData svtData) { }

	[ConditionalAttribute] // RVA: 0xD3AFE4 Offset: 0xD3AFE4 VA: 0xD3AFE4
	// RVA: 0x1D96710 Offset: 0x1D96710 VA: 0x1D96710
	protected void OutputDebugLog() { }

	// RVA: 0x1D96714 Offset: 0x1D96714 VA: 0x1D96714
	public void Initialize(BattleData data) { }

	// RVA: 0x1D967E4 Offset: 0x1D967E4 VA: 0x1D967E4
	public BattleLogicTask[] taskAIAttack(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1D98804 Offset: 0x1D98804 VA: 0x1D98804
	public void resetAct() { }

	// RVA: 0x1D9890C Offset: 0x1D9890C VA: 0x1D9890C
	public BattleLogicTask[] resetEnemyActList(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1D97038 Offset: 0x1D97038 VA: 0x1D97038
	public void updateActPriorityList() { }

	// RVA: 0x1D98924 Offset: 0x1D98924 VA: 0x1D98924
	public void addEnemyActPriorityList(BattleServantData inSvtData) { }

	// RVA: 0x1D97520 Offset: 0x1D97520 VA: 0x1D97520
	public BattleLogicTask[] procAiAct(BattleServantData svtData, AiEntity aiEnt, int countAct, AiLogic.PROC_STATE procState = 0) { }

	// RVA: 0x1D98A94 Offset: 0x1D98A94 VA: 0x1D98A94
	public BattleLogicTask[] taskAIDead(int actUniqueId) { }

	// RVA: 0x1D98C48 Offset: 0x1D98C48 VA: 0x1D98C48
	public BattleLogicTask[] taskAIPlayerActionEnd(int actUniqueId) { }

	// RVA: 0x1D98DFC Offset: 0x1D98DFC VA: 0x1D98DFC
	public BattleLogicTask[] taskAIEnemyStartTurn(int actUniqueId) { }

	// RVA: 0x1D98FB0 Offset: 0x1D98FB0 VA: 0x1D98FB0
	public BattleLogicTask[] taskAIEnemyEndTurn(int actUniqueId) { }

	// RVA: 0x1D99164 Offset: 0x1D99164 VA: 0x1D99164
	public BattleLogicTask[] taskAIEnemyWaveStart(int actUniqueId) { }

	// RVA: 0x1D99318 Offset: 0x1D99318 VA: 0x1D99318
	public bool checkWaveStartLogicList(int actUniqueId) { }

	// RVA: 0x1D9736C Offset: 0x1D9736C VA: 0x1D9736C
	public BattleLogicTask[] taskAIEnemyMaxNp(int actUniqueId) { }

	// RVA: 0x1D993A0 Offset: 0x1D993A0 VA: 0x1D993A0
	public bool checkShiftAfterLogicList(int actUniqueId) { }

	// RVA: 0x1D99428 Offset: 0x1D99428 VA: 0x1D99428
	public BattleLogicTask[] taskAIEnemyShiftAfter(int actUniqueId) { }

	// RVA: 0x1D995BC Offset: 0x1D995BC VA: 0x1D995BC
	public bool checkDeadLogicList(int actUniqueId) { }

	// RVA: 0x1D99628 Offset: 0x1D99628 VA: 0x1D99628
	public BattleLogicTask createCommandRandomTask(BattleServantData svtData, int targetId, int countAct) { }

	// RVA: 0x1D98998 Offset: 0x1D98998 VA: 0x1D98998
	private int[] GetCommandArray(BattleServantData servantData) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B01C Offset: 0xD3B01C VA: 0xD3B01C
	// RVA: 0x1D9992C Offset: 0x1D9992C VA: 0x1D9992C
	private static bool <updateActPriorityList>m__0(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B02C Offset: 0xD3B02C VA: 0xD3B02C
	// RVA: 0x1D99984 Offset: 0x1D99984 VA: 0x1D99984
	private static int <updateActPriorityList>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B03C Offset: 0xD3B03C VA: 0xD3B03C
	// RVA: 0x1D999B0 Offset: 0x1D999B0 VA: 0x1D999B0
	private static int <updateActPriorityList>m__2(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B04C Offset: 0xD3B04C VA: 0xD3B04C
	// RVA: 0x1D999D8 Offset: 0x1D999D8 VA: 0x1D999D8
	private static int <updateActPriorityList>m__3(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B05C Offset: 0xD3B05C VA: 0xD3B05C
	// RVA: 0x1D99A04 Offset: 0x1D99A04 VA: 0x1D99A04
	private static bool <updateActPriorityList>m__4(BattleServantData x) { }
}

// Namespace: 
public class BattleLogicFieldAi // TypeDefIndex: 9093
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicTarget logictarget; // 0x20
	public BattleLogicNomal logicNomal; // 0x28
	public AiLogic aiLogic; // 0x30
	private BattleLogicTask[] zeroTask; // 0x38
	private Dictionary<BattleLogic.LOGICTYPE, BattleLogicTask.ACTIONTYPE> taskDictionary; // 0x40
	private Dictionary<BattleLogicTask.ACTIONTYPE, AiLogic.PROC_STATE> stateDicitionary; // 0x48

	// Methods

	// RVA: 0x1D99A3C Offset: 0x1D99A3C VA: 0x1D99A3C
	public void .ctor() { }

	// RVA: 0x1D99DDC Offset: 0x1D99DDC VA: 0x1D99DDC
	public void setReactionFunction(Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.reactionFunction> list) { }

	// RVA: 0x1D9A024 Offset: 0x1D9A024 VA: 0x1D9A024
	public BattleLogicTask[] createBase(BattleLogicTask.ACTIONTYPE actionType, int index) { }

	// RVA: 0x1D9A134 Offset: 0x1D9A134 VA: 0x1D9A134
	public BattleLogicTask[] checkFieldAiTask(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1D9A1F0 Offset: 0x1D9A1F0 VA: 0x1D9A1F0
	public BattleLogicTask[] createBaseActionTask(BattleLogicTask task) { }

	// RVA: 0x1D9AFDC Offset: 0x1D9AFDC VA: 0x1D9AFDC
	public BattleLogicTask[] createDeadActionTask() { }

	// RVA: 0x1D9A468 Offset: 0x1D9A468 VA: 0x1D9A468
	public BattleLogicTask[] procAiAct(BattleFieldData fieldData, AiFieldEntity aiEnt, int countAct) { }

	// RVA: 0x1D9B45C Offset: 0x1D9B45C VA: 0x1D9B45C
	public BattleLogicTask[] checkFieldAiStartWave() { }

	// RVA: 0x1D9B528 Offset: 0x1D9B528 VA: 0x1D9B528
	public BattleLogicTask[] checkFieldAiStartTurn() { }

	// RVA: 0x1D9B5F4 Offset: 0x1D9B5F4 VA: 0x1D9B5F4
	public BattleLogicTask[] checkFieldAiEntry() { }

	// RVA: 0x1D9B080 Offset: 0x1D9B080 VA: 0x1D9B080
	public void AddAiFieldScriptTask(AiFieldEntity ent, List<BattleLogicTask> retlist, bool isForcedSpeedOne) { }

	// RVA: 0x1D9B6C0 Offset: 0x1D9B6C0 VA: 0x1D9B6C0
	private BattleLogicTask[] makeResurrectionTask(int[] targetIds, BattleSkillInfoData skillInfo, string motionMessage, bool isForcedSpeedOne) { }

	// RVA: 0x1D9B39C Offset: 0x1D9B39C VA: 0x1D9B39C
	private void DefenceTargetInitialize(AiFieldEntity aiFieldEntity) { }
}

// Namespace: 
public class BattleLogicFunction // TypeDefIndex: 9094
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicTarget logictarget; // 0x20
	public FunctionMaster master; // 0x28
	private readonly int[] tamamocatTreasureDeviceIds; // 0x30
	public const int temporaryIgnoreSleepModeForNoblePhantasmSvtId = 600900;
	private List<int> buffProgressTurnSelfList; // 0x38
	private List<int> buffProgressTurnOpponentList; // 0x40
	private Dictionary<FuncList.TYPE, BattleLogicFunctionProcess.BaseFunctionTypeProcess> dicFuncProcess; // 0x48
	private string wkStr; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCD1FC0 Offset: 0xCD1FC0 VA: 0xCD1FC0
	private static Func<BattleLogicFunctionProcess.FunctionUnitCheck, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD1FD0 Offset: 0xCD1FD0 VA: 0xCD1FD0
	private static Func<BattleLogicFunctionProcess.FunctionTargetCheck, bool> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD1FE0 Offset: 0xCD1FE0 VA: 0xCD1FE0
	private static Func<BattleLogicFunctionProcess.FunctionTargetCheck, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD1FF0 Offset: 0xCD1FF0 VA: 0xCD1FF0
	private static Func<BattleServantData, bool> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD2000 Offset: 0xCD2000 VA: 0xCD2000
	private static Action<BattleServantData> <>f__am$cache4; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD2010 Offset: 0xCD2010 VA: 0xCD2010
	private static Comparison<BattleServantData> <>f__am$cache5; // 0x28

	// Methods

	// RVA: 0x1D9B888 Offset: 0x1D9B888 VA: 0x1D9B888
	public void .ctor() { }

	// RVA: 0x1D9BB18 Offset: 0x1D9BB18 VA: 0x1D9BB18
	public FunctionEntity getFunctionEntity(int id) { }

	// RVA: 0x1D9BBC0 Offset: 0x1D9BBC0 VA: 0x1D9BBC0
	public FunctionMaster getFuncMaster() { }

	// RVA: 0x1D9BC40 Offset: 0x1D9BC40 VA: 0x1D9BC40
	protected void DebugLog(string str) { }

	// RVA: 0x1D9BC44 Offset: 0x1D9BC44 VA: 0x1D9BC44
	public void UpdateBuffProgressTurn(int buffType, ref bool isSelfTurn) { }

	// RVA: 0x1D9BCDC Offset: 0x1D9BCDC VA: 0x1D9BCDC
	private bool IsUpdateBuffProgressTurn(int buffType, string keyName, ref List<int> typeList) { }

	// RVA: 0x1D9BDFC Offset: 0x1D9BDFC VA: 0x1D9BDFC
	public BattleLogicFunctionProcess.BaseFunctionTypeProcess getFunctionTypeProcess(FuncList.TYPE functType) { }

	// RVA: 0x1D9BEE4 Offset: 0x1D9BEE4 VA: 0x1D9BEE4
	public bool isSelectTarget(int uniqueId, int[] funclist) { }

	// RVA: 0x1D9BF80 Offset: 0x1D9BF80 VA: 0x1D9BF80
	public bool isDisabledBuff(bool passive, DataVals baseVals) { }

	// RVA: 0x1D9C040 Offset: 0x1D9C040 VA: 0x1D9C040
	public bool isFailDependentLastResult(BattleLogicFunction.ProcListInArgs args, int targetId, DataVals baseVals) { }

	// RVA: 0x1D9C0F8 Offset: 0x1D9C0F8 VA: 0x1D9C0F8
	public BattleActionData procList(BattleActionData action, int[] functionlist, DataVals[] baseValslist, bool passive = False, bool isReduceReset = True, bool isCommandSideEffect = False, bool isShift = False, bool isTreasureDvc = False, bool isBuffUpdate = True, bool isCreateSideEffect = True, BattleLogicFunction.FunctionArgument argument, int skillId = 0) { }

	// RVA: 0x1DA7E24 Offset: 0x1DA7E24 VA: 0x1DA7E24
	private bool IsSafeWin(int targetId) { }

	// RVA: 0x1DA165C Offset: 0x1DA165C VA: 0x1DA165C
	private bool isSafeDamage(DataVals baseVals, int targetId) { }

	// RVA: 0x1D9EF20 Offset: 0x1D9EF20 VA: 0x1D9EF20
	private bool isTreasureCommand(bool isTreasureDvc, int funcType) { }

	// RVA: 0x1DA7EC0 Offset: 0x1DA7EC0 VA: 0x1DA7EC0
	private int GetInstantDeathRate(float funcVals, BattleServantData targetSvtData, BattleServantData actionSvtData) { }

	// RVA: 0x1DA7FA4 Offset: 0x1DA7FA4 VA: 0x1DA7FA4
	public bool checkFuncAction(BattleLogicFunction.ProcListInArgs args, int actorId, int targetId, BuffEntity buffEnt, FunctionEntity funcEnt, DataVals baseVals, bool isTreasureDevice, ref bool isDisplayLastFuncInvalid) { }

	// RVA: 0x1DA85F4 Offset: 0x1DA85F4 VA: 0x1DA85F4
	public bool checkNoActionCondition(int targetId, FunctionEntity funcEnt) { }

	// RVA: 0x1D9EF54 Offset: 0x1D9EF54 VA: 0x1D9EF54
	private void setAttackSideEffect(BattleActionData mainAction, BattleServantData actionSvtData, bool isTreasureDvc, BattleLogicFunction.SideEffectMakeArgument attackArg) { }

	// RVA: 0x1DA8698 Offset: 0x1DA8698 VA: 0x1DA8698
	public void setAttackSideEffectBuff(SkillLvMaster skillLvMst, BattleActionData actData, BattleBuffData.BuffData buff, BattleLogicFunction.AttackSideEffectFunctionArgument arg, bool isCommandSideEffect = True) { }

	// RVA: 0x1DA87B8 Offset: 0x1DA87B8 VA: 0x1DA87B8
	private int[] getTargetids(BattleActionData mainAction, int targetType) { }

	// RVA: 0x1DA62F8 Offset: 0x1DA62F8 VA: 0x1DA62F8
	private int getHpPerValue(DataVals baseVals, BattleServantData targetSvtData) { }

	// RVA: 0x1DA88E8 Offset: 0x1DA88E8 VA: 0x1DA88E8
	private void AfterAddedBuffProcess(BattleServantData targetSvtData, BuffEntity buffEnt) { }

	// RVA: 0x1DA8A40 Offset: 0x1DA8A40 VA: 0x1DA8A40
	private BattleActionData.BuffData MakeAddActionBuffData(BattleActionData.BuffData actBuffData, BattleBuffData.BuffData buffData, FunctionEntity funcEnt, bool isCommandSideEffect) { }

	// RVA: 0x1DA8B40 Offset: 0x1DA8B40 VA: 0x1DA8B40
	private bool IsAddStateFieldFlag(BattleBuffData.BuffData buffData) { }

	// RVA: 0x1D9F35C Offset: 0x1D9F35C VA: 0x1D9F35C
	public BattleActionData functionAddState(BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, BattleLogicFunction.ProcListInArgs args, int actorId, int targetId, BuffEntity buffEnt, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool passive, bool shortbuff, bool isShift, long userCCId, bool isCommandSideEffect, int treasureDvcId, int skillId) { }

	// RVA: 0x1DA8C10 Offset: 0x1DA8C10 VA: 0x1DA8C10
	public BattleActionData getInvalidObject(int targetId, int funcIndex, bool isHide, string dispName, DataVals dataVals, bool isCommandSideEffect, bool isNoEffect = False) { }

	// RVA: 0x1DA8DC4 Offset: 0x1DA8DC4 VA: 0x1DA8DC4
	public BattleActionData getMissObject(int targetId, int funcIndex, DataVals dataVals, bool isCommandSideEffect, string uniqueText) { }

	// RVA: 0x1DA26B8 Offset: 0x1DA26B8 VA: 0x1DA26B8
	public BattleActionData getNoEffectObject(int targetId, int funcIndex, DataVals dataVals, bool isCommandSideEffect, string uniqueText) { }

	// RVA: 0x1DA1034 Offset: 0x1DA1034 VA: 0x1DA1034
	public BattleActionData functionSubState(int targetId, FunctionEntity funcEnt, DataVals baseVals, int index, bool isCommandSideEffect, out List<BattleBuffData.BuffData> subBuffList) { }

	// RVA: 0x1DA8EAC Offset: 0x1DA8EAC VA: 0x1DA8EAC
	public BattleActionData functionMissState(int targetId) { }

	// RVA: 0x1DA16C0 Offset: 0x1DA16C0 VA: 0x1DA16C0
	public BattleActionData functionDamage(int playerId, int targetId, DataVals baseVals, int funcIndex, bool isSafe = False) { }

	// RVA: 0x1DA1824 Offset: 0x1DA1824 VA: 0x1DA1824
	public BattleActionData functionNPDamage(int playerId, int targetId, DataVals baseVals, int funcIndex, BattleLogic.DamageType type) { }

	// RVA: 0x1DA1FF4 Offset: 0x1DA1FF4 VA: 0x1DA1FF4
	public BattleActionData functionGainHp(int playerId, int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool isCommandSideEffect, int overwriteHeal = -1) { }

	// RVA: 0x1DA2328 Offset: 0x1DA2328 VA: 0x1DA2328
	public BattleActionData functionGainHpPer(int playerId, int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool isCommandSideEffect) { }

	// RVA: 0x1DA8F08 Offset: 0x1DA8F08 VA: 0x1DA8F08
	public void SetGainHpBuff(BattleActionData actiondata, int healPoint, int funcIndex, BattleServantData targetSvtData, FunctionEntity funcEnt, DataVals baseVals, bool isCommandSideEffect, bool isHideEffect) { }

	// RVA: 0x1DA27A0 Offset: 0x1DA27A0 VA: 0x1DA27A0
	public BattleActionData functionlossHp(int playerId, int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool safe, bool isCommandSideEffect, int overwriteLossHp = -1) { }

	// RVA: 0x1DA2B2C Offset: 0x1DA2B2C VA: 0x1DA2B2C
	public BattleActionData functionInstantDeath(int playerId, int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool isCommandSideEffect, bool isNoAccumulation = False) { }

	// RVA: 0x1DA2D9C Offset: 0x1DA2D9C VA: 0x1DA2D9C
	public BattleActionData functionHastenNpTurn(int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool isCommandSideEffect, int absorptionCount = -1) { }

	// RVA: 0x1DA2F7C Offset: 0x1DA2F7C VA: 0x1DA2F7C
	public BattleActionData functionDelayNpTurn(int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool isCommandSideEffect, out int absorptionCount) { }

	// RVA: 0x1DA337C Offset: 0x1DA337C VA: 0x1DA337C
	public BattleActionData functionResetCommandCard(int targetId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex) { }

	// RVA: 0x1DA346C Offset: 0x1DA346C VA: 0x1DA346C
	public BattleActionData functionReplaceMember(int targetId, int subTargetId, FunctionEntity funcEnt, DataVals baeVals, int funcIndex) { }

	// RVA: 0x1DA38EC Offset: 0x1DA38EC VA: 0x1DA38EC
	public BattleActionData functionReplaceEnemyMember(FunctionEntity funcEnt, DataVals baseVals, int funcIndex) { }

	// RVA: 0x1DA6AA8 Offset: 0x1DA6AA8 VA: 0x1DA6AA8
	public BattleActionData FunctionMoveToLastSubMember(BattleServantData targetServantData, FunctionEntity funcEnt, DataVals baseVals, int funcIndex) { }

	// RVA: 0x1DA3F18 Offset: 0x1DA3F18 VA: 0x1DA3F18
	public BattleActionData functionTransformServant(int targetId, FunctionEntity funcEnt, DataVals baeVals, int funcIndex) { }

	// RVA: 0x1DA1ED4 Offset: 0x1DA1ED4 VA: 0x1DA1ED4
	public BattleActionData.BuffData getFunctionObject(FunctionEntity funcEnt, int uniqueId, int funcIndex, bool isCommandSideEffect) { }

	// RVA: 0x1DA4030 Offset: 0x1DA4030 VA: 0x1DA4030
	public BattleActionData functionReflection(int playerId, int targetId, DataVals baseVals, int funcIndex) { }

	// RVA: 0x1DA449C Offset: 0x1DA449C VA: 0x1DA449C
	public BattleActionData functionCallServant(int playerId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex, bool isCommandSideEffect) { }

	// RVA: 0x1DA4B7C Offset: 0x1DA4B7C VA: 0x1DA4B7C
	public BattleActionData functionPtShuffle(int actionId, FunctionEntity funcEnt, DataVals baeVals, int funcIndex) { }

	// RVA: 0x1DA4FB8 Offset: 0x1DA4FB8 VA: 0x1DA4FB8
	public BattleActionData functionChangeServant(int actionId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex) { }

	// RVA: 0x1DA5150 Offset: 0x1DA5150 VA: 0x1DA5150
	public BattleActionData functionChangeBg(int actionId, FunctionEntity funcEnt, DataVals baseVals, int funcIndex) { }

	// RVA: 0x1DA5228 Offset: 0x1DA5228 VA: 0x1DA5228
	public BattleActionData functionValueDamage(int playerId, int targetId, DataVals baseVals, int funcIndex, bool safe = False) { }

	// RVA: 0x1DA5870 Offset: 0x1DA5870 VA: 0x1DA5870
	private BattleActionData functionResurrection(int targetId, int funcIdx, FunctionEntity funcEnt, DataVals dataVals, bool isSideEffect) { }

	// RVA: 0x1DA91E4 Offset: 0x1DA91E4 VA: 0x1DA91E4
	private BattleActionData AbsorbNpTurn(BattleActionData mainAction, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, NpGaugeAbsorbResult result) { }

	// RVA: 0x1DA94EC Offset: 0x1DA94EC VA: 0x1DA94EC
	private BattleActionData AbsorbNpPoint(BattleActionData mainAction, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, NpGaugeAbsorbResult result) { }

	// RVA: 0x1DA31A4 Offset: 0x1DA31A4 VA: 0x1DA31A4
	private BattleActionData functionAbsorbNpTurn(int targetId, FunctionEntity funcEnt, BattleActionData mainAction, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, bool isCommandSideEffect) { }

	// RVA: 0x1DA5B44 Offset: 0x1DA5B44 VA: 0x1DA5B44
	private BattleActionData functionGainNpFromTargets(BattleLogicFunction.ProcListInArgs procArg, BattleActionData mainAction, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1DA9840 Offset: 0x1DA9840 VA: 0x1DA9840
	private BattleActionData functionLossNp(BattleLogicFunction.ProcListInArgs procArg, int actorId, int targetId, DataVals baseVals, out int diffNp) { }

	// RVA: 0x1DA9AC0 Offset: 0x1DA9AC0 VA: 0x1DA9AC0
	private BattleActionData functionGainNp(BattleLogicFunction.ProcListInArgs procArg, int actorId, int targetId, DataVals baseVals, int value) { }

	// RVA: 0x1DA5D24 Offset: 0x1DA5D24 VA: 0x1DA5D24
	private BattleActionData functionGainHpFromTargets(BattleLogicFunction.ProcListInArgs procArg, BattleActionData mainAction, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1DA6368 Offset: 0x1DA6368 VA: 0x1DA6368
	private void UserEquipSkillTurnProgress(int progressValue) { }

	// RVA: 0x1DA6414 Offset: 0x1DA6414 VA: 0x1DA6414
	private void functionShiftServant(BattleActionData actionData, BattleServantData targetData, int npcId) { }

	// RVA: 0x1DA6564 Offset: 0x1DA6564 VA: 0x1DA6564
	private void functionBreakGaugeChange(BattleActionData mainAction, BattleLogicFunctionProcess.FunctionUnitCheck funcUnit, BattleServantData targetSvtData, BattleActionData.BaseShiftGaugeData shiftGauge) { }

