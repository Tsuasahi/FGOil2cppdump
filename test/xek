[Serializable]
public sealed class StrongNameMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 847
{
	// Fields
	private readonly int version; // 0x10
	private StrongNamePublicKeyBlob blob; // 0x18
	private string name; // 0x20
	private Version assemblyVersion; // 0x28

	// Properties
	public string Name { get; }
	public Version Version { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }

	// Methods

	// RVA: 0xEE6240 Offset: 0xEE6240 VA: 0xEE6240
	public void .ctor(StrongNamePublicKeyBlob blob, string name, Version version) { }

	// RVA: 0xEEF914 Offset: 0xEEF914 VA: 0xEEF914
	internal void .ctor(SecurityElement e) { }

	// RVA: 0xEF1C5C Offset: 0xEF1C5C VA: 0xEF1C5C
	internal void .ctor() { }

	// RVA: 0xEF1C6C Offset: 0xEF1C6C VA: 0xEF1C6C
	public string get_Name() { }

	// RVA: 0xEF1C74 Offset: 0xEF1C74 VA: 0xEF1C74
	public Version get_Version() { }

	// RVA: 0xEF1C7C Offset: 0xEF1C7C VA: 0xEF1C7C
	public StrongNamePublicKeyBlob get_PublicKey() { }

	// RVA: 0xEF1C84 Offset: 0xEF1C84 VA: 0xEF1C84 Slot: 4
	public bool Check(Evidence evidence) { }

	// RVA: 0xEF1E9C Offset: 0xEF1E9C VA: 0xEF1E9C Slot: 5
	public IMembershipCondition Copy() { }

	// RVA: 0xEF12C8 Offset: 0xEF12C8 VA: 0xEF12C8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xEF1F14 Offset: 0xEF1F14 VA: 0xEF1F14 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEF1C58 Offset: 0xEF1C58 VA: 0xEF1C58 Slot: 7
	public void FromXml(SecurityElement e) { }

	// RVA: 0xEF1F44 Offset: 0xEF1F44 VA: 0xEF1F44 Slot: 9
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEF2090 Offset: 0xEF2090 VA: 0xEF2090 Slot: 3
	public override string ToString() { }

	// RVA: 0xEF21A4 Offset: 0xEF21A4 VA: 0xEF21A4 Slot: 8
	public SecurityElement ToXml() { }

	// RVA: 0xEF0CE4 Offset: 0xEF0CE4 VA: 0xEF0CE4 Slot: 10
	public SecurityElement ToXml(PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC360D8 Offset: 0xC360D8 VA: 0xC360D8
public class TrustManagerContext // TypeDefIndex: 848
{}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC360EC Offset: 0xC360EC VA: 0xC360EC
[Serializable]
public sealed class UnionCodeGroup : CodeGroup // TypeDefIndex: 849
{
	// Methods

	// RVA: 0xEF0EA8 Offset: 0xEF0EA8 VA: 0xEF0EA8
	public void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy) { }

	// RVA: 0xEF21A8 Offset: 0xEF21A8 VA: 0xEF21A8
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEF21B0 Offset: 0xEF21B0 VA: 0xEF21B0 Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0xEF21B8 Offset: 0xEF21B8 VA: 0xEF21B8
	internal CodeGroup Copy(bool childs) { }

	// RVA: 0xEF25C8 Offset: 0xEF25C8 VA: 0xEF25C8 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0xEF2B3C Offset: 0xEF2B3C VA: 0xEF2B3C Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36100 Offset: 0xC36100 VA: 0xC36100
[Serializable]
public sealed class Zone : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 850
{
	// Fields
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone SecurityZone { get; }

	// Methods

	// RVA: 0xEF3028 Offset: 0xEF3028 VA: 0xEF3028
	public SecurityZone get_SecurityZone() { }

	// RVA: 0xEF3030 Offset: 0xEF3030 VA: 0xEF3030 Slot: 4
	public IPermission CreateIdentityPermission(Evidence evidence) { }

	// RVA: 0xEF3098 Offset: 0xEF3098 VA: 0xEF3098 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xEF3128 Offset: 0xEF3128 VA: 0xEF3128 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEF3130 Offset: 0xEF3130 VA: 0xEF3130 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xC36114 Offset: 0xC36114 VA: 0xC36114
[Serializable]
public sealed class ZoneMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 851
{
	// Fields
	private readonly int version; // 0x10
	private SecurityZone zone; // 0x14

	// Properties
	public SecurityZone SecurityZone { get; set; }

	// Methods

	// RVA: 0xEF3264 Offset: 0xEF3264 VA: 0xEF3264
	internal void .ctor() { }

	// RVA: 0xEF0EB0 Offset: 0xEF0EB0 VA: 0xEF0EB0
	public void .ctor(SecurityZone zone) { }

	// RVA: 0xEF33C8 Offset: 0xEF33C8 VA: 0xEF33C8
	public SecurityZone get_SecurityZone() { }

	// RVA: 0xEF3274 Offset: 0xEF3274 VA: 0xEF3274
	public void set_SecurityZone(SecurityZone value) { }

	// RVA: 0xEF33D0 Offset: 0xEF33D0 VA: 0xEF33D0 Slot: 4
	public bool Check(Evidence evidence) { }

	// RVA: 0xEF354C Offset: 0xEF354C VA: 0xEF354C Slot: 5
	public IMembershipCondition Copy() { }

	// RVA: 0xEF35C4 Offset: 0xEF35C4 VA: 0xEF35C4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0xEF3654 Offset: 0xEF3654 VA: 0xEF3654 Slot: 7
	public void FromXml(SecurityElement e) { }

	// RVA: 0xEF3658 Offset: 0xEF3658 VA: 0xEF3658 Slot: 9
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0xEF3790 Offset: 0xEF3790 VA: 0xEF3790 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xEF3804 Offset: 0xEF3804 VA: 0xEF3804 Slot: 3
	public override string ToString() { }

	// RVA: 0xEF3948 Offset: 0xEF3948 VA: 0xEF3948 Slot: 8
	public SecurityElement ToXml() { }

	// RVA: 0xEF394C Offset: 0xEF394C VA: 0xEF394C Slot: 10
	public SecurityElement ToXml(PolicyLevel level) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC36128 Offset: 0xC36128 VA: 0xC36128
[Serializable]
public class GenericIdentity : IIdentity // TypeDefIndex: 852
{
	// Fields
	private string m_name; // 0x10
	private string m_type; // 0x18

	// Methods

	// RVA: 0xEF3A6C Offset: 0xEF3A6C VA: 0xEF3A6C
	public void .ctor(string name, string type) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC3613C Offset: 0xC3613C VA: 0xC3613C
[Serializable]
public class GenericPrincipal : IPrincipal // TypeDefIndex: 853
{
	// Fields
	private IIdentity m_identity; // 0x10
	private string[] m_roles; // 0x18

	// Methods

	// RVA: 0xEF3B34 Offset: 0xEF3B34 VA: 0xEF3B34
	public void .ctor(IIdentity identity, string[] roles) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC36150 Offset: 0xC36150 VA: 0xC36150
public interface IIdentity // TypeDefIndex: 854
{}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC36164 Offset: 0xC36164 VA: 0xC36164
public interface IPrincipal // TypeDefIndex: 855
{}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC36178 Offset: 0xC36178 VA: 0xC36178
[Serializable]
public enum PrincipalPolicy // TypeDefIndex: 856
{
	// Fields
	public int value__; // 0x0
	public const PrincipalPolicy UnauthenticatedPrincipal = 0;
	public const PrincipalPolicy NoPrincipal = 1;
	public const PrincipalPolicy WindowsPrincipal = 2;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC3618C Offset: 0xC3618C VA: 0xC3618C
[Serializable]
public enum TokenImpersonationLevel // TypeDefIndex: 857
{
	// Fields
	public int value__; // 0x0
	public const TokenImpersonationLevel Anonymous = 1;
	public const TokenImpersonationLevel Delegation = 4;
	public const TokenImpersonationLevel Identification = 2;
	public const TokenImpersonationLevel Impersonation = 3;
	public const TokenImpersonationLevel None = 0;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC361A0 Offset: 0xC361A0 VA: 0xC361A0
[Serializable]
public enum WindowsAccountType // TypeDefIndex: 858
{
	// Fields
	public int value__; // 0x0
	public const WindowsAccountType Normal = 0;
	public const WindowsAccountType Guest = 1;
	public const WindowsAccountType System = 2;
	public const WindowsAccountType Anonymous = 3;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC361B4 Offset: 0xC361B4 VA: 0xC361B4
[Serializable]
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity // TypeDefIndex: 859
{
	// Fields
	private IntPtr _token; // 0x10
	private string _type; // 0x18
	private WindowsAccountType _account; // 0x20
	private bool _authenticated; // 0x24
	private string _name; // 0x28
	private SerializationInfo _info; // 0x30
	private static IntPtr invalidWindows; // 0x0

	// Properties
	public virtual string Name { get; }
	private static bool IsPosix { get; }

	// Methods

	// RVA: 0xEF3CB0 Offset: 0xEF3CB0 VA: 0xEF3CB0
	public void .ctor(IntPtr userToken) { }

	// RVA: 0xEF3CF0 Offset: 0xEF3CF0 VA: 0xEF3CF0
	public void .ctor(IntPtr userToken, string type, WindowsAccountType acctType, bool isAuthenticated) { }

	// RVA: 0xEF3EB8 Offset: 0xEF3EB8 VA: 0xEF3EB8
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xEF3EE4 Offset: 0xEF3EE4 VA: 0xEF3EE4
	private static void .cctor() { }

	// RVA: 0xEF3F34 Offset: 0xEF3F34 VA: 0xEF3F34 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0xEF4230 Offset: 0xEF4230 VA: 0xEF4230 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0xC39B2C Offset: 0xC39B2C VA: 0xC39B2C
	// RVA: 0xEF439C Offset: 0xEF439C VA: 0xEF439C Slot: 4
	public void Dispose() { }

	// RVA: 0xEF43E0 Offset: 0xEF43E0 VA: 0xEF43E0
	public static WindowsIdentity GetCurrent() { }

	// RVA: 0xEF4484 Offset: 0xEF4484 VA: 0xEF4484 Slot: 7
	public virtual string get_Name() { }

	// RVA: 0xEF44FC Offset: 0xEF44FC VA: 0xEF44FC
	private static bool get_IsPosix() { }

	// RVA: 0xEF3D50 Offset: 0xEF3D50 VA: 0xEF3D50
	private void SetToken(IntPtr token) { }

	// RVA: 0xEF4480 Offset: 0xEF4480 VA: 0xEF4480
	internal static IntPtr GetCurrentToken() { }

	// RVA: 0xEF422C Offset: 0xEF422C VA: 0xEF422C
	private static string GetTokenName(IntPtr token) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xC361C8 Offset: 0xC361C8 VA: 0xC361C8
[Serializable]
public class WindowsPrincipal : IPrincipal // TypeDefIndex: 860
{
	// Fields
	private WindowsIdentity _identity; // 0x10

	// Methods

	// RVA: 0xEF4538 Offset: 0xEF4538 VA: 0xEF4538
	public void .ctor(WindowsIdentity ntIdentity) { }
}

// Namespace: System.Security
[AttributeUsageAttribute] // RVA: 0xC361DC Offset: 0xC361DC VA: 0xC361DC
[ComVisibleAttribute] // RVA: 0xC361DC Offset: 0xC361DC VA: 0xC361DC
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 861
{
	// Methods

	// RVA: 0x11620A8 Offset: 0x11620A8 VA: 0x11620A8
	public void .ctor() { }
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0xC36240 Offset: 0xC36240 VA: 0xC36240
[ComVisibleAttribute] // RVA: 0xC36240 Offset: 0xC36240 VA: 0xC36240
[Serializable]
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk // TypeDefIndex: 862
{
	// Methods

	// RVA: 0x11620B0 Offset: 0x11620B0 VA: 0x11620B0
	protected void .ctor() { }

	[MonoTODOAttribute] // RVA: 0xC39B40 Offset: 0xC39B40 VA: 0xC39B40
	// RVA: 0x11620B8 Offset: 0x11620B8 VA: 0x11620B8 Slot: 11
	public void Assert() { }

	// RVA: 0x11620BC Offset: 0x11620BC VA: 0x11620BC
	internal bool CheckAssert(CodeAccessPermission asserted) { }

	// RVA: 0x1162134 Offset: 0x1162134 VA: 0x1162134
	internal bool CheckDemand(CodeAccessPermission target) { }

	// RVA: 0x11621AC Offset: 0x11621AC VA: 0x11621AC
	internal bool CheckDeny(CodeAccessPermission denied) { }

	// RVA: 0x1162290 Offset: 0x1162290 VA: 0x1162290
	internal bool CheckPermitOnly(CodeAccessPermission target) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract IPermission Copy();

	// RVA: 0x1162308 Offset: 0x1162308 VA: 0x1162308 Slot: 12
	public void Demand() { }

	[MonoTODOAttribute] // RVA: 0xC39B78 Offset: 0xC39B78 VA: 0xC39B78
	// RVA: 0x116230C Offset: 0x116230C VA: 0x116230C Slot: 13
	public void Deny() { }

	[ComVisibleAttribute] // RVA: 0xC39BB0 Offset: 0xC39BB0 VA: 0xC39BB0
	// RVA: 0x1162310 Offset: 0x1162310 VA: 0x1162310 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void FromXml(SecurityElement elem);

	[ComVisibleAttribute] // RVA: 0xC39BC4 Offset: 0xC39BC4 VA: 0xC39BC4
	// RVA: 0x1162410 Offset: 0x1162410 VA: 0x1162410 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract IPermission Intersect(IPermission target);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool IsSubsetOf(IPermission target);

	// RVA: 0x1162418 Offset: 0x1162418 VA: 0x1162418 Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract SecurityElement ToXml();

	// RVA: 0x1162454 Offset: 0x1162454 VA: 0x1162454 Slot: 20
	public virtual IPermission Union(IPermission other) { }

	[MonoTODOAttribute] // RVA: 0xC39BD8 Offset: 0xC39BD8 VA: 0xC39BD8
	// RVA: 0x11624D4 Offset: 0x11624D4 VA: 0x11624D4 Slot: 14
	public void PermitOnly() { }

	[MonoTODOAttribute] // RVA: 0xC39C10 Offset: 0xC39C10 VA: 0xC39C10
	// RVA: 0x11624D8 Offset: 0x11624D8 VA: 0x11624D8
	public static void RevertAll() { }

	[MonoTODOAttribute] // RVA: 0xC39C48 Offset: 0xC39C48 VA: 0xC39C48
	// RVA: 0x11624DC Offset: 0x11624DC VA: 0x11624DC
	public static void RevertAssert() { }

	[MonoTODOAttribute] // RVA: 0xC39C80 Offset: 0xC39C80 VA: 0xC39C80
	// RVA: 0x11624E0 Offset: 0x11624E0 VA: 0x11624E0
	public static void RevertDeny() { }

	[MonoTODOAttribute] // RVA: 0xC39CB8 Offset: 0xC39CB8 VA: 0xC39CB8
	// RVA: 0x11624E4 Offset: 0x11624E4 VA: 0x11624E4
	public static void RevertPermitOnly() { }

	// RVA: 0x11624E8 Offset: 0x11624E8 VA: 0x11624E8
	internal SecurityElement Element(int version) { }

	// RVA: 0x1162694 Offset: 0x1162694 VA: 0x1162694
	internal static PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted) { }

	// RVA: 0x11627A4 Offset: 0x11627A4 VA: 0x11627A4
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion) { }

	// RVA: 0x1162AFC Offset: 0x1162AFC VA: 0x1162AFC
	internal static bool IsUnrestricted(SecurityElement se) { }

	// RVA: 0x1162C10 Offset: 0x1162C10 VA: 0x1162C10
	internal bool ProcessFrame(SecurityFrame frame) { }

	// RVA: 0x1163688 Offset: 0x1163688 VA: 0x1163688
	internal static void ThrowInvalidPermission(IPermission target, Type expected) { }

	// RVA: 0x1163780 Offset: 0x1163780 VA: 0x1163780
	internal static void ThrowExecutionEngineException(SecurityAction stackmod) { }

	// RVA: 0x1163618 Offset: 0x1163618 VA: 0x1163618
	internal static void ThrowSecurityException(object demanded, string message, SecurityFrame frame, SecurityAction action, IPermission failed) { }
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0xC36290 Offset: 0xC36290 VA: 0xC36290
[ComVisibleAttribute] // RVA: 0xC36290 Offset: 0xC36290 VA: 0xC36290
[Serializable]
public class HostProtectionException : SystemException // TypeDefIndex: 863
{
	// Fields
	private HostProtectionResource _protected; // 0x60
	private HostProtectionResource _demanded; // 0x64

	// Properties
	public HostProtectionResource DemandedResources { get; }
	public HostProtectionResource ProtectedResources { get; }

	// Methods

	// RVA: 0x11D0890 Offset: 0x11D0890 VA: 0x11D0890
	public void .ctor() { }

	// RVA: 0x11D0898 Offset: 0x11D0898 VA: 0x11D0898
	public void .ctor(string message) { }

	// RVA: 0x11D08A0 Offset: 0x11D08A0 VA: 0x11D08A0
	public void .ctor(string message, Exception e) { }

	// RVA: 0x11D08A8 Offset: 0x11D08A8 VA: 0x11D08A8
	public void .ctor(string message, HostProtectionResource protectedResources, HostProtectionResource demandedResources) { }

	// RVA: 0x11D08E0 Offset: 0x11D08E0 VA: 0x11D08E0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x11D0930 Offset: 0x11D0930 VA: 0x11D0930
	public HostProtectionResource get_DemandedResources() { }

	// RVA: 0x11D0938 Offset: 0x11D0938 VA: 0x11D0938
	public HostProtectionResource get_ProtectedResources() { }

	[MonoTODOAttribute] // RVA: 0xC39CF0 Offset: 0xC39CF0 VA: 0xC39CF0
	// RVA: 0x11D0940 Offset: 0x11D0940 VA: 0x11D0940 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[MonoTODOAttribute] // RVA: 0xC39D00 Offset: 0xC39D00 VA: 0xC39D00
	// RVA: 0x11D09C8 Offset: 0x11D09C8 VA: 0x11D09C8 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC362E0 Offset: 0xC362E0 VA: 0xC362E0
[Serializable]
public class HostSecurityManager // TypeDefIndex: 864
{
	// Properties
	public virtual PolicyLevel DomainPolicy { get; }
	public virtual HostSecurityManagerOptions Flags { get; }

	// Methods

	// RVA: 0x11D09D0 Offset: 0x11D09D0 VA: 0x11D09D0
	public void .ctor() { }

	// RVA: 0x11D09D8 Offset: 0x11D09D8 VA: 0x11D09D8 Slot: 4
	public virtual PolicyLevel get_DomainPolicy() { }

	// RVA: 0x11D09E0 Offset: 0x11D09E0 VA: 0x11D09E0 Slot: 5
	public virtual HostSecurityManagerOptions get_Flags() { }

	// RVA: 0x11D09E8 Offset: 0x11D09E8 VA: 0x11D09E8 Slot: 6
	public virtual ApplicationTrust DetermineApplicationTrust(Evidence applicationEvidence, Evidence activatorEvidence, TrustManagerContext context) { }

	// RVA: 0x11D1034 Offset: 0x11D1034 VA: 0x11D1034 Slot: 7
	public virtual Evidence ProvideAppDomainEvidence(Evidence inputEvidence) { }

	// RVA: 0x11D103C Offset: 0x11D103C VA: 0x11D103C Slot: 8
	public virtual Evidence ProvideAssemblyEvidence(Assembly loadedAssembly, Evidence inputEvidence) { }

	// RVA: 0x11D1044 Offset: 0x11D1044 VA: 0x11D1044 Slot: 9
	public virtual PermissionSet ResolvePolicy(Evidence evidence) { }
}

// Namespace: System.Security
[FlagsAttribute] // RVA: 0xC362F4 Offset: 0xC362F4 VA: 0xC362F4
[ComVisibleAttribute] // RVA: 0xC362F4 Offset: 0xC362F4 VA: 0xC362F4
[Serializable]
public enum HostSecurityManagerOptions // TypeDefIndex: 865
{
	// Fields
	public int value__; // 0x0
	public const HostSecurityManagerOptions None = 0;
	public const HostSecurityManagerOptions HostAppDomainEvidence = 1;
	public const HostSecurityManagerOptions HostPolicyLevel = 2;
	public const HostSecurityManagerOptions HostAssemblyEvidence = 4;
	public const HostSecurityManagerOptions HostDetermineApplicationTrust = 8;
	public const HostSecurityManagerOptions HostResolvePolicy = 16;
	public const HostSecurityManagerOptions AllFlags = 31;
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC36330 Offset: 0xC36330 VA: 0xC36330
public interface IEvidenceFactory // TypeDefIndex: 866
{
	// Properties
	public abstract Evidence Evidence { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Evidence get_Evidence();
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC36344 Offset: 0xC36344 VA: 0xC36344
public interface IPermission : ISecurityEncodable // TypeDefIndex: 867
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IPermission Copy();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Demand();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract IPermission Intersect(IPermission target);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool IsSubsetOf(IPermission target);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPermission Union(IPermission target);
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC36358 Offset: 0xC36358 VA: 0xC36358
public interface ISecurityEncodable // TypeDefIndex: 868
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void FromXml(SecurityElement e);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract SecurityElement ToXml();
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC3636C Offset: 0xC3636C VA: 0xC3636C
public interface ISecurityPolicyEncodable // TypeDefIndex: 869
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void FromXml(SecurityElement e, PolicyLevel level);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract SecurityElement ToXml(PolicyLevel level);
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC36380 Offset: 0xC36380 VA: 0xC36380
public interface IStackWalk // TypeDefIndex: 870
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Assert();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Demand();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Deny();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void PermitOnly();
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC36394 Offset: 0xC36394 VA: 0xC36394
[Serializable]
public sealed class NamedPermissionSet : PermissionSet // TypeDefIndex: 871
{
	// Fields
	private string name; // 0x20
	private string description; // 0x28

	// Properties
	public string Description { get; set; }
	public string Name { get; set; }

	// Methods

	// RVA: 0x11D10F4 Offset: 0x11D10F4 VA: 0x11D10F4
	internal void .ctor() { }

	// RVA: 0x11D1104 Offset: 0x11D1104 VA: 0x11D1104
	public void .ctor(string name, PermissionSet permSet) { }

	// RVA: 0x11D1224 Offset: 0x11D1224 VA: 0x11D1224
	public void .ctor(string name, PermissionState state) { }

	// RVA: 0x11D125C Offset: 0x11D125C VA: 0x11D125C
	public void .ctor(NamedPermissionSet permSet) { }

	// RVA: 0x11D12B8 Offset: 0x11D12B8 VA: 0x11D12B8
	public void .ctor(string name) { }

	// RVA: 0x11D12E8 Offset: 0x11D12E8 VA: 0x11D12E8
	public string get_Description() { }

	// RVA: 0x11D12F0 Offset: 0x11D12F0 VA: 0x11D12F0
	public void set_Description(string value) { }

	// RVA: 0x11D12F8 Offset: 0x11D12F8 VA: 0x11D12F8
	public string get_Name() { }

	// RVA: 0x11D113C Offset: 0x11D113C VA: 0x11D113C
	public void set_Name(string value) { }

	// RVA: 0x11D1300 Offset: 0x11D1300 VA: 0x11D1300 Slot: 5
	public override PermissionSet Copy() { }

	// RVA: 0x11D1360 Offset: 0x11D1360 VA: 0x11D1360
	public NamedPermissionSet Copy(string name) { }

	// RVA: 0x11D13E4 Offset: 0x11D13E4 VA: 0x11D13E4 Slot: 11
	public override void FromXml(SecurityElement et) { }

	// RVA: 0x11D14D4 Offset: 0x11D14D4 VA: 0x11D14D4 Slot: 13
	public override SecurityElement ToXml() { }

	[ComVisibleAttribute] // RVA: 0xC39D10 Offset: 0xC39D10 VA: 0xC39D10
	// RVA: 0x11D1578 Offset: 0x11D1578 VA: 0x11D1578 Slot: 0
	public override bool Equals(object obj) { }

	[ComVisibleAttribute] // RVA: 0xC39D24 Offset: 0xC39D24 VA: 0xC39D24
	// RVA: 0x11D164C Offset: 0x11D164C VA: 0x11D164C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Security
internal static class PermissionBuilder // TypeDefIndex: 872
{
	// Fields
	private static object[] psNone; // 0x0

	// Methods

	// RVA: 0x11D1690 Offset: 0x11D1690 VA: 0x11D1690
	private static void .cctor() { }

	// RVA: 0x11D1774 Offset: 0x11D1774 VA: 0x11D1774
	public static IPermission Create(string fullname, PermissionState state) { }

	// RVA: 0x11D1AD8 Offset: 0x11D1AD8 VA: 0x11D1AD8
	public static IPermission Create(SecurityElement se) { }

	// RVA: 0x11D1BE4 Offset: 0x11D1BE4 VA: 0x11D1BE4
	public static IPermission Create(string fullname, SecurityElement se) { }

	// RVA: 0x11D1CC0 Offset: 0x11D1CC0 VA: 0x11D1CC0
	public static IPermission Create(Type type) { }

	// RVA: 0x11D1904 Offset: 0x11D1904 VA: 0x11D1904
	internal static IPermission CreatePermission(string fullname, SecurityElement se) { }
}

// Namespace: System.Security
[Serializable]
public class PermissionSet // TypeDefIndex: 873
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC37844 Offset: 0xC37844 VA: 0xC37844
	private PolicyLevel <Resolver>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC37854 Offset: 0xC37854 VA: 0xC37854
	private bool <DeclarativeSecurity>k__BackingField; // 0x18

	// Properties
	internal PolicyLevel Resolver { get; set; }
	internal bool DeclarativeSecurity { get; set; }

	// Methods

	// RVA: 0x11D10FC Offset: 0x11D10FC VA: 0x11D10FC
	public void .ctor() { }

	// RVA: 0x11D1DB4 Offset: 0x11D1DB4 VA: 0x11D1DB4
	internal void .ctor(string xml) { }

	// RVA: 0x11D1254 Offset: 0x11D1254 VA: 0x11D1254
	public void .ctor(PermissionState state) { }

	// RVA: 0x11D1134 Offset: 0x11D1134 VA: 0x11D1134
	public void .ctor(PermissionSet permSet) { }

	// RVA: 0x11D1DBC Offset: 0x11D1DBC VA: 0x11D1DBC
	public IPermission AddPermission(IPermission perm) { }

	// RVA: 0x11D1DC4 Offset: 0x11D1DC4 VA: 0x11D1DC4 Slot: 4
	public virtual void Assert() { }

	// RVA: 0x11D1DC8 Offset: 0x11D1DC8 VA: 0x11D1DC8 Slot: 5
	public virtual PermissionSet Copy() { }

	// RVA: 0x11D1E24 Offset: 0x11D1E24 VA: 0x11D1E24 Slot: 6
	public virtual void Demand() { }

	// RVA: 0x11D1E28 Offset: 0x11D1E28 VA: 0x11D1E28 Slot: 7
	public virtual void PermitOnly() { }

	// RVA: 0x11D1E2C Offset: 0x11D1E2C VA: 0x11D1E2C Slot: 8
	public virtual IPermission GetPermission(Type permClass) { }

	// RVA: 0x11D1E34 Offset: 0x11D1E34 VA: 0x11D1E34 Slot: 9
	public virtual PermissionSet Intersect(PermissionSet other) { }

	// RVA: 0x11D1E3C Offset: 0x11D1E3C VA: 0x11D1E3C Slot: 10
	public virtual void Deny() { }

	// RVA: 0x11D14D0 Offset: 0x11D14D0 VA: 0x11D14D0 Slot: 11
	public virtual void FromXml(SecurityElement et) { }

	// RVA: 0x11D1E40 Offset: 0x11D1E40 VA: 0x11D1E40 Slot: 12
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x11D1570 Offset: 0x11D1570 VA: 0x11D1570 Slot: 13
	public virtual SecurityElement ToXml() { }

	// RVA: 0x11D1E44 Offset: 0x11D1E44 VA: 0x11D1E44 Slot: 14
	public virtual bool IsSubsetOf(PermissionSet target) { }

	// RVA: 0x11D1E4C Offset: 0x11D1E4C VA: 0x11D1E4C
	internal void SetReadOnly(bool value) { }

	// RVA: 0x11D1E50 Offset: 0x11D1E50 VA: 0x11D1E50
	public bool IsUnrestricted() { }

	// RVA: 0x11D1E58 Offset: 0x11D1E58 VA: 0x11D1E58
	public PermissionSet Union(PermissionSet other) { }

	[DebuggerHiddenAttribute] // RVA: 0xC39D38 Offset: 0xC39D38 VA: 0xC39D38
	// RVA: 0x11D1EB4 Offset: 0x11D1EB4 VA: 0x11D1EB4 Slot: 15
	public virtual IEnumerator GetEnumerator() { }

	[CompilerGeneratedAttribute] // RVA: 0xC39D48 Offset: 0xC39D48 VA: 0xC39D48
	// RVA: 0x11D1F18 Offset: 0x11D1F18 VA: 0x11D1F18
	internal PolicyLevel get_Resolver() { }

	[CompilerGeneratedAttribute] // RVA: 0xC39D58 Offset: 0xC39D58 VA: 0xC39D58
	// RVA: 0x11D1F20 Offset: 0x11D1F20 VA: 0x11D1F20
	internal void set_Resolver(PolicyLevel value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC39D68 Offset: 0xC39D68 VA: 0xC39D68
	// RVA: 0x11D1F28 Offset: 0x11D1F28 VA: 0x11D1F28
	internal bool get_DeclarativeSecurity() { }

	[CompilerGeneratedAttribute] // RVA: 0xC39D78 Offset: 0xC39D78 VA: 0xC39D78
	// RVA: 0x11D1F30 Offset: 0x11D1F30 VA: 0x11D1F30
	internal void set_DeclarativeSecurity(bool value) { }

	// RVA: 0x11D1F3C Offset: 0x11D1F3C VA: 0x11D1F3C Slot: 16
	public virtual bool IsEmpty() { }

	// RVA: 0x11D1F44 Offset: 0x11D1F44 VA: 0x11D1F44
	internal static PermissionSet CreateFromBinaryFormat(byte[] data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC363A8 Offset: 0xC363A8 VA: 0xC363A8
private sealed class PermissionSet.<GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 874
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: 0x11D1F10 Offset: 0x11D1F10 VA: 0x11D1F10
	public void .ctor() { }

	[DebuggerHiddenAttribute] // RVA: 0xC39D88 Offset: 0xC39D88 VA: 0xC39D88
	// RVA: 0x11D1FA0 Offset: 0x11D1FA0 VA: 0x11D1FA0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC39D98 Offset: 0xC39D98 VA: 0xC39D98
	// RVA: 0x11D1FA8 Offset: 0x11D1FA8 VA: 0x11D1FA8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x11D1FB0 Offset: 0x11D1FB0 VA: 0x11D1FB0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC39DA8 Offset: 0xC39DA8 VA: 0xC39DA8
	// RVA: 0x11D1FC0 Offset: 0x11D1FC0 VA: 0x11D1FC0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC39DB8 Offset: 0xC39DB8 VA: 0xC39DB8
	// RVA: 0x11D1FCC Offset: 0x11D1FCC VA: 0x11D1FCC Slot: 6
	public void Reset() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xC363B8 Offset: 0xC363B8 VA: 0xC363B8
[Serializable]
public enum PolicyLevelType // TypeDefIndex: 875
{
	// Fields
	public int value__; // 0x0
	public const PolicyLevelType User = 0;
	public const PolicyLevelType Machine = 1;
	public const PolicyLevelType Enterprise = 2;
	public const PolicyLevelType AppDomain = 3;
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0xC363CC Offset: 0xC363CC VA: 0xC363CC
public sealed class SecureString : CriticalFinalizerObject, IDisposable // TypeDefIndex: 876
{
	// Fields
	private const int BlockSize = 16;
	private const int MaxSize = 65536;
	private int length; // 0x10
	private bool disposed; // 0x14
	private bool read_only; // 0x15
	private byte[] data; // 0x18

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0xEF45E4 Offset: 0xEF45E4 VA: 0xEF45E4
	public void .ctor() { }

	[CLSCompliantAttribute] // RVA: 0xC39DC8 Offset: 0xC39DC8 VA: 0xC39DC8
	// RVA: 0xEF4794 Offset: 0xEF4794 VA: 0xEF4794
	public void .ctor(char* value, int length) { }

	// RVA: 0xEF493C Offset: 0xEF493C VA: 0xEF493C
	private static void .cctor() { }

	// RVA: 0xEF4940 Offset: 0xEF4940 VA: 0xEF4940
	public int get_Length() { }

	// RVA: 0xEF49D0 Offset: 0xEF49D0 VA: 0xEF49D0
	public void AppendChar(char c) { }

	// RVA: 0xEF4BD4 Offset: 0xEF4BD4 VA: 0xEF4BD4
	public void Clear() { }

	// RVA: 0xEF4CDC Offset: 0xEF4CDC VA: 0xEF4CDC
	public SecureString Copy() { }

	// RVA: 0xEF4E18 Offset: 0xEF4E18 VA: 0xEF4E18 Slot: 4
	public void Dispose() { }

	// RVA: 0xEF4E5C Offset: 0xEF4E5C VA: 0xEF4E5C
	public void InsertAt(int index, char c) { }

	// RVA: 0xEF5168 Offset: 0xEF5168 VA: 0xEF5168
	public bool IsReadOnly() { }

	// RVA: 0xEF51F8 Offset: 0xEF51F8 VA: 0xEF51F8
	public void MakeReadOnly() { }

	// RVA: 0xEF5204 Offset: 0xEF5204 VA: 0xEF5204
	public void RemoveAt(int index) { }

	// RVA: 0xEF53C4 Offset: 0xEF53C4 VA: 0xEF53C4
	public void SetAt(int index, char c) { }

	// RVA: 0xEF4938 Offset: 0xEF4938 VA: 0xEF4938
	private void Encrypt() { }

	// RVA: 0xEF4BD0 Offset: 0xEF4BD0 VA: 0xEF4BD0
	private void Decrypt() { }

	// RVA: 0xEF4614 Offset: 0xEF4614 VA: 0xEF4614
	private void Alloc(int length, bool realloc) { }

	// RVA: 0xEF55C4 Offset: 0xEF55C4 VA: 0xEF55C4
	internal byte[] GetBuffer() { }
}

// Namespace: System.Security
public sealed class SecurityContext // TypeDefIndex: 877
{
	// Fields
	private bool _capture; // 0x10
	private IntPtr _winid; // 0x18
	private CompressedStack _stack; // 0x20
	private bool _suppressFlowWindowsIdentity; // 0x28
	private bool _suppressFlow; // 0x29

	// Properties
	internal bool FlowSuppressed { get; set; }
	internal bool WindowsIdentityFlowSuppressed { get; set; }
	internal CompressedStack CompressedStack { get; set; }
	internal IntPtr IdentityToken { get; set; }

	// Methods

	// RVA: 0xEF567C Offset: 0xEF567C VA: 0xEF567C
	internal void .ctor() { }

	// RVA: 0xEF5684 Offset: 0xEF5684 VA: 0xEF5684
	internal void .ctor(SecurityContext sc) { }

	// RVA: 0xEF56F4 Offset: 0xEF56F4 VA: 0xEF56F4
	public SecurityContext CreateCopy() { }

	// RVA: 0xEF5794 Offset: 0xEF5794 VA: 0xEF5794
	public static SecurityContext Capture() { }

	// RVA: 0xEF58AC Offset: 0xEF58AC VA: 0xEF58AC
	internal bool get_FlowSuppressed() { }

	// RVA: 0xEF58B4 Offset: 0xEF58B4 VA: 0xEF58B4
	internal void set_FlowSuppressed(bool value) { }

	// RVA: 0xEF58C0 Offset: 0xEF58C0 VA: 0xEF58C0
	internal bool get_WindowsIdentityFlowSuppressed() { }

	// RVA: 0xEF58C8 Offset: 0xEF58C8 VA: 0xEF58C8
	internal void set_WindowsIdentityFlowSuppressed(bool value) { }

	// RVA: 0xEF58D4 Offset: 0xEF58D4 VA: 0xEF58D4
	internal CompressedStack get_CompressedStack() { }

	// RVA: 0xEF58DC Offset: 0xEF58DC VA: 0xEF58DC
	internal void set_CompressedStack(CompressedStack value) { }

	// RVA: 0xEF58E4 Offset: 0xEF58E4 VA: 0xEF58E4
	internal IntPtr get_IdentityToken() { }

	// RVA: 0xEF58EC Offset: 0xEF58EC VA: 0xEF58EC
	internal void set_IdentityToken(IntPtr value) { }

	// RVA: 0xEF58F4 Offset: 0xEF58F4 VA: 0xEF58F4
	public static bool IsFlowSuppressed() { }

	// RVA: 0xEF5998 Offset: 0xEF5998 VA: 0xEF5998
	public static bool IsWindowsIdentityFlowSuppressed() { }

	// RVA: 0xEF5A3C Offset: 0xEF5A3C VA: 0xEF5A3C
	public static void RestoreFlow() { }

	// RVA: 0xEF5B28 Offset: 0xEF5B28 VA: 0xEF5B28
	public static void Run(SecurityContext securityContext, ContextCallback callback, object state) { }
