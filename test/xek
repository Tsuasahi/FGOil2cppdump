
	// Methods

	// RVA: 0x1F56F4C Offset: 0x1F56F4C VA: 0x1F56F4C
	public string get_Name() { }

	// RVA: 0x1F56F54 Offset: 0x1F56F54 VA: 0x1F56F54
	public StrongNamePublicKeyBlob get_PublicKey() { }

	// RVA: 0x1F56F5C Offset: 0x1F56F5C VA: 0x1F56F5C
	public Version get_Version() { }

	// RVA: 0x1F56F64 Offset: 0x1F56F64 VA: 0x1F56F64 Slot: 4
	public IPermission CreateIdentityPermission(Evidence evidence) { }

	// RVA: 0x1F56FE0 Offset: 0x1F56FE0 VA: 0x1F56FE0 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F570EC Offset: 0x1F570EC VA: 0x1F570EC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F5711C Offset: 0x1F5711C VA: 0x1F5711C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9F9C Offset: 0xBC9F9C VA: 0xBC9F9C
[Serializable]
public sealed class StrongNameMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 847
{
	// Fields
	private readonly int version; // 0x10
	private StrongNamePublicKeyBlob blob; // 0x18
	private string name; // 0x20
	private Version assemblyVersion; // 0x28

	// Properties
	public string Name { get; }
	public Version Version { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }

	// Methods

	// RVA: 0x1F4B8CC Offset: 0x1F4B8CC VA: 0x1F4B8CC
	public void .ctor(StrongNamePublicKeyBlob blob, string name, Version version) { }

	// RVA: 0x1F54FA0 Offset: 0x1F54FA0 VA: 0x1F54FA0
	internal void .ctor(SecurityElement e) { }

	// RVA: 0x1F572E8 Offset: 0x1F572E8 VA: 0x1F572E8
	internal void .ctor() { }

	// RVA: 0x1F572F8 Offset: 0x1F572F8 VA: 0x1F572F8
	public string get_Name() { }

	// RVA: 0x1F57300 Offset: 0x1F57300 VA: 0x1F57300
	public Version get_Version() { }

	// RVA: 0x1F57308 Offset: 0x1F57308 VA: 0x1F57308
	public StrongNamePublicKeyBlob get_PublicKey() { }

	// RVA: 0x1F57310 Offset: 0x1F57310 VA: 0x1F57310 Slot: 4
	public bool Check(Evidence evidence) { }

	// RVA: 0x1F57528 Offset: 0x1F57528 VA: 0x1F57528 Slot: 5
	public IMembershipCondition Copy() { }

	// RVA: 0x1F56954 Offset: 0x1F56954 VA: 0x1F56954 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F575A0 Offset: 0x1F575A0 VA: 0x1F575A0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F572E4 Offset: 0x1F572E4 VA: 0x1F572E4 Slot: 7
	public void FromXml(SecurityElement e) { }

	// RVA: 0x1F575D0 Offset: 0x1F575D0 VA: 0x1F575D0 Slot: 9
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F5771C Offset: 0x1F5771C VA: 0x1F5771C Slot: 3
	public override string ToString() { }

	// RVA: 0x1F57830 Offset: 0x1F57830 VA: 0x1F57830 Slot: 8
	public SecurityElement ToXml() { }

	// RVA: 0x1F56370 Offset: 0x1F56370 VA: 0x1F56370 Slot: 10
	public SecurityElement ToXml(PolicyLevel level) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9FB0 Offset: 0xBC9FB0 VA: 0xBC9FB0
public class TrustManagerContext // TypeDefIndex: 848
{}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9FC4 Offset: 0xBC9FC4 VA: 0xBC9FC4
[Serializable]
public sealed class UnionCodeGroup : CodeGroup // TypeDefIndex: 849
{
	// Methods

	// RVA: 0x1F56534 Offset: 0x1F56534 VA: 0x1F56534
	public void .ctor(IMembershipCondition membershipCondition, PolicyStatement policy) { }

	// RVA: 0x1F57834 Offset: 0x1F57834 VA: 0x1F57834
	internal void .ctor(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F5783C Offset: 0x1F5783C VA: 0x1F5783C Slot: 4
	public override CodeGroup Copy() { }

	// RVA: 0x1F57844 Offset: 0x1F57844 VA: 0x1F57844
	internal CodeGroup Copy(bool childs) { }

	// RVA: 0x1F57C54 Offset: 0x1F57C54 VA: 0x1F57C54 Slot: 5
	public override PolicyStatement Resolve(Evidence evidence) { }

	// RVA: 0x1F581C8 Offset: 0x1F581C8 VA: 0x1F581C8 Slot: 6
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence) { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9FD8 Offset: 0xBC9FD8 VA: 0xBC9FD8
[Serializable]
public sealed class Zone : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 850
{
	// Fields
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone SecurityZone { get; }

	// Methods

	// RVA: 0x1F586B4 Offset: 0x1F586B4 VA: 0x1F586B4
	public SecurityZone get_SecurityZone() { }

	// RVA: 0x1F586BC Offset: 0x1F586BC VA: 0x1F586BC Slot: 4
	public IPermission CreateIdentityPermission(Evidence evidence) { }

	// RVA: 0x1F58724 Offset: 0x1F58724 VA: 0x1F58724 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F587B4 Offset: 0x1F587B4 VA: 0x1F587B4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F587BC Offset: 0x1F587BC VA: 0x1F587BC Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security.Policy
[ComVisibleAttribute] // RVA: 0xBC9FEC Offset: 0xBC9FEC VA: 0xBC9FEC
[Serializable]
public sealed class ZoneMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 851
{
	// Fields
	private readonly int version; // 0x10
	private SecurityZone zone; // 0x14

	// Properties
	public SecurityZone SecurityZone { get; set; }

	// Methods

	// RVA: 0x1F588F0 Offset: 0x1F588F0 VA: 0x1F588F0
	internal void .ctor() { }

	// RVA: 0x1F5653C Offset: 0x1F5653C VA: 0x1F5653C
	public void .ctor(SecurityZone zone) { }

	// RVA: 0x1F58A54 Offset: 0x1F58A54 VA: 0x1F58A54
	public SecurityZone get_SecurityZone() { }

	// RVA: 0x1F58900 Offset: 0x1F58900 VA: 0x1F58900
	public void set_SecurityZone(SecurityZone value) { }

	// RVA: 0x1F58A5C Offset: 0x1F58A5C VA: 0x1F58A5C Slot: 4
	public bool Check(Evidence evidence) { }

	// RVA: 0x1F58BD8 Offset: 0x1F58BD8 VA: 0x1F58BD8 Slot: 5
	public IMembershipCondition Copy() { }

	// RVA: 0x1F58C50 Offset: 0x1F58C50 VA: 0x1F58C50 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F58CE0 Offset: 0x1F58CE0 VA: 0x1F58CE0 Slot: 7
	public void FromXml(SecurityElement e) { }

	// RVA: 0x1F58CE4 Offset: 0x1F58CE4 VA: 0x1F58CE4 Slot: 9
	public void FromXml(SecurityElement e, PolicyLevel level) { }

	// RVA: 0x1F58E1C Offset: 0x1F58E1C VA: 0x1F58E1C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F58E90 Offset: 0x1F58E90 VA: 0x1F58E90 Slot: 3
	public override string ToString() { }

	// RVA: 0x1F58FD4 Offset: 0x1F58FD4 VA: 0x1F58FD4 Slot: 8
	public SecurityElement ToXml() { }

	// RVA: 0x1F58FD8 Offset: 0x1F58FD8 VA: 0x1F58FD8 Slot: 10
	public SecurityElement ToXml(PolicyLevel level) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA000 Offset: 0xBCA000 VA: 0xBCA000
[Serializable]
public class GenericIdentity : IIdentity // TypeDefIndex: 852
{
	// Fields
	private string m_name; // 0x10
	private string m_type; // 0x18

	// Methods

	// RVA: 0x1F590F8 Offset: 0x1F590F8 VA: 0x1F590F8
	public void .ctor(string name, string type) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA014 Offset: 0xBCA014 VA: 0xBCA014
[Serializable]
public class GenericPrincipal : IPrincipal // TypeDefIndex: 853
{
	// Fields
	private IIdentity m_identity; // 0x10
	private string[] m_roles; // 0x18

	// Methods

	// RVA: 0x1F591C0 Offset: 0x1F591C0 VA: 0x1F591C0
	public void .ctor(IIdentity identity, string[] roles) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA028 Offset: 0xBCA028 VA: 0xBCA028
public interface IIdentity // TypeDefIndex: 854
{}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA03C Offset: 0xBCA03C VA: 0xBCA03C
public interface IPrincipal // TypeDefIndex: 855
{}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA050 Offset: 0xBCA050 VA: 0xBCA050
[Serializable]
public enum PrincipalPolicy // TypeDefIndex: 856
{
	// Fields
	public int value__; // 0x0
	public const PrincipalPolicy UnauthenticatedPrincipal = 0;
	public const PrincipalPolicy NoPrincipal = 1;
	public const PrincipalPolicy WindowsPrincipal = 2;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA064 Offset: 0xBCA064 VA: 0xBCA064
[Serializable]
public enum TokenImpersonationLevel // TypeDefIndex: 857
{
	// Fields
	public int value__; // 0x0
	public const TokenImpersonationLevel Anonymous = 1;
	public const TokenImpersonationLevel Delegation = 4;
	public const TokenImpersonationLevel Identification = 2;
	public const TokenImpersonationLevel Impersonation = 3;
	public const TokenImpersonationLevel None = 0;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA078 Offset: 0xBCA078 VA: 0xBCA078
[Serializable]
public enum WindowsAccountType // TypeDefIndex: 858
{
	// Fields
	public int value__; // 0x0
	public const WindowsAccountType Normal = 0;
	public const WindowsAccountType Guest = 1;
	public const WindowsAccountType System = 2;
	public const WindowsAccountType Anonymous = 3;
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA08C Offset: 0xBCA08C VA: 0xBCA08C
[Serializable]
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity // TypeDefIndex: 859
{
	// Fields
	private IntPtr _token; // 0x10
	private string _type; // 0x18
	private WindowsAccountType _account; // 0x20
	private bool _authenticated; // 0x24
	private string _name; // 0x28
	private SerializationInfo _info; // 0x30
	private static IntPtr invalidWindows; // 0x0

	// Properties
	public virtual string Name { get; }
	private static bool IsPosix { get; }

	// Methods

	// RVA: 0x1F5933C Offset: 0x1F5933C VA: 0x1F5933C
	public void .ctor(IntPtr userToken) { }

	// RVA: 0x1F5937C Offset: 0x1F5937C VA: 0x1F5937C
	public void .ctor(IntPtr userToken, string type, WindowsAccountType acctType, bool isAuthenticated) { }

	// RVA: 0x1F59544 Offset: 0x1F59544 VA: 0x1F59544
	public void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1F59570 Offset: 0x1F59570 VA: 0x1F59570
	private static void .cctor() { }

	// RVA: 0x1F595C0 Offset: 0x1F595C0 VA: 0x1F595C0 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }

	// RVA: 0x1F598BC Offset: 0x1F598BC VA: 0x1F598BC Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0xBCDA04 Offset: 0xBCDA04 VA: 0xBCDA04
	// RVA: 0x1F59A28 Offset: 0x1F59A28 VA: 0x1F59A28 Slot: 4
	public void Dispose() { }

	// RVA: 0x1F59A6C Offset: 0x1F59A6C VA: 0x1F59A6C
	public static WindowsIdentity GetCurrent() { }

	// RVA: 0x1F59B10 Offset: 0x1F59B10 VA: 0x1F59B10 Slot: 7
	public virtual string get_Name() { }

	// RVA: 0x1F59B88 Offset: 0x1F59B88 VA: 0x1F59B88
	private static bool get_IsPosix() { }

	// RVA: 0x1F593DC Offset: 0x1F593DC VA: 0x1F593DC
	private void SetToken(IntPtr token) { }

	// RVA: 0x1F59B0C Offset: 0x1F59B0C VA: 0x1F59B0C
	internal static IntPtr GetCurrentToken() { }

	// RVA: 0x1F598B8 Offset: 0x1F598B8 VA: 0x1F598B8
	private static string GetTokenName(IntPtr token) { }
}

// Namespace: System.Security.Principal
[ComVisibleAttribute] // RVA: 0xBCA0A0 Offset: 0xBCA0A0 VA: 0xBCA0A0
[Serializable]
public class WindowsPrincipal : IPrincipal // TypeDefIndex: 860
{
	// Fields
	private WindowsIdentity _identity; // 0x10

	// Methods

	// RVA: 0x1F59BC4 Offset: 0x1F59BC4 VA: 0x1F59BC4
	public void .ctor(WindowsIdentity ntIdentity) { }
}

// Namespace: System.Security
[AttributeUsageAttribute] // RVA: 0xBCA0B4 Offset: 0xBCA0B4 VA: 0xBCA0B4
[ComVisibleAttribute] // RVA: 0xBCA0B4 Offset: 0xBCA0B4 VA: 0xBCA0B4
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 861
{
	// Methods

	// RVA: 0x2397400 Offset: 0x2397400 VA: 0x2397400
	public void .ctor() { }
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0xBCA118 Offset: 0xBCA118 VA: 0xBCA118
[ComVisibleAttribute] // RVA: 0xBCA118 Offset: 0xBCA118 VA: 0xBCA118
[Serializable]
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk // TypeDefIndex: 862
{
	// Methods

	// RVA: 0x2397408 Offset: 0x2397408 VA: 0x2397408
	protected void .ctor() { }

	[MonoTODOAttribute] // RVA: 0xBCDA18 Offset: 0xBCDA18 VA: 0xBCDA18
	// RVA: 0x2397410 Offset: 0x2397410 VA: 0x2397410 Slot: 11
	public void Assert() { }

	// RVA: 0x2397414 Offset: 0x2397414 VA: 0x2397414
	internal bool CheckAssert(CodeAccessPermission asserted) { }

	// RVA: 0x239748C Offset: 0x239748C VA: 0x239748C
	internal bool CheckDemand(CodeAccessPermission target) { }

	// RVA: 0x2397504 Offset: 0x2397504 VA: 0x2397504
	internal bool CheckDeny(CodeAccessPermission denied) { }

	// RVA: 0x23975E8 Offset: 0x23975E8 VA: 0x23975E8
	internal bool CheckPermitOnly(CodeAccessPermission target) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract IPermission Copy();

	// RVA: 0x2397660 Offset: 0x2397660 VA: 0x2397660 Slot: 12
	public void Demand() { }

	[MonoTODOAttribute] // RVA: 0xBCDA50 Offset: 0xBCDA50 VA: 0xBCDA50
	// RVA: 0x2397664 Offset: 0x2397664 VA: 0x2397664 Slot: 13
	public void Deny() { }

	[ComVisibleAttribute] // RVA: 0xBCDA88 Offset: 0xBCDA88 VA: 0xBCDA88
	// RVA: 0x2397668 Offset: 0x2397668 VA: 0x2397668 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void FromXml(SecurityElement elem);

	[ComVisibleAttribute] // RVA: 0xBCDA9C Offset: 0xBCDA9C VA: 0xBCDA9C
	// RVA: 0x2397768 Offset: 0x2397768 VA: 0x2397768 Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract IPermission Intersect(IPermission target);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract bool IsSubsetOf(IPermission target);

	// RVA: 0x2397770 Offset: 0x2397770 VA: 0x2397770 Slot: 3
	public override string ToString() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract SecurityElement ToXml();

	// RVA: 0x23977AC Offset: 0x23977AC VA: 0x23977AC Slot: 20
	public virtual IPermission Union(IPermission other) { }

	[MonoTODOAttribute] // RVA: 0xBCDAB0 Offset: 0xBCDAB0 VA: 0xBCDAB0
	// RVA: 0x239782C Offset: 0x239782C VA: 0x239782C Slot: 14
	public void PermitOnly() { }

	[MonoTODOAttribute] // RVA: 0xBCDAE8 Offset: 0xBCDAE8 VA: 0xBCDAE8
	// RVA: 0x2397830 Offset: 0x2397830 VA: 0x2397830
	public static void RevertAll() { }

	[MonoTODOAttribute] // RVA: 0xBCDB20 Offset: 0xBCDB20 VA: 0xBCDB20
	// RVA: 0x2397834 Offset: 0x2397834 VA: 0x2397834
	public static void RevertAssert() { }

	[MonoTODOAttribute] // RVA: 0xBCDB58 Offset: 0xBCDB58 VA: 0xBCDB58
	// RVA: 0x2397838 Offset: 0x2397838 VA: 0x2397838
	public static void RevertDeny() { }

	[MonoTODOAttribute] // RVA: 0xBCDB90 Offset: 0xBCDB90 VA: 0xBCDB90
	// RVA: 0x239783C Offset: 0x239783C VA: 0x239783C
	public static void RevertPermitOnly() { }

	// RVA: 0x2397840 Offset: 0x2397840 VA: 0x2397840
	internal SecurityElement Element(int version) { }

	// RVA: 0x23979EC Offset: 0x23979EC VA: 0x23979EC
	internal static PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted) { }

	// RVA: 0x2397AFC Offset: 0x2397AFC VA: 0x2397AFC
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion) { }

	// RVA: 0x2397E54 Offset: 0x2397E54 VA: 0x2397E54
	internal static bool IsUnrestricted(SecurityElement se) { }

	// RVA: 0x2397F68 Offset: 0x2397F68 VA: 0x2397F68
	internal bool ProcessFrame(SecurityFrame frame) { }

	// RVA: 0x23989E0 Offset: 0x23989E0 VA: 0x23989E0
	internal static void ThrowInvalidPermission(IPermission target, Type expected) { }

	// RVA: 0x2398AD8 Offset: 0x2398AD8 VA: 0x2398AD8
	internal static void ThrowExecutionEngineException(SecurityAction stackmod) { }

	// RVA: 0x2398970 Offset: 0x2398970 VA: 0x2398970
	internal static void ThrowSecurityException(object demanded, string message, SecurityFrame frame, SecurityAction action, IPermission failed) { }
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0xBCA168 Offset: 0xBCA168 VA: 0xBCA168
[ComVisibleAttribute] // RVA: 0xBCA168 Offset: 0xBCA168 VA: 0xBCA168
[Serializable]
public class HostProtectionException : SystemException // TypeDefIndex: 863
{
	// Fields
	private HostProtectionResource _protected; // 0x60
	private HostProtectionResource _demanded; // 0x64

	// Properties
	public HostProtectionResource DemandedResources { get; }
	public HostProtectionResource ProtectedResources { get; }

	// Methods

	// RVA: 0x2428914 Offset: 0x2428914 VA: 0x2428914
	public void .ctor() { }

	// RVA: 0x242891C Offset: 0x242891C VA: 0x242891C
	public void .ctor(string message) { }

	// RVA: 0x2428924 Offset: 0x2428924 VA: 0x2428924
	public void .ctor(string message, Exception e) { }

	// RVA: 0x242892C Offset: 0x242892C VA: 0x242892C
	public void .ctor(string message, HostProtectionResource protectedResources, HostProtectionResource demandedResources) { }

	// RVA: 0x2428964 Offset: 0x2428964 VA: 0x2428964
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x24289B4 Offset: 0x24289B4 VA: 0x24289B4
	public HostProtectionResource get_DemandedResources() { }

	// RVA: 0x24289BC Offset: 0x24289BC VA: 0x24289BC
	public HostProtectionResource get_ProtectedResources() { }

	[MonoTODOAttribute] // RVA: 0xBCDBC8 Offset: 0xBCDBC8 VA: 0xBCDBC8
	// RVA: 0x24289C4 Offset: 0x24289C4 VA: 0x24289C4 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[MonoTODOAttribute] // RVA: 0xBCDBD8 Offset: 0xBCDBD8 VA: 0xBCDBD8
	// RVA: 0x2428A4C Offset: 0x2428A4C VA: 0x2428A4C Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA1B8 Offset: 0xBCA1B8 VA: 0xBCA1B8
[Serializable]
public class HostSecurityManager // TypeDefIndex: 864
{
	// Properties
	public virtual PolicyLevel DomainPolicy { get; }
	public virtual HostSecurityManagerOptions Flags { get; }

	// Methods

	// RVA: 0x2428A54 Offset: 0x2428A54 VA: 0x2428A54
	public void .ctor() { }

	// RVA: 0x2428A5C Offset: 0x2428A5C VA: 0x2428A5C Slot: 4
	public virtual PolicyLevel get_DomainPolicy() { }

	// RVA: 0x2428A64 Offset: 0x2428A64 VA: 0x2428A64 Slot: 5
	public virtual HostSecurityManagerOptions get_Flags() { }

	// RVA: 0x2428A6C Offset: 0x2428A6C VA: 0x2428A6C Slot: 6
	public virtual ApplicationTrust DetermineApplicationTrust(Evidence applicationEvidence, Evidence activatorEvidence, TrustManagerContext context) { }

	// RVA: 0x24290B8 Offset: 0x24290B8 VA: 0x24290B8 Slot: 7
	public virtual Evidence ProvideAppDomainEvidence(Evidence inputEvidence) { }

	// RVA: 0x24290C0 Offset: 0x24290C0 VA: 0x24290C0 Slot: 8
	public virtual Evidence ProvideAssemblyEvidence(Assembly loadedAssembly, Evidence inputEvidence) { }

	// RVA: 0x24290C8 Offset: 0x24290C8 VA: 0x24290C8 Slot: 9
	public virtual PermissionSet ResolvePolicy(Evidence evidence) { }
}

// Namespace: System.Security
[FlagsAttribute] // RVA: 0xBCA1CC Offset: 0xBCA1CC VA: 0xBCA1CC
[ComVisibleAttribute] // RVA: 0xBCA1CC Offset: 0xBCA1CC VA: 0xBCA1CC
[Serializable]
public enum HostSecurityManagerOptions // TypeDefIndex: 865
{
	// Fields
	public int value__; // 0x0
	public const HostSecurityManagerOptions None = 0;
	public const HostSecurityManagerOptions HostAppDomainEvidence = 1;
	public const HostSecurityManagerOptions HostPolicyLevel = 2;
	public const HostSecurityManagerOptions HostAssemblyEvidence = 4;
	public const HostSecurityManagerOptions HostDetermineApplicationTrust = 8;
	public const HostSecurityManagerOptions HostResolvePolicy = 16;
	public const HostSecurityManagerOptions AllFlags = 31;
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA208 Offset: 0xBCA208 VA: 0xBCA208
public interface IEvidenceFactory // TypeDefIndex: 866
{
	// Properties
	public abstract Evidence Evidence { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Evidence get_Evidence();
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA21C Offset: 0xBCA21C VA: 0xBCA21C
public interface IPermission : ISecurityEncodable // TypeDefIndex: 867
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IPermission Copy();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Demand();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract IPermission Intersect(IPermission target);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool IsSubsetOf(IPermission target);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IPermission Union(IPermission target);
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA230 Offset: 0xBCA230 VA: 0xBCA230
public interface ISecurityEncodable // TypeDefIndex: 868
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void FromXml(SecurityElement e);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract SecurityElement ToXml();
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA244 Offset: 0xBCA244 VA: 0xBCA244
public interface ISecurityPolicyEncodable // TypeDefIndex: 869
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void FromXml(SecurityElement e, PolicyLevel level);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract SecurityElement ToXml(PolicyLevel level);
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA258 Offset: 0xBCA258 VA: 0xBCA258
public interface IStackWalk // TypeDefIndex: 870
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Assert();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Demand();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Deny();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void PermitOnly();
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA26C Offset: 0xBCA26C VA: 0xBCA26C
[Serializable]
public sealed class NamedPermissionSet : PermissionSet // TypeDefIndex: 871
{
	// Fields
	private string name; // 0x20
	private string description; // 0x28

	// Properties
	public string Description { get; set; }
	public string Name { get; set; }

	// Methods

	// RVA: 0x2429178 Offset: 0x2429178 VA: 0x2429178
	internal void .ctor() { }

	// RVA: 0x2429188 Offset: 0x2429188 VA: 0x2429188
	public void .ctor(string name, PermissionSet permSet) { }

	// RVA: 0x24292A8 Offset: 0x24292A8 VA: 0x24292A8
	public void .ctor(string name, PermissionState state) { }

	// RVA: 0x24292E0 Offset: 0x24292E0 VA: 0x24292E0
	public void .ctor(NamedPermissionSet permSet) { }

	// RVA: 0x242933C Offset: 0x242933C VA: 0x242933C
	public void .ctor(string name) { }

	// RVA: 0x242936C Offset: 0x242936C VA: 0x242936C
	public string get_Description() { }

	// RVA: 0x2429374 Offset: 0x2429374 VA: 0x2429374
	public void set_Description(string value) { }

	// RVA: 0x242937C Offset: 0x242937C VA: 0x242937C
	public string get_Name() { }

	// RVA: 0x24291C0 Offset: 0x24291C0 VA: 0x24291C0
	public void set_Name(string value) { }

	// RVA: 0x2429384 Offset: 0x2429384 VA: 0x2429384 Slot: 5
	public override PermissionSet Copy() { }

	// RVA: 0x24293E4 Offset: 0x24293E4 VA: 0x24293E4
	public NamedPermissionSet Copy(string name) { }

	// RVA: 0x2429468 Offset: 0x2429468 VA: 0x2429468 Slot: 11
	public override void FromXml(SecurityElement et) { }

	// RVA: 0x2429558 Offset: 0x2429558 VA: 0x2429558 Slot: 13
	public override SecurityElement ToXml() { }

	[ComVisibleAttribute] // RVA: 0xBCDBE8 Offset: 0xBCDBE8 VA: 0xBCDBE8
	// RVA: 0x24295FC Offset: 0x24295FC VA: 0x24295FC Slot: 0
	public override bool Equals(object obj) { }

	[ComVisibleAttribute] // RVA: 0xBCDBFC Offset: 0xBCDBFC VA: 0xBCDBFC
	// RVA: 0x24296D0 Offset: 0x24296D0 VA: 0x24296D0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Security
internal static class PermissionBuilder // TypeDefIndex: 872
{
	// Fields
	private static object[] psNone; // 0x0

	// Methods

	// RVA: 0x2429714 Offset: 0x2429714 VA: 0x2429714
	private static void .cctor() { }

	// RVA: 0x24297F8 Offset: 0x24297F8 VA: 0x24297F8
	public static IPermission Create(string fullname, PermissionState state) { }

	// RVA: 0x2429B5C Offset: 0x2429B5C VA: 0x2429B5C
	public static IPermission Create(SecurityElement se) { }

	// RVA: 0x2429C68 Offset: 0x2429C68 VA: 0x2429C68
	public static IPermission Create(string fullname, SecurityElement se) { }

	// RVA: 0x2429D44 Offset: 0x2429D44 VA: 0x2429D44
	public static IPermission Create(Type type) { }

	// RVA: 0x2429988 Offset: 0x2429988 VA: 0x2429988
	internal static IPermission CreatePermission(string fullname, SecurityElement se) { }
}

// Namespace: System.Security
[Serializable]
public class PermissionSet // TypeDefIndex: 873
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xBCB71C Offset: 0xBCB71C VA: 0xBCB71C
	private PolicyLevel <Resolver>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBCB72C Offset: 0xBCB72C VA: 0xBCB72C
	private bool <DeclarativeSecurity>k__BackingField; // 0x18

	// Properties
	internal PolicyLevel Resolver { get; set; }
	internal bool DeclarativeSecurity { get; set; }

	// Methods

	// RVA: 0x2429180 Offset: 0x2429180 VA: 0x2429180
	public void .ctor() { }

	// RVA: 0x2429E38 Offset: 0x2429E38 VA: 0x2429E38
	internal void .ctor(string xml) { }

	// RVA: 0x24292D8 Offset: 0x24292D8 VA: 0x24292D8
	public void .ctor(PermissionState state) { }

	// RVA: 0x24291B8 Offset: 0x24291B8 VA: 0x24291B8
	public void .ctor(PermissionSet permSet) { }

	// RVA: 0x2429E40 Offset: 0x2429E40 VA: 0x2429E40
	public IPermission AddPermission(IPermission perm) { }

	// RVA: 0x2429E48 Offset: 0x2429E48 VA: 0x2429E48 Slot: 4
	public virtual void Assert() { }

	// RVA: 0x2429E4C Offset: 0x2429E4C VA: 0x2429E4C Slot: 5
	public virtual PermissionSet Copy() { }

	// RVA: 0x2429EA8 Offset: 0x2429EA8 VA: 0x2429EA8 Slot: 6
	public virtual void Demand() { }

	// RVA: 0x2429EAC Offset: 0x2429EAC VA: 0x2429EAC Slot: 7
	public virtual void PermitOnly() { }

	// RVA: 0x2429EB0 Offset: 0x2429EB0 VA: 0x2429EB0 Slot: 8
	public virtual IPermission GetPermission(Type permClass) { }

	// RVA: 0x2429EB8 Offset: 0x2429EB8 VA: 0x2429EB8 Slot: 9
	public virtual PermissionSet Intersect(PermissionSet other) { }

	// RVA: 0x2429EC0 Offset: 0x2429EC0 VA: 0x2429EC0 Slot: 10
	public virtual void Deny() { }

	// RVA: 0x2429554 Offset: 0x2429554 VA: 0x2429554 Slot: 11
	public virtual void FromXml(SecurityElement et) { }

	// RVA: 0x2429EC4 Offset: 0x2429EC4 VA: 0x2429EC4 Slot: 12
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x24295F4 Offset: 0x24295F4 VA: 0x24295F4 Slot: 13
	public virtual SecurityElement ToXml() { }

	// RVA: 0x2429EC8 Offset: 0x2429EC8 VA: 0x2429EC8 Slot: 14
	public virtual bool IsSubsetOf(PermissionSet target) { }

	// RVA: 0x2429ED0 Offset: 0x2429ED0 VA: 0x2429ED0
	internal void SetReadOnly(bool value) { }

	// RVA: 0x2429ED4 Offset: 0x2429ED4 VA: 0x2429ED4
	public bool IsUnrestricted() { }

	// RVA: 0x2429EDC Offset: 0x2429EDC VA: 0x2429EDC
	public PermissionSet Union(PermissionSet other) { }

	[DebuggerHiddenAttribute] // RVA: 0xBCDC10 Offset: 0xBCDC10 VA: 0xBCDC10
	// RVA: 0x2429F38 Offset: 0x2429F38 VA: 0x2429F38 Slot: 15
	public virtual IEnumerator GetEnumerator() { }

	[CompilerGeneratedAttribute] // RVA: 0xBCDC20 Offset: 0xBCDC20 VA: 0xBCDC20
	// RVA: 0x2429F9C Offset: 0x2429F9C VA: 0x2429F9C
	internal PolicyLevel get_Resolver() { }

	[CompilerGeneratedAttribute] // RVA: 0xBCDC30 Offset: 0xBCDC30 VA: 0xBCDC30
	// RVA: 0x2429FA4 Offset: 0x2429FA4 VA: 0x2429FA4
	internal void set_Resolver(PolicyLevel value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBCDC40 Offset: 0xBCDC40 VA: 0xBCDC40
	// RVA: 0x2429FAC Offset: 0x2429FAC VA: 0x2429FAC
	internal bool get_DeclarativeSecurity() { }

	[CompilerGeneratedAttribute] // RVA: 0xBCDC50 Offset: 0xBCDC50 VA: 0xBCDC50
	// RVA: 0x2429FB4 Offset: 0x2429FB4 VA: 0x2429FB4
	internal void set_DeclarativeSecurity(bool value) { }

	// RVA: 0x2429FC0 Offset: 0x2429FC0 VA: 0x2429FC0 Slot: 16
	public virtual bool IsEmpty() { }

	// RVA: 0x2429FC8 Offset: 0x2429FC8 VA: 0x2429FC8
	internal static PermissionSet CreateFromBinaryFormat(byte[] data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xBCA280 Offset: 0xBCA280 VA: 0xBCA280
private sealed class PermissionSet.<GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 874
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x18

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: 0x2429F94 Offset: 0x2429F94 VA: 0x2429F94
	public void .ctor() { }

	[DebuggerHiddenAttribute] // RVA: 0xBCDC60 Offset: 0xBCDC60 VA: 0xBCDC60
	// RVA: 0x242A024 Offset: 0x242A024 VA: 0x242A024 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xBCDC70 Offset: 0xBCDC70 VA: 0xBCDC70
	// RVA: 0x242A02C Offset: 0x242A02C VA: 0x242A02C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x242A034 Offset: 0x242A034 VA: 0x242A034 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xBCDC80 Offset: 0xBCDC80 VA: 0xBCDC80
	// RVA: 0x242A044 Offset: 0x242A044 VA: 0x242A044 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xBCDC90 Offset: 0xBCDC90 VA: 0xBCDC90
	// RVA: 0x242A050 Offset: 0x242A050 VA: 0x242A050 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security
[ComVisibleAttribute] // RVA: 0xBCA290 Offset: 0xBCA290 VA: 0xBCA290
[Serializable]
public enum PolicyLevelType // TypeDefIndex: 875
{
	// Fields
	public int value__; // 0x0
	public const PolicyLevelType User = 0;
	public const PolicyLevelType Machine = 1;
	public const PolicyLevelType Enterprise = 2;
	public const PolicyLevelType AppDomain = 3;
}

// Namespace: System.Security
[MonoTODOAttribute] // RVA: 0xBCA2A4 Offset: 0xBCA2A4 VA: 0xBCA2A4
public sealed class SecureString : CriticalFinalizerObject, IDisposable // TypeDefIndex: 876
{
	// Fields
	private const int BlockSize = 16;
	private const int MaxSize = 65536;
	private int length; // 0x10
	private bool disposed; // 0x14
	private bool read_only; // 0x15
	private byte[] data; // 0x18

	// Properties
	public int Length { get; }

	// Methods

	// RVA: 0x1F59C70 Offset: 0x1F59C70 VA: 0x1F59C70
	public void .ctor() { }

	[CLSCompliantAttribute] // RVA: 0xBCDCA0 Offset: 0xBCDCA0 VA: 0xBCDCA0
	// RVA: 0x1F59E20 Offset: 0x1F59E20 VA: 0x1F59E20
	public void .ctor(char* value, int length) { }

	// RVA: 0x1F59FC8 Offset: 0x1F59FC8 VA: 0x1F59FC8
	private static void .cctor() { }

	// RVA: 0x1F59FCC Offset: 0x1F59FCC VA: 0x1F59FCC
	public int get_Length() { }

	// RVA: 0x1F5A05C Offset: 0x1F5A05C VA: 0x1F5A05C
	public void AppendChar(char c) { }

	// RVA: 0x1F5A260 Offset: 0x1F5A260 VA: 0x1F5A260
	public void Clear() { }

	// RVA: 0x1F5A368 Offset: 0x1F5A368 VA: 0x1F5A368
	public SecureString Copy() { }

	// RVA: 0x1F5A4A4 Offset: 0x1F5A4A4 VA: 0x1F5A4A4 Slot: 4
	public void Dispose() { }

	// RVA: 0x1F5A4E8 Offset: 0x1F5A4E8 VA: 0x1F5A4E8
	public void InsertAt(int index, char c) { }

	// RVA: 0x1F5A7F4 Offset: 0x1F5A7F4 VA: 0x1F5A7F4
	public bool IsReadOnly() { }

	// RVA: 0x1F5A884 Offset: 0x1F5A884 VA: 0x1F5A884
	public void MakeReadOnly() { }

	// RVA: 0x1F5A890 Offset: 0x1F5A890 VA: 0x1F5A890
	public void RemoveAt(int index) { }

	// RVA: 0x1F5AA50 Offset: 0x1F5AA50 VA: 0x1F5AA50
	public void SetAt(int index, char c) { }

	// RVA: 0x1F59FC4 Offset: 0x1F59FC4 VA: 0x1F59FC4
	private void Encrypt() { }

	// RVA: 0x1F5A25C Offset: 0x1F5A25C VA: 0x1F5A25C
	private void Decrypt() { }

	// RVA: 0x1F59CA0 Offset: 0x1F59CA0 VA: 0x1F59CA0
	private void Alloc(int length, bool realloc) { }

	// RVA: 0x1F5AC50 Offset: 0x1F5AC50 VA: 0x1F5AC50
	internal byte[] GetBuffer() { }
}

// Namespace: System.Security
public sealed class SecurityContext // TypeDefIndex: 877
{
	// Fields
	private bool _capture; // 0x10
	private IntPtr _winid; // 0x18
	private CompressedStack _stack; // 0x20
	private bool _suppressFlowWindowsIdentity; // 0x28
	private bool _suppressFlow; // 0x29

	// Properties
	internal bool FlowSuppressed { get; set; }
	internal bool WindowsIdentityFlowSuppressed { get; set; }
	internal CompressedStack CompressedStack { get; set; }
	internal IntPtr IdentityToken { get; set; }

	// Methods

	// RVA: 0x1F5AD08 Offset: 0x1F5AD08 VA: 0x1F5AD08
	internal void .ctor() { }

	// RVA: 0x1F5AD10 Offset: 0x1F5AD10 VA: 0x1F5AD10
	internal void .ctor(SecurityContext sc) { }

	// RVA: 0x1F5AD80 Offset: 0x1F5AD80 VA: 0x1F5AD80
	public SecurityContext CreateCopy() { }

	// RVA: 0x1F5AE20 Offset: 0x1F5AE20 VA: 0x1F5AE20
	public static SecurityContext Capture() { }

	// RVA: 0x1F5AF38 Offset: 0x1F5AF38 VA: 0x1F5AF38
	internal bool get_FlowSuppressed() { }

	// RVA: 0x1F5AF40 Offset: 0x1F5AF40 VA: 0x1F5AF40
	internal void set_FlowSuppressed(bool value) { }

	// RVA: 0x1F5AF4C Offset: 0x1F5AF4C VA: 0x1F5AF4C
	internal bool get_WindowsIdentityFlowSuppressed() { }
