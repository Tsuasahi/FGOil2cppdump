
	// RVA: 0x1E36B08 Offset: 0x1E36B08 VA: 0x1E36B08
	private int[] narrowDownIndividuality(int[] list, int[] targetindividuality, bool isResurrectable = False, bool isCheckBuff = True) { }

	// RVA: 0x1E368DC Offset: 0x1E368DC VA: 0x1E368DC
	private int[] narrowDownHate(int[] list, BattleServantData atkSvt, bool isResurrectable = False, int[] addIndiv) { }

	// RVA: 0x1E25E20 Offset: 0x1E25E20 VA: 0x1E25E20
	public BattleServantData getTargetBattleServantData(BattleLogicTask task) { }

	// RVA: 0x1E32754 Offset: 0x1E32754 VA: 0x1E32754
	public int getGlobalTargetId(int uniqueId, bool isMaster = False, int[] addIndiv) { }

	// RVA: 0x1E36FC8 Offset: 0x1E36FC8 VA: 0x1E36FC8
	public void updateEnemyTarget(int[] targetIdList) { }

	// RVA: 0x1E371E0 Offset: 0x1E371E0 VA: 0x1E371E0
	public void updateGlobalTarget() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B57C Offset: 0xD3B57C VA: 0xD3B57C
	// RVA: 0x1E372F0 Offset: 0x1E372F0 VA: 0x1E372F0
	private int <getTargetHighHp>m__0(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B58C Offset: 0xD3B58C VA: 0xD3B58C
	// RVA: 0x1E373A0 Offset: 0x1E373A0 VA: 0x1E373A0
	private int <getTargetLowHp>m__1(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B59C Offset: 0xD3B59C VA: 0xD3B59C
	// RVA: 0x1E37454 Offset: 0x1E37454 VA: 0x1E37454
	private int <getTargetNpTurnLower>m__2(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B5AC Offset: 0xD3B5AC VA: 0xD3B5AC
	// RVA: 0x1E37574 Offset: 0x1E37574 VA: 0x1E37574
	private int <getTargetNpGaugeHeighter>m__3(int x, int y) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B5BC Offset: 0xD3B5BC VA: 0xD3B5BC
	// RVA: 0x1E3761C Offset: 0x1E3761C VA: 0x1E3761C
	private static bool <getTargetBattleServantData>m__4(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B5CC Offset: 0xD3B5CC VA: 0xD3B5CC
	// RVA: 0x1E37644 Offset: 0x1E37644 VA: 0x1E37644
	private int <getTargetBattleServantData>m__5(int a, int b) { }
}

// Namespace: 
public enum BattleLogicTarget.Position // TypeDefIndex: 9157
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTarget.Position FRONT = 0;
	public const BattleLogicTarget.Position CENTER = 1;
	public const BattleLogicTarget.Position BACK = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0340 Offset: 0xCB0340 VA: 0xCB0340
private sealed class BattleLogicTarget.<getTargetActiveIndividualities>c__AnonStorey0 // TypeDefIndex: 9158
{
	// Fields
	internal int[] indv; // 0x10
	internal Dictionary<int, int> indNum; // 0x18
	internal BattleLogicTarget $this; // 0x20

	// Methods

	// RVA: 0x1E366B8 Offset: 0x1E366B8 VA: 0x1E366B8
	public void .ctor() { }

	// RVA: 0x1E377AC Offset: 0x1E377AC VA: 0x1E377AC
	internal int <>m__0(int x, int y) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0350 Offset: 0xCB0350 VA: 0xCB0350
private sealed class BattleLogicTarget.<getTargetActiveBuff>c__AnonStorey1 // TypeDefIndex: 9159
{
	// Fields
	internal int[] ids; // 0x10
	internal BattleLogicTarget $this; // 0x18

	// Methods

	// RVA: 0x1E367AC Offset: 0x1E367AC VA: 0x1E367AC
	public void .ctor() { }

	// RVA: 0x1E376D4 Offset: 0x1E376D4 VA: 0x1E376D4
	internal int <>m__0(int x, int y) { }
}

// Namespace: 
public class BattleLogicTask // TypeDefIndex: 9160
{
	// Fields
	public BattleLogicTask.ACTORTYPE actortype; // 0x10
	public int[] actorIdlist; // 0x18
	public int[] targetIdlist; // 0x20
	public int[] ptTarget; // 0x28
	public BattleLogicTask.ACTIONTYPE actiontype; // 0x30
	public BattleCommandData command; // 0x38
	public BattleComboData combo; // 0x40
	public BattleSkillInfoData skillInfo; // 0x48
	public bool flgCheckUseSKill; // 0x50
	public bool checkAlive; // 0x51
	public int treasureDvcId; // 0x54
	public int tresureDvcLv; // 0x58
	public int ordertype; // 0x5C
	public bool grandoderflg; // 0x60
	public string motionName; // 0x68
	public GameObject targetObject; // 0x70
	public int status; // 0x78
	public float systemTime; // 0x7C
	public string endCameraName; // 0x80
	private int[] gimmickIndexArray; // 0x88
	public BattleLogicTask.MESSAGE_TYPE messageType; // 0x90
	public string motionMessage; // 0x98
	public bool isForcedSpeedOne; // 0xA0
	public bool checkRevengeId; // 0xA1
	public bool isSkipStep; // 0xA2

	// Methods

	// RVA: 0x1E25670 Offset: 0x1E25670 VA: 0x1E25670
	public void .ctor() { }

	// RVA: 0x1E25D28 Offset: 0x1E25D28 VA: 0x1E25D28
	public void setActor(BattleLogicTask.ACTORTYPE type, int uniqueID) { }

	// RVA: 0x1E37910 Offset: 0x1E37910 VA: 0x1E37910
	public void setActor(BattleLogicTask.ACTORTYPE type, int[] uniqueIDList) { }

	// RVA: 0x1E2781C Offset: 0x1E2781C VA: 0x1E2781C
	public int getActorId() { }

	// RVA: 0x1E3791C Offset: 0x1E3791C VA: 0x1E3791C
	public bool checkActorId(BattleLogicTask task) { }

	// RVA: 0x1E36F3C Offset: 0x1E36F3C VA: 0x1E36F3C
	public void setTarget(int targetId) { }

	// RVA: 0x1E2EAC8 Offset: 0x1E2EAC8 VA: 0x1E2EAC8
	public void setTarget(int[] targetIdlist) { }

	// RVA: 0x1E27F78 Offset: 0x1E27F78 VA: 0x1E27F78
	public int[] getTargetlist() { }

	// RVA: 0x1E27868 Offset: 0x1E27868 VA: 0x1E27868
	public int getTarget() { }

	// RVA: 0x1E3795C Offset: 0x1E3795C VA: 0x1E3795C
	public bool checkTargetId(BattleLogicTask task) { }

	// RVA: 0x1E25DBC Offset: 0x1E25DBC VA: 0x1E25DBC
	public void setActionCommand(BattleComboData combo, BattleCommandData command, int index) { }

	// RVA: 0x1E37A18 Offset: 0x1E37A18 VA: 0x1E37A18
	public bool isCheck(BattleLogicTask.ACTIONTYPE ckType) { }

	// RVA: 0x1E26624 Offset: 0x1E26624 VA: 0x1E26624
	public void setAddAttackCommand(BattleComboData combo, BattleCommandData command) { }

	// RVA: 0x1E37A28 Offset: 0x1E37A28 VA: 0x1E37A28
	public bool isCommandAction() { }

	// RVA: 0x1E37A38 Offset: 0x1E37A38 VA: 0x1E37A38
	public bool isAddAttack() { }

	// RVA: 0x1E27860 Offset: 0x1E27860 VA: 0x1E27860
	public BattleCommandData getCommand() { }

	// RVA: 0x1E37A48 Offset: 0x1E37A48 VA: 0x1E37A48
	public BattleComboData getCombo() { }

	// RVA: 0x1E32730 Offset: 0x1E32730 VA: 0x1E32730
	public void setActionSkill(BattleSkillInfoData skillInfo, int[] targetlist, int[] ptTarget, bool checkAlive = False, bool checkRevengeId = False) { }

	// RVA: 0x1E37A50 Offset: 0x1E37A50 VA: 0x1E37A50
	public bool isSKill() { }

	// RVA: 0x1E32944 Offset: 0x1E32944 VA: 0x1E32944
	public void setCommandSpell(int skillId, int[] targetlist, int[] ptTarget) { }

	// RVA: 0x1E37A60 Offset: 0x1E37A60 VA: 0x1E37A60
	public bool isCommandSpell() { }

	// RVA: 0x1E25E10 Offset: 0x1E25E10 VA: 0x1E25E10
	public void setActionTreasureDvc(int treDvcId, int lv = 1) { }

	// RVA: 0x1E37A70 Offset: 0x1E37A70 VA: 0x1E37A70
	public bool isTreasureDvc() { }

	// RVA: 0x1E37A80 Offset: 0x1E37A80 VA: 0x1E37A80
	public void setBackStep() { }

	// RVA: 0x1E37A8C Offset: 0x1E37A8C VA: 0x1E37A8C
	public bool isBackStep() { }

	// RVA: 0x1E2EFE8 Offset: 0x1E2EFE8 VA: 0x1E2EFE8
	public void setResurrection() { }

	// RVA: 0x1E37A9C Offset: 0x1E37A9C VA: 0x1E37A9C
	public bool isResurrection() { }

	// RVA: 0x1E2FCCC Offset: 0x1E2FCCC VA: 0x1E2FCCC
	public void setDead() { }

	// RVA: 0x1E37AAC Offset: 0x1E37AAC VA: 0x1E37AAC
	public bool isDead() { }

	// RVA: 0x1E31494 Offset: 0x1E31494 VA: 0x1E31494
	public void setProcBuffDead() { }

	// RVA: 0x1E37ABC Offset: 0x1E37ABC VA: 0x1E37ABC
	public bool isProcBuffDead() { }

	// RVA: 0x1E30EDC Offset: 0x1E30EDC VA: 0x1E30EDC
	public void setEnemyLogicDead() { }

	// RVA: 0x1E37ACC Offset: 0x1E37ACC VA: 0x1E37ACC
	public bool isEnemyLogicDead() { }

	// RVA: 0x1E31668 Offset: 0x1E31668 VA: 0x1E31668
	public void setEnemyLogicPlayerActionEnd() { }

	// RVA: 0x1E37ADC Offset: 0x1E37ADC VA: 0x1E37ADC
	public bool isEnemyLogicPlayerActionEnd() { }

	// RVA: 0x1E3183C Offset: 0x1E3183C VA: 0x1E3183C
	public void setEnemyLogicStartTurn() { }

	// RVA: 0x1E37AEC Offset: 0x1E37AEC VA: 0x1E37AEC
	public bool isEnemyLogicStartTurn() { }

	// RVA: 0x1E31A10 Offset: 0x1E31A10 VA: 0x1E31A10
	public void setEnemyLogicEndTurn() { }

	// RVA: 0x1E37AFC Offset: 0x1E37AFC VA: 0x1E37AFC
	public bool isEnemyLogicEndTurn() { }

	// RVA: 0x1E37B0C Offset: 0x1E37B0C VA: 0x1E37B0C
	public bool isEnemyLogicWaveStart() { }

	// RVA: 0x1E37B1C Offset: 0x1E37B1C VA: 0x1E37B1C
	public bool isEnemyLogicShiftAfter() { }

	// RVA: 0x1E37B2C Offset: 0x1E37B2C VA: 0x1E37B2C
	public void setComboOrder(BattleCommand.TYPE type, bool grdflg) { }

	// RVA: 0x1E37B44 Offset: 0x1E37B44 VA: 0x1E37B44
	public void setComboOrder(int type, bool grdflg) { }

	// RVA: 0x1E37B5C Offset: 0x1E37B5C VA: 0x1E37B5C
	public bool isComboOrder() { }

	// RVA: 0x1E27F80 Offset: 0x1E27F80 VA: 0x1E27F80
	public bool isArts() { }

	// RVA: 0x1E27F98 Offset: 0x1E27F98 VA: 0x1E27F98
	public bool isBuster() { }

	// RVA: 0x1E27F8C Offset: 0x1E27F8C VA: 0x1E27F8C
	public bool isQuick() { }

	// RVA: 0x1E37B6C Offset: 0x1E37B6C VA: 0x1E37B6C
	public bool isGrandOrder() { }

	// RVA: 0x1E26824 Offset: 0x1E26824 VA: 0x1E26824
	public void setSystem() { }

	// RVA: 0x1E37B74 Offset: 0x1E37B74 VA: 0x1E37B74
	public void setCamera() { }

	// RVA: 0x1E37B80 Offset: 0x1E37B80 VA: 0x1E37B80
	public void setCheckEntryFunction() { }

	// RVA: 0x1E37B8C Offset: 0x1E37B8C VA: 0x1E37B8C
	public bool isCheckEntryFunction() { }

	// RVA: 0x1E2C6E4 Offset: 0x1E2C6E4 VA: 0x1E2C6E4
	public void setReservationSkill(BattleSkillInfoData inSkillInfo, bool inflgCheckUseSKill = True) { }

	// RVA: 0x1E37B9C Offset: 0x1E37B9C VA: 0x1E37B9C
	public bool isReservationSkill() { }

	// RVA: 0x1E28120 Offset: 0x1E28120 VA: 0x1E28120
	public void setPlayMoiton(string motionName) { }

	// RVA: 0x1E28130 Offset: 0x1E28130 VA: 0x1E28130
	public void setTargetObject(GameObject obj) { }

	// RVA: 0x1E37BAC Offset: 0x1E37BAC VA: 0x1E37BAC
	public bool isPlayMotion() { }

	// RVA: 0x1E37BBC Offset: 0x1E37BBC VA: 0x1E37BBC
	public void setStartTurnPlayer() { }

	// RVA: 0x1E37BC8 Offset: 0x1E37BC8 VA: 0x1E37BC8
	public void setStartTurnEnemy() { }

	// RVA: 0x1E37BD4 Offset: 0x1E37BD4 VA: 0x1E37BD4
	public void setEndTurnPlayer() { }

	// RVA: 0x1E37BE0 Offset: 0x1E37BE0 VA: 0x1E37BE0
	public bool isTurnEndPlayer() { }

	// RVA: 0x1E37BF0 Offset: 0x1E37BF0 VA: 0x1E37BF0
	public void setEndTurnEnemy() { }

	// RVA: 0x1E37BFC Offset: 0x1E37BFC VA: 0x1E37BFC
	public bool isTurnEndEnemy() { }

	// RVA: 0x1E2BF34 Offset: 0x1E2BF34 VA: 0x1E2BF34
	public void setBuffAddPlayer() { }

	// RVA: 0x1E2BF40 Offset: 0x1E2BF40 VA: 0x1E2BF40
	public void setBuffAddEnemy() { }

	// RVA: 0x1E28584 Offset: 0x1E28584 VA: 0x1E28584
	public void setMessage(string message, BattleLogicTask.MESSAGE_TYPE type) { }

	// RVA: 0x1E37C0C Offset: 0x1E37C0C VA: 0x1E37C0C
	public void setEnemyMasterCutIn(AiFieldEntity.EffectType cutInType) { }

	// RVA: 0x1E37C1C Offset: 0x1E37C1C VA: 0x1E37C1C
	public void setLoadImmediateEntryServant() { }

	// RVA: 0x1E34194 Offset: 0x1E34194 VA: 0x1E34194
	public void SetGimmickIndexArray(int[] indexArray) { }

	// RVA: 0x1E32A2C Offset: 0x1E32A2C VA: 0x1E32A2C
	public int[] GetGimmickIndexArray() { }

	// RVA: 0x1E32A1C Offset: 0x1E32A1C VA: 0x1E32A1C
	public bool IsGimmick() { }

	// RVA: 0x1E36D98 Offset: 0x1E36D98 VA: 0x1E36D98
	public bool IsTargetTypeEnemy() { }

	// RVA: 0x1E36F28 Offset: 0x1E36F28 VA: 0x1E36F28
	public int[] GetSkillAddIndiv() { }

	// RVA: 0x1E32BA4 Offset: 0x1E32BA4 VA: 0x1E32BA4
	public BattleLogicTask CloneSkillTask(BattleSkillInfoData skillInfo, BattleLogicTask.ACTORTYPE actorType, bool targetSwapExec) { }

	// RVA: 0x1E37C28 Offset: 0x1E37C28 VA: 0x1E37C28 Slot: 4
	public virtual void InterruptAction(BattleActionData addAction, BattlePerformance perf) { }

	// RVA: 0x1E37C2C Offset: 0x1E37C2C VA: 0x1E37C2C Slot: 5
	public virtual BattleLogicTask[] MakeActionTask() { }
}

// Namespace: 
public enum BattleLogicTask.ACTORTYPE // TypeDefIndex: 9161
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTask.ACTORTYPE NONE = 0;
	public const BattleLogicTask.ACTORTYPE PLAYER_MASTER = 1;
	public const BattleLogicTask.ACTORTYPE PLAYER_SERVANT = 2;
	public const BattleLogicTask.ACTORTYPE ENEMY_SERVANT = 3;
	public const BattleLogicTask.ACTORTYPE COMMAND = 4;
	public const BattleLogicTask.ACTORTYPE FIELD = 5;
}

// Namespace: 
public enum BattleLogicTask.ACTIONTYPE // TypeDefIndex: 9162
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTask.ACTIONTYPE NONE = 0;
	public const BattleLogicTask.ACTIONTYPE COMMAND_BATTLE = 1;
	public const BattleLogicTask.ACTIONTYPE ADDATTACK = 2;
	public const BattleLogicTask.ACTIONTYPE SKILL = 3;
	public const BattleLogicTask.ACTIONTYPE TREASURE_DEVICE = 4;
	public const BattleLogicTask.ACTIONTYPE BACKSTEP = 5;
	public const BattleLogicTask.ACTIONTYPE SYSTEM = 6;
	public const BattleLogicTask.ACTIONTYPE COMBO_ORDER = 7;
	public const BattleLogicTask.ACTIONTYPE COMMAND_SPELL = 8;
	public const BattleLogicTask.ACTIONTYPE PLAY_MOTION = 9;
	public const BattleLogicTask.ACTIONTYPE ENDTURN_PLAYER = 10;
	public const BattleLogicTask.ACTIONTYPE ENDTURN_ENEMY = 11;
	public const BattleLogicTask.ACTIONTYPE RESURRECTION = 12;
	public const BattleLogicTask.ACTIONTYPE DEAD = 13;
	public const BattleLogicTask.ACTIONTYPE PROC_BUFFDEAD = 14;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_ENEMYDEAD = 15;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_PLAYERACTIONEND = 16;
	public const BattleLogicTask.ACTIONTYPE BUFF_ADD_PLAYER = 17;
	public const BattleLogicTask.ACTIONTYPE BUFF_ADD_ENEMY = 18;
	public const BattleLogicTask.ACTIONTYPE STARTTURN_PLAYER = 19;
	public const BattleLogicTask.ACTIONTYPE STARTTURN_ENEMY = 20;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_STARTTURN = 21;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_ENDTURN = 22;
	public const BattleLogicTask.ACTIONTYPE FUNCTIONCHECK_ENTRY = 23;
	public const BattleLogicTask.ACTIONTYPE RESERVATION_SKILL = 24;
	public const BattleLogicTask.ACTIONTYPE ENEMYLOGIC_WAVESTART = 25;
	public const BattleLogicTask.ACTIONTYPE CAMERA = 26;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_ENEMYTURN = 27;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_END_ENEMYTURN = 28;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_PLAYERTURN = 29;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_END_PLAYERTURN = 30;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_WAVE = 31;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_START_TURN = 32;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_REACT_DEAD = 33;
	public const BattleLogicTask.ACTIONTYPE BREAK_ON_BATTLE = 34;
	public const BattleLogicTask.ACTIONTYPE CHECK_SHIFTSERVANT = 35;
	public const BattleLogicTask.ACTIONTYPE SHIFT_SERVANT = 36;
	public const BattleLogicTask.ACTIONTYPE WITHDRAW = 37;
	public const BattleLogicTask.ACTIONTYPE SHIFT_SERVANT_AFTER = 38;
	public const BattleLogicTask.ACTIONTYPE CHANGE_APP = 39;
	public const BattleLogicTask.ACTIONTYPE ENEMY_MASTER_CUTIN = 40;
	public const BattleLogicTask.ACTIONTYPE LOAD_IMMEDIATE_ENTRY_SERVANT = 41;
	public const BattleLogicTask.ACTIONTYPE FIELDAI_ENTRY_UNIT = 42;
	public const BattleLogicTask.ACTIONTYPE PLAY_FIELD_MOTION = 43;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_WAVE = 44;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_TURN = 45;
	public const BattleLogicTask.ACTIONTYPE NPCAI_ENTRY_UNIT = 46;
	public const BattleLogicTask.ACTIONTYPE NPCAI_REACT_DEAD = 47;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_PLAYERTURN = 48;
	public const BattleLogicTask.ACTIONTYPE NPCAI_END_PLAYERTURN = 49;
	public const BattleLogicTask.ACTIONTYPE NPCAI_START_ENEMYTURN = 50;
	public const BattleLogicTask.ACTIONTYPE NPCAI_END_ENEMYTURN = 51;
}

// Namespace: 
public enum BattleLogicTask.MESSAGE_TYPE // TypeDefIndex: 9163
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicTask.MESSAGE_TYPE NONE = 0;
	public const BattleLogicTask.MESSAGE_TYPE SUB_ENTRY = 1;
}

// Namespace: 
public class AddActionBattleLogicTask : BattleLogicTask // TypeDefIndex: 9164
{
	// Fields
	protected BattleActionData[] interruptActions; // 0xA8

	// Methods

	// RVA: 0x159E548 Offset: 0x159E548 VA: 0x159E548
	public void .ctor() { }

	// RVA: 0x159E550 Offset: 0x159E550 VA: 0x159E550
	public AddActionBattleLogicTask SetInterruptAction(BattleActionData[] actions) { }

	// RVA: 0x159E558 Offset: 0x159E558 VA: 0x159E558 Slot: 4
	public override void InterruptAction(BattleActionData addAction, BattlePerformance perf) { }
}

// Namespace: 
public class PlayFieldMotionBattleLogicTask : BattleLogicTask // TypeDefIndex: 9165
{
	// Methods

	// RVA: 0x1BD46B0 Offset: 0x1BD46B0 VA: 0x1BD46B0
	public void .ctor(string motionName) { }
}

// Namespace: 
public class BattleLogicUtilities // TypeDefIndex: 9166
{
	// Methods

	// RVA: 0x15003A4 Offset: 0x15003A4 VA: 0x15003A4
	public void .ctor() { }

	// RVA: -1 Offset: -1
	public static T[] getShuffle<T>(T[] list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B802A8 Offset: 0x2B802A8 VA: 0x2B802A8
	|-BattleLogicUtilities.getShuffle<object>
	|
	|-RVA: 0x2B804B0 Offset: 0x2B804B0 VA: 0x2B804B0
	|-BattleLogicUtilities.getShuffle<Vector3>
	*/
}

// Namespace: 
public class ServantWaveTurnEventOwner // TypeDefIndex: 9167
{
	// Fields
	private Dictionary<long, List<ServantWaveTurnEvent>> servantWaveTurnEventDict; // 0x10

	// Methods

	// RVA: 0x1880064 Offset: 0x1880064 VA: 0x1880064
	public void .ctor() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B5DC Offset: 0xD3B5DC VA: 0xD3B5DC
	// RVA: 0x18800D4 Offset: 0x18800D4 VA: 0x18800D4
	public IEnumerable<ServantWaveTurnEvent> EventEnumerator(int wave, int turn) { }

	// RVA: 0x1880198 Offset: 0x1880198 VA: 0x1880198
	public void Add(ServantWaveTurnEvent ev) { }

	// RVA: 0x1880238 Offset: 0x1880238 VA: 0x1880238
	private List<ServantWaveTurnEvent> GetOrCreateWaveTurnEventDictValue(int wave, int turn) { }

	// RVA: 0x1880334 Offset: 0x1880334 VA: 0x1880334
	public static long CalcWaveTurnVal(int wave, int turn) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0360 Offset: 0xCB0360 VA: 0xCB0360
private sealed class ServantWaveTurnEventOwner.<EventEnumerator>c__Iterator0 : IEnumerable, IEnumerable<ServantWaveTurnEvent>, IEnumerator, IDisposable, IEnumerator<ServantWaveTurnEvent> // TypeDefIndex: 9168
{
	// Fields
	internal int wave; // 0x10
	internal int turn; // 0x14
	internal List.Enumerator<ServantWaveTurnEvent> $locvar0; // 0x18
	internal ServantWaveTurnEvent <ev>__1; // 0x30
	internal ServantWaveTurnEventOwner $this; // 0x38
	internal ServantWaveTurnEvent $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private ServantWaveTurnEvent System.Collections.Generic.IEnumerator<ServantWaveTurnEvent>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48974 Offset: 0xD48974 VA: 0xD48974
	// RVA: 0x1880190 Offset: 0x1880190 VA: 0x1880190
	public void .ctor() { }

	// RVA: 0x1880344 Offset: 0x1880344 VA: 0x1880344 Slot: 7
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48984 Offset: 0xD48984 VA: 0xD48984
	// RVA: 0x18804E4 Offset: 0x18804E4 VA: 0x18804E4 Slot: 10
	private ServantWaveTurnEvent System.Collections.Generic.IEnumerator<ServantWaveTurnEvent>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48994 Offset: 0xD48994 VA: 0xD48994
	// RVA: 0x18804EC Offset: 0x18804EC VA: 0x18804EC Slot: 6
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD489A4 Offset: 0xD489A4 VA: 0xD489A4
	// RVA: 0x18804F4 Offset: 0x18804F4 VA: 0x18804F4 Slot: 9
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD489B4 Offset: 0xD489B4 VA: 0xD489B4
	// RVA: 0x188056C Offset: 0x188056C VA: 0x188056C Slot: 8
	public void Reset() { }

	[DebuggerHiddenAttribute] // RVA: 0xD489C4 Offset: 0xD489C4 VA: 0xD489C4
	// RVA: 0x18805D4 Offset: 0x18805D4 VA: 0x18805D4 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[DebuggerHiddenAttribute] // RVA: 0xD489D4 Offset: 0xD489D4 VA: 0xD489D4
	// RVA: 0x18805D8 Offset: 0x18805D8 VA: 0x18805D8 Slot: 5
	private IEnumerator<ServantWaveTurnEvent> System.Collections.Generic.IEnumerable<ServantWaveTurnEvent>.GetEnumerator() { }
}

// Namespace: 
public abstract class ServantWaveTurnEvent // TypeDefIndex: 9169
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD27A8 Offset: 0xCD27A8 VA: 0xCD27A8
	[DebuggerBrowsableAttribute] // RVA: 0xCD27A8 Offset: 0xCD27A8 VA: 0xCD27A8
	private int <Wave>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD27E4 Offset: 0xCD27E4 VA: 0xCD27E4
	[DebuggerBrowsableAttribute] // RVA: 0xCD27E4 Offset: 0xCD27E4 VA: 0xCD27E4
	private int <Turn>k__BackingField; // 0x14

	// Properties
	public int Wave { get; set; }
	public int Turn { get; set; }

	// Methods

	// RVA: 0x187FFE8 Offset: 0x187FFE8 VA: 0x187FFE8
	public void .ctor(BattleData data) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B5EC Offset: 0xD3B5EC VA: 0xD3B5EC
	// RVA: 0x1880054 Offset: 0x1880054 VA: 0x1880054
	public int get_Wave() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B5FC Offset: 0xD3B5FC VA: 0xD3B5FC
	// RVA: 0x1880044 Offset: 0x1880044 VA: 0x1880044
	private void set_Wave(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B60C Offset: 0xD3B60C VA: 0xD3B60C
	// RVA: 0x188005C Offset: 0x188005C VA: 0x188005C
	public int get_Turn() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B61C Offset: 0xD3B61C VA: 0xD3B61C
	// RVA: 0x188004C Offset: 0x188004C VA: 0x188004C
	private void set_Turn(int value) { }
}

// Namespace: 
public class MoveToSubMemberWaveTurnEvent : ServantWaveTurnEvent // TypeDefIndex: 9170
{
	// Methods

	// RVA: 0x16F0928 Offset: 0x16F0928 VA: 0x16F0928
	public void .ctor(BattleData data) { }
}

// Namespace: 
public class UseNoblePhantasmWaveTurnEvent : ServantWaveTurnEvent // TypeDefIndex: 9171
{
	// Methods

	// RVA: 0x20380EC Offset: 0x20380EC VA: 0x20380EC
	public void .ctor(BattleData data) { }
}

// Namespace: 
public abstract class TargetAggregator // TypeDefIndex: 9172
{
	// Fields
	protected TargetAggregator.Args args; // 0x10
	private Nullable<bool> isOpponentTargetOnly; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD2820 Offset: 0xCD2820 VA: 0xCD2820
	private static Func<BattleServantData, bool> <>f__am$cache0; // 0x0

	// Properties
	public int actorId { get; }
	public int targetId { get; }
	public int ptTargetId { get; }
	public BattleData battleData { get; }
	public BattleLogicTask.ACTORTYPE taskActorType { get; }
	public bool IsOpponentTargetOnly { get; }

	// Methods

	// RVA: 0x15E9944 Offset: 0x15E9944 VA: 0x15E9944
	protected void .ctor() { }

	// RVA: 0x15E994C Offset: 0x15E994C VA: 0x15E994C
	public int get_actorId() { }

	// RVA: 0x15E9980 Offset: 0x15E9980 VA: 0x15E9980
	public int get_targetId() { }

	// RVA: 0x15E99B4 Offset: 0x15E99B4 VA: 0x15E99B4
	public int get_ptTargetId() { }

	// RVA: 0x15E99E8 Offset: 0x15E99E8 VA: 0x15E99E8
	public BattleData get_battleData() { }

	// RVA: 0x15E9A1C Offset: 0x15E9A1C VA: 0x15E9A1C
	public BattleLogicTask.ACTORTYPE get_taskActorType() { }

	// RVA: 0x15E9A50 Offset: 0x15E9A50 VA: 0x15E9A50
	public bool get_IsOpponentTargetOnly() { }

	// RVA: 0x15E993C Offset: 0x15E993C VA: 0x15E993C
	public void Init(TargetAggregator.Args args) { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int[] GetCandidate();

	// RVA: 0x15E9B54 Offset: 0x15E9B54 VA: 0x15E9B54
	protected IEnumerable<BattleServantData> BattleServantEnumerable(IEnumerable<int> servantUniqueIdArray) { }

	// RVA: 0x15E9C64 Offset: 0x15E9C64 VA: 0x15E9C64
	protected int[] ToServantUniqueIdArray(BattleServantData targetServant) { }

	// RVA: 0x15E9CFC Offset: 0x15E9CFC VA: 0x15E9CFC
	protected BattleServantData GetMostMatchedServant(int[] servantUniqueIdArray, TargetFilterLogic targetFilterLogic, int defaultServantUniqueId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B62C Offset: 0xD3B62C VA: 0xD3B62C
	// RVA: 0x15E9DDC Offset: 0x15E9DDC VA: 0x15E9DDC
	private BattleServantData <BattleServantEnumerable>m__0(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B63C Offset: 0xD3B63C VA: 0xD3B63C
	// RVA: 0x15E9E24 Offset: 0x15E9E24 VA: 0x15E9E24
	private static bool <BattleServantEnumerable>m__1(BattleServantData x) { }
}

// Namespace: 
public class TargetAggregator.Args // TypeDefIndex: 9173
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD2830 Offset: 0xCD2830 VA: 0xCD2830
	[DebuggerBrowsableAttribute] // RVA: 0xCD2830 Offset: 0xCD2830 VA: 0xCD2830
	private int <actorId>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD286C Offset: 0xCD286C VA: 0xCD286C
	[DebuggerBrowsableAttribute] // RVA: 0xCD286C Offset: 0xCD286C VA: 0xCD286C
	private int <targetId>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCD28A8 Offset: 0xCD28A8 VA: 0xCD28A8
	[DebuggerBrowsableAttribute] // RVA: 0xCD28A8 Offset: 0xCD28A8 VA: 0xCD28A8
	private int <ptTargetId>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD28E4 Offset: 0xCD28E4 VA: 0xCD28E4
	[DebuggerBrowsableAttribute] // RVA: 0xCD28E4 Offset: 0xCD28E4 VA: 0xCD28E4
	private BattleData <battleData>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD2920 Offset: 0xCD2920 VA: 0xCD2920
	[DebuggerBrowsableAttribute] // RVA: 0xCD2920 Offset: 0xCD2920 VA: 0xCD2920
	private BattleLogicTask.ACTORTYPE <taskActorType>k__BackingField; // 0x28

	// Properties
	public int actorId { get; set; }
	public int targetId { get; set; }
	public int ptTargetId { get; set; }
	public BattleData battleData { get; set; }
	public BattleLogicTask.ACTORTYPE taskActorType { get; set; }

	// Methods

	// RVA: 0x15E98E4 Offset: 0x15E98E4 VA: 0x15E98E4
	public void .ctor(BattleData battleData, int actorId, int targetId, int ptTargetId, BattleLogicTask.ACTORTYPE taskActorType) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B64C Offset: 0xD3B64C VA: 0xD3B64C
	// RVA: 0x15E9978 Offset: 0x15E9978 VA: 0x15E9978
	public int get_actorId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B65C Offset: 0xD3B65C VA: 0xD3B65C
	// RVA: 0x15E9E38 Offset: 0x15E9E38 VA: 0x15E9E38
	private void set_actorId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B66C Offset: 0xD3B66C VA: 0xD3B66C
	// RVA: 0x15E99AC Offset: 0x15E99AC VA: 0x15E99AC
	public int get_targetId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B67C Offset: 0xD3B67C VA: 0xD3B67C
	// RVA: 0x15E9E40 Offset: 0x15E9E40 VA: 0x15E9E40
	private void set_targetId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B68C Offset: 0xD3B68C VA: 0xD3B68C
	// RVA: 0x15E99E0 Offset: 0x15E99E0 VA: 0x15E99E0
	public int get_ptTargetId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B69C Offset: 0xD3B69C VA: 0xD3B69C
	// RVA: 0x15E9E48 Offset: 0x15E9E48 VA: 0x15E9E48
	private void set_ptTargetId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B6AC Offset: 0xD3B6AC VA: 0xD3B6AC
	// RVA: 0x15E9A14 Offset: 0x15E9A14 VA: 0x15E9A14
	public BattleData get_battleData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B6BC Offset: 0xD3B6BC VA: 0xD3B6BC
	// RVA: 0x15E9E30 Offset: 0x15E9E30 VA: 0x15E9E30
	private void set_battleData(BattleData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B6CC Offset: 0xD3B6CC VA: 0xD3B6CC
	// RVA: 0x15E9A48 Offset: 0x15E9A48 VA: 0x15E9A48
	public BattleLogicTask.ACTORTYPE get_taskActorType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B6DC Offset: 0xD3B6DC VA: 0xD3B6DC
	// RVA: 0x15E9E50 Offset: 0x15E9E50 VA: 0x15E9E50
	private void set_taskActorType(BattleLogicTask.ACTORTYPE value) { }
}

// Namespace: 
public class NoneTargetAggregator : TargetAggregator // TypeDefIndex: 9174
{
	// Methods

	// RVA: 0x18CA958 Offset: 0x18CA958 VA: 0x18CA958
	public void .ctor() { }

	// RVA: 0x18CA960 Offset: 0x18CA960 VA: 0x18CA960 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyAllFieldTargetAggregator : TargetAggregator // TypeDefIndex: 9175
{
	// Methods

	// RVA: 0x179C568 Offset: 0x179C568 VA: 0x179C568
	public void .ctor() { }

	// RVA: 0x179C570 Offset: 0x179C570 VA: 0x179C570 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class OpponentAllFieldTargetAggregator : TargetAggregator // TypeDefIndex: 9176
{
	// Methods

	// RVA: 0x205BB68 Offset: 0x205BB68 VA: 0x205BB68
	public void .ctor() { }

	// RVA: 0x205BB70 Offset: 0x205BB70 VA: 0x205BB70 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyFullTargetAggregator : TargetAggregator // TypeDefIndex: 9177
{
	// Methods

	// RVA: 0x179E170 Offset: 0x179E170 VA: 0x179E170
	public void .ctor() { }

	// RVA: 0x179E178 Offset: 0x179E178 VA: 0x179E178 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class OpponentFullTargetAggregator : TargetAggregator // TypeDefIndex: 9178
{
	// Methods

	// RVA: 0x205BC34 Offset: 0x205BC34 VA: 0x205BC34
	public void .ctor() { }

	// RVA: 0x205BC3C Offset: 0x205BC3C VA: 0x205BC3C Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyOtherTargetAggregator : PartyAllFieldTargetAggregator // TypeDefIndex: 9179
{
	// Methods

	// RVA: 0x1BC24CC Offset: 0x1BC24CC VA: 0x1BC24CC
	public void .ctor() { }

	// RVA: 0x1BC24D4 Offset: 0x1BC24D4 VA: 0x1BC24D4 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B6EC Offset: 0xD3B6EC VA: 0xD3B6EC
	// RVA: 0x1BC2588 Offset: 0x1BC2588 VA: 0x1BC2588
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class OpponentOtherTargetAggregator : OpponentAllFieldTargetAggregator // TypeDefIndex: 9180
{
	// Methods

	// RVA: 0x205BDEC Offset: 0x205BDEC VA: 0x205BDEC
	public void .ctor() { }

	// RVA: 0x205BDF4 Offset: 0x205BDF4 VA: 0x205BDF4 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B6FC Offset: 0xD3B6FC VA: 0xD3B6FC
	// RVA: 0x205BEA4 Offset: 0x205BEA4 VA: 0x205BEA4
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class PartyOneOtherTargetAggregator : PartyAllFieldTargetAggregator // TypeDefIndex: 9181
{
	// Methods

	// RVA: 0x1F3FB28 Offset: 0x1F3FB28 VA: 0x1F3FB28
	public void .ctor() { }

	// RVA: 0x1F3FB30 Offset: 0x1F3FB30 VA: 0x1F3FB30 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B70C Offset: 0xD3B70C VA: 0xD3B70C
	// RVA: 0x1F3FBE4 Offset: 0x1F3FBE4 VA: 0x1F3FBE4
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class PartyOtherFullTargetAggregator : PartyFullTargetAggregator // TypeDefIndex: 9182
{
	// Methods

	// RVA: 0x1BC23E4 Offset: 0x1BC23E4 VA: 0x1BC23E4
	public void .ctor() { }

	// RVA: 0x1BC23EC Offset: 0x1BC23EC VA: 0x1BC23EC Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B71C Offset: 0xD3B71C VA: 0xD3B71C
	// RVA: 0x1BC24A0 Offset: 0x1BC24A0 VA: 0x1BC24A0
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class OpponentOtherFullTargetAggregator : OpponentFullTargetAggregator // TypeDefIndex: 9183
{
	// Methods

	// RVA: 0x205BD08 Offset: 0x205BD08 VA: 0x205BD08
	public void .ctor() { }

	// RVA: 0x205BD10 Offset: 0x205BD10 VA: 0x205BD10 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B72C Offset: 0xD3B72C VA: 0xD3B72C
	// RVA: 0x205BDC0 Offset: 0x205BDC0 VA: 0x205BDC0
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class PartyLowsetHpValueTargetChoicer : PartyAllFieldTargetAggregator // TypeDefIndex: 9184
{
	// Methods

	// RVA: 0x1F3FA78 Offset: 0x1F3FA78 VA: 0x1F3FA78
	public void .ctor() { }

	// RVA: 0x1F3FA80 Offset: 0x1F3FA80 VA: 0x1F3FA80 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyLowsetHpRateTargetChoicer : PartyAllFieldTargetAggregator // TypeDefIndex: 9185
{
	// Methods

	// RVA: 0x1F3F9C8 Offset: 0x1F3F9C8 VA: 0x1F3F9C8
	public void .ctor() { }

	// RVA: 0x1F3F9D0 Offset: 0x1F3F9D0 VA: 0x1F3F9D0 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public abstract class TargetFilterLogic // TypeDefIndex: 9186
{
	// Methods

	// RVA: 0x15E9E58 Offset: 0x15E9E58 VA: 0x15E9E58
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IEnumerable<BattleServantData> Apply(IEnumerable<BattleServantData> servantEnumerable);
}

// Namespace: 
public class TargetFilterLowestHpValue : TargetFilterLogic // TypeDefIndex: 9187
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD295C Offset: 0xCD295C VA: 0xCD295C
	private static Func<BattleServantData, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD296C Offset: 0xCD296C VA: 0xCD296C
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD297C Offset: 0xCD297C VA: 0xCD297C
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD298C Offset: 0xCD298C VA: 0xCD298C
	private static Func<BattleServantData, int> <>f__am$cache3; // 0x18

	// Methods

	// RVA: 0x15EA2C4 Offset: 0x15EA2C4 VA: 0x15EA2C4
	public void .ctor() { }

	// RVA: 0x15EA2CC Offset: 0x15EA2CC VA: 0x15EA2CC Slot: 4
	public override IEnumerable<BattleServantData> Apply(IEnumerable<BattleServantData> servantEnumerable) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B73C Offset: 0xD3B73C VA: 0xD3B73C
	// RVA: 0x15EA544 Offset: 0x15EA544 VA: 0x15EA544
	private static int <Apply>m__0(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B74C Offset: 0xD3B74C VA: 0xD3B74C
	// RVA: 0x15EA56C Offset: 0x15EA56C VA: 0x15EA56C
	private static int <Apply>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B75C Offset: 0xD3B75C VA: 0xD3B75C
	// RVA: 0x15EA598 Offset: 0x15EA598 VA: 0x15EA598
	private static int <Apply>m__2(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B76C Offset: 0xD3B76C VA: 0xD3B76C
	// RVA: 0x15EA5C8 Offset: 0x15EA5C8 VA: 0x15EA5C8
	private static int <Apply>m__3(BattleServantData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0370 Offset: 0xCB0370 VA: 0xCB0370
private sealed class TargetFilterLowestHpValue.<Apply>c__AnonStorey0 // TypeDefIndex: 9188
{
	// Fields
	internal Dictionary<int, int> uniqueIdToMaxHpDict; // 0x10

	// Methods

	// RVA: 0x15EA53C Offset: 0x15EA53C VA: 0x15EA53C
	public void .ctor() { }

	// RVA: 0x15EA5F4 Offset: 0x15EA5F4 VA: 0x15EA5F4
	internal bool <>m__0(BattleServantData x) { }
}

// Namespace: 
public class TargetFilterLowestHpRate : TargetFilterLogic // TypeDefIndex: 9189
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD299C Offset: 0xCD299C VA: 0xCD299C
	private static Func<BattleServantData, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD29AC Offset: 0xCD29AC VA: 0xCD29AC
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD29BC Offset: 0xCD29BC VA: 0xCD29BC
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x10

	// Methods

	// RVA: 0x15E9E60 Offset: 0x15E9E60 VA: 0x15E9E60
	public void .ctor() { }

	// RVA: 0x15E9E68 Offset: 0x15E9E68 VA: 0x15E9E68 Slot: 4
	public override IEnumerable<BattleServantData> Apply(IEnumerable<BattleServantData> servantEnumerable) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B77C Offset: 0xD3B77C VA: 0xD3B77C
	// RVA: 0x15EA0C4 Offset: 0x15EA0C4 VA: 0x15EA0C4
	private static int <Apply>m__0(BattleServantData x) { }

