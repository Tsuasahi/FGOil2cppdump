	private static AbstractF2mPoint MultiplyFromWTnaf(AbstractF2mPoint p, sbyte[] u, PreCompInfo preCompInfo) { }

	// RVA: 0x2482B24 Offset: 0x2482B24 VA: 0x2482B24
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Multiplier
public class WTauNafPreCompInfo : PreCompInfo // TypeDefIndex: 5148
{
	// Fields
	protected AbstractF2mPoint[] m_preComp; // 0x10

	// Properties
	public virtual AbstractF2mPoint[] PreComp { get; set; }

	// Methods

	// RVA: 0x2482B1C Offset: 0x2482B1C VA: 0x2482B1C
	public void .ctor() { }

	// RVA: 0x2482B80 Offset: 0x2482B80 VA: 0x2482B80 Slot: 4
	public virtual AbstractF2mPoint[] get_PreComp() { }

	// RVA: 0x2482B88 Offset: 0x2482B88 VA: 0x2482B88 Slot: 5
	public virtual void set_PreComp(AbstractF2mPoint[] value) { }
}

// Namespace: Org.BouncyCastle.Math.EC
public class ScaleXPointMap : ECPointMap // TypeDefIndex: 5149
{
	// Fields
	protected readonly ECFieldElement scale; // 0x10

	// Methods

	// RVA: 0x2482B90 Offset: 0x2482B90 VA: 0x2482B90
	public void .ctor(ECFieldElement scale) { }

	// RVA: 0x2482BBC Offset: 0x2482BBC VA: 0x2482BBC Slot: 5
	public virtual ECPoint Map(ECPoint p) { }
}

// Namespace: Org.BouncyCastle.Math.Field
public abstract class FiniteFields // TypeDefIndex: 5150
{
	// Fields
	internal static readonly IFiniteField GF_2; // 0x0
	internal static readonly IFiniteField GF_3; // 0x8

	// Methods

	// RVA: 0x2482BFC Offset: 0x2482BFC VA: 0x2482BFC
	protected void .ctor() { }

	// RVA: 0x2482C04 Offset: 0x2482C04 VA: 0x2482C04
	public static IPolynomialExtensionField GetBinaryExtensionField(int[] exponents) { }

	// RVA: 0x2482E48 Offset: 0x2482E48 VA: 0x2482E48
	public static IFiniteField GetPrimeField(BigInteger characteristic) { }

	// RVA: 0x248300C Offset: 0x248300C VA: 0x248300C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.Field
internal class GenericPolynomialExtensionField : IPolynomialExtensionField, IExtensionField, IFiniteField // TypeDefIndex: 5151
{
	// Fields
	protected readonly IFiniteField subfield; // 0x10
	protected readonly IPolynomial minimalPolynomial; // 0x18

	// Properties
	public virtual BigInteger Characteristic { get; }
	public virtual int Dimension { get; }
	public virtual IFiniteField Subfield { get; }
	public virtual int Degree { get; }
	public virtual IPolynomial MinimalPolynomial { get; }

	// Methods

	// RVA: 0x2482E10 Offset: 0x2482E10 VA: 0x2482E10
	internal void .ctor(IFiniteField subfield, IPolynomial polynomial) { }

	// RVA: 0x248322C Offset: 0x248322C VA: 0x248322C Slot: 9
	public virtual BigInteger get_Characteristic() { }

	// RVA: 0x24832E0 Offset: 0x24832E0 VA: 0x24832E0 Slot: 10
	public virtual int get_Dimension() { }

	// RVA: 0x248341C Offset: 0x248341C VA: 0x248341C Slot: 11
	public virtual IFiniteField get_Subfield() { }

	// RVA: 0x2483424 Offset: 0x2483424 VA: 0x2483424 Slot: 12
	public virtual int get_Degree() { }

	// RVA: 0x24834D8 Offset: 0x24834D8 VA: 0x24834D8 Slot: 13
	public virtual IPolynomial get_MinimalPolynomial() { }

	// RVA: 0x24834E0 Offset: 0x24834E0 VA: 0x24834E0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24835E8 Offset: 0x24835E8 VA: 0x24835E8 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.Field
internal class GF2Polynomial : IPolynomial // TypeDefIndex: 5152
{
	// Fields
	protected readonly int[] exponents; // 0x10

	// Properties
	public virtual int Degree { get; }

	// Methods

	// RVA: 0x2482DD8 Offset: 0x2482DD8 VA: 0x2482DD8
	internal void .ctor(int[] exponents) { }

	// RVA: 0x24830F0 Offset: 0x24830F0 VA: 0x24830F0 Slot: 6
	public virtual int get_Degree() { }

	// RVA: 0x248314C Offset: 0x248314C VA: 0x248314C Slot: 7
	public virtual int[] GetExponentsPresent() { }

	// RVA: 0x2483158 Offset: 0x2483158 VA: 0x2483158 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2483220 Offset: 0x2483220 VA: 0x2483220 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.Field
public interface IExtensionField : IFiniteField // TypeDefIndex: 5153
{
	// Properties
	public abstract IFiniteField Subfield { get; }
	public abstract int Degree { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IFiniteField get_Subfield();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Degree();
}

// Namespace: Org.BouncyCastle.Math.Field
public interface IFiniteField // TypeDefIndex: 5154
{
	// Properties
	public abstract BigInteger Characteristic { get; }
	public abstract int Dimension { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract BigInteger get_Characteristic();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Dimension();
}

// Namespace: Org.BouncyCastle.Math.Field
public interface IPolynomial // TypeDefIndex: 5155
{
	// Properties
	public abstract int Degree { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Degree();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int[] GetExponentsPresent();
}

// Namespace: Org.BouncyCastle.Math.Field
public interface IPolynomialExtensionField : IExtensionField, IFiniteField // TypeDefIndex: 5156
{
	// Properties
	public abstract IPolynomial MinimalPolynomial { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IPolynomial get_MinimalPolynomial();
}

// Namespace: Org.BouncyCastle.Math.Field
internal class PrimeField : IFiniteField // TypeDefIndex: 5157
{
	// Fields
	protected readonly BigInteger characteristic; // 0x10

	// Properties
	public virtual BigInteger Characteristic { get; }
	public virtual int Dimension { get; }

	// Methods

	// RVA: 0x2482FE0 Offset: 0x2482FE0 VA: 0x2482FE0
	internal void .ctor(BigInteger characteristic) { }

	// RVA: 0x2483658 Offset: 0x2483658 VA: 0x2483658 Slot: 6
	public virtual BigInteger get_Characteristic() { }

	// RVA: 0x2483660 Offset: 0x2483660 VA: 0x2483660 Slot: 7
	public virtual int get_Dimension() { }

	// RVA: 0x2483668 Offset: 0x2483668 VA: 0x2483668 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2483744 Offset: 0x2483744 VA: 0x2483744 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Interleave // TypeDefIndex: 5158
{
	// Fields
	private const ulong M32 = 1431655765;
	private const ulong M64 = 6148914691236517205;

	// Methods

	// RVA: 0x2483778 Offset: 0x2483778 VA: 0x2483778
	protected void .ctor() { }

	// RVA: 0x2483780 Offset: 0x2483780 VA: 0x2483780
	internal static uint Expand8to16(uint x) { }

	// RVA: 0x24837AC Offset: 0x24837AC VA: 0x24837AC
	internal static uint Expand16to32(uint x) { }

	// RVA: 0x24837D4 Offset: 0x24837D4 VA: 0x24837D4
	internal static ulong Expand32to64(uint x) { }

	// RVA: 0x248382C Offset: 0x248382C VA: 0x248382C
	internal static void Expand64To128(ulong x, ulong[] z, int zOff) { }

	// RVA: 0x2483920 Offset: 0x2483920 VA: 0x2483920
	internal static ulong Unshuffle(ulong x) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Mod // TypeDefIndex: 5159
{
	// Fields
	private static readonly SecureRandom RandomSource; // 0x0

	// Methods

	// RVA: 0x248397C Offset: 0x248397C VA: 0x248397C
	protected void .ctor() { }

	// RVA: 0x2483984 Offset: 0x2483984 VA: 0x2483984
	public static void Invert(uint[] p, uint[] x, uint[] z) { }

	// RVA: 0x2484398 Offset: 0x2484398 VA: 0x2484398
	public static uint[] Random(uint[] p) { }

	// RVA: 0x2484534 Offset: 0x2484534 VA: 0x2484534
	public static void Add(uint[] p, uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24846BC Offset: 0x24846BC VA: 0x24846BC
	public static void Subtract(uint[] p, uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2484174 Offset: 0x2484174 VA: 0x2484174
	private static void InversionResult(uint[] p, int ac, uint[] a, uint[] z) { }

	// RVA: 0x2483FB4 Offset: 0x2483FB4 VA: 0x2483FB4
	private static void InversionStep(uint[] p, uint[] u, int uLen, uint[] x, ref int xc) { }

	// RVA: 0x24849D8 Offset: 0x24849D8 VA: 0x24849D8
	private static int GetTrailingZeroes(uint x) { }

	// RVA: 0x2484B68 Offset: 0x2484B68 VA: 0x2484B68
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat // TypeDefIndex: 5160
{
	// Fields
	private const ulong M = 4294967295;

	// Methods

	// RVA: 0x2484BD4 Offset: 0x2484BD4 VA: 0x2484BD4
	protected void .ctor() { }

	// RVA: 0x24845B0 Offset: 0x24845B0 VA: 0x24845B0
	public static uint Add(int len, uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2484BDC Offset: 0x2484BDC VA: 0x2484BDC
	public static uint Add33At(int len, uint x, uint[] z, int zPos) { }

	// RVA: 0x2484D78 Offset: 0x2484D78 VA: 0x2484D78
	public static uint Add33At(int len, uint x, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2484F40 Offset: 0x2484F40 VA: 0x2484F40
	public static uint Add33To(int len, uint x, uint[] z) { }

	// RVA: 0x2485028 Offset: 0x2485028 VA: 0x2485028
	public static uint Add33To(int len, uint x, uint[] z, int zOff) { }

	// RVA: 0x2485140 Offset: 0x2485140 VA: 0x2485140
	public static uint AddBothTo(int len, uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2485280 Offset: 0x2485280 VA: 0x2485280
	public static uint AddBothTo(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24853E4 Offset: 0x24853E4 VA: 0x24853E4
	public static uint AddDWordAt(int len, ulong x, uint[] z, int zPos) { }

	// RVA: 0x2485504 Offset: 0x2485504 VA: 0x2485504
	public static uint AddDWordAt(int len, ulong x, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2485630 Offset: 0x2485630 VA: 0x2485630
	public static uint AddDWordTo(int len, ulong x, uint[] z) { }

	// RVA: 0x2485718 Offset: 0x2485718 VA: 0x2485718
	public static uint AddDWordTo(int len, ulong x, uint[] z, int zOff) { }

	// RVA: 0x2484844 Offset: 0x2484844 VA: 0x2484844
	public static uint AddTo(int len, uint[] x, uint[] z) { }

	// RVA: 0x248583C Offset: 0x248583C VA: 0x248583C
	public static uint AddTo(int len, uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x248593C Offset: 0x248593C VA: 0x248593C
	public static uint AddWordAt(int len, uint x, uint[] z, int zPos) { }

	// RVA: 0x24859F8 Offset: 0x24859F8 VA: 0x24859F8
	public static uint AddWordAt(int len, uint x, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2485ACC Offset: 0x2485ACC VA: 0x2485ACC
	public static uint AddWordTo(int len, uint x, uint[] z) { }

	// RVA: 0x2485B68 Offset: 0x2485B68 VA: 0x2485B68
	public static uint AddWordTo(int len, uint x, uint[] z, int zOff) { }

	// RVA: 0x2485C28 Offset: 0x2485C28 VA: 0x2485C28
	public static void Copy(int len, uint[] x, uint[] z) { }

	// RVA: 0x2483EE0 Offset: 0x2483EE0 VA: 0x2483EE0
	public static uint[] Copy(int len, uint[] x) { }

	// RVA: 0x2483F64 Offset: 0x2483F64 VA: 0x2483F64
	public static uint[] Create(int len) { }

	// RVA: 0x2485C44 Offset: 0x2485C44 VA: 0x2485C44
	public static ulong[] Create64(int len) { }

	// RVA: 0x2485C94 Offset: 0x2485C94 VA: 0x2485C94
	public static int Dec(int len, uint[] z) { }

	// RVA: 0x2485D1C Offset: 0x2485D1C VA: 0x2485D1C
	public static int Dec(int len, uint[] x, uint[] z) { }

	// RVA: 0x2485E50 Offset: 0x2485E50 VA: 0x2485E50
	public static int DecAt(int len, uint[] z, int zPos) { }

	// RVA: 0x2485ED8 Offset: 0x2485ED8 VA: 0x2485ED8
	public static int DecAt(int len, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2485F74 Offset: 0x2485F74 VA: 0x2485F74
	public static bool Eq(int len, uint[] x, uint[] y) { }

	// RVA: 0x2486028 Offset: 0x2486028 VA: 0x2486028
	public static uint[] FromBigInteger(int bits, BigInteger x) { }

	// RVA: 0x248619C Offset: 0x248619C VA: 0x248619C
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x24841EC Offset: 0x24841EC VA: 0x24841EC
	public static bool Gte(int len, uint[] x, uint[] y) { }

	// RVA: 0x2486250 Offset: 0x2486250 VA: 0x2486250
	public static uint Inc(int len, uint[] z) { }

	// RVA: 0x24862D8 Offset: 0x24862D8 VA: 0x24862D8
	public static uint Inc(int len, uint[] x, uint[] z) { }

	// RVA: 0x2484CF0 Offset: 0x2484CF0 VA: 0x2484CF0
	public static uint IncAt(int len, uint[] z, int zPos) { }

	// RVA: 0x2484EA4 Offset: 0x2484EA4 VA: 0x2484EA4
	public static uint IncAt(int len, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2483E34 Offset: 0x2483E34 VA: 0x2483E34
	public static bool IsOne(int len, uint[] x) { }

	// RVA: 0x2483D8C Offset: 0x2483D8C VA: 0x2483D8C
	public static bool IsZero(int len, uint[] x) { }

	// RVA: 0x248640C Offset: 0x248640C VA: 0x248640C
	public static void Mul(int len, uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2486730 Offset: 0x2486730 VA: 0x2486730
	public static void Mul(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x2486998 Offset: 0x2486998 VA: 0x2486998
	public static uint Mul31BothAdd(int len, uint a, uint[] x, uint b, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x2486558 Offset: 0x2486558 VA: 0x2486558
	public static uint MulWord(int len, uint x, uint[] y, uint[] z) { }

	// RVA: 0x24868B4 Offset: 0x24868B4 VA: 0x24868B4
	public static uint MulWord(int len, uint x, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x248661C Offset: 0x248661C VA: 0x248661C
	public static uint MulWordAddTo(int len, uint x, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x2486AF8 Offset: 0x2486AF8 VA: 0x2486AF8
	public static uint MulWordDwordAddAt(int len, uint x, ulong y, uint[] z, int zPos) { }

	// RVA: 0x2484AC0 Offset: 0x2484AC0 VA: 0x2484AC0
	public static uint ShiftDownBit(int len, uint[] z, uint c) { }

	// RVA: 0x2486C78 Offset: 0x2486C78 VA: 0x2486C78
	public static uint ShiftDownBit(int len, uint[] z, int zOff, uint c) { }

	// RVA: 0x2486D30 Offset: 0x2486D30 VA: 0x2486D30
	public static uint ShiftDownBit(int len, uint[] x, uint c, uint[] z) { }

	// RVA: 0x2486DF0 Offset: 0x2486DF0 VA: 0x2486DF0
	public static uint ShiftDownBit(int len, uint[] x, int xOff, uint c, uint[] z, int zOff) { }

	// RVA: 0x24849F4 Offset: 0x24849F4 VA: 0x24849F4
	public static uint ShiftDownBits(int len, uint[] z, int bits, uint c) { }

	// RVA: 0x2486EC8 Offset: 0x2486EC8 VA: 0x2486EC8
	public static uint ShiftDownBits(int len, uint[] z, int zOff, int bits, uint c) { }

	// RVA: 0x2486FA4 Offset: 0x2486FA4 VA: 0x2486FA4
	public static uint ShiftDownBits(int len, uint[] x, int bits, uint c, uint[] z) { }

	// RVA: 0x2487088 Offset: 0x2487088 VA: 0x2487088
	public static uint ShiftDownBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff) { }

	// RVA: 0x2484934 Offset: 0x2484934 VA: 0x2484934
	public static uint ShiftDownWord(int len, uint[] z, uint c) { }

	// RVA: 0x2487184 Offset: 0x2487184 VA: 0x2487184
	public static uint ShiftUpBit(int len, uint[] z, uint c) { }

	// RVA: 0x2487234 Offset: 0x2487234 VA: 0x2487234
	public static uint ShiftUpBit(int len, uint[] z, int zOff, uint c) { }

	// RVA: 0x24872E8 Offset: 0x24872E8 VA: 0x24872E8
	public static uint ShiftUpBit(int len, uint[] x, uint c, uint[] z) { }

	// RVA: 0x24873B4 Offset: 0x24873B4 VA: 0x24873B4
	public static uint ShiftUpBit(int len, uint[] x, int xOff, uint c, uint[] z, int zOff) { }

	// RVA: 0x2487490 Offset: 0x2487490 VA: 0x2487490
	public static ulong ShiftUpBit64(int len, ulong[] x, int xOff, ulong c, ulong[] z, int zOff) { }

	// RVA: 0x248756C Offset: 0x248756C VA: 0x248756C
	public static uint ShiftUpBits(int len, uint[] z, int bits, uint c) { }

	// RVA: 0x2487640 Offset: 0x2487640 VA: 0x2487640
	public static uint ShiftUpBits(int len, uint[] z, int zOff, int bits, uint c) { }

	// RVA: 0x2487718 Offset: 0x2487718 VA: 0x2487718
	public static ulong ShiftUpBits64(int len, ulong[] z, int zOff, int bits, ulong c) { }

	// RVA: 0x24877F0 Offset: 0x24877F0 VA: 0x24877F0
	public static uint ShiftUpBits(int len, uint[] x, int bits, uint c, uint[] z) { }

	// RVA: 0x24878E0 Offset: 0x24878E0 VA: 0x24878E0
	public static uint ShiftUpBits(int len, uint[] x, int xOff, int bits, uint c, uint[] z, int zOff) { }

	// RVA: 0x24879E0 Offset: 0x24879E0 VA: 0x24879E0
	public static ulong ShiftUpBits64(int len, ulong[] x, int xOff, int bits, ulong c, ulong[] z, int zOff) { }

	// RVA: 0x2487AE0 Offset: 0x2487AE0 VA: 0x2487AE0
	public static void Square(int len, uint[] x, uint[] zz) { }

	// RVA: 0x2487D9C Offset: 0x2487D9C VA: 0x2487D9C
	public static void Square(int len, uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x2487C78 Offset: 0x2487C78 VA: 0x2487C78
	public static uint SquareWordAdd(uint[] x, int xPos, uint[] z) { }

	// RVA: 0x2487F68 Offset: 0x2487F68 VA: 0x2487F68
	public static uint SquareWordAdd(uint[] x, int xOff, int xPos, uint[] z, int zOff) { }

	// RVA: 0x2484738 Offset: 0x2484738 VA: 0x2484738
	public static int Sub(int len, uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24880AC Offset: 0x24880AC VA: 0x24880AC
	public static int Sub(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24881D4 Offset: 0x24881D4 VA: 0x24881D4
	public static int Sub33At(int len, uint x, uint[] z, int zPos) { }

	// RVA: 0x24882E8 Offset: 0x24882E8 VA: 0x24882E8
	public static int Sub33At(int len, uint x, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2488414 Offset: 0x2488414 VA: 0x2488414
	public static int Sub33From(int len, uint x, uint[] z) { }

	// RVA: 0x24884FC Offset: 0x24884FC VA: 0x24884FC
	public static int Sub33From(int len, uint x, uint[] z, int zOff) { }

	// RVA: 0x2488614 Offset: 0x2488614 VA: 0x2488614
	public static int SubBothFrom(int len, uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2488754 Offset: 0x2488754 VA: 0x2488754
	public static int SubBothFrom(int len, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24888C0 Offset: 0x24888C0 VA: 0x24888C0
	public static int SubDWordAt(int len, ulong x, uint[] z, int zPos) { }

	// RVA: 0x24889E0 Offset: 0x24889E0 VA: 0x24889E0
	public static int SubDWordAt(int len, ulong x, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2488B0C Offset: 0x2488B0C VA: 0x2488B0C
	public static int SubDWordFrom(int len, ulong x, uint[] z) { }

	// RVA: 0x2488BF4 Offset: 0x2488BF4 VA: 0x2488BF4
	public static int SubDWordFrom(int len, ulong x, uint[] z, int zOff) { }

	// RVA: 0x24842A8 Offset: 0x24842A8 VA: 0x24842A8
	public static int SubFrom(int len, uint[] x, uint[] z) { }

	// RVA: 0x2488D18 Offset: 0x2488D18 VA: 0x2488D18
	public static int SubFrom(int len, uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x2488E20 Offset: 0x2488E20 VA: 0x2488E20
	public static int SubWordAt(int len, uint x, uint[] z, int zPos) { }

	// RVA: 0x2488EDC Offset: 0x2488EDC VA: 0x2488EDC
	public static int SubWordAt(int len, uint x, uint[] z, int zOff, int zPos) { }

	// RVA: 0x2488FB0 Offset: 0x2488FB0 VA: 0x2488FB0
	public static int SubWordFrom(int len, uint x, uint[] z) { }

	// RVA: 0x248904C Offset: 0x248904C VA: 0x248904C
	public static int SubWordFrom(int len, uint x, uint[] z, int zOff) { }

	// RVA: 0x248910C Offset: 0x248910C VA: 0x248910C
	public static BigInteger ToBigInteger(int len, uint[] x) { }

	// RVA: 0x248920C Offset: 0x248920C VA: 0x248920C
	public static void Zero(int len, uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat128 // TypeDefIndex: 5161
{
	// Fields
	private const ulong M = 4294967295;

	// Methods

	// RVA: 0x248927C Offset: 0x248927C VA: 0x248927C
	protected void .ctor() { }

	// RVA: 0x2489284 Offset: 0x2489284 VA: 0x2489284
	public static uint Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2489478 Offset: 0x2489478 VA: 0x2489478
	public static uint AddBothTo(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24896F8 Offset: 0x24896F8 VA: 0x24896F8
	public static uint AddTo(uint[] x, uint[] z) { }

	// RVA: 0x24898D4 Offset: 0x24898D4 VA: 0x24898D4
	public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn) { }

	// RVA: 0x2489B38 Offset: 0x2489B38 VA: 0x2489B38
	public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff) { }

	// RVA: 0x2489E18 Offset: 0x2489E18 VA: 0x2489E18
	public static void Copy(uint[] x, uint[] z) { }

	// RVA: 0x2489F4C Offset: 0x2489F4C VA: 0x2489F4C
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x248A000 Offset: 0x248A000 VA: 0x248A000
	public static uint[] Create() { }

	// RVA: 0x248A04C Offset: 0x248A04C VA: 0x248A04C
	public static ulong[] Create64() { }

	// RVA: 0x248A098 Offset: 0x248A098 VA: 0x248A098
	public static uint[] CreateExt() { }

	// RVA: 0x248A0E4 Offset: 0x248A0E4 VA: 0x248A0E4
	public static ulong[] CreateExt64() { }

	// RVA: 0x248A130 Offset: 0x248A130 VA: 0x248A130
	public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x248A534 Offset: 0x248A534 VA: 0x248A534
	public static bool Eq(uint[] x, uint[] y) { }

	// RVA: 0x248A5E4 Offset: 0x248A5E4 VA: 0x248A5E4
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x248A694 Offset: 0x248A694 VA: 0x248A694
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x248A7FC Offset: 0x248A7FC VA: 0x248A7FC
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x248A964 Offset: 0x248A964 VA: 0x248A964
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x248AA10 Offset: 0x248AA10 VA: 0x248AA10
	public static bool Gte(uint[] x, uint[] y) { }

	// RVA: 0x248A1B8 Offset: 0x248A1B8 VA: 0x248A1B8
	public static bool Gte(uint[] x, int xOff, uint[] y, int yOff) { }

	// RVA: 0x248AAC8 Offset: 0x248AAC8 VA: 0x248AAC8
	public static bool IsOne(uint[] x) { }

	// RVA: 0x248AB60 Offset: 0x248AB60 VA: 0x248AB60
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x248ABD8 Offset: 0x248ABD8 VA: 0x248ABD8
	public static bool IsZero(uint[] x) { }

	// RVA: 0x248AC4C Offset: 0x248AC4C VA: 0x248AC4C
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x248ACC0 Offset: 0x248ACC0 VA: 0x248ACC0
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x248B034 Offset: 0x248B034 VA: 0x248B034
	public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x248B488 Offset: 0x248B488 VA: 0x248B488
	public static uint MulAddTo(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x248B758 Offset: 0x248B758 VA: 0x248B758
	public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x248BAC8 Offset: 0x248BAC8 VA: 0x248BAC8
	public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x248BDA0 Offset: 0x248BDA0 VA: 0x248BDA0
	public static uint MulWordAddExt(uint x, uint[] yy, int yyOff, uint[] zz, int zzOff) { }

	// RVA: 0x248C018 Offset: 0x248C018 VA: 0x248C018
	public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x248C1C8 Offset: 0x248C1C8 VA: 0x248C1C8
	public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x248C338 Offset: 0x248C338 VA: 0x248C338
	public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x248C4B4 Offset: 0x248C4B4 VA: 0x248C4B4
	public static uint MulWordsAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x248C5C8 Offset: 0x248C5C8 VA: 0x248C5C8
	public static uint MulWord(uint x, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x248C694 Offset: 0x248C694 VA: 0x248C694
	public static void Square(uint[] x, uint[] zz) { }

	// RVA: 0x248CA60 Offset: 0x248CA60 VA: 0x248CA60
	public static void Square(uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x248CF40 Offset: 0x248CF40 VA: 0x248CF40
	public static int Sub(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x248A294 Offset: 0x248A294 VA: 0x248A294
	public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x248D134 Offset: 0x248D134 VA: 0x248D134
	public static int SubBothFrom(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x248D3B8 Offset: 0x248D3B8 VA: 0x248D3B8
	public static int SubFrom(uint[] x, uint[] z) { }

	// RVA: 0x248D598 Offset: 0x248D598 VA: 0x248D598
	public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x248D7FC Offset: 0x248D7FC VA: 0x248D7FC
	public static BigInteger ToBigInteger(uint[] x) { }

	// RVA: 0x248D8E8 Offset: 0x248D8E8 VA: 0x248D8E8
	public static BigInteger ToBigInteger64(ulong[] x) { }

	// RVA: 0x248D9D4 Offset: 0x248D9D4 VA: 0x248D9D4
	public static void Zero(uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat160 // TypeDefIndex: 5162
{
	// Fields
	private const ulong M = 4294967295;

	// Methods

	// RVA: 0x248DA74 Offset: 0x248DA74 VA: 0x248DA74
	protected void .ctor() { }

	// RVA: 0x248DA7C Offset: 0x248DA7C VA: 0x248DA7C
	public static uint Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x248DCDC Offset: 0x248DCDC VA: 0x248DCDC
	public static uint AddBothTo(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x248DFEC Offset: 0x248DFEC VA: 0x248DFEC
	public static uint AddTo(uint[] x, uint[] z) { }

	// RVA: 0x248E234 Offset: 0x248E234 VA: 0x248E234
	public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn) { }

	// RVA: 0x248E57C Offset: 0x248E57C VA: 0x248E57C
	public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff) { }

	// RVA: 0x248E900 Offset: 0x248E900 VA: 0x248E900
	public static void Copy(uint[] x, uint[] z) { }

	// RVA: 0x248EA74 Offset: 0x248EA74 VA: 0x248EA74
	public static uint[] Create() { }

	// RVA: 0x248EAC0 Offset: 0x248EAC0 VA: 0x248EAC0
	public static uint[] CreateExt() { }

	// RVA: 0x248EB0C Offset: 0x248EB0C VA: 0x248EB0C
	public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x248EFA0 Offset: 0x248EFA0 VA: 0x248EFA0
	public static bool Eq(uint[] x, uint[] y) { }

	// RVA: 0x248F050 Offset: 0x248F050 VA: 0x248F050
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x248F1B8 Offset: 0x248F1B8 VA: 0x248F1B8
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x248F268 Offset: 0x248F268 VA: 0x248F268
	public static bool Gte(uint[] x, uint[] y) { }

	// RVA: 0x248EB94 Offset: 0x248EB94 VA: 0x248EB94
	public static bool Gte(uint[] x, int xOff, uint[] y, int yOff) { }

	// RVA: 0x248F320 Offset: 0x248F320 VA: 0x248F320
	public static bool IsOne(uint[] x) { }

	// RVA: 0x248F3B8 Offset: 0x248F3B8 VA: 0x248F3B8
	public static bool IsZero(uint[] x) { }

	// RVA: 0x248F42C Offset: 0x248F42C VA: 0x248F42C
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x248F844 Offset: 0x248F844 VA: 0x248F844
	public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x248FD60 Offset: 0x248FD60 VA: 0x248FD60
	public static uint MulAddTo(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24900A8 Offset: 0x24900A8 VA: 0x24900A8
	public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x24904AC Offset: 0x24904AC VA: 0x24904AC
	public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x249081C Offset: 0x249081C VA: 0x249081C
	public static uint MulWordAddExt(uint x, uint[] yy, int yyOff, uint[] zz, int zzOff) { }

	// RVA: 0x2490B1C Offset: 0x2490B1C VA: 0x2490B1C
	public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x2490CFC Offset: 0x2490CFC VA: 0x2490CFC
	public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x2490E6C Offset: 0x2490E6C VA: 0x2490E6C
	public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x2490FE8 Offset: 0x2490FE8 VA: 0x2490FE8
	public static uint MulWordsAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x24910FC Offset: 0x24910FC VA: 0x24910FC
	public static uint MulWord(uint x, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x24911C8 Offset: 0x24911C8 VA: 0x24911C8
	public static void Square(uint[] x, uint[] zz) { }

	// RVA: 0x2491680 Offset: 0x2491680 VA: 0x2491680
	public static void Square(uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x2491CE8 Offset: 0x2491CE8 VA: 0x2491CE8
	public static int Sub(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x248EC70 Offset: 0x248EC70 VA: 0x248EC70
	public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x2491F48 Offset: 0x2491F48 VA: 0x2491F48
	public static int SubBothFrom(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x249225C Offset: 0x249225C VA: 0x249225C
	public static int SubFrom(uint[] x, uint[] z) { }

	// RVA: 0x24924A8 Offset: 0x24924A8 VA: 0x24924A8
	public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x2492790 Offset: 0x2492790 VA: 0x2492790
	public static BigInteger ToBigInteger(uint[] x) { }

	// RVA: 0x249287C Offset: 0x249287C VA: 0x249287C
	public static void Zero(uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat192 // TypeDefIndex: 5163
{
	// Fields
	private const ulong M = 4294967295;

	// Methods

	// RVA: 0x249293C Offset: 0x249293C VA: 0x249293C
	protected void .ctor() { }

	// RVA: 0x2492944 Offset: 0x2492944 VA: 0x2492944
	public static uint Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2492C10 Offset: 0x2492C10 VA: 0x2492C10
	public static uint AddBothTo(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2492FB0 Offset: 0x2492FB0 VA: 0x2492FB0
	public static uint AddTo(uint[] x, uint[] z) { }

	// RVA: 0x2493264 Offset: 0x2493264 VA: 0x2493264
	public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn) { }

	// RVA: 0x24935D0 Offset: 0x24935D0 VA: 0x24935D0
	public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff) { }

	// RVA: 0x24939F8 Offset: 0x24939F8 VA: 0x24939F8
	public static void Copy(uint[] x, uint[] z) { }

	// RVA: 0x2493BAC Offset: 0x2493BAC VA: 0x2493BAC
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x2493CA0 Offset: 0x2493CA0 VA: 0x2493CA0
	public static uint[] Create() { }

	// RVA: 0x2493CEC Offset: 0x2493CEC VA: 0x2493CEC
	public static ulong[] Create64() { }

	// RVA: 0x2493D38 Offset: 0x2493D38 VA: 0x2493D38
	public static uint[] CreateExt() { }

	// RVA: 0x2493D84 Offset: 0x2493D84 VA: 0x2493D84
	public static ulong[] CreateExt64() { }

	// RVA: 0x2493DD0 Offset: 0x2493DD0 VA: 0x2493DD0
	public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24942F4 Offset: 0x24942F4 VA: 0x24942F4
	public static bool Eq(uint[] x, uint[] y) { }

	// RVA: 0x24943A4 Offset: 0x24943A4 VA: 0x24943A4
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x2494454 Offset: 0x2494454 VA: 0x2494454
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24945BC Offset: 0x24945BC VA: 0x24945BC
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x2494724 Offset: 0x2494724 VA: 0x2494724
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x24947D4 Offset: 0x24947D4 VA: 0x24947D4
	public static bool Gte(uint[] x, uint[] y) { }

	// RVA: 0x2493E58 Offset: 0x2493E58 VA: 0x2493E58
	public static bool Gte(uint[] x, int xOff, uint[] y, int yOff) { }

	// RVA: 0x249488C Offset: 0x249488C VA: 0x249488C
	public static bool IsOne(uint[] x) { }

	// RVA: 0x2494924 Offset: 0x2494924 VA: 0x2494924
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x24949BC Offset: 0x24949BC VA: 0x24949BC
	public static bool IsZero(uint[] x) { }

	// RVA: 0x2494A30 Offset: 0x2494A30 VA: 0x2494A30
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x2494AA4 Offset: 0x2494AA4 VA: 0x2494AA4
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2494F60 Offset: 0x2494F60 VA: 0x2494F60
	public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x2495544 Offset: 0x2495544 VA: 0x2495544
	public static uint MulAddTo(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2495904 Offset: 0x2495904 VA: 0x2495904
	public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x2495D9C Offset: 0x2495D9C VA: 0x2495D9C
	public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24961A4 Offset: 0x24961A4 VA: 0x24961A4
	public static uint MulWordAddExt(uint x, uint[] yy, int yyOff, uint[] zz, int zzOff) { }

	// RVA: 0x249652C Offset: 0x249652C VA: 0x249652C
	public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x249670C Offset: 0x249670C VA: 0x249670C
	public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x249687C Offset: 0x249687C VA: 0x249687C
	public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x24969F8 Offset: 0x24969F8 VA: 0x24969F8
	public static uint MulWord(uint x, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x2496AC4 Offset: 0x2496AC4 VA: 0x2496AC4
	public static void Square(uint[] x, uint[] zz) { }

	// RVA: 0x2497090 Offset: 0x2497090 VA: 0x2497090
	public static void Square(uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x249783C Offset: 0x249783C VA: 0x249783C
	public static int Sub(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2493F34 Offset: 0x2493F34 VA: 0x2493F34
	public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x2497B08 Offset: 0x2497B08 VA: 0x2497B08
	public static int SubBothFrom(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2497EAC Offset: 0x2497EAC VA: 0x2497EAC
	public static int SubFrom(uint[] x, uint[] z) { }

	// RVA: 0x2498164 Offset: 0x2498164 VA: 0x2498164
	public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x24984D0 Offset: 0x24984D0 VA: 0x24984D0
	public static BigInteger ToBigInteger(uint[] x) { }

	// RVA: 0x24985BC Offset: 0x24985BC VA: 0x24985BC
	public static BigInteger ToBigInteger64(ulong[] x) { }

	// RVA: 0x24986A8 Offset: 0x24986A8 VA: 0x24986A8
	public static void Zero(uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat224 // TypeDefIndex: 5164
{
	// Fields
	private const ulong M = 4294967295;

	// Methods

	// RVA: 0x219E1B0 Offset: 0x219E1B0 VA: 0x219E1B0
	protected void .ctor() { }

	// RVA: 0x219E1B8 Offset: 0x219E1B8 VA: 0x219E1B8
	public static uint Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x219E4F0 Offset: 0x219E4F0 VA: 0x219E4F0
	public static uint Add(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x219E940 Offset: 0x219E940 VA: 0x219E940
	public static uint AddBothTo(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x219ED70 Offset: 0x219ED70 VA: 0x219ED70
	public static uint AddBothTo(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x219F2E0 Offset: 0x219F2E0 VA: 0x219F2E0
	public static uint AddTo(uint[] x, uint[] z) { }

	// RVA: 0x219F600 Offset: 0x219F600 VA: 0x219F600
	public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn) { }

	// RVA: 0x219F9F0 Offset: 0x219F9F0 VA: 0x219F9F0
	public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff) { }

	// RVA: 0x219FEBC Offset: 0x219FEBC VA: 0x219FEBC
	public static void Copy(uint[] x, uint[] z) { }

	// RVA: 0x21A00B0 Offset: 0x21A00B0 VA: 0x21A00B0
	public static uint[] Create() { }

	// RVA: 0x21A00FC Offset: 0x21A00FC VA: 0x21A00FC
	public static uint[] CreateExt() { }

	// RVA: 0x21A0148 Offset: 0x21A0148 VA: 0x21A0148
