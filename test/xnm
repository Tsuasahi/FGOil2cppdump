	private static Func<BgmPlayArgs, BgmPlayArgs> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC5498C Offset: 0xC5498C VA: 0xC5498C
	private static Predicate<BgmPlayArgs> <>f__am$cache2; // 0x10

	// Properties
	public List<BgmPlayArgs> AllArgsList { get; set; }
	public MainBgmPlayArgs MainArgs { get; set; }
	public List<SubBgmPlayArgs> SubArgsList { get; set; }

	// Methods

	// RVA: 0x19A6D38 Offset: 0x19A6D38 VA: 0x19A6D38
	public void .ctor(MainBgmPlayArgs mainBgmParam, BgmPlayArgs[] otherBgmParams) { }

	// RVA: 0x19AAAB4 Offset: 0x19AAAB4 VA: 0x19AAAB4
	public void .ctor(BgmPlayArgs[] bgmParams) { }

	// RVA: 0x19A6B74 Offset: 0x19A6B74 VA: 0x19A6B74
	public void .ctor(string toAnalyze, Nullable<float> volumeNullable, float fadeTime = 0, long startTime = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC94A4 Offset: 0xCC94A4 VA: 0xCC94A4
	// RVA: 0x19AA970 Offset: 0x19AA970 VA: 0x19AA970
	public List<BgmPlayArgs> get_AllArgsList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC94B4 Offset: 0xCC94B4 VA: 0xCC94B4
	// RVA: 0x19AA968 Offset: 0x19AA968 VA: 0x19AA968
	protected void set_AllArgsList(List<BgmPlayArgs> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC94C4 Offset: 0xCC94C4 VA: 0xCC94C4
	// RVA: 0x19AAB60 Offset: 0x19AAB60 VA: 0x19AAB60
	public MainBgmPlayArgs get_MainArgs() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC94D4 Offset: 0xCC94D4 VA: 0xCC94D4
	// RVA: 0x19AAB68 Offset: 0x19AAB68 VA: 0x19AAB68
	protected void set_MainArgs(MainBgmPlayArgs value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC94E4 Offset: 0xCC94E4 VA: 0xCC94E4
	// RVA: 0x19A8AB4 Offset: 0x19A8AB4 VA: 0x19A8AB4
	public List<SubBgmPlayArgs> get_SubArgsList() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC94F4 Offset: 0xCC94F4 VA: 0xCC94F4
	// RVA: 0x19AAB70 Offset: 0x19AAB70 VA: 0x19AAB70
	protected void set_SubArgsList(List<SubBgmPlayArgs> value) { }

	// RVA: 0x19A8184 Offset: 0x19A8184 VA: 0x19A8184
	public IEnumerable<BgmPlayArgs> AllArgsListNullExcluded() { }

	// RVA: 0x19AAB78 Offset: 0x19AAB78 VA: 0x19AAB78
	public BgmPlayArgsGroup NullExcludedClone() { }

	// RVA: 0x19AA978 Offset: 0x19AA978 VA: 0x19AA978
	private void Initialize() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9504 Offset: 0xCC9504 VA: 0xCC9504
	// RVA: 0x19AAC70 Offset: 0x19AAC70 VA: 0x19AAC70
	private static bool <AllArgsListNullExcluded>m__0(BgmPlayArgs x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9514 Offset: 0xCC9514 VA: 0xCC9514
	// RVA: 0x19AAC7C Offset: 0x19AAC7C VA: 0x19AAC7C
	private static BgmPlayArgs <NullExcludedClone>m__1(BgmPlayArgs x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9524 Offset: 0xCC9524 VA: 0xCC9524
	// RVA: 0x19AACAC Offset: 0x19AACAC VA: 0x19AACAC
	private static bool <Initialize>m__2(BgmPlayArgs x) { }
}

// Namespace: 
public static class Analyzer_FileNameToBgmPlayArgsGroup // TypeDefIndex: 6471
{
	// Fields
	private const char Separator = '\x2c';

	// Methods

	// RVA: 0x107578C Offset: 0x107578C VA: 0x107578C
	public static List<BgmPlayArgs> Analyze(string toAnalyze, Nullable<float> volumeNullable, float fadeTime = 0, long startTime = 0) { }
}

// Namespace: 
public abstract class GeneralBgmPlayer : BgmPlayerBase // TypeDefIndex: 6472
{
	// Methods

	// RVA: 0x1BA42CC Offset: 0x1BA42CC VA: 0x1BA42CC
	protected void .ctor() { }
}

// Namespace: 
public class SubBgmPlayer : GeneralBgmPlayer // TypeDefIndex: 6473
{
	// Methods

	// RVA: 0x17A7D70 Offset: 0x17A7D70 VA: 0x17A7D70
	public void .ctor() { }

	// RVA: 0x17A7D78 Offset: 0x17A7D78 VA: 0x17A7D78 Slot: 12
	public override BgmPlayArgs ExportPlayArgs() { }
}

// Namespace: 
public class MainBgmPlayer : GeneralBgmPlayer // TypeDefIndex: 6474
{
	// Methods

	// RVA: 0x2B9FEF8 Offset: 0x2B9FEF8 VA: 0x2B9FEF8
	public void .ctor() { }

	// RVA: 0x2B9FF00 Offset: 0x2B9FF00 VA: 0x2B9FF00 Slot: 12
	public override BgmPlayArgs ExportPlayArgs() { }
}

// Namespace: 
public class JinglePlayer : BgmPlayerBase // TypeDefIndex: 6475
{
	// Fields
	private Action jingleCallbackFunc; // 0x58

	// Methods

	// RVA: 0x11C3634 Offset: 0x11C3634 VA: 0x11C3634
	public void .ctor() { }

	// RVA: 0x11C363C Offset: 0x11C363C VA: 0x11C363C Slot: 12
	public override BgmPlayArgs ExportPlayArgs() { }

	// RVA: 0x11C3644 Offset: 0x11C3644 VA: 0x11C3644
	public void PlayBgm(string name, float volume, Action callbackFunc) { }

	// RVA: 0x11C371C Offset: 0x11C371C VA: 0x11C371C Slot: 6
	public override void Reset() { }

	// RVA: 0x11C3758 Offset: 0x11C3758 VA: 0x11C3758 Slot: 7
	public override void SetMute(bool isMute) { }

	// RVA: 0x11C3840 Offset: 0x11C3840 VA: 0x11C3840 Slot: 11
	public override bool StopBgm(bool keepPlayArgs = False) { }

	// RVA: 0x11C3884 Offset: 0x11C3884 VA: 0x11C3884 Slot: 10
	public override bool FadeoutBgm(float fadeoutTime) { }

	// RVA: 0x11C3708 Offset: 0x11C3708 VA: 0x11C3708
	private void ExecuteCallback() { }

	// RVA: 0x11C38C4 Offset: 0x11C38C4 VA: 0x11C38C4 Slot: 13
	public override void LateUpdate() { }
}

// Namespace: 
public abstract class BgmPlayerBase // TypeDefIndex: 6476
{
	// Fields
	protected string bgmName; // 0x10
	protected float bgmVolume; // 0x18
	protected float bgmFadeTime; // 0x1C
	protected float playVolume; // 0x20
	protected float playTime; // 0x24
	protected float fadeinTime; // 0x28
	protected float fadeoutTime; // 0x2C
	protected long startTime; // 0x30
	protected CriAtomSource bgmPlayer; // 0x38
	protected CriAtomSource bgmFadePlayer; // 0x40
	protected float fadeBaseVolume; // 0x48
	protected float fadeChangeVolume; // 0x4C
	protected string preloadName; // 0x50

	// Properties
	public virtual string CueSheetName { get; }
	public string BgmName { get; }
	public float BgmVolume { get; set; }
	public int PlayTime { get; set; }

	// Methods

	// RVA: 0x19AAD2C Offset: 0x19AAD2C VA: 0x19AAD2C
	protected void .ctor() { }

	// RVA: 0x19AAD3C Offset: 0x19AAD3C VA: 0x19AAD3C Slot: 4
	public virtual string get_CueSheetName() { }

	// RVA: 0x19A5D8C Offset: 0x19A5D8C VA: 0x19A5D8C
	public string get_BgmName() { }

	// RVA: 0x19AAD84 Offset: 0x19AAD84 VA: 0x19AAD84
	public float get_BgmVolume() { }

	// RVA: 0x19A6928 Offset: 0x19A6928 VA: 0x19A6928
	public void set_BgmVolume(float value) { }

	// RVA: 0x19AAE1C Offset: 0x19AAE1C VA: 0x19AAE1C
	public int get_PlayTime() { }

	// RVA: 0x19AAEB8 Offset: 0x19AAEB8 VA: 0x19AAEB8
	public void set_PlayTime(int value) { }

	// RVA: 0x19AAD8C Offset: 0x19AAD8C VA: 0x19AAD8C
	public void UpdateVolume() { }

	// RVA: 0x19AAF68 Offset: 0x19AAF68 VA: 0x19AAF68
	public void PauseBgm(bool isPause) { }

	// RVA: 0x19AB054 Offset: 0x19AB054 VA: 0x19AB054 Slot: 5
	public virtual void Initialize() { }

	// RVA: 0x19AB23C Offset: 0x19AB23C VA: 0x19AB23C Slot: 6
	public virtual void Reset() { }

	// RVA: 0x19AB2CC Offset: 0x19AB2CC VA: 0x19AB2CC Slot: 7
	public virtual void SetMute(bool isMute) { }

	// RVA: 0x19AB340 Offset: 0x19AB340 VA: 0x19AB340 Slot: 8
	public virtual void ReflectMasterVolume() { }

	// RVA: 0x19AB400 Offset: 0x19AB400 VA: 0x19AB400
	public bool ChangeVolume(float volume, float fadeTime) { }

	// RVA: 0x19AB57C Offset: 0x19AB57C VA: 0x19AB57C
	protected bool PlayLocal(string name, float volume, float fadeTime) { }

	// RVA: 0x19A9224 Offset: 0x19A9224 VA: 0x19A9224
	public string[] GetUsingCueNames() { }

	// RVA: 0x19AB734 Offset: 0x19AB734 VA: 0x19AB734
	protected void playStart(CriAtomSource player, string cueSheet, string cueName, float volume, float fadeTime) { }

	// RVA: 0x19A97E8 Offset: 0x19A97E8 VA: 0x19A97E8
	public bool IsPlaying() { }

	// RVA: 0x19AB04C Offset: 0x19AB04C VA: 0x19AB04C
	protected bool IsBgmPlaying() { }

	// RVA: 0x19AB560 Offset: 0x19AB560 VA: 0x19AB560
	protected bool IsCrossFadePlaying() { }

	// RVA: 0x19AB8E0 Offset: 0x19AB8E0 VA: 0x19AB8E0
	protected bool CheckPlaying(CriAtomSource player) { }

	// RVA: 0x19AB93C Offset: 0x19AB93C VA: 0x19AB93C
	protected void FadeoutLocal(float fadeoutTime) { }

	// RVA: 0x19AB268 Offset: 0x19AB268 VA: 0x19AB268
	protected void StopLocal() { }

	// RVA: 0x19AB9E8 Offset: 0x19AB9E8 VA: 0x19AB9E8 Slot: 9
	public virtual void PlayBgm(string name, float volume, float fadeTime, long startTime = 0) { }

	// RVA: 0x19ABAF8 Offset: 0x19ABAF8 VA: 0x19ABAF8 Slot: 10
	public virtual bool FadeoutBgm(float fadeoutTime) { }

	// RVA: 0x19ABB94 Offset: 0x19ABB94 VA: 0x19ABB94 Slot: 11
	public virtual bool StopBgm(bool keepPlayArgs = False) { }

	// RVA: -1 Offset: -1 Slot: 12
	public abstract BgmPlayArgs ExportPlayArgs();

	// RVA: 0x19ABBE0 Offset: 0x19ABBE0 VA: 0x19ABBE0 Slot: 13
	public virtual void LateUpdate() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42944 Offset: 0xC42944 VA: 0xC42944
private sealed class BgmPlayerBase.<PlayLocal>c__AnonStorey0 // TypeDefIndex: 6477
{
	// Fields
	internal string name; // 0x10
	internal CriAtomSource player; // 0x18
	internal float volume; // 0x20
	internal float fadeTime; // 0x24
	internal BgmPlayerBase $this; // 0x28

	// Methods

	// RVA: 0x19AB72C Offset: 0x19AB72C VA: 0x19AB72C
	public void .ctor() { }

	// RVA: 0x19ABFE8 Offset: 0x19ABFE8 VA: 0x19ABFE8
	internal void <>m__0() { }
}

// Namespace: 
public class CatAndMouseGame // TypeDefIndex: 6478
{
	// Fields
	protected const int WRITE_BUFFER_SIZE = 16384;
	protected const int KEY_LENGTH = 32;
	private const string AKEY = "b5nHjsMrqaeNliSs3jyOzgpD";
	private const string AVEC = "wuD6keVr";
	private const string MKEY = "pX6q6xK2UymhFKcaGHHUlfXqfTsWF0uH";
	private const string IKEY = "W0Juh4cFJSYPkebJB9WpswNF51oa6Gm7";
	private const string SKEY = "stqtisXsGYqRVcqrHRydj3k6vJCySu3g";
	private const string SVEC = "kzdMtpmzqCHAfx00saU1gIhTjYCuOD1J";
	private const string BKEY = "6SAL3A8tFLUfGvtz3F3FFeKELIk3Nvi4";
	private const string BVEC = "PFBs0eIuunoxKkCcLbqDVerU1rShhS27";
	private const string BSKEY = "sseSWBYuU6L6Bu6bAxGTvdr7bVicWvMbLu5dMktK62c7FXTL4qvgsM6HUKf8P75S";
	protected static byte[] ownerTop; // 0x0
	protected static byte[] ownerData; // 0x8
	protected static byte[] InfoTop; // 0x10
	protected static byte[] infoData; // 0x18
	protected static byte[] stageTop; // 0x20
	protected static byte[] stageData; // 0x28
	protected static byte[] baseTop; // 0x30
	protected static byte[] baseData; // 0x38
	private static byte[] BattleKey; // 0x40
	private static byte[] BattleIV; // 0x48
	protected static byte[] sideTop; // 0x50
	protected static byte[] sideData; // 0x58
	private static Dictionary<string, string> assetbundleKeyCollection; // 0x60
	private static Dictionary<string, byte[][]> keyCollection; // 0x68
	private const int BlockSize = 256;
	private const int KeySize = 256;

	// Methods

	// RVA: 0x1A36F70 Offset: 0x1A36F70 VA: 0x1A36F70
	private static void .cctor() { }

	// RVA: 0x1A375EC Offset: 0x1A375EC VA: 0x1A375EC
	public void .ctor() { }

	// RVA: 0x1A375F4 Offset: 0x1A375F4 VA: 0x1A375F4
	public static string CatGame1(string str, bool isCompress = False) { }

	// RVA: 0x1A37BD8 Offset: 0x1A37BD8 VA: 0x1A37BD8
	public static string MouseGame1(string str, bool isCompress = False) { }

	// RVA: 0x1A38490 Offset: 0x1A38490 VA: 0x1A38490
	public static string CatGame2(string str, bool isCompress = False) { }

	// RVA: 0x1A38630 Offset: 0x1A38630 VA: 0x1A38630
	public static string MouseGame2(byte[] data, bool isCompress = False) { }

	// RVA: 0x1A38898 Offset: 0x1A38898 VA: 0x1A38898
	public static object MouseGame2MsgPack(byte[] data, bool isCompress = False) { }

	// RVA: 0x1A38AAC Offset: 0x1A38AAC VA: 0x1A38AAC
	public static object MouseGame2Unpacker(byte[] data, bool isCompress = False) { }

	// RVA: 0x1A38CC4 Offset: 0x1A38CC4 VA: 0x1A38CC4
	public static byte[] MouseGame2Bytes(byte[] data, bool isCompress = False) { }

	// RVA: 0x1A3925C Offset: 0x1A3925C VA: 0x1A3925C
	public static Stream CatGameZ(Stream stream) { }

	// RVA: 0x1A39488 Offset: 0x1A39488 VA: 0x1A39488
	public static Stream MouseGameZ(Stream stream) { }

	// RVA: 0x1A396B4 Offset: 0x1A396B4 VA: 0x1A396B4
	public static string CatGame3(string str) { }

	// RVA: 0x1A397E8 Offset: 0x1A397E8 VA: 0x1A397E8
	public static string CatGame3(string str, string key) { }

	// RVA: 0x1A39D44 Offset: 0x1A39D44 VA: 0x1A39D44
	public static string MouseGame3(string str) { }

	// RVA: 0x1A3A2DC Offset: 0x1A3A2DC VA: 0x1A3A2DC
	public static byte[] CatGame4(byte[] data) { }

	// RVA: 0x1A3A82C Offset: 0x1A3A82C VA: 0x1A3A82C
	public static byte[] CatGame4(byte[] data, string key) { }

	// RVA: 0x1A3A928 Offset: 0x1A3A928 VA: 0x1A3A928
	public static byte[] MouseGame4(byte[] data) { }

	// RVA: 0x1A3AA94 Offset: 0x1A3AA94 VA: 0x1A3AA94
	public static CryptoStream MouseGame4Stream(Stream outputStream) { }

	// RVA: 0x1A3AC88 Offset: 0x1A3AC88 VA: 0x1A3AC88
	public static string CatGame5(string str) { }

	// RVA: 0x1A3AF70 Offset: 0x1A3AF70 VA: 0x1A3AF70
	public static string MouseGame5(string str) { }

	// RVA: 0x1A3B23C Offset: 0x1A3B23C VA: 0x1A3B23C
	public static byte[] CatGame7(byte[] data) { }

	// RVA: 0x1A3B354 Offset: 0x1A3B354 VA: 0x1A3B354
	public static byte[] MouseGame7(byte[] data) { }

	// RVA: 0x1A3B448 Offset: 0x1A3B448 VA: 0x1A3B448
	public static string CatGame8(string str) { }

	// RVA: 0x1A3B650 Offset: 0x1A3B650 VA: 0x1A3B650
	public static string MouseGame8(string str) { }

	// RVA: 0x1A3BD30 Offset: 0x1A3BD30 VA: 0x1A3BD30
	public static string MouseInfo(byte[] data) { }

	// RVA: 0x1A3BE7C Offset: 0x1A3BE7C VA: 0x1A3BE7C
	public static object MouseInfoMsgPack(byte[] data) { }

	// RVA: 0x1A3BFC8 Offset: 0x1A3BFC8 VA: 0x1A3BFC8
	public static void ThirdHomeBuilding(string data) { }

	// RVA: 0x1A3C208 Offset: 0x1A3C208 VA: 0x1A3C208
	public static void ForthHomeBuilding(string data) { }

	// RVA: 0x1A3C6A0 Offset: 0x1A3C6A0 VA: 0x1A3C6A0
	public static string MouseGame3(string str, string key) { }

	// RVA: 0x1A3C798 Offset: 0x1A3C798 VA: 0x1A3C798
	public static string MouseGame3(string str, byte[] home, byte[] info) { }

	// RVA: 0x1A3C8EC Offset: 0x1A3C8EC VA: 0x1A3C8EC
	public static byte[] MouseGame4(byte[] data, string key) { }

	// RVA: 0x1A3CA64 Offset: 0x1A3CA64 VA: 0x1A3CA64
	public static CryptoStream MouseGame4Stream(Stream outputStream, string key) { }

	// RVA: 0x1A3C9E4 Offset: 0x1A3C9E4 VA: 0x1A3C9E4
	public static byte[] MouseGame4(byte[] data, byte[] home, byte[] info) { }

	// RVA: 0x1A3CB60 Offset: 0x1A3CB60 VA: 0x1A3CB60
	public static void SetAssetbundleKeys(object obj) { }

	// RVA: 0x1A3CCF8 Offset: 0x1A3CCF8 VA: 0x1A3CCF8
	public static string GetAssetbundleKey(string keyType) { }

	// RVA: 0x1A3993C Offset: 0x1A3993C VA: 0x1A3993C
	public static void OtherHomeBuilding(string data, out byte[] home, out byte[] info) { }

	// RVA: 0x1A3CDA4 Offset: 0x1A3CDA4 VA: 0x1A3CDA4
	public static string CatGame6(string str) { }

	// RVA: 0x1A3CE68 Offset: 0x1A3CE68 VA: 0x1A3CE68
	public static string CatGame6(byte[] data) { }

	// RVA: 0x1A3CEDC Offset: 0x1A3CEDC VA: 0x1A3CEDC
	public static string MouseGame6(string str) { }

	// RVA: 0x1A3CF84 Offset: 0x1A3CF84 VA: 0x1A3CF84
	public static byte[] MouseGame6ForMsgPack(string str) { }

	// RVA: 0x1A3D02C Offset: 0x1A3D02C VA: 0x1A3D02C
	public static void SixHomeBuilding(string data) { }

	// RVA: 0x1A3855C Offset: 0x1A3855C VA: 0x1A3855C
	public static string CatHome(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A3B57C Offset: 0x1A3B57C VA: 0x1A3B57C
	public static string CatHomeZ2(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A392D0 Offset: 0x1A392D0 VA: 0x1A392D0
	public static Stream CatHomeMainZ(Stream stream, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A3D170 Offset: 0x1A3D170 VA: 0x1A3D170
	public static byte[] CatHomeMainZ2(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A3A450 Offset: 0x1A3A450 VA: 0x1A3A450
	public static byte[] CatHomeMain(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A3877C Offset: 0x1A3877C VA: 0x1A3877C
	public static string MouseHome(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A389E4 Offset: 0x1A389E4 VA: 0x1A389E4
	public static object MouseHomeMsgPack(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A38BF8 Offset: 0x1A38BF8 VA: 0x1A38BF8
	public static object MouseHomeMaster(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A394FC Offset: 0x1A394FC VA: 0x1A394FC
	public static Stream MouseHomeMainZ(Stream stream, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A3B840 Offset: 0x1A3B840 VA: 0x1A3B840
	public static byte[] MouseHomeMainZ2(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A39EFC Offset: 0x1A39EFC VA: 0x1A39EFC
	public static byte[] MouseHomeMain(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A3AB08 Offset: 0x1A3AB08 VA: 0x1A3AB08
	public static CryptoStream MouseHomeMainStream(Stream outputStream, byte[] home, byte[] info, bool isCompress = False) { }

	// RVA: 0x1A38E10 Offset: 0x1A38E10 VA: 0x1A38E10
	public static byte[] MouseHomeSub(byte[] data, byte[] home, byte[] info, bool isCompress = False) { }
}

// Namespace: 
public class CatAndMouseGame.AssetbundleKeyEntity // TypeDefIndex: 6479
{
	// Fields
	public string id; // 0x10
	public string decryptKey; // 0x18

	// Methods

	// RVA: 0x1A3D9FC Offset: 0x1A3D9FC VA: 0x1A3D9FC
	public void .ctor() { }
}

// Namespace: 
private class CatAndMouseGame.DataDecryptor : IDisposable // TypeDefIndex: 6480
{
	// Fields
	private readonly byte[] data; // 0x10
	private readonly bool isCompress; // 0x18
	private MemoryStream memoryStream; // 0x20
	private CryptoStream cryptoStream; // 0x28
	private MemoryStream memoryStreamBZip; // 0x30
	private BZip2InputStream bzipStream; // 0x38
	private bool isDisposed; // 0x40

	// Methods

	// RVA: 0x1A3D53C Offset: 0x1A3D53C VA: 0x1A3D53C
	public void .ctor(ICryptoTransform decryptor, byte[] data, bool isCompress) { }

	// RVA: 0x1A3D60C Offset: 0x1A3D60C VA: 0x1A3D60C
	public void ApplyWrite() { }

	// RVA: 0x1A3D834 Offset: 0x1A3D834 VA: 0x1A3D834
	public byte[] ToByteArray() { }

	// RVA: 0x1A3DA04 Offset: 0x1A3DA04 VA: 0x1A3DA04 Slot: 4
	public void Dispose() { }

	// RVA: 0x1A3DA38 Offset: 0x1A3DA38 VA: 0x1A3DA38 Slot: 5
	protected virtual void Dispose(bool isDisposing) { }
}

// Namespace: DelightWorks.Network
public abstract class AlwaysValidVerifyer : ICertificateVerifyer // TypeDefIndex: 6481
{
	// Methods

	// RVA: 0x10CAB78 Offset: 0x10CAB78 VA: 0x10CAB78
	protected void .ctor() { }

	// RVA: 0x10CAB80 Offset: 0x10CAB80 VA: 0x10CAB80 Slot: 5
	public virtual bool IsValid(Uri serverUri, X509CertificateStructure[] certs) { }
}

// Namespace: DelightWorks.Network
public abstract class AndroidCertVerifyer : ICertificateVerifyer // TypeDefIndex: 6482
{
	// Fields
	private static AndroidJavaObject certFactory; // 0x0
	private static AndroidJavaObject trustManager; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC5499C Offset: 0xC5499C VA: 0xC5499C
	private static Converter<AndroidJavaObject, IntPtr> <>f__am$cache0; // 0x10

	// Methods

	// RVA: 0x10CAB88 Offset: 0x10CAB88 VA: 0x10CAB88
	public void .ctor() { }

	// RVA: 0x10CABA0 Offset: 0x10CABA0 VA: 0x10CABA0
	private void MakeTrustManager() { }

	// RVA: 0x10CB14C Offset: 0x10CB14C VA: 0x10CB14C
	private string CheckException() { }

	// RVA: 0x10CB2A0 Offset: 0x10CB2A0 VA: 0x10CB2A0 Slot: 5
	public virtual bool IsValid(Uri serverUri, X509CertificateStructure[] certs) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9534 Offset: 0xCC9534 VA: 0xCC9534
	// RVA: 0x10CBA98 Offset: 0x10CBA98 VA: 0x10CBA98
	private static IntPtr <IsValid>m__0(AndroidJavaObject cert) { }
}

// Namespace: DelightWorks.Network
public sealed class BestWWWCertVerifyer : AndroidCertVerifyer // TypeDefIndex: 6483
{
	// Fields
	private string host; // 0x10
	private HashSet<string> redirectHosts; // 0x18
	private string[] signatures; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC549AC Offset: 0xC549AC VA: 0xC549AC
	[DebuggerBrowsableAttribute] // RVA: 0xC549AC Offset: 0xC549AC VA: 0xC549AC
	private bool <IsCertEnabled>k__BackingField; // 0x28
	public static int API_VERSION_CONSIDER_AS_OLD_ANDROID; // 0x0
	private static int CachedAndroidApiLevel; // 0x4

	// Properties
	public bool IsCertEnabled { get; set; }

	// Methods

	// RVA: 0x10CCA50 Offset: 0x10CCA50 VA: 0x10CCA50
	public void .ctor(string host, string[] signatures) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9544 Offset: 0xCC9544 VA: 0xCC9544
	// RVA: 0x10CCAF0 Offset: 0x10CCAF0 VA: 0x10CCAF0
	public bool get_IsCertEnabled() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9554 Offset: 0xCC9554 VA: 0xCC9554
	// RVA: 0x10CCAE4 Offset: 0x10CCAE4 VA: 0x10CCAE4
	private void set_IsCertEnabled(bool value) { }

	// RVA: 0x10CCAF8 Offset: 0x10CCAF8 VA: 0x10CCAF8
	public bool BeforeRedirectionDelegate(HTTPRequest originalRequest, HTTPResponse response, Uri redirectUri) { }

	// RVA: 0x10CCB50 Offset: 0x10CCB50 VA: 0x10CCB50
	public void AddRedirectHost(Uri originalUri, Uri redirectUri) { }

	// RVA: 0x10CCC30 Offset: 0x10CCC30 VA: 0x10CCC30 Slot: 5
	public override bool IsValid(Uri serverUri, X509CertificateStructure[] certs) { }

	// RVA: 0x10CCF0C Offset: 0x10CCF0C VA: 0x10CCF0C
	public static bool CheckGreaterAndroidOSVersion(int version) { }

	// RVA: 0x10CD010 Offset: 0x10CD010 VA: 0x10CD010
	public static bool IsOldAndroid() { }

	// RVA: 0x10CD084 Offset: 0x10CD084 VA: 0x10CD084
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42954 Offset: 0xC42954 VA: 0xC42954
private sealed class BestWWWCertVerifyer.<IsValid>c__AnonStorey0 // TypeDefIndex: 6484
{
	// Fields
	internal Uri serverUri; // 0x10

	// Methods

	// RVA: 0x10CCEFC Offset: 0x10CCEFC VA: 0x10CCEFC
	public void .ctor() { }

	// RVA: 0x10CD0D8 Offset: 0x10CD0D8 VA: 0x10CD0D8
	internal bool <>m__0(string x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42964 Offset: 0xC42964 VA: 0xC42964
private sealed class BestWWWCertVerifyer.<IsValid>c__AnonStorey1 // TypeDefIndex: 6485
{
	// Fields
	internal byte[] signature; // 0x10

	// Methods

	// RVA: 0x10CCF04 Offset: 0x10CCF04 VA: 0x10CCF04
	public void .ctor() { }

	// RVA: 0x10CD12C Offset: 0x10CD12C VA: 0x10CD12C
	internal bool <>m__0(string sig) { }
}

// Namespace: DelightWorks.Network
public abstract class CertChainVerifyer : ICertificateVerifyer // TypeDefIndex: 6486
{
	// Methods

	// RVA: 0x10CD1BC Offset: 0x10CD1BC VA: 0x10CD1BC
	protected void .ctor() { }

	// RVA: 0x10CD1C4 Offset: 0x10CD1C4 VA: 0x10CD1C4
	private void DispErrorLog(X509CertificateStructure[] certs) { }

	// RVA: 0x10CD4AC Offset: 0x10CD4AC VA: 0x10CD4AC Slot: 5
	public virtual bool IsValid(Uri serverUri, X509CertificateStructure[] certs) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42974 Offset: 0xC42974 VA: 0xC42974
private sealed class CertChainVerifyer.<IsValid>c__AnonStorey0 // TypeDefIndex: 6487
{
	// Fields
	internal string issuer; // 0x10

	// Methods

	// RVA: 0x10CD8C0 Offset: 0x10CD8C0 VA: 0x10CD8C0
	public void .ctor() { }

	// RVA: 0x10CD8C8 Offset: 0x10CD8C8 VA: 0x10CD8C8
	internal bool <>m__0(string x) { }

	// RVA: 0x10CD944 Offset: 0x10CD944 VA: 0x10CD944
	internal bool <>m__1(string x) { }
}

// Namespace: 
public static class Crc32 // TypeDefIndex: 6488
{
	// Fields
	public static int CRC_UNIT; // 0x0
	private const uint CrcSeed = 4294967295;
	private static readonly uint[] CrcTable; // 0x8

	// Methods

	// RVA: 0x1468880 Offset: 0x1468880 VA: 0x1468880
	public static uint Compute(byte[] buffer) { }

	// RVA: 0x14689A0 Offset: 0x14689A0 VA: 0x14689A0
	public static uint Compute(byte[] buffer, int length) { }

	// RVA: 0x1468ACC Offset: 0x1468ACC VA: 0x1468ACC
	public static uint Compute(byte[] buffer, int length, uint crc) { }

	// RVA: 0x1468BF4 Offset: 0x1468BF4 VA: 0x1468BF4
	private static void .cctor() { }
}

// Namespace: 
public static class Debug // TypeDefIndex: 6489
{
	// Fields
	private static bool isDebugBuild; // 0x0

	// Methods

	// RVA: 0x11F0564 Offset: 0x11F0564 VA: 0x11F0564
	private static void .cctor() { }

	// RVA: 0x11F05E0 Offset: 0x11F05E0 VA: 0x11F05E0
	public static void Break() { }

	[ConditionalAttribute] // RVA: 0xCC9564 Offset: 0xCC9564 VA: 0xCC9564
	// RVA: 0x11F06DC Offset: 0x11F06DC VA: 0x11F06DC
	public static void Log(object message) { }

	[ConditionalAttribute] // RVA: 0xCC959C Offset: 0xCC959C VA: 0xCC959C
	// RVA: 0x11F0778 Offset: 0x11F0778 VA: 0x11F0778
	public static void Log(object message, Object context) { }

	[ConditionalAttribute] // RVA: 0xCC95D4 Offset: 0xCC95D4 VA: 0xCC95D4
	// RVA: 0x11F0828 Offset: 0x11F0828 VA: 0x11F0828
	public static void LogError(object message) { }

	[ConditionalAttribute] // RVA: 0xCC960C Offset: 0xCC960C VA: 0xCC960C
	// RVA: 0x11F08C4 Offset: 0x11F08C4 VA: 0x11F08C4
	public static void LogError(object message, Object context) { }

	[ConditionalAttribute] // RVA: 0xCC9644 Offset: 0xCC9644 VA: 0xCC9644
	// RVA: 0x11F0974 Offset: 0x11F0974 VA: 0x11F0974
	public static void LogWarning(object message) { }

	[ConditionalAttribute] // RVA: 0xCC967C Offset: 0xCC967C VA: 0xCC967C
	// RVA: 0x11F0A10 Offset: 0x11F0A10 VA: 0x11F0A10
	public static void LogWarning(object message, Object context) { }

	[ConditionalAttribute] // RVA: 0xCC96B4 Offset: 0xCC96B4 VA: 0xCC96B4
	// RVA: 0x11F0AC0 Offset: 0x11F0AC0 VA: 0x11F0AC0
	public static void LogWarningFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xCC96EC Offset: 0xCC96EC VA: 0xCC96EC
	// RVA: 0x11F0B70 Offset: 0x11F0B70 VA: 0x11F0B70
	public static void LogFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xCC9724 Offset: 0xCC9724 VA: 0xCC9724
	// RVA: 0x11F0C20 Offset: 0x11F0C20 VA: 0x11F0C20
	public static void LogErrorFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xCC975C Offset: 0xCC975C VA: 0xCC975C
	// RVA: 0x11F0CD0 Offset: 0x11F0CD0 VA: 0x11F0CD0
	public static void LogAssertionFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xCC9794 Offset: 0xCC9794 VA: 0xCC9794
	// RVA: 0x11F0D2C Offset: 0x11F0D2C VA: 0x11F0D2C
	public static void LogException(Exception exception) { }

	[ConditionalAttribute] // RVA: 0xCC97CC Offset: 0xCC97CC VA: 0xCC97CC
	// RVA: 0x11F0DC8 Offset: 0x11F0DC8 VA: 0x11F0DC8
	public static void LogException(Exception exception, Object context) { }

	[ConditionalAttribute] // RVA: 0xCC9804 Offset: 0xCC9804 VA: 0xCC9804
	// RVA: 0x11F0E78 Offset: 0x11F0E78 VA: 0x11F0E78
	public static void DrawLine(Vector3 vec1, Vector3 vec2, Color col) { }

	[ConditionalAttribute] // RVA: 0xCC983C Offset: 0xCC983C VA: 0xCC983C
	// RVA: 0x11F0F74 Offset: 0x11F0F74 VA: 0x11F0F74
	public static void DrawRay(Vector3 vec1, Vector3 vec2, Color col) { }

	[ConditionalAttribute] // RVA: 0xCC9874 Offset: 0xCC9874 VA: 0xCC9874
	// RVA: 0x11F1070 Offset: 0x11F1070 VA: 0x11F1070
	public static void Assert(bool condition, string message, string detailMessage) { }

	[ConditionalAttribute] // RVA: 0xCC98AC Offset: 0xCC98AC VA: 0xCC98AC
	// RVA: 0x11F10CC Offset: 0x11F10CC VA: 0x11F10CC
	public static void Assert(bool condition, string message) { }

	[ConditionalAttribute] // RVA: 0xCC98E4 Offset: 0xCC98E4 VA: 0xCC98E4
	// RVA: 0x11F1128 Offset: 0x11F1128 VA: 0x11F1128
	public static void Assert(bool condition) { }

	// RVA: 0x11F0674 Offset: 0x11F0674 VA: 0x11F0674
	private static bool IsEnable() { }
}

// Namespace: 
public class DesignCardManager : SingletonMonoBehaviour<DesignCardManager> // TypeDefIndex: 6490
{
	// Fields
	private readonly int[] cardTextureSize; // 0x18
	private readonly int SVT_EQ_IMAGE_ID; // 0x20

	// Methods

	// RVA: 0x10CD9C0 Offset: 0x10CD9C0 VA: 0x10CD9C0
	public void .ctor() { }

	// RVA: 0x10CDA80 Offset: 0x10CDA80 VA: 0x10CDA80
	public void LoadDesignCardTexture(int imageId, Rarity.TYPE rarity, Action<Texture2D> callback) { }

	// RVA: 0x10CDC84 Offset: 0x10CDC84 VA: 0x10CDC84
	public void ReleaseDesignTexture(int imageId, Rarity.TYPE rarity) { }

	// RVA: 0x10CDD14 Offset: 0x10CDD14 VA: 0x10CDD14
	public void SetupDesignCard(int imageId, Rarity.TYPE rarity, UITexture target, Action callback) { }

	// RVA: 0x10CDE44 Offset: 0x10CDE44 VA: 0x10CDE44
	public void ReleaseDesignCard(int imageId, Rarity.TYPE rarity) { }

	// RVA: 0x10CDB84 Offset: 0x10CDB84 VA: 0x10CDB84
	public string GetDesignCardPath(int imageId, Rarity.TYPE rarity) { }

	// RVA: 0x10CDE64 Offset: 0x10CDE64 VA: 0x10CDE64
	public string GetCommanCodeCardPath(int imageId, Rarity.TYPE rarity) { }

	// RVA: 0x10CDFA0 Offset: 0x10CDFA0 VA: 0x10CDFA0
	public string GetExceedFrameCardPath(int imageId, string prefix) { }

	// RVA: 0x10CDE48 Offset: 0x10CDE48 VA: 0x10CDE48
	protected int GetFileIndex(int imageId) { }

	// RVA: 0x10CE070 Offset: 0x10CE070 VA: 0x10CE070
	public void SetupCardImage(AssetData d, Transform cardNode, int imageId) { }

	// RVA: 0x10CE120 Offset: 0x10CE120 VA: 0x10CE120
	protected void SetupDesignCardTexture(int imageId, UITexture target, Texture2D tex) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42984 Offset: 0xC42984 VA: 0xC42984
private sealed class DesignCardManager.<LoadDesignCardTexture>c__AnonStorey0 // TypeDefIndex: 6491
{
	// Fields
	internal Action<Texture2D> callback; // 0x10

	// Methods

	// RVA: 0x10CDB7C Offset: 0x10CDB7C VA: 0x10CDB7C
	public void .ctor() { }

	// RVA: 0x10CE1FC Offset: 0x10CE1FC VA: 0x10CE1FC
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42994 Offset: 0xC42994 VA: 0xC42994
private sealed class DesignCardManager.<SetupDesignCard>c__AnonStorey1 // TypeDefIndex: 6492
{
	// Fields
	internal int imageId; // 0x10
	internal UITexture target; // 0x18
	internal Action callback; // 0x20
	internal DesignCardManager $this; // 0x28

	// Methods

	// RVA: 0x10CDE3C Offset: 0x10CDE3C VA: 0x10CDE3C
	public void .ctor() { }

	// RVA: 0x10CE294 Offset: 0x10CE294 VA: 0x10CE294
	internal void <>m__0(Texture2D tex) { }
}

// Namespace: 
public class EncryptedPlayerPrefs // TypeDefIndex: 6493
{
	// Fields
	private static string privateKey; // 0x0
	public static string[] keys; // 0x8

	// Methods

	// RVA: 0x16F7320 Offset: 0x16F7320 VA: 0x16F7320
	public void .ctor() { }

	// RVA: 0x16F7328 Offset: 0x16F7328 VA: 0x16F7328
	public static string Md5(string strToEncrypt) { }

	// RVA: 0x16F7538 Offset: 0x16F7538 VA: 0x16F7538
	public static void SaveEncryption(string key, string type, string value) { }

	// RVA: 0x16F79A4 Offset: 0x16F79A4 VA: 0x16F79A4
	public static bool CheckEncryption(string key, string type, string value) { }

	// RVA: 0x16F7E14 Offset: 0x16F7E14 VA: 0x16F7E14
	public static void SetInt(string key, int value) { }

	// RVA: 0x16F7EC0 Offset: 0x16F7EC0 VA: 0x16F7EC0
	public static void SetLong(string key, long value) { }

	// RVA: 0x16F7F74 Offset: 0x16F7F74 VA: 0x16F7F74
	public static void SetFloat(string key, float value) { }

	// RVA: 0x16F8054 Offset: 0x16F8054 VA: 0x16F8054
	public static void SetString(string key, string value) { }

	// RVA: 0x16F80E4 Offset: 0x16F80E4 VA: 0x16F80E4
	public static int GetInt(string key) { }

	// RVA: 0x16F8200 Offset: 0x16F8200 VA: 0x16F8200
	public static long GetLong(string key) { }

	// RVA: 0x16F8350 Offset: 0x16F8350 VA: 0x16F8350
	public static float GetFloat(string key) { }

	// RVA: 0x16F84A8 Offset: 0x16F84A8 VA: 0x16F84A8
	public static string GetString(string key) { }

	// RVA: 0x16F814C Offset: 0x16F814C VA: 0x16F814C
	public static int GetInt(string key, int defaultValue) { }

	// RVA: 0x16F8268 Offset: 0x16F8268 VA: 0x16F8268
	public static long GetLong(string key, long defaultValue) { }

	// RVA: 0x16F83B8 Offset: 0x16F83B8 VA: 0x16F83B8
	public static float GetFloat(string key, float defaultValue) { }

	// RVA: 0x16F8540 Offset: 0x16F8540 VA: 0x16F8540
	public static string GetString(string key, string defaultValue) { }

	// RVA: 0x16F85E0 Offset: 0x16F85E0 VA: 0x16F85E0
	public static bool HasKey(string key) { }

	// RVA: 0x16F85E8 Offset: 0x16F85E8 VA: 0x16F85E8
	public static void DeleteKey(string key) { }

	// RVA: 0x16F8690 Offset: 0x16F8690 VA: 0x16F8690
	private static void .cctor() { }
}

// Namespace: 
public static class FNV1a // TypeDefIndex: 6494
{
	// Fields
	public const uint FnvOffsetBasis32 = 2166136261;
	public const ulong FnvOffsetBasis64 = 14695981039346656037;
	private const uint FnvPrime32 = 16777619;
	private const ulong FnvPrime64 = 1099511628211;

	// Methods

	// RVA: 0x10B6134 Offset: 0x10B6134 VA: 0x10B6134
	public static uint Hash32(byte[] bytes, int offset, int len, uint hash = 2166136261) { }

	// RVA: 0x10B61CC Offset: 0x10B61CC VA: 0x10B61CC
	public static ulong Hash64(byte[] bytes, int offset, int len, ulong hash = 14695981039346656037) { }

	// RVA: 0x10B6264 Offset: 0x10B6264 VA: 0x10B6264
	public static uint Hash32(string str) { }
}

// Namespace: 
public class GeoLocation // TypeDefIndex: 6495
{
	// Fields
	private static readonly int TIME_OUT; // 0x0
	private static readonly int TEST_COUNT; // 0x4
	private static GeoLocation.LocationDelegate callBack; // 0x8
	private static LocationInfo[] infoArray; // 0x10
	private static int dataCnt; // 0x18
	private static MonoBehaviour invoker; // 0x20

	// Methods

	// RVA: 0x1BA42D4 Offset: 0x1BA42D4 VA: 0x1BA42D4
	public void .ctor() { }

	// RVA: 0x1BA42DC Offset: 0x1BA42DC VA: 0x1BA42DC
	public static void GetLocation(GeoLocation.LocationDelegate locDel, MonoBehaviour someMonoForCoroutine) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC991C Offset: 0xCC991C VA: 0xCC991C
	// RVA: 0x1BA4370 Offset: 0x1BA4370 VA: 0x1BA4370
	private static IEnumerator GetLocationCoroutine() { }

	// RVA: 0x1BA436C Offset: 0x1BA436C VA: 0x1BA436C
	private static void CallDelegate(GeoLocation.ResultState resultStat) { }

	// RVA: 0x1BA43D4 Offset: 0x1BA43D4 VA: 0x1BA43D4
	private static LocationInfo GetAppropriateOne() { }

	// RVA: 0x1BA4364 Offset: 0x1BA4364 VA: 0x1BA4364
	public static bool IsLocationEnabledByUser() { }

	// RVA: 0x1BA4764 Offset: 0x1BA4764 VA: 0x1BA4764
	private static void .cctor() { }
}

// Namespace: 
public enum GeoLocation.ResultState // TypeDefIndex: 6496
{
	// Fields
	public int value__; // 0x0
	public const GeoLocation.ResultState NOT_STARTED = 0;
	public const GeoLocation.ResultState GETTING_INFO = 1;
	public const GeoLocation.ResultState DISABLED_BY_USER = 2;
	public const GeoLocation.ResultState TIME_OUT = 3;
	public const GeoLocation.ResultState FAILED = 4;
	public const GeoLocation.ResultState SUCEED = 5;
}

// Namespace: 
public sealed class GeoLocation.LocationDelegate : MulticastDelegate // TypeDefIndex: 6497
{
	// Methods
