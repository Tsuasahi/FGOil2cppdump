
	// RVA: -1 Offset: -1
	public static T[] DeserializeArray<T>(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B200AC Offset: 0x2B200AC VA: 0x2B200AC
	|-JsonManager.DeserializeArray<BattleData.SaveData>
	|-JsonManager.DeserializeArray<BattleResultComponent.resultData>
	|-JsonManager.DeserializeArray<CatAndMouseGame.AssetbundleKeyEntity>
	|-JsonManager.DeserializeArray<ClearRandomMissionInfo>
	|-JsonManager.DeserializeArray<CombineRootComponent.eqCombineResData>
	|-JsonManager.DeserializeArray<CompleteMissionComponent.resData>
	|-JsonManager.DeserializeArray<EventInfoQPPointCounter.NextDisplayData>
	|-JsonManager.DeserializeArray<EventMissionItemListViewManager.resData>
	|-JsonManager.DeserializeArray<EventRewardRootComponent.resData>
	|-JsonManager.DeserializeArray<EventRewardRootComponent.resLotteryShopData>
	|-JsonManager.DeserializeArray<EventScanPanelMapRequest.ResultData>
	|-JsonManager.DeserializeArray<EventTreasureBoxPanelComponent.resData>
	|-JsonManager.DeserializeArray<MasterMissionComponent.resData>
	|-JsonManager.DeserializeArray<MissionNotifyDispInfo>
	|-JsonManager.DeserializeArray<PurchaseByBank_Legacy_Request.PurchaseResult>
	|-JsonManager.DeserializeArray<PurchaseByBank_UnityIap_Request.PurchaseResult>
	|-JsonManager.DeserializeArray<QuestBehaviorEntity>
	|-JsonManager.DeserializeArray<QuestRewardInfo>
	|-JsonManager.DeserializeArray<ResponseData>
	|-JsonManager.DeserializeArray<ScrTerminalListTop.AdditionalDlgMessage>
	|-JsonManager.DeserializeArray<SummonControl.resData>
	|-JsonManager.DeserializeArray<Dictionary<string, object>>
	|-JsonManager.DeserializeArray<object>
	|-JsonManager.DeserializeArray<TitleInfoEventTimeStatus.UIActiveQuestData>
	|-JsonManager.DeserializeArray<UserPresentBoxWindow.resData>
	|-JsonManager.DeserializeArray<WarBoardUserGetItemData>
	|-JsonManager.DeserializeArray<WarBoardUserMasterData>
	|-JsonManager.DeserializeArray<WarBoardUserTreasureData>
	*/

	// RVA: -1 Offset: -1
	public static T[][] DeserializeMultiArray<T>(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B263DC Offset: 0x2B263DC VA: 0x2B263DC
	|-JsonManager.DeserializeMultiArray<int>
	|
	|-RVA: 0x2B26458 Offset: 0x2B26458 VA: 0x2B26458
	|-JsonManager.DeserializeMultiArray<object>
	|
	|-RVA: 0x2B264D4 Offset: 0x2B264D4 VA: 0x2B264D4
	|-JsonManager.DeserializeMultiArray<float>
	*/

	// RVA: 0x11C3B2C Offset: 0x11C3B2C VA: 0x11C3B2C
	private static void CreateJsonString(object obj, bool isObscuredString = False, bool ignoreStaticField = False) { }

	// RVA: 0x11C3560 Offset: 0x11C3560 VA: 0x11C3560
	public static string toJson(object obj, bool isObscuredString = False, bool ignoreStaticField = False) { }

	// RVA: 0x11C5550 Offset: 0x11C5550 VA: 0x11C5550
	private static void CreateByDictInside(object dat, Type t, Dictionary<string, object> dict) { }

	// RVA: -1 Offset: -1
	private static T CreateByDict<T>(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1FC58 Offset: 0x1C1FC58 VA: 0x1C1FC58
	|-JsonManager.CreateByDict<object>
	*/

	// RVA: -1 Offset: -1
	private static T[] CreateByDictArray<T>(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F900 Offset: 0x2B1F900 VA: 0x2B1F900
	|-JsonManager.CreateByDictArray<object>
	*/

	// RVA: -1 Offset: -1
	private static T[][] CreateByDictMultiArray<T>(object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B22128 Offset: 0x2B22128 VA: 0x2B22128
	|-JsonManager.CreateByDictMultiArray<int>
	|
	|-RVA: 0x2B23764 Offset: 0x2B23764 VA: 0x2B23764
	|-JsonManager.CreateByDictMultiArray<object>
	|
	|-RVA: 0x2B24DA0 Offset: 0x2B24DA0 VA: 0x2B24DA0
	|-JsonManager.CreateByDictMultiArray<float>
	*/

	// RVA: 0x11C98A8 Offset: 0x11C98A8 VA: 0x11C98A8
	private static void .cctor() { }
}

// Namespace: 
public class LimitCountIconComponent : BaseMonoBehaviour // TypeDefIndex: 6385
{
	// Fields
	[SerializeField] // RVA: 0xC54048 Offset: 0xC54048 VA: 0xC54048
	protected GameObject limitCountBase; // 0x18
	[SerializeField] // RVA: 0xC54058 Offset: 0xC54058 VA: 0xC54058
	protected UISprite[] limitCountSpriteList; // 0x20

	// Methods

	// RVA: 0x11CF498 Offset: 0x11CF498 VA: 0x11CF498
	public void .ctor() { }

	// RVA: 0x11CF4A0 Offset: 0x11CF4A0 VA: 0x11CF4A0
	public void Clear() { }

	// RVA: 0x11CF4D4 Offset: 0x11CF4D4 VA: 0x11CF4D4
	public void Set(int limitCount, int limitMax) { }

	// RVA: 0x11CF630 Offset: 0x11CF630 VA: 0x11CF630
	public void Set(LimitCountIconComponent limitCountIcon) { }
}

// Namespace: 
public class MasterDataUnpakcer // TypeDefIndex: 6386
{
	// Fields
	private static StringBuilder sb; // 0x0
	private byte[] tmp0; // 0x10
	private byte[] tmp1; // 0x18
	private readonly MemoryStream writeStream; // 0x20
	private byte[] tmpBuffer; // 0x28

	// Methods

	// RVA: 0x149574C Offset: 0x149574C VA: 0x149574C
	public void .ctor() { }

	// RVA: 0x14957E4 Offset: 0x14957E4 VA: 0x14957E4
	public object Unpack(byte[] buf, int offset, int size) { }

	// RVA: 0x1496510 Offset: 0x1496510 VA: 0x1496510
	public object Unpack(byte[] buf) { }

	// RVA: 0x149654C Offset: 0x149654C VA: 0x149654C
	public void UnpackByte(Stream s, Stream ws) { }

	// RVA: 0x1496D34 Offset: 0x1496D34 VA: 0x1496D34
	public void UnpackBinary(int b, Stream s, Stream ws) { }

	// RVA: 0x1496AD8 Offset: 0x1496AD8 VA: 0x1496AD8
	public void UnpackArrayByte(int b, Stream s, Stream ws) { }

	// RVA: 0x149686C Offset: 0x149686C VA: 0x149686C
	public void UnpackMapByte(int b, Stream s, Stream ws) { }

	// RVA: 0x1495934 Offset: 0x1495934 VA: 0x1495934
	public object Unpack(Stream s) { }

	// RVA: 0x1497808 Offset: 0x1497808 VA: 0x1497808
	private long UnpackUint16(Stream s) { }

	// RVA: 0x1497924 Offset: 0x1497924 VA: 0x1497924
	private long UnpackUint32(Stream s) { }

	// RVA: 0x1497530 Offset: 0x1497530 VA: 0x1497530
	private string UnpackString(Stream s, long len) { }

	// RVA: 0x1497AB4 Offset: 0x1497AB4 VA: 0x1497AB4
	private byte[] UnpackBinary(Stream s, long len) { }

	// RVA: 0x1497468 Offset: 0x1497468 VA: 0x1497468
	private List<object> UnpackArray(Stream s, long len) { }

	// RVA: 0x1497248 Offset: 0x1497248 VA: 0x1497248
	private Dictionary<string, long[]> UnpackMap(Stream s, long len) { }

	// RVA: 0x1497B48 Offset: 0x1497B48 VA: 0x1497B48
	public void Skip(Stream s) { }

	// RVA: 0x1497DCC Offset: 0x1497DCC VA: 0x1497DCC
	private void SkipArray(Stream s, int len) { }

	// RVA: 0x1497D78 Offset: 0x1497D78 VA: 0x1497D78
	private void SkipMap(Stream s, int len) { }

	// RVA: 0x1497E14 Offset: 0x1497E14 VA: 0x1497E14
	private void Seek(Stream s, long offset) { }
}

// Namespace: 
public class MemoryVisualizer : MonoBehaviour // TypeDefIndex: 6387
{
	// Methods

	// RVA: 0x162BB40 Offset: 0x162BB40 VA: 0x162BB40
	public void .ctor() { }
}

// Namespace: MiniJSON
public static class Json // TypeDefIndex: 6388
{
	// Methods

	// RVA: 0x128BA78 Offset: 0x128BA78 VA: 0x128BA78
	public static object Deserialize(string json) { }

	// RVA: 0x128BBC8 Offset: 0x128BBC8 VA: 0x128BBC8
	public static string Serialize(object obj) { }

	// RVA: 0x128BC70 Offset: 0x128BC70 VA: 0x128BC70
	public static void Serialize(object obj, StringBuilder builder) { }
}

// Namespace: 
private sealed class Json.Parser : IDisposable // TypeDefIndex: 6389
{
	// Fields
	private const string WORD_BREAK = ",:{}\"[]";
	private Json.Parser.MyStringReader json; // 0x10
	private StringBuilder g_s; // 0x18
	private string emptyString; // 0x20

	// Properties
	private char PeekChar { get; }
	private char NextChar { get; }
	private string NextWord { get; }
	private Json.Parser.TOKEN NextToken { get; }

	// Methods

	// RVA: 0x128BCF0 Offset: 0x128BCF0 VA: 0x128BCF0
	private void .ctor(string jsonString) { }

	// RVA: 0x128BE04 Offset: 0x128BE04 VA: 0x128BE04
	public static bool IsWordBreak(char c) { }

	// RVA: 0x128BA84 Offset: 0x128BA84 VA: 0x128BA84
	public static object Parse(string jsonString) { }

	// RVA: 0x128BED0 Offset: 0x128BED0 VA: 0x128BED0 Slot: 4
	public void Dispose() { }

	// RVA: 0x128BF0C Offset: 0x128BF0C VA: 0x128BF0C
	private Dictionary<string, object> ParseObject() { }

	// RVA: 0x128C3F0 Offset: 0x128C3F0 VA: 0x128C3F0
	private List<object> ParseArray() { }

	// RVA: 0x128BEA8 Offset: 0x128BEA8 VA: 0x128BEA8
	private object ParseValue() { }

	// RVA: 0x128C4D8 Offset: 0x128C4D8 VA: 0x128C4D8
	private object ParseByToken(Json.Parser.TOKEN token) { }

	// RVA: 0x128C284 Offset: 0x128C284 VA: 0x128C284
	private string ParseString() { }

	// RVA: 0x128C828 Offset: 0x128C828 VA: 0x128C828
	private string ParseStringMeta() { }

	// RVA: 0x128C5B4 Offset: 0x128C5B4 VA: 0x128C5B4
	private object ParseNumber() { }

	// RVA: 0x128CB44 Offset: 0x128CB44 VA: 0x128CB44
	private void EatWhitespace() { }

	// RVA: 0x128C7A0 Offset: 0x128C7A0 VA: 0x128C7A0
	private char get_PeekChar() { }

	// RVA: 0x128CAAC Offset: 0x128CAAC VA: 0x128CAAC
	private char get_NextChar() { }

	// RVA: 0x128CCA8 Offset: 0x128CCA8 VA: 0x128CCA8
	private string get_NextWord() { }

	// RVA: 0x128C050 Offset: 0x128C050 VA: 0x128C050
	private Json.Parser.TOKEN get_NextToken() { }
}

// Namespace: 
private enum Json.Parser.TOKEN // TypeDefIndex: 6390
{
	// Fields
	public int value__; // 0x0
	public const Json.Parser.TOKEN NONE = 0;
	public const Json.Parser.TOKEN CURLY_OPEN = 1;
	public const Json.Parser.TOKEN CURLY_CLOSE = 2;
	public const Json.Parser.TOKEN SQUARED_OPEN = 3;
	public const Json.Parser.TOKEN SQUARED_CLOSE = 4;
	public const Json.Parser.TOKEN COLON = 5;
	public const Json.Parser.TOKEN COMMA = 6;
	public const Json.Parser.TOKEN STRING = 7;
	public const Json.Parser.TOKEN NUMBER = 8;
	public const Json.Parser.TOKEN TRUE = 9;
	public const Json.Parser.TOKEN FALSE = 10;
	public const Json.Parser.TOKEN NULL = 11;
}

// Namespace: 
private class Json.Parser.MyStringReader // TypeDefIndex: 6391
{
	// Fields
	private string m_s; // 0x10
	private int m_pos; // 0x18
	private int m_end; // 0x1C

	// Methods

	// RVA: 0x128BDB8 Offset: 0x128BDB8 VA: 0x128BDB8
	public void .ctor(string s) { }

	// RVA: 0x128CA9C Offset: 0x128CA9C VA: 0x128CA9C
	public bool isEnd() { }

	// RVA: 0x128CA94 Offset: 0x128CA94 VA: 0x128CA94
	public int getPos() { }

	// RVA: 0x128CB34 Offset: 0x128CB34 VA: 0x128CB34
	public void setPos(int pos) { }

	// RVA: 0x128C040 Offset: 0x128C040 VA: 0x128C040
	public void nextChar() { }

	// RVA: 0x128CB3C Offset: 0x128CB3C VA: 0x128CB3C
	public string getString() { }

	// RVA: 0x128CC00 Offset: 0x128CC00 VA: 0x128CC00
	public int Peek() { }

	// RVA: 0x128CC50 Offset: 0x128CC50 VA: 0x128CC50
	public int Read() { }

	// RVA: 0x128BF04 Offset: 0x128BF04 VA: 0x128BF04
	public void Dispose() { }
}

// Namespace: 
private sealed class Json.Serializer // TypeDefIndex: 6392
{
	// Fields
	private readonly char[] hexChars; // 0x10
	private StringBuilder builder; // 0x18

	// Methods

	// RVA: 0x128CD74 Offset: 0x128CD74 VA: 0x128CD74
	private void .ctor() { }

	// RVA: 0x128CE10 Offset: 0x128CE10 VA: 0x128CE10
	private void .ctor(StringBuilder builder) { }

	// RVA: 0x128BBCC Offset: 0x128BBCC VA: 0x128BBCC
	public static string Serialize(object obj) { }

	// RVA: 0x128BC74 Offset: 0x128BC74 VA: 0x128BC74
	public static void Serialize(object obj, StringBuilder builder) { }

	// RVA: 0x128CE9C Offset: 0x128CE9C VA: 0x128CE9C
	private void SerializeValue(object value) { }

	// RVA: 0x128D660 Offset: 0x128D660 VA: 0x128D660
	private void SerializeObject(IDictionary obj) { }

	// RVA: 0x128D48C Offset: 0x128D48C VA: 0x128D48C
	private void SerializeArray(IList anArray) { }

	// RVA: 0x128D058 Offset: 0x128D058 VA: 0x128D058
	private void SerializeString(string str) { }

	// RVA: 0x128DAA8 Offset: 0x128DAA8 VA: 0x128DAA8
	private void SerializeOther(object value) { }
}

// Namespace: MiniMessagePack
public class MiniMessagePacker // TypeDefIndex: 6393
{
	// Fields
	private StringBuilder sb; // 0x10
	private byte[] tmp0; // 0x18
	private byte[] tmp1; // 0x20
	private static Encoding encoder; // 0x0
	private Dictionary<Type, FieldInfo[]> fieldInfoCache; // 0x28
	private Dictionary<FieldInfo, string> fieldInfoKeyCache; // 0x30
	private const int TmpStringHashCapacity = 2000;
	private static byte[] tmpStringHash; // 0x8
	private byte[] threadSafeStringHash; // 0x38
	private const int InternPoolCapacity = 40000;
	private static Dictionary<ulong, string> internPool; // 0x10
	private static bool hasStringHashCollision; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC54068 Offset: 0xC54068 VA: 0xC54068
	private static Predicate<FieldInfo> <>f__am$cache0; // 0x20

	// Methods

	// RVA: 0x128DCD8 Offset: 0x128DCD8 VA: 0x128DCD8
	public void .ctor() { }

	// RVA: 0x128DD48 Offset: 0x128DD48 VA: 0x128DD48
	public byte[] Pack(object o) { }

	// RVA: 0x128DEA0 Offset: 0x128DEA0 VA: 0x128DEA0
	public void Pack(Stream s, object o) { }

	// RVA: 0x128E254 Offset: 0x128E254 VA: 0x128E254
	private void PackNull(Stream s) { }

	// RVA: 0x128E40C Offset: 0x128E40C VA: 0x128E40C
	private void Pack(Stream s, IList list) { }

	// RVA: 0x128E60C Offset: 0x128E60C VA: 0x128E60C
	private void Pack(Stream s, IDictionary dict) { }

	// RVA: 0x128EAD0 Offset: 0x128EAD0 VA: 0x128EAD0
	private void Pack(Stream s, bool val) { }

	// RVA: 0x128EB18 Offset: 0x128EB18 VA: 0x128EB18
	private void Pack(Stream s, sbyte val) { }

	// RVA: 0x128EC0C Offset: 0x128EC0C VA: 0x128EC0C
	private void Pack(Stream s, byte val) { }

	// RVA: 0x128ECFC Offset: 0x128ECFC VA: 0x128ECFC
	private void Pack(Stream s, short val) { }

	// RVA: 0x128EDA0 Offset: 0x128EDA0 VA: 0x128EDA0
	private void Pack(Stream s, ushort val) { }

	// RVA: 0x128EE24 Offset: 0x128EE24 VA: 0x128EE24
	private void Pack(Stream s, int val) { }

	// RVA: 0x128EEF4 Offset: 0x128EEF4 VA: 0x128EEF4
	private void Pack(Stream s, uint val) { }

	// RVA: 0x128EFA4 Offset: 0x128EFA4 VA: 0x128EFA4
	private void Pack(Stream s, long val) { }

	// RVA: 0x128F0C0 Offset: 0x128F0C0 VA: 0x128F0C0
	private void Pack(Stream s, ulong val) { }

	// RVA: 0x128F1B8 Offset: 0x128F1B8 VA: 0x128F1B8
	private void Pack(Stream s, float val) { }

	// RVA: 0x128F3F0 Offset: 0x128F3F0 VA: 0x128F3F0
	private void Pack(Stream s, double val) { }

	// RVA: 0x128E290 Offset: 0x128E290 VA: 0x128E290
	private void Pack(Stream s, string val) { }

	// RVA: 0x128F768 Offset: 0x128F768 VA: 0x128F768
	private void Write(Stream s, ushort val) { }

	// RVA: 0x128F820 Offset: 0x128F820 VA: 0x128F820
	private void Write(Stream s, uint val) { }

	// RVA: 0x128F940 Offset: 0x128F940 VA: 0x128F940
	private void Write(Stream s, ulong val) { }

	// RVA: 0x128FB30 Offset: 0x128FB30 VA: 0x128FB30
	private void Write(Stream s, string val) { }

	// RVA: 0x128FE40 Offset: 0x128FE40 VA: 0x128FE40
	public object Unpack(byte[] buf, int offset, int size) { }

	// RVA: 0x1290B6C Offset: 0x1290B6C VA: 0x1290B6C
	public object Unpack(byte[] buf) { }

	// RVA: 0x128FF90 Offset: 0x128FF90 VA: 0x128FF90
	public object Unpack(Stream s) { }

	// RVA: 0x1291014 Offset: 0x1291014 VA: 0x1291014
	private long UnpackUint16(Stream s) { }

	// RVA: 0x1291130 Offset: 0x1291130 VA: 0x1291130
	private long UnpackUint32(Stream s) { }

	// RVA: 0x1290D80 Offset: 0x1290D80 VA: 0x1290D80
	private string UnpackString(Stream s, long len) { }

	// RVA: 0x12912C0 Offset: 0x12912C0 VA: 0x12912C0
	private byte[] UnpackBinary(Stream s, long len) { }

	// RVA: 0x1290CB8 Offset: 0x1290CB8 VA: 0x1290CB8
	private List<object> UnpackArray(Stream s, long len) { }

	// RVA: 0x1290BA8 Offset: 0x1290BA8 VA: 0x1290BA8
	private Dictionary<string, object> UnpackMap(Stream s, long len) { }

	// RVA: 0x1291354 Offset: 0x1291354 VA: 0x1291354
	public byte[] PackClass(object o) { }

	// RVA: -1 Offset: -1
	public T UnpackClass<T>(byte[] buf) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C20894 Offset: 0x1C20894 VA: 0x1C20894
	|-MiniMessagePacker.UnpackClass<BattleData.SaveData>
	|-MiniMessagePacker.UnpackClass<object>
	|-MiniMessagePacker.UnpackClass<WarBoardData.WarBoardLocalSaveData>
	*/

	// RVA: 0x12918D4 Offset: 0x12918D4 VA: 0x12918D4
	private string GetKey(FieldInfo info) { }

	// RVA: 0x1291A38 Offset: 0x1291A38 VA: 0x1291A38
	private FieldInfo GetField(Type t, string key) { }

	// RVA: 0x1291B30 Offset: 0x1291B30 VA: 0x1291B30
	private FieldInfo[] GetFields(Type t) { }

	// RVA: 0x1291520 Offset: 0x1291520 VA: 0x1291520
	private void PackClass(Stream s, object o) { }

	// RVA: 0x1291CD8 Offset: 0x1291CD8 VA: 0x1291CD8
	private void PackClass(Stream s, IList list) { }

	// RVA: 0x1291ED8 Offset: 0x1291ED8 VA: 0x1291ED8
	private void PackClass(Stream s, IDictionary dict) { }

	// RVA: 0x129239C Offset: 0x129239C VA: 0x129239C
	private void PackClassToDict(Stream s, object o) { }

	// RVA: 0x1292544 Offset: 0x1292544 VA: 0x1292544
	private void CreateByDictInside(object dat, Type t, Dictionary<string, object> dict) { }

	// RVA: 0x12952E8 Offset: 0x12952E8 VA: 0x12952E8
	public long LL_UnpackInteger(Stream s) { }

	// RVA: 0x12957A0 Offset: 0x12957A0 VA: 0x12957A0
	public bool LL_UnpackBoolean(Stream s) { }

	// RVA: 0x1295854 Offset: 0x1295854 VA: 0x1295854
	public double LL_UnpackFloat(Stream s) { }

	// RVA: 0x1295E70 Offset: 0x1295E70 VA: 0x1295E70
	public static void LL_DiscardInternPool() { }

	// RVA: 0x1295ED8 Offset: 0x1295ED8 VA: 0x1295ED8
	public string LL_UnpackString(Stream s) { }

	// RVA: 0x1295F70 Offset: 0x1295F70 VA: 0x1295F70
	private string LL_UnpackStringWithoutIntern(Stream s) { }

	// RVA: 0x12960AC Offset: 0x12960AC VA: 0x12960AC
	public uint LL_UnpackStringAsHash(Stream s) { }

	// RVA: 0x12960CC Offset: 0x12960CC VA: 0x12960CC
	private ulong LL_UnpackStringAsHashNBits(int bits, Stream s) { }

	// RVA: 0x1296398 Offset: 0x1296398 VA: 0x1296398
	public void SetThreadSafeStringHashWork(byte[] work) { }

	// RVA: 0x1296210 Offset: 0x1296210 VA: 0x1296210
	private ulong LL_UnpackStringAsHashNBits(int bits, Stream s, int len) { }

	// RVA: 0x12963A0 Offset: 0x12963A0 VA: 0x12963A0
	public byte[] LL_UnpackBinary(Stream s) { }

	// RVA: 0x12964BC Offset: 0x12964BC VA: 0x12964BC
	public int LL_UnpackArrayHeader(Stream s) { }

	// RVA: 0x12965B4 Offset: 0x12965B4 VA: 0x12965B4
	public int LL_UnpackMapHeader(Stream s) { }

	// RVA: 0x12966AC Offset: 0x12966AC VA: 0x12966AC
	public void LL_Skip(Stream s) { }

	// RVA: 0x1296930 Offset: 0x1296930 VA: 0x1296930
	private void LL_SkipArray(Stream s, int len) { }

	// RVA: 0x12968DC Offset: 0x12968DC VA: 0x12968DC
	private void LL_SkipMap(Stream s, int len) { }

	// RVA: 0x1296978 Offset: 0x1296978 VA: 0x1296978
	private void LL_Seek(Stream s, long offset) { }

	// RVA: 0x1296A68 Offset: 0x1296A68 VA: 0x1296A68
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8F9C Offset: 0xCC8F9C VA: 0xCC8F9C
	// RVA: 0x1296B08 Offset: 0x1296B08 VA: 0x1296B08
	private static bool <GetFields>m__0(FieldInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC427E4 Offset: 0xC427E4 VA: 0xC427E4
private sealed class MiniMessagePacker.<GetField>c__AnonStorey0 // TypeDefIndex: 6394
{
	// Fields
	internal string key; // 0x10
	internal MiniMessagePacker $this; // 0x18

	// Methods

	// RVA: 0x1291B28 Offset: 0x1291B28 VA: 0x1291B28
	public void .ctor() { }

	// RVA: 0x1296B98 Offset: 0x1296B98 VA: 0x1296B98
	internal bool <>m__0(FieldInfo x) { }
}

// Namespace: MiniMessagePack
[AttributeUsageAttribute] // RVA: 0xC25388 Offset: 0xC25388 VA: 0xC25388
public class PackKeyAttribute : Attribute // TypeDefIndex: 6395
{
	// Fields
	private string key; // 0x10

	// Properties
	public string Key { get; }

	// Methods

	// RVA: 0x1296CAC Offset: 0x1296CAC VA: 0x1296CAC
	public void .ctor(string key) { }

	// RVA: 0x1291A30 Offset: 0x1291A30 VA: 0x1291A30
	public string get_Key() { }
}

// Namespace: MiniMessagePack
[AttributeUsageAttribute] // RVA: 0xC253D4 Offset: 0xC253D4 VA: 0xC253D4
public class DisablePackAttribute : Attribute // TypeDefIndex: 6396
{
	// Methods

	// RVA: 0x128DCD0 Offset: 0x128DCD0 VA: 0x128DCD0
	public void .ctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC25420 Offset: 0xC25420 VA: 0xC25420
public class MotionInfo : MonoBehaviour // TypeDefIndex: 6397
{
	// Fields
	[SerializeField] // RVA: 0xC54078 Offset: 0xC54078 VA: 0xC54078
	public bool show; // 0x18
	private float y; // 0x1C
	private float width; // 0x20
	private float height; // 0x24
	private static string svtName; // 0x0
	private static BattleActionData actionData; // 0x8
	private static int hitNum; // 0x10

	// Methods

	// RVA: 0x12A82D0 Offset: 0x12A82D0 VA: 0x12A82D0
	public void .ctor() { }

	// RVA: 0x12A82F4 Offset: 0x12A82F4 VA: 0x12A82F4
	public static void SetActionData(BattleActionData _actionData, string _svtName) { }

	// RVA: 0x12A8378 Offset: 0x12A8378 VA: 0x12A8378
	public static void SetHitNum(int _hitNum) { }

	// RVA: 0x12A83E4 Offset: 0x12A83E4 VA: 0x12A83E4
	public void OnGUI() { }

	// RVA: 0x12A8C88 Offset: 0x12A8C88 VA: 0x12A8C88
	private string GetTypeName(int type) { }

	// RVA: 0x12A8D40 Offset: 0x12A8D40 VA: 0x12A8D40
	private static void .cctor() { }
}

// Namespace: 
public class MoveWindowComponent : BaseMonoBehaviour // TypeDefIndex: 6398
{
	// Fields
	private Hashtable table; // 0x18
	public bool closepositionadjust; // 0x20
	public bool flgopen; // 0x21
	public Vector3 closeposition; // 0x24
	public Vector3 openposition; // 0x30
	public Collider[] contentscolliderlist; // 0x40

	// Methods

	// RVA: 0x1198274 Offset: 0x1198274 VA: 0x1198274
	public void .ctor() { }

	// RVA: 0x11982E4 Offset: 0x11982E4 VA: 0x11982E4
	public void Awake() { }

	// RVA: 0x1198354 Offset: 0x1198354 VA: 0x1198354
	public void setContentsCollider(bool flg) { }

	// RVA: 0x1198408 Offset: 0x1198408 VA: 0x1198408
	public void tglWindow() { }

	// RVA: 0x1198620 Offset: 0x1198620 VA: 0x1198620
	public void openWindow() { }

	// RVA: 0x119881C Offset: 0x119881C VA: 0x119881C
	public void onOpenComplete() { }

	// RVA: 0x1198418 Offset: 0x1198418 VA: 0x1198418
	public void closeWindow() { }

	// RVA: 0x1198848 Offset: 0x1198848 VA: 0x1198848
	public void onCloseComplete() { }
}

// Namespace: 
public class ObjectScaleEnabler : MonoBehaviour // TypeDefIndex: 6399
{
	// Fields
	public Transform visibleCheckTarget; // 0x18
	public bool suddenDeath; // 0x20
	private bool isChildVisible; // 0x21

	// Methods

	// RVA: 0x1A91A14 Offset: 0x1A91A14 VA: 0x1A91A14
	public void .ctor() { }

	// RVA: 0x1A91A24 Offset: 0x1A91A24 VA: 0x1A91A24
	private void Start() { }

	// RVA: 0x1A91A30 Offset: 0x1A91A30 VA: 0x1A91A30
	public void OnUpdate() { }

	// RVA: 0x1A924EC Offset: 0x1A924EC VA: 0x1A924EC
	private void Update() { }
}

// Namespace: 
public class OpeningMovieData // TypeDefIndex: 6400
{
	// Fields
	public static readonly string ChapterPrologueWarKey; // 0x0
	private static int FirstWarID; // 0x8
	private int warId; // 0x10
	private Action<string, string, bool> action; // 0x18
	private bool isCanSkip; // 0x20
	private string movieFileName; // 0x28

	// Methods

	// RVA: 0x1A932B0 Offset: 0x1A932B0 VA: 0x1A932B0
	public void .ctor(int warId, bool isCanSkip) { }

	// RVA: 0x1A932F0 Offset: 0x1A932F0 VA: 0x1A932F0
	public void .ctor(string movieFileName, bool isCanSkip) { }

	// RVA: 0x1A93330 Offset: 0x1A93330 VA: 0x1A93330
	public void OnStart(Action<string, string, bool> action) { }

	// RVA: 0x1A93470 Offset: 0x1A93470 VA: 0x1A93470
	public void OnStartBootMovie(Action<string, string, bool> action) { }

	// RVA: 0x1A9358C Offset: 0x1A9358C VA: 0x1A9358C
	private void OnEndDownload(AssetData data) { }

	// RVA: 0x1A93680 Offset: 0x1A93680 VA: 0x1A93680
	public string GetMaterialString() { }

	// RVA: 0x1A93758 Offset: 0x1A93758 VA: 0x1A93758
	public static int GetPrologueWarId(int idx) { }

	// RVA: 0x1A93824 Offset: 0x1A93824 VA: 0x1A93824
	public static int GetFirstWarId() { }

	// RVA: 0x1A938E8 Offset: 0x1A938E8 VA: 0x1A938E8
	private static void .cctor() { }
}

// Namespace: 
public class ParticleDisconnector : BaseMonoBehaviour // TypeDefIndex: 6401
{
	// Fields
	public ParticleSystem[] particles; // 0x18

	// Methods

	// RVA: 0x123E4DC Offset: 0x123E4DC VA: 0x123E4DC
	public void .ctor() { }

	// RVA: 0x123E53C Offset: 0x123E53C VA: 0x123E53C
	public void Initialize(Transform obj) { }

	// RVA: 0x123E724 Offset: 0x123E724 VA: 0x123E724
	public static ParticleDisconnector DisconnectParticles(Transform globalParent, Transform obj) { }

	// RVA: 0x123E7C4 Offset: 0x123E7C4 VA: 0x123E7C4
	private void Update() { }

	// RVA: 0x123E97C Offset: 0x123E97C VA: 0x123E97C
	private void OnDestroy() { }
}

// Namespace: 
public class RandomUtility // TypeDefIndex: 6402
{
	// Methods

	// RVA: 0x1287448 Offset: 0x1287448 VA: 0x1287448
	public void .ctor() { }

	// RVA: 0x1287450 Offset: 0x1287450 VA: 0x1287450
	public static int GetRandomRangeIndex(int[] weightArray, int defValue = -1) { }
}

// Namespace: 
public class SendEventToFsm : BaseMonoBehaviour // TypeDefIndex: 6403
{
	// Fields
	public PlayMakerFSM targetFSM; // 0x18
	[HideInInspector] // RVA: 0xC54088 Offset: 0xC54088 VA: 0xC54088
	public string sendEvent; // 0x20
	public SendEventToFsm.Trigger trigger; // 0x28
	private bool mStarted; // 0x2C

	// Methods

	// RVA: 0x17371FC Offset: 0x17371FC VA: 0x17371FC
	public void .ctor() { }

	// RVA: 0x1737254 Offset: 0x1737254 VA: 0x1737254
	private void Start() { }

	// RVA: 0x1737260 Offset: 0x1737260 VA: 0x1737260
	private void OnEnable() { }

	// RVA: 0x17372FC Offset: 0x17372FC VA: 0x17372FC
	private void OnHover(bool isOver) { }

	// RVA: 0x17373F4 Offset: 0x17373F4 VA: 0x17373F4
	private void OnPress(bool isPressed) { }

	// RVA: 0x1737448 Offset: 0x1737448 VA: 0x1737448
	private void OnSelect(bool isSelected) { }

	// RVA: 0x17374F4 Offset: 0x17374F4 VA: 0x17374F4
	private void OnClick() { }

	// RVA: 0x1737534 Offset: 0x1737534 VA: 0x1737534
	private void OnDoubleClick() { }

	// RVA: 0x1737350 Offset: 0x1737350 VA: 0x1737350
	private void Send() { }
}

// Namespace: 
public enum SendEventToFsm.Trigger // TypeDefIndex: 6404
{
	// Fields
	public int value__; // 0x0
	public const SendEventToFsm.Trigger OnClick = 0;
	public const SendEventToFsm.Trigger OnMouseOver = 1;
	public const SendEventToFsm.Trigger OnMouseOut = 2;
	public const SendEventToFsm.Trigger OnPress = 3;
	public const SendEventToFsm.Trigger OnRelease = 4;
	public const SendEventToFsm.Trigger OnDoubleClick = 5;
}

// Namespace: 
public class ServantClassCompatibilityIconComponent : MonoBehaviour // TypeDefIndex: 6405
{
	// Fields
	[SerializeField] // RVA: 0xC54098 Offset: 0xC54098 VA: 0xC54098
	protected UISprite upIconSprite; // 0x18
	[SerializeField] // RVA: 0xC540A8 Offset: 0xC540A8 VA: 0xC540A8
	protected UISprite downIconSprite; // 0x20
	private static readonly float[] POSITION_X_UP; // 0x0
	private static readonly float[] POSITION_X_DOWN; // 0x8
	private static readonly float[] POSITION_X_CENTER; // 0x10
	private const int WAR_BOARD_UP_ICON_LONG_X = 22;
	private const int WAR_BOARD_UP_ICON_LONG_Y = 32;
	private const int WAR_BOARD_UP_ICON_SHORT_X = 22;
	private const int WAR_BOARD_UP_ICON_SHORT_Y = 24;
	private const int WAR_BOARD_DOWN_ICON_LONG_X = 22;
	private const int WAR_BOARD_DOWN_ICON_LONG_Y = 32;
	private const int WAR_BOARD_DOWN_ICON_SHORT_X = 22;
	private const int WAR_BOARD_DOWN_ICON_SHORT_Y = 24;
	private const int ADVANTAGE_NONE = 0;
	private const int ADVANTAGE_LARGE = 1;
	private const int ADVANTAGE_SMALL = 2;

	// Methods

	// RVA: 0x13BB658 Offset: 0x13BB658 VA: 0x13BB658
	public void .ctor() { }

	// RVA: 0x13BB660 Offset: 0x13BB660 VA: 0x13BB660
	public void Clear() { }

	// RVA: 0x13BB7CC Offset: 0x13BB7CC VA: 0x13BB7CC
	public void SetIcon(int classId, int[] targetClassIds, ServantClassCompatibilityIconComponent.DispMode dispMode) { }

	// RVA: 0x13BBD50 Offset: 0x13BBD50 VA: 0x13BBD50
	private void SetIconImage(UISprite icon, int iconId, ServantClassCompatibilityIconComponent.DispMode dispMode, bool advantage) { }

	// RVA: 0x13BBF2C Offset: 0x13BBF2C VA: 0x13BBF2C
	private void SetIconPosition(UISprite icon, float x) { }

	// RVA: 0x13BC044 Offset: 0x13BC044 VA: 0x13BC044
	private static void .cctor() { }
}

// Namespace: 
public enum ServantClassCompatibilityIconComponent.DispMode // TypeDefIndex: 6406
{
	// Fields
	public int value__; // 0x0
	public const ServantClassCompatibilityIconComponent.DispMode EDIT = 0;
	public const ServantClassCompatibilityIconComponent.DispMode LIST = 1;
	public const ServantClassCompatibilityIconComponent.DispMode SUPPORT = 2;
	public const ServantClassCompatibilityIconComponent.DispMode SUPPORT_GROUP = 3;
	public const ServantClassCompatibilityIconComponent.DispMode WAR_BOARD = 4;
	public const ServantClassCompatibilityIconComponent.DispMode NONE = 5;
}

// Namespace: 
public class ServantClassIconComponent : MonoBehaviour // TypeDefIndex: 6407
{
	// Fields
	[SerializeField] // RVA: 0xC540B8 Offset: 0xC540B8 VA: 0xC540B8
	protected UISprite iconSprite; // 0x18
	[SerializeField] // RVA: 0xC540C8 Offset: 0xC540C8 VA: 0xC540C8
	protected UISprite nameSprite; // 0x20
	public UILabel nameLabel; // 0x28

	// Methods

	// RVA: 0x13BC1A4 Offset: 0x13BC1A4 VA: 0x13BC1A4
	public void .ctor() { }

	// RVA: 0x13BC1AC Offset: 0x13BC1AC VA: 0x13BC1AC
	public void Clear() { }

	// RVA: 0x13BC324 Offset: 0x13BC324 VA: 0x13BC324
	public void Set(int classId) { }

	// RVA: 0x13BC5A8 Offset: 0x13BC5A8 VA: 0x13BC5A8
	public void Set(int classId, int rarity) { }

	// RVA: 0x13BC634 Offset: 0x13BC634 VA: 0x13BC634
	public void Set(int svtId, int limitCount, int exceedCount) { }

	// RVA: 0x13BC754 Offset: 0x13BC754 VA: 0x13BC754
	public void SetWithClassOverWrite(int svtId, int limitCount, int classId) { }

	// RVA: 0x13BC32C Offset: 0x13BC32C VA: 0x13BC32C
	public void SetImage(int classId, int frameType) { }

	// RVA: 0x13BC814 Offset: 0x13BC814 VA: 0x13BC814
	public void SetColor(Color col) { }
}

// Namespace: 
public class ServantCommandCardListComponent : BaseMonoBehaviour // TypeDefIndex: 6408
{
	// Fields
	[SerializeField] // RVA: 0xC540D8 Offset: 0xC540D8 VA: 0xC540D8
	protected UISprite[] cardSpriteList; // 0x18
	[SerializeField] // RVA: 0xC540E8 Offset: 0xC540E8 VA: 0xC540E8
	protected UISprite[] grantSpriteList; // 0x20
	[SerializeField] // RVA: 0xC540F8 Offset: 0xC540F8 VA: 0xC540F8
	protected UISprite[] cardRankSpriteList; // 0x28
	private bool isChkLock; // 0x30
	private readonly Color COMMAND_CARD_GRAY_OUT; // 0x34
	private readonly Color COMMAND_CARD_NORMAL; // 0x44

	// Methods

	// RVA: 0x13C73E8 Offset: 0x13C73E8 VA: 0x13C73E8
	public void .ctor() { }

	// RVA: 0x13C74E0 Offset: 0x13C74E0 VA: 0x13C74E0
	public void Clear() { }

	// RVA: 0x13C76B4 Offset: 0x13C76B4 VA: 0x13C76B4
	public void SetHide() { }

	// RVA: 0x13C7C80 Offset: 0x13C7C80 VA: 0x13C7C80
	public void Set(long userSvtId, bool isChkLock = False, AtlasManager.CARD_ICON_TYPE cardIconType = 1) { }

	// RVA: 0x13C7D60 Offset: 0x13C7D60 VA: 0x13C7D60
	public void Set(UserServantEntity userSvtEntity, AtlasManager.CARD_ICON_TYPE cardIconType = 1) { }

	// RVA: 0x13C7F48 Offset: 0x13C7F48 VA: 0x13C7F48
	public void Set(int svtId, int[] codeIds, CollectionStatus.Kind collectionStatus = 2, AtlasManager.CARD_ICON_TYPE cardIconType = 1) { }

	// RVA: 0x13C7E40 Offset: 0x13C7E40 VA: 0x13C7E40
	public void Set(int svtId, int[] cardParams, int[] codeIds, CollectionStatus.Kind collectionStatus = 2, AtlasManager.CARD_ICON_TYPE cardIconType = 1) { }

	// RVA: 0x13C76F8 Offset: 0x13C76F8 VA: 0x13C76F8
	public void Set(int[] cardIds, int[] cardParams, int[] codeIds, CollectionStatus.Kind collectionStatus = 2, AtlasManager.CARD_ICON_TYPE cardIconType = 1, int svtId = 0) { }

	// RVA: 0x13C8170 Offset: 0x13C8170 VA: 0x13C8170
	public void AdjustCardSpriteListPosX(float start, float interval) { }
}

// Namespace: 
public class ServantFaceIconComponent : SwitchParameterDisplayComponent // TypeDefIndex: 6409
{
	// Fields
	private static readonly int SECRET_SERVANT_ID; // 0x0
	private static readonly int SECRET_LIMIT_COUNT; // 0x4
	[SerializeField] // RVA: 0xC54108 Offset: 0xC54108 VA: 0xC54108
	protected UISprite backSprite; // 0x18
	[SerializeField] // RVA: 0xC54118 Offset: 0xC54118 VA: 0xC54118
	protected UISprite faceSprite; // 0x20
	[SerializeField] // RVA: 0xC54128 Offset: 0xC54128 VA: 0xC54128
	protected UISprite frameSprite; // 0x28
