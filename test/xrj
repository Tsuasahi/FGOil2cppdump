	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class OpponentOtherFullTargetAggregator : OpponentFullTargetAggregator // TypeDefIndex: 9209
{
	// Methods

	// RVA: 0x1A9444C Offset: 0x1A9444C VA: 0x1A9444C
	public void .ctor() { }

	// RVA: 0x1A94454 Offset: 0x1A94454 VA: 0x1A94454 Slot: 4
	public override int[] GetCandidate() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE148 Offset: 0xCCE148 VA: 0xCCE148
	// RVA: 0x1A94504 Offset: 0x1A94504 VA: 0x1A94504
	private bool <GetCandidate>m__0(int x) { }
}

// Namespace: 
public class PartyLowsetHpValueTargetChoicer : PartyAllFieldTargetAggregator // TypeDefIndex: 9210
{
	// Methods

	// RVA: 0x19E04B8 Offset: 0x19E04B8 VA: 0x19E04B8
	public void .ctor() { }

	// RVA: 0x19E04C0 Offset: 0x19E04C0 VA: 0x19E04C0 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public class PartyLowsetHpRateTargetChoicer : PartyAllFieldTargetAggregator // TypeDefIndex: 9211
{
	// Methods

	// RVA: 0x19E0408 Offset: 0x19E0408 VA: 0x19E0408
	public void .ctor() { }

	// RVA: 0x19E0410 Offset: 0x19E0410 VA: 0x19E0410 Slot: 4
	public override int[] GetCandidate() { }
}

// Namespace: 
public abstract class TargetFilterLogic // TypeDefIndex: 9212
{
	// Methods

	// RVA: 0x108B558 Offset: 0x108B558 VA: 0x108B558
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract IEnumerable<BattleServantData> Apply(IEnumerable<BattleServantData> servantEnumerable);
}

// Namespace: 
public class TargetFilterLowestHpValue : TargetFilterLogic // TypeDefIndex: 9213
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC65C64 Offset: 0xC65C64 VA: 0xC65C64
	private static Func<BattleServantData, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC65C74 Offset: 0xC65C74 VA: 0xC65C74
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC65C84 Offset: 0xC65C84 VA: 0xC65C84
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC65C94 Offset: 0xC65C94 VA: 0xC65C94
	private static Func<BattleServantData, int> <>f__am$cache3; // 0x18

	// Methods

	// RVA: 0x108B9C4 Offset: 0x108B9C4 VA: 0x108B9C4
	public void .ctor() { }

	// RVA: 0x108B9CC Offset: 0x108B9CC VA: 0x108B9CC Slot: 4
	public override IEnumerable<BattleServantData> Apply(IEnumerable<BattleServantData> servantEnumerable) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE158 Offset: 0xCCE158 VA: 0xCCE158
	// RVA: 0x108BC44 Offset: 0x108BC44 VA: 0x108BC44
	private static int <Apply>m__0(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE168 Offset: 0xCCE168 VA: 0xCCE168
	// RVA: 0x108BC6C Offset: 0x108BC6C VA: 0x108BC6C
	private static int <Apply>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE178 Offset: 0xCCE178 VA: 0xCCE178
	// RVA: 0x108BC98 Offset: 0x108BC98 VA: 0x108BC98
	private static int <Apply>m__2(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE188 Offset: 0xCCE188 VA: 0xCCE188
	// RVA: 0x108BCC8 Offset: 0x108BCC8 VA: 0x108BCC8
	private static int <Apply>m__3(BattleServantData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC442D4 Offset: 0xC442D4 VA: 0xC442D4
private sealed class TargetFilterLowestHpValue.<Apply>c__AnonStorey0 // TypeDefIndex: 9214
{
	// Fields
	internal Dictionary<int, int> uniqueIdToMaxHpDict; // 0x10

	// Methods

	// RVA: 0x108BC3C Offset: 0x108BC3C VA: 0x108BC3C
	public void .ctor() { }

	// RVA: 0x108BCF4 Offset: 0x108BCF4 VA: 0x108BCF4
	internal bool <>m__0(BattleServantData x) { }
}

// Namespace: 
public class TargetFilterLowestHpRate : TargetFilterLogic // TypeDefIndex: 9215
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC65CA4 Offset: 0xC65CA4 VA: 0xC65CA4
	private static Func<BattleServantData, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC65CB4 Offset: 0xC65CB4 VA: 0xC65CB4
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC65CC4 Offset: 0xC65CC4 VA: 0xC65CC4
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x10

	// Methods

	// RVA: 0x108B560 Offset: 0x108B560 VA: 0x108B560
	public void .ctor() { }

	// RVA: 0x108B568 Offset: 0x108B568 VA: 0x108B568 Slot: 4
	public override IEnumerable<BattleServantData> Apply(IEnumerable<BattleServantData> servantEnumerable) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE198 Offset: 0xCCE198 VA: 0xCCE198
	// RVA: 0x108B7C4 Offset: 0x108B7C4 VA: 0x108B7C4
	private static int <Apply>m__0(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE1A8 Offset: 0xCCE1A8 VA: 0xCCE1A8
	// RVA: 0x108B7EC Offset: 0x108B7EC VA: 0x108B7EC
	private static int <Apply>m__1(BattleServantData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE1B8 Offset: 0xCCE1B8 VA: 0xCCE1B8
	// RVA: 0x108B818 Offset: 0x108B818 VA: 0x108B818
	private static int <Apply>m__2(BattleServantData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC442E4 Offset: 0xC442E4 VA: 0xC442E4
private sealed class TargetFilterLowestHpRate.<Apply>c__AnonStorey0 // TypeDefIndex: 9216
{
	// Fields
	internal Dictionary<int, int> uniqueIdToMaxHpDict; // 0x10

	// Methods

	// RVA: 0x108B7BC Offset: 0x108B7BC VA: 0x108B7BC
	public void .ctor() { }

	// RVA: 0x108B844 Offset: 0x108B844 VA: 0x108B844
	internal bool <>m__0(BattleServantData x) { }

	// RVA: 0x108B914 Offset: 0x108B914 VA: 0x108B914
	internal float <>m__1(BattleServantData x) { }
}

// Namespace: 
public static class TreasureDeviceConditionUtil // TypeDefIndex: 9217
{
	// Methods

	// RVA: 0x188D994 Offset: 0x188D994 VA: 0x188D994
	private static bool HigherCondition(Dictionary<string, object> script, string key, int val) { }

	// RVA: 0x188DA6C Offset: 0x188DA6C VA: 0x188DA6C
	public static bool IsSatisfyEachCondition(BattleServantData servantData, BattleData data) { }

	// RVA: 0x188DA70 Offset: 0x188DA70 VA: 0x188DA70
	public static bool HasEnoughCriticalStar(BattleServantData servantData, BattleData data) { }
}

// Namespace: 
public class MasterLvRewardInfo // TypeDefIndex: 9218
{
	// Fields
	public bool isNew; // 0x10
	public long userSvtId; // 0x18
	public int mstGiftId; // 0x20
	public int type; // 0x24
	public int targetSvtId; // 0x28
	public int objectId; // 0x2C
	public int num; // 0x30
	public int limitCount; // 0x34
	public int lv; // 0x38
	public int rarity; // 0x3C

	// Methods

	// RVA: 0x14A0204 Offset: 0x14A0204 VA: 0x14A0204
	public void .ctor() { }

	// RVA: 0x14A020C Offset: 0x14A020C VA: 0x14A020C
	public GiftEntity getGiftEntity() { }
}

// Namespace: 
public class MultiplyTargetMatrix : MonoBehaviour // TypeDefIndex: 9219
{
	// Fields
	[SerializeField] // RVA: 0xC65CD4 Offset: 0xC65CD4 VA: 0xC65CD4
	private Transform targetObj; // 0x18
	[SerializeField] // RVA: 0xC65CE4 Offset: 0xC65CE4 VA: 0xC65CE4
	private string targetObjPath; // 0x20
	[SerializeField] // RVA: 0xC65CF4 Offset: 0xC65CF4 VA: 0xC65CF4
	private Renderer[] targetRenderers; // 0x28
	[SerializeField] // RVA: 0xC65D04 Offset: 0xC65D04 VA: 0xC65D04
	private XWeaponTrail[] targetXWeaponTrails; // 0x30
	[SerializeField] // RVA: 0xC65D14 Offset: 0xC65D14 VA: 0xC65D14
	private MultiplyTargetMatrix.MaterialType materialType; // 0x38
	[SerializeField] // RVA: 0xC65D24 Offset: 0xC65D24 VA: 0xC65D24
	private string mainMatrix; // 0x40
	[SerializeField] // RVA: 0xC65D34 Offset: 0xC65D34 VA: 0xC65D34
	private string invertMatrix; // 0x48
	private Renderer[] targetXWeaponTrailRenderers; // 0x50

	// Methods

	// RVA: 0x11A3EEC Offset: 0x11A3EEC VA: 0x11A3EEC
	public void .ctor() { }

	// RVA: 0x11A3F54 Offset: 0x11A3F54 VA: 0x11A3F54
	public void Start() { }

	// RVA: 0x11A427C Offset: 0x11A427C VA: 0x11A427C
	public void LateUpdate() { }

	// RVA: 0x11A4028 Offset: 0x11A4028 VA: 0x11A4028
	public void UpdateMatrix() { }

	// RVA: 0x11A46BC Offset: 0x11A46BC VA: 0x11A46BC
	public void SetTargetObj(GameObject obj) { }

	// RVA: 0x11A4280 Offset: 0x11A4280 VA: 0x11A4280
	private void updateMatrix(Renderer[] targetRenderers) { }
}

// Namespace: 
public enum MultiplyTargetMatrix.MaterialType // TypeDefIndex: 9220
{
	// Fields
	public int value__; // 0x0
	public const MultiplyTargetMatrix.MaterialType ShareMaterial = 0;
	public const MultiplyTargetMatrix.MaterialType NormalMaterial = 1;
}

// Namespace: 
public abstract class BattleObserver // TypeDefIndex: 9221
{
	// Fields
	private BattleSubject battleSubject; // 0x10

	// Methods

	// RVA: 0xFC2F10 Offset: 0xFC2F10 VA: 0xFC2F10
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Update(BattleSubject subject);

	// RVA: 0xFC2F18 Offset: 0xFC2F18 VA: 0xFC2F18
	public void Add(BattleSubject subject) { }

	// RVA: 0xFC2F50 Offset: 0xFC2F50 VA: 0xFC2F50
	public void Remove() { }
}

// Namespace: 
public class ChangeBattlePhaseNotify : BattleSubject // TypeDefIndex: 9222
{
	// Fields
	private ServantAnimationOverwriteEntity.PhaseType _phase; // 0x18

	// Properties
	public ServantAnimationOverwriteEntity.PhaseType Phase { get; set; }

	// Methods

	// RVA: 0x1A3FA50 Offset: 0x1A3FA50 VA: 0x1A3FA50
	public void .ctor() { }

	// RVA: 0x1A3FA58 Offset: 0x1A3FA58 VA: 0x1A3FA58
	public void set_Phase(ServantAnimationOverwriteEntity.PhaseType value) { }

	// RVA: 0x1A3FA70 Offset: 0x1A3FA70 VA: 0x1A3FA70
	public ServantAnimationOverwriteEntity.PhaseType get_Phase() { }

	// RVA: 0x1A3FA64 Offset: 0x1A3FA64 VA: 0x1A3FA64
	private void UpdatePhase(ServantAnimationOverwriteEntity.PhaseType phase) { }
}

// Namespace: 
public abstract class ChangeBattlePhaseObserver : BattleObserver // TypeDefIndex: 9223
{
	// Methods

	// RVA: 0x1A3FA78 Offset: 0x1A3FA78 VA: 0x1A3FA78
	protected void .ctor() { }

	// RVA: 0x1A3FA80 Offset: 0x1A3FA80 VA: 0x1A3FA80 Slot: 4
	public override void Update(BattleSubject subject) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void UpdateNotify(ChangeBattlePhaseNotify notify);
}

// Namespace: 
public class ChangeBattlePhaseOverwriteAnimation : ChangeBattlePhaseObserver // TypeDefIndex: 9224
{
	// Fields
	private BattleActorControl actor; // 0x18
	private ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData current; // 0x20
	private List<ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData> overwriteList; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC65D44 Offset: 0xC65D44 VA: 0xC65D44
	private static Func<ServantAnimationOverwriteEntity, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC65D54 Offset: 0xC65D54 VA: 0xC65D54
	private static Func<ServantAnimationOverwriteEntity, int> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1A3FB24 Offset: 0x1A3FB24 VA: 0x1A3FB24
	public void .ctor(BattleActorControl battleActor, ServantAnimationOverwriteEntity[] overwriteArray, ChangeBattlePhaseNotify notify) { }

	// RVA: 0x1A3FBD8 Offset: 0x1A3FBD8 VA: 0x1A3FBD8
	protected void InitOverwriteInfo(ServantAnimationOverwriteEntity[] overwriteEntArray) { }

	// RVA: 0x1A40004 Offset: 0x1A40004 VA: 0x1A40004
	protected ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData FindOverwriteForPhase(ServantAnimationOverwriteEntity.PhaseType phaseType) { }

	// RVA: 0x1A40200 Offset: 0x1A40200 VA: 0x1A40200 Slot: 5
	protected override void UpdateNotify(ChangeBattlePhaseNotify notify) { }

	// RVA: 0x1A4032C Offset: 0x1A4032C VA: 0x1A4032C
	protected bool IsModifiedOverwritedAnim(BattleActorControl bActor, string originalAnim) { }

	// RVA: 0x1A40464 Offset: 0x1A40464 VA: 0x1A40464
	public string Overwrite(BattleActorControl bActor, string baseAnimName) { }

	// RVA: 0x1A405F0 Offset: 0x1A405F0 VA: 0x1A405F0
	public string GetCurrentNormalOverwriteName(string baseAnimName) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE1C8 Offset: 0xCCE1C8 VA: 0xCCE1C8
	// RVA: 0x1A406AC Offset: 0x1A406AC VA: 0x1A406AC
	private static int <InitOverwriteInfo>m__0(ServantAnimationOverwriteEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE1D8 Offset: 0xCCE1D8 VA: 0xCCE1D8
	// RVA: 0x1A406D4 Offset: 0x1A406D4 VA: 0x1A406D4
	private static int <InitOverwriteInfo>m__1(ServantAnimationOverwriteEntity x) { }
}

// Namespace: 
public class ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData // TypeDefIndex: 9225
{
	// Fields
	public ServantAnimationOverwriteEntity.PhaseType phase; // 0x10
	protected Dictionary<string, string> dicOverwriteName; // 0x18

	// Methods

	// RVA: 0x1A400D4 Offset: 0x1A400D4 VA: 0x1A400D4
	public void .ctor() { }

	// RVA: 0x1A40144 Offset: 0x1A40144 VA: 0x1A40144
	public void Add(string targetName, string overwriteName) { }

	// RVA: 0x1A40520 Offset: 0x1A40520 VA: 0x1A40520
	public string Find(string targetName) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC442F4 Offset: 0xC442F4 VA: 0xC442F4
private sealed class ChangeBattlePhaseOverwriteAnimation.<FindOverwriteForPhase>c__AnonStorey0 // TypeDefIndex: 9226
{
	// Fields
	internal ServantAnimationOverwriteEntity.PhaseType phaseType; // 0x10

	// Methods

	// RVA: 0x1A401F8 Offset: 0x1A401F8 VA: 0x1A401F8
	public void .ctor() { }

	// RVA: 0x1A406FC Offset: 0x1A406FC VA: 0x1A406FC
	internal bool <>m__0(ChangeBattlePhaseOverwriteAnimation.AnimationOverwriteData x) { }
}

// Namespace: 
public class BattleSubject // TypeDefIndex: 9227
{
	// Fields
	private List<BattleObserver> observers; // 0x10

	// Methods

	// RVA: 0x157207C Offset: 0x157207C VA: 0x157207C
	public void .ctor() { }

	// RVA: 0x15720EC Offset: 0x15720EC VA: 0x15720EC
	public void Add(BattleObserver observer) { }

	// RVA: 0x1572170 Offset: 0x1572170 VA: 0x1572170
	public void Remove(BattleObserver observer) { }

	// RVA: 0x15721F4 Offset: 0x15721F4 VA: 0x15721F4
	public void Notify() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE1E8 Offset: 0xCCE1E8 VA: 0xCCE1E8
	// RVA: 0x1572294 Offset: 0x1572294 VA: 0x1572294
	private void <Notify>m__0(BattleObserver x) { }
}

// Namespace: 
[DefaultExecutionOrder] // RVA: 0xC2A920 Offset: 0xC2A920 VA: 0xC2A920
public class peRenderTexture : MonoBehaviour // TypeDefIndex: 9228
{
	// Fields
	[SerializeField] // RVA: 0xC65D64 Offset: 0xC65D64 VA: 0xC65D64
	private Camera targetCamera; // 0x18
	[SerializeField] // RVA: 0xC65D74 Offset: 0xC65D74 VA: 0xC65D74
	private string targetCameraPath; // 0x20
	[SerializeField] // RVA: 0xC65D84 Offset: 0xC65D84 VA: 0xC65D84
	private Vector3 cameraOffset; // 0x28
	[SerializeField] // RVA: 0xC65D94 Offset: 0xC65D94 VA: 0xC65D94
	private GameObject targetObject; // 0x38
	[SerializeField] // RVA: 0xC65DA4 Offset: 0xC65DA4 VA: 0xC65DA4
	private string targetObjectPath; // 0x40
	[SerializeField] // RVA: 0xC65DB4 Offset: 0xC65DB4 VA: 0xC65DB4
	private int textureWidth; // 0x48
	[SerializeField] // RVA: 0xC65DC4 Offset: 0xC65DC4 VA: 0xC65DC4
	private int textureHeight; // 0x4C
	[SerializeField] // RVA: 0xC65DD4 Offset: 0xC65DD4 VA: 0xC65DD4
	private int textureDepth; // 0x50
	[SerializeField] // RVA: 0xC65DE4 Offset: 0xC65DE4 VA: 0xC65DE4
	private TextureDimension textureDimension; // 0x54
	[SerializeField] // RVA: 0xC65DF4 Offset: 0xC65DF4 VA: 0xC65DF4
	private RenderTextureFormat textureFormat; // 0x58
	[SerializeField] // RVA: 0xC65E04 Offset: 0xC65E04 VA: 0xC65E04
	private FilterMode textureFilterMode; // 0x5C
	[SerializeField] // RVA: 0xC65E14 Offset: 0xC65E14 VA: 0xC65E14
	private RenderingPath cameraRenderingPath; // 0x60
	[SerializeField] // RVA: 0xC65E24 Offset: 0xC65E24 VA: 0xC65E24
	private Renderer boardrenderer; // 0x68
	[SerializeField] // RVA: 0xC65E34 Offset: 0xC65E34 VA: 0xC65E34
	private List<GameObject> changeLayerObjects; // 0x70
	[SerializeField] // RVA: 0xC65E44 Offset: 0xC65E44 VA: 0xC65E44
	private List<string> changeLayerObjectPaths; // 0x78
	[SerializeField] // RVA: 0xC65E54 Offset: 0xC65E54 VA: 0xC65E54
	private Material changeLayerObjectMaterial; // 0x80
	[SerializeField] // RVA: 0xC65E64 Offset: 0xC65E64 VA: 0xC65E64
	private int changeLayerObjectMaterialTargetLayer; // 0x88
	[SerializeField] // RVA: 0xC65E74 Offset: 0xC65E74 VA: 0xC65E74
	private int changeLayerObjectMaterialRestoreLayer; // 0x8C
	[SerializeField] // RVA: 0xC65E84 Offset: 0xC65E84 VA: 0xC65E84
	private bool changeLayerEnabled; // 0x90
	[SerializeField] // RVA: 0xC65E94 Offset: 0xC65E94 VA: 0xC65E94
	private int changeLayer; // 0x94
	[SerializeField] // RVA: 0xC65EA4 Offset: 0xC65EA4 VA: 0xC65EA4
	private bool changeCullingMaskEnabled; // 0x98
	[SerializeField] // RVA: 0xC65EB4 Offset: 0xC65EB4 VA: 0xC65EB4
	private int changeCullingMask; // 0x9C
	[SerializeField] // RVA: 0xC65EC4 Offset: 0xC65EC4 VA: 0xC65EC4
	private Vector3 targetBoundsCenter; // 0xA0
	[SerializeField] // RVA: 0xC65ED4 Offset: 0xC65ED4 VA: 0xC65ED4
	private Vector3 targetBoundsLT; // 0xAC
	[SerializeField] // RVA: 0xC65EE4 Offset: 0xC65EE4 VA: 0xC65EE4
	private Vector3 targetBoundsRB; // 0xB8
	[SerializeField] // RVA: 0xC65EF4 Offset: 0xC65EF4 VA: 0xC65EF4
	private float targetBoundsOffsetX; // 0xC4
	[SerializeField] // RVA: 0xC65F04 Offset: 0xC65F04 VA: 0xC65F04
	private float targetBoundsOffsetY; // 0xC8
	[SerializeField] // RVA: 0xC65F14 Offset: 0xC65F14 VA: 0xC65F14
	private int boundsUpdateCount; // 0xCC
	[SerializeField] // RVA: 0xC65F24 Offset: 0xC65F24 VA: 0xC65F24
	private string MainCamVPMat; // 0xD0
	[SerializeField] // RVA: 0xC65F34 Offset: 0xC65F34 VA: 0xC65F34
	private string ParallelViewMat; // 0xD8
	[SerializeField] // RVA: 0xC65F44 Offset: 0xC65F44 VA: 0xC65F44
	private string ParallelProjectionMat; // 0xE0
	[SerializeField] // RVA: 0xC65F54 Offset: 0xC65F54 VA: 0xC65F54
	private int _RBindex; // 0xE8
	[SerializeField] // RVA: 0xC65F64 Offset: 0xC65F64 VA: 0xC65F64
	private int _LTindex; // 0xEC
	private Camera rasterCamera; // 0xF0
	private RenderTexture renderTexture; // 0xF8
	private List<peRenderTexture.ChangeLayerObject> targetChangeLayerObjects; // 0x100
	private Matrix4x4 MainCamVP; // 0x108
	private Matrix4x4 orthoViewMat; // 0x148
	private Matrix4x4 orthoProjectionMat; // 0x188
	private int _boundsUpdateCount; // 0x1C8
	private bool isInitialized; // 0x1CC

	// Methods

	// RVA: 0x2B185B4 Offset: 0x2B185B4 VA: 0x2B185B4
	public void .ctor() { }

	// RVA: 0x2B18654 Offset: 0x2B18654 VA: 0x2B18654
	private void OnEnable() { }

	// RVA: 0x2B1887C Offset: 0x2B1887C VA: 0x2B1887C
	private void OnDisable() { }

	// RVA: 0x2B18880 Offset: 0x2B18880 VA: 0x2B18880
	private void Update() { }

	// RVA: 0x2B19180 Offset: 0x2B19180 VA: 0x2B19180
	private void LateUpdate() { }

	// RVA: 0x2B18884 Offset: 0x2B18884 VA: 0x2B18884
	private void initialize() { }

	// RVA: 0x2B18658 Offset: 0x2B18658 VA: 0x2B18658
	private void finalize() { }

	// RVA: 0x2B1A4D8 Offset: 0x2B1A4D8 VA: 0x2B1A4D8
	private void registChangeLayerObjects(GameObject gameObject) { }

	// RVA: 0x2B1958C Offset: 0x2B1958C VA: 0x2B1958C
	private void updateLayer() { }

	// RVA: 0x2B19824 Offset: 0x2B19824 VA: 0x2B19824
	private void updateBounds() { }

	// RVA: 0x2B1A04C Offset: 0x2B1A04C VA: 0x2B1A04C
	private void updateTransform() { }

	// RVA: 0x2B1AF20 Offset: 0x2B1AF20 VA: 0x2B1AF20
	private Bounds CalcRendererBounds(GameObject obj) { }

	// RVA: 0x2B1B368 Offset: 0x2B1B368 VA: 0x2B1B368
	private void CalcRendererBounds(GameObject obj, ref Bounds bounds) { }

	// RVA: 0x2B1B7BC Offset: 0x2B1B7BC VA: 0x2B1B7BC
	private Matrix4x4 orthogonalMatrix(float left, float right, float bottom, float top) { }

	// RVA: 0x2B1AF60 Offset: 0x2B1AF60 VA: 0x2B1AF60
	private void CreatePVMatrix(Vector3 in_center, Vector3 in_LeftTop, Vector3 in_RightBottom) { }
}

// Namespace: 
private class peRenderTexture.ChangeLayerObject // TypeDefIndex: 9229
{
	// Fields
	public GameObject gameObject; // 0x10
	public Renderer renderer; // 0x18
	private Material orgMaterial; // 0x20
	private Material changeMaterial; // 0x28
	private int prevLayer; // 0x30

	// Properties
	public int layer { get; }

	// Methods

	// RVA: 0x2B1AA54 Offset: 0x2B1AA54 VA: 0x2B1AA54
	public void .ctor(GameObject gameObject) { }

	// RVA: 0x2B1AC44 Offset: 0x2B1AC44 VA: 0x2B1AC44
	public int get_layer() { }

	// RVA: 0x2B1BA18 Offset: 0x2B1BA18 VA: 0x2B1BA18
	public void Initialize() { }

	// RVA: 0x2B1A94C Offset: 0x2B1A94C VA: 0x2B1A94C
	public void Finalize() { }

	// RVA: 0x2B1AA84 Offset: 0x2B1AA84 VA: 0x2B1AA84
	public void ChangeLayer(int layer) { }

	// RVA: 0x2B1AB78 Offset: 0x2B1AB78 VA: 0x2B1AB78
	public bool SyncLayer() { }

	// RVA: 0x2B1ACE4 Offset: 0x2B1ACE4 VA: 0x2B1ACE4
	public void ChangeMaterial(Material material) { }

	// RVA: 0x2B1AE7C Offset: 0x2B1AE7C VA: 0x2B1AE7C
	public void RestoreMaterial() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44304 Offset: 0xC44304 VA: 0xC44304
private sealed class peRenderTexture.<registChangeLayerObjects>c__AnonStorey0 // TypeDefIndex: 9230
{
	// Fields
	internal GameObject gameObject; // 0x10

	// Methods

	// RVA: 0x2B1AA4C Offset: 0x2B1AA4C VA: 0x2B1AA4C
	public void .ctor() { }

	// RVA: 0x2B1B98C Offset: 0x2B1B98C VA: 0x2B1B98C
	internal bool <>m__0(peRenderTexture.ChangeLayerObject n) { }
}

// Namespace: 
public class AlphaMaskTextureManager : MonoBehaviour // TypeDefIndex: 9231
{
	// Fields
	[SerializeField] // RVA: 0xC65F74 Offset: 0xC65F74 VA: 0xC65F74
	private UIAlphaMaskTexture prefab; // 0x18

	// Methods

	// RVA: 0x10752AC Offset: 0x10752AC VA: 0x10752AC
	public void .ctor() { }

	// RVA: 0x10752B4 Offset: 0x10752B4 VA: 0x10752B4
	public UIAlphaMaskTexture Create(GameObject root, string loadName, Action callback) { }
}

// Namespace: 
public class AutoBattleButtonComponent : MonoBehaviour // TypeDefIndex: 9232
{
	// Fields
	public UISprite buttonSprite; // 0x18
	public Collider overPanelCollider; // 0x20
	public BattleLogic logic; // 0x28

	// Methods

	// RVA: 0xF55C8C Offset: 0xF55C8C VA: 0xF55C8C
	public void .ctor() { }

	// RVA: 0xF55C94 Offset: 0xF55C94 VA: 0xF55C94
	public void OnClick() { }

	// RVA: 0xF55C98 Offset: 0xF55C98 VA: 0xF55C98
	public void InitButton() { }
}

// Namespace: 
public class TranslucentActorVisualInfo // TypeDefIndex: 9233
{
	// Fields
	private const float DefaultTranslucentAlpha = 0.2;
	private const float OpaqueAlpha = 1;
	[CompilerGeneratedAttribute] // RVA: 0xC65F84 Offset: 0xC65F84 VA: 0xC65F84
	[DebuggerBrowsableAttribute] // RVA: 0xC65F84 Offset: 0xC65F84 VA: 0xC65F84
	private bool <IsDrawShadow>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC65FC0 Offset: 0xC65FC0 VA: 0xC65FC0
	[DebuggerBrowsableAttribute] // RVA: 0xC65FC0 Offset: 0xC65FC0 VA: 0xC65FC0
	private float <Alpha>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC65FFC Offset: 0xC65FFC VA: 0xC65FFC
	[DebuggerBrowsableAttribute] // RVA: 0xC65FFC Offset: 0xC65FFC VA: 0xC65FFC
	private bool <IsActive>k__BackingField; // 0x18

	// Properties
	public bool IsDrawShadow { get; set; }
	public float Alpha { get; set; }
	public bool IsActive { get; set; }

	// Methods

	// RVA: 0x1888754 Offset: 0x1888754 VA: 0x1888754
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE1F8 Offset: 0xCCE1F8 VA: 0xCCE1F8
	// RVA: 0x188875C Offset: 0x188875C VA: 0x188875C
	public bool get_IsDrawShadow() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE208 Offset: 0xCCE208 VA: 0xCCE208
	// RVA: 0x1888764 Offset: 0x1888764 VA: 0x1888764
	private void set_IsDrawShadow(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE218 Offset: 0xCCE218 VA: 0xCCE218
	// RVA: 0x1888770 Offset: 0x1888770 VA: 0x1888770
	public float get_Alpha() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE228 Offset: 0xCCE228 VA: 0xCCE228
	// RVA: 0x1888778 Offset: 0x1888778 VA: 0x1888778
	private void set_Alpha(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE238 Offset: 0xCCE238 VA: 0xCCE238
	// RVA: 0x1888780 Offset: 0x1888780 VA: 0x1888780
	public bool get_IsActive() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE248 Offset: 0xCCE248 VA: 0xCCE248
	// RVA: 0x1888788 Offset: 0x1888788 VA: 0x1888788
	private void set_IsActive(bool value) { }

	// RVA: 0x1888794 Offset: 0x1888794 VA: 0x1888794
	public void UpdateByBuffs(BattleBuffData.BuffData[] buffDataArray) { }

	// RVA: 0x18888E8 Offset: 0x18888E8 VA: 0x18888E8
	public void ResetProperties() { }
}

// Namespace: 
public class BattleActorControl : BaseMonoBehaviour // TypeDefIndex: 9234
{
	// Fields
	public GameObject actorObject; // 0x18
	public BattleFBXComponent fbxcomponent; // 0x20
	public PlayMakerFSM[] motionFSM; // 0x28
	private Transform shadowObj; // 0x30
	private GameObject specialShadowObj; // 0x38
	private Transform nodeDamage; // 0x40
	private Transform nodeText; // 0x48
	public const string BUFF_EFFECT_NODE_NAME = "en_buff01";
	[CompilerGeneratedAttribute] // RVA: 0xC66038 Offset: 0xC66038 VA: 0xC66038
	[DebuggerBrowsableAttribute] // RVA: 0xC66038 Offset: 0xC66038 VA: 0xC66038
	private string <BuffEffectNodeName>k__BackingField; // 0x50
	private MaterialPropertyBlock mpb; // 0x58
	private Texture2D currentShadowTexure; // 0x60
	private Color currentShadowColor; // 0x68
	private static Dictionary<int, Vector3[]> ShadowTransform; // 0x0
	private static Dictionary<int, Vector3[]> specialShadowTransform; // 0x8
	public BattlePerformance performance; // 0x78
	private Vector3 headupVec; // 0x80
	private GameObject checkScaleNode; // 0x90
	private ParticleDisconnector particleDisconnectorObj; // 0x98
	private Vector3 criteriaPos; // 0xA0
	private GameObject targetObject; // 0xB0
	private GameObject myStage; // 0xB8
	private GameObject enemyStage; // 0xC0
	private string endmotionevent; // 0xC8
	private GameObject endmotionCallObject; // 0xD0
	private string endmotionCallMethod; // 0xD8
	private string actorside; // 0xE0
	private BattleActorControl.DIR dir; // 0xE8
	private GameObject shadowEffectObject; // 0xF0
	private Dictionary<int, GameObject> auraList; // 0xF8
	[CompilerGeneratedAttribute] // RVA: 0xC66074 Offset: 0xC66074 VA: 0xC66074
	[DebuggerBrowsableAttribute] // RVA: 0xC66074 Offset: 0xC66074 VA: 0xC66074
	private int <currentPriority>k__BackingField; // 0x100
	private float backupFov; // 0x104
	private Action noblePhantasmCallback; // 0x108
	private BattleActionData.ShiftServant myShiftData; // 0x110
	public float actorScale; // 0x118
	private static readonly float defaultHeight; // 0x10
	private Voice.BATTLE prevSkillVoiceType; // 0x11C
	private BattleLogData battleLog; // 0x120
	private const float deadEffectDefaultWaitTime = 1.3;
	private const float deadEffectWaitTimeForShadowServant = 0.99999994;
	private Dictionary<int, GameObject> buffLoopEffectDict; // 0x128
	private List<int> reservedEffectBuffEffectIdList; // 0x130
	private ChangeBattlePhaseOverwriteAnimation overwriteAnim; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xC660B0 Offset: 0xC660B0 VA: 0xC660B0
	[DebuggerBrowsableAttribute] // RVA: 0xC660B0 Offset: 0xC660B0 VA: 0xC660B0
	private string <PlayedOriginalAnimName>k__BackingField; // 0x140
	public bool isFirstSaveBeforePlayAnim; // 0x148
	public bool isPlayingNoblePhantasm; // 0x149
	private TranslucentActorVisualInfo translucentActorVisualInfo; // 0x150
	private List<BattleActorControl.ExtraLoadedVoiceArgs> extraLoadedVoiceArgsList; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xC660EC Offset: 0xC660EC VA: 0xC660EC
	[DebuggerBrowsableAttribute] // RVA: 0xC660EC Offset: 0xC660EC VA: 0xC660EC
	private List<int> <delayEndSequenceIdListFromMotion>k__BackingField; // 0x160
	private BattleActionData actiondata; // 0x168
	private Hashtable EventList; // 0x170
	private Hashtable CompleteList; // 0x178
	private float scale; // 0x180
	private BattleServantData battleSvtData; // 0x188
	public int uniqueID; // 0x190
	protected List<SkinnedMeshRenderer> rendererArrayList; // 0x198
	private bool isEnemy; // 0x1A0
	public int actindex; // 0x1A4
	private bool stepFlg; // 0x1A8
	[CompilerGeneratedAttribute] // RVA: 0xC66128 Offset: 0xC66128 VA: 0xC66128
	[DebuggerBrowsableAttribute] // RVA: 0xC66128 Offset: 0xC66128 VA: 0xC66128
	private bool <IsStepInBattle>k__BackingField; // 0x1A9
	private BattleActorControl.ActorMotionActiveCheck _checkMotion; // 0x1B0
	private float animetimescale; // 0x1B8
	private float resumetimescale; // 0x1BC
	protected float ShakeTime; // 0x1C0
	protected float ShakeTargetTime; // 0x1C4
	protected Vector3 ShakeRange; // 0x1C8
	protected bool Shaking; // 0x1D4
	[CompilerGeneratedAttribute] // RVA: 0xC66164 Offset: 0xC66164 VA: 0xC66164
	private static Predicate<SkinnedMeshRenderer> <>f__am$cache0; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC66174 Offset: 0xC66174 VA: 0xC66174
	private static Func<BattleActionData.MoveToSubMember, bool> <>f__am$cache1; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC66184 Offset: 0xC66184 VA: 0xC66184
	private static Func<KeyValuePair<int, GameObject>, bool> <>f__am$cache2; // 0x28

	// Properties
	public Transform ShadowObj { get; }
	public GameObject SpecialShadowObj { get; }
	public Transform NodeDamage { get; }
	public Transform NodeText { get; }
	public string BuffEffectNodeName { get; set; }
	public BaseMotionSkip MotionSkip { get; }
	public int currentPriority { get; set; }
	public BattleActionData ActionData { get; }
	public Voice.BATTLE PrevSkillVoiceType { get; set; }
	public string PlayedOriginalAnimName { get; set; }
	public List<int> delayEndSequenceIdListFromMotion { get; set; }
	public BattleServantData BattleSvtData { get; }
	public int Level { get; }
	public int LimitImageIndex { get; }
	public bool IsEnemy { get; }
	public bool IsStepInBattle { get; set; }
	public BattleActorControl.ActorMotionActiveCheck CheckMotion { get; }

	// Methods

	// RVA: 0x198B1EC Offset: 0x198B1EC VA: 0x198B1EC
	public void .ctor() { }

	// RVA: 0x198B350 Offset: 0x198B350 VA: 0x198B350
	public Transform get_ShadowObj() { }

	// RVA: 0x198B358 Offset: 0x198B358 VA: 0x198B358
	public GameObject get_SpecialShadowObj() { }

	// RVA: 0x198B360 Offset: 0x198B360 VA: 0x198B360
	public Transform get_NodeDamage() { }

	// RVA: 0x198B368 Offset: 0x198B368 VA: 0x198B368
	public Transform get_NodeText() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE258 Offset: 0xCCE258 VA: 0xCCE258
	// RVA: 0x198B370 Offset: 0x198B370 VA: 0x198B370
	private void set_BuffEffectNodeName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE268 Offset: 0xCCE268 VA: 0xCCE268
	// RVA: 0x198B378 Offset: 0x198B378 VA: 0x198B378
	public string get_BuffEffectNodeName() { }

	// RVA: 0x198B380 Offset: 0x198B380 VA: 0x198B380
	public BaseMotionSkip get_MotionSkip() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE278 Offset: 0xCCE278 VA: 0xCCE278
	// RVA: 0x198B3B0 Offset: 0x198B3B0 VA: 0x198B3B0
	public int get_currentPriority() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE288 Offset: 0xCCE288 VA: 0xCCE288
	// RVA: 0x198B3B8 Offset: 0x198B3B8 VA: 0x198B3B8
	private void set_currentPriority(int value) { }

	// RVA: 0x198B3C0 Offset: 0x198B3C0 VA: 0x198B3C0
	public BattleActionData get_ActionData() { }

	// RVA: 0x198B3C8 Offset: 0x198B3C8 VA: 0x198B3C8
	public Voice.BATTLE get_PrevSkillVoiceType() { }

	// RVA: 0x198B3D0 Offset: 0x198B3D0 VA: 0x198B3D0
	public void set_PrevSkillVoiceType(Voice.BATTLE value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE298 Offset: 0xCCE298 VA: 0xCCE298
	// RVA: 0x198B3D8 Offset: 0x198B3D8 VA: 0x198B3D8
	private void set_PlayedOriginalAnimName(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE2A8 Offset: 0xCCE2A8 VA: 0xCCE2A8
	// RVA: 0x198B3E0 Offset: 0x198B3E0 VA: 0x198B3E0
	public string get_PlayedOriginalAnimName() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE2B8 Offset: 0xCCE2B8 VA: 0xCCE2B8
	// RVA: 0x198B3E8 Offset: 0x198B3E8 VA: 0x198B3E8
	public List<int> get_delayEndSequenceIdListFromMotion() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE2C8 Offset: 0xCCE2C8 VA: 0xCCE2C8
	// RVA: 0x198B3F0 Offset: 0x198B3F0 VA: 0x198B3F0
	private void set_delayEndSequenceIdListFromMotion(List<int> value) { }

	// RVA: 0x198B3F8 Offset: 0x198B3F8 VA: 0x198B3F8
	private void printLog(string str) { }

	// RVA: 0x198B3FC Offset: 0x198B3FC VA: 0x198B3FC
	public string[] getlog() { }

	// RVA: 0x198B478 Offset: 0x198B478 VA: 0x198B478
	public void Start() { }

	// RVA: 0x198B6A4 Offset: 0x198B6A4 VA: 0x198B6A4
	public void OnDestroy() { }

	// RVA: 0x198BACC Offset: 0x198BACC VA: 0x198BACC
	public void Awake() { }

	// RVA: 0x198BB2C Offset: 0x198BB2C VA: 0x198BB2C
	public BattleServantData get_BattleSvtData() { }

	// RVA: 0x198BB34 Offset: 0x198BB34 VA: 0x198BB34
	public void loadEvents() { }

	// RVA: 0x198BB48 Offset: 0x198BB48 VA: 0x198BB48
	public void setID(int id) { }

	// RVA: 0x198BB50 Offset: 0x198BB50 VA: 0x198BB50
	public bool checkID(int id) { }

	// RVA: 0x198BB60 Offset: 0x198BB60 VA: 0x198BB60
	public bool checkScriptValue(string key, int value) { }

	// RVA: 0x198BBA8 Offset: 0x198BBA8 VA: 0x198BBA8
	public int getScriptValue(string key) { }

	// RVA: 0x198BBE0 Offset: 0x198BBE0 VA: 0x198BBE0
	public int getServantId() { }

	// RVA: 0x198BC10 Offset: 0x198BC10 VA: 0x198BC10
	public int getOverwriteSvtVoiceId() { }

	// RVA: 0x198BC3C Offset: 0x198BC3C VA: 0x198BC3C
	public int getActorSvtId() { }

	// RVA: 0x198BC6C Offset: 0x198BC6C VA: 0x198BC6C
	public string getStrParam() { }

	// RVA: 0x198BC9C Offset: 0x198BC9C VA: 0x198BC9C
	public int getLimitCount() { }

	// RVA: 0x198BCCC Offset: 0x198BCCC VA: 0x198BCCC
	public int getOriginLimitCount() { }

	// RVA: 0x198BCFC Offset: 0x198BCFC VA: 0x198BCFC
	public int getWeaponGroup(bool isEffect = False) { }

	// RVA: 0x198BD34 Offset: 0x198BD34 VA: 0x198BD34
	public int getEffectFolder() { }

	// RVA: 0x198BD64 Offset: 0x198BD64 VA: 0x198BD64
	public int getWeaponScale() { }

	// RVA: 0x198BD94 Offset: 0x198BD94 VA: 0x198BD94
	public Color getWeaponColor() { }

	// RVA: 0x198BDC4 Offset: 0x198BDC4 VA: 0x198BDC4
	public int get_Level() { }

	// RVA: 0x198BDF0 Offset: 0x198BDF0 VA: 0x198BDF0
	public int get_LimitImageIndex() { }

	// RVA: 0x198BE7C Offset: 0x198BE7C VA: 0x198BE7C
	public int getNobleChainCount() { }

	// RVA: 0x198BE94 Offset: 0x198BE94 VA: 0x198BE94
	public int getWaveCount() { }

	// RVA: 0x198BF38 Offset: 0x198BF38 VA: 0x198BF38
	public GameObject getActorEffect(string name) { }

	// RVA: 0x198C004 Offset: 0x198C004 VA: 0x198C004
	public GameObject getActorEffectFromActor(string name) { }

	// RVA: 0x198C0EC Offset: 0x198C0EC VA: 0x198C0EC
	public void setTypePlayer() { }

	// RVA: 0x198C0F4 Offset: 0x198C0F4 VA: 0x198C0F4
	public void setTypeEnemy() { }

	// RVA: 0x198C100 Offset: 0x198C100 VA: 0x198C100
	public bool get_IsEnemy() { }

	// RVA: 0x198C108 Offset: 0x198C108 VA: 0x198C108
	public void setServantData(BattleServantData svtdata) { }

	// RVA: 0x198D834 Offset: 0x198D834 VA: 0x198D834
	public void setAddAura(BattleServantData svtdata) { }

	// RVA: 0x198D10C Offset: 0x198D10C VA: 0x198D10C
	public void UpdateShadow() { }

	// RVA: 0x198D69C Offset: 0x198D69C VA: 0x198D69C
	public GameObject getHeadUpObject() { }

	// RVA: 0x198D6A4 Offset: 0x198D6A4 VA: 0x198D6A4
	public Vector3 getHeadUpY() { }

	// RVA: 0x19900D4 Offset: 0x19900D4 VA: 0x19900D4
	public Vector3 getBaseScale() { }

	// RVA: 0x1990144 Offset: 0x1990144 VA: 0x1990144
	public void setPerformance(BattlePerformance perf) { }

	// RVA: 0x199014C Offset: 0x199014C VA: 0x199014C
	public void setCamera(Camera camera) { }

	// RVA: 0x19901DC Offset: 0x19901DC VA: 0x19901DC
	public void setMotionlist(string side, GameObject camera, GameObject camerafsm) { }

	// RVA: 0x199125C Offset: 0x199125C VA: 0x199125C
	public void setReloadWeaponMotion(bool flg) { }

	// RVA: 0x1991FA0 Offset: 0x1991FA0 VA: 0x1991FA0
	public void setMotionListForDemo(string side, GameObject camera, GameObject camerafsm, GameObject commonMotionPrefab) { }

	// RVA: 0x1991000 Offset: 0x1991000 VA: 0x1991000
	private void setLimitedPeriod() { }

	// RVA: 0x1992B4C Offset: 0x1992B4C VA: 0x1992B4C
	public void setActionData(BattleActionData actiondata) { }

	// RVA: 0x1992F64 Offset: 0x1992F64 VA: 0x1992F64
	public void setTargetObject(GameObject obj) { }

	// RVA: 0x19930E8 Offset: 0x19930E8 VA: 0x19930E8
	public void setSummonMasterObject(GameObject obj) { }

	// RVA: 0x1993368 Offset: 0x1993368 VA: 0x1993368
	public void resetSummonEndFlag() { }

	// RVA: 0x199349C Offset: 0x199349C VA: 0x199349C
	public bool isSummonEndFlag() { }

	// RVA: 0x19935DC Offset: 0x19935DC VA: 0x19935DC
	public void sendEventFSM(Hashtable table) { }
