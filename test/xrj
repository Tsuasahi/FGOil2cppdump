
	// RVA: 0x1EA1208 Offset: 0x1EA1208 VA: 0x1EA1208
	public bool checkVoice(string voiceTypeId, bool isNp = False) { }

	// RVA: 0x1EA1308 Offset: 0x1EA1308 VA: 0x1EA1308
	public void playVoice(Voice.BATTLE type, float volume, Action callback) { }

	// RVA: 0x1EA13A0 Offset: 0x1EA13A0 VA: 0x1EA13A0
	public void playVoice(string voiceTypeId, float volume, Action callback) { }

	// RVA: 0x1EA1560 Offset: 0x1EA1560 VA: 0x1EA1560
	public void playVoiceNp(Voice.BATTLE type, float volume, Action callback) { }

	// RVA: 0x1EA15F8 Offset: 0x1EA15F8 VA: 0x1EA15F8
	public void playVoiceNp(string voiceTypeId, float volume, Action callback) { }

	// RVA: 0x1EA16F0 Offset: 0x1EA16F0 VA: 0x1EA16F0
	public string GetPrefixVoiceId(string voiceId) { }

	// RVA: 0x1EA17D8 Offset: 0x1EA17D8 VA: 0x1EA17D8
	public SePlayer playVoiceSe(string fileName, float volume) { }

	// RVA: 0x1EA18D4 Offset: 0x1EA18D4 VA: 0x1EA18D4
	public void setNpDamageVoice(bool flg) { }

	// RVA: 0x1EA1A2C Offset: 0x1EA1A2C VA: 0x1EA1A2C
	private void OnEvent(string name) { }

	// RVA: 0x1EA1B94 Offset: 0x1EA1B94 VA: 0x1EA1B94
	private void Complete(string name) { }

	// RVA: 0x1EA1D48 Offset: 0x1EA1D48 VA: 0x1EA1D48
	private void setAnimationEvent(string name, BattleActorControl.EventClass ec) { }

	// RVA: 0x1EA1DF0 Offset: 0x1EA1DF0 VA: 0x1EA1DF0
	private void setAnimationComplete(string name, BattleActorControl.EventClass ec) { }

	// RVA: 0x1EA1E98 Offset: 0x1EA1E98 VA: 0x1EA1E98
	public void endMotion(string call) { }

	// RVA: 0x1EA1EA0 Offset: 0x1EA1EA0 VA: 0x1EA1EA0
	public void playCallAnimation(string animname, string endevent, string starttag) { }

	// RVA: 0x1EA23CC Offset: 0x1EA23CC VA: 0x1EA23CC
	public bool checkAnimation(string animname) { }

	// RVA: 0x1EA2404 Offset: 0x1EA2404 VA: 0x1EA2404
	public void playAnimation(Hashtable table) { }

	// RVA: 0x1EA20BC Offset: 0x1EA20BC VA: 0x1EA20BC
	public void playAnimation(string animname) { }

	// RVA: 0x1EA1FF8 Offset: 0x1EA1FF8 VA: 0x1EA1FF8
	public void playAnimationFtag(string animname, string tag) { }

	// RVA: 0x1EA2610 Offset: 0x1EA2610 VA: 0x1EA2610
	public void setTimeScale(float time) { }

	// RVA: 0x1EA2654 Offset: 0x1EA2654 VA: 0x1EA2654
	public void stopAnimation() { }

	// RVA: 0x1EA2690 Offset: 0x1EA2690 VA: 0x1EA2690
	public void resumeAnimation() { }

	// RVA: 0x1EA26D4 Offset: 0x1EA26D4 VA: 0x1EA26D4
	public void setMyStage(GameObject obj) { }

	// RVA: 0x1EA26DC Offset: 0x1EA26DC VA: 0x1EA26DC
	public void setEnemyStage(GameObject obj) { }

	// RVA: 0x1EA26E4 Offset: 0x1EA26E4 VA: 0x1EA26E4
	public void startDropItem(bool isSlient = False) { }

	// RVA: 0x1EA2A20 Offset: 0x1EA2A20 VA: 0x1EA2A20
	public void startDeadEffect() { }

	// RVA: 0x1EA3188 Offset: 0x1EA3188 VA: 0x1EA3188
	public void startWaitDeadEffect() { }

	// RVA: 0x1EA3098 Offset: 0x1EA3098 VA: 0x1EA3098
	public float getHeight() { }

	// RVA: 0x1EA367C Offset: 0x1EA367C VA: 0x1EA367C
	public void OnFinishDead() { }

	// RVA: 0x1EA3728 Offset: 0x1EA3728 VA: 0x1EA3728
	public void updateDeadEffect(float val) { }

	// RVA: 0x1EA3C40 Offset: 0x1EA3C40 VA: 0x1EA3C40
	public void motion_Jump(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1EA3E18 Offset: 0x1EA3E18 VA: 0x1EA3E18
	public void motion_StepWait(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1EA4088 Offset: 0x1EA4088 VA: 0x1EA4088
	public void motion_Step(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1EA4260 Offset: 0x1EA4260 VA: 0x1EA4260
	public void motion_BackStep(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1EA4438 Offset: 0x1EA4438 VA: 0x1EA4438
	public void motion_TreasureArms(GameObject target, float hight, float time, BattleActorControl.POS pos, string pmevent, GameObject sendEventCallObject, string sendEventCallMethod) { }

	// RVA: 0x1EA4610 Offset: 0x1EA4610 VA: 0x1EA4610
	public void motion_Cancel() { }

	// RVA: 0x1EA468C Offset: 0x1EA468C VA: 0x1EA468C
	public void moveStep(Hashtable table) { }

	// RVA: 0x1EA47C4 Offset: 0x1EA47C4 VA: 0x1EA47C4
	public void moveStep(float hight, float time, BattleActorControl.POS pos) { }

	// RVA: 0x1EA4DA4 Offset: 0x1EA4DA4 VA: 0x1EA4DA4
	public void moveJump(Hashtable table) { }

	// RVA: 0x1EA4EDC Offset: 0x1EA4EDC VA: 0x1EA4EDC
	public void moveJump(float hight, float time, BattleActorControl.POS pos) { }

	// RVA: 0x1EA480C Offset: 0x1EA480C VA: 0x1EA480C
	public void movePos(BattleActorControl.POS pos, float time, string endcall, GameObject callbackObject, string callbackEvent) { }

	// RVA: 0x1EA4F24 Offset: 0x1EA4F24 VA: 0x1EA4F24
	public void moveUp(Hashtable table) { }

	// RVA: 0x1EA4AE0 Offset: 0x1EA4AE0 VA: 0x1EA4AE0
	public void moveUp(float hight, float time) { }

	// RVA: 0x1EA5008 Offset: 0x1EA5008 VA: 0x1EA5008
	public void moveDown(float time) { }

	// RVA: 0x1EA51E8 Offset: 0x1EA51E8 VA: 0x1EA51E8
	public void startNoblePhantasm(Action callback, bool flg) { }

	// RVA: 0x1EA5818 Offset: 0x1EA5818 VA: 0x1EA5818
	public void startBattleUIFade(float time, float targetAlpha) { }

	// RVA: 0x1EA5860 Offset: 0x1EA5860 VA: 0x1EA5860
	private void OnNoblePhantasmLoadComplete(GameObject obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B8EC Offset: 0xD3B8EC VA: 0xD3B8EC
	// RVA: 0x1EA5BBC Offset: 0x1EA5BBC VA: 0x1EA5BBC
	private IEnumerator WaitToNoblePhantasmPlay() { }

	// RVA: 0x1EA5C34 Offset: 0x1EA5C34 VA: 0x1EA5C34
	private void OnNoblePhantasmPlayComplete(USSequencer seq) { }

	// RVA: 0x1EA6370 Offset: 0x1EA6370 VA: 0x1EA6370
	private void ChangeRotationEnemy(bool enable) { }

	// RVA: 0x1EA6560 Offset: 0x1EA6560 VA: 0x1EA6560
	private void ChangeAnimationCurveEnemy(bool enable) { }

	// RVA: 0x1EA6734 Offset: 0x1EA6734 VA: 0x1EA6734
	public GameObject GetShadowSvtEffect() { }

	// RVA: 0x1E97DDC Offset: 0x1E97DDC VA: 0x1E97DDC
	public void SetDispServant(bool isShadow, bool isChoco) { }

	// RVA: 0x1E98C60 Offset: 0x1E98C60 VA: 0x1E98C60
	public void ChangeShadowTexture(int shadowId) { }

	// RVA: 0x1EA673C Offset: 0x1EA673C VA: 0x1EA673C
	public void ChangeShadowColor(Color col, float duration = 0.3) { }

	// RVA: 0x1E99140 Offset: 0x1E99140 VA: 0x1E99140
	public void changeSpecialShadow(int shadowEffectId) { }

	// RVA: 0x1EA6B50 Offset: 0x1EA6B50 VA: 0x1EA6B50
	public void changeShadowType(bool isNormal) { }

	// RVA: 0x1E98F44 Offset: 0x1E98F44 VA: 0x1E98F44
	public void SetShadowColor(Color col) { }

	// RVA: 0x1E994A4 Offset: 0x1E994A4 VA: 0x1E994A4
	public void SetShadowSize(int btlSize) { }

	// RVA: 0x1E97D9C Offset: 0x1E97D9C VA: 0x1E97D9C
	public bool isShadowServant() { }

	// RVA: 0x1E97DBC Offset: 0x1E97DBC VA: 0x1E97DBC
	public bool isChocoServant() { }

	// RVA: 0x1EA6C74 Offset: 0x1EA6C74 VA: 0x1EA6C74
	private void SetMaterialWhite() { }

	// RVA: 0x1EA6E5C Offset: 0x1EA6E5C VA: 0x1EA6E5C
	public void SetMaterialColor(Color fadeColour, float alpha) { }

	// RVA: 0x1EA715C Offset: 0x1EA715C VA: 0x1EA715C
	public Color GetMainColor() { }

	// RVA: 0x1EA722C Offset: 0x1EA722C VA: 0x1EA722C
	public Color GetAddColor() { }

	// RVA: 0x1EA72FC Offset: 0x1EA72FC VA: 0x1EA72FC
	public void SetMainColor(Color col) { }

	// RVA: 0x1EA754C Offset: 0x1EA754C VA: 0x1EA754C
	public void SetAddColor(Color col) { }

	// RVA: 0x1EA779C Offset: 0x1EA779C VA: 0x1EA779C
	private void SetActorAlpha(float alpha) { }

	// RVA: -1 Offset: -1
	private void UpdateMaterialsOnRenderders<T>(IEnumerable<T> rendererEnumerable, Action<Material> updateFunc) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CF4F4 Offset: 0x21CF4F4 VA: 0x21CF4F4
	|-BattleActorControl.UpdateMaterialsOnRenderders<object>
	|-BattleActorControl.UpdateMaterialsOnRenderders<SkinnedMeshRenderer>
	*/

	// RVA: 0x1EA7874 Offset: 0x1EA7874 VA: 0x1EA7874
	public void RemoveChildNodesRenderer(GameObject obj) { }

	// RVA: 0x1EA7990 Offset: 0x1EA7990 VA: 0x1EA7990
	public void AddChildNodesRenderer(GameObject obj) { }

	// RVA: 0x1EA7AAC Offset: 0x1EA7AAC VA: 0x1EA7AAC
	public bool isMonsterServant() { }

	// RVA: 0x1EA7AE0 Offset: 0x1EA7AE0 VA: 0x1EA7AE0
	public bool isNoVoice() { }

	// RVA: 0x1EA7B0C Offset: 0x1EA7B0C VA: 0x1EA7B0C
	public void ShakePosition(Vector3 range, float tm) { }

	// RVA: 0x1EA7B2C Offset: 0x1EA7B2C VA: 0x1EA7B2C
	private void Update() { }

	// RVA: 0x1EA7CDC Offset: 0x1EA7CDC VA: 0x1EA7CDC
	public void onTouchEvent() { }

	// RVA: 0x1EA7DB4 Offset: 0x1EA7DB4 VA: 0x1EA7DB4
	public void offTouchEvent() { }

	// RVA: 0x1EA7E8C Offset: 0x1EA7E8C VA: 0x1EA7E8C
	public void skipVoice() { }

	// RVA: 0x1EA7F10 Offset: 0x1EA7F10 VA: 0x1EA7F10
	public void stopVoice() { }

	// RVA: 0x1EA7FB0 Offset: 0x1EA7FB0 VA: 0x1EA7FB0
	public void onTouchSkipDeadEvent() { }

	// RVA: 0x1EA8050 Offset: 0x1EA8050 VA: 0x1EA8050
	public void offTouchSkipDeadEvent() { }

	// RVA: 0x1EA80F0 Offset: 0x1EA80F0 VA: 0x1EA80F0
	public void skipDead() { }

	// RVA: 0x1EA8184 Offset: 0x1EA8184 VA: 0x1EA8184
	public void loadTransformServant() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B8FC Offset: 0xD3B8FC VA: 0xD3B8FC
	// RVA: 0x1EA81B0 Offset: 0x1EA81B0 VA: 0x1EA81B0
	private IEnumerator colloadTransformServant() { }

	// RVA: 0x1EA8228 Offset: 0x1EA8228 VA: 0x1EA8228
	public void loadDressServant(bool flg) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B90C Offset: 0xD3B90C VA: 0xD3B90C
	// RVA: 0x1EA8258 Offset: 0x1EA8258 VA: 0x1EA8258
	private IEnumerator colloadDressServant(bool flg) { }

	// RVA: 0x1EA82FC Offset: 0x1EA82FC VA: 0x1EA82FC
	public void checkChangeAppearance() { }

	// RVA: 0x1EA838C Offset: 0x1EA838C VA: 0x1EA838C
	public void startChangeApp() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B91C Offset: 0xD3B91C VA: 0xD3B91C
	// RVA: 0x1EA5B28 Offset: 0x1EA5B28 VA: 0x1EA5B28
	private IEnumerator waitChangeApp(Action callback) { }

	// RVA: 0x1EA8418 Offset: 0x1EA8418 VA: 0x1EA8418
	public void endChangeAppearance() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B92C Offset: 0xD3B92C VA: 0xD3B92C
	// RVA: 0x1EA846C Offset: 0x1EA846C VA: 0x1EA846C
	public IEnumerator collChangeAppearance() { }

	// RVA: 0x1EA84E4 Offset: 0x1EA84E4 VA: 0x1EA84E4
	public void resetAura() { }

	// RVA: 0x1EA868C Offset: 0x1EA868C VA: 0x1EA868C
	public void setAuraFlip(bool flg) { }

	// RVA: 0x1EA8850 Offset: 0x1EA8850 VA: 0x1EA8850
	public void resetAuraFlip() { }

	// RVA: 0x1EA8A04 Offset: 0x1EA8A04 VA: 0x1EA8A04
	public void addAura(int auraEffectId, int priority) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B93C Offset: 0xD3B93C VA: 0xD3B93C
	// RVA: 0x1EA8A30 Offset: 0x1EA8A30 VA: 0x1EA8A30
	private IEnumerator coAddAura(int auraEffectId, int priority) { }

	// RVA: 0x1E9863C Offset: 0x1E9863C VA: 0x1E9863C
	public void updateAura(int[] auraEffectList) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B94C Offset: 0xD3B94C VA: 0xD3B94C
	// RVA: 0x1EA8AE4 Offset: 0x1EA8AE4 VA: 0x1EA8AE4
	private IEnumerator DestroyAuraEffect(GameObject effectObject) { }

	// RVA: 0x1EA8B54 Offset: 0x1EA8B54 VA: 0x1EA8B54
	public bool CheckAuraPriority(int priority) { }

	// RVA: 0x1EA8B6C Offset: 0x1EA8B6C VA: 0x1EA8B6C
	public void setSlientDead() { }

	// RVA: 0x1EA8BD4 Offset: 0x1EA8BD4 VA: 0x1EA8BD4
	public void callServant() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B95C Offset: 0xD3B95C VA: 0xD3B95C
	// RVA: 0x1EA8C0C Offset: 0x1EA8C0C VA: 0x1EA8C0C
	public IEnumerator colShiftServant(BattleActionData.ShiftServant shiftSvt, bool isShift = True) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B96C Offset: 0xD3B96C VA: 0xD3B96C
	// RVA: 0x1EA8CC8 Offset: 0x1EA8CC8 VA: 0x1EA8CC8
	public IEnumerator colShiftServantChange(BattleActionData.ShiftServant shiftSvt, bool isShift = True) { }

	// RVA: 0x1EA8D84 Offset: 0x1EA8D84 VA: 0x1EA8D84
	public void ShiftServantChangeAfter(bool isShift = True) { }

	// RVA: 0x1EA8E20 Offset: 0x1EA8E20 VA: 0x1EA8E20
	public void endPigReturnEffect() { }

	// RVA: 0x1EA8FD0 Offset: 0x1EA8FD0 VA: 0x1EA8FD0
	public void SetBillBoardGroup(int gId) { }

	// RVA: 0x1EA24F0 Offset: 0x1EA24F0 VA: 0x1EA24F0
	public string CheckAnimationAndChangeSleepWaitIfNeeded(string animname, bool isSaveAnim = True) { }

	// RVA: 0x1EA9040 Offset: 0x1EA9040 VA: 0x1EA9040
	public string OverwriteAnimation(string animname, bool isSaveAnim = True) { }

	// RVA: 0x1EA908C Offset: 0x1EA908C VA: 0x1EA908C
	public ChangeBattlePhaseNotify GetChangePhaseNotify() { }

	// RVA: 0x1E984E0 Offset: 0x1E984E0 VA: 0x1E984E0
	private void AddOverwriteEachPhaseAnimation(int svtId, int limitCount, bool isEnemy) { }

	// RVA: 0x1E96814 Offset: 0x1E96814 VA: 0x1E96814
	private void RemoveOverwriteEachPhaseAnimation() { }

	// RVA: 0x1EA9180 Offset: 0x1EA9180 VA: 0x1EA9180
	public void SetTempDefaultAnimation() { }

	// RVA: 0x1EA925C Offset: 0x1EA925C VA: 0x1EA925C
	public void RevertDefaultAnimation() { }

	// RVA: 0x1EA60E0 Offset: 0x1EA60E0 VA: 0x1EA60E0
	private void ApplySleepWaitModeFlag() { }

	// RVA: 0x1EA9300 Offset: 0x1EA9300 VA: 0x1EA9300
	public bool IsAlreadyDrop() { }

	// RVA: 0x1EA2A0C Offset: 0x1EA2A0C VA: 0x1EA2A0C
	public void SetAlreadyDrop(bool isDrop) { }

	// RVA: 0x1EA9320 Offset: 0x1EA9320 VA: 0x1EA9320
	public void AddReservedEffectBuffEffectId(int effectId) { }

	// RVA: 0x1EA93CC Offset: 0x1EA93CC VA: 0x1EA93CC
	public void ActiveReservedBuffEffect(int effectId) { }

	// RVA: 0x1EA0B44 Offset: 0x1EA0B44 VA: 0x1EA0B44
	public void ActiveRemainReservedBuffEffect() { }

	// RVA: 0x1EA95C0 Offset: 0x1EA95C0 VA: 0x1EA95C0
	private void addBuffLoopEffect(BuffEntity buffEntity) { }

	// RVA: 0x1EA3228 Offset: 0x1EA3228 VA: 0x1EA3228
	public void updateBuffLoopEffect() { }

	// RVA: 0x1EA0588 Offset: 0x1EA0588 VA: 0x1EA0588
	public void LoopEffectParticleSwitch(bool isPlay, bool isNoblePhantasm = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3B97C Offset: 0xD3B97C VA: 0xD3B97C
	// RVA: 0x1EA9D94 Offset: 0x1EA9D94 VA: 0x1EA9D94
	private IEnumerator DestroyEffectOnParticleStop(int key) { }

	// RVA: 0x1EA9E30 Offset: 0x1EA9E30 VA: 0x1EA9E30
	private void DestroyLoopEffect(int effectId) { }

	// RVA: 0x1E96698 Offset: 0x1E96698 VA: 0x1E96698
	private void DestroyAllLoopEffect() { }

	// RVA: 0x1EA5774 Offset: 0x1EA5774 VA: 0x1EA5774
	private void LoopEffectSwitchInNoblePhantasm(bool isPlay) { }

	// RVA: 0x1EAA098 Offset: 0x1EAA098 VA: 0x1EAA098
	private List<int> MoveLoopEffectFromActorObject() { }

	// RVA: 0x1EAA3E4 Offset: 0x1EAA3E4 VA: 0x1EAA3E4
	private void MoveLoopEffectToActorObject(List<int> movedEffect) { }

	// RVA: 0x1EAABAC Offset: 0x1EAABAC VA: 0x1EAABAC
	public void UpdateActorVisibilityByBuff() { }

	// RVA: 0x1E98BE8 Offset: 0x1E98BE8 VA: 0x1E98BE8
	private bool IsHideShadow() { }

	// RVA: 0x1EA0FA4 Offset: 0x1EA0FA4 VA: 0x1EA0FA4
	public void SetShadowActive(bool active) { }

	// RVA: 0x1E9BB98 Offset: 0x1E9BB98 VA: 0x1E9BB98
	private List<int> GetDelayEndSequenceIdListFromMotion() { }

	// RVA: 0x1EAAD00 Offset: 0x1EAAD00 VA: 0x1EAAD00
	public bool IsDelayEndSequence(TreasureDvcEntity entity) { }

	// RVA: 0x1EAAE20 Offset: 0x1EAAE20 VA: 0x1EAAE20
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B98C Offset: 0xD3B98C VA: 0xD3B98C
	// RVA: 0x1EAAE74 Offset: 0x1EAAE74 VA: 0x1EAAE74
	private static bool <setServantData>m__0(SkinnedMeshRenderer x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B99C Offset: 0xD3B99C VA: 0xD3B99C
	// RVA: 0x1EAAFC4 Offset: 0x1EAAFC4 VA: 0x1EAAFC4
	private static bool <IsAllSucceededMovingToSubMember>m__1(BattleActionData.MoveToSubMember x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B9AC Offset: 0xD3B9AC VA: 0xD3B9AC
	// RVA: 0x1EAAFEC Offset: 0x1EAAFEC VA: 0x1EAAFEC
	private void <startNoblePhantasm>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B9BC Offset: 0xD3B9BC VA: 0xD3B9BC
	// RVA: 0x1EAB190 Offset: 0x1EAB190 VA: 0x1EAB190
	private void <OnNoblePhantasmLoadComplete>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B9CC Offset: 0xD3B9CC VA: 0xD3B9CC
	// RVA: 0x1EAB1BC Offset: 0x1EAB1BC VA: 0x1EAB1BC
	private void <OnNoblePhantasmPlayComplete>m__4() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B9DC Offset: 0xD3B9DC VA: 0xD3B9DC
	// RVA: -1 Offset: -1
	private static bool <UpdateMaterialsOnRenderders`1>m__5<T>(T x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26A0668 Offset: 0x26A0668 VA: 0x26A0668
	|-BattleActorControl.<UpdateMaterialsOnRenderders`1>m__5<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xD3B9EC Offset: 0xD3B9EC VA: 0xD3B9EC
	// RVA: -1 Offset: -1
	private static bool <UpdateMaterialsOnRenderders`1>m__6<T>(Material x) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x26A06D4 Offset: 0x26A06D4 VA: 0x26A06D4
	|-BattleActorControl.<UpdateMaterialsOnRenderders`1>m__6<object>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xD3B9FC Offset: 0xD3B9FC VA: 0xD3B9FC
	// RVA: 0x1EAB298 Offset: 0x1EAB298 VA: 0x1EAB298
	private static bool <updateAura>m__7(KeyValuePair<int, GameObject> x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA0C Offset: 0xD3BA0C VA: 0xD3BA0C
	// RVA: 0x1EAB330 Offset: 0x1EAB330 VA: 0x1EAB330
	private void <ActiveRemainReservedBuffEffect>m__8(int iconId) { }
}

// Namespace: 
private enum BattleActorControl.DIR // TypeDefIndex: 9209
{
	// Fields
	public int value__; // 0x0
	public const BattleActorControl.DIR RIGHT = 0;
	public const BattleActorControl.DIR LEFT = 1;
}

// Namespace: 
public enum BattleActorControl.POS // TypeDefIndex: 9210
{
	// Fields
	public int value__; // 0x0
	public const BattleActorControl.POS FRONT = 0;
	public const BattleActorControl.POS BACK = 1;
	public const BattleActorControl.POS CENTER = 2;
	public const BattleActorControl.POS CRITERIA = 3;
	public const BattleActorControl.POS MYSTAGE = 4;
	public const BattleActorControl.POS ENEMYSTAGE = 5;
	public const BattleActorControl.POS REPLACE = 6;
	public const BattleActorControl.POS NPSTAGE = 7;
}

// Namespace: 
private class BattleActorControl.ExtraLoadedVoiceArgs // TypeDefIndex: 9211
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD2E8C Offset: 0xCD2E8C VA: 0xCD2E8C
	[DebuggerBrowsableAttribute] // RVA: 0xCD2E8C Offset: 0xCD2E8C VA: 0xCD2E8C
	private int <svtId>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD2EC8 Offset: 0xCD2EC8 VA: 0xCD2EC8
	[DebuggerBrowsableAttribute] // RVA: 0xCD2EC8 Offset: 0xCD2EC8 VA: 0xCD2EC8
	private int <dispLimitCount>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCD2F04 Offset: 0xCD2F04 VA: 0xCD2F04
	[DebuggerBrowsableAttribute] // RVA: 0xCD2F04 Offset: 0xCD2F04 VA: 0xCD2F04
	private int <overwriteSvtVoiceId>k__BackingField; // 0x18

	// Properties
	public int svtId { get; set; }
	public int dispLimitCount { get; set; }
	public int overwriteSvtVoiceId { get; set; }

	// Methods

	// RVA: 0x1D53210 Offset: 0x1D53210 VA: 0x1D53210
	public void .ctor(BattleServantData svtData) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA1C Offset: 0xD3BA1C VA: 0xD3BA1C
	// RVA: 0x1D532DC Offset: 0x1D532DC VA: 0x1D532DC
	public int get_svtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA2C Offset: 0xD3BA2C VA: 0xD3BA2C
	// RVA: 0x1D532C4 Offset: 0x1D532C4 VA: 0x1D532C4
	private void set_svtId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA3C Offset: 0xD3BA3C VA: 0xD3BA3C
	// RVA: 0x1D532E4 Offset: 0x1D532E4 VA: 0x1D532E4
	public int get_dispLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA4C Offset: 0xD3BA4C VA: 0xD3BA4C
	// RVA: 0x1D532CC Offset: 0x1D532CC VA: 0x1D532CC
	private void set_dispLimitCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA5C Offset: 0xD3BA5C VA: 0xD3BA5C
	// RVA: 0x1D532EC Offset: 0x1D532EC VA: 0x1D532EC
	public int get_overwriteSvtVoiceId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA6C Offset: 0xD3BA6C VA: 0xD3BA6C
	// RVA: 0x1D532D4 Offset: 0x1D532D4 VA: 0x1D532D4
	private void set_overwriteSvtVoiceId(int value) { }
}

// Namespace: 
private sealed class BattleActorControl.EndCallEvent : MulticastDelegate // TypeDefIndex: 9212
{
	// Methods

	// RVA: 0x1D52D58 Offset: 0x1D52D58 VA: 0x1D52D58
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D52D68 Offset: 0x1D52D68 VA: 0x1D52D68 Slot: 11
	public virtual void Invoke(Hashtable hash) { }

	// RVA: 0x1D53108 Offset: 0x1D53108 VA: 0x1D53108 Slot: 12
	public virtual IAsyncResult BeginInvoke(Hashtable hash, AsyncCallback callback, object object) { }

	// RVA: 0x1D5312C Offset: 0x1D5312C VA: 0x1D5312C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private class BattleActorControl.EventClass // TypeDefIndex: 9213
{
	// Fields
	public BattleActorControl.EndCallEvent eventcall; // 0x10
	public Hashtable table; // 0x18

	// Methods

	// RVA: 0x1D53138 Offset: 0x1D53138 VA: 0x1D53138
	public void .ctor() { }

	// RVA: 0x1D53140 Offset: 0x1D53140 VA: 0x1D53140
	public void Add(string key, object obj) { }

	// RVA: 0x1D531DC Offset: 0x1D531DC VA: 0x1D531DC
	public void Proc() { }
}

// Namespace: 
public class BattleActorControl.ActorMotionActiveCheck // TypeDefIndex: 9214
{
	// Fields
	private int uniqueId; // 0x10
	private int wave; // 0x14
	private BattleActorControl battleActor; // 0x18
	public float afterWaitTime; // 0x20
	private List<string> _activeFsmNameList; // 0x28
	private Queue<BattleCallBackBase> _callBackQueue; // 0x30

	// Properties
	public List<string> ActiveFsmNameList { get; }
	public bool IsActiveFSM { get; }
	public Queue<BattleCallBackBase> CallBackQueue { get; }

	// Methods

	// RVA: 0x1E9FC90 Offset: 0x1E9FC90 VA: 0x1E9FC90
	public void .ctor(BattleActorControl actor) { }

	// RVA: 0x1EAF068 Offset: 0x1EAF068 VA: 0x1EAF068
	public List<string> get_ActiveFsmNameList() { }

	// RVA: 0x1E9FFDC Offset: 0x1E9FFDC VA: 0x1E9FFDC
	public bool get_IsActiveFSM() { }

	// RVA: 0x1EAF1B0 Offset: 0x1EAF1B0 VA: 0x1EAF1B0
	public Queue<BattleCallBackBase> get_CallBackQueue() { }

	// RVA: 0x1EAF08C Offset: 0x1EAF08C VA: 0x1EAF08C
	private void init() { }

	// RVA: 0x1E9ED00 Offset: 0x1E9ED00 VA: 0x1E9ED00
	public void activeFSM(string fsmName) { }

	// RVA: 0x1EA0990 Offset: 0x1EA0990 VA: 0x1EA0990
	public bool inactiveFSM(string fsmName) { }

	// RVA: 0x1EA01EC Offset: 0x1EA01EC VA: 0x1EA01EC
	public void enqueueCallBack(BattleCallBackBase callBack) { }

	// RVA: 0x1EA0A08 Offset: 0x1EA0A08 VA: 0x1EA0A08
	public BattleCallBackBase getAbleCallBack() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB03B0 Offset: 0xCB03B0 VA: 0xCB03B0
private sealed class BattleActorControl.<setServantData>c__AnonStoreyB // TypeDefIndex: 9215
{
	// Fields
	internal int index; // 0x10
	internal BattleActorControl $this; // 0x18

	// Methods

	// RVA: 0x1E9845C Offset: 0x1E9845C VA: 0x1E9845C
	public void .ctor() { }

	// RVA: 0x1EAEEAC Offset: 0x1EAEEAC VA: 0x1EAEEAC
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB03C0 Offset: 0xCB03C0 VA: 0xCB03C0
private sealed class BattleActorControl.<ExistMotionEvent>c__AnonStoreyC // TypeDefIndex: 9216
{
	// Fields
	internal string eventName; // 0x10

	// Methods

	// RVA: 0x1E9EB54 Offset: 0x1E9EB54 VA: 0x1E9EB54
	public void .ctor() { }

	// RVA: 0x1EABA78 Offset: 0x1EABA78 VA: 0x1EABA78
	internal bool <>m__0(PlayMakerFSM fsm) { }

	// RVA: 0x1EABB74 Offset: 0x1EABB74 VA: 0x1EABB74
	internal bool <>m__1(FsmTransition x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB03D0 Offset: 0xCB03D0 VA: 0xCB03D0
private sealed class BattleActorControl.<coroutinePostCallBack>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9217
{
	// Fields
	internal float waitTime; // 0x10
	internal BattleCallBackBase callBack; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD489E4 Offset: 0xD489E4 VA: 0xD489E4
	// RVA: 0x1EA0CCC Offset: 0x1EA0CCC VA: 0x1EA0CCC
	public void .ctor() { }

	// RVA: 0x1EAECFC Offset: 0x1EAECFC VA: 0x1EAECFC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD489F4 Offset: 0xD489F4 VA: 0xD489F4
	// RVA: 0x1EAEE20 Offset: 0x1EAEE20 VA: 0x1EAEE20 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A04 Offset: 0xD48A04 VA: 0xD48A04
	// RVA: 0x1EAEE28 Offset: 0x1EAEE28 VA: 0x1EAEE28 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A14 Offset: 0xD48A14 VA: 0xD48A14
	// RVA: 0x1EAEE30 Offset: 0x1EAEE30 VA: 0x1EAEE30 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A24 Offset: 0xD48A24 VA: 0xD48A24
	// RVA: 0x1EAEE44 Offset: 0x1EAEE44 VA: 0x1EAEE44 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB03E0 Offset: 0xCB03E0 VA: 0xCB03E0
private sealed class BattleActorControl.<WaitToNoblePhantasmPlay>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9218
{
	// Fields
	internal int <i>__1; // 0x10
	internal int <tempId>__0; // 0x14
	internal int <ignoreSvtId>__0; // 0x18
	internal BattleActorControl $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48A34 Offset: 0xD48A34 VA: 0xD48A34
	// RVA: 0x1EA5C2C Offset: 0x1EA5C2C VA: 0x1EA5C2C
	public void .ctor() { }

	// RVA: 0x1EABC8C Offset: 0x1EABC8C VA: 0x1EABC8C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A44 Offset: 0xD48A44 VA: 0xD48A44
	// RVA: 0x1EAC380 Offset: 0x1EAC380 VA: 0x1EAC380 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A54 Offset: 0xD48A54 VA: 0xD48A54
	// RVA: 0x1EAC388 Offset: 0x1EAC388 VA: 0x1EAC388 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A64 Offset: 0xD48A64 VA: 0xD48A64
	// RVA: 0x1EAC390 Offset: 0x1EAC390 VA: 0x1EAC390 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A74 Offset: 0xD48A74 VA: 0xD48A74
	// RVA: 0x1EAC3A4 Offset: 0x1EAC3A4 VA: 0x1EAC3A4 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB03F0 Offset: 0xCB03F0 VA: 0xCB03F0
private sealed class BattleActorControl.<SetActorAlpha>c__AnonStoreyD // TypeDefIndex: 9219
{
	// Fields
	internal float alpha; // 0x10

	// Methods

	// RVA: 0x1EA786C Offset: 0x1EA786C VA: 0x1EA786C
	public void .ctor() { }

	// RVA: 0x1EABC10 Offset: 0x1EABC10 VA: 0x1EABC10
	internal void <>m__0(Material material) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0400 Offset: 0xCB0400 VA: 0xCB0400
private sealed class BattleActorControl.<colloadTransformServant>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9220
{
	// Fields
	internal List<int> <moveEffect>__0; // 0x10
	internal BattleActorControl.ExtraLoadedVoiceArgs <voiceArgs>__0; // 0x18
	internal List.Enumerator<BattleActionData.TransformServant> $locvar0; // 0x20
	internal BattleActorControl $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48A84 Offset: 0xD48A84 VA: 0xD48A84
	// RVA: 0x1EA8220 Offset: 0x1EA8220 VA: 0x1EA8220
	public void .ctor() { }

	// RVA: 0x1EAE2D4 Offset: 0x1EAE2D4 VA: 0x1EAE2D4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48A94 Offset: 0xD48A94 VA: 0xD48A94
	// RVA: 0x1EAEC70 Offset: 0x1EAEC70 VA: 0x1EAEC70 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48AA4 Offset: 0xD48AA4 VA: 0xD48AA4
	// RVA: 0x1EAEC78 Offset: 0x1EAEC78 VA: 0x1EAEC78 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48AB4 Offset: 0xD48AB4 VA: 0xD48AB4
	// RVA: 0x1EAEC80 Offset: 0x1EAEC80 VA: 0x1EAEC80 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48AC4 Offset: 0xD48AC4 VA: 0xD48AC4
	// RVA: 0x1EAEC94 Offset: 0x1EAEC94 VA: 0x1EAEC94 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0410 Offset: 0xCB0410 VA: 0xCB0410
private sealed class BattleActorControl.<colloadDressServant>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9221
{
	// Fields
	internal int <dressId>__0; // 0x10
	internal List<int> <moveEffect>__1; // 0x18
	internal bool flg; // 0x20
	internal BattleActorControl $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48AD4 Offset: 0xD48AD4 VA: 0xD48AD4
	// RVA: 0x1EA82F4 Offset: 0x1EA82F4 VA: 0x1EA82F4
	public void .ctor() { }

	// RVA: 0x1EADB8C Offset: 0x1EADB8C VA: 0x1EADB8C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48AE4 Offset: 0xD48AE4 VA: 0xD48AE4
	// RVA: 0x1EAE248 Offset: 0x1EAE248 VA: 0x1EAE248 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48AF4 Offset: 0xD48AF4 VA: 0xD48AF4
	// RVA: 0x1EAE250 Offset: 0x1EAE250 VA: 0x1EAE250 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B04 Offset: 0xD48B04 VA: 0xD48B04
	// RVA: 0x1EAE258 Offset: 0x1EAE258 VA: 0x1EAE258 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B14 Offset: 0xD48B14 VA: 0xD48B14
	// RVA: 0x1EAE26C Offset: 0x1EAE26C VA: 0x1EAE26C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0420 Offset: 0xCB0420 VA: 0xCB0420
private sealed class BattleActorControl.<waitChangeApp>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9222
{
	// Fields
	internal Action callback; // 0x10
	internal BattleActorControl $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48B24 Offset: 0xD48B24 VA: 0xD48B24
	// RVA: 0x1EA8410 Offset: 0x1EA8410 VA: 0x1EA8410
	public void .ctor() { }

	// RVA: 0x1EAEEF8 Offset: 0x1EAEEF8 VA: 0x1EAEEF8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B34 Offset: 0xD48B34 VA: 0xD48B34
	// RVA: 0x1EAEFDC Offset: 0x1EAEFDC VA: 0x1EAEFDC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B44 Offset: 0xD48B44 VA: 0xD48B44
	// RVA: 0x1EAEFE4 Offset: 0x1EAEFE4 VA: 0x1EAEFE4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B54 Offset: 0xD48B54 VA: 0xD48B54
	// RVA: 0x1EAEFEC Offset: 0x1EAEFEC VA: 0x1EAEFEC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B64 Offset: 0xD48B64 VA: 0xD48B64
	// RVA: 0x1EAF000 Offset: 0x1EAF000 VA: 0x1EAF000 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0430 Offset: 0xCB0430 VA: 0xCB0430
private sealed class BattleActorControl.<collChangeAppearance>c__Iterator5 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9223
{
	// Fields
	internal List<int> <moveEffect>__0; // 0x10
	internal BattleActorControl $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48B74 Offset: 0xD48B74 VA: 0xD48B74
	// RVA: 0x1EA84DC Offset: 0x1EA84DC VA: 0x1EA84DC
	public void .ctor() { }

	// RVA: 0x1EAD5F0 Offset: 0x1EAD5F0 VA: 0x1EAD5F0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B84 Offset: 0xD48B84 VA: 0xD48B84
	// RVA: 0x1EADB00 Offset: 0x1EADB00 VA: 0x1EADB00 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48B94 Offset: 0xD48B94 VA: 0xD48B94
	// RVA: 0x1EADB08 Offset: 0x1EADB08 VA: 0x1EADB08 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48BA4 Offset: 0xD48BA4 VA: 0xD48BA4
	// RVA: 0x1EADB10 Offset: 0x1EADB10 VA: 0x1EADB10 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48BB4 Offset: 0xD48BB4 VA: 0xD48BB4
	// RVA: 0x1EADB24 Offset: 0x1EADB24 VA: 0x1EADB24 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0440 Offset: 0xCB0440 VA: 0xCB0440
private sealed class BattleActorControl.<coAddAura>c__Iterator6 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9224
{
	// Fields
	internal int auraEffectId; // 0x10
	internal EffectMaster <effectMaster>__1; // 0x18
	internal EffectEntity <effectEntity>__1; // 0x20
	internal string <effectPath>__2; // 0x28
	internal BattleEffectUtility.BuffEffectLoadArgument <buffLoadArg>__1; // 0x30
	internal GameObject <obj>__1; // 0x38
	internal int priority; // 0x40
	internal BattleActorControl $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48BC4 Offset: 0xD48BC4 VA: 0xD48BC4
	// RVA: 0x1EA8ADC Offset: 0x1EA8ADC VA: 0x1EA8ADC
	public void .ctor() { }

	// RVA: 0x1EAC40C Offset: 0x1EAC40C VA: 0x1EAC40C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48BD4 Offset: 0xD48BD4 VA: 0xD48BD4
	// RVA: 0x1EACB3C Offset: 0x1EACB3C VA: 0x1EACB3C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48BE4 Offset: 0xD48BE4 VA: 0xD48BE4
	// RVA: 0x1EACB44 Offset: 0x1EACB44 VA: 0x1EACB44 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48BF4 Offset: 0xD48BF4 VA: 0xD48BF4
	// RVA: 0x1EACB4C Offset: 0x1EACB4C VA: 0x1EACB4C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48C04 Offset: 0xD48C04 VA: 0xD48C04
	// RVA: 0x1EACB60 Offset: 0x1EACB60 VA: 0x1EACB60 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0450 Offset: 0xCB0450 VA: 0xCB0450
private sealed class BattleActorControl.<DestroyAuraEffect>c__Iterator7 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9225
{
	// Fields
	internal GameObject effectObject; // 0x10
	internal ParticleSystem[] <particleArray>__0; // 0x18
	internal int <aliveCount>__0; // 0x20
	internal ParticleSystem[] $locvar0; // 0x28
	internal int $locvar1; // 0x30
	internal Renderer[] <rendererArray>__0; // 0x38
	internal Renderer[] $locvar2; // 0x40
	internal int $locvar3; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48C14 Offset: 0xD48C14 VA: 0xD48C14
	// RVA: 0x1EA8B64 Offset: 0x1EA8B64 VA: 0x1EA8B64
	public void .ctor() { }

	// RVA: 0x1EAB334 Offset: 0x1EAB334 VA: 0x1EAB334 Slot: 5
	public bool MoveNext() { }

