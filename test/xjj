	public const CriAtomEx.Format HCA = 3;
	public const CriAtomEx.Format HCA_MX = 4;
	public const CriAtomEx.Format WAVE = 5;
	public const CriAtomEx.Format RAW_PCM = 6;
}

// Namespace: 
private enum CriAtomEx.SpeakerSystem // TypeDefIndex: 3862
{
	// Fields
	public uint value__; // 0x0
	public const CriAtomEx.SpeakerSystem Surround_5_1 = 0;
	public const CriAtomEx.SpeakerSystem Surround_7_1 = 1;
}

// Namespace: 
public struct CriAtomEx.SpeakerAngles6ch // TypeDefIndex: 3863
{
	// Fields
	public float frontLeft; // 0x0
	public float frontRight; // 0x4
	public float frontCenter; // 0x8
	public float lowFrequency; // 0xC
	public float surroundLeft; // 0x10
	public float surroundRight; // 0x14

	// Methods

	// RVA: 0x246CBAC Offset: 0x246CBAC VA: 0x246CBAC
	public static CriAtomEx.SpeakerAngles6ch Default() { }
}

// Namespace: 
public struct CriAtomEx.SpeakerAngles8ch // TypeDefIndex: 3864
{
	// Fields
	public float frontLeft; // 0x0
	public float frontRight; // 0x4
	public float frontCenter; // 0x8
	public float lowFrequency; // 0xC
	public float surroundLeft; // 0x10
	public float surroundRight; // 0x14
	public float surroundBackLeft; // 0x18
	public float surroundBackRight; // 0x1C

	// Methods

	// RVA: 0x246CBC8 Offset: 0x246CBC8 VA: 0x246CBC8
	public static CriAtomEx.SpeakerAngles8ch Default() { }
}

// Namespace: 
public struct CriAtomEx.FormatInfo // TypeDefIndex: 3865
{
	// Fields
	public CriAtomEx.Format format; // 0x0
	public int samplingRate; // 0x4
	public long numSamples; // 0x8
	public long loopOffset; // 0x10
	public long loopLength; // 0x18
	public int numChannels; // 0x20
	public uint reserved; // 0x24
}

// Namespace: 
public struct CriAtomEx.AisacControlInfo // TypeDefIndex: 3866
{
	// Fields
	public readonly string name; // 0x0
	public uint id; // 0x8

	// Methods

	// RVA: 0xD6B480 Offset: 0xD6B480 VA: 0xD6B480
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public enum CriAtomEx.Randomize3dCalcType // TypeDefIndex: 3867
{
	// Fields
	public int value__; // 0x0
	public const CriAtomEx.Randomize3dCalcType None = -1;
	public const CriAtomEx.Randomize3dCalcType Rectangle = 0;
	public const CriAtomEx.Randomize3dCalcType Cuboid = 1;
	public const CriAtomEx.Randomize3dCalcType Circle = 2;
	public const CriAtomEx.Randomize3dCalcType Cylinder = 3;
	public const CriAtomEx.Randomize3dCalcType Sphere = 4;
	public const CriAtomEx.Randomize3dCalcType List = 6;
}

// Namespace: 
public enum CriAtomEx.Randomize3dParamType // TypeDefIndex: 3868
{
	// Fields
	public int value__; // 0x0
	public const CriAtomEx.Randomize3dParamType None = 0;
	public const CriAtomEx.Randomize3dParamType Width = 1;
	public const CriAtomEx.Randomize3dParamType Depth = 2;
	public const CriAtomEx.Randomize3dParamType Height = 3;
	public const CriAtomEx.Randomize3dParamType Radius = 4;
}

// Namespace: 
[Serializable]
public struct CriAtomEx.Randomize3dConfig // TypeDefIndex: 3869
{
	// Fields
	public const int NumOfCalcParams = 3;
	[SerializeField] // RVA: 0xC20C9C Offset: 0xC20C9C VA: 0xC20C9C
	private bool followsOriginalSource; // 0x0
	[SerializeField] // RVA: 0xC20CAC Offset: 0xC20CAC VA: 0xC20CAC
	private CriAtomEx.Randomize3dCalcType calculationType; // 0x4
	[SerializeField] // RVA: 0xC20CBC Offset: 0xC20CBC VA: 0xC20CBC
	private float[] calculationParameters; // 0x8

	// Properties
	public bool FollowsOriginalSource { get; }
	public CriAtomEx.Randomize3dCalcType CalculationType { get; }
	public float CalculationParameter1 { get; }
	public float CalculationParameter2 { get; }
	public float CalculationParameter3 { get; }

	// Methods

	// RVA: 0xD6BC00 Offset: 0xD6BC00 VA: 0xD6BC00
	internal void .ctor(byte[] data, int startIndex) { }

	// RVA: 0xD6BC08 Offset: 0xD6BC08 VA: 0xD6BC08
	public void .ctor(bool followsOriginalSource, CriAtomEx.Randomize3dCalcType calculationType, float param1 = 0, float param2 = 0, float param3 = 0) { }

	// RVA: 0xD6BC14 Offset: 0xD6BC14 VA: 0xD6BC14
	public void .ctor(int dummy) { }

	// RVA: 0xD6BC1C Offset: 0xD6BC1C VA: 0xD6BC1C
	public bool get_FollowsOriginalSource() { }

	// RVA: 0xD6BC24 Offset: 0xD6BC24 VA: 0xD6BC24
	public CriAtomEx.Randomize3dCalcType get_CalculationType() { }

	// RVA: 0xD6BC2C Offset: 0xD6BC2C VA: 0xD6BC2C
	public float get_CalculationParameter1() { }

	// RVA: 0xD6BC34 Offset: 0xD6BC34 VA: 0xD6BC34
	public float get_CalculationParameter2() { }

	// RVA: 0xD6BC3C Offset: 0xD6BC3C VA: 0xD6BC3C
	public float get_CalculationParameter3() { }

	// RVA: 0xD6BC44 Offset: 0xD6BC44 VA: 0xD6BC44
	public void ClearCalcParams(float initVal = 0) { }

	// RVA: 0xD6BC4C Offset: 0xD6BC4C VA: 0xD6BC4C
	public bool GetParamByType(CriAtomEx.Randomize3dParamType paramType, ref float paramVal) { }

	// RVA: 0xD6BC54 Offset: 0xD6BC54 VA: 0xD6BC54
	public bool SetParamByType(CriAtomEx.Randomize3dParamType paramType, float paramVal) { }
}

// Namespace: 
public struct CriAtomEx.CuePos3dInfo // TypeDefIndex: 3870
{
	// Fields
	public float coneInsideAngle; // 0x0
	public float coneOutsideAngle; // 0x4
	public float minAttenuationDistance; // 0x8
	public float maxAttenuationDistance; // 0xC
	public float sourceRadius; // 0x10
	public float interiorDistance; // 0x14
	public float dopplerFactor; // 0x18
	public CriAtomEx.Randomize3dConfig randomPos; // 0x20
	public ushort distanceAisacControl; // 0x30
	public ushort listenerBaseAngleAisacControl; // 0x32
	public ushort sourceBaseAngleAisacControl; // 0x34
	public ushort listenerBaseElevationAisacControl; // 0x36
	public ushort sourceBaseElevationAisacControl; // 0x38
	public ushort[] reserved; // 0x40

	// Methods

	// RVA: 0xD6BBC8 Offset: 0xD6BBC8 VA: 0xD6BBC8
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomEx.GameVariableInfo // TypeDefIndex: 3871
{
	// Fields
	public readonly string name; // 0x0
	public uint id; // 0x8
	public float gameValue; // 0xC

	// Methods

	// RVA: 0xD6BBD0 Offset: 0xD6BBD0 VA: 0xD6BBD0
	public void .ctor(byte[] data, int startIndex) { }

	// RVA: 0xD6BBD8 Offset: 0xD6BBD8 VA: 0xD6BBD8
	public void .ctor(string name, uint id, float gameValue) { }
}

// Namespace: 
public enum CriAtomEx.CueType // TypeDefIndex: 3872
{
	// Fields
	public int value__; // 0x0
	public const CriAtomEx.CueType Polyphonic = 0;
	public const CriAtomEx.CueType Sequential = 1;
	public const CriAtomEx.CueType Shuffle = 2;
	public const CriAtomEx.CueType Random = 3;
	public const CriAtomEx.CueType RandomNoRepeat = 4;
	public const CriAtomEx.CueType SwitchGameVariable = 5;
	public const CriAtomEx.CueType ComboSequential = 6;
	public const CriAtomEx.CueType SwitchSelector = 7;
	public const CriAtomEx.CueType TrackTransitionBySelector = 8;
}

// Namespace: 
public struct CriAtomEx.CueInfo // TypeDefIndex: 3873
{
	// Fields
	public int id; // 0x0
	public CriAtomEx.CueType type; // 0x4
	public readonly string name; // 0x8
	public readonly string userData; // 0x10
	public long length; // 0x18
	public ushort[] categories; // 0x20
	public short numLimits; // 0x28
	public ushort numBlocks; // 0x2A
	public ushort numTracks; // 0x2C
	public ushort numRelatedWaveForms; // 0x2E
	public byte priority; // 0x30
	public byte headerVisibility; // 0x31
	public byte ignore_player_parameter; // 0x32
	public byte probability; // 0x33
	public CriAtomEx.PanType panType; // 0x34
	public CriAtomEx.CuePos3dInfo pos3dInfo; // 0x38
	public CriAtomEx.GameVariableInfo gameVariableInfo; // 0x80

	// Methods

	// RVA: 0xD6BA84 Offset: 0xD6BA84 VA: 0xD6BA84
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomEx.WaveformInfo // TypeDefIndex: 3874
{
	// Fields
	public int waveId; // 0x0
	public uint format; // 0x4
	public int samplingRate; // 0x8
	public int numChannels; // 0xC
	public long numSamples; // 0x10
	public bool streamingFlag; // 0x18
	public uint[] reserved; // 0x20

	// Methods

	// RVA: 0xD6BD7C Offset: 0xD6BD7C VA: 0xD6BD7C
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomEx.AisacInfo // TypeDefIndex: 3875
{
	// Fields
	public readonly string name; // 0x0
	public bool defaultControlFlag; // 0x8
	public float defaultControlValue; // 0xC
	public uint controlId; // 0x10
	public readonly string controlName; // 0x18

	// Methods

	// RVA: 0xD6B564 Offset: 0xD6B564 VA: 0xD6B564
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomEx.PerformanceInfo // TypeDefIndex: 3876
{
	// Fields
	public uint serverProcessCount; // 0x0
	public uint lastServerTime; // 0x4
	public uint maxServerTime; // 0x8
	public uint averageServerTime; // 0xC
	public uint lastServerInterval; // 0x10
	public uint maxServerInterval; // 0x14
	public uint averageServerInterval; // 0x18
}

// Namespace: 
public struct CriAtomEx.ResourceUsage // TypeDefIndex: 3877
{
	// Fields
	public uint useCount; // 0x0
	public uint limit; // 0x4
}

// Namespace: 
public struct CriAtomEx.NativeVector // TypeDefIndex: 3878
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8

	// Methods

	// RVA: 0xD6BBE8 Offset: 0xD6BBE8 VA: 0xD6BBE8
	public void .ctor(float x, float y, float z) { }

	// RVA: 0xD6BBF4 Offset: 0xD6BBF4 VA: 0xD6BBF4
	public void .ctor(Vector3 vector) { }
}

// Namespace: 
public struct CriAtomEx.CueLinkInfo // TypeDefIndex: 3879
{
	// Fields
	public IntPtr nativePlayerHn; // 0x0
	public uint basePlaybackId; // 0x8
	public uint targetPlaybackId; // 0xC
	public int cueLinkType; // 0x10
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xC1EEB0 Offset: 0xC1EEB0 VA: 0xC1EEB0
public sealed class CriAtomEx.CueLinkCbFunc : MulticastDelegate // TypeDefIndex: 3880
{
	// Methods

	// RVA: 0x2467CD4 Offset: 0x2467CD4 VA: 0x2467CD4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x24678A4 Offset: 0x24678A4 VA: 0x24678A4 Slot: 11
	public virtual void Invoke(ref CriAtomEx.CueLinkInfo info) { }

	// RVA: 0x246C14C Offset: 0x246C14C VA: 0x246C14C Slot: 12
	public virtual IAsyncResult BeginInvoke(ref CriAtomEx.CueLinkInfo info, AsyncCallback callback, object object) { }

	// RVA: 0x246C1E0 Offset: 0x246C1E0 VA: 0x246C1E0 Slot: 13
	public virtual void EndInvoke(ref CriAtomEx.CueLinkInfo info, IAsyncResult result) { }
}

// Namespace: 
public static class CriAtomExCategory // TypeDefIndex: 3881
{
	// Methods

	// RVA: 0x23C8108 Offset: 0x23C8108 VA: 0x23C8108
	public static void SetVolume(string name, float volume) { }

	// RVA: 0x23C81C8 Offset: 0x23C81C8 VA: 0x23C81C8
	public static void SetVolume(int id, float volume) { }

	// RVA: 0x23C8278 Offset: 0x23C8278 VA: 0x23C8278
	public static float GetVolume(string name) { }

	// RVA: 0x23C8338 Offset: 0x23C8338 VA: 0x23C8338
	public static float GetVolume(int id) { }

	// RVA: 0x23C83D8 Offset: 0x23C83D8 VA: 0x23C83D8
	public static void Mute(string name, bool mute) { }

	// RVA: 0x23C849C Offset: 0x23C849C VA: 0x23C849C
	public static void Mute(int id, bool mute) { }

	// RVA: 0x23C8550 Offset: 0x23C8550 VA: 0x23C8550
	public static bool IsMuted(string name) { }

	// RVA: 0x23C860C Offset: 0x23C860C VA: 0x23C860C
	public static bool IsMuted(int id) { }

	// RVA: 0x23C86B4 Offset: 0x23C86B4 VA: 0x23C86B4
	public static void Solo(string name, bool solo, float muteVolume) { }

	// RVA: 0x23C8788 Offset: 0x23C8788 VA: 0x23C8788
	public static void Solo(int id, bool solo, float muteVolume) { }

	// RVA: 0x23C884C Offset: 0x23C884C VA: 0x23C884C
	public static bool IsSoloed(string name) { }

	// RVA: 0x23C8908 Offset: 0x23C8908 VA: 0x23C8908
	public static bool IsSoloed(int id) { }

	// RVA: 0x23C89B0 Offset: 0x23C89B0 VA: 0x23C89B0
	public static void Pause(string name, bool pause) { }

	// RVA: 0x23C8A74 Offset: 0x23C8A74 VA: 0x23C8A74
	public static void Pause(int id, bool pause) { }

	// RVA: 0x23C8B28 Offset: 0x23C8B28 VA: 0x23C8B28
	public static bool IsPaused(string name) { }

	// RVA: 0x23C8BE4 Offset: 0x23C8BE4 VA: 0x23C8BE4
	public static bool IsPaused(int id) { }

	// RVA: 0x23C8C8C Offset: 0x23C8C8C VA: 0x23C8C8C
	public static void SetAisacControl(string name, string controlName, float value) { }

	[ObsoleteAttribute] // RVA: 0xC23528 Offset: 0xC23528 VA: 0xC23528
	// RVA: 0x23C8D74 Offset: 0x23C8D74 VA: 0x23C8D74
	public static void SetAisac(string name, string controlName, float value) { }

	// RVA: 0x23C8D78 Offset: 0x23C8D78 VA: 0x23C8D78
	public static void SetAisacControl(int id, int controlId, float value) { }

	[ObsoleteAttribute] // RVA: 0xC23560 Offset: 0xC23560 VA: 0xC23560
	// RVA: 0x23C8E38 Offset: 0x23C8E38 VA: 0x23C8E38
	public static void SetAisac(int id, int controlId, float value) { }

	// RVA: 0x23C8E3C Offset: 0x23C8E3C VA: 0x23C8E3C
	public static void SetReactParameter(string name, CriAtomExCategory.ReactParameter parameter) { }

	// RVA: 0x23C8F58 Offset: 0x23C8F58 VA: 0x23C8F58
	public static bool GetReactParameter(string name, out CriAtomExCategory.ReactParameter parameter) { }

	// RVA: 0x23C906C Offset: 0x23C906C VA: 0x23C906C
	public static bool GetAttachedAisacInfoById(uint id, int aisacAttachedIndex, out CriAtomEx.AisacInfo aisacInfo) { }

	// RVA: 0x23C92F4 Offset: 0x23C92F4 VA: 0x23C92F4
	public static bool GetAttachedAisacInfoByName(string name, int aisacAttachedIndex, out CriAtomEx.AisacInfo aisacInfo) { }

	// RVA: 0x23C9590 Offset: 0x23C9590 VA: 0x23C9590
	public static bool GetCurrentAisacControlValue(string categoryName, string aisacControlName, out float controlValue) { }

	// RVA: 0x23C967C Offset: 0x23C967C VA: 0x23C967C
	public static CriAtomExCategory.ReactStatus GetReactStatus(string reactName) { }

	// RVA: 0x23C810C Offset: 0x23C810C VA: 0x23C810C
	private static extern void criAtomExCategory_SetVolumeByName(string name, float volume) { }

	// RVA: 0x23C827C Offset: 0x23C827C VA: 0x23C827C
	private static extern float criAtomExCategory_GetVolumeByName(string name) { }

	// RVA: 0x23C81CC Offset: 0x23C81CC VA: 0x23C81CC
	private static extern void criAtomExCategory_SetVolumeById(int id, float volume) { }

	// RVA: 0x23C833C Offset: 0x23C833C VA: 0x23C833C
	private static extern float criAtomExCategory_GetVolumeById(int id) { }

	// RVA: 0x23C84A4 Offset: 0x23C84A4 VA: 0x23C84A4
	private static extern void criAtomExCategory_MuteById(int id, bool mute) { }

	// RVA: 0x23C8610 Offset: 0x23C8610 VA: 0x23C8610
	private static extern bool criAtomExCategory_IsMutedById(int id) { }

	// RVA: 0x23C83E0 Offset: 0x23C83E0 VA: 0x23C83E0
	private static extern void criAtomExCategory_MuteByName(string name, bool mute) { }

	// RVA: 0x23C8554 Offset: 0x23C8554 VA: 0x23C8554
	private static extern bool criAtomExCategory_IsMutedByName(string name) { }

	// RVA: 0x23C8790 Offset: 0x23C8790 VA: 0x23C8790
	private static extern void criAtomExCategory_SoloById(int id, bool solo, float volume) { }

	// RVA: 0x23C890C Offset: 0x23C890C VA: 0x23C890C
	private static extern bool criAtomExCategory_IsSoloedById(int id) { }

	// RVA: 0x23C86BC Offset: 0x23C86BC VA: 0x23C86BC
	private static extern void criAtomExCategory_SoloByName(string name, bool solo, float volume) { }

	// RVA: 0x23C8850 Offset: 0x23C8850 VA: 0x23C8850
	private static extern bool criAtomExCategory_IsSoloedByName(string name) { }

	// RVA: 0x23C8A7C Offset: 0x23C8A7C VA: 0x23C8A7C
	private static extern void criAtomExCategory_PauseById(int id, bool pause) { }

	// RVA: 0x23C8BE8 Offset: 0x23C8BE8 VA: 0x23C8BE8
	private static extern bool criAtomExCategory_IsPausedById(int id) { }

	// RVA: 0x23C89B8 Offset: 0x23C89B8 VA: 0x23C89B8
	private static extern void criAtomExCategory_PauseByName(string name, bool pause) { }

	// RVA: 0x23C8B2C Offset: 0x23C8B2C VA: 0x23C8B2C
	private static extern bool criAtomExCategory_IsPausedByName(string name) { }

	// RVA: 0x23C8D7C Offset: 0x23C8D7C VA: 0x23C8D7C
	private static extern void criAtomExCategory_SetAisacControlById(int id, ushort controlId, float value) { }

	// RVA: 0x23C8C90 Offset: 0x23C8C90 VA: 0x23C8C90
	private static extern void criAtomExCategory_SetAisacControlByName(string name, string controlName, float value) { }

	// RVA: 0x23C8E40 Offset: 0x23C8E40 VA: 0x23C8E40
	private static extern void criAtomExCategory_SetReactParameter(string react_name, ref CriAtomExCategory.ReactParameter parameter) { }

	// RVA: 0x23C8F5C Offset: 0x23C8F5C VA: 0x23C8F5C
	private static extern bool criAtomExCategory_GetReactParameter(string react_name, out CriAtomExCategory.ReactParameter parameter) { }

	// RVA: 0x23C9238 Offset: 0x23C9238 VA: 0x23C9238
	private static extern bool criAtomExCategory_GetAttachedAisacInfoById(uint id, int aisacAttachedIndex, IntPtr aisacInfo) { }

	// RVA: 0x23C94C0 Offset: 0x23C94C0 VA: 0x23C94C0
	private static extern bool criAtomExCategory_GetAttachedAisacInfoByName(string name, int aisacAttachedIndex, IntPtr aisacInfo) { }

	// RVA: 0x23C9594 Offset: 0x23C9594 VA: 0x23C9594
	private static extern bool criAtomExCategory_GetCurrentAisacControlValueByName(string category_name, string aisac_control_name, out float control_value) { }

	// RVA: 0x23C9680 Offset: 0x23C9680 VA: 0x23C9680
	private static extern CriAtomExCategory.ReactStatus criAtomExCategory_GetReactStatus(string react_name) { }
}

// Namespace: 
public enum CriAtomExCategory.ReactType // TypeDefIndex: 3882
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExCategory.ReactType Ducker = 0;
	public const CriAtomExCategory.ReactType AisacModulationTrigger = 1;
}

// Namespace: 
public enum CriAtomExCategory.ReactDuckerTargetType // TypeDefIndex: 3883
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExCategory.ReactDuckerTargetType Volume = 0;
	public const CriAtomExCategory.ReactDuckerTargetType AisacControlValue = 1;
}

// Namespace: 
public enum CriAtomExCategory.ReactDuckerCurveType // TypeDefIndex: 3884
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExCategory.ReactDuckerCurveType Linear = 0;
	public const CriAtomExCategory.ReactDuckerCurveType Square = 1;
	public const CriAtomExCategory.ReactDuckerCurveType SquareReverse = 2;
	public const CriAtomExCategory.ReactDuckerCurveType SCurve = 3;
	public const CriAtomExCategory.ReactDuckerCurveType FlatAtHalf = 4;
}

// Namespace: 
public struct CriAtomExCategory.ReactFadeParameter // TypeDefIndex: 3885
{
	// Fields
	public CriAtomExCategory.ReactDuckerCurveType curveType; // 0x0
	public float curveStrength; // 0x4
	public ushort fadeTimeMs; // 0x8
}

// Namespace: 
public enum CriAtomExCategory.ReactHoldType // TypeDefIndex: 3886
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExCategory.ReactHoldType WhilePlaying = 0;
	public const CriAtomExCategory.ReactHoldType FixedTime = 1;
}

// Namespace: 
public struct CriAtomExCategory.ReactDuckerParameter // TypeDefIndex: 3887
{
	// Fields
	public CriAtomExCategory.ReactDuckerParameter.Target target; // 0x0
	public CriAtomExCategory.ReactDuckerTargetType targetType; // 0x8
	public CriAtomExCategory.ReactFadeParameter entry; // 0xC
	public CriAtomExCategory.ReactFadeParameter exit; // 0x18
	public CriAtomExCategory.ReactHoldType holdType; // 0x24
	public ushort holdTimeMs; // 0x28
}

// Namespace: 
public struct CriAtomExCategory.ReactDuckerParameter.Volume // TypeDefIndex: 3888
{
	// Fields
	public float level; // 0x0
}

// Namespace: 
public struct CriAtomExCategory.ReactDuckerParameter.AisacControl // TypeDefIndex: 3889
{
	// Fields
	public ushort id; // 0x0
	public float value; // 0x4
}

// Namespace: 
public struct CriAtomExCategory.ReactDuckerParameter.Target // TypeDefIndex: 3890
{
	// Fields
	public CriAtomExCategory.ReactDuckerParameter.Volume volume; // 0x0
	public CriAtomExCategory.ReactDuckerParameter.AisacControl aisacControl; // 0x0
}

// Namespace: 
public struct CriAtomExCategory.ReactAisacModulationParameter // TypeDefIndex: 3891
{
	// Fields
	private int _enableDecrementAisacModulationKey; // 0x0
	public uint decrementAisacModulationKey; // 0x4
	private int _enableIncrementAisacModulationKey; // 0x8
	public uint incrementAisacModulationKey; // 0xC

	// Properties
	public bool enableDecrementAisacModulationKey { get; }
	public bool enableIncrementAisacModulationKey { get; }

	// Methods

	// RVA: 0xD6A31C Offset: 0xD6A31C VA: 0xD6A31C
	public bool get_enableDecrementAisacModulationKey() { }

	// RVA: 0xD6A32C Offset: 0xD6A32C VA: 0xD6A32C
	public bool get_enableIncrementAisacModulationKey() { }
}

// Namespace: 
public struct CriAtomExCategory.ReactParameter // TypeDefIndex: 3892
{
	// Fields
	public CriAtomExCategory.ReactParameter.Parameter parameter; // 0x0
	public CriAtomExCategory.ReactType type; // 0x2C
	public bool enablePausingCue; // 0x30
}

// Namespace: 
public struct CriAtomExCategory.ReactParameter.Parameter // TypeDefIndex: 3893
{
	// Fields
	public CriAtomExCategory.ReactDuckerParameter ducker; // 0x0
	public CriAtomExCategory.ReactAisacModulationParameter aisacModulation; // 0x0
}

// Namespace: 
public enum CriAtomExCategory.ReactStatus // TypeDefIndex: 3894
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExCategory.ReactStatus Stop = 0;
	public const CriAtomExCategory.ReactStatus FadeOut = 1;
	public const CriAtomExCategory.ReactStatus Hold = 2;
	public const CriAtomExCategory.ReactStatus FadeIn = 3;
	public const CriAtomExCategory.ReactStatus Error = 4;
}

// Namespace: 
public static class CriAtomExSequencer // TypeDefIndex: 3895
{
	// Methods

	// RVA: 0x23CFBD0 Offset: 0x23CFBD0 VA: 0x23CFBD0
	public static void add_OnCallback(CriAtomExSequencer.EventCallback value) { }

	// RVA: 0x23CFCD0 Offset: 0x23CFCD0 VA: 0x23CFCD0
	public static void remove_OnCallback(CriAtomExSequencer.EventCallback value) { }

	[ObsoleteAttribute] // RVA: 0xC23598 Offset: 0xC23598 VA: 0xC23598
	// RVA: 0x23D59F4 Offset: 0x23D59F4 VA: 0x23D59F4
	public static void SetEventCallback(CriAtomExSequencer.EventCbFunc func, string separator = "\t") { }
}

// Namespace: 
public struct CriAtomExSequencer.CriAtomExSequenceEventInfo // TypeDefIndex: 3896
{
	// Fields
	public ulong position; // 0x0
	public IntPtr playerHn; // 0x8
	public readonly string tag; // 0x10
	public uint playbackId; // 0x18
	private int type; // 0x1C
	public uint id; // 0x20
	private uint reserved; // 0x24
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xC1EEC4 Offset: 0xC1EEC4 VA: 0xC1EEC4
public sealed class CriAtomExSequencer.EventCbFunc : MulticastDelegate // TypeDefIndex: 3897
{
	// Methods

	// RVA: 0x23D5B28 Offset: 0x23D5B28 VA: 0x23D5B28
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x23D5B38 Offset: 0x23D5B38 VA: 0x23D5B38 Slot: 11
	public virtual void Invoke(string eventParamsString) { }

	// RVA: 0x23D5ED8 Offset: 0x23D5ED8 VA: 0x23D5ED8 Slot: 12
	public virtual IAsyncResult BeginInvoke(string eventParamsString, AsyncCallback callback, object object) { }

	// RVA: 0x23D5EFC Offset: 0x23D5EFC VA: 0x23D5EFC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xC1EED8 Offset: 0xC1EED8 VA: 0xC1EED8
public sealed class CriAtomExSequencer.EventCallback : MulticastDelegate // TypeDefIndex: 3898
{
	// Methods

	// RVA: 0x23CFBC0 Offset: 0x23CFBC0 VA: 0x23CFBC0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x23D531C Offset: 0x23D531C VA: 0x23D531C Slot: 11
	public virtual void Invoke(ref CriAtomExSequencer.CriAtomExSequenceEventInfo criAtomExSequenceInfo) { }

	// RVA: 0x23D5A6C Offset: 0x23D5A6C VA: 0x23D5A6C Slot: 12
	public virtual IAsyncResult BeginInvoke(ref CriAtomExSequencer.CriAtomExSequenceEventInfo criAtomExSequenceInfo, AsyncCallback callback, object object) { }

	// RVA: 0x23D5B00 Offset: 0x23D5B00 VA: 0x23D5B00 Slot: 13
	public virtual void EndInvoke(ref CriAtomExSequencer.CriAtomExSequenceEventInfo criAtomExSequenceInfo, IAsyncResult result) { }
}

// Namespace: 
public static class CriAtomExBeatSync // TypeDefIndex: 3899
{
	// Methods

	// RVA: 0x23C7CD8 Offset: 0x23C7CD8 VA: 0x23C7CD8
	public static void add_OnCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x23C7D40 Offset: 0x23C7D40 VA: 0x23C7D40
	public static void remove_OnCallback(CriAtomExBeatSync.CbFunc value) { }

	[ObsoleteAttribute] // RVA: 0xC235D4 Offset: 0xC235D4 VA: 0xC235D4
	// RVA: 0x23C7DA8 Offset: 0x23C7DA8 VA: 0x23C7DA8
	public static void SetCallback(CriAtomExBeatSync.CbFunc func) { }
}

// Namespace: 
public struct CriAtomExBeatSync.Info // TypeDefIndex: 3900
{
	// Fields
	public IntPtr playerHn; // 0x0
	public uint playbackId; // 0x8
	public uint barCount; // 0xC
	public uint beatCount; // 0x10
	public float beatProgress; // 0x14
	public float bpm; // 0x18
	public int offset; // 0x1C
	public uint numBeats; // 0x20
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xC1EEEC Offset: 0xC1EEEC VA: 0xC1EEEC
public sealed class CriAtomExBeatSync.CbFunc : MulticastDelegate // TypeDefIndex: 3901
{
	// Methods

	// RVA: 0x23C7E10 Offset: 0x23C7E10 VA: 0x23C7E10
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x23C7E20 Offset: 0x23C7E20 VA: 0x23C7E20 Slot: 11
	public virtual void Invoke(ref CriAtomExBeatSync.Info info) { }

	// RVA: 0x23C804C Offset: 0x23C804C VA: 0x23C804C Slot: 12
	public virtual IAsyncResult BeginInvoke(ref CriAtomExBeatSync.Info info, AsyncCallback callback, object object) { }

	// RVA: 0x23C80E0 Offset: 0x23C80E0 VA: 0x23C80E0 Slot: 13
	public virtual void EndInvoke(ref CriAtomExBeatSync.Info info, IAsyncResult result) { }
}

// Namespace: 
public class CriAtomExAsr // TypeDefIndex: 3902
{
	// Methods

	// RVA: 0x23C52B0 Offset: 0x23C52B0 VA: 0x23C52B0
	public void .ctor() { }

	// RVA: 0x23C52B8 Offset: 0x23C52B8 VA: 0x23C52B8
	public static void AttachBusAnalyzer(string busName, int interval, int peakHoldTime) { }

	// RVA: 0x23C5398 Offset: 0x23C5398 VA: 0x23C5398
	public static void AttachBusAnalyzer(int interval, int peakHoldTime) { }

	// RVA: 0x23C547C Offset: 0x23C547C VA: 0x23C547C
	public static void DetachBusAnalyzer(string busName) { }

	// RVA: 0x23C552C Offset: 0x23C552C VA: 0x23C552C
	public static void DetachBusAnalyzer() { }

	// RVA: 0x23C55F8 Offset: 0x23C55F8 VA: 0x23C55F8
	public static void GetBusAnalyzerInfo(string busName, out CriAtomExAsr.BusAnalyzerInfo info) { }

	[ObsoleteAttribute] // RVA: 0xC23610 Offset: 0xC23610 VA: 0xC23610
	// RVA: 0x23C5AD0 Offset: 0x23C5AD0 VA: 0x23C5AD0
	public static void GetBusAnalyzerInfo(int busId, out CriAtomExAsr.BusAnalyzerInfo info) { }

	// RVA: 0x23C5D10 Offset: 0x23C5D10 VA: 0x23C5D10
	public static void SetBusVolume(string busName, float volume) { }

	[ObsoleteAttribute] // RVA: 0xC23648 Offset: 0xC23648 VA: 0xC23648
	// RVA: 0x23C5DD0 Offset: 0x23C5DD0 VA: 0x23C5DD0
	public static void SetBusVolume(int busId, float volume) { }

	// RVA: 0x23C5E80 Offset: 0x23C5E80 VA: 0x23C5E80
	public static void SetBusSendLevel(string busName, string sendTo, float level) { }

	[ObsoleteAttribute] // RVA: 0xC23680 Offset: 0xC23680 VA: 0xC23680
	// RVA: 0x23C5F68 Offset: 0x23C5F68 VA: 0x23C5F68
	public static void SetBusSendLevel(int busId, int sendTo, float level) { }

	// RVA: 0x23C6028 Offset: 0x23C6028 VA: 0x23C6028
	public static void SetBusMatrix(string busName, int inputChannels, int outputChannels, float[] matrix) { }

	[ObsoleteAttribute] // RVA: 0xC236B8 Offset: 0xC236B8 VA: 0xC236B8
	// RVA: 0x23C6108 Offset: 0x23C6108 VA: 0x23C6108
	public static void SetBusMatrix(int busId, int inputChannels, int outputChannels, float[] matrix) { }

	// RVA: 0x23C61D8 Offset: 0x23C61D8 VA: 0x23C61D8
	public static void SetEffectBypass(string busName, string effectName, bool bypass) { }

	// RVA: 0x23C62BC Offset: 0x23C62BC VA: 0x23C62BC
	public static void SetEffectParameter(string busName, string effectName, uint parameterIndex, float parameterValue) { }

	// RVA: 0x23C64A8 Offset: 0x23C64A8 VA: 0x23C64A8
	public static float GetEffectParameter(string busName, string effectName, uint parameterIndex) { }

	// RVA: 0x23C6598 Offset: 0x23C6598 VA: 0x23C6598
	public static bool RegisterEffectInterface(IntPtr afx_interface) { }

	// RVA: 0x23C6640 Offset: 0x23C6640 VA: 0x23C6640
	public static void UnregisterEffectInterface(IntPtr afx_interface) { }

	// RVA: 0x23C66E0 Offset: 0x23C66E0 VA: 0x23C66E0
	public static void GetBusVolume(string busName, out float volume) { }

	// RVA: 0x23C52DC Offset: 0x23C52DC VA: 0x23C52DC
	private static extern void criAtomExAsr_AttachBusAnalyzerByName(string busName, ref CriAtomExAsr.BusAnalyzerConfig config) { }

	// RVA: 0x23C53D0 Offset: 0x23C53D0 VA: 0x23C53D0
	private static extern void criAtomExAsr_AttachBusAnalyzer(int busNo, ref CriAtomExAsr.BusAnalyzerConfig config) { }

	// RVA: 0x23C5480 Offset: 0x23C5480 VA: 0x23C5480
	private static extern void criAtomExAsr_DetachBusAnalyzerByName(string busName) { }

	// RVA: 0x23C555C Offset: 0x23C555C VA: 0x23C555C
	private static extern void criAtomExAsr_DetachBusAnalyzer(int busNo) { }

	// RVA: 0x23C578C Offset: 0x23C578C VA: 0x23C578C
	private static extern void criAtomExAsr_GetBusAnalyzerInfoByName(string busName, IntPtr info) { }

	// RVA: 0x23C5C64 Offset: 0x23C5C64 VA: 0x23C5C64
	private static extern void criAtomExAsr_GetBusAnalyzerInfo(int busNo, IntPtr info) { }

	// RVA: 0x23C5D14 Offset: 0x23C5D14 VA: 0x23C5D14
	private static extern void criAtomExAsr_SetBusVolumeByName(string busName, float volume) { }

	// RVA: 0x23C5DD4 Offset: 0x23C5DD4 VA: 0x23C5DD4
	private static extern void criAtomExAsr_SetBusVolume(int busNo, float volume) { }

	// RVA: 0x23C5E84 Offset: 0x23C5E84 VA: 0x23C5E84
	private static extern void criAtomExAsr_SetBusSendLevelByName(string busName, string sendtoName, float level) { }

	// RVA: 0x23C5F6C Offset: 0x23C5F6C VA: 0x23C5F6C
	private static extern void criAtomExAsr_SetBusSendLevel(int busNo, int sendtoNo, float level) { }

	// RVA: 0x23C602C Offset: 0x23C602C VA: 0x23C602C
	private static extern void criAtomExAsr_SetBusMatrixByName(string busName, int inputChannels, int outputChannels, float[] matrix) { }

	// RVA: 0x23C610C Offset: 0x23C610C VA: 0x23C610C
	private static extern void criAtomExAsr_SetBusMatrix(int busNo, int inputChannels, int outputChannels, float[] matrix) { }

	// RVA: 0x23C61E0 Offset: 0x23C61E0 VA: 0x23C61E0
	private static extern void criAtomExAsr_SetEffectBypass(string busName, string effectName, bool bypass) { }

	// RVA: 0x23C63D4 Offset: 0x23C63D4 VA: 0x23C63D4
	private static extern void criAtomExAsr_UpdateEffectParameters(string busName, string effectName) { }

	// RVA: 0x23C62E8 Offset: 0x23C62E8 VA: 0x23C62E8
	private static extern void criAtomExAsr_SetEffectParameter(string busName, string effectName, uint parameterIndex, float parameterValue) { }

	// RVA: 0x23C64AC Offset: 0x23C64AC VA: 0x23C64AC
	private static extern float criAtomExAsr_GetEffectParameter(string busName, string effectName, uint parameterIndex) { }

	// RVA: 0x23C659C Offset: 0x23C659C VA: 0x23C659C
	private static extern bool criAtomExAsr_RegisterEffectInterface(IntPtr afx_interface) { }

	// RVA: 0x23C6644 Offset: 0x23C6644 VA: 0x23C6644
	private static extern void criAtomExAsr_UnregisterEffectInterface(IntPtr afx_interface) { }

	// RVA: 0x23C66E4 Offset: 0x23C66E4 VA: 0x23C66E4
	private static extern void criAtomExAsr_GetBusVolumeByName(string busName, out float volume) { }
}

// Namespace: 
private struct CriAtomExAsr.BusAnalyzerConfig // TypeDefIndex: 3903
{
	// Fields
	public int interval; // 0x0
	public int peakHoldTime; // 0x4
}

// Namespace: 
public struct CriAtomExAsr.BusAnalyzerInfo // TypeDefIndex: 3904
{
	// Fields
	public int numChannels; // 0x0
	public float[] rmsLevels; // 0x8
	public float[] peakLevels; // 0x10
	public float[] peakHoldLevels; // 0x18

	// Methods

	// RVA: 0xD6A2A0 Offset: 0xD6A2A0 VA: 0xD6A2A0
	public void .ctor(byte[] data) { }
}

// Namespace: 
public static class CriAtomExLatencyEstimator // TypeDefIndex: 3905
{
	// Methods

	// RVA: 0x23C97F4 Offset: 0x23C97F4 VA: 0x23C97F4
	public static void InitializeModule() { }

	// RVA: 0x23C9884 Offset: 0x23C9884 VA: 0x23C9884
	public static void FinalizeModule() { }

	// RVA: 0x23C9914 Offset: 0x23C9914 VA: 0x23C9914
	public static CriAtomExLatencyEstimator.EstimatorInfo GetCurrentInfo() { }

	// RVA: 0x23C97F8 Offset: 0x23C97F8 VA: 0x23C97F8
	private static extern void criAtomLatencyEstimator_Initialize_ANDROID() { }

	// RVA: 0x23C9888 Offset: 0x23C9888 VA: 0x23C9888
	private static extern void criAtomLatencyEstimator_Finalize_ANDROID() { }

	// RVA: 0x23C9918 Offset: 0x23C9918 VA: 0x23C9918
	private static extern CriAtomExLatencyEstimator.EstimatorInfo criAtomLatencyEstimator_GetCurrentInfo_ANDROID() { }
}

// Namespace: 
public enum CriAtomExLatencyEstimator.Status // TypeDefIndex: 3906
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExLatencyEstimator.Status Stop = 0;
	public const CriAtomExLatencyEstimator.Status Processing = 1;
	public const CriAtomExLatencyEstimator.Status Done = 2;
	public const CriAtomExLatencyEstimator.Status Error = 3;
}

// Namespace: 
public struct CriAtomExLatencyEstimator.EstimatorInfo // TypeDefIndex: 3907
{
	// Fields
	public CriAtomExLatencyEstimator.Status status; // 0x0
	public uint estimated_latency; // 0x4
}

// Namespace: 
public class CriAtomEx3dListener : CriDisposable // TypeDefIndex: 3908
{
	// Fields
	private IntPtr handle; // 0x20

	// Properties
	public IntPtr nativeHandle { get; }

	// Methods

	// RVA: 0x246CD4C Offset: 0x246CD4C VA: 0x246CD4C
	public void .ctor() { }

	// RVA: 0x246CEA0 Offset: 0x246CEA0 VA: 0x246CEA0 Slot: 5
	public override void Dispose() { }

	// RVA: 0x246CEA8 Offset: 0x246CEA8 VA: 0x246CEA8
	private void Dispose(bool disposing) { }

	// RVA: 0x246CFFC Offset: 0x246CFFC VA: 0x246CFFC
	public IntPtr get_nativeHandle() { }

	// RVA: 0x246D004 Offset: 0x246D004 VA: 0x246D004
	public void Update() { }

	// RVA: 0x246D104 Offset: 0x246D104 VA: 0x246D104
	public void ResetParameters() { }

	// RVA: 0x246D204 Offset: 0x246D204 VA: 0x246D204
	public void SetPosition(float x, float y, float z) { }

	// RVA: 0x246D344 Offset: 0x246D344 VA: 0x246D344
	public void SetVelocity(float x, float y, float z) { }

	// RVA: 0x246D484 Offset: 0x246D484 VA: 0x246D484
	public void SetOrientation(float fx, float fy, float fz, float ux, float uy, float uz) { }

	[ObsoleteAttribute] // RVA: 0xC236F0 Offset: 0xC236F0 VA: 0xC236F0
	// RVA: 0x246D5F4 Offset: 0x246D5F4 VA: 0x246D5F4
	public void SetDistanceFactor(float distanceFactor) { }

	// RVA: 0x246D770 Offset: 0x246D770 VA: 0x246D770
	public void SetDopplerMultiplier(float dopplerMultiplier) { }

	// RVA: 0x246D830 Offset: 0x246D830 VA: 0x246D830
	public void SetFocusPoint(float x, float y, float z) { }

	// RVA: 0x246D970 Offset: 0x246D970 VA: 0x246D970
	public void SetDistanceFocusLevel(float distanceFocusLevel) { }

	// RVA: 0x246DA94 Offset: 0x246DA94 VA: 0x246DA94
	public void SetDirectionFocusLevel(float directionFocusLevel) { }

	// RVA: 0x246DBB8 Offset: 0x246DBB8 VA: 0x246DBB8
	public void Set3dRegion(CriAtomEx3dRegion region3d) { }
