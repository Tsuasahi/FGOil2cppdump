	private void UpdateExclusive() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226E540 Offset: 0x226E540 VA: 0x226E540
	|-GestureRecognizerTS<object>.UpdateExclusive
	*/

	// RVA: -1 Offset: -1
	private void UpdatePerFinger() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226E664 Offset: 0x226E664 VA: 0x226E664
	|-GestureRecognizerTS<object>.UpdatePerFinger
	*/

	// RVA: -1 Offset: -1
	private void UpdateUsingClusters() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226E8D4 Offset: 0x226E8D4 VA: 0x226E8D4
	|-GestureRecognizerTS<object>.UpdateUsingClusters
	*/

	// RVA: -1 Offset: -1 Slot: 25
	protected virtual void ProcessCluster(FingerClusterManager.Cluster cluster) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226EADC Offset: 0x226EADC VA: 0x226EADC
	|-GestureRecognizerTS<DragGesture>.ProcessCluster
	|-GestureRecognizerTS<LongPressGesture>.ProcessCluster
	|-GestureRecognizerTS<PinchGesture>.ProcessCluster
	|-GestureRecognizerTS<PointCloudGesture>.ProcessCluster
	|-GestureRecognizerTS<SwipeGesture>.ProcessCluster
	|-GestureRecognizerTS<object>.ProcessCluster
	|-GestureRecognizerTS<TapGesture>.ProcessCluster
	|-GestureRecognizerTS<TwistGesture>.ProcessCluster
	*/

	// RVA: -1 Offset: -1
	private void ReleaseFingers(T gesture) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226EC00 Offset: 0x226EC00 VA: 0x226EC00
	|-GestureRecognizerTS<object>.ReleaseFingers
	*/

	// RVA: -1 Offset: -1
	private void Begin(T gesture, int clusterId, FingerGestures.IFingerList touches) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226ECC0 Offset: 0x226ECC0 VA: 0x226ECC0
	|-GestureRecognizerTS<object>.Begin
	*/

	// RVA: -1 Offset: -1 Slot: 26
	protected virtual FingerGestures.IFingerList GetTouches(T gesture) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226EF38 Offset: 0x226EF38 VA: 0x226EF38
	|-GestureRecognizerTS<DragGesture>.GetTouches
	|-GestureRecognizerTS<LongPressGesture>.GetTouches
	|-GestureRecognizerTS<PinchGesture>.GetTouches
	|-GestureRecognizerTS<PointCloudGesture>.GetTouches
	|-GestureRecognizerTS<SwipeGesture>.GetTouches
	|-GestureRecognizerTS<object>.GetTouches
	|-GestureRecognizerTS<TapGesture>.GetTouches
	|-GestureRecognizerTS<TwistGesture>.GetTouches
	*/

	// RVA: -1 Offset: -1 Slot: 27
	protected virtual void UpdateGesture(T gesture, FingerGestures.IFingerList touches) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226F074 Offset: 0x226F074 VA: 0x226F074
	|-GestureRecognizerTS<DragGesture>.UpdateGesture
	|-GestureRecognizerTS<LongPressGesture>.UpdateGesture
	|-GestureRecognizerTS<PinchGesture>.UpdateGesture
	|-GestureRecognizerTS<PointCloudGesture>.UpdateGesture
	|-GestureRecognizerTS<SwipeGesture>.UpdateGesture
	|-GestureRecognizerTS<object>.UpdateGesture
	|-GestureRecognizerTS<TapGesture>.UpdateGesture
	|-GestureRecognizerTS<TwistGesture>.UpdateGesture
	*/

	// RVA: -1 Offset: -1
	protected void RaiseEvent(T gesture) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226F3D4 Offset: 0x226F3D4 VA: 0x226F3D4
	|-GestureRecognizerTS<DragGesture>.RaiseEvent
	|-GestureRecognizerTS<PinchGesture>.RaiseEvent
	|-GestureRecognizerTS<object>.RaiseEvent
	|-GestureRecognizerTS<TwistGesture>.RaiseEvent
	*/

	// RVA: -1 Offset: -1
	private static void .cctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226F61C Offset: 0x226F61C VA: 0x226F61C
	|-GestureRecognizerTS<object>..cctor
	*/

	[CompilerGeneratedAttribute] // RVA: 0xC24350 Offset: 0xC24350 VA: 0xC24350
	// RVA: -1 Offset: -1
	private static bool <FindFreeGesture>m__0(T g) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226F6AC Offset: 0x226F6AC VA: 0x226F6AC
	|-GestureRecognizerTS<object>.<FindFreeGesture>m__0
	*/
}

// Namespace: 
public sealed class GestureRecognizerTS.GestureEventHandler<T> : MulticastDelegate // TypeDefIndex: 4147
{
	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(object object, IntPtr method) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226D4CC Offset: 0x226D4CC VA: 0x226D4CC
	|-GestureRecognizerTS.GestureEventHandler<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T gesture) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226D4DC Offset: 0x226D4DC VA: 0x226D4DC
	|-GestureRecognizerTS.GestureEventHandler<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T gesture, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226D87C Offset: 0x226D87C VA: 0x226D87C
	|-GestureRecognizerTS.GestureEventHandler<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226D8A0 Offset: 0x226D8A0 VA: 0x226D8A0
	|-GestureRecognizerTS.GestureEventHandler<object>.EndInvoke
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC20518 Offset: 0xC20518 VA: 0xC20518
private sealed class GestureRecognizerTS.<FindGestureByCluster>c__AnonStorey0<T> // TypeDefIndex: 4148
{
	// Fields
	internal FingerClusterManager.Cluster cluster; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226D454 Offset: 0x226D454 VA: 0x226D454
	|-GestureRecognizerTS.<FindGestureByCluster>c__AnonStorey0<object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal bool <>m__0(T g) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226D480 Offset: 0x226D480 VA: 0x226D480
	|-GestureRecognizerTS.<FindGestureByCluster>c__AnonStorey0<object>.<>m__0
	*/
}

// Namespace: 
public abstract class GestureRecognizer : MonoBehaviour // TypeDefIndex: 4149
{
	// Fields
	protected static readonly FingerGestures.IFingerList EmptyFingerList; // 0x0
	[SerializeField] // RVA: 0xC2246C Offset: 0xC2246C VA: 0xC2246C
	private int requiredFingerCount; // 0x18
	public DistanceUnit DistanceUnit; // 0x1C
	public int MaxSimultaneousGestures; // 0x20
	public GestureResetMode ResetMode; // 0x24
	public ScreenRaycaster Raycaster; // 0x28
	public FingerClusterManager ClusterManager; // 0x30
	public GestureRecognizerDelegate Delegate; // 0x38
	public bool UseSendMessage; // 0x40
	public string EventMessageName; // 0x48
	public GameObject EventMessageTarget; // 0x50
	public GestureRecognizer.SelectionType SendMessageToSelection; // 0x58
	public bool IsExclusive; // 0x5C

	// Properties
	public virtual int RequiredFingerCount { get; set; }
	public virtual bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0x1DF7764 Offset: 0x1DF7764 VA: 0x1DF7764
	protected void .ctor() { }

	// RVA: 0x1DF7784 Offset: 0x1DF7784 VA: 0x1DF7784 Slot: 4
	public virtual int get_RequiredFingerCount() { }

	// RVA: 0x1DF778C Offset: 0x1DF778C VA: 0x1DF778C Slot: 5
	public virtual void set_RequiredFingerCount(int value) { }

	// RVA: 0x1DF7794 Offset: 0x1DF7794 VA: 0x1DF7794 Slot: 6
	public virtual bool get_SupportFingerClustering() { }

	// RVA: 0x1DF779C Offset: 0x1DF779C VA: 0x1DF779C Slot: 7
	public virtual GestureResetMode GetDefaultResetMode() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string GetDefaultEventMessageName();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract Type GetGestureType();

	// RVA: 0x1DF77A4 Offset: 0x1DF77A4 VA: 0x1DF77A4 Slot: 10
	protected virtual void Awake() { }

	// RVA: 0x1DF78D8 Offset: 0x1DF78D8 VA: 0x1DF78D8 Slot: 11
	protected virtual void OnEnable() { }

	// RVA: 0x1DF79A8 Offset: 0x1DF79A8 VA: 0x1DF79A8 Slot: 12
	protected virtual void OnDisable() { }

	// RVA: 0x1DF7A78 Offset: 0x1DF7A78 VA: 0x1DF7A78
	protected void Acquire(FingerGestures.Finger finger) { }

	// RVA: 0x1DF7B30 Offset: 0x1DF7B30 VA: 0x1DF7B30
	protected bool Release(FingerGestures.Finger finger) { }

	// RVA: 0x1DF7BAC Offset: 0x1DF7BAC VA: 0x1DF7BAC Slot: 13
	protected virtual void Start() { }

	// RVA: 0x1DF7D10 Offset: 0x1DF7D10 VA: 0x1DF7D10
	protected bool Young(FingerGestures.IFingerList touches) { }

	// RVA: 0x1DEDE7C Offset: 0x1DEDE7C VA: 0x1DEDE7C
	public float ToPixels(float distance) { }

	// RVA: 0x1DF7DEC Offset: 0x1DF7DEC VA: 0x1DF7DEC
	public float ToSqrPixels(float distance) { }

	// RVA: 0x1DF7E0C Offset: 0x1DF7E0C VA: 0x1DF7E0C
	private static void .cctor() { }
}

// Namespace: 
public enum GestureRecognizer.SelectionType // TypeDefIndex: 4150
{
	// Fields
	public int value__; // 0x0
	public const GestureRecognizer.SelectionType Default = 0;
	public const GestureRecognizer.SelectionType StartSelection = 1;
	public const GestureRecognizer.SelectionType CurrentSelection = 2;
	public const GestureRecognizer.SelectionType None = 3;
}

// Namespace: 
public abstract class GestureRecognizerDelegate : MonoBehaviour // TypeDefIndex: 4151
{
	// Methods

	// RVA: 0x1DF7E74 Offset: 0x1DF7E74 VA: 0x1DF7E74
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool CanBegin(Gesture gesture, FingerGestures.IFingerList touches);
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F584 Offset: 0xC1F584 VA: 0xC1F584
public class FingerClusterManager : MonoBehaviour // TypeDefIndex: 4152
{
	// Fields
	public DistanceUnit DistanceUnit; // 0x18
	public float ClusterRadius; // 0x1C
	public float TimeTolerance; // 0x20
	private int lastUpdateFrame; // 0x24
	private int nextClusterId; // 0x28
	private List<FingerClusterManager.Cluster> clusters; // 0x30
	private List<FingerClusterManager.Cluster> clusterPool; // 0x38
	private FingerGestures.FingerList fingersAdded; // 0x40
	private FingerGestures.FingerList fingersRemoved; // 0x48

	// Properties
	public FingerGestures.IFingerList FingersAdded { get; }
	public FingerGestures.IFingerList FingersRemoved { get; }
	public List<FingerClusterManager.Cluster> Clusters { get; }

	// Methods

	// RVA: 0x1DEF2B8 Offset: 0x1DEF2B8 VA: 0x1DEF2B8
	public void .ctor() { }

	// RVA: 0x1DEF2D4 Offset: 0x1DEF2D4 VA: 0x1DEF2D4
	public FingerGestures.IFingerList get_FingersAdded() { }

	// RVA: 0x1DEF2DC Offset: 0x1DEF2DC VA: 0x1DEF2DC
	public FingerGestures.IFingerList get_FingersRemoved() { }

	// RVA: 0x1DEF2E4 Offset: 0x1DEF2E4 VA: 0x1DEF2E4
	public List<FingerClusterManager.Cluster> get_Clusters() { }

	// RVA: 0x1DEF2EC Offset: 0x1DEF2EC VA: 0x1DEF2EC
	public List<FingerClusterManager.Cluster> GetClustersPool() { }

	// RVA: 0x1DEF2F4 Offset: 0x1DEF2F4 VA: 0x1DEF2F4
	private void Awake() { }

	// RVA: 0x1DEF420 Offset: 0x1DEF420 VA: 0x1DEF420
	public void Update() { }

	// RVA: 0x1DEFE68 Offset: 0x1DEFE68 VA: 0x1DEFE68
	public FingerClusterManager.Cluster FindClusterById(int clusterId) { }

	// RVA: 0x1DEFD08 Offset: 0x1DEFD08 VA: 0x1DEFD08
	private FingerClusterManager.Cluster NewCluster() { }

	// RVA: 0x1DEFB2C Offset: 0x1DEFB2C VA: 0x1DEFB2C
	private FingerClusterManager.Cluster FindExistingCluster(FingerGestures.Finger finger) { }
}

// Namespace: 
[Serializable]
public class FingerClusterManager.Cluster // TypeDefIndex: 4153
{
	// Fields
	public int Id; // 0x10
	public float StartTime; // 0x14
	public FingerGestures.FingerList Fingers; // 0x18

	// Methods

	// RVA: 0x1DEFF40 Offset: 0x1DEFF40 VA: 0x1DEFF40
	public void .ctor() { }

	// RVA: 0x1DEFFA4 Offset: 0x1DEFFA4 VA: 0x1DEFFA4
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC20528 Offset: 0xC20528 VA: 0xC20528
private sealed class FingerClusterManager.<FindClusterById>c__AnonStorey0 // TypeDefIndex: 4154
{
	// Fields
	internal int clusterId; // 0x10

	// Methods

	// RVA: 0x1DEFF38 Offset: 0x1DEFF38 VA: 0x1DEFF38
	public void .ctor() { }

	// RVA: 0x1DF0118 Offset: 0x1DF0118 VA: 0x1DF0118
	internal bool <>m__0(FingerClusterManager.Cluster c) { }
}

// Namespace: 
public struct ScreenRaycastData // TypeDefIndex: 4155
{
	// Fields
	public bool Is2D; // 0x0
	public RaycastHit Hit3D; // 0x4
	public RaycastHit2D Hit2D; // 0x30

	// Properties
	public GameObject GameObject { get; }

	// Methods

	// RVA: 0xD73668 Offset: 0xD73668 VA: 0xD73668
	public GameObject get_GameObject() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F5BC Offset: 0xC1F5BC VA: 0xC1F5BC
public class ScreenRaycaster : MonoBehaviour // TypeDefIndex: 4156
{
	// Fields
	public Camera[] Cameras; // 0x18
	public LayerMask IgnoreLayerMask; // 0x20
	public float RayThickness; // 0x24
	public bool VisualizeRaycasts; // 0x28
	public bool UsePhysics2D; // 0x29

	// Methods

	// RVA: 0x28FB5E4 Offset: 0x28FB5E4 VA: 0x28FB5E4
	public void .ctor() { }

	// RVA: 0x28FB5F4 Offset: 0x28FB5F4 VA: 0x28FB5F4
	private void Start() { }

	// RVA: 0x28FB6C4 Offset: 0x28FB6C4 VA: 0x28FB6C4
	public bool Raycast(Vector2 screenPos, out ScreenRaycastData hitData) { }

	// RVA: 0x28FB840 Offset: 0x28FB840 VA: 0x28FB840
	private bool Raycast(Camera cam, Vector2 screenPos, out ScreenRaycastData hitData) { }
}

// Namespace: 
public class FingerDownEvent : FingerEvent // TypeDefIndex: 4157
{
	// Methods

	// RVA: 0x1DF1E50 Offset: 0x1DF1E50 VA: 0x1DF1E50
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F5F4 Offset: 0xC1F5F4 VA: 0xC1F5F4
public class FingerDownDetector : FingerEventDetector<FingerDownEvent> // TypeDefIndex: 4158
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC2247C Offset: 0xC2247C VA: 0xC2247C
	[DebuggerBrowsableAttribute] // RVA: 0xC2247C Offset: 0xC2247C VA: 0xC2247C
	private FingerEventDetector.FingerEventHandler<FingerDownEvent> OnFingerDown; // 0xA0
	public string MessageName; // 0xA8

	// Methods

	// RVA: 0x1DF1948 Offset: 0x1DF1948 VA: 0x1DF1948
	public void .ctor() { }

	// RVA: 0x1DF19A8 Offset: 0x1DF19A8 VA: 0x1DF19A8
	public void add_OnFingerDown(FingerEventDetector.FingerEventHandler<FingerDownEvent> value) { }

	// RVA: 0x1DF1A94 Offset: 0x1DF1A94 VA: 0x1DF1A94
	public void remove_OnFingerDown(FingerEventDetector.FingerEventHandler<FingerDownEvent> value) { }

	// RVA: 0x1DF1B80 Offset: 0x1DF1B80 VA: 0x1DF1B80 Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
public enum FingerHoverPhase // TypeDefIndex: 4159
{
	// Fields
	public int value__; // 0x0
	public const FingerHoverPhase None = 0;
	public const FingerHoverPhase Enter = 1;
	public const FingerHoverPhase Exit = 2;
}

// Namespace: 
public class FingerHoverEvent : FingerEvent // TypeDefIndex: 4160
{
	// Fields
	private FingerHoverPhase phase; // 0x84
	internal GameObject PreviousSelection; // 0x88

	// Properties
	public FingerHoverPhase Phase { get; set; }

	// Methods

	// RVA: 0x1DF6670 Offset: 0x1DF6670 VA: 0x1DF6670
	public void .ctor() { }

	// RVA: 0x1DF6674 Offset: 0x1DF6674 VA: 0x1DF6674
	public FingerHoverPhase get_Phase() { }

	// RVA: 0x1DF6504 Offset: 0x1DF6504 VA: 0x1DF6504
	internal void set_Phase(FingerHoverPhase value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F62C Offset: 0xC1F62C VA: 0xC1F62C
public class FingerHoverDetector : FingerEventDetector<FingerHoverEvent> // TypeDefIndex: 4161
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC224B8 Offset: 0xC224B8 VA: 0xC224B8
	[DebuggerBrowsableAttribute] // RVA: 0xC224B8 Offset: 0xC224B8 VA: 0xC224B8
	private FingerEventDetector.FingerEventHandler<FingerHoverEvent> OnFingerHover; // 0xA0
	public string MessageName; // 0xA8

	// Methods

	// RVA: 0x1DF61A4 Offset: 0x1DF61A4 VA: 0x1DF61A4
	public void .ctor() { }

	// RVA: 0x1DF6204 Offset: 0x1DF6204 VA: 0x1DF6204
	public void add_OnFingerHover(FingerEventDetector.FingerEventHandler<FingerHoverEvent> value) { }

	// RVA: 0x1DF62F0 Offset: 0x1DF62F0 VA: 0x1DF62F0
	public void remove_OnFingerHover(FingerEventDetector.FingerEventHandler<FingerHoverEvent> value) { }

	// RVA: 0x1DF63DC Offset: 0x1DF63DC VA: 0x1DF63DC Slot: 7
	protected override void Start() { }

	// RVA: 0x1DF645C Offset: 0x1DF645C VA: 0x1DF645C
	private bool FireEvent(FingerHoverEvent e, FingerHoverPhase phase) { }

	// RVA: 0x1DF650C Offset: 0x1DF650C VA: 0x1DF650C Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
public enum FingerMotionPhase // TypeDefIndex: 4162
{
	// Fields
	public int value__; // 0x0
	public const FingerMotionPhase None = 0;
	public const FingerMotionPhase Started = 1;
	public const FingerMotionPhase Updated = 2;
	public const FingerMotionPhase Ended = 3;
}

// Namespace: 
public class FingerMotionEvent : FingerEvent // TypeDefIndex: 4163
{
	// Fields
	private FingerMotionPhase phase; // 0x84
	private Vector2 position; // 0x88
	internal float StartTime; // 0x90

	// Properties
	public override Vector2 Position { get; set; }
	public FingerMotionPhase Phase { get; set; }
	public float ElapsedTime { get; }

	// Methods

	// RVA: 0x1DF6EAC Offset: 0x1DF6EAC VA: 0x1DF6EAC
	public void .ctor() { }

	// RVA: 0x1DF6F1C Offset: 0x1DF6F1C VA: 0x1DF6F1C Slot: 4
	public override Vector2 get_Position() { }

	// RVA: 0x1DF6F24 Offset: 0x1DF6F24 VA: 0x1DF6F24 Slot: 5
	internal override void set_Position(Vector2 value) { }

	// RVA: 0x1DF6C30 Offset: 0x1DF6C30 VA: 0x1DF6C30
	public FingerMotionPhase get_Phase() { }

	// RVA: 0x1DF6C28 Offset: 0x1DF6C28 VA: 0x1DF6C28
	internal void set_Phase(FingerMotionPhase value) { }

	// RVA: 0x1DF6F2C Offset: 0x1DF6F2C VA: 0x1DF6F2C
	public float get_ElapsedTime() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F664 Offset: 0xC1F664 VA: 0xC1F664
public class FingerMotionDetector : FingerEventDetector<FingerMotionEvent> // TypeDefIndex: 4164
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC224F4 Offset: 0xC224F4 VA: 0xC224F4
	[DebuggerBrowsableAttribute] // RVA: 0xC224F4 Offset: 0xC224F4 VA: 0xC224F4
	private FingerEventDetector.FingerEventHandler<FingerMotionEvent> OnFingerMove; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC22530 Offset: 0xC22530 VA: 0xC22530
	[DebuggerBrowsableAttribute] // RVA: 0xC22530 Offset: 0xC22530 VA: 0xC22530
	private FingerEventDetector.FingerEventHandler<FingerMotionEvent> OnFingerStationary; // 0xA8
	public string MoveMessageName; // 0xB0
	public string StationaryMessageName; // 0xB8
	public bool TrackMove; // 0xC0
	public bool TrackStationary; // 0xC1

	// Methods

	// RVA: 0x1DF667C Offset: 0x1DF667C VA: 0x1DF667C
	public void .ctor() { }

	// RVA: 0x1DF66F4 Offset: 0x1DF66F4 VA: 0x1DF66F4
	public void add_OnFingerMove(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0x1DF67E0 Offset: 0x1DF67E0 VA: 0x1DF67E0
	public void remove_OnFingerMove(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0x1DF68CC Offset: 0x1DF68CC VA: 0x1DF68CC
	public void add_OnFingerStationary(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0x1DF69B8 Offset: 0x1DF69B8 VA: 0x1DF69B8
	public void remove_OnFingerStationary(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0x1DF6AA4 Offset: 0x1DF6AA4 VA: 0x1DF6AA4
	private bool FireEvent(FingerMotionEvent e, FingerMotionDetector.EventType eventType, FingerMotionPhase phase, Vector2 position, bool updateSelection) { }

	// RVA: 0x1DF6C38 Offset: 0x1DF6C38 VA: 0x1DF6C38 Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
private enum FingerMotionDetector.EventType // TypeDefIndex: 4165
{
	// Fields
	public int value__; // 0x0
	public const FingerMotionDetector.EventType Move = 0;
	public const FingerMotionDetector.EventType Stationary = 1;
}

// Namespace: 
public class FingerUpEvent : FingerEvent // TypeDefIndex: 4166
{
	// Fields
	private float timeHeldDown; // 0x84

	// Properties
	public float TimeHeldDown { get; set; }

	// Methods

	// RVA: 0x1DF7314 Offset: 0x1DF7314 VA: 0x1DF7314
	public void .ctor() { }

	// RVA: 0x1DF7318 Offset: 0x1DF7318 VA: 0x1DF7318
	public float get_TimeHeldDown() { }

	// RVA: 0x1DF730C Offset: 0x1DF730C VA: 0x1DF730C
	internal void set_TimeHeldDown(float value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F69C Offset: 0xC1F69C VA: 0xC1F69C
public class FingerUpDetector : FingerEventDetector<FingerUpEvent> // TypeDefIndex: 4167
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC2256C Offset: 0xC2256C VA: 0xC2256C
	[DebuggerBrowsableAttribute] // RVA: 0xC2256C Offset: 0xC2256C VA: 0xC2256C
	private FingerEventDetector.FingerEventHandler<FingerUpEvent> OnFingerUp; // 0xA0
	public string MessageName; // 0xA8

	// Methods

	// RVA: 0x1DF6FB0 Offset: 0x1DF6FB0 VA: 0x1DF6FB0
	public void .ctor() { }

	// RVA: 0x1DF7010 Offset: 0x1DF7010 VA: 0x1DF7010
	public void add_OnFingerUp(FingerEventDetector.FingerEventHandler<FingerUpEvent> value) { }

	// RVA: 0x1DF70FC Offset: 0x1DF70FC VA: 0x1DF70FC
	public void remove_OnFingerUp(FingerEventDetector.FingerEventHandler<FingerUpEvent> value) { }

	// RVA: 0x1DF71E8 Offset: 0x1DF71E8 VA: 0x1DF71E8 Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC1F6D4 Offset: 0xC1F6D4 VA: 0xC1F6D4
public class FingerGestures : MonoBehaviour // TypeDefIndex: 4168
{
	// Fields
	public static readonly RuntimePlatform[] TouchScreenPlatforms; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC225A8 Offset: 0xC225A8 VA: 0xC225A8
	[DebuggerBrowsableAttribute] // RVA: 0xC225A8 Offset: 0xC225A8 VA: 0xC225A8
	private static Gesture.EventHandler OnGestureEvent; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC225E4 Offset: 0xC225E4 VA: 0xC225E4
	[DebuggerBrowsableAttribute] // RVA: 0xC225E4 Offset: 0xC225E4 VA: 0xC225E4
	private static FingerEventDetector.FingerEventHandler<FingerEvent> OnFingerEvent; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC22620 Offset: 0xC22620 VA: 0xC22620
	[DebuggerBrowsableAttribute] // RVA: 0xC22620 Offset: 0xC22620 VA: 0xC22620
	private static FingerGestures.EventHandler OnInputProviderChanged; // 0x18
	public bool makePersistent; // 0x18
	public bool detectUnityRemote; // 0x19
	public FGInputProvider mouseInputProviderPrefab; // 0x20
	public FGInputProvider touchInputProviderPrefab; // 0x28
	private FingerClusterManager fingerClusterManager; // 0x30
	private FGInputProvider inputProvider; // 0x38
	private static List<GestureRecognizer> gestureRecognizers; // 0x20
	private static FingerGestures instance; // 0x28
	private FingerGestures.Finger[] fingers; // 0x40
	private FingerGestures.FingerList touches; // 0x48
	private FingerGestures.GlobalTouchFilterDelegate globalTouchFilterFunc; // 0x50
	private Transform[] fingerNodes; // 0x58
	private static readonly FingerGestures.SwipeDirection[] AngleToDirectionMap; // 0x30
	private const float DESKTOP_SCREEN_STANDARD_DPI = 96;
	private const float INCHES_TO_CENTIMETERS = 2.54;
	private const float CENTIMETERS_TO_INCHES = 0.39370078;
	private static float screenDPI; // 0x38

	// Properties
	public static FingerClusterManager DefaultClusterManager { get; }
	public static FingerGestures Instance { get; }
	public FGInputProvider InputProvider { get; }
	public int MaxFingers { get; }
	public static FingerGestures.IFingerList Touches { get; }
	public static List<GestureRecognizer> RegisteredGestureRecognizers { get; }
	public static FingerGestures.GlobalTouchFilterDelegate GlobalTouchFilter { get; set; }
	public static float ScreenDPI { get; set; }

	// Methods

	// RVA: 0x1DF2498 Offset: 0x1DF2498 VA: 0x1DF2498
	public void .ctor() { }

	// RVA: 0x1DF24A8 Offset: 0x1DF24A8 VA: 0x1DF24A8
	public static void add_OnGestureEvent(Gesture.EventHandler value) { }

	// RVA: 0x1DF25E8 Offset: 0x1DF25E8 VA: 0x1DF25E8
	public static void remove_OnGestureEvent(Gesture.EventHandler value) { }

	// RVA: 0x1DF2728 Offset: 0x1DF2728 VA: 0x1DF2728
	public static void add_OnFingerEvent(FingerEventDetector.FingerEventHandler<FingerEvent> value) { }

	// RVA: 0x1DF2868 Offset: 0x1DF2868 VA: 0x1DF2868
	public static void remove_OnFingerEvent(FingerEventDetector.FingerEventHandler<FingerEvent> value) { }

	// RVA: 0x1DF29A8 Offset: 0x1DF29A8 VA: 0x1DF29A8
	public static void add_OnInputProviderChanged(FingerGestures.EventHandler value) { }

	// RVA: 0x1DF2AE8 Offset: 0x1DF2AE8 VA: 0x1DF2AE8
	public static void remove_OnInputProviderChanged(FingerGestures.EventHandler value) { }

	// RVA: 0x1DF2C28 Offset: 0x1DF2C28 VA: 0x1DF2C28
	internal static void FireEvent(Gesture gesture) { }

	// RVA: 0x1DF22D8 Offset: 0x1DF22D8 VA: 0x1DF22D8
	internal static void FireEvent(FingerEvent eventData) { }

	// RVA: 0x1DF18D8 Offset: 0x1DF18D8 VA: 0x1DF18D8
	public static FingerClusterManager get_DefaultClusterManager() { }

	// RVA: 0x1DEF950 Offset: 0x1DEF950 VA: 0x1DEF950
	public static FingerGestures get_Instance() { }

	// RVA: 0x1DF3080 Offset: 0x1DF3080 VA: 0x1DF3080
	private void Init() { }

	// RVA: 0x1DF3244 Offset: 0x1DF3244 VA: 0x1DF3244
	public FGInputProvider get_InputProvider() { }

	// RVA: 0x1DF324C Offset: 0x1DF324C VA: 0x1DF324C
	public static bool IsTouchScreenPlatform(RuntimePlatform platform) { }

	// RVA: 0x1DF3144 Offset: 0x1DF3144 VA: 0x1DF3144
	private void InitInputProvider() { }

	// RVA: 0x1DF335C Offset: 0x1DF335C VA: 0x1DF335C
	public void InstallInputProvider(FGInputProvider inputProviderPrefab) { }

	// RVA: 0x1DEF9B8 Offset: 0x1DEF9B8 VA: 0x1DEF9B8
	public int get_MaxFingers() { }

	// RVA: 0x1DEF810 Offset: 0x1DEF810 VA: 0x1DEF810
	public static FingerGestures.Finger GetFinger(int index) { }

	// RVA: 0x1DF0A18 Offset: 0x1DF0A18 VA: 0x1DF0A18
	public static FingerGestures.IFingerList get_Touches() { }

	// RVA: 0x1DF38D8 Offset: 0x1DF38D8 VA: 0x1DF38D8
	public static List<GestureRecognizer> get_RegisteredGestureRecognizers() { }

	// RVA: 0x1DF3940 Offset: 0x1DF3940 VA: 0x1DF3940
	public static void Register(GestureRecognizer recognizer) { }

	// RVA: 0x1DF3A30 Offset: 0x1DF3A30 VA: 0x1DF3A30
	public static void Unregister(GestureRecognizer recognizer) { }

	// RVA: 0x1DF3ABC Offset: 0x1DF3ABC VA: 0x1DF3ABC
	private void Awake() { }

	// RVA: 0x1DF3C38 Offset: 0x1DF3C38 VA: 0x1DF3C38
	private void Start() { }

	// RVA: 0x1DF3CC8 Offset: 0x1DF3CC8 VA: 0x1DF3CC8
	private void OnEnable() { }

	// RVA: 0x1DF3AC0 Offset: 0x1DF3AC0 VA: 0x1DF3AC0
	private void CheckInit() { }

	// RVA: 0x1DF3CCC Offset: 0x1DF3CCC VA: 0x1DF3CCC
	private void Update() { }

	// RVA: 0x1DF35A8 Offset: 0x1DF35A8 VA: 0x1DF35A8
	private void InitFingers(int count) { }

	// RVA: 0x1DF3D50 Offset: 0x1DF3D50 VA: 0x1DF3D50
	private void UpdateFingers() { }

	// RVA: 0x1DF4298 Offset: 0x1DF4298 VA: 0x1DF4298
	public static FingerGestures.GlobalTouchFilterDelegate get_GlobalTouchFilter() { }

	// RVA: 0x1DF4310 Offset: 0x1DF4310 VA: 0x1DF4310
	public static void set_GlobalTouchFilter(FingerGestures.GlobalTouchFilterDelegate value) { }

	// RVA: 0x1DF438C Offset: 0x1DF438C VA: 0x1DF438C
	protected bool ShouldProcessTouch(int fingerIndex, Vector2 position) { }

	// RVA: 0x1DF4614 Offset: 0x1DF4614 VA: 0x1DF4614
	private Transform CreateNode(string name, Transform parent) { }

	// RVA: 0x1DF46C8 Offset: 0x1DF46C8 VA: 0x1DF46C8
	private void InitNodes() { }

	// RVA: 0x1DF48F8 Offset: 0x1DF48F8 VA: 0x1DF48F8
	public static FingerGestures.SwipeDirection GetSwipeDirection(Vector2 dir, float tolerance) { }

	// RVA: 0x1DF4AEC Offset: 0x1DF4AEC VA: 0x1DF4AEC
	public static FingerGestures.SwipeDirection GetSwipeDirection(Vector2 dir) { }

	// RVA: 0x1DF4B64 Offset: 0x1DF4B64 VA: 0x1DF4B64
	public static bool UsingUnityRemote() { }

	// RVA: 0x1DF4B6C Offset: 0x1DF4B6C VA: 0x1DF4B6C
	public static bool AllFingersMoving(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }

	// RVA: 0x1DF4BC0 Offset: 0x1DF4BC0 VA: 0x1DF4BC0
	public static bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1, float minDOT) { }

	// RVA: 0x1DF4CCC Offset: 0x1DF4CCC VA: 0x1DF4CCC
	public static float SignedAngle(Vector2 from, Vector2 to) { }

	// RVA: 0x1DF4AB8 Offset: 0x1DF4AB8 VA: 0x1DF4AB8
	public static float NormalizeAngle360(float angleInDegrees) { }

	// RVA: 0x1DF4DA0 Offset: 0x1DF4DA0 VA: 0x1DF4DA0
	public static float get_ScreenDPI() { }

	// RVA: 0x1DF4E9C Offset: 0x1DF4E9C VA: 0x1DF4E9C
	public static void set_ScreenDPI(float value) { }

	// RVA: 0x1DEFFD0 Offset: 0x1DEFFD0 VA: 0x1DEFFD0
	public static float Convert(float distance, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	// RVA: 0x1DF4F10 Offset: 0x1DF4F10 VA: 0x1DF4F10
	public static Vector2 Convert(Vector2 v, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	// RVA: 0x1DF4FCC Offset: 0x1DF4FCC VA: 0x1DF4FCC
	private static void .cctor() { }
}

// Namespace: 
public enum FingerGestures.FingerPhase // TypeDefIndex: 4169
{
	// Fields
	public int value__; // 0x0
	public const FingerGestures.FingerPhase None = 0;
	public const FingerGestures.FingerPhase Begin = 1;
	public const FingerGestures.FingerPhase Moving = 2;
	public const FingerGestures.FingerPhase Stationary = 3;
}

// Namespace: 
public sealed class FingerGestures.EventHandler : MulticastDelegate // TypeDefIndex: 4170
{
	// Methods

	// RVA: 0x1DF50B8 Offset: 0x1DF50B8 VA: 0x1DF50B8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1DF36D8 Offset: 0x1DF36D8 VA: 0x1DF36D8 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1DF50C8 Offset: 0x1DF50C8 VA: 0x1DF50C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1DF50FC Offset: 0x1DF50FC VA: 0x1DF50FC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class FingerGestures.InputProviderEvent // TypeDefIndex: 4171
{
	// Fields
	public FGInputProvider inputProviderPrefab; // 0x10

	// Methods

	// RVA: 0x1DF3354 Offset: 0x1DF3354 VA: 0x1DF3354
	public void .ctor() { }
}

// Namespace: 
public class FingerGestures.Finger // TypeDefIndex: 4172
{
	// Fields
	private int index; // 0x10
	private FingerGestures.FingerPhase phase; // 0x14
	private FingerGestures.FingerPhase prevPhase; // 0x18
	private Vector2 pos; // 0x1C
	private Vector2 startPos; // 0x24
	private Vector2 prevPos; // 0x2C
	private Vector2 deltaPos; // 0x34
	private float startTime; // 0x3C
	private float lastMoveTime; // 0x40
	private float distFromStart; // 0x44
	private bool moved; // 0x48
	private bool filteredOut; // 0x49
	private Collider collider; // 0x50
	private Collider prevCollider; // 0x58
	private float elapsedTimeStationary; // 0x60
	private List<GestureRecognizer> gestureRecognizers; // 0x68
	private Dictionary<string, object> extendedProperties; // 0x70

	// Properties
	public int Index { get; }
	public bool IsDown { get; }
	public FingerGestures.FingerPhase Phase { get; }
	public FingerGestures.FingerPhase PreviousPhase { get; }
	public bool WasDown { get; }
	public bool IsMoving { get; }
	public bool WasMoving { get; }
	public bool IsStationary { get; }
	public bool WasStationary { get; }
	public bool Moved { get; }
	public float StarTime { get; }
	public Vector2 StartPosition { get; }
	public Vector2 Position { get; }
	public Vector2 PreviousPosition { get; }
	public Vector2 DeltaPosition { get; }
	public float DistanceFromStart { get; }
	public bool IsFiltered { get; }
	public float TimeStationary { get; }
	public List<GestureRecognizer> GestureRecognizers { get; }
	public Dictionary<string, object> ExtendedProperties { get; }

	// Methods

	// RVA: 0x1DF3EC8 Offset: 0x1DF3EC8 VA: 0x1DF3EC8
	public void .ctor(int index) { }

	// RVA: 0x1DF1C54 Offset: 0x1DF1C54 VA: 0x1DF1C54
	public int get_Index() { }

	// RVA: 0x1DEF8C0 Offset: 0x1DEF8C0 VA: 0x1DEF8C0
	public bool get_IsDown() { }

	// RVA: 0x1DF5108 Offset: 0x1DF5108 VA: 0x1DF5108
	public FingerGestures.FingerPhase get_Phase() { }

	// RVA: 0x1DF5110 Offset: 0x1DF5110 VA: 0x1DF5110
	public FingerGestures.FingerPhase get_PreviousPhase() { }

	// RVA: 0x1DEF8D0 Offset: 0x1DEF8D0 VA: 0x1DEF8D0
	public bool get_WasDown() { }

	// RVA: 0x1DF18C0 Offset: 0x1DF18C0 VA: 0x1DF18C0
	public bool get_IsMoving() { }

	// RVA: 0x1DF5118 Offset: 0x1DF5118 VA: 0x1DF5118
	public bool get_WasMoving() { }

	// RVA: 0x1DF5128 Offset: 0x1DF5128 VA: 0x1DF5128
	public bool get_IsStationary() { }

	// RVA: 0x1DF5138 Offset: 0x1DF5138 VA: 0x1DF5138
	public bool get_WasStationary() { }

	// RVA: 0x1DF5148 Offset: 0x1DF5148 VA: 0x1DF5148
	public bool get_Moved() { }

	// RVA: 0x1DEFE60 Offset: 0x1DEFE60 VA: 0x1DEFE60
	public float get_StarTime() { }

	// RVA: 0x1DF5150 Offset: 0x1DF5150 VA: 0x1DF5150
	public Vector2 get_StartPosition() { }

	// RVA: 0x1DF0110 Offset: 0x1DF0110 VA: 0x1DF0110
	public Vector2 get_Position() { }

	// RVA: 0x1DF5158 Offset: 0x1DF5158 VA: 0x1DF5158
	public Vector2 get_PreviousPosition() { }

	// RVA: 0x1DF4CC4 Offset: 0x1DF4CC4 VA: 0x1DF4CC4
	public Vector2 get_DeltaPosition() { }

	// RVA: 0x1DF5160 Offset: 0x1DF5160 VA: 0x1DF5160
	public float get_DistanceFromStart() { }

	// RVA: 0x1DF5168 Offset: 0x1DF5168 VA: 0x1DF5168
	public bool get_IsFiltered() { }

	// RVA: 0x1DF5170 Offset: 0x1DF5170 VA: 0x1DF5170
	public float get_TimeStationary() { }

	// RVA: 0x1DF18D0 Offset: 0x1DF18D0 VA: 0x1DF18D0
	public List<GestureRecognizer> get_GestureRecognizers() { }

	// RVA: 0x1DF5178 Offset: 0x1DF5178 VA: 0x1DF5178
	public Dictionary<string, object> get_ExtendedProperties() { }

	// RVA: 0x1DF5180 Offset: 0x1DF5180 VA: 0x1DF5180 Slot: 3
	public override string ToString() { }

	// RVA: 0x1DF5224 Offset: 0x1DF5224 VA: 0x1DF5224
	public static bool op_Implicit(FingerGestures.Finger finger) { }

	// RVA: 0x1DF3FCC Offset: 0x1DF3FCC VA: 0x1DF3FCC
	internal void Update(bool newDownState, Vector2 newPos) { }
}

// Namespace: 
public sealed class FingerGestures.GlobalTouchFilterDelegate : MulticastDelegate // TypeDefIndex: 4173
{
	// Methods

	// RVA: 0x1DF5E68 Offset: 0x1DF5E68 VA: 0x1DF5E68
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1DF43A4 Offset: 0x1DF43A4 VA: 0x1DF43A4 Slot: 11
	public virtual bool Invoke(int fingerIndex, Vector2 position) { }

	// RVA: 0x1DF5E78 Offset: 0x1DF5E78 VA: 0x1DF5E78 Slot: 12
