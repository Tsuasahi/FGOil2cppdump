	|-RVA: 0x252D75C Offset: 0x252D75C VA: 0x252D75C
	|-GestureRecognizerTS.GestureEventHandler<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 11
	public virtual void Invoke(T gesture) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252D76C Offset: 0x252D76C VA: 0x252D76C
	|-GestureRecognizerTS.GestureEventHandler<object>.Invoke
	*/

	// RVA: -1 Offset: -1 Slot: 12
	public virtual IAsyncResult BeginInvoke(T gesture, AsyncCallback callback, object object) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252DB0C Offset: 0x252DB0C VA: 0x252DB0C
	|-GestureRecognizerTS.GestureEventHandler<object>.BeginInvoke
	*/

	// RVA: -1 Offset: -1 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252DB30 Offset: 0x252DB30 VA: 0x252DB30
	|-GestureRecognizerTS.GestureEventHandler<object>.EndInvoke
	*/
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC8C640 Offset: 0xC8C640 VA: 0xC8C640
private sealed class GestureRecognizerTS.<FindGestureByCluster>c__AnonStorey0<T> // TypeDefIndex: 4148
{
	// Fields
	internal FingerClusterManager.Cluster cluster; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252D6E4 Offset: 0x252D6E4 VA: 0x252D6E4
	|-GestureRecognizerTS.<FindGestureByCluster>c__AnonStorey0<object>..ctor
	*/

	// RVA: -1 Offset: -1
	internal bool <>m__0(T g) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x252D710 Offset: 0x252D710 VA: 0x252D710
	|-GestureRecognizerTS.<FindGestureByCluster>c__AnonStorey0<object>.<>m__0
	*/
}

// Namespace: 
public abstract class GestureRecognizer : MonoBehaviour // TypeDefIndex: 4149
{
	// Fields
	protected static readonly FingerGestures.IFingerList EmptyFingerList; // 0x0
	[SerializeField] // RVA: 0xC8E594 Offset: 0xC8E594 VA: 0xC8E594
	private int requiredFingerCount; // 0x18
	public DistanceUnit DistanceUnit; // 0x1C
	public int MaxSimultaneousGestures; // 0x20
	public GestureResetMode ResetMode; // 0x24
	public ScreenRaycaster Raycaster; // 0x28
	public FingerClusterManager ClusterManager; // 0x30
	public GestureRecognizerDelegate Delegate; // 0x38
	public bool UseSendMessage; // 0x40
	public string EventMessageName; // 0x48
	public GameObject EventMessageTarget; // 0x50
	public GestureRecognizer.SelectionType SendMessageToSelection; // 0x58
	public bool IsExclusive; // 0x5C

	// Properties
	public virtual int RequiredFingerCount { get; set; }
	public virtual bool SupportFingerClustering { get; }

	// Methods

	// RVA: 0xE8D360 Offset: 0xE8D360 VA: 0xE8D360
	protected void .ctor() { }

	// RVA: 0xE8D380 Offset: 0xE8D380 VA: 0xE8D380 Slot: 4
	public virtual int get_RequiredFingerCount() { }

	// RVA: 0xE8D388 Offset: 0xE8D388 VA: 0xE8D388 Slot: 5
	public virtual void set_RequiredFingerCount(int value) { }

	// RVA: 0xE8D390 Offset: 0xE8D390 VA: 0xE8D390 Slot: 6
	public virtual bool get_SupportFingerClustering() { }

	// RVA: 0xE8D398 Offset: 0xE8D398 VA: 0xE8D398 Slot: 7
	public virtual GestureResetMode GetDefaultResetMode() { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract string GetDefaultEventMessageName();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract Type GetGestureType();

	// RVA: 0xE8D3A0 Offset: 0xE8D3A0 VA: 0xE8D3A0 Slot: 10
	protected virtual void Awake() { }

	// RVA: 0xE8D4D4 Offset: 0xE8D4D4 VA: 0xE8D4D4 Slot: 11
	protected virtual void OnEnable() { }

	// RVA: 0xE8D5A4 Offset: 0xE8D5A4 VA: 0xE8D5A4 Slot: 12
	protected virtual void OnDisable() { }

	// RVA: 0xE8D674 Offset: 0xE8D674 VA: 0xE8D674
	protected void Acquire(FingerGestures.Finger finger) { }

	// RVA: 0xE8D72C Offset: 0xE8D72C VA: 0xE8D72C
	protected bool Release(FingerGestures.Finger finger) { }

	// RVA: 0xE8D7A8 Offset: 0xE8D7A8 VA: 0xE8D7A8 Slot: 13
	protected virtual void Start() { }

	// RVA: 0xE8D90C Offset: 0xE8D90C VA: 0xE8D90C
	protected bool Young(FingerGestures.IFingerList touches) { }

	// RVA: 0xE83A78 Offset: 0xE83A78 VA: 0xE83A78
	public float ToPixels(float distance) { }

	// RVA: 0xE8D9E8 Offset: 0xE8D9E8 VA: 0xE8D9E8
	public float ToSqrPixels(float distance) { }

	// RVA: 0xE8DA08 Offset: 0xE8DA08 VA: 0xE8DA08
	private static void .cctor() { }
}

// Namespace: 
public enum GestureRecognizer.SelectionType // TypeDefIndex: 4150
{
	// Fields
	public int value__; // 0x0
	public const GestureRecognizer.SelectionType Default = 0;
	public const GestureRecognizer.SelectionType StartSelection = 1;
	public const GestureRecognizer.SelectionType CurrentSelection = 2;
	public const GestureRecognizer.SelectionType None = 3;
}

// Namespace: 
public abstract class GestureRecognizerDelegate : MonoBehaviour // TypeDefIndex: 4151
{
	// Methods

	// RVA: 0xE8DA70 Offset: 0xE8DA70 VA: 0xE8DA70
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool CanBegin(Gesture gesture, FingerGestures.IFingerList touches);
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B6AC Offset: 0xC8B6AC VA: 0xC8B6AC
public class FingerClusterManager : MonoBehaviour // TypeDefIndex: 4152
{
	// Fields
	public DistanceUnit DistanceUnit; // 0x18
	public float ClusterRadius; // 0x1C
	public float TimeTolerance; // 0x20
	private int lastUpdateFrame; // 0x24
	private int nextClusterId; // 0x28
	private List<FingerClusterManager.Cluster> clusters; // 0x30
	private List<FingerClusterManager.Cluster> clusterPool; // 0x38
	private FingerGestures.FingerList fingersAdded; // 0x40
	private FingerGestures.FingerList fingersRemoved; // 0x48

	// Properties
	public FingerGestures.IFingerList FingersAdded { get; }
	public FingerGestures.IFingerList FingersRemoved { get; }
	public List<FingerClusterManager.Cluster> Clusters { get; }

	// Methods

	// RVA: 0xE84EB4 Offset: 0xE84EB4 VA: 0xE84EB4
	public void .ctor() { }

	// RVA: 0xE84ED0 Offset: 0xE84ED0 VA: 0xE84ED0
	public FingerGestures.IFingerList get_FingersAdded() { }

	// RVA: 0xE84ED8 Offset: 0xE84ED8 VA: 0xE84ED8
	public FingerGestures.IFingerList get_FingersRemoved() { }

	// RVA: 0xE84EE0 Offset: 0xE84EE0 VA: 0xE84EE0
	public List<FingerClusterManager.Cluster> get_Clusters() { }

	// RVA: 0xE84EE8 Offset: 0xE84EE8 VA: 0xE84EE8
	public List<FingerClusterManager.Cluster> GetClustersPool() { }

	// RVA: 0xE84EF0 Offset: 0xE84EF0 VA: 0xE84EF0
	private void Awake() { }

	// RVA: 0xE8501C Offset: 0xE8501C VA: 0xE8501C
	public void Update() { }

	// RVA: 0xE85A64 Offset: 0xE85A64 VA: 0xE85A64
	public FingerClusterManager.Cluster FindClusterById(int clusterId) { }

	// RVA: 0xE85904 Offset: 0xE85904 VA: 0xE85904
	private FingerClusterManager.Cluster NewCluster() { }

	// RVA: 0xE85728 Offset: 0xE85728 VA: 0xE85728
	private FingerClusterManager.Cluster FindExistingCluster(FingerGestures.Finger finger) { }
}

// Namespace: 
[Serializable]
public class FingerClusterManager.Cluster // TypeDefIndex: 4153
{
	// Fields
	public int Id; // 0x10
	public float StartTime; // 0x14
	public FingerGestures.FingerList Fingers; // 0x18

	// Methods

	// RVA: 0xE85B3C Offset: 0xE85B3C VA: 0xE85B3C
	public void .ctor() { }

	// RVA: 0xE85BA0 Offset: 0xE85BA0 VA: 0xE85BA0
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC8C650 Offset: 0xC8C650 VA: 0xC8C650
private sealed class FingerClusterManager.<FindClusterById>c__AnonStorey0 // TypeDefIndex: 4154
{
	// Fields
	internal int clusterId; // 0x10

	// Methods

	// RVA: 0xE85B34 Offset: 0xE85B34 VA: 0xE85B34
	public void .ctor() { }

	// RVA: 0xE85D14 Offset: 0xE85D14 VA: 0xE85D14
	internal bool <>m__0(FingerClusterManager.Cluster c) { }
}

// Namespace: 
public struct ScreenRaycastData // TypeDefIndex: 4155
{
	// Fields
	public bool Is2D; // 0x0
	public RaycastHit Hit3D; // 0x4
	public RaycastHit2D Hit2D; // 0x30

	// Properties
	public GameObject GameObject { get; }

	// Methods

	// RVA: 0xBC05FC Offset: 0xBC05FC VA: 0xBC05FC
	public GameObject get_GameObject() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B6E4 Offset: 0xC8B6E4 VA: 0xC8B6E4
public class ScreenRaycaster : MonoBehaviour // TypeDefIndex: 4156
{
	// Fields
	public Camera[] Cameras; // 0x18
	public LayerMask IgnoreLayerMask; // 0x20
	public float RayThickness; // 0x24
	public bool VisualizeRaycasts; // 0x28
	public bool UsePhysics2D; // 0x29

	// Methods

	// RVA: 0x12D1EEC Offset: 0x12D1EEC VA: 0x12D1EEC
	public void .ctor() { }

	// RVA: 0x12D1EFC Offset: 0x12D1EFC VA: 0x12D1EFC
	private void Start() { }

	// RVA: 0x12D1FCC Offset: 0x12D1FCC VA: 0x12D1FCC
	public bool Raycast(Vector2 screenPos, out ScreenRaycastData hitData) { }

	// RVA: 0x12D2148 Offset: 0x12D2148 VA: 0x12D2148
	private bool Raycast(Camera cam, Vector2 screenPos, out ScreenRaycastData hitData) { }
}

// Namespace: 
public class FingerDownEvent : FingerEvent // TypeDefIndex: 4157
{
	// Methods

	// RVA: 0xE87A4C Offset: 0xE87A4C VA: 0xE87A4C
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B71C Offset: 0xC8B71C VA: 0xC8B71C
public class FingerDownDetector : FingerEventDetector<FingerDownEvent> // TypeDefIndex: 4158
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8E5A4 Offset: 0xC8E5A4 VA: 0xC8E5A4
	[DebuggerBrowsableAttribute] // RVA: 0xC8E5A4 Offset: 0xC8E5A4 VA: 0xC8E5A4
	private FingerEventDetector.FingerEventHandler<FingerDownEvent> OnFingerDown; // 0xA0
	public string MessageName; // 0xA8

	// Methods

	// RVA: 0xE87544 Offset: 0xE87544 VA: 0xE87544
	public void .ctor() { }

	// RVA: 0xE875A4 Offset: 0xE875A4 VA: 0xE875A4
	public void add_OnFingerDown(FingerEventDetector.FingerEventHandler<FingerDownEvent> value) { }

	// RVA: 0xE87690 Offset: 0xE87690 VA: 0xE87690
	public void remove_OnFingerDown(FingerEventDetector.FingerEventHandler<FingerDownEvent> value) { }

	// RVA: 0xE8777C Offset: 0xE8777C VA: 0xE8777C Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
public enum FingerHoverPhase // TypeDefIndex: 4159
{
	// Fields
	public int value__; // 0x0
	public const FingerHoverPhase None = 0;
	public const FingerHoverPhase Enter = 1;
	public const FingerHoverPhase Exit = 2;
}

// Namespace: 
public class FingerHoverEvent : FingerEvent // TypeDefIndex: 4160
{
	// Fields
	private FingerHoverPhase phase; // 0x84
	internal GameObject PreviousSelection; // 0x88

	// Properties
	public FingerHoverPhase Phase { get; set; }

	// Methods

	// RVA: 0xE8C26C Offset: 0xE8C26C VA: 0xE8C26C
	public void .ctor() { }

	// RVA: 0xE8C270 Offset: 0xE8C270 VA: 0xE8C270
	public FingerHoverPhase get_Phase() { }

	// RVA: 0xE8C100 Offset: 0xE8C100 VA: 0xE8C100
	internal void set_Phase(FingerHoverPhase value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B754 Offset: 0xC8B754 VA: 0xC8B754
public class FingerHoverDetector : FingerEventDetector<FingerHoverEvent> // TypeDefIndex: 4161
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8E5E0 Offset: 0xC8E5E0 VA: 0xC8E5E0
	[DebuggerBrowsableAttribute] // RVA: 0xC8E5E0 Offset: 0xC8E5E0 VA: 0xC8E5E0
	private FingerEventDetector.FingerEventHandler<FingerHoverEvent> OnFingerHover; // 0xA0
	public string MessageName; // 0xA8

	// Methods

	// RVA: 0xE8BDA0 Offset: 0xE8BDA0 VA: 0xE8BDA0
	public void .ctor() { }

	// RVA: 0xE8BE00 Offset: 0xE8BE00 VA: 0xE8BE00
	public void add_OnFingerHover(FingerEventDetector.FingerEventHandler<FingerHoverEvent> value) { }

	// RVA: 0xE8BEEC Offset: 0xE8BEEC VA: 0xE8BEEC
	public void remove_OnFingerHover(FingerEventDetector.FingerEventHandler<FingerHoverEvent> value) { }

	// RVA: 0xE8BFD8 Offset: 0xE8BFD8 VA: 0xE8BFD8 Slot: 7
	protected override void Start() { }

	// RVA: 0xE8C058 Offset: 0xE8C058 VA: 0xE8C058
	private bool FireEvent(FingerHoverEvent e, FingerHoverPhase phase) { }

	// RVA: 0xE8C108 Offset: 0xE8C108 VA: 0xE8C108 Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
public enum FingerMotionPhase // TypeDefIndex: 4162
{
	// Fields
	public int value__; // 0x0
	public const FingerMotionPhase None = 0;
	public const FingerMotionPhase Started = 1;
	public const FingerMotionPhase Updated = 2;
	public const FingerMotionPhase Ended = 3;
}

// Namespace: 
public class FingerMotionEvent : FingerEvent // TypeDefIndex: 4163
{
	// Fields
	private FingerMotionPhase phase; // 0x84
	private Vector2 position; // 0x88
	internal float StartTime; // 0x90

	// Properties
	public override Vector2 Position { get; set; }
	public FingerMotionPhase Phase { get; set; }
	public float ElapsedTime { get; }

	// Methods

	// RVA: 0xE8CAA8 Offset: 0xE8CAA8 VA: 0xE8CAA8
	public void .ctor() { }

	// RVA: 0xE8CB18 Offset: 0xE8CB18 VA: 0xE8CB18 Slot: 4
	public override Vector2 get_Position() { }

	// RVA: 0xE8CB20 Offset: 0xE8CB20 VA: 0xE8CB20 Slot: 5
	internal override void set_Position(Vector2 value) { }

	// RVA: 0xE8C82C Offset: 0xE8C82C VA: 0xE8C82C
	public FingerMotionPhase get_Phase() { }

	// RVA: 0xE8C824 Offset: 0xE8C824 VA: 0xE8C824
	internal void set_Phase(FingerMotionPhase value) { }

	// RVA: 0xE8CB28 Offset: 0xE8CB28 VA: 0xE8CB28
	public float get_ElapsedTime() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B78C Offset: 0xC8B78C VA: 0xC8B78C
public class FingerMotionDetector : FingerEventDetector<FingerMotionEvent> // TypeDefIndex: 4164
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8E61C Offset: 0xC8E61C VA: 0xC8E61C
	[DebuggerBrowsableAttribute] // RVA: 0xC8E61C Offset: 0xC8E61C VA: 0xC8E61C
	private FingerEventDetector.FingerEventHandler<FingerMotionEvent> OnFingerMove; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC8E658 Offset: 0xC8E658 VA: 0xC8E658
	[DebuggerBrowsableAttribute] // RVA: 0xC8E658 Offset: 0xC8E658 VA: 0xC8E658
	private FingerEventDetector.FingerEventHandler<FingerMotionEvent> OnFingerStationary; // 0xA8
	public string MoveMessageName; // 0xB0
	public string StationaryMessageName; // 0xB8
	public bool TrackMove; // 0xC0
	public bool TrackStationary; // 0xC1

	// Methods

	// RVA: 0xE8C278 Offset: 0xE8C278 VA: 0xE8C278
	public void .ctor() { }

	// RVA: 0xE8C2F0 Offset: 0xE8C2F0 VA: 0xE8C2F0
	public void add_OnFingerMove(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0xE8C3DC Offset: 0xE8C3DC VA: 0xE8C3DC
	public void remove_OnFingerMove(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0xE8C4C8 Offset: 0xE8C4C8 VA: 0xE8C4C8
	public void add_OnFingerStationary(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0xE8C5B4 Offset: 0xE8C5B4 VA: 0xE8C5B4
	public void remove_OnFingerStationary(FingerEventDetector.FingerEventHandler<FingerMotionEvent> value) { }

	// RVA: 0xE8C6A0 Offset: 0xE8C6A0 VA: 0xE8C6A0
	private bool FireEvent(FingerMotionEvent e, FingerMotionDetector.EventType eventType, FingerMotionPhase phase, Vector2 position, bool updateSelection) { }

	// RVA: 0xE8C834 Offset: 0xE8C834 VA: 0xE8C834 Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
private enum FingerMotionDetector.EventType // TypeDefIndex: 4165
{
	// Fields
	public int value__; // 0x0
	public const FingerMotionDetector.EventType Move = 0;
	public const FingerMotionDetector.EventType Stationary = 1;
}

// Namespace: 
public class FingerUpEvent : FingerEvent // TypeDefIndex: 4166
{
	// Fields
	private float timeHeldDown; // 0x84

	// Properties
	public float TimeHeldDown { get; set; }

	// Methods

	// RVA: 0xE8CF10 Offset: 0xE8CF10 VA: 0xE8CF10
	public void .ctor() { }

	// RVA: 0xE8CF14 Offset: 0xE8CF14 VA: 0xE8CF14
	public float get_TimeHeldDown() { }

	// RVA: 0xE8CF08 Offset: 0xE8CF08 VA: 0xE8CF08
	internal void set_TimeHeldDown(float value) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B7C4 Offset: 0xC8B7C4 VA: 0xC8B7C4
public class FingerUpDetector : FingerEventDetector<FingerUpEvent> // TypeDefIndex: 4167
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8E694 Offset: 0xC8E694 VA: 0xC8E694
	[DebuggerBrowsableAttribute] // RVA: 0xC8E694 Offset: 0xC8E694 VA: 0xC8E694
	private FingerEventDetector.FingerEventHandler<FingerUpEvent> OnFingerUp; // 0xA0
	public string MessageName; // 0xA8

	// Methods

	// RVA: 0xE8CBAC Offset: 0xE8CBAC VA: 0xE8CBAC
	public void .ctor() { }

	// RVA: 0xE8CC0C Offset: 0xE8CC0C VA: 0xE8CC0C
	public void add_OnFingerUp(FingerEventDetector.FingerEventHandler<FingerUpEvent> value) { }

	// RVA: 0xE8CCF8 Offset: 0xE8CCF8 VA: 0xE8CCF8
	public void remove_OnFingerUp(FingerEventDetector.FingerEventHandler<FingerUpEvent> value) { }

	// RVA: 0xE8CDE4 Offset: 0xE8CDE4 VA: 0xE8CDE4 Slot: 4
	protected override void ProcessFinger(FingerGestures.Finger finger) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC8B7FC Offset: 0xC8B7FC VA: 0xC8B7FC
public class FingerGestures : MonoBehaviour // TypeDefIndex: 4168
{
	// Fields
	public static readonly RuntimePlatform[] TouchScreenPlatforms; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC8E6D0 Offset: 0xC8E6D0 VA: 0xC8E6D0
	[DebuggerBrowsableAttribute] // RVA: 0xC8E6D0 Offset: 0xC8E6D0 VA: 0xC8E6D0
	private static Gesture.EventHandler OnGestureEvent; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC8E70C Offset: 0xC8E70C VA: 0xC8E70C
	[DebuggerBrowsableAttribute] // RVA: 0xC8E70C Offset: 0xC8E70C VA: 0xC8E70C
	private static FingerEventDetector.FingerEventHandler<FingerEvent> OnFingerEvent; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC8E748 Offset: 0xC8E748 VA: 0xC8E748
	[DebuggerBrowsableAttribute] // RVA: 0xC8E748 Offset: 0xC8E748 VA: 0xC8E748
	private static FingerGestures.EventHandler OnInputProviderChanged; // 0x18
	public bool makePersistent; // 0x18
	public bool detectUnityRemote; // 0x19
	public FGInputProvider mouseInputProviderPrefab; // 0x20
	public FGInputProvider touchInputProviderPrefab; // 0x28
	private FingerClusterManager fingerClusterManager; // 0x30
	private FGInputProvider inputProvider; // 0x38
	private static List<GestureRecognizer> gestureRecognizers; // 0x20
	private static FingerGestures instance; // 0x28
	private FingerGestures.Finger[] fingers; // 0x40
	private FingerGestures.FingerList touches; // 0x48
	private FingerGestures.GlobalTouchFilterDelegate globalTouchFilterFunc; // 0x50
	private Transform[] fingerNodes; // 0x58
	private static readonly FingerGestures.SwipeDirection[] AngleToDirectionMap; // 0x30
	private const float DESKTOP_SCREEN_STANDARD_DPI = 96;
	private const float INCHES_TO_CENTIMETERS = 2.54;
	private const float CENTIMETERS_TO_INCHES = 0.39370078;
	private static float screenDPI; // 0x38

	// Properties
	public static FingerClusterManager DefaultClusterManager { get; }
	public static FingerGestures Instance { get; }
	public FGInputProvider InputProvider { get; }
	public int MaxFingers { get; }
	public static FingerGestures.IFingerList Touches { get; }
	public static List<GestureRecognizer> RegisteredGestureRecognizers { get; }
	public static FingerGestures.GlobalTouchFilterDelegate GlobalTouchFilter { get; set; }
	public static float ScreenDPI { get; set; }

	// Methods

	// RVA: 0xE88094 Offset: 0xE88094 VA: 0xE88094
	public void .ctor() { }

	// RVA: 0xE880A4 Offset: 0xE880A4 VA: 0xE880A4
	public static void add_OnGestureEvent(Gesture.EventHandler value) { }

	// RVA: 0xE881E4 Offset: 0xE881E4 VA: 0xE881E4
	public static void remove_OnGestureEvent(Gesture.EventHandler value) { }

	// RVA: 0xE88324 Offset: 0xE88324 VA: 0xE88324
	public static void add_OnFingerEvent(FingerEventDetector.FingerEventHandler<FingerEvent> value) { }

	// RVA: 0xE88464 Offset: 0xE88464 VA: 0xE88464
	public static void remove_OnFingerEvent(FingerEventDetector.FingerEventHandler<FingerEvent> value) { }

	// RVA: 0xE885A4 Offset: 0xE885A4 VA: 0xE885A4
	public static void add_OnInputProviderChanged(FingerGestures.EventHandler value) { }

	// RVA: 0xE886E4 Offset: 0xE886E4 VA: 0xE886E4
	public static void remove_OnInputProviderChanged(FingerGestures.EventHandler value) { }

	// RVA: 0xE88824 Offset: 0xE88824 VA: 0xE88824
	internal static void FireEvent(Gesture gesture) { }

	// RVA: 0xE87ED4 Offset: 0xE87ED4 VA: 0xE87ED4
	internal static void FireEvent(FingerEvent eventData) { }

	// RVA: 0xE874D4 Offset: 0xE874D4 VA: 0xE874D4
	public static FingerClusterManager get_DefaultClusterManager() { }

	// RVA: 0xE8554C Offset: 0xE8554C VA: 0xE8554C
	public static FingerGestures get_Instance() { }

	// RVA: 0xE88C7C Offset: 0xE88C7C VA: 0xE88C7C
	private void Init() { }

	// RVA: 0xE88E40 Offset: 0xE88E40 VA: 0xE88E40
	public FGInputProvider get_InputProvider() { }

	// RVA: 0xE88E48 Offset: 0xE88E48 VA: 0xE88E48
	public static bool IsTouchScreenPlatform(RuntimePlatform platform) { }

	// RVA: 0xE88D40 Offset: 0xE88D40 VA: 0xE88D40
	private void InitInputProvider() { }

	// RVA: 0xE88F58 Offset: 0xE88F58 VA: 0xE88F58
	public void InstallInputProvider(FGInputProvider inputProviderPrefab) { }

	// RVA: 0xE855B4 Offset: 0xE855B4 VA: 0xE855B4
	public int get_MaxFingers() { }

	// RVA: 0xE8540C Offset: 0xE8540C VA: 0xE8540C
	public static FingerGestures.Finger GetFinger(int index) { }

	// RVA: 0xE86614 Offset: 0xE86614 VA: 0xE86614
	public static FingerGestures.IFingerList get_Touches() { }

	// RVA: 0xE894D4 Offset: 0xE894D4 VA: 0xE894D4
	public static List<GestureRecognizer> get_RegisteredGestureRecognizers() { }

	// RVA: 0xE8953C Offset: 0xE8953C VA: 0xE8953C
	public static void Register(GestureRecognizer recognizer) { }

	// RVA: 0xE8962C Offset: 0xE8962C VA: 0xE8962C
	public static void Unregister(GestureRecognizer recognizer) { }

	// RVA: 0xE896B8 Offset: 0xE896B8 VA: 0xE896B8
	private void Awake() { }

	// RVA: 0xE89834 Offset: 0xE89834 VA: 0xE89834
	private void Start() { }

	// RVA: 0xE898C4 Offset: 0xE898C4 VA: 0xE898C4
	private void OnEnable() { }

	// RVA: 0xE896BC Offset: 0xE896BC VA: 0xE896BC
	private void CheckInit() { }

	// RVA: 0xE898C8 Offset: 0xE898C8 VA: 0xE898C8
	private void Update() { }

	// RVA: 0xE891A4 Offset: 0xE891A4 VA: 0xE891A4
	private void InitFingers(int count) { }

	// RVA: 0xE8994C Offset: 0xE8994C VA: 0xE8994C
	private void UpdateFingers() { }

	// RVA: 0xE89E94 Offset: 0xE89E94 VA: 0xE89E94
	public static FingerGestures.GlobalTouchFilterDelegate get_GlobalTouchFilter() { }

	// RVA: 0xE89F0C Offset: 0xE89F0C VA: 0xE89F0C
	public static void set_GlobalTouchFilter(FingerGestures.GlobalTouchFilterDelegate value) { }

	// RVA: 0xE89F88 Offset: 0xE89F88 VA: 0xE89F88
	protected bool ShouldProcessTouch(int fingerIndex, Vector2 position) { }

	// RVA: 0xE8A210 Offset: 0xE8A210 VA: 0xE8A210
	private Transform CreateNode(string name, Transform parent) { }

	// RVA: 0xE8A2C4 Offset: 0xE8A2C4 VA: 0xE8A2C4
	private void InitNodes() { }

	// RVA: 0xE8A4F4 Offset: 0xE8A4F4 VA: 0xE8A4F4
	public static FingerGestures.SwipeDirection GetSwipeDirection(Vector2 dir, float tolerance) { }

	// RVA: 0xE8A6E8 Offset: 0xE8A6E8 VA: 0xE8A6E8
	public static FingerGestures.SwipeDirection GetSwipeDirection(Vector2 dir) { }

	// RVA: 0xE8A760 Offset: 0xE8A760 VA: 0xE8A760
	public static bool UsingUnityRemote() { }

	// RVA: 0xE8A768 Offset: 0xE8A768 VA: 0xE8A768
	public static bool AllFingersMoving(FingerGestures.Finger finger0, FingerGestures.Finger finger1) { }

	// RVA: 0xE8A7BC Offset: 0xE8A7BC VA: 0xE8A7BC
	public static bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1, float minDOT) { }

	// RVA: 0xE8A8C8 Offset: 0xE8A8C8 VA: 0xE8A8C8
	public static float SignedAngle(Vector2 from, Vector2 to) { }

	// RVA: 0xE8A6B4 Offset: 0xE8A6B4 VA: 0xE8A6B4
	public static float NormalizeAngle360(float angleInDegrees) { }

	// RVA: 0xE8A99C Offset: 0xE8A99C VA: 0xE8A99C
	public static float get_ScreenDPI() { }

	// RVA: 0xE8AA98 Offset: 0xE8AA98 VA: 0xE8AA98
	public static void set_ScreenDPI(float value) { }

	// RVA: 0xE85BCC Offset: 0xE85BCC VA: 0xE85BCC
	public static float Convert(float distance, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	// RVA: 0xE8AB0C Offset: 0xE8AB0C VA: 0xE8AB0C
	public static Vector2 Convert(Vector2 v, DistanceUnit fromUnit, DistanceUnit toUnit) { }

	// RVA: 0xE8ABC8 Offset: 0xE8ABC8 VA: 0xE8ABC8
	private static void .cctor() { }
}

// Namespace: 
public enum FingerGestures.FingerPhase // TypeDefIndex: 4169
{
	// Fields
	public int value__; // 0x0
	public const FingerGestures.FingerPhase None = 0;
	public const FingerGestures.FingerPhase Begin = 1;
	public const FingerGestures.FingerPhase Moving = 2;
	public const FingerGestures.FingerPhase Stationary = 3;
}

// Namespace: 
public sealed class FingerGestures.EventHandler : MulticastDelegate // TypeDefIndex: 4170
{
	// Methods

	// RVA: 0xE8ACB4 Offset: 0xE8ACB4 VA: 0xE8ACB4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xE892D4 Offset: 0xE892D4 VA: 0xE892D4 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0xE8ACC4 Offset: 0xE8ACC4 VA: 0xE8ACC4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xE8ACF8 Offset: 0xE8ACF8 VA: 0xE8ACF8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class FingerGestures.InputProviderEvent // TypeDefIndex: 4171
{
	// Fields
	public FGInputProvider inputProviderPrefab; // 0x10

	// Methods

	// RVA: 0xE88F50 Offset: 0xE88F50 VA: 0xE88F50
	public void .ctor() { }
}

// Namespace: 
public class FingerGestures.Finger // TypeDefIndex: 4172
{
	// Fields
	private int index; // 0x10
	private FingerGestures.FingerPhase phase; // 0x14
	private FingerGestures.FingerPhase prevPhase; // 0x18
	private Vector2 pos; // 0x1C
	private Vector2 startPos; // 0x24
	private Vector2 prevPos; // 0x2C
	private Vector2 deltaPos; // 0x34
	private float startTime; // 0x3C
	private float lastMoveTime; // 0x40
	private float distFromStart; // 0x44
	private bool moved; // 0x48
	private bool filteredOut; // 0x49
	private Collider collider; // 0x50
	private Collider prevCollider; // 0x58
	private float elapsedTimeStationary; // 0x60
	private List<GestureRecognizer> gestureRecognizers; // 0x68
	private Dictionary<string, object> extendedProperties; // 0x70

	// Properties
	public int Index { get; }
	public bool IsDown { get; }
	public FingerGestures.FingerPhase Phase { get; }
	public FingerGestures.FingerPhase PreviousPhase { get; }
	public bool WasDown { get; }
	public bool IsMoving { get; }
	public bool WasMoving { get; }
	public bool IsStationary { get; }
	public bool WasStationary { get; }
	public bool Moved { get; }
	public float StarTime { get; }
	public Vector2 StartPosition { get; }
	public Vector2 Position { get; }
	public Vector2 PreviousPosition { get; }
	public Vector2 DeltaPosition { get; }
	public float DistanceFromStart { get; }
	public bool IsFiltered { get; }
	public float TimeStationary { get; }
	public List<GestureRecognizer> GestureRecognizers { get; }
	public Dictionary<string, object> ExtendedProperties { get; }

	// Methods

	// RVA: 0xE89AC4 Offset: 0xE89AC4 VA: 0xE89AC4
	public void .ctor(int index) { }

	// RVA: 0xE87850 Offset: 0xE87850 VA: 0xE87850
	public int get_Index() { }

	// RVA: 0xE854BC Offset: 0xE854BC VA: 0xE854BC
	public bool get_IsDown() { }

	// RVA: 0xE8AD04 Offset: 0xE8AD04 VA: 0xE8AD04
	public FingerGestures.FingerPhase get_Phase() { }

	// RVA: 0xE8AD0C Offset: 0xE8AD0C VA: 0xE8AD0C
	public FingerGestures.FingerPhase get_PreviousPhase() { }

	// RVA: 0xE854CC Offset: 0xE854CC VA: 0xE854CC
	public bool get_WasDown() { }

	// RVA: 0xE874BC Offset: 0xE874BC VA: 0xE874BC
	public bool get_IsMoving() { }

	// RVA: 0xE8AD14 Offset: 0xE8AD14 VA: 0xE8AD14
	public bool get_WasMoving() { }

	// RVA: 0xE8AD24 Offset: 0xE8AD24 VA: 0xE8AD24
	public bool get_IsStationary() { }

	// RVA: 0xE8AD34 Offset: 0xE8AD34 VA: 0xE8AD34
	public bool get_WasStationary() { }

	// RVA: 0xE8AD44 Offset: 0xE8AD44 VA: 0xE8AD44
	public bool get_Moved() { }

	// RVA: 0xE85A5C Offset: 0xE85A5C VA: 0xE85A5C
	public float get_StarTime() { }

	// RVA: 0xE8AD4C Offset: 0xE8AD4C VA: 0xE8AD4C
	public Vector2 get_StartPosition() { }

	// RVA: 0xE85D0C Offset: 0xE85D0C VA: 0xE85D0C
	public Vector2 get_Position() { }

	// RVA: 0xE8AD54 Offset: 0xE8AD54 VA: 0xE8AD54
	public Vector2 get_PreviousPosition() { }

	// RVA: 0xE8A8C0 Offset: 0xE8A8C0 VA: 0xE8A8C0
	public Vector2 get_DeltaPosition() { }

	// RVA: 0xE8AD5C Offset: 0xE8AD5C VA: 0xE8AD5C
	public float get_DistanceFromStart() { }

	// RVA: 0xE8AD64 Offset: 0xE8AD64 VA: 0xE8AD64
	public bool get_IsFiltered() { }

	// RVA: 0xE8AD6C Offset: 0xE8AD6C VA: 0xE8AD6C
	public float get_TimeStationary() { }

	// RVA: 0xE874CC Offset: 0xE874CC VA: 0xE874CC
	public List<GestureRecognizer> get_GestureRecognizers() { }

	// RVA: 0xE8AD74 Offset: 0xE8AD74 VA: 0xE8AD74
	public Dictionary<string, object> get_ExtendedProperties() { }

	// RVA: 0xE8AD7C Offset: 0xE8AD7C VA: 0xE8AD7C Slot: 3
	public override string ToString() { }

	// RVA: 0xE8AE20 Offset: 0xE8AE20 VA: 0xE8AE20
	public static bool op_Implicit(FingerGestures.Finger finger) { }

	// RVA: 0xE89BC8 Offset: 0xE89BC8 VA: 0xE89BC8
	internal void Update(bool newDownState, Vector2 newPos) { }
}

// Namespace: 
public sealed class FingerGestures.GlobalTouchFilterDelegate : MulticastDelegate // TypeDefIndex: 4173
{
	// Methods

	// RVA: 0xE8BA64 Offset: 0xE8BA64 VA: 0xE8BA64
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xE89FA0 Offset: 0xE89FA0 VA: 0xE89FA0 Slot: 11
	public virtual bool Invoke(int fingerIndex, Vector2 position) { }

	// RVA: 0xE8BA74 Offset: 0xE8BA74 VA: 0xE8BA74 Slot: 12
	public virtual IAsyncResult BeginInvoke(int fingerIndex, Vector2 position, AsyncCallback callback, object object) { }

	// RVA: 0xE8BB20 Offset: 0xE8BB20 VA: 0xE8BB20 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC8B834 Offset: 0xC8B834 VA: 0xC8B834
public interface FingerGestures.IFingerList : IEnumerable<FingerGestures.Finger>, IEnumerable // TypeDefIndex: 4174
{
	// Properties
	public abstract FingerGestures.Finger Item { get; }
	public abstract int Count { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract FingerGestures.Finger get_Item(int index);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Count();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract Vector2 GetAverageStartPosition();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract Vector2 GetAveragePosition();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract Vector2 GetAveragePreviousPosition();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float GetAverageDistanceFromStart();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract FingerGestures.Finger GetOldest();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool AllMoving();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool MovingInSameDirection(float tolerance);
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC8B86C Offset: 0xC8B86C VA: 0xC8B86C
[Serializable]
public class FingerGestures.FingerList : FingerGestures.IFingerList, IEnumerable<FingerGestures.Finger>, IEnumerable // TypeDefIndex: 4175
{
	// Fields
	[SerializeField] // RVA: 0xC8E784 Offset: 0xC8E784 VA: 0xC8E784
	private List<FingerGestures.Finger> list; // 0x10
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> delGetFingerStartPosition; // 0x0
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> delGetFingerPosition; // 0x8
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> delGetFingerPreviousPosition; // 0x10
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<float> delGetFingerDistanceFromStart; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC8E794 Offset: 0xC8E794 VA: 0xC8E794
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> <>f__mg$cache0; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC8E7A4 Offset: 0xC8E7A4 VA: 0xC8E7A4
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> <>f__mg$cache1; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC8E7B4 Offset: 0xC8E7B4 VA: 0xC8E7B4
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> <>f__mg$cache2; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC8E7C4 Offset: 0xC8E7C4 VA: 0xC8E7C4
	private static FingerGestures.FingerList.FingerPropertyGetterDelegate<float> <>f__mg$cache3; // 0x38

	// Properties
	public FingerGestures.Finger Item { get; }
	public int Count { get; }

	// Methods

	// RVA: 0xE84FA8 Offset: 0xE84FA8 VA: 0xE84FA8
	public void .ctor() { }

	// RVA: 0xE8AE2C Offset: 0xE8AE2C VA: 0xE8AE2C
	public void .ctor(List<FingerGestures.Finger> list) { }

	// RVA: 0xE855E8 Offset: 0xE855E8 VA: 0xE855E8 Slot: 4
	public FingerGestures.Finger get_Item(int index) { }

	// RVA: 0xE856C8 Offset: 0xE856C8 VA: 0xE856C8 Slot: 5
	public int get_Count() { }

	// RVA: 0xE8AE58 Offset: 0xE8AE58 VA: 0xE8AE58 Slot: 13
	public IEnumerator<FingerGestures.Finger> GetEnumerator() { }

	// RVA: 0xE8AEEC Offset: 0xE8AEEC VA: 0xE8AEEC Slot: 14
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0xE854DC Offset: 0xE854DC VA: 0xE854DC
	public void Add(FingerGestures.Finger touch) { }

	// RVA: 0xE85658 Offset: 0xE85658 VA: 0xE85658
	public bool Remove(FingerGestures.Finger touch) { }

	// RVA: 0xE8AEF0 Offset: 0xE8AEF0 VA: 0xE8AEF0
	public bool Contains(FingerGestures.Finger touch) { }

	// RVA: 0xE8AF60 Offset: 0xE8AF60 VA: 0xE8AF60
	public void AddRange(IEnumerable<FingerGestures.Finger> touches) { }

	// RVA: 0xE853AC Offset: 0xE853AC VA: 0xE853AC
	public void Clear() { }

	// RVA: 0xE8AFD0 Offset: 0xE8AFD0 VA: 0xE8AFD0
	public Vector2 AverageVector(FingerGestures.FingerList.FingerPropertyGetterDelegate<Vector2> getProperty) { }

	// RVA: 0xE8B190 Offset: 0xE8B190 VA: 0xE8B190
	public float AverageFloat(FingerGestures.FingerList.FingerPropertyGetterDelegate<float> getProperty) { }

	// RVA: 0xE8B2AC Offset: 0xE8B2AC VA: 0xE8B2AC
	private static Vector2 GetFingerStartPosition(FingerGestures.Finger finger) { }

	// RVA: 0xE8B2D4 Offset: 0xE8B2D4 VA: 0xE8B2D4
	private static Vector2 GetFingerPosition(FingerGestures.Finger finger) { }

	// RVA: 0xE8B2FC Offset: 0xE8B2FC VA: 0xE8B2FC
	private static Vector2 GetFingerPreviousPosition(FingerGestures.Finger finger) { }

	// RVA: 0xE8B324 Offset: 0xE8B324 VA: 0xE8B324
	private static float GetFingerDistanceFromStart(FingerGestures.Finger finger) { }

