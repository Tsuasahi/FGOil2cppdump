	// RVA: 0x1C3A9B0 Offset: 0x1C3A9B0 VA: 0x1C3A9B0
	public void UpdateDisp() { }

	// RVA: 0x1C40A50 Offset: 0x1C40A50 VA: 0x1C40A50 Slot: 3
	public override string ToString() { }

	// RVA: 0x1C40B20 Offset: 0x1C40B20 VA: 0x1C40B20
	public void OnClickSelect() { }

	// RVA: 0x1C40D6C Offset: 0x1C40D6C VA: 0x1C40D6C
	public void OnLongPush() { }
}

// Namespace: 
public enum EventServantFatigueListViewObject.InitMode // TypeDefIndex: 9875
{
	// Fields
	public int value__; // 0x0
	public const EventServantFatigueListViewObject.InitMode INVISIBLE = 0;
	public const EventServantFatigueListViewObject.InitMode INVALID = 1;
	public const EventServantFatigueListViewObject.InitMode VALID = 2;
	public const EventServantFatigueListViewObject.InitMode INPUT = 3;
	public const EventServantFatigueListViewObject.InitMode MODIFY = 4;
}

// Namespace: 
public enum EventServantFatigueListViewObject.State // TypeDefIndex: 9876
{
	// Fields
	public int value__; // 0x0
	public const EventServantFatigueListViewObject.State INIT = 0;
	public const EventServantFatigueListViewObject.State IDLE = 1;
	public const EventServantFatigueListViewObject.State MOVE = 2;
	public const EventServantFatigueListViewObject.State INPUT = 3;
}

// Namespace: 
public class EventServantRecoveryFatigueItem : MonoBehaviour // TypeDefIndex: 9877
{
	// Fields
	protected static readonly string EMPTY_BG_NAME; // 0x0
	private static readonly string OPEN_CLIP_NAME; // 0x8
	[SerializeField] // RVA: 0xCDBC2C Offset: 0xCDBC2C VA: 0xCDBC2C
	protected UICommonButton baseButton; // 0x18
	[SerializeField] // RVA: 0xCDBC3C Offset: 0xCDBC3C VA: 0xCDBC3C
	protected ServantFaceIconComponent servantFaceIcon; // 0x20
	[SerializeField] // RVA: 0xCDBC4C Offset: 0xCDBC4C VA: 0xCDBC4C
	protected UISprite emptySprite; // 0x28
	[SerializeField] // RVA: 0xCDBC5C Offset: 0xCDBC5C VA: 0xCDBC5C
	protected UILabel fatigueRecoveryTimeLabel; // 0x30
	[SerializeField] // RVA: 0xCDBC6C Offset: 0xCDBC6C VA: 0xCDBC6C
	private GameObject nameSprite; // 0x38
	[SerializeField] // RVA: 0xCDBC7C Offset: 0xCDBC7C VA: 0xCDBC7C
	private GameObject frameSprite; // 0x40
	[SerializeField] // RVA: 0xCDBC8C Offset: 0xCDBC8C VA: 0xCDBC8C
	private SimpleAnimation simpleAnimation; // 0x48
	[SerializeField] // RVA: 0xCDBC9C Offset: 0xCDBC9C VA: 0xCDBC9C
	private Animation animation; // 0x50
	private UserServantEntity userServantEntity; // 0x58
	private int index; // 0x60
	private long fatigueTime; // 0x68
	private bool isFatigueRecover; // 0x70
	private Action<int> clickCallback; // 0x78
	private long updateTime; // 0x80
	private EventFatigueRecoveryEntity eventFatigueRecoveryEnt; // 0x88

	// Properties
	public UserServantEntity UserServantEntity { get; }
	public int Index { get; }
	public long FatigueTime { get; }
	public string Name { get; }
	public int[] Individuality { get; }
	public string[] IndividualityName { get; }
	public int Idx { get; }
	public int RecoveryRate { get; }
	public int IndividualityRate { get; }

	// Methods

	// RVA: 0x1C41734 Offset: 0x1C41734 VA: 0x1C41734
	public void .ctor() { }

	// RVA: 0x1C41744 Offset: 0x1C41744 VA: 0x1C41744
	private void Update() { }

	// RVA: 0x1C41958 Offset: 0x1C41958 VA: 0x1C41958
	public void Init() { }

	// RVA: 0x1C41BA8 Offset: 0x1C41BA8 VA: 0x1C41BA8
	public void SetServantInfo(UserServantEntity userServantEntity, int eventId, int index, Action<int> callback) { }

	// RVA: 0x1C417DC Offset: 0x1C417DC VA: 0x1C417DC
	private void UpdateDisp() { }

	// RVA: 0x1C421F0 Offset: 0x1C421F0 VA: 0x1C421F0
	public void OnClickItem() { }

	// RVA: 0x1C3AC74 Offset: 0x1C3AC74 VA: 0x1C3AC74
	public UserServantEntity get_UserServantEntity() { }

	// RVA: 0x1C42298 Offset: 0x1C42298 VA: 0x1C42298
	public int get_Index() { }

	// RVA: 0x1C422A0 Offset: 0x1C422A0 VA: 0x1C422A0
	public long get_FatigueTime() { }

	// RVA: 0x1C3CD44 Offset: 0x1C3CD44 VA: 0x1C3CD44
	public string get_Name() { }

	// RVA: 0x1C3929C Offset: 0x1C3929C VA: 0x1C3929C
	public int[] get_Individuality() { }

	// RVA: 0x1C422A8 Offset: 0x1C422A8 VA: 0x1C422A8
	public string[] get_IndividualityName() { }

	// RVA: 0x1C3D704 Offset: 0x1C3D704 VA: 0x1C3D704
	public int get_Idx() { }

	// RVA: 0x1C3D3EC Offset: 0x1C3D3EC VA: 0x1C3D3EC
	public int get_RecoveryRate() { }

	// RVA: 0x1C3D3D4 Offset: 0x1C3D3D4 VA: 0x1C3D3D4
	public int get_IndividualityRate() { }

	// RVA: 0x1C422D4 Offset: 0x1C422D4 VA: 0x1C422D4
	public bool IsAnimation() { }

	// RVA: 0x1C42390 Offset: 0x1C42390 VA: 0x1C42390
	public void SetAnimationPlay(int no) { }

	// RVA: 0x1C42728 Offset: 0x1C42728 VA: 0x1C42728
	private static void .cctor() { }
}

// Namespace: 
public class EventServantRecoveryFatigueManager : MonoBehaviour // TypeDefIndex: 9878
{
	// Fields
	protected const string BTN_ON = "btn_on";
	protected const string BTN_OFF = "btn_off";
	protected static readonly string BG_FILE; // 0x0
	private static readonly int defaultEventId; // 0x8
	protected static readonly EventServantRecoveryFatigueManager.EffectSet[] effectSet; // 0x10
	[SerializeField] // RVA: 0xCDBCAC Offset: 0xCDBCAC VA: 0xCDBCAC
	protected ExUITexture bgTexture; // 0x18
	[SerializeField] // RVA: 0xCDBCBC Offset: 0xCDBCBC VA: 0xCDBCBC
	protected List<EventServantRecoveryFatigueItem> servantItemList; // 0x20
	[SerializeField] // RVA: 0xCDBCCC Offset: 0xCDBCCC VA: 0xCDBCCC
	[HeaderAttribute] // RVA: 0xCDBCCC Offset: 0xCDBCCC VA: 0xCDBCCC
	private string settingSe; // 0x28
	public GameObject fatigueNotice; // 0x30
	public UIButton fatigueNoticeBtn; // 0x38
	private bool isFatigueNotice; // 0x40
	protected static AssetData assetData; // 0x18
	[SerializeField] // RVA: 0xCDBD18 Offset: 0xCDBD18 VA: 0xCDBD18
	[HeaderAttribute] // RVA: 0xCDBD18 Offset: 0xCDBD18 VA: 0xCDBD18
	private float openEffectTime; // 0x44
	[SerializeField] // RVA: 0xCDBD64 Offset: 0xCDBD64 VA: 0xCDBD64
	[HeaderAttribute] // RVA: 0xCDBD64 Offset: 0xCDBD64 VA: 0xCDBD64
	private float endEffectTime; // 0x48
	private GameObject maskPanel; // 0x50
	private int maskCount; // 0x58
	private Action endOpenEffectCallback; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCDBDB0 Offset: 0xCDBDB0 VA: 0xCDBDB0
	private static AssetLoader.LoadEndDataHandler <>f__am$cache0; // 0x20

	// Methods

	// RVA: 0x1C4279C Offset: 0x1C4279C VA: 0x1C4279C
	public void .ctor() { }

	// RVA: 0x1C2EBF8 Offset: 0x1C2EBF8 VA: 0x1C2EBF8
	public string GetSettingSe() { }

	// RVA: 0x1C42800 Offset: 0x1C42800 VA: 0x1C42800
	public void Init() { }

	// RVA: 0x1C2C5B8 Offset: 0x1C2C5B8 VA: 0x1C2C5B8
	public void SetServantRecoveryFatigue(int eventId, Action<int> onClick, Action endCallback) { }

	// RVA: 0x1C42D28 Offset: 0x1C42D28 VA: 0x1C42D28
	public void SetMaskPanel(GameObject maskPanel) { }

	// RVA: 0x1C42D30 Offset: 0x1C42D30 VA: 0x1C42D30
	public EventServantRecoveryFatigueItem GetItem(int index) { }

	// RVA: 0x1C42E0C Offset: 0x1C42E0C VA: 0x1C42E0C
	public void ModifyItem(UserServantEntity userServantEntity, int eventId, int index) { }

	// RVA: 0x1C428CC Offset: 0x1C428CC VA: 0x1C428CC
	public void SetRecoveryBg(int eventId) { }

	// RVA: 0x1C42ACC Offset: 0x1C42ACC VA: 0x1C42ACC
	public void SetPreRecoveryBg(int eventId) { }

	// RVA: 0x1C42A50 Offset: 0x1C42A50 VA: 0x1C42A50
	private void setNoticeValue() { }

	// RVA: 0x1C43140 Offset: 0x1C43140 VA: 0x1C43140
	public void OnNoticeChangeBtn() { }

	// RVA: 0x1C42F1C Offset: 0x1C42F1C VA: 0x1C42F1C
	private void loadAssetData(int eventId) { }

	// RVA: 0x1C43230 Offset: 0x1C43230 VA: 0x1C43230
	public bool IsMask() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3D994 Offset: 0xD3D994 VA: 0xD3D994
	// RVA: 0x1C42C4C Offset: 0x1C42C4C VA: 0x1C42C4C
	public IEnumerator SetOpenEffect(EventServantRecoveryFatigueItem item, int eventId, int num, Action<int> onClick) { }

	// RVA: 0x1C43248 Offset: 0x1C43248 VA: 0x1C43248
	private bool IsFade() { }

	// RVA: 0x1C432DC Offset: 0x1C432DC VA: 0x1C432DC
	public static GameObject getEffect(int eventId, int num, Transform parentTr) { }

	// RVA: 0x1C43554 Offset: 0x1C43554 VA: 0x1C43554
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3D9A4 Offset: 0xD3D9A4 VA: 0xD3D9A4
	// RVA: 0x1C439CC Offset: 0x1C439CC VA: 0x1C439CC
	private static void <loadAssetData>m__0(AssetData data) { }
}

// Namespace: 
protected struct EventServantRecoveryFatigueManager.EffectSet // TypeDefIndex: 9879
{
	// Fields
	public int eventId; // 0x0
	public int num; // 0x4
	public Vector3 pos; // 0x8
	public string fileName; // 0x18
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0CA0 Offset: 0xCB0CA0 VA: 0xCB0CA0
private sealed class EventServantRecoveryFatigueManager.<SetOpenEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9880
{
	// Fields
	internal EventServantRecoveryFatigueItem item; // 0x10
	internal int num; // 0x18
	internal int eventId; // 0x1C
	internal Action<int> onClick; // 0x20
	internal EventServantRecoveryFatigueManager $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD497A4 Offset: 0xD497A4 VA: 0xD497A4
	// RVA: 0x1C43240 Offset: 0x1C43240 VA: 0x1C43240
	public void .ctor() { }

	// RVA: 0x1C43A3C Offset: 0x1C43A3C VA: 0x1C43A3C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD497B4 Offset: 0xD497B4 VA: 0xD497B4
	// RVA: 0x1C43E60 Offset: 0x1C43E60 VA: 0x1C43E60 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD497C4 Offset: 0xD497C4 VA: 0xD497C4
	// RVA: 0x1C43E68 Offset: 0x1C43E68 VA: 0x1C43E68 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD497D4 Offset: 0xD497D4 VA: 0xD497D4
	// RVA: 0x1C43E70 Offset: 0x1C43E70 VA: 0x1C43E70 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD497E4 Offset: 0xD497E4 VA: 0xD497E4
	// RVA: 0x1C43E84 Offset: 0x1C43E84 VA: 0x1C43E84 Slot: 6
	public void Reset() { }

	// RVA: 0x1C43EEC Offset: 0x1C43EEC VA: 0x1C43EEC
	internal bool <>m__0() { }
}

// Namespace: 
public class EventTowerListViewItem : ListViewItem // TypeDefIndex: 9881
{
	// Fields
	private bool isClearFloor; // 0x70
	private bool isOpenFloor; // 0x71
	private string rewardName; // 0x78
	private string rewardNum; // 0x80
	private EventTowerRewardEntity itemInfo; // 0x88
	private GiftEntity clearReward; // 0x90
	private ItemEntity itemEntity; // 0x98
	private ServantEntity servantEntity; // 0xA0
	private ServantCostumeEntity servantCostumeEntity; // 0xA8

	// Properties
	public bool IsFloorClear { get; }
	public int BannerId { get; }
	public string BoardMessage { get; }
	public int IconId { get; }
	public ItemEntity ItemEntity { get; }
	public ServantEntity ServantEntity { get; }
	public ServantCostumeEntity ServantCostumeEntity { get; }
	public Gift.Type GiftType { get; }
	public int RewardNum { get; }
	public int RewardObjectId { get; }
	public int EventId { get; }
	public string RewardName { get; }
	public string RewardDispNum { get; }
	public bool IsOpenFloor { get; }

	// Methods

	// RVA: 0x15FF3F8 Offset: 0x15FF3F8 VA: 0x15FF3F8
	public void .ctor(EventTowerRewardEntity targetEntity, bool isClearFloor, bool isOpenFloor) { }

	// RVA: 0x15FF794 Offset: 0x15FF794 VA: 0x15FF794 Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x15FF7FC Offset: 0x15FF7FC VA: 0x15FF7FC
	public bool get_IsFloorClear() { }

	// RVA: 0x15FF804 Offset: 0x15FF804 VA: 0x15FF804
	public int get_BannerId() { }

	// RVA: 0x15FF830 Offset: 0x15FF830 VA: 0x15FF830
	public string get_BoardMessage() { }

	// RVA: 0x15FF938 Offset: 0x15FF938 VA: 0x15FF938
	public int get_IconId() { }

	// RVA: 0x15FF964 Offset: 0x15FF964 VA: 0x15FF964
	public ItemEntity get_ItemEntity() { }

	// RVA: 0x15FF96C Offset: 0x15FF96C VA: 0x15FF96C
	public ServantEntity get_ServantEntity() { }

	// RVA: 0x15FF974 Offset: 0x15FF974 VA: 0x15FF974
	public ServantCostumeEntity get_ServantCostumeEntity() { }

	// RVA: 0x15FF97C Offset: 0x15FF97C VA: 0x15FF97C
	public Gift.Type get_GiftType() { }

	// RVA: 0x15FF9A8 Offset: 0x15FF9A8 VA: 0x15FF9A8
	public int get_RewardNum() { }

	// RVA: 0x15FF9FC Offset: 0x15FF9FC VA: 0x15FF9FC
	public int get_RewardObjectId() { }

	// RVA: 0x15FFA28 Offset: 0x15FFA28 VA: 0x15FFA28
	public int get_EventId() { }

	// RVA: 0x15FFA54 Offset: 0x15FFA54 VA: 0x15FFA54
	public string get_RewardName() { }

	// RVA: 0x15FFA5C Offset: 0x15FFA5C VA: 0x15FFA5C
	public string get_RewardDispNum() { }

	// RVA: 0x15FFA64 Offset: 0x15FFA64 VA: 0x15FFA64
	public bool get_IsOpenFloor() { }
}

// Namespace: 
public class EventTowerListViewItemDraw : MonoBehaviour // TypeDefIndex: 9882
{
	// Fields
	protected static readonly string BANNER_NAME; // 0x0
	protected static readonly string REWARD_GET_NAME; // 0x8
	[SerializeField] // RVA: 0xCDBDC0 Offset: 0xCDBDC0 VA: 0xCDBDC0
	protected UISprite baseSprite; // 0x18
	[SerializeField] // RVA: 0xCDBDD0 Offset: 0xCDBDD0 VA: 0xCDBDD0
	protected UICommonButton baseButton; // 0x20
	[SerializeField] // RVA: 0xCDBDE0 Offset: 0xCDBDE0 VA: 0xCDBDE0
	protected ItemIconComponent itemIcon; // 0x28
	[SerializeField] // RVA: 0xCDBDF0 Offset: 0xCDBDF0 VA: 0xCDBDF0
	protected UILabel rewardName; // 0x30
	[SerializeField] // RVA: 0xCDBE00 Offset: 0xCDBE00 VA: 0xCDBE00
	protected UILabel rewardNum; // 0x38
	[SerializeField] // RVA: 0xCDBE10 Offset: 0xCDBE10 VA: 0xCDBE10
	protected UILabel rewardCondMessage; // 0x40
	[SerializeField] // RVA: 0xCDBE20 Offset: 0xCDBE20 VA: 0xCDBE20
	protected GameObject rewardGetInfo; // 0x48
	[SerializeField] // RVA: 0xCDBE30 Offset: 0xCDBE30 VA: 0xCDBE30
	protected UISprite rewardGetSprite; // 0x50
	[SerializeField] // RVA: 0xCDBE40 Offset: 0xCDBE40 VA: 0xCDBE40
	protected UISprite maskSprite; // 0x58

	// Methods

	// RVA: 0x15FFA6C Offset: 0x15FFA6C VA: 0x15FFA6C
	public void .ctor() { }

	// RVA: 0x15FFA74 Offset: 0x15FFA74 VA: 0x15FFA74
	public void SetItem(EventTowerListViewItem item, EventTowerListViewItemDraw.DispMode mode) { }

	// RVA: 0x15FFFE0 Offset: 0x15FFFE0 VA: 0x15FFFE0
	public void SetInput(EventTowerListViewItem item) { }

	// RVA: 0x15FFFE4 Offset: 0x15FFFE4 VA: 0x15FFFE4
	private static void .cctor() { }
}

// Namespace: 
public enum EventTowerListViewItemDraw.DispMode // TypeDefIndex: 9883
{
	// Fields
	public int value__; // 0x0
	public const EventTowerListViewItemDraw.DispMode INVISIBLE = 0;
	public const EventTowerListViewItemDraw.DispMode INVALID = 1;
	public const EventTowerListViewItemDraw.DispMode VALID = 2;
	public const EventTowerListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class EventTowerListViewManager : ListViewManager // TypeDefIndex: 9884
{
	// Fields
	protected EventTowerListViewManager.InitMode initMode; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xCDBE50 Offset: 0xCDBE50 VA: 0xCDBE50
	[DebuggerBrowsableAttribute] // RVA: 0xCDBE50 Offset: 0xCDBE50 VA: 0xCDBE50
	private Action CallbackFunc; // 0x140
	protected int callbackCount; // 0x148
	protected float listInDelay; // 0x14C

	// Properties
	public List<EventTowerListViewObject> ObjectList { get; }
	public List<EventTowerListViewObject> ClippingObjectList { get; }

	// Methods

	// RVA: 0x1600058 Offset: 0x1600058 VA: 0x1600058
	public void .ctor() { }

	// RVA: 0x1600060 Offset: 0x1600060 VA: 0x1600060
	protected void add_CallbackFunc(Action value) { }

	// RVA: 0x1600150 Offset: 0x1600150 VA: 0x1600150
	protected void remove_CallbackFunc(Action value) { }

	// RVA: 0x1600240 Offset: 0x1600240 VA: 0x1600240
	private void Update() { }

	// RVA: 0x1600248 Offset: 0x1600248 VA: 0x1600248
	public List<EventTowerListViewObject> get_ObjectList() { }

	// RVA: 0x16003BC Offset: 0x16003BC VA: 0x16003BC
	public List<EventTowerListViewObject> get_ClippingObjectList() { }

	// RVA: 0x16005F4 Offset: 0x16005F4 VA: 0x16005F4
	public void CreateList(int eventId, int nowTowerId, long nowFloor, bool isNextOpen, EventTowerRewardEntity[] towerRewardList) { }

	// RVA: 0x1600788 Offset: 0x1600788 VA: 0x1600788
	public void CreateList(int eventId, int firstTowerId) { }

	// RVA: 0x1600B3C Offset: 0x1600B3C VA: 0x1600B3C
	public void SetNextFloorInfo() { }

	// RVA: 0x1600C58 Offset: 0x1600C58 VA: 0x1600C58
	public EventTowerListViewItem GetItem(int index) { }

	// RVA: 0x1600D00 Offset: 0x1600D00 VA: 0x1600D00 Slot: 4
	protected override void SetObjectItem(ListViewObject obj, ListViewItem item) { }

	// RVA: 0x1600E3C Offset: 0x1600E3C VA: 0x1600E3C
	public void SetMode(EventTowerListViewManager.InitMode mode, Action callback) { }

	// RVA: 0x1600F98 Offset: 0x1600F98 VA: 0x1600F98
	public void SetMode(EventTowerListViewManager.InitMode mode, float delay, Action callback) { }

	// RVA: 0x1600E44 Offset: 0x1600E44 VA: 0x1600E44
	public void SetMode(EventTowerListViewManager.InitMode mode) { }

	// RVA: 0x1600FA4 Offset: 0x1600FA4 VA: 0x1600FA4
	protected void RequestListObject(EventTowerListViewObject.InitMode mode, float delay = 0) { }

	// RVA: 0x16011E0 Offset: 0x16011E0 VA: 0x16011E0
	protected void RequestInto() { }

	// RVA: 0x1601434 Offset: 0x1601434 VA: 0x1601434
	protected void OnMoveEnd() { }

	// RVA: 0x1601580 Offset: 0x1601580 VA: 0x1601580
	protected void OnClickListView(ListViewObject obj) { }

	// RVA: 0x16018B0 Offset: 0x16018B0 VA: 0x16018B0
	public void closeItemDetail(bool isDecide) { }

	// RVA: 0x160193C Offset: 0x160193C VA: 0x160193C
	private void closeSvtDetail(bool isDecide) { }
}

// Namespace: 
public enum EventTowerListViewManager.InitMode // TypeDefIndex: 9885
{
	// Fields
	public int value__; // 0x0
	public const EventTowerListViewManager.InitMode NONE = 0;
	public const EventTowerListViewManager.InitMode INTO = 1;
	public const EventTowerListViewManager.InitMode VALID = 2;
	public const EventTowerListViewManager.InitMode INPUT = 3;
	public const EventTowerListViewManager.InitMode ENTER = 4;
	public const EventTowerListViewManager.InitMode EXIT = 5;
	public const EventTowerListViewManager.InitMode MODIFY = 6;
}

// Namespace: 
public class EventTowerListViewObject : ListViewObject // TypeDefIndex: 9886
{
	// Fields
	protected EventTowerListViewObject.State state; // 0x6C
	protected EventTowerListViewItemDraw.DispMode dispMode; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCDBE8C Offset: 0xCDBE8C VA: 0xCDBE8C
	[DebuggerBrowsableAttribute] // RVA: 0xCDBE8C Offset: 0xCDBE8C VA: 0xCDBE8C
	private Action CallbackFunc; // 0x78
	protected EventTowerListViewItemDraw itemDraw; // 0x80
	protected GameObject dragObject; // 0x88

	// Methods

	// RVA: 0x16019A0 Offset: 0x16019A0 VA: 0x16019A0
	public void .ctor() { }

	// RVA: 0x1601A08 Offset: 0x1601A08 VA: 0x1601A08
	protected void add_CallbackFunc(Action value) { }

	// RVA: 0x1601AF4 Offset: 0x1601AF4 VA: 0x1601AF4
	protected void remove_CallbackFunc(Action value) { }

	// RVA: 0x1601BE0 Offset: 0x1601BE0 VA: 0x1601BE0
	protected void Awake() { }

	// RVA: 0x1601C54 Offset: 0x1601C54 VA: 0x1601C54
	private void Update() { }

	// RVA: 0x1600570 Offset: 0x1600570 VA: 0x1600570
	public EventTowerListViewItem GetItem() { }

	// RVA: 0x1601CD8 Offset: 0x1601CD8 VA: 0x1601CD8 Slot: 6
	public override void SetItem(ListViewItem item, ListViewItemSeed seed) { }

	// RVA: 0x1601CEC Offset: 0x1601CEC VA: 0x1601CEC Slot: 5
	public override void SetItem(ListViewItem item) { }

	// RVA: 0x1601CE4 Offset: 0x1601CE4 VA: 0x1601CE4
	protected void InitItem() { }

	// RVA: 0x1601CF8 Offset: 0x1601CF8 VA: 0x1601CF8 Slot: 9
	public override void SetInput(bool isInput) { }

	// RVA: 0x1601DA8 Offset: 0x1601DA8 VA: 0x1601DA8
	public void Init(EventTowerListViewObject.InitMode initMode, Action callbackFunc, float delay, Vector3 position) { }

	// RVA: 0x16013A0 Offset: 0x16013A0 VA: 0x16013A0
	public void Init(EventTowerListViewObject.InitMode initMode, Action callbackFunc, float delay) { }

	// RVA: 0x1601158 Offset: 0x1601158 VA: 0x1601158
	public void Init(EventTowerListViewObject.InitMode initMode, Action callbackFunc) { }

	// RVA: 0x1600DB8 Offset: 0x1600DB8 VA: 0x1600DB8
	public void Init(EventTowerListViewObject.InitMode initMode) { }

	// RVA: 0x1602114 Offset: 0x1602114 VA: 0x1602114
	protected void SetupDisp() { }

	// RVA: 0x1601FAC Offset: 0x1601FAC VA: 0x1601FAC
	private void EventIntoStart(float delay) { }

	// RVA: 0x1602274 Offset: 0x1602274 VA: 0x1602274
	private void EventIntoMove() { }

	// RVA: 0x1602414 Offset: 0x1602414 VA: 0x1602414
	private void EventIntoMove2() { }

	// RVA: 0x1602504 Offset: 0x1602504 VA: 0x1602504
	private void EventExitStart(float delay) { }

	// RVA: 0x1602650 Offset: 0x1602650 VA: 0x1602650
	private void EventExitMove() { }

	// RVA: 0x16028D4 Offset: 0x16028D4 VA: 0x16028D4
	private void EventExitMove2() { }

	// RVA: 0x16024DC Offset: 0x16024DC VA: 0x16024DC
	protected void EventMoveEnd() { }

	// RVA: 0x1602970 Offset: 0x1602970 VA: 0x1602970
	public void OnClickSelect() { }
}

// Namespace: 
public enum EventTowerListViewObject.InitMode // TypeDefIndex: 9887
{
	// Fields
	public int value__; // 0x0
	public const EventTowerListViewObject.InitMode INVISIBLE = 0;
	public const EventTowerListViewObject.InitMode INVALID = 1;
	public const EventTowerListViewObject.InitMode VALID = 2;
	public const EventTowerListViewObject.InitMode INPUT = 3;
	public const EventTowerListViewObject.InitMode INTO = 4;
}

// Namespace: 
protected enum EventTowerListViewObject.State // TypeDefIndex: 9888
{
	// Fields
	public int value__; // 0x0
	public const EventTowerListViewObject.State INIT = 0;
	public const EventTowerListViewObject.State IDLE = 1;
	public const EventTowerListViewObject.State MOVE = 2;
	public const EventTowerListViewObject.State INPUT = 3;
}

// Namespace: 
public class EventTreasureBoxManager : MonoBehaviour // TypeDefIndex: 9889
{
	// Fields
	[SerializeField] // RVA: 0xCDBEC8 Offset: 0xCDBEC8 VA: 0xCDBEC8
	private ShopCurrencyInfoController currencyInfoController; // 0x18
	[SerializeField] // RVA: 0xCDBED8 Offset: 0xCDBED8 VA: 0xCDBED8
	private EventTreasureBoxPanelComponent[] treasureBoxList; // 0x20
	private int eventId; // 0x28

	// Properties
	public int ItemBaseWindowHeight { get; }

	// Methods

	// RVA: 0x160324C Offset: 0x160324C VA: 0x160324C
	public void .ctor() { }

	// RVA: 0x1603254 Offset: 0x1603254 VA: 0x1603254
	public int get_ItemBaseWindowHeight() { }

	// RVA: 0x1603284 Offset: 0x1603284 VA: 0x1603284
	public void Init(int eventId, int svtId, Action drawAction, Action<int, string[], Action> playVoice, Action<BattleDropItem[], int, Action> requestCallBack) { }

	// RVA: 0x1603AF0 Offset: 0x1603AF0 VA: 0x1603AF0
	public void UpdateEventItemList() { }

	// RVA: 0x1603B30 Offset: 0x1603B30 VA: 0x1603B30
	public void StopUpdateRemainTime() { }
}

// Namespace: 
public class EventTreasureBoxPanelComponent : MonoBehaviour // TypeDefIndex: 9890
{
	// Fields
	[SerializeField] // RVA: 0xCDBEE8 Offset: 0xCDBEE8 VA: 0xCDBEE8
	private UISprite treasureBoxBg; // 0x18
	[SerializeField] // RVA: 0xCDBEF8 Offset: 0xCDBEF8 VA: 0xCDBEF8
	private UISprite eventItemRootBg; // 0x20
	[SerializeField] // RVA: 0xCDBF08 Offset: 0xCDBF08 VA: 0xCDBF08
	private GameObject treasureBoxDrawBtn; // 0x28
	[SerializeField] // RVA: 0xCDBF18 Offset: 0xCDBF18 VA: 0xCDBF18
	private UILabel treasureBoxPayNum; // 0x30
	[SerializeField] // RVA: 0xCDBF28 Offset: 0xCDBF28 VA: 0xCDBF28
	private EventItemComponent eventTreasureBoxItemInfo; // 0x38
	[SerializeField] // RVA: 0xCDBF38 Offset: 0xCDBF38 VA: 0xCDBF38
	private UILabel treasureBoxEndTimeLabel; // 0x40
	[SerializeField] // RVA: 0xCDBF48 Offset: 0xCDBF48 VA: 0xCDBF48
	private ItemIconComponent treasureIcon; // 0x48
	[SerializeField] // RVA: 0xCDBF58 Offset: 0xCDBF58 VA: 0xCDBF58
	private UISprite treasureIconFrameBack; // 0x50
	[SerializeField] // RVA: 0xCDBF68 Offset: 0xCDBF68 VA: 0xCDBF68
	private UISprite treasureIconFrameFront; // 0x58
	[SerializeField] // RVA: 0xCDBF78 Offset: 0xCDBF78 VA: 0xCDBF78
	private UISprite treasureBoxDetailBtn; // 0x60
	[SerializeField] // RVA: 0xCDBF88 Offset: 0xCDBF88 VA: 0xCDBF88
	private UISprite treasureBoxLine; // 0x68
	[SerializeField] // RVA: 0xCDBF98 Offset: 0xCDBF98 VA: 0xCDBF98
	private UILabel userEventItemLb; // 0x70
	[SerializeField] // RVA: 0xCDBFA8 Offset: 0xCDBFA8 VA: 0xCDBFA8
	private UILabel payEventItemLb; // 0x78
	[SerializeField] // RVA: 0xCDBFB8 Offset: 0xCDBFB8 VA: 0xCDBFB8
	private UILabel drawBtnLb; // 0x80
	[SerializeField] // RVA: 0xCDBFC8 Offset: 0xCDBFC8 VA: 0xCDBFC8
	private TreasureBoxBulkBuyConfirmMenu treasureBoxBuyWindow; // 0x88
	private long eventEndTime; // 0x90
	private long eventPointNum; // 0x98
	private int payNum; // 0xA0
	private int svtId; // 0xA4
	private Action drawAction; // 0xA8
	private Action<int, string[], Action> playVoiceAction; // 0xB0
	private Action<BattleDropItem[], int, Action> requestCallBack; // 0xB8
	private TreasureBoxEntity treasureBoxEntity; // 0xC0
	private static AssetData effectAssetData; // 0x0
	private string itemName; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xCDBFD8 Offset: 0xCDBFD8 VA: 0xCDBFD8
	private static Action <>f__am$cache0; // 0x8

	// Methods

	// RVA: 0x1603B60 Offset: 0x1603B60 VA: 0x1603B60
	public void .ctor() { }

	// RVA: 0x160365C Offset: 0x160365C VA: 0x160365C
	public void Init(TreasureBoxEntity ent, int svtId, Action drawAction, Action<int, string[], Action> playVoice, Action<BattleDropItem[], int, Action> requestCallBack) { }

	// RVA: 0x1603E54 Offset: 0x1603E54 VA: 0x1603E54
	private void SetEventEnableTime() { }

	// RVA: 0x1603EB8 Offset: 0x1603EB8 VA: 0x1603EB8
	private void GetTreasureBoxEventEnableTime() { }

	// RVA: 0x1603C20 Offset: 0x1603C20 VA: 0x1603C20
	public void SetTreasureBoxDrawBtn() { }

	// RVA: 0x1603B70 Offset: 0x1603B70 VA: 0x1603B70
	private void loadTreasureBoxEffect() { }

	// RVA: 0x16040A0 Offset: 0x16040A0 VA: 0x16040A0
	private void endloadEffect(AssetData data) { }

	// RVA: 0x16040F8 Offset: 0x16040F8 VA: 0x16040F8
	public static GameObject getEffect(string name, Transform parentTr) { }

	// RVA: 0x16042CC Offset: 0x16042CC VA: 0x16042CC
	public void OnClickDetail() { }

	// RVA: 0x160441C Offset: 0x160441C VA: 0x160441C
	public void OnClickDrawBtn() { }

	// RVA: 0x16044EC Offset: 0x16044EC VA: 0x16044EC
	private void TreasureBoxDrawRequest(int drawNum) { }

	// RVA: 0x16045CC Offset: 0x16045CC VA: 0x16045CC
	private void Response(string result) { }

	// RVA: 0x1604A64 Offset: 0x1604A64 VA: 0x1604A64
	private void CheckOpenQuest() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3D9B4 Offset: 0xD3D9B4 VA: 0xD3D9B4
	// RVA: 0x1604F30 Offset: 0x1604F30 VA: 0x1604F30
	private static void <CheckOpenQuest>m__0() { }
}

// Namespace: 
public class EventTreasureBoxPanelComponent.resData // TypeDefIndex: 9891
{
	// Fields
	public int[] giftIds; // 0x10
	public BattleDropItem[] eventRewardInfos; // 0x18
	public UserEventPointEntity[] oldUserEventPoint; // 0x20

	// Methods

	// RVA: 0x16053A0 Offset: 0x16053A0 VA: 0x16053A0
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0CB0 Offset: 0xCB0CB0 VA: 0xCB0CB0
private sealed class EventTreasureBoxPanelComponent.<Init>c__AnonStorey0 // TypeDefIndex: 9892
{
	// Fields
	internal TreasureBoxEntity ent; // 0x10
	internal EventTreasureBoxPanelComponent $this; // 0x18

	// Methods

	// RVA: 0x1603B68 Offset: 0x1603B68 VA: 0x1603B68
	public void .ctor() { }

	// RVA: 0x1604F34 Offset: 0x1604F34 VA: 0x1604F34
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0CC0 Offset: 0xCB0CC0 VA: 0xCB0CC0
private sealed class EventTreasureBoxPanelComponent.<Response>c__AnonStorey1 // TypeDefIndex: 9893
{
	// Fields
	internal EventTreasureBoxPanelComponent.resData[] res; // 0x10
	internal Action pointRewardCallBack; // 0x18
	internal EventTreasureBoxPanelComponent $this; // 0x20

	// Methods

	// RVA: 0x1604A5C Offset: 0x1604A5C VA: 0x1604A5C
	public void .ctor() { }

	// RVA: 0x16051D4 Offset: 0x16051D4 VA: 0x16051D4
	internal void <>m__0() { }

	// RVA: 0x16052C4 Offset: 0x16052C4 VA: 0x16052C4
	internal void <>m__1() { }
}

// Namespace: 
public class TreasureBoxBulkBuyConfirmMenu : BaseDialog // TypeDefIndex: 9894
{
	// Fields
	public static readonly string DECIED_BTN_NAME_DEFAULT; // 0x0
	public static readonly string DECIED_BTN_NAME_LIMIT_MATERIAL; // 0x8
	[SerializeField] // RVA: 0xCDBFE8 Offset: 0xCDBFE8 VA: 0xCDBFE8
	private GameObject exchangeBase; // 0x58
	[SerializeField] // RVA: 0xCDBFF8 Offset: 0xCDBFF8 VA: 0xCDBFF8
	private UILabel warningLabel; // 0x60
	[SerializeField] // RVA: 0xCDC008 Offset: 0xCDC008 VA: 0xCDC008
	private UICommonButton decideButton; // 0x68
	[SerializeField] // RVA: 0xCDC018 Offset: 0xCDC018 VA: 0xCDC018
	private UISprite decideButtonImg; // 0x70
	[SerializeField] // RVA: 0xCDC028 Offset: 0xCDC028 VA: 0xCDC028
	private UICommonButton cancelButton; // 0x78
	[SerializeField] // RVA: 0xCDC038 Offset: 0xCDC038 VA: 0xCDC038
	private UICommonButton plusButton; // 0x80
	[SerializeField] // RVA: 0xCDC048 Offset: 0xCDC048 VA: 0xCDC048
	private UICommonButton minusButton; // 0x88
	[SerializeField] // RVA: 0xCDC058 Offset: 0xCDC058 VA: 0xCDC058
	public UISliderWithButton itemSlider; // 0x90
	[SerializeField] // RVA: 0xCDC068 Offset: 0xCDC068 VA: 0xCDC068
	private UILabel exchangeOrigin; // 0x98
	[SerializeField] // RVA: 0xCDC078 Offset: 0xCDC078 VA: 0xCDC078
	private UILabel exchangeDestination; // 0xA0
	[SerializeField] // RVA: 0xCDC088 Offset: 0xCDC088 VA: 0xCDC088
	private UILabel exchangeDestinationCount; // 0xA8
	[SerializeField] // RVA: 0xCDC098 Offset: 0xCDC098 VA: 0xCDC098
	private EventItemComponent eventTreasureBoxItemInfo; // 0xB0
	[SerializeField] // RVA: 0xCDC0A8 Offset: 0xCDC0A8 VA: 0xCDC0A8
	private ItemIconComponent eventItemIcon; // 0xB8
	[SerializeField] // RVA: 0xCDC0B8 Offset: 0xCDC0B8 VA: 0xCDC0B8
	private UISprite eventItemRootLine; // 0xC0
	[SerializeField] // RVA: 0xCDC0C8 Offset: 0xCDC0C8 VA: 0xCDC0C8
	private UILabel titleLb; // 0xC8
	private TreasureBoxBulkBuyConfirmMenu.State state; // 0xD0
	private Action<int> onDecide; // 0xD8
	private Action onClose; // 0xE0
	private TreasureBoxEntity treasureBoxEntity; // 0xE8
	private int payNum; // 0xF0
	private SeManager.SystemSeKind decideSe; // 0xF4
	private int buyCount; // 0xF8

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x1E092D0 Offset: 0x1E092D0 VA: 0x1E092D0
	public void .ctor() { }

	// RVA: 0x1E09338 Offset: 0x1E09338 VA: 0x1E09338
	public void Init() { }

	// RVA: 0x1E09388 Offset: 0x1E09388 VA: 0x1E09388
	public void Open(TreasureBoxEntity treasure, Action<int> onDecide, SeManager.SystemSeKind se = 8) { }

	// RVA: 0x1E09A70 Offset: 0x1E09A70 VA: 0x1E09A70
	private void SetLabelActive(UILabel label, bool isActive) { }

	// RVA: 0x1E09860 Offset: 0x1E09860 VA: 0x1E09860
	private void SetLabelText(UILabel label, string text) { }

	// RVA: 0x1E09B30 Offset: 0x1E09B30 VA: 0x1E09B30
	private void SetSpriteName(UISprite sprite, string spriteName) { }

	// RVA: 0x1E09A14 Offset: 0x1E09A14 VA: 0x1E09A14
	private void SetItemSlider(UserGameEntity userGameEntity) { }

	// RVA: 0x1E09BD8 Offset: 0x1E09BD8 VA: 0x1E09BD8
	private void SetWarningActive(bool isActive) { }

	// RVA: 0x1E097E8 Offset: 0x1E097E8 VA: 0x1E097E8
	private int GetItemSliderMax(UserGameEntity userGameEntity) { }

	// RVA: 0x1E09C2C Offset: 0x1E09C2C VA: 0x1E09C2C
	private int GetUserItemBuyableCount(UserGameEntity userGameEntity) { }

	// RVA: 0x1E09D24 Offset: 0x1E09D24 VA: 0x1E09D24
	private void EndOpen() { }

	// RVA: 0x1E09D30 Offset: 0x1E09D30 VA: 0x1E09D30
	public void Close() { }

	// RVA: 0x1E09D38 Offset: 0x1E09D38 VA: 0x1E09D38
	public void Close(Action callback) { }

	// RVA: 0x1E09DC8 Offset: 0x1E09DC8 VA: 0x1E09DC8
	private void EndClose() { }

	// RVA: 0x1E09E48 Offset: 0x1E09E48 VA: 0x1E09E48
	private void CallOnDecide(int result) { }

	// RVA: 0x1E09E2C Offset: 0x1E09E2C VA: 0x1E09E2C
	private void CallOnClose() { }

	// RVA: 0x1E09EC0 Offset: 0x1E09EC0 VA: 0x1E09EC0
	public void OnClickDecide() { }

	// RVA: 0x1E09920 Offset: 0x1E09920 VA: 0x1E09920
	private bool SetShopNotEnableWarning() { }

	// RVA: 0x1E09F64 Offset: 0x1E09F64 VA: 0x1E09F64
	private bool IsEnable() { }

	// RVA: 0x1E0A054 Offset: 0x1E0A054 VA: 0x1E0A054
	public void OnClickCancel() { }

	// RVA: 0x1E0A104 Offset: 0x1E0A104 VA: 0x1E0A104
	public void SliderValueChange() { }

	// RVA: 0x1E0A1D0 Offset: 0x1E0A1D0 VA: 0x1E0A1D0
	private long ItemMaxOverCheck(long count, long price) { }

	// RVA: 0x1E0A280 Offset: 0x1E0A280 VA: 0x1E0A280 Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x1E0A320 Offset: 0x1E0A320 VA: 0x1E0A320
	private static void .cctor() { }
}

// Namespace: 
private enum TreasureBoxBulkBuyConfirmMenu.State // TypeDefIndex: 9895
{
	// Fields
	public int value__; // 0x0
	public const TreasureBoxBulkBuyConfirmMenu.State INIT = 0;
	public const TreasureBoxBulkBuyConfirmMenu.State OPEN = 1;
	public const TreasureBoxBulkBuyConfirmMenu.State INPUT = 2;
	public const TreasureBoxBulkBuyConfirmMenu.State SELECTED = 3;
	public const TreasureBoxBulkBuyConfirmMenu.State CLOSE = 4;
}

// Namespace: 
public class TreasureBoxDialogComponent : BaseDialog // TypeDefIndex: 9896
{
	// Fields
	private readonly float TYPE_SPRITE_POS_Y; // 0x58
	private Action closeCallbackFunc; // 0x60
	[SerializeField] // RVA: 0xCDC0D8 Offset: 0xCDC0D8 VA: 0xCDC0D8
	private Transform listRoot; // 0x68
	[SerializeField] // RVA: 0xCDC0E8 Offset: 0xCDC0E8 VA: 0xCDC0E8
	private Transform iconListRoot; // 0x70
	[SerializeField] // RVA: 0xCDC0F8 Offset: 0xCDC0F8 VA: 0xCDC0F8
	private GameObject prefabResultItem; // 0x78
	[SerializeField] // RVA: 0xCDC108 Offset: 0xCDC108 VA: 0xCDC108
	private float iconScale; // 0x80
	[SerializeField] // RVA: 0xCDC118 Offset: 0xCDC118 VA: 0xCDC118
	private UIPanel scrollView; // 0x88
	[SerializeField] // RVA: 0xCDC128 Offset: 0xCDC128 VA: 0xCDC128
	private UIPanel scrollBar; // 0x90
	[SerializeField] // RVA: 0xCDC138 Offset: 0xCDC138 VA: 0xCDC138
	private UISprite listBg; // 0x98
	[SerializeField] // RVA: 0xCDC148 Offset: 0xCDC148 VA: 0xCDC148
	private UILabel titleLabel; // 0xA0
	[SerializeField] // RVA: 0xCDC158 Offset: 0xCDC158 VA: 0xCDC158
	private UISprite titleIcon; // 0xA8
	[SerializeField] // RVA: 0xCDC168 Offset: 0xCDC168 VA: 0xCDC168
	private UICommonButton closeButton; // 0xB0
	[SerializeField] // RVA: 0xCDC178 Offset: 0xCDC178 VA: 0xCDC178
	private UIButton viewChangeButton; // 0xB8
	[SerializeField] // RVA: 0xCDC188 Offset: 0xCDC188 VA: 0xCDC188
	private UILabel viewChangeButtonLabel; // 0xC0
	[SerializeField] // RVA: 0xCDC198 Offset: 0xCDC198 VA: 0xCDC198
	private Color[] viewChangeButtonLabelEffectColors; // 0xC8
	[SerializeField] // RVA: 0xCDC1A8 Offset: 0xCDC1A8 VA: 0xCDC1A8
	private GameObject pointRewardRoot; // 0xD0
	[SerializeField] // RVA: 0xCDC1B8 Offset: 0xCDC1B8 VA: 0xCDC1B8
	private UILabel titleAtLabel; // 0xD8
	[SerializeField] // RVA: 0xCDC1C8 Offset: 0xCDC1C8 VA: 0xCDC1C8
	private UILabel titleNextItemLabel; // 0xE0
	[SerializeField] // RVA: 0xCDC1D8 Offset: 0xCDC1D8 VA: 0xCDC1D8
	private UILabel atLabel; // 0xE8
	[SerializeField] // RVA: 0xCDC1E8 Offset: 0xCDC1E8 VA: 0xCDC1E8
	private UILabel nextItemLabel; // 0xF0
	[SerializeField] // RVA: 0xCDC1F8 Offset: 0xCDC1F8 VA: 0xCDC1F8
	private UILabel atNameLabel; // 0xF8
	[SerializeField] // RVA: 0xCDC208 Offset: 0xCDC208 VA: 0xCDC208
	private UILabel nextItemNameLabel; // 0x100
	[SerializeField] // RVA: 0xCDC218 Offset: 0xCDC218 VA: 0xCDC218
	private UISprite eventPointBg; // 0x108
	[SerializeField] // RVA: 0xCDC228 Offset: 0xCDC228 VA: 0xCDC228
	private UISprite eventPointSprite; // 0x110
	[SerializeField] // RVA: 0xCDC238 Offset: 0xCDC238 VA: 0xCDC238
	private UISprite eventPointRewardBg; // 0x118
	[SerializeField] // RVA: 0xCDC248 Offset: 0xCDC248 VA: 0xCDC248
	private GameObject getPointRoot; // 0x120
	[SerializeField] // RVA: 0xCDC258 Offset: 0xCDC258 VA: 0xCDC258
	private UISprite totalEventPointBg; // 0x128
	[SerializeField] // RVA: 0xCDC268 Offset: 0xCDC268 VA: 0xCDC268
	private UILabel totalTitleLabel; // 0x130
	[SerializeField] // RVA: 0xCDC278 Offset: 0xCDC278 VA: 0xCDC278
	private UILabel totalNumLabel; // 0x138
	[SerializeField] // RVA: 0xCDC288 Offset: 0xCDC288 VA: 0xCDC288
	private UISprite totalEventPointIcon; // 0x140
	[SerializeField] // RVA: 0xCDC298 Offset: 0xCDC298 VA: 0xCDC298
	private UISprite getEventPointBg; // 0x148
	[SerializeField] // RVA: 0xCDC2A8 Offset: 0xCDC2A8 VA: 0xCDC2A8
	private UILabel getTitleLabel; // 0x150
	[SerializeField] // RVA: 0xCDC2B8 Offset: 0xCDC2B8 VA: 0xCDC2B8
	private UILabel getNumLabel; // 0x158
	[SerializeField] // RVA: 0xCDC2C8 Offset: 0xCDC2C8 VA: 0xCDC2C8
	private UISprite getEventPointIcon; // 0x160
	[SerializeField] // RVA: 0xCDC2D8 Offset: 0xCDC2D8 VA: 0xCDC2D8
	private Vector3 basePos; // 0x168
	[SerializeField] // RVA: 0xCDC2E8 Offset: 0xCDC2E8 VA: 0xCDC2E8
	private Vector3 gridPos; // 0x174
	[SerializeField] // RVA: 0xCDC2F8 Offset: 0xCDC2F8 VA: 0xCDC2F8
	private int width; // 0x180
	[SerializeField] // RVA: 0xCDC308 Offset: 0xCDC308 VA: 0xCDC308
