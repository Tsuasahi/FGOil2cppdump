	public override void OnUpdate() { }

	// RVA: 0x20F8064 Offset: 0x20F8064 VA: 0x20F8064
	public void PlayTweeners() { }

	// RVA: 0x20F858C Offset: 0x20F858C VA: 0x20F858C
	private void OnFinished() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99638 Offset: 0xC99638 VA: 0xC99638
[TooltipAttribute] // RVA: 0xC99638 Offset: 0xC99638 VA: 0xC99638
public class NguiTextEncodeColor : FsmStateAction // TypeDefIndex: 12199
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF2F70 Offset: 0xCF2F70 VA: 0xCF2F70
	[TooltipAttribute] // RVA: 0xCF2F70 Offset: 0xCF2F70 VA: 0xCF2F70
	public FsmColor color; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF2FBC Offset: 0xCF2FBC VA: 0xCF2FBC
	[UIHintAttribute] // RVA: 0xCF2FBC Offset: 0xCF2FBC VA: 0xCF2FBC
	[TooltipAttribute] // RVA: 0xCF2FBC Offset: 0xCF2FBC VA: 0xCF2FBC
	public FsmString colorString; // 0x58
	private Color _lastColor; // 0x60
	public bool everyFrame; // 0x70

	// Methods

	// RVA: 0x21DF8B8 Offset: 0x21DF8B8 VA: 0x21DF8B8
	public void .ctor() { }

	// RVA: 0x21DF8C0 Offset: 0x21DF8C0 VA: 0x21DF8C0 Slot: 28
	public override void Reset() { }

	// RVA: 0x21DF8CC Offset: 0x21DF8CC VA: 0x21DF8CC Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21DF9DC Offset: 0x21DF9DC VA: 0x21DF9DC Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99698 Offset: 0xC99698 VA: 0xC99698
[TooltipAttribute] // RVA: 0xC99698 Offset: 0xC99698 VA: 0xC99698
public class NguiTextParseColor : FsmStateAction // TypeDefIndex: 12200
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF301C Offset: 0xCF301C VA: 0xCF301C
	[TooltipAttribute] // RVA: 0xCF301C Offset: 0xCF301C VA: 0xCF301C
	public FsmString colorString; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF3068 Offset: 0xCF3068 VA: 0xCF3068
	[TooltipAttribute] // RVA: 0xCF3068 Offset: 0xCF3068 VA: 0xCF3068
	[UIHintAttribute] // RVA: 0xCF3068 Offset: 0xCF3068 VA: 0xCF3068
	public FsmColor color; // 0x58
	private string _lastColor; // 0x60
	public bool everyFrame; // 0x68

	// Methods

	// RVA: 0x21DFB1C Offset: 0x21DFB1C VA: 0x21DFB1C
	public void .ctor() { }

	// RVA: 0x21DFB24 Offset: 0x21DFB24 VA: 0x21DFB24 Slot: 28
	public override void Reset() { }

	// RVA: 0x21DFB30 Offset: 0x21DFB30 VA: 0x21DFB30 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x21DFC40 Offset: 0x21DFC40 VA: 0x21DFC40 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC996F8 Offset: 0xC996F8 VA: 0xC996F8
[TooltipAttribute] // RVA: 0xC996F8 Offset: 0xC996F8 VA: 0xC996F8
public class NguiToolsAddChild : FsmStateAction // TypeDefIndex: 12201
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF30C8 Offset: 0xCF30C8 VA: 0xCF30C8
	[TooltipAttribute] // RVA: 0xCF30C8 Offset: 0xCF30C8 VA: 0xCF30C8
	public FsmOwnerDefault parent; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF3114 Offset: 0xCF3114 VA: 0xCF3114
	[TooltipAttribute] // RVA: 0xCF3114 Offset: 0xCF3114 VA: 0xCF3114
	public FsmGameObject childReference; // 0x58
	[UIHintAttribute] // RVA: 0xCF3160 Offset: 0xCF3160 VA: 0xCF3160
	public FsmGameObject childInstance; // 0x60

	// Methods

	// RVA: 0x21DFD98 Offset: 0x21DFD98 VA: 0x21DFD98
	public void .ctor() { }

	// RVA: 0x21DFDA0 Offset: 0x21DFDA0 VA: 0x21DFDA0 Slot: 28
	public override void Reset() { }

	// RVA: 0x21DFDAC Offset: 0x21DFDAC VA: 0x21DFDAC Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99758 Offset: 0xC99758 VA: 0xC99758
[TooltipAttribute] // RVA: 0xC99758 Offset: 0xC99758 VA: 0xC99758
public class NguiLabelGetText : FsmStateAction // TypeDefIndex: 12202
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF3174 Offset: 0xCF3174 VA: 0xCF3174
	[CheckForComponentAttribute] // RVA: 0xCF3174 Offset: 0xCF3174 VA: 0xCF3174
	[TooltipAttribute] // RVA: 0xCF3174 Offset: 0xCF3174 VA: 0xCF3174
	public FsmOwnerDefault gameObject; // 0x50
	[TooltipAttribute] // RVA: 0xCF320C Offset: 0xCF320C VA: 0xCF320C
	[RequiredFieldAttribute] // RVA: 0xCF320C Offset: 0xCF320C VA: 0xCF320C
	[UIHintAttribute] // RVA: 0xCF320C Offset: 0xCF320C VA: 0xCF320C
	public FsmString text; // 0x58
	[TooltipAttribute] // RVA: 0xCF326C Offset: 0xCF326C VA: 0xCF326C
	public bool everyFrame; // 0x60
	private UILabel _label; // 0x68

	// Methods

	// RVA: 0x20F7B98 Offset: 0x20F7B98 VA: 0x20F7B98
	public void .ctor() { }

	// RVA: 0x20F7BA0 Offset: 0x20F7BA0 VA: 0x20F7BA0 Slot: 28
	public override void Reset() { }

	// RVA: 0x20F7BA8 Offset: 0x20F7BA8 VA: 0x20F7BA8 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x20F7D4C Offset: 0x20F7D4C VA: 0x20F7D4C Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x20F7CF8 Offset: 0x20F7CF8 VA: 0x20F7CF8
	private void GetText() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC997B8 Offset: 0xC997B8 VA: 0xC997B8
[TooltipAttribute] // RVA: 0xC997B8 Offset: 0xC997B8 VA: 0xC997B8
public class NguiLabelSetText : FsmStateAction // TypeDefIndex: 12203
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF32A4 Offset: 0xCF32A4 VA: 0xCF32A4
	[CheckForComponentAttribute] // RVA: 0xCF32A4 Offset: 0xCF32A4 VA: 0xCF32A4
	[TooltipAttribute] // RVA: 0xCF32A4 Offset: 0xCF32A4 VA: 0xCF32A4
	public FsmOwnerDefault gameObject; // 0x50
	[TooltipAttribute] // RVA: 0xCF333C Offset: 0xCF333C VA: 0xCF333C
	public FsmString text; // 0x58
	[TooltipAttribute] // RVA: 0xCF3374 Offset: 0xCF3374 VA: 0xCF3374
	public bool everyFrame; // 0x60
	private UILabel _label; // 0x68

	// Methods

	// RVA: 0x20F7D50 Offset: 0x20F7D50 VA: 0x20F7D50
	public void .ctor() { }

	// RVA: 0x20F7D58 Offset: 0x20F7D58 VA: 0x20F7D58 Slot: 28
	public override void Reset() { }

	// RVA: 0x20F7D60 Offset: 0x20F7D60 VA: 0x20F7D60 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x20F7F04 Offset: 0x20F7F04 VA: 0x20F7F04 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x20F7EB0 Offset: 0x20F7EB0 VA: 0x20F7EB0
	private void SetText() { }
}

// Namespace: 
public class NGuiEventsToPlaymakerFsmEvents : MonoBehaviour // TypeDefIndex: 12204
{
	// Fields
	public bool debug; // 0x18
	public bool OnlyShowImplemented; // 0x19
	public static UICamera.MouseOrTouch currentTouch; // 0x0
	public PlayMakerFSM targetFSM; // 0x20
	public List<NGuiPlayMakerDelegates> customEventsKeys; // 0x28
	public List<string> customEventsValues; // 0x30
	private int[] _usage; // 0x38
	private UIInput _input; // 0x40
	private UIProgressBar _pBar; // 0x48
	private UIToggle _toggle; // 0x50

	// Methods

	// RVA: 0x18B9A88 Offset: 0x18B9A88 VA: 0x18B9A88
	public void .ctor() { }

	// RVA: 0x18B9A90 Offset: 0x18B9A90 VA: 0x18B9A90
	public int getUsage(NGuiPlayMakerDelegates fsmEventDelegate) { }

	// RVA: 0x18B9AF0 Offset: 0x18B9AF0 VA: 0x18B9AF0
	private void OnEnable() { }

	// RVA: 0x18BA0E0 Offset: 0x18BA0E0 VA: 0x18BA0E0
	public bool DoesTargetMissEventImplementation(PlayMakerFSM fsm, NGuiPlayMakerDelegates fsmEventDelegate) { }

	// RVA: 0x18BA2CC Offset: 0x18BA2CC VA: 0x18BA2CC
	public bool DoesTargetMissEventImplementation(PlayMakerFSM fsm, string fsmEvent) { }

	// RVA: 0x18BA068 Offset: 0x18BA068 VA: 0x18BA068
	public bool DoesTargetImplementsEvent(PlayMakerFSM fsm, NGuiPlayMakerDelegates fsmEventDelegate) { }

	// RVA: 0x18BA3A0 Offset: 0x18BA3A0 VA: 0x18BA3A0
	public bool DoesTargetImplementsEvent(PlayMakerFSM fsm, string fsmEvent) { }

	// RVA: 0x18BA578 Offset: 0x18BA578 VA: 0x18BA578
	private void FireNGUIPlayMakerEvent(NGuiPlayMakerDelegates _event) { }

	// RVA: 0x18BA6B8 Offset: 0x18BA6B8 VA: 0x18BA6B8
	private void OnClick() { }

	// RVA: 0x18BA7C8 Offset: 0x18BA7C8 VA: 0x18BA7C8
	private void OnHover(bool isOver) { }

	// RVA: 0x18BA9B0 Offset: 0x18BA9B0 VA: 0x18BA9B0
	private void OnPress(bool pressed) { }

	// RVA: 0x18BAB98 Offset: 0x18BAB98 VA: 0x18BAB98
	private void OnSelect(bool selected) { }

	// RVA: 0x18BACC4 Offset: 0x18BACC4 VA: 0x18BACC4
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x18BAE14 Offset: 0x18BAE14 VA: 0x18BAE14
	private void OnDrop(GameObject go) { }

	// RVA: 0x18BAF3C Offset: 0x18BAF3C VA: 0x18BAF3C
	private void OnTooltip(bool show) { }

	// RVA: 0x18BB068 Offset: 0x18BB068 VA: 0x18BB068
	private void OnSubmitChange() { }

	// RVA: 0x18BB1F8 Offset: 0x18BB1F8 VA: 0x18BB1F8
	private void OnSliderChange(float value) { }

	// RVA: 0x18BB3A8 Offset: 0x18BB3A8 VA: 0x18BB3A8
	private void OnSelectionChange(string item) { }

	// RVA: 0x18BB4C8 Offset: 0x18BB4C8 VA: 0x18BB4C8
	private void OnChange() { }

	// RVA: 0x18BB6C4 Offset: 0x18BB6C4 VA: 0x18BB6C4
	public void SetCurrentSelection() { }
}

// Namespace: 
public class NGuiPlayMakerProxy : MonoBehaviour // TypeDefIndex: 12205
{
	// Methods

	// RVA: 0x18BB8B4 Offset: 0x18BB8B4 VA: 0x18BB8B4
	public void .ctor() { }

	// RVA: 0x18BB8BC Offset: 0x18BB8BC VA: 0x18BB8BC
	private void Start() { }

	// RVA: 0x18BB8C0 Offset: 0x18BB8C0 VA: 0x18BB8C0
	private void Update() { }

	// RVA: 0x18BA168 Offset: 0x18BA168 VA: 0x18BA168
	public static string GetFsmEventEnumValue(Enum value) { }
}

// Namespace: 
public enum NGuiPlayMakerDelegates // TypeDefIndex: 12206
{
	// Fields
	public int value__; // 0x0
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF33AC Offset: 0xCF33AC VA: 0xCF33AC
	public const NGuiPlayMakerDelegates OnClickEvent = 0;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF33E4 Offset: 0xCF33E4 VA: 0xCF33E4
	public const NGuiPlayMakerDelegates OnHoverEvent = 1;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF341C Offset: 0xCF341C VA: 0xCF341C
	public const NGuiPlayMakerDelegates OnHoverEventEnter = 2;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF3454 Offset: 0xCF3454 VA: 0xCF3454
	public const NGuiPlayMakerDelegates OnHoverEventExit = 3;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF348C Offset: 0xCF348C VA: 0xCF348C
	public const NGuiPlayMakerDelegates OnPressEvent = 4;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF34C4 Offset: 0xCF34C4 VA: 0xCF34C4
	public const NGuiPlayMakerDelegates OnPressEventUp = 5;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF34FC Offset: 0xCF34FC VA: 0xCF34FC
	public const NGuiPlayMakerDelegates OnPressEventDown = 6;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF3534 Offset: 0xCF3534 VA: 0xCF3534
	public const NGuiPlayMakerDelegates OnSelectEvent = 7;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF356C Offset: 0xCF356C VA: 0xCF356C
	public const NGuiPlayMakerDelegates OnDragEvent = 8;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF35A4 Offset: 0xCF35A4 VA: 0xCF35A4
	public const NGuiPlayMakerDelegates OnDropEvent = 9;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF35DC Offset: 0xCF35DC VA: 0xCF35DC
	public const NGuiPlayMakerDelegates OnSubmitEvent = 10;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF3614 Offset: 0xCF3614 VA: 0xCF3614
	public const NGuiPlayMakerDelegates OnSliderChangeEvent = 11;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF364C Offset: 0xCF364C VA: 0xCF364C
	public const NGuiPlayMakerDelegates OnSelectionChangeEvent = 12;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF3684 Offset: 0xCF3684 VA: 0xCF3684
	public const NGuiPlayMakerDelegates OnTooltipEvent = 13;
	[PlayMakerUtils_FsmEvent] // RVA: 0xCF36BC Offset: 0xCF36BC VA: 0xCF36BC
	public const NGuiPlayMakerDelegates OnChangeEvent = 14;
}

// Namespace: 
public class PlayMakerUtils_FsmEvent : Attribute // TypeDefIndex: 12207
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; }

	// Methods

	// RVA: 0x1BD47F8 Offset: 0x1BD47F8 VA: 0x1BD47F8
	public void .ctor(string value) { }

	// RVA: 0x1BD4824 Offset: 0x1BD4824 VA: 0x1BD4824
	public string get_Value() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99818 Offset: 0xC99818 VA: 0xC99818
[TooltipAttribute] // RVA: 0xC99818 Offset: 0xC99818 VA: 0xC99818
public class NguiGetJoystickInput : FsmStateAction // TypeDefIndex: 12208
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF36F4 Offset: 0xCF36F4 VA: 0xCF36F4
	[CheckForComponentAttribute] // RVA: 0xCF36F4 Offset: 0xCF36F4 VA: 0xCF36F4
	[TooltipAttribute] // RVA: 0xCF36F4 Offset: 0xCF36F4 VA: 0xCF36F4
	public FsmOwnerDefault gameObject; // 0x50
	[UIHintAttribute] // RVA: 0xCF378C Offset: 0xCF378C VA: 0xCF378C
	[TooltipAttribute] // RVA: 0xCF378C Offset: 0xCF378C VA: 0xCF378C
	public FsmVector2 input; // 0x58
	[UIHintAttribute] // RVA: 0xCF37DC Offset: 0xCF37DC VA: 0xCF37DC
	[TooltipAttribute] // RVA: 0xCF37DC Offset: 0xCF37DC VA: 0xCF37DC
	public FsmFloat angle; // 0x60
	[UIHintAttribute] // RVA: 0xCF382C Offset: 0xCF382C VA: 0xCF382C
	[TooltipAttribute] // RVA: 0xCF382C Offset: 0xCF382C VA: 0xCF382C
	public FsmVector3 inputAndAngle; // 0x68
	[TooltipAttribute] // RVA: 0xCF387C Offset: 0xCF387C VA: 0xCF387C
	public bool everyFrame; // 0x70
	private UIJoystick _joystick; // 0x78

	// Methods

	// RVA: 0x20F78F8 Offset: 0x20F78F8 VA: 0x20F78F8
	public void .ctor() { }

	// RVA: 0x20F7900 Offset: 0x20F7900 VA: 0x20F7900 Slot: 28
	public override void Reset() { }

	// RVA: 0x20F7914 Offset: 0x20F7914 VA: 0x20F7914 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x20F7B94 Offset: 0x20F7B94 VA: 0x20F7B94 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x20F7A40 Offset: 0x20F7A40 VA: 0x20F7A40
	private void doGetPadInputs() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC99878 Offset: 0xC99878 VA: 0xC99878
public class UIJoystick : MonoBehaviour // TypeDefIndex: 12209
{
	// Fields
	private Transform target; // 0x18
	public Vector3 scale; // 0x20
	public Vector2 range; // 0x2C
	public float deadZone; // 0x34
	public bool circularPadConstraint; // 0x38
	public float springBackSpeed; // 0x3C
	public Vector2 padPosition; // 0x40
	public float padAngle; // 0x48
	public Vector3 padPositionAndAngle; // 0x4C
	private Vector3 mStartPos; // 0x58
	private Vector3 mStartLocalPos; // 0x64
	private Plane mPlane; // 0x70
	private Vector3 mLastPos; // 0x80
	private bool mPressed; // 0x8C
	private Vector3 totalOffset; // 0x90
	private Vector3 startOffset; // 0x9C
	private Vector3 totalWorldOffset; // 0xA8
	private bool mDragStarted; // 0xB4
	private Vector2 mDragStartOffset; // 0xB8
	private bool started; // 0xC0

	// Methods

	// RVA: 0x215B6D4 Offset: 0x215B6D4 VA: 0x215B6D4
	public void .ctor() { }

	// RVA: 0x215B78C Offset: 0x215B78C VA: 0x215B78C
	private void Start() { }

	// RVA: 0x215B7B4 Offset: 0x215B7B4 VA: 0x215B7B4
	private void OnPress(bool pressed) { }

	// RVA: 0x215BA50 Offset: 0x215BA50 VA: 0x215BA50
	private void Update() { }

	// RVA: 0x215BBB8 Offset: 0x215BBB8 VA: 0x215BBB8
	private static bool Vector3AlmostEquals(Vector3 target, Vector3 second, float sqrMagniturePrecision) { }

	// RVA: 0x215BC9C Offset: 0x215BC9C VA: 0x215BC9C
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x215C078 Offset: 0x215C078 VA: 0x215C078
	private void LateUpdate() { }
}

// Namespace: HutongGames.PlayMaker
public static class ActionHelpers // TypeDefIndex: 12210
{
	// Fields
	public static RaycastHit mousePickInfo; // 0x0
	private static float mousePickRaycastTime; // 0x2C
	private static float mousePickDistanceUsed; // 0x30
	private static int mousePickLayerMaskUsed; // 0x34

	// Properties
	public static Texture2D WhiteTexture { get; }

	// Methods

	// RVA: 0x210F5BC Offset: 0x210F5BC VA: 0x210F5BC
	public static Texture2D get_WhiteTexture() { }

	// RVA: 0x210F5C4 Offset: 0x210F5C4 VA: 0x210F5C4
	public static Color BlendColor(ColorBlendMode blendMode, Color c1, Color c2) { }

	// RVA: 0x210F79C Offset: 0x210F79C VA: 0x210F79C
	public static bool IsVisible(GameObject go) { }

	// RVA: 0x210F888 Offset: 0x210F888 VA: 0x210F888
	public static GameObject GetOwnerDefault(FsmStateAction action, FsmOwnerDefault ownerDefault) { }

	// RVA: 0x210F8D4 Offset: 0x210F8D4 VA: 0x210F8D4
	public static PlayMakerFSM GetGameObjectFsm(GameObject go, string fsmName) { }

	// RVA: 0x210FA40 Offset: 0x210FA40 VA: 0x210FA40
	public static int GetRandomWeightedIndex(FsmFloat[] weights) { }

	// RVA: 0x210FB90 Offset: 0x210FB90 VA: 0x210FB90
	public static void AddAnimationClip(GameObject go, AnimationClip animClip) { }

	// RVA: 0x210FCAC Offset: 0x210FCAC VA: 0x210FCAC
	public static bool HasAnimationFinished(AnimationState anim, float prevTime, float currentTime) { }

	// RVA: 0x210FDD4 Offset: 0x210FDD4 VA: 0x210FDD4
	public static Vector3 GetPosition(FsmGameObject fsmGameObject, FsmVector3 fsmVector3) { }

	// RVA: 0x210FF70 Offset: 0x210FF70 VA: 0x210FF70
	public static Quaternion GetTargetRotation(RotationOptions option, Transform owner, Transform target, Vector3 rotation) { }

	// RVA: 0x21102F0 Offset: 0x21102F0 VA: 0x21102F0
	public static bool GetTargetRotation(RotationOptions option, Transform owner, FsmVector3 rotation, FsmGameObject target, out Quaternion targetRotation) { }

	// RVA: 0x2110488 Offset: 0x2110488 VA: 0x2110488
	private static bool CanEditTargetRotation(RotationOptions option, NamedVariable rotation, FsmGameObject target) { }

	// RVA: 0x21105AC Offset: 0x21105AC VA: 0x21105AC
	public static Vector3 GetTargetScale(ScaleOptions option, Transform owner, Transform target, Vector3 scale) { }

	// RVA: 0x2110830 Offset: 0x2110830 VA: 0x2110830
	public static bool GetTargetPosition(PositionOptions option, Transform owner, FsmVector3 position, FsmGameObject target, out Vector3 targetPosition) { }

	// RVA: 0x21109C0 Offset: 0x21109C0 VA: 0x21109C0
	private static bool IsValidTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target) { }

	// RVA: 0x2110DD8 Offset: 0x2110DD8 VA: 0x2110DD8
	public static bool CanEditTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target) { }

	// RVA: 0x2110AE4 Offset: 0x2110AE4 VA: 0x2110AE4
	public static Vector3 GetTargetPosition(PositionOptions option, Transform owner, Transform target, Vector3 position) { }

	// RVA: 0x2110EFC Offset: 0x2110EFC VA: 0x2110EFC
	public static bool IsMouseOver(GameObject gameObject, float distance, int layerMask) { }

	// RVA: 0x211111C Offset: 0x211111C VA: 0x211111C
	public static RaycastHit MousePick(float distance, int layerMask) { }

	// RVA: 0x2110FD8 Offset: 0x2110FD8 VA: 0x2110FD8
	public static GameObject MouseOver(float distance, int layerMask) { }

	// RVA: 0x21111F0 Offset: 0x21111F0 VA: 0x21111F0
	private static void DoMousePick(float distance, int layerMask) { }

	// RVA: 0x2111338 Offset: 0x2111338 VA: 0x2111338
	public static int LayerArrayToLayerMask(FsmInt[] layers, bool invert) { }

	// RVA: 0x21113F0 Offset: 0x21113F0 VA: 0x21113F0
	public static bool IsLoopingWrapMode(WrapMode wrapMode) { }

	// RVA: 0x2111408 Offset: 0x2111408 VA: 0x2111408
	public static string CheckRayDistance(float rayDistance) { }

	// RVA: 0x2111490 Offset: 0x2111490 VA: 0x2111490
	public static string CheckForValidEvent(FsmState state, string eventName) { }

	// RVA: 0x21116E4 Offset: 0x21116E4 VA: 0x21116E4
	public static string CheckPhysicsSetup(FsmOwnerDefault ownerDefault) { }

	// RVA: 0x2111924 Offset: 0x2111924 VA: 0x2111924
	public static string CheckOwnerPhysicsSetup(GameObject gameObject) { }

	// RVA: 0x2111784 Offset: 0x2111784 VA: 0x2111784
	public static string CheckPhysicsSetup(GameObject gameObject) { }

	// RVA: 0x2111928 Offset: 0x2111928 VA: 0x2111928
	public static string CheckPhysics2dSetup(FsmOwnerDefault ownerDefault) { }

	// RVA: 0x2111B68 Offset: 0x2111B68 VA: 0x2111B68
	public static string CheckOwnerPhysics2dSetup(GameObject gameObject) { }

	// RVA: 0x21119C8 Offset: 0x21119C8 VA: 0x21119C8
	public static string CheckPhysics2dSetup(GameObject gameObject) { }

	// RVA: 0x2111B6C Offset: 0x2111B6C VA: 0x2111B6C
	public static void DebugLog(Fsm fsm, LogLevel logLevel, string text, bool sendToUnityLog = False) { }

	// RVA: 0x2111ED4 Offset: 0x2111ED4 VA: 0x2111ED4
	public static void LogError(string text) { }

	// RVA: 0x2111F48 Offset: 0x2111F48 VA: 0x2111F48
	public static void LogWarning(string text) { }

	// RVA: 0x2111CB0 Offset: 0x2111CB0 VA: 0x2111CB0
	public static string FormatUnityLogString(string text) { }

	// RVA: 0x2111FBC Offset: 0x2111FBC VA: 0x2111FBC
	public static string GetValueLabel(INamedVariable variable) { }

	// RVA: 0x2112024 Offset: 0x2112024 VA: 0x2112024
	public static string GetValueLabel(Fsm fsm, FsmOwnerDefault ownerDefault) { }

	// RVA: 0x21120A8 Offset: 0x21120A8 VA: 0x21120A8
	public static string AutoName(FsmStateAction action, INamedVariable[] exposedFields) { }

	// RVA: 0x21120FC Offset: 0x21120FC VA: 0x21120FC
	public static string AutoName(string actionName, INamedVariable[] exposedFields) { }

	// RVA: 0x211220C Offset: 0x211220C VA: 0x211220C
	public static string AutoNameRange(FsmStateAction action, NamedVariable min, NamedVariable max) { }

	// RVA: 0x2112274 Offset: 0x2112274 VA: 0x2112274
	public static string AutoNameRange(string actionName, NamedVariable min, NamedVariable max) { }

	// RVA: 0x2112490 Offset: 0x2112490 VA: 0x2112490
	public static string AutoNameSetVar(FsmStateAction action, NamedVariable var, NamedVariable value) { }

	// RVA: 0x21124F8 Offset: 0x21124F8 VA: 0x21124F8
	public static string AutoNameSetVar(string actionName, NamedVariable var, NamedVariable value) { }

	// RVA: 0x2112714 Offset: 0x2112714 VA: 0x2112714
	public static string AutoNameConvert(FsmStateAction action, NamedVariable fromVariable, NamedVariable toVariable) { }

	// RVA: 0x211277C Offset: 0x211277C VA: 0x211277C
	public static string AutoNameConvert(string actionName, NamedVariable fromVariable, NamedVariable toVariable) { }

	// RVA: 0x21129E0 Offset: 0x21129E0 VA: 0x21129E0
	public static string AutoNameGetProperty(FsmStateAction action, NamedVariable property, NamedVariable store) { }

	// RVA: 0x2112A48 Offset: 0x2112A48 VA: 0x2112A48
	public static string AutoNameGetProperty(string actionName, NamedVariable property, NamedVariable store) { }

	[ObsoleteAttribute] // RVA: 0xD44DBC Offset: 0xD44DBC VA: 0xD44DBC
	// RVA: 0x2112C64 Offset: 0x2112C64 VA: 0x2112C64
	public static void RuntimeError(FsmStateAction action, string error) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC998B0 Offset: 0xC998B0 VA: 0xC998B0
[TooltipAttribute] // RVA: 0xC998B0 Offset: 0xC998B0 VA: 0xC998B0
public class ActivateGameObject : FsmStateAction // TypeDefIndex: 12211
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF38B4 Offset: 0xCF38B4 VA: 0xCF38B4
	[TooltipAttribute] // RVA: 0xCF38B4 Offset: 0xCF38B4 VA: 0xCF38B4
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF3900 Offset: 0xCF3900 VA: 0xCF3900
	[TooltipAttribute] // RVA: 0xCF3900 Offset: 0xCF3900 VA: 0xCF3900
	public FsmBool activate; // 0x58
	[TooltipAttribute] // RVA: 0xCF394C Offset: 0xCF394C VA: 0xCF394C
	public FsmBool recursive; // 0x60
	[TooltipAttribute] // RVA: 0xCF3984 Offset: 0xCF3984 VA: 0xCF3984
	public bool resetOnExit; // 0x68
	[TooltipAttribute] // RVA: 0xCF39BC Offset: 0xCF39BC VA: 0xCF39BC
	public bool everyFrame; // 0x69
	private GameObject activatedGameObject; // 0x70

	// Methods

	// RVA: 0x21131B0 Offset: 0x21131B0 VA: 0x21131B0
	public void .ctor() { }

	// RVA: 0x21131B8 Offset: 0x21131B8 VA: 0x21131B8 Slot: 28
	public override void Reset() { }

	// RVA: 0x21131FC Offset: 0x21131FC VA: 0x21131FC Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2113360 Offset: 0x2113360 VA: 0x2113360 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x2113364 Offset: 0x2113364 VA: 0x2113364 Slot: 37
	public override void OnExit() { }

	// RVA: 0x2113238 Offset: 0x2113238 VA: 0x2113238
	private void DoActivateGameObject() { }

	// RVA: 0x2113480 Offset: 0x2113480 VA: 0x2113480
	public void SetActiveRecursively(GameObject go, bool state) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99900 Offset: 0xC99900 VA: 0xC99900
[TooltipAttribute] // RVA: 0xC99900 Offset: 0xC99900 VA: 0xC99900
public class AddAnimationClip : FsmStateAction // TypeDefIndex: 12212
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF39F4 Offset: 0xCF39F4 VA: 0xCF39F4
	[CheckForComponentAttribute] // RVA: 0xCF39F4 Offset: 0xCF39F4 VA: 0xCF39F4
	[TooltipAttribute] // RVA: 0xCF39F4 Offset: 0xCF39F4 VA: 0xCF39F4
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF3A8C Offset: 0xCF3A8C VA: 0xCF3A8C
	[ObjectTypeAttribute] // RVA: 0xCF3A8C Offset: 0xCF3A8C VA: 0xCF3A8C
	[TooltipAttribute] // RVA: 0xCF3A8C Offset: 0xCF3A8C VA: 0xCF3A8C
	public FsmObject animationClip; // 0x58
	[RequiredFieldAttribute] // RVA: 0xCF3B24 Offset: 0xCF3B24 VA: 0xCF3B24
	[TooltipAttribute] // RVA: 0xCF3B24 Offset: 0xCF3B24 VA: 0xCF3B24
	public FsmString animationName; // 0x60
	[TooltipAttribute] // RVA: 0xCF3B70 Offset: 0xCF3B70 VA: 0xCF3B70
	public FsmInt firstFrame; // 0x68
	[TooltipAttribute] // RVA: 0xCF3BA8 Offset: 0xCF3BA8 VA: 0xCF3BA8
	public FsmInt lastFrame; // 0x70
	[TooltipAttribute] // RVA: 0xCF3BE0 Offset: 0xCF3BE0 VA: 0xCF3BE0
	public FsmBool addLoopFrame; // 0x78

	// Methods

	// RVA: 0x23116A8 Offset: 0x23116A8 VA: 0x23116A8
	public void .ctor() { }

	// RVA: 0x23116B0 Offset: 0x23116B0 VA: 0x23116B0 Slot: 28
	public override void Reset() { }

	// RVA: 0x231175C Offset: 0x231175C VA: 0x231175C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2311784 Offset: 0x2311784 VA: 0x2311784
	private void DoAddAnimationClip() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99950 Offset: 0xC99950 VA: 0xC99950
[TooltipAttribute] // RVA: 0xC99950 Offset: 0xC99950 VA: 0xC99950
public class AddComponent : FsmStateAction // TypeDefIndex: 12213
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF3C18 Offset: 0xCF3C18 VA: 0xCF3C18
	[TooltipAttribute] // RVA: 0xCF3C18 Offset: 0xCF3C18 VA: 0xCF3C18
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF3C64 Offset: 0xCF3C64 VA: 0xCF3C64
	[UIHintAttribute] // RVA: 0xCF3C64 Offset: 0xCF3C64 VA: 0xCF3C64
	[TitleAttribute] // RVA: 0xCF3C64 Offset: 0xCF3C64 VA: 0xCF3C64
	[TooltipAttribute] // RVA: 0xCF3C64 Offset: 0xCF3C64 VA: 0xCF3C64
	public FsmString component; // 0x58
	[UIHintAttribute] // RVA: 0xCF3CE8 Offset: 0xCF3CE8 VA: 0xCF3CE8
	[ObjectTypeAttribute] // RVA: 0xCF3CE8 Offset: 0xCF3CE8 VA: 0xCF3CE8
	[TooltipAttribute] // RVA: 0xCF3CE8 Offset: 0xCF3CE8 VA: 0xCF3CE8
	public FsmObject storeComponent; // 0x60
	[TooltipAttribute] // RVA: 0xCF3D84 Offset: 0xCF3D84 VA: 0xCF3D84
	public FsmBool removeOnExit; // 0x68
	private Component addedComponent; // 0x70

	// Methods

	// RVA: 0x2311A18 Offset: 0x2311A18 VA: 0x2311A18
	public void .ctor() { }

	// RVA: 0x2311A20 Offset: 0x2311A20 VA: 0x2311A20 Slot: 28
	public override void Reset() { }

	// RVA: 0x2311A2C Offset: 0x2311A2C VA: 0x2311A2C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2311C44 Offset: 0x2311C44 VA: 0x2311C44 Slot: 37
	public override void OnExit() { }

	// RVA: 0x2311A54 Offset: 0x2311A54 VA: 0x2311A54
	private void DoAddComponent() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC999A0 Offset: 0xC999A0 VA: 0xC999A0
[TooltipAttribute] // RVA: 0xC999A0 Offset: 0xC999A0 VA: 0xC999A0
public class AddExplosionForce : ComponentAction<Rigidbody> // TypeDefIndex: 12214
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF3DBC Offset: 0xCF3DBC VA: 0xCF3DBC
	[CheckForComponentAttribute] // RVA: 0xCF3DBC Offset: 0xCF3DBC VA: 0xCF3DBC
	[TooltipAttribute] // RVA: 0xCF3DBC Offset: 0xCF3DBC VA: 0xCF3DBC
	public FsmOwnerDefault gameObject; // 0x60
	[RequiredFieldAttribute] // RVA: 0xCF3E54 Offset: 0xCF3E54 VA: 0xCF3E54
	[TooltipAttribute] // RVA: 0xCF3E54 Offset: 0xCF3E54 VA: 0xCF3E54
	public FsmVector3 center; // 0x68
	[RequiredFieldAttribute] // RVA: 0xCF3EA0 Offset: 0xCF3EA0 VA: 0xCF3EA0
	[TooltipAttribute] // RVA: 0xCF3EA0 Offset: 0xCF3EA0 VA: 0xCF3EA0
	public FsmFloat force; // 0x70
	[RequiredFieldAttribute] // RVA: 0xCF3EEC Offset: 0xCF3EEC VA: 0xCF3EEC
	[TooltipAttribute] // RVA: 0xCF3EEC Offset: 0xCF3EEC VA: 0xCF3EEC
	public FsmFloat radius; // 0x78
	[TooltipAttribute] // RVA: 0xCF3F38 Offset: 0xCF3F38 VA: 0xCF3F38
	public FsmFloat upwardsModifier; // 0x80
	[TooltipAttribute] // RVA: 0xCF3F70 Offset: 0xCF3F70 VA: 0xCF3F70
	public ForceMode forceMode; // 0x88
	[TooltipAttribute] // RVA: 0xCF3FA8 Offset: 0xCF3FA8 VA: 0xCF3FA8
	public bool everyFrame; // 0x8C

	// Methods

	// RVA: 0x2311D18 Offset: 0x2311D18 VA: 0x2311D18
	public void .ctor() { }

	// RVA: 0x2311D68 Offset: 0x2311D68 VA: 0x2311D68 Slot: 28
	public override void Reset() { }

	// RVA: 0x2311E00 Offset: 0x2311E00 VA: 0x2311E00 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x2311E38 Offset: 0x2311E38 VA: 0x2311E38 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x231204C Offset: 0x231204C VA: 0x231204C Slot: 33
	public override void OnFixedUpdate() { }

	// RVA: 0x2311E74 Offset: 0x2311E74 VA: 0x2311E74
	private void DoAddExplosionForce() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC999F0 Offset: 0xC999F0 VA: 0xC999F0
[TooltipAttribute] // RVA: 0xC999F0 Offset: 0xC999F0 VA: 0xC999F0
public class AddForce : ComponentAction<Rigidbody> // TypeDefIndex: 12215
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF3FE0 Offset: 0xCF3FE0 VA: 0xCF3FE0
	[CheckForComponentAttribute] // RVA: 0xCF3FE0 Offset: 0xCF3FE0 VA: 0xCF3FE0
	[TooltipAttribute] // RVA: 0xCF3FE0 Offset: 0xCF3FE0 VA: 0xCF3FE0
	public FsmOwnerDefault gameObject; // 0x60
	[UIHintAttribute] // RVA: 0xCF5078 Offset: 0xCF5078 VA: 0xCF5078
	[TooltipAttribute] // RVA: 0xCF5078 Offset: 0xCF5078 VA: 0xCF5078
	public FsmVector3 atPosition; // 0x68
	[UIHintAttribute] // RVA: 0xCF50C8 Offset: 0xCF50C8 VA: 0xCF50C8
	[TooltipAttribute] // RVA: 0xCF50C8 Offset: 0xCF50C8 VA: 0xCF50C8
	public FsmVector3 vector; // 0x70
	[TooltipAttribute] // RVA: 0xCF5118 Offset: 0xCF5118 VA: 0xCF5118
	public FsmFloat x; // 0x78
	[TooltipAttribute] // RVA: 0xCF5150 Offset: 0xCF5150 VA: 0xCF5150
	public FsmFloat y; // 0x80
	[TooltipAttribute] // RVA: 0xCF5188 Offset: 0xCF5188 VA: 0xCF5188
	public FsmFloat z; // 0x88
	[TooltipAttribute] // RVA: 0xCF51C0 Offset: 0xCF51C0 VA: 0xCF51C0
	public Space space; // 0x90
	[TooltipAttribute] // RVA: 0xCF51F8 Offset: 0xCF51F8 VA: 0xCF51F8
	public ForceMode forceMode; // 0x94
	[TooltipAttribute] // RVA: 0xCF5230 Offset: 0xCF5230 VA: 0xCF5230
	public bool everyFrame; // 0x98

	// Methods

	// RVA: 0x2312050 Offset: 0x2312050 VA: 0x2312050
	public void .ctor() { }

	// RVA: 0x23120A0 Offset: 0x23120A0 VA: 0x23120A0 Slot: 28
	public override void Reset() { }

	// RVA: 0x23121D0 Offset: 0x23121D0 VA: 0x23121D0 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x2312208 Offset: 0x2312208 VA: 0x2312208 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2312558 Offset: 0x2312558 VA: 0x2312558 Slot: 33
	public override void OnFixedUpdate() { }

	// RVA: 0x2312244 Offset: 0x2312244 VA: 0x2312244
	private void DoAddForce() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99A40 Offset: 0xC99A40 VA: 0xC99A40
[TooltipAttribute] // RVA: 0xC99A40 Offset: 0xC99A40 VA: 0xC99A40
public class AddMixingTransform : BaseAnimationAction // TypeDefIndex: 12216
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF5268 Offset: 0xCF5268 VA: 0xCF5268
	[CheckForComponentAttribute] // RVA: 0xCF5268 Offset: 0xCF5268 VA: 0xCF5268
	[TooltipAttribute] // RVA: 0xCF5268 Offset: 0xCF5268 VA: 0xCF5268
	public FsmOwnerDefault gameObject; // 0x60
	[RequiredFieldAttribute] // RVA: 0xCF5300 Offset: 0xCF5300 VA: 0xCF5300
	[TooltipAttribute] // RVA: 0xCF5300 Offset: 0xCF5300 VA: 0xCF5300
	public FsmString animationName; // 0x68
	[RequiredFieldAttribute] // RVA: 0xCF534C Offset: 0xCF534C VA: 0xCF534C
	[TooltipAttribute] // RVA: 0xCF534C Offset: 0xCF534C VA: 0xCF534C
	public FsmString transform; // 0x70
	[TooltipAttribute] // RVA: 0xCF5398 Offset: 0xCF5398 VA: 0xCF5398
	public FsmBool recursive; // 0x78

	// Methods

	// RVA: 0x2312A3C Offset: 0x2312A3C VA: 0x2312A3C
	public void .ctor() { }

	// RVA: 0x2312A90 Offset: 0x2312A90 VA: 0x2312A90 Slot: 28
	public override void Reset() { }

	// RVA: 0x2312B34 Offset: 0x2312B34 VA: 0x2312B34 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2312B5C Offset: 0x2312B5C VA: 0x2312B5C
	private void DoAddMixingTransform() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99A90 Offset: 0xC99A90 VA: 0xC99A90
[TooltipAttribute] // RVA: 0xC99A90 Offset: 0xC99A90 VA: 0xC99A90
public class AddScript : FsmStateAction // TypeDefIndex: 12217
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF53D0 Offset: 0xCF53D0 VA: 0xCF53D0
	[TooltipAttribute] // RVA: 0xCF53D0 Offset: 0xCF53D0 VA: 0xCF53D0
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF541C Offset: 0xCF541C VA: 0xCF541C
	[TooltipAttribute] // RVA: 0xCF541C Offset: 0xCF541C VA: 0xCF541C
	[UIHintAttribute] // RVA: 0xCF541C Offset: 0xCF541C VA: 0xCF541C
	public FsmString script; // 0x58
	[TooltipAttribute] // RVA: 0xCF547C Offset: 0xCF547C VA: 0xCF547C
	public FsmBool removeOnExit; // 0x60
	private Component addedComponent; // 0x68

	// Methods

	// RVA: 0x2313120 Offset: 0x2313120 VA: 0x2313120
	public void .ctor() { }

	// RVA: 0x2313128 Offset: 0x2313128 VA: 0x2313128 Slot: 28
	public override void Reset() { }

	// RVA: 0x2313130 Offset: 0x2313130 VA: 0x2313130 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2313334 Offset: 0x2313334 VA: 0x2313334 Slot: 37
	public override void OnExit() { }

	// RVA: 0x23131C4 Offset: 0x23131C4 VA: 0x23131C4
	private void DoAddComponent(GameObject go) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99AE0 Offset: 0xC99AE0 VA: 0xC99AE0
[TooltipAttribute] // RVA: 0xC99AE0 Offset: 0xC99AE0 VA: 0xC99AE0
public class AddTorque : ComponentAction<Rigidbody> // TypeDefIndex: 12218
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF54B4 Offset: 0xCF54B4 VA: 0xCF54B4
	[CheckForComponentAttribute] // RVA: 0xCF54B4 Offset: 0xCF54B4 VA: 0xCF54B4
	[TooltipAttribute] // RVA: 0xCF54B4 Offset: 0xCF54B4 VA: 0xCF54B4
	public FsmOwnerDefault gameObject; // 0x60
	[UIHintAttribute] // RVA: 0xCF554C Offset: 0xCF554C VA: 0xCF554C
	[TooltipAttribute] // RVA: 0xCF554C Offset: 0xCF554C VA: 0xCF554C
	public FsmVector3 vector; // 0x68
	[TooltipAttribute] // RVA: 0xCF559C Offset: 0xCF559C VA: 0xCF559C
	public FsmFloat x; // 0x70
	[TooltipAttribute] // RVA: 0xCF55D4 Offset: 0xCF55D4 VA: 0xCF55D4
	public FsmFloat y; // 0x78
	[TooltipAttribute] // RVA: 0xCF560C Offset: 0xCF560C VA: 0xCF560C
	public FsmFloat z; // 0x80
	[TooltipAttribute] // RVA: 0xCF5644 Offset: 0xCF5644 VA: 0xCF5644
	public Space space; // 0x88
	[TooltipAttribute] // RVA: 0xCF567C Offset: 0xCF567C VA: 0xCF567C
	public ForceMode forceMode; // 0x8C
	[TooltipAttribute] // RVA: 0xCF56B4 Offset: 0xCF56B4 VA: 0xCF56B4
	public bool everyFrame; // 0x90

	// Methods

	// RVA: 0x2313408 Offset: 0x2313408 VA: 0x2313408
	public void .ctor() { }

	// RVA: 0x2313458 Offset: 0x2313458 VA: 0x2313458 Slot: 28
	public override void Reset() { }

	// RVA: 0x231354C Offset: 0x231354C VA: 0x231354C Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x2313584 Offset: 0x2313584 VA: 0x2313584 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x2313850 Offset: 0x2313850 VA: 0x2313850 Slot: 33
	public override void OnFixedUpdate() { }

	// RVA: 0x23135C0 Offset: 0x23135C0 VA: 0x23135C0
	private void DoAddTorque() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99B30 Offset: 0xC99B30 VA: 0xC99B30
[TooltipAttribute] // RVA: 0xC99B30 Offset: 0xC99B30 VA: 0xC99B30
public class AnimateFloat : FsmStateAction // TypeDefIndex: 12219
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF56EC Offset: 0xCF56EC VA: 0xCF56EC
	[TooltipAttribute] // RVA: 0xCF56EC Offset: 0xCF56EC VA: 0xCF56EC
	public FsmAnimationCurve animCurve; // 0x50
	[RequiredFieldAttribute] // RVA: 0xCF5738 Offset: 0xCF5738 VA: 0xCF5738
	[UIHintAttribute] // RVA: 0xCF5738 Offset: 0xCF5738 VA: 0xCF5738
	[TooltipAttribute] // RVA: 0xCF5738 Offset: 0xCF5738 VA: 0xCF5738
	public FsmFloat floatVariable; // 0x58
	[TooltipAttribute] // RVA: 0xCF5798 Offset: 0xCF5798 VA: 0xCF5798
	public FsmEvent finishEvent; // 0x60
	[TooltipAttribute] // RVA: 0xCF57D0 Offset: 0xCF57D0 VA: 0xCF57D0
	public bool realTime; // 0x68
	private float startTime; // 0x6C
	private float currentTime; // 0x70
	private float endTime; // 0x74
	private bool looping; // 0x78

	// Methods

	// RVA: 0x2315304 Offset: 0x2315304 VA: 0x2315304
	public void .ctor() { }

	// RVA: 0x231530C Offset: 0x231530C VA: 0x231530C Slot: 28
	public override void Reset() { }

	// RVA: 0x231531C Offset: 0x231531C VA: 0x231531C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x23154D4 Offset: 0x23154D4 VA: 0x23154D4 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99B80 Offset: 0xC99B80 VA: 0xC99B80
[TooltipAttribute] // RVA: 0xC99B80 Offset: 0xC99B80 VA: 0xC99B80
public class AnimateColor : AnimateFsmAction // TypeDefIndex: 12220
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF5808 Offset: 0xCF5808 VA: 0xCF5808
	[UIHintAttribute] // RVA: 0xCF5808 Offset: 0xCF5808 VA: 0xCF5808
	public FsmColor colorVariable; // 0xD8
	[RequiredFieldAttribute] // RVA: 0xCF5844 Offset: 0xCF5844 VA: 0xCF5844
	public FsmAnimationCurve curveR; // 0xE0
	[TooltipAttribute] // RVA: 0xCF5854 Offset: 0xCF5854 VA: 0xCF5854
	public AnimateFsmAction.Calculation calculationR; // 0xE8
	[RequiredFieldAttribute] // RVA: 0xCF588C Offset: 0xCF588C VA: 0xCF588C
	public FsmAnimationCurve curveG; // 0xF0
	[TooltipAttribute] // RVA: 0xCF589C Offset: 0xCF589C VA: 0xCF589C
	public AnimateFsmAction.Calculation calculationG; // 0xF8
	[RequiredFieldAttribute] // RVA: 0xCF58D4 Offset: 0xCF58D4 VA: 0xCF58D4
	public FsmAnimationCurve curveB; // 0x100
	[TooltipAttribute] // RVA: 0xCF58E4 Offset: 0xCF58E4 VA: 0xCF58E4
	public AnimateFsmAction.Calculation calculationB; // 0x108
	[RequiredFieldAttribute] // RVA: 0xCF591C Offset: 0xCF591C VA: 0xCF591C
	public FsmAnimationCurve curveA; // 0x110
	[TooltipAttribute] // RVA: 0xCF592C Offset: 0xCF592C VA: 0xCF592C
	public AnimateFsmAction.Calculation calculationA; // 0x118
	private bool finishInNextStep; // 0x11C

	// Methods

	// RVA: 0x2313FA0 Offset: 0x2313FA0 VA: 0x2313FA0
	public void .ctor() { }

	// RVA: 0x2313FB0 Offset: 0x2313FB0 VA: 0x2313FB0 Slot: 28
	public override void Reset() { }

	// RVA: 0x23141DC Offset: 0x23141DC VA: 0x23141DC Slot: 32
	public override void OnEnter() { }

	// RVA: 0x23150C4 Offset: 0x23150C4 VA: 0x23150C4
	private void UpdateVariableValue() { }

	// RVA: 0x231521C Offset: 0x231521C VA: 0x231521C Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC99BD0 Offset: 0xC99BD0 VA: 0xC99BD0
[TooltipAttribute] // RVA: 0xC99BD0 Offset: 0xC99BD0 VA: 0xC99BD0
public class AnimateFloatV2 : AnimateFsmAction // TypeDefIndex: 12221
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xCF5964 Offset: 0xCF5964 VA: 0xCF5964
	[UIHintAttribute] // RVA: 0xCF5964 Offset: 0xCF5964 VA: 0xCF5964
	public FsmFloat floatVariable; // 0xD8
	[RequiredFieldAttribute] // RVA: 0xCF59A0 Offset: 0xCF59A0 VA: 0xCF59A0
	public FsmAnimationCurve animCurve; // 0xE0
	[TooltipAttribute] // RVA: 0xCF59B0 Offset: 0xCF59B0 VA: 0xCF59B0
