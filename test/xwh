	public List<UISpriteData> spriteList { get; set; }
	public Texture texture { get; }
	public float pixelSize { get; set; }
	public UIAtlas replacement { get; set; }

	// Methods

	// RVA: 0x212C4F4 Offset: 0x212C4F4 VA: 0x212C4F4
	public void .ctor() { }

	// RVA: 0x212C5C4 Offset: 0x212C5C4 VA: 0x212C5C4
	public Material get_spriteMaterial() { }

	// RVA: 0x212C668 Offset: 0x212C668 VA: 0x212C668
	public void set_spriteMaterial(Material value) { }

	// RVA: 0x212CC08 Offset: 0x212CC08 VA: 0x212CC08
	public bool get_premultipliedAlpha() { }

	// RVA: 0x212CDAC Offset: 0x212CDAC VA: 0x212CDAC
	public List<UISpriteData> get_spriteList() { }

	// RVA: 0x212D39C Offset: 0x212D39C VA: 0x212D39C
	public void set_spriteList(List<UISpriteData> value) { }

	// RVA: 0x212D44C Offset: 0x212D44C VA: 0x212D44C
	public Texture get_texture() { }

	// RVA: 0x212D54C Offset: 0x212D54C VA: 0x212D54C
	public float get_pixelSize() { }

	// RVA: 0x212D5F0 Offset: 0x212D5F0 VA: 0x212D5F0
	public void set_pixelSize(float value) { }

	// RVA: 0x212D6FC Offset: 0x212D6FC VA: 0x212D6FC
	public UIAtlas get_replacement() { }

	// RVA: 0x212D704 Offset: 0x212D704 VA: 0x212D704
	public void set_replacement(UIAtlas value) { }

	// RVA: 0x212D8B0 Offset: 0x212D8B0 VA: 0x212D8B0
	public UISpriteData GetSprite(string name) { }

	// RVA: 0x212DD08 Offset: 0x212DD08 VA: 0x212DD08
	public string GetRandomSprite(string startsWith) { }

	// RVA: 0x212DBE8 Offset: 0x212DBE8 VA: 0x212DBE8
	public void MarkSpriteListAsChanged() { }

	// RVA: 0x212DF58 Offset: 0x212DF58 VA: 0x212DF58
	public void SortAlphabetically() { }

	// RVA: 0x212E028 Offset: 0x212E028 VA: 0x212E028
	public BetterList<string> GetListOfSprites() { }

	// RVA: 0x212E1F4 Offset: 0x212E1F4 VA: 0x212E1F4
	public BetterList<string> GetListOfSprites(string match) { }

	// RVA: 0x212E6E8 Offset: 0x212E6E8 VA: 0x212E6E8
	private bool References(UIAtlas atlas) { }

	// RVA: 0x212E7F8 Offset: 0x212E7F8 VA: 0x212E7F8
	public static bool CheckIfRelated(UIAtlas a, UIAtlas b) { }

	// RVA: 0x212C77C Offset: 0x212C77C VA: 0x212C77C
	public void MarkAsChanged() { }

	// RVA: 0x212CE80 Offset: 0x212CE80 VA: 0x212CE80
	private bool Upgrade() { }

	// RVA: 0x212E91C Offset: 0x212E91C VA: 0x212E91C
	public static UIAtlas GetUIAtlasBySpriteName(List<UIAtlas> atlases, string spName) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD79A0 Offset: 0xCD79A0 VA: 0xCD79A0
	// RVA: 0x212EA94 Offset: 0x212EA94 VA: 0x212EA94
	private static int <SortAlphabetically>m__0(UISpriteData s1, UISpriteData s2) { }
}

// Namespace: 
[Serializable]
private class UIAtlas.Sprite // TypeDefIndex: 12206
{
	// Fields
	public string name; // 0x10
	public Rect outer; // 0x18
	public Rect inner; // 0x28
	public bool rotated; // 0x38
	public float paddingLeft; // 0x3C
	public float paddingRight; // 0x40
	public float paddingTop; // 0x44
	public float paddingBottom; // 0x48

	// Properties
	public bool hasPadding { get; }

	// Methods

	// RVA: 0x212EAE8 Offset: 0x212EAE8 VA: 0x212EAE8
	public void .ctor() { }

	// RVA: 0x212EBC8 Offset: 0x212EBC8 VA: 0x212EBC8
	public bool get_hasPadding() { }
}

// Namespace: 
private enum UIAtlas.Coordinates // TypeDefIndex: 12207
{
	// Fields
	public int value__; // 0x0
	public const UIAtlas.Coordinates Pixels = 0;
	public const UIAtlas.Coordinates TexCoords = 1;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2D008 Offset: 0xC2D008 VA: 0xC2D008
[AddComponentMenu] // RVA: 0xC2D008 Offset: 0xC2D008 VA: 0xC2D008
public class UIFont : MonoBehaviour // TypeDefIndex: 12208
{
	// Fields
	[HideInInspector] // RVA: 0xC85A18 Offset: 0xC85A18 VA: 0xC85A18
	[SerializeField] // RVA: 0xC85A18 Offset: 0xC85A18 VA: 0xC85A18
	private Material mMat; // 0x18
	[HideInInspector] // RVA: 0xC85A50 Offset: 0xC85A50 VA: 0xC85A50
	[SerializeField] // RVA: 0xC85A50 Offset: 0xC85A50 VA: 0xC85A50
	private Rect mUVRect; // 0x20
	[HideInInspector] // RVA: 0xC85A88 Offset: 0xC85A88 VA: 0xC85A88
	[SerializeField] // RVA: 0xC85A88 Offset: 0xC85A88 VA: 0xC85A88
	private BMFont mFont; // 0x30
	[HideInInspector] // RVA: 0xC85AC0 Offset: 0xC85AC0 VA: 0xC85AC0
	[SerializeField] // RVA: 0xC85AC0 Offset: 0xC85AC0 VA: 0xC85AC0
	private UIAtlas mAtlas; // 0x38
	[HideInInspector] // RVA: 0xC85AF8 Offset: 0xC85AF8 VA: 0xC85AF8
	[SerializeField] // RVA: 0xC85AF8 Offset: 0xC85AF8 VA: 0xC85AF8
	private UIFont mReplacement; // 0x40
	[HideInInspector] // RVA: 0xC85B30 Offset: 0xC85B30 VA: 0xC85B30
	[SerializeField] // RVA: 0xC85B30 Offset: 0xC85B30 VA: 0xC85B30
	private List<BMSymbol> mSymbols; // 0x48
	[HideInInspector] // RVA: 0xC85B68 Offset: 0xC85B68 VA: 0xC85B68
	[SerializeField] // RVA: 0xC85B68 Offset: 0xC85B68 VA: 0xC85B68
	private Font mDynamicFont; // 0x50
	[HideInInspector] // RVA: 0xC85BA0 Offset: 0xC85BA0 VA: 0xC85BA0
	[SerializeField] // RVA: 0xC85BA0 Offset: 0xC85BA0 VA: 0xC85BA0
	private int mDynamicFontSize; // 0x58
	[HideInInspector] // RVA: 0xC85BD8 Offset: 0xC85BD8 VA: 0xC85BD8
	[SerializeField] // RVA: 0xC85BD8 Offset: 0xC85BD8 VA: 0xC85BD8
	private FontStyle mDynamicFontStyle; // 0x5C
	private UISpriteData mSprite; // 0x60
	private int mPMA; // 0x68
	private int mPacked; // 0x6C

	// Properties
	public BMFont bmFont { get; set; }
	public int texWidth { get; set; }
	public int texHeight { get; set; }
	public bool hasSymbols { get; }
	public List<BMSymbol> symbols { get; }
	public UIAtlas atlas { get; set; }
	public Material material { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDEF98 Offset: 0xCDEF98 VA: 0xCDEF98
	public bool premultipliedAlpha { get; }
	public bool premultipliedAlphaShader { get; }
	public bool packedFontShader { get; }
	public Texture2D texture { get; }
	public Rect uvRect { get; set; }
	public string spriteName { get; set; }
	public bool isValid { get; }
	[ObsoleteAttribute] // RVA: 0xCDEFD0 Offset: 0xCDEFD0 VA: 0xCDEFD0
	public int size { get; set; }
	public int defaultSize { get; set; }
	public UISpriteData sprite { get; }
	public UIFont replacement { get; set; }
	public bool isDynamic { get; }
	public Font dynamicFont { get; set; }
	public FontStyle dynamicFontStyle { get; set; }
	private Texture dynamicTexture { get; }

	// Methods

	// RVA: 0x1B1F3AC Offset: 0x1B1F3AC VA: 0x1B1F3AC
	public void .ctor() { }

	// RVA: 0x1B1F490 Offset: 0x1B1F490 VA: 0x1B1F490
	public BMFont get_bmFont() { }

	// RVA: 0x1B1F534 Offset: 0x1B1F534 VA: 0x1B1F534
	public void set_bmFont(BMFont value) { }

	// RVA: 0x1B1F5E4 Offset: 0x1B1F5E4 VA: 0x1B1F5E4
	public int get_texWidth() { }

	// RVA: 0x1B1F6A8 Offset: 0x1B1F6A8 VA: 0x1B1F6A8
	public void set_texWidth(int value) { }

	// RVA: 0x1B1F77C Offset: 0x1B1F77C VA: 0x1B1F77C
	public int get_texHeight() { }

	// RVA: 0x1B1F840 Offset: 0x1B1F840 VA: 0x1B1F840
	public void set_texHeight(int value) { }

	// RVA: 0x1B1F914 Offset: 0x1B1F914 VA: 0x1B1F914
	public bool get_hasSymbols() { }

	// RVA: 0x1B1F9D4 Offset: 0x1B1F9D4 VA: 0x1B1F9D4
	public List<BMSymbol> get_symbols() { }

	// RVA: 0x1B1FA78 Offset: 0x1B1FA78 VA: 0x1B1FA78
	public UIAtlas get_atlas() { }

	// RVA: 0x1B1FB1C Offset: 0x1B1FB1C VA: 0x1B1FB1C
	public void set_atlas(UIAtlas value) { }

	// RVA: 0x1B202B0 Offset: 0x1B202B0 VA: 0x1B202B0
	public Material get_material() { }

	// RVA: 0x1B20520 Offset: 0x1B20520 VA: 0x1B20520
	public void set_material(Material value) { }

	// RVA: 0x1B20624 Offset: 0x1B20624 VA: 0x1B20624
	public bool get_premultipliedAlpha() { }

	// RVA: 0x1B20628 Offset: 0x1B20628 VA: 0x1B20628
	public bool get_premultipliedAlphaShader() { }

	// RVA: 0x1B20828 Offset: 0x1B20828 VA: 0x1B20828
	public bool get_packedFontShader() { }

	// RVA: 0x1B20A04 Offset: 0x1B20A04 VA: 0x1B20A04
	public Texture2D get_texture() { }

	// RVA: 0x1B1FEE4 Offset: 0x1B1FEE4 VA: 0x1B1FEE4
	public Rect get_uvRect() { }

	// RVA: 0x1B20B1C Offset: 0x1B20B1C VA: 0x1B20B1C
	public void set_uvRect(Rect value) { }

	// RVA: 0x1B20C30 Offset: 0x1B20C30 VA: 0x1B20C30
	public string get_spriteName() { }

	// RVA: 0x1B20CE8 Offset: 0x1B20CE8 VA: 0x1B20CE8
	public void set_spriteName(string value) { }

	// RVA: 0x1B20E28 Offset: 0x1B20E28 VA: 0x1B20E28
	public bool get_isValid() { }

	// RVA: 0x1B20EC8 Offset: 0x1B20EC8 VA: 0x1B20EC8
	public int get_size() { }

	// RVA: 0x1B20F9C Offset: 0x1B20F9C VA: 0x1B20F9C
	public void set_size(int value) { }

	// RVA: 0x1B20ECC Offset: 0x1B20ECC VA: 0x1B20ECC
	public int get_defaultSize() { }

	// RVA: 0x1B20FA0 Offset: 0x1B20FA0 VA: 0x1B20FA0
	public void set_defaultSize(int value) { }

	// RVA: 0x1B1FC88 Offset: 0x1B1FC88 VA: 0x1B1FC88
	public UISpriteData get_sprite() { }

	// RVA: 0x1B21430 Offset: 0x1B21430 VA: 0x1B21430
	public UIFont get_replacement() { }

	// RVA: 0x1B21438 Offset: 0x1B21438 VA: 0x1B21438
	public void set_replacement(UIFont value) { }

	// RVA: 0x1B21050 Offset: 0x1B21050 VA: 0x1B21050
	public bool get_isDynamic() { }

	// RVA: 0x1B215F4 Offset: 0x1B215F4 VA: 0x1B215F4
	public Font get_dynamicFont() { }

	// RVA: 0x1B21698 Offset: 0x1B21698 VA: 0x1B21698
	public void set_dynamicFont(Font value) { }

	// RVA: 0x1B217D0 Offset: 0x1B217D0 VA: 0x1B217D0
	public FontStyle get_dynamicFontStyle() { }

	// RVA: 0x1B21874 Offset: 0x1B21874 VA: 0x1B21874
	public void set_dynamicFontStyle(FontStyle value) { }

	// RVA: 0x1B2194C Offset: 0x1B2194C VA: 0x1B2194C
	private void Trim() { }

	// RVA: 0x1B21C1C Offset: 0x1B21C1C VA: 0x1B21C1C
	private bool References(UIFont font) { }

	// RVA: 0x1B21D2C Offset: 0x1B21D2C VA: 0x1B21D2C
	public static bool CheckIfRelated(UIFont a, UIFont b) { }

	// RVA: 0x1B21F68 Offset: 0x1B21F68 VA: 0x1B21F68
	private Texture get_dynamicTexture() { }

	// RVA: 0x1B1FFF8 Offset: 0x1B1FFF8 VA: 0x1B1FFF8
	public void MarkAsChanged() { }

	// RVA: 0x1B21118 Offset: 0x1B21118 VA: 0x1B21118
	public void UpdateUVRect() { }

	// RVA: 0x1B22058 Offset: 0x1B22058 VA: 0x1B22058
	private BMSymbol GetSymbol(string sequence, bool createIfMissing) { }

	// RVA: 0x1B221D0 Offset: 0x1B221D0 VA: 0x1B221D0
	public BMSymbol MatchSymbol(string text, int offset, int textLength) { }

	// RVA: 0x1B22388 Offset: 0x1B22388 VA: 0x1B22388
	public void AddSymbol(string sequence, string spriteName) { }

	// RVA: 0x1B223CC Offset: 0x1B223CC VA: 0x1B223CC
	public void RemoveSymbol(string sequence) { }

	// RVA: 0x1B22460 Offset: 0x1B22460 VA: 0x1B22460
	public void RenameSymbol(string before, string after) { }

	// RVA: 0x1B22494 Offset: 0x1B22494 VA: 0x1B22494
	public bool UsesSprite(string s) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2D054 Offset: 0xC2D054 VA: 0xC2D054
public class UIInput : MonoBehaviour // TypeDefIndex: 12209
{
	// Fields
	public static UIInput current; // 0x0
	public static UIInput selection; // 0x8
	public UILabel label; // 0x18
	public UIInput.InputType inputType; // 0x20
	public UIInput.OnReturnKey onReturnKey; // 0x24
	public UIInput.KeyboardType keyboardType; // 0x28
	public bool hideInput; // 0x2C
	public bool selectAllTextOnFocus; // 0x2D
	public UIInput.Validation validation; // 0x30
	public int characterLimit; // 0x34
	public string savedAs; // 0x38
	[HideInInspector] // RVA: 0xC85C10 Offset: 0xC85C10 VA: 0xC85C10
	[SerializeField] // RVA: 0xC85C10 Offset: 0xC85C10 VA: 0xC85C10
	private GameObject selectOnTab; // 0x40
	public Color activeTextColor; // 0x48
	public Color caretColor; // 0x58
	public Color selectionColor; // 0x68
	public List<EventDelegate> onSubmit; // 0x78
	public List<EventDelegate> onChange; // 0x80
	public UIInput.OnValidate onValidate; // 0x88
	[SerializeField] // RVA: 0xC85C48 Offset: 0xC85C48 VA: 0xC85C48
	[HideInInspector] // RVA: 0xC85C48 Offset: 0xC85C48 VA: 0xC85C48
	protected string mValue; // 0x90
	protected string mDefaultText; // 0x98
	protected Color mDefaultColor; // 0xA0
	protected float mPosition; // 0xB0
	protected bool mDoInit; // 0xB4
	protected UIWidget.Pivot mPivot; // 0xB8
	protected bool mLoadSavedValue; // 0xBC
	protected static int mDrawStart; // 0x10
	protected static string mLastIME; // 0x18
	protected static TouchScreenKeyboard mKeyboard; // 0x20
	private static bool mWaitForKeyboard; // 0x28
	protected int mSelectionStart; // 0xC0
	protected int mSelectionEnd; // 0xC4
	protected UITexture mHighlight; // 0xC8
	protected UITexture mCaret; // 0xD0
	protected Texture2D mBlankTex; // 0xD8
	protected float mNextBlink; // 0xE0
	protected float mLastAlpha; // 0xE4
	protected string mCached; // 0xE8
	protected int mSelectMe; // 0xF0

	// Properties
	public string defaultText { get; set; }
	public bool inputShouldBeHidden { get; }
	[ObsoleteAttribute] // RVA: 0xCDF008 Offset: 0xCDF008 VA: 0xCDF008
	public string text { get; set; }
	public string value { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDF040 Offset: 0xCDF040 VA: 0xCDF040
	public bool selected { get; set; }
	public bool isSelected { get; set; }
	public int cursorPosition { get; set; }
	public int selectionStart { get; set; }
	public int selectionEnd { get; set; }
	public UITexture caret { get; }

	// Methods

	// RVA: 0x1BC9F4C Offset: 0x1BC9F4C VA: 0x1BC9F4C
	public void .ctor() { }

	// RVA: 0x1BCA0F0 Offset: 0x1BCA0F0 VA: 0x1BCA0F0
	public string get_defaultText() { }

	// RVA: 0x1BCA2D0 Offset: 0x1BCA2D0 VA: 0x1BCA2D0
	public void set_defaultText(string value) { }

	// RVA: 0x1BCB1F8 Offset: 0x1BCB1F8 VA: 0x1BCB1F8
	public bool get_inputShouldBeHidden() { }

	// RVA: 0x1BCB2B8 Offset: 0x1BCB2B8 VA: 0x1BCB2B8
	public string get_text() { }

	// RVA: 0x1BCB318 Offset: 0x1BCB318 VA: 0x1BCB318
	public void set_text(string value) { }

	// RVA: 0x1BCB2E8 Offset: 0x1BCB2E8 VA: 0x1BCB2E8
	public string get_value() { }

	// RVA: 0x1BCB31C Offset: 0x1BCB31C VA: 0x1BCB31C
	public void set_value(string value) { }

	// RVA: 0x1BCBAC8 Offset: 0x1BCBAC8 VA: 0x1BCBAC8
	public bool get_selected() { }

	// RVA: 0x1BCBACC Offset: 0x1BCBACC VA: 0x1BCBACC
	public void set_selected(bool value) { }

	// RVA: 0x1BCB814 Offset: 0x1BCB814 VA: 0x1BCB814
	public bool get_isSelected() { }

	// RVA: 0x1BCBAD4 Offset: 0x1BCBAD4 VA: 0x1BCBAD4
	public void set_isSelected(bool value) { }

	// RVA: 0x1BCBBA4 Offset: 0x1BCBBA4 VA: 0x1BCBBA4
	public int get_cursorPosition() { }

	// RVA: 0x1BCBC64 Offset: 0x1BCBC64 VA: 0x1BCBC64
	public void set_cursorPosition(int value) { }

	// RVA: 0x1BCBD10 Offset: 0x1BCBD10 VA: 0x1BCBD10
	public int get_selectionStart() { }

	// RVA: 0x1BCBDD8 Offset: 0x1BCBDD8 VA: 0x1BCBDD8
	public void set_selectionStart(int value) { }

	// RVA: 0x1BCBE84 Offset: 0x1BCBE84 VA: 0x1BCBE84
	public int get_selectionEnd() { }

	// RVA: 0x1BCBF44 Offset: 0x1BCBF44 VA: 0x1BCBF44
	public void set_selectionEnd(int value) { }

	// RVA: 0x1BCBFF0 Offset: 0x1BCBFF0 VA: 0x1BCBFF0
	public UITexture get_caret() { }

	// RVA: 0x1BCB56C Offset: 0x1BCB56C VA: 0x1BCB56C
	public string Validate(string val) { }

	// RVA: 0x1BCC7C4 Offset: 0x1BCC7C4 VA: 0x1BCC7C4
	private void Start() { }

	// RVA: 0x1BCA120 Offset: 0x1BCA120 VA: 0x1BCA120
	protected void Init() { }

	// RVA: 0x1BCB8B0 Offset: 0x1BCB8B0 VA: 0x1BCB8B0
	protected void SaveToPlayerPrefs(string val) { }

	// RVA: 0x1BCCAF0 Offset: 0x1BCCAF0 VA: 0x1BCCAF0 Slot: 4
	protected virtual void OnSelect(bool isSelected) { }

	// RVA: 0x1BCCAFC Offset: 0x1BCCAFC VA: 0x1BCCAFC
	protected void OnSelectEvent() { }

	// RVA: 0x1BCCBEC Offset: 0x1BCCBEC VA: 0x1BCCBEC
	protected void OnDeselectEvent() { }

	// RVA: 0x1BCCF00 Offset: 0x1BCCF00 VA: 0x1BCCF00 Slot: 5
	protected virtual void Update() { }

	// RVA: 0x1BCDBF8 Offset: 0x1BCDBF8 VA: 0x1BCDBF8
	protected void DoBackspace() { }

	// RVA: 0x1BCDE38 Offset: 0x1BCDE38 VA: 0x1BCDE38 Slot: 6
	protected virtual void Insert(string text) { }

	// RVA: 0x1BCE250 Offset: 0x1BCE250 VA: 0x1BCE250
	protected string GetLeftText() { }

	// RVA: 0x1BCE360 Offset: 0x1BCE360 VA: 0x1BCE360
	protected string GetRightText() { }

	// RVA: 0x1BCE48C Offset: 0x1BCE48C VA: 0x1BCE48C
	protected string GetSelection() { }

	// RVA: 0x1BCE5B0 Offset: 0x1BCE5B0 VA: 0x1BCE5B0
	protected int GetCharUnderMouse() { }

	// RVA: 0x1BCE8A8 Offset: 0x1BCE8A8 VA: 0x1BCE8A8 Slot: 7
	protected virtual void OnPress(bool isPressed) { }

	// RVA: 0x1BCE9E0 Offset: 0x1BCE9E0 VA: 0x1BCE9E0 Slot: 8
	protected virtual void OnDrag(Vector2 delta) { }

	// RVA: 0x1BCEACC Offset: 0x1BCEACC VA: 0x1BCEACC
	private void OnDisable() { }

	// RVA: 0x1BCEAD8 Offset: 0x1BCEAD8 VA: 0x1BCEAD8 Slot: 9
	protected virtual void Cleanup() { }

	// RVA: 0x1BCDCCC Offset: 0x1BCDCCC VA: 0x1BCDCCC
	public void Submit() { }

	// RVA: 0x1BCA308 Offset: 0x1BCA308 VA: 0x1BCA308
	public void UpdateLabel() { }

	// RVA: 0x1BCECDC Offset: 0x1BCECDC VA: 0x1BCECDC
	protected void SetPivotToLeft() { }

	// RVA: 0x1BCED30 Offset: 0x1BCED30 VA: 0x1BCED30
	protected void SetPivotToRight() { }

	// RVA: 0x1BCCE38 Offset: 0x1BCCE38 VA: 0x1BCCE38
	protected void RestoreLabelPivot() { }

	// RVA: 0x1BCC3EC Offset: 0x1BCC3EC VA: 0x1BCC3EC
	protected char Validate(string text, int pos, char ch) { }

	// RVA: 0x1BCB990 Offset: 0x1BCB990 VA: 0x1BCB990
	protected void ExecuteOnChange() { }

	// RVA: 0x1BCF150 Offset: 0x1BCF150 VA: 0x1BCF150
	public void RemoveFocus() { }

	// RVA: 0x1BCF158 Offset: 0x1BCF158 VA: 0x1BCF158
	public void SaveValue() { }

	// RVA: 0x1BCC988 Offset: 0x1BCC988 VA: 0x1BCC988
	public void LoadValue() { }

	// RVA: 0x1BCF160 Offset: 0x1BCF160 VA: 0x1BCF160
	private static void .cctor() { }
}

// Namespace: 
public enum UIInput.InputType // TypeDefIndex: 12210
{
	// Fields
	public int value__; // 0x0
	public const UIInput.InputType Standard = 0;
	public const UIInput.InputType AutoCorrect = 1;
	public const UIInput.InputType Password = 2;
}

// Namespace: 
public enum UIInput.Validation // TypeDefIndex: 12211
{
	// Fields
	public int value__; // 0x0
	public const UIInput.Validation None = 0;
	public const UIInput.Validation Integer = 1;
	public const UIInput.Validation Float = 2;
	public const UIInput.Validation Alphanumeric = 3;
	public const UIInput.Validation Username = 4;
	public const UIInput.Validation Name = 5;
}

// Namespace: 
public enum UIInput.KeyboardType // TypeDefIndex: 12212
{
	// Fields
	public int value__; // 0x0
	public const UIInput.KeyboardType Default = 0;
	public const UIInput.KeyboardType ASCIICapable = 1;
	public const UIInput.KeyboardType NumbersAndPunctuation = 2;
	public const UIInput.KeyboardType URL = 3;
	public const UIInput.KeyboardType NumberPad = 4;
	public const UIInput.KeyboardType PhonePad = 5;
	public const UIInput.KeyboardType NamePhonePad = 6;
	public const UIInput.KeyboardType EmailAddress = 7;
}

// Namespace: 
public enum UIInput.OnReturnKey // TypeDefIndex: 12213
{
	// Fields
	public int value__; // 0x0
	public const UIInput.OnReturnKey Default = 0;
	public const UIInput.OnReturnKey Submit = 1;
	public const UIInput.OnReturnKey NewLine = 2;
}

// Namespace: 
public sealed class UIInput.OnValidate : MulticastDelegate // TypeDefIndex: 12214
{
	// Methods

	// RVA: 0x1BCF1DC Offset: 0x1BCF1DC VA: 0x1BCF1DC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1BCBFF8 Offset: 0x1BCBFF8 VA: 0x1BCBFF8 Slot: 11
	public virtual char Invoke(string text, int charIndex, char addedChar) { }

	// RVA: 0x1BCF1EC Offset: 0x1BCF1EC VA: 0x1BCF1EC Slot: 12
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object) { }

	// RVA: 0x1BCF2A8 Offset: 0x1BCF2A8 VA: 0x1BCF2A8 Slot: 13
	public virtual char EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC2D08C Offset: 0xC2D08C VA: 0xC2D08C
public class UIInputOnGUI : MonoBehaviour // TypeDefIndex: 12215
{
	// Methods

	// RVA: 0x1BCF2E4 Offset: 0x1BCF2E4 VA: 0x1BCF2E4
	public void .ctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2D0F0 Offset: 0xC2D0F0 VA: 0xC2D0F0
[AddComponentMenu] // RVA: 0xC2D0F0 Offset: 0xC2D0F0 VA: 0xC2D0F0
public class UILabel : UIWidget // TypeDefIndex: 12216
{
	// Fields
	public UILabel.Crispness keepCrispWhenShrunk; // 0x180
	[HideInInspector] // RVA: 0xC85C80 Offset: 0xC85C80 VA: 0xC85C80
	[SerializeField] // RVA: 0xC85C80 Offset: 0xC85C80 VA: 0xC85C80
	private Font mTrueTypeFont; // 0x188
	[HideInInspector] // RVA: 0xC85CB8 Offset: 0xC85CB8 VA: 0xC85CB8
	[SerializeField] // RVA: 0xC85CB8 Offset: 0xC85CB8 VA: 0xC85CB8
	private UIFont mFont; // 0x190
	[MultilineAttribute] // RVA: 0xC85CF0 Offset: 0xC85CF0 VA: 0xC85CF0
	[HideInInspector] // RVA: 0xC85CF0 Offset: 0xC85CF0 VA: 0xC85CF0
	[SerializeField] // RVA: 0xC85CF0 Offset: 0xC85CF0 VA: 0xC85CF0
	private string mText; // 0x198
	[HideInInspector] // RVA: 0xC85D3C Offset: 0xC85D3C VA: 0xC85D3C
	[SerializeField] // RVA: 0xC85D3C Offset: 0xC85D3C VA: 0xC85D3C
	private int mFontSize; // 0x1A0
	[HideInInspector] // RVA: 0xC85D74 Offset: 0xC85D74 VA: 0xC85D74
	[SerializeField] // RVA: 0xC85D74 Offset: 0xC85D74 VA: 0xC85D74
	private FontStyle mFontStyle; // 0x1A4
	[HideInInspector] // RVA: 0xC85DAC Offset: 0xC85DAC VA: 0xC85DAC
	[SerializeField] // RVA: 0xC85DAC Offset: 0xC85DAC VA: 0xC85DAC
	private NGUIText.Alignment mAlignment; // 0x1A8
	[HideInInspector] // RVA: 0xC85DE4 Offset: 0xC85DE4 VA: 0xC85DE4
	[SerializeField] // RVA: 0xC85DE4 Offset: 0xC85DE4 VA: 0xC85DE4
	private bool mEncoding; // 0x1AC
	[HideInInspector] // RVA: 0xC85E1C Offset: 0xC85E1C VA: 0xC85E1C
	[SerializeField] // RVA: 0xC85E1C Offset: 0xC85E1C VA: 0xC85E1C
	private int mMaxLineCount; // 0x1B0
	[HideInInspector] // RVA: 0xC85E54 Offset: 0xC85E54 VA: 0xC85E54
	[SerializeField] // RVA: 0xC85E54 Offset: 0xC85E54 VA: 0xC85E54
	private UILabel.Effect mEffectStyle; // 0x1B4
	[HideInInspector] // RVA: 0xC85E8C Offset: 0xC85E8C VA: 0xC85E8C
	[SerializeField] // RVA: 0xC85E8C Offset: 0xC85E8C VA: 0xC85E8C
	private Color mEffectColor; // 0x1B8
	[HideInInspector] // RVA: 0xC85EC4 Offset: 0xC85EC4 VA: 0xC85EC4
	[SerializeField] // RVA: 0xC85EC4 Offset: 0xC85EC4 VA: 0xC85EC4
	private NGUIText.SymbolStyle mSymbols; // 0x1C8
	[HideInInspector] // RVA: 0xC85EFC Offset: 0xC85EFC VA: 0xC85EFC
	[SerializeField] // RVA: 0xC85EFC Offset: 0xC85EFC VA: 0xC85EFC
	private Vector2 mEffectDistance; // 0x1CC
	[HideInInspector] // RVA: 0xC85F34 Offset: 0xC85F34 VA: 0xC85F34
	[SerializeField] // RVA: 0xC85F34 Offset: 0xC85F34 VA: 0xC85F34
	private UILabel.Overflow mOverflow; // 0x1D4
	[HideInInspector] // RVA: 0xC85F6C Offset: 0xC85F6C VA: 0xC85F6C
	[SerializeField] // RVA: 0xC85F6C Offset: 0xC85F6C VA: 0xC85F6C
	private Material mMaterial; // 0x1D8
	[HideInInspector] // RVA: 0xC85FA4 Offset: 0xC85FA4 VA: 0xC85FA4
	[SerializeField] // RVA: 0xC85FA4 Offset: 0xC85FA4 VA: 0xC85FA4
	private bool mApplyGradient; // 0x1E0
	[HideInInspector] // RVA: 0xC85FDC Offset: 0xC85FDC VA: 0xC85FDC
	[SerializeField] // RVA: 0xC85FDC Offset: 0xC85FDC VA: 0xC85FDC
	private Color mGradientTop; // 0x1E4
	[HideInInspector] // RVA: 0xC86014 Offset: 0xC86014 VA: 0xC86014
	[SerializeField] // RVA: 0xC86014 Offset: 0xC86014 VA: 0xC86014
	private Color mGradientBottom; // 0x1F4
	[HideInInspector] // RVA: 0xC8604C Offset: 0xC8604C VA: 0xC8604C
	[SerializeField] // RVA: 0xC8604C Offset: 0xC8604C VA: 0xC8604C
	private int mSpacingX; // 0x204
	[HideInInspector] // RVA: 0xC86084 Offset: 0xC86084 VA: 0xC86084
	[SerializeField] // RVA: 0xC86084 Offset: 0xC86084 VA: 0xC86084
	private int mSpacingY; // 0x208
	[HideInInspector] // RVA: 0xC860BC Offset: 0xC860BC VA: 0xC860BC
	[SerializeField] // RVA: 0xC860BC Offset: 0xC860BC VA: 0xC860BC
	private bool mUseFloatSpacing; // 0x20C
	[HideInInspector] // RVA: 0xC860F4 Offset: 0xC860F4 VA: 0xC860F4
	[SerializeField] // RVA: 0xC860F4 Offset: 0xC860F4 VA: 0xC860F4
	private float mFloatSpacingX; // 0x210
	[HideInInspector] // RVA: 0xC8612C Offset: 0xC8612C VA: 0xC8612C
	[SerializeField] // RVA: 0xC8612C Offset: 0xC8612C VA: 0xC8612C
	private float mFloatSpacingY; // 0x214
	[HideInInspector] // RVA: 0xC86164 Offset: 0xC86164 VA: 0xC86164
	[SerializeField] // RVA: 0xC86164 Offset: 0xC86164 VA: 0xC86164
	private bool mShrinkToFit; // 0x218
	[HideInInspector] // RVA: 0xC8619C Offset: 0xC8619C VA: 0xC8619C
	[SerializeField] // RVA: 0xC8619C Offset: 0xC8619C VA: 0xC8619C
	private int mMaxLineWidth; // 0x21C
	[HideInInspector] // RVA: 0xC861D4 Offset: 0xC861D4 VA: 0xC861D4
	[SerializeField] // RVA: 0xC861D4 Offset: 0xC861D4 VA: 0xC861D4
	private int mMaxLineHeight; // 0x220
	[HideInInspector] // RVA: 0xC8620C Offset: 0xC8620C VA: 0xC8620C
	[SerializeField] // RVA: 0xC8620C Offset: 0xC8620C VA: 0xC8620C
	private float mLineWidth; // 0x224
	[HideInInspector] // RVA: 0xC86244 Offset: 0xC86244 VA: 0xC86244
	[SerializeField] // RVA: 0xC86244 Offset: 0xC86244 VA: 0xC86244
	private bool mMultiline; // 0x228
	private Color specificGradientTop; // 0x22C
	private Color specificGradientBottom; // 0x23C
	private Color specificOutline; // 0x24C
	private Font mActiveTTF; // 0x260
	private float mDensity; // 0x268
	private bool mShouldBeProcessed; // 0x26C
	private string mProcessedText; // 0x270
	private bool mPremultiply; // 0x278
	private Vector2 mCalculatedSize; // 0x27C
	private float mScale; // 0x284
	private int mPrintedSize; // 0x288
	private int mLastWidth; // 0x28C
	private int mLastHeight; // 0x290
	private static BetterList<UILabel> mList; // 0x0
	private static Dictionary<Font, int> mFontUsage; // 0x8
	private static bool mTexRebuildAdded; // 0x10
	private static BetterList<Vector3> mTempVerts; // 0x18
	private static BetterList<int> mTempIndices; // 0x20
	private static Font defaultFont; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC8627C Offset: 0xC8627C VA: 0xC8627C
	private static Action<Font> <>f__mg$cache0; // 0x30

	// Properties
	private bool shouldBeProcessed { get; set; }
	public override bool isAnchoredHorizontally { get; }
	public override bool isAnchoredVertically { get; }
	public override Material material { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDF078 Offset: 0xCDF078 VA: 0xCDF078
	public UIFont font { get; set; }
	public UIFont bitmapFont { get; set; }
	public Font trueTypeFont { get; set; }
	public Object ambigiousFont { get; set; }
	public string text { get; set; }
	public int defaultFontSize { get; }
	public int fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public NGUIText.Alignment alignment { get; set; }
	public bool applyGradient { get; set; }
	public Color gradientTop { get; set; }
	public Color gradientBottom { get; set; }
	public int spacingX { get; set; }
	public int spacingY { get; set; }
	public bool useFloatSpacing { get; set; }
	public float floatSpacingX { get; set; }
	public float floatSpacingY { get; set; }
	public float effectiveSpacingY { get; }
	public float effectiveSpacingX { get; }
	private bool keepCrisp { get; }
	public bool supportEncoding { get; set; }
	public NGUIText.SymbolStyle symbolStyle { get; set; }
	public UILabel.Overflow overflowMethod { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDF0B0 Offset: 0xCDF0B0 VA: 0xCDF0B0
	public int lineWidth { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDF0E8 Offset: 0xCDF0E8 VA: 0xCDF0E8
	public int lineHeight { get; set; }
	public bool multiLine { get; set; }
	public override Vector3[] localCorners { get; }
	public override Vector3[] worldCorners { get; }
	public override Vector4 drawingDimensions { get; }
	public int maxLineCount { get; set; }
	public UILabel.Effect effectStyle { get; set; }
	public Color effectColor { get; set; }
	public Vector2 effectDistance { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDF120 Offset: 0xCDF120 VA: 0xCDF120
	public bool shrinkToFit { get; set; }
	public string processedText { get; }
	public Vector2 printedSize { get; }
	public override Vector2 localSize { get; }
	private bool isValid { get; }

	// Methods

	// RVA: 0x1BD1694 Offset: 0x1BD1694 VA: 0x1BD1694
	public void .ctor() { }

	// RVA: 0x1BD1840 Offset: 0x1BD1840 VA: 0x1BD1840
	private bool get_shouldBeProcessed() { }

	// RVA: 0x1BD1848 Offset: 0x1BD1848 VA: 0x1BD1848
	private void set_shouldBeProcessed(bool value) { }

	// RVA: 0x1BD1864 Offset: 0x1BD1864 VA: 0x1BD1864 Slot: 4
	public override bool get_isAnchoredHorizontally() { }

	// RVA: 0x1BD18A0 Offset: 0x1BD18A0 VA: 0x1BD18A0 Slot: 5
	public override bool get_isAnchoredVertically() { }

	// RVA: 0x1BD18E0 Offset: 0x1BD18E0 VA: 0x1BD18E0 Slot: 24
	public override Material get_material() { }

	// RVA: 0x1BD1A1C Offset: 0x1BD1A1C VA: 0x1BD1A1C Slot: 25
	public override void set_material(Material value) { }

	// RVA: 0x1BD1AD0 Offset: 0x1BD1AD0 VA: 0x1BD1AD0
	public UIFont get_font() { }

	// RVA: 0x1BD1AD8 Offset: 0x1BD1AD8 VA: 0x1BD1AD8
	public void set_font(UIFont value) { }

	// RVA: 0x1BCEC20 Offset: 0x1BCEC20 VA: 0x1BCEC20
	public UIFont get_bitmapFont() { }

	// RVA: 0x1BD1ADC Offset: 0x1BD1ADC VA: 0x1BD1ADC
	public void set_bitmapFont(UIFont value) { }

	// RVA: 0x1BD1B90 Offset: 0x1BD1B90 VA: 0x1BD1B90
	public Font get_trueTypeFont() { }

	// RVA: 0x1BD1C78 Offset: 0x1BD1C78 VA: 0x1BD1C78
	public void set_trueTypeFont(Font value) { }

	// RVA: 0x1BD20B4 Offset: 0x1BD20B4 VA: 0x1BD20B4
	public Object get_ambigiousFont() { }

	// RVA: 0x1BD2144 Offset: 0x1BD2144 VA: 0x1BD2144
	public void set_ambigiousFont(Object value) { }

	// RVA: 0x1BC6A20 Offset: 0x1BC6A20 VA: 0x1BC6A20
	public string get_text() { }

	// RVA: 0x1BC4764 Offset: 0x1BC4764 VA: 0x1BC4764
	public void set_text(string value) { }

	// RVA: 0x1BD2244 Offset: 0x1BD2244 VA: 0x1BD2244
	public int get_defaultFontSize() { }

	// RVA: 0x1BC65A0 Offset: 0x1BC65A0 VA: 0x1BC65A0
	public int get_fontSize() { }

	// RVA: 0x1BD2334 Offset: 0x1BD2334 VA: 0x1BD2334
	public void set_fontSize(int value) { }

	// RVA: 0x1BD23E4 Offset: 0x1BD23E4 VA: 0x1BD23E4
	public FontStyle get_fontStyle() { }

	// RVA: 0x1BD23EC Offset: 0x1BD23EC VA: 0x1BD23EC
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x1BC6434 Offset: 0x1BC6434 VA: 0x1BC6434
	public NGUIText.Alignment get_alignment() { }

	// RVA: 0x1BCCACC Offset: 0x1BCCACC VA: 0x1BCCACC
	public void set_alignment(NGUIText.Alignment value) { }

	// RVA: 0x1BD2410 Offset: 0x1BD2410 VA: 0x1BD2410
	public bool get_applyGradient() { }

	// RVA: 0x1BD2418 Offset: 0x1BD2418 VA: 0x1BD2418
	public void set_applyGradient(bool value) { }

	// RVA: 0x1BD2448 Offset: 0x1BD2448 VA: 0x1BD2448
	public Color get_gradientTop() { }

	// RVA: 0x1BD245C Offset: 0x1BD245C VA: 0x1BD245C
	public void set_gradientTop(Color value) { }

	// RVA: 0x1BD2504 Offset: 0x1BD2504 VA: 0x1BD2504
	public Color get_gradientBottom() { }

	// RVA: 0x1BD2518 Offset: 0x1BD2518 VA: 0x1BD2518
	public void set_gradientBottom(Color value) { }

	// RVA: 0x1BC642C Offset: 0x1BC642C VA: 0x1BC642C
	public int get_spacingX() { }

	// RVA: 0x1BD25C0 Offset: 0x1BD25C0 VA: 0x1BD25C0
	public void set_spacingX(int value) { }

	// RVA: 0x1BD25E4 Offset: 0x1BD25E4 VA: 0x1BD25E4
	public int get_spacingY() { }

	// RVA: 0x1BD25EC Offset: 0x1BD25EC VA: 0x1BD25EC
	public void set_spacingY(int value) { }

	// RVA: 0x1BD2610 Offset: 0x1BD2610 VA: 0x1BD2610
	public bool get_useFloatSpacing() { }

	// RVA: 0x1BD2618 Offset: 0x1BD2618 VA: 0x1BD2618
	public void set_useFloatSpacing(bool value) { }

	// RVA: 0x1BD2644 Offset: 0x1BD2644 VA: 0x1BD2644
	public float get_floatSpacingX() { }

	// RVA: 0x1BD264C Offset: 0x1BD264C VA: 0x1BD264C
	public void set_floatSpacingX(float value) { }

	// RVA: 0x1BD26F4 Offset: 0x1BD26F4 VA: 0x1BD26F4
	public float get_floatSpacingY() { }

	// RVA: 0x1BD26FC Offset: 0x1BD26FC VA: 0x1BD26FC
	public void set_floatSpacingY(float value) { }

	// RVA: 0x1BD27A4 Offset: 0x1BD27A4 VA: 0x1BD27A4
	public float get_effectiveSpacingY() { }

	// RVA: 0x1BD27C0 Offset: 0x1BD27C0 VA: 0x1BD27C0
	public float get_effectiveSpacingX() { }

	// RVA: 0x1BD27DC Offset: 0x1BD27DC VA: 0x1BD27DC
	private bool get_keepCrisp() { }

	// RVA: 0x1BD2874 Offset: 0x1BD2874 VA: 0x1BD2874
	public bool get_supportEncoding() { }

	// RVA: 0x1BCCAA0 Offset: 0x1BCCAA0 VA: 0x1BCCAA0
	public void set_supportEncoding(bool value) { }

	// RVA: 0x1BD287C Offset: 0x1BD287C VA: 0x1BD287C
	public NGUIText.SymbolStyle get_symbolStyle() { }

	// RVA: 0x1BD2884 Offset: 0x1BD2884 VA: 0x1BD2884
	public void set_symbolStyle(NGUIText.SymbolStyle value) { }

	// RVA: 0x1BCDE30 Offset: 0x1BCDE30 VA: 0x1BCDE30
	public UILabel.Overflow get_overflowMethod() { }

	// RVA: 0x1BD28A4 Offset: 0x1BD28A4 VA: 0x1BD28A4
	public void set_overflowMethod(UILabel.Overflow value) { }

	// RVA: 0x1BD28C4 Offset: 0x1BD28C4 VA: 0x1BD28C4
	public int get_lineWidth() { }

	// RVA: 0x1BD28CC Offset: 0x1BD28CC VA: 0x1BD28CC
	public void set_lineWidth(int value) { }

	// RVA: 0x1BD28D4 Offset: 0x1BD28D4 VA: 0x1BD28D4
	public int get_lineHeight() { }

	// RVA: 0x1BD28DC Offset: 0x1BD28DC VA: 0x1BD28DC
	public void set_lineHeight(int value) { }

	// RVA: 0x1BCB2A8 Offset: 0x1BCB2A8 VA: 0x1BCB2A8
	public bool get_multiLine() { }

	// RVA: 0x1BD28E4 Offset: 0x1BD28E4 VA: 0x1BD28E4
	public void set_multiLine(bool value) { }

	// RVA: 0x1BD2914 Offset: 0x1BD2914 VA: 0x1BD2914 Slot: 10
	public override Vector3[] get_localCorners() { }

	// RVA: 0x1BD295C Offset: 0x1BD295C VA: 0x1BD295C Slot: 11
	public override Vector3[] get_worldCorners() { }

	// RVA: 0x1BD2998 Offset: 0x1BD2998 VA: 0x1BD2998 Slot: 23
	public override Vector4 get_drawingDimensions() { }

	// RVA: 0x1BCEC28 Offset: 0x1BCEC28 VA: 0x1BCEC28
	public int get_maxLineCount() { }

	// RVA: 0x1BD29D4 Offset: 0x1BD29D4 VA: 0x1BD29D4
	public void set_maxLineCount(int value) { }

	// RVA: 0x1BD2A94 Offset: 0x1BD2A94 VA: 0x1BD2A94
	public UILabel.Effect get_effectStyle() { }

	// RVA: 0x1BD2A9C Offset: 0x1BD2A9C VA: 0x1BD2A9C
	public void set_effectStyle(UILabel.Effect value) { }

	// RVA: 0x1BD2ABC Offset: 0x1BD2ABC VA: 0x1BD2ABC
	public Color get_effectColor() { }

	// RVA: 0x1BD2AD0 Offset: 0x1BD2AD0 VA: 0x1BD2AD0
	public void set_effectColor(Color value) { }

	// RVA: 0x1BD2B60 Offset: 0x1BD2B60 VA: 0x1BD2B60
	public Vector2 get_effectDistance() { }

	// RVA: 0x1BD2B6C Offset: 0x1BD2B6C VA: 0x1BD2B6C
	public void set_effectDistance(Vector2 value) { }

	// RVA: 0x1BD2C1C Offset: 0x1BD2C1C VA: 0x1BD2C1C
	public bool get_shrinkToFit() { }

	// RVA: 0x1BD2C2C Offset: 0x1BD2C2C VA: 0x1BD2C2C
	public void set_shrinkToFit(bool value) { }

	// RVA: 0x1BD2C4C Offset: 0x1BD2C4C VA: 0x1BD2C4C
	public string get_processedText() { }

	// RVA: 0x1BC63F0 Offset: 0x1BC63F0 VA: 0x1BC63F0
	public Vector2 get_printedSize() { }

	// RVA: 0x1BD2CBC Offset: 0x1BD2CBC VA: 0x1BD2CBC Slot: 22
	public override Vector2 get_localSize() { }

	// RVA: 0x1BD2CF8 Offset: 0x1BD2CF8 VA: 0x1BD2CF8
	private bool get_isValid() { }

	// RVA: 0x1BD2DB4 Offset: 0x1BD2DB4 VA: 0x1BD2DB4 Slot: 15
	protected override void OnInit() { }

	// RVA: 0x1BD2EE0 Offset: 0x1BD2EE0 VA: 0x1BD2EE0 Slot: 16
	protected override void OnDisable() { }

	// RVA: 0x1BD1D80 Offset: 0x1BD1D80 VA: 0x1BD1D80
	protected void SetActiveFont(Font fnt) { }

	// RVA: 0x1BD2F84 Offset: 0x1BD2F84 VA: 0x1BD2F84
	private static void OnFontChanged(Font font) { }

	// RVA: 0x1BD3368 Offset: 0x1BD3368 VA: 0x1BD3368 Slot: 13
	public override Vector3[] GetSides(Transform relativeTo) { }

	// RVA: 0x1BD33AC Offset: 0x1BD33AC VA: 0x1BD33AC Slot: 32
	protected override void UpgradeFrom265() { }

	// RVA: 0x1BD4034 Offset: 0x1BD4034 VA: 0x1BD4034 Slot: 17
	protected override void OnAnchor() { }

