	public const FileMode Open = 3;
	public const FileMode OpenOrCreate = 4;
	public const FileMode Truncate = 5;
	public const FileMode Append = 6;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5330 Offset: 0xBC5330 VA: 0xBC5330
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 277
{
	// Fields
	private string fileName; // 0x60
	private string fusionLog; // 0x68

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x263E7B0 Offset: 0x263E7B0 VA: 0x263E7B0
	public void .ctor() { }

	// RVA: 0x263E824 Offset: 0x263E824 VA: 0x263E824
	public void .ctor(string message) { }

	// RVA: 0x263C84C Offset: 0x263C84C VA: 0x263C84C
	public void .ctor(string message, string fileName) { }

	// RVA: 0x263E858 Offset: 0x263E858 VA: 0x263E858
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x263E938 Offset: 0x263E938 VA: 0x263E938 Slot: 6
	public override string get_Message() { }

	// RVA: 0x263EA78 Offset: 0x263EA78 VA: 0x263EA78 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x263EB40 Offset: 0x263EB40 VA: 0x263EB40 Slot: 3
	public override string ToString() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5344 Offset: 0xBC5344 VA: 0xBC5344
[FlagsAttribute] // RVA: 0xBC5344 Offset: 0xBC5344 VA: 0xBC5344
[Serializable]
public enum FileOptions // TypeDefIndex: 278
{
	// Fields
	public int value__; // 0x0
	public const FileOptions None = 0;
	public const FileOptions Encrypted = 16384;
	public const FileOptions DeleteOnClose = 67108864;
	public const FileOptions SequentialScan = 134217728;
	public const FileOptions RandomAccess = 268435456;
	public const FileOptions Asynchronous = 1073741824;
	public const FileOptions WriteThrough = -2147483648;
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0xBC5380 Offset: 0xBC5380 VA: 0xBC5380
[ComVisibleAttribute] // RVA: 0xBC5380 Offset: 0xBC5380 VA: 0xBC5380
[Serializable]
public enum FileShare // TypeDefIndex: 279
{
	// Fields
	public int value__; // 0x0
	public const FileShare None = 0;
	public const FileShare Read = 1;
	public const FileShare Write = 2;
	public const FileShare ReadWrite = 3;
	public const FileShare Delete = 4;
	public const FileShare Inheritable = 16;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC53BC Offset: 0xBC53BC VA: 0xBC53BC
public class FileStream : Stream // TypeDefIndex: 280
{
	// Fields
	private FileAccess access; // 0x10
	private bool owner; // 0x14
	private bool async; // 0x15
	private bool canseek; // 0x16
	private long append_startpos; // 0x18
	private bool anonymous; // 0x20
	private byte[] buf; // 0x28
	private int buf_size; // 0x30
	private int buf_length; // 0x34
	private int buf_offset; // 0x38
	private bool buf_dirty; // 0x3C
	private long buf_start; // 0x40
	private string name; // 0x48
	private IntPtr handle; // 0x50

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	[ObsoleteAttribute] // RVA: 0xBCC8DC Offset: 0xBCC8DC VA: 0xBCC8DC
	// RVA: 0x263ED60 Offset: 0x263ED60 VA: 0x263ED60
	public void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync) { }

	// RVA: 0x263ED70 Offset: 0x263ED70 VA: 0x263ED70
	internal void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool noBuffering) { }

	// RVA: 0x263F138 Offset: 0x263F138 VA: 0x263F138
	public void .ctor(string path, FileMode mode) { }

	// RVA: 0x263F9C0 Offset: 0x263F9C0 VA: 0x263F9C0
	public void .ctor(string path, FileMode mode, FileAccess access) { }

	// RVA: 0x263D374 Offset: 0x263D374 VA: 0x263D374
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0x263CAE0 Offset: 0x263CAE0 VA: 0x263CAE0
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize) { }

	// RVA: 0x263FA34 Offset: 0x263FA34 VA: 0x263FA34
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous) { }

	// RVA: 0x263F1A4 Offset: 0x263F1A4 VA: 0x263F1A4
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options) { }

	// RVA: 0x263FC24 Offset: 0x263FC24 VA: 0x263FC24 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x263FC38 Offset: 0x263FC38 VA: 0x263FC38 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x263FC4C Offset: 0x263FC4C VA: 0x263FC4C Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x263FC54 Offset: 0x263FC54 VA: 0x263FC54 Slot: 9
	public override long get_Length() { }

	// RVA: 0x263FE08 Offset: 0x263FE08 VA: 0x263FE08 Slot: 10
	public override long get_Position() { }

	// RVA: 0x263FF20 Offset: 0x263FF20 VA: 0x263FF20 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2640078 Offset: 0x2640078 VA: 0x2640078 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x26403C0 Offset: 0x26403C0 VA: 0x26403C0 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x26405A0 Offset: 0x26405A0 VA: 0x26405A0 Slot: 19
	public override int Read([In] [Out] byte[] array, int offset, int count) { }

	// RVA: 0x2640814 Offset: 0x2640814 VA: 0x2640814
	private int ReadInternal(byte[] dest, int offset, int count) { }

	// RVA: 0x2640924 Offset: 0x2640924 VA: 0x2640924 Slot: 25
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }

	// RVA: 0x2640E3C Offset: 0x2640E3C VA: 0x2640E3C Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x264111C Offset: 0x264111C VA: 0x264111C Slot: 23
	public override void Write(byte[] array, int offset, int count) { }

	// RVA: 0x264136C Offset: 0x264136C VA: 0x264136C
	private void WriteInternal(byte[] src, int offset, int count) { }

	// RVA: 0x2641570 Offset: 0x2641570 VA: 0x2641570 Slot: 26
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }

	// RVA: 0x2641DBC Offset: 0x2641DBC VA: 0x2641DBC Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x2642078 Offset: 0x2642078 VA: 0x2642078 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x26422F0 Offset: 0x26422F0 VA: 0x26422F0 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x264252C Offset: 0x264252C VA: 0x264252C Slot: 18
	public override void Flush() { }

	// RVA: 0x2642600 Offset: 0x2642600 VA: 0x2642600 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2642680 Offset: 0x2642680 VA: 0x2642680 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x26408BC Offset: 0x26408BC VA: 0x26408BC
	private int ReadSegment(byte[] dest, int dest_offset, int count) { }

	// RVA: 0x26414F4 Offset: 0x26414F4 VA: 0x26414F4
	private int WriteSegment(byte[] src, int src_offset, int count) { }

	// RVA: 0x2641B60 Offset: 0x2641B60 VA: 0x2641B60
	private void FlushBuffer(Stream st) { }

	// RVA: 0x2640598 Offset: 0x2640598 VA: 0x2640598
	private void FlushBuffer() { }

	// RVA: 0x263FDF0 Offset: 0x263FDF0 VA: 0x263FDF0
	private void FlushBufferIfDirty() { }

	// RVA: 0x2640380 Offset: 0x2640380 VA: 0x2640380
	private void RefillBuffer() { }

	// RVA: 0x2640240 Offset: 0x2640240 VA: 0x2640240
	private int ReadData(IntPtr handle, byte[] buf, int offset, int count) { }

	// RVA: 0x263F038 Offset: 0x263F038 VA: 0x263F038
	private void InitBuffer(int size, bool noBuffering) { }

	// RVA: 0x263FB84 Offset: 0x263FB84 VA: 0x263FB84
	private string GetSecureFileName(string filename) { }

	// RVA: 0x263FABC Offset: 0x263FABC VA: 0x263FABC
	private string GetSecureFileName(string filename, bool full) { }
}

// Namespace: 
private sealed class FileStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 281
{
	// Methods

	// RVA: 0x2640D78 Offset: 0x2640D78 VA: 0x2640D78
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x26428A0 Offset: 0x26428A0 VA: 0x26428A0 Slot: 11
	public virtual int Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x2640D88 Offset: 0x2640D88 VA: 0x2640D88 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x26410E0 Offset: 0x26410E0 VA: 0x26410E0 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FileStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 282
{
	// Methods

	// RVA: 0x2641CF8 Offset: 0x2641CF8 VA: 0x2641CF8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2642C94 Offset: 0x2642C94 VA: 0x2642C94 Slot: 11
	public virtual void Invoke(byte[] buffer, int offset, int count) { }

	// RVA: 0x2641D08 Offset: 0x2641D08 VA: 0x2641D08 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }

	// RVA: 0x264206C Offset: 0x264206C VA: 0x264206C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 283
{
	// Fields
	private object state; // 0x10
	private bool completed; // 0x18
	private ManualResetEvent wh; // 0x20
	private AsyncCallback cb; // 0x28
	private bool completedSynch; // 0x30
	public int Count; // 0x34
	public int OriginalCount; // 0x38
	public int BytesRead; // 0x3C
	private AsyncCallback realcb; // 0x40

	// Properties
	public object AsyncState { get; }
	public bool CompletedSynchronously { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x2641A9C Offset: 0x2641A9C VA: 0x2641A9C
	public void .ctor(AsyncCallback cb, object state) { }

	// RVA: 0x2643084 Offset: 0x2643084 VA: 0x2643084
	private static void CBWrapper(IAsyncResult ares) { }

	// RVA: 0x2643178 Offset: 0x2643178 VA: 0x2643178 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x2643180 Offset: 0x2643180 VA: 0x2643180 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x2643188 Offset: 0x2643188 VA: 0x2643188 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x2643190 Offset: 0x2643190 VA: 0x2643190 Slot: 7
	public bool get_IsCompleted() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC53D0 Offset: 0xBC53D0 VA: 0xBC53D0
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 284
{
	// Fields
	protected string FullPath; // 0x18
	protected string OriginalPath; // 0x20
	internal MonoIOStat stat; // 0x28
	internal bool valid; // 0x58

	// Properties
	public abstract bool Exists { get; }
	public abstract string Name { get; }
	public virtual string FullName { get; }
	public string Extension { get; }

	// Methods

	// RVA: 0x263B5CC Offset: 0x263B5CC VA: 0x263B5CC
	protected void .ctor() { }

	// RVA: 0x263BBE8 Offset: 0x263BBE8 VA: 0x263BBE8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0xBCC914 Offset: 0xBCC914 VA: 0xBCC914
	// RVA: 0x2643198 Offset: 0x2643198 VA: 0x2643198 Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_Exists();

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_Name();

	// RVA: 0x2643294 Offset: 0x2643294 VA: 0x2643294 Slot: 10
	public virtual string get_FullName() { }

	// RVA: 0x264329C Offset: 0x264329C VA: 0x264329C
	public string get_Extension() { }

	// RVA: 0x263BCC0 Offset: 0x263BCC0 VA: 0x263BCC0
	internal void Refresh(bool force) { }

	// RVA: 0x264346C Offset: 0x264346C VA: 0x264346C Slot: 11
	internal virtual void InternalRefresh() { }

	// RVA: 0x263B5F8 Offset: 0x263B5F8 VA: 0x263B5F8
	internal void CheckPath(string path) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC53E4 Offset: 0xBC53E4 VA: 0xBC53E4
[Serializable]
public class IOException : SystemException // TypeDefIndex: 285
{
	// Methods

	// RVA: 0x263E4CC Offset: 0x263E4CC VA: 0x263E4CC
	public void .ctor() { }

	// RVA: 0x2638BB4 Offset: 0x2638BB4 VA: 0x2638BB4
	public void .ctor(string message) { }

	// RVA: 0x2643470 Offset: 0x2643470 VA: 0x2643470
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x263C0B4 Offset: 0x263C0B4 VA: 0x263C0B4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2643478 Offset: 0x2643478 VA: 0x2643478
	public void .ctor(string message, int hresult) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC53F8 Offset: 0xBC53F8 VA: 0xBC53F8
[MonoTODOAttribute] // RVA: 0xBC53F8 Offset: 0xBC53F8 VA: 0xBC53F8
[Serializable]
public class MemoryStream : Stream // TypeDefIndex: 286
{
	// Fields
	private bool canWrite; // 0x10
	private bool allowGetBuffer; // 0x11
	private int capacity; // 0x14
	private int length; // 0x18
	private byte[] internalBuffer; // 0x20
	private int initialIndex; // 0x28
	private bool expandable; // 0x2C
	private bool streamClosed; // 0x2D
	private int position; // 0x30
	private int dirty_bytes; // 0x34

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public virtual int Capacity { get; set; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2641B58 Offset: 0x2641B58 VA: 0x2641B58
	public void .ctor() { }

	// RVA: 0x2643514 Offset: 0x2643514 VA: 0x2643514
	public void .ctor(int capacity) { }

	// RVA: 0x2643600 Offset: 0x2643600 VA: 0x2643600
	public void .ctor(byte[] buffer) { }

	// RVA: 0x2643830 Offset: 0x2643830 VA: 0x2643830
	public void .ctor(byte[] buffer, bool writable) { }

	// RVA: 0x264390C Offset: 0x264390C VA: 0x264390C
	public void .ctor(byte[] buffer, int index, int count) { }

	// RVA: 0x26436D8 Offset: 0x26436D8 VA: 0x26436D8
	private void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible) { }

	// RVA: 0x26439AC Offset: 0x26439AC VA: 0x26439AC
	private void CheckIfClosedThrowDisposed() { }

	// RVA: 0x2643A38 Offset: 0x2643A38 VA: 0x2643A38 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2643A48 Offset: 0x2643A48 VA: 0x2643A48 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2643A58 Offset: 0x2643A58 VA: 0x2643A58 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2643A78 Offset: 0x2643A78 VA: 0x2643A78 Slot: 29
	public virtual int get_Capacity() { }

	// RVA: 0x2643AA4 Offset: 0x2643AA4 VA: 0x2643AA4 Slot: 30
	public virtual void set_Capacity(int value) { }

	// RVA: 0x2643DB4 Offset: 0x2643DB4 VA: 0x2643DB4 Slot: 9
	public override long get_Length() { }

	// RVA: 0x2643DE4 Offset: 0x2643DE4 VA: 0x2643DE4 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2643E14 Offset: 0x2643E14 VA: 0x2643E14 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2643EF8 Offset: 0x2643EF8 VA: 0x2643EF8 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2643F04 Offset: 0x2643F04 VA: 0x2643F04 Slot: 18
	public override void Flush() { }

	// RVA: 0x2643F08 Offset: 0x2643F08 VA: 0x2643F08 Slot: 31
	public virtual byte[] GetBuffer() { }

	// RVA: 0x2643F8C Offset: 0x2643F8C VA: 0x2643F8C Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x2644100 Offset: 0x2644100 VA: 0x2644100 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x264417C Offset: 0x264417C VA: 0x264417C Slot: 21
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x264433C Offset: 0x264433C VA: 0x264433C
	private int CalculateNewCapacity(int minimum) { }

	// RVA: 0x264435C Offset: 0x264435C VA: 0x264435C
	private void Expand(int newSize) { }

	// RVA: 0x26443D8 Offset: 0x26443D8 VA: 0x26443D8 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2644554 Offset: 0x2644554 VA: 0x2644554 Slot: 32
	public virtual byte[] ToArray() { }

	// RVA: 0x26445E8 Offset: 0x26445E8 VA: 0x26445E8 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2644790 Offset: 0x2644790 VA: 0x2644790 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x2644898 Offset: 0x2644898 VA: 0x2644898 Slot: 33
	public virtual void WriteTo(Stream stream) { }
}

// Namespace: System.IO
internal enum MonoFileType // TypeDefIndex: 287
{
	// Fields
	public int value__; // 0x0
	public const MonoFileType Unknown = 0;
	public const MonoFileType Disk = 1;
	public const MonoFileType Char = 2;
	public const MonoFileType Pipe = 3;
	public const MonoFileType Remote = 32768;
}

// Namespace: System.IO
internal sealed class MonoIO // TypeDefIndex: 288
{
	// Fields
	public static readonly FileAttributes InvalidFileAttributes; // 0x0
	public static readonly IntPtr InvalidHandle; // 0x8

	// Properties
	public static IntPtr ConsoleOutput { get; }
	public static IntPtr ConsoleInput { get; }
	public static IntPtr ConsoleError { get; }
	public static char VolumeSeparatorChar { get; }
	public static char DirectorySeparatorChar { get; }
	public static char AltDirectorySeparatorChar { get; }
	public static char PathSeparator { get; }

	// Methods

	// RVA: 0x2644954 Offset: 0x2644954 VA: 0x2644954
	private static void .cctor() { }

	// RVA: 0x263A318 Offset: 0x263A318 VA: 0x263A318
	public static Exception GetException(MonoIOError error) { }

	// RVA: 0x2638F10 Offset: 0x2638F10 VA: 0x2638F10
	public static Exception GetException(string path, MonoIOError error) { }

	// RVA: 0x2638F0C Offset: 0x2638F0C VA: 0x2638F0C
	public static bool CreateDirectory(string path, out MonoIOError error) { }

	// RVA: 0x2639A40 Offset: 0x2639A40 VA: 0x2639A40
	public static bool RemoveDirectory(string path, out MonoIOError error) { }

	// RVA: 0x263B5C8 Offset: 0x263B5C8 VA: 0x263B5C8
	public static string[] GetFileSystemEntries(string path, string path_with_pattern, int attrs, int mask, out MonoIOError error) { }

	// RVA: 0x263A314 Offset: 0x263A314 VA: 0x263A314
	public static string GetCurrentDirectory(out MonoIOError error) { }

	// RVA: 0x263D2D8 Offset: 0x263D2D8 VA: 0x263D2D8
	public static bool MoveFile(string path, string dest, out MonoIOError error) { }

	// RVA: 0x263CA44 Offset: 0x263CA44 VA: 0x263CA44
	public static bool CopyFile(string path, string dest, bool overwrite, out MonoIOError error) { }

	// RVA: 0x2639A3C Offset: 0x2639A3C VA: 0x2639A3C
	public static bool DeleteFile(string path, out MonoIOError error) { }

	// RVA: 0x263CB04 Offset: 0x263CB04 VA: 0x263CB04
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error) { }

	// RVA: 0x263F034 Offset: 0x263F034 VA: 0x263F034
	public static MonoFileType GetFileType(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x263C7C0 Offset: 0x263C7C0 VA: 0x263C7C0
	public static bool Exists(string path, out MonoIOError error) { }

	// RVA: 0x263B52C Offset: 0x263B52C VA: 0x263B52C
	public static bool ExistsFile(string path, out MonoIOError error) { }

	// RVA: 0x263A1A0 Offset: 0x263A1A0 VA: 0x263A1A0
	public static bool ExistsDirectory(string path, out MonoIOError error) { }

	// RVA: 0x26399A4 Offset: 0x26399A4 VA: 0x26399A4
	public static bool ExistsSymlink(string path, out MonoIOError error) { }

	// RVA: 0x263CD78 Offset: 0x263CD78 VA: 0x263CD78
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error) { }

	// RVA: 0x263FC20 Offset: 0x263FC20 VA: 0x263FC20
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }

	// RVA: 0x2642898 Offset: 0x2642898 VA: 0x2642898
	public static bool Close(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x264289C Offset: 0x264289C VA: 0x264289C
	public static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error) { }

	// RVA: 0x26414F0 Offset: 0x26414F0 VA: 0x26414F0
	public static int Write(IntPtr handle, [In] byte[] src, int src_offset, int count, out MonoIOError error) { }

	// RVA: 0x263F134 Offset: 0x263F134 VA: 0x263F134
	public static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error) { }

	// RVA: 0x263FE04 Offset: 0x263FE04 VA: 0x263FE04
	public static long GetLength(IntPtr handle, out MonoIOError error) { }

	// RVA: 0x2642528 Offset: 0x2642528 VA: 0x2642528
	public static bool SetLength(IntPtr handle, long length, out MonoIOError error) { }

	// RVA: 0x26449C8 Offset: 0x26449C8 VA: 0x26449C8
	public static IntPtr get_ConsoleOutput() { }

	// RVA: 0x26449CC Offset: 0x26449CC VA: 0x26449CC
	public static IntPtr get_ConsoleInput() { }

	// RVA: 0x26449D0 Offset: 0x26449D0 VA: 0x26449D0
	public static IntPtr get_ConsoleError() { }

	// RVA: 0x26449D4 Offset: 0x26449D4 VA: 0x26449D4
	public static char get_VolumeSeparatorChar() { }

	// RVA: 0x26449D8 Offset: 0x26449D8 VA: 0x26449D8
	public static char get_DirectorySeparatorChar() { }

	// RVA: 0x26449DC Offset: 0x26449DC VA: 0x26449DC
	public static char get_AltDirectorySeparatorChar() { }

	// RVA: 0x26449E0 Offset: 0x26449E0 VA: 0x26449E0
	public static char get_PathSeparator() { }

	// RVA: 0x26449E4 Offset: 0x26449E4 VA: 0x26449E4
	public static bool RemapPath(string path, out string newPath) { }
}

// Namespace: System.IO
internal enum MonoIOError // TypeDefIndex: 289
{
	// Fields
	public int value__; // 0x0
	public const MonoIOError ERROR_SUCCESS = 0;
	public const MonoIOError ERROR_FILE_NOT_FOUND = 2;
	public const MonoIOError ERROR_PATH_NOT_FOUND = 3;
	public const MonoIOError ERROR_TOO_MANY_OPEN_FILES = 4;
	public const MonoIOError ERROR_ACCESS_DENIED = 5;
	public const MonoIOError ERROR_INVALID_HANDLE = 6;
	public const MonoIOError ERROR_INVALID_DRIVE = 15;
	public const MonoIOError ERROR_NOT_SAME_DEVICE = 17;
	public const MonoIOError ERROR_NO_MORE_FILES = 18;
	public const MonoIOError ERROR_WRITE_FAULT = 29;
	public const MonoIOError ERROR_READ_FAULT = 30;
	public const MonoIOError ERROR_GEN_FAILURE = 31;
	public const MonoIOError ERROR_SHARING_VIOLATION = 32;
	public const MonoIOError ERROR_LOCK_VIOLATION = 33;
	public const MonoIOError ERROR_HANDLE_DISK_FULL = 39;
	public const MonoIOError ERROR_FILE_EXISTS = 80;
	public const MonoIOError ERROR_CANNOT_MAKE = 82;
	public const MonoIOError ERROR_INVALID_PARAMETER = 87;
	public const MonoIOError ERROR_BROKEN_PIPE = 109;
	public const MonoIOError ERROR_INVALID_NAME = 123;
	public const MonoIOError ERROR_DIR_NOT_EMPTY = 145;
	public const MonoIOError ERROR_ALREADY_EXISTS = 183;
	public const MonoIOError ERROR_FILENAME_EXCED_RANGE = 206;
	public const MonoIOError ERROR_ENCRYPTION_FAILED = 6000;
}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 290
{
	// Fields
	public string Name; // 0x0
	public FileAttributes Attributes; // 0x8
	public long Length; // 0x10
	public long CreationTime; // 0x18
	public long LastAccessTime; // 0x20
	public long LastWriteTime; // 0x28
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5448 Offset: 0xBC5448 VA: 0xBC5448
public static class Path // TypeDefIndex: 291
{
	// Fields
	[ObsoleteAttribute] // RVA: 0xBCB544 Offset: 0xBCB544 VA: 0xBCB544
	public static readonly char[] InvalidPathChars; // 0x0
	public static readonly char AltDirectorySeparatorChar; // 0x8
	public static readonly char DirectorySeparatorChar; // 0xA
	public static readonly char PathSeparator; // 0xC
	internal static readonly string DirectorySeparatorStr; // 0x10
	public static readonly char VolumeSeparatorChar; // 0x18
	internal static readonly char[] PathSeparatorChars; // 0x20
	private static readonly bool dirEqualsVolume; // 0x28

	// Methods

	// RVA: 0x2644AA4 Offset: 0x2644AA4 VA: 0x2644AA4
	private static void .cctor() { }

	// RVA: 0x2644CD4 Offset: 0x2644CD4 VA: 0x2644CD4
	public static string ChangeExtension(string path, string extension) { }

	// RVA: 0x263B234 Offset: 0x263B234 VA: 0x263B234
	public static string Combine(string path1, string path2) { }

	// RVA: 0x2645248 Offset: 0x2645248 VA: 0x2645248
	internal static string CleanPath(string s) { }

	// RVA: 0x263AE9C Offset: 0x263AE9C VA: 0x263AE9C
	public static string GetDirectoryName(string path) { }

	// RVA: 0x2643318 Offset: 0x2643318 VA: 0x2643318
	public static string GetExtension(string path) { }

	// RVA: 0x263B77C Offset: 0x263B77C VA: 0x263B77C
	public static string GetFileName(string path) { }

	// RVA: 0x2645C90 Offset: 0x2645C90 VA: 0x2645C90
	public static string GetFileNameWithoutExtension(string path) { }

	// RVA: 0x263B718 Offset: 0x263B718 VA: 0x263B718
	public static string GetFullPath(string path) { }

	// RVA: 0x26464E8 Offset: 0x26464E8 VA: 0x26464E8
	internal static string WindowsDriveAdjustment(string path) { }

	// RVA: 0x2645CFC Offset: 0x2645CFC VA: 0x2645CFC
	internal static string InsecureGetFullPath(string path) { }

	// RVA: 0x2646914 Offset: 0x2646914 VA: 0x2646914
	private static bool IsDsc(char c) { }

	// RVA: 0x264576C Offset: 0x264576C VA: 0x264576C
	public static string GetPathRoot(string path) { }

	// RVA: 0x264505C Offset: 0x264505C VA: 0x264505C
	public static bool IsPathRooted(string path) { }

	// RVA: 0x264740C Offset: 0x264740C VA: 0x264740C
	public static char[] GetInvalidFileNameChars() { }

	// RVA: 0x2644C44 Offset: 0x2644C44 VA: 0x2644C44
	public static char[] GetInvalidPathChars() { }

	// RVA: 0x2644FB0 Offset: 0x2644FB0 VA: 0x2644FB0
	private static int findExtension(string path) { }

	// RVA: 0x26474C8 Offset: 0x26474C8 VA: 0x26474C8
	private static string GetServerAndShare(string path) { }

	// RVA: 0x2647694 Offset: 0x2647694 VA: 0x2647694
	private static bool SameRoot(string root, string path) { }

	// RVA: 0x26469B8 Offset: 0x26469B8 VA: 0x26469B8
	private static string CanonicalizePath(string path) { }

	// RVA: 0x2647A88 Offset: 0x2647A88 VA: 0x2647A88
	internal static bool IsPathSubsetOf(string subset, string path) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC545C Offset: 0xBC545C VA: 0xBC545C
[Serializable]
public class PathTooLongException : IOException // TypeDefIndex: 292
{
	// Methods

	// RVA: 0x2647CE4 Offset: 0x2647CE4 VA: 0x2647CE4
	public void .ctor() { }

	// RVA: 0x26449C0 Offset: 0x26449C0 VA: 0x26449C0
	public void .ctor(string message) { }

	// RVA: 0x2647D44 Offset: 0x2647D44 VA: 0x2647D44
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5470 Offset: 0xBC5470 VA: 0xBC5470
[Serializable]
public enum SearchOption // TypeDefIndex: 293
{
	// Fields
	public int value__; // 0x0
	public const SearchOption TopDirectoryOnly = 0;
	public const SearchOption AllDirectories = 1;
}

// Namespace: System.IO
internal class SearchPattern // TypeDefIndex: 294
{
	// Fields
	internal static readonly char[] WildcardChars; // 0x0
	internal static readonly char[] InvalidChars; // 0x8

	// Methods

	// RVA: 0x2647D4C Offset: 0x2647D4C VA: 0x2647D4C
	private static void .cctor() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5484 Offset: 0xBC5484 VA: 0xBC5484
[Serializable]
public enum SeekOrigin // TypeDefIndex: 295
{
	// Fields
	public int value__; // 0x0
	public const SeekOrigin Begin = 0;
	public const SeekOrigin Current = 1;
	public const SeekOrigin End = 2;
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5498 Offset: 0xBC5498 VA: 0xBC5498
[Serializable]
public abstract class Stream : IDisposable // TypeDefIndex: 296
{
	// Fields
	public static readonly Stream Null; // 0x0

	// Properties
	public abstract bool CanRead { get; }
	public abstract bool CanSeek { get; }
	public abstract bool CanWrite { get; }
	[ComVisibleAttribute] // RVA: 0xBCF140 Offset: 0xBCF140 VA: 0xBCF140
	public virtual bool CanTimeout { get; }
	public abstract long Length { get; }
	public abstract long Position { get; set; }
	[ComVisibleAttribute] // RVA: 0xBCF154 Offset: 0xBCF154 VA: 0xBCF154
	public virtual int ReadTimeout { get; set; }
	[ComVisibleAttribute] // RVA: 0xBCF168 Offset: 0xBCF168 VA: 0xBCF168
	public virtual int WriteTimeout { get; set; }

	// Methods

	// RVA: 0x263F02C Offset: 0x263F02C VA: 0x263F02C
	protected void .ctor() { }

	// RVA: 0x2647EA8 Offset: 0x2647EA8 VA: 0x2647EA8
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_CanRead();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_CanSeek();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_CanWrite();

	// RVA: 0x2647F10 Offset: 0x2647F10 VA: 0x2647F10 Slot: 8
	public virtual bool get_CanTimeout() { }

	// RVA: -1 Offset: -1 Slot: 9
	public abstract long get_Length();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_Position();

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void set_Position(long value);

	// RVA: 0x2647F18 Offset: 0x2647F18 VA: 0x2647F18 Slot: 4
	public void Dispose() { }

	// RVA: 0x2647F24 Offset: 0x2647F24 VA: 0x2647F24 Slot: 12
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2647F28 Offset: 0x2647F28 VA: 0x2647F28 Slot: 13
	public virtual void Close() { }

	// RVA: 0x2647F38 Offset: 0x2647F38 VA: 0x2647F38 Slot: 14
	public virtual int get_ReadTimeout() { }

	// RVA: 0x2647FAC Offset: 0x2647FAC VA: 0x2647FAC Slot: 15
	public virtual void set_ReadTimeout(int value) { }

	// RVA: 0x2648020 Offset: 0x2648020 VA: 0x2648020 Slot: 16
	public virtual int get_WriteTimeout() { }

	// RVA: 0x2648094 Offset: 0x2648094 VA: 0x2648094 Slot: 17
	public virtual void set_WriteTimeout(int value) { }

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void Flush();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract int Read([In] [Out] byte[] buffer, int offset, int count);

	// RVA: 0x2648108 Offset: 0x2648108 VA: 0x2648108 Slot: 20
	public virtual int ReadByte() { }

	// RVA: -1 Offset: -1 Slot: 21
	public abstract long Seek(long offset, SeekOrigin origin);

	// RVA: -1 Offset: -1 Slot: 22
	public abstract void SetLength(long value);

	// RVA: -1 Offset: -1 Slot: 23
	public abstract void Write(byte[] buffer, int offset, int count);

	// RVA: 0x26481B8 Offset: 0x26481B8 VA: 0x26481B8 Slot: 24
	public virtual void WriteByte(byte value) { }

	// RVA: 0x2640BA0 Offset: 0x2640BA0 VA: 0x2640BA0 Slot: 25
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x26418C8 Offset: 0x26418C8 VA: 0x26418C8 Slot: 26
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x2640F88 Offset: 0x2640F88 VA: 0x2640F88 Slot: 27
	public virtual int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x2641F0C Offset: 0x2641F0C VA: 0x2641F0C Slot: 28
	public virtual void EndWrite(IAsyncResult asyncResult) { }
}

// Namespace: System.IO
internal class NullStream : Stream // TypeDefIndex: 297
{
	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x26449E8 Offset: 0x26449E8 VA: 0x26449E8
	public void .ctor() { }

	// RVA: 0x2644A50 Offset: 0x2644A50 VA: 0x2644A50 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2644A58 Offset: 0x2644A58 VA: 0x2644A58 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2644A60 Offset: 0x2644A60 VA: 0x2644A60 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2644A68 Offset: 0x2644A68 VA: 0x2644A68 Slot: 9
	public override long get_Length() { }

	// RVA: 0x2644A70 Offset: 0x2644A70 VA: 0x2644A70 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2644A78 Offset: 0x2644A78 VA: 0x2644A78 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2644A7C Offset: 0x2644A7C VA: 0x2644A7C Slot: 18
	public override void Flush() { }

	// RVA: 0x2644A80 Offset: 0x2644A80 VA: 0x2644A80 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2644A88 Offset: 0x2644A88 VA: 0x2644A88 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x2644A90 Offset: 0x2644A90 VA: 0x2644A90 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2644A98 Offset: 0x2644A98 VA: 0x2644A98 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2644A9C Offset: 0x2644A9C VA: 0x2644A9C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2644AA0 Offset: 0x2644AA0 VA: 0x2644AA0 Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: System.IO
internal class StreamAsyncResult : IAsyncResult // TypeDefIndex: 298
{
	// Fields
	private object state; // 0x10
	private bool completed; // 0x18
	private bool done; // 0x19
	private Exception exc; // 0x20
	private int nbytes; // 0x28
	private ManualResetEvent wh; // 0x30

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public virtual bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }
	public Exception Exception { get; }
	public int NBytes { get; }
	public bool Done { get; set; }

	// Methods

	// RVA: 0x264825C Offset: 0x264825C VA: 0x264825C
	public void .ctor(object state) { }

	// RVA: 0x2648298 Offset: 0x2648298 VA: 0x2648298
	public void SetComplete(Exception e) { }

	// RVA: 0x2648290 Offset: 0x2648290 VA: 0x2648290
	public void SetComplete(Exception e, int nbytes) { }

	// RVA: 0x2648350 Offset: 0x2648350 VA: 0x2648350 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x2648358 Offset: 0x2648358 VA: 0x2648358 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x2648438 Offset: 0x2648438 VA: 0x2648438 Slot: 8
	public virtual bool get_CompletedSynchronously() { }

	// RVA: 0x2648440 Offset: 0x2648440 VA: 0x2648440 Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0x2648348 Offset: 0x2648348 VA: 0x2648348
	public Exception get_Exception() { }

	// RVA: 0x264832C Offset: 0x264832C VA: 0x264832C
	public int get_NBytes() { }

