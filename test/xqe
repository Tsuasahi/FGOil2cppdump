	public override void SetCutout(float time, bool isSkip) { }

	// RVA: 0x1D78D40 Offset: 0x1D78D40 VA: 0x1D78D40 Slot: 20
	public override void StopCut() { }

	// RVA: 0x1D78D90 Offset: 0x1D78D90 VA: 0x1D78D90 Slot: 21
	public override void SetSpecialEffect(string n, Vector3 pos, float time, Color color, float range, bool isSkip, bool isPause) { }

	// RVA: 0x1D791D8 Offset: 0x1D791D8 VA: 0x1D791D8 Slot: 22
	public override void SetMaskInteraction(SpriteMaskInteraction maskInteraction) { }

	// RVA: 0x1D79264 Offset: 0x1D79264 VA: 0x1D79264 Slot: 23
	public override void SetSortingOrder(int order) { }
}

// Namespace: 
private enum UIScriptImage.FULLSCREEN_SCALE_TYPE // TypeDefIndex: 8518
{
	// Fields
	public int value__; // 0x0
	public const UIScriptImage.FULLSCREEN_SCALE_TYPE WIDTH_1345 = 1;
}

// Namespace: 
public class UIScriptVerticalImage : UIScriptChara // TypeDefIndex: 8519
{
	// Fields
	[SerializeField] // RVA: 0xCCC05C Offset: 0xCCC05C VA: 0xCCC05C
	protected UIVerticalImageM[] imageList; // 0xE8
	[CompilerGeneratedAttribute] // RVA: 0xCCC06C Offset: 0xCCC06C VA: 0xCCC06C
	private static Dictionary<string, int> <>f__switch$map19; // 0x0

	// Methods

	// RVA: 0x1D792F0 Offset: 0x1D792F0 VA: 0x1D792F0
	public void .ctor() { }

	// RVA: 0x1D79378 Offset: 0x1D79378 VA: 0x1D79378 Slot: 4
	public override void ChangeCharacter(UIScriptChara.ChangeKind kind, float speed, string imageName, Face.Type faceType, Action callback) { }

	// RVA: 0x1D79574 Offset: 0x1D79574 VA: 0x1D79574
	protected void UpdateChange() { }

	// RVA: 0x1D79A24 Offset: 0x1D79A24 VA: 0x1D79A24
	protected void ContinueChangeFade() { }

	// RVA: 0x1D7994C Offset: 0x1D7994C VA: 0x1D7994C
	protected void SetOverlap(float a) { }

	// RVA: 0x1D79834 Offset: 0x1D79834 VA: 0x1D79834
	protected void EndChange() { }

	// RVA: 0x1D79A88 Offset: 0x1D79A88 VA: 0x1D79A88 Slot: 5
	public override void SetCharacter(string imageName, Face.Type faceType, Action callback) { }

	// RVA: 0x1D79BB0 Offset: 0x1D79BB0 VA: 0x1D79BB0 Slot: 6
	protected override void EndSet() { }

	// RVA: 0x1D79EDC Offset: 0x1D79EDC VA: 0x1D79EDC Slot: 8
	public override void SetFilter(string filterName, Color filterColor) { }

	// RVA: 0x1D79F88 Offset: 0x1D79F88 VA: 0x1D79F88 Slot: 9
	public override void SetShadow(bool isShadow, bool isSkip) { }

	// RVA: 0x1D7A0A0 Offset: 0x1D7A0A0 VA: 0x1D7A0A0 Slot: 11
	public override void SetAlpha(float a) { }

	// RVA: 0x1D7A138 Offset: 0x1D7A138 VA: 0x1D7A138 Slot: 12
	public override void SetDepth(int d) { }

	// RVA: 0x1D7A220 Offset: 0x1D7A220 VA: 0x1D7A220 Slot: 13
	public override bool IsBusyMoveAlpha() { }

	// RVA: 0x1D7A284 Offset: 0x1D7A284 VA: 0x1D7A284 Slot: 14
	public override void MoveAlpha(float duration, float a) { }

	// RVA: 0x1D7A32C Offset: 0x1D7A32C VA: 0x1D7A32C Slot: 15
	public override void MoveAlphaSpeed(float speed, float a) { }

	// RVA: 0x1D7A3D4 Offset: 0x1D7A3D4 VA: 0x1D7A3D4 Slot: 21
	public override void SetSpecialEffect(string n, Vector3 pos, float time, Color color, float range, bool isSkip, bool isPause) { }

	// RVA: 0x1D7A81C Offset: 0x1D7A81C VA: 0x1D7A81C Slot: 22
	public override void SetMaskInteraction(SpriteMaskInteraction maskInteraction) { }

	// RVA: 0x1D7A8A8 Offset: 0x1D7A8A8 VA: 0x1D7A8A8 Slot: 23
	public override void SetSortingOrder(int order) { }
}

// Namespace: 
public static class DebugExecutionSettings // TypeDefIndex: 8520
{}

// Namespace: 
public class FpsDisplay : MonoBehaviour // TypeDefIndex: 8521
{
	// Fields
	public UILabel FpsLabel; // 0x18
	public float SlowCautionFps; // 0x20
	public float HeavyCautionFps; // 0x24
	public Color DefaultColor; // 0x28
	public Color SlowCautionColor; // 0x38
	public Color HeavyCautionColor; // 0x48
	public float FpsValue; // 0x58
	public float AverageFps; // 0x5C
	public float MaxFrameTimeOfLastSecond; // 0x60

	// Methods

	// RVA: 0x1CB87E8 Offset: 0x1CB87E8 VA: 0x1CB87E8
	public void .ctor() { }
}

// Namespace: 
public class MemoryInfo // TypeDefIndex: 8522
{
	// Fields
	private static List<MemoryInfo.stackMemoryInfo> stackMemoryInfoList; // 0x0
	private static AndroidJavaObject activityManager; // 0x8
	private static int[] pids; // 0x10

	// Methods

	// RVA: 0x16D4CB4 Offset: 0x16D4CB4 VA: 0x16D4CB4
	public void .ctor() { }

	// RVA: 0x16D4CBC Offset: 0x16D4CBC VA: 0x16D4CBC
	private static void setupNativeCall() { }

	// RVA: 0x16D51D8 Offset: 0x16D51D8 VA: 0x16D51D8
	private static long getUsedMemorySize() { }

	// RVA: 0x16D5410 Offset: 0x16D5410 VA: 0x16D5410
	private static float getUsedMemorySizeMB() { }

	[ConditionalAttribute] // RVA: 0xD38E94 Offset: 0xD38E94 VA: 0xD38E94
	// RVA: 0x16D5480 Offset: 0x16D5480 VA: 0x16D5480
	public static void RegistCurrentMemory(string name) { }

	// RVA: 0x16D55E0 Offset: 0x16D55E0 VA: 0x16D55E0
	private static void .cctor() { }
}

// Namespace: 
private class MemoryInfo.stackMemoryInfo // TypeDefIndex: 8523
{
	// Fields
	private string key; // 0x10
	private float usedMemory; // 0x18

	// Methods

	// RVA: 0x16D5544 Offset: 0x16D5544 VA: 0x16D5544
	public void .ctor(string k, float v) { }

	// RVA: 0x16D5668 Offset: 0x16D5668 VA: 0x16D5668 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public class ScreenShot : MonoBehaviour // TypeDefIndex: 8524
{
	// Fields
	public string folder; // 0x18
	public int frameRate; // 0x20
	public float waitTime; // 0x24
	private string realFolder; // 0x28
	private int frameNumber; // 0x30

	// Methods

	// RVA: 0x1ABA264 Offset: 0x1ABA264 VA: 0x1ABA264
	public void .ctor() { }

	// RVA: 0x1ABA2FC Offset: 0x1ABA2FC VA: 0x1ABA2FC
	private void Start() { }

	// RVA: 0x1ABA330 Offset: 0x1ABA330 VA: 0x1ABA330
	private void Update() { }
}

// Namespace: ScreenSizeTool
public class Screen // TypeDefIndex: 8525
{
	// Fields
	private static Rect _safeArea; // 0x0
	private static bool isSimulateSafeArea; // 0x10

	// Properties
	public static Rect safeArea { get; }

	// Methods

	// RVA: 0x1ABA404 Offset: 0x1ABA404 VA: 0x1ABA404
	public void .ctor() { }

	// RVA: 0x1ABA40C Offset: 0x1ABA40C VA: 0x1ABA40C
	public static void SetSafeArea(Rect rect) { }

	// RVA: 0x1ABA490 Offset: 0x1ABA490 VA: 0x1ABA490
	public static void DisableSimulateSafeArea() { }

	// RVA: 0x1ABA4E0 Offset: 0x1ABA4E0 VA: 0x1ABA4E0
	public static Rect get_safeArea() { }
}

// Namespace: ScreenSizeTool
[ExecuteInEditMode] // RVA: 0xC968FC Offset: 0xC968FC VA: 0xC968FC
[AddComponentMenu] // RVA: 0xC968FC Offset: 0xC968FC VA: 0xC968FC
public class ScreenSizeToolGui : MonoBehaviour // TypeDefIndex: 8526
{
	// Fields
	private Texture2D safeAreaTex; // 0x18
	private Rect safeArea; // 0x20

	// Methods

	// RVA: 0x1ABA54C Offset: 0x1ABA54C VA: 0x1ABA54C
	public void .ctor() { }

	// RVA: 0x1ABA554 Offset: 0x1ABA554 VA: 0x1ABA554
	public void SetSafeArea(Rect rect) { }

	// RVA: 0x1ABA560 Offset: 0x1ABA560 VA: 0x1ABA560
	private void Awake() { }

	// RVA: 0x1ABA638 Offset: 0x1ABA638 VA: 0x1ABA638
	private void OnGUI() { }
}

// Namespace: 
public class AndroidBackKeyManager : SingletonMonoBehaviour<AndroidBackKeyManager> // TypeDefIndex: 8527
{
	// Fields
	private List<GameObject> btnObjList; // 0x18
	private BattlePerformanceMaster _battlePerfMaster; // 0x20
	private Camera _battleCamera; // 0x28
	public static bool ToastEnabled; // 0x0
	private static AndroidJavaObject beforeToast; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCCC07C Offset: 0xCCC07C VA: 0xCCC07C
	private static CommonConfirmDialog.ClickDelegate <>f__am$cache0; // 0x10

	// Properties
	private BattlePerformanceMaster BattlePerfMaster { get; }
	private Camera battleCamera { get; set; }

	// Methods

	// RVA: 0x15A7D88 Offset: 0x15A7D88 VA: 0x15A7D88
	public void .ctor() { }

	// RVA: 0x159ADF8 Offset: 0x159ADF8 VA: 0x159ADF8
	public static void AddBackBtn(GameObject obj) { }

	// RVA: 0x15A7E08 Offset: 0x15A7E08 VA: 0x15A7E08
	public static void AddBackBtn(Transform rootTrans, string btnPath) { }

	// RVA: 0x15A7F44 Offset: 0x15A7F44 VA: 0x15A7F44
	public static void RemoveBackBtn(GameObject obj) { }

	// RVA: 0x15A8088 Offset: 0x15A8088 VA: 0x15A8088
	public static void RemoveBackBtn(Transform rootTrans, string btnPath) { }

	// RVA: 0x15A81C4 Offset: 0x15A81C4 VA: 0x15A81C4
	public static void AddBackKeyTarget(GameObject obj) { }

	// RVA: 0x15A8288 Offset: 0x15A8288 VA: 0x15A8288
	public static void AddBackKeyTarget(Transform rootTrans, string btnPath) { }

	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xD38ECC Offset: 0xD38ECC VA: 0xD38ECC
	// RVA: 0x15A8380 Offset: 0x15A8380 VA: 0x15A8380
	private static void InstantiateSelf() { }

	// RVA: 0x15A8568 Offset: 0x15A8568 VA: 0x15A8568
	private BattlePerformanceMaster get_BattlePerfMaster() { }

	// RVA: 0x15A86D8 Offset: 0x15A86D8 VA: 0x15A86D8
	private void Update() { }

	// RVA: 0x15A8714 Offset: 0x15A8714 VA: 0x15A8714
	private void OnTouchBackKey() { }

	// RVA: 0x15A886C Offset: 0x15A886C VA: 0x15A886C
	private bool ExecuteBackFunc() { }

	// RVA: 0x15A9384 Offset: 0x15A9384 VA: 0x15A9384
	private void OpenQuitConfirmDialog() { }

	// RVA: 0x15A8D44 Offset: 0x15A8D44 VA: 0x15A8D44
	private bool IsBtnTouchable(GameObject btnObj) { }

	// RVA: 0x15A9120 Offset: 0x15A9120 VA: 0x15A9120
	private bool IsBtnTerminalTop(GameObject btnObj) { }

	// RVA: 0x15A8FD4 Offset: 0x15A8FD4 VA: 0x15A8FD4
	private bool IsTitleTopMainPanel(GameObject btnObj) { }

	// RVA: 0x15A9B6C Offset: 0x15A9B6C VA: 0x15A9B6C
	private void set_battleCamera(Camera value) { }

	// RVA: 0x15A9794 Offset: 0x15A9794 VA: 0x15A9794
	private Camera get_battleCamera() { }

	// RVA: 0x15A96B8 Offset: 0x15A96B8 VA: 0x15A96B8
	private bool IsInBattleScene(GameObject btnObj) { }

	// RVA: 0x15A9590 Offset: 0x15A9590 VA: 0x15A9590
	private bool IsTacticalPhaseWait(GameObject btnObj) { }

	// RVA: 0x15A8B34 Offset: 0x15A8B34 VA: 0x15A8B34
	public static void ShowToast(string text) { }

	// RVA: 0x15A9B7C Offset: 0x15A9B7C VA: 0x15A9B7C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38EDC Offset: 0xD38EDC VA: 0xD38EDC
	// RVA: 0x15A9B80 Offset: 0x15A9B80 VA: 0x15A9B80
	private static void <OpenQuitConfirmDialog>m__0(bool isDecide) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF4C0 Offset: 0xCAF4C0 VA: 0xCAF4C0
private sealed class AndroidBackKeyManager.<AddBackBtn>c__AnonStorey0 // TypeDefIndex: 8528
{
	// Fields
	internal GameObject obj; // 0x10

	// Methods

	// RVA: 0x15A7E00 Offset: 0x15A7E00 VA: 0x15A7E00
	public void .ctor() { }

	// RVA: 0x15A9C5C Offset: 0x15A9C5C VA: 0x15A9C5C
	internal bool <>m__0(GameObject a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF4D0 Offset: 0xCAF4D0 VA: 0xCAF4D0
private sealed class AndroidBackKeyManager.<RemoveBackBtn>c__AnonStorey1 // TypeDefIndex: 8529
{
	// Fields
	internal GameObject obj; // 0x10

	// Methods

	// RVA: 0x15A8080 Offset: 0x15A8080 VA: 0x15A8080
	public void .ctor() { }

	// RVA: 0x15A9CEC Offset: 0x15A9CEC VA: 0x15A9CEC
	internal bool <>m__0(GameObject a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF4E0 Offset: 0xCAF4E0 VA: 0xCAF4E0
private sealed class AndroidBackKeyManager.<ShowToast>c__AnonStorey3 // TypeDefIndex: 8530
{
	// Fields
	internal AndroidJavaObject context; // 0x10
	internal string text; // 0x18

	// Methods

	// RVA: 0x15A9B74 Offset: 0x15A9B74 VA: 0x15A9B74
	public void .ctor() { }

	// RVA: 0x15A9D68 Offset: 0x15A9D68 VA: 0x15A9D68
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF4F0 Offset: 0xCAF4F0 VA: 0xCAF4F0
private sealed class AndroidBackKeyManager.<OpenQuitConfirmDialog>c__AnonStorey2 // TypeDefIndex: 8531
{
	// Fields
	internal bool isDecide; // 0x10

	// Methods

	// RVA: 0x15A9C54 Offset: 0x15A9C54 VA: 0x15A9C54
	public void .ctor() { }

	// RVA: 0x15A9CD8 Offset: 0x15A9CD8 VA: 0x15A9CD8
	internal void <>m__0() { }
}

// Namespace: 
public class AndroidBackKeyTarget : MonoBehaviour // TypeDefIndex: 8532
{
	// Fields
	public GameObject targetObject; // 0x18

	// Methods

	// RVA: 0x15AA0A0 Offset: 0x15AA0A0 VA: 0x15AA0A0
	public void .ctor() { }

	// RVA: 0x15AA0A8 Offset: 0x15AA0A8 VA: 0x15AA0A8
	private void OnEnable() { }
}

// Namespace: 
public class BattlePerformance : BaseMonoBehaviour // TypeDefIndex: 8533
{
	// Fields
	private static readonly float POP_LABEL_INTERVAL; // 0x0
	private static readonly float SHOW_ACTIVATESIDEEFFECT_INTERVAL; // 0x4
	public static readonly float AFTER_BACK_STEP_INTERVAL; // 0x8
	public PlayMakerFSM fsm; // 0x18
	public BattleData data; // 0x20
	public BattleLogic logic; // 0x28
	public BattlePerformance perf; // 0x30
	private GameObject cameraObject; // 0x38
	public PlayMakerFSM camerafsm; // 0x40
	public GameObject commonMotionPrefab; // 0x48
	public BattleEffectControl effectcontrol; // 0x50
	public BattleHitStopControl hitstopcontrol; // 0x58
	public UIPanel[] panelList; // 0x60
	public BattleCameraHitJudgment hitJudgment; // 0x68
	public Camera actorcamera; // 0x70
	public Transform itemintoTr; // 0x78
	public Camera middleCamera; // 0x80
	public Camera uicamera; // 0x88
	public Camera uibackeffectCamera; // 0x90
	public Transform uirootTr; // 0x98
	public Transform fadeoverTr; // 0xA0
	public Transform popupTr; // 0xA8
	[SerializeField] // RVA: 0xCCC08C Offset: 0xCCC08C VA: 0xCCC08C
	private Transform turnEffectRoot; // 0xB0
	[SerializeField] // RVA: 0xCCC09C Offset: 0xCCC09C VA: 0xCCC09C
	private GameObject tutorialDialogMask; // 0xB8
	public BattlePerformanceBg bgPerf; // 0xC0
	public GameObject attackButton; // 0xC8
	public BattlePerformanceCommandCard commandPerf; // 0xD0
	public bool afterSkillRedrawCommandCard; // 0xD8
	public BattlePerformanceStatus statusPerf; // 0xE0
	public BattleInformationComponent infoComp; // 0xE8
	public GameObject masterRoot; // 0xF0
	public BattleUserGradeComponent gradeComponent; // 0xF8
	public BattlePerformanceContinue contPerf; // 0x100
	public GameObject actorprefab; // 0x108
	public Transform root_field; // 0x110
	public Transform root_drop; // 0x118
	public Transform gimmickRoot; // 0x120
	private int currentGroundNo; // 0x128
	private int currentGroundType; // 0x12C
	private GameObject[] p_actorlist; // 0x130
	private GameObject[] e_actorlist; // 0x138
	private GameObject[] aiNpcArray; // 0x140
	public float distanceofactor; // 0x148
	public BattleFieldMotionComponent[] fieldmotion; // 0x150
	public BattleActionCamera actioncamera; // 0x158
	private GameObject fieldMotionCommon; // 0x160
	public GameObject fadeBlackObject; // 0x168
	public GameObject fadeObject; // 0x170
	public Transform cutinTargetTr; // 0x178
	public Transform cutinRootTr; // 0x180
	public Camera cutIncamera; // 0x188
	private BattlePanelEvent lastCutInPanelEvt; // 0x190
	public bool isNoblePhantasmWhiteInFlg; // 0x198
	private CommonEffectComponent skillCutInObj; // 0x1A0
	private List<string> skillCutInVoiceLoadingList; // 0x1A8
	private List<UIStandFigureM> skillCutInStandFigureList; // 0x1B0
	public BattleFieldEffectComponent fieldEffect; // 0x1B8
	private GameObject roleobject; // 0x1C0
	private Queue<BattleActionData> queue_action; // 0x1C8
	public BattleResultComponent resultwindow; // 0x1D0
	private bool isReadyResultWindow; // 0x1D8
	private GameObject battleResultWindowTarget; // 0x1E0
	private string battleResultWindowEndEvent; // 0x1E8
	private string battleResultWindowResultJson; // 0x1F0
	public static bool CameraFlip; // 0xC
	protected string PlaySeName; // 0x1F8
	protected Action BgLoadCallback; // 0x200
	private bool isTargetChange; // 0x208
	private const int HIGH_PRIORITY_ADD_DEPTH = 1000;
	[CompilerGeneratedAttribute] // RVA: 0xCCC0AC Offset: 0xCCC0AC VA: 0xCCC0AC
	[DebuggerBrowsableAttribute] // RVA: 0xCCC0AC Offset: 0xCCC0AC VA: 0xCCC0AC
	private int <WaitDispEffectCount>k__BackingField; // 0x20C
	[SerializeField] // RVA: 0xCCC0E8 Offset: 0xCCC0E8 VA: 0xCCC0E8
	private bool isCriticalPerformance; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xCCC0F8 Offset: 0xCCC0F8 VA: 0xCCC0F8
	[DebuggerBrowsableAttribute] // RVA: 0xCCC0F8 Offset: 0xCCC0F8 VA: 0xCCC0F8
	private AssetData <resultAssetData>k__BackingField; // 0x218
	[CompilerGeneratedAttribute] // RVA: 0xCCC134 Offset: 0xCCC134 VA: 0xCCC134
	[DebuggerBrowsableAttribute] // RVA: 0xCCC134 Offset: 0xCCC134 VA: 0xCCC134
	private AssetData <gimmickAssetData>k__BackingField; // 0x220
	[CompilerGeneratedAttribute] // RVA: 0xCCC170 Offset: 0xCCC170 VA: 0xCCC170
	[DebuggerBrowsableAttribute] // RVA: 0xCCC170 Offset: 0xCCC170 VA: 0xCCC170
	private GameObject <gimmickObj>k__BackingField; // 0x228
	public bool isBusyStartBattle; // 0x230
	public string startBattlePath; // 0x238
	public AssetData startBattleAsset; // 0x240
	private BattleParamComponent questStartEffectObj; // 0x248
	[CompilerGeneratedAttribute] // RVA: 0xCCC1AC Offset: 0xCCC1AC VA: 0xCCC1AC
	[DebuggerBrowsableAttribute] // RVA: 0xCCC1AC Offset: 0xCCC1AC VA: 0xCCC1AC
	private FieldMotionManager <fmManager>k__BackingField; // 0x250
	private string enemyMasterCutInVoiceStr; // 0x258
	private bool isTacticalBackward; // 0x260
	private int multiHitWaitingCount; // 0x264
	[CompilerGeneratedAttribute] // RVA: 0xCCC1E8 Offset: 0xCCC1E8 VA: 0xCCC1E8
	[DebuggerBrowsableAttribute] // RVA: 0xCCC1E8 Offset: 0xCCC1E8 VA: 0xCCC1E8
	private bool <IsCalledByEnemyNameUI>k__BackingField; // 0x268
	private bool isResumeAndEnemyAllDeath; // 0x269
	public Dictionary<int, string> startEffectMap; // 0x270
	public static bool isAnyVoiceFinish; // 0xD
	private EventInfoPointGaugeControl eventInfoPointGaugeControl; // 0x278
	public GameObject eventInfoPointGaugeRoot; // 0x280
	public AlphaMaskTextureManager alphaMaskTextureManager; // 0x288
	private List<int> damageVoiceActorIdList; // 0x290
	private string masterBuffEffectPopLabel; // 0x298
	private int masterBuffEffectPopLabelColor; // 0x2A0
	private int[] masterBuffEffectList; // 0x2A8
	private static readonly int VOICE_RATE; // 0x10
	public List<CRIMoviePlayer> moviePlayerDataList; // 0x2B0
	private string[] movieNames; // 0x2B8
	private int[] movieWaveCount; // 0x2C0
	private GameObject movieObject; // 0x2C8
	private bool isMovieCrossFadeExec; // 0x2D0
	[HideInInspector] // RVA: 0xCCC224 Offset: 0xCCC224 VA: 0xCCC224
	public bool isMovieRebootSkip; // 0x2D1
	private bool isPlayedCutInBuff; // 0x2D2
	private bool isSkipStartSkill; // 0x2D3
	private Coroutine checkStartSkillCoroutine; // 0x2D8
	private GameObject skillCutinMessageObject; // 0x2E0
	public bool isEnableSkipSkillCutIn; // 0x2E8
	public BattlePerformanceDefenceTarget defenceTarget; // 0x2F0
	private BattleMotionSkipManager motionSkipManager; // 0x2F8
	public bool isBusyClearBattle; // 0x300
	public string clearBattlePath; // 0x308
	public AssetData clearBattleAsset; // 0x310
	private string clearBattleAssetName; // 0x318
	public bool isBusyLimitTurn; // 0x320
	public GameObject objLimitTurnEffect; // 0x328
	public static string limitTurnBasePath; // 0x18
	public string limitTurnPath; // 0x330
	public AssetData limitTurnAsset; // 0x338
	private string raidfileName; // 0x340
	private string turnSituationAssetName; // 0x348
	public bool isBusyLoadEnemyActor; // 0x350
	public bool isBusyLoadNStage; // 0x351
	public bool isChangeLoadBg; // 0x352
	public static readonly float DefaultFov; // 0x20
	public float currentFov; // 0x354
	[SerializeField] // RVA: 0xCCC234 Offset: 0xCCC234 VA: 0xCCC234
	protected List<float> FovTable; // 0x358
	private BattlePerformance.PositionMode positionMode; // 0x360
	public bool waitMovieEnd; // 0x364
	public bool winAfterMovie; // 0x365
	private CRIMoviePlayer playingMoviePlayer; // 0x368
	private bool istactical; // 0x370
	public List<GameObject> StandFigures; // 0x378
	private BattleActionData nowAction; // 0x380
	private int wkRandomIndex; // 0x388
	private Vector3[] wkRandomVector; // 0x390
	private List<int> CommonSkillMotionList; // 0x398
	private Vector3 criticalAdjustment; // 0x3A0
	private Vector3 classAdjustment; // 0x3AC
	private List<GameObject> adjustments; // 0x3B8
	private Vector3 wkvec; // 0x3C0
	private List<GameObject> popitemlist; // 0x3D0
	private List<GameObject> saveList; // 0x3D8
	private List<Vector3> savePosList; // 0x3E0
	private bool isLoadingVoices; // 0x3E8
	private bool isLoadingFigurePrefabs; // 0x3E9
	private bool isSkipStartQuest; // 0x3EA
	private Coroutine checkCoroutine; // 0x3F0
	private string currentFadeAnimName; // 0x3F8
	private GameObject clearObj; // 0x400
	protected static bool _never; // 0x24
	private List<GameObject> uieffectList; // 0x408
	[CompilerGeneratedAttribute] // RVA: 0xCCC244 Offset: 0xCCC244 VA: 0xCCC244
	private static Action <>f__am$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCCC254 Offset: 0xCCC254 VA: 0xCCC254
	private static Action <>f__am$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCC264 Offset: 0xCCC264 VA: 0xCCC264
	private static Action <>f__am$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCCC274 Offset: 0xCCC274 VA: 0xCCC274
	private static Action <>f__am$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCCC284 Offset: 0xCCC284 VA: 0xCCC284
	private static Comparison<string> <>f__am$cache4; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCCC294 Offset: 0xCCC294 VA: 0xCCC294
	private static Func<BattleActionData.MoveToSubMember, bool> <>f__am$cache5; // 0x50

	// Properties
	public BattlePerformanceEnemy EnemyPerf { get; }
	public GameObject[] PlayerActorList { get; set; }
	public GameObject[] EnemyActorList { get; set; }
	public int CurrentGroundNo { get; set; }
	public int CurrentGroundType { get; set; }
	public GameObject[] AiNpcArray { get; }
	public bool enableReadyResultWindow { get; set; }
	public int WaitDispEffectCount { get; set; }
	public bool checkCriticalPerfomance { get; set; }
	public AssetData resultAssetData { get; set; }
	public AssetData gimmickAssetData { get; set; }
	public GameObject gimmickObj { get; set; }
	public FieldMotionManager fmManager { get; set; }
	public bool IsCalledByEnemyNameUI { get; set; }
	public BattleMotionSkipManager MotionSkipManager { get; }
	public BaseMotionSkip MotionSkip { get; }

	// Methods

	// RVA: 0x1505174 Offset: 0x1505174 VA: 0x1505174
	public void .ctor() { }

	// RVA: 0x1505A60 Offset: 0x1505A60 VA: 0x1505A60
	private void Awake() { }

	// RVA: 0x1505B88 Offset: 0x1505B88 VA: 0x1505B88
	public BattlePerformanceEnemy get_EnemyPerf() { }

	// RVA: 0x1505BB4 Offset: 0x1505BB4 VA: 0x1505BB4
	public GameObject[] get_PlayerActorList() { }

	// RVA: 0x1505BBC Offset: 0x1505BBC VA: 0x1505BBC
	public void set_PlayerActorList(GameObject[] value) { }

	// RVA: 0x1505BC4 Offset: 0x1505BC4 VA: 0x1505BC4
	public GameObject[] get_EnemyActorList() { }

	// RVA: 0x1505BCC Offset: 0x1505BCC VA: 0x1505BCC
	public void set_EnemyActorList(GameObject[] value) { }

	// RVA: 0x1505BD4 Offset: 0x1505BD4 VA: 0x1505BD4
	public int get_CurrentGroundNo() { }

	// RVA: 0x1505BDC Offset: 0x1505BDC VA: 0x1505BDC
	public void set_CurrentGroundNo(int value) { }

	// RVA: 0x1505BE4 Offset: 0x1505BE4 VA: 0x1505BE4
	public int get_CurrentGroundType() { }

	// RVA: 0x1505BEC Offset: 0x1505BEC VA: 0x1505BEC
	public void set_CurrentGroundType(int value) { }

	// RVA: 0x1505BF4 Offset: 0x1505BF4 VA: 0x1505BF4
	private void DebugLog(string str) { }

	// RVA: 0x1505BF8 Offset: 0x1505BF8 VA: 0x1505BF8
	public GameObject[] get_AiNpcArray() { }

	// RVA: 0x1505C00 Offset: 0x1505C00 VA: 0x1505C00
	public void set_enableReadyResultWindow(bool value) { }

	// RVA: 0x1505C0C Offset: 0x1505C0C VA: 0x1505C0C
	public bool get_enableReadyResultWindow() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38EEC Offset: 0xD38EEC VA: 0xD38EEC
	// RVA: 0x1505C14 Offset: 0x1505C14 VA: 0x1505C14
	private void set_WaitDispEffectCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD38EFC Offset: 0xD38EFC VA: 0xD38EFC
	// RVA: 0x1505C1C Offset: 0x1505C1C VA: 0x1505C1C
	public int get_WaitDispEffectCount() { }

	// RVA: 0x1505C24 Offset: 0x1505C24 VA: 0x1505C24
	public bool get_checkCriticalPerfomance() { }

	// RVA: 0x1505C2C Offset: 0x1505C2C VA: 0x1505C2C
	public void set_checkCriticalPerfomance(bool value) { }

	// RVA: 0x1505C38 Offset: 0x1505C38 VA: 0x1505C38
	public bool checkLoad() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F0C Offset: 0xD38F0C VA: 0xD38F0C
	// RVA: 0x1505CA8 Offset: 0x1505CA8 VA: 0x1505CA8
	public AssetData get_resultAssetData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F1C Offset: 0xD38F1C VA: 0xD38F1C
	// RVA: 0x1505CB0 Offset: 0x1505CB0 VA: 0x1505CB0
	private void set_resultAssetData(AssetData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F2C Offset: 0xD38F2C VA: 0xD38F2C
	// RVA: 0x1505CB8 Offset: 0x1505CB8 VA: 0x1505CB8
	public AssetData get_gimmickAssetData() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F3C Offset: 0xD38F3C VA: 0xD38F3C
	// RVA: 0x1505CC0 Offset: 0x1505CC0 VA: 0x1505CC0
	private void set_gimmickAssetData(AssetData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F4C Offset: 0xD38F4C VA: 0xD38F4C
	// RVA: 0x1505CC8 Offset: 0x1505CC8 VA: 0x1505CC8
	public GameObject get_gimmickObj() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F5C Offset: 0xD38F5C VA: 0xD38F5C
	// RVA: 0x1505CD0 Offset: 0x1505CD0 VA: 0x1505CD0
	private void set_gimmickObj(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F6C Offset: 0xD38F6C VA: 0xD38F6C
	// RVA: 0x1505CD8 Offset: 0x1505CD8 VA: 0x1505CD8
	public FieldMotionManager get_fmManager() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F7C Offset: 0xD38F7C VA: 0xD38F7C
	// RVA: 0x1505CE0 Offset: 0x1505CE0 VA: 0x1505CE0
	private void set_fmManager(FieldMotionManager value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F8C Offset: 0xD38F8C VA: 0xD38F8C
	// RVA: 0x1505CE8 Offset: 0x1505CE8 VA: 0x1505CE8
	public bool get_IsCalledByEnemyNameUI() { }

	[CompilerGeneratedAttribute] // RVA: 0xD38F9C Offset: 0xD38F9C VA: 0xD38F9C
	// RVA: 0x1505CF0 Offset: 0x1505CF0 VA: 0x1505CF0
	public void set_IsCalledByEnemyNameUI(bool value) { }

	// RVA: 0x1505CFC Offset: 0x1505CFC VA: 0x1505CFC
	public BattleMotionSkipManager get_MotionSkipManager() { }

	// RVA: 0x1505D68 Offset: 0x1505D68 VA: 0x1505D68
	public BaseMotionSkip get_MotionSkip() { }

	// RVA: 0x1505D9C Offset: 0x1505D9C VA: 0x1505D9C
	public bool isActiveEventInfoGauge() { }

	// RVA: 0x1505E0C Offset: 0x1505E0C VA: 0x1505E0C
	private bool IsEventGaugeOpen(int eventId) { }

	// RVA: 0x1506000 Offset: 0x1506000 VA: 0x1506000
	public bool LoadEventInfoPointGauge(Action finishAction, int eventId) { }

	// RVA: 0x1506138 Offset: 0x1506138 VA: 0x1506138
	private void SetupEventInfoPointGauge() { }

	// RVA: 0x15063BC Offset: 0x15063BC VA: 0x15063BC
	public void PlayEventInfoPointGaugeEffect(int point) { }

	// RVA: 0x1506628 Offset: 0x1506628 VA: 0x1506628
	public void ReleaseEventInfoPointGauge() { }

	// RVA: 0x15066C4 Offset: 0x15066C4 VA: 0x15066C4
	public void LoadStartBattleAsset(int startEffectId) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38FAC Offset: 0xD38FAC VA: 0xD38FAC
	// RVA: 0x150693C Offset: 0x150693C VA: 0x150693C
	private IEnumerator coroutineLoadStartBattleAsset() { }

	// RVA: 0x15068B4 Offset: 0x15068B4 VA: 0x15068B4
	public void ReleaseStartBattleAsset() { }

	// RVA: 0x15069AC Offset: 0x15069AC VA: 0x15069AC
	public void LoadClearBattleAsset() { }

	// RVA: 0x1506ADC Offset: 0x1506ADC VA: 0x1506ADC
	private void SettingClearBattleInfo() { }

	[DebuggerHiddenAttribute] // RVA: 0xD38FBC Offset: 0xD38FBC VA: 0xD38FBC
	// RVA: 0x1506A6C Offset: 0x1506A6C VA: 0x1506A6C
	private IEnumerator coroutineLoadClearBattleAsset() { }

	// RVA: 0x15069E8 Offset: 0x15069E8 VA: 0x15069E8
	public void ReleaseClearBattleAsset() { }

	// RVA: 0x1506BDC Offset: 0x1506BDC VA: 0x1506BDC
	public void loadLimitTurnAsset(int turnEffectType) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38FCC Offset: 0xD38FCC VA: 0xD38FCC
	// RVA: 0x1506D78 Offset: 0x1506D78 VA: 0x1506D78
	private IEnumerator coroutineLoadLimitTurnAsse() { }

	// RVA: 0x1506CF4 Offset: 0x1506CF4 VA: 0x1506CF4
	public void ReleaseLimitTurnAsset() { }

	// RVA: 0x1506DE8 Offset: 0x1506DE8 VA: 0x1506DE8
	public void playLimitTurnEffect(Action callBack) { }

	// RVA: 0x1506FCC Offset: 0x1506FCC VA: 0x1506FCC
	public void SetLimitTurnEffectFlag(bool flg) { }

	// RVA: 0x15070E0 Offset: 0x15070E0 VA: 0x15070E0
	public void startRaidDamage(string eventName) { }

	// RVA: 0x15072E4 Offset: 0x15072E4 VA: 0x15072E4
	public void checkRaidDamage(string eventName) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38FDC Offset: 0xD38FDC VA: 0xD38FDC
	// RVA: 0x1507250 Offset: 0x1507250 VA: 0x1507250
	private IEnumerator coroutineRaidAttackEffect(string eventName) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38FEC Offset: 0xD38FEC VA: 0xD38FEC
	// RVA: 0x15071BC Offset: 0x15071BC VA: 0x15071BC
	private IEnumerator coroutineTurnSituationEffect(string eventName) { }

	// RVA: 0x1507378 Offset: 0x1507378 VA: 0x1507378
	public void releaseAsset() { }

	// RVA: 0x15073A4 Offset: 0x15073A4 VA: 0x15073A4
	public void relaseRaidAsset() { }

	// RVA: 0x1507410 Offset: 0x1507410 VA: 0x1507410
	public void relaseTurnSituationAsset() { }

	// RVA: 0x1507520 Offset: 0x1507520 VA: 0x1507520
	private void Start() { }

	// RVA: 0x15075B4 Offset: 0x15075B4 VA: 0x15075B4
	private void OnDestroy() { }

	// RVA: 0x1507648 Offset: 0x1507648 VA: 0x1507648
	private void FingerGestures_OnGestureEvent(Gesture gesture) { }

	// RVA: 0x15077C0 Offset: 0x15077C0 VA: 0x15077C0
	public void loadStorageObject(AssetData aData) { }

	// RVA: 0x1507A10 Offset: 0x1507A10 VA: 0x1507A10
	public void loadFieldMotion(AssetData commonData, List<AssetData> motionDataList) { }

	// RVA: 0x1507E68 Offset: 0x1507E68 VA: 0x1507E68
	public void Initialize() { }

	// RVA: 0x150866C Offset: 0x150866C VA: 0x150866C
	private void DestroyAndUnloadBattleActor(GameObject[] actorList) { }

	// RVA: 0x15088E8 Offset: 0x15088E8 VA: 0x15088E8
	public UIPanel getPanel(int index) { }

	// RVA: 0x1508940 Offset: 0x1508940 VA: 0x1508940
	public void procEndQuest() { }

	// RVA: 0x1508DFC Offset: 0x1508DFC VA: 0x1508DFC
	public void LoadBattleAsset(string endEventStr) { }

	[DebuggerHiddenAttribute] // RVA: 0xD38FFC Offset: 0xD38FFC VA: 0xD38FFC
	// RVA: 0x1508E28 Offset: 0x1508E28 VA: 0x1508E28
	private IEnumerator LoadBattleSubAsset(string endEventStr) { }

	// RVA: 0x1508EBC Offset: 0x1508EBC VA: 0x1508EBC
	public void initQuest() { }

	// RVA: 0x1509754 Offset: 0x1509754 VA: 0x1509754
	public void InitAmbientLight() { }

	// RVA: 0x150919C Offset: 0x150919C VA: 0x150919C
	public void loadMaster() { }

	// RVA: 0x1509770 Offset: 0x1509770 VA: 0x1509770
	public void loadEnemyMaster() { }

	// RVA: 0x15097A0 Offset: 0x15097A0 VA: 0x15097A0
	public void DeleteServantStatus(int index, bool isEnemy) { }

	// RVA: 0x1509808 Offset: 0x1509808 VA: 0x1509808
	public bool deletePlayerActor(int index) { }

	// RVA: 0x1509440 Offset: 0x1509440 VA: 0x1509440
	public void LoadAiNpcPlayerActors() { }

	// RVA: 0x1509B1C Offset: 0x1509B1C VA: 0x1509B1C
	private GameObject LoadAiNpcPlayerActor(int index, BattleServantData svtData) { }

	// RVA: 0x15091CC Offset: 0x15091CC VA: 0x15091CC
	public bool loadPlayerActor(int index) { }

	// RVA: 0x1509C14 Offset: 0x1509C14 VA: 0x1509C14
	private GameObject CommonLoadPlayerActor(int index, BattleServantData svtdata, string prefixVariable = "") { }

	// RVA: 0x150A0AC Offset: 0x150A0AC VA: 0x150A0AC
	public Transform getTacticalPlayerPos(int index) { }

	// RVA: 0x150A0E8 Offset: 0x150A0E8 VA: 0x150A0E8
	public Transform getRepopPlayerPos(int index) { }

	// RVA: 0x150A124 Offset: 0x150A124 VA: 0x150A124
	public void repopPlayerActor(int index) { }

	// RVA: 0x150A258 Offset: 0x150A258 VA: 0x150A258
	public void replacePlayerActor(int index) { }

	// RVA: 0x150A38C Offset: 0x150A38C VA: 0x150A38C
	public void continuePlayerActor(int index, bool isTactical) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3900C Offset: 0xD3900C VA: 0xD3900C
	// RVA: 0x150A4E0 Offset: 0x150A4E0 VA: 0x150A4E0
	private IEnumerator coroutineLoadEnemyActor() { }

	// RVA: 0x150A550 Offset: 0x150A550 VA: 0x150A550
	private void SwitchUniqueFieldMotionState() { }

	// RVA: 0x150A5F4 Offset: 0x150A5F4 VA: 0x150A5F4
	public void loadNStage(int stagecount) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3901C Offset: 0xD3901C VA: 0xD3901C
	// RVA: 0x150A620 Offset: 0x150A620 VA: 0x150A620
	private IEnumerator coroutineLoadNStage(int stagecount) { }

	// RVA: 0x150A690 Offset: 0x150A690 VA: 0x150A690
	public void rebootMovieSkip() { }

	// RVA: 0x150AA50 Offset: 0x150AA50 VA: 0x150AA50
	public void ChangeWaveBg(int id, int tp = 0) { }

	// RVA: 0x150AC7C Offset: 0x150AC7C VA: 0x150AC7C
	public void updateFov() { }

	// RVA: 0x150B214 Offset: 0x150B214 VA: 0x150B214
	public void UpdateAllShadow() { }

	// RVA: 0x150B134 Offset: 0x150B134 VA: 0x150B134
	public void setupCameraFov(float fov) { }

	// RVA: 0x150ACA0 Offset: 0x150ACA0 VA: 0x150ACA0
	public float GetMaxFov() { }

	// RVA: 0x150B3C4 Offset: 0x150B3C4 VA: 0x150B3C4
	public bool deleteEnemyActor(int index) { }

	// RVA: 0x150B614 Offset: 0x150B614 VA: 0x150B614
	public void DeleteFieldEnemyActors() { }

	// RVA: 0x150B668 Offset: 0x150B668 VA: 0x150B668
	public void enableEnemyColliderALL() { }

	// RVA: 0x150B708 Offset: 0x150B708 VA: 0x150B708
	public void disableEnemyColliderALL() { }

	// RVA: 0x150B7A8 Offset: 0x150B7A8 VA: 0x150B7A8
	public bool loadEnemyActor(int index) { }

	// RVA: 0x150BE84 Offset: 0x150BE84 VA: 0x150BE84
	public Transform getRepopEnemyPos(int index) { }

	// RVA: 0x150BEC0 Offset: 0x150BEC0 VA: 0x150BEC0
	public Transform getRepopEnemyTacicalPos(int index) { }

	// RVA: 0x150BEFC Offset: 0x150BEFC VA: 0x150BEFC
	public void repopEnemyActor(int index) { }

	// RVA: 0x150C030 Offset: 0x150C030 VA: 0x150C030
	public void replaceEnemyActor(int index) { }

	// RVA: 0x150C1AC Offset: 0x150C1AC VA: 0x150C1AC
	public void updateView() { }

	// RVA: 0x1502118 Offset: 0x1502118 VA: 0x1502118
	public void updateDropItemCount() { }

	// RVA: 0x150C2BC Offset: 0x150C2BC VA: 0x150C2BC
	public void setTimeScale(float time) { }

	// RVA: 0x150C2C4 Offset: 0x150C2C4 VA: 0x150C2C4
	public GameObject getServantGameObject(int uniqueId) { }

	// RVA: 0x150C700 Offset: 0x150C700 VA: 0x150C700
	public GameObject getServantGameObjectFromIndex(int index, bool isEnemy) { }

	// RVA: 0x150C764 Offset: 0x150C764 VA: 0x150C764
	public int getServantIndex(GameObject searchObj, bool isEnemy) { }

	// RVA: 0x150C820 Offset: 0x150C820 VA: 0x150C820
	public GameObject getDefaultTargetPosObject(int index, bool isEnemy) { }

	// RVA: 0x150C888 Offset: 0x150C888 VA: 0x150C888
	public int getServantPosIndex(int uniqueId) { }

	// RVA: 0x150CB54 Offset: 0x150CB54 VA: 0x150CB54
	public BattleActorControl getServantActor(int uniqueId) { }

	// RVA: 0x150C63C Offset: 0x150C63C VA: 0x150C63C
	public BattleActorControl GetAiNpcActor(int uniqueId) { }

	// RVA: 0x150CE50 Offset: 0x150CE50 VA: 0x150CE50
	public void updateStatus() { }

	// RVA: 0x150CE80 Offset: 0x150CE80 VA: 0x150CE80
	public void PrevTacticalProc() { }

	// RVA: 0x150C19C Offset: 0x150C19C VA: 0x150C19C
	public bool isPositionTactical() { }

	// RVA: 0x150CEDC Offset: 0x150CEDC VA: 0x150CEDC
	public bool isPositionBattle() { }

	// RVA: 0x150CEEC Offset: 0x150CEEC VA: 0x150CEEC
	public void movePositionToBattle() { }

	// RVA: 0x150D00C Offset: 0x150D00C VA: 0x150D00C
	public void movePositionToTactical() { }

	// RVA: 0x150D1B8 Offset: 0x150D1B8 VA: 0x150D1B8
	public void setPositionModeTac() { }

	// RVA: 0x150D004 Offset: 0x150D004 VA: 0x150D004
	public void setPositionModeBattle() { }

	// RVA: 0x150AA20 Offset: 0x150AA20 VA: 0x150AA20
	public int getBattleWaveNum() { }

	// RVA: 0x150D1C4 Offset: 0x150D1C4 VA: 0x150D1C4
	public bool playBattleMovie(string name, bool movieEndDispose = False, BattlePerformance.playMovieType type = 0, bool isBgmPause = True, bool isSePause = True, bool isVoicePause = True) { }

	// RVA: 0x150A820 Offset: 0x150A820 VA: 0x150A820
	private void setWaveMovieCameraPosition() { }

	// RVA: 0x150A948 Offset: 0x150A948 VA: 0x150A948
	private void enemyServantsChangeDead() { }

	// RVA: 0x150D48C Offset: 0x150D48C VA: 0x150D48C
	public void waveStartMovie(CRIMoviePlayer cRIMoviePlayer, bool movieEndDispose) { }

	// RVA: 0x150D6C8 Offset: 0x150D6C8 VA: 0x150D6C8
	private void disposeCRIMoviePlayer(CRIMoviePlayer player, bool fadeIn) { }
