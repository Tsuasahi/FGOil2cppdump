
	// RVA: 0x1673C6C Offset: 0x1673C6C VA: 0x1673C6C
	public int[] getBoostSkillArray() { }
}

// Namespace: 
public class BattleInfoData.UsedBoostItem // TypeDefIndex: 6576
{
	// Fields
	public int itemId; // 0x10
	public int skillId; // 0x14

	// Methods

	// RVA: 0x1673DC4 Offset: 0x1673DC4 VA: 0x1673DC4
	public void .ctor() { }
}

// Namespace: 
public class BattleInfoData.UsedBoost // TypeDefIndex: 6577
{
	// Fields
	public int boostId; // 0x10
	public int skillId; // 0x14

	// Methods

	// RVA: 0x1673DBC Offset: 0x1673DBC VA: 0x1673DBC
	public void .ctor() { }
}

// Namespace: 
public class BattleSetupInfo // TypeDefIndex: 6578
{
	// Fields
	public int warId; // 0x10
	public int questId; // 0x14
	public int questPhase; // 0x18
	public long deckId; // 0x20
	public long followerId; // 0x28
	public int followerClassId; // 0x30
	public int itemId; // 0x34
	public int boostId; // 0x38
	public long userEquipId; // 0x40
	public bool isQuestNew; // 0x48
	public bool isScriptBeforePartySelect; // 0x49
	public bool isChildFollower; // 0x4A
	public int eventId; // 0x4C
	public EventUpValSetupInfo eventUpValSetupInfo; // 0x50
	public QuestRestrictionInfo questRestrictionInfo; // 0x58
	public bool battleBefore; // 0x60
	public bool isBefore; // 0x61
	public string demoInfo; // 0x68
	public int[] selectableQuestIds; // 0x70
	public int selectableRouteQuestId; // 0x78
	public int selectedBranchIdx; // 0x7C
	public int followerType; // 0x80
	public int originQuestId; // 0x84
	public int followrRandomLimitCount; // 0x88
	public string choiceRandomLimitCounts; // 0x90
	public bool isScriptBeforeWarBoard; // 0x98
	public int followerSupportDeckId; // 0x9C
	public int campaignItemId; // 0xA0

	// Methods

	// RVA: 0x1AE205C Offset: 0x1AE205C VA: 0x1AE205C
	public void .ctor() { }

	// RVA: 0x1AE2064 Offset: 0x1AE2064 VA: 0x1AE2064
	public void .ctor(BattleSetupInfo.BattleSetupSaveInfo saveInfo) { }

	// RVA: 0x1AE2734 Offset: 0x1AE2734 VA: 0x1AE2734
	public BattleSetupInfo.BattleSetupSaveInfo GetInfoForSave() { }

	// RVA: 0x1AE2A1C Offset: 0x1AE2A1C VA: 0x1AE2A1C
	public int TargetQuestId() { }

	// RVA: 0x1AE2A84 Offset: 0x1AE2A84 VA: 0x1AE2A84
	public int TargetQuestBranchIdx() { }

	// RVA: 0x1AE2340 Offset: 0x1AE2340 VA: 0x1AE2340
	public void SetEventUpValues() { }

	// RVA: 0x1AE2444 Offset: 0x1AE2444 VA: 0x1AE2444
	public void SetRestriction(bool isResetDeck = False) { }

	// RVA: 0x1AE25D0 Offset: 0x1AE25D0 VA: 0x1AE25D0
	public void SetSelectableQuests() { }

	// RVA: 0x1AE2AA8 Offset: 0x1AE2AA8 VA: 0x1AE2AA8
	public BattleSetupInfo ConvertBattleSetupInfo(int warId, int qId, int qPhase, bool isScriptBeforePartySelect, bool isScriptBeforeWarBoard, int selectedBranch = 0) { }
}

// Namespace: 
public class BattleSetupInfo.BattleSetupSaveInfo // TypeDefIndex: 6579
{
	// Fields
	public int warId; // 0x10
	public int questId; // 0x14
	public int questPhase; // 0x18
	public long deckId; // 0x20
	public long followerId; // 0x28
	public int followerClassId; // 0x30
	public int itemId; // 0x34
	public int boostId; // 0x38
	public long userEquipId; // 0x40
	public bool isQuestNew; // 0x48
	public bool isScriptBeforePartySelect; // 0x49
	public bool isChildFollower; // 0x4A
	public int eventId; // 0x4C
	public bool battleBefore; // 0x50
	public bool isBefore; // 0x51
	public string demoInfo; // 0x58
	public int selectedBranchIdx; // 0x60
	public int followerType; // 0x64
	public int originQuestId; // 0x68
	public int followrRandomLimitCount; // 0x6C
	public string choiceRandomLimitCounts; // 0x70
	public bool isScriptBeforeWarBoard; // 0x78
	public int followerSupportDeckId; // 0x7C
	public int campaignItemId; // 0x80

	// Methods

	// RVA: 0x1AE2A14 Offset: 0x1AE2A14 VA: 0x1AE2A14
	public void .ctor() { }
}

// Namespace: 
public class BattleUserServantData : UserServantEntity // TypeDefIndex: 6580
{
	// Fields
	public int recover; // 0x138
	public int chargeTurn; // 0x13C
	public int skillId1; // 0x140
	public int skillId2; // 0x144
	public int skillId3; // 0x148
	public int treasureDeviceId; // 0x14C
	public int treasureDeviceLv; // 0x150
	public int criticalRate; // 0x154
	public int aiId; // 0x158
	public int actPriority; // 0x15C
	public int maxActNum; // 0x160
	public int minActNum; // 0x164
	public int displayType; // 0x168
	public int npcSvtType; // 0x16C
	public int starRate; // 0x170
	public int tdRate; // 0x174
	public int deathRate; // 0x178
	public int[] individuality; // 0x180
	public int[] passiveSkill; // 0x188
	public int[] addPassive; // 0x190
	public int[] addPassiveLvs; // 0x198
	public int[] classPassive; // 0x1A0
	public long equipTargetId1; // 0x1A8
	public long[] equipTargetIds; // 0x1B0
	public int npcSvtClassId; // 0x1B8
	public int overwriteSvtId; // 0x1BC
	public long[] userCommandCodeIds; // 0x1C0
	public int[] commandCardParam; // 0x1C8
	public int tdAttackRate; // 0x1D0
	public int afterLimitCount; // 0x1D4
	public int afterIconLimitCount; // 0x1D8
	public int[] appendPassiveSkillIds; // 0x1E0
	public int[] appendPassiveSkillLvs; // 0x1E8
	public int imageSvtId; // 0x1F0

	// Methods

	// RVA: 0x1AE8FB0 Offset: 0x1AE8FB0 VA: 0x1AE8FB0
	public void .ctor() { }

	// RVA: 0x1AE9018 Offset: 0x1AE9018 VA: 0x1AE9018
	public int getBattleSvtId() { }

	// RVA: 0x1AE90E0 Offset: 0x1AE90E0 VA: 0x1AE90E0
	public int[] getBattleSkillIdList() { }

	// RVA: 0x1AE91DC Offset: 0x1AE91DC VA: 0x1AE91DC
	public int[] getAddPassiveSkill() { }

	// RVA: 0x1AE9240 Offset: 0x1AE9240 VA: 0x1AE9240
	public SimpleSkillData[] GetAddPassiveSkillArray() { }

	// RVA: 0x1AE940C Offset: 0x1AE940C VA: 0x1AE940C
	public long[] getBattleEquipTargetList() { }

	// RVA: 0x1AE94C0 Offset: 0x1AE94C0 VA: 0x1AE94C0
	public int[] getClassPassive() { }

	// RVA: 0x1AE94C8 Offset: 0x1AE94C8 VA: 0x1AE94C8
	public SimpleSkillData[] GetAppendPassiveSkillArray() { }

	// RVA: 0x1AE92D0 Offset: 0x1AE92D0 VA: 0x1AE92D0
	protected SimpleSkillData[] MakeSimpleSkillArray(int[] skillIds, int[] skillLvs) { }
}

// Namespace: 
public class CommandCodeStatus // TypeDefIndex: 6581
{
	// Fields
	public int idx; // 0x10
	public long userCommandCodeId; // 0x18
	public ObscuredInt commandCodeId; // 0x20

	// Methods

	// RVA: 0x1B66934 Offset: 0x1B66934 VA: 0x1B66934
	public void .ctor() { }
}

// Namespace: 
public static class CommonConsumeDetail // TypeDefIndex: 6582
{
	// Properties
	private static CommonConsumeMaster commonConusmeMaster { get; }
	private static ItemMaster itemMaster { get; }
	private static UserItemMaster userItemMaster { get; }

	// Methods

	// RVA: 0x148DCE4 Offset: 0x148DCE4 VA: 0x148DCE4
	private static CommonConsumeMaster get_commonConusmeMaster() { }

	// RVA: 0x148DD50 Offset: 0x148DD50 VA: 0x148DD50
	private static ItemMaster get_itemMaster() { }

	// RVA: 0x148DDBC Offset: 0x148DDBC VA: 0x148DDBC
	private static UserItemMaster get_userItemMaster() { }

	// RVA: 0x148DE28 Offset: 0x148DE28 VA: 0x148DE28
	public static CommonConsumeDetailInfo[] GetConsumeDetailInfoByConsumeId(int commonConsumeId) { }

	// RVA: 0x148E320 Offset: 0x148E320 VA: 0x148E320
	public static string GetConsumeDetailDescription(CommonConsumeDetailInfo[] consumeItemInfoArray) { }

	// RVA: 0x148E5CC Offset: 0x148E5CC VA: 0x148E5CC
	public static bool IsAllSatisfied(CommonConsumeDetailInfo[] consumeItemInfoArray) { }
}

// Namespace: 
public class CommonConsumeDetailInfo // TypeDefIndex: 6583
{
	// Fields
	public CommonConsumeEntity CommonConsumeEntity; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCC1254 Offset: 0xCC1254 VA: 0xCC1254
	[DebuggerBrowsableAttribute] // RVA: 0xCC1254 Offset: 0xCC1254 VA: 0xCC1254
	private string <Name>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCC1290 Offset: 0xCC1290 VA: 0xCC1290
	[DebuggerBrowsableAttribute] // RVA: 0xCC1290 Offset: 0xCC1290 VA: 0xCC1290
	private int <Num>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCC12CC Offset: 0xCC12CC VA: 0xCC12CC
	[DebuggerBrowsableAttribute] // RVA: 0xCC12CC Offset: 0xCC12CC VA: 0xCC12CC
	private bool <IsOwnedEnoughly>k__BackingField; // 0x24
	private object targetEntity; // 0x28
	private object userOwnStatusEntity; // 0x30

	// Properties
	public string Name { get; set; }
	public int Num { get; set; }
	public bool IsOwnedEnoughly { get; set; }

	// Methods

	// RVA: 0x148E2B0 Offset: 0x148E2B0 VA: 0x148E2B0
	public void .ctor(CommonConsumeEntity commonConsumeEntity, object targetEntity, object userOwnStatusEntity) { }

	[CompilerGeneratedAttribute] // RVA: 0xD374EC Offset: 0xD374EC VA: 0xD374EC
	// RVA: 0x148E5BC Offset: 0x148E5BC VA: 0x148E5BC
	public string get_Name() { }

	[CompilerGeneratedAttribute] // RVA: 0xD374FC Offset: 0xD374FC VA: 0xD374FC
	// RVA: 0x148E70C Offset: 0x148E70C VA: 0x148E70C
	private void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3750C Offset: 0xD3750C VA: 0xD3750C
	// RVA: 0x148E5C4 Offset: 0x148E5C4 VA: 0x148E5C4
	public int get_Num() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3751C Offset: 0xD3751C VA: 0xD3751C
	// RVA: 0x148E654 Offset: 0x148E654 VA: 0x148E654
	private void set_Num(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3752C Offset: 0xD3752C VA: 0xD3752C
	// RVA: 0x148E5B4 Offset: 0x148E5B4 VA: 0x148E5B4
	public bool get_IsOwnedEnoughly() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3753C Offset: 0xD3753C VA: 0xD3753C
	// RVA: 0x148E7E8 Offset: 0x148E7E8 VA: 0x148E7E8
	private void set_IsOwnedEnoughly(bool value) { }

	// RVA: 0x148E65C Offset: 0x148E65C VA: 0x148E65C
	private string GetTargetName() { }

	// RVA: 0x148E714 Offset: 0x148E714 VA: 0x148E714
	private bool CheckIsOwnedEnoughly() { }
}

// Namespace: 
public static class CommonReleaseExtension // TypeDefIndex: 6584
{
	// Properties
	private static CommonReleaseMaster master { get; }

	// Methods

	// RVA: 0x149CE20 Offset: 0x149CE20 VA: 0x149CE20
	private static CommonReleaseMaster get_master() { }

	// RVA: 0x149CE8C Offset: 0x149CE8C VA: 0x149CE8C
	public static bool IsOpenConsiderBeforeClearQuest(int commonReleaseId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }
}

// Namespace: 
private class CommonReleaseExtension.CommonReleaseCondOverwriterBase : CommonReleaseCondOverwriter // TypeDefIndex: 6585
{
	// Methods

	// RVA: 0x149D084 Offset: 0x149D084 VA: 0x149D084
	public void .ctor() { }

	// RVA: 0x149D08C Offset: 0x149D08C VA: 0x149D08C Slot: 5
	public virtual bool IsOpen(CommonReleaseEntity entity) { }
}

// Namespace: 
private class CommonReleaseExtension.CommonReleaseCondOverwriterBeforeClearQuest : CommonReleaseExtension.CommonReleaseCondOverwriterBase, CommonReleaseCondOverwriter // TypeDefIndex: 6586
{
	// Fields
	private int beforeClearQuestId; // 0x10
	private bool isCheckResetFlag; // 0x14

	// Methods

	// RVA: 0x149CF20 Offset: 0x149CF20 VA: 0x149CF20
	public void .ctor(int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x149D13C Offset: 0x149D13C VA: 0x149D13C Slot: 5
	public override bool IsOpen(CommonReleaseEntity entity) { }
}

// Namespace: 
public interface CommonReleaseCondOverwriter // TypeDefIndex: 6587
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsOpen(CommonReleaseEntity entity);
}

// Namespace: 
public class DataManager : SingletonMonoBehaviour<DataManager> // TypeDefIndex: 6588
{
	// Fields
	[SerializeField] // RVA: 0xCC1308 Offset: 0xCC1308 VA: 0xCC1308
	protected bool _DispLog; // 0x18
	protected static int readDataVersion; // 0x0
	protected static long readDateVersion; // 0x8
	protected static int dataVersion; // 0x10
	protected static long dateVersion; // 0x18
	protected static object updateData; // 0x20
	protected static object webViewData; // 0x28
	private static string serverHash; // 0x30
	private DataMasterBase[] datalist; // 0x20
	private Dictionary<int, DataMasterBase> lookup; // 0x28
	protected byte[] masterDataBytes; // 0x30
	protected List<string> saveNameList; // 0x38
	protected List<long[]> saveDataMapList; // 0x40
	protected static DataManager.ReadMasterVersionResult readMasterVersionResult; // 0x38
	protected static DataManager.ReadMasterDataResult readMasterDataResult; // 0x3C
	protected static DataManager.UpdateMasterDataResult updateMasterDataResult; // 0x40
	private float lastFrameTime; // 0x48
	private const float waitFrameTime = 0.1;
	private List<string> masterCheckName; // 0x50
	private object lockCountObj; // 0x58
	private int nowLoadCount; // 0x60
	private List<Thread> masterLoadThreads; // 0x68
	private SynchronizationContext context; // 0x70
	private const int loadThreadCount = 5;
	private Thread writeMasterDataThread; // 0x78
	private bool writeMasterDataThreadEnd; // 0x80
	private Exception writeMasterDataThreadException; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCC1318 Offset: 0xCC1318 VA: 0xCC1318
	private static Func<DataMasterBase[]> <>f__mg$cache0; // 0x48

	// Properties
	public bool DispLog { get; }

	// Methods

	// RVA: 0x176CD6C Offset: 0x176CD6C VA: 0x176CD6C
	public void .ctor() { }

	// RVA: 0x176CE34 Offset: 0x176CE34 VA: 0x176CE34
	public bool get_DispLog() { }

	// RVA: 0x176CE3C Offset: 0x176CE3C VA: 0x176CE3C
	public static string getCachePath() { }

	// RVA: 0x176CF14 Offset: 0x176CF14 VA: 0x176CF14
	protected static string getCacheVersionFileName() { }

	// RVA: 0x176CFE8 Offset: 0x176CFE8 VA: 0x176CFE8
	protected static string getCacheListFileName() { }

	// RVA: 0x176D0BC Offset: 0x176D0BC VA: 0x176D0BC
	protected static string getCacheFileName() { }

	// RVA: 0x176D190 Offset: 0x176D190 VA: 0x176D190
	private static string getOldEnvCachePath() { }

	// RVA: 0x176D268 Offset: 0x176D268 VA: 0x176D268
	public static void ClearOldEnvCacheAll() { }

	// RVA: 0x176D360 Offset: 0x176D360 VA: 0x176D360
	private void OnDestroy() { }

	// RVA: 0x176D498 Offset: 0x176D498 VA: 0x176D498
	public static void ClearCacheAll() { }

	// RVA: 0x176D2C8 Offset: 0x176D2C8 VA: 0x176D2C8
	private static void ClearCacheAllCommonProc(string cachePath) { }

	// RVA: 0x176D4F8 Offset: 0x176D4F8 VA: 0x176D4F8
	public void Initialize() { }

	// RVA: 0x176D5FC Offset: 0x176D5FC VA: 0x176D5FC
	private void InitializeInternal(Func<DataMasterBase[]> createMasterDataMethod) { }

	// RVA: 0x176D7BC Offset: 0x176D7BC VA: 0x176D7BC
	public void setServerHash(object obj) { }

	// RVA: 0x176D9D0 Offset: 0x176D9D0 VA: 0x176D9D0
	public string getServerHash() { }

	// RVA: 0x176DA38 Offset: 0x176DA38 VA: 0x176DA38
	public void setWebViewData(object obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3754C Offset: 0xD3754C VA: 0xD3754C
	// RVA: 0x176DAA4 Offset: 0x176DAA4 VA: 0x176DAA4
	public IEnumerator updateWebViewData() { }

	// RVA: 0x176DB1C Offset: 0x176DB1C VA: 0x176DB1C
	public int getMasterDataVersion() { }

	// RVA: 0x176DB84 Offset: 0x176DB84 VA: 0x176DB84
	public long getMasterDateVersion() { }

	// RVA: 0x176DBEC Offset: 0x176DBEC VA: 0x176DBEC
	public void setMasterDataVersion(int dataVer, long dateVer) { }

	// RVA: 0x176DC6C Offset: 0x176DC6C VA: 0x176DC6C
	public void setMasterData(int dataVer, long dateVer, object obj) { }

	// RVA: 0x176DD68 Offset: 0x176DD68 VA: 0x176DD68
	public DataManager.ReadMasterVersionResult getReadMasterVersionResult() { }

	// RVA: 0x176DDD0 Offset: 0x176DDD0 VA: 0x176DDD0
	public DataManager.ReadMasterDataResult getReadMasterDataResult() { }

	// RVA: 0x176DE38 Offset: 0x176DE38 VA: 0x176DE38
	private bool CheckWaitforFrame() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3755C Offset: 0xD3755C VA: 0xD3755C
	// RVA: 0x176DE84 Offset: 0x176DE84 VA: 0x176DE84
	public IEnumerator readMasterVersion() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3756C Offset: 0xD3756C VA: 0xD3756C
	// RVA: 0x176DEFC Offset: 0x176DEFC VA: 0x176DEFC
	public IEnumerator readMasterData() { }

	// RVA: 0x176DF74 Offset: 0x176DF74 VA: 0x176DF74
	public DataManager.UpdateMasterDataResult getUpdateMasterDataResult() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3757C Offset: 0xD3757C VA: 0xD3757C
	// RVA: 0x176DFDC Offset: 0x176DFDC VA: 0x176DFDC
	public IEnumerator updateMasterData(bool isUseTips) { }

	// RVA: 0x176E080 Offset: 0x176E080 VA: 0x176E080
	private void StartMasterLoadThread(int maxIndex, List<int> loadedIndices) { }

	// RVA: 0x176D3D4 Offset: 0x176D3D4 VA: 0x176D3D4
	private void StopMasterLoadThread() { }

	// RVA: 0x176E348 Offset: 0x176E348 VA: 0x176E348
	private void LoadMasterDataThread(object indexList) { }

	// RVA: 0x176E8C8 Offset: 0x176E8C8 VA: 0x176E8C8
	private void StartWriteLocalFile(string fileName) { }

	// RVA: 0x176D384 Offset: 0x176D384 VA: 0x176D384
	private void StopWriteLocalFile() { }

	// RVA: 0x176E984 Offset: 0x176E984 VA: 0x176E984
	private void WriteLocalFileThread(object param) { }

	// RVA: 0x176EE7C Offset: 0x176EE7C VA: 0x176EE7C
	private void GetMasterCheckName() { }

	// RVA: 0x176EFE0 Offset: 0x176EFE0 VA: 0x176EFE0
	protected uint getMdk(string name, int version) { }

	// RVA: 0x176F160 Offset: 0x176F160 VA: 0x176F160
	protected void ClearSaveDataList() { }

	// RVA: 0x176F21C Offset: 0x176F21C VA: 0x176F21C
	protected void DeleteCacheFile() { }

	// RVA: 0x176F340 Offset: 0x176F340 VA: 0x176F340
	public bool readMasterVersionFile() { }

	// RVA: 0x176FCD8 Offset: 0x176FCD8 VA: 0x176FCD8
	protected void writeMasterVersionFile() { }

	// RVA: 0x177030C Offset: 0x177030C VA: 0x177030C
	public bool readMasterDataListFile() { }

	// RVA: 0x1771160 Offset: 0x1771160 VA: 0x1771160
	protected void writeMasterDataListFile() { }

	// RVA: 0x177169C Offset: 0x177169C VA: 0x177169C
	public void updateJsonData(object obj) { }

	// RVA: 0x1771774 Offset: 0x1771774 VA: 0x1771774
	public void updateJsonData(Dictionary<string, object> data) { }

	// RVA: 0x177205C Offset: 0x177205C VA: 0x177205C
	public int getRevisionTotal() { }

	// RVA: -1 Offset: -1
	public static TMaster GetMaster<TMaster>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21A14B0 Offset: 0x21A14B0 VA: 0x21A14B0
	|-DataManager.GetMaster<BattleMaster>
	|-DataManager.GetMaster<BgmMaster>
	|-DataManager.GetMaster<BoxGachaBaseMaster>
	|-DataManager.GetMaster<BoxGachaHistoryMaster>
	|-DataManager.GetMaster<CombineAppendPassiveSkillMaster>
	|-DataManager.GetMaster<CommandCodeMaster>
	|-DataManager.GetMaster<CommonConsumeMaster>
	|-DataManager.GetMaster<CommonReleaseMaster>
	|-DataManager.GetMaster<CompleteMissionMaster>
	|-DataManager.GetMaster<ConstantMaster>
	|-DataManager.GetMaster<ConstantStrMaster>
	|-DataManager.GetMaster<EffectMaster>
	|-DataManager.GetMaster<EquipMaster>
	|-DataManager.GetMaster<EventDetailMaster>
	|-DataManager.GetMaster<EventMaster>
	|-DataManager.GetMaster<EventMissionMaster>
	|-DataManager.GetMaster<EventPanelMapMaster>
	|-DataManager.GetMaster<EventPointBuffMaster>
	|-DataManager.GetMaster<EventProgressValueMaster>
	|-DataManager.GetMaster<EventRaidMaster>
	|-DataManager.GetMaster<EventRandomMissionMaster>
	|-DataManager.GetMaster<FunctionMaster>
	|-DataManager.GetMaster<GachaAppendMaster>
	|-DataManager.GetMaster<GachaGroupMaster>
	|-DataManager.GetMaster<GachaMaster>
	|-DataManager.GetMaster<GiftMaster>
	|-DataManager.GetMaster<ItemMaster>
	|-DataManager.GetMaster<NpcFollowerMaster>
	|-DataManager.GetMaster<PickupUserFollowerMaster>
	|-DataManager.GetMaster<QuestMaster>
	|-DataManager.GetMaster<QuestPhaseMaster>
	|-DataManager.GetMaster<QuestReleaseMaster>
	|-DataManager.GetMaster<ServantAddMaster>
	|-DataManager.GetMaster<ServantAppendPassiveSkillMaster>
	|-DataManager.GetMaster<ServantChangeMaster>
	|-DataManager.GetMaster<ServantClassMaster>
	|-DataManager.GetMaster<ServantCommentAddMaster>
	|-DataManager.GetMaster<ServantCommentMaster>
	|-DataManager.GetMaster<ServantCostumeMaster>
	|-DataManager.GetMaster<ServantExceedMaster>
	|-DataManager.GetMaster<ServantLimitAddMaster>
	|-DataManager.GetMaster<ServantLimitImageMaster>
	|-DataManager.GetMaster<ServantLimitMaster>
	|-DataManager.GetMaster<ServantLimitSpoilerProtectionMaster>
	|-DataManager.GetMaster<ServantLvDetailMaster>
	|-DataManager.GetMaster<ServantMaster>
	|-DataManager.GetMaster<ShopActionMaster>
	|-DataManager.GetMaster<ShopMaster>
	|-DataManager.GetMaster<ShopReleaseMaster>
	|-DataManager.GetMaster<SkillLvMaster>
	|-DataManager.GetMaster<SkillMaster>
	|-DataManager.GetMaster<SpotMaster>
	|-DataManager.GetMaster<SvtAppendPassiveSkillUnlockMaster>
	|-DataManager.GetMaster<SvtCoinMaster>
	|-DataManager.GetMaster<object>
	|-DataManager.GetMaster<TotalEventRaidMaster>
	|-DataManager.GetMaster<TreasureDvcLvMaster>
	|-DataManager.GetMaster<TreasureDvcMaster>
	|-DataManager.GetMaster<UserCommandCodeMaster>
	|-DataManager.GetMaster<UserDeckMaster>
	|-DataManager.GetMaster<UserEventPointMaster>
	|-DataManager.GetMaster<UserEventRandomMissionMaster>
	|-DataManager.GetMaster<UserGachaDrawLogMaster>
	|-DataManager.GetMaster<UserGachaExtraCountMaster>
	|-DataManager.GetMaster<UserGachaHistoryMaster>
	|-DataManager.GetMaster<UserItemMaster>
	|-DataManager.GetMaster<UserPresentBoxMaster>
	|-DataManager.GetMaster<UserQuestInfoMaster>
	|-DataManager.GetMaster<UserServantAppendPassiveSkillLvMaster>
	|-DataManager.GetMaster<UserServantAppendPassiveSkillMaster>
	|-DataManager.GetMaster<UserServantCollectionMaster>
	|-DataManager.GetMaster<UserServantCommandCodeMaster>
	|-DataManager.GetMaster<UserServantMaster>
	|-DataManager.GetMaster<UserServantVoicePlayedMaster>
	|-DataManager.GetMaster<UserShopMaster>
	|-DataManager.GetMaster<UserSvtCoinMaster>
	|-DataManager.GetMaster<ViewEnemyMaster>
	|-DataManager.GetMaster<WarAddMaster>
	|-DataManager.GetMaster<WarMaster>
	*/

	// RVA: -1 Offset: -1
	public TMaster GetMasterData<TMaster>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21A151C Offset: 0x21A151C VA: 0x21A151C
	|-DataManager.GetMasterData<AiActMaster>
	|-DataManager.GetMasterData<BankShopMaster>
	|-DataManager.GetMasterData<BattleMasterImageMaster>
	|-DataManager.GetMasterData<BgmMaster>
	|-DataManager.GetMasterData<CommandCodeMaster>
	|-DataManager.GetMasterData<CommandCodeSkillMaster>
	|-DataManager.GetMasterData<CommonConsumeMaster>
	|-DataManager.GetMasterData<CommonReleaseMaster>
	|-DataManager.GetMasterData<EventBossStatusUiMaster>
	|-DataManager.GetMasterData<EventCampaignMaster>
	|-DataManager.GetMasterData<EventDetailMaster>
	|-DataManager.GetMasterData<EventMaster>
	|-DataManager.GetMasterData<EventMissionConditionMaster>
	|-DataManager.GetMasterData<EventPointGroupMaster>
	|-DataManager.GetMasterData<EventQuestCooltimeMaster>
	|-DataManager.GetMasterData<EventRaidMaster>
	|-DataManager.GetMasterData<EventRewardMaster>
	|-DataManager.GetMasterData<EventRewardSceneMaster>
	|-DataManager.GetMasterData<FunctionCategoryMaster>
	|-DataManager.GetMasterData<FunctionMaster>
	|-DataManager.GetMasterData<GachaMaster>
	|-DataManager.GetMasterData<GiftMaster>
	|-DataManager.GetMasterData<ItemMaster>
	|-DataManager.GetMasterData<MyRoomAddMaster>
	|-DataManager.GetMasterData<QuestAddMaster>
	|-DataManager.GetMasterData<QuestMaster>
	|-DataManager.GetMasterData<QuestPhaseMaster>
	|-DataManager.GetMasterData<QuestReleaseMaster>
	|-DataManager.GetMasterData<ServantCommentAddMaster>
	|-DataManager.GetMasterData<ServantCommentMaster>
	|-DataManager.GetMasterData<ServantCostumeMaster>
	|-DataManager.GetMasterData<ServantCostumeReleaseMaster>
	|-DataManager.GetMasterData<ServantLimitAddMaster>
	|-DataManager.GetMasterData<ServantLimitImageMaster>
	|-DataManager.GetMasterData<ServantLimitMaster>
	|-DataManager.GetMasterData<ServantMaster>
	|-DataManager.GetMasterData<ServantScriptMaster>
	|-DataManager.GetMasterData<ServantTreasureDeviceReleaseMaster>
	|-DataManager.GetMasterData<ServantVoiceMaster>
	|-DataManager.GetMasterData<ServantVoiceRelationMaster>
	|-DataManager.GetMasterData<ShopMaster>
	|-DataManager.GetMasterData<ShopReleaseMaster>
	|-DataManager.GetMasterData<SkillLvMaster>
	|-DataManager.GetMasterData<SpotMaster>
	|-DataManager.GetMasterData<SvtCoinMaster>
	|-DataManager.GetMasterData<SvtMaterialTdMaster>
	|-DataManager.GetMasterData<SvtMultiPortraitMaster>
	|-DataManager.GetMasterData<object>
	|-DataManager.GetMasterData<TreasureBoxGiftMaster>
	|-DataManager.GetMasterData<TreasureBoxMaster>
	|-DataManager.GetMasterData<TreasureBoxTalkMaster>
	|-DataManager.GetMasterData<TreasureDvcMaster>
	|-DataManager.GetMasterData<UpdateProfileDialogInfoMaster>
	|-DataManager.GetMasterData<UserCoinRoomMaster>
	|-DataManager.GetMasterData<UserCommandCodeMaster>
	|-DataManager.GetMasterData<UserDeckMaster>
	|-DataManager.GetMasterData<UserEventMaster>
	|-DataManager.GetMasterData<UserEventRaidMaster>
	|-DataManager.GetMasterData<UserFriendPointGachaFreeDrawCampaignLogMaster>
	|-DataManager.GetMasterData<UserGachaExtraCountMaster>
	|-DataManager.GetMasterData<UserGachaMaster>
	|-DataManager.GetMasterData<UserItemMaster>
	|-DataManager.GetMasterData<UserQuestMaster>
	|-DataManager.GetMasterData<UserServantCollectionMaster>
	|-DataManager.GetMasterData<UserServantMaster>
	|-DataManager.GetMasterData<UserShopMaster>
	|-DataManager.GetMasterData<UserSvtCoinMaster>
	|-DataManager.GetMasterData<VoiceMaster>
	|-DataManager.GetMasterData<VoicePlayCondMaster>
	|-DataManager.GetMasterData<WarMaster>
	*/

	[ObsoleteAttribute] // RVA: 0xD3758C Offset: 0xD3758C VA: 0xD3758C
	// RVA: 0x1772118 Offset: 0x1772118 VA: 0x1772118
	public DataMasterBase getMasterData(DataNameKind.Kind kind) { }

	[ObsoleteAttribute] // RVA: 0xD375C4 Offset: 0xD375C4 VA: 0xD375C4
	// RVA: -1 Offset: -1
	public T getMasterData<T>(DataNameKind.Kind kind) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218CC70 Offset: 0x218CC70 VA: 0x218CC70
	|-DataManager.getMasterData<AiActMaster>
	|-DataManager.getMasterData<AiFieldMaster>
	|-DataManager.getMasterData<AiMaster>
	|-DataManager.getMasterData<AssistMaster>
	|-DataManager.getMasterData<AttriRelationMaster>
	|-DataManager.getMasterData<AuraEffectMaster>
	|-DataManager.getMasterData<AuraEffectPosOverwriteMaster>
	|-DataManager.getMasterData<BankShopMaster>
	|-DataManager.getMasterData<BannerAddMaster>
	|-DataManager.getMasterData<BannerMaster>
	|-DataManager.getMasterData<BattleBgMaster>
	|-DataManager.getMasterData<BgmMaster>
	|-DataManager.getMasterData<BgmReleaseMaster>
	|-DataManager.getMasterData<BoardMessageMaster>
	|-DataManager.getMasterData<BoardMessageReleaseMaster>
	|-DataManager.getMasterData<BoostMaster>
	|-DataManager.getMasterData<BoxGachaBaseMaster>
	|-DataManager.getMasterData<BoxGachaHistoryMaster>
	|-DataManager.getMasterData<BoxGachaMaster>
	|-DataManager.getMasterData<BoxGachaTalkMaster>
	|-DataManager.getMasterData<BuffMaster>
	|-DataManager.getMasterData<CampaignInfoMaster>
	|-DataManager.getMasterData<CardMaster>
	|-DataManager.getMasterData<ClassRelationMaster>
	|-DataManager.getMasterData<ClassRelationOverwriteMaster>
	|-DataManager.getMasterData<ClosedMessageMaster>
	|-DataManager.getMasterData<CombineCostumeMaster>
	|-DataManager.getMasterData<CombineLimitMaster>
	|-DataManager.getMasterData<CombineMaster>
	|-DataManager.getMasterData<CombineMaterialMaster>
	|-DataManager.getMasterData<CombineQpMaster>
	|-DataManager.getMasterData<CombineQpSvtEquipMaster>
	|-DataManager.getMasterData<CombineSkillMaster>
	|-DataManager.getMasterData<CommandCardRankParamMaster>
	|-DataManager.getMasterData<CommandCodeCommentMaster>
	|-DataManager.getMasterData<CommandCodeMaster>
	|-DataManager.getMasterData<CommandCodeSkillMaster>
	|-DataManager.getMasterData<CommandCodeSkillReleaseMaster>
	|-DataManager.getMasterData<CommandSpellMaster>
	|-DataManager.getMasterData<CommonConsumeMaster>
	|-DataManager.getMasterData<CommonReleaseMaster>
	|-DataManager.getMasterData<CommonRestrictionMaster>
	|-DataManager.getMasterData<CompleteMissionMaster>
	|-DataManager.getMasterData<ConstantLongMaster>
	|-DataManager.getMasterData<ConstantMaster>
	|-DataManager.getMasterData<ConstantStrMaster>
	|-DataManager.getMasterData<DialogMessageMaster>
	|-DataManager.getMasterData<EffectMaster>
	|-DataManager.getMasterData<EnemyMstBattleMaster>
	|-DataManager.getMasterData<EquipExpMaster>
	|-DataManager.getMasterData<EquipMaster>
	|-DataManager.getMasterData<EquipSkillMaster>
	|-DataManager.getMasterData<EventAddMaster>
	|-DataManager.getMasterData<EventBoardGameCellMaster>
	|-DataManager.getMasterData<EventBoardGameTokenMaster>
	|-DataManager.getMasterData<EventBoardGameTokenRewardMaster>
	|-DataManager.getMasterData<EventBonusFilterGroupInfoMaster>
	|-DataManager.getMasterData<EventBonusFilterGroupMemberMaster>
	|-DataManager.getMasterData<EventBonusFilterMaster>
	|-DataManager.getMasterData<EventBoostItemUsedMaster>
	|-DataManager.getMasterData<EventBossStatusUiMaster>
	|-DataManager.getMasterData<EventBulletinBoardMaster>
	|-DataManager.getMasterData<EventBulletinBoardReleaseMaster>
	|-DataManager.getMasterData<EventCampaignMaster>
	|-DataManager.getMasterData<EventCampaignReleaseMaster>
	|-DataManager.getMasterData<EventCombineCostumeMaster>
	|-DataManager.getMasterData<EventConquestRewardMaster>
	|-DataManager.getMasterData<EventDetailMaster>
	|-DataManager.getMasterData<EventEquipSkillReleaseMaster>
	|-DataManager.getMasterData<EventFactoryMaster>
	|-DataManager.getMasterData<EventFatigueRecoveryMaster>
	|-DataManager.getMasterData<EventFilterMaster>
	|-DataManager.getMasterData<EventGroupMaster>
	|-DataManager.getMasterData<EventItemDisplayGroupMaster>
	|-DataManager.getMasterData<EventItemDisplayMaster>
	|-DataManager.getMasterData<EventItemDisplayReleaseMaster>
	|-DataManager.getMasterData<EventLocationCampaignMaster>
	|-DataManager.getMasterData<EventMaster>
	|-DataManager.getMasterData<EventMissionActionAddMaster>
	|-DataManager.getMasterData<EventMissionActionMaster>
	|-DataManager.getMasterData<EventMissionAddMaster>
	|-DataManager.getMasterData<EventMissionCondDetailMaster>
	|-DataManager.getMasterData<EventMissionConditionMaster>
	|-DataManager.getMasterData<EventMissionMaster>
	|-DataManager.getMasterData<EventPanelMapDetailMaster>
	|-DataManager.getMasterData<EventPanelMapMaster>
	|-DataManager.getMasterData<EventPanelScanMaster>
	|-DataManager.getMasterData<EventPanelSpotMaster>
	|-DataManager.getMasterData<EventPointActivityMaster>
	|-DataManager.getMasterData<EventPointBuffMaster>
	|-DataManager.getMasterData<EventPointGroupAddMaster>
	|-DataManager.getMasterData<EventPointGroupMaster>
	|-DataManager.getMasterData<EventPointMaster>
	|-DataManager.getMasterData<EventPointUpperMaster>
	|-DataManager.getMasterData<EventPointUpperReleaseMaster>
	|-DataManager.getMasterData<EventQuestCooltimeMaster>
	|-DataManager.getMasterData<EventQuestMaster>
	|-DataManager.getMasterData<EventRaceMaster>
	|-DataManager.getMasterData<EventRaceResultMaster>
	|-DataManager.getMasterData<EventRaidMaster>
	|-DataManager.getMasterData<EventRewardBgMaster>
	|-DataManager.getMasterData<EventRewardGuideReleaseMaster>
	|-DataManager.getMasterData<EventRewardMaster>
	|-DataManager.getMasterData<EventRewardSceneMaster>
	|-DataManager.getMasterData<EventRewardSceneReleaseMaster>
	|-DataManager.getMasterData<EventScriptMaster>
	|-DataManager.getMasterData<EventScriptReleaseMaster>
	|-DataManager.getMasterData<EventServantFatigueMaster>
	|-DataManager.getMasterData<EventServantMaster>
	|-DataManager.getMasterData<EventStatusMaster>
	|-DataManager.getMasterData<EventStatusQuestMaster>
	|-DataManager.getMasterData<EventSuperBossMaster>
	|-DataManager.getMasterData<EventTowerMaster>
	|-DataManager.getMasterData<EventTowerRewardMaster>
	|-DataManager.getMasterData<EventTutorialCondMaster>
	|-DataManager.getMasterData<EventTutorialMaster>
	|-DataManager.getMasterData<EventUiMaster>
	|-DataManager.getMasterData<EventUiReleaseMaster>
	|-DataManager.getMasterData<EventUiValueMaster>
	|-DataManager.getMasterData<EventVoicePlayMaster>
	|-DataManager.getMasterData<FriendshipMaster>
	|-DataManager.getMasterData<FriendshipQuestDialogInfoMaster>
	|-DataManager.getMasterData<FunctionGroupMaster>
	|-DataManager.getMasterData<FunctionMaster>
	|-DataManager.getMasterData<GachaBehaviorMaster>
	|-DataManager.getMasterData<GachaDetailMaster>
	|-DataManager.getMasterData<GachaMaster>
	|-DataManager.getMasterData<GachaReleaseMaster>
	|-DataManager.getMasterData<GachaStoryAdjustMaster>
	|-DataManager.getMasterData<GachaSubMaster>
	|-DataManager.getMasterData<GiftAddMaster>
	|-DataManager.getMasterData<GiftMaster>
	|-DataManager.getMasterData<GuideMaster>
	|-DataManager.getMasterData<ItemMaster>
	|-DataManager.getMasterData<ItemSelectMaster>
	|-DataManager.getMasterData<LoginQuestMaster>
	|-DataManager.getMasterData<MapButtonMaster>
	|-DataManager.getMasterData<MapCondMaster>
	|-DataManager.getMasterData<MapGimmickMaster>
	|-DataManager.getMasterData<MapGimmickReleaseMaster>
	|-DataManager.getMasterData<MapMaster>
	|-DataManager.getMasterData<MaterialFolderMaster>
	|-DataManager.getMasterData<MstMissionDisplayInfoMaster>
	|-DataManager.getMasterData<MstMissionMaster>
	|-DataManager.getMasterData<NewsMaster>
	|-DataManager.getMasterData<NotEndEventMissionFixMaster>
	|-DataManager.getMasterData<NpcFollowerMaster>
	|-DataManager.getMasterData<NpcFollowerReleaseMaster>
	|-DataManager.getMasterData<NpcServantEquipMaster>
	|-DataManager.getMasterData<NpcServantFollowerMaster>
	|-DataManager.getMasterData<OpeningMovieMaster>
	|-DataManager.getMasterData<OtherUserGameMaster>
	|-DataManager.getMasterData<PartialMaintenanceMaster>
	|-DataManager.getMasterData<PickupUserFollowerMaster>
	|-DataManager.getMasterData<PrivilegeMaster>
	|-DataManager.getMasterData<QuestBehaviorMaster>
	|-DataManager.getMasterData<QuestConsumeItemMaster>
	|-DataManager.getMasterData<QuestDateRangeMaster>
	|-DataManager.getMasterData<QuestGroupMaster>
	|-DataManager.getMasterData<QuestMaster>
	|-DataManager.getMasterData<QuestMessageMaster>
	|-DataManager.getMasterData<QuestPhaseDetailAddMaster>
	|-DataManager.getMasterData<QuestPhaseDetailMaster>
	|-DataManager.getMasterData<QuestPhaseMaster>
	|-DataManager.getMasterData<QuestPickupMaster>
	|-DataManager.getMasterData<QuestRacePointMaster>
	|-DataManager.getMasterData<QuestRandomGroupMaster>
	|-DataManager.getMasterData<QuestReleaseMaster>
	|-DataManager.getMasterData<QuestResetMaster>
	|-DataManager.getMasterData<QuestRestrictionInfoMaster>
	|-DataManager.getMasterData<QuestRestrictionMaster>
	|-DataManager.getMasterData<QuestScriptMaster>
	|-DataManager.getMasterData<QuestScriptReleaseMaster>
	|-DataManager.getMasterData<QuestSpotReleaseMaster>
	|-DataManager.getMasterData<RecoverMaster>
	|-DataManager.getMasterData<RestrictionMaster>
	|-DataManager.getMasterData<ServantAnimationOverwriteMaster>
	|-DataManager.getMasterData<ServantChangeMaster>
	|-DataManager.getMasterData<ServantClassMaster>
	|-DataManager.getMasterData<ServantCollectionMaster>
	|-DataManager.getMasterData<ServantCommandCodeUnlockMaster>
	|-DataManager.getMasterData<ServantCommentAddMaster>
	|-DataManager.getMasterData<ServantCommentMaster>
	|-DataManager.getMasterData<ServantCostumeMaster>
	|-DataManager.getMasterData<ServantCostumeReleaseMaster>
	|-DataManager.getMasterData<ServantExceedMaster>
	|-DataManager.getMasterData<ServantExpMaster>
	|-DataManager.getMasterData<ServantFilterMaster>
	|-DataManager.getMasterData<ServantFlagMaster>
	|-DataManager.getMasterData<ServantFlagReleaseMaster>
	|-DataManager.getMasterData<ServantGroupMaster>
	|-DataManager.getMasterData<ServantLimitAddMaster>
	|-DataManager.getMasterData<ServantLimitImageMaster>
	|-DataManager.getMasterData<ServantLimitMaster>
	|-DataManager.getMasterData<ServantLimitSpoilerProtectionMaster>
	|-DataManager.getMasterData<ServantLvDetailMaster>
	|-DataManager.getMasterData<ServantMaster>
	|-DataManager.getMasterData<ServantMaterialFolderMaster>
	|-DataManager.getMasterData<ServantPassiveSkillMaster>
	|-DataManager.getMasterData<ServantPassiveSkillReleaseMaster>
	|-DataManager.getMasterData<ServantProfileMaster>
	|-DataManager.getMasterData<ServantRarityMaster>
	|-DataManager.getMasterData<ServantScriptAddMaster>
	|-DataManager.getMasterData<ServantScriptMaster>
	|-DataManager.getMasterData<ServantSkillMaster>
	|-DataManager.getMasterData<ServantSkillReleaseMaster>
	|-DataManager.getMasterData<ServantTreasureDeviceAddMaster>
	|-DataManager.getMasterData<ServantTreasureDeviceDamageMaster>
	|-DataManager.getMasterData<ServantTreasureDeviceReleaseMaster>
	|-DataManager.getMasterData<ServantTreasureDvcMaster>
	|-DataManager.getMasterData<ServantVoiceMaster>
	|-DataManager.getMasterData<ServantVoiceRelationMaster>
	|-DataManager.getMasterData<SetItemMaster>
	|-DataManager.getMasterData<ShopActionMaster>
	|-DataManager.getMasterData<ShopDetailMaster>
	|-DataManager.getMasterData<ShopGroupMaster>
	|-DataManager.getMasterData<ShopMaster>
	|-DataManager.getMasterData<ShopReleaseMaster>
	|-DataManager.getMasterData<ShopScriptMaster>
	|-DataManager.getMasterData<SkillAddMaster>
	|-DataManager.getMasterData<SkillDetailMaster>
	|-DataManager.getMasterData<SkillLvMaster>
	|-DataManager.getMasterData<SkillMaster>
	|-DataManager.getMasterData<SpotAddMaster>
	|-DataManager.getMasterData<SpotImageMaster>
	|-DataManager.getMasterData<SpotMaster>
	|-DataManager.getMasterData<SpotPathMaster>
	|-DataManager.getMasterData<SpotRoadMaster>
	|-DataManager.getMasterData<StatusEffectPosOverwriteMaster>
	|-DataManager.getMasterData<StoneShopMaster>
	|-DataManager.getMasterData<object>
	|-DataManager.getMasterData<TblFriendMaster>
	|-DataManager.getMasterData<TblUserMaster>
	|-DataManager.getMasterData<TipsBattleMaster>
	|-DataManager.getMasterData<TotalBoxGachaMaster>
	|-DataManager.getMasterData<TotalEventPointMaster>
	|-DataManager.getMasterData<TotalEventRaceMaster>
	|-DataManager.getMasterData<TotalEventRaidMaster>
	|-DataManager.getMasterData<TotalLoginMaster>
	|-DataManager.getMasterData<TreasureDvcDetailMaster>
	|-DataManager.getMasterData<TreasureDvcLvMaster>
	|-DataManager.getMasterData<TreasureDvcMaster>
	|-DataManager.getMasterData<UserBlacklistMaster>
	|-DataManager.getMasterData<UserBoxGachaMaster>
	|-DataManager.getMasterData<UserCombineExpMaster>
	|-DataManager.getMasterData<UserCommandCodeCollectionMaster>
	|-DataManager.getMasterData<UserCommandCodeMaster>
	|-DataManager.getMasterData<UserContinueMaster>
	|-DataManager.getMasterData<UserDeckMaster>
	|-DataManager.getMasterData<UserEquipMaster>
	|-DataManager.getMasterData<UserEventBoardGameTokenMaster>
	|-DataManager.getMasterData<UserEventDeckMaster>
	|-DataManager.getMasterData<UserEventMapMaster>
	|-DataManager.getMasterData<UserEventMaster>
	|-DataManager.getMasterData<UserEventMissionCondDetailMaster>
	|-DataManager.getMasterData<UserEventMissionFixMaster>
	|-DataManager.getMasterData<UserEventMissionMaster>
	|-DataManager.getMasterData<UserEventPointMaster>
	|-DataManager.getMasterData<UserEventQuestCooltimeMaster>
	|-DataManager.getMasterData<UserEventRaceMaster>
	|-DataManager.getMasterData<UserEventRaidMaster>
	|-DataManager.getMasterData<UserEventServantFatigueMaster>
	|-DataManager.getMasterData<UserEventSpotMaster>
	|-DataManager.getMasterData<UserExpMaster>
	|-DataManager.getMasterData<UserFollowMaster>
	|-DataManager.getMasterData<UserFollowerMaster>
	|-DataManager.getMasterData<UserFriendRequestHistoryMaster>
	|-DataManager.getMasterData<UserGachaExtraCountMaster>
	|-DataManager.getMasterData<UserGachaMaster>
	|-DataManager.getMasterData<UserGameMaster>
	|-DataManager.getMasterData<UserItemMaster>
	|-DataManager.getMasterData<UserPresentBoxMaster>
	|-DataManager.getMasterData<UserPresentHistoryMaster>
	|-DataManager.getMasterData<UserPrivilegeMaster>
	|-DataManager.getMasterData<UserProfileMaster>
	|-DataManager.getMasterData<UserQuestInfoMaster>
	|-DataManager.getMasterData<UserQuestMaster>
	|-DataManager.getMasterData<UserQuestRecordMaster>
	|-DataManager.getMasterData<UserQuestRouteMaster>
	|-DataManager.getMasterData<UserServantCollectionMaster>
	|-DataManager.getMasterData<UserServantCommandCardMaster>
	|-DataManager.getMasterData<UserServantCommandCodeMaster>
	|-DataManager.getMasterData<UserServantLeaderMaster>
	|-DataManager.getMasterData<UserServantMaster>
	|-DataManager.getMasterData<UserServantStorageMaster>
	|-DataManager.getMasterData<UserShopMaster>
	|-DataManager.getMasterData<UserSuperBossMaster>
	|-DataManager.getMasterData<UserSupportDeckMaster>
	|-DataManager.getMasterData<ViewEnemyMaster>
	|-DataManager.getMasterData<ViewQuestInfoMaster>
	|-DataManager.getMasterData<VoiceClosedMessageMaster>
	|-DataManager.getMasterData<VoiceCondMaster>
	|-DataManager.getMasterData<VoiceMaster>
	|-DataManager.getMasterData<VoiceMaterialCondMaster>
	|-DataManager.getMasterData<VoicePlayCondMaster>
	|-DataManager.getMasterData<VoicePlayGroupMaster>
	|-DataManager.getMasterData<VoiceReleaseMaster>
