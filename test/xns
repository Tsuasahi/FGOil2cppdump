	// RVA: 0x13FCB6C Offset: 0x13FCB6C VA: 0x13FCB6C
	private void <OpenViewLocal>m__2(string msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E08 Offset: 0xCC9E08 VA: 0xCC9E08
	// RVA: 0x13FCB74 Offset: 0x13FCB74 VA: 0x13FCB74
	private void <OpenViewLocal>m__3(string msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E18 Offset: 0xCC9E18 VA: 0xCC9E18
	// RVA: 0x13FCB78 Offset: 0x13FCB78 VA: 0x13FCB78
	private void <OpenViewLocal>m__4(string msg) { }
}

// Namespace: 
public class Bezier // TypeDefIndex: 6574
{
	// Methods

	// RVA: 0x19A538C Offset: 0x19A538C VA: 0x19A538C
	public void .ctor() { }

	// RVA: 0x19A5394 Offset: 0x19A5394 VA: 0x19A5394
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t) { }

	// RVA: 0x19A54AC Offset: 0x19A54AC VA: 0x19A54AC
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) { }

	// RVA: 0x19A56A4 Offset: 0x19A56A4 VA: 0x19A56A4
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t) { }

	// RVA: 0x19A5800 Offset: 0x19A5800 VA: 0x19A5800
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) { }
}

// Namespace: 
public enum BezierControlPointMode // TypeDefIndex: 6575
{
	// Fields
	public int value__; // 0x0
	public const BezierControlPointMode Free = 0;
	public const BezierControlPointMode Aligned = 1;
	public const BezierControlPointMode Mirrored = 2;
}

// Namespace: 
public class Custom2dSplineMesh : MonoBehaviour // TypeDefIndex: 6576
{
	// Fields
	private static float JUMP_THRESH_HOLD; // 0x0
	[SerializeField] // RVA: 0xC55314 Offset: 0xC55314 VA: 0xC55314
	[HideInInspector] // RVA: 0xC55314 Offset: 0xC55314 VA: 0xC55314
	public Vector3[] points; // 0x18
	[SerializeField] // RVA: 0xC5534C Offset: 0xC5534C VA: 0xC5534C
	private BezierControlPointMode[] modes; // 0x20
	[SerializeField] // RVA: 0xC5535C Offset: 0xC5535C VA: 0xC5535C
	private float[] curveWeight; // 0x28
	public Vector3 PointOffset; // 0x30
	private float PathRate; // 0x3C
	public Custom2dSplineMesh.FlattenAxis flattenAxis; // 0x40
	public bool FlipMesh; // 0x44
	public bool DrawPath; // 0x45
	public bool ResetOnUpdate; // 0x46
	public float UVrate; // 0x48
	public float UVslice; // 0x4C
	public float complexity; // 0x50
	public float directionChange; // 0x54
	public bool createVertsEveryStep; // 0x58
	public float DrawWidth; // 0x5C
	public bool flattenAxisAsWidthVariable; // 0x60
	public float AxisWidthOffset; // 0x64
	public bool DrawCap; // 0x68
	public bool CutOnFreePoint; // 0x69
	public bool StrictUVmode; // 0x6A
	public int CapComplexity; // 0x6C
	private Mesh drawMesh; // 0x70
	private MeshFilter meshFilter; // 0x78
	private List<Vector3> splinePos; // 0x80
	private float capVmin; // 0x88
	private float capVmax; // 0x8C
	private float lineVmin; // 0x90
	private float lineVmax; // 0x94
	private List<Vector3> verts; // 0x98
	private List<int> trianges; // 0xA0
	private List<Vector2> uvs; // 0xA8
	private int vtxIdx; // 0xB0

	// Properties
	public int CurveCount { get; }
	public int ControlPointCount { get; }

	// Methods

	// RVA: 0x1468C80 Offset: 0x1468C80 VA: 0x1468C80
	public void .ctor() { }

	// RVA: 0x1468D18 Offset: 0x1468D18 VA: 0x1468D18
	public int get_CurveCount() { }

	// RVA: 0x1468D60 Offset: 0x1468D60 VA: 0x1468D60
	public int get_ControlPointCount() { }

	// RVA: 0x1468D8C Offset: 0x1468D8C VA: 0x1468D8C
	public Vector3 GetControlPoint(int index) { }

	// RVA: 0x1468DE8 Offset: 0x1468DE8 VA: 0x1468DE8
	public BezierControlPointMode GetControlPointMode(int index) { }

	// RVA: 0x1468E58 Offset: 0x1468E58 VA: 0x1468E58
	public void SetControlPoint(int index, Vector3 point) { }

	// RVA: 0x14694EC Offset: 0x14694EC VA: 0x14694EC
	public void SetControlPointMode(int index, BezierControlPointMode mode) { }

	// RVA: 0x1469124 Offset: 0x1469124 VA: 0x1469124
	private void EnforceMode(int index) { }

	// RVA: 0x146957C Offset: 0x146957C VA: 0x146957C
	public void Reset() { }

	// RVA: 0x1469770 Offset: 0x1469770 VA: 0x1469770
	public float GetTotalWeight() { }

	// RVA: 0x14699D4 Offset: 0x14699D4 VA: 0x14699D4
	public float GetCurveWeight(int index) { }

	// RVA: 0x146980C Offset: 0x146980C VA: 0x146980C
	private void checkWeightNull() { }

	// RVA: 0x1469A48 Offset: 0x1469A48 VA: 0x1469A48
	public void ChangeWeight(int index, float value) { }

	// RVA: 0x1469AD8 Offset: 0x1469AD8 VA: 0x1469AD8
	public int AddCurve(int index) { }

	// RVA: 0x146A630 Offset: 0x146A630 VA: 0x146A630
	public void DeletePoint(int index) { }

	// RVA: 0x146A914 Offset: 0x146A914 VA: 0x146A914
	public Vector3 GetPoint(float t) { }

	// RVA: 0x146AC20 Offset: 0x146AC20 VA: 0x146AC20
	public Vector3 GetPointAsWorld(float t) { }

	// RVA: 0x146AD18 Offset: 0x146AD18 VA: 0x146AD18
	public Vector3 GetPointAsWorldFlatten(float t) { }

	// RVA: 0x146AE74 Offset: 0x146AE74 VA: 0x146AE74
	public Vector3 GetVelocity(float t) { }

	// RVA: 0x146B108 Offset: 0x146B108 VA: 0x146B108
	public Vector3 GetDirection(float t) { }

	// RVA: 0x146AAC0 Offset: 0x146AAC0 VA: 0x146AAC0
	private int GetWeightedPointIdxAndT(float t, out float innerT) { }

	// RVA: 0x146B138 Offset: 0x146B138 VA: 0x146B138
	private void Start() { }

	// RVA: 0x146C58C Offset: 0x146C58C VA: 0x146C58C
	private void Update() { }

	// RVA: 0x146C7CC Offset: 0x146C7CC VA: 0x146C7CC
	private void OnDestroy() { }

	// RVA: 0x146C874 Offset: 0x146C874 VA: 0x146C874
	public void SetPathRate(float pRate) { }

	// RVA: 0x146C87C Offset: 0x146C87C VA: 0x146C87C
	public float GetPathRate() { }

	// RVA: 0x146B1B0 Offset: 0x146B1B0 VA: 0x146B1B0
	private void SetList() { }

	// RVA: 0x146C884 Offset: 0x146C884 VA: 0x146C884
	public void DrawOnUI() { }

	// RVA: 0x146C888 Offset: 0x146C888 VA: 0x146C888
	public void CreateMesh() { }

	// RVA: 0x146C900 Offset: 0x146C900 VA: 0x146C900
	public void RemoveMesh() { }

	// RVA: 0x146C934 Offset: 0x146C934 VA: 0x146C934
	private Vector3 upVec() { }

	// RVA: 0x146C99C Offset: 0x146C99C VA: 0x146C99C
	private Vector3 GetOffset(float rate) { }

	// RVA: 0x146CC30 Offset: 0x146CC30 VA: 0x146CC30
	private Vector3 RotateVec3(float angleDegree, Vector3 org) { }

	// RVA: 0x146CB90 Offset: 0x146CB90 VA: 0x146CB90
	private float GetWidth(float rate) { }

	// RVA: 0x146AE44 Offset: 0x146AE44 VA: 0x146AE44
	private Vector3 GetFlatten(Vector3 org) { }

	// RVA: 0x146CD78 Offset: 0x146CD78 VA: 0x146CD78
	private Vector2 GetUV(Vector3 pos, float coordU, float coordV) { }

	// RVA: 0x146CDC0 Offset: 0x146CDC0 VA: 0x146CDC0
	private Vector2 GetUV(Vector3 pos) { }

	// RVA: 0x146CED8 Offset: 0x146CED8 VA: 0x146CED8
	private bool isJumpcut(float now, float increment, out float jumps) { }

	// RVA: 0x146B23C Offset: 0x146B23C VA: 0x146B23C
	private void GenMesh() { }

	// RVA: 0x146CFF0 Offset: 0x146CFF0 VA: 0x146CFF0
	private void AddCap(Vector3 pos, Vector3 normalizedDir, Vector3 offset, float width, bool isTail) { }

	// RVA: 0x146E494 Offset: 0x146E494 VA: 0x146E494
	private static void .cctor() { }
}

// Namespace: 
public enum Custom2dSplineMesh.FlattenAxis // TypeDefIndex: 6577
{
	// Fields
	public int value__; // 0x0
	public const Custom2dSplineMesh.FlattenAxis X = 0;
	public const Custom2dSplineMesh.FlattenAxis Y = 1;
	public const Custom2dSplineMesh.FlattenAxis Z = 2;
}

// Namespace: 
public class AppendPassiveSkillInfo // TypeDefIndex: 6578
{
	// Fields
	public int skillId; // 0x10
	public int skillLv; // 0x14

	// Methods

	// RVA: 0x107B42C Offset: 0x107B42C VA: 0x107B42C
	public void .ctor() { }
}

// Namespace: 
public class BattleInfoData // TypeDefIndex: 6579
{
	// Fields
	public int dataVer; // 0x10
	public string appVer; // 0x18
	public int targetUserSvtId; // 0x20
	public int userEquipId; // 0x24
	public bool useEventEquip; // 0x28
	public DeckData myDeck; // 0x30
	public DeckData[] enemyDeck; // 0x38
	public BattleRaidInfo[] raidInfo; // 0x40
	public BattleRaidInfo[] startRaidInfo; // 0x48
	public BattleSuperBossInfo[] superBossInfo; // 0x50
	public BattleWarBoardInfo warBoardBattleInfo; // 0x58
	public UserFormationData userFormation; // 0x60
	public BattleUserServantData[] userSvt; // 0x68
	public DeckData transformDeck; // 0x70
	public DeckData[] callDeck; // 0x78
	public DeckData[] shiftDeck; // 0x80
	public DeckData aiNpcDeck; // 0x88
	public int friendId; // 0x90
	public int id; // 0x94
	public bool isCompress; // 0x98
	public string resultInfo; // 0xA0
	public string resultInfoBlob; // 0xA8
	public int targetId; // 0xB0
	public int useOrderCnt; // 0xB4
	public int useOrderMax; // 0xB8
	public int userId; // 0xBC
	public int blankCardCnt; // 0xC0
	public int groundNo; // 0xC4
	public BattleInfoData.UsedBoostItem[] boostItems; // 0xC8
	private BaseBattleServantEvent servantEvent; // 0xD0
	public BattleInfoData.UsedBoost[] boosts; // 0xD8

	// Properties
	public BattleDeckServantData[] AiNpcDeckSvts { get; }

	// Methods

	// RVA: 0x1131558 Offset: 0x1131558 VA: 0x1131558
	public void .ctor() { }

	// RVA: 0x11315C0 Offset: 0x11315C0 VA: 0x11315C0
	public BattleDeckServantData[] get_AiNpcDeckSvts() { }

	// RVA: 0x113162C Offset: 0x113162C VA: 0x113162C
	public void SetServantEvent(BaseBattleServantEvent svtEvent) { }

	// RVA: 0x1131634 Offset: 0x1131634 VA: 0x1131634
	public BaseBattleServantEvent GetServantEvent() { }

	// RVA: 0x11316A0 Offset: 0x11316A0 VA: 0x11316A0
	public BattleUserServantData getUserServantFromID(long usersvtid) { }

	// RVA: 0x11317F8 Offset: 0x11317F8 VA: 0x11317F8
	public BattleUserServantData getEquipFromID(long usersvtid) { }

	// RVA: 0x1131950 Offset: 0x1131950 VA: 0x1131950
	public DeckData getEnemyDeck(int battlecount) { }

	// RVA: 0x11319A4 Offset: 0x11319A4 VA: 0x11319A4
	public bool isNextBattle(int battlecount) { }

	// RVA: 0x11319E0 Offset: 0x11319E0 VA: 0x11319E0
	public bool isLastStage(int wavecount) { }

	// RVA: 0x1131A1C Offset: 0x1131A1C VA: 0x1131A1C
	public int getLastWave() { }

	// RVA: 0x1131A4C Offset: 0x1131A4C VA: 0x1131A4C
	public int getGroundNo() { }

	// RVA: 0x1131A54 Offset: 0x1131A54 VA: 0x1131A54
	public int[] getBoostSKillIds() { }

	// RVA: 0x1131B68 Offset: 0x1131B68 VA: 0x1131B68
	public int getBoostItemImageId(int index, bool reboot = False) { }

	// RVA: 0x1131CEC Offset: 0x1131CEC VA: 0x1131CEC
	public BattleBoostItem[] getBattleBoostItemList(bool reboot = False) { }

	// RVA: 0x1131F8C Offset: 0x1131F8C VA: 0x1131F8C
	public int getRaidDay(int uniqueId) { }

	// RVA: 0x113201C Offset: 0x113201C VA: 0x113201C
	public long getRaidBossMaxHp(int raidId) { }

	// RVA: 0x11320AC Offset: 0x11320AC VA: 0x11320AC
	public BattleRaidInfo getMyInfo(int day) { }

	// RVA: 0x113213C Offset: 0x113213C VA: 0x113213C
	public string getStartRaidState(int eventId, int raidId) { }

	// RVA: 0x1132360 Offset: 0x1132360 VA: 0x1132360
	public BattleDeckServantData getTransformDeckServantData(int uniqueId, int trIndex) { }

	// RVA: 0x1132418 Offset: 0x1132418 VA: 0x1132418
	public BattleDeckServantData getDeckServantData(int uniqueId) { }

	// RVA: 0x11324B8 Offset: 0x11324B8 VA: 0x11324B8
	public BattleDeckServantData getEnemyDeckServantData(int uniqueId) { }

	// RVA: 0x11325A8 Offset: 0x11325A8 VA: 0x11325A8
	public long getSuperBossMaxHp(int id) { }

	// RVA: 0x1132638 Offset: 0x1132638 VA: 0x1132638
	public long getSuperBossNokoriHp(int id) { }

	// RVA: 0x11326CC Offset: 0x11326CC VA: 0x11326CC
	public BattleDeckServantData getSummonServantData(int npcId) { }

	// RVA: 0x11327BC Offset: 0x11327BC VA: 0x11327BC
	public BattleDeckServantData getShiftServantData(int npcId) { }

	// RVA: 0x11328AC Offset: 0x11328AC VA: 0x11328AC
	public BattleDeckServantData getDefaultServantData(int uniqueId) { }

	// RVA: 0x113299C Offset: 0x113299C VA: 0x113299C
	public int getLastUniqueID() { }

	// RVA: 0x1132A84 Offset: 0x1132A84 VA: 0x1132A84
	public int getRaidId() { }

	// RVA: 0x1132B90 Offset: 0x1132B90 VA: 0x1132B90
	public int[] getAliveEnemys(int nowWaveCount, int[] nowWaveAliveEnemys) { }

	// RVA: 0x1132DAC Offset: 0x1132DAC VA: 0x1132DAC
	public int[] getBoostSkillArray() { }
}

// Namespace: 
public class BattleInfoData.UsedBoostItem // TypeDefIndex: 6580
{
	// Fields
	public int itemId; // 0x10
	public int skillId; // 0x14

	// Methods

	// RVA: 0x1132F04 Offset: 0x1132F04 VA: 0x1132F04
	public void .ctor() { }
}

// Namespace: 
public class BattleInfoData.UsedBoost // TypeDefIndex: 6581
{
	// Fields
	public int boostId; // 0x10
	public int skillId; // 0x14

	// Methods

	// RVA: 0x1132EFC Offset: 0x1132EFC VA: 0x1132EFC
	public void .ctor() { }
}

// Namespace: 
public class BattleSetupInfo // TypeDefIndex: 6582
{
	// Fields
	public int warId; // 0x10
	public int questId; // 0x14
	public int questPhase; // 0x18
	public long deckId; // 0x20
	public long followerId; // 0x28
	public int followerClassId; // 0x30
	public int itemId; // 0x34
	public int boostId; // 0x38
	public long userEquipId; // 0x40
	public bool isQuestNew; // 0x48
	public bool isScriptBeforePartySelect; // 0x49
	public bool isChildFollower; // 0x4A
	public int eventId; // 0x4C
	public EventUpValSetupInfo eventUpValSetupInfo; // 0x50
	public QuestRestrictionInfo questRestrictionInfo; // 0x58
	public bool battleBefore; // 0x60
	public bool isBefore; // 0x61
	public string demoInfo; // 0x68
	public int[] selectableQuestIds; // 0x70
	public int selectableRouteQuestId; // 0x78
	public int selectedBranchIdx; // 0x7C
	public int followerType; // 0x80
	public int originQuestId; // 0x84
	public int followrRandomLimitCount; // 0x88
	public string choiceRandomLimitCounts; // 0x90
	public bool isScriptBeforeWarBoard; // 0x98
	public int followerSupportDeckId; // 0x9C
	public int campaignItemId; // 0xA0

	// Methods

	// RVA: 0x156D064 Offset: 0x156D064 VA: 0x156D064
	public void .ctor() { }

	// RVA: 0x156D06C Offset: 0x156D06C VA: 0x156D06C
	public void .ctor(BattleSetupInfo.BattleSetupSaveInfo saveInfo) { }

	// RVA: 0x156D73C Offset: 0x156D73C VA: 0x156D73C
	public BattleSetupInfo.BattleSetupSaveInfo GetInfoForSave() { }

	// RVA: 0x156DA24 Offset: 0x156DA24 VA: 0x156DA24
	public int TargetQuestId() { }

	// RVA: 0x156DA8C Offset: 0x156DA8C VA: 0x156DA8C
	public int TargetQuestBranchIdx() { }

	// RVA: 0x156D348 Offset: 0x156D348 VA: 0x156D348
	public void SetEventUpValues() { }

	// RVA: 0x156D44C Offset: 0x156D44C VA: 0x156D44C
	public void SetRestriction(bool isResetDeck = False) { }

	// RVA: 0x156D5D8 Offset: 0x156D5D8 VA: 0x156D5D8
	public void SetSelectableQuests() { }

	// RVA: 0x156DAB0 Offset: 0x156DAB0 VA: 0x156DAB0
	public BattleSetupInfo ConvertBattleSetupInfo(int warId, int qId, int qPhase, bool isScriptBeforePartySelect, bool isScriptBeforeWarBoard, int selectedBranch = 0) { }
}

// Namespace: 
public class BattleSetupInfo.BattleSetupSaveInfo // TypeDefIndex: 6583
{
	// Fields
	public int warId; // 0x10
	public int questId; // 0x14
	public int questPhase; // 0x18
	public long deckId; // 0x20
	public long followerId; // 0x28
	public int followerClassId; // 0x30
	public int itemId; // 0x34
	public int boostId; // 0x38
	public long userEquipId; // 0x40
	public bool isQuestNew; // 0x48
	public bool isScriptBeforePartySelect; // 0x49
	public bool isChildFollower; // 0x4A
	public int eventId; // 0x4C
	public bool battleBefore; // 0x50
	public bool isBefore; // 0x51
	public string demoInfo; // 0x58
	public int selectedBranchIdx; // 0x60
	public int followerType; // 0x64
	public int originQuestId; // 0x68
	public int followrRandomLimitCount; // 0x6C
	public string choiceRandomLimitCounts; // 0x70
	public bool isScriptBeforeWarBoard; // 0x78
	public int followerSupportDeckId; // 0x7C
	public int campaignItemId; // 0x80

	// Methods

	// RVA: 0x156DA1C Offset: 0x156DA1C VA: 0x156DA1C
	public void .ctor() { }
}

// Namespace: 
public class BattleUserServantData : UserServantEntity // TypeDefIndex: 6584
{
	// Fields
	public int recover; // 0x138
	public int chargeTurn; // 0x13C
	public int skillId1; // 0x140
	public int skillId2; // 0x144
	public int skillId3; // 0x148
	public int treasureDeviceId; // 0x14C
	public int treasureDeviceLv; // 0x150
	public int criticalRate; // 0x154
	public int aiId; // 0x158
	public int actPriority; // 0x15C
	public int maxActNum; // 0x160
	public int minActNum; // 0x164
	public int displayType; // 0x168
	public int npcSvtType; // 0x16C
	public int starRate; // 0x170
	public int tdRate; // 0x174
	public int deathRate; // 0x178
	public int[] individuality; // 0x180
	public int[] passiveSkill; // 0x188
	public int[] addPassive; // 0x190
	public int[] addPassiveLvs; // 0x198
	public int[] classPassive; // 0x1A0
	public long equipTargetId1; // 0x1A8
	public long[] equipTargetIds; // 0x1B0
	public int npcSvtClassId; // 0x1B8
	public int overwriteSvtId; // 0x1BC
	public long[] userCommandCodeIds; // 0x1C0
	public int[] commandCardParam; // 0x1C8
	public int tdAttackRate; // 0x1D0
	public int afterLimitCount; // 0x1D4
	public int afterIconLimitCount; // 0x1D8
	public int[] appendPassiveSkillIds; // 0x1E0
	public int[] appendPassiveSkillLvs; // 0x1E8
	public int imageSvtId; // 0x1F0

	// Methods

	// RVA: 0x1573FB0 Offset: 0x1573FB0 VA: 0x1573FB0
	public void .ctor() { }

	// RVA: 0x1574018 Offset: 0x1574018 VA: 0x1574018
	public int getBattleSvtId() { }

	// RVA: 0x15740E0 Offset: 0x15740E0 VA: 0x15740E0
	public int[] getBattleSkillIdList() { }

	// RVA: 0x15741DC Offset: 0x15741DC VA: 0x15741DC
	public int[] getAddPassiveSkill() { }

	// RVA: 0x1574240 Offset: 0x1574240 VA: 0x1574240
	public SimpleSkillData[] GetAddPassiveSkillArray() { }

	// RVA: 0x157440C Offset: 0x157440C VA: 0x157440C
	public long[] getBattleEquipTargetList() { }

	// RVA: 0x15744C0 Offset: 0x15744C0 VA: 0x15744C0
	public int[] getClassPassive() { }

	// RVA: 0x15744C8 Offset: 0x15744C8 VA: 0x15744C8
	public SimpleSkillData[] GetAppendPassiveSkillArray() { }

	// RVA: 0x15742D0 Offset: 0x15742D0 VA: 0x15742D0
	protected SimpleSkillData[] MakeSimpleSkillArray(int[] skillIds, int[] skillLvs) { }
}

// Namespace: 
public class CommandCodeStatus // TypeDefIndex: 6585
{
	// Fields
	public int idx; // 0x10
	public long userCommandCodeId; // 0x18
	public ObscuredInt commandCodeId; // 0x20

	// Methods

	// RVA: 0x1663190 Offset: 0x1663190 VA: 0x1663190
	public void .ctor() { }
}

// Namespace: 
public static class CommonConsumeDetail // TypeDefIndex: 6586
{
	// Properties
	private static CommonConsumeMaster commonConusmeMaster { get; }
	private static ItemMaster itemMaster { get; }
	private static UserItemMaster userItemMaster { get; }

	// Methods

	// RVA: 0xF2D97C Offset: 0xF2D97C VA: 0xF2D97C
	private static CommonConsumeMaster get_commonConusmeMaster() { }

	// RVA: 0xF2D9E8 Offset: 0xF2D9E8 VA: 0xF2D9E8
	private static ItemMaster get_itemMaster() { }

	// RVA: 0xF2DA54 Offset: 0xF2DA54 VA: 0xF2DA54
	private static UserItemMaster get_userItemMaster() { }

	// RVA: 0xF2DAC0 Offset: 0xF2DAC0 VA: 0xF2DAC0
	public static CommonConsumeDetailInfo[] GetConsumeDetailInfoByConsumeId(int commonConsumeId) { }

	// RVA: 0xF2DFB8 Offset: 0xF2DFB8 VA: 0xF2DFB8
	public static string GetConsumeDetailDescription(CommonConsumeDetailInfo[] consumeItemInfoArray) { }

	// RVA: 0xF2E264 Offset: 0xF2E264 VA: 0xF2E264
	public static bool IsAllSatisfied(CommonConsumeDetailInfo[] consumeItemInfoArray) { }
}

// Namespace: 
public class CommonConsumeDetailInfo // TypeDefIndex: 6587
{
	// Fields
	public CommonConsumeEntity CommonConsumeEntity; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC5536C Offset: 0xC5536C VA: 0xC5536C
	[DebuggerBrowsableAttribute] // RVA: 0xC5536C Offset: 0xC5536C VA: 0xC5536C
	private string <Name>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC553A8 Offset: 0xC553A8 VA: 0xC553A8
	[DebuggerBrowsableAttribute] // RVA: 0xC553A8 Offset: 0xC553A8 VA: 0xC553A8
	private int <Num>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC553E4 Offset: 0xC553E4 VA: 0xC553E4
	[DebuggerBrowsableAttribute] // RVA: 0xC553E4 Offset: 0xC553E4 VA: 0xC553E4
	private bool <IsOwnedEnoughly>k__BackingField; // 0x24
	private object targetEntity; // 0x28
	private object userOwnStatusEntity; // 0x30

	// Properties
	public string Name { get; set; }
	public int Num { get; set; }
	public bool IsOwnedEnoughly { get; set; }

	// Methods

	// RVA: 0xF2DF48 Offset: 0xF2DF48 VA: 0xF2DF48
	public void .ctor(CommonConsumeEntity commonConsumeEntity, object targetEntity, object userOwnStatusEntity) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E28 Offset: 0xCC9E28 VA: 0xCC9E28
	// RVA: 0xF2E254 Offset: 0xF2E254 VA: 0xF2E254
	public string get_Name() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E38 Offset: 0xCC9E38 VA: 0xCC9E38
	// RVA: 0xF2E3A4 Offset: 0xF2E3A4 VA: 0xF2E3A4
	private void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E48 Offset: 0xCC9E48 VA: 0xCC9E48
	// RVA: 0xF2E25C Offset: 0xF2E25C VA: 0xF2E25C
	public int get_Num() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E58 Offset: 0xCC9E58 VA: 0xCC9E58
	// RVA: 0xF2E2EC Offset: 0xF2E2EC VA: 0xF2E2EC
	private void set_Num(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E68 Offset: 0xCC9E68 VA: 0xCC9E68
	// RVA: 0xF2E24C Offset: 0xF2E24C VA: 0xF2E24C
	public bool get_IsOwnedEnoughly() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC9E78 Offset: 0xCC9E78 VA: 0xCC9E78
	// RVA: 0xF2E480 Offset: 0xF2E480 VA: 0xF2E480
	private void set_IsOwnedEnoughly(bool value) { }

	// RVA: 0xF2E2F4 Offset: 0xF2E2F4 VA: 0xF2E2F4
	private string GetTargetName() { }

	// RVA: 0xF2E3AC Offset: 0xF2E3AC VA: 0xF2E3AC
	private bool CheckIsOwnedEnoughly() { }
}

// Namespace: 
public static class CommonReleaseExtension // TypeDefIndex: 6588
{
	// Properties
	private static CommonReleaseMaster master { get; }

	// Methods

	// RVA: 0xF3CAB8 Offset: 0xF3CAB8 VA: 0xF3CAB8
	private static CommonReleaseMaster get_master() { }

	// RVA: 0xF3CB24 Offset: 0xF3CB24 VA: 0xF3CB24
	public static bool IsOpenConsiderBeforeClearQuest(int commonReleaseId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }
}

// Namespace: 
private class CommonReleaseExtension.CommonReleaseCondOverwriterBase : CommonReleaseCondOverwriter // TypeDefIndex: 6589
{
	// Methods

	// RVA: 0xF3CD1C Offset: 0xF3CD1C VA: 0xF3CD1C
	public void .ctor() { }

	// RVA: 0xF3CD24 Offset: 0xF3CD24 VA: 0xF3CD24 Slot: 5
	public virtual bool IsOpen(CommonReleaseEntity entity) { }
}

// Namespace: 
private class CommonReleaseExtension.CommonReleaseCondOverwriterBeforeClearQuest : CommonReleaseExtension.CommonReleaseCondOverwriterBase, CommonReleaseCondOverwriter // TypeDefIndex: 6590
{
	// Fields
	private int beforeClearQuestId; // 0x10
	private bool isCheckResetFlag; // 0x14

	// Methods

	// RVA: 0xF3CBB8 Offset: 0xF3CBB8 VA: 0xF3CBB8
	public void .ctor(int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0xF3CDD4 Offset: 0xF3CDD4 VA: 0xF3CDD4 Slot: 5
	public override bool IsOpen(CommonReleaseEntity entity) { }
}

// Namespace: 
public interface CommonReleaseCondOverwriter // TypeDefIndex: 6591
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsOpen(CommonReleaseEntity entity);
}

// Namespace: 
public class DataManager : SingletonMonoBehaviour<DataManager> // TypeDefIndex: 6592
{
	// Fields
	[SerializeField] // RVA: 0xC55420 Offset: 0xC55420 VA: 0xC55420
	protected bool _DispLog; // 0x18
	protected static int readDataVersion; // 0x0
	protected static long readDateVersion; // 0x8
	protected static int dataVersion; // 0x10
	protected static long dateVersion; // 0x18
	protected static object updateData; // 0x20
	protected static object webViewData; // 0x28
	private static string serverHash; // 0x30
	private DataMasterBase[] datalist; // 0x20
	private Dictionary<int, DataMasterBase> lookup; // 0x28
	protected byte[] masterDataBytes; // 0x30
	protected List<string> saveNameList; // 0x38
	protected List<long[]> saveDataMapList; // 0x40
	protected static DataManager.ReadMasterVersionResult readMasterVersionResult; // 0x38
	protected static DataManager.ReadMasterDataResult readMasterDataResult; // 0x3C
	protected static DataManager.UpdateMasterDataResult updateMasterDataResult; // 0x40
	private float lastFrameTime; // 0x48
	private const float waitFrameTime = 0.1;
	private List<string> masterCheckName; // 0x50
	private object lockCountObj; // 0x58
	private int nowLoadCount; // 0x60
	private List<Thread> masterLoadThreads; // 0x68
	private SynchronizationContext context; // 0x70
	private const int loadThreadCount = 5;
	private Thread writeMasterDataThread; // 0x78
	private bool writeMasterDataThreadEnd; // 0x80
	private Exception writeMasterDataThreadException; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC55430 Offset: 0xC55430 VA: 0xC55430
	private static Func<DataMasterBase[]> <>f__mg$cache0; // 0x48

	// Properties
	public bool DispLog { get; }

	// Methods

	// RVA: 0x11D4E90 Offset: 0x11D4E90 VA: 0x11D4E90
	public void .ctor() { }

	// RVA: 0x11D4F58 Offset: 0x11D4F58 VA: 0x11D4F58
	public bool get_DispLog() { }

	// RVA: 0x11D4F60 Offset: 0x11D4F60 VA: 0x11D4F60
	public static string getCachePath() { }

	// RVA: 0x11D5038 Offset: 0x11D5038 VA: 0x11D5038
	protected static string getCacheVersionFileName() { }

	// RVA: 0x11D510C Offset: 0x11D510C VA: 0x11D510C
	protected static string getCacheListFileName() { }

	// RVA: 0x11D51E0 Offset: 0x11D51E0 VA: 0x11D51E0
	protected static string getCacheFileName() { }

	// RVA: 0x11D52B4 Offset: 0x11D52B4 VA: 0x11D52B4
	private static string getOldEnvCachePath() { }

	// RVA: 0x11D538C Offset: 0x11D538C VA: 0x11D538C
	public static void ClearOldEnvCacheAll() { }

	// RVA: 0x11D5484 Offset: 0x11D5484 VA: 0x11D5484
	private void OnDestroy() { }

	// RVA: 0x11D55BC Offset: 0x11D55BC VA: 0x11D55BC
	public static void ClearCacheAll() { }

	// RVA: 0x11D53EC Offset: 0x11D53EC VA: 0x11D53EC
	private static void ClearCacheAllCommonProc(string cachePath) { }

	// RVA: 0x11D561C Offset: 0x11D561C VA: 0x11D561C
	public void Initialize() { }

	// RVA: 0x11D5720 Offset: 0x11D5720 VA: 0x11D5720
	private void InitializeInternal(Func<DataMasterBase[]> createMasterDataMethod) { }

	// RVA: 0x11D58E0 Offset: 0x11D58E0 VA: 0x11D58E0
	public void setServerHash(object obj) { }

	// RVA: 0x11D5AF4 Offset: 0x11D5AF4 VA: 0x11D5AF4
	public string getServerHash() { }

	// RVA: 0x11D5B5C Offset: 0x11D5B5C VA: 0x11D5B5C
	public void setWebViewData(object obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC9E88 Offset: 0xCC9E88 VA: 0xCC9E88
	// RVA: 0x11D5BC8 Offset: 0x11D5BC8 VA: 0x11D5BC8
	public IEnumerator updateWebViewData() { }

	// RVA: 0x11D5C40 Offset: 0x11D5C40 VA: 0x11D5C40
	public int getMasterDataVersion() { }

	// RVA: 0x11D5CA8 Offset: 0x11D5CA8 VA: 0x11D5CA8
	public long getMasterDateVersion() { }

	// RVA: 0x11D5D10 Offset: 0x11D5D10 VA: 0x11D5D10
	public void setMasterDataVersion(int dataVer, long dateVer) { }

	// RVA: 0x11D5D90 Offset: 0x11D5D90 VA: 0x11D5D90
	public void setMasterData(int dataVer, long dateVer, object obj) { }

	// RVA: 0x11D5E8C Offset: 0x11D5E8C VA: 0x11D5E8C
	public DataManager.ReadMasterVersionResult getReadMasterVersionResult() { }

	// RVA: 0x11D5EF4 Offset: 0x11D5EF4 VA: 0x11D5EF4
	public DataManager.ReadMasterDataResult getReadMasterDataResult() { }

	// RVA: 0x11D5F5C Offset: 0x11D5F5C VA: 0x11D5F5C
	private bool CheckWaitforFrame() { }

	[DebuggerHiddenAttribute] // RVA: 0xCC9E98 Offset: 0xCC9E98 VA: 0xCC9E98
	// RVA: 0x11D5FA8 Offset: 0x11D5FA8 VA: 0x11D5FA8
	public IEnumerator readMasterVersion() { }

	[DebuggerHiddenAttribute] // RVA: 0xCC9EA8 Offset: 0xCC9EA8 VA: 0xCC9EA8
	// RVA: 0x11D6020 Offset: 0x11D6020 VA: 0x11D6020
	public IEnumerator readMasterData() { }

	// RVA: 0x11D6098 Offset: 0x11D6098 VA: 0x11D6098
	public DataManager.UpdateMasterDataResult getUpdateMasterDataResult() { }

	[DebuggerHiddenAttribute] // RVA: 0xCC9EB8 Offset: 0xCC9EB8 VA: 0xCC9EB8
	// RVA: 0x11D6100 Offset: 0x11D6100 VA: 0x11D6100
	public IEnumerator updateMasterData(bool isUseTips) { }

	// RVA: 0x11D61A4 Offset: 0x11D61A4 VA: 0x11D61A4
	private void StartMasterLoadThread(int maxIndex, List<int> loadedIndices) { }

	// RVA: 0x11D54F8 Offset: 0x11D54F8 VA: 0x11D54F8
	private void StopMasterLoadThread() { }

	// RVA: 0x11D646C Offset: 0x11D646C VA: 0x11D646C
	private void LoadMasterDataThread(object indexList) { }

	// RVA: 0x11D69EC Offset: 0x11D69EC VA: 0x11D69EC
	private void StartWriteLocalFile(string fileName) { }

	// RVA: 0x11D54A8 Offset: 0x11D54A8 VA: 0x11D54A8
	private void StopWriteLocalFile() { }

	// RVA: 0x11D6AA8 Offset: 0x11D6AA8 VA: 0x11D6AA8
	private void WriteLocalFileThread(object param) { }

	// RVA: 0x11D6FA0 Offset: 0x11D6FA0 VA: 0x11D6FA0
	private void GetMasterCheckName() { }

	// RVA: 0x11D7104 Offset: 0x11D7104 VA: 0x11D7104
	protected uint getMdk(string name, int version) { }

	// RVA: 0x11D7284 Offset: 0x11D7284 VA: 0x11D7284
	protected void ClearSaveDataList() { }

	// RVA: 0x11D7340 Offset: 0x11D7340 VA: 0x11D7340
	protected void DeleteCacheFile() { }

	// RVA: 0x11D7464 Offset: 0x11D7464 VA: 0x11D7464
	public bool readMasterVersionFile() { }

	// RVA: 0x11D7DFC Offset: 0x11D7DFC VA: 0x11D7DFC
	protected void writeMasterVersionFile() { }

	// RVA: 0x11D8430 Offset: 0x11D8430 VA: 0x11D8430
	public bool readMasterDataListFile() { }

	// RVA: 0x11D9284 Offset: 0x11D9284 VA: 0x11D9284
	protected void writeMasterDataListFile() { }

	// RVA: 0x11D97C0 Offset: 0x11D97C0 VA: 0x11D97C0
	public void updateJsonData(object obj) { }

	// RVA: 0x11D9898 Offset: 0x11D9898 VA: 0x11D9898
	public void updateJsonData(Dictionary<string, object> data) { }

	// RVA: 0x11DA180 Offset: 0x11DA180 VA: 0x11DA180
	public int getRevisionTotal() { }

	// RVA: -1 Offset: -1
	public static TMaster GetMaster<TMaster>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C32850 Offset: 0x1C32850 VA: 0x1C32850
	|-DataManager.GetMaster<BattleMaster>
	|-DataManager.GetMaster<BgmMaster>
	|-DataManager.GetMaster<BoxGachaBaseMaster>
	|-DataManager.GetMaster<BoxGachaHistoryMaster>
	|-DataManager.GetMaster<CombineAppendPassiveSkillMaster>
	|-DataManager.GetMaster<CommandCodeMaster>
	|-DataManager.GetMaster<CommonConsumeMaster>
	|-DataManager.GetMaster<CommonReleaseMaster>
	|-DataManager.GetMaster<CompleteMissionMaster>
	|-DataManager.GetMaster<ConstantMaster>
	|-DataManager.GetMaster<ConstantStrMaster>
	|-DataManager.GetMaster<EffectMaster>
	|-DataManager.GetMaster<EquipMaster>
	|-DataManager.GetMaster<EventBuddyPointMaster>
	|-DataManager.GetMaster<EventDetailMaster>
	|-DataManager.GetMaster<EventMaster>
	|-DataManager.GetMaster<EventMissionConditionMaster>
	|-DataManager.GetMaster<EventMissionMaster>
	|-DataManager.GetMaster<EventPanelMapMaster>
	|-DataManager.GetMaster<EventPointBuffMaster>
	|-DataManager.GetMaster<EventProgressValueMaster>
	|-DataManager.GetMaster<EventRaidMaster>
	|-DataManager.GetMaster<EventRandomMissionMaster>
	|-DataManager.GetMaster<EventServantPointRankMaster>
	|-DataManager.GetMaster<FunctionMaster>
	|-DataManager.GetMaster<GachaAppendMaster>
	|-DataManager.GetMaster<GachaGroupMaster>
	|-DataManager.GetMaster<GachaMaster>
	|-DataManager.GetMaster<GiftMaster>
	|-DataManager.GetMaster<ItemMaster>
	|-DataManager.GetMaster<NpcFollowerMaster>
	|-DataManager.GetMaster<PickupUserFollowerMaster>
	|-DataManager.GetMaster<QuestMaster>
	|-DataManager.GetMaster<QuestPhaseMaster>
	|-DataManager.GetMaster<QuestReleaseMaster>
	|-DataManager.GetMaster<ServantAddMaster>
	|-DataManager.GetMaster<ServantAppendPassiveSkillMaster>
	|-DataManager.GetMaster<ServantChangeMaster>
	|-DataManager.GetMaster<ServantClassMaster>
	|-DataManager.GetMaster<ServantCommentAddMaster>
	|-DataManager.GetMaster<ServantCommentMaster>
	|-DataManager.GetMaster<ServantCostumeMaster>
	|-DataManager.GetMaster<ServantExceedMaster>
	|-DataManager.GetMaster<ServantLimitAddMaster>
	|-DataManager.GetMaster<ServantLimitImageMaster>
	|-DataManager.GetMaster<ServantLimitMaster>
	|-DataManager.GetMaster<ServantLimitSpoilerProtectionMaster>
	|-DataManager.GetMaster<ServantLvDetailMaster>
	|-DataManager.GetMaster<ServantMaster>
	|-DataManager.GetMaster<ShopActionMaster>
	|-DataManager.GetMaster<ShopDetailMaster>
	|-DataManager.GetMaster<ShopGroupMaster>
	|-DataManager.GetMaster<ShopMaster>
	|-DataManager.GetMaster<ShopReleaseMaster>
	|-DataManager.GetMaster<ShopScriptMaster>
	|-DataManager.GetMaster<SkillLvMaster>
	|-DataManager.GetMaster<SkillMaster>
	|-DataManager.GetMaster<SpotMaster>
	|-DataManager.GetMaster<SvtAppendPassiveSkillUnlockMaster>
	|-DataManager.GetMaster<SvtCoinMaster>
	|-DataManager.GetMaster<object>
	|-DataManager.GetMaster<TotalEventRaidMaster>
	|-DataManager.GetMaster<TreasureDvcLvMaster>
	|-DataManager.GetMaster<TreasureDvcMaster>
	|-DataManager.GetMaster<UserCommandCodeMaster>
	|-DataManager.GetMaster<UserDeckMaster>
	|-DataManager.GetMaster<UserEventPointMaster>
	|-DataManager.GetMaster<UserEventRandomMissionMaster>
	|-DataManager.GetMaster<UserEventServantPointMaster>
	|-DataManager.GetMaster<UserGachaDrawLogMaster>
	|-DataManager.GetMaster<UserGachaExtraCountMaster>
	|-DataManager.GetMaster<UserGachaHistoryMaster>
	|-DataManager.GetMaster<UserItemMaster>
	|-DataManager.GetMaster<UserPresentBoxMaster>
	|-DataManager.GetMaster<UserQuestInfoMaster>
	|-DataManager.GetMaster<UserQuestMaster>
	|-DataManager.GetMaster<UserServantAppendPassiveSkillLvMaster>
	|-DataManager.GetMaster<UserServantAppendPassiveSkillMaster>
	|-DataManager.GetMaster<UserServantCollectionMaster>
	|-DataManager.GetMaster<UserServantCommandCodeMaster>
	|-DataManager.GetMaster<UserServantMaster>
	|-DataManager.GetMaster<UserServantVoicePlayedMaster>
	|-DataManager.GetMaster<UserShopMaster>
	|-DataManager.GetMaster<UserSvtCoinMaster>
	|-DataManager.GetMaster<ViewEnemyMaster>
	|-DataManager.GetMaster<VoiceMaster>
	|-DataManager.GetMaster<WarAddMaster>
	|-DataManager.GetMaster<WarMaster>
	*/

	// RVA: -1 Offset: -1
	public TMaster GetMasterData<TMaster>() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C328BC Offset: 0x1C328BC VA: 0x1C328BC
	|-DataManager.GetMasterData<AiActMaster>
	|-DataManager.GetMasterData<BankShopMaster>
	|-DataManager.GetMasterData<BattleMasterImageMaster>
	|-DataManager.GetMasterData<BgmMaster>
	|-DataManager.GetMasterData<CommandCodeMaster>
