	public const BuffList.ACTION AVOID_INSTANTDEATH = 47;
	public const BuffList.ACTION RESIST_INSTANTDEATH = 48;
	public const BuffList.ACTION NONRESIST_INSTANTDEATH = 49;
	public const BuffList.ACTION REGAIN_NP_USED_NOBLE = 50;
	public const BuffList.ACTION FUNCTION_DEAD = 51;
	public const BuffList.ACTION MAXHP_RATE = 52;
	public const BuffList.ACTION MAXHP_VALUE = 53;
	public const BuffList.ACTION FUNCTION_WAVESTART = 54;
	public const BuffList.ACTION FUNCTION_SELFTURNEND = 55;
	public const BuffList.ACTION GIVE_GAIN_HP = 56;
	public const BuffList.ACTION FUNCTION_COMMANDATTACK = 57;
	public const BuffList.ACTION FUNCTION_DEADATTACK = 58;
	public const BuffList.ACTION FUNCTION_ENTRY = 59;
	public const BuffList.ACTION CHAGETD = 60;
	public const BuffList.ACTION GRANT_SUBSTATE = 61;
	public const BuffList.ACTION TOLERANCE_SUBSTATE = 62;
	public const BuffList.ACTION GRANT_INSTANTDEATH = 63;
	public const BuffList.ACTION FUNCTION_DAMAGE = 64;
	public const BuffList.ACTION FUNCTION_REFLECTION = 65;
	public const BuffList.ACTION MULTIATTACK = 66;
	public const BuffList.ACTION GIVE_NP = 67;
	public const BuffList.ACTION RESISTANCE_DELAY_NPTURN = 68;
	public const BuffList.ACTION PIERCE_DEFENCE = 69;
	public const BuffList.ACTION GUTS_HP = 70;
	public const BuffList.ACTION FUNCGAIN_NP = 71;
	public const BuffList.ACTION FUNC_HP_REDUCE = 72;
	public const BuffList.ACTION FUNCTION_NPATTACK = 73;
	public const BuffList.ACTION FIX_COMMANDCARD = 74;
	public const BuffList.ACTION DONOT_GAINNP = 75;
	public const BuffList.ACTION FIELD_INDIVIDUALITY = 76;
	public const BuffList.ACTION DONOT_ACT_COMMANDTYPE = 77;
	public const BuffList.ACTION DAMAGE_EVENT_POINT = 78;
	public const BuffList.ACTION DAMAGE_SPECIAL = 79;
	public const BuffList.ACTION FUNCTION_ATTACK = 80;
	public const BuffList.ACTION FUNCTION_COMMANDCODEATTACK = 81;
	public const BuffList.ACTION DONOT_NOBLE_COND_MISMATCH = 82;
	public const BuffList.ACTION DONOT_SELECT_COMMANDCARD = 83;
	public const BuffList.ACTION DONOT_REPLACE = 84;
	public const BuffList.ACTION SHORTEN_USER_EQUIP_SKILL = 85;
	public const BuffList.ACTION TD_TYPE_CHANGE = 86;
	public const BuffList.ACTION OVERWRITE_CLASS_RELATION = 87;
	public const BuffList.ACTION FUNCTION_COMMANDATTACK_BEFORE = 88;
	public const BuffList.ACTION FUNCTION_GUTS = 89;
	public const BuffList.ACTION CRITICAL_RATE_DAMAGE_TAKEN = 90;
	public const BuffList.ACTION CRITICAL_STAR_DAMAGE_TAKEN = 91;
	public const BuffList.ACTION SKILL_RANK_CHANGE = 92;
	public const BuffList.ACTION AVOIDANCE_INDIVIDUALITY = 93;
	public const BuffList.ACTION CHANGE_COMMAND_CARD_TYPE = 94;
	public const BuffList.ACTION SPECIAL_INVINCIBLE = 95;
	public const BuffList.ACTION PREVENT_DEATH_BY_DAMAGE = 96;
	public const BuffList.ACTION FUNCTION_COMMANDCODEATTACK_AFTER = 97;
	public const BuffList.ACTION FUNCTION_ATTACK_BEFORE = 98;
	public const BuffList.ACTION DONOT_SKILL_SELECT = 99;
	public const BuffList.ACTION BUFF_RATE = 100;
	public const BuffList.ACTION COUNTER_FUNCTION = 101;
}

// Namespace: 
public enum BuffList.INVOKE_COND_TYPE // TypeDefIndex: 6083
{
	// Fields
	public int value__; // 0x0
	public const BuffList.INVOKE_COND_TYPE INDIVIDUALITY = 0;
	public const BuffList.INVOKE_COND_TYPE BUFF_TYPE = 1;
}

// Namespace: 
public class BuffList.BaseInvokeCond // TypeDefIndex: 6084
{
	// Fields
	protected const string BUFF_TYPE_COND_KEY_FORMAT = "Check{0}BuffTypes";
	[CompilerGeneratedAttribute] // RVA: 0xC532E8 Offset: 0xC532E8 VA: 0xC532E8
	[DebuggerBrowsableAttribute] // RVA: 0xC532E8 Offset: 0xC532E8 VA: 0xC532E8
	private BattleServantData <SvtData>k__BackingField; // 0x10
	protected Dictionary<BuffList.INVOKE_COND_TYPE, int[]> dicCacheSelfValue; // 0x18
	protected string targetSideStr; // 0x20

	// Properties
	public BattleServantData SvtData { get; set; }
	protected string BuffTypeCondKeyName { get; }

	// Methods

	// RVA: 0x14DAAA4 Offset: 0x14DAAA4 VA: 0x14DAAA4
	public void .ctor(bool isSelfSide) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8974 Offset: 0xCC8974 VA: 0xCC8974
	// RVA: 0x14DAB74 Offset: 0x14DAB74 VA: 0x14DAB74
	private void set_SvtData(BattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8984 Offset: 0xCC8984 VA: 0xCC8984
	// RVA: 0x14DAB7C Offset: 0x14DAB7C VA: 0x14DAB7C
	public BattleServantData get_SvtData() { }

	// RVA: 0x14DAB84 Offset: 0x14DAB84 VA: 0x14DAB84
	protected string get_BuffTypeCondKeyName() { }

	// RVA: 0x14DABFC Offset: 0x14DABFC VA: 0x14DABFC Slot: 4
	public virtual void Init(BattleServantData svtData) { }

	// RVA: 0x14DAC6C Offset: 0x14DAC6C VA: 0x14DAC6C Slot: 5
	public virtual bool CheckInvokeCond(BattleBuffData buffData, BuffEntity buffEnt, int[] selfIndivValues, int[] condIndivValues) { }

	// RVA: 0x14DAD38 Offset: 0x14DAD38 VA: 0x14DAD38 Slot: 6
	protected virtual bool CheckBuffTypeCond(BattleBuffData buffData, BuffEntity buffEnt, int[] condValues) { }
}

// Namespace: 
public class BuffList.ActInfo // TypeDefIndex: 6085
{
	// Fields
	public BuffList.LIMIT limit; // 0x10
	public BuffList.TYPE[] plusTypes; // 0x18
	public BuffList.TYPE[] minusTypes; // 0x20
	public int baseParam; // 0x28
	public int baseValue; // 0x2C
	public bool isRec; // 0x30
	public BuffList.ACTION plusAction; // 0x34
	[CompilerGeneratedAttribute] // RVA: 0xC53324 Offset: 0xC53324 VA: 0xC53324
	[DebuggerBrowsableAttribute] // RVA: 0xC53324 Offset: 0xC53324 VA: 0xC53324
	private BuffList.BaseInvokeCond <OpponentInvokeCond>k__BackingField; // 0x38
	public BattleData battleData; // 0x40

	// Properties
	public BuffList.BaseInvokeCond OpponentInvokeCond { get; set; }

	// Methods

	// RVA: 0x14DA990 Offset: 0x14DA990 VA: 0x14DA990
	public void .ctor(BuffList.LIMIT inLimit, BuffList.TYPE[] inPlus, BuffList.TYPE[] inMinus) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8994 Offset: 0xCC8994 VA: 0xCC8994
	// RVA: 0x14DAA24 Offset: 0x14DAA24 VA: 0x14DAA24
	private void set_OpponentInvokeCond(BuffList.BaseInvokeCond value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC89A4 Offset: 0xCC89A4 VA: 0xCC89A4
	// RVA: 0x14D5154 Offset: 0x14D5154 VA: 0x14D5154
	public BuffList.BaseInvokeCond get_OpponentInvokeCond() { }

	// RVA: 0x14DAA08 Offset: 0x14DAA08 VA: 0x14DAA08
	public BuffList.ActInfo setBaseParam(int inBaseParam) { }

	// RVA: 0x14DAA00 Offset: 0x14DAA00 VA: 0x14DAA00
	public BuffList.ActInfo setBaseValue(int inBaseValue) { }

	// RVA: 0x14DAA10 Offset: 0x14DAA10 VA: 0x14DAA10
	public BuffList.ActInfo setRec(bool flg) { }

	// RVA: 0x14DAA2C Offset: 0x14DAA2C VA: 0x14DAA2C
	public bool isUpperLimit() { }

	// RVA: 0x14DAA38 Offset: 0x14DAA38 VA: 0x14DAA38
	public bool isLowerLimit() { }

	// RVA: 0x14DAA1C Offset: 0x14DAA1C VA: 0x14DAA1C
	public BuffList.ActInfo setPlusAction(BuffList.ACTION targetAction) { }

	// RVA: 0x14DAA44 Offset: 0x14DAA44 VA: 0x14DAA44 Slot: 4
	protected virtual BuffList.BaseInvokeCond MakeInvokeCond(bool isSelfSide) { }
}

// Namespace: 
public enum BuffList.CONDITIONS // TypeDefIndex: 6086
{
	// Fields
	public int value__; // 0x0
	public const BuffList.CONDITIONS HP_HIGHER = 0;
	public const BuffList.CONDITIONS HP_LOWER = 1;
	public const BuffList.CONDITIONS INDIVIDUALITIE = 2;
}

// Namespace: 
public enum BuffList.CHANGEVALUE // TypeDefIndex: 6087
{
	// Fields
	public int value__; // 0x0
	public const BuffList.CHANGEVALUE RATIO_HP_HIGH = 0;
	public const BuffList.CHANGEVALUE RATIO_HP_LOW = 1;
}

// Namespace: 
public enum BuffList.ProgressTurnCond // TypeDefIndex: 6088
{
	// Fields
	public int value__; // 0x0
	public const BuffList.ProgressTurnCond NONE = 0;
	public const BuffList.ProgressTurnCond ALIVE_ENEMY_ALLY = 1;
	public const BuffList.ProgressTurnCond ALIVE_SELF = 2;
}

// Namespace: 
public class CacheFolderName // TypeDefIndex: 6089
{
	// Fields
	private static Dictionary<CacheFolderName.FOLDER_NAME, string> folderList; // 0x0
	private static Dictionary<CacheFolderName.FOLDER_NAME, string> convertedFolderList; // 0x8

	// Methods

	// RVA: 0x14E2FB8 Offset: 0x14E2FB8 VA: 0x14E2FB8
	public void .ctor() { }

	// RVA: 0x14E2FC0 Offset: 0x14E2FC0 VA: 0x14E2FC0
	public static string getFolderName(CacheFolderName.FOLDER_NAME name) { }

	// RVA: 0x14E30D4 Offset: 0x14E30D4 VA: 0x14E30D4
	public static string getFolderNameNotConverted(CacheFolderName.FOLDER_NAME name) { }

	// RVA: 0x14E31E8 Offset: 0x14E31E8 VA: 0x14E31E8
	public static string convertFolderName(string name) { }

	// RVA: 0x14E352C Offset: 0x14E352C VA: 0x14E352C
	private static void .cctor() { }
}

// Namespace: 
public enum CacheFolderName.FOLDER_NAME // TypeDefIndex: 6090
{
	// Fields
	public int value__; // 0x0
	public const CacheFolderName.FOLDER_NAME ASSET = 0;
	public const CacheFolderName.FOLDER_NAME MASTER_DATA = 1;
	public const CacheFolderName.FOLDER_NAME PAYMENT_HISTORYS = 2;
}

// Namespace: 
public enum CameraPosition // TypeDefIndex: 6091
{
	// Fields
	public int value__; // 0x0
	public const CameraPosition Players = 0;
	public const CameraPosition Enemies = 1;
	public const CameraPosition PlayerNp = 2;
	public const CameraPosition EnemyNp = 3;
	public const CameraPosition All = 4;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25244 Offset: 0xC25244 VA: 0xC25244
internal static class CameraPositionExt // TypeDefIndex: 6092
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC89B4 Offset: 0xCC89B4 VA: 0xCC89B4
	// RVA: 0x14E3CA4 Offset: 0x14E3CA4 VA: 0x14E3CA4
	public static string DisplayName(CameraPosition camPos) { }
}

// Namespace: 
public class CollectionStatus // TypeDefIndex: 6093
{
	// Methods

	// RVA: 0x1309F50 Offset: 0x1309F50 VA: 0x1309F50
	public void .ctor() { }
}

// Namespace: 
public enum CollectionStatus.Kind // TypeDefIndex: 6094
{
	// Fields
	public int value__; // 0x0
	public const CollectionStatus.Kind NOT_GET = 0;
	public const CollectionStatus.Kind FIND = 1;
	public const CollectionStatus.Kind GET = 2;
	public const CollectionStatus.Kind ENEMY_COLLECTION_DETAIL = 3;
	public const CollectionStatus.Kind HIDE = 4;
	public const CollectionStatus.Kind NPC = 5;
	public const CollectionStatus.Kind SECRET = 6;
	public const CollectionStatus.Kind DATA_LOST = 7;
}

// Namespace: 
public class CombineAdjustTarget // TypeDefIndex: 6095
{
	// Fields
	public const int FIXED_VAL = 1000;

	// Methods

	// RVA: 0x130A3C8 Offset: 0x130A3C8 VA: 0x130A3C8
	public void .ctor() { }

	// RVA: 0x130A3D0 Offset: 0x130A3D0 VA: 0x130A3D0
	public static bool isTerminalExposable(CombineAdjustTarget.TYPE type) { }
}

// Namespace: 
public enum CombineAdjustTarget.TYPE // TypeDefIndex: 6096
{
	// Fields
	public int value__; // 0x0
	public const CombineAdjustTarget.TYPE COMBINE_QP = 1;
	public const CombineAdjustTarget.TYPE COMBINE_EXP = 2;
	public const CombineAdjustTarget.TYPE ACTIVE_SKILL = 3;
	public const CombineAdjustTarget.TYPE LARGE_SUCCESS = 4;
	public const CombineAdjustTarget.TYPE SUPER_SUCCESS = 5;
	public const CombineAdjustTarget.TYPE LIMIT_QP = 6;
	public const CombineAdjustTarget.TYPE LIMIT_ITEM = 7;
	public const CombineAdjustTarget.TYPE SKILL_QP = 8;
	public const CombineAdjustTarget.TYPE SKILL_ITEM = 9;
	public const CombineAdjustTarget.TYPE TREASURE_DEVICE_QP = 10;
	public const CombineAdjustTarget.TYPE TREASURE_DEVICE_ITEM = 11;
	public const CombineAdjustTarget.TYPE QUEST_AP = 12;
	public const CombineAdjustTarget.TYPE QUEST_EXP = 13;
	public const CombineAdjustTarget.TYPE QUEST_QP = 14;
	public const CombineAdjustTarget.TYPE QUEST_DROP = 15;
	public const CombineAdjustTarget.TYPE SVTEQUIP_COMBINE_QP = 16;
	public const CombineAdjustTarget.TYPE SVTEQUIP_COMBINE_EXP = 17;
	public const CombineAdjustTarget.TYPE SVTEQUIP_LARGE_SUCCESS = 18;
	public const CombineAdjustTarget.TYPE SVTEQUIP_SUPER_SUCCESS = 19;
	public const CombineAdjustTarget.TYPE QUEST_EVENT_POINT = 20;
	public const CombineAdjustTarget.TYPE ENEMY_SVT_CLASS_PICK_UP = 21;
	public const CombineAdjustTarget.TYPE EVENT_EACH_DROP_NUM = 22;
	public const CombineAdjustTarget.TYPE EVENT_EACH_DROP_RATE = 23;
	public const CombineAdjustTarget.TYPE QUEST_FP = 24;
	public const CombineAdjustTarget.TYPE QUEST_AP_FIRST_TIME = 25;
	public const CombineAdjustTarget.TYPE DAILY_DROP_UP = 26;
	public const CombineAdjustTarget.TYPE EXCHANGE_SVT_COMBINE_EXP = 27;
	public const CombineAdjustTarget.TYPE QUEST_USE_CONTINUE_ITEM = 28;
	public const CombineAdjustTarget.TYPE FRIEND_POINT_GACHA_FREE_DRAW_NUM = 29;
	public const CombineAdjustTarget.TYPE QUEST_USE_FRIENDSHIP_UP_ITEM = 30;
}

// Namespace: 
public class CondType // TypeDefIndex: 6097
{
	// Fields
	private static readonly int EVENT_POINT_DEVIDER; // 0x0
	private static readonly int EVENT_RACE_DEVIDER; // 0x4
	private static readonly int TARGET_PARAM_NUM; // 0x8
	private static int EventId; // 0xC
	private static UserQuestMaster uQuestMst; // 0x10
	private static readonly Dictionary<int, string> cachedServantEquipIdStrDic; // 0x18
	private static long lastUserId; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC53360 Offset: 0xC53360 VA: 0xC53360
	private static CondType.CountDelegate <>f__mg$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC53370 Offset: 0xC53370 VA: 0xC53370
	private static CondType.CountDelegate <>f__mg$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC53380 Offset: 0xC53380 VA: 0xC53380
	private static CondType.CountDelegate <>f__mg$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC53390 Offset: 0xC53390 VA: 0xC53390
	private static CondType.CountDelegate <>f__mg$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC533A0 Offset: 0xC533A0 VA: 0xC533A0
	private static Comparison<WarEntity> <>f__am$cache0; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC533B0 Offset: 0xC533B0 VA: 0xC533B0
	private static Predicate<WarEntity> <>f__am$cache1; // 0x50

	// Methods

	// RVA: 0x163A80C Offset: 0x163A80C VA: 0x163A80C
	public void .ctor() { }

	// RVA: 0x163A814 Offset: 0x163A814 VA: 0x163A814
	private static UserQuestMaster GetUserQuestMaster() { }

	// RVA: 0x163A908 Offset: 0x163A908 VA: 0x163A908
	public static bool IsOpen(CondType.Kind condType, int targetId, long condValue) { }

	// RVA: 0x1641368 Offset: 0x1641368 VA: 0x1641368
	private static bool checkRaidTimeLimitOver(int targetId, int condValue) { }

	// RVA: 0x1641518 Offset: 0x1641518 VA: 0x1641518
	private static bool TimeLimitRaidDead(int eventId, int targetId) { }

	// RVA: 0x1641754 Offset: 0x1641754 VA: 0x1641754
	private static bool RaidBattleProgressAbove(int questId, float rate) { }

	// RVA: 0x163DE0C Offset: 0x163DE0C VA: 0x163DE0C
	private static bool checkCondTypeRaidAlive(int targetId, int condValue, bool alive) { }

	// RVA: 0x163E03C Offset: 0x163E03C VA: 0x163E03C
	private static bool checkCondTypeRaidGroupAlive(int targetId, int condValue, bool alive) { }

	// RVA: 0x1642878 Offset: 0x1642878 VA: 0x1642878
	private static int GetRaidGroupDeadCount(int targetId, long condValue) { }

	// RVA: 0x1642A80 Offset: 0x1642A80 VA: 0x1642A80
	private static int GetItemGetCount(int targetId) { }

	// RVA: 0x163DD90 Offset: 0x163DD90 VA: 0x163DD90
	private static bool IsItemGet(int targetId, int condValue) { }

	// RVA: 0x1642BF4 Offset: 0x1642BF4 VA: 0x1642BF4
	public static bool IsOpenWithSumOfProgressCount(CondType.Kind condType, int[] targetIds, int targetNum) { }

	// RVA: 0x1643880 Offset: 0x1643880 VA: 0x1643880
	private static CondType.Kind GetNegativeSideCond(CondType.Kind cond) { }

	// RVA: 0x1643918 Offset: 0x1643918 VA: 0x1643918
	public static bool IsOpen(CondType.Kind condType, int[] condValues, int condNum) { }

	// RVA: 0x1643E24 Offset: 0x1643E24 VA: 0x1643E24
	public static bool IsOpenForUsrSvt(CondType.Kind condType, int condValue, long userSvtId) { }

	// RVA: 0x1644E48 Offset: 0x1644E48 VA: 0x1644E48
	public static bool IsOpen(CondType.Kind condType, int condValue, long userId, int svtId) { }

	// RVA: 0x16455A8 Offset: 0x16455A8 VA: 0x16455A8
	public static string OpenConditionText(CondType.Kind condType, int condValue, string textType = "") { }

	// RVA: 0x1646254 Offset: 0x1646254 VA: 0x1646254
	public static long GetProgressNum(CondType.Kind condType, int targetId, long condValue, int eventId) { }

	// RVA: 0x1648994 Offset: 0x1648994 VA: 0x1648994
	public static long GetProgressNumByTargetIds(CondType.Kind condType, int[] targetIds) { }

	// RVA: 0x1648B7C Offset: 0x1648B7C VA: 0x1648B7C
	public static bool IsConst(CondType.Kind condType) { }

	// RVA: 0x16442D8 Offset: 0x16442D8 VA: 0x16442D8
	public static bool IsQuestClear(long userId, int condQuestId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x163C7D8 Offset: 0x163C7D8 VA: 0x163C7D8
	public static bool IsQuestClear(int condQuestId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x16458AC Offset: 0x16458AC VA: 0x16458AC
	public static string OpenConditionTextQuestClear(int condQuestId, string textType = "") { }

	// RVA: 0x163D638 Offset: 0x163D638 VA: 0x163D638
	public static bool IsQuestPhaseClear(long userId, int condQuestId, int condQuestPhase, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1648B88 Offset: 0x1648B88 VA: 0x1648B88
	public static bool IsQuestPhaseClear(int condQuestId, int condQuestPhase, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1646D0C Offset: 0x1646D0C VA: 0x1646D0C
	private static int GetQuestClearPhaseCount(long userId, int targetId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1648C48 Offset: 0x1648C48 VA: 0x1648C48
	public static string OpenConditionTextQuestPhaseClear(int condQuestId, int condQuestPhase, string textType = "", bool getWarName = False) { }

	// RVA: 0x1648EF0 Offset: 0x1648EF0 VA: 0x1648EF0
	public static bool IsQuestEnable(int openQuestid, int closeQuestid) { }

	// RVA: 0x16443C8 Offset: 0x16443C8 VA: 0x16443C8
	public static bool IsServantLevel(long userSvtId, int condLv) { }

	// RVA: 0x163C888 Offset: 0x163C888 VA: 0x163C888
	public static bool IsServantLevel(int svtId, int condLv) { }

	// RVA: 0x1645140 Offset: 0x1645140 VA: 0x1645140
	public static bool IsServantLevel(long userId, int svtId, int condLv) { }

	// RVA: 0x16459F8 Offset: 0x16459F8 VA: 0x16459F8
	public static string OpenConditionTextServantLevel(int condLv, string textType = "") { }

	// RVA: 0x164456C Offset: 0x164456C VA: 0x164456C
	public static bool IsServantLimit(long userSvtId, int condLimitCount, CondType.CheckType checkType = 1) { }

	// RVA: 0x1644C5C Offset: 0x1644C5C VA: 0x1644C5C
	public static bool IsServantLimitImage(long userSvtId, int condLimitCount, CondType.CheckType checkType = 1) { }

	// RVA: 0x163C930 Offset: 0x163C930 VA: 0x163C930
	public static bool IsServantLimit(int svtId, int condLimitCount, CondType.CheckType checkType) { }

	// RVA: 0x16451F4 Offset: 0x16451F4 VA: 0x16451F4
	public static bool IsServantLimit(long userId, int svtId, int condLimitCount, CondType.CheckType checkType = 1) { }

	// RVA: 0x1645ADC Offset: 0x1645ADC VA: 0x1645ADC
	public static string OpenConditionTextServantLimit(int condLimitCount, string textType = "") { }

	// RVA: 0x163C9E0 Offset: 0x163C9E0 VA: 0x163C9E0
	public static bool IsServantGet(int condSvtId) { }

	// RVA: 0x1644780 Offset: 0x1644780 VA: 0x1644780
	public static bool IsServantGet(long userId, int condSvtId) { }

	// RVA: 0x1649078 Offset: 0x1649078 VA: 0x1649078
	public static bool IsServantGet(long userSvtId) { }

	// RVA: 0x163D5A8 Offset: 0x163D5A8 VA: 0x163D5A8
	public static bool IsServantHaving(int svtId) { }

	// RVA: 0x1646C7C Offset: 0x1646C7C VA: 0x1646C7C
	private static int GetServantHavingCount(int targetId) { }

	// RVA: 0x1645BC0 Offset: 0x1645BC0 VA: 0x1645BC0
	public static string OpenConditionTextServantGet(int condSvtId, string textType = "") { }

	// RVA: 0x163CA78 Offset: 0x163CA78 VA: 0x163CA78
	public static bool IsServantFriendship(int svtId, int condFriendshipRank, bool isAbove) { }

	// RVA: 0x16452F8 Offset: 0x16452F8 VA: 0x16452F8
	public static bool IsServantFriendship(long userId, int svtId, int condFriendshipRank, bool isAbove = True) { }

	// RVA: 0x1644830 Offset: 0x1644830 VA: 0x1644830
	public static bool IsServantFriendship(long userSvtId, int condFriendshipRank) { }

	// RVA: 0x1645CFC Offset: 0x1645CFC VA: 0x1645CFC
	public static string OpenConditionTextServantFriendship(int condFriendshipRank, string textType = "") { }

	// RVA: 0x163CB28 Offset: 0x163CB28 VA: 0x163CB28
	public static bool IsServantGroup(int condGroup) { }

	// RVA: 0x1644AEC Offset: 0x1644AEC VA: 0x1644AEC
	public static bool IsServantGroup(long userId, int condGroup) { }

	// RVA: 0x1645DE0 Offset: 0x1645DE0 VA: 0x1645DE0
	public static string OpenConditionTextServantGroup(int condGroup, string textType = "") { }

	// RVA: 0x163CBC0 Offset: 0x163CBC0 VA: 0x163CBC0
	public static bool IsEvent(int condId) { }

	// RVA: 0x1645EC4 Offset: 0x1645EC4 VA: 0x1645EC4
	public static string OpenConditionTextEvent(int condId, string textType = "") { }

	// RVA: 0x163CC68 Offset: 0x163CC68 VA: 0x163CC68
	public static bool IsPurchaseQpShop(int condId) { }

	// RVA: 0x1645440 Offset: 0x1645440 VA: 0x1645440
	public static bool IsPurchaseQpShop(long userId, int condId) { }

	// RVA: 0x1645FFC Offset: 0x1645FFC VA: 0x1645FFC
	public static string OpenConditionTextPurchaseQpShop(int condId, string textType = "") { }

	// RVA: 0x163CD0C Offset: 0x163CD0C VA: 0x163CD0C
	public static bool IsPurchaseStoneShop(int condId) { }

	// RVA: 0x16454F4 Offset: 0x16454F4 VA: 0x16454F4
	public static bool IsPurchaseStoneShop(long userId, int condId) { }

	// RVA: 0x163D19C Offset: 0x163D19C VA: 0x163D19C
	public static bool IsPurchaseShop(int targetId, int condValue = 1) { }

	// RVA: 0x1646B10 Offset: 0x1646B10 VA: 0x1646B10
	private static int GetPurchaseShopCount(int targetId) { }

	// RVA: 0x1646128 Offset: 0x1646128 VA: 0x1646128
	public static string OpenConditionTextPurchaseStoneShop(int condId, string textType = "") { }

	// RVA: 0x163CDB0 Offset: 0x163CDB0 VA: 0x163CDB0
	public static bool IsMissionCondDetail(int condId, int condVal) { }

	// RVA: 0x163CF00 Offset: 0x163CF00 VA: 0x163CF00
	public static bool IsMissionClear(int condId) { }

	// RVA: 0x16492D0 Offset: 0x16492D0 VA: 0x16492D0
	public static bool IsMissionClearOnly(int condId) { }

	// RVA: 0x163CFE4 Offset: 0x163CFE4 VA: 0x163CFE4
	public static bool IsMissionAchive(int condId) { }

	// RVA: 0x164775C Offset: 0x164775C VA: 0x164775C
	public static int GetNumMissionCondDetail(int condId, int condVal) { }

	// RVA: 0x1647154 Offset: 0x1647154 VA: 0x1647154
	public static int GetQuestClearCount(int targetId) { }

	// RVA: 0x16478D4 Offset: 0x16478D4 VA: 0x16478D4
	public static int GetMIssionClearNum(int condId) { }

	// RVA: 0x1647A58 Offset: 0x1647A58 VA: 0x1647A58
	public static int GetMissionAchiveNum(int condId) { }

	// RVA: 0x16475D4 Offset: 0x16475D4 VA: 0x16475D4
	public static int GetSvtGetNum(int condId) { }

	// RVA: 0x16474F0 Offset: 0x16474F0 VA: 0x16474F0
	public static int GetSvtLimitCnt(int condId, int condVal) { }

	// RVA: 0x164740C Offset: 0x164740C VA: 0x164740C
	public static int GetSvtLv(int condId, int condVal) { }

	// RVA: 0x1647640 Offset: 0x1647640 VA: 0x1647640
	public static int GetSvtFriendShip(int condId, int condVal) { }

	// RVA: 0x163D0C4 Offset: 0x163D0C4 VA: 0x163D0C4
	public static bool IsQuestClearNum(int condId, int condVal) { }

	// RVA: 0x1647BDC Offset: 0x1647BDC VA: 0x1647BDC
	public static int GetQuestClearNum(int condId, int condVal) { }

	// RVA: 0x163D220 Offset: 0x163D220 VA: 0x163D220
	public static bool IsNotQuestGroupClear(int questId, int groupId, int condVal, out int[] sameGroupQuestIds, bool isCheckResetFlag = False) { }

	// RVA: 0x16493B0 Offset: 0x16493B0 VA: 0x16493B0
	public static bool IsNotQuestGroupClear(int targetId, int condValue) { }

	// RVA: 0x16467CC Offset: 0x16467CC VA: 0x16467CC
	private static int GetNotQuestGoupClearCount(int questId, int groupId, out int[] sameGroupQuestIds, bool isCheckResetFlag = False) { }

	// RVA: 0x163D2C4 Offset: 0x163D2C4 VA: 0x163D2C4
	public static bool IsQuestGroupClear(int questId, int groupId, int condVal, bool isCheckResetFlag = False) { }

	// RVA: 0x16469C4 Offset: 0x16469C4 VA: 0x16469C4
	private static int GetQuestGroupClearCount(int questId, int groupId, bool isCheckResetFlag = False) { }

	// RVA: 0x1647E44 Offset: 0x1647E44 VA: 0x1647E44
	public static long GetOpenTime() { }

	// RVA: 0x1649548 Offset: 0x1649548 VA: 0x1649548
	public static int GetNumIsOpenByDate(long condVal) { }

	// RVA: 0x1647EA4 Offset: 0x1647EA4 VA: 0x1647EA4
	public static long GetRaidDamage(int condId, long condVal) { }

	// RVA: 0x1647FCC Offset: 0x1647FCC VA: 0x1647FCC
	public static int GetQuestChallengeNum(int condId, int condVal) { }

	// RVA: 0x1648234 Offset: 0x1648234 VA: 0x1648234
	public static long GetSuperBossDamage(int condId, long condVal) { }

	// RVA: 0x164835C Offset: 0x164835C VA: 0x164835C
	public static long GetSuperBossDamageAll(int condId, long condVal) { }

	// RVA: 0x163D430 Offset: 0x163D430 VA: 0x163D430
	public static bool IsNotEventShopPurchase(int targetId) { }

	// RVA: 0x163D360 Offset: 0x163D360 VA: 0x163D360
	public static bool IsNotServantGet(int servantId) { }

	// RVA: 0x1643A38 Offset: 0x1643A38 VA: 0x1643A38
	public static bool IsNotShopPurchase(int[] values) { }

	// RVA: 0x1643B70 Offset: 0x1643B70 VA: 0x1643B70
	public static bool IsShopPurchase(int[] values, int num) { }

	// RVA: 0x163D70C Offset: 0x163D70C VA: 0x163D70C
	public static bool IsEventPointGroupWin(int evGroupId, int condVal) { }

	// RVA: 0x163D7E0 Offset: 0x163D7E0 VA: 0x163D7E0
	public static bool IsEventNormaPointClear(int evGroupId, long condVal) { }

	// RVA: 0x163D8BC Offset: 0x163D8BC VA: 0x163D8BC
	public static bool IsQuestAvailable(int questId) { }

	// RVA: 0x163DA58 Offset: 0x163DA58 VA: 0x163DA58
	public static bool IsQuestGroupAvailable(int groupId, int questCount) { }

	// RVA: 0x163E3D0 Offset: 0x163E3D0 VA: 0x163E3D0
	public static bool IsQuestResettable(int targetId) { }

	// RVA: 0x163E250 Offset: 0x163E250 VA: 0x163E250
	public static bool IsCostumeGet(int svtId, int costumeId) { }

	// RVA: 0x163E5A8 Offset: 0x163E5A8 VA: 0x163E5A8
	public static bool IsServantGetBeforeEventEnd(int svtId, int eventId) { }

	// RVA: 0x163E7FC Offset: 0x163E7FC VA: 0x163E7FC
	public static bool IsVoicePlayFlag(int svtId, int num) { }

	// RVA: 0x163E97C Offset: 0x163E97C VA: 0x163E97C
	public static bool IsEventEnd(int eventId) { }

	// RVA: 0x163EACC Offset: 0x163EACC VA: 0x163EACC
	public static bool IsEventGroupPointRatioInTerm(int eventTerm, int rate) { }

	// RVA: 0x163EBA0 Offset: 0x163EBA0 VA: 0x163EBA0
	public static bool IsEventGroupRankInTerm(int eventTerm, int rank) { }

	// RVA: 0x163ECB8 Offset: 0x163ECB8 VA: 0x163ECB8
	public static bool IsNotEventRaceQuestOrNotAllGroupGoal(int questGroupId, int eventTerm) { }

	// RVA: 0x163F770 Offset: 0x163F770 VA: 0x163F770
	public static bool IsNotEventRaceQuestOrNotTargetRankGoal(int questGroupId, int eventTerm) { }

	// RVA: 0x163EDD8 Offset: 0x163EDD8 VA: 0x163EDD8
	public static bool IsEventRaceGroupTotalWin(int eventId, int groupId) { }

	// RVA: 0x163EF50 Offset: 0x163EF50 VA: 0x163EF50
	public static bool IsEventScriptFlagChecked(int eventId, int flagId) { }

	// RVA: 0x16495B8 Offset: 0x16495B8 VA: 0x16495B8
	public static bool IsEventRaceGoalScriptPlayed(int eventId, int termId, int groupId) { }

	// RVA: 0x1649734 Offset: 0x1649734 VA: 0x1649734
	public static bool IsEventRaceRankedScriptPlayed(int eventId, int termId, int rank) { }

	// RVA: 0x163DB9C Offset: 0x163DB9C VA: 0x163DB9C
	public static bool IsReleaseCostume(int svtId, int costumeId) { }

	// RVA: 0x1643CDC Offset: 0x1643CDC VA: 0x1643CDC
	public static bool IsQuestNotClearAndCond(int[] condQuestId) { }

	// RVA: 0x163F0D4 Offset: 0x163F0D4 VA: 0x163F0D4
	public static bool IsSvtRecoverd(int eventId, int condNum) { }

	// RVA: 0x163F308 Offset: 0x163F308 VA: 0x163F308
	private static bool IsShopReleased(int targetId) { }

	// RVA: 0x1646EB8 Offset: 0x1646EB8 VA: 0x1646EB8
	private static int GetShopReleasedCount(int targetId) { }

	// RVA: 0x163F4A8 Offset: 0x163F4A8 VA: 0x163F4A8
	public static bool IsEventPoint(int eventId, long evPoint) { }

	// RVA: 0x163F4D4 Offset: 0x163F4D4 VA: 0x163F4D4
	public static bool IsVoicePlayCount(int eventId, int playCount) { }

	// RVA: 0x163F700 Offset: 0x163F700 VA: 0x163F700
	public static bool IsArrivalDate(long time) { }

	// RVA: 0x163F8E8 Offset: 0x163F8E8 VA: 0x163F8E8
	public static bool IsPlayerGenderType(int genderType) { }

	// RVA: 0x163F924 Offset: 0x163F924 VA: 0x163F924
	public static bool IsShopGroupLimit(int condValue, int limitNum) { }

	// RVA: 0x163FB70 Offset: 0x163FB70 VA: 0x163FB70
	public static bool IsEventStatus(int eventId, long flagId) { }

	// RVA: 0x163FD58 Offset: 0x163FD58 VA: 0x163FD58
	public static bool IsServantHavingLimitMax(int svtId, int condNum) { }

	// RVA: 0x16470C8 Offset: 0x16470C8 VA: 0x16470C8
	public static int GetServantHavingLimitMaxCount(int targetId) { }

	// RVA: 0x16484D8 Offset: 0x16484D8 VA: 0x16484D8
	public static long GetEventTotalPoint(int eventId) { }

	// RVA: 0x163FDF4 Offset: 0x163FDF4 VA: 0x163FDF4
	public static bool IsSvtEquipFriendShipHaving() { }

	// RVA: 0x16485A8 Offset: 0x16485A8 VA: 0x16485A8
	public static int GetSvtEquipFriendShip() { }

	// RVA: 0x1649824 Offset: 0x1649824 VA: 0x1649824
	public static bool IsSvtEquipFriendShipStorageHaving() { }

	// RVA: 0x163FE84 Offset: 0x163FE84 VA: 0x163FE84
	public static bool IsDownloadedMovie(int questId, int phase) { }

	// RVA: 0x163FFC4 Offset: 0x163FFC4 VA: 0x163FFC4
	public static bool IsEnableQuestByMultipleDate(int questDateRangeId) { }

	// RVA: 0x16498B4 Offset: 0x16498B4 VA: 0x16498B4
	public static bool IsLimitCountCondType(CondType.Kind condType) { }

	// RVA: 0x1640178 Offset: 0x1640178 VA: 0x1640178
	public static bool IsPlayedNotMeetsScript(int notMeetsScriptId) { }

	// RVA: 0x1640218 Offset: 0x1640218 VA: 0x1640218
	public static bool IsCommandCodeGet(int commandCodeId) { }

	// RVA: 0x16498D8 Offset: 0x16498D8 VA: 0x16498D8
	public static bool IsCommandCodeGet(long userId, int commandCodeId) { }

	// RVA: 0x16402B0 Offset: 0x16402B0 VA: 0x16402B0
	public static bool IsNotCommandCodeGet(int commandCodeId) { }

	// RVA: 0x1640380 Offset: 0x1640380 VA: 0x1640380
	public static bool IsAllUserBoxGachaCount(int boxgachaId, long count) { }

	// RVA: 0x1640424 Offset: 0x1640424 VA: 0x1640424
	public static bool IsTotalTdLvCond(CondType.Kind condType, int svtId, int limitCount) { }

	// RVA: 0x1640508 Offset: 0x1640508 VA: 0x1640508
	public static bool IsCommonRelease(int releaseId) { }

	// RVA: 0x1640598 Offset: 0x1640598 VA: 0x1640598
	public static bool IsUserEventStatus(int eventId, EventStatus.Type flag) { }

	// RVA: 0x1640728 Offset: 0x1640728 VA: 0x1640728
	public static bool IsUserQuestStatus(int questId, UserQuestEntity.StatusKind flag) { }

	// RVA: 0x16408B8 Offset: 0x16408B8 VA: 0x16408B8
	public static bool IsBoardGameTokenHaving(int tokenId) { }

	// RVA: 0x1640944 Offset: 0x1640944 VA: 0x1640944
	public static bool IsBoardGameTokenGroupHaving(int gameFlagVal, int kindNum) { }

	// RVA: 0x16409E0 Offset: 0x16409E0 VA: 0x16409E0
	public static bool IsBoardGameTokenGetNum(int tokenId, long value) { }

	// RVA: 0x164862C Offset: 0x164862C VA: 0x164862C
	public static int GetBoardGameTokenGetNum(int tokenId) { }

	// RVA: 0x1640A60 Offset: 0x1640A60 VA: 0x1640A60
	public static bool IsBattleLineReusltCount(int groupId, int val, bool isWin = True) { }

	// RVA: 0x1640C3C Offset: 0x1640C3C VA: 0x1640C3C
	public static bool IsBattleLineReusltConsecutiveCount(int groupId, int val, bool isWin = True, bool isBelow = False) { }

	// RVA: 0x1640E48 Offset: 0x1640E48 VA: 0x1640E48
	public static bool IsBattleGroupReusltCount(int groupId, int val, bool isWin = True) { }

	// RVA: 0x1641024 Offset: 0x1641024 VA: 0x1641024
	public static bool IsWarClear(int condWarId) { }

	// RVA: 0x1643434 Offset: 0x1643434 VA: 0x1643434
	public static bool IsServantLimitClassNum(int[] targetIds, int targetNum) { }

	// RVA: 0x16410F0 Offset: 0x16410F0 VA: 0x16410F0
	public static int CountServantLimitClassNum(int targetId) { }

	// RVA: 0x1643604 Offset: 0x1643604 VA: 0x1643604
	public static int CountTargetParamMatchFunction(int[] targetParam, CondType.CountDelegate func) { }

	// RVA: 0x1649A10 Offset: 0x1649A10 VA: 0x1649A10
	public static int CountServantLevelClassNum(int classId, int level) { }

	// RVA: 0x1649C70 Offset: 0x1649C70 VA: 0x1649C70
	public static int CountServantLevelIdNum(int sarvantId, int level) { }

	// RVA: 0x164351C Offset: 0x164351C VA: 0x164351C
	public static bool IsEquipRarityLevelNum(int[] targetIds, int targetNum) { }

	// RVA: 0x16418A4 Offset: 0x16418A4 VA: 0x16418A4
	public static int CountEquipRarityLevelNum(int targetId) { }

	// RVA: 0x164874C Offset: 0x164874C VA: 0x164874C
	public static int LatestMainScenarioWarClear() { }

	// RVA: 0x1641D98 Offset: 0x1641D98 VA: 0x1641D98
	public static bool UserEventMapValueContains(int mapId, long target) { }

	// RVA: 0x1641F40 Offset: 0x1641F40 VA: 0x1641F40
	public static bool IsUserShopStatus(int shopId, UserShopFlag.FlagKind flagKind) { }

	// RVA: 0x1649D80 Offset: 0x1649D80 VA: 0x1649D80
	public static bool IsMultiTargetParamCond(CondType.Kind condType) { }

	// RVA: 0x16420D0 Offset: 0x16420D0 VA: 0x16420D0
	public static bool IsResetBirthDay() { }

	// RVA: 0x1642130 Offset: 0x1642130 VA: 0x1642130
	public static bool IsEventTypeStartTimeToEndDate(int eventType, int overWriteTime) { }

	// RVA: 0x1642508 Offset: 0x1642508 VA: 0x1642508
	public static bool IsBoxGachaGiftReplaced(int gachaId, int giftId) { }

	// RVA: 0x164008C Offset: 0x164008C VA: 0x164008C
	public static bool IsRouteSelect(int questId, int routeId) { }

	// RVA: 0x1649D9C Offset: 0x1649D9C VA: 0x1649D9C
	public static bool IsRouteSelect(IList<int> questIds, IList<int> routeIds, int count, CondType.CheckType checkType) { }

	// RVA: 0x1642744 Offset: 0x1642744 VA: 0x1642744
	public static bool IsStartRandomMission(int missionId) { }

	// RVA: 0x16427E4 Offset: 0x16427E4 VA: 0x16427E4
	public static int GetRandomMissionClearNum(int missionId) { }

	// RVA: 0x1643784 Offset: 0x1643784 VA: 0x1643784
	public static int CountRandomMissionClearNum(int[] missionIds) { }

	// RVA: 0x1642698 Offset: 0x1642698 VA: 0x1642698
	public static bool IsLimitedPeriodVoiceChangeTypeOn(int targetId) { }

	// RVA: 0x164A484 Offset: 0x164A484 VA: 0x164A484
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC89C4 Offset: 0xCC89C4 VA: 0xCC89C4
	// RVA: 0x164A538 Offset: 0x164A538 VA: 0x164A538
	private static int <LatestMainScenarioWarClear>m__0(WarEntity a, WarEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC89D4 Offset: 0xCC89D4 VA: 0xCC89D4
	// RVA: 0x164A57C Offset: 0x164A57C VA: 0x164A57C
	private static bool <LatestMainScenarioWarClear>m__1(WarEntity ent) { }
}

// Namespace: 
public enum CondType.Kind // TypeDefIndex: 6098
{
	// Fields
	public int value__; // 0x0
	public const CondType.Kind NONE = 0;
	public const CondType.Kind QUEST_CLEAR = 1;
	public const CondType.Kind ITEM_GET = 2;
	public const CondType.Kind USE_ITEM_ETERNITY = 3;
	public const CondType.Kind USE_ITEM_TIME = 4;
	public const CondType.Kind USE_ITEM_COUNT = 5;
	public const CondType.Kind SVT_LEVEL = 6;
	public const CondType.Kind SVT_LIMIT = 7;
	public const CondType.Kind SVT_GET = 8;
	public const CondType.Kind SVT_FRIENDSHIP = 9;
	public const CondType.Kind SVT_GROUP = 10;
	public const CondType.Kind EVENT = 11;
	public const CondType.Kind DATE = 12;
	public const CondType.Kind WEEKDAY = 13;
	public const CondType.Kind PURCHASE_QP_SHOP = 14;
	public const CondType.Kind PURCHASE_STONE_SHOP = 15;
	public const CondType.Kind WAR_CLEAR = 16;
	public const CondType.Kind FLAG = 17;
	public const CondType.Kind SVT_COUNT_STOP = 18;
	public const CondType.Kind BIRTH_DAY = 19;
	public const CondType.Kind EVENT_END = 20;
	public const CondType.Kind SVT_EVENT_JOIN = 21;
	public const CondType.Kind MISSION_CONDITION_DETAIL = 22;
	public const CondType.Kind EVENT_MISSION_CLEAR = 23;
	public const CondType.Kind EVENT_MISSION_ACHIEVE = 24;
	public const CondType.Kind QUEST_CLEAR_NUM = 25;
	public const CondType.Kind NOT_QUEST_GROUP_CLEAR = 26;
	public const CondType.Kind RAID_ALIVE = 27;
	public const CondType.Kind RAID_DEAD = 28;
	public const CondType.Kind RAID_DAMAGE = 29;
	public const CondType.Kind QUEST_CHALLENGE_NUM = 30;
	public const CondType.Kind MASTER_MISSION = 31;
	public const CondType.Kind QUEST_GROUP_CLEAR = 32;
	public const CondType.Kind SUPER_BOSS_DAMAGE = 33;
	public const CondType.Kind SUPER_BOSS_DAMAGE_ALL = 34;
	public const CondType.Kind PURCHASE_SHOP = 35;
	public const CondType.Kind QUEST_NOT_CLEAR = 36;
	public const CondType.Kind NOT_SHOP_PURCHASE = 37;
	public const CondType.Kind NOT_SVT_GET = 38;
	public const CondType.Kind NOT_EVENT_SHOP_PURCHASE = 39;
	public const CondType.Kind SVT_HAVING = 40;
	public const CondType.Kind NOT_SVT_HAVING = 41;
	public const CondType.Kind QUEST_CHALLENGE_NUM_EQUAL = 42;
	public const CondType.Kind QUEST_CHALLENGE_NUM_BELOW = 43;
	public const CondType.Kind QUEST_CLEAR_NUM_EQUAL = 44;
	public const CondType.Kind QUEST_CLEAR_NUM_BELOW = 45;
	public const CondType.Kind QUEST_CLEAR_PHASE = 46;
	public const CondType.Kind NOT_QUEST_CLEAR_PHASE = 47;
	public const CondType.Kind EVENT_POINT_GROUP_WIN = 48;
	public const CondType.Kind EVENT_NORMA_POINT_CLEAR = 49;
	public const CondType.Kind QUEST_AVAILABLE = 50;
	public const CondType.Kind QUEST_GROUP_AVAILABLE_NUM = 51;
	public const CondType.Kind EVENT_NORMA_POINT_NOT_CLEAR = 52;
	public const CondType.Kind NOT_ITEM_GET = 53;
	public const CondType.Kind COSTUME_GET = 54;
	public const CondType.Kind QUEST_RESET_AVAILABLE = 55;
	public const CondType.Kind SVT_GET_BEFORE_EVENT_END = 56;
	public const CondType.Kind QUEST_CLEAR_RAW = 57;
	public const CondType.Kind QUEST_GROUP_CLEAR_RAW = 58;
	public const CondType.Kind EVENT_GROUP_POINT_RATIO_IN_TERM = 59;
	public const CondType.Kind EVENT_GROUP_RANK_IN_TERM = 60;
	public const CondType.Kind NOT_EVENT_RACE_QUEST_OR_NOT_ALL_GROUP_GOAL = 61;
	public const CondType.Kind EVENT_GROUP_TOTAL_WIN_EACH_PLAYER = 62;
	public const CondType.Kind EVENT_SCRIPT_PLAY = 63;
	public const CondType.Kind SVT_COSTUME_RELEASED = 64;
	public const CondType.Kind QUEST_NOT_CLEAR_AND = 65;
	public const CondType.Kind SVT_RECOVERD = 66;
	public const CondType.Kind SHOP_RELEASED = 67;
	public const CondType.Kind EVENT_POINT = 68;
	public const CondType.Kind EVENT_REWARD_DISP_COUNT = 69;
	public const CondType.Kind EQUIP_WITH_TARGET_COSTUME = 70;
	public const CondType.Kind RAID_GROUP_DEAD = 71;
	public const CondType.Kind NOT_SVT_GROUP = 72;
	public const CondType.Kind NOT_QUEST_RESET_AVAILABLE = 73;
	public const CondType.Kind NOT_QUEST_CLEAR_RAW = 74;
	public const CondType.Kind NOT_QUEST_GROUP_CLEAR_RAW = 75;
	public const CondType.Kind NOT_EVENT_MISSION_CLEAR = 76;
	public const CondType.Kind NOT_EVENT_MISSION_ACHIEVE = 77;
	public const CondType.Kind NOT_COSTUME_GET = 78;
	public const CondType.Kind NOT_SVT_COSTUME_RELEASED = 79;
	public const CondType.Kind NOT_EVENT_RACE_QUEST_OR_NOT_TARGET_RANK_GOAL = 80;
	public const CondType.Kind PLAYER_GENDER_TYPE = 81;
	public const CondType.Kind SHOP_GROUP_LIMIT_NUM = 82;
	public const CondType.Kind EVENT_GROUP_POINT = 83;
	public const CondType.Kind EVENT_GROUP_POINT_BELOW = 84;
	public const CondType.Kind EVENT_TOTAL_POINT = 85;
	public const CondType.Kind EVENT_TOTAL_POINT_BELOW = 86;
	public const CondType.Kind EVENT_VALUE = 87;
	public const CondType.Kind EVENT_VALUE_BELOW = 88;
	public const CondType.Kind EVENT_FLAG = 89;
	public const CondType.Kind EVENT_STATUS = 90;
	public const CondType.Kind NOT_EVENT_STATUS = 91;
	public const CondType.Kind FORCE_FALSE = 92;
	public const CondType.Kind SVT_HAVING_LIMIT_MAX = 93;
	public const CondType.Kind EVENT_POINT_BELOW = 94;
	public const CondType.Kind SVT_EQUIP_FRIENDSHIP_HAVING = 95;
	public const CondType.Kind MOVIE_NOT_DOWNLOAD = 96;
	public const CondType.Kind MULTIPLE_DATE = 97;
	public const CondType.Kind SVT_FRIENDSHIP_ABOVE = 98;
	public const CondType.Kind SVT_FRIENDSHIP_BELOW = 99;
	public const CondType.Kind MOVIE_DOWNLOADED = 100;
	public const CondType.Kind ROUTE_SELECT = 101;
	public const CondType.Kind NOT_ROUTE_SELECT = 102;
	public const CondType.Kind LIMIT_COUNT = 103;
	public const CondType.Kind LIMIT_COUNT_ABOVE = 104;
	public const CondType.Kind LIMIT_COUNT_BELOW = 105;
	public const CondType.Kind BAD_END_PLAY = 106;
	public const CondType.Kind COMMAND_CODE_GET = 107;
	public const CondType.Kind NOT_COMMAND_CODE_GET = 108;
	public const CondType.Kind ALL_USERS_BOX_GACHA_COUNT = 109;
	public const CondType.Kind TOTAL_TD_LEVEL = 110;
	public const CondType.Kind TOTAL_TD_LEVEL_ABOVE = 111;
	public const CondType.Kind TOTAL_TD_LEVEL_BELOW = 112;
	public const CondType.Kind COMMON_RELEASE = 113;
	public const CondType.Kind BATTLE_RESULT_WIN = 114;
	public const CondType.Kind BATTLE_RESULT_LOSE = 115;
	public const CondType.Kind EVENT_VALUE_EQUAL = 116;
	public const CondType.Kind BOARD_GAME_TOKEN_HAVING = 117;
	public const CondType.Kind BOARD_GAME_TOKEN_GROUP_HAVING = 118;
	public const CondType.Kind EVENT_FLAG_ON = 119;
	public const CondType.Kind EVENT_FLAG_OFF = 120;
	public const CondType.Kind QUEST_STATUS_FLAG_ON = 121;
	public const CondType.Kind QUEST_STATUS_FLAG_OFF = 122;
	public const CondType.Kind EVENT_VALUE_NOT_EQUAL = 123;
	public const CondType.Kind LIMIT_COUNT_MAX_EQUAL = 124;
	public const CondType.Kind LIMIT_COUNT_MAX_ABOVE = 125;
	public const CondType.Kind LIMIT_COUNT_MAX_BELOW = 126;
	public const CondType.Kind BOARD_GAME_TOKEN_GET_NUM = 127;
	public const CondType.Kind BATTLE_LINE_WIN_ABOVE = 128;
	public const CondType.Kind BATTLE_LINE_LOSE_ABOVE = 129;
	public const CondType.Kind BATTLE_LINE_CONTINUE_WIN = 130;
	public const CondType.Kind BATTLE_LINE_CONTINUE_LOSE = 131;
	public const CondType.Kind BATTLE_LINE_CONTINUE_WIN_BELOW = 132;
	public const CondType.Kind BATTLE_LINE_CONTINUE_LOSE_BELOW = 133;
	public const CondType.Kind BATTLE_GROUP_WIN_AVOVE = 134;
	public const CondType.Kind BATTLE_GROUP_LOSE_AVOVE = 135;
	public const CondType.Kind SVT_LIMIT_CLASS_NUM = 136;
	public const CondType.Kind OVER_TIME_LIMIT_RAID_ALIVE = 137;
	public const CondType.Kind ON_TIME_LIMIT_RAID_DEAD = 138;
	public const CondType.Kind ON_TIME_LIMIT_RAID_DEAD_NUM = 139;
	public const CondType.Kind RAID_BATTLE_PROGRESS_ABOVE = 140;
	public const CondType.Kind SVT_EQUIP_RARITY_LEVEL_NUM = 141;
	public const CondType.Kind LATEST_MAIN_SCENARIO_WAR_CLEAR = 142;
	public const CondType.Kind EVENT_MAP_VALUE_CONTAINS = 143;
