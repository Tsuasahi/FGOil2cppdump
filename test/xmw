	public const BuffList.CHANGEVALUE RATIO_HP_HIGH = 0;
	public const BuffList.CHANGEVALUE RATIO_HP_LOW = 1;
}

// Namespace: 
public enum BuffList.ProgressTurnCond // TypeDefIndex: 6091
{
	// Fields
	public int value__; // 0x0
	public const BuffList.ProgressTurnCond NONE = 0;
	public const BuffList.ProgressTurnCond ALIVE_ENEMY_ALLY = 1;
	public const BuffList.ProgressTurnCond ALIVE_SELF = 2;
}

// Namespace: 
public class CacheFolderName // TypeDefIndex: 6092
{
	// Fields
	private static Dictionary<CacheFolderName.FOLDER_NAME, string> folderList; // 0x0
	private static Dictionary<CacheFolderName.FOLDER_NAME, string> convertedFolderList; // 0x8

	// Methods

	// RVA: 0x19263C0 Offset: 0x19263C0 VA: 0x19263C0
	public void .ctor() { }

	// RVA: 0x19263C8 Offset: 0x19263C8 VA: 0x19263C8
	public static string getFolderName(CacheFolderName.FOLDER_NAME name) { }

	// RVA: 0x19264DC Offset: 0x19264DC VA: 0x19264DC
	public static string getFolderNameNotConverted(CacheFolderName.FOLDER_NAME name) { }

	// RVA: 0x19265F0 Offset: 0x19265F0 VA: 0x19265F0
	public static string convertFolderName(string name) { }

	// RVA: 0x1926934 Offset: 0x1926934 VA: 0x1926934
	private static void .cctor() { }
}

// Namespace: 
public enum CacheFolderName.FOLDER_NAME // TypeDefIndex: 6093
{
	// Fields
	public int value__; // 0x0
	public const CacheFolderName.FOLDER_NAME ASSET = 0;
	public const CacheFolderName.FOLDER_NAME MASTER_DATA = 1;
	public const CacheFolderName.FOLDER_NAME PAYMENT_HISTORYS = 2;
}

// Namespace: 
public enum CameraPosition // TypeDefIndex: 6094
{
	// Fields
	public int value__; // 0x0
	public const CameraPosition Players = 0;
	public const CameraPosition Enemies = 1;
	public const CameraPosition PlayerNp = 2;
	public const CameraPosition EnemyNp = 3;
	public const CameraPosition All = 4;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC9136C Offset: 0xC9136C VA: 0xC9136C
internal static class CameraPositionExt // TypeDefIndex: 6095
{
	// Methods

	[ExtensionAttribute] // RVA: 0xD36078 Offset: 0xD36078 VA: 0xD36078
	// RVA: 0x19270AC Offset: 0x19270AC VA: 0x19270AC
	public static string DisplayName(CameraPosition camPos) { }
}

// Namespace: 
public class CollectionStatus // TypeDefIndex: 6096
{
	// Methods

	// RVA: 0x1571468 Offset: 0x1571468 VA: 0x1571468
	public void .ctor() { }
}

// Namespace: 
public enum CollectionStatus.Kind // TypeDefIndex: 6097
{
	// Fields
	public int value__; // 0x0
	public const CollectionStatus.Kind NOT_GET = 0;
	public const CollectionStatus.Kind FIND = 1;
	public const CollectionStatus.Kind GET = 2;
	public const CollectionStatus.Kind ENEMY_COLLECTION_DETAIL = 3;
	public const CollectionStatus.Kind HIDE = 4;
	public const CollectionStatus.Kind NPC = 5;
	public const CollectionStatus.Kind SECRET = 6;
	public const CollectionStatus.Kind DATA_LOST = 7;
}

// Namespace: 
public class CombineAdjustTarget // TypeDefIndex: 6098
{
	// Fields
	public const int FIXED_VAL = 1000;

	// Methods

	// RVA: 0x15718E0 Offset: 0x15718E0 VA: 0x15718E0
	public void .ctor() { }

	// RVA: 0x15718E8 Offset: 0x15718E8 VA: 0x15718E8
	public static bool isTerminalExposable(CombineAdjustTarget.TYPE type) { }
}

// Namespace: 
public enum CombineAdjustTarget.TYPE // TypeDefIndex: 6099
{
	// Fields
	public int value__; // 0x0
	public const CombineAdjustTarget.TYPE COMBINE_QP = 1;
	public const CombineAdjustTarget.TYPE COMBINE_EXP = 2;
	public const CombineAdjustTarget.TYPE ACTIVE_SKILL = 3;
	public const CombineAdjustTarget.TYPE LARGE_SUCCESS = 4;
	public const CombineAdjustTarget.TYPE SUPER_SUCCESS = 5;
	public const CombineAdjustTarget.TYPE LIMIT_QP = 6;
	public const CombineAdjustTarget.TYPE LIMIT_ITEM = 7;
	public const CombineAdjustTarget.TYPE SKILL_QP = 8;
	public const CombineAdjustTarget.TYPE SKILL_ITEM = 9;
	public const CombineAdjustTarget.TYPE TREASURE_DEVICE_QP = 10;
	public const CombineAdjustTarget.TYPE TREASURE_DEVICE_ITEM = 11;
	public const CombineAdjustTarget.TYPE QUEST_AP = 12;
	public const CombineAdjustTarget.TYPE QUEST_EXP = 13;
	public const CombineAdjustTarget.TYPE QUEST_QP = 14;
	public const CombineAdjustTarget.TYPE QUEST_DROP = 15;
	public const CombineAdjustTarget.TYPE SVTEQUIP_COMBINE_QP = 16;
	public const CombineAdjustTarget.TYPE SVTEQUIP_COMBINE_EXP = 17;
	public const CombineAdjustTarget.TYPE SVTEQUIP_LARGE_SUCCESS = 18;
	public const CombineAdjustTarget.TYPE SVTEQUIP_SUPER_SUCCESS = 19;
	public const CombineAdjustTarget.TYPE QUEST_EVENT_POINT = 20;
	public const CombineAdjustTarget.TYPE ENEMY_SVT_CLASS_PICK_UP = 21;
	public const CombineAdjustTarget.TYPE EVENT_EACH_DROP_NUM = 22;
	public const CombineAdjustTarget.TYPE EVENT_EACH_DROP_RATE = 23;
	public const CombineAdjustTarget.TYPE QUEST_FP = 24;
	public const CombineAdjustTarget.TYPE QUEST_AP_FIRST_TIME = 25;
	public const CombineAdjustTarget.TYPE DAILY_DROP_UP = 26;
	public const CombineAdjustTarget.TYPE EXCHANGE_SVT_COMBINE_EXP = 27;
	public const CombineAdjustTarget.TYPE QUEST_USE_CONTINUE_ITEM = 28;
	public const CombineAdjustTarget.TYPE FRIEND_POINT_GACHA_FREE_DRAW_NUM = 29;
	public const CombineAdjustTarget.TYPE QUEST_USE_FRIENDSHIP_UP_ITEM = 30;
}

// Namespace: 
public class CondType // TypeDefIndex: 6100
{
	// Fields
	private static readonly int EVENT_POINT_DEVIDER; // 0x0
	private static readonly int EVENT_RACE_DEVIDER; // 0x4
	private static readonly int TARGET_PARAM_NUM; // 0x8
	private static int EventId; // 0xC
	private static UserQuestMaster uQuestMst; // 0x10
	private static readonly Dictionary<int, string> cachedServantEquipIdStrDic; // 0x18
	private static long lastUserId; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCBF248 Offset: 0xCBF248 VA: 0xCBF248
	private static CondType.CountDelegate <>f__mg$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCBF258 Offset: 0xCBF258 VA: 0xCBF258
	private static CondType.CountDelegate <>f__mg$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCBF268 Offset: 0xCBF268 VA: 0xCBF268
	private static CondType.CountDelegate <>f__mg$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCBF278 Offset: 0xCBF278 VA: 0xCBF278
	private static CondType.CountDelegate <>f__mg$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCBF288 Offset: 0xCBF288 VA: 0xCBF288
	private static Comparison<WarEntity> <>f__am$cache0; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCBF298 Offset: 0xCBF298 VA: 0xCBF298
	private static Predicate<WarEntity> <>f__am$cache1; // 0x50

	// Methods

	// RVA: 0x1832B30 Offset: 0x1832B30 VA: 0x1832B30
	public void .ctor() { }

	// RVA: 0x1832B38 Offset: 0x1832B38 VA: 0x1832B38
	private static UserQuestMaster GetUserQuestMaster() { }

	// RVA: 0x1832C2C Offset: 0x1832C2C VA: 0x1832C2C
	public static bool IsOpen(CondType.Kind condType, int targetId, long condValue) { }

	// RVA: 0x183968C Offset: 0x183968C VA: 0x183968C
	private static bool checkRaidTimeLimitOver(int targetId, int condValue) { }

	// RVA: 0x183983C Offset: 0x183983C VA: 0x183983C
	private static bool TimeLimitRaidDead(int eventId, int targetId) { }

	// RVA: 0x1839A78 Offset: 0x1839A78 VA: 0x1839A78
	private static bool RaidBattleProgressAbove(int questId, float rate) { }

	// RVA: 0x1836130 Offset: 0x1836130 VA: 0x1836130
	private static bool checkCondTypeRaidAlive(int targetId, int condValue, bool alive) { }

	// RVA: 0x1836360 Offset: 0x1836360 VA: 0x1836360
	private static bool checkCondTypeRaidGroupAlive(int targetId, int condValue, bool alive) { }

	// RVA: 0x183AB9C Offset: 0x183AB9C VA: 0x183AB9C
	private static int GetRaidGroupDeadCount(int targetId, long condValue) { }

	// RVA: 0x183ADA4 Offset: 0x183ADA4 VA: 0x183ADA4
	private static int GetItemGetCount(int targetId) { }

	// RVA: 0x18360B4 Offset: 0x18360B4 VA: 0x18360B4
	private static bool IsItemGet(int targetId, int condValue) { }

	// RVA: 0x183AF18 Offset: 0x183AF18 VA: 0x183AF18
	public static bool IsOpenWithSumOfProgressCount(CondType.Kind condType, int[] targetIds, int targetNum) { }

	// RVA: 0x183BBA4 Offset: 0x183BBA4 VA: 0x183BBA4
	private static CondType.Kind GetNegativeSideCond(CondType.Kind cond) { }

	// RVA: 0x183BC3C Offset: 0x183BC3C VA: 0x183BC3C
	public static bool IsOpen(CondType.Kind condType, int[] condValues, int condNum) { }

	// RVA: 0x183C148 Offset: 0x183C148 VA: 0x183C148
	public static bool IsOpenForUsrSvt(CondType.Kind condType, int condValue, long userSvtId) { }

	// RVA: 0x183D16C Offset: 0x183D16C VA: 0x183D16C
	public static bool IsOpen(CondType.Kind condType, int condValue, long userId, int svtId) { }

	// RVA: 0x183D8CC Offset: 0x183D8CC VA: 0x183D8CC
	public static string OpenConditionText(CondType.Kind condType, int condValue, string textType = "") { }

	// RVA: 0x183E578 Offset: 0x183E578 VA: 0x183E578
	public static long GetProgressNum(CondType.Kind condType, int targetId, long condValue, int eventId) { }

	// RVA: 0x1840CB8 Offset: 0x1840CB8 VA: 0x1840CB8
	public static long GetProgressNumByTargetIds(CondType.Kind condType, int[] targetIds) { }

	// RVA: 0x1840EA0 Offset: 0x1840EA0 VA: 0x1840EA0
	public static bool IsConst(CondType.Kind condType) { }

	// RVA: 0x183C5FC Offset: 0x183C5FC VA: 0x183C5FC
	public static bool IsQuestClear(long userId, int condQuestId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1834AFC Offset: 0x1834AFC VA: 0x1834AFC
	public static bool IsQuestClear(int condQuestId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x183DBD0 Offset: 0x183DBD0 VA: 0x183DBD0
	public static string OpenConditionTextQuestClear(int condQuestId, string textType = "") { }

	// RVA: 0x183595C Offset: 0x183595C VA: 0x183595C
	public static bool IsQuestPhaseClear(long userId, int condQuestId, int condQuestPhase, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1840EAC Offset: 0x1840EAC VA: 0x1840EAC
	public static bool IsQuestPhaseClear(int condQuestId, int condQuestPhase, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x183F030 Offset: 0x183F030 VA: 0x183F030
	private static int GetQuestClearPhaseCount(long userId, int targetId, int beforeClearQuestId = -1, bool isCheckResetFlag = False) { }

	// RVA: 0x1840F6C Offset: 0x1840F6C VA: 0x1840F6C
	public static string OpenConditionTextQuestPhaseClear(int condQuestId, int condQuestPhase, string textType = "", bool getWarName = False) { }

	// RVA: 0x1841214 Offset: 0x1841214 VA: 0x1841214
	public static bool IsQuestEnable(int openQuestid, int closeQuestid) { }

	// RVA: 0x183C6EC Offset: 0x183C6EC VA: 0x183C6EC
	public static bool IsServantLevel(long userSvtId, int condLv) { }

	// RVA: 0x1834BAC Offset: 0x1834BAC VA: 0x1834BAC
	public static bool IsServantLevel(int svtId, int condLv) { }

	// RVA: 0x183D464 Offset: 0x183D464 VA: 0x183D464
	public static bool IsServantLevel(long userId, int svtId, int condLv) { }

	// RVA: 0x183DD1C Offset: 0x183DD1C VA: 0x183DD1C
	public static string OpenConditionTextServantLevel(int condLv, string textType = "") { }

	// RVA: 0x183C890 Offset: 0x183C890 VA: 0x183C890
	public static bool IsServantLimit(long userSvtId, int condLimitCount, CondType.CheckType checkType = 1) { }

	// RVA: 0x183CF80 Offset: 0x183CF80 VA: 0x183CF80
	public static bool IsServantLimitImage(long userSvtId, int condLimitCount, CondType.CheckType checkType = 1) { }

	// RVA: 0x1834C54 Offset: 0x1834C54 VA: 0x1834C54
	public static bool IsServantLimit(int svtId, int condLimitCount, CondType.CheckType checkType) { }

	// RVA: 0x183D518 Offset: 0x183D518 VA: 0x183D518
	public static bool IsServantLimit(long userId, int svtId, int condLimitCount, CondType.CheckType checkType = 1) { }

	// RVA: 0x183DE00 Offset: 0x183DE00 VA: 0x183DE00
	public static string OpenConditionTextServantLimit(int condLimitCount, string textType = "") { }

	// RVA: 0x1834D04 Offset: 0x1834D04 VA: 0x1834D04
	public static bool IsServantGet(int condSvtId) { }

	// RVA: 0x183CAA4 Offset: 0x183CAA4 VA: 0x183CAA4
	public static bool IsServantGet(long userId, int condSvtId) { }

	// RVA: 0x184139C Offset: 0x184139C VA: 0x184139C
	public static bool IsServantGet(long userSvtId) { }

	// RVA: 0x18358CC Offset: 0x18358CC VA: 0x18358CC
	public static bool IsServantHaving(int svtId) { }

	// RVA: 0x183EFA0 Offset: 0x183EFA0 VA: 0x183EFA0
	private static int GetServantHavingCount(int targetId) { }

	// RVA: 0x183DEE4 Offset: 0x183DEE4 VA: 0x183DEE4
	public static string OpenConditionTextServantGet(int condSvtId, string textType = "") { }

	// RVA: 0x1834D9C Offset: 0x1834D9C VA: 0x1834D9C
	public static bool IsServantFriendship(int svtId, int condFriendshipRank, bool isAbove) { }

	// RVA: 0x183D61C Offset: 0x183D61C VA: 0x183D61C
	public static bool IsServantFriendship(long userId, int svtId, int condFriendshipRank, bool isAbove = True) { }

	// RVA: 0x183CB54 Offset: 0x183CB54 VA: 0x183CB54
	public static bool IsServantFriendship(long userSvtId, int condFriendshipRank) { }

	// RVA: 0x183E020 Offset: 0x183E020 VA: 0x183E020
	public static string OpenConditionTextServantFriendship(int condFriendshipRank, string textType = "") { }

	// RVA: 0x1834E4C Offset: 0x1834E4C VA: 0x1834E4C
	public static bool IsServantGroup(int condGroup) { }

	// RVA: 0x183CE10 Offset: 0x183CE10 VA: 0x183CE10
	public static bool IsServantGroup(long userId, int condGroup) { }

	// RVA: 0x183E104 Offset: 0x183E104 VA: 0x183E104
	public static string OpenConditionTextServantGroup(int condGroup, string textType = "") { }

	// RVA: 0x1834EE4 Offset: 0x1834EE4 VA: 0x1834EE4
	public static bool IsEvent(int condId) { }

	// RVA: 0x183E1E8 Offset: 0x183E1E8 VA: 0x183E1E8
	public static string OpenConditionTextEvent(int condId, string textType = "") { }

	// RVA: 0x1834F8C Offset: 0x1834F8C VA: 0x1834F8C
	public static bool IsPurchaseQpShop(int condId) { }

	// RVA: 0x183D764 Offset: 0x183D764 VA: 0x183D764
	public static bool IsPurchaseQpShop(long userId, int condId) { }

	// RVA: 0x183E320 Offset: 0x183E320 VA: 0x183E320
	public static string OpenConditionTextPurchaseQpShop(int condId, string textType = "") { }

	// RVA: 0x1835030 Offset: 0x1835030 VA: 0x1835030
	public static bool IsPurchaseStoneShop(int condId) { }

	// RVA: 0x183D818 Offset: 0x183D818 VA: 0x183D818
	public static bool IsPurchaseStoneShop(long userId, int condId) { }

	// RVA: 0x18354C0 Offset: 0x18354C0 VA: 0x18354C0
	public static bool IsPurchaseShop(int targetId, int condValue = 1) { }

	// RVA: 0x183EE34 Offset: 0x183EE34 VA: 0x183EE34
	private static int GetPurchaseShopCount(int targetId) { }

	// RVA: 0x183E44C Offset: 0x183E44C VA: 0x183E44C
	public static string OpenConditionTextPurchaseStoneShop(int condId, string textType = "") { }

	// RVA: 0x18350D4 Offset: 0x18350D4 VA: 0x18350D4
	public static bool IsMissionCondDetail(int condId, int condVal) { }

	// RVA: 0x1835224 Offset: 0x1835224 VA: 0x1835224
	public static bool IsMissionClear(int condId) { }

	// RVA: 0x18415F4 Offset: 0x18415F4 VA: 0x18415F4
	public static bool IsMissionClearOnly(int condId) { }

	// RVA: 0x1835308 Offset: 0x1835308 VA: 0x1835308
	public static bool IsMissionAchive(int condId) { }

	// RVA: 0x183FA80 Offset: 0x183FA80 VA: 0x183FA80
	public static int GetNumMissionCondDetail(int condId, int condVal) { }

	// RVA: 0x183F478 Offset: 0x183F478 VA: 0x183F478
	public static int GetQuestClearCount(int targetId) { }

	// RVA: 0x183FBF8 Offset: 0x183FBF8 VA: 0x183FBF8
	public static int GetMIssionClearNum(int condId) { }

	// RVA: 0x183FD7C Offset: 0x183FD7C VA: 0x183FD7C
	public static int GetMissionAchiveNum(int condId) { }

	// RVA: 0x183F8F8 Offset: 0x183F8F8 VA: 0x183F8F8
	public static int GetSvtGetNum(int condId) { }

	// RVA: 0x183F814 Offset: 0x183F814 VA: 0x183F814
	public static int GetSvtLimitCnt(int condId, int condVal) { }

	// RVA: 0x183F730 Offset: 0x183F730 VA: 0x183F730
	public static int GetSvtLv(int condId, int condVal) { }

	// RVA: 0x183F964 Offset: 0x183F964 VA: 0x183F964
	public static int GetSvtFriendShip(int condId, int condVal) { }

	// RVA: 0x18353E8 Offset: 0x18353E8 VA: 0x18353E8
	public static bool IsQuestClearNum(int condId, int condVal) { }

	// RVA: 0x183FF00 Offset: 0x183FF00 VA: 0x183FF00
	public static int GetQuestClearNum(int condId, int condVal) { }

	// RVA: 0x1835544 Offset: 0x1835544 VA: 0x1835544
	public static bool IsNotQuestGroupClear(int questId, int groupId, int condVal, out int[] sameGroupQuestIds, bool isCheckResetFlag = False) { }

	// RVA: 0x18416D4 Offset: 0x18416D4 VA: 0x18416D4
	public static bool IsNotQuestGroupClear(int targetId, int condValue) { }

	// RVA: 0x183EAF0 Offset: 0x183EAF0 VA: 0x183EAF0
	private static int GetNotQuestGoupClearCount(int questId, int groupId, out int[] sameGroupQuestIds, bool isCheckResetFlag = False) { }

	// RVA: 0x18355E8 Offset: 0x18355E8 VA: 0x18355E8
	public static bool IsQuestGroupClear(int questId, int groupId, int condVal, bool isCheckResetFlag = False) { }

	// RVA: 0x183ECE8 Offset: 0x183ECE8 VA: 0x183ECE8
	private static int GetQuestGroupClearCount(int questId, int groupId, bool isCheckResetFlag = False) { }

	// RVA: 0x1840168 Offset: 0x1840168 VA: 0x1840168
	public static long GetOpenTime() { }

	// RVA: 0x184186C Offset: 0x184186C VA: 0x184186C
	public static int GetNumIsOpenByDate(long condVal) { }

	// RVA: 0x18401C8 Offset: 0x18401C8 VA: 0x18401C8
	public static long GetRaidDamage(int condId, long condVal) { }

	// RVA: 0x18402F0 Offset: 0x18402F0 VA: 0x18402F0
	public static int GetQuestChallengeNum(int condId, int condVal) { }

	// RVA: 0x1840558 Offset: 0x1840558 VA: 0x1840558
	public static long GetSuperBossDamage(int condId, long condVal) { }

	// RVA: 0x1840680 Offset: 0x1840680 VA: 0x1840680
	public static long GetSuperBossDamageAll(int condId, long condVal) { }

	// RVA: 0x1835754 Offset: 0x1835754 VA: 0x1835754
	public static bool IsNotEventShopPurchase(int targetId) { }

	// RVA: 0x1835684 Offset: 0x1835684 VA: 0x1835684
	public static bool IsNotServantGet(int servantId) { }

	// RVA: 0x183BD5C Offset: 0x183BD5C VA: 0x183BD5C
	public static bool IsNotShopPurchase(int[] values) { }

	// RVA: 0x183BE94 Offset: 0x183BE94 VA: 0x183BE94
	public static bool IsShopPurchase(int[] values, int num) { }

	// RVA: 0x1835A30 Offset: 0x1835A30 VA: 0x1835A30
	public static bool IsEventPointGroupWin(int evGroupId, int condVal) { }

	// RVA: 0x1835B04 Offset: 0x1835B04 VA: 0x1835B04
	public static bool IsEventNormaPointClear(int evGroupId, long condVal) { }

	// RVA: 0x1835BE0 Offset: 0x1835BE0 VA: 0x1835BE0
	public static bool IsQuestAvailable(int questId) { }

	// RVA: 0x1835D7C Offset: 0x1835D7C VA: 0x1835D7C
	public static bool IsQuestGroupAvailable(int groupId, int questCount) { }

	// RVA: 0x18366F4 Offset: 0x18366F4 VA: 0x18366F4
	public static bool IsQuestResettable(int targetId) { }

	// RVA: 0x1836574 Offset: 0x1836574 VA: 0x1836574
	public static bool IsCostumeGet(int svtId, int costumeId) { }

	// RVA: 0x18368CC Offset: 0x18368CC VA: 0x18368CC
	public static bool IsServantGetBeforeEventEnd(int svtId, int eventId) { }

	// RVA: 0x1836B20 Offset: 0x1836B20 VA: 0x1836B20
	public static bool IsVoicePlayFlag(int svtId, int num) { }

	// RVA: 0x1836CA0 Offset: 0x1836CA0 VA: 0x1836CA0
	public static bool IsEventEnd(int eventId) { }

	// RVA: 0x1836DF0 Offset: 0x1836DF0 VA: 0x1836DF0
	public static bool IsEventGroupPointRatioInTerm(int eventTerm, int rate) { }

	// RVA: 0x1836EC4 Offset: 0x1836EC4 VA: 0x1836EC4
	public static bool IsEventGroupRankInTerm(int eventTerm, int rank) { }

	// RVA: 0x1836FDC Offset: 0x1836FDC VA: 0x1836FDC
	public static bool IsNotEventRaceQuestOrNotAllGroupGoal(int questGroupId, int eventTerm) { }

	// RVA: 0x1837A94 Offset: 0x1837A94 VA: 0x1837A94
	public static bool IsNotEventRaceQuestOrNotTargetRankGoal(int questGroupId, int eventTerm) { }

	// RVA: 0x18370FC Offset: 0x18370FC VA: 0x18370FC
	public static bool IsEventRaceGroupTotalWin(int eventId, int groupId) { }

	// RVA: 0x1837274 Offset: 0x1837274 VA: 0x1837274
	public static bool IsEventScriptFlagChecked(int eventId, int flagId) { }

	// RVA: 0x18418DC Offset: 0x18418DC VA: 0x18418DC
	public static bool IsEventRaceGoalScriptPlayed(int eventId, int termId, int groupId) { }

	// RVA: 0x1841A58 Offset: 0x1841A58 VA: 0x1841A58
	public static bool IsEventRaceRankedScriptPlayed(int eventId, int termId, int rank) { }

	// RVA: 0x1835EC0 Offset: 0x1835EC0 VA: 0x1835EC0
	public static bool IsReleaseCostume(int svtId, int costumeId) { }

	// RVA: 0x183C000 Offset: 0x183C000 VA: 0x183C000
	public static bool IsQuestNotClearAndCond(int[] condQuestId) { }

	// RVA: 0x18373F8 Offset: 0x18373F8 VA: 0x18373F8
	public static bool IsSvtRecoverd(int eventId, int condNum) { }

	// RVA: 0x183762C Offset: 0x183762C VA: 0x183762C
	private static bool IsShopReleased(int targetId) { }

	// RVA: 0x183F1DC Offset: 0x183F1DC VA: 0x183F1DC
	private static int GetShopReleasedCount(int targetId) { }

	// RVA: 0x18377CC Offset: 0x18377CC VA: 0x18377CC
	public static bool IsEventPoint(int eventId, long evPoint) { }

	// RVA: 0x18377F8 Offset: 0x18377F8 VA: 0x18377F8
	public static bool IsVoicePlayCount(int eventId, int playCount) { }

	// RVA: 0x1837A24 Offset: 0x1837A24 VA: 0x1837A24
	public static bool IsArrivalDate(long time) { }

	// RVA: 0x1837C0C Offset: 0x1837C0C VA: 0x1837C0C
	public static bool IsPlayerGenderType(int genderType) { }

	// RVA: 0x1837C48 Offset: 0x1837C48 VA: 0x1837C48
	public static bool IsShopGroupLimit(int condValue, int limitNum) { }

	// RVA: 0x1837E94 Offset: 0x1837E94 VA: 0x1837E94
	public static bool IsEventStatus(int eventId, long flagId) { }

	// RVA: 0x183807C Offset: 0x183807C VA: 0x183807C
	public static bool IsServantHavingLimitMax(int svtId, int condNum) { }

	// RVA: 0x183F3EC Offset: 0x183F3EC VA: 0x183F3EC
	public static int GetServantHavingLimitMaxCount(int targetId) { }

	// RVA: 0x18407FC Offset: 0x18407FC VA: 0x18407FC
	public static long GetEventTotalPoint(int eventId) { }

	// RVA: 0x1838118 Offset: 0x1838118 VA: 0x1838118
	public static bool IsSvtEquipFriendShipHaving() { }

	// RVA: 0x18408CC Offset: 0x18408CC VA: 0x18408CC
	public static int GetSvtEquipFriendShip() { }

	// RVA: 0x1841B48 Offset: 0x1841B48 VA: 0x1841B48
	public static bool IsSvtEquipFriendShipStorageHaving() { }

	// RVA: 0x18381A8 Offset: 0x18381A8 VA: 0x18381A8
	public static bool IsDownloadedMovie(int questId, int phase) { }

	// RVA: 0x18382E8 Offset: 0x18382E8 VA: 0x18382E8
	public static bool IsEnableQuestByMultipleDate(int questDateRangeId) { }

	// RVA: 0x1841BD8 Offset: 0x1841BD8 VA: 0x1841BD8
	public static bool IsLimitCountCondType(CondType.Kind condType) { }

	// RVA: 0x183849C Offset: 0x183849C VA: 0x183849C
	public static bool IsPlayedNotMeetsScript(int notMeetsScriptId) { }

	// RVA: 0x183853C Offset: 0x183853C VA: 0x183853C
	public static bool IsCommandCodeGet(int commandCodeId) { }

	// RVA: 0x1841BFC Offset: 0x1841BFC VA: 0x1841BFC
	public static bool IsCommandCodeGet(long userId, int commandCodeId) { }

	// RVA: 0x18385D4 Offset: 0x18385D4 VA: 0x18385D4
	public static bool IsNotCommandCodeGet(int commandCodeId) { }

	// RVA: 0x18386A4 Offset: 0x18386A4 VA: 0x18386A4
	public static bool IsAllUserBoxGachaCount(int boxgachaId, long count) { }

	// RVA: 0x1838748 Offset: 0x1838748 VA: 0x1838748
	public static bool IsTotalTdLvCond(CondType.Kind condType, int svtId, int limitCount) { }

	// RVA: 0x183882C Offset: 0x183882C VA: 0x183882C
	public static bool IsCommonRelease(int releaseId) { }

	// RVA: 0x18388BC Offset: 0x18388BC VA: 0x18388BC
	public static bool IsUserEventStatus(int eventId, EventStatus.Type flag) { }

	// RVA: 0x1838A4C Offset: 0x1838A4C VA: 0x1838A4C
	public static bool IsUserQuestStatus(int questId, UserQuestEntity.StatusKind flag) { }

	// RVA: 0x1838BDC Offset: 0x1838BDC VA: 0x1838BDC
	public static bool IsBoardGameTokenHaving(int tokenId) { }

	// RVA: 0x1838C68 Offset: 0x1838C68 VA: 0x1838C68
	public static bool IsBoardGameTokenGroupHaving(int gameFlagVal, int kindNum) { }

	// RVA: 0x1838D04 Offset: 0x1838D04 VA: 0x1838D04
	public static bool IsBoardGameTokenGetNum(int tokenId, long value) { }

	// RVA: 0x1840950 Offset: 0x1840950 VA: 0x1840950
	public static int GetBoardGameTokenGetNum(int tokenId) { }

	// RVA: 0x1838D84 Offset: 0x1838D84 VA: 0x1838D84
	public static bool IsBattleLineReusltCount(int groupId, int val, bool isWin = True) { }

	// RVA: 0x1838F60 Offset: 0x1838F60 VA: 0x1838F60
	public static bool IsBattleLineReusltConsecutiveCount(int groupId, int val, bool isWin = True, bool isBelow = False) { }

	// RVA: 0x183916C Offset: 0x183916C VA: 0x183916C
	public static bool IsBattleGroupReusltCount(int groupId, int val, bool isWin = True) { }

	// RVA: 0x1839348 Offset: 0x1839348 VA: 0x1839348
	public static bool IsWarClear(int condWarId) { }

	// RVA: 0x183B758 Offset: 0x183B758 VA: 0x183B758
	public static bool IsServantLimitClassNum(int[] targetIds, int targetNum) { }

	// RVA: 0x1839414 Offset: 0x1839414 VA: 0x1839414
	public static int CountServantLimitClassNum(int targetId) { }

	// RVA: 0x183B928 Offset: 0x183B928 VA: 0x183B928
	public static int CountTargetParamMatchFunction(int[] targetParam, CondType.CountDelegate func) { }

	// RVA: 0x1841D34 Offset: 0x1841D34 VA: 0x1841D34
	public static int CountServantLevelClassNum(int classId, int level) { }

	// RVA: 0x1841F94 Offset: 0x1841F94 VA: 0x1841F94
	public static int CountServantLevelIdNum(int sarvantId, int level) { }

	// RVA: 0x183B840 Offset: 0x183B840 VA: 0x183B840
	public static bool IsEquipRarityLevelNum(int[] targetIds, int targetNum) { }

	// RVA: 0x1839BC8 Offset: 0x1839BC8 VA: 0x1839BC8
	public static int CountEquipRarityLevelNum(int targetId) { }

	// RVA: 0x1840A70 Offset: 0x1840A70 VA: 0x1840A70
	public static int LatestMainScenarioWarClear() { }

	// RVA: 0x183A0BC Offset: 0x183A0BC VA: 0x183A0BC
	public static bool UserEventMapValueContains(int mapId, long target) { }

	// RVA: 0x183A264 Offset: 0x183A264 VA: 0x183A264
	public static bool IsUserShopStatus(int shopId, UserShopFlag.FlagKind flagKind) { }

	// RVA: 0x18420A4 Offset: 0x18420A4 VA: 0x18420A4
	public static bool IsMultiTargetParamCond(CondType.Kind condType) { }

	// RVA: 0x183A3F4 Offset: 0x183A3F4 VA: 0x183A3F4
	public static bool IsResetBirthDay() { }

	// RVA: 0x183A454 Offset: 0x183A454 VA: 0x183A454
	public static bool IsEventTypeStartTimeToEndDate(int eventType, int overWriteTime) { }

	// RVA: 0x183A82C Offset: 0x183A82C VA: 0x183A82C
	public static bool IsBoxGachaGiftReplaced(int gachaId, int giftId) { }

	// RVA: 0x18383B0 Offset: 0x18383B0 VA: 0x18383B0
	public static bool IsRouteSelect(int questId, int routeId) { }

	// RVA: 0x18420C0 Offset: 0x18420C0 VA: 0x18420C0
	public static bool IsRouteSelect(IList<int> questIds, IList<int> routeIds, int count, CondType.CheckType checkType) { }

	// RVA: 0x183AA68 Offset: 0x183AA68 VA: 0x183AA68
	public static bool IsStartRandomMission(int missionId) { }

	// RVA: 0x183AB08 Offset: 0x183AB08 VA: 0x183AB08
	public static int GetRandomMissionClearNum(int missionId) { }

	// RVA: 0x183BAA8 Offset: 0x183BAA8 VA: 0x183BAA8
	public static int CountRandomMissionClearNum(int[] missionIds) { }

	// RVA: 0x183A9BC Offset: 0x183A9BC VA: 0x183A9BC
	public static bool IsLimitedPeriodVoiceChangeTypeOn(int targetId) { }

	// RVA: 0x18427A8 Offset: 0x18427A8 VA: 0x18427A8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD36088 Offset: 0xD36088 VA: 0xD36088
	// RVA: 0x184285C Offset: 0x184285C VA: 0x184285C
	private static int <LatestMainScenarioWarClear>m__0(WarEntity a, WarEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD36098 Offset: 0xD36098 VA: 0xD36098
	// RVA: 0x18428A0 Offset: 0x18428A0 VA: 0x18428A0
	private static bool <LatestMainScenarioWarClear>m__1(WarEntity ent) { }
}

// Namespace: 
public enum CondType.Kind // TypeDefIndex: 6101
{
	// Fields
	public int value__; // 0x0
	public const CondType.Kind NONE = 0;
	public const CondType.Kind QUEST_CLEAR = 1;
	public const CondType.Kind ITEM_GET = 2;
	public const CondType.Kind USE_ITEM_ETERNITY = 3;
	public const CondType.Kind USE_ITEM_TIME = 4;
	public const CondType.Kind USE_ITEM_COUNT = 5;
	public const CondType.Kind SVT_LEVEL = 6;
	public const CondType.Kind SVT_LIMIT = 7;
	public const CondType.Kind SVT_GET = 8;
	public const CondType.Kind SVT_FRIENDSHIP = 9;
	public const CondType.Kind SVT_GROUP = 10;
	public const CondType.Kind EVENT = 11;
	public const CondType.Kind DATE = 12;
	public const CondType.Kind WEEKDAY = 13;
	public const CondType.Kind PURCHASE_QP_SHOP = 14;
	public const CondType.Kind PURCHASE_STONE_SHOP = 15;
	public const CondType.Kind WAR_CLEAR = 16;
	public const CondType.Kind FLAG = 17;
	public const CondType.Kind SVT_COUNT_STOP = 18;
	public const CondType.Kind BIRTH_DAY = 19;
	public const CondType.Kind EVENT_END = 20;
	public const CondType.Kind SVT_EVENT_JOIN = 21;
	public const CondType.Kind MISSION_CONDITION_DETAIL = 22;
	public const CondType.Kind EVENT_MISSION_CLEAR = 23;
	public const CondType.Kind EVENT_MISSION_ACHIEVE = 24;
	public const CondType.Kind QUEST_CLEAR_NUM = 25;
	public const CondType.Kind NOT_QUEST_GROUP_CLEAR = 26;
	public const CondType.Kind RAID_ALIVE = 27;
	public const CondType.Kind RAID_DEAD = 28;
	public const CondType.Kind RAID_DAMAGE = 29;
	public const CondType.Kind QUEST_CHALLENGE_NUM = 30;
	public const CondType.Kind MASTER_MISSION = 31;
	public const CondType.Kind QUEST_GROUP_CLEAR = 32;
	public const CondType.Kind SUPER_BOSS_DAMAGE = 33;
	public const CondType.Kind SUPER_BOSS_DAMAGE_ALL = 34;
	public const CondType.Kind PURCHASE_SHOP = 35;
	public const CondType.Kind QUEST_NOT_CLEAR = 36;
	public const CondType.Kind NOT_SHOP_PURCHASE = 37;
	public const CondType.Kind NOT_SVT_GET = 38;
	public const CondType.Kind NOT_EVENT_SHOP_PURCHASE = 39;
	public const CondType.Kind SVT_HAVING = 40;
	public const CondType.Kind NOT_SVT_HAVING = 41;
	public const CondType.Kind QUEST_CHALLENGE_NUM_EQUAL = 42;
	public const CondType.Kind QUEST_CHALLENGE_NUM_BELOW = 43;
	public const CondType.Kind QUEST_CLEAR_NUM_EQUAL = 44;
	public const CondType.Kind QUEST_CLEAR_NUM_BELOW = 45;
	public const CondType.Kind QUEST_CLEAR_PHASE = 46;
	public const CondType.Kind NOT_QUEST_CLEAR_PHASE = 47;
	public const CondType.Kind EVENT_POINT_GROUP_WIN = 48;
	public const CondType.Kind EVENT_NORMA_POINT_CLEAR = 49;
	public const CondType.Kind QUEST_AVAILABLE = 50;
	public const CondType.Kind QUEST_GROUP_AVAILABLE_NUM = 51;
	public const CondType.Kind EVENT_NORMA_POINT_NOT_CLEAR = 52;
	public const CondType.Kind NOT_ITEM_GET = 53;
	public const CondType.Kind COSTUME_GET = 54;
	public const CondType.Kind QUEST_RESET_AVAILABLE = 55;
	public const CondType.Kind SVT_GET_BEFORE_EVENT_END = 56;
	public const CondType.Kind QUEST_CLEAR_RAW = 57;
	public const CondType.Kind QUEST_GROUP_CLEAR_RAW = 58;
	public const CondType.Kind EVENT_GROUP_POINT_RATIO_IN_TERM = 59;
	public const CondType.Kind EVENT_GROUP_RANK_IN_TERM = 60;
	public const CondType.Kind NOT_EVENT_RACE_QUEST_OR_NOT_ALL_GROUP_GOAL = 61;
	public const CondType.Kind EVENT_GROUP_TOTAL_WIN_EACH_PLAYER = 62;
	public const CondType.Kind EVENT_SCRIPT_PLAY = 63;
	public const CondType.Kind SVT_COSTUME_RELEASED = 64;
	public const CondType.Kind QUEST_NOT_CLEAR_AND = 65;
	public const CondType.Kind SVT_RECOVERD = 66;
	public const CondType.Kind SHOP_RELEASED = 67;
	public const CondType.Kind EVENT_POINT = 68;
	public const CondType.Kind EVENT_REWARD_DISP_COUNT = 69;
	public const CondType.Kind EQUIP_WITH_TARGET_COSTUME = 70;
	public const CondType.Kind RAID_GROUP_DEAD = 71;
	public const CondType.Kind NOT_SVT_GROUP = 72;
	public const CondType.Kind NOT_QUEST_RESET_AVAILABLE = 73;
	public const CondType.Kind NOT_QUEST_CLEAR_RAW = 74;
	public const CondType.Kind NOT_QUEST_GROUP_CLEAR_RAW = 75;
	public const CondType.Kind NOT_EVENT_MISSION_CLEAR = 76;
	public const CondType.Kind NOT_EVENT_MISSION_ACHIEVE = 77;
	public const CondType.Kind NOT_COSTUME_GET = 78;
	public const CondType.Kind NOT_SVT_COSTUME_RELEASED = 79;
	public const CondType.Kind NOT_EVENT_RACE_QUEST_OR_NOT_TARGET_RANK_GOAL = 80;
	public const CondType.Kind PLAYER_GENDER_TYPE = 81;
	public const CondType.Kind SHOP_GROUP_LIMIT_NUM = 82;
	public const CondType.Kind EVENT_GROUP_POINT = 83;
	public const CondType.Kind EVENT_GROUP_POINT_BELOW = 84;
	public const CondType.Kind EVENT_TOTAL_POINT = 85;
	public const CondType.Kind EVENT_TOTAL_POINT_BELOW = 86;
	public const CondType.Kind EVENT_VALUE = 87;
	public const CondType.Kind EVENT_VALUE_BELOW = 88;
	public const CondType.Kind EVENT_FLAG = 89;
	public const CondType.Kind EVENT_STATUS = 90;
	public const CondType.Kind NOT_EVENT_STATUS = 91;
	public const CondType.Kind FORCE_FALSE = 92;
	public const CondType.Kind SVT_HAVING_LIMIT_MAX = 93;
	public const CondType.Kind EVENT_POINT_BELOW = 94;
	public const CondType.Kind SVT_EQUIP_FRIENDSHIP_HAVING = 95;
	public const CondType.Kind MOVIE_NOT_DOWNLOAD = 96;
	public const CondType.Kind MULTIPLE_DATE = 97;
	public const CondType.Kind SVT_FRIENDSHIP_ABOVE = 98;
	public const CondType.Kind SVT_FRIENDSHIP_BELOW = 99;
	public const CondType.Kind MOVIE_DOWNLOADED = 100;
	public const CondType.Kind ROUTE_SELECT = 101;
	public const CondType.Kind NOT_ROUTE_SELECT = 102;
	public const CondType.Kind LIMIT_COUNT = 103;
	public const CondType.Kind LIMIT_COUNT_ABOVE = 104;
	public const CondType.Kind LIMIT_COUNT_BELOW = 105;
	public const CondType.Kind BAD_END_PLAY = 106;
	public const CondType.Kind COMMAND_CODE_GET = 107;
	public const CondType.Kind NOT_COMMAND_CODE_GET = 108;
	public const CondType.Kind ALL_USERS_BOX_GACHA_COUNT = 109;
	public const CondType.Kind TOTAL_TD_LEVEL = 110;
	public const CondType.Kind TOTAL_TD_LEVEL_ABOVE = 111;
	public const CondType.Kind TOTAL_TD_LEVEL_BELOW = 112;
	public const CondType.Kind COMMON_RELEASE = 113;
	public const CondType.Kind BATTLE_RESULT_WIN = 114;
	public const CondType.Kind BATTLE_RESULT_LOSE = 115;
	public const CondType.Kind EVENT_VALUE_EQUAL = 116;
	public const CondType.Kind BOARD_GAME_TOKEN_HAVING = 117;
	public const CondType.Kind BOARD_GAME_TOKEN_GROUP_HAVING = 118;
	public const CondType.Kind EVENT_FLAG_ON = 119;
	public const CondType.Kind EVENT_FLAG_OFF = 120;
	public const CondType.Kind QUEST_STATUS_FLAG_ON = 121;
	public const CondType.Kind QUEST_STATUS_FLAG_OFF = 122;
	public const CondType.Kind EVENT_VALUE_NOT_EQUAL = 123;
	public const CondType.Kind LIMIT_COUNT_MAX_EQUAL = 124;
	public const CondType.Kind LIMIT_COUNT_MAX_ABOVE = 125;
	public const CondType.Kind LIMIT_COUNT_MAX_BELOW = 126;
	public const CondType.Kind BOARD_GAME_TOKEN_GET_NUM = 127;
	public const CondType.Kind BATTLE_LINE_WIN_ABOVE = 128;
	public const CondType.Kind BATTLE_LINE_LOSE_ABOVE = 129;
	public const CondType.Kind BATTLE_LINE_CONTINUE_WIN = 130;
	public const CondType.Kind BATTLE_LINE_CONTINUE_LOSE = 131;
	public const CondType.Kind BATTLE_LINE_CONTINUE_WIN_BELOW = 132;
	public const CondType.Kind BATTLE_LINE_CONTINUE_LOSE_BELOW = 133;
	public const CondType.Kind BATTLE_GROUP_WIN_AVOVE = 134;
	public const CondType.Kind BATTLE_GROUP_LOSE_AVOVE = 135;
	public const CondType.Kind SVT_LIMIT_CLASS_NUM = 136;
	public const CondType.Kind OVER_TIME_LIMIT_RAID_ALIVE = 137;
	public const CondType.Kind ON_TIME_LIMIT_RAID_DEAD = 138;
	public const CondType.Kind ON_TIME_LIMIT_RAID_DEAD_NUM = 139;
	public const CondType.Kind RAID_BATTLE_PROGRESS_ABOVE = 140;
	public const CondType.Kind SVT_EQUIP_RARITY_LEVEL_NUM = 141;
	public const CondType.Kind LATEST_MAIN_SCENARIO_WAR_CLEAR = 142;
	public const CondType.Kind EVENT_MAP_VALUE_CONTAINS = 143;
	public const CondType.Kind RESET_BIRTH_DAY = 144;
	public const CondType.Kind SHOP_FLAG_ON = 145;
	public const CondType.Kind SHOP_FLAG_OFF = 146;
	public const CondType.Kind PURCHASE_VALID_SHOP_GROUP = 147;
	public const CondType.Kind SVT_LEVEL_CLASS_NUM = 148;
	public const CondType.Kind SVT_LEVEL_ID_NUM = 149;
	public const CondType.Kind LIMIT_COUNT_IMAGE_EQUAL = 150;
	public const CondType.Kind LIMIT_COUNT_IMAGE_ABOVE = 151;
	public const CondType.Kind LIMIT_COUNT_IMAGE_BELOW = 152;
	public const CondType.Kind EVENT_TYPE_START_TIME_TO_END_DATE = 153;
	public const CondType.Kind EXIST_BOX_GACHA_SCRIPT_REPLACE_GIFT_ID = 154;
	public const CondType.Kind NOT_EXIST_BOX_GACHA_SCRIPT_REPLACE_GIFT_ID = 155;
	public const CondType.Kind LIMITED_PERIOD_VOICE_CHANGE_TYPE_ON = 156;
	public const CondType.Kind START_RANDOM_MISSION = 157;
	public const CondType.Kind RANDOM_MISSION_CLEAR_NUM = 158;
	public const CondType.Kind PROGRESS_VALUE_EQUAL = 159;
	public const CondType.Kind PROGRESS_VALUE_ABOVE = 160;
	public const CondType.Kind PROGRESS_VALUE_BELOW = 161;
	public const CondType.Kind RANDOM_MISSION_TOTAL_CLEAR_NUM = 162;
}

// Namespace: 
public sealed class CondType.CountDelegate : MulticastDelegate // TypeDefIndex: 6102
{
	// Methods

	// RVA: 0x19687D0 Offset: 0x19687D0 VA: 0x19687D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x19687E0 Offset: 0x19687E0 VA: 0x19687E0 Slot: 11
	public virtual int Invoke(int id, int level) { }

	// RVA: 0x1968A28 Offset: 0x1968A28 VA: 0x1968A28 Slot: 12
	public virtual IAsyncResult BeginInvoke(int id, int level, AsyncCallback callback, object object) { }

	// RVA: 0x1968AC8 Offset: 0x1968AC8 VA: 0x1968AC8 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum CondType.CheckType // TypeDefIndex: 6103
{
	// Fields
	public int value__; // 0x0
	public const CondType.CheckType EQUAL = 0;
	public const CondType.CheckType ABOVE = 1;
	public const CondType.CheckType BELOW = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE6A0 Offset: 0xCAE6A0 VA: 0xCAE6A0
private sealed class CondType.<IsEventRaceGoalScriptPlayed>c__AnonStorey0 // TypeDefIndex: 6104
{
	// Fields
	internal int groupId; // 0x10

	// Methods

	// RVA: 0x19687B8 Offset: 0x19687B8 VA: 0x19687B8
	public void .ctor() { }

	// RVA: 0x19687C0 Offset: 0x19687C0 VA: 0x19687C0
	internal bool <>m__0(int x) { }
}

// Namespace: 
public enum ConnectMarkFadeInLagType // TypeDefIndex: 6105
{
	// Fields
	public int value__; // 0x0
	public const ConnectMarkFadeInLagType IMMEDIATE = 0;
	public const ConnectMarkFadeInLagType DEFAULT = 1;
}

// Namespace: 
public class CostumeListType // TypeDefIndex: 6106
{
	// Methods

	// RVA: 0x1977E3C Offset: 0x1977E3C VA: 0x1977E3C
	public void .ctor() { }
}

// Namespace: 
public enum CostumeListType.FlagKind // TypeDefIndex: 6107
{
	// Fields
	public int value__; // 0x0
	public const CostumeListType.FlagKind OUT_OF_COSTUME_TIME = 1;
	public const CostumeListType.FlagKind CLOSED_HIDE_COSTUME_BANNER = 2;
	public const CostumeListType.FlagKind HIDE_COSTUME_SCENE = 3;
	public const CostumeListType.FlagKind NOT_RELEASE_COSTUME_HIDE = 4;
	public const CostumeListType.FlagKind NOT_GET_OPEN_RIGHT_SECRET = 5;
	public const CostumeListType.FlagKind NOT_GET_OPEN_RIGHT_HIDE = 6;
	public const CostumeListType.FlagKind CHANGE_FIGURE_ONLY = 7;
}

// Namespace: 
public enum CostumeListType.Flag // TypeDefIndex: 6108
{
	// Fields
	public int value__; // 0x0
	public const CostumeListType.Flag OUT_OF_COSTUME_TIME = 2;
	public const CostumeListType.Flag CLOSED_HIDE_COSTUME_BANNER = 4;
	public const CostumeListType.Flag HIDE_COSTUME_SCENE = 8;
	public const CostumeListType.Flag NOT_RELEASE_COSTUME_HIDE = 16;
	public const CostumeListType.Flag NOT_GET_OPEN_RIGHT_SECRET = 32;
	public const CostumeListType.Flag NOT_GET_OPEN_RIGHT_HIDE = 64;
	public const CostumeListType.Flag CHANGE_FIGURE_ONLY = 128;
}

// Namespace: 
public class CostumeReleaseType // TypeDefIndex: 6109
{
	// Methods

	// RVA: 0x197B2E4 Offset: 0x197B2E4 VA: 0x197B2E4
	public void .ctor() { }
}

// Namespace: 
public enum CostumeReleaseType.Kind // TypeDefIndex: 6110
{
	// Fields
	public int value__; // 0x0
	public const CostumeReleaseType.Kind COSTUME_RELEASE = 1;
	public const CostumeReleaseType.Kind COSTUME_CHANGE = 2;
}

// Namespace: 
public enum CuriousFuncEffectTiming // TypeDefIndex: 6111
{
	// Fields
	public int value__; // 0x0
	public const CuriousFuncEffectTiming BEFORE_CURIOUS_FUNC = 0;
	public const CuriousFuncEffectTiming JUST_CURIOUS_FUNC = 1;
	public const CuriousFuncEffectTiming AFTER_CURIOUS_FUNC = 2;
}

// Namespace: 
public enum CutInType // TypeDefIndex: 6112
{
	// Fields
	public int value__; // 0x0
	public const CutInType CutIn1 = 0;
	public const CutInType CutIn2 = 1;
	public const CutInType CutIn3 = 2;
	public const CutInType CutIn4 = 3;
	public const CutInType CutIn5 = 4;
	public const CutInType CutIn6 = 5;
	public const CutInType CutIn7 = 6;
	public const CutInType CutIn8 = 7;
	public const CutInType CutIn9 = 8;
	public const CutInType CutIn10 = 9;
	public const CutInType CutIn11 = 10;
	public const CutInType CutIn12 = 11;
	public const CutInType CutIn13 = 12;
	public const CutInType CutIn14 = 13;
	public const CutInType CutIn15 = 14;
	public const CutInType CutIn16 = 15;
	public const CutInType CutIn17 = 16;
	public const CutInType CutIn18 = 17;
	public const CutInType CutIn19 = 18;
	public const CutInType CutIn20 = 19;
	public const CutInType CutIn21 = 20;
	public const CutInType CutIn22 = 21;
	public const CutInType CutIn23 = 22;
	public const CutInType CutIn24 = 23;
	public const CutInType CutIn25 = 24;
	public const CutInType CutIn26 = 25;
	public const CutInType CutIn27 = 26;
	public const CutInType CutIn28 = 27;
	public const CutInType CutIn29 = 28;
	public const CutInType CutIn30 = 29;
}

