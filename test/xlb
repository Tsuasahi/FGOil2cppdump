	// RVA: 0x2656F34 Offset: 0x2656F34 VA: 0x2656F34 Slot: 37
	protected virtual Curve25519Point TwiceJacobianModified(bool calculateW) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1Curve : AbstractFpCurve // TypeDefIndex: 5015
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP128R1_DEFAULT_COORDS = 2;
	protected readonly SecP128R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2657640 Offset: 0x2657640 VA: 0x2657640
	public void .ctor() { }

	// RVA: 0x2657824 Offset: 0x2657824 VA: 0x2657824 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x265787C Offset: 0x265787C VA: 0x265787C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2657888 Offset: 0x2657888 VA: 0x2657888 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x26578F0 Offset: 0x26578F0 VA: 0x26578F0 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26578F8 Offset: 0x26578F8 VA: 0x26578F8 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2657974 Offset: 0x2657974 VA: 0x2657974 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2657AF8 Offset: 0x2657AF8 VA: 0x2657AF8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2657C58 Offset: 0x2657C58 VA: 0x2657C58 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2657CF8 Offset: 0x2657CF8 VA: 0x2657CF8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1Field // TypeDefIndex: 5016
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P3 = 4294967293;
	private const uint PExt7 = 4294967292;

	// Methods

	// RVA: 0x2657DA8 Offset: 0x2657DA8 VA: 0x2657DA8
	public void .ctor() { }

	// RVA: 0x2657DB0 Offset: 0x2657DB0 VA: 0x2657DB0
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x265800C Offset: 0x265800C VA: 0x265800C
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2658148 Offset: 0x2658148 VA: 0x2658148
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2658250 Offset: 0x2658250 VA: 0x2658250
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2658340 Offset: 0x2658340 VA: 0x2658340
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2658428 Offset: 0x2658428 VA: 0x2658428
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2658708 Offset: 0x2658708 VA: 0x2658708
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x2658844 Offset: 0x2658844 VA: 0x2658844
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x26584C0 Offset: 0x26584C0 VA: 0x26584C0
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x26588F0 Offset: 0x26588F0 VA: 0x26588F0
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x2658A4C Offset: 0x2658A4C VA: 0x2658A4C
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x2658ADC Offset: 0x2658ADC VA: 0x2658ADC
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x2658BC0 Offset: 0x2658BC0 VA: 0x2658BC0
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2658DAC Offset: 0x2658DAC VA: 0x2658DAC
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2658E7C Offset: 0x2658E7C VA: 0x2658E7C
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x2657EBC Offset: 0x2657EBC VA: 0x2657EBC
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x2658C5C Offset: 0x2658C5C VA: 0x2658C5C
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x2658F88 Offset: 0x2658F88 VA: 0x2658F88
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1FieldElement : ECFieldElement // TypeDefIndex: 5017
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x26579D4 Offset: 0x26579D4 VA: 0x26579D4
	public void .ctor(BigInteger x) { }

	// RVA: 0x265906C Offset: 0x265906C VA: 0x265906C
	public void .ctor() { }

	// RVA: 0x265909C Offset: 0x265909C VA: 0x265909C
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x26590C8 Offset: 0x26590C8 VA: 0x26590C8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x26590D4 Offset: 0x26590D4 VA: 0x26590D4 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x26590E0 Offset: 0x26590E0 VA: 0x26590E0 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2659108 Offset: 0x2659108 VA: 0x2659108 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2659114 Offset: 0x2659114 VA: 0x2659114 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x265915C Offset: 0x265915C VA: 0x265915C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x26591D8 Offset: 0x26591D8 VA: 0x26591D8 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x265937C Offset: 0x265937C VA: 0x265937C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2659420 Offset: 0x2659420 VA: 0x2659420 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26595C4 Offset: 0x26595C4 VA: 0x26595C4 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2659768 Offset: 0x2659768 VA: 0x2659768 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x265994C Offset: 0x265994C VA: 0x265994C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x26599F0 Offset: 0x26599F0 VA: 0x26599F0 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2659A94 Offset: 0x2659A94 VA: 0x2659A94 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2659B74 Offset: 0x2659B74 VA: 0x2659B74 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2659D58 Offset: 0x2659D58 VA: 0x2659D58 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2659DF4 Offset: 0x2659DF4 VA: 0x2659DF4 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2659E90 Offset: 0x2659E90 VA: 0x2659E90 Slot: 27
	public virtual bool Equals(SecP128R1FieldElement other) { }

	// RVA: 0x2659EBC Offset: 0x2659EBC VA: 0x2659EBC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2659F64 Offset: 0x2659F64 VA: 0x2659F64
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1Point : AbstractFpPoint // TypeDefIndex: 5018
{
	// Methods

	// RVA: 0x265781C Offset: 0x265781C VA: 0x265781C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2657B80 Offset: 0x2657B80 VA: 0x2657B80
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2657CEC Offset: 0x2657CEC VA: 0x2657CEC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2659FE0 Offset: 0x2659FE0 VA: 0x2659FE0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x265A080 Offset: 0x265A080 VA: 0x265A080 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x265AAAC Offset: 0x265AAAC VA: 0x265AAAC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x265B164 Offset: 0x265B164 VA: 0x265B164 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x265B268 Offset: 0x265B268 VA: 0x265B268 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x265B304 Offset: 0x265B304 VA: 0x265B304 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160K1Curve : AbstractFpCurve // TypeDefIndex: 5019
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP160K1_DEFAULT_COORDS = 2;
	protected readonly SecP160K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x265B40C Offset: 0x265B40C VA: 0x265B40C
	public void .ctor() { }

	// RVA: 0x265B594 Offset: 0x265B594 VA: 0x265B594 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x265B5EC Offset: 0x265B5EC VA: 0x265B5EC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x265B5F8 Offset: 0x265B5F8 VA: 0x265B5F8 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x265B660 Offset: 0x265B660 VA: 0x265B660 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x265B668 Offset: 0x265B668 VA: 0x265B668 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x265B6E4 Offset: 0x265B6E4 VA: 0x265B6E4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x265B868 Offset: 0x265B868 VA: 0x265B868 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x265B9C8 Offset: 0x265B9C8 VA: 0x265B9C8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x265BA68 Offset: 0x265BA68 VA: 0x265BA68
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160K1Point : AbstractFpPoint // TypeDefIndex: 5020
{
	// Methods

	// RVA: 0x265B58C Offset: 0x265B58C VA: 0x265B58C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x265B8F0 Offset: 0x265B8F0 VA: 0x265B8F0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x265BA5C Offset: 0x265BA5C VA: 0x265BA5C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x265BAE4 Offset: 0x265BAE4 VA: 0x265BAE4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x265BB84 Offset: 0x265BB84 VA: 0x265BB84 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x265CB94 Offset: 0x265CB94 VA: 0x265CB94 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x265D2C0 Offset: 0x265D2C0 VA: 0x265D2C0 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x265D3C4 Offset: 0x265D3C4 VA: 0x265D3C4 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x265D460 Offset: 0x265D460 VA: 0x265D460 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1Curve : AbstractFpCurve // TypeDefIndex: 5021
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP160R1_DEFAULT_COORDS = 2;
	protected readonly SecP160R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x265D568 Offset: 0x265D568 VA: 0x265D568
	public void .ctor() { }

	// RVA: 0x265D74C Offset: 0x265D74C VA: 0x265D74C Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x265D7A4 Offset: 0x265D7A4 VA: 0x265D7A4 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x265D7B0 Offset: 0x265D7B0 VA: 0x265D7B0 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x265D818 Offset: 0x265D818 VA: 0x265D818 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x265D820 Offset: 0x265D820 VA: 0x265D820 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x265D89C Offset: 0x265D89C VA: 0x265D89C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x265DA20 Offset: 0x265DA20 VA: 0x265DA20 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x265DB80 Offset: 0x265DB80 VA: 0x265DB80 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x265DC20 Offset: 0x265DC20 VA: 0x265DC20
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1Field // TypeDefIndex: 5022
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P4 = 4294967295;
	private const uint PExt9 = 4294967295;
	private const uint PInv = 2147483649;

	// Methods

	// RVA: 0x265DCD0 Offset: 0x265DCD0 VA: 0x265DCD0
	public void .ctor() { }

	// RVA: 0x265DCD8 Offset: 0x265DCD8 VA: 0x265DCD8
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x265DDD0 Offset: 0x265DDD0 VA: 0x265DDD0
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x265DF5C Offset: 0x265DF5C VA: 0x265DF5C
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x265E050 Offset: 0x265E050 VA: 0x265E050
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x265E140 Offset: 0x265E140 VA: 0x265E140
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x265E228 Offset: 0x265E228 VA: 0x265E228
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x265E580 Offset: 0x265E580 VA: 0x265E580
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x265E708 Offset: 0x265E708 VA: 0x265E708
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x265E2C0 Offset: 0x265E2C0 VA: 0x265E2C0
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x265E7B4 Offset: 0x265E7B4 VA: 0x265E7B4
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x265E8B0 Offset: 0x265E8B0 VA: 0x265E8B0
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x265E940 Offset: 0x265E940 VA: 0x265E940
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x265EA24 Offset: 0x265EA24 VA: 0x265EA24
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x265EA68 Offset: 0x265EA68 VA: 0x265EA68
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x265EB80 Offset: 0x265EB80 VA: 0x265EB80
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x265EC78 Offset: 0x265EC78 VA: 0x265EC78
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1FieldElement : ECFieldElement // TypeDefIndex: 5023
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x265D8FC Offset: 0x265D8FC VA: 0x265D8FC
	public void .ctor(BigInteger x) { }

	// RVA: 0x265ED5C Offset: 0x265ED5C VA: 0x265ED5C
	public void .ctor() { }

	// RVA: 0x265ED8C Offset: 0x265ED8C VA: 0x265ED8C
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x265EDB8 Offset: 0x265EDB8 VA: 0x265EDB8 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x265EDC4 Offset: 0x265EDC4 VA: 0x265EDC4 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x265EDD0 Offset: 0x265EDD0 VA: 0x265EDD0 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x265EDF8 Offset: 0x265EDF8 VA: 0x265EDF8 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x265EE04 Offset: 0x265EE04 VA: 0x265EE04 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x265EE4C Offset: 0x265EE4C VA: 0x265EE4C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x265EEC8 Offset: 0x265EEC8 VA: 0x265EEC8 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x265F06C Offset: 0x265F06C VA: 0x265F06C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x265F110 Offset: 0x265F110 VA: 0x265F110 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x265F2B4 Offset: 0x265F2B4 VA: 0x265F2B4 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x265F458 Offset: 0x265F458 VA: 0x265F458 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x265F63C Offset: 0x265F63C VA: 0x265F63C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x265F6E0 Offset: 0x265F6E0 VA: 0x265F6E0 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x265F784 Offset: 0x265F784 VA: 0x265F784 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x265F864 Offset: 0x265F864 VA: 0x265F864 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x265FA5C Offset: 0x265FA5C VA: 0x265FA5C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x265FAF8 Offset: 0x265FAF8 VA: 0x265FAF8 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x265FB94 Offset: 0x265FB94 VA: 0x265FB94 Slot: 27
	public virtual bool Equals(SecP160R1FieldElement other) { }

	// RVA: 0x265FBC0 Offset: 0x265FBC0 VA: 0x265FBC0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x265FC68 Offset: 0x265FC68 VA: 0x265FC68
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1Point : AbstractFpPoint // TypeDefIndex: 5024
{
	// Methods

	// RVA: 0x265D744 Offset: 0x265D744 VA: 0x265D744
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x265DAA8 Offset: 0x265DAA8 VA: 0x265DAA8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x265DC14 Offset: 0x265DC14 VA: 0x265DC14
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x265FCE4 Offset: 0x265FCE4 VA: 0x265FCE4 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x265FD84 Offset: 0x265FD84 VA: 0x265FD84 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x26607B0 Offset: 0x26607B0 VA: 0x26607B0 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2660E68 Offset: 0x2660E68 VA: 0x2660E68 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2660F6C Offset: 0x2660F6C VA: 0x2660F6C Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2661008 Offset: 0x2661008 VA: 0x2661008 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2Curve : AbstractFpCurve // TypeDefIndex: 5025
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP160R2_DEFAULT_COORDS = 2;
	protected readonly SecP160R2Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2661110 Offset: 0x2661110 VA: 0x2661110
	public void .ctor() { }

	// RVA: 0x26612F4 Offset: 0x26612F4 VA: 0x26612F4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x266134C Offset: 0x266134C VA: 0x266134C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2661358 Offset: 0x2661358 VA: 0x2661358 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x26613C0 Offset: 0x26613C0 VA: 0x26613C0 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26613C8 Offset: 0x26613C8 VA: 0x26613C8 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2661444 Offset: 0x2661444 VA: 0x2661444 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26614A4 Offset: 0x26614A4 VA: 0x26614A4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2661604 Offset: 0x2661604 VA: 0x2661604 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26616A4 Offset: 0x26616A4 VA: 0x26616A4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2Field // TypeDefIndex: 5026
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P4 = 4294967295;
	private const uint PExt9 = 4294967295;
	private const uint PInv33 = 21389;

	// Methods

	// RVA: 0x2661754 Offset: 0x2661754 VA: 0x2661754
	public void .ctor() { }

	// RVA: 0x266175C Offset: 0x266175C VA: 0x266175C
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2661854 Offset: 0x2661854 VA: 0x2661854
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x26619E0 Offset: 0x26619E0 VA: 0x26619E0
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2661AD4 Offset: 0x2661AD4 VA: 0x2661AD4
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2661BC4 Offset: 0x2661BC4 VA: 0x2661BC4
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x265C640 Offset: 0x265C640 VA: 0x265C640
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x265C8F0 Offset: 0x265C8F0 VA: 0x265C8F0
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x265C71C Offset: 0x265C71C VA: 0x265C71C
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x265CA78 Offset: 0x265CA78 VA: 0x265CA78
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x265C7C8 Offset: 0x265C7C8 VA: 0x265C7C8
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x265C5B0 Offset: 0x265C5B0 VA: 0x265C5B0
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x2661CAC Offset: 0x2661CAC VA: 0x2661CAC
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x265C6D8 Offset: 0x265C6D8 VA: 0x265C6D8
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2661D90 Offset: 0x2661D90 VA: 0x2661D90
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x265D1C8 Offset: 0x265D1C8 VA: 0x265D1C8
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x2661EA8 Offset: 0x2661EA8 VA: 0x2661EA8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2FieldElement : ECFieldElement // TypeDefIndex: 5027
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x265B744 Offset: 0x265B744 VA: 0x265B744
	public void .ctor(BigInteger x) { }

	// RVA: 0x2661F8C Offset: 0x2661F8C VA: 0x2661F8C
	public void .ctor() { }

	// RVA: 0x265C8C4 Offset: 0x265C8C4 VA: 0x265C8C4
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2661FBC Offset: 0x2661FBC VA: 0x2661FBC Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2661FC8 Offset: 0x2661FC8 VA: 0x2661FC8 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2661FD4 Offset: 0x2661FD4 VA: 0x2661FD4 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2661FFC Offset: 0x2661FFC VA: 0x2661FFC Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2662008 Offset: 0x2662008 VA: 0x2662008 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2662050 Offset: 0x2662050 VA: 0x2662050 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x26620CC Offset: 0x26620CC VA: 0x26620CC Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2662270 Offset: 0x2662270 VA: 0x2662270 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2662314 Offset: 0x2662314 VA: 0x2662314 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26624B8 Offset: 0x26624B8 VA: 0x26624B8 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x266265C Offset: 0x266265C VA: 0x266265C Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2662840 Offset: 0x2662840 VA: 0x2662840 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x26628E4 Offset: 0x26628E4 VA: 0x26628E4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2662988 Offset: 0x2662988 VA: 0x2662988 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2662A68 Offset: 0x2662A68 VA: 0x2662A68 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2662D58 Offset: 0x2662D58 VA: 0x2662D58 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2662DF4 Offset: 0x2662DF4 VA: 0x2662DF4 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2662E90 Offset: 0x2662E90 VA: 0x2662E90 Slot: 27
	public virtual bool Equals(SecP160R2FieldElement other) { }

	// RVA: 0x2662EBC Offset: 0x2662EBC VA: 0x2662EBC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2662F64 Offset: 0x2662F64 VA: 0x2662F64
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2Point : AbstractFpPoint // TypeDefIndex: 5028
{
	// Methods

	// RVA: 0x26612EC Offset: 0x26612EC VA: 0x26612EC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x266152C Offset: 0x266152C VA: 0x266152C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2661698 Offset: 0x2661698 VA: 0x2661698
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2662FE0 Offset: 0x2662FE0 VA: 0x2662FE0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2663080 Offset: 0x2663080 VA: 0x2663080 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2663AAC Offset: 0x2663AAC VA: 0x2663AAC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2664164 Offset: 0x2664164 VA: 0x2664164 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2664268 Offset: 0x2664268 VA: 0x2664268 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x2664304 Offset: 0x2664304 VA: 0x2664304 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1Curve : AbstractFpCurve // TypeDefIndex: 5029
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP192K1_DEFAULT_COORDS = 2;
	protected readonly SecP192K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x266440C Offset: 0x266440C VA: 0x266440C
	public void .ctor() { }

	// RVA: 0x2664594 Offset: 0x2664594 VA: 0x2664594 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x26645EC Offset: 0x26645EC VA: 0x26645EC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x26645F8 Offset: 0x26645F8 VA: 0x26645F8 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x2664660 Offset: 0x2664660 VA: 0x2664660 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2664668 Offset: 0x2664668 VA: 0x2664668 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x26646E4 Offset: 0x26646E4 VA: 0x26646E4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2664868 Offset: 0x2664868 VA: 0x2664868 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26649C8 Offset: 0x26649C8 VA: 0x26649C8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2664A68 Offset: 0x2664A68 VA: 0x2664A68
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1Field // TypeDefIndex: 5030
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P5 = 4294967295;
	private const uint PExt11 = 4294967295;
	private const uint PInv33 = 4553;

	// Methods

	// RVA: 0x2664B18 Offset: 0x2664B18 VA: 0x2664B18
	public void .ctor() { }

	// RVA: 0x2664B20 Offset: 0x2664B20 VA: 0x2664B20
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2664C18 Offset: 0x2664C18 VA: 0x2664C18
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2664DA4 Offset: 0x2664DA4 VA: 0x2664DA4
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x2664E98 Offset: 0x2664E98 VA: 0x2664E98
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2664F88 Offset: 0x2664F88 VA: 0x2664F88
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x2665070 Offset: 0x2665070 VA: 0x2665070
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x2665224 Offset: 0x2665224 VA: 0x2665224
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x26653AC Offset: 0x26653AC VA: 0x26653AC
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x2665108 Offset: 0x2665108 VA: 0x2665108
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x2665458 Offset: 0x2665458 VA: 0x2665458
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x2665554 Offset: 0x2665554 VA: 0x2665554
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x26655E4 Offset: 0x26655E4 VA: 0x26655E4
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x26656C8 Offset: 0x26656C8 VA: 0x26656C8
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x266570C Offset: 0x266570C VA: 0x266570C
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x2665824 Offset: 0x2665824 VA: 0x2665824
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x266591C Offset: 0x266591C VA: 0x266591C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1FieldElement : ECFieldElement // TypeDefIndex: 5031
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x2664744 Offset: 0x2664744 VA: 0x2664744
	public void .ctor(BigInteger x) { }

	// RVA: 0x2665A00 Offset: 0x2665A00 VA: 0x2665A00
	public void .ctor() { }

	// RVA: 0x2665A30 Offset: 0x2665A30 VA: 0x2665A30
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x2665A5C Offset: 0x2665A5C VA: 0x2665A5C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2665A68 Offset: 0x2665A68 VA: 0x2665A68 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2665A74 Offset: 0x2665A74 VA: 0x2665A74 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2665A9C Offset: 0x2665A9C VA: 0x2665A9C Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2665AA8 Offset: 0x2665AA8 VA: 0x2665AA8 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2665AF0 Offset: 0x2665AF0 VA: 0x2665AF0 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2665B6C Offset: 0x2665B6C VA: 0x2665B6C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2665D10 Offset: 0x2665D10 VA: 0x2665D10 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2665DB4 Offset: 0x2665DB4 VA: 0x2665DB4 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2665F58 Offset: 0x2665F58 VA: 0x2665F58 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x26660FC Offset: 0x26660FC VA: 0x26660FC Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x26662E0 Offset: 0x26662E0 VA: 0x26662E0 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2666384 Offset: 0x2666384 VA: 0x2666384 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2666428 Offset: 0x2666428 VA: 0x2666428 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2666508 Offset: 0x2666508 VA: 0x2666508 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x26667BC Offset: 0x26667BC VA: 0x26667BC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2666858 Offset: 0x2666858 VA: 0x2666858 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x26668F4 Offset: 0x26668F4 VA: 0x26668F4 Slot: 27
	public virtual bool Equals(SecP192K1FieldElement other) { }

	// RVA: 0x2666920 Offset: 0x2666920 VA: 0x2666920 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x26669C8 Offset: 0x26669C8 VA: 0x26669C8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1Point : AbstractFpPoint // TypeDefIndex: 5032
{
	// Methods

	// RVA: 0x266458C Offset: 0x266458C VA: 0x266458C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26648F0 Offset: 0x26648F0 VA: 0x26648F0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2664A5C Offset: 0x2664A5C VA: 0x2664A5C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2666A44 Offset: 0x2666A44 VA: 0x2666A44 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2666AE4 Offset: 0x2666AE4 VA: 0x2666AE4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2667510 Offset: 0x2667510 VA: 0x2667510 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2667B44 Offset: 0x2667B44 VA: 0x2667B44 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2667C48 Offset: 0x2667C48 VA: 0x2667C48 Slot: 34
	public override ECPoint ThreeTimes() { }

