	private static readonly uint[] PRECOMP_POW2; // 0x8
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24EC31C Offset: 0x24EC31C VA: 0x24EC31C
	public void .ctor(BigInteger x) { }

	// RVA: 0x24ED9C8 Offset: 0x24ED9C8 VA: 0x24ED9C8
	public void .ctor() { }

	// RVA: 0x24ED9F8 Offset: 0x24ED9F8 VA: 0x24ED9F8
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24EDA24 Offset: 0x24EDA24 VA: 0x24EDA24 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24EDA30 Offset: 0x24EDA30 VA: 0x24EDA30 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24EDA3C Offset: 0x24EDA3C VA: 0x24EDA3C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24EDA64 Offset: 0x24EDA64 VA: 0x24EDA64 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24EDA70 Offset: 0x24EDA70 VA: 0x24EDA70 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24EDAB8 Offset: 0x24EDAB8 VA: 0x24EDAB8 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24EDB34 Offset: 0x24EDB34 VA: 0x24EDB34 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24EDCD8 Offset: 0x24EDCD8 VA: 0x24EDCD8 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24EDD7C Offset: 0x24EDD7C VA: 0x24EDD7C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24EDF20 Offset: 0x24EDF20 VA: 0x24EDF20 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24EE0C4 Offset: 0x24EE0C4 VA: 0x24EE0C4 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24EE2A8 Offset: 0x24EE2A8 VA: 0x24EE2A8 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24EE34C Offset: 0x24EE34C VA: 0x24EE34C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24EE3F0 Offset: 0x24EE3F0 VA: 0x24EE3F0 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24EE4D0 Offset: 0x24EE4D0 VA: 0x24EE4D0 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24EE7AC Offset: 0x24EE7AC VA: 0x24EE7AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24EE848 Offset: 0x24EE848 VA: 0x24EE848 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24EE8E4 Offset: 0x24EE8E4 VA: 0x24EE8E4 Slot: 27
	public virtual bool Equals(Curve25519FieldElement other) { }

	// RVA: 0x24EE910 Offset: 0x24EE910 VA: 0x24EE910 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24EE9B8 Offset: 0x24EE9B8 VA: 0x24EE9B8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Djb
internal class Curve25519Point : AbstractFpPoint // TypeDefIndex: 5014
{
	// Methods

	// RVA: 0x24EC164 Offset: 0x24EC164 VA: 0x24EC164
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24EC4C8 Offset: 0x24EC4C8 VA: 0x24EC4C8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24EC634 Offset: 0x24EC634 VA: 0x24EC634
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24EEA6C Offset: 0x24EEA6C VA: 0x24EEA6C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24EEB0C Offset: 0x24EEB0C VA: 0x24EEB0C Slot: 14
	public override ECFieldElement GetZCoord(int index) { }

	// RVA: 0x24EEB2C Offset: 0x24EEB2C VA: 0x24EEB2C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24EF608 Offset: 0x24EF608 VA: 0x24EF608 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24EF6C8 Offset: 0x24EF6C8 VA: 0x24EF6C8 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24EF7D0 Offset: 0x24EF7D0 VA: 0x24EF7D0 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24EF870 Offset: 0x24EF870 VA: 0x24EF870 Slot: 29
	public override ECPoint Negate() { }

	// RVA: 0x24EF978 Offset: 0x24EF978 VA: 0x24EF978 Slot: 35
	protected virtual Curve25519FieldElement CalculateJacobianModifiedW(Curve25519FieldElement Z, uint[] ZSquared) { }

	// RVA: 0x24EFB84 Offset: 0x24EFB84 VA: 0x24EFB84 Slot: 36
	protected virtual Curve25519FieldElement GetJacobianModifiedW() { }

	// RVA: 0x24EFD84 Offset: 0x24EFD84 VA: 0x24EFD84 Slot: 37
	protected virtual Curve25519Point TwiceJacobianModified(bool calculateW) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1Curve : AbstractFpCurve // TypeDefIndex: 5015
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP128R1_DEFAULT_COORDS = 2;
	protected readonly SecP128R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F0490 Offset: 0x24F0490 VA: 0x24F0490
	public void .ctor() { }

	// RVA: 0x24F0674 Offset: 0x24F0674 VA: 0x24F0674 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24F06CC Offset: 0x24F06CC VA: 0x24F06CC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24F06D8 Offset: 0x24F06D8 VA: 0x24F06D8 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24F0740 Offset: 0x24F0740 VA: 0x24F0740 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24F0748 Offset: 0x24F0748 VA: 0x24F0748 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24F07C4 Offset: 0x24F07C4 VA: 0x24F07C4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24F0948 Offset: 0x24F0948 VA: 0x24F0948 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24F0AA8 Offset: 0x24F0AA8 VA: 0x24F0AA8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24F0B48 Offset: 0x24F0B48 VA: 0x24F0B48
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1Field // TypeDefIndex: 5016
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P3 = 4294967293;
	private const uint PExt7 = 4294967292;

	// Methods

	// RVA: 0x24F0BF8 Offset: 0x24F0BF8 VA: 0x24F0BF8
	public void .ctor() { }

	// RVA: 0x24F0C00 Offset: 0x24F0C00 VA: 0x24F0C00
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F0E5C Offset: 0x24F0E5C VA: 0x24F0E5C
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24F0F98 Offset: 0x24F0F98 VA: 0x24F0F98
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24F10A0 Offset: 0x24F10A0 VA: 0x24F10A0
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24F1190 Offset: 0x24F1190 VA: 0x24F1190
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24F1278 Offset: 0x24F1278 VA: 0x24F1278
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F1558 Offset: 0x24F1558 VA: 0x24F1558
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24F1694 Offset: 0x24F1694 VA: 0x24F1694
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24F1310 Offset: 0x24F1310 VA: 0x24F1310
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24F1740 Offset: 0x24F1740 VA: 0x24F1740
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24F189C Offset: 0x24F189C VA: 0x24F189C
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24F192C Offset: 0x24F192C VA: 0x24F192C
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24F1A10 Offset: 0x24F1A10 VA: 0x24F1A10
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F1BFC Offset: 0x24F1BFC VA: 0x24F1BFC
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24F1CCC Offset: 0x24F1CCC VA: 0x24F1CCC
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24F0D0C Offset: 0x24F0D0C VA: 0x24F0D0C
	private static void AddPInvTo(uint[] z) { }

	// RVA: 0x24F1AAC Offset: 0x24F1AAC VA: 0x24F1AAC
	private static void SubPInvFrom(uint[] z) { }

	// RVA: 0x24F1DD8 Offset: 0x24F1DD8 VA: 0x24F1DD8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1FieldElement : ECFieldElement // TypeDefIndex: 5017
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F0824 Offset: 0x24F0824 VA: 0x24F0824
	public void .ctor(BigInteger x) { }

	// RVA: 0x24F1EBC Offset: 0x24F1EBC VA: 0x24F1EBC
	public void .ctor() { }

	// RVA: 0x24F1EEC Offset: 0x24F1EEC VA: 0x24F1EEC
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24F1F18 Offset: 0x24F1F18 VA: 0x24F1F18 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24F1F24 Offset: 0x24F1F24 VA: 0x24F1F24 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24F1F30 Offset: 0x24F1F30 VA: 0x24F1F30 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24F1F58 Offset: 0x24F1F58 VA: 0x24F1F58 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24F1F64 Offset: 0x24F1F64 VA: 0x24F1F64 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24F1FAC Offset: 0x24F1FAC VA: 0x24F1FAC Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24F2028 Offset: 0x24F2028 VA: 0x24F2028 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24F21CC Offset: 0x24F21CC VA: 0x24F21CC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24F2270 Offset: 0x24F2270 VA: 0x24F2270 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24F2414 Offset: 0x24F2414 VA: 0x24F2414 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24F25B8 Offset: 0x24F25B8 VA: 0x24F25B8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24F279C Offset: 0x24F279C VA: 0x24F279C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24F2840 Offset: 0x24F2840 VA: 0x24F2840 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24F28E4 Offset: 0x24F28E4 VA: 0x24F28E4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24F29C4 Offset: 0x24F29C4 VA: 0x24F29C4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24F2BA8 Offset: 0x24F2BA8 VA: 0x24F2BA8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24F2C44 Offset: 0x24F2C44 VA: 0x24F2C44 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24F2CE0 Offset: 0x24F2CE0 VA: 0x24F2CE0 Slot: 27
	public virtual bool Equals(SecP128R1FieldElement other) { }

	// RVA: 0x24F2D0C Offset: 0x24F2D0C VA: 0x24F2D0C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24F2DB4 Offset: 0x24F2DB4 VA: 0x24F2DB4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP128R1Point : AbstractFpPoint // TypeDefIndex: 5018
{
	// Methods

	// RVA: 0x24F066C Offset: 0x24F066C VA: 0x24F066C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24F09D0 Offset: 0x24F09D0 VA: 0x24F09D0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24F0B3C Offset: 0x24F0B3C VA: 0x24F0B3C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24F2E30 Offset: 0x24F2E30 VA: 0x24F2E30 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24F2ED0 Offset: 0x24F2ED0 VA: 0x24F2ED0 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24F38FC Offset: 0x24F38FC VA: 0x24F38FC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24F3FB4 Offset: 0x24F3FB4 VA: 0x24F3FB4 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24F40B8 Offset: 0x24F40B8 VA: 0x24F40B8 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24F4154 Offset: 0x24F4154 VA: 0x24F4154 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160K1Curve : AbstractFpCurve // TypeDefIndex: 5019
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP160K1_DEFAULT_COORDS = 2;
	protected readonly SecP160K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F425C Offset: 0x24F425C VA: 0x24F425C
	public void .ctor() { }

	// RVA: 0x24F43E4 Offset: 0x24F43E4 VA: 0x24F43E4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24F443C Offset: 0x24F443C VA: 0x24F443C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24F4448 Offset: 0x24F4448 VA: 0x24F4448 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24F44B0 Offset: 0x24F44B0 VA: 0x24F44B0 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24F44B8 Offset: 0x24F44B8 VA: 0x24F44B8 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24F4534 Offset: 0x24F4534 VA: 0x24F4534 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24F46B8 Offset: 0x24F46B8 VA: 0x24F46B8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24F4818 Offset: 0x24F4818 VA: 0x24F4818 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24F48B8 Offset: 0x24F48B8 VA: 0x24F48B8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160K1Point : AbstractFpPoint // TypeDefIndex: 5020
{
	// Methods

	// RVA: 0x24F43DC Offset: 0x24F43DC VA: 0x24F43DC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24F4740 Offset: 0x24F4740 VA: 0x24F4740
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24F48AC Offset: 0x24F48AC VA: 0x24F48AC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24F4934 Offset: 0x24F4934 VA: 0x24F4934 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24F49D4 Offset: 0x24F49D4 VA: 0x24F49D4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24F59E4 Offset: 0x24F59E4 VA: 0x24F59E4 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24F6110 Offset: 0x24F6110 VA: 0x24F6110 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24F6214 Offset: 0x24F6214 VA: 0x24F6214 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24F62B0 Offset: 0x24F62B0 VA: 0x24F62B0 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1Curve : AbstractFpCurve // TypeDefIndex: 5021
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP160R1_DEFAULT_COORDS = 2;
	protected readonly SecP160R1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F63B8 Offset: 0x24F63B8 VA: 0x24F63B8
	public void .ctor() { }

	// RVA: 0x24F659C Offset: 0x24F659C VA: 0x24F659C Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24F65F4 Offset: 0x24F65F4 VA: 0x24F65F4 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24F6600 Offset: 0x24F6600 VA: 0x24F6600 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24F6668 Offset: 0x24F6668 VA: 0x24F6668 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24F6670 Offset: 0x24F6670 VA: 0x24F6670 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24F66EC Offset: 0x24F66EC VA: 0x24F66EC Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24F6870 Offset: 0x24F6870 VA: 0x24F6870 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24F69D0 Offset: 0x24F69D0 VA: 0x24F69D0 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24F6A70 Offset: 0x24F6A70 VA: 0x24F6A70
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1Field // TypeDefIndex: 5022
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P4 = 4294967295;
	private const uint PExt9 = 4294967295;
	private const uint PInv = 2147483649;

	// Methods

	// RVA: 0x24F6B20 Offset: 0x24F6B20 VA: 0x24F6B20
	public void .ctor() { }

	// RVA: 0x24F6B28 Offset: 0x24F6B28 VA: 0x24F6B28
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F6C20 Offset: 0x24F6C20 VA: 0x24F6C20
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24F6DAC Offset: 0x24F6DAC VA: 0x24F6DAC
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24F6EA0 Offset: 0x24F6EA0 VA: 0x24F6EA0
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24F6F90 Offset: 0x24F6F90 VA: 0x24F6F90
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24F7078 Offset: 0x24F7078 VA: 0x24F7078
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F73D0 Offset: 0x24F73D0 VA: 0x24F73D0
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24F7558 Offset: 0x24F7558 VA: 0x24F7558
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24F7110 Offset: 0x24F7110 VA: 0x24F7110
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24F7604 Offset: 0x24F7604 VA: 0x24F7604
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24F7700 Offset: 0x24F7700 VA: 0x24F7700
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24F7790 Offset: 0x24F7790 VA: 0x24F7790
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24F7874 Offset: 0x24F7874 VA: 0x24F7874
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F78B8 Offset: 0x24F78B8 VA: 0x24F78B8
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24F79D0 Offset: 0x24F79D0 VA: 0x24F79D0
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24F7AC8 Offset: 0x24F7AC8 VA: 0x24F7AC8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1FieldElement : ECFieldElement // TypeDefIndex: 5023
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F674C Offset: 0x24F674C VA: 0x24F674C
	public void .ctor(BigInteger x) { }

	// RVA: 0x24F7BAC Offset: 0x24F7BAC VA: 0x24F7BAC
	public void .ctor() { }

	// RVA: 0x24F7BDC Offset: 0x24F7BDC VA: 0x24F7BDC
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24F7C08 Offset: 0x24F7C08 VA: 0x24F7C08 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24F7C14 Offset: 0x24F7C14 VA: 0x24F7C14 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24F7C20 Offset: 0x24F7C20 VA: 0x24F7C20 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24F7C48 Offset: 0x24F7C48 VA: 0x24F7C48 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24F7C54 Offset: 0x24F7C54 VA: 0x24F7C54 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24F7C9C Offset: 0x24F7C9C VA: 0x24F7C9C Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24F7D18 Offset: 0x24F7D18 VA: 0x24F7D18 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24F7EBC Offset: 0x24F7EBC VA: 0x24F7EBC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24F7F60 Offset: 0x24F7F60 VA: 0x24F7F60 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24F8104 Offset: 0x24F8104 VA: 0x24F8104 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24F82A8 Offset: 0x24F82A8 VA: 0x24F82A8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24F848C Offset: 0x24F848C VA: 0x24F848C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24F8530 Offset: 0x24F8530 VA: 0x24F8530 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24F85D4 Offset: 0x24F85D4 VA: 0x24F85D4 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24F86B4 Offset: 0x24F86B4 VA: 0x24F86B4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24F88AC Offset: 0x24F88AC VA: 0x24F88AC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24F8948 Offset: 0x24F8948 VA: 0x24F8948 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24F89E4 Offset: 0x24F89E4 VA: 0x24F89E4 Slot: 27
	public virtual bool Equals(SecP160R1FieldElement other) { }

	// RVA: 0x24F8A10 Offset: 0x24F8A10 VA: 0x24F8A10 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24F8AB8 Offset: 0x24F8AB8 VA: 0x24F8AB8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R1Point : AbstractFpPoint // TypeDefIndex: 5024
{
	// Methods

	// RVA: 0x24F6594 Offset: 0x24F6594 VA: 0x24F6594
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24F68F8 Offset: 0x24F68F8 VA: 0x24F68F8
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24F6A64 Offset: 0x24F6A64 VA: 0x24F6A64
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24F8B34 Offset: 0x24F8B34 VA: 0x24F8B34 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24F8BD4 Offset: 0x24F8BD4 VA: 0x24F8BD4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24F9600 Offset: 0x24F9600 VA: 0x24F9600 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24F9CB8 Offset: 0x24F9CB8 VA: 0x24F9CB8 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24F9DBC Offset: 0x24F9DBC VA: 0x24F9DBC Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24F9E58 Offset: 0x24F9E58 VA: 0x24F9E58 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2Curve : AbstractFpCurve // TypeDefIndex: 5025
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SecP160R2_DEFAULT_COORDS = 2;
	protected readonly SecP160R2Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F9F60 Offset: 0x24F9F60 VA: 0x24F9F60
	public void .ctor() { }

	// RVA: 0x24FA144 Offset: 0x24FA144 VA: 0x24FA144 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24FA19C Offset: 0x24FA19C VA: 0x24FA19C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24FA1A8 Offset: 0x24FA1A8 VA: 0x24FA1A8 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24FA210 Offset: 0x24FA210 VA: 0x24FA210 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24FA218 Offset: 0x24FA218 VA: 0x24FA218 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24FA294 Offset: 0x24FA294 VA: 0x24FA294 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24FA2F4 Offset: 0x24FA2F4 VA: 0x24FA2F4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FA454 Offset: 0x24FA454 VA: 0x24FA454 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FA4F4 Offset: 0x24FA4F4 VA: 0x24FA4F4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2Field // TypeDefIndex: 5026
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P4 = 4294967295;
	private const uint PExt9 = 4294967295;
	private const uint PInv33 = 21389;

	// Methods

	// RVA: 0x24FA5A4 Offset: 0x24FA5A4 VA: 0x24FA5A4
	public void .ctor() { }

	// RVA: 0x24FA5AC Offset: 0x24FA5AC VA: 0x24FA5AC
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24FA6A4 Offset: 0x24FA6A4 VA: 0x24FA6A4
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24FA830 Offset: 0x24FA830 VA: 0x24FA830
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24FA924 Offset: 0x24FA924 VA: 0x24FA924
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24FAA14 Offset: 0x24FAA14 VA: 0x24FAA14
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24F5490 Offset: 0x24F5490 VA: 0x24F5490
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24F5740 Offset: 0x24F5740 VA: 0x24F5740
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24F556C Offset: 0x24F556C VA: 0x24F556C
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24F58C8 Offset: 0x24F58C8 VA: 0x24F58C8
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24F5618 Offset: 0x24F5618 VA: 0x24F5618
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24F5400 Offset: 0x24F5400 VA: 0x24F5400
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24FAAFC Offset: 0x24FAAFC VA: 0x24FAAFC
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24F5528 Offset: 0x24F5528 VA: 0x24F5528
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24FABE0 Offset: 0x24FABE0 VA: 0x24FABE0
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24F6018 Offset: 0x24F6018 VA: 0x24F6018
	public static void Twice(uint[] x, uint[] z) { }

	// RVA: 0x24FACF8 Offset: 0x24FACF8 VA: 0x24FACF8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2FieldElement : ECFieldElement // TypeDefIndex: 5027
{
	// Fields
	public static readonly BigInteger Q; // 0x0
	protected internal readonly uint[] x; // 0x10

	// Properties
	public override bool IsZero { get; }
	public override bool IsOne { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24F4594 Offset: 0x24F4594 VA: 0x24F4594
	public void .ctor(BigInteger x) { }

	// RVA: 0x24FADDC Offset: 0x24FADDC VA: 0x24FADDC
	public void .ctor() { }

	// RVA: 0x24F5714 Offset: 0x24F5714 VA: 0x24F5714
	protected internal void .ctor(uint[] x) { }

	// RVA: 0x24FAE0C Offset: 0x24FAE0C VA: 0x24FAE0C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24FAE18 Offset: 0x24FAE18 VA: 0x24FAE18 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24FAE24 Offset: 0x24FAE24 VA: 0x24FAE24 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24FAE4C Offset: 0x24FAE4C VA: 0x24FAE4C Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24FAE58 Offset: 0x24FAE58 VA: 0x24FAE58 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24FAEA0 Offset: 0x24FAEA0 VA: 0x24FAEA0 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24FAF1C Offset: 0x24FAF1C VA: 0x24FAF1C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24FB0C0 Offset: 0x24FB0C0 VA: 0x24FB0C0 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24FB164 Offset: 0x24FB164 VA: 0x24FB164 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24FB308 Offset: 0x24FB308 VA: 0x24FB308 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24FB4AC Offset: 0x24FB4AC VA: 0x24FB4AC Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24FB690 Offset: 0x24FB690 VA: 0x24FB690 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24FB734 Offset: 0x24FB734 VA: 0x24FB734 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24FB7D8 Offset: 0x24FB7D8 VA: 0x24FB7D8 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24FB8B8 Offset: 0x24FB8B8 VA: 0x24FB8B8 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24FBBA8 Offset: 0x24FBBA8 VA: 0x24FBBA8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24FBC44 Offset: 0x24FBC44 VA: 0x24FBC44 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24FBCE0 Offset: 0x24FBCE0 VA: 0x24FBCE0 Slot: 27
	public virtual bool Equals(SecP160R2FieldElement other) { }

	// RVA: 0x24FBD0C Offset: 0x24FBD0C VA: 0x24FBD0C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x24FBDB4 Offset: 0x24FBDB4 VA: 0x24FBDB4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP160R2Point : AbstractFpPoint // TypeDefIndex: 5028
{
	// Methods

	// RVA: 0x24FA13C Offset: 0x24FA13C VA: 0x24FA13C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FA37C Offset: 0x24FA37C VA: 0x24FA37C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FA4E8 Offset: 0x24FA4E8 VA: 0x24FA4E8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FBE30 Offset: 0x24FBE30 VA: 0x24FBE30 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24FBED0 Offset: 0x24FBED0 VA: 0x24FBED0 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24FC8FC Offset: 0x24FC8FC VA: 0x24FC8FC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24FCFB4 Offset: 0x24FCFB4 VA: 0x24FCFB4 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24FD0B8 Offset: 0x24FD0B8 VA: 0x24FD0B8 Slot: 34
	public override ECPoint ThreeTimes() { }

	// RVA: 0x24FD154 Offset: 0x24FD154 VA: 0x24FD154 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1Curve : AbstractFpCurve // TypeDefIndex: 5029
{
	// Fields
	public static readonly BigInteger q; // 0x0
	private const int SECP192K1_DEFAULT_COORDS = 2;
	protected readonly SecP192K1Point m_infinity; // 0x50

	// Properties
	public virtual BigInteger Q { get; }
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }

	// Methods

	// RVA: 0x24FD25C Offset: 0x24FD25C VA: 0x24FD25C
	public void .ctor() { }

	// RVA: 0x24FD3E4 Offset: 0x24FD3E4 VA: 0x24FD3E4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24FD43C Offset: 0x24FD43C VA: 0x24FD43C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24FD448 Offset: 0x24FD448 VA: 0x24FD448 Slot: 37
	public virtual BigInteger get_Q() { }

	// RVA: 0x24FD4B0 Offset: 0x24FD4B0 VA: 0x24FD4B0 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24FD4B8 Offset: 0x24FD4B8 VA: 0x24FD4B8 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24FD534 Offset: 0x24FD534 VA: 0x24FD534 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24FD6B8 Offset: 0x24FD6B8 VA: 0x24FD6B8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FD818 Offset: 0x24FD818 VA: 0x24FD818 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FD8B8 Offset: 0x24FD8B8 VA: 0x24FD8B8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecP192K1Field // TypeDefIndex: 5030
{
	// Fields
	internal static readonly uint[] P; // 0x0
	internal static readonly uint[] PExt; // 0x8
	private static readonly uint[] PExtInv; // 0x10
	private const uint P5 = 4294967295;
	private const uint PExt11 = 4294967295;
	private const uint PInv33 = 4553;

	// Methods

	// RVA: 0x24FD968 Offset: 0x24FD968 VA: 0x24FD968
	public void .ctor() { }

	// RVA: 0x24FD970 Offset: 0x24FD970 VA: 0x24FD970
	public static void Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24FDA68 Offset: 0x24FDA68 VA: 0x24FDA68
	public static void AddExt(uint[] xx, uint[] yy, uint[] zz) { }

	// RVA: 0x24FDBF4 Offset: 0x24FDBF4 VA: 0x24FDBF4
	public static void AddOne(uint[] x, uint[] z) { }

	// RVA: 0x24FDCE8 Offset: 0x24FDCE8 VA: 0x24FDCE8
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24FDDD8 Offset: 0x24FDDD8 VA: 0x24FDDD8
	public static void Half(uint[] x, uint[] z) { }

	// RVA: 0x24FDEC0 Offset: 0x24FDEC0 VA: 0x24FDEC0
	public static void Multiply(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24FE074 Offset: 0x24FE074 VA: 0x24FE074
	public static void MultiplyAddToExt(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24FE1FC Offset: 0x24FE1FC VA: 0x24FE1FC
	public static void Negate(uint[] x, uint[] z) { }

	// RVA: 0x24FDF58 Offset: 0x24FDF58 VA: 0x24FDF58
	public static void Reduce(uint[] xx, uint[] z) { }

	// RVA: 0x24FE2A8 Offset: 0x24FE2A8 VA: 0x24FE2A8
	public static void Reduce32(uint x, uint[] z) { }

	// RVA: 0x24FE3A4 Offset: 0x24FE3A4 VA: 0x24FE3A4
	public static void Square(uint[] x, uint[] z) { }

	// RVA: 0x24FE434 Offset: 0x24FE434 VA: 0x24FE434
	public static void SquareN(uint[] x, int n, uint[] z) { }

	// RVA: 0x24FE518 Offset: 0x24FE518 VA: 0x24FE518
	public static void Subtract(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24FE55C Offset: 0x24FE55C VA: 0x24FE55C
	public static void SubtractExt(uint[] xx, uint[] yy, uint[] zz) { }
