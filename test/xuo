	// RVA: 0x179EADC Offset: 0x179EADC VA: 0x179EADC
	public void .ctor() { }

	// RVA: 0x179F45C Offset: 0x179F45C VA: 0x179F45C Slot: 4
	public void begin(StandFigureSlideComponent that) { }

	// RVA: 0x179F460 Offset: 0x179F460 VA: 0x179F460 Slot: 5
	public void update(StandFigureSlideComponent that) { }

	// RVA: 0x179F464 Offset: 0x179F464 VA: 0x179F464 Slot: 6
	public void end(StandFigureSlideComponent that) { }
}

// Namespace: 
protected class StandFigureSlideComponent.StateSlide : IState<StandFigureSlideComponent> // TypeDefIndex: 11061
{
	// Fields
	public const float TGT_MOVE_END_DIF = 0.25;
	private const int SLIDE_ANIM_FRAME_COUNT = 17;
	private TransitionCalculator<float> positionCalculator; // 0x10
	private TransitionCalculator<float> alphaCalculator; // 0x18

	// Methods

	// RVA: 0x179EAE4 Offset: 0x179EAE4 VA: 0x179EAE4
	public void .ctor() { }

	// RVA: 0x179F468 Offset: 0x179F468 VA: 0x179F468 Slot: 4
	public void begin(StandFigureSlideComponent that) { }

	// RVA: 0x179F5F4 Offset: 0x179F5F4 VA: 0x179F5F4 Slot: 5
	public void update(StandFigureSlideComponent that) { }

	// RVA: 0x179F7A0 Offset: 0x179F7A0 VA: 0x179F7A0 Slot: 6
	public void end(StandFigureSlideComponent that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC459F4 Offset: 0xC459F4 VA: 0xC459F4
private sealed class StandFigureSlideComponent.<Setup>c__AnonStorey0 // TypeDefIndex: 11062
{
	// Fields
	internal Action end_act; // 0x10
	internal Action this_end_act; // 0x18
	internal StandFigureSlideComponent $this; // 0x20

	// Methods

	// RVA: 0x179EFB8 Offset: 0x179EFB8 VA: 0x179EFB8
	public void .ctor() { }

	// RVA: 0x179F374 Offset: 0x179F374 VA: 0x179F374
	internal void <>m__0() { }

	// RVA: 0x179F3CC Offset: 0x179F3CC VA: 0x179F3CC
	internal void <>m__1() { }
}

// Namespace: 
internal class StepFunc // TypeDefIndex: 11063
{
	// Methods

	// RVA: 0x17A08C8 Offset: 0x17A08C8 VA: 0x17A08C8
	public void .ctor() { }

	// RVA: 0x17A08D0 Offset: 0x17A08D0 VA: 0x17A08D0
	public static double Linear(double v) { }

	// RVA: 0x17A08D4 Offset: 0x17A08D4 VA: 0x17A08D4
	public static double AccSin(double v) { }

	// RVA: 0x17A0904 Offset: 0x17A0904 VA: 0x17A0904
	public static double DecSin(double v) { }

	// RVA: 0x17A091C Offset: 0x17A091C VA: 0x17A091C
	public static double AccSig(double v) { }

	// RVA: 0x17A0948 Offset: 0x17A0948 VA: 0x17A0948
	public static double DecSig(double v) { }

	// RVA: 0x17A098C Offset: 0x17A098C VA: 0x17A098C
	public static double Acc2(double v) { }

	// RVA: 0x17A0994 Offset: 0x17A0994 VA: 0x17A0994
	public static double Acc3(double v) { }

	// RVA: 0x17A09A0 Offset: 0x17A09A0 VA: 0x17A09A0
	public static double Acc4(double v) { }

	// RVA: 0x17A09B0 Offset: 0x17A09B0 VA: 0x17A09B0
	public static double Acc5(double v) { }

	// RVA: 0x17A09C4 Offset: 0x17A09C4 VA: 0x17A09C4
	public static double Dec2(double v) { }

	// RVA: 0x17A09D8 Offset: 0x17A09D8 VA: 0x17A09D8
	public static double Dec3(double v) { }

	// RVA: 0x17A0A04 Offset: 0x17A0A04 VA: 0x17A0A04
	public static double Dec4(double v) { }

	// RVA: 0x17A0A30 Offset: 0x17A0A30 VA: 0x17A0A30
	public static double Dec5(double v) { }

	// RVA: 0x17A0A5C Offset: 0x17A0A5C VA: 0x17A0A5C
	public static double AccDec2(double v) { }

	// RVA: 0x17A0A98 Offset: 0x17A0A98 VA: 0x17A0A98
	public static double AccDec3(double v) { }

	// RVA: 0x17A0AF0 Offset: 0x17A0AF0 VA: 0x17A0AF0
	public static double AccDec4(double v) { }

	// RVA: 0x17A0B48 Offset: 0x17A0B48 VA: 0x17A0B48
	public static double AccDec5(double v) { }

	// RVA: 0x17A0BA0 Offset: 0x17A0BA0 VA: 0x17A0BA0
	public static double DecAcc2(double v) { }

	// RVA: 0x17A0BE0 Offset: 0x17A0BE0 VA: 0x17A0BE0
	public static double DecAcc3(double v) { }

	// RVA: 0x17A0C3C Offset: 0x17A0C3C VA: 0x17A0C3C
	public static double DecAcc4(double v) { }

	// RVA: 0x17A0C98 Offset: 0x17A0C98 VA: 0x17A0C98
	public static double DecAcc5(double v) { }
}

// Namespace: 
public class TransitionCalculator<T> // TypeDefIndex: 11064
{
	// Fields
	protected T from; // 0x0
	protected T to; // 0x0
	protected float duration; // 0x0
	protected float elapsed; // 0x0
	protected bool isReversed; // 0x0
	protected Func<T, T, float, T> easingFunc; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC7C340 Offset: 0xC7C340 VA: 0xC7C340
	[DebuggerBrowsableAttribute] // RVA: 0xC7C340 Offset: 0xC7C340 VA: 0xC7C340
	private T <Current>k__BackingField; // 0x0

	// Properties
	public T Current { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T from, T to, float duration, Func<T, T, float, T> easingFunc) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618C68 Offset: 0x2618C68 VA: 0x2618C68
	|-TransitionCalculator<object>..ctor
	|
	|-RVA: 0x2619084 Offset: 0x2619084 VA: 0x2619084
	|-TransitionCalculator<float>..ctor
	|
	|-RVA: 0x2619498 Offset: 0x2619498 VA: 0x2619498
	|-TransitionCalculator<Vector3>..ctor
	*/

	[CompilerGeneratedAttribute] // RVA: 0xCD3828 Offset: 0xCD3828 VA: 0xCD3828
	// RVA: -1 Offset: -1
	public T get_Current() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618D04 Offset: 0x2618D04 VA: 0x2618D04
	|-TransitionCalculator<object>.get_Current
	|
	|-RVA: 0x2619120 Offset: 0x2619120 VA: 0x2619120
	|-TransitionCalculator<float>.get_Current
	|
	|-RVA: 0x2619558 Offset: 0x2619558 VA: 0x2619558
	|-TransitionCalculator<Vector3>.get_Current
	*/

	[CompilerGeneratedAttribute] // RVA: 0xCD3838 Offset: 0xCD3838 VA: 0xCD3838
	// RVA: -1 Offset: -1
	private void set_Current(T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618D0C Offset: 0x2618D0C VA: 0x2618D0C
	|-TransitionCalculator<object>.set_Current
	|
	|-RVA: 0x2619128 Offset: 0x2619128 VA: 0x2619128
	|-TransitionCalculator<float>.set_Current
	|
	|-RVA: 0x2619564 Offset: 0x2619564 VA: 0x2619564
	|-TransitionCalculator<Vector3>.set_Current
	*/

	// RVA: -1 Offset: -1
	public T Update() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618D14 Offset: 0x2618D14 VA: 0x2618D14
	|-TransitionCalculator<object>.Update
	|
	|-RVA: 0x2619130 Offset: 0x2619130 VA: 0x2619130
	|-TransitionCalculator<float>.Update
	|
	|-RVA: 0x2619570 Offset: 0x2619570 VA: 0x2619570
	|-TransitionCalculator<Vector3>.Update
	*/

	// RVA: -1 Offset: -1
	public bool IsFinished() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618E14 Offset: 0x2618E14 VA: 0x2618E14
	|-TransitionCalculator<object>.IsFinished
	|
	|-RVA: 0x2619224 Offset: 0x2619224 VA: 0x2619224
	|-TransitionCalculator<float>.IsFinished
	|
	|-RVA: 0x2619680 Offset: 0x2619680 VA: 0x2619680
	|-TransitionCalculator<Vector3>.IsFinished
	*/

	// RVA: -1 Offset: -1
	protected void Reverse(bool value = True) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618E24 Offset: 0x2618E24 VA: 0x2618E24
	|-TransitionCalculator<object>.Reverse
	|
	|-RVA: 0x2619234 Offset: 0x2619234 VA: 0x2619234
	|-TransitionCalculator<float>.Reverse
	|
	|-RVA: 0x2619690 Offset: 0x2619690 VA: 0x2619690
	|-TransitionCalculator<Vector3>.Reverse
	*/

	// RVA: -1 Offset: -1
	public void ToEnd() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618ED8 Offset: 0x2618ED8 VA: 0x2618ED8
	|-TransitionCalculator<object>.ToEnd
	|
	|-RVA: 0x26192E8 Offset: 0x26192E8 VA: 0x26192E8
	|-TransitionCalculator<float>.ToEnd
	|
	|-RVA: 0x2619758 Offset: 0x2619758 VA: 0x2619758
	|-TransitionCalculator<Vector3>.ToEnd
	*/

	// RVA: -1 Offset: -1
	protected void ToStart() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618F50 Offset: 0x2618F50 VA: 0x2618F50
	|-TransitionCalculator<object>.ToStart
	|
	|-RVA: 0x2619360 Offset: 0x2619360 VA: 0x2619360
	|-TransitionCalculator<float>.ToStart
	|
	|-RVA: 0x26197E8 Offset: 0x26197E8 VA: 0x26197E8
	|-TransitionCalculator<Vector3>.ToStart
	*/

	// RVA: -1 Offset: -1
	private T CalcCurrent() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2618FC4 Offset: 0x2618FC4 VA: 0x2618FC4
	|-TransitionCalculator<object>.CalcCurrent
	|
	|-RVA: 0x26193D4 Offset: 0x26193D4 VA: 0x26193D4
	|-TransitionCalculator<float>.CalcCurrent
	|
	|-RVA: 0x2619874 Offset: 0x2619874 VA: 0x2619874
	|-TransitionCalculator<Vector3>.CalcCurrent
	*/
}

// Namespace: 
public class AlphaTransitionCalculator : TransitionCalculator<float> // TypeDefIndex: 11065
{
	// Methods

	// RVA: 0x107549C Offset: 0x107549C VA: 0x107549C
	public void .ctor(float duration, Func<float, float, float, float> easingFunc) { }

	// RVA: 0x1075514 Offset: 0x1075514 VA: 0x1075514
	public bool IsFadeOutFinished() { }

	// RVA: 0x1075580 Offset: 0x1075580 VA: 0x1075580
	public bool IsFadeInFinished() { }

	// RVA: 0x10755EC Offset: 0x10755EC VA: 0x10755EC
	public void StartFadeOut() { }

	// RVA: 0x1075664 Offset: 0x1075664 VA: 0x1075664
	public void StartFadeIn() { }

	// RVA: 0x10756DC Offset: 0x10756DC VA: 0x10756DC
	public void MakeFadeOutFinished() { }

	// RVA: 0x1075734 Offset: 0x1075734 VA: 0x1075734
	public void MakeFadeInFinished() { }

	// RVA: 0x1075668 Offset: 0x1075668 VA: 0x1075668
	private void SwitchFadeIn() { }

	// RVA: 0x10755F0 Offset: 0x10755F0 VA: 0x10755F0
	private void SwitchFadeOut() { }
}

// Namespace: 
public class UIScaleSame : MonoBehaviour // TypeDefIndex: 11066
{
	// Fields
	private Camera mCamera; // 0x18

	// Methods

	// RVA: 0x180E1E8 Offset: 0x180E1E8 VA: 0x180E1E8
	public void .ctor() { }

	// RVA: 0x180E1F0 Offset: 0x180E1F0 VA: 0x180E1F0
	public void SetCamera(Camera cam) { }

	// RVA: 0x180E1F8 Offset: 0x180E1F8 VA: 0x180E1F8
	private void Update() { }
}

// Namespace: 
public class MapButtonControl : MonoBehaviour // TypeDefIndex: 11067
{
	// Fields
	public static readonly string MAP_BUTTON_SP_NAME; // 0x0
	public static readonly string MAP_CURRENT_BUTTON_SP_NAME; // 0x8
	private static readonly string DEFAULT_BUTTON_SP; // 0x10
	private static readonly float MAP_BUTTON_GRID_HEIGHT; // 0x18
	[SerializeField] // RVA: 0xC7C37C Offset: 0xC7C37C VA: 0xC7C37C
	private UIGrid GridComponentBottom; // 0x18
	[SerializeField] // RVA: 0xC7C38C Offset: 0xC7C38C VA: 0xC7C38C
	private UIGrid GridComponentTop; // 0x20
	private UIGrid gridComponent; // 0x28
	[SerializeField] // RVA: 0xC7C39C Offset: 0xC7C39C VA: 0xC7C39C
	private UIAtlas commonUI; // 0x30
	[SerializeField] // RVA: 0xC7C3AC Offset: 0xC7C3AC VA: 0xC7C3AC
	private GameObject buttonPrefab; // 0x38
	private MapButtonPrefab[] buttons; // 0x40

	// Methods

	// RVA: 0x2BAB0D8 Offset: 0x2BAB0D8 VA: 0x2BAB0D8
	public void .ctor() { }

	// RVA: 0x2BAB0E0 Offset: 0x2BAB0E0 VA: 0x2BAB0E0
	public void CreateMapButtons(MapControl.WarInfo warInf, MapControl.MapInfo mapInf, List<UIAtlas> mapAtlases, ScrTerminalMap map) { }

	// RVA: 0x2BABD30 Offset: 0x2BABD30 VA: 0x2BABD30
	public void UpdateBadge(MapControl.WarInfo warInf, MapControl.MapInfo mapInf) { }

	// RVA: 0x2BABEFC Offset: 0x2BABEFC VA: 0x2BABEFC
	public void DestroyButtons() { }

	// RVA: 0x2BAC1A8 Offset: 0x2BAC1A8 VA: 0x2BAC1A8
	public void FrameIn() { }

	// RVA: 0x2BAC3DC Offset: 0x2BAC3DC VA: 0x2BAC3DC
	public void FrameOut() { }

	// RVA: 0x2BAC568 Offset: 0x2BAC568 VA: 0x2BAC568
	private static void .cctor() { }
}

// Namespace: 
public class MapButtonPrefab : MonoBehaviour // TypeDefIndex: 11068
{
	// Fields
	private static readonly float FRAME_IN_ANIM_DURATION; // 0x0
	private static readonly float FRAME_OUT_ANIM_DURATION; // 0x4
	private static readonly string FUNC_ENTRY_ANIM; // 0x8
	private UISprite btSp; // 0x18
	private int mapId; // 0x20
	private ScrTerminalMap map; // 0x28
	private Vector3 inPos; // 0x30
	private Vector3 outPos; // 0x3C
	[SerializeField] // RVA: 0xC7C3BC Offset: 0xC7C3BC VA: 0xC7C3BC
	private GameObject mNoticeNumberObj; // 0x48
	private NoticeNumberComponent mNoticeNumber; // 0x50

	// Methods

	// RVA: 0x2BACB60 Offset: 0x2BACB60 VA: 0x2BACB60
	public void .ctor() { }

	// RVA: 0x2BABA30 Offset: 0x2BABA30 VA: 0x2BABA30
	public int SetButton(UIAtlas atlas, string spName, ScrTerminalMap tMap, int map_id, bool isMapButtonTop) { }

	// RVA: 0x2BABC5C Offset: 0x2BABC5C VA: 0x2BABC5C
	public void SetBadge(int num) { }

	// RVA: 0x2BAC228 Offset: 0x2BAC228 VA: 0x2BAC228
	public void SetEntryAnim() { }

	// RVA: 0x2BACB68 Offset: 0x2BACB68 VA: 0x2BACB68
	private void EntryAnim() { }

	// RVA: 0x2BACB6C Offset: 0x2BACB6C VA: 0x2BACB6C
	public void FrameIn() { }

	// RVA: 0x2BAC45C Offset: 0x2BAC45C VA: 0x2BAC45C
	public void FrameOut() { }

	// RVA: 0x2BACC94 Offset: 0x2BACC94 VA: 0x2BACC94
	public void OnClickButton() { }

	// RVA: 0x2BACCD4 Offset: 0x2BACCD4 VA: 0x2BACCD4
	private static void .cctor() { }
}

// Namespace: 
public class MapCamera : MonoBehaviour // TypeDefIndex: 11069
{
	// Fields
	public static readonly int MAP_BASE_W; // 0x0
	public static readonly int MAP_BASE_H; // 0x4
	public static readonly float AUTO_WORK_DURATION_MIN; // 0x8
	[SerializeField] // RVA: 0xC7C3CC Offset: 0xC7C3CC VA: 0xC7C3CC
	private Camera mCamera; // 0x18
	[SerializeField] // RVA: 0xC7C3DC Offset: 0xC7C3DC VA: 0xC7C3DC
	private UITexture mMapBg; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC7C3EC Offset: 0xC7C3EC VA: 0xC7C3EC
	[DebuggerBrowsableAttribute] // RVA: 0xC7C3EC Offset: 0xC7C3EC VA: 0xC7C3EC
	private float <MapBgRateW>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7C428 Offset: 0xC7C428 VA: 0xC7C428
	[DebuggerBrowsableAttribute] // RVA: 0xC7C428 Offset: 0xC7C428 VA: 0xC7C428
	private float <MapBgRateH>k__BackingField; // 0x2C
	private Rect mCameraRect; // 0x30
	private MapScroll mScrl; // 0x40
	private MapZoom mZoom; // 0x48
	private MapTouchDetector touchDetector; // 0x50
	private bool mIsInitDone; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC7C464 Offset: 0xC7C464 VA: 0xC7C464
	[DebuggerBrowsableAttribute] // RVA: 0xC7C464 Offset: 0xC7C464 VA: 0xC7C464
	private bool <IsTouchEnable>k__BackingField; // 0x59
	private Rect mMvBrakeRect; // 0x5C
	private Rect mMvLimitRect; // 0x6C
	[CompilerGeneratedAttribute] // RVA: 0xC7C4A0 Offset: 0xC7C4A0 VA: 0xC7C4A0
	[DebuggerBrowsableAttribute] // RVA: 0xC7C4A0 Offset: 0xC7C4A0 VA: 0xC7C4A0
	private Vector2 <windowSize>k__BackingField; // 0x7C

	// Properties
	public UITexture MapBg { get; }
	public float MapBgRateW { get; set; }
	public float MapBgRateH { get; set; }
	public Rect CameraRect { get; }
	public MapScroll Scrl { get; }
	public MapZoom Zoom { get; }
	public bool IsTouchEnable { get; set; }
	public Rect MvBrakeRect { get; }
	public Rect MvLimitRect { get; }
	public Vector2 windowSize { get; set; }

	// Methods

	// RVA: 0x2BACD58 Offset: 0x2BACD58 VA: 0x2BACD58
	public void .ctor() { }

	// RVA: 0x2BACD60 Offset: 0x2BACD60 VA: 0x2BACD60
	public UITexture get_MapBg() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3848 Offset: 0xCD3848 VA: 0xCD3848
	// RVA: 0x2BACD68 Offset: 0x2BACD68 VA: 0x2BACD68
	public float get_MapBgRateW() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3858 Offset: 0xCD3858 VA: 0xCD3858
	// RVA: 0x2BACD70 Offset: 0x2BACD70 VA: 0x2BACD70
	private void set_MapBgRateW(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3868 Offset: 0xCD3868 VA: 0xCD3868
	// RVA: 0x2BACD78 Offset: 0x2BACD78 VA: 0x2BACD78
	public float get_MapBgRateH() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3878 Offset: 0xCD3878 VA: 0xCD3878
	// RVA: 0x2BACD80 Offset: 0x2BACD80 VA: 0x2BACD80
	private void set_MapBgRateH(float value) { }

	// RVA: 0x2BACD88 Offset: 0x2BACD88 VA: 0x2BACD88
	public Camera GetCamera() { }

	// RVA: 0x2BACD90 Offset: 0x2BACD90 VA: 0x2BACD90
	public Rect get_CameraRect() { }

	// RVA: 0x2BACE08 Offset: 0x2BACE08 VA: 0x2BACE08
	public MapScroll get_Scrl() { }

	// RVA: 0x2BACE10 Offset: 0x2BACE10 VA: 0x2BACE10
	public MapZoom get_Zoom() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3888 Offset: 0xCD3888 VA: 0xCD3888
	// RVA: 0x2BACE18 Offset: 0x2BACE18 VA: 0x2BACE18
	public bool get_IsTouchEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3898 Offset: 0xCD3898 VA: 0xCD3898
	// RVA: 0x2BACE20 Offset: 0x2BACE20 VA: 0x2BACE20
	public void set_IsTouchEnable(bool value) { }

	// RVA: 0x2BACE2C Offset: 0x2BACE2C VA: 0x2BACE2C
	public Rect get_MvBrakeRect() { }

	// RVA: 0x2BACE38 Offset: 0x2BACE38 VA: 0x2BACE38
	public Rect get_MvLimitRect() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD38A8 Offset: 0xCD38A8 VA: 0xCD38A8
	// RVA: 0x2BACE44 Offset: 0x2BACE44 VA: 0x2BACE44
	public Vector2 get_windowSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD38B8 Offset: 0xCD38B8 VA: 0xCD38B8
	// RVA: 0x2BACE4C Offset: 0x2BACE4C VA: 0x2BACE4C
	private void set_windowSize(Vector2 value) { }

	// RVA: 0x2BACE54 Offset: 0x2BACE54 VA: 0x2BACE54
	public void Init() { }

	// RVA: 0x2BACFB0 Offset: 0x2BACFB0 VA: 0x2BACFB0
	public void UnInit() { }

	// RVA: 0x2BAD004 Offset: 0x2BAD004 VA: 0x2BAD004
	private void OnDestroy() { }

	// RVA: 0x2BAD008 Offset: 0x2BAD008 VA: 0x2BAD008
	public void Process(bool is_tch_enable = True) { }

	// RVA: 0x2BACDB8 Offset: 0x2BACDB8 VA: 0x2BACDB8
	private void CalcWorldRect() { }

	// RVA: 0x2BAD180 Offset: 0x2BAD180 VA: 0x2BAD180
	public Rect GetWorldRect(Vector3 cam_pos) { }

	// RVA: 0x2BAD1E8 Offset: 0x2BAD1E8 VA: 0x2BAD1E8
	public Rect GetWorldRect(Vector3 cam_pos, float scale) { }

	// RVA: 0x2BAD26C Offset: 0x2BAD26C VA: 0x2BAD26C
	public void SetMapBg(UITexture mapBg) { }

	// RVA: 0x2BAD4A4 Offset: 0x2BAD4A4 VA: 0x2BAD4A4
	public void SetMapTexture(Texture2D tex, int w, int h) { }

	// RVA: 0x2BAD274 Offset: 0x2BAD274 VA: 0x2BAD274
	public void SetMapRate() { }

	// RVA: 0x2BAD684 Offset: 0x2BAD684 VA: 0x2BAD684
	public void RemoveMapTexture() { }

	// RVA: 0x2BAD548 Offset: 0x2BAD548 VA: 0x2BAD548
	private void SetMoveLimit() { }

	// RVA: 0x2BACF78 Offset: 0x2BACF78 VA: 0x2BACF78
	public void SetEnable(bool is_enable) { }

	// RVA: 0x2BAD150 Offset: 0x2BAD150 VA: 0x2BAD150
	public bool IsEnable() { }

	// RVA: 0x2BAD6C0 Offset: 0x2BAD6C0 VA: 0x2BAD6C0
	public void StartAutoMove(Vector3 screenPos, float sec, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0x2BAD90C Offset: 0x2BAD90C VA: 0x2BAD90C
	public void StartAutoZoom(float size, float sec, Easing.TYPE easeType = 5, Action endAct) { }

	// RVA: 0x2BAD778 Offset: 0x2BAD778 VA: 0x2BAD778
	public void StartAutoWork(float sec, Nullable<Vector3> screenPos, Nullable<float> size, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0x2BADD38 Offset: 0x2BADD38 VA: 0x2BADD38
	private static void .cctor() { }
}

// Namespace: 
public class MapControl // TypeDefIndex: 11070
{
	// Methods

	// RVA: 0x2BB0494 Offset: 0x2BB0494 VA: 0x2BB0494
	public void .ctor() { }
}

// Namespace: 
public class MapControl.PhaseInfo // TypeDefIndex: 11071
{
	// Fields
	private int questId; // 0x10
	private int phase; // 0x14
	private QuestPhaseMaster questPhaseMaster; // 0x18
	private QuestPhaseEntity mine; // 0x20

	// Methods

	// RVA: 0x2BB0FE4 Offset: 0x2BB0FE4 VA: 0x2BB0FE4
	public void .ctor() { }

	// RVA: 0x2BB0FEC Offset: 0x2BB0FEC VA: 0x2BB0FEC
	public void Reset() { }

	// RVA: 0x2BB0FF0 Offset: 0x2BB0FF0 VA: 0x2BB0FF0
	public void SetMine(int questId, int phase) { }

	// RVA: 0x2BB0FF8 Offset: 0x2BB0FF8 VA: 0x2BB0FF8
	public QuestPhaseEntity GetMine() { }

	// RVA: 0x2BB1080 Offset: 0x2BB1080 VA: 0x2BB1080
	private QuestPhaseMaster GetQuestPhaseMaster() { }
}

// Namespace: 
public class MapControl.AreaBoardInfo // TypeDefIndex: 11072
{
	// Fields
	public QuestBoardListViewItemDraw.enQBoardL1Type questBoardType; // 0x10
	public int warId; // 0x14
	public int questCount; // 0x18
	public QuestBoardListViewItemDraw.enStatus status; // 0x1C
	public EventEntity eventEnt; // 0x20
	public bool isNext; // 0x28
	public bool isCondPassEventWar; // 0x29
	public BannerEntity[] bannerEntList; // 0x30
	public int bannerFocusIndex; // 0x38
	public string specialNoticeText; // 0x40

	// Methods

	// RVA: 0x2BB049C Offset: 0x2BB049C VA: 0x2BB049C
	public void .ctor() { }
}

// Namespace: 
public class MapControl.QuestInfo // TypeDefIndex: 11073
{
	// Fields
	private int questId; // 0x10
	private int phaseCount; // 0x14
	private QuestEntity questEnt; // 0x18
	private MapControl.QuestInfo.DispType dispType; // 0x20
	private MapControl.QuestInfo.TouchType touchType; // 0x24
	private bool isNew; // 0x28
	private int questPhase; // 0x2C
	private int pickupPriority; // 0x30
	private List<MapControl.PhaseInfo> phaseInfoList; // 0x38
	private int warId; // 0x40
	private CondType.Kind questReleaseType; // 0x44
	private int questReleaseTargetID; // 0x48
	private long questReleaseValue; // 0x50
	private int questReleaseClosedID; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC7C4DC Offset: 0xC7C4DC VA: 0xC7C4DC
	[DebuggerBrowsableAttribute] // RVA: 0xC7C4DC Offset: 0xC7C4DC VA: 0xC7C4DC
	private MapControl.SpotInfo <SpotInfo>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC7C518 Offset: 0xC7C518 VA: 0xC7C518
	[DebuggerBrowsableAttribute] // RVA: 0xC7C518 Offset: 0xC7C518 VA: 0xC7C518
	private MapControl.WarInfo <WarInfo>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC7C554 Offset: 0xC7C554 VA: 0xC7C554
	[DebuggerBrowsableAttribute] // RVA: 0xC7C554 Offset: 0xC7C554 VA: 0xC7C554
	private MapControl.AreaBoardInfo <AreaBoardInfo>k__BackingField; // 0x70
	private int costCalcVal; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC7C590 Offset: 0xC7C590 VA: 0xC7C590
	[DebuggerBrowsableAttribute] // RVA: 0xC7C590 Offset: 0xC7C590 VA: 0xC7C590
	private int <fixedCostVal>k__BackingField; // 0x7C
	[CompilerGeneratedAttribute] // RVA: 0xC7C5CC Offset: 0xC7C5CC VA: 0xC7C5CC
	[DebuggerBrowsableAttribute] // RVA: 0xC7C5CC Offset: 0xC7C5CC VA: 0xC7C5CC
	private int <GroupId>k__BackingField; // 0x80
	private List<int> sameGroupQuestIds; // 0x88
	private long endTime; // 0x90

	// Properties
	public CondType.Kind QuestReleaseType { get; }
	public int QuestReleaseTargetID { get; }
	public long QuestReleaseValue { get; }
	public int QuestReleaseClosedID { get; }
	public MapControl.SpotInfo SpotInfo { get; set; }
	public MapControl.WarInfo WarInfo { get; set; }
	public MapControl.AreaBoardInfo AreaBoardInfo { get; set; }
	public int fixedCostVal { get; set; }
	public int GroupId { get; set; }

	// Methods

	// RVA: 0x2BB1100 Offset: 0x2BB1100 VA: 0x2BB1100
	public void .ctor() { }

	// RVA: 0x2BB11AC Offset: 0x2BB11AC VA: 0x2BB11AC
	public CondType.Kind get_QuestReleaseType() { }

	// RVA: 0x2BB11B4 Offset: 0x2BB11B4 VA: 0x2BB11B4
	public int get_QuestReleaseTargetID() { }

	// RVA: 0x2BB11BC Offset: 0x2BB11BC VA: 0x2BB11BC
	public long get_QuestReleaseValue() { }

	// RVA: 0x2BB11C4 Offset: 0x2BB11C4 VA: 0x2BB11C4
	public int get_QuestReleaseClosedID() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD38C8 Offset: 0xCD38C8 VA: 0xCD38C8
	// RVA: 0x2BB11CC Offset: 0x2BB11CC VA: 0x2BB11CC
	public MapControl.SpotInfo get_SpotInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD38D8 Offset: 0xCD38D8 VA: 0xCD38D8
	// RVA: 0x2BB11D4 Offset: 0x2BB11D4 VA: 0x2BB11D4
	public void set_SpotInfo(MapControl.SpotInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD38E8 Offset: 0xCD38E8 VA: 0xCD38E8
	// RVA: 0x2BB11DC Offset: 0x2BB11DC VA: 0x2BB11DC
	public MapControl.WarInfo get_WarInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD38F8 Offset: 0xCD38F8 VA: 0xCD38F8
	// RVA: 0x2BB11E4 Offset: 0x2BB11E4 VA: 0x2BB11E4
	public void set_WarInfo(MapControl.WarInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3908 Offset: 0xCD3908 VA: 0xCD3908
	// RVA: 0x2BB11EC Offset: 0x2BB11EC VA: 0x2BB11EC
	public MapControl.AreaBoardInfo get_AreaBoardInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3918 Offset: 0xCD3918 VA: 0xCD3918
	// RVA: 0x2BB11F4 Offset: 0x2BB11F4 VA: 0x2BB11F4
	public void set_AreaBoardInfo(MapControl.AreaBoardInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3928 Offset: 0xCD3928 VA: 0xCD3928
	// RVA: 0x2BB11FC Offset: 0x2BB11FC VA: 0x2BB11FC
	public int get_fixedCostVal() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3938 Offset: 0xCD3938 VA: 0xCD3938
	// RVA: 0x2BB11A4 Offset: 0x2BB11A4 VA: 0x2BB11A4
	public void set_fixedCostVal(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3948 Offset: 0xCD3948 VA: 0xCD3948
	// RVA: 0x2BB1204 Offset: 0x2BB1204 VA: 0x2BB1204
	public int get_GroupId() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3958 Offset: 0xCD3958 VA: 0xCD3958
	// RVA: 0x2BB120C Offset: 0x2BB120C VA: 0x2BB120C
	public void set_GroupId(int value) { }

	// RVA: 0x2BB1214 Offset: 0x2BB1214 VA: 0x2BB1214
	public void AddSameGroupQuestIds(int[] questIds) { }

	// RVA: 0x2BB1350 Offset: 0x2BB1350 VA: 0x2BB1350
	public List<int> GetSameGroupQuestIds() { }

	// RVA: 0x2BB1358 Offset: 0x2BB1358 VA: 0x2BB1358
	public bool IsClear() { }

	// RVA: 0x2BB13CC Offset: 0x2BB13CC VA: 0x2BB13CC
	public bool IsAnyPhaseClear() { }

	// RVA: 0x2BB1478 Offset: 0x2BB1478 VA: 0x2BB1478
	public void Reset() { }

	// RVA: 0x2BB15C0 Offset: 0x2BB15C0 VA: 0x2BB15C0
	public MapControl.PhaseInfo AddChild(int questId, int phase) { }

	// RVA: 0x2BB1674 Offset: 0x2BB1674 VA: 0x2BB1674
	public int GetQuestID() { }

	// RVA: 0x2BB167C Offset: 0x2BB167C VA: 0x2BB167C
	public void SetQuestID(int value) { }

	// RVA: 0x2BB1684 Offset: 0x2BB1684 VA: 0x2BB1684
	public int GetSpotID() { }

	// RVA: 0x2BB17C0 Offset: 0x2BB17C0 VA: 0x2BB17C0
	public void SetSpotID(int value) { }

	// RVA: 0x2BB1848 Offset: 0x2BB1848 VA: 0x2BB1848
	public void SetWarID(int warId) { }

	// RVA: 0x2BB1850 Offset: 0x2BB1850 VA: 0x2BB1850
	public int GetWarID() { }

	// RVA: 0x2BB1858 Offset: 0x2BB1858 VA: 0x2BB1858
	public QuestEntity.enType GetQuestType() { }

	// RVA: 0x2BB1888 Offset: 0x2BB1888 VA: 0x2BB1888
	public MapControl.QuestInfo.DispType GetDispType() { }

	// RVA: 0x2BB1890 Offset: 0x2BB1890 VA: 0x2BB1890
	public bool IsDisaplayable() { }

	// RVA: 0x2BB18AC Offset: 0x2BB18AC VA: 0x2BB18AC
	public void SetDispType(MapControl.QuestInfo.DispType dispType, CondType.Kind quest_release_type = 0, int quest_release_target_id = 0, long quest_release_value = 0, int quest_release_closed_id = 0) { }

	// RVA: 0x2BB18C0 Offset: 0x2BB18C0 VA: 0x2BB18C0
	public MapControl.QuestInfo.TouchType GetTouchType() { }

	// RVA: 0x2BB18C8 Offset: 0x2BB18C8 VA: 0x2BB18C8
	public void SetTouchType(MapControl.QuestInfo.TouchType eTouchType) { }

	// RVA: 0x2BB18D0 Offset: 0x2BB18D0 VA: 0x2BB18D0
	public bool IsNew() { }

	// RVA: 0x2BB18D8 Offset: 0x2BB18D8 VA: 0x2BB18D8
	public void SetIsNew(bool isNew) { }

	// RVA: 0x2BB18E4 Offset: 0x2BB18E4 VA: 0x2BB18E4
	public int GetQuestPhase() { }

	// RVA: 0x2BB18EC Offset: 0x2BB18EC VA: 0x2BB18EC
	public void SetQuestPhase(int questPhase) { }

	// RVA: 0x2BB18F4 Offset: 0x2BB18F4 VA: 0x2BB18F4
	public int GetPhaseMax() { }

	// RVA: 0x2BB1954 Offset: 0x2BB1954 VA: 0x2BB1954
	public int GetClearPhaseMax() { }

	// RVA: 0x2BB1AD8 Offset: 0x2BB1AD8 VA: 0x2BB1AD8
	public int GetPickupPriority() { }

	// RVA: 0x2BB1AE0 Offset: 0x2BB1AE0 VA: 0x2BB1AE0
	public void SetPickupPriority(int pickupPriority) { }

	// RVA: 0x2BB1AE8 Offset: 0x2BB1AE8 VA: 0x2BB1AE8
	public void SetCostCalcVal(int val) { }

	// RVA: 0x2BB1AF0 Offset: 0x2BB1AF0 VA: 0x2BB1AF0
	public int GetCostCalcVal() { }

	// RVA: 0x2BB1AF8 Offset: 0x2BB1AF8 VA: 0x2BB1AF8
	public void SetEndTime(long val) { }

	// RVA: 0x2BB1B00 Offset: 0x2BB1B00 VA: 0x2BB1B00
	public long GetEndTime() { }

	// RVA: 0x2BB1B08 Offset: 0x2BB1B08 VA: 0x2BB1B08
	public void SetMine(int questId) { }

	// RVA: 0x2BB16B4 Offset: 0x2BB16B4 VA: 0x2BB16B4
	public QuestEntity GetMine() { }

	// RVA: 0x2BB1B10 Offset: 0x2BB1B10 VA: 0x2BB1B10
	public void SetTerminalParamsValue() { }
}

// Namespace: 
public enum MapControl.QuestInfo.DispType // TypeDefIndex: 11074
{
	// Fields
	public int value__; // 0x0
	public const MapControl.QuestInfo.DispType None = 0;
	public const MapControl.QuestInfo.DispType Normal = 1;
	public const MapControl.QuestInfo.DispType Closed = 2;
	public const MapControl.QuestInfo.DispType Never = 3;
}

// Namespace: 
public enum MapControl.QuestInfo.TouchType // TypeDefIndex: 11075
{
	// Fields
	public int value__; // 0x0
	public const MapControl.QuestInfo.TouchType Disable = 0;
	public const MapControl.QuestInfo.TouchType Enable = 1;
}

// Namespace: 
public class MapControl.SpotInfo // TypeDefIndex: 11076
{
	// Fields
	private int spotId; // 0x10
	private MapControl.SpotInfo.DispType dispType; // 0x14
	private MapControl.SpotInfo.TouchType touchType; // 0x18
	private int questCount; // 0x1C
	private List<int> availableQuestIdList; // 0x20
	private int freeQuestCount; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC7C608 Offset: 0xC7C608 VA: 0xC7C608
	[DebuggerBrowsableAttribute] // RVA: 0xC7C608 Offset: 0xC7C608 VA: 0xC7C608
	private bool <IsNext>k__BackingField; // 0x2C
	private List<MapControl.QuestInfo> questInfoList; // 0x30
	private SpotEntity mine; // 0x38
	private SpotMaster spotMaster; // 0x40

	// Properties
	public bool IsNext { get; set; }

	// Methods

	// RVA: 0x2BB0CAC Offset: 0x2BB0CAC VA: 0x2BB0CAC
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3968 Offset: 0xCD3968 VA: 0xCD3968
	// RVA: 0x2BB26B0 Offset: 0x2BB26B0 VA: 0x2BB26B0
	public bool get_IsNext() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3978 Offset: 0xCD3978 VA: 0xCD3978
	// RVA: 0x2BB26B8 Offset: 0x2BB26B8 VA: 0x2BB26B8
	public void set_IsNext(bool value) { }

	// RVA: 0x2BB0AC8 Offset: 0x2BB0AC8 VA: 0x2BB0AC8
	public void Reset() { }

	// RVA: 0x2BB26C4 Offset: 0x2BB26C4 VA: 0x2BB26C4
	public MapControl.QuestInfo AddChild(int questId) { }

	// RVA: 0x2BB2764 Offset: 0x2BB2764 VA: 0x2BB2764
	public int GetMapID() { }

	// RVA: 0x2BB2818 Offset: 0x2BB2818 VA: 0x2BB2818
	public int GetSpotID() { }

	// RVA: 0x2BB1840 Offset: 0x2BB1840 VA: 0x2BB1840
	public void SetSpotID(int value) { }

	// RVA: 0x2BB2820 Offset: 0x2BB2820 VA: 0x2BB2820
	public MapControl.SpotInfo.DispType GetDispType() { }

	// RVA: 0x2BB2828 Offset: 0x2BB2828 VA: 0x2BB2828
	public void SetDispType(MapControl.SpotInfo.DispType dispType) { }

	// RVA: 0x2BB2830 Offset: 0x2BB2830 VA: 0x2BB2830
	public MapControl.SpotInfo.TouchType GetTouchType() { }

	// RVA: 0x2BB2838 Offset: 0x2BB2838 VA: 0x2BB2838
	public void SetTouchType(MapControl.SpotInfo.TouchType touchType) { }

	// RVA: 0x2BB2840 Offset: 0x2BB2840 VA: 0x2BB2840
	public int GetQuestcount() { }

	// RVA: 0x2BB2848 Offset: 0x2BB2848 VA: 0x2BB2848
	public List<int> GetAvailableQuestIdList() { }

	// RVA: 0x2BB28B8 Offset: 0x2BB28B8 VA: 0x2BB28B8
	public void SetQuestcount(int questCount) { }

	// RVA: 0x2BB28C0 Offset: 0x2BB28C0 VA: 0x2BB28C0
	public void AddQuestCount(int questCount) { }

	// RVA: 0x2BB28D0 Offset: 0x2BB28D0 VA: 0x2BB28D0
	public void AddAvailableQuestId(int questId) { }

	// RVA: 0x2BB2940 Offset: 0x2BB2940 VA: 0x2BB2940
	public int GetFreeQuestCount() { }

	// RVA: 0x2BB2948 Offset: 0x2BB2948 VA: 0x2BB2948
	public void SetFreeQuestCount(int freeQuestCount) { }

	// RVA: 0x2BB2950 Offset: 0x2BB2950 VA: 0x2BB2950
	public void AddFreeQuestCount(int addCount) { }

	// RVA: 0x2BB2960 Offset: 0x2BB2960 VA: 0x2BB2960
	public bool IsNextDisp() { }

	// RVA: 0x2BB0D6C Offset: 0x2BB0D6C VA: 0x2BB0D6C
	public void SetMine(int spotId) { }

	// RVA: 0x2BB2794 Offset: 0x2BB2794 VA: 0x2BB2794
	public SpotEntity GetMine() { }

	// RVA: 0x2BB2984 Offset: 0x2BB2984 VA: 0x2BB2984
	private SpotMaster GetSpotMaster() { }
}

// Namespace: 
public enum MapControl.SpotInfo.DispType // TypeDefIndex: 11077
{
	// Fields
	public int value__; // 0x0
	public const MapControl.SpotInfo.DispType None = 0;
	public const MapControl.SpotInfo.DispType Normal = 1;
	public const MapControl.SpotInfo.DispType Gray = 2;
}

// Namespace: 
public enum MapControl.SpotInfo.TouchType // TypeDefIndex: 11078
{
	// Fields
	public int value__; // 0x0
	public const MapControl.SpotInfo.TouchType Disable = 0;
	public const MapControl.SpotInfo.TouchType Enable = 1;
}

// Namespace: 
public class MapControl.SpotRoadInfo // TypeDefIndex: 11079
{
	// Fields
	private MapControl.SpotRoadInfo.DispType dispType; // 0x10
	private int spotRoadId; // 0x14
	private SpotRoadMaster spotRoadMaster; // 0x18

	// Methods

	// RVA: 0x2BB0E20 Offset: 0x2BB0E20 VA: 0x2BB0E20
	public void .ctor() { }

	// RVA: 0x2BB0C04 Offset: 0x2BB0C04 VA: 0x2BB0C04
	public void Reset() { }

	// RVA: 0x2BB2A04 Offset: 0x2BB2A04 VA: 0x2BB2A04
	public void SetDispType(MapControl.SpotRoadInfo.DispType dispType) { }

	// RVA: 0x2BB2A0C Offset: 0x2BB2A0C VA: 0x2BB2A0C
	public MapControl.SpotRoadInfo.DispType GetDispType() { }

	// RVA: 0x2BB0E28 Offset: 0x2BB0E28 VA: 0x2BB0E28
	public void SetMine(int spotRoadId) { }

	// RVA: 0x2BB2A14 Offset: 0x2BB2A14 VA: 0x2BB2A14
	public SpotRoadEntity GetMine() { }

