
// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFAF0 Offset: 0xCAFAF0 VA: 0xCAFAF0
private sealed class TitleRootComponent.<confirmCacheClear>c__AnonStorey4 // TypeDefIndex: 8676
{
	// Fields
	internal bool isDecide; // 0x10
	internal TitleRootComponent $this; // 0x18

	// Methods

	// RVA: 0x17E8300 Offset: 0x17E8300 VA: 0x17E8300
	public void .ctor() { }

	// RVA: 0x17E8AF0 Offset: 0x17E8AF0 VA: 0x17E8AF0
	internal void <>m__0() { }
}

// Namespace: 
public class ForceDisableObject : MonoBehaviour // TypeDefIndex: 8677
{
	// Fields
	public Transform[] disableObjects; // 0x18

	// Methods

	// RVA: 0x1CB72C8 Offset: 0x1CB72C8 VA: 0x1CB72C8
	public void .ctor() { }

	// RVA: 0x1CB72D0 Offset: 0x1CB72D0 VA: 0x1CB72D0
	private void Start() { }

	// RVA: 0x1CB72D4 Offset: 0x1CB72D4 VA: 0x1CB72D4
	public void DisableAllObjects() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC96948 Offset: 0xC96948 VA: 0xC96948
public class ShaderCutoutDisplayProgress : MonoBehaviour // TypeDefIndex: 8678
{
	// Fields
	private Material shaderMaterial; // 0x18
	[SerializeField] // RVA: 0xCCC81C Offset: 0xCCC81C VA: 0xCCC81C
	private ShaderCutoutDisplayProgress.DisplayStartPosition startPos; // 0x20
	[SerializeField] // RVA: 0xCCC82C Offset: 0xCCC82C VA: 0xCCC82C
	[RangeAttribute] // RVA: 0xCCC82C Offset: 0xCCC82C VA: 0xCCC82C
	private float transmissionRatioRange; // 0x24
	[SerializeField] // RVA: 0xCCC86C Offset: 0xCCC86C VA: 0xCCC86C
	private bool isSharedMaterial; // 0x28
	public ShaderCutoutDisplayProgress.ShaderFloatParam displayProgress; // 0x2C
	public Color multiplySyntheticColor; // 0x3C

	// Methods

	// RVA: 0x18927F0 Offset: 0x18927F0 VA: 0x18927F0
	public void .ctor() { }

	// RVA: 0x1892830 Offset: 0x1892830 VA: 0x1892830
	private void Awake() { }

	// RVA: 0x189292C Offset: 0x189292C VA: 0x189292C
	private void InitShaderParam() { }

	// RVA: 0x1892BA0 Offset: 0x1892BA0 VA: 0x1892BA0
	private bool IsVertical(ShaderCutoutDisplayProgress.DisplayStartPosition startPos) { }

	// RVA: 0x1892BB0 Offset: 0x1892BB0 VA: 0x1892BB0
	private bool IsProportion(ShaderCutoutDisplayProgress.DisplayStartPosition startPos) { }

	// RVA: 0x1892B40 Offset: 0x1892B40 VA: 0x1892B40
	private void InitUpdateShaderParam() { }

	// RVA: 0x1892BC8 Offset: 0x1892BC8 VA: 0x1892BC8
	private void InitUpdateShaderParam(ref ShaderCutoutDisplayProgress.ShaderFloatParam param, string propertyName) { }

	// RVA: 0x189285C Offset: 0x189285C VA: 0x189285C
	private void SetMaterial() { }

	// RVA: 0x1892BFC Offset: 0x1892BFC VA: 0x1892BFC
	private void Update() { }

	// RVA: 0x1892C00 Offset: 0x1892C00 VA: 0x1892C00
	private void UpdateShaderParam() { }

	// RVA: 0x1892CE4 Offset: 0x1892CE4 VA: 0x1892CE4
	private void UpdateShaderParam(ref ShaderCutoutDisplayProgress.ShaderFloatParam param) { }
}

// Namespace: 
public enum ShaderCutoutDisplayProgress.DisplayStartPosition // TypeDefIndex: 8679
{
	// Fields
	public int value__; // 0x0
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Left = 0;
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Top = 1;
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Right = 2;
	public const ShaderCutoutDisplayProgress.DisplayStartPosition Bottom = 3;
}

// Namespace: 
[Serializable]
public struct ShaderCutoutDisplayProgress.ShaderFloatParam // TypeDefIndex: 8680
{
	// Fields
	public int propertyId; // 0x0
	public bool isNoUpdate; // 0x4
	public float prevValue; // 0x8
	[RangeAttribute] // RVA: 0xCCC87C Offset: 0xCCC87C VA: 0xCCC87C
	public float value; // 0xC
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC96958 Offset: 0xC96958 VA: 0xC96958
[RequireComponent] // RVA: 0xC96958 Offset: 0xC96958 VA: 0xC96958
public class ShaderParamAnimation : MonoBehaviour // TypeDefIndex: 8681
{
	// Fields
	private Material material; // 0x18
	[SerializeField] // RVA: 0xCCC894 Offset: 0xCCC894 VA: 0xCCC894
	public ShaderParamAnimation.FloatCountType FloatType; // 0x20
	[SerializeField] // RVA: 0xCCC8A4 Offset: 0xCCC8A4 VA: 0xCCC8A4
	public ShaderParamAnimation.VectorCountType VectorType; // 0x24
	[SerializeField] // RVA: 0xCCC8B4 Offset: 0xCCC8B4 VA: 0xCCC8B4
	public string FloatNameA; // 0x28
	[SerializeField] // RVA: 0xCCC8C4 Offset: 0xCCC8C4 VA: 0xCCC8C4
	public float FloatValueA; // 0x30
	[SerializeField] // RVA: 0xCCC8D4 Offset: 0xCCC8D4 VA: 0xCCC8D4
	public string FloatNameB; // 0x38
	[SerializeField] // RVA: 0xCCC8E4 Offset: 0xCCC8E4 VA: 0xCCC8E4
	public float FloatValueB; // 0x40
	[SerializeField] // RVA: 0xCCC8F4 Offset: 0xCCC8F4 VA: 0xCCC8F4
	public string FloatNameC; // 0x48
	[SerializeField] // RVA: 0xCCC904 Offset: 0xCCC904 VA: 0xCCC904
	public float FloatValueC; // 0x50
	[SerializeField] // RVA: 0xCCC914 Offset: 0xCCC914 VA: 0xCCC914
	public string FloatNameD; // 0x58
	[SerializeField] // RVA: 0xCCC924 Offset: 0xCCC924 VA: 0xCCC924
	public float FloatValueD; // 0x60
	[SerializeField] // RVA: 0xCCC934 Offset: 0xCCC934 VA: 0xCCC934
	public string Vector2NameA; // 0x68
	[SerializeField] // RVA: 0xCCC944 Offset: 0xCCC944 VA: 0xCCC944
	public Vector2 Vector2ValueA; // 0x70
	[SerializeField] // RVA: 0xCCC954 Offset: 0xCCC954 VA: 0xCCC954
	public string Vector2NameB; // 0x78
	[SerializeField] // RVA: 0xCCC964 Offset: 0xCCC964 VA: 0xCCC964
	public Vector2 Vector2ValueB; // 0x80
	[SerializeField] // RVA: 0xCCC974 Offset: 0xCCC974 VA: 0xCCC974
	public string Vector2NameC; // 0x88
	[SerializeField] // RVA: 0xCCC984 Offset: 0xCCC984 VA: 0xCCC984
	public Vector2 Vector2ValueC; // 0x90
	[SerializeField] // RVA: 0xCCC994 Offset: 0xCCC994 VA: 0xCCC994
	public string Vector2NameD; // 0x98
	[SerializeField] // RVA: 0xCCC9A4 Offset: 0xCCC9A4 VA: 0xCCC9A4
	public Vector2 Vector2ValueD; // 0xA0
	private int FloatNameA_Id; // 0xA8
	private int FloatNameB_Id; // 0xAC
	private int FloatNameC_Id; // 0xB0
	private int FloatNameD_Id; // 0xB4
	private int Vector2NameA_Id; // 0xB8
	private int Vector2NameB_Id; // 0xBC
	private int Vector2NameC_Id; // 0xC0
	private int Vector2NameD_Id; // 0xC4

	// Methods

	// RVA: 0x1892D6C Offset: 0x1892D6C VA: 0x1892D6C
	public void .ctor() { }

	// RVA: 0x1892D74 Offset: 0x1892D74 VA: 0x1892D74
	private void Reset() { }

	// RVA: 0x1892ECC Offset: 0x1892ECC VA: 0x1892ECC
	private void Start() { }

	// RVA: 0x1892ED0 Offset: 0x1892ED0 VA: 0x1892ED0
	public void SetupMaterial() { }

	// RVA: 0x1893130 Offset: 0x1893130 VA: 0x1893130
	private void setupShader() { }

	// RVA: 0x18931E8 Offset: 0x18931E8 VA: 0x18931E8
	private void Update() { }

	// RVA: 0x18931EC Offset: 0x18931EC VA: 0x18931EC
	public void UpdateMaterial() { }
}

// Namespace: 
public enum ShaderParamAnimation.FloatCountType // TypeDefIndex: 8682
{
	// Fields
	public int value__; // 0x0
	public const ShaderParamAnimation.FloatCountType Float_0 = 0;
	public const ShaderParamAnimation.FloatCountType Float_1 = 1;
	public const ShaderParamAnimation.FloatCountType Float_2 = 2;
	public const ShaderParamAnimation.FloatCountType Float_3 = 3;
	public const ShaderParamAnimation.FloatCountType Float_4 = 4;
}

// Namespace: 
public enum ShaderParamAnimation.VectorCountType // TypeDefIndex: 8683
{
	// Fields
	public int value__; // 0x0
	public const ShaderParamAnimation.VectorCountType Vector_0 = 0;
	public const ShaderParamAnimation.VectorCountType Vector_1 = 1;
	public const ShaderParamAnimation.VectorCountType Vector_2 = 2;
	public const ShaderParamAnimation.VectorCountType Vector_3 = 3;
	public const ShaderParamAnimation.VectorCountType Vector_4 = 4;
}

// Namespace: NetworkOverrideAsset
public class Server : MonoBehaviour // TypeDefIndex: 8684
{
	// Methods

	// RVA: 0x18C9BAC Offset: 0x18C9BAC VA: 0x18C9BAC
	public void .ctor() { }
}

// Namespace: 
public class BattleActionLogManager : BattleActionLogManagerInterface // TypeDefIndex: 8685
{
	// Fields
	private MemoryStream header; // 0x10
	private MemoryStream data; // 0x18
	private BinaryWriter headerWriter; // 0x20
	private BinaryWriter dataWriter; // 0x28

	// Methods

	// RVA: 0x1E955E8 Offset: 0x1E955E8 VA: 0x1E955E8
	public void .ctor() { }

	// RVA: 0x1E956BC Offset: 0x1E956BC VA: 0x1E956BC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1E95730 Offset: 0x1E95730 VA: 0x1E95730 Slot: 4
	public void close() { }

	// RVA: 0x1E957B4 Offset: 0x1E957B4 VA: 0x1E957B4
	private void addHeader(BattleActionLogType.Type logType) { }

	// RVA: 0x1E9584C Offset: 0x1E9584C VA: 0x1E9584C Slot: 5
	public byte[] getHeaderRaw() { }

	// RVA: 0x1E95884 Offset: 0x1E95884 VA: 0x1E95884 Slot: 6
	public byte[] getDataRaw() { }

	// RVA: 0x1E958BC Offset: 0x1E958BC VA: 0x1E958BC Slot: 7
	public void setHeader(byte[] buffer) { }

	// RVA: 0x1E958F8 Offset: 0x1E958F8 VA: 0x1E958F8 Slot: 8
	public void setData(byte[] buffer) { }

	// RVA: 0x1E95934 Offset: 0x1E95934 VA: 0x1E95934 Slot: 9
	public void addLogUseSkill(BattleLogicTask task) { }

	// RVA: 0x1E95B44 Offset: 0x1E95B44 VA: 0x1E95B44 Slot: 10
	public void addLogUseCommandSpell(BattleLogicTask task) { }

	// RVA: 0x1E95C90 Offset: 0x1E95C90 VA: 0x1E95C90 Slot: 11
	public void addLogSelectTarget(int selectIndex) { }

	// RVA: 0x1E95CDC Offset: 0x1E95CDC VA: 0x1E95CDC Slot: 12
	public void addLogSelectCommand(int selectIndex1, int selectIndex2, int selectIndex3) { }

	// RVA: 0x1E95D90 Offset: 0x1E95D90 VA: 0x1E95D90 Slot: 13
	public void addLogContinue() { }
}

// Namespace: 
public interface BattleActionLogManagerInterface // TypeDefIndex: 8686
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void close();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract byte[] getHeaderRaw();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract byte[] getDataRaw();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void setHeader(byte[] buffer);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void setData(byte[] buffer);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void addLogUseSkill(BattleLogicTask task);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void addLogUseCommandSpell(BattleLogicTask task);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void addLogSelectTarget(int selectIndex);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void addLogSelectCommand(int selectIndex1, int selectIndex2, int selectIndex3);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void addLogContinue();
}

// Namespace: 
public class BattleActionLogManagerNOP : BattleActionLogManagerInterface // TypeDefIndex: 8687
{
	// Fields
	private byte[] dummy; // 0x10

	// Methods

	// RVA: 0x1E95DD8 Offset: 0x1E95DD8 VA: 0x1E95DD8
	public void .ctor() { }

	// RVA: 0x1E95E38 Offset: 0x1E95E38 VA: 0x1E95E38 Slot: 4
	public void close() { }

	// RVA: 0x1E95E3C Offset: 0x1E95E3C VA: 0x1E95E3C Slot: 5
	public byte[] getHeaderRaw() { }

	// RVA: 0x1E95E44 Offset: 0x1E95E44 VA: 0x1E95E44 Slot: 6
	public byte[] getDataRaw() { }

	// RVA: 0x1E95E4C Offset: 0x1E95E4C VA: 0x1E95E4C Slot: 7
	public void setHeader(byte[] buffer) { }

	// RVA: 0x1E95E50 Offset: 0x1E95E50 VA: 0x1E95E50 Slot: 8
	public void setData(byte[] buffer) { }

	// RVA: 0x1E95E54 Offset: 0x1E95E54 VA: 0x1E95E54 Slot: 9
	public void addLogUseSkill(BattleLogicTask task) { }

	// RVA: 0x1E95E58 Offset: 0x1E95E58 VA: 0x1E95E58 Slot: 10
	public void addLogUseCommandSpell(BattleLogicTask task) { }

	// RVA: 0x1E95E5C Offset: 0x1E95E5C VA: 0x1E95E5C Slot: 11
	public void addLogSelectTarget(int selectIndex) { }

	// RVA: 0x1E95E60 Offset: 0x1E95E60 VA: 0x1E95E60 Slot: 12
	public void addLogSelectCommand(int selectIndex1, int selectIndex2, int selectIndex3) { }

	// RVA: 0x1E95E64 Offset: 0x1E95E64 VA: 0x1E95E64 Slot: 13
	public void addLogContinue() { }
}

// Namespace: 
public class BattleActionLogType // TypeDefIndex: 8688
{
	// Methods

	// RVA: 0x1E95E68 Offset: 0x1E95E68 VA: 0x1E95E68
	public void .ctor() { }
}

// Namespace: 
public enum BattleActionLogType.Type // TypeDefIndex: 8689
{
	// Fields
	public int value__; // 0x0
	public const BattleActionLogType.Type NONE = 0;
	public const BattleActionLogType.Type SELECT_TARGET = 1;
	public const BattleActionLogType.Type SKILL = 2;
	public const BattleActionLogType.Type COMMAND_SPELL = 3;
	public const BattleActionLogType.Type SELECT_COMMAND = 4;
	public const BattleActionLogType.Type CONTINUE = 5;
	public const BattleActionLogType.Type TERMINATE = 6;
}

// Namespace: 
public class AutoDestroyObjectComponent : MonoBehaviour // TypeDefIndex: 8690
{
	// Fields
	public float lostTime; // 0x18
	private float elapsedTime; // 0x1C

	// Methods

	// RVA: 0x1471A10 Offset: 0x1471A10 VA: 0x1471A10
	public void .ctor() { }

	// RVA: 0x1471A20 Offset: 0x1471A20 VA: 0x1471A20
	private void Start() { }

	// RVA: 0x1471A28 Offset: 0x1471A28 VA: 0x1471A28
	private void Update() { }
}

// Namespace: 
public class BattleActionCamera : BaseMonoBehaviour // TypeDefIndex: 8691
{
	// Fields
	public Dictionary<int, PlayMakerFSM> cameraFsmDictionary; // 0x18
	public Dictionary<int, int> cameraTargetDictionary; // 0x20
	public Camera actorcamera; // 0x28
	public Camera frontcamera; // 0x30
	public Camera middleCamera; // 0x38
	private Dictionary<string, bool> frontCameraEffectsStatus; // 0x40
	private Dictionary<string, bool> middleCameraEffectsStatus; // 0x48
	private BattlePerformance perf; // 0x50
	private PlayMakerFSM mainFsm; // 0x58
	private const int mainFsmNo = 0;
	private const string defaultEvent = "CAMERA_END";
	protected float ShakeTime; // 0x60
	protected float ShakeTargetTime; // 0x64
	protected Vector3 ShakeRange; // 0x68
	protected bool Shaking; // 0x74

	// Methods

	// RVA: 0x1485518 Offset: 0x1485518 VA: 0x1485518
	public void .ctor() { }

	// RVA: 0x14855B0 Offset: 0x14855B0 VA: 0x14855B0
	public void Initialize(BattlePerformance inPerf) { }

	// RVA: 0x1485824 Offset: 0x1485824 VA: 0x1485824
	public void setSpecialCamera(bool active) { }

	// RVA: 0x1485954 Offset: 0x1485954 VA: 0x1485954
	public void setNormalMode() { }

	// RVA: 0x148595C Offset: 0x148595C VA: 0x148595C
	public void setSpecialMode() { }

	// RVA: -1 Offset: -1
	protected void saveEffectStatus<T>(Camera cam, Dictionary<string, bool> stat) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CF320 Offset: 0x21CF320 VA: 0x21CF320
	|-BattleActionCamera.saveEffectStatus<Bloom>
	|-BattleActionCamera.saveEffectStatus<GrayscaleEffect>
	|-BattleActionCamera.saveEffectStatus<MotionBlur>
	|-BattleActionCamera.saveEffectStatus<object>
	|-BattleActionCamera.saveEffectStatus<Vignetting>
	*/

	// RVA: -1 Offset: -1
	protected void loadEffectStatus<T>(Camera cam, Dictionary<string, bool> stat) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CF18C Offset: 0x21CF18C VA: 0x21CF18C
	|-BattleActionCamera.loadEffectStatus<Bloom>
	|-BattleActionCamera.loadEffectStatus<GrayscaleEffect>
	|-BattleActionCamera.loadEffectStatus<MotionBlur>
	|-BattleActionCamera.loadEffectStatus<object>
	|-BattleActionCamera.loadEffectStatus<Vignetting>
	*/

	// RVA: 0x1485964 Offset: 0x1485964 VA: 0x1485964
	protected Dictionary<string, bool> saveEffectStatusCamera(Camera targetCamera) { }

	// RVA: 0x1485A80 Offset: 0x1485A80 VA: 0x1485A80
	protected void loadEffectStatusCamera(Camera targetCamera, Dictionary<string, bool> stat) { }

	// RVA: 0x1485B80 Offset: 0x1485B80 VA: 0x1485B80
	public void saveEffectStatus() { }

	// RVA: 0x1485BB8 Offset: 0x1485BB8 VA: 0x1485BB8
	public void loadEffectStatus() { }

	// RVA: 0x1485BEC Offset: 0x1485BEC VA: 0x1485BEC
	public void initializeRegisterFsm(PlayMakerFSM targetFsm) { }

	// RVA: 0x1485D9C Offset: 0x1485D9C VA: 0x1485D9C
	public void sendCameraEvent(int cameraId, string eventName) { }

	// RVA: 0x1485F90 Offset: 0x1485F90 VA: 0x1485F90
	public void sendEvent(int uniqueId, string eventName) { }

	// RVA: 0x1486184 Offset: 0x1486184 VA: 0x1486184
	public void sendMainEvent(string eventName) { }

	// RVA: 0x1486194 Offset: 0x1486194 VA: 0x1486194
	public void setGameObject(int uniqueId, GameObject obj, string nameStr) { }

	// RVA: 0x1486324 Offset: 0x1486324 VA: 0x1486324
	public PlayMakerFSM getUniqueFsm(int uniqueId) { }

	// RVA: 0x1486068 Offset: 0x1486068 VA: 0x1486068
	public PlayMakerFSM getUniqueFsm(int uniqueId, out int cameraId) { }

	// RVA: 0x1486348 Offset: 0x1486348 VA: 0x1486348
	public void registerCamera(int uniqueId, int cameraId) { }

	// RVA: 0x14865D0 Offset: 0x14865D0 VA: 0x14865D0
	public void deleteCamera(int uniqueId, int cameraId) { }

	// RVA: 0x14868A8 Offset: 0x14868A8 VA: 0x14868A8
	public void ShakePosition(Vector3 range, float tm) { }

	// RVA: 0x14868C0 Offset: 0x14868C0 VA: 0x14868C0
	private void Update() { }

	// RVA: 0x1486AB0 Offset: 0x1486AB0 VA: 0x1486AB0
	public void playCameraAnimation(string animName) { }

	// RVA: 0x1486D74 Offset: 0x1486D74 VA: 0x1486D74
	public void stopCameraAnimation() { }
}

// Namespace: 
public class BattleActionData // TypeDefIndex: 8692
{
	// Fields
	public BattleActionData.STATE state; // 0x10
	public string endcameraname; // 0x18
	public int actorId; // 0x20
	public int targetId; // 0x24
	public int[] pttargetIds; // 0x28
	public int motionId; // 0x30
	public int imageId; // 0x34
	public int type; // 0x38
	public int commandType; // 0x3C
	public string motionname; // 0x40
	public GameObject targetObject; // 0x48
	public GameObject prevTargetObject; // 0x50
	public bool isAllAttack; // 0x58
	public static int TYPE_DEAD; // 0x0
	public static int TYPE_TW; // 0x4
	public static int TYPE_SKILL; // 0x8
	public static int TYPE_BACKSTEP; // 0xC
	public static int TYPE_RESURRECTION; // 0x10
	public static int TYPE_BOOSTSKILL; // 0x14
	public static int TYPE_COMMAND_SPELL; // 0x18
	public static int TYPE_ORDERARTS; // 0x1C
	public static int TYPE_ORDERBUSTER; // 0x20
	public static int TYPE_ORDERQUICK; // 0x24
	public static int TYPE_ENEMY_CUTIN; // 0x28
	public static int TYPE_ENEMY_SPELL_CUTIN; // 0x2C
	public bool flash; // 0x59
	public bool pair; // 0x5A
	public bool three; // 0x5B
	public bool prevattackme; // 0x5C
	public bool nextattackme; // 0x5D
	public int actionIndex; // 0x60
	public int attackcount; // 0x64
	public int chainCount; // 0x68
	public int commandattack; // 0x6C
	public int treasureDvcId; // 0x70
	public float systemTime; // 0x74
	public string skillMessage; // 0x78
	public string motionMessage; // 0x80
	public BattleSkillInfoData skillInfo; // 0x88
	public int addCriticalStars; // 0x90
	public bool redrawCommandCard; // 0x94
	public int[] effectlist; // 0x98
	public int npPer; // 0xA0
	public long userCommandCodeId; // 0xA8
	public BattleActionData.GimmickData gimmickData; // 0xB0
	private List<int> damageSideEffectedSvtIds; // 0xB8
	private List<KeyValuePair<int, int>> attackSideEffectedSvtIds; // 0xC0
	private List<BattleActionData.ServantLogicResultData> servantLogicResultList; // 0xC8
	public bool funcResult; // 0xD0
	private List<Target.PlayerTypeFlag> funcTargetPlayerTypeList; // 0xD8
	public bool isSuccessTargetSelection; // 0xE0
	public bool isForcedSpeedOne; // 0xE1
	public bool isSkillShift; // 0xE2
	public BattleActionData afterActionData; // 0xE8
	public BattleLogicTask.ACTORTYPE taskActorType; // 0xF0
	public bool isRevival; // 0xF4
	private bool isExecPreActionProc; // 0xF5
	public bool checkRevengeId; // 0xF6
	public static int addActionOrder; // 0x30
	private bool isPreAfterActCheckDead; // 0xF7
	public bool IsVanishSkill; // 0xF8
	public int ActSetId; // 0xFC
	[CompilerGeneratedAttribute] // RVA: 0xCCC9B4 Offset: 0xCCC9B4 VA: 0xCCC9B4
	[DebuggerBrowsableAttribute] // RVA: 0xCCC9B4 Offset: 0xCCC9B4 VA: 0xCCC9B4
	private BattleActionWaitCond.Base <WaitCond>k__BackingField; // 0x100
	private List<BattleActionData.DamageData> _damagedatalist; // 0x108
	public List<BattleActionData.BuffData> buffdatalist; // 0x110
	public List<BattleActionData.HealData> healdatalist; // 0x118
	public List<BattleActionData.ReplaceMember> replacememberlist; // 0x120
	public List<BattleActionData.MoveToSubMember> moveToSubMemberList; // 0x128
	public List<BattleActionData.TransformServant> transformServantlist; // 0x130
	public List<BattleActionData.SummonServant> summonServantList; // 0x138
	public List<BattleActionData.ShiftServant> shiftServantList; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xCCC9F0 Offset: 0xCCC9F0 VA: 0xCCC9F0
	[DebuggerBrowsableAttribute] // RVA: 0xCCC9F0 Offset: 0xCCC9F0 VA: 0xCCC9F0
	private BattleActionData.BaseShiftGaugeData <ShiftGauge>k__BackingField; // 0x148
	public List<BattleActionData.ChangeBg> changeBgList; // 0x150
	public string skillCutInMessage; // 0x158
	public List<BattleActionData> sideEffectList; // 0x160
	public BattleActionData.ACTTYPE actType; // 0x168
	private bool noOperation; // 0x16C
	[CompilerGeneratedAttribute] // RVA: 0xCCCA2C Offset: 0xCCCA2C VA: 0xCCCA2C
	private static Func<BattleActionData.BuffData, bool> <>f__am$cache0; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCCCA3C Offset: 0xCCCA3C VA: 0xCCCA3C
	private static Func<BattleActionData.BuffData, bool> <>f__am$cache1; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCCCA4C Offset: 0xCCCA4C VA: 0xCCCA4C
	private static Comparison<BattleActionData.BaseData> <>f__am$cache2; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCCCA5C Offset: 0xCCCA5C VA: 0xCCCA5C
	private static Action<BattleActionData.BuffData> <>f__am$cache3; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCCCA6C Offset: 0xCCCA6C VA: 0xCCCA6C
	private static Converter<BattleActionData.BuffData, int> <>f__am$cache4; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCCCA7C Offset: 0xCCCA7C VA: 0xCCCA7C
	private static Converter<BattleActionData.HealData, int> <>f__am$cache5; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCCCA8C Offset: 0xCCCA8C VA: 0xCCCA8C
	private static Comparison<int> <>f__am$cache6; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCCCA9C Offset: 0xCCCA9C VA: 0xCCCA9C
	private static Converter<BattleActionData.BuffData, int> <>f__am$cache7; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCCCAAC Offset: 0xCCCAAC VA: 0xCCCAAC
	private static Converter<BattleActionData.HealData, int> <>f__am$cache8; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCCCABC Offset: 0xCCCABC VA: 0xCCCABC
	private static Converter<BattleActionData.DamageData, int> <>f__am$cache9; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCCCACC Offset: 0xCCCACC VA: 0xCCCACC
	private static Func<BattleActionData.DamageData, int> <>f__am$cacheA; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCCCADC Offset: 0xCCCADC VA: 0xCCCADC
	private static Comparison<int> <>f__am$cacheB; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xCCCAEC Offset: 0xCCCAEC VA: 0xCCCAEC
	private static Func<BattleActionData, BattleActionData> <>f__am$cacheC; // 0x98

	// Properties
	public BattleActionWaitCond.Base WaitCond { get; set; }
	public List<BattleActionData.DamageData> damagedatalist { get; set; }
	public BattleActionData.BaseShiftGaugeData ShiftGauge { get; set; }
	public int NotShiftUpdateFlag { get; }
	public bool NoOperation { get; set; }

	// Methods

	// RVA: 0x1486FBC Offset: 0x1486FBC VA: 0x1486FBC
	public void .ctor() { }

	// RVA: 0x1487128 Offset: 0x1487128 VA: 0x1487128
	public void setStateActors() { }

	// RVA: 0x1487130 Offset: 0x1487130 VA: 0x1487130
	public bool isActors() { }

	// RVA: 0x1487140 Offset: 0x1487140 VA: 0x1487140
	public void setStateSystem() { }

	// RVA: 0x148714C Offset: 0x148714C VA: 0x148714C
	public bool isSystem() { }

	// RVA: 0x148715C Offset: 0x148715C VA: 0x148715C
	public void setStateField() { }

	// RVA: 0x1487168 Offset: 0x1487168 VA: 0x1487168
	public bool isField() { }

	// RVA: 0x1487178 Offset: 0x1487178 VA: 0x1487178
	public void setStateMotion() { }

	// RVA: 0x1487184 Offset: 0x1487184 VA: 0x1487184
	public bool isMotion() { }

	// RVA: 0x1487194 Offset: 0x1487194 VA: 0x1487194
	public bool isEnemyMaster() { }

	// RVA: 0x14871A4 Offset: 0x14871A4 VA: 0x14871A4
	public bool isLoadImmediateEntryServant() { }

	// RVA: 0x14871B4 Offset: 0x14871B4 VA: 0x14871B4
	public bool IsWaitCond() { }

	// RVA: 0x14871C4 Offset: 0x14871C4 VA: 0x14871C4
	public void setEndCamera(string name) { }

	// RVA: 0x14871CC Offset: 0x14871CC VA: 0x14871CC
	public string getEndCamera() { }

	// RVA: 0x14871D4 Offset: 0x14871D4 VA: 0x14871D4
	public bool isEndCamera() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3974C Offset: 0xD3974C VA: 0xD3974C
	// RVA: 0x14871E4 Offset: 0x14871E4 VA: 0x14871E4
	private void set_WaitCond(BattleActionWaitCond.Base value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3975C Offset: 0xD3975C VA: 0xD3975C
	// RVA: 0x14871EC Offset: 0x14871EC VA: 0x14871EC
	public BattleActionWaitCond.Base get_WaitCond() { }

	// RVA: 0x14871F4 Offset: 0x14871F4 VA: 0x14871F4
	public bool isDeadMotion() { }

	// RVA: 0x148726C Offset: 0x148726C VA: 0x148726C
	public bool isResurrectionMotion() { }

	// RVA: 0x14872E4 Offset: 0x14872E4 VA: 0x14872E4
	public bool isSkill() { }

	// RVA: 0x148735C Offset: 0x148735C VA: 0x148735C
	public bool isBoostSkill() { }

	// RVA: 0x14873D4 Offset: 0x14873D4 VA: 0x14873D4
	public void setTargetId(int targetId) { }

	// RVA: 0x14873DC Offset: 0x14873DC VA: 0x14873DC
	public void setPTTargetId(int pttargetId) { }

	// RVA: 0x1487468 Offset: 0x1487468 VA: 0x1487468
	public void setPTTargetId(int[] pttargetIds) { }

	// RVA: 0x1487470 Offset: 0x1487470 VA: 0x1487470
	public int getPTTargetId() { }

	// RVA: 0x1487494 Offset: 0x1487494 VA: 0x1487494
	public int getPTSubTargetId() { }

	// RVA: 0x14874B8 Offset: 0x14874B8 VA: 0x14874B8
	public bool isCommandAttack() { }

	// RVA: 0x148751C Offset: 0x148751C VA: 0x148751C
	public bool isCommonEnemyAttack() { }

	// RVA: 0x148753C Offset: 0x148753C VA: 0x148753C
	public void setCommand(BattleCommandData command) { }

	// RVA: 0x14875D4 Offset: 0x14875D4 VA: 0x14875D4
	public bool isArtsOrderAttack() { }

	// RVA: 0x1487608 Offset: 0x1487608 VA: 0x1487608
	public bool isGrandArtsOrderAttack() { }

	// RVA: 0x1487650 Offset: 0x1487650 VA: 0x1487650
	public void PreActionProcess(BattleData data) { }

	// RVA: 0x148780C Offset: 0x148780C VA: 0x148780C
	public void ExecUnappliedProcess(BattleData data) { }

	// RVA: 0x14879A8 Offset: 0x14879A8 VA: 0x14879A8
	public BattleActionData.BaseData[] GetExecOrderArray(int funcIndex) { }

	// RVA: 0x1487E70 Offset: 0x1487E70 VA: 0x1487E70
	public BattleActionData SetWaitCond(BattleActionWaitCond.Base cond) { }

	// RVA: 0x1487E80 Offset: 0x1487E80 VA: 0x1487E80
	public List<BattleActionData.DamageData> get_damagedatalist() { }

	// RVA: 0x1487EF4 Offset: 0x1487EF4 VA: 0x1487EF4
	public void set_damagedatalist(List<BattleActionData.DamageData> value) { }

	// RVA: 0x1487EFC Offset: 0x1487EFC VA: 0x1487EFC
	public void setDamageData(BattleActionData.DamageData data, DataVals vals, bool isIndiviAtk = False, bool isRarityAtk = False) { }

	// RVA: 0x148800C Offset: 0x148800C VA: 0x148800C
	public BattleActionData.DamageData[] getDamageList(int funcIndex) { }

	// RVA: 0x1488130 Offset: 0x1488130 VA: 0x1488130
	public int[] getDamageTargetIdList() { }

	// RVA: 0x14882BC Offset: 0x14882BC VA: 0x14882BC
	public BattleActionData.SideEffectData[] getDamageAttackSideEffectList() { }

	// RVA: 0x1488444 Offset: 0x1488444 VA: 0x1488444
	private void addDamageSideEffect(List<BattleActionData.SideEffectData> sideEffectList, BattleActionData.DamageData damage, List<BuffList.ACTION> actList) { }

	// RVA: 0x1488574 Offset: 0x1488574 VA: 0x1488574
	public int getTotalDamage() { }

	// RVA: 0x1488704 Offset: 0x1488704 VA: 0x1488704
	public BattleActionData.DamageData[] GetDamageArrayDistinctIndex(int funcIndex = -1) { }

	// RVA: 0x14888A8 Offset: 0x14888A8 VA: 0x14888A8
	public void setBuffData(BattleActionData.BuffData data, DataVals vals) { }

	// RVA: 0x148892C Offset: 0x148892C VA: 0x148892C
	private void AddBuffList(BattleActionData.BuffData data) { }

	// RVA: 0x1487C08 Offset: 0x1487C08 VA: 0x1487C08
	public BattleActionData.BuffData[] getBuffList(int funcIndex = -1) { }

	// RVA: 0x14889D8 Offset: 0x14889D8 VA: 0x14889D8
	public void ResetAllCheckDead() { }

	// RVA: 0x1488AF0 Offset: 0x1488AF0 VA: 0x1488AF0
	public BattleActionData.HealData setHealData(int targetId, int healPoint, int funcIndex, int bufId, DataVals vals, bool isCommandAfter = False) { }

	// RVA: 0x1488C5C Offset: 0x1488C5C VA: 0x1488C5C
	private void AddHealList(BattleActionData.HealData data) { }

	// RVA: 0x1488C04 Offset: 0x1488C04 VA: 0x1488C04
	public void setHealData(BattleActionData.HealData data, DataVals vals) { }

	// RVA: 0x1487D3C Offset: 0x1487D3C VA: 0x1487D3C
	public BattleActionData.HealData[] getHealList(int funcIndex) { }

	// RVA: 0x1488D08 Offset: 0x1488D08 VA: 0x1488D08
	public void setReplaceMember(int index, int inUniqueId, int outUniqueId, int funcIndex) { }

	// RVA: 0x1488DD4 Offset: 0x1488DD4 VA: 0x1488DD4
	public void setReplaceMember(BattleActionData.ReplaceMember data) { }

	// RVA: 0x1488E70 Offset: 0x1488E70 VA: 0x1488E70
	public BattleActionData.ReplaceMember[] getReplaceMember(int funcIndex) { }

	// RVA: 0x1488FA4 Offset: 0x1488FA4 VA: 0x1488FA4
	public void AddNewMoveToSubMember(int index, int uniqueId, int funcIndex, bool isSucceeded) { }

	// RVA: 0x148905C Offset: 0x148905C VA: 0x148905C
	private void InitMoveToSubMemberList() { }

	// RVA: 0x14890CC Offset: 0x14890CC VA: 0x14890CC
	public void AddTransformServant(int index, int uniqueId, int funcIndex, int overwriteLimitCount) { }

	// RVA: 0x14891F4 Offset: 0x14891F4 VA: 0x14891F4
	public List<BattleActionData.TransformServant> GetTransformServantList() { }

	// RVA: 0x1489184 Offset: 0x1489184 VA: 0x1489184
	private void TryInitTransformServant() { }

	// RVA: 0x1489218 Offset: 0x1489218 VA: 0x1489218
	public void setSummonServant(int uniqueId, int unloadUniqueId, int funcIndex, bool isEffect, int callSvtEffectId) { }

	// RVA: 0x1489304 Offset: 0x1489304 VA: 0x1489304
	public BattleActionData.SummonServant[] getSummonServant(int funcIndex) { }

	// RVA: 0x1489420 Offset: 0x1489420 VA: 0x1489420
	public bool checkSummonServantList() { }

	// RVA: 0x1489480 Offset: 0x1489480 VA: 0x1489480
	public void setShiftServant(BattleActionData.ShiftServant data) { }

	// RVA: 0x148951C Offset: 0x148951C VA: 0x148951C
	public BattleActionData.ShiftServant getShiftServant() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3976C Offset: 0xD3976C VA: 0xD3976C
	// RVA: 0x14895AC Offset: 0x14895AC VA: 0x14895AC
	private void set_ShiftGauge(BattleActionData.BaseShiftGaugeData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3977C Offset: 0xD3977C VA: 0xD3977C
	// RVA: 0x14895B4 Offset: 0x14895B4 VA: 0x14895B4
	public BattleActionData.BaseShiftGaugeData get_ShiftGauge() { }

	// RVA: 0x14895BC Offset: 0x14895BC VA: 0x14895BC
	public void SetShiftGauge(BattleActionData.BaseShiftGaugeData shiftGauge) { }

	// RVA: 0x14895C4 Offset: 0x14895C4 VA: 0x14895C4
	public bool IsUpdateShiftHp() { }

	// RVA: 0x14895D4 Offset: 0x14895D4 VA: 0x14895D4
	public int get_NotShiftUpdateFlag() { }

	// RVA: 0x14895E8 Offset: 0x14895E8 VA: 0x14895E8
	public void setChangeBg(int inbgNo, int inTp) { }

	// RVA: 0x14896CC Offset: 0x14896CC VA: 0x14896CC
	public BattleActionData.ChangeBg getChangeBg() { }

	// RVA: 0x148975C Offset: 0x148975C VA: 0x148975C
	public void SetGimmickData(int[] indexArray, string[] startArray, object[] resultArray, int[] types) { }

	// RVA: 0x1489828 Offset: 0x1489828 VA: 0x1489828
	public bool IsGimmick() { }

	// RVA: 0x1489838 Offset: 0x1489838 VA: 0x1489838
	public void setTypeTA() { }

	// RVA: 0x14898A8 Offset: 0x14898A8 VA: 0x14898A8
	public bool isTypeTA() { }

	// RVA: 0x1489920 Offset: 0x1489920 VA: 0x1489920
	public void setTypeOrderArts() { }

	// RVA: 0x1489990 Offset: 0x1489990 VA: 0x1489990
	public void setTypeOrderBuster() { }

	// RVA: 0x1489A00 Offset: 0x1489A00 VA: 0x1489A00
	public void setTypeOrderQuick() { }

	// RVA: 0x1489A70 Offset: 0x1489A70 VA: 0x1489A70
	public bool isTypeOrderArts() { }

	// RVA: 0x1489AE8 Offset: 0x1489AE8 VA: 0x1489AE8
	public bool isTypeOrderBuster() { }

	// RVA: 0x1489B60 Offset: 0x1489B60 VA: 0x1489B60
	public bool isTypeOrderQuick() { }

	// RVA: 0x1489BD8 Offset: 0x1489BD8 VA: 0x1489BD8
	public void SetTypeEnemyCutIn(AiFieldEntity.EffectType effectType) { }

	// RVA: 0x1489CA0 Offset: 0x1489CA0 VA: 0x1489CA0
	public bool isSkillCutIn() { }

	// RVA: 0x1489CF0 Offset: 0x1489CF0 VA: 0x1489CF0
	public int getSkillCutInId() { }

	// RVA: 0x1489D08 Offset: 0x1489D08 VA: 0x1489D08
	public string[] getSkillCutInVoices() { }

	// RVA: 0x1489D1C Offset: 0x1489D1C VA: 0x1489D1C
	public string[] getSkillCutInPrefabInfo() { }

	// RVA: 0x1489D30 Offset: 0x1489D30 VA: 0x1489D30
	public Vector3[] getSkillCutInPrefabOffsets() { }

	// RVA: 0x1489D44 Offset: 0x1489D44 VA: 0x1489D44
	public Vector3[] getSkillCutInPrefabSizes() { }

	// RVA: 0x1489D58 Offset: 0x1489D58 VA: 0x1489D58
	public bool getSkillCutInCamPlayerAll() { }

	// RVA: 0x1489D6C Offset: 0x1489D6C VA: 0x1489D6C
	public bool getSkillCutInCamField() { }

	// RVA: 0x1489D80 Offset: 0x1489D80 VA: 0x1489D80
	public int getSkillCutInMessageMode() { }

	// RVA: 0x1489D94 Offset: 0x1489D94 VA: 0x1489D94
	public bool isTypeMasterCommandSpell() { }

	// RVA: 0x1489E0C Offset: 0x1489E0C VA: 0x1489E0C
	public bool isTypeEnemyCutIn() { }

	// RVA: 0x1489E84 Offset: 0x1489E84 VA: 0x1489E84
	public bool isTypeEnemySpellCutIn() { }

	// RVA: 0x1489EFC Offset: 0x1489EFC VA: 0x1489EFC
	public string toCutinName() { }

	// RVA: 0x148A074 Offset: 0x148A074 VA: 0x148A074
	public int GetTarget(int funcIdx = -1) { }

	// RVA: 0x148A07C Offset: 0x148A07C VA: 0x148A07C
	public int[] GetDamageTargets(int funcIdx = -1) { }

	// RVA: 0x148A230 Offset: 0x148A230 VA: 0x148A230
	public int[] GetBuffTargets(int funcIdx = -1) { }

	// RVA: 0x148A27C Offset: 0x148A27C VA: 0x148A27C
	public int[] GetDebuffTargets(int funcIdx = -1) { }

	// RVA: 0x148A2C8 Offset: 0x148A2C8 VA: 0x148A2C8
	public void setEffect(int[] effectList) { }

	// RVA: 0x148A2D0 Offset: 0x148A2D0 VA: 0x148A2D0
	public int getEffect(int index) { }

	// RVA: 0x148A328 Offset: 0x148A328 VA: 0x148A328
	public void addCriticalStar(int num) { }

	// RVA: -1 Offset: -1
	private void addBattleData<T>(List<T> addDataList, ref List<T> dataList) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CF454 Offset: 0x21CF454 VA: 0x21CF454
	|-BattleActionData.addBattleData<BattleActionData.BuffData>
	|-BattleActionData.addBattleData<BattleActionData.ChangeBg>
	|-BattleActionData.addBattleData<BattleActionData.HealData>
	|-BattleActionData.addBattleData<BattleActionData.MoveToSubMember>
	|-BattleActionData.addBattleData<BattleActionData.ReplaceMember>
	|-BattleActionData.addBattleData<BattleActionData.ShiftServant>
	|-BattleActionData.addBattleData<BattleActionData.SummonServant>
	|-BattleActionData.addBattleData<BattleActionData.TransformServant>
	|-BattleActionData.addBattleData<object>
	*/

	// RVA: 0x148A338 Offset: 0x148A338 VA: 0x148A338
	public void addAction(BattleActionData addData) { }

	// RVA: 0x148A5A0 Offset: 0x148A5A0 VA: 0x148A5A0
	public int[] getInfluenceIds() { }

	// RVA: 0x148A770 Offset: 0x148A770 VA: 0x148A770
	public int[] getTargetIds() { }

	// RVA: 0x148A90C Offset: 0x148A90C VA: 0x148A90C
	public int[] getListFunctionIndex() { }

	// RVA: 0x148AC44 Offset: 0x148AC44 VA: 0x148AC44
	public int[] getListFunctionIndexEx(out int displayFuncNum) { }

	// RVA: 0x148B178 Offset: 0x148B178 VA: 0x148B178
	public int[] GetFunctionIndexArrayNearByCuriousFunc(CuriousFuncEffectTiming effectTiming, int[] resultOnGetFailed) { }

	// RVA: 0x148B314 Offset: 0x148B314 VA: 0x148B314
	public int GetOptionalBattleEffectId(int effectIndex, int resultOnGetFailed = 0) { }

	// RVA: 0x148B3C8 Offset: 0x148B3C8 VA: 0x148B3C8
	public bool IsOptionalBattleEffectIdAvaliable() { }

	// RVA: 0x148B384 Offset: 0x148B384 VA: 0x148B384
	private List<int> GetOptionalBattleEffectIdList(List<int> resultOnGetFailed) { }

	// RVA: 0x148B3E8 Offset: 0x148B3E8 VA: 0x148B3E8
	public bool IsIgnoreWhiteFadeOnSkillMotion() { }

	// RVA: 0x148B418 Offset: 0x148B418 VA: 0x148B418
	public int GetMaxSideEffectCountByTarget(bool isAtkFirst, bool isAtkLast) { }

	// RVA: 0x148B608 Offset: 0x148B608 VA: 0x148B608
	public void SetSideEffectCountByTarget(ref Dictionary<int, int> dicTarget, bool isAtkFirst, bool isAtkLast) { }

	// RVA: 0x148B854 Offset: 0x148B854 VA: 0x148B854
	public int getCountActionForPerformance() { }

	// RVA: 0x148B904 Offset: 0x148B904 VA: 0x148B904
	public void addSideEffectActionData(BattleActionData sideEffectActionData, BattleActionData.ACTTYPE actType) { }

	// RVA: 0x148B988 Offset: 0x148B988 VA: 0x148B988
	public BattleActionData[] getSideEffectList(BattleActionData.ACTTYPE actType) { }

	// RVA: 0x148BA78 Offset: 0x148BA78 VA: 0x148BA78
