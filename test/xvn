	// RVA: 0x148CB50 Offset: 0x148CB50 VA: 0x148CB50
	private void GetTargetPieceToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicPiecePutSqareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x148CD58 Offset: 0x148CD58 VA: 0x148CD58
	private void GetTargetTreasureToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicTreasurePutSqareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x148CF60 Offset: 0x148CF60 VA: 0x148CF60
	private void GetTargetSquareToDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicSquarePutSqareIndex, List<WarBoardAIRoute.RouteData> routeDataList, WarBoardPieceData basePiece, int baseSquareIndex, ref Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData) { }

	// RVA: 0x148D168 Offset: 0x148D168 VA: 0x148D168
	private Dictionary<int, WarBoardAIRoute.TargetData> GetTargetToDistance(WarBoardPieceData basePiece, List<WarBoardAIRoute.RouteData> routeDataList, int baseSquareIndex) { }

	// RVA: 0x148D32C Offset: 0x148D32C VA: 0x148D32C
	private Dictionary<int, int> GetDesignationItemToDistance(WarBoardPieceData basePiece, List<WarBoardAIRoute.RouteData> routeDataList, int baseSquareIndex) { }

	// RVA: 0x148D66C Offset: 0x148D66C VA: 0x148D66C
	private Dictionary<uint, int> GetAllEnemyToDistance(List<WarBoardAIRoute.RouteData> routeDataList, int baseSquareIndex, out int servantAndEnemyRange, out int servantAndEnemyMasterRange) { }

	// RVA: 0x148D864 Offset: 0x148D864 VA: 0x148D864
	private WarBoardAIRoute.RouteData.Flag GetFlagAroundSquareCheck(WarBoardSquareData baseSquare, WarBoardPieceData basePiece, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x148DBF0 Offset: 0x148DBF0 VA: 0x148DBF0
	private WarBoardAIRoute.AdvantagePieceData GetAdvantagePieceData(WarBoardPieceData basePiece, int baseSquareIndex) { }

	// RVA: 0x148DD6C Offset: 0x148DD6C VA: 0x148DD6C
	private bool IsActable(WarBoardPieceData basePiece, int basePieceActionCount, int requiredCost) { }

	// RVA: 0x148DE80 Offset: 0x148DE80 VA: 0x148DE80
	private WarBoardPieceData GetActionPiece(WarBoardPieceData basePiece, int actionSquareIndex, Dictionary<int, uint> piecePlaceData) { }

	// RVA: 0x148DF4C Offset: 0x148DF4C VA: 0x148DF4C
	private WarBoardAIRoute.RouteData.Flag GetFlagAdvantage(int baseClassId, int actionClassId) { }

	// RVA: 0x148E0E8 Offset: 0x148E0E8 VA: 0x148E0E8
	private void LinkedCount(int actionSquareIndex, Dictionary<int, uint> piecePlaceData, ref int attackByLinkEnemy, ref int attackByLinkAlly) { }

	// RVA: 0x148E300 Offset: 0x148E300 VA: 0x148E300
	private bool IsActableReplace(WarBoardPieceData basePiece, WarBoardPieceData actionPiece, int requiredCost, List<WarBoardAIRoute.RouteData> routeDataList) { }

	// RVA: 0x148E560 Offset: 0x148E560 VA: 0x148E560
	private Dictionary<int, uint> UpdatePiecePlaceData(Dictionary<int, uint> piecePlaceData, WarBoardAIRoute.RouteData routeData, int baseSquareIndex, int actionSquareIndex) { }

	// RVA: 0x148E6DC Offset: 0x148E6DC VA: 0x148E6DC
	private void LinkedPieceCount(ref WarBoardAIRoute.RouteData routeData, Dictionary<int, uint> piecePlaceData, List<int> alreadyGetItemSquares) { }

	// RVA: 0x148EB38 Offset: 0x148EB38 VA: 0x148EB38
	private Dictionary<int, WarBoardAIRoute.TargetData> GetMoveByTargetDistance(Dictionary<int, WarBoardAIRoute.TargetData> dicKeyPutIndexValueTargetData, int actionSquareIndex, WarBoardPieceData basePiece) { }

	// RVA: 0x148EE04 Offset: 0x148EE04 VA: 0x148EE04
	private void ClassAdvantageDistance(ref WarBoardAIRoute.RouteData routeData, WarBoardAIRoute.AdvantagePieceData advantagePieceData, int actionSquareIndex) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD53D0 Offset: 0xCD53D0 VA: 0xCD53D0
	// RVA: 0x148F02C Offset: 0x148F02C VA: 0x148F02C
	private static IEnumerable<WarBoardRatingOffsetEntity> <BeforeCreateRouteData>m__0(WarBoardAIRoute.PiecePersonality x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD53E0 Offset: 0xCD53E0 VA: 0xCD53E0
	// RVA: 0x148F054 Offset: 0x148F054 VA: 0x148F054
	private static bool <BeforeCreateRouteData>m__1(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD53F0 Offset: 0xCD53F0 VA: 0xCD53F0
	// RVA: 0x148F08C Offset: 0x148F08C VA: 0x148F08C
	private static int <BeforeCreateRouteData>m__2(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5400 Offset: 0xCD5400 VA: 0xCD5400
	// RVA: 0x148F0B4 Offset: 0x148F0B4 VA: 0x148F0B4
	private static bool <BeforeCreateRouteData>m__3(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5410 Offset: 0xCD5410 VA: 0xCD5410
	// RVA: 0x148F0EC Offset: 0x148F0EC VA: 0x148F0EC
	private static int <BeforeCreateRouteData>m__4(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5420 Offset: 0xCD5420 VA: 0xCD5420
	// RVA: 0x148F114 Offset: 0x148F114 VA: 0x148F114
	private static IEnumerable<WarBoardActionTrendEntity> <BeforeCreateRouteData>m__5(WarBoardAIRoute.PiecePersonality x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5430 Offset: 0xCD5430 VA: 0xCD5430
	// RVA: 0x148F13C Offset: 0x148F13C VA: 0x148F13C
	private static bool <BeforeCreateRouteData>m__6(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5440 Offset: 0xCD5440 VA: 0xCD5440
	// RVA: 0x148F174 Offset: 0x148F174 VA: 0x148F174
	private static Decimal <BeforeCreateRouteData>m__7(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5450 Offset: 0xCD5450 VA: 0xCD5450
	// RVA: 0x148F200 Offset: 0x148F200 VA: 0x148F200
	private static Decimal <BeforeCreateRouteData>m__8(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5460 Offset: 0xCD5460 VA: 0xCD5460
	// RVA: 0x148F28C Offset: 0x148F28C VA: 0x148F28C
	private static bool <BeforeCreateRouteData>m__9(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5470 Offset: 0xCD5470 VA: 0xCD5470
	// RVA: 0x148F2C4 Offset: 0x148F2C4 VA: 0x148F2C4
	private static Decimal <BeforeCreateRouteData>m__A(WarBoardActionTrendEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5480 Offset: 0xCD5480 VA: 0xCD5480
	// RVA: 0x148F350 Offset: 0x148F350 VA: 0x148F350
	private static Decimal <BeforeCreateRouteData>m__B(WarBoardActionTrendEntity x) { }
}

// Namespace: 
public class WarBoardAIRoute.PiecePersonality // TypeDefIndex: 11762
{
	// Fields
	public List<WarBoardActionTrendEntity> actionTrandList; // 0x10
	public List<WarBoardRatingOffsetEntity> ratingOffsetList; // 0x18
	public List<WarBoardRatingOffsetEntity> attackOffset; // 0x20
	public List<WarBoardRatingOffsetEntity> moveOffset; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC8173C Offset: 0xC8173C VA: 0xC8173C
	private static Func<WarBoardRatingOffsetEntity, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC8174C Offset: 0xC8174C VA: 0xC8174C
	private static Func<WarBoardRatingOffsetEntity, bool> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x139C818 Offset: 0x139C818 VA: 0x139C818
	public void .ctor() { }

	// RVA: 0x139C8B0 Offset: 0x139C8B0 VA: 0x139C8B0
	public List<WarBoardRatingOffsetEntity> AttackOffset() { }

	// RVA: 0x139C990 Offset: 0x139C990 VA: 0x139C990
	public List<WarBoardRatingOffsetEntity> MoveOffset() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5490 Offset: 0xCD5490 VA: 0xCD5490
	// RVA: 0x139CA6C Offset: 0x139CA6C VA: 0x139CA6C
	private static bool <AttackOffset>m__0(WarBoardRatingOffsetEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD54A0 Offset: 0xCD54A0 VA: 0xCD54A0
	// RVA: 0x139CA9C Offset: 0x139CA9C VA: 0x139CA9C
	private static bool <MoveOffset>m__1(WarBoardRatingOffsetEntity x) { }
}

// Namespace: 
public enum WarBoardAIRoute.DistanceType // TypeDefIndex: 11763
{
	// Fields
	public int value__; // 0x0
	public const WarBoardAIRoute.DistanceType none = 0;
	public const WarBoardAIRoute.DistanceType approach = 1;
	public const WarBoardAIRoute.DistanceType noChange = 2;
	public const WarBoardAIRoute.DistanceType leave = 3;
}

// Namespace: 
public class WarBoardAIRoute.RouteData // TypeDefIndex: 11764
{
	// Fields
	public WarBoardAIRoute.RouteData.Flag flagNow; // 0x10
	public int baseIndex; // 0x18
	public int actionIndex; // 0x1C
	public WarBoardSquareData baseSquare; // 0x20
	public WarBoardSquareData actionSquare; // 0x28
	public WarBoardPieceData basePiece; // 0x30
	public WarBoardPieceData actionPiece; // 0x38
	public List<WarBoardPieceData> moveByLinkedPiece; // 0x40
	public float evalValue; // 0x48
	public int attackEvalOffsetAddValue; // 0x4C
	public int moveEvalOffsetAddValue; // 0x50
	public int sumAttackEvalOffsetAddValue; // 0x54
	public int sumMoveEvalOffsetAddValue; // 0x58
	public float warAttackEvalOffsetMagnification; // 0x5C
	public float warMoveEvalOffsetMagnification; // 0x60
	public float benAttackEvalOffsetMagnification; // 0x64
	public float benMoveEvalOffsetMagnification; // 0x68
	public float sumWarAttackEvalOffsetMagnification; // 0x6C
	public float sumWarMoveEvalOffsetMagnification; // 0x70
	public float sumBenAttackEvalOffsetMagnification; // 0x74
	public float sumBenMoveEvalOffsetMagnification; // 0x78
	public int moveByLinkedEnemy; // 0x7C
	public int moveByLinkedAlly; // 0x80
	public int moveByLinkedItem; // 0x84
	public WarBoardAIRoute.DistanceType isMoveByMasterAndEnemyRange; // 0x88
	public WarBoardAIRoute.DistanceType isMoveByServantAndMasterRange; // 0x8C
	public WarBoardAIRoute.DistanceType isMoveByServantAndEnemyRange; // 0x90
	public WarBoardAIRoute.DistanceType isMoveByServantAndEnemyMasterRange; // 0x94
	public List<int> listExistDesignationItem; // 0x98
	public Dictionary<int, WarBoardAIRoute.DistanceType> dicItemIdKeyIsMoveByServantDesignationItemRange; // 0xA0
	public Dictionary<int, bool> dicMoveByServantGetDesignationItem; // 0xA8
	public WarBoardAIRoute.DistanceType isMoveByServantAndClassAdvantageServantRange; // 0xB0
	public WarBoardAIRoute.DistanceType isMoveByServantAndClassDisAdvantageServantRange; // 0xB4
	public WarBoardAIRoute.DistanceType isMoveByServantAndAttackAdvantageServantRange; // 0xB8
	public WarBoardAIRoute.DistanceType isMoveByServantAndAttackDisAdvantageServantRange; // 0xBC
	public WarBoardAIRoute.DistanceType isMoveByServantAndDefenseAdvantageServantRange; // 0xC0
	public WarBoardAIRoute.DistanceType isMoveByServantAndDefenseDisAdvantageServantRange; // 0xC4
	public int attackByLinkedEnemy; // 0xC8
	public int attackByLinkedAlly; // 0xCC
	public int actionCountOnThisTurn; // 0xD0
	public int attackCountOnThisTurn; // 0xD4
	public Dictionary<uint, int> dicUniqueKeyRange; // 0xD8
	public Dictionary<int, WarBoardAIRoute.TargetData> dicPutIndexTargetData; // 0xE0
	public Dictionary<uint, int> dicEnemyRange; // 0xE8

	// Properties
	public bool notAction { get; }

	// Methods

	// RVA: 0x139BAA4 Offset: 0x139BAA4 VA: 0x139BAA4
	public void .ctor() { }

	// RVA: 0x139BA8C Offset: 0x139BA8C VA: 0x139BA8C
	public bool HasFlag(WarBoardAIRoute.RouteData.Flag flag) { }

	// RVA: 0x139CB8C Offset: 0x139CB8C VA: 0x139CB8C
	public static bool HasFlag(WarBoardAIRoute.RouteData.Flag flagNow, WarBoardAIRoute.RouteData.Flag flag) { }

	// RVA: 0x139BAB4 Offset: 0x139BAB4 VA: 0x139BAB4
	public bool HasActionPiece() { }

	// RVA: 0x139BA7C Offset: 0x139BA7C VA: 0x139BA7C
	public bool get_notAction() { }
}

// Namespace: 
public enum WarBoardAIRoute.RouteData.Kind // TypeDefIndex: 11765
{
	// Fields
	public int value__; // 0x0
	public const WarBoardAIRoute.RouteData.Kind NONE = 0;
	public const WarBoardAIRoute.RouteData.Kind isAttack = 1;
	public const WarBoardAIRoute.RouteData.Kind isAttackMove = 2;
	public const WarBoardAIRoute.RouteData.Kind isMasterDefense = 3;
	public const WarBoardAIRoute.RouteData.Kind isAttackRange = 4;
	public const WarBoardAIRoute.RouteData.Kind isAttackMasterRange = 5;
	public const WarBoardAIRoute.RouteData.Kind isMoveByAttackRange = 6;
	public const WarBoardAIRoute.RouteData.Kind isMoveByAttackRangeMaster = 7;
	public const WarBoardAIRoute.RouteData.Kind isBenefitRange = 8;
	public const WarBoardAIRoute.RouteData.Kind isMoveByBenefitRange = 9;
	public const WarBoardAIRoute.RouteData.Kind isDefenseAreaOnEnemy = 10;
	public const WarBoardAIRoute.RouteData.Kind isDefenseAreaOnServant = 11;
	public const WarBoardAIRoute.RouteData.Kind existClassAdvantageServant = 12;
	public const WarBoardAIRoute.RouteData.Kind existClassDisAdvantageServant = 13;
	public const WarBoardAIRoute.RouteData.Kind existAttackAdvantageServant = 14;
	public const WarBoardAIRoute.RouteData.Kind existAttackDisAdvantageServant = 15;
	public const WarBoardAIRoute.RouteData.Kind existDefenseAdvantageServant = 16;
	public const WarBoardAIRoute.RouteData.Kind existDefenseDisAdvantageServant = 17;
	public const WarBoardAIRoute.RouteData.Kind isTargetClassAdvantage = 18;
	public const WarBoardAIRoute.RouteData.Kind isTargetAttackAdvantage = 19;
	public const WarBoardAIRoute.RouteData.Kind isTargetDefenseAdvantage = 20;
	public const WarBoardAIRoute.RouteData.Kind isTargetClassDisAdvantage = 21;
	public const WarBoardAIRoute.RouteData.Kind isTargetAttackDisAdvantage = 22;
	public const WarBoardAIRoute.RouteData.Kind isTargetDefenseDisAdvantage = 23;
	public const WarBoardAIRoute.RouteData.Kind isAroundClassAdvantage = 24;
	public const WarBoardAIRoute.RouteData.Kind isMoveByAroundClassAdvantage = 25;
	public const WarBoardAIRoute.RouteData.Kind isAllyReplace = 26;
	public const WarBoardAIRoute.RouteData.Kind isGetItem = 27;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnItem = 28;
	public const WarBoardAIRoute.RouteData.Kind isAllBlockShortestRouteEnemyAndMaster = 29;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnAllBlockShortestRouteEnemyAndMaster = 30;
	public const WarBoardAIRoute.RouteData.Kind isBlockShortestRouteEnemyAndMaster = 31;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnBlockShortestRouteEnemyAndMaster = 32;
	public const WarBoardAIRoute.RouteData.Kind isMoveOnEffect = 33;
	public const WarBoardAIRoute.RouteData.Kind isAroundAllyMaster = 34;
	public const WarBoardAIRoute.RouteData.Kind isAroundAllyServant = 35;
	public const WarBoardAIRoute.RouteData.Kind isMoveByMasterOnBlockShortestRouteEnemyAndMaster = 36;
	public const WarBoardAIRoute.RouteData.Kind isDefenseAreaWithInEnemyAllBlock = 37;
	public const WarBoardAIRoute.RouteData.Kind isMoveByDefenseAreaServant = 38;
	public const WarBoardAIRoute.RouteData.Kind isMoveByDefenseAreaEnemy = 39;
	public const WarBoardAIRoute.RouteData.Kind isAllDefenseAreaEnemyRouteBlock = 40;
	public const WarBoardAIRoute.RouteData.Kind isComeBackSquare = 41;
}

// Namespace: 
[FlagsAttribute] // RVA: 0xC2BBA0 Offset: 0xC2BBA0 VA: 0xC2BBA0
public enum WarBoardAIRoute.RouteData.Flag // TypeDefIndex: 11766
{
	// Fields
	public long value__; // 0x0
	public const WarBoardAIRoute.RouteData.Flag NONE = 1;
	public const WarBoardAIRoute.RouteData.Flag isAttack = 2;
	public const WarBoardAIRoute.RouteData.Flag isAttackMove = 4;
	public const WarBoardAIRoute.RouteData.Flag isMasterDefense = 8;
	public const WarBoardAIRoute.RouteData.Flag isAttackRange = 16;
	public const WarBoardAIRoute.RouteData.Flag isAttackMasterRange = 32;
	public const WarBoardAIRoute.RouteData.Flag isMoveByAttackRange = 64;
	public const WarBoardAIRoute.RouteData.Flag isMoveByAttackRangeMaster = 128;
	public const WarBoardAIRoute.RouteData.Flag isBenefitRange = 256;
	public const WarBoardAIRoute.RouteData.Flag isMoveByBenefitRange = 512;
	public const WarBoardAIRoute.RouteData.Flag isDefenseAreaOnEnemy = 1024;
	public const WarBoardAIRoute.RouteData.Flag isDefenseAreaOnServant = 2048;
	public const WarBoardAIRoute.RouteData.Flag existClassAdvantageServant = 4096;
	public const WarBoardAIRoute.RouteData.Flag existClassDisAdvantageServant = 8192;
	public const WarBoardAIRoute.RouteData.Flag existAttackAdvantageServant = 16384;
	public const WarBoardAIRoute.RouteData.Flag existAttackDisAdvantageServant = 32768;
	public const WarBoardAIRoute.RouteData.Flag existDefenseAdvantageServant = 65536;
	public const WarBoardAIRoute.RouteData.Flag existDefenseDisAdvantageServant = 131072;
	public const WarBoardAIRoute.RouteData.Flag isTargetClassAdvantage = 262144;
	public const WarBoardAIRoute.RouteData.Flag isTargetAttackAdvantage = 524288;
	public const WarBoardAIRoute.RouteData.Flag isTargetDefenseAdvantage = 1048576;
	public const WarBoardAIRoute.RouteData.Flag isTargetClassDisAdvantage = 2097152;
	public const WarBoardAIRoute.RouteData.Flag isTargetAttackDisAdvantage = 4194304;
	public const WarBoardAIRoute.RouteData.Flag isTargetDefenseDisAdvantage = 8388608;
	public const WarBoardAIRoute.RouteData.Flag isAroundClassAdvantage = 16777216;
	public const WarBoardAIRoute.RouteData.Flag isMoveByAroundClassAdvantage = 33554432;
	public const WarBoardAIRoute.RouteData.Flag isAllyReplace = 67108864;
	public const WarBoardAIRoute.RouteData.Flag isGetItem = 134217728;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnItem = 268435456;
	public const WarBoardAIRoute.RouteData.Flag isAllBlockShortestRouteEnemyAndMaster = 536870912;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnAllBlockShortestRouteEnemyAndMaster = 1073741824;
	public const WarBoardAIRoute.RouteData.Flag isBlockShortestRouteEnemyAndMaster = 2147483648;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnBlockShortestRouteEnemyAndMaster = 4294967296;
	public const WarBoardAIRoute.RouteData.Flag isMoveOnEffect = 8589934592;
	public const WarBoardAIRoute.RouteData.Flag isAroundAllyMaster = 17179869184;
	public const WarBoardAIRoute.RouteData.Flag isAroundAllyServant = 34359738368;
	public const WarBoardAIRoute.RouteData.Flag isMoveByMasterOnBlockShortestRouteEnemyAndMaster = 68719476736;
	public const WarBoardAIRoute.RouteData.Flag isDefenseAreaWithInEnemyAllBlock = 137438953472;
	public const WarBoardAIRoute.RouteData.Flag isMoveByDefenseAreaServant = 274877906944;
	public const WarBoardAIRoute.RouteData.Flag isMoveByDefenseAreaEnemy = 549755813888;
	public const WarBoardAIRoute.RouteData.Flag isAllDefenseAreaEnemyRouteBlock = 1099511627776;
	public const WarBoardAIRoute.RouteData.Flag isComeBackSquare = 2199023255552;
}

// Namespace: 
public class WarBoardAIRoute.AdvantagePieceData // TypeDefIndex: 11767
{
	// Fields
	public WarBoardAIRoute.RouteData.Flag flagNow; // 0x10
	public int baseCARange; // 0x18
	public int baseCDARange; // 0x1C
	public int baseAARange; // 0x20
	public int baseADARange; // 0x24
	public int baseDARange; // 0x28
	public int baseDDARange; // 0x2C
	public Dictionary<int, WarBoardPieceData> dicClassAdvantageServant; // 0x30
	public Dictionary<int, WarBoardPieceData> dicClassDisAdvantageServant; // 0x38
	public Dictionary<int, WarBoardPieceData> dicAttackAdvantageServant; // 0x40
	public Dictionary<int, WarBoardPieceData> dicAttackDisAdvantageServant; // 0x48
	public Dictionary<int, WarBoardPieceData> dicDefenseAdvantageServant; // 0x50
	public Dictionary<int, WarBoardPieceData> dicDefenseDisAdvantageServant; // 0x58

	// Methods

	// RVA: 0x139C6A8 Offset: 0x139C6A8 VA: 0x139C6A8
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIRoute.DesignationItemData // TypeDefIndex: 11768
{
	// Fields
	public Dictionary<int, WarBoardItemData> dicSquareIndexKeyItemData; // 0x10

	// Methods

	// RVA: 0x139C7A8 Offset: 0x139C7A8 VA: 0x139C7A8
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIRoute.PutSquareTarget // TypeDefIndex: 11769
{
	// Fields
	public Dictionary<int, WarBoardAIRoute.TargetData> dicItemPutSquareIndex; // 0x10
	public Dictionary<int, WarBoardAIRoute.TargetData> dicPiecePutSqareIndex; // 0x18
	public Dictionary<int, WarBoardAIRoute.TargetData> dicTreasurePutSqareIndex; // 0x20
	public Dictionary<int, WarBoardAIRoute.TargetData> dicSquarePutSqareIndex; // 0x28

	// Methods

	// RVA: 0x139CACC Offset: 0x139CACC VA: 0x139CACC
	public void .ctor() { }
}

// Namespace: 
public class WarBoardAIRoute.TargetData // TypeDefIndex: 11770
{
	// Fields
	public bool isAround; // 0x10
	public WarBoardPieceData targetPiece; // 0x18
	public WarBoardItemData targetItem; // 0x20
	public WarBoardTreasureData targetTreasure; // 0x28
	public WarBoardSquareData targetSquare; // 0x30
	public WarBoardAIRoute.DistanceType moveByDistanceType; // 0x38
	public WarBoardAIRoute.DistanceType detourMoveByDistanceType; // 0x3C
	public int nowSquareIndex; // 0x40
	public int[] baseRoute; // 0x48
	public int[] detourRoute; // 0x50
	public int actionTrendId; // 0x58
	public int conditionId; // 0x5C
	public int putSquareIndex; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC8175C Offset: 0xC8175C VA: 0xC8175C
	private static Func<WarBoardPieceData, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x139CB98 Offset: 0x139CB98 VA: 0x139CB98
	public void .ctor(WarBoardPieceData targetPiece, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x139CBF0 Offset: 0x139CBF0 VA: 0x139CBF0
	public void .ctor(WarBoardItemData targetItem, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x139CC48 Offset: 0x139CC48 VA: 0x139CC48
	public void .ctor(WarBoardTreasureData targetTreasure, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x139CCA0 Offset: 0x139CCA0 VA: 0x139CCA0
	public void .ctor(WarBoardSquareData targetSquare, int actionTrendId, int conditionId, int putSquareIndex) { }

	// RVA: 0x139CCF8 Offset: 0x139CCF8 VA: 0x139CCF8
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardPieceData targetPiece, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x139CF7C Offset: 0x139CF7C VA: 0x139CF7C
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardItemData targetItem, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x139D000 Offset: 0x139D000 VA: 0x139D000
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardTreasureData targetTreasure, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x139D084 Offset: 0x139D084 VA: 0x139D084
	public void .ctor(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, WarBoardSquareData targetSquare, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	// RVA: 0x139CD7C Offset: 0x139CD7C VA: 0x139CD7C
	private void Init(WarBoardAIRoute.TargetData baseTargetData, WarBoardPieceData piece, int baseSquareIndex, WarBoardPieceData[] blockEnemyPieces) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD54B0 Offset: 0xCD54B0 VA: 0xCD54B0
	// RVA: 0x139D108 Offset: 0x139D108 VA: 0x139D108
	private static int <Init>m__0(WarBoardPieceData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46724 Offset: 0xC46724 VA: 0xC46724
private sealed class WarBoardAIRoute.<BeforeCreateRouteData>c__AnonStorey1 // TypeDefIndex: 11771
{
	// Fields
	internal int squareIndex; // 0x10

	// Methods

	// RVA: 0x1397CBC Offset: 0x1397CBC VA: 0x1397CBC
	public void .ctor() { }

	// RVA: 0x1397CC4 Offset: 0x1397CC4 VA: 0x1397CC4
	internal bool <>m__0(WarBoardItemData z) { }

	// RVA: 0x1397D2C Offset: 0x1397D2C VA: 0x1397D2C
	internal bool <>m__1(WarBoardItemData z) { }

	// RVA: 0x1397D70 Offset: 0x1397D70 VA: 0x1397D70
	internal bool <>m__2(WarBoardPieceData z) { }

	// RVA: 0x1397DB4 Offset: 0x1397DB4 VA: 0x1397DB4
	internal bool <>m__3(WarBoardTreasureData z) { }

	// RVA: 0x1397DF8 Offset: 0x1397DF8 VA: 0x1397DF8
	internal bool <>m__4(WarBoardSquareData z) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46734 Offset: 0xC46734 VA: 0xC46734
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11772
{
	// Fields
	internal WarBoardData <warBoardData>__0; // 0x10
	internal int searchCount; // 0x18
	internal int <replaceCount>__0; // 0x1C
	internal int <actionCount>__0; // 0x20
	internal int <masterActionCount>__0; // 0x24
	internal int <masterReplaceCount>__0; // 0x28
	internal List<WarBoardAIRoute.RouteData> routeDataList; // 0x30
	internal Dictionary<uint, int> <routeDataActionList>__0; // 0x38
	internal int <requiredCost>__0; // 0x40
	internal Dictionary<int, uint> piecePlaceData; // 0x48
	internal HashSet<int> <evalValueTargetSquare>__0; // 0x50
	internal int <masterAndEnemyRange>__0; // 0x58
	internal HashSet<int> <defenseAreaSquareIndexs>__0; // 0x60
	internal int[] <allyPieceIndexs>__0; // 0x68
	internal WarBoardAIRoute.RouteData.Flag <baseFlag>__0; // 0x70
	internal List<int[]> <shortestEnemyRoute>__0; // 0x78
	internal Dictionary.Enumerator<int, uint> $locvar0; // 0x80
	internal KeyValuePair<int, uint> <data>__1; // 0x98
	internal int <baseSquareIndex>__2; // 0xA0
	internal WarBoardSquareData <baseSquare>__2; // 0xA8
	internal WarBoardAIRoute.RouteData.Flag <tmpFlagNow>__2; // 0xB0
	internal int <servantAndMasterRange>__2; // 0xB8
	internal int <servantAndEnemyRange>__2; // 0xBC
	internal int <servantAndEnemyMasterRange>__2; // 0xC0
	internal int <basePieceActionCount>__2; // 0xC4
	internal Dictionary<int, int> <dicBaseDIRange>__2; // 0xC8
	internal Dictionary<int, WarBoardAIRoute.TargetData> <dicKeyPutIndexValueTargetData>__2; // 0xD0
	internal Dictionary<uint, int> <dicEnemyRange>__2; // 0xD8
	internal WarBoardAIRoute.AdvantagePieceData <advantagePieceData>__2; // 0xE0
	internal int <baseCARange>__2; // 0xE8
	internal int <baseCDARange>__2; // 0xEC
	internal int <baseAARange>__2; // 0xF0
	internal int <baseADARange>__2; // 0xF4
	internal int <baseDARange>__2; // 0xF8
	internal int <baseDDARange>__2; // 0xFC
	internal HashSet<WarBoardAIRoute.RouteData> <basePieceActionPieceRouteList>__2; // 0x100
	internal HashSet<WarBoardAIRoute.RouteData> <basePieceBasePieceRouteList>__2; // 0x108
	internal List.Enumerator<WarBoardAIRoute.RouteData> $locvar1; // 0x110
	internal int[] $locvar2; // 0x128
	internal int $locvar3; // 0x130
	internal WarBoardAIRoute.RouteData <routeData>__4; // 0x138
	internal int <diffActCount>__4; // 0x140
	internal Dictionary<int, uint> <nextPiecePlaceData>__4; // 0x148
	internal Dictionary.Enumerator<int, uint> $locvar4; // 0x150
	internal WarBoardAIEvalCalcurater <evalCalc>__4; // 0x168
	internal List<WarBoardAIRoute.RouteData> <copyRouteData>__4; // 0x170
	internal IOrderedEnumerable<KeyValuePair<IEnumerator, float>> <sortCreateRouteData>__5; // 0x178
	internal int <count>__5; // 0x180
	internal int <cutCount>__5; // 0x184
	internal IEnumerator<KeyValuePair<IEnumerator, float>> $locvarA; // 0x188
	internal KeyValuePair<IEnumerator, float> <createRouteData>__6; // 0x190
	internal WarBoardAIRoute $this; // 0x1A0
	internal object $current; // 0x1A8
	internal bool $disposing; // 0x1B0
	internal int $PC; // 0x1B4
	private WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 $locvarB; // 0x1B8
	private WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey3 $locvarC; // 0x1C0
	private WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey4 $locvarD; // 0x1C8
	private static Func<KeyValuePair<IEnumerator, float>, float> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDD700 Offset: 0xCDD700 VA: 0xCDD700
	// RVA: 0x1397E3C Offset: 0x1397E3C VA: 0x1397E3C
	public void .ctor() { }

	// RVA: 0x1397E44 Offset: 0x1397E44 VA: 0x1397E44 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD710 Offset: 0xCDD710 VA: 0xCDD710
	// RVA: 0x139BD90 Offset: 0x139BD90 VA: 0x139BD90 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD720 Offset: 0xCDD720 VA: 0xCDD720
	// RVA: 0x139BD98 Offset: 0x139BD98 VA: 0x139BD98 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD730 Offset: 0xCDD730 VA: 0xCDD730
	// RVA: 0x139BDA0 Offset: 0x139BDA0 VA: 0x139BDA0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDD740 Offset: 0xCDD740 VA: 0xCDD740
	// RVA: 0x139BE98 Offset: 0x139BE98 VA: 0x139BE98 Slot: 6
	public void Reset() { }

	// RVA: 0x139BF00 Offset: 0x139BF00 VA: 0x139BF00
	private static float <>m__0(KeyValuePair<IEnumerator, float> x) { }
}

// Namespace: 
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 // TypeDefIndex: 11773
{
	// Fields
	internal int masterSquareIndex; // 0x10
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x139BA6C Offset: 0x139BA6C VA: 0x139BA6C
	public void .ctor() { }

	// RVA: 0x139BF5C Offset: 0x139BF5C VA: 0x139BF5C
	internal bool <>m__0(int x) { }
}

// Namespace: 
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey3 // TypeDefIndex: 11774
{
	// Fields
	internal WarBoardPieceData basePiece; // 0x10
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0 <>f__ref$0; // 0x18
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 <>f__ref$2; // 0x20

	// Methods

	// RVA: 0x139BA74 Offset: 0x139BA74 VA: 0x139BA74
	public void .ctor() { }

	// RVA: 0x139BF6C Offset: 0x139BF6C VA: 0x139BF6C
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
private sealed class WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey4 // TypeDefIndex: 11775
{
	// Fields
	internal int actionSquareIndex; // 0x10
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0 <>f__ref$0; // 0x18
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey2 <>f__ref$2; // 0x20
	internal WarBoardAIRoute.<CreateRouteData>c__Iterator0.<CreateRouteData>c__AnonStorey3 <>f__ref$3; // 0x28

	// Methods

	// RVA: 0x139BA9C Offset: 0x139BA9C VA: 0x139BA9C
	public void .ctor() { }

	// RVA: 0x139C04C Offset: 0x139C04C VA: 0x139C04C
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }

	// RVA: 0x139C084 Offset: 0x139C084 VA: 0x139C084
	internal bool <>m__1(WarBoardAIRoute.RouteData x) { }

	// RVA: 0x139C0BC Offset: 0x139C0BC VA: 0x139C0BC
	internal bool <>m__2(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46744 Offset: 0xC46744 VA: 0xC46744
private sealed class WarBoardAIRoute.<GetFlagDefenseArea>c__AnonStorey5 // TypeDefIndex: 11776
{
	// Fields
	internal Dictionary<int, uint> piecePlaceData; // 0x10
	internal int shortestRange; // 0x18
	internal int masterSquareIndex; // 0x1C
	internal List<int[]> routeDatas; // 0x20

	// Methods

	// RVA: 0x139C1B8 Offset: 0x139C1B8 VA: 0x139C1B8
	public void .ctor() { }

	// RVA: 0x139C1C0 Offset: 0x139C1C0 VA: 0x139C1C0
	internal bool <>m__0(int square) { }

	// RVA: 0x139C230 Offset: 0x139C230 VA: 0x139C230
	internal bool <>m__1(KeyValuePair<int, int> x) { }

	// RVA: 0x139C29C Offset: 0x139C29C VA: 0x139C29C
	internal void <>m__2(KeyValuePair<int, int> x) { }

	// RVA: 0x139C368 Offset: 0x139C368 VA: 0x139C368
	internal void <>m__3(int[] y) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46754 Offset: 0xC46754 VA: 0xC46754
private sealed class WarBoardAIRoute.<IsDetour>c__AnonStorey6 // TypeDefIndex: 11777
{
	// Fields
	internal int[] route; // 0x10

	// Methods

	// RVA: 0x139C620 Offset: 0x139C620 VA: 0x139C620
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46764 Offset: 0xC46764 VA: 0xC46764
private sealed class WarBoardAIRoute.<IsDetour>c__AnonStorey7 // TypeDefIndex: 11778
{
	// Fields
	internal int i; // 0x10
	internal WarBoardAIRoute.<IsDetour>c__AnonStorey6 <>f__ref$6; // 0x18

	// Methods

	// RVA: 0x139C628 Offset: 0x139C628 VA: 0x139C628
	public void .ctor() { }

	// RVA: 0x139C630 Offset: 0x139C630 VA: 0x139C630
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46774 Offset: 0xC46774 VA: 0xC46774
private sealed class WarBoardAIRoute.<IsBlockShortestRouteEnemyAndMaster>c__AnonStorey8 // TypeDefIndex: 11779
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x139C608 Offset: 0x139C608 VA: 0x139C608
	public void .ctor() { }

	// RVA: 0x139C610 Offset: 0x139C610 VA: 0x139C610
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46784 Offset: 0xC46784 VA: 0xC46784
private sealed class WarBoardAIRoute.<IsAllBlockShortestRouteEnemyAndMastr>c__AnonStorey9 // TypeDefIndex: 11780
{
	// Fields
	internal KeyValuePair<int, uint> data; // 0x10

	// Methods

	// RVA: 0x139C598 Offset: 0x139C598 VA: 0x139C598
	public void .ctor() { }

	// RVA: 0x139C5A0 Offset: 0x139C5A0 VA: 0x139C5A0
	internal bool <>m__0(int x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC46794 Offset: 0xC46794 VA: 0xC46794
private sealed class WarBoardAIRoute.<GetTargetItemToDistance>c__AnonStoreyA // TypeDefIndex: 11781
{
	// Fields
	internal KeyValuePair<int, WarBoardAIRoute.TargetData> item; // 0x10

	// Methods

	// RVA: 0x139C408 Offset: 0x139C408 VA: 0x139C408
	public void .ctor() { }

	// RVA: 0x139C410 Offset: 0x139C410 VA: 0x139C410
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC467A4 Offset: 0xC467A4 VA: 0xC467A4
private sealed class WarBoardAIRoute.<GetDesignationItemToDistance>c__AnonStoreyB // TypeDefIndex: 11782
{
	// Fields
	internal KeyValuePair<int, WarBoardItemData> item; // 0x10

	// Methods

	// RVA: 0x139C0CC Offset: 0x139C0CC VA: 0x139C0CC
	public void .ctor() { }

	// RVA: 0x139C0D4 Offset: 0x139C0D4 VA: 0x139C0D4
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC467B4 Offset: 0xC467B4 VA: 0xC467B4
private sealed class WarBoardAIRoute.<IsActableReplace>c__AnonStoreyC // TypeDefIndex: 11783
{
	// Fields
	internal WarBoardPieceData actionPiece; // 0x10

	// Methods

	// RVA: 0x139C4BC Offset: 0x139C4BC VA: 0x139C4BC
	public void .ctor() { }

	// RVA: 0x139C4C4 Offset: 0x139C4C4 VA: 0x139C4C4
	internal bool <>m__0(WarBoardAIRoute.RouteData x) { }
}

// Namespace: 
public class WarBoardEvalValueSquare // TypeDefIndex: 11784
{
	// Fields
	private float averageBenefitValue; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC8176C Offset: 0xC8176C VA: 0xC8176C
	private static Func<KeyValuePair<int, WarBoardEvalValueSquare.EvalValueSquare>, float> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x13AE04C Offset: 0x13AE04C VA: 0x13AE04C
	public void .ctor() { }

	// RVA: 0x13AE054 Offset: 0x13AE054 VA: 0x13AE054
	public Dictionary<int, WarBoardEvalValueSquare.EvalValueSquare> Calcurate(Dictionary<int, uint> dicPieceData, HashSet<int> evalValueTargetSquare, List<WarBoardAIRoute.RouteData> routeDataList, List<WarBoardRatingBase> ratingBaseList, int forceId, Dictionary<int, WarBoardEvalValueSquare.CalcEval> dicRatingbaseCalcValue) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD54C0 Offset: 0xCD54C0 VA: 0xCD54C0
	// RVA: 0x13AEDC0 Offset: 0x13AEDC0 VA: 0x13AEDC0
	private static float <Calcurate>m__0(KeyValuePair<int, WarBoardEvalValueSquare.EvalValueSquare> x) { }
}

// Namespace: 
public class WarBoardEvalValueSquare.CalcEval // TypeDefIndex: 11785
{
	// Fields
	public WarBoardRatingBaseEntity.Viewpoint viewpoint; // 0x10
	public int addNum; // 0x14
	public float eval; // 0x18

	// Methods

	// RVA: 0x13AEE6C Offset: 0x13AEE6C VA: 0x13AEE6C
	public void .ctor() { }
}

// Namespace: 
public class WarBoardEvalValueSquare.EvalValueSquare // TypeDefIndex: 11786
{
	// Fields
	public WarBoardSquareData squareData; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC8177C Offset: 0xC8177C VA: 0xC8177C
	[DebuggerBrowsableAttribute] // RVA: 0xC8177C Offset: 0xC8177C VA: 0xC8177C
	private float <EvalValueWarsituation>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC817B8 Offset: 0xC817B8 VA: 0xC817B8
	[DebuggerBrowsableAttribute] // RVA: 0xC817B8 Offset: 0xC817B8 VA: 0xC817B8
	private float <EvalValueBenefit>k__BackingField; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC817F4 Offset: 0xC817F4 VA: 0xC817F4
	[DebuggerBrowsableAttribute] // RVA: 0xC817F4 Offset: 0xC817F4 VA: 0xC817F4
	private float <EvalValue>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC81830 Offset: 0xC81830 VA: 0xC81830
	[DebuggerBrowsableAttribute] // RVA: 0xC81830 Offset: 0xC81830 VA: 0xC81830
	private float <WarAdjustmentValueA1>k__BackingField; // 0x24
	[CompilerGeneratedAttribute] // RVA: 0xC8186C Offset: 0xC8186C VA: 0xC8186C
	[DebuggerBrowsableAttribute] // RVA: 0xC8186C Offset: 0xC8186C VA: 0xC8186C
	private float <WarAdjustmentValueB>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC818A8 Offset: 0xC818A8 VA: 0xC818A8
	[DebuggerBrowsableAttribute] // RVA: 0xC818A8 Offset: 0xC818A8 VA: 0xC818A8
	private float <BenAdjustmentValueA1>k__BackingField; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0xC818E4 Offset: 0xC818E4 VA: 0xC818E4
	[DebuggerBrowsableAttribute] // RVA: 0xC818E4 Offset: 0xC818E4 VA: 0xC818E4
	private float <BenAdjustmentValueB>k__BackingField; // 0x30

	// Properties
	public float EvalValueWarsituation { get; set; }
	public float EvalValueBenefit { get; set; }
	public float EvalValue { get; set; }
	public float WarAdjustmentValueA1 { get; set; }
	public float WarAdjustmentValueB { get; set; }
	public float BenAdjustmentValueA1 { get; set; }
	public float BenAdjustmentValueB { get; set; }

	// Methods

	// RVA: 0x13AED2C Offset: 0x13AED2C VA: 0x13AED2C
	public void .ctor(WarBoardSquareData squareData) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD54D0 Offset: 0xCD54D0 VA: 0xCD54D0
	// RVA: 0x13AEDB0 Offset: 0x13AEDB0 VA: 0x13AEDB0
	public float get_EvalValueWarsituation() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD54E0 Offset: 0xCD54E0 VA: 0xCD54E0
	// RVA: 0x13AED68 Offset: 0x13AED68 VA: 0x13AED68
	public void set_EvalValueWarsituation(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD54F0 Offset: 0xCD54F0 VA: 0xCD54F0
	// RVA: 0x13AEDB8 Offset: 0x13AEDB8 VA: 0x13AEDB8
	public float get_EvalValueBenefit() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5500 Offset: 0xCD5500 VA: 0xCD5500
	// RVA: 0x13AED60 Offset: 0x13AED60 VA: 0x13AED60
	public void set_EvalValueBenefit(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5510 Offset: 0xCD5510 VA: 0xCD5510
	// RVA: 0x13AEE74 Offset: 0x13AEE74 VA: 0x13AEE74
	public float get_EvalValue() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5520 Offset: 0xCD5520 VA: 0xCD5520
	// RVA: 0x13AEE7C Offset: 0x13AEE7C VA: 0x13AEE7C
	public void set_EvalValue(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5530 Offset: 0xCD5530 VA: 0xCD5530
	// RVA: 0x13AED70 Offset: 0x13AED70 VA: 0x13AED70
	public float get_WarAdjustmentValueA1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5540 Offset: 0xCD5540 VA: 0xCD5540
	// RVA: 0x13AED78 Offset: 0x13AED78 VA: 0x13AED78
	public void set_WarAdjustmentValueA1(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5550 Offset: 0xCD5550 VA: 0xCD5550
	// RVA: 0x13AED80 Offset: 0x13AED80 VA: 0x13AED80
	public float get_WarAdjustmentValueB() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5560 Offset: 0xCD5560 VA: 0xCD5560
	// RVA: 0x13AED88 Offset: 0x13AED88 VA: 0x13AED88
	public void set_WarAdjustmentValueB(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5570 Offset: 0xCD5570 VA: 0xCD5570
	// RVA: 0x13AED90 Offset: 0x13AED90 VA: 0x13AED90
	public float get_BenAdjustmentValueA1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5580 Offset: 0xCD5580 VA: 0xCD5580
	// RVA: 0x13AED98 Offset: 0x13AED98 VA: 0x13AED98
	public void set_BenAdjustmentValueA1(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD5590 Offset: 0xCD5590 VA: 0xCD5590
	// RVA: 0x13AEDA0 Offset: 0x13AEDA0 VA: 0x13AEDA0
	public float get_BenAdjustmentValueB() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD55A0 Offset: 0xCD55A0 VA: 0xCD55A0
	// RVA: 0x13AEDA8 Offset: 0x13AEDA8 VA: 0x13AEDA8
	public void set_BenAdjustmentValueB(float value) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC467C4 Offset: 0xC467C4 VA: 0xC467C4
private sealed class WarBoardEvalValueSquare.<Calcurate>c__AnonStorey0 // TypeDefIndex: 11787
{
	// Fields
	internal WarBoardSquareData calcSquare; // 0x10

	// Methods

	// RVA: 0x13AED24 Offset: 0x13AED24 VA: 0x13AED24
	public void .ctor() { }

	// RVA: 0x13AEE2C Offset: 0x13AEE2C VA: 0x13AEE2C
	internal bool <>m__0(int x) { }
}

// Namespace: 
public static class AllRouteSearch // TypeDefIndex: 11788
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC81920 Offset: 0xC81920 VA: 0xC81920
	private static Func<WarBoardSquareData, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC81930 Offset: 0xC81930 VA: 0xC81930
	private static Func<WarBoardSquareData, int[]> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x10741AC Offset: 0x10741AC VA: 0x10741AC
	public static int[][] RouteSearch(int start, int end, int searchLimitRange = -1) { }

	// RVA: 0x107434C Offset: 0x107434C VA: 0x107434C
	private static List<int[]> CoreLogic(int now, int end, Dictionary<int, int[]> squareDict, List<int> route, int searchLimitRange = -1) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD55B0 Offset: 0xCD55B0 VA: 0xCD55B0
	// RVA: 0x10745D4 Offset: 0x10745D4 VA: 0x10745D4
	private static int <RouteSearch>m__0(WarBoardSquareData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD55C0 Offset: 0xCD55C0 VA: 0xCD55C0
	// RVA: 0x1074600 Offset: 0x1074600 VA: 0x1074600
	private static int[] <RouteSearch>m__1(WarBoardSquareData x) { }
}

// Namespace: 
public static class AStarSearch // TypeDefIndex: 11789
{
	// Fields
	private static Dictionary<AStarSearch.CacheKey, int[]> routeCache; // 0x0
	private static Dictionary<AStarSearch.CacheKey, int[]> detourRouteCache; // 0x8
	private static Dictionary<int, WarBoardSquareData> squareDict; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC81940 Offset: 0xC81940 VA: 0xC81940
	private static Func<WarBoardSquareData, int> <>f__am$cache0; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC81950 Offset: 0xC81950 VA: 0xC81950
	private static Comparison<AStarSearch.Node> <>f__am$cache1; // 0x20

	// Methods

	// RVA: 0x1062F5C Offset: 0x1062F5C VA: 0x1062F5C
	public static void CacheClear() { }

	// RVA: 0x106301C Offset: 0x106301C VA: 0x106301C
	public static void DetourCacheClear() { }

	// RVA: 0x10630A0 Offset: 0x10630A0 VA: 0x10630A0
	public static int[] RouteSearch(WarBoardPieceData piece, int startSquare, int endSquare, bool isEnemyBlock = False, Func<int, bool> isBlockAction) { }

	// RVA: 0x1063BE0 Offset: 0x1063BE0 VA: 0x1063BE0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD55D0 Offset: 0xCD55D0 VA: 0xCD55D0
	// RVA: 0x1063C84 Offset: 0x1063C84 VA: 0x1063C84
	private static int <RouteSearch>m__0(WarBoardSquareData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD55E0 Offset: 0xCD55E0 VA: 0xCD55E0
	// RVA: 0x1063CB0 Offset: 0x1063CB0 VA: 0x1063CB0
	private static int <RouteSearch>m__1(AStarSearch.Node a, AStarSearch.Node b) { }
}

// Namespace: 
private struct AStarSearch.Node // TypeDefIndex: 11790
{
	// Fields
	public int squareIndex; // 0x0
	public int totalCost; // 0x4
}

// Namespace: 
private struct AStarSearch.CacheKey : IEquatable<AStarSearch.CacheKey> // TypeDefIndex: 11791
{
	// Fields
	public int start; // 0x0
	public int end; // 0x4

	// Methods

	// RVA: 0xD56A1C Offset: 0xD56A1C VA: 0xD56A1C Slot: 4
	public bool Equals(AStarSearch.CacheKey other) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC467D4 Offset: 0xC467D4 VA: 0xC467D4
private sealed class AStarSearch.<RouteSearch>c__AnonStorey0 // TypeDefIndex: 11792
{
	// Fields
	internal int nextSquare; // 0x10

	// Methods

	// RVA: 0x1063BD8 Offset: 0x1063BD8 VA: 0x1063BD8
	public void .ctor() { }

	// RVA: 0x1063CC0 Offset: 0x1063CC0 VA: 0x1063CC0
	internal bool <>m__0(AStarSearch.Node x) { }

	// RVA: 0x1063CD0 Offset: 0x1063CD0 VA: 0x1063CD0
	internal bool <>m__1(AStarSearch.Node x) { }
}

// Namespace: 
public class WarBoardData // TypeDefIndex: 11793
{
	// Fields
	private WarBoardStageEntity stageEntity; // 0x10
	private Dictionary<uint, WarBoardStageNpcEntity> npcEntityDict; // 0x18
	private Dictionary<uint, WarBoardActionPointEntity> actionPointEntityDict; // 0x20
	private WarBoardPieceData[] pieces; // 0x28
	private WarBoardSquareData[] squares; // 0x30
	private WarBoardItemData[] items; // 0x38
	private WarBoardTreasureData[] treasures; // 0x40
