
	// RVA: 0x20928BC Offset: 0x20928BC VA: 0x20928BC
	private void OnDragOut(GameObject go) { }

	// RVA: 0x2092994 Offset: 0x2092994 VA: 0x2092994
	private void OnDrag(Vector2 delta) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98224 Offset: 0xC98224 VA: 0xC98224
public class UIForwardEvents : MonoBehaviour // TypeDefIndex: 12037
{
	// Fields
	public GameObject target; // 0x18
	public bool onHover; // 0x20
	public bool onPress; // 0x21
	public bool onClick; // 0x22
	public bool onDoubleClick; // 0x23
	public bool onSelect; // 0x24
	public bool onDrag; // 0x25
	public bool onDrop; // 0x26
	public bool onSubmit; // 0x27
	public bool onScroll; // 0x28

	// Methods

	// RVA: 0x214B2A8 Offset: 0x214B2A8 VA: 0x214B2A8
	public void .ctor() { }

	// RVA: 0x214B2B0 Offset: 0x214B2B0 VA: 0x214B2B0
	private void OnHover(bool isOver) { }

	// RVA: 0x214B38C Offset: 0x214B38C VA: 0x214B38C
	private void OnPress(bool pressed) { }

	// RVA: 0x214B468 Offset: 0x214B468 VA: 0x214B468
	private void OnClick() { }

	// RVA: 0x214B51C Offset: 0x214B51C VA: 0x214B51C
	private void OnDoubleClick() { }

	// RVA: 0x214B5D0 Offset: 0x214B5D0 VA: 0x214B5D0
	private void OnSelect(bool selected) { }

	// RVA: 0x214B6AC Offset: 0x214B6AC VA: 0x214B6AC
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x214B790 Offset: 0x214B790 VA: 0x214B790
	private void OnDrop(GameObject go) { }

	// RVA: 0x214B858 Offset: 0x214B858 VA: 0x214B858
	private void OnSubmit() { }

	// RVA: 0x214B90C Offset: 0x214B90C VA: 0x214B90C
	private void OnScroll(float delta) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC9825C Offset: 0xC9825C VA: 0xC9825C
public class UIGrid : UIWidgetContainer // TypeDefIndex: 12038
{
	// Fields
	public UIGrid.Arrangement arrangement; // 0x18
	public UIGrid.Sorting sorting; // 0x1C
	public UIWidget.Pivot pivot; // 0x20
	public int maxPerLine; // 0x24
	public float cellWidth; // 0x28
	public float cellHeight; // 0x2C
	public bool animateSmoothly; // 0x30
	public bool hideInactive; // 0x31
	public bool keepWithinPanel; // 0x32
	public UIGrid.OnReposition onReposition; // 0x38
	public Comparison<Transform> onCustomSort; // 0x40
	[HideInInspector] // RVA: 0xCF0D88 Offset: 0xCF0D88 VA: 0xCF0D88
	[SerializeField] // RVA: 0xCF0D88 Offset: 0xCF0D88 VA: 0xCF0D88
	private bool sorted; // 0x48
	protected bool mReposition; // 0x49
	protected UIPanel mPanel; // 0x50
	protected bool mInitDone; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCF0DC0 Offset: 0xCF0DC0 VA: 0xCF0DC0
	private static Comparison<Transform> <>f__mg$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCF0DD0 Offset: 0xCF0DD0 VA: 0xCF0DD0
	private static Comparison<Transform> <>f__mg$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCF0DE0 Offset: 0xCF0DE0 VA: 0xCF0DE0
	private static Comparison<Transform> <>f__mg$cache2; // 0x10

	// Properties
	public bool repositionNow { set; }

	// Methods

	// RVA: 0x214C1F0 Offset: 0x214C1F0 VA: 0x214C1F0
	public void .ctor() { }

	// RVA: 0x214C204 Offset: 0x214C204 VA: 0x214C204
	public void set_repositionNow(bool value) { }

	// RVA: 0x214C220 Offset: 0x214C220 VA: 0x214C220
	public List<Transform> GetChildList() { }

	// RVA: 0x214C578 Offset: 0x214C578 VA: 0x214C578
	public Transform GetChild(int index) { }

	// RVA: 0x214C620 Offset: 0x214C620 VA: 0x214C620
	public int GetIndex(Transform trans) { }

	// RVA: 0x214C694 Offset: 0x214C694 VA: 0x214C694
	public void AddChild(Transform trans) { }

	// RVA: 0x214C69C Offset: 0x214C69C VA: 0x214C69C
	public void AddChild(Transform trans, bool sort) { }

	// RVA: 0x214C770 Offset: 0x214C770 VA: 0x214C770
	public bool RemoveChild(Transform t) { }

	// RVA: 0x214C80C Offset: 0x214C80C VA: 0x214C80C
	public void RemoveAllChild() { }

	// RVA: 0x214C8FC Offset: 0x214C8FC VA: 0x214C8FC Slot: 4
	protected virtual void Init() { }

	// RVA: 0x214C990 Offset: 0x214C990 VA: 0x214C990 Slot: 5
	protected virtual void Start() { }

	// RVA: 0x214C9EC Offset: 0x214C9EC VA: 0x214C9EC Slot: 6
	protected virtual void Update() { }

	// RVA: 0x214CA20 Offset: 0x214CA20 VA: 0x214CA20
	private void OnValidate() { }

	// RVA: 0x214CAB4 Offset: 0x214CAB4 VA: 0x214CAB4
	public static int SortByName(Transform a, Transform b) { }

	// RVA: 0x214CB68 Offset: 0x214CB68 VA: 0x214CB68
	public static int SortHorizontal(Transform a, Transform b) { }

	// RVA: 0x214CBD8 Offset: 0x214CBD8 VA: 0x214CBD8
	public static int SortVertical(Transform a, Transform b) { }

	// RVA: 0x214CC58 Offset: 0x214CC58 VA: 0x214CC58 Slot: 7
	protected virtual void Sort(List<Transform> list) { }

	[ContextMenu] // RVA: 0xD43ACC Offset: 0xD43ACC VA: 0xD43ACC
	// RVA: 0x214CC5C Offset: 0x214CC5C VA: 0x214CC5C Slot: 8
	public virtual void Reposition() { }

	// RVA: 0x214CD90 Offset: 0x214CD90 VA: 0x214CD90
	public void ConstrainWithinPanel() { }

	// RVA: 0x214D0C8 Offset: 0x214D0C8 VA: 0x214D0C8 Slot: 9
	protected virtual void ResetPosition(List<Transform> list) { }
}

// Namespace: 
public sealed class UIGrid.OnReposition : MulticastDelegate // TypeDefIndex: 12039
{
	// Methods

	// RVA: 0x214D6B8 Offset: 0x214D6B8 VA: 0x214D6B8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x214CEC8 Offset: 0x214CEC8 VA: 0x214CEC8 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x214D6C8 Offset: 0x214D6C8 VA: 0x214D6C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x214D6FC Offset: 0x214D6FC VA: 0x214D6FC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum UIGrid.Arrangement // TypeDefIndex: 12040
{
	// Fields
	public int value__; // 0x0
	public const UIGrid.Arrangement Horizontal = 0;
	public const UIGrid.Arrangement Vertical = 1;
	public const UIGrid.Arrangement CellSnap = 2;
}

// Namespace: 
public enum UIGrid.Sorting // TypeDefIndex: 12041
{
	// Fields
	public int value__; // 0x0
	public const UIGrid.Sorting None = 0;
	public const UIGrid.Sorting Alphabetic = 1;
	public const UIGrid.Sorting Horizontal = 2;
	public const UIGrid.Sorting Vertical = 3;
	public const UIGrid.Sorting Custom = 4;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98294 Offset: 0xC98294 VA: 0xC98294
public class UIImageButton : MonoBehaviour // TypeDefIndex: 12042
{
	// Fields
	public UISprite target; // 0x18
	public string normalSprite; // 0x20
	public string hoverSprite; // 0x28
	public string pressedSprite; // 0x30
	public string disabledSprite; // 0x38
	public bool pixelSnap; // 0x40

	// Properties
	public bool isEnabled { get; set; }

	// Methods

	// RVA: 0x2152E10 Offset: 0x2152E10 VA: 0x2152E10
	public void .ctor() { }

	// RVA: 0x2152E20 Offset: 0x2152E20 VA: 0x2152E20
	public bool get_isEnabled() { }

	// RVA: 0x2152EE8 Offset: 0x2152EE8 VA: 0x2152EE8
	public void set_isEnabled(bool value) { }

	// RVA: 0x21530D8 Offset: 0x21530D8 VA: 0x21530D8
	private void OnEnable() { }

	// RVA: 0x215316C Offset: 0x215316C VA: 0x215316C
	private void OnValidate() { }

	// RVA: 0x2152FE8 Offset: 0x2152FE8 VA: 0x2152FE8
	private void UpdateImage() { }

	// RVA: 0x215345C Offset: 0x215345C VA: 0x215345C
	private void OnHover(bool isOver) { }

	// RVA: 0x2153514 Offset: 0x2153514 VA: 0x2153514
	private void OnPress(bool pressed) { }

	// RVA: 0x2153324 Offset: 0x2153324 VA: 0x2153324
	private void SetSprite(string sprite) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC982CC Offset: 0xC982CC VA: 0xC982CC
public class UIKeyBinding : MonoBehaviour // TypeDefIndex: 12043
{
	// Fields
	public KeyCode keyCode; // 0x18
	public UIKeyBinding.Modifier modifier; // 0x1C
	public UIKeyBinding.Action action; // 0x20
	private bool mIgnoreUp; // 0x24
	private bool mIsInput; // 0x25
	private bool mPress; // 0x26

	// Methods

	// RVA: 0x215C348 Offset: 0x215C348 VA: 0x215C348
	public void .ctor() { }

	// RVA: 0x215C350 Offset: 0x215C350 VA: 0x215C350 Slot: 4
	protected virtual void Start() { }

	// RVA: 0x215C474 Offset: 0x215C474 VA: 0x215C474 Slot: 5
	protected virtual void OnSubmit() { }

	// RVA: 0x215C508 Offset: 0x215C508 VA: 0x215C508 Slot: 6
	protected virtual bool IsModifierActive() { }

	// RVA: 0x215C598 Offset: 0x215C598 VA: 0x215C598 Slot: 7
	protected virtual void Update() { }

	// RVA: 0x215C840 Offset: 0x215C840 VA: 0x215C840 Slot: 8
	protected virtual void OnBindingPress(bool pressed) { }

	// RVA: 0x215C8F8 Offset: 0x215C8F8 VA: 0x215C8F8 Slot: 9
	protected virtual void OnBindingClick() { }
}

// Namespace: 
public enum UIKeyBinding.Action // TypeDefIndex: 12044
{
	// Fields
	public int value__; // 0x0
	public const UIKeyBinding.Action PressAndClick = 0;
	public const UIKeyBinding.Action Select = 1;
	public const UIKeyBinding.Action All = 2;
}

// Namespace: 
public enum UIKeyBinding.Modifier // TypeDefIndex: 12045
{
	// Fields
	public int value__; // 0x0
	public const UIKeyBinding.Modifier None = 0;
	public const UIKeyBinding.Modifier Shift = 1;
	public const UIKeyBinding.Modifier Control = 2;
	public const UIKeyBinding.Modifier Alt = 3;
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98304 Offset: 0xC98304 VA: 0xC98304
public class UIKeyNavigation : MonoBehaviour // TypeDefIndex: 12046
{
	// Fields
	public static BetterList<UIKeyNavigation> list; // 0x0
	public UIKeyNavigation.Constraint constraint; // 0x18
	public GameObject onUp; // 0x20
	public GameObject onDown; // 0x28
	public GameObject onLeft; // 0x30
	public GameObject onRight; // 0x38
	public GameObject onClick; // 0x40
	public bool startsSelected; // 0x48

	// Methods

	// RVA: 0x215C984 Offset: 0x215C984 VA: 0x215C984
	public void .ctor() { }

	// RVA: 0x215C98C Offset: 0x215C98C VA: 0x215C98C Slot: 4
	protected virtual void OnEnable() { }

	// RVA: 0x215CB30 Offset: 0x215CB30 VA: 0x215CB30 Slot: 5
	protected virtual void OnDisable() { }

	// RVA: 0x215CBBC Offset: 0x215CBBC VA: 0x215CBBC
	protected GameObject GetLeft() { }

	// RVA: 0x215D054 Offset: 0x215D054 VA: 0x215D054
	private GameObject GetRight() { }

	// RVA: 0x215D120 Offset: 0x215D120 VA: 0x215D120
	protected GameObject GetUp() { }

	// RVA: 0x215D1EC Offset: 0x215D1EC VA: 0x215D1EC
	protected GameObject GetDown() { }

	// RVA: 0x215CC88 Offset: 0x215CC88 VA: 0x215CC88
	protected GameObject Get(Vector3 myDir, bool horizontal) { }

	// RVA: 0x215D2B8 Offset: 0x215D2B8 VA: 0x215D2B8
	protected static Vector3 GetCenter(GameObject go) { }

	// RVA: 0x215D664 Offset: 0x215D664 VA: 0x215D664 Slot: 6
	protected virtual void OnKey(KeyCode key) { }

	// RVA: 0x215D934 Offset: 0x215D934 VA: 0x215D934 Slot: 7
	protected virtual void OnClick() { }

	// RVA: 0x215DA08 Offset: 0x215DA08 VA: 0x215DA08
	private static void .cctor() { }
}

// Namespace: 
public enum UIKeyNavigation.Constraint // TypeDefIndex: 12047
{
	// Fields
	public int value__; // 0x0
	public const UIKeyNavigation.Constraint None = 0;
	public const UIKeyNavigation.Constraint Vertical = 1;
	public const UIKeyNavigation.Constraint Horizontal = 2;
	public const UIKeyNavigation.Constraint Explicit = 3;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC9833C Offset: 0xC9833C VA: 0xC9833C
[AddComponentMenu] // RVA: 0xC9833C Offset: 0xC9833C VA: 0xC9833C
public class UIPlayAnimation : MonoBehaviour // TypeDefIndex: 12048
{
	// Fields
	public static UIPlayAnimation current; // 0x0
	public Animation target; // 0x18
	public Animator animator; // 0x20
	public string clipName; // 0x28
	public Trigger trigger; // 0x30
	public Direction playDirection; // 0x34
	public bool resetOnPlay; // 0x38
	public bool clearSelection; // 0x39
	public EnableCondition ifDisabledOnPlay; // 0x3C
	public DisableCondition disableWhenFinished; // 0x40
	public List<EventDelegate> onFinished; // 0x48
	[HideInInspector] // RVA: 0xCF0DF0 Offset: 0xCF0DF0 VA: 0xCF0DF0
	[SerializeField] // RVA: 0xCF0DF0 Offset: 0xCF0DF0 VA: 0xCF0DF0
	private GameObject eventReceiver; // 0x50
	[HideInInspector] // RVA: 0xCF0E28 Offset: 0xCF0E28 VA: 0xCF0E28
	[SerializeField] // RVA: 0xCF0E28 Offset: 0xCF0E28 VA: 0xCF0E28
	private string callWhenFinished; // 0x58
	private bool mStarted; // 0x60
	private bool mActivated; // 0x61
	private bool dragHighlight; // 0x62

	// Properties
	private bool dualState { get; }

	// Methods

	// RVA: 0x21B8264 Offset: 0x21B8264 VA: 0x21B8264
	public void .ctor() { }

	// RVA: 0x21B82DC Offset: 0x21B82DC VA: 0x21B82DC
	private bool get_dualState() { }

	// RVA: 0x21B82F0 Offset: 0x21B82F0 VA: 0x21B82F0
	private void Awake() { }

	// RVA: 0x21B8408 Offset: 0x21B8408 VA: 0x21B8408
	private void Start() { }

	// RVA: 0x21B8600 Offset: 0x21B8600 VA: 0x21B8600
	private void OnEnable() { }

	// RVA: 0x21B8924 Offset: 0x21B8924 VA: 0x21B8924
	private void OnDisable() { }

	// RVA: 0x21B88B4 Offset: 0x21B88B4 VA: 0x21B88B4
	private void OnHover(bool isOver) { }

	// RVA: 0x21B8D14 Offset: 0x21B8D14 VA: 0x21B8D14
	private void OnPress(bool isPressed) { }

	// RVA: 0x21B8DF0 Offset: 0x21B8DF0 VA: 0x21B8DF0
	private void OnClick() { }

	// RVA: 0x21B8E94 Offset: 0x21B8E94 VA: 0x21B8E94
	private void OnDoubleClick() { }

	// RVA: 0x21B8F3C Offset: 0x21B8F3C VA: 0x21B8F3C
	private void OnSelect(bool isSelected) { }

	// RVA: 0x21B8FB0 Offset: 0x21B8FB0 VA: 0x21B8FB0
	private void OnToggle() { }

	// RVA: 0x21B9170 Offset: 0x21B9170 VA: 0x21B9170
	private void OnDragOver() { }

	// RVA: 0x21B928C Offset: 0x21B928C VA: 0x21B928C
	private void OnDragOut() { }

	// RVA: 0x21B9384 Offset: 0x21B9384 VA: 0x21B9384
	private void OnDrop(GameObject go) { }

	// RVA: 0x21B9488 Offset: 0x21B9488 VA: 0x21B9488
	public void Play(bool forward) { }

	// RVA: 0x21B8A34 Offset: 0x21B8A34 VA: 0x21B8A34
	public void Play(bool forward, bool onlyIfDifferent) { }

	// RVA: 0x21B9494 Offset: 0x21B9494 VA: 0x21B9494
	private void OnFinished() { }

	// RVA: 0x21B9644 Offset: 0x21B9644 VA: 0x21B9644
	private static void .cctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC98388 Offset: 0xC98388 VA: 0xC98388
public class UIPlaySound : MonoBehaviour // TypeDefIndex: 12049
{
	// Fields
	public AudioClip audioClip; // 0x18
	public UIPlaySound.Trigger trigger; // 0x20
	[RangeAttribute] // RVA: 0xCF0E60 Offset: 0xCF0E60 VA: 0xCF0E60
	public float volume; // 0x24
	[RangeAttribute] // RVA: 0xCF0E78 Offset: 0xCF0E78 VA: 0xCF0E78
	public float pitch; // 0x28
	private bool mIsOver; // 0x2C

	// Properties
	private bool canPlay { get; }

	// Methods

	// RVA: 0x21B9648 Offset: 0x21B9648 VA: 0x21B9648
	public void .ctor() { }

	// RVA: 0x21B9658 Offset: 0x21B9658 VA: 0x21B9658
	private bool get_canPlay() { }

	// RVA: 0x21B9728 Offset: 0x21B9728 VA: 0x21B9728
	private void OnEnable() { }

	// RVA: 0x21B97C4 Offset: 0x21B97C4 VA: 0x21B97C4
	private void OnDisable() { }

	// RVA: 0x21B9860 Offset: 0x21B9860 VA: 0x21B9860
	private void OnHover(bool isOver) { }

	// RVA: 0x21B994C Offset: 0x21B994C VA: 0x21B994C
	private void OnPress(bool isPressed) { }

	// RVA: 0x21B9A38 Offset: 0x21B9A38 VA: 0x21B9A38
	private void OnClick() { }

	// RVA: 0x21B9ADC Offset: 0x21B9ADC VA: 0x21B9ADC
	private void OnSelect(bool isSelected) { }

	// RVA: 0x21B9B84 Offset: 0x21B9B84 VA: 0x21B9B84
	public void Play() { }
}

// Namespace: 
public enum UIPlaySound.Trigger // TypeDefIndex: 12050
{
	// Fields
	public int value__; // 0x0
	public const UIPlaySound.Trigger OnClick = 0;
	public const UIPlaySound.Trigger OnMouseOver = 1;
	public const UIPlaySound.Trigger OnMouseOut = 2;
	public const UIPlaySound.Trigger OnPress = 3;
	public const UIPlaySound.Trigger OnRelease = 4;
	public const UIPlaySound.Trigger Custom = 5;
	public const UIPlaySound.Trigger OnEnable = 6;
	public const UIPlaySound.Trigger OnDisable = 7;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC983C0 Offset: 0xC983C0 VA: 0xC983C0
[AddComponentMenu] // RVA: 0xC983C0 Offset: 0xC983C0 VA: 0xC983C0
public class UIPlayTween : MonoBehaviour // TypeDefIndex: 12051
{
	// Fields
	public static UIPlayTween current; // 0x0
	public GameObject tweenTarget; // 0x18
	public int tweenGroup; // 0x20
	public Trigger trigger; // 0x24
	public Direction playDirection; // 0x28
	public bool resetOnPlay; // 0x2C
	public bool resetIfDisabled; // 0x2D
	public EnableCondition ifDisabledOnPlay; // 0x30
	public DisableCondition disableWhenFinished; // 0x34
	public bool includeChildren; // 0x38
	public List<EventDelegate> onFinished; // 0x40
	[HideInInspector] // RVA: 0xCF0E90 Offset: 0xCF0E90 VA: 0xCF0E90
	[SerializeField] // RVA: 0xCF0E90 Offset: 0xCF0E90 VA: 0xCF0E90
	private GameObject eventReceiver; // 0x48
	[HideInInspector] // RVA: 0xCF0EC8 Offset: 0xCF0EC8 VA: 0xCF0EC8
	[SerializeField] // RVA: 0xCF0EC8 Offset: 0xCF0EC8 VA: 0xCF0EC8
	private string callWhenFinished; // 0x50
	private UITweener[] mTweens; // 0x58
	private bool mStarted; // 0x60
	private int mActive; // 0x64
	private bool mActivated; // 0x68

	// Methods

	// RVA: 0x21B9F64 Offset: 0x21B9F64 VA: 0x21B9F64
	public void .ctor() { }

	// RVA: 0x21B9FDC Offset: 0x21B9FDC VA: 0x21B9FDC
	private void Awake() { }

	// RVA: 0x21BA098 Offset: 0x21BA098 VA: 0x21BA098
	private void Start() { }

	// RVA: 0x21BA128 Offset: 0x21BA128 VA: 0x21BA128
	private void OnEnable() { }

	// RVA: 0x21BA458 Offset: 0x21BA458 VA: 0x21BA458
	private void OnDisable() { }

	// RVA: 0x21BA568 Offset: 0x21BA568 VA: 0x21BA568
	private void OnDragOver() { }

	// RVA: 0x21BA3DC Offset: 0x21BA3DC VA: 0x21BA3DC
	private void OnHover(bool isOver) { }

	// RVA: 0x21BA9A0 Offset: 0x21BA9A0 VA: 0x21BA9A0
	private void OnDragOut() { }

	// RVA: 0x21BA9E8 Offset: 0x21BA9E8 VA: 0x21BA9E8
	private void OnPress(bool isPressed) { }

	// RVA: 0x21BAA64 Offset: 0x21BAA64 VA: 0x21BAA64
	private void OnClick() { }

	// RVA: 0x21BAAA8 Offset: 0x21BAAA8 VA: 0x21BAAA8
	private void OnDoubleClick() { }

	// RVA: 0x21BAAF0 Offset: 0x21BAAF0 VA: 0x21BAAF0
	private void OnSelect(bool isSelected) { }

	// RVA: 0x21BAB6C Offset: 0x21BAB6C VA: 0x21BAB6C
	private void OnToggle() { }

	// RVA: 0x21BAD1C Offset: 0x21BAD1C VA: 0x21BAD1C
	private void Update() { }

	// RVA: 0x21BA580 Offset: 0x21BA580 VA: 0x21BA580
	public void Play(bool forward) { }

	// RVA: 0x21BAE5C Offset: 0x21BAE5C VA: 0x21BAE5C
	private void OnFinished() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC9840C Offset: 0xC9840C VA: 0xC9840C
[AddComponentMenu] // RVA: 0xC9840C Offset: 0xC9840C VA: 0xC9840C
public class UIPopupList : UIWidgetContainer // TypeDefIndex: 12052
{
	// Fields
	protected const int maxLineLabelNum = 20;
	public bool isAligument; // 0x18
	public static UIPopupList current; // 0x0
	private const float animSpeed = 0.15;
	public UIAtlas atlas; // 0x20
	public UIFont bitmapFont; // 0x28
	public Font trueTypeFont; // 0x30
	public int fontSize; // 0x38
	public FontStyle fontStyle; // 0x3C
	public string backgroundSprite; // 0x40
	public string highlightSprite; // 0x48
	public UIPopupList.Position position; // 0x50
	public NGUIText.Alignment alignment; // 0x54
	public List<string> items; // 0x58
	public List<object> itemData; // 0x60
	public Vector2 padding; // 0x68
	public Color textColor; // 0x70
	public Color backgroundColor; // 0x80
	public Color highlightColor; // 0x90
	public bool isAnimated; // 0xA0
	public bool isLocalized; // 0xA1
	public UIPopupList.OpenOn openOn; // 0xA4
	public List<EventDelegate> onChange; // 0xA8
	[HideInInspector] // RVA: 0xCF0F00 Offset: 0xCF0F00 VA: 0xCF0F00
	[SerializeField] // RVA: 0xCF0F00 Offset: 0xCF0F00 VA: 0xCF0F00
	private string mSelectedItem; // 0xB0
	[HideInInspector] // RVA: 0xCF0F38 Offset: 0xCF0F38 VA: 0xCF0F38
	[SerializeField] // RVA: 0xCF0F38 Offset: 0xCF0F38 VA: 0xCF0F38
	private UIPanel mPanel; // 0xB8
	[HideInInspector] // RVA: 0xCF0F70 Offset: 0xCF0F70 VA: 0xCF0F70
	[SerializeField] // RVA: 0xCF0F70 Offset: 0xCF0F70 VA: 0xCF0F70
	private GameObject mChild; // 0xC0
	[HideInInspector] // RVA: 0xCF0FA8 Offset: 0xCF0FA8 VA: 0xCF0FA8
	[SerializeField] // RVA: 0xCF0FA8 Offset: 0xCF0FA8 VA: 0xCF0FA8
	private UISprite mBackground; // 0xC8
	[HideInInspector] // RVA: 0xCF0FE0 Offset: 0xCF0FE0 VA: 0xCF0FE0
	[SerializeField] // RVA: 0xCF0FE0 Offset: 0xCF0FE0 VA: 0xCF0FE0
	private UISprite mHighlight; // 0xD0
	[HideInInspector] // RVA: 0xCF1018 Offset: 0xCF1018 VA: 0xCF1018
	[SerializeField] // RVA: 0xCF1018 Offset: 0xCF1018 VA: 0xCF1018
	private UILabel mHighlightedLabel; // 0xD8
	[HideInInspector] // RVA: 0xCF1050 Offset: 0xCF1050 VA: 0xCF1050
	[SerializeField] // RVA: 0xCF1050 Offset: 0xCF1050 VA: 0xCF1050
	private List<UILabel> mLabelList; // 0xE0
	[HideInInspector] // RVA: 0xCF1088 Offset: 0xCF1088 VA: 0xCF1088
	[SerializeField] // RVA: 0xCF1088 Offset: 0xCF1088 VA: 0xCF1088
	private float mBgBorder; // 0xE8
	private GameObject mSelection; // 0xF0
	[HideInInspector] // RVA: 0xCF10C0 Offset: 0xCF10C0 VA: 0xCF10C0
	[SerializeField] // RVA: 0xCF10C0 Offset: 0xCF10C0 VA: 0xCF10C0
	private GameObject eventReceiver; // 0xF8
	[HideInInspector] // RVA: 0xCF10F8 Offset: 0xCF10F8 VA: 0xCF10F8
	[SerializeField] // RVA: 0xCF10F8 Offset: 0xCF10F8 VA: 0xCF10F8
	private string functionName; // 0x100
	[HideInInspector] // RVA: 0xCF1130 Offset: 0xCF1130 VA: 0xCF1130
	[SerializeField] // RVA: 0xCF1130 Offset: 0xCF1130 VA: 0xCF1130
	private float textScale; // 0x108
	[HideInInspector] // RVA: 0xCF1168 Offset: 0xCF1168 VA: 0xCF1168
	[SerializeField] // RVA: 0xCF1168 Offset: 0xCF1168 VA: 0xCF1168
	private UIFont font; // 0x110
	[HideInInspector] // RVA: 0xCF11A0 Offset: 0xCF11A0 VA: 0xCF11A0
	[SerializeField] // RVA: 0xCF11A0 Offset: 0xCF11A0 VA: 0xCF11A0
	private UILabel textLabel; // 0x118
	private UIPopupList.LegacyEvent mLegacyEvent; // 0x120
	private bool mUseDynamicFont; // 0x128
	private bool mTweening; // 0x129

	// Properties
	public Object ambigiousFont { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4BDB4 Offset: 0xD4BDB4 VA: 0xD4BDB4
	public UIPopupList.LegacyEvent onSelectionChange { get; set; }
	public bool isOpen { get; }
	public string value { get; set; }
	public object data { get; }
	[ObsoleteAttribute] // RVA: 0xD4BDEC Offset: 0xD4BDEC VA: 0xD4BDEC
	public string selection { get; set; }
	private bool handleEvents { get; set; }
	private bool isValid { get; }
	private int activeFontSize { get; }
	private float activeFontScale { get; }

	// Methods

	// RVA: 0x21BAFD0 Offset: 0x21BAFD0 VA: 0x21BAFD0
	public void .ctor() { }

	// RVA: 0x21BB1A4 Offset: 0x21BB1A4 VA: 0x21BB1A4
	public Object get_ambigiousFont() { }

	// RVA: 0x21BB268 Offset: 0x21BB268 VA: 0x21BB268
	public void set_ambigiousFont(Object value) { }

	// RVA: 0x21BB310 Offset: 0x21BB310 VA: 0x21BB310
	public UIPopupList.LegacyEvent get_onSelectionChange() { }

	// RVA: 0x21BB318 Offset: 0x21BB318 VA: 0x21BB318
	public void set_onSelectionChange(UIPopupList.LegacyEvent value) { }

	// RVA: 0x21BB320 Offset: 0x21BB320 VA: 0x21BB320
	public bool get_isOpen() { }

	// RVA: 0x21BB390 Offset: 0x21BB390 VA: 0x21BB390
	public string get_value() { }

	// RVA: 0x21BB398 Offset: 0x21BB398 VA: 0x21BB398
	public void set_value(string value) { }

	// RVA: 0x21BB560 Offset: 0x21BB560 VA: 0x21BB560
	public object get_data() { }

	// RVA: 0x21BB640 Offset: 0x21BB640 VA: 0x21BB640
	public string get_selection() { }

	// RVA: 0x21BB648 Offset: 0x21BB648 VA: 0x21BB648
	public void set_selection(string value) { }

	// RVA: 0x21BB658 Offset: 0x21BB658 VA: 0x21BB658
	private bool get_handleEvents() { }

	// RVA: 0x21BB710 Offset: 0x21BB710 VA: 0x21BB710
	private void set_handleEvents(bool value) { }

	// RVA: 0x21BB7D8 Offset: 0x21BB7D8 VA: 0x21BB7D8
	private bool get_isValid() { }

	// RVA: 0x21BB894 Offset: 0x21BB894 VA: 0x21BB894
	private int get_activeFontSize() { }

	// RVA: 0x21BB970 Offset: 0x21BB970 VA: 0x21BB970
	private float get_activeFontScale() { }

	// RVA: 0x21BBA5C Offset: 0x21BBA5C VA: 0x21BBA5C
	public void Clear() { }

	// RVA: 0x21BBAE0 Offset: 0x21BBAE0 VA: 0x21BBAE0
	public void AddItem(string text) { }

	// RVA: 0x21BBB78 Offset: 0x21BBB78 VA: 0x21BBB78
	public void AddItem(string text, object data) { }

	// RVA: 0x21BB3A8 Offset: 0x21BB3A8 VA: 0x21BB3A8
	protected void TriggerCallbacks() { }

	// RVA: 0x21BBFB4 Offset: 0x21BBFB4 VA: 0x21BBFB4
	private void OnEnable() { }

	// RVA: 0x21BC264 Offset: 0x21BC264 VA: 0x21BC264
	private void OnValidate() { }

	// RVA: 0x21BC404 Offset: 0x21BC404 VA: 0x21BC404
	private void Start() { }

	// RVA: 0x21BC5A4 Offset: 0x21BC5A4 VA: 0x21BC5A4
	private void OnLocalize() { }

	// RVA: 0x21BC5B4 Offset: 0x21BC5B4 VA: 0x21BC5B4
	private void Highlight(UILabel lbl, bool instant) { }

	// RVA: 0x21BC768 Offset: 0x21BC768 VA: 0x21BC768
	private Vector3 GetHighlightPosition() { }

	[DebuggerHiddenAttribute] // RVA: 0xD43B04 Offset: 0xD43B04 VA: 0xD43B04
	// RVA: 0x21BC958 Offset: 0x21BC958 VA: 0x21BC958
	private IEnumerator UpdateTweenPosition() { }

	// RVA: 0x21BC9D0 Offset: 0x21BC9D0 VA: 0x21BC9D0
	private void OnItemHover(GameObject go, bool isOver) { }

	// RVA: 0x21BCA64 Offset: 0x21BCA64 VA: 0x21BCA64
	private void Select(UILabel lbl, bool instant) { }

	// RVA: 0x21BCC14 Offset: 0x21BCC14 VA: 0x21BCC14
	private void OnItemPress(GameObject go, bool isPressed) { }

	// RVA: 0x21BCCA8 Offset: 0x21BCCA8 VA: 0x21BCCA8
	private void OnItemClick(GameObject go) { }

	// RVA: 0x21BCF8C Offset: 0x21BCF8C VA: 0x21BCF8C
	private void OnKey(KeyCode key) { }

	// RVA: 0x21BD11C Offset: 0x21BD11C VA: 0x21BD11C
	private void OnDisable() { }

	// RVA: 0x21BD110 Offset: 0x21BD110 VA: 0x21BD110
	private void OnSelect(bool isSelected) { }

	// RVA: 0x21BCCAC Offset: 0x21BCCAC VA: 0x21BCCAC
	public void Close() { }

	// RVA: 0x21BD120 Offset: 0x21BD120 VA: 0x21BD120
	private void AnimateColor(UIWidget widget) { }

	// RVA: 0x21BD1FC Offset: 0x21BD1FC VA: 0x21BD1FC
	private void AnimatePosition(UIWidget widget, bool placeAbove, float bottom) { }

	// RVA: 0x21BD344 Offset: 0x21BD344 VA: 0x21BD344
	private void AnimateScale(UIWidget widget, bool placeAbove, float bottom) { }

	// RVA: 0x21BD5A8 Offset: 0x21BD5A8 VA: 0x21BD5A8
	private void Animate(UIWidget widget, bool placeAbove, float bottom) { }

	// RVA: 0x21BD5E4 Offset: 0x21BD5E4 VA: 0x21BD5E4
	private void OnClick() { }

	// RVA: 0x21BF05C Offset: 0x21BF05C VA: 0x21BF05C
	private void OnDoubleClick() { }

	[DebuggerHiddenAttribute] // RVA: 0xD43B14 Offset: 0xD43B14 VA: 0xD43B14
	// RVA: 0x21BF070 Offset: 0x21BF070 VA: 0x21BF070
	private IEnumerator CloseIfUnselected() { }

	// RVA: 0x21BD680 Offset: 0x21BD680 VA: 0x21BD680
	public void Show() { }
}

// Namespace: 
public enum UIPopupList.Position // TypeDefIndex: 12053
{
	// Fields
	public int value__; // 0x0
	public const UIPopupList.Position Auto = 0;
	public const UIPopupList.Position Above = 1;
	public const UIPopupList.Position Below = 2;
}

// Namespace: 
public enum UIPopupList.OpenOn // TypeDefIndex: 12054
{
	// Fields
	public int value__; // 0x0
	public const UIPopupList.OpenOn ClickOrTap = 0;
	public const UIPopupList.OpenOn RightClick = 1;
	public const UIPopupList.OpenOn DoubleClick = 2;
	public const UIPopupList.OpenOn Manual = 3;
}

// Namespace: 
public sealed class UIPopupList.LegacyEvent : MulticastDelegate // TypeDefIndex: 12055
{
	// Methods

	// RVA: 0x21BF560 Offset: 0x21BF560 VA: 0x21BF560
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x21BBC14 Offset: 0x21BBC14 VA: 0x21BBC14 Slot: 11
	public virtual void Invoke(string val) { }

	// RVA: 0x21BF570 Offset: 0x21BF570 VA: 0x21BF570 Slot: 12
	public virtual IAsyncResult BeginInvoke(string val, AsyncCallback callback, object object) { }

	// RVA: 0x21BF594 Offset: 0x21BF594 VA: 0x21BF594 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2EF0 Offset: 0xCB2EF0 VA: 0xCB2EF0
private sealed class UIPopupList.<UpdateTweenPosition>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 12056
{
	// Fields
	internal TweenPosition <tp>__1; // 0x10
	internal UIPopupList $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4B344 Offset: 0xD4B344 VA: 0xD4B344
	// RVA: 0x21BC9C8 Offset: 0x21BC9C8 VA: 0x21BC9C8
	public void .ctor() { }

	// RVA: 0x21BF2A8 Offset: 0x21BF2A8 VA: 0x21BF2A8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B354 Offset: 0xD4B354 VA: 0xD4B354
	// RVA: 0x21BF4D4 Offset: 0x21BF4D4 VA: 0x21BF4D4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B364 Offset: 0xD4B364 VA: 0xD4B364
	// RVA: 0x21BF4DC Offset: 0x21BF4DC VA: 0x21BF4DC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B374 Offset: 0xD4B374 VA: 0xD4B374
	// RVA: 0x21BF4E4 Offset: 0x21BF4E4 VA: 0x21BF4E4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B384 Offset: 0xD4B384 VA: 0xD4B384
	// RVA: 0x21BF4F8 Offset: 0x21BF4F8 VA: 0x21BF4F8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB2F00 Offset: 0xCB2F00 VA: 0xCB2F00
private sealed class UIPopupList.<CloseIfUnselected>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 12057
{
	// Fields
	internal UIPopupList $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4B394 Offset: 0xD4B394 VA: 0xD4B394
	// RVA: 0x21BF0E0 Offset: 0x21BF0E0 VA: 0x21BF0E0
	public void .ctor() { }

	// RVA: 0x21BF0E8 Offset: 0x21BF0E8 VA: 0x21BF0E8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B3A4 Offset: 0xD4B3A4 VA: 0xD4B3A4
	// RVA: 0x21BF21C Offset: 0x21BF21C VA: 0x21BF21C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B3B4 Offset: 0xD4B3B4 VA: 0xD4B3B4
	// RVA: 0x21BF224 Offset: 0x21BF224 VA: 0x21BF224 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B3C4 Offset: 0xD4B3C4 VA: 0xD4B3C4
	// RVA: 0x21BF22C Offset: 0x21BF22C VA: 0x21BF22C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4B3D4 Offset: 0xD4B3D4 VA: 0xD4B3D4
	// RVA: 0x21BF240 Offset: 0x21BF240 VA: 0x21BF240 Slot: 6
	public void Reset() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC98458 Offset: 0xC98458 VA: 0xC98458
[AddComponentMenu] // RVA: 0xC98458 Offset: 0xC98458 VA: 0xC98458
public class UIProgressBar : UIWidgetContainer // TypeDefIndex: 12058
{
	// Fields
	public static UIProgressBar current; // 0x0
	public UIProgressBar.OnDragFinished onDragFinished; // 0x18
	public Transform thumb; // 0x20
	[HideInInspector] // RVA: 0xCF11D8 Offset: 0xCF11D8 VA: 0xCF11D8
	[SerializeField] // RVA: 0xCF11D8 Offset: 0xCF11D8 VA: 0xCF11D8
	protected UIWidget mBG; // 0x28
	[HideInInspector] // RVA: 0xCF1210 Offset: 0xCF1210 VA: 0xCF1210
	[SerializeField] // RVA: 0xCF1210 Offset: 0xCF1210 VA: 0xCF1210
	protected UIWidget mFG; // 0x30
	[HideInInspector] // RVA: 0xCF1248 Offset: 0xCF1248 VA: 0xCF1248
	[SerializeField] // RVA: 0xCF1248 Offset: 0xCF1248 VA: 0xCF1248
	protected float mValue; // 0x38
	[HideInInspector] // RVA: 0xCF1280 Offset: 0xCF1280 VA: 0xCF1280
	[SerializeField] // RVA: 0xCF1280 Offset: 0xCF1280 VA: 0xCF1280
	protected UIProgressBar.FillDirection mFill; // 0x3C
	protected Transform mTrans; // 0x40
	protected bool mIsDirty; // 0x48
	protected Camera mCam; // 0x50
	protected float mOffset; // 0x58
	public int numberOfSteps; // 0x5C
	public List<EventDelegate> onChange; // 0x60

	// Properties
	public Transform cachedTransform { get; }
	public Camera cachedCamera { get; }
	public UIWidget foregroundWidget { get; set; }
	public UIWidget backgroundWidget { get; set; }
	public UIProgressBar.FillDirection fillDirection { get; set; }
	public float value { get; set; }
	public float alpha { get; set; }
	protected bool isHorizontal { get; }
	protected bool isInverted { get; }

	// Methods

	// RVA: 0x21BF5A0 Offset: 0x21BF5A0 VA: 0x21BF5A0
	public void .ctor() { }

	// RVA: 0x21BF618 Offset: 0x21BF618 VA: 0x21BF618
	public Transform get_cachedTransform() { }

	// RVA: 0x21BF6A8 Offset: 0x21BF6A8 VA: 0x21BF6A8
	public Camera get_cachedCamera() { }

	// RVA: 0x21BF784 Offset: 0x21BF784 VA: 0x21BF784
	public UIWidget get_foregroundWidget() { }

	// RVA: 0x21BF78C Offset: 0x21BF78C VA: 0x21BF78C
	public void set_foregroundWidget(UIWidget value) { }

	// RVA: 0x21BF81C Offset: 0x21BF81C VA: 0x21BF81C
	public UIWidget get_backgroundWidget() { }

	// RVA: 0x21BF824 Offset: 0x21BF824 VA: 0x21BF824
	public void set_backgroundWidget(UIWidget value) { }

	// RVA: 0x21BF8B4 Offset: 0x21BF8B4 VA: 0x21BF8B4
	public UIProgressBar.FillDirection get_fillDirection() { }

	// RVA: 0x21BF8BC Offset: 0x21BF8BC VA: 0x21BF8BC
	public void set_fillDirection(UIProgressBar.FillDirection value) { }

	// RVA: 0x21BF8DC Offset: 0x21BF8DC VA: 0x21BF8DC
	public float get_value() { }
