	private byte[] l3b; // 0x40
	private byte[] l4sb; // 0x48
	private byte[] l4tb; // 0x50
	private byte[] l4kb; // 0x58
	private byte[] l4wb; // 0x60
	private byte[] l5b; // 0x68
	private string source; // 0x70
	private bool processLevel2; // 0x78
	private bool frenchSort; // 0x79
	private bool frenchSorted; // 0x7A
	private int lcid; // 0x7C
	private CompareOptions options; // 0x80

	// Methods

	// RVA: 0x26F6AA8 Offset: 0x26F6AA8 VA: 0x26F6AA8
	public void .ctor(int lcid) { }

	// RVA: 0x26FD560 Offset: 0x26FD560 VA: 0x26FD560
	public void Reset() { }

	// RVA: 0x26F6AB0 Offset: 0x26F6AB0 VA: 0x26F6AB0
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort) { }

	// RVA: 0x26F7720 Offset: 0x26F7720 VA: 0x26F7720
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb) { }

	// RVA: 0x26F7894 Offset: 0x26F7894 VA: 0x26F7894
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth) { }

	// RVA: 0x26F7590 Offset: 0x26F7590 VA: 0x26F7590
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3) { }

	// RVA: 0x26FD66C Offset: 0x26FD66C VA: 0x26FD66C
	private void AppendLevel5(byte category, byte lv1) { }

	// RVA: 0x26FD570 Offset: 0x26FD570 VA: 0x26FD570
	private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx) { }

	// RVA: 0x26F7070 Offset: 0x26F7070 VA: 0x26F7070
	public SortKey GetResultAndReset() { }

	// RVA: 0x26FDC58 Offset: 0x26FDC58 VA: 0x26FDC58
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue) { }

	// RVA: 0x26FD718 Offset: 0x26FD718 VA: 0x26FD718
	public SortKey GetResult() { }
}

// Namespace: Mono.Math.Prime.Generator
internal abstract class PrimeGeneratorBase // TypeDefIndex: 110
{
	// Properties
	public virtual ConfidenceFactor Confidence { get; }
	public virtual PrimalityTest PrimalityTest { get; }
	public virtual int TrialDivisionBounds { get; }

	// Methods

	// RVA: 0x270397C Offset: 0x270397C VA: 0x270397C
	protected void .ctor() { }

	// RVA: 0x2703984 Offset: 0x2703984 VA: 0x2703984 Slot: 4
	public virtual ConfidenceFactor get_Confidence() { }

	// RVA: 0x270398C Offset: 0x270398C VA: 0x270398C Slot: 5
	public virtual PrimalityTest get_PrimalityTest() { }

	// RVA: 0x2703A00 Offset: 0x2703A00 VA: 0x2703A00 Slot: 6
	public virtual int get_TrialDivisionBounds() { }

	// RVA: -1 Offset: -1 Slot: 7
	public abstract BigInteger GenerateNewPrime(int bits);
}

// Namespace: Mono.Math.Prime.Generator
internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 111
{
	// Methods

	// RVA: 0x27008F8 Offset: 0x27008F8 VA: 0x27008F8
	public void .ctor() { }

	// RVA: 0x2703A08 Offset: 0x2703A08 VA: 0x2703A08 Slot: 8
	protected virtual BigInteger GenerateSearchBase(int bits, object context) { }

	// RVA: 0x2703A90 Offset: 0x2703A90 VA: 0x2703A90 Slot: 7
	public override BigInteger GenerateNewPrime(int bits) { }

	// RVA: 0x2703AA0 Offset: 0x2703AA0 VA: 0x2703AA0 Slot: 9
	public virtual BigInteger GenerateNewPrime(int bits, object context) { }

	// RVA: 0x27041A0 Offset: 0x27041A0 VA: 0x27041A0 Slot: 10
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context) { }
}

// Namespace: Mono.Math.Prime
internal enum ConfidenceFactor // TypeDefIndex: 112
{
	// Fields
	public int value__; // 0x0
	public const ConfidenceFactor ExtraLow = 0;
	public const ConfidenceFactor Low = 1;
	public const ConfidenceFactor Medium = 2;
	public const ConfidenceFactor High = 3;
	public const ConfidenceFactor ExtraHigh = 4;
	public const ConfidenceFactor Provable = 5;
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTests // TypeDefIndex: 113
{
	// Methods

	// RVA: 0x2704280 Offset: 0x2704280 VA: 0x2704280
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence) { }

	// RVA: 0x270082C Offset: 0x270082C VA: 0x270082C
	public static bool Test(BigInteger n, ConfidenceFactor confidence) { }

	// RVA: 0x2704650 Offset: 0x2704650 VA: 0x2704650
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence) { }

	// RVA: 0x2704440 Offset: 0x2704440 VA: 0x2704440
	public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence) { }
}

// Namespace: Mono.Math
internal class BigInteger // TypeDefIndex: 114
{
	// Fields
	private uint length; // 0x10
	private uint[] data; // 0x18
	internal static readonly uint[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x8

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x26FDCEC Offset: 0x26FDCEC VA: 0x26FDCEC
	public void .ctor(BigInteger.Sign sign, uint len) { }

	// RVA: 0x26FDD68 Offset: 0x26FDD68 VA: 0x26FDD68
	public void .ctor(BigInteger bi) { }

	// RVA: 0x26FDE78 Offset: 0x26FDE78 VA: 0x26FDE78
	public void .ctor(BigInteger bi, uint len) { }

	// RVA: 0x26FDF90 Offset: 0x26FDF90 VA: 0x26FDF90
	public void .ctor(byte[] inData) { }

	// RVA: 0x26FE470 Offset: 0x26FE470 VA: 0x26FE470
	public void .ctor(uint ui) { }

	// RVA: 0x26FE510 Offset: 0x26FE510 VA: 0x26FE510
	private static void .cctor() { }

	// RVA: 0x26FE58C Offset: 0x26FE58C VA: 0x26FE58C
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x26FE654 Offset: 0x26FE654 VA: 0x26FE654
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng) { }

	// RVA: 0x26FE834 Offset: 0x26FE834 VA: 0x26FE834
	public static BigInteger GenerateRandom(int bits) { }

	// RVA: 0x26FE8A0 Offset: 0x26FE8A0 VA: 0x26FE8A0
	public void Randomize(RandomNumberGenerator rng) { }

	// RVA: 0x26FEBC4 Offset: 0x26FEBC4 VA: 0x26FEBC4
	public void Randomize() { }

	// RVA: 0x26FEB28 Offset: 0x26FEB28 VA: 0x26FEB28
	public int BitCount() { }

	// RVA: 0x26FEC30 Offset: 0x26FEC30 VA: 0x26FEC30
	public bool TestBit(uint bitNum) { }

	// RVA: 0x26FECA0 Offset: 0x26FECA0 VA: 0x26FECA0
	public bool TestBit(int bitNum) { }

	// RVA: 0x26FEDC4 Offset: 0x26FEDC4 VA: 0x26FEDC4
	public void SetBit(uint bitNum) { }

	// RVA: 0x26FEDCC Offset: 0x26FEDCC VA: 0x26FEDCC
	public void SetBit(uint bitNum, bool value) { }

	// RVA: 0x26FEE60 Offset: 0x26FEE60 VA: 0x26FEE60
	public int LowestSetBit() { }

	// RVA: 0x26FEEEC Offset: 0x26FEEEC VA: 0x26FEEEC
	public byte[] GetBytes() { }

	// RVA: 0x26FF070 Offset: 0x26FF070 VA: 0x26FF070
	public string ToString(uint radix) { }

	// RVA: 0x26FF0D0 Offset: 0x26FF0D0 VA: 0x26FF0D0
	public string ToString(uint radix, string characterSet) { }

	// RVA: 0x26FE3E4 Offset: 0x26FE3E4 VA: 0x26FE3E4
	private void Normalize() { }

	// RVA: 0x26FF4B4 Offset: 0x26FF4B4 VA: 0x26FF4B4
	public void Clear() { }

	// RVA: 0x26FF52C Offset: 0x26FF52C VA: 0x26FF52C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x26FF5C0 Offset: 0x26FF5C0 VA: 0x26FF5C0 Slot: 3
	public override string ToString() { }

	// RVA: 0x26FF5C8 Offset: 0x26FF5C8 VA: 0x26FF5C8 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x26FFAF4 Offset: 0x26FFAF4 VA: 0x26FFAF4
	public BigInteger ModInverse(BigInteger modulus) { }

	// RVA: 0x27002A4 Offset: 0x27002A4 VA: 0x27002A4
	public BigInteger ModPow(BigInteger exp, BigInteger n) { }

	// RVA: 0x270055C Offset: 0x270055C VA: 0x270055C
	public bool IsProbablePrime() { }

	// RVA: 0x2700880 Offset: 0x2700880 VA: 0x2700880
	public static BigInteger GeneratePseudoPrime(int bits) { }

	// RVA: 0x2700900 Offset: 0x2700900 VA: 0x2700900
	public void Incr2() { }

	// RVA: 0x27007AC Offset: 0x27007AC VA: 0x27007AC
	public static BigInteger op_Implicit(uint value) { }

	// RVA: 0x2700A38 Offset: 0x2700A38 VA: 0x2700A38
	public static BigInteger op_Implicit(int value) { }

	// RVA: 0x2700AE0 Offset: 0x2700AE0 VA: 0x2700AE0
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2700E9C Offset: 0x2700E9C VA: 0x2700E9C
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2700828 Offset: 0x2700828 VA: 0x2700828
	public static uint op_Modulus(BigInteger bi, uint ui) { }

	// RVA: 0x2701380 Offset: 0x2701380 VA: 0x2701380
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2701C90 Offset: 0x2701C90 VA: 0x2701C90
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2701CD4 Offset: 0x2701CD4 VA: 0x2701CD4
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x270200C Offset: 0x270200C VA: 0x270200C
	public static BigInteger op_Multiply(BigInteger bi, int i) { }

	// RVA: 0x2702284 Offset: 0x2702284 VA: 0x2702284
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal) { }

	// RVA: 0x2702548 Offset: 0x2702548 VA: 0x2702548
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal) { }

	// RVA: 0x26FEAA4 Offset: 0x26FEAA4 VA: 0x26FEAA4
	public static bool op_Equality(BigInteger bi1, uint ui) { }

	// RVA: 0x26FF430 Offset: 0x26FF430 VA: 0x26FF430
	public static bool op_Inequality(BigInteger bi1, uint ui) { }

	// RVA: 0x26FF758 Offset: 0x26FF758 VA: 0x26FF758
	public static bool op_Equality(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x270277C Offset: 0x270277C VA: 0x270277C
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x270284C Offset: 0x270284C VA: 0x270284C
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2702868 Offset: 0x2702868 VA: 0x2702868
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2702880 Offset: 0x2702880 VA: 0x2702880
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x270080C Offset: 0x270080C VA: 0x270080C
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2) { }
}

// Namespace: 
public enum BigInteger.Sign // TypeDefIndex: 115
{
	// Fields
	public int value__; // 0x0
	public const BigInteger.Sign Negative = -1;
	public const BigInteger.Sign Zero = 0;
	public const BigInteger.Sign Positive = 1;
}

// Namespace: 
internal sealed class BigInteger.ModulusRing // TypeDefIndex: 116
{
	// Fields
	private BigInteger mod; // 0x10
	private BigInteger constant; // 0x18

	// Methods

	// RVA: 0x2700328 Offset: 0x2700328 VA: 0x2700328
	public void .ctor(BigInteger modulus) { }

	// RVA: 0x27033F0 Offset: 0x27033F0 VA: 0x27033F0
	public void BarrettReduction(BigInteger x) { }

	// RVA: 0x2703734 Offset: 0x2703734 VA: 0x2703734
	public BigInteger Multiply(BigInteger a, BigInteger b) { }

	// RVA: 0x27031C8 Offset: 0x27031C8 VA: 0x27031C8
	public BigInteger Difference(BigInteger a, BigInteger b) { }

	// RVA: 0x2700430 Offset: 0x2700430 VA: 0x2700430
	public BigInteger Pow(BigInteger a, BigInteger k) { }

	// RVA: 0x2703904 Offset: 0x2703904 VA: 0x2703904
	public BigInteger Pow(uint b, BigInteger exp) { }
}

// Namespace: 
private sealed class BigInteger.Kernel // TypeDefIndex: 117
{
	// Methods

	// RVA: 0x2700BCC Offset: 0x2700BCC VA: 0x2700BCC
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2701024 Offset: 0x2701024 VA: 0x2701024
	public static BigInteger Subtract(BigInteger big, BigInteger small) { }

	// RVA: 0x270289C Offset: 0x270289C VA: 0x270289C
	public static void MinusEq(BigInteger big, BigInteger small) { }

	// RVA: 0x2702A78 Offset: 0x2702A78 VA: 0x2702A78
	public static void PlusEq(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x26FF828 Offset: 0x26FF828 VA: 0x26FF828
	public static BigInteger.Sign Compare(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x26FF33C Offset: 0x26FF33C VA: 0x26FF33C
	public static uint SingleByteDivideInPlace(BigInteger n, uint d) { }

	// RVA: 0x27012D0 Offset: 0x27012D0 VA: 0x27012D0
	public static uint DwordMod(BigInteger n, uint d) { }

	// RVA: 0x2702D54 Offset: 0x2702D54 VA: 0x2702D54
	public static BigInteger[] DwordDivMod(BigInteger n, uint d) { }

	// RVA: 0x27013C8 Offset: 0x27013C8 VA: 0x27013C8
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2) { }

	// RVA: 0x2702288 Offset: 0x2702288 VA: 0x2702288
	public static BigInteger LeftShift(BigInteger bi, int n) { }

	// RVA: 0x270254C Offset: 0x270254C VA: 0x270254C
	public static BigInteger RightShift(BigInteger bi, int n) { }

	// RVA: 0x2702118 Offset: 0x2702118 VA: 0x2702118
	public static BigInteger MultiplyByDword(BigInteger n, uint f) { }

	// RVA: 0x2701F0C Offset: 0x2701F0C VA: 0x2701F0C
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset) { }

	// RVA: 0x2702FAC Offset: 0x2702FAC VA: 0x2702FAC
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod) { }

	// RVA: 0x2703100 Offset: 0x2703100 VA: 0x2703100
	public static uint modInverse(BigInteger bi, uint modulus) { }

	// RVA: 0x26FFAF8 Offset: 0x26FFAF8 VA: 0x26FFAF8
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus) { }
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeBase // TypeDefIndex: 118
{
	// Fields
	private byte[] fileblock; // 0x10
	private FileStream fs; // 0x18
	private int blockNo; // 0x20
	private int blockLength; // 0x24
	private int peOffset; // 0x28
	private int dirSecurityOffset; // 0x2C
	private int dirSecuritySize; // 0x30
	private int coffSymbolTableOffset; // 0x34

	// Properties
	internal int PEOffset { get; }

	// Methods

	// RVA: 0x2706EE0 Offset: 0x2706EE0 VA: 0x2706EE0
	public void .ctor() { }

	// RVA: 0x2706F44 Offset: 0x2706F44 VA: 0x2706F44
	internal int get_PEOffset() { }

	// RVA: 0x2707208 Offset: 0x2707208 VA: 0x2707208
	internal void Open(string filename) { }

	// RVA: 0x27072A0 Offset: 0x27072A0 VA: 0x27072A0
	internal void Close() { }

	// RVA: 0x2706F78 Offset: 0x2706F78 VA: 0x2706F78
	internal bool ReadFirstBlock() { }

	// RVA: 0x2707380 Offset: 0x2707380 VA: 0x2707380
	internal byte[] GetSecurityEntry() { }

	// RVA: 0x270747C Offset: 0x270747C VA: 0x270747C
	internal byte[] GetHash(HashAlgorithm hash) { }
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeDeformatter : AuthenticodeBase // TypeDefIndex: 119
{
	// Fields
	private string filename; // 0x38
	private byte[] hash; // 0x40
	private X509CertificateCollection coll; // 0x48
	private ASN1 signedHash; // 0x50
	private DateTime timestamp; // 0x58
	private X509Certificate signingCertificate; // 0x68
	private int reason; // 0x70
	private bool trustedRoot; // 0x74
	private bool trustedTimestampRoot; // 0x75
	private byte[] entry; // 0x78
	private X509Chain signerChain; // 0x80
	private X509Chain timestampChain; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xBCB434 Offset: 0xBCB434 VA: 0xBCB434
	private static Dictionary<string, int> <>f__switch$map5; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBCB444 Offset: 0xBCB444 VA: 0xBCB444
	private static Dictionary<string, int> <>f__switch$map6; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBCB454 Offset: 0xBCB454 VA: 0xBCB454
	private static Dictionary<string, int> <>f__switch$map7; // 0x10

	// Properties
	public string FileName { set; }
	public X509Certificate SigningCertificate { get; }

	// Methods

	// RVA: 0x2707B08 Offset: 0x2707B08 VA: 0x2707B08
	public void .ctor() { }

	// RVA: 0x2707B98 Offset: 0x2707B98 VA: 0x2707B98
	public void .ctor(string fileName) { }

	// RVA: 0x2707BC4 Offset: 0x2707BC4 VA: 0x2707BC4
	public void set_FileName(string value) { }

	// RVA: 0x2708164 Offset: 0x2708164 VA: 0x2708164
	public X509Certificate get_SigningCertificate() { }

	// RVA: 0x2707D9C Offset: 0x2707D9C VA: 0x2707D9C
	private bool CheckSignature(string fileName) { }

	// RVA: 0x2708FEC Offset: 0x2708FEC VA: 0x2708FEC
	private bool CompareIssuerSerial(string issuer, byte[] serial, X509Certificate x509) { }

	// RVA: 0x270816C Offset: 0x270816C VA: 0x270816C
	private bool VerifySignature(PKCS7.SignedData sd, byte[] calculatedMessageDigest, HashAlgorithm ha) { }

	// RVA: 0x2709178 Offset: 0x2709178 VA: 0x2709178
	private bool VerifyCounterSignature(PKCS7.SignerInfo cs, byte[] signature) { }

	// RVA: 0x2707CD8 Offset: 0x2707CD8 VA: 0x2707CD8
	private void Reset() { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class CryptoConvert // TypeDefIndex: 120
{
	// Methods

	// RVA: 0x270ACE8 Offset: 0x270ACE8 VA: 0x270ACE8
	private void .ctor() { }

	// RVA: 0x270ACF0 Offset: 0x270ACF0 VA: 0x270ACF0
	private static int ToInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x270ADE4 Offset: 0x270ADE4 VA: 0x270ADE4
	private static uint ToUInt32LE(byte[] bytes, int offset) { }

	// RVA: 0x270AED8 Offset: 0x270AED8 VA: 0x270AED8
	private static byte[] GetBytesLE(int val) { }

	// RVA: 0x270AFC4 Offset: 0x270AFC4 VA: 0x270AFC4
	private static byte[] Trim(byte[] array) { }

	// RVA: 0x270B0A4 Offset: 0x270B0A4 VA: 0x270B0A4
	public static RSA FromCapiPrivateKeyBlob(byte[] blob) { }

	// RVA: 0x270B0AC Offset: 0x270B0AC VA: 0x270B0AC
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x270B66C Offset: 0x270B66C VA: 0x270B66C
	public static DSA FromCapiPrivateKeyBlobDSA(byte[] blob) { }

	// RVA: 0x270B674 Offset: 0x270B674 VA: 0x270B674
	public static DSA FromCapiPrivateKeyBlobDSA(byte[] blob, int offset) { }

	// RVA: 0x270BB20 Offset: 0x270BB20 VA: 0x270BB20
	public static byte[] ToCapiPrivateKeyBlob(RSA rsa) { }

	// RVA: 0x270C084 Offset: 0x270C084 VA: 0x270C084
	public static byte[] ToCapiPrivateKeyBlob(DSA dsa) { }

	// RVA: 0x270C478 Offset: 0x270C478 VA: 0x270C478
	public static RSA FromCapiPublicKeyBlob(byte[] blob) { }

	// RVA: 0x270C480 Offset: 0x270C480 VA: 0x270C480
	public static RSA FromCapiPublicKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x270C930 Offset: 0x270C930 VA: 0x270C930
	public static DSA FromCapiPublicKeyBlobDSA(byte[] blob) { }

	// RVA: 0x270C938 Offset: 0x270C938 VA: 0x270C938
	public static DSA FromCapiPublicKeyBlobDSA(byte[] blob, int offset) { }

	// RVA: 0x270CDF4 Offset: 0x270CDF4 VA: 0x270CDF4
	public static byte[] ToCapiPublicKeyBlob(RSA rsa) { }

	// RVA: 0x270D180 Offset: 0x270D180 VA: 0x270D180
	public static byte[] ToCapiPublicKeyBlob(DSA dsa) { }

	// RVA: 0x270D574 Offset: 0x270D574 VA: 0x270D574
	public static RSA FromCapiKeyBlob(byte[] blob) { }

	// RVA: 0x270D57C Offset: 0x270D57C VA: 0x270D57C
	public static RSA FromCapiKeyBlob(byte[] blob, int offset) { }

	// RVA: 0x270D700 Offset: 0x270D700 VA: 0x270D700
	public static DSA FromCapiKeyBlobDSA(byte[] blob) { }

	// RVA: 0x270D708 Offset: 0x270D708 VA: 0x270D708
	public static DSA FromCapiKeyBlobDSA(byte[] blob, int offset) { }

	// RVA: 0x270D854 Offset: 0x270D854 VA: 0x270D854
	public static byte[] ToCapiKeyBlob(AsymmetricAlgorithm keypair, bool includePrivateKey) { }

	// RVA: 0x270D96C Offset: 0x270D96C VA: 0x270D96C
	public static byte[] ToCapiKeyBlob(RSA rsa, bool includePrivateKey) { }

	// RVA: 0x270DA18 Offset: 0x270DA18 VA: 0x270DA18
	public static byte[] ToCapiKeyBlob(DSA dsa, bool includePrivateKey) { }

	// RVA: 0x270DAC4 Offset: 0x270DAC4 VA: 0x270DAC4
	public static string ToHex(byte[] input) { }

	// RVA: 0x270DC14 Offset: 0x270DC14 VA: 0x270DC14
	private static byte FromHexChar(char c) { }

	// RVA: 0x270DCE4 Offset: 0x270DCE4 VA: 0x270DCE4
	public static byte[] FromHex(string hex) { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class KeyBuilder // TypeDefIndex: 121
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods

	// RVA: 0x25C6204 Offset: 0x25C6204 VA: 0x25C6204
	private void .ctor() { }

	// RVA: 0x25C620C Offset: 0x25C620C VA: 0x25C620C
	private static RandomNumberGenerator get_Rng() { }

	// RVA: 0x25C627C Offset: 0x25C627C VA: 0x25C627C
	public static byte[] Key(int size) { }

	// RVA: 0x25C62FC Offset: 0x25C62FC VA: 0x25C62FC
	public static byte[] IV(int size) { }
}

// Namespace: Mono.Security.Cryptography
internal class BlockProcessor // TypeDefIndex: 122
{
	// Fields
	private ICryptoTransform transform; // 0x10
	private byte[] block; // 0x18
	private int blockSize; // 0x20
	private int blockCount; // 0x24

	// Methods

	// RVA: 0x270A780 Offset: 0x270A780 VA: 0x270A780
	public void .ctor(ICryptoTransform transform) { }

	// RVA: 0x270A850 Offset: 0x270A850 VA: 0x270A850
	public void .ctor(ICryptoTransform transform, int blockSize) { }

	// RVA: 0x270A8CC Offset: 0x270A8CC VA: 0x270A8CC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x270A950 Offset: 0x270A950 VA: 0x270A950
	public void Initialize() { }

	// RVA: 0x270A984 Offset: 0x270A984 VA: 0x270A984
	public void Core(byte[] rgb) { }

	// RVA: 0x270A9C0 Offset: 0x270A9C0 VA: 0x270A9C0
	public void Core(byte[] rgb, int ib, int cb) { }

	// RVA: 0x270AC18 Offset: 0x270AC18 VA: 0x270AC18
	public byte[] Final() { }
}

// Namespace: Mono.Security.Cryptography
internal class DSAManaged : DSA // TypeDefIndex: 123
{
	// Fields
	private const int defaultKeySize = 1024;
	private bool keypairGenerated; // 0x20
	private bool m_disposed; // 0x21
	private BigInteger p; // 0x28
	private BigInteger q; // 0x30
	private BigInteger g; // 0x38
	private BigInteger x; // 0x40
	private BigInteger y; // 0x48
	private BigInteger j; // 0x50
	private BigInteger seed; // 0x58
	private int counter; // 0x60
	private bool j_missing; // 0x64
	private RandomNumberGenerator rng; // 0x68
	private DSAManaged.KeyGeneratedEventHandler KeyGenerated; // 0x70

	// Properties
	private RandomNumberGenerator Random { get; }
	public override int KeySize { get; }
	public override string KeyExchangeAlgorithm { get; }
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }

	// Methods

	// RVA: 0x25C37A0 Offset: 0x25C37A0 VA: 0x25C37A0
	public void .ctor() { }

	// RVA: 0x25C37A8 Offset: 0x25C37A8 VA: 0x25C37A8
	public void .ctor(int dwKeySize) { }

	// RVA: 0x25C38A0 Offset: 0x25C38A0 VA: 0x25C38A0
	public void add_KeyGenerated(DSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x25C3964 Offset: 0x25C3964 VA: 0x25C3964
	public void remove_KeyGenerated(DSAManaged.KeyGeneratedEventHandler value) { }

	// RVA: 0x25C3A28 Offset: 0x25C3A28 VA: 0x25C3A28 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25C3AA8 Offset: 0x25C3AA8 VA: 0x25C3AA8
	private void Generate() { }

	// RVA: 0x25C4224 Offset: 0x25C4224 VA: 0x25C4224
	private void GenerateKeyPair() { }

	// RVA: 0x25C4710 Offset: 0x25C4710 VA: 0x25C4710
	private void add(byte[] a, byte[] b, int value) { }

	// RVA: 0x25C3B08 Offset: 0x25C3B08 VA: 0x25C3B08
	private void GenerateParams(int keyLength) { }

	// RVA: 0x25C483C Offset: 0x25C483C VA: 0x25C483C
	private RandomNumberGenerator get_Random() { }

	// RVA: 0x25C4868 Offset: 0x25C4868 VA: 0x25C4868 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x25C48A8 Offset: 0x25C48A8 VA: 0x25C48A8 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x25C48B0 Offset: 0x25C48B0 VA: 0x25C48B0
	public bool get_PublicOnly() { }

	// RVA: 0x25C4938 Offset: 0x25C4938 VA: 0x25C4938 Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x25C4980 Offset: 0x25C4980 VA: 0x25C4980
	private byte[] NormalizeArray(byte[] array) { }

	// RVA: 0x25C4A38 Offset: 0x25C4A38 VA: 0x25C4A38 Slot: 14
	public override DSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x25C4D30 Offset: 0x25C4D30 VA: 0x25C4D30 Slot: 15
	public override void ImportParameters(DSAParameters parameters) { }

	// RVA: 0x25C5010 Offset: 0x25C5010 VA: 0x25C5010 Slot: 13
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x25C53D8 Offset: 0x25C53D8 VA: 0x25C53D8 Slot: 16
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x25C58C8 Offset: 0x25C58C8 VA: 0x25C58C8 Slot: 10
	protected override void Dispose(bool disposing) { }
}

// Namespace: 
public sealed class DSAManaged.KeyGeneratedEventHandler : MulticastDelegate // TypeDefIndex: 124
{
	// Methods

	// RVA: 0x25C5B60 Offset: 0x25C5B60 VA: 0x25C5B60
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x25C4350 Offset: 0x25C4350 VA: 0x25C4350 Slot: 11
	public virtual void Invoke(object sender, EventArgs e) { }

	// RVA: 0x25C5B70 Offset: 0x25C5B70 VA: 0x25C5B70 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x25C5BA0 Offset: 0x25C5BA0 VA: 0x25C5BA0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Cryptography
internal class HMACAlgorithm // TypeDefIndex: 125
{
	// Fields
	private byte[] key; // 0x10
	private byte[] hash; // 0x18
	private HashAlgorithm algo; // 0x20
	private string hashName; // 0x28
	private BlockProcessor block; // 0x30

	// Properties
	public HashAlgorithm Algo { get; }
	public string HashName { get; set; }
	public byte[] Key { get; set; }

	// Methods

	// RVA: 0x25C5BAC Offset: 0x25C5BAC VA: 0x25C5BAC
	public void .ctor(string algoName) { }

	// RVA: 0x25C5C64 Offset: 0x25C5C64 VA: 0x25C5C64 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x25C5BDC Offset: 0x25C5BDC VA: 0x25C5BDC
	private void CreateHash(string algoName) { }

	// RVA: 0x25C5CEC Offset: 0x25C5CEC VA: 0x25C5CEC
	public void Dispose() { }

	// RVA: 0x25C5D08 Offset: 0x25C5D08 VA: 0x25C5D08
	public HashAlgorithm get_Algo() { }

	// RVA: 0x25C5D10 Offset: 0x25C5D10 VA: 0x25C5D10
	public string get_HashName() { }

	// RVA: 0x25C5D18 Offset: 0x25C5D18 VA: 0x25C5D18
	public void set_HashName(string value) { }

	// RVA: 0x25C5D1C Offset: 0x25C5D1C VA: 0x25C5D1C
	public byte[] get_Key() { }

	// RVA: 0x25C5D24 Offset: 0x25C5D24 VA: 0x25C5D24
	public void set_Key(byte[] value) { }

	// RVA: 0x25C5E30 Offset: 0x25C5E30 VA: 0x25C5E30
	public void Initialize() { }

	// RVA: 0x25C5EE4 Offset: 0x25C5EE4 VA: 0x25C5EE4
	private byte[] KeySetup(byte[] key, byte padding) { }

	// RVA: 0x25C6030 Offset: 0x25C6030 VA: 0x25C6030
	public void Core(byte[] rgb, int ib, int cb) { }

	// RVA: 0x25C6080 Offset: 0x25C6080 VA: 0x25C6080
	public byte[] Final() { }
}

// Namespace: Mono.Security.Cryptography
internal class KeyPairPersistence // TypeDefIndex: 126
{
	// Fields
	private static bool _userPathExists; // 0x0
	private static string _userPath; // 0x8
	private static bool _machinePathExists; // 0x10
	private static string _machinePath; // 0x18
	private CspParameters _params; // 0x10
	private string _keyvalue; // 0x18
	private string _filename; // 0x20
	private string _container; // 0x28
	private static object lockobj; // 0x20

	// Properties
	public string Filename { get; }
	public string KeyValue { get; set; }
	public CspParameters Parameters { get; }
	private static string UserPath { get; }
	private static string MachinePath { get; }
	private bool CanChange { get; }
	private bool UseDefaultKeyContainer { get; }
	private bool UseMachineKeyStore { get; }
	private string ContainerName { get; }

	// Methods

	// RVA: 0x25C637C Offset: 0x25C637C VA: 0x25C637C
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x25C6384 Offset: 0x25C6384 VA: 0x25C6384
	public void .ctor(CspParameters parameters, string keyPair) { }

	// RVA: 0x25C6550 Offset: 0x25C6550 VA: 0x25C6550
	private static void .cctor() { }

	// RVA: 0x25C65D4 Offset: 0x25C65D4 VA: 0x25C65D4
	public string get_Filename() { }

	// RVA: 0x25C7398 Offset: 0x25C7398 VA: 0x25C7398
	public string get_KeyValue() { }

	// RVA: 0x25C73A0 Offset: 0x25C73A0 VA: 0x25C73A0
	public void set_KeyValue(string value) { }

	// RVA: 0x25C73C4 Offset: 0x25C73C4 VA: 0x25C73C4
	public CspParameters get_Parameters() { }

	// RVA: 0x25C73CC Offset: 0x25C73CC VA: 0x25C73CC
	public bool Load() { }

	// RVA: 0x25C76F4 Offset: 0x25C76F4 VA: 0x25C76F4
	public void Save() { }

	// RVA: 0x25C7D18 Offset: 0x25C7D18 VA: 0x25C7D18
	public void Remove() { }

	// RVA: 0x25C6EFC Offset: 0x25C6EFC VA: 0x25C6EFC
	private static string get_UserPath() { }

	// RVA: 0x25C6A60 Offset: 0x25C6A60 VA: 0x25C6A60
	private static string get_MachinePath() { }

	// RVA: 0x25C7E88 Offset: 0x25C7E88 VA: 0x25C7E88
	internal static bool _CanSecure(string root) { }

	// RVA: 0x25C7E8C Offset: 0x25C7E8C VA: 0x25C7E8C
	internal static bool _ProtectUser(string path) { }

	// RVA: 0x25C7E90 Offset: 0x25C7E90 VA: 0x25C7E90
	internal static bool _ProtectMachine(string path) { }

	// RVA: 0x25C7E94 Offset: 0x25C7E94 VA: 0x25C7E94
	internal static bool _IsUserProtected(string path) { }

	// RVA: 0x25C7E98 Offset: 0x25C7E98 VA: 0x25C7E98
	internal static bool _IsMachineProtected(string path) { }

	// RVA: 0x25C7E9C Offset: 0x25C7E9C VA: 0x25C7E9C
	private static bool CanSecure(string path) { }

	// RVA: 0x25C7C80 Offset: 0x25C7C80 VA: 0x25C7C80
	private static bool ProtectUser(string path) { }

	// RVA: 0x25C7BE8 Offset: 0x25C7BE8 VA: 0x25C7BE8
	private static bool ProtectMachine(string path) { }

	// RVA: 0x25C7D58 Offset: 0x25C7D58 VA: 0x25C7D58
	private static bool IsUserProtected(string path) { }

	// RVA: 0x25C7DF0 Offset: 0x25C7DF0 VA: 0x25C7DF0
	private static bool IsMachineProtected(string path) { }

	// RVA: 0x25C73B4 Offset: 0x25C73B4 VA: 0x25C73B4
	private bool get_CanChange() { }

	// RVA: 0x25C7F7C Offset: 0x25C7F7C VA: 0x25C7F7C
	private bool get_UseDefaultKeyContainer() { }

	// RVA: 0x25C6A28 Offset: 0x25C6A28 VA: 0x25C6A28
	private bool get_UseMachineKeyStore() { }

	// RVA: 0x25C6888 Offset: 0x25C6888 VA: 0x25C6888
	private string get_ContainerName() { }

	// RVA: 0x25C6434 Offset: 0x25C6434 VA: 0x25C6434
	private CspParameters Copy(CspParameters p) { }

	// RVA: 0x25C752C Offset: 0x25C752C VA: 0x25C752C
	private void FromXml(string xml) { }

	// RVA: 0x25C7938 Offset: 0x25C7938 VA: 0x25C7938
	private string ToXml() { }
}

// Namespace: Mono.Security.Cryptography
internal class MACAlgorithm // TypeDefIndex: 127
{
	// Fields
	private SymmetricAlgorithm algo; // 0x10
	private ICryptoTransform enc; // 0x18
	private byte[] block; // 0x20
	private int blockSize; // 0x28
	private int blockCount; // 0x2C

	// Methods

	// RVA: 0x25C7FB4 Offset: 0x25C7FB4 VA: 0x25C7FB4
	public void .ctor(SymmetricAlgorithm algorithm) { }

	// RVA: 0x25C80A4 Offset: 0x25C80A4 VA: 0x25C80A4
	public void Initialize(byte[] key) { }

	// RVA: 0x25C8138 Offset: 0x25C8138 VA: 0x25C8138
	public void Core(byte[] rgb, int ib, int cb) { }

	// RVA: 0x25C8370 Offset: 0x25C8370 VA: 0x25C8370
	public byte[] Final() { }
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS1 // TypeDefIndex: 128
{
	// Fields
	private static byte[] emptySHA1; // 0x0
	private static byte[] emptySHA256; // 0x8
	private static byte[] emptySHA384; // 0x10
	private static byte[] emptySHA512; // 0x18

	// Methods

	// RVA: 0x25C8654 Offset: 0x25C8654 VA: 0x25C8654
	private void .ctor() { }

	// RVA: 0x25C865C Offset: 0x25C865C VA: 0x25C865C
	private static void .cctor() { }

	// RVA: 0x25C8770 Offset: 0x25C8770 VA: 0x25C8770
	private static bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x25C883C Offset: 0x25C883C VA: 0x25C883C
	private static byte[] xor(byte[] array1, byte[] array2) { }

	// RVA: 0x25C895C Offset: 0x25C895C VA: 0x25C895C
	private static byte[] GetEmptyHash(HashAlgorithm hash) { }

	// RVA: 0x25C8B34 Offset: 0x25C8B34 VA: 0x25C8B34
	public static byte[] I2OSP(int x, int size) { }

	// RVA: 0x25C8BD4 Offset: 0x25C8BD4 VA: 0x25C8BD4
	public static byte[] I2OSP(byte[] x, int size) { }

	// RVA: 0x25C8C80 Offset: 0x25C8C80 VA: 0x25C8C80
	public static byte[] OS2IP(byte[] x) { }

	// RVA: 0x25C8D68 Offset: 0x25C8D68 VA: 0x25C8D68
	public static byte[] RSAEP(RSA rsa, byte[] m) { }

	// RVA: 0x25C8DA0 Offset: 0x25C8DA0 VA: 0x25C8DA0
	public static byte[] RSADP(RSA rsa, byte[] c) { }

	// RVA: 0x25C8DDC Offset: 0x25C8DDC VA: 0x25C8DDC
	public static byte[] RSASP1(RSA rsa, byte[] m) { }

	// RVA: 0x25C8E18 Offset: 0x25C8E18 VA: 0x25C8E18
	public static byte[] RSAVP1(RSA rsa, byte[] s) { }

	// RVA: 0x25C8E50 Offset: 0x25C8E50 VA: 0x25C8E50
	public static byte[] Encrypt_OAEP(RSA rsa, HashAlgorithm hash, RandomNumberGenerator rng, byte[] M) { }

	// RVA: 0x25C93E4 Offset: 0x25C93E4 VA: 0x25C93E4
	public static byte[] Decrypt_OAEP(RSA rsa, HashAlgorithm hash, byte[] C) { }

	// RVA: 0x25C976C Offset: 0x25C976C VA: 0x25C976C
	public static byte[] Encrypt_v15(RSA rsa, RandomNumberGenerator rng, byte[] M) { }

	// RVA: 0x25C9960 Offset: 0x25C9960 VA: 0x25C9960
	public static byte[] Decrypt_v15(RSA rsa, byte[] C) { }

	// RVA: 0x25C9B88 Offset: 0x25C9B88 VA: 0x25C9B88
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue) { }

	// RVA: 0x25CA028 Offset: 0x25CA028 VA: 0x25CA028
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature) { }

	// RVA: 0x25CA0B8 Offset: 0x25CA0B8 VA: 0x25CA0B8
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding) { }

	// RVA: 0x25C9C4C Offset: 0x25C9C4C VA: 0x25C9C4C
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength) { }

	// RVA: 0x25C91D0 Offset: 0x25C91D0 VA: 0x25C91D0
	public static byte[] MGF1(HashAlgorithm hash, byte[] mgfSeed, int maskLen) { }
}
