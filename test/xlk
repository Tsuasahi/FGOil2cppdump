	public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A06FC Offset: 0x21A06FC VA: 0x21A06FC
	public static bool Eq(uint[] x, uint[] y) { }

	// RVA: 0x21A07AC Offset: 0x21A07AC VA: 0x21A07AC
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x21A0914 Offset: 0x21A0914 VA: 0x21A0914
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x21A09C4 Offset: 0x21A09C4 VA: 0x21A09C4
	public static bool Gte(uint[] x, uint[] y) { }

	// RVA: 0x21A01D0 Offset: 0x21A01D0 VA: 0x21A01D0
	public static bool Gte(uint[] x, int xOff, uint[] y, int yOff) { }

	// RVA: 0x21A0A7C Offset: 0x21A0A7C VA: 0x21A0A7C
	public static bool IsOne(uint[] x) { }

	// RVA: 0x21A0B14 Offset: 0x21A0B14 VA: 0x21A0B14
	public static bool IsZero(uint[] x) { }

	// RVA: 0x21A0B88 Offset: 0x21A0B88 VA: 0x21A0B88
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x21A10E8 Offset: 0x21A10E8 VA: 0x21A10E8
	public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x21A1794 Offset: 0x21A1794 VA: 0x21A1794
	public static uint MulAddTo(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x21A1BCC Offset: 0x21A1BCC VA: 0x21A1BCC
	public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x21A20F8 Offset: 0x21A20F8 VA: 0x21A20F8
	public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A2598 Offset: 0x21A2598 VA: 0x21A2598
	public static uint MulByWord(uint x, uint[] z) { }

	// RVA: 0x21A27BC Offset: 0x21A27BC VA: 0x21A27BC
	public static uint MulByWordAddTo(uint x, uint[] y, uint[] z) { }

	// RVA: 0x21A2B0C Offset: 0x21A2B0C VA: 0x21A2B0C
	public static uint MulWordAddTo(uint x, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A2F1C Offset: 0x21A2F1C VA: 0x21A2F1C
	public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x21A3100 Offset: 0x21A3100 VA: 0x21A3100
	public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x21A3274 Offset: 0x21A3274 VA: 0x21A3274
	public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x21A33F4 Offset: 0x21A33F4 VA: 0x21A33F4
	public static uint MulWord(uint x, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x21A34C0 Offset: 0x21A34C0 VA: 0x21A34C0
	public static void Square(uint[] x, uint[] zz) { }

	// RVA: 0x21A3BCC Offset: 0x21A3BCC VA: 0x21A3BCC
	public static void Square(uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x21A4508 Offset: 0x21A4508 VA: 0x21A4508
	public static int Sub(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x21A02AC Offset: 0x21A02AC VA: 0x21A02AC
	public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A4840 Offset: 0x21A4840 VA: 0x21A4840
	public static int SubBothFrom(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x21A4C74 Offset: 0x21A4C74 VA: 0x21A4C74
	public static int SubFrom(uint[] x, uint[] z) { }

	// RVA: 0x21A4F98 Offset: 0x21A4F98 VA: 0x21A4F98
	public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x21A5388 Offset: 0x21A5388 VA: 0x21A5388
	public static BigInteger ToBigInteger(uint[] x) { }

	// RVA: 0x21A5474 Offset: 0x21A5474 VA: 0x21A5474
	public static void Zero(uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat256 // TypeDefIndex: 5165
{
	// Fields
	private const ulong M = 4294967295;

	// Methods

	// RVA: 0x21A5574 Offset: 0x21A5574 VA: 0x21A5574
	protected void .ctor() { }

	// RVA: 0x21A557C Offset: 0x21A557C VA: 0x21A557C
	public static uint Add(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x21A5920 Offset: 0x21A5920 VA: 0x21A5920
	public static uint Add(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A5E00 Offset: 0x21A5E00 VA: 0x21A5E00
	public static uint AddBothTo(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x21A62C0 Offset: 0x21A62C0 VA: 0x21A62C0
	public static uint AddBothTo(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A68E8 Offset: 0x21A68E8 VA: 0x21A68E8
	public static uint AddTo(uint[] x, uint[] z) { }

	// RVA: 0x21A6C74 Offset: 0x21A6C74 VA: 0x21A6C74
	public static uint AddTo(uint[] x, int xOff, uint[] z, int zOff, uint cIn) { }

	// RVA: 0x21A70E8 Offset: 0x21A70E8 VA: 0x21A70E8
	public static uint AddToEachOther(uint[] u, int uOff, uint[] v, int vOff) { }

	// RVA: 0x21A7658 Offset: 0x21A7658 VA: 0x21A7658
	public static void Copy(uint[] x, uint[] z) { }

	// RVA: 0x21A788C Offset: 0x21A788C VA: 0x21A788C
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x21A79C0 Offset: 0x21A79C0 VA: 0x21A79C0
	public static uint[] Create() { }

	// RVA: 0x21A7A0C Offset: 0x21A7A0C VA: 0x21A7A0C
	public static ulong[] Create64() { }

	// RVA: 0x21A7A58 Offset: 0x21A7A58 VA: 0x21A7A58
	public static uint[] CreateExt() { }

	// RVA: 0x21A7AA4 Offset: 0x21A7AA4 VA: 0x21A7AA4
	public static ulong[] CreateExt64() { }

	// RVA: 0x21A7AF0 Offset: 0x21A7AF0 VA: 0x21A7AF0
	public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21A8134 Offset: 0x21A8134 VA: 0x21A8134
	public static bool Eq(uint[] x, uint[] y) { }

	// RVA: 0x21A81E4 Offset: 0x21A81E4 VA: 0x21A81E4
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x21A8294 Offset: 0x21A8294 VA: 0x21A8294
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x21A83FC Offset: 0x21A83FC VA: 0x21A83FC
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x21A8564 Offset: 0x21A8564 VA: 0x21A8564
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x21A8610 Offset: 0x21A8610 VA: 0x21A8610
	public static bool Gte(uint[] x, uint[] y) { }

	// RVA: 0x21A7B78 Offset: 0x21A7B78 VA: 0x21A7B78
	public static bool Gte(uint[] x, int xOff, uint[] y, int yOff) { }

	// RVA: 0x21A86C8 Offset: 0x21A86C8 VA: 0x21A86C8
	public static bool IsOne(uint[] x) { }

	// RVA: 0x21A8760 Offset: 0x21A8760 VA: 0x21A8760
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x21A87F8 Offset: 0x21A87F8 VA: 0x21A87F8
	public static bool IsZero(uint[] x) { }

	// RVA: 0x21A886C Offset: 0x21A886C VA: 0x21A886C
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x21A88E0 Offset: 0x21A88E0 VA: 0x21A88E0
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x21A8EE4 Offset: 0x21A8EE4 VA: 0x21A8EE4
	public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x21A9658 Offset: 0x21A9658 VA: 0x21A9658
	public static uint MulAddTo(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x21A9B08 Offset: 0x21A9B08 VA: 0x21A9B08
	public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x21AA0C8 Offset: 0x21AA0C8 VA: 0x21AA0C8
	public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21AA600 Offset: 0x21AA600 VA: 0x21AA600
	public static uint MulByWord(uint x, uint[] z) { }

	// RVA: 0x21AA86C Offset: 0x21AA86C VA: 0x21AA86C
	public static uint MulByWordAddTo(uint x, uint[] y, uint[] z) { }

	// RVA: 0x21AAC2C Offset: 0x21AAC2C VA: 0x21AAC2C
	public static uint MulWordAddTo(uint x, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21AB0C4 Offset: 0x21AB0C4 VA: 0x21AB0C4
	public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x21AB2A8 Offset: 0x21AB2A8 VA: 0x21AB2A8
	public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x21AB41C Offset: 0x21AB41C VA: 0x21AB41C
	public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x21AB59C Offset: 0x21AB59C VA: 0x21AB59C
	public static uint MulWord(uint x, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x21AB668 Offset: 0x21AB668 VA: 0x21AB668
	public static void Square(uint[] x, uint[] zz) { }

	// RVA: 0x21ABE94 Offset: 0x21ABE94 VA: 0x21ABE94
	public static void Square(uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x21AC980 Offset: 0x21AC980 VA: 0x21AC980
	public static int Sub(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x21A7C54 Offset: 0x21A7C54 VA: 0x21A7C54
	public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x21ACD24 Offset: 0x21ACD24 VA: 0x21ACD24
	public static int SubBothFrom(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x21AD1E8 Offset: 0x21AD1E8 VA: 0x21AD1E8
	public static int SubFrom(uint[] x, uint[] z) { }

	// RVA: 0x21AD578 Offset: 0x21AD578 VA: 0x21AD578
	public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x21AD9EC Offset: 0x21AD9EC VA: 0x21AD9EC
	public static BigInteger ToBigInteger(uint[] x) { }

	// RVA: 0x21ADAD8 Offset: 0x21ADAD8 VA: 0x21ADAD8
	public static BigInteger ToBigInteger64(ulong[] x) { }

	// RVA: 0x21ADBC4 Offset: 0x21ADBC4 VA: 0x21ADBC4
	public static void Zero(uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat320 // TypeDefIndex: 5166
{
	// Methods

	// RVA: 0x21ADCE4 Offset: 0x21ADCE4 VA: 0x21ADCE4
	protected void .ctor() { }

	// RVA: 0x21ADCEC Offset: 0x21ADCEC VA: 0x21ADCEC
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x21ADE60 Offset: 0x21ADE60 VA: 0x21ADE60
	public static ulong[] Create64() { }

	// RVA: 0x21ADEAC Offset: 0x21ADEAC VA: 0x21ADEAC
	public static ulong[] CreateExt64() { }

	// RVA: 0x21ADEF8 Offset: 0x21ADEF8 VA: 0x21ADEF8
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x21ADFA8 Offset: 0x21ADFA8 VA: 0x21ADFA8
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x21AE110 Offset: 0x21AE110 VA: 0x21AE110
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x21AE1A8 Offset: 0x21AE1A8 VA: 0x21AE1A8
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x21AE21C Offset: 0x21AE21C VA: 0x21AE21C
	public static BigInteger ToBigInteger64(ulong[] x) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat384 // TypeDefIndex: 5167
{
	// Methods

	// RVA: 0x21AE308 Offset: 0x21AE308 VA: 0x21AE308
	protected void .ctor() { }

	// RVA: 0x21AE310 Offset: 0x21AE310 VA: 0x21AE310
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x21AE480 Offset: 0x21AE480 VA: 0x21AE480
	public static void Square(uint[] x, uint[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat448 // TypeDefIndex: 5168
{
	// Methods

	// RVA: 0x21AE598 Offset: 0x21AE598 VA: 0x21AE598
	protected void .ctor() { }

	// RVA: 0x21AE5A0 Offset: 0x21AE5A0 VA: 0x21AE5A0
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x21AE794 Offset: 0x21AE794 VA: 0x21AE794
	public static ulong[] Create64() { }

	// RVA: 0x21AE7E0 Offset: 0x21AE7E0 VA: 0x21AE7E0
	public static ulong[] CreateExt64() { }

	// RVA: 0x21AE82C Offset: 0x21AE82C VA: 0x21AE82C
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x21AE8DC Offset: 0x21AE8DC VA: 0x21AE8DC
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x21AEA44 Offset: 0x21AEA44 VA: 0x21AEA44
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x21AEADC Offset: 0x21AEADC VA: 0x21AEADC
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x21AEB50 Offset: 0x21AEB50 VA: 0x21AEB50
	public static BigInteger ToBigInteger64(ulong[] x) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat512 // TypeDefIndex: 5169
{
	// Methods

	// RVA: 0x21AEC3C Offset: 0x21AEC3C VA: 0x21AEC3C
	protected void .ctor() { }

	// RVA: 0x21AEC44 Offset: 0x21AEC44 VA: 0x21AEC44
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x21AED88 Offset: 0x21AED88 VA: 0x21AED88
	public static void Square(uint[] x, uint[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat576 // TypeDefIndex: 5170
{
	// Methods

	// RVA: 0x21AEE7C Offset: 0x21AEE7C VA: 0x21AEE7C
	protected void .ctor() { }

	// RVA: 0x21AEE84 Offset: 0x21AEE84 VA: 0x21AEE84
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x21AF0F8 Offset: 0x21AF0F8 VA: 0x21AF0F8
	public static ulong[] Create64() { }

	// RVA: 0x21AF144 Offset: 0x21AF144 VA: 0x21AF144
	public static ulong[] CreateExt64() { }

	// RVA: 0x21AF190 Offset: 0x21AF190 VA: 0x21AF190
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x21AF240 Offset: 0x21AF240 VA: 0x21AF240
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x21AF3A8 Offset: 0x21AF3A8 VA: 0x21AF3A8
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x21AF440 Offset: 0x21AF440 VA: 0x21AF440
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x21AF4B4 Offset: 0x21AF4B4 VA: 0x21AF4B4
	public static BigInteger ToBigInteger64(ulong[] x) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateEncodingException : CertificateException // TypeDefIndex: 5171
{
	// Methods

	// RVA: 0x21AF5A0 Offset: 0x21AF5A0 VA: 0x21AF5A0
	public void .ctor() { }

	// RVA: 0x21AF5B0 Offset: 0x21AF5B0 VA: 0x21AF5B0
	public void .ctor(string msg) { }

	// RVA: 0x21AF5C0 Offset: 0x21AF5C0 VA: 0x21AF5C0
	public void .ctor(string msg, Exception e) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateException : GeneralSecurityException // TypeDefIndex: 5172
{
	// Methods

	// RVA: 0x21AF5A8 Offset: 0x21AF5A8 VA: 0x21AF5A8
	public void .ctor() { }

	// RVA: 0x21AF5B8 Offset: 0x21AF5B8 VA: 0x21AF5B8
	public void .ctor(string message) { }

	// RVA: 0x21AF5C8 Offset: 0x21AF5C8 VA: 0x21AF5C8
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateExpiredException : CertificateException // TypeDefIndex: 5173
{
	// Methods

	// RVA: 0x21AF5E8 Offset: 0x21AF5E8 VA: 0x21AF5E8
	public void .ctor() { }

	// RVA: 0x21AF5F0 Offset: 0x21AF5F0 VA: 0x21AF5F0
	public void .ctor(string message) { }

	// RVA: 0x21AF5F8 Offset: 0x21AF5F8 VA: 0x21AF5F8
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateNotYetValidException : CertificateException // TypeDefIndex: 5174
{
	// Methods

	// RVA: 0x21AF600 Offset: 0x21AF600 VA: 0x21AF600
	public void .ctor() { }

	// RVA: 0x21AF608 Offset: 0x21AF608 VA: 0x21AF608
	public void .ctor(string message) { }

	// RVA: 0x21AF610 Offset: 0x21AF610 VA: 0x21AF610
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateParsingException : CertificateException // TypeDefIndex: 5175
{
	// Methods

	// RVA: 0x21AF618 Offset: 0x21AF618 VA: 0x21AF618
	public void .ctor() { }

	// RVA: 0x21AF620 Offset: 0x21AF620 VA: 0x21AF620
	public void .ctor(string message) { }

	// RVA: 0x21AF628 Offset: 0x21AF628 VA: 0x21AF628
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CrlException : GeneralSecurityException // TypeDefIndex: 5176
{
	// Methods

	// RVA: 0x21AF630 Offset: 0x21AF630 VA: 0x21AF630
	public void .ctor() { }

	// RVA: 0x21AF638 Offset: 0x21AF638 VA: 0x21AF638
	public void .ctor(string msg) { }

	// RVA: 0x21AF640 Offset: 0x21AF640 VA: 0x21AF640
	public void .ctor(string msg, Exception e) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class DigestUtilities // TypeDefIndex: 5177
{
	// Fields
	private static readonly IDictionary algorithms; // 0x0
	private static readonly IDictionary oids; // 0x8

	// Properties
	public static ICollection Algorithms { get; }

	// Methods

	// RVA: 0x21AF648 Offset: 0x21AF648 VA: 0x21AF648
	private void .ctor() { }

	// RVA: 0x21AF650 Offset: 0x21AF650 VA: 0x21AF650
	private static void .cctor() { }

	// RVA: 0x21B19D0 Offset: 0x21B19D0 VA: 0x21B19D0
	public static DerObjectIdentifier GetObjectIdentifier(string mechanism) { }

	// RVA: 0x21B1CC8 Offset: 0x21B1CC8 VA: 0x21B1CC8
	public static ICollection get_Algorithms() { }

	// RVA: 0x21B1DA4 Offset: 0x21B1DA4 VA: 0x21B1DA4
	public static IDigest GetDigest(DerObjectIdentifier id) { }

	// RVA: 0x21B1E28 Offset: 0x21B1E28 VA: 0x21B1E28
	public static IDigest GetDigest(string algorithm) { }

	// RVA: 0x21B2638 Offset: 0x21B2638 VA: 0x21B2638
	public static string GetAlgorithmName(DerObjectIdentifier oid) { }

	// RVA: 0x21B27A8 Offset: 0x21B27A8 VA: 0x21B27A8
	public static byte[] CalculateDigest(string algorithm, byte[] input) { }

	// RVA: 0x21B28C0 Offset: 0x21B28C0 VA: 0x21B28C0
	public static byte[] DoFinal(IDigest digest) { }

	// RVA: 0x21B2A18 Offset: 0x21B2A18 VA: 0x21B2A18
	public static byte[] DoFinal(IDigest digest, byte[] input) { }
}

// Namespace: 
private enum DigestUtilities.DigestAlgorithm // TypeDefIndex: 5178
{
	// Fields
	public int value__; // 0x0
	public const DigestUtilities.DigestAlgorithm GOST3411 = 0;
	public const DigestUtilities.DigestAlgorithm KECCAK_224 = 1;
	public const DigestUtilities.DigestAlgorithm KECCAK_256 = 2;
	public const DigestUtilities.DigestAlgorithm KECCAK_288 = 3;
	public const DigestUtilities.DigestAlgorithm KECCAK_384 = 4;
	public const DigestUtilities.DigestAlgorithm KECCAK_512 = 5;
	public const DigestUtilities.DigestAlgorithm MD2 = 6;
	public const DigestUtilities.DigestAlgorithm MD4 = 7;
	public const DigestUtilities.DigestAlgorithm MD5 = 8;
	public const DigestUtilities.DigestAlgorithm RIPEMD128 = 9;
	public const DigestUtilities.DigestAlgorithm RIPEMD160 = 10;
	public const DigestUtilities.DigestAlgorithm RIPEMD256 = 11;
	public const DigestUtilities.DigestAlgorithm RIPEMD320 = 12;
	public const DigestUtilities.DigestAlgorithm SHA_1 = 13;
	public const DigestUtilities.DigestAlgorithm SHA_224 = 14;
	public const DigestUtilities.DigestAlgorithm SHA_256 = 15;
	public const DigestUtilities.DigestAlgorithm SHA_384 = 16;
	public const DigestUtilities.DigestAlgorithm SHA_512 = 17;
	public const DigestUtilities.DigestAlgorithm SHA_512_224 = 18;
	public const DigestUtilities.DigestAlgorithm SHA_512_256 = 19;
	public const DigestUtilities.DigestAlgorithm SHA3_224 = 20;
	public const DigestUtilities.DigestAlgorithm SHA3_256 = 21;
	public const DigestUtilities.DigestAlgorithm SHA3_384 = 22;
	public const DigestUtilities.DigestAlgorithm SHA3_512 = 23;
	public const DigestUtilities.DigestAlgorithm SHAKE128 = 24;
	public const DigestUtilities.DigestAlgorithm SHAKE256 = 25;
	public const DigestUtilities.DigestAlgorithm TIGER = 26;
	public const DigestUtilities.DigestAlgorithm WHIRLPOOL = 27;
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class GeneralSecurityException : Exception // TypeDefIndex: 5179
{
	// Methods

	// RVA: 0x21AF5D0 Offset: 0x21AF5D0 VA: 0x21AF5D0
	public void .ctor() { }

	// RVA: 0x21AF5D8 Offset: 0x21AF5D8 VA: 0x21AF5D8
	public void .ctor(string message) { }

	// RVA: 0x21AF5E0 Offset: 0x21AF5E0 VA: 0x21AF5E0
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class InvalidKeyException : KeyException // TypeDefIndex: 5180
{
	// Methods

	// RVA: 0x21B2B28 Offset: 0x21B2B28 VA: 0x21B2B28
	public void .ctor() { }

	// RVA: 0x21B2B38 Offset: 0x21B2B38 VA: 0x21B2B38
	public void .ctor(string message) { }

	// RVA: 0x21B2B48 Offset: 0x21B2B48 VA: 0x21B2B48
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class InvalidParameterException : KeyException // TypeDefIndex: 5181
{
	// Methods

	// RVA: 0x21B2B58 Offset: 0x21B2B58 VA: 0x21B2B58
	public void .ctor() { }

	// RVA: 0x21B2B60 Offset: 0x21B2B60 VA: 0x21B2B60
	public void .ctor(string message) { }

	// RVA: 0x21B2B68 Offset: 0x21B2B68 VA: 0x21B2B68
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class KeyException : GeneralSecurityException // TypeDefIndex: 5182
{
	// Methods

	// RVA: 0x21B2B30 Offset: 0x21B2B30 VA: 0x21B2B30
	public void .ctor() { }

	// RVA: 0x21B2B40 Offset: 0x21B2B40 VA: 0x21B2B40
	public void .ctor(string message) { }

	// RVA: 0x21B2B50 Offset: 0x21B2B50 VA: 0x21B2B50
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class MacUtilities // TypeDefIndex: 5183
{
	// Fields
	private static readonly IDictionary algorithms; // 0x0

	// Methods

	// RVA: 0x21B2B70 Offset: 0x21B2B70 VA: 0x21B2B70
	private void .ctor() { }

	// RVA: 0x21B2B78 Offset: 0x21B2B78 VA: 0x21B2B78
	private static void .cctor() { }

	// RVA: 0x21B4324 Offset: 0x21B4324 VA: 0x21B4324
	public static IMac GetMac(DerObjectIdentifier id) { }

	// RVA: 0x21B43A8 Offset: 0x21B43A8 VA: 0x21B43A8
	public static IMac GetMac(string algorithm) { }

	// RVA: 0x21B4FF0 Offset: 0x21B4FF0 VA: 0x21B4FF0
	public static string GetAlgorithmName(DerObjectIdentifier oid) { }

	// RVA: 0x21B5160 Offset: 0x21B5160 VA: 0x21B5160
	public static byte[] CalculateMac(string algorithm, ICipherParameters cp, byte[] input) { }

	// RVA: 0x21B52E8 Offset: 0x21B52E8 VA: 0x21B52E8
	public static byte[] DoFinal(IMac mac) { }

	// RVA: 0x21B5440 Offset: 0x21B5440 VA: 0x21B5440
	public static byte[] DoFinal(IMac mac, byte[] input) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class PublicKeyFactory // TypeDefIndex: 5184
{
	// Methods

	// RVA: 0x21B5550 Offset: 0x21B5550 VA: 0x21B5550
	private void .ctor() { }

	// RVA: 0x21B5558 Offset: 0x21B5558 VA: 0x21B5558
	public static AsymmetricKeyParameter CreateKey(byte[] keyInfoData) { }

	// RVA: 0x21B6CE0 Offset: 0x21B6CE0 VA: 0x21B6CE0
	public static AsymmetricKeyParameter CreateKey(Stream inStr) { }

	// RVA: 0x21B5578 Offset: 0x21B5578 VA: 0x21B5578
	public static AsymmetricKeyParameter CreateKey(SubjectPublicKeyInfo keyInfo) { }

	// RVA: 0x21B6D00 Offset: 0x21B6D00 VA: 0x21B6D00
	private static bool IsPkcsDHParam(Asn1Sequence seq) { }

	// RVA: 0x21B6E7C Offset: 0x21B6E7C VA: 0x21B6E7C
	private static DHPublicKeyParameters ReadPkcsDHParam(DerObjectIdentifier algOid, BigInteger y, Asn1Sequence seq) { }
}

// Namespace: Org.BouncyCastle.Security
public class SecureRandom : Random // TypeDefIndex: 5185
{
	// Fields
	private static long counter; // 0x0
	private static readonly SecureRandom master; // 0x8
	protected readonly IRandomGenerator generator; // 0x20
	private static readonly double DoubleScale; // 0x10

	// Properties
	private static SecureRandom Master { get; }

	// Methods

	// RVA: 0x21B6FC8 Offset: 0x21B6FC8 VA: 0x21B6FC8
	public void .ctor() { }

	[ObsoleteAttribute] // RVA: 0xCC773C Offset: 0xCC773C VA: 0xCC773C
	// RVA: 0x21B7214 Offset: 0x21B7214 VA: 0x21B7214
	public void .ctor(byte[] seed) { }

	// RVA: 0x21B71E4 Offset: 0x21B71E4 VA: 0x21B71E4
	public void .ctor(IRandomGenerator generator) { }

	// RVA: 0x21B72BC Offset: 0x21B72BC VA: 0x21B72BC
	private static long NextCounterValue() { }

	// RVA: 0x21B7324 Offset: 0x21B7324 VA: 0x21B7324
	private static SecureRandom get_Master() { }

	// RVA: 0x21B7054 Offset: 0x21B7054 VA: 0x21B7054
	private static DigestRandomGenerator CreatePrng(string digestName, bool autoSeed) { }

	// RVA: 0x21B738C Offset: 0x21B738C VA: 0x21B738C
	public static byte[] GetNextBytes(SecureRandom secureRandom, int length) { }

	// RVA: 0x21B7414 Offset: 0x21B7414 VA: 0x21B7414
	public static SecureRandom GetInstance(string algorithm) { }

	// RVA: 0x21B747C Offset: 0x21B747C VA: 0x21B747C
	public static SecureRandom GetInstance(string algorithm, bool autoSeed) { }

	[ObsoleteAttribute] // RVA: 0xCC7774 Offset: 0xCC7774 VA: 0xCC7774
	// RVA: 0x21B765C Offset: 0x21B765C VA: 0x21B765C
	public static byte[] GetSeed(int length) { }

	// RVA: 0x21B76C4 Offset: 0x21B76C4 VA: 0x21B76C4 Slot: 10
	public virtual byte[] GenerateSeed(int length) { }

	// RVA: 0x21B772C Offset: 0x21B772C VA: 0x21B772C Slot: 11
	public virtual void SetSeed(byte[] seed) { }

	// RVA: 0x21B77F0 Offset: 0x21B77F0 VA: 0x21B77F0 Slot: 12
	public virtual void SetSeed(long seed) { }

	// RVA: 0x21B78B8 Offset: 0x21B78B8 VA: 0x21B78B8 Slot: 5
	public override int Next() { }

	// RVA: 0x21B78DC Offset: 0x21B78DC VA: 0x21B78DC Slot: 6
	public override int Next(int maxValue) { }

	// RVA: 0x21B79F0 Offset: 0x21B79F0 VA: 0x21B79F0 Slot: 7
	public override int Next(int minValue, int maxValue) { }

	// RVA: 0x21B7AE0 Offset: 0x21B7AE0 VA: 0x21B7AE0 Slot: 8
	public override void NextBytes(byte[] buf) { }

	// RVA: 0x21B7BA8 Offset: 0x21B7BA8 VA: 0x21B7BA8 Slot: 13
	public virtual void NextBytes(byte[] buf, int off, int len) { }

	// RVA: 0x21B7C88 Offset: 0x21B7C88 VA: 0x21B7C88 Slot: 9
	public override double NextDouble() { }

	// RVA: 0x21B7D4C Offset: 0x21B7D4C VA: 0x21B7D4C Slot: 14
	public virtual int NextInt() { }

	// RVA: 0x21B7E58 Offset: 0x21B7E58 VA: 0x21B7E58 Slot: 15
	public virtual long NextLong() { }

	// RVA: 0x21B7EA4 Offset: 0x21B7EA4 VA: 0x21B7EA4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class SecurityUtilityException : Exception // TypeDefIndex: 5186
{
	// Methods

	// RVA: 0x21B7F74 Offset: 0x21B7F74 VA: 0x21B7F74
	public void .ctor() { }

	// RVA: 0x21B2630 Offset: 0x21B2630 VA: 0x21B2630
	public void .ctor(string message) { }

	// RVA: 0x21B7F7C Offset: 0x21B7F7C VA: 0x21B7F7C
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class SignatureException : GeneralSecurityException // TypeDefIndex: 5187
{
	// Methods

	// RVA: 0x21B7F84 Offset: 0x21B7F84 VA: 0x21B7F84
	public void .ctor() { }

	// RVA: 0x21B7F8C Offset: 0x21B7F8C VA: 0x21B7F8C
	public void .ctor(string message) { }

	// RVA: 0x21B7F94 Offset: 0x21B7F94 VA: 0x21B7F94
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class SignerUtilities // TypeDefIndex: 5188
{
	// Fields
	internal static readonly IDictionary algorithms; // 0x0
	internal static readonly IDictionary oids; // 0x8

	// Properties
	public static ICollection Algorithms { get; }

	// Methods

	// RVA: 0x21B7F9C Offset: 0x21B7F9C VA: 0x21B7F9C
	private void .ctor() { }

	// RVA: 0x21B7FA4 Offset: 0x21B7FA4 VA: 0x21B7FA4
	private static void .cctor() { }

	// RVA: 0x21BF0BC Offset: 0x21BF0BC VA: 0x21BF0BC
	public static DerObjectIdentifier GetObjectIdentifier(string mechanism) { }

	// RVA: 0x21BF3B4 Offset: 0x21BF3B4 VA: 0x21BF3B4
	public static ICollection get_Algorithms() { }

	// RVA: 0x21BF490 Offset: 0x21BF490 VA: 0x21BF490
	public static Asn1Encodable GetDefaultX509Parameters(DerObjectIdentifier id) { }

	// RVA: 0x21BF514 Offset: 0x21BF514 VA: 0x21BF514
	public static Asn1Encodable GetDefaultX509Parameters(string algorithm) { }

	// RVA: 0x21BF844 Offset: 0x21BF844 VA: 0x21BF844
	private static Asn1Encodable GetPssX509Parameters(string digestName) { }

	// RVA: 0x21BFA4C Offset: 0x21BFA4C VA: 0x21BFA4C
	public static ISigner GetSigner(DerObjectIdentifier id) { }

	// RVA: 0x21BFAD0 Offset: 0x21BFAD0 VA: 0x21BFAD0
	public static ISigner GetSigner(string algorithm) { }

	// RVA: 0x21C0DA0 Offset: 0x21C0DA0 VA: 0x21C0DA0
	public static string GetEncodingName(DerObjectIdentifier oid) { }
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class Arrays // TypeDefIndex: 5189
{
	// Methods

	// RVA: 0x1F06F0C Offset: 0x1F06F0C VA: 0x1F06F0C
	protected void .ctor() { }

	// RVA: 0x1F06F14 Offset: 0x1F06F14 VA: 0x1F06F14
	public static bool AreEqual(bool[] a, bool[] b) { }

	// RVA: 0x1F07014 Offset: 0x1F07014 VA: 0x1F07014
	public static bool AreEqual(char[] a, char[] b) { }

	// RVA: 0x1F07104 Offset: 0x1F07104 VA: 0x1F07104
	public static bool AreEqual(byte[] a, byte[] b) { }

	[ObsoleteAttribute] // RVA: 0xCC77AC Offset: 0xCC77AC VA: 0xCC77AC
	// RVA: 0x1F071F4 Offset: 0x1F071F4 VA: 0x1F071F4
	public static bool AreSame(byte[] a, byte[] b) { }

	// RVA: 0x1F07220 Offset: 0x1F07220 VA: 0x1F07220
	public static bool ConstantTimeAreEqual(byte[] a, byte[] b) { }

	// RVA: 0x1F072FC Offset: 0x1F072FC VA: 0x1F072FC
	public static bool AreEqual(int[] a, int[] b) { }

	// RVA: 0x1F073EC Offset: 0x1F073EC VA: 0x1F073EC
	public static bool AreEqual(uint[] a, uint[] b) { }

	// RVA: 0x1F06F40 Offset: 0x1F06F40 VA: 0x1F06F40
	private static bool HaveSameContents(bool[] a, bool[] b) { }

	// RVA: 0x1F07040 Offset: 0x1F07040 VA: 0x1F07040
	private static bool HaveSameContents(char[] a, char[] b) { }

	// RVA: 0x1F07130 Offset: 0x1F07130 VA: 0x1F07130
	private static bool HaveSameContents(byte[] a, byte[] b) { }

	// RVA: 0x1F07328 Offset: 0x1F07328 VA: 0x1F07328
	private static bool HaveSameContents(int[] a, int[] b) { }

	// RVA: 0x1F07418 Offset: 0x1F07418 VA: 0x1F07418
	private static bool HaveSameContents(uint[] a, uint[] b) { }

	// RVA: 0x1F074DC Offset: 0x1F074DC VA: 0x1F074DC
	public static string ToString(object[] a) { }

	// RVA: 0x1F07654 Offset: 0x1F07654 VA: 0x1F07654
	public static int GetHashCode(byte[] data) { }

	// RVA: 0x1F076D4 Offset: 0x1F076D4 VA: 0x1F076D4
	public static int GetHashCode(byte[] data, int off, int len) { }

	// RVA: 0x1F07750 Offset: 0x1F07750 VA: 0x1F07750
	public static int GetHashCode(int[] data) { }

	// RVA: 0x1F077D0 Offset: 0x1F077D0 VA: 0x1F077D0
	public static int GetHashCode(int[] data, int off, int len) { }

	// RVA: 0x1F0784C Offset: 0x1F0784C VA: 0x1F0784C
	public static int GetHashCode(uint[] data) { }

	// RVA: 0x1F078CC Offset: 0x1F078CC VA: 0x1F078CC
	public static int GetHashCode(uint[] data, int off, int len) { }

	// RVA: 0x1F07948 Offset: 0x1F07948 VA: 0x1F07948
	public static int GetHashCode(ulong[] data) { }

	// RVA: 0x1F079DC Offset: 0x1F079DC VA: 0x1F079DC
	public static int GetHashCode(ulong[] data, int off, int len) { }

	// RVA: 0x1F07A6C Offset: 0x1F07A6C VA: 0x1F07A6C
	public static byte[] Clone(byte[] data) { }

	// RVA: 0x1F07B38 Offset: 0x1F07B38 VA: 0x1F07B38
	public static byte[] Clone(byte[] data, byte[] existing) { }

	// RVA: 0x1F07B98 Offset: 0x1F07B98 VA: 0x1F07B98
	public static int[] Clone(int[] data) { }

	// RVA: 0x1F07C64 Offset: 0x1F07C64 VA: 0x1F07C64
	internal static uint[] Clone(uint[] data) { }

	// RVA: 0x1F07D30 Offset: 0x1F07D30 VA: 0x1F07D30
	public static long[] Clone(long[] data) { }

	// RVA: 0x1F07DFC Offset: 0x1F07DFC VA: 0x1F07DFC
	public static ulong[] Clone(ulong[] data) { }

	// RVA: 0x1F07EC8 Offset: 0x1F07EC8 VA: 0x1F07EC8
	public static ulong[] Clone(ulong[] data, ulong[] existing) { }

	// RVA: 0x1F07F28 Offset: 0x1F07F28 VA: 0x1F07F28
	public static bool Contains(byte[] a, byte n) { }

	// RVA: 0x1F07FA8 Offset: 0x1F07FA8 VA: 0x1F07FA8
	public static bool Contains(short[] a, short n) { }

	// RVA: 0x1F08028 Offset: 0x1F08028 VA: 0x1F08028
	public static bool Contains(int[] a, int n) { }

	// RVA: 0x1F080A8 Offset: 0x1F080A8 VA: 0x1F080A8
	public static void Fill(byte[] buf, byte b) { }

	// RVA: 0x1F08124 Offset: 0x1F08124 VA: 0x1F08124
	public static byte[] CopyOf(byte[] data, int newLength) { }

	// RVA: 0x1F081C4 Offset: 0x1F081C4 VA: 0x1F081C4
	public static char[] CopyOf(char[] data, int newLength) { }

	// RVA: 0x1F08264 Offset: 0x1F08264 VA: 0x1F08264
	public static int[] CopyOf(int[] data, int newLength) { }

	// RVA: 0x1F08304 Offset: 0x1F08304 VA: 0x1F08304
	public static long[] CopyOf(long[] data, int newLength) { }

	// RVA: 0x1F083A4 Offset: 0x1F083A4 VA: 0x1F083A4
	public static BigInteger[] CopyOf(BigInteger[] data, int newLength) { }

	// RVA: 0x1F08444 Offset: 0x1F08444 VA: 0x1F08444
	public static byte[] CopyOfRange(byte[] data, int from, int to) { }

	// RVA: 0x1F08608 Offset: 0x1F08608 VA: 0x1F08608
	public static int[] CopyOfRange(int[] data, int from, int to) { }

	// RVA: 0x1F086C4 Offset: 0x1F086C4 VA: 0x1F086C4
	public static long[] CopyOfRange(long[] data, int from, int to) { }

	// RVA: 0x1F08780 Offset: 0x1F08780 VA: 0x1F08780
	public static BigInteger[] CopyOfRange(BigInteger[] data, int from, int to) { }

	// RVA: 0x1F08500 Offset: 0x1F08500 VA: 0x1F08500
	private static int GetLength(int from, int to) { }

	// RVA: 0x1F0883C Offset: 0x1F0883C VA: 0x1F0883C
	public static byte[] Append(byte[] a, byte b) { }

	// RVA: 0x1F08940 Offset: 0x1F08940 VA: 0x1F08940
	public static short[] Append(short[] a, short b) { }

	// RVA: 0x1F08A44 Offset: 0x1F08A44 VA: 0x1F08A44
	public static int[] Append(int[] a, int b) { }

	// RVA: 0x1F08B48 Offset: 0x1F08B48 VA: 0x1F08B48
	public static byte[] Concatenate(byte[] a, byte[] b) { }

	// RVA: 0x1F08C14 Offset: 0x1F08C14 VA: 0x1F08C14
	public static byte[] ConcatenateAll(byte[][] vs) { }

	// RVA: 0x1F08DFC Offset: 0x1F08DFC VA: 0x1F08DFC
	public static int[] Concatenate(int[] a, int[] b) { }

	// RVA: 0x1F08EC8 Offset: 0x1F08EC8 VA: 0x1F08EC8
	public static byte[] Prepend(byte[] a, byte b) { }

	// RVA: 0x1F08F9C Offset: 0x1F08F9C VA: 0x1F08F9C
	public static short[] Prepend(short[] a, short b) { }

	// RVA: 0x1F09070 Offset: 0x1F09070 VA: 0x1F09070
	public static int[] Prepend(int[] a, int b) { }

	// RVA: 0x1F09144 Offset: 0x1F09144 VA: 0x1F09144
	public static byte[] Reverse(byte[] a) { }

	// RVA: 0x1F09238 Offset: 0x1F09238 VA: 0x1F09238
	public static int[] Reverse(int[] a) { }
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class BigIntegers // TypeDefIndex: 5190
{
	// Fields
	private const int MaxIterations = 1000;

	// Methods

	// RVA: 0x1F0932C Offset: 0x1F0932C VA: 0x1F0932C
