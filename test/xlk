	// RVA: 0x24C3C08 Offset: 0x24C3C08 VA: 0x24C3C08
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x24C3D3C Offset: 0x24C3D3C VA: 0x24C3D3C
	public static uint[] Create() { }

	// RVA: 0x24C3D88 Offset: 0x24C3D88 VA: 0x24C3D88
	public static ulong[] Create64() { }

	// RVA: 0x24C3DD4 Offset: 0x24C3DD4 VA: 0x24C3DD4
	public static uint[] CreateExt() { }

	// RVA: 0x24C3E20 Offset: 0x24C3E20 VA: 0x24C3E20
	public static ulong[] CreateExt64() { }

	// RVA: 0x24C3E6C Offset: 0x24C3E6C VA: 0x24C3E6C
	public static bool Diff(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24C44B0 Offset: 0x24C44B0 VA: 0x24C44B0
	public static bool Eq(uint[] x, uint[] y) { }

	// RVA: 0x24C4560 Offset: 0x24C4560 VA: 0x24C4560
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x24C4610 Offset: 0x24C4610 VA: 0x24C4610
	public static uint[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24C4778 Offset: 0x24C4778 VA: 0x24C4778
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x24C48E0 Offset: 0x24C48E0 VA: 0x24C48E0
	public static uint GetBit(uint[] x, int bit) { }

	// RVA: 0x24C498C Offset: 0x24C498C VA: 0x24C498C
	public static bool Gte(uint[] x, uint[] y) { }

	// RVA: 0x24C3EF4 Offset: 0x24C3EF4 VA: 0x24C3EF4
	public static bool Gte(uint[] x, int xOff, uint[] y, int yOff) { }

	// RVA: 0x24C4A44 Offset: 0x24C4A44 VA: 0x24C4A44
	public static bool IsOne(uint[] x) { }

	// RVA: 0x24C4ADC Offset: 0x24C4ADC VA: 0x24C4ADC
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x24C4B74 Offset: 0x24C4B74 VA: 0x24C4B74
	public static bool IsZero(uint[] x) { }

	// RVA: 0x24C4BE8 Offset: 0x24C4BE8 VA: 0x24C4BE8
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x24C4C5C Offset: 0x24C4C5C VA: 0x24C4C5C
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24C5260 Offset: 0x24C5260 VA: 0x24C5260
	public static void Mul(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x24C59D4 Offset: 0x24C59D4 VA: 0x24C59D4
	public static uint MulAddTo(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24C5E84 Offset: 0x24C5E84 VA: 0x24C5E84
	public static uint MulAddTo(uint[] x, int xOff, uint[] y, int yOff, uint[] zz, int zzOff) { }

	// RVA: 0x24C6444 Offset: 0x24C6444 VA: 0x24C6444
	public static ulong Mul33Add(uint w, uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24C697C Offset: 0x24C697C VA: 0x24C697C
	public static uint MulByWord(uint x, uint[] z) { }

	// RVA: 0x24C6BE8 Offset: 0x24C6BE8 VA: 0x24C6BE8
	public static uint MulByWordAddTo(uint x, uint[] y, uint[] z) { }

	// RVA: 0x24C6FA8 Offset: 0x24C6FA8 VA: 0x24C6FA8
	public static uint MulWordAddTo(uint x, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24C7440 Offset: 0x24C7440 VA: 0x24C7440
	public static uint Mul33DWordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x24C7624 Offset: 0x24C7624 VA: 0x24C7624
	public static uint Mul33WordAdd(uint x, uint y, uint[] z, int zOff) { }

	// RVA: 0x24C7798 Offset: 0x24C7798 VA: 0x24C7798
	public static uint MulWordDwordAdd(uint x, ulong y, uint[] z, int zOff) { }

	// RVA: 0x24C7918 Offset: 0x24C7918 VA: 0x24C7918
	public static uint MulWord(uint x, uint[] y, uint[] z, int zOff) { }

	// RVA: 0x24C79E4 Offset: 0x24C79E4 VA: 0x24C79E4
	public static void Square(uint[] x, uint[] zz) { }

	// RVA: 0x24C8210 Offset: 0x24C8210 VA: 0x24C8210
	public static void Square(uint[] x, int xOff, uint[] zz, int zzOff) { }

	// RVA: 0x24C8CFC Offset: 0x24C8CFC VA: 0x24C8CFC
	public static int Sub(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24C3FD0 Offset: 0x24C3FD0 VA: 0x24C3FD0
	public static int Sub(uint[] x, int xOff, uint[] y, int yOff, uint[] z, int zOff) { }

	// RVA: 0x24C90A0 Offset: 0x24C90A0 VA: 0x24C90A0
	public static int SubBothFrom(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x24C9564 Offset: 0x24C9564 VA: 0x24C9564
	public static int SubFrom(uint[] x, uint[] z) { }

	// RVA: 0x24C98F4 Offset: 0x24C98F4 VA: 0x24C98F4
	public static int SubFrom(uint[] x, int xOff, uint[] z, int zOff) { }

	// RVA: 0x24C9D68 Offset: 0x24C9D68 VA: 0x24C9D68
	public static BigInteger ToBigInteger(uint[] x) { }

	// RVA: 0x24C9E54 Offset: 0x24C9E54 VA: 0x24C9E54
	public static BigInteger ToBigInteger64(ulong[] x) { }

	// RVA: 0x24C9F40 Offset: 0x24C9F40 VA: 0x24C9F40
	public static void Zero(uint[] z) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat320 // TypeDefIndex: 5166
{
	// Methods

	// RVA: 0x24CA060 Offset: 0x24CA060 VA: 0x24CA060
	protected void .ctor() { }

	// RVA: 0x24CA068 Offset: 0x24CA068 VA: 0x24CA068
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x24CA1DC Offset: 0x24CA1DC VA: 0x24CA1DC
	public static ulong[] Create64() { }

	// RVA: 0x24CA228 Offset: 0x24CA228 VA: 0x24CA228
	public static ulong[] CreateExt64() { }

	// RVA: 0x24CA274 Offset: 0x24CA274 VA: 0x24CA274
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x24CA324 Offset: 0x24CA324 VA: 0x24CA324
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x24CA48C Offset: 0x24CA48C VA: 0x24CA48C
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x24CA524 Offset: 0x24CA524 VA: 0x24CA524
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x24CA598 Offset: 0x24CA598 VA: 0x24CA598
	public static BigInteger ToBigInteger64(ulong[] x) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat384 // TypeDefIndex: 5167
{
	// Methods

	// RVA: 0x24CA684 Offset: 0x24CA684 VA: 0x24CA684
	protected void .ctor() { }

	// RVA: 0x24CA68C Offset: 0x24CA68C VA: 0x24CA68C
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24CA7FC Offset: 0x24CA7FC VA: 0x24CA7FC
	public static void Square(uint[] x, uint[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat448 // TypeDefIndex: 5168
{
	// Methods

	// RVA: 0x24CA914 Offset: 0x24CA914 VA: 0x24CA914
	protected void .ctor() { }

	// RVA: 0x24CA91C Offset: 0x24CA91C VA: 0x24CA91C
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x24CAB10 Offset: 0x24CAB10 VA: 0x24CAB10
	public static ulong[] Create64() { }

	// RVA: 0x24CAB5C Offset: 0x24CAB5C VA: 0x24CAB5C
	public static ulong[] CreateExt64() { }

	// RVA: 0x24CABA8 Offset: 0x24CABA8 VA: 0x24CABA8
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x24CAC58 Offset: 0x24CAC58 VA: 0x24CAC58
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x24CADC0 Offset: 0x24CADC0 VA: 0x24CADC0
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x24CAE58 Offset: 0x24CAE58 VA: 0x24CAE58
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x24CAECC Offset: 0x24CAECC VA: 0x24CAECC
	public static BigInteger ToBigInteger64(ulong[] x) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat512 // TypeDefIndex: 5169
{
	// Methods

	// RVA: 0x24CAFB8 Offset: 0x24CAFB8 VA: 0x24CAFB8
	protected void .ctor() { }

	// RVA: 0x24CAFC0 Offset: 0x24CAFC0 VA: 0x24CAFC0
	public static void Mul(uint[] x, uint[] y, uint[] zz) { }

	// RVA: 0x24CB104 Offset: 0x24CB104 VA: 0x24CB104
	public static void Square(uint[] x, uint[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.Raw
internal abstract class Nat576 // TypeDefIndex: 5170
{
	// Methods

	// RVA: 0x24CB1F8 Offset: 0x24CB1F8 VA: 0x24CB1F8
	protected void .ctor() { }

	// RVA: 0x24CB200 Offset: 0x24CB200 VA: 0x24CB200
	public static void Copy64(ulong[] x, ulong[] z) { }

	// RVA: 0x24CB474 Offset: 0x24CB474 VA: 0x24CB474
	public static ulong[] Create64() { }

	// RVA: 0x24CB4C0 Offset: 0x24CB4C0 VA: 0x24CB4C0
	public static ulong[] CreateExt64() { }

	// RVA: 0x24CB50C Offset: 0x24CB50C VA: 0x24CB50C
	public static bool Eq64(ulong[] x, ulong[] y) { }

	// RVA: 0x24CB5BC Offset: 0x24CB5BC VA: 0x24CB5BC
	public static ulong[] FromBigInteger64(BigInteger x) { }

	// RVA: 0x24CB724 Offset: 0x24CB724 VA: 0x24CB724
	public static bool IsOne64(ulong[] x) { }

	// RVA: 0x24CB7BC Offset: 0x24CB7BC VA: 0x24CB7BC
	public static bool IsZero64(ulong[] x) { }

	// RVA: 0x24CB830 Offset: 0x24CB830 VA: 0x24CB830
	public static BigInteger ToBigInteger64(ulong[] x) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateEncodingException : CertificateException // TypeDefIndex: 5171
{
	// Methods

	// RVA: 0x24CB91C Offset: 0x24CB91C VA: 0x24CB91C
	public void .ctor() { }

	// RVA: 0x24CB92C Offset: 0x24CB92C VA: 0x24CB92C
	public void .ctor(string msg) { }

	// RVA: 0x24CB93C Offset: 0x24CB93C VA: 0x24CB93C
	public void .ctor(string msg, Exception e) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateException : GeneralSecurityException // TypeDefIndex: 5172
{
	// Methods

	// RVA: 0x24CB924 Offset: 0x24CB924 VA: 0x24CB924
	public void .ctor() { }

	// RVA: 0x24CB934 Offset: 0x24CB934 VA: 0x24CB934
	public void .ctor(string message) { }

	// RVA: 0x24CB944 Offset: 0x24CB944 VA: 0x24CB944
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateExpiredException : CertificateException // TypeDefIndex: 5173
{
	// Methods

	// RVA: 0x24CB964 Offset: 0x24CB964 VA: 0x24CB964
	public void .ctor() { }

	// RVA: 0x24CB96C Offset: 0x24CB96C VA: 0x24CB96C
	public void .ctor(string message) { }

	// RVA: 0x24CB974 Offset: 0x24CB974 VA: 0x24CB974
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateNotYetValidException : CertificateException // TypeDefIndex: 5174
{
	// Methods

	// RVA: 0x24CB97C Offset: 0x24CB97C VA: 0x24CB97C
	public void .ctor() { }

	// RVA: 0x24CB984 Offset: 0x24CB984 VA: 0x24CB984
	public void .ctor(string message) { }

	// RVA: 0x24CB98C Offset: 0x24CB98C VA: 0x24CB98C
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CertificateParsingException : CertificateException // TypeDefIndex: 5175
{
	// Methods

	// RVA: 0x24CB994 Offset: 0x24CB994 VA: 0x24CB994
	public void .ctor() { }

	// RVA: 0x24CB99C Offset: 0x24CB99C VA: 0x24CB99C
	public void .ctor(string message) { }

	// RVA: 0x24CB9A4 Offset: 0x24CB9A4 VA: 0x24CB9A4
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security.Certificates
[Serializable]
public class CrlException : GeneralSecurityException // TypeDefIndex: 5176
{
	// Methods

	// RVA: 0x24CB9AC Offset: 0x24CB9AC VA: 0x24CB9AC
	public void .ctor() { }

	// RVA: 0x24CB9B4 Offset: 0x24CB9B4 VA: 0x24CB9B4
	public void .ctor(string msg) { }

	// RVA: 0x24CB9BC Offset: 0x24CB9BC VA: 0x24CB9BC
	public void .ctor(string msg, Exception e) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class DigestUtilities // TypeDefIndex: 5177
{
	// Fields
	private static readonly IDictionary algorithms; // 0x0
	private static readonly IDictionary oids; // 0x8

	// Properties
	public static ICollection Algorithms { get; }

	// Methods

	// RVA: 0x24CB9C4 Offset: 0x24CB9C4 VA: 0x24CB9C4
	private void .ctor() { }

	// RVA: 0x24CB9CC Offset: 0x24CB9CC VA: 0x24CB9CC
	private static void .cctor() { }

	// RVA: 0x24CDD4C Offset: 0x24CDD4C VA: 0x24CDD4C
	public static DerObjectIdentifier GetObjectIdentifier(string mechanism) { }

	// RVA: 0x24CE044 Offset: 0x24CE044 VA: 0x24CE044
	public static ICollection get_Algorithms() { }

	// RVA: 0x24CE120 Offset: 0x24CE120 VA: 0x24CE120
	public static IDigest GetDigest(DerObjectIdentifier id) { }

	// RVA: 0x24CE1A4 Offset: 0x24CE1A4 VA: 0x24CE1A4
	public static IDigest GetDigest(string algorithm) { }

	// RVA: 0x24CE9B4 Offset: 0x24CE9B4 VA: 0x24CE9B4
	public static string GetAlgorithmName(DerObjectIdentifier oid) { }

	// RVA: 0x24CEB24 Offset: 0x24CEB24 VA: 0x24CEB24
	public static byte[] CalculateDigest(string algorithm, byte[] input) { }

	// RVA: 0x24CEC3C Offset: 0x24CEC3C VA: 0x24CEC3C
	public static byte[] DoFinal(IDigest digest) { }

	// RVA: 0x24CED94 Offset: 0x24CED94 VA: 0x24CED94
	public static byte[] DoFinal(IDigest digest, byte[] input) { }
}

// Namespace: 
private enum DigestUtilities.DigestAlgorithm // TypeDefIndex: 5178
{
	// Fields
	public int value__; // 0x0
	public const DigestUtilities.DigestAlgorithm GOST3411 = 0;
	public const DigestUtilities.DigestAlgorithm KECCAK_224 = 1;
	public const DigestUtilities.DigestAlgorithm KECCAK_256 = 2;
	public const DigestUtilities.DigestAlgorithm KECCAK_288 = 3;
	public const DigestUtilities.DigestAlgorithm KECCAK_384 = 4;
	public const DigestUtilities.DigestAlgorithm KECCAK_512 = 5;
	public const DigestUtilities.DigestAlgorithm MD2 = 6;
	public const DigestUtilities.DigestAlgorithm MD4 = 7;
	public const DigestUtilities.DigestAlgorithm MD5 = 8;
	public const DigestUtilities.DigestAlgorithm RIPEMD128 = 9;
	public const DigestUtilities.DigestAlgorithm RIPEMD160 = 10;
	public const DigestUtilities.DigestAlgorithm RIPEMD256 = 11;
	public const DigestUtilities.DigestAlgorithm RIPEMD320 = 12;
	public const DigestUtilities.DigestAlgorithm SHA_1 = 13;
	public const DigestUtilities.DigestAlgorithm SHA_224 = 14;
	public const DigestUtilities.DigestAlgorithm SHA_256 = 15;
	public const DigestUtilities.DigestAlgorithm SHA_384 = 16;
	public const DigestUtilities.DigestAlgorithm SHA_512 = 17;
	public const DigestUtilities.DigestAlgorithm SHA_512_224 = 18;
	public const DigestUtilities.DigestAlgorithm SHA_512_256 = 19;
	public const DigestUtilities.DigestAlgorithm SHA3_224 = 20;
	public const DigestUtilities.DigestAlgorithm SHA3_256 = 21;
	public const DigestUtilities.DigestAlgorithm SHA3_384 = 22;
	public const DigestUtilities.DigestAlgorithm SHA3_512 = 23;
	public const DigestUtilities.DigestAlgorithm SHAKE128 = 24;
	public const DigestUtilities.DigestAlgorithm SHAKE256 = 25;
	public const DigestUtilities.DigestAlgorithm TIGER = 26;
	public const DigestUtilities.DigestAlgorithm WHIRLPOOL = 27;
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class GeneralSecurityException : Exception // TypeDefIndex: 5179
{
	// Methods

	// RVA: 0x24CB94C Offset: 0x24CB94C VA: 0x24CB94C
	public void .ctor() { }

	// RVA: 0x24CB954 Offset: 0x24CB954 VA: 0x24CB954
	public void .ctor(string message) { }

	// RVA: 0x24CB95C Offset: 0x24CB95C VA: 0x24CB95C
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class InvalidKeyException : KeyException // TypeDefIndex: 5180
{
	// Methods

	// RVA: 0x24CEEA4 Offset: 0x24CEEA4 VA: 0x24CEEA4
	public void .ctor() { }

	// RVA: 0x24CEEB4 Offset: 0x24CEEB4 VA: 0x24CEEB4
	public void .ctor(string message) { }

	// RVA: 0x24CEEC4 Offset: 0x24CEEC4 VA: 0x24CEEC4
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class InvalidParameterException : KeyException // TypeDefIndex: 5181
{
	// Methods

	// RVA: 0x24CEED4 Offset: 0x24CEED4 VA: 0x24CEED4
	public void .ctor() { }

	// RVA: 0x24CEEDC Offset: 0x24CEEDC VA: 0x24CEEDC
	public void .ctor(string message) { }

	// RVA: 0x24CEEE4 Offset: 0x24CEEE4 VA: 0x24CEEE4
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class KeyException : GeneralSecurityException // TypeDefIndex: 5182
{
	// Methods

	// RVA: 0x24CEEAC Offset: 0x24CEEAC VA: 0x24CEEAC
	public void .ctor() { }

	// RVA: 0x24CEEBC Offset: 0x24CEEBC VA: 0x24CEEBC
	public void .ctor(string message) { }

	// RVA: 0x24CEECC Offset: 0x24CEECC VA: 0x24CEECC
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class MacUtilities // TypeDefIndex: 5183
{
	// Fields
	private static readonly IDictionary algorithms; // 0x0

	// Methods

	// RVA: 0x24CEEEC Offset: 0x24CEEEC VA: 0x24CEEEC
	private void .ctor() { }

	// RVA: 0x24CEEF4 Offset: 0x24CEEF4 VA: 0x24CEEF4
	private static void .cctor() { }

	// RVA: 0x24D06A0 Offset: 0x24D06A0 VA: 0x24D06A0
	public static IMac GetMac(DerObjectIdentifier id) { }

	// RVA: 0x24D0724 Offset: 0x24D0724 VA: 0x24D0724
	public static IMac GetMac(string algorithm) { }

	// RVA: 0x24D136C Offset: 0x24D136C VA: 0x24D136C
	public static string GetAlgorithmName(DerObjectIdentifier oid) { }

	// RVA: 0x24D14DC Offset: 0x24D14DC VA: 0x24D14DC
	public static byte[] CalculateMac(string algorithm, ICipherParameters cp, byte[] input) { }

	// RVA: 0x24D1664 Offset: 0x24D1664 VA: 0x24D1664
	public static byte[] DoFinal(IMac mac) { }

	// RVA: 0x24D17BC Offset: 0x24D17BC VA: 0x24D17BC
	public static byte[] DoFinal(IMac mac, byte[] input) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class PublicKeyFactory // TypeDefIndex: 5184
{
	// Methods

	// RVA: 0x24D18CC Offset: 0x24D18CC VA: 0x24D18CC
	private void .ctor() { }

	// RVA: 0x24D18D4 Offset: 0x24D18D4 VA: 0x24D18D4
	public static AsymmetricKeyParameter CreateKey(byte[] keyInfoData) { }

	// RVA: 0x24D305C Offset: 0x24D305C VA: 0x24D305C
	public static AsymmetricKeyParameter CreateKey(Stream inStr) { }

	// RVA: 0x24D18F4 Offset: 0x24D18F4 VA: 0x24D18F4
	public static AsymmetricKeyParameter CreateKey(SubjectPublicKeyInfo keyInfo) { }

	// RVA: 0x24D307C Offset: 0x24D307C VA: 0x24D307C
	private static bool IsPkcsDHParam(Asn1Sequence seq) { }

	// RVA: 0x24D31F8 Offset: 0x24D31F8 VA: 0x24D31F8
	private static DHPublicKeyParameters ReadPkcsDHParam(DerObjectIdentifier algOid, BigInteger y, Asn1Sequence seq) { }
}

// Namespace: Org.BouncyCastle.Security
public class SecureRandom : Random // TypeDefIndex: 5185
{
	// Fields
	private static long counter; // 0x0
	private static readonly SecureRandom master; // 0x8
	protected readonly IRandomGenerator generator; // 0x20
	private static readonly double DoubleScale; // 0x10

	// Properties
	private static SecureRandom Master { get; }

	// Methods

	// RVA: 0x24D3344 Offset: 0x24D3344 VA: 0x24D3344
	public void .ctor() { }

	[ObsoleteAttribute] // RVA: 0xD34E10 Offset: 0xD34E10 VA: 0xD34E10
	// RVA: 0x24D3590 Offset: 0x24D3590 VA: 0x24D3590
	public void .ctor(byte[] seed) { }

	// RVA: 0x24D3560 Offset: 0x24D3560 VA: 0x24D3560
	public void .ctor(IRandomGenerator generator) { }

	// RVA: 0x24D3638 Offset: 0x24D3638 VA: 0x24D3638
	private static long NextCounterValue() { }

	// RVA: 0x24D36A0 Offset: 0x24D36A0 VA: 0x24D36A0
	private static SecureRandom get_Master() { }

	// RVA: 0x24D33D0 Offset: 0x24D33D0 VA: 0x24D33D0
	private static DigestRandomGenerator CreatePrng(string digestName, bool autoSeed) { }

	// RVA: 0x24D3708 Offset: 0x24D3708 VA: 0x24D3708
	public static byte[] GetNextBytes(SecureRandom secureRandom, int length) { }

	// RVA: 0x24D3790 Offset: 0x24D3790 VA: 0x24D3790
	public static SecureRandom GetInstance(string algorithm) { }

	// RVA: 0x24D37F8 Offset: 0x24D37F8 VA: 0x24D37F8
	public static SecureRandom GetInstance(string algorithm, bool autoSeed) { }

	[ObsoleteAttribute] // RVA: 0xD34E48 Offset: 0xD34E48 VA: 0xD34E48
	// RVA: 0x24D39D8 Offset: 0x24D39D8 VA: 0x24D39D8
	public static byte[] GetSeed(int length) { }

	// RVA: 0x24D3A40 Offset: 0x24D3A40 VA: 0x24D3A40 Slot: 10
	public virtual byte[] GenerateSeed(int length) { }

	// RVA: 0x24D3AA8 Offset: 0x24D3AA8 VA: 0x24D3AA8 Slot: 11
	public virtual void SetSeed(byte[] seed) { }

	// RVA: 0x24D3B6C Offset: 0x24D3B6C VA: 0x24D3B6C Slot: 12
	public virtual void SetSeed(long seed) { }

	// RVA: 0x24D3C34 Offset: 0x24D3C34 VA: 0x24D3C34 Slot: 5
	public override int Next() { }

	// RVA: 0x24D3C58 Offset: 0x24D3C58 VA: 0x24D3C58 Slot: 6
	public override int Next(int maxValue) { }

	// RVA: 0x24D3D6C Offset: 0x24D3D6C VA: 0x24D3D6C Slot: 7
	public override int Next(int minValue, int maxValue) { }

	// RVA: 0x24D3E5C Offset: 0x24D3E5C VA: 0x24D3E5C Slot: 8
	public override void NextBytes(byte[] buf) { }

	// RVA: 0x24D3F24 Offset: 0x24D3F24 VA: 0x24D3F24 Slot: 13
	public virtual void NextBytes(byte[] buf, int off, int len) { }

	// RVA: 0x24D4004 Offset: 0x24D4004 VA: 0x24D4004 Slot: 9
	public override double NextDouble() { }

	// RVA: 0x24D40C8 Offset: 0x24D40C8 VA: 0x24D40C8 Slot: 14
	public virtual int NextInt() { }

	// RVA: 0x24D41D4 Offset: 0x24D41D4 VA: 0x24D41D4 Slot: 15
	public virtual long NextLong() { }

	// RVA: 0x24D4220 Offset: 0x24D4220 VA: 0x24D4220
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class SecurityUtilityException : Exception // TypeDefIndex: 5186
{
	// Methods

	// RVA: 0x24D42F0 Offset: 0x24D42F0 VA: 0x24D42F0
	public void .ctor() { }

	// RVA: 0x24CE9AC Offset: 0x24CE9AC VA: 0x24CE9AC
	public void .ctor(string message) { }

	// RVA: 0x24D42F8 Offset: 0x24D42F8 VA: 0x24D42F8
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
[Serializable]
public class SignatureException : GeneralSecurityException // TypeDefIndex: 5187
{
	// Methods

	// RVA: 0x24D4300 Offset: 0x24D4300 VA: 0x24D4300
	public void .ctor() { }

	// RVA: 0x24D4308 Offset: 0x24D4308 VA: 0x24D4308
	public void .ctor(string message) { }

	// RVA: 0x24D4310 Offset: 0x24D4310 VA: 0x24D4310
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Security
public sealed class SignerUtilities // TypeDefIndex: 5188
{
	// Fields
	internal static readonly IDictionary algorithms; // 0x0
	internal static readonly IDictionary oids; // 0x8

	// Properties
	public static ICollection Algorithms { get; }

	// Methods

	// RVA: 0x24D4318 Offset: 0x24D4318 VA: 0x24D4318
	private void .ctor() { }

	// RVA: 0x24D4320 Offset: 0x24D4320 VA: 0x24D4320
	private static void .cctor() { }

	// RVA: 0x24DB438 Offset: 0x24DB438 VA: 0x24DB438
	public static DerObjectIdentifier GetObjectIdentifier(string mechanism) { }

	// RVA: 0x24DB730 Offset: 0x24DB730 VA: 0x24DB730
	public static ICollection get_Algorithms() { }

	// RVA: 0x24DB80C Offset: 0x24DB80C VA: 0x24DB80C
	public static Asn1Encodable GetDefaultX509Parameters(DerObjectIdentifier id) { }

	// RVA: 0x24DB890 Offset: 0x24DB890 VA: 0x24DB890
	public static Asn1Encodable GetDefaultX509Parameters(string algorithm) { }

	// RVA: 0x24DBBC0 Offset: 0x24DBBC0 VA: 0x24DBBC0
	private static Asn1Encodable GetPssX509Parameters(string digestName) { }

	// RVA: 0x24DBDC8 Offset: 0x24DBDC8 VA: 0x24DBDC8
	public static ISigner GetSigner(DerObjectIdentifier id) { }

	// RVA: 0x24DBE4C Offset: 0x24DBE4C VA: 0x24DBE4C
	public static ISigner GetSigner(string algorithm) { }

	// RVA: 0x24DD11C Offset: 0x24DD11C VA: 0x24DD11C
	public static string GetEncodingName(DerObjectIdentifier oid) { }
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class Arrays // TypeDefIndex: 5189
{
	// Methods

	// RVA: 0x238C204 Offset: 0x238C204 VA: 0x238C204
	protected void .ctor() { }

	// RVA: 0x238C20C Offset: 0x238C20C VA: 0x238C20C
	public static bool AreEqual(bool[] a, bool[] b) { }

	// RVA: 0x238C30C Offset: 0x238C30C VA: 0x238C30C
	public static bool AreEqual(char[] a, char[] b) { }

	// RVA: 0x238C3FC Offset: 0x238C3FC VA: 0x238C3FC
	public static bool AreEqual(byte[] a, byte[] b) { }

	[ObsoleteAttribute] // RVA: 0xD34E80 Offset: 0xD34E80 VA: 0xD34E80
	// RVA: 0x238C4EC Offset: 0x238C4EC VA: 0x238C4EC
	public static bool AreSame(byte[] a, byte[] b) { }

	// RVA: 0x238C518 Offset: 0x238C518 VA: 0x238C518
	public static bool ConstantTimeAreEqual(byte[] a, byte[] b) { }

	// RVA: 0x238C5F4 Offset: 0x238C5F4 VA: 0x238C5F4
	public static bool AreEqual(int[] a, int[] b) { }

	// RVA: 0x238C6E4 Offset: 0x238C6E4 VA: 0x238C6E4
	public static bool AreEqual(uint[] a, uint[] b) { }

	// RVA: 0x238C238 Offset: 0x238C238 VA: 0x238C238
	private static bool HaveSameContents(bool[] a, bool[] b) { }

	// RVA: 0x238C338 Offset: 0x238C338 VA: 0x238C338
	private static bool HaveSameContents(char[] a, char[] b) { }

	// RVA: 0x238C428 Offset: 0x238C428 VA: 0x238C428
	private static bool HaveSameContents(byte[] a, byte[] b) { }

	// RVA: 0x238C620 Offset: 0x238C620 VA: 0x238C620
	private static bool HaveSameContents(int[] a, int[] b) { }

	// RVA: 0x238C710 Offset: 0x238C710 VA: 0x238C710
	private static bool HaveSameContents(uint[] a, uint[] b) { }

	// RVA: 0x238C7D4 Offset: 0x238C7D4 VA: 0x238C7D4
	public static string ToString(object[] a) { }

	// RVA: 0x238C94C Offset: 0x238C94C VA: 0x238C94C
	public static int GetHashCode(byte[] data) { }

	// RVA: 0x238C9CC Offset: 0x238C9CC VA: 0x238C9CC
	public static int GetHashCode(byte[] data, int off, int len) { }

	// RVA: 0x238CA48 Offset: 0x238CA48 VA: 0x238CA48
	public static int GetHashCode(int[] data) { }

	// RVA: 0x238CAC8 Offset: 0x238CAC8 VA: 0x238CAC8
	public static int GetHashCode(int[] data, int off, int len) { }

	// RVA: 0x238CB44 Offset: 0x238CB44 VA: 0x238CB44
	public static int GetHashCode(uint[] data) { }

	// RVA: 0x238CBC4 Offset: 0x238CBC4 VA: 0x238CBC4
	public static int GetHashCode(uint[] data, int off, int len) { }

	// RVA: 0x238CC40 Offset: 0x238CC40 VA: 0x238CC40
	public static int GetHashCode(ulong[] data) { }

	// RVA: 0x238CCD4 Offset: 0x238CCD4 VA: 0x238CCD4
	public static int GetHashCode(ulong[] data, int off, int len) { }

	// RVA: 0x238CD64 Offset: 0x238CD64 VA: 0x238CD64
	public static byte[] Clone(byte[] data) { }

	// RVA: 0x238CE30 Offset: 0x238CE30 VA: 0x238CE30
	public static byte[] Clone(byte[] data, byte[] existing) { }

	// RVA: 0x238CE90 Offset: 0x238CE90 VA: 0x238CE90
	public static int[] Clone(int[] data) { }

	// RVA: 0x238CF5C Offset: 0x238CF5C VA: 0x238CF5C
	internal static uint[] Clone(uint[] data) { }

	// RVA: 0x238D028 Offset: 0x238D028 VA: 0x238D028
	public static long[] Clone(long[] data) { }

	// RVA: 0x238D0F4 Offset: 0x238D0F4 VA: 0x238D0F4
	public static ulong[] Clone(ulong[] data) { }

	// RVA: 0x238D1C0 Offset: 0x238D1C0 VA: 0x238D1C0
	public static ulong[] Clone(ulong[] data, ulong[] existing) { }

	// RVA: 0x238D220 Offset: 0x238D220 VA: 0x238D220
	public static bool Contains(byte[] a, byte n) { }

	// RVA: 0x238D2A0 Offset: 0x238D2A0 VA: 0x238D2A0
	public static bool Contains(short[] a, short n) { }

	// RVA: 0x238D320 Offset: 0x238D320 VA: 0x238D320
	public static bool Contains(int[] a, int n) { }

	// RVA: 0x238D3A0 Offset: 0x238D3A0 VA: 0x238D3A0
	public static void Fill(byte[] buf, byte b) { }

	// RVA: 0x238D41C Offset: 0x238D41C VA: 0x238D41C
	public static byte[] CopyOf(byte[] data, int newLength) { }

	// RVA: 0x238D4BC Offset: 0x238D4BC VA: 0x238D4BC
	public static char[] CopyOf(char[] data, int newLength) { }

	// RVA: 0x238D55C Offset: 0x238D55C VA: 0x238D55C
	public static int[] CopyOf(int[] data, int newLength) { }

	// RVA: 0x238D5FC Offset: 0x238D5FC VA: 0x238D5FC
	public static long[] CopyOf(long[] data, int newLength) { }

	// RVA: 0x238D69C Offset: 0x238D69C VA: 0x238D69C
	public static BigInteger[] CopyOf(BigInteger[] data, int newLength) { }

	// RVA: 0x238D73C Offset: 0x238D73C VA: 0x238D73C
	public static byte[] CopyOfRange(byte[] data, int from, int to) { }

	// RVA: 0x238D900 Offset: 0x238D900 VA: 0x238D900
	public static int[] CopyOfRange(int[] data, int from, int to) { }

	// RVA: 0x238D9BC Offset: 0x238D9BC VA: 0x238D9BC
	public static long[] CopyOfRange(long[] data, int from, int to) { }

	// RVA: 0x238DA78 Offset: 0x238DA78 VA: 0x238DA78
	public static BigInteger[] CopyOfRange(BigInteger[] data, int from, int to) { }

	// RVA: 0x238D7F8 Offset: 0x238D7F8 VA: 0x238D7F8
	private static int GetLength(int from, int to) { }

	// RVA: 0x238DB34 Offset: 0x238DB34 VA: 0x238DB34
	public static byte[] Append(byte[] a, byte b) { }

	// RVA: 0x238DC38 Offset: 0x238DC38 VA: 0x238DC38
	public static short[] Append(short[] a, short b) { }

	// RVA: 0x238DD3C Offset: 0x238DD3C VA: 0x238DD3C
	public static int[] Append(int[] a, int b) { }

	// RVA: 0x238DE40 Offset: 0x238DE40 VA: 0x238DE40
	public static byte[] Concatenate(byte[] a, byte[] b) { }

	// RVA: 0x238DF0C Offset: 0x238DF0C VA: 0x238DF0C
	public static byte[] ConcatenateAll(byte[][] vs) { }

	// RVA: 0x238E0F4 Offset: 0x238E0F4 VA: 0x238E0F4
	public static int[] Concatenate(int[] a, int[] b) { }

	// RVA: 0x238E1C0 Offset: 0x238E1C0 VA: 0x238E1C0
	public static byte[] Prepend(byte[] a, byte b) { }

	// RVA: 0x238E294 Offset: 0x238E294 VA: 0x238E294
	public static short[] Prepend(short[] a, short b) { }

	// RVA: 0x238E368 Offset: 0x238E368 VA: 0x238E368
	public static int[] Prepend(int[] a, int b) { }

	// RVA: 0x238E43C Offset: 0x238E43C VA: 0x238E43C
	public static byte[] Reverse(byte[] a) { }

	// RVA: 0x238E530 Offset: 0x238E530 VA: 0x238E530
	public static int[] Reverse(int[] a) { }
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class BigIntegers // TypeDefIndex: 5190
{
	// Fields
	private const int MaxIterations = 1000;

	// Methods

	// RVA: 0x238E624 Offset: 0x238E624 VA: 0x238E624
	protected void .ctor() { }

	// RVA: 0x238E62C Offset: 0x238E62C VA: 0x238E62C
	public static byte[] AsUnsignedByteArray(BigInteger n) { }

	// RVA: 0x238E658 Offset: 0x238E658 VA: 0x238E658
	public static byte[] AsUnsignedByteArray(int length, BigInteger n) { }

	// RVA: 0x238E770 Offset: 0x238E770 VA: 0x238E770
	public static BigInteger CreateRandomInRange(BigInteger min, BigInteger max, SecureRandom random) { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public abstract class CollectionUtilities // TypeDefIndex: 5191
{
	// Methods

	// RVA: 0x238EA0C Offset: 0x238EA0C VA: 0x238EA0C
	protected void .ctor() { }

	// RVA: 0x238EA14 Offset: 0x238EA14 VA: 0x238EA14
	public static void AddRange(IList to, IEnumerable range) { }

	// RVA: 0x238ED24 Offset: 0x238ED24 VA: 0x238ED24
	public static bool CheckElementsAreOfType(IEnumerable e, Type t) { }

	// RVA: 0x238F01C Offset: 0x238F01C VA: 0x238F01C
	public static IDictionary ReadOnly(IDictionary d) { }

	// RVA: 0x238F020 Offset: 0x238F020 VA: 0x238F020
	public static IList ReadOnly(IList l) { }

	// RVA: 0x238F024 Offset: 0x238F024 VA: 0x238F024
	public static ISet ReadOnly(ISet s) { }

	// RVA: 0x238F028 Offset: 0x238F028 VA: 0x238F028
	public static string ToString(IEnumerable c) { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public sealed class EmptyEnumerable : IEnumerable // TypeDefIndex: 5192
{
	// Fields
	public static readonly IEnumerable Instance; // 0x0

	// Methods

	// RVA: 0x238F3C0 Offset: 0x238F3C0 VA: 0x238F3C0
	private void .ctor() { }

	// RVA: 0x238F3C8 Offset: 0x238F3C8 VA: 0x238F3C8 Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0x238F430 Offset: 0x238F430 VA: 0x238F430
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public sealed class EmptyEnumerator : IEnumerator // TypeDefIndex: 5193
{
	// Fields
	public static readonly IEnumerator Instance; // 0x0

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x238F494 Offset: 0x238F494 VA: 0x238F494
	private void .ctor() { }

	// RVA: 0x238F49C Offset: 0x238F49C VA: 0x238F49C Slot: 5
	public bool MoveNext() { }

	// RVA: 0x238F4A4 Offset: 0x238F4A4 VA: 0x238F4A4 Slot: 6
	public void Reset() { }

	// RVA: 0x238F4A8 Offset: 0x238F4A8 VA: 0x238F4A8 Slot: 4
	public object get_Current() { }

	// RVA: 0x238F51C Offset: 0x238F51C VA: 0x238F51C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public sealed class EnumerableProxy : IEnumerable // TypeDefIndex: 5194
{
	// Fields
	private readonly IEnumerable inner; // 0x10

	// Methods

	// RVA: 0x238F580 Offset: 0x238F580 VA: 0x238F580
	public void .ctor(IEnumerable inner) { }

	// RVA: 0x238F624 Offset: 0x238F624 VA: 0x238F624 Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public class HashSet : ISet, ICollection, IEnumerable // TypeDefIndex: 5195
{
	// Fields
	private readonly IDictionary impl; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsEmpty { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x238F6D8 Offset: 0x238F6D8 VA: 0x238F6D8
	public void .ctor() { }

	// RVA: 0x238F7A4 Offset: 0x238F7A4 VA: 0x238F7A4
	public void .ctor(IEnumerable s) { }

	// RVA: 0x238FA74 Offset: 0x238FA74 VA: 0x238FA74 Slot: 18
