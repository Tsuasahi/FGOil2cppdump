	[CompilerGeneratedAttribute] // RVA: 0xBD3ECC Offset: 0xBD3ECC VA: 0xBD3ECC
	private static Dictionary<string, int> <>f__switch$mapE; // 0x0

	// Properties
	public string Hash { get; set; }

	// Methods

	// RVA: 0x27AC154 Offset: 0x27AC154 VA: 0x27AC154
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	protected abstract ASN1 ToBeSigned(string hashName);

	// RVA: 0x27AC1B0 Offset: 0x27AC1B0 VA: 0x27AC1B0
	protected string GetOid(string hashName) { }

	// RVA: 0x27AC4F0 Offset: 0x27AC4F0 VA: 0x27AC4F0
	public string get_Hash() { }

	// RVA: 0x27AC4F8 Offset: 0x27AC4F8 VA: 0x27AC4F8
	public void set_Hash(string value) { }

	// RVA: 0x27AC560 Offset: 0x27AC560 VA: 0x27AC560 Slot: 5
	public virtual byte[] Sign(AsymmetricAlgorithm aa) { }

	// RVA: 0x27AC6C8 Offset: 0x27AC6C8 VA: 0x27AC6C8
	private byte[] Build(ASN1 tbs, string hashoid, byte[] signature) { }

	// RVA: 0x27AC838 Offset: 0x27AC838 VA: 0x27AC838 Slot: 6
	public virtual byte[] Sign(RSA key) { }

	// RVA: 0x27AC978 Offset: 0x27AC978 VA: 0x27AC978 Slot: 7
	public virtual byte[] Sign(DSA key) { }
}

// Namespace: Mono.Security.X509
public class X509Certificate : ISerializable // TypeDefIndex: 1838
{
	// Fields
	private ASN1 decoder; // 0x10
	private byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private string m_issuername; // 0x48
	private string m_keyalgo; // 0x50
	private byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private string m_subject; // 0x68
	private byte[] m_publickey; // 0x70
	private byte[] signature; // 0x78
	private string m_signaturealgo; // 0x80
	private byte[] m_signaturealgoparams; // 0x88
	private byte[] certhash; // 0x90
	private RSA _rsa; // 0x98
	private DSA _dsa; // 0xA0
	private int version; // 0xA8
	private byte[] serialnumber; // 0xB0
	private byte[] issuerUniqueID; // 0xB8
	private byte[] subjectUniqueID; // 0xC0
	private X509ExtensionCollection extensions; // 0xC8
	private static string encoding_error; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBD3EDC Offset: 0xBD3EDC VA: 0xBD3EDC
	private static Dictionary<string, int> <>f__switch$mapF; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBD3EEC Offset: 0xBD3EEC VA: 0xBD3EEC
	private static Dictionary<string, int> <>f__switch$map10; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBD3EFC Offset: 0xBD3EFC VA: 0xBD3EFC
	private static Dictionary<string, int> <>f__switch$map11; // 0x18

	// Properties
	public DSA DSA { get; set; }
	public X509ExtensionCollection Extensions { get; }
	public byte[] Hash { get; }
	public virtual string IssuerName { get; }
	public virtual string KeyAlgorithm { get; }
	public virtual byte[] KeyAlgorithmParameters { get; set; }
	public virtual byte[] PublicKey { get; }
	public virtual RSA RSA { get; set; }
	public virtual byte[] RawData { get; }
	public virtual byte[] SerialNumber { get; }
	public virtual byte[] Signature { get; }
	public virtual string SignatureAlgorithm { get; }
	public virtual byte[] SignatureAlgorithmParameters { get; }
	public virtual string SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }
	public int Version { get; }
	public bool IsCurrent { get; }
	public byte[] IssuerUniqueIdentifier { get; }
	public byte[] SubjectUniqueIdentifier { get; }
	public bool IsSelfSigned { get; }

	// Methods

	// RVA: 0x279BAC4 Offset: 0x279BAC4 VA: 0x279BAC4
	public void .ctor(byte[] data) { }

	// RVA: 0x27AD900 Offset: 0x27AD900 VA: 0x27AD900
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27ADA3C Offset: 0x27ADA3C VA: 0x27ADA3C
	private static void .cctor() { }

	// RVA: 0x27ACE14 Offset: 0x27ACE14 VA: 0x27ACE14
	private void Parse(byte[] data) { }

	// RVA: 0x27ADBFC Offset: 0x27ADBFC VA: 0x27ADBFC
	private byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x279CC64 Offset: 0x279CC64 VA: 0x279CC64
	public DSA get_DSA() { }

	// RVA: 0x27ADCB4 Offset: 0x27ADCB4 VA: 0x27ADCB4
	public void set_DSA(DSA value) { }

	// RVA: 0x27ADCC4 Offset: 0x27ADCC4 VA: 0x27ADCC4
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x27ADCCC Offset: 0x27ADCCC VA: 0x27ADCCC
	public byte[] get_Hash() { }

	// RVA: 0x27AE180 Offset: 0x27AE180 VA: 0x27AE180 Slot: 5
	public virtual string get_IssuerName() { }

	// RVA: 0x27AE188 Offset: 0x27AE188 VA: 0x27AE188 Slot: 6
	public virtual string get_KeyAlgorithm() { }

	// RVA: 0x27AE190 Offset: 0x27AE190 VA: 0x27AE190 Slot: 7
	public virtual byte[] get_KeyAlgorithmParameters() { }

	// RVA: 0x27AE25C Offset: 0x27AE25C VA: 0x27AE25C Slot: 8
	public virtual void set_KeyAlgorithmParameters(byte[] value) { }

	// RVA: 0x27AE264 Offset: 0x27AE264 VA: 0x27AE264 Slot: 9
	public virtual byte[] get_PublicKey() { }

	// RVA: 0x27AE330 Offset: 0x27AE330 VA: 0x27AE330 Slot: 10
	public virtual RSA get_RSA() { }

	// RVA: 0x27AE508 Offset: 0x27AE508 VA: 0x27AE508 Slot: 11
	public virtual void set_RSA(RSA value) { }

	// RVA: 0x27AE518 Offset: 0x27AE518 VA: 0x27AE518 Slot: 12
	public virtual byte[] get_RawData() { }

	// RVA: 0x27AE5E4 Offset: 0x27AE5E4 VA: 0x27AE5E4 Slot: 13
	public virtual byte[] get_SerialNumber() { }

	// RVA: 0x27AE6B0 Offset: 0x27AE6B0 VA: 0x27AE6B0 Slot: 14
	public virtual byte[] get_Signature() { }

	// RVA: 0x27AECA8 Offset: 0x27AECA8 VA: 0x27AECA8 Slot: 15
	public virtual string get_SignatureAlgorithm() { }

	// RVA: 0x27AECB0 Offset: 0x27AECB0 VA: 0x27AECB0 Slot: 16
	public virtual byte[] get_SignatureAlgorithmParameters() { }

	// RVA: 0x27AED7C Offset: 0x27AED7C VA: 0x27AED7C Slot: 17
	public virtual string get_SubjectName() { }

	// RVA: 0x27AED84 Offset: 0x27AED84 VA: 0x27AED84 Slot: 18
	public virtual DateTime get_ValidFrom() { }

	// RVA: 0x27AED90 Offset: 0x27AED90 VA: 0x27AED90 Slot: 19
	public virtual DateTime get_ValidUntil() { }

	// RVA: 0x27AED9C Offset: 0x27AED9C VA: 0x27AED9C
	public int get_Version() { }

	// RVA: 0x27AEDA4 Offset: 0x27AEDA4 VA: 0x27AEDA4
	public bool get_IsCurrent() { }

	// RVA: 0x27AEE20 Offset: 0x27AEE20 VA: 0x27AEE20
	public bool WasCurrent(DateTime instant) { }

	// RVA: 0x27AEF30 Offset: 0x27AEF30 VA: 0x27AEF30
	public byte[] get_IssuerUniqueIdentifier() { }

	// RVA: 0x27AEFFC Offset: 0x27AEFFC VA: 0x27AEFFC
	public byte[] get_SubjectUniqueIdentifier() { }

	// RVA: 0x27AF0C8 Offset: 0x27AF0C8 VA: 0x27AF0C8
	internal bool VerifySignature(DSA dsa) { }

	// RVA: 0x27AF1A0 Offset: 0x27AF1A0 VA: 0x27AF1A0
	internal bool VerifySignature(RSA rsa) { }

	// RVA: 0x27AF690 Offset: 0x27AF690 VA: 0x27AF690
	public bool VerifySignature(AsymmetricAlgorithm aa) { }

	// RVA: 0x27AF828 Offset: 0x27AF828 VA: 0x27AF828
	public bool CheckSignature(byte[] hash, string hashAlgorithm, byte[] signature) { }

	// RVA: 0x27AF918 Offset: 0x27AF918 VA: 0x27AF918
	public bool get_IsSelfSigned() { }

	// RVA: 0x27AF9C8 Offset: 0x27AF9C8 VA: 0x27AF9C8
	public ASN1 GetIssuerName() { }

	// RVA: 0x27AF9D0 Offset: 0x27AF9D0 VA: 0x27AF9D0
	public ASN1 GetSubjectName() { }

	// RVA: 0x27AF9D8 Offset: 0x27AF9D8 VA: 0x27AF9D8 Slot: 20
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27ACC50 Offset: 0x27ACC50 VA: 0x27ACC50
	private static byte[] PEM(string type, byte[] data) { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xBD3D0C Offset: 0xBD3D0C VA: 0xBD3D0C
[Serializable]
public class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 1839
{
	// Properties
	public X509Certificate Item { get; set; }

	// Methods

	// RVA: 0x2798CBC Offset: 0x2798CBC VA: 0x2798CBC
	public void .ctor() { }

	// RVA: 0x27B0734 Offset: 0x27B0734 VA: 0x27B0734
	public void .ctor(X509Certificate[] value) { }

	// RVA: 0x27B087C Offset: 0x27B087C VA: 0x27B087C
	public void .ctor(X509CertificateCollection value) { }

	// RVA: 0x27B09CC Offset: 0x27B09CC VA: 0x27B09CC Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x27B0A08 Offset: 0x27B0A08 VA: 0x27B0A08
	public X509Certificate get_Item(int index) { }

	// RVA: 0x27B0B04 Offset: 0x27B0B04 VA: 0x27B0B04
	public void set_Item(int index, X509Certificate value) { }

	// RVA: 0x279BC58 Offset: 0x279BC58 VA: 0x279BC58
	public int Add(X509Certificate value) { }

	// RVA: 0x27B0764 Offset: 0x27B0764 VA: 0x27B0764
	public void AddRange(X509Certificate[] value) { }

	// RVA: 0x27B08AC Offset: 0x27B08AC VA: 0x27B08AC
	public void AddRange(X509CertificateCollection value) { }

	// RVA: 0x27B0B58 Offset: 0x27B0B58 VA: 0x27B0B58
	public bool Contains(X509Certificate value) { }

	// RVA: 0x27B0D30 Offset: 0x27B0D30 VA: 0x27B0D30
	public void CopyTo(X509Certificate[] array, int index) { }

	// RVA: 0x279CAC4 Offset: 0x279CAC4 VA: 0x279CAC4
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x27B0E54 Offset: 0x27B0E54 VA: 0x27B0E54 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x27B0B74 Offset: 0x27B0B74 VA: 0x27B0B74
	public int IndexOf(X509Certificate value) { }

	// RVA: 0x27B0F50 Offset: 0x27B0F50 VA: 0x27B0F50
	public void Insert(int index, X509Certificate value) { }

	// RVA: 0x27B0FA4 Offset: 0x27B0FA4 VA: 0x27B0FA4
	public void Remove(X509Certificate value) { }

	// RVA: 0x27B0E8C Offset: 0x27B0E8C VA: 0x27B0E8C
	private bool Compare(byte[] array1, byte[] array2) { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1840
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x27B0D84 Offset: 0x27B0D84 VA: 0x27B0D84
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x27B0FE8 Offset: 0x27B0FE8 VA: 0x27B0FE8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x27B109C Offset: 0x27B109C VA: 0x27B109C Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x27B1154 Offset: 0x27B1154 VA: 0x27B1154 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x279CB24 Offset: 0x279CB24 VA: 0x279CB24
	public X509Certificate get_Current() { }

	// RVA: 0x279CF94 Offset: 0x279CF94 VA: 0x279CF94 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x27B120C Offset: 0x27B120C VA: 0x27B120C Slot: 8
	public void Reset() { }
}

// Namespace: Mono.Security.X509
public class X509CertificateBuilder : X509Builder // TypeDefIndex: 1841
{
	// Fields
	private byte version; // 0x18
	private byte[] sn; // 0x20
	private string issuer; // 0x28
	private DateTime notBefore; // 0x30
	private DateTime notAfter; // 0x40
	private string subject; // 0x50
	private AsymmetricAlgorithm aa; // 0x58
	private byte[] issuerUniqueID; // 0x60
	private byte[] subjectUniqueID; // 0x68
	private X509ExtensionCollection extensions; // 0x70

	// Properties
	public byte Version { get; set; }
	public byte[] SerialNumber { get; set; }
	public string IssuerName { get; set; }
	public DateTime NotBefore { get; set; }
	public DateTime NotAfter { get; set; }
	public string SubjectName { get; set; }
	public AsymmetricAlgorithm SubjectPublicKey { get; set; }
	public byte[] IssuerUniqueId { get; set; }
	public byte[] SubjectUniqueId { get; set; }
	public X509ExtensionCollection Extensions { get; }

	// Methods

	// RVA: 0x27AFA4C Offset: 0x27AFA4C VA: 0x27AFA4C
	public void .ctor() { }

	// RVA: 0x27AFA54 Offset: 0x27AFA54 VA: 0x27AFA54
	public void .ctor(byte version) { }

	// RVA: 0x27AFB24 Offset: 0x27AFB24 VA: 0x27AFB24
	public byte get_Version() { }

	// RVA: 0x27AFB2C Offset: 0x27AFB2C VA: 0x27AFB2C
	public void set_Version(byte value) { }

	// RVA: 0x27AFB34 Offset: 0x27AFB34 VA: 0x27AFB34
	public byte[] get_SerialNumber() { }

	// RVA: 0x27AFB3C Offset: 0x27AFB3C VA: 0x27AFB3C
	public void set_SerialNumber(byte[] value) { }

	// RVA: 0x27AFB44 Offset: 0x27AFB44 VA: 0x27AFB44
	public string get_IssuerName() { }

	// RVA: 0x27AFB4C Offset: 0x27AFB4C VA: 0x27AFB4C
	public void set_IssuerName(string value) { }

	// RVA: 0x27AFB54 Offset: 0x27AFB54 VA: 0x27AFB54
	public DateTime get_NotBefore() { }

	// RVA: 0x27AFB60 Offset: 0x27AFB60 VA: 0x27AFB60
	public void set_NotBefore(DateTime value) { }

	// RVA: 0x27AFB68 Offset: 0x27AFB68 VA: 0x27AFB68
	public DateTime get_NotAfter() { }

	// RVA: 0x27AFB74 Offset: 0x27AFB74 VA: 0x27AFB74
	public void set_NotAfter(DateTime value) { }

	// RVA: 0x27AFB7C Offset: 0x27AFB7C VA: 0x27AFB7C
	public string get_SubjectName() { }

	// RVA: 0x27AFB84 Offset: 0x27AFB84 VA: 0x27AFB84
	public void set_SubjectName(string value) { }

	// RVA: 0x27AFB8C Offset: 0x27AFB8C VA: 0x27AFB8C
	public AsymmetricAlgorithm get_SubjectPublicKey() { }

	// RVA: 0x27AFB94 Offset: 0x27AFB94 VA: 0x27AFB94
	public void set_SubjectPublicKey(AsymmetricAlgorithm value) { }

	// RVA: 0x27AFB9C Offset: 0x27AFB9C VA: 0x27AFB9C
	public byte[] get_IssuerUniqueId() { }

	// RVA: 0x27AFBA4 Offset: 0x27AFBA4 VA: 0x27AFBA4
	public void set_IssuerUniqueId(byte[] value) { }

	// RVA: 0x27AFBAC Offset: 0x27AFBAC VA: 0x27AFBAC
	public byte[] get_SubjectUniqueId() { }

	// RVA: 0x27AFBB4 Offset: 0x27AFBB4 VA: 0x27AFBB4
	public void set_SubjectUniqueId(byte[] value) { }

	// RVA: 0x27AFBBC Offset: 0x27AFBBC VA: 0x27AFBBC
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x27AFBC4 Offset: 0x27AFBC4 VA: 0x27AFBC4
	private ASN1 SubjectPublicKeyInfo() { }

	// RVA: 0x27B004C Offset: 0x27B004C VA: 0x27B004C
	private byte[] UniqueIdentifier(byte[] id) { }

	// RVA: 0x27B0148 Offset: 0x27B0148 VA: 0x27B0148 Slot: 4
	protected override ASN1 ToBeSigned(string oid) { }
}

// Namespace: Mono.Security.X509
public class X509Chain // TypeDefIndex: 1842
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x18
	private X509Certificate _root; // 0x20
	private X509CertificateCollection _chain; // 0x28
	private X509ChainStatusFlags _status; // 0x30

	// Properties
	public X509CertificateCollection Chain { get; }
	public X509Certificate Root { get; }
	public X509ChainStatusFlags Status { get; }
	public X509CertificateCollection TrustAnchors { get; set; }

	// Methods

	// RVA: 0x27B12C4 Offset: 0x27B12C4 VA: 0x27B12C4
	public void .ctor() { }

	// RVA: 0x27B1330 Offset: 0x27B1330 VA: 0x27B1330
	public void .ctor(X509CertificateCollection chain) { }

	// RVA: 0x27B13B8 Offset: 0x27B13B8 VA: 0x27B13B8
	public X509CertificateCollection get_Chain() { }

	// RVA: 0x27B13C0 Offset: 0x27B13C0 VA: 0x27B13C0
	public X509Certificate get_Root() { }

	// RVA: 0x27B13C8 Offset: 0x27B13C8 VA: 0x27B13C8
	public X509ChainStatusFlags get_Status() { }

	// RVA: 0x27B13D0 Offset: 0x27B13D0 VA: 0x27B13D0
	public X509CertificateCollection get_TrustAnchors() { }

	// RVA: 0x27B1588 Offset: 0x27B1588 VA: 0x27B1588
	public void set_TrustAnchors(X509CertificateCollection value) { }

	// RVA: 0x27B1590 Offset: 0x27B1590 VA: 0x27B1590
	public void LoadCertificate(X509Certificate x509) { }

	// RVA: 0x27B15C4 Offset: 0x27B15C4 VA: 0x27B15C4
	public void LoadCertificates(X509CertificateCollection collection) { }

	// RVA: 0x27B15F8 Offset: 0x27B15F8 VA: 0x27B15F8
	public X509Certificate FindByIssuerName(string issuerName) { }

	// RVA: 0x27B1810 Offset: 0x27B1810 VA: 0x27B1810
	public bool Build(X509Certificate leaf) { }

	// RVA: 0x27B21BC Offset: 0x27B21BC VA: 0x27B21BC
	public void Reset() { }

	// RVA: 0x27B211C Offset: 0x27B211C VA: 0x27B211C
	private bool IsValid(X509Certificate cert) { }

	// RVA: 0x27B1B98 Offset: 0x27B1B98 VA: 0x27B1B98
	private X509Certificate FindCertificateParent(X509Certificate child) { }

	// RVA: 0x27B1D6C Offset: 0x27B1D6C VA: 0x27B1D6C
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot) { }

	// RVA: 0x27B2214 Offset: 0x27B2214 VA: 0x27B2214
	private bool IsTrusted(X509Certificate potentialTrusted) { }

	// RVA: 0x27B1F80 Offset: 0x27B1F80 VA: 0x27B1F80
	private bool IsParent(X509Certificate child, X509Certificate parent) { }
}

// Namespace: Mono.Security.X509
[FlagsAttribute] // RVA: 0xBD3D44 Offset: 0xBD3D44 VA: 0xBD3D44
[Serializable]
public enum X509ChainStatusFlags // TypeDefIndex: 1843
{
	// Fields
	public int value__; // 0x0
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024;
	public const X509ChainStatusFlags NoError = 0;
	public const X509ChainStatusFlags NotSignatureValid = 8;
	public const X509ChainStatusFlags NotTimeNested = 2;
	public const X509ChainStatusFlags NotTimeValid = 1;
	public const X509ChainStatusFlags PartialChain = 65536;
	public const X509ChainStatusFlags UntrustedRoot = 32;
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xBD3D54 Offset: 0xBD3D54 VA: 0xBD3D54
public class X509Crl // TypeDefIndex: 1844
{
	// Fields
	private string issuer; // 0x10
	private byte version; // 0x18
	private DateTime thisUpdate; // 0x20
	private DateTime nextUpdate; // 0x30
	private ArrayList entries; // 0x40
	private string signatureOID; // 0x48
	private byte[] signature; // 0x50
	private X509ExtensionCollection extensions; // 0x58
	private byte[] encoded; // 0x60
	private byte[] hash_value; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xBD3F0C Offset: 0xBD3F0C VA: 0xBD3F0C
	private static Dictionary<string, int> <>f__switch$map12; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBD3F1C Offset: 0xBD3F1C VA: 0xBD3F1C
	private static Dictionary<string, int> <>f__switch$map13; // 0x8

	// Properties
	public ArrayList Entries { get; }
	public X509Crl.X509CrlEntry Item { get; }
	public X509Crl.X509CrlEntry Item { get; }
	public X509ExtensionCollection Extensions { get; }
	public byte[] Hash { get; }
	public string IssuerName { get; }
	public DateTime NextUpdate { get; }
	public DateTime ThisUpdate { get; }
	public string SignatureAlgorithm { get; }
	public byte[] Signature { get; }
	public byte[] RawData { get; }
	public byte Version { get; }
	public bool IsCurrent { get; }

	// Methods

	// RVA: 0x27B2368 Offset: 0x27B2368 VA: 0x27B2368
	public void .ctor(byte[] crl) { }

	// RVA: 0x27B2494 Offset: 0x27B2494 VA: 0x27B2494
	private void Parse(byte[] crl) { }

	// RVA: 0x27B2E10 Offset: 0x27B2E10 VA: 0x27B2E10
	public ArrayList get_Entries() { }

	// RVA: 0x27B2E7C Offset: 0x27B2E7C VA: 0x27B2E7C
	public X509Crl.X509CrlEntry get_Item(int index) { }

	// RVA: 0x27B2F70 Offset: 0x27B2F70 VA: 0x27B2F70
	public X509Crl.X509CrlEntry get_Item(byte[] serialNumber) { }

	// RVA: 0x27B311C Offset: 0x27B311C VA: 0x27B311C
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x27B3124 Offset: 0x27B3124 VA: 0x27B3124
	public byte[] get_Hash() { }

	// RVA: 0x27B3468 Offset: 0x27B3468 VA: 0x27B3468
	public string get_IssuerName() { }

	// RVA: 0x27B3470 Offset: 0x27B3470 VA: 0x27B3470
	public DateTime get_NextUpdate() { }

	// RVA: 0x27B347C Offset: 0x27B347C VA: 0x27B347C
	public DateTime get_ThisUpdate() { }

	// RVA: 0x27B3488 Offset: 0x27B3488 VA: 0x27B3488
	public string get_SignatureAlgorithm() { }

	// RVA: 0x27B3490 Offset: 0x27B3490 VA: 0x27B3490
	public byte[] get_Signature() { }

	// RVA: 0x27B355C Offset: 0x27B355C VA: 0x27B355C
	public byte[] get_RawData() { }

	// RVA: 0x27B3634 Offset: 0x27B3634 VA: 0x27B3634
	public byte get_Version() { }

	// RVA: 0x27B363C Offset: 0x27B363C VA: 0x27B363C
	public bool get_IsCurrent() { }

	// RVA: 0x27B36B8 Offset: 0x27B36B8 VA: 0x27B36B8
	public bool WasCurrent(DateTime instant) { }

	// RVA: 0x27B3814 Offset: 0x27B3814 VA: 0x27B3814
	public byte[] GetBytes() { }

	// RVA: 0x27B38EC Offset: 0x27B38EC VA: 0x27B38EC
	private bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x27B39B0 Offset: 0x27B39B0 VA: 0x27B39B0
	public X509Crl.X509CrlEntry GetCrlEntry(X509Certificate x509) { }

	// RVA: 0x27B2F74 Offset: 0x27B2F74 VA: 0x27B2F74
	public X509Crl.X509CrlEntry GetCrlEntry(byte[] serialNumber) { }

	// RVA: 0x27B3B34 Offset: 0x27B3B34 VA: 0x27B3B34
	public bool VerifySignature(X509Certificate x509) { }

	// RVA: 0x27B3204 Offset: 0x27B3204 VA: 0x27B3204
	private string GetHashName() { }

	// RVA: 0x27B3E08 Offset: 0x27B3E08 VA: 0x27B3E08
	internal bool VerifySignature(DSA dsa) { }

	// RVA: 0x27B413C Offset: 0x27B413C VA: 0x27B413C
	internal bool VerifySignature(RSA rsa) { }

	// RVA: 0x27B4204 Offset: 0x27B4204 VA: 0x27B4204
	public bool VerifySignature(AsymmetricAlgorithm aa) { }

	// RVA: 0x27B439C Offset: 0x27B439C VA: 0x27B439C
	public static X509Crl CreateFromFile(string filename) { }
}

// Namespace: 
public class X509Crl.X509CrlEntry // TypeDefIndex: 1845
{
	// Fields
	private byte[] sn; // 0x10
	private DateTime revocationDate; // 0x18
	private X509ExtensionCollection extensions; // 0x28

	// Properties
	public byte[] SerialNumber { get; }
	public DateTime RevocationDate { get; }
	public X509ExtensionCollection Extensions { get; }

	// Methods

	// RVA: 0x27B4550 Offset: 0x27B4550 VA: 0x27B4550
	internal void .ctor(byte[] serialNumber, DateTime revocationDate, X509ExtensionCollection extensions) { }

	// RVA: 0x27B2CF0 Offset: 0x27B2CF0 VA: 0x27B2CF0
	internal void .ctor(ASN1 entry) { }

	// RVA: 0x27B3A5C Offset: 0x27B3A5C VA: 0x27B3A5C
	public byte[] get_SerialNumber() { }

	// RVA: 0x27B45E8 Offset: 0x27B45E8 VA: 0x27B45E8
	public DateTime get_RevocationDate() { }

	// RVA: 0x27B45F4 Offset: 0x27B45F4 VA: 0x27B45F4
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x27B45FC Offset: 0x27B45FC VA: 0x27B45FC
	public byte[] GetBytes() { }
}

// Namespace: Mono.Security.X509
public class X509Extension // TypeDefIndex: 1846
{
	// Fields
	protected string extnOid; // 0x10
	protected bool extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Properties
	public ASN1 ASN1 { get; }
	public string Oid { get; }
	public bool Critical { get; set; }
	public virtual string Name { get; }
	public ASN1 Value { get; }

	// Methods

	// RVA: 0x27B4764 Offset: 0x27B4764 VA: 0x27B4764
	protected void .ctor() { }

	// RVA: 0x27B478C Offset: 0x27B478C VA: 0x27B478C
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x2797D34 Offset: 0x2797D34 VA: 0x2797D34
	public void .ctor(X509Extension extension) { }

	// RVA: 0x27B4BC0 Offset: 0x27B4BC0 VA: 0x27B4BC0 Slot: 4
	protected virtual void Decode() { }

	// RVA: 0x27B4BC4 Offset: 0x27B4BC4 VA: 0x27B4BC4 Slot: 5
	protected virtual void Encode() { }

	// RVA: 0x27B4BC8 Offset: 0x27B4BC8 VA: 0x27B4BC8
	public ASN1 get_ASN1() { }

	// RVA: 0x27B4BB0 Offset: 0x27B4BB0 VA: 0x27B4BB0
	public string get_Oid() { }

	// RVA: 0x27B4BB8 Offset: 0x27B4BB8 VA: 0x27B4BB8
	public bool get_Critical() { }

	// RVA: 0x27B4D10 Offset: 0x27B4D10 VA: 0x27B4D10
	public void set_Critical(bool value) { }

	// RVA: 0x27B4D1C Offset: 0x27B4D1C VA: 0x27B4D1C Slot: 6
	public virtual string get_Name() { }

	// RVA: 0x27B4B78 Offset: 0x27B4B78 VA: 0x27B4B78
	public ASN1 get_Value() { }

	// RVA: 0x27B4D24 Offset: 0x27B4D24 VA: 0x27B4D24 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x27B4EF0 Offset: 0x27B4EF0 VA: 0x27B4EF0
	public byte[] GetBytes() { }

	// RVA: 0x27B4F24 Offset: 0x27B4F24 VA: 0x27B4F24 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x27B4F54 Offset: 0x27B4F54 VA: 0x27B4F54
	private void WriteLine(StringBuilder sb, int n, int pos) { }

	// RVA: 0x27B51F4 Offset: 0x27B51F4 VA: 0x27B51F4 Slot: 3
	public override string ToString() { }
}

// Namespace: Mono.Security.X509
[DefaultMemberAttribute] // RVA: 0xBD3D8C Offset: 0xBD3D8C VA: 0xBD3D8C
public sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 1847
{
	// Fields
	private bool readOnly; // 0x18

	// Properties
	public X509Extension Item { get; }
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x27AFB1C Offset: 0x27AFB1C VA: 0x27AFB1C
	public void .ctor() { }

	// RVA: 0x27ADAA0 Offset: 0x27ADAA0 VA: 0x27ADAA0
	public void .ctor(ASN1 asn1) { }

	// RVA: 0x27B5300 Offset: 0x27B5300 VA: 0x27B5300 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x27B533C Offset: 0x27B533C VA: 0x27B533C
	public int Add(X509Extension extension) { }

	// RVA: 0x27B5430 Offset: 0x27B5430 VA: 0x27B5430
	public void AddRange(X509Extension[] extension) { }

	// RVA: 0x27B557C Offset: 0x27B557C VA: 0x27B557C
	public void AddRange(X509ExtensionCollection collection) { }

	// RVA: 0x27B57CC Offset: 0x27B57CC VA: 0x27B57CC
	public bool Contains(X509Extension extension) { }

	// RVA: 0x27B5994 Offset: 0x27B5994 VA: 0x27B5994
	public bool Contains(string oid) { }

	// RVA: 0x27B5B8C Offset: 0x27B5B8C VA: 0x27B5B8C
	public void CopyTo(X509Extension[] extensions, int index) { }

	// RVA: 0x27B57E8 Offset: 0x27B57E8 VA: 0x27B57E8
	public int IndexOf(X509Extension extension) { }

	// RVA: 0x27B59B0 Offset: 0x27B59B0 VA: 0x27B59B0
	public int IndexOf(string oid) { }

	// RVA: 0x27B5C54 Offset: 0x27B5C54 VA: 0x27B5C54
	public void Insert(int index, X509Extension extension) { }

	// RVA: 0x27B5D1C Offset: 0x27B5D1C VA: 0x27B5D1C
	public void Remove(X509Extension extension) { }

	// RVA: 0x27B5DDC Offset: 0x27B5DDC VA: 0x27B5DDC
	public void Remove(string oid) { }

	// RVA: 0x27B56D0 Offset: 0x27B56D0 VA: 0x27B56D0
	public X509Extension get_Item(int index) { }

	// RVA: 0x27B2254 Offset: 0x27B2254 VA: 0x27B2254
	public X509Extension get_Item(string oid) { }

	// RVA: 0x27B0550 Offset: 0x27B0550 VA: 0x27B0550
	public byte[] GetBytes() { }
}

// Namespace: Mono.Security.X509
public class X509Store // TypeDefIndex: 1848
{
	// Fields
	private string _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x18
	private ArrayList _crls; // 0x20
	private bool _crl; // 0x28
	private string _name; // 0x30

	// Properties
	public X509CertificateCollection Certificates { get; }
	public ArrayList Crls { get; }
	public string Name { get; }

	// Methods

	// RVA: 0x27B5EC4 Offset: 0x27B5EC4 VA: 0x27B5EC4
	internal void .ctor(string path, bool crl) { }

	// RVA: 0x27B5F04 Offset: 0x27B5F04 VA: 0x27B5F04
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x27B60F4 Offset: 0x27B60F4 VA: 0x27B60F4
	public ArrayList get_Crls() { }

	// RVA: 0x27B634C Offset: 0x27B634C VA: 0x27B634C
	public string get_Name() { }

	// RVA: 0x27B6410 Offset: 0x27B6410 VA: 0x27B6410
	public void Clear() { }

	// RVA: 0x27B645C Offset: 0x27B645C VA: 0x27B645C
	public void Import(X509Certificate certificate) { }

	// RVA: 0x27B67F4 Offset: 0x27B67F4 VA: 0x27B67F4
	public void Import(X509Crl crl) { }

	// RVA: 0x27B6A54 Offset: 0x27B6A54 VA: 0x27B6A54
	public void Remove(X509Certificate certificate) { }

	// RVA: 0x27B6B10 Offset: 0x27B6B10 VA: 0x27B6B10
	public void Remove(X509Crl crl) { }

	// RVA: 0x27B6764 Offset: 0x27B6764 VA: 0x27B6764
	private string GetUniqueName(X509Certificate certificate) { }

	// RVA: 0x27B69C4 Offset: 0x27B69C4 VA: 0x27B69C4
	private string GetUniqueName(X509Crl crl) { }

	// RVA: 0x27B6BCC Offset: 0x27B6BCC VA: 0x27B6BCC
	private byte[] GetUniqueName(X509ExtensionCollection extensions) { }

	// RVA: 0x27B6C6C Offset: 0x27B6C6C VA: 0x27B6C6C
	private string GetUniqueName(string method, byte[] name, string fileExtension) { }

	// RVA: 0x27B6E08 Offset: 0x27B6E08 VA: 0x27B6E08
	private byte[] Load(string filename) { }

	// RVA: 0x27B6F94 Offset: 0x27B6F94 VA: 0x27B6F94
	private X509Certificate LoadCertificate(string filename) { }

	// RVA: 0x27B7004 Offset: 0x27B7004 VA: 0x27B7004
	private X509Crl LoadCrl(string filename) { }

	// RVA: 0x27B6648 Offset: 0x27B6648 VA: 0x27B6648
	private bool CheckStore(string path, bool throwException) { }

	// RVA: 0x27B5F38 Offset: 0x27B5F38 VA: 0x27B5F38
	private X509CertificateCollection BuildCertificatesCollection(string storeName) { }

	// RVA: 0x27B6184 Offset: 0x27B6184 VA: 0x27B6184
	private ArrayList BuildCrlsCollection(string storeName) { }
}

// Namespace: Mono.Security.X509
public sealed class X509StoreManager // TypeDefIndex: 1849
{
	// Fields
	private static X509Stores _userStore; // 0x0
	private static X509Stores _machineStore; // 0x8

	// Properties
	public static X509Stores CurrentUser { get; }
	public static X509Stores LocalMachine { get; }
	public static X509CertificateCollection IntermediateCACertificates { get; }
	public static ArrayList IntermediateCACrls { get; }
	public static X509CertificateCollection TrustedRootCertificates { get; }
	public static ArrayList TrustedRootCACrls { get; }
	public static X509CertificateCollection UntrustedCertificates { get; }

	// Methods

	// RVA: 0x27B7074 Offset: 0x27B7074 VA: 0x27B7074
	private void .ctor() { }

	// RVA: 0x27B707C Offset: 0x27B707C VA: 0x27B707C
	public static X509Stores get_CurrentUser() { }

	// RVA: 0x27B71A4 Offset: 0x27B71A4 VA: 0x27B71A4
	public static X509Stores get_LocalMachine() { }

	// RVA: 0x27B729C Offset: 0x27B729C VA: 0x27B729C
	public static X509CertificateCollection get_IntermediateCACertificates() { }

	// RVA: 0x27B7484 Offset: 0x27B7484 VA: 0x27B7484
	public static ArrayList get_IntermediateCACrls() { }

	// RVA: 0x27B1464 Offset: 0x27B1464 VA: 0x27B1464
	public static X509CertificateCollection get_TrustedRootCertificates() { }

	// RVA: 0x27B763C Offset: 0x27B763C VA: 0x27B763C
	public static ArrayList get_TrustedRootCACrls() { }

	// RVA: 0x27B7730 Offset: 0x27B7730 VA: 0x27B7730
	public static X509CertificateCollection get_UntrustedCertificates() { }
}

// Namespace: Mono.Security.X509
public class X509Stores // TypeDefIndex: 1850
{
	// Fields
	private string _storePath; // 0x10
	private X509Store _personal; // 0x18
	private X509Store _other; // 0x20
	private X509Store _intermediate; // 0x28
	private X509Store _trusted; // 0x30
	private X509Store _untrusted; // 0x38

	// Properties
	public X509Store Personal { get; }
	public X509Store OtherPeople { get; }
	public X509Store IntermediateCA { get; }
	public X509Store TrustedRoot { get; }
	public X509Store Untrusted { get; }

	// Methods

	// RVA: 0x27B7178 Offset: 0x27B7178 VA: 0x27B7178
	internal void .ctor(string path) { }

	// RVA: 0x27B7914 Offset: 0x27B7914 VA: 0x27B7914
	public X509Store get_Personal() { }

	// RVA: 0x27B79D4 Offset: 0x27B79D4 VA: 0x27B79D4
	public X509Store get_OtherPeople() { }

	// RVA: 0x27B73C0 Offset: 0x27B73C0 VA: 0x27B73C0
	public X509Store get_IntermediateCA() { }

	// RVA: 0x27B7578 Offset: 0x27B7578 VA: 0x27B7578
	public X509Store get_TrustedRoot() { }

	// RVA: 0x27B7854 Offset: 0x27B7854 VA: 0x27B7854
	public X509Store get_Untrusted() { }

	// RVA: 0x27B7A94 Offset: 0x27B7A94 VA: 0x27B7A94
	public void Clear() { }

	// RVA: 0x27B7B00 Offset: 0x27B7B00 VA: 0x27B7B00
	public X509Store Open(string storeName, bool create) { }
}

// Namespace: 
public class X509Stores.Names // TypeDefIndex: 1851
{
	// Fields
	public const string Personal = "My";
	public const string OtherPeople = "AddressBook";
	public const string IntermediateCA = "CA";
	public const string TrustedRoot = "Trust";
	public const string Untrusted = "Disallowed";

	// Methods

	// RVA: 0x27B7C14 Offset: 0x27B7C14 VA: 0x27B7C14
	public void .ctor() { }
}

// Namespace: Mono.Security.X509
public class X520 // TypeDefIndex: 1852
{
	// Methods

	// RVA: 0x27B7C1C Offset: 0x27B7C1C VA: 0x27B7C1C
	public void .ctor() { }
}

// Namespace: 
public abstract class X520.AttributeTypeAndValue // TypeDefIndex: 1853
{
	// Fields
	private string oid; // 0x10
	private string attrValue; // 0x18
	private int upperBound; // 0x20
	private byte encoding; // 0x24

	// Properties
	public string Value { get; set; }
	public ASN1 ASN1 { get; }

	// Methods

	// RVA: 0x27B7C24 Offset: 0x27B7C24 VA: 0x27B7C24
	protected void .ctor(string oid, int upperBound) { }

	// RVA: 0x27B7C68 Offset: 0x27B7C68 VA: 0x27B7C68
	protected void .ctor(string oid, int upperBound, byte encoding) { }

	// RVA: 0x27B7CAC Offset: 0x27B7CAC VA: 0x27B7CAC
	public string get_Value() { }

	// RVA: 0x27AC030 Offset: 0x27AC030 VA: 0x27AC030
	public void set_Value(string value) { }

	// RVA: 0x27B7CB4 Offset: 0x27B7CB4 VA: 0x27B7CB4
	public ASN1 get_ASN1() { }

	// RVA: 0x27B7CBC Offset: 0x27B7CBC VA: 0x27B7CBC
	internal ASN1 GetASN1(byte encoding) { }

	// RVA: 0x27AC14C Offset: 0x27AC14C VA: 0x27AC14C
	internal ASN1 GetASN1() { }

	// RVA: 0x27B7F88 Offset: 0x27B7F88 VA: 0x27B7F88
