	public void .ctor(Stream stream, int blockSize) { }

	// RVA: 0x12E522C Offset: 0x12E522C VA: 0x12E522C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x12E52AC Offset: 0x12E52AC VA: 0x12E52AC
	public bool get_IsStreamOwner() { }

	// RVA: 0x12E52B4 Offset: 0x12E52B4 VA: 0x12E52B4 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x12E52BC Offset: 0x12E52BC VA: 0x12E52BC Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x12E52C4 Offset: 0x12E52C4 VA: 0x12E52C4 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x12E52F8 Offset: 0x12E52F8 VA: 0x12E52F8 Slot: 9
	public override long get_Length() { }

	// RVA: 0x12E532C Offset: 0x12E532C VA: 0x12E532C Slot: 10
	public override long get_Position() { }

	// RVA: 0x12E5360 Offset: 0x12E5360 VA: 0x12E5360 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x12E53D4 Offset: 0x12E53D4 VA: 0x12E53D4 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x12E5448 Offset: 0x12E5448 VA: 0x12E5448 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x12E54BC Offset: 0x12E54BC VA: 0x12E54BC Slot: 20
	public override int ReadByte() { }

	// RVA: 0x12E5530 Offset: 0x12E5530 VA: 0x12E5530 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x12E55A4 Offset: 0x12E55A4 VA: 0x12E55A4 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x12E5730 Offset: 0x12E5730 VA: 0x12E5730 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x12E5BB0 Offset: 0x12E5BB0 VA: 0x12E5BB0 Slot: 13
	public override void Close() { }

	// RVA: 0x12E5BE4 Offset: 0x12E5BE4 VA: 0x12E5BE4
	private void MakeMaps() { }

	// RVA: 0x12E57B0 Offset: 0x12E57B0 VA: 0x12E57B0
	private void WriteRun() { }

	// RVA: 0x12E5E5C Offset: 0x12E5E5C VA: 0x12E5E5C Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x12E60C8 Offset: 0x12E60C8 VA: 0x12E60C8 Slot: 18
	public override void Flush() { }

	// RVA: 0x12E50A0 Offset: 0x12E50A0 VA: 0x12E50A0
	private void Initialize() { }

	// RVA: 0x12E5108 Offset: 0x12E5108 VA: 0x12E5108
	private void InitBlock() { }

	// RVA: 0x12E5CD0 Offset: 0x12E5CD0 VA: 0x12E5CD0
	private void EndBlock() { }

	// RVA: 0x12E6040 Offset: 0x12E6040 VA: 0x12E6040
	private void EndCompression() { }

	// RVA: 0x12E4FC0 Offset: 0x12E4FC0 VA: 0x12E4FC0
	private void BsSetStream(Stream stream) { }

	// RVA: 0x12E6330 Offset: 0x12E6330 VA: 0x12E6330
	private void BsFinishedWithStream() { }

	// RVA: 0x12E6258 Offset: 0x12E6258 VA: 0x12E6258
	private void BsW(int n, int v) { }

	// RVA: 0x12E6100 Offset: 0x12E6100 VA: 0x12E6100
	private void BsPutUChar(int c) { }

	// RVA: 0x12E6200 Offset: 0x12E6200 VA: 0x12E6200
	private void BsPutint(int u) { }

	// RVA: 0x12E63B0 Offset: 0x12E63B0 VA: 0x12E63B0
	private void BsPutIntVS(int numBits, int c) { }

	// RVA: 0x12E63B4 Offset: 0x12E63B4 VA: 0x12E63B4
	private void SendMTFValues() { }

	// RVA: 0x12E62FC Offset: 0x12E62FC VA: 0x12E62FC
	private void MoveToFrontCodeAndSend() { }

	// RVA: 0x12E9178 Offset: 0x12E9178 VA: 0x12E9178
	private void SimpleSort(int lo, int hi, int d) { }

	// RVA: 0x12E9E24 Offset: 0x12E9E24 VA: 0x12E9E24
	private void Vswap(int p1, int p2, int n) { }

	// RVA: 0x12E9F50 Offset: 0x12E9F50 VA: 0x12E9F50
	private void QSort3(int loSt, int hiSt, int dSt) { }

	// RVA: 0x12EAAD0 Offset: 0x12EAAD0 VA: 0x12EAAD0
	private void MainSort() { }

	// RVA: 0x12EBB3C Offset: 0x12EBB3C VA: 0x12EBB3C
	private void RandomiseBlock() { }

	// RVA: 0x12E6110 Offset: 0x12E6110 VA: 0x12E6110
	private void DoReversibleTransformation() { }

	// RVA: 0x12E96CC Offset: 0x12E96CC VA: 0x12E96CC
	private bool FullGtU(int i1, int i2) { }

	// RVA: 0x12E4FD0 Offset: 0x12E4FD0 VA: 0x12E4FD0
	private void AllocateCompressStructures() { }

	// RVA: 0x12E8B54 Offset: 0x12E8B54 VA: 0x12E8B54
	private void GenerateMTFValues() { }

	// RVA: 0x12E7C10 Offset: 0x12E7C10 VA: 0x12E7C10
	private static void Panic() { }

	// RVA: 0x12E7C84 Offset: 0x12E7C84 VA: 0x12E7C84
	private static void HbMakeCodeLengths(char[] len, int[] freq, int alphaSize, int maxLen) { }

	// RVA: 0x12E8A64 Offset: 0x12E8A64 VA: 0x12E8A64
	private static void HbAssignCodes(int[] code, char[] length, int minLen, int maxLen, int alphaSize) { }

	// RVA: 0x12EAAA4 Offset: 0x12EAAA4 VA: 0x12EAAA4
	private static byte Med3(byte a, byte b, byte c) { }
}

// Namespace: 
private struct BZip2OutputStream.StackElement // TypeDefIndex: 3694
{
	// Fields
	public int ll; // 0x0
	public int hh; // 0x4
	public int dd; // 0x8
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC89320 Offset: 0xC89320 VA: 0xC89320
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3695
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 00C40B3F013EDA60390F2E849C4581815A9419E4 /*Metadata offset 0x77B8CD*/; // 0x0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 03B569C38E3CD6B720388919D43735A904012C52 /*Metadata offset 0x77B8F5*/; // 0x28
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 1FDC8DB567F5AAA7068D0D2A601CD71657CBDF38 /*Metadata offset 0x77B91D*/; // 0x50
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1024 373B494F210C656134C5728D551D4C97B013EB33 /*Metadata offset 0x77B969*/; // 0x9C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1024 63E9EBF6EEB814FC6AC2677ADF6EA944403C9636 /*Metadata offset 0x77BD69*/; // 0x49C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=116 67C0E784F3654B008A81E2988588CF4956CCF3DA /*Metadata offset 0x77C169*/; // 0x89C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 6BC4EAB0D604C8D4599021AD611C5DBA7FF7E306 /*Metadata offset 0x77C1DD*/; // 0x910
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 79D521E6E3E55103005E9CC3FA43B3174FAF090F /*Metadata offset 0x77C205*/; // 0x938
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=56 7E7FE80AB0CE0F0A7CFAAAFE71AF40B0CDFABB74 /*Metadata offset 0x77C27D*/; // 0x9B0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 89CE0E8EA590FD37283D6BEFD9E6805C8C47ADBD /*Metadata offset 0x77C2B5*/; // 0x9E8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2048 8BE2836811ABA71A450EC6F4D1DCD8BF44E1CFB7 /*Metadata offset 0x77C2C5*/; // 0x9F8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 A586F56BA53FACE320144ADA40A15A33B2715025 /*Metadata offset 0x77CAC5*/; // 0x11F8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 B564A7A433EE1DA50C5E152A99F25DBC09BA835F /*Metadata offset 0x77CAD1*/; // 0x1204
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 D068832E6B13A623916709C1E0E25ADCBE7B455F /*Metadata offset 0x77CADD*/; // 0x1210
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=116 D8E4ACBC2D957C3344A3CAD69FCF9A60C8034DBF /*Metadata offset 0x77CB55*/; // 0x1288
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 DB7C763C9670DD0F6ED34B75B3410A39D835F964 /*Metadata offset 0x77CBC9*/; // 0x12FC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 E727EF4792A349C485D893E60874475A54F24B97 /*Metadata offset 0x77CBF1*/; // 0x1324
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 ED032026472FF77A8A17BA4AFF3FC57AF4B4BF79 /*Metadata offset 0x77CBFB*/; // 0x132E
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 // TypeDefIndex: 3696
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 3697
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 // TypeDefIndex: 3698
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 // TypeDefIndex: 3699
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=56 // TypeDefIndex: 3700
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 // TypeDefIndex: 3701
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=116 // TypeDefIndex: 3702
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 // TypeDefIndex: 3703
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1024 // TypeDefIndex: 3704
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2048 // TypeDefIndex: 3705
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 3706
{}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC8953C Offset: 0xC8953C VA: 0xC8953C
public static class CustomPlayableExtensions // TypeDefIndex: 3707
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC896C4 Offset: 0xC896C4 VA: 0xC896C4
	// RVA: 0x1317710 Offset: 0x1317710 VA: 0x1317710
	public static void ResetTime(Playable playable, float time) { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC8954C Offset: 0xC8954C VA: 0xC8954C
[RequireComponent] // RVA: 0xC8954C Offset: 0xC8954C VA: 0xC8954C
[DefaultMemberAttribute] // RVA: 0xC8954C Offset: 0xC8954C VA: 0xC8954C
public class SimpleAnimation : MonoBehaviour, IAnimationClipSource // TypeDefIndex: 3708
{
	// Fields
	protected PlayableGraph m_Graph; // 0x18
	protected PlayableHandle m_LayerMixer; // 0x28
	protected PlayableHandle m_TransitionMixer; // 0x38
	protected Animator m_Animator; // 0x48
	protected bool m_Initialized; // 0x50
	protected bool m_IsPlaying; // 0x51
	protected SimpleAnimationPlayable m_Playable; // 0x58
	[SerializeField] // RVA: 0xC89644 Offset: 0xC89644 VA: 0xC89644
	protected bool m_PlayAutomatically; // 0x60
	[SerializeField] // RVA: 0xC89654 Offset: 0xC89654 VA: 0xC89654
	protected bool m_AnimatePhysics; // 0x61
	[SerializeField] // RVA: 0xC89664 Offset: 0xC89664 VA: 0xC89664
	protected AnimatorCullingMode m_CullingMode; // 0x64
	[SerializeField] // RVA: 0xC89674 Offset: 0xC89674 VA: 0xC89674
	protected WrapMode m_WrapMode; // 0x68
	[SerializeField] // RVA: 0xC89684 Offset: 0xC89684 VA: 0xC89684
	protected AnimationClip m_Clip; // 0x70
	[SerializeField] // RVA: 0xC89694 Offset: 0xC89694 VA: 0xC89694
	private SimpleAnimation.EditorState[] m_States; // 0x78

	// Properties
	public Animator animator { get; }
	public bool animatePhysics { get; set; }
	public AnimatorCullingMode cullingMode { get; set; }
	public bool isPlaying { get; }
	public bool playAutomatically { get; set; }
	public AnimationClip clip { get; set; }
	public WrapMode wrapMode { get; set; }
	public SimpleAnimation.State Item { get; }
	public SimpleAnimation.EditorState[] States { get; }

	// Methods

	// RVA: 0x1317798 Offset: 0x1317798 VA: 0x1317798
	public void .ctor() { }

	// RVA: 0x13177AC Offset: 0x13177AC VA: 0x13177AC
	public Animator get_animator() { }

	// RVA: 0x1317844 Offset: 0x1317844 VA: 0x1317844
	public bool get_animatePhysics() { }

	// RVA: 0x131784C Offset: 0x131784C VA: 0x131784C
	public void set_animatePhysics(bool value) { }

	// RVA: 0x1317890 Offset: 0x1317890 VA: 0x1317890
	public AnimatorCullingMode get_cullingMode() { }

	// RVA: 0x13178C0 Offset: 0x13178C0 VA: 0x13178C0
	public void set_cullingMode(AnimatorCullingMode value) { }

	// RVA: 0x1317900 Offset: 0x1317900 VA: 0x1317900
	public bool get_isPlaying() { }

	// RVA: 0x1317968 Offset: 0x1317968 VA: 0x1317968
	public bool CheckPlaying() { }

	// RVA: 0x1317BA0 Offset: 0x1317BA0 VA: 0x1317BA0
	public bool get_playAutomatically() { }

	// RVA: 0x1317BA8 Offset: 0x1317BA8 VA: 0x1317BA8
	public void set_playAutomatically(bool value) { }

	// RVA: 0x1317BB4 Offset: 0x1317BB4 VA: 0x1317BB4
	public AnimationClip get_clip() { }

	// RVA: 0x1317BBC Offset: 0x1317BBC VA: 0x1317BBC
	public void set_clip(AnimationClip value) { }

	// RVA: 0x1317CF0 Offset: 0x1317CF0 VA: 0x1317CF0
	public WrapMode get_wrapMode() { }

	// RVA: 0x1317CF8 Offset: 0x1317CF8 VA: 0x1317CF8
	public void set_wrapMode(WrapMode value) { }

	// RVA: 0x1317D00 Offset: 0x1317D00 VA: 0x1317D00
	public void AddClip(AnimationClip clip, string newName) { }

	// RVA: 0x1317DD0 Offset: 0x1317DD0 VA: 0x1317DD0
	public void Blend(string stateName, float targetWeight, float fadeLength) { }

	// RVA: 0x1317FC0 Offset: 0x1317FC0 VA: 0x1317FC0
	public void CrossFade(string stateName, float fadeLength) { }

	// RVA: 0x1318178 Offset: 0x1318178 VA: 0x1318178
	public void CrossFadeQueued(string stateName, float fadeLength, QueueMode queueMode) { }

	// RVA: 0x131833C Offset: 0x131833C VA: 0x131833C
	public int GetClipCount() { }

	// RVA: 0x13183F0 Offset: 0x13183F0 VA: 0x13183F0
	public bool IsPlaying(string stateName) { }

	// RVA: 0x13184AC Offset: 0x13184AC VA: 0x13184AC
	public void Stop() { }

	// RVA: 0x13185A8 Offset: 0x13185A8 VA: 0x13185A8
	public void Stop(string stateName) { }

	// RVA: 0x1318718 Offset: 0x1318718 VA: 0x1318718
	public void Sample() { }

	// RVA: 0x1318730 Offset: 0x1318730 VA: 0x1318730
	public bool Play() { }

	// RVA: 0x1317D40 Offset: 0x1317D40 VA: 0x1317D40
	public void AddState(AnimationClip clip, string name) { }

	// RVA: 0x1318E80 Offset: 0x1318E80 VA: 0x1318E80
	public void RemoveState(string name) { }

	// RVA: 0x1319004 Offset: 0x1319004 VA: 0x1319004
	public bool Play(string stateName) { }

	// RVA: 0x1319568 Offset: 0x1319568 VA: 0x1319568
	public void PlayQueued(string stateName, QueueMode queueMode) { }

	// RVA: 0x131971C Offset: 0x131971C VA: 0x131971C
	public void RemoveClip(AnimationClip clip) { }

	// RVA: 0x131985C Offset: 0x131985C VA: 0x131985C
	public void Rewind() { }

	// RVA: 0x1319948 Offset: 0x1319948 VA: 0x1319948
	public void Rewind(string stateName) { }

	// RVA: 0x1319A9C Offset: 0x1319A9C VA: 0x1319A9C
	public SimpleAnimation.State GetState(string stateName) { }

	// RVA: 0x1319D08 Offset: 0x1319D08 VA: 0x1319D08
	public IEnumerable<SimpleAnimation.State> GetStates() { }

	// RVA: 0x1319D98 Offset: 0x1319D98 VA: 0x1319D98
	public SimpleAnimation.State get_Item(string name) { }

	// RVA: 0x1317E80 Offset: 0x1317E80 VA: 0x1317E80
	protected void Kick() { }

	// RVA: 0x1319D9C Offset: 0x1319D9C VA: 0x1319D9C Slot: 4
	protected virtual void OnEnable() { }

	// RVA: 0x1319DE8 Offset: 0x1319DE8 VA: 0x1319DE8 Slot: 5
	protected virtual void OnDisable() { }

	// RVA: 0x1319E28 Offset: 0x1319E28 VA: 0x1319E28
	private void Reset() { }

	// RVA: 0x13190B0 Offset: 0x13190B0 VA: 0x13190B0
	private void Initialize() { }

	// RVA: 0x1319F08 Offset: 0x1319F08 VA: 0x1319F08
	private void EnsureDefaultStateExists() { }

	// RVA: 0x131A038 Offset: 0x131A038 VA: 0x131A038 Slot: 6
	protected virtual void Awake() { }

	// RVA: 0x131A03C Offset: 0x131A03C VA: 0x131A03C
	protected void OnDestroy() { }

	// RVA: 0x131A07C Offset: 0x131A07C VA: 0x131A07C
	private void OnPlayableDone() { }

	// RVA: 0x1318A30 Offset: 0x1318A30 VA: 0x1318A30
	private void RebuildStates() { }

	// RVA: 0x131A0A8 Offset: 0x131A0A8 VA: 0x131A0A8
	private SimpleAnimation.EditorState CreateDefaultEditorState() { }

	// RVA: 0x1317BE8 Offset: 0x1317BE8 VA: 0x1317BE8
	private static void LegacyClipCheck(AnimationClip clip) { }

	// RVA: 0x131A150 Offset: 0x131A150 VA: 0x131A150
	private void InvalidLegacyClipError(string clipName, string stateName) { }

	// RVA: 0x131A220 Offset: 0x131A220 VA: 0x131A220
	private void OnValidate() { }

	// RVA: 0x131A794 Offset: 0x131A794 VA: 0x131A794
	public SimpleAnimation.EditorState[] get_States() { }

	// RVA: 0x131A79C Offset: 0x131A79C VA: 0x131A79C Slot: 7
	public void GetAnimationClips(List<AnimationClip> results) { }
}

// Namespace: 
public interface SimpleAnimation.State // TypeDefIndex: 3709
{
	// Properties
	public abstract bool enabled { get; set; }
	public abstract bool isValid { get; }
	public abstract float time { get; set; }
	public abstract float normalizedTime { get; set; }
	public abstract float speed { get; set; }
	public abstract string name { get; set; }
	public abstract float weight { get; set; }
	public abstract float length { get; }
	public abstract AnimationClip clip { get; }
	public abstract WrapMode wrapMode { get; set; }
	public abstract WrapMode overwrittenWrapMode { get; set; }
	public abstract bool isOverwrittenWrapMode { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_enabled();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_enabled(bool value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_isValid();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_time();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_time(float value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_normalizedTime();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void set_normalizedTime(float value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_speed();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void set_speed(float value);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_name();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void set_name(string value);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract float get_weight();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void set_weight(float value);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract float get_length();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract AnimationClip get_clip();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract WrapMode get_wrapMode();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void set_wrapMode(WrapMode value);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract WrapMode get_overwrittenWrapMode();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void set_overwrittenWrapMode(WrapMode value);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract bool get_isOverwrittenWrapMode();
}

// Namespace: 
private class SimpleAnimation.DummyStateImpl : SimpleAnimation.State // TypeDefIndex: 3710
{
	// Fields
	private string _name; // 0x10
	private AnimationClip _clip; // 0x18

	// Properties
	private bool SimpleAnimation.State.enabled { get; set; }
	private bool SimpleAnimation.State.isValid { get; }
	private float SimpleAnimation.State.time { get; set; }
	private float SimpleAnimation.State.normalizedTime { get; set; }
	private float SimpleAnimation.State.speed { get; set; }
	private string SimpleAnimation.State.name { get; set; }
	private float SimpleAnimation.State.weight { get; set; }
	private float SimpleAnimation.State.length { get; }
	private AnimationClip SimpleAnimation.State.clip { get; }
	private WrapMode SimpleAnimation.State.wrapMode { get; set; }
	private WrapMode SimpleAnimation.State.overwrittenWrapMode { get; set; }
	private bool SimpleAnimation.State.isOverwrittenWrapMode { get; }

	// Methods

	// RVA: 0x1319BE8 Offset: 0x1319BE8 VA: 0x1319BE8
	public void .ctor(string name, AnimationClip clip) { }

	// RVA: 0x131A8B0 Offset: 0x131A8B0 VA: 0x131A8B0 Slot: 4
	private bool SimpleAnimation.State.get_enabled() { }

	// RVA: 0x131A8B8 Offset: 0x131A8B8 VA: 0x131A8B8 Slot: 5
	private void SimpleAnimation.State.set_enabled(bool value) { }

	// RVA: 0x131A8BC Offset: 0x131A8BC VA: 0x131A8BC Slot: 6
	private bool SimpleAnimation.State.get_isValid() { }

	// RVA: 0x131A8C4 Offset: 0x131A8C4 VA: 0x131A8C4 Slot: 7
	private float SimpleAnimation.State.get_time() { }

	// RVA: 0x131A8CC Offset: 0x131A8CC VA: 0x131A8CC Slot: 8
	private void SimpleAnimation.State.set_time(float value) { }

	// RVA: 0x131A8D0 Offset: 0x131A8D0 VA: 0x131A8D0 Slot: 9
	private float SimpleAnimation.State.get_normalizedTime() { }

	// RVA: 0x131A8D8 Offset: 0x131A8D8 VA: 0x131A8D8 Slot: 10
	private void SimpleAnimation.State.set_normalizedTime(float value) { }

	// RVA: 0x131A8DC Offset: 0x131A8DC VA: 0x131A8DC Slot: 11
	private float SimpleAnimation.State.get_speed() { }

	// RVA: 0x131A8E4 Offset: 0x131A8E4 VA: 0x131A8E4 Slot: 12
	private void SimpleAnimation.State.set_speed(float value) { }

	// RVA: 0x131A8E8 Offset: 0x131A8E8 VA: 0x131A8E8 Slot: 13
	private string SimpleAnimation.State.get_name() { }

	// RVA: 0x131A8F0 Offset: 0x131A8F0 VA: 0x131A8F0 Slot: 14
	private void SimpleAnimation.State.set_name(string value) { }

	// RVA: 0x131A8F4 Offset: 0x131A8F4 VA: 0x131A8F4 Slot: 15
	private float SimpleAnimation.State.get_weight() { }

	// RVA: 0x131A8FC Offset: 0x131A8FC VA: 0x131A8FC Slot: 16
	private void SimpleAnimation.State.set_weight(float value) { }

	// RVA: 0x131A900 Offset: 0x131A900 VA: 0x131A900 Slot: 17
	private float SimpleAnimation.State.get_length() { }

	// RVA: 0x131A930 Offset: 0x131A930 VA: 0x131A930 Slot: 18
	private AnimationClip SimpleAnimation.State.get_clip() { }

	// RVA: 0x131A938 Offset: 0x131A938 VA: 0x131A938 Slot: 19
	private WrapMode SimpleAnimation.State.get_wrapMode() { }

	// RVA: 0x131A968 Offset: 0x131A968 VA: 0x131A968 Slot: 20
	private void SimpleAnimation.State.set_wrapMode(WrapMode value) { }

	// RVA: 0x131A96C Offset: 0x131A96C VA: 0x131A96C Slot: 21
	private WrapMode SimpleAnimation.State.get_overwrittenWrapMode() { }

	// RVA: 0x131A974 Offset: 0x131A974 VA: 0x131A974 Slot: 22
	private void SimpleAnimation.State.set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x131A978 Offset: 0x131A978 VA: 0x131A978 Slot: 23
	private bool SimpleAnimation.State.get_isOverwrittenWrapMode() { }
}

// Namespace: 
private class SimpleAnimation.StateEnumerable : IEnumerable<SimpleAnimation.State>, IEnumerable // TypeDefIndex: 3711
{
	// Fields
	private SimpleAnimation m_Owner; // 0x10

	// Methods

	// RVA: 0x1319D6C Offset: 0x1319D6C VA: 0x1319D6C
	public void .ctor(SimpleAnimation owner) { }

	// RVA: 0x131A980 Offset: 0x131A980 VA: 0x131A980 Slot: 4
	public IEnumerator<SimpleAnimation.State> GetEnumerator() { }

	// RVA: 0x131AAE0 Offset: 0x131AAE0 VA: 0x131AAE0 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private class SimpleAnimation.StateEnumerable.StateEnumerator : IEnumerator<SimpleAnimation.State>, IEnumerator, IDisposable // TypeDefIndex: 3712
{
	// Fields
	private SimpleAnimation m_Owner; // 0x10
	private IEnumerator<SimpleAnimationPlayable.IState> m_Impl; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private SimpleAnimation.State System.Collections.Generic.IEnumerator<SimpleAnimation.State>.Current { get; }

	// Methods

	// RVA: 0x131A9E4 Offset: 0x131A9E4 VA: 0x131A9E4
	public void .ctor(SimpleAnimation owner) { }

	// RVA: 0x131AC60 Offset: 0x131AC60 VA: 0x131AC60
	private SimpleAnimation.State GetCurrent() { }

	// RVA: 0x131AD50 Offset: 0x131AD50 VA: 0x131AD50 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x131AD54 Offset: 0x131AD54 VA: 0x131AD54 Slot: 4
	private SimpleAnimation.State System.Collections.Generic.IEnumerator<SimpleAnimation.State>.get_Current() { }

	// RVA: 0x131AD58 Offset: 0x131AD58 VA: 0x131AD58 Slot: 8
	public void Dispose() { }

	// RVA: 0x131AD5C Offset: 0x131AD5C VA: 0x131AD5C Slot: 6
	public bool MoveNext() { }

	// RVA: 0x131ABA8 Offset: 0x131ABA8 VA: 0x131ABA8 Slot: 7
	public void Reset() { }
}

// Namespace: 
private class SimpleAnimation.StateImpl : SimpleAnimation.State // TypeDefIndex: 3713
{
	// Fields
	private SimpleAnimationPlayable.IState m_StateHandle; // 0x10
	private SimpleAnimation m_Component; // 0x18

	// Properties
	private bool SimpleAnimation.State.enabled { get; set; }
	private bool SimpleAnimation.State.isValid { get; }
	private float SimpleAnimation.State.time { get; set; }
	private float SimpleAnimation.State.normalizedTime { get; set; }
	private float SimpleAnimation.State.speed { get; set; }
	private string SimpleAnimation.State.name { get; set; }
	private float SimpleAnimation.State.weight { get; set; }
	private float SimpleAnimation.State.length { get; }
	private AnimationClip SimpleAnimation.State.clip { get; }
	private WrapMode SimpleAnimation.State.wrapMode { get; set; }
	private WrapMode SimpleAnimation.State.overwrittenWrapMode { get; set; }
	private bool SimpleAnimation.State.isOverwrittenWrapMode { get; }

	// Methods

	// RVA: 0x1319CD0 Offset: 0x1319CD0 VA: 0x1319CD0
	public void .ctor(SimpleAnimationPlayable.IState handle, SimpleAnimation component) { }

	// RVA: 0x131AE14 Offset: 0x131AE14 VA: 0x131AE14 Slot: 4
	private bool SimpleAnimation.State.get_enabled() { }

	// RVA: 0x131AECC Offset: 0x131AECC VA: 0x131AECC Slot: 5
	private void SimpleAnimation.State.set_enabled(bool value) { }

	// RVA: 0x131AFC8 Offset: 0x131AFC8 VA: 0x131AFC8 Slot: 6
	private bool SimpleAnimation.State.get_isValid() { }

	// RVA: 0x131B07C Offset: 0x131B07C VA: 0x131B07C Slot: 7
	private float SimpleAnimation.State.get_time() { }

	// RVA: 0x131B134 Offset: 0x131B134 VA: 0x131B134 Slot: 8
	private void SimpleAnimation.State.set_time(float value) { }

	// RVA: 0x131B22C Offset: 0x131B22C VA: 0x131B22C Slot: 9
	private float SimpleAnimation.State.get_normalizedTime() { }

	// RVA: 0x131B2E4 Offset: 0x131B2E4 VA: 0x131B2E4 Slot: 10
	private void SimpleAnimation.State.set_normalizedTime(float value) { }

	// RVA: 0x131B3DC Offset: 0x131B3DC VA: 0x131B3DC Slot: 11
	private float SimpleAnimation.State.get_speed() { }

	// RVA: 0x131B494 Offset: 0x131B494 VA: 0x131B494 Slot: 12
	private void SimpleAnimation.State.set_speed(float value) { }

	// RVA: 0x131B58C Offset: 0x131B58C VA: 0x131B58C Slot: 13
	private string SimpleAnimation.State.get_name() { }

	// RVA: 0x131B644 Offset: 0x131B644 VA: 0x131B644 Slot: 14
	private void SimpleAnimation.State.set_name(string value) { }

	// RVA: 0x131B70C Offset: 0x131B70C VA: 0x131B70C Slot: 15
	private float SimpleAnimation.State.get_weight() { }

	// RVA: 0x131B7C4 Offset: 0x131B7C4 VA: 0x131B7C4 Slot: 16
	private void SimpleAnimation.State.set_weight(float value) { }

	// RVA: 0x131B8BC Offset: 0x131B8BC VA: 0x131B8BC Slot: 17
	private float SimpleAnimation.State.get_length() { }

	// RVA: 0x131B974 Offset: 0x131B974 VA: 0x131B974 Slot: 18
	private AnimationClip SimpleAnimation.State.get_clip() { }

	// RVA: 0x131BA2C Offset: 0x131BA2C VA: 0x131BA2C Slot: 19
	private WrapMode SimpleAnimation.State.get_wrapMode() { }

	// RVA: 0x131BAE4 Offset: 0x131BAE4 VA: 0x131BAE4 Slot: 20
	private void SimpleAnimation.State.set_wrapMode(WrapMode value) { }

	// RVA: 0x131BB50 Offset: 0x131BB50 VA: 0x131BB50 Slot: 21
	private WrapMode SimpleAnimation.State.get_overwrittenWrapMode() { }

	// RVA: 0x131BC08 Offset: 0x131BC08 VA: 0x131BC08 Slot: 22
	private void SimpleAnimation.State.set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x131BCD0 Offset: 0x131BCD0 VA: 0x131BCD0 Slot: 23
	private bool SimpleAnimation.State.get_isOverwrittenWrapMode() { }
}

// Namespace: 
[Serializable]
public class SimpleAnimation.EditorState // TypeDefIndex: 3714
{
	// Fields
	public AnimationClip clip; // 0x10
	public string name; // 0x18

	// Methods

	// RVA: 0x1319F00 Offset: 0x1319F00 VA: 0x1319F00
	public void .ctor() { }
}

// Namespace: 
public class SimpleAnimationPlayable : PlayableBehaviour // TypeDefIndex: 3715
{
	// Fields
	private LinkedList<SimpleAnimationPlayable.QueuedState> m_StateQueue; // 0x10
	private SimpleAnimationPlayable.StateManagement m_States; // 0x18
	private bool m_Initialized; // 0x20
	private bool m_KeepStoppedPlayablesConnected; // 0x21
	protected Playable m_ActualPlayable; // 0x28
	private AnimationMixerPlayable m_Mixer; // 0x38
	public Action onDone; // 0x48
	private int m_StatesVersion; // 0x50

	// Properties
	public bool keepStoppedPlayablesConnected { get; set; }
	protected Playable self { get; }
	public Playable playable { get; }
	protected PlayableGraph graph { get; }

	// Methods

	// RVA: 0x1319E68 Offset: 0x1319E68 VA: 0x1319E68
	public void .ctor() { }

	// RVA: 0x131BDFC Offset: 0x131BDFC VA: 0x131BDFC
	public bool get_keepStoppedPlayablesConnected() { }

	// RVA: 0x131BE04 Offset: 0x131BE04 VA: 0x131BE04
	public void set_keepStoppedPlayablesConnected(bool value) { }

	// RVA: 0x131BE24 Offset: 0x131BE24 VA: 0x131BE24
	private void UpdateStoppedPlayablesConnections() { }

	// RVA: 0x131C0CC Offset: 0x131C0CC VA: 0x131C0CC
	protected Playable get_self() { }

	// RVA: 0x131A02C Offset: 0x131A02C VA: 0x131A02C
	public Playable get_playable() { }

	// RVA: 0x131C0D8 Offset: 0x131C0D8 VA: 0x131C0D8
	protected PlayableGraph get_graph() { }

	// RVA: 0x131C128 Offset: 0x131C128 VA: 0x131C128
	public Playable GetInput(int index) { }

	// RVA: 0x131C1D8 Offset: 0x131C1D8 VA: 0x131C1D8 Slot: 15
	public override void OnPlayableCreate(Playable playable) { }

	// RVA: 0x131AB44 Offset: 0x131AB44 VA: 0x131AB44
	public IEnumerable<SimpleAnimationPlayable.IState> GetStates() { }

	// RVA: 0x1319C20 Offset: 0x1319C20 VA: 0x1319C20
	public SimpleAnimationPlayable.IState GetState(string name) { }

	// RVA: 0x131C480 Offset: 0x131C480 VA: 0x131C480
	private SimpleAnimationPlayable.StateInfo DoAddClip(string name, AnimationClip clip) { }

	// RVA: 0x1318924 Offset: 0x1318924 VA: 0x1318924
	public bool AddClip(AnimationClip clip, string name) { }

	// RVA: 0x1318EE4 Offset: 0x1318EE4 VA: 0x1318EE4
	public bool RemoveClip(string name) { }

	// RVA: 0x131981C Offset: 0x131981C VA: 0x131981C
	public bool RemoveClip(AnimationClip clip) { }

	// RVA: 0x1318834 Offset: 0x1318834 VA: 0x1318834
	public bool Play(string name) { }

	// RVA: 0x131CC4C Offset: 0x131CC4C VA: 0x131CC4C
	private bool Play(int index) { }

	// RVA: 0x1319624 Offset: 0x1319624 VA: 0x1319624
	public bool PlayQueued(string name, QueueMode queueMode) { }

	// RVA: 0x131CDE8 Offset: 0x131CDE8 VA: 0x131CDE8
	private bool PlayQueued(int index, QueueMode queueMode) { }

	// RVA: 0x13199B0 Offset: 0x13199B0 VA: 0x13199B0
	public void Rewind(string name) { }

	// RVA: 0x131D07C Offset: 0x131D07C VA: 0x131D07C
	private void Rewind(int index) { }

	// RVA: 0x13198BC Offset: 0x13198BC VA: 0x13198BC
	public void Rewind() { }

	// RVA: 0x131C8FC Offset: 0x131C8FC VA: 0x131C8FC
	private void RemoveClones(SimpleAnimationPlayable.StateInfo state) { }

	// RVA: 0x1318620 Offset: 0x1318620 VA: 0x1318620
	public bool Stop(string name) { }

	// RVA: 0x131CD48 Offset: 0x131CD48 VA: 0x131CD48
	private void DoStop(int index) { }

	// RVA: 0x1318510 Offset: 0x1318510 VA: 0x1318510
	public bool StopAll() { }

	// RVA: 0x131793C Offset: 0x131793C VA: 0x131793C
	public bool IsPlaying() { }

	// RVA: 0x13179A4 Offset: 0x13179A4 VA: 0x13179A4
	public bool CheckPlaying() { }

	// RVA: 0x131843C Offset: 0x131843C VA: 0x131843C
	public bool IsPlaying(string stateName) { }

	// RVA: 0x131D474 Offset: 0x131D474 VA: 0x131D474
	private bool IsClonePlaying(SimpleAnimationPlayable.StateInfo state) { }

	// RVA: 0x1318378 Offset: 0x1318378 VA: 0x1318378
	public int GetClipCount() { }

	// RVA: 0x131D534 Offset: 0x131D534 VA: 0x131D534
	private void SetupLerp(SimpleAnimationPlayable.StateInfo state, float targetWeight, float time) { }

	// RVA: 0x131D6E4 Offset: 0x131D6E4 VA: 0x131D6E4
	private bool Crossfade(int index, float time) { }

	// RVA: 0x131CEAC Offset: 0x131CEAC VA: 0x131CEAC
	private SimpleAnimationPlayable.StateInfo CloneState(int index) { }

	// RVA: 0x1318068 Offset: 0x1318068 VA: 0x1318068
	public bool Crossfade(string name, float time) { }

	// RVA: 0x1318234 Offset: 0x1318234 VA: 0x1318234
	public bool CrossfadeQueued(string name, float time, QueueMode queueMode) { }

	// RVA: 0x131D874 Offset: 0x131D874 VA: 0x131D874
	private bool CrossfadeQueued(int index, float time, QueueMode queueMode) { }

	// RVA: 0x131D948 Offset: 0x131D948 VA: 0x131D948
	private bool Blend(int index, float targetWeight, float time) { }

	// RVA: 0x1317EB8 Offset: 0x1317EB8 VA: 0x1317EB8
	public bool Blend(string name, float targetWeight, float time) { }

	// RVA: 0x131DA00 Offset: 0x131DA00 VA: 0x131DA00 Slot: 14
	public override void OnGraphStop(Playable playable) { }

	// RVA: 0x131C840 Offset: 0x131C840 VA: 0x131C840
	private void UpdateDoneStatus() { }

	// RVA: 0x131C00C Offset: 0x131C00C VA: 0x131C00C
	private void DisconnectInput(int index) { }

	// RVA: 0x131BF34 Offset: 0x131BF34 VA: 0x131BF34
	private void ConnectInput(int index) { }

	// RVA: 0x131DB4C Offset: 0x131DB4C VA: 0x131DB4C
	private void UpdateStates(float deltaTime) { }

	// RVA: 0x131DFB8 Offset: 0x131DFB8 VA: 0x131DFB8
	private float CalculateQueueTimes() { }

	// RVA: 0x131E1A4 Offset: 0x131E1A4 VA: 0x131E1A4
	private void ClearQueuedStates() { }

	// RVA: 0x131E324 Offset: 0x131E324 VA: 0x131E324
	private void UpdateQueuedStates() { }

	// RVA: 0x131E428 Offset: 0x131E428 VA: 0x131E428
	private void InvalidateStateTimes() { }

	// RVA: 0x131E4A4 Offset: 0x131E4A4 VA: 0x131E4A4 Slot: 19
	public override void PrepareFrame(Playable owner, FrameData data) { }

	// RVA: 0x131E4E8 Offset: 0x131E4E8 VA: 0x131E4E8
	public bool ValidateInput(int index, Playable input) { }

	// RVA: 0x131E618 Offset: 0x131E618 VA: 0x131E618
	public bool ValidateIndex(int index) { }

	// RVA: 0x131C8EC Offset: 0x131C8EC VA: 0x131C8EC
	private void InvalidateStates() { }

	// RVA: 0x131CFC8 Offset: 0x131CFC8 VA: 0x131CFC8
	private SimpleAnimationPlayable.StateHandle StateInfoToHandle(SimpleAnimationPlayable.StateInfo info) { }
}

// Namespace: 
private class SimpleAnimationPlayable.StateEnumerable : IEnumerable<SimpleAnimationPlayable.IState>, IEnumerable // TypeDefIndex: 3716
{
	// Fields
	private SimpleAnimationPlayable m_Owner; // 0x10

	// Methods

	// RVA: 0x131C2E8 Offset: 0x131C2E8 VA: 0x131C2E8
	public void .ctor(SimpleAnimationPlayable owner) { }

	// RVA: 0x131E65C Offset: 0x131E65C VA: 0x131E65C Slot: 4
	public IEnumerator<SimpleAnimationPlayable.IState> GetEnumerator() { }

	// RVA: 0x131E70C Offset: 0x131E70C VA: 0x131E70C Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private class SimpleAnimationPlayable.StateEnumerable.StateEnumerator : IEnumerator<SimpleAnimationPlayable.IState>, IEnumerator, IDisposable // TypeDefIndex: 3717
{
	// Fields
	private int m_Index; // 0x10
	private int m_Version; // 0x14
	private SimpleAnimationPlayable m_Owner; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private SimpleAnimationPlayable.IState System.Collections.Generic.IEnumerator<SimpleAnimationPlayable.IState>.Current { get; }

	// Methods

	// RVA: 0x131E6C0 Offset: 0x131E6C0 VA: 0x131E6C0
	public void .ctor(SimpleAnimationPlayable owner) { }

	// RVA: 0x131E814 Offset: 0x131E814 VA: 0x131E814
	private bool IsValid() { }

	// RVA: 0x131E838 Offset: 0x131E838 VA: 0x131E838
	private SimpleAnimationPlayable.IState GetCurrentHandle(int index) { }

	// RVA: 0x131E98C Offset: 0x131E98C VA: 0x131E98C Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x131E994 Offset: 0x131E994 VA: 0x131E994 Slot: 4
	private SimpleAnimationPlayable.IState System.Collections.Generic.IEnumerator<SimpleAnimationPlayable.IState>.get_Current() { }

	// RVA: 0x131E99C Offset: 0x131E99C VA: 0x131E99C Slot: 8
	public void Dispose() { }

	// RVA: 0x131E9A0 Offset: 0x131E9A0 VA: 0x131E9A0 Slot: 6
	public bool MoveNext() { }

	// RVA: 0x131E770 Offset: 0x131E770 VA: 0x131E770 Slot: 7
	public void Reset() { }
}

// Namespace: 
public interface SimpleAnimationPlayable.IState // TypeDefIndex: 3718
{
	// Properties
	public abstract bool enabled { get; set; }
	public abstract float time { get; set; }
	public abstract float normalizedTime { get; set; }
	public abstract float speed { get; set; }
	public abstract string name { get; set; }
	public abstract float weight { get; set; }
	public abstract float length { get; }
	public abstract AnimationClip clip { get; }
	public abstract WrapMode wrapMode { get; }
	public abstract WrapMode overwrittenWrapMode { get; set; }
	public abstract bool isOverwrittenWrapMode { get; }
	public abstract float wrapModeChangedTime { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsValid();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_enabled();

	// RVA: -1 Offset: -1 Slot: 2
