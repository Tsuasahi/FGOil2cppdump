	// RVA: 0x2AD4A94 Offset: 0x2AD4A94 VA: 0x2AD4A94
	private void Complete() { }

	// RVA: 0x2AD39C4 Offset: 0x2AD39C4 VA: 0x2AD39C4
	private void BsSetStream(Stream stream) { }

	// RVA: 0x2AD5928 Offset: 0x2AD5928 VA: 0x2AD5928
	private void FillBuffer() { }

	// RVA: 0x2AD4BAC Offset: 0x2AD4BAC VA: 0x2AD4BAC
	private int BsR(int n) { }

	// RVA: 0x2AD4994 Offset: 0x2AD4994 VA: 0x2AD4994
	private char BsGetUChar() { }

	// RVA: 0x2AD5A8C Offset: 0x2AD5A8C VA: 0x2AD5A8C
	private int BsGetIntVS(int numBits) { }

	// RVA: 0x2AD4B44 Offset: 0x2AD4B44 VA: 0x2AD4B44
	private int BsGetInt32() { }

	// RVA: 0x2AD5A90 Offset: 0x2AD5A90 VA: 0x2AD5A90
	private void RecvDecodingTables() { }

	// RVA: 0x2AD4C10 Offset: 0x2AD4C10 VA: 0x2AD4C10
	private void GetAndMoveToFrontDecode() { }

	// RVA: 0x2AD3C78 Offset: 0x2AD3C78 VA: 0x2AD3C78
	private void SetupBlock() { }

	// RVA: 0x2AD66B4 Offset: 0x2AD66B4 VA: 0x2AD66B4
	private void SetupRandPartA() { }

	// RVA: 0x2AD68D8 Offset: 0x2AD68D8 VA: 0x2AD68D8
	private void SetupNoRandPartA() { }

	// RVA: 0x2AD43C4 Offset: 0x2AD43C4 VA: 0x2AD43C4
	private void SetupRandPartB() { }

	// RVA: 0x2AD457C Offset: 0x2AD457C VA: 0x2AD457C
	private void SetupRandPartC() { }

	// RVA: 0x2AD4694 Offset: 0x2AD4694 VA: 0x2AD4694
	private void SetupNoRandPartB() { }

	// RVA: 0x2AD4790 Offset: 0x2AD4790 VA: 0x2AD4790
	private void SetupNoRandPartC() { }

	// RVA: 0x2AD49AC Offset: 0x2AD49AC VA: 0x2AD49AC
	private void SetDecompressStructureSizes(int newSize100k) { }

	// RVA: 0x2AD5A18 Offset: 0x2AD5A18 VA: 0x2AD5A18
	private static void CompressedStreamEOF() { }

	// RVA: 0x2AD6640 Offset: 0x2AD6640 VA: 0x2AD6640
	private static void BlockOverrun() { }

	// RVA: 0x2AD4AD0 Offset: 0x2AD4AD0 VA: 0x2AD4AD0
	private static void BadBlockHeader() { }

	// RVA: 0x2AD58B4 Offset: 0x2AD58B4 VA: 0x2AD58B4
	private static void CrcError() { }

	// RVA: 0x2AD6274 Offset: 0x2AD6274 VA: 0x2AD6274
	private static void HbCreateDecodeTables(int[] limit, int[] baseArray, int[] perm, char[] length, int minLen, int maxLen, int alphaSize) { }
}

// Namespace: ICSharpCode.SharpZipLib.BZip2
public class BZip2OutputStream : Stream // TypeDefIndex: 3693
{
	// Fields
	private readonly int[] increments; // 0x10
	private bool isStreamOwner; // 0x18
	private int last; // 0x1C
	private int origPtr; // 0x20
	private int blockSize100k; // 0x24
	private bool blockRandomised; // 0x28
	private int bytesOut; // 0x2C
	private int bsBuff; // 0x30
	private int bsLive; // 0x34
	private IChecksum mCrc; // 0x38
	private bool[] inUse; // 0x40
	private int nInUse; // 0x48
	private char[] seqToUnseq; // 0x50
	private char[] unseqToSeq; // 0x58
	private char[] selector; // 0x60
	private char[] selectorMtf; // 0x68
	private byte[] block; // 0x70
	private int[] quadrant; // 0x78
	private int[] zptr; // 0x80
	private short[] szptr; // 0x88
	private int[] ftab; // 0x90
	private int nMTF; // 0x98
	private int[] mtfFreq; // 0xA0
	private int workFactor; // 0xA8
	private int workDone; // 0xAC
	private int workLimit; // 0xB0
	private bool firstAttempt; // 0xB4
	private int nBlocksRandomised; // 0xB8
	private int currentChar; // 0xBC
	private int runLength; // 0xC0
	private uint blockCRC; // 0xC4
	private uint combinedCRC; // 0xC8
	private int allowableBlockSize; // 0xCC
	private Stream baseStream; // 0xD0
	private bool disposed_; // 0xD8
	private BZip2OutputStream.StackElement[] stack; // 0xE0

	// Properties
	public bool IsStreamOwner { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2AD6A68 Offset: 0x2AD6A68 VA: 0x2AD6A68
	public void .ctor(Stream stream) { }

	// RVA: 0x2AD6A70 Offset: 0x2AD6A70 VA: 0x2AD6A70
	public void .ctor(Stream stream, int blockSize) { }

	// RVA: 0x2AD6E90 Offset: 0x2AD6E90 VA: 0x2AD6E90 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x2AD6F10 Offset: 0x2AD6F10 VA: 0x2AD6F10
	public bool get_IsStreamOwner() { }

	// RVA: 0x2AD6F18 Offset: 0x2AD6F18 VA: 0x2AD6F18 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2AD6F20 Offset: 0x2AD6F20 VA: 0x2AD6F20 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2AD6F28 Offset: 0x2AD6F28 VA: 0x2AD6F28 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2AD6F5C Offset: 0x2AD6F5C VA: 0x2AD6F5C Slot: 9
	public override long get_Length() { }

	// RVA: 0x2AD6F90 Offset: 0x2AD6F90 VA: 0x2AD6F90 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2AD6FC4 Offset: 0x2AD6FC4 VA: 0x2AD6FC4 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2AD7038 Offset: 0x2AD7038 VA: 0x2AD7038 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2AD70AC Offset: 0x2AD70AC VA: 0x2AD70AC Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2AD7120 Offset: 0x2AD7120 VA: 0x2AD7120 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x2AD7194 Offset: 0x2AD7194 VA: 0x2AD7194 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AD7208 Offset: 0x2AD7208 VA: 0x2AD7208 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AD7394 Offset: 0x2AD7394 VA: 0x2AD7394 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x2AD7814 Offset: 0x2AD7814 VA: 0x2AD7814 Slot: 13
	public override void Close() { }

	// RVA: 0x2AD7848 Offset: 0x2AD7848 VA: 0x2AD7848
	private void MakeMaps() { }

	// RVA: 0x2AD7414 Offset: 0x2AD7414 VA: 0x2AD7414
	private void WriteRun() { }

	// RVA: 0x2AD7AC0 Offset: 0x2AD7AC0 VA: 0x2AD7AC0 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2AD7D2C Offset: 0x2AD7D2C VA: 0x2AD7D2C Slot: 18
	public override void Flush() { }

	// RVA: 0x2AD6D04 Offset: 0x2AD6D04 VA: 0x2AD6D04
	private void Initialize() { }

	// RVA: 0x2AD6D6C Offset: 0x2AD6D6C VA: 0x2AD6D6C
	private void InitBlock() { }

	// RVA: 0x2AD7934 Offset: 0x2AD7934 VA: 0x2AD7934
	private void EndBlock() { }

	// RVA: 0x2AD7CA4 Offset: 0x2AD7CA4 VA: 0x2AD7CA4
	private void EndCompression() { }

	// RVA: 0x2AD6C24 Offset: 0x2AD6C24 VA: 0x2AD6C24
	private void BsSetStream(Stream stream) { }

	// RVA: 0x2AD7F94 Offset: 0x2AD7F94 VA: 0x2AD7F94
	private void BsFinishedWithStream() { }

	// RVA: 0x2AD7EBC Offset: 0x2AD7EBC VA: 0x2AD7EBC
	private void BsW(int n, int v) { }

	// RVA: 0x2AD7D64 Offset: 0x2AD7D64 VA: 0x2AD7D64
	private void BsPutUChar(int c) { }

	// RVA: 0x2AD7E64 Offset: 0x2AD7E64 VA: 0x2AD7E64
	private void BsPutint(int u) { }

	// RVA: 0x2AD8014 Offset: 0x2AD8014 VA: 0x2AD8014
	private void BsPutIntVS(int numBits, int c) { }

	// RVA: 0x2AD8018 Offset: 0x2AD8018 VA: 0x2AD8018
	private void SendMTFValues() { }

	// RVA: 0x2AD7F60 Offset: 0x2AD7F60 VA: 0x2AD7F60
	private void MoveToFrontCodeAndSend() { }

	// RVA: 0x2ADADDC Offset: 0x2ADADDC VA: 0x2ADADDC
	private void SimpleSort(int lo, int hi, int d) { }

	// RVA: 0x2ADBA88 Offset: 0x2ADBA88 VA: 0x2ADBA88
	private void Vswap(int p1, int p2, int n) { }

	// RVA: 0x2ADBBB4 Offset: 0x2ADBBB4 VA: 0x2ADBBB4
	private void QSort3(int loSt, int hiSt, int dSt) { }

	// RVA: 0x2ADC734 Offset: 0x2ADC734 VA: 0x2ADC734
	private void MainSort() { }

	// RVA: 0x2ADD7A0 Offset: 0x2ADD7A0 VA: 0x2ADD7A0
	private void RandomiseBlock() { }

	// RVA: 0x2AD7D74 Offset: 0x2AD7D74 VA: 0x2AD7D74
	private void DoReversibleTransformation() { }

	// RVA: 0x2ADB330 Offset: 0x2ADB330 VA: 0x2ADB330
	private bool FullGtU(int i1, int i2) { }

	// RVA: 0x2AD6C34 Offset: 0x2AD6C34 VA: 0x2AD6C34
	private void AllocateCompressStructures() { }

	// RVA: 0x2ADA7B8 Offset: 0x2ADA7B8 VA: 0x2ADA7B8
	private void GenerateMTFValues() { }

	// RVA: 0x2AD9874 Offset: 0x2AD9874 VA: 0x2AD9874
	private static void Panic() { }

	// RVA: 0x2AD98E8 Offset: 0x2AD98E8 VA: 0x2AD98E8
	private static void HbMakeCodeLengths(char[] len, int[] freq, int alphaSize, int maxLen) { }

	// RVA: 0x2ADA6C8 Offset: 0x2ADA6C8 VA: 0x2ADA6C8
	private static void HbAssignCodes(int[] code, char[] length, int minLen, int maxLen, int alphaSize) { }

	// RVA: 0x2ADC708 Offset: 0x2ADC708 VA: 0x2ADC708
	private static byte Med3(byte a, byte b, byte c) { }
}

// Namespace: 
private struct BZip2OutputStream.StackElement // TypeDefIndex: 3694
{
	// Fields
	public int ll; // 0x0
	public int hh; // 0x4
	public int dd; // 0x8
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D1F8 Offset: 0xC1D1F8 VA: 0xC1D1F8
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3695
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 00C40B3F013EDA60390F2E849C4581815A9419E4 /*Metadata offset 0x782AE5*/; // 0x0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 03B569C38E3CD6B720388919D43735A904012C52 /*Metadata offset 0x782B0D*/; // 0x28
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 1FDC8DB567F5AAA7068D0D2A601CD71657CBDF38 /*Metadata offset 0x782B35*/; // 0x50
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1024 373B494F210C656134C5728D551D4C97B013EB33 /*Metadata offset 0x782B81*/; // 0x9C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1024 63E9EBF6EEB814FC6AC2677ADF6EA944403C9636 /*Metadata offset 0x782F81*/; // 0x49C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=116 67C0E784F3654B008A81E2988588CF4956CCF3DA /*Metadata offset 0x783381*/; // 0x89C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 6BC4EAB0D604C8D4599021AD611C5DBA7FF7E306 /*Metadata offset 0x7833F5*/; // 0x910
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 79D521E6E3E55103005E9CC3FA43B3174FAF090F /*Metadata offset 0x78341D*/; // 0x938
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=56 7E7FE80AB0CE0F0A7CFAAAFE71AF40B0CDFABB74 /*Metadata offset 0x783495*/; // 0x9B0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 89CE0E8EA590FD37283D6BEFD9E6805C8C47ADBD /*Metadata offset 0x7834CD*/; // 0x9E8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2048 8BE2836811ABA71A450EC6F4D1DCD8BF44E1CFB7 /*Metadata offset 0x7834DD*/; // 0x9F8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 A586F56BA53FACE320144ADA40A15A33B2715025 /*Metadata offset 0x783CDD*/; // 0x11F8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 B564A7A433EE1DA50C5E152A99F25DBC09BA835F /*Metadata offset 0x783CE9*/; // 0x1204
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 D068832E6B13A623916709C1E0E25ADCBE7B455F /*Metadata offset 0x783CF5*/; // 0x1210
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=116 D8E4ACBC2D957C3344A3CAD69FCF9A60C8034DBF /*Metadata offset 0x783D6D*/; // 0x1288
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 DB7C763C9670DD0F6ED34B75B3410A39D835F964 /*Metadata offset 0x783DE1*/; // 0x12FC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 E727EF4792A349C485D893E60874475A54F24B97 /*Metadata offset 0x783E09*/; // 0x1324
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 ED032026472FF77A8A17BA4AFF3FC57AF4B4BF79 /*Metadata offset 0x783E13*/; // 0x132E
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 // TypeDefIndex: 3696
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 3697
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 // TypeDefIndex: 3698
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 // TypeDefIndex: 3699
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=56 // TypeDefIndex: 3700
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 // TypeDefIndex: 3701
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=116 // TypeDefIndex: 3702
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 // TypeDefIndex: 3703
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1024 // TypeDefIndex: 3704
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2048 // TypeDefIndex: 3705
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 3706
{}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC1D414 Offset: 0xC1D414 VA: 0xC1D414
public static class CustomPlayableExtensions // TypeDefIndex: 3707
{
	// Methods

	[ExtensionAttribute] // RVA: 0xC1D59C Offset: 0xC1D59C VA: 0xC1D59C
	// RVA: 0x2B28780 Offset: 0x2B28780 VA: 0x2B28780
	public static void ResetTime(Playable playable, float time) { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC1D424 Offset: 0xC1D424 VA: 0xC1D424
[RequireComponent] // RVA: 0xC1D424 Offset: 0xC1D424 VA: 0xC1D424
[DefaultMemberAttribute] // RVA: 0xC1D424 Offset: 0xC1D424 VA: 0xC1D424
public class SimpleAnimation : MonoBehaviour, IAnimationClipSource // TypeDefIndex: 3708
{
	// Fields
	protected PlayableGraph m_Graph; // 0x18
	protected PlayableHandle m_LayerMixer; // 0x28
	protected PlayableHandle m_TransitionMixer; // 0x38
	protected Animator m_Animator; // 0x48
	protected bool m_Initialized; // 0x50
	protected bool m_IsPlaying; // 0x51
	protected SimpleAnimationPlayable m_Playable; // 0x58
	[SerializeField] // RVA: 0xC1D51C Offset: 0xC1D51C VA: 0xC1D51C
	protected bool m_PlayAutomatically; // 0x60
	[SerializeField] // RVA: 0xC1D52C Offset: 0xC1D52C VA: 0xC1D52C
	protected bool m_AnimatePhysics; // 0x61
	[SerializeField] // RVA: 0xC1D53C Offset: 0xC1D53C VA: 0xC1D53C
	protected AnimatorCullingMode m_CullingMode; // 0x64
	[SerializeField] // RVA: 0xC1D54C Offset: 0xC1D54C VA: 0xC1D54C
	protected WrapMode m_WrapMode; // 0x68
	[SerializeField] // RVA: 0xC1D55C Offset: 0xC1D55C VA: 0xC1D55C
	protected AnimationClip m_Clip; // 0x70
	[SerializeField] // RVA: 0xC1D56C Offset: 0xC1D56C VA: 0xC1D56C
	private SimpleAnimation.EditorState[] m_States; // 0x78

	// Properties
	public Animator animator { get; }
	public bool animatePhysics { get; set; }
	public AnimatorCullingMode cullingMode { get; set; }
	public bool isPlaying { get; }
	public bool playAutomatically { get; set; }
	public AnimationClip clip { get; set; }
	public WrapMode wrapMode { get; set; }
	public SimpleAnimation.State Item { get; }
	public SimpleAnimation.EditorState[] States { get; }

	// Methods

	// RVA: 0x2B28808 Offset: 0x2B28808 VA: 0x2B28808
	public void .ctor() { }

	// RVA: 0x2B2881C Offset: 0x2B2881C VA: 0x2B2881C
	public Animator get_animator() { }

	// RVA: 0x2B288B4 Offset: 0x2B288B4 VA: 0x2B288B4
	public bool get_animatePhysics() { }

	// RVA: 0x2B288BC Offset: 0x2B288BC VA: 0x2B288BC
	public void set_animatePhysics(bool value) { }

	// RVA: 0x2B28900 Offset: 0x2B28900 VA: 0x2B28900
	public AnimatorCullingMode get_cullingMode() { }

	// RVA: 0x2B28930 Offset: 0x2B28930 VA: 0x2B28930
	public void set_cullingMode(AnimatorCullingMode value) { }

	// RVA: 0x2B28970 Offset: 0x2B28970 VA: 0x2B28970
	public bool get_isPlaying() { }

	// RVA: 0x2B289D8 Offset: 0x2B289D8 VA: 0x2B289D8
	public bool CheckPlaying() { }

	// RVA: 0x2B28C10 Offset: 0x2B28C10 VA: 0x2B28C10
	public bool get_playAutomatically() { }

	// RVA: 0x2B28C18 Offset: 0x2B28C18 VA: 0x2B28C18
	public void set_playAutomatically(bool value) { }

	// RVA: 0x2B28C24 Offset: 0x2B28C24 VA: 0x2B28C24
	public AnimationClip get_clip() { }

	// RVA: 0x2B28C2C Offset: 0x2B28C2C VA: 0x2B28C2C
	public void set_clip(AnimationClip value) { }

	// RVA: 0x2B28D60 Offset: 0x2B28D60 VA: 0x2B28D60
	public WrapMode get_wrapMode() { }

	// RVA: 0x2B28D68 Offset: 0x2B28D68 VA: 0x2B28D68
	public void set_wrapMode(WrapMode value) { }

	// RVA: 0x2B28D70 Offset: 0x2B28D70 VA: 0x2B28D70
	public void AddClip(AnimationClip clip, string newName) { }

	// RVA: 0x2B28E40 Offset: 0x2B28E40 VA: 0x2B28E40
	public void Blend(string stateName, float targetWeight, float fadeLength) { }

	// RVA: 0x2B29030 Offset: 0x2B29030 VA: 0x2B29030
	public void CrossFade(string stateName, float fadeLength) { }

	// RVA: 0x2B291E8 Offset: 0x2B291E8 VA: 0x2B291E8
	public void CrossFadeQueued(string stateName, float fadeLength, QueueMode queueMode) { }

	// RVA: 0x2B293AC Offset: 0x2B293AC VA: 0x2B293AC
	public int GetClipCount() { }

	// RVA: 0x2B29460 Offset: 0x2B29460 VA: 0x2B29460
	public bool IsPlaying(string stateName) { }

	// RVA: 0x2B2951C Offset: 0x2B2951C VA: 0x2B2951C
	public void Stop() { }

	// RVA: 0x2B29618 Offset: 0x2B29618 VA: 0x2B29618
	public void Stop(string stateName) { }

	// RVA: 0x2B29788 Offset: 0x2B29788 VA: 0x2B29788
	public void Sample() { }

	// RVA: 0x2B297A0 Offset: 0x2B297A0 VA: 0x2B297A0
	public bool Play() { }

	// RVA: 0x2B28DB0 Offset: 0x2B28DB0 VA: 0x2B28DB0
	public void AddState(AnimationClip clip, string name) { }

	// RVA: 0x2B29EF0 Offset: 0x2B29EF0 VA: 0x2B29EF0
	public void RemoveState(string name) { }

	// RVA: 0x2B2A074 Offset: 0x2B2A074 VA: 0x2B2A074
	public bool Play(string stateName) { }

	// RVA: 0x2B2A5D8 Offset: 0x2B2A5D8 VA: 0x2B2A5D8
	public void PlayQueued(string stateName, QueueMode queueMode) { }

	// RVA: 0x2B2A78C Offset: 0x2B2A78C VA: 0x2B2A78C
	public void RemoveClip(AnimationClip clip) { }

	// RVA: 0x2B2A8CC Offset: 0x2B2A8CC VA: 0x2B2A8CC
	public void Rewind() { }

	// RVA: 0x2B2A9B8 Offset: 0x2B2A9B8 VA: 0x2B2A9B8
	public void Rewind(string stateName) { }

	// RVA: 0x2B2AB0C Offset: 0x2B2AB0C VA: 0x2B2AB0C
	public SimpleAnimation.State GetState(string stateName) { }

	// RVA: 0x2B2AD78 Offset: 0x2B2AD78 VA: 0x2B2AD78
	public IEnumerable<SimpleAnimation.State> GetStates() { }

	// RVA: 0x2B2AE08 Offset: 0x2B2AE08 VA: 0x2B2AE08
	public SimpleAnimation.State get_Item(string name) { }

	// RVA: 0x2B28EF0 Offset: 0x2B28EF0 VA: 0x2B28EF0
	protected void Kick() { }

	// RVA: 0x2B2AE0C Offset: 0x2B2AE0C VA: 0x2B2AE0C Slot: 4
	protected virtual void OnEnable() { }

	// RVA: 0x2B2AE58 Offset: 0x2B2AE58 VA: 0x2B2AE58 Slot: 5
	protected virtual void OnDisable() { }

	// RVA: 0x2B2AE98 Offset: 0x2B2AE98 VA: 0x2B2AE98
	private void Reset() { }

	// RVA: 0x2B2A120 Offset: 0x2B2A120 VA: 0x2B2A120
	private void Initialize() { }

	// RVA: 0x2B2AF78 Offset: 0x2B2AF78 VA: 0x2B2AF78
	private void EnsureDefaultStateExists() { }

	// RVA: 0x2B2B0A8 Offset: 0x2B2B0A8 VA: 0x2B2B0A8 Slot: 6
	protected virtual void Awake() { }

	// RVA: 0x2B2B0AC Offset: 0x2B2B0AC VA: 0x2B2B0AC
	protected void OnDestroy() { }

	// RVA: 0x2B2B0EC Offset: 0x2B2B0EC VA: 0x2B2B0EC
	private void OnPlayableDone() { }

	// RVA: 0x2B29AA0 Offset: 0x2B29AA0 VA: 0x2B29AA0
	private void RebuildStates() { }

	// RVA: 0x2B2B118 Offset: 0x2B2B118 VA: 0x2B2B118
	private SimpleAnimation.EditorState CreateDefaultEditorState() { }

	// RVA: 0x2B28C58 Offset: 0x2B28C58 VA: 0x2B28C58
	private static void LegacyClipCheck(AnimationClip clip) { }

	// RVA: 0x2B2B1C0 Offset: 0x2B2B1C0 VA: 0x2B2B1C0
	private void InvalidLegacyClipError(string clipName, string stateName) { }

	// RVA: 0x2B2B290 Offset: 0x2B2B290 VA: 0x2B2B290
	private void OnValidate() { }

	// RVA: 0x2B2B804 Offset: 0x2B2B804 VA: 0x2B2B804
	public SimpleAnimation.EditorState[] get_States() { }

	// RVA: 0x2B2B80C Offset: 0x2B2B80C VA: 0x2B2B80C Slot: 7
	public void GetAnimationClips(List<AnimationClip> results) { }
}

// Namespace: 
public interface SimpleAnimation.State // TypeDefIndex: 3709
{
	// Properties
	public abstract bool enabled { get; set; }
	public abstract bool isValid { get; }
	public abstract float time { get; set; }
	public abstract float normalizedTime { get; set; }
	public abstract float speed { get; set; }
	public abstract string name { get; set; }
	public abstract float weight { get; set; }
	public abstract float length { get; }
	public abstract AnimationClip clip { get; }
	public abstract WrapMode wrapMode { get; set; }
	public abstract WrapMode overwrittenWrapMode { get; set; }
	public abstract bool isOverwrittenWrapMode { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_enabled();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_enabled(bool value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool get_isValid();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_time();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_time(float value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_normalizedTime();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void set_normalizedTime(float value);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_speed();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void set_speed(float value);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract string get_name();

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void set_name(string value);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract float get_weight();

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void set_weight(float value);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract float get_length();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract AnimationClip get_clip();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract WrapMode get_wrapMode();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void set_wrapMode(WrapMode value);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract WrapMode get_overwrittenWrapMode();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void set_overwrittenWrapMode(WrapMode value);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract bool get_isOverwrittenWrapMode();
}

// Namespace: 
private class SimpleAnimation.DummyStateImpl : SimpleAnimation.State // TypeDefIndex: 3710
{
	// Fields
	private string _name; // 0x10
	private AnimationClip _clip; // 0x18

	// Properties
	private bool SimpleAnimation.State.enabled { get; set; }
	private bool SimpleAnimation.State.isValid { get; }
	private float SimpleAnimation.State.time { get; set; }
	private float SimpleAnimation.State.normalizedTime { get; set; }
	private float SimpleAnimation.State.speed { get; set; }
	private string SimpleAnimation.State.name { get; set; }
	private float SimpleAnimation.State.weight { get; set; }
	private float SimpleAnimation.State.length { get; }
	private AnimationClip SimpleAnimation.State.clip { get; }
	private WrapMode SimpleAnimation.State.wrapMode { get; set; }
	private WrapMode SimpleAnimation.State.overwrittenWrapMode { get; set; }
	private bool SimpleAnimation.State.isOverwrittenWrapMode { get; }

	// Methods

	// RVA: 0x2B2AC58 Offset: 0x2B2AC58 VA: 0x2B2AC58
	public void .ctor(string name, AnimationClip clip) { }

	// RVA: 0x2B2B920 Offset: 0x2B2B920 VA: 0x2B2B920 Slot: 4
	private bool SimpleAnimation.State.get_enabled() { }

	// RVA: 0x2B2B928 Offset: 0x2B2B928 VA: 0x2B2B928 Slot: 5
	private void SimpleAnimation.State.set_enabled(bool value) { }

	// RVA: 0x2B2B92C Offset: 0x2B2B92C VA: 0x2B2B92C Slot: 6
	private bool SimpleAnimation.State.get_isValid() { }

	// RVA: 0x2B2B934 Offset: 0x2B2B934 VA: 0x2B2B934 Slot: 7
	private float SimpleAnimation.State.get_time() { }

	// RVA: 0x2B2B93C Offset: 0x2B2B93C VA: 0x2B2B93C Slot: 8
	private void SimpleAnimation.State.set_time(float value) { }

	// RVA: 0x2B2B940 Offset: 0x2B2B940 VA: 0x2B2B940 Slot: 9
	private float SimpleAnimation.State.get_normalizedTime() { }

	// RVA: 0x2B2B948 Offset: 0x2B2B948 VA: 0x2B2B948 Slot: 10
	private void SimpleAnimation.State.set_normalizedTime(float value) { }

	// RVA: 0x2B2B94C Offset: 0x2B2B94C VA: 0x2B2B94C Slot: 11
	private float SimpleAnimation.State.get_speed() { }

	// RVA: 0x2B2B954 Offset: 0x2B2B954 VA: 0x2B2B954 Slot: 12
	private void SimpleAnimation.State.set_speed(float value) { }

	// RVA: 0x2B2B958 Offset: 0x2B2B958 VA: 0x2B2B958 Slot: 13
	private string SimpleAnimation.State.get_name() { }

	// RVA: 0x2B2B960 Offset: 0x2B2B960 VA: 0x2B2B960 Slot: 14
	private void SimpleAnimation.State.set_name(string value) { }

	// RVA: 0x2B2B964 Offset: 0x2B2B964 VA: 0x2B2B964 Slot: 15
	private float SimpleAnimation.State.get_weight() { }

	// RVA: 0x2B2B96C Offset: 0x2B2B96C VA: 0x2B2B96C Slot: 16
	private void SimpleAnimation.State.set_weight(float value) { }

	// RVA: 0x2B2B970 Offset: 0x2B2B970 VA: 0x2B2B970 Slot: 17
	private float SimpleAnimation.State.get_length() { }

	// RVA: 0x2B2B9A0 Offset: 0x2B2B9A0 VA: 0x2B2B9A0 Slot: 18
	private AnimationClip SimpleAnimation.State.get_clip() { }

	// RVA: 0x2B2B9A8 Offset: 0x2B2B9A8 VA: 0x2B2B9A8 Slot: 19
	private WrapMode SimpleAnimation.State.get_wrapMode() { }

	// RVA: 0x2B2B9D8 Offset: 0x2B2B9D8 VA: 0x2B2B9D8 Slot: 20
	private void SimpleAnimation.State.set_wrapMode(WrapMode value) { }

	// RVA: 0x2B2B9DC Offset: 0x2B2B9DC VA: 0x2B2B9DC Slot: 21
	private WrapMode SimpleAnimation.State.get_overwrittenWrapMode() { }

	// RVA: 0x2B2B9E4 Offset: 0x2B2B9E4 VA: 0x2B2B9E4 Slot: 22
	private void SimpleAnimation.State.set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x2B2B9E8 Offset: 0x2B2B9E8 VA: 0x2B2B9E8 Slot: 23
	private bool SimpleAnimation.State.get_isOverwrittenWrapMode() { }
}

// Namespace: 
private class SimpleAnimation.StateEnumerable : IEnumerable<SimpleAnimation.State>, IEnumerable // TypeDefIndex: 3711
{
	// Fields
	private SimpleAnimation m_Owner; // 0x10

	// Methods

	// RVA: 0x2B2ADDC Offset: 0x2B2ADDC VA: 0x2B2ADDC
	public void .ctor(SimpleAnimation owner) { }

	// RVA: 0x2B2B9F0 Offset: 0x2B2B9F0 VA: 0x2B2B9F0 Slot: 4
	public IEnumerator<SimpleAnimation.State> GetEnumerator() { }

	// RVA: 0x2B2BB50 Offset: 0x2B2BB50 VA: 0x2B2BB50 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private class SimpleAnimation.StateEnumerable.StateEnumerator : IEnumerator<SimpleAnimation.State>, IEnumerator, IDisposable // TypeDefIndex: 3712
{
	// Fields
	private SimpleAnimation m_Owner; // 0x10
	private IEnumerator<SimpleAnimationPlayable.IState> m_Impl; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private SimpleAnimation.State System.Collections.Generic.IEnumerator<SimpleAnimation.State>.Current { get; }

	// Methods

	// RVA: 0x2B2BA54 Offset: 0x2B2BA54 VA: 0x2B2BA54
	public void .ctor(SimpleAnimation owner) { }

	// RVA: 0x2B2BCD0 Offset: 0x2B2BCD0 VA: 0x2B2BCD0
	private SimpleAnimation.State GetCurrent() { }

	// RVA: 0x2B2BDC0 Offset: 0x2B2BDC0 VA: 0x2B2BDC0 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2B2BDC4 Offset: 0x2B2BDC4 VA: 0x2B2BDC4 Slot: 4
	private SimpleAnimation.State System.Collections.Generic.IEnumerator<SimpleAnimation.State>.get_Current() { }

	// RVA: 0x2B2BDC8 Offset: 0x2B2BDC8 VA: 0x2B2BDC8 Slot: 8
	public void Dispose() { }

	// RVA: 0x2B2BDCC Offset: 0x2B2BDCC VA: 0x2B2BDCC Slot: 6
	public bool MoveNext() { }

	// RVA: 0x2B2BC18 Offset: 0x2B2BC18 VA: 0x2B2BC18 Slot: 7
	public void Reset() { }
}

// Namespace: 
private class SimpleAnimation.StateImpl : SimpleAnimation.State // TypeDefIndex: 3713
{
	// Fields
	private SimpleAnimationPlayable.IState m_StateHandle; // 0x10
	private SimpleAnimation m_Component; // 0x18

	// Properties
	private bool SimpleAnimation.State.enabled { get; set; }
	private bool SimpleAnimation.State.isValid { get; }
	private float SimpleAnimation.State.time { get; set; }
	private float SimpleAnimation.State.normalizedTime { get; set; }
	private float SimpleAnimation.State.speed { get; set; }
	private string SimpleAnimation.State.name { get; set; }
	private float SimpleAnimation.State.weight { get; set; }
	private float SimpleAnimation.State.length { get; }
	private AnimationClip SimpleAnimation.State.clip { get; }
	private WrapMode SimpleAnimation.State.wrapMode { get; set; }
	private WrapMode SimpleAnimation.State.overwrittenWrapMode { get; set; }
	private bool SimpleAnimation.State.isOverwrittenWrapMode { get; }

	// Methods

	// RVA: 0x2B2AD40 Offset: 0x2B2AD40 VA: 0x2B2AD40
	public void .ctor(SimpleAnimationPlayable.IState handle, SimpleAnimation component) { }

	// RVA: 0x2B2BE84 Offset: 0x2B2BE84 VA: 0x2B2BE84 Slot: 4
	private bool SimpleAnimation.State.get_enabled() { }

	// RVA: 0x2B2BF3C Offset: 0x2B2BF3C VA: 0x2B2BF3C Slot: 5
	private void SimpleAnimation.State.set_enabled(bool value) { }

	// RVA: 0x2B2C038 Offset: 0x2B2C038 VA: 0x2B2C038 Slot: 6
	private bool SimpleAnimation.State.get_isValid() { }

	// RVA: 0x2B2C0EC Offset: 0x2B2C0EC VA: 0x2B2C0EC Slot: 7
	private float SimpleAnimation.State.get_time() { }

	// RVA: 0x2B2C1A4 Offset: 0x2B2C1A4 VA: 0x2B2C1A4 Slot: 8
	private void SimpleAnimation.State.set_time(float value) { }

	// RVA: 0x2B2C29C Offset: 0x2B2C29C VA: 0x2B2C29C Slot: 9
	private float SimpleAnimation.State.get_normalizedTime() { }

	// RVA: 0x2B2C354 Offset: 0x2B2C354 VA: 0x2B2C354 Slot: 10
	private void SimpleAnimation.State.set_normalizedTime(float value) { }

	// RVA: 0x2B2C44C Offset: 0x2B2C44C VA: 0x2B2C44C Slot: 11
	private float SimpleAnimation.State.get_speed() { }

	// RVA: 0x2B2C504 Offset: 0x2B2C504 VA: 0x2B2C504 Slot: 12
	private void SimpleAnimation.State.set_speed(float value) { }

	// RVA: 0x2B2C5FC Offset: 0x2B2C5FC VA: 0x2B2C5FC Slot: 13
	private string SimpleAnimation.State.get_name() { }

	// RVA: 0x2B2C6B4 Offset: 0x2B2C6B4 VA: 0x2B2C6B4 Slot: 14
	private void SimpleAnimation.State.set_name(string value) { }

	// RVA: 0x2B2C77C Offset: 0x2B2C77C VA: 0x2B2C77C Slot: 15
	private float SimpleAnimation.State.get_weight() { }

	// RVA: 0x2B2C834 Offset: 0x2B2C834 VA: 0x2B2C834 Slot: 16
	private void SimpleAnimation.State.set_weight(float value) { }

	// RVA: 0x2B2C92C Offset: 0x2B2C92C VA: 0x2B2C92C Slot: 17
	private float SimpleAnimation.State.get_length() { }

	// RVA: 0x2B2C9E4 Offset: 0x2B2C9E4 VA: 0x2B2C9E4 Slot: 18
	private AnimationClip SimpleAnimation.State.get_clip() { }

	// RVA: 0x2B2CA9C Offset: 0x2B2CA9C VA: 0x2B2CA9C Slot: 19
	private WrapMode SimpleAnimation.State.get_wrapMode() { }

	// RVA: 0x2B2CB54 Offset: 0x2B2CB54 VA: 0x2B2CB54 Slot: 20
	private void SimpleAnimation.State.set_wrapMode(WrapMode value) { }

	// RVA: 0x2B2CBC0 Offset: 0x2B2CBC0 VA: 0x2B2CBC0 Slot: 21
	private WrapMode SimpleAnimation.State.get_overwrittenWrapMode() { }

	// RVA: 0x2B2CC78 Offset: 0x2B2CC78 VA: 0x2B2CC78 Slot: 22
	private void SimpleAnimation.State.set_overwrittenWrapMode(WrapMode value) { }

	// RVA: 0x2B2CD40 Offset: 0x2B2CD40 VA: 0x2B2CD40 Slot: 23
	private bool SimpleAnimation.State.get_isOverwrittenWrapMode() { }
}

// Namespace: 
[Serializable]
public class SimpleAnimation.EditorState // TypeDefIndex: 3714
{
	// Fields
	public AnimationClip clip; // 0x10
	public string name; // 0x18

	// Methods

	// RVA: 0x2B2AF70 Offset: 0x2B2AF70 VA: 0x2B2AF70
	public void .ctor() { }
}

// Namespace: 
public class SimpleAnimationPlayable : PlayableBehaviour // TypeDefIndex: 3715
{
	// Fields
	private LinkedList<SimpleAnimationPlayable.QueuedState> m_StateQueue; // 0x10
	private SimpleAnimationPlayable.StateManagement m_States; // 0x18
	private bool m_Initialized; // 0x20
	private bool m_KeepStoppedPlayablesConnected; // 0x21
	protected Playable m_ActualPlayable; // 0x28
	private AnimationMixerPlayable m_Mixer; // 0x38
	public Action onDone; // 0x48
	private int m_StatesVersion; // 0x50

	// Properties
	public bool keepStoppedPlayablesConnected { get; set; }
	protected Playable self { get; }
	public Playable playable { get; }
	protected PlayableGraph graph { get; }

	// Methods

	// RVA: 0x2B2AED8 Offset: 0x2B2AED8 VA: 0x2B2AED8
	public void .ctor() { }

	// RVA: 0x2B2CE6C Offset: 0x2B2CE6C VA: 0x2B2CE6C
	public bool get_keepStoppedPlayablesConnected() { }

	// RVA: 0x2B2CE74 Offset: 0x2B2CE74 VA: 0x2B2CE74
	public void set_keepStoppedPlayablesConnected(bool value) { }

	// RVA: 0x2B2CE94 Offset: 0x2B2CE94 VA: 0x2B2CE94
	private void UpdateStoppedPlayablesConnections() { }

	// RVA: 0x2B2D13C Offset: 0x2B2D13C VA: 0x2B2D13C
	protected Playable get_self() { }

	// RVA: 0x2B2B09C Offset: 0x2B2B09C VA: 0x2B2B09C
	public Playable get_playable() { }

	// RVA: 0x2B2D148 Offset: 0x2B2D148 VA: 0x2B2D148
	protected PlayableGraph get_graph() { }

	// RVA: 0x2B2D198 Offset: 0x2B2D198 VA: 0x2B2D198
	public Playable GetInput(int index) { }

	// RVA: 0x2B2D248 Offset: 0x2B2D248 VA: 0x2B2D248 Slot: 15
	public override void OnPlayableCreate(Playable playable) { }

	// RVA: 0x2B2BBB4 Offset: 0x2B2BBB4 VA: 0x2B2BBB4
	public IEnumerable<SimpleAnimationPlayable.IState> GetStates() { }

	// RVA: 0x2B2AC90 Offset: 0x2B2AC90 VA: 0x2B2AC90
	public SimpleAnimationPlayable.IState GetState(string name) { }

	// RVA: 0x2B2D4F0 Offset: 0x2B2D4F0 VA: 0x2B2D4F0
	private SimpleAnimationPlayable.StateInfo DoAddClip(string name, AnimationClip clip) { }

	// RVA: 0x2B29994 Offset: 0x2B29994 VA: 0x2B29994
	public bool AddClip(AnimationClip clip, string name) { }

	// RVA: 0x2B29F54 Offset: 0x2B29F54 VA: 0x2B29F54
	public bool RemoveClip(string name) { }

	// RVA: 0x2B2A88C Offset: 0x2B2A88C VA: 0x2B2A88C
	public bool RemoveClip(AnimationClip clip) { }

	// RVA: 0x2B298A4 Offset: 0x2B298A4 VA: 0x2B298A4
	public bool Play(string name) { }

	// RVA: 0x2B2DCBC Offset: 0x2B2DCBC VA: 0x2B2DCBC
	private bool Play(int index) { }

	// RVA: 0x2B2A694 Offset: 0x2B2A694 VA: 0x2B2A694
	public bool PlayQueued(string name, QueueMode queueMode) { }

	// RVA: 0x2B2DE58 Offset: 0x2B2DE58 VA: 0x2B2DE58
	private bool PlayQueued(int index, QueueMode queueMode) { }

	// RVA: 0x2B2AA20 Offset: 0x2B2AA20 VA: 0x2B2AA20
	public void Rewind(string name) { }

	// RVA: 0x2B2E0EC Offset: 0x2B2E0EC VA: 0x2B2E0EC
	private void Rewind(int index) { }

	// RVA: 0x2B2A92C Offset: 0x2B2A92C VA: 0x2B2A92C
	public void Rewind() { }

	// RVA: 0x2B2D96C Offset: 0x2B2D96C VA: 0x2B2D96C
	private void RemoveClones(SimpleAnimationPlayable.StateInfo state) { }

	// RVA: 0x2B29690 Offset: 0x2B29690 VA: 0x2B29690
	public bool Stop(string name) { }

	// RVA: 0x2B2DDB8 Offset: 0x2B2DDB8 VA: 0x2B2DDB8
	private void DoStop(int index) { }

	// RVA: 0x2B29580 Offset: 0x2B29580 VA: 0x2B29580
	public bool StopAll() { }

	// RVA: 0x2B289AC Offset: 0x2B289AC VA: 0x2B289AC
	public bool IsPlaying() { }

	// RVA: 0x2B28A14 Offset: 0x2B28A14 VA: 0x2B28A14
	public bool CheckPlaying() { }

	// RVA: 0x2B294AC Offset: 0x2B294AC VA: 0x2B294AC
	public bool IsPlaying(string stateName) { }

	// RVA: 0x2B2E4E4 Offset: 0x2B2E4E4 VA: 0x2B2E4E4
	private bool IsClonePlaying(SimpleAnimationPlayable.StateInfo state) { }

	// RVA: 0x2B293E8 Offset: 0x2B293E8 VA: 0x2B293E8
	public int GetClipCount() { }

	// RVA: 0x2B2E5A4 Offset: 0x2B2E5A4 VA: 0x2B2E5A4
	private void SetupLerp(SimpleAnimationPlayable.StateInfo state, float targetWeight, float time) { }

	// RVA: 0x2B2E754 Offset: 0x2B2E754 VA: 0x2B2E754
	private bool Crossfade(int index, float time) { }

	// RVA: 0x2B2DF1C Offset: 0x2B2DF1C VA: 0x2B2DF1C
	private SimpleAnimationPlayable.StateInfo CloneState(int index) { }

	// RVA: 0x2B290D8 Offset: 0x2B290D8 VA: 0x2B290D8
	public bool Crossfade(string name, float time) { }

	// RVA: 0x2B292A4 Offset: 0x2B292A4 VA: 0x2B292A4
	public bool CrossfadeQueued(string name, float time, QueueMode queueMode) { }

	// RVA: 0x2B2E8E4 Offset: 0x2B2E8E4 VA: 0x2B2E8E4
	private bool CrossfadeQueued(int index, float time, QueueMode queueMode) { }

	// RVA: 0x2B2E9B8 Offset: 0x2B2E9B8 VA: 0x2B2E9B8
	private bool Blend(int index, float targetWeight, float time) { }

	// RVA: 0x2B28F28 Offset: 0x2B28F28 VA: 0x2B28F28
	public bool Blend(string name, float targetWeight, float time) { }

	// RVA: 0x2B2EA70 Offset: 0x2B2EA70 VA: 0x2B2EA70 Slot: 14
	public override void OnGraphStop(Playable playable) { }

	// RVA: 0x2B2D8B0 Offset: 0x2B2D8B0 VA: 0x2B2D8B0
