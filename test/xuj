	public GameObject get_EffectScanObstaclePanelPrafab() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4010C Offset: 0xD4010C VA: 0xD4010C
	// RVA: 0x1D0ECE4 Offset: 0x1D0ECE4 VA: 0x1D0ECE4
	private void set_EffectScanObstaclePanelPrafab(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4011C Offset: 0xD4011C VA: 0xD4011C
	// RVA: 0x1D0ECEC Offset: 0x1D0ECEC VA: 0x1D0ECEC
	public GameObject get_ScanProcessPreventedPrafab() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4012C Offset: 0xD4012C VA: 0xD4012C
	// RVA: 0x1D0ECF4 Offset: 0x1D0ECF4 VA: 0x1D0ECF4
	private void set_ScanProcessPreventedPrafab(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4013C Offset: 0xD4013C VA: 0xD4013C
	// RVA: 0x1D0ECFC Offset: 0x1D0ECFC VA: 0x1D0ECFC
	public GameObject get_SelectScannerDialogPrefab() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4014C Offset: 0xD4014C VA: 0xD4014C
	// RVA: 0x1D0ED04 Offset: 0x1D0ED04 VA: 0x1D0ED04
	private void set_SelectScannerDialogPrefab(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4015C Offset: 0xD4015C VA: 0xD4015C
	// RVA: 0x1D0ED0C Offset: 0x1D0ED0C VA: 0x1D0ED0C
	public GameObject get_ScanConfirmDialogPrefab() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4016C Offset: 0xD4016C VA: 0xD4016C
	// RVA: 0x1D0ED14 Offset: 0x1D0ED14 VA: 0x1D0ED14
	private void set_ScanConfirmDialogPrefab(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4017C Offset: 0xD4017C VA: 0xD4017C
	// RVA: 0x1D0ED1C Offset: 0x1D0ED1C VA: 0x1D0ED1C
	public GameObject get_NewScannerDialogPrefab() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4018C Offset: 0xD4018C VA: 0xD4018C
	// RVA: 0x1D0ED24 Offset: 0x1D0ED24 VA: 0x1D0ED24
	private void set_NewScannerDialogPrefab(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4019C Offset: 0xD4019C VA: 0xD4019C
	// RVA: 0x1D0ED2C Offset: 0x1D0ED2C VA: 0x1D0ED2C
	public SubmarineSettings get_Settings() { }

	[CompilerGeneratedAttribute] // RVA: 0xD401AC Offset: 0xD401AC VA: 0xD401AC
	// RVA: 0x1D0ED34 Offset: 0x1D0ED34 VA: 0x1D0ED34
	private void set_Settings(SubmarineSettings value) { }

	// RVA: 0x1D0ED3C Offset: 0x1D0ED3C VA: 0x1D0ED3C
	public void Initialize() { }

	// RVA: 0x1D0EDC4 Offset: 0x1D0EDC4 VA: 0x1D0EDC4
	public void LoadMapObject(AssetData assetData, int mapId) { }

	[DebuggerHiddenAttribute] // RVA: 0xD401BC Offset: 0xD401BC VA: 0xD401BC
	// RVA: 0x1D0EEA0 Offset: 0x1D0EEA0 VA: 0x1D0EEA0
	public IEnumerator CoLoadAssets(int eventId, Action finishCallback) { }

	// RVA: 0x1D0EF54 Offset: 0x1D0EF54 VA: 0x1D0EF54
	public GameObject GetScanAnimObjectPrefab(int scanObjectId) { }

	// RVA: 0x1D0EFD4 Offset: 0x1D0EFD4 VA: 0x1D0EFD4
	public GameObject GetScanRangeNotificatorPrefab(int scanObjectId) { }

	// RVA: 0x1D0F054 Offset: 0x1D0F054 VA: 0x1D0F054
	public void Finish() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB18B0 Offset: 0xCB18B0 VA: 0xCB18B0
private sealed class SubmarineMapAssetManager.<CoLoadAssets>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 10950
{
	// Fields
	internal AssetData <assetData>__0; // 0x10
	internal int eventId; // 0x18
	internal EventPanelScanEntity[] <scanEntityList>__0; // 0x20
	internal IEnumerable<int> <scanObjectIds>__0; // 0x28
	internal Regex <regex>__0; // 0x30
	internal string[] $locvar0; // 0x38
	internal int $locvar1; // 0x40
	internal string[] $locvar2; // 0x48
	internal int $locvar3; // 0x50
	internal Action finishCallback; // 0x58
	internal SubmarineMapAssetManager $this; // 0x60
	internal object $current; // 0x68
	internal bool $disposing; // 0x70
	internal int $PC; // 0x74
	private SubmarineMapAssetManager.<CoLoadAssets>c__Iterator0.<CoLoadAssets>c__AnonStorey1 $locvar4; // 0x78
	private static Func<EventPanelScanEntity, int> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD49FC4 Offset: 0xD49FC4 VA: 0xD49FC4
	// RVA: 0x1D0EF4C Offset: 0x1D0EF4C VA: 0x1D0EF4C
	public void .ctor() { }

	// RVA: 0x1D0F118 Offset: 0x1D0F118 VA: 0x1D0F118 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49FD4 Offset: 0xD49FD4 VA: 0xD49FD4
	// RVA: 0x1D0FBAC Offset: 0x1D0FBAC VA: 0x1D0FBAC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49FE4 Offset: 0xD49FE4 VA: 0xD49FE4
	// RVA: 0x1D0FBB4 Offset: 0x1D0FBB4 VA: 0x1D0FBB4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49FF4 Offset: 0xD49FF4 VA: 0xD49FF4
	// RVA: 0x1D0FBBC Offset: 0x1D0FBBC VA: 0x1D0FBBC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A004 Offset: 0xD4A004 VA: 0xD4A004
	// RVA: 0x1D0FBD0 Offset: 0x1D0FBD0 VA: 0x1D0FBD0 Slot: 6
	public void Reset() { }

	// RVA: 0x1D0FC38 Offset: 0x1D0FC38 VA: 0x1D0FC38
	private static int <>m__0(EventPanelScanEntity x) { }
}

// Namespace: 
private sealed class SubmarineMapAssetManager.<CoLoadAssets>c__Iterator0.<CoLoadAssets>c__AnonStorey1 // TypeDefIndex: 10951
{
	// Fields
	internal bool loadEnd; // 0x10
	internal SubmarineMapAssetManager.<CoLoadAssets>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x1D0FBA4 Offset: 0x1D0FBA4 VA: 0x1D0FBA4
	public void .ctor() { }

	// RVA: 0x1D0FC60 Offset: 0x1D0FC60 VA: 0x1D0FC60
	internal void <>m__0() { }

	// RVA: 0x1D0FC6C Offset: 0x1D0FC6C VA: 0x1D0FC6C
	internal bool <>m__1() { }
}

// Namespace: 
public class SubmarineMapManager : EventMapManagerBase // TypeDefIndex: 10952
{
	// Fields
	private GameObject panelContainer; // 0x68
	private GameObject effectContainer; // 0x70
	private Texture2D closedPanelTexture; // 0x78
	private GameObject gridLine; // 0x80
	private TaskScheduler taskScheduler; // 0x88
	private SubmarineMapDataManager submarineData; // 0x90
	private SubmarineMapAssetManager assetManager; // 0x98
	private bool initRequestFinished; // 0xA0
	private SubmarineScanConfirmDialog scanConfirmDialog; // 0xA8
	private SubmarineSelectScannerDialog selectScannerDialog; // 0xB0
	private SubmarineNewScannerDialog newScannerDialog; // 0xB8
	private ComponentPool<CommonEffectComponent> effectScanedPanelObjPool; // 0xC0
	private ComponentPool<SubmarineEffectScanObstaclePanelComponent> effectScanObstaclePanelObjPool; // 0xC8
	private ComponentPool<SubmarineEffectScannablePanelComponent> effectScannablePanelObjPool; // 0xD0
	private ComponentPool<SubmarineEffectSelectedPanelComponent> effectSelectedPanelObjPool; // 0xD8
	private GameObject scanRangeNotificator; // 0xE0
	private bool isShowScannableEffect; // 0xE8
	private bool isShowScanObstacleEffect; // 0xE9
	[CompilerGeneratedAttribute] // RVA: 0xCE8898 Offset: 0xCE8898 VA: 0xCE8898
	private static Predicate<SubmarineScanEvent> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCE88A8 Offset: 0xCE88A8 VA: 0xCE88A8
	private static Func<SubmarineScanEvent, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCE88B8 Offset: 0xCE88B8 VA: 0xCE88B8
	private static Predicate<SubmarineMapPanelData> <>f__am$cache2; // 0x10

	// Properties
	private SubmarinePanelPositionCalculator positionCalculator { get; }
	private SubmarineSettingsManager settings { get; }
	private int eventId { get; }

	// Methods

	// RVA: 0x1D11794 Offset: 0x1D11794 VA: 0x1D11794
	public void .ctor() { }

	// RVA: 0x1D1179C Offset: 0x1D1179C VA: 0x1D1179C
	private SubmarinePanelPositionCalculator get_positionCalculator() { }

	// RVA: 0x1D117C8 Offset: 0x1D117C8 VA: 0x1D117C8
	private SubmarineSettingsManager get_settings() { }

	// RVA: 0x1D117F4 Offset: 0x1D117F4 VA: 0x1D117F4
	private int get_eventId() { }

	// RVA: 0x1D11820 Offset: 0x1D11820 VA: 0x1D11820 Slot: 17
	public override void Initialize() { }

	// RVA: 0x1D11914 Offset: 0x1D11914 VA: 0x1D11914 Slot: 18
	public override void LoadAssets(Action finishCallback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD401CC Offset: 0xD401CC VA: 0xD401CC
	// RVA: 0x1D11A00 Offset: 0x1D11A00 VA: 0x1D11A00
	private IEnumerator CoInitRequest(Action finishCallback) { }

	// RVA: 0x1D11A94 Offset: 0x1D11A94 VA: 0x1D11A94 Slot: 19
	public override void ExtractMapObjectFromAssetData(AssetData assetData) { }

	// RVA: 0x1D11B7C Offset: 0x1D11B7C VA: 0x1D11B7C Slot: 20
	public override void OnAfterSpotCreated(Action finishCallback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD401DC Offset: 0xD401DC VA: 0xD401DC
	// RVA: 0x1D11BA8 Offset: 0x1D11BA8 VA: 0x1D11BA8
	private IEnumerator CoOnAfterSpotCreated(Action finishCallback) { }

	// RVA: 0x1D11C3C Offset: 0x1D11C3C VA: 0x1D11C3C Slot: 21
	public override bool IsShowQuestListWhenComingBackToMap() { }

	// RVA: 0x1D11D44 Offset: 0x1D11D44 VA: 0x1D11D44 Slot: 22
	public override void OnBeforeQuestAfterAction(Action finishCallback) { }

	// RVA: 0x1D11FC0 Offset: 0x1D11FC0 VA: 0x1D11FC0 Slot: 23
	public override void OnAfterQuestAfterAction(Action finishCallback) { }

	// RVA: 0x1D121BC Offset: 0x1D121BC VA: 0x1D121BC Slot: 24
	public override void OnEveryActionEnd() { }

	// RVA: 0x1D12284 Offset: 0x1D12284 VA: 0x1D12284 Slot: 25
	public override void DestroyMapObjects() { }

	// RVA: 0x1D124E0 Offset: 0x1D124E0 VA: 0x1D124E0 Slot: 26
	public override void ReleaseAssets() { }

	// RVA: 0x1D125B0 Offset: 0x1D125B0 VA: 0x1D125B0 Slot: 27
	public override void Finish() { }

	// RVA: 0x1D125BC Offset: 0x1D125BC VA: 0x1D125BC
	private void TryInitRequest() { }

	// RVA: 0x1D11AFC Offset: 0x1D11AFC VA: 0x1D11AFC
	private void CreateAssetManagerIfNotExists() { }

	// RVA: 0x1D11C58 Offset: 0x1D11C58 VA: 0x1D11C58
	private bool HasSelfQuestAfterAction() { }

	// RVA: 0x1D11E08 Offset: 0x1D11E08 VA: 0x1D11E08
	private void DoPerformancesByVariedCond(Action finishCallback) { }

	// RVA: 0x1D13150 Offset: 0x1D13150 VA: 0x1D13150
	private void ClickPanel(SubmarineMapPanelData panelData) { }

	// RVA: 0x1D134F8 Offset: 0x1D134F8 VA: 0x1D134F8
	private void OnScannerSelected(int scanId, SubmarineMapPanelData panelData) { }

	// RVA: 0x1D14140 Offset: 0x1D14140 VA: 0x1D14140
	private void OnScanDecided(int scanId, SubmarineMapPanelData panelData) { }

	// RVA: 0x1D142F0 Offset: 0x1D142F0 VA: 0x1D142F0
	private void OnScanPanelRequestFinished(string result, int scanId, SubmarineMapPanelData panelData) { }

	// RVA: 0x1D14700 Offset: 0x1D14700 VA: 0x1D14700
	private void StartScanPerformance(int scanId, SubmarineMapPanelData panelData) { }

	// RVA: 0x1D15E04 Offset: 0x1D15E04 VA: 0x1D15E04
	private void SubsequentialOpenPanelTaskChain(Action finishCallback) { }

	// RVA: 0x1D16014 Offset: 0x1D16014 VA: 0x1D16014
	private void RevealAvailableSpots(Action finishCallback) { }

	// RVA: 0x1D149DC Offset: 0x1D149DC VA: 0x1D149DC
	private void OnEndScan() { }

	// RVA: 0x1D1202C Offset: 0x1D1202C VA: 0x1D1202C
	private void UpdateParams(int beforeClearQuestId = -1) { }

	// RVA: 0x1D12060 Offset: 0x1D12060 VA: 0x1D12060
	private void UpdateClosedPanelDisplay() { }

	// RVA: 0x1D1373C Offset: 0x1D1373C VA: 0x1D1373C
	private void UserControllable(bool value) { }

	// RVA: 0x1D163F8 Offset: 0x1D163F8 VA: 0x1D163F8
	private void UpdateTerminalInfo() { }

	// RVA: 0x1D16758 Offset: 0x1D16758 VA: 0x1D16758
	private void CreateContainers() { }

	// RVA: 0x1D168E4 Offset: 0x1D168E4 VA: 0x1D168E4
	private void CreatePanels() { }

	// RVA: 0x1D16D44 Offset: 0x1D16D44 VA: 0x1D16D44
	private void CreateNeverOpenSurrounds() { }

	// RVA: 0x1D17344 Offset: 0x1D17344 VA: 0x1D17344
	private void SetGridLine() { }

	// RVA: 0x1D175C4 Offset: 0x1D175C4 VA: 0x1D175C4
	public void AdjustSpotPosition(SrcSpotBasePrefab spot) { }

	// RVA: 0x1D17828 Offset: 0x1D17828 VA: 0x1D17828
	private void AdjustSpotCollider(SrcSpotBasePrefab spot) { }

	// RVA: 0x1D17928 Offset: 0x1D17928 VA: 0x1D17928
	private void AdjustEachSpotsPositions() { }

	// RVA: 0x1D17A3C Offset: 0x1D17A3C VA: 0x1D17A3C
	private SrcSpotBasePrefab GetHomeSpot() { }

	// RVA: 0x1D17C30 Offset: 0x1D17C30 VA: 0x1D17C30
	private void AdjustSilhouetteGimmicks() { }

	// RVA: 0x1D185F8 Offset: 0x1D185F8 VA: 0x1D185F8
	private void AdjustDepth(GameObject go, int minDepth) { }

	// RVA: 0x1D187D4 Offset: 0x1D187D4 VA: 0x1D187D4
	private void Update() { }

	// RVA: 0x1D187E8 Offset: 0x1D187E8 VA: 0x1D187E8
	private void ConstructOnPartOfDialog() { }

	// RVA: 0x1D18A3C Offset: 0x1D18A3C VA: 0x1D18A3C
	private void OpenSelectScannerDialog(Action<int> callback) { }

	// RVA: 0x1D18B80 Offset: 0x1D18B80 VA: 0x1D18B80
	private void TryOpenNewScannerDialog() { }

	// RVA: 0x1D18C48 Offset: 0x1D18C48 VA: 0x1D18C48
	private void OpenScanConfirmDialog(int scanId, bool isShowDialogUpper, Action<bool> callback) { }

	// RVA: 0x1D1231C Offset: 0x1D1231C VA: 0x1D1231C
	private void DestroyDialog() { }

	// RVA: 0x1D18D58 Offset: 0x1D18D58 VA: 0x1D18D58
	private void LoadPoolEffects() { }

	// RVA: 0x1D1251C Offset: 0x1D1251C VA: 0x1D1251C
	private void ReleasePoolEffects() { }

	// RVA: 0x1D12260 Offset: 0x1D12260 VA: 0x1D12260
	private void UpdateScannableEffects() { }

	// RVA: 0x1D18EF8 Offset: 0x1D18EF8 VA: 0x1D18EF8
	private void ShowScannableEffect() { }

	// RVA: 0x1D1639C Offset: 0x1D1639C VA: 0x1D1639C
	private void HideScannableEffect() { }

	// RVA: 0x1D12198 Offset: 0x1D12198 VA: 0x1D12198
	private void UpdateScannObstacleEffects() { }

	// RVA: 0x1D190D8 Offset: 0x1D190D8 VA: 0x1D190D8
	private void ShowScanObstacleEffect() { }

	// RVA: 0x1D1907C Offset: 0x1D1907C VA: 0x1D1907C
	private void HideScanObstacleEffect() { }

	// RVA: 0x1D13484 Offset: 0x1D13484 VA: 0x1D13484
	private void ShowSelectedPanelEffect(SubmarineMapPanelData panelData) { }

	// RVA: 0x1D137A0 Offset: 0x1D137A0 VA: 0x1D137A0
	private void HideSelectedPanelEffect() { }

	// RVA: 0x1D1925C Offset: 0x1D1925C VA: 0x1D1925C
	private void ShowScanRange(int scanId, SubmarineMapPanelData basePanelData) { }

	// RVA: 0x1D19458 Offset: 0x1D19458 VA: 0x1D19458
	private void HideScanRange() { }

	// RVA: -1 Offset: -1
	private void RentAndPutEffectAbovePanel<T>(ComponentPool<T> pool, SubmarineMapPanelData panelData, Nullable<Vector3> offset, Nullable<Vector3> scale) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21D14D0 Offset: 0x21D14D0 VA: 0x21D14D0
	|-SubmarineMapManager.RentAndPutEffectAbovePanel<SubmarineEffectScanObstaclePanelComponent>
	|-SubmarineMapManager.RentAndPutEffectAbovePanel<SubmarineEffectScannablePanelComponent>
	|-SubmarineMapManager.RentAndPutEffectAbovePanel<SubmarineEffectSelectedPanelComponent>
	|-SubmarineMapManager.RentAndPutEffectAbovePanel<object>
	*/

	// RVA: -1 Offset: -1
	private void ReturnEffectsToPool<T>(ComponentPool<T> pool) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21D17CC Offset: 0x21D17CC VA: 0x21D17CC
	|-SubmarineMapManager.ReturnEffectsToPool<SubmarineEffectScanObstaclePanelComponent>
	|-SubmarineMapManager.ReturnEffectsToPool<SubmarineEffectScannablePanelComponent>
	|-SubmarineMapManager.ReturnEffectsToPool<SubmarineEffectSelectedPanelComponent>
	|-SubmarineMapManager.ReturnEffectsToPool<object>
	*/

	// RVA: 0x1D19504 Offset: 0x1D19504 VA: 0x1D19504
	private SchedulerTaskBase CreateMoveCameraToPositionTask(Vector3 destPos, float size, float second) { }

	// RVA: 0x1D137F4 Offset: 0x1D137F4 VA: 0x1D137F4
	private SchedulerTaskBase ShowScanRangeTask(int scanId, SubmarineMapPanelData panelData, out bool isShowDialogUpper) { }

	// RVA: 0x1D14AD4 Offset: 0x1D14AD4 VA: 0x1D14AD4
	private List<SchedulerTaskBase> CreateScanTask(SubmarineMapPanelData panelData, int scanId) { }

	// RVA: 0x1D195F8 Offset: 0x1D195F8 VA: 0x1D195F8
	private List<SchedulerTaskBase> CreateRevealSpotOnPanelTasks(SubmarineMapPanelData panelData) { }

	// RVA: 0x1D19A8C Offset: 0x1D19A8C VA: 0x1D19A8C
	private SchedulerTaskBase CreateOpenPanelAndRevealSpotTask(SubmarineMapPanelData panelData, float waitTime = 0) { }

	// RVA: 0x1D19EE4 Offset: 0x1D19EE4 VA: 0x1D19EE4
	private SchedulerTaskBase CreateOpenPanelsAndRevealSpotsTask(SubmarineMapPanelData[] panelDataArray) { }

	// RVA: 0x1D158F0 Offset: 0x1D158F0 VA: 0x1D158F0
	private SchedulerTaskBase CreateScanOpenPanelTask(int scanId, SubmarineMapPanelData panelData) { }

	// RVA: 0x1D19FFC Offset: 0x1D19FFC VA: 0x1D19FFC
	private SchedulerTaskBase CreateHitObstractTask(SubmarineMapPanelData panelData, float waitTime = 0) { }

	// RVA: 0x1D16230 Offset: 0x1D16230 VA: 0x1D16230
	private List<SchedulerTaskBase> CreateRevealEachSpotsTasks() { }

	// RVA: 0x1D1987C Offset: 0x1D1987C VA: 0x1D1987C
	private List<SchedulerTaskBase> CreateRevealSpotTasks(SrcSpotBasePrefab spot) { }

	// RVA: 0x1D1270C Offset: 0x1D1270C VA: 0x1D1270C
	private List<SchedulerTaskBase> CreateHideEnemyOccupiedPanelTasks(int beforeClearQuestId) { }

	// RVA: 0x1D12CE4 Offset: 0x1D12CE4 VA: 0x1D12CE4
	private List<SchedulerTaskBase> CreateSubsequentialOpenPanelTasks() { }

	[CompilerGeneratedAttribute] // RVA: 0xD401EC Offset: 0xD401EC VA: 0xD401EC
	// RVA: 0x1D1A058 Offset: 0x1D1A058 VA: 0x1D1A058
	private void <OnEveryActionEnd>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD401FC Offset: 0xD401FC VA: 0xD401FC
	// RVA: 0x1D1A0D8 Offset: 0x1D1A0D8 VA: 0x1D1A0D8
	private void <TryInitRequest>m__1(string result) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4020C Offset: 0xD4020C VA: 0xD4020C
	// RVA: 0x1D1A0E4 Offset: 0x1D1A0E4 VA: 0x1D1A0E4
	private void <StartScanPerformance>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4021C Offset: 0xD4021C VA: 0xD4021C
	// RVA: 0x1D1A158 Offset: 0x1D1A158 VA: 0x1D1A158
	private void <OnEndScan>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4022C Offset: 0xD4022C VA: 0xD4022C
	// RVA: 0x1D1A190 Offset: 0x1D1A190 VA: 0x1D1A190
	private static bool <CreateScanOpenPanelTask>m__4(SubmarineScanEvent x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4023C Offset: 0xD4023C VA: 0xD4023C
	// RVA: 0x1D1A1E8 Offset: 0x1D1A1E8 VA: 0x1D1A1E8
	private static int <CreateScanOpenPanelTask>m__5(SubmarineScanEvent x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4024C Offset: 0xD4024C VA: 0xD4024C
	// RVA: 0x1D1A214 Offset: 0x1D1A214 VA: 0x1D1A214
	private static bool <CreateHideEnemyOccupiedPanelTasks>m__6(SubmarineMapPanelData x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD4025C Offset: 0xD4025C VA: 0xD4025C
	// RVA: 0x1D1A24C Offset: 0x1D1A24C VA: 0x1D1A24C
	private void <OnEveryActionEnd>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4026C Offset: 0xD4026C VA: 0xD4026C
	// RVA: 0x1D1A270 Offset: 0x1D1A270 VA: 0x1D1A270
	private void <StartScanPerformance>m__8() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4027C Offset: 0xD4027C VA: 0xD4027C
	// RVA: 0x1D1A2E4 Offset: 0x1D1A2E4 VA: 0x1D1A2E4
	private void <StartScanPerformance>m__9() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB18C0 Offset: 0xCB18C0 VA: 0xCB18C0
private sealed class SubmarineMapManager.<LoadAssets>c__AnonStorey2 // TypeDefIndex: 10953
{
	// Fields
	internal Action finishCallback; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F5028 Offset: 0x16F5028 VA: 0x16F5028
	public void .ctor() { }

	// RVA: 0x16F5030 Offset: 0x16F5030 VA: 0x16F5030
	internal void <>m__0() { }

	// RVA: 0x16F5134 Offset: 0x16F5134 VA: 0x16F5134
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB18D0 Offset: 0xCB18D0 VA: 0xCB18D0
private sealed class SubmarineMapManager.<CoInitRequest>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 10954
{
	// Fields
	internal Action finishCallback; // 0x10
	internal SubmarineMapManager $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4A014 Offset: 0xD4A014 VA: 0xD4A014
	// RVA: 0x16F45A8 Offset: 0x16F45A8 VA: 0x16F45A8
	public void .ctor() { }

	// RVA: 0x16F45B0 Offset: 0x16F45B0 VA: 0x16F45B0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A024 Offset: 0xD4A024 VA: 0xD4A024
	// RVA: 0x16F475C Offset: 0x16F475C VA: 0x16F475C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A034 Offset: 0xD4A034 VA: 0xD4A034
	// RVA: 0x16F4764 Offset: 0x16F4764 VA: 0x16F4764 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A044 Offset: 0xD4A044 VA: 0xD4A044
	// RVA: 0x16F476C Offset: 0x16F476C VA: 0x16F476C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A054 Offset: 0xD4A054 VA: 0xD4A054
	// RVA: 0x16F4780 Offset: 0x16F4780 VA: 0x16F4780 Slot: 6
	public void Reset() { }

	// RVA: 0x16F47E8 Offset: 0x16F47E8 VA: 0x16F47E8
	internal bool <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB18E0 Offset: 0xCB18E0 VA: 0xCB18E0
private sealed class SubmarineMapManager.<CoOnAfterSpotCreated>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 10955
{
	// Fields
	internal Action finishCallback; // 0x10
	internal SubmarineMapManager $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4A064 Offset: 0xD4A064 VA: 0xD4A064
	// RVA: 0x16F4814 Offset: 0x16F4814 VA: 0x16F4814
	public void .ctor() { }

	// RVA: 0x16F481C Offset: 0x16F481C VA: 0x16F481C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A074 Offset: 0xD4A074 VA: 0xD4A074
	// RVA: 0x16F4C64 Offset: 0x16F4C64 VA: 0x16F4C64 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A084 Offset: 0xD4A084 VA: 0xD4A084
	// RVA: 0x16F4C6C Offset: 0x16F4C6C VA: 0x16F4C6C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A094 Offset: 0xD4A094 VA: 0xD4A094
	// RVA: 0x16F4C74 Offset: 0x16F4C74 VA: 0x16F4C74 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A0A4 Offset: 0xD4A0A4 VA: 0xD4A0A4
	// RVA: 0x16F4C78 Offset: 0x16F4C78 VA: 0x16F4C78 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB18F0 Offset: 0xCB18F0 VA: 0xCB18F0
private sealed class SubmarineMapManager.<OnBeforeQuestAfterAction>c__AnonStorey3 // TypeDefIndex: 10956
{
	// Fields
	internal Action finishCallback; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F522C Offset: 0x16F522C VA: 0x16F522C
	public void .ctor() { }

	// RVA: 0x16F5234 Offset: 0x16F5234 VA: 0x16F5234
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1900 Offset: 0xCB1900 VA: 0xCB1900
private sealed class SubmarineMapManager.<DoPerformancesByVariedCond>c__AnonStorey4 // TypeDefIndex: 10957
{
	// Fields
	internal Action finishCallback; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F4FEC Offset: 0x16F4FEC VA: 0x16F4FEC
	public void .ctor() { }

	// RVA: 0x16F4FF4 Offset: 0x16F4FF4 VA: 0x16F4FF4
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1910 Offset: 0xCB1910 VA: 0xCB1910
private sealed class SubmarineMapManager.<ClickPanel>c__AnonStorey5 // TypeDefIndex: 10958
{
	// Fields
	internal SubmarineMapPanelData panelData; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F44A8 Offset: 0x16F44A8 VA: 0x16F44A8
	public void .ctor() { }

	// RVA: 0x16F44B0 Offset: 0x16F44B0 VA: 0x16F44B0
	internal void <>m__0() { }

	// RVA: 0x16F4564 Offset: 0x16F4564 VA: 0x16F4564
	internal void <>m__1(int scanId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1920 Offset: 0xCB1920 VA: 0xCB1920
private sealed class SubmarineMapManager.<OnScannerSelected>c__AnonStorey6 // TypeDefIndex: 10959
{
	// Fields
	internal int scanId; // 0x10
	internal SubmarineMapPanelData panelData; // 0x18
	internal bool isShowDialogUpper; // 0x20
	internal SubmarineMapManager $this; // 0x28

	// Methods

	// RVA: 0x16F5424 Offset: 0x16F5424 VA: 0x16F5424
	public void .ctor() { }

	// RVA: 0x16F542C Offset: 0x16F542C VA: 0x16F542C
	internal void <>m__0() { }

	// RVA: 0x16F5534 Offset: 0x16F5534 VA: 0x16F5534
	internal void <>m__1(bool yes) { }

	// RVA: 0x16F5624 Offset: 0x16F5624 VA: 0x16F5624
	internal void <>m__2(int lscanId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1930 Offset: 0xCB1930 VA: 0xCB1930
private sealed class SubmarineMapManager.<OnScanDecided>c__AnonStorey7 // TypeDefIndex: 10960
{
	// Fields
	internal int scanId; // 0x10
	internal SubmarineMapPanelData panelData; // 0x18
	internal SubmarineMapManager $this; // 0x20

	// Methods

	// RVA: 0x16F53D0 Offset: 0x16F53D0 VA: 0x16F53D0
	public void .ctor() { }

	// RVA: 0x16F53D8 Offset: 0x16F53D8 VA: 0x16F53D8
	internal void <>m__0(string result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1940 Offset: 0xCB1940 VA: 0xCB1940
private sealed class SubmarineMapManager.<SubsequentialOpenPanelTaskChain>c__AnonStorey8 // TypeDefIndex: 10961
{
	// Fields
	internal Action finishCallback; // 0x10

	// Methods

	// RVA: 0x16F57A0 Offset: 0x16F57A0 VA: 0x16F57A0
	public void .ctor() { }

	// RVA: 0x16F57A8 Offset: 0x16F57A8 VA: 0x16F57A8
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1950 Offset: 0xCB1950 VA: 0xCB1950
private sealed class SubmarineMapManager.<RevealAvailableSpots>c__AnonStorey9 // TypeDefIndex: 10962
{
	// Fields
	internal Action finishCallback; // 0x10

	// Methods

	// RVA: 0x16F578C Offset: 0x16F578C VA: 0x16F578C
	public void .ctor() { }

	// RVA: 0x16F5794 Offset: 0x16F5794 VA: 0x16F5794
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1960 Offset: 0xCB1960 VA: 0xCB1960
private sealed class SubmarineMapManager.<UpdateTerminalInfo>c__AnonStoreyA // TypeDefIndex: 10963
{
	// Fields
	internal EventDetailEntity eventDetailEntity; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F57B4 Offset: 0x16F57B4 VA: 0x16F57B4
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1970 Offset: 0xCB1970 VA: 0xCB1970
private sealed class SubmarineMapManager.<UpdateTerminalInfo>c__AnonStoreyB // TypeDefIndex: 10964
{
	// Fields
	internal int beforePoint; // 0x10
	internal SubmarineMapManager.<UpdateTerminalInfo>c__AnonStoreyA <>f__ref$10; // 0x18

	// Methods

	// RVA: 0x16F57BC Offset: 0x16F57BC VA: 0x16F57BC
	public void .ctor() { }

	// RVA: 0x16F57C4 Offset: 0x16F57C4 VA: 0x16F57C4
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1980 Offset: 0xCB1980 VA: 0xCB1980
private sealed class SubmarineMapManager.<AdjustSilhouetteGimmicks>c__AnonStoreyC // TypeDefIndex: 10965
{
	// Fields
	internal SubmarineSilhouetteData silhouetteData; // 0x10

	// Methods

	// RVA: 0x16F4428 Offset: 0x16F4428 VA: 0x16F4428
	public void .ctor() { }

	// RVA: 0x16F4430 Offset: 0x16F4430 VA: 0x16F4430
	internal bool <>m__0(SrcSpotBasePrefab x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1990 Offset: 0xCB1990 VA: 0xCB1990
private sealed class SubmarineMapManager.<OpenSelectScannerDialog>c__AnonStoreyD // TypeDefIndex: 10966
{
	// Fields
	internal Action<int> callback; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F56FC Offset: 0x16F56FC VA: 0x16F56FC
	public void .ctor() { }

	// RVA: 0x16F5704 Offset: 0x16F5704 VA: 0x16F5704
	internal void <>m__0(int scanId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB19A0 Offset: 0xCB19A0 VA: 0xCB19A0
private sealed class SubmarineMapManager.<OpenScanConfirmDialog>c__AnonStoreyE // TypeDefIndex: 10967
{
	// Fields
	internal Action<bool> callback; // 0x10
	internal SubmarineMapManager $this; // 0x18

	// Methods

	// RVA: 0x16F566C Offset: 0x16F566C VA: 0x16F566C
	public void .ctor() { }

	// RVA: 0x16F5674 Offset: 0x16F5674 VA: 0x16F5674
	internal void <>m__0(bool yes) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB19B0 Offset: 0xCB19B0 VA: 0xCB19B0
private sealed class SubmarineMapManager.<CreateScanTask>c__AnonStoreyF // TypeDefIndex: 10968
{
	// Fields
	internal GameObject scanAnimObj; // 0x10
	internal SubmarineScanVoiceComponent svtScanVoice; // 0x18
	internal SubmarineMapManager $this; // 0x20

	// Methods

	// RVA: 0x16F4DF4 Offset: 0x16F4DF4 VA: 0x16F4DF4
	public void .ctor() { }

	// RVA: 0x16F4DFC Offset: 0x16F4DFC VA: 0x16F4DFC
	internal void <>m__0() { }

	// RVA: 0x16F4E30 Offset: 0x16F4E30 VA: 0x16F4E30
	internal void <>m__1() { }

	// RVA: 0x16F4F50 Offset: 0x16F4F50 VA: 0x16F4F50
	internal void <>m__2() { }

	// RVA: 0x16F4F80 Offset: 0x16F4F80 VA: 0x16F4F80
	internal void <>m__3() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB19C0 Offset: 0xCB19C0 VA: 0xCB19C0
private sealed class SubmarineMapManager.<CreateRevealSpotOnPanelTasks>c__AnonStorey10 // TypeDefIndex: 10969
{
	// Fields
	internal SubmarineMapPanelData panelData; // 0x10

	// Methods

	// RVA: 0x16F4D40 Offset: 0x16F4D40 VA: 0x16F4D40
	public void .ctor() { }

	// RVA: 0x16F4D48 Offset: 0x16F4D48 VA: 0x16F4D48
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB19D0 Offset: 0xCB19D0 VA: 0xCB19D0
private sealed class SubmarineMapManager.<CreateScanOpenPanelTask>c__AnonStorey11 // TypeDefIndex: 10970
{
	// Fields
	internal int i; // 0x10

	// Methods

	// RVA: 0x16F4DA8 Offset: 0x16F4DA8 VA: 0x16F4DA8
	public void .ctor() { }

	// RVA: 0x16F4DB0 Offset: 0x16F4DB0 VA: 0x16F4DB0
	internal bool <>m__0(SubmarineScanEvent x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB19E0 Offset: 0xCB19E0 VA: 0xCB19E0
private sealed class SubmarineMapManager.<CreateHideEnemyOccupiedPanelTasks>c__AnonStorey12 // TypeDefIndex: 10971
{
	// Fields
	internal SubmarineSilhouetteData silhouetteData; // 0x10

	// Methods

	// RVA: 0x16F4CE0 Offset: 0x16F4CE0 VA: 0x16F4CE0
	public void .ctor() { }

	// RVA: 0x16F4CE8 Offset: 0x16F4CE8 VA: 0x16F4CE8
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
public class EventPointVsResultAction : MonoBehaviour // TypeDefIndex: 10972
{
	// Fields
	private static readonly string ANIMATION_NAME; // 0x0
	private CStateManager<EventPointVsResultAction> mFSM; // 0x18
	private SimpleAnimation mSimpleAnimation; // 0x20
	private Animation mAnimation; // 0x28
	[SerializeField] // RVA: 0xCE88C8 Offset: 0xCE88C8 VA: 0xCE88C8
	private EventPointVsResultAction.servants[] resultSvts; // 0x30
	[SerializeField] // RVA: 0xCE88D8 Offset: 0xCE88D8 VA: 0xCE88D8
	private int[] bgs; // 0x38
	[SerializeField] // RVA: 0xCE88E8 Offset: 0xCE88E8 VA: 0xCE88E8
	private ExUITexture mBg; // 0x40
	[SerializeField] // RVA: 0xCE88F8 Offset: 0xCE88F8 VA: 0xCE88F8
	private UIStandFigureR[] SvtComponents; // 0x48
	[SerializeField] // RVA: 0xCE8908 Offset: 0xCE8908 VA: 0xCE8908
	private GameObject particlePrefab; // 0x50
	protected GameObject particleObj; // 0x58
	private ScreenTouchInformationComponent mScreenTouchInfo; // 0x60
	private EventPointVsResultAction.GROUP_WIN winType; // 0x68
	private MaskFade localMask; // 0x70
	private string animationName; // 0x78
	private Action mEndAct; // 0x80

	// Methods

	// RVA: 0x1C8E32C Offset: 0x1C8E32C VA: 0x1C8E32C
	public void .ctor() { }

	// RVA: 0x1C8E334 Offset: 0x1C8E334 VA: 0x1C8E334
	private void Awake() { }

	// RVA: 0x1C8E63C Offset: 0x1C8E63C VA: 0x1C8E63C
	private void Update() { }

	// RVA: 0x1C8E69C Offset: 0x1C8E69C VA: 0x1C8E69C
	public void Setup(EventPointVsResultAction.GROUP_WIN winType, int resultNo, Action callBack) { }

	// RVA: 0x1C8ECA4 Offset: 0x1C8ECA4 VA: 0x1C8ECA4
	private void setupLocal(Action callBack) { }

	// RVA: 0x1C8EF30 Offset: 0x1C8EF30 VA: 0x1C8EF30
	public void Play(Action end_act, MaskFade maskFade, float fade_in_time = 0) { }

	// RVA: 0x1C8E874 Offset: 0x1C8E874 VA: 0x1C8E874
	private void LoadSvts(int cnt, int[] servants, Face.Type[] faces, EventPointVsResultAction.GROUP_WIN winType, Action callBack) { }

	// RVA: 0x1C8F1EC Offset: 0x1C8F1EC VA: 0x1C8F1EC
	private string GetAnimName() { }

	// RVA: 0x1C8F1F4 Offset: 0x1C8F1F4 VA: 0x1C8F1F4
	public EventPointVsResultAction.STATE GetState() { }

	// RVA: 0x1C8E5CC Offset: 0x1C8E5CC VA: 0x1C8E5CC
	public void SetState(EventPointVsResultAction.STATE state) { }

	// RVA: 0x1C8F254 Offset: 0x1C8F254 VA: 0x1C8F254
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD4028C Offset: 0xD4028C VA: 0xD4028C
	// RVA: 0x1C8F2B0 Offset: 0x1C8F2B0 VA: 0x1C8F2B0
	private void <Play>m__0() { }
}

// Namespace: 
public enum EventPointVsResultAction.STATE // TypeDefIndex: 10973
{
	// Fields
	public int value__; // 0x0
	public const EventPointVsResultAction.STATE NONE = 0;
	public const EventPointVsResultAction.STATE PLAY = 1;
	public const EventPointVsResultAction.STATE TOUCH_WAIT = 2;
	public const EventPointVsResultAction.STATE SIZEOF = 3;
}

// Namespace: 
public enum EventPointVsResultAction.GROUP_WIN // TypeDefIndex: 10974
{
	// Fields
	public int value__; // 0x0
	public const EventPointVsResultAction.GROUP_WIN NONE = 0;
	public const EventPointVsResultAction.GROUP_WIN GROUP1_WIN = 1;
	public const EventPointVsResultAction.GROUP_WIN GROUP2_WIN = 2;
	public const EventPointVsResultAction.GROUP_WIN BOSSPOINT_WIN = 3;
	public const EventPointVsResultAction.GROUP_WIN SIZEOF = 4;
}

// Namespace: 
[Serializable]
private class EventPointVsResultAction.servants // TypeDefIndex: 10975
{
	// Fields
	public int[] servIds; // 0x10
	public Face.Type[] FaceIds; // 0x18

	// Methods

	// RVA: 0x1C8FCC0 Offset: 0x1C8FCC0 VA: 0x1C8FCC0
	public void .ctor() { }
}

// Namespace: 
private class EventPointVsResultAction.StateNone : IState<EventPointVsResultAction> // TypeDefIndex: 10976
{
	// Methods

	// RVA: 0x1C8E5B4 Offset: 0x1C8E5B4 VA: 0x1C8E5B4
	public void .ctor() { }

	// RVA: 0x1C8F4CC Offset: 0x1C8F4CC VA: 0x1C8F4CC Slot: 4
	public void begin(EventPointVsResultAction that) { }

	// RVA: 0x1C8F4D0 Offset: 0x1C8F4D0 VA: 0x1C8F4D0 Slot: 5
	public void update(EventPointVsResultAction that) { }

	// RVA: 0x1C8F4D4 Offset: 0x1C8F4D4 VA: 0x1C8F4D4 Slot: 6
	public void end(EventPointVsResultAction that) { }
}

// Namespace: 
private class EventPointVsResultAction.StatePlay : IState<EventPointVsResultAction> // TypeDefIndex: 10977
{
	// Fields
	private SimpleAnimation.State mSimpleAnimState; // 0x10
	private AnimationState mAnimState; // 0x18

	// Methods

	// RVA: 0x1C8E5BC Offset: 0x1C8E5BC VA: 0x1C8E5BC
	public void .ctor() { }

	// RVA: 0x1C8F4D8 Offset: 0x1C8F4D8 VA: 0x1C8F4D8 Slot: 4
	public void begin(EventPointVsResultAction that) { }

	// RVA: 0x1C8F850 Offset: 0x1C8F850 VA: 0x1C8F850 Slot: 5
	public void update(EventPointVsResultAction that) { }

	// RVA: 0x1C8FA4C Offset: 0x1C8FA4C VA: 0x1C8FA4C Slot: 6
	public void end(EventPointVsResultAction that) { }
}

// Namespace: 
private class EventPointVsResultAction.StateTouchWait : IState<EventPointVsResultAction> // TypeDefIndex: 10978
{
	// Methods

	// RVA: 0x1C8E5C4 Offset: 0x1C8E5C4 VA: 0x1C8E5C4
	public void .ctor() { }

