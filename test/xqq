	[PackKeyAttribute] // RVA: 0xCCDCDC Offset: 0xCCDCDC VA: 0xCCDCDC
	public int ratioRangeLow; // 0x54
	[PackKeyAttribute] // RVA: 0xCCDD14 Offset: 0xCCDD14 VA: 0xCCDD14
	public long userCommandCodeId; // 0x58
	[PackKeyAttribute] // RVA: 0xCCDD4C Offset: 0xCCDD4C VA: 0xCCDD4C
	public bool isActiveCC; // 0x60
	[PackKeyAttribute] // RVA: 0xCCDD84 Offset: 0xCCDD84 VA: 0xCCDD84
	public int[] targetSkill; // 0x68
	[PackKeyAttribute] // RVA: 0xCCDDBC Offset: 0xCCDDBC VA: 0xCCDDBC
	public int reCharge; // 0x70
	[PackKeyAttribute] // RVA: 0xCCDDF4 Offset: 0xCCDDF4 VA: 0xCCDDF4
	public int[] addIndividualty; // 0x78
	[PackKeyAttribute] // RVA: 0xCCDE2C Offset: 0xCCDE2C VA: 0xCCDE2C
	public int[] linkageTargetIndividualty; // 0x80
	[PackKeyAttribute] // RVA: 0xCCDE64 Offset: 0xCCDE64 VA: 0xCCDE64
	public int resumptionHpFromLossMaxHp; // 0x88
	[PackKeyAttribute] // RVA: 0xCCDE9C Offset: 0xCCDE9C VA: 0xCCDE9C
	public int addOrder; // 0x8C
	[PackKeyAttribute] // RVA: 0xCCDED4 Offset: 0xCCDED4 VA: 0xCCDED4
	public int state; // 0x90
	[PackKeyAttribute] // RVA: 0xCCDF0C Offset: 0xCCDF0C VA: 0xCCDF0C
	public BattleBuffData.FieldAliveCondData onFieldAliveCond; // 0x98
	[PackKeyAttribute] // RVA: 0xCCDF44 Offset: 0xCCDF44 VA: 0xCCDF44
	public int masterCommandCodeId; // 0xA0
	[PackKeyAttribute] // RVA: 0xCCDF7C Offset: 0xCCDF7C VA: 0xCCDF7C
	public int skillId; // 0xA4
	[PackKeyAttribute] // RVA: 0xCCDFB4 Offset: 0xCCDFB4 VA: 0xCCDFB4
	public BattleBuffData.RelationOverwriteData relationOverwrite; // 0xA8
	[PackKeyAttribute] // RVA: 0xCCDFEC Offset: 0xCCDFEC VA: 0xCCDFEC
	public int motionChange; // 0xB0
	[PackKeyAttribute] // RVA: 0xCCE024 Offset: 0xCCE024 VA: 0xCCE024
	public bool isProgressEndEnemyTurn; // 0xB4
	[PackKeyAttribute] // RVA: 0xCCE05C Offset: 0xCCE05C VA: 0xCCE05C
	public int progressTurnCond; // 0xB8
	[PackKeyAttribute] // RVA: 0xCCE094 Offset: 0xCCE094 VA: 0xCCE094
	public int grantSkillType; // 0xBC
	[PackKeyAttribute] // RVA: 0xCCE0CC Offset: 0xCCE0CC VA: 0xCCE0CC
	public bool isProgressSelfTurn; // 0xC0
	[PackKeyAttribute] // RVA: 0xCCE104 Offset: 0xCCE104 VA: 0xCCE104
	public int[] servantCardIdsIndexArray; // 0xC8
	[PackKeyAttribute] // RVA: 0xCCE13C Offset: 0xCCE13C VA: 0xCCE13C
	public int cardEffectId; // 0xD0
	[PackKeyAttribute] // RVA: 0xCCE174 Offset: 0xCCE174 VA: 0xCCE174
	public bool isTakeOverNextBattle; // 0xD4
	[PackKeyAttribute] // RVA: 0xCCE1AC Offset: 0xCCE1AC VA: 0xCCE1AC
	public int[] attachTargets; // 0xD8
	[PackKeyAttribute] // RVA: 0xCCE1E4 Offset: 0xCCE1E4 VA: 0xCCE1E4
	public int[] paramAddSelfIndividuality; // 0xE0
	[PackKeyAttribute] // RVA: 0xCCE21C Offset: 0xCCE21C VA: 0xCCE21C
	public int[] paramAddOpIndividuality; // 0xE8
	[PackKeyAttribute] // RVA: 0xCCE254 Offset: 0xCCE254 VA: 0xCCE254
	public int[] paramAddFieldIndividuality; // 0xF0
	[PackKeyAttribute] // RVA: 0xCCE28C Offset: 0xCCE28C VA: 0xCCE28C
	public int paramAddValue; // 0xF8
	[PackKeyAttribute] // RVA: 0xCCE2C4 Offset: 0xCCE2C4 VA: 0xCCE2C4
	public int paramAddMax; // 0xFC
	[PackKeyAttribute] // RVA: 0xCCE2FC Offset: 0xCCE2FC VA: 0xCCE2FC
	public int[] upBuffRateBuffType; // 0x100
	[PackKeyAttribute] // RVA: 0xCCE334 Offset: 0xCCE334 VA: 0xCCE334
	public int maxBuffRate; // 0x108
	[PackKeyAttribute] // RVA: 0xCCE36C Offset: 0xCCE36C VA: 0xCCE36C
	public int paramAddMaxCount; // 0x10C
	[PackKeyAttribute] // RVA: 0xCCE3A4 Offset: 0xCCE3A4 VA: 0xCCE3A4
	public int onPartyUniqueId; // 0x110
	private const int SHOW_STATE = 1;
	private const int HIDE_STATE = -1;
	private const int SHOW_DEFF_STATE = -2;
	private const int SHOW_STATE_STATUS_BUFF_ONLY = 2;
	private const int SHOW_STATE_DAMAGE_AND_COMMANDCARD_BUFF = 3;
	private bool _isRemove; // 0x114
	private int _removeBuffId; // 0x118

	// Properties
	public bool isRemove { get; set; }
	public int removeBuffId { get; set; }
	public int DispTurn { get; }

	// Methods

	// RVA: 0x1D5D31C Offset: 0x1D5D31C VA: 0x1D5D31C
	public void .ctor() { }

	// RVA: 0x1D5B30C Offset: 0x1D5B30C VA: 0x1D5B30C
	public void onState(BattleBuffData.BuffData.STATEENUM stateenum) { }

	// RVA: 0x1D62D8C Offset: 0x1D62D8C VA: 0x1D62D8C
	public void offState(BattleBuffData.BuffData.STATEENUM stateenum) { }

	// RVA: 0x1D57F1C Offset: 0x1D57F1C VA: 0x1D57F1C
	public bool checkState(BattleBuffData.BuffData.STATEENUM stateenum) { }

	// RVA: 0x1D568A8 Offset: 0x1D568A8 VA: 0x1D568A8
	public bool get_isRemove() { }

	// RVA: 0x1D5D344 Offset: 0x1D5D344 VA: 0x1D5D344
	public void set_isRemove(bool value) { }

	// RVA: 0x1D66054 Offset: 0x1D66054 VA: 0x1D66054
	public int get_removeBuffId() { }

	// RVA: 0x1D5D350 Offset: 0x1D5D350 VA: 0x1D5D350
	public void set_removeBuffId(int value) { }

	// RVA: 0x1D6605C Offset: 0x1D6605C VA: 0x1D6605C
	public int get_DispTurn() { }

	// RVA: 0x1D65DB0 Offset: 0x1D65DB0 VA: 0x1D65DB0
	public void setShowState(int type) { }

	// RVA: 0x1D56F00 Offset: 0x1D56F00 VA: 0x1D56F00
	public bool checkAct() { }

	// RVA: 0x1D5808C Offset: 0x1D5808C VA: 0x1D5808C
	public bool checkProgressTurn() { }

	// RVA: 0x1D66078 Offset: 0x1D66078 VA: 0x1D66078
	public bool isTargetSkill() { }

	// RVA: 0x1D602A4 Offset: 0x1D602A4 VA: 0x1D602A4
	public bool isValidHpRange() { }

	// RVA: 0x1D5E750 Offset: 0x1D5E750 VA: 0x1D5E750
	public bool isActiveCommandCode() { }

	// RVA: 0x1D5E740 Offset: 0x1D5E740 VA: 0x1D5E740
	public bool isCommandCodeBuff() { }

	// RVA: 0x1D627A4 Offset: 0x1D627A4 VA: 0x1D627A4
	public bool IsMineCommandCode(long id) { }

	// RVA: 0x1D59044 Offset: 0x1D59044 VA: 0x1D59044
	public int[] GetIndividualty(bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x1D660A4 Offset: 0x1D660A4 VA: 0x1D660A4
	public int GetUniqueId() { }

	// RVA: 0x1D5A248 Offset: 0x1D5A248 VA: 0x1D5A248
	public bool IslinkageTarget() { }

	// RVA: 0x1D660AC Offset: 0x1D660AC VA: 0x1D660AC
	public int checkRelationOrder(BattleBuffData.BuffData optBuff, bool isAttack) { }

	// RVA: 0x1D65678 Offset: 0x1D65678 VA: 0x1D65678
	public bool isEffectBuff() { }

	// RVA: 0x1D6208C Offset: 0x1D6208C VA: 0x1D6208C
	public bool CheckCond(BattleBuffData svtBuff, BuffList.ActInfo actInfo, int[] selfIndv, int[] opIndv, bool isRect) { }

	// RVA: 0x1D66198 Offset: 0x1D66198 VA: 0x1D66198
	public bool CheckCond(BattleBuffData svtBuff, BuffList.ActInfo actInfo, int[] selfIndv, int[] opIndv, bool isRect, out int plusMinus) { }

	// RVA: 0x1D646D4 Offset: 0x1D646D4 VA: 0x1D646D4
	public bool isEnableCommandCardBuff(BattleCommandData command) { }

	// RVA: 0x1D66270 Offset: 0x1D66270 VA: 0x1D66270
	public void RevertUnused() { }

	// RVA: 0x1D5E5F8 Offset: 0x1D5E5F8 VA: 0x1D5E5F8
	public bool isCommandCardBuff() { }

	// RVA: 0x1D602C8 Offset: 0x1D602C8 VA: 0x1D602C8
	public bool isParamAddIndividualiry() { }

	// RVA: 0x1D5D29C Offset: 0x1D5D29C VA: 0x1D5D29C
	public bool RemoveBuffCond(int removeTo, int removeCnt, int[] individualities, bool isForceSubState) { }

	// RVA: 0x1D64E10 Offset: 0x1D64E10 VA: 0x1D64E10
	public void SetBuffNoActState(BattleServantData[] servantArray) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39EEC Offset: 0xD39EEC VA: 0xD39EEC
	// RVA: 0x1D6627C Offset: 0x1D6627C VA: 0x1D6627C
	private bool <SetBuffNoActState>m__0(BattleServantData svt) { }
}

// Namespace: 
public enum BattleBuffData.BuffData.STATEENUM // TypeDefIndex: 8777
{
	// Fields
	public int value__; // 0x0
	public const BattleBuffData.BuffData.STATEENUM NOFIELD = 1;
	public const BattleBuffData.BuffData.STATEENUM BOOST = 2;
	public const BattleBuffData.BuffData.STATEENUM ISSHOW = 4;
	public const BattleBuffData.BuffData.STATEENUM ISHIDE = 8;
	public const BattleBuffData.BuffData.STATEENUM NOACT = 16;
	public const BattleBuffData.BuffData.STATEENUM COND = 32;
	public const BattleBuffData.BuffData.STATEENUM FRAME = 64;
	public const BattleBuffData.BuffData.STATEENUM ISHIDEPARAM = 128;
	public const BattleBuffData.BuffData.STATEENUM ISAPPID = 256;
	public const BattleBuffData.BuffData.STATEENUM ISSHOWCOMMAND = 512;
	public const BattleBuffData.BuffData.STATEENUM ISSHOWDEFF = 1024;
	public const BattleBuffData.BuffData.STATEENUM ISOPPONENTONLY = 2048;
	public const BattleBuffData.BuffData.STATEENUM IS_SHOW_STATUS_BUFF_ONLY = 4096;
	public const BattleBuffData.BuffData.STATEENUM IS_SHOW_DAMAGE_AND_COMMANDCARD_BUFF = 8192;
	public const BattleBuffData.BuffData.STATEENUM NO_FIELD_COUNT = 16384;
	public const BattleBuffData.BuffData.STATEENUM INVALID_HIDE = 32768;
	public const BattleBuffData.BuffData.STATEENUM IGNORE_INDIVIDUALITY = 65536;
	public const BattleBuffData.BuffData.STATEENUM FORCE_NOACT = 131072;
	public const BattleBuffData.BuffData.STATEENUM NO_TARGET_NOACT = 262144;
	public const BattleBuffData.BuffData.STATEENUM UNSUBSTATE = 524288;
	public const BattleBuffData.BuffData.STATEENUM IGNORE_INDIV_UNRELEASEABLE = 1048576;
	public const BattleBuffData.BuffData.STATEENUM SKILL_ACTOR_NOT_IN_PARTY_NOACT = 2097152;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFBF0 Offset: 0xCAFBF0 VA: 0xCAFBF0
private sealed class BattleBuffData.BuffData.<isEnableCommandCardBuff>c__AnonStorey0 // TypeDefIndex: 8778
{
	// Fields
	internal BattleCommandData command; // 0x10

	// Methods

	// RVA: 0x1D66268 Offset: 0x1D66268 VA: 0x1D66268
	public void .ctor() { }

	// RVA: 0x1D662C0 Offset: 0x1D662C0 VA: 0x1D662C0
	internal bool <>m__0(int index) { }
}

// Namespace: 
public class BattleBuffData.CheckInvokeBuff // TypeDefIndex: 8779
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCCE3DC Offset: 0xCCE3DC VA: 0xCCE3DC
	[DebuggerBrowsableAttribute] // RVA: 0xCCE3DC Offset: 0xCCE3DC VA: 0xCCE3DC
	private BattleServantData <SelfSvt>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCE418 Offset: 0xCCE418 VA: 0xCCE418
	[DebuggerBrowsableAttribute] // RVA: 0xCCE418 Offset: 0xCCE418 VA: 0xCCE418
	private BattleServantData <TargetSvt>k__BackingField; // 0x18
	protected BuffList.ACTION[] checkActs; // 0x20

	// Properties
	public BattleServantData SelfSvt { get; set; }
	public BattleServantData TargetSvt { get; set; }

	// Methods

	// RVA: 0x1D66464 Offset: 0x1D66464 VA: 0x1D66464
	public void .ctor(BattleServantData selfSvt, BattleServantData targetSvt, BuffList.ACTION[] actions) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39EFC Offset: 0xD39EFC VA: 0xD39EFC
	// RVA: 0x1D664A4 Offset: 0x1D664A4 VA: 0x1D664A4
	private void set_SelfSvt(BattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39F0C Offset: 0xD39F0C VA: 0xD39F0C
	// RVA: 0x1D664B4 Offset: 0x1D664B4 VA: 0x1D664B4
	public BattleServantData get_SelfSvt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39F1C Offset: 0xD39F1C VA: 0xD39F1C
	// RVA: 0x1D664AC Offset: 0x1D664AC VA: 0x1D664AC
	private void set_TargetSvt(BattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD39F2C Offset: 0xD39F2C VA: 0xD39F2C
	// RVA: 0x1D664BC Offset: 0x1D664BC VA: 0x1D664BC
	public BattleServantData get_TargetSvt() { }

	// RVA: 0x1D664C4 Offset: 0x1D664C4 VA: 0x1D664C4 Slot: 4
	public virtual bool IsInvoke(BattleBuffData.BuffData buff, BattleCommandData command) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC00 Offset: 0xCAFC00 VA: 0xCAFC00
private sealed class BattleBuffData.CheckInvokeBuff.<IsInvoke>c__AnonStorey0 // TypeDefIndex: 8780
{
	// Fields
	internal BattleBuffData.BuffData buff; // 0x10
	internal int[] selfIndv; // 0x18
	internal int[] opIndv; // 0x20
	internal BattleBuffData.CheckInvokeBuff $this; // 0x28

	// Methods

	// RVA: 0x1D665EC Offset: 0x1D665EC VA: 0x1D665EC
	public void .ctor() { }

	// RVA: 0x1D665F4 Offset: 0x1D665F4 VA: 0x1D665F4
	internal bool <>m__0(BuffList.ACTION act) { }
}

// Namespace: 
public class BattleBuffData.SaveData // TypeDefIndex: 8781
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCE454 Offset: 0xCCE454 VA: 0xCCE454
	public BattleBuffData.BuffData[] passive; // 0x10
	[PackKeyAttribute] // RVA: 0xCCE48C Offset: 0xCCE48C VA: 0xCCE48C
	public BattleBuffData.BuffData[] active; // 0x18
	[PackKeyAttribute] // RVA: 0xCCE4C4 Offset: 0xCCE4C4 VA: 0xCCE4C4
	public int addBuffOrder; // 0x20

	// Methods

	// RVA: 0x1D5DD14 Offset: 0x1D5DD14 VA: 0x1D5DD14
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC10 Offset: 0xCAFC10 VA: 0xCAFC10
private sealed class BattleBuffData.<getShowServantParam>c__AnonStorey0 // TypeDefIndex: 8782
{
	// Fields
	internal List<BattleBuffData.ShowBuffData> reList; // 0x10
	internal BattleBuffData $this; // 0x18

	// Methods

	// RVA: 0x1D573BC Offset: 0x1D573BC VA: 0x1D573BC
	public void .ctor() { }

	// RVA: 0x1D65E20 Offset: 0x1D65E20 VA: 0x1D65E20
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC20 Offset: 0xCAFC20 VA: 0xCAFC20
private sealed class BattleBuffData.<DebugGetShowServantParamAll>c__AnonStorey1 // TypeDefIndex: 8783
{
	// Fields
	internal List<BattleBuffData.ShowBuffData> reList; // 0x10

	// Methods

	// RVA: 0x1D57928 Offset: 0x1D57928 VA: 0x1D57928
	public void .ctor() { }

	// RVA: 0x1D65A3C Offset: 0x1D65A3C VA: 0x1D65A3C
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC30 Offset: 0xCAFC30 VA: 0xCAFC30
private sealed class BattleBuffData.<CheckBuffGroup>c__AnonStorey2 // TypeDefIndex: 8784
{
	// Fields
	internal int attachTarget; // 0x10

	// Methods

	// RVA: 0x1D5B9CC Offset: 0x1D5B9CC VA: 0x1D5B9CC
	public void .ctor() { }

	// RVA: 0x1D659F4 Offset: 0x1D659F4 VA: 0x1D659F4
	internal bool <>m__0(int target) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC40 Offset: 0xCAFC40 VA: 0xCAFC40
private sealed class BattleBuffData.<GetGrantBuffTypeArray>c__AnonStorey3 // TypeDefIndex: 8785
{
	// Fields
	internal List<int> buffTypeList; // 0x10
	internal BattleBuffData $this; // 0x18

	// Methods

	// RVA: 0x1D5D59C Offset: 0x1D5D59C VA: 0x1D5D59C
	public void .ctor() { }

	// RVA: 0x1D65AC8 Offset: 0x1D65AC8 VA: 0x1D65AC8
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC50 Offset: 0xCAFC50 VA: 0xCAFC50
private sealed class BattleBuffData.<getRectBuffList>c__AnonStorey4 // TypeDefIndex: 8786
{
	// Fields
	internal BuffEntity ent; // 0x10

	// Methods

	// RVA: 0x1D5E5F0 Offset: 0x1D5E5F0 VA: 0x1D5E5F0
	public void .ctor() { }

	// RVA: 0x1D65DE8 Offset: 0x1D65DE8 VA: 0x1D65DE8
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC60 Offset: 0xCAFC60 VA: 0xCAFC60
private sealed class BattleBuffData.<isConditionIndividuality>c__AnonStorey5 // TypeDefIndex: 8787
{
	// Fields
	internal int val; // 0x10

	// Methods

	// RVA: 0x1D5EF2C Offset: 0x1D5EF2C VA: 0x1D5EF2C
	public void .ctor() { }

	// RVA: 0x1D66044 Offset: 0x1D66044 VA: 0x1D66044
	internal bool <>m__0(int indiv) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC70 Offset: 0xCAFC70 VA: 0xCAFC70
private sealed class BattleBuffData.<ChangeBuffState>c__AnonStorey6 // TypeDefIndex: 8788
{
	// Fields
	internal int now; // 0x10
	internal int max; // 0x14
	internal int[] servantIndv; // 0x18
	internal int[] buffIndv; // 0x20
	internal int[] fieldIndiv; // 0x28
	internal bool isValueChanged; // 0x30
	internal BattleBuffData $this; // 0x38

	// Methods

	// RVA: 0x1D5F1E8 Offset: 0x1D5F1E8 VA: 0x1D5F1E8
	public void .ctor() { }

	// RVA: 0x1D65864 Offset: 0x1D65864 VA: 0x1D65864
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC80 Offset: 0xCAFC80 VA: 0xCAFC80
private sealed class BattleBuffData.<UpdateForceAllBuffNoAct>c__AnonStorey7 // TypeDefIndex: 8789
{
	// Fields
	internal int showState; // 0x10

	// Methods

	// RVA: 0x1D5F2E0 Offset: 0x1D5F2E0 VA: 0x1D5F2E0
	public void .ctor() { }

	// RVA: 0x1D65D38 Offset: 0x1D65D38 VA: 0x1D65D38
	internal void <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFC90 Offset: 0xCAFC90 VA: 0xCAFC90
private sealed class BattleBuffData.<CheckBuffType>c__AnonStorey8 // TypeDefIndex: 8790
{
	// Fields
	internal BuffEntity buffEnt; // 0x10

	// Methods

	// RVA: 0x1D620B8 Offset: 0x1D620B8 VA: 0x1D620B8
	public void .ctor() { }

	// RVA: 0x1D65A04 Offset: 0x1D65A04 VA: 0x1D65A04
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFCA0 Offset: 0xCAFCA0 VA: 0xCAFCA0
private sealed class BattleBuffData.<InitializeShift>c__AnonStorey9 // TypeDefIndex: 8791
{
	// Fields
	internal int actorId; // 0x10
	internal int[] buffindivs; // 0x18
	internal BattleBuffData $this; // 0x20

	// Methods

	// RVA: 0x1D623D0 Offset: 0x1D623D0 VA: 0x1D623D0
	public void .ctor() { }

	// RVA: 0x1D65C04 Offset: 0x1D65C04 VA: 0x1D65C04
	internal bool <>m__0(BattleBuffData.BuffData s) { }

	// RVA: 0x1D65C40 Offset: 0x1D65C40 VA: 0x1D65C40
	internal bool <>m__1(BattleBuffData.BuffData s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFCB0 Offset: 0xCAFCB0 VA: 0xCAFCB0
private sealed class BattleBuffData.<GetSkillTypeBuff>c__AnonStoreyA // TypeDefIndex: 8792
{
	// Fields
	internal List<int> targetSkillList; // 0x10

	// Methods

	// RVA: 0x1D63078 Offset: 0x1D63078 VA: 0x1D63078
	public void .ctor() { }

	// RVA: 0x1D65B84 Offset: 0x1D65B84 VA: 0x1D65B84
	internal bool <>m__0(BattleBuffData.BuffData buff) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFCC0 Offset: 0xCAFCC0 VA: 0xCAFCC0
private sealed class BattleBuffData.<UpdateBuffAddOrder>c__AnonStoreyB // TypeDefIndex: 8793
{
	// Fields
	internal int addPassiveMaxOrder; // 0x10

	// Methods

	// RVA: 0x1D637C4 Offset: 0x1D637C4 VA: 0x1D637C4
	public void .ctor() { }

	// RVA: 0x1D65C80 Offset: 0x1D65C80 VA: 0x1D65C80
	internal void <>m__0(BattleBuffData.BuffData x) { }

	// RVA: 0x1D65CDC Offset: 0x1D65CDC VA: 0x1D65CDC
	internal void <>m__1(BattleBuffData.BuffData x) { }
}

// Namespace: 
public interface BuffInterface // TypeDefIndex: 8794
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void setBuffState();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int getBuffStateValue(BuffList.CHANGEVALUE changeValue, int ratioParam);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int getBuffRangeValue(int lowEffectValue, int highEffectValue, int lowRange, int highRange);
}

// Namespace: 
public abstract class BattleCallBackBase // TypeDefIndex: 8795
{
	// Methods

	// RVA: 0x1D6707C Offset: 0x1D6707C VA: 0x1D6707C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void call();
}

// Namespace: 
public class BattleCallBack<T> : BattleCallBackBase // TypeDefIndex: 8796
{
	// Fields
	private T argument; // 0x0
	private Action<T> callBack; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T argument, Action<T> callBack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2517330 Offset: 0x2517330 VA: 0x2517330
	|-BattleCallBack<BattleActionData>..ctor
	|-BattleCallBack<object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void call() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2517374 Offset: 0x2517374 VA: 0x2517374
	|-BattleCallBack<object>.call
	*/
}

// Namespace: 
public class BattleCallBack<T1, T2> : BattleCallBackBase // TypeDefIndex: 8797
{
	// Fields
	private T1 arg1; // 0x0
	private T2 arg2; // 0x0
	private Action<T1, T2> callBack; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T1 arg1, T2 arg2, Action<T1, T2> callBack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x25173C0 Offset: 0x25173C0 VA: 0x25173C0
	|-BattleCallBack<BattleServantParamComponent, ShiftHpData>..ctor
	|-BattleCallBack<object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void call() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x251740C Offset: 0x251740C VA: 0x251740C
	|-BattleCallBack<object, object>.call
	*/
}

// Namespace: 
public class BattleCallBack<T1, T2, T3> : BattleCallBackBase // TypeDefIndex: 8798
{
	// Fields
	private T1 arg1; // 0x0
	private T2 arg2; // 0x0
	private T3 arg3; // 0x0
	private Action<T1, T2, T3> callBack; // 0x0

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(T1 arg1, T2 arg2, T3 arg3, Action<T1, T2, T3> callBack) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x251742C Offset: 0x251742C VA: 0x251742C
	|-BattleCallBack<int, bool, bool>..ctor
	|
	|-RVA: 0x25174BC Offset: 0x25174BC VA: 0x25174BC
	|-BattleCallBack<object, object, object>..ctor
	*/

	// RVA: -1 Offset: -1 Slot: 4
	public override void call() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2517494 Offset: 0x2517494 VA: 0x2517494
	|-BattleCallBack<int, bool, bool>.call
	|
	|-RVA: 0x2517514 Offset: 0x2517514 VA: 0x2517514
	|-BattleCallBack<object, object, object>.call
	*/
}

// Namespace: 
public class BattleCallBack : BattleCallBackBase // TypeDefIndex: 8799
{
	// Fields
	private Action callBack; // 0x10

	// Methods

	// RVA: 0x1D67050 Offset: 0x1D67050 VA: 0x1D67050
	public void .ctor(Action callBack) { }

	// RVA: 0x1D67084 Offset: 0x1D67084 VA: 0x1D67084 Slot: 4
	public override void call() { }
}

// Namespace: 
public class BattleCameraHitJudgment : MonoBehaviour // TypeDefIndex: 8800
{
	// Fields
	private Dictionary<MeshCollider, Action> targetColliderAction; // 0x18
	private Dictionary<MeshCollider, SkinnedMeshRenderer> targetSkinnedMesh; // 0x20
	private Dictionary<MeshCollider, int> targetColliderUIColliderIndex; // 0x28
	private Dictionary<MeshCollider, int> targetSvtId; // 0x30
	private List<SkinnedMeshRenderer> updatedSkinnedMeshs; // 0x38
	private Dictionary<SkinnedMeshRenderer, Bounds> prevSkinnedMeshBounds; // 0x40
	private int[] xScaleApplySvtId; // 0x48
	private Camera battleActorCamera; // 0x50
	private BattlePerformance battlePerformance; // 0x58
	[SerializeField] // RVA: 0xCCE4FC Offset: 0xCCE4FC VA: 0xCCE4FC
	private Transform enemyInputRoot; // 0x60
	private Vector3 enemyInputRootDefaultPosition; // 0x68
	private Vector3 enemyInputRootDefaultScale; // 0x74
	[SerializeField] // RVA: 0xCCE50C Offset: 0xCCE50C VA: 0xCCE50C
	private BattleValueButtonComponent[] uiColliderAction; // 0x80
	[SerializeField] // RVA: 0xCCE51C Offset: 0xCCE51C VA: 0xCCE51C
	private BoxCollider[] uiCollider; // 0x88
	[SerializeField] // RVA: 0xCCE52C Offset: 0xCCE52C VA: 0xCCE52C
	private float BakeMeshThresholdValue; // 0x90
	private Camera battleUICamera; // 0x98
	private bool isTouched; // 0xA0
	private Collider touchedCollision; // 0xA8
	private int touchFinderID; // 0xB0

	// Properties
	private int[] XScaleApplySvtId { get; }

	// Methods

	// RVA: 0x1D670B4 Offset: 0x1D670B4 VA: 0x1D670B4
	public void .ctor() { }

	// RVA: 0x1D67234 Offset: 0x1D67234 VA: 0x1D67234
	private int[] get_XScaleApplySvtId() { }

	// RVA: 0x1D672F4 Offset: 0x1D672F4 VA: 0x1D672F4
	private void Awake() { }

	// RVA: 0x1D67358 Offset: 0x1D67358 VA: 0x1D67358
	public void SetCamera(Camera camera) { }

	// RVA: 0x1D67360 Offset: 0x1D67360 VA: 0x1D67360
	public void SetUICamera(Camera camera) { }

	// RVA: 0x1D67368 Offset: 0x1D67368 VA: 0x1D67368
	public void SetBattlePerformance(BattlePerformance battlePerformance) { }

	// RVA: 0x1D67370 Offset: 0x1D67370 VA: 0x1D67370
	public void Clear() { }

	// RVA: 0x1D67484 Offset: 0x1D67484 VA: 0x1D67484
	public void AddCollider(MeshCollider collider, SkinnedMeshRenderer skinnedMesh, int uiColliderIndex, int svtId, Action clickAction, bool isEnableUiCollider) { }

	// RVA: 0x1D67690 Offset: 0x1D67690 VA: 0x1D67690
	public void RemoveCollider(MeshCollider collider) { }

	// RVA: 0x1D678D0 Offset: 0x1D678D0 VA: 0x1D678D0
	private void BakeMesh(MeshCollider meshCollider, SkinnedMeshRenderer skinnedMesh) { }

	// RVA: 0x1D67F14 Offset: 0x1D67F14 VA: 0x1D67F14
	private void LateUpdate() { }

	// RVA: 0x1D678BC Offset: 0x1D678BC VA: 0x1D678BC
	private void ClearTouchInfo() { }

	[CompilerGeneratedAttribute] // RVA: 0xD39F3C Offset: 0xD39F3C VA: 0xD39F3C
	// RVA: 0x1D68F58 Offset: 0x1D68F58 VA: 0x1D68F58
	private bool <LateUpdate>m__0(BoxCollider x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFCD0 Offset: 0xCAFCD0 VA: 0xCAFCD0
private sealed class BattleCameraHitJudgment.<BakeMesh>c__AnonStorey0 // TypeDefIndex: 8801
{
	// Fields
	internal int svtId; // 0x10

	// Methods

	// RVA: 0x1D67F0C Offset: 0x1D67F0C VA: 0x1D67F0C
	public void .ctor() { }

	// RVA: 0x1D68FD4 Offset: 0x1D68FD4 VA: 0x1D68FD4
	internal bool <>m__0(int x) { }
}

// Namespace: 
public class BattleCutInComponent : BaseMonoBehaviour // TypeDefIndex: 8802
{
	// Fields
	public UISprite sprite; // 0x18
	public UILabel label; // 0x20
	private Hashtable table; // 0x28
	private Vector3 startTr; // 0x30
	private Vector3 endTr; // 0x3C
	private float totaltime; // 0x48

	// Methods

	// RVA: 0x15C45B0 Offset: 0x15C45B0 VA: 0x15C45B0
	public void .ctor() { }

	// RVA: 0x15C4618 Offset: 0x15C4618 VA: 0x15C4618
	public void setData(int Id, int type, Vector3 startt, Vector3 endt, float time, string param) { }

	// RVA: 0x15C4778 Offset: 0x15C4778 VA: 0x15C4778
	public void startAction() { }

	// RVA: 0x15C4920 Offset: 0x15C4920 VA: 0x15C4920
	public void onStartComp() { }

	// RVA: 0x15C4B10 Offset: 0x15C4B10 VA: 0x15C4B10
	public void onEndComp() { }
}

// Namespace: 
public class BattleData : MonoBehaviour, AiInterface // TypeDefIndex: 8803
{
	// Fields
	public PlayMakerFSM rootfsm; // 0x18
	public PlayMakerFSM fsm; // 0x20
	public BattleData data; // 0x28
	public BattleLogic logic; // 0x30
	public BattlePerformance perf; // 0x38
	private BattleEntity battle_ent; // 0x40
	private BattleInfoData battle_info; // 0x48
	private QuestEntity quest_ent; // 0x50
	private QuestPhaseEntity questphase_ent; // 0x58
	private List<int> questIndividuality; // 0x60
	public int masterSkillIconId; // 0x68
	public List<BattleSkillInfoData> masterSkillInfo; // 0x70
	public List<BattleBoostItemInfoData> boostSkillInfo; // 0x78
	public List<BattleServantData> player_datalist; // 0x80
	private List<AiNpcBattleServantData> aiNpcDataList; // 0x88
	public BattleFieldData[] field_datalist; // 0x90
	public BattleCommandData[] p_cmlist; // 0x98
	public List<BattleServantData> enemy_datalist; // 0xA0
	public EnemyMstBattleEntity enemyMasterInfo; // 0xA8
	public int initturn; // 0xB0
	public int wavecount; // 0xB4
	public int turnCount; // 0xB8
	public int totalTurnCount; // 0xBC
	public int limitTurnCount; // 0xC0
	public int limitAct; // 0xC4
	public int[] turnEffect; // 0xC8
	public int turnEffectType; // 0xD0
	public int changeBgId; // 0xD4
	public int changeBgType; // 0xD8
	private int[] overwriteBgIndividuality; // 0xE0
	public bool turnElapsedEndBattleFlag; // 0xE8
	public bool isTurnElapsedEndBattle; // 0xE9
	public int[] waveClearNeedTurn; // 0xF0
	public List<Dictionary<string, object>> firstNpPlayList; // 0xF8
	public int stateshowturn; // 0x100
	public int enemyActCount; // 0x104
	public bool leaderDown; // 0x108
	public bool endbattleFlg; // 0x109
	public bool loseBattleFlg; // 0x10A
	public int maxEnemyUniqueID; // 0x10C
	public int maxEnemyIndex; // 0x110
	public int[] p_entryid; // 0x118
	public int[] e_entryid; // 0x120
	public int[] p_changedecklist; // 0x128
	public int countEnemyAttack; // 0x130
	public int p_maxcommand; // 0x134
	public int globaltargetId; // 0x138
	public List<int> lockTargetIdList; // 0x140
	public bool[] enemyAppearValid; // 0x148
	public int enemyMasterCommandSpellUseCnt; // 0x150
	public long maxTurnDamageRecord; // 0x158
	public long maxTurnDamageInBattle; // 0x160
	public long totalDamageInTurn; // 0x168
	public QuestKnockdownInfo currenctKnockdown; // 0x170
	public int[] waveKnockdownNums; // 0x178
	public int battleGenderType; // 0x180
	private PlayerFieldStatus playerFieldStatus; // 0x188
	private EnemyFieldStatus enemyFieldStatus; // 0x190
	public int shuffleindex; // 0x198
	public BattleCommandData[] p_shcmlist; // 0x1A0
	public BattleCommandData[] draw_commandlist; // 0x1A8
	public BattleCommandData[] selectcommandlist; // 0x1B0
	public BattleComboData combodata; // 0x1B8
	public CommandCodeInfo[] commandCodeInfos; // 0x1C0
	private BattleCommandData[] fixedCommands; // 0x1C8
	private BattleCommandData[] wkCommands; // 0x1D0
	private int canSelectCommandIndex; // 0x1D8
	private List<int> doNotSelectCommandSvtIdList; // 0x1E0
	private BattleCommandData[] canSelectCommands; // 0x1E8
	public List<BattleData.CommandHistory> comhistory; // 0x1F0
	public BattleActionLogManagerInterface actionLogManager; // 0x1F8
	public List<BattleDropItem> droplist; // 0x200
	public int criticalstars; // 0x208
	private int totalCriticalStars; // 0x20C
	private int addCriticalstars; // 0x210
	private int subCriticalCount; // 0x214
	private int prevCriticalstars; // 0x218
	private bool isCalcCritical; // 0x21C
	private List<DataVals> performedValsList; // 0x220
	private List<BattleActionData.BuffData> freshBuffDataList; // 0x228
	private int[] commandCriticalArray; // 0x230
	private int continueCount; // 0x238
	private List<RestockServantLogic> restockServantLogicList; // 0x240
	[CompilerGeneratedAttribute] // RVA: 0xCCE53C Offset: 0xCCE53C VA: 0xCCE53C
	[DebuggerBrowsableAttribute] // RVA: 0xCCE53C Offset: 0xCCE53C VA: 0xCCE53C
	private bool <IsReleaseUnusedAssetsWhenEntryMember>k__BackingField; // 0x248
	private ItemDroppedSkillShiftInfo itemDroppedSkillShiftInfo; // 0x250
	public int win_lose; // 0x258
	public BattleData.WinResult winResult; // 0x25C
	public bool systemflg_selectcancel; // 0x260
	public bool systemflg_autosave; // 0x261
	public bool systemflg_skipskillconf; // 0x262
	public bool systemflg_TdConstantvelocity; // 0x263
	public int systemflg_acceleration; // 0x264
	public bool systemflg_skipDead; // 0x268
	public bool systemflg_skipDeadtemp; // 0x269
	public bool flg_resumebattle; // 0x26A
	public int progresslistflg; // 0x26C
	private const int VALID_TOTAL_STAR_MAX = 99;
	private const int VALID_VIEW_STAR_MAX = 49;
	public TutorialFlag.Id tutorialRaidBattleId; // 0x270
	public BattleData.TYPETURN typeTurn; // 0x274
	private int[] overrideBgmData; // 0x278
	[CompilerGeneratedAttribute] // RVA: 0xCCE578 Offset: 0xCCE578 VA: 0xCCE578
	[DebuggerBrowsableAttribute] // RVA: 0xCCE578 Offset: 0xCCE578 VA: 0xCCE578
	private SubBgmPlayArgs[] <CurrentSubBgmArgsArray>k__BackingField; // 0x280
	private List<int> playedSpeedOneSkillIdList; // 0x288
	private List<string> playedSpeedOneFieldIdList; // 0x290
	private Dictionary<int, int> usedEventMasterSkillDict; // 0x298
	private Dictionary<int, int> eventPointActivityDict; // 0x2A0
	public int endMasterSkillTurnBuffValue; // 0x2A8
	private bool isRetryable; // 0x2AC
	public bool winBattleNotRelatedSurvivalStatus; // 0x2AD
	public bool isMultiTargetBattle; // 0x2AE
	public ChangeBattlePhaseNotify changePhaseNotify; // 0x2B0
	public const string FOCUSUP = "FOCUS_UP";
	public const string FOCUSCENTER = "FOCUS_CENTER";
	public const string FOCUSUNDER = "FOCUS_UNDER";
	public const string FOCUSUP_EX = "FOCUS_UP_EX";
	public const string FOCUSCENTER_EX = "FOCUS_CENTER_EX";
	public const string FOCUSUNDER_EX = "FOCUS_UNDER_EX";
	public int justDeadTargetId; // 0x2B8
	public bool isItemResultSkip; // 0x2BC
	public BattleActionData beforeAction; // 0x2C0
	public bool isLoseRetireClear; // 0x2C8
	private const string svtCommonFlagSaveKey = "BATTLE_SVT_COMMON_FLAG";
	public int[] maleIndiv; // 0x2D0
	public int[] femaleIndiv; // 0x2D8
	public BattleAttackManager battleAtkManager; // 0x2E0
	public BaseBattleEvent battleEvent; // 0x2E8
	public bool isWaitDrawCard; // 0x2F0
	public bool isCommandSelected; // 0x2F1
	[CompilerGeneratedAttribute] // RVA: 0xCCE5B4 Offset: 0xCCE5B4 VA: 0xCCE5B4
	[DebuggerBrowsableAttribute] // RVA: 0xCCE5B4 Offset: 0xCCE5B4 VA: 0xCCE5B4
	private int <EnemyFieldPosCount>k__BackingField; // 0x2F4
	public List<BattleSkillInfoData> boostInfoList; // 0x2F8
	public int temporarySpell; // 0x300
	public BattleDefenceTargetData defenceTargetData; // 0x308
	protected Dictionary<string, object> voicePlayedInfo; // 0x310
	protected HashSet<string> voicePlayedOver64Info; // 0x318
	private List<string> commonEffectPathList; // 0x320
	public long masterSkillUseWaveTurn; // 0x328
	private Dictionary<BattleData.CHAIN_COUNT_TYPE, int> chainCountDict; // 0x330
	private UseSkillEachTurn useSkillEachTurn; // 0x338
	private bool isShowMasterSkillCutIn; // 0x340
	private int lastactorId; // 0x344
	private long prevactId; // 0x348
	private long prevtargetId; // 0x350
	public const int VALID_STAR_MAX = 50;
	private static readonly string skipKey; // 0x0
	private static readonly string speedKey; // 0x8
	private static readonly string TdCvKey; // 0x10
	private static readonly string SkipDeadKey; // 0x18
	private const string savekey = "SAVEKEY_";
	private const string reserveSavekey = "RESERVE_BATTKE_SAVEKEY";
	private const string questSaveKey = "QUESTID";
	private const string questPhaseSaveKey = "QUESTPHASEID";
	private const string questUsedTurnSaveKey = "QUESTUSEDTURNSAVEKEY";
	private const string version = "0.6.17.1";
	private const bool isDuelMessagePack = True;
	private const string continueBattleSaveKey = "CONTINUE_BATTLE_SAVEKEY";
	private const string commandSpellBattleSaveKey = "COMMAND_SPELL_BATTLE_SAVEKEY";
	private const string continueItemSaveKey = "CONTINUE_ITEM_SAVEKEY";
	private const string battleUseItemSaveKey = "BATTLE_USE_ITEM_SAVEKEY";
	private const string continueCountSaveKey = "CONTINUECOUNT";
	public int tutorialId; // 0x358
	public int tutorialState; // 0x35C
	private Dictionary<int, BattleServantData.SaveData> tmpEnemyData_MP; // 0x360
	private Dictionary<string, object> tmpEnemyData; // 0x368
	private BattleFieldData.SaveData[] tmpFieldDataSave; // 0x370
	private int tmpEnemySpellCntSave; // 0x378
	private long tmpMaxTurnDamage; // 0x380
	private List<Dictionary<string, object>> tmpFirstNpPlayList; // 0x388
	private bool[] tmpEnemyAppearValids; // 0x390
	private const string UP_PARTS_NODE_NAME = "en_Parts_Up01";
	private const string UNDER_PARTS_NODE_NAME = "en_Parts_Under01";
	private double[] wkZeroParam; // 0x398
	private int oldAliveCount; // 0x3A0
	private int continueUseItemId; // 0x3A4
	private int continueItemImageId; // 0x3A8
	private int continueItemNum; // 0x3AC
	private long continueItemDeadLine; // 0x3B0
	[CompilerGeneratedAttribute] // RVA: 0xCCE5F0 Offset: 0xCCE5F0 VA: 0xCCE5F0
	private static Func<RestrictionEntity, bool> <>f__am$cache0; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCCE600 Offset: 0xCCE600 VA: 0xCCE600
	private static Func<BattleServantData, int> <>f__am$cache1; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCCE610 Offset: 0xCCE610 VA: 0xCCE610
	private static Predicate<RestockServantLogic> <>f__am$cache2; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCE620 Offset: 0xCCE620 VA: 0xCCE620
	private static Action<AiNpcBattleServantData> <>f__am$cache3; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCCE630 Offset: 0xCCE630 VA: 0xCCE630
	private static Func<int, int> <>f__am$cache4; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCCE640 Offset: 0xCCE640 VA: 0xCCE640
	private static Comparison<BattleServantData> <>f__am$cache5; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCCE650 Offset: 0xCCE650 VA: 0xCCE650
	private static Comparison<BattleServantData> <>f__am$cache6; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCCE660 Offset: 0xCCE660 VA: 0xCCE660
	private static Comparison<BattleServantData> <>f__am$cache7; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCCE670 Offset: 0xCCE670 VA: 0xCCE670
	private static Predicate<BattleServantData> <>f__am$cache8; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCCE680 Offset: 0xCCE680 VA: 0xCCE680
	private static Func<BattleServantData, int> <>f__am$cache9; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCCE690 Offset: 0xCCE690 VA: 0xCCE690
	private static Func<BattleServantData, int> <>f__am$cacheA; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCCE6A0 Offset: 0xCCE6A0 VA: 0xCCE6A0
	private static Converter<string, int> <>f__am$cacheB; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCCE6B0 Offset: 0xCCE6B0 VA: 0xCCE6B0
	private static Func<AiNpcBattleServantData, BattleServantData.SaveData> <>f__am$cacheC; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCCE6C0 Offset: 0xCCE6C0 VA: 0xCCE6C0
	private static Converter<BattleServantData, BattleServantData.ConnectData> <>f__am$cacheD; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCCE6D0 Offset: 0xCCE6D0 VA: 0xCCE6D0
	private static Func<object, int> <>f__mg$cache0; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xCCE6E0 Offset: 0xCCE6E0 VA: 0xCCE6E0
	private static Func<string, BattleData.CHAIN_COUNT_TYPE> <>f__am$cacheE; // 0x98
	[CompilerGeneratedAttribute] // RVA: 0xCCE6F0 Offset: 0xCCE6F0 VA: 0xCCE6F0
	private static Comparison<BattleServantData> <>f__am$cacheF; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xCCE700 Offset: 0xCCE700 VA: 0xCCE700
	private static Func<BattleServantData, bool> <>f__am$cache10; // 0xA8
	[CompilerGeneratedAttribute] // RVA: 0xCCE710 Offset: 0xCCE710 VA: 0xCCE710
	private static Func<BattleServantData, bool> <>f__am$cache11; // 0xB0
	[CompilerGeneratedAttribute] // RVA: 0xCCE720 Offset: 0xCCE720 VA: 0xCCE720
	private static Func<int, bool> <>f__am$cache12; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xCCE730 Offset: 0xCCE730 VA: 0xCCE730
	private static Func<BattleServantData, bool> <>f__am$cache13; // 0xC0

	// Properties
	public List<AiNpcBattleServantData> AiNpcDataList { get; }
	public bool IsReleaseUnusedAssetsWhenEntryMember { get; set; }
	public SubBgmPlayArgs[] CurrentSubBgmArgsArray { get; set; }
	public float AccelSystemTimeScale { get; }
	public int EnemyFieldPosCount { get; set; }
	public bool IsEnemyPosCountNormal { get; }
	public int eventId { get; }
	public int[][] VoicePlayedList { get; }
	public bool AddAttack { get; }
	public bool IsHighspeedTd { get; }

	// Methods

	// RVA: 0x15C4B8C Offset: 0x15C4B8C VA: 0x15C4B8C
	public void .ctor() { }

