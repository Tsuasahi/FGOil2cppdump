public class RaceResultEffectComponent : CommonEffectComponent // TypeDefIndex: 7739
{
	// Fields
	[SerializeField] // RVA: 0xC56BDC Offset: 0xC56BDC VA: 0xC56BDC
	protected GameObject[] parameterRecvComponentList; // 0xA8
	protected object param; // 0xB0

	// Methods

	// RVA: 0x12854E0 Offset: 0x12854E0 VA: 0x12854E0
	public void .ctor() { }

	// RVA: 0x12854E8 Offset: 0x12854E8 VA: 0x12854E8 Slot: 4
	public override void SetParam(object param) { }

	// RVA: 0x1285624 Offset: 0x1285624 VA: 0x1285624
	public object GetParam() { }
}

// Namespace: 
public class RaceResultPointGroupEffectSubComponent : BaseMonoBehaviour // TypeDefIndex: 7740
{
	// Fields
	public static readonly string GROUP_IMAGE_NAME; // 0x0
	public static readonly string GROUP_NAME_IMAGE_NAME; // 0x8
	[SerializeField] // RVA: 0xC56BEC Offset: 0xC56BEC VA: 0xC56BEC
	protected UILabel[] nameLabelList; // 0x18
	[SerializeField] // RVA: 0xC56BFC Offset: 0xC56BFC VA: 0xC56BFC
	protected UISprite[] nameSpriteList; // 0x20
	[SerializeField] // RVA: 0xC56C0C Offset: 0xC56C0C VA: 0xC56C0C
	protected UISprite[] iconSpriteList; // 0x28
	[SerializeField] // RVA: 0xC56C1C Offset: 0xC56C1C VA: 0xC56C1C
	protected UILabel[] timeLabelList; // 0x30

	// Methods

	// RVA: 0x1285634 Offset: 0x1285634 VA: 0x1285634
	public void .ctor() { }

	// RVA: 0x128563C Offset: 0x128563C VA: 0x128563C
	public void RecvParam(object param) { }

	// RVA: 0x1285FBC Offset: 0x1285FBC VA: 0x1285FBC
	private static void .cctor() { }
}

// Namespace: 
public class RankObjectSwitchEffectSubComponent : EffectSubComponent // TypeDefIndex: 7741
{
	// Fields
	[SerializeField] // RVA: 0xC56C2C Offset: 0xC56C2C VA: 0xC56C2C
	protected GameObject[] switchObjectList; // 0x18

	// Methods

	// RVA: 0x12875B0 Offset: 0x12875B0 VA: 0x12875B0
	public void .ctor() { }

	// RVA: 0x12875B8 Offset: 0x12875B8 VA: 0x12875B8 Slot: 4
	public override void RecvParam(object param) { }
}

// Namespace: 
public class RaceResultEffectParam // TypeDefIndex: 7742
{
	// Fields
	public int questId; // 0x10
	public long[] parameterList; // 0x18

	// Methods

	// RVA: 0x128562C Offset: 0x128562C VA: 0x128562C
	public void .ctor() { }
}

// Namespace: 
public enum RaceResultEffectParam.ParamIndex // TypeDefIndex: 7743
{
	// Fields
	public int value__; // 0x0
	public const RaceResultEffectParam.ParamIndex EVENT_ID = 0;
	public const RaceResultEffectParam.ParamIndex TERM_ID = 1;
	public const RaceResultEffectParam.ParamIndex GROUP_ID = 2;
	public const RaceResultEffectParam.ParamIndex RANK = 3;
	public const RaceResultEffectParam.ParamIndex TIME = 4;
}

// Namespace: 
public class SummonEffectAspectSetComponent : BaseMonoBehaviour // TypeDefIndex: 7744
{
	// Fields
	[SerializeField] // RVA: 0xC56C3C Offset: 0xC56C3C VA: 0xC56C3C
	private Transform go_above_cardScaler; // 0x18
	[SerializeField] // RVA: 0xC56C4C Offset: 0xC56C4C VA: 0xC56C4C
	private Transform go_msg_shine00; // 0x20
	[SerializeField] // RVA: 0xC56C5C Offset: 0xC56C5C VA: 0xC56C5C
	private Transform go_msg_shine01; // 0x28
	[SerializeField] // RVA: 0xC56C6C Offset: 0xC56C6C VA: 0xC56C6C
	private Transform go_msg_shine02; // 0x30
	[SerializeField] // RVA: 0xC56C7C Offset: 0xC56C7C VA: 0xC56C7C
	private ParticleSystem ps_appear_border; // 0x38
	[SerializeField] // RVA: 0xC56C8C Offset: 0xC56C8C VA: 0xC56C8C
	private ParticleSystem ps_appear_lightburst2; // 0x40

	// Methods

	// RVA: 0x11924FC Offset: 0x11924FC VA: 0x11924FC
	public void .ctor() { }

	// RVA: 0x1192504 Offset: 0x1192504 VA: 0x1192504
	private void Start() { }
}

// Namespace: 
public class TermNameEffectSubComponent : EffectSubComponent // TypeDefIndex: 7745
{
	// Fields
	[SerializeField] // RVA: 0xC56C9C Offset: 0xC56C9C VA: 0xC56C9C
	protected UILabel label; // 0x18

	// Methods

	// RVA: 0x108EA70 Offset: 0x108EA70 VA: 0x108EA70
	public void .ctor() { }

	// RVA: 0x108EA78 Offset: 0x108EA78 VA: 0x108EA78 Slot: 4
	public override void RecvParam(object param) { }
}

// Namespace: 
public class TermObjectSwitchEffectSubComponent : EffectSubComponent // TypeDefIndex: 7746
{
	// Fields
	[SerializeField] // RVA: 0xC56CAC Offset: 0xC56CAC VA: 0xC56CAC
	protected GameObject[] switchObjectList; // 0x18

	// Methods

	// RVA: 0x108EC78 Offset: 0x108EC78 VA: 0x108EC78
	public void .ctor() { }

	// RVA: 0x108EC80 Offset: 0x108EC80 VA: 0x108EC80 Slot: 4
	public override void RecvParam(object param) { }
}

// Namespace: 
public class VoiceEffectComponent : CommonEffectComponent // TypeDefIndex: 7747
{
	// Fields
	[SerializeField] // RVA: 0xC56CBC Offset: 0xC56CBC VA: 0xC56CBC
	private string voiceDataStr; // 0xA8
	[SerializeField] // RVA: 0xC56CCC Offset: 0xC56CCC VA: 0xC56CCC
	private int voiceId; // 0xB0
	private string voicePath; // 0xB8

	// Methods

	// RVA: 0x147C560 Offset: 0x147C560 VA: 0x147C560
	public void .ctor() { }

	// RVA: 0x147C568 Offset: 0x147C568 VA: 0x147C568
	public void LoadVoiceAsset(Action callback) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[TooltipAttribute] // RVA: 0xC25440 Offset: 0xC25440 VA: 0xC25440
public abstract class iTweenFsmActionSimple : FsmStateAction // TypeDefIndex: 7748
{
	// Fields
	internal iTweenFSMEvents itweenEvents; // 0x50
	protected string itweenType; // 0x58
	protected int itweenID; // 0x60

	// Methods

	// RVA: 0x2098F3C Offset: 0x2098F3C VA: 0x2098F3C
	protected void .ctor() { }

	// RVA: 0x2098FBC Offset: 0x2098FBC VA: 0x2098FBC Slot: 28
	public override void Reset() { }

	// RVA: 0x209902C Offset: 0x209902C VA: 0x209902C
	protected void OnEnteriTween(FsmOwnerDefault anOwner) { }

	// RVA: 0x2099174 Offset: 0x2099174 VA: 0x2099174
	protected void IsLoop(bool aValue) { }

	// RVA: 0x2099210 Offset: 0x2099210 VA: 0x2099210
	protected void OnExitiTween(FsmOwnerDefault anOwner) { }

	// RVA: 0x2099320 Offset: 0x2099320 VA: 0x2099320
	public static bool IsLookAtSpecificValue(iTweenMoveTo src) { }

	// RVA: 0x20993D8 Offset: 0x20993D8 VA: 0x20993D8
	public static bool IsEventsSpecificValue(iTweenMoveTo src) { }

	// RVA: 0x2099478 Offset: 0x2099478 VA: 0x2099478
	public static bool IsLookAtDefault(iTweenMoveAdd src) { }

	// RVA: 0x2099534 Offset: 0x2099534 VA: 0x2099534
	public static bool IsEventsSpecificValue(iTweenMoveAdd src) { }

	// RVA: 0x20995D4 Offset: 0x20995D4 VA: 0x20995D4
	public static bool IsLookAtSpecificValue(iTweenMoveUpdate src) { }
}

// Namespace: 
public enum iTweenFsmActionSimple.AxisRestriction // TypeDefIndex: 7749
{
	// Fields
	public int value__; // 0x0
	public const iTweenFsmActionSimple.AxisRestriction none = 0;
	public const iTweenFsmActionSimple.AxisRestriction x = 1;
	public const iTweenFsmActionSimple.AxisRestriction y = 2;
	public const iTweenFsmActionSimple.AxisRestriction z = 3;
	public const iTweenFsmActionSimple.AxisRestriction xy = 4;
	public const iTweenFsmActionSimple.AxisRestriction xz = 5;
	public const iTweenFsmActionSimple.AxisRestriction yz = 6;
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC25478 Offset: 0xC25478 VA: 0xC25478
[TooltipAttribute] // RVA: 0xC25478 Offset: 0xC25478 VA: 0xC25478
public class iTweenMoveAddSimple : iTweenFsmActionSimple // TypeDefIndex: 7750
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC56CDC Offset: 0xC56CDC VA: 0xC56CDC
	public FsmOwnerDefault gameObject; // 0x68
	[TooltipAttribute] // RVA: 0xC56CEC Offset: 0xC56CEC VA: 0xC56CEC
	public FsmString id; // 0x70
	[RequiredFieldAttribute] // RVA: 0xC56D24 Offset: 0xC56D24 VA: 0xC56D24
	[TooltipAttribute] // RVA: 0xC56D24 Offset: 0xC56D24 VA: 0xC56D24
	public FsmVector3 vector; // 0x78
	[TooltipAttribute] // RVA: 0xC56D70 Offset: 0xC56D70 VA: 0xC56D70
	public FsmFloat time; // 0x80
	[TooltipAttribute] // RVA: 0xC56DA8 Offset: 0xC56DA8 VA: 0xC56DA8
	public FsmFloat delay; // 0x88
	[TooltipAttribute] // RVA: 0xC56DE0 Offset: 0xC56DE0 VA: 0xC56DE0
	public FsmFloat speed; // 0x90
	[TooltipAttribute] // RVA: 0xC56E18 Offset: 0xC56E18 VA: 0xC56E18
	public iTween.EaseType easeType; // 0x98
	[TooltipAttribute] // RVA: 0xC56E50 Offset: 0xC56E50 VA: 0xC56E50
	public iTween.LoopType loopType; // 0x9C
	public Space space; // 0xA0

	// Methods

	// RVA: 0x209C9C0 Offset: 0x209C9C0 VA: 0x209C9C0
	public void .ctor() { }

	// RVA: 0x209C9CC Offset: 0x209C9CC VA: 0x209C9CC Slot: 28
	public override void Reset() { }

	// RVA: 0x209CAF0 Offset: 0x209CAF0 VA: 0x209CAF0 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x209D0C4 Offset: 0x209D0C4 VA: 0x209D0C4 Slot: 37
	public override void OnExit() { }

	// RVA: 0x209CB2C Offset: 0x209CB2C VA: 0x209CB2C
	private void DoiTween() { }

	// RVA: 0x209D0CC Offset: 0x209D0CC VA: 0x209D0CC
	public static bool IsConvertableData(iTweenMoveAdd src) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC254D8 Offset: 0xC254D8 VA: 0xC254D8
[TooltipAttribute] // RVA: 0xC254D8 Offset: 0xC254D8 VA: 0xC254D8
public class iTweenMoveToSimple : iTweenFsmActionSimple // TypeDefIndex: 7751
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC56E88 Offset: 0xC56E88 VA: 0xC56E88
	public FsmOwnerDefault gameObject; // 0x68
	[TooltipAttribute] // RVA: 0xC56E98 Offset: 0xC56E98 VA: 0xC56E98
	public FsmString id; // 0x70
	[TooltipAttribute] // RVA: 0xC56ED0 Offset: 0xC56ED0 VA: 0xC56ED0
	public FsmGameObject transformPosition; // 0x78
	[TooltipAttribute] // RVA: 0xC56F08 Offset: 0xC56F08 VA: 0xC56F08
	public FsmVector3 vectorPosition; // 0x80
	[TooltipAttribute] // RVA: 0xC56F40 Offset: 0xC56F40 VA: 0xC56F40
	public FsmFloat time; // 0x88
	[TooltipAttribute] // RVA: 0xC56F78 Offset: 0xC56F78 VA: 0xC56F78
	public FsmFloat delay; // 0x90
	[TooltipAttribute] // RVA: 0xC56FB0 Offset: 0xC56FB0 VA: 0xC56FB0
	public FsmFloat speed; // 0x98
	[TooltipAttribute] // RVA: 0xC56FE8 Offset: 0xC56FE8 VA: 0xC56FE8
	public Space space; // 0xA0
	[TooltipAttribute] // RVA: 0xC57020 Offset: 0xC57020 VA: 0xC57020
	public iTween.EaseType easeType; // 0xA4
	[TooltipAttribute] // RVA: 0xC57058 Offset: 0xC57058 VA: 0xC57058
	public iTween.LoopType loopType; // 0xA8

	// Methods

	// RVA: 0x20A0BB0 Offset: 0x20A0BB0 VA: 0x20A0BB0
	public void .ctor() { }

	// RVA: 0x20A0BBC Offset: 0x20A0BBC VA: 0x20A0BBC Slot: 28
	public override void Reset() { }

	// RVA: 0x20A0D1C Offset: 0x20A0D1C VA: 0x20A0D1C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x20A14FC Offset: 0x20A14FC VA: 0x20A14FC Slot: 37
	public override void OnExit() { }

	// RVA: 0x20A0D58 Offset: 0x20A0D58 VA: 0x20A0D58
	private void DoiTween() { }

	// RVA: 0x20A1504 Offset: 0x20A1504 VA: 0x20A1504
	private static bool IsPathSpecificValue(iTweenMoveTo src) { }

	// RVA: 0x20A15AC Offset: 0x20A15AC VA: 0x20A15AC
	public static bool IsConvertableData(iTweenMoveTo src) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC25538 Offset: 0xC25538 VA: 0xC25538
[TooltipAttribute] // RVA: 0xC25538 Offset: 0xC25538 VA: 0xC25538
public class iTweenMoveUpdateSimple : iTweenFsmActionSimple // TypeDefIndex: 7752
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC57090 Offset: 0xC57090 VA: 0xC57090
	public FsmOwnerDefault gameObject; // 0x68
	[TooltipAttribute] // RVA: 0xC570A0 Offset: 0xC570A0 VA: 0xC570A0
	public FsmGameObject transformPosition; // 0x70
	[TooltipAttribute] // RVA: 0xC570D8 Offset: 0xC570D8 VA: 0xC570D8
	public FsmVector3 vectorPosition; // 0x78
	[TooltipAttribute] // RVA: 0xC57110 Offset: 0xC57110 VA: 0xC57110
	public FsmFloat time; // 0x80
	[TooltipAttribute] // RVA: 0xC57148 Offset: 0xC57148 VA: 0xC57148
	public Space space; // 0x88
	[ActionSection] // RVA: 0xC57180 Offset: 0xC57180 VA: 0xC57180
	[TooltipAttribute] // RVA: 0xC57180 Offset: 0xC57180 VA: 0xC57180
	public FsmBool orientToPath; // 0x90
	private Hashtable hash; // 0x98
	private GameObject go; // 0xA0

	// Methods

	// RVA: 0x20A3638 Offset: 0x20A3638 VA: 0x20A3638
	public void .ctor() { }

	// RVA: 0x20A363C Offset: 0x20A363C VA: 0x20A363C Slot: 28
	public override void Reset() { }

	// RVA: 0x20A3744 Offset: 0x20A3744 VA: 0x20A3744 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x20A3E10 Offset: 0x20A3E10 VA: 0x20A3E10 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x20A4158 Offset: 0x20A4158 VA: 0x20A4158 Slot: 37
	public override void OnExit() { }

	// RVA: 0x20A3DA0 Offset: 0x20A3DA0 VA: 0x20A3DA0
	private void DoiTween() { }

	// RVA: 0x20A415C Offset: 0x20A415C VA: 0x20A415C
	public static bool IsConvertableData(iTweenMoveUpdate src) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC25598 Offset: 0xC25598 VA: 0xC25598
[TooltipAttribute] // RVA: 0xC25598 Offset: 0xC25598 VA: 0xC25598
public class SetRotationYFlip : FsmStateAction // TypeDefIndex: 7753
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC571E0 Offset: 0xC571E0 VA: 0xC571E0
	[TooltipAttribute] // RVA: 0xC571E0 Offset: 0xC571E0 VA: 0xC571E0
	public FsmOwnerDefault gameObject; // 0x50
	public Space space; // 0x58
	[TooltipAttribute] // RVA: 0xC5722C Offset: 0xC5722C VA: 0xC5722C
	public bool everyFrame; // 0x5C
	private bool lateUpdate; // 0x5D

	// Methods

	// RVA: 0x1B92ECC Offset: 0x1B92ECC VA: 0x1B92ECC
	public void .ctor() { }

	// RVA: 0x1B92ED4 Offset: 0x1B92ED4 VA: 0x1B92ED4 Slot: 28
	public override void Reset() { }

	// RVA: 0x1B92EE0 Offset: 0x1B92EE0 VA: 0x1B92EE0 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1B9308C Offset: 0x1B9308C VA: 0x1B9308C Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x1B9309C Offset: 0x1B9309C VA: 0x1B9309C Slot: 36
	public override void OnLateUpdate() { }

	// RVA: 0x1B92F28 Offset: 0x1B92F28 VA: 0x1B92F28
	private void DoSetRotation() { }

	// RVA: 0x1B930E4 Offset: 0x1B930E4 VA: 0x1B930E4
	public static bool IsConvertableData(SetRotation src) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC255E8 Offset: 0xC255E8 VA: 0xC255E8
[TooltipAttribute] // RVA: 0xC255E8 Offset: 0xC255E8 VA: 0xC255E8
public class SetRotationZero : FsmStateAction // TypeDefIndex: 7754
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC57264 Offset: 0xC57264 VA: 0xC57264
	[TooltipAttribute] // RVA: 0xC57264 Offset: 0xC57264 VA: 0xC57264
	public FsmOwnerDefault gameObject; // 0x50
	public Space space; // 0x58
	[TooltipAttribute] // RVA: 0xC572B0 Offset: 0xC572B0 VA: 0xC572B0
	public bool everyFrame; // 0x5C
	private bool lateUpdate; // 0x5D

	// Methods

	// RVA: 0x1B93188 Offset: 0x1B93188 VA: 0x1B93188
	public void .ctor() { }

	// RVA: 0x1B93190 Offset: 0x1B93190 VA: 0x1B93190 Slot: 28
	public override void Reset() { }

	// RVA: 0x1B9319C Offset: 0x1B9319C VA: 0x1B9319C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1B93344 Offset: 0x1B93344 VA: 0x1B93344 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x1B93354 Offset: 0x1B93354 VA: 0x1B93354 Slot: 36
	public override void OnLateUpdate() { }

	// RVA: 0x1B931E4 Offset: 0x1B931E4 VA: 0x1B931E4
	private void DoSetRotation() { }

	// RVA: 0x1B9339C Offset: 0x1B9339C VA: 0x1B9339C
	public static bool IsConvertableData(SetRotation src) { }
}

// Namespace: 
[RequireComponent] // RVA: 0xC25638 Offset: 0xC25638 VA: 0xC25638
public class CondensedScaleLabel : MonoBehaviour // TypeDefIndex: 7755
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC572E8 Offset: 0xC572E8 VA: 0xC572E8
	[DebuggerBrowsableAttribute] // RVA: 0xC572E8 Offset: 0xC572E8 VA: 0xC572E8
	private UILabel <Label>k__BackingField; // 0x18
	private string previousText; // 0x20
	public int maxWidth; // 0x28
	public bool autoUpdate; // 0x2C

	// Properties
	private UILabel Label { get; set; }

	// Methods

	// RVA: 0x1456098 Offset: 0x1456098 VA: 0x1456098
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCACB0 Offset: 0xCCACB0 VA: 0xCCACB0
	// RVA: 0x14560A8 Offset: 0x14560A8 VA: 0x14560A8
	private void set_Label(UILabel value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCACC0 Offset: 0xCCACC0 VA: 0xCCACC0
	// RVA: 0x14560B0 Offset: 0x14560B0 VA: 0x14560B0
	private UILabel get_Label() { }

	// RVA: 0x14560B8 Offset: 0x14560B8 VA: 0x14560B8
	private void Awake() { }

	// RVA: 0x14561FC Offset: 0x14561FC VA: 0x14561FC
	private void Update() { }

	// RVA: 0x145618C Offset: 0x145618C VA: 0x145618C
	public void SetCondensedScale() { }
}

// Namespace: 
public class DigitRollLabel : MonoBehaviour // TypeDefIndex: 7756
{
	// Fields
	public UILabel nowlabel; // 0x18
	public UILabel nextlabel; // 0x20
	private string nexttext; // 0x28

	// Methods

	// RVA: 0x10CFDD8 Offset: 0x10CFDD8 VA: 0x10CFDD8
	public void .ctor() { }

	// RVA: 0x10CFE50 Offset: 0x10CFE50 VA: 0x10CFE50
	public void Awake() { }

	// RVA: 0x10CFE8C Offset: 0x10CFE8C VA: 0x10CFE8C
	public void changeSpeed(int speed) { }

	// RVA: 0x10D0548 Offset: 0x10D0548 VA: 0x10D0548
	public void startChange(string text) { }

	// RVA: 0x10D0818 Offset: 0x10D0818 VA: 0x10D0818
	public void ChangeColor(Color color) { }

	// RVA: 0x10D08E4 Offset: 0x10D08E4 VA: 0x10D08E4
	public void endChange(string text) { }

	// RVA: 0x10D0C00 Offset: 0x10D0C00 VA: 0x10D0C00
	public void changeText(string text) { }
}

// Namespace: 
public class DrumRollLabel : MonoBehaviour // TypeDefIndex: 7757
{
	// Fields
	public UILabel label; // 0x18
	public DigitRollLabel[] diglabel; // 0x20
	public float changetime; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC57324 Offset: 0xC57324 VA: 0xC57324
	[DebuggerBrowsableAttribute] // RVA: 0xC57324 Offset: 0xC57324 VA: 0xC57324
	private DrumRollLabel.CompleteEventHandler callComplete; // 0x30
	private int nowvalue; // 0x38
	private int nextvalue; // 0x3C

	// Methods

	// RVA: 0x10D3DF8 Offset: 0x10D3DF8 VA: 0x10D3DF8
	public void .ctor() { }

	// RVA: 0x10D3E0C Offset: 0x10D3E0C VA: 0x10D3E0C
	private void add_callComplete(DrumRollLabel.CompleteEventHandler value) { }

	// RVA: 0x10D3EF8 Offset: 0x10D3EF8 VA: 0x10D3EF8
	private void remove_callComplete(DrumRollLabel.CompleteEventHandler value) { }

	// RVA: 0x10D3FE4 Offset: 0x10D3FE4 VA: 0x10D3FE4
	public void setParam(int param) { }

	// RVA: 0x10D3FEC Offset: 0x10D3FEC VA: 0x10D3FEC
	public void changeParam(int nextparam, bool isRapid = False, DrumRollLabel.CompleteEventHandler callevent, float delay = 0) { }

	// RVA: 0x10D45BC Offset: 0x10D45BC VA: 0x10D45BC
	public void updateValues(int value) { }

	// RVA: 0x10D4780 Offset: 0x10D4780 VA: 0x10D4780
	public void completeValues() { }

	// RVA: 0x10D4B14 Offset: 0x10D4B14 VA: 0x10D4B14
	public int getCount() { }

	// RVA: 0x10D4B1C Offset: 0x10D4B1C VA: 0x10D4B1C
	public int getFinalCount() { }

	// RVA: 0x10D4B24 Offset: 0x10D4B24 VA: 0x10D4B24
	public void SetLabelColor(Color color) { }

	// RVA: 0x10D4BD4 Offset: 0x10D4BD4 VA: 0x10D4BD4
	public void ChangeParamNonAnimation(int nextParam, bool isAllChange = False) { }
}

// Namespace: 
public sealed class DrumRollLabel.CompleteEventHandler : MulticastDelegate // TypeDefIndex: 7758
{
	// Methods

	// RVA: 0x10D4DB4 Offset: 0x10D4DB4 VA: 0x10D4DB4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10D4914 Offset: 0x10D4914 VA: 0x10D4914 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x10D4DC4 Offset: 0x10D4DC4 VA: 0x10D4DC4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x10D4DF8 Offset: 0x10D4DF8 VA: 0x10D4DF8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2569C Offset: 0xC2569C VA: 0xC2569C
[AddComponentMenu] // RVA: 0xC2569C Offset: 0xC2569C VA: 0xC2569C
[RequireComponent] // RVA: 0xC2569C Offset: 0xC2569C VA: 0xC2569C
public class UICamera : MonoBehaviour // TypeDefIndex: 7759
{
	// Fields
	private int ignoreCount; // 0x18
	private const int ignoreCountMax = 5;
	public static BetterList<UICamera> list; // 0x0
	public static UICamera.GetKeyStateFunc GetKeyDown; // 0x8
	public static UICamera.GetKeyStateFunc GetKeyUp; // 0x10
	public static UICamera.GetKeyStateFunc GetKey; // 0x18
	public static UICamera.GetAxisFunc GetAxis; // 0x20
	public static UICamera.OnScreenResize onScreenResize; // 0x28
	public UICamera.EventType eventType; // 0x1C
	public bool eventsGoToColliders; // 0x20
	public LayerMask eventReceiverMask; // 0x24
	public bool debug; // 0x28
	public bool useMouse; // 0x29
	public bool useTouch; // 0x2A
	public bool allowMultiTouch; // 0x2B
	public bool useKeyboard; // 0x2C
	public bool useController; // 0x2D
	public bool stickyTooltip; // 0x2E
	public float tooltipDelay; // 0x30
	public float mouseDragThreshold; // 0x34
	public float mouseClickThreshold; // 0x38
	public float touchDragThreshold; // 0x3C
	public float touchClickThreshold; // 0x40
	public float rangeDistance; // 0x44
	public string scrollAxisName; // 0x48
	public string verticalAxisName; // 0x50
	public string horizontalAxisName; // 0x58
	public bool commandClick; // 0x60
	public KeyCode submitKey0; // 0x64
	public KeyCode submitKey1; // 0x68
	public KeyCode cancelKey0; // 0x6C
	public KeyCode cancelKey1; // 0x70
	public static UICamera.OnCustomInput onCustomInput; // 0x30
	public static bool showTooltips; // 0x38
	public static Vector2 lastTouchPosition; // 0x3C
	public static Vector3 lastWorldPosition; // 0x44
	public static RaycastHit lastHit; // 0x50
	public static UICamera current; // 0x80
	public static Camera currentCamera; // 0x88
	public static UICamera.ControlScheme currentScheme; // 0x90
	public static int currentTouchID; // 0x94
	public static KeyCode currentKey; // 0x98
	public static UICamera.MouseOrTouch currentTouch; // 0xA0
	public static bool inputHasFocus; // 0xA8
	private static GameObject mGenericHandler; // 0xB0
	public static GameObject fallThrough; // 0xB8
	public static UICamera.VoidDelegate onClick; // 0xC0
	public static UICamera.VoidDelegate onDoubleClick; // 0xC8
	public static UICamera.BoolDelegate onHover; // 0xD0
	public static UICamera.BoolDelegate onPress; // 0xD8
	public static UICamera.BoolDelegate onSelect; // 0xE0
	public static UICamera.FloatDelegate onScroll; // 0xE8
	public static UICamera.VectorDelegate onDrag; // 0xF0
	public static UICamera.VoidDelegate onDragStart; // 0xF8
	public static UICamera.ObjectDelegate onDragOver; // 0x100
	public static UICamera.ObjectDelegate onDragOut; // 0x108
	public static UICamera.VoidDelegate onDragEnd; // 0x110
	public static UICamera.ObjectDelegate onDrop; // 0x118
	public static UICamera.KeyCodeDelegate onKey; // 0x120
	public static UICamera.BoolDelegate onTooltip; // 0x128
	public static UICamera.MoveDelegate onMouseMove; // 0x130
	private static GameObject mCurrentSelection; // 0x138
	private static UICamera.MouseOrTouch[] mMouse; // 0x140
	private static GameObject mHover; // 0x148
	public static UICamera.MouseOrTouch controller; // 0x150
	private static float mNextEvent; // 0x158
	private static Dictionary<int, UICamera.MouseOrTouch> mTouches; // 0x160
	private static int mWidth; // 0x168
	private static int mHeight; // 0x16C
	private GameObject mTooltip; // 0x78
	private Camera mCam; // 0x80
	private float mTooltipTime; // 0x88
	private float mNextRaycast; // 0x8C
	public static bool isDragging; // 0x170
	public static GameObject hoveredObject; // 0x178
	private static UICamera.DepthEntry mHit; // 0x180
	private static BetterList<UICamera.DepthEntry> mHits; // 0x1C8
	private static Plane m2DPlane; // 0x1D0
	private static int mNotifying; // 0x1E0
	private static bool mUsingTouchEvents; // 0x1E4
	public static UICamera.GetTouchCountCallback GetInputTouchCount; // 0x1E8
	public static UICamera.GetTouchCallback GetInputTouch; // 0x1F0
	[CompilerGeneratedAttribute] // RVA: 0xC57360 Offset: 0xC57360 VA: 0xC57360
	private static BetterList.CompareFunc<UICamera.DepthEntry> <>f__am$cache0; // 0x1F8
	[CompilerGeneratedAttribute] // RVA: 0xC57370 Offset: 0xC57370 VA: 0xC57370
	private static BetterList.CompareFunc<UICamera.DepthEntry> <>f__am$cache1; // 0x200
	[CompilerGeneratedAttribute] // RVA: 0xC57380 Offset: 0xC57380 VA: 0xC57380
	private static BetterList.CompareFunc<UICamera> <>f__mg$cache0; // 0x208
	[CompilerGeneratedAttribute] // RVA: 0xC57390 Offset: 0xC57390 VA: 0xC57390
	private static UICamera.GetKeyStateFunc <>f__mg$cache1; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xC573A0 Offset: 0xC573A0 VA: 0xC573A0
	private static UICamera.GetKeyStateFunc <>f__mg$cache2; // 0x218
	[CompilerGeneratedAttribute] // RVA: 0xC573B0 Offset: 0xC573B0 VA: 0xC573B0
	private static UICamera.GetKeyStateFunc <>f__mg$cache3; // 0x220
	[CompilerGeneratedAttribute] // RVA: 0xC573C0 Offset: 0xC573C0 VA: 0xC573C0
	private static UICamera.GetAxisFunc <>f__mg$cache4; // 0x228

	// Properties
	[ObsoleteAttribute] // RVA: 0xCDE980 Offset: 0xCDE980 VA: 0xCDE980
	public bool stickyPress { get; }
	public static Ray currentRay { get; }
	[ObsoleteAttribute] // RVA: 0xCDE9B8 Offset: 0xCDE9B8 VA: 0xCDE9B8
	public static GameObject genericEventHandler { get; set; }
	private bool handlesEvents { get; }
	public Camera cachedCamera { get; }
	public static bool isOverUI { get; }
	public static GameObject selectedObject { get; set; }
	public static int touchCount { get; }
	public static int dragCount { get; }
	public static Camera mainCamera { get; }
	public static UICamera eventHandler { get; }

	// Methods

	// RVA: 0x21398E4 Offset: 0x21398E4 VA: 0x21398E4
	public void .ctor() { }

	// RVA: 0x21399AC Offset: 0x21399AC VA: 0x21399AC
	private bool IsInputIgnore() { }

	// RVA: 0x21399BC Offset: 0x21399BC VA: 0x21399BC
	private void Update() { }

	// RVA: 0x213A1A0 Offset: 0x213A1A0 VA: 0x213A1A0
	private void LateUpdate() { }

	// RVA: 0x213A338 Offset: 0x213A338 VA: 0x213A338
	private void OnApplicationFocus(bool hasFocus) { }

	// RVA: 0x213A344 Offset: 0x213A344 VA: 0x213A344
	public bool get_stickyPress() { }

	// RVA: 0x213A34C Offset: 0x213A34C VA: 0x213A34C
	public static Ray get_currentRay() { }

	// RVA: 0x213A4F4 Offset: 0x213A4F4 VA: 0x213A4F4
	public static GameObject get_genericEventHandler() { }

	// RVA: 0x213A55C Offset: 0x213A55C VA: 0x213A55C
	public static void set_genericEventHandler(GameObject value) { }

	// RVA: 0x213A5C8 Offset: 0x213A5C8 VA: 0x213A5C8
	private bool get_handlesEvents() { }

	// RVA: 0x213A80C Offset: 0x213A80C VA: 0x213A80C
	public Camera get_cachedCamera() { }

	// RVA: 0x213A8A4 Offset: 0x213A8A4 VA: 0x213A8A4
	public static bool get_isOverUI() { }

	// RVA: 0x213619C Offset: 0x213619C VA: 0x213619C
	public static GameObject get_selectedObject() { }

	// RVA: 0x213AAA0 Offset: 0x213AAA0 VA: 0x213AAA0
	public static void set_selectedObject(GameObject value) { }

	// RVA: 0x213B790 Offset: 0x213B790 VA: 0x213B790
	public static bool IsPressed(GameObject go) { }

	// RVA: 0x2137460 Offset: 0x2137460 VA: 0x2137460
	public static int get_touchCount() { }

	// RVA: 0x213BA64 Offset: 0x213BA64 VA: 0x213BA64
	public static int get_dragCount() { }

	// RVA: 0x213BD60 Offset: 0x213BD60 VA: 0x213BD60
	public static Camera get_mainCamera() { }

	// RVA: 0x213A660 Offset: 0x213A660 VA: 0x213A660
	public static UICamera get_eventHandler() { }

	// RVA: 0x213BE1C Offset: 0x213BE1C VA: 0x213BE1C
	private static int CompareFunc(UICamera a, UICamera b) { }

	// RVA: 0x213BF18 Offset: 0x213BF18 VA: 0x213BF18
	private static Rigidbody FindRootRigidbody(Transform trans) { }

	// RVA: 0x213C064 Offset: 0x213C064 VA: 0x213C064
	private static Rigidbody2D FindRootRigidbody2D(Transform trans) { }

	// RVA: 0x213C1B0 Offset: 0x213C1B0 VA: 0x213C1B0
	public static bool Raycast(Vector3 inPos) { }

	// RVA: 0x213DADC Offset: 0x213DADC VA: 0x213DADC
	private static bool IsVisible(Vector3 worldPoint, GameObject go) { }

	// RVA: 0x213D9B8 Offset: 0x213D9B8 VA: 0x213D9B8
	private static bool IsVisible(ref UICamera.DepthEntry de) { }

	// RVA: 0x2136D50 Offset: 0x2136D50 VA: 0x2136D50
	public static bool IsHighlighted(GameObject go) { }

	// RVA: 0x213B604 Offset: 0x213B604 VA: 0x213B604
	public static UICamera FindCameraForLayer(int layer) { }

	// RVA: 0x213DBF8 Offset: 0x213DBF8 VA: 0x213DBF8
	private static int GetDirection(KeyCode up, KeyCode down) { }

	// RVA: 0x213DCDC Offset: 0x213DCDC VA: 0x213DCDC
	private static int GetDirection(KeyCode up0, KeyCode up1, KeyCode down0, KeyCode down1) { }

	// RVA: 0x213DE60 Offset: 0x213DE60 VA: 0x213DE60
	private static int GetDirection(string axis) { }

	// RVA: 0x213B3F0 Offset: 0x213B3F0 VA: 0x213B3F0
	public static void Notify(GameObject go, string funcName, object obj) { }

	// RVA: 0x213DFE4 Offset: 0x213DFE4 VA: 0x213DFE4
	public static UICamera.MouseOrTouch GetMouse(int button) { }

	// RVA: 0x213E084 Offset: 0x213E084 VA: 0x213E084
	public static UICamera.MouseOrTouch GetTouch(int id) { }

	// RVA: 0x213E200 Offset: 0x213E200 VA: 0x213E200
	public static void RemoveTouch(int id) { }

	// RVA: 0x213E28C Offset: 0x213E28C VA: 0x213E28C
	private void Awake() { }

	// RVA: 0x213E61C Offset: 0x213E61C VA: 0x213E61C
	private void OnEnable() { }

	// RVA: 0x213E760 Offset: 0x213E760 VA: 0x213E760
	private void OnDisable() { }

	// RVA: 0x213E7EC Offset: 0x213E7EC VA: 0x213E7EC
	private void Start() { }

	// RVA: 0x2139A54 Offset: 0x2139A54 VA: 0x2139A54
	public void ExecuteUpdate() { }

	// RVA: 0x213A1B4 Offset: 0x213A1B4 VA: 0x213A1B4
	public void ExecuteLateUpdate() { }

	// RVA: 0x213F2E4 Offset: 0x213F2E4 VA: 0x213F2E4
	public void ProcessMouse() { }

	// RVA: 0x213EAB0 Offset: 0x213EAB0 VA: 0x213EAB0
	public void ProcessTouches() { }

	// RVA: 0x21412A0 Offset: 0x21412A0 VA: 0x21412A0
	private void ProcessFakeTouches() { }

	// RVA: 0x214017C Offset: 0x214017C VA: 0x214017C
	public void ProcessOthers() { }

	// RVA: 0x2141848 Offset: 0x2141848 VA: 0x2141848
	private void ProcessPress(bool pressed, float click, float drag) { }

	// RVA: 0x2142870 Offset: 0x2142870 VA: 0x2142870
	private void ProcessRelease(bool isMouse, float drag) { }

	// RVA: 0x21410F8 Offset: 0x21410F8 VA: 0x21410F8
	public void ProcessTouch(bool pressed, bool released) { }

	// RVA: 0x2140FB8 Offset: 0x2140FB8 VA: 0x2140FB8
	public void ShowTooltip(bool val) { }

	// RVA: 0x2143310 Offset: 0x2143310 VA: 0x2143310
	private void OnApplicationPause() { }

	// RVA: 0x2143920 Offset: 0x2143920 VA: 0x2143920
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCACD0 Offset: 0xCCACD0 VA: 0xCCACD0
	// RVA: 0x2143DEC Offset: 0x2143DEC VA: 0x2143DEC
	private static int <Raycast>m__0(UICamera.DepthEntry r1, UICamera.DepthEntry r2) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCACE0 Offset: 0xCCACE0 VA: 0xCCACE0
	// RVA: 0x2143E00 Offset: 0x2143E00 VA: 0x2143E00
	private static int <Raycast>m__1(UICamera.DepthEntry r1, UICamera.DepthEntry r2) { }
}

// Namespace: 
public enum UICamera.ControlScheme // TypeDefIndex: 7760
{
	// Fields
	public int value__; // 0x0
	public const UICamera.ControlScheme Mouse = 0;
	public const UICamera.ControlScheme Touch = 1;
	public const UICamera.ControlScheme Controller = 2;
}

// Namespace: 
public enum UICamera.ClickNotification // TypeDefIndex: 7761
{
	// Fields
	public int value__; // 0x0
	public const UICamera.ClickNotification None = 0;
	public const UICamera.ClickNotification Always = 1;
	public const UICamera.ClickNotification BasedOnDelta = 2;
}

// Namespace: 
public class UICamera.MouseOrTouch // TypeDefIndex: 7762
{
	// Fields
	public Vector2 pos; // 0x10
	public Vector2 lastPos; // 0x18
	public Vector2 delta; // 0x20
	public Vector2 totalDelta; // 0x28
	public Camera pressedCam; // 0x30
	public GameObject last; // 0x38
	public GameObject current; // 0x40
	public GameObject pressed; // 0x48
	public GameObject dragged; // 0x50
	public float pressTime; // 0x58
	public float clickTime; // 0x5C
	public UICamera.ClickNotification clickNotification; // 0x60
	public bool touchBegan; // 0x64
	public bool pressStarted; // 0x65
	public bool dragStarted; // 0x66

	// Properties
	public float deltaTime { get; }
	public bool isOverUI { get; }

	// Methods

	// RVA: 0x1B0355C Offset: 0x1B0355C VA: 0x1B0355C
	public void .ctor() { }

	// RVA: 0x1B03570 Offset: 0x1B03570 VA: 0x1B03570
	public float get_deltaTime() { }

	// RVA: 0x1B035AC Offset: 0x1B035AC VA: 0x1B035AC
	public bool get_isOverUI() { }
}

// Namespace: 
public enum UICamera.EventType // TypeDefIndex: 7763
{
	// Fields
	public int value__; // 0x0
	public const UICamera.EventType World_3D = 0;
	public const UICamera.EventType UI_3D = 1;
	public const UICamera.EventType World_2D = 2;
	public const UICamera.EventType UI_2D = 3;
}

// Namespace: 
public sealed class UICamera.GetKeyStateFunc : MulticastDelegate // TypeDefIndex: 7764
{
	// Methods

	// RVA: 0x1B02880 Offset: 0x1B02880 VA: 0x1B02880
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B02890 Offset: 0x1B02890 VA: 0x1B02890 Slot: 11
	public virtual bool Invoke(KeyCode key) { }

	// RVA: 0x1B02AC0 Offset: 0x1B02AC0 VA: 0x1B02AC0 Slot: 12
	public virtual IAsyncResult BeginInvoke(KeyCode key, AsyncCallback callback, object object) { }

	// RVA: 0x1B02B4C Offset: 0x1B02B4C VA: 0x1B02B4C Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class UICamera.GetAxisFunc : MulticastDelegate // TypeDefIndex: 7765
{
	// Methods

	// RVA: 0x1B0246C Offset: 0x1B0246C VA: 0x1B0246C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B0247C Offset: 0x1B0247C VA: 0x1B0247C Slot: 11
	public virtual float Invoke(string name) { }

	// RVA: 0x1B02820 Offset: 0x1B02820 VA: 0x1B02820 Slot: 12
	public virtual IAsyncResult BeginInvoke(string name, AsyncCallback callback, object object) { }

	// RVA: 0x1B02844 Offset: 0x1B02844 VA: 0x1B02844 Slot: 13
	public virtual float EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class UICamera.OnScreenResize : MulticastDelegate // TypeDefIndex: 7766
{
	// Methods

	// RVA: 0x1B04048 Offset: 0x1B04048 VA: 0x1B04048
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B04058 Offset: 0x1B04058 VA: 0x1B04058 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1B04258 Offset: 0x1B04258 VA: 0x1B04258 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1B0428C Offset: 0x1B0428C VA: 0x1B0428C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class UICamera.OnCustomInput : MulticastDelegate // TypeDefIndex: 7767
{
	// Methods

	// RVA: 0x1B03DF8 Offset: 0x1B03DF8 VA: 0x1B03DF8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B03E08 Offset: 0x1B03E08 VA: 0x1B03E08 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1B04008 Offset: 0x1B04008 VA: 0x1B04008 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1B0403C Offset: 0x1B0403C VA: 0x1B0403C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class UICamera.MoveDelegate : MulticastDelegate // TypeDefIndex: 7768
{
	// Methods

