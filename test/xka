
	// RVA: 0x1E7B540 Offset: 0x1E7B540 VA: 0x1E7B540
	public int get_BufferSize() { }

	// RVA: 0x1E7B56C Offset: 0x1E7B56C VA: 0x1E7B56C
	public void set_BufferSize(int value) { }

	// RVA: 0x1E7B710 Offset: 0x1E7B710 VA: 0x1E7B710 Slot: 31
	public virtual long get_TotalIn() { }

	// RVA: 0x1E7B74C Offset: 0x1E7B74C VA: 0x1E7B74C Slot: 32
	public virtual long get_TotalOut() { }

	// RVA: 0x1E7B788 Offset: 0x1E7B788 VA: 0x1E7B788 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1E7B880 Offset: 0x1E7B880 VA: 0x1E7B880 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1E7B938 Offset: 0x1E7B938 VA: 0x1E7B938 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1E7B940 Offset: 0x1E7B940 VA: 0x1E7B940 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1E7B9F8 Offset: 0x1E7B9F8 VA: 0x1E7B9F8 Slot: 18
	public override void Flush() { }

	// RVA: 0x1E7BAA4 Offset: 0x1E7BAA4 VA: 0x1E7BAA4 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1E7BB0C Offset: 0x1E7BB0C VA: 0x1E7BB0C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1E7BBCC Offset: 0x1E7BBCC VA: 0x1E7BBCC Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1E7BC34 Offset: 0x1E7BC34 VA: 0x1E7BC34 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E7BD5C Offset: 0x1E7BD5C VA: 0x1E7BD5C Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1E7BDC4 Offset: 0x1E7BDC4 VA: 0x1E7BDC4 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1E7BE2C Offset: 0x1E7BE2C VA: 0x1E7BE2C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E7BF70 Offset: 0x1E7BF70 VA: 0x1E7BF70
	private int EmitHeader() { }

	// RVA: 0x1E7C43C Offset: 0x1E7C43C VA: 0x1E7C43C
	public static byte[] CompressString(string s) { }

	// RVA: 0x1E7C5C0 Offset: 0x1E7C5C0 VA: 0x1E7C5C0
	public static byte[] CompressBuffer(byte[] b) { }

	// RVA: 0x1E7C744 Offset: 0x1E7C744 VA: 0x1E7C744
	public static string UncompressString(byte[] compressed) { }

	// RVA: 0x1E7C8A8 Offset: 0x1E7C8A8 VA: 0x1E7C8A8
	public static byte[] UncompressBuffer(byte[] compressed) { }

	// RVA: 0x1E7CA0C Offset: 0x1E7CA0C VA: 0x1E7CA0C
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class InflateBlocks // TypeDefIndex: 4320
{
	// Fields
	private const int MANY = 1440;
	internal static readonly int[] border; // 0x0
	private InflateBlocks.InflateBlockMode mode; // 0x10
	internal int left; // 0x14
	internal int table; // 0x18
	internal int index; // 0x1C
	internal int[] blens; // 0x20
	internal int[] bb; // 0x28
	internal int[] tb; // 0x30
	internal InflateCodes codes; // 0x38
	internal int last; // 0x40
	internal ZlibCodec _codec; // 0x48
	internal int bitk; // 0x50
	internal int bitb; // 0x54
	internal int[] hufts; // 0x58
	internal byte[] window; // 0x60
	internal int end; // 0x68
	internal int readAt; // 0x6C
	internal int writeAt; // 0x70
	internal object checkfn; // 0x78
	internal uint check; // 0x80
	internal InfTree inftree; // 0x88

	// Methods

	// RVA: 0x1E7E1B4 Offset: 0x1E7E1B4 VA: 0x1E7E1B4
	internal void .ctor(ZlibCodec codec, object checkfn, int w) { }

	// RVA: 0x1E7E2C8 Offset: 0x1E7E2C8 VA: 0x1E7E2C8
	internal uint Reset() { }

	// RVA: 0x1E7E38C Offset: 0x1E7E38C VA: 0x1E7E38C
	internal int Process(int r) { }

	// RVA: 0x1E80FB0 Offset: 0x1E80FB0 VA: 0x1E80FB0
	internal void Free() { }

	// RVA: 0x1E80FD4 Offset: 0x1E80FD4 VA: 0x1E80FD4
	internal void SetDictionary(byte[] d, int start, int n) { }

	// RVA: 0x1E81018 Offset: 0x1E81018 VA: 0x1E81018
	internal int SyncPoint() { }

	// RVA: 0x1E7F9D0 Offset: 0x1E7F9D0 VA: 0x1E7F9D0
	internal int Flush(int r) { }

	// RVA: 0x1E81028 Offset: 0x1E81028 VA: 0x1E81028
	private static void .cctor() { }
}

// Namespace: 
private enum InflateBlocks.InflateBlockMode // TypeDefIndex: 4321
{
	// Fields
	public int value__; // 0x0
	public const InflateBlocks.InflateBlockMode TYPE = 0;
	public const InflateBlocks.InflateBlockMode LENS = 1;
	public const InflateBlocks.InflateBlockMode STORED = 2;
	public const InflateBlocks.InflateBlockMode TABLE = 3;
	public const InflateBlocks.InflateBlockMode BTREE = 4;
	public const InflateBlocks.InflateBlockMode DTREE = 5;
	public const InflateBlocks.InflateBlockMode CODES = 6;
	public const InflateBlocks.InflateBlockMode DRY = 7;
	public const InflateBlocks.InflateBlockMode DONE = 8;
	public const InflateBlocks.InflateBlockMode BAD = 9;
}

// Namespace: BestHTTP.Decompression.Zlib
internal static class InternalInflateConstants // TypeDefIndex: 4322
{
	// Fields
	internal static readonly int[] InflateMask; // 0x0

	// Methods

	// RVA: 0x1E83998 Offset: 0x1E83998 VA: 0x1E83998
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class InflateCodes // TypeDefIndex: 4323
{
	// Fields
	private const int START = 0;
	private const int LEN = 1;
	private const int LENEXT = 2;
	private const int DIST = 3;
	private const int DISTEXT = 4;
	private const int COPY = 5;
	private const int LIT = 6;
	private const int WASH = 7;
	private const int END = 8;
	private const int BADCODE = 9;
	internal int mode; // 0x10
	internal int len; // 0x14
	internal int[] tree; // 0x18
	internal int tree_index; // 0x20
	internal int need; // 0x24
	internal int lit; // 0x28
	internal int bitsToGet; // 0x2C
	internal int dist; // 0x30
	internal byte lbits; // 0x34
	internal byte dbits; // 0x35
	internal int[] ltree; // 0x38
	internal int ltree_index; // 0x40
	internal int[] dtree; // 0x48
	internal int dtree_index; // 0x50

	// Methods

	// RVA: 0x1E7E2C0 Offset: 0x1E7E2C0 VA: 0x1E7E2C0
	internal void .ctor() { }

	// RVA: 0x1E7FC54 Offset: 0x1E7FC54 VA: 0x1E7FC54
	internal void Init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index) { }

	// RVA: 0x1E7FC78 Offset: 0x1E7FC78 VA: 0x1E7FC78
	internal int Process(InflateBlocks blocks, int r) { }

	// RVA: 0x1E810A4 Offset: 0x1E810A4 VA: 0x1E810A4
	internal int InflateFast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, InflateBlocks s, ZlibCodec z) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class InflateManager // TypeDefIndex: 4324
{
	// Fields
	private const int PRESET_DICT = 32;
	private const int Z_DEFLATED = 8;
	private InflateManager.InflateManagerMode mode; // 0x10
	internal ZlibCodec _codec; // 0x18
	internal int method; // 0x20
	internal uint computedCheck; // 0x24
	internal uint expectedCheck; // 0x28
	internal int marker; // 0x2C
	private bool _handleRfc1950HeaderBytes; // 0x30
	internal int wbits; // 0x34
	internal InflateBlocks blocks; // 0x38
	private static readonly byte[] mark; // 0x0

	// Properties
	internal bool HandleRfc1950HeaderBytes { get; set; }

	// Methods

	// RVA: 0x1E82234 Offset: 0x1E82234 VA: 0x1E82234
	public void .ctor() { }

	// RVA: 0x1E82244 Offset: 0x1E82244 VA: 0x1E82244
	public void .ctor(bool expectRfc1950HeaderBytes) { }

	// RVA: 0x1E8227C Offset: 0x1E8227C VA: 0x1E8227C
	internal bool get_HandleRfc1950HeaderBytes() { }

	// RVA: 0x1E82284 Offset: 0x1E82284 VA: 0x1E82284
	internal void set_HandleRfc1950HeaderBytes(bool value) { }

	// RVA: 0x1E82290 Offset: 0x1E82290 VA: 0x1E82290
	internal int Reset() { }

	// RVA: 0x1E8231C Offset: 0x1E8231C VA: 0x1E8231C
	internal int End() { }

	// RVA: 0x1E82354 Offset: 0x1E82354 VA: 0x1E82354
	internal int Initialize(ZlibCodec codec, int w) { }

	// RVA: 0x1E82468 Offset: 0x1E82468 VA: 0x1E82468
	internal int Inflate(FlushType flush) { }

	// RVA: 0x1E83334 Offset: 0x1E83334 VA: 0x1E83334
	internal int SetDictionary(byte[] dictionary) { }

	// RVA: 0x1E83508 Offset: 0x1E83508 VA: 0x1E83508
	internal int Sync() { }

	// RVA: 0x1E837E0 Offset: 0x1E837E0 VA: 0x1E837E0
	internal int SyncPoint(ZlibCodec z) { }

	// RVA: 0x1E83814 Offset: 0x1E83814 VA: 0x1E83814
	private static void .cctor() { }
}

// Namespace: 
private enum InflateManager.InflateManagerMode // TypeDefIndex: 4325
{
	// Fields
	public int value__; // 0x0
	public const InflateManager.InflateManagerMode METHOD = 0;
	public const InflateManager.InflateManagerMode FLAG = 1;
	public const InflateManager.InflateManagerMode DICT4 = 2;
	public const InflateManager.InflateManagerMode DICT3 = 3;
	public const InflateManager.InflateManagerMode DICT2 = 4;
	public const InflateManager.InflateManagerMode DICT1 = 5;
	public const InflateManager.InflateManagerMode DICT0 = 6;
	public const InflateManager.InflateManagerMode BLOCKS = 7;
	public const InflateManager.InflateManagerMode CHECK4 = 8;
	public const InflateManager.InflateManagerMode CHECK3 = 9;
	public const InflateManager.InflateManagerMode CHECK2 = 10;
	public const InflateManager.InflateManagerMode CHECK1 = 11;
	public const InflateManager.InflateManagerMode DONE = 12;
	public const InflateManager.InflateManagerMode BAD = 13;
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class InfTree // TypeDefIndex: 4326
{
	// Fields
	private const int MANY = 1440;
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	internal const int fixed_bl = 9;
	internal const int fixed_bd = 5;
	internal static readonly int[] fixed_tl; // 0x0
	internal static readonly int[] fixed_td; // 0x8
	internal static readonly int[] cplens; // 0x10
	internal static readonly int[] cplext; // 0x18
	internal static readonly int[] cpdist; // 0x20
	internal static readonly int[] cpdext; // 0x28
	internal const int BMAX = 15;
	internal int[] hn; // 0x10
	internal int[] v; // 0x18
	internal int[] c; // 0x20
	internal int[] r; // 0x28
	internal int[] u; // 0x30
	internal int[] x; // 0x38

	// Methods

	// RVA: 0x1E7CAD4 Offset: 0x1E7CAD4 VA: 0x1E7CAD4
	public void .ctor() { }

	// RVA: 0x1E7CADC Offset: 0x1E7CADC VA: 0x1E7CADC
	private int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v) { }

	// RVA: 0x1E7D8E0 Offset: 0x1E7D8E0 VA: 0x1E7D8E0
	internal int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, ZlibCodec z) { }

	// RVA: 0x1E7DC14 Offset: 0x1E7DC14 VA: 0x1E7DC14
	internal int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, ZlibCodec z) { }

	// RVA: 0x1E7DEA0 Offset: 0x1E7DEA0 VA: 0x1E7DEA0
	internal static int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, ZlibCodec z) { }

	// RVA: 0x1E7DA38 Offset: 0x1E7DA38 VA: 0x1E7DA38
	private void initWorkArea(int vsize) { }

	// RVA: 0x1E7E040 Offset: 0x1E7E040 VA: 0x1E7E040
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
public enum FlushType // TypeDefIndex: 4327
{
	// Fields
	public int value__; // 0x0
	public const FlushType None = 0;
	public const FlushType Partial = 1;
	public const FlushType Sync = 2;
	public const FlushType Full = 3;
	public const FlushType Finish = 4;
}

// Namespace: BestHTTP.Decompression.Zlib
public enum CompressionLevel // TypeDefIndex: 4328
{
	// Fields
	public int value__; // 0x0
	public const CompressionLevel None = 0;
	public const CompressionLevel Level0 = 0;
	public const CompressionLevel BestSpeed = 1;
	public const CompressionLevel Level1 = 1;
	public const CompressionLevel Level2 = 2;
	public const CompressionLevel Level3 = 3;
	public const CompressionLevel Level4 = 4;
	public const CompressionLevel Level5 = 5;
	public const CompressionLevel Default = 6;
	public const CompressionLevel Level6 = 6;
	public const CompressionLevel Level7 = 7;
	public const CompressionLevel Level8 = 8;
	public const CompressionLevel BestCompression = 9;
	public const CompressionLevel Level9 = 9;
}

// Namespace: BestHTTP.Decompression.Zlib
public enum CompressionStrategy // TypeDefIndex: 4329
{
	// Fields
	public int value__; // 0x0
	public const CompressionStrategy Default = 0;
	public const CompressionStrategy Filtered = 1;
	public const CompressionStrategy HuffmanOnly = 2;
}

// Namespace: BestHTTP.Decompression.Zlib
public enum CompressionMode // TypeDefIndex: 4330
{
	// Fields
	public int value__; // 0x0
	public const CompressionMode Compress = 0;
	public const CompressionMode Decompress = 1;
}

// Namespace: BestHTTP.Decompression.Zlib
[GuidAttribute] // RVA: 0xC24B90 Offset: 0xC24B90 VA: 0xC24B90
internal class ZlibException : Exception // TypeDefIndex: 4331
{
	// Methods

	// RVA: 0x1C9FFD8 Offset: 0x1C9FFD8 VA: 0x1C9FFD8
	public void .ctor() { }

	// RVA: 0x1C9F44C Offset: 0x1C9F44C VA: 0x1C9F44C
	public void .ctor(string s) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal class SharedUtils // TypeDefIndex: 4332
{
	// Methods

	// RVA: 0x1E83A14 Offset: 0x1E83A14 VA: 0x1E83A14
	public void .ctor() { }

	// RVA: 0x1E7D8D4 Offset: 0x1E7D8D4 VA: 0x1E7D8D4
	public static int URShift(int number, int bits) { }

	// RVA: 0x1E83A1C Offset: 0x1E83A1C VA: 0x1E83A1C
	public static int ReadInput(TextReader sourceTextReader, byte[] target, int start, int count) { }

	// RVA: 0x1E83B70 Offset: 0x1E83B70 VA: 0x1E83B70
	internal static byte[] ToByteArray(string sourceString) { }

	// RVA: 0x1E83BF4 Offset: 0x1E83BF4 VA: 0x1E83BF4
	internal static char[] ToCharArray(byte[] byteArray) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal static class InternalConstants // TypeDefIndex: 4333
{
	// Fields
	internal static readonly int MAX_BITS; // 0x0
	internal static readonly int BL_CODES; // 0x4
	internal static readonly int D_CODES; // 0x8
	internal static readonly int LITERALS; // 0xC
	internal static readonly int LENGTH_CODES; // 0x10
	internal static readonly int L_CODES; // 0x14
	internal static readonly int MAX_BL_BITS; // 0x18
	internal static readonly int REP_3_6; // 0x1C
	internal static readonly int REPZ_3_10; // 0x20
	internal static readonly int REPZ_11_138; // 0x24

	// Methods

	// RVA: 0x1E838C8 Offset: 0x1E838C8 VA: 0x1E838C8
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class StaticTree // TypeDefIndex: 4334
{
	// Fields
	internal static readonly short[] lengthAndLiteralsTreeCodes; // 0x0
	internal static readonly short[] distTreeCodes; // 0x8
	internal static readonly StaticTree Literals; // 0x10
	internal static readonly StaticTree Distances; // 0x18
	internal static readonly StaticTree BitLengths; // 0x20
	internal short[] treeCodes; // 0x10
	internal int[] extraBits; // 0x18
	internal int extraBase; // 0x20
	internal int elems; // 0x24
	internal int maxLength; // 0x28

	// Methods

	// RVA: 0x1E83C7C Offset: 0x1E83C7C VA: 0x1E83C7C
	private void .ctor(short[] treeCodes, int[] extraBits, int extraBase, int elems, int maxLength) { }

	// RVA: 0x1E83CD0 Offset: 0x1E83CD0 VA: 0x1E83CD0
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
public sealed class Adler // TypeDefIndex: 4335
{
	// Fields
	private static readonly uint BASE; // 0x0
	private static readonly int NMAX; // 0x4

	// Methods

	// RVA: 0x1E71BE4 Offset: 0x1E71BE4 VA: 0x1E71BE4
	public void .ctor() { }

	// RVA: 0x1E71BEC Offset: 0x1E71BEC VA: 0x1E71BEC
	public static uint Adler32(uint adler, byte[] buf, int index, int len) { }

	// RVA: 0x1E7215C Offset: 0x1E7215C VA: 0x1E7215C
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal enum ZlibStreamFlavor // TypeDefIndex: 4336
{
	// Fields
	public int value__; // 0x0
	public const ZlibStreamFlavor ZLIB = 1950;
	public const ZlibStreamFlavor DEFLATE = 1951;
	public const ZlibStreamFlavor GZIP = 1952;
}

// Namespace: BestHTTP.Decompression.Zlib
internal class ZlibBaseStream : Stream // TypeDefIndex: 4337
{
	// Fields
	protected internal ZlibCodec _z; // 0x10
	protected internal ZlibBaseStream.StreamMode _streamMode; // 0x18
	protected internal FlushType _flushMode; // 0x1C
	protected internal ZlibStreamFlavor _flavor; // 0x20
	protected internal CompressionMode _compressionMode; // 0x24
	protected internal CompressionLevel _level; // 0x28
	protected internal bool _leaveOpen; // 0x2C
	protected internal byte[] _workingBuffer; // 0x30
	protected internal int _bufferSize; // 0x38
	protected internal int windowBitsMax; // 0x3C
	protected internal byte[] _buf1; // 0x40
	protected internal Stream _stream; // 0x48
	protected internal CompressionStrategy Strategy; // 0x50
	private CRC32 crc; // 0x58
	protected internal string _GzipFileName; // 0x60
	protected internal string _GzipComment; // 0x68
	protected internal DateTime _GzipMtime; // 0x70
	protected internal int _gzipHeaderByteCount; // 0x80
	private bool nomoreinput; // 0x84

	// Properties
	internal int Crc32 { get; }
	protected internal bool _wantCompress { get; }
	private ZlibCodec z { get; }
	private byte[] workingBuffer { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1E795D4 Offset: 0x1E795D4 VA: 0x1E795D4
	public void .ctor(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen) { }

	// RVA: 0x1E796B0 Offset: 0x1E796B0 VA: 0x1E796B0
	public void .ctor(Stream stream, CompressionMode compressionMode, CompressionLevel level, ZlibStreamFlavor flavor, bool leaveOpen, int windowBits) { }

	// RVA: 0x1E7B864 Offset: 0x1E7B864 VA: 0x1E7B864
	internal int get_Crc32() { }

	// RVA: 0x1E7BF60 Offset: 0x1E7BF60 VA: 0x1E7BF60
	protected internal bool get__wantCompress() { }

	// RVA: 0x1E84A6C Offset: 0x1E84A6C VA: 0x1E84A6C
	private ZlibCodec get_z() { }

	// RVA: 0x1E84B6C Offset: 0x1E84B6C VA: 0x1E84B6C
	private byte[] get_workingBuffer() { }

	// RVA: 0x1E84BCC Offset: 0x1E84BCC VA: 0x1E84BCC Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E84F18 Offset: 0x1E84F18 VA: 0x1E84F18
	private void finish() { }

	// RVA: 0x1E85724 Offset: 0x1E85724 VA: 0x1E85724
	private void end() { }

	// RVA: 0x1E8578C Offset: 0x1E8578C VA: 0x1E8578C Slot: 13
	public override void Close() { }

	// RVA: 0x1E85840 Offset: 0x1E85840 VA: 0x1E85840 Slot: 18
	public override void Flush() { }

	// RVA: 0x1E85878 Offset: 0x1E85878 VA: 0x1E85878 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1E858E0 Offset: 0x1E858E0 VA: 0x1E858E0 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1E85934 Offset: 0x1E85934 VA: 0x1E85934
	private string ReadZeroTerminatedString() { }

	// RVA: 0x1E85B38 Offset: 0x1E85B38 VA: 0x1E85B38
	private int _ReadAndValidateGzipHeader() { }

	// RVA: 0x1E85F14 Offset: 0x1E85F14 VA: 0x1E85F14 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E864CC Offset: 0x1E864CC VA: 0x1E864CC Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1E86500 Offset: 0x1E86500 VA: 0x1E86500 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1E86534 Offset: 0x1E86534 VA: 0x1E86534 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1E86568 Offset: 0x1E86568 VA: 0x1E86568 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1E8659C Offset: 0x1E8659C VA: 0x1E8659C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1E86604 Offset: 0x1E86604 VA: 0x1E86604 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1E7A3DC Offset: 0x1E7A3DC VA: 0x1E7A3DC
	public static void CompressString(string s, Stream compressor) { }

	// RVA: 0x1E7A6E8 Offset: 0x1E7A6E8 VA: 0x1E7A6E8
	public static void CompressBuffer(byte[] b, Stream compressor) { }

	// RVA: 0x1E7A98C Offset: 0x1E7A98C VA: 0x1E7A98C
	public static string UncompressString(byte[] compressed, Stream decompressor) { }

	// RVA: 0x1E7AE54 Offset: 0x1E7AE54 VA: 0x1E7AE54
	public static byte[] UncompressBuffer(byte[] compressed, Stream decompressor) { }
}

// Namespace: 
internal enum ZlibBaseStream.StreamMode // TypeDefIndex: 4338
{
	// Fields
	public int value__; // 0x0
	public const ZlibBaseStream.StreamMode Writer = 0;
	public const ZlibBaseStream.StreamMode Reader = 1;
	public const ZlibBaseStream.StreamMode Undefined = 2;
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class ZlibCodec // TypeDefIndex: 4339
{
	// Fields
	public byte[] InputBuffer; // 0x10
	public int NextIn; // 0x18
	public int AvailableBytesIn; // 0x1C
	public long TotalBytesIn; // 0x20
	public byte[] OutputBuffer; // 0x28
	public int NextOut; // 0x30
	public int AvailableBytesOut; // 0x34
	public long TotalBytesOut; // 0x38
	public string Message; // 0x40
	internal DeflateManager dstate; // 0x48
	internal InflateManager istate; // 0x50
	internal uint _Adler32; // 0x58
	public CompressionLevel CompressLevel; // 0x5C
	public int WindowBits; // 0x60
	public CompressionStrategy Strategy; // 0x64

	// Properties
	public int Adler32 { get; }

	// Methods

	// RVA: 0x1C9F320 Offset: 0x1C9F320 VA: 0x1C9F320
	public void .ctor() { }

	// RVA: 0x1C9F334 Offset: 0x1C9F334 VA: 0x1C9F334
	public void .ctor(CompressionMode mode) { }

	// RVA: 0x1C9F460 Offset: 0x1C9F460 VA: 0x1C9F460
	public int get_Adler32() { }

	// RVA: 0x1C9F454 Offset: 0x1C9F454 VA: 0x1C9F454
	public int InitializeInflate() { }

	// RVA: 0x1C9F474 Offset: 0x1C9F474 VA: 0x1C9F474
	public int InitializeInflate(bool expectRfc1950Header) { }

	// RVA: 0x1C9F468 Offset: 0x1C9F468 VA: 0x1C9F468
	public int InitializeInflate(int windowBits) { }

	// RVA: 0x1C9F484 Offset: 0x1C9F484 VA: 0x1C9F484
	public int InitializeInflate(int windowBits, bool expectRfc1950Header) { }

	// RVA: 0x1C9F564 Offset: 0x1C9F564 VA: 0x1C9F564
	public int Inflate(FlushType flush) { }

	// RVA: 0x1C9F604 Offset: 0x1C9F604 VA: 0x1C9F604
	public int EndInflate() { }

	// RVA: 0x1C9F69C Offset: 0x1C9F69C VA: 0x1C9F69C
	public int SyncInflate() { }

	// RVA: 0x1C9F444 Offset: 0x1C9F444 VA: 0x1C9F444
	public int InitializeDeflate() { }

	// RVA: 0x1C9F838 Offset: 0x1C9F838 VA: 0x1C9F838
	public int InitializeDeflate(CompressionLevel level) { }

	// RVA: 0x1C9F848 Offset: 0x1C9F848 VA: 0x1C9F848
	public int InitializeDeflate(CompressionLevel level, bool wantRfc1950Header) { }

	// RVA: 0x1C9F858 Offset: 0x1C9F858 VA: 0x1C9F858
	public int InitializeDeflate(CompressionLevel level, int bits) { }

	// RVA: 0x1C9F868 Offset: 0x1C9F868 VA: 0x1C9F868
	public int InitializeDeflate(CompressionLevel level, int bits, bool wantRfc1950Header) { }

	// RVA: 0x1C9F72C Offset: 0x1C9F72C VA: 0x1C9F72C
	private int _InternalInitializeDeflate(bool wantRfc1950Header) { }

	// RVA: 0x1C9F878 Offset: 0x1C9F878 VA: 0x1C9F878
	public int Deflate(FlushType flush) { }

	// RVA: 0x1C9F918 Offset: 0x1C9F918 VA: 0x1C9F918
	public int EndDeflate() { }

	// RVA: 0x1C9F9AC Offset: 0x1C9F9AC VA: 0x1C9F9AC
	public void ResetDeflate() { }

	// RVA: 0x1C9FA3C Offset: 0x1C9FA3C VA: 0x1C9FA3C
	public int SetDeflateParams(CompressionLevel level, CompressionStrategy strategy) { }

	// RVA: 0x1C9FAE4 Offset: 0x1C9FAE4 VA: 0x1C9FAE4
	public int SetDictionary(byte[] dictionary) { }

	// RVA: 0x1C9FBA4 Offset: 0x1C9FBA4 VA: 0x1C9FBA4
	internal void flush_pending() { }

	// RVA: 0x1C9FEBC Offset: 0x1C9FEBC VA: 0x1C9FEBC
	internal int read_buf(byte[] buf, int start, int size) { }
}

// Namespace: BestHTTP.Decompression.Zlib
public static class ZlibConstants // TypeDefIndex: 4340
{
	// Fields
	public const int WindowBitsMax = 15;
	public const int WindowBitsDefault = 15;
	public const int Z_OK = 0;
	public const int Z_STREAM_END = 1;
	public const int Z_NEED_DICT = 2;
	public const int Z_STREAM_ERROR = -2;
	public const int Z_DATA_ERROR = -3;
	public const int Z_BUF_ERROR = -5;
	public const int WorkingBufferSizeDefault = 16384;
	public const int WorkingBufferSizeMin = 1024;
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class ZTree // TypeDefIndex: 4341
{
	// Fields
	private static readonly int HEAP_SIZE; // 0x0
	internal static readonly int[] ExtraLengthBits; // 0x8
	internal static readonly int[] ExtraDistanceBits; // 0x10
	internal static readonly int[] extra_blbits; // 0x18
	internal static readonly sbyte[] bl_order; // 0x20
	internal const int Buf_size = 16;
	private static readonly sbyte[] _dist_code; // 0x28
	internal static readonly sbyte[] LengthCode; // 0x30
	internal static readonly int[] LengthBase; // 0x38
	internal static readonly int[] DistanceBase; // 0x40
	internal short[] dyn_tree; // 0x10
	internal int max_code; // 0x18
	internal StaticTree staticTree; // 0x20

	// Methods

	// RVA: 0x1E72380 Offset: 0x1E72380 VA: 0x1E72380
	public void .ctor() { }

	// RVA: 0x1E74704 Offset: 0x1E74704 VA: 0x1E74704
	internal static int DistanceCode(int dist) { }

	// RVA: 0x1E83EC8 Offset: 0x1E83EC8 VA: 0x1E83EC8
	internal void gen_bitlen(DeflateManager s) { }

	// RVA: 0x1E731E8 Offset: 0x1E731E8 VA: 0x1E731E8
	internal void build_tree(DeflateManager s) { }

	// RVA: 0x1E845B8 Offset: 0x1E845B8 VA: 0x1E845B8
	internal static void gen_codes(short[] tree, int max_code, short[] bl_count) { }

	// RVA: 0x1E84828 Offset: 0x1E84828 VA: 0x1E84828
	internal static int bi_reverse(int code, int len) { }

	// RVA: 0x1E84850 Offset: 0x1E84850 VA: 0x1E84850
	private static void .cctor() { }
}

// Namespace: BestHTTP.Extensions
[ExtensionAttribute] // RVA: 0xC24BC8 Offset: 0xC24BC8 VA: 0xC24BC8
public static class Extensions // TypeDefIndex: 4342
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC485B0 Offset: 0xC485B0 VA: 0xC485B0
	private static Func<char, bool> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC485C0 Offset: 0xC485C0 VA: 0xC485C0
	private static Func<char, bool> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC485D0 Offset: 0xC485D0 VA: 0xC485D0
	private static Func<char, bool> <>f__am$cache2; // 0x10

	// Methods

	[ExtensionAttribute] // RVA: 0xCC6324 Offset: 0xCC6324 VA: 0xCC6324
	// RVA: 0x1CA0048 Offset: 0x1CA0048 VA: 0x1CA0048
	public static string AsciiToString(byte[] bytes) { }

	[ExtensionAttribute] // RVA: 0xCC6334 Offset: 0xCC6334 VA: 0xCC6334
	// RVA: 0x1CA0148 Offset: 0x1CA0148 VA: 0x1CA0148
	public static byte[] GetASCIIBytes(string str) { }

	[ExtensionAttribute] // RVA: 0xCC6344 Offset: 0xCC6344 VA: 0xCC6344
	// RVA: 0x1CA0260 Offset: 0x1CA0260 VA: 0x1CA0260
	public static void SendAsASCII(BinaryWriter stream, string str) { }

	[ExtensionAttribute] // RVA: 0xCC6354 Offset: 0xCC6354 VA: 0xCC6354
	// RVA: 0x1CA0308 Offset: 0x1CA0308 VA: 0x1CA0308
	public static void WriteLine(FileStream fs) { }

	[ExtensionAttribute] // RVA: 0xCC6364 Offset: 0xCC6364 VA: 0xCC6364
	// RVA: 0x1CA039C Offset: 0x1CA039C VA: 0x1CA039C
	public static void WriteLine(FileStream fs, string line) { }

	[ExtensionAttribute] // RVA: 0xCC6374 Offset: 0xCC6374 VA: 0xCC6374
	// RVA: 0x1CA0404 Offset: 0x1CA0404 VA: 0x1CA0404
	public static void WriteLine(FileStream fs, string format, object[] values) { }

	[ExtensionAttribute] // RVA: 0xCC6384 Offset: 0xCC6384 VA: 0xCC6384
	// RVA: 0x1CA04CC Offset: 0x1CA04CC VA: 0x1CA04CC
	public static string[] FindOption(string str, string option) { }

	[ExtensionAttribute] // RVA: 0xCC6394 Offset: 0xCC6394 VA: 0xCC6394
	// RVA: 0x1CA06B4 Offset: 0x1CA06B4 VA: 0x1CA06B4
	public static int ToInt32(string str, int defaultValue = 0) { }

	[ExtensionAttribute] // RVA: 0xCC63A4 Offset: 0xCC63A4 VA: 0xCC63A4
	// RVA: 0x1CA0788 Offset: 0x1CA0788 VA: 0x1CA0788
	public static long ToInt64(string str, long defaultValue = 0) { }

	[ExtensionAttribute] // RVA: 0xCC63B4 Offset: 0xCC63B4 VA: 0xCC63B4
	// RVA: 0x1CA085C Offset: 0x1CA085C VA: 0x1CA085C
	public static DateTime ToDateTime(string str, DateTime defaultValue) { }

	[ExtensionAttribute] // RVA: 0xCC63C4 Offset: 0xCC63C4 VA: 0xCC63C4
	// RVA: 0x1CA097C Offset: 0x1CA097C VA: 0x1CA097C
	public static string ToStrOrEmpty(string str) { }

	[ExtensionAttribute] // RVA: 0xCC63D4 Offset: 0xCC63D4 VA: 0xCC63D4
	// RVA: 0x1CA09F0 Offset: 0x1CA09F0 VA: 0x1CA09F0
	public static string CalculateMD5Hash(string input) { }

	[ExtensionAttribute] // RVA: 0xCC63E4 Offset: 0xCC63E4 VA: 0xCC63E4
	// RVA: 0x1CA0A04 Offset: 0x1CA0A04 VA: 0x1CA0A04
	public static string CalculateMD5Hash(byte[] input) { }

	[ExtensionAttribute] // RVA: 0xCC63F4 Offset: 0xCC63F4 VA: 0xCC63F4
	// RVA: 0x1CA0B40 Offset: 0x1CA0B40 VA: 0x1CA0B40
	internal static string Read(string str, ref int pos, char block, bool needResult = True) { }

	[ExtensionAttribute] // RVA: 0xCC6404 Offset: 0xCC6404 VA: 0xCC6404
	// RVA: 0x1CA0C14 Offset: 0x1CA0C14 VA: 0x1CA0C14
	internal static string Read(string str, ref int pos, Func<char, bool> block, bool needResult = True) { }

	[ExtensionAttribute] // RVA: 0xCC6414 Offset: 0xCC6414 VA: 0xCC6414
	// RVA: 0x1CA0E94 Offset: 0x1CA0E94 VA: 0x1CA0E94
	internal static string ReadPossibleQuotedText(string str, ref int pos) { }

	[ExtensionAttribute] // RVA: 0xCC6424 Offset: 0xCC6424 VA: 0xCC6424
	// RVA: 0x1CA0D98 Offset: 0x1CA0D98 VA: 0x1CA0D98
	internal static void SkipWhiteSpace(string str, ref int pos) { }

	[ExtensionAttribute] // RVA: 0xCC6434 Offset: 0xCC6434 VA: 0xCC6434
	// RVA: 0x1CA0FF8 Offset: 0x1CA0FF8 VA: 0x1CA0FF8
	internal static string TrimAndLower(string str) { }

	[ExtensionAttribute] // RVA: 0xCC6444 Offset: 0xCC6444 VA: 0xCC6444
	// RVA: 0x1CA11BC Offset: 0x1CA11BC VA: 0x1CA11BC
	internal static Nullable<char> Peek(string str, int pos) { }

	[ExtensionAttribute] // RVA: 0xCC6454 Offset: 0xCC6454 VA: 0xCC6454
	// RVA: 0x1CA1274 Offset: 0x1CA1274 VA: 0x1CA1274
	internal static List<HeaderValue> ParseOptionalHeader(string str) { }

	[ExtensionAttribute] // RVA: 0xCC6464 Offset: 0xCC6464 VA: 0xCC6464
	// RVA: 0x1CA1470 Offset: 0x1CA1470 VA: 0x1CA1470
	internal static List<HeaderValue> ParseQualityParams(string str) { }

	[ExtensionAttribute] // RVA: 0xCC6474 Offset: 0xCC6474 VA: 0xCC6474
	// RVA: 0x1CA1654 Offset: 0x1CA1654 VA: 0x1CA1654
	public static void ReadBuffer(Stream stream, byte[] buffer) { }

	[ExtensionAttribute] // RVA: 0xCC6484 Offset: 0xCC6484 VA: 0xCC6484
	// RVA: 0x1CA1720 Offset: 0x1CA1720 VA: 0x1CA1720
	public static void WriteAll(MemoryStream ms, byte[] buffer) { }

	[ExtensionAttribute] // RVA: 0xCC6494 Offset: 0xCC6494 VA: 0xCC6494
	// RVA: 0x1CA177C Offset: 0x1CA177C VA: 0x1CA177C
	public static void WriteString(MemoryStream ms, string str) { }

	[ExtensionAttribute] // RVA: 0xCC64A4 Offset: 0xCC64A4 VA: 0xCC64A4
	// RVA: 0x1CA1818 Offset: 0x1CA1818 VA: 0x1CA1818
	public static void WriteLine(MemoryStream ms) { }

	[ExtensionAttribute] // RVA: 0xCC64B4 Offset: 0xCC64B4 VA: 0xCC64B4
	// RVA: 0x1CA1888 Offset: 0x1CA1888 VA: 0x1CA1888
	public static void WriteLine(MemoryStream ms, string str) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC64C4 Offset: 0xCC64C4 VA: 0xCC64C4
	// RVA: 0x1CA18AC Offset: 0x1CA18AC VA: 0x1CA18AC
	private static bool <ReadPossibleQuotedText>m__0(char ch) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC64D4 Offset: 0xCC64D4 VA: 0xCC64D4
	// RVA: 0x1CA18C8 Offset: 0x1CA18C8 VA: 0x1CA18C8
	private static bool <ParseOptionalHeader>m__1(char ch) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC64E4 Offset: 0xCC64E4 VA: 0xCC64E4
	// RVA: 0x1CA18E4 Offset: 0x1CA18E4 VA: 0x1CA18E4
	private static bool <ParseQualityParams>m__2(char ch) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC41944 Offset: 0xC41944 VA: 0xC41944
private sealed class Extensions.<Read>c__AnonStorey0 // TypeDefIndex: 4343
{
	// Fields
	internal char block; // 0x10

	// Methods

	// RVA: 0x1CA0C0C Offset: 0x1CA0C0C VA: 0x1CA0C0C
	public void .ctor() { }

	// RVA: 0x1CA1900 Offset: 0x1CA1900 VA: 0x1CA1900
	internal bool <>m__0(char ch) { }
}

// Namespace: BestHTTP.Extensions
public static class ExceptionHelper // TypeDefIndex: 4344
{
	// Methods

	// RVA: 0x1C9FFE0 Offset: 0x1C9FFE0 VA: 0x1C9FFE0
	public static Exception ServerClosedTCPStream() { }
}

// Namespace: BestHTTP.Extensions
public sealed class HeaderParser : KeyValuePairList // TypeDefIndex: 4345
{
	// Methods

	// RVA: 0x1CA1910 Offset: 0x1CA1910 VA: 0x1CA1910
	public void .ctor(string headerStr) { }

	// RVA: 0x1CA194C Offset: 0x1CA194C VA: 0x1CA194C
	private List<HeaderValue> Parse(string headerStr) { }
}

// Namespace: BestHTTP.Extensions
public sealed class HeaderValue // TypeDefIndex: 4346
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC485E0 Offset: 0xC485E0 VA: 0xC485E0
	[DebuggerBrowsableAttribute] // RVA: 0xC485E0 Offset: 0xC485E0 VA: 0xC485E0
	private string <Key>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC4861C Offset: 0xC4861C VA: 0xC4861C
	[DebuggerBrowsableAttribute] // RVA: 0xC4861C Offset: 0xC4861C VA: 0xC4861C
	private string <Value>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC48658 Offset: 0xC48658 VA: 0xC48658
	[DebuggerBrowsableAttribute] // RVA: 0xC48658 Offset: 0xC48658 VA: 0xC48658
	private List<HeaderValue> <Options>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC48694 Offset: 0xC48694 VA: 0xC48694
	private static Func<char, bool> <>f__am$cache0; // 0x0

	// Properties
	public string Key { get; set; }
	public string Value { get; set; }
	public List<HeaderValue> Options { get; set; }
	public bool HasValue { get; }

	// Methods

	// RVA: 0x1CA1B94 Offset: 0x1CA1B94 VA: 0x1CA1B94
	public void .ctor() { }

	// RVA: 0x1CA143C Offset: 0x1CA143C VA: 0x1CA143C
	public void .ctor(string key) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC64F4 Offset: 0xCC64F4 VA: 0xCC64F4
	// RVA: 0x1CA1CFC Offset: 0x1CA1CFC VA: 0x1CA1CFC
	public string get_Key() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6504 Offset: 0xCC6504 VA: 0xCC6504
	// RVA: 0x1CA1CF4 Offset: 0x1CA1CF4 VA: 0x1CA1CF4
	public void set_Key(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6514 Offset: 0xCC6514 VA: 0xCC6514
	// RVA: 0x1CA1D04 Offset: 0x1CA1D04 VA: 0x1CA1D04
	public string get_Value() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6524 Offset: 0xCC6524 VA: 0xCC6524
	// RVA: 0x1CA1468 Offset: 0x1CA1468 VA: 0x1CA1468
	public void set_Value(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6534 Offset: 0xCC6534 VA: 0xCC6534
	// RVA: 0x1CA1D0C Offset: 0x1CA1D0C VA: 0x1CA1D0C
	public List<HeaderValue> get_Options() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6544 Offset: 0xCC6544 VA: 0xCC6544
	// RVA: 0x1CA1D14 Offset: 0x1CA1D14 VA: 0x1CA1D14
	public void set_Options(List<HeaderValue> value) { }

	// RVA: 0x1CA1D1C Offset: 0x1CA1D1C VA: 0x1CA1D1C
	public bool get_HasValue() { }

	// RVA: 0x1CA1B9C Offset: 0x1CA1B9C VA: 0x1CA1B9C
	public void Parse(string headerStr, ref int pos) { }

	// RVA: 0x1CA21BC Offset: 0x1CA21BC VA: 0x1CA21BC
	public bool TryGetOption(string key, out HeaderValue option) { }

	// RVA: 0x1CA1D94 Offset: 0x1CA1D94 VA: 0x1CA1D94
