	public const KeyCode RightParen = 41;
	public const KeyCode Asterisk = 42;
	public const KeyCode Plus = 43;
	public const KeyCode Comma = 44;
	public const KeyCode Minus = 45;
	public const KeyCode Period = 46;
	public const KeyCode Slash = 47;
	public const KeyCode Colon = 58;
	public const KeyCode Semicolon = 59;
	public const KeyCode Less = 60;
	public const KeyCode Equals = 61;
	public const KeyCode Greater = 62;
	public const KeyCode Question = 63;
	public const KeyCode At = 64;
	public const KeyCode LeftBracket = 91;
	public const KeyCode Backslash = 92;
	public const KeyCode RightBracket = 93;
	public const KeyCode Caret = 94;
	public const KeyCode Underscore = 95;
	public const KeyCode BackQuote = 96;
	public const KeyCode A = 97;
	public const KeyCode B = 98;
	public const KeyCode C = 99;
	public const KeyCode D = 100;
	public const KeyCode E = 101;
	public const KeyCode F = 102;
	public const KeyCode G = 103;
	public const KeyCode H = 104;
	public const KeyCode I = 105;
	public const KeyCode J = 106;
	public const KeyCode K = 107;
	public const KeyCode L = 108;
	public const KeyCode M = 109;
	public const KeyCode N = 110;
	public const KeyCode O = 111;
	public const KeyCode P = 112;
	public const KeyCode Q = 113;
	public const KeyCode R = 114;
	public const KeyCode S = 115;
	public const KeyCode T = 116;
	public const KeyCode U = 117;
	public const KeyCode V = 118;
	public const KeyCode W = 119;
	public const KeyCode X = 120;
	public const KeyCode Y = 121;
	public const KeyCode Z = 122;
	public const KeyCode LeftCurlyBracket = 123;
	public const KeyCode Pipe = 124;
	public const KeyCode RightCurlyBracket = 125;
	public const KeyCode Tilde = 126;
	public const KeyCode Numlock = 300;
	public const KeyCode CapsLock = 301;
	public const KeyCode ScrollLock = 302;
	public const KeyCode RightShift = 303;
	public const KeyCode LeftShift = 304;
	public const KeyCode RightControl = 305;
	public const KeyCode LeftControl = 306;
	public const KeyCode RightAlt = 307;
	public const KeyCode LeftAlt = 308;
	public const KeyCode LeftCommand = 310;
	public const KeyCode LeftApple = 310;
	public const KeyCode LeftWindows = 311;
	public const KeyCode RightCommand = 309;
	public const KeyCode RightApple = 309;
	public const KeyCode RightWindows = 312;
	public const KeyCode AltGr = 313;
	public const KeyCode Help = 315;
	public const KeyCode Print = 316;
	public const KeyCode SysReq = 317;
	public const KeyCode Break = 318;
	public const KeyCode Menu = 319;
	public const KeyCode Mouse0 = 323;
	public const KeyCode Mouse1 = 324;
	public const KeyCode Mouse2 = 325;
	public const KeyCode Mouse3 = 326;
	public const KeyCode Mouse4 = 327;
	public const KeyCode Mouse5 = 328;
	public const KeyCode Mouse6 = 329;
	public const KeyCode JoystickButton0 = 330;
	public const KeyCode JoystickButton1 = 331;
	public const KeyCode JoystickButton2 = 332;
	public const KeyCode JoystickButton3 = 333;
	public const KeyCode JoystickButton4 = 334;
	public const KeyCode JoystickButton5 = 335;
	public const KeyCode JoystickButton6 = 336;
	public const KeyCode JoystickButton7 = 337;
	public const KeyCode JoystickButton8 = 338;
	public const KeyCode JoystickButton9 = 339;
	public const KeyCode JoystickButton10 = 340;
	public const KeyCode JoystickButton11 = 341;
	public const KeyCode JoystickButton12 = 342;
	public const KeyCode JoystickButton13 = 343;
	public const KeyCode JoystickButton14 = 344;
	public const KeyCode JoystickButton15 = 345;
	public const KeyCode JoystickButton16 = 346;
	public const KeyCode JoystickButton17 = 347;
	public const KeyCode JoystickButton18 = 348;
	public const KeyCode JoystickButton19 = 349;
	public const KeyCode Joystick1Button0 = 350;
	public const KeyCode Joystick1Button1 = 351;
	public const KeyCode Joystick1Button2 = 352;
	public const KeyCode Joystick1Button3 = 353;
	public const KeyCode Joystick1Button4 = 354;
	public const KeyCode Joystick1Button5 = 355;
	public const KeyCode Joystick1Button6 = 356;
	public const KeyCode Joystick1Button7 = 357;
	public const KeyCode Joystick1Button8 = 358;
	public const KeyCode Joystick1Button9 = 359;
	public const KeyCode Joystick1Button10 = 360;
	public const KeyCode Joystick1Button11 = 361;
	public const KeyCode Joystick1Button12 = 362;
	public const KeyCode Joystick1Button13 = 363;
	public const KeyCode Joystick1Button14 = 364;
	public const KeyCode Joystick1Button15 = 365;
	public const KeyCode Joystick1Button16 = 366;
	public const KeyCode Joystick1Button17 = 367;
	public const KeyCode Joystick1Button18 = 368;
	public const KeyCode Joystick1Button19 = 369;
	public const KeyCode Joystick2Button0 = 370;
	public const KeyCode Joystick2Button1 = 371;
	public const KeyCode Joystick2Button2 = 372;
	public const KeyCode Joystick2Button3 = 373;
	public const KeyCode Joystick2Button4 = 374;
	public const KeyCode Joystick2Button5 = 375;
	public const KeyCode Joystick2Button6 = 376;
	public const KeyCode Joystick2Button7 = 377;
	public const KeyCode Joystick2Button8 = 378;
	public const KeyCode Joystick2Button9 = 379;
	public const KeyCode Joystick2Button10 = 380;
	public const KeyCode Joystick2Button11 = 381;
	public const KeyCode Joystick2Button12 = 382;
	public const KeyCode Joystick2Button13 = 383;
	public const KeyCode Joystick2Button14 = 384;
	public const KeyCode Joystick2Button15 = 385;
	public const KeyCode Joystick2Button16 = 386;
	public const KeyCode Joystick2Button17 = 387;
	public const KeyCode Joystick2Button18 = 388;
	public const KeyCode Joystick2Button19 = 389;
	public const KeyCode Joystick3Button0 = 390;
	public const KeyCode Joystick3Button1 = 391;
	public const KeyCode Joystick3Button2 = 392;
	public const KeyCode Joystick3Button3 = 393;
	public const KeyCode Joystick3Button4 = 394;
	public const KeyCode Joystick3Button5 = 395;
	public const KeyCode Joystick3Button6 = 396;
	public const KeyCode Joystick3Button7 = 397;
	public const KeyCode Joystick3Button8 = 398;
	public const KeyCode Joystick3Button9 = 399;
	public const KeyCode Joystick3Button10 = 400;
	public const KeyCode Joystick3Button11 = 401;
	public const KeyCode Joystick3Button12 = 402;
	public const KeyCode Joystick3Button13 = 403;
	public const KeyCode Joystick3Button14 = 404;
	public const KeyCode Joystick3Button15 = 405;
	public const KeyCode Joystick3Button16 = 406;
	public const KeyCode Joystick3Button17 = 407;
	public const KeyCode Joystick3Button18 = 408;
	public const KeyCode Joystick3Button19 = 409;
	public const KeyCode Joystick4Button0 = 410;
	public const KeyCode Joystick4Button1 = 411;
	public const KeyCode Joystick4Button2 = 412;
	public const KeyCode Joystick4Button3 = 413;
	public const KeyCode Joystick4Button4 = 414;
	public const KeyCode Joystick4Button5 = 415;
	public const KeyCode Joystick4Button6 = 416;
	public const KeyCode Joystick4Button7 = 417;
	public const KeyCode Joystick4Button8 = 418;
	public const KeyCode Joystick4Button9 = 419;
	public const KeyCode Joystick4Button10 = 420;
	public const KeyCode Joystick4Button11 = 421;
	public const KeyCode Joystick4Button12 = 422;
	public const KeyCode Joystick4Button13 = 423;
	public const KeyCode Joystick4Button14 = 424;
	public const KeyCode Joystick4Button15 = 425;
	public const KeyCode Joystick4Button16 = 426;
	public const KeyCode Joystick4Button17 = 427;
	public const KeyCode Joystick4Button18 = 428;
	public const KeyCode Joystick4Button19 = 429;
	public const KeyCode Joystick5Button0 = 430;
	public const KeyCode Joystick5Button1 = 431;
	public const KeyCode Joystick5Button2 = 432;
	public const KeyCode Joystick5Button3 = 433;
	public const KeyCode Joystick5Button4 = 434;
	public const KeyCode Joystick5Button5 = 435;
	public const KeyCode Joystick5Button6 = 436;
	public const KeyCode Joystick5Button7 = 437;
	public const KeyCode Joystick5Button8 = 438;
	public const KeyCode Joystick5Button9 = 439;
	public const KeyCode Joystick5Button10 = 440;
	public const KeyCode Joystick5Button11 = 441;
	public const KeyCode Joystick5Button12 = 442;
	public const KeyCode Joystick5Button13 = 443;
	public const KeyCode Joystick5Button14 = 444;
	public const KeyCode Joystick5Button15 = 445;
	public const KeyCode Joystick5Button16 = 446;
	public const KeyCode Joystick5Button17 = 447;
	public const KeyCode Joystick5Button18 = 448;
	public const KeyCode Joystick5Button19 = 449;
	public const KeyCode Joystick6Button0 = 450;
	public const KeyCode Joystick6Button1 = 451;
	public const KeyCode Joystick6Button2 = 452;
	public const KeyCode Joystick6Button3 = 453;
	public const KeyCode Joystick6Button4 = 454;
	public const KeyCode Joystick6Button5 = 455;
	public const KeyCode Joystick6Button6 = 456;
	public const KeyCode Joystick6Button7 = 457;
	public const KeyCode Joystick6Button8 = 458;
	public const KeyCode Joystick6Button9 = 459;
	public const KeyCode Joystick6Button10 = 460;
	public const KeyCode Joystick6Button11 = 461;
	public const KeyCode Joystick6Button12 = 462;
	public const KeyCode Joystick6Button13 = 463;
	public const KeyCode Joystick6Button14 = 464;
	public const KeyCode Joystick6Button15 = 465;
	public const KeyCode Joystick6Button16 = 466;
	public const KeyCode Joystick6Button17 = 467;
	public const KeyCode Joystick6Button18 = 468;
	public const KeyCode Joystick6Button19 = 469;
	public const KeyCode Joystick7Button0 = 470;
	public const KeyCode Joystick7Button1 = 471;
	public const KeyCode Joystick7Button2 = 472;
	public const KeyCode Joystick7Button3 = 473;
	public const KeyCode Joystick7Button4 = 474;
	public const KeyCode Joystick7Button5 = 475;
	public const KeyCode Joystick7Button6 = 476;
	public const KeyCode Joystick7Button7 = 477;
	public const KeyCode Joystick7Button8 = 478;
	public const KeyCode Joystick7Button9 = 479;
	public const KeyCode Joystick7Button10 = 480;
	public const KeyCode Joystick7Button11 = 481;
	public const KeyCode Joystick7Button12 = 482;
	public const KeyCode Joystick7Button13 = 483;
	public const KeyCode Joystick7Button14 = 484;
	public const KeyCode Joystick7Button15 = 485;
	public const KeyCode Joystick7Button16 = 486;
	public const KeyCode Joystick7Button17 = 487;
	public const KeyCode Joystick7Button18 = 488;
	public const KeyCode Joystick7Button19 = 489;
	public const KeyCode Joystick8Button0 = 490;
	public const KeyCode Joystick8Button1 = 491;
	public const KeyCode Joystick8Button2 = 492;
	public const KeyCode Joystick8Button3 = 493;
	public const KeyCode Joystick8Button4 = 494;
	public const KeyCode Joystick8Button5 = 495;
	public const KeyCode Joystick8Button6 = 496;
	public const KeyCode Joystick8Button7 = 497;
	public const KeyCode Joystick8Button8 = 498;
	public const KeyCode Joystick8Button9 = 499;
	public const KeyCode Joystick8Button10 = 500;
	public const KeyCode Joystick8Button11 = 501;
	public const KeyCode Joystick8Button12 = 502;
	public const KeyCode Joystick8Button13 = 503;
	public const KeyCode Joystick8Button14 = 504;
	public const KeyCode Joystick8Button15 = 505;
	public const KeyCode Joystick8Button16 = 506;
	public const KeyCode Joystick8Button17 = 507;
	public const KeyCode Joystick8Button18 = 508;
	public const KeyCode Joystick8Button19 = 509;
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xC452AC Offset: 0xC452AC VA: 0xC452AC
[NativeHeaderAttribute] // RVA: 0xC452AC Offset: 0xC452AC VA: 0xC452AC
[NativeHeaderAttribute] // RVA: 0xC452AC Offset: 0xC452AC VA: 0xC452AC
[RequiredByNativeCodeAttribute] // RVA: 0xC452AC Offset: 0xC452AC VA: 0xC452AC
public struct LayerMask // TypeDefIndex: 2230
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC48CC8 Offset: 0xC48CC8 VA: 0xC48CC8
	private int m_Mask; // 0x0

	// Methods

	// RVA: 0x26AAE40 Offset: 0x26AAE40 VA: 0x26AAE40
	public static int op_Implicit(LayerMask mask) { }

	// RVA: 0x26AAE44 Offset: 0x26AAE44 VA: 0x26AAE44
	public static LayerMask op_Implicit(int intVal) { }

	[NativeMethodAttribute] // RVA: 0xC4E61C Offset: 0xC4E61C VA: 0xC4E61C
	[StaticAccessorAttribute] // RVA: 0xC4E61C Offset: 0xC4E61C VA: 0xC4E61C
	// RVA: 0x26AAE4C Offset: 0x26AAE4C VA: 0x26AAE4C
	public static int NameToLayer(string layerName) { }

	// RVA: 0x26AAEB8 Offset: 0x26AAEB8 VA: 0x26AAEB8
	public static int GetMask(string[] layerNames) { }
}

// Namespace: UnityEngine
internal static class ManagedStreamHelpers // TypeDefIndex: 2231
{
	// Methods

	// RVA: 0x26AC80C Offset: 0x26AC80C VA: 0x26AC80C
	internal static void ValidateLoadFromStream(Stream stream) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC4E680 Offset: 0xC4E680 VA: 0xC4E680
	// RVA: 0x26AC91C Offset: 0x26AC91C VA: 0x26AC91C
	internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC4E690 Offset: 0xC4E690 VA: 0xC4E690
	// RVA: 0x26ACA28 Offset: 0x26ACA28 VA: 0x26ACA28
	internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC4E6A0 Offset: 0xC4E6A0 VA: 0xC4E6A0
	// RVA: 0x26ACB2C Offset: 0x26ACB2C VA: 0x26ACB2C
	internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC45380 Offset: 0xC45380 VA: 0xC45380
[NativeTypeAttribute] // RVA: 0xC45380 Offset: 0xC45380 VA: 0xC45380
[DefaultMemberAttribute] // RVA: 0xC45380 Offset: 0xC45380 VA: 0xC45380
[ThreadAndSerializationSafeAttribute] // RVA: 0xC45380 Offset: 0xC45380 VA: 0xC45380
[RequiredByNativeCodeAttribute] // RVA: 0xC45380 Offset: 0xC45380 VA: 0xC45380
[NativeClassAttribute] // RVA: 0xC45380 Offset: 0xC45380 VA: 0xC45380
public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 2232
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC48D00 Offset: 0xC48D00 VA: 0xC48D00
	public float m00; // 0x0
	[NativeNameAttribute] // RVA: 0xC48D38 Offset: 0xC48D38 VA: 0xC48D38
	public float m10; // 0x4
	[NativeNameAttribute] // RVA: 0xC48D70 Offset: 0xC48D70 VA: 0xC48D70
	public float m20; // 0x8
	[NativeNameAttribute] // RVA: 0xC48DA8 Offset: 0xC48DA8 VA: 0xC48DA8
	public float m30; // 0xC
	[NativeNameAttribute] // RVA: 0xC48DE0 Offset: 0xC48DE0 VA: 0xC48DE0
	public float m01; // 0x10
	[NativeNameAttribute] // RVA: 0xC48E18 Offset: 0xC48E18 VA: 0xC48E18
	public float m11; // 0x14
	[NativeNameAttribute] // RVA: 0xC48E50 Offset: 0xC48E50 VA: 0xC48E50
	public float m21; // 0x18
	[NativeNameAttribute] // RVA: 0xC48E88 Offset: 0xC48E88 VA: 0xC48E88
	public float m31; // 0x1C
	[NativeNameAttribute] // RVA: 0xC48EC0 Offset: 0xC48EC0 VA: 0xC48EC0
	public float m02; // 0x20
	[NativeNameAttribute] // RVA: 0xC48EF8 Offset: 0xC48EF8 VA: 0xC48EF8
	public float m12; // 0x24
	[NativeNameAttribute] // RVA: 0xC48F30 Offset: 0xC48F30 VA: 0xC48F30
	public float m22; // 0x28
	[NativeNameAttribute] // RVA: 0xC48F68 Offset: 0xC48F68 VA: 0xC48F68
	public float m32; // 0x2C
	[NativeNameAttribute] // RVA: 0xC48FA0 Offset: 0xC48FA0 VA: 0xC48FA0
	public float m03; // 0x30
	[NativeNameAttribute] // RVA: 0xC48FD8 Offset: 0xC48FD8 VA: 0xC48FD8
	public float m13; // 0x34
	[NativeNameAttribute] // RVA: 0xC49010 Offset: 0xC49010 VA: 0xC49010
	public float m23; // 0x38
	[NativeNameAttribute] // RVA: 0xC49048 Offset: 0xC49048 VA: 0xC49048
	public float m33; // 0x3C
	private static readonly Matrix4x4 zeroMatrix; // 0x0
	private static readonly Matrix4x4 identityMatrix; // 0x40

	// Properties
	public Quaternion rotation { get; }
	public Matrix4x4 inverse { get; }
	public float Item { get; }
	public float Item { get; set; }
	public static Matrix4x4 identity { get; }

	// Methods

	// RVA: 0xDD2894 Offset: 0xDD2894 VA: 0xDD2894
	public void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3) { }

	[ThreadSafeAttribute] // RVA: 0xC4E6B0 Offset: 0xC4E6B0 VA: 0xC4E6B0
	// RVA: 0xDD28C0 Offset: 0xDD28C0 VA: 0xDD28C0
	private Quaternion GetRotation() { }

	// RVA: 0xDD28C8 Offset: 0xDD28C8 VA: 0xDD28C8
	public Quaternion get_rotation() { }

	[FreeFunctionAttribute] // RVA: 0xC4E6C0 Offset: 0xC4E6C0 VA: 0xC4E6C0
	// RVA: 0x26AF8E0 Offset: 0x26AF8E0 VA: 0x26AF8E0
	public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s) { }

	[FreeFunctionAttribute] // RVA: 0xC4E708 Offset: 0xC4E708 VA: 0xC4E708
	// RVA: 0x26AFA24 Offset: 0x26AFA24 VA: 0x26AFA24
	public static Matrix4x4 Inverse(Matrix4x4 m) { }

	// RVA: 0xDD28D0 Offset: 0xDD28D0 VA: 0xDD28D0
	public Matrix4x4 get_inverse() { }

	[FreeFunctionAttribute] // RVA: 0xC4E750 Offset: 0xC4E750 VA: 0xC4E750
	// RVA: 0x26AFC00 Offset: 0x26AFC00 VA: 0x26AFC00
	public static Matrix4x4 Perspective(float fov, float aspect, float zNear, float zFar) { }

	// RVA: 0xDD28D8 Offset: 0xDD28D8 VA: 0xDD28D8
	public float get_Item(int row, int column) { }

	// RVA: 0xDD28E4 Offset: 0xDD28E4 VA: 0xDD28E4
	public float get_Item(int index) { }

	// RVA: 0xDD28EC Offset: 0xDD28EC VA: 0xDD28EC
	public void set_Item(int index, float value) { }

	// RVA: 0xDD28F4 Offset: 0xDD28F4 VA: 0xDD28F4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDD28FC Offset: 0xDD28FC VA: 0xDD28FC Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xDD2904 Offset: 0xDD2904 VA: 0xDD2904 Slot: 4
	public bool Equals(Matrix4x4 other) { }

	// RVA: 0x26B0328 Offset: 0x26B0328 VA: 0x26B0328
	public static Matrix4x4 op_Multiply(Matrix4x4 lhs, Matrix4x4 rhs) { }

	// RVA: 0x26B0694 Offset: 0x26B0694 VA: 0x26B0694
	public static Vector4 op_Multiply(Matrix4x4 lhs, Vector4 vector) { }

	// RVA: 0xDD294C Offset: 0xDD294C VA: 0xDD294C
	public Vector4 GetColumn(int index) { }

	// RVA: 0xDD2954 Offset: 0xDD2954 VA: 0xDD2954
	public Vector3 MultiplyPoint(Vector3 point) { }

	// RVA: 0xDD295C Offset: 0xDD295C VA: 0xDD295C
	public Vector3 MultiplyPoint3x4(Vector3 point) { }

	// RVA: 0xDD2964 Offset: 0xDD2964 VA: 0xDD2964
	public Vector3 MultiplyVector(Vector3 vector) { }

	// RVA: 0x26B0884 Offset: 0x26B0884 VA: 0x26B0884
	public static Matrix4x4 Scale(Vector3 vector) { }

	// RVA: 0x26B08B0 Offset: 0x26B08B0 VA: 0x26B08B0
	public static Matrix4x4 Translate(Vector3 vector) { }

	// RVA: 0x26B08DC Offset: 0x26B08DC VA: 0x26B08DC
	public static Matrix4x4 get_identity() { }

	// RVA: 0xDD296C Offset: 0xDD296C VA: 0xDD296C Slot: 3
	public override string ToString() { }

	// RVA: 0x26B0FFC Offset: 0x26B0FFC VA: 0x26B0FFC
	private static void .cctor() { }

	// RVA: 0x26AF868 Offset: 0x26AF868 VA: 0x26AF868
	private static void GetRotation_Injected(ref Matrix4x4 _unity_self, out Quaternion ret) { }

	// RVA: 0x26AF998 Offset: 0x26AF998 VA: 0x26AF998
	private static void TRS_Injected(ref Vector3 pos, ref Quaternion q, ref Vector3 s, out Matrix4x4 ret) { }

	// RVA: 0x26AFAC0 Offset: 0x26AFAC0 VA: 0x26AFAC0
	private static void Inverse_Injected(ref Matrix4x4 m, out Matrix4x4 ret) { }

	// RVA: 0x26AFCBC Offset: 0x26AFCBC VA: 0x26AFCBC
	private static void Perspective_Injected(float fov, float aspect, float zNear, float zFar, out Matrix4x4 ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
[NativeTypeAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
[NativeClassAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
[ThreadAndSerializationSafeAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
[NativeHeaderAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
[DefaultMemberAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
[NativeHeaderAttribute] // RVA: 0xC45478 Offset: 0xC45478 VA: 0xC45478
public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 2233
{
	// Fields
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	private static readonly Vector3 zeroVector; // 0x0
	private static readonly Vector3 oneVector; // 0xC
	private static readonly Vector3 upVector; // 0x18
	private static readonly Vector3 downVector; // 0x24
	private static readonly Vector3 leftVector; // 0x30
	private static readonly Vector3 rightVector; // 0x3C
	private static readonly Vector3 forwardVector; // 0x48
	private static readonly Vector3 backVector; // 0x54
	private static readonly Vector3 positiveInfinityVector; // 0x60
	private static readonly Vector3 negativeInfinityVector; // 0x6C

	// Properties
	public float Item { get; set; }
	public Vector3 normalized { get; }
	public float magnitude { get; }
	public float sqrMagnitude { get; }
	public static Vector3 zero { get; }
	public static Vector3 one { get; }
	public static Vector3 forward { get; }
	public static Vector3 back { get; }
	public static Vector3 up { get; }
	public static Vector3 down { get; }
	public static Vector3 left { get; }
	public static Vector3 right { get; }

	// Methods

	// RVA: 0xBBA4E8 Offset: 0xBBA4E8 VA: 0xBBA4E8
	public void .ctor(float x, float y, float z) { }

	// RVA: 0xBBA4F4 Offset: 0xBBA4F4 VA: 0xBBA4F4
	public void .ctor(float x, float y) { }

	[FreeFunctionAttribute] // RVA: 0xC4E798 Offset: 0xC4E798 VA: 0xC4E798
	// RVA: 0x1043584 Offset: 0x1043584 VA: 0x1043584
	public static Vector3 Slerp(Vector3 a, Vector3 b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xC4E7E0 Offset: 0xC4E7E0 VA: 0xC4E7E0
	// RVA: 0x10436B4 Offset: 0x10436B4 VA: 0x10436B4
	public static Vector3 RotateTowards(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta) { }

	// RVA: 0x10437FC Offset: 0x10437FC VA: 0x10437FC
	public static Vector3 Lerp(Vector3 a, Vector3 b, float t) { }

	// RVA: 0x10438C4 Offset: 0x10438C4 VA: 0x10438C4
	public static Vector3 MoveTowards(Vector3 current, Vector3 target, float maxDistanceDelta) { }

	// RVA: 0xBBA500 Offset: 0xBBA500 VA: 0xBBA500
	public float get_Item(int index) { }

	// RVA: 0xBBA508 Offset: 0xBBA508 VA: 0xBBA508
	public void set_Item(int index, float value) { }

	// RVA: 0xBBA510 Offset: 0xBBA510 VA: 0xBBA510
	public void Set(float newX, float newY, float newZ) { }

	// RVA: 0x1043C60 Offset: 0x1043C60 VA: 0x1043C60
	public static Vector3 Scale(Vector3 a, Vector3 b) { }

	// RVA: 0xBBA51C Offset: 0xBBA51C VA: 0xBBA51C
	public void Scale(Vector3 scale) { }

	// RVA: 0x1043C90 Offset: 0x1043C90 VA: 0x1043C90
	public static Vector3 Cross(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0xBBA53C Offset: 0xBBA53C VA: 0xBBA53C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBBA544 Offset: 0xBBA544 VA: 0xBBA544 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xBBA54C Offset: 0xBBA54C VA: 0xBBA54C Slot: 4
	public bool Equals(Vector3 other) { }

	// RVA: 0x1043E08 Offset: 0x1043E08 VA: 0x1043E08
	public static Vector3 Reflect(Vector3 inDirection, Vector3 inNormal) { }

	// RVA: 0x1043EF4 Offset: 0x1043EF4 VA: 0x1043EF4
	public static Vector3 Normalize(Vector3 value) { }

	// RVA: 0xBBA554 Offset: 0xBBA554 VA: 0xBBA554
	public void Normalize() { }

	// RVA: 0xBBA55C Offset: 0xBBA55C VA: 0xBBA55C
	public Vector3 get_normalized() { }

	// RVA: 0x1043EC8 Offset: 0x1043EC8 VA: 0x1043EC8
	public static float Dot(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x10441FC Offset: 0x10441FC VA: 0x10441FC
	public static Vector3 Project(Vector3 vector, Vector3 onNormal) { }

	// RVA: 0x1044348 Offset: 0x1044348 VA: 0x1044348
	public static float Angle(Vector3 from, Vector3 to) { }

	// RVA: 0x10444C0 Offset: 0x10444C0 VA: 0x10444C0
	public static float Distance(Vector3 a, Vector3 b) { }

	// RVA: 0x1044594 Offset: 0x1044594 VA: 0x1044594
	public static Vector3 ClampMagnitude(Vector3 vector, float maxLength) { }

	// RVA: 0x1043FD8 Offset: 0x1043FD8 VA: 0x1043FD8
	public static float Magnitude(Vector3 vector) { }

	// RVA: 0xBBA564 Offset: 0xBBA564 VA: 0xBBA564
	public float get_magnitude() { }

	// RVA: 0x1044674 Offset: 0x1044674 VA: 0x1044674
	public static float SqrMagnitude(Vector3 vector) { }

	// RVA: 0xBBA56C Offset: 0xBBA56C VA: 0xBBA56C
	public float get_sqrMagnitude() { }

	// RVA: 0x104468C Offset: 0x104468C VA: 0x104468C
	public static Vector3 Min(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x104475C Offset: 0x104475C VA: 0x104475C
	public static Vector3 Max(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x103576C Offset: 0x103576C VA: 0x103576C
	public static Vector3 get_zero() { }

	// RVA: 0x104482C Offset: 0x104482C VA: 0x104482C
	public static Vector3 get_one() { }

	// RVA: 0x103F5F4 Offset: 0x103F5F4 VA: 0x103F5F4
	public static Vector3 get_forward() { }

	// RVA: 0x1044898 Offset: 0x1044898 VA: 0x1044898
	public static Vector3 get_back() { }

	// RVA: 0x103F494 Offset: 0x103F494 VA: 0x103F494
	public static Vector3 get_up() { }

	// RVA: 0x1044904 Offset: 0x1044904 VA: 0x1044904
	public static Vector3 get_down() { }

	// RVA: 0x1044970 Offset: 0x1044970 VA: 0x1044970
	public static Vector3 get_left() { }

	// RVA: 0x103F334 Offset: 0x103F334 VA: 0x103F334
	public static Vector3 get_right() { }

	// RVA: 0x103FE7C Offset: 0x103FE7C VA: 0x103FE7C
	public static Vector3 op_Addition(Vector3 a, Vector3 b) { }

	// RVA: 0x1043A00 Offset: 0x1043A00 VA: 0x1043A00
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b) { }

	// RVA: 0x10449DC Offset: 0x10449DC VA: 0x10449DC
	public static Vector3 op_UnaryNegation(Vector3 a) { }

	// RVA: 0x1043AD0 Offset: 0x1043AD0 VA: 0x1043AD0
	public static Vector3 op_Multiply(Vector3 a, float d) { }

	// RVA: 0x1043EE0 Offset: 0x1043EE0 VA: 0x1043EE0
	public static Vector3 op_Multiply(float d, Vector3 a) { }

	// RVA: 0x1043AC0 Offset: 0x1043AC0 VA: 0x1043AC0
	public static Vector3 op_Division(Vector3 a, float d) { }

	// RVA: 0x10449EC Offset: 0x10449EC VA: 0x10449EC
	public static bool op_Equality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x10357D8 Offset: 0x10357D8 VA: 0x10357D8
	public static bool op_Inequality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0xBBA58C Offset: 0xBBA58C VA: 0xBBA58C Slot: 3
	public override string ToString() { }

	// RVA: 0xBBA594 Offset: 0xBBA594 VA: 0xBBA594
	public string ToString(string format) { }

	// RVA: 0x1044DFC Offset: 0x1044DFC VA: 0x1044DFC
	private static void .cctor() { }

	// RVA: 0x1043628 Offset: 0x1043628 VA: 0x1043628
	private static void Slerp_Injected(ref Vector3 a, ref Vector3 b, float t, out Vector3 ret) { }

	// RVA: 0x1043760 Offset: 0x1043760 VA: 0x1043760
	private static void RotateTowards_Injected(ref Vector3 current, ref Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta, out Vector3 ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC4559C Offset: 0xC4559C VA: 0xC4559C
[ThreadAndSerializationSafeAttribute] // RVA: 0xC4559C Offset: 0xC4559C VA: 0xC4559C
[UsedByNativeCodeAttribute] // RVA: 0xC4559C Offset: 0xC4559C VA: 0xC4559C
[NativeTypeAttribute] // RVA: 0xC4559C Offset: 0xC4559C VA: 0xC4559C
[DefaultMemberAttribute] // RVA: 0xC4559C Offset: 0xC4559C VA: 0xC4559C
public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 2234
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Quaternion identityQuaternion; // 0x0
	public const float kEpsilon = 1E-06;

	// Properties
	public float Item { get; }
	public static Quaternion identity { get; }
	public Vector3 eulerAngles { get; }

	// Methods

	// RVA: 0xDD2E74 Offset: 0xDD2E74 VA: 0xDD2E74
	public void .ctor(float x, float y, float z, float w) { }

	[FreeFunctionAttribute] // RVA: 0xC4E818 Offset: 0xC4E818 VA: 0xC4E818
	// RVA: 0x26BB638 Offset: 0x26BB638 VA: 0x26BB638
	public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection) { }

	[FreeFunctionAttribute] // RVA: 0xC4E860 Offset: 0xC4E860 VA: 0xC4E860
	// RVA: 0x26BB74C Offset: 0x26BB74C VA: 0x26BB74C
	public static Quaternion Inverse(Quaternion rotation) { }

	[FreeFunctionAttribute] // RVA: 0xC4E898 Offset: 0xC4E898 VA: 0xC4E898
	// RVA: 0x26BB844 Offset: 0x26BB844 VA: 0x26BB844
	public static Quaternion Slerp(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xC4E8E0 Offset: 0xC4E8E0 VA: 0xC4E8E0
	// RVA: 0x26BB970 Offset: 0x26BB970 VA: 0x26BB970
	public static Quaternion SlerpUnclamped(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xC4E928 Offset: 0xC4E928 VA: 0xC4E928
	// RVA: 0x26BBA9C Offset: 0x26BBA9C VA: 0x26BBA9C
	public static Quaternion Lerp(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xC4E970 Offset: 0xC4E970 VA: 0xC4E970
	// RVA: 0x26BBBC8 Offset: 0x26BBBC8 VA: 0x26BBBC8
	private static Quaternion Internal_FromEulerRad(Vector3 euler) { }

	[FreeFunctionAttribute] // RVA: 0xC4E9B8 Offset: 0xC4E9B8 VA: 0xC4E9B8
	// RVA: 0x26BBCC0 Offset: 0x26BBCC0 VA: 0x26BBCC0
	private static Vector3 Internal_ToEulerRad(Quaternion rotation) { }

	[FreeFunctionAttribute] // RVA: 0xC4EA00 Offset: 0xC4EA00 VA: 0xC4EA00
	// RVA: 0x26BBDBC Offset: 0x26BBDBC VA: 0x26BBDBC
	public static Quaternion AngleAxis(float angle, Vector3 axis) { }

	[FreeFunctionAttribute] // RVA: 0xC4EA48 Offset: 0xC4EA48 VA: 0xC4EA48
	// RVA: 0x26BBEDC Offset: 0x26BBEDC VA: 0x26BBEDC
	public static Quaternion LookRotation(Vector3 forward, Vector3 upwards) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC4EA90 Offset: 0xC4EA90 VA: 0xC4EA90
	// RVA: 0x26BBFF0 Offset: 0x26BBFF0 VA: 0x26BBFF0
	public static Quaternion LookRotation(Vector3 forward) { }

	// RVA: 0xDD2E80 Offset: 0xDD2E80 VA: 0xDD2E80
	public float get_Item(int index) { }

	// RVA: 0x26BC184 Offset: 0x26BC184 VA: 0x26BC184
	public static Quaternion get_identity() { }

	// RVA: 0x26BC1F0 Offset: 0x26BC1F0 VA: 0x26BC1F0
	public static Quaternion op_Multiply(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x26BC264 Offset: 0x26BC264 VA: 0x26BC264
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point) { }

	// RVA: 0x26BC308 Offset: 0x26BC308 VA: 0x26BC308
	private static bool IsEqualUsingDot(float dot) { }

	// RVA: 0x26BC31C Offset: 0x26BC31C VA: 0x26BC31C
	public static bool op_Equality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x26BC404 Offset: 0x26BC404 VA: 0x26BC404
	public static bool op_Inequality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x26BC3E4 Offset: 0x26BC3E4 VA: 0x26BC3E4
	public static float Dot(Quaternion a, Quaternion b) { }

	// RVA: 0x26BC4CC Offset: 0x26BC4CC VA: 0x26BC4CC
	public static float Angle(Quaternion a, Quaternion b) { }

	// RVA: 0x26BC5D8 Offset: 0x26BC5D8 VA: 0x26BC5D8
	private static Vector3 Internal_MakePositive(Vector3 euler) { }

	// RVA: 0xDD2E88 Offset: 0xDD2E88 VA: 0xDD2E88
	public Vector3 get_eulerAngles() { }

	// RVA: 0x26BC748 Offset: 0x26BC748 VA: 0x26BC748
	public static Quaternion Euler(float x, float y, float z) { }

	// RVA: 0x26BC83C Offset: 0x26BC83C VA: 0x26BC83C
	public static Quaternion Euler(Vector3 euler) { }

	// RVA: 0x26BC908 Offset: 0x26BC908 VA: 0x26BC908
	public static Quaternion RotateTowards(Quaternion from, Quaternion to, float maxDegreesDelta) { }

	// RVA: 0xDD2E90 Offset: 0xDD2E90 VA: 0xDD2E90 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xDD2E98 Offset: 0xDD2E98 VA: 0xDD2E98 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xDD2EA0 Offset: 0xDD2EA0 VA: 0xDD2EA0 Slot: 4
	public bool Equals(Quaternion other) { }

	// RVA: 0xDD2EA8 Offset: 0xDD2EA8 VA: 0xDD2EA8 Slot: 3
	public override string ToString() { }

	// RVA: 0xDD2EB0 Offset: 0xDD2EB0 VA: 0xDD2EB0
	public string ToString(string format) { }

	// RVA: 0x26BD008 Offset: 0x26BD008 VA: 0x26BD008
	private static void .cctor() { }

	// RVA: 0x26BB6C8 Offset: 0x26BB6C8 VA: 0x26BB6C8
	private static void FromToRotation_Injected(ref Vector3 fromDirection, ref Vector3 toDirection, out Quaternion ret) { }

	// RVA: 0x26BB7D0 Offset: 0x26BB7D0 VA: 0x26BB7D0
	private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret) { }

	// RVA: 0x26BB8E4 Offset: 0x26BB8E4 VA: 0x26BB8E4
	private static void Slerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x26BBA10 Offset: 0x26BBA10 VA: 0x26BBA10
	private static void SlerpUnclamped_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x26BBB3C Offset: 0x26BBB3C VA: 0x26BBB3C
	private static void Lerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x26BBC4C Offset: 0x26BBC4C VA: 0x26BBC4C
	private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret) { }

	// RVA: 0x26BBD48 Offset: 0x26BBD48 VA: 0x26BBD48
	private static void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret) { }

	// RVA: 0x26BBE50 Offset: 0x26BBE50 VA: 0x26BBE50
	private static void AngleAxis_Injected(float angle, ref Vector3 axis, out Quaternion ret) { }

	// RVA: 0x26BBF6C Offset: 0x26BBF6C VA: 0x26BBF6C
	private static void LookRotation_Injected(ref Vector3 forward, ref Vector3 upwards, out Quaternion ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC4564C Offset: 0xC4564C VA: 0xC4564C
[NativeHeaderAttribute] // RVA: 0xC4564C Offset: 0xC4564C VA: 0xC4564C
[ThreadAndSerializationSafeAttribute] // RVA: 0xC4564C Offset: 0xC4564C VA: 0xC4564C
[NativeHeaderAttribute] // RVA: 0xC4564C Offset: 0xC4564C VA: 0xC4564C
[NativeHeaderAttribute] // RVA: 0xC4564C Offset: 0xC4564C VA: 0xC4564C
public struct Mathf // TypeDefIndex: 2235
{
	// Fields
	public static readonly float Epsilon; // 0x0

	// Methods

	// RVA: 0x26AE85C Offset: 0x26AE85C VA: 0x26AE85C
	public static float Sin(float f) { }

	// RVA: 0x26AE878 Offset: 0x26AE878 VA: 0x26AE878
	public static float Cos(float f) { }

	// RVA: 0x26AE894 Offset: 0x26AE894 VA: 0x26AE894
	public static float Tan(float f) { }

	// RVA: 0x26AE8B0 Offset: 0x26AE8B0 VA: 0x26AE8B0
	public static float Asin(float f) { }

	// RVA: 0x26AE8CC Offset: 0x26AE8CC VA: 0x26AE8CC
	public static float Acos(float f) { }

	// RVA: 0x26AE8E8 Offset: 0x26AE8E8 VA: 0x26AE8E8
	public static float Atan(float f) { }

	// RVA: 0x26AE904 Offset: 0x26AE904 VA: 0x26AE904
	public static float Atan2(float y, float x) { }

	// RVA: 0x26AE924 Offset: 0x26AE924 VA: 0x26AE924
	public static float Sqrt(float f) { }

	// RVA: 0x26AE93C Offset: 0x26AE93C VA: 0x26AE93C
	public static float Abs(float f) { }

	// RVA: 0x26AE944 Offset: 0x26AE944 VA: 0x26AE944
	public static int Abs(int value) { }

	// RVA: 0x26AE950 Offset: 0x26AE950 VA: 0x26AE950
	public static float Min(float a, float b) { }

	// RVA: 0x26AE95C Offset: 0x26AE95C VA: 0x26AE95C
	public static float Min(float[] values) { }

	// RVA: 0x26AEA28 Offset: 0x26AEA28 VA: 0x26AEA28
	public static int Min(int a, int b) { }

	// RVA: 0x26AEA34 Offset: 0x26AEA34 VA: 0x26AEA34
	public static float Max(float a, float b) { }

	// RVA: 0x26AEA40 Offset: 0x26AEA40 VA: 0x26AEA40
	public static float Max(float[] values) { }

	// RVA: 0x26AEB0C Offset: 0x26AEB0C VA: 0x26AEB0C
	public static int Max(int a, int b) { }

	// RVA: 0x26AEB18 Offset: 0x26AEB18 VA: 0x26AEB18
	public static int Max(int[] values) { }

	// RVA: 0x26AEBDC Offset: 0x26AEBDC VA: 0x26AEBDC
	public static float Pow(float f, float p) { }

	// RVA: 0x26AEBFC Offset: 0x26AEBFC VA: 0x26AEBFC
	public static float Exp(float power) { }

	// RVA: 0x26AEC18 Offset: 0x26AEC18 VA: 0x26AEC18
	public static float Log(float f, float p) { }

	// RVA: 0x26AEC3C Offset: 0x26AEC3C VA: 0x26AEC3C
	public static float Log(float f) { }

	// RVA: 0x26AEC58 Offset: 0x26AEC58 VA: 0x26AEC58
	public static float Log10(float f) { }

	// RVA: 0x26AEC74 Offset: 0x26AEC74 VA: 0x26AEC74
	public static float Ceil(float f) { }

	// RVA: 0x26AEC7C Offset: 0x26AEC7C VA: 0x26AEC7C
	public static float Floor(float f) { }

	// RVA: 0x26AEC84 Offset: 0x26AEC84 VA: 0x26AEC84
	public static float Round(float f) { }

	// RVA: 0x26AED18 Offset: 0x26AED18 VA: 0x26AED18
	public static int CeilToInt(float f) { }

	// RVA: 0x26AED20 Offset: 0x26AED20 VA: 0x26AED20
	public static int FloorToInt(float f) { }

	// RVA: 0x26AED28 Offset: 0x26AED28 VA: 0x26AED28
	public static int RoundToInt(float f) { }

	// RVA: 0x26AEDBC Offset: 0x26AEDBC VA: 0x26AEDBC
	public static float Sign(float f) { }

	// RVA: 0x26AEDD0 Offset: 0x26AEDD0 VA: 0x26AEDD0
	public static float Clamp(float value, float min, float max) { }

	// RVA: 0x26AEDEC Offset: 0x26AEDEC VA: 0x26AEDEC
	public static int Clamp(int value, int min, int max) { }

	// RVA: 0x26AEE08 Offset: 0x26AEE08 VA: 0x26AEE08
	public static float Clamp01(float value) { }

	// RVA: 0x26AEE24 Offset: 0x26AEE24 VA: 0x26AEE24
	public static float Lerp(float a, float b, float t) { }

	// RVA: 0x26AEEBC Offset: 0x26AEEBC VA: 0x26AEEBC
	public static float LerpUnclamped(float a, float b, float t) { }

	// RVA: 0x26AEECC Offset: 0x26AEECC VA: 0x26AEECC
	public static float LerpAngle(float a, float b, float t) { }

	// RVA: 0x26AF034 Offset: 0x26AF034 VA: 0x26AF034
	public static float MoveTowards(float current, float target, float maxDelta) { }

	// RVA: 0x26AF0F0 Offset: 0x26AF0F0 VA: 0x26AF0F0
	public static float SmoothStep(float from, float to, float t) { }

	// RVA: 0x26AF1AC Offset: 0x26AF1AC VA: 0x26AF1AC
	public static bool Approximately(float a, float b) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC4EAA0 Offset: 0xC4EAA0 VA: 0xC4EAA0
	// RVA: 0x26AF260 Offset: 0x26AF260 VA: 0x26AF260
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime) { }

	// RVA: 0x26AF304 Offset: 0x26AF304 VA: 0x26AF304
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC4EAB0 Offset: 0xC4EAB0 VA: 0xC4EAB0
	// RVA: 0x26AF458 Offset: 0x26AF458 VA: 0x26AF458
	public static float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime) { }

	// RVA: 0x26AF4FC Offset: 0x26AF4FC VA: 0x26AF4FC
	public static float SmoothDampAngle(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }

	// RVA: 0x26AEFA4 Offset: 0x26AEFA4 VA: 0x26AEFA4
	public static float Repeat(float t, float length) { }

	// RVA: 0x26AF644 Offset: 0x26AF644 VA: 0x26AF644
	public static float InverseLerp(float a, float b, float value) { }

	// RVA: 0x26AF5AC Offset: 0x26AF5AC VA: 0x26AF5AC
	public static float DeltaAngle(float current, float target) { }

	// RVA: 0x26AF6E8 Offset: 0x26AF6E8 VA: 0x26AF6E8
	private static void .cctor() { }
}

// Namespace: UnityEngineInternal
public struct MathfInternal // TypeDefIndex: 2236
{
	// Fields
	public static float FloatMinNormal; // 0x0
	public static float FloatMinDenormal; // 0x4
	public static bool IsFlushToZeroEnabled; // 0x8

	// Methods

	// RVA: 0x138829C Offset: 0x138829C VA: 0x138829C
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC45704 Offset: 0xC45704 VA: 0xC45704
[RequiredByNativeCodeAttribute] // RVA: 0xC45704 Offset: 0xC45704 VA: 0xC45704
public sealed class Mesh : Object // TypeDefIndex: 2237
{
	// Properties
	internal bool canAccess { get; }
	public int vertexCount { get; }
	public int subMeshCount { get; }
	public Bounds bounds { get; }
	public Vector3[] vertices { get; set; }
	public Vector3[] normals { get; set; }
	public Vector4[] tangents { get; set; }
	public Vector2[] uv { get; set; }
	public Vector2[] uv2 { get; set; }
	public Vector2[] uv3 { get; }
	public Vector2[] uv4 { get; }
	public Color[] colors { get; set; }
	public Color32[] colors32 { get; set; }
	public int[] triangles { get; set; }

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC4EAC0 Offset: 0xC4EAC0 VA: 0xC4EAC0
	// RVA: 0x26B11C0 Offset: 0x26B11C0 VA: 0x26B11C0
	public void .ctor() { }

