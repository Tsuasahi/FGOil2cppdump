	// RVA: 0x2565340 Offset: 0x2565340 VA: 0x2565340
	public static bool get_mousePresent() { }

	[FreeFunctionAttribute] // RVA: 0xBE23A4 Offset: 0xBE23A4 VA: 0xBE23A4
	// RVA: 0x2565398 Offset: 0x2565398 VA: 0x2565398
	public static int get_touchCount() { }

	[FreeFunctionAttribute] // RVA: 0xBE23DC Offset: 0xBE23DC VA: 0xBE23DC
	// RVA: 0x25653F0 Offset: 0x25653F0 VA: 0x25653F0
	public static bool get_touchSupported() { }

	[FreeFunctionAttribute] // RVA: 0xBE2414 Offset: 0xBE2414 VA: 0xBE2414
	// RVA: 0x2565448 Offset: 0x2565448 VA: 0x2565448
	public static bool get_multiTouchEnabled() { }

	[FreeFunctionAttribute] // RVA: 0xBE244C Offset: 0xBE244C VA: 0xBE244C
	// RVA: 0x25654A0 Offset: 0x25654A0 VA: 0x25654A0
	public static void set_multiTouchEnabled(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xBE2484 Offset: 0xBE2484 VA: 0xBE2484
	// RVA: 0x256550C Offset: 0x256550C VA: 0x256550C
	public static DeviceOrientation get_deviceOrientation() { }

	[FreeFunctionAttribute] // RVA: 0xBE24BC Offset: 0xBE24BC VA: 0xBE24BC
	// RVA: 0x2565564 Offset: 0x2565564 VA: 0x2565564
	public static Vector3 get_acceleration() { }

	// RVA: 0x2565600 Offset: 0x2565600 VA: 0x2565600
	public static Touch[] get_touches() { }

	// RVA: 0x2564EA0 Offset: 0x2564EA0 VA: 0x2564EA0
	private static void GetTouch_Injected(int index, out Touch ret) { }

	// RVA: 0x2565000 Offset: 0x2565000 VA: 0x2565000
	private static void get_mousePosition_Injected(out Vector3 ret) { }

	// RVA: 0x2565094 Offset: 0x2565094 VA: 0x2565094
	private static void get_mouseScrollDelta_Injected(out Vector2 ret) { }

	// RVA: 0x2565244 Offset: 0x2565244 VA: 0x2565244
	private static void get_compositionCursorPos_Injected(out Vector2 ret) { }

	// RVA: 0x25652D4 Offset: 0x25652D4 VA: 0x25652D4
	private static void set_compositionCursorPos_Injected(ref Vector2 value) { }

	// RVA: 0x2565594 Offset: 0x2565594 VA: 0x2565594
	private static void get_acceleration_Injected(out Vector3 ret) { }
}

// Namespace: UnityEngine
public enum KeyCode // TypeDefIndex: 2229
{
	// Fields
	public int value__; // 0x0
	public const KeyCode None = 0;
	public const KeyCode Backspace = 8;
	public const KeyCode Delete = 127;
	public const KeyCode Tab = 9;
	public const KeyCode Clear = 12;
	public const KeyCode Return = 13;
	public const KeyCode Pause = 19;
	public const KeyCode Escape = 27;
	public const KeyCode Space = 32;
	public const KeyCode Keypad0 = 256;
	public const KeyCode Keypad1 = 257;
	public const KeyCode Keypad2 = 258;
	public const KeyCode Keypad3 = 259;
	public const KeyCode Keypad4 = 260;
	public const KeyCode Keypad5 = 261;
	public const KeyCode Keypad6 = 262;
	public const KeyCode Keypad7 = 263;
	public const KeyCode Keypad8 = 264;
	public const KeyCode Keypad9 = 265;
	public const KeyCode KeypadPeriod = 266;
	public const KeyCode KeypadDivide = 267;
	public const KeyCode KeypadMultiply = 268;
	public const KeyCode KeypadMinus = 269;
	public const KeyCode KeypadPlus = 270;
	public const KeyCode KeypadEnter = 271;
	public const KeyCode KeypadEquals = 272;
	public const KeyCode UpArrow = 273;
	public const KeyCode DownArrow = 274;
	public const KeyCode RightArrow = 275;
	public const KeyCode LeftArrow = 276;
	public const KeyCode Insert = 277;
	public const KeyCode Home = 278;
	public const KeyCode End = 279;
	public const KeyCode PageUp = 280;
	public const KeyCode PageDown = 281;
	public const KeyCode F1 = 282;
	public const KeyCode F2 = 283;
	public const KeyCode F3 = 284;
	public const KeyCode F4 = 285;
	public const KeyCode F5 = 286;
	public const KeyCode F6 = 287;
	public const KeyCode F7 = 288;
	public const KeyCode F8 = 289;
	public const KeyCode F9 = 290;
	public const KeyCode F10 = 291;
	public const KeyCode F11 = 292;
	public const KeyCode F12 = 293;
	public const KeyCode F13 = 294;
	public const KeyCode F14 = 295;
	public const KeyCode F15 = 296;
	public const KeyCode Alpha0 = 48;
	public const KeyCode Alpha1 = 49;
	public const KeyCode Alpha2 = 50;
	public const KeyCode Alpha3 = 51;
	public const KeyCode Alpha4 = 52;
	public const KeyCode Alpha5 = 53;
	public const KeyCode Alpha6 = 54;
	public const KeyCode Alpha7 = 55;
	public const KeyCode Alpha8 = 56;
	public const KeyCode Alpha9 = 57;
	public const KeyCode Exclaim = 33;
	public const KeyCode DoubleQuote = 34;
	public const KeyCode Hash = 35;
	public const KeyCode Dollar = 36;
	public const KeyCode Percent = 37;
	public const KeyCode Ampersand = 38;
	public const KeyCode Quote = 39;
	public const KeyCode LeftParen = 40;
	public const KeyCode RightParen = 41;
	public const KeyCode Asterisk = 42;
	public const KeyCode Plus = 43;
	public const KeyCode Comma = 44;
	public const KeyCode Minus = 45;
	public const KeyCode Period = 46;
	public const KeyCode Slash = 47;
	public const KeyCode Colon = 58;
	public const KeyCode Semicolon = 59;
	public const KeyCode Less = 60;
	public const KeyCode Equals = 61;
	public const KeyCode Greater = 62;
	public const KeyCode Question = 63;
	public const KeyCode At = 64;
	public const KeyCode LeftBracket = 91;
	public const KeyCode Backslash = 92;
	public const KeyCode RightBracket = 93;
	public const KeyCode Caret = 94;
	public const KeyCode Underscore = 95;
	public const KeyCode BackQuote = 96;
	public const KeyCode A = 97;
	public const KeyCode B = 98;
	public const KeyCode C = 99;
	public const KeyCode D = 100;
	public const KeyCode E = 101;
	public const KeyCode F = 102;
	public const KeyCode G = 103;
	public const KeyCode H = 104;
	public const KeyCode I = 105;
	public const KeyCode J = 106;
	public const KeyCode K = 107;
	public const KeyCode L = 108;
	public const KeyCode M = 109;
	public const KeyCode N = 110;
	public const KeyCode O = 111;
	public const KeyCode P = 112;
	public const KeyCode Q = 113;
	public const KeyCode R = 114;
	public const KeyCode S = 115;
	public const KeyCode T = 116;
	public const KeyCode U = 117;
	public const KeyCode V = 118;
	public const KeyCode W = 119;
	public const KeyCode X = 120;
	public const KeyCode Y = 121;
	public const KeyCode Z = 122;
	public const KeyCode LeftCurlyBracket = 123;
	public const KeyCode Pipe = 124;
	public const KeyCode RightCurlyBracket = 125;
	public const KeyCode Tilde = 126;
	public const KeyCode Numlock = 300;
	public const KeyCode CapsLock = 301;
	public const KeyCode ScrollLock = 302;
	public const KeyCode RightShift = 303;
	public const KeyCode LeftShift = 304;
	public const KeyCode RightControl = 305;
	public const KeyCode LeftControl = 306;
	public const KeyCode RightAlt = 307;
	public const KeyCode LeftAlt = 308;
	public const KeyCode LeftCommand = 310;
	public const KeyCode LeftApple = 310;
	public const KeyCode LeftWindows = 311;
	public const KeyCode RightCommand = 309;
	public const KeyCode RightApple = 309;
	public const KeyCode RightWindows = 312;
	public const KeyCode AltGr = 313;
	public const KeyCode Help = 315;
	public const KeyCode Print = 316;
	public const KeyCode SysReq = 317;
	public const KeyCode Break = 318;
	public const KeyCode Menu = 319;
	public const KeyCode Mouse0 = 323;
	public const KeyCode Mouse1 = 324;
	public const KeyCode Mouse2 = 325;
	public const KeyCode Mouse3 = 326;
	public const KeyCode Mouse4 = 327;
	public const KeyCode Mouse5 = 328;
	public const KeyCode Mouse6 = 329;
	public const KeyCode JoystickButton0 = 330;
	public const KeyCode JoystickButton1 = 331;
	public const KeyCode JoystickButton2 = 332;
	public const KeyCode JoystickButton3 = 333;
	public const KeyCode JoystickButton4 = 334;
	public const KeyCode JoystickButton5 = 335;
	public const KeyCode JoystickButton6 = 336;
	public const KeyCode JoystickButton7 = 337;
	public const KeyCode JoystickButton8 = 338;
	public const KeyCode JoystickButton9 = 339;
	public const KeyCode JoystickButton10 = 340;
	public const KeyCode JoystickButton11 = 341;
	public const KeyCode JoystickButton12 = 342;
	public const KeyCode JoystickButton13 = 343;
	public const KeyCode JoystickButton14 = 344;
	public const KeyCode JoystickButton15 = 345;
	public const KeyCode JoystickButton16 = 346;
	public const KeyCode JoystickButton17 = 347;
	public const KeyCode JoystickButton18 = 348;
	public const KeyCode JoystickButton19 = 349;
	public const KeyCode Joystick1Button0 = 350;
	public const KeyCode Joystick1Button1 = 351;
	public const KeyCode Joystick1Button2 = 352;
	public const KeyCode Joystick1Button3 = 353;
	public const KeyCode Joystick1Button4 = 354;
	public const KeyCode Joystick1Button5 = 355;
	public const KeyCode Joystick1Button6 = 356;
	public const KeyCode Joystick1Button7 = 357;
	public const KeyCode Joystick1Button8 = 358;
	public const KeyCode Joystick1Button9 = 359;
	public const KeyCode Joystick1Button10 = 360;
	public const KeyCode Joystick1Button11 = 361;
	public const KeyCode Joystick1Button12 = 362;
	public const KeyCode Joystick1Button13 = 363;
	public const KeyCode Joystick1Button14 = 364;
	public const KeyCode Joystick1Button15 = 365;
	public const KeyCode Joystick1Button16 = 366;
	public const KeyCode Joystick1Button17 = 367;
	public const KeyCode Joystick1Button18 = 368;
	public const KeyCode Joystick1Button19 = 369;
	public const KeyCode Joystick2Button0 = 370;
	public const KeyCode Joystick2Button1 = 371;
	public const KeyCode Joystick2Button2 = 372;
	public const KeyCode Joystick2Button3 = 373;
	public const KeyCode Joystick2Button4 = 374;
	public const KeyCode Joystick2Button5 = 375;
	public const KeyCode Joystick2Button6 = 376;
	public const KeyCode Joystick2Button7 = 377;
	public const KeyCode Joystick2Button8 = 378;
	public const KeyCode Joystick2Button9 = 379;
	public const KeyCode Joystick2Button10 = 380;
	public const KeyCode Joystick2Button11 = 381;
	public const KeyCode Joystick2Button12 = 382;
	public const KeyCode Joystick2Button13 = 383;
	public const KeyCode Joystick2Button14 = 384;
	public const KeyCode Joystick2Button15 = 385;
	public const KeyCode Joystick2Button16 = 386;
	public const KeyCode Joystick2Button17 = 387;
	public const KeyCode Joystick2Button18 = 388;
	public const KeyCode Joystick2Button19 = 389;
	public const KeyCode Joystick3Button0 = 390;
	public const KeyCode Joystick3Button1 = 391;
	public const KeyCode Joystick3Button2 = 392;
	public const KeyCode Joystick3Button3 = 393;
	public const KeyCode Joystick3Button4 = 394;
	public const KeyCode Joystick3Button5 = 395;
	public const KeyCode Joystick3Button6 = 396;
	public const KeyCode Joystick3Button7 = 397;
	public const KeyCode Joystick3Button8 = 398;
	public const KeyCode Joystick3Button9 = 399;
	public const KeyCode Joystick3Button10 = 400;
	public const KeyCode Joystick3Button11 = 401;
	public const KeyCode Joystick3Button12 = 402;
	public const KeyCode Joystick3Button13 = 403;
	public const KeyCode Joystick3Button14 = 404;
	public const KeyCode Joystick3Button15 = 405;
	public const KeyCode Joystick3Button16 = 406;
	public const KeyCode Joystick3Button17 = 407;
	public const KeyCode Joystick3Button18 = 408;
	public const KeyCode Joystick3Button19 = 409;
	public const KeyCode Joystick4Button0 = 410;
	public const KeyCode Joystick4Button1 = 411;
	public const KeyCode Joystick4Button2 = 412;
	public const KeyCode Joystick4Button3 = 413;
	public const KeyCode Joystick4Button4 = 414;
	public const KeyCode Joystick4Button5 = 415;
	public const KeyCode Joystick4Button6 = 416;
	public const KeyCode Joystick4Button7 = 417;
	public const KeyCode Joystick4Button8 = 418;
	public const KeyCode Joystick4Button9 = 419;
	public const KeyCode Joystick4Button10 = 420;
	public const KeyCode Joystick4Button11 = 421;
	public const KeyCode Joystick4Button12 = 422;
	public const KeyCode Joystick4Button13 = 423;
	public const KeyCode Joystick4Button14 = 424;
	public const KeyCode Joystick4Button15 = 425;
	public const KeyCode Joystick4Button16 = 426;
	public const KeyCode Joystick4Button17 = 427;
	public const KeyCode Joystick4Button18 = 428;
	public const KeyCode Joystick4Button19 = 429;
	public const KeyCode Joystick5Button0 = 430;
	public const KeyCode Joystick5Button1 = 431;
	public const KeyCode Joystick5Button2 = 432;
	public const KeyCode Joystick5Button3 = 433;
	public const KeyCode Joystick5Button4 = 434;
	public const KeyCode Joystick5Button5 = 435;
	public const KeyCode Joystick5Button6 = 436;
	public const KeyCode Joystick5Button7 = 437;
	public const KeyCode Joystick5Button8 = 438;
	public const KeyCode Joystick5Button9 = 439;
	public const KeyCode Joystick5Button10 = 440;
	public const KeyCode Joystick5Button11 = 441;
	public const KeyCode Joystick5Button12 = 442;
	public const KeyCode Joystick5Button13 = 443;
	public const KeyCode Joystick5Button14 = 444;
	public const KeyCode Joystick5Button15 = 445;
	public const KeyCode Joystick5Button16 = 446;
	public const KeyCode Joystick5Button17 = 447;
	public const KeyCode Joystick5Button18 = 448;
	public const KeyCode Joystick5Button19 = 449;
	public const KeyCode Joystick6Button0 = 450;
	public const KeyCode Joystick6Button1 = 451;
	public const KeyCode Joystick6Button2 = 452;
	public const KeyCode Joystick6Button3 = 453;
	public const KeyCode Joystick6Button4 = 454;
	public const KeyCode Joystick6Button5 = 455;
	public const KeyCode Joystick6Button6 = 456;
	public const KeyCode Joystick6Button7 = 457;
	public const KeyCode Joystick6Button8 = 458;
	public const KeyCode Joystick6Button9 = 459;
	public const KeyCode Joystick6Button10 = 460;
	public const KeyCode Joystick6Button11 = 461;
	public const KeyCode Joystick6Button12 = 462;
	public const KeyCode Joystick6Button13 = 463;
	public const KeyCode Joystick6Button14 = 464;
	public const KeyCode Joystick6Button15 = 465;
	public const KeyCode Joystick6Button16 = 466;
	public const KeyCode Joystick6Button17 = 467;
	public const KeyCode Joystick6Button18 = 468;
	public const KeyCode Joystick6Button19 = 469;
	public const KeyCode Joystick7Button0 = 470;
	public const KeyCode Joystick7Button1 = 471;
	public const KeyCode Joystick7Button2 = 472;
	public const KeyCode Joystick7Button3 = 473;
	public const KeyCode Joystick7Button4 = 474;
	public const KeyCode Joystick7Button5 = 475;
	public const KeyCode Joystick7Button6 = 476;
	public const KeyCode Joystick7Button7 = 477;
	public const KeyCode Joystick7Button8 = 478;
	public const KeyCode Joystick7Button9 = 479;
	public const KeyCode Joystick7Button10 = 480;
	public const KeyCode Joystick7Button11 = 481;
	public const KeyCode Joystick7Button12 = 482;
	public const KeyCode Joystick7Button13 = 483;
	public const KeyCode Joystick7Button14 = 484;
	public const KeyCode Joystick7Button15 = 485;
	public const KeyCode Joystick7Button16 = 486;
	public const KeyCode Joystick7Button17 = 487;
	public const KeyCode Joystick7Button18 = 488;
	public const KeyCode Joystick7Button19 = 489;
	public const KeyCode Joystick8Button0 = 490;
	public const KeyCode Joystick8Button1 = 491;
	public const KeyCode Joystick8Button2 = 492;
	public const KeyCode Joystick8Button3 = 493;
	public const KeyCode Joystick8Button4 = 494;
	public const KeyCode Joystick8Button5 = 495;
	public const KeyCode Joystick8Button6 = 496;
	public const KeyCode Joystick8Button7 = 497;
	public const KeyCode Joystick8Button8 = 498;
	public const KeyCode Joystick8Button9 = 499;
	public const KeyCode Joystick8Button10 = 500;
	public const KeyCode Joystick8Button11 = 501;
	public const KeyCode Joystick8Button12 = 502;
	public const KeyCode Joystick8Button13 = 503;
	public const KeyCode Joystick8Button14 = 504;
	public const KeyCode Joystick8Button15 = 505;
	public const KeyCode Joystick8Button16 = 506;
	public const KeyCode Joystick8Button17 = 507;
	public const KeyCode Joystick8Button18 = 508;
	public const KeyCode Joystick8Button19 = 509;
}

// Namespace: UnityEngine
[NativeClassAttribute] // RVA: 0xBD9184 Offset: 0xBD9184 VA: 0xBD9184
[NativeHeaderAttribute] // RVA: 0xBD9184 Offset: 0xBD9184 VA: 0xBD9184
[NativeHeaderAttribute] // RVA: 0xBD9184 Offset: 0xBD9184 VA: 0xBD9184
[RequiredByNativeCodeAttribute] // RVA: 0xBD9184 Offset: 0xBD9184 VA: 0xBD9184
public struct LayerMask // TypeDefIndex: 2230
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBDCBA0 Offset: 0xBDCBA0 VA: 0xBDCBA0
	private int m_Mask; // 0x0

	// Methods

	// RVA: 0x256589C Offset: 0x256589C VA: 0x256589C
	public static int op_Implicit(LayerMask mask) { }

	// RVA: 0x25658A0 Offset: 0x25658A0 VA: 0x25658A0
	public static LayerMask op_Implicit(int intVal) { }

	[NativeMethodAttribute] // RVA: 0xBE24F4 Offset: 0xBE24F4 VA: 0xBE24F4
	[StaticAccessorAttribute] // RVA: 0xBE24F4 Offset: 0xBE24F4 VA: 0xBE24F4
	// RVA: 0x25658A8 Offset: 0x25658A8 VA: 0x25658A8
	public static int NameToLayer(string layerName) { }

	// RVA: 0x2565914 Offset: 0x2565914 VA: 0x2565914
	public static int GetMask(string[] layerNames) { }
}

// Namespace: UnityEngine
internal static class ManagedStreamHelpers // TypeDefIndex: 2231
{
	// Methods

	// RVA: 0x2567268 Offset: 0x2567268 VA: 0x2567268
	internal static void ValidateLoadFromStream(Stream stream) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE2558 Offset: 0xBE2558 VA: 0xBE2558
	// RVA: 0x2567378 Offset: 0x2567378 VA: 0x2567378
	internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE2568 Offset: 0xBE2568 VA: 0xBE2568
	// RVA: 0x2567484 Offset: 0x2567484 VA: 0x2567484
	internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBE2578 Offset: 0xBE2578 VA: 0xBE2578
	// RVA: 0x2567588 Offset: 0x2567588 VA: 0x2567588
	internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBD9258 Offset: 0xBD9258 VA: 0xBD9258
[NativeTypeAttribute] // RVA: 0xBD9258 Offset: 0xBD9258 VA: 0xBD9258
[DefaultMemberAttribute] // RVA: 0xBD9258 Offset: 0xBD9258 VA: 0xBD9258
[ThreadAndSerializationSafeAttribute] // RVA: 0xBD9258 Offset: 0xBD9258 VA: 0xBD9258
[RequiredByNativeCodeAttribute] // RVA: 0xBD9258 Offset: 0xBD9258 VA: 0xBD9258
[NativeClassAttribute] // RVA: 0xBD9258 Offset: 0xBD9258 VA: 0xBD9258
public struct Matrix4x4 : IEquatable<Matrix4x4> // TypeDefIndex: 2232
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBDCBD8 Offset: 0xBDCBD8 VA: 0xBDCBD8
	public float m00; // 0x0
	[NativeNameAttribute] // RVA: 0xBDCC10 Offset: 0xBDCC10 VA: 0xBDCC10
	public float m10; // 0x4
	[NativeNameAttribute] // RVA: 0xBDCC48 Offset: 0xBDCC48 VA: 0xBDCC48
	public float m20; // 0x8
	[NativeNameAttribute] // RVA: 0xBDCC80 Offset: 0xBDCC80 VA: 0xBDCC80
	public float m30; // 0xC
	[NativeNameAttribute] // RVA: 0xBDCCB8 Offset: 0xBDCCB8 VA: 0xBDCCB8
	public float m01; // 0x10
	[NativeNameAttribute] // RVA: 0xBDCCF0 Offset: 0xBDCCF0 VA: 0xBDCCF0
	public float m11; // 0x14
	[NativeNameAttribute] // RVA: 0xBDCD28 Offset: 0xBDCD28 VA: 0xBDCD28
	public float m21; // 0x18
	[NativeNameAttribute] // RVA: 0xBDCD60 Offset: 0xBDCD60 VA: 0xBDCD60
	public float m31; // 0x1C
	[NativeNameAttribute] // RVA: 0xBDCD98 Offset: 0xBDCD98 VA: 0xBDCD98
	public float m02; // 0x20
	[NativeNameAttribute] // RVA: 0xBDCDD0 Offset: 0xBDCDD0 VA: 0xBDCDD0
	public float m12; // 0x24
	[NativeNameAttribute] // RVA: 0xBDCE08 Offset: 0xBDCE08 VA: 0xBDCE08
	public float m22; // 0x28
	[NativeNameAttribute] // RVA: 0xBDCE40 Offset: 0xBDCE40 VA: 0xBDCE40
	public float m32; // 0x2C
	[NativeNameAttribute] // RVA: 0xBDCE78 Offset: 0xBDCE78 VA: 0xBDCE78
	public float m03; // 0x30
	[NativeNameAttribute] // RVA: 0xBDCEB0 Offset: 0xBDCEB0 VA: 0xBDCEB0
	public float m13; // 0x34
	[NativeNameAttribute] // RVA: 0xBDCEE8 Offset: 0xBDCEE8 VA: 0xBDCEE8
	public float m23; // 0x38
	[NativeNameAttribute] // RVA: 0xBDCF20 Offset: 0xBDCF20 VA: 0xBDCF20
	public float m33; // 0x3C
	private static readonly Matrix4x4 zeroMatrix; // 0x0
	private static readonly Matrix4x4 identityMatrix; // 0x40

	// Properties
	public Quaternion rotation { get; }
	public Matrix4x4 inverse { get; }
	public float Item { get; }
	public float Item { get; set; }
	public static Matrix4x4 identity { get; }

	// Methods

	// RVA: 0xD6E790 Offset: 0xD6E790 VA: 0xD6E790
	public void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3) { }

	[ThreadSafeAttribute] // RVA: 0xBE2588 Offset: 0xBE2588 VA: 0xBE2588
	// RVA: 0xD6E7BC Offset: 0xD6E7BC VA: 0xD6E7BC
	private Quaternion GetRotation() { }

	// RVA: 0xD6E7C4 Offset: 0xD6E7C4 VA: 0xD6E7C4
	public Quaternion get_rotation() { }

	[FreeFunctionAttribute] // RVA: 0xBE2598 Offset: 0xBE2598 VA: 0xBE2598
	// RVA: 0x256A33C Offset: 0x256A33C VA: 0x256A33C
	public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s) { }

	[FreeFunctionAttribute] // RVA: 0xBE25E0 Offset: 0xBE25E0 VA: 0xBE25E0
	// RVA: 0x256A480 Offset: 0x256A480 VA: 0x256A480
	public static Matrix4x4 Inverse(Matrix4x4 m) { }

	// RVA: 0xD6E7CC Offset: 0xD6E7CC VA: 0xD6E7CC
	public Matrix4x4 get_inverse() { }

	[FreeFunctionAttribute] // RVA: 0xBE2628 Offset: 0xBE2628 VA: 0xBE2628
	// RVA: 0x256A65C Offset: 0x256A65C VA: 0x256A65C
	public static Matrix4x4 Perspective(float fov, float aspect, float zNear, float zFar) { }

	// RVA: 0xD6E7D4 Offset: 0xD6E7D4 VA: 0xD6E7D4
	public float get_Item(int row, int column) { }

	// RVA: 0xD6E7E0 Offset: 0xD6E7E0 VA: 0xD6E7E0
	public float get_Item(int index) { }

	// RVA: 0xD6E7E8 Offset: 0xD6E7E8 VA: 0xD6E7E8
	public void set_Item(int index, float value) { }

	// RVA: 0xD6E7F0 Offset: 0xD6E7F0 VA: 0xD6E7F0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD6E7F8 Offset: 0xD6E7F8 VA: 0xD6E7F8 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD6E800 Offset: 0xD6E800 VA: 0xD6E800 Slot: 4
	public bool Equals(Matrix4x4 other) { }

	// RVA: 0x256AD84 Offset: 0x256AD84 VA: 0x256AD84
	public static Matrix4x4 op_Multiply(Matrix4x4 lhs, Matrix4x4 rhs) { }

	// RVA: 0x256B0F0 Offset: 0x256B0F0 VA: 0x256B0F0
	public static Vector4 op_Multiply(Matrix4x4 lhs, Vector4 vector) { }

	// RVA: 0xD6E848 Offset: 0xD6E848 VA: 0xD6E848
	public Vector4 GetColumn(int index) { }

	// RVA: 0xD6E850 Offset: 0xD6E850 VA: 0xD6E850
	public Vector3 MultiplyPoint(Vector3 point) { }

	// RVA: 0xD6E858 Offset: 0xD6E858 VA: 0xD6E858
	public Vector3 MultiplyPoint3x4(Vector3 point) { }

	// RVA: 0xD6E860 Offset: 0xD6E860 VA: 0xD6E860
	public Vector3 MultiplyVector(Vector3 vector) { }

	// RVA: 0x256B2E0 Offset: 0x256B2E0 VA: 0x256B2E0
	public static Matrix4x4 Scale(Vector3 vector) { }

	// RVA: 0x256B30C Offset: 0x256B30C VA: 0x256B30C
	public static Matrix4x4 Translate(Vector3 vector) { }

	// RVA: 0x256B338 Offset: 0x256B338 VA: 0x256B338
	public static Matrix4x4 get_identity() { }

	// RVA: 0xD6E868 Offset: 0xD6E868 VA: 0xD6E868 Slot: 3
	public override string ToString() { }

	// RVA: 0x256BA58 Offset: 0x256BA58 VA: 0x256BA58
	private static void .cctor() { }

	// RVA: 0x256A2C4 Offset: 0x256A2C4 VA: 0x256A2C4
	private static void GetRotation_Injected(ref Matrix4x4 _unity_self, out Quaternion ret) { }

	// RVA: 0x256A3F4 Offset: 0x256A3F4 VA: 0x256A3F4
	private static void TRS_Injected(ref Vector3 pos, ref Quaternion q, ref Vector3 s, out Matrix4x4 ret) { }

	// RVA: 0x256A51C Offset: 0x256A51C VA: 0x256A51C
	private static void Inverse_Injected(ref Matrix4x4 m, out Matrix4x4 ret) { }

	// RVA: 0x256A718 Offset: 0x256A718 VA: 0x256A718
	private static void Perspective_Injected(float fov, float aspect, float zNear, float zFar, out Matrix4x4 ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
[NativeTypeAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
[NativeClassAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
[ThreadAndSerializationSafeAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
[NativeHeaderAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
[DefaultMemberAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
[NativeHeaderAttribute] // RVA: 0xBD9350 Offset: 0xBD9350 VA: 0xBD9350
public struct Vector3 : IEquatable<Vector3> // TypeDefIndex: 2233
{
	// Fields
	public const float kEpsilon = 1E-05;
	public const float kEpsilonNormalSqrt = 1E-15;
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	private static readonly Vector3 zeroVector; // 0x0
	private static readonly Vector3 oneVector; // 0xC
	private static readonly Vector3 upVector; // 0x18
	private static readonly Vector3 downVector; // 0x24
	private static readonly Vector3 leftVector; // 0x30
	private static readonly Vector3 rightVector; // 0x3C
	private static readonly Vector3 forwardVector; // 0x48
	private static readonly Vector3 backVector; // 0x54
	private static readonly Vector3 positiveInfinityVector; // 0x60
	private static readonly Vector3 negativeInfinityVector; // 0x6C

	// Properties
	public float Item { get; set; }
	public Vector3 normalized { get; }
	public float magnitude { get; }
	public float sqrMagnitude { get; }
	public static Vector3 zero { get; }
	public static Vector3 one { get; }
	public static Vector3 forward { get; }
	public static Vector3 back { get; }
	public static Vector3 up { get; }
	public static Vector3 down { get; }
	public static Vector3 left { get; }
	public static Vector3 right { get; }

	// Methods

	// RVA: 0xD66A84 Offset: 0xD66A84 VA: 0xD66A84
	public void .ctor(float x, float y, float z) { }

	// RVA: 0xD66A90 Offset: 0xD66A90 VA: 0xD66A90
	public void .ctor(float x, float y) { }

	[FreeFunctionAttribute] // RVA: 0xBE2670 Offset: 0xBE2670 VA: 0xBE2670
	// RVA: 0x217695C Offset: 0x217695C VA: 0x217695C
	public static Vector3 Slerp(Vector3 a, Vector3 b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xBE26B8 Offset: 0xBE26B8 VA: 0xBE26B8
	// RVA: 0x2176A8C Offset: 0x2176A8C VA: 0x2176A8C
	public static Vector3 RotateTowards(Vector3 current, Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta) { }

	// RVA: 0x2176BD4 Offset: 0x2176BD4 VA: 0x2176BD4
	public static Vector3 Lerp(Vector3 a, Vector3 b, float t) { }

	// RVA: 0x2176C9C Offset: 0x2176C9C VA: 0x2176C9C
	public static Vector3 MoveTowards(Vector3 current, Vector3 target, float maxDistanceDelta) { }

	// RVA: 0xD66A9C Offset: 0xD66A9C VA: 0xD66A9C
	public float get_Item(int index) { }

	// RVA: 0xD66AA4 Offset: 0xD66AA4 VA: 0xD66AA4
	public void set_Item(int index, float value) { }

	// RVA: 0xD66AAC Offset: 0xD66AAC VA: 0xD66AAC
	public void Set(float newX, float newY, float newZ) { }

	// RVA: 0x2177038 Offset: 0x2177038 VA: 0x2177038
	public static Vector3 Scale(Vector3 a, Vector3 b) { }

	// RVA: 0xD66AB8 Offset: 0xD66AB8 VA: 0xD66AB8
	public void Scale(Vector3 scale) { }

	// RVA: 0x2177068 Offset: 0x2177068 VA: 0x2177068
	public static Vector3 Cross(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0xD66AD8 Offset: 0xD66AD8 VA: 0xD66AD8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD66AE0 Offset: 0xD66AE0 VA: 0xD66AE0 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD66AE8 Offset: 0xD66AE8 VA: 0xD66AE8 Slot: 4
	public bool Equals(Vector3 other) { }

	// RVA: 0x21771E0 Offset: 0x21771E0 VA: 0x21771E0
	public static Vector3 Reflect(Vector3 inDirection, Vector3 inNormal) { }

	// RVA: 0x21772CC Offset: 0x21772CC VA: 0x21772CC
	public static Vector3 Normalize(Vector3 value) { }

	// RVA: 0xD66AF0 Offset: 0xD66AF0 VA: 0xD66AF0
	public void Normalize() { }

	// RVA: 0xD66AF8 Offset: 0xD66AF8 VA: 0xD66AF8
	public Vector3 get_normalized() { }

	// RVA: 0x21772A0 Offset: 0x21772A0 VA: 0x21772A0
	public static float Dot(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x21775D4 Offset: 0x21775D4 VA: 0x21775D4
	public static Vector3 Project(Vector3 vector, Vector3 onNormal) { }

	// RVA: 0x2177720 Offset: 0x2177720 VA: 0x2177720
	public static float Angle(Vector3 from, Vector3 to) { }

	// RVA: 0x2177898 Offset: 0x2177898 VA: 0x2177898
	public static float Distance(Vector3 a, Vector3 b) { }

	// RVA: 0x217796C Offset: 0x217796C VA: 0x217796C
	public static Vector3 ClampMagnitude(Vector3 vector, float maxLength) { }

	// RVA: 0x21773B0 Offset: 0x21773B0 VA: 0x21773B0
	public static float Magnitude(Vector3 vector) { }

	// RVA: 0xD66B00 Offset: 0xD66B00 VA: 0xD66B00
	public float get_magnitude() { }

	// RVA: 0x2177A4C Offset: 0x2177A4C VA: 0x2177A4C
	public static float SqrMagnitude(Vector3 vector) { }

	// RVA: 0xD66B08 Offset: 0xD66B08 VA: 0xD66B08
	public float get_sqrMagnitude() { }

	// RVA: 0x2177A64 Offset: 0x2177A64 VA: 0x2177A64
	public static Vector3 Min(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2177B34 Offset: 0x2177B34 VA: 0x2177B34
	public static Vector3 Max(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2168B44 Offset: 0x2168B44 VA: 0x2168B44
	public static Vector3 get_zero() { }

	// RVA: 0x2177C04 Offset: 0x2177C04 VA: 0x2177C04
	public static Vector3 get_one() { }

	// RVA: 0x21729CC Offset: 0x21729CC VA: 0x21729CC
	public static Vector3 get_forward() { }

	// RVA: 0x2177C70 Offset: 0x2177C70 VA: 0x2177C70
	public static Vector3 get_back() { }

	// RVA: 0x217286C Offset: 0x217286C VA: 0x217286C
	public static Vector3 get_up() { }

	// RVA: 0x2177CDC Offset: 0x2177CDC VA: 0x2177CDC
	public static Vector3 get_down() { }

	// RVA: 0x2177D48 Offset: 0x2177D48 VA: 0x2177D48
	public static Vector3 get_left() { }

	// RVA: 0x217270C Offset: 0x217270C VA: 0x217270C
	public static Vector3 get_right() { }

	// RVA: 0x2173254 Offset: 0x2173254 VA: 0x2173254
	public static Vector3 op_Addition(Vector3 a, Vector3 b) { }

	// RVA: 0x2176DD8 Offset: 0x2176DD8 VA: 0x2176DD8
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b) { }

	// RVA: 0x2177DB4 Offset: 0x2177DB4 VA: 0x2177DB4
	public static Vector3 op_UnaryNegation(Vector3 a) { }

	// RVA: 0x2176EA8 Offset: 0x2176EA8 VA: 0x2176EA8
	public static Vector3 op_Multiply(Vector3 a, float d) { }

	// RVA: 0x21772B8 Offset: 0x21772B8 VA: 0x21772B8
	public static Vector3 op_Multiply(float d, Vector3 a) { }

	// RVA: 0x2176E98 Offset: 0x2176E98 VA: 0x2176E98
	public static Vector3 op_Division(Vector3 a, float d) { }

	// RVA: 0x2177DC4 Offset: 0x2177DC4 VA: 0x2177DC4
	public static bool op_Equality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0x2168BB0 Offset: 0x2168BB0 VA: 0x2168BB0
	public static bool op_Inequality(Vector3 lhs, Vector3 rhs) { }

	// RVA: 0xD66B28 Offset: 0xD66B28 VA: 0xD66B28 Slot: 3
	public override string ToString() { }

	// RVA: 0xD66B30 Offset: 0xD66B30 VA: 0xD66B30
	public string ToString(string format) { }

	// RVA: 0x21781D4 Offset: 0x21781D4 VA: 0x21781D4
	private static void .cctor() { }

	// RVA: 0x2176A00 Offset: 0x2176A00 VA: 0x2176A00
	private static void Slerp_Injected(ref Vector3 a, ref Vector3 b, float t, out Vector3 ret) { }

	// RVA: 0x2176B38 Offset: 0x2176B38 VA: 0x2176B38
	private static void RotateTowards_Injected(ref Vector3 current, ref Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta, out Vector3 ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBD9474 Offset: 0xBD9474 VA: 0xBD9474
[ThreadAndSerializationSafeAttribute] // RVA: 0xBD9474 Offset: 0xBD9474 VA: 0xBD9474
[UsedByNativeCodeAttribute] // RVA: 0xBD9474 Offset: 0xBD9474 VA: 0xBD9474
[NativeTypeAttribute] // RVA: 0xBD9474 Offset: 0xBD9474 VA: 0xBD9474
[DefaultMemberAttribute] // RVA: 0xBD9474 Offset: 0xBD9474 VA: 0xBD9474
public struct Quaternion : IEquatable<Quaternion> // TypeDefIndex: 2234
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Quaternion identityQuaternion; // 0x0
	public const float kEpsilon = 1E-06;

	// Properties
	public float Item { get; }
	public static Quaternion identity { get; }
	public Vector3 eulerAngles { get; }

	// Methods

	// RVA: 0xD6ED70 Offset: 0xD6ED70 VA: 0xD6ED70
	public void .ctor(float x, float y, float z, float w) { }

	[FreeFunctionAttribute] // RVA: 0xBE26F0 Offset: 0xBE26F0 VA: 0xBE26F0
	// RVA: 0x2576094 Offset: 0x2576094 VA: 0x2576094
	public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection) { }

	[FreeFunctionAttribute] // RVA: 0xBE2738 Offset: 0xBE2738 VA: 0xBE2738
	// RVA: 0x25761A8 Offset: 0x25761A8 VA: 0x25761A8
	public static Quaternion Inverse(Quaternion rotation) { }

	[FreeFunctionAttribute] // RVA: 0xBE2770 Offset: 0xBE2770 VA: 0xBE2770
	// RVA: 0x25762A0 Offset: 0x25762A0 VA: 0x25762A0
	public static Quaternion Slerp(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xBE27B8 Offset: 0xBE27B8 VA: 0xBE27B8
	// RVA: 0x25763CC Offset: 0x25763CC VA: 0x25763CC
	public static Quaternion SlerpUnclamped(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xBE2800 Offset: 0xBE2800 VA: 0xBE2800
	// RVA: 0x25764F8 Offset: 0x25764F8 VA: 0x25764F8
	public static Quaternion Lerp(Quaternion a, Quaternion b, float t) { }

	[FreeFunctionAttribute] // RVA: 0xBE2848 Offset: 0xBE2848 VA: 0xBE2848
	// RVA: 0x2576624 Offset: 0x2576624 VA: 0x2576624
	private static Quaternion Internal_FromEulerRad(Vector3 euler) { }

	[FreeFunctionAttribute] // RVA: 0xBE2890 Offset: 0xBE2890 VA: 0xBE2890
	// RVA: 0x257671C Offset: 0x257671C VA: 0x257671C
	private static Vector3 Internal_ToEulerRad(Quaternion rotation) { }

	[FreeFunctionAttribute] // RVA: 0xBE28D8 Offset: 0xBE28D8 VA: 0xBE28D8
	// RVA: 0x2576818 Offset: 0x2576818 VA: 0x2576818
	public static Quaternion AngleAxis(float angle, Vector3 axis) { }

	[FreeFunctionAttribute] // RVA: 0xBE2920 Offset: 0xBE2920 VA: 0xBE2920
	// RVA: 0x2576938 Offset: 0x2576938 VA: 0x2576938
	public static Quaternion LookRotation(Vector3 forward, Vector3 upwards) { }

	[ExcludeFromDocsAttribute] // RVA: 0xBE2968 Offset: 0xBE2968 VA: 0xBE2968
	// RVA: 0x2576A4C Offset: 0x2576A4C VA: 0x2576A4C
	public static Quaternion LookRotation(Vector3 forward) { }

	// RVA: 0xD6ED7C Offset: 0xD6ED7C VA: 0xD6ED7C
	public float get_Item(int index) { }

	// RVA: 0x2576BE0 Offset: 0x2576BE0 VA: 0x2576BE0
	public static Quaternion get_identity() { }

	// RVA: 0x2576C4C Offset: 0x2576C4C VA: 0x2576C4C
	public static Quaternion op_Multiply(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x2576CC0 Offset: 0x2576CC0 VA: 0x2576CC0
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point) { }

	// RVA: 0x2576D64 Offset: 0x2576D64 VA: 0x2576D64
	private static bool IsEqualUsingDot(float dot) { }

	// RVA: 0x2576D78 Offset: 0x2576D78 VA: 0x2576D78
	public static bool op_Equality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x2576E60 Offset: 0x2576E60 VA: 0x2576E60
	public static bool op_Inequality(Quaternion lhs, Quaternion rhs) { }

	// RVA: 0x2576E40 Offset: 0x2576E40 VA: 0x2576E40
	public static float Dot(Quaternion a, Quaternion b) { }

	// RVA: 0x2576F28 Offset: 0x2576F28 VA: 0x2576F28
	public static float Angle(Quaternion a, Quaternion b) { }

	// RVA: 0x2577034 Offset: 0x2577034 VA: 0x2577034
	private static Vector3 Internal_MakePositive(Vector3 euler) { }

	// RVA: 0xD6ED84 Offset: 0xD6ED84 VA: 0xD6ED84
	public Vector3 get_eulerAngles() { }

	// RVA: 0x25771A4 Offset: 0x25771A4 VA: 0x25771A4
	public static Quaternion Euler(float x, float y, float z) { }

	// RVA: 0x2577298 Offset: 0x2577298 VA: 0x2577298
	public static Quaternion Euler(Vector3 euler) { }

	// RVA: 0x2577364 Offset: 0x2577364 VA: 0x2577364
	public static Quaternion RotateTowards(Quaternion from, Quaternion to, float maxDegreesDelta) { }

	// RVA: 0xD6ED8C Offset: 0xD6ED8C VA: 0xD6ED8C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD6ED94 Offset: 0xD6ED94 VA: 0xD6ED94 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD6ED9C Offset: 0xD6ED9C VA: 0xD6ED9C Slot: 4
	public bool Equals(Quaternion other) { }

	// RVA: 0xD6EDA4 Offset: 0xD6EDA4 VA: 0xD6EDA4 Slot: 3
	public override string ToString() { }

	// RVA: 0xD6EDAC Offset: 0xD6EDAC VA: 0xD6EDAC
	public string ToString(string format) { }

	// RVA: 0x2577A64 Offset: 0x2577A64 VA: 0x2577A64
	private static void .cctor() { }

	// RVA: 0x2576124 Offset: 0x2576124 VA: 0x2576124
	private static void FromToRotation_Injected(ref Vector3 fromDirection, ref Vector3 toDirection, out Quaternion ret) { }

	// RVA: 0x257622C Offset: 0x257622C VA: 0x257622C
	private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret) { }

	// RVA: 0x2576340 Offset: 0x2576340 VA: 0x2576340
	private static void Slerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x257646C Offset: 0x257646C VA: 0x257646C
	private static void SlerpUnclamped_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x2576598 Offset: 0x2576598 VA: 0x2576598
	private static void Lerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }

	// RVA: 0x25766A8 Offset: 0x25766A8 VA: 0x25766A8
	private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret) { }

	// RVA: 0x25767A4 Offset: 0x25767A4 VA: 0x25767A4
	private static void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret) { }

	// RVA: 0x25768AC Offset: 0x25768AC VA: 0x25768AC
	private static void AngleAxis_Injected(float angle, ref Vector3 axis, out Quaternion ret) { }

	// RVA: 0x25769C8 Offset: 0x25769C8 VA: 0x25769C8
	private static void LookRotation_Injected(ref Vector3 forward, ref Vector3 upwards, out Quaternion ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBD9524 Offset: 0xBD9524 VA: 0xBD9524
[NativeHeaderAttribute] // RVA: 0xBD9524 Offset: 0xBD9524 VA: 0xBD9524
[ThreadAndSerializationSafeAttribute] // RVA: 0xBD9524 Offset: 0xBD9524 VA: 0xBD9524
[NativeHeaderAttribute] // RVA: 0xBD9524 Offset: 0xBD9524 VA: 0xBD9524
[NativeHeaderAttribute] // RVA: 0xBD9524 Offset: 0xBD9524 VA: 0xBD9524
public struct Mathf // TypeDefIndex: 2235
{
	// Fields
	public static readonly float Epsilon; // 0x0

	// Methods

	// RVA: 0x25692B8 Offset: 0x25692B8 VA: 0x25692B8
	public static float Sin(float f) { }

	// RVA: 0x25692D4 Offset: 0x25692D4 VA: 0x25692D4
	public static float Cos(float f) { }

	// RVA: 0x25692F0 Offset: 0x25692F0 VA: 0x25692F0
	public static float Tan(float f) { }

	// RVA: 0x256930C Offset: 0x256930C VA: 0x256930C
	public static float Asin(float f) { }

	// RVA: 0x2569328 Offset: 0x2569328 VA: 0x2569328
	public static float Acos(float f) { }

	// RVA: 0x2569344 Offset: 0x2569344 VA: 0x2569344
	public static float Atan(float f) { }

	// RVA: 0x2569360 Offset: 0x2569360 VA: 0x2569360
	public static float Atan2(float y, float x) { }

	// RVA: 0x2569380 Offset: 0x2569380 VA: 0x2569380
	public static float Sqrt(float f) { }

	// RVA: 0x2569398 Offset: 0x2569398 VA: 0x2569398
	public static float Abs(float f) { }

	// RVA: 0x25693A0 Offset: 0x25693A0 VA: 0x25693A0
	public static int Abs(int value) { }

	// RVA: 0x25693AC Offset: 0x25693AC VA: 0x25693AC
	public static float Min(float a, float b) { }

	// RVA: 0x25693B8 Offset: 0x25693B8 VA: 0x25693B8
	public static float Min(float[] values) { }

	// RVA: 0x2569484 Offset: 0x2569484 VA: 0x2569484
	public static int Min(int a, int b) { }

	// RVA: 0x2569490 Offset: 0x2569490 VA: 0x2569490
	public static float Max(float a, float b) { }

	// RVA: 0x256949C Offset: 0x256949C VA: 0x256949C
	public static float Max(float[] values) { }

	// RVA: 0x2569568 Offset: 0x2569568 VA: 0x2569568
	public static int Max(int a, int b) { }

	// RVA: 0x2569574 Offset: 0x2569574 VA: 0x2569574
	public static int Max(int[] values) { }

	// RVA: 0x2569638 Offset: 0x2569638 VA: 0x2569638
	public static float Pow(float f, float p) { }

	// RVA: 0x2569658 Offset: 0x2569658 VA: 0x2569658
	public static float Exp(float power) { }

	// RVA: 0x2569674 Offset: 0x2569674 VA: 0x2569674
	public static float Log(float f, float p) { }

