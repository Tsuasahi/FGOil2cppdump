	// RVA: 0x195C7E8 Offset: 0x195C7E8 VA: 0x195C7E8
	private void updateMatrix(Renderer[] targetRenderers) { }

	// RVA: 0x195DD58 Offset: 0x195DD58 VA: 0x195DD58
	private Bounds calcRendererBounds() { }
}

// Namespace: 
public enum ChrRenderMatrix.MaterialType // TypeDefIndex: 9004
{
	// Fields
	public int value__; // 0x0
	public const ChrRenderMatrix.MaterialType ShareMaterial = 0;
	public const ChrRenderMatrix.MaterialType NormalMaterial = 1;
}

// Namespace: 
private class ChrRenderMatrix.EfNodeObject // TypeDefIndex: 9005
{
	// Fields
	private GameObject orgObject; // 0x10
	private GameObject dupObject; // 0x18

	// Methods

	// RVA: 0x195DD28 Offset: 0x195DD28 VA: 0x195DD28
	public void .ctor(GameObject gameObject) { }

	// RVA: 0x195E258 Offset: 0x195E258 VA: 0x195E258
	public void Setup(GameObject gameObject) { }

	// RVA: 0x195C3FC Offset: 0x195C3FC VA: 0x195C3FC
	public void Reset() { }

	// RVA: 0x195DF4C Offset: 0x195DF4C VA: 0x195DF4C
	public void SetMatrix(Matrix4x4 AllMat) { }

	// RVA: 0x195E7A8 Offset: 0x195E7A8 VA: 0x195E7A8
	private void copyTransform(GameObject dst, GameObject src) { }
}

// Namespace: 
public class BattleComboData // TypeDefIndex: 9006
{
	// Fields
	public bool flash; // 0x10
	public bool chainError; // 0x11
	public int samecount; // 0x14
	public bool[] sameflg; // 0x18
	public int addAtk; // 0x20
	public int addTdGauge; // 0x24
	public int addCritical; // 0x28
	public int tdChain; // 0x2C
	public int flashtype; // 0x30
	private bool isTreasureDvc; // 0x34

	// Methods

	// RVA: 0x10398CC Offset: 0x10398CC VA: 0x10398CC
	public void .ctor() { }

	// RVA: 0x1039938 Offset: 0x1039938 VA: 0x1039938
	public bool isGrand() { }

	// RVA: 0x103995C Offset: 0x103995C VA: 0x103995C
	public bool isExtraAttack() { }

	// RVA: 0x103996C Offset: 0x103996C VA: 0x103996C
	public bool isChainError() { }

	// RVA: 0x1039974 Offset: 0x1039974 VA: 0x1039974
	public bool IsTreasureDvc() { }

	// RVA: 0x103997C Offset: 0x103997C VA: 0x103997C
	public void SetTreasureDvc(bool flag) { }
}

// Namespace: 
public class BattleCommandComponent : BaseMonoBehaviour // TypeDefIndex: 9007
{
	// Fields
	public Transform objectRoot; // 0x18
	public UISprite bg; // 0x20
	public UISprite icon; // 0x28
	public UISprite text; // 0x30
	public UITexture facetex; // 0x38
	public UITexture nobletex; // 0x40
	public UISprite friendIcon; // 0x48
	public UISprite sealedSprite; // 0x50
	public UISprite unusableNpSprite; // 0x58
	public UISprite donotactSprite; // 0x60
	public UISprite dontuseSprite; // 0x68
	public UISprite donotsleepSprite; // 0x70
	public UISprite donotPermanentSleep; // 0x78
	public UISprite unusableShortageStarSprite; // 0x80
	public UILabel displayRemainingTurn; // 0x88
	public UISprite donotActTypeSprite; // 0x90
	public UISprite donotActWithTypeSp; // 0x98
	public DrumRollLabel criticallabel; // 0xA0
	public GameObject criticalObject; // 0xA8
	public GameObject tr_criticaleffect; // 0xB0
	public GameObject effect_addcritical; // 0xB8
	public GameObject effect_cricomplete; // 0xC0
	public GameObject effect_fullcricomplete; // 0xC8
	public Transform buffRoot; // 0xD0
	public BattleServantBuffIconComponent[] buffIconList; // 0xD8
	private BattleCommandSealStatus sealStatus; // 0xE0
	private bool isCodeTextureView; // 0xE8
	private bool isInBattle; // 0xE9
	[SerializeField] // RVA: 0xC643B0 Offset: 0xC643B0 VA: 0xC643B0
	private Transform codeObject; // 0xF0
	[SerializeField] // RVA: 0xC643C0 Offset: 0xC643C0 VA: 0xC643C0
	private UITexture codeTexture; // 0xF8
	[SerializeField] // RVA: 0xC643D0 Offset: 0xC643D0 VA: 0xC643D0
	protected UISprite codeSprite; // 0x100
	[SerializeField] // RVA: 0xC643E0 Offset: 0xC643E0 VA: 0xC643E0
	private UILabel chargeTurnLabel; // 0x108
	[SerializeField] // RVA: 0xC643F0 Offset: 0xC643F0 VA: 0xC643F0
	private UILabel remainingTurnLabel; // 0x110
	[SerializeField] // RVA: 0xC64400 Offset: 0xC64400 VA: 0xC64400
	private Transform[] stateArrowPoints; // 0x118
	[SerializeField] // RVA: 0xC64410 Offset: 0xC64410 VA: 0xC64410
	private Transform[] stateCodePoints; // 0x120
	public UIWidget nomalwidget; // 0x128
	private BattlePerformance perf; // 0x130
	private BattleCommandData data; // 0x138
	private BattleServantData svtData; // 0x140
	private GameObject target; // 0x148
	private int index; // 0x150
	private bool selectflg; // 0x154
	private GameObject[] effectobj; // 0x158
	private bool newMatriarl; // 0x160
	private GameObject[] addObjectList; // 0x168
	private BuffList.TYPE[] qabTypes; // 0x170
	private BuffList.TYPE[] noneTdQabTypes; // 0x178
	private BuffList.TYPE[] tdTypes; // 0x180
	private BuffList.TYPE[] otherTypes; // 0x188
	private static readonly string SEALED_CARDTYPE_ICON_ARTS; // 0x0
	private static readonly string SEALED_CARDTYPE_ICON_BUSTER; // 0x8
	private static readonly string SEALED_CARDTYPE_ICON_QUICK; // 0x10
	private const int effectdepth = 7;
	private int basedepth; // 0x190
	public UILabel svtId_label; // 0x198
	private Spawner spawner; // 0x1A0
	private GameObject nobleGaugeEffect; // 0x1A8
	[SerializeField] // RVA: 0xC64420 Offset: 0xC64420 VA: 0xC64420
	private GameObject LockInfo; // 0x1B0
	[SerializeField] // RVA: 0xC64430 Offset: 0xC64430 VA: 0xC64430
	protected UILabel powerUpCardValue; // 0x1B8
	[SerializeField] // RVA: 0xC64440 Offset: 0xC64440 VA: 0xC64440
	private UISprite powerUpCardIcon; // 0x1C0
	[SerializeField] // RVA: 0xC64450 Offset: 0xC64450 VA: 0xC64450
	private UISprite nowTreasureDeviceTypeImage; // 0x1C8
	[SerializeField] // RVA: 0xC64460 Offset: 0xC64460 VA: 0xC64460
	public UILabel restTreasureDeviceChangeTurnLabel; // 0x1D0
	[SerializeField] // RVA: 0xC64470 Offset: 0xC64470 VA: 0xC64470
	private UISprite specialCardBuffIcon; // 0x1D8
	[SerializeField] // RVA: 0xC64480 Offset: 0xC64480 VA: 0xC64480
	private UILabel specialCardBuffTurn; // 0x1E0
	[SerializeField] // RVA: 0xC64490 Offset: 0xC64490 VA: 0xC64490
	private UIAtlas commandAtlas; // 0x1E8
	private List<BattleCommandComponent.CardBuffData> specialCardBuffList; // 0x1F0
	private int cardBuffListIndex; // 0x1F8
	private bool isCardBuffAlphaAnim; // 0x1FC
	private float cardBuffAlphaFor; // 0x200
	private float cardBuffAlphaAnimTime; // 0x204
	private const float CARD_BUFF_ICON_ALPHA_ANIM_RATE = 0.5;
	private const float CARD_BUFF_ICON_ALPHA_ANIM_INTERVAL = 3;
	private bool isChangedBuffIcon; // 0x208
	private Dictionary<string, GameObject> cardEffectDict; // 0x210
	private bool isCountUp; // 0x218
	[CompilerGeneratedAttribute] // RVA: 0xC644A0 Offset: 0xC644A0 VA: 0xC644A0
	private static Predicate<BattleCommandComponent.CardBuffData> <>f__am$cache0; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC644B0 Offset: 0xC644B0 VA: 0xC644B0
	private static Comparison<BattleCommandComponent.CardBuffData> <>f__am$cache1; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC644C0 Offset: 0xC644C0 VA: 0xC644C0
	private static Predicate<BattleCommandComponent.CardBuffData> <>f__am$cache2; // 0x28

	// Properties
	public BattleCommandSealStatus SealStatus { get; }
	public bool isSealed { get; }
	public bool isKindOfDontAction { get; }

	// Methods

	// RVA: 0x1039C88 Offset: 0x1039C88 VA: 0x1039C88
	public void .ctor() { }

	// RVA: 0x1039E38 Offset: 0x1039E38 VA: 0x1039E38
	public BattleCommandSealStatus get_SealStatus() { }

	// RVA: 0x1039F10 Offset: 0x1039F10 VA: 0x1039F10
	public bool get_isSealed() { }

	// RVA: 0x103A014 Offset: 0x103A014 VA: 0x103A014
	public bool get_isKindOfDontAction() { }

	// RVA: 0x103A114 Offset: 0x103A114 VA: 0x103A114
	public void Initialize() { }

	// RVA: 0x103A204 Offset: 0x103A204 VA: 0x103A204
	public void setTarget(GameObject target) { }

	// RVA: 0x103A20C Offset: 0x103A20C VA: 0x103A20C
	public void setShader(string shaderName) { }

	// RVA: 0x103A2F8 Offset: 0x103A2F8 VA: 0x103A2F8
	public void setDepth(int basedepth) { }

	// RVA: 0x103A898 Offset: 0x103A898 VA: 0x103A898
	public int getPowerUpDepth() { }

	// RVA: 0x103A938 Offset: 0x103A938 VA: 0x103A938
	public void setPerf(BattlePerformance inPerf) { }

	// RVA: 0x103A940 Offset: 0x103A940 VA: 0x103A940
	public BattleCommandData GetCommandData() { }

	// RVA: 0x103A948 Offset: 0x103A948 VA: 0x103A948
	public void setData(BattleCommandData indata, BattleServantData insvtData, bool isAttack = False, bool isShowBuffIcon = True, bool isTDTypeChangeWindow = False) { }

	// RVA: 0x103C5C8 Offset: 0x103C5C8 VA: 0x103C5C8
	public void setData(BattleServantData svtData, int index) { }

	// RVA: 0x103C954 Offset: 0x103C954 VA: 0x103C954
	public void setAttackCommandData(BattleCommandComponent comp) { }

	// RVA: 0x103CA20 Offset: 0x103CA20 VA: 0x103CA20
	public BattleCommandData getcommandData() { }

	// RVA: 0x103CA28 Offset: 0x103CA28 VA: 0x103CA28
	public void addObject(string name, BattleCommandComponent.ADDOBJECT_TYPE type) { }

	// RVA: 0x103CD50 Offset: 0x103CD50 VA: 0x103CD50
	public void resetAddObject() { }

	// RVA: 0x103CFBC Offset: 0x103CFBC VA: 0x103CFBC
	public void transformSvtFace(BattleServantData svtData) { }

	// RVA: 0x103AE98 Offset: 0x103AE98 VA: 0x103AE98
	public void updateView(bool initFlg = True, bool isAttack = False, bool isShowBuffIcon = True, bool isTDTypeChangeWindow = False, bool isCharaHide = False) { }

	// RVA: 0x103DC64 Offset: 0x103DC64 VA: 0x103DC64
	private UISprite ChoiceUnusableMarkSprite() { }

	// RVA: 0x103DEC4 Offset: 0x103DEC4 VA: 0x103DEC4
	private string getCardTypeSealSpriteName(int commandType) { }

	// RVA: 0x103E340 Offset: 0x103E340 VA: 0x103E340
	public void initView() { }

	// RVA: 0x103DBE0 Offset: 0x103DBE0 VA: 0x103DBE0
	public void InitUnusableMarks() { }

	// RVA: 0x103E344 Offset: 0x103E344 VA: 0x103E344
	public void startMoveFloat() { }

	// RVA: 0x103E640 Offset: 0x103E640 VA: 0x103E640
	public void stopAnimation() { }

	// RVA: 0x103E8B8 Offset: 0x103E8B8 VA: 0x103E8B8
	public void playOpenNobleCard() { }

	// RVA: 0x103EA58 Offset: 0x103EA58 VA: 0x103EA58
	public void SetNobleGaugeEffect(GameObject effect) { }

	// RVA: 0x103EA60 Offset: 0x103EA60 VA: 0x103EA60
	public void ReleaseNobleGaugeEffect() { }

	// RVA: 0x103D2FC Offset: 0x103D2FC VA: 0x103D2FC
	public void setBuffIconList(BattleBuffData buffData) { }

	// RVA: 0x103EB3C Offset: 0x103EB3C VA: 0x103EB3C
	public void addFirstAura(GameObject effect) { }

	// RVA: 0x103EBE4 Offset: 0x103EBE4 VA: 0x103EBE4
	public void stopFirstAura() { }

	// RVA: 0x103ED14 Offset: 0x103ED14 VA: 0x103ED14
	public void setMoveMode() { }

	// RVA: 0x103EE38 Offset: 0x103EE38 VA: 0x103EE38
	public void setSelectStamp(GameObject stamp) { }

	// RVA: 0x103ED38 Offset: 0x103ED38 VA: 0x103ED38
	public void resetSelectStamp() { }

	// RVA: 0x103EEB4 Offset: 0x103EEB4 VA: 0x103EEB4
	public void updateSelectedEffect() { }

	// RVA: 0x103F27C Offset: 0x103F27C VA: 0x103F27C
	public void openCard() { }

	// RVA: 0x103F2C8 Offset: 0x103F2C8 VA: 0x103F2C8
	public void ResetPassStarCount() { }

	// RVA: 0x103F2FC Offset: 0x103F2FC VA: 0x103F2FC
	public int GetPassStarCount() { }

	// RVA: 0x103F39C Offset: 0x103F39C VA: 0x103F39C
	public int getCriticalCount() { }

	// RVA: 0x103F404 Offset: 0x103F404 VA: 0x103F404
	public bool IsMaxCritical() { }

	// RVA: 0x103F448 Offset: 0x103F448 VA: 0x103F448
	public bool IsMaxViewCritical() { }

	// RVA: 0x103F4B0 Offset: 0x103F4B0 VA: 0x103F4B0
	public bool checkCriticalPointValid() { }

	// RVA: 0x103F4E0 Offset: 0x103F4E0 VA: 0x103F4E0
	public void startCountUp() { }

	// RVA: 0x103F634 Offset: 0x103F634 VA: 0x103F634
	public void updateCount(bool isNonAnimation = False) { }

	// RVA: 0x103F8CC Offset: 0x103F8CC VA: 0x103F8CC
	public void SetUntrueCount(int count, bool isInitZero = False) { }

	// RVA: 0x103F9E8 Offset: 0x103F9E8 VA: 0x103F9E8
	private GameObject GetSpawnerObj(GameObject prefab, Transform parent) { }

	// RVA: 0x103FBBC Offset: 0x103FBBC VA: 0x103FBBC
	public void compCriticallabel() { }

	// RVA: 0x103BE40 Offset: 0x103BE40 VA: 0x103BE40
	public void setCriticalObject(bool flg) { }

	// RVA: 0x103FC54 Offset: 0x103FC54 VA: 0x103FC54
	public void addCriticalBuff(GameObject obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD330 Offset: 0xCCD330 VA: 0xCCD330
	// RVA: 0x103FD58 Offset: 0x103FD58 VA: 0x103FD58
	private IEnumerator delayFrame(Action action) { }

	// RVA: 0x103FDD0 Offset: 0x103FDD0 VA: 0x103FDD0
	public bool checkObject() { }

	// RVA: 0x103FDE0 Offset: 0x103FDE0 VA: 0x103FDE0
	public bool checkMark(int mark) { }

	// RVA: 0x103FE00 Offset: 0x103FE00 VA: 0x103FE00
	public int getMarkIndex() { }

	// RVA: 0x103FE18 Offset: 0x103FE18 VA: 0x103FE18
	public bool isTreasureDvc() { }

	// RVA: 0x103FE38 Offset: 0x103FE38 VA: 0x103FE38
	public int getSvtId() { }

	// RVA: 0x103FE64 Offset: 0x103FE64 VA: 0x103FE64
	public int getSvtLimitCount() { }

	// RVA: 0x103FE98 Offset: 0x103FE98 VA: 0x103FE98
	public int getCommandType() { }

	// RVA: 0x103FEC4 Offset: 0x103FEC4 VA: 0x103FEC4
	public int getUniqueID() { }

	// RVA: 0x103FEF0 Offset: 0x103FEF0 VA: 0x103FEF0
	public void setSelect(bool flg) { }

	// RVA: 0x103FEFC Offset: 0x103FEFC VA: 0x103FEFC
	public bool isSelect() { }

	// RVA: 0x103FF04 Offset: 0x103FF04 VA: 0x103FF04
	public void resetComboData() { }

	// RVA: 0x103FFF8 Offset: 0x103FFF8 VA: 0x103FFF8
	public void flashComboType(int index, BattleComboData combo) { }

	// RVA: 0x10406D8 Offset: 0x10406D8 VA: 0x10406D8
	public void flashType(bool flg) { }

	// RVA: 0x10407C0 Offset: 0x10407C0 VA: 0x10407C0
	public void flashComboSvt(int index, BattleComboData combo) { }

	// RVA: 0x1040F78 Offset: 0x1040F78 VA: 0x1040F78
	public void resetCriticalLabel() { }

	// RVA: 0x1040FD4 Offset: 0x1040FD4 VA: 0x1040FD4
	public void attachEffect(string name, int index) { }

	// RVA: 0x10411CC Offset: 0x10411CC VA: 0x10411CC
	public void playAttackEffect(bool flg) { }

	// RVA: 0x1041220 Offset: 0x1041220 VA: 0x1041220
	public void playAddAttackEffect(bool flg) { }

	// RVA: 0x104126C Offset: 0x104126C VA: 0x104126C
	public void playNpAttackEffect(float ftime) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD340 Offset: 0xCCD340 VA: 0xCCD340
	// RVA: 0x1040724 Offset: 0x1040724 VA: 0x1040724
	private IEnumerator fadeoutEffect(bool isTresure = False) { }

	// RVA: 0x1041734 Offset: 0x1041734 VA: 0x1041734
	public void hideOutCard() { }

	// RVA: 0x10419F0 Offset: 0x10419F0 VA: 0x10419F0
	public void OnClickEvent() { }

	// RVA: 0x1041AC4 Offset: 0x1041AC4 VA: 0x1041AC4
	public void OnLongPressEvent(Object obj) { }

	// RVA: 0x103E274 Offset: 0x103E274 VA: 0x103E274
	public void setTouchFlg(bool flg) { }

	// RVA: 0x1041B98 Offset: 0x1041B98 VA: 0x1041B98
	private bool IsValidVoiceType(string voiceTypeId) { }

	// RVA: 0x1041C98 Offset: 0x1041C98 VA: 0x1041C98
	public void selectCard(int targetIndex) { }

	// RVA: 0x1042600 Offset: 0x1042600 VA: 0x1042600
	public void SetCardColor(Color color) { }

	// RVA: 0x103BE78 Offset: 0x103BE78 VA: 0x103BE78
	public void SetCommandCodeActive(Color color, bool isFirst = False) { }

	// RVA: 0x1042AA4 Offset: 0x1042AA4 VA: 0x1042AA4
	public void SetLabelActive(bool active) { }

	// RVA: 0x1042B38 Offset: 0x1042B38 VA: 0x1042B38
	public void resetSelect() { }

	// RVA: 0x1042C9C Offset: 0x1042C9C VA: 0x1042C9C
	public void startComboCard() { }

	// RVA: 0x1040850 Offset: 0x1040850 VA: 0x1040850
	public void flashServant() { }

	// RVA: 0x103ACA8 Offset: 0x103ACA8 VA: 0x103ACA8
	private void DestroyEffectObject1() { }

	// RVA: 0x1042CCC Offset: 0x1042CCC VA: 0x1042CCC
	public void endFashSvt() { }

	// RVA: 0x104003C Offset: 0x104003C VA: 0x104003C
	public void flashTypeCard() { }

	// RVA: 0x1042CD0 Offset: 0x1042CD0 VA: 0x1042CD0
	public void endFashTypeCard() { }

	// RVA: 0x1042DD4 Offset: 0x1042DD4 VA: 0x1042DD4
	public void updateClassMag(BattleServantData targetSvt) { }

	// RVA: 0x10430CC Offset: 0x10430CC VA: 0x10430CC
	public void SetCommandCodeMode(bool isTextureMode) { }

	// RVA: 0x10430D8 Offset: 0x10430D8 VA: 0x10430D8
	public void SetIsInBattle(bool value) { }

	// RVA: 0x10430E4 Offset: 0x10430E4 VA: 0x10430E4
	public void SetCommandCodeView(long userCommandCodeId) { }

	// RVA: 0x103DFB4 Offset: 0x103DFB4 VA: 0x103DFB4
	public void SetCommandCodeView(int commandCodeId) { }

	// RVA: 0x104336C Offset: 0x104336C VA: 0x104336C
	public void SwitchChangeObjPos(bool isUp) { }

	// RVA: 0x104376C Offset: 0x104376C VA: 0x104376C
	public void SetFixedCommandCardBuff(bool active, int turn, int addOrder) { }

	// RVA: 0x1043A6C Offset: 0x1043A6C VA: 0x1043A6C
	public void UpdateFixedCommandCard() { }

	// RVA: 0x1043D2C Offset: 0x1043D2C VA: 0x1043D2C
	public void SetTreasureDeviceTypeChange(bool active, int turn = 0) { }

	// RVA: 0x1043ED4 Offset: 0x1043ED4 VA: 0x1043ED4
	public void SetLockInfo(bool isLock) { }

	// RVA: 0x103C318 Offset: 0x103C318 VA: 0x103C318
	public void SetPowerUpCardValue(int powerUpValue) { }

	// RVA: 0x103C474 Offset: 0x103C474 VA: 0x103C474
	public void SetPowerUpCardIcon(int powerUpValue, AtlasManager.CARD_ICON_TYPE iconType = 2, bool isBright = True) { }

	// RVA: 0x103DD00 Offset: 0x103DD00 VA: 0x103DD00
	protected void SetActiveComponent(Component component, bool value) { }

	// RVA: 0x103DB58 Offset: 0x103DB58 VA: 0x103DB58
	public void UpdateTDTypeChange(bool isForceHide = False) { }

	// RVA: 0x1043F84 Offset: 0x1043F84 VA: 0x1043F84
	public void SetUnusableShortageStarSprite() { }

	// RVA: 0x1044040 Offset: 0x1044040 VA: 0x1044040
	public void SetDonotSleepSprite() { }

	// RVA: 0x10440FC Offset: 0x10440FC VA: 0x10440FC
	public void SetDonotPermanentSleepSprite() { }

	// RVA: 0x103E1A4 Offset: 0x103E1A4 VA: 0x103E1A4
	public void SetCardBuffAlphaAnimFlag(bool active) { }

	// RVA: 0x10441B8 Offset: 0x10441B8 VA: 0x10441B8
	public void SetActiveSpecialCardBuffIcon(bool active) { }

	// RVA: 0x1043788 Offset: 0x1043788 VA: 0x1043788
	private void SetSpecialCommandCardBuffData(BuffList.TYPE buffType, bool active, int turn, int addOrder) { }

	// RVA: 0x10442C8 Offset: 0x10442C8 VA: 0x10442C8
	public void SetCommandCardTypeChange(bool active, int turn, int addOrder) { }

	// RVA: 0x10442E4 Offset: 0x10442E4 VA: 0x10442E4
	public void UpdateCommandCardTypeChange() { }

	// RVA: 0x1044648 Offset: 0x1044648 VA: 0x1044648
	public void ResetCardBuffIconAlphaAnim() { }

	// RVA: 0x10446F4 Offset: 0x10446F4 VA: 0x10446F4
	public void UpdateSpecialCardBuffIconAlpha(float deltaTime) { }

	// RVA: 0x1044A14 Offset: 0x1044A14 VA: 0x1044A14
	public void ChangeSpecialCommandCardBuffIcon() { }

	// RVA: 0x1044B04 Offset: 0x1044B04 VA: 0x1044B04
	public void HidePowerUpValueLabelActive(bool isCommandCardUnderIcon) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD350 Offset: 0xCCD350 VA: 0xCCD350
	// RVA: 0x10449A4 Offset: 0x10449A4 VA: 0x10449A4
	private IEnumerator coroutineUpdateSpecialBuffIcon() { }

	// RVA: 0x1044C10 Offset: 0x1044C10 VA: 0x1044C10
	public void UpdateCommandCardEffect() { }

	// RVA: 0x104189C Offset: 0x104189C VA: 0x104189C
	public void CardEffectSetActive(bool value) { }

	// RVA: 0x1044FA8 Offset: 0x1044FA8 VA: 0x1044FA8
	public void ClearCardEffect() { }

	// RVA: 0x1045144 Offset: 0x1045144 VA: 0x1045144
	public void ChangeCardEffectMaskForInside() { }

	// RVA: 0x1045310 Offset: 0x1045310 VA: 0x1045310
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD360 Offset: 0xCCD360 VA: 0xCCD360
	// RVA: 0x1045398 Offset: 0x1045398 VA: 0x1045398
	private bool <setBuffIconList>m__0(BattleBuffData.BuffData buff) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD370 Offset: 0xCCD370 VA: 0xCCD370
	// RVA: 0x1045414 Offset: 0x1045414 VA: 0x1045414
	private bool <setBuffIconList>m__1(BattleBuffData.BuffData buff) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD380 Offset: 0xCCD380 VA: 0xCCD380
	// RVA: 0x1045480 Offset: 0x1045480 VA: 0x1045480
	private static bool <UpdateFixedCommandCard>m__2(BattleCommandComponent.CardBuffData c) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD390 Offset: 0xCCD390 VA: 0xCCD390
	// RVA: 0x10454B0 Offset: 0x10454B0 VA: 0x10454B0
	private static int <SetSpecialCommandCardBuffData>m__3(BattleCommandComponent.CardBuffData a, BattleCommandComponent.CardBuffData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD3A0 Offset: 0xCCD3A0 VA: 0xCCD3A0
	// RVA: 0x10454F0 Offset: 0x10454F0 VA: 0x10454F0
	private static bool <UpdateCommandCardTypeChange>m__4(BattleCommandComponent.CardBuffData c) { }
}

// Namespace: 
public enum BattleCommandComponent.ADDOBJECT_TYPE // TypeDefIndex: 9008
{
	// Fields
	public int value__; // 0x0
	public const BattleCommandComponent.ADDOBJECT_TYPE ARROW_RESIST = 0;
	public const BattleCommandComponent.ADDOBJECT_TYPE ARROW_WEAK = 1;
	public const BattleCommandComponent.ADDOBJECT_TYPE MAX = 2;
}

// Namespace: 
public enum BattleCommandComponent.EFFECT_OBJ_TYPE // TypeDefIndex: 9009
{
	// Fields
	public int value__; // 0x0
	public const BattleCommandComponent.EFFECT_OBJ_TYPE ICON_FLASH = 0;
	public const BattleCommandComponent.EFFECT_OBJ_TYPE COMMAND_BURN = 1;
	public const BattleCommandComponent.EFFECT_OBJ_TYPE NOBLE_EFFECT = 2;
	public const BattleCommandComponent.EFFECT_OBJ_TYPE COMMAND_UP_DETAIL = 3;
	public const BattleCommandComponent.EFFECT_OBJ_TYPE FIRST_AURA = 4;
	public const BattleCommandComponent.EFFECT_OBJ_TYPE SELECT_MARK = 5;
}

// Namespace: 
public enum BattleCommandComponent.ARROW_POS_TYPE // TypeDefIndex: 9010
{
	// Fields
	public int value__; // 0x0
	public const BattleCommandComponent.ARROW_POS_TYPE NOMAL = 0;
	public const BattleCommandComponent.ARROW_POS_TYPE CODE = 1;
	public const BattleCommandComponent.ARROW_POS_TYPE SUPPORT_CODE = 2;
}

// Namespace: 
public enum BattleCommandComponent.CODE_POS_TYPE // TypeDefIndex: 9011
{
	// Fields
	public int value__; // 0x0
	public const BattleCommandComponent.CODE_POS_TYPE NOMAL = 0;
	public const BattleCommandComponent.CODE_POS_TYPE SUPPORT_CODE = 1;
}

// Namespace: 
public class BattleCommandComponent.CardBuffData // TypeDefIndex: 9012
{
	// Fields
	public BuffList.TYPE buffType; // 0x10
	public int restTurn; // 0x14
	public int addOrder; // 0x18

	// Methods

	// RVA: 0x1044288 Offset: 0x1044288 VA: 0x1044288
	public void .ctor(BuffList.TYPE type, int turn, int order) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43FA4 Offset: 0xC43FA4 VA: 0xC43FA4
private sealed class BattleCommandComponent.<addCriticalBuff>c__AnonStorey3 // TypeDefIndex: 9013
{
	// Fields
	internal GameObject obj; // 0x10
	internal BattleCommandComponent $this; // 0x18

	// Methods

	// RVA: 0x103FD50 Offset: 0x103FD50 VA: 0x103FD50
	public void .ctor() { }

	// RVA: 0x104555C Offset: 0x104555C VA: 0x104555C
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43FB4 Offset: 0xC43FB4 VA: 0xC43FB4
private sealed class BattleCommandComponent.<delayFrame>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9014
{
	// Fields
	internal Action action; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB070 Offset: 0xCDB070 VA: 0xCDB070
	// RVA: 0x103FDC8 Offset: 0x103FDC8 VA: 0x103FDC8
	public void .ctor() { }

	// RVA: 0x1045904 Offset: 0x1045904 VA: 0x1045904 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB080 Offset: 0xCDB080 VA: 0xCDB080
	// RVA: 0x104599C Offset: 0x104599C VA: 0x104599C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB090 Offset: 0xCDB090 VA: 0xCDB090
	// RVA: 0x10459A4 Offset: 0x10459A4 VA: 0x10459A4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB0A0 Offset: 0xCDB0A0 VA: 0xCDB0A0
	// RVA: 0x10459AC Offset: 0x10459AC VA: 0x10459AC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB0B0 Offset: 0xCDB0B0 VA: 0xCDB0B0
	// RVA: 0x10459C0 Offset: 0x10459C0 VA: 0x10459C0 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43FC4 Offset: 0xC43FC4 VA: 0xC43FC4
private sealed class BattleCommandComponent.<fadeoutEffect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9015
{
	// Fields
	internal bool isTresure; // 0x10
	internal BattleCommandComponent $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB0C0 Offset: 0xCDB0C0 VA: 0xCDB0C0
	// RVA: 0x104172C Offset: 0x104172C VA: 0x104172C
	public void .ctor() { }

	// RVA: 0x1045A28 Offset: 0x1045A28 VA: 0x1045A28 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB0D0 Offset: 0xCDB0D0 VA: 0xCDB0D0
	// RVA: 0x1045DF4 Offset: 0x1045DF4 VA: 0x1045DF4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB0E0 Offset: 0xCDB0E0 VA: 0xCDB0E0
	// RVA: 0x1045DFC Offset: 0x1045DFC VA: 0x1045DFC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB0F0 Offset: 0xCDB0F0 VA: 0xCDB0F0
	// RVA: 0x1045E04 Offset: 0x1045E04 VA: 0x1045E04 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB100 Offset: 0xCDB100 VA: 0xCDB100
	// RVA: 0x1045E18 Offset: 0x1045E18 VA: 0x1045E18 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43FD4 Offset: 0xC43FD4 VA: 0xC43FD4
private sealed class BattleCommandComponent.<SetSpecialCommandCardBuffData>c__AnonStorey4 // TypeDefIndex: 9016
{
	// Fields
	internal BuffList.TYPE buffType; // 0x10

	// Methods

	// RVA: 0x1044280 Offset: 0x1044280 VA: 0x1044280
	public void .ctor() { }

	// RVA: 0x1045520 Offset: 0x1045520 VA: 0x1045520
	internal bool <>m__0(BattleCommandComponent.CardBuffData c) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43FE4 Offset: 0xC43FE4 VA: 0xC43FE4
private sealed class BattleCommandComponent.<coroutineUpdateSpecialBuffIcon>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9017
{
	// Fields
	internal BattleCommandComponent $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB110 Offset: 0xCDB110 VA: 0xCDB110
	// RVA: 0x1044C08 Offset: 0x1044C08 VA: 0x1044C08
	public void .ctor() { }

	// RVA: 0x1045654 Offset: 0x1045654 VA: 0x1045654 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB120 Offset: 0xCDB120 VA: 0xCDB120
	// RVA: 0x1045878 Offset: 0x1045878 VA: 0x1045878 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB130 Offset: 0xCDB130 VA: 0xCDB130
	// RVA: 0x1045880 Offset: 0x1045880 VA: 0x1045880 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB140 Offset: 0xCDB140 VA: 0xCDB140
	// RVA: 0x1045888 Offset: 0x1045888 VA: 0x1045888 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB150 Offset: 0xCDB150 VA: 0xCDB150
	// RVA: 0x104589C Offset: 0x104589C VA: 0x104589C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleCommandData // TypeDefIndex: 9018
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC644D0 Offset: 0xC644D0 VA: 0xC644D0
	public int _type; // 0x10
	[PackKeyAttribute] // RVA: 0xC64508 Offset: 0xC64508 VA: 0xC64508
	public int svtId; // 0x14
	[PackKeyAttribute] // RVA: 0xC64540 Offset: 0xC64540 VA: 0xC64540
	public int svtlimit; // 0x18
	[PackKeyAttribute] // RVA: 0xC64578 Offset: 0xC64578 VA: 0xC64578
	public int attri; // 0x1C
	[PackKeyAttribute] // RVA: 0xC645B0 Offset: 0xC645B0 VA: 0xC645B0
	public int follower; // 0x20
	[PackKeyAttribute] // RVA: 0xC645E8 Offset: 0xC645E8 VA: 0xC645E8
	public int _loadsvtLimit; // 0x24
	public static readonly int PASS_STAR_DENOMINATOR; // 0x0
	[PackKeyAttribute] // RVA: 0xC64620 Offset: 0xC64620 VA: 0xC64620
	public int uniqueId; // 0x28
	[PackKeyAttribute] // RVA: 0xC64658 Offset: 0xC64658 VA: 0xC64658
	public int markindex; // 0x2C
	[PackKeyAttribute] // RVA: 0xC64690 Offset: 0xC64690 VA: 0xC64690
	public int treasureDvc; // 0x30
	[PackKeyAttribute] // RVA: 0xC646C8 Offset: 0xC646C8 VA: 0xC646C8
	public bool flgEventJoin; // 0x34
	[PackKeyAttribute] // RVA: 0xC64700 Offset: 0xC64700 VA: 0xC64700
	public int starBonus; // 0x38
	[PackKeyAttribute] // RVA: 0xC64738 Offset: 0xC64738 VA: 0xC64738
	public int starcount; // 0x3C
	private int passStarCount; // 0x40
	private bool critical; // 0x44
	[PackKeyAttribute] // RVA: 0xC64770 Offset: 0xC64770 VA: 0xC64770
	public bool isCriticalMiss; // 0x45
	[PackKeyAttribute] // RVA: 0xC647A8 Offset: 0xC647A8 VA: 0xC647A8
	public long userCommandCodeId; // 0x48
	[PackKeyAttribute] // RVA: 0xC647E0 Offset: 0xC647E0 VA: 0xC647E0
	public int commandCodeId; // 0x50
	[PackKeyAttribute] // RVA: 0xC64818 Offset: 0xC64818 VA: 0xC64818
	public int commandCardParam; // 0x54
	[PackKeyAttribute] // RVA: 0xC64850 Offset: 0xC64850 VA: 0xC64850
	public int servantCardIdsIndex; // 0x58
	[PackKeyAttribute] // RVA: 0xC64888 Offset: 0xC64888 VA: 0xC64888
	public int imageSvtId; // 0x5C
	private BattleCommandData.CriticalDecisionType execCriticalDecisionType; // 0x60
	private int criticalHitValue; // 0x64
	private BattleBuffData battleBuffData; // 0x68
	private int selectedType; // 0x70
	private bool flash; // 0x74
	private bool sameflg; // 0x75
	private int samecount; // 0x78
	private int actionIndex; // 0x7C
	private int addAtk; // 0x80
	private int addCritical; // 0x84
	private int addTdGauge; // 0x88
	private int chainCount; // 0x8C

	// Properties
	public int type { get; set; }
	public int loadSvtLimit { get; set; }
	public int ActionIndex { get; set; }
	public int AddAtk { get; }
	public int AddCritical { get; }
	public int AddTdGauge { get; }
	public int ChainCount { get; set; }

	// Methods

	// RVA: 0x1045E80 Offset: 0x1045E80 VA: 0x1045E80
	public void .ctor() { }

	// RVA: 0x103C804 Offset: 0x103C804 VA: 0x103C804
	public void .ctor(BattleCommand.TYPE type, int svtId, int limitCount, int imageSvtId = 0) { }

	// RVA: 0x1045EA4 Offset: 0x1045EA4 VA: 0x1045EA4
	public void .ctor(BattleCommandData command) { }

	// RVA: 0x103DE54 Offset: 0x103DE54 VA: 0x103DE54
	public int get_type() { }

	// RVA: 0x103AE90 Offset: 0x103AE90 VA: 0x103AE90
	public void set_type(int value) { }

	// RVA: 0x103D2A0 Offset: 0x103D2A0 VA: 0x103D2A0
	public void set_loadSvtLimit(int value) { }

	// RVA: 0x103D2E0 Offset: 0x103D2E0 VA: 0x103D2E0
	public int get_loadSvtLimit() { }

	// RVA: 0x1045F74 Offset: 0x1045F74 VA: 0x1045F74
	public void setFollowerType(Follower.Type type) { }

	// RVA: 0x103DB50 Offset: 0x103DB50 VA: 0x103DB50
	public Follower.Type getFollowerType() { }

	// RVA: 0x103AE80 Offset: 0x103AE80 VA: 0x103AE80
	public bool isTreasureDvc() { }

	// RVA: 0x103DB18 Offset: 0x103DB18 VA: 0x103DB18
	public bool isArts() { }

	// RVA: 0x103DAE0 Offset: 0x103DAE0 VA: 0x103DAE0
	public bool isBuster() { }

	// RVA: 0x103DAFC Offset: 0x103DAFC VA: 0x103DAFC
	public bool isQuick() { }

	// RVA: 0x103DB34 Offset: 0x103DB34 VA: 0x103DB34
	public bool isAddAttack() { }

	// RVA: 0x103D2A8 Offset: 0x103D2A8 VA: 0x103D2A8
	public bool isBlank() { }

	// RVA: 0x103D298 Offset: 0x103D298 VA: 0x103D298
	public int getUniqueId() { }

	// RVA: 0x103E338 Offset: 0x103E338 VA: 0x103E338
	public int getServantId() { }

	// RVA: 0x103D2C4 Offset: 0x103D2C4 VA: 0x103D2C4
	public int GetImageServantId() { }

	// RVA: 0x103FE90 Offset: 0x103FE90 VA: 0x103FE90
	public int getServantLimitCount() { }

	// RVA: 0x10399E0 Offset: 0x10399E0 VA: 0x10399E0
	public int getCommandType() { }

	// RVA: 0x1045F7C Offset: 0x1045F7C VA: 0x1045F7C
	public int getAttri() { }

	// RVA: 0x1045F84 Offset: 0x1045F84 VA: 0x1045F84
	public void setTypeAddAttack() { }

	// RVA: 0x1045F98 Offset: 0x1045F98 VA: 0x1045F98
	public void ClearCommandCode() { }

	// RVA: 0x10399E4 Offset: 0x10399E4 VA: 0x10399E4
	public int get_ActionIndex() { }

	// RVA: 0x1045FAC Offset: 0x1045FAC VA: 0x1045FAC
	public void set_ActionIndex(int value) { }

	// RVA: 0x1045FB4 Offset: 0x1045FB4 VA: 0x1045FB4
	public int get_AddAtk() { }

	// RVA: 0x1045FBC Offset: 0x1045FBC VA: 0x1045FBC
	public int get_AddCritical() { }

	// RVA: 0x1045FC4 Offset: 0x1045FC4 VA: 0x1045FC4
	public int get_AddTdGauge() { }

	// RVA: 0x1045FCC Offset: 0x1045FCC VA: 0x1045FCC
	public int get_ChainCount() { }

	// RVA: 0x1045FD4 Offset: 0x1045FD4 VA: 0x1045FD4
	public void set_ChainCount(int value) { }

	// RVA: 0x1045FDC Offset: 0x1045FDC VA: 0x1045FDC
	public void setCombo(BattleComboData combo, int index) { }

	// RVA: 0x10460C8 Offset: 0x10460C8 VA: 0x10460C8
	public bool isBusterChain() { }

	// RVA: 0x10460F4 Offset: 0x10460F4 VA: 0x10460F4
	public bool isFlash() { }

	// RVA: 0x10460FC Offset: 0x10460FC VA: 0x10460FC
	public bool isPair() { }

	// RVA: 0x104611C Offset: 0x104611C VA: 0x104611C
	public bool isThree() { }

	// RVA: 0x104613C Offset: 0x104613C VA: 0x104613C
	public int[] getIndividualities() { }

	// RVA: 0x1046164 Offset: 0x1046164 VA: 0x1046164
	public bool isSingle() { }

	// RVA: 0x1046190 Offset: 0x1046190 VA: 0x1046190
	public bool isGrand() { }

	// RVA: 0x10461BC Offset: 0x10461BC VA: 0x10461BC
	public bool checkLastAttack() { }

	// RVA: 0x1046210 Offset: 0x1046210 VA: 0x1046210
	public int getChainBonus() { }

	// RVA: 0x1046220 Offset: 0x1046220 VA: 0x1046220
	public bool isCritical() { }

	// RVA: 0x1046228 Offset: 0x1046228 VA: 0x1046228
	public bool checkCriticalRate(int count) { }

	// RVA: 0x1046240 Offset: 0x1046240 VA: 0x1046240
	public bool checkCriticalRate(int rate, int count) { }

	// RVA: 0x103F328 Offset: 0x103F328 VA: 0x103F328
	public int getPassStarCount() { }

	// RVA: 0x103F2F4 Offset: 0x103F2F4 VA: 0x103F2F4
	public void ResetPassStar() { }

	// RVA: 0x1046254 Offset: 0x1046254 VA: 0x1046254
	public void addCriticalPoint(int count) { }

	// RVA: 0x104631C Offset: 0x104631C VA: 0x104631C
	public void removeCriticalPoint(int count) { }

	// RVA: 0x1046330 Offset: 0x1046330 VA: 0x1046330
	public void resetCriticalPoint() { }

	// RVA: 0x103BE20 Offset: 0x103BE20 VA: 0x103BE20
	public int getCriticalPoint() { }

	// RVA: 0x103F438 Offset: 0x103F438 VA: 0x103F438
	public bool checkCriticalMax() { }

	// RVA: 0x1046338 Offset: 0x1046338 VA: 0x1046338
	public bool checkCriticalZero() { }

	// RVA: 0x1042A94 Offset: 0x1042A94 VA: 0x1042A94
	public bool IsEnableCommandCode() { }

	// RVA: 0x103C8E4 Offset: 0x103C8E4 VA: 0x103C8E4
	public void SetCommandCardParam(int[] commandCodeParams, int index) { }

	// RVA: 0x1046348 Offset: 0x1046348 VA: 0x1046348
