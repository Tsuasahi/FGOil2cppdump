{
	// Fields
	public int value__; // 0x0
	public const UIProgressBar.FillDirection LeftToRight = 0;
	public const UIProgressBar.FillDirection RightToLeft = 1;
	public const UIProgressBar.FillDirection BottomToTop = 2;
	public const UIProgressBar.FillDirection TopToBottom = 3;
}

// Namespace: 
public sealed class UIProgressBar.OnDragFinished : MulticastDelegate // TypeDefIndex: 12099
{
	// Methods

	// RVA: 0x1C52050 Offset: 0x1C52050 VA: 0x1C52050
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1C52060 Offset: 0x1C52060 VA: 0x1C52060 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1C52260 Offset: 0x1C52260 VA: 0x1C52260 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1C52294 Offset: 0x1C52294 VA: 0x1C52294 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C408 Offset: 0xC2C408 VA: 0xC2C408
public class UISavedOption : MonoBehaviour // TypeDefIndex: 12100
{
	// Fields
	public string keyName; // 0x18
	private UIPopupList mList; // 0x20
	private UIToggle mCheck; // 0x28
	private UIProgressBar mSlider; // 0x30

	// Properties
	private string key { get; }

	// Methods

	// RVA: 0x1C55234 Offset: 0x1C55234 VA: 0x1C55234
	public void .ctor() { }

	// RVA: 0x1C5523C Offset: 0x1C5523C VA: 0x1C5523C
	private string get_key() { }

	// RVA: 0x1C5530C Offset: 0x1C5530C VA: 0x1C5530C
	private void Awake() { }

	// RVA: 0x1C55394 Offset: 0x1C55394 VA: 0x1C55394
	private void OnEnable() { }

	// RVA: 0x1C55824 Offset: 0x1C55824 VA: 0x1C55824
	private void OnDisable() { }

	// RVA: 0x1C55ABC Offset: 0x1C55ABC VA: 0x1C55ABC
	public void SaveSelection() { }

	// RVA: 0x1C55B34 Offset: 0x1C55B34 VA: 0x1C55B34
	public void SaveState() { }

	// RVA: 0x1C55BD4 Offset: 0x1C55BD4 VA: 0x1C55BD4
	public void SaveProgress() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C440 Offset: 0xC2C440 VA: 0xC2C440
[AddComponentMenu] // RVA: 0xC2C440 Offset: 0xC2C440 VA: 0xC2C440
public class UIScrollBar : UISlider // TypeDefIndex: 12101
{
	// Fields
	[HideInInspector] // RVA: 0xC84BE4 Offset: 0xC84BE4 VA: 0xC84BE4
	[SerializeField] // RVA: 0xC84BE4 Offset: 0xC84BE4 VA: 0xC84BE4
	protected float mSize; // 0x7C
	[HideInInspector] // RVA: 0xC84C1C Offset: 0xC84C1C VA: 0xC84C1C
	[SerializeField] // RVA: 0xC84C1C Offset: 0xC84C1C VA: 0xC84C1C
	private float mScroll; // 0x80
	[HideInInspector] // RVA: 0xC84C54 Offset: 0xC84C54 VA: 0xC84C54
	[SerializeField] // RVA: 0xC84C54 Offset: 0xC84C54 VA: 0xC84C54
	private UIScrollBar.Direction mDir; // 0x84

	// Properties
	[ObsoleteAttribute] // RVA: 0xCDEBD0 Offset: 0xCDEBD0 VA: 0xCDEBD0
	public float scrollValue { get; set; }
	public float barSize { get; set; }

	// Methods

	// RVA: 0x181CF04 Offset: 0x181CF04 VA: 0x181CF04
	public void .ctor() { }

	// RVA: 0x181CF3C Offset: 0x181CF3C VA: 0x181CF3C
	public float get_scrollValue() { }

	// RVA: 0x181CF44 Offset: 0x181CF44 VA: 0x181CF44
	public void set_scrollValue(float value) { }

	// RVA: 0x181CF4C Offset: 0x181CF4C VA: 0x181CF4C
	public float get_barSize() { }

	// RVA: 0x181CF54 Offset: 0x181CF54 VA: 0x181CF54
	public void set_barSize(float value) { }

	// RVA: 0x181D0D4 Offset: 0x181D0D4 VA: 0x181D0D4 Slot: 4
	protected override void Upgrade() { }

	// RVA: 0x181D108 Offset: 0x181D108 VA: 0x181D108 Slot: 5
	protected override void OnStart() { }

	// RVA: 0x181D6EC Offset: 0x181D6EC VA: 0x181D6EC Slot: 6
	protected override float LocalToValue(Vector2 localPos) { }

	// RVA: 0x181DA1C Offset: 0x181DA1C VA: 0x181DA1C Slot: 7
	public override void ForceUpdate() { }

	// RVA: 0x181DD28 Offset: 0x181DD28 VA: 0x181DD28
	protected void OnPressBackground(GameObject go, bool isPressed) { }

	// RVA: 0x181DEBC Offset: 0x181DEBC VA: 0x181DEBC
	protected void OnDragBackground(GameObject go, Vector2 delta) { }

	// RVA: 0x181E018 Offset: 0x181E018 VA: 0x181E018
	protected void OnPressForeground(GameObject go, bool isPressed) { }

	// RVA: 0x181E220 Offset: 0x181E220 VA: 0x181E220
	protected void OnDragForeground(GameObject go, Vector2 delta) { }
}

// Namespace: 
private enum UIScrollBar.Direction // TypeDefIndex: 12102
{
	// Fields
	public int value__; // 0x0
	public const UIScrollBar.Direction Horizontal = 0;
	public const UIScrollBar.Direction Vertical = 1;
	public const UIScrollBar.Direction Upgraded = 2;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C48C Offset: 0xC2C48C VA: 0xC2C48C
[RequireComponent] // RVA: 0xC2C48C Offset: 0xC2C48C VA: 0xC2C48C
[AddComponentMenu] // RVA: 0xC2C48C Offset: 0xC2C48C VA: 0xC2C48C
public class UIScrollView : MonoBehaviour // TypeDefIndex: 12103
{
	// Fields
	public static BetterList<UIScrollView> list; // 0x0
	public UIScrollView.Movement movement; // 0x18
	public UIScrollView.DragEffect dragEffect; // 0x1C
	public bool restrictWithinPanel; // 0x20
	public bool disableDragIfFits; // 0x21
	public bool smoothDragStart; // 0x22
	public bool iOSDragEmulation; // 0x23
	public float scrollWheelFactor; // 0x24
	public float momentumAmount; // 0x28
	public UIProgressBar horizontalScrollBar; // 0x30
	public UIProgressBar verticalScrollBar; // 0x38
	public UIScrollView.ShowCondition showScrollBars; // 0x40
	public Vector2 customMovement; // 0x44
	public UIWidget.Pivot contentPivot; // 0x4C
	public UIScrollView.OnDragNotification onDragStarted; // 0x50
	public UIScrollView.OnDragNotification onDragFinished; // 0x58
	public UIScrollView.OnDragNotification onMomentumMove; // 0x60
	public UIScrollView.OnDragNotification onStoppedMoving; // 0x68
	[HideInInspector] // RVA: 0xC84C8C Offset: 0xC84C8C VA: 0xC84C8C
	[SerializeField] // RVA: 0xC84C8C Offset: 0xC84C8C VA: 0xC84C8C
	private Vector3 scale; // 0x70
	[SerializeField] // RVA: 0xC84CC4 Offset: 0xC84CC4 VA: 0xC84CC4
	[HideInInspector] // RVA: 0xC84CC4 Offset: 0xC84CC4 VA: 0xC84CC4
	private Vector2 relativePositionOnReset; // 0x7C
	protected Transform mTrans; // 0x88
	protected UIPanel mPanel; // 0x90
	protected Plane mPlane; // 0x98
	protected Vector3 mLastPos; // 0xA8
	protected bool mPressed; // 0xB4
	protected Vector3 mMomentum; // 0xB8
	protected float mScroll; // 0xC4
	protected Bounds mBounds; // 0xC8
	protected bool mCalculatedBounds; // 0xE0
	protected bool mShouldMove; // 0xE1
	protected bool mIgnoreCallbacks; // 0xE2
	protected int mDragID; // 0xE4
	protected Vector2 mDragStartOffset; // 0xE8
	protected bool mDragStarted; // 0xF0
	private bool mStarted; // 0xF1
	[HideInInspector] // RVA: 0xC84CFC Offset: 0xC84CFC VA: 0xC84CFC
	public UICenterOnChild centerOnChild; // 0xF8

	// Properties
	public UIPanel panel { get; }
	public bool isDragging { get; }
	public virtual Bounds bounds { get; }
	public bool canMoveHorizontally { get; }
	public bool canMoveVertically { get; }
	public virtual bool shouldMoveHorizontally { get; }
	public virtual bool shouldMoveVertically { get; }
	protected virtual bool shouldMove { get; }
	public Vector3 currentMomentum { get; set; }

	// Methods

	// RVA: 0x181E390 Offset: 0x181E390 VA: 0x181E390
	public void .ctor() { }

	// RVA: 0x181E4D8 Offset: 0x181E4D8 VA: 0x181E4D8
	public UIPanel get_panel() { }

	// RVA: 0x181E4E0 Offset: 0x181E4E0 VA: 0x181E4E0
	public bool get_isDragging() { }

	// RVA: 0x181E500 Offset: 0x181E500 VA: 0x181E500 Slot: 4
	public virtual Bounds get_bounds() { }

	// RVA: 0x181E584 Offset: 0x181E584 VA: 0x181E584
	public bool get_canMoveHorizontally() { }

	// RVA: 0x181E5BC Offset: 0x181E5BC VA: 0x181E5BC
	public bool get_canMoveVertically() { }

	// RVA: 0x181E5F4 Offset: 0x181E5F4 VA: 0x181E5F4 Slot: 5
	public virtual bool get_shouldMoveHorizontally() { }

	// RVA: 0x181E71C Offset: 0x181E71C VA: 0x181E71C Slot: 6
	public virtual bool get_shouldMoveVertically() { }

	// RVA: 0x181E844 Offset: 0x181E844 VA: 0x181E844 Slot: 7
	protected virtual bool get_shouldMove() { }

	// RVA: 0x181EA4C Offset: 0x181EA4C VA: 0x181EA4C
	public Vector3 get_currentMomentum() { }

	// RVA: 0x181EA58 Offset: 0x181EA58 VA: 0x181EA58
	public void set_currentMomentum(Vector3 value) { }

	// RVA: 0x181EA6C Offset: 0x181EA6C VA: 0x181EA6C
	private void Awake() { }

	// RVA: 0x181EC9C Offset: 0x181EC9C VA: 0x181EC9C
	private void OnEnable() { }

	// RVA: 0x181EFA0 Offset: 0x181EFA0 VA: 0x181EFA0
	private void Start() { }

	// RVA: 0x181ED50 Offset: 0x181ED50 VA: 0x181ED50
	private void CheckScrollbars() { }

	// RVA: 0x181EFE0 Offset: 0x181EFE0 VA: 0x181EFE0
	private void OnDisable() { }

	// RVA: 0x181F06C Offset: 0x181F06C VA: 0x181F06C
	public bool RestrictWithinBounds(bool instant) { }

	// RVA: 0x181F07C Offset: 0x181F07C VA: 0x181F07C
	public bool RestrictWithinBounds(bool instant, bool horizontal, bool vertical) { }

	// RVA: 0x181F4A0 Offset: 0x181F4A0 VA: 0x181F4A0
	public void DisableSpring() { }

	// RVA: 0x181F554 Offset: 0x181F554 VA: 0x181F554
	public void UpdateScrollbars() { }

	// RVA: 0x181F564 Offset: 0x181F564 VA: 0x181F564 Slot: 8
	public virtual void UpdateScrollbars(bool recalculateBounds) { }

	// RVA: 0x181FA60 Offset: 0x181FA60 VA: 0x181FA60
	protected void UpdateScrollbars(UIProgressBar slider, float contentMin, float contentMax, float contentSize, float viewSize, bool inverted) { }

	// RVA: 0x181FD2C Offset: 0x181FD2C VA: 0x181FD2C Slot: 9
	public virtual void SetDragAmount(float x, float y, bool updateScrollbars) { }

	// RVA: 0x1820178 Offset: 0x1820178 VA: 0x1820178
	public void InvalidateBounds() { }

	[ContextMenu] // RVA: 0xCD67C0 Offset: 0xCD67C0 VA: 0xCD67C0
	// RVA: 0x1820180 Offset: 0x1820180 VA: 0x1820180
	public void ResetPosition() { }

	// RVA: 0x1820258 Offset: 0x1820258 VA: 0x1820258
	public void UpdatePosition() { }

	// RVA: 0x1820414 Offset: 0x1820414 VA: 0x1820414
	public void OnScrollBar() { }

	// RVA: 0x1820540 Offset: 0x1820540 VA: 0x1820540 Slot: 10
	public virtual void MoveRelative(Vector3 relative) { }

	// RVA: 0x1820694 Offset: 0x1820694 VA: 0x1820694
	public void MoveAbsolute(Vector3 absolute) { }

	// RVA: 0x18207B4 Offset: 0x18207B4 VA: 0x18207B4
	public void Press(bool pressed) { }

	// RVA: 0x182108C Offset: 0x182108C VA: 0x182108C
	public void Drag() { }

	// RVA: 0x1821880 Offset: 0x1821880 VA: 0x1821880
	public void Scroll(float delta) { }

	// RVA: 0x18219C4 Offset: 0x18219C4 VA: 0x18219C4
	private void Update() { }

	// RVA: 0x18219EC Offset: 0x18219EC VA: 0x18219EC
	public bool IsLimitOverPosition() { }

	// RVA: 0x1821B58 Offset: 0x1821B58 VA: 0x1821B58
	public bool IsLimitOverPosition2() { }

	// RVA: 0x1821CC4 Offset: 0x1821CC4 VA: 0x1821CC4
	public bool IsLimitOverPosition2(Vector3 offset) { }

	// RVA: 0x1821EA4 Offset: 0x1821EA4 VA: 0x1821EA4
	private void LateUpdate() { }

	// RVA: 0x18225C8 Offset: 0x18225C8 VA: 0x18225C8
	private static void .cctor() { }
}

// Namespace: 
public enum UIScrollView.Movement // TypeDefIndex: 12104
{
	// Fields
	public int value__; // 0x0
	public const UIScrollView.Movement Horizontal = 0;
	public const UIScrollView.Movement Vertical = 1;
	public const UIScrollView.Movement Unrestricted = 2;
	public const UIScrollView.Movement Custom = 3;
}

// Namespace: 
public enum UIScrollView.DragEffect // TypeDefIndex: 12105
{
	// Fields
	public int value__; // 0x0
	public const UIScrollView.DragEffect None = 0;
	public const UIScrollView.DragEffect Momentum = 1;
	public const UIScrollView.DragEffect MomentumAndSpring = 2;
}

// Namespace: 
public enum UIScrollView.ShowCondition // TypeDefIndex: 12106
{
	// Fields
	public int value__; // 0x0
	public const UIScrollView.ShowCondition Always = 0;
	public const UIScrollView.ShowCondition OnlyIfNeeded = 1;
	public const UIScrollView.ShowCondition WhenDragging = 2;
}

// Namespace: 
public sealed class UIScrollView.OnDragNotification : MulticastDelegate // TypeDefIndex: 12107
{
	// Methods

	// RVA: 0x182263C Offset: 0x182263C VA: 0x182263C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1820E8C Offset: 0x1820E8C VA: 0x1820E8C Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x182264C Offset: 0x182264C VA: 0x182264C Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1822680 Offset: 0x1822680 VA: 0x1822680 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C524 Offset: 0xC2C524 VA: 0xC2C524
[AddComponentMenu] // RVA: 0xC2C524 Offset: 0xC2C524 VA: 0xC2C524
public class UISlider : UIProgressBar // TypeDefIndex: 12108
{
	// Fields
	[HideInInspector] // RVA: 0xC84D0C Offset: 0xC84D0C VA: 0xC84D0C
	[SerializeField] // RVA: 0xC84D0C Offset: 0xC84D0C VA: 0xC84D0C
	private Transform foreground; // 0x68
	[HideInInspector] // RVA: 0xC84D44 Offset: 0xC84D44 VA: 0xC84D44
	[SerializeField] // RVA: 0xC84D44 Offset: 0xC84D44 VA: 0xC84D44
	private float rawValue; // 0x70
	[HideInInspector] // RVA: 0xC84D7C Offset: 0xC84D7C VA: 0xC84D7C
	[SerializeField] // RVA: 0xC84D7C Offset: 0xC84D7C VA: 0xC84D7C
	private UISlider.Direction direction; // 0x74
	[HideInInspector] // RVA: 0xC84DB4 Offset: 0xC84DB4 VA: 0xC84DB4
	[SerializeField] // RVA: 0xC84DB4 Offset: 0xC84DB4 VA: 0xC84DB4
	protected bool mInverted; // 0x78

	// Properties
	[ObsoleteAttribute] // RVA: 0xCDEC08 Offset: 0xCDEC08 VA: 0xCDEC08
	public float sliderValue { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDEC40 Offset: 0xCDEC40 VA: 0xCDEC40
	public bool inverted { get; set; }

	// Methods

	// RVA: 0x181CF28 Offset: 0x181CF28 VA: 0x181CF28
	public void .ctor() { }

	// RVA: 0x18231B8 Offset: 0x18231B8 VA: 0x18231B8
	public float get_sliderValue() { }

	// RVA: 0x18231C0 Offset: 0x18231C0 VA: 0x18231C0
	public void set_sliderValue(float value) { }

	// RVA: 0x18231C8 Offset: 0x18231C8 VA: 0x18231C8
	public bool get_inverted() { }

	// RVA: 0x18231D0 Offset: 0x18231D0 VA: 0x18231D0
	public void set_inverted(bool value) { }

	// RVA: 0x18231D4 Offset: 0x18231D4 VA: 0x18231D4 Slot: 4
	protected override void Upgrade() { }

	// RVA: 0x18232AC Offset: 0x18232AC VA: 0x18232AC Slot: 5
	protected override void OnStart() { }

	// RVA: 0x181DDD8 Offset: 0x181DDD8 VA: 0x181DDD8
	protected void OnPressBackground(GameObject go, bool isPressed) { }

	// RVA: 0x181DF58 Offset: 0x181DF58 VA: 0x181DF58
	protected void OnDragBackground(GameObject go, Vector2 delta) { }

	// RVA: 0x181E0C8 Offset: 0x181E0C8 VA: 0x181E0C8
	protected void OnPressForeground(GameObject go, bool isPressed) { }

	// RVA: 0x181E2BC Offset: 0x181E2BC VA: 0x181E2BC
	protected void OnDragForeground(GameObject go, Vector2 delta) { }

	// RVA: 0x1823894 Offset: 0x1823894 VA: 0x1823894
	protected void OnKey(KeyCode key) { }
}

// Namespace: 
private enum UISlider.Direction // TypeDefIndex: 12109
{
	// Fields
	public int value__; // 0x0
	public const UISlider.Direction Horizontal = 0;
	public const UISlider.Direction Vertical = 1;
	public const UISlider.Direction Upgraded = 2;
}

// Namespace: 
[RequireComponent] // RVA: 0xC2C570 Offset: 0xC2C570 VA: 0xC2C570
[AddComponentMenu] // RVA: 0xC2C570 Offset: 0xC2C570 VA: 0xC2C570
public class UISoundVolume : MonoBehaviour // TypeDefIndex: 12110
{
	// Methods

	// RVA: 0x18256C4 Offset: 0x18256C4 VA: 0x18256C4
	public void .ctor() { }

	// RVA: 0x18256CC Offset: 0x18256CC VA: 0x18256CC
	private void Awake() { }

	// RVA: 0x18257F0 Offset: 0x18257F0 VA: 0x18257F0
	private void OnChange() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C5F8 Offset: 0xC2C5F8 VA: 0xC2C5F8
public class UITable : UIWidgetContainer // TypeDefIndex: 12111
{
	// Fields
	public int columns; // 0x18
	public UITable.Direction direction; // 0x1C
	public UITable.Sorting sorting; // 0x20
	public UIWidget.Pivot pivot; // 0x24
	public UIWidget.Pivot cellAlignment; // 0x28
	public bool hideInactive; // 0x2C
	public bool keepWithinPanel; // 0x2D
	public Vector2 padding; // 0x30
	public UITable.OnReposition onReposition; // 0x38
	public Comparison<Transform> onCustomSort; // 0x40
	protected UIPanel mPanel; // 0x48
	protected bool mInitDone; // 0x50
	protected bool mReposition; // 0x51
	[CompilerGeneratedAttribute] // RVA: 0xC84DEC Offset: 0xC84DEC VA: 0xC84DEC
	private static Comparison<Transform> <>f__mg$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC84DFC Offset: 0xC84DFC VA: 0xC84DFC
	private static Comparison<Transform> <>f__mg$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC84E0C Offset: 0xC84E0C VA: 0xC84E0C
	private static Comparison<Transform> <>f__mg$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC84E1C Offset: 0xC84E1C VA: 0xC84E1C
	private static Comparison<Transform> <>f__mg$cache3; // 0x18

	// Properties
	public bool repositionNow { set; }

	// Methods

	// RVA: 0x1AE70C0 Offset: 0x1AE70C0 VA: 0x1AE70C0
	public void .ctor() { }

	// RVA: 0x1AE7144 Offset: 0x1AE7144 VA: 0x1AE7144
	public void set_repositionNow(bool value) { }

	// RVA: 0x1AE7160 Offset: 0x1AE7160 VA: 0x1AE7160
	public List<Transform> GetChildList() { }

	// RVA: 0x1AE74AC Offset: 0x1AE74AC VA: 0x1AE74AC Slot: 4
	protected virtual void Sort(List<Transform> list) { }

	// RVA: 0x1AE7574 Offset: 0x1AE7574 VA: 0x1AE7574 Slot: 5
	protected virtual void Start() { }

	// RVA: 0x1AE75B8 Offset: 0x1AE75B8 VA: 0x1AE75B8 Slot: 6
	protected virtual void Init() { }

	// RVA: 0x1AE764C Offset: 0x1AE764C VA: 0x1AE764C Slot: 7
	protected virtual void LateUpdate() { }

	// RVA: 0x1AE768C Offset: 0x1AE768C VA: 0x1AE768C
	private void OnValidate() { }

	// RVA: 0x1AE7720 Offset: 0x1AE7720 VA: 0x1AE7720
	protected void RepositionVariableSize(List<Transform> children) { }

	[ContextMenu] // RVA: 0xCD67F8 Offset: 0xCD67F8 VA: 0xCD67F8
	// RVA: 0x1AE81B0 Offset: 0x1AE81B0 VA: 0x1AE81B0 Slot: 8
	public virtual void Reposition() { }
}

// Namespace: 
public sealed class UITable.OnReposition : MulticastDelegate // TypeDefIndex: 12112
{
	// Methods

	// RVA: 0x1AE8594 Offset: 0x1AE8594 VA: 0x1AE8594
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1AE8394 Offset: 0x1AE8394 VA: 0x1AE8394 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1AE85A4 Offset: 0x1AE85A4 VA: 0x1AE85A4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1AE85D8 Offset: 0x1AE85D8 VA: 0x1AE85D8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum UITable.Direction // TypeDefIndex: 12113
{
	// Fields
	public int value__; // 0x0
	public const UITable.Direction Down = 0;
	public const UITable.Direction Up = 1;
}

// Namespace: 
public enum UITable.Sorting // TypeDefIndex: 12114
{
	// Fields
	public int value__; // 0x0
	public const UITable.Sorting None = 0;
	public const UITable.Sorting Alphabetic = 1;
	public const UITable.Sorting Horizontal = 2;
	public const UITable.Sorting Vertical = 3;
	public const UITable.Sorting Custom = 4;
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C630 Offset: 0xC2C630 VA: 0xC2C630
[AddComponentMenu] // RVA: 0xC2C630 Offset: 0xC2C630 VA: 0xC2C630
public class UIToggle : UIWidgetContainer // TypeDefIndex: 12115
{
	// Fields
	public static BetterList<UIToggle> list; // 0x0
	public static UIToggle current; // 0x8
	public int group; // 0x18
	public UIWidget activeSprite; // 0x20
	public Animation activeAnimation; // 0x28
	public bool startsActive; // 0x30
	public bool instantTween; // 0x31
	public bool optionCanBeNone; // 0x32
	public List<EventDelegate> onChange; // 0x38
	public UIToggle.Validate validator; // 0x40
	[HideInInspector] // RVA: 0xC84E2C Offset: 0xC84E2C VA: 0xC84E2C
	[SerializeField] // RVA: 0xC84E2C Offset: 0xC84E2C VA: 0xC84E2C
	private UISprite checkSprite; // 0x48
	[HideInInspector] // RVA: 0xC84E64 Offset: 0xC84E64 VA: 0xC84E64
	[SerializeField] // RVA: 0xC84E64 Offset: 0xC84E64 VA: 0xC84E64
	private Animation checkAnimation; // 0x50
	[HideInInspector] // RVA: 0xC84E9C Offset: 0xC84E9C VA: 0xC84E9C
	[SerializeField] // RVA: 0xC84E9C Offset: 0xC84E9C VA: 0xC84E9C
	private GameObject eventReceiver; // 0x58
	[HideInInspector] // RVA: 0xC84ED4 Offset: 0xC84ED4 VA: 0xC84ED4
	[SerializeField] // RVA: 0xC84ED4 Offset: 0xC84ED4 VA: 0xC84ED4
	private string functionName; // 0x60
	[HideInInspector] // RVA: 0xC84F0C Offset: 0xC84F0C VA: 0xC84F0C
	[SerializeField] // RVA: 0xC84F0C Offset: 0xC84F0C VA: 0xC84F0C
	private bool startsChecked; // 0x68
	private bool mIsActive; // 0x69
	private bool mStarted; // 0x6A

	// Properties
	public bool value { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDEC78 Offset: 0xCDEC78 VA: 0xCDEC78
	public bool isChecked { get; set; }

	// Methods

	// RVA: 0x1AEB5FC Offset: 0x1AEB5FC VA: 0x1AEB5FC
	public void .ctor() { }

	// RVA: 0x1AEB684 Offset: 0x1AEB684 VA: 0x1AEB684
	public bool get_value() { }

	// RVA: 0x1AEB6A0 Offset: 0x1AEB6A0 VA: 0x1AEB6A0
	public void set_value(bool value) { }

	// RVA: 0x1AEBD04 Offset: 0x1AEBD04 VA: 0x1AEBD04
	public bool get_isChecked() { }

	// RVA: 0x1AEBD20 Offset: 0x1AEBD20 VA: 0x1AEBD20
	public void set_isChecked(bool value) { }

	// RVA: 0x1AEBD28 Offset: 0x1AEBD28 VA: 0x1AEBD28
	public static UIToggle GetActiveToggle(int group) { }

	// RVA: 0x1AEBE74 Offset: 0x1AEBE74 VA: 0x1AEBE74
	private void OnEnable() { }

	// RVA: 0x1AEBF00 Offset: 0x1AEBF00 VA: 0x1AEBF00
	private void OnDisable() { }

	// RVA: 0x1AEBF8C Offset: 0x1AEBF8C VA: 0x1AEBF8C
	private void Start() { }

	// RVA: 0x1AEC1B4 Offset: 0x1AEC1B4 VA: 0x1AEC1B4
	private void OnClick() { }

	// RVA: 0x1AEB6D4 Offset: 0x1AEB6D4 VA: 0x1AEB6D4
	public void Set(bool state) { }

	// RVA: 0x1AEC43C Offset: 0x1AEC43C VA: 0x1AEC43C
	private static void .cctor() { }
}

// Namespace: 
public sealed class UIToggle.Validate : MulticastDelegate // TypeDefIndex: 12116
{
	// Methods

	// RVA: 0x1AEC4B0 Offset: 0x1AEC4B0 VA: 0x1AEC4B0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1AEC20C Offset: 0x1AEC20C VA: 0x1AEC20C Slot: 11
	public virtual bool Invoke(bool choice) { }

	// RVA: 0x1AEC4C0 Offset: 0x1AEC4C0 VA: 0x1AEC4C0 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool choice, AsyncCallback callback, object object) { }

	// RVA: 0x1AEC550 Offset: 0x1AEC550 VA: 0x1AEC550 Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0xC2C67C Offset: 0xC2C67C VA: 0xC2C67C
[RequireComponent] // RVA: 0xC2C67C Offset: 0xC2C67C VA: 0xC2C67C
[AddComponentMenu] // RVA: 0xC2C67C Offset: 0xC2C67C VA: 0xC2C67C
public class UIToggledComponents : MonoBehaviour // TypeDefIndex: 12117
{
	// Fields
	public List<MonoBehaviour> activate; // 0x18
	public List<MonoBehaviour> deactivate; // 0x20
	[HideInInspector] // RVA: 0xC84F44 Offset: 0xC84F44 VA: 0xC84F44
	[SerializeField] // RVA: 0xC84F44 Offset: 0xC84F44 VA: 0xC84F44
	private MonoBehaviour target; // 0x28
	[HideInInspector] // RVA: 0xC84F7C Offset: 0xC84F7C VA: 0xC84F7C
	[SerializeField] // RVA: 0xC84F7C Offset: 0xC84F7C VA: 0xC84F7C
	private bool inverse; // 0x30

	// Methods

	// RVA: 0x1AEC58C Offset: 0x1AEC58C VA: 0x1AEC58C
	public void .ctor() { }

	// RVA: 0x1AEC594 Offset: 0x1AEC594 VA: 0x1AEC594
	private void Awake() { }

	// RVA: 0x1AEC71C Offset: 0x1AEC71C VA: 0x1AEC71C
	public void Toggle() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C714 Offset: 0xC2C714 VA: 0xC2C714
public class UIToggledObjects : MonoBehaviour // TypeDefIndex: 12118
{
	// Fields
	public List<GameObject> activate; // 0x18
	public List<GameObject> deactivate; // 0x20
	[HideInInspector] // RVA: 0xC84FB4 Offset: 0xC84FB4 VA: 0xC84FB4
	[SerializeField] // RVA: 0xC84FB4 Offset: 0xC84FB4 VA: 0xC84FB4
	private GameObject target; // 0x28
	[HideInInspector] // RVA: 0xC84FEC Offset: 0xC84FEC VA: 0xC84FEC
	[SerializeField] // RVA: 0xC84FEC Offset: 0xC84FEC VA: 0xC84FEC
	private bool inverse; // 0x30

	// Methods

	// RVA: 0x1AEC91C Offset: 0x1AEC91C VA: 0x1AEC91C
	public void .ctor() { }

	// RVA: 0x1AEC924 Offset: 0x1AEC924 VA: 0x1AEC924
	private void Awake() { }

	// RVA: 0x1AECAAC Offset: 0x1AECAAC VA: 0x1AECAAC
	public void Toggle() { }

	// RVA: 0x1AECC3C Offset: 0x1AECC3C VA: 0x1AECC3C
	private void Set(GameObject go, bool state) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C74C Offset: 0xC2C74C VA: 0xC2C74C
public class UIWidgetContainer : MonoBehaviour // TypeDefIndex: 12119
{
	// Methods

	// RVA: 0x1AE713C Offset: 0x1AE713C VA: 0x1AE713C
	public void .ctor() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C784 Offset: 0xC2C784 VA: 0xC2C784
public class UIWrapContent : MonoBehaviour // TypeDefIndex: 12120
{
	// Fields
	public int itemSize; // 0x18
	public bool cullContent; // 0x1C
	public int minIndex; // 0x20
	public int maxIndex; // 0x24
	public UIWrapContent.OnInitializeItem onInitializeItem; // 0x28
	private Transform mTrans; // 0x30
	private UIPanel mPanel; // 0x38
	private UIScrollView mScroll; // 0x40
	private bool mHorizontal; // 0x48
	private bool mFirstTime; // 0x49
	private List<Transform> mChildren; // 0x50
	public UIWrapContent.CallbackFunc callbackFunc; // 0x58
	protected static readonly float MOVE_TIME; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC85024 Offset: 0xC85024 VA: 0xC85024
	private static Comparison<Transform> <>f__mg$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC85034 Offset: 0xC85034 VA: 0xC85034
	private static Comparison<Transform> <>f__mg$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC85044 Offset: 0xC85044 VA: 0xC85044
	private static Comparison<Transform> <>f__mg$cache2; // 0x18

	// Methods

	// RVA: 0x1AF9D70 Offset: 0x1AF9D70 VA: 0x1AF9D70
	public void .ctor() { }

	// RVA: 0x1AF9DF4 Offset: 0x1AF9DF4 VA: 0x1AF9DF4 Slot: 4
	protected virtual void Start() { }

	// RVA: 0x1AFA9C4 Offset: 0x1AFA9C4 VA: 0x1AFA9C4 Slot: 5
	protected virtual void OnMove(UIPanel panel) { }

	[ContextMenu] // RVA: 0xCD6830 Offset: 0xCD6830 VA: 0xCD6830
	// RVA: 0x1AF9EEC Offset: 0x1AF9EEC VA: 0x1AF9EEC
	public void SortBasedOnScrollMovement() { }

	[ContextMenu] // RVA: 0xCD6868 Offset: 0xCD6868 VA: 0xCD6868
	// RVA: 0x1AFAC74 Offset: 0x1AFAC74 VA: 0x1AFAC74
	public void SortAlphabetically() { }

	// RVA: 0x1AFA9C8 Offset: 0x1AFA9C8 VA: 0x1AFA9C8
	protected bool CacheScrollView() { }

	// RVA: 0x1AFAB10 Offset: 0x1AFAB10 VA: 0x1AFAB10
	private void ResetChildPositions() { }

	// RVA: 0x1AFA178 Offset: 0x1AFA178 VA: 0x1AFA178
	public void WrapContent() { }

	// RVA: 0x1AFAE54 Offset: 0x1AFAE54 VA: 0x1AFAE54
	private void OnValidate() { }

	// RVA: 0x1AFAE78 Offset: 0x1AFAE78 VA: 0x1AFAE78 Slot: 6
	protected virtual void UpdateItem(Transform item, int index) { }

	// RVA: 0x1AFB3B4 Offset: 0x1AFB3B4 VA: 0x1AFB3B4
	public void setScrollPos(int idx) { }

	// RVA: 0x1AFB550 Offset: 0x1AFB550 VA: 0x1AFB550
	public void SetEventRewardScrollPos(int idx, UIWrapContent.CallbackFunc callback) { }

	// RVA: 0x1AFB780 Offset: 0x1AFB780 VA: 0x1AFB780
	private void EndCallback() { }

	// RVA: 0x1AFB9B0 Offset: 0x1AFB9B0 VA: 0x1AFB9B0
	public void resetScroll() { }

	// RVA: 0x1AFB9E0 Offset: 0x1AFB9E0 VA: 0x1AFB9E0
	private static void .cctor() { }
}

// Namespace: 
public sealed class UIWrapContent.OnInitializeItem : MulticastDelegate // TypeDefIndex: 12121
{
	// Methods

	// RVA: 0x1AFBA88 Offset: 0x1AFBA88 VA: 0x1AFBA88
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1AFAFC4 Offset: 0x1AFAFC4 VA: 0x1AFAFC4 Slot: 11
	public virtual void Invoke(GameObject go, int wrapIndex, int realIndex) { }

	// RVA: 0x1AFBA98 Offset: 0x1AFBA98 VA: 0x1AFBA98 Slot: 12
	public virtual IAsyncResult BeginInvoke(GameObject go, int wrapIndex, int realIndex, AsyncCallback callback, object object) { }

	// RVA: 0x1AFBB4C Offset: 0x1AFBB4C VA: 0x1AFBB4C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class UIWrapContent.CallbackFunc : MulticastDelegate // TypeDefIndex: 12122
{
	// Methods

	// RVA: 0x1AFBA38 Offset: 0x1AFBA38 VA: 0x1AFBA38
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1AFB7B0 Offset: 0x1AFB7B0 VA: 0x1AFB7B0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1AFBA48 Offset: 0x1AFBA48 VA: 0x1AFBA48 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1AFBA7C Offset: 0x1AFBA7C VA: 0x1AFBA7C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C7BC Offset: 0xC2C7BC VA: 0xC2C7BC
public class ActiveAnimation : MonoBehaviour // TypeDefIndex: 12123
{
	// Fields
	public static ActiveAnimation current; // 0x0
	public List<EventDelegate> onFinished; // 0x18
	[HideInInspector] // RVA: 0xC85054 Offset: 0xC85054 VA: 0xC85054
	public GameObject eventReceiver; // 0x20
	[HideInInspector] // RVA: 0xC85064 Offset: 0xC85064 VA: 0xC85064
	public string callWhenFinished; // 0x28
	private Animation mAnim; // 0x30
	private Direction mLastDirection; // 0x38
	private Direction mDisableDirection; // 0x3C
	private bool mNotify; // 0x40
	private Animator mAnimator; // 0x48
	private string mClip; // 0x50

	// Properties
	private float playbackTime { get; }
	public bool isPlaying { get; }

	// Methods

	// RVA: 0x1069050 Offset: 0x1069050 VA: 0x1069050
	public void .ctor() { }

	// RVA: 0x10690F0 Offset: 0x10690F0 VA: 0x10690F0
	private float get_playbackTime() { }

	// RVA: 0x10691C0 Offset: 0x10691C0 VA: 0x10691C0
	public bool get_isPlaying() { }

	// RVA: 0x106963C Offset: 0x106963C VA: 0x106963C
	public void Finish() { }

	// RVA: 0x1069A38 Offset: 0x1069A38 VA: 0x1069A38
	public void Reset() { }

	// RVA: 0x1069E14 Offset: 0x1069E14 VA: 0x1069E14
	private void Start() { }

	// RVA: 0x1069ED0 Offset: 0x1069ED0 VA: 0x1069ED0
	private void Update() { }

	// RVA: 0x106A5FC Offset: 0x106A5FC VA: 0x106A5FC
	private void Play(string clipName, Direction playDirection) { }

	// RVA: 0x106ACD4 Offset: 0x106ACD4 VA: 0x106ACD4
	public static ActiveAnimation Play(Animation anim, string clipName, Direction playDirection, EnableCondition enableBeforePlay, DisableCondition disableCondition) { }

	// RVA: 0x106B03C Offset: 0x106B03C VA: 0x106B03C
	public static ActiveAnimation Play(Animation anim, string clipName, Direction playDirection) { }

	// RVA: 0x106B048 Offset: 0x106B048 VA: 0x106B048
	public static ActiveAnimation Play(Animation anim, Direction playDirection) { }

	// RVA: 0x106B060 Offset: 0x106B060 VA: 0x106B060
	public static ActiveAnimation Play(Animator anim, string clipName, Direction playDirection, EnableCondition enableBeforePlay, DisableCondition disableCondition) { }
}

// Namespace: AnimationOrTween
public enum Trigger // TypeDefIndex: 12124
{
	// Fields
	public int value__; // 0x0
	public const Trigger OnClick = 0;
	public const Trigger OnHover = 1;
	public const Trigger OnPress = 2;
	public const Trigger OnHoverTrue = 3;
	public const Trigger OnHoverFalse = 4;
	public const Trigger OnPressTrue = 5;
	public const Trigger OnPressFalse = 6;
	public const Trigger OnActivate = 7;
	public const Trigger OnActivateTrue = 8;
	public const Trigger OnActivateFalse = 9;
	public const Trigger OnDoubleClick = 10;
	public const Trigger OnSelect = 11;
	public const Trigger OnSelectTrue = 12;
	public const Trigger OnSelectFalse = 13;
}

// Namespace: AnimationOrTween
public enum Direction // TypeDefIndex: 12125
{
	// Fields
	public int value__; // 0x0
	public const Direction Reverse = -1;
	public const Direction Toggle = 0;
	public const Direction Forward = 1;
}

// Namespace: AnimationOrTween
public enum EnableCondition // TypeDefIndex: 12126
{
	// Fields
	public int value__; // 0x0
	public const EnableCondition DoNothing = 0;
	public const EnableCondition EnableThenPlay = 1;
	public const EnableCondition IgnoreDisabledState = 2;
}

// Namespace: AnimationOrTween
public enum DisableCondition // TypeDefIndex: 12127
{
	// Fields
	public int value__; // 0x0
	public const DisableCondition DisableAfterReverse = -1;
	public const DisableCondition DoNotDisable = 0;
	public const DisableCondition DisableAfterForward = 1;
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xC2C7F4 Offset: 0xC2C7F4 VA: 0xC2C7F4
public class BetterList<T> // TypeDefIndex: 12128
{
	// Fields
	public T[] buffer; // 0x0
	public int size; // 0x0

	// Properties
	[DebuggerHiddenAttribute] // RVA: 0xCDECB0 Offset: 0xCDECB0 VA: 0xCDECB0
	public T Item { get; set; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x225AFF8 Offset: 0x225AFF8 VA: 0x225AFF8
	|-BetterList<int>..ctor
	|
	|-RVA: 0x225BE40 Offset: 0x225BE40 VA: 0x225BE40
	|-BetterList<object>..ctor
	|-BetterList<string>..ctor
	|-BetterList<UICamera>..ctor
	|-BetterList<UIDrawCall>..ctor
	|-BetterList<UIKeyNavigation>..ctor
	|-BetterList<UILabel>..ctor
	|-BetterList<UIRect>..ctor
	|-BetterList<UIScrollView>..ctor
	|-BetterList<UITextList.Paragraph>..ctor
	|-BetterList<UIToggle>..ctor
	|
	|-RVA: 0x225CC70 Offset: 0x225CC70 VA: 0x225CC70
	|-BetterList<float>..ctor
	|
	|-RVA: 0x225DAD8 Offset: 0x225DAD8 VA: 0x225DAD8
	|-BetterList<TypewriterEffect.FadeEntry>..ctor
	|
	|-RVA: 0x225ED7C Offset: 0x225ED7C VA: 0x225ED7C
	|-BetterList<UICamera.DepthEntry>..ctor
	|
	|-RVA: 0x226007C Offset: 0x226007C VA: 0x226007C
	|-BetterList<Color32>..ctor
	|
	|-RVA: 0x2260FD0 Offset: 0x2260FD0 VA: 0x2260FD0
	|-BetterList<Color>..ctor
	|
	|-RVA: 0x2262000 Offset: 0x2262000 VA: 0x2262000
	|-BetterList<Vector2>..ctor
	|
	|-RVA: 0x2262ECC Offset: 0x2262ECC VA: 0x2262ECC
	|-BetterList<Vector3>..ctor
