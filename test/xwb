	|-RVA: 0x25178DC Offset: 0x25178DC VA: 0x25178DC
	|-BetterList.<GetEnumerator>c__Iterator0<object>.Reset
	|
	|-RVA: 0x2517B04 Offset: 0x2517B04 VA: 0x2517B04
	|-BetterList.<GetEnumerator>c__Iterator0<float>.Reset
	|
	|-RVA: 0x2517D54 Offset: 0x2517D54 VA: 0x2517D54
	|-BetterList.<GetEnumerator>c__Iterator0<TypewriterEffect.FadeEntry>.Reset
	|
	|-RVA: 0x2517FA4 Offset: 0x2517FA4 VA: 0x2517FA4
	|-BetterList.<GetEnumerator>c__Iterator0<UICamera.DepthEntry>.Reset
	|
	|-RVA: 0x25181CC Offset: 0x25181CC VA: 0x25181CC
	|-BetterList.<GetEnumerator>c__Iterator0<Color32>.Reset
	|
	|-RVA: 0x2518410 Offset: 0x2518410 VA: 0x2518410
	|-BetterList.<GetEnumerator>c__Iterator0<Color>.Reset
	|
	|-RVA: 0x2518638 Offset: 0x2518638 VA: 0x2518638
	|-BetterList.<GetEnumerator>c__Iterator0<Vector2>.Reset
	|
	|-RVA: 0x2518880 Offset: 0x2518880 VA: 0x2518880
	|-BetterList.<GetEnumerator>c__Iterator0<Vector3>.Reset
	|
	|-RVA: 0x2518AC4 Offset: 0x2518AC4 VA: 0x2518AC4
	|-BetterList.<GetEnumerator>c__Iterator0<Vector4>.Reset
	*/
}

// Namespace: 
[Serializable]
public class BMFont // TypeDefIndex: 12092
{
	// Fields
	[HideInInspector] // RVA: 0xCF1748 Offset: 0xCF1748 VA: 0xCF1748
	[SerializeField] // RVA: 0xCF1748 Offset: 0xCF1748 VA: 0xCF1748
	private int mSize; // 0x10
	[HideInInspector] // RVA: 0xCF1780 Offset: 0xCF1780 VA: 0xCF1780
	[SerializeField] // RVA: 0xCF1780 Offset: 0xCF1780 VA: 0xCF1780
	private int mBase; // 0x14
	[HideInInspector] // RVA: 0xCF17B8 Offset: 0xCF17B8 VA: 0xCF17B8
	[SerializeField] // RVA: 0xCF17B8 Offset: 0xCF17B8 VA: 0xCF17B8
	private int mWidth; // 0x18
	[HideInInspector] // RVA: 0xCF17F0 Offset: 0xCF17F0 VA: 0xCF17F0
	[SerializeField] // RVA: 0xCF17F0 Offset: 0xCF17F0 VA: 0xCF17F0
	private int mHeight; // 0x1C
	[HideInInspector] // RVA: 0xCF1828 Offset: 0xCF1828 VA: 0xCF1828
	[SerializeField] // RVA: 0xCF1828 Offset: 0xCF1828 VA: 0xCF1828
	private string mSpriteName; // 0x20
	[HideInInspector] // RVA: 0xCF1860 Offset: 0xCF1860 VA: 0xCF1860
	[SerializeField] // RVA: 0xCF1860 Offset: 0xCF1860 VA: 0xCF1860
	private List<BMGlyph> mSaved; // 0x28
	private Dictionary<int, BMGlyph> mDict; // 0x30

	// Properties
	public bool isValid { get; }
	public int charSize { get; set; }
	public int baseOffset { get; set; }
	public int texWidth { get; set; }
	public int texHeight { get; set; }
	public int glyphCount { get; }
	public string spriteName { get; set; }
	public List<BMGlyph> glyphs { get; }

	// Methods

	// RVA: 0x1478DEC Offset: 0x1478DEC VA: 0x1478DEC
	public void .ctor() { }

	// RVA: 0x1478E8C Offset: 0x1478E8C VA: 0x1478E8C
	public bool get_isValid() { }

	// RVA: 0x1478EF8 Offset: 0x1478EF8 VA: 0x1478EF8
	public int get_charSize() { }

	// RVA: 0x1478F00 Offset: 0x1478F00 VA: 0x1478F00
	public void set_charSize(int value) { }

	// RVA: 0x1478F08 Offset: 0x1478F08 VA: 0x1478F08
	public int get_baseOffset() { }

	// RVA: 0x1478F10 Offset: 0x1478F10 VA: 0x1478F10
	public void set_baseOffset(int value) { }

	// RVA: 0x1478F18 Offset: 0x1478F18 VA: 0x1478F18
	public int get_texWidth() { }

	// RVA: 0x1478F20 Offset: 0x1478F20 VA: 0x1478F20
	public void set_texWidth(int value) { }

	// RVA: 0x1478F28 Offset: 0x1478F28 VA: 0x1478F28
	public int get_texHeight() { }

	// RVA: 0x1478F30 Offset: 0x1478F30 VA: 0x1478F30
	public void set_texHeight(int value) { }

	// RVA: 0x1478F38 Offset: 0x1478F38 VA: 0x1478F38
	public int get_glyphCount() { }

	// RVA: 0x1478FB4 Offset: 0x1478FB4 VA: 0x1478FB4
	public string get_spriteName() { }

	// RVA: 0x1478FBC Offset: 0x1478FBC VA: 0x1478FBC
	public void set_spriteName(string value) { }

	// RVA: 0x1478FC4 Offset: 0x1478FC4 VA: 0x1478FC4
	public List<BMGlyph> get_glyphs() { }

	// RVA: 0x1478FCC Offset: 0x1478FCC VA: 0x1478FCC
	public BMGlyph GetGlyph(int index, bool createIfMissing) { }

	// RVA: 0x14791DC Offset: 0x14791DC VA: 0x14791DC
	public BMGlyph GetGlyph(int index) { }

	// RVA: 0x14791E4 Offset: 0x14791E4 VA: 0x14791E4
	public void Clear() { }

	// RVA: 0x1479268 Offset: 0x1479268 VA: 0x1479268
	public void Trim(int xMin, int yMin, int xMax, int yMax) { }
}

// Namespace: 
[Serializable]
public class BMGlyph // TypeDefIndex: 12093
{
	// Fields
	public int index; // 0x10
	public int x; // 0x14
	public int y; // 0x18
	public int width; // 0x1C
	public int height; // 0x20
	public int offsetX; // 0x24
	public int offsetY; // 0x28
	public int advance; // 0x2C
	public int channel; // 0x30
	public List<int> kerning; // 0x38

	// Methods

	// RVA: 0x14791D4 Offset: 0x14791D4 VA: 0x14791D4
	public void .ctor() { }

	// RVA: 0x14793F0 Offset: 0x14793F0 VA: 0x14793F0
	public int GetKerning(int previousChar) { }

	// RVA: 0x14794F4 Offset: 0x14794F4 VA: 0x14794F4
	public void SetKerning(int previousChar, int amount) { }

	// RVA: 0x1479364 Offset: 0x1479364 VA: 0x1479364
	public void Trim(int xMin, int yMin, int xMax, int yMax) { }
}

// Namespace: 
[Serializable]
public class BMSymbol // TypeDefIndex: 12094
{
	// Fields
	public string sequence; // 0x10
	public string spriteName; // 0x18
	private UISpriteData mSprite; // 0x20
	private bool mIsValid; // 0x28
	private int mLength; // 0x2C
	private int mOffsetX; // 0x30
	private int mOffsetY; // 0x34
	private int mWidth; // 0x38
	private int mHeight; // 0x3C
	private int mAdvance; // 0x40
	private Rect mUV; // 0x44

	// Properties
	public int length { get; }
	public int offsetX { get; }
	public int offsetY { get; }
	public int width { get; }
	public int height { get; }
	public int advance { get; }
	public Rect uvRect { get; }

	// Methods

	// RVA: 0x1479674 Offset: 0x1479674 VA: 0x1479674
	public void .ctor() { }

	// RVA: 0x147967C Offset: 0x147967C VA: 0x147967C
	public int get_length() { }

	// RVA: 0x14796C0 Offset: 0x14796C0 VA: 0x14796C0
	public int get_offsetX() { }

	// RVA: 0x14796C8 Offset: 0x14796C8 VA: 0x14796C8
	public int get_offsetY() { }

	// RVA: 0x14796D0 Offset: 0x14796D0 VA: 0x14796D0
	public int get_width() { }

	// RVA: 0x14796D8 Offset: 0x14796D8 VA: 0x14796D8
	public int get_height() { }

	// RVA: 0x14796E0 Offset: 0x14796E0 VA: 0x14796E0
	public int get_advance() { }

	// RVA: 0x14796E8 Offset: 0x14796E8 VA: 0x14796E8
	public Rect get_uvRect() { }

	// RVA: 0x14796F4 Offset: 0x14796F4 VA: 0x14796F4
	public void MarkAsChanged() { }

	// RVA: 0x14796FC Offset: 0x14796FC VA: 0x14796FC
	public bool Validate(UIAtlas atlas) { }
}

// Namespace: 
public class ByteReader // TypeDefIndex: 12095
{
	// Fields
	private byte[] mBuffer; // 0x10
	private int mOffset; // 0x18
	private static BetterList<string> mTemp; // 0x0

	// Properties
	public bool canRead { get; }

	// Methods

	// RVA: 0x19200F4 Offset: 0x19200F4 VA: 0x19200F4
	public void .ctor(byte[] bytes) { }

	// RVA: 0x1920120 Offset: 0x1920120 VA: 0x1920120
	public void .ctor(TextAsset asset) { }

	// RVA: 0x1920164 Offset: 0x1920164 VA: 0x1920164
	public static ByteReader Open(string path) { }

	// RVA: 0x192027C Offset: 0x192027C VA: 0x192027C
	public bool get_canRead() { }

	// RVA: 0x19202A0 Offset: 0x19202A0 VA: 0x19202A0
	private static string ReadLine(byte[] buffer, int start, int count) { }

	// RVA: 0x1920340 Offset: 0x1920340 VA: 0x1920340
	public string ReadLine() { }

	// RVA: 0x1920348 Offset: 0x1920348 VA: 0x1920348
	public string ReadLine(bool skipEmptyLines) { }

	// RVA: 0x19204CC Offset: 0x19204CC VA: 0x19204CC
	public Dictionary<string, string> ReadDictionary() { }

	// RVA: 0x19206C8 Offset: 0x19206C8 VA: 0x19206C8
	public BetterList<string> ReadCSV() { }

	// RVA: 0x1920BFC Offset: 0x1920BFC VA: 0x1920BFC
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public class EventDelegate // TypeDefIndex: 12096
{
	// Fields
	[SerializeField] // RVA: 0xCF1898 Offset: 0xCF1898 VA: 0xCF1898
	private MonoBehaviour mTarget; // 0x10
	[SerializeField] // RVA: 0xCF18A8 Offset: 0xCF18A8 VA: 0xCF18A8
	private string mMethodName; // 0x18
	[SerializeField] // RVA: 0xCF18B8 Offset: 0xCF18B8 VA: 0xCF18B8
	private EventDelegate.Parameter[] mParameters; // 0x20
	public bool oneShot; // 0x28
	private EventDelegate.Callback mCachedCallback; // 0x30
	private bool mRawDelegate; // 0x38
	private bool mCached; // 0x39
	private MethodInfo mMethod; // 0x40
	private ParameterInfo[] mParameterInfos; // 0x48
	private object[] mArgs; // 0x50
	private static int s_Hash; // 0x0

	// Properties
	public MonoBehaviour target { get; set; }
	public string methodName { get; set; }
	public EventDelegate.Parameter[] parameters { get; }
	public bool isValid { get; }
	public bool isEnabled { get; }

	// Methods

	// RVA: 0x1D2812C Offset: 0x1D2812C VA: 0x1D2812C
	public void .ctor() { }

	// RVA: 0x1D28134 Offset: 0x1D28134 VA: 0x1D28134
	public void .ctor(EventDelegate.Callback call) { }

	// RVA: 0x1D282C8 Offset: 0x1D282C8 VA: 0x1D282C8
	public void .ctor(MonoBehaviour target, string methodName) { }

	// RVA: 0x1D28330 Offset: 0x1D28330 VA: 0x1D28330
	public MonoBehaviour get_target() { }

	// RVA: 0x1D28338 Offset: 0x1D28338 VA: 0x1D28338
	public void set_target(MonoBehaviour value) { }

	// RVA: 0x1D28350 Offset: 0x1D28350 VA: 0x1D28350
	public string get_methodName() { }

	// RVA: 0x1D28358 Offset: 0x1D28358 VA: 0x1D28358
	public void set_methodName(string value) { }

	// RVA: 0x1D2836C Offset: 0x1D2836C VA: 0x1D2836C
	public EventDelegate.Parameter[] get_parameters() { }

	// RVA: 0x1D28960 Offset: 0x1D28960 VA: 0x1D28960
	public bool get_isValid() { }

	// RVA: 0x1D28A40 Offset: 0x1D28A40 VA: 0x1D28A40
	public bool get_isEnabled() { }

	// RVA: 0x1D28B40 Offset: 0x1D28B40 VA: 0x1D28B40
	private static string GetMethodName(EventDelegate.Callback callback) { }

	// RVA: 0x1D28B88 Offset: 0x1D28B88 VA: 0x1D28B88
	private static bool IsValid(EventDelegate.Callback callback) { }

	// RVA: 0x1D28BAC Offset: 0x1D28BAC VA: 0x1D28BAC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1D28DD0 Offset: 0x1D28DD0 VA: 0x1D28DD0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1D28164 Offset: 0x1D28164 VA: 0x1D28164
	private void Set(EventDelegate.Callback call) { }

	// RVA: 0x1D28314 Offset: 0x1D28314 VA: 0x1D28314
	public void Set(MonoBehaviour target, string methodName) { }

	// RVA: 0x1D2839C Offset: 0x1D2839C VA: 0x1D2839C
	private void Cache() { }

	// RVA: 0x1D28ED8 Offset: 0x1D28ED8 VA: 0x1D28ED8
	public bool Execute() { }

	// RVA: 0x1D28E38 Offset: 0x1D28E38 VA: 0x1D28E38
	public void Clear() { }

	// RVA: 0x1D29DD4 Offset: 0x1D29DD4 VA: 0x1D29DD4 Slot: 3
	public override string ToString() { }

	// RVA: 0x1D29FA0 Offset: 0x1D29FA0 VA: 0x1D29FA0
	public static void Execute(List<EventDelegate> list) { }

	// RVA: 0x1D2A150 Offset: 0x1D2A150 VA: 0x1D2A150
	public static bool IsValid(List<EventDelegate> list) { }

	// RVA: 0x1D2A1FC Offset: 0x1D2A1FC VA: 0x1D2A1FC
	public static EventDelegate Set(List<EventDelegate> list, EventDelegate.Callback callback) { }

	// RVA: 0x1D2A2AC Offset: 0x1D2A2AC VA: 0x1D2A2AC
	public static void Set(List<EventDelegate> list, EventDelegate del) { }

	// RVA: 0x1D2A334 Offset: 0x1D2A334 VA: 0x1D2A334
	public static EventDelegate Add(List<EventDelegate> list, EventDelegate.Callback callback) { }

	// RVA: 0x1D2A3AC Offset: 0x1D2A3AC VA: 0x1D2A3AC
	public static EventDelegate Add(List<EventDelegate> list, EventDelegate.Callback callback, bool oneShot) { }

	// RVA: 0x1D2A4D8 Offset: 0x1D2A4D8 VA: 0x1D2A4D8
	public static void Add(List<EventDelegate> list, EventDelegate ev) { }

	// RVA: 0x1D2A564 Offset: 0x1D2A564 VA: 0x1D2A564
	public static void Add(List<EventDelegate> list, EventDelegate ev, bool oneShot) { }

	// RVA: 0x1D2A870 Offset: 0x1D2A870 VA: 0x1D2A870
	public static bool Remove(List<EventDelegate> list, EventDelegate.Callback callback) { }

	// RVA: 0x1D2A94C Offset: 0x1D2A94C VA: 0x1D2A94C
	public static bool Remove(List<EventDelegate> list, EventDelegate ev) { }

	// RVA: 0x1D2AA28 Offset: 0x1D2AA28 VA: 0x1D2AA28
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public class EventDelegate.Parameter // TypeDefIndex: 12097
{
	// Fields
	public Object obj; // 0x10
	public string field; // 0x18
	private object mValue; // 0x20
	public Type expectedType; // 0x28
	public bool cached; // 0x30
	public PropertyInfo propInfo; // 0x38
	public FieldInfo fieldInfo; // 0x40

	// Properties
	public object value { get; set; }
	public Type type { get; }

	// Methods

	// RVA: 0x1D28E54 Offset: 0x1D28E54 VA: 0x1D28E54
	public void .ctor() { }

	// RVA: 0x1D2AAEC Offset: 0x1D2AAEC VA: 0x1D2AAEC
	public void .ctor(Object obj, string field) { }

	// RVA: 0x1D2AB88 Offset: 0x1D2AB88 VA: 0x1D2AB88
	public void .ctor(object val) { }

	// RVA: 0x1D29AB4 Offset: 0x1D29AB4 VA: 0x1D29AB4
	public object get_value() { }

	// RVA: 0x1D29DCC Offset: 0x1D29DCC VA: 0x1D29DCC
	public void set_value(object value) { }

	// RVA: 0x1D29CF4 Offset: 0x1D29CF4 VA: 0x1D29CF4
	public Type get_type() { }
}

// Namespace: 
public sealed class EventDelegate.Callback : MulticastDelegate // TypeDefIndex: 12098
{
	// Methods

	// RVA: 0x1D2AA9C Offset: 0x1D2AA9C VA: 0x1D2AA9C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D298B4 Offset: 0x1D298B4 VA: 0x1D298B4 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1D2AAAC Offset: 0x1D2AAAC VA: 0x1D2AAAC Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1D2AAE0 Offset: 0x1D2AAE0 VA: 0x1D2AAE0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public static class Localization // TypeDefIndex: 12099
{
	// Fields
	public static Localization.LoadFunction loadFunction; // 0x0
	public static Localization.OnLocalizeNotification onLocalize; // 0x8
	public static bool localizationHasBeenSet; // 0x10
	private static string[] mLanguages; // 0x18
	private static Dictionary<string, string> mOldDictionary; // 0x20
	private static Dictionary<string, string[]> mDictionary; // 0x28
	private static int mLanguageIndex; // 0x30
	private static string mLanguage; // 0x38
	private static bool mMerging; // 0x40

	// Properties
	public static Dictionary<string, string[]> dictionary { get; set; }
	public static string[] knownLanguages { get; }
	public static string language { get; set; }
	[ObsoleteAttribute] // RVA: 0xD4BF14 Offset: 0xD4BF14 VA: 0xD4BF14
	public static bool isActive { get; }

	// Methods

	// RVA: 0x1D47F6C Offset: 0x1D47F6C VA: 0x1D47F6C
	public static Dictionary<string, string[]> get_dictionary() { }

	// RVA: 0x1D48380 Offset: 0x1D48380 VA: 0x1D48380
	public static void set_dictionary(Dictionary<string, string[]> value) { }

	// RVA: 0x1D483FC Offset: 0x1D483FC VA: 0x1D483FC
	public static string[] get_knownLanguages() { }

	// RVA: 0x1D484D4 Offset: 0x1D484D4 VA: 0x1D484D4
	public static string get_language() { }

	// RVA: 0x1D48810 Offset: 0x1D48810 VA: 0x1D48810
	public static void set_language(string value) { }

	// RVA: 0x1D48044 Offset: 0x1D48044 VA: 0x1D48044
	private static bool LoadDictionary(string value) { }

	// RVA: 0x1D485F4 Offset: 0x1D485F4 VA: 0x1D485F4
	private static bool LoadAndSelect(string value) { }

	// RVA: 0x1D49040 Offset: 0x1D49040 VA: 0x1D49040
	public static void Load(TextAsset asset) { }

	// RVA: 0x1D48D0C Offset: 0x1D48D0C VA: 0x1D48D0C
	public static void Set(string languageName, byte[] bytes) { }

	// RVA: 0x1D492A0 Offset: 0x1D492A0 VA: 0x1D492A0
	public static bool LoadCSV(TextAsset asset, bool merge = False) { }

	// RVA: 0x1D48C98 Offset: 0x1D48C98 VA: 0x1D48C98
	public static bool LoadCSV(byte[] bytes, bool merge = False) { }

	// RVA: 0x1D49E2C Offset: 0x1D49E2C VA: 0x1D49E2C
	private static bool HasLanguage(string languageName) { }

	// RVA: 0x1D49334 Offset: 0x1D49334 VA: 0x1D49334
	private static bool LoadCSV(byte[] bytes, TextAsset asset, bool merge = False) { }

	// RVA: 0x1D49F68 Offset: 0x1D49F68 VA: 0x1D49F68
	private static void AddCSV(BetterList<string> newValues, string[] newLanguages, Dictionary<string, int> languageIndices) { }

	// RVA: 0x1D4A3B8 Offset: 0x1D4A3B8 VA: 0x1D4A3B8
	private static string[] ExtractStrings(BetterList<string> added, string[] newLanguages, Dictionary<string, int> languageIndices) { }

	// RVA: 0x1D48DC0 Offset: 0x1D48DC0 VA: 0x1D48DC0
	private static bool SelectLanguage(string language) { }

	// RVA: 0x1D49104 Offset: 0x1D49104 VA: 0x1D49104
	public static void Set(string languageName, Dictionary<string, string> dictionary) { }

	// RVA: 0x1D4A748 Offset: 0x1D4A748 VA: 0x1D4A748
	public static void Set(string key, string value) { }

	// RVA: 0x1D4A888 Offset: 0x1D4A888 VA: 0x1D4A888
	public static string Get(string key) { }

	// RVA: 0x1D4AE14 Offset: 0x1D4AE14 VA: 0x1D4AE14
	public static string Format(string key, object[] parameters) { }

	// RVA: 0x1D4AEBC Offset: 0x1D4AEBC VA: 0x1D4AEBC
	public static bool get_isActive() { }

	[ObsoleteAttribute] // RVA: 0xD43C84 Offset: 0xD43C84 VA: 0xD43C84
	// RVA: 0x1D4AEC4 Offset: 0x1D4AEC4 VA: 0x1D4AEC4
	public static string Localize(string key) { }

	// RVA: 0x1D4AF28 Offset: 0x1D4AF28 VA: 0x1D4AF28
	public static bool Exists(string key) { }

	// RVA: 0x1D4B160 Offset: 0x1D4B160 VA: 0x1D4B160
	private static void .cctor() { }
}

// Namespace: 
public sealed class Localization.LoadFunction : MulticastDelegate // TypeDefIndex: 12100
{
	// Methods

	// RVA: 0x1D4B22C Offset: 0x1D4B22C VA: 0x1D4B22C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D488F4 Offset: 0x1D488F4 VA: 0x1D488F4 Slot: 11
	public virtual byte[] Invoke(string path) { }

	// RVA: 0x1D4B23C Offset: 0x1D4B23C VA: 0x1D4B23C Slot: 12
	public virtual IAsyncResult BeginInvoke(string path, AsyncCallback callback, object object) { }

	// RVA: 0x1D4B260 Offset: 0x1D4B260 VA: 0x1D4B260 Slot: 13
	public virtual byte[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class Localization.OnLocalizeNotification : MulticastDelegate // TypeDefIndex: 12101
{
	// Methods

	// RVA: 0x1D4B26C Offset: 0x1D4B26C VA: 0x1D4B26C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1D4A1B8 Offset: 0x1D4A1B8 VA: 0x1D4A1B8 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1D4B27C Offset: 0x1D4B27C VA: 0x1D4B27C Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1D4B2B0 Offset: 0x1D4B2B0 VA: 0x1D4B2B0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC988C8 Offset: 0xC988C8 VA: 0xC988C8
public class NGUIDebug : MonoBehaviour // TypeDefIndex: 12102
{
	// Fields
	private static bool mRayDebug; // 0x0
	private static List<string> mLines; // 0x8
	private static NGUIDebug mInstance; // 0x10

	// Properties
	public static bool debugRaycast { get; set; }

	// Methods

	// RVA: 0x1FEC4FC Offset: 0x1FEC4FC VA: 0x1FEC4FC
	public void .ctor() { }

	// RVA: 0x1FEC504 Offset: 0x1FEC504 VA: 0x1FEC504
	public static bool get_debugRaycast() { }

	// RVA: 0x1FEC56C Offset: 0x1FEC56C VA: 0x1FEC56C
	public static void set_debugRaycast(bool value) { }

	// RVA: 0x1FEC610 Offset: 0x1FEC610 VA: 0x1FEC610
	public static void CreateInstance() { }

	// RVA: 0x1FEC75C Offset: 0x1FEC75C VA: 0x1FEC75C
	private static void LogString(string text) { }

	// RVA: 0x1FEC8A4 Offset: 0x1FEC8A4 VA: 0x1FEC8A4
	public static void Log(object[] objs) { }

	// RVA: 0x1FECA14 Offset: 0x1FECA14 VA: 0x1FECA14
	public static void Clear() { }

	// RVA: 0x1FECA98 Offset: 0x1FECA98 VA: 0x1FECA98
	public static void DrawBounds(Bounds b) { }

	// RVA: 0x1FECBAC Offset: 0x1FECBAC VA: 0x1FECBAC
	private void OnGUI() { }

	// RVA: 0x1FED098 Offset: 0x1FED098 VA: 0x1FED098
	private static void .cctor() { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC98900 Offset: 0xC98900 VA: 0xC98900
public static class NGUIMath // TypeDefIndex: 12103
{
	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD43CBC Offset: 0xD43CBC VA: 0xD43CBC
	[DebuggerStepThroughAttribute] // RVA: 0xD43CBC Offset: 0xD43CBC VA: 0xD43CBC
	// RVA: 0x1FED760 Offset: 0x1FED760 VA: 0x1FED760
	public static float Lerp(float from, float to, float factor) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43CF4 Offset: 0xD43CF4 VA: 0xD43CF4
	[DebuggerStepThroughAttribute] // RVA: 0xD43CF4 Offset: 0xD43CF4 VA: 0xD43CF4
	// RVA: 0x1FED778 Offset: 0x1FED778 VA: 0x1FED778
	public static int ClampIndex(int val, int max) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43D2C Offset: 0xD43D2C VA: 0xD43D2C
	[DebuggerStepThroughAttribute] // RVA: 0xD43D2C Offset: 0xD43D2C VA: 0xD43D2C
	// RVA: 0x1FED794 Offset: 0x1FED794 VA: 0x1FED794
	public static int RepeatIndex(int val, int max) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43D64 Offset: 0xD43D64 VA: 0xD43D64
	[DebuggerStepThroughAttribute] // RVA: 0xD43D64 Offset: 0xD43D64 VA: 0xD43D64
	// RVA: 0x1FED7C4 Offset: 0x1FED7C4 VA: 0x1FED7C4
	public static float WrapAngle(float angle) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43D9C Offset: 0xD43D9C VA: 0xD43D9C
	[DebuggerStepThroughAttribute] // RVA: 0xD43D9C Offset: 0xD43D9C VA: 0xD43D9C
	// RVA: 0x1FED810 Offset: 0x1FED810 VA: 0x1FED810
	public static float Wrap01(float val) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43DD4 Offset: 0xD43DD4 VA: 0xD43DD4
	[DebuggerStepThroughAttribute] // RVA: 0xD43DD4 Offset: 0xD43DD4 VA: 0xD43DD4
	// RVA: 0x1FED88C Offset: 0x1FED88C VA: 0x1FED88C
	public static int HexToDecimal(char ch) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43E0C Offset: 0xD43E0C VA: 0xD43E0C
	[DebuggerStepThroughAttribute] // RVA: 0xD43E0C Offset: 0xD43E0C VA: 0xD43E0C
	// RVA: 0x1FED8EC Offset: 0x1FED8EC VA: 0x1FED8EC
	public static char DecimalToHexChar(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43E44 Offset: 0xD43E44 VA: 0xD43E44
	[DebuggerStepThroughAttribute] // RVA: 0xD43E44 Offset: 0xD43E44 VA: 0xD43E44
	// RVA: 0x1FED914 Offset: 0x1FED914 VA: 0x1FED914
	public static string DecimalToHex8(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43E7C Offset: 0xD43E7C VA: 0xD43E7C
	[DebuggerStepThroughAttribute] // RVA: 0xD43E7C Offset: 0xD43E7C VA: 0xD43E7C
	// RVA: 0x1FED980 Offset: 0x1FED980 VA: 0x1FED980
	public static string DecimalToHex24(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43EB4 Offset: 0xD43EB4 VA: 0xD43EB4
	[DebuggerStepThroughAttribute] // RVA: 0xD43EB4 Offset: 0xD43EB4 VA: 0xD43EB4
	// RVA: 0x1FED9EC Offset: 0x1FED9EC VA: 0x1FED9EC
	public static string DecimalToHex32(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43EEC Offset: 0xD43EEC VA: 0xD43EEC
	[DebuggerStepThroughAttribute] // RVA: 0xD43EEC Offset: 0xD43EEC VA: 0xD43EEC
	// RVA: 0x1FEDA44 Offset: 0x1FEDA44 VA: 0x1FEDA44
	public static int ColorToInt(Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43F24 Offset: 0xD43F24 VA: 0xD43F24
	[DebuggerStepThroughAttribute] // RVA: 0xD43F24 Offset: 0xD43F24 VA: 0xD43F24
	// RVA: 0x1FEDB14 Offset: 0x1FEDB14 VA: 0x1FEDB14
	public static Color IntToColor(int val) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43F5C Offset: 0xD43F5C VA: 0xD43F5C
	[DebuggerStepThroughAttribute] // RVA: 0xD43F5C Offset: 0xD43F5C VA: 0xD43F5C
	// RVA: 0x1FEDB70 Offset: 0x1FEDB70 VA: 0x1FEDB70
	public static string IntToBinary(int val, int bits) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43F94 Offset: 0xD43F94 VA: 0xD43F94
	[DebuggerStepThroughAttribute] // RVA: 0xD43F94 Offset: 0xD43F94 VA: 0xD43F94
	// RVA: 0x1FEDCD8 Offset: 0x1FEDCD8 VA: 0x1FEDCD8
	public static Color HexToColor(uint val) { }

	// RVA: 0x1FEDCDC Offset: 0x1FEDCDC VA: 0x1FEDCDC
	public static Rect ConvertToTexCoords(Rect rect, int width, int height) { }

	// RVA: 0x1FEDDA0 Offset: 0x1FEDDA0 VA: 0x1FEDDA0
	public static Rect ConvertToPixels(Rect rect, int width, int height, bool round) { }

	// RVA: 0x1FEDF64 Offset: 0x1FEDF64 VA: 0x1FEDF64
	public static Rect MakePixelPerfect(Rect rect) { }

	// RVA: 0x1FEE078 Offset: 0x1FEE078 VA: 0x1FEE078
	public static Rect MakePixelPerfect(Rect rect, int width, int height) { }

	// RVA: 0x1FEE1E8 Offset: 0x1FEE1E8 VA: 0x1FEE1E8
	public static Vector2 ConstrainRect(Vector2 minRect, Vector2 maxRect, Vector2 minArea, Vector2 maxArea) { }

	// RVA: 0x1FEE304 Offset: 0x1FEE304 VA: 0x1FEE304
	public static Bounds CalculateAbsoluteWidgetBounds(Transform trans) { }

	// RVA: 0x1FEE690 Offset: 0x1FEE690 VA: 0x1FEE690
	public static Bounds CalculateRelativeWidgetBounds(Transform trans) { }

	// RVA: 0x1FEE934 Offset: 0x1FEE934 VA: 0x1FEE934
	public static Bounds CalculateRelativeWidgetBounds(Transform trans, bool considerInactive) { }

	// RVA: 0x1FEE944 Offset: 0x1FEE944 VA: 0x1FEE944
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content) { }

	// RVA: 0x1FEE6A0 Offset: 0x1FEE6A0 VA: 0x1FEE6A0
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content, bool considerInactive, bool considerParents = True) { }

	[DebuggerHiddenAttribute] // RVA: 0xD43FCC Offset: 0xD43FCC VA: 0xD43FCC
	[DebuggerStepThroughAttribute] // RVA: 0xD43FCC Offset: 0xD43FCC VA: 0xD43FCC
	// RVA: 0x1FEE950 Offset: 0x1FEE950 VA: 0x1FEE950
	private static void CalculateRelativeWidgetBounds(Transform content, bool considerInactive, bool isRoot, ref Matrix4x4 toLocal, ref Vector3 vMin, ref Vector3 vMax, ref bool isSet, bool considerParents) { }

	// RVA: 0x1FEEE60 Offset: 0x1FEEE60 VA: 0x1FEEE60
	public static Vector3 SpringDampen(ref Vector3 velocity, float strength, float deltaTime) { }

	// RVA: 0x1FEEFB4 Offset: 0x1FEEFB4 VA: 0x1FEEFB4
	public static Vector2 SpringDampen(ref Vector2 velocity, float strength, float deltaTime) { }

	// RVA: 0x1FEF0E8 Offset: 0x1FEF0E8 VA: 0x1FEF0E8
	public static float SpringLerp(float strength, float deltaTime) { }

	// RVA: 0x1FEF1DC Offset: 0x1FEF1DC VA: 0x1FEF1DC
	public static float SpringLerp(float from, float to, float strength, float deltaTime) { }

	// RVA: 0x1FEF2C8 Offset: 0x1FEF2C8 VA: 0x1FEF2C8
	public static Vector2 SpringLerp(Vector2 from, Vector2 to, float strength, float deltaTime) { }

	// RVA: 0x1FEF37C Offset: 0x1FEF37C VA: 0x1FEF37C
	public static Vector3 SpringLerp(Vector3 from, Vector3 to, float strength, float deltaTime) { }

	// RVA: 0x1FEF448 Offset: 0x1FEF448 VA: 0x1FEF448
	public static Quaternion SpringLerp(Quaternion from, Quaternion to, float strength, float deltaTime) { }

	// RVA: 0x1FEF51C Offset: 0x1FEF51C VA: 0x1FEF51C
	public static float RotateTowards(float from, float to, float maxAngle) { }

	// RVA: 0x1FEF618 Offset: 0x1FEF618 VA: 0x1FEF618
	private static float DistancePointToLineSegment(Vector2 point, Vector2 a, Vector2 b) { }

	// RVA: 0x1FEF894 Offset: 0x1FEF894 VA: 0x1FEF894
	public static float DistanceToRectangle(Vector2[] screenPoints, Vector2 mousePos) { }

	// RVA: 0x1FEFB70 Offset: 0x1FEFB70 VA: 0x1FEFB70
	public static float DistanceToRectangle(Vector3[] worldPoints, Vector2 mousePos, Camera cam) { }

	// RVA: 0x1FEFD04 Offset: 0x1FEFD04 VA: 0x1FEFD04
	public static Vector2 GetPivotOffset(UIWidget.Pivot pv) { }

	// RVA: 0x1FEFDA0 Offset: 0x1FEFDA0 VA: 0x1FEFDA0
	public static UIWidget.Pivot GetPivot(Vector2 offset) { }

	// RVA: 0x1FEFE1C Offset: 0x1FEFE1C VA: 0x1FEFE1C
	public static void MoveWidget(UIRect w, float x, float y) { }

	// RVA: 0x1FEFE20 Offset: 0x1FEFE20 VA: 0x1FEFE20
	public static void MoveRect(UIRect rect, float x, float y) { }

	// RVA: 0x1FF018C Offset: 0x1FF018C VA: 0x1FF018C
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight) { }

	// RVA: 0x1FF01A8 Offset: 0x1FF01A8 VA: 0x1FF01A8
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight, int maxWidth, int maxHeight) { }

	// RVA: 0x1FF0FBC Offset: 0x1FF0FBC VA: 0x1FF0FBC
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top) { }

	// RVA: 0x1FF0498 Offset: 0x1FF0498 VA: 0x1FF0498
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight) { }

	// RVA: 0x1FF04AC Offset: 0x1FF04AC VA: 0x1FF04AC
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight, int maxWidth, int maxHeight) { }

	// RVA: 0x1FF0FD8 Offset: 0x1FF0FD8 VA: 0x1FF0FD8
	public static int AdjustByDPI(float height) { }

	// RVA: 0x1FF109C Offset: 0x1FF109C VA: 0x1FF109C
	public static Vector2 ScreenToPixels(Vector2 pos, Transform relativeTo) { }

	// RVA: 0x1FF1500 Offset: 0x1FF1500 VA: 0x1FF1500
	public static Vector2 ScreenToParentPixels(Vector2 pos, Transform relativeTo) { }

	// RVA: 0x1FF1764 Offset: 0x1FF1764 VA: 0x1FF1764
	public static Vector3 WorldToLocalPoint(Vector3 worldPos, Camera worldCam, Camera uiCam, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xD44004 Offset: 0xD44004 VA: 0xD44004
	// RVA: 0x1FF18EC Offset: 0x1FF18EC VA: 0x1FF18EC
	public static void OverlayPosition(Transform trans, Vector3 worldPos, Camera worldCam, Camera myCam) { }

	[ExtensionAttribute] // RVA: 0xD44014 Offset: 0xD44014 VA: 0xD44014
	// RVA: 0x1FF1A5C Offset: 0x1FF1A5C VA: 0x1FF1A5C
	public static void OverlayPosition(Transform trans, Vector3 worldPos, Camera worldCam) { }

	[ExtensionAttribute] // RVA: 0xD44024 Offset: 0xD44024 VA: 0xD44024
	// RVA: 0x1FF1B90 Offset: 0x1FF1B90 VA: 0x1FF1B90
	public static void OverlayPosition(Transform trans, Transform target) { }
}

// Namespace: 
public static class NGUIText // TypeDefIndex: 12104
{
	// Fields
	public static UIFont bitmapFont; // 0x0
	public static Font dynamicFont; // 0x8
	public static NGUIText.GlyphInfo glyph; // 0x10
	public static int fontSize; // 0x18
	public static float fontScale; // 0x1C
	public static float pixelDensity; // 0x20
	public static FontStyle fontStyle; // 0x24
	public static NGUIText.Alignment alignment; // 0x28
	public static Color tint; // 0x2C
	public static int rectWidth; // 0x3C
	public static int rectHeight; // 0x40
	public static int regionWidth; // 0x44
	public static int regionHeight; // 0x48
	public static int maxLines; // 0x4C
	public static bool gradient; // 0x50
	public static Color gradientBottom; // 0x54
	public static Color gradientTop; // 0x64
	public static Color specificGradientBottom; // 0x74
	public static Color specificGradientTop; // 0x84
	public static Vector2 outlineDistance; // 0x94
	public static Color outlineEffect; // 0x9C
	public static bool encoding; // 0xAC
	public static float spacingX; // 0xB0
	public static float spacingY; // 0xB4
	public static bool premultiply; // 0xB8
	public static NGUIText.SymbolStyle symbolStyle; // 0xBC
	public static int finalSize; // 0xC0
	public static float finalSpacingX; // 0xC4
	public static float finalLineHeight; // 0xC8
	public static float baseline; // 0xCC
	public static bool useSymbols; // 0xD0
	private static Color mInvisible; // 0xD4
	private static BetterList<Color> mColors; // 0xE8
	private static BetterList<Color> mGradientColors; // 0xF0
	private static float mAlpha; // 0xF8
	private static CharacterInfo mTempChar; // 0xFC
	private static BetterList<float> mSizes; // 0x130
	private static Color32 s_c0; // 0x138
	private static Color32 s_c1; // 0x13C
	private static float[] mBoldOffset; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xCF18C8 Offset: 0xCF18C8 VA: 0xCF18C8
	private static Dictionary<string, int> <>f__switch$map1C; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xCF18D8 Offset: 0xCF18D8 VA: 0xCF18D8
	private static Dictionary<string, int> <>f__switch$map1D; // 0x150

	// Methods

	// RVA: 0x1FF1D1C Offset: 0x1FF1D1C VA: 0x1FF1D1C
	public static void Update() { }

	// RVA: 0x1FF1D7C Offset: 0x1FF1D7C VA: 0x1FF1D7C
	public static void Update(bool request) { }

	// RVA: 0x1FF2238 Offset: 0x1FF2238 VA: 0x1FF2238
	public static void Prepare(string text) { }

	// RVA: 0x1FF2340 Offset: 0x1FF2340 VA: 0x1FF2340
	public static BMSymbol GetSymbol(string text, int index, int textLength) { }

	// RVA: 0x1FF2458 Offset: 0x1FF2458 VA: 0x1FF2458
	public static float GetGlyphWidth(int ch, int prev) { }

	// RVA: 0x1FF26F4 Offset: 0x1FF26F4 VA: 0x1FF26F4
	public static NGUIText.GlyphInfo GetGlyph(int ch, int prev) { }

	[DebuggerHiddenAttribute] // RVA: 0xD44034 Offset: 0xD44034 VA: 0xD44034
	[DebuggerStepThroughAttribute] // RVA: 0xD44034 Offset: 0xD44034 VA: 0xD44034
	// RVA: 0x1FF32E0 Offset: 0x1FF32E0 VA: 0x1FF32E0
	public static float ParseAlpha(string text, int index) { }

	[DebuggerHiddenAttribute] // RVA: 0xD4406C Offset: 0xD4406C VA: 0xD4406C
	[DebuggerStepThroughAttribute] // RVA: 0xD4406C Offset: 0xD4406C VA: 0xD4406C
	// RVA: 0x1FF33AC Offset: 0x1FF33AC VA: 0x1FF33AC
	public static Color ParseColor(string text, int offset) { }

	[DebuggerHiddenAttribute] // RVA: 0xD440A4 Offset: 0xD440A4 VA: 0xD440A4
	[DebuggerStepThroughAttribute] // RVA: 0xD440A4 Offset: 0xD440A4 VA: 0xD440A4
	// RVA: 0x1FF3420 Offset: 0x1FF3420 VA: 0x1FF3420
	public static Color ParseColor24(string text, int offset) { }

	[DebuggerHiddenAttribute] // RVA: 0xD440DC Offset: 0xD440DC VA: 0xD440DC
	[DebuggerStepThroughAttribute] // RVA: 0xD440DC Offset: 0xD440DC VA: 0xD440DC
	// RVA: 0x1FF3574 Offset: 0x1FF3574 VA: 0x1FF3574
	public static Color ParseColor32(string text, int offset) { }

	[DebuggerHiddenAttribute] // RVA: 0xD44114 Offset: 0xD44114 VA: 0xD44114
	[DebuggerStepThroughAttribute] // RVA: 0xD44114 Offset: 0xD44114 VA: 0xD44114
	// RVA: 0x1FF3724 Offset: 0x1FF3724 VA: 0x1FF3724
	public static string EncodeColor(Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xD4414C Offset: 0xD4414C VA: 0xD4414C
	[DebuggerStepThroughAttribute] // RVA: 0xD4414C Offset: 0xD4414C VA: 0xD4414C
	// RVA: 0x1FF37D0 Offset: 0x1FF37D0 VA: 0x1FF37D0
	public static string EncodeColor(string text, Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xD44184 Offset: 0xD44184 VA: 0xD44184
	[DebuggerStepThroughAttribute] // RVA: 0xD44184 Offset: 0xD44184 VA: 0xD44184
	// RVA: 0x1FF3A48 Offset: 0x1FF3A48 VA: 0x1FF3A48
	public static string EncodeAlpha(float a) { }

	[DebuggerHiddenAttribute] // RVA: 0xD441BC Offset: 0xD441BC VA: 0xD441BC
	[DebuggerStepThroughAttribute] // RVA: 0xD441BC Offset: 0xD441BC VA: 0xD441BC
	// RVA: 0x1FF37B8 Offset: 0x1FF37B8 VA: 0x1FF37B8
	public static string EncodeColor24(Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xD441F4 Offset: 0xD441F4 VA: 0xD441F4
	[DebuggerStepThroughAttribute] // RVA: 0xD441F4 Offset: 0xD441F4 VA: 0xD441F4
	// RVA: 0x1FF3AD4 Offset: 0x1FF3AD4 VA: 0x1FF3AD4
	public static string EncodeColor32(Color c) { }

	// RVA: 0x1FF3AE8 Offset: 0x1FF3AE8 VA: 0x1FF3AE8
	public static bool ParseSymbol(string text, ref int index) { }

	[DebuggerHiddenAttribute] // RVA: 0xD4422C Offset: 0xD4422C VA: 0xD4422C
	[DebuggerStepThroughAttribute] // RVA: 0xD4422C Offset: 0xD4422C VA: 0xD4422C
	// RVA: 0x1FF509C Offset: 0x1FF509C VA: 0x1FF509C
	public static bool IsHex(char ch) { }

	// RVA: 0x1FF3BC4 Offset: 0x1FF3BC4 VA: 0x1FF3BC4
	public static bool ParseSymbol(string text, ref int index, BetterList<Color> colors, bool premultiply, ref int sub, ref bool bold, ref bool italic, ref bool underline, ref bool strike, ref bool ignoreColor, ref bool spGradient, ref bool isOutline, BetterList<Color> gradientColors) { }

	// RVA: 0x1FF50D8 Offset: 0x1FF50D8 VA: 0x1FF50D8
	public static string StripSymbols(string text) { }

	// RVA: 0x1FF5284 Offset: 0x1FF5284 VA: 0x1FF5284
	public static void Align(BetterList<Vector3> verts, int indexOffset, float printedWidth) { }

	// RVA: 0x1FF590C Offset: 0x1FF590C VA: 0x1FF590C
	public static int GetExactCharacterIndex(BetterList<Vector3> verts, BetterList<int> indices, Vector2 pos) { }

	// RVA: 0x1FF5A68 Offset: 0x1FF5A68 VA: 0x1FF5A68
	public static int GetApproximateCharacterIndex(BetterList<Vector3> verts, BetterList<int> indices, Vector2 pos) { }

	[DebuggerHiddenAttribute] // RVA: 0xD44264 Offset: 0xD44264 VA: 0xD44264
	[DebuggerStepThroughAttribute] // RVA: 0xD44264 Offset: 0xD44264 VA: 0xD44264
	// RVA: 0x1FF5BDC Offset: 0x1FF5BDC VA: 0x1FF5BDC
	private static bool IsSpace(int ch) { }

	[DebuggerHiddenAttribute] // RVA: 0xD4429C Offset: 0xD4429C VA: 0xD4429C
	[DebuggerStepThroughAttribute] // RVA: 0xD4429C Offset: 0xD4429C VA: 0xD4429C
	// RVA: 0x1FF5C08 Offset: 0x1FF5C08 VA: 0x1FF5C08
	public static void EndLine(ref StringBuilder s) { }

	[DebuggerHiddenAttribute] // RVA: 0xD442D4 Offset: 0xD442D4 VA: 0xD442D4
	[DebuggerStepThroughAttribute] // RVA: 0xD442D4 Offset: 0xD442D4 VA: 0xD442D4
	// RVA: 0x1FF5D28 Offset: 0x1FF5D28 VA: 0x1FF5D28
	private static void ReplaceSpaceWithNewline(ref StringBuilder s) { }

	// RVA: 0x1FF5E2C Offset: 0x1FF5E2C VA: 0x1FF5E2C
	public static Vector2 CalculatePrintedSize(string text) { }

	// RVA: 0x1FF630C Offset: 0x1FF630C VA: 0x1FF630C
	public static int CalculateOffsetToFit(string text) { }

	// RVA: 0x1FF6794 Offset: 0x1FF6794 VA: 0x1FF6794
	public static string GetEndOfLineThatFits(string text) { }

	// RVA: 0x1FF6844 Offset: 0x1FF6844 VA: 0x1FF6844
	public static bool WrapText(string text, out string finalText) { }

	// RVA: 0x1FF68BC Offset: 0x1FF68BC VA: 0x1FF68BC
	public static bool WrapText(string text, out string finalText, bool keepCharCount) { }

	// RVA: 0x1FF7450 Offset: 0x1FF7450 VA: 0x1FF7450
	public static void Print(string text, BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x1FFA1A8 Offset: 0x1FFA1A8 VA: 0x1FFA1A8
	public static void PrintApproximateCharacterPositions(string text, BetterList<Vector3> verts, BetterList<int> indices) { }

	// RVA: 0x1FFA944 Offset: 0x1FFA944 VA: 0x1FFA944
	public static void PrintExactCharacterPositions(string text, BetterList<Vector3> verts, BetterList<int> indices) { }

	// RVA: 0x1FFB048 Offset: 0x1FFB048 VA: 0x1FFB048
	public static void PrintCaretAndSelection(string text, int start, int end, BetterList<Vector3> caret, BetterList<Vector3> highlight) { }

	// RVA: 0x1FF9BE0 Offset: 0x1FF9BE0 VA: 0x1FF9BE0
	public static void ApplyEffect(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, int start, int end, float x, float y) { }

	// RVA: 0x1FFBF5C Offset: 0x1FFBF5C VA: 0x1FFBF5C
	public static Vector2 GetPosition(float angle, float radius) { }

	// RVA: 0x1FFC014 Offset: 0x1FFC014 VA: 0x1FFC014
	private static void .cctor() { }
}

// Namespace: 
public enum NGUIText.Alignment // TypeDefIndex: 12105
{
