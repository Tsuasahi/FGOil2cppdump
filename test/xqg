
	// RVA: 0xFCF450 Offset: 0xFCF450 VA: 0xFCF450
	public BattleCommandData[] GetBaseCommandCardData() { }

	// RVA: 0xFCF480 Offset: 0xFCF480 VA: 0xFCF480
	public void endSelectCommand() { }

	// RVA: 0xFCF5B8 Offset: 0xFCF5B8 VA: 0xFCF5B8
	protected void EndRequestBattleTurn(string result) { }

	// RVA: 0xFCF6C4 Offset: 0xFCF6C4 VA: 0xFCF6C4
	public void showCutIn(GameObject prefab) { }

	// RVA: 0xFCB798 Offset: 0xFCB798 VA: 0xFCB798
	public void sendEventFieldMotion(string str) { }

	// RVA: 0xFCF6D4 Offset: 0xFCF6D4 VA: 0xFCF6D4
	public void sendLocalEventFieldMotion(string str) { }

	// RVA: 0xFCF70C Offset: 0xFCF70C VA: 0xFCF70C
	public void endProc() { }

	// RVA: 0xFCF7B4 Offset: 0xFCF7B4 VA: 0xFCF7B4
	public void setBattleSpeed(float time) { }

	// RVA: 0xFCF85C Offset: 0xFCF85C VA: 0xFCF85C
	public void setInitpos() { }

	// RVA: 0xFCFAD8 Offset: 0xFCFAD8 VA: 0xFCFAD8
	public void setImmidianteEntryPos() { }

	// RVA: 0xFCFC2C Offset: 0xFCFC2C VA: 0xFCFC2C
	public void addActionData(BattleActionData[] adddatalist) { }

	// RVA: 0xFCFCA4 Offset: 0xFCFCA4 VA: 0xFCFCA4
	public void addActionData(BattleActionData adddata) { }

	// RVA: 0xFCFD68 Offset: 0xFCFD68 VA: 0xFCFD68
	public int checkActionCount() { }

	// RVA: 0xFCFDC8 Offset: 0xFCFDC8 VA: 0xFCFDC8
	public void PreloadFace(int svtId, int limitCount) { }

	// RVA: 0xFD0038 Offset: 0xFD0038 VA: 0xFD0038
	protected GameObject FetchStandFigure(int svtId, int limitCount, bool removeFromList = True) { }

	// RVA: 0xFD02D8 Offset: 0xFD02D8 VA: 0xFD02D8
	public BattleActionData getActionData() { }

	// RVA: 0xFD02E0 Offset: 0xFD02E0 VA: 0xFD02E0
	public void playActionData(BattleActionData adddata) { }

	// RVA: 0xFD04EC Offset: 0xFD04EC VA: 0xFD04EC
	protected void playActionDataLocal(BattleActionData adddata) { }

	// RVA: 0xFD0448 Offset: 0xFD0448 VA: 0xFD0448
	protected bool checkInterruptAction(BattleActionData nowAction) { }

	// RVA: 0xFD1788 Offset: 0xFD1788 VA: 0xFD1788
	public void playFieldSkillCutInActionData(bool isCamPlayer, bool isCamField) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA18 Offset: 0xCCBA18 VA: 0xCCBA18
	// RVA: 0xFD1280 Offset: 0xFD1280 VA: 0xFD1280
	private IEnumerator waitEndActionData(BattleActionData battleActionData) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA28 Offset: 0xCCBA28 VA: 0xCCBA28
	// RVA: 0xFD1684 Offset: 0xFD1684 VA: 0xFD1684
	private IEnumerator waitLoadImmediateEntryServant() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA38 Offset: 0xCCBA38 VA: 0xCCBA38
	// RVA: 0xFD16F4 Offset: 0xFD16F4 VA: 0xFD16F4
	private IEnumerator CoroutineWaitCond(BattleActionWaitCond.Base waitCond) { }

	// RVA: 0xFD1864 Offset: 0xFD1864 VA: 0xFD1864
	public void skipDead() { }

	// RVA: 0xFD1978 Offset: 0xFD1978 VA: 0xFD1978
	public void playBackStepMotion(int uniqueID) { }

	// RVA: 0xFD1AA0 Offset: 0xFD1AA0 VA: 0xFD1AA0
	public void endActionData() { }

	// RVA: 0xFD1E44 Offset: 0xFD1E44 VA: 0xFD1E44
	private void ClearActionBuffDataList(GameObject[] objList) { }

	// RVA: 0xFD201C Offset: 0xFD201C VA: 0xFD201C
	public void hideRUComboCutIn() { }

	// RVA: 0xFD20C8 Offset: 0xFD20C8 VA: 0xFD20C8
	public float GetEffectIntervalByFuncNum(int funcIndex) { }

	// RVA: 0xFD20E0 Offset: 0xFD20E0 VA: 0xFD20E0
	public float GetSideEffectInterval(BattleActionData actData, bool isAtkFirst, bool isAtkLast) { }

	// RVA: 0xFD214C Offset: 0xFD214C VA: 0xFD214C
	public bool ShowDamage(GameObject actObj, int nomalEffectId, int criticalEffectId, string attachNodename, int functionIndex, int startValue, int countValue, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion = False, bool isTreasureDevice = False, int[] changeMultipleEffectId, int[] changeMultipleCriticalEffectId) { }

	// RVA: 0xFD3F60 Offset: 0xFD3F60 VA: 0xFD3F60
	public int changeShowDamageEffect(int[] changEffectId, int targetId, int effectId) { }

	// RVA: 0xFD37F0 Offset: 0xFD37F0 VA: 0xFD37F0
	private DisplayEffectInheritData showAttackSideEffect(GameObject actObj, BattleActionData actData, bool isShowSideEffect, bool isTreasureDevice, string attachNodename, bool isCommandAfter, DisplayEffectInheritData effectInheritData) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA48 Offset: 0xCCBA48 VA: 0xCCBA48
	// RVA: 0xFD3C04 Offset: 0xFD3C04 VA: 0xFD3C04
	private IEnumerator corAfterMultiHit(BattleActionData actData, int index, int count, int funcIndex, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion, int maxMultiAtk, GameObject actObj, int lastHitCount, bool isTreasureDevice, string attachNodeName, bool ispopAdjustment = False) { }

	// RVA: 0xFD4090 Offset: 0xFD4090 VA: 0xFD4090
	public bool isMultiHit() { }

	// RVA: 0xFD40A0 Offset: 0xFD40A0 VA: 0xFD40A0
	public void finishMotion(BattleActorControl actor) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA58 Offset: 0xCCBA58 VA: 0xCCBA58
	// RVA: 0xFD4100 Offset: 0xFD4100 VA: 0xFD4100
	private IEnumerator corWaitMultiHit(BattleActorControl actor) { }

	// RVA: 0xFC6ECC Offset: 0xFC6ECC VA: 0xFC6ECC
	private void initRandomVector() { }

	// RVA: 0xFD4194 Offset: 0xFD4194 VA: 0xFD4194
	private Vector3 getPopRandomVector() { }

	// RVA: 0xFD3334 Offset: 0xFD3334 VA: 0xFD3334
	public BattleActionData.DamageData[] showDamageView(int funcIndex, BattleActionData bactData, int index, bool damageMotion, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion, int maxMultiAtk, bool isTreasureDevice = False, bool isExecViewAfter = True) { }

	// RVA: 0xFD46F0 Offset: 0xFD46F0 VA: 0xFD46F0
	private void ShowDamageViewAfter(BattleServantData atkSvtData, int index, BattleActionData.DamageData damageData) { }

	// RVA: 0xFD44D4 Offset: 0xFD44D4 VA: 0xFD44D4
	private void ShowDamageViewAfter(BattleServantData atkSvtData, BattleServantData defSvtData, BattleActorControl defActor, int index, int damage, BattleActionData.DamageData damageData) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA68 Offset: 0xCCBA68 VA: 0xCCBA68
	// RVA: 0xFD53DC Offset: 0xFD53DC VA: 0xFD53DC
	private IEnumerator InvokeAction(Action func, float waitTime) { }

	// RVA: 0xFD5470 Offset: 0xFD5470 VA: 0xFD5470
	public DisplayEffectInheritData showHeal(GameObject actObj, int funcIndex, BattleActionData inActData, bool isCommandAfter = False, DisplayEffectInheritData inherit) { }

	// RVA: 0xFD5610 Offset: 0xFD5610 VA: 0xFD5610
	private DisplayEffectInheritData ShowHealEffect(BattleActionData.HealData[] healList, GameObject actObj, int funcIndex, BattleActionData actData, bool isCommandAfter = False, DisplayEffectInheritData inherit, bool ispopAdjustment = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA78 Offset: 0xCCBA78 VA: 0xCCBA78
	// RVA: 0xFD5868 Offset: 0xFD5868 VA: 0xFD5868
	private IEnumerator ShowHealEffectProcWithDelay(float delayTime, BattleActionData.HealData healData, DisplayEffectArgument arg, BattleServantData svtData) { }

	// RVA: 0xFD5950 Offset: 0xFD5950 VA: 0xFD5950
	private void ShowHealEffectProc(BattleActionData.HealData healData, DisplayEffectArgument arg, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0xFD6F5C Offset: 0xFD6F5C VA: 0xFD6F5C
	public void RevivalSvtReset(BattleActionData actData, BattleServantData svt, BattleActorControl actor) { }

	// RVA: 0xFD721C Offset: 0xFD721C VA: 0xFD721C
	public bool IsHeal(int funcIndex, BattleActionData inActData) { }

	// RVA: 0xFD7340 Offset: 0xFD7340 VA: 0xFD7340
	public void showTotalDamage() { }

	// RVA: 0xFD7378 Offset: 0xFD7378 VA: 0xFD7378
	public void showNobleInfo(int treasureDeviceId = -1, int treasureDeviceLevel = 1, int treasureDevicePer = 100, bool isHide = False) { }

	// RVA: 0xFD7734 Offset: 0xFD7734 VA: 0xFD7734
	public void slientDead(GameObject actObj) { }

	// RVA: 0xFD7A34 Offset: 0xFD7A34 VA: 0xFD7A34
	private void CheckServantSlintDead(BattleActorControl actor) { }

	// RVA: 0xFD7BDC Offset: 0xFD7BDC VA: 0xFD7BDC
	private bool CheckDeadFunctionSkillMotion(BattleBuffData.BuffData[] deadBuffArray) { }

	// RVA: 0xFD7D54 Offset: 0xFD7D54 VA: 0xFD7D54
	private string GetOverChargeSpName(int npCharge) { }

	// RVA: 0xFD7E10 Offset: 0xFD7E10 VA: 0xFD7E10
	private void setPopUpObject(bool critical, bool weak, bool resist, BattleActorControl actor, int damage, BattleActionData.DamageData damageData, bool damageMotion, Vector3 randomVector, Vector3 damageNumberPosition, bool isNoDamageMotion, int npCharge) { }

	// RVA: 0xFD8C54 Offset: 0xFD8C54 VA: 0xFD8C54
	public void SetPopUpNodeObjectPosition(BattleActorControl actor, GameObject obj, Vector3 adjustVec, Transform node, Vector3 addPos) { }

	// RVA: 0xFD8AA8 Offset: 0xFD8AA8 VA: 0xFD8AA8
	public float GetBuffIconSize(GameObject obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA88 Offset: 0xCCBA88 VA: 0xCCBA88
	// RVA: 0xFD4304 Offset: 0xFD4304 VA: 0xFD4304
	public IEnumerator popDamageObject(BattleActorControl actor, int damage, BattleActionData.DamageData damageData, bool damageMotion, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion, bool isRandomTiming, float randomTime, int npCharge, bool randomPos = False, bool isTreasureDevice = False) { }

	// RVA: 0xFD6B6C Offset: 0xFD6B6C VA: 0xFD6B6C
	public void popHealObject(BattleActorControl actor, int heal, bool isOverCharge, int np, bool ispopAdjustment = False, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0xFD8A08 Offset: 0xFD8A08 VA: 0xFD8A08
	public void popCriticalTitle(BattleActorControl actor, BattleActionData.DamageData damageData) { }

	// RVA: 0xFD8EF0 Offset: 0xFD8EF0 VA: 0xFD8EF0
	public void popWeakTitle(BattleActorControl actor, Vector3 adjustVec, BattleActionData.DamageData damageData) { }

	// RVA: 0xFD8F80 Offset: 0xFD8F80 VA: 0xFD8F80
	public void popRegistTitle(BattleActorControl actor, Vector3 adjustVec, BattleActionData.DamageData damageData) { }

	// RVA: 0xFD8A84 Offset: 0xFD8A84 VA: 0xFD8A84
	public void popCriticalMissTitle(BattleActorControl actor) { }

	// RVA: 0xFD3DD8 Offset: 0xFD3DD8 VA: 0xFD3DD8
	public GameObject GetInvincibleAvoidEffect(BattleActionData.DamageHitType hitStat, GameObject actObj, BattleActionData.DamageData damageData) { }

	// RVA: 0xFD9010 Offset: 0xFD9010 VA: 0xFD9010
	private GameObject createPopEffect(BattleActorControl actor, BattleEffectControl.ID id, Vector3 adjustVec, Vector3 offSet, bool critical = False) { }

	// RVA: 0xFD92E4 Offset: 0xFD92E4 VA: 0xFD92E4
	public void changePopPosition(UIWidget widget, Vector3 offSet) { }

	// RVA: 0xFD9548 Offset: 0xFD9548 VA: 0xFD9548
	public void popBuffLabel(BattleActorControl actor, BattleActionData.BuffData buffData, Vector3 offset, int npCharge, bool ispopAdjustment = False, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0xFD9C44 Offset: 0xFD9C44 VA: 0xFD9C44
	public void popBuffLabel(Transform target, BattleActionData.BuffData buffData, int npCharge, Vector2 scl) { }

	// RVA: 0xFDA194 Offset: 0xFDA194 VA: 0xFDA194
	public void hideOverKillMessage() { }

	// RVA: 0xFD5500 Offset: 0xFD5500 VA: 0xFD5500
	private BattleActionData GetShowActionData(BattleActionData inActData, GameObject actObj) { }

	// RVA: 0xFD38F8 Offset: 0xFD38F8 VA: 0xFD38F8
	public DisplayEffectInheritData ShowAll(GameObject actObj, int funcIndex, BattleActionData inActData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", DisplayEffectInheritData inherit, bool ispopAdjustment = False) { }

	// RVA: 0xFDA480 Offset: 0xFDA480 VA: 0xFDA480
	public DisplayEffectInheritData ShowBuff(GameObject actObj, int funcIndex, BattleActionData inActData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", DisplayEffectInheritData inherit) { }

	// RVA: 0xFDA4C4 Offset: 0xFDA4C4 VA: 0xFDA4C4
	public DisplayEffectInheritData ShowBuff(GameObject actObj, int funcIndex, Vector3 buffOffset, Vector3 popupOffset, BattleActionData inActData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", int[] overwriteEffectIds, DisplayEffectInheritData inherit) { }

	// RVA: 0xFDA1C4 Offset: 0xFDA1C4 VA: 0xFDA1C4
	private DisplayEffectInheritData ShowBuffEffect(BattleActionData.BuffData[] buffList, GameObject actObj, int funcIndex, Vector3 buffOffset, Vector3 popupOffset, BattleActionData actData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", int[] overwriteEffectIds, DisplayEffectInheritData inherit, bool ispopAdjustment = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA98 Offset: 0xCCBA98 VA: 0xCCBA98
	// RVA: 0xFDA5C0 Offset: 0xFDA5C0 VA: 0xFDA5C0
	private IEnumerator ShowBuffEffectProcWithDelay(float delayTime, BattleActionData.BuffData buffData, DisplayEffectArgument arg, BattleServantData svtData) { }

	// RVA: 0xFD5BD0 Offset: 0xFD5BD0 VA: 0xFD5BD0
	private void ShowBuffEffectProc(BattleActionData.BuffData buffData, DisplayEffectArgument arg, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0xFDA75C Offset: 0xFDA75C VA: 0xFDA75C
	private void showActivateSideEffect(string attachNode) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBAA8 Offset: 0xCCBAA8 VA: 0xCCBAA8
	// RVA: 0xFDA6A8 Offset: 0xFDA6A8 VA: 0xFDA6A8
	private IEnumerator showActivateSideEffectWithDelay(string attachNode, float waitTime) { }

	// RVA: 0xFDAAF4 Offset: 0xFDAAF4 VA: 0xFDAAF4
	public bool IsNoEffectBuff(GameObject actObj, int funcIndex, BattleActionData inActData) { }

	// RVA: 0xFDAC5C Offset: 0xFDAC5C VA: 0xFDAC5C
	public void showActionMessage() { }

	// RVA: 0xFDAC60 Offset: 0xFDAC60 VA: 0xFDAC60
	public void showActionNobleTitle() { }

	// RVA: 0xFC0A7C Offset: 0xFC0A7C VA: 0xFC0A7C
	public void addCriticalPont(int count) { }

	// RVA: 0xFDACA8 Offset: 0xFDACA8 VA: 0xFDACA8
	public bool IsItemDrop() { }

	// RVA: 0xFDAD14 Offset: 0xFDAD14 VA: 0xFDAD14
	public void setPopObject(GameObject obj) { }

	// RVA: 0xFDADC0 Offset: 0xFDADC0 VA: 0xFDADC0
	public void startMovePopObject() { }

	// RVA: 0xFC745C Offset: 0xFC745C VA: 0xFC745C
	public void resetPopObject() { }

	// RVA: 0xFDB5CC Offset: 0xFDB5CC VA: 0xFDB5CC
	public void saveOriginalPos(GameObject obj, Vector3 currentPos, Vector3 originalPos) { }

	// RVA: 0xFDB6D0 Offset: 0xFDB6D0 VA: 0xFDB6D0
	public void resetOriginalPos() { }

	// RVA: 0xFD47CC Offset: 0xFD47CC VA: 0xFD47CC
	public GameObject dropCriticalPoint(Vector3 worldPos) { }

	// RVA: 0xFDB948 Offset: 0xFDB948 VA: 0xFDB948
	public GameObject dropGetItem(Transform tr, DropInfo dropInfo, int max, int index) { }

	// RVA: 0xFDBE14 Offset: 0xFDBE14 VA: 0xFDBE14
	public void dropGetServant(Transform tr, DropInfo dropInfo) { }

	// RVA: 0xFDC198 Offset: 0xFDC198 VA: 0xFDC198
	public void initActionBattle() { }

	// RVA: 0xFDC408 Offset: 0xFDC408 VA: 0xFDC408
	public BattleSelectServantWindow getSelectSvtWindow() { }

	// RVA: 0xFDC438 Offset: 0xFDC438 VA: 0xFDC438
	public void closeSelectSvtWindow() { }

	// RVA: 0xFDC470 Offset: 0xFDC470 VA: 0xFDC470
	public BattleSelectMainSubServantWindow getSelectMainSubSvtWindow() { }

	// RVA: 0xFDC4A0 Offset: 0xFDC4A0 VA: 0xFDC4A0
	public void closeSelectMainSubSvtWindow() { }

	// RVA: 0xFDC4D8 Offset: 0xFDC4D8 VA: 0xFDC4D8
	public void SetCloseSelectMainSubSvtWindow() { }

	// RVA: 0xFDC50C Offset: 0xFDC50C VA: 0xFDC50C
	public BattleSelectCommandTypeWindow getSelectCommandTypeWindow() { }

	// RVA: 0xFDC53C Offset: 0xFDC53C VA: 0xFDC53C
	public void SetCloseCommandTypeWindow() { }

	// RVA: 0xFDC570 Offset: 0xFDC570 VA: 0xFDC570
	public void closeSelectCommandTypeWindow() { }

	// RVA: 0xFDC5A8 Offset: 0xFDC5A8 VA: 0xFDC5A8
	public bool isOpenOrOpeningMainWindow() { }

	// RVA: 0xFDC5D8 Offset: 0xFDC5D8 VA: 0xFDC5D8
	public void playActionSkill() { }

	// RVA: 0xFDC768 Offset: 0xFDC768 VA: 0xFDC768
	public void endActionSkill() { }

	// RVA: 0xFDC7B0 Offset: 0xFDC7B0 VA: 0xFDC7B0
	public void endCommandSpell() { }

	// RVA: 0xFD0EEC Offset: 0xFD0EEC VA: 0xFD0EEC
	public void playBattleActionCutIn(BattleActionData adata) { }

	// RVA: 0xFDC9AC Offset: 0xFDC9AC VA: 0xFDC9AC
	private void PlayActionStartText(BattleActionData actionData, string text) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBAB8 Offset: 0xCCBAB8 VA: 0xCCBAB8
	// RVA: 0xFDCB04 Offset: 0xFDCB04 VA: 0xFDCB04
	private IEnumerator startAddAttackEffect(int actorId) { }

	// RVA: 0xFDCB98 Offset: 0xFDCB98 VA: 0xFDCB98
	public void playBigCutIn(int Id, int type, Vector3 inpos) { }

	// RVA: 0xFDC7F8 Offset: 0xFDC7F8 VA: 0xFDC7F8
	public GameObject playActorBigCutIn(string filename, Vector3 inpos, bool flg = True) { }

	// RVA: 0xFDCE04 Offset: 0xFDCE04 VA: 0xFDCE04
	private void resetLastCutInPanel(BattlePanelEvent pnl) { }

	// RVA: 0xFDCEA0 Offset: 0xFDCEA0 VA: 0xFDCEA0
	public void playMasterCutIn() { }

	// RVA: 0xFDD2A0 Offset: 0xFDD2A0 VA: 0xFDD2A0
	public void playMasterCommandSpellCutIn() { }

	// RVA: 0xFDD0C0 Offset: 0xFDD0C0 VA: 0xFDD0C0
	private void FollowObjPosition(GameObject obj) { }

	// RVA: 0xFD1314 Offset: 0xFD1314 VA: 0xFD1314
	public void playEnemyMasterCutIn() { }

	// RVA: 0xFDD4C0 Offset: 0xFDD4C0 VA: 0xFDD4C0
	public void playEnemyMasterCutInCallback() { }

	// RVA: 0xFDD250 Offset: 0xFDD250 VA: 0xFDD250
	public void playMasterCutInCallback() { }

	// RVA: 0xFDD89C Offset: 0xFDD89C VA: 0xFDD89C
	public void LoadFieldSkillCutInFromFsm(BattleActionData nowAction, Action callback) { }

	// RVA: 0xFDD9C8 Offset: 0xFDD9C8 VA: 0xFDD9C8
	private string ConnectPrefixSkillCutInVoiceStr(int svtId, int limitCount, string voiceStr, out string nothingPrefixLabel) { }

	// RVA: 0xFDDCDC Offset: 0xFDDCDC VA: 0xFDDCDC
	private void loadFieldSkillCutInVoices() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBAC8 Offset: 0xCCBAC8 VA: 0xCCBAC8
	// RVA: 0xFDDD64 Offset: 0xFDDD64 VA: 0xFDDD64
	private IEnumerator waitFieldSkillCutInVoicesLoading() { }

	// RVA: 0xFDDDD4 Offset: 0xFDDDD4 VA: 0xFDDDD4
	private void loadFieldSkillCutInFigurePrefab(string[] info, Vector3[] offsets, Vector3[] sizes, CutInEffectComponent comp) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBAD8 Offset: 0xCCBAD8 VA: 0xCCBAD8
	// RVA: 0xFDDE28 Offset: 0xFDDE28 VA: 0xFDDE28
	private IEnumerator waitFieldSkillCutInFigurePrefab(string[] info, Vector3[] offsets, Vector3[] sizes, CutInEffectComponent comp) { }

	// RVA: 0xFDDF0C Offset: 0xFDDF0C VA: 0xFDDF0C
	private bool tryGetInfoFromCutInPrefab(int idx, Vector3[] info, out Vector3 outInfo) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBAE8 Offset: 0xCCBAE8 VA: 0xCCBAE8
	// RVA: 0xFDE00C Offset: 0xFDE00C VA: 0xFDE00C
	private IEnumerator waitFieldSkillCutInVoicesAndImageAssets(Action callback) { }

	// RVA: 0xFDE0A0 Offset: 0xFDE0A0 VA: 0xFDE0A0
	public void PlayFieldSkillCutInFromFsm(BattleActionData nowAction, Action callback) { }

	// RVA: 0xFDE340 Offset: 0xFDE340 VA: 0xFDE340
	private void ShowSkillCutInMessage(int showMode, string message, int actorId, int skillLv) { }

	// RVA: 0xFDE494 Offset: 0xFDE494 VA: 0xFDE494
	public void ReleaseFieldSkillCutInFromFsm(BattleActionData nowAction) { }

	// RVA: 0xFDE710 Offset: 0xFDE710 VA: 0xFDE710
	public void finishFieldSkillCutInFromFsm() { }

	// RVA: 0xFDC620 Offset: 0xFDC620 VA: 0xFDC620
	public void changeAttackButton(bool flg, bool use, bool card) { }

	// RVA: 0xFDE79C Offset: 0xFDE79C VA: 0xFDE79C
	public void updateCommandCard() { }

	// RVA: 0xFDE808 Offset: 0xFDE808 VA: 0xFDE808
	public void checkRedrawCommandCard() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBAF8 Offset: 0xCCBAF8 VA: 0xCCBAF8
	// RVA: 0xFDE858 Offset: 0xFDE858 VA: 0xFDE858
	private IEnumerator delayDisableSystemFade(float waitEndProcTime) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB08 Offset: 0xCCBB08 VA: 0xCCBB08
	// RVA: 0xFDE8EC Offset: 0xFDE8EC VA: 0xFDE8EC
	private IEnumerator waitEndProc(GameObject obj, float time) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB18 Offset: 0xCCBB18 VA: 0xCCBB18
	// RVA: 0xFDE9A0 Offset: 0xFDE9A0 VA: 0xFDE9A0
	private IEnumerator waitEndProc(GameObject obj, AssetData asset, string path, float time, bool callEndProc) { }

	// RVA: 0xFDEAA0 Offset: 0xFDEAA0 VA: 0xFDEAA0
	private int getMoviePlayArrayIndex() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB28 Offset: 0xCCBB28 VA: 0xCCBB28
	// RVA: 0xFDEB5C Offset: 0xFDEB5C VA: 0xFDEB5C
	private IEnumerator delayDestory(GameObject obj, float time) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB38 Offset: 0xCCBB38 VA: 0xCCBB38
	// RVA: 0xFDEBF0 Offset: 0xFDEBF0 VA: 0xFDEBF0
	private IEnumerator delayDestory(GameObject obj, AssetData asset, string path, float time) { }

	// RVA: 0xFDECD8 Offset: 0xFDECD8 VA: 0xFDECD8
	public int getStartEffectId() { }

	// RVA: 0xFDED54 Offset: 0xFDED54 VA: 0xFDED54
	private void StopPlayingMovie() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB48 Offset: 0xCCBB48 VA: 0xCCBB48
	// RVA: 0xFDEDEC Offset: 0xFDEDEC VA: 0xFDEDEC
	public IEnumerator checkSkipStartQuest() { }

	// RVA: 0xFDEE5C Offset: 0xFDEE5C VA: 0xFDEE5C
	public void stopCheckSkipStartQuest() { }

	// RVA: 0xFDEE90 Offset: 0xFDEE90 VA: 0xFDEE90
	public void endStartWave(string endProc) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB58 Offset: 0xCCBB58 VA: 0xCCBB58
	// RVA: 0xFDEF14 Offset: 0xFDEF14 VA: 0xFDEF14
	public IEnumerator waitStartWaveDone(string endProc) { }

	// RVA: 0xFDEFA8 Offset: 0xFDEFA8 VA: 0xFDEFA8
	public bool isEnableSkipStartQuest() { }

	// RVA: 0xFDF3D8 Offset: 0xFDF3D8 VA: 0xFDF3D8
	public void ChangeBattleSpeedStepIn() { }

	// RVA: 0xFDF40C Offset: 0xFDF40C VA: 0xFDF40C
	public void ChangeBattleSpeed() { }

	// RVA: 0xFDF4F0 Offset: 0xFDF4F0 VA: 0xFDF4F0
	public void effectStartQuest() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB68 Offset: 0xCCBB68 VA: 0xCCBB68
	// RVA: 0xFDFE68 Offset: 0xFDFE68 VA: 0xFDFE68
	private IEnumerator waitMovieEndProc() { }

	// RVA: 0xFE0148 Offset: 0xFE0148 VA: 0xFE0148
	public void PlayStartMotionEffect(int startPhase, int endPhase, Action callback) { }

	// RVA: 0xFE0244 Offset: 0xFE0244 VA: 0xFE0244
	public void ReleaseStartMotionEffect() { }

	// RVA: 0xFE02F0 Offset: 0xFE02F0 VA: 0xFE02F0
	public void LoadStartMotionEffect(int startEffectId, Action callback) { }

	// RVA: 0xFDFED8 Offset: 0xFDFED8 VA: 0xFDFED8
	protected GameObject startBoostItemEffectItem(BattleBoostItemInfoData battleBoostItemInfo) { }

	// RVA: 0xFE052C Offset: 0xFE052C VA: 0xFE052C
	public void effectClearQuest() { }

	// RVA: 0xFE0530 Offset: 0xFE0530 VA: 0xFE0530
	public void effectOverQuest() { }

	// RVA: 0xFE05D8 Offset: 0xFE05D8 VA: 0xFE05D8
	public void playNoblePhantasm() { }

	// RVA: 0xFE063C Offset: 0xFE063C VA: 0xFE063C
	public void startNoblePhantasm() { }

	// RVA: 0xFE08A4 Offset: 0xFE08A4 VA: 0xFE08A4
	public void endNoblePhantasm(int tresureDeviceId) { }

	// RVA: 0xFE0C2C Offset: 0xFE0C2C VA: 0xFE0C2C
	private void ResetCacheRandomSeqId(BattleActorControl bac) { }

	// RVA: 0xFE0D40 Offset: 0xFE0D40 VA: 0xFE0D40
	private void sendEventFieldMotion_effectStartBattle(string eventName) { }

	// RVA: 0xFE0DE4 Offset: 0xFE0DE4 VA: 0xFE0DE4
	public void effectStartBattle() { }

	// RVA: 0xFE1328 Offset: 0xFE1328 VA: 0xFE1328
	public void effectNextBattle() { }

	// RVA: 0xFCCD18 Offset: 0xFCCD18 VA: 0xFCCD18
	public void effectWinBattle() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB78 Offset: 0xCCBB78 VA: 0xCCBB78
	// RVA: 0xFE135C Offset: 0xFE135C VA: 0xFE135C
	private IEnumerator coroutineEffectWinBattle(Action callback) { }

	// RVA: 0xFE13F0 Offset: 0xFE13F0 VA: 0xFE13F0
	private void startWinEffect() { }

	// RVA: 0xFE1574 Offset: 0xFE1574 VA: 0xFE1574
	public void ClearObjForceDestroy() { }

	// RVA: 0xFE15B0 Offset: 0xFE15B0 VA: 0xFE15B0
	public void effectLoseBattle() { }

	// RVA: 0xFCE418 Offset: 0xFCE418 VA: 0xFCE418
	public void effectFadeOut() { }

	// RVA: 0xFCBFA4 Offset: 0xFCBFA4 VA: 0xFCBFA4
	public void effectFadeIn() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB88 Offset: 0xCCBB88 VA: 0xCCBB88
	// RVA: 0xFE1794 Offset: 0xFE1794 VA: 0xFE1794
	private IEnumerator effectFadeInCoroutine() { }

	// RVA: 0xFE1804 Offset: 0xFE1804 VA: 0xFE1804
	public void PlaySeFadeIn() { }

	// RVA: 0xFE1930 Offset: 0xFE1930 VA: 0xFE1930
	public void effectBlack() { }

	// RVA: 0xFE122C Offset: 0xFE122C VA: 0xFE122C
	public void effectAlphaFadeIn() { }

	// RVA: 0xFE1288 Offset: 0xFE1288 VA: 0xFE1288
	public void effectFadeOff() { }

	// RVA: 0xFC6F00 Offset: 0xFC6F00 VA: 0xFC6F00
	private void playFadeAnimation(string name) { }

	// RVA: 0xFE15B4 Offset: 0xFE15B4 VA: 0xFE15B4
	private void setFadeAnimationDefaultSpeed(string name) { }

	// RVA: 0xFE1A74 Offset: 0xFE1A74 VA: 0xFE1A74
	public void setFadeAnimationSpeed() { }

	// RVA: 0xFE198C Offset: 0xFE198C VA: 0xFE198C
	public void ResetFadeBlackObj() { }

	// RVA: 0xFE1DBC Offset: 0xFE1DBC VA: 0xFE1DBC
	public void startBattleUIFade(float time, float targetAlpha) { }

	// RVA: 0xFC7CE4 Offset: 0xFC7CE4 VA: 0xFC7CE4
	public void loadBg(int No, int tp = 0) { }

	// RVA: 0xFC9338 Offset: 0xFC9338 VA: 0xFC9338
	public void changeBg(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }

	// RVA: 0xFE1E34 Offset: 0xFE1E34 VA: 0xFE1E34
	protected void OnEndChangeBg() { }

	// RVA: 0xFE1F00 Offset: 0xFE1F00 VA: 0xFE1F00
	public string[] getChangeBgList() { }

	// RVA: 0xFC7598 Offset: 0xFC7598 VA: 0xFC7598
	public void releaseChangeBgAssets() { }

	// RVA: 0xFE1F30 Offset: 0xFE1F30 VA: 0xFE1F30
	public string[] getFieldEffects() { }

	// RVA: 0xFE1F60 Offset: 0xFE1F60 VA: 0xFE1F60
	public void setFieldEffect(int type) { }

	// RVA: 0xFE1F98 Offset: 0xFE1F98 VA: 0xFE1F98
	public int getAmbientColors() { }

	// RVA: 0xFE1FC8 Offset: 0xFE1FC8 VA: 0xFE1FC8
	public void setAmbientColor(int index) { }

	// RVA: 0xFC6ED4 Offset: 0xFC6ED4 VA: 0xFC6ED4
	public void loadBattleResult() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBB98 Offset: 0xCCBB98 VA: 0xCCBB98
	// RVA: 0xFE2000 Offset: 0xFE2000 VA: 0xFE2000
	private IEnumerator coLoadBattleResult() { }

	// RVA: 0xFE2070 Offset: 0xFE2070 VA: 0xFE2070
	public void EndLoadBattleResult(AssetData data) { }

	// RVA: 0xFE2334 Offset: 0xFE2334 VA: 0xFE2334
	public void setResult(string str) { }

	// RVA: 0xFE2448 Offset: 0xFE2448 VA: 0xFE2448
	public void showResult(GameObject target, string endevent) { }

	// RVA: 0xFE2450 Offset: 0xFE2450 VA: 0xFE2450
	public void setResultData(string str, GameObject target, string endevent) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBBA8 Offset: 0xCCBBA8 VA: 0xCCBBA8
	// RVA: 0xFE24B4 Offset: 0xFE24B4 VA: 0xFE24B4
	public IEnumerator showBattleResultWait() { }

	// RVA: 0xFE2524 Offset: 0xFE2524 VA: 0xFE2524
	public void TestDispLog() { }

	// RVA: 0xFE262C Offset: 0xFE262C VA: 0xFE262C
	public void SetCameraFlip(bool flg) { }

	// RVA: 0xFE269C Offset: 0xFE269C VA: 0xFE269C
	public void FlipAll(bool isFlip) { }

	// RVA: 0xFE29A0 Offset: 0xFE29A0 VA: 0xFE29A0
	public void InitActorPosition() { }

	// RVA: 0xFE2AA0 Offset: 0xFE2AA0 VA: 0xFE2AA0
	public void startContinue(bool isProgress) { }

	// RVA: 0xFCCDA4 Offset: 0xFCCDA4 VA: 0xFCCDA4
	public void PlayActorsVoice(float rate, BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, Voice.BATTLE[] voices, int[] weightlist, float volume, Action callback, bool isAlive = True, bool enableChangeActor = True, bool isSaveVoicePlayed = False) { }

	// RVA: 0xFE2BAC Offset: 0xFE2BAC VA: 0xFE2BAC
	public void PlayActorsVoiceNp(float rate, BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, Voice.BATTLE[] voices, int[] weightlist, float volume, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0xFE2ED8 Offset: 0xFE2ED8 VA: 0xFE2ED8
	private bool IsChangeActorEnable(BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0xFE2B1C Offset: 0xFE2B1C VA: 0xFE2B1C
	private bool CheckActionTypeSkill() { }

	// RVA: 0xFDD5E0 Offset: 0xFDD5E0 VA: 0xFDD5E0
	public void PlayAnySkillVoice(Action _callback, float _volume = 1) { }

	// RVA: 0xFDD4E4 Offset: 0xFDD4E4 VA: 0xFDD4E4
	public bool isAnySkillVoice() { }

	// RVA: 0xFE3560 Offset: 0xFE3560 VA: 0xFE3560
	public SkillLvEntity getSkillLvEnt() { }

	// RVA: 0xFE344C Offset: 0xFE344C VA: 0xFE344C
	public CommandSpellEntity getCommandSpellEnt() { }

	// RVA: 0xFE3650 Offset: 0xFE3650 VA: 0xFE3650
	public void PlayAnyCommandSpellContinueVoice() { }

	// RVA: 0xFE38F4 Offset: 0xFE38F4 VA: 0xFE38F4
	public void callNpDamageVoice() { }

	// RVA: 0xFCD6DC Offset: 0xFCD6DC VA: 0xFCD6DC
	public void PlayActorsVoiceGroup(BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, int voiceType, float volume, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0xFE3ACC Offset: 0xFE3ACC VA: 0xFE3ACC
	public void setDamageVoiceFlg(bool flg) { }

	// RVA: 0xFE3C60 Offset: 0xFE3C60 VA: 0xFE3C60
	public void setDamageTargetVoiceFlg(bool flg) { }

	// RVA: 0xFE3E38 Offset: 0xFE3E38 VA: 0xFE3E38
	public void replaceMember(BattleActionData.ReplaceMember replaceData, Action endCallBack) { }

	// RVA: 0xFE3E80 Offset: 0xFE3E80 VA: 0xFE3E80
	public void SetDownloadEventSprite() { }

	// RVA: 0xFD0E24 Offset: 0xFD0E24 VA: 0xFD0E24
	public bool checkTimeScaleDead(BattleServantData svt) { }

	// RVA: 0xFD0E88 Offset: 0xFD0E88 VA: 0xFD0E88
	public bool checkTimeScaleTreasureDevice(BattleServantData svt) { }

	// RVA: 0xFE3EB0 Offset: 0xFE3EB0 VA: 0xFE3EB0
	public GameObject[] getOtherActorGameObjectList(BattleActorControl self) { }

	// RVA: 0xFE40D0 Offset: 0xFE40D0 VA: 0xFE40D0
	public void setStateString(int uniqueId, string infotext) { }

	// RVA: 0xFE4154 Offset: 0xFE4154 VA: 0xFE4154
	public void registerCameraAction(int uniqueId, int cameraId) { }

	// RVA: 0xFE419C Offset: 0xFE419C VA: 0xFE419C
	public void deleteCameraAction(int uniqueId, int cameraId) { }

	// RVA: 0xFE41E4 Offset: 0xFE41E4 VA: 0xFE41E4
	public void preLoadServantSet(BattleServantData svtData) { }

	// RVA: 0xFE421C Offset: 0xFE421C VA: 0xFE421C
	public void preLoadServantSet(ServantAssetArgs args) { }

	// RVA: 0xFC7058 Offset: 0xFC7058 VA: 0xFC7058
	public void unloadServantSet(BattleActorControl actor) { }

	// RVA: 0xFE4284 Offset: 0xFE4284 VA: 0xFE4284
	public void unloadServantSet(BattleServantData svtData, bool useIgnoreFlag = False) { }

	// RVA: 0xFE4358 Offset: 0xFE4358 VA: 0xFE4358
	public void unloadServantSet(ServantAssetArgs args, bool isIgnoreUnload = False) { }

	// RVA: 0xFE4468 Offset: 0xFE4468 VA: 0xFE4468
	public void unloadDeckActor(int index, BattleServantData svtData) { }

	// RVA: 0xFE4578 Offset: 0xFE4578 VA: 0xFE4578
	public void callServant(BattleActionData actionData) { }

	// RVA: 0xFE45B0 Offset: 0xFE45B0 VA: 0xFE45B0
	public void stepOutPT() { }

	// RVA: 0xFE4778 Offset: 0xFE4778 VA: 0xFE4778
	public void loadPt(Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBBB8 Offset: 0xCCBBB8 VA: 0xCCBBB8
	// RVA: 0xFE47A4 Offset: 0xFE47A4 VA: 0xFE47A4
	private IEnumerator corLoadPt(Action callback) { }

	// RVA: 0xFE4838 Offset: 0xFE4838 VA: 0xFE4838
	public int[] getFunctionList(GameObject actObj) { }

	// RVA: 0xFE4928 Offset: 0xFE4928 VA: 0xFE4928
	public int[] getFunctionListEx(GameObject actObj, out int displayFuncNum) { }

	// RVA: 0xFC6D4C Offset: 0xFC6D4C VA: 0xFC6D4C
	public void setUIEffectCamera(bool flg) { }

	// RVA: 0xFE4A24 Offset: 0xFE4A24 VA: 0xFE4A24
	public GameObject loadUIEffect(int id) { }

	// RVA: 0xFE4C9C Offset: 0xFE4C9C VA: 0xFE4C9C
	public void playBgAnimation(string key, string animName, float timeline) { }

	// RVA: 0xFE4CF4 Offset: 0xFE4CF4 VA: 0xFE4CF4
	public int getQuestPhaseScript(string key, int defaultValue) { }

	// RVA: 0xFE4D3C Offset: 0xFE4D3C VA: 0xFE4D3C
	public void changeShadowType(bool isNormal) { }

	// RVA: 0xFE4F00 Offset: 0xFE4F00 VA: 0xFE4F00
	public void setCallMotion(int index, BattleActorControl actor, GameObject mstObj, string eventName, bool fromServant = True) { }

	// RVA: 0xFE5028 Offset: 0xFE5028 VA: 0xFE5028
	public void playShiftEffect() { }

	// RVA: 0xFE50CC Offset: 0xFE50CC VA: 0xFE50CC
	public void playShiftServant() { }

	// RVA: 0xFE51E4 Offset: 0xFE51E4 VA: 0xFE51E4
	public void PlayShiftGaugeChange(string eventName) { }

	// RVA: 0xFE5308 Offset: 0xFE5308 VA: 0xFE5308
	public void SendActorFsmEvent(int uniqueId, string eventName) { }

	// RVA: 0xFE53FC Offset: 0xFE53FC VA: 0xFE53FC
	public void PlayShiftGaugeChangeServant(string eventName) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBBC8 Offset: 0xCCBBC8 VA: 0xCCBBC8
	// RVA: 0xFE545C Offset: 0xFE545C VA: 0xFE545C
	private IEnumerator ColShiftGaugeChangeServant(BattleActionData.ShiftServant shiftSvt, string eventName) { }

	// RVA: 0xFE5508 Offset: 0xFE5508 VA: 0xFE5508
	public void playChangeServant() { }

	// RVA: 0xFE56BC Offset: 0xFE56BC VA: 0xFE56BC
	public void playChangeBg() { }

	// RVA: 0xFE5838 Offset: 0xFE5838 VA: 0xFE5838
	public void endChangeBg() { }

	// RVA: 0xFC7D2C Offset: 0xFC7D2C VA: 0xFC7D2C
	public void LoadGimmickData(int gimmickId) { }

	// RVA: 0xFE5930 Offset: 0xFE5930 VA: 0xFE5930
	public GameObject CreateGimmickObj() { }

	// RVA: 0xFE59C8 Offset: 0xFE59C8 VA: 0xFE59C8
	public void ReleaseGimmickObj() { }

	// RVA: 0xFE5A34 Offset: 0xFE5A34 VA: 0xFE5A34
	public void ShowSkillMessage() { }

	// RVA: 0xFE5A6C Offset: 0xFE5A6C VA: 0xFE5A6C
	public GameObject getFieldMotionObject(string name) { }

	// RVA: 0xFE5AA4 Offset: 0xFE5AA4 VA: 0xFE5AA4
	public bool IsStep4FieldMotion() { }

	// RVA: 0xFD1928 Offset: 0xFD1928 VA: 0xFD1928
	public void startSkipDeadTemp() { }

	// RVA: 0xFE5AD4 Offset: 0xFE5AD4 VA: 0xFE5AD4
	public void checkChangeAppearance(Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBBD8 Offset: 0xCCBBD8 VA: 0xCCBBD8
	// RVA: 0xFE5C94 Offset: 0xFE5C94 VA: 0xFE5C94
	private IEnumerator startChangeAppearance(int[] tagetUniqueId, Action callback) { }

	// RVA: 0xFE5D40 Offset: 0xFE5D40 VA: 0xFE5D40
	public void noblePhantasmWhiteInFade(float fadeTime = 0.2, float uiFadeTime = 0.3) { }

	// RVA: 0xFD5358 Offset: 0xFD5358 VA: 0xFD5358
	private void updateConditionsBuff(BattleServantData svt) { }

	// RVA: 0xFE5E7C Offset: 0xFE5E7C VA: 0xFE5E7C
	public void AddCollider(MeshCollider collider, SkinnedMeshRenderer skinnedMesh, int uiColliderIndex, int svtId, Action callback, bool isEnableUiCollider) { }

	// RVA: 0xFE5EF4 Offset: 0xFE5EF4 VA: 0xFE5EF4
	public void RemoveCollider(MeshCollider collider) { }

	// RVA: 0xFE5F2C Offset: 0xFE5F2C VA: 0xFE5F2C
	public void SetMasterBuffEffectData(string popLabel, int popLabelColor, int[] effectList) { }

	// RVA: 0xFE5F3C Offset: 0xFE5F3C VA: 0xFE5F3C
	public void TdDelayEnd() { }

	// RVA: 0xFE5F9C Offset: 0xFE5F9C VA: 0xFE5F9C
	public void AllLoopEffectSwitch(bool isPlay, bool isNoblePhantasm) { }

	// RVA: 0xFE616C Offset: 0xFE616C VA: 0xFE616C
	public void SetActiveTutorialDialogMask(bool isActive) { }

	// RVA: 0xFE61A4 Offset: 0xFE61A4 VA: 0xFE61A4
	public void SelfDeadInNoblePhantasm(BattleActorControl actor) { }

	// RVA: 0xFE6268 Offset: 0xFE6268 VA: 0xFE6268
	public void HideMoveToSubMemberActor(BattleActorControl actor) { }

	// RVA: 0xFE66FC Offset: 0xFE66FC VA: 0xFE66FC
	public void SetEffectControlSpecialInvincibleObject(AssetData assetData) { }

	// RVA: 0xFE6794 Offset: 0xFE6794 VA: 0xFE6794
	public void PlayBuffInSkillCutInEffect(int functionIndex) { }

	// RVA: 0xFE6860 Offset: 0xFE6860 VA: 0xFE6860
	private bool IsTouchScreen() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBBE8 Offset: 0xCCBBE8 VA: 0xCCBBE8
	// RVA: 0xFDE2D0 Offset: 0xFDE2D0 VA: 0xFDE2D0
	private IEnumerator CheckQuestStartSkill() { }

	// RVA: 0xFE6880 Offset: 0xFE6880 VA: 0xFE6880
	public bool ExistsMessageObject() { }

	// RVA: 0xFE6AB8 Offset: 0xFE6AB8 VA: 0xFE6AB8
	public void StartLossCommandSpell() { }

	// RVA: 0xFE6BF0 Offset: 0xFE6BF0 VA: 0xFE6BF0
	private void EndLoadLossCommandSpellEffect(AssetData assetData) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBBF8 Offset: 0xCCBBF8 VA: 0xCCBBF8
	// RVA: 0xFE6C1C Offset: 0xFE6C1C VA: 0xFE6C1C
	private IEnumerator CoEndLoadLossCommandSpellEffect(AssetData assetData) { }

	// RVA: 0xFE6CB0 Offset: 0xFE6CB0 VA: 0xFE6CB0
	public void FieldCallServant() { }

	// RVA: 0xFE6CE8 Offset: 0xFE6CE8 VA: 0xFE6CE8
	public void FieldCallEffect(bool isBefore) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBC08 Offset: 0xCCBC08 VA: 0xCCBC08
	// RVA: 0xFE6DD0 Offset: 0xFE6DD0 VA: 0xFE6DD0
	private IEnumerator CoFieldCallEffect(int effectId, string sendEvent) { }

	// RVA: 0xFE6E7C Offset: 0xFE6E7C VA: 0xFE6E7C
	public bool CheckSpecifiedBattleStartVoice() { }

	// RVA: 0xFE6EFC Offset: 0xFE6EFC VA: 0xFE6EFC
	public void PlaySpecifiedBattleStartVoice(float volume, Action callback) { }

	// RVA: 0xFE70BC Offset: 0xFE70BC VA: 0xFE70BC
	public void DefenceTargetInitialize(int maxHp, int uiId) { }

	// RVA: 0xFE7144 Offset: 0xFE7144 VA: 0xFE7144
	public void DisplayDefenceTarget() { }

	// RVA: 0xFC7E38 Offset: 0xFC7E38 VA: 0xFC7E38
	private void SetBattleDefenceTargetData() { }

	// RVA: 0xFE7174 Offset: 0xFE7174 VA: 0xFE7174
	public void ShowDefenceTargetDamage(string damageSe) { }

	// RVA: 0xFCE818 Offset: 0xFCE818 VA: 0xFCE818
	public void UpdateDefenceTargetUiPosition(BattlePerformanceDefenceTarget.MoveToPositionType positionType) { }

	// RVA: 0xFCE850 Offset: 0xFCE850 VA: 0xFCE850
	public void SetDefenceTargetBattlePhaseEnd(bool isEnd) { }

	// RVA: 0xFE73A0 Offset: 0xFE73A0 VA: 0xFE73A0
	public void ShowDefenceTargetAddNoblePhantasmBuffEffect(BattleActorControl actor, int functionIndex, float waitTime, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBC18 Offset: 0xCCBC18 VA: 0xCCBC18
	// RVA: 0xFE7648 Offset: 0xFE7648 VA: 0xFE7648
	private IEnumerator CoShowDefenceTargetAddBuffEffect(int effectId, GameObject procObject, FunctionEntity funcEntity, int[] specialInvincibleBuff, float waitTime, Action callback) { }

	// RVA: 0xFE7764 Offset: 0xFE7764 VA: 0xFE7764
	private void PopupDefenceTargetBuffLabel(string popupLabel, int popupColor, int popupIconId) { }

	// RVA: 0xFE7C60 Offset: 0xFE7C60 VA: 0xFE7C60
	public bool ShowDefenceTargetGuardEffect(BattleActorControl actor) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBC28 Offset: 0xCCBC28 VA: 0xCCBC28
	// RVA: 0xFE7F74 Offset: 0xFE7F74 VA: 0xFE7F74
	private IEnumerator CoWaitGuardEffect(GameObject guardEffect, BattleBuffData.BuffData buffData) { }

	// RVA: 0xFDF2BC Offset: 0xFDF2BC VA: 0xFDF2BC
	public bool CheckStartEffectReleaseId() { }

	// RVA: 0xFE801C Offset: 0xFE801C VA: 0xFE801C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC38 Offset: 0xCCBC38 VA: 0xCCBC38
	// RVA: 0xFE80CC Offset: 0xFE80CC VA: 0xFE80CC
	private static void <PlayEventInfoPointGaugeEffect>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC48 Offset: 0xCCBC48 VA: 0xCCBC48
	// RVA: 0xFE80D0 Offset: 0xFE80D0 VA: 0xFE80D0
	private GameObject <LoadAiNpcPlayerActors>m__1(AiNpcBattleServantData npc) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC58 Offset: 0xCCBC58 VA: 0xCCBC58
	// RVA: 0xFE8108 Offset: 0xFE8108 VA: 0xFE8108
	private void <ChangeWaveBg>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC68 Offset: 0xCCBC68 VA: 0xCCBC68
	// RVA: 0xFE8110 Offset: 0xFE8110 VA: 0xFE8110
	private static void <PreloadFace>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC78 Offset: 0xCCBC78 VA: 0xCCBC78
	// RVA: 0xFE8114 Offset: 0xFE8114 VA: 0xFE8114
	private static void <playEnemyMasterCutIn>m__4() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC88 Offset: 0xCCBC88 VA: 0xCCBC88
	// RVA: 0xFE8180 Offset: 0xFE8180 VA: 0xFE8180
	private void <startWinEffect>m__5() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBC98 Offset: 0xCCBC98 VA: 0xCCBC98
	// RVA: 0xFE81E0 Offset: 0xFE81E0 VA: 0xFE81E0
	private void <effectFadeOff>m__6() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBCA8 Offset: 0xCCBCA8 VA: 0xCCBCA8
	// RVA: 0xFE8230 Offset: 0xFE8230 VA: 0xFE8230
	private void <EndLoadBattleResult>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBCB8 Offset: 0xCCBCB8 VA: 0xCCBCB8
	// RVA: 0xFE823C Offset: 0xFE823C VA: 0xFE823C
	private static void <PlayAnyCommandSpellContinueVoice>m__8() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBCC8 Offset: 0xCCBCC8 VA: 0xCCBCC8
	// RVA: 0xFE82A8 Offset: 0xFE82A8 VA: 0xFE82A8
	private static int <PlayActorsVoiceGroup>m__9(string a, string b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBCD8 Offset: 0xCCBCD8 VA: 0xCCBCD8
	// RVA: 0xFE8390 Offset: 0xFE8390 VA: 0xFE8390
	private void <LoadGimmickData>m__A(AssetData assetdata) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBCE8 Offset: 0xCCBCE8 VA: 0xCCBCE8
	// RVA: 0xFE8398 Offset: 0xFE8398 VA: 0xFE8398
	private static bool <HideMoveToSubMemberActor>m__B(BattleActionData.MoveToSubMember x) { }
}

// Namespace: 
public enum BattlePerformance.BattleUIPanel // TypeDefIndex: 8556
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformance.BattleUIPanel BackCom = 0;
	public const BattlePerformance.BattleUIPanel Command = 1;
	public const BattlePerformance.BattleUIPanel FrontCom = 2;
	public const BattlePerformance.BattleUIPanel PopUp = 3;
	public const BattlePerformance.BattleUIPanel Event = 4;
}

// Namespace: 
public enum BattlePerformance.ActorGroup // TypeDefIndex: 8557
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformance.ActorGroup Actor = 0;
	public const BattlePerformance.ActorGroup ActorsParty = 1;
	public const BattlePerformance.ActorGroup ActorsEnemy = 2;
	public const BattlePerformance.ActorGroup Players = 3;
	public const BattlePerformance.ActorGroup Enemies = 4;
	public const BattlePerformance.ActorGroup All = 5;
}

// Namespace: 
private enum BattlePerformance.PositionMode // TypeDefIndex: 8558
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformance.PositionMode BATTLE = 0;
	public const BattlePerformance.PositionMode TACTICAL = 1;
}

// Namespace: 
public enum BattlePerformance.playMovieType // TypeDefIndex: 8559
{
