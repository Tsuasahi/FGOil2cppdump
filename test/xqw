// Namespace: 
public class BattleFieldData.SaveData // TypeDefIndex: 8901
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC630D8 Offset: 0xC630D8 VA: 0xC630D8
	public AiState.SaveData aistateSave; // 0x10

	// Methods

	// RVA: 0x112EB68 Offset: 0x112EB68 VA: 0x112EB68
	public void .ctor() { }
}

// Namespace: 
public class BattleFieldEffectComponent : BaseMonoBehaviour // TypeDefIndex: 8902
{
	// Fields
	public Transform root2D; // 0x18
	public GameObject[] fieldeffect; // 0x20
	public Color[] ambientlist; // 0x28
	public int[] bglist; // 0x30
	private GameObject viewobject; // 0x38

	// Methods

	// RVA: 0x112F0AC Offset: 0x112F0AC VA: 0x112F0AC
	public void .ctor() { }

	// RVA: 0x112F0B4 Offset: 0x112F0B4 VA: 0x112F0B4
	public string[] getFieldEffects() { }

	// RVA: 0x112F1F4 Offset: 0x112F1F4 VA: 0x112F1F4
	public void setFieldEffect(int index) { }

	// RVA: 0x112F310 Offset: 0x112F310 VA: 0x112F310
	public int getAmbientColors() { }

	// RVA: 0x112F33C Offset: 0x112F33C VA: 0x112F33C
	public void setAmbientColor(int index) { }
}

// Namespace: 
public class BattleFieldMotionComponent : BaseMonoBehaviour // TypeDefIndex: 8903
{
	// Fields
	private BattlePerformance perf; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public Transform pop_playerTr; // 0x28
	public Transform pop_enemyTr; // 0x30
	public Transform[] battle_playerTr; // 0x38
	public Transform[] battle_enemyTr; // 0x40
	public Transform[] tactical_playerTr; // 0x48
	public Transform[] tactical_enemyTr; // 0x50
	public GameObject playerStage; // 0x58
	public GameObject enemyStage; // 0x60
	public GameObject tacticBg; // 0x68
	public Transform[] npcBattleTr; // 0x70
	public Transform[] npcTacticalTr; // 0x78
	private BattleActionData badata; // 0x80
	private bool flgStep; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC63110 Offset: 0xC63110 VA: 0xC63110
	[DebuggerBrowsableAttribute] // RVA: 0xC63110 Offset: 0xC63110 VA: 0xC63110
	private int <motionCompleteCount>k__BackingField; // 0x8C
	[CompilerGeneratedAttribute] // RVA: 0xC6314C Offset: 0xC6314C VA: 0xC6314C
	[DebuggerBrowsableAttribute] // RVA: 0xC6314C Offset: 0xC6314C VA: 0xC6314C
	private bool <isActiveMotion>k__BackingField; // 0x90
	private Queue<BattleActionData.ReplaceMember> replaceMember; // 0x98
	private string replaceEndEvent; // 0xA0
	private BattleActionData.ReplaceMember targetReplaceData; // 0xA8

	// Properties
	public BaseMotionSkip MotionSkip { get; }
	public int motionCompleteCount { get; set; }
	public bool isActiveMotion { get; set; }

	// Methods

	// RVA: 0x112F398 Offset: 0x112F398 VA: 0x112F398
	public void .ctor() { }

	// RVA: 0x112F408 Offset: 0x112F408 VA: 0x112F408
	public BaseMotionSkip get_MotionSkip() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCF50 Offset: 0xCCCF50 VA: 0xCCCF50
	// RVA: 0x112F438 Offset: 0x112F438 VA: 0x112F438
	public int get_motionCompleteCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCF60 Offset: 0xCCCF60 VA: 0xCCCF60
	// RVA: 0x112F440 Offset: 0x112F440 VA: 0x112F440
	private void set_motionCompleteCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCF70 Offset: 0xCCCF70 VA: 0xCCCF70
	// RVA: 0x112F448 Offset: 0x112F448 VA: 0x112F448
	public bool get_isActiveMotion() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCF80 Offset: 0xCCCF80 VA: 0xCCCF80
	// RVA: 0x112F450 Offset: 0x112F450 VA: 0x112F450
	protected void set_isActiveMotion(bool value) { }

	// RVA: 0x112F45C Offset: 0x112F45C VA: 0x112F45C
	public void setPerf(BattlePerformance inperf) { }

	// RVA: 0x111D1C4 Offset: 0x111D1C4 VA: 0x111D1C4
	public Transform getEnemyPopPoint(int index) { }

	// RVA: 0x112F52C Offset: 0x112F52C VA: 0x112F52C
	public Transform getPopEnemy() { }

	// RVA: 0x111D140 Offset: 0x111D140 VA: 0x111D140
	public Transform getPlayerPopTr(int index) { }

	// RVA: 0x112F534 Offset: 0x112F534 VA: 0x112F534
	public Transform getPopPlayer() { }

	// RVA: 0x112F53C Offset: 0x112F53C VA: 0x112F53C
	public Transform getPlayerTacticalTr(int index) { }

	// RVA: 0x112F5C0 Offset: 0x112F5C0 VA: 0x112F5C0
	public Transform getEnemyTacticalTr(int index) { }

	// RVA: 0x112F644 Offset: 0x112F644 VA: 0x112F644
	public Transform GetTargetTr(FieldMotionManager.GET_TYPE type, int index) { }

	// RVA: 0x112F6D0 Offset: 0x112F6D0 VA: 0x112F6D0
	public void sendEvent(string eventstr) { }

	// RVA: 0x112F708 Offset: 0x112F708 VA: 0x112F708
	public static string GetMotionName(BattleActionData baData) { }

	// RVA: 0x112F800 Offset: 0x112F800 VA: 0x112F800
	public void playBattleActionData(BattleActionData badata, string motionName) { }

	// RVA: 0x112F8BC Offset: 0x112F8BC VA: 0x112F8BC
	public void SetActiveMotion(bool active) { }

	// RVA: 0x112F8C8 Offset: 0x112F8C8 VA: 0x112F8C8
	public void procBuff() { }

	// RVA: 0x112F8CC Offset: 0x112F8CC VA: 0x112F8CC
	public void finishMotion() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCCF90 Offset: 0xCCCF90 VA: 0xCCCF90
	// RVA: 0x112F978 Offset: 0x112F978 VA: 0x112F978
	private IEnumerator CameraCoroutine() { }

	// RVA: 0x112F9F0 Offset: 0x112F9F0 VA: 0x112F9F0
	public void startReplaceActor(string endEvent) { }

	// RVA: 0x112FC08 Offset: 0x112FC08 VA: 0x112FC08
	public void loadReplaceActor(string endEvent) { }

	// RVA: 0x112FD40 Offset: 0x112FD40 VA: 0x112FD40
	public void loadReplace(string endEvent) { }

	// RVA: 0x112FDE0 Offset: 0x112FDE0 VA: 0x112FDE0
	public void endLoadReplaceActor() { }

	// RVA: 0x112FE18 Offset: 0x112FE18 VA: 0x112FE18
	public bool checkMotionEvent(string name) { }

	// RVA: 0x112FF30 Offset: 0x112FF30 VA: 0x112FF30
	public void startFieldStep() { }

	// RVA: 0x112FF3C Offset: 0x112FF3C VA: 0x112FF3C
	public void endFieldStep() { }

	// RVA: 0x112FF44 Offset: 0x112FF44 VA: 0x112FF44
	public bool isStep() { }

	// RVA: 0x112FF4C Offset: 0x112FF4C VA: 0x112FF4C
	public void resetMotionCompleteCount() { }

	// RVA: 0x112FF54 Offset: 0x112FF54 VA: 0x112FF54
	public void OnMotionComplete(string eventstr) { }

	// RVA: 0x112FF64 Offset: 0x112FF64 VA: 0x112FF64
	public void ptStepOut(string name) { }

	// RVA: 0x112FF94 Offset: 0x112FF94 VA: 0x112FF94
	public void loadPt(string name) { }

	// RVA: 0x1130074 Offset: 0x1130074 VA: 0x1130074
	public GameObject getGameObject(string name) { }

	// RVA: 0x111F100 Offset: 0x111F100 VA: 0x111F100
	public PlayMakerFSM getFsm() { }

	// RVA: 0x1130140 Offset: 0x1130140 VA: 0x1130140
	public void FieldCallServant() { }

	// RVA: 0x1130170 Offset: 0x1130170 VA: 0x1130170
	public void FieldCallEffect(bool isBefore) { }

	// RVA: 0x11301A8 Offset: 0x11301A8 VA: 0x11301A8
	public void DisplayDefenceTarget() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43DC4 Offset: 0xC43DC4 VA: 0xC43DC4
private sealed class BattleFieldMotionComponent.<CameraCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8904
{
	// Fields
	internal BattleFieldMotionComponent $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDADF0 Offset: 0xCDADF0 VA: 0xCDADF0
	// RVA: 0x112F9E8 Offset: 0x112F9E8 VA: 0x112F9E8
	public void .ctor() { }

	// RVA: 0x11301D8 Offset: 0x11301D8 VA: 0x11301D8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE00 Offset: 0xCDAE00 VA: 0xCDAE00
	// RVA: 0x1130318 Offset: 0x1130318 VA: 0x1130318 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE10 Offset: 0xCDAE10 VA: 0xCDAE10
	// RVA: 0x1130320 Offset: 0x1130320 VA: 0x1130320 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE20 Offset: 0xCDAE20 VA: 0xCDAE20
	// RVA: 0x1130328 Offset: 0x1130328 VA: 0x1130328 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE30 Offset: 0xCDAE30 VA: 0xCDAE30
	// RVA: 0x113033C Offset: 0x113033C VA: 0x113033C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43DD4 Offset: 0xC43DD4 VA: 0xC43DD4
private sealed class BattleFieldMotionComponent.<loadPt>c__AnonStorey1 // TypeDefIndex: 8905
{
	// Fields
	internal string name; // 0x10
	internal BattleFieldMotionComponent $this; // 0x18

	// Methods

	// RVA: 0x113006C Offset: 0x113006C VA: 0x113006C
	public void .ctor() { }

	// RVA: 0x11303A4 Offset: 0x11303A4 VA: 0x11303A4
	internal void <>m__0() { }
}

// Namespace: 
public class BattleFieldStatus : AiInterface // TypeDefIndex: 8906
{
	// Fields
	protected double[] wkZeroParam; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC63188 Offset: 0xC63188 VA: 0xC63188
	private static Predicate<BattleServantData> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC63198 Offset: 0xC63198 VA: 0xC63198
	private static Predicate<BattleServantData> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x11303F0 Offset: 0x11303F0 VA: 0x11303F0
	public void .ctor() { }

	// RVA: 0x1130450 Offset: 0x1130450 VA: 0x1130450 Slot: 6
	public virtual double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkparams) { }

	// RVA: 0x1130458 Offset: 0x1130458 VA: 0x1130458 Slot: 7
	public virtual bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }

	// RVA: 0x1130460 Offset: 0x1130460 VA: 0x1130460
	protected int CommonAliveCount(List<BattleServantData> datalist) { }

	// RVA: 0x113054C Offset: 0x113054C VA: 0x113054C
	protected int CommonRestCount(List<BattleServantData> datalist) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCFA0 Offset: 0xCCCFA0 VA: 0xCCCFA0
	// RVA: 0x1130634 Offset: 0x1130634 VA: 0x1130634
	private static bool <CommonAliveCount>m__0(BattleServantData p) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCFB0 Offset: 0xCCCFB0 VA: 0xCCCFB0
	// RVA: 0x1130694 Offset: 0x1130694 VA: 0x1130694
	private static bool <CommonRestCount>m__1(BattleServantData p) { }
}

// Namespace: 
public class BattleFriendshipRewardInfo // TypeDefIndex: 8907
{
	// Fields
	public bool isNew; // 0x10
	public long userSvtId; // 0x18
	public int mstGiftId; // 0x20
	public int type; // 0x24
	public int targetSvtId; // 0x28
	public int objectId; // 0x2C
	public int num; // 0x30
	public int limitCount; // 0x34
	public int lv; // 0x38
	public int rarity; // 0x3C

	// Methods

	// RVA: 0x11306F0 Offset: 0x11306F0 VA: 0x11306F0
	public void .ctor() { }

	// RVA: 0x11306F8 Offset: 0x11306F8 VA: 0x11306F8
	public GiftEntity getGiftEntity() { }

	// RVA: 0x11307A4 Offset: 0x11307A4 VA: 0x11307A4
	public bool isShow() { }
}

// Namespace: 
public class BattleHitStopControl : BaseMonoBehaviour // TypeDefIndex: 8908
{
	// Fields
	private List<GameObject> stopobjlist; // 0x18

	// Methods

	// RVA: 0x1130880 Offset: 0x1130880 VA: 0x1130880
	public void .ctor() { }

	// RVA: 0x1130888 Offset: 0x1130888 VA: 0x1130888
	private void Start() { }

	// RVA: 0x11308F0 Offset: 0x11308F0 VA: 0x11308F0
	public void Clear() { }

	// RVA: 0x1130950 Offset: 0x1130950 VA: 0x1130950
	public void setTargetObject(GameObject obj) { }

	// RVA: 0x11309C0 Offset: 0x11309C0 VA: 0x11309C0
	public void actWait(float time) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCCFC0 Offset: 0xCCCFC0 VA: 0xCCCFC0
	// RVA: 0x11309EC Offset: 0x11309EC VA: 0x11309EC
	private IEnumerator stopwaitCor(float time) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43DE4 Offset: 0xC43DE4 VA: 0xC43DE4
private sealed class BattleHitStopControl.<stopwaitCor>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8909
{
	// Fields
	internal List.Enumerator<GameObject> $locvar0; // 0x10
	internal float time; // 0x28
	internal List.Enumerator<GameObject> $locvar1; // 0x30
	internal BattleHitStopControl $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAE40 Offset: 0xCDAE40 VA: 0xCDAE40
	// RVA: 0x1130A80 Offset: 0x1130A80 VA: 0x1130A80
	public void .ctor() { }

	// RVA: 0x1130A88 Offset: 0x1130A88 VA: 0x1130A88 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE50 Offset: 0xCDAE50 VA: 0xCDAE50
	// RVA: 0x1130DA4 Offset: 0x1130DA4 VA: 0x1130DA4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE60 Offset: 0xCDAE60 VA: 0xCDAE60
	// RVA: 0x1130DAC Offset: 0x1130DAC VA: 0x1130DAC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE70 Offset: 0xCDAE70 VA: 0xCDAE70
	// RVA: 0x1130DB4 Offset: 0x1130DB4 VA: 0x1130DB4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAE80 Offset: 0xCDAE80 VA: 0xCDAE80
	// RVA: 0x1130DC8 Offset: 0x1130DC8 VA: 0x1130DC8 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleItemIconComponent : ItemIconComponent // TypeDefIndex: 8910
{
	// Fields
	public Color32 addCountColor; // 0x80
	public string addCountStr; // 0x88
	public Color darkModeColor; // 0x90
	private Color32 nowAddCountColor; // 0xA0

	// Methods

	// RVA: 0x1215380 Offset: 0x1215380 VA: 0x1215380
	public void .ctor() { }

	// RVA: 0x1215420 Offset: 0x1215420 VA: 0x1215420
	public void setCounterLabel(int type, int count, int addCount) { }

	// RVA: 0x12158D0 Offset: 0x12158D0 VA: 0x12158D0
	public void SetActiveDarkMode(bool isActive) { }
}

// Namespace: 
public class BattleLogData // TypeDefIndex: 8911
{
	// Fields
	private List<string> list; // 0x10
	private string tag; // 0x18
	private int max; // 0x20

	// Methods

	// RVA: 0x1215C2C Offset: 0x1215C2C VA: 0x1215C2C
	public void .ctor() { }

	// RVA: 0x1215CE8 Offset: 0x1215CE8 VA: 0x1215CE8
	public void .ctor(string intag) { }

	// RVA: 0x1215DA4 Offset: 0x1215DA4 VA: 0x1215DA4
	public void .ctor(string intag, int inmax) { }

	// RVA: 0x1215E68 Offset: 0x1215E68 VA: 0x1215E68
	public void addStr(string str) { }

	// RVA: 0x1215F74 Offset: 0x1215F74 VA: 0x1215F74
	public string[] getStringList() { }
}

// Namespace: 
public class BattleMotionSkipManager // TypeDefIndex: 8912
{
	// Fields
	private BaseMotionSkip defaultMotionSkip; // 0x10
	private BaseMotionSkip mainMotionSkip; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC631A8 Offset: 0xC631A8 VA: 0xC631A8
	[DebuggerBrowsableAttribute] // RVA: 0xC631A8 Offset: 0xC631A8 VA: 0xC631A8
	private BattlePerformance <Perf>k__BackingField; // 0x20

	// Properties
	public BaseMotionSkip Current { get; set; }
	public BattlePerformance Perf { get; set; }

	// Methods

	// RVA: 0xFBFF2C Offset: 0xFBFF2C VA: 0xFBFF2C
	public void .ctor(BattlePerformance perf) { }

	// RVA: 0xFBFFB0 Offset: 0xFBFFB0 VA: 0xFBFFB0
	private void set_Current(BaseMotionSkip value) { }

	// RVA: 0xFBFFB8 Offset: 0xFBFFB8 VA: 0xFBFFB8
	public BaseMotionSkip get_Current() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCFD0 Offset: 0xCCCFD0 VA: 0xCCCFD0
	// RVA: 0xFBFFA8 Offset: 0xFBFFA8 VA: 0xFBFFA8
	private void set_Perf(BattlePerformance value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCFE0 Offset: 0xCCCFE0 VA: 0xCCCFE0
	// RVA: 0xFBFFD0 Offset: 0xFBFFD0 VA: 0xFBFFD0
	public BattlePerformance get_Perf() { }

	// RVA: 0xFBFFD8 Offset: 0xFBFFD8 VA: 0xFBFFD8
	public void SetMotionSkip(BattleSkillInfoData skillInfo) { }

	// RVA: 0xFC003C Offset: 0xFC003C VA: 0xFC003C
	public void ReleaseMotionSkip() { }
}

// Namespace: 
public class BaseMotionSkip // TypeDefIndex: 8913
{
	// Properties
	public virtual bool IsSkipping { get; }
	public virtual float ResetTimeScaleDelayTime { get; }

	// Methods

	// RVA: 0xF68090 Offset: 0xF68090 VA: 0xF68090
	public void .ctor() { }

	// RVA: 0xF68098 Offset: 0xF68098 VA: 0xF68098 Slot: 4
	public virtual bool get_IsSkipping() { }

	// RVA: 0xF680A0 Offset: 0xF680A0 VA: 0xF680A0 Slot: 5
	public virtual float get_ResetTimeScaleDelayTime() { }

	// RVA: 0xF680A8 Offset: 0xF680A8 VA: 0xF680A8 Slot: 6
	public virtual void Init(BattleMotionSkipManager manager) { }

	// RVA: 0xF680AC Offset: 0xF680AC VA: 0xF680AC Slot: 7
	public virtual void Release() { }

	// RVA: 0xF680B0 Offset: 0xF680B0 VA: 0xF680B0 Slot: 8
	public virtual void MotionStart() { }

	// RVA: 0xF680B4 Offset: 0xF680B4 VA: 0xF680B4 Slot: 9
	public virtual void MotionEnd() { }

	// RVA: 0xF680B8 Offset: 0xF680B8 VA: 0xF680B8 Slot: 10
	public virtual float ConvertSkipDuration(float duration) { }
}

// Namespace: 
public class CommonMotionSkip : BaseMotionSkip // TypeDefIndex: 8914
{
	// Fields
	protected BattleMotionSkipManager manager; // 0x10
	protected BitValue<CommonMotionSkip.State> state; // 0x18
	protected Coroutine corInputWait; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC631E4 Offset: 0xC631E4 VA: 0xC631E4
	private static Func<CommonMotionSkip.State, int> <>f__am$cache0; // 0x0

	// Properties
	protected BattlePerformance Perf { get; }
	protected virtual float SkipTimeScale { get; }
	public override bool IsSkipping { get; }

	// Methods

	// RVA: 0xF3AA84 Offset: 0xF3AA84 VA: 0xF3AA84
	public void .ctor() { }

	// RVA: 0xF3AA8C Offset: 0xF3AA8C VA: 0xF3AA8C
	protected BattlePerformance get_Perf() { }

	// RVA: 0xF3AABC Offset: 0xF3AABC VA: 0xF3AABC Slot: 11
	protected virtual float get_SkipTimeScale() { }

	// RVA: 0xF3AAC4 Offset: 0xF3AAC4 VA: 0xF3AAC4 Slot: 4
	public override bool get_IsSkipping() { }

	// RVA: 0xF3AB28 Offset: 0xF3AB28 VA: 0xF3AB28 Slot: 6
	public override void Init(BattleMotionSkipManager manager) { }

	// RVA: 0xF3AC08 Offset: 0xF3AC08 VA: 0xF3AC08 Slot: 7
	public override void Release() { }

	// RVA: 0xF3ACD0 Offset: 0xF3ACD0 VA: 0xF3ACD0 Slot: 8
	public override void MotionStart() { }

	// RVA: 0xF3AE4C Offset: 0xF3AE4C VA: 0xF3AE4C Slot: 9
	public override void MotionEnd() { }

	// RVA: 0xF3AE50 Offset: 0xF3AE50 VA: 0xF3AE50 Slot: 10
	public override float ConvertSkipDuration(float duration) { }

	// RVA: 0xF3AEA0 Offset: 0xF3AEA0 VA: 0xF3AEA0 Slot: 12
	protected virtual void ExecSkip() { }

	// RVA: 0xF3AC78 Offset: 0xF3AC78 VA: 0xF3AC78
	protected void StopInputWaitCoroutine() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCCFF0 Offset: 0xCCCFF0 VA: 0xCCCFF0
	// RVA: 0xF3ADB8 Offset: 0xF3ADB8 VA: 0xF3ADB8
	protected IEnumerator CoroutineInputWait(BattleCallBackBase callback) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD000 Offset: 0xCCD000 VA: 0xCCD000
	// RVA: 0xF3AF54 Offset: 0xF3AF54 VA: 0xF3AF54
	private static int <Init>m__0(CommonMotionSkip.State state) { }
}

// Namespace: 
protected enum CommonMotionSkip.State // TypeDefIndex: 8915
{
	// Fields
	public int value__; // 0x0
	public const CommonMotionSkip.State SKIPPING = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43DF4 Offset: 0xC43DF4 VA: 0xC43DF4
private sealed class CommonMotionSkip.<CoroutineInputWait>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8916
{
	// Fields
	internal bool <isInputed>__1; // 0x10
	internal BattleCallBackBase callback; // 0x18
	internal CommonMotionSkip $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAE90 Offset: 0xCDAE90 VA: 0xCDAE90
	// RVA: 0xF3AF4C Offset: 0xF3AF4C VA: 0xF3AF4C
	public void .ctor() { }

	// RVA: 0xF3AF58 Offset: 0xF3AF58 VA: 0xF3AF58 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAEA0 Offset: 0xCDAEA0 VA: 0xCDAEA0
	// RVA: 0xF3B070 Offset: 0xF3B070 VA: 0xF3B070 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAEB0 Offset: 0xCDAEB0 VA: 0xCDAEB0
	// RVA: 0xF3B078 Offset: 0xF3B078 VA: 0xF3B078 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAEC0 Offset: 0xCDAEC0 VA: 0xCDAEC0
	// RVA: 0xF3B080 Offset: 0xF3B080 VA: 0xF3B080 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAED0 Offset: 0xCDAED0 VA: 0xCDAED0
	// RVA: 0xF3B094 Offset: 0xF3B094 VA: 0xF3B094 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class SkillMotionSkip : CommonMotionSkip // TypeDefIndex: 8917
{
	// Properties
	public override float ResetTimeScaleDelayTime { get; }

	// Methods

	// RVA: 0x174D9A8 Offset: 0x174D9A8 VA: 0x174D9A8
	public void .ctor() { }

	// RVA: 0x174D9B0 Offset: 0x174D9B0 VA: 0x174D9B0 Slot: 5
	public override float get_ResetTimeScaleDelayTime() { }

	// RVA: 0x174D9E0 Offset: 0x174D9E0 VA: 0x174D9E0 Slot: 7
	public override void Release() { }
}

// Namespace: 
public class BattleMoveObject : BaseMonoBehaviour // TypeDefIndex: 8918
{
	// Fields
	public Vector3 checkvec; // 0x18
	public Vector3 targetvec; // 0x24
	public Transform targetTr; // 0x30
	public GameObject destoryobject; // 0x38
	private bool dropflg; // 0x40
	private bool moveflg; // 0x41
	public BattleMoveObject.TYPE type; // 0x44
	private Rigidbody rigibody; // 0x48
	private Spawner spawner; // 0x50
	private Transform selfTransform; // 0x58
	private bool isNotTweenMove; // 0x60
	private BattleMoveObject.NotTweenInfo notTweenInfo; // 0x68
	private BattleMoveObject.EASING easingType; // 0x90
	public BattlePerformance perf; // 0x98
	public int count; // 0xA0

	// Methods

	// RVA: 0xFC0080 Offset: 0xFC0080 VA: 0xFC0080
	public void .ctor() { }

	// RVA: 0xFC0088 Offset: 0xFC0088 VA: 0xFC0088
	private void Start() { }

	// RVA: 0xFC0104 Offset: 0xFC0104 VA: 0xFC0104
	private void OnSpawn() { }

	// RVA: 0xFC011C Offset: 0xFC011C VA: 0xFC011C
	private void Update() { }

	// RVA: 0xFC0550 Offset: 0xFC0550 VA: 0xFC0550
	public void setTypeItem() { }

	// RVA: 0xFC055C Offset: 0xFC055C VA: 0xFC055C
	public bool isMoveToItems() { }

	// RVA: 0xFC056C Offset: 0xFC056C VA: 0xFC056C
	public void setAction(Vector3 vec) { }

	// RVA: 0xFC05C4 Offset: 0xFC05C4 VA: 0xFC05C4
	public void setTarget(Vector3 vec) { }

	// RVA: 0xFC05D0 Offset: 0xFC05D0 VA: 0xFC05D0
	public void setTargetTr(Transform tr) { }

	// RVA: 0xFC05D8 Offset: 0xFC05D8 VA: 0xFC05D8
	public void setParam(BattlePerformance perf, int count) { }

	// RVA: 0xFC05E4 Offset: 0xFC05E4 VA: 0xFC05E4
	public void startMoveTarget() { }

	// RVA: 0xFC07E4 Offset: 0xFC07E4 VA: 0xFC07E4
	public void onOpenComplete() { }

	// RVA: 0xFC0AE8 Offset: 0xFC0AE8 VA: 0xFC0AE8
	public Transform GetTransform() { }

	// RVA: 0xFC0B78 Offset: 0xFC0B78 VA: 0xFC0B78
	public void SetRigidbodyGravity(bool flg) { }

	// RVA: 0xFC0C3C Offset: 0xFC0C3C VA: 0xFC0C3C
	public void StartNotTweenMove(Vector3 from, Vector3 to, float time, float delay, Action<GameObject> callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD010 Offset: 0xCCD010 VA: 0xCCD010
	// RVA: 0xFC0CA8 Offset: 0xFC0CA8 VA: 0xFC0CA8
	private IEnumerator _StartNotTweenMove(float delay) { }

	// RVA: 0xFC0D44 Offset: 0xFC0D44 VA: 0xFC0D44
	public void SetEasingType(BattleMoveObject.EASING type) { }

	// RVA: 0xFC0504 Offset: 0xFC0504 VA: 0xFC0504
	private float easeInQuart(float start, float end, float value) { }

	// RVA: 0xFC0520 Offset: 0xFC0520 VA: 0xFC0520
	private float easeInBack(float start, float end, float value) { }
}

// Namespace: 
public enum BattleMoveObject.TYPE // TypeDefIndex: 8919
{
	// Fields
	public int value__; // 0x0
	public const BattleMoveObject.TYPE NONE = 0;
	public const BattleMoveObject.TYPE CRITICAL = 1;
	public const BattleMoveObject.TYPE ITEM = 2;
}

// Namespace: 
public enum BattleMoveObject.EASING // TypeDefIndex: 8920
{
	// Fields
	public int value__; // 0x0
	public const BattleMoveObject.EASING EASEINQUART = 0;
	public const BattleMoveObject.EASING EASEINBACK = 1;
}

// Namespace: 
public struct BattleMoveObject.NotTweenInfo // TypeDefIndex: 8921
{
	// Fields
	public Vector3 from; // 0x0
	public Vector3 to; // 0xC
	public float time; // 0x18
	public float startTime; // 0x1C
	public Action<GameObject> callback; // 0x20
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E04 Offset: 0xC43E04 VA: 0xC43E04
private sealed class BattleMoveObject.<_StartNotTweenMove>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8922
{
	// Fields
	internal float delay; // 0x10
	internal BattleMoveObject $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAEE0 Offset: 0xCDAEE0 VA: 0xCDAEE0
	// RVA: 0xFC0D3C Offset: 0xFC0D3C VA: 0xFC0D3C
	public void .ctor() { }

	// RVA: 0xFC0D4C Offset: 0xFC0D4C VA: 0xFC0D4C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAEF0 Offset: 0xCDAEF0 VA: 0xCDAEF0
	// RVA: 0xFC0E38 Offset: 0xFC0E38 VA: 0xFC0E38 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF00 Offset: 0xCDAF00 VA: 0xCDAF00
	// RVA: 0xFC0E40 Offset: 0xFC0E40 VA: 0xFC0E40 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF10 Offset: 0xCDAF10 VA: 0xCDAF10
	// RVA: 0xFC0E48 Offset: 0xFC0E48 VA: 0xFC0E48 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF20 Offset: 0xCDAF20 VA: 0xCDAF20
	// RVA: 0xFC0E5C Offset: 0xFC0E5C VA: 0xFC0E5C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePanelEvent : MonoBehaviour // TypeDefIndex: 8923
{
	// Fields
	public GameObject Panel; // 0x18

	// Methods

	// RVA: 0xFC2F6C Offset: 0xFC2F6C VA: 0xFC2F6C
	public void .ctor() { }

	// RVA: 0xFC2F74 Offset: 0xFC2F74 VA: 0xFC2F74
	private void OnDestroy() { }

	// RVA: 0xFC2F84 Offset: 0xFC2F84 VA: 0xFC2F84
	private void SetPanelActive() { }

	// RVA: 0xFC2F7C Offset: 0xFC2F7C VA: 0xFC2F7C
	private void SetPanelDisable() { }

	// RVA: 0xFC2F8C Offset: 0xFC2F8C VA: 0xFC2F8C
	private void SetPanelActive(bool flag) { }
}

// Namespace: 
public class BattleParamComponent : BaseMonoBehaviour // TypeDefIndex: 8924
{
	// Fields
	[SerializeField] // RVA: 0xC631F4 Offset: 0xC631F4 VA: 0xC631F4
	public float endtime; // 0x18
	[SerializeField] // RVA: 0xC63204 Offset: 0xC63204 VA: 0xC63204
	public float nextStepTime; // 0x1C
	[SerializeField] // RVA: 0xC63214 Offset: 0xC63214 VA: 0xC63214
	private string baseAnimationName; // 0x20
	[SerializeField] // RVA: 0xC63224 Offset: 0xC63224 VA: 0xC63224
	private int maxPhase; // 0x28
	[SerializeField] // RVA: 0xC63234 Offset: 0xC63234 VA: 0xC63234
	private int[] switchPhase; // 0x30
	[SerializeField] // RVA: 0xC63244 Offset: 0xC63244 VA: 0xC63244
	private string voiceDataStr; // 0x38
	private SimpleAnimation simpleAnim; // 0x40
	private Animation anim; // 0x48
	private int[] animationIds; // 0x50
	private int currentPhase; // 0x58
	private int switchIndex; // 0x5C
	private string voicePath; // 0x60
	private CommonEffectComponent commonEff; // 0x68

	// Methods

	// RVA: 0xFC303C Offset: 0xFC303C VA: 0xFC303C
	public void .ctor() { }

	// RVA: 0xFC30C4 Offset: 0xFC30C4 VA: 0xFC30C4
	private void Init() { }

	// RVA: 0xFC3154 Offset: 0xFC3154 VA: 0xFC3154
	public void SetInfo(int[] animationIds, int voiceId, Action callback) { }

	// RVA: 0xFC3288 Offset: 0xFC3288 VA: 0xFC3288
	public void Release() { }

	// RVA: 0xFC3354 Offset: 0xFC3354 VA: 0xFC3354
	public void PlayStartEffect(int start, int end, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD020 Offset: 0xCCD020 VA: 0xCCD020
	// RVA: 0xFC3380 Offset: 0xFC3380 VA: 0xFC3380
	private IEnumerator playingEffect(int start, int end, Action callback) { }

	// RVA: 0xFC344C Offset: 0xFC344C VA: 0xFC344C
	public void SetEndressFlg(bool flg) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E14 Offset: 0xC43E14 VA: 0xC43E14
private sealed class BattleParamComponent.<playingEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8925
{
	// Fields
	internal int start; // 0x10
	internal int end; // 0x14
	internal string <name>__1; // 0x18
	internal Action callback; // 0x20
	internal BattleParamComponent $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAF30 Offset: 0xCDAF30 VA: 0xCDAF30
	// RVA: 0xFC3444 Offset: 0xFC3444 VA: 0xFC3444
	public void .ctor() { }

	// RVA: 0xFC34FC Offset: 0xFC34FC VA: 0xFC34FC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF40 Offset: 0xCDAF40 VA: 0xCDAF40
	// RVA: 0xFC3A0C Offset: 0xFC3A0C VA: 0xFC3A0C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF50 Offset: 0xCDAF50 VA: 0xCDAF50
	// RVA: 0xFC3A14 Offset: 0xFC3A14 VA: 0xFC3A14 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF60 Offset: 0xCDAF60 VA: 0xCDAF60
	// RVA: 0xFC3A1C Offset: 0xFC3A1C VA: 0xFC3A1C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF70 Offset: 0xCDAF70 VA: 0xCDAF70
	// RVA: 0xFC3A30 Offset: 0xFC3A30 VA: 0xFC3A30 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleRaidInfo // TypeDefIndex: 8926
{
	// Fields
	public int day; // 0x10
	public int uniqueId; // 0x14
	public long maxHp; // 0x18
	public long totalDamage; // 0x20

	// Methods

	// RVA: 0x1151A7C Offset: 0x1151A7C VA: 0x1151A7C
	public void .ctor() { }
}

// Namespace: 
public class BattleRaidTurnStartEffect : MonoBehaviour // TypeDefIndex: 8927
{
	// Fields
	public bool animeStop; // 0x18

	// Methods

	// RVA: 0x1151A84 Offset: 0x1151A84 VA: 0x1151A84
	public void .ctor() { }

	// RVA: 0x1151A8C Offset: 0x1151A8C VA: 0x1151A8C
	public void setStopFlg(bool stopFlag) { }

	// RVA: 0x1151A98 Offset: 0x1151A98 VA: 0x1151A98
	public void waitLimitTurnEffect() { }

	// RVA: 0x11521C0 Offset: 0x11521C0 VA: 0x11521C0
	public void resumeLimitTurnEffect() { }
}

// Namespace: 
public class BattleRandom : SingletonMonoBehaviour<BattleRandom> // TypeDefIndex: 8928
{
	// Fields
	public Random logicrandom; // 0x18
	public Random gutsrandom; // 0x20
	public int logicCount; // 0x28
	public int gutsCount; // 0x2C

	// Methods

	// RVA: 0x11528F0 Offset: 0x11528F0 VA: 0x11528F0
	public void .ctor() { }

	// RVA: 0x1152940 Offset: 0x1152940 VA: 0x1152940
	public static void setSeed(int seed) { }

	// RVA: 0x1152A58 Offset: 0x1152A58 VA: 0x1152A58
	public static void adjustment() { }

	// RVA: 0x1152B6C Offset: 0x1152B6C VA: 0x1152B6C
	public static int getNext(int max) { }

	// RVA: 0x1152C70 Offset: 0x1152C70 VA: 0x1152C70
	public static int getGutsNext(int max) { }

	// RVA: 0x1152D70 Offset: 0x1152D70 VA: 0x1152D70
	public static int getRandom(int min, int max) { }

	// RVA: -1 Offset: -1
	public static T[] getShuffle<T>(T[] list) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2B1F354 Offset: 0x2B1F354 VA: 0x2B1F354
	|-BattleRandom.getShuffle<BattleCommandData>
	|-BattleRandom.getShuffle<BattleServantData>
	|-BattleRandom.getShuffle<object>
	|
	|-RVA: 0x2B1F1A4 Offset: 0x2B1F1A4 VA: 0x2B1F1A4
	|-BattleRandom.getShuffle<int>
	*/

	// RVA: 0x1152E88 Offset: 0x1152E88 VA: 0x1152E88
	public static void SetCount(int logic, int guts) { }

	// RVA: 0x1152F48 Offset: 0x1152F48 VA: 0x1152F48
	public static int GetLogicCount() { }

	// RVA: 0x1152FE8 Offset: 0x1152FE8 VA: 0x1152FE8
	public static int GetGutsCount() { }
}

// Namespace: 
public class BattleRandomSwitchObj : MonoBehaviour // TypeDefIndex: 8929
{
	// Fields
	[SerializeField] // RVA: 0xC63254 Offset: 0xC63254 VA: 0xC63254
	[TooltipAttribute] // RVA: 0xC63254 Offset: 0xC63254 VA: 0xC63254
	private BattleRandomSwitchObj.SwitchData[] switchDataArray; // 0x18
