
	// RVA: 0x22B7A54 Offset: 0x22B7A54 VA: 0x22B7A54
	public void .ctor(byte[] secret) { }

	// RVA: 0x22C7CD8 Offset: 0x22C7CD8 VA: 0x22C7CD8 Slot: 17
	public override void Initialize() { }

	// RVA: 0x22C7EE0 Offset: 0x22C7EE0 VA: 0x22C7EE0 Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x22C8348 Offset: 0x22C8348 VA: 0x22C8348 Slot: 14
	protected override void HashCore(byte[] array, int ibStart, int cbSize) { }

	// RVA: 0x22C83EC Offset: 0x22C83EC VA: 0x22C83EC
	public byte[] CreateSignature(RSA rsa) { }

	// RVA: 0x22BCF8C Offset: 0x22BCF8C VA: 0x22BCF8C
	public bool VerifySignature(RSA rsa, byte[] rgbSignature) { }

	// RVA: 0x22C7D48 Offset: 0x22C7D48 VA: 0x22C7D48
	private void initializePad() { }
}

// Namespace: Mono.Security.Protocol.Tls
public class SslServerStream : SslStreamBase // TypeDefIndex: 1915
{
	// Fields
	private CertificateValidationCallback ClientCertValidation; // 0x68
	private PrivateKeySelectionCallback PrivateKeySelection; // 0x70
	private CertificateValidationCallback2 ClientCertValidation2; // 0x78

	// Properties
	public X509Certificate ClientCertificate { get; }
	public CertificateValidationCallback ClientCertValidationDelegate { get; set; }
	public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate { get; set; }
	internal override bool HaveRemoteValidation2Callback { get; }

	// Methods

	// RVA: 0x22C8508 Offset: 0x22C8508 VA: 0x22C8508
	public void .ctor(Stream stream, X509Certificate serverCertificate) { }

	// RVA: 0x22C8534 Offset: 0x22C8534 VA: 0x22C8534
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool ownsStream) { }

	// RVA: 0x22C8548 Offset: 0x22C8548 VA: 0x22C8548
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate, bool ownsStream) { }

	// RVA: 0x22C851C Offset: 0x22C851C VA: 0x22C851C
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool ownsStream, SecurityProtocolType securityProtocolType) { }

	// RVA: 0x22C855C Offset: 0x22C855C VA: 0x22C855C
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate, bool ownsStream, SecurityProtocolType securityProtocolType) { }

	// RVA: 0x22C86D8 Offset: 0x22C86D8 VA: 0x22C86D8
	internal void add_ClientCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x22C879C Offset: 0x22C879C VA: 0x22C879C
	internal void remove_ClientCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x22C8860 Offset: 0x22C8860 VA: 0x22C8860
	internal void add_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x22C8924 Offset: 0x22C8924 VA: 0x22C8924
	internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x22C89E8 Offset: 0x22C89E8 VA: 0x22C89E8
	public void add_ClientCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x22C8AAC Offset: 0x22C8AAC VA: 0x22C8AAC
	public void remove_ClientCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x22C8B70 Offset: 0x22C8B70 VA: 0x22C8B70
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x22C8BE0 Offset: 0x22C8BE0 VA: 0x22C8BE0
	public CertificateValidationCallback get_ClientCertValidationDelegate() { }

	// RVA: 0x22C8BE8 Offset: 0x22C8BE8 VA: 0x22C8BE8
	public void set_ClientCertValidationDelegate(CertificateValidationCallback value) { }

	// RVA: 0x22BF8E8 Offset: 0x22BF8E8 VA: 0x22BF8E8
	public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate() { }

	// RVA: 0x22C8BF0 Offset: 0x22C8BF0 VA: 0x22C8BF0
	public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value) { }

	// RVA: 0x22C8BF8 Offset: 0x22C8BF8 VA: 0x22C8BF8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x22C8C70 Offset: 0x22C8C70 VA: 0x22C8C70 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x22C8CA0 Offset: 0x22C8CA0 VA: 0x22C8CA0 Slot: 29
	internal override IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state) { }

	// RVA: 0x22C8D9C Offset: 0x22C8D9C VA: 0x22C8D9C Slot: 30
	internal override void OnNegotiateHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x22C9470 Offset: 0x22C9470 VA: 0x22C9470 Slot: 31
	internal override X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x22C94D8 Offset: 0x22C94D8 VA: 0x22C94D8 Slot: 32
	internal override bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x22C9504 Offset: 0x22C9504 VA: 0x22C9504 Slot: 34
	internal override bool get_HaveRemoteValidation2Callback() { }

	// RVA: 0x22C9514 Offset: 0x22C9514 VA: 0x22C9514 Slot: 33
	internal override ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x22BCCDC Offset: 0x22BCCDC VA: 0x22BCCDC
	internal bool RaiseClientCertificateValidation(X509Certificate certificate, int[] certificateErrors) { }

	// RVA: 0x22C9528 Offset: 0x22C9528 VA: 0x22C9528 Slot: 35
	internal override AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x22BE134 Offset: 0x22BE134 VA: 0x22BE134
	internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost) { }
}

// Namespace: Mono.Security.Protocol.Tls
public abstract class SslStreamBase : Stream, IDisposable // TypeDefIndex: 1916
{
	// Fields
	private const int WaitTimeOut = 300000;
	private static ManualResetEvent record_processing; // 0x0
	internal Stream innerStream; // 0x10
	internal MemoryStream inputBuffer; // 0x18
	internal Context context; // 0x20
	internal RecordProtocol protocol; // 0x28
	internal bool ownsStream; // 0x30
	private bool disposed; // 0x31
	private bool checkCertRevocationStatus; // 0x32
	private object negotiate; // 0x38
	private object read; // 0x40
	private object write; // 0x48
	private ManualResetEvent negotiationComplete; // 0x50
	private byte[] recbuf; // 0x58
	private MemoryStream recordStream; // 0x60

	// Properties
	internal bool MightNeedHandshake { get; }
	internal abstract bool HaveRemoteValidation2Callback { get; }
	public bool CheckCertRevocationStatus { get; set; }
	public CipherAlgorithmType CipherAlgorithm { get; }
	public int CipherStrength { get; }
	public HashAlgorithmType HashAlgorithm { get; }
	public int HashStrength { get; }
	public int KeyExchangeStrength { get; }
	public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
	public SecurityProtocolType SecurityProtocol { get; }
	public X509Certificate ServerCertificate { get; }
	internal X509CertificateCollection ServerCertificates { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x22C69E0 Offset: 0x22C69E0 VA: 0x22C69E0
	protected void .ctor(Stream stream, bool ownsStream) { }

	// RVA: 0x22C953C Offset: 0x22C953C VA: 0x22C953C
	private static void .cctor() { }

	// RVA: 0x22C95AC Offset: 0x22C95AC VA: 0x22C95AC
	private void AsyncHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x22CA224 Offset: 0x22CA224 VA: 0x22CA224
	internal bool get_MightNeedHandshake() { }

	// RVA: 0x22CA2EC Offset: 0x22CA2EC VA: 0x22CA2EC
	internal void NegotiateHandshake() { }

	// RVA: -1 Offset: -1 Slot: 29
	internal abstract IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state);

	// RVA: -1 Offset: -1 Slot: 30
	internal abstract void OnNegotiateHandshakeCallback(IAsyncResult asyncResult);

	// RVA: -1 Offset: -1 Slot: 31
	internal abstract X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates);

	// RVA: -1 Offset: -1 Slot: 32
	internal abstract bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors);

	// RVA: -1 Offset: -1 Slot: 33
	internal abstract ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection);

	// RVA: -1 Offset: -1 Slot: 34
	internal abstract bool get_HaveRemoteValidation2Callback();

	// RVA: -1 Offset: -1 Slot: 35
	internal abstract AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost);

	// RVA: 0x22C7C94 Offset: 0x22C7C94 VA: 0x22C7C94
	internal X509Certificate RaiseLocalCertificateSelection(X509CertificateCollection certificates, X509Certificate remoteCertificate, string targetHost, X509CertificateCollection requestedCertificates) { }

	// RVA: 0x22C7C54 Offset: 0x22C7C54 VA: 0x22C7C54
	internal bool RaiseRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x22C7C74 Offset: 0x22C7C74 VA: 0x22C7C74
	internal ValidationResult RaiseRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x22C7CC8 Offset: 0x22C7CC8 VA: 0x22C7CC8
	internal AsymmetricAlgorithm RaiseLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x22CA838 Offset: 0x22CA838 VA: 0x22CA838
	public bool get_CheckCertRevocationStatus() { }

	// RVA: 0x22C0218 Offset: 0x22C0218 VA: 0x22C0218
	public void set_CheckCertRevocationStatus(bool value) { }

	// RVA: 0x22CA840 Offset: 0x22CA840 VA: 0x22CA840
	public CipherAlgorithmType get_CipherAlgorithm() { }

	// RVA: 0x22CA8D0 Offset: 0x22CA8D0 VA: 0x22CA8D0
	public int get_CipherStrength() { }

	// RVA: 0x22CA960 Offset: 0x22CA960 VA: 0x22CA960
	public HashAlgorithmType get_HashAlgorithm() { }

	// RVA: 0x22CA9F0 Offset: 0x22CA9F0 VA: 0x22CA9F0
	public int get_HashStrength() { }

	// RVA: 0x22CAA80 Offset: 0x22CAA80 VA: 0x22CAA80
	public int get_KeyExchangeStrength() { }

	// RVA: 0x22CAB4C Offset: 0x22CAB4C VA: 0x22CAB4C
	public ExchangeAlgorithmType get_KeyExchangeAlgorithm() { }

	// RVA: 0x22CABDC Offset: 0x22CABDC VA: 0x22CABDC
	public SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x22CAC44 Offset: 0x22CAC44 VA: 0x22CAC44
	public X509Certificate get_ServerCertificate() { }

	// RVA: 0x22CADC0 Offset: 0x22CADC0 VA: 0x22CADC0
	internal X509CertificateCollection get_ServerCertificates() { }

	// RVA: 0x22CA488 Offset: 0x22CA488 VA: 0x22CA488
	private bool BeginNegotiateHandshake(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x22CA768 Offset: 0x22CA768 VA: 0x22CA768
	private void EndNegotiateHandshake(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x22CAF88 Offset: 0x22CAF88 VA: 0x22CAF88 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x22C9CDC Offset: 0x22C9CDC VA: 0x22C9CDC
	private void InternalBeginRead(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x22CB284 Offset: 0x22CB284 VA: 0x22CB284
	private void InternalReadCallback(IAsyncResult result) { }

	// RVA: 0x22C99C8 Offset: 0x22C99C8 VA: 0x22C99C8
	private void InternalBeginWrite(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x22CBD14 Offset: 0x22CBD14 VA: 0x22CBD14
	private void InternalWriteCallback(IAsyncResult ar) { }

	// RVA: 0x22CBF34 Offset: 0x22CBF34 VA: 0x22CBF34 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x22CC114 Offset: 0x22CC114 VA: 0x22CC114 Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x22CC334 Offset: 0x22CC334 VA: 0x22CC334 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x22CC4F8 Offset: 0x22CC4F8 VA: 0x22CC4F8 Slot: 13
	public override void Close() { }

	// RVA: 0x22CC500 Offset: 0x22CC500 VA: 0x22CC500 Slot: 18
	public override void Flush() { }

	// RVA: 0x22CC540 Offset: 0x22CC540 VA: 0x22CC540
	public int Read(byte[] buffer) { }

	// RVA: 0x22CC588 Offset: 0x22CC588 VA: 0x22CC588 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x22CCFF4 Offset: 0x22CCFF4 VA: 0x22CCFF4 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x22CD05C Offset: 0x22CD05C VA: 0x22CD05C Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x22CD0C4 Offset: 0x22CD0C4 VA: 0x22CD0C4
	public void Write(byte[] buffer) { }

	// RVA: 0x22CD10C Offset: 0x22CD10C VA: 0x22CD10C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x22CD4FC Offset: 0x22CD4FC VA: 0x22CD4FC Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x22CD530 Offset: 0x22CD530 VA: 0x22CD530 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x22CD538 Offset: 0x22CD538 VA: 0x22CD538 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x22CD56C Offset: 0x22CD56C VA: 0x22CD56C Slot: 9
	public override long get_Length() { }

	// RVA: 0x22CD5D4 Offset: 0x22CD5D4 VA: 0x22CD5D4 Slot: 10
	public override long get_Position() { }

	// RVA: 0x22CD63C Offset: 0x22CD63C VA: 0x22CD63C Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x22C734C Offset: 0x22C734C VA: 0x22C734C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x22C71B4 Offset: 0x22C71B4 VA: 0x22C71B4 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x22CB200 Offset: 0x22CB200 VA: 0x22CB200
	private void resetBuffer() { }

	// RVA: 0x22CB168 Offset: 0x22CB168 VA: 0x22CB168
	internal void checkDisposed() { }
}

// Namespace: 
private class SslStreamBase.InternalAsyncResult : IAsyncResult // TypeDefIndex: 1917
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private bool completed; // 0x38
	private int _bytesRead; // 0x3C
	private bool _fromWrite; // 0x40
	private bool _proceedAfterHandshake; // 0x41
	private byte[] _buffer; // 0x48
	private int _offset; // 0x50
	private int _count; // 0x54

	// Properties
	public bool ProceedAfterHandshake { get; }
	public bool FromWrite { get; }
	public byte[] Buffer { get; }
	public int Offset { get; }
	public int Count { get; }
	public int BytesRead { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x22CA3C4 Offset: 0x22CA3C4 VA: 0x22CA3C4
	public void .ctor(AsyncCallback userCallback, object userState, byte[] buffer, int offset, int count, bool fromWrite, bool proceedAfterHandshake) { }

	// RVA: 0x22C99B8 Offset: 0x22C99B8 VA: 0x22C99B8
	public bool get_ProceedAfterHandshake() { }

	// RVA: 0x22C99C0 Offset: 0x22C99C0 VA: 0x22C99C0
	public bool get_FromWrite() { }

	// RVA: 0x22CB264 Offset: 0x22CB264 VA: 0x22CB264
	public byte[] get_Buffer() { }

	// RVA: 0x22CB26C Offset: 0x22CB26C VA: 0x22CB26C
	public int get_Offset() { }

	// RVA: 0x22CB1F8 Offset: 0x22CB1F8 VA: 0x22CB1F8
	public int get_Count() { }

	// RVA: 0x22CC32C Offset: 0x22CC32C VA: 0x22CC32C
	public int get_BytesRead() { }

	// RVA: 0x22CDB20 Offset: 0x22CDB20 VA: 0x22CDB20 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x22CAF80 Offset: 0x22CAF80 VA: 0x22CAF80
	public Exception get_AsyncException() { }

	// RVA: 0x22CAF24 Offset: 0x22CAF24 VA: 0x22CAF24
	public bool get_CompletedWithError() { }

	// RVA: 0x22CAE44 Offset: 0x22CAE44 VA: 0x22CAE44 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x22CDB28 Offset: 0x22CDB28 VA: 0x22CDB28 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x22CAE04 Offset: 0x22CAE04 VA: 0x22CAE04 Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0x22CDB30 Offset: 0x22CDB30 VA: 0x22CDB30
	private void SetComplete(Exception ex, int bytesRead) { }

	// RVA: 0x22CA21C Offset: 0x22CA21C VA: 0x22CA21C
	public void SetComplete(Exception ex) { }

	// RVA: 0x22CB274 Offset: 0x22CB274 VA: 0x22CB274
	public void SetComplete(int bytesRead) { }

	// RVA: 0x22CA210 Offset: 0x22CA210 VA: 0x22CA210
	public void SetComplete() { }
}

// Namespace: 
private sealed class SslStreamBase.AsyncHandshakeDelegate : MulticastDelegate // TypeDefIndex: 1918
{
	// Methods

	// RVA: 0x22CD6A4 Offset: 0x22CD6A4 VA: 0x22CD6A4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x22CD6B4 Offset: 0x22CD6B4 VA: 0x22CD6B4 Slot: 11
	public virtual void Invoke(SslStreamBase.InternalAsyncResult asyncResult, bool fromWrite) { }

	// RVA: 0x22CDA74 Offset: 0x22CDA74 VA: 0x22CDA74 Slot: 12
	public virtual IAsyncResult BeginInvoke(SslStreamBase.InternalAsyncResult asyncResult, bool fromWrite, AsyncCallback callback, object object) { }

	// RVA: 0x22CDB14 Offset: 0x22CDB14 VA: 0x22CDB14 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsCipherSuite : CipherSuite // TypeDefIndex: 1919
{
	// Fields
	private const int MacHeaderLength = 13;
	private byte[] header; // 0x80
	private object headerLock; // 0x88

	// Methods

	// RVA: 0x22CDC1C Offset: 0x22CDC1C VA: 0x22CDC1C
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x22CDD24 Offset: 0x22CDD24 VA: 0x22CDD24 Slot: 5
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x22CE07C Offset: 0x22CE07C VA: 0x22CE07C Slot: 4
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x22CE3D4 Offset: 0x22CE3D4 VA: 0x22CE3D4 Slot: 6
	public override void ComputeMasterSecret(byte[] preMasterSecret) { }

	// RVA: 0x22CE4E4 Offset: 0x22CE4E4 VA: 0x22CE4E4 Slot: 7
	public override void ComputeKeys() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class TlsClientSettings // TypeDefIndex: 1920
{
	// Fields
	private string targetHost; // 0x10
	private X509CertificateCollection certificates; // 0x18
	private X509Certificate clientCertificate; // 0x20
	private RSAManaged certificateRSA; // 0x28

	// Properties
	public string TargetHost { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public X509Certificate ClientCertificate { get; set; }
	public RSAManaged CertificateRSA { get; }

	// Methods

	// RVA: 0x22CECC0 Offset: 0x22CECC0 VA: 0x22CECC0
	public void .ctor() { }

	// RVA: 0x22B8514 Offset: 0x22B8514 VA: 0x22B8514
	public string get_TargetHost() { }

	// RVA: 0x22CED5C Offset: 0x22CED5C VA: 0x22CED5C
	public void set_TargetHost(string value) { }

	// RVA: 0x22BBEB4 Offset: 0x22BBEB4 VA: 0x22BBEB4
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x22CED64 Offset: 0x22CED64 VA: 0x22CED64
	public void set_Certificates(X509CertificateCollection value) { }

	// RVA: 0x22C710C Offset: 0x22C710C VA: 0x22C710C
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x22BCCEC Offset: 0x22BCCEC VA: 0x22BCCEC
	public void set_ClientCertificate(X509Certificate value) { }

	// RVA: 0x22BCF84 Offset: 0x22BCF84 VA: 0x22BCF84
	public RSAManaged get_CertificateRSA() { }

	// RVA: 0x22CED6C Offset: 0x22CED6C VA: 0x22CED6C
	public void UpdateCertificateRSA() { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal sealed class TlsException : Exception // TypeDefIndex: 1921
{
	// Fields
	private Alert alert; // 0x60

	// Properties
	public Alert Alert { get; }

	// Methods

	// RVA: 0x22BADE8 Offset: 0x22BADE8 VA: 0x22BADE8
	internal void .ctor(string message) { }

	// RVA: 0x22CEEE4 Offset: 0x22CEEE4 VA: 0x22CEEE4
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22CEEEC Offset: 0x22CEEEC VA: 0x22CEEEC
	internal void .ctor(string message, Exception ex) { }

	// RVA: 0x22C2EA4 Offset: 0x22C2EA4 VA: 0x22C2EA4
	internal void .ctor(AlertLevel level, AlertDescription description) { }

	// RVA: 0x22CEEF4 Offset: 0x22CEEF4 VA: 0x22CEEF4
	internal void .ctor(AlertLevel level, AlertDescription description, string message) { }

	// RVA: 0x22BC948 Offset: 0x22BC948 VA: 0x22BC948
	internal void .ctor(AlertDescription description) { }

	// RVA: 0x22B9A2C Offset: 0x22B9A2C VA: 0x22B9A2C
	internal void .ctor(AlertDescription description, string message) { }

	// RVA: 0x22C765C Offset: 0x22C765C VA: 0x22C765C
	public Alert get_Alert() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsServerSettings // TypeDefIndex: 1922
{
	// Fields
	private X509CertificateCollection certificates; // 0x10
	private RSA certificateRSA; // 0x18
	private RSAParameters rsaParameters; // 0x20
	private byte[] signedParams; // 0x60
	private string[] distinguisedNames; // 0x68
	private bool serverKeyExchange; // 0x70
	private bool certificateRequest; // 0x71
	private ClientCertificateType[] certificateTypes; // 0x78

	// Properties
	public bool ServerKeyExchange { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public RSA CertificateRSA { get; }
	public RSAParameters RsaParameters { get; set; }
	public byte[] SignedParams { get; set; }
	public bool CertificateRequest { get; set; }
	public ClientCertificateType[] CertificateTypes { get; set; }
	public string[] DistinguisedNames { get; set; }

	// Methods

	// RVA: 0x22CEF88 Offset: 0x22CEF88 VA: 0x22CEF88
	public void .ctor() { }

	// RVA: 0x22B88C0 Offset: 0x22B88C0 VA: 0x22B88C0
	public bool get_ServerKeyExchange() { }

	// RVA: 0x22BB840 Offset: 0x22BB840 VA: 0x22BB840
	public void set_ServerKeyExchange(bool value) { }

	// RVA: 0x22BE12C Offset: 0x22BE12C VA: 0x22BE12C
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x22B89E8 Offset: 0x22B89E8 VA: 0x22B89E8
	public void set_Certificates(X509CertificateCollection value) { }

	// RVA: 0x22B88EC Offset: 0x22B88EC VA: 0x22B88EC
	public RSA get_CertificateRSA() { }

	// RVA: 0x22B88C8 Offset: 0x22B88C8 VA: 0x22B88C8
	public RSAParameters get_RsaParameters() { }

	// RVA: 0x22BB84C Offset: 0x22BB84C VA: 0x22BB84C
	public void set_RsaParameters(RSAParameters value) { }

	// RVA: 0x22CEF90 Offset: 0x22CEF90 VA: 0x22CEF90
	public byte[] get_SignedParams() { }

	// RVA: 0x22BB860 Offset: 0x22BB860 VA: 0x22BB860
	public void set_SignedParams(byte[] value) { }

	// RVA: 0x22C7BD8 Offset: 0x22C7BD8 VA: 0x22C7BD8
	public bool get_CertificateRequest() { }

	// RVA: 0x22BA440 Offset: 0x22BA440 VA: 0x22BA440
	public void set_CertificateRequest(bool value) { }

	// RVA: 0x22BEC4C Offset: 0x22BEC4C VA: 0x22BEC4C
	public ClientCertificateType[] get_CertificateTypes() { }

	// RVA: 0x22BA430 Offset: 0x22BA430 VA: 0x22BA430
	public void set_CertificateTypes(ClientCertificateType[] value) { }

	// RVA: 0x22BEC54 Offset: 0x22BEC54 VA: 0x22BEC54
	public string[] get_DistinguisedNames() { }

	// RVA: 0x22BA438 Offset: 0x22BA438 VA: 0x22BA438
	public void set_DistinguisedNames(string[] value) { }

	// RVA: 0x22B89F0 Offset: 0x22B89F0 VA: 0x22B89F0
	public void UpdateCertificateRSA() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsStream : Stream // TypeDefIndex: 1923
{
	// Fields
	private const int temp_size = 4;
	private bool canRead; // 0x10
	private bool canWrite; // 0x11
	private MemoryStream buffer; // 0x18
	private byte[] temp; // 0x20

	// Properties
	public bool EOF { get; }
	public override bool CanWrite { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override long Position { get; set; }
	public override long Length { get; }

	// Methods

	// RVA: 0x22B8330 Offset: 0x22B8330 VA: 0x22B8330
	public void .ctor() { }

	// RVA: 0x22BB924 Offset: 0x22BB924 VA: 0x22BB924
	public void .ctor(byte[] data) { }

	// RVA: 0x22C20D8 Offset: 0x22C20D8 VA: 0x22C20D8
	public bool get_EOF() { }

	// RVA: 0x22CEF98 Offset: 0x22CEF98 VA: 0x22CEF98 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x22CEFA0 Offset: 0x22CEFA0 VA: 0x22CEFA0 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x22CEFA8 Offset: 0x22CEFA8 VA: 0x22CEFA8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x22CEFDC Offset: 0x22CEFDC VA: 0x22CEFDC Slot: 10
	public override long get_Position() { }

	// RVA: 0x22CF010 Offset: 0x22CF010 VA: 0x22CF010 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x22CF04C Offset: 0x22CF04C VA: 0x22CF04C Slot: 9
	public override long get_Length() { }

	// RVA: 0x22CF080 Offset: 0x22CF080 VA: 0x22CF080
	private byte[] ReadSmallValue(int length) { }

	// RVA: 0x22BA734 Offset: 0x22BA734 VA: 0x22BA734
	public byte ReadByte() { }

	// RVA: 0x22BA77C Offset: 0x22BA77C VA: 0x22BA77C
	public short ReadInt16() { }

	// RVA: 0x22B8CA8 Offset: 0x22B8CA8 VA: 0x22B8CA8
	public int ReadInt24() { }

	// RVA: 0x22CF1F0 Offset: 0x22CF1F0 VA: 0x22CF1F0
	public int ReadInt32() { }

	// RVA: 0x22B8D44 Offset: 0x22B8D44 VA: 0x22B8D44
	public byte[] ReadBytes(int count) { }

	// RVA: 0x22B851C Offset: 0x22B851C VA: 0x22B851C
	public void Write(byte value) { }

	// RVA: 0x22B824C Offset: 0x22B824C VA: 0x22B824C
	public void Write(short value) { }

	// RVA: 0x22BE764 Offset: 0x22BE764 VA: 0x22BE764
	public void WriteInt24(int value) { }

	// RVA: 0x22B83C8 Offset: 0x22B83C8 VA: 0x22B83C8
	public void Write(int value) { }

	// RVA: 0x22CF2B0 Offset: 0x22CF2B0 VA: 0x22CF2B0
	public void Write(ulong value) { }

	// RVA: 0x22B7B7C Offset: 0x22B7B7C VA: 0x22B7B7C
	public void Write(byte[] buffer) { }

	// RVA: 0x22B77C4 Offset: 0x22B77C4 VA: 0x22B77C4
	public void Reset() { }

	// RVA: 0x22B7B44 Offset: 0x22B7B44 VA: 0x22B7B44
	public byte[] ToArray() { }

	// RVA: 0x22CF2E0 Offset: 0x22CF2E0 VA: 0x22CF2E0 Slot: 18
	public override void Flush() { }

	// RVA: 0x22CF318 Offset: 0x22CF318 VA: 0x22CF318 Slot: 22
	public override void SetLength(long length) { }

	// RVA: 0x22CF358 Offset: 0x22CF358 VA: 0x22CF358 Slot: 21
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x22CF3A8 Offset: 0x22CF3A8 VA: 0x22CF3A8 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x22CF47C Offset: 0x22CF47C VA: 0x22CF47C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum ClientCertificateType // TypeDefIndex: 1924
{
	// Fields
	public int value__; // 0x0
	public const ClientCertificateType RSA = 1;
	public const ClientCertificateType DSS = 2;
	public const ClientCertificateType RSAFixed = 3;
	public const ClientCertificateType DSSFixed = 4;
	public const ClientCertificateType Unknown = 255;
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
internal abstract class HandshakeMessage : TlsStream // TypeDefIndex: 1925
{
	// Fields
	private Context context; // 0x28
	private HandshakeType handshakeType; // 0x30
	private ContentType contentType; // 0x31
	private byte[] cache; // 0x38

	// Properties
	public Context Context { get; }
	public HandshakeType HandshakeType { get; }
	public ContentType ContentType { get; }

	// Methods

	// RVA: 0x22B764C Offset: 0x22B764C VA: 0x22B764C
	public void .ctor(Context context, HandshakeType handshakeType) { }

	// RVA: 0x22BB8E4 Offset: 0x22BB8E4 VA: 0x22BB8E4
	public void .ctor(Context context, HandshakeType handshakeType, ContentType contentType) { }

	// RVA: 0x22B8928 Offset: 0x22B8928 VA: 0x22B8928
	public void .ctor(Context context, HandshakeType handshakeType, byte[] data) { }

	// RVA: 0x22B7A4C Offset: 0x22B7A4C VA: 0x22B7A4C
	public Context get_Context() { }

	// RVA: 0x22BB9D8 Offset: 0x22BB9D8 VA: 0x22BB9D8
	public HandshakeType get_HandshakeType() { }

	// RVA: 0x22BB9E0 Offset: 0x22BB9E0 VA: 0x22BB9E0
	public ContentType get_ContentType() { }

	// RVA: -1 Offset: -1 Slot: 29
	protected abstract void ProcessAsTls1();

	// RVA: -1 Offset: -1 Slot: 30
	protected abstract void ProcessAsSsl3();

	// RVA: 0x22BB9E8 Offset: 0x22BB9E8 VA: 0x22BB9E8
	public void Process() { }

	// RVA: 0x22B772C Offset: 0x22B772C VA: 0x22B772C Slot: 31
	public virtual void Update() { }

	// RVA: 0x22BBAC4 Offset: 0x22BBAC4 VA: 0x22BBAC4 Slot: 32
	public virtual byte[] EncodeMessage() { }

	// RVA: 0x22BAB48 Offset: 0x22BAB48 VA: 0x22BAB48
	public static bool Compare(byte[] buffer1, byte[] buffer2) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum HandshakeType // TypeDefIndex: 1926
{
	// Fields
	public byte value__; // 0x0
	public const HandshakeType HelloRequest = 0;
	public const HandshakeType ClientHello = 1;
	public const HandshakeType ServerHello = 2;
	public const HandshakeType Certificate = 11;
	public const HandshakeType ServerKeyExchange = 12;
	public const HandshakeType CertificateRequest = 13;
	public const HandshakeType ServerHelloDone = 14;
	public const HandshakeType CertificateVerify = 15;
	public const HandshakeType ClientKeyExchange = 16;
	public const HandshakeType Finished = 20;
	public const HandshakeType None = 255;
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificate : HandshakeMessage // TypeDefIndex: 1927
{
	// Fields
	private bool clientCertSelected; // 0x40
	private X509Certificate clientCert; // 0x48

	// Properties
	public X509Certificate ClientCertificate { get; }

	// Methods

	// RVA: 0x25FB13C Offset: 0x25FB13C VA: 0x25FB13C
	public void .ctor(Context context) { }

	// RVA: 0x25FCEB8 Offset: 0x25FCEB8 VA: 0x25FCEB8
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x25FD194 Offset: 0x25FD194 VA: 0x25FD194 Slot: 31
	public override void Update() { }

	// RVA: 0x25FCEF0 Offset: 0x25FCEF0 VA: 0x25FCEF0
	private void GetClientCertificate() { }

	// RVA: 0x25FD1C0 Offset: 0x25FD1C0 VA: 0x25FD1C0
	private void SendCertificates() { }

	// RVA: 0x25FD5F8 Offset: 0x25FD5F8 VA: 0x25FD5F8 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x25FD644 Offset: 0x25FD644 VA: 0x25FD644 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x25FD314 Offset: 0x25FD314 VA: 0x25FD314
	private X509Certificate FindParentCertificate(X509Certificate cert) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificateVerify : HandshakeMessage // TypeDefIndex: 1928
{
	// Methods

	// RVA: 0x25FB148 Offset: 0x25FB148 VA: 0x25FB148
	public void .ctor(Context context) { }

	// RVA: 0x25FD69C Offset: 0x25FD69C VA: 0x25FD69C Slot: 31
	public override void Update() { }

	// RVA: 0x25FD6C8 Offset: 0x25FD6C8 VA: 0x25FD6C8 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x25FDD50 Offset: 0x25FDD50 VA: 0x25FDD50 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x25FDB30 Offset: 0x25FDB30 VA: 0x25FDB30
	private RSA getClientCertRSA(RSA privKey) { }

	// RVA: 0x25FE1A4 Offset: 0x25FE1A4 VA: 0x25FE1A4
	private byte[] getUnsignedBigInteger(byte[] integer) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientFinished : HandshakeMessage // TypeDefIndex: 1929
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods

	// RVA: 0x22B761C Offset: 0x22B761C VA: 0x22B761C
	public void .ctor(Context context) { }

	// RVA: 0x22B768C Offset: 0x22B768C VA: 0x22B768C
	private static void .cctor() { }

	// RVA: 0x22B7708 Offset: 0x22B7708 VA: 0x22B7708 Slot: 31
	public override void Update() { }

	// RVA: 0x22B7828 Offset: 0x22B7828 VA: 0x22B7828 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x22B7BC4 Offset: 0x22B7BC4 VA: 0x22B7BC4 Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientHello : HandshakeMessage // TypeDefIndex: 1930
{
	// Fields
	private byte[] random; // 0x40

	// Methods

	// RVA: 0x22B7D3C Offset: 0x22B7D3C VA: 0x22B7D3C
	public void .ctor(Context context) { }

	// RVA: 0x22B7D6C Offset: 0x22B7D6C VA: 0x22B7D6C Slot: 31
	public override void Update() { }

	// RVA: 0x22B7EA0 Offset: 0x22B7EA0 VA: 0x22B7EA0 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x22B7EB0 Offset: 0x22B7EB0 VA: 0x22B7EB0 Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientKeyExchange : HandshakeMessage // TypeDefIndex: 1931
{
	// Methods

	// RVA: 0x22B85CC Offset: 0x22B85CC VA: 0x22B85CC
	public void .ctor(Context context) { }

	// RVA: 0x22B85FC Offset: 0x22B85FC VA: 0x22B85FC Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x22B88B8 Offset: 0x22B88B8 VA: 0x22B88B8 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x22B8604 Offset: 0x22B8604 VA: 0x22B8604
	public void ProcessCommon(bool sendLength) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificate : HandshakeMessage // TypeDefIndex: 1932
{
	// Fields
	private X509CertificateCollection certificates; // 0x40

	// Methods

	// RVA: 0x22B88F4 Offset: 0x22B88F4 VA: 0x22B88F4
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x22B8964 Offset: 0x22B8964 VA: 0x22B8964 Slot: 31
	public override void Update() { }

	// RVA: 0x22B8B88 Offset: 0x22B8B88 VA: 0x22B8B88 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x22B8B98 Offset: 0x22B8B98 VA: 0x22B8B98 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x22B9598 Offset: 0x22B9598 VA: 0x22B9598
	private bool checkCertificateUsage(X509Certificate cert) { }

	// RVA: 0x22B8E18 Offset: 0x22B8E18 VA: 0x22B8E18
	private void validateCertificates(X509CertificateCollection certificates) { }

	// RVA: 0x22B9AB0 Offset: 0x22B9AB0 VA: 0x22B9AB0
	private bool checkServerIdentity(X509Certificate cert) { }

	// RVA: 0x22BA0EC Offset: 0x22BA0EC VA: 0x22BA0EC
	private bool checkDomainName(string subjectName) { }

	// RVA: 0x22B9D50 Offset: 0x22B9D50 VA: 0x22B9D50
	private static bool Match(string hostname, string pattern) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificateRequest : HandshakeMessage // TypeDefIndex: 1933
{
	// Fields
	private ClientCertificateType[] certificateTypes; // 0x40
	private string[] distinguisedNames; // 0x48

	// Methods

	// RVA: 0x22BA344 Offset: 0x22BA344 VA: 0x22BA344
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x22BA378 Offset: 0x22BA378 VA: 0x22BA378 Slot: 31
	public override void Update() { }

	// RVA: 0x22BA44C Offset: 0x22BA44C VA: 0x22BA44C Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x22BA45C Offset: 0x22BA45C VA: 0x22BA45C Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerFinished : HandshakeMessage // TypeDefIndex: 1934
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods

	// RVA: 0x22BA7E8 Offset: 0x22BA7E8 VA: 0x22BA7E8
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x22BA81C Offset: 0x22BA81C VA: 0x22BA81C
