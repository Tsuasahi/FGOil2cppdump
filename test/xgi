	public CertificateValidationCallback ClientCertValidationDelegate { get; set; }
	public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate { get; set; }
	internal override bool HaveRemoteValidation2Callback { get; }

	// Methods

	// RVA: 0x10F3410 Offset: 0x10F3410 VA: 0x10F3410
	public void .ctor(Stream stream, X509Certificate serverCertificate) { }

	// RVA: 0x10F343C Offset: 0x10F343C VA: 0x10F343C
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool ownsStream) { }

	// RVA: 0x10F3450 Offset: 0x10F3450 VA: 0x10F3450
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate, bool ownsStream) { }

	// RVA: 0x10F3424 Offset: 0x10F3424 VA: 0x10F3424
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool ownsStream, SecurityProtocolType securityProtocolType) { }

	// RVA: 0x10F3464 Offset: 0x10F3464 VA: 0x10F3464
	public void .ctor(Stream stream, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate, bool ownsStream, SecurityProtocolType securityProtocolType) { }

	// RVA: 0x10F35E0 Offset: 0x10F35E0 VA: 0x10F35E0
	internal void add_ClientCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x10F36A4 Offset: 0x10F36A4 VA: 0x10F36A4
	internal void remove_ClientCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x10F3768 Offset: 0x10F3768 VA: 0x10F3768
	internal void add_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x10F382C Offset: 0x10F382C VA: 0x10F382C
	internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x10F38F0 Offset: 0x10F38F0 VA: 0x10F38F0
	public void add_ClientCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x10F39B4 Offset: 0x10F39B4 VA: 0x10F39B4
	public void remove_ClientCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x10F3A78 Offset: 0x10F3A78 VA: 0x10F3A78
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x10F3AE8 Offset: 0x10F3AE8 VA: 0x10F3AE8
	public CertificateValidationCallback get_ClientCertValidationDelegate() { }

	// RVA: 0x10F3AF0 Offset: 0x10F3AF0 VA: 0x10F3AF0
	public void set_ClientCertValidationDelegate(CertificateValidationCallback value) { }

	// RVA: 0x10EA7F0 Offset: 0x10EA7F0 VA: 0x10EA7F0
	public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate() { }

	// RVA: 0x10F3AF8 Offset: 0x10F3AF8 VA: 0x10F3AF8
	public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value) { }

	// RVA: 0x10F3B00 Offset: 0x10F3B00 VA: 0x10F3B00 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10F3B78 Offset: 0x10F3B78 VA: 0x10F3B78 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x10F3BA8 Offset: 0x10F3BA8 VA: 0x10F3BA8 Slot: 29
	internal override IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state) { }

	// RVA: 0x10F3CA4 Offset: 0x10F3CA4 VA: 0x10F3CA4 Slot: 30
	internal override void OnNegotiateHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x10F4378 Offset: 0x10F4378 VA: 0x10F4378 Slot: 31
	internal override X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x10F43E0 Offset: 0x10F43E0 VA: 0x10F43E0 Slot: 32
	internal override bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x10F440C Offset: 0x10F440C VA: 0x10F440C Slot: 34
	internal override bool get_HaveRemoteValidation2Callback() { }

	// RVA: 0x10F441C Offset: 0x10F441C VA: 0x10F441C Slot: 33
	internal override ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x10E7BE4 Offset: 0x10E7BE4 VA: 0x10E7BE4
	internal bool RaiseClientCertificateValidation(X509Certificate certificate, int[] certificateErrors) { }

	// RVA: 0x10F4430 Offset: 0x10F4430 VA: 0x10F4430 Slot: 35
	internal override AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x10E903C Offset: 0x10E903C VA: 0x10E903C
	internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost) { }
}

// Namespace: Mono.Security.Protocol.Tls
public abstract class SslStreamBase : Stream, IDisposable // TypeDefIndex: 1916
{
	// Fields
	private const int WaitTimeOut = 300000;
	private static ManualResetEvent record_processing; // 0x0
	internal Stream innerStream; // 0x10
	internal MemoryStream inputBuffer; // 0x18
	internal Context context; // 0x20
	internal RecordProtocol protocol; // 0x28
	internal bool ownsStream; // 0x30
	private bool disposed; // 0x31
	private bool checkCertRevocationStatus; // 0x32
	private object negotiate; // 0x38
	private object read; // 0x40
	private object write; // 0x48
	private ManualResetEvent negotiationComplete; // 0x50
	private byte[] recbuf; // 0x58
	private MemoryStream recordStream; // 0x60

	// Properties
	internal bool MightNeedHandshake { get; }
	internal abstract bool HaveRemoteValidation2Callback { get; }
	public bool CheckCertRevocationStatus { get; set; }
	public CipherAlgorithmType CipherAlgorithm { get; }
	public int CipherStrength { get; }
	public HashAlgorithmType HashAlgorithm { get; }
	public int HashStrength { get; }
	public int KeyExchangeStrength { get; }
	public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
	public SecurityProtocolType SecurityProtocol { get; }
	public X509Certificate ServerCertificate { get; }
	internal X509CertificateCollection ServerCertificates { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x10F18E8 Offset: 0x10F18E8 VA: 0x10F18E8
	protected void .ctor(Stream stream, bool ownsStream) { }

	// RVA: 0x10F4444 Offset: 0x10F4444 VA: 0x10F4444
	private static void .cctor() { }

	// RVA: 0x10F44B4 Offset: 0x10F44B4 VA: 0x10F44B4
	private void AsyncHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x10F512C Offset: 0x10F512C VA: 0x10F512C
	internal bool get_MightNeedHandshake() { }

	// RVA: 0x10F51F4 Offset: 0x10F51F4 VA: 0x10F51F4
	internal void NegotiateHandshake() { }

	// RVA: -1 Offset: -1 Slot: 29
	internal abstract IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state);

	// RVA: -1 Offset: -1 Slot: 30
	internal abstract void OnNegotiateHandshakeCallback(IAsyncResult asyncResult);

	// RVA: -1 Offset: -1 Slot: 31
	internal abstract X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates);

	// RVA: -1 Offset: -1 Slot: 32
	internal abstract bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors);

	// RVA: -1 Offset: -1 Slot: 33
	internal abstract ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection);

	// RVA: -1 Offset: -1 Slot: 34
	internal abstract bool get_HaveRemoteValidation2Callback();

	// RVA: -1 Offset: -1 Slot: 35
	internal abstract AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost);

	// RVA: 0x10F2B9C Offset: 0x10F2B9C VA: 0x10F2B9C
	internal X509Certificate RaiseLocalCertificateSelection(X509CertificateCollection certificates, X509Certificate remoteCertificate, string targetHost, X509CertificateCollection requestedCertificates) { }

	// RVA: 0x10F2B5C Offset: 0x10F2B5C VA: 0x10F2B5C
	internal bool RaiseRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x10F2B7C Offset: 0x10F2B7C VA: 0x10F2B7C
	internal ValidationResult RaiseRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x10F2BD0 Offset: 0x10F2BD0 VA: 0x10F2BD0
	internal AsymmetricAlgorithm RaiseLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x10F5740 Offset: 0x10F5740 VA: 0x10F5740
	public bool get_CheckCertRevocationStatus() { }

	// RVA: 0x10EB120 Offset: 0x10EB120 VA: 0x10EB120
	public void set_CheckCertRevocationStatus(bool value) { }

	// RVA: 0x10F5748 Offset: 0x10F5748 VA: 0x10F5748
	public CipherAlgorithmType get_CipherAlgorithm() { }

	// RVA: 0x10F57D8 Offset: 0x10F57D8 VA: 0x10F57D8
	public int get_CipherStrength() { }

	// RVA: 0x10F5868 Offset: 0x10F5868 VA: 0x10F5868
	public HashAlgorithmType get_HashAlgorithm() { }

	// RVA: 0x10F58F8 Offset: 0x10F58F8 VA: 0x10F58F8
	public int get_HashStrength() { }

	// RVA: 0x10F5988 Offset: 0x10F5988 VA: 0x10F5988
	public int get_KeyExchangeStrength() { }

	// RVA: 0x10F5A54 Offset: 0x10F5A54 VA: 0x10F5A54
	public ExchangeAlgorithmType get_KeyExchangeAlgorithm() { }

	// RVA: 0x10F5AE4 Offset: 0x10F5AE4 VA: 0x10F5AE4
	public SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x10F5B4C Offset: 0x10F5B4C VA: 0x10F5B4C
	public X509Certificate get_ServerCertificate() { }

	// RVA: 0x10F5CC8 Offset: 0x10F5CC8 VA: 0x10F5CC8
	internal X509CertificateCollection get_ServerCertificates() { }

	// RVA: 0x10F5390 Offset: 0x10F5390 VA: 0x10F5390
	private bool BeginNegotiateHandshake(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x10F5670 Offset: 0x10F5670 VA: 0x10F5670
	private void EndNegotiateHandshake(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x10F5E90 Offset: 0x10F5E90 VA: 0x10F5E90 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x10F4BE4 Offset: 0x10F4BE4 VA: 0x10F4BE4
	private void InternalBeginRead(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x10F618C Offset: 0x10F618C VA: 0x10F618C
	private void InternalReadCallback(IAsyncResult result) { }

	// RVA: 0x10F48D0 Offset: 0x10F48D0 VA: 0x10F48D0
	private void InternalBeginWrite(SslStreamBase.InternalAsyncResult asyncResult) { }

	// RVA: 0x10F6C1C Offset: 0x10F6C1C VA: 0x10F6C1C
	private void InternalWriteCallback(IAsyncResult ar) { }

	// RVA: 0x10F6E3C Offset: 0x10F6E3C VA: 0x10F6E3C Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x10F701C Offset: 0x10F701C VA: 0x10F701C Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x10F723C Offset: 0x10F723C VA: 0x10F723C Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x10F7400 Offset: 0x10F7400 VA: 0x10F7400 Slot: 13
	public override void Close() { }

	// RVA: 0x10F7408 Offset: 0x10F7408 VA: 0x10F7408 Slot: 18
	public override void Flush() { }

	// RVA: 0x10F7448 Offset: 0x10F7448 VA: 0x10F7448
	public int Read(byte[] buffer) { }

	// RVA: 0x10F7490 Offset: 0x10F7490 VA: 0x10F7490 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x10F7EFC Offset: 0x10F7EFC VA: 0x10F7EFC Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x10F7F64 Offset: 0x10F7F64 VA: 0x10F7F64 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x10F7FCC Offset: 0x10F7FCC VA: 0x10F7FCC
	public void Write(byte[] buffer) { }

	// RVA: 0x10F8014 Offset: 0x10F8014 VA: 0x10F8014 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x10F8404 Offset: 0x10F8404 VA: 0x10F8404 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x10F8438 Offset: 0x10F8438 VA: 0x10F8438 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x10F8440 Offset: 0x10F8440 VA: 0x10F8440 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x10F8474 Offset: 0x10F8474 VA: 0x10F8474 Slot: 9
	public override long get_Length() { }

	// RVA: 0x10F84DC Offset: 0x10F84DC VA: 0x10F84DC Slot: 10
	public override long get_Position() { }

	// RVA: 0x10F8544 Offset: 0x10F8544 VA: 0x10F8544 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x10F2254 Offset: 0x10F2254 VA: 0x10F2254 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x10F20BC Offset: 0x10F20BC VA: 0x10F20BC Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x10F6108 Offset: 0x10F6108 VA: 0x10F6108
	private void resetBuffer() { }

	// RVA: 0x10F6070 Offset: 0x10F6070 VA: 0x10F6070
	internal void checkDisposed() { }
}

// Namespace: 
private class SslStreamBase.InternalAsyncResult : IAsyncResult // TypeDefIndex: 1917
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private bool completed; // 0x38
	private int _bytesRead; // 0x3C
	private bool _fromWrite; // 0x40
	private bool _proceedAfterHandshake; // 0x41
	private byte[] _buffer; // 0x48
	private int _offset; // 0x50
	private int _count; // 0x54

	// Properties
	public bool ProceedAfterHandshake { get; }
	public bool FromWrite { get; }
	public byte[] Buffer { get; }
	public int Offset { get; }
	public int Count { get; }
	public int BytesRead { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x10F52CC Offset: 0x10F52CC VA: 0x10F52CC
	public void .ctor(AsyncCallback userCallback, object userState, byte[] buffer, int offset, int count, bool fromWrite, bool proceedAfterHandshake) { }

	// RVA: 0x10F48C0 Offset: 0x10F48C0 VA: 0x10F48C0
	public bool get_ProceedAfterHandshake() { }

	// RVA: 0x10F48C8 Offset: 0x10F48C8 VA: 0x10F48C8
	public bool get_FromWrite() { }

	// RVA: 0x10F616C Offset: 0x10F616C VA: 0x10F616C
	public byte[] get_Buffer() { }

	// RVA: 0x10F6174 Offset: 0x10F6174 VA: 0x10F6174
	public int get_Offset() { }

	// RVA: 0x10F6100 Offset: 0x10F6100 VA: 0x10F6100
	public int get_Count() { }

	// RVA: 0x10F7234 Offset: 0x10F7234 VA: 0x10F7234
	public int get_BytesRead() { }

	// RVA: 0x10F8A28 Offset: 0x10F8A28 VA: 0x10F8A28 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x10F5E88 Offset: 0x10F5E88 VA: 0x10F5E88
	public Exception get_AsyncException() { }

	// RVA: 0x10F5E2C Offset: 0x10F5E2C VA: 0x10F5E2C
	public bool get_CompletedWithError() { }

	// RVA: 0x10F5D4C Offset: 0x10F5D4C VA: 0x10F5D4C Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x10F8A30 Offset: 0x10F8A30 VA: 0x10F8A30 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x10F5D0C Offset: 0x10F5D0C VA: 0x10F5D0C Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0x10F8A38 Offset: 0x10F8A38 VA: 0x10F8A38
	private void SetComplete(Exception ex, int bytesRead) { }

	// RVA: 0x10F5124 Offset: 0x10F5124 VA: 0x10F5124
	public void SetComplete(Exception ex) { }

	// RVA: 0x10F617C Offset: 0x10F617C VA: 0x10F617C
	public void SetComplete(int bytesRead) { }

	// RVA: 0x10F5118 Offset: 0x10F5118 VA: 0x10F5118
	public void SetComplete() { }
}

// Namespace: 
private sealed class SslStreamBase.AsyncHandshakeDelegate : MulticastDelegate // TypeDefIndex: 1918
{
	// Methods

	// RVA: 0x10F85AC Offset: 0x10F85AC VA: 0x10F85AC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10F85BC Offset: 0x10F85BC VA: 0x10F85BC Slot: 11
	public virtual void Invoke(SslStreamBase.InternalAsyncResult asyncResult, bool fromWrite) { }

	// RVA: 0x10F897C Offset: 0x10F897C VA: 0x10F897C Slot: 12
	public virtual IAsyncResult BeginInvoke(SslStreamBase.InternalAsyncResult asyncResult, bool fromWrite, AsyncCallback callback, object object) { }

	// RVA: 0x10F8A1C Offset: 0x10F8A1C VA: 0x10F8A1C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsCipherSuite : CipherSuite // TypeDefIndex: 1919
{
	// Fields
	private const int MacHeaderLength = 13;
	private byte[] header; // 0x80
	private object headerLock; // 0x88

	// Methods

	// RVA: 0x10F8B24 Offset: 0x10F8B24 VA: 0x10F8B24
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x10F8C2C Offset: 0x10F8C2C VA: 0x10F8C2C Slot: 5
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x10F8F84 Offset: 0x10F8F84 VA: 0x10F8F84 Slot: 4
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x10F92DC Offset: 0x10F92DC VA: 0x10F92DC Slot: 6
	public override void ComputeMasterSecret(byte[] preMasterSecret) { }

	// RVA: 0x10F93EC Offset: 0x10F93EC VA: 0x10F93EC Slot: 7
	public override void ComputeKeys() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal sealed class TlsClientSettings // TypeDefIndex: 1920
{
	// Fields
	private string targetHost; // 0x10
	private X509CertificateCollection certificates; // 0x18
	private X509Certificate clientCertificate; // 0x20
	private RSAManaged certificateRSA; // 0x28

	// Properties
	public string TargetHost { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public X509Certificate ClientCertificate { get; set; }
	public RSAManaged CertificateRSA { get; }

	// Methods

	// RVA: 0x10F9BC8 Offset: 0x10F9BC8 VA: 0x10F9BC8
	public void .ctor() { }

	// RVA: 0x10E341C Offset: 0x10E341C VA: 0x10E341C
	public string get_TargetHost() { }

	// RVA: 0x10F9C64 Offset: 0x10F9C64 VA: 0x10F9C64
	public void set_TargetHost(string value) { }

	// RVA: 0x10E6DBC Offset: 0x10E6DBC VA: 0x10E6DBC
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x10F9C6C Offset: 0x10F9C6C VA: 0x10F9C6C
	public void set_Certificates(X509CertificateCollection value) { }

	// RVA: 0x10F2014 Offset: 0x10F2014 VA: 0x10F2014
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x10E7BF4 Offset: 0x10E7BF4 VA: 0x10E7BF4
	public void set_ClientCertificate(X509Certificate value) { }

	// RVA: 0x10E7E8C Offset: 0x10E7E8C VA: 0x10E7E8C
	public RSAManaged get_CertificateRSA() { }

	// RVA: 0x10F9C74 Offset: 0x10F9C74 VA: 0x10F9C74
	public void UpdateCertificateRSA() { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal sealed class TlsException : Exception // TypeDefIndex: 1921
{
	// Fields
	private Alert alert; // 0x60

	// Properties
	public Alert Alert { get; }

	// Methods

	// RVA: 0x10E5CF0 Offset: 0x10E5CF0 VA: 0x10E5CF0
	internal void .ctor(string message) { }

	// RVA: 0x10F9DEC Offset: 0x10F9DEC VA: 0x10F9DEC
	internal void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x10F9DF4 Offset: 0x10F9DF4 VA: 0x10F9DF4
	internal void .ctor(string message, Exception ex) { }

	// RVA: 0x10EDDAC Offset: 0x10EDDAC VA: 0x10EDDAC
	internal void .ctor(AlertLevel level, AlertDescription description) { }

	// RVA: 0x10F9DFC Offset: 0x10F9DFC VA: 0x10F9DFC
	internal void .ctor(AlertLevel level, AlertDescription description, string message) { }

	// RVA: 0x10E7850 Offset: 0x10E7850 VA: 0x10E7850
	internal void .ctor(AlertDescription description) { }

	// RVA: 0x10E4934 Offset: 0x10E4934 VA: 0x10E4934
	internal void .ctor(AlertDescription description, string message) { }

	// RVA: 0x10F2564 Offset: 0x10F2564 VA: 0x10F2564
	public Alert get_Alert() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsServerSettings // TypeDefIndex: 1922
{
	// Fields
	private X509CertificateCollection certificates; // 0x10
	private RSA certificateRSA; // 0x18
	private RSAParameters rsaParameters; // 0x20
	private byte[] signedParams; // 0x60
	private string[] distinguisedNames; // 0x68
	private bool serverKeyExchange; // 0x70
	private bool certificateRequest; // 0x71
	private ClientCertificateType[] certificateTypes; // 0x78

	// Properties
	public bool ServerKeyExchange { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public RSA CertificateRSA { get; }
	public RSAParameters RsaParameters { get; set; }
	public byte[] SignedParams { get; set; }
	public bool CertificateRequest { get; set; }
	public ClientCertificateType[] CertificateTypes { get; set; }
	public string[] DistinguisedNames { get; set; }

	// Methods

	// RVA: 0x10F9E90 Offset: 0x10F9E90 VA: 0x10F9E90
	public void .ctor() { }

	// RVA: 0x10E37C8 Offset: 0x10E37C8 VA: 0x10E37C8
	public bool get_ServerKeyExchange() { }

	// RVA: 0x10E6748 Offset: 0x10E6748 VA: 0x10E6748
	public void set_ServerKeyExchange(bool value) { }

	// RVA: 0x10E9034 Offset: 0x10E9034 VA: 0x10E9034
	public X509CertificateCollection get_Certificates() { }

	// RVA: 0x10E38F0 Offset: 0x10E38F0 VA: 0x10E38F0
	public void set_Certificates(X509CertificateCollection value) { }

	// RVA: 0x10E37F4 Offset: 0x10E37F4 VA: 0x10E37F4
	public RSA get_CertificateRSA() { }

	// RVA: 0x10E37D0 Offset: 0x10E37D0 VA: 0x10E37D0
	public RSAParameters get_RsaParameters() { }

	// RVA: 0x10E6754 Offset: 0x10E6754 VA: 0x10E6754
	public void set_RsaParameters(RSAParameters value) { }

	// RVA: 0x10F9E98 Offset: 0x10F9E98 VA: 0x10F9E98
	public byte[] get_SignedParams() { }

	// RVA: 0x10E6768 Offset: 0x10E6768 VA: 0x10E6768
	public void set_SignedParams(byte[] value) { }

	// RVA: 0x10F2AE0 Offset: 0x10F2AE0 VA: 0x10F2AE0
	public bool get_CertificateRequest() { }

	// RVA: 0x10E5348 Offset: 0x10E5348 VA: 0x10E5348
	public void set_CertificateRequest(bool value) { }

	// RVA: 0x10E9B54 Offset: 0x10E9B54 VA: 0x10E9B54
	public ClientCertificateType[] get_CertificateTypes() { }

	// RVA: 0x10E5338 Offset: 0x10E5338 VA: 0x10E5338
	public void set_CertificateTypes(ClientCertificateType[] value) { }

	// RVA: 0x10E9B5C Offset: 0x10E9B5C VA: 0x10E9B5C
	public string[] get_DistinguisedNames() { }

	// RVA: 0x10E5340 Offset: 0x10E5340 VA: 0x10E5340
	public void set_DistinguisedNames(string[] value) { }

	// RVA: 0x10E38F8 Offset: 0x10E38F8 VA: 0x10E38F8
	public void UpdateCertificateRSA() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class TlsStream : Stream // TypeDefIndex: 1923
{
	// Fields
	private const int temp_size = 4;
	private bool canRead; // 0x10
	private bool canWrite; // 0x11
	private MemoryStream buffer; // 0x18
	private byte[] temp; // 0x20

	// Properties
	public bool EOF { get; }
	public override bool CanWrite { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override long Position { get; set; }
	public override long Length { get; }

	// Methods

	// RVA: 0x10E3238 Offset: 0x10E3238 VA: 0x10E3238
	public void .ctor() { }

	// RVA: 0x10E682C Offset: 0x10E682C VA: 0x10E682C
	public void .ctor(byte[] data) { }

	// RVA: 0x10ECFE0 Offset: 0x10ECFE0 VA: 0x10ECFE0
	public bool get_EOF() { }

	// RVA: 0x10F9EA0 Offset: 0x10F9EA0 VA: 0x10F9EA0 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x10F9EA8 Offset: 0x10F9EA8 VA: 0x10F9EA8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x10F9EB0 Offset: 0x10F9EB0 VA: 0x10F9EB0 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x10F9EE4 Offset: 0x10F9EE4 VA: 0x10F9EE4 Slot: 10
	public override long get_Position() { }

	// RVA: 0x10F9F18 Offset: 0x10F9F18 VA: 0x10F9F18 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x10F9F54 Offset: 0x10F9F54 VA: 0x10F9F54 Slot: 9
	public override long get_Length() { }

	// RVA: 0x10F9F88 Offset: 0x10F9F88 VA: 0x10F9F88
	private byte[] ReadSmallValue(int length) { }

	// RVA: 0x10E563C Offset: 0x10E563C VA: 0x10E563C
	public byte ReadByte() { }

	// RVA: 0x10E5684 Offset: 0x10E5684 VA: 0x10E5684
	public short ReadInt16() { }

	// RVA: 0x10E3BB0 Offset: 0x10E3BB0 VA: 0x10E3BB0
	public int ReadInt24() { }

	// RVA: 0x10FA0F8 Offset: 0x10FA0F8 VA: 0x10FA0F8
	public int ReadInt32() { }

	// RVA: 0x10E3C4C Offset: 0x10E3C4C VA: 0x10E3C4C
	public byte[] ReadBytes(int count) { }

	// RVA: 0x10E3424 Offset: 0x10E3424 VA: 0x10E3424
	public void Write(byte value) { }

	// RVA: 0x10E3154 Offset: 0x10E3154 VA: 0x10E3154
	public void Write(short value) { }

	// RVA: 0x10E966C Offset: 0x10E966C VA: 0x10E966C
	public void WriteInt24(int value) { }

	// RVA: 0x10E32D0 Offset: 0x10E32D0 VA: 0x10E32D0
	public void Write(int value) { }

	// RVA: 0x10FA1B8 Offset: 0x10FA1B8 VA: 0x10FA1B8
	public void Write(ulong value) { }

	// RVA: 0x10E2A84 Offset: 0x10E2A84 VA: 0x10E2A84
	public void Write(byte[] buffer) { }

	// RVA: 0x10E26CC Offset: 0x10E26CC VA: 0x10E26CC
	public void Reset() { }

	// RVA: 0x10E2A4C Offset: 0x10E2A4C VA: 0x10E2A4C
	public byte[] ToArray() { }

	// RVA: 0x10FA1E8 Offset: 0x10FA1E8 VA: 0x10FA1E8 Slot: 18
	public override void Flush() { }

	// RVA: 0x10FA220 Offset: 0x10FA220 VA: 0x10FA220 Slot: 22
	public override void SetLength(long length) { }

	// RVA: 0x10FA260 Offset: 0x10FA260 VA: 0x10FA260 Slot: 21
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x10FA2B0 Offset: 0x10FA2B0 VA: 0x10FA2B0 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x10FA384 Offset: 0x10FA384 VA: 0x10FA384 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum ClientCertificateType // TypeDefIndex: 1924
{
	// Fields
	public int value__; // 0x0
	public const ClientCertificateType RSA = 1;
	public const ClientCertificateType DSS = 2;
	public const ClientCertificateType RSAFixed = 3;
	public const ClientCertificateType DSSFixed = 4;
	public const ClientCertificateType Unknown = 255;
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
internal abstract class HandshakeMessage : TlsStream // TypeDefIndex: 1925
{
	// Fields
	private Context context; // 0x28
	private HandshakeType handshakeType; // 0x30
	private ContentType contentType; // 0x31
	private byte[] cache; // 0x38

	// Properties
	public Context Context { get; }
	public HandshakeType HandshakeType { get; }
	public ContentType ContentType { get; }

	// Methods

	// RVA: 0x10E2554 Offset: 0x10E2554 VA: 0x10E2554
	public void .ctor(Context context, HandshakeType handshakeType) { }

	// RVA: 0x10E67EC Offset: 0x10E67EC VA: 0x10E67EC
	public void .ctor(Context context, HandshakeType handshakeType, ContentType contentType) { }

	// RVA: 0x10E3830 Offset: 0x10E3830 VA: 0x10E3830
	public void .ctor(Context context, HandshakeType handshakeType, byte[] data) { }

	// RVA: 0x10E2954 Offset: 0x10E2954 VA: 0x10E2954
	public Context get_Context() { }

	// RVA: 0x10E68E0 Offset: 0x10E68E0 VA: 0x10E68E0
	public HandshakeType get_HandshakeType() { }

	// RVA: 0x10E68E8 Offset: 0x10E68E8 VA: 0x10E68E8
	public ContentType get_ContentType() { }

	// RVA: -1 Offset: -1 Slot: 29
	protected abstract void ProcessAsTls1();

	// RVA: -1 Offset: -1 Slot: 30
	protected abstract void ProcessAsSsl3();

	// RVA: 0x10E68F0 Offset: 0x10E68F0 VA: 0x10E68F0
	public void Process() { }

	// RVA: 0x10E2634 Offset: 0x10E2634 VA: 0x10E2634 Slot: 31
	public virtual void Update() { }

	// RVA: 0x10E69CC Offset: 0x10E69CC VA: 0x10E69CC Slot: 32
	public virtual byte[] EncodeMessage() { }

	// RVA: 0x10E5A50 Offset: 0x10E5A50 VA: 0x10E5A50
	public static bool Compare(byte[] buffer1, byte[] buffer2) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum HandshakeType // TypeDefIndex: 1926
{
	// Fields
	public byte value__; // 0x0
	public const HandshakeType HelloRequest = 0;
	public const HandshakeType ClientHello = 1;
	public const HandshakeType ServerHello = 2;
	public const HandshakeType Certificate = 11;
	public const HandshakeType ServerKeyExchange = 12;
	public const HandshakeType CertificateRequest = 13;
	public const HandshakeType ServerHelloDone = 14;
	public const HandshakeType CertificateVerify = 15;
	public const HandshakeType ClientKeyExchange = 16;
	public const HandshakeType Finished = 20;
	public const HandshakeType None = 255;
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificate : HandshakeMessage // TypeDefIndex: 1927
{
	// Fields
	private bool clientCertSelected; // 0x40
	private X509Certificate clientCert; // 0x48

	// Properties
	public X509Certificate ClientCertificate { get; }

	// Methods

	// RVA: 0x1275DA8 Offset: 0x1275DA8 VA: 0x1275DA8
	public void .ctor(Context context) { }

	// RVA: 0x1277B24 Offset: 0x1277B24 VA: 0x1277B24
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x1277E00 Offset: 0x1277E00 VA: 0x1277E00 Slot: 31
	public override void Update() { }

	// RVA: 0x1277B5C Offset: 0x1277B5C VA: 0x1277B5C
	private void GetClientCertificate() { }

	// RVA: 0x1277E2C Offset: 0x1277E2C VA: 0x1277E2C
	private void SendCertificates() { }

	// RVA: 0x1278264 Offset: 0x1278264 VA: 0x1278264 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x12782B0 Offset: 0x12782B0 VA: 0x12782B0 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x1277F80 Offset: 0x1277F80 VA: 0x1277F80
	private X509Certificate FindParentCertificate(X509Certificate cert) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificateVerify : HandshakeMessage // TypeDefIndex: 1928
{
	// Methods

	// RVA: 0x1275DB4 Offset: 0x1275DB4 VA: 0x1275DB4
	public void .ctor(Context context) { }

	// RVA: 0x1278308 Offset: 0x1278308 VA: 0x1278308 Slot: 31
	public override void Update() { }

	// RVA: 0x1278334 Offset: 0x1278334 VA: 0x1278334 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x12789BC Offset: 0x12789BC VA: 0x12789BC Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x127879C Offset: 0x127879C VA: 0x127879C
	private RSA getClientCertRSA(RSA privKey) { }

	// RVA: 0x1278E10 Offset: 0x1278E10 VA: 0x1278E10
	private byte[] getUnsignedBigInteger(byte[] integer) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientFinished : HandshakeMessage // TypeDefIndex: 1929
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods

	// RVA: 0x10E2524 Offset: 0x10E2524 VA: 0x10E2524
	public void .ctor(Context context) { }

	// RVA: 0x10E2594 Offset: 0x10E2594 VA: 0x10E2594
	private static void .cctor() { }

	// RVA: 0x10E2610 Offset: 0x10E2610 VA: 0x10E2610 Slot: 31
	public override void Update() { }

	// RVA: 0x10E2730 Offset: 0x10E2730 VA: 0x10E2730 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E2ACC Offset: 0x10E2ACC VA: 0x10E2ACC Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientHello : HandshakeMessage // TypeDefIndex: 1930
{
	// Fields
	private byte[] random; // 0x40

	// Methods

	// RVA: 0x10E2C44 Offset: 0x10E2C44 VA: 0x10E2C44
	public void .ctor(Context context) { }

	// RVA: 0x10E2C74 Offset: 0x10E2C74 VA: 0x10E2C74 Slot: 31
	public override void Update() { }

	// RVA: 0x10E2DA8 Offset: 0x10E2DA8 VA: 0x10E2DA8 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E2DB8 Offset: 0x10E2DB8 VA: 0x10E2DB8 Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientKeyExchange : HandshakeMessage // TypeDefIndex: 1931
{
	// Methods

	// RVA: 0x10E34D4 Offset: 0x10E34D4 VA: 0x10E34D4
	public void .ctor(Context context) { }

	// RVA: 0x10E3504 Offset: 0x10E3504 VA: 0x10E3504 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E37C0 Offset: 0x10E37C0 VA: 0x10E37C0 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x10E350C Offset: 0x10E350C VA: 0x10E350C
	public void ProcessCommon(bool sendLength) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificate : HandshakeMessage // TypeDefIndex: 1932
{
	// Fields
	private X509CertificateCollection certificates; // 0x40

	// Methods

	// RVA: 0x10E37FC Offset: 0x10E37FC VA: 0x10E37FC
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x10E386C Offset: 0x10E386C VA: 0x10E386C Slot: 31
	public override void Update() { }

	// RVA: 0x10E3A90 Offset: 0x10E3A90 VA: 0x10E3A90 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E3AA0 Offset: 0x10E3AA0 VA: 0x10E3AA0 Slot: 29
	protected override void ProcessAsTls1() { }

	// RVA: 0x10E44A0 Offset: 0x10E44A0 VA: 0x10E44A0
	private bool checkCertificateUsage(X509Certificate cert) { }

	// RVA: 0x10E3D20 Offset: 0x10E3D20 VA: 0x10E3D20
	private void validateCertificates(X509CertificateCollection certificates) { }

	// RVA: 0x10E49B8 Offset: 0x10E49B8 VA: 0x10E49B8
	private bool checkServerIdentity(X509Certificate cert) { }

	// RVA: 0x10E4FF4 Offset: 0x10E4FF4 VA: 0x10E4FF4
	private bool checkDomainName(string subjectName) { }

	// RVA: 0x10E4C58 Offset: 0x10E4C58 VA: 0x10E4C58
	private static bool Match(string hostname, string pattern) { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificateRequest : HandshakeMessage // TypeDefIndex: 1933
{
	// Fields
	private ClientCertificateType[] certificateTypes; // 0x40
	private string[] distinguisedNames; // 0x48

	// Methods

	// RVA: 0x10E524C Offset: 0x10E524C VA: 0x10E524C
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x10E5280 Offset: 0x10E5280 VA: 0x10E5280 Slot: 31
	public override void Update() { }

	// RVA: 0x10E5354 Offset: 0x10E5354 VA: 0x10E5354 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E5364 Offset: 0x10E5364 VA: 0x10E5364 Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerFinished : HandshakeMessage // TypeDefIndex: 1934
{
	// Fields
	private static byte[] Ssl3Marker; // 0x0

	// Methods

	// RVA: 0x10E56F0 Offset: 0x10E56F0 VA: 0x10E56F0
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x10E5724 Offset: 0x10E5724 VA: 0x10E5724
	private static void .cctor() { }

	// RVA: 0x10E57A0 Offset: 0x10E57A0 VA: 0x10E57A0 Slot: 31
	public override void Update() { }

	// RVA: 0x10E57DC Offset: 0x10E57DC VA: 0x10E57DC Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E5B0C Offset: 0x10E5B0C VA: 0x10E5B0C Slot: 29
	protected override void ProcessAsTls1() { }
}

// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHello : HandshakeMessage // TypeDefIndex: 1935
{
	// Fields
	private SecurityCompressionType compressionMethod; // 0x40
	private byte[] random; // 0x48
	private byte[] sessionId; // 0x50
	private CipherSuite cipherSuite; // 0x58

	// Methods

	// RVA: 0x10E5CF8 Offset: 0x10E5CF8 VA: 0x10E5CF8
	public void .ctor(Context context, byte[] buffer) { }

	// RVA: 0x10E5D2C Offset: 0x10E5D2C VA: 0x10E5D2C Slot: 31
	public override void Update() { }

	// RVA: 0x10E5FE0 Offset: 0x10E5FE0 VA: 0x10E5FE0 Slot: 30
	protected override void ProcessAsSsl3() { }

	// RVA: 0x10E5FF0 Offset: 0x10E5FF0 VA: 0x10E5FF0 Slot: 29
