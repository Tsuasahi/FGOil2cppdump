	// Methods

	// RVA: 0xF8B46C Offset: 0xF8B46C VA: 0xF8B46C
	public void .ctor(bool negate, bool ignore) { }

	// RVA: 0xF8B53C Offset: 0xF8B53C VA: 0xF8B53C
	public void .ctor(Category cat, bool negate) { }

	// RVA: 0xF8B5CC Offset: 0xF8B5CC VA: 0xF8B5CC
	private static void .cctor() { }

	// RVA: 0xF8B580 Offset: 0xF8B580 VA: 0xF8B580
	public void AddCategory(Category cat, bool negate) { }

	// RVA: 0xF8B62C Offset: 0xF8B62C VA: 0xF8B62C
	public void AddCharacter(char c) { }

	// RVA: 0xF8B634 Offset: 0xF8B634 VA: 0xF8B634
	public void AddRange(char lo, char hi) { }

	// RVA: 0xF8B82C Offset: 0xF8B82C VA: 0xF8B82C Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0xF8C4A8 Offset: 0xF8C4A8 VA: 0xF8C4A8 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0xF8C4B8 Offset: 0xF8C4B8 VA: 0xF8C4B8 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0xF8C4C0 Offset: 0xF8C4C0 VA: 0xF8C4C0
	private static double GetIntervalCost(Interval i) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class AnchorInfo // TypeDefIndex: 1744
{
	// Fields
	private Expression expr; // 0x10
	private Position pos; // 0x18
	private int offset; // 0x1C
	private string str; // 0x20
	private int width; // 0x28
	private bool ignore; // 0x2C

	// Properties
	public int Offset { get; }
	public int Width { get; }
	public int Length { get; }
	public bool IsUnknownWidth { get; }
	public bool IsComplete { get; }
	public string Substring { get; }
	public bool IgnoreCase { get; }
	public Position Position { get; }
	public bool IsSubstring { get; }
	public bool IsPosition { get; }

	// Methods

	// RVA: 0xF89A48 Offset: 0xF89A48 VA: 0xF89A48
	public void .ctor(Expression expr, int width) { }

	// RVA: 0xF89A94 Offset: 0xF89A94 VA: 0xF89A94
	public void .ctor(Expression expr, int offset, int width, string str, bool ignore) { }

	// RVA: 0xF89B18 Offset: 0xF89B18 VA: 0xF89B18
	public void .ctor(Expression expr, int offset, int width, Position pos) { }

	// RVA: 0xF89B74 Offset: 0xF89B74 VA: 0xF89B74
	public int get_Offset() { }

	// RVA: 0xF89B7C Offset: 0xF89B7C VA: 0xF89B7C
	public int get_Width() { }

	// RVA: 0xF89B84 Offset: 0xF89B84 VA: 0xF89B84
	public int get_Length() { }

	// RVA: 0xF89B98 Offset: 0xF89B98 VA: 0xF89B98
	public bool get_IsUnknownWidth() { }

	// RVA: 0xF89BA4 Offset: 0xF89BA4 VA: 0xF89BA4
	public bool get_IsComplete() { }

	// RVA: 0xF89BDC Offset: 0xF89BDC VA: 0xF89BDC
	public string get_Substring() { }

	// RVA: 0xF89BE4 Offset: 0xF89BE4 VA: 0xF89BE4
	public bool get_IgnoreCase() { }

	// RVA: 0xF89BEC Offset: 0xF89BEC VA: 0xF89BEC
	public Position get_Position() { }

	// RVA: 0xF89BF4 Offset: 0xF89BF4 VA: 0xF89BF4
	public bool get_IsSubstring() { }

	// RVA: 0xF89C04 Offset: 0xF89C04 VA: 0xF89C04
	public bool get_IsPosition() { }

	// RVA: 0xF89C14 Offset: 0xF89C14 VA: 0xF89C14
	public Interval GetInterval(int start) { }
}

// Namespace: System
internal class DefaultUriParser : UriParser // TypeDefIndex: 1745
{
	// Methods

	// RVA: 0x106548C Offset: 0x106548C VA: 0x106548C
	public void .ctor() { }

	// RVA: 0x10654F4 Offset: 0x10654F4 VA: 0x10654F4
	public void .ctor(string scheme) { }
}

// Namespace: System
public class FileStyleUriParser : UriParser // TypeDefIndex: 1746
{
	// Methods

	// RVA: 0x1068418 Offset: 0x1068418 VA: 0x1068418
	public void .ctor() { }
}

// Namespace: System
public class FtpStyleUriParser : UriParser // TypeDefIndex: 1747
{
	// Methods

	// RVA: 0x1068480 Offset: 0x1068480 VA: 0x1068480
	public void .ctor() { }
}

// Namespace: System
public class GenericUriParser : UriParser // TypeDefIndex: 1748
{
	// Methods

	// RVA: 0x10684E8 Offset: 0x10684E8 VA: 0x10684E8
	public void .ctor(GenericUriParserOptions options) { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0xC3CE2C Offset: 0xC3CE2C VA: 0xC3CE2C
public enum GenericUriParserOptions // TypeDefIndex: 1749
{
	// Fields
	public int value__; // 0x0
	public const GenericUriParserOptions Default = 0;
	public const GenericUriParserOptions GenericAuthority = 1;
	public const GenericUriParserOptions AllowEmptyAuthority = 2;
	public const GenericUriParserOptions NoUserInfo = 4;
	public const GenericUriParserOptions NoPort = 8;
	public const GenericUriParserOptions NoQuery = 16;
	public const GenericUriParserOptions NoFragment = 32;
	public const GenericUriParserOptions DontConvertPathBackslashes = 64;
	public const GenericUriParserOptions DontCompressPath = 128;
	public const GenericUriParserOptions DontUnescapePathDotsAndSlashes = 256;
	public const GenericUriParserOptions Idn = 512;
	public const GenericUriParserOptions IriParsing = 1024;
}

// Namespace: System
public class HttpStyleUriParser : UriParser // TypeDefIndex: 1750
{
	// Methods

	// RVA: 0x1068550 Offset: 0x1068550 VA: 0x1068550
	public void .ctor() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xC3CE3C Offset: 0xC3CE3C VA: 0xC3CE3C
public class NetPipeStyleUriParser : UriParser // TypeDefIndex: 1751
{
	// Methods

	// RVA: 0x11220A8 Offset: 0x11220A8 VA: 0x11220A8
	public void .ctor() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xC3CE4C Offset: 0xC3CE4C VA: 0xC3CE4C
public class NetTcpStyleUriParser : UriParser // TypeDefIndex: 1752
{
	// Methods

	// RVA: 0x1122110 Offset: 0x1122110 VA: 0x1122110
	public void .ctor() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xC3CE5C Offset: 0xC3CE5C VA: 0xC3CE5C
public class NewsStyleUriParser : UriParser // TypeDefIndex: 1753
{
	// Methods

	// RVA: 0x1122178 Offset: 0x1122178 VA: 0x1122178
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC3CE6C Offset: 0xC3CE6C VA: 0xC3CE6C
internal class SRDescriptionAttribute : DescriptionAttribute // TypeDefIndex: 1754
{
	// Fields
	private bool isReplaced; // 0x18

	// Properties
	public override string Description { get; }

	// Methods

	// RVA: 0x11221E0 Offset: 0x11221E0 VA: 0x11221E0
	public void .ctor(string description) { }

	// RVA: 0x1122258 Offset: 0x1122258 VA: 0x1122258 Slot: 7
	public override string get_Description() { }
}

// Namespace: System
[TypeConverterAttribute] // RVA: 0xC3CE80 Offset: 0xC3CE80 VA: 0xC3CE80
[Serializable]
public class Uri : ISerializable // TypeDefIndex: 1755
{
	// Fields
	private const int MaxUriLength = 32766;
	private bool isUnixFilePath; // 0x10
	private string source; // 0x18
	private string scheme; // 0x20
	private string host; // 0x28
	private int port; // 0x30
	private string path; // 0x38
	private string query; // 0x40
	private string fragment; // 0x48
	private string userinfo; // 0x50
	private bool isUnc; // 0x58
	private bool isOpaquePart; // 0x59
	private bool isAbsoluteUri; // 0x5A
	private string[] segments; // 0x60
	private bool userEscaped; // 0x68
	private string cachedAbsoluteUri; // 0x70
	private string cachedToString; // 0x78
	private string cachedLocalPath; // 0x80
	private int cachedHashCode; // 0x88
	private static readonly string hexUpperChars; // 0x0
	public static readonly string SchemeDelimiter; // 0x8
	public static readonly string UriSchemeFile; // 0x10
	public static readonly string UriSchemeFtp; // 0x18
	public static readonly string UriSchemeGopher; // 0x20
	public static readonly string UriSchemeHttp; // 0x28
	public static readonly string UriSchemeHttps; // 0x30
	public static readonly string UriSchemeMailto; // 0x38
	public static readonly string UriSchemeNews; // 0x40
	public static readonly string UriSchemeNntp; // 0x48
	public static readonly string UriSchemeNetPipe; // 0x50
	public static readonly string UriSchemeNetTcp; // 0x58
	private static Uri.UriScheme[] schemes; // 0x60
	private UriParser parser; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xC3D1A4 Offset: 0xC3D1A4 VA: 0xC3D1A4
	private static Dictionary<string, int> <>f__switch$map12; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC3D1B4 Offset: 0xC3D1B4 VA: 0xC3D1B4
	private static Dictionary<string, int> <>f__switch$map13; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC3D1C4 Offset: 0xC3D1C4 VA: 0xC3D1C4
	private static Dictionary<string, int> <>f__switch$map14; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xC3D1D4 Offset: 0xC3D1D4 VA: 0xC3D1D4
	private static Dictionary<string, int> <>f__switch$map15; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xC3D1E4 Offset: 0xC3D1E4 VA: 0xC3D1E4
	private static Dictionary<string, int> <>f__switch$map16; // 0x88

	// Properties
	public string AbsolutePath { get; }
	public string AbsoluteUri { get; }
	public string Authority { get; }
	public string Fragment { get; }
	public string Host { get; }
	public UriHostNameType HostNameType { get; }
	public bool IsDefaultPort { get; }
	public bool IsFile { get; }
	public bool IsLoopback { get; }
	public bool IsUnc { get; }
	public string LocalPath { get; }
	public string PathAndQuery { get; }
	public int Port { get; }
	public string Query { get; }
	public string Scheme { get; }
	public string[] Segments { get; }
	public bool UserEscaped { get; }
	public string UserInfo { get; }
	[MonoTODOAttribute] // RVA: 0xC3FB70 Offset: 0xC3FB70 VA: 0xC3FB70
	public string DnsSafeHost { get; }
	public bool IsAbsoluteUri { get; }
	public string OriginalString { get; }
	private UriParser Parser { get; set; }

	// Methods

	// RVA: 0xF92C38 Offset: 0xF92C38 VA: 0xF92C38
	public void .ctor(string uriString) { }

	// RVA: 0xF92DAC Offset: 0xF92DAC VA: 0xF92DAC
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xF92E28 Offset: 0xF92E28 VA: 0xF92E28
	public void .ctor(string uriString, UriKind uriKind) { }

	// RVA: 0xF93230 Offset: 0xF93230 VA: 0xF93230
	private void .ctor(string uriString, UriKind uriKind, out bool success) { }

	// RVA: 0xF94A88 Offset: 0xF94A88 VA: 0xF94A88
	public void .ctor(Uri baseUri, Uri relativeUri) { }

	[ObsoleteAttribute] // RVA: 0xC3E7E4 Offset: 0xC3E7E4 VA: 0xC3E7E4
	// RVA: 0xF92C40 Offset: 0xF92C40 VA: 0xF92C40
	public void .ctor(string uriString, bool dontEscape) { }

	// RVA: 0xF958C4 Offset: 0xF958C4 VA: 0xF958C4
	public void .ctor(Uri baseUri, string relativeUri) { }

	[ObsoleteAttribute] // RVA: 0xC3E7F4 Offset: 0xC3E7F4 VA: 0xC3E7F4
	// RVA: 0xF959A8 Offset: 0xF959A8 VA: 0xF959A8
	public void .ctor(Uri baseUri, string relativeUri, bool dontEscape) { }

	// RVA: 0xF95AA0 Offset: 0xF95AA0 VA: 0xF95AA0
	private static void .cctor() { }

	// RVA: 0xF95EB8 Offset: 0xF95EB8 VA: 0xF95EB8 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0xF94C10 Offset: 0xF94C10 VA: 0xF94C10
	private void Merge(Uri baseUri, string relativeUri) { }

	// RVA: 0xF96460 Offset: 0xF96460 VA: 0xF96460
	public string get_AbsolutePath() { }

	// RVA: 0xF95F34 Offset: 0xF95F34 VA: 0xF95F34
	public string get_AbsoluteUri() { }

	// RVA: 0xF96F98 Offset: 0xF96F98 VA: 0xF96F98
	public string get_Authority() { }

	// RVA: 0xF97114 Offset: 0xF97114 VA: 0xF97114
	public string get_Fragment() { }

	// RVA: 0xF97138 Offset: 0xF97138 VA: 0xF97138
	public string get_Host() { }

	// RVA: 0xF9715C Offset: 0xF9715C VA: 0xF9715C
	public UriHostNameType get_HostNameType() { }

	// RVA: 0xF974C0 Offset: 0xF974C0 VA: 0xF974C0
	public bool get_IsDefaultPort() { }

	// RVA: 0xF97410 Offset: 0xF97410 VA: 0xF97410
	public bool get_IsFile() { }

	// RVA: 0xF97548 Offset: 0xF97548 VA: 0xF97548
	public bool get_IsLoopback() { }

	// RVA: 0xF9774C Offset: 0xF9774C VA: 0xF9774C
	public bool get_IsUnc() { }

	// RVA: 0xF97770 Offset: 0xF97770 VA: 0xF97770
	public string get_LocalPath() { }

	// RVA: 0xF97B88 Offset: 0xF97B88 VA: 0xF97B88
	public string get_PathAndQuery() { }

	// RVA: 0xF97C30 Offset: 0xF97C30 VA: 0xF97C30
	public int get_Port() { }

	// RVA: 0xF97C0C Offset: 0xF97C0C VA: 0xF97C0C
	public string get_Query() { }

	// RVA: 0xF96064 Offset: 0xF96064 VA: 0xF96064
	public string get_Scheme() { }

	// RVA: 0xF97C54 Offset: 0xF97C54 VA: 0xF97C54
	public string[] get_Segments() { }

	// RVA: 0xF9808C Offset: 0xF9808C VA: 0xF9808C
	public bool get_UserEscaped() { }

	// RVA: 0xF98094 Offset: 0xF98094 VA: 0xF98094
	public string get_UserInfo() { }

	// RVA: 0xF980B8 Offset: 0xF980B8 VA: 0xF980B8
	public string get_DnsSafeHost() { }

	// RVA: 0xF93228 Offset: 0xF93228 VA: 0xF93228
	public bool get_IsAbsoluteUri() { }

	// RVA: 0xF94BF4 Offset: 0xF94BF4 VA: 0xF94BF4
	public string get_OriginalString() { }

	// RVA: 0xF9730C Offset: 0xF9730C VA: 0xF9730C
	public static UriHostNameType CheckHostName(string name) { }

	// RVA: 0xF980F0 Offset: 0xF980F0 VA: 0xF980F0
	internal static bool IsIPv4Address(string name) { }

	// RVA: 0xF98264 Offset: 0xF98264 VA: 0xF98264
	internal static bool IsDomainAddress(string name) { }

	// RVA: 0xF983A8 Offset: 0xF983A8 VA: 0xF983A8
	public static bool CheckSchemeName(string schemeName) { }

	// RVA: 0xF9853C Offset: 0xF9853C VA: 0xF9853C
	private static bool IsAlpha(char c) { }

	// RVA: 0xF98568 Offset: 0xF98568 VA: 0xF98568 Slot: 0
	public override bool Equals(object comparant) { }

	// RVA: 0xF98634 Offset: 0xF98634 VA: 0xF98634
	private bool InternalEquals(Uri uri) { }

	// RVA: 0xF98888 Offset: 0xF98888 VA: 0xF98888 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xF9679C Offset: 0xF9679C VA: 0xF9679C
	public string GetLeftPart(UriPartial part) { }

	// RVA: 0xF99488 Offset: 0xF99488 VA: 0xF99488
	public static int FromHex(char digit) { }

	// RVA: 0xF99558 Offset: 0xF99558 VA: 0xF99558
	public static string HexEscape(char character) { }

	// RVA: 0xF996E0 Offset: 0xF996E0 VA: 0xF996E0
	public static char HexUnescape(string pattern, ref int index) { }

	// RVA: 0xF99A08 Offset: 0xF99A08 VA: 0xF99A08
	public static bool IsHexDigit(char digit) { }

	// RVA: 0xF99878 Offset: 0xF99878 VA: 0xF99878
	public static bool IsHexEncoding(string pattern, int index) { }

	// RVA: 0xF99A44 Offset: 0xF99A44 VA: 0xF99A44
	public Uri MakeRelativeUri(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0xC3E82C Offset: 0xC3E82C VA: 0xC3E82C
	// RVA: 0xF9A010 Offset: 0xF9A010 VA: 0xF9A010
	public string MakeRelative(Uri toUri) { }

	// RVA: 0xF99DF0 Offset: 0xF99DF0 VA: 0xF99DF0
	private void AppendQueryAndFragment(ref string result) { }

	// RVA: 0xF9A56C Offset: 0xF9A56C VA: 0xF9A56C Slot: 3
	public override string ToString() { }

	// RVA: 0xF9A634 Offset: 0xF9A634 VA: 0xF9A634
	protected void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ObsoleteAttribute] // RVA: 0xC3E864 Offset: 0xC3E864 VA: 0xC3E864
	// RVA: 0xF9A6B0 Offset: 0xF9A6B0 VA: 0xF9A6B0 Slot: 5
	protected virtual void Escape() { }

	[ObsoleteAttribute] // RVA: 0xC3E874 Offset: 0xC3E874 VA: 0xC3E874
	// RVA: 0xF963F0 Offset: 0xF963F0 VA: 0xF963F0
	protected static string EscapeString(string str) { }

	// RVA: 0xF9A720 Offset: 0xF9A720 VA: 0xF9A720
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets) { }

	[ObsoleteAttribute] // RVA: 0xC3E884 Offset: 0xC3E884 VA: 0xC3E884
	// RVA: 0xF9AAB0 Offset: 0xF9AAB0 VA: 0xF9AAB0 Slot: 6
	protected virtual void Parse() { }

	// RVA: 0xF93048 Offset: 0xF93048 VA: 0xF93048
	private void ParseUri(UriKind kind) { }

	[ObsoleteAttribute] // RVA: 0xC3E8BC Offset: 0xC3E8BC VA: 0xC3E8BC
	// RVA: 0xF9AB94 Offset: 0xF9AB94 VA: 0xF9AB94 Slot: 7
	protected virtual string Unescape(string str) { }

	// RVA: 0xF9A314 Offset: 0xF9A314 VA: 0xF9A314
	internal static string Unescape(string str, bool excludeSpecial) { }

	// RVA: 0xF9B010 Offset: 0xF9B010 VA: 0xF9B010
	private void ParseAsWindowsUNC(string uriString) { }

	// RVA: 0xF9B22C Offset: 0xF9B22C VA: 0xF9B22C
	private string ParseAsWindowsAbsoluteFilePath(string uriString) { }

	// RVA: 0xF9B3B8 Offset: 0xF9B3B8 VA: 0xF9B3B8
	private void ParseAsUnixAbsoluteFilePath(string uriString) { }

	// RVA: 0xF9AAB4 Offset: 0xF9AAB4 VA: 0xF9AAB4
	private void Parse(UriKind kind, string uriString) { }

	// RVA: 0xF93428 Offset: 0xF93428 VA: 0xF93428
	private string ParseNoExceptions(UriKind kind, string uriString) { }

	// RVA: 0xF98A88 Offset: 0xF98A88 VA: 0xF98A88
	private static bool CompactEscaped(string scheme) { }

	// RVA: 0xF98CD4 Offset: 0xF98CD4 VA: 0xF98CD4
	private static string Reduce(string path, bool compact_escaped) { }

	// RVA: 0xF9ABFC Offset: 0xF9ABFC VA: 0xF9ABFC
	private static char HexUnescapeMultiByte(string pattern, ref int index, out char surrogate) { }

	// RVA: 0xF9B684 Offset: 0xF9B684 VA: 0xF9B684
	internal static string GetSchemeDelimiter(string scheme) { }

	// RVA: 0xF97090 Offset: 0xF97090 VA: 0xF97090
	internal static int GetDefaultPort(string scheme) { }

	// RVA: 0xF98A00 Offset: 0xF98A00 VA: 0xF98A00
	private string GetOpaqueWiseSchemeDelimiter() { }

	[ObsoleteAttribute] // RVA: 0xC3E8CC Offset: 0xC3E8CC VA: 0xC3E8CC
	// RVA: 0xF9B83C Offset: 0xF9B83C VA: 0xF9B83C Slot: 8
	protected virtual bool IsBadFileSystemCharacter(char ch) { }

	[ObsoleteAttribute] // RVA: 0xC3E8DC Offset: 0xC3E8DC VA: 0xC3E8DC
	// RVA: 0xF9B894 Offset: 0xF9B894 VA: 0xF9B894
	protected static bool IsExcludedCharacter(char ch) { }

	// RVA: 0xF9B8F4 Offset: 0xF9B8F4 VA: 0xF9B8F4
	internal static bool MaybeUri(string s) { }

	// RVA: 0xF96088 Offset: 0xF96088 VA: 0xF96088
	private static bool IsPredefinedScheme(string scheme) { }

	[ObsoleteAttribute] // RVA: 0xC3E8EC Offset: 0xC3E8EC VA: 0xC3E8EC
	// RVA: 0xF9B9C0 Offset: 0xF9B9C0 VA: 0xF9B9C0 Slot: 9
	protected virtual bool IsReservedCharacter(char ch) { }

	// RVA: 0xF9B5C8 Offset: 0xF9B5C8 VA: 0xF9B5C8
	private UriParser get_Parser() { }

	// RVA: 0xF9B9F8 Offset: 0xF9B9F8 VA: 0xF9B9F8
	private void set_Parser(UriParser value) { }

	// RVA: 0xF9BA00 Offset: 0xF9BA00 VA: 0xF9BA00
	public string GetComponents(UriComponents components, UriFormat format) { }

	// RVA: 0xF9BA54 Offset: 0xF9BA54 VA: 0xF9BA54
	public bool IsBaseOf(Uri uri) { }

	// RVA: 0xF9BAA0 Offset: 0xF9BAA0 VA: 0xF9BAA0
	public bool IsWellFormedOriginalString() { }

	// RVA: 0xF9BB78 Offset: 0xF9BB78 VA: 0xF9BB78
	public static int Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType) { }

	// RVA: 0xF9BD9C Offset: 0xF9BD9C VA: 0xF9BD9C
	private static bool NeedToEscapeDataChar(char b) { }

	// RVA: 0xF9BE08 Offset: 0xF9BE08 VA: 0xF9BE08
	public static string EscapeDataString(string stringToEscape) { }

	// RVA: 0xF9C17C Offset: 0xF9C17C VA: 0xF9C17C
	private static bool NeedToEscapeUriChar(char b) { }

	// RVA: 0xF9C1EC Offset: 0xF9C1EC VA: 0xF9C1EC
	public static string EscapeUriString(string stringToEscape) { }

	// RVA: 0xF9C568 Offset: 0xF9C568 VA: 0xF9C568
	public static bool IsWellFormedUriString(string uriString, UriKind uriKind) { }

	// RVA: 0xF9C614 Offset: 0xF9C614 VA: 0xF9C614
	public static bool TryCreate(string uriString, UriKind uriKind, out Uri result) { }

	// RVA: 0xF9C6A4 Offset: 0xF9C6A4 VA: 0xF9C6A4
	public static bool TryCreate(Uri baseUri, string relativeUri, out Uri result) { }

	// RVA: 0xF9C79C Offset: 0xF9C79C VA: 0xF9C79C
	public static bool TryCreate(Uri baseUri, Uri relativeUri, out Uri result) { }

	// RVA: 0xF9C8C0 Offset: 0xF9C8C0 VA: 0xF9C8C0
	public static string UnescapeDataString(string stringToUnescape) { }

	// RVA: 0xF9CF60 Offset: 0xF9CF60 VA: 0xF9CF60
	private static int GetInt(byte b) { }

	// RVA: 0xF9CE34 Offset: 0xF9CE34 VA: 0xF9CE34
	private static int GetChar(string str, int offset, int length) { }

	// RVA: 0xF9CDA4 Offset: 0xF9CDA4 VA: 0xF9CDA4
	private static char[] GetChars(MemoryStream b, Encoding e) { }

	// RVA: 0xF96710 Offset: 0xF96710 VA: 0xF96710
	private void EnsureAbsoluteUri() { }

	// RVA: 0xF94BEC Offset: 0xF94BEC VA: 0xF94BEC
	public static bool op_Equality(Uri u1, Uri u2) { }

	// RVA: 0xF9CFB0 Offset: 0xF9CFB0 VA: 0xF9CFB0
	public static bool op_Inequality(Uri u1, Uri u2) { }
}

// Namespace: 
private struct Uri.UriScheme // TypeDefIndex: 1756
{
	// Fields
	public string scheme; // 0x0
	public string delimiter; // 0x8
	public int defaultPort; // 0x10

	// Methods

	// RVA: 0xBC27E0 Offset: 0xBC27E0 VA: 0xBC27E0
	public void .ctor(string s, string d, int p) { }
}

// Namespace: System
public class UriBuilder // TypeDefIndex: 1757
{
	// Fields
	private string scheme; // 0x10
	private string host; // 0x18
	private int port; // 0x20
	private string path; // 0x28
	private string query; // 0x30
	private string fragment; // 0x38
	private string username; // 0x40
	private string password; // 0x48
	private Uri uri; // 0x50
	private bool modified; // 0x58

	// Properties
	public string Fragment { get; set; }
	public string Host { get; set; }
	public string Password { get; set; }
	public string Path { get; set; }
	public int Port { get; set; }
	public string Query { get; set; }
	public string Scheme { get; set; }
	public Uri Uri { get; }
	public string UserName { get; set; }

	// Methods

	// RVA: 0x1371110 Offset: 0x1371110 VA: 0x1371110
	public void .ctor() { }

	// RVA: 0x1371278 Offset: 0x1371278 VA: 0x1371278
	public void .ctor(string uri) { }

	// RVA: 0x13712EC Offset: 0x13712EC VA: 0x13712EC
	public void .ctor(Uri uri) { }

	// RVA: 0x137118C Offset: 0x137118C VA: 0x137118C
	public void .ctor(string schemeName, string hostName) { }

	// RVA: 0x137176C Offset: 0x137176C VA: 0x137176C
	public void .ctor(string scheme, string host, int portNumber) { }

	// RVA: 0x137183C Offset: 0x137183C VA: 0x137183C
	public void .ctor(string scheme, string host, int port, string pathValue) { }

	// RVA: 0x1371880 Offset: 0x1371880 VA: 0x1371880
	public void .ctor(string scheme, string host, int port, string pathValue, string extraValue) { }

	// RVA: 0x1371BD0 Offset: 0x1371BD0 VA: 0x1371BD0
	public string get_Fragment() { }

	// RVA: 0x13719FC Offset: 0x13719FC VA: 0x13719FC
	public void set_Fragment(string value) { }

	// RVA: 0x1371BD8 Offset: 0x1371BD8 VA: 0x1371BD8
	public string get_Host() { }

	// RVA: 0x13715FC Offset: 0x13715FC VA: 0x13715FC
	public void set_Host(string value) { }

	// RVA: 0x1371BE0 Offset: 0x1371BE0 VA: 0x1371BE0
	public string get_Password() { }

	// RVA: 0x1371BE8 Offset: 0x1371BE8 VA: 0x1371BE8
	public void set_Password(string value) { }

	// RVA: 0x1371C88 Offset: 0x1371C88 VA: 0x1371C88
	public string get_Path() { }

	// RVA: 0x137169C Offset: 0x137169C VA: 0x137169C
	public void set_Path(string value) { }

	// RVA: 0x1371C90 Offset: 0x1371C90 VA: 0x1371C90
	public int get_Port() { }

	// RVA: 0x1371798 Offset: 0x1371798 VA: 0x1371798
	public void set_Port(int value) { }

	// RVA: 0x1371C98 Offset: 0x1371C98 VA: 0x1371C98
	public string get_Query() { }

	// RVA: 0x1371AFC Offset: 0x1371AFC VA: 0x1371AFC
	public void set_Query(string value) { }

	// RVA: 0x1371CA0 Offset: 0x1371CA0 VA: 0x1371CA0
	public string get_Scheme() { }

	// RVA: 0x1371504 Offset: 0x1371504 VA: 0x1371504
	public void set_Scheme(string value) { }

	// RVA: 0x1371CA8 Offset: 0x1371CA8 VA: 0x1371CA8
	public Uri get_Uri() { }

	// RVA: 0x1371D48 Offset: 0x1371D48 VA: 0x1371D48
	public string get_UserName() { }

	// RVA: 0x1371D50 Offset: 0x1371D50 VA: 0x1371D50
	public void set_UserName(string value) { }

	// RVA: 0x1371DF0 Offset: 0x1371DF0 VA: 0x1371DF0 Slot: 0
	public override bool Equals(object rparam) { }

	// RVA: 0x1371E58 Offset: 0x1371E58 VA: 0x1371E58 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1371E8C Offset: 0x1371E8C VA: 0x1371E8C Slot: 3
	public override string ToString() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0xC3CEE4 Offset: 0xC3CEE4 VA: 0xC3CEE4
public enum UriComponents // TypeDefIndex: 1758
{
	// Fields
	public int value__; // 0x0
	public const UriComponents Scheme = 1;
	public const UriComponents UserInfo = 2;
	public const UriComponents Host = 4;
	public const UriComponents Port = 8;
	public const UriComponents Path = 16;
	public const UriComponents Query = 32;
	public const UriComponents Fragment = 64;
	public const UriComponents StrongPort = 128;
	public const UriComponents KeepDelimiter = 1073741824;
	public const UriComponents HostAndPort = 132;
	public const UriComponents StrongAuthority = 134;
	public const UriComponents AbsoluteUri = 127;
	public const UriComponents PathAndQuery = 48;
	public const UriComponents HttpRequestUrl = 61;
	public const UriComponents SchemeAndServer = 13;
	public const UriComponents SerializationInfoString = -2147483648;
}

// Namespace: System
public enum UriFormat // TypeDefIndex: 1759
{
	// Fields
	public int value__; // 0x0
	public const UriFormat UriEscaped = 1;
	public const UriFormat Unescaped = 2;
	public const UriFormat SafeUnescaped = 3;
}

// Namespace: System
[Serializable]
public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1760
{
	// Methods

	// RVA: 0x1372288 Offset: 0x1372288 VA: 0x1372288
	public void .ctor() { }

	// RVA: 0x13722E8 Offset: 0x13722E8 VA: 0x13722E8
	public void .ctor(string message) { }

	// RVA: 0x13722F0 Offset: 0x13722F0 VA: 0x13722F0
	public void .ctor(string message, Exception exception) { }

	// RVA: 0x13722F8 Offset: 0x13722F8 VA: 0x13722F8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1372300 Offset: 0x1372300 VA: 0x1372300 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public enum UriHostNameType // TypeDefIndex: 1761
{
	// Fields
	public int value__; // 0x0
	public const UriHostNameType Unknown = 0;
	public const UriHostNameType Basic = 1;
	public const UriHostNameType Dns = 2;
	public const UriHostNameType IPv4 = 3;
	public const UriHostNameType IPv6 = 4;
}

// Namespace: System
public enum UriIdnScope // TypeDefIndex: 1762
{
	// Fields
	public int value__; // 0x0
	public const UriIdnScope None = 0;
	public const UriIdnScope AllExceptIntranet = 1;
	public const UriIdnScope All = 2;
}

// Namespace: System
public enum UriKind // TypeDefIndex: 1763
{
	// Fields
	public int value__; // 0x0
	public const UriKind RelativeOrAbsolute = 0;
	public const UriKind Absolute = 1;
	public const UriKind Relative = 2;
}

// Namespace: System
public abstract class UriParser // TypeDefIndex: 1764
{
	// Fields
	private static object lock_object; // 0x0
	private static Hashtable table; // 0x8
	internal string scheme_name; // 0x10
	private int default_port; // 0x18
	private static readonly Regex uri_regex; // 0x10
	private static readonly Regex auth_regex; // 0x18

	// Properties
	internal string SchemeName { get; set; }
	internal int DefaultPort { get; set; }

	// Methods

	// RVA: 0x1372308 Offset: 0x1372308 VA: 0x1372308
	protected void .ctor() { }

	// RVA: 0x1372310 Offset: 0x1372310 VA: 0x1372310
	private static void .cctor() { }

	// RVA: 0x13723E4 Offset: 0x13723E4 VA: 0x13723E4
	private static Match ParseAuthority(Group g) { }

	// RVA: 0x1372484 Offset: 0x1372484 VA: 0x1372484 Slot: 4
	protected internal virtual string GetComponents(Uri uri, UriComponents components, UriFormat format) { }

	// RVA: 0x13733C8 Offset: 0x13733C8 VA: 0x13733C8 Slot: 5
	protected internal virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError) { }

	// RVA: 0x13734E4 Offset: 0x13734E4 VA: 0x13734E4 Slot: 6
	protected internal virtual bool IsBaseOf(Uri baseUri, Uri relativeUri) { }

	// RVA: 0x1373618 Offset: 0x1373618 VA: 0x1373618 Slot: 7
	protected internal virtual bool IsWellFormedOriginalString(Uri uri) { }

	// RVA: 0x1373648 Offset: 0x1373648 VA: 0x1373648 Slot: 8
	protected internal virtual UriParser OnNewUri() { }

	[MonoTODOAttribute] // RVA: 0xC3E8FC Offset: 0xC3E8FC VA: 0xC3E8FC
	// RVA: 0x137364C Offset: 0x137364C VA: 0x137364C Slot: 9
	protected virtual void OnRegister(string schemeName, int defaultPort) { }

	[MonoTODOAttribute] // RVA: 0xC3E90C Offset: 0xC3E90C VA: 0xC3E90C
	// RVA: 0x1373650 Offset: 0x1373650 VA: 0x1373650 Slot: 10
	protected internal virtual string Resolve(Uri baseUri, Uri relativeUri, out UriFormatException parsingError) { }

	// RVA: 0x13736B8 Offset: 0x13736B8 VA: 0x13736B8
	internal string get_SchemeName() { }

	// RVA: 0x13736C0 Offset: 0x13736C0 VA: 0x13736C0
	internal void set_SchemeName(string value) { }

	// RVA: 0x13736C8 Offset: 0x13736C8 VA: 0x13736C8
	internal int get_DefaultPort() { }

	// RVA: 0x13736D0 Offset: 0x13736D0 VA: 0x13736D0
	internal void set_DefaultPort(int value) { }

	// RVA: 0x1373170 Offset: 0x1373170 VA: 0x1373170
	private string IgnoreFirstCharIf(string s, char c) { }

	// RVA: 0x1373258 Offset: 0x1373258 VA: 0x1373258
	private string Format(string s, UriFormat format) { }

	// RVA: 0x13736D8 Offset: 0x13736D8 VA: 0x13736D8
	private static void CreateDefaults() { }

	// RVA: 0x1373BE8 Offset: 0x1373BE8 VA: 0x1373BE8
	public static bool IsKnownScheme(string schemeName) { }

	// RVA: 0x1373A90 Offset: 0x1373A90 VA: 0x1373A90
	private static void InternalRegister(Hashtable table, UriParser uriParser, string schemeName, int defaultPort) { }

	// RVA: 0x1373D44 Offset: 0x1373D44 VA: 0x1373D44
	public static void Register(UriParser uriParser, string schemeName, int defaultPort) { }

	// RVA: 0x1373F4C Offset: 0x1373F4C VA: 0x1373F4C
	internal static UriParser GetParser(string schemeName) { }
}

// Namespace: System
public enum UriPartial // TypeDefIndex: 1765
{
	// Fields
	public int value__; // 0x0
	public const UriPartial Scheme = 0;
	public const UriPartial Authority = 1;
	public const UriPartial Path = 2;
	public const UriPartial Query = 3;
}

// Namespace: System
public class UriTypeConverter : TypeConverter // TypeDefIndex: 1766
{
	// Methods

	// RVA: 0x13740A0 Offset: 0x13740A0 VA: 0x13740A0
	public void .ctor() { }

	// RVA: 0x13740A8 Offset: 0x13740A8 VA: 0x13740A8
	private bool CanConvert(Type type) { }

	// RVA: 0x1374170 Offset: 0x1374170 VA: 0x1374170 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x13741FC Offset: 0x13741FC VA: 0x13741FC Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x1374210 Offset: 0x1374210 VA: 0x1374210 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x13743B8 Offset: 0x13743B8 VA: 0x13743B8 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public sealed class AsyncCompletedEventHandler : MulticastDelegate // TypeDefIndex: 1767
{
	// Methods

	// RVA: 0x10AF7B0 Offset: 0x10AF7B0 VA: 0x10AF7B0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10AF7C0 Offset: 0x10AF7C0 VA: 0x10AF7C0 Slot: 11
	public virtual void Invoke(object sender, AsyncCompletedEventArgs e) { }

	// RVA: 0x10AFB80 Offset: 0x10AFB80 VA: 0x10AFB80 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x10AFBB0 Offset: 0x10AFBB0 VA: 0x10AFBB0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.ComponentModel
public sealed class CollectionChangeEventHandler : MulticastDelegate // TypeDefIndex: 1768
{
	// Methods

	// RVA: 0x10B551C Offset: 0x10B551C VA: 0x10B551C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10B552C Offset: 0x10B552C VA: 0x10B552C Slot: 11
	public virtual void Invoke(object sender, CollectionChangeEventArgs e) { }

	// RVA: 0x10B58EC Offset: 0x10B58EC VA: 0x10B58EC Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, CollectionChangeEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x10B591C Offset: 0x10B591C VA: 0x10B591C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.ComponentModel
public sealed class DoWorkEventHandler : MulticastDelegate // TypeDefIndex: 1769
{
	// Methods

	// RVA: 0x10BE120 Offset: 0x10BE120 VA: 0x10BE120
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x10B1C08 Offset: 0x10B1C08 VA: 0x10B1C08 Slot: 11
	public virtual void Invoke(object sender, DoWorkEventArgs e) { }

	// RVA: 0x10BE130 Offset: 0x10BE130 VA: 0x10BE130 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, DoWorkEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x10BE160 Offset: 0x10BE160 VA: 0x10BE160 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.ComponentModel
public sealed class ListChangedEventHandler : MulticastDelegate // TypeDefIndex: 1770
{
	// Methods

	// RVA: 0x104B3D4 Offset: 0x104B3D4 VA: 0x104B3D4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x104B3E4 Offset: 0x104B3E4 VA: 0x104B3E4 Slot: 11
	public virtual void Invoke(object sender, ListChangedEventArgs e) { }

	// RVA: 0x104B7A4 Offset: 0x104B7A4 VA: 0x104B7A4 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, ListChangedEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x104B7D4 Offset: 0x104B7D4 VA: 0x104B7D4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.ComponentModel
public sealed class ProgressChangedEventHandler : MulticastDelegate // TypeDefIndex: 1771
{
	// Methods

	// RVA: 0x104F170 Offset: 0x104F170 VA: 0x104F170
	public void .ctor(object object, IntPtr method) { }
