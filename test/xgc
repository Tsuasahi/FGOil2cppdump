	public override bool IsComplex() { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class BackslashNumber : Reference // TypeDefIndex: 1742
{
	// Fields
	private string literal; // 0x20
	private bool ecma; // 0x28

	// Methods

	// RVA: 0x2042738 Offset: 0x2042738 VA: 0x2042738
	public void .ctor(bool ignore, bool ecma) { }

	// RVA: 0x20427AC Offset: 0x20427AC VA: 0x20427AC
	public bool ResolveReference(string num_str, Hashtable groups) { }

	// RVA: 0x2042A90 Offset: 0x2042A90 VA: 0x2042A90 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class CharacterClass : Expression // TypeDefIndex: 1743
{
	// Fields
	private static Interval upper_case_characters; // 0x0
	private bool negate; // 0x10
	private bool ignore; // 0x11
	private BitArray pos_cats; // 0x18
	private BitArray neg_cats; // 0x20
	private IntervalCollection intervals; // 0x28

	// Methods

	// RVA: 0x2043B98 Offset: 0x2043B98 VA: 0x2043B98
	public void .ctor(bool negate, bool ignore) { }

	// RVA: 0x2043C68 Offset: 0x2043C68 VA: 0x2043C68
	public void .ctor(Category cat, bool negate) { }

	// RVA: 0x2043CF8 Offset: 0x2043CF8 VA: 0x2043CF8
	private static void .cctor() { }

	// RVA: 0x2043CAC Offset: 0x2043CAC VA: 0x2043CAC
	public void AddCategory(Category cat, bool negate) { }

	// RVA: 0x2043D58 Offset: 0x2043D58 VA: 0x2043D58
	public void AddCharacter(char c) { }

	// RVA: 0x2043D60 Offset: 0x2043D60 VA: 0x2043D60
	public void AddRange(char lo, char hi) { }

	// RVA: 0x2043F58 Offset: 0x2043F58 VA: 0x2043F58 Slot: 4
	public override void Compile(ICompiler cmp, bool reverse) { }

	// RVA: 0x2044BD4 Offset: 0x2044BD4 VA: 0x2044BD4 Slot: 5
	public override void GetWidth(out int min, out int max) { }

	// RVA: 0x2044BE4 Offset: 0x2044BE4 VA: 0x2044BE4 Slot: 7
	public override bool IsComplex() { }

	// RVA: 0x2044BEC Offset: 0x2044BEC VA: 0x2044BEC
	private static double GetIntervalCost(Interval i) { }
}

// Namespace: System.Text.RegularExpressions.Syntax
internal class AnchorInfo // TypeDefIndex: 1744
{
	// Fields
	private Expression expr; // 0x10
	private Position pos; // 0x18
	private int offset; // 0x1C
	private string str; // 0x20
	private int width; // 0x28
	private bool ignore; // 0x2C

	// Properties
	public int Offset { get; }
	public int Width { get; }
	public int Length { get; }
	public bool IsUnknownWidth { get; }
	public bool IsComplete { get; }
	public string Substring { get; }
	public bool IgnoreCase { get; }
	public Position Position { get; }
	public bool IsSubstring { get; }
	public bool IsPosition { get; }

	// Methods

	// RVA: 0x2042174 Offset: 0x2042174 VA: 0x2042174
	public void .ctor(Expression expr, int width) { }

	// RVA: 0x20421C0 Offset: 0x20421C0 VA: 0x20421C0
	public void .ctor(Expression expr, int offset, int width, string str, bool ignore) { }

	// RVA: 0x2042244 Offset: 0x2042244 VA: 0x2042244
	public void .ctor(Expression expr, int offset, int width, Position pos) { }

	// RVA: 0x20422A0 Offset: 0x20422A0 VA: 0x20422A0
	public int get_Offset() { }

	// RVA: 0x20422A8 Offset: 0x20422A8 VA: 0x20422A8
	public int get_Width() { }

	// RVA: 0x20422B0 Offset: 0x20422B0 VA: 0x20422B0
	public int get_Length() { }

	// RVA: 0x20422C4 Offset: 0x20422C4 VA: 0x20422C4
	public bool get_IsUnknownWidth() { }

	// RVA: 0x20422D0 Offset: 0x20422D0 VA: 0x20422D0
	public bool get_IsComplete() { }

	// RVA: 0x2042308 Offset: 0x2042308 VA: 0x2042308
	public string get_Substring() { }

	// RVA: 0x2042310 Offset: 0x2042310 VA: 0x2042310
	public bool get_IgnoreCase() { }

	// RVA: 0x2042318 Offset: 0x2042318 VA: 0x2042318
	public Position get_Position() { }

	// RVA: 0x2042320 Offset: 0x2042320 VA: 0x2042320
	public bool get_IsSubstring() { }

	// RVA: 0x2042330 Offset: 0x2042330 VA: 0x2042330
	public bool get_IsPosition() { }

	// RVA: 0x2042340 Offset: 0x2042340 VA: 0x2042340
	public Interval GetInterval(int start) { }
}

// Namespace: System
internal class DefaultUriParser : UriParser // TypeDefIndex: 1745
{
	// Methods

	// RVA: 0x2198864 Offset: 0x2198864 VA: 0x2198864
	public void .ctor() { }

	// RVA: 0x21988CC Offset: 0x21988CC VA: 0x21988CC
	public void .ctor(string scheme) { }
}

// Namespace: System
public class FileStyleUriParser : UriParser // TypeDefIndex: 1746
{
	// Methods

	// RVA: 0x219B7F8 Offset: 0x219B7F8 VA: 0x219B7F8
	public void .ctor() { }
}

// Namespace: System
public class FtpStyleUriParser : UriParser // TypeDefIndex: 1747
{
	// Methods

	// RVA: 0x219B860 Offset: 0x219B860 VA: 0x219B860
	public void .ctor() { }
}

// Namespace: System
public class GenericUriParser : UriParser // TypeDefIndex: 1748
{
	// Methods

	// RVA: 0x219B8C8 Offset: 0x219B8C8 VA: 0x219B8C8
	public void .ctor(GenericUriParserOptions options) { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0xBD0D04 Offset: 0xBD0D04 VA: 0xBD0D04
public enum GenericUriParserOptions // TypeDefIndex: 1749
{
	// Fields
	public int value__; // 0x0
	public const GenericUriParserOptions Default = 0;
	public const GenericUriParserOptions GenericAuthority = 1;
	public const GenericUriParserOptions AllowEmptyAuthority = 2;
	public const GenericUriParserOptions NoUserInfo = 4;
	public const GenericUriParserOptions NoPort = 8;
	public const GenericUriParserOptions NoQuery = 16;
	public const GenericUriParserOptions NoFragment = 32;
	public const GenericUriParserOptions DontConvertPathBackslashes = 64;
	public const GenericUriParserOptions DontCompressPath = 128;
	public const GenericUriParserOptions DontUnescapePathDotsAndSlashes = 256;
	public const GenericUriParserOptions Idn = 512;
	public const GenericUriParserOptions IriParsing = 1024;
}

// Namespace: System
public class HttpStyleUriParser : UriParser // TypeDefIndex: 1750
{
	// Methods

	// RVA: 0x219B930 Offset: 0x219B930 VA: 0x219B930
	public void .ctor() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xBD0D14 Offset: 0xBD0D14 VA: 0xBD0D14
public class NetPipeStyleUriParser : UriParser // TypeDefIndex: 1751
{
	// Methods

	// RVA: 0x22F81A0 Offset: 0x22F81A0 VA: 0x22F81A0
	public void .ctor() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xBD0D24 Offset: 0xBD0D24 VA: 0xBD0D24
public class NetTcpStyleUriParser : UriParser // TypeDefIndex: 1752
{
	// Methods

	// RVA: 0x22F8208 Offset: 0x22F8208 VA: 0x22F8208
	public void .ctor() { }
}

// Namespace: System
[MonoTODOAttribute] // RVA: 0xBD0D34 Offset: 0xBD0D34 VA: 0xBD0D34
public class NewsStyleUriParser : UriParser // TypeDefIndex: 1753
{
	// Methods

	// RVA: 0x22F8270 Offset: 0x22F8270 VA: 0x22F8270
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBD0D44 Offset: 0xBD0D44 VA: 0xBD0D44
internal class SRDescriptionAttribute : DescriptionAttribute // TypeDefIndex: 1754
{
	// Fields
	private bool isReplaced; // 0x18

	// Properties
	public override string Description { get; }

	// Methods

	// RVA: 0x22F82D8 Offset: 0x22F82D8 VA: 0x22F82D8
	public void .ctor(string description) { }

	// RVA: 0x22F8350 Offset: 0x22F8350 VA: 0x22F8350 Slot: 7
	public override string get_Description() { }
}

// Namespace: System
[TypeConverterAttribute] // RVA: 0xBD0D58 Offset: 0xBD0D58 VA: 0xBD0D58
[Serializable]
public class Uri : ISerializable // TypeDefIndex: 1755
{
	// Fields
	private const int MaxUriLength = 32766;
	private bool isUnixFilePath; // 0x10
	private string source; // 0x18
	private string scheme; // 0x20
	private string host; // 0x28
	private int port; // 0x30
	private string path; // 0x38
	private string query; // 0x40
	private string fragment; // 0x48
	private string userinfo; // 0x50
	private bool isUnc; // 0x58
	private bool isOpaquePart; // 0x59
	private bool isAbsoluteUri; // 0x5A
	private string[] segments; // 0x60
	private bool userEscaped; // 0x68
	private string cachedAbsoluteUri; // 0x70
	private string cachedToString; // 0x78
	private string cachedLocalPath; // 0x80
	private int cachedHashCode; // 0x88
	private static readonly string hexUpperChars; // 0x0
	public static readonly string SchemeDelimiter; // 0x8
	public static readonly string UriSchemeFile; // 0x10
	public static readonly string UriSchemeFtp; // 0x18
	public static readonly string UriSchemeGopher; // 0x20
	public static readonly string UriSchemeHttp; // 0x28
	public static readonly string UriSchemeHttps; // 0x30
	public static readonly string UriSchemeMailto; // 0x38
	public static readonly string UriSchemeNews; // 0x40
	public static readonly string UriSchemeNntp; // 0x48
	public static readonly string UriSchemeNetPipe; // 0x50
	public static readonly string UriSchemeNetTcp; // 0x58
	private static Uri.UriScheme[] schemes; // 0x60
	private UriParser parser; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xBD107C Offset: 0xBD107C VA: 0xBD107C
	private static Dictionary<string, int> <>f__switch$map12; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xBD108C Offset: 0xBD108C VA: 0xBD108C
	private static Dictionary<string, int> <>f__switch$map13; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xBD109C Offset: 0xBD109C VA: 0xBD109C
	private static Dictionary<string, int> <>f__switch$map14; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xBD10AC Offset: 0xBD10AC VA: 0xBD10AC
	private static Dictionary<string, int> <>f__switch$map15; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xBD10BC Offset: 0xBD10BC VA: 0xBD10BC
	private static Dictionary<string, int> <>f__switch$map16; // 0x88

	// Properties
	public string AbsolutePath { get; }
	public string AbsoluteUri { get; }
	public string Authority { get; }
	public string Fragment { get; }
	public string Host { get; }
	public UriHostNameType HostNameType { get; }
	public bool IsDefaultPort { get; }
	public bool IsFile { get; }
	public bool IsLoopback { get; }
	public bool IsUnc { get; }
	public string LocalPath { get; }
	public string PathAndQuery { get; }
	public int Port { get; }
	public string Query { get; }
	public string Scheme { get; }
	public string[] Segments { get; }
	public bool UserEscaped { get; }
	public string UserInfo { get; }
	[MonoTODOAttribute] // RVA: 0xBD3A48 Offset: 0xBD3A48 VA: 0xBD3A48
	public string DnsSafeHost { get; }
	public bool IsAbsoluteUri { get; }
	public string OriginalString { get; }
	private UriParser Parser { get; set; }

	// Methods

	// RVA: 0x204B364 Offset: 0x204B364 VA: 0x204B364
	public void .ctor(string uriString) { }

	// RVA: 0x204B4D8 Offset: 0x204B4D8 VA: 0x204B4D8
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x204B554 Offset: 0x204B554 VA: 0x204B554
	public void .ctor(string uriString, UriKind uriKind) { }

	// RVA: 0x204B95C Offset: 0x204B95C VA: 0x204B95C
	private void .ctor(string uriString, UriKind uriKind, out bool success) { }

	// RVA: 0x204D1B4 Offset: 0x204D1B4 VA: 0x204D1B4
	public void .ctor(Uri baseUri, Uri relativeUri) { }

	[ObsoleteAttribute] // RVA: 0xBD26BC Offset: 0xBD26BC VA: 0xBD26BC
	// RVA: 0x204B36C Offset: 0x204B36C VA: 0x204B36C
	public void .ctor(string uriString, bool dontEscape) { }

	// RVA: 0x204DFF0 Offset: 0x204DFF0 VA: 0x204DFF0
	public void .ctor(Uri baseUri, string relativeUri) { }

	[ObsoleteAttribute] // RVA: 0xBD26CC Offset: 0xBD26CC VA: 0xBD26CC
	// RVA: 0x204E0D4 Offset: 0x204E0D4 VA: 0x204E0D4
	public void .ctor(Uri baseUri, string relativeUri, bool dontEscape) { }

	// RVA: 0x204E1CC Offset: 0x204E1CC VA: 0x204E1CC
	private static void .cctor() { }

	// RVA: 0x204E5E4 Offset: 0x204E5E4 VA: 0x204E5E4 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x204D33C Offset: 0x204D33C VA: 0x204D33C
	private void Merge(Uri baseUri, string relativeUri) { }

	// RVA: 0x204EB8C Offset: 0x204EB8C VA: 0x204EB8C
	public string get_AbsolutePath() { }

	// RVA: 0x204E660 Offset: 0x204E660 VA: 0x204E660
	public string get_AbsoluteUri() { }

	// RVA: 0x204F6C4 Offset: 0x204F6C4 VA: 0x204F6C4
	public string get_Authority() { }

	// RVA: 0x204F840 Offset: 0x204F840 VA: 0x204F840
	public string get_Fragment() { }

	// RVA: 0x204F864 Offset: 0x204F864 VA: 0x204F864
	public string get_Host() { }

	// RVA: 0x204F888 Offset: 0x204F888 VA: 0x204F888
	public UriHostNameType get_HostNameType() { }

	// RVA: 0x204FBEC Offset: 0x204FBEC VA: 0x204FBEC
	public bool get_IsDefaultPort() { }

	// RVA: 0x204FB3C Offset: 0x204FB3C VA: 0x204FB3C
	public bool get_IsFile() { }

	// RVA: 0x204FC74 Offset: 0x204FC74 VA: 0x204FC74
	public bool get_IsLoopback() { }

	// RVA: 0x204FE78 Offset: 0x204FE78 VA: 0x204FE78
	public bool get_IsUnc() { }

	// RVA: 0x204FE9C Offset: 0x204FE9C VA: 0x204FE9C
	public string get_LocalPath() { }

	// RVA: 0x20502B4 Offset: 0x20502B4 VA: 0x20502B4
	public string get_PathAndQuery() { }

	// RVA: 0x205035C Offset: 0x205035C VA: 0x205035C
	public int get_Port() { }

	// RVA: 0x2050338 Offset: 0x2050338 VA: 0x2050338
	public string get_Query() { }

	// RVA: 0x204E790 Offset: 0x204E790 VA: 0x204E790
	public string get_Scheme() { }

	// RVA: 0x2050380 Offset: 0x2050380 VA: 0x2050380
	public string[] get_Segments() { }

	// RVA: 0x20507B8 Offset: 0x20507B8 VA: 0x20507B8
	public bool get_UserEscaped() { }

	// RVA: 0x20507C0 Offset: 0x20507C0 VA: 0x20507C0
	public string get_UserInfo() { }

	// RVA: 0x20507E4 Offset: 0x20507E4 VA: 0x20507E4
	public string get_DnsSafeHost() { }

	// RVA: 0x204B954 Offset: 0x204B954 VA: 0x204B954
	public bool get_IsAbsoluteUri() { }

	// RVA: 0x204D320 Offset: 0x204D320 VA: 0x204D320
	public string get_OriginalString() { }

	// RVA: 0x204FA38 Offset: 0x204FA38 VA: 0x204FA38
	public static UriHostNameType CheckHostName(string name) { }

	// RVA: 0x205081C Offset: 0x205081C VA: 0x205081C
	internal static bool IsIPv4Address(string name) { }

	// RVA: 0x2050990 Offset: 0x2050990 VA: 0x2050990
	internal static bool IsDomainAddress(string name) { }

	// RVA: 0x2050AD4 Offset: 0x2050AD4 VA: 0x2050AD4
	public static bool CheckSchemeName(string schemeName) { }

	// RVA: 0x2050C68 Offset: 0x2050C68 VA: 0x2050C68
	private static bool IsAlpha(char c) { }

	// RVA: 0x2050C94 Offset: 0x2050C94 VA: 0x2050C94 Slot: 0
	public override bool Equals(object comparant) { }

	// RVA: 0x2050D60 Offset: 0x2050D60 VA: 0x2050D60
	private bool InternalEquals(Uri uri) { }

	// RVA: 0x2050FB4 Offset: 0x2050FB4 VA: 0x2050FB4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x204EEC8 Offset: 0x204EEC8 VA: 0x204EEC8
	public string GetLeftPart(UriPartial part) { }

	// RVA: 0x2051BB4 Offset: 0x2051BB4 VA: 0x2051BB4
	public static int FromHex(char digit) { }

	// RVA: 0x2051C84 Offset: 0x2051C84 VA: 0x2051C84
	public static string HexEscape(char character) { }

	// RVA: 0x2051E0C Offset: 0x2051E0C VA: 0x2051E0C
	public static char HexUnescape(string pattern, ref int index) { }

	// RVA: 0x2052134 Offset: 0x2052134 VA: 0x2052134
	public static bool IsHexDigit(char digit) { }

	// RVA: 0x2051FA4 Offset: 0x2051FA4 VA: 0x2051FA4
	public static bool IsHexEncoding(string pattern, int index) { }

	// RVA: 0x2052170 Offset: 0x2052170 VA: 0x2052170
	public Uri MakeRelativeUri(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0xBD2704 Offset: 0xBD2704 VA: 0xBD2704
	// RVA: 0x205273C Offset: 0x205273C VA: 0x205273C
	public string MakeRelative(Uri toUri) { }

	// RVA: 0x205251C Offset: 0x205251C VA: 0x205251C
	private void AppendQueryAndFragment(ref string result) { }

	// RVA: 0x2052C98 Offset: 0x2052C98 VA: 0x2052C98 Slot: 3
	public override string ToString() { }

	// RVA: 0x2052D60 Offset: 0x2052D60 VA: 0x2052D60
	protected void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ObsoleteAttribute] // RVA: 0xBD273C Offset: 0xBD273C VA: 0xBD273C
	// RVA: 0x2052DDC Offset: 0x2052DDC VA: 0x2052DDC Slot: 5
	protected virtual void Escape() { }

	[ObsoleteAttribute] // RVA: 0xBD274C Offset: 0xBD274C VA: 0xBD274C
	// RVA: 0x204EB1C Offset: 0x204EB1C VA: 0x204EB1C
	protected static string EscapeString(string str) { }

	// RVA: 0x2052E4C Offset: 0x2052E4C VA: 0x2052E4C
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets) { }

	[ObsoleteAttribute] // RVA: 0xBD275C Offset: 0xBD275C VA: 0xBD275C
	// RVA: 0x20531DC Offset: 0x20531DC VA: 0x20531DC Slot: 6
	protected virtual void Parse() { }

	// RVA: 0x204B774 Offset: 0x204B774 VA: 0x204B774
	private void ParseUri(UriKind kind) { }

	[ObsoleteAttribute] // RVA: 0xBD2794 Offset: 0xBD2794 VA: 0xBD2794
	// RVA: 0x20532C0 Offset: 0x20532C0 VA: 0x20532C0 Slot: 7
	protected virtual string Unescape(string str) { }

	// RVA: 0x2052A40 Offset: 0x2052A40 VA: 0x2052A40
	internal static string Unescape(string str, bool excludeSpecial) { }

	// RVA: 0x205373C Offset: 0x205373C VA: 0x205373C
	private void ParseAsWindowsUNC(string uriString) { }

	// RVA: 0x2053958 Offset: 0x2053958 VA: 0x2053958
	private string ParseAsWindowsAbsoluteFilePath(string uriString) { }

	// RVA: 0x2053AE4 Offset: 0x2053AE4 VA: 0x2053AE4
	private void ParseAsUnixAbsoluteFilePath(string uriString) { }

	// RVA: 0x20531E0 Offset: 0x20531E0 VA: 0x20531E0
	private void Parse(UriKind kind, string uriString) { }

	// RVA: 0x204BB54 Offset: 0x204BB54 VA: 0x204BB54
	private string ParseNoExceptions(UriKind kind, string uriString) { }

	// RVA: 0x20511B4 Offset: 0x20511B4 VA: 0x20511B4
	private static bool CompactEscaped(string scheme) { }

	// RVA: 0x2051400 Offset: 0x2051400 VA: 0x2051400
	private static string Reduce(string path, bool compact_escaped) { }

	// RVA: 0x2053328 Offset: 0x2053328 VA: 0x2053328
	private static char HexUnescapeMultiByte(string pattern, ref int index, out char surrogate) { }

	// RVA: 0x2053DB0 Offset: 0x2053DB0 VA: 0x2053DB0
	internal static string GetSchemeDelimiter(string scheme) { }

	// RVA: 0x204F7BC Offset: 0x204F7BC VA: 0x204F7BC
	internal static int GetDefaultPort(string scheme) { }

	// RVA: 0x205112C Offset: 0x205112C VA: 0x205112C
	private string GetOpaqueWiseSchemeDelimiter() { }

	[ObsoleteAttribute] // RVA: 0xBD27A4 Offset: 0xBD27A4 VA: 0xBD27A4
	// RVA: 0x2053F68 Offset: 0x2053F68 VA: 0x2053F68 Slot: 8
	protected virtual bool IsBadFileSystemCharacter(char ch) { }

	[ObsoleteAttribute] // RVA: 0xBD27B4 Offset: 0xBD27B4 VA: 0xBD27B4
	// RVA: 0x2053FC0 Offset: 0x2053FC0 VA: 0x2053FC0
	protected static bool IsExcludedCharacter(char ch) { }

	// RVA: 0x2054020 Offset: 0x2054020 VA: 0x2054020
	internal static bool MaybeUri(string s) { }

	// RVA: 0x204E7B4 Offset: 0x204E7B4 VA: 0x204E7B4
	private static bool IsPredefinedScheme(string scheme) { }

	[ObsoleteAttribute] // RVA: 0xBD27C4 Offset: 0xBD27C4 VA: 0xBD27C4
	// RVA: 0x20540EC Offset: 0x20540EC VA: 0x20540EC Slot: 9
	protected virtual bool IsReservedCharacter(char ch) { }

	// RVA: 0x2053CF4 Offset: 0x2053CF4 VA: 0x2053CF4
	private UriParser get_Parser() { }

	// RVA: 0x2054124 Offset: 0x2054124 VA: 0x2054124
	private void set_Parser(UriParser value) { }

	// RVA: 0x205412C Offset: 0x205412C VA: 0x205412C
	public string GetComponents(UriComponents components, UriFormat format) { }

	// RVA: 0x2054180 Offset: 0x2054180 VA: 0x2054180
	public bool IsBaseOf(Uri uri) { }

	// RVA: 0x20541CC Offset: 0x20541CC VA: 0x20541CC
	public bool IsWellFormedOriginalString() { }

	// RVA: 0x20542A4 Offset: 0x20542A4 VA: 0x20542A4
	public static int Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType) { }

	// RVA: 0x20544C8 Offset: 0x20544C8 VA: 0x20544C8
	private static bool NeedToEscapeDataChar(char b) { }

	// RVA: 0x2054534 Offset: 0x2054534 VA: 0x2054534
	public static string EscapeDataString(string stringToEscape) { }

	// RVA: 0x20548A8 Offset: 0x20548A8 VA: 0x20548A8
	private static bool NeedToEscapeUriChar(char b) { }

	// RVA: 0x2054918 Offset: 0x2054918 VA: 0x2054918
	public static string EscapeUriString(string stringToEscape) { }

	// RVA: 0x2054C94 Offset: 0x2054C94 VA: 0x2054C94
	public static bool IsWellFormedUriString(string uriString, UriKind uriKind) { }

	// RVA: 0x2054D40 Offset: 0x2054D40 VA: 0x2054D40
	public static bool TryCreate(string uriString, UriKind uriKind, out Uri result) { }

	// RVA: 0x2054DD0 Offset: 0x2054DD0 VA: 0x2054DD0
	public static bool TryCreate(Uri baseUri, string relativeUri, out Uri result) { }

	// RVA: 0x2054EC8 Offset: 0x2054EC8 VA: 0x2054EC8
	public static bool TryCreate(Uri baseUri, Uri relativeUri, out Uri result) { }

	// RVA: 0x2054FEC Offset: 0x2054FEC VA: 0x2054FEC
	public static string UnescapeDataString(string stringToUnescape) { }

	// RVA: 0x205568C Offset: 0x205568C VA: 0x205568C
	private static int GetInt(byte b) { }

	// RVA: 0x2055560 Offset: 0x2055560 VA: 0x2055560
	private static int GetChar(string str, int offset, int length) { }

	// RVA: 0x20554D0 Offset: 0x20554D0 VA: 0x20554D0
	private static char[] GetChars(MemoryStream b, Encoding e) { }

	// RVA: 0x204EE3C Offset: 0x204EE3C VA: 0x204EE3C
	private void EnsureAbsoluteUri() { }

	// RVA: 0x204D318 Offset: 0x204D318 VA: 0x204D318
	public static bool op_Equality(Uri u1, Uri u2) { }

	// RVA: 0x20556DC Offset: 0x20556DC VA: 0x20556DC
	public static bool op_Inequality(Uri u1, Uri u2) { }
}

// Namespace: 
private struct Uri.UriScheme // TypeDefIndex: 1756
{
	// Fields
	public string scheme; // 0x0
	public string delimiter; // 0x8
	public int defaultPort; // 0x10

	// Methods

	// RVA: 0xD79BB8 Offset: 0xD79BB8 VA: 0xD79BB8
	public void .ctor(string s, string d, int p) { }
}

// Namespace: System
public class UriBuilder // TypeDefIndex: 1757
{
	// Fields
	private string scheme; // 0x10
	private string host; // 0x18
	private int port; // 0x20
	private string path; // 0x28
	private string query; // 0x30
	private string fragment; // 0x38
	private string username; // 0x40
	private string password; // 0x48
	private Uri uri; // 0x50
	private bool modified; // 0x58

	// Properties
	public string Fragment { get; set; }
	public string Host { get; set; }
	public string Password { get; set; }
	public string Path { get; set; }
	public int Port { get; set; }
	public string Query { get; set; }
	public string Scheme { get; set; }
	public Uri Uri { get; }
	public string UserName { get; set; }

	// Methods

	// RVA: 0x2B7E180 Offset: 0x2B7E180 VA: 0x2B7E180
	public void .ctor() { }

	// RVA: 0x2B7E2E8 Offset: 0x2B7E2E8 VA: 0x2B7E2E8
	public void .ctor(string uri) { }

	// RVA: 0x2B7E35C Offset: 0x2B7E35C VA: 0x2B7E35C
	public void .ctor(Uri uri) { }

	// RVA: 0x2B7E1FC Offset: 0x2B7E1FC VA: 0x2B7E1FC
	public void .ctor(string schemeName, string hostName) { }

	// RVA: 0x2B7E7DC Offset: 0x2B7E7DC VA: 0x2B7E7DC
	public void .ctor(string scheme, string host, int portNumber) { }

	// RVA: 0x2B7E8AC Offset: 0x2B7E8AC VA: 0x2B7E8AC
	public void .ctor(string scheme, string host, int port, string pathValue) { }

	// RVA: 0x2B7E8F0 Offset: 0x2B7E8F0 VA: 0x2B7E8F0
	public void .ctor(string scheme, string host, int port, string pathValue, string extraValue) { }

	// RVA: 0x2B7EC40 Offset: 0x2B7EC40 VA: 0x2B7EC40
	public string get_Fragment() { }

	// RVA: 0x2B7EA6C Offset: 0x2B7EA6C VA: 0x2B7EA6C
	public void set_Fragment(string value) { }

	// RVA: 0x2B7EC48 Offset: 0x2B7EC48 VA: 0x2B7EC48
	public string get_Host() { }

	// RVA: 0x2B7E66C Offset: 0x2B7E66C VA: 0x2B7E66C
	public void set_Host(string value) { }

	// RVA: 0x2B7EC50 Offset: 0x2B7EC50 VA: 0x2B7EC50
	public string get_Password() { }

	// RVA: 0x2B7EC58 Offset: 0x2B7EC58 VA: 0x2B7EC58
	public void set_Password(string value) { }

	// RVA: 0x2B7ECF8 Offset: 0x2B7ECF8 VA: 0x2B7ECF8
	public string get_Path() { }

	// RVA: 0x2B7E70C Offset: 0x2B7E70C VA: 0x2B7E70C
	public void set_Path(string value) { }

	// RVA: 0x2B7ED00 Offset: 0x2B7ED00 VA: 0x2B7ED00
	public int get_Port() { }

	// RVA: 0x2B7E808 Offset: 0x2B7E808 VA: 0x2B7E808
	public void set_Port(int value) { }

	// RVA: 0x2B7ED08 Offset: 0x2B7ED08 VA: 0x2B7ED08
	public string get_Query() { }

	// RVA: 0x2B7EB6C Offset: 0x2B7EB6C VA: 0x2B7EB6C
	public void set_Query(string value) { }

	// RVA: 0x2B7ED10 Offset: 0x2B7ED10 VA: 0x2B7ED10
	public string get_Scheme() { }

	// RVA: 0x2B7E574 Offset: 0x2B7E574 VA: 0x2B7E574
	public void set_Scheme(string value) { }

	// RVA: 0x2B7ED18 Offset: 0x2B7ED18 VA: 0x2B7ED18
	public Uri get_Uri() { }

	// RVA: 0x2B7EDB8 Offset: 0x2B7EDB8 VA: 0x2B7EDB8
	public string get_UserName() { }

	// RVA: 0x2B7EDC0 Offset: 0x2B7EDC0 VA: 0x2B7EDC0
	public void set_UserName(string value) { }

	// RVA: 0x2B7EE60 Offset: 0x2B7EE60 VA: 0x2B7EE60 Slot: 0
	public override bool Equals(object rparam) { }

	// RVA: 0x2B7EEC8 Offset: 0x2B7EEC8 VA: 0x2B7EEC8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2B7EEFC Offset: 0x2B7EEFC VA: 0x2B7EEFC Slot: 3
	public override string ToString() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0xBD0DBC Offset: 0xBD0DBC VA: 0xBD0DBC
public enum UriComponents // TypeDefIndex: 1758
{
	// Fields
	public int value__; // 0x0
	public const UriComponents Scheme = 1;
	public const UriComponents UserInfo = 2;
	public const UriComponents Host = 4;
	public const UriComponents Port = 8;
	public const UriComponents Path = 16;
	public const UriComponents Query = 32;
	public const UriComponents Fragment = 64;
	public const UriComponents StrongPort = 128;
	public const UriComponents KeepDelimiter = 1073741824;
	public const UriComponents HostAndPort = 132;
	public const UriComponents StrongAuthority = 134;
	public const UriComponents AbsoluteUri = 127;
	public const UriComponents PathAndQuery = 48;
	public const UriComponents HttpRequestUrl = 61;
	public const UriComponents SchemeAndServer = 13;
	public const UriComponents SerializationInfoString = -2147483648;
}

// Namespace: System
public enum UriFormat // TypeDefIndex: 1759
{
	// Fields
	public int value__; // 0x0
	public const UriFormat UriEscaped = 1;
	public const UriFormat Unescaped = 2;
	public const UriFormat SafeUnescaped = 3;
}

// Namespace: System
[Serializable]
public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1760
{
	// Methods

	// RVA: 0x2B7F2F8 Offset: 0x2B7F2F8 VA: 0x2B7F2F8
	public void .ctor() { }

	// RVA: 0x2B7F358 Offset: 0x2B7F358 VA: 0x2B7F358
	public void .ctor(string message) { }

	// RVA: 0x2B7F360 Offset: 0x2B7F360 VA: 0x2B7F360
	public void .ctor(string message, Exception exception) { }

	// RVA: 0x2B7F368 Offset: 0x2B7F368 VA: 0x2B7F368
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2B7F370 Offset: 0x2B7F370 VA: 0x2B7F370 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public enum UriHostNameType // TypeDefIndex: 1761
{
	// Fields
	public int value__; // 0x0
	public const UriHostNameType Unknown = 0;
	public const UriHostNameType Basic = 1;
	public const UriHostNameType Dns = 2;
	public const UriHostNameType IPv4 = 3;
	public const UriHostNameType IPv6 = 4;
}

// Namespace: System
public enum UriIdnScope // TypeDefIndex: 1762
{
	// Fields
	public int value__; // 0x0
	public const UriIdnScope None = 0;
	public const UriIdnScope AllExceptIntranet = 1;
	public const UriIdnScope All = 2;
}

// Namespace: System
public enum UriKind // TypeDefIndex: 1763
{
	// Fields
	public int value__; // 0x0
	public const UriKind RelativeOrAbsolute = 0;
	public const UriKind Absolute = 1;
	public const UriKind Relative = 2;
}

// Namespace: System
public abstract class UriParser // TypeDefIndex: 1764
{
	// Fields
	private static object lock_object; // 0x0
	private static Hashtable table; // 0x8
	internal string scheme_name; // 0x10
	private int default_port; // 0x18
	private static readonly Regex uri_regex; // 0x10
	private static readonly Regex auth_regex; // 0x18

	// Properties
	internal string SchemeName { get; set; }
	internal int DefaultPort { get; set; }

	// Methods

	// RVA: 0x2B7F378 Offset: 0x2B7F378 VA: 0x2B7F378
	protected void .ctor() { }

	// RVA: 0x2B7F380 Offset: 0x2B7F380 VA: 0x2B7F380
	private static void .cctor() { }

	// RVA: 0x2B7F454 Offset: 0x2B7F454 VA: 0x2B7F454
	private static Match ParseAuthority(Group g) { }

	// RVA: 0x2B7F4F4 Offset: 0x2B7F4F4 VA: 0x2B7F4F4 Slot: 4
	protected internal virtual string GetComponents(Uri uri, UriComponents components, UriFormat format) { }

	// RVA: 0x2B80438 Offset: 0x2B80438 VA: 0x2B80438 Slot: 5
	protected internal virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError) { }

	// RVA: 0x2B80554 Offset: 0x2B80554 VA: 0x2B80554 Slot: 6
	protected internal virtual bool IsBaseOf(Uri baseUri, Uri relativeUri) { }

	// RVA: 0x2B80688 Offset: 0x2B80688 VA: 0x2B80688 Slot: 7
	protected internal virtual bool IsWellFormedOriginalString(Uri uri) { }

	// RVA: 0x2B806B8 Offset: 0x2B806B8 VA: 0x2B806B8 Slot: 8
	protected internal virtual UriParser OnNewUri() { }

	[MonoTODOAttribute] // RVA: 0xBD27D4 Offset: 0xBD27D4 VA: 0xBD27D4
	// RVA: 0x2B806BC Offset: 0x2B806BC VA: 0x2B806BC Slot: 9
	protected virtual void OnRegister(string schemeName, int defaultPort) { }

	[MonoTODOAttribute] // RVA: 0xBD27E4 Offset: 0xBD27E4 VA: 0xBD27E4
	// RVA: 0x2B806C0 Offset: 0x2B806C0 VA: 0x2B806C0 Slot: 10
	protected internal virtual string Resolve(Uri baseUri, Uri relativeUri, out UriFormatException parsingError) { }

	// RVA: 0x2B80728 Offset: 0x2B80728 VA: 0x2B80728
	internal string get_SchemeName() { }

	// RVA: 0x2B80730 Offset: 0x2B80730 VA: 0x2B80730
	internal void set_SchemeName(string value) { }

	// RVA: 0x2B80738 Offset: 0x2B80738 VA: 0x2B80738
	internal int get_DefaultPort() { }

	// RVA: 0x2B80740 Offset: 0x2B80740 VA: 0x2B80740
	internal void set_DefaultPort(int value) { }

	// RVA: 0x2B801E0 Offset: 0x2B801E0 VA: 0x2B801E0
	private string IgnoreFirstCharIf(string s, char c) { }

	// RVA: 0x2B802C8 Offset: 0x2B802C8 VA: 0x2B802C8
	private string Format(string s, UriFormat format) { }

	// RVA: 0x2B80748 Offset: 0x2B80748 VA: 0x2B80748
	private static void CreateDefaults() { }

	// RVA: 0x2B80C58 Offset: 0x2B80C58 VA: 0x2B80C58
	public static bool IsKnownScheme(string schemeName) { }

	// RVA: 0x2B80B00 Offset: 0x2B80B00 VA: 0x2B80B00
	private static void InternalRegister(Hashtable table, UriParser uriParser, string schemeName, int defaultPort) { }

	// RVA: 0x2B80DB4 Offset: 0x2B80DB4 VA: 0x2B80DB4
	public static void Register(UriParser uriParser, string schemeName, int defaultPort) { }

	// RVA: 0x2B80FBC Offset: 0x2B80FBC VA: 0x2B80FBC
	internal static UriParser GetParser(string schemeName) { }
}

// Namespace: System
public enum UriPartial // TypeDefIndex: 1765
{
	// Fields
	public int value__; // 0x0
	public const UriPartial Scheme = 0;
	public const UriPartial Authority = 1;
	public const UriPartial Path = 2;
	public const UriPartial Query = 3;
}

// Namespace: System
public class UriTypeConverter : TypeConverter // TypeDefIndex: 1766
{
	// Methods

	// RVA: 0x2B81110 Offset: 0x2B81110 VA: 0x2B81110
	public void .ctor() { }

	// RVA: 0x2B81118 Offset: 0x2B81118 VA: 0x2B81118
	private bool CanConvert(Type type) { }

	// RVA: 0x2B811E0 Offset: 0x2B811E0 VA: 0x2B811E0 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x2B8126C Offset: 0x2B8126C VA: 0x2B8126C Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x2B81280 Offset: 0x2B81280 VA: 0x2B81280 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x2B81428 Offset: 0x2B81428 VA: 0x2B81428 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }
}

// Namespace: System.ComponentModel
public sealed class AsyncCompletedEventHandler : MulticastDelegate // TypeDefIndex: 1767
{
	// Methods

	// RVA: 0x223F11C Offset: 0x223F11C VA: 0x223F11C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x223F12C Offset: 0x223F12C VA: 0x223F12C Slot: 11
	public virtual void Invoke(object sender, AsyncCompletedEventArgs e) { }

	// RVA: 0x223F4EC Offset: 0x223F4EC VA: 0x223F4EC Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x223F51C Offset: 0x223F51C VA: 0x223F51C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.ComponentModel
public sealed class CollectionChangeEventHandler : MulticastDelegate // TypeDefIndex: 1768
{
	// Methods

	// RVA: 0x2244E88 Offset: 0x2244E88 VA: 0x2244E88
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2244E98 Offset: 0x2244E98 VA: 0x2244E98 Slot: 11
	public virtual void Invoke(object sender, CollectionChangeEventArgs e) { }

	// RVA: 0x2245258 Offset: 0x2245258 VA: 0x2245258 Slot: 12
	public virtual IAsyncResult BeginInvoke(object sender, CollectionChangeEventArgs e, AsyncCallback callback, object object) { }

	// RVA: 0x2245288 Offset: 0x2245288 VA: 0x2245288 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.ComponentModel
public sealed class DoWorkEventHandler : MulticastDelegate // TypeDefIndex: 1769
{
	// Methods

	// RVA: 0x224DA8C Offset: 0x224DA8C VA: 0x224DA8C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x2241574 Offset: 0x2241574 VA: 0x2241574 Slot: 11
	public virtual void Invoke(object sender, DoWorkEventArgs e) { }
