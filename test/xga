	public Group Item { get; }
	public Group Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x2036CEC Offset: 0x2036CEC VA: 0x2036CEC
	internal void .ctor(int n, int gap) { }

	// RVA: 0x2036D64 Offset: 0x2036D64 VA: 0x2036D64 Slot: 4
	public int get_Count() { }

	// RVA: 0x2036D90 Offset: 0x2036D90 VA: 0x2036D90 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x2036D98 Offset: 0x2036D98 VA: 0x2036D98
	public Group get_Item(int i) { }

	// RVA: 0x2037078 Offset: 0x2037078 VA: 0x2037078
	internal void SetValue(Group g, int i) { }

	// RVA: 0x2037108 Offset: 0x2037108 VA: 0x2037108
	public Group get_Item(string groupName) { }

	// RVA: 0x2037428 Offset: 0x2037428 VA: 0x2037428 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x2037430 Offset: 0x2037430 VA: 0x2037430 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x2037478 Offset: 0x2037478 VA: 0x2037478 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Match : Group // TypeDefIndex: 1690
{
	// Fields
	private Regex regex; // 0x30
	private IMachine machine; // 0x38
	private int text_length; // 0x40
	private GroupCollection groups; // 0x48
	private static Match empty; // 0x0

	// Properties
	public static Match Empty { get; }
	public virtual GroupCollection Groups { get; }
	internal Regex Regex { get; }

	// Methods

	// RVA: 0x203C6F0 Offset: 0x203C6F0 VA: 0x203C6F0
	private void .ctor() { }

	// RVA: 0x203AF8C Offset: 0x203AF8C VA: 0x203AF8C
	internal void .ctor(Regex regex, IMachine machine, string text, int text_length, int n_groups, int index, int length) { }

	// RVA: 0x203B040 Offset: 0x203B040 VA: 0x203B040
	internal void .ctor(Regex regex, IMachine machine, string text, int text_length, int n_groups, int index, int length, int n_caps) { }

	// RVA: 0x203C7A4 Offset: 0x203C7A4 VA: 0x203C7A4
	private static void .cctor() { }

	// RVA: 0x2036F64 Offset: 0x2036F64 VA: 0x2036F64
	public static Match get_Empty() { }

	// RVA: 0x203C804 Offset: 0x203C804 VA: 0x203C804 Slot: 4
	public virtual GroupCollection get_Groups() { }

	// RVA: 0x2034CA4 Offset: 0x2034CA4 VA: 0x2034CA4
	public Match NextMatch() { }

	// RVA: 0x2036FCC Offset: 0x2036FCC VA: 0x2036FCC
	internal Regex get_Regex() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xBD0C3C Offset: 0xBD0C3C VA: 0xBD0C3C
[Serializable]
public class MatchCollection : ICollection, IEnumerable // TypeDefIndex: 1691
{
	// Fields
	private Match current; // 0x10
	private ArrayList list; // 0x18

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public virtual Match Item { get; }
	public object SyncRoot { get; }
	private ICollection FullList { get; }

	// Methods

	// RVA: 0x203C80C Offset: 0x203C80C VA: 0x203C80C
	internal void .ctor(Match start) { }

	// RVA: 0x203C888 Offset: 0x203C888 VA: 0x203C888 Slot: 4
	public int get_Count() { }

	// RVA: 0x203C9D8 Offset: 0x203C9D8 VA: 0x203C9D8 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x203C9E0 Offset: 0x203C9E0 VA: 0x203C9E0 Slot: 9
	public virtual Match get_Item(int i) { }

	// RVA: 0x203CC64 Offset: 0x203CC64 VA: 0x203CC64 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x203CC6C Offset: 0x203CC6C VA: 0x203CC6C Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x203CD40 Offset: 0x203CD40 VA: 0x203CD40 Slot: 8
	public IEnumerator GetEnumerator() { }

	// RVA: 0x203CB60 Offset: 0x203CB60 VA: 0x203CB60
	private bool TryToGet(int i) { }

	// RVA: 0x203C940 Offset: 0x203C940 VA: 0x203C940
	private ICollection get_FullList() { }
}

// Namespace: 
private class MatchCollection.Enumerator : IEnumerator // TypeDefIndex: 1692
{
	// Fields
	private int index; // 0x10
	private MatchCollection coll; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	// RVA: 0x203CDF0 Offset: 0x203CDF0 VA: 0x203CDF0
	internal void .ctor(MatchCollection coll) { }

	// RVA: 0x203CE24 Offset: 0x203CE24 VA: 0x203CE24 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x203CE30 Offset: 0x203CE30 VA: 0x203CE30 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x203D040 Offset: 0x203D040 VA: 0x203D040 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Regex : ISerializable // TypeDefIndex: 1693
{
	// Fields
	private static FactoryCache cache; // 0x0
	private IMachineFactory machineFactory; // 0x10
	private IDictionary mapping; // 0x18
	private int group_count; // 0x20
	private int gap; // 0x24
	private bool refsInitialized; // 0x28
	private string[] group_names; // 0x30
	private int[] group_numbers; // 0x38
	protected internal string pattern; // 0x40
	protected internal RegexOptions roptions; // 0x48
	[MonoTODOAttribute] // RVA: 0xBD103C Offset: 0xBD103C VA: 0xBD103C
	internal Dictionary<string, int> capnames; // 0x50
	[MonoTODOAttribute] // RVA: 0xBD104C Offset: 0xBD104C VA: 0xBD104C
	internal Dictionary<int, int> caps; // 0x58
	[MonoTODOAttribute] // RVA: 0xBD105C Offset: 0xBD105C VA: 0xBD105C
	protected internal int capsize; // 0x60
	[MonoTODOAttribute] // RVA: 0xBD106C Offset: 0xBD106C VA: 0xBD106C
	protected internal string[] capslist; // 0x68

	// Properties
	public RegexOptions Options { get; }
	public bool RightToLeft { get; }
	internal int GroupCount { get; }
	internal int Gap { get; }
	private int[] GroupNumbers { get; }

	// Methods

	// RVA: 0x203E704 Offset: 0x203E704 VA: 0x203E704
	protected void .ctor() { }

	// RVA: 0x203E70C Offset: 0x203E70C VA: 0x203E70C
	public void .ctor(string pattern) { }

	// RVA: 0x203E714 Offset: 0x203E714 VA: 0x203E714
	public void .ctor(string pattern, RegexOptions options) { }

	// RVA: 0x203EB1C Offset: 0x203EB1C VA: 0x203EB1C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x203EC14 Offset: 0x203EC14 VA: 0x203EC14
	private static void .cctor() { }

	// RVA: 0x203EC80 Offset: 0x203EC80 VA: 0x203EC80 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x203EDC4 Offset: 0x203EDC4 VA: 0x203EDC4
	public static bool IsMatch(string input, string pattern, RegexOptions options) { }

	// RVA: 0x203EE90 Offset: 0x203EE90 VA: 0x203EE90
	public static Match Match(string input, string pattern) { }

	// RVA: 0x203EF08 Offset: 0x203EF08 VA: 0x203EF08
	public static Match Match(string input, string pattern, RegexOptions options) { }

	// RVA: 0x203EFD4 Offset: 0x203EFD4 VA: 0x203EFD4
	public static string Replace(string input, string pattern, MatchEvaluator evaluator) { }

	// RVA: 0x203F054 Offset: 0x203F054 VA: 0x203F054
	public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options) { }

	// RVA: 0x203F144 Offset: 0x203F144 VA: 0x203F144
	public static string Replace(string input, string pattern, string replacement) { }

	// RVA: 0x203F1C4 Offset: 0x203F1C4 VA: 0x203F1C4
	public static string Replace(string input, string pattern, string replacement, RegexOptions options) { }

	// RVA: 0x203E7EC Offset: 0x203E7EC VA: 0x203E7EC
	private static void validate_options(RegexOptions options) { }

	// RVA: 0x203E88C Offset: 0x203E88C VA: 0x203E88C
	private void Init() { }

	// RVA: 0x203F2B4 Offset: 0x203F2B4 VA: 0x203F2B4
	private void InitNewRegex() { }

	// RVA: 0x203F55C Offset: 0x203F55C VA: 0x203F55C
	private static IMachineFactory CreateMachineFactory(string pattern, RegexOptions options) { }

	// RVA: 0x203EDBC Offset: 0x203EDBC VA: 0x203EDBC
	public RegexOptions get_Options() { }

	// RVA: 0x2034250 Offset: 0x2034250 VA: 0x2034250
	public bool get_RightToLeft() { }

	// RVA: 0x20372A0 Offset: 0x20372A0 VA: 0x20372A0
	public int GroupNumberFromName(string name) { }

	// RVA: 0x2036FD4 Offset: 0x2036FD4 VA: 0x2036FD4
	internal int GetGroupIndex(int number) { }

	// RVA: 0x2040360 Offset: 0x2040360 VA: 0x2040360
	private int default_startat(string input) { }

	// RVA: 0x203EE48 Offset: 0x203EE48 VA: 0x203EE48
	public bool IsMatch(string input) { }

	// RVA: 0x2040380 Offset: 0x2040380 VA: 0x2040380
	public bool IsMatch(string input, int startat) { }

	// RVA: 0x203EF8C Offset: 0x203EF8C VA: 0x203EF8C
	public Match Match(string input) { }

	// RVA: 0x20403AC Offset: 0x20403AC VA: 0x20403AC
	public Match Match(string input, int startat) { }

	// RVA: 0x20405E0 Offset: 0x20405E0 VA: 0x20405E0
	public MatchCollection Matches(string input) { }

	// RVA: 0x2040628 Offset: 0x2040628 VA: 0x2040628
	public MatchCollection Matches(string input, int startat) { }

	// RVA: 0x203F0E8 Offset: 0x203F0E8 VA: 0x203F0E8
	public string Replace(string input, MatchEvaluator evaluator) { }

	// RVA: 0x20406B0 Offset: 0x20406B0 VA: 0x20406B0
	public string Replace(string input, MatchEvaluator evaluator, int count, int startat) { }

	// RVA: 0x203F258 Offset: 0x203F258 VA: 0x203F258
	public string Replace(string input, string replacement) { }

	// RVA: 0x204094C Offset: 0x204094C VA: 0x204094C
	public string Replace(string input, string replacement, int count, int startat) { }

	// RVA: 0x2040B0C Offset: 0x2040B0C VA: 0x2040B0C Slot: 3
	public override string ToString() { }

	// RVA: 0x2040B14 Offset: 0x2040B14 VA: 0x2040B14
	internal int get_GroupCount() { }

	// RVA: 0x203C79C Offset: 0x203C79C VA: 0x203C79C
	internal int get_Gap() { }

	// RVA: 0x204052C Offset: 0x204052C VA: 0x204052C
	private IMachine CreateMachine() { }

	// RVA: 0x203FE60 Offset: 0x203FE60 VA: 0x203FE60
	private static string[] GetGroupNamesArray(int groupCount, IDictionary mapping) { }

	// RVA: 0x20401FC Offset: 0x20401FC VA: 0x20401FC
	private int[] get_GroupNumbers() { }
}

// Namespace: 
private class Regex.Adapter // TypeDefIndex: 1694
{
	// Fields
	private MatchEvaluator ev; // 0x10

	// Methods

	// RVA: 0x2040920 Offset: 0x2040920 VA: 0x2040920
	public void .ctor(MatchEvaluator ev) { }

	// RVA: 0x2040B1C Offset: 0x2040B1C VA: 0x2040B1C
	public void Evaluate(Match m, StringBuilder sb) { }
}

// Namespace: System.Text.RegularExpressions
[FlagsAttribute] // RVA: 0xBD0C74 Offset: 0xBD0C74 VA: 0xBD0C74
public enum RegexOptions // TypeDefIndex: 1695
{
	// Fields
	public int value__; // 0x0
	public const RegexOptions None = 0;
	public const RegexOptions IgnoreCase = 1;
	public const RegexOptions Multiline = 2;
	public const RegexOptions ExplicitCapture = 4;
	public const RegexOptions Singleline = 16;
	public const RegexOptions IgnorePatternWhitespace = 32;
	public const RegexOptions RightToLeft = 64;
	public const RegexOptions ECMAScript = 256;
	public const RegexOptions CultureInvariant = 512;
}

// Namespace: System.Text.RegularExpressions
internal enum OpCode // TypeDefIndex: 1696
{
	// Fields
	public ushort value__; // 0x0
	public const OpCode False = 0;
	public const OpCode True = 1;
	public const OpCode Position = 2;
	public const OpCode String = 3;
	public const OpCode Reference = 4;
	public const OpCode Character = 5;
	public const OpCode Category = 6;
	public const OpCode NotCategory = 7;
	public const OpCode Range = 8;
	public const OpCode Set = 9;
	public const OpCode In = 10;
	public const OpCode Open = 11;
	public const OpCode Close = 12;
	public const OpCode Balance = 13;
	public const OpCode BalanceStart = 14;
	public const OpCode IfDefined = 15;
	public const OpCode Sub = 16;
	public const OpCode Test = 17;
	public const OpCode Branch = 18;
	public const OpCode Jump = 19;
	public const OpCode Repeat = 20;
	public const OpCode Until = 21;
	public const OpCode FastRepeat = 22;
	public const OpCode Anchor = 23;
	public const OpCode Info = 24;
}

// Namespace: System.Text.RegularExpressions
[FlagsAttribute] // RVA: 0xBD0C84 Offset: 0xBD0C84 VA: 0xBD0C84
internal enum OpFlags // TypeDefIndex: 1697
{
	// Fields
	public ushort value__; // 0x0
	public const OpFlags None = 0;
	public const OpFlags Negate = 256;
	public const OpFlags IgnoreCase = 512;
	public const OpFlags RightToLeft = 1024;
	public const OpFlags Lazy = 2048;
}

// Namespace: System.Text.RegularExpressions
internal enum Position // TypeDefIndex: 1698
{
	// Fields
	public ushort value__; // 0x0
	public const Position Any = 0;
	public const Position Start = 1;
	public const Position StartOfString = 2;
	public const Position StartOfLine = 3;
	public const Position StartOfScan = 4;
	public const Position End = 5;
	public const Position EndOfString = 6;
	public const Position EndOfLine = 7;
	public const Position Boundary = 8;
	public const Position NonBoundary = 9;
}

// Namespace: System.Text.RegularExpressions
internal interface IMachine // TypeDefIndex: 1699
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Match Scan(Regex regex, string text, int start, int end);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string Replace(Regex regex, string input, string replacement, int count, int startat);
}

// Namespace: System.Text.RegularExpressions
internal interface IMachineFactory // TypeDefIndex: 1700
{
	// Properties
	public abstract IDictionary Mapping { get; set; }
	public abstract int GroupCount { get; }
	public abstract int Gap { get; set; }
	public abstract string[] NamesMapping { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMachine NewInstance();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IDictionary get_Mapping();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_Mapping(IDictionary value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract int get_GroupCount();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Gap();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_Gap(int value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract string[] get_NamesMapping();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void set_NamesMapping(string[] value);
}

// Namespace: System.Text.RegularExpressions
internal class FactoryCache // TypeDefIndex: 1701
{
	// Fields
	private int capacity; // 0x10
	private Hashtable factories; // 0x18
	private MRUList mru_list; // 0x20

	// Methods

	// RVA: 0x2036048 Offset: 0x2036048 VA: 0x2036048
	public void .ctor(int capacity) { }

	// RVA: 0x2036114 Offset: 0x2036114 VA: 0x2036114
	public void Add(string pattern, RegexOptions options, IMachineFactory factory) { }

	// RVA: 0x20362A0 Offset: 0x20362A0 VA: 0x20362A0
	private void Cleanup() { }

	// RVA: 0x20365C0 Offset: 0x20365C0 VA: 0x20365C0
	public IMachineFactory Lookup(string pattern, RegexOptions options) { }
}

// Namespace: 
private class FactoryCache.Key // TypeDefIndex: 1702
{
	// Fields
	public string pattern; // 0x10
	public RegexOptions options; // 0x18

	// Methods

	// RVA: 0x2036264 Offset: 0x2036264 VA: 0x2036264
	public void .ctor(string pattern, RegexOptions options) { }

	// RVA: 0x20367A4 Offset: 0x20367A4 VA: 0x20367A4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x20367E4 Offset: 0x20367E4 VA: 0x20367E4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x20368A8 Offset: 0x20368A8 VA: 0x20368A8 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Text.RegularExpressions
internal class MRUList // TypeDefIndex: 1703
{
	// Fields
	private MRUList.Node head; // 0x10
	private MRUList.Node tail; // 0x18

	// Methods

	// RVA: 0x20360EC Offset: 0x20360EC VA: 0x20360EC
	public void .ctor() { }

	// RVA: 0x2036404 Offset: 0x2036404 VA: 0x2036404
	public void Use(object o) { }

	// RVA: 0x2036588 Offset: 0x2036588 VA: 0x2036588
	public object Evict() { }
}

// Namespace: 
private class MRUList.Node // TypeDefIndex: 1704
{
	// Fields
	public object value; // 0x10
	public MRUList.Node previous; // 0x18
	public MRUList.Node next; // 0x20

	// Methods

	// RVA: 0x203C6C4 Offset: 0x203C6C4 VA: 0x203C6C4
	public void .ctor(object value) { }
}

// Namespace: System.Text.RegularExpressions
internal enum Category // TypeDefIndex: 1705
{
	// Fields
	public ushort value__; // 0x0
	public const Category None = 0;
	public const Category Any = 1;
	public const Category AnySingleline = 2;
	public const Category Word = 3;
	public const Category Digit = 4;
	public const Category WhiteSpace = 5;
	public const Category EcmaAny = 6;
	public const Category EcmaAnySingleline = 7;
	public const Category EcmaWord = 8;
	public const Category EcmaDigit = 9;
	public const Category EcmaWhiteSpace = 10;
	public const Category UnicodeL = 11;
	public const Category UnicodeM = 12;
	public const Category UnicodeN = 13;
	public const Category UnicodeZ = 14;
	public const Category UnicodeP = 15;
	public const Category UnicodeS = 16;
	public const Category UnicodeC = 17;
	public const Category UnicodeLu = 18;
	public const Category UnicodeLl = 19;
	public const Category UnicodeLt = 20;
	public const Category UnicodeLm = 21;
	public const Category UnicodeLo = 22;
	public const Category UnicodeMn = 23;
	public const Category UnicodeMe = 24;
	public const Category UnicodeMc = 25;
	public const Category UnicodeNd = 26;
	public const Category UnicodeNl = 27;
	public const Category UnicodeNo = 28;
	public const Category UnicodeZs = 29;
	public const Category UnicodeZl = 30;
	public const Category UnicodeZp = 31;
	public const Category UnicodePd = 32;
	public const Category UnicodePs = 33;
	public const Category UnicodePi = 34;
	public const Category UnicodePe = 35;
	public const Category UnicodePf = 36;
	public const Category UnicodePc = 37;
	public const Category UnicodePo = 38;
	public const Category UnicodeSm = 39;
	public const Category UnicodeSc = 40;
	public const Category UnicodeSk = 41;
	public const Category UnicodeSo = 42;
	public const Category UnicodeCc = 43;
	public const Category UnicodeCf = 44;
	public const Category UnicodeCo = 45;
	public const Category UnicodeCs = 46;
	public const Category UnicodeCn = 47;
	public const Category UnicodeBasicLatin = 48;
	public const Category UnicodeLatin1Supplement = 49;
	public const Category UnicodeLatinExtendedA = 50;
	public const Category UnicodeLatinExtendedB = 51;
	public const Category UnicodeIPAExtensions = 52;
	public const Category UnicodeSpacingModifierLetters = 53;
	public const Category UnicodeCombiningDiacriticalMarks = 54;
	public const Category UnicodeGreek = 55;
	public const Category UnicodeCyrillic = 56;
	public const Category UnicodeArmenian = 57;
	public const Category UnicodeHebrew = 58;
	public const Category UnicodeArabic = 59;
	public const Category UnicodeSyriac = 60;
	public const Category UnicodeThaana = 61;
	public const Category UnicodeDevanagari = 62;
	public const Category UnicodeBengali = 63;
	public const Category UnicodeGurmukhi = 64;
	public const Category UnicodeGujarati = 65;
	public const Category UnicodeOriya = 66;
	public const Category UnicodeTamil = 67;
	public const Category UnicodeTelugu = 68;
	public const Category UnicodeKannada = 69;
	public const Category UnicodeMalayalam = 70;
	public const Category UnicodeSinhala = 71;
	public const Category UnicodeThai = 72;
	public const Category UnicodeLao = 73;
	public const Category UnicodeTibetan = 74;
	public const Category UnicodeMyanmar = 75;
	public const Category UnicodeGeorgian = 76;
	public const Category UnicodeHangulJamo = 77;
	public const Category UnicodeEthiopic = 78;
	public const Category UnicodeCherokee = 79;
	public const Category UnicodeUnifiedCanadianAboriginalSyllabics = 80;
	public const Category UnicodeOgham = 81;
	public const Category UnicodeRunic = 82;
	public const Category UnicodeKhmer = 83;
	public const Category UnicodeMongolian = 84;
	public const Category UnicodeLatinExtendedAdditional = 85;
	public const Category UnicodeGreekExtended = 86;
	public const Category UnicodeGeneralPunctuation = 87;
	public const Category UnicodeSuperscriptsandSubscripts = 88;
	public const Category UnicodeCurrencySymbols = 89;
	public const Category UnicodeCombiningMarksforSymbols = 90;
	public const Category UnicodeLetterlikeSymbols = 91;
	public const Category UnicodeNumberForms = 92;
	public const Category UnicodeArrows = 93;
	public const Category UnicodeMathematicalOperators = 94;
	public const Category UnicodeMiscellaneousTechnical = 95;
	public const Category UnicodeControlPictures = 96;
	public const Category UnicodeOpticalCharacterRecognition = 97;
	public const Category UnicodeEnclosedAlphanumerics = 98;
	public const Category UnicodeBoxDrawing = 99;
	public const Category UnicodeBlockElements = 100;
	public const Category UnicodeGeometricShapes = 101;
	public const Category UnicodeMiscellaneousSymbols = 102;
	public const Category UnicodeDingbats = 103;
	public const Category UnicodeBraillePatterns = 104;
	public const Category UnicodeCJKRadicalsSupplement = 105;
	public const Category UnicodeKangxiRadicals = 106;
	public const Category UnicodeIdeographicDescriptionCharacters = 107;
	public const Category UnicodeCJKSymbolsandPunctuation = 108;
	public const Category UnicodeHiragana = 109;
	public const Category UnicodeKatakana = 110;
	public const Category UnicodeBopomofo = 111;
	public const Category UnicodeHangulCompatibilityJamo = 112;
	public const Category UnicodeKanbun = 113;
	public const Category UnicodeBopomofoExtended = 114;
	public const Category UnicodeEnclosedCJKLettersandMonths = 115;
	public const Category UnicodeCJKCompatibility = 116;
	public const Category UnicodeCJKUnifiedIdeographsExtensionA = 117;
	public const Category UnicodeCJKUnifiedIdeographs = 118;
	public const Category UnicodeYiSyllables = 119;
	public const Category UnicodeYiRadicals = 120;
	public const Category UnicodeHangulSyllables = 121;
	public const Category UnicodeHighSurrogates = 122;
	public const Category UnicodeHighPrivateUseSurrogates = 123;
	public const Category UnicodeLowSurrogates = 124;
	public const Category UnicodePrivateUse = 125;
	public const Category UnicodeCJKCompatibilityIdeographs = 126;
	public const Category UnicodeAlphabeticPresentationForms = 127;
	public const Category UnicodeArabicPresentationFormsA = 128;
	public const Category UnicodeCombiningHalfMarks = 129;
	public const Category UnicodeCJKCompatibilityForms = 130;
	public const Category UnicodeSmallFormVariants = 131;
	public const Category UnicodeArabicPresentationFormsB = 132;
	public const Category UnicodeSpecials = 133;
	public const Category UnicodeHalfwidthandFullwidthForms = 134;
	public const Category UnicodeOldItalic = 135;
	public const Category UnicodeGothic = 136;
	public const Category UnicodeDeseret = 137;
	public const Category UnicodeByzantineMusicalSymbols = 138;
	public const Category UnicodeMusicalSymbols = 139;
	public const Category UnicodeMathematicalAlphanumericSymbols = 140;
	public const Category UnicodeCJKUnifiedIdeographsExtensionB = 141;
	public const Category UnicodeCJKCompatibilityIdeographsSupplement = 142;
	public const Category UnicodeTags = 143;
	public const Category LastValue = 144;
}

// Namespace: System.Text.RegularExpressions
internal class CategoryUtils // TypeDefIndex: 1706
{
	// Methods

	// RVA: 0x20354B8 Offset: 0x20354B8 VA: 0x20354B8
	public static Category CategoryFromName(string name) { }

	// RVA: 0x2035688 Offset: 0x2035688 VA: 0x2035688
	public static bool IsCategory(Category cat, char c) { }

	// RVA: 0x2035FC8 Offset: 0x2035FC8 VA: 0x2035FC8
	private static bool IsCategory(UnicodeCategory uc, char c) { }
}

// Namespace: System.Text.RegularExpressions
internal abstract class LinkRef // TypeDefIndex: 1707
{
	// Methods

	// RVA: 0x203C57C Offset: 0x203C57C VA: 0x203C57C
	protected void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal interface ICompiler // TypeDefIndex: 1708
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMachineFactory GetMachineFactory();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void EmitFalse();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void EmitTrue();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void EmitCharacter(char c, bool negate, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void EmitCategory(Category cat, bool negate, bool reverse);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void EmitNotCategory(Category cat, bool negate, bool reverse);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void EmitString(string str, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 9
	public abstract void EmitPosition(Position pos);

	// RVA: -1 Offset: -1 Slot: 10
	public abstract void EmitOpen(int gid);

	// RVA: -1 Offset: -1 Slot: 11
	public abstract void EmitClose(int gid);

	// RVA: -1 Offset: -1 Slot: 12
	public abstract void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 13
	public abstract void EmitBalance();

	// RVA: -1 Offset: -1 Slot: 14
	public abstract void EmitReference(int gid, bool ignore, bool reverse);

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void EmitIfDefined(int gid, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 16
	public abstract void EmitSub(LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract void EmitTest(LinkRef yes, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void EmitBranch(LinkRef next);

	// RVA: -1 Offset: -1 Slot: 19
	public abstract void EmitJump(LinkRef target);

	// RVA: -1 Offset: -1 Slot: 20
	public abstract void EmitRepeat(int min, int max, bool lazy, LinkRef until);

	// RVA: -1 Offset: -1 Slot: 21
	public abstract void EmitUntil(LinkRef repeat);

	// RVA: -1 Offset: -1 Slot: 22
	public abstract void EmitIn(LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 23
	public abstract void EmitInfo(int count, int min, int max);

	// RVA: -1 Offset: -1 Slot: 24
	public abstract void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 25
	public abstract void EmitAnchor(bool reverse, int offset, LinkRef tail);

	// RVA: -1 Offset: -1 Slot: 26
	public abstract void EmitBranchEnd();

	// RVA: -1 Offset: -1 Slot: 27
	public abstract void EmitAlternationEnd();

	// RVA: -1 Offset: -1 Slot: 28
	public abstract LinkRef NewLink();

	// RVA: -1 Offset: -1 Slot: 29
	public abstract void ResolveLink(LinkRef link);
}

// Namespace: System.Text.RegularExpressions
internal class InterpreterFactory : IMachineFactory // TypeDefIndex: 1709
{
	// Fields
	private IDictionary mapping; // 0x10
	private ushort[] pattern; // 0x18
	private string[] namesMapping; // 0x20
	private int gap; // 0x28

	// Properties
	public int GroupCount { get; }
	public int Gap { get; set; }
	public IDictionary Mapping { get; set; }
	public string[] NamesMapping { get; set; }

	// Methods

	// RVA: 0x203B14C Offset: 0x203B14C VA: 0x203B14C
	public void .ctor(ushort[] pattern) { }

	// RVA: 0x203B178 Offset: 0x203B178 VA: 0x203B178 Slot: 4
	public IMachine NewInstance() { }

	// RVA: 0x203B1DC Offset: 0x203B1DC VA: 0x203B1DC Slot: 7
	public int get_GroupCount() { }

	// RVA: 0x203B224 Offset: 0x203B224 VA: 0x203B224 Slot: 8
	public int get_Gap() { }

	// RVA: 0x203B22C Offset: 0x203B22C VA: 0x203B22C Slot: 9
	public void set_Gap(int value) { }

	// RVA: 0x203B234 Offset: 0x203B234 VA: 0x203B234 Slot: 5
	public IDictionary get_Mapping() { }

	// RVA: 0x203B23C Offset: 0x203B23C VA: 0x203B23C Slot: 6
	public void set_Mapping(IDictionary value) { }

	// RVA: 0x203B244 Offset: 0x203B244 VA: 0x203B244 Slot: 10
	public string[] get_NamesMapping() { }

	// RVA: 0x203B24C Offset: 0x203B24C VA: 0x203B24C Slot: 11
	public void set_NamesMapping(string[] value) { }
}

// Namespace: System.Text.RegularExpressions
internal class PatternCompiler : ICompiler // TypeDefIndex: 1710
{
	// Fields
	private ArrayList pgm; // 0x10

	// Properties
	private int CurrentAddress { get; }

	// Methods

	// RVA: 0x203D1DC Offset: 0x203D1DC VA: 0x203D1DC
	public void .ctor() { }

	// RVA: 0x203D248 Offset: 0x203D248 VA: 0x203D248
	public static ushort EncodeOp(OpCode op, OpFlags flags) { }

	// RVA: 0x203D254 Offset: 0x203D254 VA: 0x203D254 Slot: 4
	public IMachineFactory GetMachineFactory() { }

	// RVA: 0x203D320 Offset: 0x203D320 VA: 0x203D320 Slot: 5
	public void EmitFalse() { }

	// RVA: 0x203D32C Offset: 0x203D32C VA: 0x203D32C Slot: 6
	public void EmitTrue() { }

	// RVA: 0x203D334 Offset: 0x203D334 VA: 0x203D334
	private void EmitCount(int count) { }

	// RVA: 0x203D3F0 Offset: 0x203D3F0 VA: 0x203D3F0 Slot: 7
	public void EmitCharacter(char c, bool negate, bool ignore, bool reverse) { }

	// RVA: 0x203D500 Offset: 0x203D500 VA: 0x203D500 Slot: 8
	public void EmitCategory(Category cat, bool negate, bool reverse) { }

	// RVA: 0x203D548 Offset: 0x203D548 VA: 0x203D548 Slot: 9
	public void EmitNotCategory(Category cat, bool negate, bool reverse) { }

	// RVA: 0x203D590 Offset: 0x203D590 VA: 0x203D590 Slot: 10
	public void EmitRange(char lo, char hi, bool negate, bool ignore, bool reverse) { }

	// RVA: 0x203D5FC Offset: 0x203D5FC VA: 0x203D5FC Slot: 11
	public void EmitSet(char lo, BitArray set, bool negate, bool ignore, bool reverse) { }

	// RVA: 0x203D734 Offset: 0x203D734 VA: 0x203D734 Slot: 12
	public void EmitString(string str, bool ignore, bool reverse) { }

	// RVA: 0x203D808 Offset: 0x203D808 VA: 0x203D808 Slot: 13
	public void EmitPosition(Position pos) { }

	// RVA: 0x203D838 Offset: 0x203D838 VA: 0x203D838 Slot: 14
	public void EmitOpen(int gid) { }

	// RVA: 0x203D868 Offset: 0x203D868 VA: 0x203D868 Slot: 15
	public void EmitClose(int gid) { }

	// RVA: 0x203D898 Offset: 0x203D898 VA: 0x203D898 Slot: 16
	public void EmitBalanceStart(int gid, int balance, bool capture, LinkRef tail) { }

	// RVA: 0x203DB5C Offset: 0x203DB5C VA: 0x203DB5C Slot: 17
	public void EmitBalance() { }

	// RVA: 0x203DB64 Offset: 0x203DB64 VA: 0x203DB64 Slot: 18
	public void EmitReference(int gid, bool ignore, bool reverse) { }

	// RVA: 0x203DBAC Offset: 0x203DBAC VA: 0x203DBAC Slot: 19
	public void EmitIfDefined(int gid, LinkRef tail) { }

	// RVA: 0x203DC00 Offset: 0x203DC00 VA: 0x203DC00 Slot: 20
	public void EmitSub(LinkRef tail) { }

	// RVA: 0x203DC38 Offset: 0x203DC38 VA: 0x203DC38 Slot: 21
	public void EmitTest(LinkRef yes, LinkRef tail) { }

	// RVA: 0x203DC94 Offset: 0x203DC94 VA: 0x203DC94 Slot: 22
	public void EmitBranch(LinkRef next) { }

	// RVA: 0x203DCCC Offset: 0x203DCCC VA: 0x203DCCC Slot: 23
	public void EmitJump(LinkRef target) { }

	// RVA: 0x203DD04 Offset: 0x203DD04 VA: 0x203DD04 Slot: 24
	public void EmitRepeat(int min, int max, bool lazy, LinkRef until) { }

	// RVA: 0x203DD98 Offset: 0x203DD98 VA: 0x203DD98 Slot: 25
	public void EmitUntil(LinkRef repeat) { }

	// RVA: 0x203DF44 Offset: 0x203DF44 VA: 0x203DF44 Slot: 28
	public void EmitFastRepeat(int min, int max, bool lazy, LinkRef tail) { }

	// RVA: 0x203DFD8 Offset: 0x203DFD8 VA: 0x203DFD8 Slot: 26
	public void EmitIn(LinkRef tail) { }

	// RVA: 0x203E010 Offset: 0x203E010 VA: 0x203E010 Slot: 29
	public void EmitAnchor(bool reverse, int offset, LinkRef tail) { }

	// RVA: 0x203E074 Offset: 0x203E074 VA: 0x203E074 Slot: 27
	public void EmitInfo(int count, int min, int max) { }

	// RVA: 0x203E0F0 Offset: 0x203E0F0 VA: 0x203E0F0 Slot: 32
	public LinkRef NewLink() { }

	// RVA: 0x203DDC0 Offset: 0x203DDC0 VA: 0x203DDC0 Slot: 33
	public void ResolveLink(LinkRef lref) { }

	// RVA: 0x203E198 Offset: 0x203E198 VA: 0x203E198 Slot: 30
	public void EmitBranchEnd() { }

	// RVA: 0x203E19C Offset: 0x203E19C VA: 0x203E19C Slot: 31
	public void EmitAlternationEnd() { }

	// RVA: 0x203D4C0 Offset: 0x203D4C0 VA: 0x203D4C0
	private static OpFlags MakeFlags(bool negate, bool ignore, bool reverse, bool lazy) { }

	// RVA: 0x203D328 Offset: 0x203D328 VA: 0x203D328
	private void Emit(OpCode op) { }

	// RVA: 0x203D4F4 Offset: 0x203D4F4 VA: 0x203D4F4
	private void Emit(OpCode op, OpFlags flags) { }

	// RVA: 0x203D360 Offset: 0x203D360 VA: 0x203D360
	private void Emit(ushort word) { }

	// RVA: 0x203E154 Offset: 0x203E154 VA: 0x203E154
	private int get_CurrentAddress() { }

	// RVA: 0x203D924 Offset: 0x203D924 VA: 0x203D924
	private void BeginLink(LinkRef lref) { }

	// RVA: 0x203DA28 Offset: 0x203DA28 VA: 0x203DA28
	private void EmitLink(LinkRef lref) { }
}

// Namespace: 
private class PatternCompiler.PatternLinkStack : LinkStack // TypeDefIndex: 1711
{
	// Fields
	private PatternCompiler.PatternLinkStack.Link link; // 0x18

	// Properties
	public int BaseAddress { set; }
	public int OffsetAddress { get; set; }

	// Methods

	// RVA: 0x203E148 Offset: 0x203E148 VA: 0x203E148
	public void .ctor() { }

	// RVA: 0x203E1A0 Offset: 0x203E1A0 VA: 0x203E1A0
	public void set_BaseAddress(int value) { }

	// RVA: 0x203E14C Offset: 0x203E14C VA: 0x203E14C
	public int get_OffsetAddress() { }

	// RVA: 0x203E1A8 Offset: 0x203E1A8 VA: 0x203E1A8
	public void set_OffsetAddress(int value) { }

	// RVA: 0x203E18C Offset: 0x203E18C VA: 0x203E18C
	public int GetOffset(int target_addr) { }

	// RVA: 0x203E1B0 Offset: 0x203E1B0 VA: 0x203E1B0 Slot: 4
	protected override object GetCurrent() { }

	// RVA: 0x203E214 Offset: 0x203E214 VA: 0x203E214 Slot: 5
	protected override void SetCurrent(object l) { }
}

// Namespace: 
