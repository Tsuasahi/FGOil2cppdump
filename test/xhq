{
	// Fields
	[SerializeField] // RVA: 0xC67498 Offset: 0xC67498 VA: 0xC67498
	private bool m_DoubleClickSelectsWord; // 0x10
	[SerializeField] // RVA: 0xC674A8 Offset: 0xC674A8 VA: 0xC674A8
	private bool m_TripleClickSelectsLine; // 0x11
	[SerializeField] // RVA: 0xC674B8 Offset: 0xC674B8 VA: 0xC674B8
	private Color m_CursorColor; // 0x14
	[SerializeField] // RVA: 0xC674C8 Offset: 0xC674C8 VA: 0xC674C8
	private float m_CursorFlashSpeed; // 0x24
	[SerializeField] // RVA: 0xC674D8 Offset: 0xC674D8 VA: 0xC674D8
	private Color m_SelectionColor; // 0x28

	// Properties
	public bool doubleClickSelectsWord { get; }
	public bool tripleClickSelectsLine { get; }
	public Color cursorColor { get; }
	public float cursorFlashSpeed { get; }
	public Color selectionColor { get; }

	// Methods

	// RVA: 0x27DBE40 Offset: 0x27DBE40 VA: 0x27DBE40
	public void .ctor() { }

	// RVA: 0x27DBEC4 Offset: 0x27DBEC4 VA: 0x27DBEC4
	private static float Internal_GetCursorFlashSpeed() { }

	// RVA: 0x27CC62C Offset: 0x27CC62C VA: 0x27CC62C
	public bool get_doubleClickSelectsWord() { }

	// RVA: 0x27CC634 Offset: 0x27CC634 VA: 0x27CC634
	public bool get_tripleClickSelectsLine() { }

	// RVA: 0x27DBF1C Offset: 0x27DBF1C VA: 0x27DBF1C
	public Color get_cursorColor() { }

	// RVA: 0x27DBF28 Offset: 0x27DBF28 VA: 0x27DBF28
	public float get_cursorFlashSpeed() { }

	// RVA: 0x27DBF3C Offset: 0x27DBF3C VA: 0x27DBF3C
	public Color get_selectionColor() { }
}

// Namespace: UnityEngine
[ExecuteInEditMode] // RVA: 0xC66BD4 Offset: 0xC66BD4 VA: 0xC66BD4
[RequiredByNativeCodeAttribute] // RVA: 0xC66BD4 Offset: 0xC66BD4 VA: 0xC66BD4
[AssetFileNameExtensionAttribute] // RVA: 0xC66BD4 Offset: 0xC66BD4 VA: 0xC66BD4
[Serializable]
public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2745
{
	// Fields
	[SerializeField] // RVA: 0xC674E8 Offset: 0xC674E8 VA: 0xC674E8
	private Font m_Font; // 0x18
	[SerializeField] // RVA: 0xC674F8 Offset: 0xC674F8 VA: 0xC674F8
	private GUIStyle m_box; // 0x20
	[SerializeField] // RVA: 0xC67508 Offset: 0xC67508 VA: 0xC67508
	private GUIStyle m_button; // 0x28
	[SerializeField] // RVA: 0xC67518 Offset: 0xC67518 VA: 0xC67518
	private GUIStyle m_toggle; // 0x30
	[SerializeField] // RVA: 0xC67528 Offset: 0xC67528 VA: 0xC67528
	private GUIStyle m_label; // 0x38
	[SerializeField] // RVA: 0xC67538 Offset: 0xC67538 VA: 0xC67538
	private GUIStyle m_textField; // 0x40
	[SerializeField] // RVA: 0xC67548 Offset: 0xC67548 VA: 0xC67548
	private GUIStyle m_textArea; // 0x48
	[SerializeField] // RVA: 0xC67558 Offset: 0xC67558 VA: 0xC67558
	private GUIStyle m_window; // 0x50
	[SerializeField] // RVA: 0xC67568 Offset: 0xC67568 VA: 0xC67568
	private GUIStyle m_horizontalSlider; // 0x58
	[SerializeField] // RVA: 0xC67578 Offset: 0xC67578 VA: 0xC67578
	private GUIStyle m_horizontalSliderThumb; // 0x60
	[SerializeField] // RVA: 0xC67588 Offset: 0xC67588 VA: 0xC67588
	private GUIStyle m_verticalSlider; // 0x68
	[SerializeField] // RVA: 0xC67598 Offset: 0xC67598 VA: 0xC67598
	private GUIStyle m_verticalSliderThumb; // 0x70
	[SerializeField] // RVA: 0xC675A8 Offset: 0xC675A8 VA: 0xC675A8
	private GUIStyle m_horizontalScrollbar; // 0x78
	[SerializeField] // RVA: 0xC675B8 Offset: 0xC675B8 VA: 0xC675B8
	private GUIStyle m_horizontalScrollbarThumb; // 0x80
	[SerializeField] // RVA: 0xC675C8 Offset: 0xC675C8 VA: 0xC675C8
	private GUIStyle m_horizontalScrollbarLeftButton; // 0x88
	[SerializeField] // RVA: 0xC675D8 Offset: 0xC675D8 VA: 0xC675D8
	private GUIStyle m_horizontalScrollbarRightButton; // 0x90
	[SerializeField] // RVA: 0xC675E8 Offset: 0xC675E8 VA: 0xC675E8
	private GUIStyle m_verticalScrollbar; // 0x98
	[SerializeField] // RVA: 0xC675F8 Offset: 0xC675F8 VA: 0xC675F8
	private GUIStyle m_verticalScrollbarThumb; // 0xA0
	[SerializeField] // RVA: 0xC67608 Offset: 0xC67608 VA: 0xC67608
	private GUIStyle m_verticalScrollbarUpButton; // 0xA8
	[SerializeField] // RVA: 0xC67618 Offset: 0xC67618 VA: 0xC67618
	private GUIStyle m_verticalScrollbarDownButton; // 0xB0
	[SerializeField] // RVA: 0xC67628 Offset: 0xC67628 VA: 0xC67628
	private GUIStyle m_ScrollView; // 0xB8
	[SerializeField] // RVA: 0xC67638 Offset: 0xC67638 VA: 0xC67638
	internal GUIStyle[] m_CustomStyles; // 0xC0
	[SerializeField] // RVA: 0xC67648 Offset: 0xC67648 VA: 0xC67648
	private GUISettings m_Settings; // 0xC8
	internal static GUIStyle ms_Error; // 0x0
	private Dictionary<string, GUIStyle> m_Styles; // 0xD0
	internal static GUISkin.SkinChangedDelegate m_SkinChanged; // 0x8
	internal static GUISkin current; // 0x10

	// Properties
	public Font font { get; set; }
	public GUIStyle box { get; set; }
	public GUIStyle label { get; set; }
	public GUIStyle textField { get; set; }
	public GUIStyle textArea { get; set; }
	public GUIStyle button { get; set; }
	public GUIStyle toggle { get; set; }
	public GUIStyle window { get; set; }
	public GUIStyle horizontalSlider { get; set; }
	public GUIStyle horizontalSliderThumb { get; set; }
	public GUIStyle verticalSlider { get; set; }
	public GUIStyle verticalSliderThumb { get; set; }
	public GUIStyle horizontalScrollbar { get; set; }
	public GUIStyle horizontalScrollbarThumb { get; set; }
	public GUIStyle horizontalScrollbarLeftButton { get; set; }
	public GUIStyle horizontalScrollbarRightButton { get; set; }
	public GUIStyle verticalScrollbar { get; set; }
	public GUIStyle verticalScrollbarThumb { get; set; }
	public GUIStyle verticalScrollbarUpButton { get; set; }
	public GUIStyle verticalScrollbarDownButton { get; set; }
	public GUIStyle scrollView { get; set; }
	public GUIStyle[] customStyles { get; set; }
	public GUISettings settings { get; }
	internal static GUIStyle error { get; }

	// Methods

	// RVA: 0x27DBF48 Offset: 0x27DBF48 VA: 0x27DBF48
	public void .ctor() { }

	// RVA: 0x27DBFC8 Offset: 0x27DBFC8 VA: 0x27DBFC8
	internal void OnEnable() { }

	// RVA: 0x27DC04C Offset: 0x27DC04C VA: 0x27DC04C
	internal static void CleanupRoots() { }

	// RVA: 0x27CC6A8 Offset: 0x27CC6A8 VA: 0x27CC6A8
	public Font get_font() { }

	// RVA: 0x27DC0A4 Offset: 0x27DC0A4 VA: 0x27DC0A4
	public void set_font(Font value) { }

	// RVA: 0x27CA5D4 Offset: 0x27CA5D4 VA: 0x27CA5D4
	public GUIStyle get_box() { }

	// RVA: 0x27DC1D8 Offset: 0x27DC1D8 VA: 0x27DC1D8
	public void set_box(GUIStyle value) { }

	// RVA: 0x27C9564 Offset: 0x27C9564 VA: 0x27C9564
	public GUIStyle get_label() { }

	// RVA: 0x27DC1E0 Offset: 0x27DC1E0 VA: 0x27DC1E0
	public void set_label(GUIStyle value) { }

	// RVA: 0x27D30A8 Offset: 0x27D30A8 VA: 0x27D30A8
	public GUIStyle get_textField() { }

	// RVA: 0x27DC1E8 Offset: 0x27DC1E8 VA: 0x27DC1E8
	public void set_textField(GUIStyle value) { }

	// RVA: 0x27CB878 Offset: 0x27CB878 VA: 0x27CB878
	public GUIStyle get_textArea() { }

	// RVA: 0x27DC1F0 Offset: 0x27DC1F0 VA: 0x27DC1F0
	public void set_textArea(GUIStyle value) { }

	// RVA: 0x27CA914 Offset: 0x27CA914 VA: 0x27CA914
	public GUIStyle get_button() { }

	// RVA: 0x27DC1F8 Offset: 0x27DC1F8 VA: 0x27DC1F8
	public void set_button(GUIStyle value) { }

	// RVA: 0x27DC200 Offset: 0x27DC200 VA: 0x27DC200
	public GUIStyle get_toggle() { }

	// RVA: 0x27DC208 Offset: 0x27DC208 VA: 0x27DC208
	public void set_toggle(GUIStyle value) { }

	// RVA: 0x27DC210 Offset: 0x27DC210 VA: 0x27DC210
	public GUIStyle get_window() { }

	// RVA: 0x27DC218 Offset: 0x27DC218 VA: 0x27DC218
	public void set_window(GUIStyle value) { }

	// RVA: 0x27D39CC Offset: 0x27D39CC VA: 0x27D39CC
	public GUIStyle get_horizontalSlider() { }

	// RVA: 0x27DC220 Offset: 0x27DC220 VA: 0x27DC220
	public void set_horizontalSlider(GUIStyle value) { }

	// RVA: 0x27D39D4 Offset: 0x27D39D4 VA: 0x27D39D4
	public GUIStyle get_horizontalSliderThumb() { }

	// RVA: 0x27DC228 Offset: 0x27DC228 VA: 0x27DC228
	public void set_horizontalSliderThumb(GUIStyle value) { }

	// RVA: 0x27D3BD4 Offset: 0x27D3BD4 VA: 0x27D3BD4
	public GUIStyle get_verticalSlider() { }

	// RVA: 0x27DC230 Offset: 0x27DC230 VA: 0x27DC230
	public void set_verticalSlider(GUIStyle value) { }

	// RVA: 0x27D3BDC Offset: 0x27D3BDC VA: 0x27D3BDC
	public GUIStyle get_verticalSliderThumb() { }

	// RVA: 0x27DC238 Offset: 0x27DC238 VA: 0x27DC238
	public void set_verticalSliderThumb(GUIStyle value) { }

	// RVA: 0x27CFED8 Offset: 0x27CFED8 VA: 0x27CFED8
	public GUIStyle get_horizontalScrollbar() { }

	// RVA: 0x27DC240 Offset: 0x27DC240 VA: 0x27DC240
	public void set_horizontalScrollbar(GUIStyle value) { }

	// RVA: 0x27DC248 Offset: 0x27DC248 VA: 0x27DC248
	public GUIStyle get_horizontalScrollbarThumb() { }

	// RVA: 0x27DC250 Offset: 0x27DC250 VA: 0x27DC250
	public void set_horizontalScrollbarThumb(GUIStyle value) { }

	// RVA: 0x27DC258 Offset: 0x27DC258 VA: 0x27DC258
	public GUIStyle get_horizontalScrollbarLeftButton() { }

	// RVA: 0x27DC260 Offset: 0x27DC260 VA: 0x27DC260
	public void set_horizontalScrollbarLeftButton(GUIStyle value) { }

	// RVA: 0x27DC268 Offset: 0x27DC268 VA: 0x27DC268
	public GUIStyle get_horizontalScrollbarRightButton() { }

	// RVA: 0x27DC270 Offset: 0x27DC270 VA: 0x27DC270
	public void set_horizontalScrollbarRightButton(GUIStyle value) { }

	// RVA: 0x27CFEE0 Offset: 0x27CFEE0 VA: 0x27CFEE0
	public GUIStyle get_verticalScrollbar() { }

	// RVA: 0x27DC278 Offset: 0x27DC278 VA: 0x27DC278
	public void set_verticalScrollbar(GUIStyle value) { }

	// RVA: 0x27DC280 Offset: 0x27DC280 VA: 0x27DC280
	public GUIStyle get_verticalScrollbarThumb() { }

	// RVA: 0x27DC288 Offset: 0x27DC288 VA: 0x27DC288
	public void set_verticalScrollbarThumb(GUIStyle value) { }

	// RVA: 0x27DC290 Offset: 0x27DC290 VA: 0x27DC290
	public GUIStyle get_verticalScrollbarUpButton() { }

	// RVA: 0x27DC298 Offset: 0x27DC298 VA: 0x27DC298
	public void set_verticalScrollbarUpButton(GUIStyle value) { }

	// RVA: 0x27DC2A0 Offset: 0x27DC2A0 VA: 0x27DC2A0
	public GUIStyle get_verticalScrollbarDownButton() { }

	// RVA: 0x27DC2A8 Offset: 0x27DC2A8 VA: 0x27DC2A8
	public void set_verticalScrollbarDownButton(GUIStyle value) { }

	// RVA: 0x27CFEE8 Offset: 0x27CFEE8 VA: 0x27CFEE8
	public GUIStyle get_scrollView() { }

	// RVA: 0x27DC2B0 Offset: 0x27DC2B0 VA: 0x27DC2B0
	public void set_scrollView(GUIStyle value) { }

	// RVA: 0x27DC2B8 Offset: 0x27DC2B8 VA: 0x27DC2B8
	public GUIStyle[] get_customStyles() { }

	// RVA: 0x27DC2C0 Offset: 0x27DC2C0 VA: 0x27DC2C0
	public void set_customStyles(GUIStyle[] value) { }

	// RVA: 0x27CC624 Offset: 0x27CC624 VA: 0x27CC624
	public GUISettings get_settings() { }

	// RVA: 0x27DC2C8 Offset: 0x27DC2C8 VA: 0x27DC2C8
	internal static GUIStyle get_error() { }

	// RVA: 0x27DBFCC Offset: 0x27DBFCC VA: 0x27DBFCC
	internal void Apply() { }

	// RVA: 0x27DC3EC Offset: 0x27DC3EC VA: 0x27DC3EC
	private void BuildStyleCache() { }

	// RVA: 0x27CEB38 Offset: 0x27CEB38 VA: 0x27CEB38
	public GUIStyle GetStyle(string styleName) { }

	// RVA: 0x27CD734 Offset: 0x27CD734 VA: 0x27CD734
	public GUIStyle FindStyle(string styleName) { }

	// RVA: 0x27C91A8 Offset: 0x27C91A8 VA: 0x27C91A8
	internal void MakeCurrent() { }

	// RVA: 0x27DD1D8 Offset: 0x27DD1D8 VA: 0x27DD1D8
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
internal sealed class GUISkin.SkinChangedDelegate : MulticastDelegate // TypeDefIndex: 2746
{
	// Methods

	// RVA: 0x27DD290 Offset: 0x27DD290 VA: 0x27DD290
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x27DCFD8 Offset: 0x27DCFD8 VA: 0x27DCFD8 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x27DD2A0 Offset: 0x27DD2A0 VA: 0x27DD2A0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x27DD2D4 Offset: 0x27DD2D4 VA: 0x27DD2D4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal class GUIStateObjects // TypeDefIndex: 2747
{
	// Fields
	private static Dictionary<int, object> s_StateCache; // 0x0

	// Methods

	// RVA: 0x27DD2E0 Offset: 0x27DD2E0 VA: 0x27DD2E0
	internal static object GetStateObject(Type t, int controlID) { }

	// RVA: 0x27DD420 Offset: 0x27DD420 VA: 0x27DD420
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC66C70 Offset: 0xC66C70 VA: 0xC66C70
[Serializable]
public sealed class GUIStyleState // TypeDefIndex: 2748
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly GUIStyle m_SourceStyle; // 0x18

	// Properties
	[NativePropertyAttribute] // RVA: 0xC69118 Offset: 0xC69118 VA: 0xC69118
	public Texture2D background { set; }
	[NativePropertyAttribute] // RVA: 0xC69158 Offset: 0xC69158 VA: 0xC69158
	public Color textColor { set; }

	// Methods

	// RVA: 0x27DF058 Offset: 0x27DF058 VA: 0x27DF058
	public void .ctor() { }

	// RVA: 0x27DF0DC Offset: 0x27DF0DC VA: 0x27DF0DC
	private void .ctor(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x27DF114 Offset: 0x27DF114 VA: 0x27DF114
	public void set_background(Texture2D value) { }

	// RVA: 0x27DCFB0 Offset: 0x27DCFB0 VA: 0x27DCFB0
	public void set_textColor(Color value) { }

	[FreeFunctionAttribute] // RVA: 0xC68158 Offset: 0xC68158 VA: 0xC68158
	// RVA: 0x27DF084 Offset: 0x27DF084 VA: 0x27DF084
	private static IntPtr Init() { }

	[FreeFunctionAttribute] // RVA: 0xC681AC Offset: 0xC681AC VA: 0xC681AC
	// RVA: 0x27DF1FC Offset: 0x27DF1FC VA: 0x27DF1FC
	private void Cleanup() { }

	// RVA: 0x27DE4E0 Offset: 0x27DE4E0 VA: 0x27DE4E0
	internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x27DF268 Offset: 0x27DF268 VA: 0x27DF268 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x27DF188 Offset: 0x27DF188 VA: 0x27DF188
	private void set_textColor_Injected(ref Color value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC66CA8 Offset: 0xC66CA8 VA: 0xC66CA8
[NativeHeaderAttribute] // RVA: 0xC66CA8 Offset: 0xC66CA8 VA: 0xC66CA8
[RequiredByNativeCodeAttribute] // RVA: 0xC66CA8 Offset: 0xC66CA8 VA: 0xC66CA8
[Serializable]
public sealed class GUIStyle // TypeDefIndex: 2749
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private GUIStyleState m_Normal; // 0x18
	private GUIStyleState m_Hover; // 0x20
	private GUIStyleState m_Active; // 0x28
	private GUIStyleState m_Focused; // 0x30
	private GUIStyleState m_OnNormal; // 0x38
	private GUIStyleState m_OnHover; // 0x40
	private GUIStyleState m_OnActive; // 0x48
	private GUIStyleState m_OnFocused; // 0x50
	private RectOffset m_Border; // 0x58
	private RectOffset m_Padding; // 0x60
	private RectOffset m_Margin; // 0x68
	private RectOffset m_Overflow; // 0x70
	internal static bool showKeyboardFocus; // 0x0
	private static GUIStyle s_None; // 0x8

	// Properties
	[NativePropertyAttribute] // RVA: 0xC69198 Offset: 0xC69198 VA: 0xC69198
	public string name { get; set; }
	[NativePropertyAttribute] // RVA: 0xC691D8 Offset: 0xC691D8 VA: 0xC691D8
	public Font font { get; }
	[NativePropertyAttribute] // RVA: 0xC69218 Offset: 0xC69218 VA: 0xC69218
	public ImagePosition imagePosition { get; }
	[NativePropertyAttribute] // RVA: 0xC69258 Offset: 0xC69258 VA: 0xC69258
	public TextAnchor alignment { set; }
	[NativePropertyAttribute] // RVA: 0xC69298 Offset: 0xC69298 VA: 0xC69298
	public bool wordWrap { get; }
	[NativePropertyAttribute] // RVA: 0xC692D8 Offset: 0xC692D8 VA: 0xC692D8
	public Vector2 contentOffset { get; set; }
	[NativePropertyAttribute] // RVA: 0xC69318 Offset: 0xC69318 VA: 0xC69318
	public float fixedWidth { get; }
	[NativePropertyAttribute] // RVA: 0xC69358 Offset: 0xC69358 VA: 0xC69358
	public float fixedHeight { get; }
	[NativePropertyAttribute] // RVA: 0xC69398 Offset: 0xC69398 VA: 0xC69398
	public bool stretchWidth { get; set; }
	[NativePropertyAttribute] // RVA: 0xC693D8 Offset: 0xC693D8 VA: 0xC693D8
	public bool stretchHeight { get; set; }
	[NativePropertyAttribute] // RVA: 0xC69418 Offset: 0xC69418 VA: 0xC69418
	public int fontSize { set; }
	[NativePropertyAttribute] // RVA: 0xC69458 Offset: 0xC69458 VA: 0xC69458
	internal Vector2 Internal_clipOffset { set; }
	public GUIStyleState normal { get; }
	public RectOffset margin { get; }
	public RectOffset padding { get; set; }
	public float lineHeight { get; }
	public static GUIStyle none { get; }
	public bool isHeightDependantOnWidth { get; }

	// Methods

	// RVA: 0x27DB79C Offset: 0x27DB79C VA: 0x27DB79C
	public void .ctor() { }

	// RVA: 0x27CD6C8 Offset: 0x27CD6C8 VA: 0x27CD6C8
	public string get_name() { }

	// RVA: 0x27DC378 Offset: 0x27DC378 VA: 0x27DC378
	public void set_name(string value) { }

	// RVA: 0x27CC63C Offset: 0x27CC63C VA: 0x27CC63C
	public Font get_font() { }

	// RVA: 0x27DD500 Offset: 0x27DD500 VA: 0x27DD500
	public ImagePosition get_imagePosition() { }

	// RVA: 0x27DD56C Offset: 0x27DD56C VA: 0x27DD56C
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x27DD5E0 Offset: 0x27DD5E0 VA: 0x27DD5E0
	public bool get_wordWrap() { }

	// RVA: 0x27DD64C Offset: 0x27DD64C VA: 0x27DD64C
	public Vector2 get_contentOffset() { }

	// RVA: 0x27DD6E8 Offset: 0x27DD6E8 VA: 0x27DD6E8
	public void set_contentOffset(Vector2 value) { }

	// RVA: 0x27CDF40 Offset: 0x27CDF40 VA: 0x27CDF40
	public float get_fixedWidth() { }

	// RVA: 0x27CDFAC Offset: 0x27CDFAC VA: 0x27CDFAC
	public float get_fixedHeight() { }

	// RVA: 0x27D6614 Offset: 0x27D6614 VA: 0x27D6614
	public bool get_stretchWidth() { }

	// RVA: 0x27DB814 Offset: 0x27DB814 VA: 0x27DB814
	public void set_stretchWidth(bool value) { }

	// RVA: 0x27D6680 Offset: 0x27D6680 VA: 0x27D6680
	public bool get_stretchHeight() { }

	// RVA: 0x27DCEFC Offset: 0x27DCEFC VA: 0x27DCEFC
	public void set_stretchHeight(bool value) { }

	// RVA: 0x27DD780 Offset: 0x27DD780 VA: 0x27DD780
	public void set_fontSize(int value) { }

	// RVA: 0x27DD7F4 Offset: 0x27DD7F4 VA: 0x27DD7F4
	internal void set_Internal_clipOffset(Vector2 value) { }

	[FreeFunctionAttribute] // RVA: 0xC68210 Offset: 0xC68210 VA: 0xC68210
	// RVA: 0x27DD494 Offset: 0x27DD494 VA: 0x27DD494
	private static IntPtr Internal_Create(GUIStyle self) { }

	[FreeFunctionAttribute] // RVA: 0xC68264 Offset: 0xC68264 VA: 0xC68264
	// RVA: 0x27DD88C Offset: 0x27DD88C VA: 0x27DD88C
	private static void Internal_Destroy(IntPtr self) { }

	[FreeFunctionAttribute] // RVA: 0xC682B8 Offset: 0xC682B8 VA: 0xC682B8
	// RVA: 0x27DD8F8 Offset: 0x27DD8F8 VA: 0x27DD8F8
	private IntPtr GetStyleStatePtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xC6831C Offset: 0xC6831C VA: 0xC6831C
	// RVA: 0x27DD96C Offset: 0x27DD96C VA: 0x27DD96C
	private IntPtr GetRectOffsetPtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xC68370 Offset: 0xC68370 VA: 0xC68370
	// RVA: 0x27DD9E0 Offset: 0x27DD9E0 VA: 0x27DD9E0
	private void AssignRectOffset(int idx, IntPtr srcRectOffset) { }

	[FreeFunctionAttribute] // RVA: 0xC683C4 Offset: 0xC683C4 VA: 0xC683C4
	// RVA: 0x27DDA64 Offset: 0x27DDA64 VA: 0x27DDA64
	private static float Internal_GetLineHeight(IntPtr target) { }

	[FreeFunctionAttribute] // RVA: 0xC68408 Offset: 0xC68408 VA: 0xC68408
	// RVA: 0x27DDAD0 Offset: 0x27DDAD0 VA: 0x27DDAD0
	private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	[FreeFunctionAttribute] // RVA: 0xC6845C Offset: 0xC6845C VA: 0xC6845C
	// RVA: 0x27DDBD0 Offset: 0x27DDBD0 VA: 0x27DDBD0
	private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on) { }

	[FreeFunctionAttribute] // RVA: 0xC684B0 Offset: 0xC684B0 VA: 0xC684B0
	// RVA: 0x27DDCA8 Offset: 0x27DDCA8 VA: 0x27DDCA8
	private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor) { }

	[FreeFunctionAttribute] // RVA: 0xC68504 Offset: 0xC68504 VA: 0xC68504
	// RVA: 0x27DDD88 Offset: 0x27DDD88 VA: 0x27DDD88
	private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor) { }

	[FreeFunctionAttribute] // RVA: 0xC68558 Offset: 0xC68558 VA: 0xC68558
	// RVA: 0x27DDEF4 Offset: 0x27DDEF4 VA: 0x27DDEF4
	internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex) { }

	[FreeFunctionAttribute] // RVA: 0xC685AC Offset: 0xC685AC VA: 0xC685AC
	// RVA: 0x27DDFD4 Offset: 0x27DDFD4 VA: 0x27DDFD4
	internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition) { }

	[FreeFunctionAttribute] // RVA: 0xC68600 Offset: 0xC68600 VA: 0xC68600
	// RVA: 0x27DE098 Offset: 0x27DE098 VA: 0x27DE098
	internal Vector2 Internal_CalcSize(GUIContent content) { }

	[FreeFunctionAttribute] // RVA: 0xC68654 Offset: 0xC68654 VA: 0xC68654
	// RVA: 0x27DE144 Offset: 0x27DE144 VA: 0x27DE144
	internal Vector2 Internal_CalcSizeWithConstraints(GUIContent content, Vector2 maxSize) { }

	[FreeFunctionAttribute] // RVA: 0xC686A8 Offset: 0xC686A8 VA: 0xC686A8
	// RVA: 0x27DE200 Offset: 0x27DE200 VA: 0x27DE200
	private float Internal_CalcHeight(GUIContent content, float width) { }

	[FreeFunctionAttribute] // RVA: 0xC686FC Offset: 0xC686FC VA: 0xC686FC
	// RVA: 0x27DE28C Offset: 0x27DE28C VA: 0x27DE28C
	private Vector2 Internal_CalcMinMaxWidth(GUIContent content) { }

	[FreeFunctionAttribute] // RVA: 0xC68750 Offset: 0xC68750 VA: 0xC68750
	// RVA: 0x27CDEC4 Offset: 0x27CDEC4 VA: 0x27CDEC4
	internal static void SetMouseTooltip(string tooltip, Rect screenRect) { }

	[FreeFunctionAttribute] // RVA: 0xC68794 Offset: 0xC68794 VA: 0xC68794
	// RVA: 0x27DE3AC Offset: 0x27DE3AC VA: 0x27DE3AC
	private static float Internal_GetCursorFlashOffset() { }

	[FreeFunctionAttribute] // RVA: 0xC687D8 Offset: 0xC687D8 VA: 0xC687D8
	// RVA: 0x27DC16C Offset: 0x27DC16C VA: 0x27DC16C
	internal static void SetDefaultFont(Font font) { }

	// RVA: 0x27DE404 Offset: 0x27DE404 VA: 0x27DE404 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x27DCF70 Offset: 0x27DCF70 VA: 0x27DCF70
	public GUIStyleState get_normal() { }

	// RVA: 0x27CDACC Offset: 0x27CDACC VA: 0x27CDACC
	public RectOffset get_margin() { }

	// RVA: 0x27D8108 Offset: 0x27D8108 VA: 0x27D8108
	public RectOffset get_padding() { }

	// RVA: 0x27DE550 Offset: 0x27DE550 VA: 0x27DE550
	public void set_padding(RectOffset value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC6881C Offset: 0xC6881C VA: 0xC6881C
	// RVA: 0x27DE588 Offset: 0x27DE588 VA: 0x27DE588
	public float get_lineHeight() { }

	// RVA: 0x27D0D74 Offset: 0x27D0D74 VA: 0x27D0D74
	public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x27CDE44 Offset: 0x27CDE44 VA: 0x27CDE44
	public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x27CA820 Offset: 0x27CA820 VA: 0x27CA820
	public void Draw(Rect position, GUIContent content, int controlID) { }

	// RVA: 0x27CC610 Offset: 0x27CC610 VA: 0x27CC610
	public void Draw(Rect position, GUIContent content, int controlID, bool on) { }

	// RVA: 0x27DE694 Offset: 0x27DE694 VA: 0x27DE694
	private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x27DE700 Offset: 0x27DE700 VA: 0x27DE700
	public void DrawCursor(Rect position, GUIContent content, int controlID, int character) { }

	// RVA: 0x27DE928 Offset: 0x27DE928 VA: 0x27DE928
	internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor) { }

	// RVA: 0x27DEB9C Offset: 0x27DEB9C VA: 0x27DEB9C
	internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition) { }

	// RVA: 0x27DECA0 Offset: 0x27DECA0 VA: 0x27DECA0
	internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition) { }

	// RVA: 0x27DEDB8 Offset: 0x27DEDB8 VA: 0x27DEDB8
	public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter) { }

	// RVA: 0x27DEDC0 Offset: 0x27DEDC0 VA: 0x27DEDC0
	public static GUIStyle op_Implicit(string str) { }

	[CompilerGeneratedAttribute] // RVA: 0xC6882C Offset: 0xC6882C VA: 0xC6882C
	// RVA: 0x27CFCBC Offset: 0x27CFCBC VA: 0x27CFCBC
	public static GUIStyle get_none() { }

	// RVA: 0x27DEEB4 Offset: 0x27DEEB4 VA: 0x27DEEB4
	public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex) { }

	// RVA: 0x27DEEB8 Offset: 0x27DEEB8 VA: 0x27DEEB8
	public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition) { }

	// RVA: 0x27CE550 Offset: 0x27CE550 VA: 0x27CE550
	public Vector2 CalcSize(GUIContent content) { }

	// RVA: 0x27DB554 Offset: 0x27DB554 VA: 0x27DB554
	internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints) { }

	// RVA: 0x27DEEF0 Offset: 0x27DEEF0 VA: 0x27DEEF0
	public float CalcHeight(GUIContent content, float width) { }

	[CompilerGeneratedAttribute] // RVA: 0xC6883C Offset: 0xC6883C VA: 0xC6883C
	// RVA: 0x27DB434 Offset: 0x27DB434 VA: 0x27DB434
	public bool get_isHeightDependantOnWidth() { }

	// RVA: 0x27DEEF4 Offset: 0x27DEEF4 VA: 0x27DEEF4
	public void CalcMinMaxWidth(GUIContent content, out float minWidth, out float maxWidth) { }

	// RVA: 0x27DEF34 Offset: 0x27DEF34 VA: 0x27DEF34 Slot: 3
	public override string ToString() { }

	// RVA: 0x27DF004 Offset: 0x27DF004 VA: 0x27DF004
	private static void .cctor() { }

	// RVA: 0x27DD674 Offset: 0x27DD674 VA: 0x27DD674
	private void get_contentOffset_Injected(out Vector2 ret) { }

	// RVA: 0x27DD70C Offset: 0x27DD70C VA: 0x27DD70C
	private void set_contentOffset_Injected(ref Vector2 value) { }

	// RVA: 0x27DD818 Offset: 0x27DD818 VA: 0x27DD818
	private void set_Internal_clipOffset_Injected(ref Vector2 value) { }

	// RVA: 0x27DDB1C Offset: 0x27DDB1C VA: 0x27DDB1C
	private void Internal_Draw_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x27DDC0C Offset: 0x27DDC0C VA: 0x27DDC0C
	private void Internal_Draw2_Injected(ref Rect position, GUIContent content, int controlID, bool on) { }

	// RVA: 0x27DDCEC Offset: 0x27DDCEC VA: 0x27DDCEC
	private void Internal_DrawCursor_Injected(ref Rect position, GUIContent content, int pos, ref Color cursorColor) { }

	// RVA: 0x27DDE10 Offset: 0x27DDE10 VA: 0x27DDE10
	private void Internal_DrawWithTextSelection_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ref Color cursorColor, ref Color selectionColor) { }

	// RVA: 0x27DDF38 Offset: 0x27DDF38 VA: 0x27DDF38
	private void Internal_GetCursorPixelPosition_Injected(ref Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret) { }

	// RVA: 0x27DE00C Offset: 0x27DE00C VA: 0x27DE00C
	private int Internal_GetCursorStringIndex_Injected(ref Rect position, GUIContent content, ref Vector2 cursorPixelPosition) { }

	// RVA: 0x27DE0C0 Offset: 0x27DE0C0 VA: 0x27DE0C0
	private void Internal_CalcSize_Injected(GUIContent content, out Vector2 ret) { }

	// RVA: 0x27DE174 Offset: 0x27DE174 VA: 0x27DE174
	private void Internal_CalcSizeWithConstraints_Injected(GUIContent content, ref Vector2 maxSize, out Vector2 ret) { }

	// RVA: 0x27DE2B4 Offset: 0x27DE2B4 VA: 0x27DE2B4
	private void Internal_CalcMinMaxWidth_Injected(GUIContent content, out Vector2 ret) { }

	// RVA: 0x27DE338 Offset: 0x27DE338 VA: 0x27DE338
	private static void SetMouseTooltip_Injected(string tooltip, ref Rect screenRect) { }
}

// Namespace: UnityEngine
public enum ImagePosition // TypeDefIndex: 2750
{
	// Fields
	public int value__; // 0x0
	public const ImagePosition ImageLeft = 0;
	public const ImagePosition ImageAbove = 1;
	public const ImagePosition ImageOnly = 2;
	public const ImagePosition TextOnly = 3;
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xC66D18 Offset: 0xC66D18 VA: 0xC66D18
public class GUITargetAttribute : Attribute // TypeDefIndex: 2751
{
	// Fields
	internal int displayMask; // 0x10

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xC6884C Offset: 0xC6884C VA: 0xC6884C
	// RVA: 0x27DF310 Offset: 0x27DF310 VA: 0x27DF310
	private static int GetGUITargetAttrValue(Type klass, string methodName) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC66D2C Offset: 0xC66D2C VA: 0xC66D2C
[NativeHeaderAttribute] // RVA: 0xC66D2C Offset: 0xC66D2C VA: 0xC66D2C
[NativeHeaderAttribute] // RVA: 0xC66D2C Offset: 0xC66D2C VA: 0xC66D2C
[NativeHeaderAttribute] // RVA: 0xC66D2C Offset: 0xC66D2C VA: 0xC66D2C
[NativeHeaderAttribute] // RVA: 0xC66D2C Offset: 0xC66D2C VA: 0xC66D2C
public class GUIUtility // TypeDefIndex: 2752
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xC67658 Offset: 0xC67658 VA: 0xC67658
	internal static int s_SkinMode; // 0x0
	[VisibleToOtherModulesAttribute] // RVA: 0xC676D0 Offset: 0xC676D0 VA: 0xC676D0
	internal static int s_OriginalID; // 0x4
	[VisibleToOtherModulesAttribute] // RVA: 0xC67748 Offset: 0xC67748 VA: 0xC67748
	internal static Action takeCapture; // 0x8
	[VisibleToOtherModulesAttribute] // RVA: 0xC677C0 Offset: 0xC677C0 VA: 0xC677C0
	internal static Action releaseCapture; // 0x10
	[VisibleToOtherModulesAttribute] // RVA: 0xC67838 Offset: 0xC67838 VA: 0xC67838
	internal static Func<int, IntPtr, bool> processEvent; // 0x18
	[VisibleToOtherModulesAttribute] // RVA: 0xC678B0 Offset: 0xC678B0 VA: 0xC678B0
	internal static Func<Exception, bool> endContainerGUIFromException; // 0x20
	[VisibleToOtherModulesAttribute] // RVA: 0xC67928 Offset: 0xC67928 VA: 0xC67928
	internal static Action enabledStateChanged; // 0x28
	[DebuggerBrowsableAttribute] // RVA: 0xC679A0 Offset: 0xC679A0 VA: 0xC679A0
	[CompilerGeneratedAttribute] // RVA: 0xC679A0 Offset: 0xC679A0 VA: 0xC679A0
	private static bool <guiIsExiting>k__BackingField; // 0x30

	// Properties
	[NativePropertyAttribute] // RVA: 0xC69498 Offset: 0xC69498 VA: 0xC69498
	internal static float pixelsPerPoint { get; }
	[NativePropertyAttribute] // RVA: 0xC694D8 Offset: 0xC694D8 VA: 0xC694D8
	internal static int guiDepth { get; }
	[NativePropertyAttribute] // RVA: 0xC69518 Offset: 0xC69518 VA: 0xC69518
	internal static bool mouseUsed { set; }
	[StaticAccessorAttribute] // RVA: 0xC69558 Offset: 0xC69558 VA: 0xC69558
	internal static bool textFieldInput { set; }
	public static string systemCopyBuffer { get; set; }
	internal static bool guiIsExiting { set; }
	public static int hotControl { get; set; }
	public static int keyboardControl { get; set; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xC6885C Offset: 0xC6885C VA: 0xC6885C
	// RVA: 0x27DA75C Offset: 0x27DA75C VA: 0x27DA75C
	internal static float get_pixelsPerPoint() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC688D4 Offset: 0xC688D4 VA: 0xC688D4
	// RVA: 0x27DF4B8 Offset: 0x27DF4B8 VA: 0x27DF4B8
	internal static int get_guiDepth() { }

	// RVA: 0x27CE4E4 Offset: 0x27CE4E4 VA: 0x27CE4E4
	internal static void set_mouseUsed(bool value) { }

	// RVA: 0x27CC6B0 Offset: 0x27CC6B0 VA: 0x27CC6B0
	internal static void set_textFieldInput(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xC6894C Offset: 0xC6894C VA: 0xC6894C
	// RVA: 0x27DF510 Offset: 0x27DF510 VA: 0x27DF510
	public static string get_systemCopyBuffer() { }

	[FreeFunctionAttribute] // RVA: 0xC68984 Offset: 0xC68984 VA: 0xC68984
	// RVA: 0x27DF568 Offset: 0x27DF568 VA: 0x27DF568
	public static void set_systemCopyBuffer(string value) { }

	[StaticAccessorAttribute] // RVA: 0xC689BC Offset: 0xC689BC VA: 0xC689BC
	// RVA: 0x27CA9F0 Offset: 0x27CA9F0 VA: 0x27CA9F0
	public static int GetControlID(int hint, FocusType focusType, Rect rect) { }

	// RVA: 0x27DF658 Offset: 0x27DF658 VA: 0x27DF658
	public static Rect AlignRectToDevice(Rect rect, out int widthInPixels, out int heightInPixels) { }

	// RVA: 0x27DF72C Offset: 0x27DF72C VA: 0x27DF72C
	private static int Internal_GetHotControl() { }

	// RVA: 0x27DF784 Offset: 0x27DF784 VA: 0x27DF784
	private static int Internal_GetKeyboardControl() { }

	// RVA: 0x27DF7DC Offset: 0x27DF7DC VA: 0x27DF7DC
	private static void Internal_SetHotControl(int value) { }

	// RVA: 0x27DF848 Offset: 0x27DF848 VA: 0x27DF848
	private static void Internal_SetKeyboardControl(int value) { }

	// RVA: 0x27DF8B4 Offset: 0x27DF8B4 VA: 0x27DF8B4
	private static object Internal_GetDefaultSkin(int skinMode) { }

	// RVA: 0x27DF920 Offset: 0x27DF920 VA: 0x27DF920
	private static void Internal_ExitGUI() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC689F8 Offset: 0xC689F8 VA: 0xC689F8
	// RVA: 0x27DF978 Offset: 0x27DF978 VA: 0x27DF978
	private static void MarkGUIChanged() { }

	// RVA: 0x27CB288 Offset: 0x27CB288 VA: 0x27CB288
	public static int GetControlID(FocusType focus) { }

	// RVA: 0x27CB650 Offset: 0x27CB650 VA: 0x27CB650
	public static int GetControlID(FocusType focus, Rect position) { }

	// RVA: 0x27CA7D8 Offset: 0x27CA7D8 VA: 0x27CA7D8
	public static int GetControlID(int hint, FocusType focus) { }

	// RVA: 0x27CB960 Offset: 0x27CB960 VA: 0x27CB960
	public static object GetStateObject(Type t, int controlID) { }

	[CompilerGeneratedAttribute] // RVA: 0xC68A08 Offset: 0xC68A08 VA: 0xC68A08
	// RVA: 0x27DF9DC Offset: 0x27DF9DC VA: 0x27DF9DC
	internal static void set_guiIsExiting(bool value) { }

	// RVA: 0x27CAF10 Offset: 0x27CAF10 VA: 0x27CAF10
	public static int get_hotControl() { }

	// RVA: 0x27CAF0C Offset: 0x27CAF0C VA: 0x27CAF0C
	public static void set_hotControl(int value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A18 Offset: 0xC68A18 VA: 0xC68A18
	// RVA: 0x27DFA34 Offset: 0x27DFA34 VA: 0x27DFA34
	internal static void TakeCapture() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A28 Offset: 0xC68A28 VA: 0xC68A28
	// RVA: 0x27DFA98 Offset: 0x27DFA98 VA: 0x27DFA98
	internal static void RemoveCapture() { }

	// RVA: 0x27CC608 Offset: 0x27CC608 VA: 0x27CC608
	public static int get_keyboardControl() { }

	// RVA: 0x27CC60C Offset: 0x27CC60C VA: 0x27CC60C
	public static void set_keyboardControl(int value) { }

	// RVA: 0x27DFAFC Offset: 0x27DFAFC VA: 0x27DFAFC
	public static void ExitGUI() { }

	// RVA: 0x27C9138 Offset: 0x27C9138 VA: 0x27C9138
	internal static GUISkin GetDefaultSkin() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A38 Offset: 0xC68A38 VA: 0xC68A38
	// RVA: 0x27DFB6C Offset: 0x27DFB6C VA: 0x27DFB6C
	internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A48 Offset: 0xC68A48 VA: 0xC68A48
	// RVA: 0x27DFBF4 Offset: 0x27DFBF4 VA: 0x27DFBF4
	internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A58 Offset: 0xC68A58 VA: 0xC68A58
	// RVA: 0x27DFD40 Offset: 0x27DFD40 VA: 0x27DFD40
	internal static void EndGUI(int layoutType) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A68 Offset: 0xC68A68 VA: 0xC68A68
	// RVA: 0x27DFEE4 Offset: 0x27DFEE4 VA: 0x27DFEE4
	internal static bool EndGUIFromException(Exception exception) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC68A78 Offset: 0xC68A78 VA: 0xC68A78
	// RVA: 0x27DFF0C Offset: 0x27DFF0C VA: 0x27DFF0C
	internal static bool EndContainerGUIFromException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC68A88 Offset: 0xC68A88 VA: 0xC68A88
	// RVA: 0x27DFCA0 Offset: 0x27DFCA0 VA: 0x27DFCA0
	internal static void ResetGlobalState() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC68B00 Offset: 0xC68B00 VA: 0xC68B00
	// RVA: 0x27DFF80 Offset: 0x27DFF80 VA: 0x27DFF80
	internal static bool IsExitGUIException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xC68B78 Offset: 0xC68B78 VA: 0xC68B78
	// RVA: 0x27DFF08 Offset: 0x27DFF08 VA: 0x27DFF08
	internal static bool ShouldRethrowException(Exception exception) { }

	// RVA: 0x27C8F8C Offset: 0x27C8F8C VA: 0x27C8F8C
	internal static void CheckOnGUI() { }

	// RVA: 0x27E0024 Offset: 0x27E0024 VA: 0x27E0024
	public static void RotateAroundPivot(float angle, Vector2 pivotPoint) { }

	// RVA: 0x27E032C Offset: 0x27E032C VA: 0x27E032C
	public static void ScaleAroundPivot(Vector2 scale, Vector2 pivotPoint) { }

	// RVA: 0x27CE578 Offset: 0x27CE578 VA: 0x27CE578
	public static Rect AlignRectToDevice(Rect rect) { }

	// RVA: 0x27DF5D4 Offset: 0x27DF5D4 VA: 0x27DF5D4
	private static int GetControlID_Injected(int hint, FocusType focusType, ref Rect rect) { }

	// RVA: 0x27DF6A0 Offset: 0x27DF6A0 VA: 0x27DF6A0
	private static void AlignRectToDevice_Injected(ref Rect rect, out int widthInPixels, out int heightInPixels, out Rect ret) { }
}

// Namespace: UnityEngine
public sealed class ExitGUIException : Exception // TypeDefIndex: 2753
{
	// Methods

	// RVA: 0x27C806C Offset: 0x27C806C VA: 0x27C806C
	public void .ctor() { }
}

// Namespace: UnityEngine
[VisibleToOtherModulesAttribute] // RVA: 0xC66DF8 Offset: 0xC66DF8 VA: 0xC66DF8
internal class GUILayoutEntry // TypeDefIndex: 2754
{
	// Fields
	public float minWidth; // 0x10
	public float maxWidth; // 0x14
	public float minHeight; // 0x18
	public float maxHeight; // 0x1C
	public Rect rect; // 0x20
	public int stretchWidth; // 0x30
	public int stretchHeight; // 0x34
	public bool consideredForMargin; // 0x38
	private GUIStyle m_Style; // 0x40
	internal static Rect kDummyRect; // 0x0
	protected static int indent; // 0x10

	// Properties
	public GUIStyle style { get; set; }
	public virtual int marginLeft { get; }
	public virtual int marginRight { get; }
	public virtual int marginTop { get; }
	public virtual int marginBottom { get; }
	public int marginHorizontal { get; }
	public int marginVertical { get; }

	// Methods

	// RVA: 0x27D60D4 Offset: 0x27D60D4 VA: 0x27D60D4
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style) { }

	// RVA: 0x27D6210 Offset: 0x27D6210 VA: 0x27D6210
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style, GUILayoutOption[] options) { }

	// RVA: 0x27D6330 Offset: 0x27D6330 VA: 0x27D6330
	public GUIStyle get_style() { }

	// RVA: 0x27D6200 Offset: 0x27D6200 VA: 0x27D6200
	public void set_style(GUIStyle value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC68BF0 Offset: 0xC68BF0 VA: 0xC68BF0
	// RVA: 0x27D6338 Offset: 0x27D6338 VA: 0x27D6338 Slot: 4
	public virtual int get_marginLeft() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C00 Offset: 0xC68C00 VA: 0xC68C00
	// RVA: 0x27D637C Offset: 0x27D637C VA: 0x27D637C Slot: 5
	public virtual int get_marginRight() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C10 Offset: 0xC68C10 VA: 0xC68C10
	// RVA: 0x27D63C0 Offset: 0x27D63C0 VA: 0x27D63C0 Slot: 6
	public virtual int get_marginTop() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C20 Offset: 0xC68C20 VA: 0xC68C20
	// RVA: 0x27D6404 Offset: 0x27D6404 VA: 0x27D6404 Slot: 7
	public virtual int get_marginBottom() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C30 Offset: 0xC68C30 VA: 0xC68C30
	// RVA: 0x27D6448 Offset: 0x27D6448 VA: 0x27D6448
	public int get_marginHorizontal() { }

	[CompilerGeneratedAttribute] // RVA: 0xC68C40 Offset: 0xC68C40 VA: 0xC68C40
	// RVA: 0x27D6488 Offset: 0x27D6488 VA: 0x27D6488
	public int get_marginVertical() { }

	// RVA: 0x27D64C8 Offset: 0x27D64C8 VA: 0x27D64C8 Slot: 8
	public virtual void CalcWidth() { }

	// RVA: 0x27D64CC Offset: 0x27D64CC VA: 0x27D64CC Slot: 9
	public virtual void CalcHeight() { }

	// RVA: 0x27D64D0 Offset: 0x27D64D0 VA: 0x27D64D0 Slot: 10
	public virtual void SetHorizontal(float x, float width) { }

	// RVA: 0x27D6510 Offset: 0x27D6510 VA: 0x27D6510 Slot: 11
	public virtual void SetVertical(float y, float height) { }

	// RVA: 0x27D6550 Offset: 0x27D6550 VA: 0x27D6550 Slot: 12
	protected virtual void ApplyStyleSettings(GUIStyle style) { }

	// RVA: 0x27D66EC Offset: 0x27D66EC VA: 0x27D66EC Slot: 13
	public virtual void ApplyOptions(GUILayoutOption[] options) { }

	// RVA: 0x27D6910 Offset: 0x27D6910 VA: 0x27D6910 Slot: 3
	public override string ToString() { }

	// RVA: 0x27D7104 Offset: 0x27D7104 VA: 0x27D7104
	private static void .cctor() { }
}

// Namespace: UnityEngine
internal sealed class GUIWordWrapSizer : GUILayoutEntry // TypeDefIndex: 2755
{
	// Fields
