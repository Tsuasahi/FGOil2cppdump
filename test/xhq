internal enum GUILayoutOption.Type // TypeDefIndex: 2741
{
	// Fields
	public int value__; // 0x0
	public const GUILayoutOption.Type fixedWidth = 0;
	public const GUILayoutOption.Type fixedHeight = 1;
	public const GUILayoutOption.Type minWidth = 2;
	public const GUILayoutOption.Type maxWidth = 3;
	public const GUILayoutOption.Type minHeight = 4;
	public const GUILayoutOption.Type maxHeight = 5;
	public const GUILayoutOption.Type stretchWidth = 6;
	public const GUILayoutOption.Type stretchHeight = 7;
	public const GUILayoutOption.Type alignStart = 8;
	public const GUILayoutOption.Type alignMiddle = 9;
	public const GUILayoutOption.Type alignEnd = 10;
	public const GUILayoutOption.Type alignJustify = 11;
	public const GUILayoutOption.Type equalSize = 12;
	public const GUILayoutOption.Type spacing = 13;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFA9C4 Offset: 0xBFA9C4 VA: 0xBFA9C4
public class GUILayoutUtility // TypeDefIndex: 2742
{
	// Fields
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredLayouts; // 0x0
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredWindows; // 0x8
	internal static GUILayoutUtility.LayoutCache current; // 0x10
	internal static readonly Rect kDummyRect; // 0x18
	private static GUIStyle s_SpaceStyle; // 0x28

	// Properties
	internal static GUIStyle spaceStyle { get; }

	// Methods

	// RVA: 0x26CD484 Offset: 0x26CD484 VA: 0x26CD484
	private static Rect Internal_GetWindowRect(int windowID) { }

	// RVA: 0x26CD578 Offset: 0x26CD578 VA: 0x26CD578
	private static void Internal_MoveWindow(int windowID, Rect r) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBFBF40 Offset: 0xBFBF40 VA: 0xBFBF40
	// RVA: 0x26C4834 Offset: 0x26C4834 VA: 0x26C4834
	internal static GUILayoutUtility.LayoutCache SelectIDList(int instanceID, bool isWindow) { }

	// RVA: 0x26CD730 Offset: 0x26CD730 VA: 0x26CD730
	internal static void Begin(int instanceID) { }

	// RVA: 0x26C4B1C Offset: 0x26C4B1C VA: 0x26C4B1C
	internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x26C50A0 Offset: 0x26C50A0 VA: 0x26C50A0
	internal static void Layout() { }

	// RVA: 0x26CDF60 Offset: 0x26CDF60 VA: 0x26CDF60
	internal static void LayoutFromEditorWindow() { }

	// RVA: 0x26CD9F4 Offset: 0x26CD9F4 VA: 0x26CD9F4
	internal static void LayoutFreeGroup(GUILayoutGroup toplevel) { }

	// RVA: 0x26CDBE4 Offset: 0x26CDBE4 VA: 0x26CDBE4
	private static void LayoutSingleGroup(GUILayoutGroup i) { }

	// RVA: 0x26CE184 Offset: 0x26CE184 VA: 0x26CE184
	private static GUILayoutGroup CreateGUILayoutGroupInstanceOfType(Type LayoutType) { }

	// RVA: 0x26C7954 Offset: 0x26C7954 VA: 0x26C7954
	internal static GUILayoutGroup BeginLayoutGroup(GUIStyle style, GUILayoutOption[] options, Type layoutType) { }

	// RVA: 0x26C7D0C Offset: 0x26C7D0C VA: 0x26C7D0C
	internal static void EndLayoutGroup() { }

	// RVA: 0x26C86A8 Offset: 0x26C86A8 VA: 0x26C86A8
	internal static GUILayoutGroup BeginLayoutArea(GUIStyle style, Type layoutType) { }

	// RVA: 0x26C5DB0 Offset: 0x26C5DB0 VA: 0x26C5DB0
	public static Rect GetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x26CE2FC Offset: 0x26CE2FC VA: 0x26CE2FC
	private static Rect DoGetRect(GUIContent content, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x26C6AB8 Offset: 0x26C6AB8 VA: 0x26C6AB8
	public static Rect GetRect(float width, float height, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x26CE7C4 Offset: 0x26CE7C4 VA: 0x26CE7C4
	private static Rect DoGetRect(float minWidth, float maxWidth, float minHeight, float maxHeight, GUIStyle style, GUILayoutOption[] options) { }

	// RVA: 0x26C7264 Offset: 0x26C7264 VA: 0x26C7264
	internal static GUIStyle get_spaceStyle() { }

	// RVA: 0x26CEAC8 Offset: 0x26CEAC8 VA: 0x26CEAC8
	private static void .cctor() { }

	// RVA: 0x26CD504 Offset: 0x26CD504 VA: 0x26CD504
	private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret) { }

	// RVA: 0x26CD5F4 Offset: 0x26CD5F4 VA: 0x26CD5F4
	private static void Internal_MoveWindow_Injected(int windowID, ref Rect r) { }
}

// Namespace: 
[VisibleToOtherModulesAttribute] // RVA: 0xBFA9FC Offset: 0xBFA9FC VA: 0xBFA9FC
internal sealed class GUILayoutUtility.LayoutCache // TypeDefIndex: 2743
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB2F8 Offset: 0xBFB2F8 VA: 0xBFB2F8
	internal GUILayoutGroup topLevel; // 0x10
	internal GenericStack layoutGroups; // 0x18
	internal GUILayoutGroup windows; // 0x20

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xBFBFB8 Offset: 0xBFBFB8 VA: 0xBFBFB8
	// RVA: 0x26CD668 Offset: 0x26CD668 VA: 0x26CD668
	internal void .ctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFAA74 Offset: 0xBFAA74 VA: 0xBFAA74
[Serializable]
public sealed class GUISettings // TypeDefIndex: 2744
{
	// Fields
	[SerializeField] // RVA: 0xBFB370 Offset: 0xBFB370 VA: 0xBFB370
	private bool m_DoubleClickSelectsWord; // 0x10
	[SerializeField] // RVA: 0xBFB380 Offset: 0xBFB380 VA: 0xBFB380
	private bool m_TripleClickSelectsLine; // 0x11
	[SerializeField] // RVA: 0xBFB390 Offset: 0xBFB390 VA: 0xBFB390
	private Color m_CursorColor; // 0x14
	[SerializeField] // RVA: 0xBFB3A0 Offset: 0xBFB3A0 VA: 0xBFB3A0
	private float m_CursorFlashSpeed; // 0x24
	[SerializeField] // RVA: 0xBFB3B0 Offset: 0xBFB3B0 VA: 0xBFB3B0
	private Color m_SelectionColor; // 0x28

	// Properties
	public bool doubleClickSelectsWord { get; }
	public bool tripleClickSelectsLine { get; }
	public Color cursorColor { get; }
	public float cursorFlashSpeed { get; }
	public Color selectionColor { get; }

	// Methods

	// RVA: 0x26CF080 Offset: 0x26CF080 VA: 0x26CF080
	public void .ctor() { }

	// RVA: 0x26CF104 Offset: 0x26CF104 VA: 0x26CF104
	private static float Internal_GetCursorFlashSpeed() { }

	// RVA: 0x26BF86C Offset: 0x26BF86C VA: 0x26BF86C
	public bool get_doubleClickSelectsWord() { }

	// RVA: 0x26BF874 Offset: 0x26BF874 VA: 0x26BF874
	public bool get_tripleClickSelectsLine() { }

	// RVA: 0x26CF15C Offset: 0x26CF15C VA: 0x26CF15C
	public Color get_cursorColor() { }

	// RVA: 0x26CF168 Offset: 0x26CF168 VA: 0x26CF168
	public float get_cursorFlashSpeed() { }

	// RVA: 0x26CF17C Offset: 0x26CF17C VA: 0x26CF17C
	public Color get_selectionColor() { }
}

// Namespace: UnityEngine
[ExecuteInEditMode] // RVA: 0xBFAAAC Offset: 0xBFAAAC VA: 0xBFAAAC
[RequiredByNativeCodeAttribute] // RVA: 0xBFAAAC Offset: 0xBFAAAC VA: 0xBFAAAC
[AssetFileNameExtensionAttribute] // RVA: 0xBFAAAC Offset: 0xBFAAAC VA: 0xBFAAAC
[Serializable]
public sealed class GUISkin : ScriptableObject // TypeDefIndex: 2745
{
	// Fields
	[SerializeField] // RVA: 0xBFB3C0 Offset: 0xBFB3C0 VA: 0xBFB3C0
	private Font m_Font; // 0x18
	[SerializeField] // RVA: 0xBFB3D0 Offset: 0xBFB3D0 VA: 0xBFB3D0
	private GUIStyle m_box; // 0x20
	[SerializeField] // RVA: 0xBFB3E0 Offset: 0xBFB3E0 VA: 0xBFB3E0
	private GUIStyle m_button; // 0x28
	[SerializeField] // RVA: 0xBFB3F0 Offset: 0xBFB3F0 VA: 0xBFB3F0
	private GUIStyle m_toggle; // 0x30
	[SerializeField] // RVA: 0xBFB400 Offset: 0xBFB400 VA: 0xBFB400
	private GUIStyle m_label; // 0x38
	[SerializeField] // RVA: 0xBFB410 Offset: 0xBFB410 VA: 0xBFB410
	private GUIStyle m_textField; // 0x40
	[SerializeField] // RVA: 0xBFB420 Offset: 0xBFB420 VA: 0xBFB420
	private GUIStyle m_textArea; // 0x48
	[SerializeField] // RVA: 0xBFB430 Offset: 0xBFB430 VA: 0xBFB430
	private GUIStyle m_window; // 0x50
	[SerializeField] // RVA: 0xBFB440 Offset: 0xBFB440 VA: 0xBFB440
	private GUIStyle m_horizontalSlider; // 0x58
	[SerializeField] // RVA: 0xBFB450 Offset: 0xBFB450 VA: 0xBFB450
	private GUIStyle m_horizontalSliderThumb; // 0x60
	[SerializeField] // RVA: 0xBFB460 Offset: 0xBFB460 VA: 0xBFB460
	private GUIStyle m_verticalSlider; // 0x68
	[SerializeField] // RVA: 0xBFB470 Offset: 0xBFB470 VA: 0xBFB470
	private GUIStyle m_verticalSliderThumb; // 0x70
	[SerializeField] // RVA: 0xBFB480 Offset: 0xBFB480 VA: 0xBFB480
	private GUIStyle m_horizontalScrollbar; // 0x78
	[SerializeField] // RVA: 0xBFB490 Offset: 0xBFB490 VA: 0xBFB490
	private GUIStyle m_horizontalScrollbarThumb; // 0x80
	[SerializeField] // RVA: 0xBFB4A0 Offset: 0xBFB4A0 VA: 0xBFB4A0
	private GUIStyle m_horizontalScrollbarLeftButton; // 0x88
	[SerializeField] // RVA: 0xBFB4B0 Offset: 0xBFB4B0 VA: 0xBFB4B0
	private GUIStyle m_horizontalScrollbarRightButton; // 0x90
	[SerializeField] // RVA: 0xBFB4C0 Offset: 0xBFB4C0 VA: 0xBFB4C0
	private GUIStyle m_verticalScrollbar; // 0x98
	[SerializeField] // RVA: 0xBFB4D0 Offset: 0xBFB4D0 VA: 0xBFB4D0
	private GUIStyle m_verticalScrollbarThumb; // 0xA0
	[SerializeField] // RVA: 0xBFB4E0 Offset: 0xBFB4E0 VA: 0xBFB4E0
	private GUIStyle m_verticalScrollbarUpButton; // 0xA8
	[SerializeField] // RVA: 0xBFB4F0 Offset: 0xBFB4F0 VA: 0xBFB4F0
	private GUIStyle m_verticalScrollbarDownButton; // 0xB0
	[SerializeField] // RVA: 0xBFB500 Offset: 0xBFB500 VA: 0xBFB500
	private GUIStyle m_ScrollView; // 0xB8
	[SerializeField] // RVA: 0xBFB510 Offset: 0xBFB510 VA: 0xBFB510
	internal GUIStyle[] m_CustomStyles; // 0xC0
	[SerializeField] // RVA: 0xBFB520 Offset: 0xBFB520 VA: 0xBFB520
	private GUISettings m_Settings; // 0xC8
	internal static GUIStyle ms_Error; // 0x0
	private Dictionary<string, GUIStyle> m_Styles; // 0xD0
	internal static GUISkin.SkinChangedDelegate m_SkinChanged; // 0x8
	internal static GUISkin current; // 0x10

	// Properties
	public Font font { get; set; }
	public GUIStyle box { get; set; }
	public GUIStyle label { get; set; }
	public GUIStyle textField { get; set; }
	public GUIStyle textArea { get; set; }
	public GUIStyle button { get; set; }
	public GUIStyle toggle { get; set; }
	public GUIStyle window { get; set; }
	public GUIStyle horizontalSlider { get; set; }
	public GUIStyle horizontalSliderThumb { get; set; }
	public GUIStyle verticalSlider { get; set; }
	public GUIStyle verticalSliderThumb { get; set; }
	public GUIStyle horizontalScrollbar { get; set; }
	public GUIStyle horizontalScrollbarThumb { get; set; }
	public GUIStyle horizontalScrollbarLeftButton { get; set; }
	public GUIStyle horizontalScrollbarRightButton { get; set; }
	public GUIStyle verticalScrollbar { get; set; }
	public GUIStyle verticalScrollbarThumb { get; set; }
	public GUIStyle verticalScrollbarUpButton { get; set; }
	public GUIStyle verticalScrollbarDownButton { get; set; }
	public GUIStyle scrollView { get; set; }
	public GUIStyle[] customStyles { get; set; }
	public GUISettings settings { get; }
	internal static GUIStyle error { get; }

	// Methods

	// RVA: 0x26CF188 Offset: 0x26CF188 VA: 0x26CF188
	public void .ctor() { }

	// RVA: 0x26CF208 Offset: 0x26CF208 VA: 0x26CF208
	internal void OnEnable() { }

	// RVA: 0x26CF28C Offset: 0x26CF28C VA: 0x26CF28C
	internal static void CleanupRoots() { }

	// RVA: 0x26BF8E8 Offset: 0x26BF8E8 VA: 0x26BF8E8
	public Font get_font() { }

	// RVA: 0x26CF2E4 Offset: 0x26CF2E4 VA: 0x26CF2E4
	public void set_font(Font value) { }

	// RVA: 0x26BD814 Offset: 0x26BD814 VA: 0x26BD814
	public GUIStyle get_box() { }

	// RVA: 0x26CF418 Offset: 0x26CF418 VA: 0x26CF418
	public void set_box(GUIStyle value) { }

	// RVA: 0x26BC7A4 Offset: 0x26BC7A4 VA: 0x26BC7A4
	public GUIStyle get_label() { }

	// RVA: 0x26CF420 Offset: 0x26CF420 VA: 0x26CF420
	public void set_label(GUIStyle value) { }

	// RVA: 0x26C62E8 Offset: 0x26C62E8 VA: 0x26C62E8
	public GUIStyle get_textField() { }

	// RVA: 0x26CF428 Offset: 0x26CF428 VA: 0x26CF428
	public void set_textField(GUIStyle value) { }

	// RVA: 0x26BEAB8 Offset: 0x26BEAB8 VA: 0x26BEAB8
	public GUIStyle get_textArea() { }

	// RVA: 0x26CF430 Offset: 0x26CF430 VA: 0x26CF430
	public void set_textArea(GUIStyle value) { }

	// RVA: 0x26BDB54 Offset: 0x26BDB54 VA: 0x26BDB54
	public GUIStyle get_button() { }

	// RVA: 0x26CF438 Offset: 0x26CF438 VA: 0x26CF438
	public void set_button(GUIStyle value) { }

	// RVA: 0x26CF440 Offset: 0x26CF440 VA: 0x26CF440
	public GUIStyle get_toggle() { }

	// RVA: 0x26CF448 Offset: 0x26CF448 VA: 0x26CF448
	public void set_toggle(GUIStyle value) { }

	// RVA: 0x26CF450 Offset: 0x26CF450 VA: 0x26CF450
	public GUIStyle get_window() { }

	// RVA: 0x26CF458 Offset: 0x26CF458 VA: 0x26CF458
	public void set_window(GUIStyle value) { }

	// RVA: 0x26C6C0C Offset: 0x26C6C0C VA: 0x26C6C0C
	public GUIStyle get_horizontalSlider() { }

	// RVA: 0x26CF460 Offset: 0x26CF460 VA: 0x26CF460
	public void set_horizontalSlider(GUIStyle value) { }

	// RVA: 0x26C6C14 Offset: 0x26C6C14 VA: 0x26C6C14
	public GUIStyle get_horizontalSliderThumb() { }

	// RVA: 0x26CF468 Offset: 0x26CF468 VA: 0x26CF468
	public void set_horizontalSliderThumb(GUIStyle value) { }

	// RVA: 0x26C6E14 Offset: 0x26C6E14 VA: 0x26C6E14
	public GUIStyle get_verticalSlider() { }

	// RVA: 0x26CF470 Offset: 0x26CF470 VA: 0x26CF470
	public void set_verticalSlider(GUIStyle value) { }

	// RVA: 0x26C6E1C Offset: 0x26C6E1C VA: 0x26C6E1C
	public GUIStyle get_verticalSliderThumb() { }

	// RVA: 0x26CF478 Offset: 0x26CF478 VA: 0x26CF478
	public void set_verticalSliderThumb(GUIStyle value) { }

	// RVA: 0x26C3118 Offset: 0x26C3118 VA: 0x26C3118
	public GUIStyle get_horizontalScrollbar() { }

	// RVA: 0x26CF480 Offset: 0x26CF480 VA: 0x26CF480
	public void set_horizontalScrollbar(GUIStyle value) { }

	// RVA: 0x26CF488 Offset: 0x26CF488 VA: 0x26CF488
	public GUIStyle get_horizontalScrollbarThumb() { }

	// RVA: 0x26CF490 Offset: 0x26CF490 VA: 0x26CF490
	public void set_horizontalScrollbarThumb(GUIStyle value) { }

	// RVA: 0x26CF498 Offset: 0x26CF498 VA: 0x26CF498
	public GUIStyle get_horizontalScrollbarLeftButton() { }

	// RVA: 0x26CF4A0 Offset: 0x26CF4A0 VA: 0x26CF4A0
	public void set_horizontalScrollbarLeftButton(GUIStyle value) { }

	// RVA: 0x26CF4A8 Offset: 0x26CF4A8 VA: 0x26CF4A8
	public GUIStyle get_horizontalScrollbarRightButton() { }

	// RVA: 0x26CF4B0 Offset: 0x26CF4B0 VA: 0x26CF4B0
	public void set_horizontalScrollbarRightButton(GUIStyle value) { }

	// RVA: 0x26C3120 Offset: 0x26C3120 VA: 0x26C3120
	public GUIStyle get_verticalScrollbar() { }

	// RVA: 0x26CF4B8 Offset: 0x26CF4B8 VA: 0x26CF4B8
	public void set_verticalScrollbar(GUIStyle value) { }

	// RVA: 0x26CF4C0 Offset: 0x26CF4C0 VA: 0x26CF4C0
	public GUIStyle get_verticalScrollbarThumb() { }

	// RVA: 0x26CF4C8 Offset: 0x26CF4C8 VA: 0x26CF4C8
	public void set_verticalScrollbarThumb(GUIStyle value) { }

	// RVA: 0x26CF4D0 Offset: 0x26CF4D0 VA: 0x26CF4D0
	public GUIStyle get_verticalScrollbarUpButton() { }

	// RVA: 0x26CF4D8 Offset: 0x26CF4D8 VA: 0x26CF4D8
	public void set_verticalScrollbarUpButton(GUIStyle value) { }

	// RVA: 0x26CF4E0 Offset: 0x26CF4E0 VA: 0x26CF4E0
	public GUIStyle get_verticalScrollbarDownButton() { }

	// RVA: 0x26CF4E8 Offset: 0x26CF4E8 VA: 0x26CF4E8
	public void set_verticalScrollbarDownButton(GUIStyle value) { }

	// RVA: 0x26C3128 Offset: 0x26C3128 VA: 0x26C3128
	public GUIStyle get_scrollView() { }

	// RVA: 0x26CF4F0 Offset: 0x26CF4F0 VA: 0x26CF4F0
	public void set_scrollView(GUIStyle value) { }

	// RVA: 0x26CF4F8 Offset: 0x26CF4F8 VA: 0x26CF4F8
	public GUIStyle[] get_customStyles() { }

	// RVA: 0x26CF500 Offset: 0x26CF500 VA: 0x26CF500
	public void set_customStyles(GUIStyle[] value) { }

	// RVA: 0x26BF864 Offset: 0x26BF864 VA: 0x26BF864
	public GUISettings get_settings() { }

	// RVA: 0x26CF508 Offset: 0x26CF508 VA: 0x26CF508
	internal static GUIStyle get_error() { }

	// RVA: 0x26CF20C Offset: 0x26CF20C VA: 0x26CF20C
	internal void Apply() { }

	// RVA: 0x26CF62C Offset: 0x26CF62C VA: 0x26CF62C
	private void BuildStyleCache() { }

	// RVA: 0x26C1D78 Offset: 0x26C1D78 VA: 0x26C1D78
	public GUIStyle GetStyle(string styleName) { }

	// RVA: 0x26C0974 Offset: 0x26C0974 VA: 0x26C0974
	public GUIStyle FindStyle(string styleName) { }

	// RVA: 0x26BC3E8 Offset: 0x26BC3E8 VA: 0x26BC3E8
	internal void MakeCurrent() { }

	// RVA: 0x26D0418 Offset: 0x26D0418 VA: 0x26D0418
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
internal sealed class GUISkin.SkinChangedDelegate : MulticastDelegate // TypeDefIndex: 2746
{
	// Methods

	// RVA: 0x26D04D0 Offset: 0x26D04D0 VA: 0x26D04D0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x26D0218 Offset: 0x26D0218 VA: 0x26D0218 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x26D04E0 Offset: 0x26D04E0 VA: 0x26D04E0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x26D0514 Offset: 0x26D0514 VA: 0x26D0514 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal class GUIStateObjects // TypeDefIndex: 2747
{
	// Fields
	private static Dictionary<int, object> s_StateCache; // 0x0

	// Methods

	// RVA: 0x26D0520 Offset: 0x26D0520 VA: 0x26D0520
	internal static object GetStateObject(Type t, int controlID) { }

	// RVA: 0x26D0660 Offset: 0x26D0660 VA: 0x26D0660
	private static void .cctor() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFAB48 Offset: 0xBFAB48 VA: 0xBFAB48
[Serializable]
public sealed class GUIStyleState // TypeDefIndex: 2748
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly GUIStyle m_SourceStyle; // 0x18

	// Properties
	[NativePropertyAttribute] // RVA: 0xBFCFF0 Offset: 0xBFCFF0 VA: 0xBFCFF0
	public Texture2D background { set; }
	[NativePropertyAttribute] // RVA: 0xBFD030 Offset: 0xBFD030 VA: 0xBFD030
	public Color textColor { set; }

	// Methods

	// RVA: 0x26D2298 Offset: 0x26D2298 VA: 0x26D2298
	public void .ctor() { }

	// RVA: 0x26D231C Offset: 0x26D231C VA: 0x26D231C
	private void .ctor(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x26D2354 Offset: 0x26D2354 VA: 0x26D2354
	public void set_background(Texture2D value) { }

	// RVA: 0x26D01F0 Offset: 0x26D01F0 VA: 0x26D01F0
	public void set_textColor(Color value) { }

	[FreeFunctionAttribute] // RVA: 0xBFC030 Offset: 0xBFC030 VA: 0xBFC030
	// RVA: 0x26D22C4 Offset: 0x26D22C4 VA: 0x26D22C4
	private static IntPtr Init() { }

	[FreeFunctionAttribute] // RVA: 0xBFC084 Offset: 0xBFC084 VA: 0xBFC084
	// RVA: 0x26D243C Offset: 0x26D243C VA: 0x26D243C
	private void Cleanup() { }

	// RVA: 0x26D1720 Offset: 0x26D1720 VA: 0x26D1720
	internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source) { }

	// RVA: 0x26D24A8 Offset: 0x26D24A8 VA: 0x26D24A8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x26D23C8 Offset: 0x26D23C8 VA: 0x26D23C8
	private void set_textColor_Injected(ref Color value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFAB80 Offset: 0xBFAB80 VA: 0xBFAB80
[NativeHeaderAttribute] // RVA: 0xBFAB80 Offset: 0xBFAB80 VA: 0xBFAB80
[RequiredByNativeCodeAttribute] // RVA: 0xBFAB80 Offset: 0xBFAB80 VA: 0xBFAB80
[Serializable]
public sealed class GUIStyle // TypeDefIndex: 2749
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private GUIStyleState m_Normal; // 0x18
	private GUIStyleState m_Hover; // 0x20
	private GUIStyleState m_Active; // 0x28
	private GUIStyleState m_Focused; // 0x30
	private GUIStyleState m_OnNormal; // 0x38
	private GUIStyleState m_OnHover; // 0x40
	private GUIStyleState m_OnActive; // 0x48
	private GUIStyleState m_OnFocused; // 0x50
	private RectOffset m_Border; // 0x58
	private RectOffset m_Padding; // 0x60
	private RectOffset m_Margin; // 0x68
	private RectOffset m_Overflow; // 0x70
	internal static bool showKeyboardFocus; // 0x0
	private static GUIStyle s_None; // 0x8

	// Properties
	[NativePropertyAttribute] // RVA: 0xBFD070 Offset: 0xBFD070 VA: 0xBFD070
	public string name { get; set; }
	[NativePropertyAttribute] // RVA: 0xBFD0B0 Offset: 0xBFD0B0 VA: 0xBFD0B0
	public Font font { get; }
	[NativePropertyAttribute] // RVA: 0xBFD0F0 Offset: 0xBFD0F0 VA: 0xBFD0F0
	public ImagePosition imagePosition { get; }
	[NativePropertyAttribute] // RVA: 0xBFD130 Offset: 0xBFD130 VA: 0xBFD130
	public TextAnchor alignment { set; }
	[NativePropertyAttribute] // RVA: 0xBFD170 Offset: 0xBFD170 VA: 0xBFD170
	public bool wordWrap { get; }
	[NativePropertyAttribute] // RVA: 0xBFD1B0 Offset: 0xBFD1B0 VA: 0xBFD1B0
	public Vector2 contentOffset { get; set; }
	[NativePropertyAttribute] // RVA: 0xBFD1F0 Offset: 0xBFD1F0 VA: 0xBFD1F0
	public float fixedWidth { get; }
	[NativePropertyAttribute] // RVA: 0xBFD230 Offset: 0xBFD230 VA: 0xBFD230
	public float fixedHeight { get; }
	[NativePropertyAttribute] // RVA: 0xBFD270 Offset: 0xBFD270 VA: 0xBFD270
	public bool stretchWidth { get; set; }
	[NativePropertyAttribute] // RVA: 0xBFD2B0 Offset: 0xBFD2B0 VA: 0xBFD2B0
	public bool stretchHeight { get; set; }
	[NativePropertyAttribute] // RVA: 0xBFD2F0 Offset: 0xBFD2F0 VA: 0xBFD2F0
	public int fontSize { set; }
	[NativePropertyAttribute] // RVA: 0xBFD330 Offset: 0xBFD330 VA: 0xBFD330
	internal Vector2 Internal_clipOffset { set; }
	public GUIStyleState normal { get; }
	public RectOffset margin { get; }
	public RectOffset padding { get; set; }
	public float lineHeight { get; }
	public static GUIStyle none { get; }
	public bool isHeightDependantOnWidth { get; }

	// Methods

	// RVA: 0x26CE9DC Offset: 0x26CE9DC VA: 0x26CE9DC
	public void .ctor() { }

	// RVA: 0x26C0908 Offset: 0x26C0908 VA: 0x26C0908
	public string get_name() { }

	// RVA: 0x26CF5B8 Offset: 0x26CF5B8 VA: 0x26CF5B8
	public void set_name(string value) { }

	// RVA: 0x26BF87C Offset: 0x26BF87C VA: 0x26BF87C
	public Font get_font() { }

	// RVA: 0x26D0740 Offset: 0x26D0740 VA: 0x26D0740
	public ImagePosition get_imagePosition() { }

	// RVA: 0x26D07AC Offset: 0x26D07AC VA: 0x26D07AC
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x26D0820 Offset: 0x26D0820 VA: 0x26D0820
	public bool get_wordWrap() { }

	// RVA: 0x26D088C Offset: 0x26D088C VA: 0x26D088C
	public Vector2 get_contentOffset() { }

	// RVA: 0x26D0928 Offset: 0x26D0928 VA: 0x26D0928
	public void set_contentOffset(Vector2 value) { }

	// RVA: 0x26C1180 Offset: 0x26C1180 VA: 0x26C1180
	public float get_fixedWidth() { }

	// RVA: 0x26C11EC Offset: 0x26C11EC VA: 0x26C11EC
	public float get_fixedHeight() { }

	// RVA: 0x26C9854 Offset: 0x26C9854 VA: 0x26C9854
	public bool get_stretchWidth() { }

	// RVA: 0x26CEA54 Offset: 0x26CEA54 VA: 0x26CEA54
	public void set_stretchWidth(bool value) { }

	// RVA: 0x26C98C0 Offset: 0x26C98C0 VA: 0x26C98C0
	public bool get_stretchHeight() { }

	// RVA: 0x26D013C Offset: 0x26D013C VA: 0x26D013C
	public void set_stretchHeight(bool value) { }

	// RVA: 0x26D09C0 Offset: 0x26D09C0 VA: 0x26D09C0
	public void set_fontSize(int value) { }

	// RVA: 0x26D0A34 Offset: 0x26D0A34 VA: 0x26D0A34
	internal void set_Internal_clipOffset(Vector2 value) { }

	[FreeFunctionAttribute] // RVA: 0xBFC0E8 Offset: 0xBFC0E8 VA: 0xBFC0E8
	// RVA: 0x26D06D4 Offset: 0x26D06D4 VA: 0x26D06D4
	private static IntPtr Internal_Create(GUIStyle self) { }

	[FreeFunctionAttribute] // RVA: 0xBFC13C Offset: 0xBFC13C VA: 0xBFC13C
	// RVA: 0x26D0ACC Offset: 0x26D0ACC VA: 0x26D0ACC
	private static void Internal_Destroy(IntPtr self) { }

	[FreeFunctionAttribute] // RVA: 0xBFC190 Offset: 0xBFC190 VA: 0xBFC190
	// RVA: 0x26D0B38 Offset: 0x26D0B38 VA: 0x26D0B38
	private IntPtr GetStyleStatePtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xBFC1F4 Offset: 0xBFC1F4 VA: 0xBFC1F4
	// RVA: 0x26D0BAC Offset: 0x26D0BAC VA: 0x26D0BAC
	private IntPtr GetRectOffsetPtr(int idx) { }

	[FreeFunctionAttribute] // RVA: 0xBFC248 Offset: 0xBFC248 VA: 0xBFC248
	// RVA: 0x26D0C20 Offset: 0x26D0C20 VA: 0x26D0C20
	private void AssignRectOffset(int idx, IntPtr srcRectOffset) { }

	[FreeFunctionAttribute] // RVA: 0xBFC29C Offset: 0xBFC29C VA: 0xBFC29C
	// RVA: 0x26D0CA4 Offset: 0x26D0CA4 VA: 0x26D0CA4
	private static float Internal_GetLineHeight(IntPtr target) { }

	[FreeFunctionAttribute] // RVA: 0xBFC2E0 Offset: 0xBFC2E0 VA: 0xBFC2E0
	// RVA: 0x26D0D10 Offset: 0x26D0D10 VA: 0x26D0D10
	private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	[FreeFunctionAttribute] // RVA: 0xBFC334 Offset: 0xBFC334 VA: 0xBFC334
	// RVA: 0x26D0E10 Offset: 0x26D0E10 VA: 0x26D0E10
	private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on) { }

	[FreeFunctionAttribute] // RVA: 0xBFC388 Offset: 0xBFC388 VA: 0xBFC388
	// RVA: 0x26D0EE8 Offset: 0x26D0EE8 VA: 0x26D0EE8
	private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor) { }

	[FreeFunctionAttribute] // RVA: 0xBFC3DC Offset: 0xBFC3DC VA: 0xBFC3DC
	// RVA: 0x26D0FC8 Offset: 0x26D0FC8 VA: 0x26D0FC8
	private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor) { }

	[FreeFunctionAttribute] // RVA: 0xBFC430 Offset: 0xBFC430 VA: 0xBFC430
	// RVA: 0x26D1134 Offset: 0x26D1134 VA: 0x26D1134
	internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex) { }

	[FreeFunctionAttribute] // RVA: 0xBFC484 Offset: 0xBFC484 VA: 0xBFC484
	// RVA: 0x26D1214 Offset: 0x26D1214 VA: 0x26D1214
	internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition) { }

	[FreeFunctionAttribute] // RVA: 0xBFC4D8 Offset: 0xBFC4D8 VA: 0xBFC4D8
	// RVA: 0x26D12D8 Offset: 0x26D12D8 VA: 0x26D12D8
	internal Vector2 Internal_CalcSize(GUIContent content) { }

	[FreeFunctionAttribute] // RVA: 0xBFC52C Offset: 0xBFC52C VA: 0xBFC52C
	// RVA: 0x26D1384 Offset: 0x26D1384 VA: 0x26D1384
	internal Vector2 Internal_CalcSizeWithConstraints(GUIContent content, Vector2 maxSize) { }

	[FreeFunctionAttribute] // RVA: 0xBFC580 Offset: 0xBFC580 VA: 0xBFC580
	// RVA: 0x26D1440 Offset: 0x26D1440 VA: 0x26D1440
	private float Internal_CalcHeight(GUIContent content, float width) { }

	[FreeFunctionAttribute] // RVA: 0xBFC5D4 Offset: 0xBFC5D4 VA: 0xBFC5D4
	// RVA: 0x26D14CC Offset: 0x26D14CC VA: 0x26D14CC
	private Vector2 Internal_CalcMinMaxWidth(GUIContent content) { }

	[FreeFunctionAttribute] // RVA: 0xBFC628 Offset: 0xBFC628 VA: 0xBFC628
	// RVA: 0x26C1104 Offset: 0x26C1104 VA: 0x26C1104
	internal static void SetMouseTooltip(string tooltip, Rect screenRect) { }

	[FreeFunctionAttribute] // RVA: 0xBFC66C Offset: 0xBFC66C VA: 0xBFC66C
	// RVA: 0x26D15EC Offset: 0x26D15EC VA: 0x26D15EC
	private static float Internal_GetCursorFlashOffset() { }

	[FreeFunctionAttribute] // RVA: 0xBFC6B0 Offset: 0xBFC6B0 VA: 0xBFC6B0
	// RVA: 0x26CF3AC Offset: 0x26CF3AC VA: 0x26CF3AC
	internal static void SetDefaultFont(Font font) { }

	// RVA: 0x26D1644 Offset: 0x26D1644 VA: 0x26D1644 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x26D01B0 Offset: 0x26D01B0 VA: 0x26D01B0
	public GUIStyleState get_normal() { }

	// RVA: 0x26C0D0C Offset: 0x26C0D0C VA: 0x26C0D0C
	public RectOffset get_margin() { }

	// RVA: 0x26CB348 Offset: 0x26CB348 VA: 0x26CB348
	public RectOffset get_padding() { }

	// RVA: 0x26D1790 Offset: 0x26D1790 VA: 0x26D1790
	public void set_padding(RectOffset value) { }

	[CompilerGeneratedAttribute] // RVA: 0xBFC6F4 Offset: 0xBFC6F4 VA: 0xBFC6F4
	// RVA: 0x26D17C8 Offset: 0x26D17C8 VA: 0x26D17C8
	public float get_lineHeight() { }

	// RVA: 0x26C3FB4 Offset: 0x26C3FB4 VA: 0x26C3FB4
	public void Draw(Rect position, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x26C1084 Offset: 0x26C1084 VA: 0x26C1084
	public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x26BDA60 Offset: 0x26BDA60 VA: 0x26BDA60
	public void Draw(Rect position, GUIContent content, int controlID) { }

	// RVA: 0x26BF850 Offset: 0x26BF850 VA: 0x26BF850
	public void Draw(Rect position, GUIContent content, int controlID, bool on) { }

	// RVA: 0x26D18D4 Offset: 0x26D18D4 VA: 0x26D18D4
	private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x26D1940 Offset: 0x26D1940 VA: 0x26D1940
	public void DrawCursor(Rect position, GUIContent content, int controlID, int character) { }

	// RVA: 0x26D1B68 Offset: 0x26D1B68 VA: 0x26D1B68
	internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor) { }

	// RVA: 0x26D1DDC Offset: 0x26D1DDC VA: 0x26D1DDC
	internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition) { }

	// RVA: 0x26D1EE0 Offset: 0x26D1EE0 VA: 0x26D1EE0
	internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition) { }

	// RVA: 0x26D1FF8 Offset: 0x26D1FF8 VA: 0x26D1FF8
	public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter) { }

	// RVA: 0x26D2000 Offset: 0x26D2000 VA: 0x26D2000
	public static GUIStyle op_Implicit(string str) { }

	[CompilerGeneratedAttribute] // RVA: 0xBFC704 Offset: 0xBFC704 VA: 0xBFC704
	// RVA: 0x26C2EFC Offset: 0x26C2EFC VA: 0x26C2EFC
	public static GUIStyle get_none() { }

	// RVA: 0x26D20F4 Offset: 0x26D20F4 VA: 0x26D20F4
	public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex) { }

	// RVA: 0x26D20F8 Offset: 0x26D20F8 VA: 0x26D20F8
	public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition) { }

	// RVA: 0x26C1790 Offset: 0x26C1790 VA: 0x26C1790
	public Vector2 CalcSize(GUIContent content) { }

	// RVA: 0x26CE794 Offset: 0x26CE794 VA: 0x26CE794
	internal Vector2 CalcSizeWithConstraints(GUIContent content, Vector2 constraints) { }

	// RVA: 0x26D2130 Offset: 0x26D2130 VA: 0x26D2130
	public float CalcHeight(GUIContent content, float width) { }

	[CompilerGeneratedAttribute] // RVA: 0xBFC714 Offset: 0xBFC714 VA: 0xBFC714
	// RVA: 0x26CE674 Offset: 0x26CE674 VA: 0x26CE674
	public bool get_isHeightDependantOnWidth() { }

	// RVA: 0x26D2134 Offset: 0x26D2134 VA: 0x26D2134
	public void CalcMinMaxWidth(GUIContent content, out float minWidth, out float maxWidth) { }

	// RVA: 0x26D2174 Offset: 0x26D2174 VA: 0x26D2174 Slot: 3
	public override string ToString() { }

	// RVA: 0x26D2244 Offset: 0x26D2244 VA: 0x26D2244
	private static void .cctor() { }

	// RVA: 0x26D08B4 Offset: 0x26D08B4 VA: 0x26D08B4
	private void get_contentOffset_Injected(out Vector2 ret) { }

	// RVA: 0x26D094C Offset: 0x26D094C VA: 0x26D094C
	private void set_contentOffset_Injected(ref Vector2 value) { }

	// RVA: 0x26D0A58 Offset: 0x26D0A58 VA: 0x26D0A58
	private void set_Internal_clipOffset_Injected(ref Vector2 value) { }

	// RVA: 0x26D0D5C Offset: 0x26D0D5C VA: 0x26D0D5C
	private void Internal_Draw_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }

	// RVA: 0x26D0E4C Offset: 0x26D0E4C VA: 0x26D0E4C
	private void Internal_Draw2_Injected(ref Rect position, GUIContent content, int controlID, bool on) { }

	// RVA: 0x26D0F2C Offset: 0x26D0F2C VA: 0x26D0F2C
	private void Internal_DrawCursor_Injected(ref Rect position, GUIContent content, int pos, ref Color cursorColor) { }

	// RVA: 0x26D1050 Offset: 0x26D1050 VA: 0x26D1050
	private void Internal_DrawWithTextSelection_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ref Color cursorColor, ref Color selectionColor) { }

	// RVA: 0x26D1178 Offset: 0x26D1178 VA: 0x26D1178
	private void Internal_GetCursorPixelPosition_Injected(ref Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret) { }

	// RVA: 0x26D124C Offset: 0x26D124C VA: 0x26D124C
	private int Internal_GetCursorStringIndex_Injected(ref Rect position, GUIContent content, ref Vector2 cursorPixelPosition) { }

	// RVA: 0x26D1300 Offset: 0x26D1300 VA: 0x26D1300
	private void Internal_CalcSize_Injected(GUIContent content, out Vector2 ret) { }

	// RVA: 0x26D13B4 Offset: 0x26D13B4 VA: 0x26D13B4
	private void Internal_CalcSizeWithConstraints_Injected(GUIContent content, ref Vector2 maxSize, out Vector2 ret) { }

	// RVA: 0x26D14F4 Offset: 0x26D14F4 VA: 0x26D14F4
	private void Internal_CalcMinMaxWidth_Injected(GUIContent content, out Vector2 ret) { }

	// RVA: 0x26D1578 Offset: 0x26D1578 VA: 0x26D1578
	private static void SetMouseTooltip_Injected(string tooltip, ref Rect screenRect) { }
}

// Namespace: UnityEngine
public enum ImagePosition // TypeDefIndex: 2750
{
	// Fields
	public int value__; // 0x0
	public const ImagePosition ImageLeft = 0;
	public const ImagePosition ImageAbove = 1;
	public const ImagePosition ImageOnly = 2;
	public const ImagePosition TextOnly = 3;
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xBFABF0 Offset: 0xBFABF0 VA: 0xBFABF0
public class GUITargetAttribute : Attribute // TypeDefIndex: 2751
{
	// Fields
	internal int displayMask; // 0x10

	// Methods

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC724 Offset: 0xBFC724 VA: 0xBFC724
	// RVA: 0x26D2550 Offset: 0x26D2550 VA: 0x26D2550
	private static int GetGUITargetAttrValue(Type klass, string methodName) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFAC04 Offset: 0xBFAC04 VA: 0xBFAC04
[NativeHeaderAttribute] // RVA: 0xBFAC04 Offset: 0xBFAC04 VA: 0xBFAC04
[NativeHeaderAttribute] // RVA: 0xBFAC04 Offset: 0xBFAC04 VA: 0xBFAC04
[NativeHeaderAttribute] // RVA: 0xBFAC04 Offset: 0xBFAC04 VA: 0xBFAC04
[NativeHeaderAttribute] // RVA: 0xBFAC04 Offset: 0xBFAC04 VA: 0xBFAC04
public class GUIUtility // TypeDefIndex: 2752
{
	// Fields
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB530 Offset: 0xBFB530 VA: 0xBFB530
	internal static int s_SkinMode; // 0x0
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB5A8 Offset: 0xBFB5A8 VA: 0xBFB5A8
	internal static int s_OriginalID; // 0x4
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB620 Offset: 0xBFB620 VA: 0xBFB620
	internal static Action takeCapture; // 0x8
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB698 Offset: 0xBFB698 VA: 0xBFB698
	internal static Action releaseCapture; // 0x10
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB710 Offset: 0xBFB710 VA: 0xBFB710
	internal static Func<int, IntPtr, bool> processEvent; // 0x18
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB788 Offset: 0xBFB788 VA: 0xBFB788
	internal static Func<Exception, bool> endContainerGUIFromException; // 0x20
	[VisibleToOtherModulesAttribute] // RVA: 0xBFB800 Offset: 0xBFB800 VA: 0xBFB800
	internal static Action enabledStateChanged; // 0x28
	[DebuggerBrowsableAttribute] // RVA: 0xBFB878 Offset: 0xBFB878 VA: 0xBFB878
	[CompilerGeneratedAttribute] // RVA: 0xBFB878 Offset: 0xBFB878 VA: 0xBFB878
	private static bool <guiIsExiting>k__BackingField; // 0x30

	// Properties
	[NativePropertyAttribute] // RVA: 0xBFD370 Offset: 0xBFD370 VA: 0xBFD370
	internal static float pixelsPerPoint { get; }
	[NativePropertyAttribute] // RVA: 0xBFD3B0 Offset: 0xBFD3B0 VA: 0xBFD3B0
	internal static int guiDepth { get; }
	[NativePropertyAttribute] // RVA: 0xBFD3F0 Offset: 0xBFD3F0 VA: 0xBFD3F0
	internal static bool mouseUsed { set; }
	[StaticAccessorAttribute] // RVA: 0xBFD430 Offset: 0xBFD430 VA: 0xBFD430
	internal static bool textFieldInput { set; }
	public static string systemCopyBuffer { get; set; }
	internal static bool guiIsExiting { set; }
	public static int hotControl { get; set; }
	public static int keyboardControl { get; set; }

	// Methods

	[VisibleToOtherModulesAttribute] // RVA: 0xBFC734 Offset: 0xBFC734 VA: 0xBFC734
	// RVA: 0x26CD99C Offset: 0x26CD99C VA: 0x26CD99C
	internal static float get_pixelsPerPoint() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBFC7AC Offset: 0xBFC7AC VA: 0xBFC7AC
	// RVA: 0x26D26F8 Offset: 0x26D26F8 VA: 0x26D26F8
	internal static int get_guiDepth() { }

	// RVA: 0x26C1724 Offset: 0x26C1724 VA: 0x26C1724
	internal static void set_mouseUsed(bool value) { }

	// RVA: 0x26BF8F0 Offset: 0x26BF8F0 VA: 0x26BF8F0
	internal static void set_textFieldInput(bool value) { }

	[FreeFunctionAttribute] // RVA: 0xBFC824 Offset: 0xBFC824 VA: 0xBFC824
	// RVA: 0x26D2750 Offset: 0x26D2750 VA: 0x26D2750
	public static string get_systemCopyBuffer() { }

	[FreeFunctionAttribute] // RVA: 0xBFC85C Offset: 0xBFC85C VA: 0xBFC85C
	// RVA: 0x26D27A8 Offset: 0x26D27A8 VA: 0x26D27A8
	public static void set_systemCopyBuffer(string value) { }

	[StaticAccessorAttribute] // RVA: 0xBFC894 Offset: 0xBFC894 VA: 0xBFC894
	// RVA: 0x26BDC30 Offset: 0x26BDC30 VA: 0x26BDC30
	public static int GetControlID(int hint, FocusType focusType, Rect rect) { }

	// RVA: 0x26D2898 Offset: 0x26D2898 VA: 0x26D2898
	public static Rect AlignRectToDevice(Rect rect, out int widthInPixels, out int heightInPixels) { }

	// RVA: 0x26D296C Offset: 0x26D296C VA: 0x26D296C
	private static int Internal_GetHotControl() { }

	// RVA: 0x26D29C4 Offset: 0x26D29C4 VA: 0x26D29C4
	private static int Internal_GetKeyboardControl() { }

	// RVA: 0x26D2A1C Offset: 0x26D2A1C VA: 0x26D2A1C
	private static void Internal_SetHotControl(int value) { }

	// RVA: 0x26D2A88 Offset: 0x26D2A88 VA: 0x26D2A88
	private static void Internal_SetKeyboardControl(int value) { }

	// RVA: 0x26D2AF4 Offset: 0x26D2AF4 VA: 0x26D2AF4
	private static object Internal_GetDefaultSkin(int skinMode) { }

	// RVA: 0x26D2B60 Offset: 0x26D2B60 VA: 0x26D2B60
	private static void Internal_ExitGUI() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC8D0 Offset: 0xBFC8D0 VA: 0xBFC8D0
	// RVA: 0x26D2BB8 Offset: 0x26D2BB8 VA: 0x26D2BB8
	private static void MarkGUIChanged() { }

	// RVA: 0x26BE4C8 Offset: 0x26BE4C8 VA: 0x26BE4C8
	public static int GetControlID(FocusType focus) { }

	// RVA: 0x26BE890 Offset: 0x26BE890 VA: 0x26BE890
	public static int GetControlID(FocusType focus, Rect position) { }

	// RVA: 0x26BDA18 Offset: 0x26BDA18 VA: 0x26BDA18
	public static int GetControlID(int hint, FocusType focus) { }

	// RVA: 0x26BEBA0 Offset: 0x26BEBA0 VA: 0x26BEBA0
	public static object GetStateObject(Type t, int controlID) { }

	[CompilerGeneratedAttribute] // RVA: 0xBFC8E0 Offset: 0xBFC8E0 VA: 0xBFC8E0
	// RVA: 0x26D2C1C Offset: 0x26D2C1C VA: 0x26D2C1C
	internal static void set_guiIsExiting(bool value) { }

	// RVA: 0x26BE150 Offset: 0x26BE150 VA: 0x26BE150
	public static int get_hotControl() { }

	// RVA: 0x26BE14C Offset: 0x26BE14C VA: 0x26BE14C
	public static void set_hotControl(int value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC8F0 Offset: 0xBFC8F0 VA: 0xBFC8F0
	// RVA: 0x26D2C74 Offset: 0x26D2C74 VA: 0x26D2C74
	internal static void TakeCapture() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC900 Offset: 0xBFC900 VA: 0xBFC900
	// RVA: 0x26D2CD8 Offset: 0x26D2CD8 VA: 0x26D2CD8
	internal static void RemoveCapture() { }

	// RVA: 0x26BF848 Offset: 0x26BF848 VA: 0x26BF848
	public static int get_keyboardControl() { }

	// RVA: 0x26BF84C Offset: 0x26BF84C VA: 0x26BF84C
	public static void set_keyboardControl(int value) { }

	// RVA: 0x26D2D3C Offset: 0x26D2D3C VA: 0x26D2D3C
	public static void ExitGUI() { }

	// RVA: 0x26BC378 Offset: 0x26BC378 VA: 0x26BC378
	internal static GUISkin GetDefaultSkin() { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC910 Offset: 0xBFC910 VA: 0xBFC910
	// RVA: 0x26D2DAC Offset: 0x26D2DAC VA: 0x26D2DAC
	internal static bool ProcessEvent(int instanceID, IntPtr nativeEventPtr) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC920 Offset: 0xBFC920 VA: 0xBFC920
	// RVA: 0x26D2E34 Offset: 0x26D2E34 VA: 0x26D2E34
	internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC930 Offset: 0xBFC930 VA: 0xBFC930
	// RVA: 0x26D2F80 Offset: 0x26D2F80 VA: 0x26D2F80
	internal static void EndGUI(int layoutType) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC940 Offset: 0xBFC940 VA: 0xBFC940
	// RVA: 0x26D3124 Offset: 0x26D3124 VA: 0x26D3124
	internal static bool EndGUIFromException(Exception exception) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xBFC950 Offset: 0xBFC950 VA: 0xBFC950
	// RVA: 0x26D314C Offset: 0x26D314C VA: 0x26D314C
	internal static bool EndContainerGUIFromException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBFC960 Offset: 0xBFC960 VA: 0xBFC960
	// RVA: 0x26D2EE0 Offset: 0x26D2EE0 VA: 0x26D2EE0
	internal static void ResetGlobalState() { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBFC9D8 Offset: 0xBFC9D8 VA: 0xBFC9D8
	// RVA: 0x26D31C0 Offset: 0x26D31C0 VA: 0x26D31C0
	internal static bool IsExitGUIException(Exception exception) { }

	[VisibleToOtherModulesAttribute] // RVA: 0xBFCA50 Offset: 0xBFCA50 VA: 0xBFCA50
	// RVA: 0x26D3148 Offset: 0x26D3148 VA: 0x26D3148
	internal static bool ShouldRethrowException(Exception exception) { }
