	// RVA: 0x1160388 Offset: 0x1160388 VA: 0x1160388
	public bool isDraw() { }

	// RVA: 0x116307C Offset: 0x116307C VA: 0x116307C Slot: 4
	public override void setResultData(BattleDropItem[] drop, int eventId, QuestRewardInfo[] resultBoostItemRewardInfos, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x1163B6C Offset: 0x1163B6C VA: 0x1163B6C Slot: 6
	protected override void SetTitleSprite(int currentGroup) { }

	// RVA: 0x1163D04 Offset: 0x1163D04 VA: 0x1163D04
	private static void .cctor() { }
}

// Namespace: 
public class BattleResultEventItemComponent : MonoBehaviour // TypeDefIndex: 9379
{
	// Fields
	private static readonly string EVENT_POINT_REWARD_AT; // 0x0
	private static readonly string EVENT_POINT_REWARD_TITLE_NAME; // 0x8
	private static readonly string EVENT_POINT_REWARD_BG_NAME; // 0x10
	private static readonly string EVENT_POINT_BG_TITLE_NAME; // 0x18
	private static readonly int TITLE_AT_LABEL_MAX_WIDTH; // 0x20
	private static readonly int NEXT_ITEM_LABEL_MAX_WIDTH; // 0x24
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public BattleWindowComponent window; // 0x28
	public BattleViewItemlistComponent itemWindow; // 0x30
	public GameObject touchNextRoot; // 0x38
	public UILabel titleConfLabel; // 0x40
	public UILabel titleAtLabel; // 0x48
	public UILabel titleNextItemLabel; // 0x50
	public UILabel atLabel; // 0x58
	public UILabel nextItemLabel; // 0x60
	public UISprite eventPointAtSprite; // 0x68
	public UISprite eventIconSprite; // 0x70
	public ItemDetailInfoComponent itemDialog; // 0x78
	protected List<BattleDropItem> newDroplist; // 0x80
	public int itemColumnCount; // 0x88
	public UISprite titleSp; // 0x90
	public UISprite bgSp; // 0x98
	protected int currentEventId; // 0xA0
	protected int currentGroupIndex; // 0xA4
	private List<BattleResultEventItemComponent.EventDropItemInfo> dropInfoList; // 0xA8
	public UIButton showModeChangeButton; // 0xB0
	public UILabel showModeChangeButtonLabel; // 0xB8
	public Color[] showModeChanButtonLabelEffectColors; // 0xC0
	private bool isShowPossessionNum; // 0xC8
	private long tmp_userSvtId; // 0xD0
	private int tmp_itemId; // 0xD8
	private long tmp_commandCodeId; // 0xE0
	private long tmp_eventPointBuffId; // 0xE8
	[CompilerGeneratedAttribute] // RVA: 0xC669E8 Offset: 0xC669E8 VA: 0xC669E8
	private static Predicate<BattleDropItem> <>f__am$cache0; // 0x28

	// Methods

	// RVA: 0x1162FEC Offset: 0x1162FEC VA: 0x1162FEC
	public void .ctor() { }

	// RVA: 0x115B6BC Offset: 0x115B6BC VA: 0x115B6BC
	public void Init() { }

	// RVA: 0x115FEE8 Offset: 0x115FEE8 VA: 0x115FEE8
	public bool isGetItems() { }

	// RVA: 0x11606DC Offset: 0x11606DC VA: 0x11606DC
	public BattleDropItem getNewDrop() { }

	// RVA: 0x115FFA8 Offset: 0x115FFA8 VA: 0x115FFA8
	public void Open() { }

	// RVA: 0x1163F40 Offset: 0x1163F40 VA: 0x1163F40
	public void endOpen() { }

	// RVA: 0x1163FC0 Offset: 0x1163FC0 VA: 0x1163FC0
	protected void SetItemWindow(BattleDropItem[] itemArray, int boostItemManaCount, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x1163AA0 Offset: 0x1163AA0 VA: 0x1163AA0
	protected void SetItemWindow(BattleDropItem[] itemArray) { }

	// RVA: 0x1164024 Offset: 0x1164024 VA: 0x1164024 Slot: 4
	public virtual void setResultData(BattleDropItem[] drop, int eventId, QuestRewardInfo[] resultBoostItemRewardInfos, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x1164384 Offset: 0x1164384 VA: 0x1164384
	protected void SetUi(int eventId) { }

	// RVA: 0x1164B20 Offset: 0x1164B20 VA: 0x1164B20
	private string SearchEventGroupPointAtSprite(int eventId, int groupId) { }

	// RVA: 0x1164D78 Offset: 0x1164D78 VA: 0x1164D78
	protected void SetNextItemLabel(long userEventPoint, EventRewardEntity eventRewardENt) { }

	// RVA: 0x1163708 Offset: 0x1163708 VA: 0x1163708
	protected void createDropInfo(BattleDropItem[] drop) { }

	// RVA: 0x1165038 Offset: 0x1165038 VA: 0x1165038 Slot: 5
	protected virtual void SetBgSprite(int imageId) { }

	// RVA: 0x11651DC Offset: 0x11651DC VA: 0x11651DC Slot: 6
	protected virtual void SetTitleSprite(int currentGroup) { }

	// RVA: 0x116541C Offset: 0x116541C VA: 0x116541C
	public void setShowConf(BattleDropItem item) { }

	// RVA: 0x11654F4 Offset: 0x11654F4 VA: 0x11654F4
	public void setShowServantConf(long userSvtId) { }

	// RVA: 0x11656C4 Offset: 0x11656C4 VA: 0x11656C4
	public void showServantDialog() { }

	// RVA: 0x1165778 Offset: 0x1165778 VA: 0x1165778
	public void DialogCallBack(bool flg) { }

	// RVA: 0x116581C Offset: 0x116581C VA: 0x116581C
	public void EndCloseDialogCallBack() { }

	// RVA: 0x1165568 Offset: 0x1165568 VA: 0x1165568
	public void setShowItemConf(int itemId) { }

	// RVA: 0x1165880 Offset: 0x1165880 VA: 0x1165880
	public void showItemDialog() { }

	// RVA: 0x116597C Offset: 0x116597C VA: 0x116597C
	public void itemDialogCallBack(bool flg) { }

	// RVA: 0x1165A38 Offset: 0x1165A38 VA: 0x1165A38
	public void endItemDialogCallBack() { }

	// RVA: 0x11655DC Offset: 0x11655DC VA: 0x11655DC
	public void setShowCommandCodeConf(long commandCodeId) { }

	// RVA: 0x1165A9C Offset: 0x1165A9C VA: 0x1165A9C
	public void showCommandCodeDialog() { }

	// RVA: 0x1165BA8 Offset: 0x1165BA8 VA: 0x1165BA8
	public void commandCodeDialogCallBack(bool flg) { }

	// RVA: 0x1165C4C Offset: 0x1165C4C VA: 0x1165C4C
	public void endCommandCodeDialogCallBack() { }

	// RVA: 0x1165650 Offset: 0x1165650 VA: 0x1165650
	public void setShowEventPointBuffConf(long eventPointBuffId) { }

	// RVA: 0x1165CB0 Offset: 0x1165CB0 VA: 0x1165CB0
	public void showEventPointBuffDialog() { }

	// RVA: 0x1165DCC Offset: 0x1165DCC VA: 0x1165DCC
	public void eventPointBuffDialogCallBack(bool flg) { }

	// RVA: 0x1165E88 Offset: 0x1165E88 VA: 0x1165E88
	public void endEventPointBuffDialogCallBack() { }

	// RVA: 0x1165EEC Offset: 0x1165EEC VA: 0x1165EEC
	public void Close() { }

	// RVA: 0x1166008 Offset: 0x1166008 VA: 0x1166008
	public void endClose() { }

	// RVA: 0x116606C Offset: 0x116606C VA: 0x116606C
	public void CheckNextGroup() { }

	// RVA: 0x11661C4 Offset: 0x11661C4 VA: 0x11661C4
	public void OnClickSwitchShowMode() { }

	// RVA: 0x1163D8C Offset: 0x1163D8C VA: 0x1163D8C
	private void UpdateShowModeChangeButton() { }

	// RVA: 0x1163E84 Offset: 0x1163E84 VA: 0x1163E84
	private void SetCondensedScale() { }

	// RVA: 0x1166268 Offset: 0x1166268 VA: 0x1166268
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE778 Offset: 0xCCE778 VA: 0xCCE778
	// RVA: 0x116631C Offset: 0x116631C VA: 0x116631C
	private static bool <createDropInfo>m__0(BattleDropItem s) { }
}

// Namespace: 
public struct BattleResultEventItemComponent.EventDropItemInfo // TypeDefIndex: 9380
{
	// Fields
	public List<BattleDropItem> itemList; // 0x0
	public int itemCount; // 0x8
	public List<BattleDropItem> newDroplist; // 0x10
	public int groupId; // 0x18
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44524 Offset: 0xC44524 VA: 0xC44524
private sealed class BattleResultEventItemComponent.<createDropInfo>c__AnonStorey0 // TypeDefIndex: 9381
{
	// Fields
	internal BattleDropItem[] drop; // 0x10

	// Methods

	// RVA: 0x1165028 Offset: 0x1165028 VA: 0x1165028
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44534 Offset: 0xC44534 VA: 0xC44534
private sealed class BattleResultEventItemComponent.<createDropInfo>c__AnonStorey1 // TypeDefIndex: 9382
{
	// Fields
	internal int i; // 0x10
	internal BattleResultEventItemComponent.<createDropInfo>c__AnonStorey0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x1165030 Offset: 0x1165030 VA: 0x1165030
	public void .ctor() { }

	// RVA: 0x1166378 Offset: 0x1166378 VA: 0x1166378
	internal bool <>m__0(BattleResultEventItemComponent.EventDropItemInfo d) { }

	// RVA: 0x1166400 Offset: 0x1166400 VA: 0x1166400
	internal bool <>m__1(BattleDropItem item) { }
}

// Namespace: 
public class BattleResultEventItemGroupComponent : MonoBehaviour // TypeDefIndex: 9383
{
	// Fields
	[SerializeField] // RVA: 0xC669F8 Offset: 0xC669F8 VA: 0xC669F8
	private UILabel getQpLabel; // 0x18
	[SerializeField] // RVA: 0xC66A08 Offset: 0xC66A08 VA: 0xC66A08
	private UILabel totalQpLabel; // 0x20
	[SerializeField] // RVA: 0xC66A18 Offset: 0xC66A18 VA: 0xC66A18
	private GameObject eventPointRoot; // 0x28
	[SerializeField] // RVA: 0xC66A28 Offset: 0xC66A28 VA: 0xC66A28
	private GameObject eventDamageRoot; // 0x30
	[SerializeField] // RVA: 0xC66A38 Offset: 0xC66A38 VA: 0xC66A38
	[HeaderAttribute] // RVA: 0xC66A38 Offset: 0xC66A38 VA: 0xC66A38
	private UISprite[] groupIcons; // 0x38
	[SerializeField] // RVA: 0xC66A84 Offset: 0xC66A84 VA: 0xC66A84
	private UILabel[] groupLabels; // 0x40
	[SerializeField] // RVA: 0xC66A94 Offset: 0xC66A94 VA: 0xC66A94
	[HeaderAttribute] // RVA: 0xC66A94 Offset: 0xC66A94 VA: 0xC66A94
	private UISprite[] pointBgSps; // 0x48
	[SerializeField] // RVA: 0xC66AE0 Offset: 0xC66AE0 VA: 0xC66AE0
	private UILabel getTitleLabel; // 0x50
	[SerializeField] // RVA: 0xC66AF0 Offset: 0xC66AF0 VA: 0xC66AF0
	private Transform getLabelRoot; // 0x58
	[SerializeField] // RVA: 0xC66B00 Offset: 0xC66B00 VA: 0xC66B00
	private UILabel totalTitleLabel; // 0x60
	[SerializeField] // RVA: 0xC66B10 Offset: 0xC66B10 VA: 0xC66B10
	private Transform totalLabelRoot; // 0x68
	[SerializeField] // RVA: 0xC66B20 Offset: 0xC66B20 VA: 0xC66B20
	private int titleLabelWidth; // 0x70
	[SerializeField] // RVA: 0xC66B30 Offset: 0xC66B30 VA: 0xC66B30
	private int pointLabelWidth; // 0x74
	[SerializeField] // RVA: 0xC66B40 Offset: 0xC66B40 VA: 0xC66B40
	private int triplePointLabelWidth; // 0x78
	[SerializeField] // RVA: 0xC66B50 Offset: 0xC66B50 VA: 0xC66B50
	private Vector3 groupLabelPosition; // 0x7C
	[SerializeField] // RVA: 0xC66B60 Offset: 0xC66B60 VA: 0xC66B60
	private Vector3 groupIconPosition; // 0x88
	[SerializeField] // RVA: 0xC66B70 Offset: 0xC66B70 VA: 0xC66B70
	private int groupIconSpace; // 0x94

	// Methods

	// RVA: 0x1166498 Offset: 0x1166498 VA: 0x1166498
	public void .ctor() { }

	// RVA: 0x11664A0 Offset: 0x11664A0 VA: 0x11664A0
	public void SetQpInfo(int totalQp, int getQp) { }

	// RVA: 0x11665C4 Offset: 0x11665C4 VA: 0x11665C4
	public void SetGroupPointInfo(int eventId, long userId, UserEventPointEntity[] oldUsrPoint, int[] viewGroupIds) { }

	// RVA: 0x116675C Offset: 0x116675C VA: 0x116675C
	private void SwitchViewMode(long userId, int[] viewGroupIds, UserEventPointEntity[] oldUsrPoint, EventDetailEntity eventDetail) { }

	// RVA: 0x1167994 Offset: 0x1167994 VA: 0x1167994
	private void CommonPointViewFunc(UISprite getSp, UISprite totalSp, UILabel getLabel, UILabel totalLabel, long userId, int eventId, int groupId, long oldPoint = 0) { }

	// RVA: 0x1167CF8 Offset: 0x1167CF8 VA: 0x1167CF8
	public void SetGroupDamageInfo(int eventId, UserEventEntity[] oldUsrEvent, long addDamagePoint, UserGameEntity userGame) { }
}

// Namespace: 
public class BattleResultExpComponent : MonoBehaviour // TypeDefIndex: 9384
{
	// Fields
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public BattleWindowComponent window; // 0x28
	public GameObject figureRoot; // 0x30
	public float time_exptotal; // 0x38
	public UILabel mst_Title; // 0x40
	public UILabel mst_Lv; // 0x48
	public SimpleAnimation mst_LvupSimpleAnim; // 0x50
	public Animation mst_LvupAnim; // 0x58
	public UILabel mst_getexpLabel; // 0x60
	public UILabel mst_atexpLabel; // 0x68
	public UISprite mst_nextSprite; // 0x70
	public UIProgressBar mst_slider; // 0x78
	public GameObject masterLevelupRoot; // 0x80
	public BattleWindowComponent masterupwindow; // 0x88
	public UISprite masterLevelwindowSprite; // 0x90
	public BattleResultMasterUpStatusComponent[] upParamList; // 0x98
	public UISprite[] lvUpRewardSpArray; // 0xA0
	public UILabel[] lvUpRewardLabelArray; // 0xA8
	public UILabel equip_Title; // 0xB0
	public UILabel equip_Lv; // 0xB8
	public SimpleAnimation equip_LvupSimpleAnim; // 0xC0
	public Animation equip_LvupAnim; // 0xC8
	public UILabel equip_nameLabel; // 0xD0
	public UILabel equip_getexpLabel; // 0xD8
	public UILabel equip_atexpLabel; // 0xE0
	public UISprite equip_nextSprite; // 0xE8
	public UIProgressBar equip_slider; // 0xF0
	public GameObject equipLevelupRoot; // 0xF8
	public BattleWindowComponent equipupwindow; // 0x100
	public UISprite eqLevelwindowSprite; // 0x108
	public Transform eqConfRoot; // 0x110
	public UILabel equip_oldlevelLabel; // 0x118
	public UILabel equip_newlevelLabel; // 0x120
	public UILabel equip_confLabel; // 0x128
	public GameObject damageRecordRoot; // 0x130
	public BattleWindowComponent damageRecordWindow; // 0x138
	public SimpleAnimation damage_LvupSimpleAnim; // 0x140
	public Animation damage_LvupAnim; // 0x148
	public UILabel damage_recordLabel; // 0x150
	public UILabel damage_battleLabel; // 0x158
	public UISprite damage_recordRenewalSp; // 0x160
	public Color record_renewalColor; // 0x168
	public Color record_intactColor; // 0x178
	public Color damage_renewalColor; // 0x188
	public Color damage_intactColor; // 0x198
	public BattleResultKnockdownComponent knockdownRecordWindow; // 0x1A8
	private UserGameEntity oldGame; // 0x1B0
	private UserGameEntity newGame; // 0x1B8
	private UserEquipEntity oldEquip; // 0x1C0
	private UserEquipEntity newEquip; // 0x1C8
	private long bestTurnDamage; // 0x1D0
	private long oldRecordDamage; // 0x1D8
	private bool updateFlg; // 0x1E0
	private SePlayer MeterSePlayer; // 0x1E8
	private bool bondsCountUp; // 0x1F0
	private List<UIUnityRenderer> effectUIList; // 0x1F8

	// Methods

	// RVA: 0x1167D50 Offset: 0x1167D50 VA: 0x1167D50
	public void .ctor() { }

	// RVA: 0x115B210 Offset: 0x115B210 VA: 0x115B210
	public void Init() { }

	// RVA: 0x1167DDC Offset: 0x1167DDC VA: 0x1167DDC
	public void setMasterLv(int level) { }

	// RVA: 0x1167F40 Offset: 0x1167F40 VA: 0x1167F40
	public void setEquipLv(int level) { }

	// RVA: 0x115D2B4 Offset: 0x115D2B4 VA: 0x115D2B4
	public void setResultData(UserGameEntity oldGame, UserEquipEntity oldEquip, MasterLvRewardInfo[] masterLvInfoArray, AssetData resultAssetData, long maxTurnDamage, long oldRecord, QuestKnockdownResult knockdownResult) { }

	// RVA: 0x1168C34 Offset: 0x1168C34 VA: 0x1168C34
	private void CreateRewardEffect(AssetData data, UISprite targetIcon, string effectName) { }

	// RVA: 0x11681F0 Offset: 0x11681F0 VA: 0x11681F0
	public bool setMasterExp(long getexp, long nowexp, int start_level) { }

	// RVA: 0x1168660 Offset: 0x1168660 VA: 0x1168660
	public bool setEquipExp(int equipId, int getexp, int nowexp, int start_level) { }

	// RVA: 0x115F1A8 Offset: 0x115F1A8 VA: 0x115F1A8
	public void Open() { }

	// RVA: 0x1168EE8 Offset: 0x1168EE8 VA: 0x1168EE8
	public void Close() { }

	// RVA: 0x1168F7C Offset: 0x1168F7C VA: 0x1168F7C
	public void endClose() { }

	// RVA: 0x1169008 Offset: 0x1169008 VA: 0x1169008
	public void endMoveFigure() { }

	// RVA: 0x11694B0 Offset: 0x11694B0 VA: 0x11694B0
	public void finishUpdateValue() { }

	// RVA: 0x1169528 Offset: 0x1169528 VA: 0x1169528
	public void UpdateValue(float val) { }

	// RVA: 0x1169530 Offset: 0x1169530 VA: 0x1169530
	public void updateValueActual(float val, bool isFinish = False) { }

	// RVA: 0x1169730 Offset: 0x1169730 VA: 0x1169730
	public void checkMasterLevelUp() { }

	// RVA: 0x1169AC4 Offset: 0x1169AC4 VA: 0x1169AC4
	public void endOpenMasterUp() { }

	// RVA: 0x1169B28 Offset: 0x1169B28 VA: 0x1169B28
	public void activeTouch() { }

	// RVA: 0x1169B58 Offset: 0x1169B58 VA: 0x1169B58
	public void closeMasterUp() { }

	// RVA: 0x1169CC8 Offset: 0x1169CC8 VA: 0x1169CC8
	public void endCloseMasterUp() { }

	// RVA: 0x1169D4C Offset: 0x1169D4C VA: 0x1169D4C
	public void checkEquipLevelUp() { }

	// RVA: 0x116A024 Offset: 0x116A024 VA: 0x116A024
	public void endOpenEquipUp() { }

	// RVA: 0x116A054 Offset: 0x116A054 VA: 0x116A054
	public void closeEquipUp() { }

	// RVA: 0x116A104 Offset: 0x116A104 VA: 0x116A104
	public void endCloseEquipUp() { }

	// RVA: 0x116A188 Offset: 0x116A188 VA: 0x116A188
	public void checkDamageRecord() { }

	// RVA: 0x116A43C Offset: 0x116A43C VA: 0x116A43C
	public void endOpenDamageRecord() { }

	// RVA: 0x116A46C Offset: 0x116A46C VA: 0x116A46C
	public void closeDamageRecord() { }

	// RVA: 0x116A51C Offset: 0x116A51C VA: 0x116A51C
	public void endCloseDamageRecord() { }

	// RVA: 0x116A5A0 Offset: 0x116A5A0 VA: 0x116A5A0
	public void checkOpenKnockdownRecord() { }

	// RVA: 0x116A688 Offset: 0x116A688 VA: 0x116A688
	public void closeKnockdownRecord() { }
}

// Namespace: 
private enum BattleResultExpComponent.ParamList // TypeDefIndex: 9385
{
	// Fields
	public int value__; // 0x0
	public const BattleResultExpComponent.ParamList MASTER_LEVEL = 0;
	public const BattleResultExpComponent.ParamList AP = 1;
	public const BattleResultExpComponent.ParamList COST = 2;
	public const BattleResultExpComponent.ParamList FRIENDKEEP = 3;
	public const BattleResultExpComponent.ParamList FULL_AP = 4;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44544 Offset: 0xC44544 VA: 0xC44544
private sealed class BattleResultExpComponent.<setResultData>c__AnonStorey0 // TypeDefIndex: 9386
{
	// Fields
	internal UserGameEntity oldGame; // 0x10
	internal MasterLvRewardInfo[] masterLvInfoArray; // 0x18
	internal BattleResultExpComponent $this; // 0x20

	// Methods

	// RVA: 0x11680A4 Offset: 0x11680A4 VA: 0x11680A4
	public void .ctor() { }

	// RVA: 0x116A72C Offset: 0x116A72C VA: 0x116A72C
	internal int <>m__0(float height, int baseHeight) { }
}

// Namespace: 
public class BattleResultFriendComponent : BaseMonoBehaviour // TypeDefIndex: 9387
{
	// Fields
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public GameObject root; // 0x28
	public UILabel countLabel; // 0x30
	public UILabel titleLabel; // 0x38
	public UILabel errLabel; // 0x40
	public UIButton centerButton; // 0x48
	public FriendIconComponent friendIconComp; // 0x50
	public UILabel centerButtonLabel; // 0x58
	public UILabel leftButtonLabel; // 0x60
	public UILabel confLabel; // 0x68
	public UIButton rightButton; // 0x70
	public UILabel rightButtonLabel; // 0x78
	public GameObject followCountRoot; // 0x80
	public UILabel followCountLabel; // 0x88
	public UIButton helpButton; // 0x90
	public UILabel friendWarningLabel; // 0x98
	public GameObject countRoot; // 0xA0
	public UIGrid countGrid; // 0xA8
	public UIButton leftButton; // 0xB0
	public UISprite centerMarkSprite; // 0xB8
	public UISprite rightMarkSprite; // 0xC0
	private OtherUserGameEntity otherUser; // 0xC8
	private Follower.Type followerType; // 0xD0
	private int followerStatus; // 0xD4
	private int followerClassId; // 0xD8
	private int followerDeckId; // 0xDC
	private int dispClassId; // 0xE0
	private long targetId; // 0xE8
	private bool enableFollowQuest; // 0xF0
	private readonly float offsetPosition; // 0xF4
	private static readonly float offsetOfferLabelPosition; // 0x0
	private static readonly float offsetFollowMarkPosition; // 0x4
	private OtherUserGameEntity.ReturnSupportServantType displayServantType; // 0xF8
	public ClassButtonControlComponent classButtonControl; // 0x100
	[SerializeField] // RVA: 0xC66B80 Offset: 0xC66B80 VA: 0xC66B80
	private GameObject followTutorialMask; // 0x108
	[SerializeField] // RVA: 0xC66B90 Offset: 0xC66B90 VA: 0xC66B90
	private UIButton followTutorialButton; // 0x110
	[SerializeField] // RVA: 0xC66BA0 Offset: 0xC66BA0 VA: 0xC66BA0
	private UILabel followTutorialLabel; // 0x118
	private Action releasePerformanceObject; // 0x120

	// Methods

	// RVA: 0x116B4E0 Offset: 0x116B4E0 VA: 0x116B4E0
	public void .ctor() { }

	// RVA: 0x115B8B4 Offset: 0x115B8B4 VA: 0x115B8B4
	public void Init(Action releasePerformanceObject) { }

	// RVA: 0x115ECAC Offset: 0x115ECAC VA: 0x115ECAC
	public void setResultData(int infollowerType, int infollowerStatus, long followerId, int infollowerClassId, int followerDeckId, bool enableFollow) { }

	// RVA: 0x116B4F0 Offset: 0x116B4F0 VA: 0x116B4F0
	public void onChangeClass(int classPos) { }

	// RVA: 0x116B570 Offset: 0x116B570 VA: 0x116B570
	public void changeClass(int classPos) { }

	// RVA: 0x115FB68 Offset: 0x115FB68 VA: 0x115FB68
	public void Open() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE788 Offset: 0xCCE788 VA: 0xCCE788
	// RVA: 0x116B5E0 Offset: 0x116B5E0 VA: 0x116B5E0
	private IEnumerator ChangeFaceAtlas() { }

	// RVA: 0x116B650 Offset: 0x116B650 VA: 0x116B650
	private void openCore() { }

	// RVA: 0x116BFB8 Offset: 0x116BFB8 VA: 0x116BFB8
	private void OtherUserChangeLimitCountBySpoilerProtection() { }

	// RVA: 0x116C220 Offset: 0x116C220 VA: 0x116C220
	public void ServantConfClick() { }

	// RVA: 0x116C11C Offset: 0x116C11C VA: 0x116C11C
	public int getExistLeaderInfo(int firstClassId) { }

	// RVA: 0x116C284 Offset: 0x116C284 VA: 0x116C284
	public void ShowServantConf() { }

	// RVA: 0x116C41C Offset: 0x116C41C VA: 0x116C41C
	public void EndShowServant(bool flg) { }

	// RVA: 0x116C3B8 Offset: 0x116C3B8 VA: 0x116C3B8
	public void endCloseSHowServant() { }

	// RVA: 0x116C4C0 Offset: 0x116C4C0 VA: 0x116C4C0
	public void OnClickFriend() { }

	// RVA: 0x116C524 Offset: 0x116C524 VA: 0x116C524
	public void OnClickNoActionFriend() { }

	// RVA: 0x116C588 Offset: 0x116C588 VA: 0x116C588
	public void OnClickNo() { }

	// RVA: 0x116C5EC Offset: 0x116C5EC VA: 0x116C5EC
	public void OnClickFollow() { }

	// RVA: 0x116C650 Offset: 0x116C650 VA: 0x116C650
	public void OnClickTutorialFollow() { }

	// RVA: 0x116C720 Offset: 0x116C720 VA: 0x116C720
	public void friendOffer() { }

	// RVA: 0x116C808 Offset: 0x116C808 VA: 0x116C808
	private void EndRequestFriend(string result) { }

	// RVA: 0x116CAC4 Offset: 0x116CAC4 VA: 0x116CAC4
	public void followAssign() { }

	// RVA: 0x116CBAC Offset: 0x116CBAC VA: 0x116CBAC
	private void EndRequestFollow(string result) { }

	// RVA: 0x116CE68 Offset: 0x116CE68 VA: 0x116CE68
	protected void OnEndRequestDialog(bool isDecide) { }

	// RVA: 0x116CEF4 Offset: 0x116CEF4 VA: 0x116CEF4
	public void OnClickSupportInfo() { }

	// RVA: 0x116CF58 Offset: 0x116CF58 VA: 0x116CF58
	public void ChangeSupportScene() { }

	// RVA: 0x116D1C0 Offset: 0x116D1C0 VA: 0x116D1C0
	public void callBackBeginResume() { }

	// RVA: 0x116BC68 Offset: 0x116BC68 VA: 0x116BC68
	private void Layout(bool isActiveFollow, bool isActiveFriend) { }

	// RVA: 0x116D224 Offset: 0x116D224 VA: 0x116D224
	private void SetupButtons(bool isActiveFollow, bool isActiveFriend) { }

	// RVA: 0x116D87C Offset: 0x116D87C VA: 0x116D87C
	public void OnClickHelp() { }

	// RVA: 0x116D8F4 Offset: 0x116D8F4 VA: 0x116D8F4
	private void OpenHelpDialog() { }

	// RVA: 0x116D908 Offset: 0x116D908 VA: 0x116D908
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44554 Offset: 0xC44554 VA: 0xC44554
private sealed class BattleResultFriendComponent.<ChangeFaceAtlas>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9388
{
	// Fields
	internal WaitForEndOfFrame <waitForEndOfFrame>__0; // 0x10
	internal BattleResultFriendComponent $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C
	private BattleResultFriendComponent.<ChangeFaceAtlas>c__Iterator0.<ChangeFaceAtlas>c__AnonStorey1 $locvar0; // 0x30

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBE00 Offset: 0xCDBE00 VA: 0xCDBE00
	// RVA: 0x116BC60 Offset: 0x116BC60 VA: 0x116BC60
	public void .ctor() { }

	// RVA: 0x116D96C Offset: 0x116D96C VA: 0x116D96C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBE10 Offset: 0xCDBE10 VA: 0xCDBE10
	// RVA: 0x116DC74 Offset: 0x116DC74 VA: 0x116DC74 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBE20 Offset: 0xCDBE20 VA: 0xCDBE20
	// RVA: 0x116DC7C Offset: 0x116DC7C VA: 0x116DC7C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBE30 Offset: 0xCDBE30 VA: 0xCDBE30
	// RVA: 0x116DC84 Offset: 0x116DC84 VA: 0x116DC84 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBE40 Offset: 0xCDBE40 VA: 0xCDBE40
	// RVA: 0x116DC98 Offset: 0x116DC98 VA: 0x116DC98 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattleResultFriendComponent.<ChangeFaceAtlas>c__Iterator0.<ChangeFaceAtlas>c__AnonStorey1 // TypeDefIndex: 9389
{
	// Fields
	internal bool isWait; // 0x10
	internal BattleResultFriendComponent.<ChangeFaceAtlas>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x116DC6C Offset: 0x116DC6C VA: 0x116DC6C
	public void .ctor() { }

	// RVA: 0x116DD00 Offset: 0x116DD00 VA: 0x116DD00
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44564 Offset: 0xC44564 VA: 0xC44564
private sealed class BattleResultFriendComponent.<openCore>c__AnonStorey2 // TypeDefIndex: 9390
{
	// Fields
	internal bool isFollowTutorial; // 0x10
	internal BattleResultFriendComponent $this; // 0x18

	// Methods

	// RVA: 0x116C218 Offset: 0x116C218 VA: 0x116C218
	public void .ctor() { }

	// RVA: 0x116DD08 Offset: 0x116DD08 VA: 0x116DD08
	internal void <>m__0() { }
}

// Namespace: 
public class BattleResultItemComponent : BaseMonoBehaviour // TypeDefIndex: 9391
{
	// Fields
	private static readonly string EP_SP_BASE_NAME; // 0x0
	private static readonly string DP_SP_BASE_NAME; // 0x8
	private static readonly float EP_GET_POSY_NORMAL; // 0x10
	private static readonly float EP_GET_POSY_BOOSTED; // 0x14
	private static readonly int EP_GET_FONT_NORMAL; // 0x18
	private static readonly int EP_GET_FONT_BOOSTED; // 0x1C
	private static readonly string EP_GET_LOCALE_KEY; // 0x20
	private static readonly int GET_TITLE_LABEL_MAX_WIDTH; // 0x28
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public BattleWindowComponent window; // 0x28
	public BattleViewItemlistComponent itemWindow; // 0x30
	public GameObject touchNextRoot; // 0x38
	public UILabel titleConfLabel; // 0x40
	public UILabel getQpLabel; // 0x48
	public UILabel nowQpLabel; // 0x50
	public GameObject rootEventPoint; // 0x58
	public UISprite eventIconSprite; // 0x60
	public UISprite eventPointBgSprite; // 0x68
	public UILabel getEventPointLabel; // 0x70
	public UILabel nowEventPointLabel; // 0x78
	public UILabel getTitleLabel; // 0x80
	public UILabel getBoostLabel; // 0x88
	public UISprite eventPointMaxSprite; // 0x90
	public GameObject rootEventDamagePoint; // 0x98
	public UISprite eventDamageIconSprite; // 0xA0
	public UISprite eventDamageBGSprite; // 0xA8
	public UILabel getEventDamagePointLabel; // 0xB0
	public UILabel nowEventDamagePointLabel; // 0xB8
	public ItemDetailInfoComponent itemDialog; // 0xC0
	protected List<BattleDropItem> newDroplist; // 0xC8
	public int itemColumnCount; // 0xD0
	public GameObject nomalRootObj; // 0xD8
	public BattleResultEventItemGroupComponent groupRootObj; // 0xE0
	public UIButton showModeChangeButton; // 0xE8
	public UILabel showModeChangeButtonLabel; // 0xF0
	public Color[] showModeChanButtonLabelEffectColors; // 0xF8
	private bool isShowPossessionNum; // 0x100
	private long tmp_userSvtId; // 0x108
	private int tmp_svtId; // 0x110
	private int tmp_itemId; // 0x114
	private long tmp_commandCodeId; // 0x118
	[CompilerGeneratedAttribute] // RVA: 0xC66BB0 Offset: 0xC66BB0 VA: 0xC66BB0
	private static Predicate<BattleDropItem> <>f__am$cache0; // 0x30

	// Methods

	// RVA: 0x116E008 Offset: 0x116E008 VA: 0x116E008
	public void .ctor() { }

	// RVA: 0x115B57C Offset: 0x115B57C VA: 0x115B57C
	public void Init() { }

	// RVA: 0x115F8FC Offset: 0x115F8FC VA: 0x115F8FC
	public void Open() { }

	// RVA: 0x116E0F0 Offset: 0x116E0F0 VA: 0x116E0F0
	public void endOpen() { }

	// RVA: 0x115E45C Offset: 0x115E45C VA: 0x115E45C
	public void setResultData(BattleDropItem[] drop, int getqp, int originalGetQp, UserGameEntity oldGame, int eventId, UserEventEntity[] oldUsrEvent, UserEventPointEntity[] oldUsrPoint, long addDamagePoint, int[] viewGroupIds, int boostRate, DropUpInfo[] dropupinfos, EventConquestInfo[] eventConquestInfos, int firstClearRewardQp, bool isNotDisplayEventPoint) { }

	// RVA: 0x116E180 Offset: 0x116E180 VA: 0x116E180
	private void SetGroupEventRoot(int eventId, UserEventEntity[] oldUsrEvent, UserEventPointEntity[] oldUsrPoint, long addDamagePoint, UserGameEntity userGame, int countQp, int[] viewGroupIds, int conquestRewardQp) { }

	// RVA: 0x116E284 Offset: 0x116E284 VA: 0x116E284
	private void SetNomalRoot(int eventId, UserEventPointEntity[] oldUsrPoint, long addDamagePoint, UserGameEntity userGame, int countQp, int boostRate, int conquestRewardQp, int firstClearRewardQp, UserGameEntity oldGame, bool isNotDisplayEventPoint) { }

	// RVA: 0x116E5D4 Offset: 0x116E5D4 VA: 0x116E5D4
	private void setEventInfo(int eventId, UserEventPointEntity[] oldUsrPoint, long addDamagePoint, int boostRate, int firstClearRewardQp, int countQp, bool isNotDisplayEventPoint) { }

	// RVA: 0x116F270 Offset: 0x116F270 VA: 0x116F270
	public void setShowConf(BattleDropItem item) { }

	// RVA: 0x116F320 Offset: 0x116F320 VA: 0x116F320
	public void setShowServantConf(BattleDropItem dropItem) { }

	// RVA: 0x116F4CC Offset: 0x116F4CC VA: 0x116F4CC
	public void showServantDialog() { }

	// RVA: 0x116F5E8 Offset: 0x116F5E8 VA: 0x116F5E8
	public void DialogCallBack(bool flg) { }

	// RVA: 0x116F68C Offset: 0x116F68C VA: 0x116F68C
	public void EndCloseDialogCallBack() { }

	// RVA: 0x116F3E4 Offset: 0x116F3E4 VA: 0x116F3E4
	public void setShowItemConf(int itemId) { }

	// RVA: 0x116F6F0 Offset: 0x116F6F0 VA: 0x116F6F0
	public void showItemDialog() { }

	// RVA: 0x116F7EC Offset: 0x116F7EC VA: 0x116F7EC
	public void itemDialogCallBack(bool flg) { }

	// RVA: 0x116F8A8 Offset: 0x116F8A8 VA: 0x116F8A8
	public void endItemDialogCallBack() { }

	// RVA: 0x116F458 Offset: 0x116F458 VA: 0x116F458
	public void setShowCommandCodeConf(long commandCodeId) { }

	// RVA: 0x116F90C Offset: 0x116F90C VA: 0x116F90C
	public void showCommandCodeDialog() { }

	// RVA: 0x116FA18 Offset: 0x116FA18 VA: 0x116FA18
	public void commandCodeDialogCallBack(bool flg) { }

	// RVA: 0x116FABC Offset: 0x116FABC VA: 0x116FABC
	public void endCommandCodeDialogCallBack() { }

	// RVA: 0x116FB20 Offset: 0x116FB20 VA: 0x116FB20
	public void Close() { }

	// RVA: 0x116FBD0 Offset: 0x116FBD0 VA: 0x116FBD0
	public void endClose() { }

	// RVA: 0x116061C Offset: 0x116061C VA: 0x116061C
	public BattleDropItem getNewDrop() { }

	// RVA: 0x116FC78 Offset: 0x116FC78 VA: 0x116FC78
	public void OnClickSwitchShowMode() { }

	// RVA: 0x116E068 Offset: 0x116E068 VA: 0x116E068
	private void setCondensedScale() { }

	// RVA: 0x116F154 Offset: 0x116F154 VA: 0x116F154
	private bool GetIsShowEventPointMax(EventDetailEntity eventDetailEntity, long userEventPoint) { }

	// RVA: 0x116FDCC Offset: 0x116FDCC VA: 0x116FDCC
	private int GetEventPointUpperPriority(int eventPointUpperId) { }

	// RVA: 0x117022C Offset: 0x117022C VA: 0x117022C
	private Dictionary<int, List<EventPointUpperReleaseEntity>> GetEventPointUpperReleases(EventPointUpperReleaseEntity[] entities) { }

	// RVA: 0x1170150 Offset: 0x1170150 VA: 0x1170150
	private long GetEventPointUpperValue(int priority, EventPointUpperEntity[] entities) { }

	// RVA: 0x11703C8 Offset: 0x11703C8 VA: 0x11703C8
	private bool GetIsAndCondGroup(EventPointUpperReleaseEntity[] entities) { }

	// RVA: 0x117045C Offset: 0x117045C VA: 0x117045C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE798 Offset: 0xCCE798 VA: 0xCCE798
	// RVA: 0x1170514 Offset: 0x1170514 VA: 0x1170514
	private static bool <setResultData>m__0(BattleDropItem s) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44574 Offset: 0xC44574 VA: 0xC44574
private sealed class BattleResultItemComponent.<setResultData>c__AnonStorey0 // TypeDefIndex: 9392
{
	// Fields
	internal List<BattleDropItem> list; // 0x10

	// Methods

	// RVA: 0x116E170 Offset: 0x116E170 VA: 0x116E170
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44584 Offset: 0xC44584 VA: 0xC44584
private sealed class BattleResultItemComponent.<setResultData>c__AnonStorey1 // TypeDefIndex: 9393
{
	// Fields
	internal int i; // 0x10
	internal BattleResultItemComponent.<setResultData>c__AnonStorey0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x116E178 Offset: 0x116E178 VA: 0x116E178
	public void .ctor() { }

	// RVA: 0x1170570 Offset: 0x1170570 VA: 0x1170570
	internal bool <>m__0(DropUpInfo e) { }
}

// Namespace: 
public class BattleResultKnockdownComponent : BattleResultPopupWindowComponent // TypeDefIndex: 9394
{
	// Fields
	[HeaderAttribute] // RVA: 0xC66BC0 Offset: 0xC66BC0 VA: 0xC66BC0
	public UILabel[] battleLabels; // 0x88
	public UILabel[] recordLabels; // 0x90
	[HeaderAttribute] // RVA: 0xC66BF8 Offset: 0xC66BF8 VA: 0xC66BF8
	public Color[] battleColor; // 0x98
	public Color[] recordColor; // 0xA0
	public UISprite recordRenewalSp; // 0xA8

	// Methods

	// RVA: 0x1170620 Offset: 0x1170620 VA: 0x1170620
	public void .ctor() { }

	// RVA: 0x11680AC Offset: 0x11680AC VA: 0x11680AC
	public void setData(QuestKnockdownResult result) { }

	// RVA: 0x11707B0 Offset: 0x11707B0 VA: 0x11707B0
	private void setKnockdownInfoLabel(UILabel[] labelArray, QuestKnockdownInfo info, Color color) { }
}

// Namespace: 
protected enum BattleResultKnockdownComponent.ColorType // TypeDefIndex: 9395
{
	// Fields
	public int value__; // 0x0
	public const BattleResultKnockdownComponent.ColorType Normal = 0;
	public const BattleResultKnockdownComponent.ColorType NewRecord = 1;
	public const BattleResultKnockdownComponent.ColorType Term = 2;
}

// Namespace: 
public class BattleResultMasterUpStatusComponent : MonoBehaviour // TypeDefIndex: 9396
{
	// Fields
	public UILabel titleParamLabel; // 0x18
	public UILabel oldParamLabel; // 0x20
	public UILabel newParamLabel; // 0x28

	// Methods

	// RVA: 0x1170A40 Offset: 0x1170A40 VA: 0x1170A40
	public void .ctor() { }

	// RVA: 0x116B3E4 Offset: 0x116B3E4 VA: 0x116B3E4
	public void setTitle(string key) { }

	// RVA: 0x1168A7C Offset: 0x1168A7C VA: 0x1168A7C
	public void setData(int oldVal, int newVal) { }
}

// Namespace: 
public class BattleResultPopupWindowComponent : BattleWindowComponent // TypeDefIndex: 9397
{
	// Fields
	public BattleResultComponent ownerComp; // 0x48
	public PlayMakerFSM notifyFsm; // 0x50
	public GameObject rootObj; // 0x58
	public SimpleAnimation titleSimpleAnim; // 0x60
	public Animation titleAnim; // 0x68
	protected BattleWindowComponent.EndCall callbackOpen; // 0x70
	protected BattleWindowComponent.EndCall callbackClose; // 0x78
	protected bool isOpenPossible; // 0x80

	// Methods

	// RVA: 0x11707A8 Offset: 0x11707A8 VA: 0x11707A8
	public void .ctor() { }

	// RVA: 0x1170A48 Offset: 0x1170A48 VA: 0x1170A48 Slot: 14
	public virtual void InitPopup() { }

	// RVA: 0x1170AB0 Offset: 0x1170AB0 VA: 0x1170AB0 Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1170B6C Offset: 0x1170B6C VA: 0x1170B6C Slot: 15
	protected virtual void OpenPreProcess() { }

	// RVA: 0x1170F34 Offset: 0x1170F34 VA: 0x1170F34 Slot: 16
	protected virtual void EndOpenCallback() { }

	// RVA: 0x1170F84 Offset: 0x1170F84 VA: 0x1170F84 Slot: 17
	protected virtual void OpenedPostProcess() { }

	// RVA: 0x1170FE8 Offset: 0x1170FE8 VA: 0x1170FE8 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x11710A4 Offset: 0x11710A4 VA: 0x11710A4 Slot: 18
	protected virtual void ClosePreProcess() { }

	// RVA: 0x11710D4 Offset: 0x11710D4 VA: 0x11710D4 Slot: 19
	protected virtual void EndCloseCallback() { }

	// RVA: 0x1171204 Offset: 0x1171204 VA: 0x1171204 Slot: 20
	protected virtual void ClosedPostProcess() { }

	// RVA: 0x116A680 Offset: 0x116A680 VA: 0x116A680
	public bool IsOpenPossible() { }

	// RVA: 0x1171154 Offset: 0x1171154 VA: 0x1171154
	protected void SendFsmEvent(string eventName = "END_PROC") { }

	// RVA: 0x1170C4C Offset: 0x1170C4C VA: 0x1170C4C
	protected bool PlayTargetSimpleAnimation(SimpleAnimation anim, string clipName = "") { }

	// RVA: 0x1170DF0 Offset: 0x1170DF0 VA: 0x1170DF0
	protected void PlayTargetAnimation(Animation anim, string clipName = "") { }
}

// Namespace: 
public class BattleRetryConfirmComponent : BaseMonoBehaviour // TypeDefIndex: 9398
{
	// Fields
	private readonly Vector3 CONFIRM_BUTTON_POSITION_ON_THREE; // 0x18
	private readonly Vector3 CANCEL_BUTTON_POSITION_ON_THREE; // 0x24
	[SerializeField] // RVA: 0xC66C30 Offset: 0xC66C30 VA: 0xC66C30
	private BattleResultComponent battleResultComponent; // 0x30
	[SerializeField] // RVA: 0xC66C40 Offset: 0xC66C40 VA: 0xC66C40
	private GameObject root; // 0x38
	[SerializeField] // RVA: 0xC66C50 Offset: 0xC66C50 VA: 0xC66C50
	private BattleWindowComponent window; // 0x40
	[SerializeField] // RVA: 0xC66C60 Offset: 0xC66C60 VA: 0xC66C60
	private UILabel mainText; // 0x48
	[SerializeField] // RVA: 0xC66C70 Offset: 0xC66C70 VA: 0xC66C70
	private UILabel cancelLabel; // 0x50
