
// Namespace: 
public enum OSX509Certificates.SecTrustResult // TypeDefIndex: 1642
{
	// Fields
	public int value__; // 0x0
	public const OSX509Certificates.SecTrustResult Invalid = 0;
	public const OSX509Certificates.SecTrustResult Proceed = 1;
	public const OSX509Certificates.SecTrustResult Confirm = 2;
	public const OSX509Certificates.SecTrustResult Deny = 3;
	public const OSX509Certificates.SecTrustResult Unspecified = 4;
	public const OSX509Certificates.SecTrustResult RecoverableTrustFailure = 5;
	public const OSX509Certificates.SecTrustResult FatalTrustFailure = 6;
	public const OSX509Certificates.SecTrustResult ResultOtherError = 7;
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xBD09F4 Offset: 0xBD09F4 VA: 0xBD09F4
public enum OpenFlags // TypeDefIndex: 1643
{
	// Fields
	public int value__; // 0x0
	public const OpenFlags ReadOnly = 0;
	public const OpenFlags ReadWrite = 1;
	public const OpenFlags MaxAllowed = 2;
	public const OpenFlags OpenExistingOnly = 4;
	public const OpenFlags IncludeArchived = 8;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class PublicKey // TypeDefIndex: 1644
{
	// Fields
	private const string rsaOid = "1.2.840.113549.1.1.1";
	private const string dsaOid = "1.2.840.10040.4.1";
	private AsymmetricAlgorithm _key; // 0x10
	private AsnEncodedData _keyValue; // 0x18
	private AsnEncodedData _params; // 0x20
	private Oid _oid; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xBD0FAC Offset: 0xBD0FAC VA: 0xBD0FAC
	private static Dictionary<string, int> <>f__switch$map9; // 0x0

	// Properties
	public AsnEncodedData EncodedKeyValue { get; }
	public AsnEncodedData EncodedParameters { get; }
	public AsymmetricAlgorithm Key { get; }
	public Oid Oid { get; }

	// Methods

	// RVA: 0x22FC19C Offset: 0x22FC19C VA: 0x22FC19C
	public void .ctor(Oid oid, AsnEncodedData parameters, AsnEncodedData keyValue) { }

	// RVA: 0x22FC2E4 Offset: 0x22FC2E4 VA: 0x22FC2E4
	internal void .ctor(X509Certificate certificate) { }

	// RVA: 0x22FC760 Offset: 0x22FC760 VA: 0x22FC760
	public AsnEncodedData get_EncodedKeyValue() { }

	// RVA: 0x22FC768 Offset: 0x22FC768 VA: 0x22FC768
	public AsnEncodedData get_EncodedParameters() { }

	// RVA: 0x22FC770 Offset: 0x22FC770 VA: 0x22FC770
	public AsymmetricAlgorithm get_Key() { }

	// RVA: 0x22FD2EC Offset: 0x22FD2EC VA: 0x22FD2EC
	public Oid get_Oid() { }

	// RVA: 0x22FD2F4 Offset: 0x22FD2F4 VA: 0x22FD2F4
	private static byte[] GetUnsignedBigInteger(byte[] integer) { }

	// RVA: 0x22FCDD4 Offset: 0x22FCDD4 VA: 0x22FCDD4
	internal static DSA DecodeDSA(byte[] rawPublicKey, byte[] rawParameters) { }

	// RVA: 0x22FC9F8 Offset: 0x22FC9F8 VA: 0x22FC9F8
	internal static RSA DecodeRSA(byte[] rawPublicKey) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum StoreLocation // TypeDefIndex: 1645
{
	// Fields
	public int value__; // 0x0
	public const StoreLocation CurrentUser = 1;
	public const StoreLocation LocalMachine = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum StoreName // TypeDefIndex: 1646
{
	// Fields
	public int value__; // 0x0
	public const StoreName AddressBook = 1;
	public const StoreName AuthRoot = 2;
	public const StoreName CertificateAuthority = 3;
	public const StoreName Disallowed = 4;
	public const StoreName My = 5;
	public const StoreName Root = 6;
	public const StoreName TrustedPeople = 7;
	public const StoreName TrustedPublisher = 8;
}

// Namespace: System.Security.Cryptography.X509Certificates
[MonoTODOAttribute] // RVA: 0xBD0A04 Offset: 0xBD0A04 VA: 0xBD0A04
public sealed class X500DistinguishedName : AsnEncodedData // TypeDefIndex: 1647
{
	// Fields
	private const X500DistinguishedNameFlags AllFlags = 29169;
	private string name; // 0x20

	// Properties
	public string Name { get; }

	// Methods

	// RVA: 0x22FD3AC Offset: 0x22FD3AC VA: 0x22FD3AC
	public void .ctor(AsnEncodedData encodedDistinguishedName) { }

	// RVA: 0x22FD5A8 Offset: 0x22FD5A8 VA: 0x22FD5A8
	public void .ctor(byte[] encodedDistinguishedName) { }

	// RVA: 0x22FD6CC Offset: 0x22FD6CC VA: 0x22FD6CC
	public void .ctor(string distinguishedName) { }

	// RVA: 0x22FD6D4 Offset: 0x22FD6D4 VA: 0x22FD6D4
	public void .ctor(string distinguishedName, X500DistinguishedNameFlags flag) { }

	// RVA: 0x22FDAC4 Offset: 0x22FDAC4 VA: 0x22FDAC4
	public void .ctor(X500DistinguishedName distinguishedName) { }

	// RVA: 0x22FDBA0 Offset: 0x22FDBA0 VA: 0x22FDBA0
	public string get_Name() { }

	// RVA: 0x22FD964 Offset: 0x22FD964 VA: 0x22FD964
	public string Decode(X500DistinguishedNameFlags flag) { }

	// RVA: 0x22FDC1C Offset: 0x22FDC1C VA: 0x22FDC1C Slot: 5
	public override string Format(bool multiLine) { }

	// RVA: 0x22FDBA8 Offset: 0x22FDBA8 VA: 0x22FDBA8
	private static string GetSeparator(X500DistinguishedNameFlags flag) { }

	// RVA: 0x22FD4B8 Offset: 0x22FD4B8 VA: 0x22FD4B8
	private void DecodeRawData() { }

	// RVA: 0x22FDD00 Offset: 0x22FDD00 VA: 0x22FDD00
	private static string Canonize(string s) { }

	// RVA: 0x22FDF48 Offset: 0x22FDF48 VA: 0x22FDF48
	internal static bool AreEqual(X500DistinguishedName name1, X500DistinguishedName name2) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xBD0A3C Offset: 0xBD0A3C VA: 0xBD0A3C
public enum X500DistinguishedNameFlags // TypeDefIndex: 1648
{
	// Fields
	public int value__; // 0x0
	public const X500DistinguishedNameFlags None = 0;
	public const X500DistinguishedNameFlags Reversed = 1;
	public const X500DistinguishedNameFlags UseSemicolons = 16;
	public const X500DistinguishedNameFlags DoNotUsePlusSign = 32;
	public const X500DistinguishedNameFlags DoNotUseQuotes = 64;
	public const X500DistinguishedNameFlags UseCommas = 128;
	public const X500DistinguishedNameFlags UseNewLines = 256;
	public const X500DistinguishedNameFlags UseUTF8Encoding = 4096;
	public const X500DistinguishedNameFlags UseT61Encoding = 8192;
	public const X500DistinguishedNameFlags ForceUTF8Encoding = 16384;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509BasicConstraintsExtension : X509Extension // TypeDefIndex: 1649
{
	// Fields
	internal const string oid = "2.5.29.19";
	internal const string friendlyName = "Basic Constraints";
	private bool _certificateAuthority; // 0x21
	private bool _hasPathLengthConstraint; // 0x22
	private int _pathLengthConstraint; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Properties
	public bool CertificateAuthority { get; }
	public bool HasPathLengthConstraint { get; }
	public int PathLengthConstraint { get; }

	// Methods

	// RVA: 0x22FE16C Offset: 0x22FE16C VA: 0x22FE16C
	public void .ctor() { }

	// RVA: 0x22F9D48 Offset: 0x22F9D48 VA: 0x22F9D48
	public void .ctor(AsnEncodedData encodedBasicConstraints, bool critical) { }

	// RVA: 0x22FE438 Offset: 0x22FE438 VA: 0x22FE438
	public void .ctor(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical) { }

	// RVA: 0x22FE6D8 Offset: 0x22FE6D8 VA: 0x22FE6D8
	public bool get_CertificateAuthority() { }

	// RVA: 0x22FE770 Offset: 0x22FE770 VA: 0x22FE770
	public bool get_HasPathLengthConstraint() { }

	// RVA: 0x22FE808 Offset: 0x22FE808 VA: 0x22FE808
	public int get_PathLengthConstraint() { }

	// RVA: 0x22FE8A0 Offset: 0x22FE8A0 VA: 0x22FE8A0 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x22FE210 Offset: 0x22FE210 VA: 0x22FE210
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x22FE558 Offset: 0x22FE558 VA: 0x22FE558
	internal byte[] Encode() { }

	// RVA: 0x22F9E10 Offset: 0x22F9E10 VA: 0x22F9E10 Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate2 : X509Certificate // TypeDefIndex: 1650
{
	// Fields
	private bool _archived; // 0x38
	private X509ExtensionCollection _extensions; // 0x40
	private string _name; // 0x48
	private string _serial; // 0x50
	private PublicKey _publicKey; // 0x58
	private X500DistinguishedName issuer_name; // 0x60
	private X500DistinguishedName subject_name; // 0x68
	private Oid signature_algorithm; // 0x70
	private X509Certificate _cert; // 0x78
	private static string empty_error; // 0x0
	private static byte[] commonName; // 0x8
	private static byte[] email; // 0x10
	private static byte[] signedData; // 0x18

	// Properties
	public bool Archived { get; set; }
	public X509ExtensionCollection Extensions { get; }
	public string FriendlyName { get; set; }
	public bool HasPrivateKey { get; }
	public X500DistinguishedName IssuerName { get; }
	public DateTime NotAfter { get; }
	public DateTime NotBefore { get; }
	public AsymmetricAlgorithm PrivateKey { get; set; }
	public PublicKey PublicKey { get; }
	public byte[] RawData { get; }
	public string SerialNumber { get; }
	public Oid SignatureAlgorithm { get; }
	public X500DistinguishedName SubjectName { get; }
	public string Thumbprint { get; }
	public int Version { get; }
	internal X509Certificate MonoCertificate { get; }

	// Methods

	// RVA: 0x22FEB90 Offset: 0x22FEB90 VA: 0x22FEB90
	public void .ctor() { }

	// RVA: 0x22FEC10 Offset: 0x22FEC10 VA: 0x22FEC10
	public void .ctor(byte[] rawData) { }

	// RVA: 0x22FECB4 Offset: 0x22FECB4 VA: 0x22FECB4
	public void .ctor(byte[] rawData, string password) { }

	// RVA: 0x22FED5C Offset: 0x22FED5C VA: 0x22FED5C
	public void .ctor(byte[] rawData, SecureString password) { }

	// RVA: 0x22FEE04 Offset: 0x22FEE04 VA: 0x22FEE04
	public void .ctor(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x22FEEB8 Offset: 0x22FEEB8 VA: 0x22FEEB8
	public void .ctor(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x22FEF6C Offset: 0x22FEF6C VA: 0x22FEF6C
	public void .ctor(string fileName) { }

	// RVA: 0x22FF018 Offset: 0x22FF018 VA: 0x22FF018
	public void .ctor(string fileName, string password) { }

	// RVA: 0x22FF0C0 Offset: 0x22FF0C0 VA: 0x22FF0C0
	public void .ctor(string fileName, SecureString password) { }

	// RVA: 0x22FF168 Offset: 0x22FF168 VA: 0x22FF168
	public void .ctor(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x22FF21C Offset: 0x22FF21C VA: 0x22FF21C
	public void .ctor(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x22FF2D0 Offset: 0x22FF2D0 VA: 0x22FF2D0
	public void .ctor(IntPtr handle) { }

	// RVA: 0x22FF394 Offset: 0x22FF394 VA: 0x22FF394
	public void .ctor(X509Certificate certificate) { }

	// RVA: 0x22FF458 Offset: 0x22FF458 VA: 0x22FF458
	private static void .cctor() { }

	// RVA: 0x22FF5B8 Offset: 0x22FF5B8 VA: 0x22FF5B8
	public bool get_Archived() { }

	// RVA: 0x22FF66C Offset: 0x22FF66C VA: 0x22FF66C
	public void set_Archived(bool value) { }

	// RVA: 0x22FF730 Offset: 0x22FF730 VA: 0x22FF730
	public X509ExtensionCollection get_Extensions() { }

	// RVA: 0x22FFEB4 Offset: 0x22FFEB4 VA: 0x22FFEB4
	public string get_FriendlyName() { }

	// RVA: 0x22FFF68 Offset: 0x22FFF68 VA: 0x22FFF68
	public void set_FriendlyName(string value) { }

	// RVA: 0x2300028 Offset: 0x2300028 VA: 0x2300028
	public bool get_HasPrivateKey() { }

	// RVA: 0x23003B4 Offset: 0x23003B4 VA: 0x23003B4
	public X500DistinguishedName get_IssuerName() { }

	// RVA: 0x23004C4 Offset: 0x23004C4 VA: 0x23004C4
	public DateTime get_NotAfter() { }

	// RVA: 0x23005A0 Offset: 0x23005A0 VA: 0x23005A0
	public DateTime get_NotBefore() { }

	// RVA: 0x2300044 Offset: 0x2300044 VA: 0x2300044
	public AsymmetricAlgorithm get_PrivateKey() { }

	// RVA: 0x230067C Offset: 0x230067C VA: 0x230067C
	public void set_PrivateKey(AsymmetricAlgorithm value) { }

	// RVA: 0x2300824 Offset: 0x2300824 VA: 0x2300824
	public PublicKey get_PublicKey() { }

	// RVA: 0x23009CC Offset: 0x23009CC VA: 0x23009CC
	public byte[] get_RawData() { }

	// RVA: 0x2300A84 Offset: 0x2300A84 VA: 0x2300A84
	public string get_SerialNumber() { }

	// RVA: 0x2300C38 Offset: 0x2300C38 VA: 0x2300C38
	public Oid get_SignatureAlgorithm() { }

	// RVA: 0x2300D34 Offset: 0x2300D34 VA: 0x2300D34
	public X500DistinguishedName get_SubjectName() { }

	// RVA: 0x2300E44 Offset: 0x2300E44 VA: 0x2300E44
	public string get_Thumbprint() { }

	// RVA: 0x2300E4C Offset: 0x2300E4C VA: 0x2300E4C
	public int get_Version() { }

	[MonoTODOAttribute] // RVA: 0xBD217C Offset: 0xBD217C VA: 0xBD217C
	// RVA: 0x2300F00 Offset: 0x2300F00 VA: 0x2300F00
	public string GetNameInfo(X509NameType nameType, bool forIssuer) { }

	// RVA: 0x2301228 Offset: 0x2301228 VA: 0x2301228
	private ASN1 Find(byte[] oid, ASN1 dn) { }

	// RVA: 0x2301360 Offset: 0x2301360 VA: 0x2301360
	private string GetValueAsString(ASN1 pair) { }

	// RVA: 0x23015D8 Offset: 0x23015D8 VA: 0x23015D8
	private void ImportPkcs12(byte[] rawData, string password) { }

	// RVA: 0x2301870 Offset: 0x2301870 VA: 0x2301870 Slot: 27
	public override void Import(byte[] rawData) { }

	[MonoTODOAttribute] // RVA: 0xBD21B4 Offset: 0xBD21B4 VA: 0xBD21B4
	// RVA: 0x2301888 Offset: 0x2301888 VA: 0x2301888 Slot: 28
	public override void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBD21EC Offset: 0xBD21EC VA: 0xBD21EC
	// RVA: 0x2301B14 Offset: 0x2301B14 VA: 0x2301B14 Slot: 29
	public override void Import(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x2301B28 Offset: 0x2301B28 VA: 0x2301B28 Slot: 30
	public override void Import(string fileName) { }

	[MonoTODOAttribute] // RVA: 0xBD2224 Offset: 0xBD2224 VA: 0xBD2224
	// RVA: 0x2301D44 Offset: 0x2301D44 VA: 0x2301D44 Slot: 31
	public override void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBD225C Offset: 0xBD225C VA: 0xBD225C
	// RVA: 0x2301DE4 Offset: 0x2301DE4 VA: 0x2301DE4 Slot: 32
	public override void Import(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x2301BB8 Offset: 0x2301BB8 VA: 0x2301BB8
	private static byte[] Load(string fileName) { }

	// RVA: 0x2301E78 Offset: 0x2301E78 VA: 0x2301E78 Slot: 33
	public override void Reset() { }

	// RVA: 0x2301F08 Offset: 0x2301F08 VA: 0x2301F08 Slot: 3
	public override string ToString() { }

	// RVA: 0x2301F74 Offset: 0x2301F74 VA: 0x2301F74 Slot: 23
	public override string ToString(bool verbose) { }

	// RVA: 0x2302510 Offset: 0x2302510 VA: 0x2302510
	private static void AppendBuffer(StringBuilder sb, byte[] buffer) { }

	[MonoTODOAttribute] // RVA: 0xBD2294 Offset: 0xBD2294 VA: 0xBD2294
	// RVA: 0x2302614 Offset: 0x2302614 VA: 0x2302614
	public bool Verify() { }

	[MonoTODOAttribute] // RVA: 0xBD22CC Offset: 0xBD22CC VA: 0xBD22CC
	// RVA: 0x2302DA4 Offset: 0x2302DA4 VA: 0x2302DA4
	public static X509ContentType GetCertContentType(byte[] rawData) { }

	[MonoTODOAttribute] // RVA: 0xBD2304 Offset: 0xBD2304 VA: 0xBD2304
	// RVA: 0x2303264 Offset: 0x2303264 VA: 0x2303264
	public static X509ContentType GetCertContentType(string fileName) { }

	// RVA: 0x2303350 Offset: 0x2303350 VA: 0x2303350
	internal X509Certificate get_MonoCertificate() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0xBD0A4C Offset: 0xBD0A4C VA: 0xBD0A4C
public class X509Certificate2Collection : X509CertificateCollection // TypeDefIndex: 1651
{
	// Properties
	public X509Certificate2 Item { get; set; }

	// Methods

	// RVA: 0x2303358 Offset: 0x2303358 VA: 0x2303358
	public void .ctor() { }

	// RVA: 0x2303368 Offset: 0x2303368 VA: 0x2303368
	public void .ctor(X509Certificate2Collection certificates) { }

	// RVA: 0x2303458 Offset: 0x2303458 VA: 0x2303458
	public void .ctor(X509Certificate2 certificate) { }

	// RVA: 0x2303548 Offset: 0x2303548 VA: 0x2303548
	public void .ctor(X509Certificate2[] certificates) { }

	// RVA: 0x2303690 Offset: 0x2303690 VA: 0x2303690
	public X509Certificate2 get_Item(int index) { }

	// RVA: 0x2303824 Offset: 0x2303824 VA: 0x2303824
	public void set_Item(int index, X509Certificate2 value) { }

	// RVA: 0x2303488 Offset: 0x2303488 VA: 0x2303488
	public int Add(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xBD233C Offset: 0xBD233C VA: 0xBD233C
	// RVA: 0x2303578 Offset: 0x2303578 VA: 0x2303578
	public void AddRange(X509Certificate2[] certificates) { }

	[MonoTODOAttribute] // RVA: 0xBD2374 Offset: 0xBD2374 VA: 0xBD2374
	// RVA: 0x2303398 Offset: 0x2303398 VA: 0x2303398
	public void AddRange(X509Certificate2Collection certificates) { }

	// RVA: 0x2303878 Offset: 0x2303878 VA: 0x2303878
	public bool Contains(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xBD23AC Offset: 0xBD23AC VA: 0xBD23AC
	// RVA: 0x2303C18 Offset: 0x2303C18 VA: 0x2303C18
	public byte[] Export(X509ContentType contentType) { }

	[MonoTODOAttribute] // RVA: 0xBD23E4 Offset: 0xBD23E4 VA: 0xBD23E4
	// RVA: 0x2303C20 Offset: 0x2303C20 VA: 0x2303C20
	public byte[] Export(X509ContentType contentType, string password) { }

	[MonoTODOAttribute] // RVA: 0xBD241C Offset: 0xBD241C VA: 0xBD241C
	// RVA: 0x2303DB0 Offset: 0x2303DB0 VA: 0x2303DB0
	public X509Certificate2Collection Find(X509FindType findType, object findValue, bool validOnly) { }

	// RVA: 0x23053BC Offset: 0x23053BC VA: 0x23053BC
	public X509Certificate2Enumerator GetEnumerator() { }

	[MonoTODOAttribute] // RVA: 0xBD2454 Offset: 0xBD2454 VA: 0xBD2454
	// RVA: 0x23054EC Offset: 0x23054EC VA: 0x23054EC
	public void Import(byte[] rawData) { }

	[MonoTODOAttribute] // RVA: 0xBD248C Offset: 0xBD248C VA: 0xBD248C
	// RVA: 0x230557C Offset: 0x230557C VA: 0x230557C
	public void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }

	[MonoTODOAttribute] // RVA: 0xBD24C4 Offset: 0xBD24C4 VA: 0xBD24C4
	// RVA: 0x2305624 Offset: 0x2305624 VA: 0x2305624
	public void Import(string fileName) { }

	[MonoTODOAttribute] // RVA: 0xBD24FC Offset: 0xBD24FC VA: 0xBD24FC
	// RVA: 0x23056B4 Offset: 0x23056B4 VA: 0x23056B4
	public void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }

	// RVA: 0x230575C Offset: 0x230575C VA: 0x230575C
	public void Insert(int index, X509Certificate2 certificate) { }

	// RVA: 0x23058A4 Offset: 0x23058A4 VA: 0x23058A4
	public void Remove(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xBD2534 Offset: 0xBD2534 VA: 0xBD2534
	// RVA: 0x2305A7C Offset: 0x2305A7C VA: 0x2305A7C
	public void RemoveRange(X509Certificate2[] certificates) { }

	[MonoTODOAttribute] // RVA: 0xBD256C Offset: 0xBD256C VA: 0xBD256C
	// RVA: 0x2305B5C Offset: 0x2305B5C VA: 0x2305B5C
	public void RemoveRange(X509Certificate2Collection certificates) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Certificate2Enumerator : IEnumerator // TypeDefIndex: 1652
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate2 Current { get; }

	// Methods

	// RVA: 0x230541C Offset: 0x230541C VA: 0x230541C
	internal void .ctor(X509Certificate2Collection collection) { }

	// RVA: 0x2305E30 Offset: 0x2305E30 VA: 0x2305E30 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2305EE4 Offset: 0x2305EE4 VA: 0x2305EE4 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x2305F9C Offset: 0x2305F9C VA: 0x2305F9C Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x2305C38 Offset: 0x2305C38 VA: 0x2305C38
	public X509Certificate2 get_Current() { }

	// RVA: 0x2305D78 Offset: 0x2305D78 VA: 0x2305D78 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x2306054 Offset: 0x2306054 VA: 0x2306054 Slot: 8
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0xBD0A84 Offset: 0xBD0A84 VA: 0xBD0A84
[Serializable]
public class X509CertificateCollection : CollectionBase // TypeDefIndex: 1653
{
	// Properties
	public X509Certificate Item { get; set; }

	// Methods

	// RVA: 0x2303360 Offset: 0x2303360 VA: 0x2303360
	public void .ctor() { }

	// RVA: 0x230610C Offset: 0x230610C VA: 0x230610C
	public void .ctor(X509Certificate[] value) { }

	// RVA: 0x2306254 Offset: 0x2306254 VA: 0x2306254
	public void .ctor(X509CertificateCollection value) { }

	// RVA: 0x23063A4 Offset: 0x23063A4 VA: 0x23063A4
	public X509Certificate get_Item(int index) { }

	// RVA: 0x23064A0 Offset: 0x23064A0 VA: 0x23064A0
	public void set_Item(int index, X509Certificate value) { }

	// RVA: 0x23064F4 Offset: 0x23064F4 VA: 0x23064F4
	public int Add(X509Certificate value) { }

	// RVA: 0x230613C Offset: 0x230613C VA: 0x230613C
	public void AddRange(X509Certificate[] value) { }

	// RVA: 0x2306284 Offset: 0x2306284 VA: 0x2306284
	public void AddRange(X509CertificateCollection value) { }

	// RVA: 0x23065B4 Offset: 0x23065B4 VA: 0x23065B4
	public bool Contains(X509Certificate value) { }

	// RVA: 0x23067FC Offset: 0x23067FC VA: 0x23067FC
	public void CopyTo(X509Certificate[] array, int index) { }

	// RVA: 0x2306850 Offset: 0x2306850 VA: 0x2306850
	public X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { }

	// RVA: 0x2306980 Offset: 0x2306980 VA: 0x2306980 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23069B8 Offset: 0x23069B8 VA: 0x23069B8
	public int IndexOf(X509Certificate value) { }

	// RVA: 0x23069FC Offset: 0x23069FC VA: 0x23069FC
	public void Insert(int index, X509Certificate value) { }

	// RVA: 0x2306A50 Offset: 0x2306A50 VA: 0x2306A50
	public void Remove(X509Certificate value) { }

	// RVA: 0x2306738 Offset: 0x2306738 VA: 0x2306738
	private bool Compare(byte[] array1, byte[] array2) { }
}

// Namespace: 
public class X509CertificateCollection.X509CertificateEnumerator : IEnumerator // TypeDefIndex: 1654
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods

	// RVA: 0x23068B0 Offset: 0x23068B0 VA: 0x23068B0
	public void .ctor(X509CertificateCollection mappings) { }

	// RVA: 0x2306B7C Offset: 0x2306B7C VA: 0x2306B7C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2306C30 Offset: 0x2306C30 VA: 0x2306C30 Slot: 5
	private bool System.Collections.IEnumerator.MoveNext() { }

	// RVA: 0x2306CE8 Offset: 0x2306CE8 VA: 0x2306CE8 Slot: 6
	private void System.Collections.IEnumerator.Reset() { }

	// RVA: 0x2306DA0 Offset: 0x2306DA0 VA: 0x2306DA0
	public X509Certificate get_Current() { }

	// RVA: 0x2306EE0 Offset: 0x2306EE0 VA: 0x2306EE0 Slot: 7
	public bool MoveNext() { }

	// RVA: 0x2306F98 Offset: 0x2306F98 VA: 0x2306F98 Slot: 8
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Chain // TypeDefIndex: 1655
{
	// Fields
	private StoreLocation location; // 0x10
	private X509ChainElementCollection elements; // 0x18
	private X509ChainPolicy policy; // 0x20
	private X509ChainStatus[] status; // 0x28
	private static X509ChainStatus[] Empty; // 0x0
	private int max_path_length; // 0x30
	private X500DistinguishedName working_issuer_name; // 0x38
	private AsymmetricAlgorithm working_public_key; // 0x40
	private X509ChainElement bce_restriction; // 0x48
	private X509Store roots; // 0x50
	private X509Store cas; // 0x58
	private X509Certificate2Collection collection; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xBD0FBC Offset: 0xBD0FBC VA: 0xBD0FBC
	private static Dictionary<string, int> <>f__switch$mapB; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBD0FCC Offset: 0xBD0FCC VA: 0xBD0FCC
	private static Dictionary<string, int> <>f__switch$mapC; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBD0FDC Offset: 0xBD0FDC VA: 0xBD0FDC
	private static Dictionary<string, int> <>f__switch$mapD; // 0x18

	// Properties
	[MonoTODOAttribute] // RVA: 0xBD39D8 Offset: 0xBD39D8 VA: 0xBD39D8
	public IntPtr ChainContext { get; }
	public X509ChainElementCollection ChainElements { get; }
	public X509ChainPolicy ChainPolicy { get; set; }
	public X509ChainStatus[] ChainStatus { get; }
	private X509Store Roots { get; }
	private X509Store CertificateAuthorities { get; }
	private X509Certificate2Collection CertificateCollection { get; }

	// Methods

	// RVA: 0x2307050 Offset: 0x2307050 VA: 0x2307050
	public void .ctor() { }

	// RVA: 0x2307058 Offset: 0x2307058 VA: 0x2307058
	public void .ctor(bool useMachineContext) { }

	[MonoTODOAttribute] // RVA: 0xBD25A4 Offset: 0xBD25A4 VA: 0xBD25A4
	// RVA: 0x23071A4 Offset: 0x23071A4 VA: 0x23071A4
	public void .ctor(IntPtr chainContext) { }

	// RVA: 0x230721C Offset: 0x230721C VA: 0x230721C
	private static void .cctor() { }

	// RVA: 0x2307280 Offset: 0x2307280 VA: 0x2307280
	public IntPtr get_ChainContext() { }

	// RVA: 0x23072C0 Offset: 0x23072C0 VA: 0x23072C0
	public X509ChainElementCollection get_ChainElements() { }

	// RVA: 0x23072C8 Offset: 0x23072C8 VA: 0x23072C8
	public X509ChainPolicy get_ChainPolicy() { }

	// RVA: 0x23072D0 Offset: 0x23072D0 VA: 0x23072D0
	public void set_ChainPolicy(X509ChainPolicy value) { }

	// RVA: 0x23072D8 Offset: 0x23072D8 VA: 0x23072D8
	public X509ChainStatus[] get_ChainStatus() { }

	[MonoTODOAttribute] // RVA: 0xBD25DC Offset: 0xBD25DC VA: 0xBD25DC
	// RVA: 0x2302794 Offset: 0x2302794 VA: 0x2302794
	public bool Build(X509Certificate2 certificate) { }

	// RVA: 0x230734C Offset: 0x230734C VA: 0x230734C
	public void Reset() { }

	// RVA: 0x2307A00 Offset: 0x2307A00 VA: 0x2307A00
	public static X509Chain Create() { }

	// RVA: 0x2307AF0 Offset: 0x2307AF0 VA: 0x2307AF0
	private X509Store get_Roots() { }

	// RVA: 0x2307B8C Offset: 0x2307B8C VA: 0x2307B8C
	private X509Store get_CertificateAuthorities() { }

	// RVA: 0x2307C28 Offset: 0x2307C28 VA: 0x2307C28
	private X509Certificate2Collection get_CertificateCollection() { }

	// RVA: 0x230741C Offset: 0x230741C VA: 0x230741C
	private X509ChainStatusFlags BuildChainFrom(X509Certificate2 certificate) { }

	// RVA: 0x23082EC Offset: 0x23082EC VA: 0x23082EC
	private X509Certificate2 SelectBestFromCollection(X509Certificate2 child, X509Certificate2Collection c) { }

	// RVA: 0x2307E50 Offset: 0x2307E50 VA: 0x2307E50
	private X509Certificate2 FindParent(X509Certificate2 certificate) { }

	// RVA: 0x23080B8 Offset: 0x23080B8 VA: 0x23080B8
	private bool IsChainComplete(X509Certificate2 certificate) { }

	// RVA: 0x23086E0 Offset: 0x23086E0 VA: 0x23086E0
	private bool IsSelfIssued(X509Certificate2 certificate) { }

	// RVA: 0x2307574 Offset: 0x2307574 VA: 0x2307574
	private void ValidateChain(X509ChainStatusFlags flag) { }

	// RVA: 0x23087A0 Offset: 0x23087A0 VA: 0x23087A0
	private void Process(int n) { }

	// RVA: 0x2308DB4 Offset: 0x2308DB4 VA: 0x2308DB4
	private void PrepareForNextCertificate(int n) { }

	// RVA: 0x2309348 Offset: 0x2309348 VA: 0x2309348
	private void WrapUp() { }

	// RVA: 0x2309474 Offset: 0x2309474 VA: 0x2309474
	private void ProcessCertificateExtensions(X509ChainElement element) { }

	// RVA: 0x2309418 Offset: 0x2309418 VA: 0x2309418
	private bool IsSignedWith(X509Certificate2 signed, AsymmetricAlgorithm pubkey) { }

	// RVA: 0x23085C4 Offset: 0x23085C4 VA: 0x23085C4
	private string GetSubjectKeyIdentifier(X509Certificate2 certificate) { }

	// RVA: 0x2308534 Offset: 0x2308534 VA: 0x2308534
	private string GetAuthorityKeyIdentifier(X509Certificate2 certificate) { }

	// RVA: 0x23098C8 Offset: 0x23098C8 VA: 0x23098C8
	private string GetAuthorityKeyIdentifier(X509Crl crl) { }

	// RVA: 0x230974C Offset: 0x230974C VA: 0x230974C
	private string GetAuthorityKeyIdentifier(X509Extension ext) { }

	// RVA: 0x23090BC Offset: 0x23090BC VA: 0x23090BC
	private void CheckRevocationOnChain(X509ChainStatusFlags flag) { }

	// RVA: 0x2309958 Offset: 0x2309958 VA: 0x2309958
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, int ca, bool online) { }

	// RVA: 0x2309A58 Offset: 0x2309A58 VA: 0x2309A58
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, X509Certificate2 ca_cert, bool online) { }

	// RVA: 0x2309CD8 Offset: 0x2309CD8 VA: 0x2309CD8
	private X509Crl FindCrl(X509Certificate2 caCertificate) { }

	// RVA: 0x230A970 Offset: 0x230A970 VA: 0x230A970
	private bool ProcessCrlExtensions(X509Crl crl) { }

	// RVA: 0x230A4D0 Offset: 0x230A4D0 VA: 0x230A4D0
	private bool ProcessCrlEntryExtensions(X509Crl.X509CrlEntry entry) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509ChainElement // TypeDefIndex: 1656
{
	// Fields
	private X509Certificate2 certificate; // 0x10
	private X509ChainStatus[] status; // 0x18
	private string info; // 0x20
	private X509ChainStatusFlags compressed_status_flags; // 0x28

	// Properties
	public X509Certificate2 Certificate { get; }
	public X509ChainStatus[] ChainElementStatus { get; }
	public string Information { get; }
	internal X509ChainStatusFlags StatusFlags { get; set; }

	// Methods

	// RVA: 0x230AE3C Offset: 0x230AE3C VA: 0x230AE3C
	internal void .ctor(X509Certificate2 certificate) { }

	// RVA: 0x2308798 Offset: 0x2308798 VA: 0x2308798
	public X509Certificate2 get_Certificate() { }

	// RVA: 0x2307894 Offset: 0x2307894 VA: 0x2307894
	public X509ChainStatus[] get_ChainElementStatus() { }

	// RVA: 0x230AEC8 Offset: 0x230AEC8 VA: 0x230AEC8
	public string get_Information() { }

	// RVA: 0x23082DC Offset: 0x23082DC VA: 0x23082DC
	internal X509ChainStatusFlags get_StatusFlags() { }

	// RVA: 0x23082E4 Offset: 0x23082E4 VA: 0x23082E4
	internal void set_StatusFlags(X509ChainStatusFlags value) { }

	// RVA: 0x230AED0 Offset: 0x230AED0 VA: 0x230AED0
	private int Count(X509ChainStatusFlags flags) { }

	// RVA: 0x230AEF4 Offset: 0x230AEF4 VA: 0x230AEF4
	private void Set(X509ChainStatus[] status, ref int position, X509ChainStatusFlags flags, X509ChainStatusFlags mask) { }

	// RVA: 0x2308B50 Offset: 0x2308B50 VA: 0x2308B50
	internal void UncompressFlags() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0xBD0ABC Offset: 0xBD0ABC VA: 0xBD0ABC
public sealed class X509ChainElementCollection : ICollection, IEnumerable // TypeDefIndex: 1657
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public X509ChainElement Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x2307110 Offset: 0x2307110 VA: 0x2307110
	internal void .ctor() { }

	// RVA: 0x230B140 Offset: 0x230B140 VA: 0x230B140 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x230B190 Offset: 0x230B190 VA: 0x230B190 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x2307990 Offset: 0x2307990 VA: 0x2307990 Slot: 4
	public int get_Count() { }

	// RVA: 0x230B2C4 Offset: 0x230B2C4 VA: 0x230B2C4 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x23081E8 Offset: 0x23081E8 VA: 0x23081E8
	public X509ChainElement get_Item(int index) { }

	// RVA: 0x230B2FC Offset: 0x230B2FC VA: 0x230B2FC Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x230B334 Offset: 0x230B334 VA: 0x230B334
	public void CopyTo(X509ChainElement[] array, int index) { }

	// RVA: 0x23076F0 Offset: 0x23076F0 VA: 0x23076F0
	public X509ChainElementEnumerator GetEnumerator() { }

	// RVA: 0x2307DC4 Offset: 0x2307DC4 VA: 0x2307DC4
	internal void Add(X509Certificate2 certificate) { }

	// RVA: 0x23079C8 Offset: 0x23079C8 VA: 0x23079C8
	internal void Clear() { }

	// RVA: 0x2307F70 Offset: 0x2307F70 VA: 0x2307F70
	internal bool Contains(X509Certificate2 certificate) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainElementEnumerator : IEnumerator // TypeDefIndex: 1658
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509ChainElement Current { get; }

	// Methods

	// RVA: 0x230B1F4 Offset: 0x230B1F4 VA: 0x230B1F4
	internal void .ctor(IEnumerable enumerable) { }

	// RVA: 0x230B384 Offset: 0x230B384 VA: 0x230B384 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2307754 Offset: 0x2307754 VA: 0x2307754
	public X509ChainElement get_Current() { }

	// RVA: 0x23078A4 Offset: 0x23078A4 VA: 0x23078A4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x230B438 Offset: 0x230B438 VA: 0x230B438 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainPolicy // TypeDefIndex: 1659
{
	// Fields
	private OidCollection apps; // 0x10
	private OidCollection cert; // 0x18
	private X509Certificate2Collection store; // 0x20
	private X509RevocationFlag rflag; // 0x28
	private X509RevocationMode mode; // 0x2C
	private TimeSpan timeout; // 0x30
	private X509VerificationFlags vflags; // 0x38
	private DateTime vtime; // 0x40

	// Properties
	public OidCollection ApplicationPolicy { get; }
	public OidCollection CertificatePolicy { get; }
	public X509Certificate2Collection ExtraStore { get; }
	public X509RevocationFlag RevocationFlag { get; set; }
	public X509RevocationMode RevocationMode { get; set; }
	public TimeSpan UrlRetrievalTimeout { get; set; }
	public X509VerificationFlags VerificationFlags { get; set; }
	public DateTime VerificationTime { get; set; }

	// Methods

	// RVA: 0x230717C Offset: 0x230717C VA: 0x230717C
	public void .ctor() { }

	// RVA: 0x230B5F0 Offset: 0x230B5F0 VA: 0x230B5F0
	public OidCollection get_ApplicationPolicy() { }

	// RVA: 0x230B5F8 Offset: 0x230B5F8 VA: 0x230B5F8
	public OidCollection get_CertificatePolicy() { }

	// RVA: 0x2307DBC Offset: 0x2307DBC VA: 0x2307DBC
	public X509Certificate2Collection get_ExtraStore() { }

	// RVA: 0x2309950 Offset: 0x2309950 VA: 0x2309950
	public X509RevocationFlag get_RevocationFlag() { }

	// RVA: 0x230B600 Offset: 0x230B600 VA: 0x230B600
	public void set_RevocationFlag(X509RevocationFlag value) { }

	// RVA: 0x2309948 Offset: 0x2309948 VA: 0x2309948
	public X509RevocationMode get_RevocationMode() { }

	// RVA: 0x230B69C Offset: 0x230B69C VA: 0x230B69C
	public void set_RevocationMode(X509RevocationMode value) { }

	// RVA: 0x230B738 Offset: 0x230B738 VA: 0x230B738
	public TimeSpan get_UrlRetrievalTimeout() { }

	// RVA: 0x230B740 Offset: 0x230B740 VA: 0x230B740
	public void set_UrlRetrievalTimeout(TimeSpan value) { }

	// RVA: 0x2307988 Offset: 0x2307988 VA: 0x2307988
	public X509VerificationFlags get_VerificationFlags() { }

	// RVA: 0x230B748 Offset: 0x230B748 VA: 0x230B748
	public void set_VerificationFlags(X509VerificationFlags value) { }

	// RVA: 0x2308528 Offset: 0x2308528 VA: 0x2308528
	public DateTime get_VerificationTime() { }

	// RVA: 0x230B7E4 Offset: 0x230B7E4 VA: 0x230B7E4
	public void set_VerificationTime(DateTime value) { }

	// RVA: 0x230B4F0 Offset: 0x230B4F0 VA: 0x230B4F0
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public struct X509ChainStatus // TypeDefIndex: 1660
{
	// Fields
	private X509ChainStatusFlags status; // 0x0
	private string info; // 0x8

	// Properties
	public X509ChainStatusFlags Status { get; set; }
	public string StatusInformation { get; set; }

	// Methods

	// RVA: 0xD68CC4 Offset: 0xD68CC4 VA: 0xD68CC4
	internal void .ctor(X509ChainStatusFlags flag) { }

	// RVA: 0xD68CF0 Offset: 0xD68CF0 VA: 0xD68CF0
	public X509ChainStatusFlags get_Status() { }

	// RVA: 0xD68CF8 Offset: 0xD68CF8 VA: 0xD68CF8
	public void set_Status(X509ChainStatusFlags value) { }

	// RVA: 0xD68D00 Offset: 0xD68D00 VA: 0xD68D00
	public string get_StatusInformation() { }

