// Namespace: 
public class WarBoardBattleEvent : BaseBattleEvent // TypeDefIndex: 8856
{
	// Fields
	protected BattleWarBoardEventLimitTurn eventLimitTurn; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCCFC0C Offset: 0xCCFC0C VA: 0xCCFC0C
	[DebuggerBrowsableAttribute] // RVA: 0xCCFC0C Offset: 0xCCFC0C VA: 0xCCFC0C
	private BattleWarBoardInfo <WarBoardBattleInfo>k__BackingField; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCCFC48 Offset: 0xCCFC48 VA: 0xCCFC48
	[DebuggerBrowsableAttribute] // RVA: 0xCCFC48 Offset: 0xCCFC48 VA: 0xCCFC48
	private WarBoardBattleServantEvent <ServantEvent>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCFC84 Offset: 0xCCFC84 VA: 0xCCFC84
	[DebuggerBrowsableAttribute] // RVA: 0xCCFC84 Offset: 0xCCFC84 VA: 0xCCFC84
	private BattleWarBoardInfo.WarBoardMasterInfo <MasterPlayer>k__BackingField; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCCFCC0 Offset: 0xCCFCC0 VA: 0xCCFCC0
	[DebuggerBrowsableAttribute] // RVA: 0xCCFCC0 Offset: 0xCCFCC0 VA: 0xCCFCC0
	private BattleWarBoardInfo.WarBoardMasterInfo <MasterEnemy>k__BackingField; // 0x40
	protected string warBoardDataJson; // 0x48
	protected int curTurnCondState; // 0x50
	protected int[] joinCurTurnUniqueIds; // 0x58
	protected int[] aliveSvtUniqueIds; // 0x60
	protected int[] notTakeOverBuffTypes; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCCFCFC Offset: 0xCCFCFC VA: 0xCCFCFC
	private static Predicate<BattleWarBoardInfo.WarBoardMasterInfo> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCCFD0C Offset: 0xCCFD0C VA: 0xCCFD0C
	private static Predicate<BattleWarBoardInfo.WarBoardMasterInfo> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCCFD1C Offset: 0xCCFD1C VA: 0xCCFD1C
	private static Func<BattleServantData, bool> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCFD2C Offset: 0xCCFD2C VA: 0xCCFD2C
	private static Func<BattleServantData, bool> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCFD3C Offset: 0xCCFD3C VA: 0xCCFD3C
	private static Func<BattleServantData, int> <>f__am$cache4; // 0x20

	// Properties
	public BattleWarBoardInfo WarBoardBattleInfo { get; set; }
	public int WarBoardStageId { get; }
	public override bool IsPrecedingPlayer { get; }
	public int LimitBattleTurn { get; }
	public int BgNo { get; }
	public int BgType { get; }
	public WarBoardBattleServantEvent ServantEvent { get; set; }
	public BattleWarBoardInfo.WarBoardMasterInfo MasterPlayer { get; set; }
	public BattleWarBoardInfo.WarBoardMasterInfo MasterEnemy { get; set; }

	// Methods

	// RVA: 0x18DF858 Offset: 0x18DF858 VA: 0x18DF858
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A3C4 Offset: 0xD3A3C4 VA: 0xD3A3C4
	// RVA: 0x18DF928 Offset: 0x18DF928 VA: 0x18DF928
	private void set_WarBoardBattleInfo(BattleWarBoardInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A3D4 Offset: 0xD3A3D4 VA: 0xD3A3D4
	// RVA: 0x18DF930 Offset: 0x18DF930 VA: 0x18DF930
	public BattleWarBoardInfo get_WarBoardBattleInfo() { }

	// RVA: 0x18DF938 Offset: 0x18DF938 VA: 0x18DF938
	public int get_WarBoardStageId() { }

	// RVA: 0x18DF950 Offset: 0x18DF950 VA: 0x18DF950 Slot: 4
	public override bool get_IsPrecedingPlayer() { }

	// RVA: 0x18DF970 Offset: 0x18DF970 VA: 0x18DF970
	public int get_LimitBattleTurn() { }

	// RVA: 0x18DF988 Offset: 0x18DF988 VA: 0x18DF988
	public int get_BgNo() { }

	// RVA: 0x18DF9A0 Offset: 0x18DF9A0 VA: 0x18DF9A0
	public int get_BgType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A3E4 Offset: 0xD3A3E4 VA: 0xD3A3E4
	// RVA: 0x18DF9B8 Offset: 0x18DF9B8 VA: 0x18DF9B8
	private void set_ServantEvent(WarBoardBattleServantEvent value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A3F4 Offset: 0xD3A3F4 VA: 0xD3A3F4
	// RVA: 0x18DF9C0 Offset: 0x18DF9C0 VA: 0x18DF9C0
	public WarBoardBattleServantEvent get_ServantEvent() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A404 Offset: 0xD3A404 VA: 0xD3A404
	// RVA: 0x18DF9C8 Offset: 0x18DF9C8 VA: 0x18DF9C8
	private void set_MasterPlayer(BattleWarBoardInfo.WarBoardMasterInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A414 Offset: 0xD3A414 VA: 0xD3A414
	// RVA: 0x18DF9D0 Offset: 0x18DF9D0 VA: 0x18DF9D0
	public BattleWarBoardInfo.WarBoardMasterInfo get_MasterPlayer() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A424 Offset: 0xD3A424 VA: 0xD3A424
	// RVA: 0x18DF9D8 Offset: 0x18DF9D8 VA: 0x18DF9D8
	private void set_MasterEnemy(BattleWarBoardInfo.WarBoardMasterInfo value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A434 Offset: 0xD3A434 VA: 0xD3A434
	// RVA: 0x18DF9E0 Offset: 0x18DF9E0 VA: 0x18DF9E0
	public BattleWarBoardInfo.WarBoardMasterInfo get_MasterEnemy() { }

	// RVA: 0x18DF9E8 Offset: 0x18DF9E8 VA: 0x18DF9E8
	protected void OnTurnCond(BuffList.ProgressTurnCond cond) { }

	// RVA: 0x18DF9F8 Offset: 0x18DF9F8 VA: 0x18DF9F8 Slot: 5
	public override void Init(BattleData data) { }

	// RVA: 0x18DFD5C Offset: 0x18DFD5C VA: 0x18DFD5C Slot: 6
	public override BaseBattleServantEvent GetServantEvent() { }

	// RVA: 0x18DFD64 Offset: 0x18DFD64 VA: 0x18DFD64 Slot: 7
	public override void InitWave() { }

	// RVA: 0x18DFD68 Offset: 0x18DFD68 VA: 0x18DFD68 Slot: 8
	public override void InitBGData(ref int bgNo, ref int bgType) { }

	// RVA: 0x18DFE10 Offset: 0x18DFE10 VA: 0x18DFE10 Slot: 9
	public override void InitStageData(StageEntity stage) { }

	// RVA: 0x18DFF3C Offset: 0x18DFF3C VA: 0x18DFF3C Slot: 10
	public override void InitServantData(bool isPlayer) { }

	// RVA: 0x18E0294 Offset: 0x18E0294 VA: 0x18E0294
	protected bool IsSettedAllServant() { }

	// RVA: 0x18E01C8 Offset: 0x18E01C8 VA: 0x18E01C8
	protected void InitUsePlayerServantData() { }

	// RVA: 0x18E03A4 Offset: 0x18E03A4 VA: 0x18E03A4
	protected int GetServantHaveStar(BattleServantData svtData) { }

	// RVA: 0x18E041C Offset: 0x18E041C VA: 0x18E041C Slot: 11
	public override void InitServantDataPrevAdd(BattleServantData svtData) { }

	// RVA: 0x18E04AC Offset: 0x18E04AC VA: 0x18E04AC Slot: 12
	public override void InitPlayerMasterInfo() { }

	// RVA: 0x18E04B0 Offset: 0x18E04B0 VA: 0x18E04B0
	protected void TakeoverPlayerMasterSkill() { }

	// RVA: 0x18DFE60 Offset: 0x18DFE60 VA: 0x18DFE60
	protected void TakeoverEnemyMasterInfo() { }

	// RVA: 0x18E0664 Offset: 0x18E0664 VA: 0x18E0664
	protected int[] GetMasterSkillChargeTurnArray(BattleWarBoardInfo.WarBoardMasterInfo masterInfo) { }

	// RVA: 0x18E074C Offset: 0x18E074C VA: 0x18E074C
	protected int[] GetMasterSkillSealedTurnArray(BattleWarBoardInfo.WarBoardMasterInfo masterInfo) { }

	// RVA: 0x18DFB20 Offset: 0x18DFB20 VA: 0x18DFB20
	protected BattleWarBoardInfo.WarBoardMasterInfo GetEventMasterInfo(BattleWarBoardInfo warBoardInfo, bool isPlayer) { }

	// RVA: 0x18E0834 Offset: 0x18E0834 VA: 0x18E0834 Slot: 13
	public override int GetResultBgmId(int curBgmId) { }

	// RVA: 0x18E090C Offset: 0x18E090C VA: 0x18E090C Slot: 14
	public override bool SendBattleResult(BattleResultRequest.Argument arg, NetworkManager.ResultCallbackFunc func) { }

	// RVA: 0x18E0F80 Offset: 0x18E0F80 VA: 0x18E0F80 Slot: 15
	public override void InitStartResult(BattleResultComponent.resultData result) { }

	// RVA: 0x18E1074 Offset: 0x18E1074 VA: 0x18E1074
	protected void HideTargetsResult(BattleResultComponent.resultData result, int[] hideTypes) { }

	// RVA: 0x18E0A1C Offset: 0x18E0A1C VA: 0x18E0A1C
	protected BattleWarBoardInfo MakeWarBoardBattleInfo() { }

	// RVA: 0x18E11A4 Offset: 0x18E11A4 VA: 0x18E11A4
	protected Dictionary<long, int> MakeDistributeStar() { }

	// RVA: 0x18DFC5C Offset: 0x18DFC5C VA: 0x18DFC5C
	protected int[] GetResetBuffTypes() { }

	// RVA: 0x18E13A8 Offset: 0x18E13A8 VA: 0x18E13A8
	protected BattleWarBoardInfo.WarBoardMasterInfo[] MakeWarBoardMasterArray() { }

	// RVA: 0x18E17C4 Offset: 0x18E17C4 VA: 0x18E17C4
	protected BattleWarBoardInfo.WarBoardMasterInfo MakeMasterInfo(int forceId, int groupId, int[] chargeArray, int[] sealedArray, int spellNum) { }

	// RVA: 0x18E149C Offset: 0x18E149C VA: 0x18E149C
	protected BattleWarBoardInfo.WarBoardMasterInfo GetTakeoverPlayerMasterInfo() { }

	// RVA: 0x18E16EC Offset: 0x18E16EC VA: 0x18E16EC
	protected BattleWarBoardInfo.WarBoardMasterInfo GetTakeoverEnemyMasterInfo(BattleWarBoardInfo.WarBoardMasterInfo enemyMaster) { }

	// RVA: 0x18E1978 Offset: 0x18E1978 VA: 0x18E1978
	public void SetResponseWarBoardData(string json) { }

	// RVA: 0x18E1980 Offset: 0x18E1980 VA: 0x18E1980 Slot: 16
	public override bool GoNextScene() { }

	// RVA: 0x18E1ABC Offset: 0x18E1ABC VA: 0x18E1ABC Slot: 17
	public override void GetSaveData(BattleData.SaveData save) { }

	// RVA: 0x18E1AEC Offset: 0x18E1AEC VA: 0x18E1AEC Slot: 18
	public override void SetSaveData(BattleData.SaveData save) { }

	// RVA: 0x18E1B7C Offset: 0x18E1B7C VA: 0x18E1B7C Slot: 19
	public override bool IsUseDefeatPointReady(BattleServantData svtData) { }

	// RVA: 0x18E1BF4 Offset: 0x18E1BF4 VA: 0x18E1BF4 Slot: 20
	public override bool IsLogicEscape(BattleServantData svtData) { }

	// RVA: 0x18E1C28 Offset: 0x18E1C28 VA: 0x18E1C28 Slot: 21
	public override bool IsTakeOverNextBattleBuff(BattleBuffData.BuffData buff, BuffEntity buffEnt, DataVals baseVals) { }

	// RVA: 0x18E1D78 Offset: 0x18E1D78 VA: 0x18E1D78 Slot: 24
	public override void SetDefaultPassiveBuffShowState(BattleBuffData.BuffData buff) { }

	// RVA: 0x18E1DC4 Offset: 0x18E1DC4 VA: 0x18E1DC4 Slot: 25
	public override void InitBattleStartTurn(bool isPlayer) { }

	// RVA: 0x18E2008 Offset: 0x18E2008 VA: 0x18E2008 Slot: 26
	public override bool IsRemainBattleEndWave() { }

	// RVA: 0x18E208C Offset: 0x18E208C VA: 0x18E208C Slot: 27
	public override bool IsCommandAttackable() { }

	// RVA: 0x18E20BC Offset: 0x18E20BC VA: 0x18E20BC Slot: 28
	public override bool CheckBuffCommonProgressTurn(int svtUniqueId) { }

	// RVA: 0x18E2188 Offset: 0x18E2188 VA: 0x18E2188 Slot: 29
	public override void ProgressBuffTurn(BattleBuffData buffData, BattleBuffData.BuffData buff, bool isEndEnemyTurn, int defCondState) { }

	// RVA: 0x18E22B8 Offset: 0x18E22B8 VA: 0x18E22B8 Slot: 30
	public override int MakeTurnCondStateByServant(int selfUniqueId) { }

	// RVA: 0x18E2394 Offset: 0x18E2394 VA: 0x18E2394 Slot: 31
	public override void ProgressNoExecJoinServantsBuff(int[] execUniqueIds, bool isEndEnemyTurn) { }

	// RVA: 0x18E26D8 Offset: 0x18E26D8 VA: 0x18E26D8 Slot: 32
	public override bool IsPossibleAddBuffParam(BattleServantData svtData) { }

	// RVA: 0x18E2720 Offset: 0x18E2720 VA: 0x18E2720 Slot: 22
	public override bool IsActionPassiveSkillOnBattle(BattleSkillInfoData skillInfo) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A444 Offset: 0xD3A444 VA: 0xD3A444
	// RVA: 0x18E2754 Offset: 0x18E2754 VA: 0x18E2754
	private static bool <GetEventMasterInfo>m__0(BattleWarBoardInfo.WarBoardMasterInfo x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A454 Offset: 0xD3A454 VA: 0xD3A454
	// RVA: 0x18E2794 Offset: 0x18E2794 VA: 0x18E2794
	private static bool <GetEventMasterInfo>m__1(BattleWarBoardInfo.WarBoardMasterInfo x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A464 Offset: 0xD3A464 VA: 0xD3A464
	// RVA: 0x18E27D4 Offset: 0x18E27D4 VA: 0x18E27D4
	private static bool <MakeDistributeStar>m__2(BattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A474 Offset: 0xD3A474 VA: 0xD3A474
	// RVA: 0x18E2804 Offset: 0x18E2804 VA: 0x18E2804
	private static bool <InitBattleStartTurn>m__3(BattleServantData svt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A484 Offset: 0xD3A484 VA: 0xD3A484
	// RVA: 0x18E2834 Offset: 0x18E2834 VA: 0x18E2834
	private static int <InitBattleStartTurn>m__4(BattleServantData svt) { }
}

// Namespace: 
public class WarBoardBattleEvent.TakeoverSvtArg // TypeDefIndex: 8857
{
	// Fields
	public BattleLogic logic; // 0x10
	public Dictionary<long, int> dicDistributeStar; // 0x18
	public int[] fieldIndiv; // 0x20
	public WarBoardBattleServantEvent servantEvent; // 0x28

	// Methods

	// RVA: 0x18E111C Offset: 0x18E111C VA: 0x18E111C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFDD0 Offset: 0xCAFDD0 VA: 0xCAFDD0
private sealed class WarBoardBattleEvent.<MakeWarBoardBattleInfo>c__AnonStorey0 // TypeDefIndex: 8858
{
	// Fields
	internal List<BattleWarBoardInfo.WarBoardServantInfo> svtList; // 0x10
	internal WarBoardBattleEvent.TakeoverSvtArg arg; // 0x18

	// Methods

	// RVA: 0x18E1114 Offset: 0x18E1114 VA: 0x18E1114
	public void .ctor() { }

	// RVA: 0x18E28B8 Offset: 0x18E28B8 VA: 0x18E28B8
	internal void <>m__0(BattleServantData svt) { }

	// RVA: 0x18E294C Offset: 0x18E294C VA: 0x18E294C
	internal void <>m__1(BattleServantData svt) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFDE0 Offset: 0xCAFDE0 VA: 0xCAFDE0
private sealed class WarBoardBattleEvent.<IsTakeOverNextBattleBuff>c__AnonStorey1 // TypeDefIndex: 8859
{
	// Fields
	internal BuffEntity buffEnt; // 0x10

	// Methods

	// RVA: 0x18E1D70 Offset: 0x18E1D70 VA: 0x18E1D70
	public void .ctor() { }

	// RVA: 0x18E2870 Offset: 0x18E2870 VA: 0x18E2870
	internal bool <>m__0(int type) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFDF0 Offset: 0xCAFDF0 VA: 0xCAFDF0
private sealed class WarBoardBattleEvent.<CheckBuffCommonProgressTurn>c__AnonStorey2 // TypeDefIndex: 8860
{
	// Fields
	internal int svtUniqueId; // 0x10

	// Methods

	// RVA: 0x18E2180 Offset: 0x18E2180 VA: 0x18E2180
	public void .ctor() { }

	// RVA: 0x18E2860 Offset: 0x18E2860 VA: 0x18E2860
	internal bool <>m__0(int id) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE00 Offset: 0xCAFE00 VA: 0xCAFE00
private sealed class WarBoardBattleEvent.<MakeTurnCondStateByServant>c__AnonStorey3 // TypeDefIndex: 8861
{
	// Fields
	internal int selfUniqueId; // 0x10

	// Methods

	// RVA: 0x18E238C Offset: 0x18E238C VA: 0x18E238C
	public void .ctor() { }

	// RVA: 0x18E28A8 Offset: 0x18E28A8 VA: 0x18E28A8
	internal bool <>m__0(int id) { }
}

// Namespace: 
public class BattleWarBoardEventLimitTurn // TypeDefIndex: 8862
{
	// Fields
	private int defLimitAct; // 0x10
	private int defEffectType; // 0x14
	private int[] defTurnEffect; // 0x18

	// Methods

	// RVA: 0x1AEBE6C Offset: 0x1AEBE6C VA: 0x1AEBE6C
	public void .ctor() { }

	// RVA: 0x1AEBF04 Offset: 0x1AEBF04 VA: 0x1AEBF04
	public void InitLimitInfo(WarBoardBattleEvent battleEvent, StageEntity stage) { }
}

// Namespace: 
public class BaseBattleServantEvent // TypeDefIndex: 8863
{
	// Methods

	// RVA: 0x1480344 Offset: 0x1480344 VA: 0x1480344
	public void .ctor() { }

	// RVA: 0x1480928 Offset: 0x1480928 VA: 0x1480928 Slot: 4
	public virtual bool IsApplyPassive(BattleSkillInfoData.TYPE type, BattleServantData svtData) { }

	// RVA: 0x1480930 Offset: 0x1480930 VA: 0x1480930 Slot: 5
	public virtual void AddSpecialPassive(BattleServantData svtData) { }
}

// Namespace: 
public class WarBoardBattleServantEvent : BaseBattleServantEvent // TypeDefIndex: 8864
{
	// Fields
	protected BattleWarBoardInfo.WarBoardServantInfo[] svtInfoArray; // 0x10

	// Methods

	// RVA: 0x18DFAF4 Offset: 0x18DFAF4 VA: 0x18DFAF4
	public void .ctor(BattleWarBoardInfo.WarBoardServantInfo[] svtInfoArray) { }

	// RVA: 0x18E00F4 Offset: 0x18E00F4 VA: 0x18E00F4
	public BattleWarBoardInfo.WarBoardServantInfo GetEventServantInfo(long userSvtId) { }

	// RVA: 0x18E2CEC Offset: 0x18E2CEC VA: 0x18E2CEC Slot: 4
	public override bool IsApplyPassive(BattleSkillInfoData.TYPE type, BattleServantData svtData) { }

	// RVA: 0x18E2CF8 Offset: 0x18E2CF8 VA: 0x18E2CF8 Slot: 5
	public override void AddSpecialPassive(BattleServantData svtData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE10 Offset: 0xCAFE10 VA: 0xCAFE10
private sealed class WarBoardBattleServantEvent.<GetEventServantInfo>c__AnonStorey0 // TypeDefIndex: 8865
{
	// Fields
	internal long userSvtId; // 0x10

	// Methods

	// RVA: 0x18E2CE4 Offset: 0x18E2CE4 VA: 0x18E2CE4
	public void .ctor() { }

	// RVA: 0x18E2E30 Offset: 0x18E2E30 VA: 0x18E2E30
	internal bool <>m__0(BattleWarBoardInfo.WarBoardServantInfo x) { }
}

// Namespace: 
public class BattleEventTutorial // TypeDefIndex: 8866
{
	// Fields
	private BattleEntity battle_ent; // 0x10
	private bool hasEventTutorial; // 0x18
	private bool isBreakGuageEnemyAppeared; // 0x19
	private List<EventTutorialEntity> tutList; // 0x20
	private static readonly EventTutorialMaster.OpenType[] tacticalTargetTypes; // 0x0
	private static readonly EventTutorialMaster.OpenType[] resultTargetTypes; // 0x8
	private static readonly EventTutorialMaster.OpenType[] gimmickTargetTypes; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCCFD4C Offset: 0xCCFD4C VA: 0xCCFD4C
	private static Predicate<EventTutorialEntity> <>f__am$cache0; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCFD5C Offset: 0xCCFD5C VA: 0xCCFD5C
	private static Predicate<EventTutorialEntity> <>f__am$cache1; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCCFD6C Offset: 0xCCFD6C VA: 0xCCFD6C
	private static Predicate<EventTutorialEntity> <>f__am$cache2; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCCFD7C Offset: 0xCCFD7C VA: 0xCCFD7C
	private static Predicate<EventTutorialEntity> <>f__am$cache3; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCFD8C Offset: 0xCCFD8C VA: 0xCCFD8C
	private static Predicate<EventTutorialEntity> <>f__am$cache4; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xCCFD9C Offset: 0xCCFD9C VA: 0xCCFD9C
	private static Predicate<EventTutorialEntity> <>f__am$cache5; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCCFDAC Offset: 0xCCFDAC VA: 0xCCFDAC
	private static Predicate<EventTutorialEntity> <>f__am$cache6; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCCFDBC Offset: 0xCCFDBC VA: 0xCCFDBC
	private static Predicate<EventTutorialEntity> <>f__am$cache7; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCCFDCC Offset: 0xCCFDCC VA: 0xCCFDCC
	private static Predicate<EventTutorialEntity> <>f__am$cache8; // 0x58

	// Methods

	// RVA: 0x1666D48 Offset: 0x1666D48 VA: 0x1666D48
	public void .ctor(BattleEntity ent) { }

	// RVA: 0x1666D74 Offset: 0x1666D74 VA: 0x1666D74
	public void OnBreakGuageEnemyAppeared() { }

	// RVA: 0x1666D80 Offset: 0x1666D80 VA: 0x1666D80
	public bool isStart() { }

	// RVA: 0x1666E9C Offset: 0x1666E9C VA: 0x1666E9C
	public bool isWave() { }

	// RVA: 0x1666FB8 Offset: 0x1666FB8 VA: 0x1666FB8
	public bool isTurn() { }

	// RVA: 0x16670D4 Offset: 0x16670D4 VA: 0x16670D4
	public bool isBreakGauge() { }

	// RVA: 0x16671F8 Offset: 0x16671F8 VA: 0x16671F8
	public bool isTacticalPhase() { }

	// RVA: 0x1667314 Offset: 0x1667314 VA: 0x1667314
	public bool CheckHasTacticalPhaseTutorial(int wave, int turn) { }

	// RVA: 0x166744C Offset: 0x166744C VA: 0x166744C
	public bool isResult() { }

	// RVA: 0x1667568 Offset: 0x1667568 VA: 0x1667568
	public bool isResultWin() { }

	// RVA: 0x1667684 Offset: 0x1667684 VA: 0x1667684
	public bool isResultLose() { }

	// RVA: 0x16677A0 Offset: 0x16677A0 VA: 0x16677A0
	public bool isResultPhase() { }

	// RVA: 0x16678BC Offset: 0x16678BC VA: 0x16678BC
	public bool CheckHasResultPhaseTutorial() { }

	// RVA: 0x16679E4 Offset: 0x16679E4 VA: 0x16679E4
	public bool CheckHasGimmickPhaseTutorial() { }

	// RVA: 0x1667B0C Offset: 0x1667B0C VA: 0x1667B0C
	public void callStart(Action callbackAfter) { }

	// RVA: 0x1667C54 Offset: 0x1667C54 VA: 0x1667C54
	public void callWave(Action callbackAfter) { }

	// RVA: 0x1667C64 Offset: 0x1667C64 VA: 0x1667C64
	public void callTurn(Action callbackAfter) { }

	// RVA: 0x1667C74 Offset: 0x1667C74 VA: 0x1667C74
	public void callBreakGauge(Action callbackAfter) { }

	// RVA: 0x1667C94 Offset: 0x1667C94 VA: 0x1667C94
	public void callResult(Action callbackAfter) { }

	// RVA: 0x1667CA4 Offset: 0x1667CA4 VA: 0x1667CA4
	public void callResultWin(Action callbackAfter) { }

	// RVA: 0x1667CB4 Offset: 0x1667CB4 VA: 0x1667CB4
	public void callResultLose(Action callbackAfter) { }

	// RVA: 0x1667CC4 Offset: 0x1667CC4 VA: 0x1667CC4
	public void callGimmick(Action callbackAfter) { }

	// RVA: 0x1667B1C Offset: 0x1667B1C VA: 0x1667B1C
	private void popAndCallNextTutorial(EventTutorialMaster.OpenType opType, Action callback) { }

	// RVA: 0x1667CD4 Offset: 0x1667CD4 VA: 0x1667CD4
	public void ClearTutorialList() { }

	// RVA: 0x1667D5C Offset: 0x1667D5C VA: 0x1667D5C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A494 Offset: 0xD3A494 VA: 0xD3A494
	// RVA: 0x1667E54 Offset: 0x1667E54 VA: 0x1667E54
	private static bool <isStart>m__0(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A4A4 Offset: 0xD3A4A4 VA: 0xD3A4A4
	// RVA: 0x1667E8C Offset: 0x1667E8C VA: 0x1667E8C
	private static bool <isWave>m__1(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A4B4 Offset: 0xD3A4B4 VA: 0xD3A4B4
	// RVA: 0x1667EC4 Offset: 0x1667EC4 VA: 0x1667EC4
	private static bool <isTurn>m__2(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A4C4 Offset: 0xD3A4C4 VA: 0xD3A4C4
	// RVA: 0x1667EFC Offset: 0x1667EFC VA: 0x1667EFC
	private static bool <isBreakGauge>m__3(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A4D4 Offset: 0xD3A4D4 VA: 0xD3A4D4
	// RVA: 0x1667F34 Offset: 0x1667F34 VA: 0x1667F34
	private static bool <isTacticalPhase>m__4(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A4E4 Offset: 0xD3A4E4 VA: 0xD3A4E4
	// RVA: 0x1668024 Offset: 0x1668024 VA: 0x1668024
	private static bool <isResult>m__5(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A4F4 Offset: 0xD3A4F4 VA: 0xD3A4F4
	// RVA: 0x166805C Offset: 0x166805C VA: 0x166805C
	private static bool <isResultWin>m__6(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A504 Offset: 0xD3A504 VA: 0xD3A504
	// RVA: 0x1668094 Offset: 0x1668094 VA: 0x1668094
	private static bool <isResultLose>m__7(EventTutorialEntity x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A514 Offset: 0xD3A514 VA: 0xD3A514
	// RVA: 0x16680CC Offset: 0x16680CC VA: 0x16680CC
	private static bool <isResultPhase>m__8(EventTutorialEntity x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE20 Offset: 0xCAFE20 VA: 0xCAFE20
private sealed class BattleEventTutorial.<isTacticalPhase>c__AnonStorey0 // TypeDefIndex: 8867
{
	// Fields
	internal EventTutorialEntity x; // 0x10

	// Methods

	// RVA: 0x166801C Offset: 0x166801C VA: 0x166801C
	public void .ctor() { }

	// RVA: 0x16681FC Offset: 0x16681FC VA: 0x16681FC
	internal bool <>m__0(EventTutorialMaster.OpenType y) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE30 Offset: 0xCAFE30 VA: 0xCAFE30
private sealed class BattleEventTutorial.<isResultPhase>c__AnonStorey1 // TypeDefIndex: 8868
{
	// Fields
	internal EventTutorialEntity x; // 0x10

	// Methods

	// RVA: 0x16681B4 Offset: 0x16681B4 VA: 0x16681B4
	public void .ctor() { }

	// RVA: 0x16681BC Offset: 0x16681BC VA: 0x16681BC
	internal bool <>m__0(EventTutorialMaster.OpenType y) { }
}

// Namespace: 
public class BattleFBXComponent : MonoBehaviour // TypeDefIndex: 8869
{
	// Fields
	public static bool EnableEvent; // 0x0
	public static readonly float animFps; // 0x4
	public static readonly string levelMarker; // 0x8
	private static readonly string prefabMarker; // 0x10
	private static readonly string chrnodeMarker; // 0x18
	private static readonly string sideflipMarker; // 0x20
	private static readonly string enItemMarker; // 0x28
	private static readonly string enWeaponMarker; // 0x30
	private static readonly string npPathHead; // 0x38
	private static readonly string svtPathHead; // 0x40
	private static readonly string[] yTransparenceShaderNames; // 0x48
	[SerializeField] // RVA: 0xCCFDDC Offset: 0xCCFDDC VA: 0xCCFDDC
	private Dictionary<string, string> RealAnimNames; // 0x18
	private Dictionary<string, string> CommonAnimNames; // 0x20
	private Transform rootTransform; // 0x28
	private Animation animationComponent; // 0x30
	private SimpleAnimation simpleAnimationComponent; // 0x38
	public float timescale; // 0x40
	public string animename; // 0x48
	public bool isAutoPlay; // 0x50
	public BattleFBXComponent.onEventDelegate OnEvent; // 0x58
	public BattleFBXComponent.onEventDelegate Complete; // 0x60
	private BattleFBXComponent.AnimEvent[][] eventlist; // 0x68
	private string currentAnimName; // 0x70
	private string currentCommonAnimName; // 0x78
	private float currentAnimTime; // 0x80
	private int currentEventIndex; // 0x84
	private bool isDirty; // 0x88
	private bool isStop; // 0x89
	private List<Renderer> enableRendererList; // 0x90
	private Dictionary<string, GameObject> actorEffectDict; // 0x98
	private Dictionary<KeyValuePair<string, Material>, float> tempMaterialPropertyDict; // 0xA0
	protected List<GameObject> PrefabNodes; // 0xA8
	private BillBoard billBoard; // 0xB0
	private List<XWeaponTrail> componentsXWeaponTrail; // 0xB8
	private AnimationClip defSimpleAnimClip; // 0xC0
	private AnimationClip defAnimClip; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xCCFDEC Offset: 0xCCFDEC VA: 0xCCFDEC
	private static Func<Transform, bool> <>f__am$cache0; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCCFDFC Offset: 0xCCFDFC VA: 0xCCFDFC
	private static Func<Transform, bool> <>f__am$cache1; // 0x58

	// Properties
	public string CurrentCommonAnimName { get; }
	public Transform RootTransform { get; set; }
	public float CurrentAnimTime { get; }
	public string CurrentAnimName { get; }

	// Methods

	// RVA: 0x166823C Offset: 0x166823C VA: 0x166823C
	public void .ctor() { }

	// RVA: 0x166834C Offset: 0x166834C VA: 0x166834C
	public string get_CurrentCommonAnimName() { }

	// RVA: 0x1668354 Offset: 0x1668354 VA: 0x1668354
	public Transform get_RootTransform() { }

	// RVA: 0x166835C Offset: 0x166835C VA: 0x166835C
	public void set_RootTransform(Transform value) { }

	// RVA: 0x1668428 Offset: 0x1668428 VA: 0x1668428
	public float get_CurrentAnimTime() { }

	// RVA: 0x1668430 Offset: 0x1668430 VA: 0x1668430
	public string get_CurrentAnimName() { }

	// RVA: 0x1668438 Offset: 0x1668438 VA: 0x1668438
	protected void InitAnimNameDict() { }

	// RVA: 0x16684BC Offset: 0x16684BC VA: 0x16684BC
	private void Awake() { }

	// RVA: 0x16685B0 Offset: 0x16685B0 VA: 0x16685B0
	private void Start() { }

	// RVA: 0x1668620 Offset: 0x1668620 VA: 0x1668620
	public void AnimUpdate(float deltaTime) { }

	// RVA: 0x16693E8 Offset: 0x16693E8 VA: 0x16693E8
	public void SetWrapMode(string animName, WrapMode wrapMode) { }

	// RVA: 0x16696F4 Offset: 0x16696F4 VA: 0x16696F4
	private void Update() { }

	// RVA: 0x166933C Offset: 0x166933C VA: 0x166933C
	private void OnAnimEvent(BattleFBXComponent.AnimEvent ev) { }

	// RVA: 0x1669ABC Offset: 0x1669ABC VA: 0x1669ABC
	public float getLength() { }

	// RVA: 0x1669D44 Offset: 0x1669D44 VA: 0x1669D44
	protected void DestroyPrefabNode() { }

	// RVA: 0x1669EA0 Offset: 0x1669EA0 VA: 0x1669EA0
	public void ChangeActorLimitCount() { }

	// RVA: 0x1669FB0 Offset: 0x1669FB0 VA: 0x1669FB0
	public void SetEvolutionLevel(int svtId, int limitcount) { }

	// RVA: 0x166A008 Offset: 0x166A008 VA: 0x166A008
	public void inSetEvolutionLevel(GameObject gameObject, int svtId, int limitcount) { }

	// RVA: 0x166B704 Offset: 0x166B704 VA: 0x166B704
	protected GameObject CreatePrefabNode(Transform node, int svtId = -1, int limitcount = -1) { }

	// RVA: 0x166BC48 Offset: 0x166BC48 VA: 0x166BC48
	public void changeActiveEffect(bool active) { }

	// RVA: 0x166BDD8 Offset: 0x166BDD8 VA: 0x166BDD8
	public void stopParticle() { }

	// RVA: 0x16695B8 Offset: 0x16695B8 VA: 0x16695B8
	private void setupAnimation() { }

	// RVA: 0x166BEB0 Offset: 0x166BEB0 VA: 0x166BEB0
	public void playAnimationTimeline(string filename, string startEvent = "", string stopEvent = "") { }

	// RVA: 0x166C484 Offset: 0x166C484 VA: 0x166C484
	public void setCurrentAnimTime(float time) { }

	// RVA: 0x166C48C Offset: 0x166C48C VA: 0x166C48C
	public bool checkAnimation(string filename) { }

	// RVA: 0x16684D0 Offset: 0x16684D0 VA: 0x16684D0
	public void playAnimation(string filename) { }

	// RVA: 0x166C604 Offset: 0x166C604 VA: 0x166C604
	public void playAnimationFromTag(string animname, string tag) { }

	// RVA: 0x166C8A8 Offset: 0x166C8A8 VA: 0x166C8A8
	public void stopAnimation() { }

	// RVA: 0x166C2F8 Offset: 0x166C2F8 VA: 0x166C2F8
	public float getTagTime(string animname, string tag) { }

	// RVA: 0x166C8B4 Offset: 0x166C8B4 VA: 0x166C8B4
	public void stopAnimationCheck() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3A524 Offset: 0xD3A524 VA: 0xD3A524
	// RVA: 0x166C908 Offset: 0x166C908 VA: 0x166C908
	private IEnumerator AnimationCheck() { }

	// RVA: 0x166C980 Offset: 0x166C980 VA: 0x166C980
	public void setTimeScale(float timescale) { }

	// RVA: 0x166C988 Offset: 0x166C988 VA: 0x166C988
	public float GetCurrentTimeScale() { }

	// RVA: 0x166C990 Offset: 0x166C990 VA: 0x166C990
	private void OnAnimEvent(AnimationEvent ev) { }

	// RVA: 0x166CADC Offset: 0x166CADC VA: 0x166CADC
	public void AttachCl() { }

	// RVA: 0x166CAE0 Offset: 0x166CAE0 VA: 0x166CAE0
	public void loadAnimationEvents(TextAsset data, int svtId, int level) { }

	// RVA: 0x166D310 Offset: 0x166D310 VA: 0x166D310
	private void OnEnable() { }

	// RVA: 0x166D47C Offset: 0x166D47C VA: 0x166D47C
	public GameObject GetPrefabNode(string name) { }

	// RVA: 0x166D6B4 Offset: 0x166D6B4 VA: 0x166D6B4
	public void SetConnectPrefabNode(string name, bool isConnect = True) { }

	// RVA: 0x166D768 Offset: 0x166D768 VA: 0x166D768
	public void SetConnectPrefabNode(GameObject obj, bool isConnect = True) { }

	// RVA: 0x166DAA4 Offset: 0x166DAA4 VA: 0x166DAA4
	public bool IsYTransparenceShader() { }

	// RVA: 0x166DCF4 Offset: 0x166DCF4 VA: 0x166DCF4
	public void SetYTransparenceShaderProperty(float value, string propertyName) { }

	// RVA: 0x166DEBC Offset: 0x166DEBC VA: 0x166DEBC
	public void SetTempShaderFloatProperty(float value, string propertyName = "_y0") { }

	// RVA: 0x166E184 Offset: 0x166E184 VA: 0x166E184
	public void RevertShaderFloatProperty() { }

	// RVA: 0x166C600 Offset: 0x166C600 VA: 0x166C600
	private void DebugPrint(string str) { }

	// RVA: 0x166E3F4 Offset: 0x166E3F4 VA: 0x166E3F4
	public string getRealAnimationName(string animationName) { }

	// RVA: 0x166E4B8 Offset: 0x166E4B8 VA: 0x166E4B8
	public void SetActiveActorEffectFromNodeName(string nodeName, bool isActive) { }

	// RVA: 0x166E5A4 Offset: 0x166E5A4 VA: 0x166E5A4
	public void SetActiveActorEffectFromEffectName(string effectName, bool isActive) { }

	// RVA: 0x166E76C Offset: 0x166E76C VA: 0x166E76C
	public void SetActiveActorEffectAll(bool isActive) { }

	// RVA: 0x166E8EC Offset: 0x166E8EC VA: 0x166E8EC
	public string GetRealAnimName(string targetName) { }

	// RVA: 0x166E988 Offset: 0x166E988 VA: 0x166E988
	public void SetTempDefaultAnimation(string updateAnimName) { }

	// RVA: 0x166EDD4 Offset: 0x166EDD4 VA: 0x166EDD4
	public void RevertDefaultAnimation() { }

	// RVA: 0x166EF38 Offset: 0x166EF38 VA: 0x166EF38
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A534 Offset: 0xD3A534 VA: 0xD3A534
	// RVA: 0x166F3B8 Offset: 0x166F3B8 VA: 0x166F3B8
	private static bool <inSetEvolutionLevel>m__0(Transform p) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A544 Offset: 0xD3A544 VA: 0xD3A544
	// RVA: 0x166F50C Offset: 0x166F50C VA: 0x166F50C
	private static bool <inSetEvolutionLevel>m__1(Transform p) { }
}

// Namespace: 
public sealed class BattleFBXComponent.onEventDelegate : MulticastDelegate // TypeDefIndex: 8870
{
	// Methods

	// RVA: 0x166F968 Offset: 0x166F968 VA: 0x166F968
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x166971C Offset: 0x166971C VA: 0x166971C Slot: 11
	public virtual void Invoke(string n) { }

	// RVA: 0x166F978 Offset: 0x166F978 VA: 0x166F978 Slot: 12
	public virtual IAsyncResult BeginInvoke(string n, AsyncCallback callback, object object) { }

	// RVA: 0x166F99C Offset: 0x166F99C VA: 0x166F99C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private class BattleFBXComponent.AnimEvent // TypeDefIndex: 8871
{
	// Fields
	public float time; // 0x10
	public string tag; // 0x18
	public string param; // 0x20

	// Methods

	// RVA: 0x166D308 Offset: 0x166D308 VA: 0x166D308
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE40 Offset: 0xCAFE40 VA: 0xCAFE40
private sealed class BattleFBXComponent.<AnimationCheck>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8872
{
	// Fields
	internal string <prevname>__0; // 0x10
	internal BattleFBXComponent $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48014 Offset: 0xD48014 VA: 0xD48014
	// RVA: 0x166C978 Offset: 0x166C978 VA: 0x166C978
	public void .ctor() { }

	// RVA: 0x166F5C8 Offset: 0x166F5C8 VA: 0x166F5C8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48024 Offset: 0xD48024 VA: 0xD48024
	// RVA: 0x166F8A4 Offset: 0x166F8A4 VA: 0x166F8A4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48034 Offset: 0xD48034 VA: 0xD48034
	// RVA: 0x166F8AC Offset: 0x166F8AC VA: 0x166F8AC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48044 Offset: 0xD48044 VA: 0xD48044
	// RVA: 0x166F8B4 Offset: 0x166F8B4 VA: 0x166F8B4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48054 Offset: 0xD48054 VA: 0xD48054
	// RVA: 0x166F8C8 Offset: 0x166F8C8 VA: 0x166F8C8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFE50 Offset: 0xCAFE50 VA: 0xCAFE50
private sealed class BattleFBXComponent.<IsYTransparenceShader>c__AnonStorey1 // TypeDefIndex: 8873
{
	// Fields
	internal string skinShaderName; // 0x10

	// Methods

	// RVA: 0x166DCEC Offset: 0x166DCEC VA: 0x166DCEC
	public void .ctor() { }

	// RVA: 0x166F930 Offset: 0x166F930 VA: 0x166F930
	internal bool <>m__0(string shaderName) { }
}

// Namespace: 
public class BattleFieldData : AiInterface // TypeDefIndex: 8874
{
	// Fields
	public int index; // 0x10
	public int uniqueId; // 0x14
	public AiState aiState; // 0x18
	public BattleFieldData.AiField aiField; // 0x20
	private BattleFieldData.SaveData tmpsave; // 0x28
	private double[] wkZeroParam; // 0x30

	// Methods

	// RVA: 0x166F9A8 Offset: 0x166F9A8 VA: 0x166F9A8
	public void .ctor() { }

	// RVA: 0x166FA30 Offset: 0x166FA30 VA: 0x166FA30
	public void .ctor(int inIndex, object obj) { }

	// RVA: 0x166FCDC Offset: 0x166FCDC VA: 0x166FCDC
	public int getUniqueID() { }

	// RVA: 0x166FCE4 Offset: 0x166FCE4 VA: 0x166FCE4
	public int getIndex() { }

	// RVA: 0x166FCEC Offset: 0x166FCEC VA: 0x166FCEC
	public AiState getAiState() { }

	// RVA: 0x166FCF4 Offset: 0x166FCF4 VA: 0x166FCF4
	public BattleFieldData.SaveData getSaveData() { }

	// RVA: 0x166FD50 Offset: 0x166FD50 VA: 0x166FD50
	public void setSaveData(BattleFieldData.SaveData save) { }

	// RVA: 0x166FD98 Offset: 0x166FD98 VA: 0x166FD98 Slot: 4
	public double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkparams) { }

	// RVA: 0x166FF64 Offset: 0x166FF64 VA: 0x166FF64 Slot: 5
	public bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv) { }
}

// Namespace: 
public class BattleFieldData.AiField // TypeDefIndex: 8875
{
	// Fields
	public int day; // 0x10
	public int id; // 0x14

	// Methods

	// RVA: 0x166FCD4 Offset: 0x166FCD4 VA: 0x166FCD4
	public void .ctor() { }
}

// Namespace: 
public class BattleFieldData.SaveData // TypeDefIndex: 8876
{
	// Fields
	[PackKeyAttribute] // RVA: 0xCCFE0C Offset: 0xCCFE0C VA: 0xCCFE0C
	public AiState.SaveData aistateSave; // 0x10

	// Methods

	// RVA: 0x166FA28 Offset: 0x166FA28 VA: 0x166FA28
	public void .ctor() { }
}

// Namespace: 
public class BattleFieldEffectComponent : BaseMonoBehaviour // TypeDefIndex: 8877
{
	// Fields
	public Transform root2D; // 0x18
	public GameObject[] fieldeffect; // 0x20
	public Color[] ambientlist; // 0x28
	public int[] bglist; // 0x30
	private GameObject viewobject; // 0x38

	// Methods

	// RVA: 0x166FF6C Offset: 0x166FF6C VA: 0x166FF6C
	public void .ctor() { }

	// RVA: 0x166FF74 Offset: 0x166FF74 VA: 0x166FF74
	public string[] getFieldEffects() { }

	// RVA: 0x16700B4 Offset: 0x16700B4 VA: 0x16700B4
	public void setFieldEffect(int index) { }

	// RVA: 0x16701D0 Offset: 0x16701D0 VA: 0x16701D0
	public int getAmbientColors() { }

	// RVA: 0x16701FC Offset: 0x16701FC VA: 0x16701FC
	public void setAmbientColor(int index) { }
}

// Namespace: 
public class BattleFieldMotionComponent : BaseMonoBehaviour // TypeDefIndex: 8878
{
	// Fields
	private BattlePerformance perf; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public Transform pop_playerTr; // 0x28
	public Transform pop_enemyTr; // 0x30
	public Transform[] battle_playerTr; // 0x38
	public Transform[] battle_enemyTr; // 0x40
	public Transform[] tactical_playerTr; // 0x48
	public Transform[] tactical_enemyTr; // 0x50
	public GameObject playerStage; // 0x58
