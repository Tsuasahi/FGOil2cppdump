
	// Properties
	public float EffectInterval { get; set; }

	// Methods

	// RVA: 0x10D0E50 Offset: 0x10D0E50 VA: 0x10D0E50
	public void .ctor(float interval = 0.3, bool isSetNextPossibleTime = True) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB88 Offset: 0xCCCB88 VA: 0xCCCB88
	// RVA: 0x10D0EF0 Offset: 0x10D0EF0 VA: 0x10D0EF0
	private void set_EffectInterval(float value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCB98 Offset: 0xCCCB98 VA: 0xCCCB98
	// RVA: 0x10D0EF8 Offset: 0x10D0EF8 VA: 0x10D0EF8
	public float get_EffectInterval() { }

	// RVA: 0x10D0F00 Offset: 0x10D0F00 VA: 0x10D0F00
	public float GetNextEffectDelay(int targetId, BattleServantData svtData, int delayNum = 0, bool isSetInterval = True, bool isSetNextTime = True) { }

	// RVA: 0x10D109C Offset: 0x10D109C VA: 0x10D109C
	public float GetMaxInterval() { }
}

// Namespace: 
public class DisplayEffectArgument // TypeDefIndex: 8855
{
	// Fields
	public GameObject actObj; // 0x10
	public int funcIndex; // 0x18
	public BattleActionData actData; // 0x20
	public bool isCommandAfter; // 0x28
	public bool isTreasureDevice; // 0x29
	public string attachNodeName; // 0x30
	public bool ispopAdjustment; // 0x38
	public Vector3 buffOffset; // 0x3C
	public Vector3 popupOffset; // 0x48
	public int[] overwriteEffectIds; // 0x58
	public int[] fieldIndiv; // 0x60

	// Methods

	// RVA: 0x10D0C64 Offset: 0x10D0C64 VA: 0x10D0C64
	public void .ctor(GameObject actObj, int funcIndex, BattleActionData actData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", bool ispopAdjustment = False) { }

	// RVA: 0x10D0D9C Offset: 0x10D0D9C VA: 0x10D0D9C
	public DisplayEffectArgument SetBuffParam(Vector3 buffOffset, Vector3 popupOffset, int[] overwriteEffectIds, int[] fieldIndiv) { }
}

// Namespace: 
public class BattleInfoOffsetPosData // TypeDefIndex: 8856
{
	// Fields
	protected GameObject obj; // 0x10
	protected Vector3 offset; // 0x18
	protected readonly Vector3 offsetZero; // 0x24

	// Properties
	public bool IsActive { get; }
	public Vector3 Offset { get; }

	// Methods

	// RVA: 0x1133694 Offset: 0x1133694 VA: 0x1133694
	public void .ctor(GameObject obj, Vector3 offset) { }

	// RVA: 0x1133744 Offset: 0x1133744 VA: 0x1133744
	public bool get_IsActive() { }

	// RVA: 0x11337E4 Offset: 0x11337E4 VA: 0x11337E4
	public Vector3 get_Offset() { }
}

// Namespace: 
public class UseSkillEachTurn // TypeDefIndex: 8857
{
	// Fields
	private long waveTurn; // 0x10
	private HashSet<long> hashSkillId; // 0x18

	// Methods

	// RVA: 0x1AFCAB8 Offset: 0x1AFCAB8 VA: 0x1AFCAB8
	public void .ctor() { }

	// RVA: 0x1AFCB28 Offset: 0x1AFCB28 VA: 0x1AFCB28
	public void AddUseSkillId(long waveTurn, int skillId) { }

	// RVA: 0x1AFCBD8 Offset: 0x1AFCBD8 VA: 0x1AFCBD8
	public bool IsUseThisTurn(BattleData data, long[] skillIds) { }

	// RVA: 0x1AFCCA8 Offset: 0x1AFCCA8 VA: 0x1AFCCA8
	public UseSkillEachTurn.SaveData GetSaveData() { }

	// RVA: 0x1AFCD54 Offset: 0x1AFCD54 VA: 0x1AFCD54
	public void SetSaveData(UseSkillEachTurn.SaveData sv) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCBA8 Offset: 0xCCCBA8 VA: 0xCCCBA8
	// RVA: 0x1AFCDDC Offset: 0x1AFCDDC VA: 0x1AFCDDC
	private bool <IsUseThisTurn>m__0(long id) { }
}

// Namespace: 
public class UseSkillEachTurn.SaveData // TypeDefIndex: 8858
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC628D0 Offset: 0xC628D0 VA: 0xC628D0
	public long waveTurn; // 0x10
	[PackKeyAttribute] // RVA: 0xC62908 Offset: 0xC62908 VA: 0xC62908
	public long[] skillIds; // 0x18

	// Methods

	// RVA: 0x1AFCD4C Offset: 0x1AFCD4C VA: 0x1AFCD4C
	public void .ctor() { }
}

// Namespace: 
public static class BattleDataDefine // TypeDefIndex: 8859
{
	// Fields
	public static readonly int OVERWRITE_ATK_RATE_PRIORITY; // 0x0
	public static readonly int OVERWRITE_DEF_RATE_PRIORITY; // 0x4
	public static readonly float PERCENTAGE_DENOMINATOR; // 0x8
	public static readonly float PERMILLAGE_DENOMINATOR; // 0xC
	public static readonly int CRITICAL_HIT_RANDOM_MAX; // 0x10
	public const float SIDE_EFFECT_TOTAL_TIME = 1.25;
	public const float EFFECT_INTERVAL_TIME = 0.3;
	public const float EFFECT_NO_INTERVAL_TIME = 0.01;
	public const int DEFAULT_FIELD_NUM = 3;
	public static readonly string ASSET_BATTLE_COMMON; // 0x18

	// Methods

	// RVA: 0x111866C Offset: 0x111866C VA: 0x111866C
	private static void .cctor() { }
}

// Namespace: 
public enum BattleDataDefine.FieldActorPosition // TypeDefIndex: 8860
{
	// Fields
	public int value__; // 0x0
	public const BattleDataDefine.FieldActorPosition FRONT = 0;
	public const BattleDataDefine.FieldActorPosition CENTER = 1;
	public const BattleDataDefine.FieldActorPosition BACK = 2;
}

// Namespace: 
public enum BattleDataDefine.RaidType // TypeDefIndex: 8861
{
	// Fields
	public int value__; // 0x0
	public const BattleDataDefine.RaidType NONE = 0;
	public const BattleDataDefine.RaidType RAID = 1;
	public const BattleDataDefine.RaidType SUPER_BOSS = 2;
}

// Namespace: 
public static class BattleDebug // TypeDefIndex: 8862
{
	// Fields
	private static Queue<string> logQueue; // 0x0
	private const int MAXQUEUE = 1000;

	// Methods

	// RVA: 0x1118708 Offset: 0x1118708 VA: 0x1118708
	public static BattleDebug.TAG getTag(int param) { }

	[ConditionalAttribute] // RVA: 0xCCCBB8 Offset: 0xCCCBB8 VA: 0xCCCBB8
	// RVA: 0x111870C Offset: 0x111870C VA: 0x111870C
	public static void Log(string str, BattleDebug.TAG tag = 0) { }

	[ConditionalAttribute] // RVA: 0xCCCBF0 Offset: 0xCCCBF0 VA: 0xCCCBF0
	// RVA: 0x1118710 Offset: 0x1118710 VA: 0x1118710
	public static void Log(LinkedList<BattleLogicTask> taskList, BattleDebug.TAG tag = 0) { }

	// RVA: 0x1118714 Offset: 0x1118714 VA: 0x1118714
	public static void Reset() { }

	// RVA: 0x1118798 Offset: 0x1118798 VA: 0x1118798
	public static string[] getLoglist(string serchText, BattleDebug.TAG tag = 0, bool reverseFlg = False) { }

	[ConditionalAttribute] // RVA: 0xCCCC28 Offset: 0xCCCC28 VA: 0xCCCC28
	// RVA: 0x111899C Offset: 0x111899C VA: 0x111899C
	public static void CheckNull(string errorText, object obj) { }

	[ConditionalAttribute] // RVA: 0xCCCC60 Offset: 0xCCCC60 VA: 0xCCCC60
	// RVA: 0x1118A28 Offset: 0x1118A28 VA: 0x1118A28
	public static void DebugLog(string str) { }

	[ConditionalAttribute] // RVA: 0xCCCC98 Offset: 0xCCCC98 VA: 0xCCCC98
	// RVA: 0x1118A2C Offset: 0x1118A2C VA: 0x1118A2C
	public static void WarningLog(string str) { }

	[ConditionalAttribute] // RVA: 0xCCCCD0 Offset: 0xCCCCD0 VA: 0xCCCCD0
	// RVA: 0x1118A30 Offset: 0x1118A30 VA: 0x1118A30
	public static void ErrorLog(string str) { }

	[ConditionalAttribute] // RVA: 0xCCCD08 Offset: 0xCCCD08 VA: 0xCCCD08
	// RVA: 0x1118A34 Offset: 0x1118A34 VA: 0x1118A34
	public static void OutputError(string errorText) { }

	// RVA: 0x1118AA4 Offset: 0x1118AA4 VA: 0x1118AA4
	private static void .cctor() { }
}

// Namespace: 
public enum BattleDebug.TAG // TypeDefIndex: 8863
{
	// Fields
	public int value__; // 0x0
	public const BattleDebug.TAG NONE = 0;
	public const BattleDebug.TAG SKILL = 1;
	public const BattleDebug.TAG ACTION = 2;
	public const BattleDebug.TAG FUNCTION = 3;
	public const BattleDebug.TAG AI = 4;
	public const BattleDebug.TAG ANIMATION = 5;
	public const BattleDebug.TAG KEISAN = 6;
	public const BattleDebug.TAG PRINT = 7;
	public const BattleDebug.TAG BUFF = 8;
	public const BattleDebug.TAG PERF = 9;
	public const BattleDebug.TAG LOGIC = 10;
	public const BattleDebug.TAG NEW_AI = 11;
	public const BattleDebug.TAG DEBUG = 100;
	public const BattleDebug.TAG WARNING = 101;
	public const BattleDebug.TAG ERROR = 102;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43D04 Offset: 0xC43D04 VA: 0xC43D04
private sealed class BattleDebug.<getLoglist>c__AnonStorey0 // TypeDefIndex: 8864
{
	// Fields
	internal BattleDebug.TAG tag; // 0x10
	internal string serchText; // 0x18

	// Methods

	// RVA: 0x1118994 Offset: 0x1118994 VA: 0x1118994
	public void .ctor() { }

	// RVA: 0x1118B18 Offset: 0x1118B18 VA: 0x1118B18
	internal bool <>m__0(string s) { }

	// RVA: 0x1118C18 Offset: 0x1118C18 VA: 0x1118C18
	internal bool <>m__1(string s) { }
}

// Namespace: 
public class BattleDeckServantData : DeckServantData // TypeDefIndex: 8865
{
	// Fields
	public int uniqueId; // 0x3C
	public string name; // 0x40
	public int roleType; // 0x48
	public DropInfo[] dropInfos; // 0x50
	public int npcId; // 0x58
	public Dictionary<string, object> enemyScript; // 0x60
	public Dictionary<string, object> infoScript; // 0x68
	public int index; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC62940 Offset: 0xC62940 VA: 0xC62940
	private static Converter<object, int> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC62950 Offset: 0xC62950 VA: 0xC62950
	private static Converter<object, int> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC62960 Offset: 0xC62960 VA: 0xC62960
	private static Converter<object, int> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC62970 Offset: 0xC62970 VA: 0xC62970
	private static Converter<object, int> <>f__am$cache3; // 0x18

	// Methods

	// RVA: 0x1118CC8 Offset: 0x1118CC8 VA: 0x1118CC8
	public void .ctor() { }

	// RVA: 0x1118CD0 Offset: 0x1118CD0 VA: 0x1118CD0
	public bool isEscape() { }

	// RVA: 0x1118DE0 Offset: 0x1118DE0 VA: 0x1118DE0
	public bool isDeadStand() { }

	// RVA: 0x1118E34 Offset: 0x1118E34 VA: 0x1118E34
	public bool isDeadEffect() { }

	// RVA: 0x1118E88 Offset: 0x1118E88 VA: 0x1118E88
	public bool isDeadWait() { }

	// RVA: 0x1118EDC Offset: 0x1118EDC VA: 0x1118EDC
	public bool isAppear() { }

	// RVA: 0x1118F30 Offset: 0x1118F30 VA: 0x1118F30
	public bool IsNoVoice() { }

	// RVA: 0x1118F84 Offset: 0x1118F84 VA: 0x1118F84
	public int getRoleType() { }

	// RVA: 0x1118F8C Offset: 0x1118F8C VA: 0x1118F8C
	public bool isRaid() { }

	// RVA: 0x1119050 Offset: 0x1119050 VA: 0x1119050
	public int getRaidId() { }

	// RVA: 0x1119154 Offset: 0x1119154 VA: 0x1119154
	public bool isSuperBoss() { }

	// RVA: 0x11191A4 Offset: 0x11191A4 VA: 0x11191A4
	public int getSuperBossId() { }

	// RVA: 0x11191F8 Offset: 0x11191F8 VA: 0x11191F8
	public int getHpBarType() { }

	// RVA: 0x111924C Offset: 0x111924C VA: 0x111924C
	public bool isLeader() { }

	// RVA: 0x11192A0 Offset: 0x11192A0 VA: 0x11192A0
	public int getScale() { }

	// RVA: 0x11192F4 Offset: 0x11192F4 VA: 0x11192F4
	private int getOverWriteSvtVoiceIdOld() { }

	// RVA: 0x1119348 Offset: 0x1119348 VA: 0x1119348
	public bool isAddition() { }

	// RVA: 0x111940C Offset: 0x111940C VA: 0x111940C
	public string getEnemyTreasureDeviceVoiceId() { }

	// RVA: 0x111956C Offset: 0x111956C VA: 0x111956C
	public int getChangeAttri() { }

	// RVA: 0x11195C0 Offset: 0x11195C0 VA: 0x11195C0
	public int getBillBoardGroup() { }

	// RVA: 0x1119614 Offset: 0x1119614 VA: 0x1119614
	public bool isMultiTargetCore() { }

	// RVA: 0x1119668 Offset: 0x1119668 VA: 0x1119668
	public bool isMultiTargetUp() { }

	// RVA: 0x11196BC Offset: 0x11196BC VA: 0x11196BC
	public bool isMultiTargetUnder() { }

	// RVA: 0x1119710 Offset: 0x1119710 VA: 0x1119710
	public bool isMultiTargetBattleStartPos() { }

	// RVA: 0x1119764 Offset: 0x1119764 VA: 0x1119764
	public int getMultiTargetBattleDeadChangePos() { }

	// RVA: 0x1118D24 Offset: 0x1118D24 VA: 0x1118D24
	public bool checkScript(string key, int val) { }

	// RVA: 0x1118FDC Offset: 0x1118FDC VA: 0x1118FDC
	public bool isScript(string key) { }

	// RVA: 0x1119398 Offset: 0x1119398 VA: 0x1119398
	public bool isInfoScript(string key) { }

	// RVA: 0x11190A4 Offset: 0x11190A4 VA: 0x11190A4
	public int getScript(string key, int defVal = 0) { }

	// RVA: 0x1119460 Offset: 0x1119460 VA: 0x1119460
	public string getScriptStr(string key, string defVal) { }

	// RVA: 0x1118110 Offset: 0x1118110 VA: 0x1118110
	public int getUniqueID() { }

	// RVA: 0x11197B8 Offset: 0x11197B8 VA: 0x11197B8
	public long getUserServantID() { }

	// RVA: 0x11197C0 Offset: 0x11197C0 VA: 0x11197C0
	public int getSummonNpcId(int index) { }

	// RVA: 0x11199EC Offset: 0x11199EC VA: 0x11199EC
	public int[] getShiftList() { }

	// RVA: 0x1119BCC Offset: 0x1119BCC VA: 0x1119BCC
	public int GetDefShiftPosition(long defVal = -1) { }

	// RVA: 0x1119C3C Offset: 0x1119C3C VA: 0x1119C3C
	public int[] getShiftClearBuffIndiv() { }

	// RVA: 0x1119E1C Offset: 0x1119E1C VA: 0x1119E1C
	public int[] getChangeList() { }

	// RVA: 0x1119FFC Offset: 0x1119FFC VA: 0x1119FFC
	public bool IsChangeDropItemByShift() { }

	// RVA: 0x111A04C Offset: 0x111A04C VA: 0x111A04C
	public bool getIsForceDropItem() { }

	// RVA: 0x111A0B8 Offset: 0x111A0B8 VA: 0x111A0B8
	public bool checkEntryIndex(int entryIndex) { }

	// RVA: 0x111A13C Offset: 0x111A13C VA: 0x111A13C
	public string getTDName() { }

	// RVA: 0x111A1B4 Offset: 0x111A1B4 VA: 0x111A1B4
	public string getTDRuby() { }

	// RVA: 0x111A22C Offset: 0x111A22C VA: 0x111A22C
	public bool getEnableNpInfo() { }

	// RVA: 0x111A2A4 Offset: 0x111A2A4 VA: 0x111A2A4
	public int getNpCharge() { }

	// RVA: 0x111A31C Offset: 0x111A31C VA: 0x111A31C
	private bool tryGetSvtChange(out Dictionary<string, object> dict) { }

	// RVA: 0x111A420 Offset: 0x111A420 VA: 0x111A420
	private bool tryGetSvtChangeInt(string key, int priority, out int value) { }

	// RVA: 0x111A710 Offset: 0x111A710 VA: 0x111A710
	public int getOverwriteSvtVoiceId(int battleSvtId) { }

	// RVA: 0x111A7F8 Offset: 0x111A7F8 VA: 0x111A7F8
	public bool IsLeaveEventJoin() { }

	// RVA: 0x111A908 Offset: 0x111A908 VA: 0x111A908
	public bool isHideShadow() { }

	// RVA: 0x111A95C Offset: 0x111A95C VA: 0x111A95C
	public int GetFollowerType(int oldFollowerType) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCD40 Offset: 0xCCCD40 VA: 0xCCCD40
	// RVA: 0x111A96C Offset: 0x111A96C VA: 0x111A96C
	private static int <getSummonNpcId>m__0(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCD50 Offset: 0xCCCD50 VA: 0xCCCD50
	// RVA: 0x111A9E8 Offset: 0x111A9E8 VA: 0x111A9E8
	private static int <getShiftList>m__1(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCD60 Offset: 0xCCCD60 VA: 0xCCCD60
	// RVA: 0x111AA64 Offset: 0x111AA64 VA: 0x111AA64
	private static int <getShiftClearBuffIndiv>m__2(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCD70 Offset: 0xCCCD70 VA: 0xCCCD70
	// RVA: 0x111AAE0 Offset: 0x111AAE0 VA: 0x111AAE0
	private static int <getChangeList>m__3(object x) { }
}

// Namespace: 
public class BattleDefenceTargetData // TypeDefIndex: 8866
{
	// Fields
	public int nowHp; // 0x10
	public int maxHp; // 0x14
	public BattleBuffData buffData; // 0x18
	public int uiId; // 0x20

	// Methods

	// RVA: 0x111AB5C Offset: 0x111AB5C VA: 0x111AB5C
	public void .ctor() { }

	// RVA: 0x111AB64 Offset: 0x111AB64 VA: 0x111AB64
	public void Initialize(int nowHp, int maxHp, int uiId) { }

	// RVA: 0x111AC08 Offset: 0x111AC08 VA: 0x111AC08
	public BattleDefenceTargetData.SaveData GetSaveData() { }

	// RVA: 0x111ACF4 Offset: 0x111ACF4 VA: 0x111ACF4
	public void SetSaveData(BattleDefenceTargetData.SaveData saveData) { }

	// RVA: 0x111ADAC Offset: 0x111ADAC VA: 0x111ADAC
	public void DamageResult(int damage) { }

	// RVA: 0x111ADC0 Offset: 0x111ADC0 VA: 0x111ADC0
	public void BuffTurnProgress(BattlePerformanceDefenceTarget defenceTarget) { }

	// RVA: 0x111AFAC Offset: 0x111AFAC VA: 0x111AFAC
	public void RecoverDefenceTarget(int recoverValue) { }
}

// Namespace: 
public class BattleDefenceTargetData.SaveData // TypeDefIndex: 8867
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC62980 Offset: 0xC62980 VA: 0xC62980
	public int nowHp; // 0x10
	[PackKeyAttribute] // RVA: 0xC629B8 Offset: 0xC629B8 VA: 0xC629B8
	public int maxHp; // 0x14
	[PackKeyAttribute] // RVA: 0xC629F0 Offset: 0xC629F0 VA: 0xC629F0
	public BattleBuffData.SaveData buffDataSave; // 0x18
	[PackKeyAttribute] // RVA: 0xC62A28 Offset: 0xC62A28 VA: 0xC62A28
	public int uiId; // 0x20

	// Methods

	// RVA: 0x111ACEC Offset: 0x111ACEC VA: 0x111ACEC
	public void .ctor() { }
}

// Namespace: 
public class BattleDropItem // TypeDefIndex: 8868
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC62A60 Offset: 0xC62A60 VA: 0xC62A60
	public bool isNew; // 0x10
	[PackKeyAttribute] // RVA: 0xC62A98 Offset: 0xC62A98 VA: 0xC62A98
	public int type; // 0x14
	[PackKeyAttribute] // RVA: 0xC62AD0 Offset: 0xC62AD0 VA: 0xC62AD0
	public int objectId; // 0x18
	[PackKeyAttribute] // RVA: 0xC62B08 Offset: 0xC62B08 VA: 0xC62B08
	public long userSvtId; // 0x20
	[PackKeyAttribute] // RVA: 0xC62B40 Offset: 0xC62B40 VA: 0xC62B40
	public int limitCount; // 0x28
	[PackKeyAttribute] // RVA: 0xC62B78 Offset: 0xC62B78 VA: 0xC62B78
	public int num; // 0x2C
	[PackKeyAttribute] // RVA: 0xC62BB0 Offset: 0xC62BB0 VA: 0xC62BB0
	public bool isRateUp; // 0x30
	[PackKeyAttribute] // RVA: 0xC62BE8 Offset: 0xC62BE8 VA: 0xC62BE8
	public int originalNum; // 0x34
	[PackKeyAttribute] // RVA: 0xC62C20 Offset: 0xC62C20 VA: 0xC62C20
	public int eventGroupId; // 0x38
	[PackKeyAttribute] // RVA: 0xC62C58 Offset: 0xC62C58 VA: 0xC62C58
	public int rarity; // 0x3C
	[PackKeyAttribute] // RVA: 0xC62C90 Offset: 0xC62C90 VA: 0xC62C90
	public int sellQp; // 0x40
	[PackKeyAttribute] // RVA: 0xC62CC8 Offset: 0xC62CC8 VA: 0xC62CC8
	public int sellMana; // 0x44
	[PackKeyAttribute] // RVA: 0xC62D00 Offset: 0xC62D00 VA: 0xC62D00
	public int dropUpRate; // 0x48

	// Methods

	// RVA: 0x111F4EC Offset: 0x111F4EC VA: 0x111F4EC
	public void .ctor() { }

	// RVA: 0x111F4FC Offset: 0x111F4FC VA: 0x111F4FC
	public void setData(DropInfo info) { }

	// RVA: 0x111F5D8 Offset: 0x111F5D8 VA: 0x111F5D8
	public int getTotalNum() { }

	// RVA: 0x111F600 Offset: 0x111F600 VA: 0x111F600
	public int getOriginalNum() { }

	// RVA: 0x111F644 Offset: 0x111F644 VA: 0x111F644
	public int getBonusAddNum() { }

	// RVA: 0x111F620 Offset: 0x111F620 VA: 0x111F620
	public int getBonusAddNumClamp() { }

	// RVA: 0x111F664 Offset: 0x111F664 VA: 0x111F664
	public bool isBonusAdd() { }

	// RVA: 0x111F68C Offset: 0x111F68C VA: 0x111F68C
	public void setNum(int num, int original) { }

	// RVA: 0x111F698 Offset: 0x111F698 VA: 0x111F698
	public bool isAutoSellItem() { }
}

// Namespace: 
public class BattleDropItemComponent : MonoBehaviour // TypeDefIndex: 8869
{
	// Fields
	public GameObject newflag; // 0x18
	public GameObject additemflg; // 0x20
	public BattleServantFaceIconComponent servant; // 0x28
	public BattleItemIconComponent item; // 0x30
	public GameObject possessionRoot; // 0x38
	public UILabel possessionLabel; // 0x40
	public AutoSellInfoComponent autoSellInfo; // 0x48
	public UISprite back; // 0x50
	public GameObject AcquisitionUpObj; // 0x58
	public UILabel AcquisitionUpLabel; // 0x60
	public UISprite materialTdSprite; // 0x68
	private const int NORMAL_RATE = 1000;
	private static readonly float PossessionLabelWidth; // 0x0
	private BattleDropItem itemData; // 0x70
	protected BattleDropItemComponent.ClickDelegate callbackFunc; // 0x78
	private int possessionNum; // 0x80
	private Gift.Type gifttype; // 0x84

	// Methods

	// RVA: 0x111F6BC Offset: 0x111F6BC VA: 0x111F6BC
	public void .ctor() { }

	// RVA: 0x111F6C4 Offset: 0x111F6C4 VA: 0x111F6C4
	public void SetTouch(bool flg) { }

	// RVA: 0x111F7A0 Offset: 0x111F7A0 VA: 0x111F7A0
	public void SetDepth(int basedepth) { }

	// RVA: 0x111F7A4 Offset: 0x111F7A4 VA: 0x111F7A4
	public void Set(BattleDropItem indata) { }

	// RVA: 0x1120348 Offset: 0x1120348 VA: 0x1120348
	public void ShowAcquisitionUp(BattleDropItem indata) { }

	// RVA: 0x112053C Offset: 0x112053C VA: 0x112053C
	public void Set(BattleDropItem indata, int possessionNum) { }

	// RVA: 0x1120544 Offset: 0x1120544 VA: 0x1120544
	public void SetCallBack(BattleDropItemComponent.ClickDelegate call) { }

	// RVA: 0x111F9D0 Offset: 0x111F9D0 VA: 0x111F9D0
	public void SetServant() { }

	// RVA: 0x111FC18 Offset: 0x111FC18 VA: 0x111FC18
	public void SetItem() { }

	// RVA: 0x111FEDC Offset: 0x111FEDC VA: 0x111FEDC
	public void SetCommandCode() { }

	// RVA: 0x1120050 Offset: 0x1120050 VA: 0x1120050
	public void SetEventPointBuff() { }

	// RVA: 0x11201D4 Offset: 0x11201D4 VA: 0x11201D4
	public void SetAutoSellItem() { }

	// RVA: 0x1120654 Offset: 0x1120654 VA: 0x1120654
	public void ShowAutoSellItem() { }

	// RVA: 0x112070C Offset: 0x112070C VA: 0x112070C
	public void Show() { }

	// RVA: 0x111F920 Offset: 0x111F920 VA: 0x111F920
	public void setRateUp(bool flg) { }

	// RVA: 0x112054C Offset: 0x112054C VA: 0x112054C
	public void SetMaterialTd(bool flg) { }

	// RVA: 0x1120744 Offset: 0x1120744 VA: 0x1120744
	public void ShowPossessionNum() { }

	// RVA: 0x1120BA8 Offset: 0x1120BA8 VA: 0x1120BA8
	public void ShowDropNum() { }

	// RVA: 0x1120974 Offset: 0x1120974 VA: 0x1120974
	public void SetPossession(int num) { }

	// RVA: 0x1120D0C Offset: 0x1120D0C VA: 0x1120D0C
	public void OnClick() { }

	// RVA: 0x1121190 Offset: 0x1121190 VA: 0x1121190
	private static void .cctor() { }
}

// Namespace: 
public sealed class BattleDropItemComponent.ClickDelegate : MulticastDelegate // TypeDefIndex: 8870
{
	// Methods

	// RVA: 0x11211E4 Offset: 0x11211E4 VA: 0x11211E4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1120DF0 Offset: 0x1120DF0 VA: 0x1120DF0 Slot: 11
	public virtual void Invoke(BattleDropItem item) { }

	// RVA: 0x11211F4 Offset: 0x11211F4 VA: 0x11211F4 Slot: 12
	public virtual IAsyncResult BeginInvoke(BattleDropItem item, AsyncCallback callback, object object) { }

	// RVA: 0x1121218 Offset: 0x1121218 VA: 0x1121218 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleEffectControl : BaseMonoBehaviour // TypeDefIndex: 8871
{
	// Fields
	[SerializeField] // RVA: 0xC62D38 Offset: 0xC62D38 VA: 0xC62D38
	private GameObject[] EffectList; // 0x18
	private Spawner spawner; // 0x20
	[SerializeField] // RVA: 0xC62D48 Offset: 0xC62D48 VA: 0xC62D48
	private GameObject[] damageObjectlist; // 0x28
	[SerializeField] // RVA: 0xC62D58 Offset: 0xC62D58 VA: 0xC62D58
	private GameObject buffIconObject; // 0x30
	[SerializeField] // RVA: 0xC62D68 Offset: 0xC62D68 VA: 0xC62D68
	private GameObject avoidanceObject; // 0x38
	[SerializeField] // RVA: 0xC62D78 Offset: 0xC62D78 VA: 0xC62D78
	private GameObject avoidanceTextObject; // 0x40
	[SerializeField] // RVA: 0xC62D88 Offset: 0xC62D88 VA: 0xC62D88
	private GameObject invincibleObject; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC62D98 Offset: 0xC62D98 VA: 0xC62D98
	[DebuggerBrowsableAttribute] // RVA: 0xC62D98 Offset: 0xC62D98 VA: 0xC62D98
	private GameObject <specialInvincibleObject>k__BackingField; // 0x50
	[SerializeField] // RVA: 0xC62DD4 Offset: 0xC62DD4 VA: 0xC62DD4
	private GameObject[] buffTextObjectlist; // 0x58
	[SerializeField] // RVA: 0xC62DE4 Offset: 0xC62DE4 VA: 0xC62DE4
	private GameObject[] buffTextClassIconObjectList; // 0x60

	// Properties
	public GameObject specialInvincibleObject { get; set; }

	// Methods

	// RVA: 0x1121DA0 Offset: 0x1121DA0 VA: 0x1121DA0
	public void .ctor() { }

	// RVA: 0x1121DA8 Offset: 0x1121DA8 VA: 0x1121DA8
	private void Start() { }

	// RVA: 0x11222C0 Offset: 0x11222C0 VA: 0x11222C0
	public GameObject getListEffect(BattleEffectControl.ID id) { }

	// RVA: 0x1122344 Offset: 0x1122344 VA: 0x1122344
	public GameObject getDamageObject(bool critical, bool week, bool resist) { }

	// RVA: 0x1122444 Offset: 0x1122444 VA: 0x1122444
	public GameObject setBuffIconObject(BattleBuffData.ShowBuffData[] bufflist) { }

	// RVA: 0x11225E0 Offset: 0x11225E0 VA: 0x11225E0
	public GameObject getavoidanceObject() { }

	// RVA: 0x11225E8 Offset: 0x11225E8 VA: 0x11225E8
	public GameObject GetAvoidanceTextObject() { }

	// RVA: 0x11225F0 Offset: 0x11225F0 VA: 0x11225F0
	public GameObject getinvincibleObject() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCD80 Offset: 0xCCCD80 VA: 0xCCCD80
	// RVA: 0x11225F8 Offset: 0x11225F8 VA: 0x11225F8
	public GameObject get_specialInvincibleObject() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCD90 Offset: 0xCCCD90 VA: 0xCCCD90
	// RVA: 0x1122600 Offset: 0x1122600 VA: 0x1122600
	private void set_specialInvincibleObject(GameObject value) { }

	// RVA: 0x1122608 Offset: 0x1122608 VA: 0x1122608
	public GameObject getBuffTextObject(int color) { }

	// RVA: 0x11226B4 Offset: 0x11226B4 VA: 0x11226B4
	public GameObject getBuffTextClassIconObject(int color) { }

	// RVA: 0x1122760 Offset: 0x1122760 VA: 0x1122760
	public GameObject getTreasureObject(int rarity, Transform rootTr) { }

	// RVA: 0x1122934 Offset: 0x1122934 VA: 0x1122934
	public GameObject getEffectInstantiate(BattleEffectControl.ID id) { }

	// RVA: 0x11229DC Offset: 0x11229DC VA: 0x11229DC
	public void destroyInstantiate(GameObject obj) { }

	// RVA: 0x1122A18 Offset: 0x1122A18 VA: 0x1122A18
	public void SetSpecialInvincibleObject(GameObject obj) { }
}

// Namespace: 
public enum BattleEffectControl.ID // TypeDefIndex: 8872
{
	// Fields
	public int value__; // 0x0
	public const BattleEffectControl.ID DAMAGE_NO = 0;
	public const BattleEffectControl.ID CRITICAL_DAMAGE__NO = 1;
	public const BattleEffectControl.ID TITLE_CRITICAL = 2;
	public const BattleEffectControl.ID TITLE_WEEK = 3;
	public const BattleEffectControl.ID STAR = 4;
	public const BattleEffectControl.ID SERVANT = 5;
	public const BattleEffectControl.ID HEAL_NO = 6;
	public const BattleEffectControl.ID REGIST = 7;
	public const BattleEffectControl.ID TITLE_CRITICAL_MISS = 8;
	public const BattleEffectControl.ID STAR_DEAL = 9;
}

// Namespace: 
public class BattleEffectForceFPS : MonoBehaviour // TypeDefIndex: 8873
{
	// Fields
	[SerializeField] // RVA: 0xC62DF4 Offset: 0xC62DF4 VA: 0xC62DF4
	private float targetFps; // 0x18
	[SerializeField] // RVA: 0xC62E04 Offset: 0xC62E04 VA: 0xC62E04
	[TooltipAttribute] // RVA: 0xC62E04 Offset: 0xC62E04 VA: 0xC62E04
	private SimpleAnimation[] targetSimpleAnimations; // 0x20
	[SerializeField] // RVA: 0xC62E50 Offset: 0xC62E50 VA: 0xC62E50
	[TooltipAttribute] // RVA: 0xC62E50 Offset: 0xC62E50 VA: 0xC62E50
	private Animation[] targetAnimations; // 0x28
	private float progressDeltaTime; // 0x30

	// Methods

	// RVA: 0x1122A20 Offset: 0x1122A20 VA: 0x1122A20
	public void .ctor() { }

	// RVA: 0x1122A30 Offset: 0x1122A30 VA: 0x1122A30
	private void Start() { }

	// RVA: 0x1122AC8 Offset: 0x1122AC8 VA: 0x1122AC8
	private void LateUpdate() { }
}

// Namespace: 
public static class BattleEffectUtility // TypeDefIndex: 8874
{
	// Fields
	public static int battleEffectId; // 0x0
	private static Vector3 wkVec; // 0x4
	private static EffectMaster effectMst; // 0x10
	private static AuraEffectPosOverwriteMaster auraPosOverwriteMst; // 0x18
	private static string[] scalelist; // 0x20

	// Methods

	// RVA: 0x1122FB8 Offset: 0x1122FB8 VA: 0x1122FB8
	public static int setBattleEffectId(int inId) { }

	// RVA: 0x1123030 Offset: 0x1123030 VA: 0x1123030
	public static GameObject loadEffectToNode(GameObject targetObject, int effectId, GameObject procObject, Vector3 offset, int svtId, int limitCount, BattleEffectUtility.EffectLoadArgument arg) { }

	// RVA: 0x1123D34 Offset: 0x1123D34 VA: 0x1123D34
	public static GameObject loadEffectToNode(GameObject targetObject, int effectId, GameObject procObject, int svtId, int limitCount) { }

	// RVA: 0x1123DDC Offset: 0x1123DDC VA: 0x1123DDC
	public static string GetSideEffectPath(int effectId) { }

	// RVA: 0x1123E7C Offset: 0x1123E7C VA: 0x1123E7C
	public static void showSideEffect(Transform parent, int effectId, Vector3 scl) { }

	// RVA: 0x1123FD0 Offset: 0x1123FD0 VA: 0x1123FD0
	public static GameObject loadActivateSideEffect() { }

	// RVA: 0x1124060 Offset: 0x1124060 VA: 0x1124060
	public static void AddRelatedFunctionEffectIdList(int[] funcIds, ref List<int> effectIdList) { }

	// RVA: 0x1124214 Offset: 0x1124214 VA: 0x1124214
	public static string[] GetBattleCommonEffectPathList(int[] effectIdList) { }

	// RVA: 0x1124408 Offset: 0x1124408 VA: 0x1124408
	public static void GetBattleCommonEffectPathAndName(string baseName, out string path, out string name) { }

	// RVA: 0x1124558 Offset: 0x1124558 VA: 0x1124558
	public static GameObject getEffectObjectSafe(int effectId, GameObject procObject, bool isPlaySe = True, float lostTime = 1) { }

	// RVA: 0x1123630 Offset: 0x1123630 VA: 0x1123630
	public static GameObject getEffectObject(int effectId, GameObject procObject, bool isPlaySe = True) { }

	// RVA: 0x112467C Offset: 0x112467C VA: 0x112467C
	public static string getEffectSeName(int effectId) { }

	// RVA: 0x1124748 Offset: 0x1124748 VA: 0x1124748
	public static GameObject getEffectObject(ResourceFolder folder, string name, GameObject actorObject) { }

	// RVA: 0x11248C0 Offset: 0x11248C0 VA: 0x11248C0
	public static GameObject ChangeServantView(GameObject actorObj, bool isShadow, bool isChoco) { }

	// RVA: 0x1124E4C Offset: 0x1124E4C VA: 0x1124E4C
	public static string getNodeNameFromEffectEntity(int id) { }

	// RVA: 0x1124FB0 Offset: 0x1124FB0 VA: 0x1124FB0
	private static void .cctor() { }
}

// Namespace: 
public enum BattleEffectUtility.EffectFolderType // TypeDefIndex: 8875
{
	// Fields
	public int value__; // 0x0
	public const BattleEffectUtility.EffectFolderType COMMON = 1;
	public const BattleEffectUtility.EffectFolderType NOBLE = 2;
	public const BattleEffectUtility.EffectFolderType WEAPON = 3;
	public const BattleEffectUtility.EffectFolderType BATTLEASSET = 4;
	public const BattleEffectUtility.EffectFolderType BATTLECOMMON = 5;
}

// Namespace: 
public class BattleEffectUtility.EffectLoadArgument // TypeDefIndex: 8876
{
	// Fields
	protected string effectNodeName; // 0x10

	// Methods

	// RVA: 0x11253F4 Offset: 0x11253F4 VA: 0x11253F4
	public void .ctor() { }

	// RVA: 0x11253FC Offset: 0x11253FC VA: 0x11253FC Slot: 4
	public virtual string GetParentNodeName(string defNodeName) { }

	// RVA: 0x112540C Offset: 0x112540C VA: 0x112540C Slot: 5
	public virtual Transform GetParentNode(GameObject targetObj, Transform defParentTr) { }
}

// Namespace: 
public class BattleEffectUtility.BuffEffectLoadArgument : BattleEffectUtility.EffectLoadArgument // TypeDefIndex: 8877
{
	// Methods

	// RVA: 0x112534C Offset: 0x112534C VA: 0x112534C
	public void .ctor(BattleActorControl bActor) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43D14 Offset: 0xC43D14 VA: 0xC43D14
private sealed class BattleEffectUtility.<showSideEffect>c__AnonStorey0 // TypeDefIndex: 8878
{
	// Fields
	internal string name; // 0x10
	internal Transform parent; // 0x18
	internal Vector3 scl; // 0x20

	// Methods

	// RVA: 0x1123FC8 Offset: 0x1123FC8 VA: 0x1123FC8
	public void .ctor() { }

	// RVA: 0x11251D4 Offset: 0x11251D4 VA: 0x11251D4
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public class BaseBattleEvent // TypeDefIndex: 8879
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC62E9C Offset: 0xC62E9C VA: 0xC62E9C
	[DebuggerBrowsableAttribute] // RVA: 0xC62E9C Offset: 0xC62E9C VA: 0xC62E9C
	private BattleData <Data>k__BackingField; // 0x10
	private int battleEndReduceBuffTurnFlag; // 0x18

	// Properties
	public BattleData Data { get; set; }
	public BattleEntity BattleEnt { get; }
	public BattleInfoData BattleInfo { get; }
	public virtual bool IsPrecedingPlayer { get; }
	public bool IsBattleEndReduceBuffTurn { get; }

	// Methods

	// RVA: 0xF64A40 Offset: 0xF64A40 VA: 0xF64A40
	public void .ctor() { }

	// RVA: 0xF64A50 Offset: 0xF64A50 VA: 0xF64A50
	public static BaseBattleEvent MakeBattleEvent(BattleData data) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCDA0 Offset: 0xCCCDA0 VA: 0xCCCDA0
	// RVA: 0xF64B34 Offset: 0xF64B34 VA: 0xF64B34
	private void set_Data(BattleData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCCDB0 Offset: 0xCCCDB0 VA: 0xCCCDB0
	// RVA: 0xF64B3C Offset: 0xF64B3C VA: 0xF64B3C
	public BattleData get_Data() { }

	// RVA: 0xF64B44 Offset: 0xF64B44 VA: 0xF64B44
	public BattleEntity get_BattleEnt() { }

	// RVA: 0xF64B74 Offset: 0xF64B74 VA: 0xF64B74
	public BattleInfoData get_BattleInfo() { }

	// RVA: 0xF64BA0 Offset: 0xF64BA0 VA: 0xF64BA0 Slot: 4
	public virtual bool get_IsPrecedingPlayer() { }

	// RVA: 0xF64BA8 Offset: 0xF64BA8 VA: 0xF64BA8
	public bool get_IsBattleEndReduceBuffTurn() { }

	// RVA: 0xF64C48 Offset: 0xF64C48 VA: 0xF64C48 Slot: 5
	public virtual void Init(BattleData data) { }

	// RVA: 0xF64C50 Offset: 0xF64C50 VA: 0xF64C50 Slot: 6
	public virtual BaseBattleServantEvent GetServantEvent() { }

	// RVA: 0xF64CB4 Offset: 0xF64CB4 VA: 0xF64CB4
	protected void InitAtkManager(bool isPrecedingPlayer, BattleData data) { }

	// RVA: 0xF64D0C Offset: 0xF64D0C VA: 0xF64D0C Slot: 7
	public virtual void InitWave() { }

	// RVA: 0xF64D10 Offset: 0xF64D10 VA: 0xF64D10 Slot: 8
	public virtual void InitBGData(ref int bgNo, ref int bgType) { }

	// RVA: 0xF64D14 Offset: 0xF64D14 VA: 0xF64D14 Slot: 9
	public virtual void InitStageData(StageEntity stage) { }

	// RVA: 0xF64D18 Offset: 0xF64D18 VA: 0xF64D18 Slot: 10
	public virtual void InitServantData(bool isPlayer) { }

	// RVA: 0xF64D1C Offset: 0xF64D1C VA: 0xF64D1C Slot: 11
	public virtual void InitServantDataPrevAdd(BattleServantData svtData) { }

	// RVA: 0xF64D20 Offset: 0xF64D20 VA: 0xF64D20 Slot: 12
	public virtual void InitPlayerMasterInfo() { }

	// RVA: 0xF64D24 Offset: 0xF64D24 VA: 0xF64D24 Slot: 13
	public virtual int GetResultBgmId(int curBgmId) { }

	// RVA: 0xF64D2C Offset: 0xF64D2C VA: 0xF64D2C Slot: 14
	public virtual bool SendBattleResult(BattleResultRequest.Argument arg, NetworkManager.ResultCallbackFunc func) { }

	// RVA: 0xF64D34 Offset: 0xF64D34 VA: 0xF64D34 Slot: 15
	public virtual void InitStartResult(BattleResultComponent.resultData result) { }

	// RVA: 0xF64D38 Offset: 0xF64D38 VA: 0xF64D38 Slot: 16
	public virtual bool GoNextScene() { }

	// RVA: 0xF64D40 Offset: 0xF64D40 VA: 0xF64D40 Slot: 17
	public virtual void GetSaveData(BattleData.SaveData save) { }

	// RVA: 0xF64D44 Offset: 0xF64D44 VA: 0xF64D44 Slot: 18
	public virtual void SetSaveData(BattleData.SaveData save) { }

	// RVA: 0xF64D48 Offset: 0xF64D48 VA: 0xF64D48 Slot: 19
	public virtual bool IsUseDefeatPointReady(BattleServantData svtData) { }

	// RVA: 0xF64D50 Offset: 0xF64D50 VA: 0xF64D50 Slot: 20
	public virtual bool IsLogicEscape(BattleServantData svtData) { }

	// RVA: 0xF64D58 Offset: 0xF64D58 VA: 0xF64D58 Slot: 21
	public virtual bool IsTakeOverNextBattleBuff(BattleBuffData.BuffData buff, BuffEntity buffEnt, DataVals baseVals) { }

	// RVA: 0xF64D60 Offset: 0xF64D60 VA: 0xF64D60 Slot: 22
