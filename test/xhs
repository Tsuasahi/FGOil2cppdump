	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C41C Offset: 0xC6C41C VA: 0xC6C41C
	// RVA: 0x136AC24 Offset: 0x136AC24 VA: 0x136AC24
	private static void GetStartSizeX(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C42C Offset: 0xC6C42C VA: 0xC6C42C
	// RVA: 0x136AD04 Offset: 0x136AD04 VA: 0x136AD04
	private static void SetStartSizeXMultiplier(ParticleSystem system, float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C43C Offset: 0xC6C43C VA: 0xC6C43C
	// RVA: 0x136AC98 Offset: 0x136AC98 VA: 0x136AC98
	private static float GetStartSizeXMultiplier(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C44C Offset: 0xC6C44C VA: 0xC6C44C
	// RVA: 0x136AD78 Offset: 0x136AD78 VA: 0x136AD78
	private static void SetStartColor(ParticleSystem system, ref ParticleSystem.MinMaxGradient gradient) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C45C Offset: 0xC6C45C VA: 0xC6C45C
	// RVA: 0x136ADEC Offset: 0x136ADEC VA: 0x136ADEC
	private static ParticleSystemSimulationSpace GetSimulationSpace(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C46C Offset: 0xC6C46C VA: 0xC6C46C
	// RVA: 0x136AED4 Offset: 0x136AED4 VA: 0x136AED4
	private static void SetStopAction(ParticleSystem system, ParticleSystemStopAction value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C47C Offset: 0xC6C47C VA: 0xC6C47C
	// RVA: 0x136AE60 Offset: 0x136AE60 VA: 0x136AE60
	private static ParticleSystemStopAction GetStopAction(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C48C Offset: 0xC6C48C VA: 0xC6C48C
	// RVA: 0x136AF50 Offset: 0x136AF50 VA: 0x136AF50
	private static void SetCullingMode(ParticleSystem system, ParticleSystemCullingMode value) { }
}

// Namespace: 
public struct ParticleSystem.EmissionModule // TypeDefIndex: 2771
{
	// Fields
	private ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public bool enabled { get; }
	public ParticleSystem.MinMaxCurve rateOverTime { get; set; }
	public int burstCount { set; }

	// Methods

	// RVA: 0xBC21E4 Offset: 0xBC21E4 VA: 0xBC21E4
	internal void .ctor(ParticleSystem particleSystem) { }

	// RVA: 0xBC21EC Offset: 0xBC21EC VA: 0xBC21EC
	public bool get_enabled() { }

	// RVA: 0xBC21F4 Offset: 0xBC21F4 VA: 0xBC21F4
	public void set_rateOverTime(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0xBC2228 Offset: 0xBC2228 VA: 0xBC2228
	public ParticleSystem.MinMaxCurve get_rateOverTime() { }

	// RVA: 0xBC2268 Offset: 0xBC2268 VA: 0xBC2268
	public void SetBursts(ParticleSystem.Burst[] bursts) { }

	// RVA: 0xBC2270 Offset: 0xBC2270 VA: 0xBC2270
	public void SetBursts(ParticleSystem.Burst[] bursts, int size) { }

	// RVA: 0xBC2278 Offset: 0xBC2278 VA: 0xBC2278
	public void set_burstCount(int value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C49C Offset: 0xC6C49C VA: 0xC6C49C
	// RVA: 0x136A478 Offset: 0x136A478 VA: 0x136A478
	private static bool GetEnabled(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C4AC Offset: 0xC6C4AC VA: 0xC6C4AC
	// RVA: 0x136A4EC Offset: 0x136A4EC VA: 0x136A4EC
	private static void SetRateOverTime(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C4BC Offset: 0xC6C4BC VA: 0xC6C4BC
	// RVA: 0x136A5A0 Offset: 0x136A5A0 VA: 0x136A5A0
	private static void GetRateOverTime(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C4CC Offset: 0xC6C4CC VA: 0xC6C4CC
	// RVA: 0x136A71C Offset: 0x136A71C VA: 0x136A71C
	private static void SetBurstCount(ParticleSystem system, int value) { }

	// RVA: 0x136A718 Offset: 0x136A718 VA: 0x136A718
	private static void SetBurst(ParticleSystem system, int index, ParticleSystem.Burst burst) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C4DC Offset: 0xC6C4DC VA: 0xC6C4DC
	// RVA: 0x136A790 Offset: 0x136A790 VA: 0x136A790
	private static void INTERNAL_CALL_SetBurst(ParticleSystem system, int index, ref ParticleSystem.Burst burst) { }
}

// Namespace: 
public struct ParticleSystem.ShapeModule // TypeDefIndex: 2772
{
	// Fields
	private ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public MeshRenderer meshRenderer { set; }
	public SkinnedMeshRenderer skinnedMeshRenderer { set; }
	public Vector3 scale { get; set; }

	// Methods

	// RVA: 0xBC26B4 Offset: 0xBC26B4 VA: 0xBC26B4
	internal void .ctor(ParticleSystem particleSystem) { }

	// RVA: 0xBC26BC Offset: 0xBC26BC VA: 0xBC26BC
	public void set_meshRenderer(MeshRenderer value) { }

	// RVA: 0xBC26C4 Offset: 0xBC26C4 VA: 0xBC26C4
	public void set_skinnedMeshRenderer(SkinnedMeshRenderer value) { }

	// RVA: 0xBC26CC Offset: 0xBC26CC VA: 0xBC26CC
	public Vector3 get_scale() { }

	// RVA: 0xBC2700 Offset: 0xBC2700 VA: 0xBC2700
	public void set_scale(Vector3 value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C4EC Offset: 0xC6C4EC VA: 0xC6C4EC
	// RVA: 0x136B070 Offset: 0x136B070 VA: 0x136B070
	private static void SetMeshRenderer(ParticleSystem system, MeshRenderer value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C4FC Offset: 0xC6C4FC VA: 0xC6C4FC
	// RVA: 0x136B0EC Offset: 0x136B0EC VA: 0x136B0EC
	private static void SetSkinnedMeshRenderer(ParticleSystem system, SkinnedMeshRenderer value) { }

	// RVA: 0x136B1F0 Offset: 0x136B1F0 VA: 0x136B1F0
	private static void SetScale(ParticleSystem system, Vector3 value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C50C Offset: 0xC6C50C VA: 0xC6C50C
	// RVA: 0x136B218 Offset: 0x136B218 VA: 0x136B218
	private static void INTERNAL_CALL_SetScale(ParticleSystem system, ref Vector3 value) { }

	// RVA: 0x136B194 Offset: 0x136B194 VA: 0x136B194
	private static Vector3 GetScale(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C51C Offset: 0xC6C51C VA: 0xC6C51C
	// RVA: 0x136B28C Offset: 0x136B28C VA: 0x136B28C
	private static void INTERNAL_CALL_GetScale(ParticleSystem system, out Vector3 value) { }
}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xC6BA18 Offset: 0xC6BA18 VA: 0xC6BA18
public struct ParticleSystem.Particle // TypeDefIndex: 2773
{
	// Fields
	private Vector3 m_Position; // 0x0
	private Vector3 m_Velocity; // 0xC
	private Vector3 m_AnimatedVelocity; // 0x18
	private Vector3 m_InitialVelocity; // 0x24
	private Vector3 m_AxisOfRotation; // 0x30
	private Vector3 m_Rotation; // 0x3C
	private Vector3 m_AngularVelocity; // 0x48
	private Vector3 m_StartSize; // 0x54
	private Color32 m_StartColor; // 0x60
	private uint m_RandomSeed; // 0x64
	private float m_Lifetime; // 0x68
	private float m_StartLifetime; // 0x6C
	private float m_EmitAccumulator0; // 0x70
	private float m_EmitAccumulator1; // 0x74
	private uint m_Flags; // 0x78

	// Properties
	[ObsoleteAttribute] // RVA: 0xC6C708 Offset: 0xC6C708 VA: 0xC6C708
	public float lifetime { set; }
	public Vector3 position { set; }
	public Vector3 velocity { set; }
	public float remainingLifetime { set; }
	public float startLifetime { set; }
	public Color32 startColor { set; }
	public uint randomSeed { set; }
	public float startSize { set; }
	public Vector3 rotation3D { set; }
	public Vector3 angularVelocity3D { set; }

	// Methods

	// RVA: 0xBC25C8 Offset: 0xBC25C8 VA: 0xBC25C8
	public void set_lifetime(float value) { }

	// RVA: 0xBC25D0 Offset: 0xBC25D0 VA: 0xBC25D0
	public void set_position(Vector3 value) { }

	// RVA: 0xBC25DC Offset: 0xBC25DC VA: 0xBC25DC
	public void set_velocity(Vector3 value) { }

	// RVA: 0xBC25E8 Offset: 0xBC25E8 VA: 0xBC25E8
	public void set_remainingLifetime(float value) { }

	// RVA: 0xBC25F0 Offset: 0xBC25F0 VA: 0xBC25F0
	public void set_startLifetime(float value) { }

	// RVA: 0xBC25F8 Offset: 0xBC25F8 VA: 0xBC25F8
	public void set_startColor(Color32 value) { }

	// RVA: 0xBC2600 Offset: 0xBC2600 VA: 0xBC2600
	public void set_randomSeed(uint value) { }

	// RVA: 0xBC2608 Offset: 0xBC2608 VA: 0xBC2608
	public void set_startSize(float value) { }

	// RVA: 0xBC2658 Offset: 0xBC2658 VA: 0xBC2658
	public void set_rotation3D(Vector3 value) { }

	// RVA: 0xBC2660 Offset: 0xBC2660 VA: 0xBC2660
	public void set_angularVelocity3D(Vector3 value) { }
}

// Namespace: 
public struct ParticleSystem.Burst // TypeDefIndex: 2774
{
	// Fields
	private float m_Time; // 0x0
	private ParticleSystem.MinMaxCurve m_Count; // 0x8
	private int m_RepeatCount; // 0x28
	private float m_RepeatInterval; // 0x2C
	private float m_InvProbability; // 0x30

	// Properties
	public float time { set; }
	public short minCount { set; }
	public short maxCount { set; }

	// Methods

	// RVA: 0xBC2170 Offset: 0xBC2170 VA: 0xBC2170
	public void set_time(float value) { }

	// RVA: 0xBC2178 Offset: 0xBC2178 VA: 0xBC2178
	public void set_minCount(short value) { }

	// RVA: 0xBC2188 Offset: 0xBC2188 VA: 0xBC2188
	public void set_maxCount(short value) { }
}

// Namespace: 
[NativeTypeAttribute] // RVA: 0xC6BA60 Offset: 0xC6BA60 VA: 0xC6BA60
[Serializable]
public struct ParticleSystem.MinMaxCurve // TypeDefIndex: 2775
{
	// Fields
	[SerializeField] // RVA: 0xC6BCA4 Offset: 0xC6BCA4 VA: 0xC6BCA4
	private ParticleSystemCurveMode m_Mode; // 0x0
	[SerializeField] // RVA: 0xC6BCB4 Offset: 0xC6BCB4 VA: 0xC6BCB4
	private float m_CurveMultiplier; // 0x4
	[SerializeField] // RVA: 0xC6BCC4 Offset: 0xC6BCC4 VA: 0xC6BCC4
	private AnimationCurve m_CurveMin; // 0x8
	[SerializeField] // RVA: 0xC6BCD4 Offset: 0xC6BCD4 VA: 0xC6BCD4
	private AnimationCurve m_CurveMax; // 0x10
	[SerializeField] // RVA: 0xC6BCE4 Offset: 0xC6BCE4 VA: 0xC6BCE4
	private float m_ConstantMin; // 0x18
	[SerializeField] // RVA: 0xC6BCF4 Offset: 0xC6BCF4 VA: 0xC6BCF4
	private float m_ConstantMax; // 0x1C

	// Properties
	public float constantMax { get; set; }
	public float constantMin { get; set; }
	public float constant { get; }

	// Methods

	// RVA: 0xBC2584 Offset: 0xBC2584 VA: 0xBC2584
	public void .ctor(float constant) { }

	// RVA: 0xBC2598 Offset: 0xBC2598 VA: 0xBC2598
	public float get_constantMax() { }

	// RVA: 0xBC25A0 Offset: 0xBC25A0 VA: 0xBC25A0
	public void set_constantMax(float value) { }

	// RVA: 0xBC25A8 Offset: 0xBC25A8 VA: 0xBC25A8
	public float get_constantMin() { }

	// RVA: 0xBC25B0 Offset: 0xBC25B0 VA: 0xBC25B0
	public void set_constantMin(float value) { }

	// RVA: 0xBC25B8 Offset: 0xBC25B8 VA: 0xBC25B8
	public float get_constant() { }

	// RVA: 0x136AFF0 Offset: 0x136AFF0 VA: 0x136AFF0
	public static ParticleSystem.MinMaxCurve op_Implicit(float constant) { }
}

// Namespace: 
[Serializable]
public struct ParticleSystem.MinMaxGradient // TypeDefIndex: 2776
{
	// Fields
	[SerializeField] // RVA: 0xC6BD04 Offset: 0xC6BD04 VA: 0xC6BD04
	private ParticleSystemGradientMode m_Mode; // 0x0
	[SerializeField] // RVA: 0xC6BD14 Offset: 0xC6BD14 VA: 0xC6BD14
	private Gradient m_GradientMin; // 0x8
	[SerializeField] // RVA: 0xC6BD24 Offset: 0xC6BD24 VA: 0xC6BD24
	private Gradient m_GradientMax; // 0x10
	[SerializeField] // RVA: 0xC6BD34 Offset: 0xC6BD34 VA: 0xC6BD34
	private Color m_ColorMin; // 0x18
	[SerializeField] // RVA: 0xC6BD44 Offset: 0xC6BD44 VA: 0xC6BD44
	private Color m_ColorMax; // 0x28

	// Methods

	// RVA: 0xBC25C0 Offset: 0xBC25C0 VA: 0xBC25C0
	public void .ctor(Color color) { }

	// RVA: 0x1369D84 Offset: 0x1369D84 VA: 0x1369D84
	public static ParticleSystem.MinMaxGradient op_Implicit(Color color) { }
}

// Namespace: 
public struct ParticleSystem.EmitParams // TypeDefIndex: 2777
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC6BD54 Offset: 0xC6BD54 VA: 0xC6BD54
	private ParticleSystem.Particle m_Particle; // 0x0
	[NativeNameAttribute] // RVA: 0xC6BD8C Offset: 0xC6BD8C VA: 0xC6BD8C
	private bool m_PositionSet; // 0x7C
	[NativeNameAttribute] // RVA: 0xC6BDC4 Offset: 0xC6BDC4 VA: 0xC6BDC4
	private bool m_VelocitySet; // 0x7D
	[NativeNameAttribute] // RVA: 0xC6BDFC Offset: 0xC6BDFC VA: 0xC6BDFC
	private bool m_AxisOfRotationSet; // 0x7E
	[NativeNameAttribute] // RVA: 0xC6BE34 Offset: 0xC6BE34 VA: 0xC6BE34
	private bool m_RotationSet; // 0x7F
	[NativeNameAttribute] // RVA: 0xC6BE6C Offset: 0xC6BE6C VA: 0xC6BE6C
	private bool m_AngularVelocitySet; // 0x80
	[NativeNameAttribute] // RVA: 0xC6BEA4 Offset: 0xC6BEA4 VA: 0xC6BEA4
	private bool m_StartSizeSet; // 0x81
	[NativeNameAttribute] // RVA: 0xC6BEDC Offset: 0xC6BEDC VA: 0xC6BEDC
	private bool m_StartColorSet; // 0x82
	[NativeNameAttribute] // RVA: 0xC6BF14 Offset: 0xC6BF14 VA: 0xC6BF14
	private bool m_RandomSeedSet; // 0x83
	[NativeNameAttribute] // RVA: 0xC6BF4C Offset: 0xC6BF4C VA: 0xC6BF4C
	private bool m_StartLifetimeSet; // 0x84
	[NativeNameAttribute] // RVA: 0xC6BF84 Offset: 0xC6BF84 VA: 0xC6BF84
	private bool m_ApplyShapeToPosition; // 0x85
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6BAB8 Offset: 0xC6BAB8 VA: 0xC6BAB8
[RequireComponent] // RVA: 0xC6BAB8 Offset: 0xC6BAB8 VA: 0xC6BAB8
[RequireComponent] // RVA: 0xC6BAB8 Offset: 0xC6BAB8 VA: 0xC6BAB8
[NativeHeaderAttribute] // RVA: 0xC6BAB8 Offset: 0xC6BAB8 VA: 0xC6BAB8
public sealed class ParticleSystemRenderer : Renderer // TypeDefIndex: 2778
{
	// Properties
	public ParticleSystemRenderMode renderMode { get; }
	public float sortingFudge { set; }
	public SpriteMaskInteraction maskInteraction { set; }

	// Methods

	// RVA: 0x136C5A4 Offset: 0x136C5A4 VA: 0x136C5A4
	public ParticleSystemRenderMode get_renderMode() { }

	// RVA: 0x136C610 Offset: 0x136C610 VA: 0x136C610
	public void set_sortingFudge(float value) { }

	// RVA: 0x136C684 Offset: 0x136C684 VA: 0x136C684
	public void set_maskInteraction(SpriteMaskInteraction value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC6C52C Offset: 0xC6C52C VA: 0xC6C52C
	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC6C52C Offset: 0xC6C52C VA: 0xC6C52C
	// RVA: 0x136C6F8 Offset: 0x136C6F8 VA: 0x136C6F8
	private int Internal_GetMeshCount() { }
}

// Namespace: UnityEngine
public enum ParticleSystemRenderMode // TypeDefIndex: 2779
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemRenderMode Billboard = 0;
	public const ParticleSystemRenderMode Stretch = 1;
	public const ParticleSystemRenderMode HorizontalBillboard = 2;
	public const ParticleSystemRenderMode VerticalBillboard = 3;
	public const ParticleSystemRenderMode Mesh = 4;
	public const ParticleSystemRenderMode None = 5;
}

// Namespace: UnityEngine
public enum ParticleSystemCurveMode // TypeDefIndex: 2780
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemCurveMode Constant = 0;
	public const ParticleSystemCurveMode Curve = 1;
	public const ParticleSystemCurveMode TwoCurves = 2;
	public const ParticleSystemCurveMode TwoConstants = 3;
}

// Namespace: UnityEngine
public enum ParticleSystemGradientMode // TypeDefIndex: 2781
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemGradientMode Color = 0;
	public const ParticleSystemGradientMode Gradient = 1;
	public const ParticleSystemGradientMode TwoColors = 2;
	public const ParticleSystemGradientMode TwoGradients = 3;
	public const ParticleSystemGradientMode RandomColor = 4;
}

// Namespace: UnityEngine
public enum ParticleSystemSimulationSpace // TypeDefIndex: 2782
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemSimulationSpace Local = 0;
	public const ParticleSystemSimulationSpace World = 1;
	public const ParticleSystemSimulationSpace Custom = 2;
}

// Namespace: UnityEngine
public enum ParticleSystemStopBehavior // TypeDefIndex: 2783
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemStopBehavior StopEmittingAndClear = 0;
	public const ParticleSystemStopBehavior StopEmitting = 1;
}

// Namespace: UnityEngine
public enum ParticleSystemStopAction // TypeDefIndex: 2784
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemStopAction None = 0;
	public const ParticleSystemStopAction Disable = 1;
	public const ParticleSystemStopAction Destroy = 2;
	public const ParticleSystemStopAction Callback = 3;
}

// Namespace: UnityEngine
public enum ParticleSystemCullingMode // TypeDefIndex: 2785
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemCullingMode Automatic = 0;
	public const ParticleSystemCullingMode PauseAndCatchup = 1;
	public const ParticleSystemCullingMode Pause = 2;
	public const ParticleSystemCullingMode AlwaysSimulate = 3;
}

// Namespace: UnityEngine
public enum ParticleSystemForceFieldShape // TypeDefIndex: 2786
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemForceFieldShape Sphere = 0;
	public const ParticleSystemForceFieldShape Hemisphere = 1;
	public const ParticleSystemForceFieldShape Cylinder = 2;
	public const ParticleSystemForceFieldShape Box = 3;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6BB8C Offset: 0xC6BB8C VA: 0xC6BB8C
[NativeHeaderAttribute] // RVA: 0xC6BB8C Offset: 0xC6BB8C VA: 0xC6BB8C
[NativeHeaderAttribute] // RVA: 0xC6BB8C Offset: 0xC6BB8C VA: 0xC6BB8C
[NativeHeaderAttribute] // RVA: 0xC6BB8C Offset: 0xC6BB8C VA: 0xC6BB8C
[NativeHeaderAttribute] // RVA: 0xC6BB8C Offset: 0xC6BB8C VA: 0xC6BB8C
[RequireComponent] // RVA: 0xC6BB8C Offset: 0xC6BB8C VA: 0xC6BB8C
public class ParticleSystemForceField : Component // TypeDefIndex: 2787
{
	// Properties
	[NativeNameAttribute] // RVA: 0xC6C744 Offset: 0xC6C744 VA: 0xC6C744
	public ParticleSystemForceFieldShape shape { get; set; }
	public float startRange { get; set; }
	public float endRange { get; set; }
	public float length { get; set; }
	public float gravityFocus { get; set; }
	public Vector2 rotationRandomness { get; set; }
	public bool multiplyDragByParticleSize { get; set; }
	public bool multiplyDragByParticleVelocity { get; set; }
	public Texture3D vectorField { get; set; }
	public ParticleSystem.MinMaxCurve directionX { get; set; }
	public ParticleSystem.MinMaxCurve directionY { get; set; }
	public ParticleSystem.MinMaxCurve directionZ { get; set; }
	public ParticleSystem.MinMaxCurve gravity { get; set; }
	public ParticleSystem.MinMaxCurve rotationSpeed { get; set; }
	public ParticleSystem.MinMaxCurve rotationAttraction { get; set; }
	public ParticleSystem.MinMaxCurve drag { get; set; }
	public ParticleSystem.MinMaxCurve vectorFieldSpeed { get; set; }
	public ParticleSystem.MinMaxCurve vectorFieldAttraction { get; set; }

	// Methods

	// RVA: 0x136B300 Offset: 0x136B300 VA: 0x136B300
	public void .ctor() { }

	// RVA: 0x136B308 Offset: 0x136B308 VA: 0x136B308
	public ParticleSystemForceFieldShape get_shape() { }

	// RVA: 0x136B374 Offset: 0x136B374 VA: 0x136B374
	public void set_shape(ParticleSystemForceFieldShape value) { }

	// RVA: 0x136B3E8 Offset: 0x136B3E8 VA: 0x136B3E8
	public float get_startRange() { }

	// RVA: 0x136B454 Offset: 0x136B454 VA: 0x136B454
	public void set_startRange(float value) { }

	// RVA: 0x136B4C8 Offset: 0x136B4C8 VA: 0x136B4C8
	public float get_endRange() { }

	// RVA: 0x136B534 Offset: 0x136B534 VA: 0x136B534
	public void set_endRange(float value) { }

	// RVA: 0x136B5A8 Offset: 0x136B5A8 VA: 0x136B5A8
	public float get_length() { }

	// RVA: 0x136B614 Offset: 0x136B614 VA: 0x136B614
	public void set_length(float value) { }

	// RVA: 0x136B688 Offset: 0x136B688 VA: 0x136B688
	public float get_gravityFocus() { }

	// RVA: 0x136B6F4 Offset: 0x136B6F4 VA: 0x136B6F4
	public void set_gravityFocus(float value) { }

	// RVA: 0x136B768 Offset: 0x136B768 VA: 0x136B768
	public Vector2 get_rotationRandomness() { }

	// RVA: 0x136B804 Offset: 0x136B804 VA: 0x136B804
	public void set_rotationRandomness(Vector2 value) { }

	// RVA: 0x136B89C Offset: 0x136B89C VA: 0x136B89C
	public bool get_multiplyDragByParticleSize() { }

	// RVA: 0x136B908 Offset: 0x136B908 VA: 0x136B908
	public void set_multiplyDragByParticleSize(bool value) { }

	// RVA: 0x136B97C Offset: 0x136B97C VA: 0x136B97C
	public bool get_multiplyDragByParticleVelocity() { }

	// RVA: 0x136B9E8 Offset: 0x136B9E8 VA: 0x136B9E8
	public void set_multiplyDragByParticleVelocity(bool value) { }

	// RVA: 0x136BA5C Offset: 0x136BA5C VA: 0x136BA5C
	public Texture3D get_vectorField() { }

	// RVA: 0x136BAC8 Offset: 0x136BAC8 VA: 0x136BAC8
	public void set_vectorField(Texture3D value) { }

	// RVA: 0x136BB3C Offset: 0x136BB3C VA: 0x136BB3C
	public ParticleSystem.MinMaxCurve get_directionX() { }

	// RVA: 0x136BBEC Offset: 0x136BBEC VA: 0x136BBEC
	public void set_directionX(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BC64 Offset: 0x136BC64 VA: 0x136BC64
	public ParticleSystem.MinMaxCurve get_directionY() { }

	// RVA: 0x136BD14 Offset: 0x136BD14 VA: 0x136BD14
	public void set_directionY(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BD8C Offset: 0x136BD8C VA: 0x136BD8C
	public ParticleSystem.MinMaxCurve get_directionZ() { }

	// RVA: 0x136BE3C Offset: 0x136BE3C VA: 0x136BE3C
	public void set_directionZ(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BEB4 Offset: 0x136BEB4 VA: 0x136BEB4
	public ParticleSystem.MinMaxCurve get_gravity() { }

	// RVA: 0x136BF64 Offset: 0x136BF64 VA: 0x136BF64
	public void set_gravity(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BFDC Offset: 0x136BFDC VA: 0x136BFDC
	public ParticleSystem.MinMaxCurve get_rotationSpeed() { }

	// RVA: 0x136C08C Offset: 0x136C08C VA: 0x136C08C
	public void set_rotationSpeed(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C104 Offset: 0x136C104 VA: 0x136C104
	public ParticleSystem.MinMaxCurve get_rotationAttraction() { }

	// RVA: 0x136C1B4 Offset: 0x136C1B4 VA: 0x136C1B4
	public void set_rotationAttraction(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C22C Offset: 0x136C22C VA: 0x136C22C
	public ParticleSystem.MinMaxCurve get_drag() { }

	// RVA: 0x136C2DC Offset: 0x136C2DC VA: 0x136C2DC
	public void set_drag(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C354 Offset: 0x136C354 VA: 0x136C354
	public ParticleSystem.MinMaxCurve get_vectorFieldSpeed() { }

	// RVA: 0x136C404 Offset: 0x136C404 VA: 0x136C404
	public void set_vectorFieldSpeed(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C47C Offset: 0x136C47C VA: 0x136C47C
	public ParticleSystem.MinMaxCurve get_vectorFieldAttraction() { }

	// RVA: 0x136C52C Offset: 0x136C52C VA: 0x136C52C
	public void set_vectorFieldAttraction(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136B790 Offset: 0x136B790 VA: 0x136B790
	private void get_rotationRandomness_Injected(out Vector2 ret) { }

	// RVA: 0x136B828 Offset: 0x136B828 VA: 0x136B828
	private void set_rotationRandomness_Injected(ref Vector2 value) { }

	// RVA: 0x136BB78 Offset: 0x136BB78 VA: 0x136BB78
	private void get_directionX_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136BBF0 Offset: 0x136BBF0 VA: 0x136BBF0
	private void set_directionX_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BCA0 Offset: 0x136BCA0 VA: 0x136BCA0
	private void get_directionY_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136BD18 Offset: 0x136BD18 VA: 0x136BD18
	private void set_directionY_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BDC8 Offset: 0x136BDC8 VA: 0x136BDC8
	private void get_directionZ_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136BE40 Offset: 0x136BE40 VA: 0x136BE40
	private void set_directionZ_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136BEF0 Offset: 0x136BEF0 VA: 0x136BEF0
	private void get_gravity_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136BF68 Offset: 0x136BF68 VA: 0x136BF68
	private void set_gravity_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C018 Offset: 0x136C018 VA: 0x136C018
	private void get_rotationSpeed_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136C090 Offset: 0x136C090 VA: 0x136C090
	private void set_rotationSpeed_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C140 Offset: 0x136C140 VA: 0x136C140
	private void get_rotationAttraction_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136C1B8 Offset: 0x136C1B8 VA: 0x136C1B8
	private void set_rotationAttraction_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C268 Offset: 0x136C268 VA: 0x136C268
	private void get_drag_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136C2E0 Offset: 0x136C2E0 VA: 0x136C2E0
	private void set_drag_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C390 Offset: 0x136C390 VA: 0x136C390
	private void get_vectorFieldSpeed_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136C408 Offset: 0x136C408 VA: 0x136C408
	private void set_vectorFieldSpeed_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x136C4B8 Offset: 0x136C4B8 VA: 0x136C4B8
	private void get_vectorFieldAttraction_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x136C530 Offset: 0x136C530 VA: 0x136C530
	private void set_vectorFieldAttraction_Injected(ref ParticleSystem.MinMaxCurve value) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2788
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6D88C Offset: 0xC6D88C VA: 0xC6D88C
public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 2789
{
	// Fields
	private int m_Handle; // 0x0

	// Methods

	// RVA: 0xBC1830 Offset: 0xBC1830 VA: 0xBC1830 Slot: 3
	public override string ToString() { }

	// RVA: 0xBC1838 Offset: 0xBC1838 VA: 0xBC1838 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC1840 Offset: 0xBC1840 VA: 0xBC1840 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xBC1848 Offset: 0xBC1848 VA: 0xBC1848 Slot: 4
	public bool Equals(PhysicsScene2D other) { }

	// RVA: 0xBC1858 Offset: 0xBC1858 VA: 0xBC1858
	public RaycastHit2D Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xC6E4B8 Offset: 0xC6E4B8 VA: 0xC6E4B8
	[NativeMethodAttribute] // RVA: 0xC6E4B8 Offset: 0xC6E4B8 VA: 0xC6E4B8
	// RVA: 0x135D734 Offset: 0x135D734 VA: 0x135D734
	private static RaycastHit2D Linecast_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter) { }

	// RVA: 0xBC18D0 Offset: 0xBC18D0 VA: 0xBC18D0
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask = -5) { }

	// RVA: 0xBC18D8 Offset: 0xBC18D8 VA: 0xBC18D8
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xC6E51C Offset: 0xC6E51C VA: 0xC6E51C
	[NativeMethodAttribute] // RVA: 0xC6E51C Offset: 0xC6E51C VA: 0xC6E51C
	// RVA: 0x135D840 Offset: 0x135D840 VA: 0x135D840
	private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	// RVA: 0xBC1950 Offset: 0xBC1950 VA: 0xBC1950
	public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }

	[NativeMethodAttribute] // RVA: 0xC6E580 Offset: 0xC6E580 VA: 0xC6E580
	[StaticAccessorAttribute] // RVA: 0xC6E580 Offset: 0xC6E580 VA: 0xC6E580
	// RVA: 0x135D958 Offset: 0x135D958 VA: 0x135D958
	private static int RaycastNonAlloc_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, [Out] RaycastHit2D[] results) { }

	// RVA: 0xBC1984 Offset: 0xBC1984 VA: 0xBC1984
	public RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask = -5) { }

	[StaticAccessorAttribute] // RVA: 0xC6E5E4 Offset: 0xC6E5E4 VA: 0xC6E5E4
	[NativeMethodAttribute] // RVA: 0xC6E5E4 Offset: 0xC6E5E4 VA: 0xC6E5E4
	// RVA: 0x135DA44 Offset: 0x135DA44 VA: 0x135DA44
	private static RaycastHit2D GetRayIntersection_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask) { }

	// RVA: 0xBC19B8 Offset: 0xBC19B8 VA: 0xBC19B8
	public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, int layerMask = -5) { }

	[NativeMethodAttribute] // RVA: 0xC6E648 Offset: 0xC6E648 VA: 0xC6E648
	[StaticAccessorAttribute] // RVA: 0xC6E648 Offset: 0xC6E648 VA: 0xC6E648
	// RVA: 0x135DB64 Offset: 0x135DB64 VA: 0x135DB64
	private static int GetRayIntersectionNonAlloc_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, [Out] RaycastHit2D[] results) { }

	// RVA: 0xBC19EC Offset: 0xBC19EC VA: 0xBC19EC
	public Collider2D OverlapPoint(Vector2 point, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xC6E6AC Offset: 0xC6E6AC VA: 0xC6E6AC
	[NativeMethodAttribute] // RVA: 0xC6E6AC Offset: 0xC6E6AC VA: 0xC6E6AC
	// RVA: 0x135DC58 Offset: 0x135DC58 VA: 0x135DC58
	private static Collider2D OverlapPoint_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter) { }

	// RVA: 0x135D7A4 Offset: 0x135D7A4 VA: 0x135D7A4
	private static void Linecast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 start, ref Vector2 end, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }

	// RVA: 0x135D8B4 Offset: 0x135D8B4 VA: 0x135D8B4
	private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }

	// RVA: 0x135D9A0 Offset: 0x135D9A0 VA: 0x135D9A0
	private static int RaycastNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, [Out] RaycastHit2D[] results) { }

	// RVA: 0x135DAC0 Offset: 0x135DAC0 VA: 0x135DAC0
	private static void GetRayIntersection_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, out RaycastHit2D ret) { }

	// RVA: 0x135DBB4 Offset: 0x135DBB4 VA: 0x135DBB4
	private static int GetRayIntersectionNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, [Out] RaycastHit2D[] results) { }

	// RVA: 0x135DC8C Offset: 0x135DC8C VA: 0x135DC8C
	private static Collider2D OverlapPoint_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref ContactFilter2D contactFilter) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC6D8C4 Offset: 0xC6D8C4 VA: 0xC6D8C4
[NativeHeaderAttribute] // RVA: 0xC6D8C4 Offset: 0xC6D8C4 VA: 0xC6D8C4
[NativeHeaderAttribute] // RVA: 0xC6D8C4 Offset: 0xC6D8C4 VA: 0xC6D8C4
[StaticAccessorAttribute] // RVA: 0xC6D8C4 Offset: 0xC6D8C4 VA: 0xC6D8C4
public class Physics2D // TypeDefIndex: 2790
{
	// Fields
	private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x0

	// Properties
	[StaticAccessorAttribute] // RVA: 0xC6F5C0 Offset: 0xC6F5C0 VA: 0xC6F5C0
	[NativePropertyAttribute] // RVA: 0xC6F5C0 Offset: 0xC6F5C0 VA: 0xC6F5C0
	public static PhysicsScene2D defaultPhysicsScene { get; }
	[StaticAccessorAttribute] // RVA: 0xC6F624 Offset: 0xC6F624 VA: 0xC6F624
	public static Vector2 gravity { set; }
	[StaticAccessorAttribute] // RVA: 0xC6F65C Offset: 0xC6F65C VA: 0xC6F65C
	public static bool queriesHitTriggers { get; }

	// Methods

	// RVA: 0x135ACE4 Offset: 0x135ACE4 VA: 0x135ACE4
	public static PhysicsScene2D get_defaultPhysicsScene() { }

	// RVA: 0x135ADBC Offset: 0x135ADBC VA: 0x135ADBC
	public static void set_gravity(Vector2 value) { }

	// RVA: 0x135A7EC Offset: 0x135A7EC VA: 0x135A7EC
	public static bool get_queriesHitTriggers() { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E710 Offset: 0xC6E710 VA: 0xC6E710
	// RVA: 0x135AE90 Offset: 0x135AE90 VA: 0x135AE90
	public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask) { }

	// RVA: 0x135B02C Offset: 0x135B02C VA: 0x135B02C
	public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E720 Offset: 0xC6E720 VA: 0xC6E720
	// RVA: 0x135B168 Offset: 0x135B168 VA: 0x135B168
	public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask) { }

	// RVA: 0x135B2D0 Offset: 0x135B2D0 VA: 0x135B2D0
	public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth) { }

	[StaticAccessorAttribute] // RVA: 0xC6E730 Offset: 0xC6E730 VA: 0xC6E730
	[NativeMethodAttribute] // RVA: 0xC6E730 Offset: 0xC6E730 VA: 0xC6E730
	// RVA: 0x135B248 Offset: 0x135B248 VA: 0x135B248
	private static RaycastHit2D[] LinecastAll_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E794 Offset: 0xC6E794 VA: 0xC6E794
	// RVA: 0x135B444 Offset: 0x135B444 VA: 0x135B444
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E7A4 Offset: 0xC6E7A4 VA: 0xC6E7A4
	// RVA: 0x135B5F0 Offset: 0x135B5F0 VA: 0x135B5F0
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC6E7B4 Offset: 0xC6E7B4 VA: 0xC6E7B4
	[ExcludeFromDocsAttribute] // RVA: 0xC6E7B4 Offset: 0xC6E7B4 VA: 0xC6E7B4
	// RVA: 0x135B6D8 Offset: 0x135B6D8 VA: 0x135B6D8
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E7EC Offset: 0xC6E7EC VA: 0xC6E7EC
	// RVA: 0x135B884 Offset: 0x135B884 VA: 0x135B884
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth) { }

	// RVA: 0x135B9C8 Offset: 0x135B9C8 VA: 0x135B9C8
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E7FC Offset: 0xC6E7FC VA: 0xC6E7FC
	// RVA: 0x135BB14 Offset: 0x135BB14 VA: 0x135BB14
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results) { }

	// RVA: 0x135BC40 Offset: 0x135BC40 VA: 0x135BC40
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E80C Offset: 0xC6E80C VA: 0xC6E80C
	// RVA: 0x135BD1C Offset: 0x135BD1C VA: 0x135BD1C
	public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask) { }

	// RVA: 0x135BEA4 Offset: 0x135BEA4 VA: 0x135BEA4
	public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth) { }

	[NativeMethodAttribute] // RVA: 0xC6E81C Offset: 0xC6E81C VA: 0xC6E81C
	[StaticAccessorAttribute] // RVA: 0xC6E81C Offset: 0xC6E81C VA: 0xC6E81C
	// RVA: 0x135BE0C Offset: 0x135BE0C VA: 0x135BE0C
	private static RaycastHit2D[] RaycastAll_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E880 Offset: 0xC6E880 VA: 0xC6E880
	// RVA: 0x135C040 Offset: 0x135C040 VA: 0x135C040
	public static RaycastHit2D GetRayIntersection(Ray ray, float distance) { }

	// RVA: 0x135C1D0 Offset: 0x135C1D0 VA: 0x135C1D0
	public static RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E890 Offset: 0xC6E890 VA: 0xC6E890
	// RVA: 0x135C2AC Offset: 0x135C2AC VA: 0x135C2AC
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E8A0 Offset: 0xC6E8A0 VA: 0xC6E8A0
	// RVA: 0x135C410 Offset: 0x135C410 VA: 0x135C410
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC6E8B0 Offset: 0xC6E8B0 VA: 0xC6E8B0
	// RVA: 0x135C4D4 Offset: 0x135C4D4 VA: 0x135C4D4
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask) { }

	[NativeMethodAttribute] // RVA: 0xC6E8C0 Offset: 0xC6E8C0 VA: 0xC6E8C0
	[StaticAccessorAttribute] // RVA: 0xC6E8C0 Offset: 0xC6E8C0 VA: 0xC6E8C0
	// RVA: 0x135C370 Offset: 0x135C370 VA: 0x135C370
	private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E924 Offset: 0xC6E924 VA: 0xC6E924
	// RVA: 0x135C648 Offset: 0x135C648 VA: 0x135C648
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E934 Offset: 0xC6E934 VA: 0xC6E934
	// RVA: 0x135C784 Offset: 0x135C784 VA: 0x135C784
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC6E944 Offset: 0xC6E944 VA: 0xC6E944
	// RVA: 0x135C838 Offset: 0x135C838 VA: 0x135C838
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E954 Offset: 0xC6E954 VA: 0xC6E954
	// RVA: 0x135C8F0 Offset: 0x135C8F0 VA: 0x135C8F0
	public static Collider2D OverlapPoint(Vector2 point, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E964 Offset: 0xC6E964 VA: 0xC6E964
	// RVA: 0x135CA00 Offset: 0x135CA00 VA: 0x135CA00
	public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask) { }

	// RVA: 0x135CB48 Offset: 0x135CB48 VA: 0x135CB48
	public static Collider2D[] OverlapPointAll(Vector2 point, int layerMask, float minDepth, float maxDepth) { }

	[StaticAccessorAttribute] // RVA: 0xC6E974 Offset: 0xC6E974 VA: 0xC6E974
	[NativeMethodAttribute] // RVA: 0xC6E974 Offset: 0xC6E974 VA: 0xC6E974
	// RVA: 0x135CAC8 Offset: 0x135CAC8 VA: 0x135CAC8
	private static Collider2D[] OverlapPointAll_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6E9D8 Offset: 0xC6E9D8 VA: 0xC6E9D8
	// RVA: 0x135CC9C Offset: 0x135CC9C VA: 0x135CC9C
	public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask) { }

	// RVA: 0x135CE04 Offset: 0x135CE04 VA: 0x135CE04
	public static Collider2D[] OverlapCircleAll(Vector2 point, float radius, int layerMask, float minDepth, float maxDepth) { }

	[StaticAccessorAttribute] // RVA: 0xC6E9E8 Offset: 0xC6E9E8 VA: 0xC6E9E8
	[NativeMethodAttribute] // RVA: 0xC6E9E8 Offset: 0xC6E9E8 VA: 0xC6E9E8
	// RVA: 0x135CD74 Offset: 0x135CD74 VA: 0x135CD74
	private static Collider2D[] OverlapCircleAll_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter) { }

	// RVA: 0x135CF70 Offset: 0x135CF70 VA: 0x135CF70
	public static Collider2D[] OverlapBoxAll(Vector2 point, Vector2 size, float angle, int layerMask, float minDepth, float maxDepth) { }

	[NativeMethodAttribute] // RVA: 0xC6EA4C Offset: 0xC6EA4C VA: 0xC6EA4C
	[StaticAccessorAttribute] // RVA: 0xC6EA4C Offset: 0xC6EA4C VA: 0xC6EA4C
	// RVA: 0x135D068 Offset: 0x135D068 VA: 0x135D068
	private static Collider2D[] OverlapBoxAll_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, float angle, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC6EAB0 Offset: 0xC6EAB0 VA: 0xC6EAB0
	// RVA: 0x135D1A4 Offset: 0x135D1A4 VA: 0x135D1A4
	public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask) { }

	// RVA: 0x135D39C Offset: 0x135D39C VA: 0x135D39C
	public static Collider2D[] OverlapAreaAll(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth) { }

	// RVA: 0x135D248 Offset: 0x135D248 VA: 0x135D248
	private static Collider2D[] OverlapAreaAllToBox_Internal(Vector2 pointA, Vector2 pointB, int layerMask, float minDepth, float maxDepth) { }

	// RVA: 0x135D448 Offset: 0x135D448 VA: 0x135D448
	private static void .cctor() { }

	// RVA: 0x135AD50 Offset: 0x135AD50 VA: 0x135AD50
	private static void get_defaultPhysicsScene_Injected(out PhysicsScene2D ret) { }

	// RVA: 0x135AE24 Offset: 0x135AE24 VA: 0x135AE24
	private static void set_gravity_Injected(ref Vector2 value) { }

	// RVA: 0x135B3B8 Offset: 0x135B3B8 VA: 0x135B3B8
	private static RaycastHit2D[] LinecastAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 start, ref Vector2 end, ref ContactFilter2D contactFilter) { }

	// RVA: 0x135BF9C Offset: 0x135BF9C VA: 0x135BF9C
	private static RaycastHit2D[] RaycastAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter) { }

	// RVA: 0x135C5A4 Offset: 0x135C5A4 VA: 0x135C5A4
	private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask) { }

	// RVA: 0x135CC18 Offset: 0x135CC18 VA: 0x135CC18
	private static Collider2D[] OverlapPointAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref ContactFilter2D contactFilter) { }

	// RVA: 0x135CEE4 Offset: 0x135CEE4 VA: 0x135CEE4
	private static Collider2D[] OverlapCircleAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, float radius, ref ContactFilter2D contactFilter) { }

	// RVA: 0x135D100 Offset: 0x135D100 VA: 0x135D100
	private static Collider2D[] OverlapBoxAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref Vector2 size, float angle, ref ContactFilter2D contactFilter) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xC6D978 Offset: 0xC6D978 VA: 0xC6D978
public enum RigidbodyConstraints2D // TypeDefIndex: 2791
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyConstraints2D None = 0;
	public const RigidbodyConstraints2D FreezePositionX = 1;
	public const RigidbodyConstraints2D FreezePositionY = 2;
	public const RigidbodyConstraints2D FreezeRotation = 4;
	public const RigidbodyConstraints2D FreezePosition = 3;
	public const RigidbodyConstraints2D FreezeAll = 7;
}

// Namespace: UnityEngine
public enum RigidbodyType2D // TypeDefIndex: 2792
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyType2D Dynamic = 0;
	public const RigidbodyType2D Kinematic = 1;
	public const RigidbodyType2D Static = 2;
}

// Namespace: UnityEngine
public enum ForceMode2D // TypeDefIndex: 2793
{
	// Fields
	public int value__; // 0x0
	public const ForceMode2D Force = 0;
	public const ForceMode2D Impulse = 1;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC6D988 Offset: 0xC6D988 VA: 0xC6D988
[NativeHeaderAttribute] // RVA: 0xC6D988 Offset: 0xC6D988 VA: 0xC6D988
[NativeClassAttribute] // RVA: 0xC6D988 Offset: 0xC6D988 VA: 0xC6D988
[Serializable]
public struct ContactFilter2D // TypeDefIndex: 2794
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC6DE98 Offset: 0xC6DE98 VA: 0xC6DE98
	public bool useTriggers; // 0x0
	[NativeNameAttribute] // RVA: 0xC6DED0 Offset: 0xC6DED0 VA: 0xC6DED0
	public bool useLayerMask; // 0x1
	[NativeNameAttribute] // RVA: 0xC6DF08 Offset: 0xC6DF08 VA: 0xC6DF08
	public bool useDepth; // 0x2
	[NativeNameAttribute] // RVA: 0xC6DF40 Offset: 0xC6DF40 VA: 0xC6DF40
	public bool useOutsideDepth; // 0x3
