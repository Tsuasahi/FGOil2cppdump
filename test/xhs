
	[NativeNameAttribute] // RVA: 0xC001F4 Offset: 0xC001F4 VA: 0xC001F4
	// RVA: 0x2B773AC Offset: 0x2B773AC VA: 0x2B773AC
	private void Emit_Internal(int count) { }

	[NativeNameAttribute] // RVA: 0xC0022C Offset: 0xC0022C VA: 0xC0022C
	// RVA: 0x2B77420 Offset: 0x2B77420 VA: 0x2B77420
	public void Emit(ParticleSystem.EmitParams emitParams, int count) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00264 Offset: 0xC00264 VA: 0xC00264
	// RVA: 0x2B76CC4 Offset: 0x2B76CC4 VA: 0x2B76CC4
	private void Internal_EmitOld(ref ParticleSystem.Particle particle) { }

	// RVA: 0x2B77424 Offset: 0x2B77424 VA: 0x2B77424
	private void Emit_Injected(ref ParticleSystem.EmitParams emitParams, int count) { }
}

// Namespace: 
public struct ParticleSystem.MainModule // TypeDefIndex: 2770
{
	// Fields
	private ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public float duration { get; }
	public bool loop { get; set; }
	public bool prewarm { get; }
	public float startDelayMultiplier { get; }
	public ParticleSystem.MinMaxCurve startLifetime { get; }
	public float startLifetimeMultiplier { get; }
	public ParticleSystem.MinMaxCurve startSize { get; set; }
	public float startSizeMultiplier { get; set; }
	public ParticleSystem.MinMaxGradient startColor { set; }
	public ParticleSystemSimulationSpace simulationSpace { get; }
	public ParticleSystemStopAction stopAction { get; set; }
	public ParticleSystemCullingMode cullingMode { set; }

	// Methods

	// RVA: 0xD797F8 Offset: 0xD797F8 VA: 0xD797F8
	internal void .ctor(ParticleSystem particleSystem) { }

	// RVA: 0xD79800 Offset: 0xD79800 VA: 0xD79800
	public float get_duration() { }

	// RVA: 0xD79808 Offset: 0xD79808 VA: 0xD79808
	public bool get_loop() { }

	// RVA: 0xD79810 Offset: 0xD79810 VA: 0xD79810
	public void set_loop(bool value) { }

	// RVA: 0xD7981C Offset: 0xD7981C VA: 0xD7981C
	public bool get_prewarm() { }

	// RVA: 0xD79824 Offset: 0xD79824 VA: 0xD79824
	public float get_startDelayMultiplier() { }

	// RVA: 0xD7982C Offset: 0xD7982C VA: 0xD7982C
	public ParticleSystem.MinMaxCurve get_startLifetime() { }

	// RVA: 0xD7986C Offset: 0xD7986C VA: 0xD7986C
	public float get_startLifetimeMultiplier() { }

	// RVA: 0xD79874 Offset: 0xD79874 VA: 0xD79874
	public void set_startSize(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0xD798A8 Offset: 0xD798A8 VA: 0xD798A8
	public ParticleSystem.MinMaxCurve get_startSize() { }

	// RVA: 0xD798E8 Offset: 0xD798E8 VA: 0xD798E8
	public float get_startSizeMultiplier() { }

	// RVA: 0xD798F0 Offset: 0xD798F0 VA: 0xD798F0
	public void set_startSizeMultiplier(float value) { }

	// RVA: 0xD798F8 Offset: 0xD798F8 VA: 0xD798F8
	public void set_startColor(ParticleSystem.MinMaxGradient value) { }

	// RVA: 0xD7993C Offset: 0xD7993C VA: 0xD7993C
	public ParticleSystemSimulationSpace get_simulationSpace() { }

	// RVA: 0xD79944 Offset: 0xD79944 VA: 0xD79944
	public ParticleSystemStopAction get_stopAction() { }

	// RVA: 0xD7994C Offset: 0xD7994C VA: 0xD7994C
	public void set_stopAction(ParticleSystemStopAction value) { }

	// RVA: 0xD79954 Offset: 0xD79954 VA: 0xD79954
	public void set_cullingMode(ParticleSystemCullingMode value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00274 Offset: 0xC00274 VA: 0xC00274
	// RVA: 0x2B77884 Offset: 0x2B77884 VA: 0x2B77884
	private static float GetDuration(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00284 Offset: 0xC00284 VA: 0xC00284
	// RVA: 0x2B77964 Offset: 0x2B77964 VA: 0x2B77964
	private static void SetLoop(ParticleSystem system, bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00294 Offset: 0xC00294 VA: 0xC00294
	// RVA: 0x2B778F8 Offset: 0x2B778F8 VA: 0x2B778F8
	private static bool GetLoop(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC002A4 Offset: 0xC002A4 VA: 0xC002A4
	// RVA: 0x2B779E0 Offset: 0x2B779E0 VA: 0x2B779E0
	private static bool GetPrewarm(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC002B4 Offset: 0xC002B4 VA: 0xC002B4
	// RVA: 0x2B77A4C Offset: 0x2B77A4C VA: 0x2B77A4C
	private static float GetStartDelayMultiplier(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC002C4 Offset: 0xC002C4 VA: 0xC002C4
	// RVA: 0x2B77AF8 Offset: 0x2B77AF8 VA: 0x2B77AF8
	private static void GetStartLifetime(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC002D4 Offset: 0xC002D4 VA: 0xC002D4
	// RVA: 0x2B77B6C Offset: 0x2B77B6C VA: 0x2B77B6C
	private static float GetStartLifetimeMultiplier(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC002E4 Offset: 0xC002E4 VA: 0xC002E4
	// RVA: 0x2B77BE0 Offset: 0x2B77BE0 VA: 0x2B77BE0
	private static void SetStartSizeX(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC002F4 Offset: 0xC002F4 VA: 0xC002F4
	// RVA: 0x2B77C94 Offset: 0x2B77C94 VA: 0x2B77C94
	private static void GetStartSizeX(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00304 Offset: 0xC00304 VA: 0xC00304
	// RVA: 0x2B77D74 Offset: 0x2B77D74 VA: 0x2B77D74
	private static void SetStartSizeXMultiplier(ParticleSystem system, float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00314 Offset: 0xC00314 VA: 0xC00314
	// RVA: 0x2B77D08 Offset: 0x2B77D08 VA: 0x2B77D08
	private static float GetStartSizeXMultiplier(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00324 Offset: 0xC00324 VA: 0xC00324
	// RVA: 0x2B77DE8 Offset: 0x2B77DE8 VA: 0x2B77DE8
	private static void SetStartColor(ParticleSystem system, ref ParticleSystem.MinMaxGradient gradient) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00334 Offset: 0xC00334 VA: 0xC00334
	// RVA: 0x2B77E5C Offset: 0x2B77E5C VA: 0x2B77E5C
	private static ParticleSystemSimulationSpace GetSimulationSpace(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00344 Offset: 0xC00344 VA: 0xC00344
	// RVA: 0x2B77F44 Offset: 0x2B77F44 VA: 0x2B77F44
	private static void SetStopAction(ParticleSystem system, ParticleSystemStopAction value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00354 Offset: 0xC00354 VA: 0xC00354
	// RVA: 0x2B77ED0 Offset: 0x2B77ED0 VA: 0x2B77ED0
	private static ParticleSystemStopAction GetStopAction(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00364 Offset: 0xC00364 VA: 0xC00364
	// RVA: 0x2B77FC0 Offset: 0x2B77FC0 VA: 0x2B77FC0
	private static void SetCullingMode(ParticleSystem system, ParticleSystemCullingMode value) { }
}

// Namespace: 
public struct ParticleSystem.EmissionModule // TypeDefIndex: 2771
{
	// Fields
	private ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public bool enabled { get; }
	public ParticleSystem.MinMaxCurve rateOverTime { get; set; }
	public int burstCount { set; }

	// Methods

	// RVA: 0xD795BC Offset: 0xD795BC VA: 0xD795BC
	internal void .ctor(ParticleSystem particleSystem) { }

	// RVA: 0xD795C4 Offset: 0xD795C4 VA: 0xD795C4
	public bool get_enabled() { }

	// RVA: 0xD795CC Offset: 0xD795CC VA: 0xD795CC
	public void set_rateOverTime(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0xD79600 Offset: 0xD79600 VA: 0xD79600
	public ParticleSystem.MinMaxCurve get_rateOverTime() { }

	// RVA: 0xD79640 Offset: 0xD79640 VA: 0xD79640
	public void SetBursts(ParticleSystem.Burst[] bursts) { }

	// RVA: 0xD79648 Offset: 0xD79648 VA: 0xD79648
	public void SetBursts(ParticleSystem.Burst[] bursts, int size) { }

	// RVA: 0xD79650 Offset: 0xD79650 VA: 0xD79650
	public void set_burstCount(int value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00374 Offset: 0xC00374 VA: 0xC00374
	// RVA: 0x2B774E8 Offset: 0x2B774E8 VA: 0x2B774E8
	private static bool GetEnabled(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00384 Offset: 0xC00384 VA: 0xC00384
	// RVA: 0x2B7755C Offset: 0x2B7755C VA: 0x2B7755C
	private static void SetRateOverTime(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00394 Offset: 0xC00394 VA: 0xC00394
	// RVA: 0x2B77610 Offset: 0x2B77610 VA: 0x2B77610
	private static void GetRateOverTime(ParticleSystem system, ref ParticleSystem.MinMaxCurve curve) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC003A4 Offset: 0xC003A4 VA: 0xC003A4
	// RVA: 0x2B7778C Offset: 0x2B7778C VA: 0x2B7778C
	private static void SetBurstCount(ParticleSystem system, int value) { }

	// RVA: 0x2B77788 Offset: 0x2B77788 VA: 0x2B77788
	private static void SetBurst(ParticleSystem system, int index, ParticleSystem.Burst burst) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC003B4 Offset: 0xC003B4 VA: 0xC003B4
	// RVA: 0x2B77800 Offset: 0x2B77800 VA: 0x2B77800
	private static void INTERNAL_CALL_SetBurst(ParticleSystem system, int index, ref ParticleSystem.Burst burst) { }
}

// Namespace: 
public struct ParticleSystem.ShapeModule // TypeDefIndex: 2772
{
	// Fields
	private ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public MeshRenderer meshRenderer { set; }
	public SkinnedMeshRenderer skinnedMeshRenderer { set; }
	public Vector3 scale { get; set; }

	// Methods

	// RVA: 0xD79A8C Offset: 0xD79A8C VA: 0xD79A8C
	internal void .ctor(ParticleSystem particleSystem) { }

	// RVA: 0xD79A94 Offset: 0xD79A94 VA: 0xD79A94
	public void set_meshRenderer(MeshRenderer value) { }

	// RVA: 0xD79A9C Offset: 0xD79A9C VA: 0xD79A9C
	public void set_skinnedMeshRenderer(SkinnedMeshRenderer value) { }

	// RVA: 0xD79AA4 Offset: 0xD79AA4 VA: 0xD79AA4
	public Vector3 get_scale() { }

	// RVA: 0xD79AD8 Offset: 0xD79AD8 VA: 0xD79AD8
	public void set_scale(Vector3 value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC003C4 Offset: 0xC003C4 VA: 0xC003C4
	// RVA: 0x2B780E0 Offset: 0x2B780E0 VA: 0x2B780E0
	private static void SetMeshRenderer(ParticleSystem system, MeshRenderer value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC003D4 Offset: 0xC003D4 VA: 0xC003D4
	// RVA: 0x2B7815C Offset: 0x2B7815C VA: 0x2B7815C
	private static void SetSkinnedMeshRenderer(ParticleSystem system, SkinnedMeshRenderer value) { }

	// RVA: 0x2B78260 Offset: 0x2B78260 VA: 0x2B78260
	private static void SetScale(ParticleSystem system, Vector3 value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC003E4 Offset: 0xC003E4 VA: 0xC003E4
	// RVA: 0x2B78288 Offset: 0x2B78288 VA: 0x2B78288
	private static void INTERNAL_CALL_SetScale(ParticleSystem system, ref Vector3 value) { }

	// RVA: 0x2B78204 Offset: 0x2B78204 VA: 0x2B78204
	private static Vector3 GetScale(ParticleSystem system) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC003F4 Offset: 0xC003F4 VA: 0xC003F4
	// RVA: 0x2B782FC Offset: 0x2B782FC VA: 0x2B782FC
	private static void INTERNAL_CALL_GetScale(ParticleSystem system, out Vector3 value) { }
}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xBFF8F0 Offset: 0xBFF8F0 VA: 0xBFF8F0
public struct ParticleSystem.Particle // TypeDefIndex: 2773
{
	// Fields
	private Vector3 m_Position; // 0x0
	private Vector3 m_Velocity; // 0xC
	private Vector3 m_AnimatedVelocity; // 0x18
	private Vector3 m_InitialVelocity; // 0x24
	private Vector3 m_AxisOfRotation; // 0x30
	private Vector3 m_Rotation; // 0x3C
	private Vector3 m_AngularVelocity; // 0x48
	private Vector3 m_StartSize; // 0x54
	private Color32 m_StartColor; // 0x60
	private uint m_RandomSeed; // 0x64
	private float m_Lifetime; // 0x68
	private float m_StartLifetime; // 0x6C
	private float m_EmitAccumulator0; // 0x70
	private float m_EmitAccumulator1; // 0x74
	private uint m_Flags; // 0x78

	// Properties
	[ObsoleteAttribute] // RVA: 0xC005E0 Offset: 0xC005E0 VA: 0xC005E0
	public float lifetime { set; }
	public Vector3 position { set; }
	public Vector3 velocity { set; }
	public float remainingLifetime { set; }
	public float startLifetime { set; }
	public Color32 startColor { set; }
	public uint randomSeed { set; }
	public float startSize { set; }
	public Vector3 rotation3D { set; }
	public Vector3 angularVelocity3D { set; }

	// Methods

	// RVA: 0xD799A0 Offset: 0xD799A0 VA: 0xD799A0
	public void set_lifetime(float value) { }

	// RVA: 0xD799A8 Offset: 0xD799A8 VA: 0xD799A8
	public void set_position(Vector3 value) { }

	// RVA: 0xD799B4 Offset: 0xD799B4 VA: 0xD799B4
	public void set_velocity(Vector3 value) { }

	// RVA: 0xD799C0 Offset: 0xD799C0 VA: 0xD799C0
	public void set_remainingLifetime(float value) { }

	// RVA: 0xD799C8 Offset: 0xD799C8 VA: 0xD799C8
	public void set_startLifetime(float value) { }

	// RVA: 0xD799D0 Offset: 0xD799D0 VA: 0xD799D0
	public void set_startColor(Color32 value) { }

	// RVA: 0xD799D8 Offset: 0xD799D8 VA: 0xD799D8
	public void set_randomSeed(uint value) { }

	// RVA: 0xD799E0 Offset: 0xD799E0 VA: 0xD799E0
	public void set_startSize(float value) { }

	// RVA: 0xD79A30 Offset: 0xD79A30 VA: 0xD79A30
	public void set_rotation3D(Vector3 value) { }

	// RVA: 0xD79A38 Offset: 0xD79A38 VA: 0xD79A38
	public void set_angularVelocity3D(Vector3 value) { }
}

// Namespace: 
public struct ParticleSystem.Burst // TypeDefIndex: 2774
{
	// Fields
	private float m_Time; // 0x0
	private ParticleSystem.MinMaxCurve m_Count; // 0x8
	private int m_RepeatCount; // 0x28
	private float m_RepeatInterval; // 0x2C
	private float m_InvProbability; // 0x30

	// Properties
	public float time { set; }
	public short minCount { set; }
	public short maxCount { set; }

	// Methods

	// RVA: 0xD79548 Offset: 0xD79548 VA: 0xD79548
	public void set_time(float value) { }

	// RVA: 0xD79550 Offset: 0xD79550 VA: 0xD79550
	public void set_minCount(short value) { }

	// RVA: 0xD79560 Offset: 0xD79560 VA: 0xD79560
	public void set_maxCount(short value) { }
}

// Namespace: 
[NativeTypeAttribute] // RVA: 0xBFF938 Offset: 0xBFF938 VA: 0xBFF938
[Serializable]
public struct ParticleSystem.MinMaxCurve // TypeDefIndex: 2775
{
	// Fields
	[SerializeField] // RVA: 0xBFFB7C Offset: 0xBFFB7C VA: 0xBFFB7C
	private ParticleSystemCurveMode m_Mode; // 0x0
	[SerializeField] // RVA: 0xBFFB8C Offset: 0xBFFB8C VA: 0xBFFB8C
	private float m_CurveMultiplier; // 0x4
	[SerializeField] // RVA: 0xBFFB9C Offset: 0xBFFB9C VA: 0xBFFB9C
	private AnimationCurve m_CurveMin; // 0x8
	[SerializeField] // RVA: 0xBFFBAC Offset: 0xBFFBAC VA: 0xBFFBAC
	private AnimationCurve m_CurveMax; // 0x10
	[SerializeField] // RVA: 0xBFFBBC Offset: 0xBFFBBC VA: 0xBFFBBC
	private float m_ConstantMin; // 0x18
	[SerializeField] // RVA: 0xBFFBCC Offset: 0xBFFBCC VA: 0xBFFBCC
	private float m_ConstantMax; // 0x1C

	// Properties
	public float constantMax { get; set; }
	public float constantMin { get; set; }
	public float constant { get; }

	// Methods

	// RVA: 0xD7995C Offset: 0xD7995C VA: 0xD7995C
	public void .ctor(float constant) { }

	// RVA: 0xD79970 Offset: 0xD79970 VA: 0xD79970
	public float get_constantMax() { }

	// RVA: 0xD79978 Offset: 0xD79978 VA: 0xD79978
	public void set_constantMax(float value) { }

	// RVA: 0xD79980 Offset: 0xD79980 VA: 0xD79980
	public float get_constantMin() { }

	// RVA: 0xD79988 Offset: 0xD79988 VA: 0xD79988
	public void set_constantMin(float value) { }

	// RVA: 0xD79990 Offset: 0xD79990 VA: 0xD79990
	public float get_constant() { }

	// RVA: 0x2B78060 Offset: 0x2B78060 VA: 0x2B78060
	public static ParticleSystem.MinMaxCurve op_Implicit(float constant) { }
}

// Namespace: 
[Serializable]
public struct ParticleSystem.MinMaxGradient // TypeDefIndex: 2776
{
	// Fields
	[SerializeField] // RVA: 0xBFFBDC Offset: 0xBFFBDC VA: 0xBFFBDC
	private ParticleSystemGradientMode m_Mode; // 0x0
	[SerializeField] // RVA: 0xBFFBEC Offset: 0xBFFBEC VA: 0xBFFBEC
	private Gradient m_GradientMin; // 0x8
	[SerializeField] // RVA: 0xBFFBFC Offset: 0xBFFBFC VA: 0xBFFBFC
	private Gradient m_GradientMax; // 0x10
	[SerializeField] // RVA: 0xBFFC0C Offset: 0xBFFC0C VA: 0xBFFC0C
	private Color m_ColorMin; // 0x18
	[SerializeField] // RVA: 0xBFFC1C Offset: 0xBFFC1C VA: 0xBFFC1C
	private Color m_ColorMax; // 0x28

	// Methods

	// RVA: 0xD79998 Offset: 0xD79998 VA: 0xD79998
	public void .ctor(Color color) { }

	// RVA: 0x2B76DF4 Offset: 0x2B76DF4 VA: 0x2B76DF4
	public static ParticleSystem.MinMaxGradient op_Implicit(Color color) { }
}

// Namespace: 
public struct ParticleSystem.EmitParams // TypeDefIndex: 2777
{
	// Fields
	[NativeNameAttribute] // RVA: 0xBFFC2C Offset: 0xBFFC2C VA: 0xBFFC2C
	private ParticleSystem.Particle m_Particle; // 0x0
	[NativeNameAttribute] // RVA: 0xBFFC64 Offset: 0xBFFC64 VA: 0xBFFC64
	private bool m_PositionSet; // 0x7C
	[NativeNameAttribute] // RVA: 0xBFFC9C Offset: 0xBFFC9C VA: 0xBFFC9C
	private bool m_VelocitySet; // 0x7D
	[NativeNameAttribute] // RVA: 0xBFFCD4 Offset: 0xBFFCD4 VA: 0xBFFCD4
	private bool m_AxisOfRotationSet; // 0x7E
	[NativeNameAttribute] // RVA: 0xBFFD0C Offset: 0xBFFD0C VA: 0xBFFD0C
	private bool m_RotationSet; // 0x7F
	[NativeNameAttribute] // RVA: 0xBFFD44 Offset: 0xBFFD44 VA: 0xBFFD44
	private bool m_AngularVelocitySet; // 0x80
	[NativeNameAttribute] // RVA: 0xBFFD7C Offset: 0xBFFD7C VA: 0xBFFD7C
	private bool m_StartSizeSet; // 0x81
	[NativeNameAttribute] // RVA: 0xBFFDB4 Offset: 0xBFFDB4 VA: 0xBFFDB4
	private bool m_StartColorSet; // 0x82
	[NativeNameAttribute] // RVA: 0xBFFDEC Offset: 0xBFFDEC VA: 0xBFFDEC
	private bool m_RandomSeedSet; // 0x83
	[NativeNameAttribute] // RVA: 0xBFFE24 Offset: 0xBFFE24 VA: 0xBFFE24
	private bool m_StartLifetimeSet; // 0x84
	[NativeNameAttribute] // RVA: 0xBFFE5C Offset: 0xBFFE5C VA: 0xBFFE5C
	private bool m_ApplyShapeToPosition; // 0x85
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFF990 Offset: 0xBFF990 VA: 0xBFF990
[RequireComponent] // RVA: 0xBFF990 Offset: 0xBFF990 VA: 0xBFF990
[RequireComponent] // RVA: 0xBFF990 Offset: 0xBFF990 VA: 0xBFF990
[NativeHeaderAttribute] // RVA: 0xBFF990 Offset: 0xBFF990 VA: 0xBFF990
public sealed class ParticleSystemRenderer : Renderer // TypeDefIndex: 2778
{
	// Properties
	public ParticleSystemRenderMode renderMode { get; }
	public float sortingFudge { set; }
	public SpriteMaskInteraction maskInteraction { set; }

	// Methods

	// RVA: 0x2B79614 Offset: 0x2B79614 VA: 0x2B79614
	public ParticleSystemRenderMode get_renderMode() { }

	// RVA: 0x2B79680 Offset: 0x2B79680 VA: 0x2B79680
	public void set_sortingFudge(float value) { }

	// RVA: 0x2B796F4 Offset: 0x2B796F4 VA: 0x2B796F4
	public void set_maskInteraction(SpriteMaskInteraction value) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC00404 Offset: 0xC00404 VA: 0xC00404
	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC00404 Offset: 0xC00404 VA: 0xC00404
	// RVA: 0x2B79768 Offset: 0x2B79768 VA: 0x2B79768
	private int Internal_GetMeshCount() { }
}

// Namespace: UnityEngine
public enum ParticleSystemRenderMode // TypeDefIndex: 2779
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemRenderMode Billboard = 0;
	public const ParticleSystemRenderMode Stretch = 1;
	public const ParticleSystemRenderMode HorizontalBillboard = 2;
	public const ParticleSystemRenderMode VerticalBillboard = 3;
	public const ParticleSystemRenderMode Mesh = 4;
	public const ParticleSystemRenderMode None = 5;
}

// Namespace: UnityEngine
public enum ParticleSystemCurveMode // TypeDefIndex: 2780
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemCurveMode Constant = 0;
	public const ParticleSystemCurveMode Curve = 1;
	public const ParticleSystemCurveMode TwoCurves = 2;
	public const ParticleSystemCurveMode TwoConstants = 3;
}

// Namespace: UnityEngine
public enum ParticleSystemGradientMode // TypeDefIndex: 2781
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemGradientMode Color = 0;
	public const ParticleSystemGradientMode Gradient = 1;
	public const ParticleSystemGradientMode TwoColors = 2;
	public const ParticleSystemGradientMode TwoGradients = 3;
	public const ParticleSystemGradientMode RandomColor = 4;
}

// Namespace: UnityEngine
public enum ParticleSystemSimulationSpace // TypeDefIndex: 2782
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemSimulationSpace Local = 0;
	public const ParticleSystemSimulationSpace World = 1;
	public const ParticleSystemSimulationSpace Custom = 2;
}

// Namespace: UnityEngine
public enum ParticleSystemStopBehavior // TypeDefIndex: 2783
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemStopBehavior StopEmittingAndClear = 0;
	public const ParticleSystemStopBehavior StopEmitting = 1;
}

// Namespace: UnityEngine
public enum ParticleSystemStopAction // TypeDefIndex: 2784
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemStopAction None = 0;
	public const ParticleSystemStopAction Disable = 1;
	public const ParticleSystemStopAction Destroy = 2;
	public const ParticleSystemStopAction Callback = 3;
}

// Namespace: UnityEngine
public enum ParticleSystemCullingMode // TypeDefIndex: 2785
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemCullingMode Automatic = 0;
	public const ParticleSystemCullingMode PauseAndCatchup = 1;
	public const ParticleSystemCullingMode Pause = 2;
	public const ParticleSystemCullingMode AlwaysSimulate = 3;
}

// Namespace: UnityEngine
public enum ParticleSystemForceFieldShape // TypeDefIndex: 2786
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemForceFieldShape Sphere = 0;
	public const ParticleSystemForceFieldShape Hemisphere = 1;
	public const ParticleSystemForceFieldShape Cylinder = 2;
	public const ParticleSystemForceFieldShape Box = 3;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xBFFA64 Offset: 0xBFFA64 VA: 0xBFFA64
[NativeHeaderAttribute] // RVA: 0xBFFA64 Offset: 0xBFFA64 VA: 0xBFFA64
[NativeHeaderAttribute] // RVA: 0xBFFA64 Offset: 0xBFFA64 VA: 0xBFFA64
[NativeHeaderAttribute] // RVA: 0xBFFA64 Offset: 0xBFFA64 VA: 0xBFFA64
[NativeHeaderAttribute] // RVA: 0xBFFA64 Offset: 0xBFFA64 VA: 0xBFFA64
[RequireComponent] // RVA: 0xBFFA64 Offset: 0xBFFA64 VA: 0xBFFA64
public class ParticleSystemForceField : Component // TypeDefIndex: 2787
{
	// Properties
	[NativeNameAttribute] // RVA: 0xC0061C Offset: 0xC0061C VA: 0xC0061C
	public ParticleSystemForceFieldShape shape { get; set; }
	public float startRange { get; set; }
	public float endRange { get; set; }
	public float length { get; set; }
	public float gravityFocus { get; set; }
	public Vector2 rotationRandomness { get; set; }
	public bool multiplyDragByParticleSize { get; set; }
	public bool multiplyDragByParticleVelocity { get; set; }
	public Texture3D vectorField { get; set; }
	public ParticleSystem.MinMaxCurve directionX { get; set; }
	public ParticleSystem.MinMaxCurve directionY { get; set; }
	public ParticleSystem.MinMaxCurve directionZ { get; set; }
	public ParticleSystem.MinMaxCurve gravity { get; set; }
	public ParticleSystem.MinMaxCurve rotationSpeed { get; set; }
	public ParticleSystem.MinMaxCurve rotationAttraction { get; set; }
	public ParticleSystem.MinMaxCurve drag { get; set; }
	public ParticleSystem.MinMaxCurve vectorFieldSpeed { get; set; }
	public ParticleSystem.MinMaxCurve vectorFieldAttraction { get; set; }

	// Methods

	// RVA: 0x2B78370 Offset: 0x2B78370 VA: 0x2B78370
	public void .ctor() { }

	// RVA: 0x2B78378 Offset: 0x2B78378 VA: 0x2B78378
	public ParticleSystemForceFieldShape get_shape() { }

	// RVA: 0x2B783E4 Offset: 0x2B783E4 VA: 0x2B783E4
	public void set_shape(ParticleSystemForceFieldShape value) { }

	// RVA: 0x2B78458 Offset: 0x2B78458 VA: 0x2B78458
	public float get_startRange() { }

	// RVA: 0x2B784C4 Offset: 0x2B784C4 VA: 0x2B784C4
	public void set_startRange(float value) { }

	// RVA: 0x2B78538 Offset: 0x2B78538 VA: 0x2B78538
	public float get_endRange() { }

	// RVA: 0x2B785A4 Offset: 0x2B785A4 VA: 0x2B785A4
	public void set_endRange(float value) { }

	// RVA: 0x2B78618 Offset: 0x2B78618 VA: 0x2B78618
	public float get_length() { }

	// RVA: 0x2B78684 Offset: 0x2B78684 VA: 0x2B78684
	public void set_length(float value) { }

	// RVA: 0x2B786F8 Offset: 0x2B786F8 VA: 0x2B786F8
	public float get_gravityFocus() { }

	// RVA: 0x2B78764 Offset: 0x2B78764 VA: 0x2B78764
	public void set_gravityFocus(float value) { }

	// RVA: 0x2B787D8 Offset: 0x2B787D8 VA: 0x2B787D8
	public Vector2 get_rotationRandomness() { }

	// RVA: 0x2B78874 Offset: 0x2B78874 VA: 0x2B78874
	public void set_rotationRandomness(Vector2 value) { }

	// RVA: 0x2B7890C Offset: 0x2B7890C VA: 0x2B7890C
	public bool get_multiplyDragByParticleSize() { }

	// RVA: 0x2B78978 Offset: 0x2B78978 VA: 0x2B78978
	public void set_multiplyDragByParticleSize(bool value) { }

	// RVA: 0x2B789EC Offset: 0x2B789EC VA: 0x2B789EC
	public bool get_multiplyDragByParticleVelocity() { }

	// RVA: 0x2B78A58 Offset: 0x2B78A58 VA: 0x2B78A58
	public void set_multiplyDragByParticleVelocity(bool value) { }

	// RVA: 0x2B78ACC Offset: 0x2B78ACC VA: 0x2B78ACC
	public Texture3D get_vectorField() { }

	// RVA: 0x2B78B38 Offset: 0x2B78B38 VA: 0x2B78B38
	public void set_vectorField(Texture3D value) { }

	// RVA: 0x2B78BAC Offset: 0x2B78BAC VA: 0x2B78BAC
	public ParticleSystem.MinMaxCurve get_directionX() { }

	// RVA: 0x2B78C5C Offset: 0x2B78C5C VA: 0x2B78C5C
	public void set_directionX(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78CD4 Offset: 0x2B78CD4 VA: 0x2B78CD4
	public ParticleSystem.MinMaxCurve get_directionY() { }

	// RVA: 0x2B78D84 Offset: 0x2B78D84 VA: 0x2B78D84
	public void set_directionY(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78DFC Offset: 0x2B78DFC VA: 0x2B78DFC
	public ParticleSystem.MinMaxCurve get_directionZ() { }

	// RVA: 0x2B78EAC Offset: 0x2B78EAC VA: 0x2B78EAC
	public void set_directionZ(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78F24 Offset: 0x2B78F24 VA: 0x2B78F24
	public ParticleSystem.MinMaxCurve get_gravity() { }

	// RVA: 0x2B78FD4 Offset: 0x2B78FD4 VA: 0x2B78FD4
	public void set_gravity(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B7904C Offset: 0x2B7904C VA: 0x2B7904C
	public ParticleSystem.MinMaxCurve get_rotationSpeed() { }

	// RVA: 0x2B790FC Offset: 0x2B790FC VA: 0x2B790FC
	public void set_rotationSpeed(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B79174 Offset: 0x2B79174 VA: 0x2B79174
	public ParticleSystem.MinMaxCurve get_rotationAttraction() { }

	// RVA: 0x2B79224 Offset: 0x2B79224 VA: 0x2B79224
	public void set_rotationAttraction(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B7929C Offset: 0x2B7929C VA: 0x2B7929C
	public ParticleSystem.MinMaxCurve get_drag() { }

	// RVA: 0x2B7934C Offset: 0x2B7934C VA: 0x2B7934C
	public void set_drag(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B793C4 Offset: 0x2B793C4 VA: 0x2B793C4
	public ParticleSystem.MinMaxCurve get_vectorFieldSpeed() { }

	// RVA: 0x2B79474 Offset: 0x2B79474 VA: 0x2B79474
	public void set_vectorFieldSpeed(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B794EC Offset: 0x2B794EC VA: 0x2B794EC
	public ParticleSystem.MinMaxCurve get_vectorFieldAttraction() { }

	// RVA: 0x2B7959C Offset: 0x2B7959C VA: 0x2B7959C
	public void set_vectorFieldAttraction(ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78800 Offset: 0x2B78800 VA: 0x2B78800
	private void get_rotationRandomness_Injected(out Vector2 ret) { }

	// RVA: 0x2B78898 Offset: 0x2B78898 VA: 0x2B78898
	private void set_rotationRandomness_Injected(ref Vector2 value) { }

	// RVA: 0x2B78BE8 Offset: 0x2B78BE8 VA: 0x2B78BE8
	private void get_directionX_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B78C60 Offset: 0x2B78C60 VA: 0x2B78C60
	private void set_directionX_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78D10 Offset: 0x2B78D10 VA: 0x2B78D10
	private void get_directionY_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B78D88 Offset: 0x2B78D88 VA: 0x2B78D88
	private void set_directionY_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78E38 Offset: 0x2B78E38 VA: 0x2B78E38
	private void get_directionZ_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B78EB0 Offset: 0x2B78EB0 VA: 0x2B78EB0
	private void set_directionZ_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B78F60 Offset: 0x2B78F60 VA: 0x2B78F60
	private void get_gravity_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B78FD8 Offset: 0x2B78FD8 VA: 0x2B78FD8
	private void set_gravity_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B79088 Offset: 0x2B79088 VA: 0x2B79088
	private void get_rotationSpeed_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B79100 Offset: 0x2B79100 VA: 0x2B79100
	private void set_rotationSpeed_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B791B0 Offset: 0x2B791B0 VA: 0x2B791B0
	private void get_rotationAttraction_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B79228 Offset: 0x2B79228 VA: 0x2B79228
	private void set_rotationAttraction_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B792D8 Offset: 0x2B792D8 VA: 0x2B792D8
	private void get_drag_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B79350 Offset: 0x2B79350 VA: 0x2B79350
	private void set_drag_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B79400 Offset: 0x2B79400 VA: 0x2B79400
	private void get_vectorFieldSpeed_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B79478 Offset: 0x2B79478 VA: 0x2B79478
	private void set_vectorFieldSpeed_Injected(ref ParticleSystem.MinMaxCurve value) { }

	// RVA: 0x2B79528 Offset: 0x2B79528 VA: 0x2B79528
	private void get_vectorFieldAttraction_Injected(out ParticleSystem.MinMaxCurve ret) { }

	// RVA: 0x2B795A0 Offset: 0x2B795A0 VA: 0x2B795A0
	private void set_vectorFieldAttraction_Injected(ref ParticleSystem.MinMaxCurve value) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2788
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC01764 Offset: 0xC01764 VA: 0xC01764
public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 2789
{
	// Fields
	private int m_Handle; // 0x0

	// Methods

	// RVA: 0xD78C08 Offset: 0xD78C08 VA: 0xD78C08 Slot: 3
	public override string ToString() { }

	// RVA: 0xD78C10 Offset: 0xD78C10 VA: 0xD78C10 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xD78C18 Offset: 0xD78C18 VA: 0xD78C18 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xD78C20 Offset: 0xD78C20 VA: 0xD78C20 Slot: 4
	public bool Equals(PhysicsScene2D other) { }

	// RVA: 0xD78C30 Offset: 0xD78C30 VA: 0xD78C30
	public RaycastHit2D Linecast(Vector2 start, Vector2 end, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xC02390 Offset: 0xC02390 VA: 0xC02390
	[NativeMethodAttribute] // RVA: 0xC02390 Offset: 0xC02390 VA: 0xC02390
	// RVA: 0x2B6B7A4 Offset: 0x2B6B7A4 VA: 0x2B6B7A4
	private static RaycastHit2D Linecast_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter) { }

	// RVA: 0xD78CA8 Offset: 0xD78CA8 VA: 0xD78CA8
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask = -5) { }

	// RVA: 0xD78CB0 Offset: 0xD78CB0 VA: 0xD78CB0
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xC023F4 Offset: 0xC023F4 VA: 0xC023F4
	[NativeMethodAttribute] // RVA: 0xC023F4 Offset: 0xC023F4 VA: 0xC023F4
	// RVA: 0x2B6B8B0 Offset: 0x2B6B8B0 VA: 0x2B6B8B0
	private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	// RVA: 0xD78D28 Offset: 0xD78D28 VA: 0xD78D28
	public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }

	[NativeMethodAttribute] // RVA: 0xC02458 Offset: 0xC02458 VA: 0xC02458
	[StaticAccessorAttribute] // RVA: 0xC02458 Offset: 0xC02458 VA: 0xC02458
	// RVA: 0x2B6B9C8 Offset: 0x2B6B9C8 VA: 0x2B6B9C8
	private static int RaycastNonAlloc_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, [Out] RaycastHit2D[] results) { }

	// RVA: 0xD78D5C Offset: 0xD78D5C VA: 0xD78D5C
	public RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask = -5) { }

	[StaticAccessorAttribute] // RVA: 0xC024BC Offset: 0xC024BC VA: 0xC024BC
	[NativeMethodAttribute] // RVA: 0xC024BC Offset: 0xC024BC VA: 0xC024BC
	// RVA: 0x2B6BAB4 Offset: 0x2B6BAB4 VA: 0x2B6BAB4
	private static RaycastHit2D GetRayIntersection_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask) { }

	// RVA: 0xD78D90 Offset: 0xD78D90 VA: 0xD78D90
	public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, int layerMask = -5) { }

	[NativeMethodAttribute] // RVA: 0xC02520 Offset: 0xC02520 VA: 0xC02520
	[StaticAccessorAttribute] // RVA: 0xC02520 Offset: 0xC02520 VA: 0xC02520
	// RVA: 0x2B6BBD4 Offset: 0x2B6BBD4 VA: 0x2B6BBD4
	private static int GetRayIntersectionNonAlloc_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, [Out] RaycastHit2D[] results) { }

	// RVA: 0xD78DC4 Offset: 0xD78DC4 VA: 0xD78DC4
	public Collider2D OverlapPoint(Vector2 point, ContactFilter2D contactFilter) { }

	[StaticAccessorAttribute] // RVA: 0xC02584 Offset: 0xC02584 VA: 0xC02584
	[NativeMethodAttribute] // RVA: 0xC02584 Offset: 0xC02584 VA: 0xC02584
	// RVA: 0x2B6BCC8 Offset: 0x2B6BCC8 VA: 0x2B6BCC8
	private static Collider2D OverlapPoint_Internal(PhysicsScene2D physicsScene, Vector2 point, ContactFilter2D contactFilter) { }

	// RVA: 0x2B6B814 Offset: 0x2B6B814 VA: 0x2B6B814
	private static void Linecast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 start, ref Vector2 end, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }

	// RVA: 0x2B6B924 Offset: 0x2B6B924 VA: 0x2B6B924
	private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }

	// RVA: 0x2B6BA10 Offset: 0x2B6BA10 VA: 0x2B6BA10
	private static int RaycastNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, [Out] RaycastHit2D[] results) { }

	// RVA: 0x2B6BB30 Offset: 0x2B6BB30 VA: 0x2B6BB30
	private static void GetRayIntersection_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, out RaycastHit2D ret) { }

	// RVA: 0x2B6BC24 Offset: 0x2B6BC24 VA: 0x2B6BC24
	private static int GetRayIntersectionNonAlloc_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, [Out] RaycastHit2D[] results) { }

	// RVA: 0x2B6BCFC Offset: 0x2B6BCFC VA: 0x2B6BCFC
	private static Collider2D OverlapPoint_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref ContactFilter2D contactFilter) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC0179C Offset: 0xC0179C VA: 0xC0179C
[NativeHeaderAttribute] // RVA: 0xC0179C Offset: 0xC0179C VA: 0xC0179C
[NativeHeaderAttribute] // RVA: 0xC0179C Offset: 0xC0179C VA: 0xC0179C
[StaticAccessorAttribute] // RVA: 0xC0179C Offset: 0xC0179C VA: 0xC0179C
public class Physics2D // TypeDefIndex: 2790
{
	// Fields
	private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0x0

	// Properties
	[StaticAccessorAttribute] // RVA: 0xC03498 Offset: 0xC03498 VA: 0xC03498
	[NativePropertyAttribute] // RVA: 0xC03498 Offset: 0xC03498 VA: 0xC03498
	public static PhysicsScene2D defaultPhysicsScene { get; }
	[StaticAccessorAttribute] // RVA: 0xC034FC Offset: 0xC034FC VA: 0xC034FC
	public static Vector2 gravity { set; }
	[StaticAccessorAttribute] // RVA: 0xC03534 Offset: 0xC03534 VA: 0xC03534
	public static bool queriesHitTriggers { get; }

	// Methods

	// RVA: 0x2B68D54 Offset: 0x2B68D54 VA: 0x2B68D54
	public static PhysicsScene2D get_defaultPhysicsScene() { }

	// RVA: 0x2B68E2C Offset: 0x2B68E2C VA: 0x2B68E2C
	public static void set_gravity(Vector2 value) { }

	// RVA: 0x2B6885C Offset: 0x2B6885C VA: 0x2B6885C
	public static bool get_queriesHitTriggers() { }

	[ExcludeFromDocsAttribute] // RVA: 0xC025E8 Offset: 0xC025E8 VA: 0xC025E8
	// RVA: 0x2B68F00 Offset: 0x2B68F00 VA: 0x2B68F00
	public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask) { }

	// RVA: 0x2B6909C Offset: 0x2B6909C VA: 0x2B6909C
	public static RaycastHit2D Linecast(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC025F8 Offset: 0xC025F8 VA: 0xC025F8
	// RVA: 0x2B691D8 Offset: 0x2B691D8 VA: 0x2B691D8
	public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask) { }

	// RVA: 0x2B69340 Offset: 0x2B69340 VA: 0x2B69340
	public static RaycastHit2D[] LinecastAll(Vector2 start, Vector2 end, int layerMask, float minDepth, float maxDepth) { }

	[StaticAccessorAttribute] // RVA: 0xC02608 Offset: 0xC02608 VA: 0xC02608
	[NativeMethodAttribute] // RVA: 0xC02608 Offset: 0xC02608 VA: 0xC02608
	// RVA: 0x2B692B8 Offset: 0x2B692B8 VA: 0x2B692B8
	private static RaycastHit2D[] LinecastAll_Internal(PhysicsScene2D physicsScene, Vector2 start, Vector2 end, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC0266C Offset: 0xC0266C VA: 0xC0266C
	// RVA: 0x2B694B4 Offset: 0x2B694B4 VA: 0x2B694B4
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC0267C Offset: 0xC0267C VA: 0xC0267C
	// RVA: 0x2B69660 Offset: 0x2B69660 VA: 0x2B69660
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC0268C Offset: 0xC0268C VA: 0xC0268C
	[ExcludeFromDocsAttribute] // RVA: 0xC0268C Offset: 0xC0268C VA: 0xC0268C
	// RVA: 0x2B69748 Offset: 0x2B69748 VA: 0x2B69748
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC026C4 Offset: 0xC026C4 VA: 0xC026C4
	// RVA: 0x2B698F4 Offset: 0x2B698F4 VA: 0x2B698F4
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth) { }

	// RVA: 0x2B69A38 Offset: 0x2B69A38 VA: 0x2B69A38
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC026D4 Offset: 0xC026D4 VA: 0xC026D4
	// RVA: 0x2B69B84 Offset: 0x2B69B84 VA: 0x2B69B84
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results) { }

	// RVA: 0x2B69CB0 Offset: 0x2B69CB0 VA: 0x2B69CB0
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC026E4 Offset: 0xC026E4 VA: 0xC026E4
	// RVA: 0x2B69D8C Offset: 0x2B69D8C VA: 0x2B69D8C
	public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask) { }

	// RVA: 0x2B69F14 Offset: 0x2B69F14 VA: 0x2B69F14
	public static RaycastHit2D[] RaycastAll(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth) { }

	[NativeMethodAttribute] // RVA: 0xC026F4 Offset: 0xC026F4 VA: 0xC026F4
	[StaticAccessorAttribute] // RVA: 0xC026F4 Offset: 0xC026F4 VA: 0xC026F4
	// RVA: 0x2B69E7C Offset: 0x2B69E7C VA: 0x2B69E7C
	private static RaycastHit2D[] RaycastAll_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC02758 Offset: 0xC02758 VA: 0xC02758
	// RVA: 0x2B6A0B0 Offset: 0x2B6A0B0 VA: 0x2B6A0B0
	public static RaycastHit2D GetRayIntersection(Ray ray, float distance) { }

	// RVA: 0x2B6A240 Offset: 0x2B6A240 VA: 0x2B6A240
	public static RaycastHit2D GetRayIntersection(Ray ray, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC02768 Offset: 0xC02768 VA: 0xC02768
	// RVA: 0x2B6A31C Offset: 0x2B6A31C VA: 0x2B6A31C
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC02778 Offset: 0xC02778 VA: 0xC02778
	// RVA: 0x2B6A480 Offset: 0x2B6A480 VA: 0x2B6A480
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC02788 Offset: 0xC02788 VA: 0xC02788
	// RVA: 0x2B6A544 Offset: 0x2B6A544 VA: 0x2B6A544
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask) { }

	[NativeMethodAttribute] // RVA: 0xC02798 Offset: 0xC02798 VA: 0xC02798
	[StaticAccessorAttribute] // RVA: 0xC02798 Offset: 0xC02798 VA: 0xC02798
	// RVA: 0x2B6A3E0 Offset: 0x2B6A3E0 VA: 0x2B6A3E0
	private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC027FC Offset: 0xC027FC VA: 0xC027FC
	// RVA: 0x2B6A6B8 Offset: 0x2B6A6B8 VA: 0x2B6A6B8
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC0280C Offset: 0xC0280C VA: 0xC0280C
	// RVA: 0x2B6A7F4 Offset: 0x2B6A7F4 VA: 0x2B6A7F4
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC0281C Offset: 0xC0281C VA: 0xC0281C
	// RVA: 0x2B6A8A8 Offset: 0x2B6A8A8 VA: 0x2B6A8A8
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC0282C Offset: 0xC0282C VA: 0xC0282C
