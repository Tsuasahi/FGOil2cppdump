	internal virtual UnmanagedMarshal UMarshal { get; }

	// Methods

	// RVA: 0x22E7338 Offset: 0x22E7338 VA: 0x22E7338
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract FieldAttributes get_Attributes();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract RuntimeFieldHandle get_FieldHandle();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract Type get_FieldType();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract object GetValue(object obj);

	// RVA: 0x22E7340 Offset: 0x22E7340 VA: 0x22E7340 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x22E7348 Offset: 0x22E7348 VA: 0x22E7348 Slot: 18
	public bool get_IsLiteral() { }

	// RVA: 0x22E54CC Offset: 0x22E54CC VA: 0x22E54CC Slot: 19
	public bool get_IsStatic() { }

	// RVA: 0x22E736C Offset: 0x22E736C VA: 0x22E736C Slot: 20
	public bool get_IsPublic() { }

	// RVA: 0x22E7398 Offset: 0x22E7398 VA: 0x22E7398 Slot: 21
	public bool get_IsNotSerialized() { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);

	[DebuggerHiddenAttribute] // RVA: 0xBCCD78 Offset: 0xBCCD78 VA: 0xBCCD78
	[DebuggerStepThroughAttribute] // RVA: 0xBCCD78 Offset: 0xBCCD78 VA: 0xBCCD78
	// RVA: 0x22E73BC Offset: 0x22E73BC VA: 0x22E73BC Slot: 23
	public void SetValue(object obj, object value) { }

	// RVA: 0x22E73D8 Offset: 0x22E73D8 VA: 0x22E73D8
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle) { }

	// RVA: 0x22E73DC Offset: 0x22E73DC VA: 0x22E73DC
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { }

	// RVA: 0x22E7490 Offset: 0x22E7490 VA: 0x22E7490 Slot: 24
	internal virtual int GetFieldOffset() { }

	// RVA: 0x22E7504 Offset: 0x22E7504 VA: 0x22E7504
	private UnmanagedMarshal GetUnmanagedMarshal() { }

	// RVA: 0x22E7508 Offset: 0x22E7508 VA: 0x22E7508 Slot: 25
	internal virtual UnmanagedMarshal get_UMarshal() { }

	// RVA: 0x22E750C Offset: 0x22E750C VA: 0x22E750C
	internal object[] GetPseudoCustomAttributes() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC664C Offset: 0xBC664C VA: 0xBC664C
[Serializable]
public enum ImageFileMachine // TypeDefIndex: 384
{
	// Fields
	public int value__; // 0x0
	public const ImageFileMachine I386 = 332;
	public const ImageFileMachine IA64 = 512;
	public const ImageFileMachine AMD64 = 34404;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC6660 Offset: 0xBC6660 VA: 0xBC6660
public class LocalVariableInfo // TypeDefIndex: 385
{
	// Fields
	internal Type type; // 0x10
	internal bool is_pinned; // 0x18
	internal ushort position; // 0x1A

	// Methods

	// RVA: 0x22DAEA8 Offset: 0x22DAEA8 VA: 0x22DAEA8
	internal void .ctor() { }

	// RVA: 0x22E77AC Offset: 0x22E77AC VA: 0x22E77AC Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC6674 Offset: 0xBC6674 VA: 0xBC6674
public class ManifestResourceInfo // TypeDefIndex: 386
{
	// Fields
	private Assembly _assembly; // 0x10
	private string _filename; // 0x18
	private ResourceLocation _location; // 0x20

	// Properties
	public virtual string FileName { get; }
	public virtual Assembly ReferencedAssembly { get; }
	public virtual ResourceLocation ResourceLocation { get; }

	// Methods

	// RVA: 0x22E78AC Offset: 0x22E78AC VA: 0x22E78AC
	internal void .ctor() { }

	// RVA: 0x22E78B4 Offset: 0x22E78B4 VA: 0x22E78B4 Slot: 4
	public virtual string get_FileName() { }

	// RVA: 0x22E78BC Offset: 0x22E78BC VA: 0x22E78BC Slot: 5
	public virtual Assembly get_ReferencedAssembly() { }

	// RVA: 0x22E78C4 Offset: 0x22E78C4 VA: 0x22E78C4 Slot: 6
	public virtual ResourceLocation get_ResourceLocation() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 387
{
	// Fields
	private readonly string _memberName; // 0x10
	private readonly string _memberSignature; // 0x18
	private readonly MemberTypes _memberType; // 0x20
	private readonly Type _reflectedType; // 0x28
	private readonly Type[] _genericArguments; // 0x30

	// Methods

	// RVA: 0x22E7D0C Offset: 0x22E7D0C VA: 0x22E7D0C
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x22E7EB4 Offset: 0x22E7EB4 VA: 0x22E7EB4
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type) { }

	// RVA: 0x22E7EBC Offset: 0x22E7EBC VA: 0x22E7EBC
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type, Type[] genericArguments) { }

	// RVA: 0x22E8174 Offset: 0x22E8174 VA: 0x22E8174 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22E81DC Offset: 0x22E81DC VA: 0x22E81DC Slot: 5
	public object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xBC6688 Offset: 0xBC6688 VA: 0xBC6688
[ComVisibleAttribute] // RVA: 0xBC6688 Offset: 0xBC6688 VA: 0xBC6688
[Serializable]
public enum MemberTypes // TypeDefIndex: 388
{
	// Fields
	public int value__; // 0x0
	public const MemberTypes Constructor = 1;
	public const MemberTypes Event = 2;
	public const MemberTypes Field = 4;
	public const MemberTypes Method = 8;
	public const MemberTypes Property = 16;
	public const MemberTypes TypeInfo = 32;
	public const MemberTypes Custom = 64;
	public const MemberTypes NestedType = 128;
	public const MemberTypes All = 191;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC66C4 Offset: 0xBC66C4 VA: 0xBC66C4
[FlagsAttribute] // RVA: 0xBC66C4 Offset: 0xBC66C4 VA: 0xBC66C4
[Serializable]
public enum MethodAttributes // TypeDefIndex: 389
{
	// Fields
	public int value__; // 0x0
	public const MethodAttributes MemberAccessMask = 7;
	public const MethodAttributes PrivateScope = 0;
	public const MethodAttributes Private = 1;
	public const MethodAttributes FamANDAssem = 2;
	public const MethodAttributes Assembly = 3;
	public const MethodAttributes Family = 4;
	public const MethodAttributes FamORAssem = 5;
	public const MethodAttributes Public = 6;
	public const MethodAttributes Static = 16;
	public const MethodAttributes Final = 32;
	public const MethodAttributes Virtual = 64;
	public const MethodAttributes HideBySig = 128;
	public const MethodAttributes VtableLayoutMask = 256;
	public const MethodAttributes CheckAccessOnOverride = 512;
	public const MethodAttributes ReuseSlot = 0;
	public const MethodAttributes NewSlot = 256;
	public const MethodAttributes Abstract = 1024;
	public const MethodAttributes SpecialName = 2048;
	public const MethodAttributes PinvokeImpl = 8192;
	public const MethodAttributes UnmanagedExport = 8;
	public const MethodAttributes RTSpecialName = 4096;
	public const MethodAttributes ReservedMask = 53248;
	public const MethodAttributes HasSecurity = 16384;
	public const MethodAttributes RequireSecObject = 32768;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0xBC6700 Offset: 0xBC6700 VA: 0xBC6700
[ComVisibleAttribute] // RVA: 0xBC6700 Offset: 0xBC6700 VA: 0xBC6700
[ClassInterfaceAttribute] // RVA: 0xBC6700 Offset: 0xBC6700 VA: 0xBC6700
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 390
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; }
	public bool IsPublic { get; }
	public bool IsStatic { get; }
	public bool IsVirtual { get; }
	public bool IsAbstract { get; }
	public virtual bool ContainsGenericParameters { get; }
	public virtual bool IsGenericMethodDefinition { get; }
	public virtual bool IsGenericMethod { get; }

	// Methods

	// RVA: 0x22E87BC Offset: 0x22E87BC VA: 0x22E87BC
	protected void .ctor() { }

	// RVA: 0x22E87C4 Offset: 0x22E87C4 VA: 0x22E87C4
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle) { }

	// RVA: 0x22E8818 Offset: 0x22E8818 VA: 0x22E8818
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType) { }

	// RVA: 0x22E88D0 Offset: 0x22E88D0 VA: 0x22E88D0
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { }

	// RVA: 0x22E88CC Offset: 0x22E88CC VA: 0x22E88CC
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract ParameterInfo[] GetParameters();

	// RVA: 0x22E89CC Offset: 0x22E89CC VA: 0x22E89CC Slot: 15
	internal virtual int GetParameterCount() { }

	[DebuggerHiddenAttribute] // RVA: 0xBCCDB0 Offset: 0xBCCDB0 VA: 0xBCCDB0
	[DebuggerStepThroughAttribute] // RVA: 0xBCCDB0 Offset: 0xBCCDB0 VA: 0xBCCDB0
	// RVA: 0x22D64B0 Offset: 0x22D64B0 VA: 0x22D64B0 Slot: 16
	public object Invoke(object obj, object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract RuntimeMethodHandle get_MethodHandle();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodAttributes get_Attributes();

	// RVA: 0x22E89F4 Offset: 0x22E89F4 VA: 0x22E89F4 Slot: 20
	public virtual CallingConventions get_CallingConvention() { }

	// RVA: 0x22E89FC Offset: 0x22E89FC VA: 0x22E89FC Slot: 21
	public bool get_IsPublic() { }

	// RVA: 0x22E5B44 Offset: 0x22E5B44 VA: 0x22E5B44 Slot: 22
	public bool get_IsStatic() { }

	// RVA: 0x22DBA4C Offset: 0x22DBA4C VA: 0x22DBA4C Slot: 23
	public bool get_IsVirtual() { }

	// RVA: 0x22E54F0 Offset: 0x22E54F0 VA: 0x22E54F0 Slot: 24
	public bool get_IsAbstract() { }

	// RVA: 0x22E8A28 Offset: 0x22E8A28 VA: 0x22E8A28 Slot: 25
	internal virtual int get_next_table_index(object obj, int table, bool inc) { }

	[ComVisibleAttribute] // RVA: 0xBCCDE8 Offset: 0xBCCDE8 VA: 0xBCCDE8
	// RVA: 0x22E8B24 Offset: 0x22E8B24 VA: 0x22E8B24 Slot: 26
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x22E8B8C Offset: 0x22E8B8C VA: 0x22E8B8C Slot: 27
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x22E8B94 Offset: 0x22E8B94 VA: 0x22E8B94 Slot: 28
	public virtual bool get_IsGenericMethodDefinition() { }

	// RVA: 0x22E8B9C Offset: 0x22E8B9C VA: 0x22E8B9C Slot: 29
	public virtual bool get_IsGenericMethod() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC678C Offset: 0xBC678C VA: 0xBC678C
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 391
{
	// Fields
	public int value__; // 0x0
	public const MethodImplAttributes CodeTypeMask = 3;
	public const MethodImplAttributes IL = 0;
	public const MethodImplAttributes Native = 1;
	public const MethodImplAttributes OPTIL = 2;
	public const MethodImplAttributes Runtime = 3;
	public const MethodImplAttributes ManagedMask = 4;
	public const MethodImplAttributes Unmanaged = 4;
	public const MethodImplAttributes Managed = 0;
	public const MethodImplAttributes ForwardRef = 16;
	public const MethodImplAttributes PreserveSig = 128;
	public const MethodImplAttributes InternalCall = 4096;
	public const MethodImplAttributes Synchronized = 32;
	public const MethodImplAttributes NoInlining = 8;
	public const MethodImplAttributes MaxMethodImplVal = 65535;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xBC67A0 Offset: 0xBC67A0 VA: 0xBC67A0
[ComVisibleAttribute] // RVA: 0xBC67A0 Offset: 0xBC67A0 VA: 0xBC67A0
[ComDefaultInterfaceAttribute] // RVA: 0xBC67A0 Offset: 0xBC67A0 VA: 0xBC67A0
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 392
{
	// Properties
	public override MemberTypes MemberType { get; }
	public virtual Type ReturnType { get; }
	public override bool IsGenericMethod { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool ContainsGenericParameters { get; }

	// Methods

	// RVA: 0x22DB190 Offset: 0x22DB190 VA: 0x22DB190
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract MethodInfo GetBaseDefinition();

	// RVA: 0x22E8BA4 Offset: 0x22E8BA4 VA: 0x22E8BA4 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x22E8BAC Offset: 0x22E8BAC VA: 0x22E8BAC Slot: 31
	public virtual Type get_ReturnType() { }

	// RVA: 0x22E8BB4 Offset: 0x22E8BB4 VA: 0x22E8BB4 Slot: 32
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	[ComVisibleAttribute] // RVA: 0xBCCDFC Offset: 0xBCCDFC VA: 0xBCCDFC
	// RVA: 0x22E8C54 Offset: 0x22E8C54 VA: 0x22E8C54 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x22E8CBC Offset: 0x22E8CBC VA: 0x22E8CBC Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x22E8CC4 Offset: 0x22E8CC4 VA: 0x22E8CC4 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x22E8CCC Offset: 0x22E8CCC VA: 0x22E8CCC Slot: 27
	public override bool get_ContainsGenericParameters() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xBC682C Offset: 0xBC682C VA: 0xBC682C
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 393
{
	// Fields
	public static readonly Missing Value; // 0x0

	// Methods

	// RVA: 0x22E8CD4 Offset: 0x22E8CD4 VA: 0x22E8CD4
	internal void .ctor() { }

	// RVA: 0x22E8CDC Offset: 0x22E8CDC VA: 0x22E8CDC
	private static void .cctor() { }

	[MonoTODOAttribute] // RVA: 0xBCCE10 Offset: 0xBCCE10 VA: 0xBCCE10
	// RVA: 0x22E8D40 Offset: 0x22E8D40 VA: 0x22E8D40 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0xBC6840 Offset: 0xBC6840 VA: 0xBC6840
[ClassInterfaceAttribute] // RVA: 0xBC6840 Offset: 0xBC6840 VA: 0xBC6840
[ComVisibleAttribute] // RVA: 0xBC6840 Offset: 0xBC6840 VA: 0xBC6840
[Serializable]
public class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 394
{
	// Fields
	private const BindingFlags defaultBindingFlags = 28;
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x8
	private IntPtr _impl; // 0x10
	internal Assembly assembly; // 0x18
	internal string fqname; // 0x20
	internal string name; // 0x28
	internal string scopename; // 0x30
	internal bool is_resource; // 0x38
	internal int token; // 0x3C

	// Properties
	public Assembly Assembly { get; }
	public string Name { get; }
	public string ScopeName { get; }

	// Methods

	// RVA: 0x22DC50C Offset: 0x22DC50C VA: 0x22DC50C
	internal void .ctor() { }

	// RVA: 0x22E8D44 Offset: 0x22E8D44 VA: 0x22E8D44
	private static void .cctor() { }

	// RVA: 0x22D5068 Offset: 0x22D5068 VA: 0x22D5068
	public Assembly get_Assembly() { }

	// RVA: 0x22E8DF8 Offset: 0x22E8DF8 VA: 0x22E8DF8
	public string get_Name() { }

	// RVA: 0x22E8E00 Offset: 0x22E8E00 VA: 0x22E8E00
	public string get_ScopeName() { }

	// RVA: 0x22E8E08 Offset: 0x22E8E08 VA: 0x22E8E08 Slot: 7
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22E8E88 Offset: 0x22E8E88 VA: 0x22E8E88 Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0xBCCE20 Offset: 0xBCCE20 VA: 0xBCCE20
	// RVA: 0x22E8F40 Offset: 0x22E8F40 VA: 0x22E8F40 Slot: 9
	public virtual Type GetType(string className) { }

	[ComVisibleAttribute] // RVA: 0xBCCE34 Offset: 0xBCCE34 VA: 0xBCCE34
	// RVA: 0x22E8F54 Offset: 0x22E8F54 VA: 0x22E8F54 Slot: 10
	public virtual Type GetType(string className, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x22E9088 Offset: 0x22E9088 VA: 0x22E9088
	private Type[] InternalGetTypes() { }

	// RVA: 0x22E908C Offset: 0x22E908C VA: 0x22E908C Slot: 11
	public virtual Type[] GetTypes() { }

	// RVA: 0x22E9090 Offset: 0x22E9090 VA: 0x22E9090 Slot: 12
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22E9110 Offset: 0x22E9110 VA: 0x22E9110
	public bool IsResource() { }

	// RVA: 0x22E9118 Offset: 0x22E9118 VA: 0x22E9118 Slot: 3
	public override string ToString() { }

	// RVA: 0x22E9120 Offset: 0x22E9120 VA: 0x22E9120
	private static bool filter_by_type_name(Type m, object filterCriteria) { }

	// RVA: 0x22E92C8 Offset: 0x22E92C8 VA: 0x22E92C8
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria) { }
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 395
{
	// Fields
	public Type declaring_type; // 0x0
	public Type reflected_type; // 0x8
	public string name; // 0x10
	public MethodInfo add_method; // 0x18
	public MethodInfo remove_method; // 0x20
	public MethodInfo raise_method; // 0x28
	public EventAttributes attrs; // 0x30
	public MethodInfo[] other_methods; // 0x38

	// Methods

	// RVA: 0x22EA888 Offset: 0x22EA888 VA: 0x22EA888
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info) { }

	// RVA: 0x22EA42C Offset: 0x22EA42C VA: 0x22EA42C
	internal static MonoEventInfo GetEventInfo(MonoEvent ev) { }
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : EventInfo, ISerializable // TypeDefIndex: 396
{
	// Fields
	private IntPtr klass; // 0x18
	private IntPtr handle; // 0x20

	// Properties
	public override EventAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x22EA3F4 Offset: 0x22EA3F4 VA: 0x22EA3F4
	public void .ctor() { }

	// RVA: 0x22EA3FC Offset: 0x22EA3FC VA: 0x22EA3FC Slot: 14
	public override EventAttributes get_Attributes() { }

	// RVA: 0x22EA474 Offset: 0x22EA474 VA: 0x22EA474 Slot: 19
	public override MethodInfo GetAddMethod(bool nonPublic) { }

	// RVA: 0x22EA4E0 Offset: 0x22EA4E0 VA: 0x22EA4E0 Slot: 21
	public override MethodInfo GetRemoveMethod(bool nonPublic) { }

	// RVA: 0x22EA54C Offset: 0x22EA54C VA: 0x22EA54C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22EA57C Offset: 0x22EA57C VA: 0x22EA57C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22EA5AC Offset: 0x22EA5AC VA: 0x22EA5AC Slot: 8
	public override string get_Name() { }

	// RVA: 0x22EA5DC Offset: 0x22EA5DC VA: 0x22EA5DC Slot: 3
	public override string ToString() { }

	// RVA: 0x22EA688 Offset: 0x22EA688 VA: 0x22EA688 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22EA708 Offset: 0x22EA708 VA: 0x22EA708 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22EA780 Offset: 0x22EA780 VA: 0x22EA780 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22EA800 Offset: 0x22EA800 VA: 0x22EA800 Slot: 23
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : FieldInfo, ISerializable // TypeDefIndex: 397
{
	// Fields
	internal IntPtr klass; // 0x10
	internal RuntimeFieldHandle fhandle; // 0x18
	private string name; // 0x20
	private Type type; // 0x28
	private FieldAttributes attrs; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x22EA88C Offset: 0x22EA88C VA: 0x22EA88C
	public void .ctor() { }

	// RVA: 0x22EA894 Offset: 0x22EA894 VA: 0x22EA894 Slot: 14
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x22EA89C Offset: 0x22EA89C VA: 0x22EA89C Slot: 15
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x22EA8A4 Offset: 0x22EA8A4 VA: 0x22EA8A4 Slot: 16
	public override Type get_FieldType() { }

	// RVA: 0x22EA8AC Offset: 0x22EA8AC VA: 0x22EA8AC
	private Type GetParentType(bool declaring) { }

	// RVA: 0x22EA8B4 Offset: 0x22EA8B4 VA: 0x22EA8B4 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22EA8BC Offset: 0x22EA8BC VA: 0x22EA8BC Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22EA8C4 Offset: 0x22EA8C4 VA: 0x22EA8C4 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22EA8CC Offset: 0x22EA8CC VA: 0x22EA8CC Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22EA94C Offset: 0x22EA94C VA: 0x22EA94C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22EA9C4 Offset: 0x22EA9C4 VA: 0x22EA9C4 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22EAA44 Offset: 0x22EAA44 VA: 0x22EAA44 Slot: 24
	internal override int GetFieldOffset() { }

	// RVA: 0x22EAA48 Offset: 0x22EAA48 VA: 0x22EAA48
	private object GetValueInternal(object obj) { }

	// RVA: 0x22EAA4C Offset: 0x22EAA4C VA: 0x22EAA4C Slot: 17
	public override object GetValue(object obj) { }

	// RVA: 0x22EACE4 Offset: 0x22EACE4 VA: 0x22EACE4 Slot: 3
	public override string ToString() { }

	// RVA: 0x22EAD60 Offset: 0x22EAD60 VA: 0x22EAD60
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }

	// RVA: 0x22EAD64 Offset: 0x22EAD64 VA: 0x22EAD64 Slot: 22
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x22EB1B0 Offset: 0x22EB1B0 VA: 0x22EB1B0
	internal MonoField Clone(string newName) { }

	// RVA: 0x22EB2A0 Offset: 0x22EB2A0 VA: 0x22EB2A0 Slot: 26
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22EAC2C Offset: 0x22EAC2C VA: 0x22EAC2C
	private void CheckGeneric() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericMethod : MonoMethod // TypeDefIndex: 398
{
	// Properties
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x22EB390 Offset: 0x22EB390 VA: 0x22EB390
	internal void .ctor() { }

	// RVA: 0x22EB410 Offset: 0x22EB410 VA: 0x22EB410 Slot: 9
	public override Type get_ReflectedType() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericCMethod : MonoCMethod // TypeDefIndex: 399
{
	// Properties
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x22EB318 Offset: 0x22EB318 VA: 0x22EB318
	internal void .ctor() { }

	// RVA: 0x22EB38C Offset: 0x22EB38C VA: 0x22EB38C Slot: 9
	public override Type get_ReflectedType() { }
}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 400
{
	// Fields
	private Type parent; // 0x0
	private Type ret; // 0x8
	internal MethodAttributes attrs; // 0x10
	internal MethodImplAttributes iattrs; // 0x14
	private CallingConventions callconv; // 0x18

	// Methods

	// RVA: 0x22EC654 Offset: 0x22EC654 VA: 0x22EC654
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info) { }

	// RVA: 0x22EBCEC Offset: 0x22EBCEC VA: 0x22EBCEC
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle) { }

	// RVA: 0x22E9F40 Offset: 0x22E9F40 VA: 0x22E9F40
	internal static Type GetDeclaringType(IntPtr handle) { }

	// RVA: 0x22EB44C Offset: 0x22EB44C VA: 0x22EB44C
	internal static Type GetReturnType(IntPtr handle) { }

	// RVA: 0x22E9E80 Offset: 0x22E9E80 VA: 0x22E9E80
	internal static MethodAttributes GetAttributes(IntPtr handle) { }

	// RVA: 0x22E9EDC Offset: 0x22E9EDC VA: 0x22E9EDC
	internal static CallingConventions GetCallingConvention(IntPtr handle) { }

	// RVA: 0x22EC658 Offset: 0x22EC658 VA: 0x22EC658
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member) { }

	// RVA: 0x22E9938 Offset: 0x22E9938 VA: 0x22E9938
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member) { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : MethodInfo, ISerializable // TypeDefIndex: 401
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override Type ReturnType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override bool ContainsGenericParameters { get; }

	// Methods

	// RVA: 0x22EB408 Offset: 0x22EB408 VA: 0x22EB408
	internal void .ctor() { }

	// RVA: 0x22D6478 Offset: 0x22D6478 VA: 0x22D6478
	internal void .ctor(RuntimeMethodHandle mhandle) { }

	// RVA: 0x22E9F94 Offset: 0x22E9F94 VA: 0x22E9F94
	internal static string get_name(MethodBase method) { }

	// RVA: 0x22EB414 Offset: 0x22EB414 VA: 0x22EB414
	internal static MonoMethod get_base_definition(MonoMethod method) { }

	// RVA: 0x22EB418 Offset: 0x22EB418 VA: 0x22EB418 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	// RVA: 0x22EB41C Offset: 0x22EB41C VA: 0x22EB41C Slot: 31
	public override Type get_ReturnType() { }

	// RVA: 0x22EB478 Offset: 0x22EB478 VA: 0x22EB478 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x22EB50C Offset: 0x22EB50C VA: 0x22EB50C
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	// RVA: 0x22EB510 Offset: 0x22EB510 VA: 0x22EB510 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x22EB8BC Offset: 0x22EB8BC VA: 0x22EB8BC Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x22EB8EC Offset: 0x22EB8EC VA: 0x22EB8EC Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x22EB91C Offset: 0x22EB91C VA: 0x22EB91C Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x22EB94C Offset: 0x22EB94C VA: 0x22EB94C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22EB954 Offset: 0x22EB954 VA: 0x22EB954 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22EB984 Offset: 0x22EB984 VA: 0x22EB984 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22EB9AC Offset: 0x22EB9AC VA: 0x22EB9AC Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22EBA2C Offset: 0x22EBA2C VA: 0x22EBA2C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22EBAA4 Offset: 0x22EBAA4 VA: 0x22EBAA4 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22EBB24 Offset: 0x22EBB24 VA: 0x22EBB24
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle) { }

	// RVA: 0x22EBB28 Offset: 0x22EBB28 VA: 0x22EBB28
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x22EBD28 Offset: 0x22EBD28 VA: 0x22EBD28
	private static bool ShouldPrintFullName(Type type) { }

	// RVA: 0x22EBDF8 Offset: 0x22EBDF8 VA: 0x22EBDF8 Slot: 3
	public override string ToString() { }

	// RVA: 0x22EC2A0 Offset: 0x22EC2A0 VA: 0x22EC2A0 Slot: 33
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22EC370 Offset: 0x22EC370 VA: 0x22EC370 Slot: 32
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation) { }

	// RVA: 0x22EC54C Offset: 0x22EC54C VA: 0x22EC54C
	private MethodInfo MakeGenericMethod_impl(Type[] types) { }

	// RVA: 0x22EC550 Offset: 0x22EC550 VA: 0x22EC550 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x22EC554 Offset: 0x22EC554 VA: 0x22EC554 Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x22EC558 Offset: 0x22EC558 VA: 0x22EC558 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x22EC55C Offset: 0x22EC55C VA: 0x22EC55C Slot: 27
	public override bool get_ContainsGenericParameters() { }
}

// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable // TypeDefIndex: 402
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x22E98C0 Offset: 0x22E98C0 VA: 0x22E98C0
	public void .ctor() { }

	// RVA: 0x22E9928 Offset: 0x22E9928 VA: 0x22E9928 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x22E993C Offset: 0x22E993C VA: 0x22E993C
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	// RVA: 0x22E9940 Offset: 0x22E9940 VA: 0x22E9940 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x22E9DEC Offset: 0x22E9DEC VA: 0x22E9DEC Slot: 30
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x22E9E20 Offset: 0x22E9E20 VA: 0x22E9E20 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x22E9E50 Offset: 0x22E9E50 VA: 0x22E9E50 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x22E9EAC Offset: 0x22E9EAC VA: 0x22E9EAC Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x22E9F08 Offset: 0x22E9F08 VA: 0x22E9F08 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22E9F10 Offset: 0x22E9F10 VA: 0x22E9F10 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22E9F6C Offset: 0x22E9F6C VA: 0x22E9F6C Slot: 8
	public override string get_Name() { }

	// RVA: 0x22E9F98 Offset: 0x22E9F98 VA: 0x22E9F98 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22EA018 Offset: 0x22EA018 VA: 0x22EA018 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22EA090 Offset: 0x22EA090 VA: 0x22EA090 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22EA110 Offset: 0x22EA110 VA: 0x22EA110 Slot: 3
	public override string ToString() { }

	// RVA: 0x22EA37C Offset: 0x22EA37C VA: 0x22EA37C Slot: 31
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 403
{
	// Fields
	public Type parent; // 0x0
	public string name; // 0x8
	public MethodInfo get_method; // 0x10
	public MethodInfo set_method; // 0x18
	public PropertyAttributes attrs; // 0x20

	// Methods

	// RVA: 0x22EC6AC Offset: 0x22EC6AC VA: 0x22EC6AC
	internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info) { }

	// RVA: 0x22ED984 Offset: 0x22ED984 VA: 0x22ED984
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xBC68CC Offset: 0xBC68CC VA: 0xBC68CC
internal enum PInfo // TypeDefIndex: 404
{
	// Fields
	public int value__; // 0x0
	public const PInfo Attributes = 1;
	public const PInfo GetMethod = 2;
	public const PInfo SetMethod = 4;
	public const PInfo ReflectedType = 8;
	public const PInfo DeclaringType = 16;
	public const PInfo Name = 32;
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : PropertyInfo, ISerializable // TypeDefIndex: 405
{
	// Fields
	internal IntPtr klass; // 0x10
	internal IntPtr prop; // 0x18
	private MonoPropertyInfo info; // 0x20
	private PInfo cached; // 0x48
	private MonoProperty.GetterAdapter cached_getter; // 0x50

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x22EC65C Offset: 0x22EC65C VA: 0x22EC65C
	public void .ctor() { }

	// RVA: 0x22EC664 Offset: 0x22EC664 VA: 0x22EC664
	private void CachePropertyInfo(PInfo flags) { }

	// RVA: 0x22EC6B0 Offset: 0x22EC6B0 VA: 0x22EC6B0 Slot: 14
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x22EC6F4 Offset: 0x22EC6F4 VA: 0x22EC6F4 Slot: 15
	public override bool get_CanRead() { }

	// RVA: 0x22EC740 Offset: 0x22EC740 VA: 0x22EC740 Slot: 16
	public override bool get_CanWrite() { }

	// RVA: 0x22EC78C Offset: 0x22EC78C VA: 0x22EC78C Slot: 17
	public override Type get_PropertyType() { }

	// RVA: 0x22EC868 Offset: 0x22EC868 VA: 0x22EC868 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22EC8AC Offset: 0x22EC8AC VA: 0x22EC8AC Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22EC8F0 Offset: 0x22EC8F0 VA: 0x22EC8F0 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22EC934 Offset: 0x22EC934 VA: 0x22EC934 Slot: 18
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x22ECAF4 Offset: 0x22ECAF4 VA: 0x22ECAF4 Slot: 20
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x22ECB6C Offset: 0x22ECB6C VA: 0x22ECB6C Slot: 21
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x22ECE08 Offset: 0x22ECE08 VA: 0x22ECE08 Slot: 23
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x22ECE80 Offset: 0x22ECE80 VA: 0x22ECE80 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22ECEFC Offset: 0x22ECEFC VA: 0x22ECEFC Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22ECF68 Offset: 0x22ECF68 VA: 0x22ECF68 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: -1 Offset: -1
	private static object GetterAdapterFrame<T, R>(MonoProperty.Getter<T, R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5A6BC Offset: 0x1C5A6BC VA: 0x1C5A6BC
	|-MonoProperty.GetterAdapterFrame<object, object>
	*/

	// RVA: -1 Offset: -1
	private static object StaticGetterAdapterFrame<R>(MonoProperty.StaticGetter<R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5A78C Offset: 0x1C5A78C VA: 0x1C5A78C
	|-MonoProperty.StaticGetterAdapterFrame<object>
	*/

	// RVA: 0x22ECFE4 Offset: 0x22ECFE4 VA: 0x22ECFE4
	private static MonoProperty.GetterAdapter CreateGetterDelegate(MethodInfo method) { }

	// RVA: 0x22ED3B0 Offset: 0x22ED3B0 VA: 0x22ED3B0 Slot: 24
	public override object GetValue(object obj, object[] index) { }

	// RVA: 0x22ED3D4 Offset: 0x22ED3D4 VA: 0x22ED3D4 Slot: 25
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x22ED5E8 Offset: 0x22ED5E8 VA: 0x22ED5E8 Slot: 27
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x22ED844 Offset: 0x22ED844 VA: 0x22ED844 Slot: 3
	public override string ToString() { }

	// RVA: 0x22ED908 Offset: 0x22ED908 VA: 0x22ED908 Slot: 28
	public override Type[] GetOptionalCustomModifiers() { }

	// RVA: 0x22ED98C Offset: 0x22ED98C VA: 0x22ED98C Slot: 29
	public override Type[] GetRequiredCustomModifiers() { }

