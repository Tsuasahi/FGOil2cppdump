
	// RVA: 0x1111274 Offset: 0x1111274 VA: 0x1111274 Slot: 20
	public bool get_IsPublic() { }

	// RVA: 0x11112A0 Offset: 0x11112A0 VA: 0x11112A0 Slot: 21
	public bool get_IsNotSerialized() { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);

	[DebuggerHiddenAttribute] // RVA: 0xC38EA0 Offset: 0xC38EA0 VA: 0xC38EA0
	[DebuggerStepThroughAttribute] // RVA: 0xC38EA0 Offset: 0xC38EA0 VA: 0xC38EA0
	// RVA: 0x11112C4 Offset: 0x11112C4 VA: 0x11112C4 Slot: 23
	public void SetValue(object obj, object value) { }

	// RVA: 0x11112E0 Offset: 0x11112E0 VA: 0x11112E0
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle) { }

	// RVA: 0x11112E4 Offset: 0x11112E4 VA: 0x11112E4
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { }

	// RVA: 0x1111398 Offset: 0x1111398 VA: 0x1111398 Slot: 24
	internal virtual int GetFieldOffset() { }

	// RVA: 0x111140C Offset: 0x111140C VA: 0x111140C
	private UnmanagedMarshal GetUnmanagedMarshal() { }

	// RVA: 0x1111410 Offset: 0x1111410 VA: 0x1111410 Slot: 25
	internal virtual UnmanagedMarshal get_UMarshal() { }

	// RVA: 0x1111414 Offset: 0x1111414 VA: 0x1111414
	internal object[] GetPseudoCustomAttributes() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32774 Offset: 0xC32774 VA: 0xC32774
[Serializable]
public enum ImageFileMachine // TypeDefIndex: 384
{
	// Fields
	public int value__; // 0x0
	public const ImageFileMachine I386 = 332;
	public const ImageFileMachine IA64 = 512;
	public const ImageFileMachine AMD64 = 34404;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32788 Offset: 0xC32788 VA: 0xC32788
public class LocalVariableInfo // TypeDefIndex: 385
{
	// Fields
	internal Type type; // 0x10
	internal bool is_pinned; // 0x18
	internal ushort position; // 0x1A

	// Methods

	// RVA: 0x1104DB0 Offset: 0x1104DB0 VA: 0x1104DB0
	internal void .ctor() { }

	// RVA: 0x11116B4 Offset: 0x11116B4 VA: 0x11116B4 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC3279C Offset: 0xC3279C VA: 0xC3279C
public class ManifestResourceInfo // TypeDefIndex: 386
{
	// Fields
	private Assembly _assembly; // 0x10
	private string _filename; // 0x18
	private ResourceLocation _location; // 0x20

	// Properties
	public virtual string FileName { get; }
	public virtual Assembly ReferencedAssembly { get; }
	public virtual ResourceLocation ResourceLocation { get; }

	// Methods

	// RVA: 0x11117B4 Offset: 0x11117B4 VA: 0x11117B4
	internal void .ctor() { }

	// RVA: 0x11117BC Offset: 0x11117BC VA: 0x11117BC Slot: 4
	public virtual string get_FileName() { }

	// RVA: 0x11117C4 Offset: 0x11117C4 VA: 0x11117C4 Slot: 5
	public virtual Assembly get_ReferencedAssembly() { }

	// RVA: 0x11117CC Offset: 0x11117CC VA: 0x11117CC Slot: 6
	public virtual ResourceLocation get_ResourceLocation() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 387
{
	// Fields
	private readonly string _memberName; // 0x10
	private readonly string _memberSignature; // 0x18
	private readonly MemberTypes _memberType; // 0x20
	private readonly Type _reflectedType; // 0x28
	private readonly Type[] _genericArguments; // 0x30

	// Methods

	// RVA: 0x1111C14 Offset: 0x1111C14 VA: 0x1111C14
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }

	// RVA: 0x1111DBC Offset: 0x1111DBC VA: 0x1111DBC
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type) { }

	// RVA: 0x1111DC4 Offset: 0x1111DC4 VA: 0x1111DC4
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type, Type[] genericArguments) { }

	// RVA: 0x111207C Offset: 0x111207C VA: 0x111207C Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x11120E4 Offset: 0x11120E4 VA: 0x11120E4 Slot: 5
	public object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xC327B0 Offset: 0xC327B0 VA: 0xC327B0
[ComVisibleAttribute] // RVA: 0xC327B0 Offset: 0xC327B0 VA: 0xC327B0
[Serializable]
public enum MemberTypes // TypeDefIndex: 388
{
	// Fields
	public int value__; // 0x0
	public const MemberTypes Constructor = 1;
	public const MemberTypes Event = 2;
	public const MemberTypes Field = 4;
	public const MemberTypes Method = 8;
	public const MemberTypes Property = 16;
	public const MemberTypes TypeInfo = 32;
	public const MemberTypes Custom = 64;
	public const MemberTypes NestedType = 128;
	public const MemberTypes All = 191;
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC327EC Offset: 0xC327EC VA: 0xC327EC
[FlagsAttribute] // RVA: 0xC327EC Offset: 0xC327EC VA: 0xC327EC
[Serializable]
public enum MethodAttributes // TypeDefIndex: 389
{
	// Fields
	public int value__; // 0x0
	public const MethodAttributes MemberAccessMask = 7;
	public const MethodAttributes PrivateScope = 0;
	public const MethodAttributes Private = 1;
	public const MethodAttributes FamANDAssem = 2;
	public const MethodAttributes Assembly = 3;
	public const MethodAttributes Family = 4;
	public const MethodAttributes FamORAssem = 5;
	public const MethodAttributes Public = 6;
	public const MethodAttributes Static = 16;
	public const MethodAttributes Final = 32;
	public const MethodAttributes Virtual = 64;
	public const MethodAttributes HideBySig = 128;
	public const MethodAttributes VtableLayoutMask = 256;
	public const MethodAttributes CheckAccessOnOverride = 512;
	public const MethodAttributes ReuseSlot = 0;
	public const MethodAttributes NewSlot = 256;
	public const MethodAttributes Abstract = 1024;
	public const MethodAttributes SpecialName = 2048;
	public const MethodAttributes PinvokeImpl = 8192;
	public const MethodAttributes UnmanagedExport = 8;
	public const MethodAttributes RTSpecialName = 4096;
	public const MethodAttributes ReservedMask = 53248;
	public const MethodAttributes HasSecurity = 16384;
	public const MethodAttributes RequireSecObject = 32768;
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0xC32828 Offset: 0xC32828 VA: 0xC32828
[ComVisibleAttribute] // RVA: 0xC32828 Offset: 0xC32828 VA: 0xC32828
[ClassInterfaceAttribute] // RVA: 0xC32828 Offset: 0xC32828 VA: 0xC32828
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 390
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; }
	public bool IsPublic { get; }
	public bool IsStatic { get; }
	public bool IsVirtual { get; }
	public bool IsAbstract { get; }
	public virtual bool ContainsGenericParameters { get; }
	public virtual bool IsGenericMethodDefinition { get; }
	public virtual bool IsGenericMethod { get; }

	// Methods

	// RVA: 0x11126C4 Offset: 0x11126C4 VA: 0x11126C4
	protected void .ctor() { }

	// RVA: 0x11126CC Offset: 0x11126CC VA: 0x11126CC
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle) { }

	// RVA: 0x1112720 Offset: 0x1112720 VA: 0x1112720
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType) { }

	// RVA: 0x11127D8 Offset: 0x11127D8 VA: 0x11127D8
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { }

	// RVA: 0x11127D4 Offset: 0x11127D4 VA: 0x11127D4
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle) { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract ParameterInfo[] GetParameters();

	// RVA: 0x11128D4 Offset: 0x11128D4 VA: 0x11128D4 Slot: 15
	internal virtual int GetParameterCount() { }

	[DebuggerHiddenAttribute] // RVA: 0xC38ED8 Offset: 0xC38ED8 VA: 0xC38ED8
	[DebuggerStepThroughAttribute] // RVA: 0xC38ED8 Offset: 0xC38ED8 VA: 0xC38ED8
	// RVA: 0x11003B8 Offset: 0x11003B8 VA: 0x11003B8 Slot: 16
	public object Invoke(object obj, object[] parameters) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);

	// RVA: -1 Offset: -1 Slot: 18
	public abstract RuntimeMethodHandle get_MethodHandle();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodAttributes get_Attributes();

	// RVA: 0x11128FC Offset: 0x11128FC VA: 0x11128FC Slot: 20
	public virtual CallingConventions get_CallingConvention() { }

	// RVA: 0x1112904 Offset: 0x1112904 VA: 0x1112904 Slot: 21
	public bool get_IsPublic() { }

	// RVA: 0x110FA4C Offset: 0x110FA4C VA: 0x110FA4C Slot: 22
	public bool get_IsStatic() { }

	// RVA: 0x1105954 Offset: 0x1105954 VA: 0x1105954 Slot: 23
	public bool get_IsVirtual() { }

	// RVA: 0x110F3F8 Offset: 0x110F3F8 VA: 0x110F3F8 Slot: 24
	public bool get_IsAbstract() { }

	// RVA: 0x1112930 Offset: 0x1112930 VA: 0x1112930 Slot: 25
	internal virtual int get_next_table_index(object obj, int table, bool inc) { }

	[ComVisibleAttribute] // RVA: 0xC38F10 Offset: 0xC38F10 VA: 0xC38F10
	// RVA: 0x1112A2C Offset: 0x1112A2C VA: 0x1112A2C Slot: 26
	public virtual Type[] GetGenericArguments() { }

	// RVA: 0x1112A94 Offset: 0x1112A94 VA: 0x1112A94 Slot: 27
	public virtual bool get_ContainsGenericParameters() { }

	// RVA: 0x1112A9C Offset: 0x1112A9C VA: 0x1112A9C Slot: 28
	public virtual bool get_IsGenericMethodDefinition() { }

	// RVA: 0x1112AA4 Offset: 0x1112AA4 VA: 0x1112AA4 Slot: 29
	public virtual bool get_IsGenericMethod() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC328B4 Offset: 0xC328B4 VA: 0xC328B4
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 391
{
	// Fields
	public int value__; // 0x0
	public const MethodImplAttributes CodeTypeMask = 3;
	public const MethodImplAttributes IL = 0;
	public const MethodImplAttributes Native = 1;
	public const MethodImplAttributes OPTIL = 2;
	public const MethodImplAttributes Runtime = 3;
	public const MethodImplAttributes ManagedMask = 4;
	public const MethodImplAttributes Unmanaged = 4;
	public const MethodImplAttributes Managed = 0;
	public const MethodImplAttributes ForwardRef = 16;
	public const MethodImplAttributes PreserveSig = 128;
	public const MethodImplAttributes InternalCall = 4096;
	public const MethodImplAttributes Synchronized = 32;
	public const MethodImplAttributes NoInlining = 8;
	public const MethodImplAttributes MaxMethodImplVal = 65535;
}

// Namespace: System.Reflection
[ClassInterfaceAttribute] // RVA: 0xC328C8 Offset: 0xC328C8 VA: 0xC328C8
[ComVisibleAttribute] // RVA: 0xC328C8 Offset: 0xC328C8 VA: 0xC328C8
[ComDefaultInterfaceAttribute] // RVA: 0xC328C8 Offset: 0xC328C8 VA: 0xC328C8
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 392
{
	// Properties
	public override MemberTypes MemberType { get; }
	public virtual Type ReturnType { get; }
	public override bool IsGenericMethod { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool ContainsGenericParameters { get; }

	// Methods

	// RVA: 0x1105098 Offset: 0x1105098 VA: 0x1105098
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract MethodInfo GetBaseDefinition();

	// RVA: 0x1112AAC Offset: 0x1112AAC VA: 0x1112AAC Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x1112AB4 Offset: 0x1112AB4 VA: 0x1112AB4 Slot: 31
	public virtual Type get_ReturnType() { }

	// RVA: 0x1112ABC Offset: 0x1112ABC VA: 0x1112ABC Slot: 32
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments) { }

	[ComVisibleAttribute] // RVA: 0xC38F24 Offset: 0xC38F24 VA: 0xC38F24
	// RVA: 0x1112B5C Offset: 0x1112B5C VA: 0x1112B5C Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x1112BC4 Offset: 0x1112BC4 VA: 0x1112BC4 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x1112BCC Offset: 0x1112BCC VA: 0x1112BCC Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x1112BD4 Offset: 0x1112BD4 VA: 0x1112BD4 Slot: 27
	public override bool get_ContainsGenericParameters() { }
}

// Namespace: System.Reflection
[ComVisibleAttribute] // RVA: 0xC32954 Offset: 0xC32954 VA: 0xC32954
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 393
{
	// Fields
	public static readonly Missing Value; // 0x0

	// Methods

	// RVA: 0x1112BDC Offset: 0x1112BDC VA: 0x1112BDC
	internal void .ctor() { }

	// RVA: 0x1112BE4 Offset: 0x1112BE4 VA: 0x1112BE4
	private static void .cctor() { }

	[MonoTODOAttribute] // RVA: 0xC38F38 Offset: 0xC38F38 VA: 0xC38F38
	// RVA: 0x1112C48 Offset: 0x1112C48 VA: 0x1112C48 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[ComDefaultInterfaceAttribute] // RVA: 0xC32968 Offset: 0xC32968 VA: 0xC32968
[ClassInterfaceAttribute] // RVA: 0xC32968 Offset: 0xC32968 VA: 0xC32968
[ComVisibleAttribute] // RVA: 0xC32968 Offset: 0xC32968 VA: 0xC32968
[Serializable]
public class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 394
{
	// Fields
	private const BindingFlags defaultBindingFlags = 28;
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x8
	private IntPtr _impl; // 0x10
	internal Assembly assembly; // 0x18
	internal string fqname; // 0x20
	internal string name; // 0x28
	internal string scopename; // 0x30
	internal bool is_resource; // 0x38
	internal int token; // 0x3C

	// Properties
	public Assembly Assembly { get; }
	public string Name { get; }
	public string ScopeName { get; }

	// Methods

	// RVA: 0x1106414 Offset: 0x1106414 VA: 0x1106414
	internal void .ctor() { }

	// RVA: 0x1112C4C Offset: 0x1112C4C VA: 0x1112C4C
	private static void .cctor() { }

	// RVA: 0x10FEF70 Offset: 0x10FEF70 VA: 0x10FEF70
	public Assembly get_Assembly() { }

	// RVA: 0x1112D00 Offset: 0x1112D00 VA: 0x1112D00
	public string get_Name() { }

	// RVA: 0x1112D08 Offset: 0x1112D08 VA: 0x1112D08
	public string get_ScopeName() { }

	// RVA: 0x1112D10 Offset: 0x1112D10 VA: 0x1112D10 Slot: 7
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1112D90 Offset: 0x1112D90 VA: 0x1112D90 Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }

	[ComVisibleAttribute] // RVA: 0xC38F48 Offset: 0xC38F48 VA: 0xC38F48
	// RVA: 0x1112E48 Offset: 0x1112E48 VA: 0x1112E48 Slot: 9
	public virtual Type GetType(string className) { }

	[ComVisibleAttribute] // RVA: 0xC38F5C Offset: 0xC38F5C VA: 0xC38F5C
	// RVA: 0x1112E5C Offset: 0x1112E5C VA: 0x1112E5C Slot: 10
	public virtual Type GetType(string className, bool throwOnError, bool ignoreCase) { }

	// RVA: 0x1112F90 Offset: 0x1112F90 VA: 0x1112F90
	private Type[] InternalGetTypes() { }

	// RVA: 0x1112F94 Offset: 0x1112F94 VA: 0x1112F94 Slot: 11
	public virtual Type[] GetTypes() { }

	// RVA: 0x1112F98 Offset: 0x1112F98 VA: 0x1112F98 Slot: 12
	public virtual bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1113018 Offset: 0x1113018 VA: 0x1113018
	public bool IsResource() { }

	// RVA: 0x1113020 Offset: 0x1113020 VA: 0x1113020 Slot: 3
	public override string ToString() { }

	// RVA: 0x1113028 Offset: 0x1113028 VA: 0x1113028
	private static bool filter_by_type_name(Type m, object filterCriteria) { }

	// RVA: 0x11131D0 Offset: 0x11131D0 VA: 0x11131D0
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria) { }
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 395
{
	// Fields
	public Type declaring_type; // 0x0
	public Type reflected_type; // 0x8
	public string name; // 0x10
	public MethodInfo add_method; // 0x18
	public MethodInfo remove_method; // 0x20
	public MethodInfo raise_method; // 0x28
	public EventAttributes attrs; // 0x30
	public MethodInfo[] other_methods; // 0x38

	// Methods

	// RVA: 0x1114790 Offset: 0x1114790 VA: 0x1114790
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info) { }

	// RVA: 0x1114334 Offset: 0x1114334 VA: 0x1114334
	internal static MonoEventInfo GetEventInfo(MonoEvent ev) { }
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : EventInfo, ISerializable // TypeDefIndex: 396
{
	// Fields
	private IntPtr klass; // 0x18
	private IntPtr handle; // 0x20

	// Properties
	public override EventAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x11142FC Offset: 0x11142FC VA: 0x11142FC
	public void .ctor() { }

	// RVA: 0x1114304 Offset: 0x1114304 VA: 0x1114304 Slot: 14
	public override EventAttributes get_Attributes() { }

	// RVA: 0x111437C Offset: 0x111437C VA: 0x111437C Slot: 19
	public override MethodInfo GetAddMethod(bool nonPublic) { }

	// RVA: 0x11143E8 Offset: 0x11143E8 VA: 0x11143E8 Slot: 21
	public override MethodInfo GetRemoveMethod(bool nonPublic) { }

	// RVA: 0x1114454 Offset: 0x1114454 VA: 0x1114454 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x1114484 Offset: 0x1114484 VA: 0x1114484 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x11144B4 Offset: 0x11144B4 VA: 0x11144B4 Slot: 8
	public override string get_Name() { }

	// RVA: 0x11144E4 Offset: 0x11144E4 VA: 0x11144E4 Slot: 3
	public override string ToString() { }

	// RVA: 0x1114590 Offset: 0x1114590 VA: 0x1114590 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1114610 Offset: 0x1114610 VA: 0x1114610 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1114688 Offset: 0x1114688 VA: 0x1114688 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1114708 Offset: 0x1114708 VA: 0x1114708 Slot: 23
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : FieldInfo, ISerializable // TypeDefIndex: 397
{
	// Fields
	internal IntPtr klass; // 0x10
	internal RuntimeFieldHandle fhandle; // 0x18
	private string name; // 0x20
	private Type type; // 0x28
	private FieldAttributes attrs; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x1114794 Offset: 0x1114794 VA: 0x1114794
	public void .ctor() { }

	// RVA: 0x111479C Offset: 0x111479C VA: 0x111479C Slot: 14
	public override FieldAttributes get_Attributes() { }

	// RVA: 0x11147A4 Offset: 0x11147A4 VA: 0x11147A4 Slot: 15
	public override RuntimeFieldHandle get_FieldHandle() { }

	// RVA: 0x11147AC Offset: 0x11147AC VA: 0x11147AC Slot: 16
	public override Type get_FieldType() { }

	// RVA: 0x11147B4 Offset: 0x11147B4 VA: 0x11147B4
	private Type GetParentType(bool declaring) { }

	// RVA: 0x11147BC Offset: 0x11147BC VA: 0x11147BC Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x11147C4 Offset: 0x11147C4 VA: 0x11147C4 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x11147CC Offset: 0x11147CC VA: 0x11147CC Slot: 8
	public override string get_Name() { }

	// RVA: 0x11147D4 Offset: 0x11147D4 VA: 0x11147D4 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1114854 Offset: 0x1114854 VA: 0x1114854 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x11148CC Offset: 0x11148CC VA: 0x11148CC Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x111494C Offset: 0x111494C VA: 0x111494C Slot: 24
	internal override int GetFieldOffset() { }

	// RVA: 0x1114950 Offset: 0x1114950 VA: 0x1114950
	private object GetValueInternal(object obj) { }

	// RVA: 0x1114954 Offset: 0x1114954 VA: 0x1114954 Slot: 17
	public override object GetValue(object obj) { }

	// RVA: 0x1114BEC Offset: 0x1114BEC VA: 0x1114BEC Slot: 3
	public override string ToString() { }

	// RVA: 0x1114C68 Offset: 0x1114C68 VA: 0x1114C68
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }

	// RVA: 0x1114C6C Offset: 0x1114C6C VA: 0x1114C6C Slot: 22
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }

	// RVA: 0x11150B8 Offset: 0x11150B8 VA: 0x11150B8
	internal MonoField Clone(string newName) { }

	// RVA: 0x11151A8 Offset: 0x11151A8 VA: 0x11151A8 Slot: 26
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1114B34 Offset: 0x1114B34 VA: 0x1114B34
	private void CheckGeneric() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericMethod : MonoMethod // TypeDefIndex: 398
{
	// Properties
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x1115298 Offset: 0x1115298 VA: 0x1115298
	internal void .ctor() { }

	// RVA: 0x1115318 Offset: 0x1115318 VA: 0x1115318 Slot: 9
	public override Type get_ReflectedType() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericCMethod : MonoCMethod // TypeDefIndex: 399
{
	// Properties
	public override Type ReflectedType { get; }

	// Methods

	// RVA: 0x1115220 Offset: 0x1115220 VA: 0x1115220
	internal void .ctor() { }

	// RVA: 0x1115294 Offset: 0x1115294 VA: 0x1115294 Slot: 9
	public override Type get_ReflectedType() { }
}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 400
{
	// Fields
	private Type parent; // 0x0
	private Type ret; // 0x8
	internal MethodAttributes attrs; // 0x10
	internal MethodImplAttributes iattrs; // 0x14
	private CallingConventions callconv; // 0x18

	// Methods

	// RVA: 0x111655C Offset: 0x111655C VA: 0x111655C
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info) { }

	// RVA: 0x1115BF4 Offset: 0x1115BF4 VA: 0x1115BF4
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle) { }

	// RVA: 0x1113E48 Offset: 0x1113E48 VA: 0x1113E48
	internal static Type GetDeclaringType(IntPtr handle) { }

	// RVA: 0x1115354 Offset: 0x1115354 VA: 0x1115354
	internal static Type GetReturnType(IntPtr handle) { }

	// RVA: 0x1113D88 Offset: 0x1113D88 VA: 0x1113D88
	internal static MethodAttributes GetAttributes(IntPtr handle) { }

	// RVA: 0x1113DE4 Offset: 0x1113DE4 VA: 0x1113DE4
	internal static CallingConventions GetCallingConvention(IntPtr handle) { }

	// RVA: 0x1116560 Offset: 0x1116560 VA: 0x1116560
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member) { }

	// RVA: 0x1113840 Offset: 0x1113840 VA: 0x1113840
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member) { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : MethodInfo, ISerializable // TypeDefIndex: 401
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override Type ReturnType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override bool ContainsGenericParameters { get; }

	// Methods

	// RVA: 0x1115310 Offset: 0x1115310 VA: 0x1115310
	internal void .ctor() { }

	// RVA: 0x1100380 Offset: 0x1100380 VA: 0x1100380
	internal void .ctor(RuntimeMethodHandle mhandle) { }

	// RVA: 0x1113E9C Offset: 0x1113E9C VA: 0x1113E9C
	internal static string get_name(MethodBase method) { }

	// RVA: 0x111531C Offset: 0x111531C VA: 0x111531C
	internal static MonoMethod get_base_definition(MonoMethod method) { }

	// RVA: 0x1115320 Offset: 0x1115320 VA: 0x1115320 Slot: 30
	public override MethodInfo GetBaseDefinition() { }

	// RVA: 0x1115324 Offset: 0x1115324 VA: 0x1115324 Slot: 31
	public override Type get_ReturnType() { }

	// RVA: 0x1115380 Offset: 0x1115380 VA: 0x1115380 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x1115414 Offset: 0x1115414 VA: 0x1115414
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	// RVA: 0x1115418 Offset: 0x1115418 VA: 0x1115418 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x11157C4 Offset: 0x11157C4 VA: 0x11157C4 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x11157F4 Offset: 0x11157F4 VA: 0x11157F4 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x1115824 Offset: 0x1115824 VA: 0x1115824 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x1115854 Offset: 0x1115854 VA: 0x1115854 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x111585C Offset: 0x111585C VA: 0x111585C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x111588C Offset: 0x111588C VA: 0x111588C Slot: 8
	public override string get_Name() { }

	// RVA: 0x11158B4 Offset: 0x11158B4 VA: 0x11158B4 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1115934 Offset: 0x1115934 VA: 0x1115934 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x11159AC Offset: 0x11159AC VA: 0x11159AC Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1115A2C Offset: 0x1115A2C VA: 0x1115A2C
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle) { }

	// RVA: 0x1115A30 Offset: 0x1115A30 VA: 0x1115A30
	internal object[] GetPseudoCustomAttributes() { }

	// RVA: 0x1115C30 Offset: 0x1115C30 VA: 0x1115C30
	private static bool ShouldPrintFullName(Type type) { }

	// RVA: 0x1115D00 Offset: 0x1115D00 VA: 0x1115D00 Slot: 3
	public override string ToString() { }

	// RVA: 0x11161A8 Offset: 0x11161A8 VA: 0x11161A8 Slot: 33
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1116278 Offset: 0x1116278 VA: 0x1116278 Slot: 32
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation) { }

	// RVA: 0x1116454 Offset: 0x1116454 VA: 0x1116454
	private MethodInfo MakeGenericMethod_impl(Type[] types) { }

	// RVA: 0x1116458 Offset: 0x1116458 VA: 0x1116458 Slot: 26
	public override Type[] GetGenericArguments() { }

	// RVA: 0x111645C Offset: 0x111645C VA: 0x111645C Slot: 28
	public override bool get_IsGenericMethodDefinition() { }

	// RVA: 0x1116460 Offset: 0x1116460 VA: 0x1116460 Slot: 29
	public override bool get_IsGenericMethod() { }

	// RVA: 0x1116464 Offset: 0x1116464 VA: 0x1116464 Slot: 27
	public override bool get_ContainsGenericParameters() { }
}

// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable // TypeDefIndex: 402
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x11137C8 Offset: 0x11137C8 VA: 0x11137C8
	public void .ctor() { }

	// RVA: 0x1113830 Offset: 0x1113830 VA: 0x1113830 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x1113844 Offset: 0x1113844 VA: 0x1113844
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }

	// RVA: 0x1113848 Offset: 0x1113848 VA: 0x1113848 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x1113CF4 Offset: 0x1113CF4 VA: 0x1113CF4 Slot: 30
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x1113D28 Offset: 0x1113D28 VA: 0x1113D28 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x1113D58 Offset: 0x1113D58 VA: 0x1113D58 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x1113DB4 Offset: 0x1113DB4 VA: 0x1113DB4 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x1113E10 Offset: 0x1113E10 VA: 0x1113E10 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x1113E18 Offset: 0x1113E18 VA: 0x1113E18 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x1113E74 Offset: 0x1113E74 VA: 0x1113E74 Slot: 8
	public override string get_Name() { }

	// RVA: 0x1113EA0 Offset: 0x1113EA0 VA: 0x1113EA0 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1113F20 Offset: 0x1113F20 VA: 0x1113F20 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1113F98 Offset: 0x1113F98 VA: 0x1113F98 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1114018 Offset: 0x1114018 VA: 0x1114018 Slot: 3
	public override string ToString() { }

	// RVA: 0x1114284 Offset: 0x1114284 VA: 0x1114284 Slot: 31
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 403
{
	// Fields
	public Type parent; // 0x0
	public string name; // 0x8
	public MethodInfo get_method; // 0x10
	public MethodInfo set_method; // 0x18
	public PropertyAttributes attrs; // 0x20

	// Methods

	// RVA: 0x11165B4 Offset: 0x11165B4 VA: 0x11165B4
	internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info) { }

	// RVA: 0x111788C Offset: 0x111788C VA: 0x111788C
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0xC329F4 Offset: 0xC329F4 VA: 0xC329F4
internal enum PInfo // TypeDefIndex: 404
{
	// Fields
	public int value__; // 0x0
	public const PInfo Attributes = 1;
	public const PInfo GetMethod = 2;
	public const PInfo SetMethod = 4;
	public const PInfo ReflectedType = 8;
	public const PInfo DeclaringType = 16;
	public const PInfo Name = 32;
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : PropertyInfo, ISerializable // TypeDefIndex: 405
{
	// Fields
	internal IntPtr klass; // 0x10
	internal IntPtr prop; // 0x18
	private MonoPropertyInfo info; // 0x20
	private PInfo cached; // 0x48
	private MonoProperty.GetterAdapter cached_getter; // 0x50

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods

	// RVA: 0x1116564 Offset: 0x1116564 VA: 0x1116564
	public void .ctor() { }

	// RVA: 0x111656C Offset: 0x111656C VA: 0x111656C
	private void CachePropertyInfo(PInfo flags) { }

	// RVA: 0x11165B8 Offset: 0x11165B8 VA: 0x11165B8 Slot: 14
	public override PropertyAttributes get_Attributes() { }

	// RVA: 0x11165FC Offset: 0x11165FC VA: 0x11165FC Slot: 15
	public override bool get_CanRead() { }

	// RVA: 0x1116648 Offset: 0x1116648 VA: 0x1116648 Slot: 16
	public override bool get_CanWrite() { }

	// RVA: 0x1116694 Offset: 0x1116694 VA: 0x1116694 Slot: 17
	public override Type get_PropertyType() { }

	// RVA: 0x1116770 Offset: 0x1116770 VA: 0x1116770 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x11167B4 Offset: 0x11167B4 VA: 0x11167B4 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x11167F8 Offset: 0x11167F8 VA: 0x11167F8 Slot: 8
	public override string get_Name() { }

	// RVA: 0x111683C Offset: 0x111683C VA: 0x111683C Slot: 18
	public override MethodInfo[] GetAccessors(bool nonPublic) { }

	// RVA: 0x11169FC Offset: 0x11169FC VA: 0x11169FC Slot: 20
	public override MethodInfo GetGetMethod(bool nonPublic) { }

	// RVA: 0x1116A74 Offset: 0x1116A74 VA: 0x1116A74 Slot: 21
	public override ParameterInfo[] GetIndexParameters() { }

	// RVA: 0x1116D10 Offset: 0x1116D10 VA: 0x1116D10 Slot: 23
	public override MethodInfo GetSetMethod(bool nonPublic) { }

	// RVA: 0x1116D88 Offset: 0x1116D88 VA: 0x1116D88 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1116E04 Offset: 0x1116E04 VA: 0x1116E04 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x1116E70 Offset: 0x1116E70 VA: 0x1116E70 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: -1 Offset: -1
	private static object GetterAdapterFrame<T, R>(MonoProperty.Getter<T, R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CA8D4 Offset: 0x21CA8D4 VA: 0x21CA8D4
	|-MonoProperty.GetterAdapterFrame<object, object>
	*/

	// RVA: -1 Offset: -1
	private static object StaticGetterAdapterFrame<R>(MonoProperty.StaticGetter<R> getter, object obj) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x21CA9A4 Offset: 0x21CA9A4 VA: 0x21CA9A4
	|-MonoProperty.StaticGetterAdapterFrame<object>
	*/

	// RVA: 0x1116EEC Offset: 0x1116EEC VA: 0x1116EEC
	private static MonoProperty.GetterAdapter CreateGetterDelegate(MethodInfo method) { }

	// RVA: 0x11172B8 Offset: 0x11172B8 VA: 0x11172B8 Slot: 24
	public override object GetValue(object obj, object[] index) { }

	// RVA: 0x11172DC Offset: 0x11172DC VA: 0x11172DC Slot: 25
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x11174F0 Offset: 0x11174F0 VA: 0x11174F0 Slot: 27
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) { }

	// RVA: 0x111774C Offset: 0x111774C VA: 0x111774C Slot: 3
	public override string ToString() { }

	// RVA: 0x1117810 Offset: 0x1117810 VA: 0x1117810 Slot: 28
	public override Type[] GetOptionalCustomModifiers() { }

	// RVA: 0x1117894 Offset: 0x1117894 VA: 0x1117894 Slot: 29
	public override Type[] GetRequiredCustomModifiers() { }

	// RVA: 0x1117910 Offset: 0x1117910 VA: 0x1117910 Slot: 30
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: 
private sealed class MonoProperty.GetterAdapter : MulticastDelegate // TypeDefIndex: 406
{
	// Methods

	// RVA: 0x1117988 Offset: 0x1117988 VA: 0x1117988
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1117998 Offset: 0x1117998 VA: 0x1117998 Slot: 11
	public virtual object Invoke(object _this) { }

	// RVA: 0x1117D3C Offset: 0x1117D3C VA: 0x1117D3C Slot: 12
	public virtual IAsyncResult BeginInvoke(object _this, AsyncCallback callback, object object) { }

	// RVA: 0x1117D60 Offset: 0x1117D60 VA: 0x1117D60 Slot: 13
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoProperty.Getter<T, R> : MulticastDelegate // TypeDefIndex: 407
{
	// Methods

