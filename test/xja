
	// RVA: 0x2AE0D0C Offset: 0x2AE0D0C VA: 0x2AE0D0C
	public long get_TotalIn() { }

	// RVA: 0x2AE13A4 Offset: 0x2AE13A4 VA: 0x2AE13A4
	public void set_Strategy(DeflateStrategy value) { }

	// RVA: 0x2AE0FE4 Offset: 0x2AE0FE4 VA: 0x2AE0FE4
	public void SetLevel(int level) { }

	// RVA: 0x2AE1E60 Offset: 0x2AE1E60 VA: 0x2AE1E60
	public void FillWindow() { }

	// RVA: 0x2AE2848 Offset: 0x2AE2848 VA: 0x2AE2848
	private void UpdateHash() { }

	// RVA: 0x2AE3040 Offset: 0x2AE3040 VA: 0x2AE3040
	private int InsertString() { }

	// RVA: 0x2AE2ECC Offset: 0x2AE2ECC VA: 0x2AE2ECC
	private void SlideWindow() { }

	// RVA: 0x2AE3164 Offset: 0x2AE3164 VA: 0x2AE3164
	private bool FindLongestMatch(int curMatch) { }

	// RVA: 0x2AE1F6C Offset: 0x2AE1F6C VA: 0x2AE1F6C
	private bool DeflateStored(bool flush, bool finish) { }

	// RVA: 0x2AE20F4 Offset: 0x2AE20F4 VA: 0x2AE20F4
	private bool DeflateFast(bool flush, bool finish) { }

	// RVA: 0x2AE23A8 Offset: 0x2AE23A8 VA: 0x2AE23A8
	private bool DeflateSlow(bool flush, bool finish) { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class DeflaterHuffman // TypeDefIndex: 3669
{
	// Fields
	private static readonly int[] BL_ORDER; // 0x0
	private static readonly byte[] bit4Reverse; // 0x8
	private static short[] staticLCodes; // 0x10
	private static byte[] staticLLength; // 0x18
	private static short[] staticDCodes; // 0x20
	private static byte[] staticDLength; // 0x28
	public DeflaterPending pending; // 0x10
	private DeflaterHuffman.Tree literalTree; // 0x18
	private DeflaterHuffman.Tree distTree; // 0x20
	private DeflaterHuffman.Tree blTree; // 0x28
	private short[] d_buf; // 0x30
	private byte[] l_buf; // 0x38
	private int last_lit; // 0x40
	private int extra_bits; // 0x44

	// Methods

	// RVA: 0x2AE3C6C Offset: 0x2AE3C6C VA: 0x2AE3C6C
	private static void .cctor() { }

	// RVA: 0x2AE1D60 Offset: 0x2AE1D60 VA: 0x2AE1D60
	public void .ctor(DeflaterPending pending) { }

	// RVA: 0x2AE26FC Offset: 0x2AE26FC VA: 0x2AE26FC
	public void Reset() { }

	// RVA: 0x2AE4388 Offset: 0x2AE4388 VA: 0x2AE4388
	public void SendAllTrees(int blTreeCodes) { }

	// RVA: 0x2AE4A94 Offset: 0x2AE4A94 VA: 0x2AE4A94
	public void CompressBlock() { }

	// RVA: 0x2AE2760 Offset: 0x2AE2760 VA: 0x2AE2760
	public void FlushStoredBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock) { }

	// RVA: 0x2AE28EC Offset: 0x2AE28EC VA: 0x2AE28EC
	public void FlushBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock) { }

	// RVA: 0x2AE3C5C Offset: 0x2AE3C5C VA: 0x2AE3C5C
	public bool IsFull() { }

	// RVA: 0x2AE2DD0 Offset: 0x2AE2DD0 VA: 0x2AE2DD0
	public bool TallyLit(int literal) { }

	// RVA: 0x2AE3A08 Offset: 0x2AE3A08 VA: 0x2AE3A08
	public bool TallyDist(int distance, int length) { }

	// RVA: 0x2AE40D0 Offset: 0x2AE40D0 VA: 0x2AE40D0
	public static short BitReverse(int toReverse) { }

	// RVA: 0x2AE4D34 Offset: 0x2AE4D34 VA: 0x2AE4D34
	private static int Lcode(int length) { }

	// RVA: 0x2AE4E30 Offset: 0x2AE4E30 VA: 0x2AE4E30
	private static int Dcode(int distance) { }
}

// Namespace: 
private class DeflaterHuffman.Tree // TypeDefIndex: 3670
{
	// Fields
	public short[] freqs; // 0x10
	public byte[] length; // 0x18
	public int minNumCodes; // 0x20
	public int numCodes; // 0x24
	private short[] codes; // 0x28
	private readonly int[] bl_counts; // 0x30
	private readonly int maxLength; // 0x38
	private DeflaterHuffman dh; // 0x40

	// Methods

	// RVA: 0x2AE4254 Offset: 0x2AE4254 VA: 0x2AE4254
	public void .ctor(DeflaterHuffman dh, int elems, int minCodes, int maxLength) { }

	// RVA: 0x2AE42FC Offset: 0x2AE42FC VA: 0x2AE42FC
	public void Reset() { }

	// RVA: 0x2AE4D68 Offset: 0x2AE4D68 VA: 0x2AE4D68
	public void WriteSymbol(int code) { }

	// RVA: 0x2AE5DA4 Offset: 0x2AE5DA4 VA: 0x2AE5DA4
	public void SetStaticCodes(short[] staticCodes, byte[] staticLengths) { }

	// RVA: 0x2AE45C8 Offset: 0x2AE45C8 VA: 0x2AE45C8
	public void BuildCodes() { }

	// RVA: 0x2AE4F54 Offset: 0x2AE4F54 VA: 0x2AE4F54
	public void BuildTree() { }

	// RVA: 0x2AE5CD8 Offset: 0x2AE5CD8 VA: 0x2AE5CD8
	public int GetEncodedLength() { }

	// RVA: 0x2AE5A5C Offset: 0x2AE5A5C VA: 0x2AE5A5C
	public void CalcBLFreq(DeflaterHuffman.Tree blTree) { }

	// RVA: 0x2AE4848 Offset: 0x2AE4848 VA: 0x2AE4848
	public void WriteTree(DeflaterHuffman.Tree blTree) { }

	// RVA: 0x2AE5DB0 Offset: 0x2AE5DB0 VA: 0x2AE5DB0
	private void BuildLength(int[] childs) { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class DeflaterPending : PendingBuffer // TypeDefIndex: 3671
{
	// Methods

	// RVA: 0x2AE09A4 Offset: 0x2AE09A4 VA: 0x2AE09A4
	public void .ctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class Inflater // TypeDefIndex: 3672
{
	// Fields
	private static readonly int[] CPLENS; // 0x0
	private static readonly int[] CPLEXT; // 0x8
	private static readonly int[] CPDIST; // 0x10
	private static readonly int[] CPDEXT; // 0x18
	private int mode; // 0x10
	private int readAdler; // 0x14
	private int neededBits; // 0x18
	private int repLength; // 0x1C
	private int repDist; // 0x20
	private int uncomprLen; // 0x24
	private bool isLastBlock; // 0x28
	private long totalOut; // 0x30
	private long totalIn; // 0x38
	private bool noHeader; // 0x40
	private readonly StreamManipulator input; // 0x48
	private OutputWindow outputWindow; // 0x50
	private InflaterDynHeader dynHeader; // 0x58
	private InflaterHuffmanTree litlenTree; // 0x60
	private InflaterHuffmanTree distTree; // 0x68
	private Adler32 adler; // 0x70

	// Properties
	public bool IsNeedingInput { get; }
	public bool IsNeedingDictionary { get; }
	public bool IsFinished { get; }
	public long TotalOut { get; }
	public int RemainingInput { get; }

	// Methods

	// RVA: 0x2ADE8C0 Offset: 0x2ADE8C0 VA: 0x2ADE8C0
	public void .ctor(bool noHeader) { }

	// RVA: 0x2ADFB84 Offset: 0x2ADFB84 VA: 0x2ADFB84
	public void Reset() { }

	// RVA: 0x2AE64D0 Offset: 0x2AE64D0 VA: 0x2AE64D0
	private bool DecodeHeader() { }

	// RVA: 0x2AE6758 Offset: 0x2AE6758 VA: 0x2AE6758
	private bool DecodeDict() { }

	// RVA: 0x2AE67E8 Offset: 0x2AE67E8 VA: 0x2AE67E8
	private bool DecodeHuffman() { }

	// RVA: 0x2AE722C Offset: 0x2AE722C VA: 0x2AE722C
	private bool DecodeChksum() { }

	// RVA: 0x2AE751C Offset: 0x2AE751C VA: 0x2AE751C
	private bool Decode() { }

	// RVA: 0x2AE81B8 Offset: 0x2AE81B8 VA: 0x2AE81B8
	public void SetInput(byte[] buffer, int index, int count) { }

	// RVA: 0x2AE83F0 Offset: 0x2AE83F0 VA: 0x2AE83F0
	public int Inflate(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AE8750 Offset: 0x2AE8750 VA: 0x2AE8750
	public bool get_IsNeedingInput() { }

	// RVA: 0x2AE8784 Offset: 0x2AE8784 VA: 0x2AE8784
	public bool get_IsNeedingDictionary() { }

	// RVA: 0x2ADF39C Offset: 0x2ADF39C VA: 0x2ADF39C
	public bool get_IsFinished() { }

	// RVA: 0x2ADFB3C Offset: 0x2ADFB3C VA: 0x2ADFB3C
	public long get_TotalOut() { }

	// RVA: 0x2ADFB44 Offset: 0x2ADFB44 VA: 0x2ADFB44
	public int get_RemainingInput() { }

	// RVA: 0x2AE87BC Offset: 0x2AE87BC VA: 0x2AE87BC
	private static void .cctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
internal class InflaterDynHeader // TypeDefIndex: 3673
{
	// Fields
	private static readonly int[] repMin; // 0x0
	private static readonly int[] repBits; // 0x8
	private static readonly int[] BL_ORDER; // 0x10
	private byte[] blLens; // 0x10
	private byte[] litdistLens; // 0x18
	private InflaterHuffmanTree blTree; // 0x20
	private int mode; // 0x28
	private int lnum; // 0x2C
	private int dnum; // 0x30
	private int blnum; // 0x34
	private int num; // 0x38
	private int repSymbol; // 0x3C
	private byte lastLen; // 0x40
	private int ptr; // 0x44

	// Methods

	// RVA: 0x2AE7B20 Offset: 0x2AE7B20 VA: 0x2AE7B20
	public bool Decode(StreamManipulator input) { }

	// RVA: 0x2AE8074 Offset: 0x2AE8074 VA: 0x2AE8074
	public InflaterHuffmanTree BuildLitLenTree() { }

	// RVA: 0x2AE8118 Offset: 0x2AE8118 VA: 0x2AE8118
	public InflaterHuffmanTree BuildDistTree() { }

	// RVA: 0x2AE79F8 Offset: 0x2AE79F8 VA: 0x2AE79F8
	public void .ctor() { }

	// RVA: 0x2AE8900 Offset: 0x2AE8900 VA: 0x2AE8900
	private static void .cctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class InflaterHuffmanTree // TypeDefIndex: 3674
{
	// Fields
	private short[] tree; // 0x10
	public static InflaterHuffmanTree defLitLenTree; // 0x0
	public static InflaterHuffmanTree defDistTree; // 0x8

	// Methods

	// RVA: 0x2AE89E4 Offset: 0x2AE89E4 VA: 0x2AE89E4
	private static void .cctor() { }

	// RVA: 0x2AE88D0 Offset: 0x2AE88D0 VA: 0x2AE88D0
	public void .ctor(byte[] codeLengths) { }

	// RVA: 0x2AE8D04 Offset: 0x2AE8D04 VA: 0x2AE8D04
	private void BuildTree(byte[] codeLengths) { }

	// RVA: 0x2AE6E18 Offset: 0x2AE6E18 VA: 0x2AE6E18
	public int GetSymbol(StreamManipulator input) { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class PendingBuffer // TypeDefIndex: 3675
{
	// Fields
	private readonly byte[] buffer_; // 0x10
	private int start; // 0x18
	private int end; // 0x1C
	private uint bits; // 0x20
	private int bitCount; // 0x24

	// Properties
	public int BitCount { get; }
	public bool IsFlushed { get; }

	// Methods

	// RVA: 0x2AE63E8 Offset: 0x2AE63E8 VA: 0x2AE63E8
	public void .ctor(int bufferSize) { }

	// RVA: 0x2AE0C0C Offset: 0x2AE0C0C VA: 0x2AE0C0C
	public void Reset() { }

	// RVA: 0x2AE4E5C Offset: 0x2AE4E5C VA: 0x2AE4E5C
	public void WriteShort(int value) { }

	// RVA: 0x2AE4F08 Offset: 0x2AE4F08 VA: 0x2AE4F08
	public void WriteBlock(byte[] block, int offset, int length) { }

	// RVA: 0x2AE1A34 Offset: 0x2AE1A34 VA: 0x2AE1A34
	public int get_BitCount() { }

	// RVA: 0x2AE1B1C Offset: 0x2AE1B1C VA: 0x2AE1B1C
	public void AlignToByte() { }

	// RVA: 0x2AE1A3C Offset: 0x2AE1A3C VA: 0x2AE1A3C
	public void WriteBits(int b, int count) { }

	// RVA: 0x2AE1710 Offset: 0x2AE1710 VA: 0x2AE1710
	public void WriteShortMSB(int s) { }

	// RVA: 0x2AE0D7C Offset: 0x2AE0D7C VA: 0x2AE0D7C
	public bool get_IsFlushed() { }

	// RVA: 0x2AE1818 Offset: 0x2AE1818 VA: 0x2AE1818
	public int Flush(byte[] output, int offset, int length) { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class DeflaterOutputStream : Stream // TypeDefIndex: 3676
{
	// Fields
	private ICryptoTransform cryptoTransform_; // 0x10
	protected byte[] AESAuthCode; // 0x18
	private byte[] buffer_; // 0x20
	protected Deflater deflater_; // 0x28
	protected Stream baseOutputStream_; // 0x30
	private bool isClosed_; // 0x38
	private bool isStreamOwner_; // 0x39

	// Properties
	public bool IsStreamOwner { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2ADFF08 Offset: 0x2ADFF08 VA: 0x2ADFF08
	public void .ctor(Stream baseOutputStream, Deflater deflater, int bufferSize) { }

	// RVA: 0x2AE06DC Offset: 0x2AE06DC VA: 0x2AE06DC Slot: 29
	public virtual void Finish() { }

	// RVA: 0x2AE04AC Offset: 0x2AE04AC VA: 0x2AE04AC
	public bool get_IsStreamOwner() { }

	// RVA: 0x2AE9240 Offset: 0x2AE9240 VA: 0x2AE9240
	protected void EncryptBlock(byte[] buffer, int offset, int length) { }

	// RVA: 0x2AE931C Offset: 0x2AE931C VA: 0x2AE931C
	protected void Deflate() { }

	// RVA: 0x2AE9498 Offset: 0x2AE9498 VA: 0x2AE9498 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2AE94A0 Offset: 0x2AE94A0 VA: 0x2AE94A0 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2AE94A8 Offset: 0x2AE94A8 VA: 0x2AE94A8 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2AE94DC Offset: 0x2AE94DC VA: 0x2AE94DC Slot: 9
	public override long get_Length() { }

	// RVA: 0x2AE9510 Offset: 0x2AE9510 VA: 0x2AE9510 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2AE9544 Offset: 0x2AE9544 VA: 0x2AE9544 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2AE95B8 Offset: 0x2AE95B8 VA: 0x2AE95B8 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2AE962C Offset: 0x2AE962C VA: 0x2AE962C Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2AE96A0 Offset: 0x2AE96A0 VA: 0x2AE96A0 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x2AE9714 Offset: 0x2AE9714 VA: 0x2AE9714 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AE9788 Offset: 0x2AE9788 VA: 0x2AE9788 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x2AE97FC Offset: 0x2AE97FC VA: 0x2AE97FC Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x2AE9870 Offset: 0x2AE9870 VA: 0x2AE9870 Slot: 18
	public override void Flush() { }

	// RVA: 0x2AE98D0 Offset: 0x2AE98D0 VA: 0x2AE98D0 Slot: 13
	public override void Close() { }

	// RVA: 0x2AE9A50 Offset: 0x2AE9A50 VA: 0x2AE9A50
	private void GetAuthCodeIfAES() { }

	// RVA: 0x2AE9AD4 Offset: 0x2AE9AD4 VA: 0x2AE9AD4 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x2AE038C Offset: 0x2AE038C VA: 0x2AE038C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class InflaterInputBuffer // TypeDefIndex: 3677
{
	// Fields
	private int rawLength; // 0x10
	private byte[] rawData; // 0x18
	private int clearTextLength; // 0x20
	private byte[] clearText; // 0x28
	private int available; // 0x30
	private ICryptoTransform cryptoTransform; // 0x38
	private Stream inputStream; // 0x40

	// Properties
	public int Available { get; set; }

	// Methods

	// RVA: 0x2AE9B78 Offset: 0x2AE9B78 VA: 0x2AE9B78
	public void .ctor(Stream stream, int bufferSize) { }

	// RVA: 0x2ADF8D0 Offset: 0x2ADF8D0 VA: 0x2ADF8D0
	public int get_Available() { }

	// RVA: 0x2ADFB7C Offset: 0x2ADFB7C VA: 0x2ADFB7C
	public void set_Available(int value) { }

	// RVA: 0x2AE9BFC Offset: 0x2AE9BFC VA: 0x2AE9BFC
	public void SetInflaterInput(Inflater inflater) { }

	// RVA: 0x2ADF8D8 Offset: 0x2ADF8D8 VA: 0x2ADF8D8
	public void Fill() { }

	// RVA: 0x2ADFC0C Offset: 0x2ADFC0C VA: 0x2ADFC0C
	public int ReadClearTextBuffer(byte[] outBuffer, int offset, int length) { }

	// RVA: 0x2ADFA44 Offset: 0x2ADFA44 VA: 0x2ADFA44
	public int ReadLeByte() { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class InflaterInputStream : Stream // TypeDefIndex: 3678
{
	// Fields
	protected Inflater inf; // 0x10
	protected InflaterInputBuffer inputBuffer; // 0x18
	private Stream baseInputStream; // 0x20
	private bool isClosed; // 0x28
	private bool isStreamOwner; // 0x29

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2ADE9A0 Offset: 0x2ADE9A0 VA: 0x2ADE9A0
	public void .ctor(Stream baseInputStream, Inflater inflater, int bufferSize) { }

	// RVA: 0x2AE9C6C Offset: 0x2AE9C6C VA: 0x2AE9C6C
	protected void Fill() { }

	// RVA: 0x2AE9D5C Offset: 0x2AE9D5C VA: 0x2AE9D5C Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2AE9D90 Offset: 0x2AE9D90 VA: 0x2AE9D90 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2AE9D98 Offset: 0x2AE9D98 VA: 0x2AE9D98 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2AE9DA0 Offset: 0x2AE9DA0 VA: 0x2AE9DA0 Slot: 9
	public override long get_Length() { }

	// RVA: 0x2AE9E14 Offset: 0x2AE9E14 VA: 0x2AE9E14 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2AE9E48 Offset: 0x2AE9E48 VA: 0x2AE9E48 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2AE9EBC Offset: 0x2AE9EBC VA: 0x2AE9EBC Slot: 18
	public override void Flush() { }

	// RVA: 0x2AE9EF4 Offset: 0x2AE9EF4 VA: 0x2AE9EF4 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2AE9F68 Offset: 0x2AE9F68 VA: 0x2AE9F68 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2AE9FDC Offset: 0x2AE9FDC VA: 0x2AE9FDC Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AEA050 Offset: 0x2AEA050 VA: 0x2AEA050 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x2AEA0C4 Offset: 0x2AEA0C4 VA: 0x2AEA0C4 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }

	// RVA: 0x2AEA138 Offset: 0x2AEA138 VA: 0x2AEA138 Slot: 13
	public override void Close() { }

	// RVA: 0x2ADF204 Offset: 0x2ADF204 VA: 0x2ADF204 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class OutputWindow // TypeDefIndex: 3679
{
	// Fields
	private byte[] window; // 0x10
	private int windowEnd; // 0x18
	private int windowFilled; // 0x1C

	// Methods

	// RVA: 0x2AE6D28 Offset: 0x2AE6D28 VA: 0x2AE6D28
	public void Write(int value) { }

	// RVA: 0x2AEA188 Offset: 0x2AEA188 VA: 0x2AEA188
	private void SlowRepeat(int repStart, int length, int distance) { }

	// RVA: 0x2AE707C Offset: 0x2AE707C VA: 0x2AE707C
	public void Repeat(int length, int distance) { }

	// RVA: 0x2AE7A00 Offset: 0x2AE7A00 VA: 0x2AE7A00
	public int CopyStored(StreamManipulator input, int length) { }

	// RVA: 0x2AE6D18 Offset: 0x2AE6D18 VA: 0x2AE6D18
	public int GetFreeSpace() { }

	// RVA: 0x2AE8748 Offset: 0x2AE8748 VA: 0x2AE8748
	public int GetAvailable() { }

	// RVA: 0x2AE862C Offset: 0x2AE862C VA: 0x2AE862C
	public int CopyOutput(byte[] output, int offset, int len) { }

	// RVA: 0x2AE64C8 Offset: 0x2AE64C8 VA: 0x2AE64C8
	public void Reset() { }

	// RVA: 0x2AE6460 Offset: 0x2AE6460 VA: 0x2AE6460
	public void .ctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class StreamManipulator // TypeDefIndex: 3680
{
	// Fields
	private byte[] window_; // 0x10
	private int windowStart_; // 0x18
	private int windowEnd_; // 0x1C
	private uint buffer_; // 0x20
	private int bitsInBuffer_; // 0x24

	// Properties
	public int AvailableBits { get; }
	public int AvailableBytes { get; }
	public bool IsNeedingInput { get; }

	// Methods

	// RVA: 0x2AE6634 Offset: 0x2AE6634 VA: 0x2AE6634
	public int PeekBits(int bitCount) { }

	// RVA: 0x2AE6740 Offset: 0x2AE6740 VA: 0x2AE6740
	public void DropBits(int bitCount) { }

	// RVA: 0x2AE9238 Offset: 0x2AE9238 VA: 0x2AE9238
	public int get_AvailableBits() { }

	// RVA: 0x2AE87A8 Offset: 0x2AE87A8 VA: 0x2AE87A8
	public int get_AvailableBytes() { }

	// RVA: 0x2AE79E0 Offset: 0x2AE79E0 VA: 0x2AE79E0
	public void SkipToByteBoundary() { }

	// RVA: 0x2AE7B10 Offset: 0x2AE7B10 VA: 0x2AE7B10
	public bool get_IsNeedingInput() { }

	// RVA: 0x2AEA250 Offset: 0x2AEA250 VA: 0x2AEA250
	public int CopyBytes(byte[] output, int offset, int length) { }

	// RVA: 0x2AE64C0 Offset: 0x2AE64C0 VA: 0x2AE64C0
	public void Reset() { }

	// RVA: 0x2AE8220 Offset: 0x2AE8220 VA: 0x2AE8220
	public void SetInput(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AE6458 Offset: 0x2AE6458 VA: 0x2AE6458
	public void .ctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.GZip
[Serializable]
public class GZipException : SharpZipBaseException // TypeDefIndex: 3681
{
	// Methods

	// RVA: 0x2ADE824 Offset: 0x2ADE824 VA: 0x2ADE824
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2ADE82C Offset: 0x2ADE82C VA: 0x2ADE82C
	public void .ctor() { }

	// RVA: 0x2ADE834 Offset: 0x2ADE834 VA: 0x2ADE834
	public void .ctor(string message) { }
}

// Namespace: ICSharpCode.SharpZipLib.GZip
public class GZipInputStream : InflaterInputStream // TypeDefIndex: 3682
{
	// Fields
	protected Crc32 crc; // 0x30
	private bool readGZIPHeader; // 0x38
	private bool completedLastBlock; // 0x39

	// Methods

	// RVA: 0x2ADE83C Offset: 0x2ADE83C VA: 0x2ADE83C
	public void .ctor(Stream baseInputStream) { }

	// RVA: 0x2ADE844 Offset: 0x2ADE844 VA: 0x2ADE844
	public void .ctor(Stream baseInputStream, int size) { }

	// RVA: 0x2ADEAF8 Offset: 0x2ADEAF8 VA: 0x2ADEAF8 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2ADECE8 Offset: 0x2ADECE8 VA: 0x2ADECE8
	private bool ReadHeader() { }

	// RVA: 0x2ADF3E4 Offset: 0x2ADF3E4 VA: 0x2ADF3E4
	private void ReadFooter() { }
}

// Namespace: ICSharpCode.SharpZipLib.GZip
public class GZipOutputStream : DeflaterOutputStream // TypeDefIndex: 3683
{
	// Fields
	protected Crc32 crc; // 0x40
	private GZipOutputStream.OutputState state_; // 0x48

	// Methods

	// RVA: 0x2ADFD34 Offset: 0x2ADFD34 VA: 0x2ADFD34
	public void .ctor(Stream baseOutputStream) { }

	// RVA: 0x2ADFD3C Offset: 0x2ADFD3C VA: 0x2ADFD3C
	public void .ctor(Stream baseOutputStream, int size) { }

	// RVA: 0x2AE00B4 Offset: 0x2AE00B4 VA: 0x2AE00B4 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AE03EC Offset: 0x2AE03EC VA: 0x2AE03EC Slot: 13
	public override void Close() { }

	// RVA: 0x2AE04B4 Offset: 0x2AE04B4 VA: 0x2AE04B4 Slot: 29
	public override void Finish() { }

	// RVA: 0x2AE01A4 Offset: 0x2AE01A4 VA: 0x2AE01A4
	private void WriteHeader() { }
}

// Namespace: 
private enum GZipOutputStream.OutputState // TypeDefIndex: 3684
{
	// Fields
	public int value__; // 0x0
	public const GZipOutputStream.OutputState Header = 0;
	public const GZipOutputStream.OutputState Footer = 1;
	public const GZipOutputStream.OutputState Finished = 2;
	public const GZipOutputStream.OutputState Closed = 3;
}

// Namespace: ICSharpCode.SharpZipLib.Encryption
internal class ZipAESTransform : ICryptoTransform, IDisposable // TypeDefIndex: 3685
{
	// Fields
	private int _blockSize; // 0x10
	private readonly ICryptoTransform _encryptor; // 0x18
	private readonly byte[] _counterNonce; // 0x20
	private byte[] _encryptBuffer; // 0x28
	private int _encrPos; // 0x30
	private HMACSHA1 _hmacsha1; // 0x38
	private bool _finalised; // 0x40
	private bool _writeMode; // 0x41

	// Properties
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }
	public bool CanTransformMultipleBlocks { get; }
	public bool CanReuseTransform { get; }

	// Methods

	// RVA: 0x2ADE338 Offset: 0x2ADE338 VA: 0x2ADE338 Slot: 8
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x2ADE61C Offset: 0x2ADE61C VA: 0x2ADE61C
	public byte[] GetAuthCode() { }

	// RVA: 0x2ADE6DC Offset: 0x2ADE6DC VA: 0x2ADE6DC Slot: 9
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x2ADE750 Offset: 0x2ADE750 VA: 0x2ADE750 Slot: 6
	public int get_InputBlockSize() { }

	// RVA: 0x2ADE758 Offset: 0x2ADE758 VA: 0x2ADE758 Slot: 7
	public int get_OutputBlockSize() { }

	// RVA: 0x2ADE760 Offset: 0x2ADE760 VA: 0x2ADE760 Slot: 5
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x2ADE768 Offset: 0x2ADE768 VA: 0x2ADE768 Slot: 4
	public bool get_CanReuseTransform() { }

	// RVA: 0x2ADE770 Offset: 0x2ADE770 VA: 0x2ADE770 Slot: 10
	public void Dispose() { }
}

// Namespace: ICSharpCode.SharpZipLib.Checksum
public sealed class Adler32 : IChecksum // TypeDefIndex: 3686
{
	// Fields
	private static readonly uint BASE; // 0x0
	private uint checkValue; // 0x10

	// Properties
	public long Value { get; }

	// Methods

	// RVA: 0x2ADD9BC Offset: 0x2ADD9BC VA: 0x2ADD9BC
	public void .ctor() { }

	// RVA: 0x2ADD9E8 Offset: 0x2ADD9E8 VA: 0x2ADD9E8 Slot: 4
	public void Reset() { }

	// RVA: 0x2ADD9F4 Offset: 0x2ADD9F4 VA: 0x2ADD9F4 Slot: 5
	public long get_Value() { }

	// RVA: 0x2ADD9FC Offset: 0x2ADD9FC VA: 0x2ADD9FC Slot: 6
	public void Update(int bval) { }

	// RVA: 0x2ADDAA8 Offset: 0x2ADDAA8 VA: 0x2ADDAA8 Slot: 7
	public void Update(byte[] buffer, int offset, int count) { }

	// RVA: 0x2ADDD04 Offset: 0x2ADDD04 VA: 0x2ADDD04
	private static void .cctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.Checksum
public sealed class Crc32 : IChecksum // TypeDefIndex: 3687
{
	// Fields
	private static readonly uint crcInit; // 0x0
	private static readonly uint crcXor; // 0x4
	private static readonly uint[] crcTable; // 0x8
	private uint checkValue; // 0x10

	// Properties
	public long Value { get; }

	// Methods

	// RVA: 0x2ADDF2C Offset: 0x2ADDF2C VA: 0x2ADDF2C
	public void .ctor() { }

	// RVA: 0x2ADDF54 Offset: 0x2ADDF54 VA: 0x2ADDF54 Slot: 4
	public void Reset() { }

	// RVA: 0x2ADDFC4 Offset: 0x2ADDFC4 VA: 0x2ADDFC4 Slot: 5
	public long get_Value() { }

	// RVA: 0x2ADE038 Offset: 0x2ADE038 VA: 0x2ADE038 Slot: 6
	public void Update(int bval) { }

	// RVA: 0x2ADE0F8 Offset: 0x2ADE0F8 VA: 0x2ADE0F8 Slot: 7
	public void Update(byte[] buffer, int offset, int count) { }

	// RVA: 0x2ADE2A0 Offset: 0x2ADE2A0 VA: 0x2ADE2A0
	private static void .cctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.Checksum
public interface IChecksum // TypeDefIndex: 3688
{
	// Properties
	public abstract long Value { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Reset();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract long get_Value();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Update(int bval);
}

// Namespace: ICSharpCode.SharpZipLib.Checksum
public sealed class BZip2Crc : IChecksum // TypeDefIndex: 3689
{
	// Fields
	private static readonly uint crcInit; // 0x0
	private static readonly uint crcXor; // 0x4
	private static readonly uint[] crcTable; // 0x8
	private uint checkValue; // 0x10

	// Properties
	public long Value { get; }

	// Methods

	// RVA: 0x2AD399C Offset: 0x2AD399C VA: 0x2AD399C
	public void .ctor() { }

	// RVA: 0x2ADDD58 Offset: 0x2ADDD58 VA: 0x2ADDD58 Slot: 4
	public void Reset() { }

	// RVA: 0x2ADDDC8 Offset: 0x2ADDDC8 VA: 0x2ADDDC8 Slot: 5
	public long get_Value() { }

	// RVA: 0x2ADDDD4 Offset: 0x2ADDDD4 VA: 0x2ADDDD4 Slot: 6
	public void Update(int bval) { }

	// RVA: 0x2ADDE94 Offset: 0x2ADDE94 VA: 0x2ADDE94
	private static void .cctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.BZip2
internal sealed class BZip2Constants // TypeDefIndex: 3690
{
	// Fields
	public static readonly int[] RandomNumbers; // 0x0

	// Methods

	// RVA: 0x2AD35F8 Offset: 0x2AD35F8 VA: 0x2AD35F8
	private static void .cctor() { }
}

// Namespace: ICSharpCode.SharpZipLib.BZip2
[Serializable]
public class BZip2Exception : SharpZipBaseException // TypeDefIndex: 3691
{
	// Methods

	// RVA: 0x2AD3674 Offset: 0x2AD3674 VA: 0x2AD3674
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x2AD3684 Offset: 0x2AD3684 VA: 0x2AD3684
	public void .ctor() { }

	// RVA: 0x2AD3694 Offset: 0x2AD3694 VA: 0x2AD3694
	public void .ctor(string message) { }
}

// Namespace: ICSharpCode.SharpZipLib.BZip2
public class BZip2InputStream : Stream // TypeDefIndex: 3692
{
	// Fields
	private int last; // 0x10
	private int origPtr; // 0x14
	private int blockSize100k; // 0x18
	private bool blockRandomised; // 0x1C
	private int bsBuff; // 0x20
	private int bsLive; // 0x24
	private IChecksum mCrc; // 0x28
	private bool[] inUse; // 0x30
	private int nInUse; // 0x38
	private byte[] seqToUnseq; // 0x40
	private byte[] unseqToSeq; // 0x48
	private byte[] selector; // 0x50
	private byte[] selectorMtf; // 0x58
	private int[] tt; // 0x60
	private byte[] ll8; // 0x68
	private int[] unzftab; // 0x70
	private int[][] limit; // 0x78
	private int[][] baseArray; // 0x80
	private int[][] perm; // 0x88
	private int[] minLens; // 0x90
	private Stream baseStream; // 0x98
	private bool streamEnd; // 0xA0
	private int currentChar; // 0xA4
	private int currentState; // 0xA8
	private int storedBlockCRC; // 0xAC
	private int storedCombinedCRC; // 0xB0
	private int computedBlockCRC; // 0xB4
	private uint computedCombinedCRC; // 0xB8
	private int count; // 0xBC
	private int chPrev; // 0xC0
	private int ch2; // 0xC4
	private int tPos; // 0xC8
	private int rNToGo; // 0xCC
	private int rTPos; // 0xD0
	private int i2; // 0xD4
	private int j2; // 0xD8
	private byte z; // 0xDC
	private bool isStreamOwner; // 0xDD

	// Properties
	public bool IsStreamOwner { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2AD36A4 Offset: 0x2AD36A4 VA: 0x2AD36A4
	public void .ctor(Stream stream) { }

	// RVA: 0x2AD3ED4 Offset: 0x2AD3ED4 VA: 0x2AD3ED4
	public bool get_IsStreamOwner() { }

	// RVA: 0x2AD3EDC Offset: 0x2AD3EDC VA: 0x2AD3EDC Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2AD3F10 Offset: 0x2AD3F10 VA: 0x2AD3F10 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2AD3F44 Offset: 0x2AD3F44 VA: 0x2AD3F44 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2AD3F4C Offset: 0x2AD3F4C VA: 0x2AD3F4C Slot: 9
	public override long get_Length() { }

	// RVA: 0x2AD3F80 Offset: 0x2AD3F80 VA: 0x2AD3F80 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2AD3FB4 Offset: 0x2AD3FB4 VA: 0x2AD3FB4 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2AD4028 Offset: 0x2AD4028 VA: 0x2AD4028 Slot: 18
	public override void Flush() { }

	// RVA: 0x2AD4044 Offset: 0x2AD4044 VA: 0x2AD4044 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2AD40B8 Offset: 0x2AD40B8 VA: 0x2AD40B8 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2AD412C Offset: 0x2AD412C VA: 0x2AD412C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AD41A0 Offset: 0x2AD41A0 VA: 0x2AD41A0 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x2AD4214 Offset: 0x2AD4214 VA: 0x2AD4214 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2AD4338 Offset: 0x2AD4338 VA: 0x2AD4338 Slot: 13
	public override void Close() { }

	// RVA: 0x2AD4358 Offset: 0x2AD4358 VA: 0x2AD4358 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x2AD48A8 Offset: 0x2AD48A8 VA: 0x2AD48A8
	private void MakeMaps() { }

	// RVA: 0x2AD39D0 Offset: 0x2AD39D0 VA: 0x2AD39D0
	private void Initialize() { }

	// RVA: 0x2AD3A7C Offset: 0x2AD3A7C VA: 0x2AD3A7C
	private void InitBlock() { }

	// RVA: 0x2AD57D8 Offset: 0x2AD57D8 VA: 0x2AD57D8
	private void EndBlock() { }

