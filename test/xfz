	// RVA: 0xD68D08 Offset: 0xD68D08 VA: 0xD68D08
	public void set_StatusInformation(string value) { }

	// RVA: 0x230AFA4 Offset: 0x230AFA4 VA: 0x230AFA4
	internal static string GetInformation(X509ChainStatusFlags flags) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xBD0AF4 Offset: 0xBD0AF4 VA: 0xBD0AF4
public enum X509ChainStatusFlags // TypeDefIndex: 1661
{
	// Fields
	public int value__; // 0x0
	public const X509ChainStatusFlags NoError = 0;
	public const X509ChainStatusFlags NotTimeValid = 1;
	public const X509ChainStatusFlags NotTimeNested = 2;
	public const X509ChainStatusFlags Revoked = 4;
	public const X509ChainStatusFlags NotSignatureValid = 8;
	public const X509ChainStatusFlags NotValidForUsage = 16;
	public const X509ChainStatusFlags UntrustedRoot = 32;
	public const X509ChainStatusFlags RevocationStatusUnknown = 64;
	public const X509ChainStatusFlags Cyclic = 128;
	public const X509ChainStatusFlags InvalidExtension = 256;
	public const X509ChainStatusFlags InvalidPolicyConstraints = 512;
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024;
	public const X509ChainStatusFlags InvalidNameConstraints = 2048;
	public const X509ChainStatusFlags HasNotSupportedNameConstraint = 4096;
	public const X509ChainStatusFlags HasNotDefinedNameConstraint = 8192;
	public const X509ChainStatusFlags HasNotPermittedNameConstraint = 16384;
	public const X509ChainStatusFlags HasExcludedNameConstraint = 32768;
	public const X509ChainStatusFlags PartialChain = 65536;
	public const X509ChainStatusFlags CtlNotTimeValid = 131072;
	public const X509ChainStatusFlags CtlNotSignatureValid = 262144;
	public const X509ChainStatusFlags CtlNotValidForUsage = 524288;
	public const X509ChainStatusFlags OfflineRevocation = 16777216;
	public const X509ChainStatusFlags NoIssuanceChainPolicy = 33554432;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509EnhancedKeyUsageExtension : X509Extension // TypeDefIndex: 1662
{
	// Fields
	internal const string oid = "2.5.29.37";
	internal const string friendlyName = "Enhanced Key Usage";
	private OidCollection _enhKeyUsage; // 0x28
	private AsnDecodeStatus _status; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xBD0FEC Offset: 0xBD0FEC VA: 0xBD0FEC
	private static Dictionary<string, int> <>f__switch$mapE; // 0x0

	// Properties
	public OidCollection EnhancedKeyUsages { get; }

	// Methods

	// RVA: 0x230B7F4 Offset: 0x230B7F4 VA: 0x230B7F4
	public void .ctor() { }

	// RVA: 0x22FA0F4 Offset: 0x22FA0F4 VA: 0x22FA0F4
	public void .ctor(AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }

	// RVA: 0x230BAF4 Offset: 0x230BAF4 VA: 0x230BAF4
	public void .ctor(OidCollection enhancedKeyUsages, bool critical) { }

	// RVA: 0x230BD04 Offset: 0x230BD04 VA: 0x230BD04
	public OidCollection get_EnhancedKeyUsages() { }

	// RVA: 0x230BDD4 Offset: 0x230BDD4 VA: 0x230BDD4 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x230B884 Offset: 0x230B884 VA: 0x230B884
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x230BC00 Offset: 0x230BC00 VA: 0x230BC00
	internal byte[] Encode() { }

	// RVA: 0x22FA1BC Offset: 0x22FA1BC VA: 0x22FA1BC Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Extension : AsnEncodedData // TypeDefIndex: 1663
{
	// Fields
	private bool _critical; // 0x20

	// Properties
	public bool Critical { get; set; }

	// Methods

	// RVA: 0x22FE1FC Offset: 0x22FE1FC VA: 0x22FE1FC
	protected void .ctor() { }

	// RVA: 0x230BF78 Offset: 0x230BF78 VA: 0x230BF78
	public void .ctor(AsnEncodedData encodedExtension, bool critical) { }

	// RVA: 0x230C048 Offset: 0x230C048 VA: 0x230C048
	public void .ctor(Oid oid, byte[] rawData, bool critical) { }

	// RVA: 0x230C118 Offset: 0x230C118 VA: 0x230C118
	public void .ctor(string oid, byte[] rawData, bool critical) { }

	// RVA: 0x22FEA44 Offset: 0x22FEA44 VA: 0x22FEA44
	public bool get_Critical() { }

	// RVA: 0x22FE204 Offset: 0x22FE204 VA: 0x22FE204
	public void set_Critical(bool value) { }

	// RVA: 0x230C144 Offset: 0x230C144 VA: 0x230C144 Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x22FEA4C Offset: 0x22FEA4C VA: 0x22FEA4C
	internal string FormatUnkownData(byte[] data) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0xBD0B04 Offset: 0xBD0B04 VA: 0xBD0B04
public sealed class X509ExtensionCollection : ICollection, IEnumerable // TypeDefIndex: 1664
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public X509Extension Item { get; }
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x230C26C Offset: 0x230C26C VA: 0x230C26C
	public void .ctor() { }

	// RVA: 0x22FF814 Offset: 0x22FF814 VA: 0x22FF814
	internal void .ctor(X509Certificate cert) { }

	// RVA: 0x230C2D8 Offset: 0x230C2D8 VA: 0x230C2D8 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x230C3F8 Offset: 0x230C3F8 VA: 0x230C3F8 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x2305384 Offset: 0x2305384 VA: 0x2305384 Slot: 4
	public int get_Count() { }

	// RVA: 0x230C460 Offset: 0x230C460 VA: 0x230C460 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x230C498 Offset: 0x230C498 VA: 0x230C498 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x230C49C Offset: 0x230C49C VA: 0x230C49C
	public X509Extension get_Item(int index) { }

	// RVA: 0x2304FA4 Offset: 0x2304FA4 VA: 0x2304FA4
	public X509Extension get_Item(string oid) { }

	// RVA: 0x230C5D8 Offset: 0x230C5D8 VA: 0x230C5D8
	public int Add(X509Extension extension) { }

	// RVA: 0x230C690 Offset: 0x230C690 VA: 0x230C690
	public void CopyTo(X509Extension[] array, int index) { }

	// RVA: 0x23096E4 Offset: 0x23096E4 VA: 0x23096E4
	public X509ExtensionEnumerator GetEnumerator() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionEnumerator : IEnumerator // TypeDefIndex: 1665
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Extension Current { get; }

	// Methods

	// RVA: 0x2030858 Offset: 0x2030858 VA: 0x2030858
	internal void .ctor(ArrayList list) { }

	// RVA: 0x20308A4 Offset: 0x20308A4 VA: 0x20308A4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x2030958 Offset: 0x2030958 VA: 0x2030958
	public X509Extension get_Current() { }

	// RVA: 0x2030A98 Offset: 0x2030A98 VA: 0x2030A98 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x2030B50 Offset: 0x2030B50 VA: 0x2030B50 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509FindType // TypeDefIndex: 1666
{
	// Fields
	public int value__; // 0x0
	public const X509FindType FindByThumbprint = 0;
	public const X509FindType FindBySubjectName = 1;
	public const X509FindType FindBySubjectDistinguishedName = 2;
	public const X509FindType FindByIssuerName = 3;
	public const X509FindType FindByIssuerDistinguishedName = 4;
	public const X509FindType FindBySerialNumber = 5;
	public const X509FindType FindByTimeValid = 6;
	public const X509FindType FindByTimeNotYetValid = 7;
	public const X509FindType FindByTimeExpired = 8;
	public const X509FindType FindByTemplateName = 9;
	public const X509FindType FindByApplicationPolicy = 10;
	public const X509FindType FindByCertificatePolicy = 11;
	public const X509FindType FindByExtension = 12;
	public const X509FindType FindByKeyUsage = 13;
	public const X509FindType FindBySubjectKeyIdentifier = 14;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509IncludeOption // TypeDefIndex: 1667
{
	// Fields
	public int value__; // 0x0
	public const X509IncludeOption None = 0;
	public const X509IncludeOption ExcludeRoot = 1;
	public const X509IncludeOption EndCertOnly = 2;
	public const X509IncludeOption WholeChain = 3;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageExtension : X509Extension // TypeDefIndex: 1668
{
	// Fields
	internal const string oid = "2.5.29.15";
	internal const string friendlyName = "Key Usage";
	internal const X509KeyUsageFlags all = 33023;
	private X509KeyUsageFlags _keyUsages; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Properties
	public X509KeyUsageFlags KeyUsages { get; }

	// Methods

	// RVA: 0x2030C08 Offset: 0x2030C08 VA: 0x2030C08
	public void .ctor() { }

	// RVA: 0x2030C8C Offset: 0x2030C8C VA: 0x2030C8C
	public void .ctor(AsnEncodedData encodedKeyUsage, bool critical) { }

	// RVA: 0x2030F5C Offset: 0x2030F5C VA: 0x2030F5C
	public void .ctor(X509KeyUsageFlags keyUsages, bool critical) { }

	// RVA: 0x203120C Offset: 0x203120C VA: 0x203120C
	public X509KeyUsageFlags get_KeyUsages() { }

	// RVA: 0x20312A4 Offset: 0x20312A4 VA: 0x20312A4 Slot: 4
	public override void CopyFrom(AsnEncodedData encodedData) { }

	// RVA: 0x2031024 Offset: 0x2031024 VA: 0x2031024
	internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags) { }

	// RVA: 0x2030D68 Offset: 0x2030D68 VA: 0x2030D68
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x2031034 Offset: 0x2031034 VA: 0x2031034
	internal byte[] Encode() { }

	// RVA: 0x2031470 Offset: 0x2031470 VA: 0x2031470 Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xBD0B3C Offset: 0xBD0B3C VA: 0xBD0B3C
public enum X509KeyUsageFlags // TypeDefIndex: 1669
{
	// Fields
	public int value__; // 0x0
	public const X509KeyUsageFlags None = 0;
	public const X509KeyUsageFlags EncipherOnly = 1;
	public const X509KeyUsageFlags CrlSign = 2;
	public const X509KeyUsageFlags KeyCertSign = 4;
	public const X509KeyUsageFlags KeyAgreement = 8;
	public const X509KeyUsageFlags DataEncipherment = 16;
	public const X509KeyUsageFlags KeyEncipherment = 32;
	public const X509KeyUsageFlags NonRepudiation = 64;
	public const X509KeyUsageFlags DigitalSignature = 128;
	public const X509KeyUsageFlags DecipherOnly = 32768;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509NameType // TypeDefIndex: 1670
{
	// Fields
	public int value__; // 0x0
	public const X509NameType SimpleName = 0;
	public const X509NameType EmailName = 1;
	public const X509NameType UpnName = 2;
	public const X509NameType DnsName = 3;
	public const X509NameType DnsFromAlternativeName = 4;
	public const X509NameType UrlName = 5;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationFlag // TypeDefIndex: 1671
{
	// Fields
	public int value__; // 0x0
	public const X509RevocationFlag EndCertificateOnly = 0;
	public const X509RevocationFlag EntireChain = 1;
	public const X509RevocationFlag ExcludeRoot = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationMode // TypeDefIndex: 1672
{
	// Fields
	public int value__; // 0x0
	public const X509RevocationMode NoCheck = 0;
	public const X509RevocationMode Online = 1;
	public const X509RevocationMode Offline = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Store // TypeDefIndex: 1673
{
	// Fields
	private string _name; // 0x10
	private StoreLocation _location; // 0x18
	private X509Certificate2Collection list; // 0x20
	private OpenFlags _flags; // 0x28
	private X509Store store; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xBD0FFC Offset: 0xBD0FFC VA: 0xBD0FFC
	private static Dictionary<string, int> <>f__switch$mapF; // 0x0

	// Properties
	public X509Certificate2Collection Certificates { get; }
	public StoreLocation Location { get; }
	public string Name { get; }
	private X509Stores Factory { get; }
	private bool IsOpen { get; }
	private bool IsReadOnly { get; }
	internal X509Store Store { get; }
	[MonoTODOAttribute] // RVA: 0xBD3A10 Offset: 0xBD3A10 VA: 0xBD3A10
	public IntPtr StoreHandle { get; }

	// Methods

	// RVA: 0x2031B1C Offset: 0x2031B1C VA: 0x2031B1C
	public void .ctor() { }

	// RVA: 0x2031C24 Offset: 0x2031C24 VA: 0x2031C24
	public void .ctor(string storeName) { }

	// RVA: 0x2031C2C Offset: 0x2031C2C VA: 0x2031C2C
	public void .ctor(StoreName storeName) { }

	// RVA: 0x2031D68 Offset: 0x2031D68 VA: 0x2031D68
	public void .ctor(StoreLocation storeLocation) { }

	// RVA: 0x2031C34 Offset: 0x2031C34 VA: 0x2031C34
	public void .ctor(StoreName storeName, StoreLocation storeLocation) { }

	[MonoTODOAttribute] // RVA: 0xBD2614 Offset: 0xBD2614 VA: 0xBD2614
	// RVA: 0x2031DC8 Offset: 0x2031DC8 VA: 0x2031DC8
	public void .ctor(IntPtr storeHandle) { }

	// RVA: 0x2031B70 Offset: 0x2031B70 VA: 0x2031B70
	public void .ctor(string storeName, StoreLocation storeLocation) { }

	// RVA: 0x2031E94 Offset: 0x2031E94 VA: 0x2031E94
	public X509Certificate2Collection get_Certificates() { }

	// RVA: 0x2031F1C Offset: 0x2031F1C VA: 0x2031F1C
	public StoreLocation get_Location() { }

	// RVA: 0x2031F24 Offset: 0x2031F24 VA: 0x2031F24
	public string get_Name() { }

	// RVA: 0x2031F2C Offset: 0x2031F2C VA: 0x2031F2C
	private X509Stores get_Factory() { }

	// RVA: 0x2031F48 Offset: 0x2031F48 VA: 0x2031F48
	private bool get_IsOpen() { }

	// RVA: 0x2031F58 Offset: 0x2031F58 VA: 0x2031F58
	private bool get_IsReadOnly() { }

	// RVA: 0x2031F94 Offset: 0x2031F94 VA: 0x2031F94
	internal X509Store get_Store() { }

	// RVA: 0x2031F9C Offset: 0x2031F9C VA: 0x2031F9C
	public IntPtr get_StoreHandle() { }

	// RVA: 0x2031FDC Offset: 0x2031FDC VA: 0x2031FDC
	public void Add(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xBD264C Offset: 0xBD264C VA: 0xBD264C
	// RVA: 0x2032270 Offset: 0x2032270 VA: 0x2032270
	public void AddRange(X509Certificate2Collection certificates) { }

	// RVA: 0x2032508 Offset: 0x2032508 VA: 0x2032508
	public void Close() { }

	// RVA: 0x2032524 Offset: 0x2032524 VA: 0x2032524
	public void Open(OpenFlags flags) { }

	// RVA: 0x2032938 Offset: 0x2032938 VA: 0x2032938
	public void Remove(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xBD2684 Offset: 0xBD2684 VA: 0xBD2684
	// RVA: 0x2032B2C Offset: 0x2032B2C VA: 0x2032B2C
	public void RemoveRange(X509Certificate2Collection certificates) { }

	// RVA: 0x20321D0 Offset: 0x20321D0 VA: 0x20321D0
	private bool Exists(X509Certificate2 certificate) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1674
{
	// Fields
	internal const string oid = "2.5.29.14";
	internal const string friendlyName = "Subject Key Identifier";
	private byte[] _subjectKeyIdentifier; // 0x28
	private string _ski; // 0x30
	private AsnDecodeStatus _status; // 0x38

	// Properties
	public string SubjectKeyIdentifier { get; }

	// Methods

	// RVA: 0x2032DF0 Offset: 0x2032DF0 VA: 0x2032DF0
	public void .ctor() { }

	// RVA: 0x2032E74 Offset: 0x2032E74 VA: 0x2032E74
	public void .ctor(AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }

	// RVA: 0x20330EC Offset: 0x20330EC VA: 0x20330EC
	public void .ctor(byte[] subjectKeyIdentifier, bool critical) { }

	// RVA: 0x2033330 Offset: 0x2033330 VA: 0x2033330
	public void .ctor(string subjectKeyIdentifier, bool critical) { }

	// RVA: 0x203359C Offset: 0x203359C VA: 0x203359C
	public void .ctor(PublicKey key, bool critical) { }

	// RVA: 0x20335A8 Offset: 0x20335A8 VA: 0x20335A8
	public void .ctor(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }

	// RVA: 0x2033A24 Offset: 0x2033A24 VA: 0x2033A24
	public string get_SubjectKeyIdentifier() { }

	// RVA: 0x2033AD4 Offset: 0x2033AD4 VA: 0x2033AD4 Slot: 4
	public override void CopyFrom(AsnEncodedData encodedData) { }

	// RVA: 0x2033CA0 Offset: 0x2033CA0 VA: 0x2033CA0
	internal static byte FromHexChar(char c) { }

	// RVA: 0x2033CF4 Offset: 0x2033CF4 VA: 0x2033CF4
	internal static byte FromHexChars(char c1, char c2) { }

	// RVA: 0x203347C Offset: 0x203347C VA: 0x203347C
	internal static byte[] FromHex(string hex) { }

	// RVA: 0x2032F50 Offset: 0x2032F50 VA: 0x2032F50
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x20332B0 Offset: 0x20332B0 VA: 0x20332B0
	internal byte[] Encode() { }

	// RVA: 0x2033DA8 Offset: 0x2033DA8 VA: 0x2033DA8 Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1675
{
	// Fields
	public int value__; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm Sha1 = 0;
	public const X509SubjectKeyIdentifierHashAlgorithm ShortSha1 = 1;
	public const X509SubjectKeyIdentifierHashAlgorithm CapiSha1 = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xBD0B4C Offset: 0xBD0B4C VA: 0xBD0B4C
public enum X509VerificationFlags // TypeDefIndex: 1676
{
	// Fields
	public int value__; // 0x0
	public const X509VerificationFlags NoFlag = 0;
	public const X509VerificationFlags IgnoreNotTimeValid = 1;
	public const X509VerificationFlags IgnoreCtlNotTimeValid = 2;
	public const X509VerificationFlags IgnoreNotTimeNested = 4;
	public const X509VerificationFlags IgnoreInvalidBasicConstraints = 8;
	public const X509VerificationFlags AllowUnknownCertificateAuthority = 16;
	public const X509VerificationFlags IgnoreWrongUsage = 32;
	public const X509VerificationFlags IgnoreInvalidName = 64;
	public const X509VerificationFlags IgnoreInvalidPolicy = 128;
	public const X509VerificationFlags IgnoreEndRevocationUnknown = 256;
	public const X509VerificationFlags IgnoreCtlSignerRevocationUnknown = 512;
	public const X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown = 1024;
	public const X509VerificationFlags IgnoreRootRevocationUnknown = 2048;
	public const X509VerificationFlags AllFlags = 4095;
}

// Namespace: System.Security.Cryptography
internal enum AsnDecodeStatus // TypeDefIndex: 1677
{
	// Fields
	public int value__; // 0x0
	public const AsnDecodeStatus NotDecoded = -1;
	public const AsnDecodeStatus Ok = 0;
	public const AsnDecodeStatus BadAsn = 1;
	public const AsnDecodeStatus BadTag = 2;
	public const AsnDecodeStatus BadLength = 3;
	public const AsnDecodeStatus InformationNotAvailable = 4;
}

// Namespace: System.Security.Cryptography
public class AsnEncodedData // TypeDefIndex: 1678
{
	// Fields
	internal Oid _oid; // 0x10
	internal byte[] _raw; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBD100C Offset: 0xBD100C VA: 0xBD100C
	private static Dictionary<string, int> <>f__switch$mapA; // 0x0

	// Properties
	public Oid Oid { get; set; }
	public byte[] RawData { get; set; }

	// Methods

	// RVA: 0x22F83A8 Offset: 0x22F83A8 VA: 0x22F83A8
	protected void .ctor() { }

	// RVA: 0x22F83B0 Offset: 0x22F83B0 VA: 0x22F83B0
	public void .ctor(string oid, byte[] rawData) { }

	// RVA: 0x22F8600 Offset: 0x22F8600 VA: 0x22F8600
	public void .ctor(Oid oid, byte[] rawData) { }

	// RVA: 0x22F86C0 Offset: 0x22F86C0 VA: 0x22F86C0
	public void .ctor(AsnEncodedData asnEncodedData) { }

	// RVA: 0x22F8848 Offset: 0x22F8848 VA: 0x22F8848
	public void .ctor(byte[] rawData) { }

	// RVA: 0x22F8878 Offset: 0x22F8878 VA: 0x22F8878
	public Oid get_Oid() { }

	// RVA: 0x22F8648 Offset: 0x22F8648 VA: 0x22F8648
	public void set_Oid(Oid value) { }

	// RVA: 0x22F8880 Offset: 0x22F8880 VA: 0x22F8880
	public byte[] get_RawData() { }

	// RVA: 0x22F84E8 Offset: 0x22F84E8 VA: 0x22F84E8
	public void set_RawData(byte[] value) { }

	// RVA: 0x22F8888 Offset: 0x22F8888 VA: 0x22F8888 Slot: 4
	public virtual void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x22F8980 Offset: 0x22F8980 VA: 0x22F8980 Slot: 5
	public virtual string Format(bool multiLine) { }

	// RVA: 0x22F8BA0 Offset: 0x22F8BA0 VA: 0x22F8BA0 Slot: 6
	internal virtual string ToString(bool multiLine) { }

	// RVA: 0x22F8A40 Offset: 0x22F8A40 VA: 0x22F8A40
	internal string Default(bool multiLine) { }

	// RVA: 0x22F8E88 Offset: 0x22F8E88 VA: 0x22F8E88
	internal string BasicConstraintsExtension(bool multiLine) { }

	// RVA: 0x22F8FB4 Offset: 0x22F8FB4 VA: 0x22F8FB4
	internal string EnhancedKeyUsageExtension(bool multiLine) { }

	// RVA: 0x22F90E0 Offset: 0x22F90E0 VA: 0x22F90E0
	internal string KeyUsageExtension(bool multiLine) { }

	// RVA: 0x22F9214 Offset: 0x22F9214 VA: 0x22F9214
	internal string SubjectKeyIdentifierExtension(bool multiLine) { }

	// RVA: 0x22F9348 Offset: 0x22F9348 VA: 0x22F9348
	internal string SubjectAltName(bool multiLine) { }

	// RVA: 0x22F97E8 Offset: 0x22F97E8 VA: 0x22F97E8
	internal string NetscapeCertType(bool multiLine) { }
}

// Namespace: System.Security.Cryptography
[DefaultMemberAttribute] // RVA: 0xBD0B5C Offset: 0xBD0B5C VA: 0xBD0B5C
public sealed class AsnEncodedDataCollection : ICollection, IEnumerable // TypeDefIndex: 1679
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public AsnEncodedData Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x22FA604 Offset: 0x22FA604 VA: 0x22FA604
	public void .ctor() { }

	// RVA: 0x22FA670 Offset: 0x22FA670 VA: 0x22FA670
	public void .ctor(AsnEncodedData asnEncodedData) { }

	// RVA: 0x22FA708 Offset: 0x22FA708 VA: 0x22FA708 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x22FA758 Offset: 0x22FA758 VA: 0x22FA758 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x22FA7F8 Offset: 0x22FA7F8 VA: 0x22FA7F8 Slot: 4
	public int get_Count() { }

	// RVA: 0x22FA830 Offset: 0x22FA830 VA: 0x22FA830 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x22FA868 Offset: 0x22FA868 VA: 0x22FA868
	public AsnEncodedData get_Item(int index) { }

	// RVA: 0x22FA95C Offset: 0x22FA95C VA: 0x22FA95C Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x22FA994 Offset: 0x22FA994 VA: 0x22FA994
	public int Add(AsnEncodedData asnEncodedData) { }

	// RVA: 0x22FA9D4 Offset: 0x22FA9D4 VA: 0x22FA9D4
	public void CopyTo(AsnEncodedData[] array, int index) { }

	// RVA: 0x22FAA24 Offset: 0x22FAA24 VA: 0x22FAA24
	public AsnEncodedDataEnumerator GetEnumerator() { }

	// RVA: 0x22FAA90 Offset: 0x22FAA90 VA: 0x22FAA90
	public void Remove(AsnEncodedData asnEncodedData) { }
}

// Namespace: System.Security.Cryptography
public sealed class AsnEncodedDataEnumerator : IEnumerator // TypeDefIndex: 1680
{
	// Fields
	private AsnEncodedDataCollection _collection; // 0x10
	private int _position; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public AsnEncodedData Current { get; }

	// Methods

	// RVA: 0x22FA7C4 Offset: 0x22FA7C4 VA: 0x22FA7C4
	internal void .ctor(AsnEncodedDataCollection collection) { }

	// RVA: 0x22FAAD0 Offset: 0x22FAAD0 VA: 0x22FAAD0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x22FAB68 Offset: 0x22FAB68 VA: 0x22FAB68
	public AsnEncodedData get_Current() { }

	// RVA: 0x22FAC00 Offset: 0x22FAC00 VA: 0x22FAC00 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x22FACB8 Offset: 0x22FACB8 VA: 0x22FACB8 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography
public sealed class Oid // TypeDefIndex: 1681
{
	// Fields
	internal const string oidRSA = "1.2.840.113549.1.1.1";
	internal const string nameRSA = "RSA";
	internal const string oidPkcs7Data = "1.2.840.113549.1.7.1";
	internal const string namePkcs7Data = "PKCS 7 Data";
	internal const string oidPkcs9ContentType = "1.2.840.113549.1.9.3";
	internal const string namePkcs9ContentType = "Content Type";
	internal const string oidPkcs9MessageDigest = "1.2.840.113549.1.9.4";
	internal const string namePkcs9MessageDigest = "Message Digest";
	internal const string oidPkcs9SigningTime = "1.2.840.113549.1.9.5";
	internal const string namePkcs9SigningTime = "Signing Time";
	internal const string oidMd5 = "1.2.840.113549.2.5";
	internal const string nameMd5 = "md5";
	internal const string oid3Des = "1.2.840.113549.3.7";
	internal const string name3Des = "3des";
	internal const string oidSha1 = "1.3.14.3.2.26";
	internal const string nameSha1 = "sha1";
	internal const string oidSubjectAltName = "2.5.29.17";
	internal const string nameSubjectAltName = "Subject Alternative Name";
	internal const string oidNetscapeCertType = "2.16.840.1.113730.1.1";
	internal const string nameNetscapeCertType = "Netscape Cert Type";
	private string _value; // 0x10
	private string _name; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBD101C Offset: 0xBD101C VA: 0xBD101C
	private static Dictionary<string, int> <>f__switch$map10; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBD102C Offset: 0xBD102C VA: 0xBD102C
	private static Dictionary<string, int> <>f__switch$map11; // 0x8

	// Properties
	public string FriendlyName { get; set; }
	public string Value { get; set; }

	// Methods

	// RVA: 0x22FACC4 Offset: 0x22FACC4 VA: 0x22FACC4
	public void .ctor() { }

	// RVA: 0x22F8434 Offset: 0x22F8434 VA: 0x22F8434
	public void .ctor(string oid) { }

	// RVA: 0x22FB0D8 Offset: 0x22FB0D8 VA: 0x22FB0D8
	public void .ctor(string value, string friendlyName) { }

	// RVA: 0x22F8798 Offset: 0x22F8798 VA: 0x22F8798
	public void .ctor(Oid oid) { }

	// RVA: 0x22FB110 Offset: 0x22FB110 VA: 0x22FB110
	public string get_FriendlyName() { }

	// RVA: 0x22FB118 Offset: 0x22FB118 VA: 0x22FB118
	public void set_FriendlyName(string value) { }

	// RVA: 0x22F8E80 Offset: 0x22F8E80 VA: 0x22F8E80
	public string get_Value() { }

	// RVA: 0x22FB548 Offset: 0x22FB548 VA: 0x22FB548
	public void set_Value(string value) { }

	// RVA: 0x22FACCC Offset: 0x22FACCC VA: 0x22FACCC
	private string GetName(string oid) { }

	// RVA: 0x22FB140 Offset: 0x22FB140 VA: 0x22FB140
	private string GetValue(string name) { }
}

// Namespace: System.Security.Cryptography
[DefaultMemberAttribute] // RVA: 0xBD0B94 Offset: 0xBD0B94 VA: 0xBD0B94
public sealed class OidCollection : ICollection, IEnumerable // TypeDefIndex: 1682
{
	// Fields
	private ArrayList _list; // 0x10
	private bool _readOnly; // 0x18

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public Oid Item { get; }
	public Oid Item { get; }
	public object SyncRoot { get; }
	internal bool ReadOnly { get; set; }

	// Methods

	// RVA: 0x22FB570 Offset: 0x22FB570 VA: 0x22FB570
	public void .ctor() { }

	// RVA: 0x22FB5DC Offset: 0x22FB5DC VA: 0x22FB5DC Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x22FB62C Offset: 0x22FB62C VA: 0x22FB62C Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x22FB6CC Offset: 0x22FB6CC VA: 0x22FB6CC Slot: 4
	public int get_Count() { }

	// RVA: 0x22FB704 Offset: 0x22FB704 VA: 0x22FB704 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x22FB73C Offset: 0x22FB73C VA: 0x22FB73C
	public Oid get_Item(int index) { }

	// RVA: 0x22FB814 Offset: 0x22FB814 VA: 0x22FB814
	public Oid get_Item(string oid) { }

	// RVA: 0x22FBB5C Offset: 0x22FBB5C VA: 0x22FBB5C Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x22FBB94 Offset: 0x22FBB94 VA: 0x22FBB94
	public int Add(Oid oid) { }

	// RVA: 0x22FBBEC Offset: 0x22FBBEC VA: 0x22FBBEC
	public void CopyTo(Oid[] array, int index) { }

	// RVA: 0x22FBC3C Offset: 0x22FBC3C VA: 0x22FBC3C
	public OidEnumerator GetEnumerator() { }

	// RVA: 0x22FBCA8 Offset: 0x22FBCA8 VA: 0x22FBCA8
	internal bool get_ReadOnly() { }

	// RVA: 0x22FBCB0 Offset: 0x22FBCB0 VA: 0x22FBCB0
	internal void set_ReadOnly(bool value) { }

	// RVA: 0x22FBCBC Offset: 0x22FBCBC VA: 0x22FBCBC
	internal OidCollection ReadOnlyCopy() { }
}

// Namespace: System.Security.Cryptography
public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1683
{
	// Fields
	private OidCollection _collection; // 0x10
	private int _position; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public Oid Current { get; }

	// Methods

	// RVA: 0x22FB698 Offset: 0x22FB698 VA: 0x22FB698
	internal void .ctor(OidCollection collection) { }

	// RVA: 0x22FBFA8 Offset: 0x22FBFA8 VA: 0x22FBFA8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x22FC040 Offset: 0x22FC040 VA: 0x22FC040
	public Oid get_Current() { }

	// RVA: 0x22FC0D8 Offset: 0x22FC0D8 VA: 0x22FC0D8 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x22FC190 Offset: 0x22FC190 VA: 0x22FC190 Slot: 6
	public void Reset() { }
}

// Namespace: System.Text.RegularExpressions
internal abstract class BaseMachine : IMachine // TypeDefIndex: 1684
{
	// Fields
	protected bool needs_groups_or_captures; // 0x10

	// Methods

	// RVA: 0x2034094 Offset: 0x2034094 VA: 0x2034094
	protected void .ctor() { }

	// RVA: 0x20340A4 Offset: 0x20340A4 VA: 0x20340A4 Slot: 6
	public virtual string Replace(Regex regex, string input, string replacement, int count, int startat) { }

	// RVA: 0x2034850 Offset: 0x2034850 VA: 0x2034850 Slot: 7
	public virtual Match Scan(Regex regex, string text, int start, int end) { }

	// RVA: 0x20348C4 Offset: 0x20348C4 VA: 0x20348C4
	internal string LTRReplace(Regex regex, string input, BaseMachine.MatchAppendEvaluator evaluator, int count, int startat) { }

	// RVA: 0x20345D4 Offset: 0x20345D4 VA: 0x20345D4
	internal string LTRReplace(Regex regex, string input, BaseMachine.MatchAppendEvaluator evaluator, int count, int startat, bool needs_groups_or_captures) { }

	// RVA: 0x203426C Offset: 0x203426C VA: 0x203426C
	internal string RTLReplace(Regex regex, string input, MatchEvaluator evaluator, int count, int startat) { }
}

// Namespace: 
internal sealed class BaseMachine.MatchAppendEvaluator : MulticastDelegate // TypeDefIndex: 1685
{
	// Methods

	// RVA: 0x20345B4 Offset: 0x20345B4 VA: 0x20345B4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x20348DC Offset: 0x20348DC VA: 0x20348DC Slot: 11
	public virtual void Invoke(Match match, StringBuilder sb) { }

	// RVA: 0x20351C8 Offset: 0x20351C8 VA: 0x20351C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(Match match, StringBuilder sb, AsyncCallback callback, object object) { }

	// RVA: 0x20351F8 Offset: 0x20351F8 VA: 0x20351F8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Capture // TypeDefIndex: 1686
{
	// Fields
	internal int index; // 0x10
	internal int length; // 0x14
	internal string text; // 0x18

	// Properties
	public int Index { get; }
	public int Length { get; }
	public string Value { get; }
	internal string Text { get; }

	// Methods

	// RVA: 0x2035204 Offset: 0x2035204 VA: 0x2035204
	internal void .ctor(string text) { }

	// RVA: 0x2035230 Offset: 0x2035230 VA: 0x2035230
	internal void .ctor(string text, int index, int length) { }

	// RVA: 0x20348D4 Offset: 0x20348D4 VA: 0x20348D4
	public int get_Index() { }

	// RVA: 0x2034C9C Offset: 0x2034C9C VA: 0x2034C9C
	public int get_Length() { }

	// RVA: 0x2035270 Offset: 0x2035270 VA: 0x2035270
	public string get_Value() { }

	// RVA: 0x20352F8 Offset: 0x20352F8 VA: 0x20352F8 Slot: 3
	public override string ToString() { }

	// RVA: 0x20352FC Offset: 0x20352FC VA: 0x20352FC
	internal string get_Text() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xBD0BCC Offset: 0xBD0BCC VA: 0xBD0BCC
[Serializable]
public class CaptureCollection : ICollection, IEnumerable // TypeDefIndex: 1687
{
	// Fields
	private Capture[] list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x2035304 Offset: 0x2035304 VA: 0x2035304
	internal void .ctor(int n) { }

	// RVA: 0x2035374 Offset: 0x2035374 VA: 0x2035374 Slot: 4
	public int get_Count() { }

	// RVA: 0x20353A0 Offset: 0x20353A0 VA: 0x20353A0 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x20353A8 Offset: 0x20353A8 VA: 0x20353A8
	internal void SetValue(Capture cap, int i) { }

	// RVA: 0x2035438 Offset: 0x2035438 VA: 0x2035438 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x2035440 Offset: 0x2035440 VA: 0x2035440 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x2035488 Offset: 0x2035488 VA: 0x2035488 Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Group : Capture // TypeDefIndex: 1688
{
	// Fields
	internal static Group Fail; // 0x0
	private bool success; // 0x20
	private CaptureCollection captures; // 0x28

	// Properties
	public CaptureCollection Captures { get; }
	public bool Success { get; }

	// Methods

	// RVA: 0x2036AE8 Offset: 0x2036AE8 VA: 0x2036AE8
	internal void .ctor(string text, int index, int length, int n_caps) { }

	// RVA: 0x2036B9C Offset: 0x2036B9C VA: 0x2036B9C
	internal void .ctor(string text, int index, int length) { }

	// RVA: 0x2036BE4 Offset: 0x2036BE4 VA: 0x2036BE4
	internal void .ctor() { }

	// RVA: 0x2036C84 Offset: 0x2036C84 VA: 0x2036C84
	private static void .cctor() { }

	// RVA: 0x2036CE4 Offset: 0x2036CE4 VA: 0x2036CE4
	public CaptureCollection get_Captures() { }

	// RVA: 0x20348CC Offset: 0x20348CC VA: 0x20348CC
	public bool get_Success() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xBD0C04 Offset: 0xBD0C04 VA: 0xBD0C04
[Serializable]
public class GroupCollection : ICollection, IEnumerable // TypeDefIndex: 1689
{
	// Fields
	private Group[] list; // 0x10
	private int gap; // 0x18

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
