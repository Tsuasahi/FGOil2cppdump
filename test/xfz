	public const X509ChainStatusFlags CtlNotValidForUsage = 524288;
	public const X509ChainStatusFlags OfflineRevocation = 16777216;
	public const X509ChainStatusFlags NoIssuanceChainPolicy = 33554432;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509EnhancedKeyUsageExtension : X509Extension // TypeDefIndex: 1662
{
	// Fields
	internal const string oid = "2.5.29.37";
	internal const string friendlyName = "Enhanced Key Usage";
	private OidCollection _enhKeyUsage; // 0x28
	private AsnDecodeStatus _status; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC3D114 Offset: 0xC3D114 VA: 0xC3D114
	private static Dictionary<string, int> <>f__switch$mapE; // 0x0

	// Properties
	public OidCollection EnhancedKeyUsages { get; }

	// Methods

	// RVA: 0x11356FC Offset: 0x11356FC VA: 0x11356FC
	public void .ctor() { }

	// RVA: 0x1123FFC Offset: 0x1123FFC VA: 0x1123FFC
	public void .ctor(AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }

	// RVA: 0x11359FC Offset: 0x11359FC VA: 0x11359FC
	public void .ctor(OidCollection enhancedKeyUsages, bool critical) { }

	// RVA: 0x1135C0C Offset: 0x1135C0C VA: 0x1135C0C
	public OidCollection get_EnhancedKeyUsages() { }

	// RVA: 0x1135CDC Offset: 0x1135CDC VA: 0x1135CDC Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x113578C Offset: 0x113578C VA: 0x113578C
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0x1135B08 Offset: 0x1135B08 VA: 0x1135B08
	internal byte[] Encode() { }

	// RVA: 0x11240C4 Offset: 0x11240C4 VA: 0x11240C4 Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public class X509Extension : AsnEncodedData // TypeDefIndex: 1663
{
	// Fields
	private bool _critical; // 0x20

	// Properties
	public bool Critical { get; set; }

	// Methods

	// RVA: 0x1128104 Offset: 0x1128104 VA: 0x1128104
	protected void .ctor() { }

	// RVA: 0x1135E80 Offset: 0x1135E80 VA: 0x1135E80
	public void .ctor(AsnEncodedData encodedExtension, bool critical) { }

	// RVA: 0x1135F50 Offset: 0x1135F50 VA: 0x1135F50
	public void .ctor(Oid oid, byte[] rawData, bool critical) { }

	// RVA: 0x1136020 Offset: 0x1136020 VA: 0x1136020
	public void .ctor(string oid, byte[] rawData, bool critical) { }

	// RVA: 0x112894C Offset: 0x112894C VA: 0x112894C
	public bool get_Critical() { }

	// RVA: 0x112810C Offset: 0x112810C VA: 0x112810C
	public void set_Critical(bool value) { }

	// RVA: 0x113604C Offset: 0x113604C VA: 0x113604C Slot: 4
	public override void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x1128954 Offset: 0x1128954 VA: 0x1128954
	internal string FormatUnkownData(byte[] data) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[DefaultMemberAttribute] // RVA: 0xC3CC2C Offset: 0xC3CC2C VA: 0xC3CC2C
public sealed class X509ExtensionCollection : ICollection, IEnumerable // TypeDefIndex: 1664
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }
	public X509Extension Item { get; }
	public X509Extension Item { get; }

	// Methods

	// RVA: 0x1136174 Offset: 0x1136174 VA: 0x1136174
	public void .ctor() { }

	// RVA: 0x112971C Offset: 0x112971C VA: 0x112971C
	internal void .ctor(X509Certificate cert) { }

	// RVA: 0x11361E0 Offset: 0x11361E0 VA: 0x11361E0 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x1136300 Offset: 0x1136300 VA: 0x1136300 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x112F28C Offset: 0x112F28C VA: 0x112F28C Slot: 4
	public int get_Count() { }

	// RVA: 0x1136368 Offset: 0x1136368 VA: 0x1136368 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x11363A0 Offset: 0x11363A0 VA: 0x11363A0 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x11363A4 Offset: 0x11363A4 VA: 0x11363A4
	public X509Extension get_Item(int index) { }

	// RVA: 0x112EEAC Offset: 0x112EEAC VA: 0x112EEAC
	public X509Extension get_Item(string oid) { }

	// RVA: 0x11364E0 Offset: 0x11364E0 VA: 0x11364E0
	public int Add(X509Extension extension) { }

	// RVA: 0x1136598 Offset: 0x1136598 VA: 0x1136598
	public void CopyTo(X509Extension[] array, int index) { }

	// RVA: 0x11335EC Offset: 0x11335EC VA: 0x11335EC
	public X509ExtensionEnumerator GetEnumerator() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionEnumerator : IEnumerator // TypeDefIndex: 1665
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public X509Extension Current { get; }

	// Methods

	// RVA: 0xF7812C Offset: 0xF7812C VA: 0xF7812C
	internal void .ctor(ArrayList list) { }

	// RVA: 0xF78178 Offset: 0xF78178 VA: 0xF78178 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0xF7822C Offset: 0xF7822C VA: 0xF7822C
	public X509Extension get_Current() { }

	// RVA: 0xF7836C Offset: 0xF7836C VA: 0xF7836C Slot: 5
	public bool MoveNext() { }

	// RVA: 0xF78424 Offset: 0xF78424 VA: 0xF78424 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509FindType // TypeDefIndex: 1666
{
	// Fields
	public int value__; // 0x0
	public const X509FindType FindByThumbprint = 0;
	public const X509FindType FindBySubjectName = 1;
	public const X509FindType FindBySubjectDistinguishedName = 2;
	public const X509FindType FindByIssuerName = 3;
	public const X509FindType FindByIssuerDistinguishedName = 4;
	public const X509FindType FindBySerialNumber = 5;
	public const X509FindType FindByTimeValid = 6;
	public const X509FindType FindByTimeNotYetValid = 7;
	public const X509FindType FindByTimeExpired = 8;
	public const X509FindType FindByTemplateName = 9;
	public const X509FindType FindByApplicationPolicy = 10;
	public const X509FindType FindByCertificatePolicy = 11;
	public const X509FindType FindByExtension = 12;
	public const X509FindType FindByKeyUsage = 13;
	public const X509FindType FindBySubjectKeyIdentifier = 14;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509IncludeOption // TypeDefIndex: 1667
{
	// Fields
	public int value__; // 0x0
	public const X509IncludeOption None = 0;
	public const X509IncludeOption ExcludeRoot = 1;
	public const X509IncludeOption EndCertOnly = 2;
	public const X509IncludeOption WholeChain = 3;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageExtension : X509Extension // TypeDefIndex: 1668
{
	// Fields
	internal const string oid = "2.5.29.15";
	internal const string friendlyName = "Key Usage";
	internal const X509KeyUsageFlags all = 33023;
	private X509KeyUsageFlags _keyUsages; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Properties
	public X509KeyUsageFlags KeyUsages { get; }

	// Methods

	// RVA: 0xF784DC Offset: 0xF784DC VA: 0xF784DC
	public void .ctor() { }

	// RVA: 0xF78560 Offset: 0xF78560 VA: 0xF78560
	public void .ctor(AsnEncodedData encodedKeyUsage, bool critical) { }

	// RVA: 0xF78830 Offset: 0xF78830 VA: 0xF78830
	public void .ctor(X509KeyUsageFlags keyUsages, bool critical) { }

	// RVA: 0xF78AE0 Offset: 0xF78AE0 VA: 0xF78AE0
	public X509KeyUsageFlags get_KeyUsages() { }

	// RVA: 0xF78B78 Offset: 0xF78B78 VA: 0xF78B78 Slot: 4
	public override void CopyFrom(AsnEncodedData encodedData) { }

	// RVA: 0xF788F8 Offset: 0xF788F8 VA: 0xF788F8
	internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags) { }

	// RVA: 0xF7863C Offset: 0xF7863C VA: 0xF7863C
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0xF78908 Offset: 0xF78908 VA: 0xF78908
	internal byte[] Encode() { }

	// RVA: 0xF78D44 Offset: 0xF78D44 VA: 0xF78D44 Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xC3CC64 Offset: 0xC3CC64 VA: 0xC3CC64
public enum X509KeyUsageFlags // TypeDefIndex: 1669
{
	// Fields
	public int value__; // 0x0
	public const X509KeyUsageFlags None = 0;
	public const X509KeyUsageFlags EncipherOnly = 1;
	public const X509KeyUsageFlags CrlSign = 2;
	public const X509KeyUsageFlags KeyCertSign = 4;
	public const X509KeyUsageFlags KeyAgreement = 8;
	public const X509KeyUsageFlags DataEncipherment = 16;
	public const X509KeyUsageFlags KeyEncipherment = 32;
	public const X509KeyUsageFlags NonRepudiation = 64;
	public const X509KeyUsageFlags DigitalSignature = 128;
	public const X509KeyUsageFlags DecipherOnly = 32768;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509NameType // TypeDefIndex: 1670
{
	// Fields
	public int value__; // 0x0
	public const X509NameType SimpleName = 0;
	public const X509NameType EmailName = 1;
	public const X509NameType UpnName = 2;
	public const X509NameType DnsName = 3;
	public const X509NameType DnsFromAlternativeName = 4;
	public const X509NameType UrlName = 5;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationFlag // TypeDefIndex: 1671
{
	// Fields
	public int value__; // 0x0
	public const X509RevocationFlag EndCertificateOnly = 0;
	public const X509RevocationFlag EntireChain = 1;
	public const X509RevocationFlag ExcludeRoot = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationMode // TypeDefIndex: 1672
{
	// Fields
	public int value__; // 0x0
	public const X509RevocationMode NoCheck = 0;
	public const X509RevocationMode Online = 1;
	public const X509RevocationMode Offline = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Store // TypeDefIndex: 1673
{
	// Fields
	private string _name; // 0x10
	private StoreLocation _location; // 0x18
	private X509Certificate2Collection list; // 0x20
	private OpenFlags _flags; // 0x28
	private X509Store store; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC3D124 Offset: 0xC3D124 VA: 0xC3D124
	private static Dictionary<string, int> <>f__switch$mapF; // 0x0

	// Properties
	public X509Certificate2Collection Certificates { get; }
	public StoreLocation Location { get; }
	public string Name { get; }
	private X509Stores Factory { get; }
	private bool IsOpen { get; }
	private bool IsReadOnly { get; }
	internal X509Store Store { get; }
	[MonoTODOAttribute] // RVA: 0xC3FB38 Offset: 0xC3FB38 VA: 0xC3FB38
	public IntPtr StoreHandle { get; }

	// Methods

	// RVA: 0xF793F0 Offset: 0xF793F0 VA: 0xF793F0
	public void .ctor() { }

	// RVA: 0xF794F8 Offset: 0xF794F8 VA: 0xF794F8
	public void .ctor(string storeName) { }

	// RVA: 0xF79500 Offset: 0xF79500 VA: 0xF79500
	public void .ctor(StoreName storeName) { }

	// RVA: 0xF7963C Offset: 0xF7963C VA: 0xF7963C
	public void .ctor(StoreLocation storeLocation) { }

	// RVA: 0xF79508 Offset: 0xF79508 VA: 0xF79508
	public void .ctor(StoreName storeName, StoreLocation storeLocation) { }

	[MonoTODOAttribute] // RVA: 0xC3E73C Offset: 0xC3E73C VA: 0xC3E73C
	// RVA: 0xF7969C Offset: 0xF7969C VA: 0xF7969C
	public void .ctor(IntPtr storeHandle) { }

	// RVA: 0xF79444 Offset: 0xF79444 VA: 0xF79444
	public void .ctor(string storeName, StoreLocation storeLocation) { }

	// RVA: 0xF79768 Offset: 0xF79768 VA: 0xF79768
	public X509Certificate2Collection get_Certificates() { }

	// RVA: 0xF797F0 Offset: 0xF797F0 VA: 0xF797F0
	public StoreLocation get_Location() { }

	// RVA: 0xF797F8 Offset: 0xF797F8 VA: 0xF797F8
	public string get_Name() { }

	// RVA: 0xF79800 Offset: 0xF79800 VA: 0xF79800
	private X509Stores get_Factory() { }

	// RVA: 0xF7981C Offset: 0xF7981C VA: 0xF7981C
	private bool get_IsOpen() { }

	// RVA: 0xF7982C Offset: 0xF7982C VA: 0xF7982C
	private bool get_IsReadOnly() { }

	// RVA: 0xF79868 Offset: 0xF79868 VA: 0xF79868
	internal X509Store get_Store() { }

	// RVA: 0xF79870 Offset: 0xF79870 VA: 0xF79870
	public IntPtr get_StoreHandle() { }

	// RVA: 0xF798B0 Offset: 0xF798B0 VA: 0xF798B0
	public void Add(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xC3E774 Offset: 0xC3E774 VA: 0xC3E774
	// RVA: 0xF79B44 Offset: 0xF79B44 VA: 0xF79B44
	public void AddRange(X509Certificate2Collection certificates) { }

	// RVA: 0xF79DDC Offset: 0xF79DDC VA: 0xF79DDC
	public void Close() { }

	// RVA: 0xF79DF8 Offset: 0xF79DF8 VA: 0xF79DF8
	public void Open(OpenFlags flags) { }

	// RVA: 0xF7A20C Offset: 0xF7A20C VA: 0xF7A20C
	public void Remove(X509Certificate2 certificate) { }

	[MonoTODOAttribute] // RVA: 0xC3E7AC Offset: 0xC3E7AC VA: 0xC3E7AC
	// RVA: 0xF7A400 Offset: 0xF7A400 VA: 0xF7A400
	public void RemoveRange(X509Certificate2Collection certificates) { }

	// RVA: 0xF79AA4 Offset: 0xF79AA4 VA: 0xF79AA4
	private bool Exists(X509Certificate2 certificate) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 1674
{
	// Fields
	internal const string oid = "2.5.29.14";
	internal const string friendlyName = "Subject Key Identifier";
	private byte[] _subjectKeyIdentifier; // 0x28
	private string _ski; // 0x30
	private AsnDecodeStatus _status; // 0x38

	// Properties
	public string SubjectKeyIdentifier { get; }

	// Methods

	// RVA: 0xF7A6C4 Offset: 0xF7A6C4 VA: 0xF7A6C4
	public void .ctor() { }

	// RVA: 0xF7A748 Offset: 0xF7A748 VA: 0xF7A748
	public void .ctor(AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }

	// RVA: 0xF7A9C0 Offset: 0xF7A9C0 VA: 0xF7A9C0
	public void .ctor(byte[] subjectKeyIdentifier, bool critical) { }

	// RVA: 0xF7AC04 Offset: 0xF7AC04 VA: 0xF7AC04
	public void .ctor(string subjectKeyIdentifier, bool critical) { }

	// RVA: 0xF7AE70 Offset: 0xF7AE70 VA: 0xF7AE70
	public void .ctor(PublicKey key, bool critical) { }

	// RVA: 0xF7AE7C Offset: 0xF7AE7C VA: 0xF7AE7C
	public void .ctor(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }

	// RVA: 0xF7B2F8 Offset: 0xF7B2F8 VA: 0xF7B2F8
	public string get_SubjectKeyIdentifier() { }

	// RVA: 0xF7B3A8 Offset: 0xF7B3A8 VA: 0xF7B3A8 Slot: 4
	public override void CopyFrom(AsnEncodedData encodedData) { }

	// RVA: 0xF7B574 Offset: 0xF7B574 VA: 0xF7B574
	internal static byte FromHexChar(char c) { }

	// RVA: 0xF7B5C8 Offset: 0xF7B5C8 VA: 0xF7B5C8
	internal static byte FromHexChars(char c1, char c2) { }

	// RVA: 0xF7AD50 Offset: 0xF7AD50 VA: 0xF7AD50
	internal static byte[] FromHex(string hex) { }

	// RVA: 0xF7A824 Offset: 0xF7A824 VA: 0xF7A824
	internal AsnDecodeStatus Decode(byte[] extension) { }

	// RVA: 0xF7AB84 Offset: 0xF7AB84 VA: 0xF7AB84
	internal byte[] Encode() { }

	// RVA: 0xF7B67C Offset: 0xF7B67C VA: 0xF7B67C Slot: 6
	internal override string ToString(bool multiLine) { }
}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509SubjectKeyIdentifierHashAlgorithm // TypeDefIndex: 1675
{
	// Fields
	public int value__; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm Sha1 = 0;
	public const X509SubjectKeyIdentifierHashAlgorithm ShortSha1 = 1;
	public const X509SubjectKeyIdentifierHashAlgorithm CapiSha1 = 2;
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xC3CC74 Offset: 0xC3CC74 VA: 0xC3CC74
public enum X509VerificationFlags // TypeDefIndex: 1676
{
	// Fields
	public int value__; // 0x0
	public const X509VerificationFlags NoFlag = 0;
	public const X509VerificationFlags IgnoreNotTimeValid = 1;
	public const X509VerificationFlags IgnoreCtlNotTimeValid = 2;
	public const X509VerificationFlags IgnoreNotTimeNested = 4;
	public const X509VerificationFlags IgnoreInvalidBasicConstraints = 8;
	public const X509VerificationFlags AllowUnknownCertificateAuthority = 16;
	public const X509VerificationFlags IgnoreWrongUsage = 32;
	public const X509VerificationFlags IgnoreInvalidName = 64;
	public const X509VerificationFlags IgnoreInvalidPolicy = 128;
	public const X509VerificationFlags IgnoreEndRevocationUnknown = 256;
	public const X509VerificationFlags IgnoreCtlSignerRevocationUnknown = 512;
	public const X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown = 1024;
	public const X509VerificationFlags IgnoreRootRevocationUnknown = 2048;
	public const X509VerificationFlags AllFlags = 4095;
}

// Namespace: System.Security.Cryptography
internal enum AsnDecodeStatus // TypeDefIndex: 1677
{
	// Fields
	public int value__; // 0x0
	public const AsnDecodeStatus NotDecoded = -1;
	public const AsnDecodeStatus Ok = 0;
	public const AsnDecodeStatus BadAsn = 1;
	public const AsnDecodeStatus BadTag = 2;
	public const AsnDecodeStatus BadLength = 3;
	public const AsnDecodeStatus InformationNotAvailable = 4;
}

// Namespace: System.Security.Cryptography
public class AsnEncodedData // TypeDefIndex: 1678
{
	// Fields
	internal Oid _oid; // 0x10
	internal byte[] _raw; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC3D134 Offset: 0xC3D134 VA: 0xC3D134
	private static Dictionary<string, int> <>f__switch$mapA; // 0x0

	// Properties
	public Oid Oid { get; set; }
	public byte[] RawData { get; set; }

	// Methods

	// RVA: 0x11222B0 Offset: 0x11222B0 VA: 0x11222B0
	protected void .ctor() { }

	// RVA: 0x11222B8 Offset: 0x11222B8 VA: 0x11222B8
	public void .ctor(string oid, byte[] rawData) { }

	// RVA: 0x1122508 Offset: 0x1122508 VA: 0x1122508
	public void .ctor(Oid oid, byte[] rawData) { }

	// RVA: 0x11225C8 Offset: 0x11225C8 VA: 0x11225C8
	public void .ctor(AsnEncodedData asnEncodedData) { }

	// RVA: 0x1122750 Offset: 0x1122750 VA: 0x1122750
	public void .ctor(byte[] rawData) { }

	// RVA: 0x1122780 Offset: 0x1122780 VA: 0x1122780
	public Oid get_Oid() { }

	// RVA: 0x1122550 Offset: 0x1122550 VA: 0x1122550
	public void set_Oid(Oid value) { }

	// RVA: 0x1122788 Offset: 0x1122788 VA: 0x1122788
	public byte[] get_RawData() { }

	// RVA: 0x11223F0 Offset: 0x11223F0 VA: 0x11223F0
	public void set_RawData(byte[] value) { }

	// RVA: 0x1122790 Offset: 0x1122790 VA: 0x1122790 Slot: 4
	public virtual void CopyFrom(AsnEncodedData asnEncodedData) { }

	// RVA: 0x1122888 Offset: 0x1122888 VA: 0x1122888 Slot: 5
	public virtual string Format(bool multiLine) { }

	// RVA: 0x1122AA8 Offset: 0x1122AA8 VA: 0x1122AA8 Slot: 6
	internal virtual string ToString(bool multiLine) { }

	// RVA: 0x1122948 Offset: 0x1122948 VA: 0x1122948
	internal string Default(bool multiLine) { }

	// RVA: 0x1122D90 Offset: 0x1122D90 VA: 0x1122D90
	internal string BasicConstraintsExtension(bool multiLine) { }

	// RVA: 0x1122EBC Offset: 0x1122EBC VA: 0x1122EBC
	internal string EnhancedKeyUsageExtension(bool multiLine) { }

	// RVA: 0x1122FE8 Offset: 0x1122FE8 VA: 0x1122FE8
	internal string KeyUsageExtension(bool multiLine) { }

	// RVA: 0x112311C Offset: 0x112311C VA: 0x112311C
	internal string SubjectKeyIdentifierExtension(bool multiLine) { }

	// RVA: 0x1123250 Offset: 0x1123250 VA: 0x1123250
	internal string SubjectAltName(bool multiLine) { }

	// RVA: 0x11236F0 Offset: 0x11236F0 VA: 0x11236F0
	internal string NetscapeCertType(bool multiLine) { }
}

// Namespace: System.Security.Cryptography
[DefaultMemberAttribute] // RVA: 0xC3CC84 Offset: 0xC3CC84 VA: 0xC3CC84
public sealed class AsnEncodedDataCollection : ICollection, IEnumerable // TypeDefIndex: 1679
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public AsnEncodedData Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x112450C Offset: 0x112450C VA: 0x112450C
	public void .ctor() { }

	// RVA: 0x1124578 Offset: 0x1124578 VA: 0x1124578
	public void .ctor(AsnEncodedData asnEncodedData) { }

	// RVA: 0x1124610 Offset: 0x1124610 VA: 0x1124610 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x1124660 Offset: 0x1124660 VA: 0x1124660 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1124700 Offset: 0x1124700 VA: 0x1124700 Slot: 4
	public int get_Count() { }

	// RVA: 0x1124738 Offset: 0x1124738 VA: 0x1124738 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x1124770 Offset: 0x1124770 VA: 0x1124770
	public AsnEncodedData get_Item(int index) { }

	// RVA: 0x1124864 Offset: 0x1124864 VA: 0x1124864 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x112489C Offset: 0x112489C VA: 0x112489C
	public int Add(AsnEncodedData asnEncodedData) { }

	// RVA: 0x11248DC Offset: 0x11248DC VA: 0x11248DC
	public void CopyTo(AsnEncodedData[] array, int index) { }

	// RVA: 0x112492C Offset: 0x112492C VA: 0x112492C
	public AsnEncodedDataEnumerator GetEnumerator() { }

	// RVA: 0x1124998 Offset: 0x1124998 VA: 0x1124998
	public void Remove(AsnEncodedData asnEncodedData) { }
}

// Namespace: System.Security.Cryptography
public sealed class AsnEncodedDataEnumerator : IEnumerator // TypeDefIndex: 1680
{
	// Fields
	private AsnEncodedDataCollection _collection; // 0x10
	private int _position; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public AsnEncodedData Current { get; }

	// Methods

	// RVA: 0x11246CC Offset: 0x11246CC VA: 0x11246CC
	internal void .ctor(AsnEncodedDataCollection collection) { }

	// RVA: 0x11249D8 Offset: 0x11249D8 VA: 0x11249D8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x1124A70 Offset: 0x1124A70 VA: 0x1124A70
	public AsnEncodedData get_Current() { }

	// RVA: 0x1124B08 Offset: 0x1124B08 VA: 0x1124B08 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1124BC0 Offset: 0x1124BC0 VA: 0x1124BC0 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Cryptography
public sealed class Oid // TypeDefIndex: 1681
{
	// Fields
	internal const string oidRSA = "1.2.840.113549.1.1.1";
	internal const string nameRSA = "RSA";
	internal const string oidPkcs7Data = "1.2.840.113549.1.7.1";
	internal const string namePkcs7Data = "PKCS 7 Data";
	internal const string oidPkcs9ContentType = "1.2.840.113549.1.9.3";
	internal const string namePkcs9ContentType = "Content Type";
	internal const string oidPkcs9MessageDigest = "1.2.840.113549.1.9.4";
	internal const string namePkcs9MessageDigest = "Message Digest";
	internal const string oidPkcs9SigningTime = "1.2.840.113549.1.9.5";
	internal const string namePkcs9SigningTime = "Signing Time";
	internal const string oidMd5 = "1.2.840.113549.2.5";
	internal const string nameMd5 = "md5";
	internal const string oid3Des = "1.2.840.113549.3.7";
	internal const string name3Des = "3des";
	internal const string oidSha1 = "1.3.14.3.2.26";
	internal const string nameSha1 = "sha1";
	internal const string oidSubjectAltName = "2.5.29.17";
	internal const string nameSubjectAltName = "Subject Alternative Name";
	internal const string oidNetscapeCertType = "2.16.840.1.113730.1.1";
	internal const string nameNetscapeCertType = "Netscape Cert Type";
	private string _value; // 0x10
	private string _name; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC3D144 Offset: 0xC3D144 VA: 0xC3D144
	private static Dictionary<string, int> <>f__switch$map10; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC3D154 Offset: 0xC3D154 VA: 0xC3D154
	private static Dictionary<string, int> <>f__switch$map11; // 0x8

	// Properties
	public string FriendlyName { get; set; }
	public string Value { get; set; }

	// Methods

	// RVA: 0x1124BCC Offset: 0x1124BCC VA: 0x1124BCC
	public void .ctor() { }

	// RVA: 0x112233C Offset: 0x112233C VA: 0x112233C
	public void .ctor(string oid) { }

	// RVA: 0x1124FE0 Offset: 0x1124FE0 VA: 0x1124FE0
	public void .ctor(string value, string friendlyName) { }

	// RVA: 0x11226A0 Offset: 0x11226A0 VA: 0x11226A0
	public void .ctor(Oid oid) { }

	// RVA: 0x1125018 Offset: 0x1125018 VA: 0x1125018
	public string get_FriendlyName() { }

	// RVA: 0x1125020 Offset: 0x1125020 VA: 0x1125020
	public void set_FriendlyName(string value) { }

	// RVA: 0x1122D88 Offset: 0x1122D88 VA: 0x1122D88
	public string get_Value() { }

	// RVA: 0x1125450 Offset: 0x1125450 VA: 0x1125450
	public void set_Value(string value) { }

	// RVA: 0x1124BD4 Offset: 0x1124BD4 VA: 0x1124BD4
	private string GetName(string oid) { }

	// RVA: 0x1125048 Offset: 0x1125048 VA: 0x1125048
	private string GetValue(string name) { }
}

// Namespace: System.Security.Cryptography
[DefaultMemberAttribute] // RVA: 0xC3CCBC Offset: 0xC3CCBC VA: 0xC3CCBC
public sealed class OidCollection : ICollection, IEnumerable // TypeDefIndex: 1682
{
	// Fields
	private ArrayList _list; // 0x10
	private bool _readOnly; // 0x18

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public Oid Item { get; }
	public Oid Item { get; }
	public object SyncRoot { get; }
	internal bool ReadOnly { get; set; }

	// Methods

	// RVA: 0x1125478 Offset: 0x1125478 VA: 0x1125478
	public void .ctor() { }

	// RVA: 0x11254E4 Offset: 0x11254E4 VA: 0x11254E4 Slot: 7
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x1125534 Offset: 0x1125534 VA: 0x1125534 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x11255D4 Offset: 0x11255D4 VA: 0x11255D4 Slot: 4
	public int get_Count() { }

	// RVA: 0x112560C Offset: 0x112560C VA: 0x112560C Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0x1125644 Offset: 0x1125644 VA: 0x1125644
	public Oid get_Item(int index) { }

	// RVA: 0x112571C Offset: 0x112571C VA: 0x112571C
	public Oid get_Item(string oid) { }

	// RVA: 0x1125A64 Offset: 0x1125A64 VA: 0x1125A64 Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0x1125A9C Offset: 0x1125A9C VA: 0x1125A9C
	public int Add(Oid oid) { }

	// RVA: 0x1125AF4 Offset: 0x1125AF4 VA: 0x1125AF4
	public void CopyTo(Oid[] array, int index) { }

	// RVA: 0x1125B44 Offset: 0x1125B44 VA: 0x1125B44
	public OidEnumerator GetEnumerator() { }

	// RVA: 0x1125BB0 Offset: 0x1125BB0 VA: 0x1125BB0
	internal bool get_ReadOnly() { }

	// RVA: 0x1125BB8 Offset: 0x1125BB8 VA: 0x1125BB8
	internal void set_ReadOnly(bool value) { }

	// RVA: 0x1125BC4 Offset: 0x1125BC4 VA: 0x1125BC4
	internal OidCollection ReadOnlyCopy() { }
}

// Namespace: System.Security.Cryptography
public sealed class OidEnumerator : IEnumerator // TypeDefIndex: 1683
{
	// Fields
	private OidCollection _collection; // 0x10
	private int _position; // 0x18

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public Oid Current { get; }

	// Methods

	// RVA: 0x11255A0 Offset: 0x11255A0 VA: 0x11255A0
	internal void .ctor(OidCollection collection) { }

	// RVA: 0x1125EB0 Offset: 0x1125EB0 VA: 0x1125EB0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x1125F48 Offset: 0x1125F48 VA: 0x1125F48
	public Oid get_Current() { }

	// RVA: 0x1125FE0 Offset: 0x1125FE0 VA: 0x1125FE0 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1126098 Offset: 0x1126098 VA: 0x1126098 Slot: 6
	public void Reset() { }
}

// Namespace: System.Text.RegularExpressions
internal abstract class BaseMachine : IMachine // TypeDefIndex: 1684
{
	// Fields
	protected bool needs_groups_or_captures; // 0x10

	// Methods

	// RVA: 0xF7B968 Offset: 0xF7B968 VA: 0xF7B968
	protected void .ctor() { }

	// RVA: 0xF7B978 Offset: 0xF7B978 VA: 0xF7B978 Slot: 6
	public virtual string Replace(Regex regex, string input, string replacement, int count, int startat) { }

	// RVA: 0xF7C124 Offset: 0xF7C124 VA: 0xF7C124 Slot: 7
	public virtual Match Scan(Regex regex, string text, int start, int end) { }

	// RVA: 0xF7C198 Offset: 0xF7C198 VA: 0xF7C198
	internal string LTRReplace(Regex regex, string input, BaseMachine.MatchAppendEvaluator evaluator, int count, int startat) { }

	// RVA: 0xF7BEA8 Offset: 0xF7BEA8 VA: 0xF7BEA8
	internal string LTRReplace(Regex regex, string input, BaseMachine.MatchAppendEvaluator evaluator, int count, int startat, bool needs_groups_or_captures) { }

	// RVA: 0xF7BB40 Offset: 0xF7BB40 VA: 0xF7BB40
	internal string RTLReplace(Regex regex, string input, MatchEvaluator evaluator, int count, int startat) { }
}

// Namespace: 
internal sealed class BaseMachine.MatchAppendEvaluator : MulticastDelegate // TypeDefIndex: 1685
{
	// Methods

	// RVA: 0xF7BE88 Offset: 0xF7BE88 VA: 0xF7BE88
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF7C1B0 Offset: 0xF7C1B0 VA: 0xF7C1B0 Slot: 11
	public virtual void Invoke(Match match, StringBuilder sb) { }

	// RVA: 0xF7CA9C Offset: 0xF7CA9C VA: 0xF7CA9C Slot: 12
	public virtual IAsyncResult BeginInvoke(Match match, StringBuilder sb, AsyncCallback callback, object object) { }

	// RVA: 0xF7CACC Offset: 0xF7CACC VA: 0xF7CACC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Capture // TypeDefIndex: 1686
{
	// Fields
	internal int index; // 0x10
	internal int length; // 0x14
	internal string text; // 0x18

	// Properties
	public int Index { get; }
	public int Length { get; }
	public string Value { get; }
	internal string Text { get; }

	// Methods

	// RVA: 0xF7CAD8 Offset: 0xF7CAD8 VA: 0xF7CAD8
	internal void .ctor(string text) { }

	// RVA: 0xF7CB04 Offset: 0xF7CB04 VA: 0xF7CB04
	internal void .ctor(string text, int index, int length) { }

	// RVA: 0xF7C1A8 Offset: 0xF7C1A8 VA: 0xF7C1A8
	public int get_Index() { }

	// RVA: 0xF7C570 Offset: 0xF7C570 VA: 0xF7C570
	public int get_Length() { }

	// RVA: 0xF7CB44 Offset: 0xF7CB44 VA: 0xF7CB44
	public string get_Value() { }

	// RVA: 0xF7CBCC Offset: 0xF7CBCC VA: 0xF7CBCC Slot: 3
	public override string ToString() { }

	// RVA: 0xF7CBD0 Offset: 0xF7CBD0 VA: 0xF7CBD0
	internal string get_Text() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xC3CCF4 Offset: 0xC3CCF4 VA: 0xC3CCF4
[Serializable]
public class CaptureCollection : ICollection, IEnumerable // TypeDefIndex: 1687
{
	// Fields
	private Capture[] list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0xF7CBD8 Offset: 0xF7CBD8 VA: 0xF7CBD8
	internal void .ctor(int n) { }

	// RVA: 0xF7CC48 Offset: 0xF7CC48 VA: 0xF7CC48 Slot: 4
	public int get_Count() { }

	// RVA: 0xF7CC74 Offset: 0xF7CC74 VA: 0xF7CC74 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0xF7CC7C Offset: 0xF7CC7C VA: 0xF7CC7C
	internal void SetValue(Capture cap, int i) { }

	// RVA: 0xF7CD0C Offset: 0xF7CD0C VA: 0xF7CD0C Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0xF7CD14 Offset: 0xF7CD14 VA: 0xF7CD14 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0xF7CD5C Offset: 0xF7CD5C VA: 0xF7CD5C Slot: 8
	public IEnumerator GetEnumerator() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Group : Capture // TypeDefIndex: 1688
{
	// Fields
	internal static Group Fail; // 0x0
	private bool success; // 0x20
	private CaptureCollection captures; // 0x28

	// Properties
	public CaptureCollection Captures { get; }
	public bool Success { get; }

	// Methods

	// RVA: 0xF7E3BC Offset: 0xF7E3BC VA: 0xF7E3BC
	internal void .ctor(string text, int index, int length, int n_caps) { }

	// RVA: 0xF7E470 Offset: 0xF7E470 VA: 0xF7E470
	internal void .ctor(string text, int index, int length) { }

	// RVA: 0xF7E4B8 Offset: 0xF7E4B8 VA: 0xF7E4B8
	internal void .ctor() { }

	// RVA: 0xF7E558 Offset: 0xF7E558 VA: 0xF7E558
	private static void .cctor() { }

	// RVA: 0xF7E5B8 Offset: 0xF7E5B8 VA: 0xF7E5B8
	public CaptureCollection get_Captures() { }

	// RVA: 0xF7C1A0 Offset: 0xF7C1A0 VA: 0xF7C1A0
	public bool get_Success() { }
}

// Namespace: System.Text.RegularExpressions
[DefaultMemberAttribute] // RVA: 0xC3CD2C Offset: 0xC3CD2C VA: 0xC3CD2C
[Serializable]
public class GroupCollection : ICollection, IEnumerable // TypeDefIndex: 1689
{
	// Fields
	private Group[] list; // 0x10
	private int gap; // 0x18

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public Group Item { get; }
	public Group Item { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0xF7E5C0 Offset: 0xF7E5C0 VA: 0xF7E5C0
	internal void .ctor(int n, int gap) { }

	// RVA: 0xF7E638 Offset: 0xF7E638 VA: 0xF7E638 Slot: 4
	public int get_Count() { }

	// RVA: 0xF7E664 Offset: 0xF7E664 VA: 0xF7E664 Slot: 5
	public bool get_IsSynchronized() { }

	// RVA: 0xF7E66C Offset: 0xF7E66C VA: 0xF7E66C
	public Group get_Item(int i) { }

	// RVA: 0xF7E94C Offset: 0xF7E94C VA: 0xF7E94C
	internal void SetValue(Group g, int i) { }

	// RVA: 0xF7E9DC Offset: 0xF7E9DC VA: 0xF7E9DC
	public Group get_Item(string groupName) { }

	// RVA: 0xF7ECFC Offset: 0xF7ECFC VA: 0xF7ECFC Slot: 6
	public object get_SyncRoot() { }

	// RVA: 0xF7ED04 Offset: 0xF7ED04 VA: 0xF7ED04 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0xF7ED4C Offset: 0xF7ED4C VA: 0xF7ED4C Slot: 8
	public IEnumerator GetEnumerator() { }
}
