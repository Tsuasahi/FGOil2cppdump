	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback cb, object state) { }

	// RVA: 0x2232F74 Offset: 0x2232F74 VA: 0x2232F74 Slot: 27
	public override int EndRead(IAsyncResult r) { }

	// RVA: 0x223334C Offset: 0x223334C VA: 0x223334C
	private void WriteRequestAsyncCB(IAsyncResult r) { }

	// RVA: 0x2233670 Offset: 0x2233670 VA: 0x2233670 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback cb, object state) { }

	// RVA: 0x2233DD4 Offset: 0x2233DD4 VA: 0x2233DD4
	private void CheckWriteOverflow(long contentLength, long totalWritten, long size) { }

	// RVA: 0x22343A0 Offset: 0x22343A0 VA: 0x22343A0 Slot: 28
	public override void EndWrite(IAsyncResult r) { }

	// RVA: 0x2234760 Offset: 0x2234760 VA: 0x2234760 Slot: 23
	public override void Write(byte[] buffer, int offset, int size) { }

	// RVA: 0x2234968 Offset: 0x2234968 VA: 0x2234968 Slot: 18
	public override void Flush() { }

	// RVA: 0x223496C Offset: 0x223496C VA: 0x223496C
	internal void SetHeaders(byte[] buffer) { }

	// RVA: 0x2234CC8 Offset: 0x2234CC8 VA: 0x2234CC8
	internal bool get_RequestWritten() { }

	// RVA: 0x2233EB0 Offset: 0x2233EB0 VA: 0x2233EB0
	private IAsyncResult WriteRequestAsync(AsyncCallback cb, object state) { }

	// RVA: 0x2234B90 Offset: 0x2234B90 VA: 0x2234B90
	private void WriteHeaders() { }

	// RVA: 0x2233F88 Offset: 0x2233F88 VA: 0x2233F88
	internal void WriteRequest() { }

	// RVA: 0x2234CD0 Offset: 0x2234CD0 VA: 0x2234CD0
	internal void InternalClose() { }

	// RVA: 0x2234CDC Offset: 0x2234CDC VA: 0x2234CDC Slot: 13
	public override void Close() { }

	// RVA: 0x2233668 Offset: 0x2233668 VA: 0x2233668
	internal void KillBuffer() { }

	// RVA: 0x2234F8C Offset: 0x2234F8C VA: 0x2234F8C Slot: 21
	public override long Seek(long a, SeekOrigin b) { }

	// RVA: 0x2234FF4 Offset: 0x2234FF4 VA: 0x2234FF4 Slot: 22
	public override void SetLength(long a) { }

	// RVA: 0x223505C Offset: 0x223505C VA: 0x223505C Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2235064 Offset: 0x2235064 VA: 0x2235064 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2235084 Offset: 0x2235084 VA: 0x2235084 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x22350A4 Offset: 0x22350A4 VA: 0x22350A4 Slot: 9
	public override long get_Length() { }

	// RVA: 0x223510C Offset: 0x223510C VA: 0x223510C Slot: 10
	public override long get_Position() { }

	// RVA: 0x2235174 Offset: 0x2235174 VA: 0x2235174 Slot: 11
	public override void set_Position(long value) { }
}

// Namespace: System.Net
[Serializable]
public class WebException : InvalidOperationException, ISerializable // TypeDefIndex: 1622
{
	// Fields
	private WebResponse response; // 0x60
	private WebExceptionStatus status; // 0x68

	// Properties
	public WebResponse Response { get; }
	public WebExceptionStatus Status { get; }

	// Methods

	// RVA: 0x22EF54C Offset: 0x22EF54C VA: 0x22EF54C
	public void .ctor() { }

	// RVA: 0x22EF55C Offset: 0x22EF55C VA: 0x22EF55C
	public void .ctor(string message) { }

	// RVA: 0x22EF56C Offset: 0x22EF56C VA: 0x22EF56C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22EF57C Offset: 0x22EF57C VA: 0x22EF57C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x22EF58C Offset: 0x22EF58C VA: 0x22EF58C
	public void .ctor(string message, WebExceptionStatus status) { }

	// RVA: 0x22EF5C0 Offset: 0x22EF5C0 VA: 0x22EF5C0
	internal void .ctor(string message, Exception innerException, WebExceptionStatus status) { }

	// RVA: 0x22EF5F4 Offset: 0x22EF5F4 VA: 0x22EF5F4
	public void .ctor(string message, Exception innerException, WebExceptionStatus status, WebResponse response) { }

	// RVA: 0x22EF638 Offset: 0x22EF638 VA: 0x22EF638 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x22EF640 Offset: 0x22EF640 VA: 0x22EF640
	public WebResponse get_Response() { }

	// RVA: 0x22EF648 Offset: 0x22EF648 VA: 0x22EF648
	public WebExceptionStatus get_Status() { }

	// RVA: 0x22EF650 Offset: 0x22EF650 VA: 0x22EF650 Slot: 10
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
public enum WebExceptionStatus // TypeDefIndex: 1623
{
	// Fields
	public int value__; // 0x0
	public const WebExceptionStatus Success = 0;
	public const WebExceptionStatus NameResolutionFailure = 1;
	public const WebExceptionStatus ConnectFailure = 2;
	public const WebExceptionStatus ReceiveFailure = 3;
	public const WebExceptionStatus SendFailure = 4;
	public const WebExceptionStatus PipelineFailure = 5;
	public const WebExceptionStatus RequestCanceled = 6;
	public const WebExceptionStatus ProtocolError = 7;
	public const WebExceptionStatus ConnectionClosed = 8;
	public const WebExceptionStatus TrustFailure = 9;
	public const WebExceptionStatus SecureChannelFailure = 10;
	public const WebExceptionStatus ServerProtocolViolation = 11;
	public const WebExceptionStatus KeepAliveFailure = 12;
	public const WebExceptionStatus Pending = 13;
	public const WebExceptionStatus Timeout = 14;
	public const WebExceptionStatus ProxyNameResolutionFailure = 15;
	public const WebExceptionStatus UnknownError = 16;
	public const WebExceptionStatus MessageLengthLimitExceeded = 17;
	public const WebExceptionStatus CacheEntryNotFound = 18;
	public const WebExceptionStatus RequestProhibitedByCachePolicy = 19;
	public const WebExceptionStatus RequestProhibitedByProxy = 20;
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xBD0910 Offset: 0xBD0910 VA: 0xBD0910
[ComVisibleAttribute] // RVA: 0xBD0910 Offset: 0xBD0910 VA: 0xBD0910
[Serializable]
public class WebHeaderCollection : NameValueCollection, ISerializable // TypeDefIndex: 1624
{
	// Fields
	private static readonly Hashtable restricted; // 0x0
	private static readonly Hashtable multiValue; // 0x8
	private static readonly Dictionary<string, bool> restricted_response; // 0x10
	private bool internallyCreated; // 0x68
	private static bool[] allowed_chars; // 0x18

	// Properties
	public override string[] AllKeys { get; }
	public override int Count { get; }
	public override NameObjectCollectionBase.KeysCollection Keys { get; }
	public string Item { get; set; }
	public string Item { get; set; }

	// Methods

	// RVA: 0x22EF658 Offset: 0x22EF658 VA: 0x22EF658
	public void .ctor() { }

	// RVA: 0x22EF660 Offset: 0x22EF660 VA: 0x22EF660
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22EF950 Offset: 0x22EF950 VA: 0x22EF950
	internal void .ctor(bool internallyCreated) { }

	// RVA: 0x22EF980 Offset: 0x22EF980 VA: 0x22EF980
	private static void .cctor() { }

	// RVA: 0x22F0818 Offset: 0x22F0818 VA: 0x22F0818 Slot: 10
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F0824 Offset: 0x22F0824 VA: 0x22F0824
	public void Add(string header) { }

	// RVA: 0x22F094C Offset: 0x22F094C VA: 0x22F094C Slot: 17
	public override void Add(string name, string value) { }

	// RVA: 0x22F0BE8 Offset: 0x22F0BE8 VA: 0x22F0BE8
	protected void AddWithoutValidate(string headerName, string headerValue) { }

	// RVA: 0x22F0FC4 Offset: 0x22F0FC4 VA: 0x22F0FC4 Slot: 23
	public override string[] GetValues(string header) { }

	// RVA: 0x22F1078 Offset: 0x22F1078 VA: 0x22F1078 Slot: 22
	public override string[] GetValues(int index) { }

	// RVA: 0x22F0A50 Offset: 0x22F0A50 VA: 0x22F0A50
	public static bool IsRestricted(string headerName) { }

	// RVA: 0x22F10A0 Offset: 0x22F10A0 VA: 0x22F10A0
	public static bool IsRestricted(string headerName, bool response) { }

	// RVA: 0x22F124C Offset: 0x22F124C VA: 0x22F124C Slot: 15
	public override void OnDeserialization(object sender) { }

	// RVA: 0x22F1250 Offset: 0x22F1250 VA: 0x22F1250 Slot: 24
	public override void Remove(string name) { }

	// RVA: 0x22F1350 Offset: 0x22F1350 VA: 0x22F1350 Slot: 25
	public override void Set(string name, string value) { }

	// RVA: 0x22F1524 Offset: 0x22F1524 VA: 0x22F1524
	public byte[] ToByteArray() { }

	// RVA: 0x22F15C0 Offset: 0x22F15C0 VA: 0x22F15C0
	internal string ToStringMultiValue() { }

	// RVA: 0x22F1948 Offset: 0x22F1948 VA: 0x22F1948 Slot: 3
	public override string ToString() { }

	// RVA: 0x22F1AD8 Offset: 0x22F1AD8 VA: 0x22F1AD8 Slot: 13
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F1C2C Offset: 0x22F1C2C VA: 0x22F1C2C Slot: 16
	public override string[] get_AllKeys() { }

	// RVA: 0x22F1C34 Offset: 0x22F1C34 VA: 0x22F1C34 Slot: 14
	public override int get_Count() { }

	// RVA: 0x22F1C3C Offset: 0x22F1C3C VA: 0x22F1C3C Slot: 11
	public override NameObjectCollectionBase.KeysCollection get_Keys() { }

	// RVA: 0x22F1C44 Offset: 0x22F1C44 VA: 0x22F1C44 Slot: 19
	public override string Get(int index) { }

	// RVA: 0x22F1C4C Offset: 0x22F1C4C VA: 0x22F1C4C Slot: 20
	public override string Get(string name) { }

	// RVA: 0x22F1C54 Offset: 0x22F1C54 VA: 0x22F1C54 Slot: 21
	public override string GetKey(int index) { }

	// RVA: 0x22F1C5C Offset: 0x22F1C5C VA: 0x22F1C5C
	public void Add(HttpRequestHeader header, string value) { }

	// RVA: 0x22F1D28 Offset: 0x22F1D28 VA: 0x22F1D28
	public void Remove(HttpRequestHeader header) { }

	// RVA: 0x22F1D5C Offset: 0x22F1D5C VA: 0x22F1D5C
	public void Set(HttpRequestHeader header, string value) { }

	// RVA: 0x22F1D98 Offset: 0x22F1D98 VA: 0x22F1D98
	public void Add(HttpResponseHeader header, string value) { }

	// RVA: 0x22F1E64 Offset: 0x22F1E64 VA: 0x22F1E64
	public void Remove(HttpResponseHeader header) { }

	// RVA: 0x22F1E98 Offset: 0x22F1E98 VA: 0x22F1E98
	public void Set(HttpResponseHeader header, string value) { }

	// RVA: 0x22F1C98 Offset: 0x22F1C98 VA: 0x22F1C98
	private string RequestHeaderToString(HttpRequestHeader value) { }

	// RVA: 0x22F1ED4 Offset: 0x22F1ED4 VA: 0x22F1ED4
	public string get_Item(HttpRequestHeader hrh) { }

	// RVA: 0x22F1F08 Offset: 0x22F1F08 VA: 0x22F1F08
	public void set_Item(HttpRequestHeader hrh, string value) { }

	// RVA: 0x22F1DD4 Offset: 0x22F1DD4 VA: 0x22F1DD4
	private string ResponseHeaderToString(HttpResponseHeader value) { }

	// RVA: 0x22F1F44 Offset: 0x22F1F44 VA: 0x22F1F44
	public string get_Item(HttpResponseHeader hrh) { }

	// RVA: 0x22F1F78 Offset: 0x22F1F78 VA: 0x22F1F78
	public void set_Item(HttpResponseHeader hrh, string value) { }

	// RVA: 0x22F1FB4 Offset: 0x22F1FB4 VA: 0x22F1FB4 Slot: 18
	public override void Clear() { }

	// RVA: 0x22F1FBC Offset: 0x22F1FBC VA: 0x22F1FBC Slot: 12
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x22F1FC4 Offset: 0x22F1FC4 VA: 0x22F1FC4
	internal void SetInternal(string header) { }

	// RVA: 0x22F20EC Offset: 0x22F20EC VA: 0x22F20EC
	internal void SetInternal(string name, string value) { }

	// RVA: 0x22F2254 Offset: 0x22F2254 VA: 0x22F2254
	internal void RemoveAndAdd(string name, string value) { }

	// RVA: 0x22F2308 Offset: 0x22F2308 VA: 0x22F2308
	internal void RemoveInternal(string name) { }

	// RVA: 0x22F186C Offset: 0x22F186C VA: 0x22F186C
	internal static bool IsMultiValue(string headerName) { }

	// RVA: 0x22F0EDC Offset: 0x22F0EDC VA: 0x22F0EDC
	internal static bool IsHeaderValue(string value) { }

	// RVA: 0x22F0DC0 Offset: 0x22F0DC0 VA: 0x22F0DC0
	internal static bool IsHeaderName(string name) { }
}

// Namespace: System.Net
internal enum WebPermissionInfoType // TypeDefIndex: 1625
{
	// Fields
	public int value__; // 0x0
	public const WebPermissionInfoType InfoString = 0;
	public const WebPermissionInfoType InfoUnexecutedRegex = 1;
	public const WebPermissionInfoType InfoRegex = 2;
}

// Namespace: System.Net
internal class WebPermissionInfo // TypeDefIndex: 1626
{
	// Fields
	private WebPermissionInfoType _type; // 0x10
	private object _info; // 0x18

	// Properties
	public string Info { get; }

	// Methods

	// RVA: 0x22F2790 Offset: 0x22F2790 VA: 0x22F2790
	public void .ctor(WebPermissionInfoType type, string info) { }

	// RVA: 0x22F291C Offset: 0x22F291C VA: 0x22F291C
	public void .ctor(Regex regex) { }

	// RVA: 0x22F33D8 Offset: 0x22F33D8 VA: 0x22F33D8
	public string get_Info() { }
}

// Namespace: System.Net
[MonoTODOAttribute] // RVA: 0xBD0960 Offset: 0xBD0960 VA: 0xBD0960
[Serializable]
public sealed class WebPermission : CodeAccessPermission, IUnrestrictedPermission // TypeDefIndex: 1627
{
	// Fields
	private ArrayList m_acceptList; // 0x10
	private ArrayList m_connectList; // 0x18
	private bool m_noRestriction; // 0x20

	// Properties
	public IEnumerator AcceptList { get; }
	public IEnumerator ConnectList { get; }

	// Methods

	// RVA: 0x22F23A8 Offset: 0x22F23A8 VA: 0x22F23A8
	public void .ctor() { }

	// RVA: 0x22F2430 Offset: 0x22F2430 VA: 0x22F2430
	public void .ctor(PermissionState state) { }

	// RVA: 0x22F24CC Offset: 0x22F24CC VA: 0x22F24CC
	public void .ctor(NetworkAccess access, string uriString) { }

	// RVA: 0x22F25F4 Offset: 0x22F25F4 VA: 0x22F25F4
	public void .ctor(NetworkAccess access, Regex uriRegex) { }

	// RVA: 0x22F2720 Offset: 0x22F2720 VA: 0x22F2720
	public IEnumerator get_AcceptList() { }

	// RVA: 0x22F2758 Offset: 0x22F2758 VA: 0x22F2758
	public IEnumerator get_ConnectList() { }

	// RVA: 0x22F2574 Offset: 0x22F2574 VA: 0x22F2574
	public void AddPermission(NetworkAccess access, string uriString) { }

	// RVA: 0x22F269C Offset: 0x22F269C VA: 0x22F269C
	public void AddPermission(NetworkAccess access, Regex uriRegex) { }

	// RVA: 0x22F27CC Offset: 0x22F27CC VA: 0x22F27CC
	internal void AddPermission(NetworkAccess access, WebPermissionInfo info) { }

	// RVA: 0x22F2950 Offset: 0x22F2950 VA: 0x22F2950 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x22F2B18 Offset: 0x22F2B18 VA: 0x22F2B18 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x22F2C38 Offset: 0x22F2C38 VA: 0x22F2C38
	private bool IntersectEmpty(WebPermission permission) { }

	[MonoTODOAttribute] // RVA: 0xBD2078 Offset: 0xBD2078 VA: 0xBD2078
	// RVA: 0x22F2CC4 Offset: 0x22F2CC4 VA: 0x22F2CC4
	private void Intersect(ArrayList list1, ArrayList list2, ArrayList result) { }

	// RVA: 0x22F2D2C Offset: 0x22F2D2C VA: 0x22F2D2C Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	[MonoTODOAttribute] // RVA: 0xBD2088 Offset: 0xBD2088 VA: 0xBD2088
	// RVA: 0x22F2F04 Offset: 0x22F2F04 VA: 0x22F2F04
	private bool IsSubsetOf(ArrayList list1, ArrayList list2) { }

	// RVA: 0x22F2F6C Offset: 0x22F2F6C VA: 0x22F2F6C Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x22F2F74 Offset: 0x22F2F74 VA: 0x22F2F74 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x22F3198 Offset: 0x22F3198 VA: 0x22F3198
	private void ToXml(SecurityElement root, string childName, IEnumerator enumerator) { }

	// RVA: 0x22F3494 Offset: 0x22F3494 VA: 0x22F3494 Slot: 16
	public override void FromXml(SecurityElement securityElement) { }

	// RVA: 0x22F39B8 Offset: 0x22F39B8 VA: 0x22F39B8
	private void FromXml(ArrayList endpoints, NetworkAccess access) { }

	// RVA: 0x22F3A20 Offset: 0x22F3A20 VA: 0x22F3A20 Slot: 20
	public override IPermission Union(IPermission target) { }
}

// Namespace: System.Net
[AttributeUsageAttribute] // RVA: 0xBD0998 Offset: 0xBD0998 VA: 0xBD0998
[Serializable]
public sealed class WebPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1628
{
	// Fields
	private object m_accept; // 0x18
	private object m_connect; // 0x20

	// Properties
	public string Accept { get; set; }
	public string AcceptPattern { get; set; }
	public string Connect { get; set; }
	public string ConnectPattern { get; set; }

	// Methods

	// RVA: 0x22F3C70 Offset: 0x22F3C70 VA: 0x22F3C70
	public void .ctor(SecurityAction action) { }

	// RVA: 0x22F3C78 Offset: 0x22F3C78 VA: 0x22F3C78
	public string get_Accept() { }

	// RVA: 0x22F3D40 Offset: 0x22F3D40 VA: 0x22F3D40
	public void set_Accept(string value) { }

	// RVA: 0x22F3EA0 Offset: 0x22F3EA0 VA: 0x22F3EA0
	public string get_AcceptPattern() { }

	// RVA: 0x22F3F68 Offset: 0x22F3F68 VA: 0x22F3F68
	public void set_AcceptPattern(string value) { }

	// RVA: 0x22F404C Offset: 0x22F404C VA: 0x22F404C
	public string get_Connect() { }

	// RVA: 0x22F4114 Offset: 0x22F4114 VA: 0x22F4114
	public void set_Connect(string value) { }

	// RVA: 0x22F41A4 Offset: 0x22F41A4 VA: 0x22F41A4
	public string get_ConnectPattern() { }

	// RVA: 0x22F426C Offset: 0x22F426C VA: 0x22F426C
	public void set_ConnectPattern(string value) { }

	// RVA: 0x22F4350 Offset: 0x22F4350 VA: 0x22F4350 Slot: 7
	public override IPermission CreatePermission() { }

	// RVA: 0x22F3DD0 Offset: 0x22F3DD0 VA: 0x22F3DD0
	internal void AlreadySet(string parameter, string property) { }
}

// Namespace: System.Net
[Serializable]
public class WebProxy : ISerializable, IWebProxy // TypeDefIndex: 1629
{
	// Fields
	private Uri address; // 0x10
	private bool bypassOnLocal; // 0x18
	private ArrayList bypassList; // 0x20
	private ICredentials credentials; // 0x28
	private bool useDefaultCredentials; // 0x30

	// Properties
	public Uri Address { get; set; }
	public ArrayList BypassArrayList { get; }
	public string[] BypassList { get; set; }
	public bool BypassProxyOnLocal { get; set; }
	public ICredentials Credentials { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD3980 Offset: 0xBD3980 VA: 0xBD3980
	public bool UseDefaultCredentials { get; set; }

	// Methods

	// RVA: 0x22F451C Offset: 0x22F451C VA: 0x22F451C
	public void .ctor() { }

	// RVA: 0x22F45D8 Offset: 0x22F45D8 VA: 0x22F45D8
	public void .ctor(string address) { }

	// RVA: 0x22F46DC Offset: 0x22F46DC VA: 0x22F46DC
	public void .ctor(Uri address) { }

	// RVA: 0x22F46EC Offset: 0x22F46EC VA: 0x22F46EC
	public void .ctor(string address, bool bypassOnLocal) { }

	// RVA: 0x22F4728 Offset: 0x22F4728 VA: 0x22F4728
	public void .ctor(string host, int port) { }

	// RVA: 0x22F495C Offset: 0x22F495C VA: 0x22F495C
	public void .ctor(Uri address, bool bypassOnLocal) { }

	// RVA: 0x22F496C Offset: 0x22F496C VA: 0x22F496C
	public void .ctor(string address, bool bypassOnLocal, string[] bypassList) { }

	// RVA: 0x22F49B4 Offset: 0x22F49B4 VA: 0x22F49B4
	public void .ctor(Uri address, bool bypassOnLocal, string[] bypassList) { }

	// RVA: 0x22F49C0 Offset: 0x22F49C0 VA: 0x22F49C0
	public void .ctor(string address, bool bypassOnLocal, string[] bypassList, ICredentials credentials) { }

	// RVA: 0x22F4530 Offset: 0x22F4530 VA: 0x22F4530
	public void .ctor(Uri address, bool bypassOnLocal, string[] bypassList, ICredentials credentials) { }

	// RVA: 0x22F4B5C Offset: 0x22F4B5C VA: 0x22F4B5C
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F4DC0 Offset: 0x22F4DC0 VA: 0x22F4DC0 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F4DCC Offset: 0x22F4DCC VA: 0x22F4DCC
	public Uri get_Address() { }

	// RVA: 0x22F4DD4 Offset: 0x22F4DD4 VA: 0x22F4DD4
	public void set_Address(Uri value) { }

	// RVA: 0x22F4DDC Offset: 0x22F4DDC VA: 0x22F4DDC
	public ArrayList get_BypassArrayList() { }

	// RVA: 0x22F4E48 Offset: 0x22F4E48 VA: 0x22F4E48
	public string[] get_BypassList() { }

	// RVA: 0x22F4F74 Offset: 0x22F4F74 VA: 0x22F4F74
	public void set_BypassList(string[] value) { }

	// RVA: 0x22F5024 Offset: 0x22F5024 VA: 0x22F5024
	public bool get_BypassProxyOnLocal() { }

	// RVA: 0x22F502C Offset: 0x22F502C VA: 0x22F502C
	public void set_BypassProxyOnLocal(bool value) { }

	// RVA: 0x22F5038 Offset: 0x22F5038 VA: 0x22F5038 Slot: 5
	public ICredentials get_Credentials() { }

	// RVA: 0x22F5040 Offset: 0x22F5040 VA: 0x22F5040 Slot: 6
	public void set_Credentials(ICredentials value) { }

	// RVA: 0x22F5048 Offset: 0x22F5048 VA: 0x22F5048
	public bool get_UseDefaultCredentials() { }

	// RVA: 0x22F5050 Offset: 0x22F5050 VA: 0x22F5050
	public void set_UseDefaultCredentials(bool value) { }

	[MonoTODOAttribute] // RVA: 0xBD2098 Offset: 0xBD2098 VA: 0xBD2098
	[ObsoleteAttribute] // RVA: 0xBD2098 Offset: 0xBD2098 VA: 0xBD2098
	// RVA: 0x22F505C Offset: 0x22F505C VA: 0x22F505C
	public static WebProxy GetDefaultProxy() { }

	// RVA: 0x22F5100 Offset: 0x22F5100 VA: 0x22F5100 Slot: 7
	public Uri GetProxy(Uri destination) { }

	// RVA: 0x22F5130 Offset: 0x22F5130 VA: 0x22F5130 Slot: 8
	public bool IsBypassed(Uri host) { }

	// RVA: 0x22F5758 Offset: 0x22F5758 VA: 0x22F5758 Slot: 9
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F4A0C Offset: 0x22F4A0C VA: 0x22F4A0C
	private void CheckBypassList() { }

	// RVA: 0x22F4610 Offset: 0x22F4610 VA: 0x22F4610
	private static Uri ToUri(string address) { }
}

// Namespace: System.Net.Configuration
internal class Dummy // TypeDefIndex: 1630
{
	// Methods

	// RVA: 0x1F2CF7C Offset: 0x1F2CF7C VA: 0x1F2CF7C
	public void .ctor() { }
}

// Namespace: System.Net
[Serializable]
public abstract class WebRequest : MarshalByRefObject, ISerializable // TypeDefIndex: 1631
{
	// Fields
	private static HybridDictionary prefixes; // 0x0
	private static bool isDefaultWebProxySet; // 0x8
	private static IWebProxy defaultWebProxy; // 0x10
	private AuthenticationLevel authentication_level; // 0x18
	private static readonly object lockobj; // 0x18

	// Properties
	public AuthenticationLevel AuthenticationLevel { get; set; }
	public virtual RequestCachePolicy CachePolicy { get; set; }
	public virtual string ConnectionGroupName { get; set; }
	public virtual long ContentLength { get; set; }
	public virtual string ContentType { get; set; }
	public virtual ICredentials Credentials { get; set; }
	public static RequestCachePolicy DefaultCachePolicy { get; set; }
	public virtual WebHeaderCollection Headers { get; set; }
	public TokenImpersonationLevel ImpersonationLevel { get; set; }
	public virtual string Method { get; set; }
	public virtual bool PreAuthenticate { get; set; }
	public virtual IWebProxy Proxy { get; set; }
	public virtual Uri RequestUri { get; }
	public virtual int Timeout { get; set; }
	public virtual bool UseDefaultCredentials { get; set; }
	public static IWebProxy DefaultWebProxy { get; set; }

	// Methods

	// RVA: 0x22F5858 Offset: 0x22F5858 VA: 0x22F5858
	protected void .ctor() { }

	// RVA: 0x22F5868 Offset: 0x22F5868 VA: 0x22F5868
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F5878 Offset: 0x22F5878 VA: 0x22F5878
	private static void .cctor() { }

	// RVA: 0x22F5ABC Offset: 0x22F5ABC VA: 0x22F5ABC Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F5970 Offset: 0x22F5970 VA: 0x22F5970
	private static void AddDynamicPrefix(string protocol, string implementor) { }

	// RVA: 0x22F5BD0 Offset: 0x22F5BD0 VA: 0x22F5BD0
	private static Exception GetMustImplement() { }

	// RVA: 0x22F5C38 Offset: 0x22F5C38 VA: 0x22F5C38
	public AuthenticationLevel get_AuthenticationLevel() { }

	// RVA: 0x22F5C40 Offset: 0x22F5C40 VA: 0x22F5C40
	public void set_AuthenticationLevel(AuthenticationLevel value) { }

	// RVA: 0x22F5C48 Offset: 0x22F5C48 VA: 0x22F5C48 Slot: 7
	public virtual RequestCachePolicy get_CachePolicy() { }

	// RVA: 0x22F5CB4 Offset: 0x22F5CB4 VA: 0x22F5CB4 Slot: 8
	public virtual void set_CachePolicy(RequestCachePolicy value) { }

	// RVA: 0x22F5CB8 Offset: 0x22F5CB8 VA: 0x22F5CB8 Slot: 9
	public virtual string get_ConnectionGroupName() { }

	// RVA: 0x22F5D24 Offset: 0x22F5D24 VA: 0x22F5D24 Slot: 10
	public virtual void set_ConnectionGroupName(string value) { }

	// RVA: 0x22F5D90 Offset: 0x22F5D90 VA: 0x22F5D90 Slot: 11
	public virtual long get_ContentLength() { }

	// RVA: 0x22F5DFC Offset: 0x22F5DFC VA: 0x22F5DFC Slot: 12
	public virtual void set_ContentLength(long value) { }

	// RVA: 0x22F5E68 Offset: 0x22F5E68 VA: 0x22F5E68 Slot: 13
	public virtual string get_ContentType() { }

	// RVA: 0x22F5ED4 Offset: 0x22F5ED4 VA: 0x22F5ED4 Slot: 14
	public virtual void set_ContentType(string value) { }

	// RVA: 0x22F5F40 Offset: 0x22F5F40 VA: 0x22F5F40 Slot: 15
	public virtual ICredentials get_Credentials() { }

	// RVA: 0x22F5FAC Offset: 0x22F5FAC VA: 0x22F5FAC Slot: 16
	public virtual void set_Credentials(ICredentials value) { }

	// RVA: 0x22F6018 Offset: 0x22F6018 VA: 0x22F6018
	public static RequestCachePolicy get_DefaultCachePolicy() { }

	// RVA: 0x22F6084 Offset: 0x22F6084 VA: 0x22F6084
	public static void set_DefaultCachePolicy(RequestCachePolicy value) { }

	// RVA: 0x22F60F0 Offset: 0x22F60F0 VA: 0x22F60F0 Slot: 17
	public virtual WebHeaderCollection get_Headers() { }

	// RVA: 0x22F615C Offset: 0x22F615C VA: 0x22F615C Slot: 18
	public virtual void set_Headers(WebHeaderCollection value) { }

	// RVA: 0x22F61C8 Offset: 0x22F61C8 VA: 0x22F61C8
	public TokenImpersonationLevel get_ImpersonationLevel() { }

	// RVA: 0x22F6234 Offset: 0x22F6234 VA: 0x22F6234
	public void set_ImpersonationLevel(TokenImpersonationLevel value) { }

	// RVA: 0x22F62A0 Offset: 0x22F62A0 VA: 0x22F62A0 Slot: 19
	public virtual string get_Method() { }

	// RVA: 0x22F630C Offset: 0x22F630C VA: 0x22F630C Slot: 20
	public virtual void set_Method(string value) { }

	// RVA: 0x22F6378 Offset: 0x22F6378 VA: 0x22F6378 Slot: 21
	public virtual bool get_PreAuthenticate() { }

	// RVA: 0x22F63E4 Offset: 0x22F63E4 VA: 0x22F63E4 Slot: 22
	public virtual void set_PreAuthenticate(bool value) { }

	// RVA: 0x22F6450 Offset: 0x22F6450 VA: 0x22F6450 Slot: 23
	public virtual IWebProxy get_Proxy() { }

	// RVA: 0x22F64BC Offset: 0x22F64BC VA: 0x22F64BC Slot: 24
	public virtual void set_Proxy(IWebProxy value) { }

	// RVA: 0x22F6528 Offset: 0x22F6528 VA: 0x22F6528 Slot: 25
	public virtual Uri get_RequestUri() { }

	// RVA: 0x22F6594 Offset: 0x22F6594 VA: 0x22F6594 Slot: 26
	public virtual int get_Timeout() { }

	// RVA: 0x22F6600 Offset: 0x22F6600 VA: 0x22F6600 Slot: 27
	public virtual void set_Timeout(int value) { }

	// RVA: 0x22F666C Offset: 0x22F666C VA: 0x22F666C Slot: 28
	public virtual bool get_UseDefaultCredentials() { }

	// RVA: 0x22F66D8 Offset: 0x22F66D8 VA: 0x22F66D8 Slot: 29
	public virtual void set_UseDefaultCredentials(bool value) { }

	// RVA: 0x22F6744 Offset: 0x22F6744 VA: 0x22F6744
	public static IWebProxy get_DefaultWebProxy() { }

	// RVA: 0x22F68A0 Offset: 0x22F68A0 VA: 0x22F68A0
	public static void set_DefaultWebProxy(IWebProxy value) { }

	[MonoTODOAttribute] // RVA: 0xBD20FC Offset: 0xBD20FC VA: 0xBD20FC
	// RVA: 0x22F6898 Offset: 0x22F6898 VA: 0x22F6898
	private static IWebProxy GetDefaultWebProxy() { }

	// RVA: 0x22F6918 Offset: 0x22F6918 VA: 0x22F6918 Slot: 30
	public virtual void Abort() { }

	// RVA: 0x22F6984 Offset: 0x22F6984 VA: 0x22F6984 Slot: 31
	public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0x22F69F0 Offset: 0x22F69F0 VA: 0x22F69F0 Slot: 32
	public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0x22F6A5C Offset: 0x22F6A5C VA: 0x22F6A5C
	public static WebRequest Create(string requestUriString) { }

	// RVA: 0x22F6B28 Offset: 0x22F6B28 VA: 0x22F6B28
	public static WebRequest Create(Uri requestUri) { }

	// RVA: 0x22F7054 Offset: 0x22F7054 VA: 0x22F7054
	public static WebRequest CreateDefault(Uri requestUri) { }

	// RVA: 0x22F71C8 Offset: 0x22F71C8 VA: 0x22F71C8 Slot: 33
	public virtual Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0x22F7234 Offset: 0x22F7234 VA: 0x22F7234 Slot: 34
	public virtual WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0x22F72A0 Offset: 0x22F72A0 VA: 0x22F72A0 Slot: 35
	public virtual Stream GetRequestStream() { }

	// RVA: 0x22F730C Offset: 0x22F730C VA: 0x22F730C Slot: 36
	public virtual WebResponse GetResponse() { }

	[MonoTODOAttribute] // RVA: 0xBD2134 Offset: 0xBD2134 VA: 0xBD2134
	// RVA: 0x22F7378 Offset: 0x22F7378 VA: 0x22F7378
	public static IWebProxy GetSystemWebProxy() { }

	// RVA: 0x22F7738 Offset: 0x22F7738 VA: 0x22F7738 Slot: 37
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F77A4 Offset: 0x22F77A4 VA: 0x22F77A4
	public static bool RegisterPrefix(string prefix, IWebRequestCreate creator) { }

	// RVA: 0x22F6C9C Offset: 0x22F6C9C VA: 0x22F6C9C
	private static IWebRequestCreate GetCreator(string prefix) { }

	// RVA: 0x22F79E4 Offset: 0x22F79E4 VA: 0x22F79E4
	internal static void ClearPrefixes() { }

	// RVA: 0x22F7A60 Offset: 0x22F7A60 VA: 0x22F7A60
	internal static void RemovePrefix(string prefix) { }

	// RVA: 0x22F7AE4 Offset: 0x22F7AE4 VA: 0x22F7AE4
	internal static void AddPrefix(string prefix, string typeName) { }

	// RVA: 0x22F5B24 Offset: 0x22F5B24 VA: 0x22F5B24
	internal static void AddPrefix(string prefix, Type type) { }
}

// Namespace: System.Net
public static class WebRequestMethods // TypeDefIndex: 1632
{}

// Namespace: 
public static class WebRequestMethods.File // TypeDefIndex: 1633
{
	// Fields
	public const string DownloadFile = "GET";
	public const string UploadFile = "PUT";
}

// Namespace: 
public static class WebRequestMethods.Ftp // TypeDefIndex: 1634
{
	// Fields
	public const string AppendFile = "APPE";
	public const string DeleteFile = "DELE";
	public const string DownloadFile = "RETR";
	public const string GetFileSize = "SIZE";
	public const string GetDateTimestamp = "MDTM";
	public const string ListDirectory = "NLST";
	public const string ListDirectoryDetails = "LIST";
	public const string MakeDirectory = "MKD";
	public const string PrintWorkingDirectory = "PWD";
	public const string RemoveDirectory = "RMD";
	public const string Rename = "RENAME";
	public const string UploadFile = "STOR";
	public const string UploadFileWithUniqueName = "STOU";
}

// Namespace: 
public static class WebRequestMethods.Http // TypeDefIndex: 1635
{
	// Fields
	public const string Connect = "CONNECT";
	public const string Get = "GET";
	public const string Head = "HEAD";
	public const string MkCol = "MKCOL";
	public const string Post = "POST";
	public const string Put = "PUT";
}

// Namespace: System.Net
[Serializable]
public abstract class WebResponse : MarshalByRefObject, IDisposable, ISerializable // TypeDefIndex: 1636
{
	// Properties
	public virtual long ContentLength { get; set; }
	public virtual string ContentType { get; set; }
	public virtual WebHeaderCollection Headers { get; }
	[MonoTODOAttribute] // RVA: 0xBD39B8 Offset: 0xBD39B8 VA: 0xBD39B8
	public virtual bool IsFromCache { get; }
	[MonoTODOAttribute] // RVA: 0xBD39C8 Offset: 0xBD39C8 VA: 0xBD39C8
	public virtual bool IsMutuallyAuthenticated { get; }
	public virtual Uri ResponseUri { get; }

	// Methods

	// RVA: 0x22F7C28 Offset: 0x22F7C28 VA: 0x22F7C28
	protected void .ctor() { }

	// RVA: 0x22F7C30 Offset: 0x22F7C30 VA: 0x22F7C30
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F7CA8 Offset: 0x22F7CA8 VA: 0x22F7CA8 Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x22F7CB8 Offset: 0x22F7CB8 VA: 0x22F7CB8 Slot: 7
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x22F7D20 Offset: 0x22F7D20 VA: 0x22F7D20 Slot: 8
	public virtual long get_ContentLength() { }

	// RVA: 0x22F7D88 Offset: 0x22F7D88 VA: 0x22F7D88 Slot: 9
	public virtual void set_ContentLength(long value) { }

	// RVA: 0x22F7DF0 Offset: 0x22F7DF0 VA: 0x22F7DF0 Slot: 10
	public virtual string get_ContentType() { }

	// RVA: 0x22F7E58 Offset: 0x22F7E58 VA: 0x22F7E58 Slot: 11
	public virtual void set_ContentType(string value) { }

	// RVA: 0x22F7EC0 Offset: 0x22F7EC0 VA: 0x22F7EC0 Slot: 12
	public virtual WebHeaderCollection get_Headers() { }

	// RVA: 0x22F7F28 Offset: 0x22F7F28 VA: 0x22F7F28
	private static Exception GetMustImplement() { }

	// RVA: 0x22F7F84 Offset: 0x22F7F84 VA: 0x22F7F84 Slot: 13
	public virtual bool get_IsFromCache() { }

	// RVA: 0x22F7FD0 Offset: 0x22F7FD0 VA: 0x22F7FD0 Slot: 14
	public virtual bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x22F801C Offset: 0x22F801C VA: 0x22F801C Slot: 15
	public virtual Uri get_ResponseUri() { }

	// RVA: 0x22F8084 Offset: 0x22F8084 VA: 0x22F8084 Slot: 16
	public virtual void Close() { }

	// RVA: 0x22F80EC Offset: 0x22F80EC VA: 0x22F80EC Slot: 17
	public virtual Stream GetResponseStream() { }

	[MonoTODOAttribute] // RVA: 0xBD216C Offset: 0xBD216C VA: 0xBD216C
	// RVA: 0x22F8154 Offset: 0x22F8154 VA: 0x22F8154 Slot: 18
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Security.Authentication
public enum CipherAlgorithmType // TypeDefIndex: 1637
{
	// Fields
	public int value__; // 0x0
	public const CipherAlgorithmType None = 0;
	public const CipherAlgorithmType Aes = 26129;
	public const CipherAlgorithmType Aes128 = 26126;
	public const CipherAlgorithmType Aes192 = 26127;
	public const CipherAlgorithmType Aes256 = 26128;
	public const CipherAlgorithmType Des = 26113;
	public const CipherAlgorithmType Rc2 = 26114;
	public const CipherAlgorithmType Rc4 = 26625;
	public const CipherAlgorithmType TripleDes = 26115;
}

// Namespace: System.Security.Authentication
public enum ExchangeAlgorithmType // TypeDefIndex: 1638
{
	// Fields
	public int value__; // 0x0
	public const ExchangeAlgorithmType None = 0;
	public const ExchangeAlgorithmType DiffieHellman = 43522;
	public const ExchangeAlgorithmType RsaKeyX = 41984;
	public const ExchangeAlgorithmType RsaSign = 9216;
}

// Namespace: System.Security.Authentication
public enum HashAlgorithmType // TypeDefIndex: 1639
{
	// Fields
	public int value__; // 0x0
	public const HashAlgorithmType None = 0;
	public const HashAlgorithmType Md5 = 32771;
	public const HashAlgorithmType Sha1 = 32772;
}

// Namespace: System.Security.Authentication
[FlagsAttribute] // RVA: 0xBD09E4 Offset: 0xBD09E4 VA: 0xBD09E4
public enum SslProtocols // TypeDefIndex: 1640
{
	// Fields
	public int value__; // 0x0
	public const SslProtocols None = 0;
	public const SslProtocols Ssl2 = 12;
	public const SslProtocols Ssl3 = 48;
	public const SslProtocols Tls = 192;
	public const SslProtocols Default = 240;
}

// Namespace: Mono.Security.X509
internal class OSX509Certificates // TypeDefIndex: 1641
{
	// Fields
	private static IntPtr sslsecpolicy; // 0x0

	// Methods

	// RVA: 0x2236258 Offset: 0x2236258 VA: 0x2236258
	private static void .cctor() { }

	// RVA: 0x2236360 Offset: 0x2236360 VA: 0x2236360
	private static extern IntPtr SecCertificateCreateWithData(IntPtr allocator, IntPtr nsdataRef) { }

	// RVA: 0x223640C Offset: 0x223640C VA: 0x223640C
	private static extern int SecTrustCreateWithCertificates(IntPtr certOrCertArray, IntPtr policies, out IntPtr sectrustref) { }

	// RVA: 0x22362B4 Offset: 0x22362B4 VA: 0x22362B4
	private static extern IntPtr SecPolicyCreateSSL(int server, IntPtr cfStringHostname) { }

	// RVA: 0x22364C0 Offset: 0x22364C0 VA: 0x22364C0
	private static extern int SecTrustEvaluate(IntPtr secTrustRef, out OSX509Certificates.SecTrustResult secTrustResultTime) { }

	// RVA: 0x2236568 Offset: 0x2236568 VA: 0x2236568
	private static extern IntPtr CFDataCreate(IntPtr allocator, byte* bytes, IntPtr length) { }

	// RVA: 0x223661C Offset: 0x223661C VA: 0x223661C
	private static extern void CFRelease(IntPtr handle) { }

	// RVA: 0x22366B8 Offset: 0x22366B8 VA: 0x22366B8
	private static extern IntPtr CFArrayCreate(IntPtr allocator, IntPtr values, IntPtr numValues, IntPtr callbacks) { }

	// RVA: 0x223677C Offset: 0x223677C VA: 0x223677C
	private static IntPtr MakeCFData(byte[] data) { }

	// RVA: 0x2236824 Offset: 0x2236824 VA: 0x2236824
	private static IntPtr FromIntPtrs(IntPtr[] values) { }

	// RVA: 0x22368E4 Offset: 0x22368E4 VA: 0x22368E4
	public static OSX509Certificates.SecTrustResult TrustEvaluateSsl(X509CertificateCollection certificates) { }

	// RVA: 0x22369C0 Offset: 0x22369C0 VA: 0x22369C0
	private static OSX509Certificates.SecTrustResult _TrustEvaluateSsl(X509CertificateCollection certificates) { }
}
