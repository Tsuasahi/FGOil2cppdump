	private void WriteHeaders() { }

	// RVA: 0x10A461C Offset: 0x10A461C VA: 0x10A461C
	internal void WriteRequest() { }

	// RVA: 0x10A5364 Offset: 0x10A5364 VA: 0x10A5364
	internal void InternalClose() { }

	// RVA: 0x10A5370 Offset: 0x10A5370 VA: 0x10A5370 Slot: 13
	public override void Close() { }

	// RVA: 0x10A3CFC Offset: 0x10A3CFC VA: 0x10A3CFC
	internal void KillBuffer() { }

	// RVA: 0x10A5620 Offset: 0x10A5620 VA: 0x10A5620 Slot: 21
	public override long Seek(long a, SeekOrigin b) { }

	// RVA: 0x10A5688 Offset: 0x10A5688 VA: 0x10A5688 Slot: 22
	public override void SetLength(long a) { }

	// RVA: 0x10A56F0 Offset: 0x10A56F0 VA: 0x10A56F0 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x10A56F8 Offset: 0x10A56F8 VA: 0x10A56F8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x10A5718 Offset: 0x10A5718 VA: 0x10A5718 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x10A5738 Offset: 0x10A5738 VA: 0x10A5738 Slot: 9
	public override long get_Length() { }

	// RVA: 0x10A57A0 Offset: 0x10A57A0 VA: 0x10A57A0 Slot: 10
	public override long get_Position() { }

	// RVA: 0x10A5808 Offset: 0x10A5808 VA: 0x10A5808 Slot: 11
	public override void set_Position(long value) { }
}

// Namespace: System.Net
[Serializable]
public class WebException : InvalidOperationException, ISerializable // TypeDefIndex: 1622
{
	// Fields
	private WebResponse response; // 0x60
	private WebExceptionStatus status; // 0x68

	// Properties
	public WebResponse Response { get; }
	public WebExceptionStatus Status { get; }

	// Methods

	// RVA: 0x1119454 Offset: 0x1119454 VA: 0x1119454
	public void .ctor() { }

	// RVA: 0x1119464 Offset: 0x1119464 VA: 0x1119464
	public void .ctor(string message) { }

	// RVA: 0x1119474 Offset: 0x1119474 VA: 0x1119474
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1119484 Offset: 0x1119484 VA: 0x1119484
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x1119494 Offset: 0x1119494 VA: 0x1119494
	public void .ctor(string message, WebExceptionStatus status) { }

	// RVA: 0x11194C8 Offset: 0x11194C8 VA: 0x11194C8
	internal void .ctor(string message, Exception innerException, WebExceptionStatus status) { }

	// RVA: 0x11194FC Offset: 0x11194FC VA: 0x11194FC
	public void .ctor(string message, Exception innerException, WebExceptionStatus status, WebResponse response) { }

	// RVA: 0x1119540 Offset: 0x1119540 VA: 0x1119540 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1119548 Offset: 0x1119548 VA: 0x1119548
	public WebResponse get_Response() { }

	// RVA: 0x1119550 Offset: 0x1119550 VA: 0x1119550
	public WebExceptionStatus get_Status() { }

	// RVA: 0x1119558 Offset: 0x1119558 VA: 0x1119558 Slot: 10
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
public enum WebExceptionStatus // TypeDefIndex: 1623
{
	// Fields
	public int value__; // 0x0
	public const WebExceptionStatus Success = 0;
	public const WebExceptionStatus NameResolutionFailure = 1;
	public const WebExceptionStatus ConnectFailure = 2;
	public const WebExceptionStatus ReceiveFailure = 3;
	public const WebExceptionStatus SendFailure = 4;
	public const WebExceptionStatus PipelineFailure = 5;
	public const WebExceptionStatus RequestCanceled = 6;
	public const WebExceptionStatus ProtocolError = 7;
	public const WebExceptionStatus ConnectionClosed = 8;
	public const WebExceptionStatus TrustFailure = 9;
	public const WebExceptionStatus SecureChannelFailure = 10;
	public const WebExceptionStatus ServerProtocolViolation = 11;
	public const WebExceptionStatus KeepAliveFailure = 12;
	public const WebExceptionStatus Pending = 13;
	public const WebExceptionStatus Timeout = 14;
	public const WebExceptionStatus ProxyNameResolutionFailure = 15;
	public const WebExceptionStatus UnknownError = 16;
	public const WebExceptionStatus MessageLengthLimitExceeded = 17;
	public const WebExceptionStatus CacheEntryNotFound = 18;
	public const WebExceptionStatus RequestProhibitedByCachePolicy = 19;
	public const WebExceptionStatus RequestProhibitedByProxy = 20;
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xC3CA38 Offset: 0xC3CA38 VA: 0xC3CA38
[ComVisibleAttribute] // RVA: 0xC3CA38 Offset: 0xC3CA38 VA: 0xC3CA38
[Serializable]
public class WebHeaderCollection : NameValueCollection, ISerializable // TypeDefIndex: 1624
{
	// Fields
	private static readonly Hashtable restricted; // 0x0
	private static readonly Hashtable multiValue; // 0x8
	private static readonly Dictionary<string, bool> restricted_response; // 0x10
	private bool internallyCreated; // 0x68
	private static bool[] allowed_chars; // 0x18

	// Properties
	public override string[] AllKeys { get; }
	public override int Count { get; }
	public override NameObjectCollectionBase.KeysCollection Keys { get; }
	public string Item { get; set; }
	public string Item { get; set; }

	// Methods

	// RVA: 0x1119560 Offset: 0x1119560 VA: 0x1119560
	public void .ctor() { }

	// RVA: 0x1119568 Offset: 0x1119568 VA: 0x1119568
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1119858 Offset: 0x1119858 VA: 0x1119858
	internal void .ctor(bool internallyCreated) { }

	// RVA: 0x1119888 Offset: 0x1119888 VA: 0x1119888
	private static void .cctor() { }

	// RVA: 0x111A720 Offset: 0x111A720 VA: 0x111A720 Slot: 10
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111A72C Offset: 0x111A72C VA: 0x111A72C
	public void Add(string header) { }

	// RVA: 0x111A854 Offset: 0x111A854 VA: 0x111A854 Slot: 17
	public override void Add(string name, string value) { }

	// RVA: 0x111AAF0 Offset: 0x111AAF0 VA: 0x111AAF0
	protected void AddWithoutValidate(string headerName, string headerValue) { }

	// RVA: 0x111AECC Offset: 0x111AECC VA: 0x111AECC Slot: 23
	public override string[] GetValues(string header) { }

	// RVA: 0x111AF80 Offset: 0x111AF80 VA: 0x111AF80 Slot: 22
	public override string[] GetValues(int index) { }

	// RVA: 0x111A958 Offset: 0x111A958 VA: 0x111A958
	public static bool IsRestricted(string headerName) { }

	// RVA: 0x111AFA8 Offset: 0x111AFA8 VA: 0x111AFA8
	public static bool IsRestricted(string headerName, bool response) { }

	// RVA: 0x111B154 Offset: 0x111B154 VA: 0x111B154 Slot: 15
	public override void OnDeserialization(object sender) { }

	// RVA: 0x111B158 Offset: 0x111B158 VA: 0x111B158 Slot: 24
	public override void Remove(string name) { }

	// RVA: 0x111B258 Offset: 0x111B258 VA: 0x111B258 Slot: 25
	public override void Set(string name, string value) { }

	// RVA: 0x111B42C Offset: 0x111B42C VA: 0x111B42C
	public byte[] ToByteArray() { }

	// RVA: 0x111B4C8 Offset: 0x111B4C8 VA: 0x111B4C8
	internal string ToStringMultiValue() { }

	// RVA: 0x111B850 Offset: 0x111B850 VA: 0x111B850 Slot: 3
	public override string ToString() { }

	// RVA: 0x111B9E0 Offset: 0x111B9E0 VA: 0x111B9E0 Slot: 13
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111BB34 Offset: 0x111BB34 VA: 0x111BB34 Slot: 16
	public override string[] get_AllKeys() { }

	// RVA: 0x111BB3C Offset: 0x111BB3C VA: 0x111BB3C Slot: 14
	public override int get_Count() { }

	// RVA: 0x111BB44 Offset: 0x111BB44 VA: 0x111BB44 Slot: 11
	public override NameObjectCollectionBase.KeysCollection get_Keys() { }

	// RVA: 0x111BB4C Offset: 0x111BB4C VA: 0x111BB4C Slot: 19
	public override string Get(int index) { }

	// RVA: 0x111BB54 Offset: 0x111BB54 VA: 0x111BB54 Slot: 20
	public override string Get(string name) { }

	// RVA: 0x111BB5C Offset: 0x111BB5C VA: 0x111BB5C Slot: 21
	public override string GetKey(int index) { }

	// RVA: 0x111BB64 Offset: 0x111BB64 VA: 0x111BB64
	public void Add(HttpRequestHeader header, string value) { }

	// RVA: 0x111BC30 Offset: 0x111BC30 VA: 0x111BC30
	public void Remove(HttpRequestHeader header) { }

	// RVA: 0x111BC64 Offset: 0x111BC64 VA: 0x111BC64
	public void Set(HttpRequestHeader header, string value) { }

	// RVA: 0x111BCA0 Offset: 0x111BCA0 VA: 0x111BCA0
	public void Add(HttpResponseHeader header, string value) { }

	// RVA: 0x111BD6C Offset: 0x111BD6C VA: 0x111BD6C
	public void Remove(HttpResponseHeader header) { }

	// RVA: 0x111BDA0 Offset: 0x111BDA0 VA: 0x111BDA0
	public void Set(HttpResponseHeader header, string value) { }

	// RVA: 0x111BBA0 Offset: 0x111BBA0 VA: 0x111BBA0
	private string RequestHeaderToString(HttpRequestHeader value) { }

	// RVA: 0x111BDDC Offset: 0x111BDDC VA: 0x111BDDC
	public string get_Item(HttpRequestHeader hrh) { }

	// RVA: 0x111BE10 Offset: 0x111BE10 VA: 0x111BE10
	public void set_Item(HttpRequestHeader hrh, string value) { }

	// RVA: 0x111BCDC Offset: 0x111BCDC VA: 0x111BCDC
	private string ResponseHeaderToString(HttpResponseHeader value) { }

	// RVA: 0x111BE4C Offset: 0x111BE4C VA: 0x111BE4C
	public string get_Item(HttpResponseHeader hrh) { }

	// RVA: 0x111BE80 Offset: 0x111BE80 VA: 0x111BE80
	public void set_Item(HttpResponseHeader hrh, string value) { }

	// RVA: 0x111BEBC Offset: 0x111BEBC VA: 0x111BEBC Slot: 18
	public override void Clear() { }

	// RVA: 0x111BEC4 Offset: 0x111BEC4 VA: 0x111BEC4 Slot: 12
	public override IEnumerator GetEnumerator() { }

	// RVA: 0x111BECC Offset: 0x111BECC VA: 0x111BECC
	internal void SetInternal(string header) { }

	// RVA: 0x111BFF4 Offset: 0x111BFF4 VA: 0x111BFF4
	internal void SetInternal(string name, string value) { }

	// RVA: 0x111C15C Offset: 0x111C15C VA: 0x111C15C
	internal void RemoveAndAdd(string name, string value) { }

	// RVA: 0x111C210 Offset: 0x111C210 VA: 0x111C210
	internal void RemoveInternal(string name) { }

	// RVA: 0x111B774 Offset: 0x111B774 VA: 0x111B774
	internal static bool IsMultiValue(string headerName) { }

	// RVA: 0x111ADE4 Offset: 0x111ADE4 VA: 0x111ADE4
	internal static bool IsHeaderValue(string value) { }

	// RVA: 0x111ACC8 Offset: 0x111ACC8 VA: 0x111ACC8
	internal static bool IsHeaderName(string name) { }
}

// Namespace: System.Net
internal enum WebPermissionInfoType // TypeDefIndex: 1625
{
	// Fields
	public int value__; // 0x0
	public const WebPermissionInfoType InfoString = 0;
	public const WebPermissionInfoType InfoUnexecutedRegex = 1;
	public const WebPermissionInfoType InfoRegex = 2;
}

// Namespace: System.Net
internal class WebPermissionInfo // TypeDefIndex: 1626
{
	// Fields
	private WebPermissionInfoType _type; // 0x10
	private object _info; // 0x18

	// Properties
	public string Info { get; }

	// Methods

	// RVA: 0x111C698 Offset: 0x111C698 VA: 0x111C698
	public void .ctor(WebPermissionInfoType type, string info) { }

	// RVA: 0x111C824 Offset: 0x111C824 VA: 0x111C824
	public void .ctor(Regex regex) { }

	// RVA: 0x111D2E0 Offset: 0x111D2E0 VA: 0x111D2E0
	public string get_Info() { }
}

// Namespace: System.Net
[MonoTODOAttribute] // RVA: 0xC3CA88 Offset: 0xC3CA88 VA: 0xC3CA88
[Serializable]
public sealed class WebPermission : CodeAccessPermission, IUnrestrictedPermission // TypeDefIndex: 1627
{
	// Fields
	private ArrayList m_acceptList; // 0x10
	private ArrayList m_connectList; // 0x18
	private bool m_noRestriction; // 0x20

	// Properties
	public IEnumerator AcceptList { get; }
	public IEnumerator ConnectList { get; }

	// Methods

	// RVA: 0x111C2B0 Offset: 0x111C2B0 VA: 0x111C2B0
	public void .ctor() { }

	// RVA: 0x111C338 Offset: 0x111C338 VA: 0x111C338
	public void .ctor(PermissionState state) { }

	// RVA: 0x111C3D4 Offset: 0x111C3D4 VA: 0x111C3D4
	public void .ctor(NetworkAccess access, string uriString) { }

	// RVA: 0x111C4FC Offset: 0x111C4FC VA: 0x111C4FC
	public void .ctor(NetworkAccess access, Regex uriRegex) { }

	// RVA: 0x111C628 Offset: 0x111C628 VA: 0x111C628
	public IEnumerator get_AcceptList() { }

	// RVA: 0x111C660 Offset: 0x111C660 VA: 0x111C660
	public IEnumerator get_ConnectList() { }

	// RVA: 0x111C47C Offset: 0x111C47C VA: 0x111C47C
	public void AddPermission(NetworkAccess access, string uriString) { }

	// RVA: 0x111C5A4 Offset: 0x111C5A4 VA: 0x111C5A4
	public void AddPermission(NetworkAccess access, Regex uriRegex) { }

	// RVA: 0x111C6D4 Offset: 0x111C6D4 VA: 0x111C6D4
	internal void AddPermission(NetworkAccess access, WebPermissionInfo info) { }

	// RVA: 0x111C858 Offset: 0x111C858 VA: 0x111C858 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x111CA20 Offset: 0x111CA20 VA: 0x111CA20 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x111CB40 Offset: 0x111CB40 VA: 0x111CB40
	private bool IntersectEmpty(WebPermission permission) { }

	[MonoTODOAttribute] // RVA: 0xC3E1A0 Offset: 0xC3E1A0 VA: 0xC3E1A0
	// RVA: 0x111CBCC Offset: 0x111CBCC VA: 0x111CBCC
	private void Intersect(ArrayList list1, ArrayList list2, ArrayList result) { }

	// RVA: 0x111CC34 Offset: 0x111CC34 VA: 0x111CC34 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	[MonoTODOAttribute] // RVA: 0xC3E1B0 Offset: 0xC3E1B0 VA: 0xC3E1B0
	// RVA: 0x111CE0C Offset: 0x111CE0C VA: 0x111CE0C
	private bool IsSubsetOf(ArrayList list1, ArrayList list2) { }

	// RVA: 0x111CE74 Offset: 0x111CE74 VA: 0x111CE74 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x111CE7C Offset: 0x111CE7C VA: 0x111CE7C Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x111D0A0 Offset: 0x111D0A0 VA: 0x111D0A0
	private void ToXml(SecurityElement root, string childName, IEnumerator enumerator) { }

	// RVA: 0x111D39C Offset: 0x111D39C VA: 0x111D39C Slot: 16
	public override void FromXml(SecurityElement securityElement) { }

	// RVA: 0x111D8C0 Offset: 0x111D8C0 VA: 0x111D8C0
	private void FromXml(ArrayList endpoints, NetworkAccess access) { }

	// RVA: 0x111D928 Offset: 0x111D928 VA: 0x111D928 Slot: 20
	public override IPermission Union(IPermission target) { }
}

// Namespace: System.Net
[AttributeUsageAttribute] // RVA: 0xC3CAC0 Offset: 0xC3CAC0 VA: 0xC3CAC0
[Serializable]
public sealed class WebPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1628
{
	// Fields
	private object m_accept; // 0x18
	private object m_connect; // 0x20

	// Properties
	public string Accept { get; set; }
	public string AcceptPattern { get; set; }
	public string Connect { get; set; }
	public string ConnectPattern { get; set; }

	// Methods

	// RVA: 0x111DB78 Offset: 0x111DB78 VA: 0x111DB78
	public void .ctor(SecurityAction action) { }

	// RVA: 0x111DB80 Offset: 0x111DB80 VA: 0x111DB80
	public string get_Accept() { }

	// RVA: 0x111DC48 Offset: 0x111DC48 VA: 0x111DC48
	public void set_Accept(string value) { }

	// RVA: 0x111DDA8 Offset: 0x111DDA8 VA: 0x111DDA8
	public string get_AcceptPattern() { }

	// RVA: 0x111DE70 Offset: 0x111DE70 VA: 0x111DE70
	public void set_AcceptPattern(string value) { }

	// RVA: 0x111DF54 Offset: 0x111DF54 VA: 0x111DF54
	public string get_Connect() { }

	// RVA: 0x111E01C Offset: 0x111E01C VA: 0x111E01C
	public void set_Connect(string value) { }

	// RVA: 0x111E0AC Offset: 0x111E0AC VA: 0x111E0AC
	public string get_ConnectPattern() { }

	// RVA: 0x111E174 Offset: 0x111E174 VA: 0x111E174
	public void set_ConnectPattern(string value) { }

	// RVA: 0x111E258 Offset: 0x111E258 VA: 0x111E258 Slot: 7
	public override IPermission CreatePermission() { }

	// RVA: 0x111DCD8 Offset: 0x111DCD8 VA: 0x111DCD8
	internal void AlreadySet(string parameter, string property) { }
}

// Namespace: System.Net
[Serializable]
public class WebProxy : ISerializable, IWebProxy // TypeDefIndex: 1629
{
	// Fields
	private Uri address; // 0x10
	private bool bypassOnLocal; // 0x18
	private ArrayList bypassList; // 0x20
	private ICredentials credentials; // 0x28
	private bool useDefaultCredentials; // 0x30

	// Properties
	public Uri Address { get; set; }
	public ArrayList BypassArrayList { get; }
	public string[] BypassList { get; set; }
	public bool BypassProxyOnLocal { get; set; }
	public ICredentials Credentials { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3FAA8 Offset: 0xC3FAA8 VA: 0xC3FAA8
	public bool UseDefaultCredentials { get; set; }

	// Methods

	// RVA: 0x111E424 Offset: 0x111E424 VA: 0x111E424
	public void .ctor() { }

	// RVA: 0x111E4E0 Offset: 0x111E4E0 VA: 0x111E4E0
	public void .ctor(string address) { }

	// RVA: 0x111E5E4 Offset: 0x111E5E4 VA: 0x111E5E4
	public void .ctor(Uri address) { }

	// RVA: 0x111E5F4 Offset: 0x111E5F4 VA: 0x111E5F4
	public void .ctor(string address, bool bypassOnLocal) { }

	// RVA: 0x111E630 Offset: 0x111E630 VA: 0x111E630
	public void .ctor(string host, int port) { }

	// RVA: 0x111E864 Offset: 0x111E864 VA: 0x111E864
	public void .ctor(Uri address, bool bypassOnLocal) { }

	// RVA: 0x111E874 Offset: 0x111E874 VA: 0x111E874
	public void .ctor(string address, bool bypassOnLocal, string[] bypassList) { }

	// RVA: 0x111E8BC Offset: 0x111E8BC VA: 0x111E8BC
	public void .ctor(Uri address, bool bypassOnLocal, string[] bypassList) { }

	// RVA: 0x111E8C8 Offset: 0x111E8C8 VA: 0x111E8C8
	public void .ctor(string address, bool bypassOnLocal, string[] bypassList, ICredentials credentials) { }

	// RVA: 0x111E438 Offset: 0x111E438 VA: 0x111E438
	public void .ctor(Uri address, bool bypassOnLocal, string[] bypassList, ICredentials credentials) { }

	// RVA: 0x111EA64 Offset: 0x111EA64 VA: 0x111EA64
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111ECC8 Offset: 0x111ECC8 VA: 0x111ECC8 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111ECD4 Offset: 0x111ECD4 VA: 0x111ECD4
	public Uri get_Address() { }

	// RVA: 0x111ECDC Offset: 0x111ECDC VA: 0x111ECDC
	public void set_Address(Uri value) { }

	// RVA: 0x111ECE4 Offset: 0x111ECE4 VA: 0x111ECE4
	public ArrayList get_BypassArrayList() { }

	// RVA: 0x111ED50 Offset: 0x111ED50 VA: 0x111ED50
	public string[] get_BypassList() { }

	// RVA: 0x111EE7C Offset: 0x111EE7C VA: 0x111EE7C
	public void set_BypassList(string[] value) { }

	// RVA: 0x111EF2C Offset: 0x111EF2C VA: 0x111EF2C
	public bool get_BypassProxyOnLocal() { }

	// RVA: 0x111EF34 Offset: 0x111EF34 VA: 0x111EF34
	public void set_BypassProxyOnLocal(bool value) { }

	// RVA: 0x111EF40 Offset: 0x111EF40 VA: 0x111EF40 Slot: 5
	public ICredentials get_Credentials() { }

	// RVA: 0x111EF48 Offset: 0x111EF48 VA: 0x111EF48 Slot: 6
	public void set_Credentials(ICredentials value) { }

	// RVA: 0x111EF50 Offset: 0x111EF50 VA: 0x111EF50
	public bool get_UseDefaultCredentials() { }

	// RVA: 0x111EF58 Offset: 0x111EF58 VA: 0x111EF58
	public void set_UseDefaultCredentials(bool value) { }

	[MonoTODOAttribute] // RVA: 0xC3E1C0 Offset: 0xC3E1C0 VA: 0xC3E1C0
	[ObsoleteAttribute] // RVA: 0xC3E1C0 Offset: 0xC3E1C0 VA: 0xC3E1C0
	// RVA: 0x111EF64 Offset: 0x111EF64 VA: 0x111EF64
	public static WebProxy GetDefaultProxy() { }

	// RVA: 0x111F008 Offset: 0x111F008 VA: 0x111F008 Slot: 7
	public Uri GetProxy(Uri destination) { }

	// RVA: 0x111F038 Offset: 0x111F038 VA: 0x111F038 Slot: 8
	public bool IsBypassed(Uri host) { }

	// RVA: 0x111F660 Offset: 0x111F660 VA: 0x111F660 Slot: 9
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111E914 Offset: 0x111E914 VA: 0x111E914
	private void CheckBypassList() { }

	// RVA: 0x111E518 Offset: 0x111E518 VA: 0x111E518
	private static Uri ToUri(string address) { }
}

// Namespace: System.Net.Configuration
internal class Dummy // TypeDefIndex: 1630
{
	// Methods

	// RVA: 0xEC88F0 Offset: 0xEC88F0 VA: 0xEC88F0
	public void .ctor() { }
}

// Namespace: System.Net
[Serializable]
public abstract class WebRequest : MarshalByRefObject, ISerializable // TypeDefIndex: 1631
{
	// Fields
	private static HybridDictionary prefixes; // 0x0
	private static bool isDefaultWebProxySet; // 0x8
	private static IWebProxy defaultWebProxy; // 0x10
	private AuthenticationLevel authentication_level; // 0x18
	private static readonly object lockobj; // 0x18

	// Properties
	public AuthenticationLevel AuthenticationLevel { get; set; }
	public virtual RequestCachePolicy CachePolicy { get; set; }
	public virtual string ConnectionGroupName { get; set; }
	public virtual long ContentLength { get; set; }
	public virtual string ContentType { get; set; }
	public virtual ICredentials Credentials { get; set; }
	public static RequestCachePolicy DefaultCachePolicy { get; set; }
	public virtual WebHeaderCollection Headers { get; set; }
	public TokenImpersonationLevel ImpersonationLevel { get; set; }
	public virtual string Method { get; set; }
	public virtual bool PreAuthenticate { get; set; }
	public virtual IWebProxy Proxy { get; set; }
	public virtual Uri RequestUri { get; }
	public virtual int Timeout { get; set; }
	public virtual bool UseDefaultCredentials { get; set; }
	public static IWebProxy DefaultWebProxy { get; set; }

	// Methods

	// RVA: 0x111F760 Offset: 0x111F760 VA: 0x111F760
	protected void .ctor() { }

	// RVA: 0x111F770 Offset: 0x111F770 VA: 0x111F770
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111F780 Offset: 0x111F780 VA: 0x111F780
	private static void .cctor() { }

	// RVA: 0x111F9C4 Offset: 0x111F9C4 VA: 0x111F9C4 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x111F878 Offset: 0x111F878 VA: 0x111F878
	private static void AddDynamicPrefix(string protocol, string implementor) { }

	// RVA: 0x111FAD8 Offset: 0x111FAD8 VA: 0x111FAD8
	private static Exception GetMustImplement() { }

	// RVA: 0x111FB40 Offset: 0x111FB40 VA: 0x111FB40
	public AuthenticationLevel get_AuthenticationLevel() { }

	// RVA: 0x111FB48 Offset: 0x111FB48 VA: 0x111FB48
	public void set_AuthenticationLevel(AuthenticationLevel value) { }

	// RVA: 0x111FB50 Offset: 0x111FB50 VA: 0x111FB50 Slot: 7
	public virtual RequestCachePolicy get_CachePolicy() { }

	// RVA: 0x111FBBC Offset: 0x111FBBC VA: 0x111FBBC Slot: 8
	public virtual void set_CachePolicy(RequestCachePolicy value) { }

	// RVA: 0x111FBC0 Offset: 0x111FBC0 VA: 0x111FBC0 Slot: 9
	public virtual string get_ConnectionGroupName() { }

	// RVA: 0x111FC2C Offset: 0x111FC2C VA: 0x111FC2C Slot: 10
	public virtual void set_ConnectionGroupName(string value) { }

	// RVA: 0x111FC98 Offset: 0x111FC98 VA: 0x111FC98 Slot: 11
	public virtual long get_ContentLength() { }

	// RVA: 0x111FD04 Offset: 0x111FD04 VA: 0x111FD04 Slot: 12
	public virtual void set_ContentLength(long value) { }

	// RVA: 0x111FD70 Offset: 0x111FD70 VA: 0x111FD70 Slot: 13
	public virtual string get_ContentType() { }

	// RVA: 0x111FDDC Offset: 0x111FDDC VA: 0x111FDDC Slot: 14
	public virtual void set_ContentType(string value) { }

	// RVA: 0x111FE48 Offset: 0x111FE48 VA: 0x111FE48 Slot: 15
	public virtual ICredentials get_Credentials() { }

	// RVA: 0x111FEB4 Offset: 0x111FEB4 VA: 0x111FEB4 Slot: 16
	public virtual void set_Credentials(ICredentials value) { }

	// RVA: 0x111FF20 Offset: 0x111FF20 VA: 0x111FF20
	public static RequestCachePolicy get_DefaultCachePolicy() { }

	// RVA: 0x111FF8C Offset: 0x111FF8C VA: 0x111FF8C
	public static void set_DefaultCachePolicy(RequestCachePolicy value) { }

	// RVA: 0x111FFF8 Offset: 0x111FFF8 VA: 0x111FFF8 Slot: 17
	public virtual WebHeaderCollection get_Headers() { }

	// RVA: 0x1120064 Offset: 0x1120064 VA: 0x1120064 Slot: 18
	public virtual void set_Headers(WebHeaderCollection value) { }

	// RVA: 0x11200D0 Offset: 0x11200D0 VA: 0x11200D0
	public TokenImpersonationLevel get_ImpersonationLevel() { }

	// RVA: 0x112013C Offset: 0x112013C VA: 0x112013C
	public void set_ImpersonationLevel(TokenImpersonationLevel value) { }

	// RVA: 0x11201A8 Offset: 0x11201A8 VA: 0x11201A8 Slot: 19
	public virtual string get_Method() { }

	// RVA: 0x1120214 Offset: 0x1120214 VA: 0x1120214 Slot: 20
	public virtual void set_Method(string value) { }

	// RVA: 0x1120280 Offset: 0x1120280 VA: 0x1120280 Slot: 21
	public virtual bool get_PreAuthenticate() { }

	// RVA: 0x11202EC Offset: 0x11202EC VA: 0x11202EC Slot: 22
	public virtual void set_PreAuthenticate(bool value) { }

	// RVA: 0x1120358 Offset: 0x1120358 VA: 0x1120358 Slot: 23
	public virtual IWebProxy get_Proxy() { }

	// RVA: 0x11203C4 Offset: 0x11203C4 VA: 0x11203C4 Slot: 24
	public virtual void set_Proxy(IWebProxy value) { }

	// RVA: 0x1120430 Offset: 0x1120430 VA: 0x1120430 Slot: 25
	public virtual Uri get_RequestUri() { }

	// RVA: 0x112049C Offset: 0x112049C VA: 0x112049C Slot: 26
	public virtual int get_Timeout() { }

	// RVA: 0x1120508 Offset: 0x1120508 VA: 0x1120508 Slot: 27
	public virtual void set_Timeout(int value) { }

	// RVA: 0x1120574 Offset: 0x1120574 VA: 0x1120574 Slot: 28
	public virtual bool get_UseDefaultCredentials() { }

	// RVA: 0x11205E0 Offset: 0x11205E0 VA: 0x11205E0 Slot: 29
	public virtual void set_UseDefaultCredentials(bool value) { }

	// RVA: 0x112064C Offset: 0x112064C VA: 0x112064C
	public static IWebProxy get_DefaultWebProxy() { }

	// RVA: 0x11207A8 Offset: 0x11207A8 VA: 0x11207A8
	public static void set_DefaultWebProxy(IWebProxy value) { }

	[MonoTODOAttribute] // RVA: 0xC3E224 Offset: 0xC3E224 VA: 0xC3E224
	// RVA: 0x11207A0 Offset: 0x11207A0 VA: 0x11207A0
	private static IWebProxy GetDefaultWebProxy() { }

	// RVA: 0x1120820 Offset: 0x1120820 VA: 0x1120820 Slot: 30
	public virtual void Abort() { }

	// RVA: 0x112088C Offset: 0x112088C VA: 0x112088C Slot: 31
	public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0x11208F8 Offset: 0x11208F8 VA: 0x11208F8 Slot: 32
	public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0x1120964 Offset: 0x1120964 VA: 0x1120964
	public static WebRequest Create(string requestUriString) { }

	// RVA: 0x1120A30 Offset: 0x1120A30 VA: 0x1120A30
	public static WebRequest Create(Uri requestUri) { }

	// RVA: 0x1120F5C Offset: 0x1120F5C VA: 0x1120F5C
	public static WebRequest CreateDefault(Uri requestUri) { }

	// RVA: 0x11210D0 Offset: 0x11210D0 VA: 0x11210D0 Slot: 33
	public virtual Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0x112113C Offset: 0x112113C VA: 0x112113C Slot: 34
	public virtual WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0x11211A8 Offset: 0x11211A8 VA: 0x11211A8 Slot: 35
	public virtual Stream GetRequestStream() { }

	// RVA: 0x1121214 Offset: 0x1121214 VA: 0x1121214 Slot: 36
	public virtual WebResponse GetResponse() { }

	[MonoTODOAttribute] // RVA: 0xC3E25C Offset: 0xC3E25C VA: 0xC3E25C
	// RVA: 0x1121280 Offset: 0x1121280 VA: 0x1121280
	public static IWebProxy GetSystemWebProxy() { }

	// RVA: 0x1121640 Offset: 0x1121640 VA: 0x1121640 Slot: 37
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x11216AC Offset: 0x11216AC VA: 0x11216AC
	public static bool RegisterPrefix(string prefix, IWebRequestCreate creator) { }

	// RVA: 0x1120BA4 Offset: 0x1120BA4 VA: 0x1120BA4
	private static IWebRequestCreate GetCreator(string prefix) { }

	// RVA: 0x11218EC Offset: 0x11218EC VA: 0x11218EC
	internal static void ClearPrefixes() { }

	// RVA: 0x1121968 Offset: 0x1121968 VA: 0x1121968
	internal static void RemovePrefix(string prefix) { }

	// RVA: 0x11219EC Offset: 0x11219EC VA: 0x11219EC
	internal static void AddPrefix(string prefix, string typeName) { }

	// RVA: 0x111FA2C Offset: 0x111FA2C VA: 0x111FA2C
	internal static void AddPrefix(string prefix, Type type) { }
}

// Namespace: System.Net
public static class WebRequestMethods // TypeDefIndex: 1632
{}

// Namespace: 
public static class WebRequestMethods.File // TypeDefIndex: 1633
{
	// Fields
	public const string DownloadFile = "GET";
	public const string UploadFile = "PUT";
}

// Namespace: 
public static class WebRequestMethods.Ftp // TypeDefIndex: 1634
{
	// Fields
	public const string AppendFile = "APPE";
	public const string DeleteFile = "DELE";
	public const string DownloadFile = "RETR";
	public const string GetFileSize = "SIZE";
	public const string GetDateTimestamp = "MDTM";
	public const string ListDirectory = "NLST";
	public const string ListDirectoryDetails = "LIST";
	public const string MakeDirectory = "MKD";
	public const string PrintWorkingDirectory = "PWD";
	public const string RemoveDirectory = "RMD";
	public const string Rename = "RENAME";
	public const string UploadFile = "STOR";
	public const string UploadFileWithUniqueName = "STOU";
}

// Namespace: 
public static class WebRequestMethods.Http // TypeDefIndex: 1635
{
	// Fields
	public const string Connect = "CONNECT";
	public const string Get = "GET";
	public const string Head = "HEAD";
	public const string MkCol = "MKCOL";
	public const string Post = "POST";
	public const string Put = "PUT";
}

// Namespace: System.Net
[Serializable]
public abstract class WebResponse : MarshalByRefObject, IDisposable, ISerializable // TypeDefIndex: 1636
{
	// Properties
	public virtual long ContentLength { get; set; }
	public virtual string ContentType { get; set; }
	public virtual WebHeaderCollection Headers { get; }
	[MonoTODOAttribute] // RVA: 0xC3FAE0 Offset: 0xC3FAE0 VA: 0xC3FAE0
	public virtual bool IsFromCache { get; }
	[MonoTODOAttribute] // RVA: 0xC3FAF0 Offset: 0xC3FAF0 VA: 0xC3FAF0
	public virtual bool IsMutuallyAuthenticated { get; }
	public virtual Uri ResponseUri { get; }

	// Methods

	// RVA: 0x1121B30 Offset: 0x1121B30 VA: 0x1121B30
	protected void .ctor() { }

	// RVA: 0x1121B38 Offset: 0x1121B38 VA: 0x1121B38
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1121BB0 Offset: 0x1121BB0 VA: 0x1121BB0 Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1121BC0 Offset: 0x1121BC0 VA: 0x1121BC0 Slot: 7
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1121C28 Offset: 0x1121C28 VA: 0x1121C28 Slot: 8
	public virtual long get_ContentLength() { }

	// RVA: 0x1121C90 Offset: 0x1121C90 VA: 0x1121C90 Slot: 9
	public virtual void set_ContentLength(long value) { }

	// RVA: 0x1121CF8 Offset: 0x1121CF8 VA: 0x1121CF8 Slot: 10
	public virtual string get_ContentType() { }

	// RVA: 0x1121D60 Offset: 0x1121D60 VA: 0x1121D60 Slot: 11
	public virtual void set_ContentType(string value) { }

	// RVA: 0x1121DC8 Offset: 0x1121DC8 VA: 0x1121DC8 Slot: 12
	public virtual WebHeaderCollection get_Headers() { }

	// RVA: 0x1121E30 Offset: 0x1121E30 VA: 0x1121E30
	private static Exception GetMustImplement() { }

	// RVA: 0x1121E8C Offset: 0x1121E8C VA: 0x1121E8C Slot: 13
	public virtual bool get_IsFromCache() { }

	// RVA: 0x1121ED8 Offset: 0x1121ED8 VA: 0x1121ED8 Slot: 14
	public virtual bool get_IsMutuallyAuthenticated() { }

	// RVA: 0x1121F24 Offset: 0x1121F24 VA: 0x1121F24 Slot: 15
	public virtual Uri get_ResponseUri() { }

	// RVA: 0x1121F8C Offset: 0x1121F8C VA: 0x1121F8C Slot: 16
	public virtual void Close() { }

	// RVA: 0x1121FF4 Offset: 0x1121FF4 VA: 0x1121FF4 Slot: 17
	public virtual Stream GetResponseStream() { }

	[MonoTODOAttribute] // RVA: 0xC3E294 Offset: 0xC3E294 VA: 0xC3E294
	// RVA: 0x112205C Offset: 0x112205C VA: 0x112205C Slot: 18
	protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Security.Authentication
public enum CipherAlgorithmType // TypeDefIndex: 1637
{
	// Fields
	public int value__; // 0x0
	public const CipherAlgorithmType None = 0;
	public const CipherAlgorithmType Aes = 26129;
	public const CipherAlgorithmType Aes128 = 26126;
	public const CipherAlgorithmType Aes192 = 26127;
	public const CipherAlgorithmType Aes256 = 26128;
	public const CipherAlgorithmType Des = 26113;
	public const CipherAlgorithmType Rc2 = 26114;
	public const CipherAlgorithmType Rc4 = 26625;
	public const CipherAlgorithmType TripleDes = 26115;
}

// Namespace: System.Security.Authentication
public enum ExchangeAlgorithmType // TypeDefIndex: 1638
{
	// Fields
	public int value__; // 0x0
	public const ExchangeAlgorithmType None = 0;
	public const ExchangeAlgorithmType DiffieHellman = 43522;
	public const ExchangeAlgorithmType RsaKeyX = 41984;
	public const ExchangeAlgorithmType RsaSign = 9216;
}

// Namespace: System.Security.Authentication
public enum HashAlgorithmType // TypeDefIndex: 1639
{
	// Fields
	public int value__; // 0x0
	public const HashAlgorithmType None = 0;
	public const HashAlgorithmType Md5 = 32771;
	public const HashAlgorithmType Sha1 = 32772;
}

// Namespace: System.Security.Authentication
[FlagsAttribute] // RVA: 0xC3CB0C Offset: 0xC3CB0C VA: 0xC3CB0C
public enum SslProtocols // TypeDefIndex: 1640
{
	// Fields
	public int value__; // 0x0
	public const SslProtocols None = 0;
	public const SslProtocols Ssl2 = 12;
	public const SslProtocols Ssl3 = 48;
	public const SslProtocols Tls = 192;
	public const SslProtocols Default = 240;
}

// Namespace: Mono.Security.X509
internal class OSX509Certificates // TypeDefIndex: 1641
{
	// Fields
	private static IntPtr sslsecpolicy; // 0x0

	// Methods

	// RVA: 0x10A68EC Offset: 0x10A68EC VA: 0x10A68EC
	private static void .cctor() { }

	// RVA: 0x10A69F4 Offset: 0x10A69F4 VA: 0x10A69F4
	private static extern IntPtr SecCertificateCreateWithData(IntPtr allocator, IntPtr nsdataRef) { }

	// RVA: 0x10A6AA0 Offset: 0x10A6AA0 VA: 0x10A6AA0
	private static extern int SecTrustCreateWithCertificates(IntPtr certOrCertArray, IntPtr policies, out IntPtr sectrustref) { }

	// RVA: 0x10A6948 Offset: 0x10A6948 VA: 0x10A6948
	private static extern IntPtr SecPolicyCreateSSL(int server, IntPtr cfStringHostname) { }

	// RVA: 0x10A6B54 Offset: 0x10A6B54 VA: 0x10A6B54
	private static extern int SecTrustEvaluate(IntPtr secTrustRef, out OSX509Certificates.SecTrustResult secTrustResultTime) { }

	// RVA: 0x10A6BFC Offset: 0x10A6BFC VA: 0x10A6BFC
	private static extern IntPtr CFDataCreate(IntPtr allocator, byte* bytes, IntPtr length) { }

	// RVA: 0x10A6CB0 Offset: 0x10A6CB0 VA: 0x10A6CB0
	private static extern void CFRelease(IntPtr handle) { }

	// RVA: 0x10A6D4C Offset: 0x10A6D4C VA: 0x10A6D4C
	private static extern IntPtr CFArrayCreate(IntPtr allocator, IntPtr values, IntPtr numValues, IntPtr callbacks) { }

	// RVA: 0x10A6E10 Offset: 0x10A6E10 VA: 0x10A6E10
	private static IntPtr MakeCFData(byte[] data) { }

	// RVA: 0x10A6EB8 Offset: 0x10A6EB8 VA: 0x10A6EB8
	private static IntPtr FromIntPtrs(IntPtr[] values) { }

	// RVA: 0x10A6F78 Offset: 0x10A6F78 VA: 0x10A6F78
	public static OSX509Certificates.SecTrustResult TrustEvaluateSsl(X509CertificateCollection certificates) { }

	// RVA: 0x10A7054 Offset: 0x10A7054 VA: 0x10A7054
	private static OSX509Certificates.SecTrustResult _TrustEvaluateSsl(X509CertificateCollection certificates) { }
}

// Namespace: 
public enum OSX509Certificates.SecTrustResult // TypeDefIndex: 1642
{
	// Fields
	public int value__; // 0x0
	public const OSX509Certificates.SecTrustResult Invalid = 0;
	public const OSX509Certificates.SecTrustResult Proceed = 1;
	public const OSX509Certificates.SecTrustResult Confirm = 2;
	public const OSX509Certificates.SecTrustResult Deny = 3;
	public const OSX509Certificates.SecTrustResult Unspecified = 4;
	public const OSX509Certificates.SecTrustResult RecoverableTrustFailure = 5;
	public const OSX509Certificates.SecTrustResult FatalTrustFailure = 6;
	public const OSX509Certificates.SecTrustResult ResultOtherError = 7;
}

// Namespace: System.Security.Cryptography.X509Certificates
[FlagsAttribute] // RVA: 0xC3CB1C Offset: 0xC3CB1C VA: 0xC3CB1C
public enum OpenFlags // TypeDefIndex: 1643
{
	// Fields
	public int value__; // 0x0
	public const OpenFlags ReadOnly = 0;
	public const OpenFlags ReadWrite = 1;
	public const OpenFlags MaxAllowed = 2;
	public const OpenFlags OpenExistingOnly = 4;
	public const OpenFlags IncludeArchived = 8;
}

// Namespace: System.Security.Cryptography.X509Certificates
public sealed class PublicKey // TypeDefIndex: 1644
{
	// Fields
