	protected void .ctor() { }

	// RVA: 0x1F09334 Offset: 0x1F09334 VA: 0x1F09334
	public static byte[] AsUnsignedByteArray(BigInteger n) { }

	// RVA: 0x1F09360 Offset: 0x1F09360 VA: 0x1F09360
	public static byte[] AsUnsignedByteArray(int length, BigInteger n) { }

	// RVA: 0x1F09478 Offset: 0x1F09478 VA: 0x1F09478
	public static BigInteger CreateRandomInRange(BigInteger min, BigInteger max, SecureRandom random) { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public abstract class CollectionUtilities // TypeDefIndex: 5191
{
	// Methods

	// RVA: 0x1F09714 Offset: 0x1F09714 VA: 0x1F09714
	protected void .ctor() { }

	// RVA: 0x1F0971C Offset: 0x1F0971C VA: 0x1F0971C
	public static void AddRange(IList to, IEnumerable range) { }

	// RVA: 0x1F09A2C Offset: 0x1F09A2C VA: 0x1F09A2C
	public static bool CheckElementsAreOfType(IEnumerable e, Type t) { }

	// RVA: 0x1F09D24 Offset: 0x1F09D24 VA: 0x1F09D24
	public static IDictionary ReadOnly(IDictionary d) { }

	// RVA: 0x1F09D28 Offset: 0x1F09D28 VA: 0x1F09D28
	public static IList ReadOnly(IList l) { }

	// RVA: 0x1F09D2C Offset: 0x1F09D2C VA: 0x1F09D2C
	public static ISet ReadOnly(ISet s) { }

	// RVA: 0x1F09D30 Offset: 0x1F09D30 VA: 0x1F09D30
	public static string ToString(IEnumerable c) { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public sealed class EmptyEnumerable : IEnumerable // TypeDefIndex: 5192
{
	// Fields
	public static readonly IEnumerable Instance; // 0x0

	// Methods

	// RVA: 0x1F0A0C8 Offset: 0x1F0A0C8 VA: 0x1F0A0C8
	private void .ctor() { }

	// RVA: 0x1F0A0D0 Offset: 0x1F0A0D0 VA: 0x1F0A0D0 Slot: 4
	public IEnumerator GetEnumerator() { }

	// RVA: 0x1F0A138 Offset: 0x1F0A138 VA: 0x1F0A138
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public sealed class EmptyEnumerator : IEnumerator // TypeDefIndex: 5193
{
	// Fields
	public static readonly IEnumerator Instance; // 0x0

	// Properties
	public object Current { get; }

	// Methods

	// RVA: 0x1F0A19C Offset: 0x1F0A19C VA: 0x1F0A19C
	private void .ctor() { }

	// RVA: 0x1F0A1A4 Offset: 0x1F0A1A4 VA: 0x1F0A1A4 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x1F0A1AC Offset: 0x1F0A1AC VA: 0x1F0A1AC Slot: 6
	public void Reset() { }

	// RVA: 0x1F0A1B0 Offset: 0x1F0A1B0 VA: 0x1F0A1B0 Slot: 4
	public object get_Current() { }

	// RVA: 0x1F0A224 Offset: 0x1F0A224 VA: 0x1F0A224
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public sealed class EnumerableProxy : IEnumerable // TypeDefIndex: 5194
{
	// Fields
	private readonly IEnumerable inner; // 0x10

	// Methods

	// RVA: 0x1F0A288 Offset: 0x1F0A288 VA: 0x1F0A288
	public void .ctor(IEnumerable inner) { }

	// RVA: 0x1F0A32C Offset: 0x1F0A32C VA: 0x1F0A32C Slot: 4
	public IEnumerator GetEnumerator() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public class HashSet : ISet, ICollection, IEnumerable // TypeDefIndex: 5195
{
	// Fields
	private readonly IDictionary impl; // 0x10

	// Properties
	public virtual int Count { get; }
	public virtual bool IsEmpty { get; }
	public virtual bool IsFixedSize { get; }
	public virtual bool IsReadOnly { get; }
	public virtual bool IsSynchronized { get; }
	public virtual object SyncRoot { get; }

	// Methods

	// RVA: 0x1F0A3E0 Offset: 0x1F0A3E0 VA: 0x1F0A3E0
	public void .ctor() { }

	// RVA: 0x1F0A4AC Offset: 0x1F0A4AC VA: 0x1F0A4AC
	public void .ctor(IEnumerable s) { }

	// RVA: 0x1F0A77C Offset: 0x1F0A77C VA: 0x1F0A77C Slot: 18
	public virtual void Add(object o) { }

	// RVA: 0x1F0A848 Offset: 0x1F0A848 VA: 0x1F0A848 Slot: 19
	public virtual void AddAll(IEnumerable e) { }

	// RVA: 0x1F0AAE4 Offset: 0x1F0AAE4 VA: 0x1F0AAE4 Slot: 20
	public virtual void Clear() { }

	// RVA: 0x1F0AB9C Offset: 0x1F0AB9C VA: 0x1F0AB9C Slot: 21
	public virtual bool Contains(object o) { }

	// RVA: 0x1F0AC64 Offset: 0x1F0AC64 VA: 0x1F0AC64 Slot: 22
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x1F0ADAC Offset: 0x1F0ADAC VA: 0x1F0ADAC Slot: 23
	public virtual int get_Count() { }

	// RVA: 0x1F0AE60 Offset: 0x1F0AE60 VA: 0x1F0AE60 Slot: 24
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x1F0AF8C Offset: 0x1F0AF8C VA: 0x1F0AF8C Slot: 25
	public virtual bool get_IsEmpty() { }

	// RVA: 0x1F0B04C Offset: 0x1F0B04C VA: 0x1F0B04C Slot: 26
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x1F0B100 Offset: 0x1F0B100 VA: 0x1F0B100 Slot: 27
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x1F0B1B8 Offset: 0x1F0B1B8 VA: 0x1F0B1B8 Slot: 28
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x1F0B270 Offset: 0x1F0B270 VA: 0x1F0B270 Slot: 29
	public virtual void Remove(object o) { }

	// RVA: 0x1F0B338 Offset: 0x1F0B338 VA: 0x1F0B338 Slot: 30
	public virtual void RemoveAll(IEnumerable e) { }

	// RVA: 0x1F0B5D4 Offset: 0x1F0B5D4 VA: 0x1F0B5D4 Slot: 31
	public virtual object get_SyncRoot() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public interface ISet : ICollection, IEnumerable // TypeDefIndex: 5196
{
	// Properties
	public abstract bool IsEmpty { get; }
	public abstract bool IsFixedSize { get; }
	public abstract bool IsReadOnly { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Add(object o);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void AddAll(IEnumerable e);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Clear();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool Contains(object o);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_IsEmpty();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsFixedSize();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void Remove(object o);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void RemoveAll(IEnumerable e);
}

// Namespace: Org.BouncyCastle.Utilities.Date
public sealed class DateTimeObject // TypeDefIndex: 5197
{
	// Fields
	private readonly DateTime dt; // 0x10

	// Properties
	public DateTime Value { get; }

	// Methods

	// RVA: 0x1F0B68C Offset: 0x1F0B68C VA: 0x1F0B68C
	public void .ctor(DateTime dt) { }

	// RVA: 0x1F0B6C4 Offset: 0x1F0B6C4 VA: 0x1F0B6C4
	public DateTime get_Value() { }

	// RVA: 0x1F0B6D0 Offset: 0x1F0B6D0 VA: 0x1F0B6D0 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Utilities.Date
public class DateTimeUtilities // TypeDefIndex: 5198
{
	// Fields
	public static readonly DateTime UnixEpoch; // 0x0

	// Methods

	// RVA: 0x1F0B6FC Offset: 0x1F0B6FC VA: 0x1F0B6FC
	private void .ctor() { }

	// RVA: 0x1F0B704 Offset: 0x1F0B704 VA: 0x1F0B704
	public static long DateTimeToUnixMs(DateTime dateTime) { }

	// RVA: 0x1F0B844 Offset: 0x1F0B844 VA: 0x1F0B844
	public static DateTime UnixMsToDateTime(long unixMs) { }

	// RVA: 0x1F0B8E8 Offset: 0x1F0B8E8 VA: 0x1F0B8E8
	public static long CurrentUnixMs() { }

	// RVA: 0x1F0B97C Offset: 0x1F0B97C VA: 0x1F0B97C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public sealed class Base64 // TypeDefIndex: 5199
{
	// Methods

	// RVA: 0x1F0B9F4 Offset: 0x1F0B9F4 VA: 0x1F0B9F4
	private void .ctor() { }

	// RVA: 0x1F0B9FC Offset: 0x1F0B9FC VA: 0x1F0B9FC
	public static string ToBase64String(byte[] data) { }

	// RVA: 0x1F0BA78 Offset: 0x1F0BA78 VA: 0x1F0BA78
	public static string ToBase64String(byte[] data, int off, int length) { }

	// RVA: 0x1F0BAF8 Offset: 0x1F0BAF8 VA: 0x1F0BAF8
	public static byte[] Encode(byte[] data) { }

	// RVA: 0x1F0BB28 Offset: 0x1F0BB28 VA: 0x1F0BB28
	public static byte[] Encode(byte[] data, int off, int length) { }

	// RVA: 0x1F0BC30 Offset: 0x1F0BC30 VA: 0x1F0BC30
	public static int Encode(byte[] data, Stream outStream) { }

	// RVA: 0x1F0BCA0 Offset: 0x1F0BCA0 VA: 0x1F0BCA0
	public static int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x1F0BD10 Offset: 0x1F0BD10 VA: 0x1F0BD10
	public static byte[] Decode(byte[] data) { }

	// RVA: 0x1F0BE30 Offset: 0x1F0BE30 VA: 0x1F0BE30
	public static byte[] Decode(string data) { }

	// RVA: 0x1F0BE98 Offset: 0x1F0BE98 VA: 0x1F0BE98
	public static int Decode(string data, Stream outStream) { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public class Base64Encoder : IEncoder // TypeDefIndex: 5200
{
	// Fields
	protected readonly byte[] encodingTable; // 0x10
	protected byte padding; // 0x18
	protected readonly byte[] decodingTable; // 0x20

	// Methods

	// RVA: 0x1F0BF08 Offset: 0x1F0BF08 VA: 0x1F0BF08
	public void .ctor() { }

	// RVA: 0x1F0BFA8 Offset: 0x1F0BFA8 VA: 0x1F0BFA8
	protected void InitialiseDecodingTable() { }

	// RVA: 0x1F0C074 Offset: 0x1F0C074 VA: 0x1F0C074 Slot: 4
	public int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x1F0C5A0 Offset: 0x1F0C5A0 VA: 0x1F0C5A0
	private bool ignore(char c) { }

	// RVA: 0x1F0C5CC Offset: 0x1F0C5CC VA: 0x1F0C5CC Slot: 5
	public int Decode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x1F0CAAC Offset: 0x1F0CAAC VA: 0x1F0CAAC
	private int nextI(byte[] data, int i, int finish) { }

	// RVA: 0x1F0CEAC Offset: 0x1F0CEAC VA: 0x1F0CEAC Slot: 6
	public int DecodeString(string data, Stream outStream) { }

	// RVA: 0x1F0CB4C Offset: 0x1F0CB4C VA: 0x1F0CB4C
	private int decodeLastBlock(Stream outStream, char c1, char c2, char c3, char c4) { }

	// RVA: 0x1F0D364 Offset: 0x1F0D364 VA: 0x1F0D364
	private int nextI(string data, int i, int finish) { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public sealed class Hex // TypeDefIndex: 5201
{
	// Fields
	private static readonly IEncoder encoder; // 0x0

	// Methods

	// RVA: 0x1F0D3F0 Offset: 0x1F0D3F0 VA: 0x1F0D3F0
	private void .ctor() { }

	// RVA: 0x1F0D3F8 Offset: 0x1F0D3F8 VA: 0x1F0D3F8
	public static string ToHexString(byte[] data) { }

	// RVA: 0x1F0D470 Offset: 0x1F0D470 VA: 0x1F0D470
	public static string ToHexString(byte[] data, int off, int length) { }

	// RVA: 0x1F0D634 Offset: 0x1F0D634 VA: 0x1F0D634
	public static byte[] Encode(byte[] data) { }

	// RVA: 0x1F0D4F0 Offset: 0x1F0D4F0 VA: 0x1F0D4F0
	public static byte[] Encode(byte[] data, int off, int length) { }

	// RVA: 0x1F0D6AC Offset: 0x1F0D6AC VA: 0x1F0D6AC
	public static int Encode(byte[] data, Stream outStream) { }

	// RVA: 0x1F0D7BC Offset: 0x1F0D7BC VA: 0x1F0D7BC
	public static int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x1F0D8C4 Offset: 0x1F0D8C4 VA: 0x1F0D8C4
	public static byte[] Decode(byte[] data) { }

	// RVA: 0x1F0DA20 Offset: 0x1F0DA20 VA: 0x1F0DA20
	public static byte[] Decode(string data) { }

	// RVA: 0x1F0DB80 Offset: 0x1F0DB80 VA: 0x1F0DB80
	public static int Decode(string data, Stream outStream) { }

	// RVA: 0x1F0DC74 Offset: 0x1F0DC74 VA: 0x1F0DC74
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public class HexEncoder : IEncoder // TypeDefIndex: 5202
{
	// Fields
	protected readonly byte[] encodingTable; // 0x10
	protected readonly byte[] decodingTable; // 0x18

	// Methods

	// RVA: 0x1F0DCDC Offset: 0x1F0DCDC VA: 0x1F0DCDC
	public void .ctor() { }

	// RVA: 0x1F0DD74 Offset: 0x1F0DD74 VA: 0x1F0DD74
	protected void InitialiseDecodingTable() { }

	// RVA: 0x1F0E01C Offset: 0x1F0E01C VA: 0x1F0E01C Slot: 4
	public int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x1F0E16C Offset: 0x1F0E16C VA: 0x1F0E16C
	private static bool Ignore(char c) { }

	// RVA: 0x1F0E198 Offset: 0x1F0E198 VA: 0x1F0E198 Slot: 5
	public int Decode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x1F0E4E0 Offset: 0x1F0E4E0 VA: 0x1F0E4E0 Slot: 6
	public int DecodeString(string data, Stream outStream) { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public interface IEncoder // TypeDefIndex: 5203
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Encode(byte[] data, int off, int length, Stream outStream);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int Decode(byte[] data, int off, int length, Stream outStream);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int DecodeString(string data, Stream outStream);
}

// Namespace: Org.BouncyCastle.Utilities
internal abstract class Enums // TypeDefIndex: 5204
{
	// Methods

	// RVA: 0x1F0E7E0 Offset: 0x1F0E7E0 VA: 0x1F0E7E0
	protected void .ctor() { }

	// RVA: 0x1F0E7E8 Offset: 0x1F0E7E8 VA: 0x1F0E7E8
	internal static Enum GetEnumValue(Type enumType, string s) { }

	// RVA: 0x1F0E9F4 Offset: 0x1F0E9F4 VA: 0x1F0E9F4
	internal static Array GetEnumValues(Type enumType) { }

	// RVA: 0x1F0EA5C Offset: 0x1F0EA5C VA: 0x1F0EA5C
	internal static Enum GetArbitraryValue(Type enumType) { }

	// RVA: 0x1F0EB9C Offset: 0x1F0EB9C VA: 0x1F0EB9C
	internal static bool IsEnumType(Type t) { }
}

// Namespace: Org.BouncyCastle.Utilities
public interface IMemoable // TypeDefIndex: 5205
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMemoable Copy();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Reset(IMemoable other);
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class Integers // TypeDefIndex: 5206
{
	// Methods

	// RVA: 0x1F11C94 Offset: 0x1F11C94 VA: 0x1F11C94
	protected void .ctor() { }

	// RVA: 0x1F11C9C Offset: 0x1F11C9C VA: 0x1F11C9C
	public static int RotateLeft(int i, int distance) { }

	// RVA: 0x1F11CB8 Offset: 0x1F11CB8 VA: 0x1F11CB8
	public static int RotateRight(int i, int distance) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public abstract class BaseInputStream : Stream // TypeDefIndex: 5207
{
	// Fields
	private bool closed; // 0x10

	// Properties
	public sealed override bool CanRead { get; }
	public sealed override bool CanSeek { get; }
	public sealed override bool CanWrite { get; }
	public sealed override long Length { get; }
	public sealed override long Position { get; set; }

	// Methods

	// RVA: 0x1F0EBC8 Offset: 0x1F0EBC8 VA: 0x1F0EBC8
	protected void .ctor() { }

	// RVA: 0x1F0EC30 Offset: 0x1F0EC30 VA: 0x1F0EC30 Slot: 5
	public sealed override bool get_CanRead() { }

	// RVA: 0x1F0EC40 Offset: 0x1F0EC40 VA: 0x1F0EC40 Slot: 6
	public sealed override bool get_CanSeek() { }

	// RVA: 0x1F0EC48 Offset: 0x1F0EC48 VA: 0x1F0EC48 Slot: 7
	public sealed override bool get_CanWrite() { }

	// RVA: 0x1F0EC50 Offset: 0x1F0EC50 VA: 0x1F0EC50 Slot: 13
	public override void Close() { }

	// RVA: 0x1F0EC60 Offset: 0x1F0EC60 VA: 0x1F0EC60 Slot: 18
	public sealed override void Flush() { }

	// RVA: 0x1F0EC64 Offset: 0x1F0EC64 VA: 0x1F0EC64 Slot: 9
	public sealed override long get_Length() { }

	// RVA: 0x1F0ECCC Offset: 0x1F0ECCC VA: 0x1F0ECCC Slot: 10
	public sealed override long get_Position() { }

	// RVA: 0x1F0ED34 Offset: 0x1F0ED34 VA: 0x1F0ED34 Slot: 11
	public sealed override void set_Position(long value) { }

	// RVA: 0x1F0ED9C Offset: 0x1F0ED9C VA: 0x1F0ED9C Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F0EF18 Offset: 0x1F0EF18 VA: 0x1F0EF18 Slot: 21
	public sealed override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1F0EF80 Offset: 0x1F0EF80 VA: 0x1F0EF80 Slot: 22
	public sealed override void SetLength(long value) { }

	// RVA: 0x1F0EFE8 Offset: 0x1F0EFE8 VA: 0x1F0EFE8 Slot: 23
	public sealed override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public abstract class BaseOutputStream : Stream // TypeDefIndex: 5208
{
	// Fields
	private bool closed; // 0x10

	// Properties
	public sealed override bool CanRead { get; }
	public sealed override bool CanSeek { get; }
	public sealed override bool CanWrite { get; }
	public sealed override long Length { get; }
	public sealed override long Position { get; set; }

	// Methods

	// RVA: 0x1F0F050 Offset: 0x1F0F050 VA: 0x1F0F050
	protected void .ctor() { }

	// RVA: 0x1F0F0B8 Offset: 0x1F0F0B8 VA: 0x1F0F0B8 Slot: 5
	public sealed override bool get_CanRead() { }

	// RVA: 0x1F0F0C0 Offset: 0x1F0F0C0 VA: 0x1F0F0C0 Slot: 6
	public sealed override bool get_CanSeek() { }

	// RVA: 0x1F0F0C8 Offset: 0x1F0F0C8 VA: 0x1F0F0C8 Slot: 7
	public sealed override bool get_CanWrite() { }

	// RVA: 0x1F0F0D8 Offset: 0x1F0F0D8 VA: 0x1F0F0D8 Slot: 13
	public override void Close() { }

	// RVA: 0x1F0F0E8 Offset: 0x1F0F0E8 VA: 0x1F0F0E8 Slot: 18
	public override void Flush() { }

	// RVA: 0x1F0F0EC Offset: 0x1F0F0EC VA: 0x1F0F0EC Slot: 9
	public sealed override long get_Length() { }

	// RVA: 0x1F0F154 Offset: 0x1F0F154 VA: 0x1F0F154 Slot: 10
	public sealed override long get_Position() { }

	// RVA: 0x1F0F1BC Offset: 0x1F0F1BC VA: 0x1F0F1BC Slot: 11
	public sealed override void set_Position(long value) { }

	// RVA: 0x1F0F224 Offset: 0x1F0F224 VA: 0x1F0F224 Slot: 19
	public sealed override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F0F28C Offset: 0x1F0F28C VA: 0x1F0F28C Slot: 21
	public sealed override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1F0F2F4 Offset: 0x1F0F2F4 VA: 0x1F0F2F4 Slot: 22
	public sealed override void SetLength(long value) { }

	// RVA: 0x1F0F35C Offset: 0x1F0F35C VA: 0x1F0F35C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F0F3F8 Offset: 0x1F0F3F8 VA: 0x1F0F3F8 Slot: 29
	public virtual void Write(byte[] buffer) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class FilterStream : Stream // TypeDefIndex: 5209
{
	// Fields
	protected readonly Stream s; // 0x10

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1F0F440 Offset: 0x1F0F440 VA: 0x1F0F440
	public void .ctor(Stream s) { }

	// RVA: 0x1F0F4BC Offset: 0x1F0F4BC VA: 0x1F0F4BC Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1F0F4F0 Offset: 0x1F0F4F0 VA: 0x1F0F4F0 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1F0F524 Offset: 0x1F0F524 VA: 0x1F0F524 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1F0F558 Offset: 0x1F0F558 VA: 0x1F0F558 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1F0F58C Offset: 0x1F0F58C VA: 0x1F0F58C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1F0F5C0 Offset: 0x1F0F5C0 VA: 0x1F0F5C0 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1F0F5FC Offset: 0x1F0F5FC VA: 0x1F0F5FC Slot: 13
	public override void Close() { }

	// RVA: 0x1F0F6BC Offset: 0x1F0F6BC VA: 0x1F0F6BC Slot: 18
	public override void Flush() { }

	// RVA: 0x1F0F6F4 Offset: 0x1F0F6F4 VA: 0x1F0F6F4 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1F0F744 Offset: 0x1F0F744 VA: 0x1F0F744 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1F0F784 Offset: 0x1F0F784 VA: 0x1F0F784 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F0F7DC Offset: 0x1F0F7DC VA: 0x1F0F7DC Slot: 20
	public override int ReadByte() { }

	// RVA: 0x1F0F814 Offset: 0x1F0F814 VA: 0x1F0F814 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F0F86C Offset: 0x1F0F86C VA: 0x1F0F86C Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
[Serializable]
public class PemGenerationException : Exception // TypeDefIndex: 5210
{
	// Methods

	// RVA: 0x1F0F8AC Offset: 0x1F0F8AC VA: 0x1F0F8AC
	public void .ctor() { }

	// RVA: 0x1F0F8B4 Offset: 0x1F0F8B4 VA: 0x1F0F8B4
	public void .ctor(string message) { }

	// RVA: 0x1F0F8BC Offset: 0x1F0F8BC VA: 0x1F0F8BC
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemHeader // TypeDefIndex: 5211
{
	// Fields
	private string name; // 0x10
	private string val; // 0x18

	// Properties
	public virtual string Name { get; }
	public virtual string Value { get; }

	// Methods

	// RVA: 0x1F0F8C4 Offset: 0x1F0F8C4 VA: 0x1F0F8C4
	public void .ctor(string name, string val) { }

	// RVA: 0x1F0F8FC Offset: 0x1F0F8FC VA: 0x1F0F8FC Slot: 4
	public virtual string get_Name() { }

	// RVA: 0x1F0F904 Offset: 0x1F0F904 VA: 0x1F0F904 Slot: 5
	public virtual string get_Value() { }

	// RVA: 0x1F0F90C Offset: 0x1F0F90C VA: 0x1F0F90C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1F0F990 Offset: 0x1F0F990 VA: 0x1F0F990 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1F0F970 Offset: 0x1F0F970 VA: 0x1F0F970
	private int GetHashCode(string s) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemObject : PemObjectGenerator // TypeDefIndex: 5212
{
	// Fields
	private string type; // 0x10
	private IList headers; // 0x18
	private byte[] content; // 0x20

	// Properties
	public string Type { get; }
	public IList Headers { get; }
	public byte[] Content { get; }

	// Methods

	// RVA: 0x1F0FA54 Offset: 0x1F0FA54 VA: 0x1F0FA54
	public void .ctor(string type, byte[] content) { }

	// RVA: 0x1F0FB34 Offset: 0x1F0FB34 VA: 0x1F0FB34
	public void .ctor(string type, IList headers, byte[] content) { }

	// RVA: 0x1F0FC30 Offset: 0x1F0FC30 VA: 0x1F0FC30
	public string get_Type() { }

	// RVA: 0x1F0FC38 Offset: 0x1F0FC38 VA: 0x1F0FC38
	public IList get_Headers() { }

	// RVA: 0x1F0FC40 Offset: 0x1F0FC40 VA: 0x1F0FC40
	public byte[] get_Content() { }

	// RVA: 0x1F0FC48 Offset: 0x1F0FC48 VA: 0x1F0FC48 Slot: 4
	public PemObject Generate() { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public interface PemObjectGenerator // TypeDefIndex: 5213
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract PemObject Generate();
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemReader // TypeDefIndex: 5214
{
	// Fields
	private const string BeginString = "-----BEGIN ";
	private const string EndString = "-----END ";
	private readonly TextReader reader; // 0x10

	// Properties
	public TextReader Reader { get; }

	// Methods

	// RVA: 0x1F0FC4C Offset: 0x1F0FC4C VA: 0x1F0FC4C
	public void .ctor(TextReader reader) { }

	// RVA: 0x1F0FCF0 Offset: 0x1F0FCF0 VA: 0x1F0FCF0
	public TextReader get_Reader() { }

	// RVA: 0x1F0FCF8 Offset: 0x1F0FCF8 VA: 0x1F0FCF8
	public PemObject ReadPemObject() { }

	// RVA: 0x1F0FEDC Offset: 0x1F0FEDC VA: 0x1F0FEDC
	private PemObject LoadObject(string type) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemWriter // TypeDefIndex: 5215
{
	// Fields
	private const int LineLength = 64;
	private readonly TextWriter writer; // 0x10
	private readonly int nlLength; // 0x18
	private char[] buf; // 0x20

	// Properties
	public TextWriter Writer { get; }

	// Methods

	// RVA: 0x1F10388 Offset: 0x1F10388 VA: 0x1F10388
	public void .ctor(TextWriter writer) { }

	// RVA: 0x1F1048C Offset: 0x1F1048C VA: 0x1F1048C
	public TextWriter get_Writer() { }

	// RVA: 0x1F10494 Offset: 0x1F10494 VA: 0x1F10494
	public int GetOutputSize(PemObject obj) { }

	// RVA: 0x1F109AC Offset: 0x1F109AC VA: 0x1F109AC
	public void WriteObject(PemObjectGenerator objGen) { }

	// RVA: 0x1F10FFC Offset: 0x1F10FFC VA: 0x1F10FFC
	private void WriteEncoded(byte[] bytes) { }

	// RVA: 0x1F10F44 Offset: 0x1F10F44 VA: 0x1F10F44
	private void WritePreEncapsulationBoundary(string type) { }

	// RVA: 0x1F1113C Offset: 0x1F1113C VA: 0x1F1113C
	private void WritePostEncapsulationBoundary(string type) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class PushbackStream : FilterStream // TypeDefIndex: 5216
{
	// Fields
	private int buf; // 0x18

	// Methods

	// RVA: 0x1F111F4 Offset: 0x1F111F4 VA: 0x1F111F4
	public void .ctor(Stream s) { }

	// RVA: 0x1F11200 Offset: 0x1F11200 VA: 0x1F11200 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x1F11254 Offset: 0x1F11254 VA: 0x1F11254 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F11320 Offset: 0x1F11320 VA: 0x1F11320 Slot: 29
	public virtual void Unread(int b) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
[Serializable]
public class StreamOverflowException : IOException // TypeDefIndex: 5217
{
	// Methods

	// RVA: 0x1F113C4 Offset: 0x1F113C4 VA: 0x1F113C4
	public void .ctor() { }

	// RVA: 0x1F113CC Offset: 0x1F113CC VA: 0x1F113CC
	public void .ctor(string message) { }

	// RVA: 0x1F113D4 Offset: 0x1F113D4 VA: 0x1F113D4
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public sealed class Streams // TypeDefIndex: 5218
{
	// Fields
	private const int BufferSize = 512;

	// Methods

	// RVA: 0x1F113DC Offset: 0x1F113DC VA: 0x1F113DC
	private void .ctor() { }

	// RVA: 0x1F113E4 Offset: 0x1F113E4 VA: 0x1F113E4
	public static void Drain(Stream inStr) { }

	// RVA: 0x1F11488 Offset: 0x1F11488 VA: 0x1F11488
	public static byte[] ReadAll(Stream inStr) { }

	// RVA: 0x1F115F0 Offset: 0x1F115F0 VA: 0x1F115F0
	public static byte[] ReadAllLimited(Stream inStr, int limit) { }

	// RVA: 0x1F117D4 Offset: 0x1F117D4 VA: 0x1F117D4
	public static int ReadFully(Stream inStr, byte[] buf) { }

	// RVA: 0x1F11810 Offset: 0x1F11810 VA: 0x1F11810
	public static int ReadFully(Stream inStr, byte[] buf, int off, int len) { }

	// RVA: 0x1F1150C Offset: 0x1F1150C VA: 0x1F1150C
	public static void PipeAll(Stream inStr, Stream outStr) { }

	// RVA: 0x1F11684 Offset: 0x1F11684 VA: 0x1F11684
	public static long PipeAllLimited(Stream inStr, long limit, Stream outStr) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class TeeInputStream : BaseInputStream // TypeDefIndex: 5219
{
	// Fields
	private readonly Stream input; // 0x18
	private readonly Stream tee; // 0x20

	// Methods

	// RVA: 0x1F11898 Offset: 0x1F11898 VA: 0x1F11898
	public void .ctor(Stream input, Stream tee) { }

	// RVA: 0x1F118CC Offset: 0x1F118CC VA: 0x1F118CC Slot: 13
	public override void Close() { }

	// RVA: 0x1F11984 Offset: 0x1F11984 VA: 0x1F11984 Slot: 19
	public override int Read(byte[] buf, int off, int len) { }

	// RVA: 0x1F11A2C Offset: 0x1F11A2C VA: 0x1F11A2C Slot: 20
	public override int ReadByte() { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class TeeOutputStream : BaseOutputStream // TypeDefIndex: 5220
{
	// Fields
	private readonly Stream output; // 0x18
	private readonly Stream tee; // 0x20

	// Methods

	// RVA: 0x1F11AA0 Offset: 0x1F11AA0 VA: 0x1F11AA0
	public void .ctor(Stream output, Stream tee) { }

	// RVA: 0x1F11AD4 Offset: 0x1F11AD4 VA: 0x1F11AD4 Slot: 13
	public override void Close() { }

	// RVA: 0x1F11B8C Offset: 0x1F11B8C VA: 0x1F11B8C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F11C20 Offset: 0x1F11C20 VA: 0x1F11C20 Slot: 24
	public override void WriteByte(byte b) { }
}

// Namespace: Org.BouncyCastle.Utilities
public class MemoableResetException : InvalidCastException // TypeDefIndex: 5221
{
	// Methods

	// RVA: 0x1F11CD4 Offset: 0x1F11CD4 VA: 0x1F11CD4
	public void .ctor(string msg) { }
}

// Namespace: Org.BouncyCastle.Utilities.Net
public class IPAddress // TypeDefIndex: 5222
{
	// Methods

	// RVA: 0x1F11CDC Offset: 0x1F11CDC VA: 0x1F11CDC
	public void .ctor() { }

	// RVA: 0x1F11CE4 Offset: 0x1F11CE4 VA: 0x1F11CE4
	public static bool IsValid(string address) { }

	// RVA: 0x1F11ED4 Offset: 0x1F11ED4 VA: 0x1F11ED4
	public static bool IsValidWithNetMask(string address) { }

	// RVA: 0x1F11D1C Offset: 0x1F11D1C VA: 0x1F11D1C
	public static bool IsValidIPv4(string address) { }

	// RVA: 0x1F120C4 Offset: 0x1F120C4 VA: 0x1F120C4
	private static bool unsafeIsValidIPv4(string address) { }

	// RVA: 0x1F11F0C Offset: 0x1F11F0C VA: 0x1F11F0C
	public static bool IsValidIPv4WithNetmask(string address) { }

	// RVA: 0x1F11FE8 Offset: 0x1F11FE8 VA: 0x1F11FE8
	public static bool IsValidIPv6WithNetmask(string address) { }

	// RVA: 0x1F12210 Offset: 0x1F12210 VA: 0x1F12210
	private static bool IsMaskValue(string component, int size) { }

	// RVA: 0x1F11DF8 Offset: 0x1F11DF8 VA: 0x1F11DF8
	public static bool IsValidIPv6(string address) { }

	// RVA: 0x1F1227C Offset: 0x1F1227C VA: 0x1F1227C
	private static bool unsafeIsValidIPv6(string address) { }
}

// Namespace: Org.BouncyCastle.Utilities
internal abstract class Platform // TypeDefIndex: 5223
{
	// Fields
	private static readonly CompareInfo InvariantCompareInfo; // 0x0
	internal static readonly string NewLine; // 0x8

	// Methods

	// RVA: 0x1F124C8 Offset: 0x1F124C8 VA: 0x1F124C8
	protected void .ctor() { }

	// RVA: 0x1F124D0 Offset: 0x1F124D0 VA: 0x1F124D0
	private static string GetNewLine() { }

	// RVA: 0x1F124D8 Offset: 0x1F124D8 VA: 0x1F124D8
	internal static bool EqualsIgnoreCase(string a, string b) { }

	// RVA: 0x1F12560 Offset: 0x1F12560 VA: 0x1F12560
	internal static string GetEnvironmentVariable(string variable) { }

	// RVA: 0x1F12620 Offset: 0x1F12620 VA: 0x1F12620
	internal static Exception CreateNotImplementedException(string message) { }

	// RVA: 0x1F0FAD8 Offset: 0x1F0FAD8 VA: 0x1F0FAD8
	internal static IList CreateArrayList() { }

	// RVA: 0x1F12684 Offset: 0x1F12684 VA: 0x1F12684
	internal static IList CreateArrayList(int capacity) { }

	// RVA: 0x1F0FBCC Offset: 0x1F0FBCC VA: 0x1F0FBCC
	internal static IList CreateArrayList(ICollection collection) { }

	// RVA: 0x1F126E8 Offset: 0x1F126E8 VA: 0x1F126E8
	internal static IList CreateArrayList(IEnumerable collection) { }

	// RVA: 0x1F0A450 Offset: 0x1F0A450 VA: 0x1F0A450
	internal static IDictionary CreateHashtable() { }

	// RVA: 0x1F129AC Offset: 0x1F129AC VA: 0x1F129AC
	internal static IDictionary CreateHashtable(int capacity) { }

	// RVA: 0x1F12A10 Offset: 0x1F12A10 VA: 0x1F12A10
	internal static IDictionary CreateHashtable(IDictionary dictionary) { }

	// RVA: 0x1F12A74 Offset: 0x1F12A74 VA: 0x1F12A74
	internal static string ToLowerInvariant(string s) { }

	// RVA: 0x1F12AF8 Offset: 0x1F12AF8 VA: 0x1F12AF8
	internal static string ToUpperInvariant(string s) { }

	// RVA: 0x1F0F68C Offset: 0x1F0F68C VA: 0x1F0F68C
	internal static void Dispose(Stream s) { }

	// RVA: 0x1F12B7C Offset: 0x1F12B7C VA: 0x1F12B7C
	internal static void Dispose(TextWriter t) { }

	// RVA: 0x1F102EC Offset: 0x1F102EC VA: 0x1F102EC
	internal static int IndexOf(string source, string value) { }

