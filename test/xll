	public virtual void Add(object o) { }

	// RVA: 0x238FB40 Offset: 0x238FB40 VA: 0x238FB40 Slot: 19
	public virtual void AddAll(IEnumerable e) { }

	// RVA: 0x238FDDC Offset: 0x238FDDC VA: 0x238FDDC Slot: 20
	public virtual void Clear() { }

	// RVA: 0x238FE94 Offset: 0x238FE94 VA: 0x238FE94 Slot: 21
	public virtual bool Contains(object o) { }

	// RVA: 0x238FF5C Offset: 0x238FF5C VA: 0x238FF5C Slot: 22
	public virtual void CopyTo(Array array, int index) { }

	// RVA: 0x23900A4 Offset: 0x23900A4 VA: 0x23900A4 Slot: 23
	public virtual int get_Count() { }

	// RVA: 0x2390158 Offset: 0x2390158 VA: 0x2390158 Slot: 24
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x2390284 Offset: 0x2390284 VA: 0x2390284 Slot: 25
	public virtual bool get_IsEmpty() { }

	// RVA: 0x2390344 Offset: 0x2390344 VA: 0x2390344 Slot: 26
	public virtual bool get_IsFixedSize() { }

	// RVA: 0x23903F8 Offset: 0x23903F8 VA: 0x23903F8 Slot: 27
	public virtual bool get_IsReadOnly() { }

	// RVA: 0x23904B0 Offset: 0x23904B0 VA: 0x23904B0 Slot: 28
	public virtual bool get_IsSynchronized() { }

	// RVA: 0x2390568 Offset: 0x2390568 VA: 0x2390568 Slot: 29
	public virtual void Remove(object o) { }

	// RVA: 0x2390630 Offset: 0x2390630 VA: 0x2390630 Slot: 30
	public virtual void RemoveAll(IEnumerable e) { }

	// RVA: 0x23908CC Offset: 0x23908CC VA: 0x23908CC Slot: 31
	public virtual object get_SyncRoot() { }
}

// Namespace: Org.BouncyCastle.Utilities.Collections
public interface ISet : ICollection, IEnumerable // TypeDefIndex: 5196
{
	// Properties
	public abstract bool IsEmpty { get; }
	public abstract bool IsFixedSize { get; }
	public abstract bool IsReadOnly { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Add(object o);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void AddAll(IEnumerable e);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Clear();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool Contains(object o);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_IsEmpty();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsFixedSize();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void Remove(object o);

	// RVA: -1 Offset: -1 Slot: 8
	public abstract void RemoveAll(IEnumerable e);
}

// Namespace: Org.BouncyCastle.Utilities.Date
public sealed class DateTimeObject // TypeDefIndex: 5197
{
	// Fields
	private readonly DateTime dt; // 0x10

	// Properties
	public DateTime Value { get; }

	// Methods

	// RVA: 0x2390984 Offset: 0x2390984 VA: 0x2390984
	public void .ctor(DateTime dt) { }

	// RVA: 0x23909BC Offset: 0x23909BC VA: 0x23909BC
	public DateTime get_Value() { }

	// RVA: 0x23909C8 Offset: 0x23909C8 VA: 0x23909C8 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Utilities.Date
public class DateTimeUtilities // TypeDefIndex: 5198
{
	// Fields
	public static readonly DateTime UnixEpoch; // 0x0

	// Methods

	// RVA: 0x23909F4 Offset: 0x23909F4 VA: 0x23909F4
	private void .ctor() { }

	// RVA: 0x23909FC Offset: 0x23909FC VA: 0x23909FC
	public static long DateTimeToUnixMs(DateTime dateTime) { }

	// RVA: 0x2390B3C Offset: 0x2390B3C VA: 0x2390B3C
	public static DateTime UnixMsToDateTime(long unixMs) { }

	// RVA: 0x2390BE0 Offset: 0x2390BE0 VA: 0x2390BE0
	public static long CurrentUnixMs() { }

	// RVA: 0x2390C74 Offset: 0x2390C74 VA: 0x2390C74
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public sealed class Base64 // TypeDefIndex: 5199
{
	// Methods

	// RVA: 0x2390CEC Offset: 0x2390CEC VA: 0x2390CEC
	private void .ctor() { }

	// RVA: 0x2390CF4 Offset: 0x2390CF4 VA: 0x2390CF4
	public static string ToBase64String(byte[] data) { }

	// RVA: 0x2390D70 Offset: 0x2390D70 VA: 0x2390D70
	public static string ToBase64String(byte[] data, int off, int length) { }

	// RVA: 0x2390DF0 Offset: 0x2390DF0 VA: 0x2390DF0
	public static byte[] Encode(byte[] data) { }

	// RVA: 0x2390E20 Offset: 0x2390E20 VA: 0x2390E20
	public static byte[] Encode(byte[] data, int off, int length) { }

	// RVA: 0x2390F28 Offset: 0x2390F28 VA: 0x2390F28
	public static int Encode(byte[] data, Stream outStream) { }

	// RVA: 0x2390F98 Offset: 0x2390F98 VA: 0x2390F98
	public static int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x2391008 Offset: 0x2391008 VA: 0x2391008
	public static byte[] Decode(byte[] data) { }

	// RVA: 0x2391128 Offset: 0x2391128 VA: 0x2391128
	public static byte[] Decode(string data) { }

	// RVA: 0x2391190 Offset: 0x2391190 VA: 0x2391190
	public static int Decode(string data, Stream outStream) { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public class Base64Encoder : IEncoder // TypeDefIndex: 5200
{
	// Fields
	protected readonly byte[] encodingTable; // 0x10
	protected byte padding; // 0x18
	protected readonly byte[] decodingTable; // 0x20

	// Methods

	// RVA: 0x2391200 Offset: 0x2391200 VA: 0x2391200
	public void .ctor() { }

	// RVA: 0x23912A0 Offset: 0x23912A0 VA: 0x23912A0
	protected void InitialiseDecodingTable() { }

	// RVA: 0x239136C Offset: 0x239136C VA: 0x239136C Slot: 4
	public int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x2391898 Offset: 0x2391898 VA: 0x2391898
	private bool ignore(char c) { }

	// RVA: 0x23918C4 Offset: 0x23918C4 VA: 0x23918C4 Slot: 5
	public int Decode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x2391DA4 Offset: 0x2391DA4 VA: 0x2391DA4
	private int nextI(byte[] data, int i, int finish) { }

	// RVA: 0x23921A4 Offset: 0x23921A4 VA: 0x23921A4 Slot: 6
	public int DecodeString(string data, Stream outStream) { }

	// RVA: 0x2391E44 Offset: 0x2391E44 VA: 0x2391E44
	private int decodeLastBlock(Stream outStream, char c1, char c2, char c3, char c4) { }

	// RVA: 0x239265C Offset: 0x239265C VA: 0x239265C
	private int nextI(string data, int i, int finish) { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public sealed class Hex // TypeDefIndex: 5201
{
	// Fields
	private static readonly IEncoder encoder; // 0x0

	// Methods

	// RVA: 0x23926E8 Offset: 0x23926E8 VA: 0x23926E8
	private void .ctor() { }

	// RVA: 0x23926F0 Offset: 0x23926F0 VA: 0x23926F0
	public static string ToHexString(byte[] data) { }

	// RVA: 0x2392768 Offset: 0x2392768 VA: 0x2392768
	public static string ToHexString(byte[] data, int off, int length) { }

	// RVA: 0x239292C Offset: 0x239292C VA: 0x239292C
	public static byte[] Encode(byte[] data) { }

	// RVA: 0x23927E8 Offset: 0x23927E8 VA: 0x23927E8
	public static byte[] Encode(byte[] data, int off, int length) { }

	// RVA: 0x23929A4 Offset: 0x23929A4 VA: 0x23929A4
	public static int Encode(byte[] data, Stream outStream) { }

	// RVA: 0x2392AB4 Offset: 0x2392AB4 VA: 0x2392AB4
	public static int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x2392BBC Offset: 0x2392BBC VA: 0x2392BBC
	public static byte[] Decode(byte[] data) { }

	// RVA: 0x2392D18 Offset: 0x2392D18 VA: 0x2392D18
	public static byte[] Decode(string data) { }

	// RVA: 0x2392E78 Offset: 0x2392E78 VA: 0x2392E78
	public static int Decode(string data, Stream outStream) { }

	// RVA: 0x2392F6C Offset: 0x2392F6C VA: 0x2392F6C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public class HexEncoder : IEncoder // TypeDefIndex: 5202
{
	// Fields
	protected readonly byte[] encodingTable; // 0x10
	protected readonly byte[] decodingTable; // 0x18

	// Methods

	// RVA: 0x2392FD4 Offset: 0x2392FD4 VA: 0x2392FD4
	public void .ctor() { }

	// RVA: 0x239306C Offset: 0x239306C VA: 0x239306C
	protected void InitialiseDecodingTable() { }

	// RVA: 0x2393314 Offset: 0x2393314 VA: 0x2393314 Slot: 4
	public int Encode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x2393464 Offset: 0x2393464 VA: 0x2393464
	private static bool Ignore(char c) { }

	// RVA: 0x2393490 Offset: 0x2393490 VA: 0x2393490 Slot: 5
	public int Decode(byte[] data, int off, int length, Stream outStream) { }

	// RVA: 0x23937D8 Offset: 0x23937D8 VA: 0x23937D8 Slot: 6
	public int DecodeString(string data, Stream outStream) { }
}

// Namespace: Org.BouncyCastle.Utilities.Encoders
public interface IEncoder // TypeDefIndex: 5203
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Encode(byte[] data, int off, int length, Stream outStream);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int Decode(byte[] data, int off, int length, Stream outStream);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract int DecodeString(string data, Stream outStream);
}

// Namespace: Org.BouncyCastle.Utilities
internal abstract class Enums // TypeDefIndex: 5204
{
	// Methods

	// RVA: 0x2393AD8 Offset: 0x2393AD8 VA: 0x2393AD8
	protected void .ctor() { }

	// RVA: 0x2393AE0 Offset: 0x2393AE0 VA: 0x2393AE0
	internal static Enum GetEnumValue(Type enumType, string s) { }

	// RVA: 0x2393CEC Offset: 0x2393CEC VA: 0x2393CEC
	internal static Array GetEnumValues(Type enumType) { }

	// RVA: 0x2393D54 Offset: 0x2393D54 VA: 0x2393D54
	internal static Enum GetArbitraryValue(Type enumType) { }

	// RVA: 0x2393E94 Offset: 0x2393E94 VA: 0x2393E94
	internal static bool IsEnumType(Type t) { }
}

// Namespace: Org.BouncyCastle.Utilities
public interface IMemoable // TypeDefIndex: 5205
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMemoable Copy();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Reset(IMemoable other);
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class Integers // TypeDefIndex: 5206
{
	// Methods

	// RVA: 0x2396F8C Offset: 0x2396F8C VA: 0x2396F8C
	protected void .ctor() { }

	// RVA: 0x2396F94 Offset: 0x2396F94 VA: 0x2396F94
	public static int RotateLeft(int i, int distance) { }

	// RVA: 0x2396FB0 Offset: 0x2396FB0 VA: 0x2396FB0
	public static int RotateRight(int i, int distance) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public abstract class BaseInputStream : Stream // TypeDefIndex: 5207
{
	// Fields
	private bool closed; // 0x10

	// Properties
	public sealed override bool CanRead { get; }
	public sealed override bool CanSeek { get; }
	public sealed override bool CanWrite { get; }
	public sealed override long Length { get; }
	public sealed override long Position { get; set; }

	// Methods

	// RVA: 0x2393EC0 Offset: 0x2393EC0 VA: 0x2393EC0
	protected void .ctor() { }

	// RVA: 0x2393F28 Offset: 0x2393F28 VA: 0x2393F28 Slot: 5
	public sealed override bool get_CanRead() { }

	// RVA: 0x2393F38 Offset: 0x2393F38 VA: 0x2393F38 Slot: 6
	public sealed override bool get_CanSeek() { }

	// RVA: 0x2393F40 Offset: 0x2393F40 VA: 0x2393F40 Slot: 7
	public sealed override bool get_CanWrite() { }

	// RVA: 0x2393F48 Offset: 0x2393F48 VA: 0x2393F48 Slot: 13
	public override void Close() { }

	// RVA: 0x2393F58 Offset: 0x2393F58 VA: 0x2393F58 Slot: 18
	public sealed override void Flush() { }

	// RVA: 0x2393F5C Offset: 0x2393F5C VA: 0x2393F5C Slot: 9
	public sealed override long get_Length() { }

	// RVA: 0x2393FC4 Offset: 0x2393FC4 VA: 0x2393FC4 Slot: 10
	public sealed override long get_Position() { }

	// RVA: 0x239402C Offset: 0x239402C VA: 0x239402C Slot: 11
	public sealed override void set_Position(long value) { }

	// RVA: 0x2394094 Offset: 0x2394094 VA: 0x2394094 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2394210 Offset: 0x2394210 VA: 0x2394210 Slot: 21
	public sealed override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2394278 Offset: 0x2394278 VA: 0x2394278 Slot: 22
	public sealed override void SetLength(long value) { }

	// RVA: 0x23942E0 Offset: 0x23942E0 VA: 0x23942E0 Slot: 23
	public sealed override void Write(byte[] buffer, int offset, int count) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public abstract class BaseOutputStream : Stream // TypeDefIndex: 5208
{
	// Fields
	private bool closed; // 0x10

	// Properties
	public sealed override bool CanRead { get; }
	public sealed override bool CanSeek { get; }
	public sealed override bool CanWrite { get; }
	public sealed override long Length { get; }
	public sealed override long Position { get; set; }

	// Methods

	// RVA: 0x2394348 Offset: 0x2394348 VA: 0x2394348
	protected void .ctor() { }

	// RVA: 0x23943B0 Offset: 0x23943B0 VA: 0x23943B0 Slot: 5
	public sealed override bool get_CanRead() { }

	// RVA: 0x23943B8 Offset: 0x23943B8 VA: 0x23943B8 Slot: 6
	public sealed override bool get_CanSeek() { }

	// RVA: 0x23943C0 Offset: 0x23943C0 VA: 0x23943C0 Slot: 7
	public sealed override bool get_CanWrite() { }

	// RVA: 0x23943D0 Offset: 0x23943D0 VA: 0x23943D0 Slot: 13
	public override void Close() { }

	// RVA: 0x23943E0 Offset: 0x23943E0 VA: 0x23943E0 Slot: 18
	public override void Flush() { }

	// RVA: 0x23943E4 Offset: 0x23943E4 VA: 0x23943E4 Slot: 9
	public sealed override long get_Length() { }

	// RVA: 0x239444C Offset: 0x239444C VA: 0x239444C Slot: 10
	public sealed override long get_Position() { }

	// RVA: 0x23944B4 Offset: 0x23944B4 VA: 0x23944B4 Slot: 11
	public sealed override void set_Position(long value) { }

	// RVA: 0x239451C Offset: 0x239451C VA: 0x239451C Slot: 19
	public sealed override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2394584 Offset: 0x2394584 VA: 0x2394584 Slot: 21
	public sealed override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x23945EC Offset: 0x23945EC VA: 0x23945EC Slot: 22
	public sealed override void SetLength(long value) { }

	// RVA: 0x2394654 Offset: 0x2394654 VA: 0x2394654 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x23946F0 Offset: 0x23946F0 VA: 0x23946F0 Slot: 29
	public virtual void Write(byte[] buffer) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class FilterStream : Stream // TypeDefIndex: 5209
{
	// Fields
	protected readonly Stream s; // 0x10

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2394738 Offset: 0x2394738 VA: 0x2394738
	public void .ctor(Stream s) { }

	// RVA: 0x23947B4 Offset: 0x23947B4 VA: 0x23947B4 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x23947E8 Offset: 0x23947E8 VA: 0x23947E8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x239481C Offset: 0x239481C VA: 0x239481C Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2394850 Offset: 0x2394850 VA: 0x2394850 Slot: 9
	public override long get_Length() { }

	// RVA: 0x2394884 Offset: 0x2394884 VA: 0x2394884 Slot: 10
	public override long get_Position() { }

	// RVA: 0x23948B8 Offset: 0x23948B8 VA: 0x23948B8 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x23948F4 Offset: 0x23948F4 VA: 0x23948F4 Slot: 13
	public override void Close() { }

	// RVA: 0x23949B4 Offset: 0x23949B4 VA: 0x23949B4 Slot: 18
	public override void Flush() { }

	// RVA: 0x23949EC Offset: 0x23949EC VA: 0x23949EC Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2394A3C Offset: 0x2394A3C VA: 0x2394A3C Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2394A7C Offset: 0x2394A7C VA: 0x2394A7C Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2394AD4 Offset: 0x2394AD4 VA: 0x2394AD4 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x2394B0C Offset: 0x2394B0C VA: 0x2394B0C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2394B64 Offset: 0x2394B64 VA: 0x2394B64 Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
[Serializable]
public class PemGenerationException : Exception // TypeDefIndex: 5210
{
	// Methods

	// RVA: 0x2394BA4 Offset: 0x2394BA4 VA: 0x2394BA4
	public void .ctor() { }

	// RVA: 0x2394BAC Offset: 0x2394BAC VA: 0x2394BAC
	public void .ctor(string message) { }

	// RVA: 0x2394BB4 Offset: 0x2394BB4 VA: 0x2394BB4
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemHeader // TypeDefIndex: 5211
{
	// Fields
	private string name; // 0x10
	private string val; // 0x18

	// Properties
	public virtual string Name { get; }
	public virtual string Value { get; }

	// Methods

	// RVA: 0x2394BBC Offset: 0x2394BBC VA: 0x2394BBC
	public void .ctor(string name, string val) { }

	// RVA: 0x2394BF4 Offset: 0x2394BF4 VA: 0x2394BF4 Slot: 4
	public virtual string get_Name() { }

	// RVA: 0x2394BFC Offset: 0x2394BFC VA: 0x2394BFC Slot: 5
	public virtual string get_Value() { }

	// RVA: 0x2394C04 Offset: 0x2394C04 VA: 0x2394C04 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2394C88 Offset: 0x2394C88 VA: 0x2394C88 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2394C68 Offset: 0x2394C68 VA: 0x2394C68
	private int GetHashCode(string s) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemObject : PemObjectGenerator // TypeDefIndex: 5212
{
	// Fields
	private string type; // 0x10
	private IList headers; // 0x18
	private byte[] content; // 0x20

	// Properties
	public string Type { get; }
	public IList Headers { get; }
	public byte[] Content { get; }

	// Methods

	// RVA: 0x2394D4C Offset: 0x2394D4C VA: 0x2394D4C
	public void .ctor(string type, byte[] content) { }

	// RVA: 0x2394E2C Offset: 0x2394E2C VA: 0x2394E2C
	public void .ctor(string type, IList headers, byte[] content) { }

	// RVA: 0x2394F28 Offset: 0x2394F28 VA: 0x2394F28
	public string get_Type() { }

	// RVA: 0x2394F30 Offset: 0x2394F30 VA: 0x2394F30
	public IList get_Headers() { }

	// RVA: 0x2394F38 Offset: 0x2394F38 VA: 0x2394F38
	public byte[] get_Content() { }

	// RVA: 0x2394F40 Offset: 0x2394F40 VA: 0x2394F40 Slot: 4
	public PemObject Generate() { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public interface PemObjectGenerator // TypeDefIndex: 5213
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract PemObject Generate();
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemReader // TypeDefIndex: 5214
{
	// Fields
	private const string BeginString = "-----BEGIN ";
	private const string EndString = "-----END ";
	private readonly TextReader reader; // 0x10

	// Properties
	public TextReader Reader { get; }

	// Methods

	// RVA: 0x2394F44 Offset: 0x2394F44 VA: 0x2394F44
	public void .ctor(TextReader reader) { }

	// RVA: 0x2394FE8 Offset: 0x2394FE8 VA: 0x2394FE8
	public TextReader get_Reader() { }

	// RVA: 0x2394FF0 Offset: 0x2394FF0 VA: 0x2394FF0
	public PemObject ReadPemObject() { }

	// RVA: 0x23951D4 Offset: 0x23951D4 VA: 0x23951D4
	private PemObject LoadObject(string type) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO.Pem
public class PemWriter // TypeDefIndex: 5215
{
	// Fields
	private const int LineLength = 64;
	private readonly TextWriter writer; // 0x10
	private readonly int nlLength; // 0x18
	private char[] buf; // 0x20

	// Properties
	public TextWriter Writer { get; }

	// Methods

	// RVA: 0x2395680 Offset: 0x2395680 VA: 0x2395680
	public void .ctor(TextWriter writer) { }

	// RVA: 0x2395784 Offset: 0x2395784 VA: 0x2395784
	public TextWriter get_Writer() { }

	// RVA: 0x239578C Offset: 0x239578C VA: 0x239578C
	public int GetOutputSize(PemObject obj) { }

	// RVA: 0x2395CA4 Offset: 0x2395CA4 VA: 0x2395CA4
	public void WriteObject(PemObjectGenerator objGen) { }

	// RVA: 0x23962F4 Offset: 0x23962F4 VA: 0x23962F4
	private void WriteEncoded(byte[] bytes) { }

	// RVA: 0x239623C Offset: 0x239623C VA: 0x239623C
	private void WritePreEncapsulationBoundary(string type) { }

	// RVA: 0x2396434 Offset: 0x2396434 VA: 0x2396434
	private void WritePostEncapsulationBoundary(string type) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class PushbackStream : FilterStream // TypeDefIndex: 5216
{
	// Fields
	private int buf; // 0x18

	// Methods

	// RVA: 0x23964EC Offset: 0x23964EC VA: 0x23964EC
	public void .ctor(Stream s) { }

	// RVA: 0x23964F8 Offset: 0x23964F8 VA: 0x23964F8 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x239654C Offset: 0x239654C VA: 0x239654C Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2396618 Offset: 0x2396618 VA: 0x2396618 Slot: 29
	public virtual void Unread(int b) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
[Serializable]
public class StreamOverflowException : IOException // TypeDefIndex: 5217
{
	// Methods

	// RVA: 0x23966BC Offset: 0x23966BC VA: 0x23966BC
	public void .ctor() { }

	// RVA: 0x23966C4 Offset: 0x23966C4 VA: 0x23966C4
	public void .ctor(string message) { }

	// RVA: 0x23966CC Offset: 0x23966CC VA: 0x23966CC
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public sealed class Streams // TypeDefIndex: 5218
{
	// Fields
	private const int BufferSize = 512;

	// Methods

	// RVA: 0x23966D4 Offset: 0x23966D4 VA: 0x23966D4
	private void .ctor() { }

	// RVA: 0x23966DC Offset: 0x23966DC VA: 0x23966DC
	public static void Drain(Stream inStr) { }

	// RVA: 0x2396780 Offset: 0x2396780 VA: 0x2396780
	public static byte[] ReadAll(Stream inStr) { }

	// RVA: 0x23968E8 Offset: 0x23968E8 VA: 0x23968E8
	public static byte[] ReadAllLimited(Stream inStr, int limit) { }

	// RVA: 0x2396ACC Offset: 0x2396ACC VA: 0x2396ACC
	public static int ReadFully(Stream inStr, byte[] buf) { }

	// RVA: 0x2396B08 Offset: 0x2396B08 VA: 0x2396B08
	public static int ReadFully(Stream inStr, byte[] buf, int off, int len) { }

	// RVA: 0x2396804 Offset: 0x2396804 VA: 0x2396804
	public static void PipeAll(Stream inStr, Stream outStr) { }

	// RVA: 0x239697C Offset: 0x239697C VA: 0x239697C
	public static long PipeAllLimited(Stream inStr, long limit, Stream outStr) { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class TeeInputStream : BaseInputStream // TypeDefIndex: 5219
{
	// Fields
	private readonly Stream input; // 0x18
	private readonly Stream tee; // 0x20

	// Methods

	// RVA: 0x2396B90 Offset: 0x2396B90 VA: 0x2396B90
	public void .ctor(Stream input, Stream tee) { }

	// RVA: 0x2396BC4 Offset: 0x2396BC4 VA: 0x2396BC4 Slot: 13
	public override void Close() { }

	// RVA: 0x2396C7C Offset: 0x2396C7C VA: 0x2396C7C Slot: 19
	public override int Read(byte[] buf, int off, int len) { }

	// RVA: 0x2396D24 Offset: 0x2396D24 VA: 0x2396D24 Slot: 20
	public override int ReadByte() { }
}

// Namespace: Org.BouncyCastle.Utilities.IO
public class TeeOutputStream : BaseOutputStream // TypeDefIndex: 5220
{
	// Fields
	private readonly Stream output; // 0x18
	private readonly Stream tee; // 0x20

	// Methods

	// RVA: 0x2396D98 Offset: 0x2396D98 VA: 0x2396D98
	public void .ctor(Stream output, Stream tee) { }

	// RVA: 0x2396DCC Offset: 0x2396DCC VA: 0x2396DCC Slot: 13
	public override void Close() { }

	// RVA: 0x2396E84 Offset: 0x2396E84 VA: 0x2396E84 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2396F18 Offset: 0x2396F18 VA: 0x2396F18 Slot: 24
	public override void WriteByte(byte b) { }
}

// Namespace: Org.BouncyCastle.Utilities
public class MemoableResetException : InvalidCastException // TypeDefIndex: 5221
{
	// Methods

	// RVA: 0x2396FCC Offset: 0x2396FCC VA: 0x2396FCC
	public void .ctor(string msg) { }
}

// Namespace: Org.BouncyCastle.Utilities.Net
public class IPAddress // TypeDefIndex: 5222
{
	// Methods

	// RVA: 0x2396FD4 Offset: 0x2396FD4 VA: 0x2396FD4
	public void .ctor() { }

	// RVA: 0x2396FDC Offset: 0x2396FDC VA: 0x2396FDC
	public static bool IsValid(string address) { }

	// RVA: 0x23971CC Offset: 0x23971CC VA: 0x23971CC
	public static bool IsValidWithNetMask(string address) { }

	// RVA: 0x2397014 Offset: 0x2397014 VA: 0x2397014
	public static bool IsValidIPv4(string address) { }

	// RVA: 0x23973BC Offset: 0x23973BC VA: 0x23973BC
	private static bool unsafeIsValidIPv4(string address) { }

	// RVA: 0x2397204 Offset: 0x2397204 VA: 0x2397204
	public static bool IsValidIPv4WithNetmask(string address) { }

	// RVA: 0x23972E0 Offset: 0x23972E0 VA: 0x23972E0
	public static bool IsValidIPv6WithNetmask(string address) { }

	// RVA: 0x2397508 Offset: 0x2397508 VA: 0x2397508
	private static bool IsMaskValue(string component, int size) { }

	// RVA: 0x23970F0 Offset: 0x23970F0 VA: 0x23970F0
	public static bool IsValidIPv6(string address) { }

	// RVA: 0x2397574 Offset: 0x2397574 VA: 0x2397574
	private static bool unsafeIsValidIPv6(string address) { }
}

// Namespace: Org.BouncyCastle.Utilities
internal abstract class Platform // TypeDefIndex: 5223
{
	// Fields
	private static readonly CompareInfo InvariantCompareInfo; // 0x0
	internal static readonly string NewLine; // 0x8

	// Methods

	// RVA: 0x23977C0 Offset: 0x23977C0 VA: 0x23977C0
	protected void .ctor() { }

	// RVA: 0x23977C8 Offset: 0x23977C8 VA: 0x23977C8
	private static string GetNewLine() { }

	// RVA: 0x23977D0 Offset: 0x23977D0 VA: 0x23977D0
	internal static bool EqualsIgnoreCase(string a, string b) { }

	// RVA: 0x2397858 Offset: 0x2397858 VA: 0x2397858
	internal static string GetEnvironmentVariable(string variable) { }

	// RVA: 0x2397918 Offset: 0x2397918 VA: 0x2397918
	internal static Exception CreateNotImplementedException(string message) { }

	// RVA: 0x2394DD0 Offset: 0x2394DD0 VA: 0x2394DD0
	internal static IList CreateArrayList() { }

	// RVA: 0x239797C Offset: 0x239797C VA: 0x239797C
	internal static IList CreateArrayList(int capacity) { }

	// RVA: 0x2394EC4 Offset: 0x2394EC4 VA: 0x2394EC4
	internal static IList CreateArrayList(ICollection collection) { }

	// RVA: 0x23979E0 Offset: 0x23979E0 VA: 0x23979E0
	internal static IList CreateArrayList(IEnumerable collection) { }

	// RVA: 0x238F748 Offset: 0x238F748 VA: 0x238F748
	internal static IDictionary CreateHashtable() { }

	// RVA: 0x2397CA4 Offset: 0x2397CA4 VA: 0x2397CA4
	internal static IDictionary CreateHashtable(int capacity) { }

	// RVA: 0x2397D08 Offset: 0x2397D08 VA: 0x2397D08
	internal static IDictionary CreateHashtable(IDictionary dictionary) { }

	// RVA: 0x2397D6C Offset: 0x2397D6C VA: 0x2397D6C
	internal static string ToLowerInvariant(string s) { }

	// RVA: 0x2397DF0 Offset: 0x2397DF0 VA: 0x2397DF0
	internal static string ToUpperInvariant(string s) { }

	// RVA: 0x2394984 Offset: 0x2394984 VA: 0x2394984
	internal static void Dispose(Stream s) { }

	// RVA: 0x2397E74 Offset: 0x2397E74 VA: 0x2397E74
	internal static void Dispose(TextWriter t) { }

	// RVA: 0x23955E4 Offset: 0x23955E4 VA: 0x23955E4
	internal static int IndexOf(string source, string value) { }

	// RVA: 0x2397EA4 Offset: 0x2397EA4 VA: 0x2397EA4
	internal static int LastIndexOf(string source, string value) { }

	// RVA: 0x2395138 Offset: 0x2395138 VA: 0x2395138
	internal static bool StartsWith(string source, string prefix) { }

	// RVA: 0x2397F44 Offset: 0x2397F44 VA: 0x2397F44
	internal static bool EndsWith(string source, string suffix) { }

	// RVA: 0x2397FE0 Offset: 0x2397FE0 VA: 0x2397FE0
	internal static string GetTypeName(object obj) { }

	// RVA: 0x239802C Offset: 0x239802C VA: 0x239802C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class Strings // TypeDefIndex: 5224
{
	// Methods

	// RVA: 0x23980D4 Offset: 0x23980D4 VA: 0x23980D4
	protected void .ctor() { }

	// RVA: 0x23980DC Offset: 0x23980DC VA: 0x23980DC
	internal static bool IsOneOf(string s, string[] candidates) { }

	// RVA: 0x23981B4 Offset: 0x23981B4 VA: 0x23981B4
	public static string FromByteArray(byte[] bs) { }

	// RVA: 0x23982D4 Offset: 0x23982D4 VA: 0x23982D4
	public static byte[] ToByteArray(char[] cs) { }

	// RVA: 0x23983EC Offset: 0x23983EC VA: 0x23983EC
	public static byte[] ToByteArray(string s) { }

	// RVA: 0x2391080 Offset: 0x2391080 VA: 0x2391080
	public static string FromAsciiByteArray(byte[] bytes) { }

	// RVA: 0x2398514 Offset: 0x2398514 VA: 0x2398514
	public static byte[] ToAsciiByteArray(char[] cs) { }

	// RVA: 0x2390EA4 Offset: 0x2390EA4 VA: 0x2390EA4
	public static byte[] ToAsciiByteArray(string s) { }

	// RVA: 0x2398598 Offset: 0x2398598 VA: 0x2398598
	public static string FromUtf8ByteArray(byte[] bytes) { }

	// RVA: 0x2398640 Offset: 0x2398640 VA: 0x2398640
	public static byte[] ToUtf8ByteArray(char[] cs) { }

	// RVA: 0x23986C4 Offset: 0x23986C4 VA: 0x23986C4
	public static byte[] ToUtf8ByteArray(string s) { }
}

// Namespace: Org.BouncyCastle.Utilities
public sealed class Times // TypeDefIndex: 5225
{
	// Fields
	private static long NanosecondsPerTick; // 0x0

	// Methods

	// RVA: 0x2398748 Offset: 0x2398748 VA: 0x2398748
	public void .ctor() { }

	// RVA: 0x2398750 Offset: 0x2398750 VA: 0x2398750
	public static long NanoTime() { }

	// RVA: 0x2398808 Offset: 0x2398808 VA: 0x2398808
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class Adler32 // TypeDefIndex: 5226
{
	// Fields
	private const int BASE = 65521;
	private const int NMAX = 5552;

	// Methods

	// RVA: 0x239885C Offset: 0x239885C VA: 0x239885C
	public void .ctor() { }

	// RVA: 0x2398864 Offset: 0x2398864 VA: 0x2398864
	internal long adler32(long adler, byte[] buf, int index, int len) { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
public sealed class Deflate // TypeDefIndex: 5227
{
	// Fields
	private const int MAX_MEM_LEVEL = 9;
	private const int Z_DEFAULT_COMPRESSION = -1;
	private const int MAX_WBITS = 15;
	private const int DEF_MEM_LEVEL = 8;
	private const int STORED = 0;
	private const int FAST = 1;
	private const int SLOW = 2;
	private static readonly Deflate.Config[] config_table; // 0x0
	private static readonly string[] z_errmsg; // 0x8
	private const int NeedMore = 0;
	private const int BlockDone = 1;
	private const int FinishStarted = 2;
	private const int FinishDone = 3;
	private const int PRESET_DICT = 32;
	private const int Z_FILTERED = 1;
	private const int Z_HUFFMAN_ONLY = 2;
	private const int Z_DEFAULT_STRATEGY = 0;
	private const int Z_NO_FLUSH = 0;
	private const int Z_PARTIAL_FLUSH = 1;
	private const int Z_SYNC_FLUSH = 2;
	private const int Z_FULL_FLUSH = 3;
	private const int Z_FINISH = 4;
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
