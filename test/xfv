
	// RVA: 0x1FF2464 Offset: 0x1FF2464 VA: 0x1FF2464 Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0x1FF26EC Offset: 0x1FF26EC VA: 0x1FF26EC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1FF2928 Offset: 0x1FF2928 VA: 0x1FF2928
	private static int Hash(int i, int j, int k, int l) { }
}

// Namespace: System.Net
public interface IWebProxy // TypeDefIndex: 1588
{
	// Properties
	public abstract ICredentials Credentials { get; set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ICredentials get_Credentials();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Credentials(ICredentials value);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract Uri GetProxy(Uri destination);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool IsBypassed(Uri host);
}

// Namespace: System.Net
public interface IWebProxyScript // TypeDefIndex: 1589
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Close();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool Load(Uri scriptLocation, string Script, Type helperType);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract string Run(string url, string host);
}

// Namespace: System.Net
public interface IWebRequestCreate // TypeDefIndex: 1590
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract WebRequest Create(Uri uri);
}

// Namespace: System.Net
internal class ListenerAsyncResult : IAsyncResult // TypeDefIndex: 1591
{
	// Fields
	private ManualResetEvent handle; // 0x10
	private bool synch; // 0x18
	private bool completed; // 0x19
	private AsyncCallback cb; // 0x20
	private object state; // 0x28
	private Exception exception; // 0x30
	private HttpListenerContext context; // 0x38
	private object locker; // 0x40
	private ListenerAsyncResult forward; // 0x48

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x1FDF4EC Offset: 0x1FDF4EC VA: 0x1FDF4EC
	public void .ctor(AsyncCallback cb, object state) { }

	// RVA: 0x1FDF0EC Offset: 0x1FDF0EC VA: 0x1FDF0EC
	internal void Complete(string error) { }

	// RVA: 0x1FF2950 Offset: 0x1FF2950 VA: 0x1FF2950
	private static void InvokeCallback(object o) { }

	// RVA: 0x1FE074C Offset: 0x1FE074C VA: 0x1FE074C
	internal void Complete(HttpListenerContext context) { }

	// RVA: 0x1FDF6A0 Offset: 0x1FDF6A0 VA: 0x1FDF6A0
	internal void Complete(HttpListenerContext context, bool synch) { }

	// RVA: 0x1FE0090 Offset: 0x1FE0090 VA: 0x1FE0090
	internal HttpListenerContext GetContext() { }

	// RVA: 0x1FF2A70 Offset: 0x1FF2A70 VA: 0x1FF2A70 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x1FDFFA0 Offset: 0x1FDFFA0 VA: 0x1FDFFA0 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x1FF2A84 Offset: 0x1FF2A84 VA: 0x1FF2A84 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x1FDFF58 Offset: 0x1FDFF58 VA: 0x1FDFF58 Slot: 7
	public bool get_IsCompleted() { }
}

// Namespace: System.Net
internal sealed class ListenerPrefix // TypeDefIndex: 1592
{
	// Fields
	private string original; // 0x10
	private string host; // 0x18
	private ushort port; // 0x20
	private string path; // 0x28
	private bool secure; // 0x30
	private IPAddress[] addresses; // 0x38
	public HttpListener Listener; // 0x40

	// Properties
	public IPAddress[] Addresses { get; set; }
	public bool Secure { get; }
	public string Host { get; }
	public int Port { get; }
	public string Path { get; }

	// Methods

	// RVA: 0x1FF2A98 Offset: 0x1FF2A98 VA: 0x1FF2A98
	public void .ctor(string prefix) { }

	// RVA: 0x1FF2D78 Offset: 0x1FF2D78 VA: 0x1FF2D78 Slot: 3
	public override string ToString() { }

	// RVA: 0x1FF2D80 Offset: 0x1FF2D80 VA: 0x1FF2D80
	public IPAddress[] get_Addresses() { }

	// RVA: 0x1FF2D88 Offset: 0x1FF2D88 VA: 0x1FF2D88
	public void set_Addresses(IPAddress[] value) { }

	// RVA: 0x1FF2D90 Offset: 0x1FF2D90 VA: 0x1FF2D90
	public bool get_Secure() { }

	// RVA: 0x1FF2D98 Offset: 0x1FF2D98 VA: 0x1FF2D98
	public string get_Host() { }

	// RVA: 0x1FF2DA0 Offset: 0x1FF2DA0 VA: 0x1FF2DA0
	public int get_Port() { }

	// RVA: 0x1FF2DA8 Offset: 0x1FF2DA8 VA: 0x1FF2DA8
	public string get_Path() { }

	// RVA: 0x1FF2DB0 Offset: 0x1FF2DB0 VA: 0x1FF2DB0 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1FF2E70 Offset: 0x1FF2E70 VA: 0x1FF2E70 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1FF2ACC Offset: 0x1FF2ACC VA: 0x1FF2ACC
	private void Parse(string uri) { }

	// RVA: 0x1FE0F24 Offset: 0x1FE0F24 VA: 0x1FE0F24
	public static void CheckUri(string uri) { }
}

// Namespace: System.Net
internal class MonoHttpDate // TypeDefIndex: 1593
{
	// Fields
	private static readonly string rfc1123_date; // 0x0
	private static readonly string rfc850_date; // 0x8
	private static readonly string asctime_date; // 0x10
	private static readonly string[] formats; // 0x18

	// Methods

	// RVA: 0x1FF2EA0 Offset: 0x1FF2EA0 VA: 0x1FF2EA0
	public void .ctor() { }

	// RVA: 0x1FF2EA8 Offset: 0x1FF2EA8 VA: 0x1FF2EA8
	private static void .cctor() { }

	// RVA: 0x1FE5EAC Offset: 0x1FE5EAC VA: 0x1FE5EAC
	internal static DateTime Parse(string dateStr) { }
}

// Namespace: System.Net
internal class NetConfig : ICloneable // TypeDefIndex: 1594
{
	// Fields
	internal bool ipv6Enabled; // 0x10
	internal int MaxResponseHeadersLength; // 0x14

	// Methods

	// RVA: 0x1FF3064 Offset: 0x1FF3064 VA: 0x1FF3064
	internal void .ctor() { }

	// RVA: 0x1FF3074 Offset: 0x1FF3074 VA: 0x1FF3074 Slot: 4
	private object System.ICloneable.Clone() { }
}

// Namespace: System.Net
[FlagsAttribute] // RVA: 0xBD08A4 Offset: 0xBD08A4 VA: 0xBD08A4
public enum NetworkAccess // TypeDefIndex: 1595
{
	// Fields
	public int value__; // 0x0
	public const NetworkAccess Accept = 128;
	public const NetworkAccess Connect = 64;
}

// Namespace: System.Net
public class NetworkCredential : ICredentials // TypeDefIndex: 1596
{
	// Fields
	private string userName; // 0x10
	private string password; // 0x18
	private string domain; // 0x20

	// Properties
	public string Domain { get; set; }
	public string UserName { get; set; }
	public string Password { get; set; }

	// Methods

	// RVA: 0x1FF307C Offset: 0x1FF307C VA: 0x1FF307C
	public void .ctor() { }

	// RVA: 0x1FF3084 Offset: 0x1FF3084 VA: 0x1FF3084
	public void .ctor(string userName, string password) { }

	// RVA: 0x1FF30BC Offset: 0x1FF30BC VA: 0x1FF30BC
	public void .ctor(string userName, string password, string domain) { }

	// RVA: 0x1FF30FC Offset: 0x1FF30FC VA: 0x1FF30FC
	public string get_Domain() { }

	// RVA: 0x1FF3170 Offset: 0x1FF3170 VA: 0x1FF3170
	public void set_Domain(string value) { }

	// RVA: 0x1FF3178 Offset: 0x1FF3178 VA: 0x1FF3178
	public string get_UserName() { }

	// RVA: 0x1FF31EC Offset: 0x1FF31EC VA: 0x1FF31EC
	public void set_UserName(string value) { }

	// RVA: 0x1FF31F4 Offset: 0x1FF31F4 VA: 0x1FF31F4
	public string get_Password() { }

	// RVA: 0x1FF3268 Offset: 0x1FF3268 VA: 0x1FF3268
	public void set_Password(string value) { }

	// RVA: 0x1FF3270 Offset: 0x1FF3270 VA: 0x1FF3270 Slot: 4
	public NetworkCredential GetCredential(Uri uri, string authType) { }
}

// Namespace: System.Net
public class OpenReadCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1597
{
	// Fields
	private Stream result; // 0x28

	// Properties
	public Stream Result { get; }

	// Methods

	// RVA: 0x200AF68 Offset: 0x200AF68 VA: 0x200AF68
	internal void .ctor(Stream result, Exception error, bool cancelled, object userState) { }

	// RVA: 0x200AFA4 Offset: 0x200AFA4 VA: 0x200AFA4
	public Stream get_Result() { }
}

// Namespace: System.Net
public class OpenWriteCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1598
{
	// Fields
	private Stream result; // 0x28

	// Properties
	public Stream Result { get; }

	// Methods

	// RVA: 0x200B3D8 Offset: 0x200B3D8 VA: 0x200B3D8
	internal void .ctor(Stream result, Exception error, bool cancelled, object userState) { }

	// RVA: 0x200B414 Offset: 0x200B414 VA: 0x200B414
	public Stream get_Result() { }
}

// Namespace: System.Net
[Serializable]
public class ProtocolViolationException : InvalidOperationException, ISerializable // TypeDefIndex: 1599
{
	// Methods

	// RVA: 0x200B848 Offset: 0x200B848 VA: 0x200B848
	public void .ctor() { }

	// RVA: 0x200B850 Offset: 0x200B850 VA: 0x200B850
	public void .ctor(string message) { }

	// RVA: 0x200B858 Offset: 0x200B858 VA: 0x200B858
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x200B860 Offset: 0x200B860 VA: 0x200B860 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x200B868 Offset: 0x200B868 VA: 0x200B868 Slot: 10
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System.Net
internal class RequestStream : Stream // TypeDefIndex: 1600
{
	// Fields
	private byte[] buffer; // 0x10
	private int offset; // 0x18
	private int length; // 0x1C
	private long remaining_body; // 0x20
	private bool disposed; // 0x28
	private Stream stream; // 0x30

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x200B870 Offset: 0x200B870 VA: 0x200B870
	internal void .ctor(Stream stream, byte[] buffer, int offset, int length) { }

	// RVA: 0x200B878 Offset: 0x200B878 VA: 0x200B878
	internal void .ctor(Stream stream, byte[] buffer, int offset, int length, long contentlength) { }

	// RVA: 0x200B920 Offset: 0x200B920 VA: 0x200B920 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x200B928 Offset: 0x200B928 VA: 0x200B928 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x200B930 Offset: 0x200B930 VA: 0x200B930 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x200B938 Offset: 0x200B938 VA: 0x200B938 Slot: 9
	public override long get_Length() { }

	// RVA: 0x200B9A0 Offset: 0x200B9A0 VA: 0x200B9A0 Slot: 10
	public override long get_Position() { }

	// RVA: 0x200BA08 Offset: 0x200BA08 VA: 0x200BA08 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x200BA70 Offset: 0x200BA70 VA: 0x200BA70 Slot: 13
	public override void Close() { }

	// RVA: 0x200BA7C Offset: 0x200BA7C VA: 0x200BA7C Slot: 18
	public override void Flush() { }

	// RVA: 0x200BA80 Offset: 0x200BA80 VA: 0x200BA80
	private int FillFromBuffer(byte[] buffer, int off, int count) { }

	// RVA: 0x200BCC4 Offset: 0x200BCC4 VA: 0x200BCC4 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x200BE38 Offset: 0x200BE38 VA: 0x200BE38 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x200C084 Offset: 0x200C084 VA: 0x200C084 Slot: 27
	public override int EndRead(IAsyncResult ares) { }

	// RVA: 0x200C318 Offset: 0x200C318 VA: 0x200C318 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x200C380 Offset: 0x200C380 VA: 0x200C380 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x200C3E8 Offset: 0x200C3E8 VA: 0x200C3E8 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x200C450 Offset: 0x200C450 VA: 0x200C450 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x200C4B8 Offset: 0x200C4B8 VA: 0x200C4B8 Slot: 28
	public override void EndWrite(IAsyncResult async_result) { }
}

// Namespace: System.Net
internal class ResponseStream : Stream // TypeDefIndex: 1601
{
	// Fields
	private HttpListenerResponse response; // 0x10
	private bool ignore_errors; // 0x18
	private bool disposed; // 0x19
	private bool trailer_sent; // 0x1A
	private Stream stream; // 0x20
	private static byte[] crlf; // 0x0

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x200C520 Offset: 0x200C520 VA: 0x200C520
	internal void .ctor(Stream stream, HttpListenerResponse response, bool ignore_errors) { }

	// RVA: 0x200C5B8 Offset: 0x200C5B8 VA: 0x200C5B8
	private static void .cctor() { }

	// RVA: 0x200C66C Offset: 0x200C66C VA: 0x200C66C Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x200C674 Offset: 0x200C674 VA: 0x200C674 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x200C67C Offset: 0x200C67C VA: 0x200C67C Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x200C684 Offset: 0x200C684 VA: 0x200C684 Slot: 9
	public override long get_Length() { }

	// RVA: 0x200C6EC Offset: 0x200C6EC VA: 0x200C6EC Slot: 10
	public override long get_Position() { }

	// RVA: 0x200C754 Offset: 0x200C754 VA: 0x200C754 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x200C7BC Offset: 0x200C7BC VA: 0x200C7BC Slot: 13
	public override void Close() { }

	// RVA: 0x200C9B8 Offset: 0x200C9B8 VA: 0x200C9B8
	private MemoryStream GetHeaders(bool closing) { }

	// RVA: 0x200CCEC Offset: 0x200CCEC VA: 0x200CCEC Slot: 18
	public override void Flush() { }

	// RVA: 0x200CA68 Offset: 0x200CA68 VA: 0x200CA68
	private static byte[] GetChunkSizeBytes(int size, bool final) { }

	// RVA: 0x200CBA0 Offset: 0x200CBA0 VA: 0x200CBA0
	internal void InternalWrite(byte[] buffer, int offset, int count) { }

	// RVA: 0x200CCF0 Offset: 0x200CCF0 VA: 0x200CCF0 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x200D010 Offset: 0x200D010 VA: 0x200D010 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x200D298 Offset: 0x200D298 VA: 0x200D298 Slot: 28
	public override void EndWrite(IAsyncResult ares) { }

	// RVA: 0x200D538 Offset: 0x200D538 VA: 0x200D538 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x200D5A0 Offset: 0x200D5A0 VA: 0x200D5A0 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback cback, object state) { }

	// RVA: 0x200D608 Offset: 0x200D608 VA: 0x200D608 Slot: 27
	public override int EndRead(IAsyncResult ares) { }

	// RVA: 0x200D670 Offset: 0x200D670 VA: 0x200D670 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x200D6D8 Offset: 0x200D6D8 VA: 0x200D6D8 Slot: 22
	public override void SetLength(long value) { }
}

// Namespace: System.Net
[FlagsAttribute] // RVA: 0xBD08B4 Offset: 0xBD08B4 VA: 0xBD08B4
public enum SecurityProtocolType // TypeDefIndex: 1602
{
	// Fields
	public int value__; // 0x0
	public const SecurityProtocolType Ssl3 = 48;
	public const SecurityProtocolType Tls = 192;
}

// Namespace: System.Net
public class ServicePoint // TypeDefIndex: 1603
{
	// Fields
	private Uri uri; // 0x10
	private int connectionLimit; // 0x18
	private int maxIdleTime; // 0x1C
	private int currentConnections; // 0x20
	private DateTime idleSince; // 0x28
	private Version protocolVersion; // 0x38
	private X509Certificate certificate; // 0x40
	private X509Certificate clientCertificate; // 0x48
	private IPHostEntry host; // 0x50
	private bool usesProxy; // 0x58
	private Hashtable groups; // 0x60
	private bool sendContinue; // 0x68
	private bool useConnect; // 0x69
	private object locker; // 0x70
	private object hostE; // 0x78
	private bool useNagle; // 0x80
	private BindIPEndPoint endPointCallback; // 0x88

	// Properties
	public Uri Address { get; }
	public BindIPEndPoint BindIPEndPointDelegate { get; set; }
	public X509Certificate Certificate { get; }
	public X509Certificate ClientCertificate { get; }
	[MonoTODOAttribute] // RVA: 0xBD38AC Offset: 0xBD38AC VA: 0xBD38AC
	public int ConnectionLeaseTimeout { get; set; }
	public int ConnectionLimit { get; set; }
	public string ConnectionName { get; }
	public int CurrentConnections { get; }
	public DateTime IdleSince { get; set; }
	public int MaxIdleTime { get; set; }
	public virtual Version ProtocolVersion { get; }
	[MonoTODOAttribute] // RVA: 0xBD38BC Offset: 0xBD38BC VA: 0xBD38BC
	public int ReceiveBufferSize { get; set; }
	public bool SupportsPipelining { get; }
	public bool Expect100Continue { get; set; }
	public bool UseNagleAlgorithm { get; set; }
	internal bool SendContinue { get; set; }
	internal bool UsesProxy { get; set; }
	internal bool UseConnect { get; set; }
	internal bool AvailableForRecycling { get; }
	internal Hashtable Groups { get; }
	internal IPHostEntry HostEntry { get; }

	// Methods

	// RVA: 0x2310D00 Offset: 0x2310D00 VA: 0x2310D00
	internal void .ctor(Uri uri, int connectionLimit, int maxIdleTime) { }

	// RVA: 0x2310DE0 Offset: 0x2310DE0 VA: 0x2310DE0
	public Uri get_Address() { }

	// RVA: 0x2310DE8 Offset: 0x2310DE8 VA: 0x2310DE8
	private static Exception GetMustImplement() { }

	// RVA: 0x2310E44 Offset: 0x2310E44 VA: 0x2310E44
	public BindIPEndPoint get_BindIPEndPointDelegate() { }

	// RVA: 0x2310E4C Offset: 0x2310E4C VA: 0x2310E4C
	public void set_BindIPEndPointDelegate(BindIPEndPoint value) { }

	// RVA: 0x2310E54 Offset: 0x2310E54 VA: 0x2310E54
	public X509Certificate get_Certificate() { }

	// RVA: 0x2310E5C Offset: 0x2310E5C VA: 0x2310E5C
	public X509Certificate get_ClientCertificate() { }

	// RVA: 0x2310E64 Offset: 0x2310E64 VA: 0x2310E64
	public int get_ConnectionLeaseTimeout() { }

	// RVA: 0x2310EB0 Offset: 0x2310EB0 VA: 0x2310EB0
	public void set_ConnectionLeaseTimeout(int value) { }

	// RVA: 0x2310EFC Offset: 0x2310EFC VA: 0x2310EFC
	public int get_ConnectionLimit() { }

	// RVA: 0x2310F04 Offset: 0x2310F04 VA: 0x2310F04
	public void set_ConnectionLimit(int value) { }

	// RVA: 0x2310F94 Offset: 0x2310F94 VA: 0x2310F94
	public string get_ConnectionName() { }

	// RVA: 0x2310FC4 Offset: 0x2310FC4 VA: 0x2310FC4
	public int get_CurrentConnections() { }

	// RVA: 0x2310FCC Offset: 0x2310FCC VA: 0x2310FCC
	public DateTime get_IdleSince() { }

	// RVA: 0x2310FD8 Offset: 0x2310FD8 VA: 0x2310FD8
	internal void set_IdleSince(DateTime value) { }

	// RVA: 0x2311020 Offset: 0x2311020 VA: 0x2311020
	public int get_MaxIdleTime() { }

	// RVA: 0x2311028 Offset: 0x2311028 VA: 0x2311028
	public void set_MaxIdleTime(int value) { }

	// RVA: 0x23110B8 Offset: 0x23110B8 VA: 0x23110B8 Slot: 4
	public virtual Version get_ProtocolVersion() { }

	// RVA: 0x23110C0 Offset: 0x23110C0 VA: 0x23110C0
	public int get_ReceiveBufferSize() { }

	// RVA: 0x231110C Offset: 0x231110C VA: 0x231110C
	public void set_ReceiveBufferSize(int value) { }

	// RVA: 0x2311158 Offset: 0x2311158 VA: 0x2311158
	public bool get_SupportsPipelining() { }

	// RVA: 0x23111E0 Offset: 0x23111E0 VA: 0x23111E0
	public bool get_Expect100Continue() { }

	// RVA: 0x2311290 Offset: 0x2311290 VA: 0x2311290
	public void set_Expect100Continue(bool value) { }

	// RVA: 0x23112A8 Offset: 0x23112A8 VA: 0x23112A8
	public bool get_UseNagleAlgorithm() { }

	// RVA: 0x23112B0 Offset: 0x23112B0 VA: 0x23112B0
	public void set_UseNagleAlgorithm(bool value) { }

	// RVA: 0x23111E4 Offset: 0x23111E4 VA: 0x23111E4
	internal bool get_SendContinue() { }

	// RVA: 0x231129C Offset: 0x231129C VA: 0x231129C
	internal void set_SendContinue(bool value) { }

	// RVA: 0x23112BC Offset: 0x23112BC VA: 0x23112BC
	internal bool get_UsesProxy() { }

	// RVA: 0x23112C4 Offset: 0x23112C4 VA: 0x23112C4
	internal void set_UsesProxy(bool value) { }

	// RVA: 0x23112D0 Offset: 0x23112D0 VA: 0x23112D0
	internal bool get_UseConnect() { }

	// RVA: 0x23112D8 Offset: 0x23112D8 VA: 0x23112D8
	internal void set_UseConnect(bool value) { }

	// RVA: 0x23112E4 Offset: 0x23112E4 VA: 0x23112E4
	internal bool get_AvailableForRecycling() { }

	// RVA: 0x23113BC Offset: 0x23113BC VA: 0x23113BC
	internal Hashtable get_Groups() { }

	// RVA: 0x2311428 Offset: 0x2311428 VA: 0x2311428
	internal IPHostEntry get_HostEntry() { }

	// RVA: 0x2311774 Offset: 0x2311774 VA: 0x2311774
	internal void SetVersion(Version version) { }

	// RVA: 0x231177C Offset: 0x231177C VA: 0x231177C
	private WebConnectionGroup GetConnectionGroup(string name) { }

	// RVA: 0x23118B0 Offset: 0x23118B0 VA: 0x23118B0
	internal EventHandler SendRequest(HttpWebRequest request, string groupName) { }

	// RVA: 0x2311984 Offset: 0x2311984 VA: 0x2311984
	public bool CloseConnectionGroup(string connectionGroupName) { }

	// RVA: 0x2311A34 Offset: 0x2311A34 VA: 0x2311A34
	internal void IncrementConnection() { }

	// RVA: 0x2311B2C Offset: 0x2311B2C VA: 0x2311B2C
	internal void DecrementConnection() { }

	// RVA: 0x2311C0C Offset: 0x2311C0C VA: 0x2311C0C
	internal void SetCertificates(X509Certificate client, X509Certificate server) { }

	// RVA: 0x2311C14 Offset: 0x2311C14 VA: 0x2311C14
	internal bool CallEndPointDelegate(Socket sock, IPEndPoint remote) { }
}

// Namespace: System.Net
public class ServicePointManager // TypeDefIndex: 1604
{
	// Fields
	public const int DefaultNonPersistentConnectionLimit = 4;
	public const int DefaultPersistentConnectionLimit = 2;
	private static HybridDictionary servicePoints; // 0x0
	private static ICertificatePolicy policy; // 0x8
	private static int defaultConnectionLimit; // 0x10
	private static int maxServicePointIdleTime; // 0x14
	private static int maxServicePoints; // 0x18
	private static bool _checkCRL; // 0x1C
	private static SecurityProtocolType _securityProtocol; // 0x20
	private static bool expectContinue; // 0x24
	private static bool useNagle; // 0x25
	private static RemoteCertificateValidationCallback server_cert_cb; // 0x28

	// Properties
	[ObsoleteAttribute] // RVA: 0xBD38CC Offset: 0xBD38CC VA: 0xBD38CC
	public static ICertificatePolicy CertificatePolicy { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD3908 Offset: 0xBD3908 VA: 0xBD3908
	public static bool CheckCertificateRevocationList { get; set; }
	public static int DefaultConnectionLimit { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD3940 Offset: 0xBD3940 VA: 0xBD3940
	public static int DnsRefreshTimeout { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD3950 Offset: 0xBD3950 VA: 0xBD3950
	public static bool EnableDnsRoundRobin { get; set; }
	public static int MaxServicePointIdleTime { get; set; }
	public static int MaxServicePoints { get; set; }
	public static SecurityProtocolType SecurityProtocol { get; set; }
	public static RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
	public static bool Expect100Continue { get; set; }
	public static bool UseNagleAlgorithm { get; set; }

	// Methods

	// RVA: 0x2312074 Offset: 0x2312074 VA: 0x2312074
	private void .ctor() { }

	// RVA: 0x231207C Offset: 0x231207C VA: 0x231207C
	private static void .cctor() { }

	// RVA: 0x2312154 Offset: 0x2312154 VA: 0x2312154
	public static ICertificatePolicy get_CertificatePolicy() { }

	// RVA: 0x23121BC Offset: 0x23121BC VA: 0x23121BC
	public static void set_CertificatePolicy(ICertificatePolicy value) { }

	// RVA: 0x2310A2C Offset: 0x2310A2C VA: 0x2310A2C
	public static bool get_CheckCertificateRevocationList() { }

	// RVA: 0x2312228 Offset: 0x2312228 VA: 0x2312228
	public static void set_CheckCertificateRevocationList(bool value) { }

	// RVA: 0x2312290 Offset: 0x2312290 VA: 0x2312290
	public static int get_DefaultConnectionLimit() { }

	// RVA: 0x23122F8 Offset: 0x23122F8 VA: 0x23122F8
	public static void set_DefaultConnectionLimit(int value) { }

	// RVA: 0x23123B0 Offset: 0x23123B0 VA: 0x23123B0
	private static Exception GetMustImplement() { }

	// RVA: 0x231240C Offset: 0x231240C VA: 0x231240C
	public static int get_DnsRefreshTimeout() { }

	// RVA: 0x2312478 Offset: 0x2312478 VA: 0x2312478
	public static void set_DnsRefreshTimeout(int value) { }

	// RVA: 0x23124E4 Offset: 0x23124E4 VA: 0x23124E4
	public static bool get_EnableDnsRoundRobin() { }

	// RVA: 0x2312550 Offset: 0x2312550 VA: 0x2312550
	public static void set_EnableDnsRoundRobin(bool value) { }

	// RVA: 0x23125BC Offset: 0x23125BC VA: 0x23125BC
	public static int get_MaxServicePointIdleTime() { }

	// RVA: 0x2312624 Offset: 0x2312624 VA: 0x2312624
	public static void set_MaxServicePointIdleTime(int value) { }

	// RVA: 0x23126DC Offset: 0x23126DC VA: 0x23126DC
	public static int get_MaxServicePoints() { }

	// RVA: 0x2312744 Offset: 0x2312744 VA: 0x2312744
	public static void set_MaxServicePoints(int value) { }

	// RVA: 0x2313098 Offset: 0x2313098 VA: 0x2313098
	public static SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x2313100 Offset: 0x2313100 VA: 0x2313100
	public static void set_SecurityProtocol(SecurityProtocolType value) { }

	// RVA: 0x231316C Offset: 0x231316C VA: 0x231316C
	public static RemoteCertificateValidationCallback get_ServerCertificateValidationCallback() { }

	// RVA: 0x23131D4 Offset: 0x23131D4 VA: 0x23131D4
	public static void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value) { }

	// RVA: 0x2313240 Offset: 0x2313240 VA: 0x2313240
	public static bool get_Expect100Continue() { }

	// RVA: 0x23132A8 Offset: 0x23132A8 VA: 0x23132A8
	public static void set_Expect100Continue(bool value) { }

	// RVA: 0x2313318 Offset: 0x2313318 VA: 0x2313318
	public static bool get_UseNagleAlgorithm() { }

	// RVA: 0x2313380 Offset: 0x2313380 VA: 0x2313380
	public static void set_UseNagleAlgorithm(bool value) { }

	// RVA: 0x23133F0 Offset: 0x23133F0 VA: 0x23133F0
	public static ServicePoint FindServicePoint(Uri address) { }

	// RVA: 0x2313B2C Offset: 0x2313B2C VA: 0x2313B2C
	public static ServicePoint FindServicePoint(string uriString, IWebProxy proxy) { }

	// RVA: 0x2313468 Offset: 0x2313468 VA: 0x2313468
	public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy) { }

	// RVA: 0x23127F8 Offset: 0x23127F8 VA: 0x23127F8
	internal static void RecycleServicePoints() { }
}

// Namespace: 
private class ServicePointManager.SPKey // TypeDefIndex: 1605
{
	// Fields
	private Uri uri; // 0x10
	private bool use_connect; // 0x18

	// Properties
	public Uri Uri { get; }
	public bool UseConnect { get; }

	// Methods

	// RVA: 0x2313BC0 Offset: 0x2313BC0 VA: 0x2313BC0
	public void .ctor(Uri uri, bool use_connect) { }

	// RVA: 0x2315478 Offset: 0x2315478 VA: 0x2315478
	public Uri get_Uri() { }

	// RVA: 0x2315480 Offset: 0x2315480 VA: 0x2315480
	public bool get_UseConnect() { }

	// RVA: 0x2315488 Offset: 0x2315488 VA: 0x2315488 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x23154CC Offset: 0x23154CC VA: 0x23154CC Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: 
internal class ServicePointManager.ChainValidationHelper // TypeDefIndex: 1606
{
	// Fields
	private object sender; // 0x10
	private string host; // 0x18
	private static bool is_macosx; // 0x0
	private static X509KeyUsageFlags s_flags; // 0x4

	// Properties
	public string Host { get; set; }

	// Methods

	// RVA: 0x2313C00 Offset: 0x2313C00 VA: 0x2313C00
	public void .ctor(object sender) { }

	// RVA: 0x2313C2C Offset: 0x2313C2C VA: 0x2313C2C
	private static void .cctor() { }

	// RVA: 0x2313CA4 Offset: 0x2313CA4 VA: 0x2313CA4
	public string get_Host() { }

	// RVA: 0x2313D54 Offset: 0x2313D54 VA: 0x2313D54
	public void set_Host(string value) { }

	// RVA: 0x2313D5C Offset: 0x2313D5C VA: 0x2313D5C
	internal ValidationResult ValidateChain(X509CertificateCollection certs) { }

	// RVA: 0x2314D90 Offset: 0x2314D90 VA: 0x2314D90
	private static int GetStatusFromChain(X509Chain chain) { }

	// RVA: 0x2314450 Offset: 0x2314450 VA: 0x2314450
	private static SslPolicyErrors GetErrorsFromChain(X509Chain chain) { }

	// RVA: 0x23144FC Offset: 0x23144FC VA: 0x23144FC
	private static bool CheckCertificateUsage(X509Certificate2 cert) { }

	// RVA: 0x2314A10 Offset: 0x2314A10 VA: 0x2314A10
	private static bool CheckServerIdentity(X509Certificate cert, string targetHost) { }

	// RVA: 0x23152B8 Offset: 0x23152B8 VA: 0x23152B8
	private static bool CheckDomainName(string subjectName, string targetHost) { }

	// RVA: 0x2314F1C Offset: 0x2314F1C VA: 0x2314F1C
	private static bool Match(string hostname, string pattern) { }
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xBD08C4 Offset: 0xBD08C4 VA: 0xBD08C4
public class SocketAddress // TypeDefIndex: 1607
{
	// Fields
	private byte[] data; // 0x10

	// Properties
	public AddressFamily Family { get; }
	public int Size { get; }
	public byte Item { get; set; }

	// Methods

	// RVA: 0x23155B8 Offset: 0x23155B8 VA: 0x23155B8
	public void .ctor(AddressFamily family, int size) { }

	// RVA: 0x23156D4 Offset: 0x23156D4 VA: 0x23156D4
	public void .ctor(AddressFamily family) { }

	// RVA: 0x23156DC Offset: 0x23156DC VA: 0x23156DC
	public AddressFamily get_Family() { }

	// RVA: 0x2315764 Offset: 0x2315764 VA: 0x2315764
	public int get_Size() { }

	// RVA: 0x2315790 Offset: 0x2315790 VA: 0x2315790
	public byte get_Item(int offset) { }

	// RVA: 0x23157E4 Offset: 0x23157E4 VA: 0x23157E4
	public void set_Item(int offset, byte value) { }

	// RVA: 0x2315844 Offset: 0x2315844 VA: 0x2315844 Slot: 3
	public override string ToString() { }

	// RVA: 0x2315BE0 Offset: 0x2315BE0 VA: 0x2315BE0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2315D58 Offset: 0x2315D58 VA: 0x2315D58 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Net
public enum TransportType // TypeDefIndex: 1608
{
	// Fields
	public int value__; // 0x0
	public const TransportType Udp = 1;
	public const TransportType Connectionless = 1;
	public const TransportType Tcp = 2;
	public const TransportType ConnectionOriented = 2;
	public const TransportType All = 3;
}

// Namespace: System.Net
public class UploadDataCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1609
{
	// Fields
	private byte[] result; // 0x28

	// Properties
	public byte[] Result { get; }

	// Methods

	// RVA: 0x221D354 Offset: 0x221D354 VA: 0x221D354
	internal void .ctor(byte[] result, Exception error, bool cancelled, object userState) { }

	// RVA: 0x221D390 Offset: 0x221D390 VA: 0x221D390
	public byte[] get_Result() { }
}

// Namespace: System.Net
public class UploadFileCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1610
{
	// Fields
	private byte[] result; // 0x28

	// Properties
	public byte[] Result { get; }

	// Methods

	// RVA: 0x221D7A4 Offset: 0x221D7A4 VA: 0x221D7A4
	internal void .ctor(byte[] result, Exception error, bool cancelled, object userState) { }

	// RVA: 0x221D7E0 Offset: 0x221D7E0 VA: 0x221D7E0
	public byte[] get_Result() { }
}

// Namespace: System.Net
public class UploadProgressChangedEventArgs : ProgressChangedEventArgs // TypeDefIndex: 1611
{
	// Fields
	private long received; // 0x20
	private long sent; // 0x28
	private long total_recv; // 0x30
	private long total_send; // 0x38

	// Properties
	public long BytesReceived { get; }
	public long TotalBytesToReceive { get; }
	public long BytesSent { get; }
	public long TotalBytesToSend { get; }

	// Methods

	// RVA: 0x221DBF4 Offset: 0x221DBF4 VA: 0x221DBF4
	internal void .ctor(long bytesReceived, long totalBytesToReceive, long bytesSent, long totalBytesToSend, int progressPercentage, object userState) { }

	// RVA: 0x221DC48 Offset: 0x221DC48 VA: 0x221DC48
	public long get_BytesReceived() { }

	// RVA: 0x221DC50 Offset: 0x221DC50 VA: 0x221DC50
	public long get_TotalBytesToReceive() { }

	// RVA: 0x221DC58 Offset: 0x221DC58 VA: 0x221DC58
	public long get_BytesSent() { }

	// RVA: 0x221DC60 Offset: 0x221DC60 VA: 0x221DC60
	public long get_TotalBytesToSend() { }
}

// Namespace: System.Net
public class UploadStringCompletedEventArgs : AsyncCompletedEventArgs // TypeDefIndex: 1612
{
	// Fields
	private string result; // 0x28

	// Properties
	public string Result { get; }

	// Methods
