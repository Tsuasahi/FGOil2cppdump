	[HideInInspector] // RVA: 0xC85154 Offset: 0xC85154 VA: 0xC85154
	[SerializeField] // RVA: 0xC85154 Offset: 0xC85154 VA: 0xC85154
	private string mSpriteName; // 0x20
	[HideInInspector] // RVA: 0xC8518C Offset: 0xC8518C VA: 0xC8518C
	[SerializeField] // RVA: 0xC8518C Offset: 0xC8518C VA: 0xC8518C
	private List<BMGlyph> mSaved; // 0x28
	private Dictionary<int, BMGlyph> mDict; // 0x30

	// Properties
	public bool isValid { get; }
	public int charSize { get; set; }
	public int baseOffset { get; set; }
	public int texWidth { get; set; }
	public int texHeight { get; set; }
	public int glyphCount { get; }
	public string spriteName { get; set; }
	public List<BMGlyph> glyphs { get; }

	// Methods

	// RVA: 0xF5D0AC Offset: 0xF5D0AC VA: 0xF5D0AC
	public void .ctor() { }

	// RVA: 0xF5D14C Offset: 0xF5D14C VA: 0xF5D14C
	public bool get_isValid() { }

	// RVA: 0xF5D1B8 Offset: 0xF5D1B8 VA: 0xF5D1B8
	public int get_charSize() { }

	// RVA: 0xF5D1C0 Offset: 0xF5D1C0 VA: 0xF5D1C0
	public void set_charSize(int value) { }

	// RVA: 0xF5D1C8 Offset: 0xF5D1C8 VA: 0xF5D1C8
	public int get_baseOffset() { }

	// RVA: 0xF5D1D0 Offset: 0xF5D1D0 VA: 0xF5D1D0
	public void set_baseOffset(int value) { }

	// RVA: 0xF5D1D8 Offset: 0xF5D1D8 VA: 0xF5D1D8
	public int get_texWidth() { }

	// RVA: 0xF5D1E0 Offset: 0xF5D1E0 VA: 0xF5D1E0
	public void set_texWidth(int value) { }

	// RVA: 0xF5D1E8 Offset: 0xF5D1E8 VA: 0xF5D1E8
	public int get_texHeight() { }

	// RVA: 0xF5D1F0 Offset: 0xF5D1F0 VA: 0xF5D1F0
	public void set_texHeight(int value) { }

	// RVA: 0xF5D1F8 Offset: 0xF5D1F8 VA: 0xF5D1F8
	public int get_glyphCount() { }

	// RVA: 0xF5D274 Offset: 0xF5D274 VA: 0xF5D274
	public string get_spriteName() { }

	// RVA: 0xF5D27C Offset: 0xF5D27C VA: 0xF5D27C
	public void set_spriteName(string value) { }

	// RVA: 0xF5D284 Offset: 0xF5D284 VA: 0xF5D284
	public List<BMGlyph> get_glyphs() { }

	// RVA: 0xF5D28C Offset: 0xF5D28C VA: 0xF5D28C
	public BMGlyph GetGlyph(int index, bool createIfMissing) { }

	// RVA: 0xF5D49C Offset: 0xF5D49C VA: 0xF5D49C
	public BMGlyph GetGlyph(int index) { }

	// RVA: 0xF5D4A4 Offset: 0xF5D4A4 VA: 0xF5D4A4
	public void Clear() { }

	// RVA: 0xF5D528 Offset: 0xF5D528 VA: 0xF5D528
	public void Trim(int xMin, int yMin, int xMax, int yMax) { }
}

// Namespace: 
[Serializable]
public class BMGlyph // TypeDefIndex: 12132
{
	// Fields
	public int index; // 0x10
	public int x; // 0x14
	public int y; // 0x18
	public int width; // 0x1C
	public int height; // 0x20
	public int offsetX; // 0x24
	public int offsetY; // 0x28
	public int advance; // 0x2C
	public int channel; // 0x30
	public List<int> kerning; // 0x38

	// Methods

	// RVA: 0xF5D494 Offset: 0xF5D494 VA: 0xF5D494
	public void .ctor() { }

	// RVA: 0xF5D6B0 Offset: 0xF5D6B0 VA: 0xF5D6B0
	public int GetKerning(int previousChar) { }

	// RVA: 0xF5D7B4 Offset: 0xF5D7B4 VA: 0xF5D7B4
	public void SetKerning(int previousChar, int amount) { }

	// RVA: 0xF5D624 Offset: 0xF5D624 VA: 0xF5D624
	public void Trim(int xMin, int yMin, int xMax, int yMax) { }
}

// Namespace: 
[Serializable]
public class BMSymbol // TypeDefIndex: 12133
{
	// Fields
	public string sequence; // 0x10
	public string spriteName; // 0x18
	private UISpriteData mSprite; // 0x20
	private bool mIsValid; // 0x28
	private int mLength; // 0x2C
	private int mOffsetX; // 0x30
	private int mOffsetY; // 0x34
	private int mWidth; // 0x38
	private int mHeight; // 0x3C
	private int mAdvance; // 0x40
	private Rect mUV; // 0x44

	// Properties
	public int length { get; }
	public int offsetX { get; }
	public int offsetY { get; }
	public int width { get; }
	public int height { get; }
	public int advance { get; }
	public Rect uvRect { get; }

	// Methods

	// RVA: 0xF5D934 Offset: 0xF5D934 VA: 0xF5D934
	public void .ctor() { }

	// RVA: 0xF5D93C Offset: 0xF5D93C VA: 0xF5D93C
	public int get_length() { }

	// RVA: 0xF5D980 Offset: 0xF5D980 VA: 0xF5D980
	public int get_offsetX() { }

	// RVA: 0xF5D988 Offset: 0xF5D988 VA: 0xF5D988
	public int get_offsetY() { }

	// RVA: 0xF5D990 Offset: 0xF5D990 VA: 0xF5D990
	public int get_width() { }

	// RVA: 0xF5D998 Offset: 0xF5D998 VA: 0xF5D998
	public int get_height() { }

	// RVA: 0xF5D9A0 Offset: 0xF5D9A0 VA: 0xF5D9A0
	public int get_advance() { }

	// RVA: 0xF5D9A8 Offset: 0xF5D9A8 VA: 0xF5D9A8
	public Rect get_uvRect() { }

	// RVA: 0xF5D9B4 Offset: 0xF5D9B4 VA: 0xF5D9B4
	public void MarkAsChanged() { }

	// RVA: 0xF5D9BC Offset: 0xF5D9BC VA: 0xF5D9BC
	public bool Validate(UIAtlas atlas) { }
}

// Namespace: 
public class ByteReader // TypeDefIndex: 12134
{
	// Fields
	private byte[] mBuffer; // 0x10
	private int mOffset; // 0x18
	private static BetterList<string> mTemp; // 0x0

	// Properties
	public bool canRead { get; }

	// Methods

	// RVA: 0x14DCCD4 Offset: 0x14DCCD4 VA: 0x14DCCD4
	public void .ctor(byte[] bytes) { }

	// RVA: 0x14DCD00 Offset: 0x14DCD00 VA: 0x14DCD00
	public void .ctor(TextAsset asset) { }

	// RVA: 0x14DCD44 Offset: 0x14DCD44 VA: 0x14DCD44
	public static ByteReader Open(string path) { }

	// RVA: 0x14DCE5C Offset: 0x14DCE5C VA: 0x14DCE5C
	public bool get_canRead() { }

	// RVA: 0x14DCE80 Offset: 0x14DCE80 VA: 0x14DCE80
	private static string ReadLine(byte[] buffer, int start, int count) { }

	// RVA: 0x14DCF20 Offset: 0x14DCF20 VA: 0x14DCF20
	public string ReadLine() { }

	// RVA: 0x14DCF28 Offset: 0x14DCF28 VA: 0x14DCF28
	public string ReadLine(bool skipEmptyLines) { }

	// RVA: 0x14DD0AC Offset: 0x14DD0AC VA: 0x14DD0AC
	public Dictionary<string, string> ReadDictionary() { }

	// RVA: 0x14DD2A8 Offset: 0x14DD2A8 VA: 0x14DD2A8
	public BetterList<string> ReadCSV() { }

	// RVA: 0x14DD7DC Offset: 0x14DD7DC VA: 0x14DD7DC
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public class EventDelegate // TypeDefIndex: 12135
{
	// Fields
	[SerializeField] // RVA: 0xC851C4 Offset: 0xC851C4 VA: 0xC851C4
	private MonoBehaviour mTarget; // 0x10
	[SerializeField] // RVA: 0xC851D4 Offset: 0xC851D4 VA: 0xC851D4
	private string mMethodName; // 0x18
	[SerializeField] // RVA: 0xC851E4 Offset: 0xC851E4 VA: 0xC851E4
	private EventDelegate.Parameter[] mParameters; // 0x20
	public bool oneShot; // 0x28
	private EventDelegate.Callback mCachedCallback; // 0x30
	private bool mRawDelegate; // 0x38
	private bool mCached; // 0x39
	private MethodInfo mMethod; // 0x40
	private ParameterInfo[] mParameterInfos; // 0x48
	private object[] mArgs; // 0x50
	private static int s_Hash; // 0x0

	// Properties
	public MonoBehaviour target { get; set; }
	public string methodName { get; set; }
	public EventDelegate.Parameter[] parameters { get; }
	public bool isValid { get; }
	public bool isEnabled { get; }

	// Methods

	// RVA: 0x1875144 Offset: 0x1875144 VA: 0x1875144
	public void .ctor() { }

	// RVA: 0x187514C Offset: 0x187514C VA: 0x187514C
	public void .ctor(EventDelegate.Callback call) { }

	// RVA: 0x18752E0 Offset: 0x18752E0 VA: 0x18752E0
	public void .ctor(MonoBehaviour target, string methodName) { }

	// RVA: 0x1875348 Offset: 0x1875348 VA: 0x1875348
	public MonoBehaviour get_target() { }

	// RVA: 0x1875350 Offset: 0x1875350 VA: 0x1875350
	public void set_target(MonoBehaviour value) { }

	// RVA: 0x1875368 Offset: 0x1875368 VA: 0x1875368
	public string get_methodName() { }

	// RVA: 0x1875370 Offset: 0x1875370 VA: 0x1875370
	public void set_methodName(string value) { }

	// RVA: 0x1875384 Offset: 0x1875384 VA: 0x1875384
	public EventDelegate.Parameter[] get_parameters() { }

	// RVA: 0x1875978 Offset: 0x1875978 VA: 0x1875978
	public bool get_isValid() { }

	// RVA: 0x1875A58 Offset: 0x1875A58 VA: 0x1875A58
	public bool get_isEnabled() { }

	// RVA: 0x1875B58 Offset: 0x1875B58 VA: 0x1875B58
	private static string GetMethodName(EventDelegate.Callback callback) { }

	// RVA: 0x1875BA0 Offset: 0x1875BA0 VA: 0x1875BA0
	private static bool IsValid(EventDelegate.Callback callback) { }

	// RVA: 0x1875BC4 Offset: 0x1875BC4 VA: 0x1875BC4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1875DE8 Offset: 0x1875DE8 VA: 0x1875DE8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x187517C Offset: 0x187517C VA: 0x187517C
	private void Set(EventDelegate.Callback call) { }

	// RVA: 0x187532C Offset: 0x187532C VA: 0x187532C
	public void Set(MonoBehaviour target, string methodName) { }

	// RVA: 0x18753B4 Offset: 0x18753B4 VA: 0x18753B4
	private void Cache() { }

	// RVA: 0x1875EF0 Offset: 0x1875EF0 VA: 0x1875EF0
	public bool Execute() { }

	// RVA: 0x1875E50 Offset: 0x1875E50 VA: 0x1875E50
	public void Clear() { }

	// RVA: 0x1876DEC Offset: 0x1876DEC VA: 0x1876DEC Slot: 3
	public override string ToString() { }

	// RVA: 0x1876FB8 Offset: 0x1876FB8 VA: 0x1876FB8
	public static void Execute(List<EventDelegate> list) { }

	// RVA: 0x1877168 Offset: 0x1877168 VA: 0x1877168
	public static bool IsValid(List<EventDelegate> list) { }

	// RVA: 0x1877214 Offset: 0x1877214 VA: 0x1877214
	public static EventDelegate Set(List<EventDelegate> list, EventDelegate.Callback callback) { }

	// RVA: 0x18772C4 Offset: 0x18772C4 VA: 0x18772C4
	public static void Set(List<EventDelegate> list, EventDelegate del) { }

	// RVA: 0x187734C Offset: 0x187734C VA: 0x187734C
	public static EventDelegate Add(List<EventDelegate> list, EventDelegate.Callback callback) { }

	// RVA: 0x18773C4 Offset: 0x18773C4 VA: 0x18773C4
	public static EventDelegate Add(List<EventDelegate> list, EventDelegate.Callback callback, bool oneShot) { }

	// RVA: 0x18774F0 Offset: 0x18774F0 VA: 0x18774F0
	public static void Add(List<EventDelegate> list, EventDelegate ev) { }

	// RVA: 0x187757C Offset: 0x187757C VA: 0x187757C
	public static void Add(List<EventDelegate> list, EventDelegate ev, bool oneShot) { }

	// RVA: 0x1877888 Offset: 0x1877888 VA: 0x1877888
	public static bool Remove(List<EventDelegate> list, EventDelegate.Callback callback) { }

	// RVA: 0x1877964 Offset: 0x1877964 VA: 0x1877964
	public static bool Remove(List<EventDelegate> list, EventDelegate ev) { }

	// RVA: 0x1877A40 Offset: 0x1877A40 VA: 0x1877A40
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public class EventDelegate.Parameter // TypeDefIndex: 12136
{
	// Fields
	public Object obj; // 0x10
	public string field; // 0x18
	private object mValue; // 0x20
	public Type expectedType; // 0x28
	public bool cached; // 0x30
	public PropertyInfo propInfo; // 0x38
	public FieldInfo fieldInfo; // 0x40

	// Properties
	public object value { get; set; }
	public Type type { get; }

	// Methods

	// RVA: 0x1875E6C Offset: 0x1875E6C VA: 0x1875E6C
	public void .ctor() { }

	// RVA: 0x1877B04 Offset: 0x1877B04 VA: 0x1877B04
	public void .ctor(Object obj, string field) { }

	// RVA: 0x1877BA0 Offset: 0x1877BA0 VA: 0x1877BA0
	public void .ctor(object val) { }

	// RVA: 0x1876ACC Offset: 0x1876ACC VA: 0x1876ACC
	public object get_value() { }

	// RVA: 0x1876DE4 Offset: 0x1876DE4 VA: 0x1876DE4
	public void set_value(object value) { }

	// RVA: 0x1876D0C Offset: 0x1876D0C VA: 0x1876D0C
	public Type get_type() { }
}

// Namespace: 
public sealed class EventDelegate.Callback : MulticastDelegate // TypeDefIndex: 12137
{
	// Methods

	// RVA: 0x1877AB4 Offset: 0x1877AB4 VA: 0x1877AB4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x18768CC Offset: 0x18768CC VA: 0x18768CC Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1877AC4 Offset: 0x1877AC4 VA: 0x1877AC4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1877AF8 Offset: 0x1877AF8 VA: 0x1877AF8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public static class Localization // TypeDefIndex: 12138
{
	// Fields
	public static Localization.LoadFunction loadFunction; // 0x0
	public static Localization.OnLocalizeNotification onLocalize; // 0x8
	public static bool localizationHasBeenSet; // 0x10
	private static string[] mLanguages; // 0x18
	private static Dictionary<string, string> mOldDictionary; // 0x20
	private static Dictionary<string, string[]> mDictionary; // 0x28
	private static int mLanguageIndex; // 0x30
	private static string mLanguage; // 0x38
	private static bool mMerging; // 0x40

	// Properties
	public static Dictionary<string, string[]> dictionary { get; set; }
	public static string[] knownLanguages { get; }
	public static string language { get; set; }
	[ObsoleteAttribute] // RVA: 0xCDECC0 Offset: 0xCDECC0 VA: 0xCDECC0
	public static bool isActive { get; }

	// Methods

	// RVA: 0x17C8768 Offset: 0x17C8768 VA: 0x17C8768
	public static Dictionary<string, string[]> get_dictionary() { }

	// RVA: 0x17C8B7C Offset: 0x17C8B7C VA: 0x17C8B7C
	public static void set_dictionary(Dictionary<string, string[]> value) { }

	// RVA: 0x17C8BF8 Offset: 0x17C8BF8 VA: 0x17C8BF8
	public static string[] get_knownLanguages() { }

	// RVA: 0x17C8CD0 Offset: 0x17C8CD0 VA: 0x17C8CD0
	public static string get_language() { }

	// RVA: 0x17C900C Offset: 0x17C900C VA: 0x17C900C
	public static void set_language(string value) { }

	// RVA: 0x17C8840 Offset: 0x17C8840 VA: 0x17C8840
	private static bool LoadDictionary(string value) { }

	// RVA: 0x17C8DF0 Offset: 0x17C8DF0 VA: 0x17C8DF0
	private static bool LoadAndSelect(string value) { }

	// RVA: 0x17C983C Offset: 0x17C983C VA: 0x17C983C
	public static void Load(TextAsset asset) { }

	// RVA: 0x17C9508 Offset: 0x17C9508 VA: 0x17C9508
	public static void Set(string languageName, byte[] bytes) { }

	// RVA: 0x17C9A9C Offset: 0x17C9A9C VA: 0x17C9A9C
	public static bool LoadCSV(TextAsset asset, bool merge = False) { }

	// RVA: 0x17C9494 Offset: 0x17C9494 VA: 0x17C9494
	public static bool LoadCSV(byte[] bytes, bool merge = False) { }

	// RVA: 0x17CA628 Offset: 0x17CA628 VA: 0x17CA628
	private static bool HasLanguage(string languageName) { }

	// RVA: 0x17C9B30 Offset: 0x17C9B30 VA: 0x17C9B30
	private static bool LoadCSV(byte[] bytes, TextAsset asset, bool merge = False) { }

	// RVA: 0x17CA764 Offset: 0x17CA764 VA: 0x17CA764
	private static void AddCSV(BetterList<string> newValues, string[] newLanguages, Dictionary<string, int> languageIndices) { }

	// RVA: 0x17CABB4 Offset: 0x17CABB4 VA: 0x17CABB4
	private static string[] ExtractStrings(BetterList<string> added, string[] newLanguages, Dictionary<string, int> languageIndices) { }

	// RVA: 0x17C95BC Offset: 0x17C95BC VA: 0x17C95BC
	private static bool SelectLanguage(string language) { }

	// RVA: 0x17C9900 Offset: 0x17C9900 VA: 0x17C9900
	public static void Set(string languageName, Dictionary<string, string> dictionary) { }

	// RVA: 0x17CAF44 Offset: 0x17CAF44 VA: 0x17CAF44
	public static void Set(string key, string value) { }

	// RVA: 0x17CB084 Offset: 0x17CB084 VA: 0x17CB084
	public static string Get(string key) { }

	// RVA: 0x17CB610 Offset: 0x17CB610 VA: 0x17CB610
	public static string Format(string key, object[] parameters) { }

	// RVA: 0x17CB6B8 Offset: 0x17CB6B8 VA: 0x17CB6B8
	public static bool get_isActive() { }

	[ObsoleteAttribute] // RVA: 0xCD6920 Offset: 0xCD6920 VA: 0xCD6920
	// RVA: 0x17CB6C0 Offset: 0x17CB6C0 VA: 0x17CB6C0
	public static string Localize(string key) { }

	// RVA: 0x17CB724 Offset: 0x17CB724 VA: 0x17CB724
	public static bool Exists(string key) { }

	// RVA: 0x17CB95C Offset: 0x17CB95C VA: 0x17CB95C
	private static void .cctor() { }
}

// Namespace: 
public sealed class Localization.LoadFunction : MulticastDelegate // TypeDefIndex: 12139
{
	// Methods

	// RVA: 0x17CBA28 Offset: 0x17CBA28 VA: 0x17CBA28
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x17C90F0 Offset: 0x17C90F0 VA: 0x17C90F0 Slot: 11
	public virtual byte[] Invoke(string path) { }

	// RVA: 0x17CBA38 Offset: 0x17CBA38 VA: 0x17CBA38 Slot: 12
	public virtual IAsyncResult BeginInvoke(string path, AsyncCallback callback, object object) { }

	// RVA: 0x17CBA5C Offset: 0x17CBA5C VA: 0x17CBA5C Slot: 13
	public virtual byte[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class Localization.OnLocalizeNotification : MulticastDelegate // TypeDefIndex: 12140
{
	// Methods

	// RVA: 0x17CBA68 Offset: 0x17CBA68 VA: 0x17CBA68
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x17CA9B4 Offset: 0x17CA9B4 VA: 0x17CA9B4 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x17CBA78 Offset: 0x17CBA78 VA: 0x17CBA78 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x17CBAAC Offset: 0x17CBAAC VA: 0x17CBAAC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2C82C Offset: 0xC2C82C VA: 0xC2C82C
public class NGUIDebug : MonoBehaviour // TypeDefIndex: 12141
{
	// Fields
	private static bool mRayDebug; // 0x0
	private static List<string> mLines; // 0x8
	private static NGUIDebug mInstance; // 0x10

	// Properties
	public static bool debugRaycast { get; set; }

	// Methods

	// RVA: 0x18E2FA4 Offset: 0x18E2FA4 VA: 0x18E2FA4
	public void .ctor() { }

	// RVA: 0x18E2FAC Offset: 0x18E2FAC VA: 0x18E2FAC
	public static bool get_debugRaycast() { }

	// RVA: 0x18E3014 Offset: 0x18E3014 VA: 0x18E3014
	public static void set_debugRaycast(bool value) { }

	// RVA: 0x18E30B8 Offset: 0x18E30B8 VA: 0x18E30B8
	public static void CreateInstance() { }

	// RVA: 0x18E3204 Offset: 0x18E3204 VA: 0x18E3204
	private static void LogString(string text) { }

	// RVA: 0x18E334C Offset: 0x18E334C VA: 0x18E334C
	public static void Log(object[] objs) { }

	// RVA: 0x18E34BC Offset: 0x18E34BC VA: 0x18E34BC
	public static void Clear() { }

	// RVA: 0x18E3540 Offset: 0x18E3540 VA: 0x18E3540
	public static void DrawBounds(Bounds b) { }

	// RVA: 0x18E3654 Offset: 0x18E3654 VA: 0x18E3654
	private void OnGUI() { }

	// RVA: 0x18E3B40 Offset: 0x18E3B40 VA: 0x18E3B40
	private static void .cctor() { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC2C864 Offset: 0xC2C864 VA: 0xC2C864
public static class NGUIMath // TypeDefIndex: 12142
{
	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD6958 Offset: 0xCD6958 VA: 0xCD6958
	[DebuggerStepThroughAttribute] // RVA: 0xCD6958 Offset: 0xCD6958 VA: 0xCD6958
	// RVA: 0x18E4208 Offset: 0x18E4208 VA: 0x18E4208
	public static float Lerp(float from, float to, float factor) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6990 Offset: 0xCD6990 VA: 0xCD6990
	[DebuggerStepThroughAttribute] // RVA: 0xCD6990 Offset: 0xCD6990 VA: 0xCD6990
	// RVA: 0x18E4220 Offset: 0x18E4220 VA: 0x18E4220
	public static int ClampIndex(int val, int max) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD69C8 Offset: 0xCD69C8 VA: 0xCD69C8
	[DebuggerStepThroughAttribute] // RVA: 0xCD69C8 Offset: 0xCD69C8 VA: 0xCD69C8
	// RVA: 0x18E423C Offset: 0x18E423C VA: 0x18E423C
	public static int RepeatIndex(int val, int max) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6A00 Offset: 0xCD6A00 VA: 0xCD6A00
	[DebuggerStepThroughAttribute] // RVA: 0xCD6A00 Offset: 0xCD6A00 VA: 0xCD6A00
	// RVA: 0x18E426C Offset: 0x18E426C VA: 0x18E426C
	public static float WrapAngle(float angle) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6A38 Offset: 0xCD6A38 VA: 0xCD6A38
	[DebuggerStepThroughAttribute] // RVA: 0xCD6A38 Offset: 0xCD6A38 VA: 0xCD6A38
	// RVA: 0x18E42B8 Offset: 0x18E42B8 VA: 0x18E42B8
	public static float Wrap01(float val) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6A70 Offset: 0xCD6A70 VA: 0xCD6A70
	[DebuggerStepThroughAttribute] // RVA: 0xCD6A70 Offset: 0xCD6A70 VA: 0xCD6A70
	// RVA: 0x18E4334 Offset: 0x18E4334 VA: 0x18E4334
	public static int HexToDecimal(char ch) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6AA8 Offset: 0xCD6AA8 VA: 0xCD6AA8
	[DebuggerStepThroughAttribute] // RVA: 0xCD6AA8 Offset: 0xCD6AA8 VA: 0xCD6AA8
	// RVA: 0x18E4394 Offset: 0x18E4394 VA: 0x18E4394
	public static char DecimalToHexChar(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6AE0 Offset: 0xCD6AE0 VA: 0xCD6AE0
	[DebuggerStepThroughAttribute] // RVA: 0xCD6AE0 Offset: 0xCD6AE0 VA: 0xCD6AE0
	// RVA: 0x18E43BC Offset: 0x18E43BC VA: 0x18E43BC
	public static string DecimalToHex8(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6B18 Offset: 0xCD6B18 VA: 0xCD6B18
	[DebuggerStepThroughAttribute] // RVA: 0xCD6B18 Offset: 0xCD6B18 VA: 0xCD6B18
	// RVA: 0x18E4428 Offset: 0x18E4428 VA: 0x18E4428
	public static string DecimalToHex24(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6B50 Offset: 0xCD6B50 VA: 0xCD6B50
	[DebuggerStepThroughAttribute] // RVA: 0xCD6B50 Offset: 0xCD6B50 VA: 0xCD6B50
	// RVA: 0x18E4494 Offset: 0x18E4494 VA: 0x18E4494
	public static string DecimalToHex32(int num) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6B88 Offset: 0xCD6B88 VA: 0xCD6B88
	[DebuggerStepThroughAttribute] // RVA: 0xCD6B88 Offset: 0xCD6B88 VA: 0xCD6B88
	// RVA: 0x18E44EC Offset: 0x18E44EC VA: 0x18E44EC
	public static int ColorToInt(Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6BC0 Offset: 0xCD6BC0 VA: 0xCD6BC0
	[DebuggerStepThroughAttribute] // RVA: 0xCD6BC0 Offset: 0xCD6BC0 VA: 0xCD6BC0
	// RVA: 0x18E45BC Offset: 0x18E45BC VA: 0x18E45BC
	public static Color IntToColor(int val) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6BF8 Offset: 0xCD6BF8 VA: 0xCD6BF8
	[DebuggerStepThroughAttribute] // RVA: 0xCD6BF8 Offset: 0xCD6BF8 VA: 0xCD6BF8
	// RVA: 0x18E4618 Offset: 0x18E4618 VA: 0x18E4618
	public static string IntToBinary(int val, int bits) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6C30 Offset: 0xCD6C30 VA: 0xCD6C30
	[DebuggerStepThroughAttribute] // RVA: 0xCD6C30 Offset: 0xCD6C30 VA: 0xCD6C30
	// RVA: 0x18E4780 Offset: 0x18E4780 VA: 0x18E4780
	public static Color HexToColor(uint val) { }

	// RVA: 0x18E4784 Offset: 0x18E4784 VA: 0x18E4784
	public static Rect ConvertToTexCoords(Rect rect, int width, int height) { }

	// RVA: 0x18E4848 Offset: 0x18E4848 VA: 0x18E4848
	public static Rect ConvertToPixels(Rect rect, int width, int height, bool round) { }

	// RVA: 0x18E4A0C Offset: 0x18E4A0C VA: 0x18E4A0C
	public static Rect MakePixelPerfect(Rect rect) { }

	// RVA: 0x18E4B20 Offset: 0x18E4B20 VA: 0x18E4B20
	public static Rect MakePixelPerfect(Rect rect, int width, int height) { }

	// RVA: 0x18E4C90 Offset: 0x18E4C90 VA: 0x18E4C90
	public static Vector2 ConstrainRect(Vector2 minRect, Vector2 maxRect, Vector2 minArea, Vector2 maxArea) { }

	// RVA: 0x18E4DAC Offset: 0x18E4DAC VA: 0x18E4DAC
	public static Bounds CalculateAbsoluteWidgetBounds(Transform trans) { }

	// RVA: 0x18E5138 Offset: 0x18E5138 VA: 0x18E5138
	public static Bounds CalculateRelativeWidgetBounds(Transform trans) { }

	// RVA: 0x18E53DC Offset: 0x18E53DC VA: 0x18E53DC
	public static Bounds CalculateRelativeWidgetBounds(Transform trans, bool considerInactive) { }

	// RVA: 0x18E53EC Offset: 0x18E53EC VA: 0x18E53EC
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content) { }

	// RVA: 0x18E5148 Offset: 0x18E5148 VA: 0x18E5148
	public static Bounds CalculateRelativeWidgetBounds(Transform relativeTo, Transform content, bool considerInactive, bool considerParents = True) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6C68 Offset: 0xCD6C68 VA: 0xCD6C68
	[DebuggerStepThroughAttribute] // RVA: 0xCD6C68 Offset: 0xCD6C68 VA: 0xCD6C68
	// RVA: 0x18E53F8 Offset: 0x18E53F8 VA: 0x18E53F8
	private static void CalculateRelativeWidgetBounds(Transform content, bool considerInactive, bool isRoot, ref Matrix4x4 toLocal, ref Vector3 vMin, ref Vector3 vMax, ref bool isSet, bool considerParents) { }

	// RVA: 0x18E5908 Offset: 0x18E5908 VA: 0x18E5908
	public static Vector3 SpringDampen(ref Vector3 velocity, float strength, float deltaTime) { }

	// RVA: 0x18E5A5C Offset: 0x18E5A5C VA: 0x18E5A5C
	public static Vector2 SpringDampen(ref Vector2 velocity, float strength, float deltaTime) { }

	// RVA: 0x18E5B90 Offset: 0x18E5B90 VA: 0x18E5B90
	public static float SpringLerp(float strength, float deltaTime) { }

	// RVA: 0x18E5C84 Offset: 0x18E5C84 VA: 0x18E5C84
	public static float SpringLerp(float from, float to, float strength, float deltaTime) { }

	// RVA: 0x18E5D70 Offset: 0x18E5D70 VA: 0x18E5D70
	public static Vector2 SpringLerp(Vector2 from, Vector2 to, float strength, float deltaTime) { }

	// RVA: 0x18E5E24 Offset: 0x18E5E24 VA: 0x18E5E24
	public static Vector3 SpringLerp(Vector3 from, Vector3 to, float strength, float deltaTime) { }

	// RVA: 0x18E5EF0 Offset: 0x18E5EF0 VA: 0x18E5EF0
	public static Quaternion SpringLerp(Quaternion from, Quaternion to, float strength, float deltaTime) { }

	// RVA: 0x18E5FC4 Offset: 0x18E5FC4 VA: 0x18E5FC4
	public static float RotateTowards(float from, float to, float maxAngle) { }

	// RVA: 0x18E60C0 Offset: 0x18E60C0 VA: 0x18E60C0
	private static float DistancePointToLineSegment(Vector2 point, Vector2 a, Vector2 b) { }

	// RVA: 0x18E633C Offset: 0x18E633C VA: 0x18E633C
	public static float DistanceToRectangle(Vector2[] screenPoints, Vector2 mousePos) { }

	// RVA: 0x18E6618 Offset: 0x18E6618 VA: 0x18E6618
	public static float DistanceToRectangle(Vector3[] worldPoints, Vector2 mousePos, Camera cam) { }

	// RVA: 0x18E67AC Offset: 0x18E67AC VA: 0x18E67AC
	public static Vector2 GetPivotOffset(UIWidget.Pivot pv) { }

	// RVA: 0x18E6848 Offset: 0x18E6848 VA: 0x18E6848
	public static UIWidget.Pivot GetPivot(Vector2 offset) { }

	// RVA: 0x18E68C4 Offset: 0x18E68C4 VA: 0x18E68C4
	public static void MoveWidget(UIRect w, float x, float y) { }

	// RVA: 0x18E68C8 Offset: 0x18E68C8 VA: 0x18E68C8
	public static void MoveRect(UIRect rect, float x, float y) { }

	// RVA: 0x18E6C34 Offset: 0x18E6C34 VA: 0x18E6C34
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight) { }

	// RVA: 0x18E6C50 Offset: 0x18E6C50 VA: 0x18E6C50
	public static void ResizeWidget(UIWidget w, UIWidget.Pivot pivot, float x, float y, int minWidth, int minHeight, int maxWidth, int maxHeight) { }

	// RVA: 0x18E7A64 Offset: 0x18E7A64 VA: 0x18E7A64
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top) { }

	// RVA: 0x18E6F40 Offset: 0x18E6F40 VA: 0x18E6F40
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight) { }

	// RVA: 0x18E6F54 Offset: 0x18E6F54 VA: 0x18E6F54
	public static void AdjustWidget(UIWidget w, float left, float bottom, float right, float top, int minWidth, int minHeight, int maxWidth, int maxHeight) { }

	// RVA: 0x18E7A80 Offset: 0x18E7A80 VA: 0x18E7A80
	public static int AdjustByDPI(float height) { }

	// RVA: 0x18E7B44 Offset: 0x18E7B44 VA: 0x18E7B44
	public static Vector2 ScreenToPixels(Vector2 pos, Transform relativeTo) { }

	// RVA: 0x18E7FA8 Offset: 0x18E7FA8 VA: 0x18E7FA8
	public static Vector2 ScreenToParentPixels(Vector2 pos, Transform relativeTo) { }

	// RVA: 0x18E820C Offset: 0x18E820C VA: 0x18E820C
	public static Vector3 WorldToLocalPoint(Vector3 worldPos, Camera worldCam, Camera uiCam, Transform relativeTo) { }

	[ExtensionAttribute] // RVA: 0xCD6CA0 Offset: 0xCD6CA0 VA: 0xCD6CA0
	// RVA: 0x18E8394 Offset: 0x18E8394 VA: 0x18E8394
	public static void OverlayPosition(Transform trans, Vector3 worldPos, Camera worldCam, Camera myCam) { }

	[ExtensionAttribute] // RVA: 0xCD6CB0 Offset: 0xCD6CB0 VA: 0xCD6CB0
	// RVA: 0x18E8504 Offset: 0x18E8504 VA: 0x18E8504
	public static void OverlayPosition(Transform trans, Vector3 worldPos, Camera worldCam) { }

	[ExtensionAttribute] // RVA: 0xCD6CC0 Offset: 0xCD6CC0 VA: 0xCD6CC0
	// RVA: 0x18E8638 Offset: 0x18E8638 VA: 0x18E8638
	public static void OverlayPosition(Transform trans, Transform target) { }
}

// Namespace: 
public static class NGUIText // TypeDefIndex: 12143
{
	// Fields
	public static UIFont bitmapFont; // 0x0
	public static Font dynamicFont; // 0x8
	public static NGUIText.GlyphInfo glyph; // 0x10
	public static int fontSize; // 0x18
	public static float fontScale; // 0x1C
	public static float pixelDensity; // 0x20
	public static FontStyle fontStyle; // 0x24
	public static NGUIText.Alignment alignment; // 0x28
	public static Color tint; // 0x2C
	public static int rectWidth; // 0x3C
	public static int rectHeight; // 0x40
	public static int regionWidth; // 0x44
	public static int regionHeight; // 0x48
	public static int maxLines; // 0x4C
	public static bool gradient; // 0x50
	public static Color gradientBottom; // 0x54
	public static Color gradientTop; // 0x64
	public static Color specificGradientBottom; // 0x74
	public static Color specificGradientTop; // 0x84
	public static Vector2 outlineDistance; // 0x94
	public static Color outlineEffect; // 0x9C
	public static bool encoding; // 0xAC
	public static float spacingX; // 0xB0
	public static float spacingY; // 0xB4
	public static bool premultiply; // 0xB8
	public static NGUIText.SymbolStyle symbolStyle; // 0xBC
	public static int finalSize; // 0xC0
	public static float finalSpacingX; // 0xC4
	public static float finalLineHeight; // 0xC8
	public static float baseline; // 0xCC
	public static bool useSymbols; // 0xD0
	private static Color mInvisible; // 0xD4
	private static BetterList<Color> mColors; // 0xE8
	private static BetterList<Color> mGradientColors; // 0xF0
	private static float mAlpha; // 0xF8
	private static CharacterInfo mTempChar; // 0xFC
	private static BetterList<float> mSizes; // 0x130
	private static Color32 s_c0; // 0x138
	private static Color32 s_c1; // 0x13C
	private static float[] mBoldOffset; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xC851F4 Offset: 0xC851F4 VA: 0xC851F4
	private static Dictionary<string, int> <>f__switch$map1C; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xC85204 Offset: 0xC85204 VA: 0xC85204
	private static Dictionary<string, int> <>f__switch$map1D; // 0x150

	// Methods

	// RVA: 0x18E87C4 Offset: 0x18E87C4 VA: 0x18E87C4
	public static void Update() { }

	// RVA: 0x18E8824 Offset: 0x18E8824 VA: 0x18E8824
	public static void Update(bool request) { }

	// RVA: 0x18E8CE0 Offset: 0x18E8CE0 VA: 0x18E8CE0
	public static void Prepare(string text) { }

	// RVA: 0x18E8DE8 Offset: 0x18E8DE8 VA: 0x18E8DE8
	public static BMSymbol GetSymbol(string text, int index, int textLength) { }

	// RVA: 0x18E8F00 Offset: 0x18E8F00 VA: 0x18E8F00
	public static float GetGlyphWidth(int ch, int prev) { }

	// RVA: 0x18E919C Offset: 0x18E919C VA: 0x18E919C
	public static NGUIText.GlyphInfo GetGlyph(int ch, int prev) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6CD0 Offset: 0xCD6CD0 VA: 0xCD6CD0
	[DebuggerStepThroughAttribute] // RVA: 0xCD6CD0 Offset: 0xCD6CD0 VA: 0xCD6CD0
	// RVA: 0x18E9D88 Offset: 0x18E9D88 VA: 0x18E9D88
	public static float ParseAlpha(string text, int index) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6D08 Offset: 0xCD6D08 VA: 0xCD6D08
	[DebuggerStepThroughAttribute] // RVA: 0xCD6D08 Offset: 0xCD6D08 VA: 0xCD6D08
	// RVA: 0x18E9E54 Offset: 0x18E9E54 VA: 0x18E9E54
	public static Color ParseColor(string text, int offset) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6D40 Offset: 0xCD6D40 VA: 0xCD6D40
	[DebuggerStepThroughAttribute] // RVA: 0xCD6D40 Offset: 0xCD6D40 VA: 0xCD6D40
	// RVA: 0x18E9EC8 Offset: 0x18E9EC8 VA: 0x18E9EC8
	public static Color ParseColor24(string text, int offset) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6D78 Offset: 0xCD6D78 VA: 0xCD6D78
	[DebuggerStepThroughAttribute] // RVA: 0xCD6D78 Offset: 0xCD6D78 VA: 0xCD6D78
	// RVA: 0x18EA01C Offset: 0x18EA01C VA: 0x18EA01C
	public static Color ParseColor32(string text, int offset) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6DB0 Offset: 0xCD6DB0 VA: 0xCD6DB0
	[DebuggerStepThroughAttribute] // RVA: 0xCD6DB0 Offset: 0xCD6DB0 VA: 0xCD6DB0
	// RVA: 0x18EA1CC Offset: 0x18EA1CC VA: 0x18EA1CC
	public static string EncodeColor(Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6DE8 Offset: 0xCD6DE8 VA: 0xCD6DE8
	[DebuggerStepThroughAttribute] // RVA: 0xCD6DE8 Offset: 0xCD6DE8 VA: 0xCD6DE8
	// RVA: 0x18EA278 Offset: 0x18EA278 VA: 0x18EA278
	public static string EncodeColor(string text, Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6E20 Offset: 0xCD6E20 VA: 0xCD6E20
	[DebuggerStepThroughAttribute] // RVA: 0xCD6E20 Offset: 0xCD6E20 VA: 0xCD6E20
	// RVA: 0x18EA4F0 Offset: 0x18EA4F0 VA: 0x18EA4F0
	public static string EncodeAlpha(float a) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6E58 Offset: 0xCD6E58 VA: 0xCD6E58
	[DebuggerStepThroughAttribute] // RVA: 0xCD6E58 Offset: 0xCD6E58 VA: 0xCD6E58
	// RVA: 0x18EA260 Offset: 0x18EA260 VA: 0x18EA260
	public static string EncodeColor24(Color c) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6E90 Offset: 0xCD6E90 VA: 0xCD6E90
	[DebuggerStepThroughAttribute] // RVA: 0xCD6E90 Offset: 0xCD6E90 VA: 0xCD6E90
	// RVA: 0x18EA57C Offset: 0x18EA57C VA: 0x18EA57C
	public static string EncodeColor32(Color c) { }

	// RVA: 0x18EA590 Offset: 0x18EA590 VA: 0x18EA590
	public static bool ParseSymbol(string text, ref int index) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6EC8 Offset: 0xCD6EC8 VA: 0xCD6EC8
	[DebuggerStepThroughAttribute] // RVA: 0xCD6EC8 Offset: 0xCD6EC8 VA: 0xCD6EC8
	// RVA: 0x18EBB44 Offset: 0x18EBB44 VA: 0x18EBB44
	public static bool IsHex(char ch) { }

	// RVA: 0x18EA66C Offset: 0x18EA66C VA: 0x18EA66C
	public static bool ParseSymbol(string text, ref int index, BetterList<Color> colors, bool premultiply, ref int sub, ref bool bold, ref bool italic, ref bool underline, ref bool strike, ref bool ignoreColor, ref bool spGradient, ref bool isOutline, BetterList<Color> gradientColors) { }

	// RVA: 0x18EBB80 Offset: 0x18EBB80 VA: 0x18EBB80
	public static string StripSymbols(string text) { }

	// RVA: 0x18EBD2C Offset: 0x18EBD2C VA: 0x18EBD2C
	public static void Align(BetterList<Vector3> verts, int indexOffset, float printedWidth) { }

	// RVA: 0x18EC3B4 Offset: 0x18EC3B4 VA: 0x18EC3B4
	public static int GetExactCharacterIndex(BetterList<Vector3> verts, BetterList<int> indices, Vector2 pos) { }

	// RVA: 0x18EC510 Offset: 0x18EC510 VA: 0x18EC510
	public static int GetApproximateCharacterIndex(BetterList<Vector3> verts, BetterList<int> indices, Vector2 pos) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6F00 Offset: 0xCD6F00 VA: 0xCD6F00
	[DebuggerStepThroughAttribute] // RVA: 0xCD6F00 Offset: 0xCD6F00 VA: 0xCD6F00
	// RVA: 0x18EC684 Offset: 0x18EC684 VA: 0x18EC684
	private static bool IsSpace(int ch) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6F38 Offset: 0xCD6F38 VA: 0xCD6F38
	[DebuggerStepThroughAttribute] // RVA: 0xCD6F38 Offset: 0xCD6F38 VA: 0xCD6F38
	// RVA: 0x18EC6B0 Offset: 0x18EC6B0 VA: 0x18EC6B0
	public static void EndLine(ref StringBuilder s) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD6F70 Offset: 0xCD6F70 VA: 0xCD6F70
	[DebuggerStepThroughAttribute] // RVA: 0xCD6F70 Offset: 0xCD6F70 VA: 0xCD6F70
	// RVA: 0x18EC7D0 Offset: 0x18EC7D0 VA: 0x18EC7D0
	private static void ReplaceSpaceWithNewline(ref StringBuilder s) { }

	// RVA: 0x18EC8D4 Offset: 0x18EC8D4 VA: 0x18EC8D4
	public static Vector2 CalculatePrintedSize(string text) { }

	// RVA: 0x18ECDB4 Offset: 0x18ECDB4 VA: 0x18ECDB4
	public static int CalculateOffsetToFit(string text) { }

	// RVA: 0x18ED23C Offset: 0x18ED23C VA: 0x18ED23C
	public static string GetEndOfLineThatFits(string text) { }

	// RVA: 0x18ED2EC Offset: 0x18ED2EC VA: 0x18ED2EC
	public static bool WrapText(string text, out string finalText) { }

	// RVA: 0x18ED364 Offset: 0x18ED364 VA: 0x18ED364
	public static bool WrapText(string text, out string finalText, bool keepCharCount) { }

	// RVA: 0x18EDEF8 Offset: 0x18EDEF8 VA: 0x18EDEF8
	public static void Print(string text, BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols) { }

	// RVA: 0x18F0C50 Offset: 0x18F0C50 VA: 0x18F0C50
	public static void PrintApproximateCharacterPositions(string text, BetterList<Vector3> verts, BetterList<int> indices) { }

	// RVA: 0x18F13EC Offset: 0x18F13EC VA: 0x18F13EC
	public static void PrintExactCharacterPositions(string text, BetterList<Vector3> verts, BetterList<int> indices) { }

	// RVA: 0x18F1AF0 Offset: 0x18F1AF0 VA: 0x18F1AF0
	public static void PrintCaretAndSelection(string text, int start, int end, BetterList<Vector3> caret, BetterList<Vector3> highlight) { }

	// RVA: 0x18F0688 Offset: 0x18F0688 VA: 0x18F0688
	public static void ApplyEffect(BetterList<Vector3> verts, BetterList<Vector2> uvs, BetterList<Color32> cols, int start, int end, float x, float y) { }

	// RVA: 0x18F2A04 Offset: 0x18F2A04 VA: 0x18F2A04
	public static Vector2 GetPosition(float angle, float radius) { }

	// RVA: 0x18F2ABC Offset: 0x18F2ABC VA: 0x18F2ABC
	private static void .cctor() { }
}

// Namespace: 
public enum NGUIText.Alignment // TypeDefIndex: 12144
{
	// Fields
	public int value__; // 0x0
	public const NGUIText.Alignment Automatic = 0;
	public const NGUIText.Alignment Left = 1;
	public const NGUIText.Alignment Center = 2;
	public const NGUIText.Alignment Right = 3;
	public const NGUIText.Alignment Justified = 4;
}

// Namespace: 
public enum NGUIText.SymbolStyle // TypeDefIndex: 12145
{
	// Fields
	public int value__; // 0x0
	public const NGUIText.SymbolStyle None = 0;
	public const NGUIText.SymbolStyle Normal = 1;
	public const NGUIText.SymbolStyle Colored = 2;
}

// Namespace: 
public class NGUIText.GlyphInfo // TypeDefIndex: 12146
{
	// Fields
	public Vector2 v0; // 0x10
	public Vector2 v1; // 0x18
	public Vector2 u0; // 0x20
	public Vector2 u1; // 0x28
	public Vector2 u2; // 0x30
	public Vector2 u3; // 0x38
	public float advance; // 0x40
	public int channel; // 0x44

	// Methods

	// RVA: 0x18F2DB8 Offset: 0x18F2DB8 VA: 0x18F2DB8
	public void .ctor() { }
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC2C874 Offset: 0xC2C874 VA: 0xC2C874
public static class NGUITools // TypeDefIndex: 12147
{
	// Fields
	private static AudioListener mListener; // 0x0
	private static bool mLoaded; // 0x8
	private static float mGlobalVolume; // 0xC
