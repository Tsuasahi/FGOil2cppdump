
	// RVA: 0xBBBE98 Offset: 0xBBBE98 VA: 0xBBBE98
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomExAcf.SelectorLabelInfo // TypeDefIndex: 3936
{
	// Fields
	public string selectorName; // 0x0
	public string labelName; // 0x8

	// Methods

	// RVA: 0xBBBF44 Offset: 0xBBBF44 VA: 0xBBBF44
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public class CriAtomExAsrRack : CriDisposable // TypeDefIndex: 3937
{
	// Fields
	public const int defaultRackId = 0;
	private int _rackId; // 0x20

	// Properties
	public int rackId { get; }
	public static CriAtomExAsrRack.Config defaultConfig { get; }

	// Methods

	// RVA: 0x1191448 Offset: 0x1191448 VA: 0x1191448
	public void .ctor(CriAtomExAsrRack.Config config, CriAtomExAsrRack.PlatformConfig platformConfig) { }

	// RVA: 0x119162C Offset: 0x119162C VA: 0x119162C
	public static string GetAppliedDspBusSnapshotName(int rackId) { }

	// RVA: 0x119175C Offset: 0x119175C VA: 0x119175C
	public CriAtomExAsrRack.PerformanceInfo GetPerformanceInfo() { }

	// RVA: 0x11918C8 Offset: 0x11918C8 VA: 0x11918C8
	public static CriAtomExAsrRack.PerformanceInfo GetPerformanceInfoByRackId(int rackId = 0) { }

	// RVA: 0x1191914 Offset: 0x1191914 VA: 0x1191914
	public void ResetPerformanceMonitor() { }

	// RVA: 0x11919B8 Offset: 0x11919B8 VA: 0x11919B8
	public static void ResetPerformanceMonitorByRackId(int rackId = 0) { }

	// RVA: 0x11919BC Offset: 0x11919BC VA: 0x11919BC
	public static void SetAisacControl(int rackId, string controlName, float value) { }

	// RVA: 0x1191A90 Offset: 0x1191A90 VA: 0x1191A90
	public static void SetAisacControl(int rackId, int controlId, float value) { }

	// RVA: 0x1191B50 Offset: 0x1191B50 VA: 0x1191B50 Slot: 5
	public override void Dispose() { }

	// RVA: 0x1191C78 Offset: 0x1191C78 VA: 0x1191C78
	public int get_rackId() { }

	// RVA: 0x1191C80 Offset: 0x1191C80 VA: 0x1191C80
	public static CriAtomExAsrRack.Config get_defaultConfig() { }

	// RVA: 0x1191CDC Offset: 0x1191CDC VA: 0x1191CDC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1191580 Offset: 0x1191580 VA: 0x1191580
	private static extern int CRIWARE349C80CC(in CriAtomExAsrRack.Config config, in CriAtomExAsrRack.PlatformConfig platformConfig) { }

	// RVA: 0x1191BDC Offset: 0x1191BDC VA: 0x1191BDC
	private static extern void criAtomExAsrRack_Destroy(int rackId) { }

	// RVA: 0x1191D58 Offset: 0x1191D58 VA: 0x1191D58
	private static extern void criAtomExAsrRack_AttachDspBusSetting(int rackId, string setting, IntPtr work, int workSize) { }

	// RVA: 0x1191E30 Offset: 0x1191E30 VA: 0x1191E30
	private static extern void criAtomExAsrRack_DetachDspBusSetting(int rackId) { }

	// RVA: 0x11916C0 Offset: 0x11916C0 VA: 0x11916C0
	private static extern IntPtr criAtomExAsrRack_GetAppliedDspBusSnapshotName(int rackId) { }

	// RVA: 0x1191ECC Offset: 0x1191ECC VA: 0x1191ECC
	private static extern void criAtomExAsrRack_ApplyDspBusSnapshot(int rackId, string snapshotName, int timeMs) { }

	// RVA: 0x119181C Offset: 0x119181C VA: 0x119181C
	private static extern void criAtomExAsrRack_GetPerformanceInfo(int rackId, out CriAtomExAsrRack.PerformanceInfo perfInfo) { }

	// RVA: 0x119191C Offset: 0x119191C VA: 0x119191C
	private static extern void criAtomExAsrRack_ResetPerformanceMonitor(int rackId) { }

	// RVA: 0x1191A94 Offset: 0x1191A94 VA: 0x1191A94
	private static extern void criAtomExAsrRack_SetAisacControlById(int rackId, ushort controlId, float value) { }

	// RVA: 0x11919C0 Offset: 0x11919C0 VA: 0x11919C0
	private static extern void criAtomExAsrRack_SetAisacControlByName(int rackId, string controlName, float value) { }
}

// Namespace: 
public struct CriAtomExAsrRack.Config // TypeDefIndex: 3938
{
	// Fields
	public float serverFrequency; // 0x0
	public int numBuses; // 0x4
	public int outputChannels; // 0x8
	public int outputSamplingRate; // 0xC
	public CriAtomEx.SoundRendererType soundRendererType; // 0x10
	public int outputRackId; // 0x14
	public IntPtr context; // 0x18
}

// Namespace: 
public struct CriAtomExAsrRack.PlatformConfig // TypeDefIndex: 3939
{
	// Fields
	public byte reserved; // 0x0
}

// Namespace: 
public struct CriAtomExAsrRack.PerformanceInfo // TypeDefIndex: 3940
{
	// Fields
	public uint processCount; // 0x0
	public uint lastProcessTime; // 0x4
	public uint maxProcessTime; // 0x8
	public uint averageProcessTime; // 0xC
	public uint lastProcessInterval; // 0x10
	public uint maxProcessInterval; // 0x14
	public uint averageProcessInterval; // 0x18
	public uint lastProcessSamples; // 0x1C
	public uint maxProcessSamples; // 0x20
	public uint averageProcessSamples; // 0x24
}

// Namespace: 
public class CriAtomExAuxIn : CriDisposable // TypeDefIndex: 3941
{
	// Fields
	private const string errorInvalidHandle = "[CRIWARE] Invalid native handle of CriAtomExAuxIn.";
	private IntPtr handle; // 0x20
	private CriAudioReadStream inputReadStream; // 0x28

	// Methods

	// RVA: 0x1191F94 Offset: 0x1191F94 VA: 0x1191F94
	public void .ctor(Nullable<CriAtomExAuxIn.Config> config) { }

	// RVA: 0x1192148 Offset: 0x1192148 VA: 0x1192148 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x11921C4 Offset: 0x11921C4 VA: 0x11921C4 Slot: 5
	public override void Dispose() { }

	// RVA: 0x11922F4 Offset: 0x11922F4 VA: 0x11922F4
	public void Start() { }

	// RVA: 0x1192398 Offset: 0x1192398 VA: 0x1192398
	public void Stop() { }

	// RVA: 0x1192498 Offset: 0x1192498 VA: 0x1192498
	public void SetFormat(int numChannels, int samplingRate) { }

	// RVA: 0x1192554 Offset: 0x1192554 VA: 0x1192554
	public void GetFormat(out int numChannels, out int samplingRate) { }

	// RVA: 0x1192610 Offset: 0x1192610 VA: 0x1192610
	public void SetVolume(float volume) { }

	// RVA: 0x11926C4 Offset: 0x11926C4 VA: 0x11926C4
	public void SetFrequencyRatio(float frequencyRatio) { }

	// RVA: 0x1192778 Offset: 0x1192778 VA: 0x1192778
	public void SetBusSendLevel(string busName, float level) { }

	// RVA: 0x1192850 Offset: 0x1192850 VA: 0x1192850
	public void SetInputReadStream(CriAudioReadStream stream) { }

	// RVA: 0x1192094 Offset: 0x1192094 VA: 0x1192094
	private static extern IntPtr criAtomAuxIn_Create(in CriAtomExAuxIn.Config config, IntPtr work, int work_size) { }

	// RVA: 0x1192258 Offset: 0x1192258 VA: 0x1192258
	private static extern void criAtomAuxIn_Destroy(IntPtr aux_in) { }

	// RVA: 0x11922FC Offset: 0x11922FC VA: 0x11922FC
	private static extern void criAtomAuxIn_Start(IntPtr aux_in) { }

	// RVA: 0x11923FC Offset: 0x11923FC VA: 0x11923FC
	private static extern void criAtomAuxIn_Stop(IntPtr aux_in) { }

	// RVA: 0x1192618 Offset: 0x1192618 VA: 0x1192618
	private static extern void criAtomAuxIn_SetVolume(IntPtr aux_in, float volume) { }

	// RVA: 0x11926CC Offset: 0x11926CC VA: 0x11926CC
	private static extern void criAtomAuxIn_SetFrequencyRatio(IntPtr aux_in, float ratio) { }

	// RVA: 0x1192780 Offset: 0x1192780 VA: 0x1192780
	private static extern void criAtomAuxIn_SetBusSendLevelByName(IntPtr aux_in, string bus_name, float level) { }

	// RVA: 0x11924A0 Offset: 0x11924A0 VA: 0x11924A0
	private static extern void criAtomAuxIn_SetFormat(IntPtr aux_in, int num_channels, int sampling_rate) { }

	// RVA: 0x119255C Offset: 0x119255C VA: 0x119255C
	private static extern void criAtomAuxIn_GetFormat(IntPtr aux_in, out int num_channels, out int sampling_rate) { }

	// RVA: 0x11928CC Offset: 0x11928CC VA: 0x11928CC
	private static extern void criAtomAuxIn_SetInputReadStream(IntPtr aux_in, IntPtr stream_cbfunc, IntPtr stream_ptr) { }
}

// Namespace: 
public struct CriAtomExAuxIn.Config // TypeDefIndex: 3942
{
	// Fields
	public int maxChannels; // 0x0
	public int maxSamplingRate; // 0x4
	public CriAtomEx.SoundRendererType soundRendererType; // 0x8

	// Properties
	public static CriAtomExAuxIn.Config Default { get; }

	// Methods

	// RVA: 0x1192084 Offset: 0x1192084 VA: 0x1192084
	public static CriAtomExAuxIn.Config get_Default() { }
}

// Namespace: 
public class CriAtomExMic : CriDisposable // TypeDefIndex: 3943
{
	// Fields
	private const string errorInvalidHandle = "[CRIWARE] Invalid native handle of CriAtomMic.";
	private const string errorInvalidBufferLength = "[CRIWARE] Invalid buffer length for CriAtomMic.ReadData.";
	private const string errorInvalidNumBuffers = "[CRIWARE] Number of buffers are not same with channels of CriAtomMic.";
	private const string errorAlreadyInitialized = "[CRIWARE] CriAtomMic module is already initialized.";
	private const string errorNotInitialized = "[CRIWARE] CriAtomMic module is not initialized.";
	[CompilerGeneratedAttribute] // RVA: 0xC8CDF4 Offset: 0xC8CDF4 VA: 0xC8CDF4
	[DebuggerBrowsableAttribute] // RVA: 0xC8CDF4 Offset: 0xC8CDF4 VA: 0xC8CDF4
	private static bool <isInitialized>k__BackingField; // 0x0
	private IntPtr handle; // 0x20
	private IntPtr[] bufferPointers; // 0x28
	private GCHandle[] gcHandles; // 0x30
	private CriAudioWriteStream outputWriteStream; // 0x38
	private static int _initializationCount; // 0x4

	// Properties
	public static bool isInitialized { get; set; }

	// Methods

	// RVA: 0x119464C Offset: 0x119464C VA: 0x119464C
	private void .ctor(IntPtr handle) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F888 Offset: 0xC8F888 VA: 0xC8F888
	// RVA: 0x1194780 Offset: 0x1194780 VA: 0x1194780
	public static bool get_isInitialized() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F898 Offset: 0xC8F898 VA: 0xC8F898
	// RVA: 0x11947E8 Offset: 0x11947E8 VA: 0x11947E8
	private static void set_isInitialized(bool value) { }

	// RVA: 0x1194858 Offset: 0x1194858 VA: 0x1194858
	public static void InitializeModule() { }

	// RVA: 0x11949B0 Offset: 0x11949B0 VA: 0x11949B0
	public static void FinalizeModule() { }

	// RVA: 0x1194B7C Offset: 0x1194B7C VA: 0x1194B7C
	public static CriAtomExMic.DeviceInfo[] GetDevices() { }

	// RVA: 0x1194E30 Offset: 0x1194E30 VA: 0x1194E30
	public static int GetNumDevices() { }

	// RVA: 0x1194E8C Offset: 0x1194E8C VA: 0x1194E8C
	public static Nullable<CriAtomExMic.DeviceInfo> GetDefaultDevice() { }

	// RVA: 0x1195060 Offset: 0x1195060 VA: 0x1195060
	public static bool IsFormatSupported(CriAtomExMic.Config config) { }

	// RVA: 0x1195194 Offset: 0x1195194 VA: 0x1195194
	public static CriAtomExMic Create(Nullable<CriAtomExMic.Config> config) { }

	// RVA: 0x119540C Offset: 0x119540C VA: 0x119540C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1195488 Offset: 0x1195488 VA: 0x1195488 Slot: 5
	public override void Dispose() { }

	// RVA: 0x11954B4 Offset: 0x11954B4 VA: 0x11954B4
	private void Dispose(bool disposing) { }

	// RVA: 0x1195600 Offset: 0x1195600 VA: 0x1195600
	public void Start() { }

	// RVA: 0x1195704 Offset: 0x1195704 VA: 0x1195704
	public void Stop() { }

	// RVA: 0x1194718 Offset: 0x1194718 VA: 0x1194718
	public int GetNumChannels() { }

	// RVA: 0x11958A4 Offset: 0x11958A4 VA: 0x11958A4
	public int GetSamplingRate() { }

	// RVA: 0x11959A8 Offset: 0x11959A8 VA: 0x11959A8
	public uint GetNumBufferredSamples() { }

	// RVA: 0x1195AAC Offset: 0x1195AAC VA: 0x1195AAC
	public bool IsAvailable() { }

	// RVA: 0x1195BDC Offset: 0x1195BDC VA: 0x1195BDC
	public uint ReadData(float[] bufferMono) { }

	// RVA: 0x1195C14 Offset: 0x1195C14 VA: 0x1195C14
	public uint ReadData(float[] bufferMono, uint numToRead) { }

	// RVA: 0x1195E68 Offset: 0x1195E68 VA: 0x1195E68
	public uint ReadData(float[] bufferL, float[] bufferR) { }

	// RVA: 0x1195EB0 Offset: 0x1195EB0 VA: 0x1195EB0
	public uint ReadData(float[] bufferL, float[] bufferR, uint numToRead) { }

	// RVA: 0x11960BC Offset: 0x11960BC VA: 0x11960BC
	public uint ReadData(float[][] buffers) { }

	// RVA: 0x1196154 Offset: 0x1196154 VA: 0x1196154
	public uint ReadData(float[][] buffers, uint numToRead) { }

	// RVA: 0x1196300 Offset: 0x1196300 VA: 0x1196300
	public void SetOutputWriteStream(CriAudioWriteStream stream) { }

	// RVA: 0x119648C Offset: 0x119648C VA: 0x119648C
	public CriAudioReadStream GetOutputReadStream() { }

	// RVA: 0x11965B8 Offset: 0x11965B8 VA: 0x11965B8
	public CriAtomExMic.Effect AttachEffect(IntPtr afxInterface, float[] configParameters) { }

	// RVA: 0x1196890 Offset: 0x1196890 VA: 0x1196890
	public void DetachEffect(CriAtomExMic.Effect effect) { }

	// RVA: 0x11969CC Offset: 0x11969CC VA: 0x11969CC
	public void SetEffectParameter(CriAtomExMic.Effect effect, int parameterIndex, float parameterValue) { }

	// RVA: 0x1196B30 Offset: 0x1196B30 VA: 0x1196B30
	public float GetEffectParameter(CriAtomExMic.Effect effect, int parameterIndex) { }

	// RVA: 0x1196C74 Offset: 0x1196C74 VA: 0x1196C74
	public void SetEffectBypass(CriAtomExMic.Effect effect, bool bypass) { }

	// RVA: 0x1196DB8 Offset: 0x1196DB8 VA: 0x1196DB8
	public void UpdateEffectParameters(CriAtomExMic.Effect effect) { }

	// RVA: 0x1195CC4 Offset: 0x1195CC4 VA: 0x1195CC4
	private uint InternalReadDataFromBufferPointers(uint numToRead) { }

	// RVA: 0x1195D44 Offset: 0x1195D44 VA: 0x1195D44
	private void InternalClearBuffers() { }

	// RVA: 0x1194924 Offset: 0x1194924 VA: 0x1194924
	private static extern void criAtomMicUnity_Initialize() { }

	// RVA: 0x1194AF0 Offset: 0x1194AF0 VA: 0x1194AF0
	private static extern void criAtomMicUnity_Finalize() { }

	// RVA: 0x1194CA8 Offset: 0x1194CA8 VA: 0x1194CA8
	private static extern int criAtomMic_GetNumDevices() { }

	// RVA: 0x1194D34 Offset: 0x1194D34 VA: 0x1194D34
	private static extern bool criAtomMic_GetDevice(int index, out CriAtomExMic.DeviceInfo info) { }

	// RVA: 0x1194F6C Offset: 0x1194F6C VA: 0x1194F6C
	private static extern bool criAtomMic_GetDefaultDevice(out CriAtomExMic.DeviceInfo info) { }

	// RVA: 0x11950C4 Offset: 0x11950C4 VA: 0x11950C4
	private static extern bool criAtomMic_IsFormatSupported(in CriAtomExMic.Config config) { }

	// RVA: 0x119532C Offset: 0x119532C VA: 0x119532C
	private static extern IntPtr criAtomMic_Create(in CriAtomExMic.Config config, IntPtr work, int work_size) { }

	// RVA: 0x1195564 Offset: 0x1195564 VA: 0x1195564
	private static extern void criAtomMic_Destroy(IntPtr mic) { }

	// RVA: 0x1195668 Offset: 0x1195668 VA: 0x1195668
	private static extern void criAtomMic_Start(IntPtr mic) { }

	// RVA: 0x119576C Offset: 0x119576C VA: 0x119576C
	private static extern void criAtomMic_Stop(IntPtr mic) { }

	// RVA: 0x1195808 Offset: 0x1195808 VA: 0x1195808
	private static extern int criAtomMic_GetNumChannels(IntPtr mic) { }

	// RVA: 0x119590C Offset: 0x119590C VA: 0x119590C
	private static extern int criAtomMic_GetSamplingRate(IntPtr mic) { }

	// RVA: 0x1195A10 Offset: 0x1195A10 VA: 0x1195A10
	private static extern uint criAtomMic_GetNumBufferredSamples(IntPtr mic) { }

	// RVA: 0x1195B38 Offset: 0x1195B38 VA: 0x1195B38
	private static extern bool criAtomMic_IsAvailable(IntPtr mic) { }

	// RVA: 0x1196EEC Offset: 0x1196EEC VA: 0x1196EEC
	private static extern uint criAtomMic_ReadData(IntPtr mic, IntPtr[] data, uint num_samples) { }

	// RVA: 0x11963D8 Offset: 0x11963D8 VA: 0x11963D8
	private static extern void criAtomMic_SetOutputWriteStream(IntPtr mic, IntPtr stream_cbfunc, IntPtr stream_ptr) { }

	// RVA: 0x119652C Offset: 0x119652C VA: 0x119652C
	private static extern IntPtr criAtomMic_GetOutputReadStream() { }

	// RVA: 0x1196FA8 Offset: 0x1196FA8 VA: 0x1196FA8
	private static extern int criAtomMic_CalculateWorkSizeForEffect(IntPtr mic, IntPtr afx_interface, float[] config_parameters, uint num_config_parameters) { }

	// RVA: 0x11966C8 Offset: 0x11966C8 VA: 0x11966C8
	private static extern IntPtr criAtomMic_AttachEffect(IntPtr mic, IntPtr afx_interface, float[] config_parameters, uint num_config_parameters, IntPtr work, int work_size) { }

	// RVA: 0x1196920 Offset: 0x1196920 VA: 0x1196920
	private static extern void criAtomMic_DetachEffect(IntPtr mic, IntPtr effect) { }

	// RVA: 0x11967AC Offset: 0x11967AC VA: 0x11967AC
	private static extern IntPtr criAtomMic_GetEffectInstance(IntPtr mic, IntPtr effect) { }

	// RVA: 0x1196D04 Offset: 0x1196D04 VA: 0x1196D04
	private static extern void criAtomMic_SetEffectBypass(IntPtr mic, IntPtr effect, bool bypass) { }

	// RVA: 0x1196A6C Offset: 0x1196A6C VA: 0x1196A6C
	private static extern void criAtomMic_SetEffectParameter(IntPtr mic, IntPtr effect, uint parameter_index, float parameter_value) { }

	// RVA: 0x1196BC0 Offset: 0x1196BC0 VA: 0x1196BC0
	private static extern float criAtomMic_GetEffectParameter(IntPtr mic, IntPtr effect, uint parameter_index) { }

	// RVA: 0x1196E40 Offset: 0x1196E40 VA: 0x1196E40
	private static extern void criAtomMic_UpdateEffectParameters(IntPtr mic, IntPtr effect) { }

	// RVA: 0x1197074 Offset: 0x1197074 VA: 0x1197074
	private static void .cctor() { }
}

// Namespace: 
public struct CriAtomExMic.DeviceInfo // TypeDefIndex: 3944
{
	// Fields
	public string deviceId; // 0x0
	public string deviceName; // 0x8
	public uint deviceFlags; // 0x10
	public int maxChannels; // 0x14
	public int maxSamplingRate; // 0x18
}

// Namespace: 
public struct CriAtomExMic.Config // TypeDefIndex: 3945
{
	// Fields
	public string deviceId; // 0x0
	public uint flags; // 0x8
	public int numChannels; // 0xC
	public int samplingRate; // 0x10
	public uint frameSize; // 0x14
	public uint bufferingTime; // 0x18
	public IntPtr context; // 0x20

	// Properties
	public static CriAtomExMic.Config Default { get; }

	// Methods

	// RVA: 0x1195308 Offset: 0x1195308 VA: 0x1195308
	public static CriAtomExMic.Config get_Default() { }
}

// Namespace: 
public class CriAtomExMic.Effect // TypeDefIndex: 3946
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8CE30 Offset: 0xC8CE30 VA: 0xC8CE30
	[DebuggerBrowsableAttribute] // RVA: 0xC8CE30 Offset: 0xC8CE30 VA: 0xC8CE30
	private IntPtr <handle>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC8CE6C Offset: 0xC8CE6C VA: 0xC8CE6C
	[DebuggerBrowsableAttribute] // RVA: 0xC8CE6C Offset: 0xC8CE6C VA: 0xC8CE6C
	private IntPtr <afxInstance>k__BackingField; // 0x18

	// Properties
	public IntPtr handle { get; set; }
	public IntPtr afxInstance { get; set; }

	// Methods

	// RVA: 0x1196858 Offset: 0x1196858 VA: 0x1196858
	public void .ctor(IntPtr handle, IntPtr afxInstance) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F8A8 Offset: 0xC8F8A8 VA: 0xC8F8A8
	// RVA: 0x1196918 Offset: 0x1196918 VA: 0x1196918
	public IntPtr get_handle() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F8B8 Offset: 0xC8F8B8 VA: 0xC8F8B8
	// RVA: 0x1197078 Offset: 0x1197078 VA: 0x1197078
	private void set_handle(IntPtr value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F8C8 Offset: 0xC8F8C8 VA: 0xC8F8C8
	// RVA: 0x1197088 Offset: 0x1197088 VA: 0x1197088
	public IntPtr get_afxInstance() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F8D8 Offset: 0xC8F8D8 VA: 0xC8F8D8
	// RVA: 0x1197080 Offset: 0x1197080 VA: 0x1197080
	private void set_afxInstance(IntPtr value) { }
}

// Namespace: 
public class CriAtomExOutputAnalyzer : CriDisposable // TypeDefIndex: 3947
{
	// Fields
	public const int MaximumSpectrumBands = 512;
	protected IntPtr handle; // 0x20
	protected CriAtomExPlayer player; // 0x28
	protected string busName; // 0x30
	protected int numBands; // 0x38
	protected int numCapturedPcmSamples; // 0x3C
	protected CriAtomExOutputAnalyzer.PcmCaptureCallback userPcmCaptureCallback; // 0x40
	protected float[] dataL; // 0x48
	protected float[] dataR; // 0x50
	protected const int pcmCapturerNumMaxData = 512;
	protected static IntPtr InternalCallbackFunctionPointer; // 0x0
	protected static CriAtomExOutputAnalyzer.InternalPcmCaptureCallback DelegateObject; // 0x8
	protected static float[] DataL; // 0x10
	protected static float[] DataR; // 0x18
	protected static CriAtomExOutputAnalyzer.PcmCaptureCallback UserPcmCaptureCallback; // 0x20

	// Properties
	public IntPtr nativeHandle { get; }

	// Methods

	// RVA: 0x1197270 Offset: 0x1197270 VA: 0x1197270
	public void .ctor(CriAtomExOutputAnalyzer.Config config) { }

	// RVA: 0x1197438 Offset: 0x1197438 VA: 0x1197438
	protected void .ctor() { }

	// RVA: 0x11974C0 Offset: 0x11974C0 VA: 0x11974C0
	public IntPtr get_nativeHandle() { }

	// RVA: 0x11974C8 Offset: 0x11974C8 VA: 0x11974C8 Slot: 5
	public override void Dispose() { }

	// RVA: 0x11974D0 Offset: 0x11974D0 VA: 0x11974D0
	protected void Dispose(bool disposing) { }

	// RVA: 0x11977D4 Offset: 0x11977D4 VA: 0x11977D4
	public bool AttachExPlayer(CriAtomExPlayer player) { }

	// RVA: 0x11975B8 Offset: 0x11975B8 VA: 0x11975B8
	public void DetachExPlayer() { }

	// RVA: 0x1197A94 Offset: 0x1197A94 VA: 0x1197A94
	public bool AttachDspBus(string busName) { }

	// RVA: 0x119769C Offset: 0x119769C VA: 0x119769C
	public void DetachDspBus() { }

	// RVA: 0x1197CC8 Offset: 0x1197CC8 VA: 0x1197CC8
	public float GetRms(int channel) { }

	// RVA: 0x1197E5C Offset: 0x1197E5C VA: 0x1197E5C
	public void GetSpectrumLevels(ref float[] levels) { }

	// RVA: 0x1198014 Offset: 0x1198014 VA: 0x1198014
	public void GetPcmData(ref float[] data, int ch) { }

	// RVA: 0x11981F0 Offset: 0x11981F0 VA: 0x11981F0
	public void SetPcmCaptureCallback(CriAtomExOutputAnalyzer.PcmCaptureCallback callback) { }

	// RVA: 0x11981F8 Offset: 0x11981F8 VA: 0x11981F8
	public void ExecutePcmCaptureCallback() { }

	[ObsoleteAttribute] // RVA: 0xC8F8E8 Offset: 0xC8F8E8 VA: 0xC8F8E8
	// RVA: 0x1198438 Offset: 0x1198438 VA: 0x1198438
	public void ExecutePcmCaptureCallback(CriAtomExOutputAnalyzer.PcmCaptureCallback callback) { }

	// RVA: 0x1198440 Offset: 0x1198440 VA: 0x1198440 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1197318 Offset: 0x1197318 VA: 0x1197318
	protected void InitializeWithConfig(CriAtomExOutputAnalyzer.Config config) { }

	[MonoPInvokeCallbackAttribute] // RVA: 0xC8F920 Offset: 0xC8F920 VA: 0xC8F920
	// RVA: 0x1197090 Offset: 0x1197090 VA: 0x1197090
	private static void Callback(IntPtr ptrL, IntPtr ptrR, int numChannels, int numData) { }

	// RVA: 0x11984B8 Offset: 0x11984B8 VA: 0x11984B8
	protected static extern IntPtr criAtomExOutputAnalyzer_Create(in CriAtomExOutputAnalyzer.Config config) { }

	// RVA: 0x1197738 Offset: 0x1197738 VA: 0x1197738
	protected static extern void criAtomExOutputAnalyzer_Destroy(IntPtr analyzer) { }

	// RVA: 0x1197900 Offset: 0x1197900 VA: 0x1197900
	protected static extern void criAtomExOutputAnalyzer_AttachExPlayer(IntPtr analyzer, IntPtr player) { }

	// RVA: 0x11979E8 Offset: 0x11979E8 VA: 0x11979E8
	protected static extern void criAtomExOutputAnalyzer_DetachExPlayer(IntPtr analyzer, IntPtr player) { }

	// RVA: 0x1197B48 Offset: 0x1197B48 VA: 0x1197B48
	protected static extern void criAtomExOutputAnalyzer_AttachDspBusByName(IntPtr analyzer, string busName) { }

	// RVA: 0x1197C08 Offset: 0x1197C08 VA: 0x1197C08
	protected static extern void criAtomExOutputAnalyzer_DetachDspBusByName(IntPtr analyzer, string busName) { }

	// RVA: 0x1197DB0 Offset: 0x1197DB0 VA: 0x1197DB0
	protected static extern float criAtomExOutputAnalyzer_GetRms(IntPtr analyzer, int channel) { }

	// RVA: 0x1197F78 Offset: 0x1197F78 VA: 0x1197F78
	protected static extern IntPtr criAtomExOutputAnalyzer_GetSpectrumLevels(IntPtr analyzer) { }

	// RVA: 0x1198144 Offset: 0x1198144 VA: 0x1198144
	protected static extern IntPtr criAtomExOutputAnalyzer_GetPcmData(IntPtr analyzer, int ch) { }

	// RVA: 0x119838C Offset: 0x119838C VA: 0x119838C
	protected static extern void criAtomExOutputAnalyzer_ExecuteQueuedPcmCapturerCallbacks(IntPtr analyzer, IntPtr callback) { }

	// RVA: 0x1198994 Offset: 0x1198994 VA: 0x1198994
	private static void .cctor() { }
}

// Namespace: 
public sealed class CriAtomExOutputAnalyzer.PcmCaptureCallback : MulticastDelegate // TypeDefIndex: 3948
{
	// Methods

	// RVA: 0x1198D58 Offset: 0x1198D58 VA: 0x1198D58
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1198584 Offset: 0x1198584 VA: 0x1198584 Slot: 11
	public virtual void Invoke(float[] dataL, float[] dataR, int numChannels, int numData) { }

	// RVA: 0x1198D68 Offset: 0x1198D68 VA: 0x1198D68 Slot: 12
	public virtual IAsyncResult BeginInvoke(float[] dataL, float[] dataR, int numChannels, int numData, AsyncCallback callback, object object) { }

	// RVA: 0x1198E1C Offset: 0x1198E1C VA: 0x1198E1C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public struct CriAtomExOutputAnalyzer.Config // TypeDefIndex: 3949
{
	// Fields
	public bool enableLevelmeter; // 0x0
	public bool enableSpectrumAnalyzer; // 0x1
	public bool enablePcmCapture; // 0x2
	public bool enablePcmCaptureCallback; // 0x3
	public int numSpectrumAnalyzerBands; // 0x4
	public int numCapturedPcmSamples; // 0x8
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xC8B028 Offset: 0xC8B028 VA: 0xC8B028
protected sealed class CriAtomExOutputAnalyzer.InternalPcmCaptureCallback : MulticastDelegate // TypeDefIndex: 3950
{
	// Methods

	// RVA: 0x119837C Offset: 0x119837C VA: 0x119837C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x11989F0 Offset: 0x11989F0 VA: 0x11989F0 Slot: 11
	public virtual void Invoke(IntPtr dataL, IntPtr dataR, int numChannels, int numData) { }

	// RVA: 0x1198C74 Offset: 0x1198C74 VA: 0x1198C74 Slot: 12
	public virtual IAsyncResult BeginInvoke(IntPtr dataL, IntPtr dataR, int numChannels, int numData, AsyncCallback callback, object object) { }

	// RVA: 0x1198D4C Offset: 0x1198D4C VA: 0x1198D4C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public struct CriAtomExPlayback // TypeDefIndex: 3951
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8CEA8 Offset: 0xC8CEA8 VA: 0xC8CEA8
	[DebuggerBrowsableAttribute] // RVA: 0xC8CEA8 Offset: 0xC8CEA8 VA: 0xC8CEA8
	private uint <id>k__BackingField; // 0x0
	public const uint invalidId = 4294967295;

	// Properties
	public uint id { get; set; }
	public CriAtomExPlayback.Status status { get; }
	public long time { get; }
	public long timeSyncedWithAudio { get; }

	// Methods

	// RVA: 0xBBCDEC Offset: 0xBBCDEC VA: 0xBBCDEC
	public void .ctor(uint id) { }

	// RVA: 0xBBCDF4 Offset: 0xBBCDF4 VA: 0xBBCDF4
	public void Stop(bool ignoresReleaseTime) { }

	// RVA: 0xBBCE00 Offset: 0xBBCE00 VA: 0xBBCE00
	public void Pause() { }

	// RVA: 0xBBCE0C Offset: 0xBBCE0C VA: 0xBBCE0C
	public void Resume(CriAtomEx.ResumeMode mode) { }

	// RVA: 0xBBCE14 Offset: 0xBBCE14 VA: 0xBBCE14
	public bool IsPaused() { }

	// RVA: 0xBBCE1C Offset: 0xBBCE1C VA: 0xBBCE1C
	public bool GetFormatInfo(out CriAtomEx.FormatInfo info) { }

	// RVA: 0xBBCE24 Offset: 0xBBCE24 VA: 0xBBCE24
	public CriAtomExPlayback.Status GetStatus() { }

	// RVA: 0xBBCE2C Offset: 0xBBCE2C VA: 0xBBCE2C
	public long GetTime() { }

	// RVA: 0xBBCE34 Offset: 0xBBCE34 VA: 0xBBCE34
	public long GetTimeSyncedWithAudio() { }

	// RVA: 0xBBCE3C Offset: 0xBBCE3C VA: 0xBBCE3C
	public bool GetNumPlayedSamples(out long numSamples, out int samplingRate) { }

	// RVA: 0xBBCE44 Offset: 0xBBCE44 VA: 0xBBCE44
	public long GetSequencePosition() { }

	// RVA: 0xBBCE4C Offset: 0xBBCE4C VA: 0xBBCE4C
	public int GetCurrentBlockIndex() { }

	// RVA: 0xBBCE54 Offset: 0xBBCE54 VA: 0xBBCE54
	public bool GetTrackInfo(out CriAtomExPlayback.TrackInfo info) { }

	// RVA: 0xBBCE5C Offset: 0xBBCE5C VA: 0xBBCE5C
	public bool GetBeatSyncInfo(out CriAtomExBeatSync.Info info) { }

	// RVA: 0xBBCE64 Offset: 0xBBCE64 VA: 0xBBCE64
	public void SetNextBlockIndex(int index) { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F984 Offset: 0xC8F984 VA: 0xC8F984
	// RVA: 0xBBCE6C Offset: 0xBBCE6C VA: 0xBBCE6C
	public uint get_id() { }

	[CompilerGeneratedAttribute] // RVA: 0xC8F994 Offset: 0xC8F994 VA: 0xC8F994
	// RVA: 0xBBCE74 Offset: 0xBBCE74 VA: 0xBBCE74
	private void set_id(uint value) { }

	// RVA: 0xBBCE7C Offset: 0xBBCE7C VA: 0xBBCE7C
	public CriAtomExPlayback.Status get_status() { }

	// RVA: 0xBBCE84 Offset: 0xBBCE84 VA: 0xBBCE84
	public long get_time() { }

	// RVA: 0xBBCE8C Offset: 0xBBCE8C VA: 0xBBCE8C
	public long get_timeSyncedWithAudio() { }

	// RVA: 0xBBCE94 Offset: 0xBBCE94 VA: 0xBBCE94
	public void Stop() { }

	// RVA: 0xBBCE9C Offset: 0xBBCE9C VA: 0xBBCE9C
	public void StopWithoutReleaseTime() { }

	// RVA: 0xBBCEA4 Offset: 0xBBCEA4 VA: 0xBBCEA4
	public void Pause(bool sw) { }

	// RVA: 0x1198F38 Offset: 0x1198F38 VA: 0x1198F38
	private static extern void criAtomExPlayback_Stop(uint id) { }

	// RVA: 0x1198FD4 Offset: 0x1198FD4 VA: 0x1198FD4
	private static extern void criAtomExPlayback_StopWithoutReleaseTime(uint id) { }

	// RVA: 0x119907C Offset: 0x119907C VA: 0x119907C
	private static extern void criAtomExPlayback_Pause(uint id, bool sw) { }

	// RVA: 0x1199130 Offset: 0x1199130 VA: 0x1199130
	private static extern void criAtomExPlayback_Resume(uint id, CriAtomEx.ResumeMode mode) { }

	// RVA: 0x11991E4 Offset: 0x11991E4 VA: 0x11991E4
	private static extern bool criAtomExPlayback_IsPaused(uint id) { }

	// RVA: 0x119934C Offset: 0x119934C VA: 0x119934C
	private static extern CriAtomExPlayback.Status criAtomExPlayback_GetStatus(uint id) { }

	// RVA: 0x1199290 Offset: 0x1199290 VA: 0x1199290
	private static extern bool criAtomExPlayback_GetFormatInfo(uint id, out CriAtomEx.FormatInfo info) { }

	// RVA: 0x11993F0 Offset: 0x11993F0 VA: 0x11993F0
	private static extern long criAtomExPlayback_GetTime(uint id) { }

	// RVA: 0x1199494 Offset: 0x1199494 VA: 0x1199494
	private static extern long criAtomExPlayback_GetTimeSyncedWithAudio(uint id) { }

	// RVA: 0x1199538 Offset: 0x1199538 VA: 0x1199538
	private static extern bool criAtomExPlayback_GetNumPlayedSamples(uint id, out long num_samples, out int sampling_rate) { }

	// RVA: 0x11995FC Offset: 0x11995FC VA: 0x11995FC
	private static extern long criAtomExPlayback_GetSequencePosition(uint id) { }

	// RVA: 0x11998BC Offset: 0x11998BC VA: 0x11998BC
	private static extern void criAtomExPlayback_SetNextBlockIndex(uint id, int index) { }

	// RVA: 0x11996A0 Offset: 0x11996A0 VA: 0x11996A0
	private static extern int criAtomExPlayback_GetCurrentBlockIndex(uint id) { }

	// RVA: 0x1199744 Offset: 0x1199744 VA: 0x1199744
	private static extern bool criAtomExPlayback_GetPlaybackTrackInfo(uint id, out CriAtomExPlayback.TrackInfo info) { }

	// RVA: 0x1199800 Offset: 0x1199800 VA: 0x1199800
	private static extern bool criAtomExPlayback_GetBeatSyncInfo(uint id, out CriAtomExBeatSync.Info info) { }
}

// Namespace: 
public enum CriAtomExPlayback.Status // TypeDefIndex: 3952
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExPlayback.Status Prep = 1;
	public const CriAtomExPlayback.Status Playing = 2;
	public const CriAtomExPlayback.Status Removed = 3;
}

// Namespace: 
public struct CriAtomExPlayback.TrackInfo // TypeDefIndex: 3953
{
	// Fields
	public uint id; // 0x0
	public CriAtomEx.CueType sequenceType; // 0x4
	public IntPtr playerHn; // 0x8
	public ushort trackNo; // 0x10
	public ushort reserved; // 0x12
}

// Namespace: 
public class CriAtomExPlayer : CriDisposable // TypeDefIndex: 3954
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8CEE4 Offset: 0xC8CEE4 VA: 0xC8CEE4
	[DebuggerBrowsableAttribute] // RVA: 0xC8CEE4 Offset: 0xC8CEE4 VA: 0xC8CEE4
	private CriAtomExBeatSync.CbFunc _onBeatSyncCallback; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC8CF20 Offset: 0xC8CF20 VA: 0xC8CF20
	[DebuggerBrowsableAttribute] // RVA: 0xC8CF20 Offset: 0xC8CF20 VA: 0xC8CF20
	private CriAtomExSequencer.EventCallback _onSequenceCallback; // 0x28
	private bool hasExistingNativeHandle; // 0x30
	private IntPtr entryPoolHandle; // 0x38
	private int _entryPoolCapacity; // 0x40
	private int max_path; // 0x44
	private IntPtr handle; // 0x48

	// Properties
	public IntPtr nativeHandle { get; }
	public bool isAvailable { get; }
	public int entryPoolCapacity { get; }

	// Methods

	// RVA: 0x1199EA8 Offset: 0x1199EA8 VA: 0x1199EA8
	public void .ctor() { }

	// RVA: 0x119A078 Offset: 0x119A078 VA: 0x119A078
	public void .ctor(int maxPath, int maxPathStrings) { }

	// RVA: 0x119A0DC Offset: 0x119A0DC VA: 0x119A0DC
	public void .ctor(bool enableAudioSyncedTimer) { }

	// RVA: 0x119A13C Offset: 0x119A13C VA: 0x119A13C
	public void .ctor(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer) { }

	// RVA: 0x119A1AC Offset: 0x119A1AC VA: 0x119A1AC
	public void .ctor(IntPtr existingNativeHandle) { }

	// RVA: 0x1199EFC Offset: 0x1199EFC VA: 0x1199EFC
	public void .ctor(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer, IntPtr existingNativeHandle) { }

	// RVA: 0x11978F8 Offset: 0x11978F8 VA: 0x11978F8
	public IntPtr get_nativeHandle() { }

	// RVA: 0x11978A4 Offset: 0x11978A4 VA: 0x11978A4
	public bool get_isAvailable() { }

	// RVA: 0x119A2B8 Offset: 0x119A2B8 VA: 0x119A2B8
	private void add__onBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x119A3A4 Offset: 0x119A3A4 VA: 0x119A3A4
	private void remove__onBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x119A490 Offset: 0x119A490 VA: 0x119A490
	public void add_OnBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x119A544 Offset: 0x119A544 VA: 0x119A544
	public void remove_OnBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x119A608 Offset: 0x119A608 VA: 0x119A608
	private void add__onSequenceCallback(CriAtomExSequencer.EventCallback value) { }

	// RVA: 0x119A6F4 Offset: 0x119A6F4 VA: 0x119A6F4
	private void remove__onSequenceCallback(CriAtomExSequencer.EventCallback value) { }

	// RVA: 0x119A7E0 Offset: 0x119A7E0 VA: 0x119A7E0
	public void add_OnSequenceCallback(CriAtomExSequencer.EventCallback value) { }

	// RVA: 0x119A8E0 Offset: 0x119A8E0 VA: 0x119A8E0
	public void remove_OnSequenceCallback(CriAtomExSequencer.EventCallback value) { }

	// RVA: 0x119A9E0 Offset: 0x119A9E0 VA: 0x119A9E0 Slot: 5
	public override void Dispose() { }

	// RVA: 0x119AC3C Offset: 0x119AC3C VA: 0x119AC3C
	public void SetCue(CriAtomExAcb acb, string name) { }

	// RVA: 0x119AD7C Offset: 0x119AD7C VA: 0x119AD7C
	public void SetCue(CriAtomExAcb acb, int id) { }

	// RVA: 0x119AEA8 Offset: 0x119AEA8 VA: 0x119AEA8
	public void SetCueIndex(CriAtomExAcb acb, int index) { }

	// RVA: 0x119AFD4 Offset: 0x119AFD4 VA: 0x119AFD4
	public void SetContentId(CriFsBinder binder, int contentId) { }

	// RVA: 0x119B100 Offset: 0x119B100 VA: 0x119B100
	public void SetFile(CriFsBinder binder, string path) { }

	// RVA: 0x119B240 Offset: 0x119B240 VA: 0x119B240
	public void SetData(byte[] buffer, int size) { }

	// RVA: 0x119B304 Offset: 0x119B304 VA: 0x119B304
	public void SetData(IntPtr buffer, int size) { }

	// RVA: 0x119B3C0 Offset: 0x119B3C0 VA: 0x119B3C0
	public void SetFormat(CriAtomEx.Format format) { }

	// RVA: 0x119B474 Offset: 0x119B474 VA: 0x119B474
	public void SetNumChannels(int numChannels) { }

	// RVA: 0x119B528 Offset: 0x119B528 VA: 0x119B528
	public void SetSamplingRate(int samplingRate) { }

	// RVA: 0x119B5DC Offset: 0x119B5DC VA: 0x119B5DC
	public void PrepareEntryPool(int capacity, bool stopOnEmpty) { }

	// RVA: 0x119B748 Offset: 0x119B748 VA: 0x119B748
	public int GetNumEntries() { }

	// RVA: 0x119B84C Offset: 0x119B84C VA: 0x119B84C
	public int GetNumConsumedEntries() { }

	// RVA: 0x119B950 Offset: 0x119B950 VA: 0x119B950
	public int get_entryPoolCapacity() { }

	// RVA: 0x119B958 Offset: 0x119B958 VA: 0x119B958
	public bool EntryFile(CriFsBinder binder, string path, bool repeat) { }

	// RVA: 0x119BAFC Offset: 0x119BAFC VA: 0x119BAFC
	public bool EntryContentId(CriFsBinder binder, int contentId, bool repeat) { }

	// RVA: 0x119BC7C Offset: 0x119BC7C VA: 0x119BC7C
	public bool EntryData(byte[] buffer, int size, bool repeat) { }

	// RVA: 0x119BDE8 Offset: 0x119BDE8 VA: 0x119BDE8
	public bool EntryData(IntPtr buffer, int size, bool repeat) { }

	// RVA: 0x119BF4C Offset: 0x119BF4C VA: 0x119BF4C
	public bool EntryCue(CriAtomExAcb acb, string name, bool repeat) { }

	// RVA: 0x119C0E4 Offset: 0x119C0E4 VA: 0x119C0E4
	public CriAtomExPlayback Start() { }

	// RVA: 0x119C284 Offset: 0x119C284 VA: 0x119C284
	public CriAtomExPlayback Prepare() { }

	// RVA: 0x119C33C Offset: 0x119C33C VA: 0x119C33C
	public void Stop(bool ignoresReleaseTime) { }

	// RVA: 0x119C5A4 Offset: 0x119C5A4 VA: 0x119C5A4
	public void Pause() { }

	// RVA: 0x119C65C Offset: 0x119C65C VA: 0x119C65C
	public void Resume(CriAtomEx.ResumeMode mode) { }

	// RVA: 0x119C710 Offset: 0x119C710 VA: 0x119C710
	public bool IsPaused() { }

	// RVA: 0x119C7BC Offset: 0x119C7BC VA: 0x119C7BC
	public void SetVolume(float volume) { }

	// RVA: 0x119C870 Offset: 0x119C870 VA: 0x119C870
	public void SetPitch(float pitch) { }

	// RVA: 0x119C924 Offset: 0x119C924 VA: 0x119C924
	public void SetPlaybackRatio(float ratio) { }

	// RVA: 0x119C9D8 Offset: 0x119C9D8 VA: 0x119C9D8
	public void SetPan3dAngle(float angle) { }

	// RVA: 0x119CA8C Offset: 0x119CA8C VA: 0x119CA8C
	public void SetPan3dInteriorDistance(float distance) { }

	// RVA: 0x119CB40 Offset: 0x119CB40 VA: 0x119CB40
	public void SetPan3dVolume(float volume) { }

	// RVA: 0x119CBF4 Offset: 0x119CBF4 VA: 0x119CBF4
	public void SetPanType(CriAtomEx.PanType panType) { }

	// RVA: 0x119CCA8 Offset: 0x119CCA8 VA: 0x119CCA8
	public void SetSendLevel(int channel, CriAtomEx.Speaker id, float level) { }

	// RVA: 0x119CD74 Offset: 0x119CD74 VA: 0x119CD74
	public void SetBiquadFilterParameters(CriAtomEx.BiquadFilterType type, float frequency, float gain, float q) { }

	// RVA: 0x119CE50 Offset: 0x119CE50 VA: 0x119CE50
	public void SetBandpassFilterParameters(float cofLow, float cofHigh) { }
