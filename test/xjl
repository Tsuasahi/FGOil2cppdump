	// Methods

	// RVA: 0xD6C93C Offset: 0xD6C93C VA: 0xD6C93C
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public enum CriAtomExAcf.AisacGraphType // TypeDefIndex: 3931
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExAcf.AisacGraphType none = 0;
	public const CriAtomExAcf.AisacGraphType volume = 1;
	public const CriAtomExAcf.AisacGraphType pitch = 2;
	public const CriAtomExAcf.AisacGraphType bandpassHigh = 3;
	public const CriAtomExAcf.AisacGraphType bandpassLow = 4;
	public const CriAtomExAcf.AisacGraphType biquadFreq = 5;
	public const CriAtomExAcf.AisacGraphType biquadQ = 6;
	public const CriAtomExAcf.AisacGraphType busSend0 = 7;
	public const CriAtomExAcf.AisacGraphType busSend1 = 8;
	public const CriAtomExAcf.AisacGraphType busSend2 = 9;
	public const CriAtomExAcf.AisacGraphType busSend3 = 10;
	public const CriAtomExAcf.AisacGraphType busSend4 = 11;
	public const CriAtomExAcf.AisacGraphType busSend5 = 12;
	public const CriAtomExAcf.AisacGraphType busSend6 = 13;
	public const CriAtomExAcf.AisacGraphType busSend7 = 14;
	public const CriAtomExAcf.AisacGraphType pan3dAngel = 15;
	public const CriAtomExAcf.AisacGraphType pan3dVolume = 16;
	public const CriAtomExAcf.AisacGraphType pan3dInteriorDistance = 17;
	public const CriAtomExAcf.AisacGraphType pan3dCenter = 18;
	public const CriAtomExAcf.AisacGraphType pan3dLfe = 19;
	public const CriAtomExAcf.AisacGraphType aisac0 = 20;
	public const CriAtomExAcf.AisacGraphType aisac1 = 21;
	public const CriAtomExAcf.AisacGraphType aisac2 = 22;
	public const CriAtomExAcf.AisacGraphType aisac3 = 23;
	public const CriAtomExAcf.AisacGraphType aisac4 = 24;
	public const CriAtomExAcf.AisacGraphType aisac5 = 25;
	public const CriAtomExAcf.AisacGraphType aisac6 = 26;
	public const CriAtomExAcf.AisacGraphType aisac7 = 27;
	public const CriAtomExAcf.AisacGraphType aisac8 = 28;
	public const CriAtomExAcf.AisacGraphType aisac9 = 29;
	public const CriAtomExAcf.AisacGraphType aisac10 = 30;
	public const CriAtomExAcf.AisacGraphType aisac11 = 31;
	public const CriAtomExAcf.AisacGraphType aisac12 = 32;
	public const CriAtomExAcf.AisacGraphType aisac13 = 33;
	public const CriAtomExAcf.AisacGraphType aisac14 = 34;
	public const CriAtomExAcf.AisacGraphType aisac15 = 35;
	public const CriAtomExAcf.AisacGraphType priority = 36;
	public const CriAtomExAcf.AisacGraphType preDelayTime = 37;
	public const CriAtomExAcf.AisacGraphType biquadGain = 38;
	public const CriAtomExAcf.AisacGraphType pan3dMixdownCenter = 39;
	public const CriAtomExAcf.AisacGraphType pan3dMixdownLfe = 40;
	public const CriAtomExAcf.AisacGraphType egAttack = 41;
	public const CriAtomExAcf.AisacGraphType egRelease = 42;
	public const CriAtomExAcf.AisacGraphType playbackRatio = 43;
	public const CriAtomExAcf.AisacGraphType drySendL = 44;
	public const CriAtomExAcf.AisacGraphType drySendR = 45;
	public const CriAtomExAcf.AisacGraphType drySendCenter = 46;
	public const CriAtomExAcf.AisacGraphType drySendLfe = 47;
	public const CriAtomExAcf.AisacGraphType drySendSl = 48;
	public const CriAtomExAcf.AisacGraphType drySendSr = 49;
	public const CriAtomExAcf.AisacGraphType drySendEx1 = 50;
	public const CriAtomExAcf.AisacGraphType drySendEx2 = 51;
	public const CriAtomExAcf.AisacGraphType panSpread = 52;
}

// Namespace: 
public struct CriAtomExAcf.AisacGraphInfo // TypeDefIndex: 3932
{
	// Fields
	public CriAtomExAcf.AisacGraphType type; // 0x0

	// Methods

	// RVA: 0xD6C78C Offset: 0xD6C78C VA: 0xD6C78C
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public enum CriAtomExAcf.CharacterEncoding // TypeDefIndex: 3933
{
	// Fields
	public uint value__; // 0x0
	public const CriAtomExAcf.CharacterEncoding utf8 = 0;
	public const CriAtomExAcf.CharacterEncoding sjis = 1;
}

// Namespace: 
public struct CriAtomExAcf.AcfInfo // TypeDefIndex: 3934
{
	// Fields
	public string name; // 0x0
	public uint size; // 0x8
	public uint version; // 0xC
	public CriAtomExAcf.CharacterEncoding characterEncoding; // 0x10
	public int numDspSettings; // 0x14
	public int numCategories; // 0x18
	public int numCategoriesPerPlayback; // 0x1C
	public int numReacts; // 0x20
	public int numAisacControls; // 0x24
	public int numGlobalAisacs; // 0x28
	public int numGameVariables; // 0x2C
	public int maxBusesOfDspBusSettings; // 0x30
	public int numBuses; // 0x34
	public int numVoiceLimitGroups; // 0x38

	// Methods

	// RVA: 0xD6C784 Offset: 0xD6C784 VA: 0xD6C784
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomExAcf.SelectorInfo // TypeDefIndex: 3935
{
	// Fields
	public string name; // 0x0
	public ushort index; // 0x8
	public ushort numLabels; // 0xA
	public ushort globalLabelIndex; // 0xC

	// Methods

	// RVA: 0xD696B4 Offset: 0xD696B4 VA: 0xD696B4
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public struct CriAtomExAcf.SelectorLabelInfo // TypeDefIndex: 3936
{
	// Fields
	public string selectorName; // 0x0
	public string labelName; // 0x8

	// Methods

	// RVA: 0xD69760 Offset: 0xD69760 VA: 0xD69760
	public void .ctor(byte[] data, int startIndex) { }
}

// Namespace: 
public class CriAtomExAsrRack : CriDisposable // TypeDefIndex: 3937
{
	// Fields
	public const int defaultRackId = 0;
	private int _rackId; // 0x20

	// Properties
	public int rackId { get; }
	public static CriAtomExAsrRack.Config defaultConfig { get; }

	// Methods

	// RVA: 0x23C67A0 Offset: 0x23C67A0 VA: 0x23C67A0
	public void .ctor(CriAtomExAsrRack.Config config, CriAtomExAsrRack.PlatformConfig platformConfig) { }

	// RVA: 0x23C6984 Offset: 0x23C6984 VA: 0x23C6984
	public static string GetAppliedDspBusSnapshotName(int rackId) { }

	// RVA: 0x23C6AB4 Offset: 0x23C6AB4 VA: 0x23C6AB4
	public CriAtomExAsrRack.PerformanceInfo GetPerformanceInfo() { }

	// RVA: 0x23C6C20 Offset: 0x23C6C20 VA: 0x23C6C20
	public static CriAtomExAsrRack.PerformanceInfo GetPerformanceInfoByRackId(int rackId = 0) { }

	// RVA: 0x23C6C6C Offset: 0x23C6C6C VA: 0x23C6C6C
	public void ResetPerformanceMonitor() { }

	// RVA: 0x23C6D10 Offset: 0x23C6D10 VA: 0x23C6D10
	public static void ResetPerformanceMonitorByRackId(int rackId = 0) { }

	// RVA: 0x23C6D14 Offset: 0x23C6D14 VA: 0x23C6D14
	public static void SetAisacControl(int rackId, string controlName, float value) { }

	// RVA: 0x23C6DE8 Offset: 0x23C6DE8 VA: 0x23C6DE8
	public static void SetAisacControl(int rackId, int controlId, float value) { }

	// RVA: 0x23C6EA8 Offset: 0x23C6EA8 VA: 0x23C6EA8 Slot: 5
	public override void Dispose() { }

	// RVA: 0x23C6FD0 Offset: 0x23C6FD0 VA: 0x23C6FD0
	public int get_rackId() { }

	// RVA: 0x23C6FD8 Offset: 0x23C6FD8 VA: 0x23C6FD8
	public static CriAtomExAsrRack.Config get_defaultConfig() { }

	// RVA: 0x23C7034 Offset: 0x23C7034 VA: 0x23C7034 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23C68D8 Offset: 0x23C68D8 VA: 0x23C68D8
	private static extern int CRIWARE349C80CC(in CriAtomExAsrRack.Config config, in CriAtomExAsrRack.PlatformConfig platformConfig) { }

	// RVA: 0x23C6F34 Offset: 0x23C6F34 VA: 0x23C6F34
	private static extern void criAtomExAsrRack_Destroy(int rackId) { }

	// RVA: 0x23C70B0 Offset: 0x23C70B0 VA: 0x23C70B0
	private static extern void criAtomExAsrRack_AttachDspBusSetting(int rackId, string setting, IntPtr work, int workSize) { }

	// RVA: 0x23C7188 Offset: 0x23C7188 VA: 0x23C7188
	private static extern void criAtomExAsrRack_DetachDspBusSetting(int rackId) { }

	// RVA: 0x23C6A18 Offset: 0x23C6A18 VA: 0x23C6A18
	private static extern IntPtr criAtomExAsrRack_GetAppliedDspBusSnapshotName(int rackId) { }

	// RVA: 0x23C7224 Offset: 0x23C7224 VA: 0x23C7224
	private static extern void criAtomExAsrRack_ApplyDspBusSnapshot(int rackId, string snapshotName, int timeMs) { }

	// RVA: 0x23C6B74 Offset: 0x23C6B74 VA: 0x23C6B74
	private static extern void criAtomExAsrRack_GetPerformanceInfo(int rackId, out CriAtomExAsrRack.PerformanceInfo perfInfo) { }

	// RVA: 0x23C6C74 Offset: 0x23C6C74 VA: 0x23C6C74
	private static extern void criAtomExAsrRack_ResetPerformanceMonitor(int rackId) { }

	// RVA: 0x23C6DEC Offset: 0x23C6DEC VA: 0x23C6DEC
	private static extern void criAtomExAsrRack_SetAisacControlById(int rackId, ushort controlId, float value) { }

	// RVA: 0x23C6D18 Offset: 0x23C6D18 VA: 0x23C6D18
	private static extern void criAtomExAsrRack_SetAisacControlByName(int rackId, string controlName, float value) { }
}

// Namespace: 
public struct CriAtomExAsrRack.Config // TypeDefIndex: 3938
{
	// Fields
	public float serverFrequency; // 0x0
	public int numBuses; // 0x4
	public int outputChannels; // 0x8
	public int outputSamplingRate; // 0xC
	public CriAtomEx.SoundRendererType soundRendererType; // 0x10
	public int outputRackId; // 0x14
	public IntPtr context; // 0x18
}

// Namespace: 
public struct CriAtomExAsrRack.PlatformConfig // TypeDefIndex: 3939
{
	// Fields
	public byte reserved; // 0x0
}

// Namespace: 
public struct CriAtomExAsrRack.PerformanceInfo // TypeDefIndex: 3940
{
	// Fields
	public uint processCount; // 0x0
	public uint lastProcessTime; // 0x4
	public uint maxProcessTime; // 0x8
	public uint averageProcessTime; // 0xC
	public uint lastProcessInterval; // 0x10
	public uint maxProcessInterval; // 0x14
	public uint averageProcessInterval; // 0x18
	public uint lastProcessSamples; // 0x1C
	public uint maxProcessSamples; // 0x20
	public uint averageProcessSamples; // 0x24
}

// Namespace: 
public class CriAtomExAuxIn : CriDisposable // TypeDefIndex: 3941
{
	// Fields
	private const string errorInvalidHandle = "[CRIWARE] Invalid native handle of CriAtomExAuxIn.";
	private IntPtr handle; // 0x20
	private CriAudioReadStream inputReadStream; // 0x28

	// Methods

	// RVA: 0x23C72EC Offset: 0x23C72EC VA: 0x23C72EC
	public void .ctor(Nullable<CriAtomExAuxIn.Config> config) { }

	// RVA: 0x23C74A0 Offset: 0x23C74A0 VA: 0x23C74A0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23C751C Offset: 0x23C751C VA: 0x23C751C Slot: 5
	public override void Dispose() { }

	// RVA: 0x23C764C Offset: 0x23C764C VA: 0x23C764C
	public void Start() { }

	// RVA: 0x23C76F0 Offset: 0x23C76F0 VA: 0x23C76F0
	public void Stop() { }

	// RVA: 0x23C77F0 Offset: 0x23C77F0 VA: 0x23C77F0
	public void SetFormat(int numChannels, int samplingRate) { }

	// RVA: 0x23C78AC Offset: 0x23C78AC VA: 0x23C78AC
	public void GetFormat(out int numChannels, out int samplingRate) { }

	// RVA: 0x23C7968 Offset: 0x23C7968 VA: 0x23C7968
	public void SetVolume(float volume) { }

	// RVA: 0x23C7A1C Offset: 0x23C7A1C VA: 0x23C7A1C
	public void SetFrequencyRatio(float frequencyRatio) { }

	// RVA: 0x23C7AD0 Offset: 0x23C7AD0 VA: 0x23C7AD0
	public void SetBusSendLevel(string busName, float level) { }

	// RVA: 0x23C7BA8 Offset: 0x23C7BA8 VA: 0x23C7BA8
	public void SetInputReadStream(CriAudioReadStream stream) { }

	// RVA: 0x23C73EC Offset: 0x23C73EC VA: 0x23C73EC
	private static extern IntPtr criAtomAuxIn_Create(in CriAtomExAuxIn.Config config, IntPtr work, int work_size) { }

	// RVA: 0x23C75B0 Offset: 0x23C75B0 VA: 0x23C75B0
	private static extern void criAtomAuxIn_Destroy(IntPtr aux_in) { }

	// RVA: 0x23C7654 Offset: 0x23C7654 VA: 0x23C7654
	private static extern void criAtomAuxIn_Start(IntPtr aux_in) { }

	// RVA: 0x23C7754 Offset: 0x23C7754 VA: 0x23C7754
	private static extern void criAtomAuxIn_Stop(IntPtr aux_in) { }

	// RVA: 0x23C7970 Offset: 0x23C7970 VA: 0x23C7970
	private static extern void criAtomAuxIn_SetVolume(IntPtr aux_in, float volume) { }

	// RVA: 0x23C7A24 Offset: 0x23C7A24 VA: 0x23C7A24
	private static extern void criAtomAuxIn_SetFrequencyRatio(IntPtr aux_in, float ratio) { }

	// RVA: 0x23C7AD8 Offset: 0x23C7AD8 VA: 0x23C7AD8
	private static extern void criAtomAuxIn_SetBusSendLevelByName(IntPtr aux_in, string bus_name, float level) { }

	// RVA: 0x23C77F8 Offset: 0x23C77F8 VA: 0x23C77F8
	private static extern void criAtomAuxIn_SetFormat(IntPtr aux_in, int num_channels, int sampling_rate) { }

	// RVA: 0x23C78B4 Offset: 0x23C78B4 VA: 0x23C78B4
	private static extern void criAtomAuxIn_GetFormat(IntPtr aux_in, out int num_channels, out int sampling_rate) { }

	// RVA: 0x23C7C24 Offset: 0x23C7C24 VA: 0x23C7C24
	private static extern void criAtomAuxIn_SetInputReadStream(IntPtr aux_in, IntPtr stream_cbfunc, IntPtr stream_ptr) { }
}

// Namespace: 
public struct CriAtomExAuxIn.Config // TypeDefIndex: 3942
{
	// Fields
	public int maxChannels; // 0x0
	public int maxSamplingRate; // 0x4
	public CriAtomEx.SoundRendererType soundRendererType; // 0x8

	// Properties
	public static CriAtomExAuxIn.Config Default { get; }

	// Methods

	// RVA: 0x23C73DC Offset: 0x23C73DC VA: 0x23C73DC
	public static CriAtomExAuxIn.Config get_Default() { }
}

// Namespace: 
public class CriAtomExMic : CriDisposable // TypeDefIndex: 3943
{
	// Fields
	private const string errorInvalidHandle = "[CRIWARE] Invalid native handle of CriAtomMic.";
	private const string errorInvalidBufferLength = "[CRIWARE] Invalid buffer length for CriAtomMic.ReadData.";
	private const string errorInvalidNumBuffers = "[CRIWARE] Number of buffers are not same with channels of CriAtomMic.";
	private const string errorAlreadyInitialized = "[CRIWARE] CriAtomMic module is already initialized.";
	private const string errorNotInitialized = "[CRIWARE] CriAtomMic module is not initialized.";
	[CompilerGeneratedAttribute] // RVA: 0xC20CCC Offset: 0xC20CCC VA: 0xC20CCC
	[DebuggerBrowsableAttribute] // RVA: 0xC20CCC Offset: 0xC20CCC VA: 0xC20CCC
	private static bool <isInitialized>k__BackingField; // 0x0
	private IntPtr handle; // 0x20
	private IntPtr[] bufferPointers; // 0x28
	private GCHandle[] gcHandles; // 0x30
	private CriAudioWriteStream outputWriteStream; // 0x38
	private static int _initializationCount; // 0x4

	// Properties
	public static bool isInitialized { get; set; }

	// Methods

	// RVA: 0x23C99A4 Offset: 0x23C99A4 VA: 0x23C99A4
	private void .ctor(IntPtr handle) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23760 Offset: 0xC23760 VA: 0xC23760
	// RVA: 0x23C9AD8 Offset: 0x23C9AD8 VA: 0x23C9AD8
	public static bool get_isInitialized() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23770 Offset: 0xC23770 VA: 0xC23770
	// RVA: 0x23C9B40 Offset: 0x23C9B40 VA: 0x23C9B40
	private static void set_isInitialized(bool value) { }

	// RVA: 0x23C9BB0 Offset: 0x23C9BB0 VA: 0x23C9BB0
	public static void InitializeModule() { }

	// RVA: 0x23C9D08 Offset: 0x23C9D08 VA: 0x23C9D08
	public static void FinalizeModule() { }

	// RVA: 0x23C9ED4 Offset: 0x23C9ED4 VA: 0x23C9ED4
	public static CriAtomExMic.DeviceInfo[] GetDevices() { }

	// RVA: 0x23CA188 Offset: 0x23CA188 VA: 0x23CA188
	public static int GetNumDevices() { }

	// RVA: 0x23CA1E4 Offset: 0x23CA1E4 VA: 0x23CA1E4
	public static Nullable<CriAtomExMic.DeviceInfo> GetDefaultDevice() { }

	// RVA: 0x23CA3B8 Offset: 0x23CA3B8 VA: 0x23CA3B8
	public static bool IsFormatSupported(CriAtomExMic.Config config) { }

	// RVA: 0x23CA4EC Offset: 0x23CA4EC VA: 0x23CA4EC
	public static CriAtomExMic Create(Nullable<CriAtomExMic.Config> config) { }

	// RVA: 0x23CA764 Offset: 0x23CA764 VA: 0x23CA764 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23CA7E0 Offset: 0x23CA7E0 VA: 0x23CA7E0 Slot: 5
	public override void Dispose() { }

	// RVA: 0x23CA80C Offset: 0x23CA80C VA: 0x23CA80C
	private void Dispose(bool disposing) { }

	// RVA: 0x23CA958 Offset: 0x23CA958 VA: 0x23CA958
	public void Start() { }

	// RVA: 0x23CAA5C Offset: 0x23CAA5C VA: 0x23CAA5C
	public void Stop() { }

	// RVA: 0x23C9A70 Offset: 0x23C9A70 VA: 0x23C9A70
	public int GetNumChannels() { }

	// RVA: 0x23CABFC Offset: 0x23CABFC VA: 0x23CABFC
	public int GetSamplingRate() { }

	// RVA: 0x23CAD00 Offset: 0x23CAD00 VA: 0x23CAD00
	public uint GetNumBufferredSamples() { }

	// RVA: 0x23CAE04 Offset: 0x23CAE04 VA: 0x23CAE04
	public bool IsAvailable() { }

	// RVA: 0x23CAF34 Offset: 0x23CAF34 VA: 0x23CAF34
	public uint ReadData(float[] bufferMono) { }

	// RVA: 0x23CAF6C Offset: 0x23CAF6C VA: 0x23CAF6C
	public uint ReadData(float[] bufferMono, uint numToRead) { }

	// RVA: 0x23CB1C0 Offset: 0x23CB1C0 VA: 0x23CB1C0
	public uint ReadData(float[] bufferL, float[] bufferR) { }

	// RVA: 0x23CB208 Offset: 0x23CB208 VA: 0x23CB208
	public uint ReadData(float[] bufferL, float[] bufferR, uint numToRead) { }

	// RVA: 0x23CB414 Offset: 0x23CB414 VA: 0x23CB414
	public uint ReadData(float[][] buffers) { }

	// RVA: 0x23CB4AC Offset: 0x23CB4AC VA: 0x23CB4AC
	public uint ReadData(float[][] buffers, uint numToRead) { }

	// RVA: 0x23CB658 Offset: 0x23CB658 VA: 0x23CB658
	public void SetOutputWriteStream(CriAudioWriteStream stream) { }

	// RVA: 0x23CB7E4 Offset: 0x23CB7E4 VA: 0x23CB7E4
	public CriAudioReadStream GetOutputReadStream() { }

	// RVA: 0x23CB910 Offset: 0x23CB910 VA: 0x23CB910
	public CriAtomExMic.Effect AttachEffect(IntPtr afxInterface, float[] configParameters) { }

	// RVA: 0x23CBBE8 Offset: 0x23CBBE8 VA: 0x23CBBE8
	public void DetachEffect(CriAtomExMic.Effect effect) { }

	// RVA: 0x23CBD24 Offset: 0x23CBD24 VA: 0x23CBD24
	public void SetEffectParameter(CriAtomExMic.Effect effect, int parameterIndex, float parameterValue) { }

	// RVA: 0x23CBE88 Offset: 0x23CBE88 VA: 0x23CBE88
	public float GetEffectParameter(CriAtomExMic.Effect effect, int parameterIndex) { }

	// RVA: 0x23CBFCC Offset: 0x23CBFCC VA: 0x23CBFCC
	public void SetEffectBypass(CriAtomExMic.Effect effect, bool bypass) { }

	// RVA: 0x23CC110 Offset: 0x23CC110 VA: 0x23CC110
	public void UpdateEffectParameters(CriAtomExMic.Effect effect) { }

	// RVA: 0x23CB01C Offset: 0x23CB01C VA: 0x23CB01C
	private uint InternalReadDataFromBufferPointers(uint numToRead) { }

	// RVA: 0x23CB09C Offset: 0x23CB09C VA: 0x23CB09C
	private void InternalClearBuffers() { }

	// RVA: 0x23C9C7C Offset: 0x23C9C7C VA: 0x23C9C7C
	private static extern void criAtomMicUnity_Initialize() { }

	// RVA: 0x23C9E48 Offset: 0x23C9E48 VA: 0x23C9E48
	private static extern void criAtomMicUnity_Finalize() { }

	// RVA: 0x23CA000 Offset: 0x23CA000 VA: 0x23CA000
	private static extern int criAtomMic_GetNumDevices() { }

	// RVA: 0x23CA08C Offset: 0x23CA08C VA: 0x23CA08C
	private static extern bool criAtomMic_GetDevice(int index, out CriAtomExMic.DeviceInfo info) { }

	// RVA: 0x23CA2C4 Offset: 0x23CA2C4 VA: 0x23CA2C4
	private static extern bool criAtomMic_GetDefaultDevice(out CriAtomExMic.DeviceInfo info) { }

	// RVA: 0x23CA41C Offset: 0x23CA41C VA: 0x23CA41C
	private static extern bool criAtomMic_IsFormatSupported(in CriAtomExMic.Config config) { }

	// RVA: 0x23CA684 Offset: 0x23CA684 VA: 0x23CA684
	private static extern IntPtr criAtomMic_Create(in CriAtomExMic.Config config, IntPtr work, int work_size) { }

	// RVA: 0x23CA8BC Offset: 0x23CA8BC VA: 0x23CA8BC
	private static extern void criAtomMic_Destroy(IntPtr mic) { }

	// RVA: 0x23CA9C0 Offset: 0x23CA9C0 VA: 0x23CA9C0
	private static extern void criAtomMic_Start(IntPtr mic) { }

	// RVA: 0x23CAAC4 Offset: 0x23CAAC4 VA: 0x23CAAC4
	private static extern void criAtomMic_Stop(IntPtr mic) { }

	// RVA: 0x23CAB60 Offset: 0x23CAB60 VA: 0x23CAB60
	private static extern int criAtomMic_GetNumChannels(IntPtr mic) { }

	// RVA: 0x23CAC64 Offset: 0x23CAC64 VA: 0x23CAC64
	private static extern int criAtomMic_GetSamplingRate(IntPtr mic) { }

	// RVA: 0x23CAD68 Offset: 0x23CAD68 VA: 0x23CAD68
	private static extern uint criAtomMic_GetNumBufferredSamples(IntPtr mic) { }

	// RVA: 0x23CAE90 Offset: 0x23CAE90 VA: 0x23CAE90
	private static extern bool criAtomMic_IsAvailable(IntPtr mic) { }

	// RVA: 0x23CC244 Offset: 0x23CC244 VA: 0x23CC244
	private static extern uint criAtomMic_ReadData(IntPtr mic, IntPtr[] data, uint num_samples) { }

	// RVA: 0x23CB730 Offset: 0x23CB730 VA: 0x23CB730
	private static extern void criAtomMic_SetOutputWriteStream(IntPtr mic, IntPtr stream_cbfunc, IntPtr stream_ptr) { }

	// RVA: 0x23CB884 Offset: 0x23CB884 VA: 0x23CB884
	private static extern IntPtr criAtomMic_GetOutputReadStream() { }

	// RVA: 0x23CC300 Offset: 0x23CC300 VA: 0x23CC300
	private static extern int criAtomMic_CalculateWorkSizeForEffect(IntPtr mic, IntPtr afx_interface, float[] config_parameters, uint num_config_parameters) { }

	// RVA: 0x23CBA20 Offset: 0x23CBA20 VA: 0x23CBA20
	private static extern IntPtr criAtomMic_AttachEffect(IntPtr mic, IntPtr afx_interface, float[] config_parameters, uint num_config_parameters, IntPtr work, int work_size) { }

	// RVA: 0x23CBC78 Offset: 0x23CBC78 VA: 0x23CBC78
	private static extern void criAtomMic_DetachEffect(IntPtr mic, IntPtr effect) { }

	// RVA: 0x23CBB04 Offset: 0x23CBB04 VA: 0x23CBB04
	private static extern IntPtr criAtomMic_GetEffectInstance(IntPtr mic, IntPtr effect) { }

	// RVA: 0x23CC05C Offset: 0x23CC05C VA: 0x23CC05C
	private static extern void criAtomMic_SetEffectBypass(IntPtr mic, IntPtr effect, bool bypass) { }

	// RVA: 0x23CBDC4 Offset: 0x23CBDC4 VA: 0x23CBDC4
	private static extern void criAtomMic_SetEffectParameter(IntPtr mic, IntPtr effect, uint parameter_index, float parameter_value) { }

	// RVA: 0x23CBF18 Offset: 0x23CBF18 VA: 0x23CBF18
	private static extern float criAtomMic_GetEffectParameter(IntPtr mic, IntPtr effect, uint parameter_index) { }

	// RVA: 0x23CC198 Offset: 0x23CC198 VA: 0x23CC198
	private static extern void criAtomMic_UpdateEffectParameters(IntPtr mic, IntPtr effect) { }

	// RVA: 0x23CC3CC Offset: 0x23CC3CC VA: 0x23CC3CC
	private static void .cctor() { }
}

// Namespace: 
public struct CriAtomExMic.DeviceInfo // TypeDefIndex: 3944
{
	// Fields
	public string deviceId; // 0x0
	public string deviceName; // 0x8
	public uint deviceFlags; // 0x10
	public int maxChannels; // 0x14
	public int maxSamplingRate; // 0x18
}

// Namespace: 
public struct CriAtomExMic.Config // TypeDefIndex: 3945
{
	// Fields
	public string deviceId; // 0x0
	public uint flags; // 0x8
	public int numChannels; // 0xC
	public int samplingRate; // 0x10
	public uint frameSize; // 0x14
	public uint bufferingTime; // 0x18
	public IntPtr context; // 0x20

	// Properties
	public static CriAtomExMic.Config Default { get; }

	// Methods

	// RVA: 0x23CA660 Offset: 0x23CA660 VA: 0x23CA660
	public static CriAtomExMic.Config get_Default() { }
}

// Namespace: 
public class CriAtomExMic.Effect // TypeDefIndex: 3946
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC20D08 Offset: 0xC20D08 VA: 0xC20D08
	[DebuggerBrowsableAttribute] // RVA: 0xC20D08 Offset: 0xC20D08 VA: 0xC20D08
	private IntPtr <handle>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC20D44 Offset: 0xC20D44 VA: 0xC20D44
	[DebuggerBrowsableAttribute] // RVA: 0xC20D44 Offset: 0xC20D44 VA: 0xC20D44
	private IntPtr <afxInstance>k__BackingField; // 0x18

	// Properties
	public IntPtr handle { get; set; }
	public IntPtr afxInstance { get; set; }

	// Methods

	// RVA: 0x23CBBB0 Offset: 0x23CBBB0 VA: 0x23CBBB0
	public void .ctor(IntPtr handle, IntPtr afxInstance) { }

	[CompilerGeneratedAttribute] // RVA: 0xC23780 Offset: 0xC23780 VA: 0xC23780
	// RVA: 0x23CBC70 Offset: 0x23CBC70 VA: 0x23CBC70
	public IntPtr get_handle() { }

	[CompilerGeneratedAttribute] // RVA: 0xC23790 Offset: 0xC23790 VA: 0xC23790
	// RVA: 0x23CC3D0 Offset: 0x23CC3D0 VA: 0x23CC3D0
	private void set_handle(IntPtr value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC237A0 Offset: 0xC237A0 VA: 0xC237A0
	// RVA: 0x23CC3E0 Offset: 0x23CC3E0 VA: 0x23CC3E0
	public IntPtr get_afxInstance() { }

	[CompilerGeneratedAttribute] // RVA: 0xC237B0 Offset: 0xC237B0 VA: 0xC237B0
	// RVA: 0x23CC3D8 Offset: 0x23CC3D8 VA: 0x23CC3D8
	private void set_afxInstance(IntPtr value) { }
}

// Namespace: 
public class CriAtomExOutputAnalyzer : CriDisposable // TypeDefIndex: 3947
{
	// Fields
	public const int MaximumSpectrumBands = 512;
	protected IntPtr handle; // 0x20
	protected CriAtomExPlayer player; // 0x28
	protected string busName; // 0x30
	protected int numBands; // 0x38
	protected int numCapturedPcmSamples; // 0x3C
	protected CriAtomExOutputAnalyzer.PcmCaptureCallback userPcmCaptureCallback; // 0x40
	protected float[] dataL; // 0x48
	protected float[] dataR; // 0x50
	protected const int pcmCapturerNumMaxData = 512;
	protected static IntPtr InternalCallbackFunctionPointer; // 0x0
	protected static CriAtomExOutputAnalyzer.InternalPcmCaptureCallback DelegateObject; // 0x8
	protected static float[] DataL; // 0x10
	protected static float[] DataR; // 0x18
	protected static CriAtomExOutputAnalyzer.PcmCaptureCallback UserPcmCaptureCallback; // 0x20

	// Properties
	public IntPtr nativeHandle { get; }

	// Methods

	// RVA: 0x23CC5C8 Offset: 0x23CC5C8 VA: 0x23CC5C8
	public void .ctor(CriAtomExOutputAnalyzer.Config config) { }

	// RVA: 0x23CC790 Offset: 0x23CC790 VA: 0x23CC790
	protected void .ctor() { }

	// RVA: 0x23CC818 Offset: 0x23CC818 VA: 0x23CC818
	public IntPtr get_nativeHandle() { }

	// RVA: 0x23CC820 Offset: 0x23CC820 VA: 0x23CC820 Slot: 5
	public override void Dispose() { }

	// RVA: 0x23CC828 Offset: 0x23CC828 VA: 0x23CC828
	protected void Dispose(bool disposing) { }

	// RVA: 0x23CCB2C Offset: 0x23CCB2C VA: 0x23CCB2C
	public bool AttachExPlayer(CriAtomExPlayer player) { }

	// RVA: 0x23CC910 Offset: 0x23CC910 VA: 0x23CC910
	public void DetachExPlayer() { }

	// RVA: 0x23CCDEC Offset: 0x23CCDEC VA: 0x23CCDEC
	public bool AttachDspBus(string busName) { }

	// RVA: 0x23CC9F4 Offset: 0x23CC9F4 VA: 0x23CC9F4
	public void DetachDspBus() { }

	// RVA: 0x23CD020 Offset: 0x23CD020 VA: 0x23CD020
	public float GetRms(int channel) { }

	// RVA: 0x23CD1B4 Offset: 0x23CD1B4 VA: 0x23CD1B4
	public void GetSpectrumLevels(ref float[] levels) { }

	// RVA: 0x23CD36C Offset: 0x23CD36C VA: 0x23CD36C
	public void GetPcmData(ref float[] data, int ch) { }

	// RVA: 0x23CD548 Offset: 0x23CD548 VA: 0x23CD548
	public void SetPcmCaptureCallback(CriAtomExOutputAnalyzer.PcmCaptureCallback callback) { }

	// RVA: 0x23CD550 Offset: 0x23CD550 VA: 0x23CD550
	public void ExecutePcmCaptureCallback() { }

	[ObsoleteAttribute] // RVA: 0xC237C0 Offset: 0xC237C0 VA: 0xC237C0
	// RVA: 0x23CD790 Offset: 0x23CD790 VA: 0x23CD790
	public void ExecutePcmCaptureCallback(CriAtomExOutputAnalyzer.PcmCaptureCallback callback) { }

	// RVA: 0x23CD798 Offset: 0x23CD798 VA: 0x23CD798 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23CC670 Offset: 0x23CC670 VA: 0x23CC670
	protected void InitializeWithConfig(CriAtomExOutputAnalyzer.Config config) { }

	[MonoPInvokeCallbackAttribute] // RVA: 0xC237F8 Offset: 0xC237F8 VA: 0xC237F8
	// RVA: 0x23CC3E8 Offset: 0x23CC3E8 VA: 0x23CC3E8
	private static void Callback(IntPtr ptrL, IntPtr ptrR, int numChannels, int numData) { }

	// RVA: 0x23CD810 Offset: 0x23CD810 VA: 0x23CD810
	protected static extern IntPtr criAtomExOutputAnalyzer_Create(in CriAtomExOutputAnalyzer.Config config) { }

	// RVA: 0x23CCA90 Offset: 0x23CCA90 VA: 0x23CCA90
	protected static extern void criAtomExOutputAnalyzer_Destroy(IntPtr analyzer) { }

	// RVA: 0x23CCC58 Offset: 0x23CCC58 VA: 0x23CCC58
	protected static extern void criAtomExOutputAnalyzer_AttachExPlayer(IntPtr analyzer, IntPtr player) { }

	// RVA: 0x23CCD40 Offset: 0x23CCD40 VA: 0x23CCD40
	protected static extern void criAtomExOutputAnalyzer_DetachExPlayer(IntPtr analyzer, IntPtr player) { }

	// RVA: 0x23CCEA0 Offset: 0x23CCEA0 VA: 0x23CCEA0
	protected static extern void criAtomExOutputAnalyzer_AttachDspBusByName(IntPtr analyzer, string busName) { }

	// RVA: 0x23CCF60 Offset: 0x23CCF60 VA: 0x23CCF60
	protected static extern void criAtomExOutputAnalyzer_DetachDspBusByName(IntPtr analyzer, string busName) { }

	// RVA: 0x23CD108 Offset: 0x23CD108 VA: 0x23CD108
	protected static extern float criAtomExOutputAnalyzer_GetRms(IntPtr analyzer, int channel) { }

	// RVA: 0x23CD2D0 Offset: 0x23CD2D0 VA: 0x23CD2D0
	protected static extern IntPtr criAtomExOutputAnalyzer_GetSpectrumLevels(IntPtr analyzer) { }

	// RVA: 0x23CD49C Offset: 0x23CD49C VA: 0x23CD49C
	protected static extern IntPtr criAtomExOutputAnalyzer_GetPcmData(IntPtr analyzer, int ch) { }

	// RVA: 0x23CD6E4 Offset: 0x23CD6E4 VA: 0x23CD6E4
	protected static extern void criAtomExOutputAnalyzer_ExecuteQueuedPcmCapturerCallbacks(IntPtr analyzer, IntPtr callback) { }

	// RVA: 0x23CDCEC Offset: 0x23CDCEC VA: 0x23CDCEC
	private static void .cctor() { }
}

// Namespace: 
public sealed class CriAtomExOutputAnalyzer.PcmCaptureCallback : MulticastDelegate // TypeDefIndex: 3948
{
	// Methods

	// RVA: 0x23CE0B0 Offset: 0x23CE0B0 VA: 0x23CE0B0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x23CD8DC Offset: 0x23CD8DC VA: 0x23CD8DC Slot: 11
	public virtual void Invoke(float[] dataL, float[] dataR, int numChannels, int numData) { }

	// RVA: 0x23CE0C0 Offset: 0x23CE0C0 VA: 0x23CE0C0 Slot: 12
	public virtual IAsyncResult BeginInvoke(float[] dataL, float[] dataR, int numChannels, int numData, AsyncCallback callback, object object) { }

	// RVA: 0x23CE174 Offset: 0x23CE174 VA: 0x23CE174 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public struct CriAtomExOutputAnalyzer.Config // TypeDefIndex: 3949
{
	// Fields
	public bool enableLevelmeter; // 0x0
	public bool enableSpectrumAnalyzer; // 0x1
	public bool enablePcmCapture; // 0x2
	public bool enablePcmCaptureCallback; // 0x3
	public int numSpectrumAnalyzerBands; // 0x4
	public int numCapturedPcmSamples; // 0x8
}

// Namespace: 
[UnmanagedFunctionPointerAttribute] // RVA: 0xC1EF00 Offset: 0xC1EF00 VA: 0xC1EF00
protected sealed class CriAtomExOutputAnalyzer.InternalPcmCaptureCallback : MulticastDelegate // TypeDefIndex: 3950
{
	// Methods

	// RVA: 0x23CD6D4 Offset: 0x23CD6D4 VA: 0x23CD6D4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x23CDD48 Offset: 0x23CDD48 VA: 0x23CDD48 Slot: 11
	public virtual void Invoke(IntPtr dataL, IntPtr dataR, int numChannels, int numData) { }

	// RVA: 0x23CDFCC Offset: 0x23CDFCC VA: 0x23CDFCC Slot: 12
	public virtual IAsyncResult BeginInvoke(IntPtr dataL, IntPtr dataR, int numChannels, int numData, AsyncCallback callback, object object) { }

	// RVA: 0x23CE0A4 Offset: 0x23CE0A4 VA: 0x23CE0A4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public struct CriAtomExPlayback // TypeDefIndex: 3951
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC20D80 Offset: 0xC20D80 VA: 0xC20D80
	[DebuggerBrowsableAttribute] // RVA: 0xC20D80 Offset: 0xC20D80 VA: 0xC20D80
	private uint <id>k__BackingField; // 0x0
	public const uint invalidId = 4294967295;

	// Properties
	public uint id { get; set; }
	public CriAtomExPlayback.Status status { get; }
	public long time { get; }
	public long timeSyncedWithAudio { get; }

	// Methods

	// RVA: 0xD6A608 Offset: 0xD6A608 VA: 0xD6A608
	public void .ctor(uint id) { }

	// RVA: 0xD6A610 Offset: 0xD6A610 VA: 0xD6A610
	public void Stop(bool ignoresReleaseTime) { }

	// RVA: 0xD6A61C Offset: 0xD6A61C VA: 0xD6A61C
	public void Pause() { }

	// RVA: 0xD6A628 Offset: 0xD6A628 VA: 0xD6A628
	public void Resume(CriAtomEx.ResumeMode mode) { }

	// RVA: 0xD6A630 Offset: 0xD6A630 VA: 0xD6A630
	public bool IsPaused() { }

	// RVA: 0xD6A638 Offset: 0xD6A638 VA: 0xD6A638
	public bool GetFormatInfo(out CriAtomEx.FormatInfo info) { }

	// RVA: 0xD6A640 Offset: 0xD6A640 VA: 0xD6A640
	public CriAtomExPlayback.Status GetStatus() { }

	// RVA: 0xD6A648 Offset: 0xD6A648 VA: 0xD6A648
	public long GetTime() { }

	// RVA: 0xD6A650 Offset: 0xD6A650 VA: 0xD6A650
	public long GetTimeSyncedWithAudio() { }

	// RVA: 0xD6A658 Offset: 0xD6A658 VA: 0xD6A658
	public bool GetNumPlayedSamples(out long numSamples, out int samplingRate) { }

	// RVA: 0xD6A660 Offset: 0xD6A660 VA: 0xD6A660
	public long GetSequencePosition() { }

	// RVA: 0xD6A668 Offset: 0xD6A668 VA: 0xD6A668
	public int GetCurrentBlockIndex() { }

	// RVA: 0xD6A670 Offset: 0xD6A670 VA: 0xD6A670
	public bool GetTrackInfo(out CriAtomExPlayback.TrackInfo info) { }

	// RVA: 0xD6A678 Offset: 0xD6A678 VA: 0xD6A678
	public bool GetBeatSyncInfo(out CriAtomExBeatSync.Info info) { }

	// RVA: 0xD6A680 Offset: 0xD6A680 VA: 0xD6A680
	public void SetNextBlockIndex(int index) { }

	[CompilerGeneratedAttribute] // RVA: 0xC2385C Offset: 0xC2385C VA: 0xC2385C
	// RVA: 0xD6A688 Offset: 0xD6A688 VA: 0xD6A688
	public uint get_id() { }

	[CompilerGeneratedAttribute] // RVA: 0xC2386C Offset: 0xC2386C VA: 0xC2386C
	// RVA: 0xD6A690 Offset: 0xD6A690 VA: 0xD6A690
	private void set_id(uint value) { }

	// RVA: 0xD6A698 Offset: 0xD6A698 VA: 0xD6A698
	public CriAtomExPlayback.Status get_status() { }

	// RVA: 0xD6A6A0 Offset: 0xD6A6A0 VA: 0xD6A6A0
	public long get_time() { }

	// RVA: 0xD6A6A8 Offset: 0xD6A6A8 VA: 0xD6A6A8
	public long get_timeSyncedWithAudio() { }

	// RVA: 0xD6A6B0 Offset: 0xD6A6B0 VA: 0xD6A6B0
	public void Stop() { }

	// RVA: 0xD6A6B8 Offset: 0xD6A6B8 VA: 0xD6A6B8
	public void StopWithoutReleaseTime() { }

	// RVA: 0xD6A6C0 Offset: 0xD6A6C0 VA: 0xD6A6C0
	public void Pause(bool sw) { }

	// RVA: 0x23CE290 Offset: 0x23CE290 VA: 0x23CE290
	private static extern void criAtomExPlayback_Stop(uint id) { }

	// RVA: 0x23CE32C Offset: 0x23CE32C VA: 0x23CE32C
	private static extern void criAtomExPlayback_StopWithoutReleaseTime(uint id) { }

	// RVA: 0x23CE3D4 Offset: 0x23CE3D4 VA: 0x23CE3D4
	private static extern void criAtomExPlayback_Pause(uint id, bool sw) { }

	// RVA: 0x23CE488 Offset: 0x23CE488 VA: 0x23CE488
	private static extern void criAtomExPlayback_Resume(uint id, CriAtomEx.ResumeMode mode) { }

	// RVA: 0x23CE53C Offset: 0x23CE53C VA: 0x23CE53C
	private static extern bool criAtomExPlayback_IsPaused(uint id) { }

	// RVA: 0x23CE6A4 Offset: 0x23CE6A4 VA: 0x23CE6A4
	private static extern CriAtomExPlayback.Status criAtomExPlayback_GetStatus(uint id) { }

	// RVA: 0x23CE5E8 Offset: 0x23CE5E8 VA: 0x23CE5E8
	private static extern bool criAtomExPlayback_GetFormatInfo(uint id, out CriAtomEx.FormatInfo info) { }

	// RVA: 0x23CE748 Offset: 0x23CE748 VA: 0x23CE748
	private static extern long criAtomExPlayback_GetTime(uint id) { }

	// RVA: 0x23CE7EC Offset: 0x23CE7EC VA: 0x23CE7EC
	private static extern long criAtomExPlayback_GetTimeSyncedWithAudio(uint id) { }

	// RVA: 0x23CE890 Offset: 0x23CE890 VA: 0x23CE890
	private static extern bool criAtomExPlayback_GetNumPlayedSamples(uint id, out long num_samples, out int sampling_rate) { }

	// RVA: 0x23CE954 Offset: 0x23CE954 VA: 0x23CE954
	private static extern long criAtomExPlayback_GetSequencePosition(uint id) { }

	// RVA: 0x23CEC14 Offset: 0x23CEC14 VA: 0x23CEC14
	private static extern void criAtomExPlayback_SetNextBlockIndex(uint id, int index) { }

	// RVA: 0x23CE9F8 Offset: 0x23CE9F8 VA: 0x23CE9F8
	private static extern int criAtomExPlayback_GetCurrentBlockIndex(uint id) { }

	// RVA: 0x23CEA9C Offset: 0x23CEA9C VA: 0x23CEA9C
	private static extern bool criAtomExPlayback_GetPlaybackTrackInfo(uint id, out CriAtomExPlayback.TrackInfo info) { }

	// RVA: 0x23CEB58 Offset: 0x23CEB58 VA: 0x23CEB58
	private static extern bool criAtomExPlayback_GetBeatSyncInfo(uint id, out CriAtomExBeatSync.Info info) { }
}

// Namespace: 
public enum CriAtomExPlayback.Status // TypeDefIndex: 3952
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExPlayback.Status Prep = 1;
	public const CriAtomExPlayback.Status Playing = 2;
	public const CriAtomExPlayback.Status Removed = 3;
}

// Namespace: 
public struct CriAtomExPlayback.TrackInfo // TypeDefIndex: 3953
{
	// Fields
	public uint id; // 0x0
	public CriAtomEx.CueType sequenceType; // 0x4
	public IntPtr playerHn; // 0x8
	public ushort trackNo; // 0x10
	public ushort reserved; // 0x12
}

// Namespace: 
public class CriAtomExPlayer : CriDisposable // TypeDefIndex: 3954
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC20DBC Offset: 0xC20DBC VA: 0xC20DBC
	[DebuggerBrowsableAttribute] // RVA: 0xC20DBC Offset: 0xC20DBC VA: 0xC20DBC
	private CriAtomExBeatSync.CbFunc _onBeatSyncCallback; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC20DF8 Offset: 0xC20DF8 VA: 0xC20DF8
	[DebuggerBrowsableAttribute] // RVA: 0xC20DF8 Offset: 0xC20DF8 VA: 0xC20DF8
	private CriAtomExSequencer.EventCallback _onSequenceCallback; // 0x28
	private bool hasExistingNativeHandle; // 0x30
	private IntPtr entryPoolHandle; // 0x38
	private int _entryPoolCapacity; // 0x40
	private int max_path; // 0x44
	private IntPtr handle; // 0x48

	// Properties
	public IntPtr nativeHandle { get; }
	public bool isAvailable { get; }
	public int entryPoolCapacity { get; }

	// Methods

	// RVA: 0x23CF200 Offset: 0x23CF200 VA: 0x23CF200
	public void .ctor() { }

	// RVA: 0x23CF3D0 Offset: 0x23CF3D0 VA: 0x23CF3D0
	public void .ctor(int maxPath, int maxPathStrings) { }

	// RVA: 0x23CF434 Offset: 0x23CF434 VA: 0x23CF434
	public void .ctor(bool enableAudioSyncedTimer) { }

	// RVA: 0x23CF494 Offset: 0x23CF494 VA: 0x23CF494
	public void .ctor(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer) { }

	// RVA: 0x23CF504 Offset: 0x23CF504 VA: 0x23CF504
	public void .ctor(IntPtr existingNativeHandle) { }

	// RVA: 0x23CF254 Offset: 0x23CF254 VA: 0x23CF254
	public void .ctor(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer, IntPtr existingNativeHandle) { }

	// RVA: 0x23CCC50 Offset: 0x23CCC50 VA: 0x23CCC50
	public IntPtr get_nativeHandle() { }

	// RVA: 0x23CCBFC Offset: 0x23CCBFC VA: 0x23CCBFC
	public bool get_isAvailable() { }

	// RVA: 0x23CF610 Offset: 0x23CF610 VA: 0x23CF610
	private void add__onBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x23CF6FC Offset: 0x23CF6FC VA: 0x23CF6FC
	private void remove__onBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

	// RVA: 0x23CF7E8 Offset: 0x23CF7E8 VA: 0x23CF7E8
	public void add_OnBeatSyncCallback(CriAtomExBeatSync.CbFunc value) { }

