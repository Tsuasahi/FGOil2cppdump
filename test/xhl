
	// RVA: 0x1357C40 Offset: 0x1357C40 VA: 0x1357C40
	public void Pause() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59230 Offset: 0xC59230 VA: 0xC59230
	// RVA: 0x1357C44 Offset: 0x1357C44 VA: 0x1357C44
	private static void INTERNAL_CALL_Pause(AudioSource self) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59240 Offset: 0xC59240 VA: 0xC59240
	// RVA: 0x1356E60 Offset: 0x1356E60 VA: 0x1356E60
	public bool get_isPlaying() { }

	[ExcludeFromDocsAttribute] // RVA: 0xC59250 Offset: 0xC59250 VA: 0xC59250
	// RVA: 0x1357CB0 Offset: 0x1357CB0 VA: 0x1357CB0
	public void PlayOneShot(AudioClip clip) { }

	// RVA: 0x1357CB8 Offset: 0x1357CB8 VA: 0x1357CB8
	public void PlayOneShot(AudioClip clip, float volumeScale) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59260 Offset: 0xC59260 VA: 0xC59260
	// RVA: 0x1357DE4 Offset: 0x1357DE4 VA: 0x1357DE4
	private void PlayOneShotHelper(AudioClip clip, float volumeScale) { }

	// RVA: 0x1357E70 Offset: 0x1357E70 VA: 0x1357E70
	public static void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59270 Offset: 0xC59270 VA: 0xC59270
	// RVA: 0x1358154 Offset: 0x1358154 VA: 0x1358154
	public void set_loop(bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59280 Offset: 0xC59280 VA: 0xC59280
	// RVA: 0x13581C8 Offset: 0x13581C8 VA: 0x13581C8
	public void set_playOnAwake(bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59290 Offset: 0xC59290 VA: 0xC59290
	// RVA: 0x13580E0 Offset: 0x13580E0 VA: 0x13580E0
	public void set_spatialBlend(float value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC592A0 Offset: 0xC592A0 VA: 0xC592A0
	// RVA: 0x135823C Offset: 0x135823C VA: 0x135823C
	internal bool get_spatializeInternal() { }

	// RVA: 0x1355584 Offset: 0x1355584 VA: 0x1355584
	public bool get_spatialize() { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC592B0 Offset: 0xC592B0 VA: 0xC592B0
	// RVA: 0x13582A8 Offset: 0x13582A8 VA: 0x13582A8
	public void set_priority(int value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC592C0 Offset: 0xC592C0 VA: 0xC592C0
	// RVA: 0x135831C Offset: 0x135831C VA: 0x135831C
	public void set_mute(bool value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC592D0 Offset: 0xC592D0 VA: 0xC592D0
	// RVA: 0x1355E64 Offset: 0x1355E64 VA: 0x1355E64
	internal int GetNumExtensionProperties() { }

	// RVA: 0x1355DA0 Offset: 0x1355DA0 VA: 0x1355DA0
	internal PropertyName ReadExtensionName(int sourceIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC592E0 Offset: 0xC592E0 VA: 0xC592E0
	// RVA: 0x1358390 Offset: 0x1358390 VA: 0x1358390
	private static void INTERNAL_CALL_ReadExtensionName(AudioSource self, int sourceIndex, out PropertyName value) { }

	// RVA: 0x1355DC8 Offset: 0x1355DC8 VA: 0x1355DC8
	internal PropertyName ReadExtensionPropertyName(int sourceIndex) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC592F0 Offset: 0xC592F0 VA: 0xC592F0
	// RVA: 0x1358414 Offset: 0x1358414 VA: 0x1358414
	private static void INTERNAL_CALL_ReadExtensionPropertyName(AudioSource self, int sourceIndex, out PropertyName value) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59300 Offset: 0xC59300 VA: 0xC59300
	// RVA: 0x1355DF0 Offset: 0x1355DF0 VA: 0x1355DF0
	internal float ReadExtensionPropertyValue(int sourceIndex) { }

	// RVA: 0x1355ED0 Offset: 0x1355ED0 VA: 0x1355ED0
	internal void ClearExtensionProperties(PropertyName extensionName) { }

	[GeneratedByOldBindingsGeneratorAttribute] // RVA: 0xC59310 Offset: 0xC59310 VA: 0xC59310
	// RVA: 0x1358498 Offset: 0x1358498 VA: 0x1358498
	private static void INTERNAL_CALL_ClearExtensionProperties(AudioSource self, ref PropertyName extensionName) { }

	// RVA: 0x13556F4 Offset: 0x13556F4 VA: 0x13556F4
	internal AudioSourceExtension AddSpatializerExtension(Type extensionType) { }

	// RVA: 0x1355CBC Offset: 0x1355CBC VA: 0x1355CBC
	internal AudioSourceExtension AddAmbisonicExtension(Type extensionType) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2617
{}

// Namespace: UnityEngine
[ExtensionAttribute] // RVA: 0xC5A534 Offset: 0xC5A534 VA: 0xC5A534
[NativeHeaderAttribute] // RVA: 0xC5A534 Offset: 0xC5A534 VA: 0xC5A534
public static class ImageConversion // TypeDefIndex: 2618
{
	// Methods

	[NativeMethodAttribute] // RVA: 0xC5A580 Offset: 0xC5A580 VA: 0xC5A580
	[ExtensionAttribute] // RVA: 0xC5A580 Offset: 0xC5A580 VA: 0xC5A580
	// RVA: 0x138AC5C Offset: 0x138AC5C VA: 0x138AC5C
	public static bool LoadImage(Texture2D tex, byte[] data, bool markNonReadable) { }

	[ExtensionAttribute] // RVA: 0xC5A5E8 Offset: 0xC5A5E8 VA: 0xC5A5E8
	// RVA: 0x138ACE0 Offset: 0x138ACE0 VA: 0x138ACE0
	public static bool LoadImage(Texture2D tex, byte[] data) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2619
{}

// Namespace: UnityEngine
public enum ForceMode // TypeDefIndex: 2620
{
	// Fields
	public int value__; // 0x0
	public const ForceMode Force = 0;
	public const ForceMode Acceleration = 5;
	public const ForceMode Impulse = 1;
	public const ForceMode VelocityChange = 2;
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC5B718 Offset: 0xC5B718 VA: 0xC5B718
public class ControllerColliderHit // TypeDefIndex: 2621
{
	// Fields
	internal CharacterController m_Controller; // 0x10
	internal Collider m_Collider; // 0x18
	internal Vector3 m_Point; // 0x20
	internal Vector3 m_Normal; // 0x2C
	internal Vector3 m_MoveDirection; // 0x38
	internal float m_MoveLength; // 0x44
	internal int m_Push; // 0x48

	// Properties
	public Collider collider { get; }
	public GameObject gameObject { get; }
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public Vector3 moveDirection { get; }
	public float moveLength { get; }

	// Methods

	// RVA: 0x137535C Offset: 0x137535C VA: 0x137535C
	public Collider get_collider() { }

	// RVA: 0x1375364 Offset: 0x1375364 VA: 0x1375364
	public GameObject get_gameObject() { }

	// RVA: 0x1375394 Offset: 0x1375394 VA: 0x1375394
	public Vector3 get_point() { }

	// RVA: 0x13753A0 Offset: 0x13753A0 VA: 0x13753A0
	public Vector3 get_normal() { }

	// RVA: 0x13753AC Offset: 0x13753AC VA: 0x13753AC
	public Vector3 get_moveDirection() { }

	// RVA: 0x13753B8 Offset: 0x13753B8 VA: 0x13753B8
	public float get_moveLength() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC5B728 Offset: 0xC5B728 VA: 0xC5B728
public class Collision // TypeDefIndex: 2622
{
	// Fields
	internal Vector3 m_Impulse; // 0x10
	internal Vector3 m_RelativeVelocity; // 0x1C
	internal Rigidbody m_Rigidbody; // 0x28
	internal Collider m_Collider; // 0x30
	internal int m_ContactCount; // 0x38
	internal ContactPoint[] m_RecycledContacts; // 0x40
	internal ContactPoint[] m_LegacyContacts; // 0x48

	// Properties
	public Vector3 relativeVelocity { get; }
	public Collider collider { get; }
	public GameObject gameObject { get; }
	public ContactPoint[] contacts { get; }

	// Methods

	// RVA: 0x1375214 Offset: 0x1375214 VA: 0x1375214
	public Vector3 get_relativeVelocity() { }

	// RVA: 0x1375220 Offset: 0x1375220 VA: 0x1375220
	public Collider get_collider() { }

	// RVA: 0x1375228 Offset: 0x1375228 VA: 0x1375228
	public GameObject get_gameObject() { }

	// RVA: 0x13752C4 Offset: 0x13752C4 VA: 0x13752C4
	public ContactPoint[] get_contacts() { }
}

// Namespace: UnityEngine
public enum CollisionFlags // TypeDefIndex: 2623
{
	// Fields
	public int value__; // 0x0
	public const CollisionFlags None = 0;
	public const CollisionFlags Sides = 1;
	public const CollisionFlags Above = 2;
	public const CollisionFlags Below = 4;
	public const CollisionFlags CollidedSides = 1;
	public const CollisionFlags CollidedAbove = 2;
	public const CollisionFlags CollidedBelow = 4;
}

// Namespace: UnityEngine
public enum QueryTriggerInteraction // TypeDefIndex: 2624
{
	// Fields
	public int value__; // 0x0
	public const QueryTriggerInteraction UseGlobal = 0;
	public const QueryTriggerInteraction Ignore = 1;
	public const QueryTriggerInteraction Collide = 2;
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5B738 Offset: 0xC5B738 VA: 0xC5B738
public class PhysicMaterial : Object // TypeDefIndex: 2625
{
	// Methods

	// RVA: 0x1375588 Offset: 0x1375588 VA: 0x1375588
	public void .ctor() { }

	// RVA: 0x1375604 Offset: 0x1375604 VA: 0x1375604
	private static void Internal_CreateDynamicsMaterial(PhysicMaterial mat, string name) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xC5B770 Offset: 0xC5B770 VA: 0xC5B770
[NativeHeaderAttribute] // RVA: 0xC5B770 Offset: 0xC5B770 VA: 0xC5B770
[NativeHeaderAttribute] // RVA: 0xC5B770 Offset: 0xC5B770 VA: 0xC5B770
[NativeHeaderAttribute] // RVA: 0xC5B770 Offset: 0xC5B770 VA: 0xC5B770
public struct RaycastHit // TypeDefIndex: 2626
{
	// Fields
	[NativeNameAttribute] // RVA: 0xC5BC44 Offset: 0xC5BC44 VA: 0xC5BC44
	internal Vector3 m_Point; // 0x0
	[NativeNameAttribute] // RVA: 0xC5BC7C Offset: 0xC5BC7C VA: 0xC5BC7C
	internal Vector3 m_Normal; // 0xC
	[NativeNameAttribute] // RVA: 0xC5BCB4 Offset: 0xC5BCB4 VA: 0xC5BCB4
	internal uint m_FaceID; // 0x18
	[NativeNameAttribute] // RVA: 0xC5BCEC Offset: 0xC5BCEC VA: 0xC5BCEC
	internal float m_Distance; // 0x1C
	[NativeNameAttribute] // RVA: 0xC5BD24 Offset: 0xC5BD24 VA: 0xC5BD24
	internal Vector2 m_UV; // 0x20
	[NativeNameAttribute] // RVA: 0xC5BD5C Offset: 0xC5BD5C VA: 0xC5BD5C
	internal int m_Collider; // 0x28

	// Properties
	public Collider collider { get; }
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public float distance { get; }
	public Transform transform { get; }
	public Rigidbody rigidbody { get; }

	// Methods

	// RVA: 0xBC28D4 Offset: 0xBC28D4 VA: 0xBC28D4
	public Collider get_collider() { }

	// RVA: 0xBC28DC Offset: 0xBC28DC VA: 0xBC28DC
	public Vector3 get_point() { }

	// RVA: 0xBC28E8 Offset: 0xBC28E8 VA: 0xBC28E8
	public Vector3 get_normal() { }

	// RVA: 0xBC28F4 Offset: 0xBC28F4 VA: 0xBC28F4
	public float get_distance() { }

	// RVA: 0xBC28FC Offset: 0xBC28FC VA: 0xBC28FC
	public Transform get_transform() { }

	// RVA: 0xBC2904 Offset: 0xBC2904 VA: 0xBC2904
	public Rigidbody get_rigidbody() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5B804 Offset: 0xC5B804 VA: 0xC5B804
[RequireComponent] // RVA: 0xC5B804 Offset: 0xC5B804 VA: 0xC5B804
public class Rigidbody : Component // TypeDefIndex: 2627
{
	// Properties
	public Vector3 velocity { get; set; }
	public Vector3 angularVelocity { set; }
	public float drag { set; }
	public float mass { get; set; }
	public bool useGravity { get; set; }
	public bool isKinematic { get; set; }
	public bool freezeRotation { set; }
	public Vector3 position { get; }
	public Quaternion rotation { set; }

	// Methods

	// RVA: 0x13773A4 Offset: 0x13773A4 VA: 0x13773A4
	public void .ctor() { }

	// RVA: 0x13773AC Offset: 0x13773AC VA: 0x13773AC
	public Vector3 get_velocity() { }

	// RVA: 0x1377450 Offset: 0x1377450 VA: 0x1377450
	public void set_velocity(Vector3 value) { }

	// RVA: 0x13774EC Offset: 0x13774EC VA: 0x13774EC
	public void set_angularVelocity(Vector3 value) { }

	// RVA: 0x1377588 Offset: 0x1377588 VA: 0x1377588
	public void set_drag(float value) { }

	// RVA: 0x13775FC Offset: 0x13775FC VA: 0x13775FC
	public float get_mass() { }

	// RVA: 0x1377668 Offset: 0x1377668 VA: 0x1377668
	public void set_mass(float value) { }

	// RVA: 0x13776DC Offset: 0x13776DC VA: 0x13776DC
	public bool get_useGravity() { }

	// RVA: 0x1377748 Offset: 0x1377748 VA: 0x1377748
	public void set_useGravity(bool value) { }

	// RVA: 0x13777BC Offset: 0x13777BC VA: 0x13777BC
	public bool get_isKinematic() { }

	// RVA: 0x1377828 Offset: 0x1377828 VA: 0x1377828
	public void set_isKinematic(bool value) { }

	// RVA: 0x137789C Offset: 0x137789C VA: 0x137789C
	public void set_freezeRotation(bool value) { }

	// RVA: 0x1377910 Offset: 0x1377910 VA: 0x1377910
	public Vector3 get_position() { }

	// RVA: 0x13779B4 Offset: 0x13779B4 VA: 0x13779B4
	public void set_rotation(Quaternion value) { }

	// RVA: 0x1377A50 Offset: 0x1377A50 VA: 0x1377A50
	public void MovePosition(Vector3 position) { }

	// RVA: 0x1377AEC Offset: 0x1377AEC VA: 0x1377AEC
	public void MoveRotation(Quaternion rot) { }

	// RVA: 0x1377B88 Offset: 0x1377B88 VA: 0x1377B88
	public void Sleep() { }

	// RVA: 0x1377BF4 Offset: 0x1377BF4 VA: 0x1377BF4
	public bool IsSleeping() { }

	// RVA: 0x1377C60 Offset: 0x1377C60 VA: 0x1377C60
	public void WakeUp() { }

	// RVA: 0x1377CCC Offset: 0x1377CCC VA: 0x1377CCC
	public void AddForce(Vector3 force, ForceMode mode) { }

	// RVA: 0x1377D80 Offset: 0x1377D80 VA: 0x1377D80
	public void AddRelativeForce(Vector3 force, ForceMode mode) { }

	// RVA: 0x1377E34 Offset: 0x1377E34 VA: 0x1377E34
	public void AddTorque(Vector3 torque, ForceMode mode) { }

	// RVA: 0x1377EE8 Offset: 0x1377EE8 VA: 0x1377EE8
	public void AddRelativeTorque(Vector3 torque, ForceMode mode) { }

	// RVA: 0x1377F9C Offset: 0x1377F9C VA: 0x1377F9C
	public void AddForceAtPosition(Vector3 force, Vector3 position, ForceMode mode) { }

	// RVA: 0x1378064 Offset: 0x1378064 VA: 0x1378064
	public void AddExplosionForce(float explosionForce, Vector3 explosionPosition, float explosionRadius, float upwardsModifier, ForceMode mode) { }

	// RVA: 0x13773DC Offset: 0x13773DC VA: 0x13773DC
	private void get_velocity_Injected(out Vector3 ret) { }

	// RVA: 0x1377478 Offset: 0x1377478 VA: 0x1377478
	private void set_velocity_Injected(ref Vector3 value) { }

	// RVA: 0x1377514 Offset: 0x1377514 VA: 0x1377514
	private void set_angularVelocity_Injected(ref Vector3 value) { }

	// RVA: 0x1377940 Offset: 0x1377940 VA: 0x1377940
	private void get_position_Injected(out Vector3 ret) { }

	// RVA: 0x13779DC Offset: 0x13779DC VA: 0x13779DC
	private void set_rotation_Injected(ref Quaternion value) { }

	// RVA: 0x1377A78 Offset: 0x1377A78 VA: 0x1377A78
	private void MovePosition_Injected(ref Vector3 position) { }

	// RVA: 0x1377B14 Offset: 0x1377B14 VA: 0x1377B14
	private void MoveRotation_Injected(ref Quaternion rot) { }

	// RVA: 0x1377CFC Offset: 0x1377CFC VA: 0x1377CFC
	private void AddForce_Injected(ref Vector3 force, ForceMode mode) { }

	// RVA: 0x1377DB0 Offset: 0x1377DB0 VA: 0x1377DB0
	private void AddRelativeForce_Injected(ref Vector3 force, ForceMode mode) { }

	// RVA: 0x1377E64 Offset: 0x1377E64 VA: 0x1377E64
	private void AddTorque_Injected(ref Vector3 torque, ForceMode mode) { }

	// RVA: 0x1377F18 Offset: 0x1377F18 VA: 0x1377F18
	private void AddRelativeTorque_Injected(ref Vector3 torque, ForceMode mode) { }

	// RVA: 0x1377FD8 Offset: 0x1377FD8 VA: 0x1377FD8
	private void AddForceAtPosition_Injected(ref Vector3 force, ref Vector3 position, ForceMode mode) { }

	// RVA: 0x137809C Offset: 0x137809C VA: 0x137809C
	private void AddExplosionForce_Injected(float explosionForce, ref Vector3 explosionPosition, float explosionRadius, float upwardsModifier, ForceMode mode) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC5B88C Offset: 0xC5B88C VA: 0xC5B88C
[NativeHeaderAttribute] // RVA: 0xC5B88C Offset: 0xC5B88C VA: 0xC5B88C
[RequireComponent] // RVA: 0xC5B88C Offset: 0xC5B88C VA: 0xC5B88C
public class Collider : Component // TypeDefIndex: 2628
{
	// Properties
	public bool enabled { get; set; }
	public Rigidbody attachedRigidbody { get; }
	public bool isTrigger { set; }
	public Bounds bounds { get; }
	public PhysicMaterial material { get; }

	// Methods

	// RVA: 0x1374850 Offset: 0x1374850 VA: 0x1374850
	public void .ctor() { }

	// RVA: 0x1374DC0 Offset: 0x1374DC0 VA: 0x1374DC0
	public bool get_enabled() { }

	// RVA: 0x1374E2C Offset: 0x1374E2C VA: 0x1374E2C
	public void set_enabled(bool value) { }

	[NativeMethodAttribute] // RVA: 0xC5BD94 Offset: 0xC5BD94 VA: 0xC5BD94
	// RVA: 0x1374EA0 Offset: 0x1374EA0 VA: 0x1374EA0
	public Rigidbody get_attachedRigidbody() { }

	// RVA: 0x1374F0C Offset: 0x1374F0C VA: 0x1374F0C
	public void set_isTrigger(bool value) { }

	// RVA: 0x1374F80 Offset: 0x1374F80 VA: 0x1374F80
	public Bounds get_bounds() { }

	[NativeMethodAttribute] // RVA: 0xC5BDCC Offset: 0xC5BDCC VA: 0xC5BDCC
	// RVA: 0x1375034 Offset: 0x1375034 VA: 0x1375034
	public PhysicMaterial get_material() { }

	// RVA: 0x13750A0 Offset: 0x13750A0 VA: 0x13750A0
	private RaycastHit Raycast(Ray ray, float maxDistance, ref bool hasHit) { }

	// RVA: 0x1375190 Offset: 0x1375190 VA: 0x1375190
	public bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance) { }

	// RVA: 0x1374FC0 Offset: 0x1374FC0 VA: 0x1374FC0
	private void get_bounds_Injected(out Bounds ret) { }

	// RVA: 0x13750EC Offset: 0x13750EC VA: 0x13750EC
	private void Raycast_Injected(ref Ray ray, float maxDistance, ref bool hasHit, out RaycastHit ret) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5B924 Offset: 0xC5B924 VA: 0xC5B924
public class CharacterController : Collider // TypeDefIndex: 2629
{
	// Properties
	public bool isGrounded { get; }
	public CollisionFlags collisionFlags { get; }
	public float radius { set; }
	public float height { set; }
	public Vector3 center { set; }
	public float slopeLimit { set; }
	public float stepOffset { set; }
	public bool detectCollisions { set; }

	// Methods

	// RVA: 0x13748CC Offset: 0x13748CC VA: 0x13748CC
	public bool SimpleMove(Vector3 speed) { }

	// RVA: 0x137496C Offset: 0x137496C VA: 0x137496C
	public CollisionFlags Move(Vector3 motion) { }

	[NativeNameAttribute] // RVA: 0xC5BE04 Offset: 0xC5BE04 VA: 0xC5BE04
	// RVA: 0x1374A08 Offset: 0x1374A08 VA: 0x1374A08
	public bool get_isGrounded() { }

	// RVA: 0x1374A74 Offset: 0x1374A74 VA: 0x1374A74
	public CollisionFlags get_collisionFlags() { }

	// RVA: 0x1374AE0 Offset: 0x1374AE0 VA: 0x1374AE0
	public void set_radius(float value) { }

	// RVA: 0x1374B54 Offset: 0x1374B54 VA: 0x1374B54
	public void set_height(float value) { }

	// RVA: 0x1374BC8 Offset: 0x1374BC8 VA: 0x1374BC8
	public void set_center(Vector3 value) { }

	// RVA: 0x1374C64 Offset: 0x1374C64 VA: 0x1374C64
	public void set_slopeLimit(float value) { }

	// RVA: 0x1374CD8 Offset: 0x1374CD8 VA: 0x1374CD8
	public void set_stepOffset(float value) { }

	// RVA: 0x1374D4C Offset: 0x1374D4C VA: 0x1374D4C
	public void set_detectCollisions(bool value) { }

	// RVA: 0x13748F8 Offset: 0x13748F8 VA: 0x13748F8
	private bool SimpleMove_Injected(ref Vector3 speed) { }

	// RVA: 0x1374994 Offset: 0x1374994 VA: 0x1374994
	private CollisionFlags Move_Injected(ref Vector3 motion) { }

	// RVA: 0x1374BF0 Offset: 0x1374BF0 VA: 0x1374BF0
	private void set_center_Injected(ref Vector3 value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5B95C Offset: 0xC5B95C VA: 0xC5B95C
[NativeHeaderAttribute] // RVA: 0xC5B95C Offset: 0xC5B95C VA: 0xC5B95C
[RequiredByNativeCodeAttribute] // RVA: 0xC5B95C Offset: 0xC5B95C VA: 0xC5B95C
public class MeshCollider : Collider // TypeDefIndex: 2630
{
	// Properties
	public Mesh sharedMesh { get; set; }
	public bool convex { set; }

	// Methods

	// RVA: 0x1375434 Offset: 0x1375434 VA: 0x1375434
	public Mesh get_sharedMesh() { }

	// RVA: 0x13754A0 Offset: 0x13754A0 VA: 0x13754A0
	public void set_sharedMesh(Mesh value) { }

	// RVA: 0x1375514 Offset: 0x1375514 VA: 0x1375514
	public void set_convex(bool value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5B9CC Offset: 0xC5B9CC VA: 0xC5B9CC
[RequiredByNativeCodeAttribute] // RVA: 0xC5B9CC Offset: 0xC5B9CC VA: 0xC5B9CC
public class CapsuleCollider : Collider // TypeDefIndex: 2631
{
	// Properties
	public float height { set; }

	// Methods

	// RVA: 0x1374848 Offset: 0x1374848 VA: 0x1374848
	public void .ctor() { }

	// RVA: 0x1374858 Offset: 0x1374858 VA: 0x1374858
	public void set_height(float value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5BA18 Offset: 0xC5BA18 VA: 0xC5BA18
[RequiredByNativeCodeAttribute] // RVA: 0xC5BA18 Offset: 0xC5BA18 VA: 0xC5BA18
public class BoxCollider : Collider // TypeDefIndex: 2632
{
	// Properties
	public Vector3 center { get; set; }
	public Vector3 size { get; set; }

	// Methods

	// RVA: 0x13745C8 Offset: 0x13745C8 VA: 0x13745C8
	public Vector3 get_center() { }

	// RVA: 0x137466C Offset: 0x137466C VA: 0x137466C
	public void set_center(Vector3 value) { }

	// RVA: 0x1374708 Offset: 0x1374708 VA: 0x1374708
	public Vector3 get_size() { }

	// RVA: 0x13747AC Offset: 0x13747AC VA: 0x13747AC
	public void set_size(Vector3 value) { }

	// RVA: 0x13745F8 Offset: 0x13745F8 VA: 0x13745F8
	private void get_center_Injected(out Vector3 ret) { }

	// RVA: 0x1374694 Offset: 0x1374694 VA: 0x1374694
	private void set_center_Injected(ref Vector3 value) { }

	// RVA: 0x1374738 Offset: 0x1374738 VA: 0x1374738
	private void get_size_Injected(out Vector3 ret) { }

	// RVA: 0x13747D4 Offset: 0x13747D4 VA: 0x13747D4
	private void set_size_Injected(ref Vector3 value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xC5BA64 Offset: 0xC5BA64 VA: 0xC5BA64
[NativeHeaderAttribute] // RVA: 0xC5BA64 Offset: 0xC5BA64 VA: 0xC5BA64
public class SphereCollider : Collider // TypeDefIndex: 2633
{}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5BAB0 Offset: 0xC5BAB0 VA: 0xC5BAB0
[RequireComponent] // RVA: 0xC5BAB0 Offset: 0xC5BAB0 VA: 0xC5BAB0
[NativeClassAttribute] // RVA: 0xC5BAB0 Offset: 0xC5BAB0 VA: 0xC5BAB0
public class Joint : Component // TypeDefIndex: 2634
{
	// Properties
	public Rigidbody connectedBody { set; }

	// Methods

	// RVA: 0x13753C0 Offset: 0x13753C0 VA: 0x13753C0
	public void set_connectedBody(Rigidbody value) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5BB5C Offset: 0xC5BB5C VA: 0xC5BB5C
[UsedByNativeCodeAttribute] // RVA: 0xC5BB5C Offset: 0xC5BB5C VA: 0xC5BB5C
public struct ContactPoint // TypeDefIndex: 2635
{
	// Fields
	internal Vector3 m_Point; // 0x0
	internal Vector3 m_Normal; // 0xC
	internal int m_ThisColliderInstanceID; // 0x18
	internal int m_OtherColliderInstanceID; // 0x1C
	internal float m_Separation; // 0x20

	// Properties
	public Vector3 point { get; }
	public Vector3 normal { get; }

	// Methods

	// RVA: 0xBC2838 Offset: 0xBC2838 VA: 0xBC2838
	public Vector3 get_point() { }

	// RVA: 0xBC2844 Offset: 0xBC2844 VA: 0xBC2844
	public Vector3 get_normal() { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5BBA8 Offset: 0xC5BBA8 VA: 0xC5BBA8
public struct PhysicsScene : IEquatable<PhysicsScene> // TypeDefIndex: 2636
{
	// Fields
	private int m_Handle; // 0x0

	// Methods

	// RVA: 0xBC289C Offset: 0xBC289C VA: 0xBC289C Slot: 3
	public override string ToString() { }

	// RVA: 0xBC28A4 Offset: 0xBC28A4 VA: 0xBC28A4 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0xBC28AC Offset: 0xBC28AC VA: 0xBC28AC Slot: 0
	public override bool Equals(object other) { }

	// RVA: 0xBC28B4 Offset: 0xBC28B4 VA: 0xBC28B4 Slot: 4
	public bool Equals(PhysicsScene other) { }

	// RVA: 0xBC28C4 Offset: 0xBC28C4 VA: 0xBC28C4
	public bool Raycast(Vector3 origin, Vector3 direction, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }

	[NativeNameAttribute] // RVA: 0xC5BE3C Offset: 0xC5BE3C VA: 0xC5BE3C
	[StaticAccessorAttribute] // RVA: 0xC5BE3C Offset: 0xC5BE3C VA: 0xC5BE3C
	// RVA: 0x1376F8C Offset: 0x1376F8C VA: 0x1376F8C
	private static bool Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0xBC28CC Offset: 0xBC28CC VA: 0xBC28CC
	public bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }

	[StaticAccessorAttribute] // RVA: 0xC5BEA0 Offset: 0xC5BEA0 VA: 0xC5BEA0
	[NativeNameAttribute] // RVA: 0xC5BEA0 Offset: 0xC5BEA0 VA: 0xC5BEA0
	// RVA: 0x1377058 Offset: 0x1377058 VA: 0x1377058
	private static bool Internal_Raycast(PhysicsScene physicsScene, Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1376FB4 Offset: 0x1376FB4 VA: 0x1376FB4
	private static bool Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1377080 Offset: 0x1377080 VA: 0x1377080
	private static bool Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Namespace: UnityEngine
[StaticAccessorAttribute] // RVA: 0xC5BBE0 Offset: 0xC5BBE0 VA: 0xC5BBE0
[NativeHeaderAttribute] // RVA: 0xC5BBE0 Offset: 0xC5BBE0 VA: 0xC5BBE0
public class Physics // TypeDefIndex: 2637
{
	// Properties
	public static Vector3 gravity { set; }
	[NativePropertyAttribute] // RVA: 0xC5CA90 Offset: 0xC5CA90 VA: 0xC5CA90
	public static PhysicsScene defaultPhysicsScene { get; }

	// Methods

	// RVA: 0x1375678 Offset: 0x1375678 VA: 0x1375678
	public static void set_gravity(Vector3 value) { }

	// RVA: 0x137570C Offset: 0x137570C VA: 0x137570C
	public static PhysicsScene get_defaultPhysicsScene() { }

	// RVA: 0x13757A0 Offset: 0x13757A0 VA: 0x13757A0
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF04 Offset: 0xC5BF04 VA: 0xC5BF04
	// RVA: 0x13759A0 Offset: 0x13759A0 VA: 0x13759A0
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF14 Offset: 0xC5BF14 VA: 0xC5BF14
	// RVA: 0x1375A44 Offset: 0x1375A44 VA: 0x1375A44
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF24 Offset: 0xC5BF24 VA: 0xC5BF24
	// RVA: 0x1375ADC Offset: 0x1375ADC VA: 0x1375ADC
	public static bool Raycast(Vector3 origin, Vector3 direction) { }

	// RVA: 0x1375B6C Offset: 0x1375B6C VA: 0x1375B6C
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[RequiredByNativeCodeAttribute] // RVA: 0xC5BF34 Offset: 0xC5BF34 VA: 0xC5BF34
	[ExcludeFromDocsAttribute] // RVA: 0xC5BF34 Offset: 0xC5BF34 VA: 0xC5BF34
	// RVA: 0x1375D98 Offset: 0x1375D98 VA: 0x1375D98
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF6C Offset: 0xC5BF6C VA: 0xC5BF6C
	// RVA: 0x1375E44 Offset: 0x1375E44 VA: 0x1375E44
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF7C Offset: 0xC5BF7C VA: 0xC5BF7C
	// RVA: 0x1375EEC Offset: 0x1375EEC VA: 0x1375EEC
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo) { }

	// RVA: 0x1375F8C Offset: 0x1375F8C VA: 0x1375F8C
	public static bool Raycast(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF8C Offset: 0xC5BF8C VA: 0xC5BF8C
	// RVA: 0x137603C Offset: 0x137603C VA: 0x137603C
	public static bool Raycast(Ray ray, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BF9C Offset: 0xC5BF9C VA: 0xC5BF9C
	// RVA: 0x13760E0 Offset: 0x13760E0 VA: 0x13760E0
	public static bool Raycast(Ray ray, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BFAC Offset: 0xC5BFAC VA: 0xC5BFAC
	// RVA: 0x1376180 Offset: 0x1376180 VA: 0x1376180
	public static bool Raycast(Ray ray) { }

	// RVA: 0x1376220 Offset: 0x1376220 VA: 0x1376220
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BFBC Offset: 0xC5BFBC VA: 0xC5BFBC
	// RVA: 0x13762D8 Offset: 0x13762D8 VA: 0x13762D8
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BFCC Offset: 0xC5BFCC VA: 0xC5BFCC
	// RVA: 0x137638C Offset: 0x137638C VA: 0x137638C
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5BFDC Offset: 0xC5BFDC VA: 0xC5BFDC
	// RVA: 0x1376434 Offset: 0x1376434 VA: 0x1376434
	public static bool Raycast(Ray ray, out RaycastHit hitInfo) { }

	[NativeNameAttribute] // RVA: 0xC5BFEC Offset: 0xC5BFEC VA: 0xC5BFEC
	[StaticAccessorAttribute] // RVA: 0xC5BFEC Offset: 0xC5BFEC VA: 0xC5BFEC
	// RVA: 0x13764DC Offset: 0x13764DC VA: 0x13764DC
	private static bool Query_SphereCast(PhysicsScene physicsScene, Vector3 origin, float radius, Vector3 direction, float maxDistance, ref RaycastHit hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x13765F8 Offset: 0x13765F8 VA: 0x13765F8
	private static bool Internal_SphereCast(PhysicsScene physicsScene, Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1376748 Offset: 0x1376748 VA: 0x1376748
	public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C050 Offset: 0xC5C050 VA: 0xC5C050
	// RVA: 0x1376814 Offset: 0x1376814 VA: 0x1376814
	public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance, int layerMask) { }

	[StaticAccessorAttribute] // RVA: 0xC5C060 Offset: 0xC5C060 VA: 0xC5C060
	[NativeNameAttribute] // RVA: 0xC5C060 Offset: 0xC5C060 VA: 0xC5C060
	// RVA: 0x137684C Offset: 0x137684C VA: 0x137684C
	private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1376914 Offset: 0x1376914 VA: 0x1376914
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C0C4 Offset: 0xC5C0C4 VA: 0xC5C0C4
	// RVA: 0x1376A80 Offset: 0x1376A80 VA: 0x1376A80
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C0D4 Offset: 0xC5C0D4 VA: 0xC5C0D4
	// RVA: 0x1376A88 Offset: 0x1376A88 VA: 0x1376A88
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C0E4 Offset: 0xC5C0E4 VA: 0xC5C0E4
	// RVA: 0x1376A94 Offset: 0x1376A94 VA: 0x1376A94
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction) { }

	// RVA: 0x1376AA8 Offset: 0x1376AA8 VA: 0x1376AA8
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C0F4 Offset: 0xC5C0F4 VA: 0xC5C0F4
	[RequiredByNativeCodeAttribute] // RVA: 0xC5C0F4 Offset: 0xC5C0F4 VA: 0xC5C0F4
	// RVA: 0x1376B2C Offset: 0x1376B2C VA: 0x1376B2C
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C12C Offset: 0xC5C12C VA: 0xC5C12C
	// RVA: 0x1376BA4 Offset: 0x1376BA4 VA: 0x1376BA4
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C13C Offset: 0xC5C13C VA: 0xC5C13C
	// RVA: 0x1376C18 Offset: 0x1376C18 VA: 0x1376C18
	public static RaycastHit[] RaycastAll(Ray ray) { }

	[StaticAccessorAttribute] // RVA: 0xC5C14C Offset: 0xC5C14C VA: 0xC5C14C
	[NativeNameAttribute] // RVA: 0xC5C14C Offset: 0xC5C14C VA: 0xC5C14C
	// RVA: 0x1376C8C Offset: 0x1376C8C VA: 0x1376C8C
	private static Collider[] OverlapSphere_Internal(PhysicsScene physicsScene, Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1376D74 Offset: 0x1376D74 VA: 0x1376D74
	public static Collider[] OverlapSphere(Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	[ExcludeFromDocsAttribute] // RVA: 0xC5C1B0 Offset: 0xC5C1B0 VA: 0xC5C1B0
	// RVA: 0x1376DF0 Offset: 0x1376DF0 VA: 0x1376DF0
	public static Collider[] OverlapSphere(Vector3 position, float radius) { }

	// RVA: 0x13756A0 Offset: 0x13756A0 VA: 0x13756A0
	private static void set_gravity_Injected(ref Vector3 value) { }

	// RVA: 0x1375734 Offset: 0x1375734 VA: 0x1375734
	private static void get_defaultPhysicsScene_Injected(out PhysicsScene ret) { }

	// RVA: 0x137653C Offset: 0x137653C VA: 0x137653C
	private static bool Query_SphereCast_Injected(ref PhysicsScene physicsScene, ref Vector3 origin, float radius, ref Vector3 direction, float maxDistance, ref RaycastHit hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1376870 Offset: 0x1376870 VA: 0x1376870
	private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }

	// RVA: 0x1376CD0 Offset: 0x1376CD0 VA: 0x1376CD0
	private static Collider[] OverlapSphere_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 position, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2638
{}

// Namespace: UnityEngine
public enum FontStyle // TypeDefIndex: 2639
{
	// Fields
	public int value__; // 0x0
	public const FontStyle Normal = 0;
	public const FontStyle Bold = 1;
	public const FontStyle Italic = 2;
	public const FontStyle BoldAndItalic = 3;
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0xC5DBD8 Offset: 0xC5DBD8 VA: 0xC5DBD8
internal enum TextGenerationError // TypeDefIndex: 2640
{
	// Fields
	public int value__; // 0x0
	public const TextGenerationError None = 0;
	public const TextGenerationError CustomSizeOnNonDynamicFont = 1;
	public const TextGenerationError CustomStyleOnNonDynamicFont = 2;
	public const TextGenerationError NoFont = 4;
}

// Namespace: UnityEngine
public struct TextGenerationSettings // TypeDefIndex: 2641
{
	// Fields
	public Font font; // 0x0
	public Color color; // 0x8
	public int fontSize; // 0x18
	public float lineSpacing; // 0x1C
	public bool richText; // 0x20
	public float scaleFactor; // 0x24
	public FontStyle fontStyle; // 0x28
	public TextAnchor textAnchor; // 0x2C
	public bool alignByGeometry; // 0x30
	public bool resizeTextForBestFit; // 0x31
	public int resizeTextMinSize; // 0x34
	public int resizeTextMaxSize; // 0x38
	public bool updateBounds; // 0x3C
	public VerticalWrapMode verticalOverflow; // 0x40
	public HorizontalWrapMode horizontalOverflow; // 0x44
	public Vector2 generationExtents; // 0x48
	public Vector2 pivot; // 0x50
	public bool generateOutOfBounds; // 0x58

	// Methods

	// RVA: 0xBC2B40 Offset: 0xBC2B40 VA: 0xBC2B40
	private bool CompareColors(Color left, Color right) { }

	// RVA: 0xBC2B44 Offset: 0xBC2B44 VA: 0xBC2B44
	private bool CompareVector2(Vector2 left, Vector2 right) { }

	// RVA: 0xBC2B48 Offset: 0xBC2B48 VA: 0xBC2B48
	public bool Equals(TextGenerationSettings other) { }
}

// Namespace: UnityEngine
[NativeHeaderAttribute] // RVA: 0xC5DBE8 Offset: 0xC5DBE8 VA: 0xC5DBE8
[UsedByNativeCodeAttribute] // RVA: 0xC5DBE8 Offset: 0xC5DBE8 VA: 0xC5DBE8
public sealed class TextGenerator : IDisposable // TypeDefIndex: 2642
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private string m_LastString; // 0x18
	private TextGenerationSettings m_LastSettings; // 0x20
	private bool m_HasGenerated; // 0x80
	private TextGenerationError m_LastValid; // 0x84
	private readonly List<UIVertex> m_Verts; // 0x88
	private readonly List<UICharInfo> m_Characters; // 0x90
	private readonly List<UILineInfo> m_Lines; // 0x98
	private bool m_CachedVerts; // 0xA0
	private bool m_CachedCharacters; // 0xA1
	private bool m_CachedLines; // 0xA2

	// Properties
	public int characterCountVisible { get; }
	public IList<UIVertex> verts { get; }
	public IList<UICharInfo> characters { get; }
	public IList<UILineInfo> lines { get; }
	public Rect rectExtents { get; }
	public int characterCount { get; }
	public int lineCount { get; }

	// Methods

	// RVA: 0x1379298 Offset: 0x1379298 VA: 0x1379298
	public void .ctor() { }

	// RVA: 0x13792A0 Offset: 0x13792A0 VA: 0x13792A0
	public void .ctor(int initialCapacity) { }

	// RVA: 0x13793E0 Offset: 0x13793E0 VA: 0x13793E0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x13794DC Offset: 0x13794DC VA: 0x13794DC Slot: 4
	private void System.IDisposable.Dispose() { }

	[CompilerGeneratedAttribute] // RVA: 0xC5DF4C Offset: 0xC5DF4C VA: 0xC5DF4C
	// RVA: 0x13795A8 Offset: 0x13795A8 VA: 0x13795A8
	public int get_characterCountVisible() { }

	// RVA: 0x137962C Offset: 0x137962C VA: 0x137962C
	private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings) { }

	// RVA: 0x1379920 Offset: 0x1379920 VA: 0x1379920
	public void Invalidate() { }

	// RVA: 0x1379928 Offset: 0x1379928 VA: 0x1379928
	public void GetCharacters(List<UICharInfo> characters) { }

	// RVA: 0x13799A0 Offset: 0x13799A0 VA: 0x13799A0
	public void GetLines(List<UILineInfo> lines) { }

	// RVA: 0x1379A18 Offset: 0x1379A18 VA: 0x1379A18
	public void GetVertices(List<UIVertex> vertices) { }

	// RVA: 0x1379A90 Offset: 0x1379A90 VA: 0x1379A90
	public float GetPreferredWidth(string str, TextGenerationSettings settings) { }

	// RVA: 0x1379B90 Offset: 0x1379B90 VA: 0x1379B90
	public float GetPreferredHeight(string str, TextGenerationSettings settings) { }

	// RVA: 0x1379C0C Offset: 0x1379C0C VA: 0x1379C0C
	public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context) { }

	// RVA: 0x1379B10 Offset: 0x1379B10 VA: 0x1379B10
	public bool Populate(string str, TextGenerationSettings settings) { }

	// RVA: 0x1379E00 Offset: 0x1379E00 VA: 0x1379E00
	private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings) { }

	// RVA: 0x1379EE4 Offset: 0x1379EE4 VA: 0x1379EE4
	private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings) { }

	// RVA: 0x137A1AC Offset: 0x137A1AC VA: 0x137A1AC
	public IList<UIVertex> get_verts() { }

	// RVA: 0x137A1E8 Offset: 0x137A1E8 VA: 0x137A1E8
	public IList<UICharInfo> get_characters() { }

	// RVA: 0x137A224 Offset: 0x137A224 VA: 0x137A224
	public IList<UILineInfo> get_lines() { }
