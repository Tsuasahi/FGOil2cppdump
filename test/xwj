	[RequiredFieldAttribute] // RVA: 0xC86948 Offset: 0xC86948 VA: 0xC86948
	[TooltipAttribute] // RVA: 0xC86948 Offset: 0xC86948 VA: 0xC86948
	public FsmString colorString; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC86994 Offset: 0xC86994 VA: 0xC86994
	[TooltipAttribute] // RVA: 0xC86994 Offset: 0xC86994 VA: 0xC86994
	[UIHintAttribute] // RVA: 0xC86994 Offset: 0xC86994 VA: 0xC86994
	public FsmColor color; // 0x58
	private string _lastColor; // 0x60
	public bool everyFrame; // 0x68

	// Methods

	// RVA: 0x1C6F47C Offset: 0x1C6F47C VA: 0x1C6F47C
	public void .ctor() { }

	// RVA: 0x1C6F484 Offset: 0x1C6F484 VA: 0x1C6F484 Slot: 28
	public override void Reset() { }

	// RVA: 0x1C6F490 Offset: 0x1C6F490 VA: 0x1C6F490 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1C6F5A0 Offset: 0x1C6F5A0 VA: 0x1C6F5A0 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D65C Offset: 0xC2D65C VA: 0xC2D65C
[TooltipAttribute] // RVA: 0xC2D65C Offset: 0xC2D65C VA: 0xC2D65C
public class NguiToolsAddChild : FsmStateAction // TypeDefIndex: 12240
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC869F4 Offset: 0xC869F4 VA: 0xC869F4
	[TooltipAttribute] // RVA: 0xC869F4 Offset: 0xC869F4 VA: 0xC869F4
	public FsmOwnerDefault parent; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC86A40 Offset: 0xC86A40 VA: 0xC86A40
	[TooltipAttribute] // RVA: 0xC86A40 Offset: 0xC86A40 VA: 0xC86A40
	public FsmGameObject childReference; // 0x58
	[UIHintAttribute] // RVA: 0xC86A8C Offset: 0xC86A8C VA: 0xC86A8C
	public FsmGameObject childInstance; // 0x60

	// Methods

	// RVA: 0x1C6F6F8 Offset: 0x1C6F6F8 VA: 0x1C6F6F8
	public void .ctor() { }

	// RVA: 0x1C6F700 Offset: 0x1C6F700 VA: 0x1C6F700 Slot: 28
	public override void Reset() { }

	// RVA: 0x1C6F70C Offset: 0x1C6F70C VA: 0x1C6F70C Slot: 32
	public override void OnEnter() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D6BC Offset: 0xC2D6BC VA: 0xC2D6BC
[TooltipAttribute] // RVA: 0xC2D6BC Offset: 0xC2D6BC VA: 0xC2D6BC
public class NguiLabelGetText : FsmStateAction // TypeDefIndex: 12241
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC86AA0 Offset: 0xC86AA0 VA: 0xC86AA0
	[CheckForComponentAttribute] // RVA: 0xC86AA0 Offset: 0xC86AA0 VA: 0xC86AA0
	[TooltipAttribute] // RVA: 0xC86AA0 Offset: 0xC86AA0 VA: 0xC86AA0
	public FsmOwnerDefault gameObject; // 0x50
	[TooltipAttribute] // RVA: 0xC86B38 Offset: 0xC86B38 VA: 0xC86B38
	[RequiredFieldAttribute] // RVA: 0xC86B38 Offset: 0xC86B38 VA: 0xC86B38
	[UIHintAttribute] // RVA: 0xC86B38 Offset: 0xC86B38 VA: 0xC86B38
	public FsmString text; // 0x58
	[TooltipAttribute] // RVA: 0xC86B98 Offset: 0xC86B98 VA: 0xC86B98
	public bool everyFrame; // 0x60
	private UILabel _label; // 0x68

	// Methods

	// RVA: 0x1B84994 Offset: 0x1B84994 VA: 0x1B84994
	public void .ctor() { }

	// RVA: 0x1B8499C Offset: 0x1B8499C VA: 0x1B8499C Slot: 28
	public override void Reset() { }

	// RVA: 0x1B849A4 Offset: 0x1B849A4 VA: 0x1B849A4 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1B84B48 Offset: 0x1B84B48 VA: 0x1B84B48 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x1B84AF4 Offset: 0x1B84AF4 VA: 0x1B84AF4
	private void GetText() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D71C Offset: 0xC2D71C VA: 0xC2D71C
[TooltipAttribute] // RVA: 0xC2D71C Offset: 0xC2D71C VA: 0xC2D71C
public class NguiLabelSetText : FsmStateAction // TypeDefIndex: 12242
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC86BD0 Offset: 0xC86BD0 VA: 0xC86BD0
	[CheckForComponentAttribute] // RVA: 0xC86BD0 Offset: 0xC86BD0 VA: 0xC86BD0
	[TooltipAttribute] // RVA: 0xC86BD0 Offset: 0xC86BD0 VA: 0xC86BD0
	public FsmOwnerDefault gameObject; // 0x50
	[TooltipAttribute] // RVA: 0xC86C68 Offset: 0xC86C68 VA: 0xC86C68
	public FsmString text; // 0x58
	[TooltipAttribute] // RVA: 0xC86CA0 Offset: 0xC86CA0 VA: 0xC86CA0
	public bool everyFrame; // 0x60
	private UILabel _label; // 0x68

	// Methods

	// RVA: 0x1B84B4C Offset: 0x1B84B4C VA: 0x1B84B4C
	public void .ctor() { }

	// RVA: 0x1B84B54 Offset: 0x1B84B54 VA: 0x1B84B54 Slot: 28
	public override void Reset() { }

	// RVA: 0x1B84B5C Offset: 0x1B84B5C VA: 0x1B84B5C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1B84D00 Offset: 0x1B84D00 VA: 0x1B84D00 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x1B84CAC Offset: 0x1B84CAC VA: 0x1B84CAC
	private void SetText() { }
}

// Namespace: 
public class NGuiEventsToPlaymakerFsmEvents : MonoBehaviour // TypeDefIndex: 12243
{
	// Fields
	public bool debug; // 0x18
	public bool OnlyShowImplemented; // 0x19
	public static UICamera.MouseOrTouch currentTouch; // 0x0
	public PlayMakerFSM targetFSM; // 0x20
	public List<NGuiPlayMakerDelegates> customEventsKeys; // 0x28
	public List<string> customEventsValues; // 0x30
	private int[] _usage; // 0x38
	private UIInput _input; // 0x40
	private UIProgressBar _pBar; // 0x48
	private UIToggle _toggle; // 0x50

	// Methods

	// RVA: 0x13795D4 Offset: 0x13795D4 VA: 0x13795D4
	public void .ctor() { }

	// RVA: 0x13795DC Offset: 0x13795DC VA: 0x13795DC
	public int getUsage(NGuiPlayMakerDelegates fsmEventDelegate) { }

	// RVA: 0x137963C Offset: 0x137963C VA: 0x137963C
	private void OnEnable() { }

	// RVA: 0x1379C2C Offset: 0x1379C2C VA: 0x1379C2C
	public bool DoesTargetMissEventImplementation(PlayMakerFSM fsm, NGuiPlayMakerDelegates fsmEventDelegate) { }

	// RVA: 0x1379E18 Offset: 0x1379E18 VA: 0x1379E18
	public bool DoesTargetMissEventImplementation(PlayMakerFSM fsm, string fsmEvent) { }

	// RVA: 0x1379BB4 Offset: 0x1379BB4 VA: 0x1379BB4
	public bool DoesTargetImplementsEvent(PlayMakerFSM fsm, NGuiPlayMakerDelegates fsmEventDelegate) { }

	// RVA: 0x1379EEC Offset: 0x1379EEC VA: 0x1379EEC
	public bool DoesTargetImplementsEvent(PlayMakerFSM fsm, string fsmEvent) { }

	// RVA: 0x137A0C4 Offset: 0x137A0C4 VA: 0x137A0C4
	private void FireNGUIPlayMakerEvent(NGuiPlayMakerDelegates _event) { }

	// RVA: 0x137A204 Offset: 0x137A204 VA: 0x137A204
	private void OnClick() { }

	// RVA: 0x137A314 Offset: 0x137A314 VA: 0x137A314
	private void OnHover(bool isOver) { }

	// RVA: 0x137A4FC Offset: 0x137A4FC VA: 0x137A4FC
	private void OnPress(bool pressed) { }

	// RVA: 0x137A6E4 Offset: 0x137A6E4 VA: 0x137A6E4
	private void OnSelect(bool selected) { }

	// RVA: 0x137A810 Offset: 0x137A810 VA: 0x137A810
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x137A960 Offset: 0x137A960 VA: 0x137A960
	private void OnDrop(GameObject go) { }

	// RVA: 0x137AA88 Offset: 0x137AA88 VA: 0x137AA88
	private void OnTooltip(bool show) { }

	// RVA: 0x137ABB4 Offset: 0x137ABB4 VA: 0x137ABB4
	private void OnSubmitChange() { }

	// RVA: 0x137AD44 Offset: 0x137AD44 VA: 0x137AD44
	private void OnSliderChange(float value) { }

	// RVA: 0x137AEF4 Offset: 0x137AEF4 VA: 0x137AEF4
	private void OnSelectionChange(string item) { }

	// RVA: 0x137B014 Offset: 0x137B014 VA: 0x137B014
	private void OnChange() { }

	// RVA: 0x137B210 Offset: 0x137B210 VA: 0x137B210
	public void SetCurrentSelection() { }
}

// Namespace: 
public class NGuiPlayMakerProxy : MonoBehaviour // TypeDefIndex: 12244
{
	// Methods

	// RVA: 0x137B400 Offset: 0x137B400 VA: 0x137B400
	public void .ctor() { }

	// RVA: 0x137B408 Offset: 0x137B408 VA: 0x137B408
	private void Start() { }

	// RVA: 0x137B40C Offset: 0x137B40C VA: 0x137B40C
	private void Update() { }

	// RVA: 0x1379CB4 Offset: 0x1379CB4 VA: 0x1379CB4
	public static string GetFsmEventEnumValue(Enum value) { }
}

// Namespace: 
public enum NGuiPlayMakerDelegates // TypeDefIndex: 12245
{
	// Fields
	public int value__; // 0x0
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86CD8 Offset: 0xC86CD8 VA: 0xC86CD8
	public const NGuiPlayMakerDelegates OnClickEvent = 0;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86D10 Offset: 0xC86D10 VA: 0xC86D10
	public const NGuiPlayMakerDelegates OnHoverEvent = 1;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86D48 Offset: 0xC86D48 VA: 0xC86D48
	public const NGuiPlayMakerDelegates OnHoverEventEnter = 2;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86D80 Offset: 0xC86D80 VA: 0xC86D80
	public const NGuiPlayMakerDelegates OnHoverEventExit = 3;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86DB8 Offset: 0xC86DB8 VA: 0xC86DB8
	public const NGuiPlayMakerDelegates OnPressEvent = 4;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86DF0 Offset: 0xC86DF0 VA: 0xC86DF0
	public const NGuiPlayMakerDelegates OnPressEventUp = 5;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86E28 Offset: 0xC86E28 VA: 0xC86E28
	public const NGuiPlayMakerDelegates OnPressEventDown = 6;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86E60 Offset: 0xC86E60 VA: 0xC86E60
	public const NGuiPlayMakerDelegates OnSelectEvent = 7;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86E98 Offset: 0xC86E98 VA: 0xC86E98
	public const NGuiPlayMakerDelegates OnDragEvent = 8;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86ED0 Offset: 0xC86ED0 VA: 0xC86ED0
	public const NGuiPlayMakerDelegates OnDropEvent = 9;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86F08 Offset: 0xC86F08 VA: 0xC86F08
	public const NGuiPlayMakerDelegates OnSubmitEvent = 10;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86F40 Offset: 0xC86F40 VA: 0xC86F40
	public const NGuiPlayMakerDelegates OnSliderChangeEvent = 11;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86F78 Offset: 0xC86F78 VA: 0xC86F78
	public const NGuiPlayMakerDelegates OnSelectionChangeEvent = 12;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86FB0 Offset: 0xC86FB0 VA: 0xC86FB0
	public const NGuiPlayMakerDelegates OnTooltipEvent = 13;
	[PlayMakerUtils_FsmEvent] // RVA: 0xC86FE8 Offset: 0xC86FE8 VA: 0xC86FE8
	public const NGuiPlayMakerDelegates OnChangeEvent = 14;
}

// Namespace: 
public class PlayMakerUtils_FsmEvent : Attribute // TypeDefIndex: 12246
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; }

	// Methods

	// RVA: 0x177E528 Offset: 0x177E528 VA: 0x177E528
	public void .ctor(string value) { }

	// RVA: 0x177E554 Offset: 0x177E554 VA: 0x177E554
	public string get_Value() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D77C Offset: 0xC2D77C VA: 0xC2D77C
[TooltipAttribute] // RVA: 0xC2D77C Offset: 0xC2D77C VA: 0xC2D77C
public class NguiGetJoystickInput : FsmStateAction // TypeDefIndex: 12247
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC87020 Offset: 0xC87020 VA: 0xC87020
	[CheckForComponentAttribute] // RVA: 0xC87020 Offset: 0xC87020 VA: 0xC87020
	[TooltipAttribute] // RVA: 0xC87020 Offset: 0xC87020 VA: 0xC87020
	public FsmOwnerDefault gameObject; // 0x50
	[UIHintAttribute] // RVA: 0xC870B8 Offset: 0xC870B8 VA: 0xC870B8
	[TooltipAttribute] // RVA: 0xC870B8 Offset: 0xC870B8 VA: 0xC870B8
	public FsmVector2 input; // 0x58
	[UIHintAttribute] // RVA: 0xC87108 Offset: 0xC87108 VA: 0xC87108
	[TooltipAttribute] // RVA: 0xC87108 Offset: 0xC87108 VA: 0xC87108
	public FsmFloat angle; // 0x60
	[UIHintAttribute] // RVA: 0xC87158 Offset: 0xC87158 VA: 0xC87158
	[TooltipAttribute] // RVA: 0xC87158 Offset: 0xC87158 VA: 0xC87158
	public FsmVector3 inputAndAngle; // 0x68
	[TooltipAttribute] // RVA: 0xC871A8 Offset: 0xC871A8 VA: 0xC871A8
	public bool everyFrame; // 0x70
	private UIJoystick _joystick; // 0x78

	// Methods

	// RVA: 0x1B846F4 Offset: 0x1B846F4 VA: 0x1B846F4
	public void .ctor() { }

	// RVA: 0x1B846FC Offset: 0x1B846FC VA: 0x1B846FC Slot: 28
	public override void Reset() { }

	// RVA: 0x1B84710 Offset: 0x1B84710 VA: 0x1B84710 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1B84990 Offset: 0x1B84990 VA: 0x1B84990 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x1B8483C Offset: 0x1B8483C VA: 0x1B8483C
	private void doGetPadInputs() { }
}

// Namespace: 
[AddComponentMenu] // RVA: 0xC2D7DC Offset: 0xC2D7DC VA: 0xC2D7DC
public class UIJoystick : MonoBehaviour // TypeDefIndex: 12248
{
	// Fields
	private Transform target; // 0x18
	public Vector3 scale; // 0x20
	public Vector2 range; // 0x2C
	public float deadZone; // 0x34
	public bool circularPadConstraint; // 0x38
	public float springBackSpeed; // 0x3C
	public Vector2 padPosition; // 0x40
	public float padAngle; // 0x48
	public Vector3 padPositionAndAngle; // 0x4C
	private Vector3 mStartPos; // 0x58
	private Vector3 mStartLocalPos; // 0x64
	private Plane mPlane; // 0x70
	private Vector3 mLastPos; // 0x80
	private bool mPressed; // 0x8C
	private Vector3 totalOffset; // 0x90
	private Vector3 startOffset; // 0x9C
	private Vector3 totalWorldOffset; // 0xA8
	private bool mDragStarted; // 0xB4
	private Vector2 mDragStartOffset; // 0xB8
	private bool started; // 0xC0

	// Methods

	// RVA: 0x1BCF2EC Offset: 0x1BCF2EC VA: 0x1BCF2EC
	public void .ctor() { }

	// RVA: 0x1BCF3A4 Offset: 0x1BCF3A4 VA: 0x1BCF3A4
	private void Start() { }

	// RVA: 0x1BCF3CC Offset: 0x1BCF3CC VA: 0x1BCF3CC
	private void OnPress(bool pressed) { }

	// RVA: 0x1BCF668 Offset: 0x1BCF668 VA: 0x1BCF668
	private void Update() { }

	// RVA: 0x1BCF7D0 Offset: 0x1BCF7D0 VA: 0x1BCF7D0
	private static bool Vector3AlmostEquals(Vector3 target, Vector3 second, float sqrMagniturePrecision) { }

	// RVA: 0x1BCF8B4 Offset: 0x1BCF8B4 VA: 0x1BCF8B4
	private void OnDrag(Vector2 delta) { }

	// RVA: 0x1BCFC90 Offset: 0x1BCFC90 VA: 0x1BCFC90
	private void LateUpdate() { }
}

// Namespace: HutongGames.PlayMaker
public static class ActionHelpers // TypeDefIndex: 12249
{
	// Fields
	public static RaycastHit mousePickInfo; // 0x0
	private static float mousePickRaycastTime; // 0x2C
	private static float mousePickDistanceUsed; // 0x30
	private static int mousePickLayerMaskUsed; // 0x34

	// Properties
	public static Texture2D WhiteTexture { get; }

	// Methods

	// RVA: 0x1BBA774 Offset: 0x1BBA774 VA: 0x1BBA774
	public static Texture2D get_WhiteTexture() { }

	// RVA: 0x1BBA77C Offset: 0x1BBA77C VA: 0x1BBA77C
	public static Color BlendColor(ColorBlendMode blendMode, Color c1, Color c2) { }

	// RVA: 0x1BBA954 Offset: 0x1BBA954 VA: 0x1BBA954
	public static bool IsVisible(GameObject go) { }

	// RVA: 0x1BBAA40 Offset: 0x1BBAA40 VA: 0x1BBAA40
	public static GameObject GetOwnerDefault(FsmStateAction action, FsmOwnerDefault ownerDefault) { }

	// RVA: 0x1BBAA8C Offset: 0x1BBAA8C VA: 0x1BBAA8C
	public static PlayMakerFSM GetGameObjectFsm(GameObject go, string fsmName) { }

	// RVA: 0x1BBABF8 Offset: 0x1BBABF8 VA: 0x1BBABF8
	public static int GetRandomWeightedIndex(FsmFloat[] weights) { }

	// RVA: 0x1BBAD48 Offset: 0x1BBAD48 VA: 0x1BBAD48
	public static void AddAnimationClip(GameObject go, AnimationClip animClip) { }

	// RVA: 0x1BBAE64 Offset: 0x1BBAE64 VA: 0x1BBAE64
	public static bool HasAnimationFinished(AnimationState anim, float prevTime, float currentTime) { }

	// RVA: 0x1BBAF8C Offset: 0x1BBAF8C VA: 0x1BBAF8C
	public static Vector3 GetPosition(FsmGameObject fsmGameObject, FsmVector3 fsmVector3) { }

	// RVA: 0x1BBB128 Offset: 0x1BBB128 VA: 0x1BBB128
	public static Quaternion GetTargetRotation(RotationOptions option, Transform owner, Transform target, Vector3 rotation) { }

	// RVA: 0x1BBB4A8 Offset: 0x1BBB4A8 VA: 0x1BBB4A8
	public static bool GetTargetRotation(RotationOptions option, Transform owner, FsmVector3 rotation, FsmGameObject target, out Quaternion targetRotation) { }

	// RVA: 0x1BBB640 Offset: 0x1BBB640 VA: 0x1BBB640
	private static bool CanEditTargetRotation(RotationOptions option, NamedVariable rotation, FsmGameObject target) { }

	// RVA: 0x1BBB764 Offset: 0x1BBB764 VA: 0x1BBB764
	public static Vector3 GetTargetScale(ScaleOptions option, Transform owner, Transform target, Vector3 scale) { }

	// RVA: 0x1BBB9E8 Offset: 0x1BBB9E8 VA: 0x1BBB9E8
	public static bool GetTargetPosition(PositionOptions option, Transform owner, FsmVector3 position, FsmGameObject target, out Vector3 targetPosition) { }

	// RVA: 0x1BBBB78 Offset: 0x1BBBB78 VA: 0x1BBBB78
	private static bool IsValidTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target) { }

	// RVA: 0x1BBBF90 Offset: 0x1BBBF90 VA: 0x1BBBF90
	public static bool CanEditTargetPosition(PositionOptions option, NamedVariable position, FsmGameObject target) { }

	// RVA: 0x1BBBC9C Offset: 0x1BBBC9C VA: 0x1BBBC9C
	public static Vector3 GetTargetPosition(PositionOptions option, Transform owner, Transform target, Vector3 position) { }

	// RVA: 0x1BBC0B4 Offset: 0x1BBC0B4 VA: 0x1BBC0B4
	public static bool IsMouseOver(GameObject gameObject, float distance, int layerMask) { }

	// RVA: 0x1BBC2D4 Offset: 0x1BBC2D4 VA: 0x1BBC2D4
	public static RaycastHit MousePick(float distance, int layerMask) { }

	// RVA: 0x1BBC190 Offset: 0x1BBC190 VA: 0x1BBC190
	public static GameObject MouseOver(float distance, int layerMask) { }

	// RVA: 0x1BBC3A8 Offset: 0x1BBC3A8 VA: 0x1BBC3A8
	private static void DoMousePick(float distance, int layerMask) { }

	// RVA: 0x1BBC4F0 Offset: 0x1BBC4F0 VA: 0x1BBC4F0
	public static int LayerArrayToLayerMask(FsmInt[] layers, bool invert) { }

	// RVA: 0x1BBC5A8 Offset: 0x1BBC5A8 VA: 0x1BBC5A8
	public static bool IsLoopingWrapMode(WrapMode wrapMode) { }

	// RVA: 0x1BBC5C0 Offset: 0x1BBC5C0 VA: 0x1BBC5C0
	public static string CheckRayDistance(float rayDistance) { }

	// RVA: 0x1BBC648 Offset: 0x1BBC648 VA: 0x1BBC648
	public static string CheckForValidEvent(FsmState state, string eventName) { }

	// RVA: 0x1BBC89C Offset: 0x1BBC89C VA: 0x1BBC89C
	public static string CheckPhysicsSetup(FsmOwnerDefault ownerDefault) { }

	// RVA: 0x1BBCADC Offset: 0x1BBCADC VA: 0x1BBCADC
	public static string CheckOwnerPhysicsSetup(GameObject gameObject) { }

	// RVA: 0x1BBC93C Offset: 0x1BBC93C VA: 0x1BBC93C
	public static string CheckPhysicsSetup(GameObject gameObject) { }

	// RVA: 0x1BBCAE0 Offset: 0x1BBCAE0 VA: 0x1BBCAE0
	public static string CheckPhysics2dSetup(FsmOwnerDefault ownerDefault) { }

	// RVA: 0x1BBCD20 Offset: 0x1BBCD20 VA: 0x1BBCD20
	public static string CheckOwnerPhysics2dSetup(GameObject gameObject) { }

	// RVA: 0x1BBCB80 Offset: 0x1BBCB80 VA: 0x1BBCB80
	public static string CheckPhysics2dSetup(GameObject gameObject) { }

	// RVA: 0x1BBCD24 Offset: 0x1BBCD24 VA: 0x1BBCD24
	public static void DebugLog(Fsm fsm, LogLevel logLevel, string text, bool sendToUnityLog = False) { }

	// RVA: 0x1BBD08C Offset: 0x1BBD08C VA: 0x1BBD08C
	public static void LogError(string text) { }

	// RVA: 0x1BBD100 Offset: 0x1BBD100 VA: 0x1BBD100
	public static void LogWarning(string text) { }

	// RVA: 0x1BBCE68 Offset: 0x1BBCE68 VA: 0x1BBCE68
	public static string FormatUnityLogString(string text) { }

	// RVA: 0x1BBD174 Offset: 0x1BBD174 VA: 0x1BBD174
	public static string GetValueLabel(INamedVariable variable) { }

	// RVA: 0x1BBD1DC Offset: 0x1BBD1DC VA: 0x1BBD1DC
	public static string GetValueLabel(Fsm fsm, FsmOwnerDefault ownerDefault) { }

	// RVA: 0x1BBD260 Offset: 0x1BBD260 VA: 0x1BBD260
	public static string AutoName(FsmStateAction action, INamedVariable[] exposedFields) { }

	// RVA: 0x1BBD2B4 Offset: 0x1BBD2B4 VA: 0x1BBD2B4
	public static string AutoName(string actionName, INamedVariable[] exposedFields) { }

	// RVA: 0x1BBD3C4 Offset: 0x1BBD3C4 VA: 0x1BBD3C4
	public static string AutoNameRange(FsmStateAction action, NamedVariable min, NamedVariable max) { }

	// RVA: 0x1BBD42C Offset: 0x1BBD42C VA: 0x1BBD42C
	public static string AutoNameRange(string actionName, NamedVariable min, NamedVariable max) { }

	// RVA: 0x1BBD648 Offset: 0x1BBD648 VA: 0x1BBD648
	public static string AutoNameSetVar(FsmStateAction action, NamedVariable var, NamedVariable value) { }

	// RVA: 0x1BBD6B0 Offset: 0x1BBD6B0 VA: 0x1BBD6B0
	public static string AutoNameSetVar(string actionName, NamedVariable var, NamedVariable value) { }

	// RVA: 0x1BBD8CC Offset: 0x1BBD8CC VA: 0x1BBD8CC
	public static string AutoNameConvert(FsmStateAction action, NamedVariable fromVariable, NamedVariable toVariable) { }

	// RVA: 0x1BBD934 Offset: 0x1BBD934 VA: 0x1BBD934
	public static string AutoNameConvert(string actionName, NamedVariable fromVariable, NamedVariable toVariable) { }

	// RVA: 0x1BBDB98 Offset: 0x1BBDB98 VA: 0x1BBDB98
	public static string AutoNameGetProperty(FsmStateAction action, NamedVariable property, NamedVariable store) { }

	// RVA: 0x1BBDC00 Offset: 0x1BBDC00 VA: 0x1BBDC00
	public static string AutoNameGetProperty(string actionName, NamedVariable property, NamedVariable store) { }

	[ObsoleteAttribute] // RVA: 0xCD7A58 Offset: 0xCD7A58 VA: 0xCD7A58
	// RVA: 0x1BBDE1C Offset: 0x1BBDE1C VA: 0x1BBDE1C
	public static void RuntimeError(FsmStateAction action, string error) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D814 Offset: 0xC2D814 VA: 0xC2D814
[TooltipAttribute] // RVA: 0xC2D814 Offset: 0xC2D814 VA: 0xC2D814
public class ActivateGameObject : FsmStateAction // TypeDefIndex: 12250
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC871E0 Offset: 0xC871E0 VA: 0xC871E0
	[TooltipAttribute] // RVA: 0xC871E0 Offset: 0xC871E0 VA: 0xC871E0
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC8722C Offset: 0xC8722C VA: 0xC8722C
	[TooltipAttribute] // RVA: 0xC8722C Offset: 0xC8722C VA: 0xC8722C
	public FsmBool activate; // 0x58
	[TooltipAttribute] // RVA: 0xC87278 Offset: 0xC87278 VA: 0xC87278
	public FsmBool recursive; // 0x60
	[TooltipAttribute] // RVA: 0xC872B0 Offset: 0xC872B0 VA: 0xC872B0
	public bool resetOnExit; // 0x68
	[TooltipAttribute] // RVA: 0xC872E8 Offset: 0xC872E8 VA: 0xC872E8
	public bool everyFrame; // 0x69
	private GameObject activatedGameObject; // 0x70

	// Methods

	// RVA: 0x1D26D40 Offset: 0x1D26D40 VA: 0x1D26D40
	public void .ctor() { }

	// RVA: 0x1D26D48 Offset: 0x1D26D48 VA: 0x1D26D48 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D26D8C Offset: 0x1D26D8C VA: 0x1D26D8C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D26EF0 Offset: 0x1D26EF0 VA: 0x1D26EF0 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0x1D26EF4 Offset: 0x1D26EF4 VA: 0x1D26EF4 Slot: 37
	public override void OnExit() { }

	// RVA: 0x1D26DC8 Offset: 0x1D26DC8 VA: 0x1D26DC8
	private void DoActivateGameObject() { }

	// RVA: 0x1D27010 Offset: 0x1D27010 VA: 0x1D27010
	public void SetActiveRecursively(GameObject go, bool state) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D864 Offset: 0xC2D864 VA: 0xC2D864
[TooltipAttribute] // RVA: 0xC2D864 Offset: 0xC2D864 VA: 0xC2D864
public class AddAnimationClip : FsmStateAction // TypeDefIndex: 12251
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC87320 Offset: 0xC87320 VA: 0xC87320
	[CheckForComponentAttribute] // RVA: 0xC87320 Offset: 0xC87320 VA: 0xC87320
	[TooltipAttribute] // RVA: 0xC87320 Offset: 0xC87320 VA: 0xC87320
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC873B8 Offset: 0xC873B8 VA: 0xC873B8
	[ObjectTypeAttribute] // RVA: 0xC873B8 Offset: 0xC873B8 VA: 0xC873B8
	[TooltipAttribute] // RVA: 0xC873B8 Offset: 0xC873B8 VA: 0xC873B8
	public FsmObject animationClip; // 0x58
	[RequiredFieldAttribute] // RVA: 0xC87450 Offset: 0xC87450 VA: 0xC87450
	[TooltipAttribute] // RVA: 0xC87450 Offset: 0xC87450 VA: 0xC87450
	public FsmString animationName; // 0x60
	[TooltipAttribute] // RVA: 0xC8749C Offset: 0xC8749C VA: 0xC8749C
	public FsmInt firstFrame; // 0x68
	[TooltipAttribute] // RVA: 0xC874D4 Offset: 0xC874D4 VA: 0xC874D4
	public FsmInt lastFrame; // 0x70
	[TooltipAttribute] // RVA: 0xC8750C Offset: 0xC8750C VA: 0xC8750C
	public FsmBool addLoopFrame; // 0x78

	// Methods

	// RVA: 0x1D273DC Offset: 0x1D273DC VA: 0x1D273DC
	public void .ctor() { }

	// RVA: 0x1D273E4 Offset: 0x1D273E4 VA: 0x1D273E4 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D27490 Offset: 0x1D27490 VA: 0x1D27490 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D274B8 Offset: 0x1D274B8 VA: 0x1D274B8
	private void DoAddAnimationClip() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D8B4 Offset: 0xC2D8B4 VA: 0xC2D8B4
[TooltipAttribute] // RVA: 0xC2D8B4 Offset: 0xC2D8B4 VA: 0xC2D8B4
public class AddComponent : FsmStateAction // TypeDefIndex: 12252
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC87544 Offset: 0xC87544 VA: 0xC87544
	[TooltipAttribute] // RVA: 0xC87544 Offset: 0xC87544 VA: 0xC87544
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC87590 Offset: 0xC87590 VA: 0xC87590
	[UIHintAttribute] // RVA: 0xC87590 Offset: 0xC87590 VA: 0xC87590
	[TitleAttribute] // RVA: 0xC87590 Offset: 0xC87590 VA: 0xC87590
	[TooltipAttribute] // RVA: 0xC87590 Offset: 0xC87590 VA: 0xC87590
	public FsmString component; // 0x58
	[UIHintAttribute] // RVA: 0xC87614 Offset: 0xC87614 VA: 0xC87614
	[ObjectTypeAttribute] // RVA: 0xC87614 Offset: 0xC87614 VA: 0xC87614
	[TooltipAttribute] // RVA: 0xC87614 Offset: 0xC87614 VA: 0xC87614
	public FsmObject storeComponent; // 0x60
	[TooltipAttribute] // RVA: 0xC876B0 Offset: 0xC876B0 VA: 0xC876B0
	public FsmBool removeOnExit; // 0x68
	private Component addedComponent; // 0x70

	// Methods

	// RVA: 0x1D2774C Offset: 0x1D2774C VA: 0x1D2774C
	public void .ctor() { }

	// RVA: 0x1D27754 Offset: 0x1D27754 VA: 0x1D27754 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D27760 Offset: 0x1D27760 VA: 0x1D27760 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D27978 Offset: 0x1D27978 VA: 0x1D27978 Slot: 37
	public override void OnExit() { }

	// RVA: 0x1D27788 Offset: 0x1D27788 VA: 0x1D27788
	private void DoAddComponent() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D904 Offset: 0xC2D904 VA: 0xC2D904
[TooltipAttribute] // RVA: 0xC2D904 Offset: 0xC2D904 VA: 0xC2D904
public class AddExplosionForce : ComponentAction<Rigidbody> // TypeDefIndex: 12253
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC876E8 Offset: 0xC876E8 VA: 0xC876E8
	[CheckForComponentAttribute] // RVA: 0xC876E8 Offset: 0xC876E8 VA: 0xC876E8
	[TooltipAttribute] // RVA: 0xC876E8 Offset: 0xC876E8 VA: 0xC876E8
	public FsmOwnerDefault gameObject; // 0x60
	[RequiredFieldAttribute] // RVA: 0xC87780 Offset: 0xC87780 VA: 0xC87780
	[TooltipAttribute] // RVA: 0xC87780 Offset: 0xC87780 VA: 0xC87780
	public FsmVector3 center; // 0x68
	[RequiredFieldAttribute] // RVA: 0xC877CC Offset: 0xC877CC VA: 0xC877CC
	[TooltipAttribute] // RVA: 0xC877CC Offset: 0xC877CC VA: 0xC877CC
	public FsmFloat force; // 0x70
	[RequiredFieldAttribute] // RVA: 0xC87818 Offset: 0xC87818 VA: 0xC87818
	[TooltipAttribute] // RVA: 0xC87818 Offset: 0xC87818 VA: 0xC87818
	public FsmFloat radius; // 0x78
	[TooltipAttribute] // RVA: 0xC87864 Offset: 0xC87864 VA: 0xC87864
	public FsmFloat upwardsModifier; // 0x80
	[TooltipAttribute] // RVA: 0xC8789C Offset: 0xC8789C VA: 0xC8789C
	public ForceMode forceMode; // 0x88
	[TooltipAttribute] // RVA: 0xC878D4 Offset: 0xC878D4 VA: 0xC878D4
	public bool everyFrame; // 0x8C

	// Methods

	// RVA: 0x1D27A4C Offset: 0x1D27A4C VA: 0x1D27A4C
	public void .ctor() { }

	// RVA: 0x1D27A9C Offset: 0x1D27A9C VA: 0x1D27A9C Slot: 28
	public override void Reset() { }

	// RVA: 0x1D27B34 Offset: 0x1D27B34 VA: 0x1D27B34 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x1D27B6C Offset: 0x1D27B6C VA: 0x1D27B6C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D27D80 Offset: 0x1D27D80 VA: 0x1D27D80 Slot: 33
	public override void OnFixedUpdate() { }

	// RVA: 0x1D27BA8 Offset: 0x1D27BA8 VA: 0x1D27BA8
	private void DoAddExplosionForce() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D954 Offset: 0xC2D954 VA: 0xC2D954
[TooltipAttribute] // RVA: 0xC2D954 Offset: 0xC2D954 VA: 0xC2D954
public class AddForce : ComponentAction<Rigidbody> // TypeDefIndex: 12254
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC8790C Offset: 0xC8790C VA: 0xC8790C
	[CheckForComponentAttribute] // RVA: 0xC8790C Offset: 0xC8790C VA: 0xC8790C
	[TooltipAttribute] // RVA: 0xC8790C Offset: 0xC8790C VA: 0xC8790C
	public FsmOwnerDefault gameObject; // 0x60
	[UIHintAttribute] // RVA: 0xC879A4 Offset: 0xC879A4 VA: 0xC879A4
	[TooltipAttribute] // RVA: 0xC879A4 Offset: 0xC879A4 VA: 0xC879A4
	public FsmVector3 atPosition; // 0x68
	[UIHintAttribute] // RVA: 0xC879F4 Offset: 0xC879F4 VA: 0xC879F4
	[TooltipAttribute] // RVA: 0xC879F4 Offset: 0xC879F4 VA: 0xC879F4
	public FsmVector3 vector; // 0x70
	[TooltipAttribute] // RVA: 0xC87A44 Offset: 0xC87A44 VA: 0xC87A44
	public FsmFloat x; // 0x78
	[TooltipAttribute] // RVA: 0xC87A7C Offset: 0xC87A7C VA: 0xC87A7C
	public FsmFloat y; // 0x80
	[TooltipAttribute] // RVA: 0xC87AB4 Offset: 0xC87AB4 VA: 0xC87AB4
	public FsmFloat z; // 0x88
	[TooltipAttribute] // RVA: 0xC87AEC Offset: 0xC87AEC VA: 0xC87AEC
	public Space space; // 0x90
	[TooltipAttribute] // RVA: 0xC87B24 Offset: 0xC87B24 VA: 0xC87B24
	public ForceMode forceMode; // 0x94
	[TooltipAttribute] // RVA: 0xC87B5C Offset: 0xC87B5C VA: 0xC87B5C
	public bool everyFrame; // 0x98

	// Methods

	// RVA: 0x1D27D84 Offset: 0x1D27D84 VA: 0x1D27D84
	public void .ctor() { }

	// RVA: 0x1D27DD4 Offset: 0x1D27DD4 VA: 0x1D27DD4 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D27F04 Offset: 0x1D27F04 VA: 0x1D27F04 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x1D27F3C Offset: 0x1D27F3C VA: 0x1D27F3C Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D2828C Offset: 0x1D2828C VA: 0x1D2828C Slot: 33
	public override void OnFixedUpdate() { }

	// RVA: 0x1D27F78 Offset: 0x1D27F78 VA: 0x1D27F78
	private void DoAddForce() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D9A4 Offset: 0xC2D9A4 VA: 0xC2D9A4
[TooltipAttribute] // RVA: 0xC2D9A4 Offset: 0xC2D9A4 VA: 0xC2D9A4
public class AddMixingTransform : BaseAnimationAction // TypeDefIndex: 12255
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC87B94 Offset: 0xC87B94 VA: 0xC87B94
	[CheckForComponentAttribute] // RVA: 0xC87B94 Offset: 0xC87B94 VA: 0xC87B94
	[TooltipAttribute] // RVA: 0xC87B94 Offset: 0xC87B94 VA: 0xC87B94
	public FsmOwnerDefault gameObject; // 0x60
	[RequiredFieldAttribute] // RVA: 0xC87C2C Offset: 0xC87C2C VA: 0xC87C2C
	[TooltipAttribute] // RVA: 0xC87C2C Offset: 0xC87C2C VA: 0xC87C2C
	public FsmString animationName; // 0x68
	[RequiredFieldAttribute] // RVA: 0xC87C78 Offset: 0xC87C78 VA: 0xC87C78
	[TooltipAttribute] // RVA: 0xC87C78 Offset: 0xC87C78 VA: 0xC87C78
	public FsmString transform; // 0x70
	[TooltipAttribute] // RVA: 0xC87CC4 Offset: 0xC87CC4 VA: 0xC87CC4
	public FsmBool recursive; // 0x78

	// Methods

	// RVA: 0x1D28770 Offset: 0x1D28770 VA: 0x1D28770
	public void .ctor() { }

	// RVA: 0x1D287C4 Offset: 0x1D287C4 VA: 0x1D287C4 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D28868 Offset: 0x1D28868 VA: 0x1D28868 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D28890 Offset: 0x1D28890 VA: 0x1D28890
	private void DoAddMixingTransform() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2D9F4 Offset: 0xC2D9F4 VA: 0xC2D9F4
[TooltipAttribute] // RVA: 0xC2D9F4 Offset: 0xC2D9F4 VA: 0xC2D9F4
public class AddScript : FsmStateAction // TypeDefIndex: 12256
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC87CFC Offset: 0xC87CFC VA: 0xC87CFC
	[TooltipAttribute] // RVA: 0xC87CFC Offset: 0xC87CFC VA: 0xC87CFC
	public FsmOwnerDefault gameObject; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC87D48 Offset: 0xC87D48 VA: 0xC87D48
	[TooltipAttribute] // RVA: 0xC87D48 Offset: 0xC87D48 VA: 0xC87D48
	[UIHintAttribute] // RVA: 0xC87D48 Offset: 0xC87D48 VA: 0xC87D48
	public FsmString script; // 0x58
	[TooltipAttribute] // RVA: 0xC87DA8 Offset: 0xC87DA8 VA: 0xC87DA8
	public FsmBool removeOnExit; // 0x60
	private Component addedComponent; // 0x68

	// Methods

	// RVA: 0x1D28E54 Offset: 0x1D28E54 VA: 0x1D28E54
	public void .ctor() { }

	// RVA: 0x1D28E5C Offset: 0x1D28E5C VA: 0x1D28E5C Slot: 28
	public override void Reset() { }

	// RVA: 0x1D28E64 Offset: 0x1D28E64 VA: 0x1D28E64 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D29068 Offset: 0x1D29068 VA: 0x1D29068 Slot: 37
	public override void OnExit() { }

	// RVA: 0x1D28EF8 Offset: 0x1D28EF8 VA: 0x1D28EF8
	private void DoAddComponent(GameObject go) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2DA44 Offset: 0xC2DA44 VA: 0xC2DA44
[TooltipAttribute] // RVA: 0xC2DA44 Offset: 0xC2DA44 VA: 0xC2DA44
public class AddTorque : ComponentAction<Rigidbody> // TypeDefIndex: 12257
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC87DE0 Offset: 0xC87DE0 VA: 0xC87DE0
	[CheckForComponentAttribute] // RVA: 0xC87DE0 Offset: 0xC87DE0 VA: 0xC87DE0
	[TooltipAttribute] // RVA: 0xC87DE0 Offset: 0xC87DE0 VA: 0xC87DE0
	public FsmOwnerDefault gameObject; // 0x60
	[UIHintAttribute] // RVA: 0xC87E78 Offset: 0xC87E78 VA: 0xC87E78
	[TooltipAttribute] // RVA: 0xC87E78 Offset: 0xC87E78 VA: 0xC87E78
	public FsmVector3 vector; // 0x68
	[TooltipAttribute] // RVA: 0xC87EC8 Offset: 0xC87EC8 VA: 0xC87EC8
	public FsmFloat x; // 0x70
	[TooltipAttribute] // RVA: 0xC87F00 Offset: 0xC87F00 VA: 0xC87F00
	public FsmFloat y; // 0x78
	[TooltipAttribute] // RVA: 0xC87F38 Offset: 0xC87F38 VA: 0xC87F38
	public FsmFloat z; // 0x80
	[TooltipAttribute] // RVA: 0xC87F70 Offset: 0xC87F70 VA: 0xC87F70
	public Space space; // 0x88
	[TooltipAttribute] // RVA: 0xC87FA8 Offset: 0xC87FA8 VA: 0xC87FA8
	public ForceMode forceMode; // 0x8C
	[TooltipAttribute] // RVA: 0xC87FE0 Offset: 0xC87FE0 VA: 0xC87FE0
	public bool everyFrame; // 0x90

	// Methods

	// RVA: 0x1D2913C Offset: 0x1D2913C VA: 0x1D2913C
	public void .ctor() { }

	// RVA: 0x1D2918C Offset: 0x1D2918C VA: 0x1D2918C Slot: 28
	public override void Reset() { }

	// RVA: 0x1D29280 Offset: 0x1D29280 VA: 0x1D29280 Slot: 29
	public override void OnPreprocess() { }

	// RVA: 0x1D292B8 Offset: 0x1D292B8 VA: 0x1D292B8 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D29584 Offset: 0x1D29584 VA: 0x1D29584 Slot: 33
	public override void OnFixedUpdate() { }

	// RVA: 0x1D292F4 Offset: 0x1D292F4 VA: 0x1D292F4
	private void DoAddTorque() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2DA94 Offset: 0xC2DA94 VA: 0xC2DA94
[TooltipAttribute] // RVA: 0xC2DA94 Offset: 0xC2DA94 VA: 0xC2DA94
public class AnimateFloat : FsmStateAction // TypeDefIndex: 12258
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC88018 Offset: 0xC88018 VA: 0xC88018
	[TooltipAttribute] // RVA: 0xC88018 Offset: 0xC88018 VA: 0xC88018
	public FsmAnimationCurve animCurve; // 0x50
	[RequiredFieldAttribute] // RVA: 0xC88064 Offset: 0xC88064 VA: 0xC88064
	[UIHintAttribute] // RVA: 0xC88064 Offset: 0xC88064 VA: 0xC88064
	[TooltipAttribute] // RVA: 0xC88064 Offset: 0xC88064 VA: 0xC88064
	public FsmFloat floatVariable; // 0x58
	[TooltipAttribute] // RVA: 0xC880C4 Offset: 0xC880C4 VA: 0xC880C4
	public FsmEvent finishEvent; // 0x60
	[TooltipAttribute] // RVA: 0xC880FC Offset: 0xC880FC VA: 0xC880FC
	public bool realTime; // 0x68
	private float startTime; // 0x6C
	private float currentTime; // 0x70
	private float endTime; // 0x74
	private bool looping; // 0x78

	// Methods

	// RVA: 0x1D2B038 Offset: 0x1D2B038 VA: 0x1D2B038
	public void .ctor() { }

	// RVA: 0x1D2B040 Offset: 0x1D2B040 VA: 0x1D2B040 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D2B050 Offset: 0x1D2B050 VA: 0x1D2B050 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D2B208 Offset: 0x1D2B208 VA: 0x1D2B208 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2DAE4 Offset: 0xC2DAE4 VA: 0xC2DAE4
[TooltipAttribute] // RVA: 0xC2DAE4 Offset: 0xC2DAE4 VA: 0xC2DAE4
public class AnimateColor : AnimateFsmAction // TypeDefIndex: 12259
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC88134 Offset: 0xC88134 VA: 0xC88134
	[UIHintAttribute] // RVA: 0xC88134 Offset: 0xC88134 VA: 0xC88134
	public FsmColor colorVariable; // 0xD8
	[RequiredFieldAttribute] // RVA: 0xC88170 Offset: 0xC88170 VA: 0xC88170
	public FsmAnimationCurve curveR; // 0xE0
	[TooltipAttribute] // RVA: 0xC88180 Offset: 0xC88180 VA: 0xC88180
	public AnimateFsmAction.Calculation calculationR; // 0xE8
	[RequiredFieldAttribute] // RVA: 0xC881B8 Offset: 0xC881B8 VA: 0xC881B8
	public FsmAnimationCurve curveG; // 0xF0
	[TooltipAttribute] // RVA: 0xC881C8 Offset: 0xC881C8 VA: 0xC881C8
	public AnimateFsmAction.Calculation calculationG; // 0xF8
	[RequiredFieldAttribute] // RVA: 0xC88200 Offset: 0xC88200 VA: 0xC88200
	public FsmAnimationCurve curveB; // 0x100
	[TooltipAttribute] // RVA: 0xC88210 Offset: 0xC88210 VA: 0xC88210
	public AnimateFsmAction.Calculation calculationB; // 0x108
	[RequiredFieldAttribute] // RVA: 0xC88248 Offset: 0xC88248 VA: 0xC88248
	public FsmAnimationCurve curveA; // 0x110
	[TooltipAttribute] // RVA: 0xC88258 Offset: 0xC88258 VA: 0xC88258
	public AnimateFsmAction.Calculation calculationA; // 0x118
	private bool finishInNextStep; // 0x11C

	// Methods

	// RVA: 0x1D29CD4 Offset: 0x1D29CD4 VA: 0x1D29CD4
	public void .ctor() { }

	// RVA: 0x1D29CE4 Offset: 0x1D29CE4 VA: 0x1D29CE4 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D29F10 Offset: 0x1D29F10 VA: 0x1D29F10 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D2ADF8 Offset: 0x1D2ADF8 VA: 0x1D2ADF8
	private void UpdateVariableValue() { }

	// RVA: 0x1D2AF50 Offset: 0x1D2AF50 VA: 0x1D2AF50 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC2DB34 Offset: 0xC2DB34 VA: 0xC2DB34
[TooltipAttribute] // RVA: 0xC2DB34 Offset: 0xC2DB34 VA: 0xC2DB34
public class AnimateFloatV2 : AnimateFsmAction // TypeDefIndex: 12260
{
	// Fields
	[RequiredFieldAttribute] // RVA: 0xC88290 Offset: 0xC88290 VA: 0xC88290
	[UIHintAttribute] // RVA: 0xC88290 Offset: 0xC88290 VA: 0xC88290
	public FsmFloat floatVariable; // 0xD8
	[RequiredFieldAttribute] // RVA: 0xC882CC Offset: 0xC882CC VA: 0xC882CC
	public FsmAnimationCurve animCurve; // 0xE0
	[TooltipAttribute] // RVA: 0xC882DC Offset: 0xC882DC VA: 0xC882DC
	public AnimateFsmAction.Calculation calculation; // 0xE8
	private bool finishInNextStep; // 0xEC

	// Methods

	// RVA: 0x1D2B2EC Offset: 0x1D2B2EC VA: 0x1D2B2EC
	public void .ctor() { }

	// RVA: 0x1D2B2F4 Offset: 0x1D2B2F4 VA: 0x1D2B2F4 Slot: 28
	public override void Reset() { }

	// RVA: 0x1D2B378 Offset: 0x1D2B378 VA: 0x1D2B378 Slot: 32
	public override void OnEnter() { }

	// RVA: 0x1D2B53C Offset: 0x1D2B53C VA: 0x1D2B53C Slot: 37
	public override void OnExit() { }

	// RVA: 0x1D2B540 Offset: 0x1D2B540 VA: 0x1D2B540 Slot: 34
	public override void OnUpdate() { }
}

// Namespace: HutongGames.PlayMaker.Actions
public abstract class AnimateFsmAction : FsmStateAction // TypeDefIndex: 12261
{
	// Fields
	[TooltipAttribute] // RVA: 0xC88314 Offset: 0xC88314 VA: 0xC88314
	public FsmFloat time; // 0x50
	[TooltipAttribute] // RVA: 0xC8834C Offset: 0xC8834C VA: 0xC8834C
	public FsmFloat speed; // 0x58
	[TooltipAttribute] // RVA: 0xC88384 Offset: 0xC88384 VA: 0xC88384
	public FsmFloat delay; // 0x60
	[TooltipAttribute] // RVA: 0xC883BC Offset: 0xC883BC VA: 0xC883BC
	public FsmBool ignoreCurveOffset; // 0x68
	[TooltipAttribute] // RVA: 0xC883F4 Offset: 0xC883F4 VA: 0xC883F4
	public FsmEvent finishEvent; // 0x70
	[TooltipAttribute] // RVA: 0xC8842C Offset: 0xC8842C VA: 0xC8842C
	public bool realTime; // 0x78
	private float startTime; // 0x7C
	private float currentTime; // 0x80
	private float[] endTimes; // 0x88
	private float lastTime; // 0x90
	private float deltaTime; // 0x94
	private float delayTime; // 0x98
	private float[] keyOffsets; // 0xA0
	protected AnimationCurve[] curves; // 0xA8
	protected AnimateFsmAction.Calculation[] calculations; // 0xB0
