	public override void set_ContentLength(long value) { }

	// RVA: 0xEDA680 Offset: 0xEDA680 VA: 0xEDA680 Slot: 13
	public override string get_ContentType() { }

	// RVA: 0xEDA6E4 Offset: 0xEDA6E4 VA: 0xEDA6E4 Slot: 14
	public override void set_ContentType(string value) { }

	// RVA: 0xEDA758 Offset: 0xEDA758 VA: 0xEDA758 Slot: 15
	public override ICredentials get_Credentials() { }

	// RVA: 0xEDA760 Offset: 0xEDA760 VA: 0xEDA760 Slot: 16
	public override void set_Credentials(ICredentials value) { }

	// RVA: 0xEDA768 Offset: 0xEDA768 VA: 0xEDA768 Slot: 17
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0xEDA770 Offset: 0xEDA770 VA: 0xEDA770 Slot: 19
	public override string get_Method() { }

	// RVA: 0xEDA778 Offset: 0xEDA778 VA: 0xEDA778 Slot: 20
	public override void set_Method(string value) { }

	// RVA: 0xEDA82C Offset: 0xEDA82C VA: 0xEDA82C Slot: 21
	public override bool get_PreAuthenticate() { }

	// RVA: 0xEDA834 Offset: 0xEDA834 VA: 0xEDA834 Slot: 22
	public override void set_PreAuthenticate(bool value) { }

	// RVA: 0xEDA840 Offset: 0xEDA840 VA: 0xEDA840 Slot: 23
	public override IWebProxy get_Proxy() { }

	// RVA: 0xEDA848 Offset: 0xEDA848 VA: 0xEDA848 Slot: 24
	public override void set_Proxy(IWebProxy value) { }

	// RVA: 0xEDA850 Offset: 0xEDA850 VA: 0xEDA850 Slot: 25
	public override Uri get_RequestUri() { }

	// RVA: 0xEDA858 Offset: 0xEDA858 VA: 0xEDA858 Slot: 26
	public override int get_Timeout() { }

	// RVA: 0xEDA860 Offset: 0xEDA860 VA: 0xEDA860 Slot: 27
	public override void set_Timeout(int value) { }

	// RVA: 0xEDA8FC Offset: 0xEDA8FC VA: 0xEDA8FC Slot: 28
	public override bool get_UseDefaultCredentials() { }

	// RVA: 0xEDA964 Offset: 0xEDA964 VA: 0xEDA964 Slot: 29
	public override void set_UseDefaultCredentials(bool value) { }

	// RVA: 0xEDA9CC Offset: 0xEDA9CC VA: 0xEDA9CC
	private static Exception GetMustImplement() { }

	[MonoTODOAttribute] // RVA: 0xC3E02C Offset: 0xC3E02C VA: 0xC3E02C
	// RVA: 0xEDAA28 Offset: 0xEDAA28 VA: 0xEDAA28 Slot: 30
	public override void Abort() { }

	// RVA: 0xEDAA74 Offset: 0xEDAA74 VA: 0xEDAA74 Slot: 31
	public override IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0xEDAD68 Offset: 0xEDAD68 VA: 0xEDAD68 Slot: 33
	public override Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0xEDAFF8 Offset: 0xEDAFF8 VA: 0xEDAFF8 Slot: 35
	public override Stream GetRequestStream() { }

	// RVA: 0xEDB15C Offset: 0xEDB15C VA: 0xEDB15C
	internal Stream GetRequestStreamInternal() { }

	// RVA: 0xEDB260 Offset: 0xEDB260 VA: 0xEDB260 Slot: 32
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0xEDB3F8 Offset: 0xEDB3F8 VA: 0xEDB3F8 Slot: 34
	public override WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0xEDB690 Offset: 0xEDB690 VA: 0xEDB690 Slot: 36
	public override WebResponse GetResponse() { }

	// RVA: 0xEDB7F4 Offset: 0xEDB7F4 VA: 0xEDB7F4
	private WebResponse GetResponseInternal() { }

	// RVA: 0xEDBC38 Offset: 0xEDBC38 VA: 0xEDBC38 Slot: 37
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xEDBEC4 Offset: 0xEDBEC4 VA: 0xEDBEC4
	internal void Close() { }
}

// Namespace: 
internal class FileWebRequest.FileWebStream : FileStream // TypeDefIndex: 1542
{
	// Fields
	private FileWebRequest webRequest; // 0x58

	// Methods

	// RVA: 0xEDB1CC Offset: 0xEDB1CC VA: 0xEDB1CC
	internal void .ctor(FileWebRequest webRequest, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0xEDBF50 Offset: 0xEDBF50 VA: 0xEDBF50 Slot: 13
	public override void Close() { }
}

// Namespace: 
private sealed class FileWebRequest.GetRequestStreamCallback : MulticastDelegate // TypeDefIndex: 1543
{
	// Methods

	// RVA: 0xEDAD24 Offset: 0xEDAD24 VA: 0xEDAD24
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEDBF8C Offset: 0xEDBF8C VA: 0xEDBF8C Slot: 11
	public virtual Stream Invoke() { }

	// RVA: 0xEDAD34 Offset: 0xEDAD34 VA: 0xEDAD34 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xEDAFEC Offset: 0xEDAFEC VA: 0xEDAFEC Slot: 13
	public virtual Stream EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FileWebRequest.GetResponseCallback : MulticastDelegate // TypeDefIndex: 1544
{
	// Methods

	// RVA: 0xEDB3B4 Offset: 0xEDB3B4 VA: 0xEDB3B4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEDC190 Offset: 0xEDC190 VA: 0xEDC190 Slot: 11
	public virtual WebResponse Invoke() { }

	// RVA: 0xEDB3C4 Offset: 0xEDB3C4 VA: 0xEDB3C4 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xEDB684 Offset: 0xEDB684 VA: 0xEDB684 Slot: 13
	public virtual WebResponse EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net
internal class FileWebRequestCreator : IWebRequestCreate // TypeDefIndex: 1545
{
	// Methods

	// RVA: 0xEDC394 Offset: 0xEDC394 VA: 0xEDC394
	internal void .ctor() { }

	// RVA: 0xEDC39C Offset: 0xEDC39C VA: 0xEDC39C Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
[Serializable]
public class FileWebResponse : WebResponse, IDisposable, ISerializable // TypeDefIndex: 1546
{
	// Fields
	private Uri responseUri; // 0x18
	private FileStream fileStream; // 0x20
	private long contentLength; // 0x28
	private WebHeaderCollection webHeaders; // 0x30
	private bool disposed; // 0x38

	// Properties
	public override long ContentLength { get; }
	public override string ContentType { get; }
	public override WebHeaderCollection Headers { get; }
	public override Uri ResponseUri { get; }

	// Methods

	// RVA: 0xEDBA10 Offset: 0xEDBA10 VA: 0xEDBA10
	internal void .ctor(Uri responseUri, FileStream fileStream) { }

	[ObsoleteAttribute] // RVA: 0xC3E03C Offset: 0xC3E03C VA: 0xC3E03C
	// RVA: 0xEDC3FC Offset: 0xEDC3FC VA: 0xEDC3FC
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xEDC624 Offset: 0xEDC624 VA: 0xEDC624 Slot: 7
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xEDC634 Offset: 0xEDC634 VA: 0xEDC634 Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0xEDC6C0 Offset: 0xEDC6C0 VA: 0xEDC6C0 Slot: 8
	public override long get_ContentLength() { }

	// RVA: 0xEDC79C Offset: 0xEDC79C VA: 0xEDC79C Slot: 10
	public override string get_ContentType() { }

	// RVA: 0xEDC7F0 Offset: 0xEDC7F0 VA: 0xEDC7F0 Slot: 12
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0xEDC814 Offset: 0xEDC814 VA: 0xEDC814 Slot: 15
	public override Uri get_ResponseUri() { }

	// RVA: 0xEDC838 Offset: 0xEDC838 VA: 0xEDC838 Slot: 18
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0xEDC960 Offset: 0xEDC960 VA: 0xEDC960 Slot: 17
	public override Stream GetResponseStream() { }

	// RVA: 0xEDC984 Offset: 0xEDC984 VA: 0xEDC984 Slot: 1
	protected override void Finalize() { }

	// RVA: 0xEDCA1C Offset: 0xEDCA1C VA: 0xEDCA1C Slot: 16
	public override void Close() { }

	// RVA: 0xEDC684 Offset: 0xEDC684 VA: 0xEDC684
	private void Dispose(bool disposing) { }

	// RVA: 0xEDC6E4 Offset: 0xEDC6E4 VA: 0xEDC6E4
	private void CheckDisposed() { }
}

// Namespace: System.Net
internal class FtpAsyncResult : IAsyncResult // TypeDefIndex: 1547
{
	// Fields
	private FtpWebResponse response; // 0x10
	private ManualResetEvent waitHandle; // 0x18
	private Exception exception; // 0x20
	private AsyncCallback callback; // 0x28
	private Stream stream; // 0x30
	private object state; // 0x38
	private bool completed; // 0x40
	private bool synch; // 0x41
	private object locker; // 0x48

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }
	internal bool GotException { get; }
	internal Exception Exception { get; }
	internal FtpWebResponse Response { get; set; }
	internal Stream Stream { get; set; }

	// Methods

	// RVA: 0xEDCAC0 Offset: 0xEDCAC0 VA: 0xEDCAC0
	public void .ctor(AsyncCallback callback, object state) { }

	// RVA: 0xEDCB44 Offset: 0xEDCB44 VA: 0xEDCB44 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0xEDCB4C Offset: 0xEDCB4C VA: 0xEDCB4C Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0xEDCC24 Offset: 0xEDCC24 VA: 0xEDCC24 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0xEDCC2C Offset: 0xEDCC2C VA: 0xEDCC2C Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0xEDCC6C Offset: 0xEDCC6C VA: 0xEDCC6C
	internal bool get_GotException() { }

	// RVA: 0xEDCC7C Offset: 0xEDCC7C VA: 0xEDCC7C
	internal Exception get_Exception() { }

	// RVA: 0xEDCC84 Offset: 0xEDCC84 VA: 0xEDCC84
	internal FtpWebResponse get_Response() { }

	// RVA: 0xEDCC8C Offset: 0xEDCC8C VA: 0xEDCC8C
	internal void set_Response(FtpWebResponse value) { }

	// RVA: 0xEDCC94 Offset: 0xEDCC94 VA: 0xEDCC94
	internal Stream get_Stream() { }

	// RVA: 0xEDCC9C Offset: 0xEDCC9C VA: 0xEDCC9C
	internal void set_Stream(Stream value) { }

	// RVA: 0xEDCCA4 Offset: 0xEDCCA4 VA: 0xEDCCA4
	internal void WaitUntilComplete() { }

	// RVA: 0xEDCD1C Offset: 0xEDCD1C VA: 0xEDCD1C
	internal bool WaitUntilComplete(int timeout, bool exitContext) { }

	// RVA: 0xEDCDB4 Offset: 0xEDCDB4 VA: 0xEDCDB4
	internal void SetCompleted(bool synch, Exception exc, FtpWebResponse response) { }

	// RVA: 0xEDCF24 Offset: 0xEDCF24 VA: 0xEDCF24
	internal void SetCompleted(bool synch, FtpWebResponse response) { }

	// RVA: 0xEDCF38 Offset: 0xEDCF38 VA: 0xEDCF38
	internal void SetCompleted(bool synch, Exception exc) { }

	// RVA: 0xEDCE5C Offset: 0xEDCE5C VA: 0xEDCE5C
	internal void DoCallback() { }

	// RVA: 0xEDCF44 Offset: 0xEDCF44 VA: 0xEDCF44
	internal void Reset() { }
}

// Namespace: System.Net
internal class FtpDataStream : Stream, IDisposable // TypeDefIndex: 1548
{
	// Fields
	private FtpWebRequest request; // 0x10
	private Stream networkStream; // 0x18
	private bool disposed; // 0x20
	private bool isRead; // 0x21
	private int totalRead; // 0x24

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	internal Stream NetworkStream { get; }

	// Methods

	// RVA: 0xEDCFE8 Offset: 0xEDCFE8 VA: 0xEDCFE8
	internal void .ctor(FtpWebRequest request, Stream stream, bool isRead) { }

	// RVA: 0xEDD0C4 Offset: 0xEDD0C4 VA: 0xEDD0C4 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0xEDD0F8 Offset: 0xEDD0F8 VA: 0xEDD0F8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0xEDD100 Offset: 0xEDD100 VA: 0xEDD100 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0xEDD110 Offset: 0xEDD110 VA: 0xEDD110 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0xEDD118 Offset: 0xEDD118 VA: 0xEDD118 Slot: 9
	public override long get_Length() { }

	// RVA: 0xEDD180 Offset: 0xEDD180 VA: 0xEDD180 Slot: 10
	public override long get_Position() { }

	// RVA: 0xEDD1E8 Offset: 0xEDD1E8 VA: 0xEDD1E8 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0xEDD250 Offset: 0xEDD250 VA: 0xEDD250
	internal Stream get_NetworkStream() { }

	// RVA: 0xEDD32C Offset: 0xEDD32C VA: 0xEDD32C Slot: 13
	public override void Close() { }

	// RVA: 0xEDD33C Offset: 0xEDD33C VA: 0xEDD33C Slot: 18
	public override void Flush() { }

	// RVA: 0xEDD340 Offset: 0xEDD340 VA: 0xEDD340 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0xEDD3A8 Offset: 0xEDD3A8 VA: 0xEDD3A8 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0xEDD410 Offset: 0xEDD410 VA: 0xEDD410
	private int ReadInternal(byte[] buffer, int offset, int size) { }

	// RVA: 0xEDD724 Offset: 0xEDD724 VA: 0xEDD724 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback cb, object state) { }

	// RVA: 0xEDD97C Offset: 0xEDD97C VA: 0xEDD97C Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0xEDDADC Offset: 0xEDDADC VA: 0xEDDADC Slot: 19
	public override int Read(byte[] buffer, int offset, int size) { }

	// RVA: 0xEDDD08 Offset: 0xEDDD08 VA: 0xEDDD08
	private void WriteInternal(byte[] buffer, int offset, int size) { }

	// RVA: 0xEDDE50 Offset: 0xEDDE50 VA: 0xEDDE50 Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback cb, object state) { }

	// RVA: 0xEDE0A8 Offset: 0xEDE0A8 VA: 0xEDE0A8 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0xEDE1DC Offset: 0xEDE1DC VA: 0xEDE1DC Slot: 23
	public override void Write(byte[] buffer, int offset, int size) { }

	// RVA: 0xEDE400 Offset: 0xEDE400 VA: 0xEDE400 Slot: 1
	protected override void Finalize() { }

	// RVA: 0xEDE480 Offset: 0xEDE480 VA: 0xEDE480 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0xEDD274 Offset: 0xEDD274 VA: 0xEDD274
	private void CheckDisposed() { }
}

// Namespace: 
private sealed class FtpDataStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 1549
{
	// Methods

	// RVA: 0xEDDFE4 Offset: 0xEDDFE4 VA: 0xEDDFE4
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEDE8EC Offset: 0xEDE8EC VA: 0xEDE8EC Slot: 11
	public virtual void Invoke(byte[] buffer, int offset, int size) { }

	// RVA: 0xEDDFF4 Offset: 0xEDDFF4 VA: 0xEDDFF4 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int size, AsyncCallback callback, object object) { }

	// RVA: 0xEDE1D0 Offset: 0xEDE1D0 VA: 0xEDE1D0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FtpDataStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 1550
{
	// Methods

	// RVA: 0xEDD8B8 Offset: 0xEDD8B8 VA: 0xEDD8B8
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEDE4F8 Offset: 0xEDE4F8 VA: 0xEDE4F8 Slot: 11
	public virtual int Invoke(byte[] buffer, int offset, int size) { }

	// RVA: 0xEDD8C8 Offset: 0xEDD8C8 VA: 0xEDD8C8 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int size, AsyncCallback callback, object object) { }

	// RVA: 0xEDDAA0 Offset: 0xEDDAA0 VA: 0xEDDAA0 Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net
internal class FtpRequestCreator : IWebRequestCreate // TypeDefIndex: 1551
{
	// Methods

	// RVA: 0xEDECDC Offset: 0xEDECDC VA: 0xEDECDC
	public void .ctor() { }

	// RVA: 0xEDECE4 Offset: 0xEDECE4 VA: 0xEDECE4 Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
internal class FtpStatus // TypeDefIndex: 1552
{
	// Fields
	private readonly FtpStatusCode statusCode; // 0x10
	private readonly string statusDescription; // 0x18

	// Properties
	public FtpStatusCode StatusCode { get; }
	public string StatusDescription { get; }

	// Methods

	// RVA: 0xEDEEC0 Offset: 0xEDEEC0 VA: 0xEDEEC0
	public void .ctor(FtpStatusCode statusCode, string statusDescription) { }

	// RVA: 0xEDEEFC Offset: 0xEDEEFC VA: 0xEDEEFC
	public FtpStatusCode get_StatusCode() { }

	// RVA: 0xEDEF04 Offset: 0xEDEF04 VA: 0xEDEF04
	public string get_StatusDescription() { }
}

// Namespace: System.Net
public enum FtpStatusCode // TypeDefIndex: 1553
{
	// Fields
	public int value__; // 0x0
	public const FtpStatusCode Undefined = 0;
	public const FtpStatusCode RestartMarker = 110;
	public const FtpStatusCode ServiceTemporarilyNotAvailable = 120;
	public const FtpStatusCode DataAlreadyOpen = 125;
	public const FtpStatusCode OpeningData = 150;
	public const FtpStatusCode CommandOK = 200;
	public const FtpStatusCode CommandExtraneous = 202;
	public const FtpStatusCode DirectoryStatus = 212;
	public const FtpStatusCode FileStatus = 213;
	public const FtpStatusCode SystemType = 215;
	public const FtpStatusCode SendUserCommand = 220;
	public const FtpStatusCode ClosingControl = 221;
	public const FtpStatusCode ClosingData = 226;
	public const FtpStatusCode EnteringPassive = 227;
	public const FtpStatusCode LoggedInProceed = 230;
	public const FtpStatusCode ServerWantsSecureSession = 234;
	public const FtpStatusCode FileActionOK = 250;
	public const FtpStatusCode PathnameCreated = 257;
	public const FtpStatusCode SendPasswordCommand = 331;
	public const FtpStatusCode NeedLoginAccount = 332;
	public const FtpStatusCode FileCommandPending = 350;
	public const FtpStatusCode ServiceNotAvailable = 421;
	public const FtpStatusCode CantOpenData = 425;
	public const FtpStatusCode ConnectionClosed = 426;
	public const FtpStatusCode ActionNotTakenFileUnavailableOrBusy = 450;
	public const FtpStatusCode ActionAbortedLocalProcessingError = 451;
	public const FtpStatusCode ActionNotTakenInsufficientSpace = 452;
	public const FtpStatusCode CommandSyntaxError = 500;
	public const FtpStatusCode ArgumentSyntaxError = 501;
	public const FtpStatusCode CommandNotImplemented = 502;
	public const FtpStatusCode BadCommandSequence = 503;
	public const FtpStatusCode NotLoggedIn = 530;
	public const FtpStatusCode AccountNeeded = 532;
	public const FtpStatusCode ActionNotTakenFileUnavailable = 550;
	public const FtpStatusCode ActionAbortedUnknownPageType = 551;
	public const FtpStatusCode FileActionAborted = 552;
	public const FtpStatusCode ActionNotTakenFilenameNotAllowed = 553;
}

// Namespace: System.Net
public sealed class FtpWebRequest : WebRequest // TypeDefIndex: 1554
{
	// Fields
	private const string ChangeDir = "CWD";
	private const string UserCommand = "USER";
	private const string PasswordCommand = "PASS";
	private const string TypeCommand = "TYPE";
	private const string PassiveCommand = "PASV";
	private const string PortCommand = "PORT";
	private const string AbortCommand = "ABOR";
	private const string AuthCommand = "AUTH";
	private const string RestCommand = "REST";
	private const string RenameFromCommand = "RNFR";
	private const string RenameToCommand = "RNTO";
	private const string QuitCommand = "QUIT";
	private const string EOL = "\r\n";
	private Uri requestUri; // 0x20
	private string file_name; // 0x28
	private ServicePoint servicePoint; // 0x30
	private Stream origDataStream; // 0x38
	private Stream dataStream; // 0x40
	private Stream controlStream; // 0x48
	private StreamReader controlReader; // 0x50
	private NetworkCredential credentials; // 0x58
	private IPHostEntry hostEntry; // 0x60
	private IPEndPoint localEndPoint; // 0x68
	private IWebProxy proxy; // 0x70
	private int timeout; // 0x78
	private int rwTimeout; // 0x7C
	private long offset; // 0x80
	private bool binary; // 0x88
	private bool enableSsl; // 0x89
	private bool usePassive; // 0x8A
	private bool keepAlive; // 0x8B
	private string method; // 0x90
	private string renameTo; // 0x98
	private object locker; // 0xA0
	private FtpWebRequest.RequestState requestState; // 0xA8
	private FtpAsyncResult asyncResult; // 0xB0
	private FtpWebResponse ftpResponse; // 0xB8
	private Stream requestStream; // 0xC0
	private string initial_path; // 0xC8
	private static readonly string[] supportedCommands; // 0x0
	private RemoteCertificateValidationCallback callback; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xC3D084 Offset: 0xC3D084 VA: 0xC3D084
	private static RemoteCertificateValidationCallback <>f__am$cache1C; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC3D094 Offset: 0xC3D094 VA: 0xC3D094
	private static Dictionary<string, int> <>f__switch$map5; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC3D0A4 Offset: 0xC3D0A4 VA: 0xC3D0A4
	private static Dictionary<string, int> <>f__switch$map6; // 0x18

	// Properties
	[MonoTODOAttribute] // RVA: 0xC3F7CC Offset: 0xC3F7CC VA: 0xC3F7CC
	public X509CertificateCollection ClientCertificates { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F7DC Offset: 0xC3F7DC VA: 0xC3F7DC
	public override string ConnectionGroupName { get; set; }
	public override string ContentType { get; set; }
	public override long ContentLength { get; set; }
	public long ContentOffset { get; set; }
	public override ICredentials Credentials { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F7EC Offset: 0xC3F7EC VA: 0xC3F7EC
	public static RequestCachePolicy DefaultCachePolicy { get; set; }
	public bool EnableSsl { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F7FC Offset: 0xC3F7FC VA: 0xC3F7FC
	public override WebHeaderCollection Headers { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F80C Offset: 0xC3F80C VA: 0xC3F80C
	public bool KeepAlive { get; set; }
	public override string Method { get; set; }
	public override bool PreAuthenticate { get; set; }
	public override IWebProxy Proxy { get; set; }
	public int ReadWriteTimeout { get; set; }
	public string RenameTo { get; set; }
	public override Uri RequestUri { get; }
	public ServicePoint ServicePoint { get; }
	public bool UsePassive { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3F844 Offset: 0xC3F844 VA: 0xC3F844
	public override bool UseDefaultCredentials { get; set; }
	public bool UseBinary { get; set; }
	public override int Timeout { get; set; }
	private string DataType { get; }
	private FtpWebRequest.RequestState State { get; set; }

	// Methods

	// RVA: 0xEDED44 Offset: 0xEDED44 VA: 0xEDED44
	internal void .ctor(Uri uri) { }

	// RVA: 0xEDEF0C Offset: 0xEDEF0C VA: 0xEDEF0C
	private static void .cctor() { }

	// RVA: 0xEDF3BC Offset: 0xEDF3BC VA: 0xEDF3BC
	private static Exception GetMustImplement() { }

	// RVA: 0xEDF418 Offset: 0xEDF418 VA: 0xEDF418
	public X509CertificateCollection get_ClientCertificates() { }

	// RVA: 0xEDF484 Offset: 0xEDF484 VA: 0xEDF484
	public void set_ClientCertificates(X509CertificateCollection value) { }

	// RVA: 0xEDF4F0 Offset: 0xEDF4F0 VA: 0xEDF4F0 Slot: 9
	public override string get_ConnectionGroupName() { }

	// RVA: 0xEDF55C Offset: 0xEDF55C VA: 0xEDF55C Slot: 10
	public override void set_ConnectionGroupName(string value) { }

	// RVA: 0xEDF5C8 Offset: 0xEDF5C8 VA: 0xEDF5C8 Slot: 13
	public override string get_ContentType() { }

	// RVA: 0xEDF630 Offset: 0xEDF630 VA: 0xEDF630 Slot: 14
	public override void set_ContentType(string value) { }

	// RVA: 0xEDF698 Offset: 0xEDF698 VA: 0xEDF698 Slot: 11
	public override long get_ContentLength() { }

	// RVA: 0xEDF6A0 Offset: 0xEDF6A0 VA: 0xEDF6A0 Slot: 12
	public override void set_ContentLength(long value) { }

	// RVA: 0xEDF6A4 Offset: 0xEDF6A4 VA: 0xEDF6A4
	public long get_ContentOffset() { }

	// RVA: 0xEDF6AC Offset: 0xEDF6AC VA: 0xEDF6AC
	public void set_ContentOffset(long value) { }

	// RVA: 0xEDF7E8 Offset: 0xEDF7E8 VA: 0xEDF7E8 Slot: 15
	public override ICredentials get_Credentials() { }

	// RVA: 0xEDF7F0 Offset: 0xEDF7F0 VA: 0xEDF7F0 Slot: 16
	public override void set_Credentials(ICredentials value) { }

	// RVA: 0xEDF8D8 Offset: 0xEDF8D8 VA: 0xEDF8D8
	public static RequestCachePolicy get_DefaultCachePolicy() { }

	// RVA: 0xEDF944 Offset: 0xEDF944 VA: 0xEDF944
	public static void set_DefaultCachePolicy(RequestCachePolicy value) { }

	// RVA: 0xEDF9B0 Offset: 0xEDF9B0 VA: 0xEDF9B0
	public bool get_EnableSsl() { }

	// RVA: 0xEDF9B8 Offset: 0xEDF9B8 VA: 0xEDF9B8
	public void set_EnableSsl(bool value) { }

	// RVA: 0xEDF9E4 Offset: 0xEDF9E4 VA: 0xEDF9E4 Slot: 17
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0xEDFA50 Offset: 0xEDFA50 VA: 0xEDFA50 Slot: 18
	public override void set_Headers(WebHeaderCollection value) { }

	// RVA: 0xEDFABC Offset: 0xEDFABC VA: 0xEDFABC
	public bool get_KeepAlive() { }

	// RVA: 0xEDFAC4 Offset: 0xEDFAC4 VA: 0xEDFAC4
	public void set_KeepAlive(bool value) { }

	// RVA: 0xEDFAC8 Offset: 0xEDFAC8 VA: 0xEDFAC8 Slot: 19
	public override string get_Method() { }

	// RVA: 0xEDFAD0 Offset: 0xEDFAD0 VA: 0xEDFAD0 Slot: 20
	public override void set_Method(string value) { }

	// RVA: 0xEDFBFC Offset: 0xEDFBFC VA: 0xEDFBFC Slot: 21
	public override bool get_PreAuthenticate() { }

	// RVA: 0xEDFC64 Offset: 0xEDFC64 VA: 0xEDFC64 Slot: 22
	public override void set_PreAuthenticate(bool value) { }

	// RVA: 0xEDFCCC Offset: 0xEDFCCC VA: 0xEDFCCC Slot: 23
	public override IWebProxy get_Proxy() { }

	// RVA: 0xEDFCD4 Offset: 0xEDFCD4 VA: 0xEDFCD4 Slot: 24
	public override void set_Proxy(IWebProxy value) { }

	// RVA: 0xEDDD00 Offset: 0xEDDD00 VA: 0xEDDD00
	public int get_ReadWriteTimeout() { }

	// RVA: 0xEDFD68 Offset: 0xEDFD68 VA: 0xEDFD68
	public void set_ReadWriteTimeout(int value) { }

	// RVA: 0xEDFE00 Offset: 0xEDFE00 VA: 0xEDFE00
	public string get_RenameTo() { }

	// RVA: 0xEDFE08 Offset: 0xEDFE08 VA: 0xEDFE08
	public void set_RenameTo(string value) { }

	// RVA: 0xEDFEC4 Offset: 0xEDFEC4 VA: 0xEDFEC4 Slot: 25
	public override Uri get_RequestUri() { }

	// RVA: 0xEDFECC Offset: 0xEDFECC VA: 0xEDFECC
	public ServicePoint get_ServicePoint() { }

	// RVA: 0xEDFF5C Offset: 0xEDFF5C VA: 0xEDFF5C
	public bool get_UsePassive() { }

	// RVA: 0xEDFF64 Offset: 0xEDFF64 VA: 0xEDFF64
	public void set_UsePassive(bool value) { }

	// RVA: 0xEDFF90 Offset: 0xEDFF90 VA: 0xEDFF90 Slot: 28
	public override bool get_UseDefaultCredentials() { }

	// RVA: 0xEDFFFC Offset: 0xEDFFFC VA: 0xEDFFFC Slot: 29
	public override void set_UseDefaultCredentials(bool value) { }

	// RVA: 0xEE0068 Offset: 0xEE0068 VA: 0xEE0068
	public bool get_UseBinary() { }

	// RVA: 0xEE0070 Offset: 0xEE0070 VA: 0xEE0070
	public void set_UseBinary(bool value) { }

	// RVA: 0xEE009C Offset: 0xEE009C VA: 0xEE009C Slot: 26
	public override int get_Timeout() { }

	// RVA: 0xEE00A4 Offset: 0xEE00A4 VA: 0xEE00A4 Slot: 27
	public override void set_Timeout(int value) { }

	// RVA: 0xEE013C Offset: 0xEE013C VA: 0xEE013C
	private string get_DataType() { }

	// RVA: 0xEE019C Offset: 0xEE019C VA: 0xEE019C
	private FtpWebRequest.RequestState get_State() { }

	// RVA: 0xEE01DC Offset: 0xEE01DC VA: 0xEE01DC
	private void set_State(FtpWebRequest.RequestState value) { }

	// RVA: 0xEE0314 Offset: 0xEE0314 VA: 0xEE0314 Slot: 30
	public override void Abort() { }

	// RVA: 0xEE07A0 Offset: 0xEE07A0 VA: 0xEE07A0 Slot: 32
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0xEE09D0 Offset: 0xEE09D0 VA: 0xEE09D0 Slot: 34
	public override WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0xEE0B3C Offset: 0xEE0B3C VA: 0xEE0B3C Slot: 36
	public override WebResponse GetResponse() { }

	// RVA: 0xEE0B6C Offset: 0xEE0B6C VA: 0xEE0B6C Slot: 31
	public override IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0xEE0E14 Offset: 0xEE0E14 VA: 0xEE0E14 Slot: 33
	public override Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0xEE10A8 Offset: 0xEE10A8 VA: 0xEE10A8 Slot: 35
	public override Stream GetRequestStream() { }

	// RVA: 0xEDFED0 Offset: 0xEDFED0 VA: 0xEDFED0
	private ServicePoint GetServicePoint() { }

	// RVA: 0xEE10D8 Offset: 0xEE10D8 VA: 0xEE10D8
	private void ResolveHost() { }

	// RVA: 0xEE1234 Offset: 0xEE1234 VA: 0xEE1234
	private void ProcessRequest() { }

	// RVA: 0xEE1C80 Offset: 0xEE1C80 VA: 0xEE1C80
	private void SetType() { }

	// RVA: 0xEE1EF8 Offset: 0xEE1EF8 VA: 0xEE1EF8
	private string GetRemoteFolderPath(Uri uri) { }

	// RVA: 0xEE2110 Offset: 0xEE2110 VA: 0xEE2110
	private void CWDAndSetFileName(Uri uri) { }

	// RVA: 0xEE1450 Offset: 0xEE1450 VA: 0xEE1450
	private void ProcessMethod() { }

	// RVA: 0xEE30F8 Offset: 0xEE30F8 VA: 0xEE30F8
	private void CloseControlConnection() { }

	// RVA: 0xEDD670 Offset: 0xEDD670 VA: 0xEDD670
	internal void CloseDataConnection() { }

	// RVA: 0xEE3194 Offset: 0xEE3194 VA: 0xEE3194
	private void CloseConnection() { }

	// RVA: 0xEE2928 Offset: 0xEE2928 VA: 0xEE2928
	private void ProcessSimpleMethod() { }

	// RVA: 0xEE2880 Offset: 0xEE2880 VA: 0xEE2880
	private void UploadData() { }

	// RVA: 0xEE27D4 Offset: 0xEE27D4 VA: 0xEE27D4
	private void DownloadData() { }

	// RVA: 0xEDF740 Offset: 0xEDF740 VA: 0xEDF740
	private void CheckRequestStarted() { }

	// RVA: 0xEE22D4 Offset: 0xEE22D4 VA: 0xEE22D4
	private void OpenControlConnection() { }

	// RVA: 0xEE3B38 Offset: 0xEE3B38 VA: 0xEE3B38
	private static string GetInitialPath(FtpStatus status) { }

	// RVA: 0xEE3D7C Offset: 0xEE3D7C VA: 0xEE3D7C
	private Socket SetupPassiveConnection(string statusDescription) { }

	// RVA: 0xEE1DF0 Offset: 0xEE1DF0 VA: 0xEE1DF0
	private Exception CreateExceptionFromResponse(FtpStatus status) { }

	// RVA: 0xEDD6A4 Offset: 0xEDD6A4 VA: 0xEDD6A4
	internal void SetTransferCompleted() { }

	// RVA: 0xEE42FC Offset: 0xEE42FC VA: 0xEE42FC
	internal void OperationCompleted() { }

	// RVA: 0xEE1904 Offset: 0xEE1904 VA: 0xEE1904
	private void SetCompleteWithError(Exception exc) { }

	// RVA: 0xEE430C Offset: 0xEE430C VA: 0xEE430C
	private Socket InitDataConnection() { }

	// RVA: 0xEE31CC Offset: 0xEE31CC VA: 0xEE31CC
	private void OpenDataConnection() { }

	// RVA: 0xEE35D8 Offset: 0xEE35D8 VA: 0xEE35D8
	private void Authenticate() { }

	// RVA: 0xEE1DD8 Offset: 0xEE1DD8 VA: 0xEE1DD8
	private FtpStatus SendCommand(string command, string[] parameters) { }

	// RVA: 0xEE049C Offset: 0xEE049C VA: 0xEE049C
	private FtpStatus SendCommand(bool waitResponse, string command, string[] parameters) { }

	// RVA: 0xEE4B74 Offset: 0xEE4B74 VA: 0xEE4B74
	internal static FtpStatus ServiceNotAvailable() { }

	// RVA: 0xEE1984 Offset: 0xEE1984 VA: 0xEE1984
	internal FtpStatus GetResponseStatus() { }

	// RVA: 0xEE4A5C Offset: 0xEE4A5C VA: 0xEE4A5C
	private void InitiateSecureConnection(ref Stream stream) { }

	// RVA: 0xEE497C Offset: 0xEE497C VA: 0xEE497C
	internal bool ChangeToSSLSocket(ref Stream stream) { }

	// RVA: 0xEE06FC Offset: 0xEE06FC VA: 0xEE06FC
	private bool InFinalState() { }

	// RVA: 0xEE1924 Offset: 0xEE1924 VA: 0xEE1924
	private bool InProgress() { }

	// RVA: 0xEDD5C0 Offset: 0xEDD5C0 VA: 0xEDD5C0
	internal void CheckIfAborted() { }

	// RVA: 0xEE0284 Offset: 0xEE0284 VA: 0xEE0284
	private void CheckFinalState() { }

	[CompilerGeneratedAttribute] // RVA: 0xC3E078 Offset: 0xC3E078 VA: 0xC3E078
	// RVA: 0xEE4BF8 Offset: 0xEE4BF8 VA: 0xEE4BF8
	private static bool <callback>m__B(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { }
}

// Namespace: 
private enum FtpWebRequest.RequestState // TypeDefIndex: 1555
{
	// Fields
	public int value__; // 0x0
	public const FtpWebRequest.RequestState Before = 0;
	public const FtpWebRequest.RequestState Scheduled = 1;
	public const FtpWebRequest.RequestState Connecting = 2;
	public const FtpWebRequest.RequestState Authenticating = 3;
	public const FtpWebRequest.RequestState OpeningData = 4;
	public const FtpWebRequest.RequestState TransferInProgress = 5;
	public const FtpWebRequest.RequestState Finished = 6;
	public const FtpWebRequest.RequestState Aborted = 7;
	public const FtpWebRequest.RequestState Error = 8;
}

// Namespace: System.Net
public class FtpWebResponse : WebResponse // TypeDefIndex: 1556
{
	// Fields
	private Stream stream; // 0x18
	private Uri uri; // 0x20
	private FtpStatusCode statusCode; // 0x28
	private DateTime lastModified; // 0x30
	private string bannerMessage; // 0x40
	private string welcomeMessage; // 0x48
	private string exitMessage; // 0x50
	private string statusDescription; // 0x58
	private string method; // 0x60
	private bool disposed; // 0x68
	private FtpWebRequest request; // 0x70
	internal long contentLength; // 0x78

	// Properties
	public override long ContentLength { get; }
	public override WebHeaderCollection Headers { get; }
	public override Uri ResponseUri { get; }
	public DateTime LastModified { get; set; }
	public string BannerMessage { get; set; }
	public string WelcomeMessage { get; set; }
	public string ExitMessage { get; set; }
	public FtpStatusCode StatusCode { get; set; }
	public string StatusDescription { get; set; }
	internal Stream Stream { get; set; }

	// Methods

	// RVA: 0xF441E0 Offset: 0xF441E0 VA: 0xF441E0
	internal void .ctor(FtpWebRequest request, Uri uri, string method, bool keepAlive) { }

	// RVA: 0xF442D4 Offset: 0xF442D4 VA: 0xF442D4
	internal void .ctor(FtpWebRequest request, Uri uri, string method, FtpStatusCode statusCode, string statusDescription) { }

	// RVA: 0xF443DC Offset: 0xF443DC VA: 0xF443DC
	internal void .ctor(FtpWebRequest request, Uri uri, string method, FtpStatus status) { }

	// RVA: 0xF44474 Offset: 0xF44474 VA: 0xF44474 Slot: 8
	public override long get_ContentLength() { }

	// RVA: 0xF4447C Offset: 0xF4447C VA: 0xF4447C Slot: 12
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0xF444D8 Offset: 0xF444D8 VA: 0xF444D8 Slot: 15
	public override Uri get_ResponseUri() { }

	// RVA: 0xF444E0 Offset: 0xF444E0 VA: 0xF444E0
	public DateTime get_LastModified() { }

	// RVA: 0xF444EC Offset: 0xF444EC VA: 0xF444EC
	internal void set_LastModified(DateTime value) { }

	// RVA: 0xF444F4 Offset: 0xF444F4 VA: 0xF444F4
	public string get_BannerMessage() { }

	// RVA: 0xF444FC Offset: 0xF444FC VA: 0xF444FC
	internal void set_BannerMessage(string value) { }

	// RVA: 0xF44504 Offset: 0xF44504 VA: 0xF44504
	public string get_WelcomeMessage() { }

	// RVA: 0xF4450C Offset: 0xF4450C VA: 0xF4450C
	internal void set_WelcomeMessage(string value) { }

	// RVA: 0xF44514 Offset: 0xF44514 VA: 0xF44514
	public string get_ExitMessage() { }

	// RVA: 0xF4451C Offset: 0xF4451C VA: 0xF4451C
	internal void set_ExitMessage(string value) { }

	// RVA: 0xF44524 Offset: 0xF44524 VA: 0xF44524
	public FtpStatusCode get_StatusCode() { }

	// RVA: 0xF4452C Offset: 0xF4452C VA: 0xF4452C
	private void set_StatusCode(FtpStatusCode value) { }

	// RVA: 0xF44534 Offset: 0xF44534 VA: 0xF44534
	public string get_StatusDescription() { }

	// RVA: 0xF4453C Offset: 0xF4453C VA: 0xF4453C
	private void set_StatusDescription(string value) { }

	// RVA: 0xF44544 Offset: 0xF44544 VA: 0xF44544 Slot: 16
	public override void Close() { }

	// RVA: 0xF44608 Offset: 0xF44608 VA: 0xF44608 Slot: 17
	public override Stream GetResponseStream() { }

	// RVA: 0xF447C4 Offset: 0xF447C4 VA: 0xF447C4
	internal void set_Stream(Stream value) { }

	// RVA: 0xF447CC Offset: 0xF447CC VA: 0xF447CC
	internal Stream get_Stream() { }

	// RVA: 0xF447D4 Offset: 0xF447D4 VA: 0xF447D4
	internal void UpdateStatus(FtpStatus status) { }

	// RVA: 0xF4470C Offset: 0xF4470C VA: 0xF4470C
	private void CheckDisposed() { }

	// RVA: 0xF4483C Offset: 0xF4483C VA: 0xF4483C
	internal bool IsFinal() { }
}

// Namespace: System.Net
[ObsoleteAttribute] // RVA: 0xC3C95C Offset: 0xC3C95C VA: 0xC3C95C
public class GlobalProxySelection // TypeDefIndex: 1557
{
	// Properties
	public static IWebProxy Select { get; set; }

	// Methods

	// RVA: 0xF4484C Offset: 0xF4484C VA: 0xF4484C
	public void .ctor() { }

	// RVA: 0xF44854 Offset: 0xF44854 VA: 0xF44854
	public static IWebProxy get_Select() { }

	// RVA: 0xF448B4 Offset: 0xF448B4 VA: 0xF448B4
	public static void set_Select(IWebProxy value) { }

	// RVA: 0xF4491C Offset: 0xF4491C VA: 0xF4491C
	public static IWebProxy GetEmptyWebProxy() { }
}

// Namespace: 
