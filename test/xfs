	public override long ContentLength { get; set; }
	public override string ContentType { get; set; }
	public override ICredentials Credentials { get; set; }
	public override WebHeaderCollection Headers { get; }
	public override string Method { get; set; }
	public override bool PreAuthenticate { get; set; }
	public override IWebProxy Proxy { get; set; }
	public override Uri RequestUri { get; }
	public override int Timeout { get; set; }
	public override bool UseDefaultCredentials { get; set; }

	// Methods

	// RVA: 0x1F3E6F4 Offset: 0x1F3E6F4 VA: 0x1F3E6F4
	internal void .ctor(Uri uri) { }

	[ObsoleteAttribute] // RVA: 0xBD1EC8 Offset: 0xBD1EC8 VA: 0xBD1EC8
	// RVA: 0x1F3E7B4 Offset: 0x1F3E7B4 VA: 0x1F3E7B4
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1F3EC40 Offset: 0x1F3EC40 VA: 0x1F3EC40 Slot: 6
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1F3EC50 Offset: 0x1F3EC50 VA: 0x1F3EC50 Slot: 9
	public override string get_ConnectionGroupName() { }

	// RVA: 0x1F3EC58 Offset: 0x1F3EC58 VA: 0x1F3EC58 Slot: 10
	public override void set_ConnectionGroupName(string value) { }

	// RVA: 0x1F3EC60 Offset: 0x1F3EC60 VA: 0x1F3EC60 Slot: 11
	public override long get_ContentLength() { }

	// RVA: 0x1F3EC68 Offset: 0x1F3EC68 VA: 0x1F3EC68 Slot: 12
	public override void set_ContentLength(long value) { }

	// RVA: 0x1F3ED0C Offset: 0x1F3ED0C VA: 0x1F3ED0C Slot: 13
	public override string get_ContentType() { }

	// RVA: 0x1F3ED70 Offset: 0x1F3ED70 VA: 0x1F3ED70 Slot: 14
	public override void set_ContentType(string value) { }

	// RVA: 0x1F3EDE4 Offset: 0x1F3EDE4 VA: 0x1F3EDE4 Slot: 15
	public override ICredentials get_Credentials() { }

	// RVA: 0x1F3EDEC Offset: 0x1F3EDEC VA: 0x1F3EDEC Slot: 16
	public override void set_Credentials(ICredentials value) { }

	// RVA: 0x1F3EDF4 Offset: 0x1F3EDF4 VA: 0x1F3EDF4 Slot: 17
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0x1F3EDFC Offset: 0x1F3EDFC VA: 0x1F3EDFC Slot: 19
	public override string get_Method() { }

	// RVA: 0x1F3EE04 Offset: 0x1F3EE04 VA: 0x1F3EE04 Slot: 20
	public override void set_Method(string value) { }

	// RVA: 0x1F3EEB8 Offset: 0x1F3EEB8 VA: 0x1F3EEB8 Slot: 21
	public override bool get_PreAuthenticate() { }

	// RVA: 0x1F3EEC0 Offset: 0x1F3EEC0 VA: 0x1F3EEC0 Slot: 22
	public override void set_PreAuthenticate(bool value) { }

	// RVA: 0x1F3EECC Offset: 0x1F3EECC VA: 0x1F3EECC Slot: 23
	public override IWebProxy get_Proxy() { }

	// RVA: 0x1F3EED4 Offset: 0x1F3EED4 VA: 0x1F3EED4 Slot: 24
	public override void set_Proxy(IWebProxy value) { }

	// RVA: 0x1F3EEDC Offset: 0x1F3EEDC VA: 0x1F3EEDC Slot: 25
	public override Uri get_RequestUri() { }

	// RVA: 0x1F3EEE4 Offset: 0x1F3EEE4 VA: 0x1F3EEE4 Slot: 26
	public override int get_Timeout() { }

	// RVA: 0x1F3EEEC Offset: 0x1F3EEEC VA: 0x1F3EEEC Slot: 27
	public override void set_Timeout(int value) { }

	// RVA: 0x1F3EF88 Offset: 0x1F3EF88 VA: 0x1F3EF88 Slot: 28
	public override bool get_UseDefaultCredentials() { }

	// RVA: 0x1F3EFF0 Offset: 0x1F3EFF0 VA: 0x1F3EFF0 Slot: 29
	public override void set_UseDefaultCredentials(bool value) { }

	// RVA: 0x1F3F058 Offset: 0x1F3F058 VA: 0x1F3F058
	private static Exception GetMustImplement() { }

	[MonoTODOAttribute] // RVA: 0xBD1F04 Offset: 0xBD1F04 VA: 0xBD1F04
	// RVA: 0x1F3F0B4 Offset: 0x1F3F0B4 VA: 0x1F3F0B4 Slot: 30
	public override void Abort() { }

	// RVA: 0x1F3F100 Offset: 0x1F3F100 VA: 0x1F3F100 Slot: 31
	public override IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0x1F3F3F4 Offset: 0x1F3F3F4 VA: 0x1F3F3F4 Slot: 33
	public override Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0x1F3F684 Offset: 0x1F3F684 VA: 0x1F3F684 Slot: 35
	public override Stream GetRequestStream() { }

	// RVA: 0x1F3F7E8 Offset: 0x1F3F7E8 VA: 0x1F3F7E8
	internal Stream GetRequestStreamInternal() { }

	// RVA: 0x1F3F8EC Offset: 0x1F3F8EC VA: 0x1F3F8EC Slot: 32
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0x1F3FA84 Offset: 0x1F3FA84 VA: 0x1F3FA84 Slot: 34
	public override WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0x1F3FD1C Offset: 0x1F3FD1C VA: 0x1F3FD1C Slot: 36
	public override WebResponse GetResponse() { }

	// RVA: 0x1F3FE80 Offset: 0x1F3FE80 VA: 0x1F3FE80
	private WebResponse GetResponseInternal() { }

	// RVA: 0x1F402C4 Offset: 0x1F402C4 VA: 0x1F402C4 Slot: 37
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1F40550 Offset: 0x1F40550 VA: 0x1F40550
	internal void Close() { }
}

// Namespace: 
internal class FileWebRequest.FileWebStream : FileStream // TypeDefIndex: 1542
{
	// Fields
	private FileWebRequest webRequest; // 0x58

	// Methods

	// RVA: 0x1F3F858 Offset: 0x1F3F858 VA: 0x1F3F858
	internal void .ctor(FileWebRequest webRequest, FileMode mode, FileAccess access, FileShare share) { }

	// RVA: 0x1F405DC Offset: 0x1F405DC VA: 0x1F405DC Slot: 13
	public override void Close() { }
}

// Namespace: 
private sealed class FileWebRequest.GetRequestStreamCallback : MulticastDelegate // TypeDefIndex: 1543
{
	// Methods

	// RVA: 0x1F3F3B0 Offset: 0x1F3F3B0 VA: 0x1F3F3B0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F40618 Offset: 0x1F40618 VA: 0x1F40618 Slot: 11
	public virtual Stream Invoke() { }

	// RVA: 0x1F3F3C0 Offset: 0x1F3F3C0 VA: 0x1F3F3C0 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1F3F678 Offset: 0x1F3F678 VA: 0x1F3F678 Slot: 13
	public virtual Stream EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FileWebRequest.GetResponseCallback : MulticastDelegate // TypeDefIndex: 1544
{
	// Methods

	// RVA: 0x1F3FA40 Offset: 0x1F3FA40 VA: 0x1F3FA40
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F4081C Offset: 0x1F4081C VA: 0x1F4081C Slot: 11
	public virtual WebResponse Invoke() { }

	// RVA: 0x1F3FA50 Offset: 0x1F3FA50 VA: 0x1F3FA50 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1F3FD10 Offset: 0x1F3FD10 VA: 0x1F3FD10 Slot: 13
	public virtual WebResponse EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net
internal class FileWebRequestCreator : IWebRequestCreate // TypeDefIndex: 1545
{
	// Methods

	// RVA: 0x1F40A20 Offset: 0x1F40A20 VA: 0x1F40A20
	internal void .ctor() { }

	// RVA: 0x1F40A28 Offset: 0x1F40A28 VA: 0x1F40A28 Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
[Serializable]
public class FileWebResponse : WebResponse, IDisposable, ISerializable // TypeDefIndex: 1546
{
	// Fields
	private Uri responseUri; // 0x18
	private FileStream fileStream; // 0x20
	private long contentLength; // 0x28
	private WebHeaderCollection webHeaders; // 0x30
	private bool disposed; // 0x38

	// Properties
	public override long ContentLength { get; }
	public override string ContentType { get; }
	public override WebHeaderCollection Headers { get; }
	public override Uri ResponseUri { get; }

	// Methods

	// RVA: 0x1F4009C Offset: 0x1F4009C VA: 0x1F4009C
	internal void .ctor(Uri responseUri, FileStream fileStream) { }

	[ObsoleteAttribute] // RVA: 0xBD1F14 Offset: 0xBD1F14 VA: 0xBD1F14
	// RVA: 0x1F40A88 Offset: 0x1F40A88 VA: 0x1F40A88
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1F40CB0 Offset: 0x1F40CB0 VA: 0x1F40CB0 Slot: 7
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1F40CC0 Offset: 0x1F40CC0 VA: 0x1F40CC0 Slot: 6
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1F40D4C Offset: 0x1F40D4C VA: 0x1F40D4C Slot: 8
	public override long get_ContentLength() { }

	// RVA: 0x1F40E28 Offset: 0x1F40E28 VA: 0x1F40E28 Slot: 10
	public override string get_ContentType() { }

	// RVA: 0x1F40E7C Offset: 0x1F40E7C VA: 0x1F40E7C Slot: 12
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0x1F40EA0 Offset: 0x1F40EA0 VA: 0x1F40EA0 Slot: 15
	public override Uri get_ResponseUri() { }

	// RVA: 0x1F40EC4 Offset: 0x1F40EC4 VA: 0x1F40EC4 Slot: 18
	protected override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1F40FEC Offset: 0x1F40FEC VA: 0x1F40FEC Slot: 17
	public override Stream GetResponseStream() { }

	// RVA: 0x1F41010 Offset: 0x1F41010 VA: 0x1F41010 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1F410A8 Offset: 0x1F410A8 VA: 0x1F410A8 Slot: 16
	public override void Close() { }

	// RVA: 0x1F40D10 Offset: 0x1F40D10 VA: 0x1F40D10
	private void Dispose(bool disposing) { }

	// RVA: 0x1F40D70 Offset: 0x1F40D70 VA: 0x1F40D70
	private void CheckDisposed() { }
}

// Namespace: System.Net
internal class FtpAsyncResult : IAsyncResult // TypeDefIndex: 1547
{
	// Fields
	private FtpWebResponse response; // 0x10
	private ManualResetEvent waitHandle; // 0x18
	private Exception exception; // 0x20
	private AsyncCallback callback; // 0x28
	private Stream stream; // 0x30
	private object state; // 0x38
	private bool completed; // 0x40
	private bool synch; // 0x41
	private object locker; // 0x48

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }
	internal bool GotException { get; }
	internal Exception Exception { get; }
	internal FtpWebResponse Response { get; set; }
	internal Stream Stream { get; set; }

	// Methods

	// RVA: 0x1F4114C Offset: 0x1F4114C VA: 0x1F4114C
	public void .ctor(AsyncCallback callback, object state) { }

	// RVA: 0x1F411D0 Offset: 0x1F411D0 VA: 0x1F411D0 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x1F411D8 Offset: 0x1F411D8 VA: 0x1F411D8 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x1F412B0 Offset: 0x1F412B0 VA: 0x1F412B0 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x1F412B8 Offset: 0x1F412B8 VA: 0x1F412B8 Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0x1F412F8 Offset: 0x1F412F8 VA: 0x1F412F8
	internal bool get_GotException() { }

	// RVA: 0x1F41308 Offset: 0x1F41308 VA: 0x1F41308
	internal Exception get_Exception() { }

	// RVA: 0x1F41310 Offset: 0x1F41310 VA: 0x1F41310
	internal FtpWebResponse get_Response() { }

	// RVA: 0x1F41318 Offset: 0x1F41318 VA: 0x1F41318
	internal void set_Response(FtpWebResponse value) { }

	// RVA: 0x1F41320 Offset: 0x1F41320 VA: 0x1F41320
	internal Stream get_Stream() { }

	// RVA: 0x1F41328 Offset: 0x1F41328 VA: 0x1F41328
	internal void set_Stream(Stream value) { }

	// RVA: 0x1F41330 Offset: 0x1F41330 VA: 0x1F41330
	internal void WaitUntilComplete() { }

	// RVA: 0x1F413A8 Offset: 0x1F413A8 VA: 0x1F413A8
	internal bool WaitUntilComplete(int timeout, bool exitContext) { }

	// RVA: 0x1F41440 Offset: 0x1F41440 VA: 0x1F41440
	internal void SetCompleted(bool synch, Exception exc, FtpWebResponse response) { }

	// RVA: 0x1F415B0 Offset: 0x1F415B0 VA: 0x1F415B0
	internal void SetCompleted(bool synch, FtpWebResponse response) { }

	// RVA: 0x1F415C4 Offset: 0x1F415C4 VA: 0x1F415C4
	internal void SetCompleted(bool synch, Exception exc) { }

	// RVA: 0x1F414E8 Offset: 0x1F414E8 VA: 0x1F414E8
	internal void DoCallback() { }

	// RVA: 0x1F415D0 Offset: 0x1F415D0 VA: 0x1F415D0
	internal void Reset() { }
}

// Namespace: System.Net
internal class FtpDataStream : Stream, IDisposable // TypeDefIndex: 1548
{
	// Fields
	private FtpWebRequest request; // 0x10
	private Stream networkStream; // 0x18
	private bool disposed; // 0x20
	private bool isRead; // 0x21
	private int totalRead; // 0x24

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }
	internal Stream NetworkStream { get; }

	// Methods

	// RVA: 0x1F41674 Offset: 0x1F41674 VA: 0x1F41674
	internal void .ctor(FtpWebRequest request, Stream stream, bool isRead) { }

	// RVA: 0x1F41750 Offset: 0x1F41750 VA: 0x1F41750 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1F41784 Offset: 0x1F41784 VA: 0x1F41784 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1F4178C Offset: 0x1F4178C VA: 0x1F4178C Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1F4179C Offset: 0x1F4179C VA: 0x1F4179C Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1F417A4 Offset: 0x1F417A4 VA: 0x1F417A4 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1F4180C Offset: 0x1F4180C VA: 0x1F4180C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1F41874 Offset: 0x1F41874 VA: 0x1F41874 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1F418DC Offset: 0x1F418DC VA: 0x1F418DC
	internal Stream get_NetworkStream() { }

	// RVA: 0x1F419B8 Offset: 0x1F419B8 VA: 0x1F419B8 Slot: 13
	public override void Close() { }

	// RVA: 0x1F419C8 Offset: 0x1F419C8 VA: 0x1F419C8 Slot: 18
	public override void Flush() { }

	// RVA: 0x1F419CC Offset: 0x1F419CC VA: 0x1F419CC Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1F41A34 Offset: 0x1F41A34 VA: 0x1F41A34 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1F41A9C Offset: 0x1F41A9C VA: 0x1F41A9C
	private int ReadInternal(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F41DB0 Offset: 0x1F41DB0 VA: 0x1F41DB0 Slot: 25
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int size, AsyncCallback cb, object state) { }

	// RVA: 0x1F42008 Offset: 0x1F42008 VA: 0x1F42008 Slot: 27
	public override int EndRead(IAsyncResult asyncResult) { }

	// RVA: 0x1F42168 Offset: 0x1F42168 VA: 0x1F42168 Slot: 19
	public override int Read(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F42394 Offset: 0x1F42394 VA: 0x1F42394
	private void WriteInternal(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F424DC Offset: 0x1F424DC VA: 0x1F424DC Slot: 26
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int size, AsyncCallback cb, object state) { }

	// RVA: 0x1F42734 Offset: 0x1F42734 VA: 0x1F42734 Slot: 28
	public override void EndWrite(IAsyncResult asyncResult) { }

	// RVA: 0x1F42868 Offset: 0x1F42868 VA: 0x1F42868 Slot: 23
	public override void Write(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F42A8C Offset: 0x1F42A8C VA: 0x1F42A8C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1F42B0C Offset: 0x1F42B0C VA: 0x1F42B0C Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1F41900 Offset: 0x1F41900 VA: 0x1F41900
	private void CheckDisposed() { }
}

// Namespace: 
private sealed class FtpDataStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 1549
{
	// Methods

	// RVA: 0x1F42670 Offset: 0x1F42670 VA: 0x1F42670
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F42F78 Offset: 0x1F42F78 VA: 0x1F42F78 Slot: 11
	public virtual void Invoke(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F42680 Offset: 0x1F42680 VA: 0x1F42680 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int size, AsyncCallback callback, object object) { }

	// RVA: 0x1F4285C Offset: 0x1F4285C VA: 0x1F4285C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FtpDataStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 1550
{
	// Methods

	// RVA: 0x1F41F44 Offset: 0x1F41F44 VA: 0x1F41F44
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1F42B84 Offset: 0x1F42B84 VA: 0x1F42B84 Slot: 11
	public virtual int Invoke(byte[] buffer, int offset, int size) { }

	// RVA: 0x1F41F54 Offset: 0x1F41F54 VA: 0x1F41F54 Slot: 12
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int size, AsyncCallback callback, object object) { }

	// RVA: 0x1F4212C Offset: 0x1F4212C VA: 0x1F4212C Slot: 13
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Net
internal class FtpRequestCreator : IWebRequestCreate // TypeDefIndex: 1551
{
	// Methods

	// RVA: 0x1F43368 Offset: 0x1F43368 VA: 0x1F43368
	public void .ctor() { }

	// RVA: 0x1F43370 Offset: 0x1F43370 VA: 0x1F43370 Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
internal class FtpStatus // TypeDefIndex: 1552
{
	// Fields
	private readonly FtpStatusCode statusCode; // 0x10
	private readonly string statusDescription; // 0x18

	// Properties
	public FtpStatusCode StatusCode { get; }
	public string StatusDescription { get; }

	// Methods

	// RVA: 0x1F4354C Offset: 0x1F4354C VA: 0x1F4354C
	public void .ctor(FtpStatusCode statusCode, string statusDescription) { }

	// RVA: 0x1F43588 Offset: 0x1F43588 VA: 0x1F43588
	public FtpStatusCode get_StatusCode() { }

	// RVA: 0x1F43590 Offset: 0x1F43590 VA: 0x1F43590
	public string get_StatusDescription() { }
}

// Namespace: System.Net
public enum FtpStatusCode // TypeDefIndex: 1553
{
	// Fields
	public int value__; // 0x0
	public const FtpStatusCode Undefined = 0;
	public const FtpStatusCode RestartMarker = 110;
	public const FtpStatusCode ServiceTemporarilyNotAvailable = 120;
	public const FtpStatusCode DataAlreadyOpen = 125;
	public const FtpStatusCode OpeningData = 150;
	public const FtpStatusCode CommandOK = 200;
	public const FtpStatusCode CommandExtraneous = 202;
	public const FtpStatusCode DirectoryStatus = 212;
	public const FtpStatusCode FileStatus = 213;
	public const FtpStatusCode SystemType = 215;
	public const FtpStatusCode SendUserCommand = 220;
	public const FtpStatusCode ClosingControl = 221;
	public const FtpStatusCode ClosingData = 226;
	public const FtpStatusCode EnteringPassive = 227;
	public const FtpStatusCode LoggedInProceed = 230;
	public const FtpStatusCode ServerWantsSecureSession = 234;
	public const FtpStatusCode FileActionOK = 250;
	public const FtpStatusCode PathnameCreated = 257;
	public const FtpStatusCode SendPasswordCommand = 331;
	public const FtpStatusCode NeedLoginAccount = 332;
	public const FtpStatusCode FileCommandPending = 350;
	public const FtpStatusCode ServiceNotAvailable = 421;
	public const FtpStatusCode CantOpenData = 425;
	public const FtpStatusCode ConnectionClosed = 426;
	public const FtpStatusCode ActionNotTakenFileUnavailableOrBusy = 450;
	public const FtpStatusCode ActionAbortedLocalProcessingError = 451;
	public const FtpStatusCode ActionNotTakenInsufficientSpace = 452;
	public const FtpStatusCode CommandSyntaxError = 500;
	public const FtpStatusCode ArgumentSyntaxError = 501;
	public const FtpStatusCode CommandNotImplemented = 502;
	public const FtpStatusCode BadCommandSequence = 503;
	public const FtpStatusCode NotLoggedIn = 530;
	public const FtpStatusCode AccountNeeded = 532;
	public const FtpStatusCode ActionNotTakenFileUnavailable = 550;
	public const FtpStatusCode ActionAbortedUnknownPageType = 551;
	public const FtpStatusCode FileActionAborted = 552;
	public const FtpStatusCode ActionNotTakenFilenameNotAllowed = 553;
}

// Namespace: System.Net
public sealed class FtpWebRequest : WebRequest // TypeDefIndex: 1554
{
	// Fields
	private const string ChangeDir = "CWD";
	private const string UserCommand = "USER";
	private const string PasswordCommand = "PASS";
	private const string TypeCommand = "TYPE";
	private const string PassiveCommand = "PASV";
	private const string PortCommand = "PORT";
	private const string AbortCommand = "ABOR";
	private const string AuthCommand = "AUTH";
	private const string RestCommand = "REST";
	private const string RenameFromCommand = "RNFR";
	private const string RenameToCommand = "RNTO";
	private const string QuitCommand = "QUIT";
	private const string EOL = "\r\n";
	private Uri requestUri; // 0x20
	private string file_name; // 0x28
	private ServicePoint servicePoint; // 0x30
	private Stream origDataStream; // 0x38
	private Stream dataStream; // 0x40
	private Stream controlStream; // 0x48
	private StreamReader controlReader; // 0x50
	private NetworkCredential credentials; // 0x58
	private IPHostEntry hostEntry; // 0x60
	private IPEndPoint localEndPoint; // 0x68
	private IWebProxy proxy; // 0x70
	private int timeout; // 0x78
	private int rwTimeout; // 0x7C
	private long offset; // 0x80
	private bool binary; // 0x88
	private bool enableSsl; // 0x89
	private bool usePassive; // 0x8A
	private bool keepAlive; // 0x8B
	private string method; // 0x90
	private string renameTo; // 0x98
	private object locker; // 0xA0
	private FtpWebRequest.RequestState requestState; // 0xA8
	private FtpAsyncResult asyncResult; // 0xB0
	private FtpWebResponse ftpResponse; // 0xB8
	private Stream requestStream; // 0xC0
	private string initial_path; // 0xC8
	private static readonly string[] supportedCommands; // 0x0
	private RemoteCertificateValidationCallback callback; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xBD0F5C Offset: 0xBD0F5C VA: 0xBD0F5C
	private static RemoteCertificateValidationCallback <>f__am$cache1C; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xBD0F6C Offset: 0xBD0F6C VA: 0xBD0F6C
	private static Dictionary<string, int> <>f__switch$map5; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBD0F7C Offset: 0xBD0F7C VA: 0xBD0F7C
	private static Dictionary<string, int> <>f__switch$map6; // 0x18

	// Properties
	[MonoTODOAttribute] // RVA: 0xBD36A4 Offset: 0xBD36A4 VA: 0xBD36A4
	public X509CertificateCollection ClientCertificates { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD36B4 Offset: 0xBD36B4 VA: 0xBD36B4
	public override string ConnectionGroupName { get; set; }
	public override string ContentType { get; set; }
	public override long ContentLength { get; set; }
	public long ContentOffset { get; set; }
	public override ICredentials Credentials { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD36C4 Offset: 0xBD36C4 VA: 0xBD36C4
	public static RequestCachePolicy DefaultCachePolicy { get; set; }
	public bool EnableSsl { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD36D4 Offset: 0xBD36D4 VA: 0xBD36D4
	public override WebHeaderCollection Headers { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD36E4 Offset: 0xBD36E4 VA: 0xBD36E4
	public bool KeepAlive { get; set; }
	public override string Method { get; set; }
	public override bool PreAuthenticate { get; set; }
	public override IWebProxy Proxy { get; set; }
	public int ReadWriteTimeout { get; set; }
	public string RenameTo { get; set; }
	public override Uri RequestUri { get; }
	public ServicePoint ServicePoint { get; }
	public bool UsePassive { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD371C Offset: 0xBD371C VA: 0xBD371C
	public override bool UseDefaultCredentials { get; set; }
	public bool UseBinary { get; set; }
	public override int Timeout { get; set; }
	private string DataType { get; }
	private FtpWebRequest.RequestState State { get; set; }

	// Methods

	// RVA: 0x1F433D0 Offset: 0x1F433D0 VA: 0x1F433D0
	internal void .ctor(Uri uri) { }

	// RVA: 0x1F43598 Offset: 0x1F43598 VA: 0x1F43598
	private static void .cctor() { }

	// RVA: 0x1F43A48 Offset: 0x1F43A48 VA: 0x1F43A48
	private static Exception GetMustImplement() { }

	// RVA: 0x1F43AA4 Offset: 0x1F43AA4 VA: 0x1F43AA4
	public X509CertificateCollection get_ClientCertificates() { }

	// RVA: 0x1F43B10 Offset: 0x1F43B10 VA: 0x1F43B10
	public void set_ClientCertificates(X509CertificateCollection value) { }

	// RVA: 0x1F43B7C Offset: 0x1F43B7C VA: 0x1F43B7C Slot: 9
	public override string get_ConnectionGroupName() { }

	// RVA: 0x1F43BE8 Offset: 0x1F43BE8 VA: 0x1F43BE8 Slot: 10
	public override void set_ConnectionGroupName(string value) { }

	// RVA: 0x1F43C54 Offset: 0x1F43C54 VA: 0x1F43C54 Slot: 13
	public override string get_ContentType() { }

	// RVA: 0x1F43CBC Offset: 0x1F43CBC VA: 0x1F43CBC Slot: 14
	public override void set_ContentType(string value) { }

	// RVA: 0x1F43D24 Offset: 0x1F43D24 VA: 0x1F43D24 Slot: 11
	public override long get_ContentLength() { }

	// RVA: 0x1F43D2C Offset: 0x1F43D2C VA: 0x1F43D2C Slot: 12
	public override void set_ContentLength(long value) { }

	// RVA: 0x1F43D30 Offset: 0x1F43D30 VA: 0x1F43D30
	public long get_ContentOffset() { }

	// RVA: 0x1F43D38 Offset: 0x1F43D38 VA: 0x1F43D38
	public void set_ContentOffset(long value) { }

	// RVA: 0x1F43E74 Offset: 0x1F43E74 VA: 0x1F43E74 Slot: 15
	public override ICredentials get_Credentials() { }

	// RVA: 0x1F43E7C Offset: 0x1F43E7C VA: 0x1F43E7C Slot: 16
	public override void set_Credentials(ICredentials value) { }

	// RVA: 0x1F43F64 Offset: 0x1F43F64 VA: 0x1F43F64
	public static RequestCachePolicy get_DefaultCachePolicy() { }

	// RVA: 0x1F43FD0 Offset: 0x1F43FD0 VA: 0x1F43FD0
	public static void set_DefaultCachePolicy(RequestCachePolicy value) { }

	// RVA: 0x1F4403C Offset: 0x1F4403C VA: 0x1F4403C
	public bool get_EnableSsl() { }

	// RVA: 0x1F44044 Offset: 0x1F44044 VA: 0x1F44044
	public void set_EnableSsl(bool value) { }

	// RVA: 0x1F44070 Offset: 0x1F44070 VA: 0x1F44070 Slot: 17
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0x1F440DC Offset: 0x1F440DC VA: 0x1F440DC Slot: 18
	public override void set_Headers(WebHeaderCollection value) { }

	// RVA: 0x1F44148 Offset: 0x1F44148 VA: 0x1F44148
	public bool get_KeepAlive() { }

	// RVA: 0x1F44150 Offset: 0x1F44150 VA: 0x1F44150
	public void set_KeepAlive(bool value) { }

	// RVA: 0x1F44154 Offset: 0x1F44154 VA: 0x1F44154 Slot: 19
	public override string get_Method() { }

	// RVA: 0x1F4415C Offset: 0x1F4415C VA: 0x1F4415C Slot: 20
	public override void set_Method(string value) { }

	// RVA: 0x1F44288 Offset: 0x1F44288 VA: 0x1F44288 Slot: 21
	public override bool get_PreAuthenticate() { }

	// RVA: 0x1F442F0 Offset: 0x1F442F0 VA: 0x1F442F0 Slot: 22
	public override void set_PreAuthenticate(bool value) { }

	// RVA: 0x1F44358 Offset: 0x1F44358 VA: 0x1F44358 Slot: 23
	public override IWebProxy get_Proxy() { }

	// RVA: 0x1F44360 Offset: 0x1F44360 VA: 0x1F44360 Slot: 24
	public override void set_Proxy(IWebProxy value) { }

	// RVA: 0x1F4238C Offset: 0x1F4238C VA: 0x1F4238C
	public int get_ReadWriteTimeout() { }

	// RVA: 0x1F443F4 Offset: 0x1F443F4 VA: 0x1F443F4
	public void set_ReadWriteTimeout(int value) { }

	// RVA: 0x1F4448C Offset: 0x1F4448C VA: 0x1F4448C
	public string get_RenameTo() { }

	// RVA: 0x1F44494 Offset: 0x1F44494 VA: 0x1F44494
	public void set_RenameTo(string value) { }

	// RVA: 0x1F44550 Offset: 0x1F44550 VA: 0x1F44550 Slot: 25
	public override Uri get_RequestUri() { }

	// RVA: 0x1F44558 Offset: 0x1F44558 VA: 0x1F44558
	public ServicePoint get_ServicePoint() { }

	// RVA: 0x1F445E8 Offset: 0x1F445E8 VA: 0x1F445E8
	public bool get_UsePassive() { }

	// RVA: 0x1F445F0 Offset: 0x1F445F0 VA: 0x1F445F0
	public void set_UsePassive(bool value) { }

	// RVA: 0x1F4461C Offset: 0x1F4461C VA: 0x1F4461C Slot: 28
	public override bool get_UseDefaultCredentials() { }

	// RVA: 0x1F44688 Offset: 0x1F44688 VA: 0x1F44688 Slot: 29
	public override void set_UseDefaultCredentials(bool value) { }

	// RVA: 0x1F446F4 Offset: 0x1F446F4 VA: 0x1F446F4
	public bool get_UseBinary() { }

	// RVA: 0x1F446FC Offset: 0x1F446FC VA: 0x1F446FC
	public void set_UseBinary(bool value) { }

	// RVA: 0x1F44728 Offset: 0x1F44728 VA: 0x1F44728 Slot: 26
	public override int get_Timeout() { }

	// RVA: 0x1F44730 Offset: 0x1F44730 VA: 0x1F44730 Slot: 27
	public override void set_Timeout(int value) { }

	// RVA: 0x1F447C8 Offset: 0x1F447C8 VA: 0x1F447C8
	private string get_DataType() { }

	// RVA: 0x1F44828 Offset: 0x1F44828 VA: 0x1F44828
	private FtpWebRequest.RequestState get_State() { }

	// RVA: 0x1F44868 Offset: 0x1F44868 VA: 0x1F44868
	private void set_State(FtpWebRequest.RequestState value) { }

	// RVA: 0x1F449A0 Offset: 0x1F449A0 VA: 0x1F449A0 Slot: 30
	public override void Abort() { }

	// RVA: 0x1F44E2C Offset: 0x1F44E2C VA: 0x1F44E2C Slot: 32
	public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state) { }

	// RVA: 0x1F4505C Offset: 0x1F4505C VA: 0x1F4505C Slot: 34
	public override WebResponse EndGetResponse(IAsyncResult asyncResult) { }

	// RVA: 0x1F451C8 Offset: 0x1F451C8 VA: 0x1F451C8 Slot: 36
	public override WebResponse GetResponse() { }

	// RVA: 0x1F451F8 Offset: 0x1F451F8 VA: 0x1F451F8 Slot: 31
	public override IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state) { }

	// RVA: 0x1F454A0 Offset: 0x1F454A0 VA: 0x1F454A0 Slot: 33
	public override Stream EndGetRequestStream(IAsyncResult asyncResult) { }

	// RVA: 0x1F45734 Offset: 0x1F45734 VA: 0x1F45734 Slot: 35
	public override Stream GetRequestStream() { }

	// RVA: 0x1F4455C Offset: 0x1F4455C VA: 0x1F4455C
	private ServicePoint GetServicePoint() { }

	// RVA: 0x1F45764 Offset: 0x1F45764 VA: 0x1F45764
	private void ResolveHost() { }

	// RVA: 0x1F458C0 Offset: 0x1F458C0 VA: 0x1F458C0
	private void ProcessRequest() { }

	// RVA: 0x1F4630C Offset: 0x1F4630C VA: 0x1F4630C
	private void SetType() { }

	// RVA: 0x1F46584 Offset: 0x1F46584 VA: 0x1F46584
	private string GetRemoteFolderPath(Uri uri) { }

	// RVA: 0x1F4679C Offset: 0x1F4679C VA: 0x1F4679C
	private void CWDAndSetFileName(Uri uri) { }

	// RVA: 0x1F45ADC Offset: 0x1F45ADC VA: 0x1F45ADC
	private void ProcessMethod() { }

	// RVA: 0x1F47784 Offset: 0x1F47784 VA: 0x1F47784
	private void CloseControlConnection() { }

	// RVA: 0x1F41CFC Offset: 0x1F41CFC VA: 0x1F41CFC
	internal void CloseDataConnection() { }

	// RVA: 0x1F47820 Offset: 0x1F47820 VA: 0x1F47820
	private void CloseConnection() { }

	// RVA: 0x1F46FB4 Offset: 0x1F46FB4 VA: 0x1F46FB4
	private void ProcessSimpleMethod() { }

	// RVA: 0x1F46F0C Offset: 0x1F46F0C VA: 0x1F46F0C
	private void UploadData() { }

	// RVA: 0x1F46E60 Offset: 0x1F46E60 VA: 0x1F46E60
	private void DownloadData() { }

	// RVA: 0x1F43DCC Offset: 0x1F43DCC VA: 0x1F43DCC
	private void CheckRequestStarted() { }

	// RVA: 0x1F46960 Offset: 0x1F46960 VA: 0x1F46960
	private void OpenControlConnection() { }

	// RVA: 0x1F481C4 Offset: 0x1F481C4 VA: 0x1F481C4
	private static string GetInitialPath(FtpStatus status) { }

	// RVA: 0x1F48408 Offset: 0x1F48408 VA: 0x1F48408
	private Socket SetupPassiveConnection(string statusDescription) { }

	// RVA: 0x1F4647C Offset: 0x1F4647C VA: 0x1F4647C
	private Exception CreateExceptionFromResponse(FtpStatus status) { }

	// RVA: 0x1F41D30 Offset: 0x1F41D30 VA: 0x1F41D30
	internal void SetTransferCompleted() { }

	// RVA: 0x1F48988 Offset: 0x1F48988 VA: 0x1F48988
	internal void OperationCompleted() { }

	// RVA: 0x1F45F90 Offset: 0x1F45F90 VA: 0x1F45F90
	private void SetCompleteWithError(Exception exc) { }

	// RVA: 0x1F48998 Offset: 0x1F48998 VA: 0x1F48998
	private Socket InitDataConnection() { }

	// RVA: 0x1F47858 Offset: 0x1F47858 VA: 0x1F47858
	private void OpenDataConnection() { }

	// RVA: 0x1F47C64 Offset: 0x1F47C64 VA: 0x1F47C64
	private void Authenticate() { }

	// RVA: 0x1F46464 Offset: 0x1F46464 VA: 0x1F46464
	private FtpStatus SendCommand(string command, string[] parameters) { }

	// RVA: 0x1F44B28 Offset: 0x1F44B28 VA: 0x1F44B28
	private FtpStatus SendCommand(bool waitResponse, string command, string[] parameters) { }

	// RVA: 0x1F49200 Offset: 0x1F49200 VA: 0x1F49200
	internal static FtpStatus ServiceNotAvailable() { }

	// RVA: 0x1F46010 Offset: 0x1F46010 VA: 0x1F46010
	internal FtpStatus GetResponseStatus() { }

	// RVA: 0x1F490E8 Offset: 0x1F490E8 VA: 0x1F490E8
	private void InitiateSecureConnection(ref Stream stream) { }

	// RVA: 0x1F49008 Offset: 0x1F49008 VA: 0x1F49008
	internal bool ChangeToSSLSocket(ref Stream stream) { }

	// RVA: 0x1F44D88 Offset: 0x1F44D88 VA: 0x1F44D88
	private bool InFinalState() { }

	// RVA: 0x1F45FB0 Offset: 0x1F45FB0 VA: 0x1F45FB0
	private bool InProgress() { }

	// RVA: 0x1F41C4C Offset: 0x1F41C4C VA: 0x1F41C4C
	internal void CheckIfAborted() { }

	// RVA: 0x1F44910 Offset: 0x1F44910 VA: 0x1F44910
	private void CheckFinalState() { }

	[CompilerGeneratedAttribute] // RVA: 0xBD1F50 Offset: 0xBD1F50 VA: 0xBD1F50
	// RVA: 0x1F49284 Offset: 0x1F49284 VA: 0x1F49284
	private static bool <callback>m__B(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { }
}

// Namespace: 
private enum FtpWebRequest.RequestState // TypeDefIndex: 1555
{
	// Fields
	public int value__; // 0x0
	public const FtpWebRequest.RequestState Before = 0;
	public const FtpWebRequest.RequestState Scheduled = 1;
	public const FtpWebRequest.RequestState Connecting = 2;
	public const FtpWebRequest.RequestState Authenticating = 3;
	public const FtpWebRequest.RequestState OpeningData = 4;
	public const FtpWebRequest.RequestState TransferInProgress = 5;
	public const FtpWebRequest.RequestState Finished = 6;
	public const FtpWebRequest.RequestState Aborted = 7;
	public const FtpWebRequest.RequestState Error = 8;
}

// Namespace: System.Net
public class FtpWebResponse : WebResponse // TypeDefIndex: 1556
{
	// Fields
	private Stream stream; // 0x18
	private Uri uri; // 0x20
	private FtpStatusCode statusCode; // 0x28
	private DateTime lastModified; // 0x30
	private string bannerMessage; // 0x40
	private string welcomeMessage; // 0x48
	private string exitMessage; // 0x50
	private string statusDescription; // 0x58
	private string method; // 0x60
	private bool disposed; // 0x68
	private FtpWebRequest request; // 0x70
	internal long contentLength; // 0x78

	// Properties
	public override long ContentLength { get; }
	public override WebHeaderCollection Headers { get; }
	public override Uri ResponseUri { get; }
	public DateTime LastModified { get; set; }
	public string BannerMessage { get; set; }
	public string WelcomeMessage { get; set; }
	public string ExitMessage { get; set; }
	public FtpStatusCode StatusCode { get; set; }
	public string StatusDescription { get; set; }
	internal Stream Stream { get; set; }

	// Methods

	// RVA: 0x1FD9D60 Offset: 0x1FD9D60 VA: 0x1FD9D60
	internal void .ctor(FtpWebRequest request, Uri uri, string method, bool keepAlive) { }

	// RVA: 0x1FD9E54 Offset: 0x1FD9E54 VA: 0x1FD9E54
	internal void .ctor(FtpWebRequest request, Uri uri, string method, FtpStatusCode statusCode, string statusDescription) { }

	// RVA: 0x1FD9F5C Offset: 0x1FD9F5C VA: 0x1FD9F5C
	internal void .ctor(FtpWebRequest request, Uri uri, string method, FtpStatus status) { }

	// RVA: 0x1FD9FF4 Offset: 0x1FD9FF4 VA: 0x1FD9FF4 Slot: 8
	public override long get_ContentLength() { }

	// RVA: 0x1FD9FFC Offset: 0x1FD9FFC VA: 0x1FD9FFC Slot: 12
	public override WebHeaderCollection get_Headers() { }

	// RVA: 0x1FDA058 Offset: 0x1FDA058 VA: 0x1FDA058 Slot: 15
	public override Uri get_ResponseUri() { }

	// RVA: 0x1FDA060 Offset: 0x1FDA060 VA: 0x1FDA060
	public DateTime get_LastModified() { }

	// RVA: 0x1FDA06C Offset: 0x1FDA06C VA: 0x1FDA06C
	internal void set_LastModified(DateTime value) { }

	// RVA: 0x1FDA074 Offset: 0x1FDA074 VA: 0x1FDA074
	public string get_BannerMessage() { }

	// RVA: 0x1FDA07C Offset: 0x1FDA07C VA: 0x1FDA07C
	internal void set_BannerMessage(string value) { }

	// RVA: 0x1FDA084 Offset: 0x1FDA084 VA: 0x1FDA084
	public string get_WelcomeMessage() { }

	// RVA: 0x1FDA08C Offset: 0x1FDA08C VA: 0x1FDA08C
	internal void set_WelcomeMessage(string value) { }

	// RVA: 0x1FDA094 Offset: 0x1FDA094 VA: 0x1FDA094
	public string get_ExitMessage() { }

	// RVA: 0x1FDA09C Offset: 0x1FDA09C VA: 0x1FDA09C
	internal void set_ExitMessage(string value) { }

	// RVA: 0x1FDA0A4 Offset: 0x1FDA0A4 VA: 0x1FDA0A4
	public FtpStatusCode get_StatusCode() { }

	// RVA: 0x1FDA0AC Offset: 0x1FDA0AC VA: 0x1FDA0AC
	private void set_StatusCode(FtpStatusCode value) { }

	// RVA: 0x1FDA0B4 Offset: 0x1FDA0B4 VA: 0x1FDA0B4
	public string get_StatusDescription() { }

	// RVA: 0x1FDA0BC Offset: 0x1FDA0BC VA: 0x1FDA0BC
	private void set_StatusDescription(string value) { }

	// RVA: 0x1FDA0C4 Offset: 0x1FDA0C4 VA: 0x1FDA0C4 Slot: 16
	public override void Close() { }

	// RVA: 0x1FDA188 Offset: 0x1FDA188 VA: 0x1FDA188 Slot: 17
	public override Stream GetResponseStream() { }

	// RVA: 0x1FDA344 Offset: 0x1FDA344 VA: 0x1FDA344
	internal void set_Stream(Stream value) { }

	// RVA: 0x1FDA34C Offset: 0x1FDA34C VA: 0x1FDA34C
	internal Stream get_Stream() { }

