	// Properties
	public bool EndOfStream { get; }

	// Methods

	// RVA: 0x2733C04 Offset: 0x2733C04 VA: 0x2733C04
	internal void .ctor() { }

	// RVA: 0x2733C74 Offset: 0x2733C74 VA: 0x2733C74
	public void .ctor(Stream stream) { }

	// RVA: 0x2733D9C Offset: 0x2733D9C VA: 0x2733D9C
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x2733CFC Offset: 0x2733CFC VA: 0x2733CFC
	public void .ctor(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x2728CD4 Offset: 0x2728CD4 VA: 0x2728CD4
	public void .ctor(string path) { }

	// RVA: 0x2729470 Offset: 0x2729470 VA: 0x2729470
	public void .ctor(string path, Encoding encoding) { }

	// RVA: 0x2733FC8 Offset: 0x2733FC8 VA: 0x2733FC8
	public void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x27341DC Offset: 0x27341DC VA: 0x27341DC
	private static void .cctor() { }

	// RVA: 0x2733DA8 Offset: 0x2733DA8 VA: 0x2733DA8
	internal void Initialize(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x272926C Offset: 0x272926C VA: 0x272926C
	public bool get_EndOfStream() { }

	// RVA: 0x27342A8 Offset: 0x27342A8 VA: 0x27342A8 Slot: 5
	public override void Close() { }

	// RVA: 0x27342B8 Offset: 0x27342B8 VA: 0x27342B8 Slot: 6
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2734328 Offset: 0x2734328 VA: 0x2734328
	private int DoChecks(int count) { }

	// RVA: 0x27348AC Offset: 0x27348AC VA: 0x27348AC
	private int ReadBuffer() { }

	// RVA: 0x2734A88 Offset: 0x2734A88 VA: 0x2734A88 Slot: 7
	public override int Peek() { }

	// RVA: 0x2734B7C Offset: 0x2734B7C VA: 0x2734B7C Slot: 8
	public override int Read() { }

	// RVA: 0x2734C80 Offset: 0x2734C80 VA: 0x2734C80 Slot: 9
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x2734E84 Offset: 0x2734E84 VA: 0x2734E84
	private int FindNextEOL() { }

	// RVA: 0x2734F68 Offset: 0x2734F68 VA: 0x2734F68 Slot: 10
	public override string ReadLine() { }

	// RVA: 0x2735268 Offset: 0x2735268 VA: 0x2735268 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: 
private class StreamReader.NullStreamReader : StreamReader // TypeDefIndex: 300
{
	// Methods

	// RVA: 0x2734244 Offset: 0x2734244 VA: 0x2734244
	public void .ctor() { }

	// RVA: 0x27353B0 Offset: 0x27353B0 VA: 0x27353B0 Slot: 7
	public override int Peek() { }

	// RVA: 0x27353B8 Offset: 0x27353B8 VA: 0x27353B8 Slot: 8
	public override int Read() { }

	// RVA: 0x27353C0 Offset: 0x27353C0 VA: 0x27353C0 Slot: 9
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x27353C8 Offset: 0x27353C8 VA: 0x27353C8 Slot: 10
	public override string ReadLine() { }

	// RVA: 0x27353D0 Offset: 0x27353D0 VA: 0x27353D0 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC315E8 Offset: 0xC315E8 VA: 0xC315E8
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 301
{
	// Fields
	private Encoding internalEncoding; // 0x20
	private Stream internalStream; // 0x28
	private bool iflush; // 0x30
	private byte[] byte_buf; // 0x38
	private int byte_pos; // 0x40
	private char[] decode_buf; // 0x48
	private int decode_pos; // 0x50
	private bool DisposedAlready; // 0x54
	private bool preamble_done; // 0x55
	public static readonly StreamWriter Null; // 0x0

	// Properties
	public virtual bool AutoFlush { set; }
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x2735438 Offset: 0x2735438 VA: 0x2735438
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x2735440 Offset: 0x2735440 VA: 0x2735440
	public void .ctor(Stream stream, Encoding encoding, int bufferSize) { }

	// RVA: 0x2729700 Offset: 0x2729700 VA: 0x2729700
	public void .ctor(string path) { }

	// RVA: 0x27358E8 Offset: 0x27358E8 VA: 0x27358E8
	public void .ctor(string path, bool append) { }

	// RVA: 0x27299F0 Offset: 0x27299F0 VA: 0x27299F0
	public void .ctor(string path, bool append, Encoding encoding) { }

	// RVA: 0x2735718 Offset: 0x2735718 VA: 0x2735718
	public void .ctor(string path, bool append, Encoding encoding, int bufferSize) { }

	// RVA: 0x2735974 Offset: 0x2735974 VA: 0x2735974
	private static void .cctor() { }

	// RVA: 0x27355F8 Offset: 0x27355F8 VA: 0x27355F8
	internal void Initialize(Encoding encoding, int bufferSize) { }

	// RVA: 0x2735A48 Offset: 0x2735A48 VA: 0x2735A48 Slot: 21
	public virtual void set_AutoFlush(bool value) { }

	// RVA: 0x2735A64 Offset: 0x2735A64 VA: 0x2735A64 Slot: 5
	public override Encoding get_Encoding() { }

	// RVA: 0x2735A6C Offset: 0x2735A6C VA: 0x2735A6C Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2735C24 Offset: 0x2735C24 VA: 0x2735C24 Slot: 8
	public override void Flush() { }

	// RVA: 0x2735D94 Offset: 0x2735D94 VA: 0x2735D94
	private void FlushBytes() { }

	// RVA: 0x2735CF8 Offset: 0x2735CF8 VA: 0x2735CF8
	private void Decode() { }

	// RVA: 0x2735E7C Offset: 0x2735E7C VA: 0x2735E7C Slot: 13
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x2736028 Offset: 0x2736028 VA: 0x2736028
	private void LowLevelWrite(char[] buffer, int index, int count) { }

	// RVA: 0x27360E8 Offset: 0x27360E8 VA: 0x27360E8
	private void LowLevelWrite(string s) { }

	// RVA: 0x2736228 Offset: 0x2736228 VA: 0x2736228 Slot: 9
	public override void Write(char value) { }

	// RVA: 0x273634C Offset: 0x273634C VA: 0x273634C Slot: 10
	public override void Write(char[] buffer) { }

	// RVA: 0x2736420 Offset: 0x2736420 VA: 0x2736420 Slot: 11
	public override void Write(string value) { }

	// RVA: 0x27364EC Offset: 0x27364EC VA: 0x27364EC Slot: 6
	public override void Close() { }

	// RVA: 0x27364FC Offset: 0x27364FC VA: 0x27364FC Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC315FC Offset: 0xC315FC VA: 0xC315FC
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 302
{
	// Fields
	private string source; // 0x10
	private int nextChar; // 0x18
	private int sourceLength; // 0x1C

	// Methods

	// RVA: 0x273657C Offset: 0x273657C VA: 0x273657C
	public void .ctor(string s) { }

	// RVA: 0x2736654 Offset: 0x2736654 VA: 0x2736654 Slot: 5
	public override void Close() { }

	// RVA: 0x2736664 Offset: 0x2736664 VA: 0x2736664 Slot: 6
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2736678 Offset: 0x2736678 VA: 0x2736678 Slot: 7
	public override int Peek() { }

	// RVA: 0x273677C Offset: 0x273677C VA: 0x273677C Slot: 8
	public override int Read() { }

	// RVA: 0x27367E4 Offset: 0x27367E4 VA: 0x27367E4 Slot: 9
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x2736938 Offset: 0x2736938 VA: 0x2736938 Slot: 10
	public override string ReadLine() { }

	// RVA: 0x2736A84 Offset: 0x2736A84 VA: 0x2736A84 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x27366D0 Offset: 0x27366D0 VA: 0x27366D0
	private void CheckObjectDisposedException() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31610 Offset: 0xC31610 VA: 0xC31610
[MonoTODOAttribute] // RVA: 0xC31610 Offset: 0xC31610 VA: 0xC31610
[Serializable]
public class StringWriter : TextWriter // TypeDefIndex: 303
{
	// Fields
	private StringBuilder internalString; // 0x20
	private bool disposed; // 0x28

	// Properties
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x2736ADC Offset: 0x2736ADC VA: 0x2736ADC
	public void .ctor() { }

	// RVA: 0x2736B44 Offset: 0x2736B44 VA: 0x2736B44
	public void .ctor(StringBuilder sb) { }

	// RVA: 0x2736B4C Offset: 0x2736B4C VA: 0x2736B4C
	public void .ctor(StringBuilder sb, IFormatProvider formatProvider) { }

	// RVA: 0x2736C10 Offset: 0x2736C10 VA: 0x2736C10 Slot: 5
	public override Encoding get_Encoding() { }

	// RVA: 0x2736C70 Offset: 0x2736C70 VA: 0x2736C70 Slot: 6
	public override void Close() { }

	// RVA: 0x2736CA4 Offset: 0x2736CA4 VA: 0x2736CA4 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2736CE8 Offset: 0x2736CE8 VA: 0x2736CE8 Slot: 3
	public override string ToString() { }

	// RVA: 0x2736D18 Offset: 0x2736D18 VA: 0x2736D18 Slot: 9
	public override void Write(char value) { }

	// RVA: 0x2736DEC Offset: 0x2736DEC VA: 0x2736DEC Slot: 11
	public override void Write(string value) { }

	// RVA: 0x2736EC0 Offset: 0x2736EC0 VA: 0x2736EC0 Slot: 13
	public override void Write(char[] buffer, int index, int count) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31660 Offset: 0xC31660 VA: 0xC31660
[Serializable]
public abstract class TextReader : IDisposable // TypeDefIndex: 304
{
	// Fields
	public static readonly TextReader Null; // 0x0

	// Methods

	// RVA: 0x2733C6C Offset: 0x2733C6C VA: 0x2733C6C
	protected void .ctor() { }

	// RVA: 0x2738008 Offset: 0x2738008 VA: 0x2738008
	private static void .cctor() { }

	// RVA: 0x27380D8 Offset: 0x27380D8 VA: 0x27380D8 Slot: 5
	public virtual void Close() { }

	// RVA: 0x27380E8 Offset: 0x27380E8 VA: 0x27380E8 Slot: 4
	public void Dispose() { }

	// RVA: 0x2734318 Offset: 0x2734318 VA: 0x2734318 Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x27380F8 Offset: 0x27380F8 VA: 0x27380F8 Slot: 7
	public virtual int Peek() { }

	// RVA: 0x2738100 Offset: 0x2738100 VA: 0x2738100 Slot: 8
	public virtual int Read() { }

	// RVA: 0x2738108 Offset: 0x2738108 VA: 0x2738108 Slot: 9
	public virtual int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x27381C0 Offset: 0x27381C0 VA: 0x27381C0 Slot: 10
	public virtual string ReadLine() { }

	// RVA: 0x2738228 Offset: 0x2738228 VA: 0x2738228 Slot: 11
	public virtual string ReadToEnd() { }

	// RVA: 0x2738290 Offset: 0x2738290 VA: 0x2738290
	public static TextReader Synchronized(TextReader reader) { }
}

// Namespace: 
private class TextReader.NullTextReader : TextReader // TypeDefIndex: 305
{
	// Methods

	// RVA: 0x2738070 Offset: 0x2738070 VA: 0x2738070
	public void .ctor() { }

	// RVA: 0x2738364 Offset: 0x2738364 VA: 0x2738364 Slot: 10
	public override string ReadLine() { }
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedReader : TextReader // TypeDefIndex: 306
{
	// Fields
	private TextReader reader; // 0x10

	// Methods

	// RVA: 0x2737080 Offset: 0x2737080 VA: 0x2737080
	public void .ctor(TextReader reader) { }

	// RVA: 0x27370FC Offset: 0x27370FC VA: 0x27370FC Slot: 5
	public override void Close() { }

	// RVA: 0x2737194 Offset: 0x2737194 VA: 0x2737194 Slot: 7
	public override int Peek() { }

	// RVA: 0x273722C Offset: 0x273722C VA: 0x273722C Slot: 10
	public override string ReadLine() { }

	// RVA: 0x27372C4 Offset: 0x27372C4 VA: 0x27372C4 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x273735C Offset: 0x273735C VA: 0x273735C Slot: 8
	public override int Read() { }

	// RVA: 0x27373F4 Offset: 0x27373F4 VA: 0x27373F4 Slot: 9
	public override int Read(char[] buffer, int index, int count) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xC31674 Offset: 0xC31674 VA: 0xC31674
[Serializable]
public abstract class TextWriter : IDisposable // TypeDefIndex: 307
{
	// Fields
	protected char[] CoreNewLine; // 0x10
	internal IFormatProvider internalFormatProvider; // 0x18
	public static readonly TextWriter Null; // 0x0

	// Properties
	public abstract Encoding Encoding { get; }

	// Methods

	// RVA: 0x27355B0 Offset: 0x27355B0 VA: 0x27355B0
	protected void .ctor() { }

	// RVA: 0x273836C Offset: 0x273836C VA: 0x273836C
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract Encoding get_Encoding();

	// RVA: 0x2738438 Offset: 0x2738438 VA: 0x2738438 Slot: 6
	public virtual void Close() { }

	// RVA: 0x2736CD8 Offset: 0x2736CD8 VA: 0x2736CD8 Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x2738448 Offset: 0x2738448 VA: 0x2738448 Slot: 4
	public void Dispose() { }

	// RVA: 0x273847C Offset: 0x273847C VA: 0x273847C Slot: 8
	public virtual void Flush() { }

	// RVA: 0x2738480 Offset: 0x2738480 VA: 0x2738480
	internal static TextWriter Synchronized(TextWriter writer, bool neverClose) { }

	// RVA: 0x2738564 Offset: 0x2738564 VA: 0x2738564 Slot: 9
	public virtual void Write(char value) { }

	// RVA: 0x2738568 Offset: 0x2738568 VA: 0x2738568 Slot: 10
	public virtual void Write(char[] buffer) { }

	// RVA: 0x2738584 Offset: 0x2738584 VA: 0x2738584 Slot: 11
	public virtual void Write(string value) { }

	// RVA: 0x27385CC Offset: 0x27385CC VA: 0x27385CC Slot: 12
	public virtual void Write(string format, object arg0) { }

	// RVA: 0x273865C Offset: 0x273865C VA: 0x273865C Slot: 13
	public virtual void Write(char[] buffer, int index, int count) { }

	// RVA: 0x27387BC Offset: 0x27387BC VA: 0x27387BC Slot: 14
	public virtual void Write(string format, object arg0, object arg1) { }

	// RVA: 0x273885C Offset: 0x273885C VA: 0x273885C Slot: 15
	public virtual void Write(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x2738904 Offset: 0x2738904 VA: 0x2738904 Slot: 16
	public virtual void WriteLine() { }

	// RVA: 0x2738914 Offset: 0x2738914 VA: 0x2738914 Slot: 17
	public virtual void WriteLine(string value) { }

	// RVA: 0x273894C Offset: 0x273894C VA: 0x273894C Slot: 18
	public virtual void WriteLine(string format, object arg0) { }

	// RVA: 0x2738984 Offset: 0x2738984 VA: 0x2738984 Slot: 19
	public virtual void WriteLine(char[] buffer, int index, int count) { }

	// RVA: 0x27389BC Offset: 0x27389BC VA: 0x27389BC Slot: 20
	public virtual void WriteLine(string format, object arg0, object arg1) { }
}

// Namespace: 
private sealed class TextWriter.NullTextWriter : TextWriter // TypeDefIndex: 308
{
	// Properties
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x27383D4 Offset: 0x27383D4 VA: 0x27383D4
	public void .ctor() { }

	// RVA: 0x27389F8 Offset: 0x27389F8 VA: 0x27389F8 Slot: 5
	public override Encoding get_Encoding() { }

	// RVA: 0x2738A58 Offset: 0x2738A58 VA: 0x2738A58 Slot: 11
	public override void Write(string s) { }

	// RVA: 0x2738A5C Offset: 0x2738A5C VA: 0x2738A5C Slot: 9
	public override void Write(char value) { }

	// RVA: 0x2738A60 Offset: 0x2738A60 VA: 0x2738A60 Slot: 13
	public override void Write(char[] value, int index, int count) { }
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedWriter : TextWriter // TypeDefIndex: 309
{
	// Fields
	private TextWriter writer; // 0x20
	private bool neverClose; // 0x28

	// Properties
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x27374B4 Offset: 0x27374B4 VA: 0x27374B4
	public void .ctor(TextWriter writer, bool neverClose) { }

	// RVA: 0x2737538 Offset: 0x2737538 VA: 0x2737538 Slot: 6
	public override void Close() { }

	// RVA: 0x27375DC Offset: 0x27375DC VA: 0x27375DC Slot: 8
	public override void Flush() { }

	// RVA: 0x2737674 Offset: 0x2737674 VA: 0x2737674 Slot: 9
	public override void Write(char value) { }

	// RVA: 0x2737724 Offset: 0x2737724 VA: 0x2737724 Slot: 10
	public override void Write(char[] value) { }

	// RVA: 0x27377D4 Offset: 0x27377D4 VA: 0x27377D4 Slot: 11
	public override void Write(string value) { }

	// RVA: 0x2737884 Offset: 0x2737884 VA: 0x2737884 Slot: 12
	public override void Write(string format, object value) { }

	// RVA: 0x273793C Offset: 0x273793C VA: 0x273793C Slot: 13
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x2737A0C Offset: 0x2737A0C VA: 0x2737A0C Slot: 14
	public override void Write(string format, object arg0, object arg1) { }

	// RVA: 0x2737AE0 Offset: 0x2737AE0 VA: 0x2737AE0 Slot: 15
	public override void Write(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x2737BBC Offset: 0x2737BBC VA: 0x2737BBC Slot: 16
	public override void WriteLine() { }

	// RVA: 0x2737C58 Offset: 0x2737C58 VA: 0x2737C58 Slot: 17
	public override void WriteLine(string value) { }

	// RVA: 0x2737D0C Offset: 0x2737D0C VA: 0x2737D0C Slot: 18
	public override void WriteLine(string format, object value) { }

	// RVA: 0x2737DC8 Offset: 0x2737DC8 VA: 0x2737DC8 Slot: 19
	public override void WriteLine(char[] buffer, int index, int count) { }

	// RVA: 0x2737E9C Offset: 0x2737E9C VA: 0x2737E9C Slot: 20
	public override void WriteLine(string format, object arg0, object arg1) { }

	// RVA: 0x2737F70 Offset: 0x2737F70 VA: 0x2737F70 Slot: 5
	public override Encoding get_Encoding() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 310
{
	// Fields
	private static bool[] newline; // 0x0
	private static char newlineChar; // 0x8

	// Methods

	// RVA: 0x2738A64 Offset: 0x2738A64 VA: 0x2738A64
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x2738AE8 Offset: 0x2738AE8 VA: 0x2738AE8
	private static void .cctor() { }

	// RVA: 0x2738BC0 Offset: 0x2738BC0 VA: 0x2738BC0 Slot: 7
	public override int Peek() { }

	// RVA: 0x2738C7C Offset: 0x2738C7C VA: 0x2738C7C Slot: 8
	public override int Read() { }

	// RVA: 0x2738D38 Offset: 0x2738D38 VA: 0x2738D38 Slot: 9
	public override int Read([In] [Out] char[] dest_buffer, int index, int count) { }

	// RVA: 0x2738FB4 Offset: 0x2738FB4 VA: 0x2738FB4
	private bool CheckEOL(char current) { }

	// RVA: 0x273920C Offset: 0x273920C VA: 0x273920C Slot: 10
	public override string ReadLine() { }

	// RVA: 0x27392C8 Offset: 0x27392C8 VA: 0x27392C8 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 311
{
	// Methods

	// RVA: 0x2739384 Offset: 0x2739384 VA: 0x2739384
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x2739404 Offset: 0x2739404 VA: 0x2739404 Slot: 8
	public override void Flush() { }

	// RVA: 0x27394C0 Offset: 0x27394C0 VA: 0x27394C0 Slot: 13
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x27395AC Offset: 0x27395AC VA: 0x27395AC Slot: 9
	public override void Write(char value) { }

	// RVA: 0x273967C Offset: 0x273967C VA: 0x273967C Slot: 10
	public override void Write(char[] value) { }

	// RVA: 0x273974C Offset: 0x273974C VA: 0x273974C Slot: 11
	public override void Write(string value) { }
}

// Namespace: System.IO
[CLSCompliantAttribute] // RVA: 0xC31688 Offset: 0xC31688 VA: 0xC31688
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 312
{
	// Fields
	private long length; // 0x10
	private bool closed; // 0x18
	private long capacity; // 0x20
	private FileAccess fileaccess; // 0x28
	private IntPtr initial_pointer; // 0x30
	private long initial_position; // 0x38
	private long current_position; // 0x40
	private EventHandler Closed; // 0x48

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x273981C Offset: 0x273981C VA: 0x273981C
	public void .ctor(byte* pointer, long length) { }

	// RVA: 0x2739A44 Offset: 0x2739A44 VA: 0x2739A44
	internal void add_Closed(EventHandler value) { }

	// RVA: 0x2739B08 Offset: 0x2739B08 VA: 0x2739B08
	internal void remove_Closed(EventHandler value) { }

	// RVA: 0x2739BCC Offset: 0x2739BCC VA: 0x2739BCC Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2739BEC Offset: 0x2739BEC VA: 0x2739BEC Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2739BFC Offset: 0x2739BFC VA: 0x2739BFC Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2739C1C Offset: 0x2739C1C VA: 0x2739C1C Slot: 9
	public override long get_Length() { }

	// RVA: 0x2739CAC Offset: 0x2739CAC VA: 0x2739CAC Slot: 10
	public override long get_Position() { }

	// RVA: 0x2739D3C Offset: 0x2739D3C VA: 0x2739D3C Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2739E44 Offset: 0x2739E44 VA: 0x2739E44 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x273A080 Offset: 0x273A080 VA: 0x273A080 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x273A19C Offset: 0x273A19C VA: 0x273A19C Slot: 21
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x273A2D4 Offset: 0x273A2D4 VA: 0x273A2D4 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x273A42C Offset: 0x273A42C VA: 0x273A42C Slot: 18
	public override void Flush() { }

	// RVA: 0x273A4B8 Offset: 0x273A4B8 VA: 0x273A4B8 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x273A4E8 Offset: 0x273A4E8 VA: 0x273A4E8 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x273A75C Offset: 0x273A75C VA: 0x273A75C Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x27398AC Offset: 0x27398AC VA: 0x27398AC
	protected void Initialize(byte* pointer, long length, long capacity, FileAccess access) { }
}

// Namespace: System.Reflection.Emit
internal enum NativeResourceType // TypeDefIndex: 313
{
	// Fields
	public int value__; // 0x0
	public const NativeResourceType None = 0;
	public const NativeResourceType Unmanaged = 1;
	public const NativeResourceType Assembly = 2;
	public const NativeResourceType Explicit = 3;
}

// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet // TypeDefIndex: 314
{
	// Fields
	public SecurityAction action; // 0x0
	public string pset; // 0x8
}

// Namespace: System.Reflection.Emit
internal struct MonoResource // TypeDefIndex: 315
{
	// Fields
	public byte[] data; // 0x0
	public string name; // 0x8
	public string filename; // 0x10
	public ResourceAttributes attrs; // 0x18
	public int offset; // 0x1C
	public Stream stream; // 0x20
}

// Namespace: System.Reflection.Emit
internal struct MonoWin32Resource // TypeDefIndex: 316
{
	// Fields
	public int res_type; // 0x0
	public int res_id; // 0x4
	public int lang_id; // 0x8
	public byte[] data; // 0x10
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xC3169C Offset: 0xC3169C VA: 0xC3169C
[ComVisibleAttribute] // RVA: 0xC3169C Offset: 0xC3169C VA: 0xC3169C
[ClassInterfaceAttribute] // RVA: 0xC3169C Offset: 0xC3169C VA: 0xC3169C
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 317
{
	// Fields
	private UIntPtr dynamic_assembly; // 0x60
	private MethodInfo entry_point; // 0x68
	private ModuleBuilder[] modules; // 0x70
	private string name; // 0x78
	private string dir; // 0x80
	private CustomAttributeBuilder[] cattrs; // 0x88
	private MonoResource[] resources; // 0x90
	private byte[] public_key; // 0x98
	private string version; // 0xA0
	private string culture; // 0xA8
	private uint algid; // 0xB0
	private uint flags; // 0xB4
	private PEFileKinds pekind; // 0xB8
	private bool delay_sign; // 0xBC
	private uint access; // 0xC0
	private Module[] loaded_modules; // 0xC8
	private MonoWin32Resource[] win32_resources; // 0xD0
	private RefEmitPermissionSet[] permissions_minimum; // 0xD8
	private RefEmitPermissionSet[] permissions_optional; // 0xE0
	private RefEmitPermissionSet[] permissions_refused; // 0xE8
	private PortableExecutableKinds peKind; // 0xF0
	private ImageFileMachine machine; // 0xF4
	private bool corlib_internal; // 0xF8
	private Type[] type_forwarders; // 0x100
	private byte[] pktoken; // 0x108
	internal Type corlib_object_type; // 0x110
	internal Type corlib_value_type; // 0x118
	internal Type corlib_enum_type; // 0x120
	internal Type corlib_void_type; // 0x128
	private ArrayList resource_writers; // 0x130
	private Win32VersionResource version_res; // 0x138
	private bool created; // 0x140
	private bool is_module_only; // 0x141
	private StrongName sn; // 0x148
	private NativeResourceType native_resource; // 0x150
	private readonly bool is_compiler_context; // 0x154
	private string versioninfo_culture; // 0x158
	private ModuleBuilder manifest_module; // 0x160

	// Properties
	public override string Location { get; }
	internal bool IsCompilerContext { get; }
	internal bool IsSave { get; }
	internal bool IsRun { get; }
	internal string AssemblyDir { get; }

	// Methods

	// RVA: 0x1083B58 Offset: 0x1083B58 VA: 0x1083B58
	internal void .ctor(AssemblyName n, string directory, AssemblyBuilderAccess access, bool corlib_internal) { }

	// RVA: 0x1084100 Offset: 0x1084100 VA: 0x1084100
	private static void basic_init(AssemblyBuilder ab) { }

	// RVA: 0x1084104 Offset: 0x1084104 VA: 0x1084104 Slot: 7
	public override string get_Location() { }

	// RVA: 0x10841CC Offset: 0x10841CC VA: 0x10841CC
	public ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo) { }

	// RVA: 0x10841DC Offset: 0x10841DC VA: 0x10841DC
	private ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo, bool transient) { }

	// RVA: 0x1084AEC Offset: 0x1084AEC VA: 0x1084AEC Slot: 20
	internal override Module[] GetModulesInternal() { }

	// RVA: 0x1084BD0 Offset: 0x1084BD0 VA: 0x1084BD0 Slot: 11
	internal override Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x1084E50 Offset: 0x1084E50 VA: 0x1084E50 Slot: 23
	public override ManifestResourceInfo GetManifestResourceInfo(string resourceName) { }

	// RVA: 0x1084E9C Offset: 0x1084E9C VA: 0x1084E9C Slot: 22
	public override string[] GetManifestResourceNames() { }

	// RVA: 0x1084EE8 Offset: 0x1084EE8 VA: 0x1084EE8 Slot: 10
	public override Stream GetManifestResourceStream(string name) { }

	// RVA: 0x10839E8 Offset: 0x10839E8 VA: 0x10839E8
	internal bool get_IsCompilerContext() { }

	// RVA: 0x10840F0 Offset: 0x10840F0 VA: 0x10840F0
	internal bool get_IsSave() { }

	// RVA: 0x1084F34 Offset: 0x1084F34 VA: 0x1084F34
	internal bool get_IsRun() { }

	// RVA: 0x1084F48 Offset: 0x1084F48 VA: 0x1084F48
	internal string get_AssemblyDir() { }

	// RVA: 0x1084150 Offset: 0x1084150 VA: 0x1084150
	private Exception not_supported() { }

	// RVA: 0x10844E4 Offset: 0x10844E4 VA: 0x10844E4
	private void check_name_and_filename(string name, string fileName, bool fileNeedsToExists) { }

	// RVA: 0x1084F50 Offset: 0x1084F50 VA: 0x1084F50 Slot: 18
	internal override AssemblyName UnprotectedGetName() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31728 Offset: 0xC31728 VA: 0xC31728
[FlagsAttribute] // RVA: 0xC31728 Offset: 0xC31728 VA: 0xC31728
[Serializable]
public enum AssemblyBuilderAccess // TypeDefIndex: 318
{
	// Fields
	public int value__; // 0x0
	public const AssemblyBuilderAccess Run = 1;
	public const AssemblyBuilderAccess Save = 2;
	public const AssemblyBuilderAccess RunAndSave = 3;
	public const AssemblyBuilderAccess ReflectionOnly = 6;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xC31764 Offset: 0xC31764 VA: 0xC31764
[ComDefaultInterfaceAttribute] // RVA: 0xC31764 Offset: 0xC31764 VA: 0xC31764
[ClassInterfaceAttribute] // RVA: 0xC31764 Offset: 0xC31764 VA: 0xC31764
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 319
{
	// Fields
	private ILGenerator ilgen; // 0x10
	internal Type[] parameters; // 0x18
	private MethodAttributes attrs; // 0x20
	private MethodImplAttributes iattrs; // 0x24
	private int table_idx; // 0x28
	private CallingConventions call_conv; // 0x2C
	private TypeBuilder type; // 0x30
	internal ParameterBuilder[] pinfo; // 0x38
	private bool init_locals; // 0x40
	private Type[][] paramModReq; // 0x48
	private Type[][] paramModOpt; // 0x50

	// Properties
	[MonoTODOAttribute] // RVA: 0xC3B2A4 Offset: 0xC3B2A4 VA: 0xC3B2A4
	public override CallingConventions CallingConvention { get; }
	internal TypeBuilder TypeBuilder { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override Module Module { get; }
	private bool IsCompilerContext { get; }

	// Methods

	// RVA: 0x10FDB2C Offset: 0x10FDB2C VA: 0x10FDB2C
	internal void .ctor(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }

	// RVA: 0x10FDE68 Offset: 0x10FDE68 VA: 0x10FDE68 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x10FDE70 Offset: 0x10FDE70 VA: 0x10FDE70
	internal TypeBuilder get_TypeBuilder() { }

	// RVA: 0x10FDE78 Offset: 0x10FDE78 VA: 0x10FDE78 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x10FE0CC Offset: 0x10FE0CC VA: 0x10FE0CC
	internal ParameterInfo[] GetParametersInternal() { }

	// RVA: 0x10FE330 Offset: 0x10FE330 VA: 0x10FE330 Slot: 15
	internal override int GetParameterCount() { }

	// RVA: 0x10FE348 Offset: 0x10FE348 VA: 0x10FE348 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x10FE3FC Offset: 0x10FE3FC VA: 0x10FE3FC Slot: 30
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x10FE448 Offset: 0x10FE448 VA: 0x10FE448 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x10FE494 Offset: 0x10FE494 VA: 0x10FE494 Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x10FE49C Offset: 0x10FE49C VA: 0x10FE49C Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x10FE4A4 Offset: 0x10FE4A4 VA: 0x10FE4A4 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x10FE4AC Offset: 0x10FE4AC VA: 0x10FE4AC Slot: 8
	public override string get_Name() { }

	// RVA: 0x10FE540 Offset: 0x10FE540 VA: 0x10FE540 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x10FE58C Offset: 0x10FE58C VA: 0x10FE58C Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x10FE644 Offset: 0x10FE644 VA: 0x10FE644 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x10FE704 Offset: 0x10FE704 VA: 0x10FE704
	public ILGenerator GetILGenerator() { }

	// RVA: 0x10FE70C Offset: 0x10FE70C VA: 0x10FE70C
	public ILGenerator GetILGenerator(int streamSize) { }

	// RVA: 0x10FDE50 Offset: 0x10FDE50 VA: 0x10FDE50
	public MethodToken GetToken() { }

	// RVA: 0x10FE9F0 Offset: 0x10FE9F0 VA: 0x10FE9F0 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x10FEA30 Offset: 0x10FEA30 VA: 0x10FEA30 Slot: 3
	public override string ToString() { }

	// RVA: 0x10FEACC Offset: 0x10FEACC VA: 0x10FEACC
	internal void fixup() { }

	// RVA: 0x10FDDFC Offset: 0x10FDDFC VA: 0x10FDDFC Slot: 25
	internal override int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x10FDF0C Offset: 0x10FDF0C VA: 0x10FDF0C
	private bool get_IsCompilerContext() { }

	// RVA: 0x10FE394 Offset: 0x10FE394 VA: 0x10FE394
	private Exception not_supported() { }

	// RVA: 0x10FE064 Offset: 0x10FE064 VA: 0x10FE064
	private Exception not_created() { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0xC317F0 Offset: 0xC317F0 VA: 0xC317F0
[ComVisibleAttribute] // RVA: 0xC317F0 Offset: 0xC317F0 VA: 0xC317F0
[ComDefaultInterfaceAttribute] // RVA: 0xC317F0 Offset: 0xC317F0 VA: 0xC317F0
public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 320
{}

// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type // TypeDefIndex: 321
{
	// Fields
	internal Type elementType; // 0x18

	// Properties
	public override bool ContainsGenericParameters { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override string FullName { get; }
	public override string Name { get; }
	public override Module Module { get; }
	public override string Namespace { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x10FD8C8 Offset: 0x10FD8C8 VA: 0x10FD8C8
	internal void .ctor(Type elementType) { }

	// RVA: 0x10FEF78 Offset: 0x10FEF78 VA: 0x10FEF78
	internal static void create_unmanaged_type(Type type) { }

	// RVA: -1 Offset: -1 Slot: 93
	internal abstract string FormatName(string elementName);

	// RVA: 0x10FEF7C Offset: 0x10FEF7C VA: 0x10FEF7C Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x10FEFE4 Offset: 0x10FEFE4 VA: 0x10FEFE4 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x10FEFEC Offset: 0x10FEFEC VA: 0x10FEFEC Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x10FF054 Offset: 0x10FF054 VA: 0x10FF054 Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x10FF0BC Offset: 0x10FF0BC VA: 0x10FF0BC Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x10FF124 Offset: 0x10FF124 VA: 0x10FF124 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x10FF18C Offset: 0x10FF18C VA: 0x10FF18C Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x10FF1F4 Offset: 0x10FF1F4 VA: 0x10FF1F4 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x10FF25C Offset: 0x10FF25C VA: 0x10FF25C Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x10FF2C4 Offset: 0x10FF2C4 VA: 0x10FF2C4 Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x10FF32C Offset: 0x10FF32C VA: 0x10FF32C Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x10FF394 Offset: 0x10FF394 VA: 0x10FF394 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x10FF3FC Offset: 0x10FF3FC VA: 0x10FF3FC Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x10FF42C Offset: 0x10FF42C VA: 0x10FF42C Slot: 71
