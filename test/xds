	// RVA: 0x2648334 Offset: 0x2648334 VA: 0x2648334
	public bool get_Done() { }

	// RVA: 0x264833C Offset: 0x264833C VA: 0x264833C
	public void set_Done(bool value) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC54AC Offset: 0xBC54AC VA: 0xBC54AC
[Serializable]
public class StreamReader : TextReader // TypeDefIndex: 299
{
	// Fields
	private byte[] input_buffer; // 0x10
	private char[] decoded_buffer; // 0x18
	private int decoded_count; // 0x20
	private int pos; // 0x24
	private int buffer_size; // 0x28
	private int do_checks; // 0x2C
	private Encoding encoding; // 0x30
	private Decoder decoder; // 0x38
	private Stream base_stream; // 0x40
	private bool mayBlock; // 0x48
	private StringBuilder line_builder; // 0x50
	public static readonly StreamReader Null; // 0x0
	private bool foundCR; // 0x58

	// Properties
	public bool EndOfStream { get; }

	// Methods

	// RVA: 0x2648448 Offset: 0x2648448 VA: 0x2648448
	internal void .ctor() { }

	// RVA: 0x26484B8 Offset: 0x26484B8 VA: 0x26484B8
	public void .ctor(Stream stream) { }

	// RVA: 0x26485E0 Offset: 0x26485E0 VA: 0x26485E0
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x2648540 Offset: 0x2648540 VA: 0x2648540
	public void .ctor(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x263D518 Offset: 0x263D518 VA: 0x263D518
	public void .ctor(string path) { }

	// RVA: 0x263DCB4 Offset: 0x263DCB4 VA: 0x263DCB4
	public void .ctor(string path, Encoding encoding) { }

	// RVA: 0x264880C Offset: 0x264880C VA: 0x264880C
	public void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x2648A20 Offset: 0x2648A20 VA: 0x2648A20
	private static void .cctor() { }

	// RVA: 0x26485EC Offset: 0x26485EC VA: 0x26485EC
	internal void Initialize(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }

	// RVA: 0x263DAB0 Offset: 0x263DAB0 VA: 0x263DAB0
	public bool get_EndOfStream() { }

	// RVA: 0x2648AEC Offset: 0x2648AEC VA: 0x2648AEC Slot: 5
	public override void Close() { }

	// RVA: 0x2648AFC Offset: 0x2648AFC VA: 0x2648AFC Slot: 6
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2648B6C Offset: 0x2648B6C VA: 0x2648B6C
	private int DoChecks(int count) { }

	// RVA: 0x26490F0 Offset: 0x26490F0 VA: 0x26490F0
	private int ReadBuffer() { }

	// RVA: 0x26492CC Offset: 0x26492CC VA: 0x26492CC Slot: 7
	public override int Peek() { }

	// RVA: 0x26493C0 Offset: 0x26493C0 VA: 0x26493C0 Slot: 8
	public override int Read() { }

	// RVA: 0x26494C4 Offset: 0x26494C4 VA: 0x26494C4 Slot: 9
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x26496C8 Offset: 0x26496C8 VA: 0x26496C8
	private int FindNextEOL() { }

	// RVA: 0x26497AC Offset: 0x26497AC VA: 0x26497AC Slot: 10
	public override string ReadLine() { }

	// RVA: 0x2649AAC Offset: 0x2649AAC VA: 0x2649AAC Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: 
private class StreamReader.NullStreamReader : StreamReader // TypeDefIndex: 300
{
	// Methods

	// RVA: 0x2648A88 Offset: 0x2648A88 VA: 0x2648A88
	public void .ctor() { }

	// RVA: 0x2649BF4 Offset: 0x2649BF4 VA: 0x2649BF4 Slot: 7
	public override int Peek() { }

	// RVA: 0x2649BFC Offset: 0x2649BFC VA: 0x2649BFC Slot: 8
	public override int Read() { }

	// RVA: 0x2649C04 Offset: 0x2649C04 VA: 0x2649C04 Slot: 9
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x2649C0C Offset: 0x2649C0C VA: 0x2649C0C Slot: 10
	public override string ReadLine() { }

	// RVA: 0x2649C14 Offset: 0x2649C14 VA: 0x2649C14 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC54C0 Offset: 0xBC54C0 VA: 0xBC54C0
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 301
{
	// Fields
	private Encoding internalEncoding; // 0x20
	private Stream internalStream; // 0x28
	private bool iflush; // 0x30
	private byte[] byte_buf; // 0x38
	private int byte_pos; // 0x40
	private char[] decode_buf; // 0x48
	private int decode_pos; // 0x50
	private bool DisposedAlready; // 0x54
	private bool preamble_done; // 0x55
	public static readonly StreamWriter Null; // 0x0

	// Properties
	public virtual bool AutoFlush { set; }
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x2649C7C Offset: 0x2649C7C VA: 0x2649C7C
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x2649C84 Offset: 0x2649C84 VA: 0x2649C84
	public void .ctor(Stream stream, Encoding encoding, int bufferSize) { }

	// RVA: 0x263DF44 Offset: 0x263DF44 VA: 0x263DF44
	public void .ctor(string path) { }

	// RVA: 0x264A12C Offset: 0x264A12C VA: 0x264A12C
	public void .ctor(string path, bool append) { }

	// RVA: 0x263E234 Offset: 0x263E234 VA: 0x263E234
	public void .ctor(string path, bool append, Encoding encoding) { }

	// RVA: 0x2649F5C Offset: 0x2649F5C VA: 0x2649F5C
	public void .ctor(string path, bool append, Encoding encoding, int bufferSize) { }

	// RVA: 0x264A1B8 Offset: 0x264A1B8 VA: 0x264A1B8
	private static void .cctor() { }

	// RVA: 0x2649E3C Offset: 0x2649E3C VA: 0x2649E3C
	internal void Initialize(Encoding encoding, int bufferSize) { }

	// RVA: 0x264A28C Offset: 0x264A28C VA: 0x264A28C Slot: 21
	public virtual void set_AutoFlush(bool value) { }

	// RVA: 0x264A2A8 Offset: 0x264A2A8 VA: 0x264A2A8 Slot: 5
	public override Encoding get_Encoding() { }

	// RVA: 0x264A2B0 Offset: 0x264A2B0 VA: 0x264A2B0 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x264A468 Offset: 0x264A468 VA: 0x264A468 Slot: 8
	public override void Flush() { }

	// RVA: 0x264A5D8 Offset: 0x264A5D8 VA: 0x264A5D8
	private void FlushBytes() { }

	// RVA: 0x264A53C Offset: 0x264A53C VA: 0x264A53C
	private void Decode() { }

	// RVA: 0x264A6C0 Offset: 0x264A6C0 VA: 0x264A6C0 Slot: 13
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x264A86C Offset: 0x264A86C VA: 0x264A86C
	private void LowLevelWrite(char[] buffer, int index, int count) { }

	// RVA: 0x264A92C Offset: 0x264A92C VA: 0x264A92C
	private void LowLevelWrite(string s) { }

	// RVA: 0x264AA6C Offset: 0x264AA6C VA: 0x264AA6C Slot: 9
	public override void Write(char value) { }

	// RVA: 0x264AB90 Offset: 0x264AB90 VA: 0x264AB90 Slot: 10
	public override void Write(char[] buffer) { }

	// RVA: 0x264AC64 Offset: 0x264AC64 VA: 0x264AC64 Slot: 11
	public override void Write(string value) { }

	// RVA: 0x264AD30 Offset: 0x264AD30 VA: 0x264AD30 Slot: 6
	public override void Close() { }

	// RVA: 0x264AD40 Offset: 0x264AD40 VA: 0x264AD40 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC54D4 Offset: 0xBC54D4 VA: 0xBC54D4
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 302
{
	// Fields
	private string source; // 0x10
	private int nextChar; // 0x18
	private int sourceLength; // 0x1C

	// Methods

	// RVA: 0x264ADC0 Offset: 0x264ADC0 VA: 0x264ADC0
	public void .ctor(string s) { }

	// RVA: 0x264AE98 Offset: 0x264AE98 VA: 0x264AE98 Slot: 5
	public override void Close() { }

	// RVA: 0x264AEA8 Offset: 0x264AEA8 VA: 0x264AEA8 Slot: 6
	protected override void Dispose(bool disposing) { }

	// RVA: 0x264AEBC Offset: 0x264AEBC VA: 0x264AEBC Slot: 7
	public override int Peek() { }

	// RVA: 0x264AFC0 Offset: 0x264AFC0 VA: 0x264AFC0 Slot: 8
	public override int Read() { }

	// RVA: 0x264B028 Offset: 0x264B028 VA: 0x264B028 Slot: 9
	public override int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x264B17C Offset: 0x264B17C VA: 0x264B17C Slot: 10
	public override string ReadLine() { }

	// RVA: 0x264B2C8 Offset: 0x264B2C8 VA: 0x264B2C8 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x264AF14 Offset: 0x264AF14 VA: 0x264AF14
	private void CheckObjectDisposedException() { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC54E8 Offset: 0xBC54E8 VA: 0xBC54E8
[MonoTODOAttribute] // RVA: 0xBC54E8 Offset: 0xBC54E8 VA: 0xBC54E8
[Serializable]
public class StringWriter : TextWriter // TypeDefIndex: 303
{
	// Fields
	private StringBuilder internalString; // 0x20
	private bool disposed; // 0x28

	// Properties
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x264B320 Offset: 0x264B320 VA: 0x264B320
	public void .ctor() { }

	// RVA: 0x264B388 Offset: 0x264B388 VA: 0x264B388
	public void .ctor(StringBuilder sb) { }

	// RVA: 0x264B390 Offset: 0x264B390 VA: 0x264B390
	public void .ctor(StringBuilder sb, IFormatProvider formatProvider) { }

	// RVA: 0x264B454 Offset: 0x264B454 VA: 0x264B454 Slot: 5
	public override Encoding get_Encoding() { }

	// RVA: 0x264B4B4 Offset: 0x264B4B4 VA: 0x264B4B4 Slot: 6
	public override void Close() { }

	// RVA: 0x264B4E8 Offset: 0x264B4E8 VA: 0x264B4E8 Slot: 7
	protected override void Dispose(bool disposing) { }

	// RVA: 0x264B52C Offset: 0x264B52C VA: 0x264B52C Slot: 3
	public override string ToString() { }

	// RVA: 0x264B55C Offset: 0x264B55C VA: 0x264B55C Slot: 9
	public override void Write(char value) { }

	// RVA: 0x264B630 Offset: 0x264B630 VA: 0x264B630 Slot: 11
	public override void Write(string value) { }

	// RVA: 0x264B704 Offset: 0x264B704 VA: 0x264B704 Slot: 13
	public override void Write(char[] buffer, int index, int count) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC5538 Offset: 0xBC5538 VA: 0xBC5538
[Serializable]
public abstract class TextReader : IDisposable // TypeDefIndex: 304
{
	// Fields
	public static readonly TextReader Null; // 0x0

	// Methods

	// RVA: 0x26484B0 Offset: 0x26484B0 VA: 0x26484B0
	protected void .ctor() { }

	// RVA: 0x264C84C Offset: 0x264C84C VA: 0x264C84C
	private static void .cctor() { }

	// RVA: 0x264C91C Offset: 0x264C91C VA: 0x264C91C Slot: 5
	public virtual void Close() { }

	// RVA: 0x264C92C Offset: 0x264C92C VA: 0x264C92C Slot: 4
	public void Dispose() { }

	// RVA: 0x2648B5C Offset: 0x2648B5C VA: 0x2648B5C Slot: 6
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x264C93C Offset: 0x264C93C VA: 0x264C93C Slot: 7
	public virtual int Peek() { }

	// RVA: 0x264C944 Offset: 0x264C944 VA: 0x264C944 Slot: 8
	public virtual int Read() { }

	// RVA: 0x264C94C Offset: 0x264C94C VA: 0x264C94C Slot: 9
	public virtual int Read([In] [Out] char[] buffer, int index, int count) { }

	// RVA: 0x264CA04 Offset: 0x264CA04 VA: 0x264CA04 Slot: 10
	public virtual string ReadLine() { }

	// RVA: 0x264CA6C Offset: 0x264CA6C VA: 0x264CA6C Slot: 11
	public virtual string ReadToEnd() { }

	// RVA: 0x264CAD4 Offset: 0x264CAD4 VA: 0x264CAD4
	public static TextReader Synchronized(TextReader reader) { }
}

// Namespace: 
private class TextReader.NullTextReader : TextReader // TypeDefIndex: 305
{
	// Methods

	// RVA: 0x264C8B4 Offset: 0x264C8B4 VA: 0x264C8B4
	public void .ctor() { }

	// RVA: 0x264CBA8 Offset: 0x264CBA8 VA: 0x264CBA8 Slot: 10
	public override string ReadLine() { }
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedReader : TextReader // TypeDefIndex: 306
{
	// Fields
	private TextReader reader; // 0x10

	// Methods

	// RVA: 0x264B8C4 Offset: 0x264B8C4 VA: 0x264B8C4
	public void .ctor(TextReader reader) { }

	// RVA: 0x264B940 Offset: 0x264B940 VA: 0x264B940 Slot: 5
	public override void Close() { }

	// RVA: 0x264B9D8 Offset: 0x264B9D8 VA: 0x264B9D8 Slot: 7
	public override int Peek() { }

	// RVA: 0x264BA70 Offset: 0x264BA70 VA: 0x264BA70 Slot: 10
	public override string ReadLine() { }

	// RVA: 0x264BB08 Offset: 0x264BB08 VA: 0x264BB08 Slot: 11
	public override string ReadToEnd() { }

	// RVA: 0x264BBA0 Offset: 0x264BBA0 VA: 0x264BBA0 Slot: 8
	public override int Read() { }

	// RVA: 0x264BC38 Offset: 0x264BC38 VA: 0x264BC38 Slot: 9
	public override int Read(char[] buffer, int index, int count) { }
}

// Namespace: System.IO
[ComVisibleAttribute] // RVA: 0xBC554C Offset: 0xBC554C VA: 0xBC554C
[Serializable]
public abstract class TextWriter : IDisposable // TypeDefIndex: 307
{
	// Fields
	protected char[] CoreNewLine; // 0x10
	internal IFormatProvider internalFormatProvider; // 0x18
	public static readonly TextWriter Null; // 0x0

	// Properties
	public abstract Encoding Encoding { get; }

	// Methods

	// RVA: 0x2649DF4 Offset: 0x2649DF4 VA: 0x2649DF4
	protected void .ctor() { }

	// RVA: 0x264CBB0 Offset: 0x264CBB0 VA: 0x264CBB0
	private static void .cctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract Encoding get_Encoding();

	// RVA: 0x264CC7C Offset: 0x264CC7C VA: 0x264CC7C Slot: 6
	public virtual void Close() { }

	// RVA: 0x264B51C Offset: 0x264B51C VA: 0x264B51C Slot: 7
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x264CC8C Offset: 0x264CC8C VA: 0x264CC8C Slot: 4
	public void Dispose() { }

	// RVA: 0x264CCC0 Offset: 0x264CCC0 VA: 0x264CCC0 Slot: 8
	public virtual void Flush() { }

	// RVA: 0x264CCC4 Offset: 0x264CCC4 VA: 0x264CCC4
	internal static TextWriter Synchronized(TextWriter writer, bool neverClose) { }

	// RVA: 0x264CDA8 Offset: 0x264CDA8 VA: 0x264CDA8 Slot: 9
	public virtual void Write(char value) { }

	// RVA: 0x264CDAC Offset: 0x264CDAC VA: 0x264CDAC Slot: 10
	public virtual void Write(char[] buffer) { }

	// RVA: 0x264CDC8 Offset: 0x264CDC8 VA: 0x264CDC8 Slot: 11
	public virtual void Write(string value) { }

	// RVA: 0x264CE10 Offset: 0x264CE10 VA: 0x264CE10 Slot: 12
	public virtual void Write(string format, object arg0) { }

	// RVA: 0x264CEA0 Offset: 0x264CEA0 VA: 0x264CEA0 Slot: 13
	public virtual void Write(char[] buffer, int index, int count) { }

	// RVA: 0x264D000 Offset: 0x264D000 VA: 0x264D000 Slot: 14
	public virtual void Write(string format, object arg0, object arg1) { }

	// RVA: 0x264D0A0 Offset: 0x264D0A0 VA: 0x264D0A0 Slot: 15
	public virtual void Write(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x264D148 Offset: 0x264D148 VA: 0x264D148 Slot: 16
	public virtual void WriteLine() { }

	// RVA: 0x264D158 Offset: 0x264D158 VA: 0x264D158 Slot: 17
	public virtual void WriteLine(string value) { }

	// RVA: 0x264D190 Offset: 0x264D190 VA: 0x264D190 Slot: 18
	public virtual void WriteLine(string format, object arg0) { }

	// RVA: 0x264D1C8 Offset: 0x264D1C8 VA: 0x264D1C8 Slot: 19
	public virtual void WriteLine(char[] buffer, int index, int count) { }

	// RVA: 0x264D200 Offset: 0x264D200 VA: 0x264D200 Slot: 20
	public virtual void WriteLine(string format, object arg0, object arg1) { }
}

// Namespace: 
private sealed class TextWriter.NullTextWriter : TextWriter // TypeDefIndex: 308
{
	// Properties
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x264CC18 Offset: 0x264CC18 VA: 0x264CC18
	public void .ctor() { }

	// RVA: 0x264D23C Offset: 0x264D23C VA: 0x264D23C Slot: 5
	public override Encoding get_Encoding() { }

	// RVA: 0x264D29C Offset: 0x264D29C VA: 0x264D29C Slot: 11
	public override void Write(string s) { }

	// RVA: 0x264D2A0 Offset: 0x264D2A0 VA: 0x264D2A0 Slot: 9
	public override void Write(char value) { }

	// RVA: 0x264D2A4 Offset: 0x264D2A4 VA: 0x264D2A4 Slot: 13
	public override void Write(char[] value, int index, int count) { }
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedWriter : TextWriter // TypeDefIndex: 309
{
	// Fields
	private TextWriter writer; // 0x20
	private bool neverClose; // 0x28

	// Properties
	public override Encoding Encoding { get; }

	// Methods

	// RVA: 0x264BCF8 Offset: 0x264BCF8 VA: 0x264BCF8
	public void .ctor(TextWriter writer, bool neverClose) { }

	// RVA: 0x264BD7C Offset: 0x264BD7C VA: 0x264BD7C Slot: 6
	public override void Close() { }

	// RVA: 0x264BE20 Offset: 0x264BE20 VA: 0x264BE20 Slot: 8
	public override void Flush() { }

	// RVA: 0x264BEB8 Offset: 0x264BEB8 VA: 0x264BEB8 Slot: 9
	public override void Write(char value) { }

	// RVA: 0x264BF68 Offset: 0x264BF68 VA: 0x264BF68 Slot: 10
	public override void Write(char[] value) { }

	// RVA: 0x264C018 Offset: 0x264C018 VA: 0x264C018 Slot: 11
	public override void Write(string value) { }

	// RVA: 0x264C0C8 Offset: 0x264C0C8 VA: 0x264C0C8 Slot: 12
	public override void Write(string format, object value) { }

	// RVA: 0x264C180 Offset: 0x264C180 VA: 0x264C180 Slot: 13
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x264C250 Offset: 0x264C250 VA: 0x264C250 Slot: 14
	public override void Write(string format, object arg0, object arg1) { }

	// RVA: 0x264C324 Offset: 0x264C324 VA: 0x264C324 Slot: 15
	public override void Write(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x264C400 Offset: 0x264C400 VA: 0x264C400 Slot: 16
	public override void WriteLine() { }

	// RVA: 0x264C49C Offset: 0x264C49C VA: 0x264C49C Slot: 17
	public override void WriteLine(string value) { }

	// RVA: 0x264C550 Offset: 0x264C550 VA: 0x264C550 Slot: 18
	public override void WriteLine(string format, object value) { }

	// RVA: 0x264C60C Offset: 0x264C60C VA: 0x264C60C Slot: 19
	public override void WriteLine(char[] buffer, int index, int count) { }

	// RVA: 0x264C6E0 Offset: 0x264C6E0 VA: 0x264C6E0 Slot: 20
	public override void WriteLine(string format, object arg0, object arg1) { }

	// RVA: 0x264C7B4 Offset: 0x264C7B4 VA: 0x264C7B4 Slot: 5
	public override Encoding get_Encoding() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 310
{
	// Fields
	private static bool[] newline; // 0x0
	private static char newlineChar; // 0x8

	// Methods

	// RVA: 0x264D2A8 Offset: 0x264D2A8 VA: 0x264D2A8
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x264D32C Offset: 0x264D32C VA: 0x264D32C
	private static void .cctor() { }

	// RVA: 0x264D404 Offset: 0x264D404 VA: 0x264D404 Slot: 7
	public override int Peek() { }

	// RVA: 0x264D4C0 Offset: 0x264D4C0 VA: 0x264D4C0 Slot: 8
	public override int Read() { }

	// RVA: 0x264D57C Offset: 0x264D57C VA: 0x264D57C Slot: 9
	public override int Read([In] [Out] char[] dest_buffer, int index, int count) { }

	// RVA: 0x264D7F8 Offset: 0x264D7F8 VA: 0x264D7F8
	private bool CheckEOL(char current) { }

	// RVA: 0x264DA50 Offset: 0x264DA50 VA: 0x264DA50 Slot: 10
	public override string ReadLine() { }

	// RVA: 0x264DB0C Offset: 0x264DB0C VA: 0x264DB0C Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 311
{
	// Methods

	// RVA: 0x264DBC8 Offset: 0x264DBC8 VA: 0x264DBC8
	public void .ctor(Stream stream, Encoding encoding) { }

	// RVA: 0x264DC48 Offset: 0x264DC48 VA: 0x264DC48 Slot: 8
	public override void Flush() { }

	// RVA: 0x264DD04 Offset: 0x264DD04 VA: 0x264DD04 Slot: 13
	public override void Write(char[] buffer, int index, int count) { }

	// RVA: 0x264DDF0 Offset: 0x264DDF0 VA: 0x264DDF0 Slot: 9
	public override void Write(char value) { }

	// RVA: 0x264DEC0 Offset: 0x264DEC0 VA: 0x264DEC0 Slot: 10
	public override void Write(char[] value) { }

	// RVA: 0x264DF90 Offset: 0x264DF90 VA: 0x264DF90 Slot: 11
	public override void Write(string value) { }
}

// Namespace: System.IO
[CLSCompliantAttribute] // RVA: 0xBC5560 Offset: 0xBC5560 VA: 0xBC5560
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 312
{
	// Fields
	private long length; // 0x10
	private bool closed; // 0x18
	private long capacity; // 0x20
	private FileAccess fileaccess; // 0x28
	private IntPtr initial_pointer; // 0x30
	private long initial_position; // 0x38
	private long current_position; // 0x40
	private EventHandler Closed; // 0x48

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x264E060 Offset: 0x264E060 VA: 0x264E060
	public void .ctor(byte* pointer, long length) { }

	// RVA: 0x264E288 Offset: 0x264E288 VA: 0x264E288
	internal void add_Closed(EventHandler value) { }

	// RVA: 0x264E34C Offset: 0x264E34C VA: 0x264E34C
	internal void remove_Closed(EventHandler value) { }

	// RVA: 0x264E410 Offset: 0x264E410 VA: 0x264E410 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x264E430 Offset: 0x264E430 VA: 0x264E430 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x264E440 Offset: 0x264E440 VA: 0x264E440 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x264E460 Offset: 0x264E460 VA: 0x264E460 Slot: 9
	public override long get_Length() { }

	// RVA: 0x264E4F0 Offset: 0x264E4F0 VA: 0x264E4F0 Slot: 10
	public override long get_Position() { }

	// RVA: 0x264E580 Offset: 0x264E580 VA: 0x264E580 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x264E688 Offset: 0x264E688 VA: 0x264E688 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x264E8C4 Offset: 0x264E8C4 VA: 0x264E8C4 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x264E9E0 Offset: 0x264E9E0 VA: 0x264E9E0 Slot: 21
	public override long Seek(long offset, SeekOrigin loc) { }

	// RVA: 0x264EB18 Offset: 0x264EB18 VA: 0x264EB18 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x264EC70 Offset: 0x264EC70 VA: 0x264EC70 Slot: 18
	public override void Flush() { }

	// RVA: 0x264ECFC Offset: 0x264ECFC VA: 0x264ECFC Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x264ED2C Offset: 0x264ED2C VA: 0x264ED2C Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x264EFA0 Offset: 0x264EFA0 VA: 0x264EFA0 Slot: 24
	public override void WriteByte(byte value) { }

	// RVA: 0x264E0F0 Offset: 0x264E0F0 VA: 0x264E0F0
	protected void Initialize(byte* pointer, long length, long capacity, FileAccess access) { }
}

// Namespace: System.Reflection.Emit
internal enum NativeResourceType // TypeDefIndex: 313
{
	// Fields
	public int value__; // 0x0
	public const NativeResourceType None = 0;
	public const NativeResourceType Unmanaged = 1;
	public const NativeResourceType Assembly = 2;
	public const NativeResourceType Explicit = 3;
}

// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet // TypeDefIndex: 314
{
	// Fields
	public SecurityAction action; // 0x0
	public string pset; // 0x8
}

// Namespace: System.Reflection.Emit
internal struct MonoResource // TypeDefIndex: 315
{
	// Fields
	public byte[] data; // 0x0
	public string name; // 0x8
	public string filename; // 0x10
	public ResourceAttributes attrs; // 0x18
	public int offset; // 0x1C
	public Stream stream; // 0x20
}

// Namespace: System.Reflection.Emit
internal struct MonoWin32Resource // TypeDefIndex: 316
{
	// Fields
	public int res_type; // 0x0
	public int res_id; // 0x4
	public int lang_id; // 0x8
	public byte[] data; // 0x10
}

// Namespace: System.Reflection.Emit
[ComDefaultInterfaceAttribute] // RVA: 0xBC5574 Offset: 0xBC5574 VA: 0xBC5574
[ComVisibleAttribute] // RVA: 0xBC5574 Offset: 0xBC5574 VA: 0xBC5574
[ClassInterfaceAttribute] // RVA: 0xBC5574 Offset: 0xBC5574 VA: 0xBC5574
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 317
{
	// Fields
	private UIntPtr dynamic_assembly; // 0x60
	private MethodInfo entry_point; // 0x68
	private ModuleBuilder[] modules; // 0x70
	private string name; // 0x78
	private string dir; // 0x80
	private CustomAttributeBuilder[] cattrs; // 0x88
	private MonoResource[] resources; // 0x90
	private byte[] public_key; // 0x98
	private string version; // 0xA0
	private string culture; // 0xA8
	private uint algid; // 0xB0
	private uint flags; // 0xB4
	private PEFileKinds pekind; // 0xB8
	private bool delay_sign; // 0xBC
	private uint access; // 0xC0
	private Module[] loaded_modules; // 0xC8
	private MonoWin32Resource[] win32_resources; // 0xD0
	private RefEmitPermissionSet[] permissions_minimum; // 0xD8
	private RefEmitPermissionSet[] permissions_optional; // 0xE0
	private RefEmitPermissionSet[] permissions_refused; // 0xE8
	private PortableExecutableKinds peKind; // 0xF0
	private ImageFileMachine machine; // 0xF4
	private bool corlib_internal; // 0xF8
	private Type[] type_forwarders; // 0x100
	private byte[] pktoken; // 0x108
	internal Type corlib_object_type; // 0x110
	internal Type corlib_value_type; // 0x118
	internal Type corlib_enum_type; // 0x120
	internal Type corlib_void_type; // 0x128
	private ArrayList resource_writers; // 0x130
	private Win32VersionResource version_res; // 0x138
	private bool created; // 0x140
	private bool is_module_only; // 0x141
	private StrongName sn; // 0x148
	private NativeResourceType native_resource; // 0x150
	private readonly bool is_compiler_context; // 0x154
	private string versioninfo_culture; // 0x158
	private ModuleBuilder manifest_module; // 0x160

	// Properties
	public override string Location { get; }
	internal bool IsCompilerContext { get; }
	internal bool IsSave { get; }
	internal bool IsRun { get; }
	internal string AssemblyDir { get; }

	// Methods

	// RVA: 0x21F88F0 Offset: 0x21F88F0 VA: 0x21F88F0
	internal void .ctor(AssemblyName n, string directory, AssemblyBuilderAccess access, bool corlib_internal) { }

	// RVA: 0x21F8E98 Offset: 0x21F8E98 VA: 0x21F8E98
	private static void basic_init(AssemblyBuilder ab) { }

	// RVA: 0x21F8E9C Offset: 0x21F8E9C VA: 0x21F8E9C Slot: 7
	public override string get_Location() { }

	// RVA: 0x21F8F64 Offset: 0x21F8F64 VA: 0x21F8F64
	public ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo) { }

	// RVA: 0x21F8F74 Offset: 0x21F8F74 VA: 0x21F8F74
	private ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo, bool transient) { }

	// RVA: 0x21F9884 Offset: 0x21F9884 VA: 0x21F9884 Slot: 20
	internal override Module[] GetModulesInternal() { }

	// RVA: 0x21F9968 Offset: 0x21F9968 VA: 0x21F9968 Slot: 11
	internal override Type[] GetTypes(bool exportedOnly) { }

	// RVA: 0x21F9BE8 Offset: 0x21F9BE8 VA: 0x21F9BE8 Slot: 23
	public override ManifestResourceInfo GetManifestResourceInfo(string resourceName) { }

	// RVA: 0x21F9C34 Offset: 0x21F9C34 VA: 0x21F9C34 Slot: 22
	public override string[] GetManifestResourceNames() { }

	// RVA: 0x21F9C80 Offset: 0x21F9C80 VA: 0x21F9C80 Slot: 10
	public override Stream GetManifestResourceStream(string name) { }

	// RVA: 0x21F8780 Offset: 0x21F8780 VA: 0x21F8780
	internal bool get_IsCompilerContext() { }

	// RVA: 0x21F8E88 Offset: 0x21F8E88 VA: 0x21F8E88
	internal bool get_IsSave() { }

	// RVA: 0x21F9CCC Offset: 0x21F9CCC VA: 0x21F9CCC
	internal bool get_IsRun() { }

	// RVA: 0x21F9CE0 Offset: 0x21F9CE0 VA: 0x21F9CE0
	internal string get_AssemblyDir() { }

	// RVA: 0x21F8EE8 Offset: 0x21F8EE8 VA: 0x21F8EE8
	private Exception not_supported() { }

	// RVA: 0x21F927C Offset: 0x21F927C VA: 0x21F927C
	private void check_name_and_filename(string name, string fileName, bool fileNeedsToExists) { }

	// RVA: 0x21F9CE8 Offset: 0x21F9CE8 VA: 0x21F9CE8 Slot: 18
	internal override AssemblyName UnprotectedGetName() { }
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC5600 Offset: 0xBC5600 VA: 0xBC5600
[FlagsAttribute] // RVA: 0xBC5600 Offset: 0xBC5600 VA: 0xBC5600
[Serializable]
public enum AssemblyBuilderAccess // TypeDefIndex: 318
{
	// Fields
	public int value__; // 0x0
	public const AssemblyBuilderAccess Run = 1;
	public const AssemblyBuilderAccess Save = 2;
	public const AssemblyBuilderAccess RunAndSave = 3;
	public const AssemblyBuilderAccess ReflectionOnly = 6;
}

// Namespace: System.Reflection.Emit
[ComVisibleAttribute] // RVA: 0xBC563C Offset: 0xBC563C VA: 0xBC563C
[ComDefaultInterfaceAttribute] // RVA: 0xBC563C Offset: 0xBC563C VA: 0xBC563C
[ClassInterfaceAttribute] // RVA: 0xBC563C Offset: 0xBC563C VA: 0xBC563C
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 319
{
	// Fields
	private ILGenerator ilgen; // 0x10
	internal Type[] parameters; // 0x18
	private MethodAttributes attrs; // 0x20
	private MethodImplAttributes iattrs; // 0x24
	private int table_idx; // 0x28
	private CallingConventions call_conv; // 0x2C
	private TypeBuilder type; // 0x30
	internal ParameterBuilder[] pinfo; // 0x38
	private bool init_locals; // 0x40
	private Type[][] paramModReq; // 0x48
	private Type[][] paramModOpt; // 0x50

	// Properties
	[MonoTODOAttribute] // RVA: 0xBCF17C Offset: 0xBCF17C VA: 0xBCF17C
	public override CallingConventions CallingConvention { get; }
	internal TypeBuilder TypeBuilder { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override Module Module { get; }
	private bool IsCompilerContext { get; }

	// Methods

	// RVA: 0x22D3C24 Offset: 0x22D3C24 VA: 0x22D3C24
	internal void .ctor(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }

	// RVA: 0x22D3F60 Offset: 0x22D3F60 VA: 0x22D3F60 Slot: 20
	public override CallingConventions get_CallingConvention() { }

	// RVA: 0x22D3F68 Offset: 0x22D3F68 VA: 0x22D3F68
	internal TypeBuilder get_TypeBuilder() { }

	// RVA: 0x22D3F70 Offset: 0x22D3F70 VA: 0x22D3F70 Slot: 14
	public override ParameterInfo[] GetParameters() { }

	// RVA: 0x22D41C4 Offset: 0x22D41C4 VA: 0x22D41C4
	internal ParameterInfo[] GetParametersInternal() { }

	// RVA: 0x22D4428 Offset: 0x22D4428 VA: 0x22D4428 Slot: 15
	internal override int GetParameterCount() { }

	// RVA: 0x22D4440 Offset: 0x22D4440 VA: 0x22D4440 Slot: 17
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x22D44F4 Offset: 0x22D44F4 VA: 0x22D44F4 Slot: 30
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }

	// RVA: 0x22D4540 Offset: 0x22D4540 VA: 0x22D4540 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }

	// RVA: 0x22D458C Offset: 0x22D458C VA: 0x22D458C Slot: 19
	public override MethodAttributes get_Attributes() { }

	// RVA: 0x22D4594 Offset: 0x22D4594 VA: 0x22D4594 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x22D459C Offset: 0x22D459C VA: 0x22D459C Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x22D45A4 Offset: 0x22D45A4 VA: 0x22D45A4 Slot: 8
	public override string get_Name() { }

	// RVA: 0x22D4638 Offset: 0x22D4638 VA: 0x22D4638 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x22D4684 Offset: 0x22D4684 VA: 0x22D4684 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x22D473C Offset: 0x22D473C VA: 0x22D473C Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x22D47FC Offset: 0x22D47FC VA: 0x22D47FC
	public ILGenerator GetILGenerator() { }

	// RVA: 0x22D4804 Offset: 0x22D4804 VA: 0x22D4804
	public ILGenerator GetILGenerator(int streamSize) { }

	// RVA: 0x22D3F48 Offset: 0x22D3F48 VA: 0x22D3F48
	public MethodToken GetToken() { }

	// RVA: 0x22D4AE8 Offset: 0x22D4AE8 VA: 0x22D4AE8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x22D4B28 Offset: 0x22D4B28 VA: 0x22D4B28 Slot: 3
	public override string ToString() { }

	// RVA: 0x22D4BC4 Offset: 0x22D4BC4 VA: 0x22D4BC4
	internal void fixup() { }

	// RVA: 0x22D3EF4 Offset: 0x22D3EF4 VA: 0x22D3EF4 Slot: 25
	internal override int get_next_table_index(object obj, int table, bool inc) { }

	// RVA: 0x22D4004 Offset: 0x22D4004 VA: 0x22D4004
	private bool get_IsCompilerContext() { }

	// RVA: 0x22D448C Offset: 0x22D448C VA: 0x22D448C
	private Exception not_supported() { }

	// RVA: 0x22D415C Offset: 0x22D415C VA: 0x22D415C
	private Exception not_created() { }
}

// Namespace: System.Reflection.Emit
[ClassInterfaceAttribute] // RVA: 0xBC56C8 Offset: 0xBC56C8 VA: 0xBC56C8
[ComVisibleAttribute] // RVA: 0xBC56C8 Offset: 0xBC56C8 VA: 0xBC56C8
[ComDefaultInterfaceAttribute] // RVA: 0xBC56C8 Offset: 0xBC56C8 VA: 0xBC56C8
public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 320
{}

// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type // TypeDefIndex: 321
{
	// Fields
	internal Type elementType; // 0x18

	// Properties
	public override bool ContainsGenericParameters { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override string FullName { get; }
	public override string Name { get; }
	public override Module Module { get; }
	public override string Namespace { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods

	// RVA: 0x22D39C0 Offset: 0x22D39C0 VA: 0x22D39C0
	internal void .ctor(Type elementType) { }

	// RVA: 0x22D5070 Offset: 0x22D5070 VA: 0x22D5070
	internal static void create_unmanaged_type(Type type) { }

	// RVA: -1 Offset: -1 Slot: 93
	internal abstract string FormatName(string elementName);

	// RVA: 0x22D5074 Offset: 0x22D5074 VA: 0x22D5074 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x22D50DC Offset: 0x22D50DC VA: 0x22D50DC Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x22D50E4 Offset: 0x22D50E4 VA: 0x22D50E4 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x22D514C Offset: 0x22D514C VA: 0x22D514C Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x22D51B4 Offset: 0x22D51B4 VA: 0x22D51B4 Slot: 50
