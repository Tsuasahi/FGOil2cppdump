	public static string CreatePK(int svtId, int num, int priority, int idx) { }

	// RVA: 0x1A86E14 Offset: 0x1A86E14 VA: 0x1A86E14
	public bool isUse(int dispLimitCount = -1, int beforeClearQuestId = -1, int specificLimitCount = -1, long userSvtId = -1) { }
}

// Namespace: 
public class ServantSkillReleaseMaster : DataMasterBase<ServantSkillReleaseMaster, ServantSkillReleaseEntity, string> // TypeDefIndex: 7271
{
	// Methods

	// RVA: 0x1A8701C Offset: 0x1A8701C VA: 0x1A8701C
	public void .ctor() { }

	// RVA: 0x1A87070 Offset: 0x1A87070 VA: 0x1A87070
	public ServantSkillReleaseEntity GetEntity(int svtId, int num, int priority, int idx) { }

	// RVA: 0x1A870FC Offset: 0x1A870FC VA: 0x1A870FC
	public bool TryGetEntity(out ServantSkillReleaseEntity entity, int svtId, int num, int priority, int idx) { }

	// RVA: 0x1A82E60 Offset: 0x1A82E60 VA: 0x1A82E60
	public bool isUse(int svtId, int num, int priority, int dispLimitCount, int beforeClearQuestId, bool isBaseResult, int specificLimitCount = -1, long userSvtId = -1) { }

	// RVA: 0x1A87198 Offset: 0x1A87198 VA: 0x1A87198
	public Dictionary<int, List<ServantSkillReleaseEntity>> GetEntitiyListGroup(ServantSkillEntity servantSkillEntity) { }

	// RVA: 0x1A874E8 Offset: 0x1A874E8 VA: 0x1A874E8
	public List<ServantSkillReleaseEntity> GetEntryListFromCondType(CondType.Kind condType) { }
}

// Namespace: 
public class ServantTreasureDeviceAddEntity : DataEntityBase<string> // TypeDefIndex: 7272
{
	// Fields
	public int svtId; // 0x10
	public int num; // 0x14
	public int priority; // 0x18
	public int condLimitCount; // 0x1C
	public int commonReleaseId; // 0x20
	public int[] treasureDeviceIds; // 0x28
	public int[] hideCardChara; // 0x30
	public string[] titles; // 0x38
	public string[] closedMessages; // 0x40

	// Methods

	// RVA: 0x12C1018 Offset: 0x12C1018 VA: 0x12C1018
	public void .ctor() { }

	// RVA: 0x12C1068 Offset: 0x12C1068 VA: 0x12C1068 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12C107C Offset: 0x12C107C VA: 0x12C107C
	public static string CreatePK(int svtId, int num, int priority) { }

	// RVA: 0x12C1090 Offset: 0x12C1090 VA: 0x12C1090
	public bool IsEnable() { }
}

// Namespace: 
public class ServantTreasureDeviceAddMaster : DataMasterBase<ServantTreasureDeviceAddMaster, ServantTreasureDeviceAddEntity, string> // TypeDefIndex: 7273
{
	// Fields
	protected Dictionary<int, ServantTreasureDeviceAddEntity[]> listCache; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC55D90 Offset: 0xC55D90 VA: 0xC55D90
	private static Comparison<ServantTreasureDeviceAddEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x12C113C Offset: 0x12C113C VA: 0x12C113C
	public void .ctor() { }

	// RVA: 0x12C11B8 Offset: 0x12C11B8 VA: 0x12C11B8
	public ServantTreasureDeviceAddEntity GetEntity(int svtId, int num, int priority) { }

	// RVA: 0x12C123C Offset: 0x12C123C VA: 0x12C123C
	public bool TryGetEntity(out ServantTreasureDeviceAddEntity entity, int svtId, int num, int priority) { }

	// RVA: 0x12C12C8 Offset: 0x12C12C8 VA: 0x12C12C8 Slot: 7
	public override void Clear() { }

	// RVA: 0x12C1334 Offset: 0x12C1334 VA: 0x12C1334 Slot: 6
	public override bool preProcess() { }

	// RVA: 0x12C185C Offset: 0x12C185C VA: 0x12C185C
	public ServantTreasureDeviceAddEntity[] GetEntityListFromSvtId(int svtId) { }

	// RVA: 0x12AA988 Offset: 0x12AA988 VA: 0x12AA988
	public ServantTreasureDeviceAddEntity GetEnableEntity(int svtId, int limitCount, int treasureDeviceId = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA788 Offset: 0xCCA788 VA: 0xCCA788
	// RVA: 0x12C18DC Offset: 0x12C18DC VA: 0x12C18DC
	private static int <preProcess>m__0(ServantTreasureDeviceAddEntity a, ServantTreasureDeviceAddEntity b) { }
}

// Namespace: 
public class ServantTreasureDeviceDamageEntity : DataEntityBase<string> // TypeDefIndex: 7274
{
	// Fields
	public int svtId; // 0x10
	public int[] voiceWeights; // 0x18
	public int voicePrefix; // 0x20

	// Methods

	// RVA: 0x12C1920 Offset: 0x12C1920 VA: 0x12C1920
	public void .ctor() { }

	// RVA: 0x12C1970 Offset: 0x12C1970 VA: 0x12C1970 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12C1984 Offset: 0x12C1984 VA: 0x12C1984
	public static string CreatePK(int svtId, int voicePrefix) { }

	// RVA: 0x12C1994 Offset: 0x12C1994 VA: 0x12C1994
	public int getWeight(int idx) { }
}

// Namespace: 
public class ServantTreasureDeviceDamageMaster : DataMasterBase<ServantTreasureDeviceDamageMaster, ServantTreasureDeviceDamageEntity, string> // TypeDefIndex: 7275
{
	// Methods

	// RVA: 0x12C19F8 Offset: 0x12C19F8 VA: 0x12C19F8
	public void .ctor() { }

	// RVA: 0x12C1A4C Offset: 0x12C1A4C VA: 0x12C1A4C
	public ServantTreasureDeviceDamageEntity GetEntity(int svtId, int voicePrefix) { }

	// RVA: 0x12C1AC0 Offset: 0x12C1AC0 VA: 0x12C1AC0
	public bool TryGetEntity(out ServantTreasureDeviceDamageEntity entity, int svtId, int voicePrefix) { }
}

// Namespace: 
public class ServantTreasureDeviceReleaseEntity : DataEntityBase<string> // TypeDefIndex: 7276
{
	// Fields
	public int svtId; // 0x10
	public int num; // 0x14
	public int priority; // 0x18
	public int idx; // 0x1C
	public int condType; // 0x20
	public int condTargetId; // 0x24
	public int condNum; // 0x28
	public int condGroup; // 0x2C

	// Methods

	// RVA: 0x12C1B44 Offset: 0x12C1B44 VA: 0x12C1B44
	public void .ctor() { }

	// RVA: 0x12C1B94 Offset: 0x12C1B94 VA: 0x12C1B94
	public static string getCreatePrimarykey(int svtId, int num, int priority, int idx) { }

	// RVA: 0x12C1E8C Offset: 0x12C1E8C VA: 0x12C1E8C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12C1EA0 Offset: 0x12C1EA0 VA: 0x12C1EA0
	public static string CreatePK(int svtId, int num, int priority, int idx) { }

	// RVA: 0x12C1EB8 Offset: 0x12C1EB8 VA: 0x12C1EB8
	public bool isUse(int dispLimitCount, int beforeClearQuestId) { }
}

// Namespace: 
public class ServantTreasureDeviceReleaseMaster : DataMasterBase<ServantTreasureDeviceReleaseMaster, ServantTreasureDeviceReleaseEntity, string> // TypeDefIndex: 7277
{
	// Methods

	// RVA: 0x12C1FF8 Offset: 0x12C1FF8 VA: 0x12C1FF8
	public void .ctor() { }

	// RVA: 0x12C204C Offset: 0x12C204C VA: 0x12C204C
	public ServantTreasureDeviceReleaseEntity GetEntity(int svtId, int num, int priority, int idx) { }

	// RVA: 0x12C20D8 Offset: 0x12C20D8 VA: 0x12C20D8
	public bool TryGetEntity(out ServantTreasureDeviceReleaseEntity entity, int svtId, int num, int priority, int idx) { }

	// RVA: 0x12C2174 Offset: 0x12C2174 VA: 0x12C2174
	public bool isUse(int svtId, int num, int priority, int dispLimitCount, int beforeClearQuestId, bool isBaseResult) { }

	// RVA: 0x12B9AE4 Offset: 0x12B9AE4 VA: 0x12B9AE4
	public HashSet<int> GetCorrespondsCostume(int svtId) { }
}

// Namespace: 
public class ServantTreasureDvcEntity : DataEntityBase<string> // TypeDefIndex: 7278
{
	// Fields
	public int svtId; // 0x10
	public int num; // 0x14
	public int priority; // 0x18
	public int flag; // 0x1C
	public int treasureDeviceId; // 0x20
	public int condQuestId; // 0x24
	public int condQuestPhase; // 0x28
	public int condLv; // 0x2C
	public int condFriendshipRank; // 0x30
	public int motion; // 0x34
	public int[] damage; // 0x38
	public int cardId; // 0x40
	public int imageIndex; // 0x44
	public int strengthStatus; // 0x48

	// Methods

	// RVA: 0x12C2590 Offset: 0x12C2590 VA: 0x12C2590
	public void .ctor() { }

	// RVA: 0x12C25E0 Offset: 0x12C25E0 VA: 0x12C25E0 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12C25F4 Offset: 0x12C25F4 VA: 0x12C25F4
	public static string CreatePK(int svtId, int num, int priority) { }

	// RVA: 0x12C2608 Offset: 0x12C2608 VA: 0x12C2608
	public int getServantID() { }

	// RVA: 0x12C2610 Offset: 0x12C2610 VA: 0x12C2610
	public int getServantIdx() { }

	// RVA: 0x12C2618 Offset: 0x12C2618 VA: 0x12C2618
	public int getLevelMax() { }

	// RVA: 0x12C26B4 Offset: 0x12C26B4 VA: 0x12C26B4
	public bool isUse(long userId, int svtLv, int limitCount, int dispLimitCount, int friendshipRank, int beforeClearQuestId = -1) { }

	// RVA: 0x12C27FC Offset: 0x12C27FC VA: 0x12C27FC
	public bool getEffectExplanation(out string tdName, out string tdExplanation, out int maxLv, out int tdGuageCount, out int tdCardId, out int tdStrengthStatus, int tdLv) { }

	// RVA: 0x12C297C Offset: 0x12C297C VA: 0x12C297C
	public bool HasFlag(ServantTreasureDvcEntity.Flag typeFlag) { }
}

// Namespace: 
public enum ServantTreasureDvcEntity.Flag // TypeDefIndex: 7279
{
	// Fields
	public int value__; // 0x0
	public const ServantTreasureDvcEntity.Flag NONE = 1;
	public const ServantTreasureDvcEntity.Flag WITH_PLAYER_PROGRESS = 2;
	public const ServantTreasureDvcEntity.Flag NONE_TREASURE_DEVICE_EFFECT = 4;
	public const ServantTreasureDvcEntity.Flag SECRET_TREASURE_DEVICE = 8;
	public const ServantTreasureDvcEntity.Flag NOT_DISPLAY_SKILL_ICON = 16;
}

// Namespace: 
public class ServantTreasureDvcMaster : DataMasterBase<ServantTreasureDvcMaster, ServantTreasureDvcEntity, string> // TypeDefIndex: 7280
{
	// Fields
	protected Dictionary<int, ServantTreasureDvcEntity[]> listCache; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC55DA0 Offset: 0xC55DA0 VA: 0xC55DA0
	private static Comparison<ServantTreasureDvcEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x12C298C Offset: 0x12C298C VA: 0x12C298C
	public void .ctor() { }

	// RVA: 0x12C2A08 Offset: 0x12C2A08 VA: 0x12C2A08
	public ServantTreasureDvcEntity GetEntity(int svtId, int num, int priority) { }

	// RVA: 0x12C2A8C Offset: 0x12C2A8C VA: 0x12C2A8C
	public bool TryGetEntity(out ServantTreasureDvcEntity entity, int svtId, int num, int priority) { }

	// RVA: 0x12C2B18 Offset: 0x12C2B18 VA: 0x12C2B18 Slot: 6
	public override bool preProcess() { }

	// RVA: 0x12C305C Offset: 0x12C305C VA: 0x12C305C
	public ServantTreasureDvcEntity[] getEntityListFromIdNum(int svtId) { }

	// RVA: 0x12C30E4 Offset: 0x12C30E4 VA: 0x12C30E4
	public ServantTreasureDvcEntity getUseEntity(int svtId, long userId, int svtLv, int limitCount, int dispLimitCount, int friendshipRank, int beforeClearQuestId = -1) { }

	// RVA: 0x12B98BC Offset: 0x12B98BC VA: 0x12B98BC
	public static ServantTreasureDvcEntity getEntityFromIDID(int svtId, int dvcId) { }

	// RVA: 0x12C31A4 Offset: 0x12C31A4 VA: 0x12C31A4
	public ServantTreasureDvcEntity getEntityFromSvtIdDvcId(int svtId, int dvcId) { }

	// RVA: 0x12C333C Offset: 0x12C333C VA: 0x12C333C
	public ServantTreasureDvcEntity getEntityFromSvtIdOnly(int svtId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA798 Offset: 0xCCA798 VA: 0xCCA798
	// RVA: 0x12C349C Offset: 0x12C349C VA: 0x12C349C
	private static int <preProcess>m__0(ServantTreasureDvcEntity a, ServantTreasureDvcEntity b) { }
}

// Namespace: 
public class ServantVoiceEntity : DataEntityBase<string> // TypeDefIndex: 7281
{
	// Fields
	public int id; // 0x10
	public int voicePrefix; // 0x14
	public int type; // 0x18
	public SvtVoiceInfo[] scriptJson; // 0x20
	private const string LABEL_TREASURE_DEVICE = "_B050";
	private static readonly GameEventType.TYPE[] EVENT_TYPES_VOICE; // 0x0

	// Methods

	// RVA: 0x12C34EC Offset: 0x12C34EC VA: 0x12C34EC
	public void .ctor() { }

	// RVA: 0x12C353C Offset: 0x12C353C VA: 0x12C353C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x12C35BC Offset: 0x12C35BC VA: 0x12C35BC
	public static string CreatePK(int id, int voicePrefix, int type) { }

	// RVA: 0x12C35D0 Offset: 0x12C35D0 VA: 0x12C35D0
	public string getVoiceAssetName() { }

	// RVA: 0x12C3638 Offset: 0x12C3638 VA: 0x12C3638
	public static string getVoiceAssetName(int svtId) { }

	// RVA: 0x12C36D8 Offset: 0x12C36D8 VA: 0x12C36D8
	public static int getSvtIdfromVoiceAssetName(string assetName) { }

	// RVA: 0x12C37C0 Offset: 0x12C37C0 VA: 0x12C37C0
	public List<ServantVoiceData[]> getVoiceList(SvtVoiceType.Type type) { }

	// RVA: 0x12C38E4 Offset: 0x12C38E4 VA: 0x12C38E4
	public List<ServantVoiceData[]> getCondClearVoiceList(SvtVoiceType.Type type, int svtId) { }

	// RVA: 0x12C3AE4 Offset: 0x12C3AE4 VA: 0x12C3AE4
	public List<ServantVoiceData[]> getVoiceListByGender(SvtVoiceType.Type type, VoiceCondType.Type condType, int genderType = -1, string playVoiceLabel) { }

	// RVA: 0x12C3EB0 Offset: 0x12C3EB0 VA: 0x12C3EB0
	public List<SvtVoiceInfo> getCondVoiceList(SvtVoiceType.Type type, VoiceCondType.Type condType) { }

	// RVA: 0x12C4040 Offset: 0x12C4040 VA: 0x12C4040
	public List<ServantVoiceData[]> getMaxLimitVoiceList(SvtVoiceType.Type type, ServantLimitUpVoiceCache.Type displayType = 0, bool isPlayVoice = False, int genderType = -1, string playVoiceLabel) { }

	// RVA: 0x12C44C8 Offset: 0x12C44C8 VA: 0x12C44C8
	private int GetChangeLimitVoiceFriendshipLv() { }

	// RVA: 0x12C3D38 Offset: 0x12C3D38 VA: 0x12C3D38
	private SvtVoiceInfo GetPlayVoiceLabelInfo(string playVoiceLabel) { }

	// RVA: 0x12C4618 Offset: 0x12C4618 VA: 0x12C4618
	public List<ServantVoiceData[]> getVoiceList(SvtVoiceType.Type type, VoiceCondType.Type condType, int condValue, string playVoiceLabel) { }

	// RVA: 0x12C48F0 Offset: 0x12C48F0 VA: 0x12C48F0
	public List<ServantVoiceData[]> getVoiceList(SvtVoiceType.Type type, string labelName, List<CondType.Kind> disableCondTypeList, bool isCheckPlayCond = True) { }

	// RVA: 0x12C4C0C Offset: 0x12C4C0C VA: 0x12C4C0C
	public void getOverwriteData(SvtVoiceType.Type type, string labelName, out ServantVoiceCond[] conds, out bool isInvalidVoiceList, out string overwriteName, out string overwriteNameDefault, out int overwritePriority, bool isMaterial = False) { }

	// RVA: 0x12C4F34 Offset: 0x12C4F34 VA: 0x12C4F34
	public ServantVoiceCond[] getConds(SvtVoiceType.Type type, string labelName) { }

	// RVA: 0x12C5124 Offset: 0x12C5124 VA: 0x12C5124
	public List<ServantVoiceData[]> getMyRoomVoiceList(int imageLimitCount) { }

	// RVA: 0x12C5574 Offset: 0x12C5574 VA: 0x12C5574
	public List<ServantVoiceData[]> getMyRoomFriendShipVoiceList(int friendShipRank) { }

	// RVA: 0x12C580C Offset: 0x12C580C VA: 0x12C580C
	public int FriendShipRankWithVoice(int rankNow) { }

	// RVA: 0x12C5AD8 Offset: 0x12C5AD8 VA: 0x12C5AD8
	public List<ServantVoiceData[]> getHomeVoiceList(string labelName) { }

	// RVA: 0x12C5B80 Offset: 0x12C5B80 VA: 0x12C5B80
	public List<ServantVoiceData[]> getLimitCntVoiceListByLabel(string labelName) { }

	// RVA: 0x12C5C28 Offset: 0x12C5C28 VA: 0x12C5C28
	public List<ServantVoiceData[]> getFirstGetVoiceList(int svtId) { }

	// RVA: 0x12C5C38 Offset: 0x12C5C38 VA: 0x12C5C38
	public List<ServantVoiceData[]> GetFirstGetVoiceList(string labelName) { }

	// RVA: 0x12C5CE8 Offset: 0x12C5CE8 VA: 0x12C5CE8
	public List<ServantVoiceData[]> getLevelUpVoiceList(string labelName) { }

	// RVA: 0x12C5D98 Offset: 0x12C5D98 VA: 0x12C5D98
	public ServantVoiceData[] lotteryLevelUpVoice(long userSvtId, string voiceId) { }

	// RVA: 0x12C64C8 Offset: 0x12C64C8 VA: 0x12C64C8
	public List<SvtVoiceInfo> randomChangeSvtVoiceCount(UserServantEntity userServantEntity) { }

	// RVA: 0x12C5E4C Offset: 0x12C5E4C VA: 0x12C5E4C
	public ServantVoiceData[] lotteryLevelUpVoice(UserServantEntity userServantEntity, string voiceId) { }

	// RVA: 0x12C69A0 Offset: 0x12C69A0 VA: 0x12C69A0
	public bool isAvailableVoice(SvtVoiceInfo info, long userSvtId) { }

	// RVA: 0x12C6710 Offset: 0x12C6710 VA: 0x12C6710
	public bool isAvailableVoice(SvtVoiceInfo info, UserServantEntity userSvtEntity) { }

	// RVA: 0x12C5338 Offset: 0x12C5338 VA: 0x12C5338
	public bool isAvailableMyRoomVoice(SvtVoiceInfo info, int imageLimitCount, bool isBeforeFriendship) { }

	// RVA: 0x12C6B78 Offset: 0x12C6B78 VA: 0x12C6B78
	private bool IsAvailableHomeAndGrowth(ServantVoiceCond cond, UserGameEntity userEntity, UserServantEntity userSvtEntity, UserServantEntity[] usrSvtList, int friendshipRankWithVoice, int friendshipRankNow, bool isBeforeFriendship) { }

	// RVA: 0x12C7528 Offset: 0x12C7528 VA: 0x12C7528
	public List<ServantVoiceData[]> getSpecificLimitCntUpVoiceList(int limitCount, string playVoiceLabel) { }

	// RVA: 0x12C7544 Offset: 0x12C7544 VA: 0x12C7544
	public List<ServantVoiceData[]> getLimitCntUpVoiceList(int genderType = -1, string playVoiceLabel) { }

	// RVA: 0x12C7560 Offset: 0x12C7560 VA: 0x12C7560
	public List<ServantVoiceData[]> getCostumeGetVoiceList(int costumeId) { }

	// RVA: 0x12C7578 Offset: 0x12C7578 VA: 0x12C7578
	public List<ServantVoiceData[]> getCntStopVoiceList(ServantLimitUpVoiceCache.Type displayType = 0, bool isPlayVoice = False, int genderType = -1, string playVoiceLabel) { }

	// RVA: 0x12C759C Offset: 0x12C759C VA: 0x12C759C
	public List<ServantVoiceData[]> getRankUpFriendShip(int friendShipRank) { }

	// RVA: 0x12C75B4 Offset: 0x12C75B4 VA: 0x12C75B4
	public List<ServantVoiceData[]> getCostumeCombineVoiceList(int costumeId) { }

	// RVA: 0x12C75CC Offset: 0x12C75CC VA: 0x12C75CC
	public List<ServantVoiceData[]> getEventJoinVoiceList() { }

	// RVA: 0x12C75D4 Offset: 0x12C75D4 VA: 0x12C75D4
	public List<ServantVoiceData[]> getBoxGachaVoiceList(int eventId) { }

	// RVA: 0x12C78C4 Offset: 0x12C78C4 VA: 0x12C78C4
	public List<ServantVoiceData[]> getEventRewardVoiceList() { }

	// RVA: 0x12C7B48 Offset: 0x12C7B48 VA: 0x12C7B48
	public List<ServantVoiceData[]> getEventMissionActionVoiceList() { }

	// RVA: 0x12C7CD8 Offset: 0x12C7CD8 VA: 0x12C7CD8
	public List<ServantVoiceData[]> getMasterMissionActionVoiceList() { }

	// RVA: 0x12C73AC Offset: 0x12C73AC VA: 0x12C73AC
	private bool isQuestClearState(int questId) { }

	// RVA: 0x12C6A54 Offset: 0x12C6A54 VA: 0x12C6A54
	private bool isEventEndState(int eventId, long time) { }

	// RVA: 0x12C7ED8 Offset: 0x12C7ED8 VA: 0x12C7ED8
	public List<ServantVoiceData[]> getEventRewardVoiceList(string labelName) { }

	// RVA: 0x12C7EF0 Offset: 0x12C7EF0 VA: 0x12C7EF0
	public List<ServantVoiceData[]> getBattleVoiceList(string labelName) { }

	// RVA: 0x12C7F08 Offset: 0x12C7F08 VA: 0x12C7F08
	public List<ServantVoiceData[]> getNpVoiceList(string labelName) { }

	// RVA: 0x12C7F20 Offset: 0x12C7F20 VA: 0x12C7F20
	public ServantVoiceData[] getEventVoiceListByName(string id) { }

	// RVA: 0x12C80CC Offset: 0x12C80CC VA: 0x12C80CC
	public List<ServantVoiceData[]> getMasterMissionVoiceList() { }

	// RVA: 0x12C80D4 Offset: 0x12C80D4 VA: 0x12C80D4
	public List<ServantVoiceData[]> getMasterMissionVoiceList(string labelName) { }

	// RVA: 0x12C80EC Offset: 0x12C80EC VA: 0x12C80EC
	public ServantVoiceData[] getMstMissionVoiceListByName(string id) { }

	// RVA: 0x12C829C Offset: 0x12C829C VA: 0x12C829C
	public List<ServantVoiceData[]> getEventShopWelcomeVoiceList(int eventId) { }

	// RVA: 0x12C884C Offset: 0x12C884C VA: 0x12C884C
	public List<ServantVoiceData[]> getEventShopPurchaseVoiceList(int eventId) { }

	// RVA: 0x12C8860 Offset: 0x12C8860 VA: 0x12C8860
	public List<ServantVoiceData[]> getEventIndividualPurchaseVoiceList(int eventId) { }

	// RVA: 0x12C82B0 Offset: 0x12C82B0 VA: 0x12C82B0
	public List<ServantVoiceData[]> getEventShopVoiceList(bool isEventDateCondOnly, int eventId, VoiceCondType.Type checkCondType = 18) { }

	// RVA: 0x12C8874 Offset: 0x12C8874 VA: 0x12C8874
	public List<ServantVoiceData[]> getEventShopVoiceList(string labelName) { }

	// RVA: 0x12C888C Offset: 0x12C888C VA: 0x12C888C
	public string GetSummonScriptId(int svtId) { }

	// RVA: 0x12C8A70 Offset: 0x12C8A70 VA: 0x12C8A70
	private static void .cctor() { }
}

// Namespace: 
public class ServantVoiceMaster : DataMasterBase<ServantVoiceMaster, ServantVoiceEntity, string> // TypeDefIndex: 7282
{
	// Methods

	// RVA: 0x1320848 Offset: 0x1320848 VA: 0x1320848
	public void .ctor() { }

	// RVA: 0x132089C Offset: 0x132089C VA: 0x132089C
	public ServantVoiceEntity GetEntity(int id, int voicePrefix, int type) { }

	// RVA: 0x1320940 Offset: 0x1320940 VA: 0x1320940
	public bool TryGetEntity(out ServantVoiceEntity entity, int id, int voicePrefix, int type) { }

	// RVA: 0x13209EC Offset: 0x13209EC VA: 0x13209EC
	public static int getSvtVoiceId(int svtId) { }

	// RVA: 0x1320A88 Offset: 0x1320A88 VA: 0x1320A88
	public ServantVoiceEntity getEntity(SvtVoiceType.Type voceType, int svtId, int limitCount) { }

	// RVA: 0x1320DD0 Offset: 0x1320DD0 VA: 0x1320DD0
	public List<ServantVoiceEntity> getEntity(SvtVoiceType.Type voiceType, int svtId) { }

	// RVA: 0x1321008 Offset: 0x1321008 VA: 0x1321008
	public ServantVoiceEntity getEntityEventReward(SvtVoiceType.Type voceType, int svtId, int limitCount) { }

	// RVA: 0x132135C Offset: 0x132135C VA: 0x132135C
	public ServantVoiceEntity[] getEntity(int svtId, int limitCount) { }

	// RVA: 0x1321778 Offset: 0x1321778 VA: 0x1321778
	public List<ServantVoiceData[]> getEntity(SvtVoiceType.Type voceType, int svtId, int limitCount, string labelName) { }

	// RVA: 0x1321AE4 Offset: 0x1321AE4 VA: 0x1321AE4
	public List<ServantVoiceData[]> getEntityShopCombine(SvtVoiceType.Type voceType, int svtId, int limitCount, string labelName) { }

	// RVA: 0x1321E14 Offset: 0x1321E14 VA: 0x1321E14
	public static bool isOpenByServantFriendShip(int svtId, int limitCnt, int oldFriendShipRank) { }

	// RVA: 0x1322084 Offset: 0x1322084 VA: 0x1322084
	public List<ServantVoiceData[]> getHomeVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x13220D0 Offset: 0x13220D0 VA: 0x13220D0
	public List<ServantVoiceData[]> getLimitCntVoiceListByLabel(int svtId, int limitCount, string labelName) { }

	// RVA: 0x132211C Offset: 0x132211C VA: 0x132211C
	public List<ServantVoiceData[]> getFirstGetVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x13221F0 Offset: 0x13221F0 VA: 0x13221F0
	public List<ServantVoiceData[]> getLevelUpVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x132223C Offset: 0x132223C VA: 0x132223C
	public List<ServantVoiceData[]> getSpecificLimitCntUpVoiceList(int svtId, int limitCount) { }

	// RVA: 0x1322288 Offset: 0x1322288 VA: 0x1322288
	public List<ServantVoiceData[]> getSpecificLimitCntUpVoiceList(int svtId, int limitCount, int limitCount2) { }

	// RVA: 0x13222D8 Offset: 0x13222D8 VA: 0x13222D8
	public List<ServantVoiceData[]> getLimitCntUpVoiceList(int svtId, int limitCount) { }

	// RVA: 0x1322318 Offset: 0x1322318 VA: 0x1322318
	public List<ServantVoiceData[]> getCostumeGetVoiceList(int svtId, int costumeId) { }

	// RVA: 0x1322360 Offset: 0x1322360 VA: 0x1322360
	public List<ServantVoiceData[]> getCntStopVoiceList(int svtId, int limitCount, ServantLimitUpVoiceCache.Type displayType = 0, bool isPlayVoice = False) { }

	// RVA: 0x13223BC Offset: 0x13223BC VA: 0x13223BC
	public List<ServantVoiceData[]> getRankUpFriendShip(int svtId, int limitCount, int friendShipRank) { }

	// RVA: 0x1322408 Offset: 0x1322408 VA: 0x1322408
	public List<ServantVoiceData[]> getEventJoinVoiceList(int svtId, int limitCount) { }

	// RVA: 0x1322440 Offset: 0x1322440 VA: 0x1322440
	public List<ServantVoiceData[]> getEventRewardVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x132248C Offset: 0x132248C VA: 0x132248C
	public List<ServantVoiceData[]> getBattleVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x13224D8 Offset: 0x13224D8 VA: 0x13224D8
	public List<ServantVoiceData[]> getNpVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x1322524 Offset: 0x1322524 VA: 0x1322524
	public List<ServantVoiceData[]> getMasterMissionVoiceList(int svtId, int limitCount, string labelName) { }

	// RVA: 0x1322570 Offset: 0x1322570 VA: 0x1322570
	public List<ServantVoiceData[]> getEventShopVoiceList(int svtId, int limitCount, string labelName) { }
}

// Namespace: 
public class ServantVoiceRelationEntity : DataEntityBase<string> // TypeDefIndex: 7283
{
	// Fields
	public ObscuredInt svtId; // 0x10
	public ObscuredInt relationSvtId; // 0x20
	public int ascendOrder; // 0x30

	// Methods

	// RVA: 0x13225BC Offset: 0x13225BC VA: 0x13225BC
	public void .ctor() { }

	// RVA: 0x132260C Offset: 0x132260C VA: 0x132260C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x13226AC Offset: 0x13226AC VA: 0x13226AC
	public static string CreatePK(int svtId, int relationSvtId) { }
}

// Namespace: 
public class ServantVoiceRelationMaster : DataMasterBase<ServantVoiceRelationMaster, ServantVoiceRelationEntity, string> // TypeDefIndex: 7284
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC55DB0 Offset: 0xC55DB0 VA: 0xC55DB0
	private static Comparison<ServantVoiceRelationEntity> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC55DC0 Offset: 0xC55DC0 VA: 0xC55DC0
	private static Comparison<ServantVoiceRelationEntity> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC55DD0 Offset: 0xC55DD0 VA: 0xC55DD0
	private static Comparison<ServantVoiceRelationEntity> <>f__am$cache2; // 0x10

	// Methods

	// RVA: 0x13226BC Offset: 0x13226BC VA: 0x13226BC
	public void .ctor() { }

	// RVA: 0x1322710 Offset: 0x1322710 VA: 0x1322710
	public ServantVoiceRelationEntity GetEntity(int svtId, int relationSvtId) { }

	// RVA: 0x1322784 Offset: 0x1322784 VA: 0x1322784
	public bool TryGetEntity(out ServantVoiceRelationEntity entity, int svtId, int relationSvtId) { }

	// RVA: 0x1322808 Offset: 0x1322808 VA: 0x1322808
	public void GetRelationList(out ServantVoiceRelationEntity[] relationList, int svtId) { }

	// RVA: 0x1322A6C Offset: 0x1322A6C VA: 0x1322A6C
	public void GetRelationList(out ServantVoiceRelationEntity[] beforeRelationList, out ServantVoiceRelationEntity[] sameRelationList, out ServantVoiceRelationEntity[] afterRelationList, int svtId) { }

	// RVA: 0x1322E1C Offset: 0x1322E1C VA: 0x1322E1C
	public void MargeServantVoiceId(Dictionary<int, bool> isVoiceList) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA7A8 Offset: 0xCCA7A8 VA: 0xCCA7A8
	// RVA: 0x1322FBC Offset: 0x1322FBC VA: 0x1322FBC
	private static int <GetRelationList>m__0(ServantVoiceRelationEntity a, ServantVoiceRelationEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA7B8 Offset: 0xCCA7B8 VA: 0xCCA7B8
	// RVA: 0x1322FFC Offset: 0x1322FFC VA: 0x1322FFC
	private static int <GetRelationList>m__1(ServantVoiceRelationEntity a, ServantVoiceRelationEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCA7C8 Offset: 0xCCA7C8 VA: 0xCCA7C8
	// RVA: 0x132303C Offset: 0x132303C VA: 0x132303C
	private static int <GetRelationList>m__2(ServantVoiceRelationEntity a, ServantVoiceRelationEntity b) { }
}

// Namespace: 
public class SetItemEntity : DataEntityBase<string> // TypeDefIndex: 7285
{
	// Fields
	public int id; // 0x10
	public int purchaseType; // 0x14
	public int targetId; // 0x18
	public int setNum; // 0x1C

	// Methods

	// RVA: 0x1328B60 Offset: 0x1328B60 VA: 0x1328B60
	public void .ctor() { }

	// RVA: 0x1328BB0 Offset: 0x1328BB0 VA: 0x1328BB0 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1328BC4 Offset: 0x1328BC4 VA: 0x1328BC4
	public static string CreatePK(int id, int purchaseType, int targetId) { }
}

// Namespace: 
public class SetItemMaster : DataMasterBase<SetItemMaster, SetItemEntity, string> // TypeDefIndex: 7286
{
	// Methods

	// RVA: 0x1328BD8 Offset: 0x1328BD8 VA: 0x1328BD8
	public void .ctor() { }

	// RVA: 0x1328C2C Offset: 0x1328C2C VA: 0x1328C2C
	public SetItemEntity GetEntity(int id, int purchaseType, int targetId) { }

	// RVA: 0x1328CB0 Offset: 0x1328CB0 VA: 0x1328CB0
	public bool TryGetEntity(out SetItemEntity entity, int id, int purchaseType, int targetId) { }

	// RVA: 0x1328D3C Offset: 0x1328D3C VA: 0x1328D3C
	public void GetSum(out int itemNum, out int servantNum, out int servantEquipNum, out int cmdCodeNum, out int recordNum, int id) { }

	// RVA: 0x1328F74 Offset: 0x1328F74 VA: 0x1328F74
	public SetItemEntity[] GetList(int id) { }
}

// Namespace: 
public class ShopActionEntity : DataEntityBase<string> // TypeDefIndex: 7287
{
	// Fields
	public int shopId; // 0x10
	public int idx; // 0x14
	public int actionType; // 0x18
	public string[] vals; // 0x20
	public int optionId; // 0x28

	// Methods

	// RVA: 0x13368C4 Offset: 0x13368C4 VA: 0x13368C4
	public void .ctor() { }

	// RVA: 0x1336914 Offset: 0x1336914 VA: 0x1336914 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1336924 Offset: 0x1336924 VA: 0x1336924
	public static string CreatePK(int shopId, int idx) { }

	// RVA: 0x1336934 Offset: 0x1336934 VA: 0x1336934
	public ActionType.Type GetActionType() { }
}

// Namespace: 
public class ShopActionMaster : DataMasterBase<ShopActionMaster, ShopActionEntity, string> // TypeDefIndex: 7288
{
	// Methods

	// RVA: 0x1336DD0 Offset: 0x1336DD0 VA: 0x1336DD0
	public void .ctor() { }

	// RVA: 0x1336E24 Offset: 0x1336E24 VA: 0x1336E24
	public ShopActionEntity GetEntity(int shopId, int idx) { }

	// RVA: 0x1336E98 Offset: 0x1336E98 VA: 0x1336E98
	public bool TryGetEntity(out ShopActionEntity entity, int shopId, int idx) { }

	// RVA: 0x1336F1C Offset: 0x1336F1C VA: 0x1336F1C
	public List<ShopActionEntity> GetEntityList(int purchaseShopId) { }

	// RVA: 0x1337088 Offset: 0x1337088 VA: 0x1337088
	public List<ShopActionEntity> GetVoiceEntityList(int purchaseShopId) { }
}

// Namespace: 
public class ShopDetailEntity : DataEntityBase<int> // TypeDefIndex: 7289
{
	// Fields
	public int shopId; // 0x10
	public string message; // 0x18
	public int frequencyType; // 0x20
	public int presentMessageId; // 0x24
	public string afterMessage; // 0x28
	public int okTextImageId; // 0x30

	// Methods

	// RVA: 0x18CB7FC Offset: 0x18CB7FC VA: 0x18CB7FC
	public void .ctor() { }

	// RVA: 0x18CB84C Offset: 0x18CB84C VA: 0x18CB84C Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x18CB854 Offset: 0x18CB854 VA: 0x18CB854
	public string getMessage() { }

	// RVA: 0x18CB85C Offset: 0x18CB85C VA: 0x18CB85C
	public ShopDetailEntity.FrequencyType getFrequencyType() { }
}

// Namespace: 
public enum ShopDetailEntity.FrequencyType // TypeDefIndex: 7290
{
	// Fields
	public int value__; // 0x0
	public const ShopDetailEntity.FrequencyType ONCE = 1;
	public const ShopDetailEntity.FrequencyType ONCE_UNTIL_REBOOT = 2;
	public const ShopDetailEntity.FrequencyType EVERY_TIME = 3;
	public const ShopDetailEntity.FrequencyType VALENTINE = 4;
	public const ShopDetailEntity.FrequencyType EVERY_TIME_AFTER = 5;
}

// Namespace: 
public class ShopDetailMaster : DataMasterBase<ShopDetailMaster, ShopDetailEntity, int> // TypeDefIndex: 7291
{
	// Methods

	// RVA: 0x18CB864 Offset: 0x18CB864 VA: 0x18CB864
	public void .ctor() { }

	// RVA: 0x18CB8B8 Offset: 0x18CB8B8 VA: 0x18CB8B8
	public ShopDetailEntity getShopDetailEntity(int id) { }

	// RVA: 0x18CB9D0 Offset: 0x18CB9D0 VA: 0x18CB9D0
	public ShopDetailEntity[] getShopDetailEntityList() { }
}

// Namespace: 
public class ShopEntity : DataEntityBase<int> // TypeDefIndex: 7292
{
	// Fields
	public int id; // 0x10
	public int baseShopId; // 0x14
	public int eventId; // 0x18
	public int[] itemIds; // 0x20
	public int slot; // 0x28
	public int flag; // 0x2C
	public int purchaseType; // 0x30
	public int[] targetIds; // 0x38
	public int setNum; // 0x40
	public int payType; // 0x44
	public int shopType; // 0x48
	public int[] prices; // 0x50
	public int limitNum; // 0x58
	public string name; // 0x60
	public string detail; // 0x68
	public int imageId; // 0x70
	public int bgImageId; // 0x74
	public long openedAt; // 0x78
	public long closedAt; // 0x80
	public Dictionary<string, object> script; // 0x88
	public int priority; // 0x90
	public string infoMessage; // 0x98
	public string warningMessage; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC55DE0 Offset: 0xC55DE0 VA: 0xC55DE0
	private static Predicate<UserPresentBoxEntity> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC55DF0 Offset: 0xC55DF0 VA: 0xC55DF0
	private static Predicate<UserPresentBoxEntity> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC55E00 Offset: 0xC55E00 VA: 0xC55E00
	private static Converter<object, int> <>f__am$cache2; // 0x10

	// Properties
	public int TargetId { get; }
	public int TargetMax { get; }

	// Methods

	// RVA: 0x18CBB3C Offset: 0x18CBB3C VA: 0x18CBB3C
	public void .ctor() { }

	// RVA: 0x18CBB8C Offset: 0x18CBB8C VA: 0x18CBB8C Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x18BDA9C Offset: 0x18BDA9C VA: 0x18BDA9C
	public int GetItemCount() { }

	// RVA: 0x18BDA58 Offset: 0x18BDA58 VA: 0x18BDA58
	public int GetItemID() { }

	// RVA: 0x18BDAC8 Offset: 0x18BDAC8 VA: 0x18BDAC8
	public int GetItemIDs(int num) { }

	// RVA: 0x18BDDEC Offset: 0x18BDDEC VA: 0x18BDDEC
	public PayType.Type GetPayType() { }

	// RVA: 0x18CBB94 Offset: 0x18CBB94 VA: 0x18CBB94
	public ShopType.Type GetShopType() { }

	// RVA: 0x18C34F4 Offset: 0x18C34F4 VA: 0x18C34F4
	public int GetFreeShopCondId() { }

	// RVA: 0x18CBB9C Offset: 0x18CBB9C VA: 0x18CBB9C
	public long GetFreeShopReleaseDate() { }

	// RVA: 0x18C25E8 Offset: 0x18C25E8 VA: 0x18C25E8
	public bool IsAfterTheFreeShopReleaseDate() { }

	// RVA: 0x18CBC34 Offset: 0x18CBC34 VA: 0x18CBC34
	public int GetConditionalQuestId() { }

	// RVA: 0x18C2680 Offset: 0x18C2680 VA: 0x18C2680
	public bool IsFulFilledFreeExchangeCondition() { }

	// RVA: 0x18C40AC Offset: 0x18C40AC VA: 0x18C40AC
	public bool IsSetStrikethrough(bool isInPreparation) { }

	// RVA: 0x18C2764 Offset: 0x18C2764 VA: 0x18C2764
	public bool IsPaidExchange() { }

	// RVA: 0x18CBD04 Offset: 0x18CBD04 VA: 0x18CBD04
	public void SetSvtIdAndCostumeId(out int svtId, out int costumeId) { }

	// RVA: 0x18C24C0 Offset: 0x18C24C0 VA: 0x18C24C0
	public bool IsEligibleForFreeFeaturesTheCostumeRelease() { }

	// RVA: 0x18CBE0C Offset: 0x18CBE0C VA: 0x18CBE0C
	public bool IsEnable(long nowTime = 0) { }

	// RVA: 0x18CC08C Offset: 0x18CC08C VA: 0x18CC08C
	public bool IsAllCondClear() { }

	// RVA: 0x18CC170 Offset: 0x18CC170 VA: 0x18CC170
	public bool IsOpened(long nowTime = 0) { }

	// RVA: 0x18CC3E0 Offset: 0x18CC3E0 VA: 0x18CC3E0
	public bool IsClosed(long nowTime = 0) { }

	// RVA: 0x18BDF8C Offset: 0x18BDF8C VA: 0x18BDF8C
	public bool IsPreparation(out string message, out string itemName) { }

	// RVA: 0x18BE088 Offset: 0x18BE088 VA: 0x18BE088
	public bool TryGetClosedMessage(out string message, out string itemName) { }

	// RVA: 0x18CC474 Offset: 0x18CC474 VA: 0x18CC474
	public bool IsQuestHold() { }

	// RVA: 0x18BE140 Offset: 0x18BE140 VA: 0x18BE140
	public bool IsSoldOut() { }

	// RVA: 0x18BD83C Offset: 0x18BD83C VA: 0x18BD83C
	public bool GetIsNotHavingShopItemReceived() { }

	// RVA: 0x18BD934 Offset: 0x18BD934 VA: 0x18BD934
	public bool GetIsAlreadyInPossessionNotHaving(bool isWithoutPresents = False) { }

	// RVA: 0x18CC80C Offset: 0x18CC80C VA: 0x18CC80C
	public bool GetIsAlreadyInPossession(bool isWithoutPresents = False) { }

	// RVA: 0x18C9DB8 Offset: 0x18C9DB8 VA: 0x18C9DB8
	public bool IsServantGet() { }

	// RVA: 0x18CCBF8 Offset: 0x18CCBF8 VA: 0x18CCBF8
	public bool IsHiddenInCaseOfBuying() { }

	// RVA: 0x18CCCF4 Offset: 0x18CCCF4 VA: 0x18CCCF4
	public bool IsHiddenInCaseOfBuyingShopId() { }

	// RVA: 0x18CCDF0 Offset: 0x18CCDF0 VA: 0x18CCDF0
	public bool IsLimitedIconDisplayTarget() { }

	// RVA: 0x18CCE9C Offset: 0x18CCE9C VA: 0x18CCE9C
	public bool IsMonthlyIconDisplayTarget() { }

	// RVA: 0x18CCF48 Offset: 0x18CCF48 VA: 0x18CCF48
	public bool IsExchangeServantIconDisplayTarget() { }

	// RVA: 0x18C35A4 Offset: 0x18C35A4 VA: 0x18C35A4
	public bool IsAnotherItemBuyable() { }

	// RVA: 0x18CCFF4 Offset: 0x18CCFF4 VA: 0x18CCFF4
	public bool IsAnotherPayCommonReleaseOpen() { }

	// RVA: 0x18C37F0 Offset: 0x18C37F0 VA: 0x18C37F0
	public int[] GetAnotherPayItemIds() { }

	// RVA: 0x18CD104 Offset: 0x18CD104 VA: 0x18CD104
	public PayType.Type GetAnotherPayType() { }

	// RVA: 0x18CD19C Offset: 0x18CD19C VA: 0x18CD19C
	public int GetRemainDays() { }

	// RVA: 0x18CD2A8 Offset: 0x18CD2A8 VA: 0x18CD2A8
	public bool IsCondType() { }

	// RVA: 0x18CD3B0 Offset: 0x18CD3B0 VA: 0x18CD3B0
	public bool IsCondType(long userId) { }

	// RVA: 0x18C6364 Offset: 0x18C6364 VA: 0x18C6364
	public int GetPurchaseShop() { }

	// RVA: 0x18CD488 Offset: 0x18CD488 VA: 0x18CD488
	public string GetCountText() { }

	// RVA: 0x18CD4F4 Offset: 0x18CD4F4 VA: 0x18CD4F4
	public IconLabelInfo.IconKind GetPriceUnitIcon() { }

	// RVA: 0x18BDD68 Offset: 0x18BDD68 VA: 0x18BDD68
	public IconLabelInfo.IconKind GetPriceIcon() { }

	// RVA: 0x18BDE18 Offset: 0x18BDE18 VA: 0x18BDE18
	public int GetPrice() { }

	// RVA: 0x18BDE90 Offset: 0x18BDE90 VA: 0x18BDE90
	public int GetPrices(int num) { }

	// RVA: 0x18CD51C Offset: 0x18CD51C VA: 0x18CD51C
	public void GetInfo(out string nameText, out string countText, bool isSend = False) { }

	// RVA: 0x18BE4C0 Offset: 0x18BE4C0 VA: 0x18BE4C0
	public void GetSum(out int buyItemNum, out int buyServantNum, out int buyServantEquipNum, out int buyCmdCodeNum, out int buyQuestNum, out int recordNum) { }

	// RVA: 0x18BE830 Offset: 0x18BE830 VA: 0x18BE830
	public void GetLastPurchaseSum(out int buyItemNum, out int buyServantNum, out int buyServantEquipNum, out int buyCmdCodeNum, out int buyQuestNum) { }

	// RVA: 0x18C2EF8 Offset: 0x18C2EF8 VA: 0x18C2EF8
	public bool checkHoldDisp() { }

	// RVA: 0x18C2FE8 Offset: 0x18C2FE8 VA: 0x18C2FE8
	public int getHoldCount() { }

	// RVA: 0x18BD33C Offset: 0x18BD33C VA: 0x18BD33C
	public bool checkFlag(ShopFlag.Flag flag) { }

	// RVA: 0x18CDBA4 Offset: 0x18CDBA4 VA: 0x18CDBA4
	public int getTargetId(int id = 0) { }

	// RVA: 0x18BD94C Offset: 0x18BD94C VA: 0x18BD94C
	public int get_TargetId() { }

	// RVA: 0x18CDBF8 Offset: 0x18CDBF8 VA: 0x18CDBF8
	public int get_TargetMax() { }

	// RVA: 0x18C39A8 Offset: 0x18C39A8 VA: 0x18C39A8
	public bool isExpireItemClosed() { }

	// RVA: 0x18CDEB8 Offset: 0x18CDEB8 VA: 0x18CDEB8
	public bool isQuestNotClear(out int questId, bool checkExpired = False) { }

	// RVA: 0x18CDF7C Offset: 0x18CDF7C VA: 0x18CDF7C
	public bool isQuestNotClearItemClosedSub(int questId, bool checkExpired = False) { }

	// RVA: 0x18C23E0 Offset: 0x18C23E0 VA: 0x18C23E0
	public bool isQuestNotClearItemClosed(bool checkExpired = False) { }

	// RVA: 0x18CE0D4 Offset: 0x18CE0D4 VA: 0x18CE0D4
	public bool isQuestClear(GamePurchase.Type type) { }

	// RVA: 0x18CE2A4 Offset: 0x18CE2A4 VA: 0x18CE2A4
	public bool isNotQuestClear(GamePurchase.Type type) { }

	// RVA: 0x18CE474 Offset: 0x18CE474 VA: 0x18CE474
	public bool isPurchasedRarePri() { }

	// RVA: 0x18CE594 Offset: 0x18CE594 VA: 0x18CE594
	public bool isNotServantGet() { }

