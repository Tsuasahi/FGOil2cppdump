	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x23FE938 Offset: 0x23FE938 VA: 0x23FE938
	public void .ctor() { }

	// RVA: 0x23FE9C0 Offset: 0x23FE9C0 VA: 0x23FE9C0 Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x23FEA08 Offset: 0x23FEA08 VA: 0x23FEA08 Slot: 11
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x23FEA10 Offset: 0x23FEA10 VA: 0x23FEA10 Slot: 12
	public virtual int GetBlockSize() { }

	// RVA: 0x23FEA18 Offset: 0x23FEA18 VA: 0x23FEA18 Slot: 13
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23FED38 Offset: 0x23FED38 VA: 0x23FED38 Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x23FF674 Offset: 0x23FF674 VA: 0x23FF674 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x23FEC04 Offset: 0x23FEC04 VA: 0x23FEC04
	private void setKey(byte[] key) { }

	// RVA: 0x23FEEB4 Offset: 0x23FEEB4 VA: 0x23FEEB4
	private int encryptBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x23FF268 Offset: 0x23FF268 VA: 0x23FF268
	private int decryptBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x23FF944 Offset: 0x23FF944 VA: 0x23FF944
	private void gamma(uint[] a) { }

	// RVA: 0x23FF678 Offset: 0x23FF678 VA: 0x23FF678
	private void theta(uint[] a, uint[] k) { }

	// RVA: 0x23FF850 Offset: 0x23FF850 VA: 0x23FF850
	private void pi1(uint[] a) { }

	// RVA: 0x23FFC20 Offset: 0x23FFC20 VA: 0x23FFC20
	private void pi2(uint[] a) { }

	// RVA: 0x23FFD14 Offset: 0x23FFD14 VA: 0x23FFD14
	private uint rotl(uint x, int y) { }

	// RVA: 0x23FFD24 Offset: 0x23FFD24 VA: 0x23FFD24
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RC2Engine : IBlockCipher // TypeDefIndex: 4713
{
	// Fields
	private static readonly byte[] piTable; // 0x0
	private const int BLOCK_SIZE = 8;
	private int[] workingKey; // 0x10
	private bool encrypting; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x2345558 Offset: 0x2345558 VA: 0x2345558
	public void .ctor() { }

	// RVA: 0x2345560 Offset: 0x2345560 VA: 0x2345560
	private int[] GenerateWorkingKey(byte[] key, int bits) { }

	// RVA: 0x23459C8 Offset: 0x23459C8 VA: 0x23459C8 Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x2345B88 Offset: 0x2345B88 VA: 0x2345B88 Slot: 11
	public virtual void Reset() { }

	// RVA: 0x2345B8C Offset: 0x2345B8C VA: 0x2345B8C Slot: 12
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2345BD4 Offset: 0x2345BD4 VA: 0x2345BD4 Slot: 13
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x2345BDC Offset: 0x2345BDC VA: 0x2345BDC Slot: 14
	public virtual int GetBlockSize() { }

	// RVA: 0x2345BE4 Offset: 0x2345BE4 VA: 0x2345BE4 Slot: 15
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x2347058 Offset: 0x2347058 VA: 0x2347058
	private int RotateWordLeft(int x, int y) { }

	// RVA: 0x2345D10 Offset: 0x2345D10 VA: 0x2345D10
	private void EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x23466D4 Offset: 0x23466D4 VA: 0x23466D4
	private void DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x234707C Offset: 0x234707C VA: 0x234707C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RC2WrapEngine : IWrapper // TypeDefIndex: 4714
{
	// Fields
	private CbcBlockCipher engine; // 0x10
	private ICipherParameters parameters; // 0x18
	private ParametersWithIV paramPlusIV; // 0x20
	private byte[] iv; // 0x28
	private bool forWrapping; // 0x30
	private SecureRandom sr; // 0x38
	private static readonly byte[] IV2; // 0x0
	private IDigest sha1; // 0x40
	private byte[] digest; // 0x48

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x23470F8 Offset: 0x23470F8 VA: 0x23470F8
	public void .ctor() { }

	// RVA: 0x2347178 Offset: 0x2347178 VA: 0x2347178 Slot: 8
	public virtual void Init(bool forWrapping, ICipherParameters parameters) { }

	// RVA: 0x23473F4 Offset: 0x23473F4 VA: 0x23473F4 Slot: 9
	public virtual string get_AlgorithmName() { }

	// RVA: 0x234743C Offset: 0x234743C VA: 0x234743C Slot: 10
	public virtual byte[] Wrap(byte[] input, int inOff, int length) { }

	// RVA: 0x2347B80 Offset: 0x2347B80 VA: 0x2347B80 Slot: 11
	public virtual byte[] Unwrap(byte[] input, int inOff, int length) { }

	// RVA: 0x23479D4 Offset: 0x23479D4 VA: 0x23479D4
	private byte[] CalculateCmsKeyChecksum(byte[] key) { }

	// RVA: 0x2348260 Offset: 0x2348260 VA: 0x2348260
	private bool CheckCmsKeyChecksum(byte[] key, byte[] checksum) { }

	// RVA: 0x2348288 Offset: 0x2348288 VA: 0x2348288
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RC4Engine : IStreamCipher // TypeDefIndex: 4715
{
	// Fields
	private static readonly int STATE_LENGTH; // 0x0
	private byte[] engineState; // 0x10
	private int x; // 0x18
	private int y; // 0x1C
	private byte[] workingKey; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2348304 Offset: 0x2348304 VA: 0x2348304
	public void .ctor() { }

	// RVA: 0x234830C Offset: 0x234830C VA: 0x234830C Slot: 9
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x2348710 Offset: 0x2348710 VA: 0x2348710 Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2348758 Offset: 0x2348758 VA: 0x2348758 Slot: 11
	public virtual byte ReturnByte(byte input) { }

	// RVA: 0x2348948 Offset: 0x2348948 VA: 0x2348948 Slot: 12
	public virtual void ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: 0x2348C58 Offset: 0x2348C58 VA: 0x2348C58 Slot: 13
	public virtual void Reset() { }

	// RVA: 0x2348460 Offset: 0x2348460 VA: 0x2348460
	private void SetKey(byte[] keyBytes) { }

	// RVA: 0x2348C60 Offset: 0x2348C60 VA: 0x2348C60
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RC532Engine : IBlockCipher // TypeDefIndex: 4716
{
	// Fields
	private int _noRounds; // 0x10
	private int[] _S; // 0x18
	private static readonly int P32; // 0x0
	private static readonly int Q32; // 0x4
	private bool forEncryption; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x2348CB4 Offset: 0x2348CB4 VA: 0x2348CB4
	public void .ctor() { }

	// RVA: 0x2348CE0 Offset: 0x2348CE0 VA: 0x2348CE0 Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2348D28 Offset: 0x2348D28 VA: 0x2348D28 Slot: 11
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x2348D30 Offset: 0x2348D30 VA: 0x2348D30 Slot: 12
	public virtual int GetBlockSize() { }

	// RVA: 0x2348D38 Offset: 0x2348D38 VA: 0x2348D38 Slot: 13
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x23493FC Offset: 0x23493FC VA: 0x23493FC Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x234975C Offset: 0x234975C VA: 0x234975C Slot: 15
	public virtual void Reset() { }

	// RVA: 0x2349048 Offset: 0x2349048 VA: 0x2349048
	private void SetKey(byte[] key) { }

	// RVA: 0x2349424 Offset: 0x2349424 VA: 0x2349424
	private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x23495D4 Offset: 0x23495D4 VA: 0x23495D4
	private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x2349760 Offset: 0x2349760 VA: 0x2349760
	private int RotateLeft(int x, int y) { }

	// RVA: 0x2349958 Offset: 0x2349958 VA: 0x2349958
	private int RotateRight(int x, int y) { }

	// RVA: 0x2349770 Offset: 0x2349770 VA: 0x2349770
	private int BytesToWord(byte[] src, int srcOff) { }

	// RVA: 0x2349868 Offset: 0x2349868 VA: 0x2349868
	private void WordToBytes(int word, byte[] dst, int dstOff) { }

	// RVA: 0x2349964 Offset: 0x2349964 VA: 0x2349964
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RC564Engine : IBlockCipher // TypeDefIndex: 4717
{
	// Fields
	private static readonly int wordSize; // 0x0
	private static readonly int bytesPerWord; // 0x4
	private int _noRounds; // 0x10
	private long[] _S; // 0x18
	private static readonly long P64; // 0x8
	private static readonly long Q64; // 0x10
	private bool forEncryption; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x23499D0 Offset: 0x23499D0 VA: 0x23499D0
	public void .ctor() { }

	// RVA: 0x23499FC Offset: 0x23499FC VA: 0x23499FC Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2349A44 Offset: 0x2349A44 VA: 0x2349A44 Slot: 11
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x2349A4C Offset: 0x2349A4C VA: 0x2349A4C Slot: 12
	public virtual int GetBlockSize() { }

	// RVA: 0x2349AB8 Offset: 0x2349AB8 VA: 0x2349AB8 Slot: 13
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x234A0FC Offset: 0x234A0FC VA: 0x234A0FC Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x234A558 Offset: 0x234A558 VA: 0x234A558 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x2349CFC Offset: 0x2349CFC VA: 0x2349CFC
	private void SetKey(byte[] key) { }

	// RVA: 0x234A10C Offset: 0x234A10C VA: 0x234A10C
	private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x234A344 Offset: 0x234A344 VA: 0x234A344
	private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x234A55C Offset: 0x234A55C VA: 0x234A55C
	private long RotateLeft(long x, long y) { }

	// RVA: 0x234A7A4 Offset: 0x234A7A4 VA: 0x234A7A4
	private long RotateRight(long x, long y) { }

	// RVA: 0x234A5F4 Offset: 0x234A5F4 VA: 0x234A5F4
	private long BytesToWord(byte[] src, int srcOff) { }

	// RVA: 0x234A6D0 Offset: 0x234A6D0 VA: 0x234A6D0
	private void WordToBytes(long word, byte[] dst, int dstOff) { }

	// RVA: 0x234A83C Offset: 0x234A83C VA: 0x234A83C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RC6Engine : IBlockCipher // TypeDefIndex: 4718
{
	// Fields
	private static readonly int wordSize; // 0x0
	private static readonly int bytesPerWord; // 0x4
	private static readonly int _noRounds; // 0x8
	private int[] _S; // 0x10
	private static readonly int P32; // 0xC
	private static readonly int Q32; // 0x10
	private static readonly int LGW; // 0x14
	private bool forEncryption; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x234A8E4 Offset: 0x234A8E4 VA: 0x234A8E4
	public void .ctor() { }

	// RVA: 0x234A8EC Offset: 0x234A8EC VA: 0x234A8EC Slot: 10
	public virtual string get_AlgorithmName() { }

	// RVA: 0x234A934 Offset: 0x234A934 VA: 0x234A934 Slot: 11
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x234A93C Offset: 0x234A93C VA: 0x234A93C Slot: 12
	public virtual int GetBlockSize() { }

	// RVA: 0x234A9A8 Offset: 0x234A9A8 VA: 0x234A9A8 Slot: 13
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x234AFC4 Offset: 0x234AFC4 VA: 0x234AFC4 Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x234B950 Offset: 0x234B950 VA: 0x234B950 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x234AB80 Offset: 0x234AB80 VA: 0x234AB80
	private void SetKey(byte[] key) { }

	// RVA: 0x234B108 Offset: 0x234B108 VA: 0x234B108
	private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x234B51C Offset: 0x234B51C VA: 0x234B51C
	private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x234B954 Offset: 0x234B954 VA: 0x234B954
	private int RotateLeft(int x, int y) { }

	// RVA: 0x234BB9C Offset: 0x234BB9C VA: 0x234BB9C
	private int RotateRight(int x, int y) { }

	// RVA: 0x234B9EC Offset: 0x234B9EC VA: 0x234B9EC
	private int BytesToWord(byte[] src, int srcOff) { }

	// RVA: 0x234BAC8 Offset: 0x234BAC8 VA: 0x234BAC8
	private void WordToBytes(int word, byte[] dst, int dstOff) { }

	// RVA: 0x234BC34 Offset: 0x234BC34 VA: 0x234BC34
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class Rfc3211WrapEngine : IWrapper // TypeDefIndex: 4719
{
	// Fields
	private CbcBlockCipher engine; // 0x10
	private ParametersWithIV param; // 0x18
	private bool forWrapping; // 0x20
	private SecureRandom rand; // 0x28

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x234BCE4 Offset: 0x234BCE4 VA: 0x234BCE4
	public void .ctor(IBlockCipher engine) { }

	// RVA: 0x234BD60 Offset: 0x234BD60 VA: 0x234BD60 Slot: 8
	public virtual void Init(bool forWrapping, ICipherParameters param) { }

	// RVA: 0x234BF34 Offset: 0x234BF34 VA: 0x234BF34 Slot: 9
	public virtual string get_AlgorithmName() { }

	// RVA: 0x234C040 Offset: 0x234C040 VA: 0x234C040 Slot: 10
	public virtual byte[] Wrap(byte[] inBytes, int inOff, int inLen) { }

	// RVA: 0x234C380 Offset: 0x234C380 VA: 0x234C380 Slot: 11
	public virtual byte[] Unwrap(byte[] inBytes, int inOff, int inLen) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class Rfc3394WrapEngine : IWrapper // TypeDefIndex: 4720
{
	// Fields
	private readonly IBlockCipher engine; // 0x10
	private KeyParameter param; // 0x18
	private bool forWrapping; // 0x20
	private byte[] iv; // 0x28

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x234C820 Offset: 0x234C820 VA: 0x234C820
	public void .ctor(IBlockCipher engine) { }

	// RVA: 0x234C8AC Offset: 0x234C8AC VA: 0x234C8AC Slot: 8
	public virtual void Init(bool forWrapping, ICipherParameters parameters) { }

	// RVA: 0x234CAC0 Offset: 0x234CAC0 VA: 0x234CAC0 Slot: 9
	public virtual string get_AlgorithmName() { }

	// RVA: 0x234CB74 Offset: 0x234CB74 VA: 0x234CB74 Slot: 10
	public virtual byte[] Wrap(byte[] input, int inOff, int inLen) { }

	// RVA: 0x234CF88 Offset: 0x234CF88 VA: 0x234CF88 Slot: 11
	public virtual byte[] Unwrap(byte[] input, int inOff, int inLen) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RijndaelEngine : IBlockCipher // TypeDefIndex: 4721
{
	// Fields
	private static readonly int MAXROUNDS; // 0x0
	private static readonly int MAXKC; // 0x4
	private static readonly byte[] Logtable; // 0x8
	private static readonly byte[] Alogtable; // 0x10
	private static readonly byte[] S; // 0x18
	private static readonly byte[] Si; // 0x20
	private static readonly byte[] rcon; // 0x28
	private static readonly byte[][] shifts0; // 0x30
	private static readonly byte[][] shifts1; // 0x38
	private int BC; // 0x10
	private long BC_MASK; // 0x18
	private int ROUNDS; // 0x20
	private int blockBits; // 0x24
	private long[][] workingKey; // 0x28
	private long A0; // 0x30
	private long A1; // 0x38
	private long A2; // 0x40
	private long A3; // 0x48
	private bool forEncryption; // 0x50
	private byte[] shifts0SC; // 0x58
	private byte[] shifts1SC; // 0x60

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x234D41C Offset: 0x234D41C VA: 0x234D41C
	public void .ctor() { }

	// RVA: 0x234D424 Offset: 0x234D424 VA: 0x234D424
	public void .ctor(int blockBits) { }

	// RVA: 0x234D82C Offset: 0x234D82C VA: 0x234D82C
	private byte Mul0x2(int b) { }

	// RVA: 0x234D914 Offset: 0x234D914 VA: 0x234D914
	private byte Mul0x3(int b) { }

	// RVA: 0x234D9FC Offset: 0x234D9FC VA: 0x234D9FC
	private byte Mul0x9(int b) { }

	// RVA: 0x234DAAC Offset: 0x234DAAC VA: 0x234DAAC
	private byte Mul0xb(int b) { }

	// RVA: 0x234DB5C Offset: 0x234DB5C VA: 0x234DB5C
	private byte Mul0xd(int b) { }

	// RVA: 0x234DC0C Offset: 0x234DC0C VA: 0x234DC0C
	private byte Mul0xe(int b) { }

	// RVA: 0x234DCBC Offset: 0x234DCBC VA: 0x234DCBC
	private void KeyAddition(long[] rk) { }

	// RVA: 0x234DD9C Offset: 0x234DD9C VA: 0x234DD9C
	private long Shift(long r, int shift) { }

	// RVA: 0x234DDD0 Offset: 0x234DDD0 VA: 0x234DDD0
	private void ShiftRow(byte[] shiftsSC) { }

	// RVA: 0x234DF0C Offset: 0x234DF0C VA: 0x234DF0C
	private long ApplyS(long r, byte[] box) { }

	// RVA: 0x234DFB4 Offset: 0x234DFB4 VA: 0x234DFB4
	private void Substitution(byte[] box) { }

	// RVA: 0x234E024 Offset: 0x234E024 VA: 0x234E024
	private void MixColumn() { }

	// RVA: 0x234E1D8 Offset: 0x234E1D8 VA: 0x234E1D8
	private void InvMixColumn() { }

	// RVA: 0x234E55C Offset: 0x234E55C VA: 0x234E55C
	private long[][] GenerateWorkingKey(byte[] key) { }

	// RVA: 0x234F0E8 Offset: 0x234F0E8 VA: 0x234F0E8 Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x234F374 Offset: 0x234F374 VA: 0x234F374 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x234F3BC Offset: 0x234F3BC VA: 0x234F3BC Slot: 12
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x234F3C4 Offset: 0x234F3C4 VA: 0x234F3C4 Slot: 13
	public virtual int GetBlockSize() { }

	// RVA: 0x234F3D8 Offset: 0x234F3D8 VA: 0x234F3D8 Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x234FB8C Offset: 0x234FB8C VA: 0x234FB8C Slot: 15
	public virtual void Reset() { }

	// RVA: 0x234F528 Offset: 0x234F528 VA: 0x234F528
	private void UnPackBlock(byte[] bytes, int off) { }

	// RVA: 0x234FA40 Offset: 0x234FA40 VA: 0x234FA40
	private void PackBlock(byte[] bytes, int off) { }

	// RVA: 0x234F744 Offset: 0x234F744 VA: 0x234F744
	private void EncryptBlock(long[][] rk) { }

	// RVA: 0x234F8CC Offset: 0x234F8CC VA: 0x234F8CC
	private void DecryptBlock(long[][] rk) { }

	// RVA: 0x234FB90 Offset: 0x234FB90 VA: 0x234FB90
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class RsaBlindedEngine : IAsymmetricBlockCipher // TypeDefIndex: 4722
{
	// Fields
	private readonly RsaCoreEngine core; // 0x10
	private RsaKeyParameters key; // 0x18
	private SecureRandom random; // 0x20

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x235018C Offset: 0x235018C VA: 0x235018C
	public void .ctor() { }

	// RVA: 0x23501FC Offset: 0x23501FC VA: 0x23501FC Slot: 9
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2350244 Offset: 0x2350244 VA: 0x2350244 Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters param) { }

	// RVA: 0x2350434 Offset: 0x2350434 VA: 0x2350434 Slot: 11
	public virtual int GetInputBlockSize() { }

	// RVA: 0x2350468 Offset: 0x2350468 VA: 0x2350468 Slot: 12
	public virtual int GetOutputBlockSize() { }

	// RVA: 0x235049C Offset: 0x235049C VA: 0x235049C Slot: 13
	public virtual byte[] ProcessBlock(byte[] inBuf, int inOff, int inLen) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
internal class RsaCoreEngine // TypeDefIndex: 4723
{
	// Fields
	private RsaKeyParameters key; // 0x10
	private bool forEncryption; // 0x18
	private int bitSize; // 0x1C

	// Methods

	// RVA: 0x23501F4 Offset: 0x23501F4 VA: 0x23501F4
	public void .ctor() { }

	// RVA: 0x23507C4 Offset: 0x23507C4 VA: 0x23507C4 Slot: 4
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x235090C Offset: 0x235090C VA: 0x235090C Slot: 5
	public virtual int GetInputBlockSize() { }

	// RVA: 0x2350938 Offset: 0x2350938 VA: 0x2350938 Slot: 6
	public virtual int GetOutputBlockSize() { }

	// RVA: 0x2350964 Offset: 0x2350964 VA: 0x2350964 Slot: 7
	public virtual BigInteger ConvertInput(byte[] inBuf, int inOff, int inLen) { }

	// RVA: 0x2350A94 Offset: 0x2350A94 VA: 0x2350A94 Slot: 8
	public virtual byte[] ConvertOutput(BigInteger result) { }

	// RVA: 0x2350B74 Offset: 0x2350B74 VA: 0x2350B74 Slot: 9
	public virtual BigInteger ProcessBlock(BigInteger input) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class Salsa20Engine : IStreamCipher // TypeDefIndex: 4724
{
	// Fields
	public static readonly int DEFAULT_ROUNDS; // 0x0
	private const int StateSize = 16;
	private static readonly uint[] TAU_SIGMA; // 0x8
	[ObsoleteAttribute] // RVA: 0xC49FDC Offset: 0xC49FDC VA: 0xC49FDC
	protected static readonly byte[] sigma; // 0x10
	[ObsoleteAttribute] // RVA: 0xC49FEC Offset: 0xC49FEC VA: 0xC49FEC
	protected static readonly byte[] tau; // 0x18
	protected int rounds; // 0x10
	private int index; // 0x14
	internal uint[] engineState; // 0x18
	internal uint[] x; // 0x20
	private byte[] keyStream; // 0x28
	private bool initialised; // 0x30
	private uint cW0; // 0x34
	private uint cW1; // 0x38
	private uint cW2; // 0x3C

	// Properties
	protected virtual int NonceSize { get; }
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x2350DD4 Offset: 0x2350DD4 VA: 0x2350DD4
	public void .ctor() { }

	// RVA: 0x2350E44 Offset: 0x2350E44 VA: 0x2350E44
	public void .ctor(int rounds) { }

	// RVA: 0x2350F30 Offset: 0x2350F30 VA: 0x2350F30
	internal void PackTauOrSigma(int keyLength, uint[] state, int stateOffset) { }

	// RVA: 0x2351174 Offset: 0x2351174 VA: 0x2351174 Slot: 9
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x235162C Offset: 0x235162C VA: 0x235162C Slot: 10
	protected virtual int get_NonceSize() { }

	// RVA: 0x2351634 Offset: 0x2351634 VA: 0x2351634 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2351730 Offset: 0x2351730 VA: 0x2351730 Slot: 12
	public virtual byte ReturnByte(byte input) { }

	// RVA: 0x23518AC Offset: 0x23518AC VA: 0x23518AC Slot: 13
	protected virtual void AdvanceCounter() { }

	// RVA: 0x235193C Offset: 0x235193C VA: 0x235193C Slot: 14
	public virtual void ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff) { }

	// RVA: 0x2351C34 Offset: 0x2351C34 VA: 0x2351C34 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x2351C5C Offset: 0x2351C5C VA: 0x2351C5C Slot: 16
	protected virtual void ResetCounter() { }

	// RVA: 0x2351CC4 Offset: 0x2351CC4 VA: 0x2351CC4 Slot: 17
	protected virtual void SetKey(byte[] keyBytes, byte[] ivBytes) { }

	// RVA: 0x2352018 Offset: 0x2352018 VA: 0x2352018 Slot: 18
	protected virtual void GenerateKeyStream(byte[] output) { }

	// RVA: 0x23520B4 Offset: 0x23520B4 VA: 0x23520B4
	internal static void SalsaCore(int rounds, uint[] input, uint[] x) { }

	// RVA: 0x2352CB4 Offset: 0x2352CB4 VA: 0x2352CB4
	internal static uint R(uint x, int y) { }

	// RVA: 0x2351C50 Offset: 0x2351C50 VA: 0x2351C50
	private void ResetLimitCounter() { }

	// RVA: 0x2351870 Offset: 0x2351870 VA: 0x2351870
	private bool LimitExceeded() { }

	// RVA: 0x2351BF8 Offset: 0x2351BF8 VA: 0x2351BF8
	private bool LimitExceeded(uint len) { }

	// RVA: 0x2352CC4 Offset: 0x2352CC4 VA: 0x2352CC4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class SeedEngine : IBlockCipher // TypeDefIndex: 4725
{
	// Fields
	private const int BlockSize = 16;
	private static readonly uint[] SS0; // 0x0
	private static readonly uint[] SS1; // 0x8
	private static readonly uint[] SS2; // 0x10
	private static readonly uint[] SS3; // 0x18
	private static readonly uint[] KC; // 0x20
	private int[] wKey; // 0x10
	private bool forEncryption; // 0x18

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x2352D88 Offset: 0x2352D88 VA: 0x2352D88
	public void .ctor() { }

	// RVA: 0x2352D90 Offset: 0x2352D90 VA: 0x2352D90 Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x2353128 Offset: 0x2353128 VA: 0x2353128 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x2353170 Offset: 0x2353170 VA: 0x2353170 Slot: 12
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x2353178 Offset: 0x2353178 VA: 0x2353178 Slot: 13
	public virtual int GetBlockSize() { }

	// RVA: 0x2353180 Offset: 0x2353180 VA: 0x2353180 Slot: 14
	public virtual int ProcessBlock(byte[] inBuf, int inOff, byte[] outBuf, int outOff) { }

	// RVA: 0x2353580 Offset: 0x2353580 VA: 0x2353580 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x2352F0C Offset: 0x2352F0C VA: 0x2352F0C
	private int[] createWorkingKey(byte[] inKey) { }

	// RVA: 0x235358C Offset: 0x235358C VA: 0x235358C
	private int extractW1(long lVal) { }

	// RVA: 0x2353584 Offset: 0x2353584 VA: 0x2353584
	private int extractW0(long lVal) { }

	// RVA: 0x2353718 Offset: 0x2353718 VA: 0x2353718
	private long rotateLeft8(long x) { }

	// RVA: 0x2353710 Offset: 0x2353710 VA: 0x2353710
	private long rotateRight8(long x) { }

	// RVA: 0x2353404 Offset: 0x2353404 VA: 0x2353404
	private long bytesToLong(byte[] src, int srcOff) { }

	// RVA: 0x23534FC Offset: 0x23534FC VA: 0x23534FC
	private void longToBytes(byte[] dest, int destOff, long value) { }

	// RVA: 0x2353594 Offset: 0x2353594 VA: 0x2353594
	private int G(int x) { }

	// RVA: 0x235348C Offset: 0x235348C VA: 0x235348C
	private long F(int ki0, int ki1, long r) { }

	// RVA: 0x2353764 Offset: 0x2353764 VA: 0x2353764
	private int phaseCalc1(int r0, int ki0, int r1, int ki1) { }

	// RVA: 0x2353720 Offset: 0x2353720 VA: 0x2353720
	private int phaseCalc2(int r0, int ki0, int r1, int ki1) { }

	// RVA: 0x2353790 Offset: 0x2353790 VA: 0x2353790
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class SeedWrapEngine : Rfc3394WrapEngine // TypeDefIndex: 4726
{
	// Methods

	// RVA: 0x23538D4 Offset: 0x23538D4 VA: 0x23538D4
	public void .ctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public sealed class SerpentEngine : SerpentEngineBase // TypeDefIndex: 4727
{
	// Methods

	// RVA: 0x2353938 Offset: 0x2353938 VA: 0x2353938
	public void .ctor() { }

	// RVA: 0x23539A8 Offset: 0x23539A8 VA: 0x23539A8 Slot: 15
	protected override int[] MakeWorkingKey(byte[] key) { }

	// RVA: 0x2356AD4 Offset: 0x2356AD4 VA: 0x2356AD4 Slot: 16
	protected override void EncryptBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x23592BC Offset: 0x23592BC VA: 0x23592BC Slot: 17
	protected override void DecryptBlock(byte[] input, int inOff, byte[] output, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public abstract class SerpentEngineBase : IBlockCipher // TypeDefIndex: 4728
{
	// Fields
	protected static readonly int BlockSize; // 0x0
	internal const int ROUNDS = 32;
	internal const int PHI = -1640531527;
	protected bool encrypting; // 0x10
	protected int[] wKey; // 0x18
	protected int X0; // 0x20
	protected int X1; // 0x24
	protected int X2; // 0x28
	protected int X3; // 0x2C

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x23539A0 Offset: 0x23539A0 VA: 0x23539A0
	protected void .ctor() { }

	// RVA: 0x235BF34 Offset: 0x235BF34 VA: 0x235BF34 Slot: 10
	public virtual void Init(bool encrypting, ICipherParameters parameters) { }

	// RVA: 0x235C1B0 Offset: 0x235C1B0 VA: 0x235C1B0 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x235C1F8 Offset: 0x235C1F8 VA: 0x235C1F8 Slot: 12
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x235C200 Offset: 0x235C200 VA: 0x235C200 Slot: 13
	public virtual int GetBlockSize() { }

	// RVA: 0x235C268 Offset: 0x235C268 VA: 0x235C268 Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x235C430 Offset: 0x235C430 VA: 0x235C430 Slot: 14
	public virtual void Reset() { }

	// RVA: 0x2356898 Offset: 0x2356898 VA: 0x2356898
	protected static int RotateLeft(int x, int bits) { }

	// RVA: 0x235C434 Offset: 0x235C434 VA: 0x235C434
	private static int RotateRight(int x, int bits) { }

	// RVA: 0x2356980 Offset: 0x2356980 VA: 0x2356980
	protected void Sb0(int a, int b, int c, int d) { }

	// RVA: 0x235BEF0 Offset: 0x235BEF0 VA: 0x235BEF0
	protected void Ib0(int a, int b, int c, int d) { }

	// RVA: 0x2356940 Offset: 0x2356940 VA: 0x2356940
	protected void Sb1(int a, int b, int c, int d) { }

	// RVA: 0x235BEB0 Offset: 0x235BEB0 VA: 0x235BEB0
	protected void Ib1(int a, int b, int c, int d) { }

	// RVA: 0x23568F4 Offset: 0x23568F4 VA: 0x23568F4
	protected void Sb2(int a, int b, int c, int d) { }

	// RVA: 0x235BE6C Offset: 0x235BE6C VA: 0x235BE6C
	protected void Ib2(int a, int b, int c, int d) { }

	// RVA: 0x23568A8 Offset: 0x23568A8 VA: 0x23568A8
	protected void Sb3(int a, int b, int c, int d) { }

	// RVA: 0x235BE24 Offset: 0x235BE24 VA: 0x235BE24
	protected void Ib3(int a, int b, int c, int d) { }

	// RVA: 0x2356A90 Offset: 0x2356A90 VA: 0x2356A90
	protected void Sb4(int a, int b, int c, int d) { }

	// RVA: 0x235BDE0 Offset: 0x235BDE0 VA: 0x235BDE0
	protected void Ib4(int a, int b, int c, int d) { }

	// RVA: 0x2356A48 Offset: 0x2356A48 VA: 0x2356A48
	protected void Sb5(int a, int b, int c, int d) { }

	// RVA: 0x235BD98 Offset: 0x235BD98 VA: 0x235BD98
	protected void Ib5(int a, int b, int c, int d) { }

	// RVA: 0x2356A08 Offset: 0x2356A08 VA: 0x2356A08
	protected void Sb6(int a, int b, int c, int d) { }

	// RVA: 0x235BD54 Offset: 0x235BD54 VA: 0x235BD54
	protected void Ib6(int a, int b, int c, int d) { }

	// RVA: 0x23569C0 Offset: 0x23569C0 VA: 0x23569C0
	protected void Sb7(int a, int b, int c, int d) { }

	// RVA: 0x235BC6C Offset: 0x235BC6C VA: 0x235BC6C
	protected void Ib7(int a, int b, int c, int d) { }

	// RVA: 0x2359210 Offset: 0x2359210 VA: 0x2359210
	protected void LT() { }

	// RVA: 0x235BCB8 Offset: 0x235BCB8 VA: 0x235BCB8
	protected void InverseLT() { }

	// RVA: -1 Offset: -1 Slot: 15
	protected abstract int[] MakeWorkingKey(byte[] key);

	// RVA: -1 Offset: -1 Slot: 16
	protected abstract void EncryptBlock(byte[] input, int inOff, byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 17
	protected abstract void DecryptBlock(byte[] input, int inOff, byte[] output, int outOff);

	// RVA: 0x235C440 Offset: 0x235C440 VA: 0x235C440
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class SkipjackEngine : IBlockCipher // TypeDefIndex: 4729
{
	// Fields
	private const int BLOCK_SIZE = 8;
	private static readonly short[] ftable; // 0x0
	private int[] key0; // 0x10
	private int[] key1; // 0x18
	private int[] key2; // 0x20
	private int[] key3; // 0x28
	private bool encrypting; // 0x30

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x235C494 Offset: 0x235C494 VA: 0x235C494
	public void .ctor() { }

	// RVA: 0x235C49C Offset: 0x235C49C VA: 0x235C49C Slot: 10
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x235C838 Offset: 0x235C838 VA: 0x235C838 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x235C880 Offset: 0x235C880 VA: 0x235C880 Slot: 12
	public virtual bool get_IsPartialBlockOkay() { }

	// RVA: 0x235C888 Offset: 0x235C888 VA: 0x235C888 Slot: 13
	public virtual int GetBlockSize() { }

	// RVA: 0x235C890 Offset: 0x235C890 VA: 0x235C890 Slot: 14
	public virtual int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x235C9B8 Offset: 0x235C9B8 VA: 0x235C9B8 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x235C9BC Offset: 0x235C9BC VA: 0x235C9BC
	private int G(int k, int w) { }

	// RVA: 0x235CC44 Offset: 0x235CC44 VA: 0x235CC44 Slot: 16
	public virtual int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x235D028 Offset: 0x235D028 VA: 0x235D028
	private int H(int k, int w) { }

	// RVA: 0x235D2B0 Offset: 0x235D2B0 VA: 0x235D2B0 Slot: 17
	public virtual int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x235D6A0 Offset: 0x235D6A0 VA: 0x235D6A0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Engines
public class TeaEngine : IBlockCipher // TypeDefIndex: 4730
{
	// Fields
	private const int rounds = 32;
	private const int block_size = 8;
	private const uint delta = 2654435769;
	private const uint d_sum = 3337565984;
	private uint _a; // 0x10
	private uint _b; // 0x14
	private uint _c; // 0x18
	private uint _d; // 0x1C
	private bool _initialised; // 0x20
	private bool _forEncryption; // 0x21

	// Properties
	public virtual string AlgorithmName { get; }
	public virtual bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x235D71C Offset: 0x235D71C VA: 0x235D71C
