public static class DebugExecutionSettings // TypeDefIndex: 8542
{}

// Namespace: 
public class FpsDisplay : MonoBehaviour // TypeDefIndex: 8543
{
	// Fields
	public UILabel FpsLabel; // 0x18
	public float SlowCautionFps; // 0x20
	public float HeavyCautionFps; // 0x24
	public Color DefaultColor; // 0x28
	public Color SlowCautionColor; // 0x38
	public Color HeavyCautionColor; // 0x48
	public float FpsValue; // 0x58
	public float AverageFps; // 0x5C
	public float MaxFrameTimeOfLastSecond; // 0x60

	// Methods

	// RVA: 0x171DAE8 Offset: 0x171DAE8 VA: 0x171DAE8
	public void .ctor() { }
}

// Namespace: 
public class MemoryInfo // TypeDefIndex: 8544
{
	// Fields
	private static List<MemoryInfo.stackMemoryInfo> stackMemoryInfoList; // 0x0
	private static AndroidJavaObject activityManager; // 0x8
	private static int[] pids; // 0x10

	// Methods

	// RVA: 0x162B0E0 Offset: 0x162B0E0 VA: 0x162B0E0
	public void .ctor() { }

	// RVA: 0x162B0E8 Offset: 0x162B0E8 VA: 0x162B0E8
	private static void setupNativeCall() { }

	// RVA: 0x162B604 Offset: 0x162B604 VA: 0x162B604
	private static long getUsedMemorySize() { }

	// RVA: 0x162B83C Offset: 0x162B83C VA: 0x162B83C
	private static float getUsedMemorySizeMB() { }

	[ConditionalAttribute] // RVA: 0xCCB830 Offset: 0xCCB830 VA: 0xCCB830
	// RVA: 0x162B8AC Offset: 0x162B8AC VA: 0x162B8AC
	public static void RegistCurrentMemory(string name) { }

	// RVA: 0x162BA0C Offset: 0x162BA0C VA: 0x162BA0C
	private static void .cctor() { }
}

// Namespace: 
private class MemoryInfo.stackMemoryInfo // TypeDefIndex: 8545
{
	// Fields
	private string key; // 0x10
	private float usedMemory; // 0x18

	// Methods

	// RVA: 0x162B970 Offset: 0x162B970 VA: 0x162B970
	public void .ctor(string k, float v) { }

	// RVA: 0x162BA94 Offset: 0x162BA94 VA: 0x162BA94 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public class ScreenShot : MonoBehaviour // TypeDefIndex: 8546
{
	// Fields
	public string folder; // 0x18
	public int frameRate; // 0x20
	public float waitTime; // 0x24
	private string realFolder; // 0x28
	private int frameNumber; // 0x30

	// Methods

	// RVA: 0x159D310 Offset: 0x159D310 VA: 0x159D310
	public void .ctor() { }

	// RVA: 0x159D3A8 Offset: 0x159D3A8 VA: 0x159D3A8
	private void Start() { }

	// RVA: 0x159D3DC Offset: 0x159D3DC VA: 0x159D3DC
	private void Update() { }
}

// Namespace: ScreenSizeTool
public class Screen // TypeDefIndex: 8547
{
	// Fields
	private static Rect _safeArea; // 0x0
	private static bool isSimulateSafeArea; // 0x10

	// Properties
	public static Rect safeArea { get; }

	// Methods

	// RVA: 0x159D4B0 Offset: 0x159D4B0 VA: 0x159D4B0
	public void .ctor() { }

	// RVA: 0x159D4B8 Offset: 0x159D4B8 VA: 0x159D4B8
	public static void SetSafeArea(Rect rect) { }

	// RVA: 0x159D53C Offset: 0x159D53C VA: 0x159D53C
	public static void DisableSimulateSafeArea() { }

	// RVA: 0x159D58C Offset: 0x159D58C VA: 0x159D58C
	public static Rect get_safeArea() { }
}

// Namespace: ScreenSizeTool
[ExecuteInEditMode] // RVA: 0xC2A7D4 Offset: 0xC2A7D4 VA: 0xC2A7D4
[AddComponentMenu] // RVA: 0xC2A7D4 Offset: 0xC2A7D4 VA: 0xC2A7D4
public class ScreenSizeToolGui : MonoBehaviour // TypeDefIndex: 8548
{
	// Fields
	private Texture2D safeAreaTex; // 0x18
	private Rect safeArea; // 0x20

	// Methods

	// RVA: 0x159D5F8 Offset: 0x159D5F8 VA: 0x159D5F8
	public void .ctor() { }

	// RVA: 0x159D600 Offset: 0x159D600 VA: 0x159D600
	public void SetSafeArea(Rect rect) { }

	// RVA: 0x159D60C Offset: 0x159D60C VA: 0x159D60C
	private void Awake() { }

	// RVA: 0x159D6E4 Offset: 0x159D6E4 VA: 0x159D6E4
	private void OnGUI() { }
}

// Namespace: 
public class AndroidBackKeyManager : SingletonMonoBehaviour<AndroidBackKeyManager> // TypeDefIndex: 8549
{
	// Fields
	private List<GameObject> btnObjList; // 0x18
	private BattlePerformanceMaster _battlePerfMaster; // 0x20
	private Camera _battleCamera; // 0x28
	public static bool ToastEnabled; // 0x0
	private static AndroidJavaObject beforeToast; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC5F1E4 Offset: 0xC5F1E4 VA: 0xC5F1E4
	private static CommonConfirmDialog.ClickDelegate <>f__am$cache0; // 0x10

	// Properties
	private BattlePerformanceMaster BattlePerfMaster { get; }
	private Camera battleCamera { get; set; }

	// Methods

	// RVA: 0x1075CB0 Offset: 0x1075CB0 VA: 0x1075CB0
	public void .ctor() { }

	// RVA: 0x1068A30 Offset: 0x1068A30 VA: 0x1068A30
	public static void AddBackBtn(GameObject obj) { }

	// RVA: 0x1064A44 Offset: 0x1064A44 VA: 0x1064A44
	public static void AddBackBtn(Transform rootTrans, string btnPath) { }

	// RVA: 0x1075D30 Offset: 0x1075D30 VA: 0x1075D30
	public static void RemoveBackBtn(GameObject obj) { }

	// RVA: 0x1075E74 Offset: 0x1075E74 VA: 0x1075E74
	public static void RemoveBackBtn(Transform rootTrans, string btnPath) { }

	// RVA: 0x1075FB0 Offset: 0x1075FB0 VA: 0x1075FB0
	public static void AddBackKeyTarget(GameObject obj) { }

	// RVA: 0x1076074 Offset: 0x1076074 VA: 0x1076074
	public static void AddBackKeyTarget(Transform rootTrans, string btnPath) { }

	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xCCB868 Offset: 0xCCB868 VA: 0xCCB868
	// RVA: 0x107616C Offset: 0x107616C VA: 0x107616C
	private static void InstantiateSelf() { }

	// RVA: 0x1076354 Offset: 0x1076354 VA: 0x1076354
	private BattlePerformanceMaster get_BattlePerfMaster() { }

	// RVA: 0x10764C4 Offset: 0x10764C4 VA: 0x10764C4
	private void Update() { }

	// RVA: 0x1076500 Offset: 0x1076500 VA: 0x1076500
	private void OnTouchBackKey() { }

	// RVA: 0x1076658 Offset: 0x1076658 VA: 0x1076658
	private bool ExecuteBackFunc() { }

	// RVA: 0x1077170 Offset: 0x1077170 VA: 0x1077170
	private void OpenQuitConfirmDialog() { }

	// RVA: 0x1076B30 Offset: 0x1076B30 VA: 0x1076B30
	private bool IsBtnTouchable(GameObject btnObj) { }

	// RVA: 0x1076F0C Offset: 0x1076F0C VA: 0x1076F0C
	private bool IsBtnTerminalTop(GameObject btnObj) { }

	// RVA: 0x1076DC0 Offset: 0x1076DC0 VA: 0x1076DC0
	private bool IsTitleTopMainPanel(GameObject btnObj) { }

	// RVA: 0x1077958 Offset: 0x1077958 VA: 0x1077958
	private void set_battleCamera(Camera value) { }

	// RVA: 0x1077580 Offset: 0x1077580 VA: 0x1077580
	private Camera get_battleCamera() { }

	// RVA: 0x10774A4 Offset: 0x10774A4 VA: 0x10774A4
	private bool IsInBattleScene(GameObject btnObj) { }

	// RVA: 0x107737C Offset: 0x107737C VA: 0x107737C
	private bool IsTacticalPhaseWait(GameObject btnObj) { }

	// RVA: 0x1076920 Offset: 0x1076920 VA: 0x1076920
	public static void ShowToast(string text) { }

	// RVA: 0x1077968 Offset: 0x1077968 VA: 0x1077968
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB878 Offset: 0xCCB878 VA: 0xCCB878
	// RVA: 0x107796C Offset: 0x107796C VA: 0x107796C
	private static void <OpenQuitConfirmDialog>m__0(bool isDecide) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43414 Offset: 0xC43414 VA: 0xC43414
private sealed class AndroidBackKeyManager.<AddBackBtn>c__AnonStorey0 // TypeDefIndex: 8550
{
	// Fields
	internal GameObject obj; // 0x10

	// Methods

	// RVA: 0x1075D28 Offset: 0x1075D28 VA: 0x1075D28
	public void .ctor() { }

	// RVA: 0x1077A48 Offset: 0x1077A48 VA: 0x1077A48
	internal bool <>m__0(GameObject a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43424 Offset: 0xC43424 VA: 0xC43424
private sealed class AndroidBackKeyManager.<RemoveBackBtn>c__AnonStorey1 // TypeDefIndex: 8551
{
	// Fields
	internal GameObject obj; // 0x10

	// Methods

	// RVA: 0x1075E6C Offset: 0x1075E6C VA: 0x1075E6C
	public void .ctor() { }

	// RVA: 0x1077AD8 Offset: 0x1077AD8 VA: 0x1077AD8
	internal bool <>m__0(GameObject a) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43434 Offset: 0xC43434 VA: 0xC43434
private sealed class AndroidBackKeyManager.<ShowToast>c__AnonStorey3 // TypeDefIndex: 8552
{
	// Fields
	internal AndroidJavaObject context; // 0x10
	internal string text; // 0x18

	// Methods

	// RVA: 0x1077960 Offset: 0x1077960 VA: 0x1077960
	public void .ctor() { }

	// RVA: 0x1077B54 Offset: 0x1077B54 VA: 0x1077B54
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43444 Offset: 0xC43444 VA: 0xC43444
private sealed class AndroidBackKeyManager.<OpenQuitConfirmDialog>c__AnonStorey2 // TypeDefIndex: 8553
{
	// Fields
	internal bool isDecide; // 0x10

	// Methods

	// RVA: 0x1077A40 Offset: 0x1077A40 VA: 0x1077A40
	public void .ctor() { }

	// RVA: 0x1077AC4 Offset: 0x1077AC4 VA: 0x1077AC4
	internal void <>m__0() { }
}

// Namespace: 
public class AndroidBackKeyTarget : MonoBehaviour // TypeDefIndex: 8554
{
	// Fields
	public GameObject targetObject; // 0x18

	// Methods

	// RVA: 0x1077E8C Offset: 0x1077E8C VA: 0x1077E8C
	public void .ctor() { }

	// RVA: 0x1077E94 Offset: 0x1077E94 VA: 0x1077E94
	private void OnEnable() { }
}

// Namespace: 
public class BattlePerformance : BaseMonoBehaviour // TypeDefIndex: 8555
{
	// Fields
	private static readonly float POP_LABEL_INTERVAL; // 0x0
	private static readonly float SHOW_ACTIVATESIDEEFFECT_INTERVAL; // 0x4
	public static readonly float AFTER_BACK_STEP_INTERVAL; // 0x8
	public PlayMakerFSM fsm; // 0x18
	public BattleData data; // 0x20
	public BattleLogic logic; // 0x28
	public BattlePerformance perf; // 0x30
	private GameObject cameraObject; // 0x38
	public PlayMakerFSM camerafsm; // 0x40
	public GameObject commonMotionPrefab; // 0x48
	public BattleEffectControl effectcontrol; // 0x50
	public BattleHitStopControl hitstopcontrol; // 0x58
	public UIPanel[] panelList; // 0x60
	public BattleCameraHitJudgment hitJudgment; // 0x68
	public Camera actorcamera; // 0x70
	public Transform itemintoTr; // 0x78
	public Camera middleCamera; // 0x80
	public Camera uicamera; // 0x88
	public Camera uibackeffectCamera; // 0x90
	public Transform uirootTr; // 0x98
	public Transform fadeoverTr; // 0xA0
	public Transform popupTr; // 0xA8
	[SerializeField] // RVA: 0xC5F1F4 Offset: 0xC5F1F4 VA: 0xC5F1F4
	private Transform turnEffectRoot; // 0xB0
	[SerializeField] // RVA: 0xC5F204 Offset: 0xC5F204 VA: 0xC5F204
	private GameObject tutorialDialogMask; // 0xB8
	public BattlePerformanceBg bgPerf; // 0xC0
	public GameObject attackButton; // 0xC8
	public BattlePerformanceCommandCard commandPerf; // 0xD0
	public bool afterSkillRedrawCommandCard; // 0xD8
	public BattlePerformanceStatus statusPerf; // 0xE0
	public BattleInformationComponent infoComp; // 0xE8
	public GameObject masterRoot; // 0xF0
	public BattleUserGradeComponent gradeComponent; // 0xF8
	public BattlePerformanceContinue contPerf; // 0x100
	public GameObject actorprefab; // 0x108
	public Transform root_field; // 0x110
	public Transform root_drop; // 0x118
	public Transform gimmickRoot; // 0x120
	private int currentGroundNo; // 0x128
	private int currentGroundType; // 0x12C
	private GameObject[] p_actorlist; // 0x130
	private GameObject[] e_actorlist; // 0x138
	private GameObject[] aiNpcArray; // 0x140
	public float distanceofactor; // 0x148
	public BattleFieldMotionComponent[] fieldmotion; // 0x150
	public BattleActionCamera actioncamera; // 0x158
	private GameObject fieldMotionCommon; // 0x160
	public GameObject fadeBlackObject; // 0x168
	public GameObject fadeObject; // 0x170
	public Transform cutinTargetTr; // 0x178
	public Transform cutinRootTr; // 0x180
	public Camera cutIncamera; // 0x188
	private BattlePanelEvent lastCutInPanelEvt; // 0x190
	public bool isNoblePhantasmWhiteInFlg; // 0x198
	private CommonEffectComponent skillCutInObj; // 0x1A0
	private List<string> skillCutInVoiceLoadingList; // 0x1A8
	private List<UIStandFigureM> skillCutInStandFigureList; // 0x1B0
	public BattleFieldEffectComponent fieldEffect; // 0x1B8
	private GameObject roleobject; // 0x1C0
	private Queue<BattleActionData> queue_action; // 0x1C8
	public BattleResultComponent resultwindow; // 0x1D0
	private bool isReadyResultWindow; // 0x1D8
	private GameObject battleResultWindowTarget; // 0x1E0
	private string battleResultWindowEndEvent; // 0x1E8
	private string battleResultWindowResultJson; // 0x1F0
	public static bool CameraFlip; // 0xC
	protected string PlaySeName; // 0x1F8
	protected Action BgLoadCallback; // 0x200
	private bool isTargetChange; // 0x208
	private const int HIGH_PRIORITY_ADD_DEPTH = 1000;
	[CompilerGeneratedAttribute] // RVA: 0xC5F214 Offset: 0xC5F214 VA: 0xC5F214
	[DebuggerBrowsableAttribute] // RVA: 0xC5F214 Offset: 0xC5F214 VA: 0xC5F214
	private int <WaitDispEffectCount>k__BackingField; // 0x20C
	[SerializeField] // RVA: 0xC5F250 Offset: 0xC5F250 VA: 0xC5F250
	private bool isCriticalPerformance; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xC5F260 Offset: 0xC5F260 VA: 0xC5F260
	[DebuggerBrowsableAttribute] // RVA: 0xC5F260 Offset: 0xC5F260 VA: 0xC5F260
	private AssetData <resultAssetData>k__BackingField; // 0x218
	[CompilerGeneratedAttribute] // RVA: 0xC5F29C Offset: 0xC5F29C VA: 0xC5F29C
	[DebuggerBrowsableAttribute] // RVA: 0xC5F29C Offset: 0xC5F29C VA: 0xC5F29C
	private AssetData <gimmickAssetData>k__BackingField; // 0x220
	[CompilerGeneratedAttribute] // RVA: 0xC5F2D8 Offset: 0xC5F2D8 VA: 0xC5F2D8
	[DebuggerBrowsableAttribute] // RVA: 0xC5F2D8 Offset: 0xC5F2D8 VA: 0xC5F2D8
	private GameObject <gimmickObj>k__BackingField; // 0x228
	public bool isBusyStartBattle; // 0x230
	public string startBattlePath; // 0x238
	public AssetData startBattleAsset; // 0x240
	private BattleParamComponent questStartEffectObj; // 0x248
	[CompilerGeneratedAttribute] // RVA: 0xC5F314 Offset: 0xC5F314 VA: 0xC5F314
	[DebuggerBrowsableAttribute] // RVA: 0xC5F314 Offset: 0xC5F314 VA: 0xC5F314
	private FieldMotionManager <fmManager>k__BackingField; // 0x250
	private string enemyMasterCutInVoiceStr; // 0x258
	private bool isTacticalBackward; // 0x260
	private int multiHitWaitingCount; // 0x264
	[CompilerGeneratedAttribute] // RVA: 0xC5F350 Offset: 0xC5F350 VA: 0xC5F350
	[DebuggerBrowsableAttribute] // RVA: 0xC5F350 Offset: 0xC5F350 VA: 0xC5F350
	private bool <IsCalledByEnemyNameUI>k__BackingField; // 0x268
	private bool isResumeAndEnemyAllDeath; // 0x269
	private AssetStorageLoadWrapper assetStorageLoadWrapper; // 0x270
	public Dictionary<int, string> startEffectMap; // 0x278
	public static bool isAnyVoiceFinish; // 0xD
	private EventInfoPointGaugeControl eventInfoPointGaugeControl; // 0x280
	public GameObject eventInfoPointGaugeRoot; // 0x288
	public AlphaMaskTextureManager alphaMaskTextureManager; // 0x290
	private List<int> damageVoiceActorIdList; // 0x298
	private string masterBuffEffectPopLabel; // 0x2A0
	private int masterBuffEffectPopLabelColor; // 0x2A8
	private int[] masterBuffEffectList; // 0x2B0
	private static readonly int VOICE_RATE; // 0x10
	public List<CRIMoviePlayer> moviePlayerDataList; // 0x2B8
	private string[] movieNames; // 0x2C0
	private int[] movieWaveCount; // 0x2C8
	private GameObject movieObject; // 0x2D0
	private bool isMovieCrossFadeExec; // 0x2D8
	[HideInInspector] // RVA: 0xC5F38C Offset: 0xC5F38C VA: 0xC5F38C
	public bool isMovieRebootSkip; // 0x2D9
	private bool isPlayedCutInBuff; // 0x2DA
	private bool isSkipStartSkill; // 0x2DB
	private Coroutine checkStartSkillCoroutine; // 0x2E0
	private GameObject skillCutinMessageObject; // 0x2E8
	public bool isEnableSkipSkillCutIn; // 0x2F0
	public BattlePerformanceDefenceTarget defenceTarget; // 0x2F8
	private BattleMotionSkipManager motionSkipManager; // 0x300
	public bool isBusyClearBattle; // 0x308
	public string clearBattlePath; // 0x310
	public AssetData clearBattleAsset; // 0x318
	private string clearBattleAssetName; // 0x320
	public bool isBusyLimitTurn; // 0x328
	public GameObject objLimitTurnEffect; // 0x330
	public static string limitTurnBasePath; // 0x18
	public string limitTurnPath; // 0x338
	public AssetData limitTurnAsset; // 0x340
	private string raidfileName; // 0x348
	private string turnSituationAssetName; // 0x350
	public bool isBusyLoadEnemyActor; // 0x358
	public bool isBusyLoadNStage; // 0x359
	public bool isChangeLoadBg; // 0x35A
	public static readonly float DefaultFov; // 0x20
	public float currentFov; // 0x35C
	[SerializeField] // RVA: 0xC5F39C Offset: 0xC5F39C VA: 0xC5F39C
	protected List<float> FovTable; // 0x360
	private BattlePerformance.PositionMode positionMode; // 0x368
	public bool waitMovieEnd; // 0x36C
	public bool winAfterMovie; // 0x36D
	private CRIMoviePlayer playingMoviePlayer; // 0x370
	private bool istactical; // 0x378
	public List<GameObject> StandFigures; // 0x380
	private BattleActionData nowAction; // 0x388
	private int wkRandomIndex; // 0x390
	private Vector3[] wkRandomVector; // 0x398
	private List<int> CommonSkillMotionList; // 0x3A0
	private Vector3 criticalAdjustment; // 0x3A8
	private Vector3 classAdjustment; // 0x3B4
	private List<GameObject> adjustments; // 0x3C0
	private Vector3 wkvec; // 0x3C8
	private List<GameObject> popitemlist; // 0x3D8
	private List<GameObject> saveList; // 0x3E0
	private List<Vector3> savePosList; // 0x3E8
	private bool isLoadingVoices; // 0x3F0
	private bool isLoadingFigurePrefabs; // 0x3F1
	private bool isSkipStartQuest; // 0x3F2
	private Coroutine checkCoroutine; // 0x3F8
	private string currentFadeAnimName; // 0x400
	private GameObject clearObj; // 0x408
	protected static bool _never; // 0x24
	private List<GameObject> uieffectList; // 0x410
	[CompilerGeneratedAttribute] // RVA: 0xC5F3AC Offset: 0xC5F3AC VA: 0xC5F3AC
	private static Action <>f__am$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC5F3BC Offset: 0xC5F3BC VA: 0xC5F3BC
	private static Action <>f__am$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC5F3CC Offset: 0xC5F3CC VA: 0xC5F3CC
	private static Action <>f__am$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC5F3DC Offset: 0xC5F3DC VA: 0xC5F3DC
	private static Action <>f__am$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC5F3EC Offset: 0xC5F3EC VA: 0xC5F3EC
	private static Comparison<string> <>f__am$cache4; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC5F3FC Offset: 0xC5F3FC VA: 0xC5F3FC
	private static Func<BattleActionData.MoveToSubMember, bool> <>f__am$cache5; // 0x50

	// Properties
	public BattlePerformanceEnemy EnemyPerf { get; }
	public GameObject[] PlayerActorList { get; set; }
	public GameObject[] EnemyActorList { get; set; }
	public int CurrentGroundNo { get; set; }
	public int CurrentGroundType { get; set; }
	public GameObject[] AiNpcArray { get; }
	public bool enableReadyResultWindow { get; set; }
	public int WaitDispEffectCount { get; set; }
	public bool checkCriticalPerfomance { get; set; }
	public AssetData resultAssetData { get; set; }
	public AssetData gimmickAssetData { get; set; }
	public GameObject gimmickObj { get; set; }
	public FieldMotionManager fmManager { get; set; }
	public bool IsCalledByEnemyNameUI { get; set; }
	public BattleMotionSkipManager MotionSkipManager { get; }
	public BaseMotionSkip MotionSkip { get; }

	// Methods

	// RVA: 0xFC3A98 Offset: 0xFC3A98 VA: 0xFC3A98
	public void .ctor() { }

	// RVA: 0xFC4384 Offset: 0xFC4384 VA: 0xFC4384
	private void Awake() { }

	// RVA: 0xFC44AC Offset: 0xFC44AC VA: 0xFC44AC
	public BattlePerformanceEnemy get_EnemyPerf() { }

	// RVA: 0xFC44D8 Offset: 0xFC44D8 VA: 0xFC44D8
	public GameObject[] get_PlayerActorList() { }

	// RVA: 0xFC44E0 Offset: 0xFC44E0 VA: 0xFC44E0
	public void set_PlayerActorList(GameObject[] value) { }

	// RVA: 0xFC44E8 Offset: 0xFC44E8 VA: 0xFC44E8
	public GameObject[] get_EnemyActorList() { }

	// RVA: 0xFC44F0 Offset: 0xFC44F0 VA: 0xFC44F0
	public void set_EnemyActorList(GameObject[] value) { }

	// RVA: 0xFC44F8 Offset: 0xFC44F8 VA: 0xFC44F8
	public int get_CurrentGroundNo() { }

	// RVA: 0xFC4500 Offset: 0xFC4500 VA: 0xFC4500
	public void set_CurrentGroundNo(int value) { }

	// RVA: 0xFC4508 Offset: 0xFC4508 VA: 0xFC4508
	public int get_CurrentGroundType() { }

	// RVA: 0xFC4510 Offset: 0xFC4510 VA: 0xFC4510
	public void set_CurrentGroundType(int value) { }

	// RVA: 0xFC4518 Offset: 0xFC4518 VA: 0xFC4518
	private void DebugLog(string str) { }

	// RVA: 0xFC451C Offset: 0xFC451C VA: 0xFC451C
	public GameObject[] get_AiNpcArray() { }

	// RVA: 0xFC4524 Offset: 0xFC4524 VA: 0xFC4524
	public void set_enableReadyResultWindow(bool value) { }

	// RVA: 0xFC4530 Offset: 0xFC4530 VA: 0xFC4530
	public bool get_enableReadyResultWindow() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB888 Offset: 0xCCB888 VA: 0xCCB888
	// RVA: 0xFC4538 Offset: 0xFC4538 VA: 0xFC4538
	private void set_WaitDispEffectCount(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB898 Offset: 0xCCB898 VA: 0xCCB898
	// RVA: 0xFC4540 Offset: 0xFC4540 VA: 0xFC4540
	public int get_WaitDispEffectCount() { }

	// RVA: 0xFC4548 Offset: 0xFC4548 VA: 0xFC4548
	public bool get_checkCriticalPerfomance() { }

	// RVA: 0xFC4550 Offset: 0xFC4550 VA: 0xFC4550
	public void set_checkCriticalPerfomance(bool value) { }

	// RVA: 0xFC455C Offset: 0xFC455C VA: 0xFC455C
	public bool checkLoad() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB8A8 Offset: 0xCCB8A8 VA: 0xCCB8A8
	// RVA: 0xFC45CC Offset: 0xFC45CC VA: 0xFC45CC
	public AssetData get_resultAssetData() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB8B8 Offset: 0xCCB8B8 VA: 0xCCB8B8
	// RVA: 0xFC45D4 Offset: 0xFC45D4 VA: 0xFC45D4
	private void set_resultAssetData(AssetData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB8C8 Offset: 0xCCB8C8 VA: 0xCCB8C8
	// RVA: 0xFC45DC Offset: 0xFC45DC VA: 0xFC45DC
	public AssetData get_gimmickAssetData() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB8D8 Offset: 0xCCB8D8 VA: 0xCCB8D8
	// RVA: 0xFC45E4 Offset: 0xFC45E4 VA: 0xFC45E4
	private void set_gimmickAssetData(AssetData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB8E8 Offset: 0xCCB8E8 VA: 0xCCB8E8
	// RVA: 0xFC45EC Offset: 0xFC45EC VA: 0xFC45EC
	public GameObject get_gimmickObj() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB8F8 Offset: 0xCCB8F8 VA: 0xCCB8F8
	// RVA: 0xFC45F4 Offset: 0xFC45F4 VA: 0xFC45F4
	private void set_gimmickObj(GameObject value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB908 Offset: 0xCCB908 VA: 0xCCB908
	// RVA: 0xFC45FC Offset: 0xFC45FC VA: 0xFC45FC
	public FieldMotionManager get_fmManager() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB918 Offset: 0xCCB918 VA: 0xCCB918
	// RVA: 0xFC4604 Offset: 0xFC4604 VA: 0xFC4604
	private void set_fmManager(FieldMotionManager value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB928 Offset: 0xCCB928 VA: 0xCCB928
	// RVA: 0xFC460C Offset: 0xFC460C VA: 0xFC460C
	public bool get_IsCalledByEnemyNameUI() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCB938 Offset: 0xCCB938 VA: 0xCCB938
	// RVA: 0xFC4614 Offset: 0xFC4614 VA: 0xFC4614
	public void set_IsCalledByEnemyNameUI(bool value) { }

	// RVA: 0xFC4620 Offset: 0xFC4620 VA: 0xFC4620
	public BattleMotionSkipManager get_MotionSkipManager() { }

	// RVA: 0xFC468C Offset: 0xFC468C VA: 0xFC468C
	public BaseMotionSkip get_MotionSkip() { }

	// RVA: 0xFC46C0 Offset: 0xFC46C0 VA: 0xFC46C0
	public bool isActiveEventInfoGauge() { }

	// RVA: 0xFC4730 Offset: 0xFC4730 VA: 0xFC4730
	private bool IsEventGaugeOpen(int eventId) { }

	// RVA: 0xFC4924 Offset: 0xFC4924 VA: 0xFC4924
	public bool LoadEventInfoPointGauge(Action finishAction, int eventId) { }

	// RVA: 0xFC4A5C Offset: 0xFC4A5C VA: 0xFC4A5C
	private void SetupEventInfoPointGauge() { }

	// RVA: 0xFC4CE0 Offset: 0xFC4CE0 VA: 0xFC4CE0
	public void PlayEventInfoPointGaugeEffect(int point) { }

	// RVA: 0xFC4F4C Offset: 0xFC4F4C VA: 0xFC4F4C
	public void ReleaseEventInfoPointGauge() { }

	// RVA: 0xFC4FE8 Offset: 0xFC4FE8 VA: 0xFC4FE8
	public void LoadStartBattleAsset(int startEffectId) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB948 Offset: 0xCCB948 VA: 0xCCB948
	// RVA: 0xFC5224 Offset: 0xFC5224 VA: 0xFC5224
	private IEnumerator coroutineLoadStartBattleAsset() { }

	// RVA: 0xFC51D8 Offset: 0xFC51D8 VA: 0xFC51D8
	public void ReleaseStartBattleAsset() { }

	// RVA: 0xFC5294 Offset: 0xFC5294 VA: 0xFC5294
	public void LoadClearBattleAsset() { }

	// RVA: 0xFC53C4 Offset: 0xFC53C4 VA: 0xFC53C4
	private void SettingClearBattleInfo() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB958 Offset: 0xCCB958 VA: 0xCCB958
	// RVA: 0xFC5354 Offset: 0xFC5354 VA: 0xFC5354
	private IEnumerator coroutineLoadClearBattleAsset() { }

	// RVA: 0xFC52D0 Offset: 0xFC52D0 VA: 0xFC52D0
	public void ReleaseClearBattleAsset() { }

	// RVA: 0xFC54C4 Offset: 0xFC54C4 VA: 0xFC54C4
	public void loadLimitTurnAsset(int turnEffectType) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB968 Offset: 0xCCB968 VA: 0xCCB968
	// RVA: 0xFC5624 Offset: 0xFC5624 VA: 0xFC5624
	private IEnumerator coroutineLoadLimitTurnAsse() { }

	// RVA: 0xFC55DC Offset: 0xFC55DC VA: 0xFC55DC
	public void ReleaseLimitTurnAsset() { }

	// RVA: 0xFC5694 Offset: 0xFC5694 VA: 0xFC5694
	public void playLimitTurnEffect(Action callBack) { }

	// RVA: 0xFC586C Offset: 0xFC586C VA: 0xFC586C
	public void SetLimitTurnEffectFlag(bool flg) { }

	// RVA: 0xFC5980 Offset: 0xFC5980 VA: 0xFC5980
	public void startRaidDamage(string eventName) { }

	// RVA: 0xFC5B84 Offset: 0xFC5B84 VA: 0xFC5B84
	public void checkRaidDamage(string eventName) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB978 Offset: 0xCCB978 VA: 0xCCB978
	// RVA: 0xFC5AF0 Offset: 0xFC5AF0 VA: 0xFC5AF0
	private IEnumerator coroutineRaidAttackEffect(string eventName) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB988 Offset: 0xCCB988 VA: 0xCCB988
	// RVA: 0xFC5A5C Offset: 0xFC5A5C VA: 0xFC5A5C
	private IEnumerator coroutineTurnSituationEffect(string eventName) { }

	// RVA: 0xFC5C18 Offset: 0xFC5C18 VA: 0xFC5C18
	private void Start() { }

	// RVA: 0xFC5CAC Offset: 0xFC5CAC VA: 0xFC5CAC
	private void OnDestroy() { }

	// RVA: 0xFC5D40 Offset: 0xFC5D40 VA: 0xFC5D40
	private void FingerGestures_OnGestureEvent(Gesture gesture) { }

	// RVA: 0xFC5EB8 Offset: 0xFC5EB8 VA: 0xFC5EB8
	public void loadStorageObject(AssetData aData) { }

	// RVA: 0xFC6108 Offset: 0xFC6108 VA: 0xFC6108
	public void loadFieldMotion(AssetData commonData, List<AssetData> motionDataList) { }

	// RVA: 0xFC6560 Offset: 0xFC6560 VA: 0xFC6560
	public void Initialize() { }

	// RVA: 0xFC6D9C Offset: 0xFC6D9C VA: 0xFC6D9C
	private void DestroyAndUnloadBattleActor(GameObject[] actorList) { }

	// RVA: 0xFC70F8 Offset: 0xFC70F8 VA: 0xFC70F8
	public UIPanel getPanel(int index) { }

	// RVA: 0xFC7150 Offset: 0xFC7150 VA: 0xFC7150
	public void procEndQuest() { }

	// RVA: 0xFC75C8 Offset: 0xFC75C8 VA: 0xFC75C8
	public void LoadBattleAsset(string endEventStr) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB998 Offset: 0xCCB998 VA: 0xCCB998
	// RVA: 0xFC75F4 Offset: 0xFC75F4 VA: 0xFC75F4
	private IEnumerator LoadBattleSubAsset(string endEventStr) { }

	// RVA: 0xFC7688 Offset: 0xFC7688 VA: 0xFC7688
	public void initQuest() { }

	// RVA: 0xFC7F20 Offset: 0xFC7F20 VA: 0xFC7F20
	public void InitAmbientLight() { }

	// RVA: 0xFC7968 Offset: 0xFC7968 VA: 0xFC7968
	public void loadMaster() { }

	// RVA: 0xFC7F3C Offset: 0xFC7F3C VA: 0xFC7F3C
	public void loadEnemyMaster() { }

	// RVA: 0xFC7F6C Offset: 0xFC7F6C VA: 0xFC7F6C
	public void DeleteServantStatus(int index, bool isEnemy) { }

	// RVA: 0xFC7FD4 Offset: 0xFC7FD4 VA: 0xFC7FD4
	public bool deletePlayerActor(int index) { }

	// RVA: 0xFC7C0C Offset: 0xFC7C0C VA: 0xFC7C0C
	public void LoadAiNpcPlayerActors() { }

	// RVA: 0xFC82E8 Offset: 0xFC82E8 VA: 0xFC82E8
	private GameObject LoadAiNpcPlayerActor(int index, BattleServantData svtData) { }

	// RVA: 0xFC7998 Offset: 0xFC7998 VA: 0xFC7998
	public bool loadPlayerActor(int index) { }

	// RVA: 0xFC83E0 Offset: 0xFC83E0 VA: 0xFC83E0
	private GameObject CommonLoadPlayerActor(int index, BattleServantData svtdata, string prefixVariable = "") { }

	// RVA: 0xFC8878 Offset: 0xFC8878 VA: 0xFC8878
	public Transform getTacticalPlayerPos(int index) { }

	// RVA: 0xFC88B4 Offset: 0xFC88B4 VA: 0xFC88B4
	public Transform getRepopPlayerPos(int index) { }

	// RVA: 0xFC88F0 Offset: 0xFC88F0 VA: 0xFC88F0
	public void repopPlayerActor(int index) { }

	// RVA: 0xFC8A24 Offset: 0xFC8A24 VA: 0xFC8A24
	public void replacePlayerActor(int index) { }

	// RVA: 0xFC8B58 Offset: 0xFC8B58 VA: 0xFC8B58
	public void continuePlayerActor(int index, bool isTactical) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB9A8 Offset: 0xCCB9A8 VA: 0xCCB9A8
	// RVA: 0xFC8CAC Offset: 0xFC8CAC VA: 0xFC8CAC
	private IEnumerator coroutineLoadEnemyActor() { }

	// RVA: 0xFC8D1C Offset: 0xFC8D1C VA: 0xFC8D1C
	private void SwitchUniqueFieldMotionState() { }

	// RVA: 0xFC8DC0 Offset: 0xFC8DC0 VA: 0xFC8DC0
	public void loadNStage(int stagecount) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB9B8 Offset: 0xCCB9B8 VA: 0xCCB9B8
	// RVA: 0xFC8DEC Offset: 0xFC8DEC VA: 0xFC8DEC
	private IEnumerator coroutineLoadNStage(int stagecount) { }

	// RVA: 0xFC8E5C Offset: 0xFC8E5C VA: 0xFC8E5C
	public void rebootMovieSkip() { }

	// RVA: 0xFC921C Offset: 0xFC921C VA: 0xFC921C
	public void ChangeWaveBg(int id, int tp = 0) { }

	// RVA: 0xFC9448 Offset: 0xFC9448 VA: 0xFC9448
	public void updateFov() { }

	// RVA: 0xFC99E0 Offset: 0xFC99E0 VA: 0xFC99E0
	public void UpdateAllShadow() { }

	// RVA: 0xFC9900 Offset: 0xFC9900 VA: 0xFC9900
	public void setupCameraFov(float fov) { }

	// RVA: 0xFC946C Offset: 0xFC946C VA: 0xFC946C
	public float GetMaxFov() { }

	// RVA: 0xFC9B90 Offset: 0xFC9B90 VA: 0xFC9B90
	public bool deleteEnemyActor(int index) { }

	// RVA: 0xFC9DE0 Offset: 0xFC9DE0 VA: 0xFC9DE0
	public void DeleteFieldEnemyActors() { }

	// RVA: 0xFC9E34 Offset: 0xFC9E34 VA: 0xFC9E34
	public void enableEnemyColliderALL() { }

	// RVA: 0xFC9ED4 Offset: 0xFC9ED4 VA: 0xFC9ED4
	public void disableEnemyColliderALL() { }

	// RVA: 0xFC9F74 Offset: 0xFC9F74 VA: 0xFC9F74
	public bool loadEnemyActor(int index) { }

	// RVA: 0xFCA650 Offset: 0xFCA650 VA: 0xFCA650
	public Transform getRepopEnemyPos(int index) { }

	// RVA: 0xFCA68C Offset: 0xFCA68C VA: 0xFCA68C
	public Transform getRepopEnemyTacicalPos(int index) { }

	// RVA: 0xFCA6C8 Offset: 0xFCA6C8 VA: 0xFCA6C8
	public void repopEnemyActor(int index) { }

	// RVA: 0xFCA7FC Offset: 0xFCA7FC VA: 0xFCA7FC
	public void replaceEnemyActor(int index) { }

	// RVA: 0xFCA978 Offset: 0xFCA978 VA: 0xFCA978
	public void updateView() { }

	// RVA: 0xFC0A3C Offset: 0xFC0A3C VA: 0xFC0A3C
	public void updateDropItemCount() { }

	// RVA: 0xFCAA88 Offset: 0xFCAA88 VA: 0xFCAA88
	public void setTimeScale(float time) { }

	// RVA: 0xFCAA90 Offset: 0xFCAA90 VA: 0xFCAA90
	public GameObject getServantGameObject(int uniqueId) { }

	// RVA: 0xFCAECC Offset: 0xFCAECC VA: 0xFCAECC
	public GameObject getServantGameObjectFromIndex(int index, bool isEnemy) { }

	// RVA: 0xFCAF30 Offset: 0xFCAF30 VA: 0xFCAF30
	public int getServantIndex(GameObject searchObj, bool isEnemy) { }

	// RVA: 0xFCAFEC Offset: 0xFCAFEC VA: 0xFCAFEC
	public GameObject getDefaultTargetPosObject(int index, bool isEnemy) { }

	// RVA: 0xFCB054 Offset: 0xFCB054 VA: 0xFCB054
	public int getServantPosIndex(int uniqueId) { }

	// RVA: 0xFCB320 Offset: 0xFCB320 VA: 0xFCB320
	public BattleActorControl getServantActor(int uniqueId) { }

	// RVA: 0xFCAE08 Offset: 0xFCAE08 VA: 0xFCAE08
	public BattleActorControl GetAiNpcActor(int uniqueId) { }

	// RVA: 0xFCB61C Offset: 0xFCB61C VA: 0xFCB61C
	public void updateStatus() { }

	// RVA: 0xFCB64C Offset: 0xFCB64C VA: 0xFCB64C
	public void PrevTacticalProc() { }

	// RVA: 0xFCA968 Offset: 0xFCA968 VA: 0xFCA968
	public bool isPositionTactical() { }

	// RVA: 0xFCB6A8 Offset: 0xFCB6A8 VA: 0xFCB6A8
	public bool isPositionBattle() { }

	// RVA: 0xFCB6B8 Offset: 0xFCB6B8 VA: 0xFCB6B8
	public void movePositionToBattle() { }

	// RVA: 0xFCB7D8 Offset: 0xFCB7D8 VA: 0xFCB7D8
	public void movePositionToTactical() { }

	// RVA: 0xFCB984 Offset: 0xFCB984 VA: 0xFCB984
	public void setPositionModeTac() { }

	// RVA: 0xFCB7D0 Offset: 0xFCB7D0 VA: 0xFCB7D0
	public void setPositionModeBattle() { }

	// RVA: 0xFC91EC Offset: 0xFC91EC VA: 0xFC91EC
	public int getBattleWaveNum() { }

	// RVA: 0xFCB990 Offset: 0xFCB990 VA: 0xFCB990
	public bool playBattleMovie(string name, bool movieEndDispose = False, BattlePerformance.playMovieType type = 0, bool isBgmPause = True, bool isSePause = True, bool isVoicePause = True) { }

	// RVA: 0xFC8FEC Offset: 0xFC8FEC VA: 0xFC8FEC
	private void setWaveMovieCameraPosition() { }

	// RVA: 0xFC9114 Offset: 0xFC9114 VA: 0xFC9114
	private void enemyServantsChangeDead() { }

	// RVA: 0xFCBC58 Offset: 0xFCBC58 VA: 0xFCBC58
	public void waveStartMovie(CRIMoviePlayer cRIMoviePlayer, bool movieEndDispose) { }

	// RVA: 0xFCBE94 Offset: 0xFCBE94 VA: 0xFCBE94
	private void disposeCRIMoviePlayer(CRIMoviePlayer player, bool fadeIn) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB9C8 Offset: 0xCCB9C8 VA: 0xCCB9C8
	// RVA: 0xFCBF34 Offset: 0xFCBF34 VA: 0xFCBF34
	private IEnumerator movieCrossFade() { }

	// RVA: 0xFCC00C Offset: 0xFCC00C VA: 0xFCC00C
	public void playWinMotion() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB9D8 Offset: 0xCCB9D8 VA: 0xCCB9D8
	// RVA: 0xFCCC64 Offset: 0xFCCC64 VA: 0xFCCC64
	private IEnumerator waitAndSendFsmEvent(string eventName, float waitTime) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB9E8 Offset: 0xCCB9E8 VA: 0xCCB9E8
	// RVA: 0xFCCBD0 Offset: 0xFCCBD0 VA: 0xFCCBD0
	private IEnumerator waitMovieAndSendFsmEvent(string eventName) { }

	// RVA: 0xFCE348 Offset: 0xFCE348 VA: 0xFCE348
	public void playLoseMotion() { }

	// RVA: 0xFCE2CC Offset: 0xFCE2CC VA: 0xFCE2CC
	public void setCameraAction(string inName) { }

	// RVA: 0xFCE398 Offset: 0xFCE398 VA: 0xFCE398
	public void moveNextBattle(string endstr) { }

	// RVA: 0xFCE474 Offset: 0xFCE474 VA: 0xFCE474
	public void updateAuraAll() { }

	// RVA: 0xFCE5A0 Offset: 0xFCE5A0 VA: 0xFCE5A0
	public GameObject getListEffect(BattleEffectControl.ID id) { }

	// RVA: 0xFCE5D8 Offset: 0xFCE5D8 VA: 0xFCE5D8
	public GameObject getEffectInstantiate(BattleEffectControl.ID id, Transform parent) { }

	// RVA: 0xFCE65C Offset: 0xFCE65C VA: 0xFCE65C
	public void destroyInstantiate(GameObject obj) { }

	// RVA: 0xFCE694 Offset: 0xFCE694 VA: 0xFCE694
	public void startTac(string fsmevent) { }

	// RVA: 0xFCE918 Offset: 0xFCE918 VA: 0xFCE918
	private bool loadCommandCritical() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCB9F8 Offset: 0xCCB9F8 VA: 0xCCB9F8
	// RVA: 0xFCE884 Offset: 0xFCE884 VA: 0xFCE884
	private IEnumerator StartTacCoroutine(string endevent) { }

	// RVA: 0xFCEBE4 Offset: 0xFCEBE4 VA: 0xFCEBE4
	public void endSelectAbilityButton() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBA08 Offset: 0xCCBA08 VA: 0xCCBA08
	// RVA: 0xFCEC70 Offset: 0xFCEC70 VA: 0xFCEC70
	private IEnumerator ActiveCoroutine() { }

	// RVA: 0xFCECE0 Offset: 0xFCECE0 VA: 0xFCECE0
	public void backTacticalMode() { }

	// RVA: 0xFCEDD8 Offset: 0xFCEDD8 VA: 0xFCEDD8
	public void setRefreshStarsFlg(bool flg) { }

	// RVA: 0xFCEE10 Offset: 0xFCEE10 VA: 0xFCEE10
	public void setSelectTargetFlg(bool flg) { }

	// RVA: 0xFCEE1C Offset: 0xFCEE1C VA: 0xFCEE1C
	public void setTargetChangeActive(bool isChange) { }

	// RVA: 0xFCEE28 Offset: 0xFCEE28 VA: 0xFCEE28
	public void clickTargetBody(int index) { }

	// RVA: 0xFCEE84 Offset: 0xFCEE84 VA: 0xFCEE84
	public void clickTarget(int index) { }

	// RVA: 0xFCF0D0 Offset: 0xFCF0D0 VA: 0xFCF0D0
	public void setEnemyTarget(int uniqueId) { }

	// RVA: 0xFCF134 Offset: 0xFCF134 VA: 0xFCF134
	public void setOffTarget() { }

	// RVA: 0xFCE7E4 Offset: 0xFCE7E4 VA: 0xFCE7E4
	public void reViewTargetMarks() { }

	// RVA: 0xFCF1D0 Offset: 0xFCF1D0 VA: 0xFCF1D0
	public void longPressTarget(int index) { }

	// RVA: 0xFCF218 Offset: 0xFCF218 VA: 0xFCF218
	public void registCommandCard(BattleCommandData[] datalist) { }

	// RVA: 0xFCF250 Offset: 0xFCF250 VA: 0xFCF250
	public float getShowClassMagnification(BattleCommandData command, BattleServantData selfSvt, BattleServantData targetSvt) { }

	// RVA: 0xFCF2A4 Offset: 0xFCF2A4 VA: 0xFCF2A4
	public void setCommandCard(BattleCommandData[] datalist, int maxcount) { }

	// RVA: 0xFCEBAC Offset: 0xFCEBAC VA: 0xFCEBAC
	public void SetBaseCommandCardData(List<BattleCommandData> commandlist) { }

	// RVA: 0xFCF310 Offset: 0xFCF310 VA: 0xFCF310
	public void SaveCriticalValue(List<BattleCommandData> commandlist) { }
