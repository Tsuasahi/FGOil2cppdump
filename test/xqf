
	[DebuggerHiddenAttribute] // RVA: 0xD3902C Offset: 0xD3902C VA: 0xD3902C
	// RVA: 0x150D768 Offset: 0x150D768 VA: 0x150D768
	private IEnumerator movieCrossFade() { }

	// RVA: 0x150D840 Offset: 0x150D840 VA: 0x150D840
	public void playWinMotion() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3903C Offset: 0xD3903C VA: 0xD3903C
	// RVA: 0x150E494 Offset: 0x150E494 VA: 0x150E494
	private IEnumerator waitAndSendFsmEvent(string eventName, float waitTime) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3904C Offset: 0xD3904C VA: 0xD3904C
	// RVA: 0x150E400 Offset: 0x150E400 VA: 0x150E400
	private IEnumerator waitMovieAndSendFsmEvent(string eventName) { }

	// RVA: 0x150FB68 Offset: 0x150FB68 VA: 0x150FB68
	public void playLoseMotion() { }

	// RVA: 0x150FAEC Offset: 0x150FAEC VA: 0x150FAEC
	public void setCameraAction(string inName) { }

	// RVA: 0x150FBB8 Offset: 0x150FBB8 VA: 0x150FBB8
	public void moveNextBattle(string endstr) { }

	// RVA: 0x150FC94 Offset: 0x150FC94 VA: 0x150FC94
	public void updateAuraAll() { }

	// RVA: 0x150FDC0 Offset: 0x150FDC0 VA: 0x150FDC0
	public GameObject getListEffect(BattleEffectControl.ID id) { }

	// RVA: 0x150FDF8 Offset: 0x150FDF8 VA: 0x150FDF8
	public GameObject getEffectInstantiate(BattleEffectControl.ID id, Transform parent) { }

	// RVA: 0x150FE7C Offset: 0x150FE7C VA: 0x150FE7C
	public void destroyInstantiate(GameObject obj) { }

	// RVA: 0x150FEB4 Offset: 0x150FEB4 VA: 0x150FEB4
	public void startTac(string fsmevent) { }

	// RVA: 0x1510138 Offset: 0x1510138 VA: 0x1510138
	private bool loadCommandCritical() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3905C Offset: 0xD3905C VA: 0xD3905C
	// RVA: 0x15100A4 Offset: 0x15100A4 VA: 0x15100A4
	private IEnumerator StartTacCoroutine(string endevent) { }

	// RVA: 0x1510404 Offset: 0x1510404 VA: 0x1510404
	public void endSelectAbilityButton() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3906C Offset: 0xD3906C VA: 0xD3906C
	// RVA: 0x1510490 Offset: 0x1510490 VA: 0x1510490
	private IEnumerator ActiveCoroutine() { }

	// RVA: 0x1510500 Offset: 0x1510500 VA: 0x1510500
	public void backTacticalMode() { }

	// RVA: 0x15105F8 Offset: 0x15105F8 VA: 0x15105F8
	public void setRefreshStarsFlg(bool flg) { }

	// RVA: 0x1510630 Offset: 0x1510630 VA: 0x1510630
	public void setSelectTargetFlg(bool flg) { }

	// RVA: 0x151063C Offset: 0x151063C VA: 0x151063C
	public void setTargetChangeActive(bool isChange) { }

	// RVA: 0x1510648 Offset: 0x1510648 VA: 0x1510648
	public void clickTargetBody(int index) { }

	// RVA: 0x15106A4 Offset: 0x15106A4 VA: 0x15106A4
	public void clickTarget(int index) { }

	// RVA: 0x15108F0 Offset: 0x15108F0 VA: 0x15108F0
	public void setEnemyTarget(int uniqueId) { }

	// RVA: 0x1510954 Offset: 0x1510954 VA: 0x1510954
	public void setOffTarget() { }

	// RVA: 0x1510004 Offset: 0x1510004 VA: 0x1510004
	public void reViewTargetMarks() { }

	// RVA: 0x15109F0 Offset: 0x15109F0 VA: 0x15109F0
	public void longPressTarget(int index) { }

	// RVA: 0x1510A38 Offset: 0x1510A38 VA: 0x1510A38
	public void registCommandCard(BattleCommandData[] datalist) { }

	// RVA: 0x1510A70 Offset: 0x1510A70 VA: 0x1510A70
	public float getShowClassMagnification(BattleCommandData command, BattleServantData selfSvt, BattleServantData targetSvt) { }

	// RVA: 0x1510AC4 Offset: 0x1510AC4 VA: 0x1510AC4
	public void setCommandCard(BattleCommandData[] datalist, int maxcount) { }

	// RVA: 0x15103CC Offset: 0x15103CC VA: 0x15103CC
	public void SetBaseCommandCardData(List<BattleCommandData> commandlist) { }

	// RVA: 0x1510B30 Offset: 0x1510B30 VA: 0x1510B30
	public void SaveCriticalValue(List<BattleCommandData> commandlist) { }

	// RVA: 0x1510C70 Offset: 0x1510C70 VA: 0x1510C70
	public BattleCommandData[] GetBaseCommandCardData() { }

	// RVA: 0x1510CA0 Offset: 0x1510CA0 VA: 0x1510CA0
	public void endSelectCommand() { }

	// RVA: 0x1510DD8 Offset: 0x1510DD8 VA: 0x1510DD8
	protected void EndRequestBattleTurn(string result) { }

	// RVA: 0x1510EE4 Offset: 0x1510EE4 VA: 0x1510EE4
	public void showCutIn(GameObject prefab) { }

	// RVA: 0x150CFCC Offset: 0x150CFCC VA: 0x150CFCC
	public void sendEventFieldMotion(string str) { }

	// RVA: 0x1510EF4 Offset: 0x1510EF4 VA: 0x1510EF4
	public void sendLocalEventFieldMotion(string str) { }

	// RVA: 0x1510F2C Offset: 0x1510F2C VA: 0x1510F2C
	public void endProc() { }

	// RVA: 0x1510FD4 Offset: 0x1510FD4 VA: 0x1510FD4
	public void setBattleSpeed(float time) { }

	// RVA: 0x151107C Offset: 0x151107C VA: 0x151107C
	public void setInitpos() { }

	// RVA: 0x15112F8 Offset: 0x15112F8 VA: 0x15112F8
	public void setImmidianteEntryPos() { }

	// RVA: 0x151144C Offset: 0x151144C VA: 0x151144C
	public void addActionData(BattleActionData[] adddatalist) { }

	// RVA: 0x15114C4 Offset: 0x15114C4 VA: 0x15114C4
	public void addActionData(BattleActionData adddata) { }

	// RVA: 0x1511588 Offset: 0x1511588 VA: 0x1511588
	public int checkActionCount() { }

	// RVA: 0x15115E8 Offset: 0x15115E8 VA: 0x15115E8
	public void PreloadFace(int svtId, int limitCount) { }

	// RVA: 0x1511858 Offset: 0x1511858 VA: 0x1511858
	protected GameObject FetchStandFigure(int svtId, int limitCount, bool removeFromList = True) { }

	// RVA: 0x1511AF8 Offset: 0x1511AF8 VA: 0x1511AF8
	public BattleActionData getActionData() { }

	// RVA: 0x1511B00 Offset: 0x1511B00 VA: 0x1511B00
	public void playActionData(BattleActionData adddata) { }

	// RVA: 0x1511D0C Offset: 0x1511D0C VA: 0x1511D0C
	protected void playActionDataLocal(BattleActionData adddata) { }

	// RVA: 0x1511C68 Offset: 0x1511C68 VA: 0x1511C68
	protected bool checkInterruptAction(BattleActionData nowAction) { }

	// RVA: 0x1512FA8 Offset: 0x1512FA8 VA: 0x1512FA8
	public void playFieldSkillCutInActionData(bool isCamPlayer, bool isCamField) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3907C Offset: 0xD3907C VA: 0xD3907C
	// RVA: 0x1512AA0 Offset: 0x1512AA0 VA: 0x1512AA0
	private IEnumerator waitEndActionData(BattleActionData battleActionData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3908C Offset: 0xD3908C VA: 0xD3908C
	// RVA: 0x1512EA4 Offset: 0x1512EA4 VA: 0x1512EA4
	private IEnumerator waitLoadImmediateEntryServant() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3909C Offset: 0xD3909C VA: 0xD3909C
	// RVA: 0x1512F14 Offset: 0x1512F14 VA: 0x1512F14
	private IEnumerator CoroutineWaitCond(BattleActionWaitCond.Base waitCond) { }

	// RVA: 0x1513084 Offset: 0x1513084 VA: 0x1513084
	public void skipDead() { }

	// RVA: 0x1513198 Offset: 0x1513198 VA: 0x1513198
	public void playBackStepMotion(int uniqueID) { }

	// RVA: 0x15132C0 Offset: 0x15132C0 VA: 0x15132C0
	public void endActionData() { }

	// RVA: 0x1513664 Offset: 0x1513664 VA: 0x1513664
	private void ClearActionBuffDataList(GameObject[] objList) { }

	// RVA: 0x151383C Offset: 0x151383C VA: 0x151383C
	public void hideRUComboCutIn() { }

	// RVA: 0x15138E8 Offset: 0x15138E8 VA: 0x15138E8
	public float GetEffectIntervalByFuncNum(int funcIndex) { }

	// RVA: 0x1513900 Offset: 0x1513900 VA: 0x1513900
	public float GetSideEffectInterval(BattleActionData actData, bool isAtkFirst, bool isAtkLast) { }

	// RVA: 0x151396C Offset: 0x151396C VA: 0x151396C
	public bool ShowDamage(GameObject actObj, int nomalEffectId, int criticalEffectId, string attachNodename, int functionIndex, int startValue, int countValue, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion = False, bool isTreasureDevice = False, int[] changeMultipleEffectId, int[] changeMultipleCriticalEffectId) { }

	// RVA: 0x1515780 Offset: 0x1515780 VA: 0x1515780
	public int changeShowDamageEffect(int[] changEffectId, int targetId, int effectId) { }

	// RVA: 0x1515010 Offset: 0x1515010 VA: 0x1515010
	private DisplayEffectInheritData showAttackSideEffect(GameObject actObj, BattleActionData actData, bool isShowSideEffect, bool isTreasureDevice, string attachNodename, bool isCommandAfter, DisplayEffectInheritData effectInheritData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD390AC Offset: 0xD390AC VA: 0xD390AC
	// RVA: 0x1515424 Offset: 0x1515424 VA: 0x1515424
	private IEnumerator corAfterMultiHit(BattleActionData actData, int index, int count, int funcIndex, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion, int maxMultiAtk, GameObject actObj, int lastHitCount, bool isTreasureDevice, string attachNodeName, bool ispopAdjustment = False) { }

	// RVA: 0x15158B0 Offset: 0x15158B0 VA: 0x15158B0
	public bool isMultiHit() { }

	// RVA: 0x15158C0 Offset: 0x15158C0 VA: 0x15158C0
	public void finishMotion(BattleActorControl actor) { }

	[DebuggerHiddenAttribute] // RVA: 0xD390BC Offset: 0xD390BC VA: 0xD390BC
	// RVA: 0x1515920 Offset: 0x1515920 VA: 0x1515920
	private IEnumerator corWaitMultiHit(BattleActorControl actor) { }

	// RVA: 0x150879C Offset: 0x150879C VA: 0x150879C
	private void initRandomVector() { }

	// RVA: 0x15159B4 Offset: 0x15159B4 VA: 0x15159B4
	private Vector3 getPopRandomVector() { }

	// RVA: 0x1514B54 Offset: 0x1514B54 VA: 0x1514B54
	public BattleActionData.DamageData[] showDamageView(int funcIndex, BattleActionData bactData, int index, bool damageMotion, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion, int maxMultiAtk, bool isTreasureDevice = False, bool isExecViewAfter = True) { }

	// RVA: 0x1515F10 Offset: 0x1515F10 VA: 0x1515F10
	private void ShowDamageViewAfter(BattleServantData atkSvtData, int index, BattleActionData.DamageData damageData) { }

	// RVA: 0x1515CF4 Offset: 0x1515CF4 VA: 0x1515CF4
	private void ShowDamageViewAfter(BattleServantData atkSvtData, BattleServantData defSvtData, BattleActorControl defActor, int index, int damage, BattleActionData.DamageData damageData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD390CC Offset: 0xD390CC VA: 0xD390CC
	// RVA: 0x1516BFC Offset: 0x1516BFC VA: 0x1516BFC
	private IEnumerator InvokeAction(Action func, float waitTime) { }

	// RVA: 0x1516C90 Offset: 0x1516C90 VA: 0x1516C90
	public DisplayEffectInheritData showHeal(GameObject actObj, int funcIndex, BattleActionData inActData, bool isCommandAfter = False, DisplayEffectInheritData inherit) { }

	// RVA: 0x1516E30 Offset: 0x1516E30 VA: 0x1516E30
	private DisplayEffectInheritData ShowHealEffect(BattleActionData.HealData[] healList, GameObject actObj, int funcIndex, BattleActionData actData, bool isCommandAfter = False, DisplayEffectInheritData inherit, bool ispopAdjustment = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD390DC Offset: 0xD390DC VA: 0xD390DC
	// RVA: 0x1517088 Offset: 0x1517088 VA: 0x1517088
	private IEnumerator ShowHealEffectProcWithDelay(float delayTime, BattleActionData.HealData healData, DisplayEffectArgument arg, BattleServantData svtData) { }

	// RVA: 0x1517170 Offset: 0x1517170 VA: 0x1517170
	private void ShowHealEffectProc(BattleActionData.HealData healData, DisplayEffectArgument arg, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0x151877C Offset: 0x151877C VA: 0x151877C
	public void RevivalSvtReset(BattleActionData actData, BattleServantData svt, BattleActorControl actor) { }

	// RVA: 0x1518A3C Offset: 0x1518A3C VA: 0x1518A3C
	public bool IsHeal(int funcIndex, BattleActionData inActData) { }

	// RVA: 0x1518B60 Offset: 0x1518B60 VA: 0x1518B60
	public void showTotalDamage() { }

	// RVA: 0x1518B98 Offset: 0x1518B98 VA: 0x1518B98
	public void showNobleInfo(int treasureDeviceId = -1, int treasureDeviceLevel = 1, int treasureDevicePer = 100, bool isHide = False) { }

	// RVA: 0x1518F54 Offset: 0x1518F54 VA: 0x1518F54
	public void slientDead(GameObject actObj) { }

	// RVA: 0x1519254 Offset: 0x1519254 VA: 0x1519254
	private void CheckServantSlintDead(BattleActorControl actor) { }

	// RVA: 0x15193FC Offset: 0x15193FC VA: 0x15193FC
	private bool CheckDeadFunctionSkillMotion(BattleBuffData.BuffData[] deadBuffArray) { }

	// RVA: 0x1519574 Offset: 0x1519574 VA: 0x1519574
	private string GetOverChargeSpName(int npCharge) { }

	// RVA: 0x1519630 Offset: 0x1519630 VA: 0x1519630
	private void setPopUpObject(bool critical, bool weak, bool resist, BattleActorControl actor, int damage, BattleActionData.DamageData damageData, bool damageMotion, Vector3 randomVector, Vector3 damageNumberPosition, bool isNoDamageMotion, int npCharge) { }

	// RVA: 0x151A474 Offset: 0x151A474 VA: 0x151A474
	public void SetPopUpNodeObjectPosition(BattleActorControl actor, GameObject obj, Vector3 adjustVec, Transform node, Vector3 addPos) { }

	// RVA: 0x151A2C8 Offset: 0x151A2C8 VA: 0x151A2C8
	public float GetBuffIconSize(GameObject obj) { }

	[DebuggerHiddenAttribute] // RVA: 0xD390EC Offset: 0xD390EC VA: 0xD390EC
	// RVA: 0x1515B24 Offset: 0x1515B24 VA: 0x1515B24
	public IEnumerator popDamageObject(BattleActorControl actor, int damage, BattleActionData.DamageData damageData, bool damageMotion, bool isRandomDamage, Vector3 damageNumberPosition, bool isNoDamageMotion, bool isRandomTiming, float randomTime, int npCharge, bool randomPos = False, bool isTreasureDevice = False) { }

	// RVA: 0x151838C Offset: 0x151838C VA: 0x151838C
	public void popHealObject(BattleActorControl actor, int heal, bool isOverCharge, int np, bool ispopAdjustment = False, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0x151A228 Offset: 0x151A228 VA: 0x151A228
	public void popCriticalTitle(BattleActorControl actor, BattleActionData.DamageData damageData) { }

	// RVA: 0x151A710 Offset: 0x151A710 VA: 0x151A710
	public void popWeakTitle(BattleActorControl actor, Vector3 adjustVec, BattleActionData.DamageData damageData) { }

	// RVA: 0x151A7A0 Offset: 0x151A7A0 VA: 0x151A7A0
	public void popRegistTitle(BattleActorControl actor, Vector3 adjustVec, BattleActionData.DamageData damageData) { }

	// RVA: 0x151A2A4 Offset: 0x151A2A4 VA: 0x151A2A4
	public void popCriticalMissTitle(BattleActorControl actor) { }

	// RVA: 0x15155F8 Offset: 0x15155F8 VA: 0x15155F8
	public GameObject GetInvincibleAvoidEffect(BattleActionData.DamageHitType hitStat, GameObject actObj, BattleActionData.DamageData damageData) { }

	// RVA: 0x151A830 Offset: 0x151A830 VA: 0x151A830
	private GameObject createPopEffect(BattleActorControl actor, BattleEffectControl.ID id, Vector3 adjustVec, Vector3 offSet, bool critical = False) { }

	// RVA: 0x151AB04 Offset: 0x151AB04 VA: 0x151AB04
	public void changePopPosition(UIWidget widget, Vector3 offSet) { }

	// RVA: 0x151AD68 Offset: 0x151AD68 VA: 0x151AD68
	public void popBuffLabel(BattleActorControl actor, BattleActionData.BuffData buffData, Vector3 offset, int npCharge, bool ispopAdjustment = False, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0x151B464 Offset: 0x151B464 VA: 0x151B464
	public void popBuffLabel(Transform target, BattleActionData.BuffData buffData, int npCharge, Vector2 scl) { }

	// RVA: 0x151B9B4 Offset: 0x151B9B4 VA: 0x151B9B4
	public void hideOverKillMessage() { }

	// RVA: 0x1516D20 Offset: 0x1516D20 VA: 0x1516D20
	private BattleActionData GetShowActionData(BattleActionData inActData, GameObject actObj) { }

	// RVA: 0x1515118 Offset: 0x1515118 VA: 0x1515118
	public DisplayEffectInheritData ShowAll(GameObject actObj, int funcIndex, BattleActionData inActData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", DisplayEffectInheritData inherit, bool ispopAdjustment = False) { }

	// RVA: 0x151BCA0 Offset: 0x151BCA0 VA: 0x151BCA0
	public DisplayEffectInheritData ShowBuff(GameObject actObj, int funcIndex, BattleActionData inActData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", DisplayEffectInheritData inherit) { }

	// RVA: 0x151BCE4 Offset: 0x151BCE4 VA: 0x151BCE4
	public DisplayEffectInheritData ShowBuff(GameObject actObj, int funcIndex, Vector3 buffOffset, Vector3 popupOffset, BattleActionData inActData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", int[] overwriteEffectIds, DisplayEffectInheritData inherit) { }

	// RVA: 0x151B9E4 Offset: 0x151B9E4 VA: 0x151B9E4
	private DisplayEffectInheritData ShowBuffEffect(BattleActionData.BuffData[] buffList, GameObject actObj, int funcIndex, Vector3 buffOffset, Vector3 popupOffset, BattleActionData actData, bool isCommandAfter = False, bool isTreasureDevice = False, string attachNodeName = "", int[] overwriteEffectIds, DisplayEffectInheritData inherit, bool ispopAdjustment = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD390FC Offset: 0xD390FC VA: 0xD390FC
	// RVA: 0x151BDE0 Offset: 0x151BDE0 VA: 0x151BDE0
	private IEnumerator ShowBuffEffectProcWithDelay(float delayTime, BattleActionData.BuffData buffData, DisplayEffectArgument arg, BattleServantData svtData) { }

	// RVA: 0x15173F0 Offset: 0x15173F0 VA: 0x15173F0
	private void ShowBuffEffectProc(BattleActionData.BuffData buffData, DisplayEffectArgument arg, BattleServantData.Adjustment[] adjustments) { }

	// RVA: 0x151BF7C Offset: 0x151BF7C VA: 0x151BF7C
	private void showActivateSideEffect(string attachNode) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3910C Offset: 0xD3910C VA: 0xD3910C
	// RVA: 0x151BEC8 Offset: 0x151BEC8 VA: 0x151BEC8
	private IEnumerator showActivateSideEffectWithDelay(string attachNode, float waitTime) { }

	// RVA: 0x151C314 Offset: 0x151C314 VA: 0x151C314
	public bool IsNoEffectBuff(GameObject actObj, int funcIndex, BattleActionData inActData) { }

	// RVA: 0x151C47C Offset: 0x151C47C VA: 0x151C47C
	public void showActionMessage() { }

	// RVA: 0x151C480 Offset: 0x151C480 VA: 0x151C480
	public void showActionNobleTitle() { }

	// RVA: 0x1502158 Offset: 0x1502158 VA: 0x1502158
	public void addCriticalPont(int count) { }

	// RVA: 0x151C4C8 Offset: 0x151C4C8 VA: 0x151C4C8
	public bool IsItemDrop() { }

	// RVA: 0x151C534 Offset: 0x151C534 VA: 0x151C534
	public void setPopObject(GameObject obj) { }

	// RVA: 0x151C5E0 Offset: 0x151C5E0 VA: 0x151C5E0
	public void startMovePopObject() { }

	// RVA: 0x1508C90 Offset: 0x1508C90 VA: 0x1508C90
	public void resetPopObject() { }

	// RVA: 0x151CDEC Offset: 0x151CDEC VA: 0x151CDEC
	public void saveOriginalPos(GameObject obj, Vector3 currentPos, Vector3 originalPos) { }

	// RVA: 0x151CEF0 Offset: 0x151CEF0 VA: 0x151CEF0
	public void resetOriginalPos() { }

	// RVA: 0x1515FEC Offset: 0x1515FEC VA: 0x1515FEC
	public GameObject dropCriticalPoint(Vector3 worldPos) { }

	// RVA: 0x151D168 Offset: 0x151D168 VA: 0x151D168
	public GameObject dropGetItem(Transform tr, DropInfo dropInfo, int max, int index) { }

	// RVA: 0x151D634 Offset: 0x151D634 VA: 0x151D634
	public void dropGetServant(Transform tr, DropInfo dropInfo) { }

	// RVA: 0x151D9B8 Offset: 0x151D9B8 VA: 0x151D9B8
	public void initActionBattle() { }

	// RVA: 0x151DC28 Offset: 0x151DC28 VA: 0x151DC28
	public BattleSelectServantWindow getSelectSvtWindow() { }

	// RVA: 0x151DC58 Offset: 0x151DC58 VA: 0x151DC58
	public void closeSelectSvtWindow() { }

	// RVA: 0x151DC90 Offset: 0x151DC90 VA: 0x151DC90
	public BattleSelectMainSubServantWindow getSelectMainSubSvtWindow() { }

	// RVA: 0x151DCC0 Offset: 0x151DCC0 VA: 0x151DCC0
	public void closeSelectMainSubSvtWindow() { }

	// RVA: 0x151DCF8 Offset: 0x151DCF8 VA: 0x151DCF8
	public void SetCloseSelectMainSubSvtWindow() { }

	// RVA: 0x151DD2C Offset: 0x151DD2C VA: 0x151DD2C
	public BattleSelectCommandTypeWindow getSelectCommandTypeWindow() { }

	// RVA: 0x151DD5C Offset: 0x151DD5C VA: 0x151DD5C
	public void SetCloseCommandTypeWindow() { }

	// RVA: 0x151DD90 Offset: 0x151DD90 VA: 0x151DD90
	public void closeSelectCommandTypeWindow() { }

	// RVA: 0x151DDC8 Offset: 0x151DDC8 VA: 0x151DDC8
	public bool isOpenOrOpeningMainWindow() { }

	// RVA: 0x151DDF8 Offset: 0x151DDF8 VA: 0x151DDF8
	public void playActionSkill() { }

	// RVA: 0x151DF88 Offset: 0x151DF88 VA: 0x151DF88
	public void endActionSkill() { }

	// RVA: 0x151DFD0 Offset: 0x151DFD0 VA: 0x151DFD0
	public void endCommandSpell() { }

	// RVA: 0x151270C Offset: 0x151270C VA: 0x151270C
	public void playBattleActionCutIn(BattleActionData adata) { }

	// RVA: 0x151E1CC Offset: 0x151E1CC VA: 0x151E1CC
	private void PlayActionStartText(BattleActionData actionData, string text) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3911C Offset: 0xD3911C VA: 0xD3911C
	// RVA: 0x151E324 Offset: 0x151E324 VA: 0x151E324
	private IEnumerator startAddAttackEffect(int actorId) { }

	// RVA: 0x151E3B8 Offset: 0x151E3B8 VA: 0x151E3B8
	public void playBigCutIn(int Id, int type, Vector3 inpos) { }

	// RVA: 0x151E018 Offset: 0x151E018 VA: 0x151E018
	public GameObject playActorBigCutIn(string filename, Vector3 inpos, bool flg = True) { }

	// RVA: 0x151E624 Offset: 0x151E624 VA: 0x151E624
	private void resetLastCutInPanel(BattlePanelEvent pnl) { }

	// RVA: 0x151E6C0 Offset: 0x151E6C0 VA: 0x151E6C0
	public void playMasterCutIn() { }

	// RVA: 0x151EAC0 Offset: 0x151EAC0 VA: 0x151EAC0
	public void playMasterCommandSpellCutIn() { }

	// RVA: 0x151E8E0 Offset: 0x151E8E0 VA: 0x151E8E0
	private void FollowObjPosition(GameObject obj) { }

	// RVA: 0x1512B34 Offset: 0x1512B34 VA: 0x1512B34
	public void playEnemyMasterCutIn() { }

	// RVA: 0x151ECE0 Offset: 0x151ECE0 VA: 0x151ECE0
	public void playEnemyMasterCutInCallback() { }

	// RVA: 0x151EA70 Offset: 0x151EA70 VA: 0x151EA70
	public void playMasterCutInCallback() { }

	// RVA: 0x151F0BC Offset: 0x151F0BC VA: 0x151F0BC
	public void LoadFieldSkillCutInFromFsm(BattleActionData nowAction, Action callback) { }

	// RVA: 0x151F1E8 Offset: 0x151F1E8 VA: 0x151F1E8
	private string ConnectPrefixSkillCutInVoiceStr(int svtId, int limitCount, string voiceStr, out string nothingPrefixLabel) { }

	// RVA: 0x151F4FC Offset: 0x151F4FC VA: 0x151F4FC
	private void loadFieldSkillCutInVoices() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3912C Offset: 0xD3912C VA: 0xD3912C
	// RVA: 0x151F584 Offset: 0x151F584 VA: 0x151F584
	private IEnumerator waitFieldSkillCutInVoicesLoading() { }

	// RVA: 0x151F5F4 Offset: 0x151F5F4 VA: 0x151F5F4
	private void loadFieldSkillCutInFigurePrefab(string[] info, Vector3[] offsets, Vector3[] sizes, CutInEffectComponent comp) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3913C Offset: 0xD3913C VA: 0xD3913C
	// RVA: 0x151F648 Offset: 0x151F648 VA: 0x151F648
	private IEnumerator waitFieldSkillCutInFigurePrefab(string[] info, Vector3[] offsets, Vector3[] sizes, CutInEffectComponent comp) { }

	// RVA: 0x151F72C Offset: 0x151F72C VA: 0x151F72C
	private bool tryGetInfoFromCutInPrefab(int idx, Vector3[] info, out Vector3 outInfo) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3914C Offset: 0xD3914C VA: 0xD3914C
	// RVA: 0x151F82C Offset: 0x151F82C VA: 0x151F82C
	private IEnumerator waitFieldSkillCutInVoicesAndImageAssets(Action callback) { }

	// RVA: 0x151F8C0 Offset: 0x151F8C0 VA: 0x151F8C0
	public void PlayFieldSkillCutInFromFsm(BattleActionData nowAction, Action callback) { }

	// RVA: 0x151FB60 Offset: 0x151FB60 VA: 0x151FB60
	private void ShowSkillCutInMessage(int showMode, string message, int actorId, int skillLv) { }

	// RVA: 0x151FCB4 Offset: 0x151FCB4 VA: 0x151FCB4
	public void ReleaseFieldSkillCutInFromFsm(BattleActionData nowAction) { }

	// RVA: 0x151FF30 Offset: 0x151FF30 VA: 0x151FF30
	public void finishFieldSkillCutInFromFsm() { }

	// RVA: 0x151DE40 Offset: 0x151DE40 VA: 0x151DE40
	public void changeAttackButton(bool flg, bool use, bool card) { }

	// RVA: 0x151FFBC Offset: 0x151FFBC VA: 0x151FFBC
	public void updateCommandCard() { }

	// RVA: 0x1520028 Offset: 0x1520028 VA: 0x1520028
	public void checkRedrawCommandCard() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3915C Offset: 0xD3915C VA: 0xD3915C
	// RVA: 0x1520078 Offset: 0x1520078 VA: 0x1520078
	private IEnumerator delayDisableSystemFade(float waitEndProcTime) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3916C Offset: 0xD3916C VA: 0xD3916C
	// RVA: 0x152010C Offset: 0x152010C VA: 0x152010C
	private IEnumerator waitEndProc(GameObject obj, float time) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3917C Offset: 0xD3917C VA: 0xD3917C
	// RVA: 0x15201C0 Offset: 0x15201C0 VA: 0x15201C0
	private IEnumerator waitEndProc(GameObject obj, AssetData asset, string path, float time, bool callEndProc) { }

	// RVA: 0x15202C0 Offset: 0x15202C0 VA: 0x15202C0
	private int getMoviePlayArrayIndex() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3918C Offset: 0xD3918C VA: 0xD3918C
	// RVA: 0x152037C Offset: 0x152037C VA: 0x152037C
	private IEnumerator delayDestory(GameObject obj, float time) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3919C Offset: 0xD3919C VA: 0xD3919C
	// RVA: 0x1520410 Offset: 0x1520410 VA: 0x1520410
	private IEnumerator delayDestory(GameObject obj, AssetData asset, string path, float time) { }

	// RVA: 0x15204F8 Offset: 0x15204F8 VA: 0x15204F8
	public int getStartEffectId() { }

	// RVA: 0x1520574 Offset: 0x1520574 VA: 0x1520574
	private void StopPlayingMovie() { }

	[DebuggerHiddenAttribute] // RVA: 0xD391AC Offset: 0xD391AC VA: 0xD391AC
	// RVA: 0x152060C Offset: 0x152060C VA: 0x152060C
	public IEnumerator checkSkipStartQuest() { }

	// RVA: 0x152067C Offset: 0x152067C VA: 0x152067C
	public void stopCheckSkipStartQuest() { }

	// RVA: 0x15206B0 Offset: 0x15206B0 VA: 0x15206B0
	public void endStartWave(string endProc) { }

	[DebuggerHiddenAttribute] // RVA: 0xD391BC Offset: 0xD391BC VA: 0xD391BC
	// RVA: 0x1520734 Offset: 0x1520734 VA: 0x1520734
	public IEnumerator waitStartWaveDone(string endProc) { }

	// RVA: 0x15207C8 Offset: 0x15207C8 VA: 0x15207C8
	public bool isEnableSkipStartQuest() { }

	// RVA: 0x1520B54 Offset: 0x1520B54 VA: 0x1520B54
	public void ChangeBattleSpeedStepIn() { }

	// RVA: 0x1520B88 Offset: 0x1520B88 VA: 0x1520B88
	public void ChangeBattleSpeed() { }

	// RVA: 0x1520C6C Offset: 0x1520C6C VA: 0x1520C6C
	public void effectStartQuest() { }

	[DebuggerHiddenAttribute] // RVA: 0xD391CC Offset: 0xD391CC VA: 0xD391CC
	// RVA: 0x15215E0 Offset: 0x15215E0 VA: 0x15215E0
	private IEnumerator waitMovieEndProc() { }

	// RVA: 0x15218C0 Offset: 0x15218C0 VA: 0x15218C0
	public void PlayStartMotionEffect(int startPhase, int endPhase, Action callback) { }

	// RVA: 0x15219BC Offset: 0x15219BC VA: 0x15219BC
	public void ReleaseStartMotionEffect() { }

	// RVA: 0x1521A68 Offset: 0x1521A68 VA: 0x1521A68
	public void LoadStartMotionEffect(int startEffectId, Action callback) { }

	// RVA: 0x1521650 Offset: 0x1521650 VA: 0x1521650
	protected GameObject startBoostItemEffectItem(BattleBoostItemInfoData battleBoostItemInfo) { }

	// RVA: 0x1521CA4 Offset: 0x1521CA4 VA: 0x1521CA4
	public void effectClearQuest() { }

	// RVA: 0x1521CA8 Offset: 0x1521CA8 VA: 0x1521CA8
	public void effectOverQuest() { }

	// RVA: 0x1521D50 Offset: 0x1521D50 VA: 0x1521D50
	public void playNoblePhantasm() { }

	// RVA: 0x1521DB4 Offset: 0x1521DB4 VA: 0x1521DB4
	public void startNoblePhantasm() { }

	// RVA: 0x152201C Offset: 0x152201C VA: 0x152201C
	public void endNoblePhantasm(int tresureDeviceId) { }

	// RVA: 0x15223A4 Offset: 0x15223A4 VA: 0x15223A4
	private void ResetCacheRandomSeqId(BattleActorControl bac) { }

	// RVA: 0x15224B8 Offset: 0x15224B8 VA: 0x15224B8
	private void sendEventFieldMotion_effectStartBattle(string eventName) { }

	// RVA: 0x152255C Offset: 0x152255C VA: 0x152255C
	public void effectStartBattle() { }

	// RVA: 0x1522AA0 Offset: 0x1522AA0 VA: 0x1522AA0
	public void effectNextBattle() { }

	// RVA: 0x150E548 Offset: 0x150E548 VA: 0x150E548
	public void effectWinBattle() { }

	[DebuggerHiddenAttribute] // RVA: 0xD391DC Offset: 0xD391DC VA: 0xD391DC
	// RVA: 0x1522AD4 Offset: 0x1522AD4 VA: 0x1522AD4
	private IEnumerator coroutineEffectWinBattle(Action callback) { }

	// RVA: 0x1522B68 Offset: 0x1522B68 VA: 0x1522B68
	private void startWinEffect() { }

	// RVA: 0x1522CEC Offset: 0x1522CEC VA: 0x1522CEC
	public void ClearObjForceDestroy() { }

	// RVA: 0x1522D28 Offset: 0x1522D28 VA: 0x1522D28
	public void effectLoseBattle() { }

	// RVA: 0x150FC38 Offset: 0x150FC38 VA: 0x150FC38
	public void effectFadeOut() { }

	// RVA: 0x150D7D8 Offset: 0x150D7D8 VA: 0x150D7D8
	public void effectFadeIn() { }

	[DebuggerHiddenAttribute] // RVA: 0xD391EC Offset: 0xD391EC VA: 0xD391EC
	// RVA: 0x1523064 Offset: 0x1523064 VA: 0x1523064
	private IEnumerator effectFadeInCoroutine() { }

	// RVA: 0x15230D4 Offset: 0x15230D4 VA: 0x15230D4
	public void PlaySeFadeIn() { }

	// RVA: 0x1523200 Offset: 0x1523200 VA: 0x1523200
	public void effectBlack() { }

	// RVA: 0x15229A4 Offset: 0x15229A4 VA: 0x15229A4
	public void effectAlphaFadeIn() { }

	// RVA: 0x1522A00 Offset: 0x1522A00 VA: 0x1522A00
	public void effectFadeOff() { }

	// RVA: 0x1522F0C Offset: 0x1522F0C VA: 0x1522F0C
	private void playFadeAnimation(string name) { }

	// RVA: 0x1522D2C Offset: 0x1522D2C VA: 0x1522D2C
	private void setFadeAnimationDefaultSpeed(string name) { }

	// RVA: 0x1523344 Offset: 0x1523344 VA: 0x1523344
	public void setFadeAnimationSpeed() { }

	// RVA: 0x152325C Offset: 0x152325C VA: 0x152325C
	public void ResetFadeBlackObj() { }

	// RVA: 0x152368C Offset: 0x152368C VA: 0x152368C
	public void startBattleUIFade(float time, float targetAlpha) { }

	// RVA: 0x1509518 Offset: 0x1509518 VA: 0x1509518
	public void loadBg(int No, int tp = 0) { }

	// RVA: 0x150AB6C Offset: 0x150AB6C VA: 0x150AB6C
	public void changeBg(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }

	// RVA: 0x1523704 Offset: 0x1523704 VA: 0x1523704
	protected void OnEndChangeBg() { }

	// RVA: 0x15237D0 Offset: 0x15237D0 VA: 0x15237D0
	public string[] getChangeBgList() { }

	// RVA: 0x1508DCC Offset: 0x1508DCC VA: 0x1508DCC
	public void releaseChangeBgAssets() { }

	// RVA: 0x1523800 Offset: 0x1523800 VA: 0x1523800
	public string[] getFieldEffects() { }

	// RVA: 0x1523830 Offset: 0x1523830 VA: 0x1523830
	public void setFieldEffect(int type) { }

	// RVA: 0x1523868 Offset: 0x1523868 VA: 0x1523868
	public int getAmbientColors() { }

	// RVA: 0x1523898 Offset: 0x1523898 VA: 0x1523898
	public void setAmbientColor(int index) { }

	// RVA: 0x15087A4 Offset: 0x15087A4 VA: 0x15087A4
	public void loadBattleResult() { }

	// RVA: 0x15238D0 Offset: 0x15238D0 VA: 0x15238D0
	public void EndLoadBattleResult(AssetData data) { }

	// RVA: 0x1523B94 Offset: 0x1523B94 VA: 0x1523B94
	public void setResult(string str) { }

	// RVA: 0x1523CA8 Offset: 0x1523CA8 VA: 0x1523CA8
	public void showResult(GameObject target, string endevent) { }

	// RVA: 0x1523CB0 Offset: 0x1523CB0 VA: 0x1523CB0
	public void setResultData(string str, GameObject target, string endevent) { }

	[DebuggerHiddenAttribute] // RVA: 0xD391FC Offset: 0xD391FC VA: 0xD391FC
	// RVA: 0x1523D14 Offset: 0x1523D14 VA: 0x1523D14
	public IEnumerator showBattleResultWait() { }

	// RVA: 0x1523D84 Offset: 0x1523D84 VA: 0x1523D84
	public void TestDispLog() { }

	// RVA: 0x1523E8C Offset: 0x1523E8C VA: 0x1523E8C
	public void SetCameraFlip(bool flg) { }

	// RVA: 0x1523EFC Offset: 0x1523EFC VA: 0x1523EFC
	public void FlipAll(bool isFlip) { }

	// RVA: 0x1524200 Offset: 0x1524200 VA: 0x1524200
	public void InitActorPosition() { }

	// RVA: 0x1524300 Offset: 0x1524300 VA: 0x1524300
	public void startContinue(bool isProgress) { }

	// RVA: 0x150E5D4 Offset: 0x150E5D4 VA: 0x150E5D4
	public void PlayActorsVoice(float rate, BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, Voice.BATTLE[] voices, int[] weightlist, float volume, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0x152440C Offset: 0x152440C VA: 0x152440C
	public void PlayActorsVoiceNp(float rate, BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, Voice.BATTLE[] voices, int[] weightlist, float volume, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0x1524738 Offset: 0x1524738 VA: 0x1524738
	private bool IsChangeActorEnable(BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0x152437C Offset: 0x152437C VA: 0x152437C
	private bool CheckActionTypeSkill() { }

	// RVA: 0x151EE00 Offset: 0x151EE00 VA: 0x151EE00
	public void PlayAnySkillVoice(Action _callback, float _volume = 1) { }

	// RVA: 0x151ED04 Offset: 0x151ED04 VA: 0x151ED04
	public bool isAnySkillVoice() { }

	// RVA: 0x1524DC0 Offset: 0x1524DC0 VA: 0x1524DC0
	public SkillLvEntity getSkillLvEnt() { }

	// RVA: 0x1524CAC Offset: 0x1524CAC VA: 0x1524CAC
	public CommandSpellEntity getCommandSpellEnt() { }

	// RVA: 0x1524EB0 Offset: 0x1524EB0 VA: 0x1524EB0
	public void PlayAnyCommandSpellContinueVoice() { }

	// RVA: 0x1525154 Offset: 0x1525154 VA: 0x1525154
	public void callNpDamageVoice() { }

	// RVA: 0x150EF00 Offset: 0x150EF00 VA: 0x150EF00
	public void PlayActorsVoiceGroup(BattleActorControl actor, BattlePerformance.ActorGroup actorGroup, int voiceType, float volume, Action callback, bool isAlive = True, bool enableChangeActor = True) { }

	// RVA: 0x152532C Offset: 0x152532C VA: 0x152532C
	public void setDamageVoiceFlg(bool flg) { }

	// RVA: 0x15254C0 Offset: 0x15254C0 VA: 0x15254C0
	public void setDamageTargetVoiceFlg(bool flg) { }

	// RVA: 0x1525698 Offset: 0x1525698 VA: 0x1525698
	public void replaceMember(BattleActionData.ReplaceMember replaceData, Action endCallBack) { }

	// RVA: 0x15256E0 Offset: 0x15256E0 VA: 0x15256E0
	public void SetDownloadEventSprite() { }

	// RVA: 0x1512644 Offset: 0x1512644 VA: 0x1512644
	public bool checkTimeScaleDead(BattleServantData svt) { }

	// RVA: 0x15126A8 Offset: 0x15126A8 VA: 0x15126A8
	public bool checkTimeScaleTreasureDevice(BattleServantData svt) { }

	// RVA: 0x1525710 Offset: 0x1525710 VA: 0x1525710
	public GameObject[] getOtherActorGameObjectList(BattleActorControl self) { }

	// RVA: 0x1525930 Offset: 0x1525930 VA: 0x1525930
	public void setStateString(int uniqueId, string infotext) { }

	// RVA: 0x15259B4 Offset: 0x15259B4 VA: 0x15259B4
	public void registerCameraAction(int uniqueId, int cameraId) { }

	// RVA: 0x15259FC Offset: 0x15259FC VA: 0x15259FC
	public void deleteCameraAction(int uniqueId, int cameraId) { }

	// RVA: 0x1525A44 Offset: 0x1525A44 VA: 0x1525A44
	public void preLoadServantSet(BattleServantData svtData) { }

	// RVA: 0x1525A7C Offset: 0x1525A7C VA: 0x1525A7C
	public void preLoadServantSet(ServantAssetArgs args) { }

	// RVA: 0x1508848 Offset: 0x1508848 VA: 0x1508848
	public void unloadServantSet(BattleActorControl actor) { }

	// RVA: 0x1525BEC Offset: 0x1525BEC VA: 0x1525BEC
	public void unloadServantSet(BattleServantData svtData, bool useIgnoreFlag = False) { }

	// RVA: 0x1525C90 Offset: 0x1525C90 VA: 0x1525C90
	public void unloadServantSet(ServantAssetArgs args, bool isIgnoreUnload = False) { }

	// RVA: 0x1525E90 Offset: 0x1525E90 VA: 0x1525E90
	public void unloadDeckActor(int index, BattleServantData svtData) { }

	// RVA: 0x1525FA0 Offset: 0x1525FA0 VA: 0x1525FA0
	public void callServant(BattleActionData actionData) { }

	// RVA: 0x1525FD8 Offset: 0x1525FD8 VA: 0x1525FD8
	public void stepOutPT() { }

	// RVA: 0x15261A0 Offset: 0x15261A0 VA: 0x15261A0
	public void loadPt(Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3920C Offset: 0xD3920C VA: 0xD3920C
	// RVA: 0x15261CC Offset: 0x15261CC VA: 0x15261CC
	private IEnumerator corLoadPt(Action callback) { }

	// RVA: 0x1526260 Offset: 0x1526260 VA: 0x1526260
	public int[] getFunctionList(GameObject actObj) { }

	// RVA: 0x1526350 Offset: 0x1526350 VA: 0x1526350
	public int[] getFunctionListEx(GameObject actObj, out int displayFuncNum) { }

	// RVA: 0x150861C Offset: 0x150861C VA: 0x150861C
	public void setUIEffectCamera(bool flg) { }

	// RVA: 0x152644C Offset: 0x152644C VA: 0x152644C
	public GameObject loadUIEffect(int id) { }

	// RVA: 0x15266C4 Offset: 0x15266C4 VA: 0x15266C4
	public void playBgAnimation(string key, string animName, float timeline) { }

	// RVA: 0x152671C Offset: 0x152671C VA: 0x152671C
	public int getQuestPhaseScript(string key, int defaultValue) { }

	// RVA: 0x1526764 Offset: 0x1526764 VA: 0x1526764
	public void changeShadowType(bool isNormal) { }

	// RVA: 0x1526928 Offset: 0x1526928 VA: 0x1526928
	public void setCallMotion(int index, BattleActorControl actor, GameObject mstObj, string eventName, bool fromServant = True) { }

	// RVA: 0x1526A50 Offset: 0x1526A50 VA: 0x1526A50
	public void playShiftEffect() { }

	// RVA: 0x1526AF4 Offset: 0x1526AF4 VA: 0x1526AF4
	public void playShiftServant() { }

	// RVA: 0x1526C0C Offset: 0x1526C0C VA: 0x1526C0C
	public void PlayShiftGaugeChange(string eventName) { }

	// RVA: 0x1526D30 Offset: 0x1526D30 VA: 0x1526D30
	public void SendActorFsmEvent(int uniqueId, string eventName) { }

	// RVA: 0x1526E24 Offset: 0x1526E24 VA: 0x1526E24
	public void PlayShiftGaugeChangeServant(string eventName) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3921C Offset: 0xD3921C VA: 0xD3921C
	// RVA: 0x1526E84 Offset: 0x1526E84 VA: 0x1526E84
	private IEnumerator ColShiftGaugeChangeServant(BattleActionData.ShiftServant shiftSvt, string eventName) { }

	// RVA: 0x1526F30 Offset: 0x1526F30 VA: 0x1526F30
	public void playChangeServant() { }

	// RVA: 0x15270E4 Offset: 0x15270E4 VA: 0x15270E4
	public void playChangeBg() { }

	// RVA: 0x1527260 Offset: 0x1527260 VA: 0x1527260
	public void endChangeBg() { }

	// RVA: 0x1509560 Offset: 0x1509560 VA: 0x1509560
	public void LoadGimmickData(int gimmickId) { }

	// RVA: 0x1527358 Offset: 0x1527358 VA: 0x1527358
	public GameObject CreateGimmickObj() { }

	// RVA: 0x15273F0 Offset: 0x15273F0 VA: 0x15273F0
	public void ReleaseGimmickObj() { }

	// RVA: 0x152745C Offset: 0x152745C VA: 0x152745C
	public void ShowSkillMessage() { }

	// RVA: 0x1527494 Offset: 0x1527494 VA: 0x1527494
	public GameObject getFieldMotionObject(string name) { }

	// RVA: 0x15274CC Offset: 0x15274CC VA: 0x15274CC
	public bool IsStep4FieldMotion() { }

	// RVA: 0x1513148 Offset: 0x1513148 VA: 0x1513148
	public void startSkipDeadTemp() { }

	// RVA: 0x15274FC Offset: 0x15274FC VA: 0x15274FC
	public void checkChangeAppearance(Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3922C Offset: 0xD3922C VA: 0xD3922C
	// RVA: 0x15276BC Offset: 0x15276BC VA: 0x15276BC
	private IEnumerator startChangeAppearance(int[] tagetUniqueId, Action callback) { }

	// RVA: 0x1527768 Offset: 0x1527768 VA: 0x1527768
	public void noblePhantasmWhiteInFade(float fadeTime = 0.2, float uiFadeTime = 0.3) { }

	// RVA: 0x1516B78 Offset: 0x1516B78 VA: 0x1516B78
	private void updateConditionsBuff(BattleServantData svt) { }

	// RVA: 0x15278A4 Offset: 0x15278A4 VA: 0x15278A4
	public void AddCollider(MeshCollider collider, SkinnedMeshRenderer skinnedMesh, int uiColliderIndex, int svtId, Action callback, bool isEnableUiCollider) { }

	// RVA: 0x152791C Offset: 0x152791C VA: 0x152791C
	public void RemoveCollider(MeshCollider collider) { }

	// RVA: 0x1527954 Offset: 0x1527954 VA: 0x1527954
	public void SetMasterBuffEffectData(string popLabel, int popLabelColor, int[] effectList) { }

	// RVA: 0x1527964 Offset: 0x1527964 VA: 0x1527964
	public void TdDelayEnd() { }

	// RVA: 0x15279C4 Offset: 0x15279C4 VA: 0x15279C4
	public void AllLoopEffectSwitch(bool isPlay, bool isNoblePhantasm) { }

	// RVA: 0x1527B94 Offset: 0x1527B94 VA: 0x1527B94
	public void SetActiveTutorialDialogMask(bool isActive) { }

	// RVA: 0x1527BCC Offset: 0x1527BCC VA: 0x1527BCC
	public void SelfDeadInNoblePhantasm(BattleActorControl actor) { }

	// RVA: 0x1527C90 Offset: 0x1527C90 VA: 0x1527C90
	public void HideMoveToSubMemberActor(BattleActorControl actor) { }

	// RVA: 0x1528124 Offset: 0x1528124 VA: 0x1528124
	public void SetEffectControlSpecialInvincibleObject(AssetData assetData) { }

	// RVA: 0x15281BC Offset: 0x15281BC VA: 0x15281BC
	public void PlayBuffInSkillCutInEffect(int functionIndex) { }

	// RVA: 0x1528288 Offset: 0x1528288 VA: 0x1528288
	private bool IsTouchScreen() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3923C Offset: 0xD3923C VA: 0xD3923C
	// RVA: 0x151FAF0 Offset: 0x151FAF0 VA: 0x151FAF0
	private IEnumerator CheckQuestStartSkill() { }

	// RVA: 0x15282A8 Offset: 0x15282A8 VA: 0x15282A8
	public bool ExistsMessageObject() { }

	// RVA: 0x15284E0 Offset: 0x15284E0 VA: 0x15284E0
	public void StartLossCommandSpell() { }

	// RVA: 0x1528618 Offset: 0x1528618 VA: 0x1528618
	private void EndLoadLossCommandSpellEffect(AssetData assetData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3924C Offset: 0xD3924C VA: 0xD3924C
	// RVA: 0x1528644 Offset: 0x1528644 VA: 0x1528644
	private IEnumerator CoEndLoadLossCommandSpellEffect(AssetData assetData) { }

	// RVA: 0x15286D8 Offset: 0x15286D8 VA: 0x15286D8
	public void FieldCallServant() { }

	// RVA: 0x1528710 Offset: 0x1528710 VA: 0x1528710
	public void FieldCallEffect(bool isBefore) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3925C Offset: 0xD3925C VA: 0xD3925C
	// RVA: 0x15287F8 Offset: 0x15287F8 VA: 0x15287F8
	private IEnumerator CoFieldCallEffect(int effectId, string sendEvent) { }

	// RVA: 0x15288A4 Offset: 0x15288A4 VA: 0x15288A4
	public bool CheckSpecifiedBattleStartVoice() { }

	// RVA: 0x1528924 Offset: 0x1528924 VA: 0x1528924
	public void PlaySpecifiedBattleStartVoice(float volume, Action callback) { }

	// RVA: 0x1528AE4 Offset: 0x1528AE4 VA: 0x1528AE4
	public void DefenceTargetInitialize(int maxHp, int uiId) { }

	// RVA: 0x1528B6C Offset: 0x1528B6C VA: 0x1528B6C
	public void DisplayDefenceTarget() { }

	// RVA: 0x150966C Offset: 0x150966C VA: 0x150966C
	private void SetBattleDefenceTargetData() { }

	// RVA: 0x1528B9C Offset: 0x1528B9C VA: 0x1528B9C
	public void ShowDefenceTargetDamage(string damageSe) { }

	// RVA: 0x1510038 Offset: 0x1510038 VA: 0x1510038
	public void UpdateDefenceTargetUiPosition(BattlePerformanceDefenceTarget.MoveToPositionType positionType) { }

	// RVA: 0x1510070 Offset: 0x1510070 VA: 0x1510070
	public void SetDefenceTargetBattlePhaseEnd(bool isEnd) { }

	// RVA: 0x1528DC8 Offset: 0x1528DC8 VA: 0x1528DC8
	public void ShowDefenceTargetAddNoblePhantasmBuffEffect(BattleActorControl actor, int functionIndex, float waitTime, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3926C Offset: 0xD3926C VA: 0xD3926C
	// RVA: 0x1529070 Offset: 0x1529070 VA: 0x1529070
	private IEnumerator CoShowDefenceTargetAddBuffEffect(int effectId, GameObject procObject, FunctionEntity funcEntity, int[] specialInvincibleBuff, float waitTime, Action callback) { }

	// RVA: 0x152918C Offset: 0x152918C VA: 0x152918C
	private void PopupDefenceTargetBuffLabel(string popupLabel, int popupColor, int popupIconId) { }

	// RVA: 0x1529688 Offset: 0x1529688 VA: 0x1529688
	public bool ShowDefenceTargetGuardEffect(BattleActorControl actor) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3927C Offset: 0xD3927C VA: 0xD3927C
	// RVA: 0x152999C Offset: 0x152999C VA: 0x152999C
