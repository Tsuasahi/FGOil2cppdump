	// RVA: 0x1194400 Offset: 0x1194400 VA: 0x1194400
	private static extern void criAtomExDebug_GetResourcesInfo(out CriAtomExDebug.ResourcesInfo resourcesInfo) { }
}

// Namespace: 
public struct CriAtomExDebug.ResourcesInfo // TypeDefIndex: 4092
{
	// Fields
	public CriAtomEx.ResourceUsage virtualVoiceUsage; // 0x0
	public CriAtomEx.ResourceUsage sequenceUsage; // 0x8
	public CriAtomEx.ResourceUsage sequenceTrackUsage; // 0x10
	public CriAtomEx.ResourceUsage sequenceTrackItemUsage; // 0x18
}

// Namespace: 
public static class CriAtomExAcfDebug // TypeDefIndex: 4093
{
	// Methods

	// RVA: 0x118ED50 Offset: 0x118ED50 VA: 0x118ED50
	public static int GetNumCategories() { }

	// RVA: 0x118EDE0 Offset: 0x118EDE0 VA: 0x118EDE0
	public static bool GetCategoryInfoByIndex(ushort index, out CriAtomExAcfDebug.CategoryInfo categoryInfo) { }

	// RVA: 0x118EF50 Offset: 0x118EF50 VA: 0x118EF50
	public static bool GetCategoryInfoByName(string name, out CriAtomExAcfDebug.CategoryInfo categoryInfo) { }

	// RVA: 0x118F088 Offset: 0x118F088 VA: 0x118F088
	public static bool GetCategoryInfoById(uint id, out CriAtomExAcfDebug.CategoryInfo categoryInfo) { }

	// RVA: 0x118F1A8 Offset: 0x118F1A8 VA: 0x118F1A8
	public static int GetNumBuses() { }

	// RVA: 0x118F238 Offset: 0x118F238 VA: 0x118F238
	public static bool GetDspBusInformation(ushort index, out CriAtomExAcfDebug.DspBusInfo dspBusInfo) { }

	// RVA: 0x118F44C Offset: 0x118F44C VA: 0x118F44C
	public static int GetNumAisacControls() { }

	// RVA: 0x118F4DC Offset: 0x118F4DC VA: 0x118F4DC
	public static bool GetAisacControlInfo(ushort index, out CriAtomExAcfDebug.AisacControlInfo info) { }

	// RVA: 0x118F618 Offset: 0x118F618 VA: 0x118F618
	public static uint GetAisacControlIdByName(string name) { }

	// RVA: 0x118F6D0 Offset: 0x118F6D0 VA: 0x118F6D0
	public static string GetAisacControlNameById(uint id) { }

	// RVA: 0x118F784 Offset: 0x118F784 VA: 0x118F784
	public static int GetNumGlobalAisacs() { }

	// RVA: 0x118F814 Offset: 0x118F814 VA: 0x118F814
	public static bool GetGlobalAisacInfo(ushort index, out CriAtomExAcfDebug.GlobalAisacInfo info) { }

	// RVA: 0x118F994 Offset: 0x118F994 VA: 0x118F994
	public static bool GetGlobalAisacInfoByName(string name, out CriAtomExAcfDebug.GlobalAisacInfo info) { }

	// RVA: 0x118FAD4 Offset: 0x118FAD4 VA: 0x118FAD4
	public static int GetNumSelectors() { }

	// RVA: 0x118FB64 Offset: 0x118FB64 VA: 0x118FB64
	public static bool GetSelectorInfoByIndex(ushort index, out CriAtomExAcfDebug.SelectorInfo info) { }

	// RVA: 0x118FCC0 Offset: 0x118FCC0 VA: 0x118FCC0
	public static bool GetSelectorInfoByName(string name, out CriAtomExAcfDebug.SelectorInfo info) { }

	// RVA: 0x118FDEC Offset: 0x118FDEC VA: 0x118FDEC
	public static bool GetSelectorLabelInfo(ref CriAtomExAcfDebug.SelectorInfo selectorInfo, ushort index, out CriAtomExAcfDebug.SelectorLabelInfo labelInfo) { }

	// RVA: 0x118ED54 Offset: 0x118ED54 VA: 0x118ED54
	private static extern int criAtomExAcf_GetNumCategories() { }

	// RVA: 0x118EE54 Offset: 0x118EE54 VA: 0x118EE54
	private static extern int criAtomExAcf_GetCategoryInfo(ushort index, out CriAtomExAcfDebug.CategoryInfoForMarshaling categoryInfo) { }

	// RVA: 0x118EFC4 Offset: 0x118EFC4 VA: 0x118EFC4
	private static extern int criAtomExAcf_GetCategoryInfoByName(string name, out CriAtomExAcfDebug.CategoryInfoForMarshaling categoryInfo) { }

	// RVA: 0x118F0FC Offset: 0x118F0FC VA: 0x118F0FC
	private static extern int criAtomExAcf_GetCategoryInfoById(uint id, out CriAtomExAcfDebug.CategoryInfoForMarshaling categoryInfo) { }

	// RVA: 0x118F1AC Offset: 0x118F1AC VA: 0x118F1AC
	private static extern int criAtomExAcf_GetNumBuses() { }

	// RVA: 0x118F2D8 Offset: 0x118F2D8 VA: 0x118F2D8
	private static extern int criAtomExAcf_GetDspBusInformation(ushort index, out CriAtomExAcfDebug.DspBusInfoForMarshaling dspBusInfo) { }

	// RVA: 0x118F450 Offset: 0x118F450 VA: 0x118F450
	private static extern int criAtomExAcf_GetNumAisacControls() { }

	// RVA: 0x118F534 Offset: 0x118F534 VA: 0x118F534
	private static extern int criAtomExAcf_GetAisacControlInfo(ushort index, out CriAtomExAcfDebug.AisacControlInfoForMarshaling info) { }

	// RVA: 0x118F61C Offset: 0x118F61C VA: 0x118F61C
	private static extern uint criAtomExAcf_GetAisacControlIdByName(string name) { }

	// RVA: 0x118F6E8 Offset: 0x118F6E8 VA: 0x118F6E8
	private static extern IntPtr criAtomExAcf_GetAisacControlNameById(uint id) { }

	// RVA: 0x118F788 Offset: 0x118F788 VA: 0x118F788
	private static extern int criAtomExAcf_GetNumGlobalAisacs() { }

	// RVA: 0x118F890 Offset: 0x118F890 VA: 0x118F890
	private static extern int criAtomExAcf_GetGlobalAisacInfo(ushort index, out CriAtomExAcfDebug.GlobalAisacInfoForMarshaling info) { }

	// RVA: 0x118FA10 Offset: 0x118FA10 VA: 0x118FA10
	private static extern int criAtomExAcf_GetGlobalAisacInfoByName(string name, out CriAtomExAcfDebug.GlobalAisacInfoForMarshaling info) { }

	// RVA: 0x118FAD8 Offset: 0x118FAD8 VA: 0x118FAD8
	private static extern int criAtomExAcf_GetNumSelectors() { }

	// RVA: 0x118FBCC Offset: 0x118FBCC VA: 0x118FBCC
	private static extern int criAtomExAcf_GetSelectorInfoByIndex(ushort index, out CriAtomExAcfDebug.SelectorInfoForMarshaling info) { }

	// RVA: 0x118FD28 Offset: 0x118FD28 VA: 0x118FD28
	private static extern int criAtomExAcf_GetSelectorInfoByName(string name, out CriAtomExAcfDebug.SelectorInfoForMarshaling info) { }

	// RVA: 0x118FE64 Offset: 0x118FE64 VA: 0x118FE64
	private static extern int criAtomExAcf_GetSelectorLabelInfo(ref CriAtomExAcfDebug.SelectorInfoForMarshaling info, ushort labelIndex, out CriAtomExAcfDebug.SelectorLabelInfoForMarshaling label_info) { }
}

// Namespace: 
public struct CriAtomExAcfDebug.CategoryInfo // TypeDefIndex: 4094
{
	// Fields
	public uint groupNo; // 0x0
	public uint id; // 0x4
	public string name; // 0x8
	public uint numCueLimits; // 0x10
	public float volume; // 0x14
}

// Namespace: 
public struct CriAtomExAcfDebug.DspBusInfo // TypeDefIndex: 4095
{
	// Fields
	public string name; // 0x0
	public float volume; // 0x8
	public float pan3dVolume; // 0xC
	public float pan3dAngle; // 0x10
	public float pan3dDistance; // 0x14
	public ushort[] fxIndexes; // 0x18
	public ushort[] busLinkIndexes; // 0x20
	public ushort busNo; // 0x28
	public byte numFxes; // 0x2A
	public byte numBusLinks; // 0x2B
}

// Namespace: 
public struct CriAtomExAcfDebug.AisacControlInfo // TypeDefIndex: 4096
{
	// Fields
	public string name; // 0x0
	public uint id; // 0x8
}

// Namespace: 
public enum CriAtomExAcfDebug.AisacType // TypeDefIndex: 4097
{
	// Fields
	public int value__; // 0x0
	public const CriAtomExAcfDebug.AisacType Normal = 0;
	public const CriAtomExAcfDebug.AisacType AutoModulation = 1;
}

// Namespace: 
public struct CriAtomExAcfDebug.GlobalAisacInfo // TypeDefIndex: 4098
{
	// Fields
	public string name; // 0x0
	public ushort index; // 0x8
	public ushort numGraphs; // 0xA
	public CriAtomExAcfDebug.AisacType type; // 0xC
	public float randomRange; // 0x10
	public ushort controlId; // 0x14
}

// Namespace: 
public struct CriAtomExAcfDebug.SelectorInfo // TypeDefIndex: 4099
{
	// Fields
	public string name; // 0x0
	public ushort index; // 0x8
	public ushort numLabels; // 0xA
	public ushort globalLabelIndex; // 0xC
}

// Namespace: 
public struct CriAtomExAcfDebug.SelectorLabelInfo // TypeDefIndex: 4100
{
	// Fields
	public string selectorName; // 0x0
	public string labelName; // 0x8
}

// Namespace: 
private struct CriAtomExAcfDebug.CategoryInfoForMarshaling // TypeDefIndex: 4101
{
	// Fields
	public uint groupNo; // 0x0
	public uint id; // 0x4
	public IntPtr namePtr; // 0x8
	public uint numCueLimits; // 0x10
	public float volume; // 0x14

	// Methods

	// RVA: 0xBBC1E4 Offset: 0xBBC1E4 VA: 0xBBC1E4
	public void Convert(out CriAtomExAcfDebug.CategoryInfo x) { }
}

// Namespace: 
private struct CriAtomExAcfDebug.DspBusInfoForMarshaling // TypeDefIndex: 4102
{
	// Fields
	public IntPtr namePtr; // 0x0
	public float volume; // 0x8
	public float pan3dVolume; // 0xC
	public float pan3dAngle; // 0x10
	public float pan3dDistance; // 0x14
	public ushort[] fxIndexes; // 0x18
	public ushort[] busLinkIndexes; // 0x20
	public ushort busNo; // 0x28
	public byte numFxes; // 0x2A
	public byte numBusLinks; // 0x2B

	// Methods

	// RVA: 0xBBC568 Offset: 0xBBC568 VA: 0xBBC568
	public void Convert(out CriAtomExAcfDebug.DspBusInfo x) { }
}

// Namespace: 
private struct CriAtomExAcfDebug.AisacControlInfoForMarshaling // TypeDefIndex: 4103
{
	// Fields
	public IntPtr namePtr; // 0x0
	public uint id; // 0x8

	// Methods

	// RVA: 0xBBC0EC Offset: 0xBBC0EC VA: 0xBBC0EC
	public void Convert(out CriAtomExAcfDebug.AisacControlInfo x) { }
}

// Namespace: 
private struct CriAtomExAcfDebug.GlobalAisacInfoForMarshaling // TypeDefIndex: 4104
{
	// Fields
	public IntPtr namePtr; // 0x0
	public ushort index; // 0x8
	public ushort numGraphs; // 0xA
	public uint type; // 0xC
	public float randomRange; // 0x10
	public ushort controlId; // 0x14
	public ushort dummy; // 0x16

	// Methods

	// RVA: 0xBBC640 Offset: 0xBBC640 VA: 0xBBC640
	public void Convert(out CriAtomExAcfDebug.GlobalAisacInfo x) { }
}

// Namespace: 
private struct CriAtomExAcfDebug.SelectorInfoForMarshaling // TypeDefIndex: 4105
{
	// Fields
	public IntPtr namePtr; // 0x0
	public ushort index; // 0x8
	public ushort numLabels; // 0xA
	public ushort globalLabelIndex; // 0xC

	// Methods

	// RVA: 0xBBC748 Offset: 0xBBC748 VA: 0xBBC748
	public void Convert(out CriAtomExAcfDebug.SelectorInfo x) { }
}

// Namespace: 
private struct CriAtomExAcfDebug.SelectorLabelInfoForMarshaling // TypeDefIndex: 4106
{
	// Fields
	public IntPtr selectorNamePtr; // 0x0
	public IntPtr labelNamePtr; // 0x8

	// Methods

	// RVA: 0xBBC834 Offset: 0xBBC834 VA: 0xBBC834
	public void Convert(out CriAtomExAcfDebug.SelectorLabelInfo x) { }
}

// Namespace: 
public static class CriAtomExAcbDebug // TypeDefIndex: 4107
{
	// Methods

	// RVA: 0x11F858C Offset: 0x11F858C VA: 0x11F858C
	public static bool GetAcbInfo(CriAtomExAcb acb, out CriAtomExAcbDebug.AcbInfo acbInfo) { }

	// RVA: 0x11F8614 Offset: 0x11F8614 VA: 0x11F8614
	private static extern int criAtomExAcb_GetAcbInfo(IntPtr acbHn, out CriAtomExAcbDebug.AcbInfoForMarshaling acbInfo) { }
}

// Namespace: 
public struct CriAtomExAcbDebug.AcbInfo // TypeDefIndex: 4108
{
	// Fields
	public string name; // 0x0
	public uint size; // 0x8
	public uint version; // 0xC
	public CriAtomEx.CharacterEncoding characterEncoding; // 0x10
	public float volume; // 0x14
	public int numCues; // 0x18
}

// Namespace: 
private struct CriAtomExAcbDebug.AcbInfoForMarshaling // TypeDefIndex: 4109
{
	// Fields
	public IntPtr namePtr; // 0x0
	public uint size; // 0x8
	public uint version; // 0xC
	public CriAtomEx.CharacterEncoding characterEncoding; // 0x10
	public float volume; // 0x14
	public int numCues; // 0x18

	// Methods

	// RVA: 0xBBE67C Offset: 0xBBE67C VA: 0xBBE67C
	public void Convert(out CriAtomExAcbDebug.AcbInfo x) { }
}

// Namespace: 
public static class CriAtomExPlaybackDebug // TypeDefIndex: 4110
{
	// Methods

	// RVA: 0x1199A7C Offset: 0x1199A7C VA: 0x1199A7C
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out float value) { }

	// RVA: 0x1199B4C Offset: 0x1199B4C VA: 0x1199B4C
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out uint value) { }

	// RVA: 0x1199C1C Offset: 0x1199C1C VA: 0x1199C1C
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out int value) { }

	// RVA: 0x1199CEC Offset: 0x1199CEC VA: 0x1199CEC
	public static bool GetAisacControl(CriAtomExPlayback playback, uint controlId, out float value) { }

	// RVA: 0x1199DBC Offset: 0x1199DBC VA: 0x1199DBC
	public static bool GetAisacControl(CriAtomExPlayback playback, string controlName, out float value) { }

	// RVA: 0x1199A98 Offset: 0x1199A98 VA: 0x1199A98
	private static extern int criAtomExPlayback_GetParameterFloat32(uint id, int parameterId, out float value) { }

	// RVA: 0x1199B68 Offset: 0x1199B68 VA: 0x1199B68
	private static extern int criAtomExPlayback_GetParameterUint32(uint id, int parameterId, out uint value) { }

	// RVA: 0x1199C38 Offset: 0x1199C38 VA: 0x1199C38
	private static extern int criAtomExPlayback_GetParameterSint32(uint id, int parameterId, out int value) { }

	// RVA: 0x1199D08 Offset: 0x1199D08 VA: 0x1199D08
	private static extern int criAtomExPlayback_GetAisacControlById(uint id, uint controlId, out float value) { }

	// RVA: 0x1199DD8 Offset: 0x1199DD8 VA: 0x1199DD8
	private static extern int criAtomExPlayback_GetAisacControlByName(uint id, string controlName, out float value) { }
}

// Namespace: CriAtomDebugDetail
public class Utility // TypeDefIndex: 4111
{
	// Methods

	// RVA: 0x11EEA4C Offset: 0x11EEA4C VA: 0x11EEA4C
	public void .ctor() { }

	// RVA: 0x11EEA54 Offset: 0x11EEA54 VA: 0x11EEA54
	public static string PtrToStringAutoOrNull(IntPtr stringPtr) { }
}

// Namespace: 
public abstract class CriDisposable : IDisposable // TypeDefIndex: 4112
{
	// Fields
	public Guid guid; // 0x10

	// Methods

	// RVA: 0x11AC7E4 Offset: 0x11AC7E4 VA: 0x11AC7E4
	public void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void Dispose();
}

// Namespace: 
public static class CriDisposableObjectManager // TypeDefIndex: 4113
{
	// Fields
	private static List<CriDisposableObjectManager.ObjectRef> refList; // 0x0

	// Methods

	// RVA: 0x11AC85C Offset: 0x11AC85C VA: 0x11AC85C
	private static int SearchForDisposable(CriDisposable disposable) { }

	// RVA: 0x11ACA54 Offset: 0x11ACA54 VA: 0x11ACA54
	public static void Register(CriDisposable disposable, CriDisposableObjectManager.ModuleType type) { }

	// RVA: 0x11ACC18 Offset: 0x11ACC18 VA: 0x11ACC18
	public static bool Unregister(CriDisposable disposable) { }

	// RVA: 0x11ACD6C Offset: 0x11ACD6C VA: 0x11ACD6C
	public static bool IsDisposed(CriDisposable disposable) { }

	// RVA: 0x11ACDD8 Offset: 0x11ACDD8 VA: 0x11ACDD8
	public static void CallOnModuleFinalization(CriDisposableObjectManager.ModuleType type) { }

	// RVA: 0x11AD120 Offset: 0x11AD120 VA: 0x11AD120
	private static int GetNextWithType(CriDisposableObjectManager.ModuleType type) { }

	// RVA: 0x11ACE3C Offset: 0x11ACE3C VA: 0x11ACE3C
	public static void DisposeAll(CriDisposableObjectManager.ModuleType type) { }

	// RVA: 0x11AD234 Offset: 0x11AD234 VA: 0x11AD234
	private static void .cctor() { }
}

// Namespace: 
public enum CriDisposableObjectManager.ModuleType // TypeDefIndex: 4114
{
	// Fields
	public int value__; // 0x0
	public const CriDisposableObjectManager.ModuleType Atom = 0;
	public const CriDisposableObjectManager.ModuleType AtomMic = 1;
	public const CriDisposableObjectManager.ModuleType Fs = 2;
	public const CriDisposableObjectManager.ModuleType FsWeb = 3;
	public const CriDisposableObjectManager.ModuleType Mana = 4;
	public const CriDisposableObjectManager.ModuleType Lips = 5;
	public const CriDisposableObjectManager.ModuleType Vip = 6;
}

// Namespace: 
public struct CriDisposableObjectManager.ObjectRef // TypeDefIndex: 4115
{
	// Fields
	public Guid guid; // 0x0
	public CriDisposableObjectManager.ModuleType type; // 0x10
	public CriDisposable disposable; // 0x18

	// Methods

	// RVA: 0xBBD2DC Offset: 0xBBD2DC VA: 0xBBD2DC
	public void .ctor(Guid _guid, CriDisposable _disposable, CriDisposableObjectManager.ModuleType _type) { }
}

// Namespace: 
public abstract class CriMonoBehaviour : MonoBehaviour // TypeDefIndex: 4116
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC8D824 Offset: 0xC8D824 VA: 0xC8D824
	[DebuggerBrowsableAttribute] // RVA: 0xC8D824 Offset: 0xC8D824 VA: 0xC8D824
	private Guid <guid>k__BackingField; // 0x18

	// Properties
	public Guid guid { get; set; }

	// Methods

	// RVA: 0xE7BD54 Offset: 0xE7BD54 VA: 0xE7BD54
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC90068 Offset: 0xC90068 VA: 0xC90068
	// RVA: 0xE7D438 Offset: 0xE7D438 VA: 0xE7D438
	public Guid get_guid() { }

	[CompilerGeneratedAttribute] // RVA: 0xC90078 Offset: 0xC90078 VA: 0xC90078
	// RVA: 0xE7D430 Offset: 0xE7D430 VA: 0xE7D430
	private void set_guid(Guid value) { }

	// RVA: 0xE7D444 Offset: 0xE7D444 VA: 0xE7D444 Slot: 4
	protected virtual void OnEnable() { }

	// RVA: 0xE7D6A4 Offset: 0xE7D6A4 VA: 0xE7D6A4 Slot: 5
	protected virtual void OnDisable() { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void CriInternalUpdate();

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void CriInternalLateUpdate();
}

// Namespace: 
public class CriMonoBehaviourManager : MonoBehaviour // TypeDefIndex: 4117
{
	// Fields
	private static CriMonoBehaviourManager _instance; // 0x0
	private static List<CriMonoBehaviour> criMonoBehaviourList; // 0x8

	// Properties
	public static CriMonoBehaviourManager instance { get; }

	// Methods

	// RVA: 0xE7D85C Offset: 0xE7D85C VA: 0xE7D85C
	public void .ctor() { }

	// RVA: 0xE7D4B4 Offset: 0xE7D4B4 VA: 0xE7D4B4
	public static CriMonoBehaviourManager get_instance() { }

	// RVA: 0xE7D864 Offset: 0xE7D864 VA: 0xE7D864
	public static void CreateInstance() { }

	// RVA: 0xE7DB2C Offset: 0xE7DB2C VA: 0xE7DB2C
	private static int GetIndex(CriMonoBehaviour criMonoBehaviour) { }

	// RVA: 0xE7D520 Offset: 0xE7D520 VA: 0xE7D520
	public bool Register(CriMonoBehaviour criMonoBehaviour) { }

	// RVA: 0xE7D708 Offset: 0xE7D708 VA: 0xE7D708
	public static bool UnRegister(CriMonoBehaviour criMonoBehaviour) { }

	// RVA: 0xE7DC98 Offset: 0xE7DC98 VA: 0xE7DC98
	private void Awake() { }

	// RVA: 0xE7DD98 Offset: 0xE7DD98 VA: 0xE7DD98
	private void Update() { }

	// RVA: 0xE7DF50 Offset: 0xE7DF50 VA: 0xE7DF50
	private void LateUpdate() { }

	// RVA: 0xE7E108 Offset: 0xE7E108 VA: 0xE7E108
	private static void .cctor() { }
}

// Namespace: 
public static class Debug // TypeDefIndex: 4118
{
	// Methods

	// RVA: 0xE819B8 Offset: 0xE819B8 VA: 0xE819B8
	public static void Break() { }

	[ConditionalAttribute] // RVA: 0xC90088 Offset: 0xC90088 VA: 0xC90088
	// RVA: 0xE81A8C Offset: 0xE81A8C VA: 0xE81A8C
	public static void Log(object message) { }

	[ConditionalAttribute] // RVA: 0xC900C0 Offset: 0xC900C0 VA: 0xC900C0
	// RVA: 0xE81B08 Offset: 0xE81B08 VA: 0xE81B08
	public static void Log(object message, Object context) { }

	[ConditionalAttribute] // RVA: 0xC900F8 Offset: 0xC900F8 VA: 0xC900F8
	// RVA: 0xE81B98 Offset: 0xE81B98 VA: 0xE81B98
	public static void LogError(object message) { }

	[ConditionalAttribute] // RVA: 0xC90130 Offset: 0xC90130 VA: 0xC90130
	// RVA: 0xE81C14 Offset: 0xE81C14 VA: 0xE81C14
	public static void LogError(object message, Object context) { }

	[ConditionalAttribute] // RVA: 0xC90168 Offset: 0xC90168 VA: 0xC90168
	// RVA: 0xE81CA4 Offset: 0xE81CA4 VA: 0xE81CA4
	public static void LogWarning(object message) { }

	[ConditionalAttribute] // RVA: 0xC901A0 Offset: 0xC901A0 VA: 0xC901A0
	// RVA: 0xE81D20 Offset: 0xE81D20 VA: 0xE81D20
	public static void LogWarning(object message, Object context) { }

	[ConditionalAttribute] // RVA: 0xC901D8 Offset: 0xC901D8 VA: 0xC901D8
	// RVA: 0xE81DB0 Offset: 0xE81DB0 VA: 0xE81DB0
	public static void LogWarningFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xC90210 Offset: 0xC90210 VA: 0xC90210
	// RVA: 0xE81E40 Offset: 0xE81E40 VA: 0xE81E40
	public static void LogFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xC90248 Offset: 0xC90248 VA: 0xC90248
	// RVA: 0xE81ED0 Offset: 0xE81ED0 VA: 0xE81ED0
	public static void LogErrorFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xC90280 Offset: 0xC90280 VA: 0xC90280
	// RVA: 0xE81F60 Offset: 0xE81F60 VA: 0xE81F60
	public static void LogAssertionFormat(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xC902B8 Offset: 0xC902B8 VA: 0xC902B8
	// RVA: 0xE81F64 Offset: 0xE81F64 VA: 0xE81F64
	public static void LogException(Exception exception) { }

	[ConditionalAttribute] // RVA: 0xC902F0 Offset: 0xC902F0 VA: 0xC902F0
	// RVA: 0xE81FE0 Offset: 0xE81FE0 VA: 0xE81FE0
	public static void LogException(Exception exception, Object context) { }

	[ConditionalAttribute] // RVA: 0xC90328 Offset: 0xC90328 VA: 0xC90328
	// RVA: 0xE82070 Offset: 0xE82070 VA: 0xE82070
	public static void DrawLine(Vector3 vec1, Vector3 vec2, Color col) { }

	[ConditionalAttribute] // RVA: 0xC90360 Offset: 0xC90360 VA: 0xC90360
	// RVA: 0xE8214C Offset: 0xE8214C VA: 0xE8214C
	public static void DrawRay(Vector3 vec1, Vector3 vec2, Color col) { }

	[ConditionalAttribute] // RVA: 0xC90398 Offset: 0xC90398 VA: 0xC90398
	// RVA: 0xE82228 Offset: 0xE82228 VA: 0xE82228
	public static void Assert(bool condition, string message, string detailMessage) { }

	[ConditionalAttribute] // RVA: 0xC903D0 Offset: 0xC903D0 VA: 0xC903D0
	// RVA: 0xE8222C Offset: 0xE8222C VA: 0xE8222C
	public static void Assert(bool condition, string message) { }

	[ConditionalAttribute] // RVA: 0xC90408 Offset: 0xC90408 VA: 0xC90408
	// RVA: 0xE82230 Offset: 0xE82230 VA: 0xE82230
	public static void Assert(bool condition) { }

	[ConditionalAttribute] // RVA: 0xC90440 Offset: 0xC90440 VA: 0xC90440
	// RVA: 0xE82234 Offset: 0xE82234 VA: 0xE82234
	public static void LogAssertion(string message) { }

	// RVA: 0xE81A2C Offset: 0xE81A2C VA: 0xE81A2C
	private static bool IsEnable() { }
}

// Namespace: 
public class DialogManager : MonoBehaviour // TypeDefIndex: 4119
{
	// Fields
	private static DialogManager _instance; // 0x0
	private Dictionary<int, Action<bool>> _delegates; // 0x18

	// Properties
	public static DialogManager Instance { get; }

	// Methods

	// RVA: 0xE82238 Offset: 0xE82238 VA: 0xE82238
	public void .ctor() { }

	// RVA: 0xE82240 Offset: 0xE82240 VA: 0xE82240
	public static DialogManager get_Instance() { }

	// RVA: 0xE823CC Offset: 0xE823CC VA: 0xE823CC
	private void Awake() { }

	// RVA: 0xE827CC Offset: 0xE827CC VA: 0xE827CC
	private void OnDestroy() { }

	// RVA: 0xE82828 Offset: 0xE82828 VA: 0xE82828
	public int ShowSelectDialog(string msg, Action<bool> del) { }

	// RVA: 0xE82A34 Offset: 0xE82A34 VA: 0xE82A34
	public int ShowSelectDialog(string title, string msg, Action<bool> del) { }

	// RVA: 0xE82C90 Offset: 0xE82C90 VA: 0xE82C90
	public int ShowSubmitDialog(string msg, Action<bool> del) { }

	// RVA: 0xE82E9C Offset: 0xE82E9C VA: 0xE82E9C
	public int ShowSubmitDialog(string title, string msg, Action<bool> del) { }

	// RVA: 0xE830F8 Offset: 0xE830F8 VA: 0xE830F8
	public void DissmissDialog(int id) { }

	// RVA: 0xE8255C Offset: 0xE8255C VA: 0xE8255C
	public void SetLabel(string decide, string cancel, string close) { }

	// RVA: 0xE8337C Offset: 0xE8337C VA: 0xE8337C
	public void OnSubmit(string idStr) { }

	// RVA: 0xE83484 Offset: 0xE83484 VA: 0xE83484
	public void OnCancel(string idStr) { }
}

// Namespace: 
public class FingerDebug : MonoBehaviour // TypeDefIndex: 4120
{
	// Fields
	public GUITexture FingerIcon; // 0x18
	public bool ShowGUI; // 0x20
	public Rect GuiRect; // 0x24
	private GUITexture[] icons; // 0x38
	private float distance; // 0x40

	// Methods

	// RVA: 0xE85D50 Offset: 0xE85D50 VA: 0xE85D50
	public void .ctor() { }

	// RVA: 0xE85DC4 Offset: 0xE85DC4 VA: 0xE85DC4
	private void Start() { }

	// RVA: 0xE86024 Offset: 0xE86024 VA: 0xE86024
	private void Update() { }

	// RVA: 0xE8668C Offset: 0xE8668C VA: 0xE8668C
	private void OnGUI() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B254 Offset: 0xC8B254 VA: 0xC8B254
[TooltipAttribute] // RVA: 0xC8B254 Offset: 0xC8B254 VA: 0xC8B254
public class FingerGesturesDragEvent : FingerGesturesEvents // TypeDefIndex: 4121
{
	// Fields
	[ActionSection] // RVA: 0xC8D860 Offset: 0xC8D860 VA: 0xC8D860
	[TooltipAttribute] // RVA: 0xC8D860 Offset: 0xC8D860 VA: 0xC8D860
	public FsmEvent dragStartedEvent; // 0x90
	[TooltipAttribute] // RVA: 0xC8D8C0 Offset: 0xC8D8C0 VA: 0xC8D8C0
	public FsmEvent dragUpdatedEvent; // 0x98
	[TooltipAttribute] // RVA: 0xC8D8F8 Offset: 0xC8D8F8 VA: 0xC8D8F8
	public FsmEvent dragEndedEvent; // 0xA0
	[UIHintAttribute] // RVA: 0xC8D930 Offset: 0xC8D930 VA: 0xC8D930
	[TooltipAttribute] // RVA: 0xC8D930 Offset: 0xC8D930 VA: 0xC8D930
	public FsmVector2 storeDragDelta; // 0xA8

	// Methods

	// RVA: 0xE8E854 Offset: 0xE8E854 VA: 0xE8E854
	public void .ctor() { }

	// RVA: 0xE8E864 Offset: 0xE8E864 VA: 0xE8E864 Slot: 28
	public override void Reset() { }

	// RVA: 0xE8E894 Offset: 0xE8E894 VA: 0xE8E894 Slot: 63
	protected override bool HandleGestureEvent(Gesture gesture) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B2B4 Offset: 0xC8B2B4 VA: 0xC8B2B4
[TooltipAttribute] // RVA: 0xC8B2B4 Offset: 0xC8B2B4 VA: 0xC8B2B4
public class FingerGesturesDragObject : FsmStateAction // TypeDefIndex: 4122
{
	// Fields
	[UIHintAttribute] // RVA: 0xC8D980 Offset: 0xC8D980 VA: 0xC8D980
	[TooltipAttribute] // RVA: 0xC8D980 Offset: 0xC8D980 VA: 0xC8D980
	public FsmOwnerDefault objectToDrag; // 0x50
	[UIHintAttribute] // RVA: 0xC8D9D0 Offset: 0xC8D9D0 VA: 0xC8D9D0
	[TooltipAttribute] // RVA: 0xC8D9D0 Offset: 0xC8D9D0 VA: 0xC8D9D0
	public FsmInt fingerIndex; // 0x58
	public FsmBool centerObjectOnFinger; // 0x60

	// Methods

	// RVA: 0xE8EA0C Offset: 0xE8EA0C VA: 0xE8EA0C
	public void .ctor() { }

	// RVA: 0xE8EA14 Offset: 0xE8EA14 VA: 0xE8EA14 Slot: 28
	public override void Reset() { }

	// RVA: 0xE8EA44 Offset: 0xE8EA44 VA: 0xE8EA44 Slot: 34
	public override void OnUpdate() { }

	// RVA: 0xE8EDB0 Offset: 0xE8EDB0 VA: 0xE8EDB0
	private Vector3 ProjectOnCameraPlane(Vector2 screenPos, Vector3 refPos) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B314 Offset: 0xC8B314 VA: 0xC8B314
[TooltipAttribute] // RVA: 0xC8B314 Offset: 0xC8B314 VA: 0xC8B314
public class FingerGesturesGetFingerInfo : FsmStateAction // TypeDefIndex: 4123
{
	// Fields
	[UIHintAttribute] // RVA: 0xC8DA20 Offset: 0xC8DA20 VA: 0xC8DA20
	[TooltipAttribute] // RVA: 0xC8DA20 Offset: 0xC8DA20 VA: 0xC8DA20
	public FsmInt fingerIndex; // 0x50
	[UIHintAttribute] // RVA: 0xC8DA70 Offset: 0xC8DA70 VA: 0xC8DA70
	public FsmVector2 getPosition; // 0x58
	[UIHintAttribute] // RVA: 0xC8DA84 Offset: 0xC8DA84 VA: 0xC8DA84
	public FsmFloat getStartTime; // 0x60
	[UIHintAttribute] // RVA: 0xC8DA98 Offset: 0xC8DA98 VA: 0xC8DA98
	public FsmVector2 getStartPosition; // 0x68
	[UIHintAttribute] // RVA: 0xC8DAAC Offset: 0xC8DAAC VA: 0xC8DAAC
	public FsmFloat getDistanceFromStart; // 0x70
	[UIHintAttribute] // RVA: 0xC8DAC0 Offset: 0xC8DAC0 VA: 0xC8DAC0
	public FsmVector2 getPreviousPosition; // 0x78
	[UIHintAttribute] // RVA: 0xC8DAD4 Offset: 0xC8DAD4 VA: 0xC8DAD4
	[TooltipAttribute] // RVA: 0xC8DAD4 Offset: 0xC8DAD4 VA: 0xC8DAD4
	public FsmVector2 getDeltaPosition; // 0x80
	public bool everyFrame; // 0x88

	// Methods

	// RVA: 0xE8F634 Offset: 0xE8F634 VA: 0xE8F634
	public void .ctor() { }

	// RVA: 0xE8F63C Offset: 0xE8F63C VA: 0xE8F63C Slot: 28
	public override void Reset() { }

	// RVA: 0xE8F654 Offset: 0xE8F654 VA: 0xE8F654 Slot: 32
	public override void OnEnter() { }

	// RVA: 0xE8F81C Offset: 0xE8F81C VA: 0xE8F81C Slot: 34
	public override void OnUpdate() { }

	// RVA: 0xE8F690 Offset: 0xE8F690 VA: 0xE8F690
	private void DoGetFingerInfo() { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B374 Offset: 0xC8B374 VA: 0xC8B374
[TooltipAttribute] // RVA: 0xC8B374 Offset: 0xC8B374 VA: 0xC8B374
public class FingerGesturesHoverEvent : FingerGesturesEvents // TypeDefIndex: 4124
{
	// Fields
	[ActionSection] // RVA: 0xC8DB24 Offset: 0xC8DB24 VA: 0xC8DB24
	[TooltipAttribute] // RVA: 0xC8DB24 Offset: 0xC8DB24 VA: 0xC8DB24
	public FsmEvent fingerEnterEvent; // 0x90
	[TooltipAttribute] // RVA: 0xC8DB84 Offset: 0xC8DB84 VA: 0xC8DB84
	public FsmEvent fingerExitEvent; // 0x98

	// Methods

	// RVA: 0xE8F820 Offset: 0xE8F820 VA: 0xE8F820
	public void .ctor() { }

	// RVA: 0xE8F828 Offset: 0xE8F828 VA: 0xE8F828 Slot: 28
	public override void Reset() { }

	// RVA: 0xE8F848 Offset: 0xE8F848 VA: 0xE8F848 Slot: 62
	protected override bool HandleFingerEvent(FingerEvent e) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B3D4 Offset: 0xC8B3D4 VA: 0xC8B3D4
[TooltipAttribute] // RVA: 0xC8B3D4 Offset: 0xC8B3D4 VA: 0xC8B3D4
public class FingerGesturesLongPressEvent : FingerGesturesEvents // TypeDefIndex: 4125
{
	// Fields
	[ActionSection] // RVA: 0xC8DBBC Offset: 0xC8DBBC VA: 0xC8DBBC
	[TooltipAttribute] // RVA: 0xC8DBBC Offset: 0xC8DBBC VA: 0xC8DBBC
	public FsmEvent longPressEvent; // 0x90
	[UIHintAttribute] // RVA: 0xC8DC1C Offset: 0xC8DC1C VA: 0xC8DC1C
	[TooltipAttribute] // RVA: 0xC8DC1C Offset: 0xC8DC1C VA: 0xC8DC1C
	public FsmFloat storeElapsedTime; // 0x98

	// Methods

	// RVA: 0xE8F944 Offset: 0xE8F944 VA: 0xE8F944
	public void .ctor() { }

	// RVA: 0xE8F94C Offset: 0xE8F94C VA: 0xE8F94C Slot: 28
	public override void Reset() { }

	// RVA: 0xE8F96C Offset: 0xE8F96C VA: 0xE8F96C Slot: 63
	protected override bool HandleGestureEvent(Gesture gesture) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B434 Offset: 0xC8B434 VA: 0xC8B434
[TooltipAttribute] // RVA: 0xC8B434 Offset: 0xC8B434 VA: 0xC8B434
public class FingerGesturesPinchEvent : FingerGesturesEvents // TypeDefIndex: 4126
{
	// Fields
	[ActionSection] // RVA: 0xC8DC6C Offset: 0xC8DC6C VA: 0xC8DC6C
	[TooltipAttribute] // RVA: 0xC8DC6C Offset: 0xC8DC6C VA: 0xC8DC6C
	public FsmEvent pinchStartedEvent; // 0x90
	[TooltipAttribute] // RVA: 0xC8DCCC Offset: 0xC8DCCC VA: 0xC8DCCC
	public FsmEvent pinchUpdatedEvent; // 0x98
	[TooltipAttribute] // RVA: 0xC8DD04 Offset: 0xC8DD04 VA: 0xC8DD04
	public FsmEvent pinchEndedEvent; // 0xA0
	[UIHintAttribute] // RVA: 0xC8DD3C Offset: 0xC8DD3C VA: 0xC8DD3C
	[TooltipAttribute] // RVA: 0xC8DD3C Offset: 0xC8DD3C VA: 0xC8DD3C
	public FsmFloat storeDeltaDistance; // 0xA8
	[UIHintAttribute] // RVA: 0xC8DD8C Offset: 0xC8DD8C VA: 0xC8DD8C
	[TooltipAttribute] // RVA: 0xC8DD8C Offset: 0xC8DD8C VA: 0xC8DD8C
	public FsmFloat storeTotalDistance; // 0xB0

	// Methods

	// RVA: 0xE8FA40 Offset: 0xE8FA40 VA: 0xE8FA40
	public void .ctor() { }

	// RVA: 0xE8FA48 Offset: 0xE8FA48 VA: 0xE8FA48 Slot: 28
	public override void Reset() { }

	// RVA: 0xE8FA68 Offset: 0xE8FA68 VA: 0xE8FA68 Slot: 63
	protected override bool HandleGestureEvent(Gesture gesture) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B494 Offset: 0xC8B494 VA: 0xC8B494
[TooltipAttribute] // RVA: 0xC8B494 Offset: 0xC8B494 VA: 0xC8B494
public class FingerGesturesPointCloudEvent : FingerGesturesEvents // TypeDefIndex: 4127
{
	// Fields
	[ActionSection] // RVA: 0xC8DDDC Offset: 0xC8DDDC VA: 0xC8DDDC
	[TooltipAttribute] // RVA: 0xC8DDDC Offset: 0xC8DDDC VA: 0xC8DDDC
	public FsmEvent matchEvent; // 0x90
	[TooltipAttribute] // RVA: 0xC8DE3C Offset: 0xC8DE3C VA: 0xC8DE3C
	public FsmString gestureNameFilter; // 0x98
	[UIHintAttribute] // RVA: 0xC8DE74 Offset: 0xC8DE74 VA: 0xC8DE74
	[TooltipAttribute] // RVA: 0xC8DE74 Offset: 0xC8DE74 VA: 0xC8DE74
	public FsmFloat storeMatchScore; // 0xA0
	[UIHintAttribute] // RVA: 0xC8DEC4 Offset: 0xC8DEC4 VA: 0xC8DEC4
	[TooltipAttribute] // RVA: 0xC8DEC4 Offset: 0xC8DEC4 VA: 0xC8DEC4
	public FsmFloat storeMatchDistance; // 0xA8
	[UIHintAttribute] // RVA: 0xC8DF14 Offset: 0xC8DF14 VA: 0xC8DF14
	[TooltipAttribute] // RVA: 0xC8DF14 Offset: 0xC8DF14 VA: 0xC8DF14
	public FsmString storeMatchedGestureName; // 0xB0

	// Methods

	// RVA: 0xE8FBA8 Offset: 0xE8FBA8 VA: 0xE8FBA8
	public void .ctor() { }

	// RVA: 0xE8FBB0 Offset: 0xE8FBB0 VA: 0xE8FBB0 Slot: 28
	public override void Reset() { }

	// RVA: 0xE8FBE0 Offset: 0xE8FBE0 VA: 0xE8FBE0 Slot: 63
	protected override bool HandleGestureEvent(Gesture gesture) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B4F4 Offset: 0xC8B4F4 VA: 0xC8B4F4
[TooltipAttribute] // RVA: 0xC8B4F4 Offset: 0xC8B4F4 VA: 0xC8B4F4
public class FingerGesturesSwipeEvent : FingerGesturesEvents // TypeDefIndex: 4128
{
	// Fields
	[ActionSection] // RVA: 0xC8DF64 Offset: 0xC8DF64 VA: 0xC8DF64
	[TooltipAttribute] // RVA: 0xC8DF64 Offset: 0xC8DF64 VA: 0xC8DF64
	public FsmEvent swipeEvent; // 0x90
	public FsmEvent swipeLeftEvent; // 0x98
	public FsmEvent swipeRightEvent; // 0xA0
	public FsmEvent swipeUpEvent; // 0xA8
	public FsmEvent swipeDownEvent; // 0xB0
	[UIHintAttribute] // RVA: 0xC8DFC4 Offset: 0xC8DFC4 VA: 0xC8DFC4
	public FsmVector2 storeMoveVector; // 0xB8
	[UIHintAttribute] // RVA: 0xC8DFD8 Offset: 0xC8DFD8 VA: 0xC8DFD8
	public FsmFloat storeVelocity; // 0xC0
	[UIHintAttribute] // RVA: 0xC8DFEC Offset: 0xC8DFEC VA: 0xC8DFEC
	public FsmString storeDirection; // 0xC8

	// Methods

	// RVA: 0xE8FDE8 Offset: 0xE8FDE8 VA: 0xE8FDE8
	public void .ctor() { }

	// RVA: 0xE8FDF0 Offset: 0xE8FDF0 VA: 0xE8FDF0 Slot: 28
	public override void Reset() { }

	// RVA: 0xE8FE10 Offset: 0xE8FE10 VA: 0xE8FE10 Slot: 63
	protected override bool HandleGestureEvent(Gesture gesture) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B554 Offset: 0xC8B554 VA: 0xC8B554
[TooltipAttribute] // RVA: 0xC8B554 Offset: 0xC8B554 VA: 0xC8B554
public class FingerGesturesTapEvent : FingerGesturesEvents // TypeDefIndex: 4129
{
	// Fields
	[ActionSection] // RVA: 0xC8E000 Offset: 0xC8E000 VA: 0xC8E000
	[TooltipAttribute] // RVA: 0xC8E000 Offset: 0xC8E000 VA: 0xC8E000
	public FsmEvent tapEvent; // 0x90

	// Methods

	// RVA: 0xE90034 Offset: 0xE90034 VA: 0xE90034
	public void .ctor() { }

	// RVA: 0xE9003C Offset: 0xE9003C VA: 0xE9003C Slot: 28
	public override void Reset() { }

	// RVA: 0xE9005C Offset: 0xE9005C VA: 0xE9005C Slot: 63
	protected override bool HandleGestureEvent(Gesture gesture) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B5B4 Offset: 0xC8B5B4 VA: 0xC8B5B4
[TooltipAttribute] // RVA: 0xC8B5B4 Offset: 0xC8B5B4 VA: 0xC8B5B4
public class FingerGesturesTouchEvents : FingerGesturesEvents // TypeDefIndex: 4130
{
	// Fields
	[ActionSection] // RVA: 0xC8E060 Offset: 0xC8E060 VA: 0xC8E060
	[TooltipAttribute] // RVA: 0xC8E060 Offset: 0xC8E060 VA: 0xC8E060
	public FsmEvent fingerDownEvent; // 0x90
	[TooltipAttribute] // RVA: 0xC8E0C0 Offset: 0xC8E0C0 VA: 0xC8E0C0
	public FsmEvent fingerUpEvent; // 0x98
	[UIHintAttribute] // RVA: 0xC8E0F8 Offset: 0xC8E0F8 VA: 0xC8E0F8
	[TooltipAttribute] // RVA: 0xC8E0F8 Offset: 0xC8E0F8 VA: 0xC8E0F8
	public FsmFloat storeTimeHeldDown; // 0xA0

	// Methods

	// RVA: 0xE900F8 Offset: 0xE900F8 VA: 0xE900F8
	public void .ctor() { }

	// RVA: 0xE90100 Offset: 0xE90100 VA: 0xE90100 Slot: 28
	public override void Reset() { }

	// RVA: 0xE90120 Offset: 0xE90120 VA: 0xE90120 Slot: 62
	protected override bool HandleFingerEvent(FingerEvent e) { }
}

// Namespace: HutongGames.PlayMaker.Actions
[ActionCategoryAttribute] // RVA: 0xC8B614 Offset: 0xC8B614 VA: 0xC8B614
[TooltipAttribute] // RVA: 0xC8B614 Offset: 0xC8B614 VA: 0xC8B614
public class FingerGesturesTwistEvent : FingerGesturesEvents // TypeDefIndex: 4131
{
	// Fields
	[ActionSection] // RVA: 0xC8E148 Offset: 0xC8E148 VA: 0xC8E148
	[TooltipAttribute] // RVA: 0xC8E148 Offset: 0xC8E148 VA: 0xC8E148
	public FsmEvent twistStartedEvent; // 0x90
	[TooltipAttribute] // RVA: 0xC8E1A8 Offset: 0xC8E1A8 VA: 0xC8E1A8
