	private const string oid3DES = "1.2.840.113549.3.7";
	private const string oidRC2 = "1.2.840.113549.3.2";
	private const string oid3DESKeyWrap = "1.2.840.113549.1.9.16.3.6";
	private const string nameSHA1a = "SHA";
	private const string nameSHA1b = "SHA1";
	private const string nameSHA1c = "System.Security.Cryptography.SHA1";
	private const string nameSHA1d = "System.Security.Cryptography.HashAlgorithm";
	private const string nameMD5a = "MD5";
	private const string nameMD5b = "System.Security.Cryptography.MD5";
	private const string nameSHA256a = "SHA256";
	private const string nameSHA256b = "SHA-256";
	private const string nameSHA256c = "System.Security.Cryptography.SHA256";
	private const string nameSHA384a = "SHA384";
	private const string nameSHA384b = "SHA-384";
	private const string nameSHA384c = "System.Security.Cryptography.SHA384";
	private const string nameSHA512a = "SHA512";
	private const string nameSHA512b = "SHA-512";
	private const string nameSHA512c = "System.Security.Cryptography.SHA512";
	private const string nameRSAa = "RSA";
	private const string nameRSAb = "System.Security.Cryptography.RSA";
	private const string nameRSAc = "System.Security.Cryptography.AsymmetricAlgorithm";
	private const string nameDSAa = "DSA";
	private const string nameDSAb = "System.Security.Cryptography.DSA";
	private const string nameDESa = "DES";
	private const string nameDESb = "System.Security.Cryptography.DES";
	private const string name3DESa = "3DES";
	private const string name3DESb = "TripleDES";
	private const string name3DESc = "Triple DES";
	private const string name3DESd = "System.Security.Cryptography.TripleDES";
	private const string nameRC2a = "RC2";
	private const string nameRC2b = "System.Security.Cryptography.RC2";
	private const string nameAESa = "Rijndael";
	private const string nameAESb = "System.Security.Cryptography.Rijndael";
	private const string nameAESc = "System.Security.Cryptography.SymmetricAlgorithm";
	private const string nameRNGa = "RandomNumberGenerator";
	private const string nameRNGb = "System.Security.Cryptography.RandomNumberGenerator";
	private const string nameKeyHasha = "System.Security.Cryptography.KeyedHashAlgorithm";
	private const string nameHMACSHA1a = "HMACSHA1";
	private const string nameHMACSHA1b = "System.Security.Cryptography.HMACSHA1";
	private const string nameMAC3DESa = "MACTripleDES";
	private const string nameMAC3DESb = "System.Security.Cryptography.MACTripleDES";
	private const string name3DESKeyWrap = "TripleDESKeyWrap";
	private const string nameRIPEMD160a = "RIPEMD160";
	private const string nameRIPEMD160b = "RIPEMD-160";
	private const string nameRIPEMD160c = "System.Security.Cryptography.RIPEMD160";
	private const string nameHMACa = "HMAC";
	private const string nameHMACb = "System.Security.Cryptography.HMAC";
	private const string nameHMACMD5a = "HMACMD5";
	private const string nameHMACMD5b = "System.Security.Cryptography.HMACMD5";
	private const string nameHMACRIPEMD160a = "HMACRIPEMD160";
	private const string nameHMACRIPEMD160b = "System.Security.Cryptography.HMACRIPEMD160";
	private const string nameHMACSHA256a = "HMACSHA256";
	private const string nameHMACSHA256b = "System.Security.Cryptography.HMACSHA256";
	private const string nameHMACSHA384a = "HMACSHA384";
	private const string nameHMACSHA384b = "System.Security.Cryptography.HMACSHA384";
	private const string nameHMACSHA512a = "HMACSHA512";
	private const string nameHMACSHA512b = "System.Security.Cryptography.HMACSHA512";
	private const string urlXmlDsig = "http://www.w3.org/2000/09/xmldsig#";
	private const string urlDSASHA1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1";
	private const string urlRSASHA1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
	private const string urlSHA1 = "http://www.w3.org/2000/09/xmldsig#sha1";
	private const string urlC14N = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
	private const string urlC14NWithComments = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments";
	private const string urlBase64 = "http://www.w3.org/2000/09/xmldsig#base64";
	private const string urlXPath = "http://www.w3.org/TR/1999/REC-xpath-19991116";
	private const string urlXslt = "http://www.w3.org/TR/1999/REC-xslt-19991116";
	private const string urlEnveloped = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
	private const string urlXmlDecryption = "http://www.w3.org/2002/07/decrypt#XML";
	private const string urlExcC14NWithComments = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments";
	private const string urlExcC14N = "http://www.w3.org/2001/10/xml-exc-c14n#";
	private const string urlSHA256 = "http://www.w3.org/2001/04/xmlenc#sha256";
	private const string urlSHA512 = "http://www.w3.org/2001/04/xmlenc#sha512";
	private const string urlHMACSHA256 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256";
	private const string urlHMACSHA384 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha384";
	private const string urlHMACSHA512 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha512";
	private const string urlHMACRIPEMD160 = "http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160";
	private const string urlX509Data = "http://www.w3.org/2000/09/xmldsig# X509Data";
	private const string urlKeyName = "http://www.w3.org/2000/09/xmldsig# KeyName";
	private const string urlKeyValueDSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/DSAKeyValue";
	private const string urlKeyValueRSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/RSAKeyValue";
	private const string urlRetrievalMethod = "http://www.w3.org/2000/09/xmldsig# RetrievalMethod";
	private const string oidX509SubjectKeyIdentifier = "2.5.29.14";
	private const string oidX509KeyUsage = "2.5.29.15";
	private const string oidX509BasicConstraints = "2.5.29.19";
	private const string oidX509EnhancedKeyUsage = "2.5.29.37";
	private const string nameX509SubjectKeyIdentifier = "System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509KeyUsage = "System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509BasicConstraints = "System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509EnhancedKeyUsage = "System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509Chain = "X509Chain";
	private const string defaultX509Chain = "System.Security.Cryptography.X509Certificates.X509Chain, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private static object lockObject; // 0x0
	private static Hashtable algorithms; // 0x8
	private static Hashtable oid; // 0x10

	// Methods

	// RVA: 0x1164094 Offset: 0x1164094 VA: 0x1164094
	public void .ctor() { }

	// RVA: 0x116409C Offset: 0x116409C VA: 0x116409C
	private static void .cctor() { }

	// RVA: 0x1164108 Offset: 0x1164108 VA: 0x1164108
	private static void Initialize() { }

	// RVA: 0x1165D98 Offset: 0x1165D98 VA: 0x1165D98
	private static void LoadConfig(string filename, Hashtable algorithms, Hashtable oid) { }

	// RVA: 0x1163B0C Offset: 0x1163B0C VA: 0x1163B0C
	public static object CreateFromName(string name) { }

	// RVA: 0x11660A8 Offset: 0x11660A8 VA: 0x11660A8
	public static object CreateFromName(string name, object[] args) { }

	// RVA: 0x116639C Offset: 0x116639C VA: 0x116639C
	public static string MapNameToOID(string name) { }

	// RVA: 0x11665A4 Offset: 0x11665A4 VA: 0x11665A4
	public static byte[] EncodeOID(string str) { }

	// RVA: 0x1166ABC Offset: 0x1166ABC VA: 0x1166ABC
	private static byte[] EncodeLongNumber(long x) { }
}

// Namespace: 
private class CryptoConfig.CryptoHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 708
{
	// Fields
	private Hashtable algorithms; // 0x10
	private Hashtable oid; // 0x18
	private Hashtable names; // 0x20
	private Hashtable classnames; // 0x28
	private int level; // 0x30

	// Methods

	// RVA: 0x1166010 Offset: 0x1166010 VA: 0x1166010
	public void .ctor(Hashtable algorithms, Hashtable oid) { }

	// RVA: 0x1166C64 Offset: 0x1166C64 VA: 0x1166C64 Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }

	// RVA: 0x1166C68 Offset: 0x1166C68 VA: 0x1166C68 Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }

	// RVA: 0x1167040 Offset: 0x1167040 VA: 0x1167040
	private string Get(SmallXmlParser.IAttrList attrs, string name) { }

	// RVA: 0x11672D8 Offset: 0x11672D8 VA: 0x11672D8 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x11676E8 Offset: 0x11676E8 VA: 0x11676E8 Slot: 7
	public void OnEndElement(string name) { }

	// RVA: 0x1167884 Offset: 0x1167884 VA: 0x1167884 Slot: 8
	public void OnProcessingInstruction(string name, string text) { }

	// RVA: 0x1167888 Offset: 0x1167888 VA: 0x1167888 Slot: 9
	public void OnChars(string text) { }

	// RVA: 0x116788C Offset: 0x116788C VA: 0x116788C Slot: 10
	public void OnIgnorableWhitespace(string text) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3543C Offset: 0xC3543C VA: 0xC3543C
public class CryptoStream : Stream // TypeDefIndex: 709
{
	// Fields
	private Stream _stream; // 0x10
	private ICryptoTransform _transform; // 0x18
	private CryptoStreamMode _mode; // 0x20
	private byte[] _currentBlock; // 0x28
	private bool _disposed; // 0x30
	private bool _flushedFinalBlock; // 0x31
	private int _partialCount; // 0x34
	private bool _endOfStream; // 0x38
	private byte[] _waitingBlock; // 0x40
	private int _waitingCount; // 0x48
	private byte[] _transformedBlock; // 0x50
	private int _transformedPos; // 0x58
	private int _transformedCount; // 0x5C
	private byte[] _workingBlock; // 0x60
	private int _workingCount; // 0x68

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1167890 Offset: 0x1167890 VA: 0x1167890
	public void .ctor(Stream stream, ICryptoTransform transform, CryptoStreamMode mode) { }

	// RVA: 0x1167BF0 Offset: 0x1167BF0 VA: 0x1167BF0 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1167C70 Offset: 0x1167C70 VA: 0x1167C70 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1167C80 Offset: 0x1167C80 VA: 0x1167C80 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1167C88 Offset: 0x1167C88 VA: 0x1167C88 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1167C98 Offset: 0x1167C98 VA: 0x1167C98 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1167D0C Offset: 0x1167D0C VA: 0x1167D0C Slot: 10
	public override long get_Position() { }

	// RVA: 0x1167D80 Offset: 0x1167D80 VA: 0x1167D80 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1167DF4 Offset: 0x1167DF4 VA: 0x1167DF4
	public void Clear() { }

	// RVA: 0x1167E28 Offset: 0x1167E28 VA: 0x1167E28 Slot: 13
	public override void Close() { }

	// RVA: 0x11680A0 Offset: 0x11680A0 VA: 0x11680A0 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x1168AD0 Offset: 0x1168AD0 VA: 0x1168AD0 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x11693A4 Offset: 0x11693A4 VA: 0x11693A4 Slot: 18
	public override void Flush() { }

	// RVA: 0x1167E7C Offset: 0x1167E7C VA: 0x1167E7C
	public void FlushFinalBlock() { }

	// RVA: 0x11693C0 Offset: 0x11693C0 VA: 0x11693C0 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1169434 Offset: 0x1169434 VA: 0x1169434 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x11694A8 Offset: 0x11694A8 VA: 0x11694A8 Slot: 12
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35450 Offset: 0xC35450 VA: 0xC35450
[Serializable]
public enum CryptoStreamMode // TypeDefIndex: 710
{
	// Fields
	public int value__; // 0x0
	public const CryptoStreamMode Read = 0;
	public const CryptoStreamMode Write = 1;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35464 Offset: 0xC35464 VA: 0xC35464
[Serializable]
public class CryptographicException : SystemException, _Exception // TypeDefIndex: 711
{
	// Methods

	// RVA: 0x1169518 Offset: 0x1169518 VA: 0x1169518
	public void .ctor() { }

	// RVA: 0x116958C Offset: 0x116958C VA: 0x116958C
	public void .ctor(int hr) { }

	// RVA: 0x1163988 Offset: 0x1163988 VA: 0x1163988
	public void .ctor(string message) { }

	// RVA: 0x11695C0 Offset: 0x11695C0 VA: 0x11695C0
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x11695F4 Offset: 0x11695F4 VA: 0x11695F4
	public void .ctor(string format, string insert) { }

	// RVA: 0x1169694 Offset: 0x1169694 VA: 0x1169694
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35478 Offset: 0xC35478 VA: 0xC35478
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 712
{
	// Methods

	// RVA: 0x116969C Offset: 0x116969C VA: 0x116969C
	public void .ctor() { }

	// RVA: 0x1166A70 Offset: 0x1166A70 VA: 0x1166A70
	public void .ctor(string message) { }

	// RVA: 0x1169728 Offset: 0x1169728 VA: 0x1169728
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x1169774 Offset: 0x1169774 VA: 0x1169774
	public void .ctor(string format, string insert) { }

	// RVA: 0x116982C Offset: 0x116982C VA: 0x116982C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3548C Offset: 0xC3548C VA: 0xC3548C
public sealed class CspKeyContainerInfo // TypeDefIndex: 713
{
	// Fields
	private CspParameters _params; // 0x10
	internal bool _random; // 0x18

	// Properties
	public bool Accessible { get; }
	public CryptoKeySecurity CryptoKeySecurity { get; }
	public bool Exportable { get; }
	public bool HardwareDevice { get; }
	public string KeyContainerName { get; }
	public KeyNumber KeyNumber { get; }
	public bool MachineKeyStore { get; }
	public bool Protected { get; }
	public string ProviderName { get; }
	public int ProviderType { get; }
	public bool RandomlyGenerated { get; }
	public bool Removable { get; }
	public string UniqueKeyContainerName { get; }

	// Methods

	// RVA: 0x1169834 Offset: 0x1169834 VA: 0x1169834
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x1169868 Offset: 0x1169868 VA: 0x1169868
	public bool get_Accessible() { }

	// RVA: 0x1169870 Offset: 0x1169870 VA: 0x1169870
	public CryptoKeySecurity get_CryptoKeySecurity() { }

	// RVA: 0x1169878 Offset: 0x1169878 VA: 0x1169878
	public bool get_Exportable() { }

	// RVA: 0x1169880 Offset: 0x1169880 VA: 0x1169880
	public bool get_HardwareDevice() { }

	// RVA: 0x1169888 Offset: 0x1169888 VA: 0x1169888
	public string get_KeyContainerName() { }

	// RVA: 0x11698B4 Offset: 0x11698B4 VA: 0x11698B4
	public KeyNumber get_KeyNumber() { }

	// RVA: 0x11698E0 Offset: 0x11698E0 VA: 0x11698E0
	public bool get_MachineKeyStore() { }

	// RVA: 0x11698E8 Offset: 0x11698E8 VA: 0x11698E8
	public bool get_Protected() { }

	// RVA: 0x11698F0 Offset: 0x11698F0 VA: 0x11698F0
	public string get_ProviderName() { }

	// RVA: 0x116991C Offset: 0x116991C VA: 0x116991C
	public int get_ProviderType() { }

	// RVA: 0x1169948 Offset: 0x1169948 VA: 0x1169948
	public bool get_RandomlyGenerated() { }

	// RVA: 0x1169950 Offset: 0x1169950 VA: 0x1169950
	public bool get_Removable() { }

	// RVA: 0x1169958 Offset: 0x1169958 VA: 0x1169958
	public string get_UniqueKeyContainerName() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC354A0 Offset: 0xC354A0 VA: 0xC354A0
public sealed class CspParameters // TypeDefIndex: 714
{
	// Fields
	private CspProviderFlags _Flags; // 0x10
	public string KeyContainerName; // 0x18
	public int KeyNumber; // 0x20
	public string ProviderName; // 0x28
	public int ProviderType; // 0x30
	private SecureString _password; // 0x38
	private IntPtr _windowHandle; // 0x40

	// Properties
	public CspProviderFlags Flags { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3B304 Offset: 0xC3B304 VA: 0xC3B304
	public CryptoKeySecurity CryptoKeySecurity { get; set; }
	public SecureString KeyPassword { get; set; }
	public IntPtr ParentWindowHandle { get; set; }

	// Methods

	// RVA: 0x11699FC Offset: 0x11699FC VA: 0x11699FC
	public void .ctor() { }

	// RVA: 0x1169A38 Offset: 0x1169A38 VA: 0x1169A38
	public void .ctor(int dwTypeIn) { }

	// RVA: 0x1169A74 Offset: 0x1169A74 VA: 0x1169A74
	public void .ctor(int dwTypeIn, string strProviderNameIn) { }

	// RVA: 0x1169AB0 Offset: 0x1169AB0 VA: 0x1169AB0
	public void .ctor(int dwTypeIn, string strProviderNameIn, string strContainerNameIn) { }

	// RVA: 0x1169AFC Offset: 0x1169AFC VA: 0x1169AFC
	public void .ctor(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle) { }

	// RVA: 0x1169BCC Offset: 0x1169BCC VA: 0x1169BCC
	public void .ctor(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, SecureString keyPassword) { }

	// RVA: 0x1169C34 Offset: 0x1169C34 VA: 0x1169C34
	public CspProviderFlags get_Flags() { }

	// RVA: 0x1169C3C Offset: 0x1169C3C VA: 0x1169C3C
	public void set_Flags(CspProviderFlags value) { }

	// RVA: 0x1169C44 Offset: 0x1169C44 VA: 0x1169C44
	public CryptoKeySecurity get_CryptoKeySecurity() { }

	// RVA: 0x1169B64 Offset: 0x1169B64 VA: 0x1169B64
	public void set_CryptoKeySecurity(CryptoKeySecurity value) { }

	// RVA: 0x1169CAC Offset: 0x1169CAC VA: 0x1169CAC
	public SecureString get_KeyPassword() { }

	// RVA: 0x1169CB4 Offset: 0x1169CB4 VA: 0x1169CB4
	public void set_KeyPassword(SecureString value) { }

	// RVA: 0x1169CBC Offset: 0x1169CBC VA: 0x1169CBC
	public IntPtr get_ParentWindowHandle() { }

	// RVA: 0x1169CC4 Offset: 0x1169CC4 VA: 0x1169CC4
	public void set_ParentWindowHandle(IntPtr value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC354B4 Offset: 0xC354B4 VA: 0xC354B4
[FlagsAttribute] // RVA: 0xC354B4 Offset: 0xC354B4 VA: 0xC354B4
[Serializable]
public enum CspProviderFlags // TypeDefIndex: 715
{
	// Fields
	public int value__; // 0x0
	public const CspProviderFlags UseMachineKeyStore = 1;
	public const CspProviderFlags UseDefaultKeyContainer = 2;
	public const CspProviderFlags UseExistingKey = 8;
	public const CspProviderFlags NoFlags = 0;
	public const CspProviderFlags NoPrompt = 64;
	public const CspProviderFlags UseArchivableKey = 16;
	public const CspProviderFlags UseNonExportableKey = 4;
	public const CspProviderFlags UseUserProtectedKey = 32;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC354F0 Offset: 0xC354F0 VA: 0xC354F0
public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 716
{
	// Fields
	private const int keySizeByte = 8;
	internal static readonly byte[,] weakKeys; // 0x0
	internal static readonly byte[,] semiWeakKeys; // 0x8

	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x1169CCC Offset: 0x1169CCC VA: 0x1169CCC
	protected void .ctor() { }

	// RVA: 0x1169E64 Offset: 0x1169E64 VA: 0x1169E64
	private static void .cctor() { }

	// RVA: 0x1169F48 Offset: 0x1169F48 VA: 0x1169F48
	public static DES Create() { }

	// RVA: 0x1169FB0 Offset: 0x1169FB0 VA: 0x1169FB0
	public static DES Create(string algName) { }

	// RVA: 0x116A0A0 Offset: 0x116A0A0 VA: 0x116A0A0
	public static bool IsWeakKey(byte[] rgbKey) { }

	// RVA: 0x116A31C Offset: 0x116A31C VA: 0x116A31C
	public static bool IsSemiWeakKey(byte[] rgbKey) { }

	// RVA: 0x116A598 Offset: 0x116A598 VA: 0x116A598 Slot: 12
	public override byte[] get_Key() { }

	// RVA: 0x116A68C Offset: 0x116A68C VA: 0x116A68C Slot: 13
	public override void set_Key(byte[] value) { }
}

// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform // TypeDefIndex: 717
{
	// Fields
	internal static readonly int KEY_BIT_SIZE; // 0x0
	internal static readonly int KEY_BYTE_SIZE; // 0x4
	internal static readonly int BLOCK_BIT_SIZE; // 0x8
	internal static readonly int BLOCK_BYTE_SIZE; // 0xC
	private byte[] keySchedule; // 0x58
	private byte[] byteBuff; // 0x60
	private uint[] dwordBuff; // 0x68
	private static readonly uint[] spBoxes; // 0x10
	private static readonly byte[] PC1; // 0x18
	private static readonly byte[] leftRotTotal; // 0x20
	private static readonly byte[] PC2; // 0x28
	internal static readonly uint[] ipTab; // 0x30
	internal static readonly uint[] fpTab; // 0x38

	// Methods

	// RVA: 0x116A974 Offset: 0x116A974 VA: 0x116A974
	internal void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x116B38C Offset: 0x116B38C VA: 0x116B38C
	private static void .cctor() { }

	// RVA: 0x116B560 Offset: 0x116B560 VA: 0x116B560
	private uint CipherFunct(uint r, int n) { }

	// RVA: 0x116B9C8 Offset: 0x116B9C8 VA: 0x116B9C8
	internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap) { }

	// RVA: 0x116BF78 Offset: 0x116BF78 VA: 0x116BF78
	private static void BSwap(byte[] byteBuff) { }

	// RVA: 0x116AE28 Offset: 0x116AE28 VA: 0x116AE28
	internal void SetKey(byte[] key) { }

	// RVA: 0x116C19C Offset: 0x116C19C VA: 0x116C19C
	public void ProcessBlock(byte[] input, byte[] output) { }

	// RVA: 0x116C5C0 Offset: 0x116C5C0 VA: 0x116C5C0 Slot: 17
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x116AD54 Offset: 0x116AD54 VA: 0x116AD54
	internal static byte[] GetStrongKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35504 Offset: 0xC35504 VA: 0xC35504
public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 718
{
	// Methods

	// RVA: 0x116A894 Offset: 0x116A894 VA: 0x116A894
	public void .ctor() { }

	// RVA: 0x116A8F8 Offset: 0x116A8F8 VA: 0x116A8F8 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x116ABF8 Offset: 0x116ABF8 VA: 0x116ABF8 Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x116AC74 Offset: 0x116AC74 VA: 0x116AC74 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x116ACEC Offset: 0x116ACEC VA: 0x116ACEC Slot: 27
	public override void GenerateKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35518 Offset: 0xC35518 VA: 0xC35518
public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 719
{
	// Methods

	// RVA: 0x116C674 Offset: 0x116C674 VA: 0x116C674
	protected void .ctor() { }

	// RVA: 0x116C67C Offset: 0x116C67C VA: 0x116C67C
	public static DSA Create() { }

	// RVA: 0x116C6C4 Offset: 0x116C6C4 VA: 0x116C6C4
	public static DSA Create(string algName) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract byte[] CreateSignature(byte[] rgbHash);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract DSAParameters ExportParameters(bool includePrivateParameters);

	// RVA: 0x116C7B4 Offset: 0x116C7B4 VA: 0x116C7B4
	internal void ZeroizePrivateKey(DSAParameters parameters) { }

	// RVA: 0x116C7D0 Offset: 0x116C7D0 VA: 0x116C7D0 Slot: 11
	public override void FromXmlString(string xmlString) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void ImportParameters(DSAParameters parameters);

	// RVA: 0x116CB44 Offset: 0x116CB44 VA: 0x116CB44 Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3552C Offset: 0xC3552C VA: 0xC3552C
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 720
{
	// Fields
	private const int PROV_DSS_DH = 13;
	private KeyPairPersistence store; // 0x20
	private bool persistKey; // 0x28
	private bool persisted; // 0x29
	private bool privateKeyExportable; // 0x2A
	private bool m_disposed; // 0x2B
	private DSAManaged dsa; // 0x30
	private static bool useMachineKeyStore; // 0x0

	// Properties
	public override string KeyExchangeAlgorithm { get; }
	public override int KeySize { get; }
	public bool PersistKeyInCsp { get; set; }
	[ComVisibleAttribute] // RVA: 0xC3B33C Offset: 0xC3B33C VA: 0xC3B33C
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }
	public static bool UseMachineKeyStore { get; set; }
	[MonoTODOAttribute] // RVA: 0xC3B350 Offset: 0xC3B350 VA: 0xC3B350
	[ComVisibleAttribute] // RVA: 0xC3B350 Offset: 0xC3B350 VA: 0xC3B350
	public CspKeyContainerInfo CspKeyContainerInfo { get; }

	// Methods

	// RVA: 0x116D314 Offset: 0x116D314 VA: 0x116D314
	public void .ctor() { }

	// RVA: 0x116D60C Offset: 0x116D60C VA: 0x116D60C
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x116D61C Offset: 0x116D61C VA: 0x116D61C
	public void .ctor(int dwKeySize) { }

	// RVA: 0x116D320 Offset: 0x116D320 VA: 0x116D320
	public void .ctor(int dwKeySize, CspParameters parameters) { }

	// RVA: 0x116D624 Offset: 0x116D624 VA: 0x116D624
	private static void .cctor() { }

	// RVA: 0x116D628 Offset: 0x116D628 VA: 0x116D628 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x116D710 Offset: 0x116D710 VA: 0x116D710 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x116D718 Offset: 0x116D718 VA: 0x116D718 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x116D74C Offset: 0x116D74C VA: 0x116D74C
	public bool get_PersistKeyInCsp() { }

	// RVA: 0x116D754 Offset: 0x116D754 VA: 0x116D754
	public void set_PersistKeyInCsp(bool value) { }

	// RVA: 0x116D760 Offset: 0x116D760 VA: 0x116D760
	public bool get_PublicOnly() { }

	// RVA: 0x116D790 Offset: 0x116D790 VA: 0x116D790 Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x116D7D8 Offset: 0x116D7D8 VA: 0x116D7D8
	public static bool get_UseMachineKeyStore() { }

	// RVA: 0x116D840 Offset: 0x116D840 VA: 0x116D840
	public static void set_UseMachineKeyStore(bool value) { }

	// RVA: 0x116D8B0 Offset: 0x116D8B0 VA: 0x116D8B0 Slot: 14
	public override DSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x116D988 Offset: 0x116D988 VA: 0x116D988 Slot: 15
	public override void ImportParameters(DSAParameters parameters) { }

	// RVA: 0x116DA00 Offset: 0x116DA00 VA: 0x116DA00 Slot: 13
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x116DA3C Offset: 0x116DA3C VA: 0x116DA3C
	public byte[] SignData(byte[] buffer) { }

	// RVA: 0x116DAAC Offset: 0x116DAAC VA: 0x116DAAC
	public byte[] SignData(byte[] buffer, int offset, int count) { }

	// RVA: 0x116DB34 Offset: 0x116DB34 VA: 0x116DB34
	public byte[] SignData(Stream inputStream) { }

	// RVA: 0x116DBA4 Offset: 0x116DBA4 VA: 0x116DBA4
	public byte[] SignHash(byte[] rgbHash, string str) { }

	// RVA: 0x116DCDC Offset: 0x116DCDC VA: 0x116DCDC
	public bool VerifyData(byte[] rgbData, byte[] rgbSignature) { }

	// RVA: 0x116DD58 Offset: 0x116DD58 VA: 0x116DD58
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature) { }

	// RVA: 0x116DEB0 Offset: 0x116DEB0 VA: 0x116DEB0 Slot: 16
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x116D6A0 Offset: 0x116D6A0 VA: 0x116D6A0 Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x116DF00 Offset: 0x116DF00 VA: 0x116DF00
	private void OnKeyGenerated(object sender, EventArgs e) { }

	// RVA: 0x116DFB0 Offset: 0x116DFB0 VA: 0x116DFB0 Slot: 19
	public CspKeyContainerInfo get_CspKeyContainerInfo() { }

	[ComVisibleAttribute] // RVA: 0xC39790 Offset: 0xC39790 VA: 0xC39790
	// RVA: 0x116DFB8 Offset: 0x116DFB8 VA: 0x116DFB8 Slot: 17
	public byte[] ExportCspBlob(bool includePrivateParameters) { }

	[ComVisibleAttribute] // RVA: 0xC397A4 Offset: 0xC397A4 VA: 0xC397A4
	// RVA: 0x116DFCC Offset: 0x116DFCC VA: 0x116DFCC Slot: 18
	public void ImportCspBlob(byte[] keyBlob) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35540 Offset: 0xC35540 VA: 0xC35540
[Serializable]
public struct DSAParameters // TypeDefIndex: 721
{
	// Fields
	public int Counter; // 0x0
	public byte[] G; // 0x8
	public byte[] J; // 0x10
	public byte[] P; // 0x18
	public byte[] Q; // 0x20
	public byte[] Seed; // 0x28
	public byte[] X; // 0x30
	public byte[] Y; // 0x38
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35554 Offset: 0xC35554 VA: 0xC35554
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 722
{
	// Fields
	private DSA dsa; // 0x10

	// Methods

	// RVA: 0x116E1C8 Offset: 0x116E1C8 VA: 0x116E1C8
	public void .ctor() { }

	// RVA: 0x116E1D0 Offset: 0x116E1D0 VA: 0x116E1D0
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x116E208 Offset: 0x116E208 VA: 0x116E208 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x116E350 Offset: 0x116E350 VA: 0x116E350 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }

	// RVA: 0x116E464 Offset: 0x116E464 VA: 0x116E464 Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35568 Offset: 0xC35568 VA: 0xC35568
public class DSASignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 723
{
	// Fields
	private DSA dsa; // 0x10

	// Methods

	// RVA: 0x116E5CC Offset: 0x116E5CC VA: 0x116E5CC
	public void .ctor() { }

	// RVA: 0x116E5D4 Offset: 0x116E5D4 VA: 0x116E5D4
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x116E60C Offset: 0x116E60C VA: 0x116E60C Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x116E6C0 Offset: 0x116E6C0 VA: 0x116E6C0 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x116E808 Offset: 0x116E808 VA: 0x116E808 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC3557C Offset: 0xC3557C VA: 0xC3557C
public abstract class DeriveBytes // TypeDefIndex: 724
{
	// Methods

	// RVA: 0x116E91C Offset: 0x116E91C VA: 0x116E91C
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] GetBytes(int cb);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void Reset();
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35590 Offset: 0xC35590 VA: 0xC35590
[Serializable]
public enum FromBase64TransformMode // TypeDefIndex: 725
{
	// Fields
	public int value__; // 0x0
	public const FromBase64TransformMode IgnoreWhiteSpaces = 0;
	public const FromBase64TransformMode DoNotIgnoreWhiteSpaces = 1;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC355A4 Offset: 0xC355A4 VA: 0xC355A4
public class FromBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 726
{
	// Fields
	private const byte TerminatorByte = 61;
	private FromBase64TransformMode mode; // 0x10
	private byte[] accumulator; // 0x18
	private int accPtr; // 0x20
	private bool m_disposed; // 0x24
	private byte[] lookupTable; // 0x28

	// Properties
	public bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x116E924 Offset: 0x116E924 VA: 0x116E924
	public void .ctor() { }

	// RVA: 0x116E92C Offset: 0x116E92C VA: 0x116E92C
	public void .ctor(FromBase64TransformMode whitespaces) { }

	// RVA: 0x116E9A8 Offset: 0x116E9A8 VA: 0x116E9A8 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x116E9DC Offset: 0x116E9DC VA: 0x116E9DC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x116EA5C Offset: 0x116EA5C VA: 0x116EA5C Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x116EA64 Offset: 0x116EA64 VA: 0x116EA64 Slot: 11
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x116EA6C Offset: 0x116EA6C VA: 0x116EA6C Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0x116EA74 Offset: 0x116EA74 VA: 0x116EA74 Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0x116EA7C Offset: 0x116EA7C VA: 0x116EA7C
	public void Clear() { }

	// RVA: 0x116EA8C Offset: 0x116EA8C VA: 0x116EA8C Slot: 12
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x116EADC Offset: 0x116EADC VA: 0x116EADC
	private byte lookup(byte input) { }

	// RVA: 0x116EBE0 Offset: 0x116EBE0 VA: 0x116EBE0
	private int ProcessBlock(byte[] output, int offset) { }

	// RVA: 0x116F064 Offset: 0x116F064 VA: 0x116F064
	private void CheckInputParameters(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x116F254 Offset: 0x116F254 VA: 0x116F254 Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x116F468 Offset: 0x116F468 VA: 0x116F468 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC355B8 Offset: 0xC355B8 VA: 0xC355B8
public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 727
{
	// Fields
	private bool _disposed; // 0x30
	private string _hashName; // 0x38
	private HashAlgorithm _algo; // 0x40
	private BlockProcessor _block; // 0x48
	private int _blockSizeValue; // 0x50

	// Properties
	protected int BlockSizeValue { get; set; }
	public string HashName { get; set; }
	public override byte[] Key { get; set; }
	internal BlockProcessor Block { get; }

	// Methods

	// RVA: 0xE37E40 Offset: 0xE37E40 VA: 0xE37E40
	protected void .ctor() { }

	// RVA: 0xE37E9C Offset: 0xE37E9C VA: 0xE37E9C
	protected int get_BlockSizeValue() { }

	// RVA: 0xE37EA4 Offset: 0xE37EA4 VA: 0xE37EA4
	protected void set_BlockSizeValue(int value) { }

	// RVA: 0xE37EAC Offset: 0xE37EAC VA: 0xE37EAC
	public string get_HashName() { }

	// RVA: 0xE37EB4 Offset: 0xE37EB4 VA: 0xE37EB4
	public void set_HashName(string value) { }

	// RVA: 0xE37FD4 Offset: 0xE37FD4 VA: 0xE37FD4 Slot: 21
	public override byte[] get_Key() { }

	// RVA: 0xE38188 Offset: 0xE38188 VA: 0xE38188 Slot: 22
	public override void set_Key(byte[] value) { }

	// RVA: 0xE384A4 Offset: 0xE384A4 VA: 0xE384A4
	internal BlockProcessor get_Block() { }

	// RVA: 0xE38528 Offset: 0xE38528 VA: 0xE38528
	private byte[] KeySetup(byte[] key, byte padding) { }

	// RVA: 0xE38688 Offset: 0xE38688 VA: 0xE38688 Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0xE38708 Offset: 0xE38708 VA: 0xE38708 Slot: 14
	protected override void HashCore(byte[] rgb, int ib, int cb) { }

	// RVA: 0xE387FC Offset: 0xE387FC VA: 0xE387FC Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0xE38E0C Offset: 0xE38E0C VA: 0xE38E0C Slot: 17
	public override void Initialize() { }

	// RVA: 0xE38F50 Offset: 0xE38F50 VA: 0xE38F50
	public static HMAC Create() { }

	// RVA: 0xE38F98 Offset: 0xE38F98 VA: 0xE38F98
	public static HMAC Create(string algorithmName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC355CC Offset: 0xC355CC VA: 0xC355CC
public class HMACMD5 : HMAC // TypeDefIndex: 728
{
	// Methods

	// RVA: 0xE3908C Offset: 0xE3908C VA: 0xE3908C
	public void .ctor() { }

	// RVA: 0xE390BC Offset: 0xE390BC VA: 0xE390BC
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC355E0 Offset: 0xC355E0 VA: 0xC355E0
public class HMACRIPEMD160 : HMAC // TypeDefIndex: 729
{
	// Methods

	// RVA: 0xE39158 Offset: 0xE39158 VA: 0xE39158
	public void .ctor() { }

	// RVA: 0xE39188 Offset: 0xE39188 VA: 0xE39188
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC355F4 Offset: 0xC355F4 VA: 0xC355F4
public class HMACSHA1 : HMAC // TypeDefIndex: 730
{
	// Methods

	// RVA: 0xE39224 Offset: 0xE39224 VA: 0xE39224
	public void .ctor() { }

	// RVA: 0xE39254 Offset: 0xE39254 VA: 0xE39254
	public void .ctor(byte[] key) { }

	// RVA: 0xE392F0 Offset: 0xE392F0 VA: 0xE392F0
	public void .ctor(byte[] key, bool useManagedSha1) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xC35608 Offset: 0xC35608 VA: 0xC35608
public class HMACSHA256 : HMAC // TypeDefIndex: 731
{
	// Methods

	// RVA: 0xE393DC Offset: 0xE393DC VA: 0xE393DC
	public void .ctor() { }

	// RVA: 0xE3940C Offset: 0xE3940C VA: 0xE3940C
	public void .ctor(byte[] key) { }
}
