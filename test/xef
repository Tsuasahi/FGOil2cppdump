	private const string defaultHMACMD5 = "System.Security.Cryptography.HMACMD5";
	private const string defaultHMACRIPEMD160 = "System.Security.Cryptography.HMACRIPEMD160";
	private const string defaultHMACSHA256 = "System.Security.Cryptography.HMACSHA256";
	private const string defaultHMACSHA384 = "System.Security.Cryptography.HMACSHA384";
	private const string defaultHMACSHA512 = "System.Security.Cryptography.HMACSHA512";
	private const string defaultC14N = "System.Security.Cryptography.Xml.XmlDsigC14NTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultC14NWithComments = "System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultBase64 = "System.Security.Cryptography.Xml.XmlDsigBase64Transform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultXPath = "System.Security.Cryptography.Xml.XmlDsigXPathTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultXslt = "System.Security.Cryptography.Xml.XmlDsigXsltTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultEnveloped = "System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultXmlDecryption = "System.Security.Cryptography.Xml.XmlDecryptionTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultExcC14N = "System.Security.Cryptography.Xml.XmlDsigExcC14NTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultExcC14NWithComments = "System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultX509Data = "System.Security.Cryptography.Xml.KeyInfoX509Data, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultKeyName = "System.Security.Cryptography.Xml.KeyInfoName, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultKeyValueDSA = "System.Security.Cryptography.Xml.DSAKeyValue, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultKeyValueRSA = "System.Security.Cryptography.Xml.RSAKeyValue, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string defaultRetrievalMethod = "System.Security.Cryptography.Xml.KeyInfoRetrievalMethod, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	private const string managedSHA1 = "System.Security.Cryptography.SHA1Managed";
	private const string oidSHA1 = "1.3.14.3.2.26";
	private const string oidMD5 = "1.2.840.113549.2.5";
	private const string oidSHA256 = "2.16.840.1.101.3.4.2.1";
	private const string oidSHA384 = "2.16.840.1.101.3.4.2.2";
	private const string oidSHA512 = "2.16.840.1.101.3.4.2.3";
	private const string oidDSA = "1.2.840.10040.4.1";
	private const string oidDES = "1.3.14.3.2.7";
	private const string oid3DES = "1.2.840.113549.3.7";
	private const string oidRC2 = "1.2.840.113549.3.2";
	private const string oid3DESKeyWrap = "1.2.840.113549.1.9.16.3.6";
	private const string nameSHA1a = "SHA";
	private const string nameSHA1b = "SHA1";
	private const string nameSHA1c = "System.Security.Cryptography.SHA1";
	private const string nameSHA1d = "System.Security.Cryptography.HashAlgorithm";
	private const string nameMD5a = "MD5";
	private const string nameMD5b = "System.Security.Cryptography.MD5";
	private const string nameSHA256a = "SHA256";
	private const string nameSHA256b = "SHA-256";
	private const string nameSHA256c = "System.Security.Cryptography.SHA256";
	private const string nameSHA384a = "SHA384";
	private const string nameSHA384b = "SHA-384";
	private const string nameSHA384c = "System.Security.Cryptography.SHA384";
	private const string nameSHA512a = "SHA512";
	private const string nameSHA512b = "SHA-512";
	private const string nameSHA512c = "System.Security.Cryptography.SHA512";
	private const string nameRSAa = "RSA";
	private const string nameRSAb = "System.Security.Cryptography.RSA";
	private const string nameRSAc = "System.Security.Cryptography.AsymmetricAlgorithm";
	private const string nameDSAa = "DSA";
	private const string nameDSAb = "System.Security.Cryptography.DSA";
	private const string nameDESa = "DES";
	private const string nameDESb = "System.Security.Cryptography.DES";
	private const string name3DESa = "3DES";
	private const string name3DESb = "TripleDES";
	private const string name3DESc = "Triple DES";
	private const string name3DESd = "System.Security.Cryptography.TripleDES";
	private const string nameRC2a = "RC2";
	private const string nameRC2b = "System.Security.Cryptography.RC2";
	private const string nameAESa = "Rijndael";
	private const string nameAESb = "System.Security.Cryptography.Rijndael";
	private const string nameAESc = "System.Security.Cryptography.SymmetricAlgorithm";
	private const string nameRNGa = "RandomNumberGenerator";
	private const string nameRNGb = "System.Security.Cryptography.RandomNumberGenerator";
	private const string nameKeyHasha = "System.Security.Cryptography.KeyedHashAlgorithm";
	private const string nameHMACSHA1a = "HMACSHA1";
	private const string nameHMACSHA1b = "System.Security.Cryptography.HMACSHA1";
	private const string nameMAC3DESa = "MACTripleDES";
	private const string nameMAC3DESb = "System.Security.Cryptography.MACTripleDES";
	private const string name3DESKeyWrap = "TripleDESKeyWrap";
	private const string nameRIPEMD160a = "RIPEMD160";
	private const string nameRIPEMD160b = "RIPEMD-160";
	private const string nameRIPEMD160c = "System.Security.Cryptography.RIPEMD160";
	private const string nameHMACa = "HMAC";
	private const string nameHMACb = "System.Security.Cryptography.HMAC";
	private const string nameHMACMD5a = "HMACMD5";
	private const string nameHMACMD5b = "System.Security.Cryptography.HMACMD5";
	private const string nameHMACRIPEMD160a = "HMACRIPEMD160";
	private const string nameHMACRIPEMD160b = "System.Security.Cryptography.HMACRIPEMD160";
	private const string nameHMACSHA256a = "HMACSHA256";
	private const string nameHMACSHA256b = "System.Security.Cryptography.HMACSHA256";
	private const string nameHMACSHA384a = "HMACSHA384";
	private const string nameHMACSHA384b = "System.Security.Cryptography.HMACSHA384";
	private const string nameHMACSHA512a = "HMACSHA512";
	private const string nameHMACSHA512b = "System.Security.Cryptography.HMACSHA512";
	private const string urlXmlDsig = "http://www.w3.org/2000/09/xmldsig#";
	private const string urlDSASHA1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1";
	private const string urlRSASHA1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
	private const string urlSHA1 = "http://www.w3.org/2000/09/xmldsig#sha1";
	private const string urlC14N = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
	private const string urlC14NWithComments = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments";
	private const string urlBase64 = "http://www.w3.org/2000/09/xmldsig#base64";
	private const string urlXPath = "http://www.w3.org/TR/1999/REC-xpath-19991116";
	private const string urlXslt = "http://www.w3.org/TR/1999/REC-xslt-19991116";
	private const string urlEnveloped = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
	private const string urlXmlDecryption = "http://www.w3.org/2002/07/decrypt#XML";
	private const string urlExcC14NWithComments = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments";
	private const string urlExcC14N = "http://www.w3.org/2001/10/xml-exc-c14n#";
	private const string urlSHA256 = "http://www.w3.org/2001/04/xmlenc#sha256";
	private const string urlSHA512 = "http://www.w3.org/2001/04/xmlenc#sha512";
	private const string urlHMACSHA256 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256";
	private const string urlHMACSHA384 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha384";
	private const string urlHMACSHA512 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha512";
	private const string urlHMACRIPEMD160 = "http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160";
	private const string urlX509Data = "http://www.w3.org/2000/09/xmldsig# X509Data";
	private const string urlKeyName = "http://www.w3.org/2000/09/xmldsig# KeyName";
	private const string urlKeyValueDSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/DSAKeyValue";
	private const string urlKeyValueRSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/RSAKeyValue";
	private const string urlRetrievalMethod = "http://www.w3.org/2000/09/xmldsig# RetrievalMethod";
	private const string oidX509SubjectKeyIdentifier = "2.5.29.14";
	private const string oidX509KeyUsage = "2.5.29.15";
	private const string oidX509BasicConstraints = "2.5.29.19";
	private const string oidX509EnhancedKeyUsage = "2.5.29.37";
	private const string nameX509SubjectKeyIdentifier = "System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509KeyUsage = "System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509BasicConstraints = "System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509EnhancedKeyUsage = "System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private const string nameX509Chain = "X509Chain";
	private const string defaultX509Chain = "System.Security.Cryptography.X509Certificates.X509Chain, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	private static object lockObject; // 0x0
	private static Hashtable algorithms; // 0x8
	private static Hashtable oid; // 0x10

	// Methods

	// RVA: 0x23993EC Offset: 0x23993EC VA: 0x23993EC
	public void .ctor() { }

	// RVA: 0x23993F4 Offset: 0x23993F4 VA: 0x23993F4
	private static void .cctor() { }

	// RVA: 0x2399460 Offset: 0x2399460 VA: 0x2399460
	private static void Initialize() { }

	// RVA: 0x239B0F0 Offset: 0x239B0F0 VA: 0x239B0F0
	private static void LoadConfig(string filename, Hashtable algorithms, Hashtable oid) { }

	// RVA: 0x2398E64 Offset: 0x2398E64 VA: 0x2398E64
	public static object CreateFromName(string name) { }

	// RVA: 0x239B400 Offset: 0x239B400 VA: 0x239B400
	public static object CreateFromName(string name, object[] args) { }

	// RVA: 0x239B6F4 Offset: 0x239B6F4 VA: 0x239B6F4
	public static string MapNameToOID(string name) { }

	// RVA: 0x239B8FC Offset: 0x239B8FC VA: 0x239B8FC
	public static byte[] EncodeOID(string str) { }

	// RVA: 0x239BE14 Offset: 0x239BE14 VA: 0x239BE14
	private static byte[] EncodeLongNumber(long x) { }
}

// Namespace: 
private class CryptoConfig.CryptoHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 708
{
	// Fields
	private Hashtable algorithms; // 0x10
	private Hashtable oid; // 0x18
	private Hashtable names; // 0x20
	private Hashtable classnames; // 0x28
	private int level; // 0x30

	// Methods

	// RVA: 0x239B368 Offset: 0x239B368 VA: 0x239B368
	public void .ctor(Hashtable algorithms, Hashtable oid) { }

	// RVA: 0x239BFBC Offset: 0x239BFBC VA: 0x239BFBC Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }

	// RVA: 0x239BFC0 Offset: 0x239BFC0 VA: 0x239BFC0 Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }

	// RVA: 0x239C398 Offset: 0x239C398 VA: 0x239C398
	private string Get(SmallXmlParser.IAttrList attrs, string name) { }

	// RVA: 0x239C630 Offset: 0x239C630 VA: 0x239C630 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }

	// RVA: 0x239CA40 Offset: 0x239CA40 VA: 0x239CA40 Slot: 7
	public void OnEndElement(string name) { }

	// RVA: 0x239CBDC Offset: 0x239CBDC VA: 0x239CBDC Slot: 8
	public void OnProcessingInstruction(string name, string text) { }

	// RVA: 0x239CBE0 Offset: 0x239CBE0 VA: 0x239CBE0 Slot: 9
	public void OnChars(string text) { }

	// RVA: 0x239CBE4 Offset: 0x239CBE4 VA: 0x239CBE4 Slot: 10
	public void OnIgnorableWhitespace(string text) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9314 Offset: 0xBC9314 VA: 0xBC9314
public class CryptoStream : Stream // TypeDefIndex: 709
{
	// Fields
	private Stream _stream; // 0x10
	private ICryptoTransform _transform; // 0x18
	private CryptoStreamMode _mode; // 0x20
	private byte[] _currentBlock; // 0x28
	private bool _disposed; // 0x30
	private bool _flushedFinalBlock; // 0x31
	private int _partialCount; // 0x34
	private bool _endOfStream; // 0x38
	private byte[] _waitingBlock; // 0x40
	private int _waitingCount; // 0x48
	private byte[] _transformedBlock; // 0x50
	private int _transformedPos; // 0x58
	private int _transformedCount; // 0x5C
	private byte[] _workingBlock; // 0x60
	private int _workingCount; // 0x68

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x239CBE8 Offset: 0x239CBE8 VA: 0x239CBE8
	public void .ctor(Stream stream, ICryptoTransform transform, CryptoStreamMode mode) { }

	// RVA: 0x239CF48 Offset: 0x239CF48 VA: 0x239CF48 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x239CFC8 Offset: 0x239CFC8 VA: 0x239CFC8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x239CFD8 Offset: 0x239CFD8 VA: 0x239CFD8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x239CFE0 Offset: 0x239CFE0 VA: 0x239CFE0 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x239CFF0 Offset: 0x239CFF0 VA: 0x239CFF0 Slot: 9
	public override long get_Length() { }

	// RVA: 0x239D064 Offset: 0x239D064 VA: 0x239D064 Slot: 10
	public override long get_Position() { }

	// RVA: 0x239D0D8 Offset: 0x239D0D8 VA: 0x239D0D8 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x239D14C Offset: 0x239D14C VA: 0x239D14C
	public void Clear() { }

	// RVA: 0x239D180 Offset: 0x239D180 VA: 0x239D180 Slot: 13
	public override void Close() { }

	// RVA: 0x239D3F8 Offset: 0x239D3F8 VA: 0x239D3F8 Slot: 19
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }

	// RVA: 0x239DE28 Offset: 0x239DE28 VA: 0x239DE28 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x239E6FC Offset: 0x239E6FC VA: 0x239E6FC Slot: 18
	public override void Flush() { }

	// RVA: 0x239D1D4 Offset: 0x239D1D4 VA: 0x239D1D4
	public void FlushFinalBlock() { }

	// RVA: 0x239E718 Offset: 0x239E718 VA: 0x239E718 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x239E78C Offset: 0x239E78C VA: 0x239E78C Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x239E800 Offset: 0x239E800 VA: 0x239E800 Slot: 12
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9328 Offset: 0xBC9328 VA: 0xBC9328
[Serializable]
public enum CryptoStreamMode // TypeDefIndex: 710
{
	// Fields
	public int value__; // 0x0
	public const CryptoStreamMode Read = 0;
	public const CryptoStreamMode Write = 1;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC933C Offset: 0xBC933C VA: 0xBC933C
[Serializable]
public class CryptographicException : SystemException, _Exception // TypeDefIndex: 711
{
	// Methods

	// RVA: 0x239E870 Offset: 0x239E870 VA: 0x239E870
	public void .ctor() { }

	// RVA: 0x239E8E4 Offset: 0x239E8E4 VA: 0x239E8E4
	public void .ctor(int hr) { }

	// RVA: 0x2398CE0 Offset: 0x2398CE0 VA: 0x2398CE0
	public void .ctor(string message) { }

	// RVA: 0x239E918 Offset: 0x239E918 VA: 0x239E918
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x239E94C Offset: 0x239E94C VA: 0x239E94C
	public void .ctor(string format, string insert) { }

	// RVA: 0x239E9EC Offset: 0x239E9EC VA: 0x239E9EC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9350 Offset: 0xBC9350 VA: 0xBC9350
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 712
{
	// Methods

	// RVA: 0x239E9F4 Offset: 0x239E9F4 VA: 0x239E9F4
	public void .ctor() { }

	// RVA: 0x239BDC8 Offset: 0x239BDC8 VA: 0x239BDC8
	public void .ctor(string message) { }

	// RVA: 0x239EA80 Offset: 0x239EA80 VA: 0x239EA80
	public void .ctor(string message, Exception inner) { }

	// RVA: 0x239EACC Offset: 0x239EACC VA: 0x239EACC
	public void .ctor(string format, string insert) { }

	// RVA: 0x239EB84 Offset: 0x239EB84 VA: 0x239EB84
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9364 Offset: 0xBC9364 VA: 0xBC9364
public sealed class CspKeyContainerInfo // TypeDefIndex: 713
{
	// Fields
	private CspParameters _params; // 0x10
	internal bool _random; // 0x18

	// Properties
	public bool Accessible { get; }
	public CryptoKeySecurity CryptoKeySecurity { get; }
	public bool Exportable { get; }
	public bool HardwareDevice { get; }
	public string KeyContainerName { get; }
	public KeyNumber KeyNumber { get; }
	public bool MachineKeyStore { get; }
	public bool Protected { get; }
	public string ProviderName { get; }
	public int ProviderType { get; }
	public bool RandomlyGenerated { get; }
	public bool Removable { get; }
	public string UniqueKeyContainerName { get; }

	// Methods

	// RVA: 0x239EB8C Offset: 0x239EB8C VA: 0x239EB8C
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x239EBC0 Offset: 0x239EBC0 VA: 0x239EBC0
	public bool get_Accessible() { }

	// RVA: 0x239EBC8 Offset: 0x239EBC8 VA: 0x239EBC8
	public CryptoKeySecurity get_CryptoKeySecurity() { }

	// RVA: 0x239EBD0 Offset: 0x239EBD0 VA: 0x239EBD0
	public bool get_Exportable() { }

	// RVA: 0x239EBD8 Offset: 0x239EBD8 VA: 0x239EBD8
	public bool get_HardwareDevice() { }

	// RVA: 0x239EBE0 Offset: 0x239EBE0 VA: 0x239EBE0
	public string get_KeyContainerName() { }

	// RVA: 0x239EC0C Offset: 0x239EC0C VA: 0x239EC0C
	public KeyNumber get_KeyNumber() { }

	// RVA: 0x239EC38 Offset: 0x239EC38 VA: 0x239EC38
	public bool get_MachineKeyStore() { }

	// RVA: 0x239EC40 Offset: 0x239EC40 VA: 0x239EC40
	public bool get_Protected() { }

	// RVA: 0x239EC48 Offset: 0x239EC48 VA: 0x239EC48
	public string get_ProviderName() { }

	// RVA: 0x239EC74 Offset: 0x239EC74 VA: 0x239EC74
	public int get_ProviderType() { }

	// RVA: 0x239ECA0 Offset: 0x239ECA0 VA: 0x239ECA0
	public bool get_RandomlyGenerated() { }

	// RVA: 0x239ECA8 Offset: 0x239ECA8 VA: 0x239ECA8
	public bool get_Removable() { }

	// RVA: 0x239ECB0 Offset: 0x239ECB0 VA: 0x239ECB0
	public string get_UniqueKeyContainerName() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9378 Offset: 0xBC9378 VA: 0xBC9378
public sealed class CspParameters // TypeDefIndex: 714
{
	// Fields
	private CspProviderFlags _Flags; // 0x10
	public string KeyContainerName; // 0x18
	public int KeyNumber; // 0x20
	public string ProviderName; // 0x28
	public int ProviderType; // 0x30
	private SecureString _password; // 0x38
	private IntPtr _windowHandle; // 0x40

	// Properties
	public CspProviderFlags Flags { get; set; }
	[MonoTODOAttribute] // RVA: 0xBCF1DC Offset: 0xBCF1DC VA: 0xBCF1DC
	public CryptoKeySecurity CryptoKeySecurity { get; set; }
	public SecureString KeyPassword { get; set; }
	public IntPtr ParentWindowHandle { get; set; }

	// Methods

	// RVA: 0x239ED54 Offset: 0x239ED54 VA: 0x239ED54
	public void .ctor() { }

	// RVA: 0x239ED90 Offset: 0x239ED90 VA: 0x239ED90
	public void .ctor(int dwTypeIn) { }

	// RVA: 0x239EDCC Offset: 0x239EDCC VA: 0x239EDCC
	public void .ctor(int dwTypeIn, string strProviderNameIn) { }

	// RVA: 0x239EE08 Offset: 0x239EE08 VA: 0x239EE08
	public void .ctor(int dwTypeIn, string strProviderNameIn, string strContainerNameIn) { }

	// RVA: 0x239EE54 Offset: 0x239EE54 VA: 0x239EE54
	public void .ctor(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle) { }

	// RVA: 0x239EF24 Offset: 0x239EF24 VA: 0x239EF24
	public void .ctor(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, SecureString keyPassword) { }

	// RVA: 0x239EF8C Offset: 0x239EF8C VA: 0x239EF8C
	public CspProviderFlags get_Flags() { }

	// RVA: 0x239EF94 Offset: 0x239EF94 VA: 0x239EF94
	public void set_Flags(CspProviderFlags value) { }

	// RVA: 0x239EF9C Offset: 0x239EF9C VA: 0x239EF9C
	public CryptoKeySecurity get_CryptoKeySecurity() { }

	// RVA: 0x239EEBC Offset: 0x239EEBC VA: 0x239EEBC
	public void set_CryptoKeySecurity(CryptoKeySecurity value) { }

	// RVA: 0x239F004 Offset: 0x239F004 VA: 0x239F004
	public SecureString get_KeyPassword() { }

	// RVA: 0x239F00C Offset: 0x239F00C VA: 0x239F00C
	public void set_KeyPassword(SecureString value) { }

	// RVA: 0x239F014 Offset: 0x239F014 VA: 0x239F014
	public IntPtr get_ParentWindowHandle() { }

	// RVA: 0x239F01C Offset: 0x239F01C VA: 0x239F01C
	public void set_ParentWindowHandle(IntPtr value) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC938C Offset: 0xBC938C VA: 0xBC938C
[FlagsAttribute] // RVA: 0xBC938C Offset: 0xBC938C VA: 0xBC938C
[Serializable]
public enum CspProviderFlags // TypeDefIndex: 715
{
	// Fields
	public int value__; // 0x0
	public const CspProviderFlags UseMachineKeyStore = 1;
	public const CspProviderFlags UseDefaultKeyContainer = 2;
	public const CspProviderFlags UseExistingKey = 8;
	public const CspProviderFlags NoFlags = 0;
	public const CspProviderFlags NoPrompt = 64;
	public const CspProviderFlags UseArchivableKey = 16;
	public const CspProviderFlags UseNonExportableKey = 4;
	public const CspProviderFlags UseUserProtectedKey = 32;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC93C8 Offset: 0xBC93C8 VA: 0xBC93C8
public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 716
{
	// Fields
	private const int keySizeByte = 8;
	internal static readonly byte[,] weakKeys; // 0x0
	internal static readonly byte[,] semiWeakKeys; // 0x8

	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x239F024 Offset: 0x239F024 VA: 0x239F024
	protected void .ctor() { }

	// RVA: 0x239F1BC Offset: 0x239F1BC VA: 0x239F1BC
	private static void .cctor() { }

	// RVA: 0x239F2A0 Offset: 0x239F2A0 VA: 0x239F2A0
	public static DES Create() { }

	// RVA: 0x239F308 Offset: 0x239F308 VA: 0x239F308
	public static DES Create(string algName) { }

	// RVA: 0x239F3F8 Offset: 0x239F3F8 VA: 0x239F3F8
	public static bool IsWeakKey(byte[] rgbKey) { }

	// RVA: 0x239F674 Offset: 0x239F674 VA: 0x239F674
	public static bool IsSemiWeakKey(byte[] rgbKey) { }

	// RVA: 0x239F8F0 Offset: 0x239F8F0 VA: 0x239F8F0 Slot: 12
	public override byte[] get_Key() { }

	// RVA: 0x239F9E4 Offset: 0x239F9E4 VA: 0x239F9E4 Slot: 13
	public override void set_Key(byte[] value) { }
}

// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform // TypeDefIndex: 717
{
	// Fields
	internal static readonly int KEY_BIT_SIZE; // 0x0
	internal static readonly int KEY_BYTE_SIZE; // 0x4
	internal static readonly int BLOCK_BIT_SIZE; // 0x8
	internal static readonly int BLOCK_BYTE_SIZE; // 0xC
	private byte[] keySchedule; // 0x58
	private byte[] byteBuff; // 0x60
	private uint[] dwordBuff; // 0x68
	private static readonly uint[] spBoxes; // 0x10
	private static readonly byte[] PC1; // 0x18
	private static readonly byte[] leftRotTotal; // 0x20
	private static readonly byte[] PC2; // 0x28
	internal static readonly uint[] ipTab; // 0x30
	internal static readonly uint[] fpTab; // 0x38

	// Methods

	// RVA: 0x239FCCC Offset: 0x239FCCC VA: 0x239FCCC
	internal void .ctor(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x23A06E4 Offset: 0x23A06E4 VA: 0x23A06E4
	private static void .cctor() { }

	// RVA: 0x23A08B8 Offset: 0x23A08B8 VA: 0x23A08B8
	private uint CipherFunct(uint r, int n) { }

	// RVA: 0x23A0D20 Offset: 0x23A0D20 VA: 0x23A0D20
	internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap) { }

	// RVA: 0x23A12D0 Offset: 0x23A12D0 VA: 0x23A12D0
	private static void BSwap(byte[] byteBuff) { }

	// RVA: 0x23A0180 Offset: 0x23A0180 VA: 0x23A0180
	internal void SetKey(byte[] key) { }

	// RVA: 0x23A14F4 Offset: 0x23A14F4 VA: 0x23A14F4
	public void ProcessBlock(byte[] input, byte[] output) { }

	// RVA: 0x23A1918 Offset: 0x23A1918 VA: 0x23A1918 Slot: 17
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x23A00AC Offset: 0x23A00AC VA: 0x23A00AC
	internal static byte[] GetStrongKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC93DC Offset: 0xBC93DC VA: 0xBC93DC
public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 718
{
	// Methods

	// RVA: 0x239FBEC Offset: 0x239FBEC VA: 0x239FBEC
	public void .ctor() { }

	// RVA: 0x239FC50 Offset: 0x239FC50 VA: 0x239FC50 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x239FF50 Offset: 0x239FF50 VA: 0x239FF50 Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x239FFCC Offset: 0x239FFCC VA: 0x239FFCC Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x23A0044 Offset: 0x23A0044 VA: 0x23A0044 Slot: 27
	public override void GenerateKey() { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC93F0 Offset: 0xBC93F0 VA: 0xBC93F0
public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 719
{
	// Methods

	// RVA: 0x23A19CC Offset: 0x23A19CC VA: 0x23A19CC
	protected void .ctor() { }

	// RVA: 0x23A19D4 Offset: 0x23A19D4 VA: 0x23A19D4
	public static DSA Create() { }

	// RVA: 0x23A1A1C Offset: 0x23A1A1C VA: 0x23A1A1C
	public static DSA Create(string algName) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract byte[] CreateSignature(byte[] rgbHash);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract DSAParameters ExportParameters(bool includePrivateParameters);

	// RVA: 0x23A1B0C Offset: 0x23A1B0C VA: 0x23A1B0C
	internal void ZeroizePrivateKey(DSAParameters parameters) { }

	// RVA: 0x23A1B28 Offset: 0x23A1B28 VA: 0x23A1B28 Slot: 11
	public override void FromXmlString(string xmlString) { }

	// RVA: -1 Offset: -1 Slot: 15
	public abstract void ImportParameters(DSAParameters parameters);

	// RVA: 0x23A1E9C Offset: 0x23A1E9C VA: 0x23A1E9C Slot: 12
	public override string ToXmlString(bool includePrivateParameters) { }

	// RVA: -1 Offset: -1 Slot: 16
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9404 Offset: 0xBC9404 VA: 0xBC9404
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 720
{
	// Fields
	private const int PROV_DSS_DH = 13;
	private KeyPairPersistence store; // 0x20
	private bool persistKey; // 0x28
	private bool persisted; // 0x29
	private bool privateKeyExportable; // 0x2A
	private bool m_disposed; // 0x2B
	private DSAManaged dsa; // 0x30
	private static bool useMachineKeyStore; // 0x0

	// Properties
	public override string KeyExchangeAlgorithm { get; }
	public override int KeySize { get; }
	public bool PersistKeyInCsp { get; set; }
	[ComVisibleAttribute] // RVA: 0xBCF214 Offset: 0xBCF214 VA: 0xBCF214
	public bool PublicOnly { get; }
	public override string SignatureAlgorithm { get; }
	public static bool UseMachineKeyStore { get; set; }
	[MonoTODOAttribute] // RVA: 0xBCF228 Offset: 0xBCF228 VA: 0xBCF228
	[ComVisibleAttribute] // RVA: 0xBCF228 Offset: 0xBCF228 VA: 0xBCF228
	public CspKeyContainerInfo CspKeyContainerInfo { get; }

	// Methods

	// RVA: 0x23A266C Offset: 0x23A266C VA: 0x23A266C
	public void .ctor() { }

	// RVA: 0x23A2964 Offset: 0x23A2964 VA: 0x23A2964
	public void .ctor(CspParameters parameters) { }

	// RVA: 0x23A2974 Offset: 0x23A2974 VA: 0x23A2974
	public void .ctor(int dwKeySize) { }

	// RVA: 0x23A2678 Offset: 0x23A2678 VA: 0x23A2678
	public void .ctor(int dwKeySize, CspParameters parameters) { }

	// RVA: 0x23A297C Offset: 0x23A297C VA: 0x23A297C
	private static void .cctor() { }

	// RVA: 0x23A2980 Offset: 0x23A2980 VA: 0x23A2980 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23A2A68 Offset: 0x23A2A68 VA: 0x23A2A68 Slot: 5
	public override string get_KeyExchangeAlgorithm() { }

	// RVA: 0x23A2A70 Offset: 0x23A2A70 VA: 0x23A2A70 Slot: 6
	public override int get_KeySize() { }

	// RVA: 0x23A2AA4 Offset: 0x23A2AA4 VA: 0x23A2AA4
	public bool get_PersistKeyInCsp() { }

	// RVA: 0x23A2AAC Offset: 0x23A2AAC VA: 0x23A2AAC
	public void set_PersistKeyInCsp(bool value) { }

	// RVA: 0x23A2AB8 Offset: 0x23A2AB8 VA: 0x23A2AB8
	public bool get_PublicOnly() { }

	// RVA: 0x23A2AE8 Offset: 0x23A2AE8 VA: 0x23A2AE8 Slot: 9
	public override string get_SignatureAlgorithm() { }

	// RVA: 0x23A2B30 Offset: 0x23A2B30 VA: 0x23A2B30
	public static bool get_UseMachineKeyStore() { }

	// RVA: 0x23A2B98 Offset: 0x23A2B98 VA: 0x23A2B98
	public static void set_UseMachineKeyStore(bool value) { }

	// RVA: 0x23A2C08 Offset: 0x23A2C08 VA: 0x23A2C08 Slot: 14
	public override DSAParameters ExportParameters(bool includePrivateParameters) { }

	// RVA: 0x23A2CE0 Offset: 0x23A2CE0 VA: 0x23A2CE0 Slot: 15
	public override void ImportParameters(DSAParameters parameters) { }

	// RVA: 0x23A2D58 Offset: 0x23A2D58 VA: 0x23A2D58 Slot: 13
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x23A2D94 Offset: 0x23A2D94 VA: 0x23A2D94
	public byte[] SignData(byte[] buffer) { }

	// RVA: 0x23A2E04 Offset: 0x23A2E04 VA: 0x23A2E04
	public byte[] SignData(byte[] buffer, int offset, int count) { }

	// RVA: 0x23A2E8C Offset: 0x23A2E8C VA: 0x23A2E8C
	public byte[] SignData(Stream inputStream) { }

	// RVA: 0x23A2EFC Offset: 0x23A2EFC VA: 0x23A2EFC
	public byte[] SignHash(byte[] rgbHash, string str) { }

	// RVA: 0x23A3034 Offset: 0x23A3034 VA: 0x23A3034
	public bool VerifyData(byte[] rgbData, byte[] rgbSignature) { }

	// RVA: 0x23A30B0 Offset: 0x23A30B0 VA: 0x23A30B0
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature) { }

	// RVA: 0x23A3208 Offset: 0x23A3208 VA: 0x23A3208 Slot: 16
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x23A29F8 Offset: 0x23A29F8 VA: 0x23A29F8 Slot: 10
	protected override void Dispose(bool disposing) { }

	// RVA: 0x23A3258 Offset: 0x23A3258 VA: 0x23A3258
	private void OnKeyGenerated(object sender, EventArgs e) { }

	// RVA: 0x23A3308 Offset: 0x23A3308 VA: 0x23A3308 Slot: 19
	public CspKeyContainerInfo get_CspKeyContainerInfo() { }

	[ComVisibleAttribute] // RVA: 0xBCD668 Offset: 0xBCD668 VA: 0xBCD668
	// RVA: 0x23A3310 Offset: 0x23A3310 VA: 0x23A3310 Slot: 17
	public byte[] ExportCspBlob(bool includePrivateParameters) { }

	[ComVisibleAttribute] // RVA: 0xBCD67C Offset: 0xBCD67C VA: 0xBCD67C
	// RVA: 0x23A3324 Offset: 0x23A3324 VA: 0x23A3324 Slot: 18
	public void ImportCspBlob(byte[] keyBlob) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9418 Offset: 0xBC9418 VA: 0xBC9418
[Serializable]
public struct DSAParameters // TypeDefIndex: 721
{
	// Fields
	public int Counter; // 0x0
	public byte[] G; // 0x8
	public byte[] J; // 0x10
	public byte[] P; // 0x18
	public byte[] Q; // 0x20
	public byte[] Seed; // 0x28
	public byte[] X; // 0x30
	public byte[] Y; // 0x38
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC942C Offset: 0xBC942C VA: 0xBC942C
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 722
{
	// Fields
	private DSA dsa; // 0x10

	// Methods

	// RVA: 0x23A3520 Offset: 0x23A3520 VA: 0x23A3520
	public void .ctor() { }

	// RVA: 0x23A3528 Offset: 0x23A3528 VA: 0x23A3528
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x23A3560 Offset: 0x23A3560 VA: 0x23A3560 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x23A36A8 Offset: 0x23A36A8 VA: 0x23A36A8 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }

	// RVA: 0x23A37BC Offset: 0x23A37BC VA: 0x23A37BC Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9440 Offset: 0xBC9440 VA: 0xBC9440
public class DSASignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 723
{
	// Fields
	private DSA dsa; // 0x10

	// Methods

	// RVA: 0x23A3924 Offset: 0x23A3924 VA: 0x23A3924
	public void .ctor() { }

	// RVA: 0x23A392C Offset: 0x23A392C VA: 0x23A392C
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x23A3964 Offset: 0x23A3964 VA: 0x23A3964 Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x23A3A18 Offset: 0x23A3A18 VA: 0x23A3A18 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x23A3B60 Offset: 0x23A3B60 VA: 0x23A3B60 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9454 Offset: 0xBC9454 VA: 0xBC9454
public abstract class DeriveBytes // TypeDefIndex: 724
{
	// Methods

	// RVA: 0x23A3C74 Offset: 0x23A3C74 VA: 0x23A3C74
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte[] GetBytes(int cb);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void Reset();
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9468 Offset: 0xBC9468 VA: 0xBC9468
[Serializable]
public enum FromBase64TransformMode // TypeDefIndex: 725
{
	// Fields
	public int value__; // 0x0
	public const FromBase64TransformMode IgnoreWhiteSpaces = 0;
	public const FromBase64TransformMode DoNotIgnoreWhiteSpaces = 1;
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC947C Offset: 0xBC947C VA: 0xBC947C
public class FromBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 726
{
	// Fields
	private const byte TerminatorByte = 61;
	private FromBase64TransformMode mode; // 0x10
	private byte[] accumulator; // 0x18
	private int accPtr; // 0x20
	private bool m_disposed; // 0x24
	private byte[] lookupTable; // 0x28

	// Properties
	public bool CanTransformMultipleBlocks { get; }
	public virtual bool CanReuseTransform { get; }
	public int InputBlockSize { get; }
	public int OutputBlockSize { get; }

	// Methods

	// RVA: 0x23A3C7C Offset: 0x23A3C7C VA: 0x23A3C7C
	public void .ctor() { }

	// RVA: 0x23A3C84 Offset: 0x23A3C84 VA: 0x23A3C84
	public void .ctor(FromBase64TransformMode whitespaces) { }

	// RVA: 0x23A3D00 Offset: 0x23A3D00 VA: 0x23A3D00 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x23A3D34 Offset: 0x23A3D34 VA: 0x23A3D34 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x23A3DB4 Offset: 0x23A3DB4 VA: 0x23A3DB4 Slot: 6
	public bool get_CanTransformMultipleBlocks() { }

	// RVA: 0x23A3DBC Offset: 0x23A3DBC VA: 0x23A3DBC Slot: 11
	public virtual bool get_CanReuseTransform() { }

	// RVA: 0x23A3DC4 Offset: 0x23A3DC4 VA: 0x23A3DC4 Slot: 7
	public int get_InputBlockSize() { }

	// RVA: 0x23A3DCC Offset: 0x23A3DCC VA: 0x23A3DCC Slot: 8
	public int get_OutputBlockSize() { }

	// RVA: 0x23A3DD4 Offset: 0x23A3DD4 VA: 0x23A3DD4
	public void Clear() { }

	// RVA: 0x23A3DE4 Offset: 0x23A3DE4 VA: 0x23A3DE4 Slot: 12
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x23A3E34 Offset: 0x23A3E34 VA: 0x23A3E34
	private byte lookup(byte input) { }

	// RVA: 0x23A3F38 Offset: 0x23A3F38 VA: 0x23A3F38
	private int ProcessBlock(byte[] output, int offset) { }

	// RVA: 0x23A43BC Offset: 0x23A43BC VA: 0x23A43BC
	private void CheckInputParameters(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x23A45AC Offset: 0x23A45AC VA: 0x23A45AC Slot: 9
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x23A47C0 Offset: 0x23A47C0 VA: 0x23A47C0 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9490 Offset: 0xBC9490 VA: 0xBC9490
public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 727
{
	// Fields
	private bool _disposed; // 0x30
	private string _hashName; // 0x38
	private HashAlgorithm _algo; // 0x40
	private BlockProcessor _block; // 0x48
	private int _blockSizeValue; // 0x50

	// Properties
	protected int BlockSizeValue { get; set; }
	public string HashName { get; set; }
	public override byte[] Key { get; set; }
	internal BlockProcessor Block { get; }

	// Methods

	// RVA: 0x1D644E0 Offset: 0x1D644E0 VA: 0x1D644E0
	protected void .ctor() { }

	// RVA: 0x1D6453C Offset: 0x1D6453C VA: 0x1D6453C
	protected int get_BlockSizeValue() { }

	// RVA: 0x1D64544 Offset: 0x1D64544 VA: 0x1D64544
	protected void set_BlockSizeValue(int value) { }

	// RVA: 0x1D6454C Offset: 0x1D6454C VA: 0x1D6454C
	public string get_HashName() { }

	// RVA: 0x1D64554 Offset: 0x1D64554 VA: 0x1D64554
	public void set_HashName(string value) { }

	// RVA: 0x1D64674 Offset: 0x1D64674 VA: 0x1D64674 Slot: 21
	public override byte[] get_Key() { }

	// RVA: 0x1D64828 Offset: 0x1D64828 VA: 0x1D64828 Slot: 22
	public override void set_Key(byte[] value) { }

	// RVA: 0x1D64B44 Offset: 0x1D64B44 VA: 0x1D64B44
	internal BlockProcessor get_Block() { }

	// RVA: 0x1D64BC8 Offset: 0x1D64BC8 VA: 0x1D64BC8
	private byte[] KeySetup(byte[] key, byte padding) { }

	// RVA: 0x1D64D28 Offset: 0x1D64D28 VA: 0x1D64D28 Slot: 18
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1D64DA8 Offset: 0x1D64DA8 VA: 0x1D64DA8 Slot: 14
	protected override void HashCore(byte[] rgb, int ib, int cb) { }

	// RVA: 0x1D64E9C Offset: 0x1D64E9C VA: 0x1D64E9C Slot: 15
	protected override byte[] HashFinal() { }

	// RVA: 0x1D654AC Offset: 0x1D654AC VA: 0x1D654AC Slot: 17
	public override void Initialize() { }

	// RVA: 0x1D655F0 Offset: 0x1D655F0 VA: 0x1D655F0
	public static HMAC Create() { }

	// RVA: 0x1D65638 Offset: 0x1D65638 VA: 0x1D65638
	public static HMAC Create(string algorithmName) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC94A4 Offset: 0xBC94A4 VA: 0xBC94A4
public class HMACMD5 : HMAC // TypeDefIndex: 728
{
	// Methods

	// RVA: 0x1D6572C Offset: 0x1D6572C VA: 0x1D6572C
	public void .ctor() { }

	// RVA: 0x1D6575C Offset: 0x1D6575C VA: 0x1D6575C
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC94B8 Offset: 0xBC94B8 VA: 0xBC94B8
public class HMACRIPEMD160 : HMAC // TypeDefIndex: 729
{
	// Methods

	// RVA: 0x1D657F8 Offset: 0x1D657F8 VA: 0x1D657F8
	public void .ctor() { }

	// RVA: 0x1D65828 Offset: 0x1D65828 VA: 0x1D65828
	public void .ctor(byte[] key) { }
}

// Namespace: System.Security.Cryptography
