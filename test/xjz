	public bool HasProxy { get; }
	public Uri LastProcessedUri { get; set; }
	protected bool IsDisposed { get; set; }

	// Methods

	// RVA: 0x1E6BC38 Offset: 0x1E6BC38 VA: 0x1E6BC38
	public void .ctor(string serverAddress) { }

	// RVA: 0x1E6BC40 Offset: 0x1E6BC40 VA: 0x1E6BC40
	public void .ctor(string serverAddress, bool threaded) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6074 Offset: 0xCC6074 VA: 0xCC6074
	// RVA: 0x1E6BCE8 Offset: 0x1E6BCE8 VA: 0x1E6BCE8
	public string get_ServerAddress() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6084 Offset: 0xCC6084 VA: 0xCC6084
	// RVA: 0x1E6BCD8 Offset: 0x1E6BCD8 VA: 0x1E6BCD8
	protected void set_ServerAddress(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6094 Offset: 0xCC6094 VA: 0xCC6094
	// RVA: 0x1E6BCF0 Offset: 0x1E6BCF0 VA: 0x1E6BCF0
	public HTTPConnectionStates get_State() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC60A4 Offset: 0xCC60A4 VA: 0xCC60A4
	// RVA: 0x1E6BCE0 Offset: 0x1E6BCE0 VA: 0x1E6BCE0
	protected void set_State(HTTPConnectionStates value) { }

	// RVA: 0x1E6BCF8 Offset: 0x1E6BCF8 VA: 0x1E6BCF8
	public bool get_IsFree() { }

	// RVA: 0x1E6BD14 Offset: 0x1E6BD14 VA: 0x1E6BD14
	public bool get_IsActive() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC60B4 Offset: 0xCC60B4 VA: 0xCC60B4
	// RVA: 0x1E6BD28 Offset: 0x1E6BD28 VA: 0x1E6BD28
	public HTTPRequest get_CurrentRequest() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC60C4 Offset: 0xCC60C4 VA: 0xCC60C4
	// RVA: 0x1E6BD30 Offset: 0x1E6BD30 VA: 0x1E6BD30
	protected void set_CurrentRequest(HTTPRequest value) { }

	// RVA: 0x1E6BD38 Offset: 0x1E6BD38 VA: 0x1E6BD38 Slot: 5
	public virtual bool get_IsRemovable() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC60D4 Offset: 0xCC60D4 VA: 0xCC60D4
	// RVA: 0x1E6BE30 Offset: 0x1E6BE30 VA: 0x1E6BE30
	public DateTime get_StartTime() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC60E4 Offset: 0xCC60E4 VA: 0xCC60E4
	// RVA: 0x1E6BE3C Offset: 0x1E6BE3C VA: 0x1E6BE3C
	protected void set_StartTime(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC60F4 Offset: 0xCC60F4 VA: 0xCC60F4
	// RVA: 0x1E6BE44 Offset: 0x1E6BE44 VA: 0x1E6BE44
	public DateTime get_TimedOutStart() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6104 Offset: 0xCC6104 VA: 0xCC6104
	// RVA: 0x1E6BE50 Offset: 0x1E6BE50 VA: 0x1E6BE50
	protected void set_TimedOutStart(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6114 Offset: 0xCC6114 VA: 0xCC6114
	// RVA: 0x1E6BE58 Offset: 0x1E6BE58 VA: 0x1E6BE58
	protected HTTPProxy get_Proxy() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6124 Offset: 0xCC6124 VA: 0xCC6124
	// RVA: 0x1E6BE60 Offset: 0x1E6BE60 VA: 0x1E6BE60
	protected void set_Proxy(HTTPProxy value) { }

	// RVA: 0x1E6BE68 Offset: 0x1E6BE68 VA: 0x1E6BE68
	public bool get_HasProxy() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6134 Offset: 0xCC6134 VA: 0xCC6134
	// RVA: 0x1E6BE78 Offset: 0x1E6BE78 VA: 0x1E6BE78
	public Uri get_LastProcessedUri() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6144 Offset: 0xCC6144 VA: 0xCC6144
	// RVA: 0x1E6BE80 Offset: 0x1E6BE80 VA: 0x1E6BE80
	protected void set_LastProcessedUri(Uri value) { }

	// RVA: -1 Offset: -1 Slot: 6
	internal abstract void Abort(HTTPConnectionStates hTTPConnectionStates);

	// RVA: 0x1E6BE88 Offset: 0x1E6BE88 VA: 0x1E6BE88
	internal void Process(HTTPRequest request) { }

	// RVA: 0x1E6BFB8 Offset: 0x1E6BFB8 VA: 0x1E6BFB8 Slot: 7
	protected virtual void ThreadFunc(object param) { }

	// RVA: 0x1E6BFBC Offset: 0x1E6BFBC VA: 0x1E6BFBC
	internal void HandleProgressCallback() { }

	// RVA: 0x1E6C460 Offset: 0x1E6C460 VA: 0x1E6C460
	internal void HandleCallback() { }

	// RVA: 0x1E6C6A0 Offset: 0x1E6C6A0 VA: 0x1E6C6A0
	internal void Recycle(HTTPConnectionRecycledDelegate onConnectionRecycled) { }

	// RVA: 0x1E6C6C4 Offset: 0x1E6C6C4 VA: 0x1E6C6C4
	protected void RecycleNow() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6154 Offset: 0xCC6154 VA: 0xCC6154
	// RVA: 0x1E6C768 Offset: 0x1E6C768 VA: 0x1E6C768
	protected bool get_IsDisposed() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6164 Offset: 0xCC6164 VA: 0xCC6164
	// RVA: 0x1E6C770 Offset: 0x1E6C770 VA: 0x1E6C770
	private void set_IsDisposed(bool value) { }

	// RVA: 0x1E6C77C Offset: 0x1E6C77C VA: 0x1E6C77C Slot: 4
	public void Dispose() { }

	// RVA: 0x1E6C7B0 Offset: 0x1E6C7B0 VA: 0x1E6C7B0 Slot: 8
	protected virtual void Dispose(bool disposing) { }
}

// Namespace: BestHTTP
internal sealed class StreamList : Stream // TypeDefIndex: 4308
{
	// Fields
	private Stream[] Streams; // 0x10
	private int CurrentIdx; // 0x18

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1CA37D0 Offset: 0x1CA37D0 VA: 0x1CA37D0
	public void .ctor(Stream[] streams) { }

	// RVA: 0x1CBA9C8 Offset: 0x1CBA9C8 VA: 0x1CBA9C8 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1CBAA70 Offset: 0x1CBAA70 VA: 0x1CBAA70 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1CBAA78 Offset: 0x1CBAA78 VA: 0x1CBAA78 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1CBAB20 Offset: 0x1CBAB20 VA: 0x1CBAB20 Slot: 18
	public override void Flush() { }

	// RVA: 0x1CBABD8 Offset: 0x1CBABD8 VA: 0x1CBABD8 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1CBACB4 Offset: 0x1CBACB4 VA: 0x1CBACB4 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1CBAE24 Offset: 0x1CBAE24 VA: 0x1CBAE24 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1CA3850 Offset: 0x1CA3850 VA: 0x1CA3850
	public void Write(string str) { }

	// RVA: 0x1CBAEF0 Offset: 0x1CBAEF0 VA: 0x1CBAEF0 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1CBB118 Offset: 0x1CBB118 VA: 0x1CBB118 Slot: 10
	public override long get_Position() { }

	// RVA: 0x1CBB18C Offset: 0x1CBB18C VA: 0x1CBB18C Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1CBB200 Offset: 0x1CBB200 VA: 0x1CBB200 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1CBB2C8 Offset: 0x1CBB2C8 VA: 0x1CBB2C8 Slot: 22
	public override void SetLength(long value) { }
}

// Namespace: BestHTTP
internal sealed class FileConnection : ConnectionBase // TypeDefIndex: 4309
{
	// Methods

	// RVA: 0x1CA2E50 Offset: 0x1CA2E50 VA: 0x1CA2E50
	public void .ctor(string serverAddress) { }

	// RVA: 0x1CA2E58 Offset: 0x1CA2E58 VA: 0x1CA2E58 Slot: 6
	internal override void Abort(HTTPConnectionStates newState) { }

	// RVA: 0x1CA2F34 Offset: 0x1CA2F34 VA: 0x1CA2F34 Slot: 7
	protected override void ThreadFunc(object param) { }
}

// Namespace: BestHTTP.Cookies
public sealed class Cookie : IComparable<Cookie>, IEquatable<Cookie> // TypeDefIndex: 4310
{
	// Fields
	private const int Version = 1;
	[CompilerGeneratedAttribute] // RVA: 0xC48294 Offset: 0xC48294 VA: 0xC48294
	[DebuggerBrowsableAttribute] // RVA: 0xC48294 Offset: 0xC48294 VA: 0xC48294
	private string <Name>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC482D0 Offset: 0xC482D0 VA: 0xC482D0
	[DebuggerBrowsableAttribute] // RVA: 0xC482D0 Offset: 0xC482D0 VA: 0xC482D0
	private string <Value>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC4830C Offset: 0xC4830C VA: 0xC4830C
	[DebuggerBrowsableAttribute] // RVA: 0xC4830C Offset: 0xC4830C VA: 0xC4830C
	private DateTime <Date>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC48348 Offset: 0xC48348 VA: 0xC48348
	[DebuggerBrowsableAttribute] // RVA: 0xC48348 Offset: 0xC48348 VA: 0xC48348
	private DateTime <LastAccess>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC48384 Offset: 0xC48384 VA: 0xC48384
	[DebuggerBrowsableAttribute] // RVA: 0xC48384 Offset: 0xC48384 VA: 0xC48384
	private DateTime <Expires>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC483C0 Offset: 0xC483C0 VA: 0xC483C0
	[DebuggerBrowsableAttribute] // RVA: 0xC483C0 Offset: 0xC483C0 VA: 0xC483C0
	private long <MaxAge>k__BackingField; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC483FC Offset: 0xC483FC VA: 0xC483FC
	[DebuggerBrowsableAttribute] // RVA: 0xC483FC Offset: 0xC483FC VA: 0xC483FC
	private bool <IsSession>k__BackingField; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC48438 Offset: 0xC48438 VA: 0xC48438
	[DebuggerBrowsableAttribute] // RVA: 0xC48438 Offset: 0xC48438 VA: 0xC48438
	private string <Domain>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC48474 Offset: 0xC48474 VA: 0xC48474
	[DebuggerBrowsableAttribute] // RVA: 0xC48474 Offset: 0xC48474 VA: 0xC48474
	private string <Path>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xC484B0 Offset: 0xC484B0 VA: 0xC484B0
	[DebuggerBrowsableAttribute] // RVA: 0xC484B0 Offset: 0xC484B0 VA: 0xC484B0
	private bool <IsSecure>k__BackingField; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC484EC Offset: 0xC484EC VA: 0xC484EC
	[DebuggerBrowsableAttribute] // RVA: 0xC484EC Offset: 0xC484EC VA: 0xC484EC
	private bool <IsHttpOnly>k__BackingField; // 0x71
	[CompilerGeneratedAttribute] // RVA: 0xC48528 Offset: 0xC48528 VA: 0xC48528
	private static Func<char, bool> <>f__am$cache0; // 0x0

	// Properties
	public string Name { get; set; }
	public string Value { get; set; }
	public DateTime Date { get; set; }
	public DateTime LastAccess { get; set; }
	public DateTime Expires { get; set; }
	public long MaxAge { get; set; }
	public bool IsSession { get; set; }
	public string Domain { get; set; }
	public string Path { get; set; }
	public bool IsSecure { get; set; }
	public bool IsHttpOnly { get; set; }

	// Methods

	// RVA: 0x1E6C7BC Offset: 0x1E6C7BC VA: 0x1E6C7BC
	public void .ctor(string name, string value) { }

	// RVA: 0x1E6C8A4 Offset: 0x1E6C8A4 VA: 0x1E6C8A4
	public void .ctor(string name, string value, string path) { }

	// RVA: 0x1E6C85C Offset: 0x1E6C85C VA: 0x1E6C85C
	public void .ctor(string name, string value, string path, string domain) { }

	// RVA: 0x1E6C9E4 Offset: 0x1E6C9E4 VA: 0x1E6C9E4
	public void .ctor(Uri uri, string name, string value, DateTime expires, bool isSession = True) { }

	// RVA: 0x1E6CB00 Offset: 0x1E6CB00 VA: 0x1E6CB00
	public void .ctor(Uri uri, string name, string value, long maxAge = -1, bool isSession = True) { }

	// RVA: 0x1E6C93C Offset: 0x1E6C93C VA: 0x1E6C93C
	internal void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6174 Offset: 0xCC6174 VA: 0xCC6174
	// RVA: 0x1E6CC0C Offset: 0x1E6CC0C VA: 0x1E6CC0C
	public string get_Name() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6184 Offset: 0xCC6184 VA: 0xCC6184
	// RVA: 0x1E6C9C4 Offset: 0x1E6C9C4 VA: 0x1E6C9C4
	private void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6194 Offset: 0xCC6194 VA: 0xCC6194
	// RVA: 0x1E6CC14 Offset: 0x1E6CC14 VA: 0x1E6CC14
	public string get_Value() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC61A4 Offset: 0xCC61A4 VA: 0xCC61A4
	// RVA: 0x1E6C9CC Offset: 0x1E6C9CC VA: 0x1E6C9CC
	private void set_Value(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC61B4 Offset: 0xCC61B4 VA: 0xCC61B4
	// RVA: 0x1E6CC1C Offset: 0x1E6CC1C VA: 0x1E6CC1C
	public DateTime get_Date() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC61C4 Offset: 0xCC61C4 VA: 0xCC61C4
	// RVA: 0x1E6CAF8 Offset: 0x1E6CAF8 VA: 0x1E6CAF8
	internal void set_Date(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC61D4 Offset: 0xCC61D4 VA: 0xCC61D4
	// RVA: 0x1E6CC28 Offset: 0x1E6CC28 VA: 0x1E6CC28
	public DateTime get_LastAccess() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC61E4 Offset: 0xCC61E4 VA: 0xCC61E4
	// RVA: 0x1E6CC04 Offset: 0x1E6CC04 VA: 0x1E6CC04
	public void set_LastAccess(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC61F4 Offset: 0xCC61F4 VA: 0xCC61F4
	// RVA: 0x1E6CC34 Offset: 0x1E6CC34 VA: 0x1E6CC34
	public DateTime get_Expires() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6204 Offset: 0xCC6204 VA: 0xCC6204
	// RVA: 0x1E6CAE4 Offset: 0x1E6CAE4 VA: 0x1E6CAE4
	private void set_Expires(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6214 Offset: 0xCC6214 VA: 0xCC6214
	// RVA: 0x1E6CC40 Offset: 0x1E6CC40 VA: 0x1E6CC40
	public long get_MaxAge() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6224 Offset: 0xCC6224 VA: 0xCC6224
	// RVA: 0x1E6CBFC Offset: 0x1E6CBFC VA: 0x1E6CBFC
	private void set_MaxAge(long value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6234 Offset: 0xCC6234 VA: 0xCC6234
	// RVA: 0x1E6CC48 Offset: 0x1E6CC48 VA: 0x1E6CC48
	public bool get_IsSession() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6244 Offset: 0xCC6244 VA: 0xCC6244
	// RVA: 0x1E6CAEC Offset: 0x1E6CAEC VA: 0x1E6CAEC
	private void set_IsSession(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6254 Offset: 0xCC6254 VA: 0xCC6254
	// RVA: 0x1E6CC50 Offset: 0x1E6CC50 VA: 0x1E6CC50
	public string get_Domain() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6264 Offset: 0xCC6264 VA: 0xCC6264
	// RVA: 0x1E6C9DC Offset: 0x1E6C9DC VA: 0x1E6C9DC
	private void set_Domain(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6274 Offset: 0xCC6274 VA: 0xCC6274
	// RVA: 0x1E6CC58 Offset: 0x1E6CC58 VA: 0x1E6CC58
	public string get_Path() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6284 Offset: 0xCC6284 VA: 0xCC6284
	// RVA: 0x1E6C9D4 Offset: 0x1E6C9D4 VA: 0x1E6C9D4
	private void set_Path(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6294 Offset: 0xCC6294 VA: 0xCC6294
	// RVA: 0x1E6CC60 Offset: 0x1E6CC60 VA: 0x1E6CC60
	public bool get_IsSecure() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC62A4 Offset: 0xCC62A4 VA: 0xCC62A4
	// RVA: 0x1E6CC68 Offset: 0x1E6CC68 VA: 0x1E6CC68
	private void set_IsSecure(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC62B4 Offset: 0xCC62B4 VA: 0xCC62B4
	// RVA: 0x1E6CC74 Offset: 0x1E6CC74 VA: 0x1E6CC74
	public bool get_IsHttpOnly() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC62C4 Offset: 0xCC62C4 VA: 0xCC62C4
	// RVA: 0x1E6CC7C Offset: 0x1E6CC7C VA: 0x1E6CC7C
	private void set_IsHttpOnly(bool value) { }

	// RVA: 0x1E6CC88 Offset: 0x1E6CC88 VA: 0x1E6CC88
	public bool WillExpireInTheFuture() { }

	// RVA: 0x1E6CD9C Offset: 0x1E6CD9C VA: 0x1E6CD9C
	public uint GuessSize() { }

	// RVA: 0x1E6CE40 Offset: 0x1E6CE40 VA: 0x1E6CE40
	public static Cookie Parse(string header, Uri defaultDomain) { }

	// RVA: 0x1E6D8D4 Offset: 0x1E6D8D4 VA: 0x1E6D8D4
	internal void SaveTo(BinaryWriter stream) { }

	// RVA: 0x1E6DB50 Offset: 0x1E6DB50 VA: 0x1E6DB50
	internal void LoadFrom(BinaryReader stream) { }

	// RVA: 0x1E6DD44 Offset: 0x1E6DD44 VA: 0x1E6DD44 Slot: 3
	public override string ToString() { }

	// RVA: 0x1E6DDC4 Offset: 0x1E6DDC4 VA: 0x1E6DDC4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1E6DE44 Offset: 0x1E6DE44 VA: 0x1E6DE44 Slot: 5
	public bool Equals(Cookie cookie) { }

	// RVA: 0x1E6DF18 Offset: 0x1E6DF18 VA: 0x1E6DF18 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1E6DF54 Offset: 0x1E6DF54 VA: 0x1E6DF54
	private static string ReadValue(string str, ref int pos) { }

	// RVA: 0x1E6D6CC Offset: 0x1E6D6CC VA: 0x1E6D6CC
	private static List<HeaderValue> ParseCookieHeader(string str) { }

	// RVA: 0x1E6DFF8 Offset: 0x1E6DFF8 VA: 0x1E6DFF8 Slot: 4
	public int CompareTo(Cookie other) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC62D4 Offset: 0xCC62D4 VA: 0xCC62D4
	// RVA: 0x1E6E040 Offset: 0x1E6E040 VA: 0x1E6E040
	private static bool <ParseCookieHeader>m__0(char ch) { }
}

// Namespace: BestHTTP.Cookies
public static class CookieJar // TypeDefIndex: 4311
{
	// Fields
	private const int Version = 1;
	private static List<Cookie> Cookies; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC48538 Offset: 0xC48538 VA: 0xC48538
	[DebuggerBrowsableAttribute] // RVA: 0xC48538 Offset: 0xC48538 VA: 0xC48538
	private static string <CookieFolder>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC48574 Offset: 0xC48574 VA: 0xC48574
	[DebuggerBrowsableAttribute] // RVA: 0xC48574 Offset: 0xC48574 VA: 0xC48574
	private static string <LibraryPath>k__BackingField; // 0x10
	private static object Locker; // 0x18
	private static bool _isSavingSupported; // 0x20
	private static bool IsSupportCheckDone; // 0x21
	private static bool Loaded; // 0x22

	// Properties
	public static bool IsSavingSupported { get; }
	private static string CookieFolder { get; set; }
	private static string LibraryPath { get; set; }

	// Methods

	// RVA: 0x1E6E05C Offset: 0x1E6E05C VA: 0x1E6E05C
	public static bool get_IsSavingSupported() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC62E4 Offset: 0xCC62E4 VA: 0xCC62E4
	// RVA: 0x1E6E394 Offset: 0x1E6E394 VA: 0x1E6E394
	private static string get_CookieFolder() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC62F4 Offset: 0xCC62F4 VA: 0xCC62F4
	// RVA: 0x1E6E3FC Offset: 0x1E6E3FC VA: 0x1E6E3FC
	private static void set_CookieFolder(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6304 Offset: 0xCC6304 VA: 0xCC6304
	// RVA: 0x1E6E468 Offset: 0x1E6E468 VA: 0x1E6E468
	private static string get_LibraryPath() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC6314 Offset: 0xCC6314 VA: 0xCC6314
	// RVA: 0x1E6E4D0 Offset: 0x1E6E4D0 VA: 0x1E6E4D0
	private static void set_LibraryPath(string value) { }

	// RVA: 0x1E6E53C Offset: 0x1E6E53C VA: 0x1E6E53C
	internal static void SetupFolder() { }

	// RVA: 0x1E6E774 Offset: 0x1E6E774 VA: 0x1E6E774
	internal static void Set(HTTPResponse response) { }

	// RVA: 0x1E6ED6C Offset: 0x1E6ED6C VA: 0x1E6ED6C
	internal static void Maintain() { }

	// RVA: 0x1E6F3C8 Offset: 0x1E6F3C8 VA: 0x1E6F3C8
	internal static void Persist() { }

	// RVA: 0x1E6FB00 Offset: 0x1E6FB00 VA: 0x1E6FB00
	internal static void Load() { }

	// RVA: 0x1E70234 Offset: 0x1E70234 VA: 0x1E70234
	public static List<Cookie> Get(Uri uri) { }

	// RVA: 0x1E70508 Offset: 0x1E70508 VA: 0x1E70508
	public static void Set(Uri uri, Cookie cookie) { }

	// RVA: 0x1E7056C Offset: 0x1E7056C VA: 0x1E7056C
	public static void Set(Cookie cookie) { }

	// RVA: 0x1E7070C Offset: 0x1E7070C VA: 0x1E7070C
	public static List<Cookie> GetAll() { }

	// RVA: 0x1E707F8 Offset: 0x1E707F8 VA: 0x1E707F8
	public static void Clear() { }

	// RVA: 0x1E7090C Offset: 0x1E7090C VA: 0x1E7090C
	public static void Clear(TimeSpan olderThan) { }

	// RVA: 0x1E70BD4 Offset: 0x1E70BD4 VA: 0x1E70BD4
	public static void Clear(string domain) { }

	// RVA: 0x1E70E48 Offset: 0x1E70E48 VA: 0x1E70E48
	public static void Remove(Uri uri, string name) { }

	// RVA: 0x1E6F298 Offset: 0x1E6F298 VA: 0x1E6F298
	private static Cookie Find(Cookie cookie, out int idx) { }

	// RVA: 0x1E71100 Offset: 0x1E71100 VA: 0x1E71100
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Crc
internal class CRC32 // TypeDefIndex: 4312
{
	// Fields
	private uint dwPolynomial; // 0x10
	private long _TotalBytesRead; // 0x18
	private bool reverseBits; // 0x20
	private uint[] crc32Table; // 0x28
	private const int BUFFER_SIZE = 8192;
	private uint _register; // 0x30

	// Properties
	public long TotalBytesRead { get; }
	public int Crc32Result { get; }

	// Methods

	// RVA: 0x1E7119C Offset: 0x1E7119C VA: 0x1E7119C
	public void .ctor() { }

	// RVA: 0x1E711DC Offset: 0x1E711DC VA: 0x1E711DC
	public void .ctor(bool reverseBits) { }

	// RVA: 0x1E71224 Offset: 0x1E71224 VA: 0x1E71224
	public void .ctor(int polynomial, bool reverseBits) { }

	// RVA: 0x1E713DC Offset: 0x1E713DC VA: 0x1E713DC
	public long get_TotalBytesRead() { }

	// RVA: 0x1E713E4 Offset: 0x1E713E4 VA: 0x1E713E4
	public int get_Crc32Result() { }

	// RVA: 0x1E713F0 Offset: 0x1E713F0 VA: 0x1E713F0
	public int GetCrc32(Stream input) { }

	// RVA: 0x1E713F8 Offset: 0x1E713F8 VA: 0x1E713F8
	public int GetCrc32AndCopy(Stream input, Stream output) { }

	// RVA: 0x1E716C4 Offset: 0x1E716C4 VA: 0x1E716C4
	public int ComputeCrc32(int W, byte B) { }

	// RVA: 0x1E716C8 Offset: 0x1E716C8 VA: 0x1E716C8
	internal int _InternalComputeCrc32(uint W, byte B) { }

	// RVA: 0x1E7153C Offset: 0x1E7153C VA: 0x1E7153C
	public void SlurpBlock(byte[] block, int offset, int count) { }

	// RVA: 0x1E71730 Offset: 0x1E71730 VA: 0x1E71730
	public void UpdateCRC(byte b) { }

	// RVA: 0x1E717E8 Offset: 0x1E717E8 VA: 0x1E717E8
	public void UpdateCRC(byte b, int n) { }

	// RVA: 0x1E718D0 Offset: 0x1E718D0 VA: 0x1E718D0
	private static uint ReverseBits(uint data) { }

	// RVA: 0x1E718D8 Offset: 0x1E718D8 VA: 0x1E718D8
	private static byte ReverseBits(byte data) { }

	// RVA: 0x1E71270 Offset: 0x1E71270 VA: 0x1E71270
	private void GenerateLookupTable() { }

	// RVA: 0x1E71924 Offset: 0x1E71924 VA: 0x1E71924
	private uint gf2_matrix_times(uint[] matrix, uint vec) { }

	// RVA: 0x1E719B0 Offset: 0x1E719B0 VA: 0x1E719B0
	private void gf2_matrix_square(uint[] square, uint[] mat) { }

	// RVA: 0x1E71A5C Offset: 0x1E71A5C VA: 0x1E71A5C
	public void Combine(int crc, int length) { }

	// RVA: 0x1E71BD8 Offset: 0x1E71BD8 VA: 0x1E71BD8
	public void Reset() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal enum BlockState // TypeDefIndex: 4313
{
	// Fields
	public int value__; // 0x0
	public const BlockState NeedMore = 0;
	public const BlockState BlockDone = 1;
	public const BlockState FinishStarted = 2;
	public const BlockState FinishDone = 3;
}

// Namespace: BestHTTP.Decompression.Zlib
internal enum DeflateFlavor // TypeDefIndex: 4314
{
	// Fields
	public int value__; // 0x0
	public const DeflateFlavor Store = 0;
	public const DeflateFlavor Fast = 1;
	public const DeflateFlavor Slow = 2;
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class DeflateManager // TypeDefIndex: 4315
{
	// Fields
	private static readonly int MEM_LEVEL_MAX; // 0x0
	private static readonly int MEM_LEVEL_DEFAULT; // 0x4
	private DeflateManager.CompressFunc DeflateFunction; // 0x10
	private static readonly string[] _ErrorMessage; // 0x8
	private static readonly int PRESET_DICT; // 0x10
	private static readonly int INIT_STATE; // 0x14
	private static readonly int BUSY_STATE; // 0x18
	private static readonly int FINISH_STATE; // 0x1C
	private static readonly int Z_DEFLATED; // 0x20
	private static readonly int STORED_BLOCK; // 0x24
	private static readonly int STATIC_TREES; // 0x28
	private static readonly int DYN_TREES; // 0x2C
	private static readonly int Z_BINARY; // 0x30
	private static readonly int Z_ASCII; // 0x34
	private static readonly int Z_UNKNOWN; // 0x38
	private static readonly int Buf_size; // 0x3C
	private static readonly int MIN_MATCH; // 0x40
	private static readonly int MAX_MATCH; // 0x44
	private static readonly int MIN_LOOKAHEAD; // 0x48
	private static readonly int HEAP_SIZE; // 0x4C
	private static readonly int END_BLOCK; // 0x50
	internal ZlibCodec _codec; // 0x18
	internal int status; // 0x20
	internal byte[] pending; // 0x28
	internal int nextPending; // 0x30
	internal int pendingCount; // 0x34
	internal sbyte data_type; // 0x38
	internal int last_flush; // 0x3C
	internal int w_size; // 0x40
	internal int w_bits; // 0x44
	internal int w_mask; // 0x48
	internal byte[] window; // 0x50
	internal int window_size; // 0x58
	internal short[] prev; // 0x60
	internal short[] head; // 0x68
	internal int ins_h; // 0x70
	internal int hash_size; // 0x74
	internal int hash_bits; // 0x78
	internal int hash_mask; // 0x7C
	internal int hash_shift; // 0x80
	internal int block_start; // 0x84
	private DeflateManager.Config config; // 0x88
	internal int match_length; // 0x90
	internal int prev_match; // 0x94
	internal int match_available; // 0x98
	internal int strstart; // 0x9C
	internal int match_start; // 0xA0
	internal int lookahead; // 0xA4
	internal int prev_length; // 0xA8
	internal CompressionLevel compressionLevel; // 0xAC
	internal CompressionStrategy compressionStrategy; // 0xB0
	internal short[] dyn_ltree; // 0xB8
	internal short[] dyn_dtree; // 0xC0
	internal short[] bl_tree; // 0xC8
	internal ZTree treeLiterals; // 0xD0
	internal ZTree treeDistances; // 0xD8
	internal ZTree treeBitLengths; // 0xE0
	internal short[] bl_count; // 0xE8
	internal int[] heap; // 0xF0
	internal int heap_len; // 0xF8
	internal int heap_max; // 0xFC
	internal sbyte[] depth; // 0x100
	internal int _lengthOffset; // 0x108
	internal int lit_bufsize; // 0x10C
	internal int last_lit; // 0x110
	internal int _distanceOffset; // 0x114
	internal int opt_len; // 0x118
	internal int static_len; // 0x11C
	internal int matches; // 0x120
	internal int last_eob_len; // 0x124
	internal short bi_buf; // 0x128
	internal int bi_valid; // 0x12C
	private bool Rfc1950BytesEmitted; // 0x130
	private bool _WantRfc1950HeaderBytes; // 0x131

	// Properties
	internal bool WantRfc1950HeaderBytes { get; set; }

	// Methods

	// RVA: 0x1E721C0 Offset: 0x1E721C0 VA: 0x1E721C0
	internal void .ctor() { }

	// RVA: 0x1E72388 Offset: 0x1E72388 VA: 0x1E72388
	private void _InitializeLazyMatch() { }

	// RVA: 0x1E725B8 Offset: 0x1E725B8 VA: 0x1E725B8
	private void _InitializeTreeData() { }

	// RVA: 0x1E726DC Offset: 0x1E726DC VA: 0x1E726DC
	internal void _InitializeBlocks() { }

	// RVA: 0x1E72914 Offset: 0x1E72914 VA: 0x1E72914
	internal void pqdownheap(short[] tree, int k) { }

	// RVA: 0x1E72BA4 Offset: 0x1E72BA4 VA: 0x1E72BA4
	internal static bool _IsSmaller(short[] tree, int n, int m, sbyte[] depth) { }

	// RVA: 0x1E72CBC Offset: 0x1E72CBC VA: 0x1E72CBC
	internal void scan_tree(short[] tree, int max_code) { }

	// RVA: 0x1E73028 Offset: 0x1E73028 VA: 0x1E73028
	internal int build_bl_tree() { }

	// RVA: 0x1E739C8 Offset: 0x1E739C8 VA: 0x1E739C8
	internal void send_all_trees(int lcodes, int dcodes, int blcodes) { }

	// RVA: 0x1E73CD8 Offset: 0x1E73CD8 VA: 0x1E73CD8
	internal void send_tree(short[] tree, int max_code) { }

	// RVA: 0x1E74024 Offset: 0x1E74024 VA: 0x1E74024
	private void put_bytes(byte[] p, int start, int len) { }

	// RVA: 0x1E73F90 Offset: 0x1E73F90 VA: 0x1E73F90
	internal void send_code(int c, short[] tree) { }

	// RVA: 0x1E73B40 Offset: 0x1E73B40 VA: 0x1E73B40
	internal void send_bits(int value, int length) { }

	// RVA: 0x1E74070 Offset: 0x1E74070 VA: 0x1E74070
	internal void _tr_align() { }

	// RVA: 0x1E74304 Offset: 0x1E74304 VA: 0x1E74304
	internal bool _tr_tally(int dist, int lc) { }

	// RVA: 0x1E747E0 Offset: 0x1E747E0 VA: 0x1E747E0
	internal void send_compressed_block(short[] ltree, short[] dtree) { }

	// RVA: 0x1E74C08 Offset: 0x1E74C08 VA: 0x1E74C08
	internal void set_data_type() { }

	// RVA: 0x1E741D8 Offset: 0x1E741D8 VA: 0x1E741D8
	internal void bi_flush() { }

	// RVA: 0x1E74DDC Offset: 0x1E74DDC VA: 0x1E74DDC
	internal void bi_windup() { }

	// RVA: 0x1E74EE8 Offset: 0x1E74EE8 VA: 0x1E74EE8
	internal void copy_block(int buf, int len, bool header) { }

	// RVA: 0x1E75064 Offset: 0x1E75064 VA: 0x1E75064
	internal void flush_block_only(bool eof) { }

	// RVA: 0x1E7533C Offset: 0x1E7533C VA: 0x1E7533C
	internal BlockState DeflateNone(FlushType flush) { }

	// RVA: 0x1E758AC Offset: 0x1E758AC VA: 0x1E758AC
	internal void _tr_stored_block(int buf, int stored_len, bool eof) { }

	// RVA: 0x1E750E0 Offset: 0x1E750E0 VA: 0x1E750E0
	internal void _tr_flush_block(int buf, int stored_len, bool eof) { }

	// RVA: 0x1E7550C Offset: 0x1E7550C VA: 0x1E7550C
	private void _fillWindow() { }

	// RVA: 0x1E75968 Offset: 0x1E75968 VA: 0x1E75968
	internal BlockState DeflateFast(FlushType flush) { }

	// RVA: 0x1E76A00 Offset: 0x1E76A00 VA: 0x1E76A00
	internal BlockState DeflateSlow(FlushType flush) { }

	// RVA: 0x1E7605C Offset: 0x1E7605C VA: 0x1E7605C
	internal int longest_match(int cur_match) { }

	// RVA: 0x1E771E8 Offset: 0x1E771E8 VA: 0x1E771E8
	internal bool get_WantRfc1950HeaderBytes() { }

	// RVA: 0x1E771F0 Offset: 0x1E771F0 VA: 0x1E771F0
	internal void set_WantRfc1950HeaderBytes(bool value) { }

	// RVA: 0x1E771FC Offset: 0x1E771FC VA: 0x1E771FC
	internal int Initialize(ZlibCodec codec, CompressionLevel level) { }

	// RVA: 0x1E77218 Offset: 0x1E77218 VA: 0x1E77218
	internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits) { }

	// RVA: 0x1E77570 Offset: 0x1E77570 VA: 0x1E77570
	internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy) { }

	// RVA: 0x1E772BC Offset: 0x1E772BC VA: 0x1E772BC
	internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy) { }

	// RVA: 0x1E77618 Offset: 0x1E77618 VA: 0x1E77618
	internal void Reset() { }

	// RVA: 0x1E77770 Offset: 0x1E77770 VA: 0x1E77770
	internal int End() { }

	// RVA: 0x1E7250C Offset: 0x1E7250C VA: 0x1E7250C
	private void SetDeflater() { }

	// RVA: 0x1E7789C Offset: 0x1E7789C VA: 0x1E7789C
	internal int SetParams(CompressionLevel level, CompressionStrategy strategy) { }

	// RVA: 0x1E779B8 Offset: 0x1E779B8 VA: 0x1E779B8
	internal int SetDictionary(byte[] dictionary) { }

	// RVA: 0x1E77D94 Offset: 0x1E77D94 VA: 0x1E77D94
	internal int Deflate(FlushType flush) { }

	// RVA: 0x1E78A0C Offset: 0x1E78A0C VA: 0x1E78A0C
	private static void .cctor() { }
}

// Namespace: 
internal sealed class DeflateManager.CompressFunc : MulticastDelegate // TypeDefIndex: 4316
{
	// Methods

	// RVA: 0x1E7788C Offset: 0x1E7788C VA: 0x1E7788C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1E787DC Offset: 0x1E787DC VA: 0x1E787DC Slot: 11
	public virtual BlockState Invoke(FlushType flush) { }

	// RVA: 0x1E78EFC Offset: 0x1E78EFC VA: 0x1E78EFC Slot: 12
	public virtual IAsyncResult BeginInvoke(FlushType flush, AsyncCallback callback, object object) { }

	// RVA: 0x1E78F88 Offset: 0x1E78F88 VA: 0x1E78F88 Slot: 13
	public virtual BlockState EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class DeflateManager.Config // TypeDefIndex: 4317
{
	// Fields
	internal int GoodLength; // 0x10
	internal int MaxLazy; // 0x14
	internal int NiceLength; // 0x18
	internal int MaxChainLength; // 0x1C
	internal DeflateFlavor Flavor; // 0x20
	private static readonly DeflateManager.Config[] Table; // 0x0

	// Methods

	// RVA: 0x1E78FC4 Offset: 0x1E78FC4 VA: 0x1E78FC4
	private void .ctor(int goodLength, int maxLazy, int niceLength, int maxChainLength, DeflateFlavor flavor) { }

	// RVA: 0x1E79018 Offset: 0x1E79018 VA: 0x1E79018
	private static void .cctor() { }

	// RVA: 0x1E7246C Offset: 0x1E7246C VA: 0x1E7246C
	public static DeflateManager.Config Lookup(CompressionLevel level) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal class DeflateStream : Stream // TypeDefIndex: 4318
{
	// Fields
	internal ZlibBaseStream _baseStream; // 0x10
	internal Stream _innerStream; // 0x18
	private bool _disposed; // 0x20

	// Properties
	public virtual FlushType FlushMode { get; set; }
	public int BufferSize { get; set; }
	public CompressionStrategy Strategy { get; set; }
	public virtual long TotalIn { get; }
	public virtual long TotalOut { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1E794F0 Offset: 0x1E794F0 VA: 0x1E794F0
	public void .ctor(Stream stream, CompressionMode mode) { }

	// RVA: 0x1E795C0 Offset: 0x1E795C0 VA: 0x1E795C0
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level) { }

	// RVA: 0x1E795C8 Offset: 0x1E795C8 VA: 0x1E795C8
	public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen) { }

	// RVA: 0x1E794FC Offset: 0x1E794FC VA: 0x1E794FC
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen) { }

	// RVA: 0x1E795E0 Offset: 0x1E795E0 VA: 0x1E795E0
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen, int windowBits) { }

	// RVA: 0x1E797D4 Offset: 0x1E797D4 VA: 0x1E797D4 Slot: 29
	public virtual FlushType get_FlushMode() { }

	// RVA: 0x1E79800 Offset: 0x1E79800 VA: 0x1E79800 Slot: 30
	public virtual void set_FlushMode(FlushType value) { }

	// RVA: 0x1E798AC Offset: 0x1E798AC VA: 0x1E798AC
	public int get_BufferSize() { }

	// RVA: 0x1E798D8 Offset: 0x1E798D8 VA: 0x1E798D8
	public void set_BufferSize(int value) { }

	// RVA: 0x1E79A7C Offset: 0x1E79A7C VA: 0x1E79A7C
	public CompressionStrategy get_Strategy() { }

	// RVA: 0x1E79AA8 Offset: 0x1E79AA8 VA: 0x1E79AA8
	public void set_Strategy(CompressionStrategy value) { }

	// RVA: 0x1E79B54 Offset: 0x1E79B54 VA: 0x1E79B54 Slot: 31
	public virtual long get_TotalIn() { }

	// RVA: 0x1E79B90 Offset: 0x1E79B90 VA: 0x1E79B90 Slot: 32
	public virtual long get_TotalOut() { }

	// RVA: 0x1E79BCC Offset: 0x1E79BCC VA: 0x1E79BCC Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x1E79C70 Offset: 0x1E79C70 VA: 0x1E79C70 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x1E79D28 Offset: 0x1E79D28 VA: 0x1E79D28 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x1E79D30 Offset: 0x1E79D30 VA: 0x1E79D30 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x1E79DE8 Offset: 0x1E79DE8 VA: 0x1E79DE8 Slot: 18
	public override void Flush() { }

	// RVA: 0x1E79E94 Offset: 0x1E79E94 VA: 0x1E79E94 Slot: 9
	public override long get_Length() { }

	// RVA: 0x1E79EFC Offset: 0x1E79EFC VA: 0x1E79EFC Slot: 10
	public override long get_Position() { }

	// RVA: 0x1E79FA0 Offset: 0x1E79FA0 VA: 0x1E79FA0 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x1E7A008 Offset: 0x1E7A008 VA: 0x1E7A008 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E7A0DC Offset: 0x1E7A0DC VA: 0x1E7A0DC Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1E7A144 Offset: 0x1E7A144 VA: 0x1E7A144 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x1E7A184 Offset: 0x1E7A184 VA: 0x1E7A184 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x1E7A258 Offset: 0x1E7A258 VA: 0x1E7A258
	public static byte[] CompressString(string s) { }

	// RVA: 0x1E7A564 Offset: 0x1E7A564 VA: 0x1E7A564
	public static byte[] CompressBuffer(byte[] b) { }

	// RVA: 0x1E7A828 Offset: 0x1E7A828 VA: 0x1E7A828
	public static string UncompressString(byte[] compressed) { }

	// RVA: 0x1E7ACF0 Offset: 0x1E7ACF0 VA: 0x1E7ACF0
	public static byte[] UncompressBuffer(byte[] compressed) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal class GZipStream : Stream // TypeDefIndex: 4319
{
	// Fields
	public Nullable<DateTime> LastModified; // 0x10
	private int _headerByteCount; // 0x28
	internal ZlibBaseStream _baseStream; // 0x30
	private bool _disposed; // 0x38
	private bool _firstReadDone; // 0x39
	private string _FileName; // 0x40
	private string _Comment; // 0x48
	private int _Crc32; // 0x50
	internal static readonly DateTime _unixEpoch; // 0x0
	internal static readonly Encoding iso8859dash1; // 0x10

	// Properties
	public string Comment { get; set; }
	public string FileName { get; set; }
	public int Crc32 { get; }
	public virtual FlushType FlushMode { get; set; }
	public int BufferSize { get; set; }
	public virtual long TotalIn { get; }
	public virtual long TotalOut { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x1E7B130 Offset: 0x1E7B130 VA: 0x1E7B130
	public void .ctor(Stream stream, CompressionMode mode) { }

	// RVA: 0x1E7B1FC Offset: 0x1E7B1FC VA: 0x1E7B1FC
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level) { }

	// RVA: 0x1E7B204 Offset: 0x1E7B204 VA: 0x1E7B204
	public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen) { }

	// RVA: 0x1E7B13C Offset: 0x1E7B13C VA: 0x1E7B13C
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen) { }

	// RVA: 0x1E7B210 Offset: 0x1E7B210 VA: 0x1E7B210
	public string get_Comment() { }

	// RVA: 0x1E7B218 Offset: 0x1E7B218 VA: 0x1E7B218
	public void set_Comment(string value) { }

	// RVA: 0x1E7B2B4 Offset: 0x1E7B2B4 VA: 0x1E7B2B4
	public string get_FileName() { }

	// RVA: 0x1E7B2BC Offset: 0x1E7B2BC VA: 0x1E7B2BC
	public void set_FileName(string value) { }

	// RVA: 0x1E7B460 Offset: 0x1E7B460 VA: 0x1E7B460
	public int get_Crc32() { }

	// RVA: 0x1E7B468 Offset: 0x1E7B468 VA: 0x1E7B468 Slot: 29
	public virtual FlushType get_FlushMode() { }

	// RVA: 0x1E7B494 Offset: 0x1E7B494 VA: 0x1E7B494 Slot: 30
	public virtual void set_FlushMode(FlushType value) { }
