
	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x22300FC Offset: 0x22300FC VA: 0x22300FC
	public void .ctor(Stream[] streams) { }

	// RVA: 0x22472F4 Offset: 0x22472F4 VA: 0x22472F4 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x224739C Offset: 0x224739C VA: 0x224739C Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x22473A4 Offset: 0x22473A4 VA: 0x22473A4 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x224744C Offset: 0x224744C VA: 0x224744C Slot: 18
	public override void Flush() { }

	// RVA: 0x2247504 Offset: 0x2247504 VA: 0x2247504 Slot: 9
	public override long get_Length() { }

	// RVA: 0x22475E0 Offset: 0x22475E0 VA: 0x22475E0 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2247750 Offset: 0x2247750 VA: 0x2247750 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x223017C Offset: 0x223017C VA: 0x223017C
	public void Write(string str) { }

	// RVA: 0x224781C Offset: 0x224781C VA: 0x224781C Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2247A44 Offset: 0x2247A44 VA: 0x2247A44 Slot: 10
	public override long get_Position() { }

	// RVA: 0x2247AB8 Offset: 0x2247AB8 VA: 0x2247AB8 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2247B2C Offset: 0x2247B2C VA: 0x2247B2C Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2247BF4 Offset: 0x2247BF4 VA: 0x2247BF4 Slot: 22
	public override void SetLength(long value) { }
}

// Namespace: BestHTTP
internal sealed class FileConnection : ConnectionBase // TypeDefIndex: 4309
{
	// Methods

	// RVA: 0x222F77C Offset: 0x222F77C VA: 0x222F77C
	public void .ctor(string serverAddress) { }

	// RVA: 0x222F784 Offset: 0x222F784 VA: 0x222F784 Slot: 6
	internal override void Abort(HTTPConnectionStates newState) { }

	// RVA: 0x222F860 Offset: 0x222F860 VA: 0x222F860 Slot: 7
	protected override void ThreadFunc(object param) { }
}

// Namespace: BestHTTP.Cookies
public sealed class Cookie : IComparable<Cookie>, IEquatable<Cookie> // TypeDefIndex: 4310
{
	// Fields
	private const int Version = 1;
	[CompilerGeneratedAttribute] // RVA: 0xCB4320 Offset: 0xCB4320 VA: 0xCB4320
	[DebuggerBrowsableAttribute] // RVA: 0xCB4320 Offset: 0xCB4320 VA: 0xCB4320
	private string <Name>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCB435C Offset: 0xCB435C VA: 0xCB435C
	[DebuggerBrowsableAttribute] // RVA: 0xCB435C Offset: 0xCB435C VA: 0xCB435C
	private string <Value>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCB4398 Offset: 0xCB4398 VA: 0xCB4398
	[DebuggerBrowsableAttribute] // RVA: 0xCB4398 Offset: 0xCB4398 VA: 0xCB4398
	private DateTime <Date>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCB43D4 Offset: 0xCB43D4 VA: 0xCB43D4
	[DebuggerBrowsableAttribute] // RVA: 0xCB43D4 Offset: 0xCB43D4 VA: 0xCB43D4
	private DateTime <LastAccess>k__BackingField; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCB4410 Offset: 0xCB4410 VA: 0xCB4410
	[DebuggerBrowsableAttribute] // RVA: 0xCB4410 Offset: 0xCB4410 VA: 0xCB4410
	private DateTime <Expires>k__BackingField; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCB444C Offset: 0xCB444C VA: 0xCB444C
	[DebuggerBrowsableAttribute] // RVA: 0xCB444C Offset: 0xCB444C VA: 0xCB444C
	private long <MaxAge>k__BackingField; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xCB4488 Offset: 0xCB4488 VA: 0xCB4488
	[DebuggerBrowsableAttribute] // RVA: 0xCB4488 Offset: 0xCB4488 VA: 0xCB4488
	private bool <IsSession>k__BackingField; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCB44C4 Offset: 0xCB44C4 VA: 0xCB44C4
	[DebuggerBrowsableAttribute] // RVA: 0xCB44C4 Offset: 0xCB44C4 VA: 0xCB44C4
	private string <Domain>k__BackingField; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCB4500 Offset: 0xCB4500 VA: 0xCB4500
	[DebuggerBrowsableAttribute] // RVA: 0xCB4500 Offset: 0xCB4500 VA: 0xCB4500
	private string <Path>k__BackingField; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCB453C Offset: 0xCB453C VA: 0xCB453C
	[DebuggerBrowsableAttribute] // RVA: 0xCB453C Offset: 0xCB453C VA: 0xCB453C
	private bool <IsSecure>k__BackingField; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCB4578 Offset: 0xCB4578 VA: 0xCB4578
	[DebuggerBrowsableAttribute] // RVA: 0xCB4578 Offset: 0xCB4578 VA: 0xCB4578
	private bool <IsHttpOnly>k__BackingField; // 0x71
	[CompilerGeneratedAttribute] // RVA: 0xCB45B4 Offset: 0xCB45B4 VA: 0xCB45B4
	private static Func<char, bool> <>f__am$cache0; // 0x0

	// Properties
	public string Name { get; set; }
	public string Value { get; set; }
	public DateTime Date { get; set; }
	public DateTime LastAccess { get; set; }
	public DateTime Expires { get; set; }
	public long MaxAge { get; set; }
	public bool IsSession { get; set; }
	public string Domain { get; set; }
	public string Path { get; set; }
	public bool IsSecure { get; set; }
	public bool IsHttpOnly { get; set; }

	// Methods

	// RVA: 0x22F674C Offset: 0x22F674C VA: 0x22F674C
	public void .ctor(string name, string value) { }

	// RVA: 0x22F6834 Offset: 0x22F6834 VA: 0x22F6834
	public void .ctor(string name, string value, string path) { }

	// RVA: 0x22F67EC Offset: 0x22F67EC VA: 0x22F67EC
	public void .ctor(string name, string value, string path, string domain) { }

	// RVA: 0x22F6974 Offset: 0x22F6974 VA: 0x22F6974
	public void .ctor(Uri uri, string name, string value, DateTime expires, bool isSession = True) { }

	// RVA: 0x22F6A90 Offset: 0x22F6A90 VA: 0x22F6A90
	public void .ctor(Uri uri, string name, string value, long maxAge = -1, bool isSession = True) { }

	// RVA: 0x22F68CC Offset: 0x22F68CC VA: 0x22F68CC
	internal void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33848 Offset: 0xD33848 VA: 0xD33848
	// RVA: 0x22F6B9C Offset: 0x22F6B9C VA: 0x22F6B9C
	public string get_Name() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33858 Offset: 0xD33858 VA: 0xD33858
	// RVA: 0x22F6954 Offset: 0x22F6954 VA: 0x22F6954
	private void set_Name(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33868 Offset: 0xD33868 VA: 0xD33868
	// RVA: 0x22F6BA4 Offset: 0x22F6BA4 VA: 0x22F6BA4
	public string get_Value() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33878 Offset: 0xD33878 VA: 0xD33878
	// RVA: 0x22F695C Offset: 0x22F695C VA: 0x22F695C
	private void set_Value(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33888 Offset: 0xD33888 VA: 0xD33888
	// RVA: 0x22F6BAC Offset: 0x22F6BAC VA: 0x22F6BAC
	public DateTime get_Date() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33898 Offset: 0xD33898 VA: 0xD33898
	// RVA: 0x22F6A88 Offset: 0x22F6A88 VA: 0x22F6A88
	internal void set_Date(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD338A8 Offset: 0xD338A8 VA: 0xD338A8
	// RVA: 0x22F6BB8 Offset: 0x22F6BB8 VA: 0x22F6BB8
	public DateTime get_LastAccess() { }

	[CompilerGeneratedAttribute] // RVA: 0xD338B8 Offset: 0xD338B8 VA: 0xD338B8
	// RVA: 0x22F6B94 Offset: 0x22F6B94 VA: 0x22F6B94
	public void set_LastAccess(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD338C8 Offset: 0xD338C8 VA: 0xD338C8
	// RVA: 0x22F6BC4 Offset: 0x22F6BC4 VA: 0x22F6BC4
	public DateTime get_Expires() { }

	[CompilerGeneratedAttribute] // RVA: 0xD338D8 Offset: 0xD338D8 VA: 0xD338D8
	// RVA: 0x22F6A74 Offset: 0x22F6A74 VA: 0x22F6A74
	private void set_Expires(DateTime value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD338E8 Offset: 0xD338E8 VA: 0xD338E8
	// RVA: 0x22F6BD0 Offset: 0x22F6BD0 VA: 0x22F6BD0
	public long get_MaxAge() { }

	[CompilerGeneratedAttribute] // RVA: 0xD338F8 Offset: 0xD338F8 VA: 0xD338F8
	// RVA: 0x22F6B8C Offset: 0x22F6B8C VA: 0x22F6B8C
	private void set_MaxAge(long value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33908 Offset: 0xD33908 VA: 0xD33908
	// RVA: 0x22F6BD8 Offset: 0x22F6BD8 VA: 0x22F6BD8
	public bool get_IsSession() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33918 Offset: 0xD33918 VA: 0xD33918
	// RVA: 0x22F6A7C Offset: 0x22F6A7C VA: 0x22F6A7C
	private void set_IsSession(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33928 Offset: 0xD33928 VA: 0xD33928
	// RVA: 0x22F6BE0 Offset: 0x22F6BE0 VA: 0x22F6BE0
	public string get_Domain() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33938 Offset: 0xD33938 VA: 0xD33938
	// RVA: 0x22F696C Offset: 0x22F696C VA: 0x22F696C
	private void set_Domain(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33948 Offset: 0xD33948 VA: 0xD33948
	// RVA: 0x22F6BE8 Offset: 0x22F6BE8 VA: 0x22F6BE8
	public string get_Path() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33958 Offset: 0xD33958 VA: 0xD33958
	// RVA: 0x22F6964 Offset: 0x22F6964 VA: 0x22F6964
	private void set_Path(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33968 Offset: 0xD33968 VA: 0xD33968
	// RVA: 0x22F6BF0 Offset: 0x22F6BF0 VA: 0x22F6BF0
	public bool get_IsSecure() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33978 Offset: 0xD33978 VA: 0xD33978
	// RVA: 0x22F6BF8 Offset: 0x22F6BF8 VA: 0x22F6BF8
	private void set_IsSecure(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD33988 Offset: 0xD33988 VA: 0xD33988
	// RVA: 0x22F6C04 Offset: 0x22F6C04 VA: 0x22F6C04
	public bool get_IsHttpOnly() { }

	[CompilerGeneratedAttribute] // RVA: 0xD33998 Offset: 0xD33998 VA: 0xD33998
	// RVA: 0x22F6C0C Offset: 0x22F6C0C VA: 0x22F6C0C
	private void set_IsHttpOnly(bool value) { }

	// RVA: 0x22F6C18 Offset: 0x22F6C18 VA: 0x22F6C18
	public bool WillExpireInTheFuture() { }

	// RVA: 0x22F6D2C Offset: 0x22F6D2C VA: 0x22F6D2C
	public uint GuessSize() { }

	// RVA: 0x22F6DD0 Offset: 0x22F6DD0 VA: 0x22F6DD0
	public static Cookie Parse(string header, Uri defaultDomain) { }

	// RVA: 0x22F7864 Offset: 0x22F7864 VA: 0x22F7864
	internal void SaveTo(BinaryWriter stream) { }

	// RVA: 0x22F7AE0 Offset: 0x22F7AE0 VA: 0x22F7AE0
	internal void LoadFrom(BinaryReader stream) { }

	// RVA: 0x22F7CD4 Offset: 0x22F7CD4 VA: 0x22F7CD4 Slot: 3
	public override string ToString() { }

	// RVA: 0x22F7D54 Offset: 0x22F7D54 VA: 0x22F7D54 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22F7DD4 Offset: 0x22F7DD4 VA: 0x22F7DD4 Slot: 5
	public bool Equals(Cookie cookie) { }

	// RVA: 0x22F7EA8 Offset: 0x22F7EA8 VA: 0x22F7EA8 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x22F7EE4 Offset: 0x22F7EE4 VA: 0x22F7EE4
	private static string ReadValue(string str, ref int pos) { }

	// RVA: 0x22F765C Offset: 0x22F765C VA: 0x22F765C
	private static List<HeaderValue> ParseCookieHeader(string str) { }

	// RVA: 0x22F7F88 Offset: 0x22F7F88 VA: 0x22F7F88 Slot: 4
	public int CompareTo(Cookie other) { }

	[CompilerGeneratedAttribute] // RVA: 0xD339A8 Offset: 0xD339A8 VA: 0xD339A8
	// RVA: 0x22F7FD0 Offset: 0x22F7FD0 VA: 0x22F7FD0
	private static bool <ParseCookieHeader>m__0(char ch) { }
}

// Namespace: BestHTTP.Cookies
public static class CookieJar // TypeDefIndex: 4311
{
	// Fields
	private const int Version = 1;
	private static List<Cookie> Cookies; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCB45C4 Offset: 0xCB45C4 VA: 0xCB45C4
	[DebuggerBrowsableAttribute] // RVA: 0xCB45C4 Offset: 0xCB45C4 VA: 0xCB45C4
	private static string <CookieFolder>k__BackingField; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCB4600 Offset: 0xCB4600 VA: 0xCB4600
	[DebuggerBrowsableAttribute] // RVA: 0xCB4600 Offset: 0xCB4600 VA: 0xCB4600
	private static string <LibraryPath>k__BackingField; // 0x10
	private static object Locker; // 0x18
	private static bool _isSavingSupported; // 0x20
	private static bool IsSupportCheckDone; // 0x21
	private static bool Loaded; // 0x22

	// Properties
	public static bool IsSavingSupported { get; }
	private static string CookieFolder { get; set; }
	private static string LibraryPath { get; set; }

	// Methods

	// RVA: 0x22F7FEC Offset: 0x22F7FEC VA: 0x22F7FEC
	public static bool get_IsSavingSupported() { }

	[CompilerGeneratedAttribute] // RVA: 0xD339B8 Offset: 0xD339B8 VA: 0xD339B8
	// RVA: 0x22F8324 Offset: 0x22F8324 VA: 0x22F8324
	private static string get_CookieFolder() { }

	[CompilerGeneratedAttribute] // RVA: 0xD339C8 Offset: 0xD339C8 VA: 0xD339C8
	// RVA: 0x22F838C Offset: 0x22F838C VA: 0x22F838C
	private static void set_CookieFolder(string value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD339D8 Offset: 0xD339D8 VA: 0xD339D8
	// RVA: 0x22F83F8 Offset: 0x22F83F8 VA: 0x22F83F8
	private static string get_LibraryPath() { }

	[CompilerGeneratedAttribute] // RVA: 0xD339E8 Offset: 0xD339E8 VA: 0xD339E8
	// RVA: 0x22F8460 Offset: 0x22F8460 VA: 0x22F8460
	private static void set_LibraryPath(string value) { }

	// RVA: 0x22F84CC Offset: 0x22F84CC VA: 0x22F84CC
	internal static void SetupFolder() { }

	// RVA: 0x22F8704 Offset: 0x22F8704 VA: 0x22F8704
	internal static void Set(HTTPResponse response) { }

	// RVA: 0x22F8CFC Offset: 0x22F8CFC VA: 0x22F8CFC
	internal static void Maintain() { }

	// RVA: 0x22F9358 Offset: 0x22F9358 VA: 0x22F9358
	internal static void Persist() { }

	// RVA: 0x22F9A90 Offset: 0x22F9A90 VA: 0x22F9A90
	internal static void Load() { }

	// RVA: 0x22FA1C4 Offset: 0x22FA1C4 VA: 0x22FA1C4
	public static List<Cookie> Get(Uri uri) { }

	// RVA: 0x22FA498 Offset: 0x22FA498 VA: 0x22FA498
	public static void Set(Uri uri, Cookie cookie) { }

	// RVA: 0x22FA4FC Offset: 0x22FA4FC VA: 0x22FA4FC
	public static void Set(Cookie cookie) { }

	// RVA: 0x22FA69C Offset: 0x22FA69C VA: 0x22FA69C
	public static List<Cookie> GetAll() { }

	// RVA: 0x22FA788 Offset: 0x22FA788 VA: 0x22FA788
	public static void Clear() { }

	// RVA: 0x22FA89C Offset: 0x22FA89C VA: 0x22FA89C
	public static void Clear(TimeSpan olderThan) { }

	// RVA: 0x22FAB64 Offset: 0x22FAB64 VA: 0x22FAB64
	public static void Clear(string domain) { }

	// RVA: 0x22FADD8 Offset: 0x22FADD8 VA: 0x22FADD8
	public static void Remove(Uri uri, string name) { }

	// RVA: 0x22F9228 Offset: 0x22F9228 VA: 0x22F9228
	private static Cookie Find(Cookie cookie, out int idx) { }

	// RVA: 0x22FB090 Offset: 0x22FB090 VA: 0x22FB090
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Crc
internal class CRC32 // TypeDefIndex: 4312
{
	// Fields
	private uint dwPolynomial; // 0x10
	private long _TotalBytesRead; // 0x18
	private bool reverseBits; // 0x20
	private uint[] crc32Table; // 0x28
	private const int BUFFER_SIZE = 8192;
	private uint _register; // 0x30

	// Properties
	public long TotalBytesRead { get; }
	public int Crc32Result { get; }

	// Methods

	// RVA: 0x22FB12C Offset: 0x22FB12C VA: 0x22FB12C
	public void .ctor() { }

	// RVA: 0x22FB16C Offset: 0x22FB16C VA: 0x22FB16C
	public void .ctor(bool reverseBits) { }

	// RVA: 0x22FB1B4 Offset: 0x22FB1B4 VA: 0x22FB1B4
	public void .ctor(int polynomial, bool reverseBits) { }

	// RVA: 0x22FB36C Offset: 0x22FB36C VA: 0x22FB36C
	public long get_TotalBytesRead() { }

	// RVA: 0x22FB374 Offset: 0x22FB374 VA: 0x22FB374
	public int get_Crc32Result() { }

	// RVA: 0x22FB380 Offset: 0x22FB380 VA: 0x22FB380
	public int GetCrc32(Stream input) { }

	// RVA: 0x22FB388 Offset: 0x22FB388 VA: 0x22FB388
	public int GetCrc32AndCopy(Stream input, Stream output) { }

	// RVA: 0x22FB654 Offset: 0x22FB654 VA: 0x22FB654
	public int ComputeCrc32(int W, byte B) { }

	// RVA: 0x22FB658 Offset: 0x22FB658 VA: 0x22FB658
	internal int _InternalComputeCrc32(uint W, byte B) { }

	// RVA: 0x22FB4CC Offset: 0x22FB4CC VA: 0x22FB4CC
	public void SlurpBlock(byte[] block, int offset, int count) { }

	// RVA: 0x22FB6C0 Offset: 0x22FB6C0 VA: 0x22FB6C0
	public void UpdateCRC(byte b) { }

	// RVA: 0x22FB778 Offset: 0x22FB778 VA: 0x22FB778
	public void UpdateCRC(byte b, int n) { }

	// RVA: 0x22FB860 Offset: 0x22FB860 VA: 0x22FB860
	private static uint ReverseBits(uint data) { }

	// RVA: 0x22FB868 Offset: 0x22FB868 VA: 0x22FB868
	private static byte ReverseBits(byte data) { }

	// RVA: 0x22FB200 Offset: 0x22FB200 VA: 0x22FB200
	private void GenerateLookupTable() { }

	// RVA: 0x22FB8B4 Offset: 0x22FB8B4 VA: 0x22FB8B4
	private uint gf2_matrix_times(uint[] matrix, uint vec) { }

	// RVA: 0x22FB940 Offset: 0x22FB940 VA: 0x22FB940
	private void gf2_matrix_square(uint[] square, uint[] mat) { }

	// RVA: 0x22FB9EC Offset: 0x22FB9EC VA: 0x22FB9EC
	public void Combine(int crc, int length) { }

	// RVA: 0x22FBB68 Offset: 0x22FBB68 VA: 0x22FBB68
	public void Reset() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal enum BlockState // TypeDefIndex: 4313
{
	// Fields
	public int value__; // 0x0
	public const BlockState NeedMore = 0;
	public const BlockState BlockDone = 1;
	public const BlockState FinishStarted = 2;
	public const BlockState FinishDone = 3;
}

// Namespace: BestHTTP.Decompression.Zlib
internal enum DeflateFlavor // TypeDefIndex: 4314
{
	// Fields
	public int value__; // 0x0
	public const DeflateFlavor Store = 0;
	public const DeflateFlavor Fast = 1;
	public const DeflateFlavor Slow = 2;
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class DeflateManager // TypeDefIndex: 4315
{
	// Fields
	private static readonly int MEM_LEVEL_MAX; // 0x0
	private static readonly int MEM_LEVEL_DEFAULT; // 0x4
	private DeflateManager.CompressFunc DeflateFunction; // 0x10
	private static readonly string[] _ErrorMessage; // 0x8
	private static readonly int PRESET_DICT; // 0x10
	private static readonly int INIT_STATE; // 0x14
	private static readonly int BUSY_STATE; // 0x18
	private static readonly int FINISH_STATE; // 0x1C
	private static readonly int Z_DEFLATED; // 0x20
	private static readonly int STORED_BLOCK; // 0x24
	private static readonly int STATIC_TREES; // 0x28
	private static readonly int DYN_TREES; // 0x2C
	private static readonly int Z_BINARY; // 0x30
	private static readonly int Z_ASCII; // 0x34
	private static readonly int Z_UNKNOWN; // 0x38
	private static readonly int Buf_size; // 0x3C
	private static readonly int MIN_MATCH; // 0x40
	private static readonly int MAX_MATCH; // 0x44
	private static readonly int MIN_LOOKAHEAD; // 0x48
	private static readonly int HEAP_SIZE; // 0x4C
	private static readonly int END_BLOCK; // 0x50
	internal ZlibCodec _codec; // 0x18
	internal int status; // 0x20
	internal byte[] pending; // 0x28
	internal int nextPending; // 0x30
	internal int pendingCount; // 0x34
	internal sbyte data_type; // 0x38
	internal int last_flush; // 0x3C
	internal int w_size; // 0x40
	internal int w_bits; // 0x44
	internal int w_mask; // 0x48
	internal byte[] window; // 0x50
	internal int window_size; // 0x58
	internal short[] prev; // 0x60
	internal short[] head; // 0x68
	internal int ins_h; // 0x70
	internal int hash_size; // 0x74
	internal int hash_bits; // 0x78
	internal int hash_mask; // 0x7C
	internal int hash_shift; // 0x80
	internal int block_start; // 0x84
	private DeflateManager.Config config; // 0x88
	internal int match_length; // 0x90
	internal int prev_match; // 0x94
	internal int match_available; // 0x98
	internal int strstart; // 0x9C
	internal int match_start; // 0xA0
	internal int lookahead; // 0xA4
	internal int prev_length; // 0xA8
	internal CompressionLevel compressionLevel; // 0xAC
	internal CompressionStrategy compressionStrategy; // 0xB0
	internal short[] dyn_ltree; // 0xB8
	internal short[] dyn_dtree; // 0xC0
	internal short[] bl_tree; // 0xC8
	internal ZTree treeLiterals; // 0xD0
	internal ZTree treeDistances; // 0xD8
	internal ZTree treeBitLengths; // 0xE0
	internal short[] bl_count; // 0xE8
	internal int[] heap; // 0xF0
	internal int heap_len; // 0xF8
	internal int heap_max; // 0xFC
	internal sbyte[] depth; // 0x100
	internal int _lengthOffset; // 0x108
	internal int lit_bufsize; // 0x10C
	internal int last_lit; // 0x110
	internal int _distanceOffset; // 0x114
	internal int opt_len; // 0x118
	internal int static_len; // 0x11C
	internal int matches; // 0x120
	internal int last_eob_len; // 0x124
	internal short bi_buf; // 0x128
	internal int bi_valid; // 0x12C
	private bool Rfc1950BytesEmitted; // 0x130
	private bool _WantRfc1950HeaderBytes; // 0x131

	// Properties
	internal bool WantRfc1950HeaderBytes { get; set; }

	// Methods

	// RVA: 0x22FC150 Offset: 0x22FC150 VA: 0x22FC150
	internal void .ctor() { }

	// RVA: 0x22FC318 Offset: 0x22FC318 VA: 0x22FC318
	private void _InitializeLazyMatch() { }

	// RVA: 0x22FC548 Offset: 0x22FC548 VA: 0x22FC548
	private void _InitializeTreeData() { }

	// RVA: 0x22FC66C Offset: 0x22FC66C VA: 0x22FC66C
	internal void _InitializeBlocks() { }

	// RVA: 0x22FC8A4 Offset: 0x22FC8A4 VA: 0x22FC8A4
	internal void pqdownheap(short[] tree, int k) { }

	// RVA: 0x22FCB34 Offset: 0x22FCB34 VA: 0x22FCB34
	internal static bool _IsSmaller(short[] tree, int n, int m, sbyte[] depth) { }

	// RVA: 0x22FCC4C Offset: 0x22FCC4C VA: 0x22FCC4C
	internal void scan_tree(short[] tree, int max_code) { }

	// RVA: 0x22FCFB8 Offset: 0x22FCFB8 VA: 0x22FCFB8
	internal int build_bl_tree() { }

	// RVA: 0x22FD958 Offset: 0x22FD958 VA: 0x22FD958
	internal void send_all_trees(int lcodes, int dcodes, int blcodes) { }

	// RVA: 0x22FDC68 Offset: 0x22FDC68 VA: 0x22FDC68
	internal void send_tree(short[] tree, int max_code) { }

	// RVA: 0x22FDFB4 Offset: 0x22FDFB4 VA: 0x22FDFB4
	private void put_bytes(byte[] p, int start, int len) { }

	// RVA: 0x22FDF20 Offset: 0x22FDF20 VA: 0x22FDF20
	internal void send_code(int c, short[] tree) { }

	// RVA: 0x22FDAD0 Offset: 0x22FDAD0 VA: 0x22FDAD0
	internal void send_bits(int value, int length) { }

	// RVA: 0x22FE000 Offset: 0x22FE000 VA: 0x22FE000
	internal void _tr_align() { }

	// RVA: 0x22FE294 Offset: 0x22FE294 VA: 0x22FE294
	internal bool _tr_tally(int dist, int lc) { }

	// RVA: 0x22FE770 Offset: 0x22FE770 VA: 0x22FE770
	internal void send_compressed_block(short[] ltree, short[] dtree) { }

	// RVA: 0x22FEB98 Offset: 0x22FEB98 VA: 0x22FEB98
	internal void set_data_type() { }

	// RVA: 0x22FE168 Offset: 0x22FE168 VA: 0x22FE168
	internal void bi_flush() { }

	// RVA: 0x22FED6C Offset: 0x22FED6C VA: 0x22FED6C
	internal void bi_windup() { }

	// RVA: 0x22FEE78 Offset: 0x22FEE78 VA: 0x22FEE78
	internal void copy_block(int buf, int len, bool header) { }

	// RVA: 0x22FEFF4 Offset: 0x22FEFF4 VA: 0x22FEFF4
	internal void flush_block_only(bool eof) { }

	// RVA: 0x22FF2CC Offset: 0x22FF2CC VA: 0x22FF2CC
	internal BlockState DeflateNone(FlushType flush) { }

	// RVA: 0x22FF83C Offset: 0x22FF83C VA: 0x22FF83C
	internal void _tr_stored_block(int buf, int stored_len, bool eof) { }

	// RVA: 0x22FF070 Offset: 0x22FF070 VA: 0x22FF070
	internal void _tr_flush_block(int buf, int stored_len, bool eof) { }

	// RVA: 0x22FF49C Offset: 0x22FF49C VA: 0x22FF49C
	private void _fillWindow() { }

	// RVA: 0x22FF8F8 Offset: 0x22FF8F8 VA: 0x22FF8F8
	internal BlockState DeflateFast(FlushType flush) { }

	// RVA: 0x2300990 Offset: 0x2300990 VA: 0x2300990
	internal BlockState DeflateSlow(FlushType flush) { }

	// RVA: 0x22FFFEC Offset: 0x22FFFEC VA: 0x22FFFEC
	internal int longest_match(int cur_match) { }

	// RVA: 0x2301178 Offset: 0x2301178 VA: 0x2301178
	internal bool get_WantRfc1950HeaderBytes() { }

	// RVA: 0x2301180 Offset: 0x2301180 VA: 0x2301180
	internal void set_WantRfc1950HeaderBytes(bool value) { }

	// RVA: 0x230118C Offset: 0x230118C VA: 0x230118C
	internal int Initialize(ZlibCodec codec, CompressionLevel level) { }

	// RVA: 0x23011A8 Offset: 0x23011A8 VA: 0x23011A8
	internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits) { }

	// RVA: 0x2301500 Offset: 0x2301500 VA: 0x2301500
	internal int Initialize(ZlibCodec codec, CompressionLevel level, int bits, CompressionStrategy compressionStrategy) { }

	// RVA: 0x230124C Offset: 0x230124C VA: 0x230124C
	internal int Initialize(ZlibCodec codec, CompressionLevel level, int windowBits, int memLevel, CompressionStrategy strategy) { }

	// RVA: 0x23015A8 Offset: 0x23015A8 VA: 0x23015A8
	internal void Reset() { }

	// RVA: 0x2301700 Offset: 0x2301700 VA: 0x2301700
	internal int End() { }

	// RVA: 0x22FC49C Offset: 0x22FC49C VA: 0x22FC49C
	private void SetDeflater() { }

	// RVA: 0x230182C Offset: 0x230182C VA: 0x230182C
	internal int SetParams(CompressionLevel level, CompressionStrategy strategy) { }

	// RVA: 0x2301948 Offset: 0x2301948 VA: 0x2301948
	internal int SetDictionary(byte[] dictionary) { }

	// RVA: 0x2301D24 Offset: 0x2301D24 VA: 0x2301D24
	internal int Deflate(FlushType flush) { }

	// RVA: 0x230299C Offset: 0x230299C VA: 0x230299C
	private static void .cctor() { }
}

// Namespace: 
internal sealed class DeflateManager.CompressFunc : MulticastDelegate // TypeDefIndex: 4316
{
	// Methods

	// RVA: 0x230181C Offset: 0x230181C VA: 0x230181C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x230276C Offset: 0x230276C VA: 0x230276C Slot: 11
	public virtual BlockState Invoke(FlushType flush) { }

	// RVA: 0x2302E8C Offset: 0x2302E8C VA: 0x2302E8C Slot: 12
	public virtual IAsyncResult BeginInvoke(FlushType flush, AsyncCallback callback, object object) { }

	// RVA: 0x2302F18 Offset: 0x2302F18 VA: 0x2302F18 Slot: 13
	public virtual BlockState EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class DeflateManager.Config // TypeDefIndex: 4317
{
	// Fields
	internal int GoodLength; // 0x10
	internal int MaxLazy; // 0x14
	internal int NiceLength; // 0x18
	internal int MaxChainLength; // 0x1C
	internal DeflateFlavor Flavor; // 0x20
	private static readonly DeflateManager.Config[] Table; // 0x0

	// Methods

	// RVA: 0x2302F54 Offset: 0x2302F54 VA: 0x2302F54
	private void .ctor(int goodLength, int maxLazy, int niceLength, int maxChainLength, DeflateFlavor flavor) { }

	// RVA: 0x2302FA8 Offset: 0x2302FA8 VA: 0x2302FA8
	private static void .cctor() { }

	// RVA: 0x22FC3FC Offset: 0x22FC3FC VA: 0x22FC3FC
	public static DeflateManager.Config Lookup(CompressionLevel level) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal class DeflateStream : Stream // TypeDefIndex: 4318
{
	// Fields
	internal ZlibBaseStream _baseStream; // 0x10
	internal Stream _innerStream; // 0x18
	private bool _disposed; // 0x20

	// Properties
	public virtual FlushType FlushMode { get; set; }
	public int BufferSize { get; set; }
	public CompressionStrategy Strategy { get; set; }
	public virtual long TotalIn { get; }
	public virtual long TotalOut { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x2303480 Offset: 0x2303480 VA: 0x2303480
	public void .ctor(Stream stream, CompressionMode mode) { }

	// RVA: 0x2303550 Offset: 0x2303550 VA: 0x2303550
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level) { }

	// RVA: 0x2303558 Offset: 0x2303558 VA: 0x2303558
	public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen) { }

	// RVA: 0x230348C Offset: 0x230348C VA: 0x230348C
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen) { }

	// RVA: 0x2303570 Offset: 0x2303570 VA: 0x2303570
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen, int windowBits) { }

	// RVA: 0x2303764 Offset: 0x2303764 VA: 0x2303764 Slot: 29
	public virtual FlushType get_FlushMode() { }

	// RVA: 0x2303790 Offset: 0x2303790 VA: 0x2303790 Slot: 30
	public virtual void set_FlushMode(FlushType value) { }

	// RVA: 0x230383C Offset: 0x230383C VA: 0x230383C
	public int get_BufferSize() { }

	// RVA: 0x2303868 Offset: 0x2303868 VA: 0x2303868
	public void set_BufferSize(int value) { }

	// RVA: 0x2303A0C Offset: 0x2303A0C VA: 0x2303A0C
	public CompressionStrategy get_Strategy() { }

	// RVA: 0x2303A38 Offset: 0x2303A38 VA: 0x2303A38
	public void set_Strategy(CompressionStrategy value) { }

	// RVA: 0x2303AE4 Offset: 0x2303AE4 VA: 0x2303AE4 Slot: 31
	public virtual long get_TotalIn() { }

	// RVA: 0x2303B20 Offset: 0x2303B20 VA: 0x2303B20 Slot: 32
	public virtual long get_TotalOut() { }

	// RVA: 0x2303B5C Offset: 0x2303B5C VA: 0x2303B5C Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2303C00 Offset: 0x2303C00 VA: 0x2303C00 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x2303CB8 Offset: 0x2303CB8 VA: 0x2303CB8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x2303CC0 Offset: 0x2303CC0 VA: 0x2303CC0 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2303D78 Offset: 0x2303D78 VA: 0x2303D78 Slot: 18
	public override void Flush() { }

	// RVA: 0x2303E24 Offset: 0x2303E24 VA: 0x2303E24 Slot: 9
	public override long get_Length() { }

	// RVA: 0x2303E8C Offset: 0x2303E8C VA: 0x2303E8C Slot: 10
	public override long get_Position() { }

	// RVA: 0x2303F30 Offset: 0x2303F30 VA: 0x2303F30 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2303F98 Offset: 0x2303F98 VA: 0x2303F98 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x230406C Offset: 0x230406C VA: 0x230406C Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x23040D4 Offset: 0x23040D4 VA: 0x23040D4 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2304114 Offset: 0x2304114 VA: 0x2304114 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x23041E8 Offset: 0x23041E8 VA: 0x23041E8
	public static byte[] CompressString(string s) { }

	// RVA: 0x23044F4 Offset: 0x23044F4 VA: 0x23044F4
	public static byte[] CompressBuffer(byte[] b) { }

	// RVA: 0x23047B8 Offset: 0x23047B8 VA: 0x23047B8
	public static string UncompressString(byte[] compressed) { }

	// RVA: 0x2304C80 Offset: 0x2304C80 VA: 0x2304C80
	public static byte[] UncompressBuffer(byte[] compressed) { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal class GZipStream : Stream // TypeDefIndex: 4319
{
	// Fields
	public Nullable<DateTime> LastModified; // 0x10
	private int _headerByteCount; // 0x28
	internal ZlibBaseStream _baseStream; // 0x30
	private bool _disposed; // 0x38
	private bool _firstReadDone; // 0x39
	private string _FileName; // 0x40
	private string _Comment; // 0x48
	private int _Crc32; // 0x50
	internal static readonly DateTime _unixEpoch; // 0x0
	internal static readonly Encoding iso8859dash1; // 0x10

	// Properties
	public string Comment { get; set; }
	public string FileName { get; set; }
	public int Crc32 { get; }
	public virtual FlushType FlushMode { get; set; }
	public int BufferSize { get; set; }
	public virtual long TotalIn { get; }
	public virtual long TotalOut { get; }
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x23050C0 Offset: 0x23050C0 VA: 0x23050C0
	public void .ctor(Stream stream, CompressionMode mode) { }

	// RVA: 0x230518C Offset: 0x230518C VA: 0x230518C
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level) { }

	// RVA: 0x2305194 Offset: 0x2305194 VA: 0x2305194
	public void .ctor(Stream stream, CompressionMode mode, bool leaveOpen) { }

	// RVA: 0x23050CC Offset: 0x23050CC VA: 0x23050CC
	public void .ctor(Stream stream, CompressionMode mode, CompressionLevel level, bool leaveOpen) { }

	// RVA: 0x23051A0 Offset: 0x23051A0 VA: 0x23051A0
	public string get_Comment() { }

	// RVA: 0x23051A8 Offset: 0x23051A8 VA: 0x23051A8
	public void set_Comment(string value) { }

	// RVA: 0x2305244 Offset: 0x2305244 VA: 0x2305244
	public string get_FileName() { }

	// RVA: 0x230524C Offset: 0x230524C VA: 0x230524C
	public void set_FileName(string value) { }

	// RVA: 0x23053F0 Offset: 0x23053F0 VA: 0x23053F0
	public int get_Crc32() { }

	// RVA: 0x23053F8 Offset: 0x23053F8 VA: 0x23053F8 Slot: 29
	public virtual FlushType get_FlushMode() { }

	// RVA: 0x2305424 Offset: 0x2305424 VA: 0x2305424 Slot: 30
	public virtual void set_FlushMode(FlushType value) { }

	// RVA: 0x23054D0 Offset: 0x23054D0 VA: 0x23054D0
	public int get_BufferSize() { }

	// RVA: 0x23054FC Offset: 0x23054FC VA: 0x23054FC
	public void set_BufferSize(int value) { }

	// RVA: 0x23056A0 Offset: 0x23056A0 VA: 0x23056A0 Slot: 31
	public virtual long get_TotalIn() { }

	// RVA: 0x23056DC Offset: 0x23056DC VA: 0x23056DC Slot: 32
	public virtual long get_TotalOut() { }

	// RVA: 0x2305718 Offset: 0x2305718 VA: 0x2305718 Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x2305810 Offset: 0x2305810 VA: 0x2305810 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x23058C8 Offset: 0x23058C8 VA: 0x23058C8 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x23058D0 Offset: 0x23058D0 VA: 0x23058D0 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x2305988 Offset: 0x2305988 VA: 0x2305988 Slot: 18
	public override void Flush() { }

	// RVA: 0x2305A34 Offset: 0x2305A34 VA: 0x2305A34 Slot: 9
	public override long get_Length() { }

	// RVA: 0x2305A9C Offset: 0x2305A9C VA: 0x2305A9C Slot: 10
	public override long get_Position() { }

	// RVA: 0x2305B5C Offset: 0x2305B5C VA: 0x2305B5C Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x2305BC4 Offset: 0x2305BC4 VA: 0x2305BC4 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x2305CEC Offset: 0x2305CEC VA: 0x2305CEC Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x2305D54 Offset: 0x2305D54 VA: 0x2305D54 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x2305DBC Offset: 0x2305DBC VA: 0x2305DBC Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x2305F00 Offset: 0x2305F00 VA: 0x2305F00
	private int EmitHeader() { }

	// RVA: 0x23063CC Offset: 0x23063CC VA: 0x23063CC
	public static byte[] CompressString(string s) { }

	// RVA: 0x2306550 Offset: 0x2306550 VA: 0x2306550
	public static byte[] CompressBuffer(byte[] b) { }

	// RVA: 0x23066D4 Offset: 0x23066D4 VA: 0x23066D4
	public static string UncompressString(byte[] compressed) { }

	// RVA: 0x2306838 Offset: 0x2306838 VA: 0x2306838
	public static byte[] UncompressBuffer(byte[] compressed) { }

	// RVA: 0x230699C Offset: 0x230699C VA: 0x230699C
	private static void .cctor() { }
}

// Namespace: BestHTTP.Decompression.Zlib
internal sealed class InflateBlocks // TypeDefIndex: 4320
{
	// Fields
	private const int MANY = 1440;
	internal static readonly int[] border; // 0x0
	private InflateBlocks.InflateBlockMode mode; // 0x10
	internal int left; // 0x14
	internal int table; // 0x18
	internal int index; // 0x1C
	internal int[] blens; // 0x20
	internal int[] bb; // 0x28
	internal int[] tb; // 0x30
	internal InflateCodes codes; // 0x38
	internal int last; // 0x40
	internal ZlibCodec _codec; // 0x48
	internal int bitk; // 0x50
	internal int bitb; // 0x54
	internal int[] hufts; // 0x58
	internal byte[] window; // 0x60
	internal int end; // 0x68
	internal int readAt; // 0x6C
	internal int writeAt; // 0x70
	internal object checkfn; // 0x78
	internal uint check; // 0x80
	internal InfTree inftree; // 0x88

	// Methods

	// RVA: 0x2308144 Offset: 0x2308144 VA: 0x2308144
	internal void .ctor(ZlibCodec codec, object checkfn, int w) { }

	// RVA: 0x2308258 Offset: 0x2308258 VA: 0x2308258
	internal uint Reset() { }

	// RVA: 0x230831C Offset: 0x230831C VA: 0x230831C
	internal int Process(int r) { }

	// RVA: 0x230AF40 Offset: 0x230AF40 VA: 0x230AF40
	internal void Free() { }

	// RVA: 0x230AF64 Offset: 0x230AF64 VA: 0x230AF64
	internal void SetDictionary(byte[] d, int start, int n) { }

	// RVA: 0x230AFA8 Offset: 0x230AFA8 VA: 0x230AFA8
	internal int SyncPoint() { }

	// RVA: 0x2309960 Offset: 0x2309960 VA: 0x2309960
	internal int Flush(int r) { }

	// RVA: 0x230AFB8 Offset: 0x230AFB8 VA: 0x230AFB8
	private static void .cctor() { }
}

