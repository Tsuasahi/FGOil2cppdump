	private void SetExceedableLabel(int commandCardParam, bool isShowExceedable) { }
}

// Namespace: 
public enum CombineCommandCardComponent.Kind // TypeDefIndex: 9481
{
	// Fields
	public int value__; // 0x0
	public const CombineCommandCardComponent.Kind LOCK = 0;
	public const CombineCommandCardComponent.Kind UNLOCK_NOT_EQUIP = 1;
	public const CombineCommandCardComponent.Kind EQUIPED = 2;
}

// Namespace: 
public class CombineCommandCardEquipmentComponent : MonoBehaviour // TypeDefIndex: 9482
{
	// Fields
	[SerializeField] // RVA: 0xCD4FBC Offset: 0xCD4FBC VA: 0xCD4FBC
	protected ServantFaceIconComponent icon; // 0x18
	[SerializeField] // RVA: 0xCD4FCC Offset: 0xCD4FCC VA: 0xCD4FCC
	protected UISprite raritySprite; // 0x20
	[SerializeField] // RVA: 0xCD4FDC Offset: 0xCD4FDC VA: 0xCD4FDC
	protected GameObject statusInfoObj; // 0x28
	[SerializeField] // RVA: 0xCD4FEC Offset: 0xCD4FEC VA: 0xCD4FEC
	protected UILabel statusInfoLabel; // 0x30
	[SerializeField] // RVA: 0xCD4FFC Offset: 0xCD4FFC VA: 0xCD4FFC
	private GameObject equippedInfo; // 0x38
	[SerializeField] // RVA: 0xCD500C Offset: 0xCD500C VA: 0xCD500C
	private UILabel equippedLabel; // 0x40
	[SerializeField] // RVA: 0xCD501C Offset: 0xCD501C VA: 0xCD501C
	private UILabel nameLabel; // 0x48
	private UserCommandCodeEntity userCommandCodeEntity; // 0x50

	// Methods

	// RVA: 0x15725BC Offset: 0x15725BC VA: 0x15725BC
	public void .ctor() { }

	// RVA: 0x15725C4 Offset: 0x15725C4 VA: 0x15725C4
	public void SetIcon(UserCommandCodeEntity userCommandCode, bool isEquipedCommandCode, bool DispEquippedInfo = False, int equippedSvtId = -1) { }

	// RVA: 0x1572818 Offset: 0x1572818 VA: 0x1572818
	public void SetEquippedInfo(bool DispInfo = False, int equippedSvtId = -1) { }

	// RVA: 0x157289C Offset: 0x157289C VA: 0x157289C
	public void SetIconNoDispStatus(UserCommandCodeEntity userCommandCode) { }

	// RVA: 0x1572A18 Offset: 0x1572A18 VA: 0x1572A18
	public void HideStatusInfo() { }
}

// Namespace: 
public class CombineCommandCodeListViewItem : ListViewItem // TypeDefIndex: 9483
{
	// Fields
	private bool isEquiped; // 0x70
	private bool isLock; // 0x71
	private bool isChoice; // 0x72
	private bool isSelect; // 0x73
	private bool isMaxEquiped; // 0x74
	private bool isSwapLock; // 0x75
	private bool isSwapChoice; // 0x76
	private bool isReplaceSource; // 0x77
	[CompilerGeneratedAttribute] // RVA: 0xCD502C Offset: 0xCD502C VA: 0xCD502C
	[DebuggerBrowsableAttribute] // RVA: 0xCD502C Offset: 0xCD502C VA: 0xCD502C
	private int <EquipedSvtId>k__BackingField; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCD5068 Offset: 0xCD5068 VA: 0xCD5068
	[DebuggerBrowsableAttribute] // RVA: 0xCD5068 Offset: 0xCD5068 VA: 0xCD5068
	private int <BaseSvtId>k__BackingField; // 0x7C
	private UserCommandCodeEntity userCommandCode; // 0x80
	protected CommandCodeEntity commandCodeEntity; // 0x88
	protected ObscuredInt commandCodeId; // 0x90
	protected int rarity; // 0xA0
	protected long amountSortValue; // 0xA8
	protected IconLabelInfo iconLabelInfo1; // 0xB0
	protected IconLabelInfo iconLabelInfo2; // 0xB8
	protected int[] commandCodeCategoryIdList; // 0xC0

	// Properties
	public int EquipedSvtId { get; set; }
	public int BaseSvtId { get; set; }
	public bool IsSelected { get; set; }
	public bool CanNotSelect { get; }
	public bool IsEquiped { get; }
	public bool IsMaxEquiped { get; }
	public bool IsLock { get; }
	public bool IsChoice { get; }
	public UserCommandCodeEntity UserCommandCode { get; }
	public int CommandCodeId { get; }
	public bool IsSwapLock { get; }
	public bool IsDispLock { get; }
	public bool IsSwapChoice { get; }
	public bool IsDispChoice { get; }
	public IconLabelInfo IconInfo1 { get; }
	public IconLabelInfo IconInfo2 { get; }

	// Methods

	// RVA: 0x1572A4C Offset: 0x1572A4C VA: 0x1572A4C
	public void .ctor(UserCommandCodeEntity userCommandCodeEntity, bool isReplaceSource, bool isEquiped, int equipedSvtId, int baseSvtId, bool isMax) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C8A4 Offset: 0xD3C8A4 VA: 0xD3C8A4
	// RVA: 0x1572CD4 Offset: 0x1572CD4 VA: 0x1572CD4
	public int get_EquipedSvtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C8B4 Offset: 0xD3C8B4 VA: 0xD3C8B4
	// RVA: 0x1572CC4 Offset: 0x1572CC4 VA: 0x1572CC4
	public void set_EquipedSvtId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C8C4 Offset: 0xD3C8C4 VA: 0xD3C8C4
	// RVA: 0x1572CDC Offset: 0x1572CDC VA: 0x1572CDC
	public int get_BaseSvtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C8D4 Offset: 0xD3C8D4 VA: 0xD3C8D4
	// RVA: 0x1572CCC Offset: 0x1572CCC VA: 0x1572CCC
	public void set_BaseSvtId(int value) { }

	// RVA: 0x1572CE4 Offset: 0x1572CE4 VA: 0x1572CE4
	public void Modify(UserCommandCodeEntity userCommandCodeEntity) { }

	// RVA: 0x1572D0C Offset: 0x1572D0C VA: 0x1572D0C
	public void ModifyUserCommandCodeEntity(UserCommandCodeEntity userCommandCodeEntity) { }

	// RVA: 0x1572D14 Offset: 0x1572D14 VA: 0x1572D14
	public void ModifyLockItem() { }

	// RVA: 0x1572D58 Offset: 0x1572D58 VA: 0x1572D58
	public void ModifyChoiceItem() { }

	// RVA: 0x1572D9C Offset: 0x1572D9C VA: 0x1572D9C Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x15731D0 Offset: 0x15731D0 VA: 0x15731D0 Slot: 5
	public override bool IsMatchFilter(ListViewSort sort) { }

	// RVA: 0x1573084 Offset: 0x1573084 VA: 0x1573084
	public bool get_IsSelected() { }

	// RVA: 0x157338C Offset: 0x157338C VA: 0x157338C
	public void set_IsSelected(bool value) { }

	// RVA: 0x1573398 Offset: 0x1573398 VA: 0x1573398
	public bool get_CanNotSelect() { }

	// RVA: 0x15733B8 Offset: 0x15733B8 VA: 0x15733B8
	public bool get_IsEquiped() { }

	// RVA: 0x15733C0 Offset: 0x15733C0 VA: 0x15733C0
	public bool get_IsMaxEquiped() { }

	// RVA: 0x15733C8 Offset: 0x15733C8 VA: 0x15733C8
	public bool get_IsLock() { }

	// RVA: 0x15733D0 Offset: 0x15733D0 VA: 0x15733D0
	public bool get_IsChoice() { }

	// RVA: 0x15733D8 Offset: 0x15733D8 VA: 0x15733D8
	public UserCommandCodeEntity get_UserCommandCode() { }

	// RVA: 0x15733E0 Offset: 0x15733E0 VA: 0x15733E0
	public int get_CommandCodeId() { }

	// RVA: 0x1573450 Offset: 0x1573450 VA: 0x1573450
	public bool SwapLock() { }

	// RVA: 0x157346C Offset: 0x157346C VA: 0x157346C
	public bool get_IsSwapLock() { }

	// RVA: 0x1573474 Offset: 0x1573474 VA: 0x1573474
	public bool get_IsDispLock() { }

	// RVA: 0x1573494 Offset: 0x1573494 VA: 0x1573494
	public bool SwapChoice() { }

	// RVA: 0x15734B0 Offset: 0x15734B0 VA: 0x15734B0
	public bool get_IsSwapChoice() { }

	// RVA: 0x157308C Offset: 0x157308C VA: 0x157308C
	public bool get_IsDispChoice() { }

	// RVA: 0x15734B8 Offset: 0x15734B8 VA: 0x15734B8
	public IconLabelInfo get_IconInfo1() { }

	// RVA: 0x15734C0 Offset: 0x15734C0 VA: 0x15734C0
	public IconLabelInfo get_IconInfo2() { }
}

// Namespace: 
public class CombineCommandCodeListViewItemDraw : MonoBehaviour // TypeDefIndex: 9484
{
	// Fields
	private const string DISP_NUM = "1";
	[SerializeField] // RVA: 0xCD50A4 Offset: 0xCD50A4 VA: 0xCD50A4
	private ServantFaceIconComponent icon; // 0x18
	[SerializeField] // RVA: 0xCD50B4 Offset: 0xCD50B4 VA: 0xCD50B4
	private UISprite lockSprite; // 0x20
	[SerializeField] // RVA: 0xCD50C4 Offset: 0xCD50C4 VA: 0xCD50C4
	private UISprite choiceSprite; // 0x28
	[SerializeField] // RVA: 0xCD50D4 Offset: 0xCD50D4 VA: 0xCD50D4
	private UISprite maskSprite; // 0x30
	[SerializeField] // RVA: 0xCD50E4 Offset: 0xCD50E4 VA: 0xCD50E4
	private UILabel maskLabel; // 0x38
	[SerializeField] // RVA: 0xCD50F4 Offset: 0xCD50F4 VA: 0xCD50F4
	private GameObject equippedInfo; // 0x40
	[SerializeField] // RVA: 0xCD5104 Offset: 0xCD5104 VA: 0xCD5104
	private UILabel equippedLabel; // 0x48
	[SerializeField] // RVA: 0xCD5114 Offset: 0xCD5114 VA: 0xCD5114
	private UILabel nameLabel; // 0x50
	[SerializeField] // RVA: 0xCD5124 Offset: 0xCD5124 VA: 0xCD5124
	private UILabel selectNumLabel; // 0x58
	[SerializeField] // RVA: 0xCD5134 Offset: 0xCD5134 VA: 0xCD5134
	private GameObject selectImgObj; // 0x60

	// Methods

	// RVA: 0x15734C8 Offset: 0x15734C8 VA: 0x15734C8
	public void .ctor() { }

	// RVA: 0x15734D0 Offset: 0x15734D0 VA: 0x15734D0
	public void SetItem(CombineCommandCodeListViewItem item, CombineCommandCodeListViewItemDraw.DispMode mode) { }

	// RVA: 0x1573814 Offset: 0x1573814 VA: 0x1573814
	public void SetInput(CombineCommandCodeListViewItem item) { }
}

// Namespace: 
public enum CombineCommandCodeListViewItemDraw.DispMode // TypeDefIndex: 9485
{
	// Fields
	public int value__; // 0x0
	public const CombineCommandCodeListViewItemDraw.DispMode INVISIBLE = 0;
	public const CombineCommandCodeListViewItemDraw.DispMode INVALID = 1;
	public const CombineCommandCodeListViewItemDraw.DispMode VALID = 2;
	public const CombineCommandCodeListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class CombineCommandCodeListViewManager : ListViewManager // TypeDefIndex: 9486
{
	// Fields
	private const string TYPE_ARTS = "img_bg_arts";
	private const string TYPE_BUSTER = "img_bg_buster";
	private const string TYPE_QUICK = "img_bg_quick";
	private const string SORT_SAVE_KEY = "CombineCommandCode";
	[SerializeField] // RVA: 0xCD5144 Offset: 0xCD5144 VA: 0xCD5144
	private CombineRootComponent combineRootComponent; // 0x138
	[SerializeField] // RVA: 0xCD5154 Offset: 0xCD5154 VA: 0xCD5154
	private UILabel combineInfoMsgLb; // 0x140
	[SerializeField] // RVA: 0xCD5164 Offset: 0xCD5164 VA: 0xCD5164
	private UISprite sortExplanationSprite; // 0x148
	[SerializeField] // RVA: 0xCD5174 Offset: 0xCD5174 VA: 0xCD5174
	private UILabel commandCodeInfoLabel; // 0x150
	[SerializeField] // RVA: 0xCD5184 Offset: 0xCD5184 VA: 0xCD5184
	private UICommonButton statusTabButton; // 0x158
	[SerializeField] // RVA: 0xCD5194 Offset: 0xCD5194 VA: 0xCD5194
	private UISprite statusTabSprite; // 0x160
	[SerializeField] // RVA: 0xCD51A4 Offset: 0xCD51A4 VA: 0xCD51A4
	private UICommonButton lockTabButton; // 0x168
	[SerializeField] // RVA: 0xCD51B4 Offset: 0xCD51B4 VA: 0xCD51B4
	private UISprite lockTabSprite; // 0x170
	[SerializeField] // RVA: 0xCD51C4 Offset: 0xCD51C4 VA: 0xCD51C4
	private UICommonButton choiceTabButton; // 0x178
	[SerializeField] // RVA: 0xCD51D4 Offset: 0xCD51D4 VA: 0xCD51D4
	private UISprite choiceTabSprite; // 0x180
	[SerializeField] // RVA: 0xCD51E4 Offset: 0xCD51E4 VA: 0xCD51E4
	private UISprite filterSprite; // 0x188
	[SerializeField] // RVA: 0xCD51F4 Offset: 0xCD51F4 VA: 0xCD51F4
	private ListViewItemSeed normalSizeSeed; // 0x190
	[SerializeField] // RVA: 0xCD5204 Offset: 0xCD5204 VA: 0xCD5204
	private ListViewItemSeed smallSizeSeed; // 0x198
	[SerializeField] // RVA: 0xCD5214 Offset: 0xCD5214 VA: 0xCD5214
	private ListViewItemSeed extremelySmallSizeSeed; // 0x1A0
	[SerializeField] // RVA: 0xCD5224 Offset: 0xCD5224 VA: 0xCD5224
	private UICommonButton scaleChangeButton; // 0x1A8
	[SerializeField] // RVA: 0xCD5234 Offset: 0xCD5234 VA: 0xCD5234
	private UISprite scaleChangeButtonSprite; // 0x1B0
	[SerializeField] // RVA: 0xCD5244 Offset: 0xCD5244 VA: 0xCD5244
	private UISprite commandCardTypeSprite; // 0x1B8
	[SerializeField] // RVA: 0xCD5254 Offset: 0xCD5254 VA: 0xCD5254
	private UISprite bgTxtSprite; // 0x1C0
	[SerializeField] // RVA: 0xCD5264 Offset: 0xCD5264 VA: 0xCD5264
	private ServantFaceIconComponent selectedCommandCode; // 0x1C8
	[SerializeField] // RVA: 0xCD5274 Offset: 0xCD5274 VA: 0xCD5274
	private UILabel skillName; // 0x1D0
	[SerializeField] // RVA: 0xCD5284 Offset: 0xCD5284 VA: 0xCD5284
	private UILabel skillMessage; // 0x1D8
	[SerializeField] // RVA: 0xCD5294 Offset: 0xCD5294 VA: 0xCD5294
	private UICommonButton decideButton; // 0x1E0
	[SerializeField] // RVA: 0xCD52A4 Offset: 0xCD52A4 VA: 0xCD52A4
	private CommandCardDialog warningDialog; // 0x1E8
	[SerializeField] // RVA: 0xCD52B4 Offset: 0xCD52B4 VA: 0xCD52B4
	private GameObject equippedInfo; // 0x1F0
	[SerializeField] // RVA: 0xCD52C4 Offset: 0xCD52C4 VA: 0xCD52C4
	private UILabel equippedLabel; // 0x1F8
	[SerializeField] // RVA: 0xCD52D4 Offset: 0xCD52D4 VA: 0xCD52D4
	private UILabel nameLabel; // 0x200
	private static ListViewSort commandCodeSortInfo; // 0x0
	private ListViewSort.ScaleType scaleType; // 0x208
	private CombineCommandCodeListViewManager.InitMode initMode; // 0x20C
	private CombineCommandCodeListViewManager.ModeKind modeKind; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xCD52E4 Offset: 0xCD52E4 VA: 0xCD52E4
	[DebuggerBrowsableAttribute] // RVA: 0xCD52E4 Offset: 0xCD52E4 VA: 0xCD52E4
	private Action callbackFunc2; // 0x218
	private int callbackCount; // 0x220
	private CombineCommandCodeListViewManager.RequestCallbackFunc requestCallback; // 0x228
	private CombineCommandCodeListViewItem selectItem; // 0x230
	private UserCommandCodeEntity selectShowStatusUserCmdCode; // 0x238
	private long nowEquipedUserCommandCodeId; // 0x240

	// Properties
	public List<CombineCommandCodeListViewObject> ObjectList { get; }
	public List<CombineCommandCodeListViewObject> ClippingObjectList { get; }
	public CombineCommandCodeListViewManager.ModeKind GetModeKind { get; }

	// Methods

	// RVA: 0x15738E0 Offset: 0x15738E0 VA: 0x15738E0
	public void .ctor() { }

	// RVA: 0x15738E8 Offset: 0x15738E8 VA: 0x15738E8
	private void add_callbackFunc2(Action value) { }

	// RVA: 0x15739D8 Offset: 0x15739D8 VA: 0x15739D8
	private void remove_callbackFunc2(Action value) { }

	// RVA: 0x1573AC8 Offset: 0x1573AC8 VA: 0x1573AC8
	public List<CombineCommandCodeListViewObject> get_ObjectList() { }

	// RVA: 0x1573C3C Offset: 0x1573C3C VA: 0x1573C3C
	public List<CombineCommandCodeListViewObject> get_ClippingObjectList() { }

	// RVA: 0x1573E74 Offset: 0x1573E74 VA: 0x1573E74
	public void CreateList(int baseSvtId, long beforeSelectedUserCommandCodeId, long nowEquipedUserCommandCodeId, CombineCommandCodeListViewManager.ModeKind modeKind, BattleCommand.TYPE commandCardType) { }

	// RVA: 0x1574A98 Offset: 0x1574A98 VA: 0x1574A98
	private void SetStatusKind(CombineCommandCodeListViewManager.ModeKind modeKind) { }

	// RVA: 0x1574780 Offset: 0x1574780 VA: 0x1574780
	private void SetSelectedCommandCodeData(CombineCommandCodeListViewItem item) { }

	// RVA: 0x1574F8C Offset: 0x1574F8C VA: 0x1574F8C
	public void ModifyList(bool isIconSizeChange = False) { }

	// RVA: 0x15753B8 Offset: 0x15753B8 VA: 0x15753B8
	public void ModifyItem(long userCommandCodeId) { }

	// RVA: 0x1574F0C Offset: 0x1574F0C VA: 0x1574F0C
	private void SetDecideButtonStatus(bool isEnable) { }

	// RVA: 0x15756BC Offset: 0x15756BC VA: 0x15756BC
	public void OnClickDecide() { }

	// RVA: 0x1575848 Offset: 0x1575848 VA: 0x1575848
	public void DestroyList() { }

	// RVA: 0x1575888 Offset: 0x1575888 VA: 0x1575888
	public CombineCommandCodeListViewItem GetItem(int index) { }

	// RVA: 0x1575930 Offset: 0x1575930 VA: 0x1575930 Slot: 4
	protected override void SetObjectItem(ListViewObject obj, ListViewItem item) { }

	// RVA: 0x1575A68 Offset: 0x1575A68 VA: 0x1575A68
	public void SetMode(CombineCommandCodeListViewManager.InitMode mode, Action callback) { }

	// RVA: 0x1575A70 Offset: 0x1575A70 VA: 0x1575A70
	public void SetMode(CombineCommandCodeListViewManager.InitMode mode) { }

	// RVA: 0x1575BAC Offset: 0x1575BAC VA: 0x1575BAC
	private void RequestListObject(CombineCommandCodeListViewObject.InitMode mode, float delay = 0) { }

	// RVA: 0x1575DE4 Offset: 0x1575DE4 VA: 0x1575DE4
	private void OnMoveEnd() { }

	// RVA: 0x1575ECC Offset: 0x1575ECC VA: 0x1575ECC
	public void OnClickScaleChange() { }

	// RVA: 0x1576020 Offset: 0x1576020 VA: 0x1576020
	public bool GetSwapLockList(out long[] lockList, out long[] unlockList) { }

	// RVA: 0x15762F4 Offset: 0x15762F4 VA: 0x15762F4
	public bool GetSwapChoiceList(out long[] choiceList, out long[] unchoiceList) { }

	// RVA: 0x15765C8 Offset: 0x15765C8 VA: 0x15765C8
	public void InitBackListView() { }

	// RVA: 0x15767C8 Offset: 0x15767C8 VA: 0x15767C8
	public void OnClickNormalStatus() { }

	// RVA: 0x157688C Offset: 0x157688C VA: 0x157688C
	public void OnClickCollectLock() { }

	// RVA: 0x1576978 Offset: 0x1576978 VA: 0x1576978
	public void OnClickChoiceTab() { }

	// RVA: 0x15765F4 Offset: 0x15765F4 VA: 0x15765F4
	private void StatusRequest(CombineCommandCodeListViewManager.RequestCallbackFunc callback) { }

	// RVA: 0x1576C90 Offset: 0x1576C90 VA: 0x1576C90
	private void EndClickTabStatus(bool isRequest) { }

	// RVA: 0x1576CC8 Offset: 0x1576CC8 VA: 0x1576CC8
	private void EndClickTabLock(bool isRequest) { }

	// RVA: 0x1576D00 Offset: 0x1576D00 VA: 0x1576D00
	private void EndClickTabChoice(bool isRequest) { }

	// RVA: 0x1576D38 Offset: 0x1576D38 VA: 0x1576D38
	private void EndStatusSync(string result) { }

	// RVA: 0x1576D58 Offset: 0x1576D58 VA: 0x1576D58
	public void OnClickListView(ListViewObject listviewObject) { }

	// RVA: 0x1576D5C Offset: 0x1576D5C VA: 0x1576D5C
	public void OnClickListView(ListViewItem item) { }

	// RVA: 0x15770E0 Offset: 0x15770E0 VA: 0x15770E0
	public void OnLongPushListView(ListViewItem item) { }

	// RVA: 0x1577238 Offset: 0x1577238 VA: 0x1577238
	public CombineCommandCodeListViewItem GetSelectItem() { }

	// RVA: 0x1577240 Offset: 0x1577240 VA: 0x1577240
	public UserCommandCodeEntity GetSelectMaterialUserCmdCode() { }

	// RVA: 0x1577248 Offset: 0x1577248 VA: 0x1577248
	public void OnClickFilterKind() { }

	// RVA: 0x1577340 Offset: 0x1577340 VA: 0x1577340
	public void EndSelectFilterKind(bool isDecide) { }

	// RVA: 0x157740C Offset: 0x157740C VA: 0x157740C
	private void EndCloseSelectFilterKind() { }

	// RVA: 0x1574E78 Offset: 0x1574E78 VA: 0x1574E78
	private void SetFilterButtonImage() { }

	// RVA: 0x1577410 Offset: 0x1577410 VA: 0x1577410
	public void OnClickSortKind() { }

	// RVA: 0x1577508 Offset: 0x1577508 VA: 0x1577508
	private void EndSelectSortKind(bool isDecide) { }

	// RVA: 0x1577598 Offset: 0x1577598 VA: 0x1577598
	public void OnClickSortAscendingOrder() { }

	// RVA: 0x1577688 Offset: 0x1577688 VA: 0x1577688 Slot: 5
	protected override void SetSortButtonImage() { }

	// RVA: 0x1577908 Offset: 0x1577908 VA: 0x1577908
	public CombineCommandCodeListViewManager.ModeKind get_GetModeKind() { }

	// RVA: 0x15730AC Offset: 0x15730AC VA: 0x15730AC
	public long GetCommandCodeAmountSortValue(int commandCodeId) { }

	// RVA: 0x1577910 Offset: 0x1577910 VA: 0x1577910
	private static void .cctor() { }
}

// Namespace: 
public enum CombineCommandCodeListViewManager.ModeKind // TypeDefIndex: 9487
{
	// Fields
	public int value__; // 0x0
	public const CombineCommandCodeListViewManager.ModeKind NORMAL = 0;
	public const CombineCommandCodeListViewManager.ModeKind LOCK = 1;
	public const CombineCommandCodeListViewManager.ModeKind CHOICE = 2;
}

// Namespace: 
public enum CombineCommandCodeListViewManager.InitMode // TypeDefIndex: 9488
{
	// Fields
	public int value__; // 0x0
	public const CombineCommandCodeListViewManager.InitMode NONE = 0;
	public const CombineCommandCodeListViewManager.InitMode INTO = 1;
	public const CombineCommandCodeListViewManager.InitMode VALID = 2;
	public const CombineCommandCodeListViewManager.InitMode INPUT = 3;
	public const CombineCommandCodeListViewManager.InitMode ENTER = 4;
	public const CombineCommandCodeListViewManager.InitMode EXIT = 5;
	public const CombineCommandCodeListViewManager.InitMode MODIFY = 6;
}

// Namespace: 
public sealed class CombineCommandCodeListViewManager.RequestCallbackFunc : MulticastDelegate // TypeDefIndex: 9489
{
	// Methods

	// RVA: 0x157687C Offset: 0x157687C VA: 0x157687C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1576A64 Offset: 0x1576A64 VA: 0x1576A64 Slot: 11
	public virtual void Invoke(bool isRequest) { }

	// RVA: 0x15779F4 Offset: 0x15779F4 VA: 0x15779F4 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool isRequest, AsyncCallback callback, object object) { }

	// RVA: 0x1577A84 Offset: 0x1577A84 VA: 0x1577A84 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class CombineCommandCodeListViewObject : ListViewObject // TypeDefIndex: 9490
{
	// Fields
	protected CombineCommandCodeListViewObject.State state; // 0x6C
	protected CombineCommandCodeListViewItemDraw.DispMode dispMode; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCD5320 Offset: 0xCD5320 VA: 0xCD5320
	[DebuggerBrowsableAttribute] // RVA: 0xCD5320 Offset: 0xCD5320 VA: 0xCD5320
	private Action callbackFunc; // 0x78
	protected CombineCommandCodeListViewItemDraw itemDraw; // 0x80
	protected GameObject dragObject; // 0x88

	// Methods

	// RVA: 0x1577A90 Offset: 0x1577A90 VA: 0x1577A90
	public void .ctor() { }

	// RVA: 0x1577AF8 Offset: 0x1577AF8 VA: 0x1577AF8
	protected void add_callbackFunc(Action value) { }

	// RVA: 0x1577BE4 Offset: 0x1577BE4 VA: 0x1577BE4
	protected void remove_callbackFunc(Action value) { }

	// RVA: 0x1577CD0 Offset: 0x1577CD0 VA: 0x1577CD0
	protected void Awake() { }

	// RVA: 0x1573DF0 Offset: 0x1573DF0 VA: 0x1573DF0
	public CombineCommandCodeListViewItem GetItem() { }

	// RVA: 0x1577D44 Offset: 0x1577D44 VA: 0x1577D44 Slot: 6
	public override void SetItem(ListViewItem item, ListViewItemSeed seed) { }

	// RVA: 0x1577D74 Offset: 0x1577D74 VA: 0x1577D74 Slot: 5
	public override void SetItem(ListViewItem item) { }

	// RVA: 0x1577D6C Offset: 0x1577D6C VA: 0x1577D6C
	protected void InitItem() { }

	// RVA: 0x1577D9C Offset: 0x1577D9C VA: 0x1577D9C Slot: 9
	public override void SetInput(bool isInput) { }

	// RVA: 0x1577E9C Offset: 0x1577E9C VA: 0x1577E9C
	public void Init(CombineCommandCodeListViewObject.InitMode initMode, Action callbackFunc, float delay, Vector3 position) { }

	// RVA: 0x1578168 Offset: 0x1578168 VA: 0x1578168
	public void Init(CombineCommandCodeListViewObject.InitMode initMode, Action callbackFunc, float delay) { }

	// RVA: 0x1575D60 Offset: 0x1575D60 VA: 0x1575D60
	public void Init(CombineCommandCodeListViewObject.InitMode initMode, Action callbackFunc) { }

	// RVA: 0x15759E8 Offset: 0x15759E8 VA: 0x15759E8
	public void Init(CombineCommandCodeListViewObject.InitMode initMode) { }

	// RVA: 0x1578058 Offset: 0x1578058 VA: 0x1578058
	protected void SetupDisp() { }

	// RVA: 0x15781EC Offset: 0x15781EC VA: 0x15781EC
	public void OnClickSelect() { }

	// RVA: 0x1578480 Offset: 0x1578480 VA: 0x1578480
	public void OnLongPush() { }

	// RVA: 0x1578578 Offset: 0x1578578 VA: 0x1578578 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public enum CombineCommandCodeListViewObject.InitMode // TypeDefIndex: 9491
{
	// Fields
	public int value__; // 0x0
	public const CombineCommandCodeListViewObject.InitMode INVISIBLE = 0;
	public const CombineCommandCodeListViewObject.InitMode INVALID = 1;
	public const CombineCommandCodeListViewObject.InitMode VALID = 2;
	public const CombineCommandCodeListViewObject.InitMode INPUT = 3;
}

// Namespace: 
protected enum CombineCommandCodeListViewObject.State // TypeDefIndex: 9492
{
	// Fields
	public int value__; // 0x0
	public const CombineCommandCodeListViewObject.State INIT = 0;
	public const CombineCommandCodeListViewObject.State IDLE = 1;
	public const CombineCommandCodeListViewObject.State INPUT = 2;
}

// Namespace: 
public class CommandCardDialog : BaseDialog // TypeDefIndex: 9493
{
	// Fields
	private static readonly int DETACH_NEED_ITEM_NUM; // 0x0
	private static readonly Vector3 UNLOCK_ITEM_SCALE; // 0x4
	private static readonly Vector3 REMOVE_ITEM_SCALE; // 0x10
	[SerializeField] // RVA: 0xCD535C Offset: 0xCD535C VA: 0xCD535C
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCD536C Offset: 0xCD536C VA: 0xCD536C
	protected UILabel messageLabel; // 0x60
	[SerializeField] // RVA: 0xCD537C Offset: 0xCD537C VA: 0xCD537C
	protected GameObject unlockInfoObj; // 0x68
	[SerializeField] // RVA: 0xCD538C Offset: 0xCD538C VA: 0xCD538C
	protected UIGrid unlockItemGrid; // 0x70
	[SerializeField] // RVA: 0xCD539C Offset: 0xCD539C VA: 0xCD539C
	protected UILabel spendQpTxtLabel; // 0x78
	[SerializeField] // RVA: 0xCD53AC Offset: 0xCD53AC VA: 0xCD53AC
	protected UILabel spendQpLabel; // 0x80
	[SerializeField] // RVA: 0xCD53BC Offset: 0xCD53BC VA: 0xCD53BC
	protected UILabel haveQpTxtLabel; // 0x88
	[SerializeField] // RVA: 0xCD53CC Offset: 0xCD53CC VA: 0xCD53CC
	protected UILabel haveQpLabel; // 0x90
	[SerializeField] // RVA: 0xCD53DC Offset: 0xCD53DC VA: 0xCD53DC
	protected UILabel itemInfoLabel; // 0x98
	[SerializeField] // RVA: 0xCD53EC Offset: 0xCD53EC VA: 0xCD53EC
	protected UILabel answerBackLabel; // 0xA0
	[SerializeField] // RVA: 0xCD53FC Offset: 0xCD53FC VA: 0xCD53FC
	protected GameObject lockResultInfoObj; // 0xA8
	[SerializeField] // RVA: 0xCD540C Offset: 0xCD540C VA: 0xCD540C
	protected UIGrid returnItemGrid; // 0xB0
	[SerializeField] // RVA: 0xCD541C Offset: 0xCD541C VA: 0xCD541C
	protected UILabel lockResultLabel; // 0xB8
	[SerializeField] // RVA: 0xCD542C Offset: 0xCD542C VA: 0xCD542C
	protected UILabel itemNumLabel; // 0xC0
	[SerializeField] // RVA: 0xCD543C Offset: 0xCD543C VA: 0xCD543C
	protected GameObject equipmentCommandCardObj; // 0xC8
	[SerializeField] // RVA: 0xCD544C Offset: 0xCD544C VA: 0xCD544C
	protected CombineCommandCardComponent targetCommandCard; // 0xD0
	[SerializeField] // RVA: 0xCD545C Offset: 0xCD545C VA: 0xCD545C
	protected CombineCommandCardEquipmentComponent commandCardEquipmentIcon; // 0xD8
	[SerializeField] // RVA: 0xCD546C Offset: 0xCD546C VA: 0xCD546C
	protected UILabel equipmentWarningLabel; // 0xE0
	[SerializeField] // RVA: 0xCD547C Offset: 0xCD547C VA: 0xCD547C
	private GameObject removeCommandCodeConfirmObj; // 0xE8
	[SerializeField] // RVA: 0xCD548C Offset: 0xCD548C VA: 0xCD548C
	private CombineCommandCardEquipmentComponent equippedCommandCardIcon; // 0xF0
	[SerializeField] // RVA: 0xCD549C Offset: 0xCD549C VA: 0xCD549C
	private UILabel removeDetailLabel; // 0xF8
	[SerializeField] // RVA: 0xCD54AC Offset: 0xCD54AC VA: 0xCD54AC
	protected GameObject removeCommandCardSlotObj; // 0x100
	[SerializeField] // RVA: 0xCD54BC Offset: 0xCD54BC VA: 0xCD54BC
	protected UIGrid removeItemGrid; // 0x108
	[SerializeField] // RVA: 0xCD54CC Offset: 0xCD54CC VA: 0xCD54CC
	protected UILabel haveItemTxtLabel; // 0x110
	[SerializeField] // RVA: 0xCD54DC Offset: 0xCD54DC VA: 0xCD54DC
	protected UILabel haveItemNumLabel; // 0x118
	[SerializeField] // RVA: 0xCD54EC Offset: 0xCD54EC VA: 0xCD54EC
	protected UILabel spendItemTxtLabel; // 0x120
	[SerializeField] // RVA: 0xCD54FC Offset: 0xCD54FC VA: 0xCD54FC
	protected UILabel spendItemNumLabel; // 0x128
	[SerializeField] // RVA: 0xCD550C Offset: 0xCD550C VA: 0xCD550C
	protected UILabel removeWarningLabel; // 0x130
	[SerializeField] // RVA: 0xCD551C Offset: 0xCD551C VA: 0xCD551C
	protected GameObject warningCommandCodeObj; // 0x138
	[SerializeField] // RVA: 0xCD552C Offset: 0xCD552C VA: 0xCD552C
	protected CombineCommandCardEquipmentComponent nowEquipedCommandCodeIcon; // 0x140
	[SerializeField] // RVA: 0xCD553C Offset: 0xCD553C VA: 0xCD553C
	protected UILabel warningLabel; // 0x148
	[SerializeField] // RVA: 0xCD554C Offset: 0xCD554C VA: 0xCD554C
	protected GameObject overwriteCommandCodeObj; // 0x150
	[SerializeField] // RVA: 0xCD555C Offset: 0xCD555C VA: 0xCD555C
	protected CombineCommandCardEquipmentComponent equipedCommandCodeIcon; // 0x158
	[SerializeField] // RVA: 0xCD556C Offset: 0xCD556C VA: 0xCD556C
	protected SkillIconComponent equipedCommandCodeSkillIcon; // 0x160
	[SerializeField] // RVA: 0xCD557C Offset: 0xCD557C VA: 0xCD557C
	protected UILabel equipedCommandCodeSkillName; // 0x168
	[SerializeField] // RVA: 0xCD558C Offset: 0xCD558C VA: 0xCD558C
	protected UILabel equipedCommandCodeSkillDetail; // 0x170
	[SerializeField] // RVA: 0xCD559C Offset: 0xCD559C VA: 0xCD559C
	protected CombineCommandCardEquipmentComponent overwriteCommandCodeIcon; // 0x178
	[SerializeField] // RVA: 0xCD55AC Offset: 0xCD55AC VA: 0xCD55AC
	protected SkillIconComponent overwriteCommandCodeSkillIcon; // 0x180
	[SerializeField] // RVA: 0xCD55BC Offset: 0xCD55BC VA: 0xCD55BC
	protected UILabel overwriteCommandCodeSkillName; // 0x188
	[SerializeField] // RVA: 0xCD55CC Offset: 0xCD55CC VA: 0xCD55CC
	protected UILabel overwriteCommandCodeSkillDetail; // 0x190
	[SerializeField] // RVA: 0xCD55DC Offset: 0xCD55DC VA: 0xCD55DC
	protected UILabel overwriteCommandCodeWarningLabel; // 0x198
	[SerializeField] // RVA: 0xCD55EC Offset: 0xCD55EC VA: 0xCD55EC
	protected UILabel decideButtonLabel; // 0x1A0
	[SerializeField] // RVA: 0xCD55FC Offset: 0xCD55FC VA: 0xCD55FC
	protected UILabel cancelButtonLabel; // 0x1A8
	[SerializeField] // RVA: 0xCD560C Offset: 0xCD560C VA: 0xCD560C
	protected UILabel closeButtonLabel; // 0x1B0
	[SerializeField] // RVA: 0xCD561C Offset: 0xCD561C VA: 0xCD561C
	protected GameObject canExecuteButtonsObj; // 0x1B8
	[SerializeField] // RVA: 0xCD562C Offset: 0xCD562C VA: 0xCD562C
	protected GameObject canNotExecuteButtonObj; // 0x1C0
	[SerializeField] // RVA: 0xCD563C Offset: 0xCD563C VA: 0xCD563C
	protected GameObject releaseItemObj; // 0x1C8
	protected CommandCardDialog.State state; // 0x1D0
	protected CommandCardDialog.ClickDelegate closeFunc; // 0x1D8
	protected Action closeCallbackFunc; // 0x1E0

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x1B54018 Offset: 0x1B54018 VA: 0x1B54018
	public void .ctor() { }

	// RVA: 0x1B54080 Offset: 0x1B54080 VA: 0x1B54080
	public void Init() { }

	// RVA: 0x1B548E0 Offset: 0x1B548E0 VA: 0x1B548E0
	public void OpenUnlockCommandCardEquipment(UserServantEntity baseUserServantEntity, int cardIdx, CommandCardDialog.ClickDelegate closeCallback) { }

	// RVA: 0x1B55168 Offset: 0x1B55168 VA: 0x1B55168
	public void OpenLockCommandCardResult(UserServantEntity baseUserServantEntity, int cardIdx, CommandCardDialog.ClickDelegate closeCallback) { }

	// RVA: 0x1B55AA0 Offset: 0x1B55AA0 VA: 0x1B55AA0
	public void OpenLockEquipSlot(bool equipped, CommandCardDialog.ClickDelegate closeCallback) { }

	// RVA: 0x1B56598 Offset: 0x1B56598 VA: 0x1B56598
	public void OpenRemoveEquip(UserCommandCodeEntity userCommandCode, CommandCardDialog.ClickDelegate closeCallback) { }

	// RVA: 0x1B568E0 Offset: 0x1B568E0 VA: 0x1B568E0
	private void GetSkillInfo(UserCommandCodeEntity userCommandCode, out int skillId, out string skillName, out string skillDetail) { }

	// RVA: 0x1B56A24 Offset: 0x1B56A24 VA: 0x1B56A24
	protected void EndOpen() { }

	// RVA: 0x1B56A30 Offset: 0x1B56A30 VA: 0x1B56A30
	public void Close() { }

	// RVA: 0x1B56A38 Offset: 0x1B56A38 VA: 0x1B56A38
	public void Close(Action callback) { }

	// RVA: 0x1B56AC8 Offset: 0x1B56AC8 VA: 0x1B56AC8
	protected void EndClose() { }

	// RVA: 0x1B56B04 Offset: 0x1B56B04 VA: 0x1B56B04
	public void touchCommandCard(int index) { }

	// RVA: 0x1B56B08 Offset: 0x1B56B08 VA: 0x1B56B08
	public void OnClickDecide() { }

	// RVA: 0x1B56E44 Offset: 0x1B56E44 VA: 0x1B56E44
	public void OnClickCancel() { }

	// RVA: 0x1B56F54 Offset: 0x1B56F54 VA: 0x1B56F54 Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x1B570B0 Offset: 0x1B570B0 VA: 0x1B570B0
	private static void .cctor() { }
}

// Namespace: 
protected enum CommandCardDialog.State // TypeDefIndex: 9494
{
	// Fields
	public int value__; // 0x0
	public const CommandCardDialog.State INIT = 0;
	public const CommandCardDialog.State OPEN = 1;
	public const CommandCardDialog.State INPUT = 2;
	public const CommandCardDialog.State CLOSE = 3;
}

// Namespace: 
public sealed class CommandCardDialog.ClickDelegate : MulticastDelegate // TypeDefIndex: 9495
{
	// Methods

	// RVA: 0x1B57184 Offset: 0x1B57184 VA: 0x1B57184
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1B56C18 Offset: 0x1B56C18 VA: 0x1B56C18 Slot: 11
	public virtual void Invoke(bool isDecide) { }

	// RVA: 0x1B57194 Offset: 0x1B57194 VA: 0x1B57194 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool isDecide, AsyncCallback callback, object object) { }

	// RVA: 0x1B57224 Offset: 0x1B57224 VA: 0x1B57224 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class CommandCardEquipmentControl : CombineMenuControl // TypeDefIndex: 9496
{
	// Fields
	private static readonly Color defaultDetailColor; // 0x0
	private static readonly string DEFAULT_MESSAGE_SPRITE_NAME; // 0x10
	private static readonly string UNLOCK_MESSAGE_SPRITE_NAME; // 0x18
	private static readonly string EQUIPED_MESSAGE_SPRITE_NAME; // 0x20
	private static readonly string SELECTED_MESSAGE_SPRITE_NAME; // 0x28
	private static readonly string NOT_EQUIPED_MESSAGE_SPRITE_NAME; // 0x30
	private static readonly string DEFAULT_EXE_BTN_SPRITE_NAME; // 0x38
	private static readonly string UNLOCK_EXE_BTN_SPRITE_NAME; // 0x40
	private static readonly string EQUIP_EXE_BTN_SPRITE_NAME; // 0x48
	private static readonly string REPLACE_EXE_BTN_SPRITE_NAME; // 0x50
	private const float WaitDetachTime = 0.3;
	private const float WaitAttachTime = 3.1;
	[SerializeField] // RVA: 0xCD564C Offset: 0xCD564C VA: 0xCD564C
	private UILabel detailLabel; // 0x68
	[SerializeField] // RVA: 0xCD565C Offset: 0xCD565C VA: 0xCD565C
	private GameObject qpInfoObj; // 0x70
	[SerializeField] // RVA: 0xCD566C Offset: 0xCD566C VA: 0xCD566C
	private UILabel spendQpLabel; // 0x78
	[SerializeField] // RVA: 0xCD567C Offset: 0xCD567C VA: 0xCD567C
	private UILabel haveQpLabel; // 0x80
	[SerializeField] // RVA: 0xCD568C Offset: 0xCD568C VA: 0xCD568C
	private UICommonButton executeButton; // 0x88
	[SerializeField] // RVA: 0xCD569C Offset: 0xCD569C VA: 0xCD569C
	private UISprite executeButtonSprite; // 0x90
	[SerializeField] // RVA: 0xCD56AC Offset: 0xCD56AC VA: 0xCD56AC
	private UILabel baseSelectInfoLabel; // 0x98
	[SerializeField] // RVA: 0xCD56BC Offset: 0xCD56BC VA: 0xCD56BC
	private GameObject baseSelectInfoObj; // 0xA0
	[SerializeField] // RVA: 0xCD56CC Offset: 0xCD56CC VA: 0xCD56CC
	private GameObject commandCardPrefab; // 0xA8
	[SerializeField] // RVA: 0xCD56DC Offset: 0xCD56DC VA: 0xCD56DC
	private GameObject unlockItemInfoObj; // 0xB0
	[SerializeField] // RVA: 0xCD56EC Offset: 0xCD56EC VA: 0xCD56EC
	private GameObject commandCardInfoObj; // 0xB8
	[SerializeField] // RVA: 0xCD56FC Offset: 0xCD56FC VA: 0xCD56FC
	private GameObject commandCardNotEquippedInfoObj; // 0xC0
	[SerializeField] // RVA: 0xCD570C Offset: 0xCD570C VA: 0xCD570C
	private UICommonButton equipEmptyButton; // 0xC8
	[SerializeField] // RVA: 0xCD571C Offset: 0xCD571C VA: 0xCD571C
	private UILabel commandCardNotEquippedDetail; // 0xD0
	[SerializeField] // RVA: 0xCD572C Offset: 0xCD572C VA: 0xCD572C
	private UICommonButton lockButton; // 0xD8
	[SerializeField] // RVA: 0xCD573C Offset: 0xCD573C VA: 0xCD573C
	private UICommonButton removeButton; // 0xE0
	[SerializeField] // RVA: 0xCD574C Offset: 0xCD574C VA: 0xCD574C
	private UICommonButton replaceButton; // 0xE8
	[SerializeField] // RVA: 0xCD575C Offset: 0xCD575C VA: 0xCD575C
	private UICommonButton cancelButton; // 0xF0
	[SerializeField] // RVA: 0xCD576C Offset: 0xCD576C VA: 0xCD576C
	private UISprite replaceButtonSprite; // 0xF8
	[SerializeField] // RVA: 0xCD577C Offset: 0xCD577C VA: 0xCD577C
	private UILabel overwriteWarningLabel; // 0x100
	[SerializeField] // RVA: 0xCD578C Offset: 0xCD578C VA: 0xCD578C
	private UISprite messageTxtLabelSprite; // 0x108
	[SerializeField] // RVA: 0xCD579C Offset: 0xCD579C VA: 0xCD579C
	private SkillIconComponent commandCardEquipmentSkillIcon; // 0x110
	[SerializeField] // RVA: 0xCD57AC Offset: 0xCD57AC VA: 0xCD57AC
	private UILabel commandCardEquipmentSkillName; // 0x118
	[SerializeField] // RVA: 0xCD57BC Offset: 0xCD57BC VA: 0xCD57BC
	private UILabel commandCardEquipmentSkillDetail; // 0x120
	[SerializeField] // RVA: 0xCD57CC Offset: 0xCD57CC VA: 0xCD57CC
	private CombineCommandCardEquipmentComponent commandCardEquipmentIcon; // 0x128
	[SerializeField] // RVA: 0xCD57DC Offset: 0xCD57DC VA: 0xCD57DC
	private CombineCommandCardComponent[] commandCardList; // 0x130
	[SerializeField] // RVA: 0xCD57EC Offset: 0xCD57EC VA: 0xCD57EC
	private LimitCntUpItemComponent[] unlockItemInfoList; // 0x138
	[SerializeField] // RVA: 0xCD57FC Offset: 0xCD57FC VA: 0xCD57FC
	private CommandCardDialog commandCardDialog; // 0x140
	[SerializeField] // RVA: 0xCD580C Offset: 0xCD580C VA: 0xCD580C
	private Transform detachEffectPos; // 0x148
	[SerializeField] // RVA: 0xCD581C Offset: 0xCD581C VA: 0xCD581C
	private GameObject lockEffect; // 0x150
	[SerializeField] // RVA: 0xCD582C Offset: 0xCD582C VA: 0xCD582C
	private GameObject unlockEffect; // 0x158
	[SerializeField] // RVA: 0xCD583C Offset: 0xCD583C VA: 0xCD583C
	private GameObject commandCodeFlashEffect; // 0x160
	[SerializeField] // RVA: 0xCD584C Offset: 0xCD584C VA: 0xCD584C
	private GameObject commandCodeAppearEffect; // 0x168
	[SerializeField] // RVA: 0xCD585C Offset: 0xCD585C VA: 0xCD585C
	private GameObject commandCodeDetachEffect; // 0x170
	[SerializeField] // RVA: 0xCD586C Offset: 0xCD586C VA: 0xCD586C
	private GameObject commandCardDetachEffect; // 0x178
	[SerializeField] // RVA: 0xCD587C Offset: 0xCD587C VA: 0xCD587C
	private GameObject commandCodeReplaceEffect; // 0x180
	private UICharaGraphTexture charaGraph; // 0x188
	private UserServantCommandCodeEntity baseUserServantCommandCodeEntity; // 0x190
	private UserCommandCodeEntity baseUserCommandCodeEntity; // 0x198
	private CombineCommandCardComponent targetCommandCardData; // 0x1A0
	private UserCommandCodeEntity nowEquipedUserCommandCodeEntity; // 0x1A8
	private int spendQpVal; // 0x1B0
	private int haveQpVal; // 0x1B4
	private bool isBaseSelect; // 0x1B8
	private bool isCanCombine; // 0x1B9
	private bool isShortQp; // 0x1BA
	private bool isShortNeedItem; // 0x1BB
	private string[] baseServantAssetList; // 0x1C0
	private Action LoadAfterCallback; // 0x1C8
	[CompilerGeneratedAttribute] // RVA: 0xCD588C Offset: 0xCD588C VA: 0xCD588C
	[DebuggerBrowsableAttribute] // RVA: 0xCD588C Offset: 0xCD588C VA: 0xCD588C
	private int <selectedSelfAttachCommandCardIdx>k__BackingField; // 0x1D0
	[CompilerGeneratedAttribute] // RVA: 0xCD58C8 Offset: 0xCD58C8 VA: 0xCD58C8
	private static ServantStatusDialog.EndDelegate <>f__am$cache0; // 0x58

	// Properties
	public int selectedSelfAttachCommandCardIdx { get; set; }
	public int GetTargetCardIndex { get; }
	public BattleCommand.TYPE GetTargetCardType { get; }
	public long GetSelectedUserCommandCodeId { get; }

	// Methods

	// RVA: 0x1B57230 Offset: 0x1B57230 VA: 0x1B57230
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C8E4 Offset: 0xD3C8E4 VA: 0xD3C8E4
	// RVA: 0x1B57238 Offset: 0x1B57238 VA: 0x1B57238
	public int get_selectedSelfAttachCommandCardIdx() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C8F4 Offset: 0xD3C8F4 VA: 0xD3C8F4
	// RVA: 0x1B57240 Offset: 0x1B57240 VA: 0x1B57240
	public void set_selectedSelfAttachCommandCardIdx(int value) { }

	// RVA: 0x1B57248 Offset: 0x1B57248 VA: 0x1B57248 Slot: 6
	protected override EventTutorialMaster.OpenType GetTutorialOpenType() { }

	// RVA: 0x1B57250 Offset: 0x1B57250 VA: 0x1B57250
	public void InitCommnadCardEquipment() { }

	// RVA: 0x1B573D8 Offset: 0x1B573D8 VA: 0x1B573D8
	private void InitDisplayInfo() { }

	// RVA: 0x1B57584 Offset: 0x1B57584 VA: 0x1B57584
	private void InitDispBaseServantInfo() { }

	// RVA: 0x1B57478 Offset: 0x1B57478 VA: 0x1B57478
	private void InitDispCommandCardInfo() { }

	// RVA: 0x1B57888 Offset: 0x1B57888 VA: 0x1B57888
	public void InitCommandCardSelectStatus() { }

	// RVA: 0x1B57964 Offset: 0x1B57964 VA: 0x1B57964
	public void SetBaseSvtCardImg(UserServantEntity userServantEntity) { }

	// RVA: 0x1B57B28 Offset: 0x1B57B28 VA: 0x1B57B28
	public void MoidfyUserSvtCommandCode(UserServantEntity userServantEntity) { }

	// RVA: 0x1B57CC8 Offset: 0x1B57CC8 VA: 0x1B57CC8
	public void ModifyCommandCard(int cardIndex) { }

	// RVA: 0x1B57E34 Offset: 0x1B57E34 VA: 0x1B57E34
	private int GetCommandCodeId(long userCommandCodeId) { }

	// RVA: 0x1B57F20 Offset: 0x1B57F20 VA: 0x1B57F20
	public void CheckSelectedBaseServant(UserServantEntity selectBase) { }

	// RVA: 0x1B58080 Offset: 0x1B58080 VA: 0x1B58080
	public void SetBaseServantCommandCardList(Action callback) { }

	// RVA: 0x1B582A8 Offset: 0x1B582A8 VA: 0x1B582A8
	private void SetCommandCardList() { }

	// RVA: 0x1B5885C Offset: 0x1B5885C VA: 0x1B5885C
	public void touchCommandCard(int index) { }

	// RVA: 0x1B58AC0 Offset: 0x1B58AC0 VA: 0x1B58AC0
	private void ChangeCommandCardTypeDispInfo(CombineCommandCardComponent.Kind nowKind) { }

	// RVA: 0x1B59A34 Offset: 0x1B59A34 VA: 0x1B59A34
	private bool EnableReplace(long nowEquipedUserCommandCodeId) { }

	// RVA: 0x1B59D7C Offset: 0x1B59D7C VA: 0x1B59D7C
	public void SetSelectedCommandCodeInfo(UserCommandCodeEntity userCommandCode, bool dispEquippedInfo = False, int equippedSvtId = -1) { }

	// RVA: 0x1B5A59C Offset: 0x1B5A59C VA: 0x1B5A59C
	private void SetReplaceDispInfo() { }

	// RVA: 0x1B58A08 Offset: 0x1B58A08 VA: 0x1B58A08
	public void SetTargetIndexSelectSprite(int index) { }

	// RVA: 0x1B57360 Offset: 0x1B57360 VA: 0x1B57360
	public void InitCommandCodeInfo() { }

	// RVA: 0x1B5A730 Offset: 0x1B5A730 VA: 0x1B5A730
	public bool GetExeBtnState() { }

	// RVA: 0x1B5A7A0 Offset: 0x1B5A7A0 VA: 0x1B5A7A0
	public void SetEffectAfterInfo() { }

	// RVA: 0x1B5A824 Offset: 0x1B5A824 VA: 0x1B5A824
	public void CheckOpenDialogType() { }

	// RVA: 0x1B5AABC Offset: 0x1B5AABC VA: 0x1B5AABC
	public bool CheckEquippedCommandCodeAttach(Dictionary<long, long> dic) { }

	// RVA: 0x1B5AB90 Offset: 0x1B5AB90 VA: 0x1B5AB90
	public void OpenEquippedCommandCodeAttachDialog(Dictionary<long, long> dic, bool isCommandCardEmpty) { }

	// RVA: 0x1B5A9F8 Offset: 0x1B5A9F8 VA: 0x1B5A9F8
	public void OpenUnlockDialog() { }

	// RVA: 0x1B5B688 Offset: 0x1B5B688 VA: 0x1B5B688
	public void OpenLockDialog() { }

	// RVA: 0x1B5B778 Offset: 0x1B5B778 VA: 0x1B5B778
	public void OpenReturnDialog() { }

	// RVA: 0x1B5A60C Offset: 0x1B5A60C VA: 0x1B5A60C
	private void SetCommandCardEquipmentSkill(UserCommandCodeEntity userCommandCode) { }

	// RVA: 0x1B5A1F4 Offset: 0x1B5A1F4 VA: 0x1B5A1F4
	public void SetUnlockItemInfo() { }

	// RVA: 0x1B5B8D0 Offset: 0x1B5B8D0 VA: 0x1B5B8D0
	public void OnLockCommandCardEquipment() { }

	// RVA: 0x1B5B940 Offset: 0x1B5B940 VA: 0x1B5B940
	public void OnRemoveCommandCardEquipment() { }

	// RVA: 0x1B5BA00 Offset: 0x1B5BA00 VA: 0x1B5BA00
	public void CloseRemoveCommandCodeDialog(bool isDecide) { }

