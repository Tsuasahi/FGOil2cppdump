
	[DebuggerHiddenAttribute] // RVA: 0xC1E3D0 Offset: 0xC1E3D0 VA: 0xC1E3D0
	// RVA: 0x2103B98 Offset: 0x2103B98 VA: 0x2103B98 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D6AC Offset: 0xC1D6AC VA: 0xC1D6AC
[Serializable]
private sealed class USSequencer.<>c // TypeDefIndex: 3756
{
	// Fields
	public static readonly USSequencer.<>c <>9; // 0x0
	public static USSequencer.PlaybackDelegate <>9__88_0; // 0x8
	public static USSequencer.PlaybackDelegate <>9__88_1; // 0x10
	public static USSequencer.PlaybackDelegate <>9__88_2; // 0x18
	public static USSequencer.PlaybackDelegate <>9__88_3; // 0x20
	public static USSequencer.UpdateDelegate <>9__88_4; // 0x28
	public static USSequencer.UpdateDelegate <>9__88_5; // 0x30
	public static USSequencer.PlaybackDelegate <>9__88_6; // 0x38

	// Methods

	// RVA: 0x210399C Offset: 0x210399C VA: 0x210399C
	private static void .cctor() { }

	// RVA: 0x2103A00 Offset: 0x2103A00 VA: 0x2103A00
	public void .ctor() { }

	// RVA: 0x2103A08 Offset: 0x2103A08 VA: 0x2103A08
	internal void <.ctor>b__88_0(USSequencer <p0>) { }

	// RVA: 0x2103A0C Offset: 0x2103A0C VA: 0x2103A0C
	internal void <.ctor>b__88_1(USSequencer <p0>) { }

	// RVA: 0x2103A10 Offset: 0x2103A10 VA: 0x2103A10
	internal void <.ctor>b__88_2(USSequencer <p0>) { }

	// RVA: 0x2103A14 Offset: 0x2103A14 VA: 0x2103A14
	internal void <.ctor>b__88_3(USSequencer <p0>) { }

	// RVA: 0x2103A18 Offset: 0x2103A18 VA: 0x2103A18
	internal void <.ctor>b__88_4(USSequencer <p0>, float <p1>) { }

	// RVA: 0x2103A1C Offset: 0x2103A1C VA: 0x2103A1C
	internal void <.ctor>b__88_5(USSequencer <p0>, float <p1>) { }

	// RVA: 0x2103A20 Offset: 0x2103A20 VA: 0x2103A20
	internal void <.ctor>b__88_6(USSequencer <p0>) { }
}

// Namespace: WellFired
public struct LerpedQuaternion // TypeDefIndex: 3757
{
	// Fields
	private bool slerp; // 0x0
	public float duration; // 0x4
	private Quaternion currentValue; // 0x8
	private Quaternion target; // 0x18
	private Quaternion source; // 0x28
	private float startTime; // 0x38

	// Properties
	public Quaternion SmoothValue { get; set; }

	// Methods

	// RVA: 0xD65FA0 Offset: 0xD65FA0 VA: 0xD65FA0
	public Quaternion get_SmoothValue() { }

	// RVA: 0xD65FA8 Offset: 0xD65FA8 VA: 0xD65FA8
	public void set_SmoothValue(Quaternion value) { }

	// RVA: 0xD65FB0 Offset: 0xD65FB0 VA: 0xD65FB0
	public void .ctor(Quaternion quaternion) { }
}

// Namespace: WellFired
[Serializable]
public class Spline // TypeDefIndex: 3758
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC1DF20 Offset: 0xC1DF20 VA: 0xC1DF20
	private int <CurrentSegment>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC1DF30 Offset: 0xC1DF30 VA: 0xC1DF30
	private bool <IsClosed>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xC1DF40 Offset: 0xC1DF40 VA: 0xC1DF40
	private bool <IsReversed>k__BackingField; // 0x15
	[SerializeField] // RVA: 0xC1DF50 Offset: 0xC1DF50 VA: 0xC1DF50
	private Color splineColor; // 0x18
	[SerializeField] // RVA: 0xC1DF60 Offset: 0xC1DF60 VA: 0xC1DF60
	private float displayResolution; // 0x28
	[SerializeField] // RVA: 0xC1DF70 Offset: 0xC1DF70 VA: 0xC1DF70
	private AbstractSplineSolver splineSolver; // 0x30

	// Properties
	public bool IsClosed { get; }
	public Color SplineColor { get; set; }
	public float DisplayResolution { get; set; }
	public List<SplineKeyframe> Nodes { get; }
	public AbstractSplineSolver SplineSolver { get; set; }

	// Methods

	[CompilerGeneratedAttribute] // RVA: 0xC1E3E0 Offset: 0xC1E3E0 VA: 0xC1E3E0
	// RVA: 0x20F56E8 Offset: 0x20F56E8 VA: 0x20F56E8
	public bool get_IsClosed() { }

	// RVA: 0x20F56F0 Offset: 0x20F56F0 VA: 0x20F56F0
	public Color get_SplineColor() { }

	// RVA: 0x20F56FC Offset: 0x20F56FC VA: 0x20F56FC
	public void set_SplineColor(Color value) { }

	// RVA: 0x20F5708 Offset: 0x20F5708 VA: 0x20F5708
	public float get_DisplayResolution() { }

	// RVA: 0x20F5710 Offset: 0x20F5710 VA: 0x20F5710
	public void set_DisplayResolution(float value) { }

	// RVA: 0x20F5718 Offset: 0x20F5718 VA: 0x20F5718
	public List<SplineKeyframe> get_Nodes() { }

	// RVA: 0x20F5744 Offset: 0x20F5744 VA: 0x20F5744
	public AbstractSplineSolver get_SplineSolver() { }

	// RVA: 0x20F574C Offset: 0x20F574C VA: 0x20F574C
	private void set_SplineSolver(AbstractSplineSolver value) { }

	// RVA: 0x20F5754 Offset: 0x20F5754 VA: 0x20F5754
	public void BuildFromKeyframes(List<SplineKeyframe> keyframes) { }

	// RVA: 0x20F5AF4 Offset: 0x20F5AF4 VA: 0x20F5AF4
	public Vector3 GetPositionOnPath(float time) { }

	// RVA: 0x20F5BC8 Offset: 0x20F5BC8 VA: 0x20F5BC8
	public void OnDrawGizmos() { }

	// RVA: 0x20F5CA4 Offset: 0x20F5CA4 VA: 0x20F5CA4
	public void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class SplineKeyframe : ScriptableObject // TypeDefIndex: 3759
{
	// Fields
	[SerializeField] // RVA: 0xC1DF80 Offset: 0xC1DF80 VA: 0xC1DF80
	private Vector3 position; // 0x18

	// Properties
	public Vector3 Position { get; set; }

	// Methods

	// RVA: 0x20F0954 Offset: 0x20F0954 VA: 0x20F0954
	public Vector3 get_Position() { }

	// RVA: 0x20F09D8 Offset: 0x20F09D8 VA: 0x20F09D8
	public void set_Position(Vector3 value) { }

	// RVA: 0x20F0960 Offset: 0x20F0960 VA: 0x20F0960
	public void .ctor() { }
}

// Namespace: WellFired
public enum SplineOrientationMode // TypeDefIndex: 3760
{
	// Fields
	public int value__; // 0x0
	public const SplineOrientationMode ManualOrientation = 0;
	public const SplineOrientationMode LookAtTransform = 1;
	public const SplineOrientationMode LookAhead = 2;
}

// Namespace: WellFired
public abstract class AbstractSplineSolver : ScriptableObject // TypeDefIndex: 3761
{
	// Fields
	public const int TOTAL_SUBDIVISIONS_PER_NODE = 5;
	[SerializeField] // RVA: 0xC1DF90 Offset: 0xC1DF90 VA: 0xC1DF90
	protected List<SplineKeyframe> nodes; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC1DFA0 Offset: 0xC1DFA0 VA: 0xC1DFA0
	private float <PathLength>k__BackingField; // 0x20
	protected Dictionary<float, float> segmentTimeForDistance; // 0x28

	// Properties
	public List<SplineKeyframe> Nodes { get; set; }
	[SerializeField] // RVA: 0xC1E480 Offset: 0xC1E480 VA: 0xC1E480
	protected float PathLength { get; set; }

	// Methods

	// RVA: 0x20EEE7C Offset: 0x20EEE7C VA: 0x20EEE7C
	public List<SplineKeyframe> get_Nodes() { }

	// RVA: 0x20EEE84 Offset: 0x20EEE84 VA: 0x20EEE84
	public void set_Nodes(List<SplineKeyframe> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC1E3F0 Offset: 0xC1E3F0 VA: 0xC1E3F0
	// RVA: 0x20EEE8C Offset: 0x20EEE8C VA: 0x20EEE8C
	protected float get_PathLength() { }

	[CompilerGeneratedAttribute] // RVA: 0xC1E400 Offset: 0xC1E400 VA: 0xC1E400
	// RVA: 0x20EEE94 Offset: 0x20EEE94 VA: 0x20EEE94
	protected void set_PathLength(float value) { }

	// RVA: 0x20EEE9C Offset: 0x20EEE9C VA: 0x20EEE9C
	private void OnEnable() { }

	// RVA: 0x20EEF0C Offset: 0x20EEF0C VA: 0x20EEF0C Slot: 4
	public virtual void Build() { }

	// RVA: 0x20EF0E0 Offset: 0x20EF0E0 VA: 0x20EF0E0 Slot: 5
	public virtual Vector3 GetPositionOnPath(float time) { }

	// RVA: 0x20EF308 Offset: 0x20EF308 VA: 0x20EF308
	public void Reverse() { }

	// RVA: 0x20EF368 Offset: 0x20EF368 VA: 0x20EF368
	public void OnInternalDrawGizmos(Color splineColor, float displayResolution) { }

	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Display(Color splineColor);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract void Close();

	// RVA: -1 Offset: -1 Slot: 8
	public abstract Vector3 GetPosition(float time);

	// RVA: 0x20EF5C8 Offset: 0x20EF5C8 VA: 0x20EF5C8
	protected void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class CatmullRomSplineSolver : AbstractSplineSolver // TypeDefIndex: 3762
{
	// Methods

	// RVA: 0x20F01A0 Offset: 0x20F01A0 VA: 0x20F01A0
	public void .ctor(List<SplineKeyframe> nodes) { }

	// RVA: 0x20F01CC Offset: 0x20F01CC VA: 0x20F01CC Slot: 7
	public override void Close() { }

	// RVA: 0x20F09E4 Offset: 0x20F09E4 VA: 0x20F09E4 Slot: 8
	public override Vector3 GetPosition(float time) { }

	// RVA: 0x20F0E90 Offset: 0x20F0E90 VA: 0x20F0E90 Slot: 6
	public override void Display(Color splineColor) { }
}

// Namespace: WellFired
[Serializable]
public class CubicBezierSplineSolver : AbstractSplineSolver // TypeDefIndex: 3763
{
	// Methods

	// RVA: 0x20F11A0 Offset: 0x20F11A0 VA: 0x20F11A0
	public void .ctor(List<SplineKeyframe> nodes) { }

	// RVA: 0x20F11CC Offset: 0x20F11CC VA: 0x20F11CC Slot: 7
	public override void Close() { }

	// RVA: 0x20F11D0 Offset: 0x20F11D0 VA: 0x20F11D0 Slot: 8
	public override Vector3 GetPosition(float time) { }

	// RVA: 0x20F1408 Offset: 0x20F1408 VA: 0x20F1408 Slot: 6
	public override void Display(Color splineColor) { }
}

// Namespace: WellFired
[Serializable]
public class LinearSplineSolver : AbstractSplineSolver // TypeDefIndex: 3764
{
	// Fields
	private Dictionary<int, float> segmentStartLocations; // 0x30
	private Dictionary<int, float> segmentDistances; // 0x38
	private int currentSegment; // 0x40

	// Methods

	// RVA: 0x20F1890 Offset: 0x20F1890 VA: 0x20F1890 Slot: 4
	public override void Build() { }

	// RVA: 0x20F1B50 Offset: 0x20F1B50 VA: 0x20F1B50 Slot: 7
	public override void Close() { }

	// RVA: 0x20F1D14 Offset: 0x20F1D14 VA: 0x20F1D14 Slot: 8
	public override Vector3 GetPosition(float time) { }

	// RVA: 0x20F1D20 Offset: 0x20F1D20 VA: 0x20F1D20 Slot: 5
	public override Vector3 GetPositionOnPath(float time) { }

	// RVA: 0x20F20A0 Offset: 0x20F20A0 VA: 0x20F20A0 Slot: 6
	public override void Display(Color splineColor) { }

	// RVA: 0x20F20A4 Offset: 0x20F20A4 VA: 0x20F20A4
	public void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class QuadraticSplineSolver : AbstractSplineSolver // TypeDefIndex: 3765
{
	// Methods

	// RVA: 0x20F3AC8 Offset: 0x20F3AC8 VA: 0x20F3AC8
	protected float quadBezierLength(Vector3 startPoint, Vector3 controlPoint, Vector3 endPoint) { }

	// RVA: 0x20F3F70 Offset: 0x20F3F70 VA: 0x20F3F70 Slot: 7
	public override void Close() { }

	// RVA: 0x20F3F74 Offset: 0x20F3F74 VA: 0x20F3F74 Slot: 8
	public override Vector3 GetPosition(float time) { }

	// RVA: 0x20F412C Offset: 0x20F412C VA: 0x20F412C Slot: 6
	public override void Display(Color splineColor) { }

	// RVA: 0x20F43D0 Offset: 0x20F43D0 VA: 0x20F43D0
	public void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class USTimelineAnimation : USTimelineBase // TypeDefIndex: 3766
{
	// Fields
	private Dictionary<int, List<AnimatorClipInfo>> initialAnimationInfo; // 0x28
	private Dictionary<int, AnimatorStateInfo> initialAnimatorStateInfo; // 0x30
	[SerializeField] // RVA: 0xC1DFB0 Offset: 0xC1DFB0 VA: 0xC1DFB0
	private List<AnimationTrack> animationsTracks; // 0x38
	[SerializeField] // RVA: 0xC1DFC0 Offset: 0xC1DFC0 VA: 0xC1DFC0
	private Animator animator; // 0x40
	[SerializeField] // RVA: 0xC1DFD0 Offset: 0xC1DFD0 VA: 0xC1DFD0
	private USTimelineAnimationEditorRunner editorRunner; // 0x48
	[SerializeField] // RVA: 0xC1DFE0 Offset: 0xC1DFE0 VA: 0xC1DFE0
	private USTimelineAnimationGameRunner gameRunner; // 0x50
	[SerializeField] // RVA: 0xC1DFF0 Offset: 0xC1DFF0 VA: 0xC1DFF0
	private AnimationTimelineController animationTimelineController; // 0x58
	[SerializeField] // RVA: 0xC1E000 Offset: 0xC1E000 VA: 0xC1E000
	private Vector3 sourcePosition; // 0x60
	[SerializeField] // RVA: 0xC1E010 Offset: 0xC1E010 VA: 0xC1E010
	private Quaternion sourceOrientation; // 0x6C
	[SerializeField] // RVA: 0xC1E020 Offset: 0xC1E020 VA: 0xC1E020
	private float sourceSpeed; // 0x7C
	private bool previousEnabled; // 0x80

	// Properties
	public List<AnimationTrack> AnimationTracks { get; set; }
	private Animator Animator { get; }
	private USTimelineAnimationEditorRunner EditorRunner { get; }
	private USTimelineAnimationGameRunner GameRunner { get; }

	// Methods

	// RVA: 0x2103C78 Offset: 0x2103C78 VA: 0x2103C78
	public List<AnimationTrack> get_AnimationTracks() { }

	// RVA: 0x2103C80 Offset: 0x2103C80 VA: 0x2103C80
	private void set_AnimationTracks(List<AnimationTrack> value) { }

	// RVA: 0x2103C88 Offset: 0x2103C88 VA: 0x2103C88
	private Animator get_Animator() { }

	// RVA: 0x2103D34 Offset: 0x2103D34 VA: 0x2103D34
	private USTimelineAnimationEditorRunner get_EditorRunner() { }

	// RVA: 0x2103E10 Offset: 0x2103E10 VA: 0x2103E10
	private USTimelineAnimationGameRunner get_GameRunner() { }

	// RVA: 0x2103EEC Offset: 0x2103EEC VA: 0x2103EEC Slot: 5
	public override void StartTimeline() { }

	// RVA: 0x2104350 Offset: 0x2104350 VA: 0x2104350 Slot: 4
	public override void StopTimeline() { }

	// RVA: 0x2104894 Offset: 0x2104894 VA: 0x2104894 Slot: 6
	public override void EndTimeline() { }

	// RVA: 0x2104534 Offset: 0x2104534 VA: 0x2104534
	public void ResetAnimation() { }

	// RVA: 0x21048D8 Offset: 0x21048D8 VA: 0x21048D8 Slot: 10
	public override void Process(float sequenceTime, float playbackRate) { }

	// RVA: 0x2105214 Offset: 0x2105214 VA: 0x2105214 Slot: 7
	public override void PauseTimeline() { }

	// RVA: 0x2105278 Offset: 0x2105278 VA: 0x2105278
	public void AddTrack(AnimationTrack animationTrack) { }

	// RVA: 0x21052E8 Offset: 0x21052E8 VA: 0x21052E8
	public void RemoveTrack(AnimationTrack animationTrack) { }

	// RVA: 0x2105358 Offset: 0x2105358 VA: 0x2105358
	public void SetTracks(List<AnimationTrack> animationTracks) { }

	// RVA: 0x2105360 Offset: 0x2105360 VA: 0x2105360
	public void .ctor() { }
}

// Namespace: WellFired
[Serializable]
public class USTimelineAnimationEditorRunner : ScriptableObject // TypeDefIndex: 3767
{
	// Fields
	[SerializeField] // RVA: 0xC1E030 Offset: 0xC1E030 VA: 0xC1E030
	private Animator animator; // 0x18
	[SerializeField] // RVA: 0xC1E040 Offset: 0xC1E040 VA: 0xC1E040
	private USTimelineAnimation animationTimeline; // 0x20
	[SerializeField] // RVA: 0xC1E050 Offset: 0xC1E050 VA: 0xC1E050
	private List<AnimationClipData> allClips; // 0x28
	private List<AnimationClipData> cachedRunningClips; // 0x30
	private float previousTime; // 0x38

	// Properties
	private Animator Animator { get; set; }
	private USTimelineAnimation AnimationTimeline { get; set; }

	// Methods

	// RVA: 0x2105428 Offset: 0x2105428 VA: 0x2105428
	private Animator get_Animator() { }

	// RVA: 0x2103E00 Offset: 0x2103E00 VA: 0x2103E00
	public void set_Animator(Animator value) { }

	// RVA: 0x2105430 Offset: 0x2105430 VA: 0x2105430
	private USTimelineAnimation get_AnimationTimeline() { }

	// RVA: 0x2103E08 Offset: 0x2103E08 VA: 0x2103E08
	public void set_AnimationTimeline(USTimelineAnimation value) { }

	// RVA: 0x210488C Offset: 0x210488C VA: 0x210488C
	public void Stop() { }

	// RVA: 0x210491C Offset: 0x210491C VA: 0x210491C
	public void Process(float sequenceTime, float playbackRate) { }

	// RVA: 0x2105240 Offset: 0x2105240 VA: 0x2105240
	public void PauseTimeline() { }

	// RVA: 0x2105438 Offset: 0x2105438 VA: 0x2105438
	private void PlayClip(AnimationClipData clipToPlay, int layer, float sequenceTime) { }

	// RVA: 0x210559C Offset: 0x210559C VA: 0x210559C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D6BC Offset: 0xC1D6BC VA: 0xC1D6BC
[Serializable]
private sealed class USTimelineAnimationEditorRunner.<>c // TypeDefIndex: 3768
{
	// Fields
	public static readonly USTimelineAnimationEditorRunner.<>c <>9; // 0x0
	public static Comparison<AnimationClipData> <>9__12_0; // 0x8

	// Methods

	// RVA: 0x210562C Offset: 0x210562C VA: 0x210562C
	private static void .cctor() { }

	// RVA: 0x2105690 Offset: 0x2105690 VA: 0x2105690
	public void .ctor() { }

	// RVA: 0x2105698 Offset: 0x2105698 VA: 0x2105698
	internal int <Process>b__12_0(AnimationClipData x, AnimationClipData y) { }
}

// Namespace: WellFired
[Serializable]
public class USTimelineAnimationGameRunner : ScriptableObject // TypeDefIndex: 3769
{
	// Fields
	[SerializeField] // RVA: 0xC1E060 Offset: 0xC1E060 VA: 0xC1E060
	private Animator animator; // 0x18
	[SerializeField] // RVA: 0xC1E070 Offset: 0xC1E070 VA: 0xC1E070
	private USTimelineAnimation animationTimeline; // 0x20
	[SerializeField] // RVA: 0xC1E080 Offset: 0xC1E080 VA: 0xC1E080
	private List<AnimationClipData> allClips; // 0x28
	[SerializeField] // RVA: 0xC1E090 Offset: 0xC1E090 VA: 0xC1E090
	private List<AnimationClipData> notRunningClips; // 0x30
	[SerializeField] // RVA: 0xC1E0A0 Offset: 0xC1E0A0 VA: 0xC1E0A0
	private List<AnimationClipData> runningClips; // 0x38
	[SerializeField] // RVA: 0xC1E0B0 Offset: 0xC1E0B0 VA: 0xC1E0B0
	private List<AnimationClipData> finishedClips; // 0x40
	[SerializeField] // RVA: 0xC1E0C0 Offset: 0xC1E0C0 VA: 0xC1E0C0
	private List<AnimationClipData> newProcessingClips; // 0x48

	// Properties
	private Animator Animator { get; set; }
	private USTimelineAnimation AnimationTimeline { get; set; }

	// Methods

	// RVA: 0x21056F4 Offset: 0x21056F4 VA: 0x21056F4
	private Animator get_Animator() { }

	// RVA: 0x2103EDC Offset: 0x2103EDC VA: 0x2103EDC
	public void set_Animator(Animator value) { }

	// RVA: 0x21056FC Offset: 0x21056FC VA: 0x21056FC
	private USTimelineAnimation get_AnimationTimeline() { }

	// RVA: 0x2103EE4 Offset: 0x2103EE4 VA: 0x2103EE4
	public void set_AnimationTimeline(USTimelineAnimation value) { }

	// RVA: 0x21047B4 Offset: 0x21047B4 VA: 0x21047B4
	public void Stop() { }

	// RVA: 0x2104E14 Offset: 0x2104E14 VA: 0x2104E14
	public void Process(float sequenceTime, float playbackRate) { }

	// RVA: 0x2105274 Offset: 0x2105274 VA: 0x2105274
	public void PauseTimeline() { }

	// RVA: 0x210589C Offset: 0x210589C VA: 0x210589C
	private void SortNewProcessingClips(float sequenceTime) { }

	// RVA: 0x2105704 Offset: 0x2105704 VA: 0x2105704
	private void SortClipsAtTime(float sequenceTime, IEnumerable<AnimationClipData> sortInto, AnimationClipData.StateCheck stateCheck) { }

	// RVA: 0x2106580 Offset: 0x2106580 VA: 0x2106580
	private void PlayClip(AnimationClipData clipToPlay, int layer, float sequenceTime) { }

	// RVA: 0x2105DD8 Offset: 0x2105DD8 VA: 0x2105DD8
	private void SanityCheckClipData() { }

	// RVA: 0x21066EC Offset: 0x21066EC VA: 0x21066EC
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D6CC Offset: 0xC1D6CC VA: 0xC1D6CC
[Serializable]
private sealed class USTimelineAnimationGameRunner.<>c // TypeDefIndex: 3770
{
	// Fields
	public static readonly USTimelineAnimationGameRunner.<>c <>9; // 0x0
	public static Func<AnimationClipData, float> <>9__16_0; // 0x8
	public static Func<AnimationTrack, IEnumerable<AnimationClipData>> <>9__19_0; // 0x10

	// Methods

	// RVA: 0x21067C4 Offset: 0x21067C4 VA: 0x21067C4
	private static void .cctor() { }

	// RVA: 0x2106828 Offset: 0x2106828 VA: 0x2106828
	public void .ctor() { }

	// RVA: 0x2106830 Offset: 0x2106830 VA: 0x2106830
	internal float <SortNewProcessingClips>b__16_0(AnimationClipData processingClip) { }

	// RVA: 0x210685C Offset: 0x210685C VA: 0x210685C
	internal IEnumerable<AnimationClipData> <SanityCheckClipData>b__19_0(AnimationTrack animationTrack) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D6DC Offset: 0xC1D6DC VA: 0xC1D6DC
private sealed class USTimelineAnimationGameRunner.<>c__DisplayClass19_0 // TypeDefIndex: 3771
{
	// Fields
	public AnimationClipData clip; // 0x10

	// Methods

	// RVA: 0x21066E4 Offset: 0x21066E4 VA: 0x21066E4
	public void .ctor() { }

	// RVA: 0x2106888 Offset: 0x2106888 VA: 0x2106888
	internal bool <SanityCheckClipData>b__1(AnimationClipData element) { }

	// RVA: 0x2106904 Offset: 0x2106904 VA: 0x2106904
	internal bool <SanityCheckClipData>b__2(AnimationClipData element) { }

	// RVA: 0x2106980 Offset: 0x2106980 VA: 0x2106980
	internal bool <SanityCheckClipData>b__3(AnimationClipData element) { }
}

// Namespace: WellFired
public class USTimelineBase : MonoBehaviour // TypeDefIndex: 3772
{
	// Fields
	private USTimelineContainer timelineContainer; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC1E0D0 Offset: 0xC1E0D0 VA: 0xC1E0D0
	private bool <ShouldRenderGizmos>k__BackingField; // 0x20

	// Properties
	public Transform AffectedObject { get; }
	public USTimelineContainer TimelineContainer { get; }
	public USSequencer Sequence { get; }
	public bool ShouldRenderGizmos { get; set; }

	// Methods

	// RVA: 0x2102434 Offset: 0x2102434 VA: 0x2102434
	public Transform get_AffectedObject() { }

	// RVA: 0x20F6DC0 Offset: 0x20F6DC0 VA: 0x20F6DC0
	public USTimelineContainer get_TimelineContainer() { }

	// RVA: 0x20F6CEC Offset: 0x20F6CEC VA: 0x20F6CEC
	public USSequencer get_Sequence() { }

	[CompilerGeneratedAttribute] // RVA: 0xC1E410 Offset: 0xC1E410 VA: 0xC1E410
	// RVA: 0x2106AC0 Offset: 0x2106AC0 VA: 0x2106AC0
	public bool get_ShouldRenderGizmos() { }

	[CompilerGeneratedAttribute] // RVA: 0xC1E420 Offset: 0xC1E420 VA: 0xC1E420
	// RVA: 0x2106AC8 Offset: 0x2106AC8 VA: 0x2106AC8
	public void set_ShouldRenderGizmos(bool value) { }

	// RVA: 0x2106AD4 Offset: 0x2106AD4 VA: 0x2106AD4 Slot: 4
	public virtual void StopTimeline() { }

	// RVA: 0x2106AD8 Offset: 0x2106AD8 VA: 0x2106AD8 Slot: 5
	public virtual void StartTimeline() { }

	// RVA: 0x21048D4 Offset: 0x21048D4 VA: 0x21048D4 Slot: 6
	public virtual void EndTimeline() { }

	// RVA: 0x2106ADC Offset: 0x2106ADC VA: 0x2106ADC Slot: 7
	public virtual void PauseTimeline() { }

	// RVA: 0x2106AE0 Offset: 0x2106AE0 VA: 0x2106AE0 Slot: 8
	public virtual void ResumeTimeline() { }

	// RVA: 0x2106AE4 Offset: 0x2106AE4 VA: 0x2106AE4 Slot: 9
	public virtual void SkipTimelineTo(float time) { }

	// RVA: 0x2106AE8 Offset: 0x2106AE8 VA: 0x2106AE8 Slot: 10
	public virtual void Process(float sequencerTime, float playbackRate) { }

	// RVA: 0x2106AEC Offset: 0x2106AEC VA: 0x2106AEC Slot: 11
	public virtual void ManuallySetTime(float sequencerTime) { }

	// RVA: 0x2106AF0 Offset: 0x2106AF0 VA: 0x2106AF0 Slot: 12
	public virtual void LateBindAffectedObjectInScene(Transform newAffectedObject) { }

	// RVA: 0x2106AF4 Offset: 0x2106AF4 VA: 0x2106AF4 Slot: 13
	public virtual string GetJson() { }

	// RVA: 0x2106B5C Offset: 0x2106B5C VA: 0x2106B5C Slot: 14
	public virtual void ResetCachedData() { }

	// RVA: 0x2105420 Offset: 0x2105420 VA: 0x2105420
	public void .ctor() { }
}

// Namespace: WellFired
[ExecuteInEditMode] // RVA: 0xC1D6EC Offset: 0xC1D6EC VA: 0xC1D6EC
public class USTimelineContainer : MonoBehaviour // TypeDefIndex: 3773
{
	// Fields
	[SerializeField] // RVA: 0xC1E0E0 Offset: 0xC1E0E0 VA: 0xC1E0E0
	private Transform affectedObject; // 0x18
	[SerializeField] // RVA: 0xC1E0F0 Offset: 0xC1E0F0 VA: 0xC1E0F0
	private string affectedObjectPath; // 0x20
	[SerializeField] // RVA: 0xC1E100 Offset: 0xC1E100 VA: 0xC1E100
	private int index; // 0x28
	private USSequencer sequence; // 0x30
	private USTimelineBase[] timelines; // 0x38

	// Properties
	public Transform AffectedObject { get; set; }
	public USSequencer Sequence { get; }
	public USTimelineBase[] Timelines { get; }
	public int Index { get; set; }
	public string AffectedObjectPath { get; set; }

	// Methods

	// RVA: 0x2106B64 Offset: 0x2106B64 VA: 0x2106B64
	public static int Comparer(USTimelineContainer a, USTimelineContainer b) { }

	// RVA: 0x20F6F58 Offset: 0x20F6F58 VA: 0x20F6F58
	public Transform get_AffectedObject() { }

	// RVA: 0x21027D8 Offset: 0x21027D8 VA: 0x21027D8
	public void set_AffectedObject(Transform value) { }

	// RVA: 0x21069FC Offset: 0x21069FC VA: 0x21069FC
	public USSequencer get_Sequence() { }

	// RVA: 0x2101734 Offset: 0x2101734 VA: 0x2101734
	public USTimelineBase[] get_Timelines() { }

	// RVA: 0x2102884 Offset: 0x2102884 VA: 0x2102884
	public int get_Index() { }

	// RVA: 0x210288C Offset: 0x210288C VA: 0x210288C
	public void set_Index(int value) { }

	// RVA: 0x2106CA4 Offset: 0x2106CA4 VA: 0x2106CA4
	public string get_AffectedObjectPath() { }

	// RVA: 0x2106CAC Offset: 0x2106CAC VA: 0x2106CAC
	private void set_AffectedObjectPath(string value) { }

	// RVA: 0x2106CB4 Offset: 0x2106CB4 VA: 0x2106CB4
	private void Start() { }

	// RVA: 0x2106EB0 Offset: 0x2106EB0 VA: 0x2106EB0
	public void AddNewTimeline(USTimelineBase timeline) { }

	// RVA: 0x2101838 Offset: 0x2101838 VA: 0x2101838
	public void ProcessTimelines(float sequencerTime, float playbackRate) { }

	// RVA: 0x21032B4 Offset: 0x21032B4 VA: 0x21032B4
	public void SkipTimelineTo(float sequencerTime) { }

	// RVA: 0x2101794 Offset: 0x2101794 VA: 0x2101794
	public void ManuallySetTime(float sequencerTime) { }

	// RVA: 0x2106BBC Offset: 0x2106BBC VA: 0x2106BBC
	public void RenameTimelineContainer() { }

	// RVA: 0x21034C4 Offset: 0x21034C4 VA: 0x21034C4
	public void ResetCachedData() { }

	// RVA: 0x2106F00 Offset: 0x2106F00 VA: 0x2106F00
	public void .ctor() { }
}

// Namespace: WellFired
public class USTimelineEvent : USTimelineBase // TypeDefIndex: 3774
{
	// Fields
	private float elapsedTime; // 0x24
	private USEventBase[] cachedEvents; // 0x28

	// Properties
	public int EventCount { get; }
	public USEventBase[] Events { get; }

	// Methods

	// RVA: 0x2106F10 Offset: 0x2106F10 VA: 0x2106F10
	public int get_EventCount() { }

	// RVA: 0x21021FC Offset: 0x21021FC VA: 0x21021FC
	public USEventBase[] get_Events() { }

	// RVA: 0x2106F44 Offset: 0x2106F44 VA: 0x2106F44
	public USEventBase Event(int index) { }

	// RVA: 0x210710C Offset: 0x210710C VA: 0x210710C Slot: 4
	public override void StopTimeline() { }

	// RVA: 0x2107460 Offset: 0x2107460 VA: 0x2107460 Slot: 7
	public override void PauseTimeline() { }

	// RVA: 0x21074EC Offset: 0x21074EC VA: 0x21074EC Slot: 8
	public override void ResumeTimeline() { }

	// RVA: 0x21075DC Offset: 0x21075DC VA: 0x21075DC Slot: 9
	public override void SkipTimelineTo(float time) { }

	// RVA: 0x2107A3C Offset: 0x2107A3C VA: 0x2107A3C Slot: 10
	public override void Process(float sequencerTime, float playbackRate) { }

	// RVA: 0x2107C74 Offset: 0x2107C74 VA: 0x2107C74
	private void FireEvent(USEventBase baseEvent, float prevElapsedTime, float elapsedTime) { }

	// RVA: 0x2107D50 Offset: 0x2107D50 VA: 0x2107D50
	private void FireEventReverse(USEventBase baseEvent, float prevElapsedTime, float elapsedTime) { }

	// RVA: 0x2107D54 Offset: 0x2107D54 VA: 0x2107D54
	private void FireEventCommon(USEventBase baseEvent, float sequencerTime, float prevElapsedTime, float elapsedTime) { }

	// RVA: 0x2107F20 Offset: 0x2107F20 VA: 0x2107F20 Slot: 11
	public override void ManuallySetTime(float sequencerTime) { }

	// RVA: 0x2108344 Offset: 0x2108344 VA: 0x2108344
	public void AddNewEvent(USEventBase sequencerEvent) { }

	// RVA: 0x2108418 Offset: 0x2108418 VA: 0x2108418
	public void RemoveAndDestroyEvent(Transform sequencerEvent) { }

	// RVA: 0x21083AC Offset: 0x21083AC VA: 0x21083AC
	public void SortEvents() { }

	// RVA: 0x210851C Offset: 0x210851C VA: 0x210851C Slot: 14
	public override void ResetCachedData() { }

	// RVA: 0x2108528 Offset: 0x2108528 VA: 0x2108528
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D6FC Offset: 0xC1D6FC VA: 0xC1D6FC
private sealed class USTimelineEvent.<>c__DisplayClass7_0 // TypeDefIndex: 3775
{
	// Fields
	public float prevElapsedTime; // 0x10

	// Methods

	// RVA: 0x2107458 Offset: 0x2107458 VA: 0x2107458
	public void .ctor() { }

	// RVA: 0x2108654 Offset: 0x2108654 VA: 0x2108654
	internal bool <StopTimeline>b__0(USEventBase e) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC1D70C Offset: 0xC1D70C VA: 0xC1D70C
[Serializable]
private sealed class USTimelineEvent.<>c // TypeDefIndex: 3776
{
	// Fields
	public static readonly USTimelineEvent.<>c <>9; // 0x0
	public static Comparison<USEventBase> <>9__11_0; // 0x8
	public static Comparison<USEventBase> <>9__11_1; // 0x10

	// Methods

	// RVA: 0x2108530 Offset: 0x2108530 VA: 0x2108530
	private static void .cctor() { }

	// RVA: 0x2108594 Offset: 0x2108594 VA: 0x2108594
	public void .ctor() { }

	// RVA: 0x210859C Offset: 0x210859C VA: 0x210859C
	internal int <Process>b__11_0(USEventBase a, USEventBase b) { }

	// RVA: 0x21085F8 Offset: 0x21085F8 VA: 0x21085F8
	internal int <Process>b__11_1(USEventBase a, USEventBase b) { }
}

// Namespace: WellFired
[Serializable]
public class USTimelineObjectPath : USTimelineBase // TypeDefIndex: 3777
{
	// Fields
	[SerializeField] // RVA: 0xC1E110 Offset: 0xC1E110 VA: 0xC1E110
	private Easing.EasingType easingType; // 0x24
	[SerializeField] // RVA: 0xC1E120 Offset: 0xC1E120 VA: 0xC1E120
	private ShakeType shakeType; // 0x28
	[SerializeField] // RVA: 0xC1E130 Offset: 0xC1E130 VA: 0xC1E130
	private SplineOrientationMode splineOrientationMode; // 0x2C
	[SerializeField] // RVA: 0xC1E140 Offset: 0xC1E140 VA: 0xC1E140
	private Transform lookAtTarget; // 0x30
	[SerializeField] // RVA: 0xC1E150 Offset: 0xC1E150 VA: 0xC1E150
	private string lookAtTargetPath; // 0x38
	[SerializeField] // RVA: 0xC1E160 Offset: 0xC1E160 VA: 0xC1E160
	private Vector3 sourcePosition; // 0x40
	[SerializeField] // RVA: 0xC1E170 Offset: 0xC1E170 VA: 0xC1E170
	private Quaternion sourceRotation; // 0x4C
	[SerializeField] // RVA: 0xC1E180 Offset: 0xC1E180 VA: 0xC1E180
	private Spline objectSpline; // 0x60
	[SerializeField] // RVA: 0xC1E190 Offset: 0xC1E190 VA: 0xC1E190
	private float startTime; // 0x68
	[SerializeField] // RVA: 0xC1E1A0 Offset: 0xC1E1A0 VA: 0xC1E1A0
	private float endTime; // 0x6C
	[SerializeField] // RVA: 0xC1E1B0 Offset: 0xC1E1B0 VA: 0xC1E1B0
	private List<SplineKeyframe> keyframes; // 0x70
	[SerializeField] // RVA: 0xC1E1C0 Offset: 0xC1E1C0 VA: 0xC1E1C0
	private Shake Shake; // 0x78
	[SerializeField] // RVA: 0xC1E1D0 Offset: 0xC1E1D0 VA: 0xC1E1D0
	private float shakeSpeedPosition; // 0x80
	[SerializeField] // RVA: 0xC1E1E0 Offset: 0xC1E1E0 VA: 0xC1E1E0
	private Vector3 shakeRangePosition; // 0x84
	[SerializeField] // RVA: 0xC1E1F0 Offset: 0xC1E1F0 VA: 0xC1E1F0
	private float shakeSpeedRotation; // 0x90
	[SerializeField] // RVA: 0xC1E200 Offset: 0xC1E200 VA: 0xC1E200
	private Vector3 shakeRangeRotation; // 0x94
	[SerializeField] // RVA: 0xC1E210 Offset: 0xC1E210 VA: 0xC1E210
	private int seed; // 0xA0
	private LerpedQuaternion SmoothedQuaternion; // 0xA4

	// Properties
	public Easing.EasingType EasingType { get; set; }
	public ShakeType ShakeType { get; set; }
	public SplineOrientationMode SplineOrientationMode { get; set; }
	public Transform LookAtTarget { get; set; }
	public Vector3 SourcePosition { get; set; }
	public Quaternion SourceRotation { get; set; }
	public Spline ObjectSpline { get; set; }
	public float StartTime { get; set; }
	public float EndTime { get; set; }
	private int Seed { get; set; }
	public List<SplineKeyframe> Keyframes { get; set; }
	public SplineKeyframe FirstNode { get; set; }
	public SplineKeyframe LastNode { get; set; }
	public Color PathColor { get; set; }
	public float DisplayResolution { get; set; }

	// Methods

	// RVA: 0x2108690 Offset: 0x2108690 VA: 0x2108690
	public Easing.EasingType get_EasingType() { }

	// RVA: 0x2108698 Offset: 0x2108698 VA: 0x2108698
	public void set_EasingType(Easing.EasingType value) { }

	// RVA: 0x21086A0 Offset: 0x21086A0 VA: 0x21086A0
	public ShakeType get_ShakeType() { }

	// RVA: 0x21086A8 Offset: 0x21086A8 VA: 0x21086A8
	public void set_ShakeType(ShakeType value) { }

	// RVA: 0x21086B0 Offset: 0x21086B0 VA: 0x21086B0
	public SplineOrientationMode get_SplineOrientationMode() { }

	// RVA: 0x21086B8 Offset: 0x21086B8 VA: 0x21086B8
	public void set_SplineOrientationMode(SplineOrientationMode value) { }

	// RVA: 0x21086C0 Offset: 0x21086C0 VA: 0x21086C0
	public Transform get_LookAtTarget() { }

	// RVA: 0x21086C8 Offset: 0x21086C8 VA: 0x21086C8
	public void set_LookAtTarget(Transform value) { }

	// RVA: 0x21086F4 Offset: 0x21086F4 VA: 0x21086F4
	public Vector3 get_SourcePosition() { }

	// RVA: 0x2108700 Offset: 0x2108700 VA: 0x2108700
	public void set_SourcePosition(Vector3 value) { }

	// RVA: 0x210870C Offset: 0x210870C VA: 0x210870C
	public Quaternion get_SourceRotation() { }

	// RVA: 0x2108718 Offset: 0x2108718 VA: 0x2108718
	public void set_SourceRotation(Quaternion value) { }

	// RVA: 0x2108724 Offset: 0x2108724 VA: 0x2108724
	public Spline get_ObjectSpline() { }

	// RVA: 0x210872C Offset: 0x210872C VA: 0x210872C
	public void set_ObjectSpline(Spline value) { }

	// RVA: 0x2108734 Offset: 0x2108734 VA: 0x2108734
	public float get_StartTime() { }

	// RVA: 0x210873C Offset: 0x210873C VA: 0x210873C
	public void set_StartTime(float value) { }

	// RVA: 0x2108744 Offset: 0x2108744 VA: 0x2108744
	public float get_EndTime() { }

	// RVA: 0x210874C Offset: 0x210874C VA: 0x210874C
	public void set_EndTime(float value) { }

	// RVA: 0x2108754 Offset: 0x2108754 VA: 0x2108754
	private int get_Seed() { }

	// RVA: 0x210875C Offset: 0x210875C VA: 0x210875C
	public void set_Seed(int value) { }

	// RVA: 0x2108764 Offset: 0x2108764 VA: 0x2108764
	public List<SplineKeyframe> get_Keyframes() { }

	// RVA: 0x210876C Offset: 0x210876C VA: 0x210876C
	private void set_Keyframes(List<SplineKeyframe> value) { }

	// RVA: 0x21087A8 Offset: 0x21087A8 VA: 0x21087A8
	public SplineKeyframe get_FirstNode() { }

	// RVA: 0x210882C Offset: 0x210882C VA: 0x210882C
	private void set_FirstNode(SplineKeyframe value) { }

	// RVA: 0x2108830 Offset: 0x2108830 VA: 0x2108830
	public SplineKeyframe get_LastNode() { }

	// RVA: 0x2108904 Offset: 0x2108904 VA: 0x2108904
	private void set_LastNode(SplineKeyframe value) { }

	// RVA: 0x2108908 Offset: 0x2108908 VA: 0x2108908
	public Color get_PathColor() { }

	// RVA: 0x2108938 Offset: 0x2108938 VA: 0x2108938
	public void set_PathColor(Color value) { }

	// RVA: 0x2108988 Offset: 0x2108988 VA: 0x2108988
	public float get_DisplayResolution() { }

	// RVA: 0x21089B4 Offset: 0x21089B4 VA: 0x21089B4
	public void set_DisplayResolution(float value) { }

	// RVA: 0x21089EC Offset: 0x21089EC VA: 0x21089EC
	private void OnEnable() { }

	// RVA: 0x2108A00 Offset: 0x2108A00 VA: 0x2108A00
	public void SetKeyframes(List<SplineKeyframe> keyframes) { }

	// RVA: 0x21089F0 Offset: 0x21089F0 VA: 0x21089F0
	public void Build() { }

	// RVA: 0x2108C54 Offset: 0x2108C54 VA: 0x2108C54
	public void BuildShake() { }

	// RVA: 0x2108CD8 Offset: 0x2108CD8 VA: 0x2108CD8
	public void AddKeyframe(SplineKeyframe keyframe) { }

	// RVA: 0x2108D50 Offset: 0x2108D50 VA: 0x2108D50
