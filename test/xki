
	// RVA: 0x22ACCD0 Offset: 0x22ACCD0 VA: 0x22ACCD0 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22ACE5C Offset: 0x22ACE5C VA: 0x22ACE5C
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect409r1Holder : X9ECParametersHolder // TypeDefIndex: 4532
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 409;
	private const int k = 87;

	// Methods

	// RVA: 0x22ACEC0 Offset: 0x22ACEC0 VA: 0x22ACEC0
	private void .ctor() { }

	// RVA: 0x22ACEC8 Offset: 0x22ACEC8 VA: 0x22ACEC8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AD088 Offset: 0x22AD088 VA: 0x22AD088
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect571k1Holder : X9ECParametersHolder // TypeDefIndex: 4533
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 571;
	private const int k1 = 2;
	private const int k2 = 5;
	private const int k3 = 10;

	// Methods

	// RVA: 0x22AD0EC Offset: 0x22AD0EC VA: 0x22AD0EC
	private void .ctor() { }

	// RVA: 0x22AD0F4 Offset: 0x22AD0F4 VA: 0x22AD0F4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AD28C Offset: 0x22AD28C VA: 0x22AD28C
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect571r1Holder : X9ECParametersHolder // TypeDefIndex: 4534
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 571;
	private const int k1 = 2;
	private const int k2 = 5;
	private const int k3 = 10;

	// Methods

	// RVA: 0x22AD2F0 Offset: 0x22AD2F0 VA: 0x22AD2F0
	private void .ctor() { }

	// RVA: 0x22AD2F8 Offset: 0x22AD2F8 VA: 0x22AD2F8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AD4C4 Offset: 0x22AD4C4 VA: 0x22AD4C4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.Sec
public abstract class SecObjectIdentifiers // TypeDefIndex: 4535
{
	// Fields
	public static readonly DerObjectIdentifier EllipticCurve; // 0x0
	public static readonly DerObjectIdentifier SecT163k1; // 0x8
	public static readonly DerObjectIdentifier SecT163r1; // 0x10
	public static readonly DerObjectIdentifier SecT239k1; // 0x18
	public static readonly DerObjectIdentifier SecT113r1; // 0x20
	public static readonly DerObjectIdentifier SecT113r2; // 0x28
	public static readonly DerObjectIdentifier SecP112r1; // 0x30
	public static readonly DerObjectIdentifier SecP112r2; // 0x38
	public static readonly DerObjectIdentifier SecP160r1; // 0x40
	public static readonly DerObjectIdentifier SecP160k1; // 0x48
	public static readonly DerObjectIdentifier SecP256k1; // 0x50
	public static readonly DerObjectIdentifier SecT163r2; // 0x58
	public static readonly DerObjectIdentifier SecT283k1; // 0x60
	public static readonly DerObjectIdentifier SecT283r1; // 0x68
	public static readonly DerObjectIdentifier SecT131r1; // 0x70
	public static readonly DerObjectIdentifier SecT131r2; // 0x78
	public static readonly DerObjectIdentifier SecT193r1; // 0x80
	public static readonly DerObjectIdentifier SecT193r2; // 0x88
	public static readonly DerObjectIdentifier SecT233k1; // 0x90
	public static readonly DerObjectIdentifier SecT233r1; // 0x98
	public static readonly DerObjectIdentifier SecP128r1; // 0xA0
	public static readonly DerObjectIdentifier SecP128r2; // 0xA8
	public static readonly DerObjectIdentifier SecP160r2; // 0xB0
	public static readonly DerObjectIdentifier SecP192k1; // 0xB8
	public static readonly DerObjectIdentifier SecP224k1; // 0xC0
	public static readonly DerObjectIdentifier SecP224r1; // 0xC8
	public static readonly DerObjectIdentifier SecP384r1; // 0xD0
	public static readonly DerObjectIdentifier SecP521r1; // 0xD8
	public static readonly DerObjectIdentifier SecT409k1; // 0xE0
	public static readonly DerObjectIdentifier SecT409r1; // 0xE8
	public static readonly DerObjectIdentifier SecT571k1; // 0xF0
	public static readonly DerObjectIdentifier SecT571r1; // 0xF8
	public static readonly DerObjectIdentifier SecP192r1; // 0x100
	public static readonly DerObjectIdentifier SecP256r1; // 0x108

	// Methods

	// RVA: 0x22AD528 Offset: 0x22AD528 VA: 0x22AD528
	protected void .ctor() { }

	// RVA: 0x22AD530 Offset: 0x22AD530 VA: 0x22AD530
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.TeleTrust
public class TeleTrusTNamedCurves // TypeDefIndex: 4536
{
	// Fields
	private static readonly IDictionary objIds; // 0x0
	private static readonly IDictionary curves; // 0x8
	private static readonly IDictionary names; // 0x10

	// Properties
	public static IEnumerable Names { get; }

	// Methods

	// RVA: 0x22ADE58 Offset: 0x22ADE58 VA: 0x22ADE58
	private static void .cctor() { }

	// RVA: 0x22AE58C Offset: 0x22AE58C VA: 0x22AE58C
	public void .ctor() { }

	// RVA: 0x22AE594 Offset: 0x22AE594 VA: 0x22AE594
	private static ECCurve ConfigureCurve(ECCurve curve) { }

	// RVA: 0x22AE348 Offset: 0x22AE348 VA: 0x22AE348
	private static void DefineCurve(string name, DerObjectIdentifier oid, X9ECParametersHolder holder) { }

	// RVA: 0x22AE598 Offset: 0x22AE598 VA: 0x22AE598
	public static X9ECParameters GetByName(string name) { }

	// RVA: 0x22AE7D4 Offset: 0x22AE7D4 VA: 0x22AE7D4
	public static X9ECParameters GetByOid(DerObjectIdentifier oid) { }

	// RVA: 0x22AE630 Offset: 0x22AE630 VA: 0x22AE630
	public static DerObjectIdentifier GetOid(string name) { }

	// RVA: 0x22AE958 Offset: 0x22AE958 VA: 0x22AE958
	public static string GetName(DerObjectIdentifier oid) { }

	// RVA: 0x22AEAAC Offset: 0x22AEAAC VA: 0x22AEAAC
	public static IEnumerable get_Names() { }

	// RVA: 0x22AEBB8 Offset: 0x22AEBB8 VA: 0x22AEBB8
	public static DerObjectIdentifier GetOid(short curvesize, bool twisted) { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP160r1Holder : X9ECParametersHolder // TypeDefIndex: 4537
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AEDF4 Offset: 0x22AEDF4 VA: 0x22AEDF4
	private void .ctor() { }

	// RVA: 0x22AEDFC Offset: 0x22AEDFC VA: 0x22AEDFC Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AEFE4 Offset: 0x22AEFE4 VA: 0x22AEFE4
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP160t1Holder : X9ECParametersHolder // TypeDefIndex: 4538
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AF048 Offset: 0x22AF048 VA: 0x22AF048
	private void .ctor() { }

	// RVA: 0x22AF050 Offset: 0x22AF050 VA: 0x22AF050 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AF238 Offset: 0x22AF238 VA: 0x22AF238
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP192r1Holder : X9ECParametersHolder // TypeDefIndex: 4539
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AF29C Offset: 0x22AF29C VA: 0x22AF29C
	private void .ctor() { }

	// RVA: 0x22AF2A4 Offset: 0x22AF2A4 VA: 0x22AF2A4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AF48C Offset: 0x22AF48C VA: 0x22AF48C
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP192t1Holder : X9ECParametersHolder // TypeDefIndex: 4540
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AF4F0 Offset: 0x22AF4F0 VA: 0x22AF4F0
	private void .ctor() { }

	// RVA: 0x22AF4F8 Offset: 0x22AF4F8 VA: 0x22AF4F8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AF6E0 Offset: 0x22AF6E0 VA: 0x22AF6E0
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP224r1Holder : X9ECParametersHolder // TypeDefIndex: 4541
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AF744 Offset: 0x22AF744 VA: 0x22AF744
	private void .ctor() { }

	// RVA: 0x22AF74C Offset: 0x22AF74C VA: 0x22AF74C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AF934 Offset: 0x22AF934 VA: 0x22AF934
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP224t1Holder : X9ECParametersHolder // TypeDefIndex: 4542
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AF998 Offset: 0x22AF998 VA: 0x22AF998
	private void .ctor() { }

	// RVA: 0x22AF9A0 Offset: 0x22AF9A0 VA: 0x22AF9A0 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AFB88 Offset: 0x22AFB88 VA: 0x22AFB88
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP256r1Holder : X9ECParametersHolder // TypeDefIndex: 4543
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AFBEC Offset: 0x22AFBEC VA: 0x22AFBEC
	private void .ctor() { }

	// RVA: 0x22AFBF4 Offset: 0x22AFBF4 VA: 0x22AFBF4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22AFDDC Offset: 0x22AFDDC VA: 0x22AFDDC
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP256t1Holder : X9ECParametersHolder // TypeDefIndex: 4544
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22AFE40 Offset: 0x22AFE40 VA: 0x22AFE40
	private void .ctor() { }

	// RVA: 0x22AFE48 Offset: 0x22AFE48 VA: 0x22AFE48 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22B0030 Offset: 0x22B0030 VA: 0x22B0030
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP320r1Holder : X9ECParametersHolder // TypeDefIndex: 4545
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22B0094 Offset: 0x22B0094 VA: 0x22B0094
	private void .ctor() { }

	// RVA: 0x22B009C Offset: 0x22B009C VA: 0x22B009C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22B0284 Offset: 0x22B0284 VA: 0x22B0284
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP320t1Holder : X9ECParametersHolder // TypeDefIndex: 4546
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22B02E8 Offset: 0x22B02E8 VA: 0x22B02E8
	private void .ctor() { }

	// RVA: 0x22B02F0 Offset: 0x22B02F0 VA: 0x22B02F0 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22B04D8 Offset: 0x22B04D8 VA: 0x22B04D8
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP384r1Holder : X9ECParametersHolder // TypeDefIndex: 4547
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22B053C Offset: 0x22B053C VA: 0x22B053C
	private void .ctor() { }

	// RVA: 0x22B0544 Offset: 0x22B0544 VA: 0x22B0544 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22B072C Offset: 0x22B072C VA: 0x22B072C
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP384t1Holder : X9ECParametersHolder // TypeDefIndex: 4548
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22B0790 Offset: 0x22B0790 VA: 0x22B0790
	private void .ctor() { }

	// RVA: 0x22B0798 Offset: 0x22B0798 VA: 0x22B0798 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22B0980 Offset: 0x22B0980 VA: 0x22B0980
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP512r1Holder : X9ECParametersHolder // TypeDefIndex: 4549
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x22B09E4 Offset: 0x22B09E4 VA: 0x22B09E4
	private void .ctor() { }

	// RVA: 0x22B09EC Offset: 0x22B09EC VA: 0x22B09EC Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x22B0BD4 Offset: 0x22B0BD4 VA: 0x22B0BD4
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP512t1Holder : X9ECParametersHolder // TypeDefIndex: 4550
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x2599160 Offset: 0x2599160 VA: 0x2599160
	private void .ctor() { }

	// RVA: 0x2599168 Offset: 0x2599168 VA: 0x2599168 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2599364 Offset: 0x2599364 VA: 0x2599364
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.TeleTrust
public sealed class TeleTrusTObjectIdentifiers // TypeDefIndex: 4551
{
	// Fields
	public static readonly DerObjectIdentifier TeleTrusTAlgorithm; // 0x0
	public static readonly DerObjectIdentifier RipeMD160; // 0x8
	public static readonly DerObjectIdentifier RipeMD128; // 0x10
	public static readonly DerObjectIdentifier RipeMD256; // 0x18
	public static readonly DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm; // 0x20
	public static readonly DerObjectIdentifier RsaSignatureWithRipeMD160; // 0x28
	public static readonly DerObjectIdentifier RsaSignatureWithRipeMD128; // 0x30
	public static readonly DerObjectIdentifier RsaSignatureWithRipeMD256; // 0x38
	public static readonly DerObjectIdentifier ECSign; // 0x40
	public static readonly DerObjectIdentifier ECSignWithSha1; // 0x48
	public static readonly DerObjectIdentifier ECSignWithRipeMD160; // 0x50
	public static readonly DerObjectIdentifier EccBrainpool; // 0x58
	public static readonly DerObjectIdentifier EllipticCurve; // 0x60
	public static readonly DerObjectIdentifier VersionOne; // 0x68
	public static readonly DerObjectIdentifier BrainpoolP160R1; // 0x70
	public static readonly DerObjectIdentifier BrainpoolP160T1; // 0x78
	public static readonly DerObjectIdentifier BrainpoolP192R1; // 0x80
	public static readonly DerObjectIdentifier BrainpoolP192T1; // 0x88
	public static readonly DerObjectIdentifier BrainpoolP224R1; // 0x90
	public static readonly DerObjectIdentifier BrainpoolP224T1; // 0x98
	public static readonly DerObjectIdentifier BrainpoolP256R1; // 0xA0
	public static readonly DerObjectIdentifier BrainpoolP256T1; // 0xA8
	public static readonly DerObjectIdentifier BrainpoolP320R1; // 0xB0
	public static readonly DerObjectIdentifier BrainpoolP320T1; // 0xB8
	public static readonly DerObjectIdentifier BrainpoolP384R1; // 0xC0
	public static readonly DerObjectIdentifier BrainpoolP384T1; // 0xC8
	public static readonly DerObjectIdentifier BrainpoolP512R1; // 0xD0
	public static readonly DerObjectIdentifier BrainpoolP512T1; // 0xD8

	// Methods

	// RVA: 0x25993C8 Offset: 0x25993C8 VA: 0x25993C8
	private void .ctor() { }

	// RVA: 0x25993D0 Offset: 0x25993D0 VA: 0x25993D0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.Utilities
public sealed class Asn1Dump // TypeDefIndex: 4552
{
	// Fields
	private static readonly string NewLine; // 0x0
	private const string Tab = "    ";
	private const int SampleSize = 32;

	// Methods

	// RVA: 0x2599BE8 Offset: 0x2599BE8 VA: 0x2599BE8
	private void .ctor() { }

	// RVA: 0x2599BF0 Offset: 0x2599BF0 VA: 0x2599BF0
	private static void AsString(string indent, bool verbose, Asn1Object obj, StringBuilder buf) { }

	// RVA: 0x259DE50 Offset: 0x259DE50 VA: 0x259DE50
	private static string outputApplicationSpecific(string type, string indent, bool verbose, DerApplicationSpecific app) { }

	[ObsoleteAttribute] // RVA: 0xD34AE8 Offset: 0xD34AE8 VA: 0xD34AE8
	// RVA: 0x259E938 Offset: 0x259E938 VA: 0x259E938
	public static string DumpAsString(object obj) { }

	// RVA: 0x259EBBC Offset: 0x259EBBC VA: 0x259EBBC
	public static string DumpAsString(Asn1Encodable obj) { }

	// RVA: 0x259EC24 Offset: 0x259EC24 VA: 0x259EC24
	public static string DumpAsString(Asn1Encodable obj, bool verbose) { }

	// RVA: 0x259DB44 Offset: 0x259DB44 VA: 0x259DB44
	private static string dumpBinaryDataAsString(string indent, byte[] bytes) { }

	// RVA: 0x259ED28 Offset: 0x259ED28 VA: 0x259ED28
	private static string calculateAscString(byte[] bytes, int off, int len) { }

	// RVA: 0x259EE20 Offset: 0x259EE20 VA: 0x259EE20
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.Utilities
public class FilterStream : Stream // TypeDefIndex: 4553
{
	// Fields
	protected readonly Stream s; // 0x10

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x259EE9C Offset: 0x259EE9C VA: 0x259EE9C
	public void .ctor(Stream s) { }

	// RVA: 0x259EF18 Offset: 0x259EF18 VA: 0x259EF18 Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x259EF4C Offset: 0x259EF4C VA: 0x259EF4C Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x259EF80 Offset: 0x259EF80 VA: 0x259EF80 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x259EFB4 Offset: 0x259EFB4 VA: 0x259EFB4 Slot: 9
	public override long get_Length() { }

	// RVA: 0x259EFE8 Offset: 0x259EFE8 VA: 0x259EFE8 Slot: 10
	public override long get_Position() { }

	// RVA: 0x259F01C Offset: 0x259F01C VA: 0x259F01C Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x259F058 Offset: 0x259F058 VA: 0x259F058 Slot: 13
	public override void Close() { }

	// RVA: 0x259F0D0 Offset: 0x259F0D0 VA: 0x259F0D0 Slot: 18
	public override void Flush() { }

	// RVA: 0x259F108 Offset: 0x259F108 VA: 0x259F108 Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x259F158 Offset: 0x259F158 VA: 0x259F158 Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x259F198 Offset: 0x259F198 VA: 0x259F198 Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x259F1F0 Offset: 0x259F1F0 VA: 0x259F1F0 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x259F228 Offset: 0x259F228 VA: 0x259F228 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x259F280 Offset: 0x259F280 VA: 0x259F280 Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class AlgorithmIdentifier : Asn1Encodable // TypeDefIndex: 4554
{
	// Fields
	private readonly DerObjectIdentifier algorithm; // 0x10
	private readonly Asn1Encodable parameters; // 0x18

	// Properties
	public virtual DerObjectIdentifier Algorithm { get; }
	[ObsoleteAttribute] // RVA: 0xD4BA84 Offset: 0xD4BA84 VA: 0xD4BA84
	public virtual DerObjectIdentifier ObjectID { get; }
	public virtual Asn1Encodable Parameters { get; }

	// Methods

	// RVA: 0x259F2C0 Offset: 0x259F2C0 VA: 0x259F2C0
	public void .ctor(DerObjectIdentifier algorithm) { }

	[ObsoleteAttribute] // RVA: 0xD34B20 Offset: 0xD34B20 VA: 0xD34B20
	// RVA: 0x259F2EC Offset: 0x259F2EC VA: 0x259F2EC
	public void .ctor(string algorithm) { }

	// RVA: 0x259F368 Offset: 0x259F368 VA: 0x259F368
	public void .ctor(DerObjectIdentifier algorithm, Asn1Encodable parameters) { }

	// RVA: 0x259F3A0 Offset: 0x259F3A0 VA: 0x259F3A0
	internal void .ctor(Asn1Sequence seq) { }

	// RVA: 0x259F564 Offset: 0x259F564 VA: 0x259F564
	public static AlgorithmIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x259F580 Offset: 0x259F580 VA: 0x259F580
	public static AlgorithmIdentifier GetInstance(object obj) { }

	// RVA: 0x259F624 Offset: 0x259F624 VA: 0x259F624 Slot: 6
	public virtual DerObjectIdentifier get_Algorithm() { }

	// RVA: 0x259F62C Offset: 0x259F62C VA: 0x259F62C Slot: 7
	public virtual DerObjectIdentifier get_ObjectID() { }

	// RVA: 0x259F634 Offset: 0x259F634 VA: 0x259F634 Slot: 8
	public virtual Asn1Encodable get_Parameters() { }

	// RVA: 0x259F63C Offset: 0x259F63C VA: 0x259F63C Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class BasicConstraints : Asn1Encodable // TypeDefIndex: 4555
{
	// Fields
	private readonly DerBoolean cA; // 0x10
	private readonly DerInteger pathLenConstraint; // 0x18

	// Properties
	public BigInteger PathLenConstraint { get; }

	// Methods

	// RVA: 0x259F7BC Offset: 0x259F7BC VA: 0x259F7BC
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x259F97C Offset: 0x259F97C VA: 0x259F97C
	public void .ctor(bool cA) { }

	// RVA: 0x259FA08 Offset: 0x259FA08 VA: 0x259FA08
	public void .ctor(int pathLenConstraint) { }

	// RVA: 0x259FAB4 Offset: 0x259FAB4 VA: 0x259FAB4
	public static BasicConstraints GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x259FAD0 Offset: 0x259FAD0 VA: 0x259FAD0
	public static BasicConstraints GetInstance(object obj) { }

	// RVA: 0x259FE38 Offset: 0x259FE38 VA: 0x259FE38
	public bool IsCA() { }

	// RVA: 0x259FE4C Offset: 0x259FE4C VA: 0x259FE4C
	public BigInteger get_PathLenConstraint() { }

	// RVA: 0x259FE60 Offset: 0x259FE60 VA: 0x259FE60 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A0018 Offset: 0x25A0018 VA: 0x25A0018 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CertificateList : Asn1Encodable // TypeDefIndex: 4556
{
	// Fields
	private readonly TbsCertificateList tbsCertList; // 0x10
	private readonly AlgorithmIdentifier sigAlgID; // 0x18
	private readonly DerBitString sig; // 0x20

	// Properties
	public TbsCertificateList TbsCertList { get; }
	public AlgorithmIdentifier SignatureAlgorithm { get; }
	public DerBitString Signature { get; }
	public int Version { get; }
	public X509Name Issuer { get; }
	public Time ThisUpdate { get; }
	public Time NextUpdate { get; }

	// Methods

	// RVA: 0x25A02C4 Offset: 0x25A02C4 VA: 0x25A02C4
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A0618 Offset: 0x25A0618 VA: 0x25A0618
	public static CertificateList GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A0634 Offset: 0x25A0634 VA: 0x25A0634
	public static CertificateList GetInstance(object obj) { }

	// RVA: 0x25A06D8 Offset: 0x25A06D8 VA: 0x25A06D8
	public TbsCertificateList get_TbsCertList() { }

	// RVA: 0x25A06E0 Offset: 0x25A06E0 VA: 0x25A06E0
	public CrlEntry[] GetRevokedCertificates() { }

	// RVA: 0x25A0870 Offset: 0x25A0870 VA: 0x25A0870
	public IEnumerable GetRevokedCertificateEnumeration() { }

	// RVA: 0x25A0938 Offset: 0x25A0938 VA: 0x25A0938
	public AlgorithmIdentifier get_SignatureAlgorithm() { }

	// RVA: 0x25A0940 Offset: 0x25A0940 VA: 0x25A0940
	public DerBitString get_Signature() { }

	// RVA: 0x25A0948 Offset: 0x25A0948 VA: 0x25A0948
	public byte[] GetSignatureOctets() { }

	// RVA: 0x25A097C Offset: 0x25A097C VA: 0x25A097C
	public int get_Version() { }

	// RVA: 0x25A09F8 Offset: 0x25A09F8 VA: 0x25A09F8
	public X509Name get_Issuer() { }

	// RVA: 0x25A0A2C Offset: 0x25A0A2C VA: 0x25A0A2C
	public Time get_ThisUpdate() { }

	// RVA: 0x25A0A60 Offset: 0x25A0A60 VA: 0x25A0A60
	public Time get_NextUpdate() { }

	// RVA: 0x25A0A94 Offset: 0x25A0A94 VA: 0x25A0A94 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlDistPoint : Asn1Encodable // TypeDefIndex: 4557
{
	// Fields
	internal readonly Asn1Sequence seq; // 0x10

	// Methods

	// RVA: 0x25A0C08 Offset: 0x25A0C08 VA: 0x25A0C08
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A0C34 Offset: 0x25A0C34 VA: 0x25A0C34
	public void .ctor(DistributionPoint[] points) { }

	// RVA: 0x25A0CB0 Offset: 0x25A0CB0 VA: 0x25A0CB0
	public static CrlDistPoint GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A0CCC Offset: 0x25A0CCC VA: 0x25A0CCC
	public static CrlDistPoint GetInstance(object obj) { }

	// RVA: 0x25A0EC8 Offset: 0x25A0EC8 VA: 0x25A0EC8
	public DistributionPoint[] GetDistributionPoints() { }

	// RVA: 0x25A1208 Offset: 0x25A1208 VA: 0x25A1208 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A1210 Offset: 0x25A1210 VA: 0x25A1210 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlNumber : DerInteger // TypeDefIndex: 4558
{
	// Properties
	public BigInteger Number { get; }

	// Methods

	// RVA: 0x25A1B30 Offset: 0x25A1B30 VA: 0x25A1B30
	public void .ctor(BigInteger number) { }

	// RVA: 0x25A1B38 Offset: 0x25A1B38 VA: 0x25A1B38
	public BigInteger get_Number() { }

	// RVA: 0x25A1B40 Offset: 0x25A1B40 VA: 0x25A1B40 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlReason : DerEnumerated // TypeDefIndex: 4559
{
	// Fields
	public const int Unspecified = 0;
	public const int KeyCompromise = 1;
	public const int CACompromise = 2;
	public const int AffiliationChanged = 3;
	public const int Superseded = 4;
	public const int CessationOfOperation = 5;
	public const int CertificateHold = 6;
	public const int RemoveFromCrl = 8;
	public const int PrivilegeWithdrawn = 9;
	public const int AACompromise = 10;
	private static readonly string[] ReasonString; // 0x0

	// Methods

	// RVA: 0x25A1BC8 Offset: 0x25A1BC8 VA: 0x25A1BC8
	public void .ctor(int reason) { }

	// RVA: 0x25A1C40 Offset: 0x25A1C40 VA: 0x25A1C40
	public void .ctor(DerEnumerated reason) { }

	// RVA: 0x25A1CE8 Offset: 0x25A1CE8 VA: 0x25A1CE8 Slot: 3
	public override string ToString() { }

	// RVA: 0x25A1DFC Offset: 0x25A1DFC VA: 0x25A1DFC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DigestInfo : Asn1Encodable // TypeDefIndex: 4560
{
	// Fields
	private readonly byte[] digest; // 0x10
	private readonly AlgorithmIdentifier algID; // 0x18

	// Properties
	public AlgorithmIdentifier AlgorithmID { get; }

	// Methods

	// RVA: 0x25A2204 Offset: 0x25A2204 VA: 0x25A2204
	public void .ctor(AlgorithmIdentifier algID, byte[] digest) { }

	// RVA: 0x25A223C Offset: 0x25A223C VA: 0x25A223C
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A2360 Offset: 0x25A2360 VA: 0x25A2360
	public static DigestInfo GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A237C Offset: 0x25A237C VA: 0x25A237C
	public static DigestInfo GetInstance(object obj) { }

	// RVA: 0x25A2578 Offset: 0x25A2578 VA: 0x25A2578
	public AlgorithmIdentifier get_AlgorithmID() { }

	// RVA: 0x25A2580 Offset: 0x25A2580 VA: 0x25A2580
	public byte[] GetDigest() { }

	// RVA: 0x25A2588 Offset: 0x25A2588 VA: 0x25A2588 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DistributionPoint : Asn1Encodable // TypeDefIndex: 4561
{
	// Fields
	internal readonly DistributionPointName distributionPoint; // 0x10
	internal readonly ReasonFlags reasons; // 0x18
	internal readonly GeneralNames cRLIssuer; // 0x20

	// Properties
	public DistributionPointName DistributionPointName { get; }
	public ReasonFlags Reasons { get; }
	public GeneralNames CrlIssuer { get; }

	// Methods

	// RVA: 0x25A26D0 Offset: 0x25A26D0 VA: 0x25A26D0
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A2930 Offset: 0x25A2930 VA: 0x25A2930
	public void .ctor(DistributionPointName distributionPointName, ReasonFlags reasons, GeneralNames crlIssuer) { }

	// RVA: 0x25A2970 Offset: 0x25A2970 VA: 0x25A2970
	public static DistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A101C Offset: 0x25A101C VA: 0x25A101C
	public static DistributionPoint GetInstance(object obj) { }

	// RVA: 0x25A298C Offset: 0x25A298C VA: 0x25A298C
	public DistributionPointName get_DistributionPointName() { }

	// RVA: 0x25A2994 Offset: 0x25A2994 VA: 0x25A2994
	public ReasonFlags get_Reasons() { }

	// RVA: 0x25A299C Offset: 0x25A299C VA: 0x25A299C
	public GeneralNames get_CrlIssuer() { }

	// RVA: 0x25A29A4 Offset: 0x25A29A4 VA: 0x25A29A4 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A2C6C Offset: 0x25A2C6C VA: 0x25A2C6C Slot: 3
	public override string ToString() { }

	// RVA: 0x25A2E60 Offset: 0x25A2E60 VA: 0x25A2E60
	private void appendObject(StringBuilder buf, string sep, string name, string val) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DistributionPointName : Asn1Encodable, IAsn1Choice // TypeDefIndex: 4562
{
	// Fields
	internal readonly Asn1Encodable name; // 0x10
	internal readonly int type; // 0x18
	public const int FullName = 0;
	public const int NameRelativeToCrlIssuer = 1;

	// Properties
	public int PointType { get; }
	public Asn1Encodable Name { get; }

	// Methods

	// RVA: 0x25A300C Offset: 0x25A300C VA: 0x25A300C
	public void .ctor(int type, Asn1Encodable name) { }

	// RVA: 0x25A3048 Offset: 0x25A3048 VA: 0x25A3048
	public void .ctor(GeneralNames name) { }

	// RVA: 0x25A3078 Offset: 0x25A3078 VA: 0x25A3078
	public void .ctor(Asn1TaggedObject obj) { }

	// RVA: 0x25A2840 Offset: 0x25A2840 VA: 0x25A2840
	public static DistributionPointName GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A30EC Offset: 0x25A30EC VA: 0x25A30EC
	public static DistributionPointName GetInstance(object obj) { }

	// RVA: 0x25A32E4 Offset: 0x25A32E4 VA: 0x25A32E4
	public int get_PointType() { }

	// RVA: 0x25A32EC Offset: 0x25A32EC VA: 0x25A32EC
	public Asn1Encodable get_Name() { }

	// RVA: 0x25A32F4 Offset: 0x25A32F4 VA: 0x25A32F4 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x25A3370 Offset: 0x25A3370 VA: 0x25A3370 Slot: 3
	public override string ToString() { }

	// RVA: 0x25A3524 Offset: 0x25A3524 VA: 0x25A3524
	private void appendObject(StringBuilder buf, string sep, string name, string val) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DsaParameter : Asn1Encodable // TypeDefIndex: 4563
{
	// Fields
	internal readonly DerInteger p; // 0x10
	internal readonly DerInteger q; // 0x18
	internal readonly DerInteger g; // 0x20

	// Properties
	public BigInteger P { get; }
	public BigInteger Q { get; }
	public BigInteger G { get; }

	// Methods

	// RVA: 0x25A36D0 Offset: 0x25A36D0 VA: 0x25A36D0
	public void .ctor(BigInteger p, BigInteger q, BigInteger g) { }

	// RVA: 0x25A3794 Offset: 0x25A3794 VA: 0x25A3794
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x25A3938 Offset: 0x25A3938 VA: 0x25A3938
	public static DsaParameter GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x25A3954 Offset: 0x25A3954 VA: 0x25A3954
	public static DsaParameter GetInstance(object obj) { }

	// RVA: 0x25A3B40 Offset: 0x25A3B40 VA: 0x25A3B40
	public BigInteger get_P() { }

	// RVA: 0x25A3B70 Offset: 0x25A3B70 VA: 0x25A3B70
	public BigInteger get_Q() { }

	// RVA: 0x25A3BA0 Offset: 0x25A3BA0 VA: 0x25A3BA0
	public BigInteger get_G() { }

	// RVA: 0x25A3BD0 Offset: 0x25A3BD0 VA: 0x25A3BD0 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class GeneralName : Asn1Encodable, IAsn1Choice // TypeDefIndex: 4564
{
	// Fields
	public const int OtherName = 0;
	public const int Rfc822Name = 1;
	public const int DnsName = 2;
	public const int X400Address = 3;
	public const int DirectoryName = 4;
	public const int EdiPartyName = 5;
	public const int UniformResourceIdentifier = 6;
	public const int IPAddress = 7;
	public const int RegisteredID = 8;
	internal readonly Asn1Encodable obj; // 0x10
	internal readonly int tag; // 0x18

	// Properties
	public int TagNo { get; }
	public Asn1Encodable Name { get; }

	// Methods

	// RVA: 0x25A3D44 Offset: 0x25A3D44 VA: 0x25A3D44
	public void .ctor(X509Name directoryName) { }

	// RVA: 0x25A3D78 Offset: 0x25A3D78 VA: 0x25A3D78
	public void .ctor(Asn1Object name, int tag) { }

	// RVA: 0x25A3DB4 Offset: 0x25A3DB4 VA: 0x25A3DB4
	public void .ctor(int tag, Asn1Encodable name) { }

	// RVA: 0x25A3DF0 Offset: 0x25A3DF0 VA: 0x25A3DF0
	public void .ctor(int tag, string name) { }

	// RVA: 0x25A435C Offset: 0x25A435C VA: 0x25A435C
	public static GeneralName GetInstance(object obj) { }

	// RVA: 0x25A4924 Offset: 0x25A4924 VA: 0x25A4924
	public static GeneralName GetInstance(Asn1TaggedObject tagObj, bool explicitly) { }

	// RVA: 0x25A4940 Offset: 0x25A4940 VA: 0x25A4940
	public int get_TagNo() { }

	// RVA: 0x25A4948 Offset: 0x25A4948 VA: 0x25A4948
	public Asn1Encodable get_Name() { }

	// RVA: 0x25A4950 Offset: 0x25A4950 VA: 0x25A4950 Slot: 3
	public override string ToString() { }
