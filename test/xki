	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D21EB8 Offset: 0x1D21EB8 VA: 0x1D21EB8
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect233k1Holder : X9ECParametersHolder // TypeDefIndex: 4526
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 233;
	private const int k = 74;

	// Methods

	// RVA: 0x1D21F1C Offset: 0x1D21F1C VA: 0x1D21F1C
	private void .ctor() { }

	// RVA: 0x1D21F24 Offset: 0x1D21F24 VA: 0x1D21F24 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D220B0 Offset: 0x1D220B0 VA: 0x1D220B0
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect233r1Holder : X9ECParametersHolder // TypeDefIndex: 4527
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 233;
	private const int k = 74;

	// Methods

	// RVA: 0x1D22114 Offset: 0x1D22114 VA: 0x1D22114
	private void .ctor() { }

	// RVA: 0x1D2211C Offset: 0x1D2211C VA: 0x1D2211C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D222DC Offset: 0x1D222DC VA: 0x1D222DC
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect239k1Holder : X9ECParametersHolder // TypeDefIndex: 4528
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 239;
	private const int k = 158;

	// Methods

	// RVA: 0x1D22340 Offset: 0x1D22340 VA: 0x1D22340
	private void .ctor() { }

	// RVA: 0x1D22348 Offset: 0x1D22348 VA: 0x1D22348 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D224D4 Offset: 0x1D224D4 VA: 0x1D224D4
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect283k1Holder : X9ECParametersHolder // TypeDefIndex: 4529
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 283;
	private const int k1 = 5;
	private const int k2 = 7;
	private const int k3 = 12;

	// Methods

	// RVA: 0x1D22538 Offset: 0x1D22538 VA: 0x1D22538
	private void .ctor() { }

	// RVA: 0x1D22540 Offset: 0x1D22540 VA: 0x1D22540 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D226D8 Offset: 0x1D226D8 VA: 0x1D226D8
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect283r1Holder : X9ECParametersHolder // TypeDefIndex: 4530
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 283;
	private const int k1 = 5;
	private const int k2 = 7;
	private const int k3 = 12;

	// Methods

	// RVA: 0x1D2273C Offset: 0x1D2273C VA: 0x1D2273C
	private void .ctor() { }

	// RVA: 0x1D22744 Offset: 0x1D22744 VA: 0x1D22744 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D22910 Offset: 0x1D22910 VA: 0x1D22910
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect409k1Holder : X9ECParametersHolder // TypeDefIndex: 4531
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 409;
	private const int k = 87;

	// Methods

	// RVA: 0x1D22974 Offset: 0x1D22974 VA: 0x1D22974
	private void .ctor() { }

	// RVA: 0x1D2297C Offset: 0x1D2297C VA: 0x1D2297C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D22B08 Offset: 0x1D22B08 VA: 0x1D22B08
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect409r1Holder : X9ECParametersHolder // TypeDefIndex: 4532
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 409;
	private const int k = 87;

	// Methods

	// RVA: 0x1D22B6C Offset: 0x1D22B6C VA: 0x1D22B6C
	private void .ctor() { }

	// RVA: 0x1D22B74 Offset: 0x1D22B74 VA: 0x1D22B74 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D22D34 Offset: 0x1D22D34 VA: 0x1D22D34
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect571k1Holder : X9ECParametersHolder // TypeDefIndex: 4533
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 571;
	private const int k1 = 2;
	private const int k2 = 5;
	private const int k3 = 10;

	// Methods

	// RVA: 0x1D22D98 Offset: 0x1D22D98 VA: 0x1D22D98
	private void .ctor() { }

	// RVA: 0x1D22DA0 Offset: 0x1D22DA0 VA: 0x1D22DA0 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D22F38 Offset: 0x1D22F38 VA: 0x1D22F38
	private static void .cctor() { }
}

// Namespace: 
internal class SecNamedCurves.Sect571r1Holder : X9ECParametersHolder // TypeDefIndex: 4534
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0
	private const int m = 571;
	private const int k1 = 2;
	private const int k2 = 5;
	private const int k3 = 10;

	// Methods

	// RVA: 0x1D22F9C Offset: 0x1D22F9C VA: 0x1D22F9C
	private void .ctor() { }

	// RVA: 0x1D22FA4 Offset: 0x1D22FA4 VA: 0x1D22FA4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D23170 Offset: 0x1D23170 VA: 0x1D23170
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.Sec
public abstract class SecObjectIdentifiers // TypeDefIndex: 4535
{
	// Fields
	public static readonly DerObjectIdentifier EllipticCurve; // 0x0
	public static readonly DerObjectIdentifier SecT163k1; // 0x8
	public static readonly DerObjectIdentifier SecT163r1; // 0x10
	public static readonly DerObjectIdentifier SecT239k1; // 0x18
	public static readonly DerObjectIdentifier SecT113r1; // 0x20
	public static readonly DerObjectIdentifier SecT113r2; // 0x28
	public static readonly DerObjectIdentifier SecP112r1; // 0x30
	public static readonly DerObjectIdentifier SecP112r2; // 0x38
	public static readonly DerObjectIdentifier SecP160r1; // 0x40
	public static readonly DerObjectIdentifier SecP160k1; // 0x48
	public static readonly DerObjectIdentifier SecP256k1; // 0x50
	public static readonly DerObjectIdentifier SecT163r2; // 0x58
	public static readonly DerObjectIdentifier SecT283k1; // 0x60
	public static readonly DerObjectIdentifier SecT283r1; // 0x68
	public static readonly DerObjectIdentifier SecT131r1; // 0x70
	public static readonly DerObjectIdentifier SecT131r2; // 0x78
	public static readonly DerObjectIdentifier SecT193r1; // 0x80
	public static readonly DerObjectIdentifier SecT193r2; // 0x88
	public static readonly DerObjectIdentifier SecT233k1; // 0x90
	public static readonly DerObjectIdentifier SecT233r1; // 0x98
	public static readonly DerObjectIdentifier SecP128r1; // 0xA0
	public static readonly DerObjectIdentifier SecP128r2; // 0xA8
	public static readonly DerObjectIdentifier SecP160r2; // 0xB0
	public static readonly DerObjectIdentifier SecP192k1; // 0xB8
	public static readonly DerObjectIdentifier SecP224k1; // 0xC0
	public static readonly DerObjectIdentifier SecP224r1; // 0xC8
	public static readonly DerObjectIdentifier SecP384r1; // 0xD0
	public static readonly DerObjectIdentifier SecP521r1; // 0xD8
	public static readonly DerObjectIdentifier SecT409k1; // 0xE0
	public static readonly DerObjectIdentifier SecT409r1; // 0xE8
	public static readonly DerObjectIdentifier SecT571k1; // 0xF0
	public static readonly DerObjectIdentifier SecT571r1; // 0xF8
	public static readonly DerObjectIdentifier SecP192r1; // 0x100
	public static readonly DerObjectIdentifier SecP256r1; // 0x108

	// Methods

	// RVA: 0x1D231D4 Offset: 0x1D231D4 VA: 0x1D231D4
	protected void .ctor() { }

	// RVA: 0x1D231DC Offset: 0x1D231DC VA: 0x1D231DC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.TeleTrust
public class TeleTrusTNamedCurves // TypeDefIndex: 4536
{
	// Fields
	private static readonly IDictionary objIds; // 0x0
	private static readonly IDictionary curves; // 0x8
	private static readonly IDictionary names; // 0x10

	// Properties
	public static IEnumerable Names { get; }

	// Methods

	// RVA: 0x1D23B04 Offset: 0x1D23B04 VA: 0x1D23B04
	private static void .cctor() { }

	// RVA: 0x1D24238 Offset: 0x1D24238 VA: 0x1D24238
	public void .ctor() { }

	// RVA: 0x1D24240 Offset: 0x1D24240 VA: 0x1D24240
	private static ECCurve ConfigureCurve(ECCurve curve) { }

	// RVA: 0x1D23FF4 Offset: 0x1D23FF4 VA: 0x1D23FF4
	private static void DefineCurve(string name, DerObjectIdentifier oid, X9ECParametersHolder holder) { }

	// RVA: 0x1D24244 Offset: 0x1D24244 VA: 0x1D24244
	public static X9ECParameters GetByName(string name) { }

	// RVA: 0x1D24480 Offset: 0x1D24480 VA: 0x1D24480
	public static X9ECParameters GetByOid(DerObjectIdentifier oid) { }

	// RVA: 0x1D242DC Offset: 0x1D242DC VA: 0x1D242DC
	public static DerObjectIdentifier GetOid(string name) { }

	// RVA: 0x1D24604 Offset: 0x1D24604 VA: 0x1D24604
	public static string GetName(DerObjectIdentifier oid) { }

	// RVA: 0x1D24758 Offset: 0x1D24758 VA: 0x1D24758
	public static IEnumerable get_Names() { }

	// RVA: 0x1D24864 Offset: 0x1D24864 VA: 0x1D24864
	public static DerObjectIdentifier GetOid(short curvesize, bool twisted) { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP160r1Holder : X9ECParametersHolder // TypeDefIndex: 4537
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x1D24AA0 Offset: 0x1D24AA0 VA: 0x1D24AA0
	private void .ctor() { }

	// RVA: 0x1D24AA8 Offset: 0x1D24AA8 VA: 0x1D24AA8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D24C90 Offset: 0x1D24C90 VA: 0x1D24C90
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP160t1Holder : X9ECParametersHolder // TypeDefIndex: 4538
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x1D24CF4 Offset: 0x1D24CF4 VA: 0x1D24CF4
	private void .ctor() { }

	// RVA: 0x1D24CFC Offset: 0x1D24CFC VA: 0x1D24CFC Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D24EE4 Offset: 0x1D24EE4 VA: 0x1D24EE4
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP192r1Holder : X9ECParametersHolder // TypeDefIndex: 4539
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x1D24F48 Offset: 0x1D24F48 VA: 0x1D24F48
	private void .ctor() { }

	// RVA: 0x1D24F50 Offset: 0x1D24F50 VA: 0x1D24F50 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D25138 Offset: 0x1D25138 VA: 0x1D25138
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP192t1Holder : X9ECParametersHolder // TypeDefIndex: 4540
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x1D2519C Offset: 0x1D2519C VA: 0x1D2519C
	private void .ctor() { }

	// RVA: 0x1D251A4 Offset: 0x1D251A4 VA: 0x1D251A4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D2538C Offset: 0x1D2538C VA: 0x1D2538C
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP224r1Holder : X9ECParametersHolder // TypeDefIndex: 4541
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x1D253F0 Offset: 0x1D253F0 VA: 0x1D253F0
	private void .ctor() { }

	// RVA: 0x1D253F8 Offset: 0x1D253F8 VA: 0x1D253F8 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D255E0 Offset: 0x1D255E0 VA: 0x1D255E0
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP224t1Holder : X9ECParametersHolder // TypeDefIndex: 4542
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x1D25644 Offset: 0x1D25644 VA: 0x1D25644
	private void .ctor() { }

	// RVA: 0x1D2564C Offset: 0x1D2564C VA: 0x1D2564C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x1D25834 Offset: 0x1D25834 VA: 0x1D25834
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP256r1Holder : X9ECParametersHolder // TypeDefIndex: 4543
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x236522C Offset: 0x236522C VA: 0x236522C
	private void .ctor() { }

	// RVA: 0x2365234 Offset: 0x2365234 VA: 0x2365234 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2365430 Offset: 0x2365430 VA: 0x2365430
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP256t1Holder : X9ECParametersHolder // TypeDefIndex: 4544
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x2365494 Offset: 0x2365494 VA: 0x2365494
	private void .ctor() { }

	// RVA: 0x236549C Offset: 0x236549C VA: 0x236549C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2365698 Offset: 0x2365698 VA: 0x2365698
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP320r1Holder : X9ECParametersHolder // TypeDefIndex: 4545
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x23656FC Offset: 0x23656FC VA: 0x23656FC
	private void .ctor() { }

	// RVA: 0x2365704 Offset: 0x2365704 VA: 0x2365704 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2365900 Offset: 0x2365900 VA: 0x2365900
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP320t1Holder : X9ECParametersHolder // TypeDefIndex: 4546
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x2365964 Offset: 0x2365964 VA: 0x2365964
	private void .ctor() { }

	// RVA: 0x236596C Offset: 0x236596C VA: 0x236596C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2365B68 Offset: 0x2365B68 VA: 0x2365B68
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP384r1Holder : X9ECParametersHolder // TypeDefIndex: 4547
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x2365BCC Offset: 0x2365BCC VA: 0x2365BCC
	private void .ctor() { }

	// RVA: 0x2365BD4 Offset: 0x2365BD4 VA: 0x2365BD4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2365DD0 Offset: 0x2365DD0 VA: 0x2365DD0
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP384t1Holder : X9ECParametersHolder // TypeDefIndex: 4548
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x2365E34 Offset: 0x2365E34 VA: 0x2365E34
	private void .ctor() { }

	// RVA: 0x2365E3C Offset: 0x2365E3C VA: 0x2365E3C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2366038 Offset: 0x2366038 VA: 0x2366038
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP512r1Holder : X9ECParametersHolder // TypeDefIndex: 4549
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x236609C Offset: 0x236609C VA: 0x236609C
	private void .ctor() { }

	// RVA: 0x23660A4 Offset: 0x23660A4 VA: 0x23660A4 Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x23662A0 Offset: 0x23662A0 VA: 0x23662A0
	private static void .cctor() { }
}

// Namespace: 
internal class TeleTrusTNamedCurves.BrainpoolP512t1Holder : X9ECParametersHolder // TypeDefIndex: 4550
{
	// Fields
	internal static readonly X9ECParametersHolder Instance; // 0x0

	// Methods

	// RVA: 0x2366304 Offset: 0x2366304 VA: 0x2366304
	private void .ctor() { }

	// RVA: 0x236630C Offset: 0x236630C VA: 0x236630C Slot: 4
	protected override X9ECParameters CreateParameters() { }

	// RVA: 0x2366508 Offset: 0x2366508 VA: 0x2366508
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.TeleTrust
public sealed class TeleTrusTObjectIdentifiers // TypeDefIndex: 4551
{
	// Fields
	public static readonly DerObjectIdentifier TeleTrusTAlgorithm; // 0x0
	public static readonly DerObjectIdentifier RipeMD160; // 0x8
	public static readonly DerObjectIdentifier RipeMD128; // 0x10
	public static readonly DerObjectIdentifier RipeMD256; // 0x18
	public static readonly DerObjectIdentifier TeleTrusTRsaSignatureAlgorithm; // 0x20
	public static readonly DerObjectIdentifier RsaSignatureWithRipeMD160; // 0x28
	public static readonly DerObjectIdentifier RsaSignatureWithRipeMD128; // 0x30
	public static readonly DerObjectIdentifier RsaSignatureWithRipeMD256; // 0x38
	public static readonly DerObjectIdentifier ECSign; // 0x40
	public static readonly DerObjectIdentifier ECSignWithSha1; // 0x48
	public static readonly DerObjectIdentifier ECSignWithRipeMD160; // 0x50
	public static readonly DerObjectIdentifier EccBrainpool; // 0x58
	public static readonly DerObjectIdentifier EllipticCurve; // 0x60
	public static readonly DerObjectIdentifier VersionOne; // 0x68
	public static readonly DerObjectIdentifier BrainpoolP160R1; // 0x70
	public static readonly DerObjectIdentifier BrainpoolP160T1; // 0x78
	public static readonly DerObjectIdentifier BrainpoolP192R1; // 0x80
	public static readonly DerObjectIdentifier BrainpoolP192T1; // 0x88
	public static readonly DerObjectIdentifier BrainpoolP224R1; // 0x90
	public static readonly DerObjectIdentifier BrainpoolP224T1; // 0x98
	public static readonly DerObjectIdentifier BrainpoolP256R1; // 0xA0
	public static readonly DerObjectIdentifier BrainpoolP256T1; // 0xA8
	public static readonly DerObjectIdentifier BrainpoolP320R1; // 0xB0
	public static readonly DerObjectIdentifier BrainpoolP320T1; // 0xB8
	public static readonly DerObjectIdentifier BrainpoolP384R1; // 0xC0
	public static readonly DerObjectIdentifier BrainpoolP384T1; // 0xC8
	public static readonly DerObjectIdentifier BrainpoolP512R1; // 0xD0
	public static readonly DerObjectIdentifier BrainpoolP512T1; // 0xD8

	// Methods

	// RVA: 0x236656C Offset: 0x236656C VA: 0x236656C
	private void .ctor() { }

	// RVA: 0x2366574 Offset: 0x2366574 VA: 0x2366574
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.Utilities
public sealed class Asn1Dump // TypeDefIndex: 4552
{
	// Fields
	private static readonly string NewLine; // 0x0
	private const string Tab = "    ";
	private const int SampleSize = 32;

	// Methods

	// RVA: 0x2366D8C Offset: 0x2366D8C VA: 0x2366D8C
	private void .ctor() { }

	// RVA: 0x2366D94 Offset: 0x2366D94 VA: 0x2366D94
	private static void AsString(string indent, bool verbose, Asn1Object obj, StringBuilder buf) { }

	// RVA: 0x236AFF4 Offset: 0x236AFF4 VA: 0x236AFF4
	private static string outputApplicationSpecific(string type, string indent, bool verbose, DerApplicationSpecific app) { }

	[ObsoleteAttribute] // RVA: 0xCC7414 Offset: 0xCC7414 VA: 0xCC7414
	// RVA: 0x236BADC Offset: 0x236BADC VA: 0x236BADC
	public static string DumpAsString(object obj) { }

	// RVA: 0x236BD60 Offset: 0x236BD60 VA: 0x236BD60
	public static string DumpAsString(Asn1Encodable obj) { }

	// RVA: 0x236BDC8 Offset: 0x236BDC8 VA: 0x236BDC8
	public static string DumpAsString(Asn1Encodable obj, bool verbose) { }

	// RVA: 0x236ACE8 Offset: 0x236ACE8 VA: 0x236ACE8
	private static string dumpBinaryDataAsString(string indent, byte[] bytes) { }

	// RVA: 0x236BECC Offset: 0x236BECC VA: 0x236BECC
	private static string calculateAscString(byte[] bytes, int off, int len) { }

	// RVA: 0x236BFC4 Offset: 0x236BFC4 VA: 0x236BFC4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.Utilities
public class FilterStream : Stream // TypeDefIndex: 4553
{
	// Fields
	protected readonly Stream s; // 0x10

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods

	// RVA: 0x236C040 Offset: 0x236C040 VA: 0x236C040
	public void .ctor(Stream s) { }

	// RVA: 0x236C0BC Offset: 0x236C0BC VA: 0x236C0BC Slot: 5
	public override bool get_CanRead() { }

	// RVA: 0x236C0F0 Offset: 0x236C0F0 VA: 0x236C0F0 Slot: 6
	public override bool get_CanSeek() { }

	// RVA: 0x236C124 Offset: 0x236C124 VA: 0x236C124 Slot: 7
	public override bool get_CanWrite() { }

	// RVA: 0x236C158 Offset: 0x236C158 VA: 0x236C158 Slot: 9
	public override long get_Length() { }

	// RVA: 0x236C18C Offset: 0x236C18C VA: 0x236C18C Slot: 10
	public override long get_Position() { }

	// RVA: 0x236C1C0 Offset: 0x236C1C0 VA: 0x236C1C0 Slot: 11
	public override void set_Position(long value) { }

	// RVA: 0x236C1FC Offset: 0x236C1FC VA: 0x236C1FC Slot: 13
	public override void Close() { }

	// RVA: 0x236C274 Offset: 0x236C274 VA: 0x236C274 Slot: 18
	public override void Flush() { }

	// RVA: 0x236C2AC Offset: 0x236C2AC VA: 0x236C2AC Slot: 21
	public override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x236C2FC Offset: 0x236C2FC VA: 0x236C2FC Slot: 22
	public override void SetLength(long value) { }

	// RVA: 0x236C33C Offset: 0x236C33C VA: 0x236C33C Slot: 19
	public override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x236C394 Offset: 0x236C394 VA: 0x236C394 Slot: 20
	public override int ReadByte() { }

	// RVA: 0x236C3CC Offset: 0x236C3CC VA: 0x236C3CC Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }

	// RVA: 0x236C424 Offset: 0x236C424 VA: 0x236C424 Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class AlgorithmIdentifier : Asn1Encodable // TypeDefIndex: 4554
{
	// Fields
	private readonly DerObjectIdentifier algorithm; // 0x10
	private readonly Asn1Encodable parameters; // 0x18

	// Properties
	public virtual DerObjectIdentifier Algorithm { get; }
	[ObsoleteAttribute] // RVA: 0xCDE830 Offset: 0xCDE830 VA: 0xCDE830
	public virtual DerObjectIdentifier ObjectID { get; }
	public virtual Asn1Encodable Parameters { get; }

	// Methods

	// RVA: 0x236C464 Offset: 0x236C464 VA: 0x236C464
	public void .ctor(DerObjectIdentifier algorithm) { }

	[ObsoleteAttribute] // RVA: 0xCC744C Offset: 0xCC744C VA: 0xCC744C
	// RVA: 0x236C490 Offset: 0x236C490 VA: 0x236C490
	public void .ctor(string algorithm) { }

	// RVA: 0x236C50C Offset: 0x236C50C VA: 0x236C50C
	public void .ctor(DerObjectIdentifier algorithm, Asn1Encodable parameters) { }

	// RVA: 0x236C544 Offset: 0x236C544 VA: 0x236C544
	internal void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236C708 Offset: 0x236C708 VA: 0x236C708
	public static AlgorithmIdentifier GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236C724 Offset: 0x236C724 VA: 0x236C724
	public static AlgorithmIdentifier GetInstance(object obj) { }

	// RVA: 0x236C7C8 Offset: 0x236C7C8 VA: 0x236C7C8 Slot: 6
	public virtual DerObjectIdentifier get_Algorithm() { }

	// RVA: 0x236C7D0 Offset: 0x236C7D0 VA: 0x236C7D0 Slot: 7
	public virtual DerObjectIdentifier get_ObjectID() { }

	// RVA: 0x236C7D8 Offset: 0x236C7D8 VA: 0x236C7D8 Slot: 8
	public virtual Asn1Encodable get_Parameters() { }

	// RVA: 0x236C7E0 Offset: 0x236C7E0 VA: 0x236C7E0 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class BasicConstraints : Asn1Encodable // TypeDefIndex: 4555
{
	// Fields
	private readonly DerBoolean cA; // 0x10
	private readonly DerInteger pathLenConstraint; // 0x18

	// Properties
	public BigInteger PathLenConstraint { get; }

	// Methods

	// RVA: 0x236C960 Offset: 0x236C960 VA: 0x236C960
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236CB20 Offset: 0x236CB20 VA: 0x236CB20
	public void .ctor(bool cA) { }

	// RVA: 0x236CBAC Offset: 0x236CBAC VA: 0x236CBAC
	public void .ctor(int pathLenConstraint) { }

	// RVA: 0x236CC58 Offset: 0x236CC58 VA: 0x236CC58
	public static BasicConstraints GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236CC74 Offset: 0x236CC74 VA: 0x236CC74
	public static BasicConstraints GetInstance(object obj) { }

	// RVA: 0x236CFDC Offset: 0x236CFDC VA: 0x236CFDC
	public bool IsCA() { }

	// RVA: 0x236CFF0 Offset: 0x236CFF0 VA: 0x236CFF0
	public BigInteger get_PathLenConstraint() { }

	// RVA: 0x236D004 Offset: 0x236D004 VA: 0x236D004 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x236D1BC Offset: 0x236D1BC VA: 0x236D1BC Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CertificateList : Asn1Encodable // TypeDefIndex: 4556
{
	// Fields
	private readonly TbsCertificateList tbsCertList; // 0x10
	private readonly AlgorithmIdentifier sigAlgID; // 0x18
	private readonly DerBitString sig; // 0x20

	// Properties
	public TbsCertificateList TbsCertList { get; }
	public AlgorithmIdentifier SignatureAlgorithm { get; }
	public DerBitString Signature { get; }
	public int Version { get; }
	public X509Name Issuer { get; }
	public Time ThisUpdate { get; }
	public Time NextUpdate { get; }

	// Methods

	// RVA: 0x236D468 Offset: 0x236D468 VA: 0x236D468
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236D7BC Offset: 0x236D7BC VA: 0x236D7BC
	public static CertificateList GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236D7D8 Offset: 0x236D7D8 VA: 0x236D7D8
	public static CertificateList GetInstance(object obj) { }

	// RVA: 0x236D87C Offset: 0x236D87C VA: 0x236D87C
	public TbsCertificateList get_TbsCertList() { }

	// RVA: 0x236D884 Offset: 0x236D884 VA: 0x236D884
	public CrlEntry[] GetRevokedCertificates() { }

	// RVA: 0x236DA14 Offset: 0x236DA14 VA: 0x236DA14
	public IEnumerable GetRevokedCertificateEnumeration() { }

	// RVA: 0x236DADC Offset: 0x236DADC VA: 0x236DADC
	public AlgorithmIdentifier get_SignatureAlgorithm() { }

	// RVA: 0x236DAE4 Offset: 0x236DAE4 VA: 0x236DAE4
	public DerBitString get_Signature() { }

	// RVA: 0x236DAEC Offset: 0x236DAEC VA: 0x236DAEC
	public byte[] GetSignatureOctets() { }

	// RVA: 0x236DB20 Offset: 0x236DB20 VA: 0x236DB20
	public int get_Version() { }

	// RVA: 0x236DB9C Offset: 0x236DB9C VA: 0x236DB9C
	public X509Name get_Issuer() { }

	// RVA: 0x236DBD0 Offset: 0x236DBD0 VA: 0x236DBD0
	public Time get_ThisUpdate() { }

	// RVA: 0x236DC04 Offset: 0x236DC04 VA: 0x236DC04
	public Time get_NextUpdate() { }

	// RVA: 0x236DC38 Offset: 0x236DC38 VA: 0x236DC38 Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlDistPoint : Asn1Encodable // TypeDefIndex: 4557
{
	// Fields
	internal readonly Asn1Sequence seq; // 0x10

	// Methods

	// RVA: 0x236DDAC Offset: 0x236DDAC VA: 0x236DDAC
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236DDD8 Offset: 0x236DDD8 VA: 0x236DDD8
	public void .ctor(DistributionPoint[] points) { }

	// RVA: 0x236DE54 Offset: 0x236DE54 VA: 0x236DE54
	public static CrlDistPoint GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236DE70 Offset: 0x236DE70 VA: 0x236DE70
	public static CrlDistPoint GetInstance(object obj) { }

	// RVA: 0x236E06C Offset: 0x236E06C VA: 0x236E06C
	public DistributionPoint[] GetDistributionPoints() { }

	// RVA: 0x236E3AC Offset: 0x236E3AC VA: 0x236E3AC Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x236E3B4 Offset: 0x236E3B4 VA: 0x236E3B4 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlNumber : DerInteger // TypeDefIndex: 4558
{
	// Properties
	public BigInteger Number { get; }

	// Methods

	// RVA: 0x236ECD4 Offset: 0x236ECD4 VA: 0x236ECD4
	public void .ctor(BigInteger number) { }

	// RVA: 0x236ECDC Offset: 0x236ECDC VA: 0x236ECDC
	public BigInteger get_Number() { }

	// RVA: 0x236ECE4 Offset: 0x236ECE4 VA: 0x236ECE4 Slot: 3
	public override string ToString() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class CrlReason : DerEnumerated // TypeDefIndex: 4559
{
	// Fields
	public const int Unspecified = 0;
	public const int KeyCompromise = 1;
	public const int CACompromise = 2;
	public const int AffiliationChanged = 3;
	public const int Superseded = 4;
	public const int CessationOfOperation = 5;
	public const int CertificateHold = 6;
	public const int RemoveFromCrl = 8;
	public const int PrivilegeWithdrawn = 9;
	public const int AACompromise = 10;
	private static readonly string[] ReasonString; // 0x0

	// Methods

	// RVA: 0x236ED6C Offset: 0x236ED6C VA: 0x236ED6C
	public void .ctor(int reason) { }

	// RVA: 0x236EDE4 Offset: 0x236EDE4 VA: 0x236EDE4
	public void .ctor(DerEnumerated reason) { }

	// RVA: 0x236EE8C Offset: 0x236EE8C VA: 0x236EE8C Slot: 3
	public override string ToString() { }

	// RVA: 0x236EFA0 Offset: 0x236EFA0 VA: 0x236EFA0
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DigestInfo : Asn1Encodable // TypeDefIndex: 4560
{
	// Fields
	private readonly byte[] digest; // 0x10
	private readonly AlgorithmIdentifier algID; // 0x18

	// Properties
	public AlgorithmIdentifier AlgorithmID { get; }

	// Methods

	// RVA: 0x236F3A8 Offset: 0x236F3A8 VA: 0x236F3A8
	public void .ctor(AlgorithmIdentifier algID, byte[] digest) { }

	// RVA: 0x236F3E0 Offset: 0x236F3E0 VA: 0x236F3E0
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236F504 Offset: 0x236F504 VA: 0x236F504
	public static DigestInfo GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236F520 Offset: 0x236F520 VA: 0x236F520
	public static DigestInfo GetInstance(object obj) { }

	// RVA: 0x236F71C Offset: 0x236F71C VA: 0x236F71C
	public AlgorithmIdentifier get_AlgorithmID() { }

	// RVA: 0x236F724 Offset: 0x236F724 VA: 0x236F724
	public byte[] GetDigest() { }

	// RVA: 0x236F72C Offset: 0x236F72C VA: 0x236F72C Slot: 5
	public override Asn1Object ToAsn1Object() { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DistributionPoint : Asn1Encodable // TypeDefIndex: 4561
{
	// Fields
	internal readonly DistributionPointName distributionPoint; // 0x10
	internal readonly ReasonFlags reasons; // 0x18
	internal readonly GeneralNames cRLIssuer; // 0x20

	// Properties
	public DistributionPointName DistributionPointName { get; }
	public ReasonFlags Reasons { get; }
	public GeneralNames CrlIssuer { get; }

	// Methods

	// RVA: 0x236F874 Offset: 0x236F874 VA: 0x236F874
	private void .ctor(Asn1Sequence seq) { }

	// RVA: 0x236FAD4 Offset: 0x236FAD4 VA: 0x236FAD4
	public void .ctor(DistributionPointName distributionPointName, ReasonFlags reasons, GeneralNames crlIssuer) { }

	// RVA: 0x236FB14 Offset: 0x236FB14 VA: 0x236FB14
	public static DistributionPoint GetInstance(Asn1TaggedObject obj, bool explicitly) { }

	// RVA: 0x236E1C0 Offset: 0x236E1C0 VA: 0x236E1C0
	public static DistributionPoint GetInstance(object obj) { }

	// RVA: 0x236FB30 Offset: 0x236FB30 VA: 0x236FB30
	public DistributionPointName get_DistributionPointName() { }

	// RVA: 0x236FB38 Offset: 0x236FB38 VA: 0x236FB38
	public ReasonFlags get_Reasons() { }

	// RVA: 0x236FB40 Offset: 0x236FB40 VA: 0x236FB40
	public GeneralNames get_CrlIssuer() { }

	// RVA: 0x236FB48 Offset: 0x236FB48 VA: 0x236FB48 Slot: 5
	public override Asn1Object ToAsn1Object() { }

	// RVA: 0x236FE10 Offset: 0x236FE10 VA: 0x236FE10 Slot: 3
	public override string ToString() { }

	// RVA: 0x2370004 Offset: 0x2370004 VA: 0x2370004
	private void appendObject(StringBuilder buf, string sep, string name, string val) { }
}

// Namespace: Org.BouncyCastle.Asn1.X509
public class DistributionPointName : Asn1Encodable, IAsn1Choice // TypeDefIndex: 4562
{
	// Fields
	internal readonly Asn1Encodable name; // 0x10
	internal readonly int type; // 0x18
	public const int FullName = 0;
	public const int NameRelativeToCrlIssuer = 1;

	// Properties
	public int PointType { get; }
	public Asn1Encodable Name { get; }
