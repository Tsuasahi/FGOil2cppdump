	// Methods

	// RVA: 0x1F6D120 Offset: 0x1F6D120 VA: 0x1F6D120
	public void .ctor() { }

	// RVA: 0x1F6D1B0 Offset: 0x1F6D1B0 VA: 0x1F6D1B0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6D1D4 Offset: 0x1F6D1D4 VA: 0x1F6D1D4
	private void setupPlayAudio() { }

	// RVA: 0x1F6D82C Offset: 0x1F6D82C VA: 0x1F6D82C Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6D838 Offset: 0x1F6D838 VA: 0x1F6D838 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F6D8F0 Offset: 0x1F6D8F0 VA: 0x1F6D8F0 Slot: 16
	public override bool FixSyncGroupRandomAudioPlayIndex(string syncGroupName) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayAudioEventConditional.AudioData // TypeDefIndex: 8166
{
	// Fields
	[TooltipAttribute] // RVA: 0xCCA6FC Offset: 0xCCA6FC VA: 0xCCA6FC
	public string soundId; // 0x10
	[TooltipAttribute] // RVA: 0xCCA734 Offset: 0xCCA734 VA: 0xCCA734
	public AudioClip playAudioClip; // 0x18
	[TooltipAttribute] // RVA: 0xCCA76C Offset: 0xCCA76C VA: 0xCCA76C
	public int weight; // 0x20
	[TooltipAttribute] // RVA: 0xCCA7A4 Offset: 0xCCA7A4 VA: 0xCCA7A4
	public bool nonPlayIfEnemy; // 0x24

	// Methods

	// RVA: 0x1F6D930 Offset: 0x1F6D930 VA: 0x1F6D930
	public void .ctor() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95C70 Offset: 0xC95C70 VA: 0xC95C70
[USequencerEventAttribute] // RVA: 0xC95C70 Offset: 0xC95C70 VA: 0xC95C70
[USequencerEventHideDurationAttribute] // RVA: 0xC95C70 Offset: 0xC95C70 VA: 0xC95C70
public class USFGOPlayAudioEventMissFunction : USFGOPlayAudioEvent // TypeDefIndex: 8167
{
	// Fields
	public string missFuncList; // 0x68

	// Methods

	// RVA: 0x1F6D940 Offset: 0x1F6D940 VA: 0x1F6D940
	public void .ctor() { }

	// RVA: 0x1F6D9A8 Offset: 0x1F6D9A8 VA: 0x1F6D9A8 Slot: 4
	public override void FireEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95CE0 Offset: 0xC95CE0 VA: 0xC95CE0
[USequencerEventAttribute] // RVA: 0xC95CE0 Offset: 0xC95CE0 VA: 0xC95CE0
[USequencerEventHideDurationAttribute] // RVA: 0xC95CE0 Offset: 0xC95CE0 VA: 0xC95CE0
public class USFGOPlayAudioEventRandom : USFGOPlayAudioEvent // TypeDefIndex: 8168
{
	// Fields
	[SpaceAttribute] // RVA: 0xCCA7DC Offset: 0xCCA7DC VA: 0xCCA7DC
	[TooltipAttribute] // RVA: 0xCCA7DC Offset: 0xCCA7DC VA: 0xCCA7DC
	public string syncPlayGroup; // 0x68
	[TooltipAttribute] // RVA: 0xCCA82C Offset: 0xCCA82C VA: 0xCCA82C
	public List<USFGOPlayAudioEventRandom.AudioData> playAudioDataList; // 0x70
	[TooltipAttribute] // RVA: 0xCCA864 Offset: 0xCCA864 VA: 0xCCA864
	public bool registPlayedFlag; // 0x78

	// Methods

	// RVA: 0x1F6DD88 Offset: 0x1F6DD88 VA: 0x1F6DD88
	public void .ctor() { }

	// RVA: 0x1F6DE48 Offset: 0x1F6DE48 VA: 0x1F6DE48 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6DE6C Offset: 0x1F6DE6C VA: 0x1F6DE6C
	protected void setupPlayAudio() { }

	// RVA: 0x1F6E324 Offset: 0x1F6E324 VA: 0x1F6E324 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6E330 Offset: 0x1F6E330 VA: 0x1F6E330 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F6E3E8 Offset: 0x1F6E3E8 VA: 0x1F6E3E8 Slot: 16
	public override bool FixSyncGroupRandomAudioPlayIndex(string syncGroupName) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayAudioEventRandom.AudioData // TypeDefIndex: 8169
{
	// Fields
	[SerializeField] // RVA: 0xCCA89C Offset: 0xCCA89C VA: 0xCCA89C
	[TooltipAttribute] // RVA: 0xCCA89C Offset: 0xCCA89C VA: 0xCCA89C
	public string playSoundId; // 0x10
	[SerializeField] // RVA: 0xCCA8E8 Offset: 0xCCA8E8 VA: 0xCCA8E8
	[TooltipAttribute] // RVA: 0xCCA8E8 Offset: 0xCCA8E8 VA: 0xCCA8E8
	public AudioClip playAudioClip; // 0x18
	[TooltipAttribute] // RVA: 0xCCA934 Offset: 0xCCA934 VA: 0xCCA934
	public int weight; // 0x20

	// Methods

	// RVA: 0x1F6E428 Offset: 0x1F6E428 VA: 0x1F6E428
	public void .ctor() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95D50 Offset: 0xC95D50 VA: 0xC95D50
[USequencerEventAttribute] // RVA: 0xC95D50 Offset: 0xC95D50 VA: 0xC95D50
[USequencerEventHideDurationAttribute] // RVA: 0xC95D50 Offset: 0xC95D50 VA: 0xC95D50
public class USFGOPlayAudioEventRandomMissFunction : USFGOPlayAudioEventRandom // TypeDefIndex: 8170
{
	// Fields
	[SpaceAttribute] // RVA: 0xCCA96C Offset: 0xCCA96C VA: 0xCCA96C
	[SerializeField] // RVA: 0xCCA96C Offset: 0xCCA96C VA: 0xCCA96C
	private string missFuncList; // 0x80

	// Methods

	// RVA: 0x1F6E4A8 Offset: 0x1F6E4A8 VA: 0x1F6E4A8
	public void .ctor() { }

	// RVA: 0x1F6E4AC Offset: 0x1F6E4AC VA: 0x1F6E4AC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6E4E8 Offset: 0x1F6E4E8 VA: 0x1F6E4E8
	private bool CheckMissFunction() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95DC0 Offset: 0xC95DC0 VA: 0xC95DC0
[USequencerEventAttribute] // RVA: 0xC95DC0 Offset: 0xC95DC0 VA: 0xC95DC0
[USequencerEventHideDurationAttribute] // RVA: 0xC95DC0 Offset: 0xC95DC0 VA: 0xC95DC0
public class USFGOPlayBgmEvent : USEventBase // TypeDefIndex: 8171
{
	// Fields
	public float volume; // 0x30
	public float fadeTime; // 0x34
	public string bgmName; // 0x38

	// Methods

	// RVA: 0x1F6E860 Offset: 0x1F6E860 VA: 0x1F6E860
	public void .ctor() { }

	// RVA: 0x1F6E870 Offset: 0x1F6E870 VA: 0x1F6E870 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6E9A4 Offset: 0x1F6E9A4 VA: 0x1F6E9A4 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F6E9A8 Offset: 0x1F6E9A8 VA: 0x1F6E9A8 Slot: 7
	public override void ResumeEvent() { }

	// RVA: 0x1F6E9AC Offset: 0x1F6E9AC VA: 0x1F6E9AC Slot: 6
	public override void PauseEvent() { }

	// RVA: 0x1F6E9B0 Offset: 0x1F6E9B0 VA: 0x1F6E9B0 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F6E9BC Offset: 0x1F6E9BC VA: 0x1F6E9BC Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F6E9C8 Offset: 0x1F6E9C8 VA: 0x1F6E9C8 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95E30 Offset: 0xC95E30 VA: 0xC95E30
[USequencerEventAttribute] // RVA: 0xC95E30 Offset: 0xC95E30 VA: 0xC95E30
[USequencerEventHideDurationAttribute] // RVA: 0xC95E30 Offset: 0xC95E30 VA: 0xC95E30
public class USFGOPlayBgmEventConditional : USFGOPlayBgmEvent // TypeDefIndex: 8172
{
	// Fields
	public USFGOPlayBgmEventConditional.MultiCondBGM[] anyMultiConditions; // 0x40

	// Methods

	// RVA: 0x1F6E9CC Offset: 0x1F6E9CC VA: 0x1F6E9CC
	public void .ctor() { }

	// RVA: 0x1F6EA34 Offset: 0x1F6EA34 VA: 0x1F6EA34 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6EA74 Offset: 0x1F6EA74 VA: 0x1F6EA74 Slot: 16
	protected virtual bool IsEnableConditions() { }

	// RVA: 0x1F6EB88 Offset: 0x1F6EB88 VA: 0x1F6EB88 Slot: 17
	protected virtual bool IsEnableCondition(USFGOPlayBgmEventConditional.CondBGM cond) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3872C Offset: 0xD3872C VA: 0xD3872C
	// RVA: 0x1F6EC38 Offset: 0x1F6EC38 VA: 0x1F6EC38
	private bool <IsEnableConditions>m__0(USFGOPlayBgmEventConditional.CondBGM x) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayBgmEventConditional.CondBGM // TypeDefIndex: 8173
{
	// Fields
	public CondType.Kind condType; // 0x10
	public int targetId; // 0x14
	public long condValue; // 0x18

	// Methods

	// RVA: 0x1F6EC60 Offset: 0x1F6EC60 VA: 0x1F6EC60
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class USFGOPlayBgmEventConditional.MultiCondBGM // TypeDefIndex: 8174
{
	// Fields
	public USFGOPlayBgmEventConditional.CondBGM[] conditions; // 0x10

	// Methods

	// RVA: 0x1F6EC68 Offset: 0x1F6EC68 VA: 0x1F6EC68
	public void .ctor() { }
}

// Namespace: WellFired
public abstract class USFGOPlayCutInBase : USEventBase // TypeDefIndex: 8175
{
	// Fields
	public int svtId; // 0x30
	public int limitCount; // 0x34
	public Face.Type faceType; // 0x38
	public CutInType cutInType; // 0x3C
	public bool parentCamera; // 0x40
	public bool isFadeDuringCutIn; // 0x41
	private GameObject myCutIn; // 0x48
	private bool useAssetBundle; // 0x50
	private Animation[] animations; // 0x58
	private SimpleAnimation[] simpleAnimations; // 0x60
	private ParticleSystem[] particles; // 0x68
	private UVScroll[] uvScrolls; // 0x70
	private changeVColor[] changeVColors; // 0x78
	private bool originalActive; // 0x80
	private bool AnimStarted; // 0x81
	protected UIStandFigureM myStandFigure; // 0x88

	// Methods

	// RVA: 0x1F6ECC8 Offset: 0x1F6ECC8 VA: 0x1F6ECC8
	protected void .ctor() { }

	// RVA: 0x1F6ECD8 Offset: 0x1F6ECD8 VA: 0x1F6ECD8
	public void Update() { }

	// RVA: 0x1F6F2A4 Offset: 0x1F6F2A4 VA: 0x1F6F2A4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F6FF40 Offset: 0x1F6FF40 VA: 0x1F6FF40 Slot: 16
	protected virtual UIStandFigureM GetTargetSvtStandFigure(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0x1F6FFC0 Offset: 0x1F6FFC0 VA: 0x1F6FFC0 Slot: 17
	protected virtual void SetFigure(int svtId, int limCnt, GameObject cutIn, GameObject parentObj, UIStandFigureM figure, Face.Type fType) { }

	// RVA: 0x1F7031C Offset: 0x1F7031C VA: 0x1F7031C
	protected void onAssetLoad() { }

	// RVA: 0x1F70768 Offset: 0x1F70768 VA: 0x1F70768 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F70E50 Offset: 0x1F70E50 VA: 0x1F70E50 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F70E54 Offset: 0x1F70E54 VA: 0x1F70E54 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F70FFC Offset: 0x1F70FFC VA: 0x1F70FFC Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F71140 Offset: 0x1F71140 VA: 0x1F71140
	protected void DisposeMyStandFigure() { }

	// RVA: 0x1F711D4 Offset: 0x1F711D4 VA: 0x1F711D4
	protected void DestroyMyCutIn() { }

	// RVA: 0x1F7127C Offset: 0x1F7127C VA: 0x1F7127C
	protected void ReleaseAsset(int svtId, int limitCount) { }

	// RVA: 0x1F71394 Offset: 0x1F71394 VA: 0x1F71394 Slot: 18
	protected virtual void OnDestroy() { }

	// RVA: 0x1F713C4 Offset: 0x1F713C4 VA: 0x1F713C4 Slot: 19
	public virtual void InitPreLoadStandFigureData(BattleSequenceManager battleSeqManager, GameObject seqObj) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95EA0 Offset: 0xC95EA0 VA: 0xC95EA0
[USequencerEventAttribute] // RVA: 0xC95EA0 Offset: 0xC95EA0 VA: 0xC95EA0
public class USFGOPlayCutInEvent : USEventBase // TypeDefIndex: 8176
{
	// Fields
	public GameObject cutInObject; // 0x30
	public string cutInName; // 0x38
	public float playbackSpeed; // 0x40
	private Animation[] animations; // 0x48
	private SimpleAnimation[] simpleAnimations; // 0x50
	private ParticleSystem[] particles; // 0x58
	private UVScroll[] uvScrolls; // 0x60
	private changeVColor[] changeVColors; // 0x68
	private bool originalActive; // 0x70

	// Methods

	// RVA: 0x1F713C8 Offset: 0x1F713C8 VA: 0x1F713C8
	public void .ctor() { }

	// RVA: 0x1F713D8 Offset: 0x1F713D8 VA: 0x1F713D8
	public void Update() { }

	// RVA: 0x1F7174C Offset: 0x1F7174C VA: 0x1F7174C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F71B44 Offset: 0x1F71B44 VA: 0x1F71B44 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F721A8 Offset: 0x1F721A8 VA: 0x1F721A8 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F72350 Offset: 0x1F72350 VA: 0x1F72350 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95F00 Offset: 0xC95F00 VA: 0xC95F00
[USequencerEventAttribute] // RVA: 0xC95F00 Offset: 0xC95F00 VA: 0xC95F00
[USequencerEventHideDurationAttribute] // RVA: 0xC95F00 Offset: 0xC95F00 VA: 0xC95F00
public class USFGOPlayEffectEvent : USEventBase // TypeDefIndex: 8177
{
	// Fields
	private Animation[] animations; // 0x30
	private SimpleAnimation[] simpleAnimations; // 0x38
	private bool originalActive; // 0x40

	// Methods

	// RVA: 0x1F72484 Offset: 0x1F72484 VA: 0x1F72484
	public void .ctor() { }

	// RVA: 0x1F7248C Offset: 0x1F7248C VA: 0x1F7248C
	public void Update() { }

	// RVA: 0x1F7252C Offset: 0x1F7252C VA: 0x1F7252C
	private float getMostLongDuration() { }

	// RVA: 0x1F72828 Offset: 0x1F72828 VA: 0x1F72828
	protected string GetEffectAudio(string name) { }

	// RVA: 0x1F728A0 Offset: 0x1F728A0 VA: 0x1F728A0 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F73168 Offset: 0x1F73168 VA: 0x1F73168 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1F73688 Offset: 0x1F73688 VA: 0x1F73688 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F73830 Offset: 0x1F73830 VA: 0x1F73830 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F738EC Offset: 0x1F738EC VA: 0x1F738EC Slot: 9
	public override void EndEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95F70 Offset: 0xC95F70 VA: 0xC95F70
[USequencerEventAttribute] // RVA: 0xC95F70 Offset: 0xC95F70 VA: 0xC95F70
[USequencerEventHideDurationAttribute] // RVA: 0xC95F70 Offset: 0xC95F70 VA: 0xC95F70
public class USFGOPlayStandardCutInEvent : USEventBase // TypeDefIndex: 8178
{
	// Fields
	public int svtId; // 0x30
	public int limitCount; // 0x34
	public Face.Type faceType; // 0x38
	public CutInType cutInType; // 0x3C
	public bool parentCamera; // 0x40
	private GameObject myCutIn; // 0x48
	private bool useAssetBundle; // 0x50
	private Animation[] animations; // 0x58
	private SimpleAnimation[] simpleAnimations; // 0x60
	private ParticleSystem[] particles; // 0x68
	private UVScroll[] uvScrolls; // 0x70
	private changeVColor[] changeVColors; // 0x78
	private bool originalActive; // 0x80
	private bool AnimStarted; // 0x81
	private UIStandFigureM myStandFigure; // 0x88

	// Methods

	// RVA: 0x1F738F0 Offset: 0x1F738F0 VA: 0x1F738F0
	public void .ctor() { }

	// RVA: 0x1F73900 Offset: 0x1F73900 VA: 0x1F73900
	public void Update() { }

	// RVA: 0x1F73ECC Offset: 0x1F73ECC VA: 0x1F73ECC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1F74DD0 Offset: 0x1F74DD0 VA: 0x1F74DD0
	private void onAssetLoad() { }

	// RVA: 0x1F7521C Offset: 0x1F7521C VA: 0x1F7521C Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1F758F0 Offset: 0x1F758F0 VA: 0x1F758F0 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1F758F4 Offset: 0x1F758F4 VA: 0x1F758F4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1F75A9C Offset: 0x1F75A9C VA: 0x1F75A9C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1F75BE0 Offset: 0x1F75BE0 VA: 0x1F75BE0
	protected void OnDestroy() { }

	// RVA: 0x1F74DA8 Offset: 0x1F74DA8 VA: 0x1F74DA8
	private bool HasFGOStandFigureMColorCutIn() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC95FE0 Offset: 0xC95FE0 VA: 0xC95FE0
[USequencerEventAttribute] // RVA: 0xC95FE0 Offset: 0xC95FE0 VA: 0xC95FE0
[USequencerEventHideDurationAttribute] // RVA: 0xC95FE0 Offset: 0xC95FE0 VA: 0xC95FE0
public class USFGOPlayStandardCutInLimitCount : USFGOPlayCutInBase // TypeDefIndex: 8179
{
	// Fields
	public USFGOPlayStandardCutInLimitCount.OverwriteCutIn[] overwriteArray; // 0x90
	private USFGOPlayStandardCutInLimitCount.OverwriteStandFigure fixFigure; // 0x98
	private GameObject defStandardCutIn; // 0xA0

	// Methods

	// RVA: 0x1DC956C Offset: 0x1DC956C VA: 0x1DC956C
	public void .ctor() { }

	// RVA: 0x1DC95CC Offset: 0x1DC95CC VA: 0x1DC95CC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DC963C Offset: 0x1DC963C VA: 0x1DC963C
	private USFGOPlayStandardCutInLimitCount.OverwriteStandFigure GetOverwriteStandFigure(int limitCount) { }

	// RVA: 0x1DC981C Offset: 0x1DC981C VA: 0x1DC981C
	public USFGOPlayStandardCutInLimitCount.OverwriteStandFigure GetStandFigureData(int svtId, int limCnt, Face.Type fType) { }

	// RVA: 0x1DC9A90 Offset: 0x1DC9A90 VA: 0x1DC9A90 Slot: 17
	protected override void SetFigure(int svtId, int limCnt, GameObject cutIn, GameObject parentObj, UIStandFigureM figure, Face.Type fType) { }

	// RVA: 0x1DC9B78 Offset: 0x1DC9B78 VA: 0x1DC9B78 Slot: 18
	protected override void OnDestroy() { }

	// RVA: 0x1DC9C60 Offset: 0x1DC9C60 VA: 0x1DC9C60 Slot: 16
	protected override UIStandFigureM GetTargetSvtStandFigure(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0x1DC9D58 Offset: 0x1DC9D58 VA: 0x1DC9D58 Slot: 19
	public override void InitPreLoadStandFigureData(BattleSequenceManager battleSeqManager, GameObject seqObj) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayStandardCutInLimitCount.OverwriteCutIn // TypeDefIndex: 8180
{
	// Fields
	public int limitCount; // 0x10
	public USFGOPlayStandardCutInLimitCount.OverwriteStandFigure[] figureArray; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCCA9A8 Offset: 0xCCA9A8 VA: 0xCCA9A8
	private static Func<USFGOPlayStandardCutInLimitCount.OverwriteStandFigure, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1DC9E70 Offset: 0x1DC9E70 VA: 0x1DC9E70
	public void .ctor() { }

	// RVA: 0x1DC9720 Offset: 0x1DC9720 VA: 0x1DC9720
	public USFGOPlayStandardCutInLimitCount.OverwriteStandFigure GetRandomStandFigure() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3873C Offset: 0xD3873C VA: 0xD3873C
	// RVA: 0x1DC9ED0 Offset: 0x1DC9ED0 VA: 0x1DC9ED0
	private static int <GetRandomStandFigure>m__0(USFGOPlayStandardCutInLimitCount.OverwriteStandFigure x) { }
}

// Namespace: 
[Serializable]
public class USFGOPlayStandardCutInLimitCount.OverwriteStandFigure // TypeDefIndex: 8181
{
	// Fields
	public static readonly int NOT_OVERWRITE_VAL; // 0x0
	public int weight; // 0x10
	public int svtId; // 0x14
	public int imageLimitCount; // 0x18
	public Face.Type faceType; // 0x1C

	// Methods

	// RVA: 0x1DC9908 Offset: 0x1DC9908 VA: 0x1DC9908
	public void .ctor() { }

	// RVA: 0x1DC9998 Offset: 0x1DC9998 VA: 0x1DC9998
	public void Overwrite(USFGOPlayStandardCutInLimitCount.OverwriteStandFigure from) { }

	// RVA: -1 Offset: -1
	private void OverwriteValue<T>(ref T targetVal, T fromVal, T notOverwriteVal) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x218BD98 Offset: 0x218BD98 VA: 0x218BD98
	|-USFGOPlayStandardCutInLimitCount.OverwriteStandFigure.OverwriteValue<Face.Type>
	|
	|-RVA: 0x218BE64 Offset: 0x218BE64 VA: 0x218BE64
	|-USFGOPlayStandardCutInLimitCount.OverwriteStandFigure.OverwriteValue<int>
	|
	|-RVA: 0x218BECC Offset: 0x218BECC VA: 0x218BECC
	|-USFGOPlayStandardCutInLimitCount.OverwriteStandFigure.OverwriteValue<object>
	*/

	// RVA: 0x1DC9EF8 Offset: 0x1DC9EF8 VA: 0x1DC9EF8
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAF220 Offset: 0xCAF220 VA: 0xCAF220
private sealed class USFGOPlayStandardCutInLimitCount.<GetOverwriteStandFigure>c__AnonStorey0 // TypeDefIndex: 8182
{
	// Fields
	internal int limitCount; // 0x10

	// Methods

	// RVA: 0x1DC9718 Offset: 0x1DC9718 VA: 0x1DC9718
	public void .ctor() { }

	// RVA: 0x1DC9E34 Offset: 0x1DC9E34 VA: 0x1DC9E34
	internal bool <>m__0(USFGOPlayStandardCutInLimitCount.OverwriteCutIn x) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96050 Offset: 0xC96050 VA: 0xC96050
[USequencerEventAttribute] // RVA: 0xC96050 Offset: 0xC96050 VA: 0xC96050
[USequencerEventHideDurationAttribute] // RVA: 0xC96050 Offset: 0xC96050 VA: 0xC96050
public class USFGOPlayStandardCutInRandom : USFGOPlayCutInBase // TypeDefIndex: 8183
{
	// Fields
	public List<USFGOPlayStandardCutInRandom.CutInData> cutInDataList; // 0x90
	[TooltipAttribute] // RVA: 0xCCA9B8 Offset: 0xCCA9B8 VA: 0xCCA9B8
	public bool isSyncVoice; // 0x98
	[TooltipAttribute] // RVA: 0xCCA9F0 Offset: 0xCCA9F0 VA: 0xCCA9F0
	public string syncPlayGroup; // 0xA0
	private Face.Type fixFaceType; // 0xA8
	private int fixSvtId; // 0xAC
	private int fixLimitCount; // 0xB0
	private bool isFirstSetUp; // 0xB4

	// Methods

	// RVA: 0x1DC9F4C Offset: 0x1DC9F4C VA: 0x1DC9F4C
	public void .ctor() { }

	// RVA: 0x1DC9FC4 Offset: 0x1DC9FC4 VA: 0x1DC9FC4
	protected void SetUpCutIn() { }

	// RVA: 0x1DCA40C Offset: 0x1DCA40C VA: 0x1DCA40C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCA440 Offset: 0x1DCA440 VA: 0x1DCA440 Slot: 17
	protected override void SetFigure(int svtId, int limCnt, GameObject cutIn, GameObject parentObj, UIStandFigureM figure, Face.Type fType) { }

	// RVA: 0x1DCA4A8 Offset: 0x1DCA4A8 VA: 0x1DCA4A8 Slot: 18
	protected override void OnDestroy() { }

	// RVA: 0x1DCA4E4 Offset: 0x1DCA4E4 VA: 0x1DCA4E4 Slot: 16
	protected override UIStandFigureM GetTargetSvtStandFigure(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0x1DCA578 Offset: 0x1DCA578 VA: 0x1DCA578 Slot: 19
	public override void InitPreLoadStandFigureData(BattleSequenceManager battleSeqManager, GameObject seqObj) { }
}

// Namespace: 
[Serializable]
public struct USFGOPlayStandardCutInRandom.CutInData // TypeDefIndex: 8184
{
	// Fields
	public Face.Type type; // 0x0
	public int weight; // 0x4
	public int svtId; // 0x8
	public int limitCount; // 0xC
	public bool isSingleOperationLimitCount; // 0x10
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC960C0 Offset: 0xC960C0 VA: 0xC960C0
[USequencerEventAttribute] // RVA: 0xC960C0 Offset: 0xC960C0 VA: 0xC960C0
public class USFGOPlayTargetAnimationEvent : USEventBase // TypeDefIndex: 8185
{
	// Fields
	public string animationName; // 0x30
	public WrapMode wrapMode; // 0x38
	public USFGOCreateEffectEvent.EffectTarget target; // 0x3C
	protected List<GameObject> Targets; // 0x40
	public float playbackSpeed; // 0x48
	public string startEvent; // 0x50
	public string stopEvent; // 0x58
	public float startTime; // 0x60
	public float stopTime; // 0x64

	// Methods

	// RVA: 0x1DCA690 Offset: 0x1DCA690 VA: 0x1DCA690
	public void .ctor() { }

	// RVA: 0x1DCA72C Offset: 0x1DCA72C VA: 0x1DCA72C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCAD08 Offset: 0x1DCAD08 VA: 0x1DCAD08 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCB5A0 Offset: 0x1DCB5A0 VA: 0x1DCB5A0 Slot: 8
	public override void StopEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96120 Offset: 0xC96120 VA: 0xC96120
[USequencerEventAttribute] // RVA: 0xC96120 Offset: 0xC96120 VA: 0xC96120
public class USFGOReplaceTimeScale : USEventBase // TypeDefIndex: 8186
{
	// Fields
	[TooltipAttribute] // RVA: 0xCCAA28 Offset: 0xCCAA28 VA: 0xCCAA28
	[HeaderAttribute] // RVA: 0xCCAA28 Offset: 0xCCAA28 VA: 0xCCAA28
	public float targetTimeScale; // 0x30
	private float saveTimeScale; // 0x34
	private bool isChanging; // 0x38

	// Methods

	// RVA: 0x1DCB5A4 Offset: 0x1DCB5A4 VA: 0x1DCB5A4
	public void .ctor() { }

	// RVA: 0x1DCB5B8 Offset: 0x1DCB5B8 VA: 0x1DCB5B8 Slot: 5
	public override void ProcessEvent(float runningTime) { }

	// RVA: 0x1DCB5BC Offset: 0x1DCB5BC VA: 0x1DCB5BC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCB5FC Offset: 0x1DCB5FC VA: 0x1DCB5FC
	private void OnDestroy() { }

	// RVA: 0x1DCB608 Offset: 0x1DCB608 VA: 0x1DCB608 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1DCB63C Offset: 0x1DCB63C VA: 0x1DCB63C Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1DCB648 Offset: 0x1DCB648 VA: 0x1DCB648 Slot: 8
	public override void StopEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96180 Offset: 0xC96180 VA: 0xC96180
[USequencerEventAttribute] // RVA: 0xC96180 Offset: 0xC96180 VA: 0xC96180
[USequencerEventHideDurationAttribute] // RVA: 0xC96180 Offset: 0xC96180 VA: 0xC96180
public class USFGOReserveFlipEvent : USEventBase // TypeDefIndex: 8187
{
	// Fields
	public string NodeName; // 0x30
	public Vector2 PlayerTiling; // 0x38
	public Vector2 PlayerOffset; // 0x40
	public Vector2 EnemyTiling; // 0x48
	public Vector2 EnemyOffset; // 0x50
	private Vector2 OrigTiling; // 0x58
	private Vector2 OrigOffset; // 0x60

	// Methods

	// RVA: 0x1DCB654 Offset: 0x1DCB654 VA: 0x1DCB654
	public void .ctor() { }

	// RVA: 0x1DCB65C Offset: 0x1DCB65C VA: 0x1DCB65C
	protected bool IsEnemy() { }

	// RVA: 0x1DCB720 Offset: 0x1DCB720 VA: 0x1DCB720 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCB970 Offset: 0x1DCB970 VA: 0x1DCB970 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCB974 Offset: 0x1DCB974 VA: 0x1DCB974 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1DCB980 Offset: 0x1DCB980 VA: 0x1DCB980 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC961F0 Offset: 0xC961F0 VA: 0xC961F0
[USequencerEventAttribute] // RVA: 0xC961F0 Offset: 0xC961F0 VA: 0xC961F0
public class USFGOResetCharacterPositionEvent : USEventBase // TypeDefIndex: 8188
{
	// Fields
	private const string posPlayerPrefix = "Player";
	private const string posEnemyPrefix = "Enemy";
	public USFGOResetCharacterPositionEvent.CharacterPosition positionInfo; // 0x30

	// Methods

	// RVA: 0x1DCBB34 Offset: 0x1DCBB34 VA: 0x1DCBB34
	public void .ctor() { }

	// RVA: 0x1DCBB3C Offset: 0x1DCBB3C VA: 0x1DCBB3C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCC6A8 Offset: 0x1DCC6A8 VA: 0x1DCC6A8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCC6AC Offset: 0x1DCC6AC VA: 0x1DCC6AC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1DCC6B8 Offset: 0x1DCC6B8 VA: 0x1DCC6B8 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: 
public enum USFGOResetCharacterPositionEvent.CharacterPosition // TypeDefIndex: 8189
{
	// Fields
	public int value__; // 0x0
	public const USFGOResetCharacterPositionEvent.CharacterPosition ResetAll = 0;
	public const USFGOResetCharacterPositionEvent.CharacterPosition ResetPlayers = 1;
	public const USFGOResetCharacterPositionEvent.CharacterPosition ResetEnemies = 2;
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96250 Offset: 0xC96250 VA: 0xC96250
[USequencerEventAttribute] // RVA: 0xC96250 Offset: 0xC96250 VA: 0xC96250
[USequencerEventHideDurationAttribute] // RVA: 0xC96250 Offset: 0xC96250 VA: 0xC96250
public class USFGOSaturationEffect : USEventBase // TypeDefIndex: 8190
{
	// Fields
	[SerializeField] // RVA: 0xCCAA88 Offset: 0xCCAA88 VA: 0xCCAA88
	private AnimationCurve saturationCurve; // 0x30
	[SerializeField] // RVA: 0xCCAA98 Offset: 0xCCAA98 VA: 0xCCAA98
	private float maxValue; // 0x38
	private float currentCurveSampleTime; // 0x3C

	// Methods

	// RVA: 0x1DCC7D4 Offset: 0x1DCC7D4 VA: 0x1DCC7D4
	public void .ctor() { }

	// RVA: 0x1DCC910 Offset: 0x1DCC910 VA: 0x1DCC910 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCC914 Offset: 0x1DCC914 VA: 0x1DCC914
	protected void SetSaturation(float saturation) { }

	// RVA: 0x1DCCAE8 Offset: 0x1DCCAE8 VA: 0x1DCCAE8 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCCB98 Offset: 0x1DCCB98 VA: 0x1DCCB98 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1DCCCCC Offset: 0x1DCCCCC VA: 0x1DCCCCC Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1DCCCD8 Offset: 0x1DCCCD8 VA: 0x1DCCCD8 Slot: 10
	public override void UndoEvent() { }

	// RVA: 0x1DCCCE0 Offset: 0x1DCCCE0 VA: 0x1DCCCE0
	private void Update() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC962C0 Offset: 0xC962C0 VA: 0xC962C0
[USequencerEventAttribute] // RVA: 0xC962C0 Offset: 0xC962C0 VA: 0xC962C0
public class USFGOSetCameraEvent : USEventBase // TypeDefIndex: 8191
{
	// Fields
	public Camera camera; // 0x30
	public Transform cameraRoot; // 0x38
	public CameraPosition camPosition; // 0x40
	private Transform originalParent; // 0x48
	private Vector3 previousPosition; // 0x50
	private Vector3 previousScale; // 0x5C
	private Quaternion previousRotation; // 0x68
	private Transform CameraTarget; // 0x78

	// Methods

	// RVA: 0x1DCCDE0 Offset: 0x1DCCDE0 VA: 0x1DCCDE0
	public void .ctor() { }

	// RVA: 0x1DCCDE8 Offset: 0x1DCCDE8 VA: 0x1DCCDE8
	public void Update() { }

	// RVA: 0x1DCCDF4 Offset: 0x1DCCDF4 VA: 0x1DCCDF4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCD170 Offset: 0x1DCD170 VA: 0x1DCD170 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCD370 Offset: 0x1DCD370 VA: 0x1DCD370 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1DCD37C Offset: 0x1DCD37C VA: 0x1DCD37C Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96320 Offset: 0xC96320 VA: 0xC96320
[USequencerEventAttribute] // RVA: 0xC96320 Offset: 0xC96320 VA: 0xC96320
public class USFGOSetCharacterPositionEvent : USEventBase // TypeDefIndex: 8192
{
	// Fields
	public Vector3 positionA; // 0x30
	public Vector3 positionB; // 0x3C
	public Vector3 positionC; // 0x48
	public Vector3 positionD; // 0x54
	public Vector3 positionE; // 0x60
	public bool useSpacePosition; // 0x6C
	private List<Vector3> oldPositions; // 0x70
	private List<bool> oldActives; // 0x78

	// Methods

	// RVA: 0x1DCD534 Offset: 0x1DCD534 VA: 0x1DCD534
	public void .ctor() { }

	// RVA: 0x1DCD5CC Offset: 0x1DCD5CC VA: 0x1DCD5CC Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCDA48 Offset: 0x1DCDA48 VA: 0x1DCDA48
	private GameObject[] GetTargetsActor() { }

	// RVA: 0x1DCD5D0 Offset: 0x1DCD5D0 VA: 0x1DCD5D0
	private void SetPosition() { }

	// RVA: 0x1DCDB0C Offset: 0x1DCDB0C VA: 0x1DCDB0C
	private void ResetPosition() { }

	// RVA: 0x1DCDECC Offset: 0x1DCDECC VA: 0x1DCDECC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCDED0 Offset: 0x1DCDED0 VA: 0x1DCDED0 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1DCDED4 Offset: 0x1DCDED4 VA: 0x1DCDED4 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1DCDEE0 Offset: 0x1DCDEE0 VA: 0x1DCDEE0 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96380 Offset: 0xC96380 VA: 0xC96380
[USequencerEventAttribute] // RVA: 0xC96380 Offset: 0xC96380 VA: 0xC96380
[USequencerEventHideDurationAttribute] // RVA: 0xC96380 Offset: 0xC96380 VA: 0xC96380
public class USFGOSetModelEvolutionEvent : USEventBase // TypeDefIndex: 8193
{
	// Fields
	public static readonly string levelMarker; // 0x0
	private static readonly string prefabMarker; // 0x8
	private static readonly string chrnodeMarker; // 0x10
	private static readonly string sideflipMarker; // 0x18
	private static readonly string enItemMarker; // 0x20
	private static readonly string enWeaponMarker; // 0x28
	[TooltipAttribute] // RVA: 0xCCAAA8 Offset: 0xCCAAA8 VA: 0xCCAAA8
	public int setEvolutionLevel; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCAAE0 Offset: 0xCCAAE0 VA: 0xCCAAE0
	private static Func<Transform, bool> <>f__am$cache0; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xCCAAF0 Offset: 0xCCAAF0 VA: 0xCCAAF0
	private static Func<Transform, bool> <>f__am$cache1; // 0x38

	// Methods

	// RVA: 0x1DCDEE4 Offset: 0x1DCDEE4 VA: 0x1DCDEE4
	public void .ctor() { }

	// RVA: 0x1DCDEF4 Offset: 0x1DCDEF4 VA: 0x1DCDEF4 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCF010 Offset: 0x1DCF010 VA: 0x1DCF010 Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCE114 Offset: 0x1DCE114 VA: 0x1DCE114
	private void setupModel(BattleActorControl bac, GameObject go, int limitImageCount) { }

	// RVA: 0x1DCF014 Offset: 0x1DCF014 VA: 0x1DCF014
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3874C Offset: 0xD3874C VA: 0xD3874C
	// RVA: 0x1DCF0D8 Offset: 0x1DCF0D8 VA: 0x1DCF0D8
	private static bool <setupModel>m__0(Transform p) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3875C Offset: 0xD3875C VA: 0xD3875C
	// RVA: 0x1DCF22C Offset: 0x1DCF22C VA: 0x1DCF22C
	private static bool <setupModel>m__1(Transform p) { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC963F0 Offset: 0xC963F0 VA: 0xC963F0
[USequencerEventAttribute] // RVA: 0xC963F0 Offset: 0xC963F0 VA: 0xC963F0
public class USFGOShakeCameraEvent : USFGOEventBase // TypeDefIndex: 8194
{
	// Fields
	public float verticalShakeSize; // 0x38
	public float horizontalShakeSize; // 0x3C
	public bool isRelative; // 0x40
	private Transform target; // 0x48
	private Vector3 targetPosition; // 0x50
	private int frameCount; // 0x5C

	// Methods

	// RVA: 0x1DCF2E8 Offset: 0x1DCF2E8 VA: 0x1DCF2E8
	public void .ctor() { }

	// RVA: 0x1DCF2F8 Offset: 0x1DCF2F8 VA: 0x1DCF2F8 Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DCF3EC Offset: 0x1DCF3EC VA: 0x1DCF3EC Slot: 5
	public override void ProcessEvent(float deltaTime) { }

	// RVA: 0x1DCF638 Offset: 0x1DCF638 VA: 0x1DCF638 Slot: 9
	public override void EndEvent() { }

	// RVA: 0x1DCF644 Offset: 0x1DCF644 VA: 0x1DCF644 Slot: 8
	public override void StopEvent() { }

	// RVA: 0x1DCF650 Offset: 0x1DCF650 VA: 0x1DCF650 Slot: 10
	public override void UndoEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC96450 Offset: 0xC96450 VA: 0xC96450
[USequencerEventAttribute] // RVA: 0xC96450 Offset: 0xC96450 VA: 0xC96450
[USequencerEventHideDurationAttribute] // RVA: 0xC96450 Offset: 0xC96450 VA: 0xC96450
public class USFGOSwitchNodesWhenMiss : USFGOEventBase // TypeDefIndex: 8195
{
	// Fields
	public string functionlist; // 0x38
	public bool switchingFlg; // 0x40
	public bool noBuffFlg; // 0x41

	// Methods

	// RVA: 0x1DCF768 Offset: 0x1DCF768 VA: 0x1DCF768
	public void .ctor() { }

	// RVA: 0x1DCF770 Offset: 0x1DCF770 VA: 0x1DCF770 Slot: 4
	public override void FireEvent() { }
}

// Namespace: WellFired
[USequencerFriendlyNameAttribute] // RVA: 0xC964C0 Offset: 0xC964C0 VA: 0xC964C0
[USequencerEventAttribute] // RVA: 0xC964C0 Offset: 0xC964C0 VA: 0xC964C0
public class USFGOTargetEffectSwitchEvent : USEventBase // TypeDefIndex: 8196
{
	// Fields
	[SerializeField] // RVA: 0xCCAB00 Offset: 0xCCAB00 VA: 0xCCAB00
	private USFGOTargetEffectSwitchEvent.EffectSwitch effectSwitch; // 0x30
	[SerializeField] // RVA: 0xCCAB10 Offset: 0xCCAB10 VA: 0xCCAB10
	private USFGOTargetEffectSwitchEvent.SwitchType switchType; // 0x34

	// Methods

	// RVA: 0x1DCFC14 Offset: 0x1DCFC14 VA: 0x1DCFC14
	public void .ctor() { }

	// RVA: 0x1DCFC1C Offset: 0x1DCFC1C VA: 0x1DCFC1C Slot: 4
	public override void FireEvent() { }

	// RVA: 0x1DD0084 Offset: 0x1DD0084 VA: 0x1DD0084
	private void ParticleSetActive(List<ParticleSystem> particleList, bool active) { }

	// RVA: 0x1DD0214 Offset: 0x1DD0214 VA: 0x1DD0214
	private void ParticleSwitch(List<ParticleSystem> particleList, bool particlePlay) { }

	// RVA: 0x1DD0428 Offset: 0x1DD0428 VA: 0x1DD0428 Slot: 5
	public override void ProcessEvent(float runningTime) { }
}

// Namespace: 
public enum USFGOTargetEffectSwitchEvent.EffectSwitch // TypeDefIndex: 8197
{
	// Fields
	public int value__; // 0x0
	public const USFGOTargetEffectSwitchEvent.EffectSwitch Off = 0;
	public const USFGOTargetEffectSwitchEvent.EffectSwitch On = 1;
