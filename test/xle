}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R1Point : AbstractF2mPoint // TypeDefIndex: 5064
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x266B5F4 Offset: 0x266B5F4 VA: 0x266B5F4
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x266B75C Offset: 0x266B75C VA: 0x266B75C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x266B8C8 Offset: 0x266B8C8 VA: 0x266B8C8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x266BDEC Offset: 0x266BDEC VA: 0x266BDEC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x266BE8C Offset: 0x266BE8C VA: 0x266BE8C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x266BFCC Offset: 0x266BFCC VA: 0x266BFCC Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x266C068 Offset: 0x266C068 VA: 0x266C068 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x266CA04 Offset: 0x266CA04 VA: 0x266CA04 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x266CE4C Offset: 0x266CE4C VA: 0x266CE4C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x266D52C Offset: 0x266D52C VA: 0x266D52C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R2Curve : AbstractF2mCurve // TypeDefIndex: 5065
{
	// Fields
	private const int SecT113R2_DEFAULT_COORDS = 6;
	protected readonly SecT113R2Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x266D6E8 Offset: 0x266D6E8 VA: 0x266D6E8
	public void .ctor() { }

	// RVA: 0x266D8B4 Offset: 0x266D8B4 VA: 0x266D8B4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x266D90C Offset: 0x266D90C VA: 0x266D90C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x266D918 Offset: 0x266D918 VA: 0x266D918 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x266D920 Offset: 0x266D920 VA: 0x266D920 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x266D928 Offset: 0x266D928 VA: 0x266D928 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x266D98C Offset: 0x266D98C VA: 0x266D98C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x266DAEC Offset: 0x266DAEC VA: 0x266DAEC Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x266DB8C Offset: 0x266DB8C VA: 0x266DB8C Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x266DB94 Offset: 0x266DB94 VA: 0x266DB94 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x266DB9C Offset: 0x266DB9C VA: 0x266DB9C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x266DBA4 Offset: 0x266DBA4 VA: 0x266DBA4 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x266DBAC Offset: 0x266DBAC VA: 0x266DBAC Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x266DBB4 Offset: 0x266DBB4 VA: 0x266DBB4 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT113R2Point : AbstractF2mPoint // TypeDefIndex: 5066
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x266D8AC Offset: 0x266D8AC VA: 0x266D8AC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x266DA14 Offset: 0x266DA14 VA: 0x266DA14
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x266DB80 Offset: 0x266DB80 VA: 0x266DB80
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x266DBBC Offset: 0x266DBBC VA: 0x266DBBC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x266DC5C Offset: 0x266DC5C VA: 0x266DC5C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x266DD9C Offset: 0x266DD9C VA: 0x266DD9C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x266DE38 Offset: 0x266DE38 VA: 0x266DE38 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x266E7D4 Offset: 0x266E7D4 VA: 0x266E7D4 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x266EC1C Offset: 0x266EC1C VA: 0x266EC1C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x266F2FC Offset: 0x266F2FC VA: 0x266F2FC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131Field // TypeDefIndex: 5067
{
	// Fields
	private const ulong M03 = 7;
	private const ulong M44 = 17592186044415;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x266F4B8 Offset: 0x266F4B8 VA: 0x266F4B8
	public void .ctor() { }

	// RVA: 0x266F4C0 Offset: 0x266F4C0 VA: 0x266F4C0
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x266F634 Offset: 0x266F634 VA: 0x266F634
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x266F870 Offset: 0x266F870 VA: 0x266F870
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x266F968 Offset: 0x266F968 VA: 0x266F968
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x266FAF4 Offset: 0x266FAF4 VA: 0x266FAF4
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x266FD58 Offset: 0x266FD58 VA: 0x266FD58
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2670744 Offset: 0x2670744 VA: 0x2670744
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2670558 Offset: 0x2670558 VA: 0x2670558
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x266F9EC Offset: 0x266F9EC VA: 0x266F9EC
	public static void Reduce61(ulong[] z, int zOff) { }

	// RVA: 0x26707E0 Offset: 0x26707E0 VA: 0x26707E0
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x266FCC4 Offset: 0x266FCC4 VA: 0x266FCC4
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x2670A98 Offset: 0x2670A98 VA: 0x2670A98
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x266FDF0 Offset: 0x266FDF0 VA: 0x266FDF0
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x2670B30 Offset: 0x2670B30 VA: 0x2670B30
	public static uint Trace(ulong[] x) { }

	// RVA: 0x2670BC8 Offset: 0x2670BC8 VA: 0x2670BC8
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x266FEDC Offset: 0x266FEDC VA: 0x266FEDC
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2670DA4 Offset: 0x2670DA4 VA: 0x2670DA4
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x26709B8 Offset: 0x26709B8 VA: 0x26709B8
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x26711BC Offset: 0x26711BC VA: 0x26711BC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131FieldElement : ECFieldElement // TypeDefIndex: 5068
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2671238 Offset: 0x2671238 VA: 0x2671238
	public void .ctor(BigInteger x) { }

	// RVA: 0x2671334 Offset: 0x2671334 VA: 0x2671334
	public void .ctor() { }

	// RVA: 0x2671364 Offset: 0x2671364 VA: 0x2671364
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2671390 Offset: 0x2671390 VA: 0x2671390 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x267139C Offset: 0x267139C VA: 0x267139C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x26713A8 Offset: 0x26713A8 VA: 0x26713A8 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x26713F0 Offset: 0x26713F0 VA: 0x26713F0 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x26713FC Offset: 0x26713FC VA: 0x26713FC Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2671444 Offset: 0x2671444 VA: 0x2671444 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x267144C Offset: 0x267144C VA: 0x267144C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x26715F0 Offset: 0x26715F0 VA: 0x26715F0 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2671694 Offset: 0x2671694 VA: 0x2671694 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26716A0 Offset: 0x26716A0 VA: 0x26716A0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2671844 Offset: 0x2671844 VA: 0x2671844 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2671854 Offset: 0x2671854 VA: 0x2671854 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2671BE8 Offset: 0x2671BE8 VA: 0x2671BE8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2671C38 Offset: 0x2671C38 VA: 0x2671C38 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2671C3C Offset: 0x2671C3C VA: 0x2671C3C Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2671CE0 Offset: 0x2671CE0 VA: 0x2671CE0 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2671CF0 Offset: 0x2671CF0 VA: 0x2671CF0 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2671F9C Offset: 0x2671F9C VA: 0x2671F9C Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2672058 Offset: 0x2672058 VA: 0x2672058 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x26720FC Offset: 0x26720FC VA: 0x26720FC Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x26721A0 Offset: 0x26721A0 VA: 0x26721A0 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x26721A8 Offset: 0x26721A8 VA: 0x26721A8 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x26721B0 Offset: 0x26721B0 VA: 0x26721B0 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x26721B8 Offset: 0x26721B8 VA: 0x26721B8 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x26721C0 Offset: 0x26721C0 VA: 0x26721C0 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x26721C8 Offset: 0x26721C8 VA: 0x26721C8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2672264 Offset: 0x2672264 VA: 0x2672264 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2672300 Offset: 0x2672300 VA: 0x2672300 Slot: 32
	public virtual bool Equals(SecT131FieldElement other) { }

	// RVA: 0x267232C Offset: 0x267232C VA: 0x267232C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R1Curve : AbstractF2mCurve // TypeDefIndex: 5069
{
	// Fields
	private const int SecT131R1_DEFAULT_COORDS = 6;
	protected readonly SecT131R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x267235C Offset: 0x267235C VA: 0x267235C
	public void .ctor() { }

	// RVA: 0x2672528 Offset: 0x2672528 VA: 0x2672528 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2672580 Offset: 0x2672580 VA: 0x2672580 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x267258C Offset: 0x267258C VA: 0x267258C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2672594 Offset: 0x2672594 VA: 0x2672594 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x267259C Offset: 0x267259C VA: 0x267259C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26725FC Offset: 0x26725FC VA: 0x26725FC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x267275C Offset: 0x267275C VA: 0x267275C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26727FC Offset: 0x26727FC VA: 0x26727FC Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2672804 Offset: 0x2672804 VA: 0x2672804 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x267280C Offset: 0x267280C VA: 0x267280C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2672814 Offset: 0x2672814 VA: 0x2672814 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x267281C Offset: 0x267281C VA: 0x267281C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2672824 Offset: 0x2672824 VA: 0x2672824 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R1Point : AbstractF2mPoint // TypeDefIndex: 5070
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2672520 Offset: 0x2672520 VA: 0x2672520
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2672684 Offset: 0x2672684 VA: 0x2672684
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26727F0 Offset: 0x26727F0 VA: 0x26727F0
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x267282C Offset: 0x267282C VA: 0x267282C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x26728CC Offset: 0x26728CC VA: 0x26728CC Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2672A0C Offset: 0x2672A0C VA: 0x2672A0C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2672AA8 Offset: 0x2672AA8 VA: 0x2672AA8 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2673444 Offset: 0x2673444 VA: 0x2673444 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x267388C Offset: 0x267388C VA: 0x267388C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2673F6C Offset: 0x2673F6C VA: 0x2673F6C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R2Curve : AbstractF2mCurve // TypeDefIndex: 5071
{
	// Fields
	private const int SecT131R2_DEFAULT_COORDS = 6;
	protected readonly SecT131R2Point m_infinity; // 0x58

	// Properties
	public override int FieldSize { get; }
	public override ECPoint Infinity { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2674128 Offset: 0x2674128 VA: 0x2674128
	public void .ctor() { }

	// RVA: 0x26742F4 Offset: 0x26742F4 VA: 0x26742F4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x267434C Offset: 0x267434C VA: 0x267434C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2674358 Offset: 0x2674358 VA: 0x2674358 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2674360 Offset: 0x2674360 VA: 0x2674360 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26743C0 Offset: 0x26743C0 VA: 0x26743C0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2674520 Offset: 0x2674520 VA: 0x2674520 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26745C0 Offset: 0x26745C0 VA: 0x26745C0 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26745C8 Offset: 0x26745C8 VA: 0x26745C8 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x26745D0 Offset: 0x26745D0 VA: 0x26745D0 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x26745D8 Offset: 0x26745D8 VA: 0x26745D8 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x26745E0 Offset: 0x26745E0 VA: 0x26745E0 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x26745E8 Offset: 0x26745E8 VA: 0x26745E8 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x26745F0 Offset: 0x26745F0 VA: 0x26745F0 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R2Point : AbstractF2mPoint // TypeDefIndex: 5072
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x26742EC Offset: 0x26742EC VA: 0x26742EC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2674448 Offset: 0x2674448 VA: 0x2674448
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26745B4 Offset: 0x26745B4 VA: 0x26745B4
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26745F8 Offset: 0x26745F8 VA: 0x26745F8 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2674698 Offset: 0x2674698 VA: 0x2674698 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x26747D8 Offset: 0x26747D8 VA: 0x26747D8 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2674874 Offset: 0x2674874 VA: 0x2674874 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2675210 Offset: 0x2675210 VA: 0x2675210 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2675658 Offset: 0x2675658 VA: 0x2675658 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2675D38 Offset: 0x2675D38 VA: 0x2675D38 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163Field // TypeDefIndex: 5073
{
	// Fields
	private const ulong M35 = 34359738367;
	private const ulong M55 = 36028797018963967;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x2675EF4 Offset: 0x2675EF4 VA: 0x2675EF4
	public void .ctor() { }

	// RVA: 0x2675EFC Offset: 0x2675EFC VA: 0x2675EFC
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2676070 Offset: 0x2676070 VA: 0x2676070
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x2676310 Offset: 0x2676310 VA: 0x2676310
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x2676408 Offset: 0x2676408 VA: 0x2676408
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2676554 Offset: 0x2676554 VA: 0x2676554
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x26768C4 Offset: 0x26768C4 VA: 0x26768C4
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x26771C4 Offset: 0x26771C4 VA: 0x26771C4
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2676FD0 Offset: 0x2676FD0 VA: 0x2676FD0
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x267648C Offset: 0x267648C VA: 0x267648C
	public static void Reduce29(ulong[] z, int zOff) { }

	// RVA: 0x2677260 Offset: 0x2677260 VA: 0x2677260
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x267674C Offset: 0x267674C VA: 0x267674C
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x2677550 Offset: 0x2677550 VA: 0x2677550
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x26767DC Offset: 0x26767DC VA: 0x26767DC
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x26775E4 Offset: 0x26775E4 VA: 0x26775E4
	public static uint Trace(ulong[] x) { }

	// RVA: 0x267764C Offset: 0x267764C VA: 0x267764C
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x267695C Offset: 0x267695C VA: 0x267695C
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2677828 Offset: 0x2677828 VA: 0x2677828
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x2677438 Offset: 0x2677438 VA: 0x2677438
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x2677BBC Offset: 0x2677BBC VA: 0x2677BBC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163FieldElement : ECFieldElement // TypeDefIndex: 5074
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2677C38 Offset: 0x2677C38 VA: 0x2677C38
	public void .ctor(BigInteger x) { }

	// RVA: 0x2677D34 Offset: 0x2677D34 VA: 0x2677D34
	public void .ctor() { }

	// RVA: 0x2677D64 Offset: 0x2677D64 VA: 0x2677D64
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2677D90 Offset: 0x2677D90 VA: 0x2677D90 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2677D9C Offset: 0x2677D9C VA: 0x2677D9C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2677DA8 Offset: 0x2677DA8 VA: 0x2677DA8 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2677DF0 Offset: 0x2677DF0 VA: 0x2677DF0 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2677DFC Offset: 0x2677DFC VA: 0x2677DFC Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2677E44 Offset: 0x2677E44 VA: 0x2677E44 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2677E4C Offset: 0x2677E4C VA: 0x2677E4C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2677FF0 Offset: 0x2677FF0 VA: 0x2677FF0 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2678094 Offset: 0x2678094 VA: 0x2678094 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26780A0 Offset: 0x26780A0 VA: 0x26780A0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2678244 Offset: 0x2678244 VA: 0x2678244 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2678254 Offset: 0x2678254 VA: 0x2678254 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26785E4 Offset: 0x26785E4 VA: 0x26785E4 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2678634 Offset: 0x2678634 VA: 0x2678634 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2678638 Offset: 0x2678638 VA: 0x2678638 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x26786DC Offset: 0x26786DC VA: 0x26786DC Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26786EC Offset: 0x26786EC VA: 0x26786EC Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2678994 Offset: 0x2678994 VA: 0x2678994 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2678A50 Offset: 0x2678A50 VA: 0x2678A50 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2678AF4 Offset: 0x2678AF4 VA: 0x2678AF4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2678B98 Offset: 0x2678B98 VA: 0x2678B98 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2678BA0 Offset: 0x2678BA0 VA: 0x2678BA0 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x2678BA8 Offset: 0x2678BA8 VA: 0x2678BA8 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2678BB0 Offset: 0x2678BB0 VA: 0x2678BB0 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x2678BB8 Offset: 0x2678BB8 VA: 0x2678BB8 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2678BC0 Offset: 0x2678BC0 VA: 0x2678BC0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2678C5C Offset: 0x2678C5C VA: 0x2678C5C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2678CF8 Offset: 0x2678CF8 VA: 0x2678CF8 Slot: 32
	public virtual bool Equals(SecT163FieldElement other) { }

	// RVA: 0x2678D24 Offset: 0x2678D24 VA: 0x2678D24 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163K1Curve : AbstractF2mCurve // TypeDefIndex: 5075
{
	// Fields
	private const int SecT163K1_DEFAULT_COORDS = 6;
	protected readonly SecT163K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2678D54 Offset: 0x2678D54 VA: 0x2678D54
	public void .ctor() { }

	// RVA: 0x2678EA0 Offset: 0x2678EA0 VA: 0x2678EA0 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2678EF8 Offset: 0x2678EF8 VA: 0x2678EF8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2678F04 Offset: 0x2678F04 VA: 0x2678F04 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2678F60 Offset: 0x2678F60 VA: 0x2678F60 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2678F68 Offset: 0x2678F68 VA: 0x2678F68 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2678F70 Offset: 0x2678F70 VA: 0x2678F70 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2678FD0 Offset: 0x2678FD0 VA: 0x2678FD0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2679130 Offset: 0x2679130 VA: 0x2679130 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26791D0 Offset: 0x26791D0 VA: 0x26791D0 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x26791D8 Offset: 0x26791D8 VA: 0x26791D8 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x26791E0 Offset: 0x26791E0 VA: 0x26791E0 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x26791E8 Offset: 0x26791E8 VA: 0x26791E8 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x26791F0 Offset: 0x26791F0 VA: 0x26791F0 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x26791F8 Offset: 0x26791F8 VA: 0x26791F8 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163K1Point : AbstractF2mPoint // TypeDefIndex: 5076
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2678E98 Offset: 0x2678E98 VA: 0x2678E98
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2679058 Offset: 0x2679058 VA: 0x2679058
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26791C4 Offset: 0x26791C4 VA: 0x26791C4
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2679200 Offset: 0x2679200 VA: 0x2679200 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x26792A0 Offset: 0x26792A0 VA: 0x26792A0 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x26793E0 Offset: 0x26793E0 VA: 0x26793E0 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x267947C Offset: 0x267947C VA: 0x267947C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2679DD0 Offset: 0x2679DD0 VA: 0x2679DD0 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x267A1EC Offset: 0x267A1EC VA: 0x267A1EC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x267A860 Offset: 0x267A860 VA: 0x267A860 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R1Curve : AbstractF2mCurve // TypeDefIndex: 5077
{
	// Fields
	private const int SecT163R1_DEFAULT_COORDS = 6;
	protected readonly SecT163R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x267AA1C Offset: 0x267AA1C VA: 0x267AA1C
	public void .ctor() { }

	// RVA: 0x267ABE8 Offset: 0x267ABE8 VA: 0x267ABE8 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x267AC40 Offset: 0x267AC40 VA: 0x267AC40 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x267AC4C Offset: 0x267AC4C VA: 0x267AC4C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x267AC54 Offset: 0x267AC54 VA: 0x267AC54 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x267AC5C Offset: 0x267AC5C VA: 0x267AC5C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x267ACBC Offset: 0x267ACBC VA: 0x267ACBC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x267AE1C Offset: 0x267AE1C VA: 0x267AE1C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x267AEBC Offset: 0x267AEBC VA: 0x267AEBC Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x267AEC4 Offset: 0x267AEC4 VA: 0x267AEC4 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x267AECC Offset: 0x267AECC VA: 0x267AECC Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x267AED4 Offset: 0x267AED4 VA: 0x267AED4 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x267AEDC Offset: 0x267AEDC VA: 0x267AEDC Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x267AEE4 Offset: 0x267AEE4 VA: 0x267AEE4 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R1Point : AbstractF2mPoint // TypeDefIndex: 5078
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x267ABE0 Offset: 0x267ABE0 VA: 0x267ABE0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x267AD44 Offset: 0x267AD44 VA: 0x267AD44
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x267AEB0 Offset: 0x267AEB0 VA: 0x267AEB0
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x267AEEC Offset: 0x267AEEC VA: 0x267AEEC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x267AF8C Offset: 0x267AF8C VA: 0x267AF8C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x267B0CC Offset: 0x267B0CC VA: 0x267B0CC Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x267B168 Offset: 0x267B168 VA: 0x267B168 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x267BB04 Offset: 0x267BB04 VA: 0x267BB04 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x267BF4C Offset: 0x267BF4C VA: 0x267BF4C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x267C62C Offset: 0x267C62C VA: 0x267C62C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R2Curve : AbstractF2mCurve // TypeDefIndex: 5079
{
	// Fields
	private const int SecT163R2_DEFAULT_COORDS = 6;
	protected readonly SecT163R2Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x267C7E8 Offset: 0x267C7E8 VA: 0x267C7E8
	public void .ctor() { }

	// RVA: 0x267C984 Offset: 0x267C984 VA: 0x267C984 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x267C9DC Offset: 0x267C9DC VA: 0x267C9DC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x267C9E8 Offset: 0x267C9E8 VA: 0x267C9E8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x267C9F0 Offset: 0x267C9F0 VA: 0x267C9F0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x267C9F8 Offset: 0x267C9F8 VA: 0x267C9F8 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x267CA58 Offset: 0x267CA58 VA: 0x267CA58 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x267CBB8 Offset: 0x267CBB8 VA: 0x267CBB8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x267CC58 Offset: 0x267CC58 VA: 0x267CC58 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x267CC60 Offset: 0x267CC60 VA: 0x267CC60 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x267CC68 Offset: 0x267CC68 VA: 0x267CC68 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x267CC70 Offset: 0x267CC70 VA: 0x267CC70 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x267CC78 Offset: 0x267CC78 VA: 0x267CC78 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x267CC80 Offset: 0x267CC80 VA: 0x267CC80 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R2Point : AbstractF2mPoint // TypeDefIndex: 5080
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

