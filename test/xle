	// RVA: 0x277897C Offset: 0x277897C VA: 0x277897C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2778A1C Offset: 0x2778A1C VA: 0x2778A1C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2778B5C Offset: 0x2778B5C VA: 0x2778B5C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2778BF8 Offset: 0x2778BF8 VA: 0x2778BF8 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2779594 Offset: 0x2779594 VA: 0x2779594 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x27799DC Offset: 0x27799DC VA: 0x27799DC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x277A0BC Offset: 0x277A0BC VA: 0x277A0BC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131Field // TypeDefIndex: 5067
{
	// Fields
	private const ulong M03 = 7;
	private const ulong M44 = 17592186044415;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x277A278 Offset: 0x277A278 VA: 0x277A278
	public void .ctor() { }

	// RVA: 0x277A280 Offset: 0x277A280 VA: 0x277A280
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x277A3F4 Offset: 0x277A3F4 VA: 0x277A3F4
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x277A630 Offset: 0x277A630 VA: 0x277A630
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x277A728 Offset: 0x277A728 VA: 0x277A728
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x277A8B4 Offset: 0x277A8B4 VA: 0x277A8B4
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x277AB18 Offset: 0x277AB18 VA: 0x277AB18
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x277B504 Offset: 0x277B504 VA: 0x277B504
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x277B318 Offset: 0x277B318 VA: 0x277B318
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x277A7AC Offset: 0x277A7AC VA: 0x277A7AC
	public static void Reduce61(ulong[] z, int zOff) { }

	// RVA: 0x277B5A0 Offset: 0x277B5A0 VA: 0x277B5A0
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x277AA84 Offset: 0x277AA84 VA: 0x277AA84
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x277B858 Offset: 0x277B858 VA: 0x277B858
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x277ABB0 Offset: 0x277ABB0 VA: 0x277ABB0
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x277B8F0 Offset: 0x277B8F0 VA: 0x277B8F0
	public static uint Trace(ulong[] x) { }

	// RVA: 0x277B988 Offset: 0x277B988 VA: 0x277B988
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x277AC9C Offset: 0x277AC9C VA: 0x277AC9C
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x277BB64 Offset: 0x277BB64 VA: 0x277BB64
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x277B778 Offset: 0x277B778 VA: 0x277B778
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x277BF7C Offset: 0x277BF7C VA: 0x277BF7C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131FieldElement : ECFieldElement // TypeDefIndex: 5068
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x277BFF8 Offset: 0x277BFF8 VA: 0x277BFF8
	public void .ctor(BigInteger x) { }

	// RVA: 0x277C0F4 Offset: 0x277C0F4 VA: 0x277C0F4
	public void .ctor() { }

	// RVA: 0x277C124 Offset: 0x277C124 VA: 0x277C124
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x277C150 Offset: 0x277C150 VA: 0x277C150 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x277C15C Offset: 0x277C15C VA: 0x277C15C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x277C168 Offset: 0x277C168 VA: 0x277C168 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x277C1B0 Offset: 0x277C1B0 VA: 0x277C1B0 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x277C1BC Offset: 0x277C1BC VA: 0x277C1BC Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x277C204 Offset: 0x277C204 VA: 0x277C204 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x277C20C Offset: 0x277C20C VA: 0x277C20C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x277C3B0 Offset: 0x277C3B0 VA: 0x277C3B0 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x277C454 Offset: 0x277C454 VA: 0x277C454 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x277C460 Offset: 0x277C460 VA: 0x277C460 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x277C604 Offset: 0x277C604 VA: 0x277C604 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277C614 Offset: 0x277C614 VA: 0x277C614 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277C9A8 Offset: 0x277C9A8 VA: 0x277C9A8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x277C9F8 Offset: 0x277C9F8 VA: 0x277C9F8 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x277C9FC Offset: 0x277C9FC VA: 0x277C9FC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x277CAA0 Offset: 0x277CAA0 VA: 0x277CAA0 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277CAB0 Offset: 0x277CAB0 VA: 0x277CAB0 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277CD5C Offset: 0x277CD5C VA: 0x277CD5C Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x277CE18 Offset: 0x277CE18 VA: 0x277CE18 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x277CEBC Offset: 0x277CEBC VA: 0x277CEBC Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x277CF60 Offset: 0x277CF60 VA: 0x277CF60 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x277CF68 Offset: 0x277CF68 VA: 0x277CF68 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x277CF70 Offset: 0x277CF70 VA: 0x277CF70 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x277CF78 Offset: 0x277CF78 VA: 0x277CF78 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x277CF80 Offset: 0x277CF80 VA: 0x277CF80 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x277CF88 Offset: 0x277CF88 VA: 0x277CF88 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x277D024 Offset: 0x277D024 VA: 0x277D024 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x277D0C0 Offset: 0x277D0C0 VA: 0x277D0C0 Slot: 32
	public virtual bool Equals(SecT131FieldElement other) { }

	// RVA: 0x277D0EC Offset: 0x277D0EC VA: 0x277D0EC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R1Curve : AbstractF2mCurve // TypeDefIndex: 5069
{
	// Fields
	private const int SecT131R1_DEFAULT_COORDS = 6;
	protected readonly SecT131R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x277D11C Offset: 0x277D11C VA: 0x277D11C
	public void .ctor() { }

	// RVA: 0x277D2E8 Offset: 0x277D2E8 VA: 0x277D2E8 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x277D340 Offset: 0x277D340 VA: 0x277D340 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x277D34C Offset: 0x277D34C VA: 0x277D34C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x277D354 Offset: 0x277D354 VA: 0x277D354 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x277D35C Offset: 0x277D35C VA: 0x277D35C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x277D3BC Offset: 0x277D3BC VA: 0x277D3BC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x277D51C Offset: 0x277D51C VA: 0x277D51C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x277D5BC Offset: 0x277D5BC VA: 0x277D5BC Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x277D5C4 Offset: 0x277D5C4 VA: 0x277D5C4 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x277D5CC Offset: 0x277D5CC VA: 0x277D5CC Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x277D5D4 Offset: 0x277D5D4 VA: 0x277D5D4 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x277D5DC Offset: 0x277D5DC VA: 0x277D5DC Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x277D5E4 Offset: 0x277D5E4 VA: 0x277D5E4 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R1Point : AbstractF2mPoint // TypeDefIndex: 5070
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x277D2E0 Offset: 0x277D2E0 VA: 0x277D2E0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277D444 Offset: 0x277D444 VA: 0x277D444
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x277D5B0 Offset: 0x277D5B0 VA: 0x277D5B0
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x277D5EC Offset: 0x277D5EC VA: 0x277D5EC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x277D68C Offset: 0x277D68C VA: 0x277D68C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x277D7CC Offset: 0x277D7CC VA: 0x277D7CC Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x277D868 Offset: 0x277D868 VA: 0x277D868 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x277E204 Offset: 0x277E204 VA: 0x277E204 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x277E64C Offset: 0x277E64C VA: 0x277E64C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x277ED2C Offset: 0x277ED2C VA: 0x277ED2C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R2Curve : AbstractF2mCurve // TypeDefIndex: 5071
{
	// Fields
	private const int SecT131R2_DEFAULT_COORDS = 6;
	protected readonly SecT131R2Point m_infinity; // 0x58

	// Properties
	public override int FieldSize { get; }
	public override ECPoint Infinity { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x277EEE8 Offset: 0x277EEE8 VA: 0x277EEE8
	public void .ctor() { }

	// RVA: 0x277F0B4 Offset: 0x277F0B4 VA: 0x277F0B4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x277F10C Offset: 0x277F10C VA: 0x277F10C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x277F118 Offset: 0x277F118 VA: 0x277F118 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x277F120 Offset: 0x277F120 VA: 0x277F120 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x277F180 Offset: 0x277F180 VA: 0x277F180 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x277F2E0 Offset: 0x277F2E0 VA: 0x277F2E0 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x277F380 Offset: 0x277F380 VA: 0x277F380 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x277F388 Offset: 0x277F388 VA: 0x277F388 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x277F390 Offset: 0x277F390 VA: 0x277F390 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x277F398 Offset: 0x277F398 VA: 0x277F398 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x277F3A0 Offset: 0x277F3A0 VA: 0x277F3A0 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x277F3A8 Offset: 0x277F3A8 VA: 0x277F3A8 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x277F3B0 Offset: 0x277F3B0 VA: 0x277F3B0 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT131R2Point : AbstractF2mPoint // TypeDefIndex: 5072
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x277F0AC Offset: 0x277F0AC VA: 0x277F0AC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x277F208 Offset: 0x277F208 VA: 0x277F208
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x277F374 Offset: 0x277F374 VA: 0x277F374
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x277F3B8 Offset: 0x277F3B8 VA: 0x277F3B8 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x277F458 Offset: 0x277F458 VA: 0x277F458 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x277F598 Offset: 0x277F598 VA: 0x277F598 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x277F634 Offset: 0x277F634 VA: 0x277F634 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x277FFD0 Offset: 0x277FFD0 VA: 0x277FFD0 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2780418 Offset: 0x2780418 VA: 0x2780418 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2780AF8 Offset: 0x2780AF8 VA: 0x2780AF8 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163Field // TypeDefIndex: 5073
{
	// Fields
	private const ulong M35 = 34359738367;
	private const ulong M55 = 36028797018963967;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x2780CB4 Offset: 0x2780CB4 VA: 0x2780CB4
	public void .ctor() { }

	// RVA: 0x2780CBC Offset: 0x2780CBC VA: 0x2780CBC
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2780E30 Offset: 0x2780E30 VA: 0x2780E30
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x27810D0 Offset: 0x27810D0 VA: 0x27810D0
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x27811C8 Offset: 0x27811C8 VA: 0x27811C8
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2781314 Offset: 0x2781314 VA: 0x2781314
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x2781684 Offset: 0x2781684 VA: 0x2781684
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2781F84 Offset: 0x2781F84 VA: 0x2781F84
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2781D90 Offset: 0x2781D90 VA: 0x2781D90
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x278124C Offset: 0x278124C VA: 0x278124C
	public static void Reduce29(ulong[] z, int zOff) { }

	// RVA: 0x2782020 Offset: 0x2782020 VA: 0x2782020
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x278150C Offset: 0x278150C VA: 0x278150C
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x2782310 Offset: 0x2782310 VA: 0x2782310
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x278159C Offset: 0x278159C VA: 0x278159C
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x27823A4 Offset: 0x27823A4 VA: 0x27823A4
	public static uint Trace(ulong[] x) { }

	// RVA: 0x278240C Offset: 0x278240C VA: 0x278240C
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x278171C Offset: 0x278171C VA: 0x278171C
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x27825E8 Offset: 0x27825E8 VA: 0x27825E8
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x27821F8 Offset: 0x27821F8 VA: 0x27821F8
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x278297C Offset: 0x278297C VA: 0x278297C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163FieldElement : ECFieldElement // TypeDefIndex: 5074
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x27829F8 Offset: 0x27829F8 VA: 0x27829F8
	public void .ctor(BigInteger x) { }

	// RVA: 0x2782AF4 Offset: 0x2782AF4 VA: 0x2782AF4
	public void .ctor() { }

	// RVA: 0x2782B24 Offset: 0x2782B24 VA: 0x2782B24
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2782B50 Offset: 0x2782B50 VA: 0x2782B50 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2782B5C Offset: 0x2782B5C VA: 0x2782B5C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2782B68 Offset: 0x2782B68 VA: 0x2782B68 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2782BB0 Offset: 0x2782BB0 VA: 0x2782BB0 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2782BBC Offset: 0x2782BBC VA: 0x2782BBC Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x2782C04 Offset: 0x2782C04 VA: 0x2782C04 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x2782C0C Offset: 0x2782C0C VA: 0x2782C0C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2782DB0 Offset: 0x2782DB0 VA: 0x2782DB0 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x2782E54 Offset: 0x2782E54 VA: 0x2782E54 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2782E60 Offset: 0x2782E60 VA: 0x2782E60 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x2783004 Offset: 0x2783004 VA: 0x2783004 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2783014 Offset: 0x2783014 VA: 0x2783014 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27833A4 Offset: 0x27833A4 VA: 0x27833A4 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x27833F4 Offset: 0x27833F4 VA: 0x27833F4 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x27833F8 Offset: 0x27833F8 VA: 0x27833F8 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x278349C Offset: 0x278349C VA: 0x278349C Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27834AC Offset: 0x27834AC VA: 0x27834AC Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2783754 Offset: 0x2783754 VA: 0x2783754 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2783810 Offset: 0x2783810 VA: 0x2783810 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x27838B4 Offset: 0x27838B4 VA: 0x27838B4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2783958 Offset: 0x2783958 VA: 0x2783958 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2783960 Offset: 0x2783960 VA: 0x2783960 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x2783968 Offset: 0x2783968 VA: 0x2783968 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2783970 Offset: 0x2783970 VA: 0x2783970 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x2783978 Offset: 0x2783978 VA: 0x2783978 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2783980 Offset: 0x2783980 VA: 0x2783980 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2783A1C Offset: 0x2783A1C VA: 0x2783A1C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2783AB8 Offset: 0x2783AB8 VA: 0x2783AB8 Slot: 32
	public virtual bool Equals(SecT163FieldElement other) { }

	// RVA: 0x2783AE4 Offset: 0x2783AE4 VA: 0x2783AE4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163K1Curve : AbstractF2mCurve // TypeDefIndex: 5075
{
	// Fields
	private const int SecT163K1_DEFAULT_COORDS = 6;
	protected readonly SecT163K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2783B14 Offset: 0x2783B14 VA: 0x2783B14
	public void .ctor() { }

	// RVA: 0x2783C60 Offset: 0x2783C60 VA: 0x2783C60 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2783CB8 Offset: 0x2783CB8 VA: 0x2783CB8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2783CC4 Offset: 0x2783CC4 VA: 0x2783CC4 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2783D20 Offset: 0x2783D20 VA: 0x2783D20 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2783D28 Offset: 0x2783D28 VA: 0x2783D28 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2783D30 Offset: 0x2783D30 VA: 0x2783D30 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2783D90 Offset: 0x2783D90 VA: 0x2783D90 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2783EF0 Offset: 0x2783EF0 VA: 0x2783EF0 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2783F90 Offset: 0x2783F90 VA: 0x2783F90 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2783F98 Offset: 0x2783F98 VA: 0x2783F98 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2783FA0 Offset: 0x2783FA0 VA: 0x2783FA0 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2783FA8 Offset: 0x2783FA8 VA: 0x2783FA8 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2783FB0 Offset: 0x2783FB0 VA: 0x2783FB0 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2783FB8 Offset: 0x2783FB8 VA: 0x2783FB8 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163K1Point : AbstractF2mPoint // TypeDefIndex: 5076
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2783C58 Offset: 0x2783C58 VA: 0x2783C58
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2783E18 Offset: 0x2783E18 VA: 0x2783E18
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2783F84 Offset: 0x2783F84 VA: 0x2783F84
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2783FC0 Offset: 0x2783FC0 VA: 0x2783FC0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2784060 Offset: 0x2784060 VA: 0x2784060 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x27841A0 Offset: 0x27841A0 VA: 0x27841A0 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x278423C Offset: 0x278423C VA: 0x278423C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2784B90 Offset: 0x2784B90 VA: 0x2784B90 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2784FAC Offset: 0x2784FAC VA: 0x2784FAC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2785620 Offset: 0x2785620 VA: 0x2785620 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R1Curve : AbstractF2mCurve // TypeDefIndex: 5077
{
	// Fields
	private const int SecT163R1_DEFAULT_COORDS = 6;
	protected readonly SecT163R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x27857DC Offset: 0x27857DC VA: 0x27857DC
	public void .ctor() { }

	// RVA: 0x27859A8 Offset: 0x27859A8 VA: 0x27859A8 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2785A00 Offset: 0x2785A00 VA: 0x2785A00 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2785A0C Offset: 0x2785A0C VA: 0x2785A0C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2785A14 Offset: 0x2785A14 VA: 0x2785A14 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2785A1C Offset: 0x2785A1C VA: 0x2785A1C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2785A7C Offset: 0x2785A7C VA: 0x2785A7C Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2785BDC Offset: 0x2785BDC VA: 0x2785BDC Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2785C7C Offset: 0x2785C7C VA: 0x2785C7C Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2785C84 Offset: 0x2785C84 VA: 0x2785C84 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2785C8C Offset: 0x2785C8C VA: 0x2785C8C Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2785C94 Offset: 0x2785C94 VA: 0x2785C94 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2785C9C Offset: 0x2785C9C VA: 0x2785C9C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2785CA4 Offset: 0x2785CA4 VA: 0x2785CA4 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R1Point : AbstractF2mPoint // TypeDefIndex: 5078
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x27859A0 Offset: 0x27859A0 VA: 0x27859A0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2785B04 Offset: 0x2785B04 VA: 0x2785B04
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2785C70 Offset: 0x2785C70 VA: 0x2785C70
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2785CAC Offset: 0x2785CAC VA: 0x2785CAC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2785D4C Offset: 0x2785D4C VA: 0x2785D4C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2785E8C Offset: 0x2785E8C VA: 0x2785E8C Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2785F28 Offset: 0x2785F28 VA: 0x2785F28 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x27868C4 Offset: 0x27868C4 VA: 0x27868C4 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2786D0C Offset: 0x2786D0C VA: 0x2786D0C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x27873EC Offset: 0x27873EC VA: 0x27873EC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R2Curve : AbstractF2mCurve // TypeDefIndex: 5079
{
	// Fields
	private const int SecT163R2_DEFAULT_COORDS = 6;
	protected readonly SecT163R2Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x27875A8 Offset: 0x27875A8 VA: 0x27875A8
	public void .ctor() { }

	// RVA: 0x2787744 Offset: 0x2787744 VA: 0x2787744 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x278779C Offset: 0x278779C VA: 0x278779C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x27877A8 Offset: 0x27877A8 VA: 0x27877A8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x27877B0 Offset: 0x27877B0 VA: 0x27877B0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x27877B8 Offset: 0x27877B8 VA: 0x27877B8 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2787818 Offset: 0x2787818 VA: 0x2787818 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2787978 Offset: 0x2787978 VA: 0x2787978 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2787A18 Offset: 0x2787A18 VA: 0x2787A18 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2787A20 Offset: 0x2787A20 VA: 0x2787A20 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2787A28 Offset: 0x2787A28 VA: 0x2787A28 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2787A30 Offset: 0x2787A30 VA: 0x2787A30 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2787A38 Offset: 0x2787A38 VA: 0x2787A38 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2787A40 Offset: 0x2787A40 VA: 0x2787A40 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT163R2Point : AbstractF2mPoint // TypeDefIndex: 5080
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x278773C Offset: 0x278773C VA: 0x278773C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27878A0 Offset: 0x27878A0 VA: 0x27878A0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2787A0C Offset: 0x2787A0C VA: 0x2787A0C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2787A48 Offset: 0x2787A48 VA: 0x2787A48 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2787AE8 Offset: 0x2787AE8 VA: 0x2787AE8 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2787C28 Offset: 0x2787C28 VA: 0x2787C28 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2787CC4 Offset: 0x2787CC4 VA: 0x2787CC4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2788658 Offset: 0x2788658 VA: 0x2788658 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2788A68 Offset: 0x2788A68 VA: 0x2788A68 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x27890FC Offset: 0x27890FC VA: 0x27890FC Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193Field // TypeDefIndex: 5081
{
	// Fields
	private const ulong M01 = 1;
	private const ulong M49 = 562949953421311;

	// Methods

	// RVA: 0x27892B8 Offset: 0x27892B8 VA: 0x27892B8
	public void .ctor() { }

	// RVA: 0x27892C0 Offset: 0x27892C0 VA: 0x27892C0
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2789498 Offset: 0x2789498 VA: 0x2789498
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x278979C Offset: 0x278979C VA: 0x278979C
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x27898D4 Offset: 0x27898D4 VA: 0x27898D4
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2789A00 Offset: 0x2789A00 VA: 0x2789A00
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x2789C7C Offset: 0x2789C7C VA: 0x2789C7C
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x278A570 Offset: 0x278A570 VA: 0x278A570
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x278A354 Offset: 0x278A354 VA: 0x278A354
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x2789904 Offset: 0x2789904 VA: 0x2789904
	public static void Reduce63(ulong[] z, int zOff) { }

	// RVA: 0x278A5C4 Offset: 0x278A5C4 VA: 0x278A5C4
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x2789BB4 Offset: 0x2789BB4 VA: 0x2789BB4
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x278A874 Offset: 0x278A874 VA: 0x278A874
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x2789BFC Offset: 0x2789BFC VA: 0x2789BFC
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x278A8C0 Offset: 0x278A8C0 VA: 0x278A8C0
	public static uint Trace(ulong[] x) { }

	// RVA: 0x278A904 Offset: 0x278A904 VA: 0x278A904
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x278AB78 Offset: 0x278AB78 VA: 0x278AB78
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x2789CCC Offset: 0x2789CCC VA: 0x2789CCC
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x278ACCC Offset: 0x278ACCC VA: 0x278ACCC
	protected static void ImplMulwAcc(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x278A770 Offset: 0x278A770 VA: 0x278A770
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT193FieldElement : ECFieldElement // TypeDefIndex: 5082
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x278B150 Offset: 0x278B150 VA: 0x278B150
	public void .ctor(BigInteger x) { }
