	[DebuggerHiddenAttribute] // RVA: 0xCDB8B0 Offset: 0xCDB8B0 VA: 0xCDB8B0
	// RVA: 0x199D630 Offset: 0x199D630 VA: 0x199D630
	public void .ctor() { }

	// RVA: 0x19A421C Offset: 0x19A421C VA: 0x19A421C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB8C0 Offset: 0xCDB8C0 VA: 0xCDB8C0
	// RVA: 0x19A4300 Offset: 0x19A4300 VA: 0x19A4300 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB8D0 Offset: 0xCDB8D0 VA: 0xCDB8D0
	// RVA: 0x19A4308 Offset: 0x19A4308 VA: 0x19A4308 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB8E0 Offset: 0xCDB8E0 VA: 0xCDB8E0
	// RVA: 0x19A4310 Offset: 0x19A4310 VA: 0x19A4310 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB8F0 Offset: 0xCDB8F0 VA: 0xCDB8F0
	// RVA: 0x19A4324 Offset: 0x19A4324 VA: 0x19A4324 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44394 Offset: 0xC44394 VA: 0xC44394
private sealed class BattleActorControl.<collChangeAppearance>c__Iterator5 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9249
{
	// Fields
	internal List<int> <moveEffect>__0; // 0x10
	internal BattleActorControl $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB900 Offset: 0xCDB900 VA: 0xCDB900
	// RVA: 0x199D6FC Offset: 0x199D6FC VA: 0x199D6FC
	public void .ctor() { }

	// RVA: 0x19A291C Offset: 0x19A291C VA: 0x19A291C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB910 Offset: 0xCDB910 VA: 0xCDB910
	// RVA: 0x19A2E2C Offset: 0x19A2E2C VA: 0x19A2E2C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB920 Offset: 0xCDB920 VA: 0xCDB920
	// RVA: 0x19A2E34 Offset: 0x19A2E34 VA: 0x19A2E34 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB930 Offset: 0xCDB930 VA: 0xCDB930
	// RVA: 0x19A2E3C Offset: 0x19A2E3C VA: 0x19A2E3C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB940 Offset: 0xCDB940 VA: 0xCDB940
	// RVA: 0x19A2E50 Offset: 0x19A2E50 VA: 0x19A2E50 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC443A4 Offset: 0xC443A4 VA: 0xC443A4
private sealed class BattleActorControl.<coAddAura>c__Iterator6 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9250
{
	// Fields
	internal int auraEffectId; // 0x10
	internal EffectMaster <effectMaster>__1; // 0x18
	internal EffectEntity <effectEntity>__1; // 0x20
	internal string <effectPath>__2; // 0x28
	internal BattleEffectUtility.BuffEffectLoadArgument <buffLoadArg>__1; // 0x30
	internal GameObject <obj>__1; // 0x38
	internal int priority; // 0x40
	internal BattleActorControl $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB950 Offset: 0xCDB950 VA: 0xCDB950
	// RVA: 0x199DCFC Offset: 0x199DCFC VA: 0x199DCFC
	public void .ctor() { }

	// RVA: 0x19A1738 Offset: 0x19A1738 VA: 0x19A1738 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB960 Offset: 0xCDB960 VA: 0xCDB960
	// RVA: 0x19A1E68 Offset: 0x19A1E68 VA: 0x19A1E68 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB970 Offset: 0xCDB970 VA: 0xCDB970
	// RVA: 0x19A1E70 Offset: 0x19A1E70 VA: 0x19A1E70 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB980 Offset: 0xCDB980 VA: 0xCDB980
	// RVA: 0x19A1E78 Offset: 0x19A1E78 VA: 0x19A1E78 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB990 Offset: 0xCDB990 VA: 0xCDB990
	// RVA: 0x19A1E8C Offset: 0x19A1E8C VA: 0x19A1E8C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC443B4 Offset: 0xC443B4 VA: 0xC443B4
private sealed class BattleActorControl.<DestroyAuraEffect>c__Iterator7 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9251
{
	// Fields
	internal GameObject effectObject; // 0x10
	internal ParticleSystem[] <particleArray>__0; // 0x18
	internal int <aliveCount>__0; // 0x20
	internal ParticleSystem[] $locvar0; // 0x28
	internal int $locvar1; // 0x30
	internal Renderer[] <rendererArray>__0; // 0x38
	internal Renderer[] $locvar2; // 0x40
	internal int $locvar3; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB9A0 Offset: 0xCDB9A0 VA: 0xCDB9A0
	// RVA: 0x199DD84 Offset: 0x199DD84 VA: 0x199DD84
	public void .ctor() { }

	// RVA: 0x19A062C Offset: 0x19A062C VA: 0x19A062C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB9B0 Offset: 0xCDB9B0 VA: 0xCDB9B0
	// RVA: 0x19A0954 Offset: 0x19A0954 VA: 0x19A0954 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB9C0 Offset: 0xCDB9C0 VA: 0xCDB9C0
	// RVA: 0x19A095C Offset: 0x19A095C VA: 0x19A095C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB9D0 Offset: 0xCDB9D0 VA: 0xCDB9D0
	// RVA: 0x19A0964 Offset: 0x19A0964 VA: 0x19A0964 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB9E0 Offset: 0xCDB9E0 VA: 0xCDB9E0
	// RVA: 0x19A0978 Offset: 0x19A0978 VA: 0x19A0978 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC443C4 Offset: 0xC443C4 VA: 0xC443C4
private sealed class BattleActorControl.<colShiftServant>c__Iterator8 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9252
{
	// Fields
	internal BattleActionData.ShiftServant shiftSvt; // 0x10
	internal bool isShift; // 0x18
	internal BattleActorControl $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDB9F0 Offset: 0xCDB9F0 VA: 0xCDB9F0
	// RVA: 0x199DEE0 Offset: 0x199DEE0 VA: 0x199DEE0
	public void .ctor() { }

	// RVA: 0x19A1EF4 Offset: 0x19A1EF4 VA: 0x19A1EF4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA00 Offset: 0xCDBA00 VA: 0xCDBA00
	// RVA: 0x19A203C Offset: 0x19A203C VA: 0x19A203C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA10 Offset: 0xCDBA10 VA: 0xCDBA10
	// RVA: 0x19A2044 Offset: 0x19A2044 VA: 0x19A2044 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA20 Offset: 0xCDBA20 VA: 0xCDBA20
	// RVA: 0x19A204C Offset: 0x19A204C VA: 0x19A204C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA30 Offset: 0xCDBA30 VA: 0xCDBA30
	// RVA: 0x19A2060 Offset: 0x19A2060 VA: 0x19A2060 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC443D4 Offset: 0xC443D4 VA: 0xC443D4
private sealed class BattleActorControl.<colShiftServantChange>c__Iterator9 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9253
{
	// Fields
	internal BattleActionData.ShiftServant shiftSvt; // 0x10
	internal NGUIFader <fadeComp>__1; // 0x18
	internal bool isShift; // 0x20
	internal List<int> <moveEffect>__1; // 0x28
	internal BattleActorControl $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBA40 Offset: 0xCDBA40 VA: 0xCDBA40
	// RVA: 0x199DF9C Offset: 0x199DF9C VA: 0x199DF9C
	public void .ctor() { }

	// RVA: 0x19A20C8 Offset: 0x19A20C8 VA: 0x19A20C8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA50 Offset: 0xCDBA50 VA: 0xCDBA50
	// RVA: 0x19A2890 Offset: 0x19A2890 VA: 0x19A2890 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA60 Offset: 0xCDBA60 VA: 0xCDBA60
	// RVA: 0x19A2898 Offset: 0x19A2898 VA: 0x19A2898 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA70 Offset: 0xCDBA70 VA: 0xCDBA70
	// RVA: 0x19A28A0 Offset: 0x19A28A0 VA: 0x19A28A0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBA80 Offset: 0xCDBA80 VA: 0xCDBA80
	// RVA: 0x19A28B4 Offset: 0x19A28B4 VA: 0x19A28B4 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC443E4 Offset: 0xC443E4 VA: 0xC443E4
private sealed class BattleActorControl.<DestroyEffectOnParticleStop>c__IteratorA : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9254
{
	// Fields
	internal int key; // 0x10
	internal ParticleSystem[] <particleArray>__0; // 0x18
	internal EffectComponent <effectComponent>__0; // 0x20
	internal int <aliveCount>__1; // 0x28
	internal ParticleSystem[] $locvar0; // 0x30
	internal int $locvar1; // 0x38
	internal BattleActorControl $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBA90 Offset: 0xCDBA90 VA: 0xCDBA90
	// RVA: 0x199F05C Offset: 0x199F05C VA: 0x199F05C
	public void .ctor() { }

	// RVA: 0x19A09E0 Offset: 0x19A09E0 VA: 0x19A09E0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBAA0 Offset: 0xCDBAA0 VA: 0xCDBAA0
	// RVA: 0x19A0CE4 Offset: 0x19A0CE4 VA: 0x19A0CE4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBAB0 Offset: 0xCDBAB0 VA: 0xCDBAB0
	// RVA: 0x19A0CEC Offset: 0x19A0CEC VA: 0x19A0CEC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBAC0 Offset: 0xCDBAC0 VA: 0xCDBAC0
	// RVA: 0x19A0CF4 Offset: 0x19A0CF4 VA: 0x19A0CF4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBAD0 Offset: 0xCDBAD0 VA: 0xCDBAD0
	// RVA: 0x19A0D08 Offset: 0x19A0D08 VA: 0x19A0D08 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleBoostSkillIconComponent : BattleServantSkillIConComponent // TypeDefIndex: 9255
{
	// Fields
	public GameObject flashEffect; // 0xB8

	// Methods

	// RVA: 0x178518C Offset: 0x178518C VA: 0x178518C
	public void .ctor() { }

	// RVA: 0x1785194 Offset: 0x1785194 VA: 0x1785194 Slot: 5
	public override void OnClickIcon() { }

	// RVA: 0x1785258 Offset: 0x1785258 VA: 0x1785258
	public void procFlash() { }
}

// Namespace: 
public class BattleBuffConfWindowComponent : BattleWindowComponent // TypeDefIndex: 9256
{
	// Fields
	public BattleServantBuffIconComponent buffIcon; // 0x48
	public UILabel nameLabel; // 0x50
	public UILabel detailLabel; // 0x58
	private int buffId; // 0x60

	// Methods

	// RVA: 0x17852F0 Offset: 0x17852F0 VA: 0x17852F0
	public void .ctor() { }

	// RVA: 0x1785300 Offset: 0x1785300 VA: 0x1785300
	public void setData(int buffId) { }

	// RVA: 0x178541C Offset: 0x178541C VA: 0x178541C
	public bool checkBuffId(int buffId) { }

	// RVA: 0x178542C Offset: 0x178542C VA: 0x178542C Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1785434 Offset: 0x1785434 VA: 0x1785434 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }
}

// Namespace: 
public class BattleBuffListObjectComponent : MonoBehaviour // TypeDefIndex: 9257
{
	// Fields
	private static readonly int DEFAULT_FONT_SIZE; // 0x0
	public BattleServantBuffIconComponent buffIcon; // 0x18
	public UILabel nameLabel; // 0x20
	public UILabel confLabel; // 0x28
	public UILabel atTurnLabel; // 0x30
	public UILabel atCountLabel; // 0x38

	// Methods

	// RVA: 0x1795E24 Offset: 0x1795E24 VA: 0x1795E24
	public void .ctor() { }

	// RVA: 0x1795E2C Offset: 0x1795E2C VA: 0x1795E2C
	public void setData(BattleBuffData.ShowBuffData buffData) { }

	// RVA: 0x179620C Offset: 0x179620C VA: 0x179620C
	private static void .cctor() { }
}

// Namespace: 
public class BattleButtonComponent : UIButton // TypeDefIndex: 9258
{
	// Properties
	public virtual bool isHide { get; set; }

	// Methods

	// RVA: 0x1796260 Offset: 0x1796260 VA: 0x1796260
	public void .ctor() { }

	// RVA: 0x1796268 Offset: 0x1796268 VA: 0x1796268 Slot: 16
	public virtual bool get_isHide() { }

	// RVA: 0x1796328 Offset: 0x1796328 VA: 0x1796328 Slot: 17
	public virtual void set_isHide(bool value) { }
}

// Namespace: 
public class BattleDefenceTargetHpGaugeComponent : BattleHpGaugeBarComponent // TypeDefIndex: 9259
{
	// Methods

	// RVA: 0x111AFC4 Offset: 0x111AFC4 VA: 0x111AFC4
	public void .ctor() { }

	// RVA: 0x111AFD4 Offset: 0x111AFD4 VA: 0x111AFD4
	public void SetInitDefenceTargetValue(int nowHp, int maxHp) { }

	// RVA: 0x111B23C Offset: 0x111B23C VA: 0x111B23C
	public void UpdateDefenceTargetValue(int nowHp) { }

	// RVA: 0x111B738 Offset: 0x111B738 VA: 0x111B738
	public void UpdateDefenceTargetDamageGauge(float per) { }

	// RVA: 0x111B77C Offset: 0x111B77C VA: 0x111B77C
	public void CompleteDefenceTargetDamageGauge() { }

	// RVA: 0x111B7EC Offset: 0x111B7EC VA: 0x111B7EC
	public void SetHpGauge(int nowHp) { }
}

// Namespace: 
public class BattleHpGaugeBarComponent : MonoBehaviour // TypeDefIndex: 9260
{
	// Fields
	public UIProgressBar frontGauge; // 0x18
	public UISprite frontSprite; // 0x20
	public UIProgressBar damageGauge; // 0x28
	protected long wkprevval; // 0x30
	protected long prevval; // 0x38
	protected long nowval; // 0x40
	protected long maxval; // 0x48

	// Methods

	// RVA: 0x111AFCC Offset: 0x111AFCC VA: 0x111AFCC
	public void .ctor() { }

	// RVA: 0x1130E30 Offset: 0x1130E30 VA: 0x1130E30
	public void setInitValue(int now, int max) { }

	// RVA: 0x1130E68 Offset: 0x1130E68 VA: 0x1130E68
	public void setInitValue(long now, long max) { }

	// RVA: 0x1130E98 Offset: 0x1130E98 VA: 0x1130E98
	public void setZero() { }

	// RVA: 0x1130EC4 Offset: 0x1130EC4 VA: 0x1130EC4
	public bool setValue(int now, int max) { }

	// RVA: 0x1130ED0 Offset: 0x1130ED0 VA: 0x1130ED0
	public bool setValue(long now, long max) { }

	// RVA: 0x111B010 Offset: 0x111B010 VA: 0x111B010
	public void updateNomalGauge(long val) { }

	// RVA: 0x111B164 Offset: 0x111B164 VA: 0x111B164
	public void updateDamageGauge(float par) { }

	// RVA: 0x1131494 Offset: 0x1131494 VA: 0x1131494
	public void completeDamageGauge() { }
}

// Namespace: 
public class BattleInfoMessageComponent : BaseMonoBehaviour // TypeDefIndex: 9261
{
	// Fields
	public UILabel[] textLabel; // 0x18
	public Transform objTarget; // 0x20
	public Transform commandTarget; // 0x28
	private GameObject battleCommand; // 0x30
	public UISprite itemSprite; // 0x38

	// Methods

	// RVA: 0x1132F0C Offset: 0x1132F0C VA: 0x1132F0C
	public void .ctor() { }

	// RVA: 0x1132F14 Offset: 0x1132F14 VA: 0x1132F14
	public void setText(string str) { }

	// RVA: 0x1132F74 Offset: 0x1132F74 VA: 0x1132F74
	public void setText(string str, string str2) { }

	// RVA: 0x11330C8 Offset: 0x11330C8 VA: 0x11330C8
	public void setSkillText(string str, int skillLevel) { }

	// RVA: 0x11331EC Offset: 0x11331EC VA: 0x11331EC
	public Transform getTargetTr() { }

	// RVA: 0x1133294 Offset: 0x1133294 VA: 0x1133294
	public void setCommandObject(GameObject command, BattleServantData svtData) { }

	// RVA: 0x11334EC Offset: 0x11334EC VA: 0x11334EC
	public void setItemSprite(int imageId, bool useSelfAtlas = False) { }
}

// Namespace: 
public class BaseBattleInfoPosData // TypeDefIndex: 9262
{
	// Fields
	protected const float COMMON_SKIP_POS_X = -500;
	protected const float COMMON_OVER_OFFSET_Y = -173;
	[CompilerGeneratedAttribute] // RVA: 0xC66248 Offset: 0xC66248 VA: 0xC66248
	[DebuggerBrowsableAttribute] // RVA: 0xC66248 Offset: 0xC66248 VA: 0xC66248
	private BattlePerformance <Perf>k__BackingField; // 0x10

	// Properties
	public BattlePerformance Perf { get; set; }
	public virtual Vector3 SkillSkipTrLocalPos { get; }
	public virtual float OverTrLocalPosY { get; }

	// Methods

	// RVA: 0xF651E8 Offset: 0xF651E8 VA: 0xF651E8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE4A8 Offset: 0xCCE4A8 VA: 0xCCE4A8
	// RVA: 0xF651F0 Offset: 0xF651F0 VA: 0xF651F0
	private void set_Perf(BattlePerformance value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE4B8 Offset: 0xCCE4B8 VA: 0xCCE4B8
	// RVA: 0xF651F8 Offset: 0xF651F8 VA: 0xF651F8
	public BattlePerformance get_Perf() { }

	// RVA: 0xF65200 Offset: 0xF65200 VA: 0xF65200 Slot: 4
	public virtual Vector3 get_SkillSkipTrLocalPos() { }

	// RVA: 0xF65260 Offset: 0xF65260 VA: 0xF65260 Slot: 5
	public virtual float get_OverTrLocalPosY() { }

	// RVA: 0xF65288 Offset: 0xF65288 VA: 0xF65288 Slot: 6
	public virtual void Init(BattlePerformance perf) { }
}

// Namespace: 
public class PosCountNormalBattleInfoPosData : BaseBattleInfoPosData // TypeDefIndex: 9263
{
	// Fields
	protected readonly Vector3 skipPos; // 0x18

	// Properties
	public override Vector3 SkillSkipTrLocalPos { get; }

	// Methods

	// RVA: 0x12C9B24 Offset: 0x12C9B24 VA: 0x12C9B24
	public void .ctor() { }

	// RVA: 0x12C9B8C Offset: 0x12C9B8C VA: 0x12C9B8C Slot: 4
	public override Vector3 get_SkillSkipTrLocalPos() { }
}

// Namespace: 
public class NormalRaidTypeBossBattleInfoPosData : BaseBattleInfoPosData // TypeDefIndex: 9264
{
	// Fields
	protected readonly Vector3 onlyBossSkipPos; // 0x18
	protected readonly Vector3 existsOtherSkipPos; // 0x24

	// Properties
	public override Vector3 SkillSkipTrLocalPos { get; }

	// Methods

	// RVA: 0x138A568 Offset: 0x138A568 VA: 0x138A568
	public void .ctor() { }

	// RVA: 0x138A610 Offset: 0x138A610 VA: 0x138A610 Slot: 4
	public override Vector3 get_SkillSkipTrLocalPos() { }
}

// Namespace: 
public class PosCountSpBattleInfoPosData : BaseBattleInfoPosData // TypeDefIndex: 9265
{
	// Fields
	protected readonly Vector3 existsFrontRowSkipPos; // 0x18
	protected readonly Vector3 onlyBackRowSkipPos; // 0x24

	// Properties
	public override Vector3 SkillSkipTrLocalPos { get; }

	// Methods

	// RVA: 0x12C9BAC Offset: 0x12C9BAC VA: 0x12C9BAC
	public void .ctor() { }

	// RVA: 0x12C9C54 Offset: 0x12C9C54 VA: 0x12C9C54 Slot: 4
	public override Vector3 get_SkillSkipTrLocalPos() { }
}

// Namespace: 
public class BattleInformationComponent : BaseMonoBehaviour // TypeDefIndex: 9266
{
	// Fields
	private BattlePerformance perf; // 0x18
	private BattleData data; // 0x20
	public GameObject totalLabelPrefab; // 0x28
	public Transform totalMessageRoot; // 0x30
	public GameObject commonLabelPrefab; // 0x38
	public Transform commonMessageRoot; // 0x40
	public GameObject playerAttackInfoPrefab; // 0x48
	public GameObject enemyAttackInfoPrefab; // 0x50
	public GameObject nobleInfoPrefab; // 0x58
	public Transform nobleInfoRoot; // 0x60
	public GameObject skillInfoPrefab; // 0x68
	public GameObject skillInfoEnemyPrefab; // 0x70
	public Transform skillInfoRoot; // 0x78
	public GameObject skillSkipRoot; // 0x80
	public GameObject skillSkipPrefab; // 0x88
	public GameObject skillSkipObj; // 0x90
	private BaseBattleInfoPosData infoPosData; // 0x98
	public GameObject fsOffsetRoot; // 0xA0
	public GameObject overRoot; // 0xA8
	private string[] overLabel; // 0xB0
	private GameObject[] overObjectList; // 0xB8
	private bool[] isAlreadyOverKill; // 0xC0
	private float[] timeStartOverKill; // 0xC8
	private Vector3[] showPositions; // 0xD0
	private List<GameObject> motionMessageObjList; // 0xD8
	protected static readonly string NobleInfoAnimPrefix; // 0x0
	private GameObject commonMessageObject; // 0xE0
	private string[] attackCount; // 0xE8

	// Properties
	public List<GameObject> MotionMessageObjList { get; }
	public GameObject CommonMessageObject { get; }

	// Methods

	// RVA: 0x1133838 Offset: 0x1133838 VA: 0x1133838
	public void .ctor() { }

	// RVA: 0x1133C28 Offset: 0x1133C28 VA: 0x1133C28
	public List<GameObject> get_MotionMessageObjList() { }

	// RVA: 0x1133C30 Offset: 0x1133C30 VA: 0x1133C30
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x1133FFC Offset: 0x1133FFC VA: 0x1133FFC
	public void SwitchPopupFullScreen(bool isFullScreen) { }

	// RVA: 0x113403C Offset: 0x113403C VA: 0x113403C
	public void InitializeEachWave() { }

	// RVA: 0x1134060 Offset: 0x1134060 VA: 0x1134060
	protected BaseBattleInfoPosData MakeBattleInfoPosData() { }

	// RVA: 0x11341A8 Offset: 0x11341A8 VA: 0x11341A8
	public void showTotalDamage(BattleActionData actionData) { }

	// RVA: 0x11343E0 Offset: 0x11343E0 VA: 0x11343E0
	public void showNoblePhantasmInfo(int tresureDeviceId, int treasureDeviceLevel, int treasureDevicePer = 500, bool isHideInfo = False, string[] overrideTd) { }

	// RVA: 0x1134AA4 Offset: 0x1134AA4 VA: 0x1134AA4
	public GameObject showSkillName(bool isPlayer, string message, int skillLevel = 0) { }

	// RVA: 0x1134C0C Offset: 0x1134C0C VA: 0x1134C0C
	public GameObject showBoostSkillName(int imageId, string message) { }

	// RVA: 0x1134DE0 Offset: 0x1134DE0 VA: 0x1134DE0
	public void showSpecialName(BattleActionData actionData) { }

	// RVA: 0x1134FAC Offset: 0x1134FAC VA: 0x1134FAC
	public GameObject get_CommonMessageObject() { }

	// RVA: 0x1134FB4 Offset: 0x1134FB4 VA: 0x1134FB4
	public void showCommonMessage(BattleActionData actionData) { }

	// RVA: 0x11354E0 Offset: 0x11354E0 VA: 0x11354E0
	public void DestroyDisplayingMessage() { }

	// RVA: 0x1135B40 Offset: 0x1135B40 VA: 0x1135B40
	private void showOverMessageBase(BattleActionData actionData, BattleInformationComponent.TYPEOVER inOverType) { }

	// RVA: 0x1136228 Offset: 0x1136228 VA: 0x1136228
	public void showOverKillMessage(BattleActionData actionData) { }

	// RVA: 0x11363A0 Offset: 0x11363A0 VA: 0x11363A0
	public void showOverGaugeMessage(BattleActionData actionData) { }

	// RVA: 0x1136414 Offset: 0x1136414 VA: 0x1136414
	private void hideOverBase(BattleInformationComponent.TYPEOVER type) { }

	// RVA: 0x11362B0 Offset: 0x11362B0 VA: 0x11362B0
	private void shiftOverMessage(BattleInformationComponent.TYPEOVER type, int zureIndex = 0) { }

	// RVA: 0x11367A0 Offset: 0x11367A0 VA: 0x11367A0
	public void hideOverKillMessage() { }

	// RVA: 0x11367A8 Offset: 0x11367A8 VA: 0x11367A8
	public void hideOverGaugeMessage() { }

	// RVA: 0x11367B0 Offset: 0x11367B0 VA: 0x11367B0
	public void showCommonMessage(string message) { }

	// RVA: 0x11367B4 Offset: 0x11367B4 VA: 0x11367B4
	public void ShowActionMessage(BattleActionData actionData) { }

	// RVA: 0x11356A0 Offset: 0x11356A0 VA: 0x11356A0
	public void showMotionMessage(string motionMessage, int actorId) { }

	// RVA: 0x1136824 Offset: 0x1136824 VA: 0x1136824
	public void CreateSkillSkip() { }

	// RVA: 0x1136970 Offset: 0x1136970 VA: 0x1136970
	public void DeleteSkillSkip() { }

	// RVA: 0x1136A1C Offset: 0x1136A1C VA: 0x1136A1C
	private static void .cctor() { }
}

// Namespace: 
private enum BattleInformationComponent.TYPEOVER // TypeDefIndex: 9267
{
	// Fields
	public int value__; // 0x0
	public const BattleInformationComponent.TYPEOVER NONE = -1;
	public const BattleInformationComponent.TYPEOVER KILL = 0;
	public const BattleInformationComponent.TYPEOVER GAUGE = 1;
	public const BattleInformationComponent.TYPEOVER MAX = 2;
}

// Namespace: 
public class BattleItemListWindowComponent : BattleWindowComponent // TypeDefIndex: 9268
{
	// Fields
	[SerializeField] // RVA: 0xC66284 Offset: 0xC66284 VA: 0xC66284
	private PlayMakerFSM masterFsm; // 0x48
	[SerializeField] // RVA: 0xC66294 Offset: 0xC66294 VA: 0xC66294
	private BattleViewItemlistComponent itemList; // 0x50
	[SerializeField] // RVA: 0xC662A4 Offset: 0xC662A4 VA: 0xC662A4
	private int itemColumnCount; // 0x58
	private BattleData battleData; // 0x60
	private bool isFromBattleMenu; // 0x68
	private string closeFsmEvent; // 0x70

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1215970 Offset: 0x1215970 VA: 0x1215970
	public void .ctor() { }

	// RVA: 0x1215980 Offset: 0x1215980 VA: 0x1215980
	public void SetBattleData(BattleData data) { }

	// RVA: 0x1215988 Offset: 0x1215988 VA: 0x1215988
	public void Open(bool fromBattleMenu, BattleWindowComponent.EndCall call) { }

	// RVA: 0x1215A94 Offset: 0x1215A94 VA: 0x1215A94 Slot: 11
	public override void CompOpen() { }

	// RVA: 0x1215AD4 Offset: 0x1215AD4 VA: 0x1215AD4
	private void CloseWindow() { }

	// RVA: 0x1215B74 Offset: 0x1215B74 VA: 0x1215B74 Slot: 13
	public override void CompClose() { }

	// RVA: 0x1215BE0 Offset: 0x1215BE0 VA: 0x1215BE0
	private void OnItemClick(BattleDropItem dropItem) { }

	// RVA: 0x1215BE4 Offset: 0x1215BE4 VA: 0x1215BE4 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleMasterSkillWindowComponent : BattleWindowComponent // TypeDefIndex: 9269
{
	// Methods

	// RVA: 0xFBF1FC Offset: 0xFBF1FC VA: 0xFBF1FC
	public void .ctor() { }

	// RVA: 0xFBF204 Offset: 0xFBF204 VA: 0xFBF204
	public void setInitData(BattleWindowComponent.ACTIONTYPE type, float time = 0.15, bool ocflg = False) { }
}

// Namespace: 
public class BattleMenuWindowComponent : BattleWindowComponent // TypeDefIndex: 9270
{
	// Fields
	public PlayMakerFSM myFsm; // 0x48
	public BattleData data; // 0x50
	public GameObject reserveitemlist_object; // 0x58
	public BattleRetireWindowComponent checkRetireWindow; // 0x60
	public GameObject RetireButton; // 0x68
	public UISprite classChartSp; // 0x70
	public BattleItemListWindowComponent itemListWindow; // 0x78
	public BattleWindowComponent setVolumeWindow; // 0x80
	public SetVolumeControl setVolumeControl; // 0x88
	public GameObject setVolumeWindowMask; // 0x90
	public UISprite itemListBtnSpr; // 0x98

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0xFBF258 Offset: 0xFBF258 VA: 0xFBF258
	public void .ctor() { }

	// RVA: 0xFBF260 Offset: 0xFBF260 VA: 0xFBF260
	public void Init() { }

	// RVA: 0xFBF2D8 Offset: 0xFBF2D8 VA: 0xFBF2D8
	public void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0xFBF398 Offset: 0xFBF398 VA: 0xFBF398
	public void OpenImpl(BattleWindowComponent.EndCall call) { }

	// RVA: 0xFBF854 Offset: 0xFBF854 VA: 0xFBF854
	public void CompOpen() { }

	// RVA: 0xFBF85C Offset: 0xFBF85C VA: 0xFBF85C
	public void showConf(BattleDropItem drop) { }

	// RVA: 0xFBF860 Offset: 0xFBF860 VA: 0xFBF860
	public void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0xFBF868 Offset: 0xFBF868 VA: 0xFBF868
	public void CompClose() { }

	// RVA: 0xFBF304 Offset: 0xFBF304 VA: 0xFBF304
	public void modeCkRetire() { }

	// RVA: 0xFBF870 Offset: 0xFBF870 VA: 0xFBF870
	public void endCloseCkRetire() { }

	// RVA: 0xFBF8D4 Offset: 0xFBF8D4 VA: 0xFBF8D4
	public void modeRetire() { }

	// RVA: 0xFBFA08 Offset: 0xFBFA08 VA: 0xFBFA08
	public void endOpenCkRetire() { }

	// RVA: 0xFBFA6C Offset: 0xFBFA6C VA: 0xFBFA6C
	public void modeItemListWindow() { }

	// RVA: 0xFBFBCC Offset: 0xFBFBCC VA: 0xFBFBCC
	public void endOpenItemListWindow() { }

	// RVA: 0xFBFC30 Offset: 0xFBFC30 VA: 0xFBFC30
	public void modeSetVolumeWindow() { }

	// RVA: 0xFBFD2C Offset: 0xFBFD2C VA: 0xFBFD2C
	public void endOpenSetVolumeWindow() { }

	// RVA: 0xFBFDB0 Offset: 0xFBFDB0 VA: 0xFBFDB0
	public void closeSetVolumeWindow() { }

	// RVA: 0xFBFE80 Offset: 0xFBFE80 VA: 0xFBFE80
	public void endCloseSetVolumeWindow() { }

	// RVA: 0xFBFEE4 Offset: 0xFBFEE4 VA: 0xFBFEE4 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleNextTDgaugeComponent : BaseMonoBehaviour // TypeDefIndex: 9271
{
	// Fields
	public Transform gaugeFrontRoot; // 0x18
	public Transform gaugeBackRoot; // 0x20
	public GameObject gaugeIcon; // 0x28
	public GameObject gaugebackIcon; // 0x30
	public float width; // 0x38
	private GameObject[] gaugeList; // 0x40
	private GameObject[] gaugebackList; // 0x48

	// Methods

	// RVA: 0xFC0EC4 Offset: 0xFC0EC4 VA: 0xFC0EC4
	public void .ctor() { }

	// RVA: 0xFC0ED4 Offset: 0xFC0ED4 VA: 0xFC0ED4
	public void setHide() { }

	// RVA: 0xFC0F5C Offset: 0xFC0F5C VA: 0xFC0F5C
	public void setInitGauge(int now, int max, bool isTDSeraled) { }

	// RVA: 0xFC13B8 Offset: 0xFC13B8 VA: 0xFC13B8
	public void setValue(int nextVal) { }

	// RVA: 0xFC1610 Offset: 0xFC1610 VA: 0xFC1610
	public void changeGauge(int index, int type) { }
}

// Namespace: 
public class BattleNoSynchroAnime : MonoBehaviour // TypeDefIndex: 9272
{
	// Methods

	// RVA: 0xFC1768 Offset: 0xFC1768 VA: 0xFC1768
	public void .ctor() { }

	// RVA: 0xFC1770 Offset: 0xFC1770 VA: 0xFC1770
	private void Start() { }
}

// Namespace: 
public class BattleNpGaugeSystemComponent : MonoBehaviour // TypeDefIndex: 9273
{
	// Fields
	public UIProgressBar[] sliderlist; // 0x18
	public UISprite fullGauge; // 0x20
	public UISprite overGauge; // 0x28
	public UILabel label; // 0x30
	public UISprite frameSprite; // 0x38
	public int maxparam; // 0x40
	public int nowparam; // 0x44
	public int prevparam; // 0x48
	public int lineCount; // 0x4C
	public bool isPercent; // 0x50
	private List<float> sliderDefaultValue; // 0x58

	// Methods

	// RVA: 0xFC2010 Offset: 0xFC2010 VA: 0xFC2010
	public void .ctor() { }

	// RVA: 0xFC2088 Offset: 0xFC2088 VA: 0xFC2088
	public void InitSliderValue() { }

	// RVA: 0xFC2278 Offset: 0xFC2278 VA: 0xFC2278
	public void resetSlider() { }

	// RVA: 0xFC2468 Offset: 0xFC2468 VA: 0xFC2468
	public void setUseNp(bool flg) { }

	// RVA: 0xFC2568 Offset: 0xFC2568 VA: 0xFC2568
	public void setLineCount(int count) { }

	// RVA: 0xFC2570 Offset: 0xFC2570 VA: 0xFC2570
	public void setMaxParam(int maxparam) { }

	// RVA: 0xFC2578 Offset: 0xFC2578 VA: 0xFC2578
	public void setNowParam(int nowparam) { }

	// RVA: 0xFC29EC Offset: 0xFC29EC VA: 0xFC29EC
	public void changeParam(int param) { }

	// RVA: 0xFC2F00 Offset: 0xFC2F00 VA: 0xFC2F00
	private void EndTweenFunc(int targetParam) { }

	// RVA: 0xFC2F08 Offset: 0xFC2F08 VA: 0xFC2F08
	public void updateNpGauge(int now) { }

	// RVA: 0xFC258C Offset: 0xFC258C VA: 0xFC258C
	public void updateNpGauge(int now, int max) { }
}

// Namespace: 
public class BattlePerformanceBg : MonoBehaviour // TypeDefIndex: 9274
{
	// Fields
	public Transform bgRoot; // 0x18
	public Transform bgRootCamera; // 0x20
	public int nowBgId; // 0x28
	public int newBgId; // 0x2C
	public GameObject bgobject; // 0x30
	public GameObject frontobject; // 0x38
	public BattleActionCamera actionCamera; // 0x40
	private Color tmpcolor; // 0x48
	private int loadbgno; // 0x58
	private int loadbgType; // 0x5C
	private Vector3 pos; // 0x60
	private Vector3 rot; // 0x6C
	private AssetData BgAssetData; // 0x78
	private List<string> loadedChangeBgList; // 0x80
	private string initLoadedBgPath; // 0x88
	public Dictionary<string, BattlePerformanceBg.BgState> historyBgState; // 0x90
	private BattlePerformanceBg.BgState nowBgState; // 0x98
	private BattlePerformanceBg.FADE fade; // 0xA0
	public string[] debuglist; // 0xA8
	private bool changeDirect; // 0xB0
	private bool parentCamera; // 0xB1
	private Action EndCallback; // 0xB8
	protected bool IsLoading; // 0xC0
	protected List<BattlePerformanceBg.BgInfo> bgInfoList; // 0xC8
	protected static readonly string Frontfile; // 0x0

	// Properties
	public bool IsBusy { get; }

	// Methods

	// RVA: 0x1105EA4 Offset: 0x1105EA4 VA: 0x1105EA4
	public void .ctor() { }

	// RVA: 0x1105F9C Offset: 0x1105F9C VA: 0x1105F9C
	public static string GetAssetPass(int bgNo) { }

	// RVA: 0x1106028 Offset: 0x1106028 VA: 0x1106028
	public BattlePerformanceBg.SaveData getSaveData() { }

	// RVA: 0x1106658 Offset: 0x1106658 VA: 0x1106658
	public void setSaveData(BattlePerformanceBg.SaveData saveData) { }

	// RVA: 0x1106B4C Offset: 0x1106B4C VA: 0x1106B4C
	public bool get_IsBusy() { }

	// RVA: 0x1106B54 Offset: 0x1106B54 VA: 0x1106B54
	public string[] getChangeBgList() { }

	// RVA: 0x1106B5C Offset: 0x1106B5C VA: 0x1106B5C
	public void ReleaseBg() { }

	// RVA: 0x110680C Offset: 0x110680C VA: 0x110680C
	public BattleBgComponent[] getBattleBgComponents(bool includeInactive = False) { }

	// RVA: 0x1106E2C Offset: 0x1106E2C VA: 0x1106E2C
	public void ReleaseChangeBgAssets() { }

	// RVA: 0x1106D34 Offset: 0x1106D34 VA: 0x1106D34
	protected void ReleaseBg(int no) { }

	// RVA: 0x1106FC4 Offset: 0x1106FC4 VA: 0x1106FC4
	public bool isReload() { }

