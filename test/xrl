	// Methods

	// RVA: 0x16865BC Offset: 0x16865BC VA: 0x16865BC
	public void .ctor(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }
}

// Namespace: 
public class BattlePerformanceContinue : BaseMonoBehaviour // TypeDefIndex: 9254
{
	// Fields
	public PlayMakerFSM myFsm; // 0x18
	private BattlePerformance perf; // 0x20
	private BattleData data; // 0x28
	private BattleLogic logic; // 0x30
	private bool isProgress; // 0x38
	public BattleWindowComponent window; // 0x40
	public GameObject bg; // 0x48
	public GameObject giveUpWindow; // 0x50
	public UISprite giveUpBg; // 0x58
	public UISprite giveUpTitle; // 0x60
	public UILabel checkGiveUpLabel; // 0x68
	public UILabel giveUpContinueItemLabel; // 0x70
	public GameObject giveUpOkBtn; // 0x78
	public GameObject giveUpCancelBtn; // 0x80
	public GameObject giveUpContinueItemRoot; // 0x88
	public UILabel giveUpContinueItemNum; // 0x90
	public UISprite giveUpContinueItemSpr; // 0x98
	[SpaceAttribute] // RVA: 0xCD30FC Offset: 0xCD30FC VA: 0xCD30FC
	public GameObject commandspellObject; // 0xA0
	public UILabel commandspell_now; // 0xA8
	public UILabel stone_now; // 0xB0
	public UILabel checkUseCommandSpell; // 0xB8
	public UISprite commandSpellSprite; // 0xC0
	public UILabel stoneBtnLabel; // 0xC8
	[SpaceAttribute] // RVA: 0xCD3110 Offset: 0xCD3110 VA: 0xCD3110
	public GameObject stoneObject; // 0xD0
	public UILabel gem_now; // 0xD8
	public UILabel checkUseGem; // 0xE0
	public GameObject nostoneObject; // 0xE8
	public UILabel checkUseBuyGem; // 0xF0
	public BattleWindowComponent useCheckWindow; // 0xF8
	public UILabel usecheckLabel; // 0x100
	public UILabel useCheckContinueItemLabel; // 0x108
	public BattleViewItemlistComponent itemWindow; // 0x110
	public int itemColumnCount; // 0x118
	public bool continueRetryFlg; // 0x11C
	private Color spellBtnColor; // 0x120
	private Color spellnowColor; // 0x130
	public GameObject ContinueItemWindow; // 0x140
	public UILabel ContinueCommandSpellNum; // 0x148
	public UILabel ContinueStoneNum; // 0x150
	public UILabel ContinueLabel; // 0x158
	public UILabel ContinueItemNumLabel; // 0x160
	public UISprite ContinueItemSpr; // 0x168
	public UILabel deadLine; // 0x170
	public GameObject ContinueItemBtn; // 0x178
	public UILabel ContinueItemBtnLabel; // 0x180
	public GameObject ContinueCommandSpellBtn; // 0x188
	public UILabel ContinueCommandSpellBtnLabel; // 0x190
	public GameObject ContinueStoneBtn; // 0x198
	public UILabel ContinueStoneBtnLabel; // 0x1A0
	public UILabel ContinueRetireBtnLabel; // 0x1A8
	private bool IsContinueItem; // 0x1B0
	private bool isShowDeadLineDialog; // 0x1B1
	[CompilerGeneratedAttribute] // RVA: 0xCD3124 Offset: 0xCD3124 VA: 0xCD3124
	[DebuggerBrowsableAttribute] // RVA: 0xCD3124 Offset: 0xCD3124 VA: 0xCD3124
	private bool <isDefenceTargetBroken>k__BackingField; // 0x1B2

	// Properties
	public bool isDefenceTargetBroken { get; set; }

	// Methods

	// RVA: 0x16B78C8 Offset: 0x16B78C8 VA: 0x16B78C8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BA9C Offset: 0xD3BA9C VA: 0xD3BA9C
	// RVA: 0x16B7970 Offset: 0x16B7970 VA: 0x16B7970
	public bool get_isDefenceTargetBroken() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BAAC Offset: 0xD3BAAC VA: 0xD3BAAC
	// RVA: 0x16B7978 Offset: 0x16B7978 VA: 0x16B7978
	private void set_isDefenceTargetBroken(bool value) { }

	// RVA: 0x16B7984 Offset: 0x16B7984 VA: 0x16B7984
	public void Update() { }

	// RVA: 0x16B7CA0 Offset: 0x16B7CA0 VA: 0x16B7CA0
	private void CallbackConfirmDialog(bool isDecide) { }

	// RVA: 0x16B7DE4 Offset: 0x16B7DE4 VA: 0x16B7DE4
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x16B8108 Offset: 0x16B8108 VA: 0x16B8108
	private void refreshStoneNow(UserGameEntity userGame) { }

	// RVA: 0x16B8250 Offset: 0x16B8250 VA: 0x16B8250
	public void StartContinue(bool inIsProgress) { }

	// RVA: 0x16B84FC Offset: 0x16B84FC VA: 0x16B84FC
	public void atlasLoadEnd() { }

	// RVA: 0x16B8278 Offset: 0x16B8278 VA: 0x16B8278
	public void StartContinueImpl(bool inIsProgress) { }

	// RVA: 0x16B85BC Offset: 0x16B85BC VA: 0x16B85BC
	private void ResetContinueItemInfo() { }

	// RVA: 0x16B8618 Offset: 0x16B8618 VA: 0x16B8618
	public void showConf(BattleDropItem drop) { }

	// RVA: 0x16B861C Offset: 0x16B861C VA: 0x16B861C
	public void OpenGiveUp() { }

	// RVA: 0x16B8DE0 Offset: 0x16B8DE0 VA: 0x16B8DE0
	public void CloseGiveUp() { }

	// RVA: 0x16B8E64 Offset: 0x16B8E64 VA: 0x16B8E64
	public void procNGGiveUpContinueItem() { }

	// RVA: 0x16B8ED4 Offset: 0x16B8ED4 VA: 0x16B8ED4
	public void procOK() { }

	// RVA: 0x16B90D4 Offset: 0x16B90D4 VA: 0x16B90D4
	public void procNG() { }

	// RVA: 0x16B9170 Offset: 0x16B9170 VA: 0x16B9170
	public void endDialog(bool flg) { }

	// RVA: 0x16B91FC Offset: 0x16B91FC VA: 0x16B91FC
	public void CheckContinueItem() { }

	// RVA: 0x16B92B0 Offset: 0x16B92B0 VA: 0x16B92B0
	public void OpenContinueItemWindow() { }

	// RVA: 0x16B9B74 Offset: 0x16B9B74 VA: 0x16B9B74
	private void AttachStoneCountRefreshComponent() { }

	// RVA: 0x16B9E60 Offset: 0x16B9E60 VA: 0x16B9E60
	public void endOpenContinueItem() { }

	// RVA: 0x16B9EFC Offset: 0x16B9EFC VA: 0x16B9EFC
	public void checkSpell() { }

	// RVA: 0x16B9FAC Offset: 0x16B9FAC VA: 0x16B9FAC
	public void openSpell() { }

	// RVA: 0x16BA294 Offset: 0x16BA294 VA: 0x16BA294
	public void endOpenSpell() { }

	// RVA: 0x16BA330 Offset: 0x16BA330 VA: 0x16BA330
	public void closeSpell() { }

	// RVA: 0x16BA3E0 Offset: 0x16BA3E0 VA: 0x16BA3E0
	public void endCloseSpell() { }

	// RVA: 0x16BA480 Offset: 0x16BA480 VA: 0x16BA480
	public void connectSpell() { }

	// RVA: 0x16BA864 Offset: 0x16BA864 VA: 0x16BA864
	private void callbackContinueCommandSpell(string ret) { }

	// RVA: 0x16BA8B0 Offset: 0x16BA8B0 VA: 0x16BA8B0
	public void callBackCommandSpell(string ret) { }

	// RVA: 0x16BA9DC Offset: 0x16BA9DC VA: 0x16BA9DC
	public void openReTry() { }

	// RVA: 0x16BAAD8 Offset: 0x16BAAD8 VA: 0x16BAAD8
	public void endRetryDialog(bool flg) { }

	// RVA: 0x16BAB3C Offset: 0x16BAB3C VA: 0x16BAB3C
	public void procNGSpell() { }

	// RVA: 0x16BABA8 Offset: 0x16BABA8 VA: 0x16BABA8
	public void procSpell() { }

	// RVA: 0x16BACD4 Offset: 0x16BACD4 VA: 0x16BACD4
	protected void endLoadCommandSPell(AssetData aData) { }

	// RVA: 0x16BB0C8 Offset: 0x16BB0C8 VA: 0x16BB0C8
	public void endSpell() { }

	// RVA: 0x16BB1E0 Offset: 0x16BB1E0 VA: 0x16BB1E0
	public void checkStone() { }

	// RVA: 0x16BB280 Offset: 0x16BB280 VA: 0x16BB280
	public void openStone() { }

	// RVA: 0x16BB358 Offset: 0x16BB358 VA: 0x16BB358
	public void endOpenStone() { }

	// RVA: 0x16BB3F4 Offset: 0x16BB3F4 VA: 0x16BB3F4
	public void closeStone() { }

	// RVA: 0x16BB4A4 Offset: 0x16BB4A4 VA: 0x16BB4A4
	public void endCloseStone() { }

	// RVA: 0x16BB544 Offset: 0x16BB544 VA: 0x16BB544
	public void connectStone() { }

	// RVA: 0x16BB718 Offset: 0x16BB718 VA: 0x16BB718
	public void callBackStone(string ret) { }

	// RVA: 0x16BB860 Offset: 0x16BB860 VA: 0x16BB860
	public void procNGStone() { }

	// RVA: 0x16BB8CC Offset: 0x16BB8CC VA: 0x16BB8CC
	public void procStone() { }

	// RVA: 0x16BB930 Offset: 0x16BB930 VA: 0x16BB930
	public void openNoStone() { }

	// RVA: 0x16BBA08 Offset: 0x16BBA08 VA: 0x16BBA08
	public void endOpenNoStone() { }

	// RVA: 0x16BBAA4 Offset: 0x16BBAA4 VA: 0x16BBAA4
	public void closeNoStone() { }

	// RVA: 0x16BBB54 Offset: 0x16BBB54 VA: 0x16BBB54
	public void endCloseNoStone() { }

	// RVA: 0x16BBBD8 Offset: 0x16BBBD8 VA: 0x16BBBD8
	public void openStoneShop() { }

	// RVA: 0x16BBC88 Offset: 0x16BBC88 VA: 0x16BBC88
	public void callbaclStoneShop(StonePurchaseMenu.Result result) { }

	// RVA: 0x16BBD5C Offset: 0x16BBD5C VA: 0x16BBD5C
	public void procNGNoStone() { }

	// RVA: 0x16B7D34 Offset: 0x16B7D34 VA: 0x16B7D34
	public void closeContinueItem() { }

	// RVA: 0x16BBDE4 Offset: 0x16BBDE4 VA: 0x16BBDE4
	public void endCloseContinueItem() { }

	// RVA: 0x16BBE84 Offset: 0x16BBE84 VA: 0x16BBE84
	public void connectContinueItem() { }

	// RVA: 0x16BC06C Offset: 0x16BC06C VA: 0x16BC06C
	public void callBackContinueItem(string ret) { }

	// RVA: 0x16BC1F8 Offset: 0x16BC1F8 VA: 0x16BC1F8
	public void procNGContinueItem() { }

	// RVA: 0x16BC264 Offset: 0x16BC264 VA: 0x16BC264
	public void procContinueItem() { }

	// RVA: 0x16BC2C8 Offset: 0x16BC2C8 VA: 0x16BC2C8
	public void openUseCheck(int type) { }

	// RVA: 0x16BC4D0 Offset: 0x16BC4D0 VA: 0x16BC4D0
	public void endOpenUsecheck() { }

	// RVA: 0x16BC534 Offset: 0x16BC534 VA: 0x16BC534
	public void closeUseCheck() { }

	// RVA: 0x16BC580 Offset: 0x16BC580 VA: 0x16BC580
	public void checkCountStone() { }

	// RVA: 0x16BC614 Offset: 0x16BC614 VA: 0x16BC614
	public void checkDeadLineStoneShopEnd() { }

	// RVA: 0x16BA700 Offset: 0x16BA700 VA: 0x16BA700
	private void SkipCommandSpellRequest() { }

	// RVA: 0x16BC7C4 Offset: 0x16BC7C4 VA: 0x16BC7C4
	public void CheckDefenceTargetBroken() { }

	// RVA: 0x16BC934 Offset: 0x16BC934 VA: 0x16BC934
	public void OpenBrokenMessage() { }

	// RVA: 0x16BCA80 Offset: 0x16BCA80 VA: 0x16BCA80
	public void EndContinue() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BABC Offset: 0xD3BABC VA: 0xD3BABC
	// RVA: 0x16BCAC0 Offset: 0x16BCAC0 VA: 0x16BCAC0
	public IEnumerator CoEndContinue() { }

	// RVA: 0x16B9C14 Offset: 0x16B9C14 VA: 0x16B9C14
	private void SetContinueMessage(UILabel label, string localizationKey, int stoneCount = -2147483648) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BACC Offset: 0xD3BACC VA: 0xD3BACC
	// RVA: 0x16BCB38 Offset: 0x16BCB38 VA: 0x16BCB38
	private void <AttachStoneCountRefreshComponent>m__0(int stoneCount) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BADC Offset: 0xD3BADC VA: 0xD3BADC
	// RVA: 0x16BCEA8 Offset: 0x16BCEA8 VA: 0x16BCEA8
	private void <CheckDefenceTargetBroken>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BAEC Offset: 0xD3BAEC VA: 0xD3BAEC
	// RVA: 0x16BCF0C Offset: 0x16BCF0C VA: 0x16BCF0C
	private void <OpenBrokenMessage>m__2() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0490 Offset: 0xCB0490 VA: 0xCB0490
private sealed class BattlePerformanceContinue.<CoEndContinue>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9255
{
	// Fields
	internal float <timer>__0; // 0x10
	internal NGUIFader <fadeComp>__0; // 0x18
	internal BattlePerformanceContinue $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48D54 Offset: 0xD48D54 VA: 0xD48D54
	// RVA: 0x16BCB30 Offset: 0x16BCB30 VA: 0x16BCB30
	public void .ctor() { }

	// RVA: 0x16BCF70 Offset: 0x16BCF70 VA: 0x16BCF70 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D64 Offset: 0xD48D64 VA: 0xD48D64
	// RVA: 0x16BD0E8 Offset: 0x16BD0E8 VA: 0x16BD0E8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D74 Offset: 0xD48D74 VA: 0xD48D74
	// RVA: 0x16BD0F0 Offset: 0x16BD0F0 VA: 0x16BD0F0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D84 Offset: 0xD48D84 VA: 0xD48D84
	// RVA: 0x16BD0F8 Offset: 0x16BD0F8 VA: 0x16BD0F8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48D94 Offset: 0xD48D94 VA: 0xD48D94
	// RVA: 0x16BD10C Offset: 0x16BD10C VA: 0x16BD10C Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePerformanceDefenceTarget : BaseMonoBehaviour // TypeDefIndex: 9256
{
	// Fields
	[SerializeField] // RVA: 0xCD3160 Offset: 0xCD3160 VA: 0xCD3160
	private UISprite icon; // 0x18
	[SerializeField] // RVA: 0xCD3170 Offset: 0xCD3170 VA: 0xCD3170
	private UILabel name; // 0x20
	[SerializeField] // RVA: 0xCD3180 Offset: 0xCD3180 VA: 0xCD3180
	private BattleServantShowBuffComponent showBuff; // 0x28
	[SerializeField] // RVA: 0xCD3190 Offset: 0xCD3190 VA: 0xCD3190
	private BattleDefenceTargetHpGaugeComponent hpGauge; // 0x30
	[SerializeField] // RVA: 0xCD31A0 Offset: 0xCD31A0 VA: 0xCD31A0
	private string moveToTacticalPhaseName; // 0x38
	[SerializeField] // RVA: 0xCD31B0 Offset: 0xCD31B0 VA: 0xCD31B0
	private string moveToCommandCardName; // 0x40
	private bool isInitialized; // 0x48
	private Animation animation; // 0x50
	public bool isBattlePhaseEnd; // 0x58
	public bool isContinue; // 0x59

	// Methods

	// RVA: 0x16BD174 Offset: 0x16BD174 VA: 0x16BD174
	public void .ctor() { }

	// RVA: 0x16BD17C Offset: 0x16BD17C VA: 0x16BD17C
	public void SetData(int nowHp, int maxHp, int uiId) { }

	// RVA: 0x16BD330 Offset: 0x16BD330 VA: 0x16BD330
	private void SetIcon(int uiId) { }

	// RVA: 0x16BD4A4 Offset: 0x16BD4A4 VA: 0x16BD4A4
	public void UpdateHpGauge(int nowHp) { }

	// RVA: 0x16BD4DC Offset: 0x16BD4DC VA: 0x16BD4DC
	public void UpdateBuffIcon(BattleBuffData.ShowBuffData[] buffArray) { }

	// RVA: 0x16BD514 Offset: 0x16BD514 VA: 0x16BD514
	public void UpdateUIPotition(BattlePerformanceDefenceTarget.MoveToPositionType position) { }

	// RVA: 0x16BD2EC Offset: 0x16BD2EC VA: 0x16BD2EC
	public void SetDefenceTargetActive() { }

	// RVA: 0x16BD75C Offset: 0x16BD75C VA: 0x16BD75C
	public void SetHpGauge(int nowHp) { }
}

// Namespace: 
public enum BattlePerformanceDefenceTarget.MoveToPositionType // TypeDefIndex: 9257
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceDefenceTarget.MoveToPositionType TACTICAL_PHASE = 0;
	public const BattlePerformanceDefenceTarget.MoveToPositionType COMMAND_CARD = 1;
	public const BattlePerformanceDefenceTarget.MoveToPositionType BATTLE_PHASE = 2;
}

// Namespace: 
public class BaseEnemyParamPosData // TypeDefIndex: 9258
{
	// Properties
	public virtual Vector3 NormalTrLocalPos { get; }
	public virtual Vector3 NormalTrLocalScale { get; }
	public virtual int BuffIconMaxLine { get; }

	// Methods

	// RVA: 0x1482440 Offset: 0x1482440 VA: 0x1482440
	public void .ctor() { }

	// RVA: 0x1482448 Offset: 0x1482448 VA: 0x1482448 Slot: 4
	public virtual Vector3 get_NormalTrLocalPos() { }

	// RVA: 0x14824A8 Offset: 0x14824A8 VA: 0x14824A8 Slot: 5
	public virtual Vector3 get_NormalTrLocalScale() { }

	// RVA: 0x1482508 Offset: 0x1482508 VA: 0x1482508 Slot: 6
	public virtual Vector3 GetSvtBuffLocalPos(Vector3 defPos) { }

	// RVA: 0x148250C Offset: 0x148250C VA: 0x148250C Slot: 7
	public virtual int get_BuffIconMaxLine() { }
}

// Namespace: 
public class PosCountNormalEnemyParamPosData : BaseEnemyParamPosData // TypeDefIndex: 9259
{
	// Fields
	private const float SVT_BUFF_LOCAL_POS_Y = -35;

	// Methods

	// RVA: 0x1BD6D40 Offset: 0x1BD6D40 VA: 0x1BD6D40
	public void .ctor() { }

	// RVA: 0x1BD6D48 Offset: 0x1BD6D48 VA: 0x1BD6D48 Slot: 6
	public override Vector3 GetSvtBuffLocalPos(Vector3 defPos) { }
}

// Namespace: 
public class PosCountSpEnemyParamPosData : BaseEnemyParamPosData // TypeDefIndex: 9260
{
	// Fields
	private const float SVT_BUFF_LOCAL_POS_Y = -33;

	// Properties
	public override Vector3 NormalTrLocalPos { get; }
	public override Vector3 NormalTrLocalScale { get; }
	public override int BuffIconMaxLine { get; }

	// Methods

	// RVA: 0x1BD6E84 Offset: 0x1BD6E84 VA: 0x1BD6E84
	public void .ctor() { }

	// RVA: 0x1BD6E8C Offset: 0x1BD6E8C VA: 0x1BD6E8C Slot: 4
	public override Vector3 get_NormalTrLocalPos() { }

	// RVA: 0x1BD6ED0 Offset: 0x1BD6ED0 VA: 0x1BD6ED0 Slot: 5
	public override Vector3 get_NormalTrLocalScale() { }

	// RVA: 0x1BD6F14 Offset: 0x1BD6F14 VA: 0x1BD6F14 Slot: 6
	public override Vector3 GetSvtBuffLocalPos(Vector3 defPos) { }

	// RVA: 0x1BD6F20 Offset: 0x1BD6F20 VA: 0x1BD6F20 Slot: 7
	public override int get_BuffIconMaxLine() { }
}

// Namespace: 
public class BattlePerformanceEnemy : MonoBehaviour // TypeDefIndex: 9261
{
	// Fields
	private BattlePerformance perf; // 0x18
	private BattleData bdata; // 0x20
	public BattleServantHeadUpComponent[] svtHeadUpList; // 0x28
	public BattleServantParamComponent[] svtParamList; // 0x30
	public Transform nomalTr; // 0x38
	public Transform raidTr; // 0x40
	public Transform superBossTr; // 0x48
	private float raidY; // 0x50
	public BattleServantRaidParamComponent raidParam; // 0x58
	public BattleServantSuperBossParamComponent superbossParam; // 0x60
	private int[] list_ID; // 0x68
	private GameObject[] list_actor; // 0x70

	// Methods

	// RVA: 0x16BD794 Offset: 0x16BD794 VA: 0x16BD794
	public void .ctor() { }

	// RVA: 0x16BD7FC Offset: 0x16BD7FC VA: 0x16BD7FC
	public void updateView() { }

	// RVA: 0x16BDB28 Offset: 0x16BDB28 VA: 0x16BDB28
	public void updateBuff() { }

	// RVA: 0x16BDB2C Offset: 0x16BDB2C VA: 0x16BDB2C
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x16BDC70 Offset: 0x16BDC70 VA: 0x16BDC70
	public void setWinView() { }

	// RVA: 0x16BDD58 Offset: 0x16BDD58 VA: 0x16BDD58
	public void deleteStatus(int index) { }

	// RVA: 0x16BDFE8 Offset: 0x16BDFE8 VA: 0x16BDFE8
	public void setParamPosition() { }

	// RVA: 0x16BE3B4 Offset: 0x16BE3B4 VA: 0x16BE3B4
	protected BaseEnemyParamPosData MakeEnemyParamPosData() { }

	// RVA: 0x16BE454 Offset: 0x16BE454 VA: 0x16BE454
	public bool ExistsFrontRow() { }

	// RVA: 0x16BE54C Offset: 0x16BE54C VA: 0x16BE54C
	public bool ExistsFieldNormalEnemy() { }

	// RVA: 0x16BE65C Offset: 0x16BE65C VA: 0x16BE65C
	private void SetNormalEnemyStatusUI(int index, BattleServantData svtdata, GameObject target) { }

	// RVA: 0x16BEB14 Offset: 0x16BEB14 VA: 0x16BEB14
	public void setParam(int index, BattleServantData svtdata, GameObject target) { }

	// RVA: 0x16BE89C Offset: 0x16BE89C VA: 0x16BE89C
	private void setTargetIcon(BattleServantData svtdata, GameObject target, int index) { }

	// RVA: 0x16BEFDC Offset: 0x16BEFDC VA: 0x16BEFDC
	public void setTarget(BattleServantData svtData) { }

	// RVA: 0x16BF208 Offset: 0x16BF208 VA: 0x16BF208
	public void setOffTarget() { }

	// RVA: 0x16BF370 Offset: 0x16BF370 VA: 0x16BF370
	public void updateRaidInfos(BattleRaidInfo[] infos, bool fixUpdate) { }

	// RVA: 0x16BF464 Offset: 0x16BF464 VA: 0x16BF464
	public bool checkRaidUpdateHp() { }

	// RVA: 0x16BF494 Offset: 0x16BF494 VA: 0x16BF494
	public void updateRaidHp() { }

	// RVA: 0x16BF4C4 Offset: 0x16BF4C4 VA: 0x16BF4C4
	public void updateSuperBossInfos(BattleSuperBossInfo[] infos, bool fixUpdate) { }

	// RVA: 0x16BF5B8 Offset: 0x16BF5B8 VA: 0x16BF5B8
	public long getTurnSituationParam() { }

	// RVA: 0x16BF5E8 Offset: 0x16BF5E8 VA: 0x16BF5E8
	public void startWave() { }

	// RVA: 0x16BF684 Offset: 0x16BF684 VA: 0x16BF684
	public void startCommand() { }

	// RVA: 0x16BF720 Offset: 0x16BF720 VA: 0x16BF720
	public void startTac() { }

	// RVA: 0x16BF7BC Offset: 0x16BF7BC VA: 0x16BF7BC
	public void startAction() { }

	// RVA: 0x16BF858 Offset: 0x16BF858 VA: 0x16BF858
	public void startSkill() { }

	// RVA: 0x16BF8F8 Offset: 0x16BF8F8 VA: 0x16BF8F8
	public void endSkill() { }

	// RVA: 0x16BF998 Offset: 0x16BF998 VA: 0x16BF998
	public void updateStateString() { }

	// RVA: 0x16BF9C8 Offset: 0x16BF9C8 VA: 0x16BF9C8
	public void playShiftEffectBefore(int uniqueId) { }

	// RVA: 0x16BFAC4 Offset: 0x16BFAC4 VA: 0x16BFAC4
	public void playShiftEffect(int uniqueId) { }

	// RVA: 0x16BFBC0 Offset: 0x16BFBC0 VA: 0x16BFBC0
	public void playAddition() { }

	// RVA: 0x16BFC5C Offset: 0x16BFC5C VA: 0x16BFC5C
	public void showSideEffect(BattleActionData.BuffData buffData) { }

	// RVA: 0x16BFE18 Offset: 0x16BFE18 VA: 0x16BFE18
	public BattleServantParamComponent GetSvtParamComponent(int uniqueId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB04A0 Offset: 0xCB04A0 VA: 0xCB04A0
private sealed class BattlePerformanceEnemy.<GetSvtParamComponent>c__AnonStorey0 // TypeDefIndex: 9262
{
	// Fields
	internal int uniqueId; // 0x10

	// Methods

	// RVA: 0x16BFEDC Offset: 0x16BFEDC VA: 0x16BFEDC
	public void .ctor() { }

	// RVA: 0x16BFEE4 Offset: 0x16BFEE4 VA: 0x16BFEE4
	internal bool <>m__0(BattleServantParamComponent x) { }
}

// Namespace: 
public class BattlePerformanceEnemyMst : BaseMonoBehaviour // TypeDefIndex: 9263
{
	// Fields
	private static readonly string MASTER_FACE_ASSET_NAME; // 0x0
	private static readonly string MASTER_FACE_TEXTURE_NAME; // 0x8
	private static readonly string MASTER_VOICE_ASSET_NAME; // 0x10
	public BattleData data; // 0x18
	public GameObject masterRoot; // 0x20
	public CommandSpellIconComponent commandSpellIcon; // 0x28
	public UITexture faceText; // 0x30
	private const float alphatime = 0.15;
	private const float appeartime = 0.1;
	private AssetData mstFaceAssets; // 0x38
	private bool isLongTap; // 0x40
	private BattlePerformanceEnemyMst.loadState loadStat; // 0x44
	private string loadVoiceAsset; // 0x48

	// Methods

	// RVA: 0x16BFF1C Offset: 0x16BFF1C VA: 0x16BFF1C
	public void .ctor() { }

	// RVA: 0x16BFF24 Offset: 0x16BFF24 VA: 0x16BFF24
	public void OnDestroy() { }

	// RVA: 0x16C01D8 Offset: 0x16C01D8 VA: 0x16C01D8
	public void Initialize(BattleData indata) { }

	// RVA: 0x16C01E0 Offset: 0x16C01E0 VA: 0x16C01E0
	public void loadData() { }

	// RVA: 0x16C03E4 Offset: 0x16C03E4 VA: 0x16C03E4
	public void updateCommandSpellIcon() { }

	// RVA: 0x16C0488 Offset: 0x16C0488 VA: 0x16C0488
	public void SetRootActive(bool status) { }

	// RVA: 0x16C0538 Offset: 0x16C0538 VA: 0x16C0538
	private void loadMasterFace(int mstFaceId) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BAFC Offset: 0xD3BAFC VA: 0xD3BAFC
	// RVA: 0x16C05F4 Offset: 0x16C05F4 VA: 0x16C05F4
	private IEnumerator LoadAssetCoroutine(int mstFaceId) { }

	// RVA: 0x16BFF48 Offset: 0x16BFF48 VA: 0x16BFF48
	private void releaseMasterFace() { }

	// RVA: 0x16C0160 Offset: 0x16C0160 VA: 0x16C0160
	private void releaseMasterVoice() { }

	// RVA: 0x16C0690 Offset: 0x16C0690 VA: 0x16C0690
	private string getAssetName(int id) { }

	// RVA: 0x16C0754 Offset: 0x16C0754 VA: 0x16C0754
	private string getTextureName(int id) { }

	// RVA: 0x16C0320 Offset: 0x16C0320 VA: 0x16C0320
	private string getVoiceAssetName(int id) { }

	// RVA: 0x16C0818 Offset: 0x16C0818 VA: 0x16C0818
	public bool IsLoading() { }

	// RVA: 0x16C0828 Offset: 0x16C0828 VA: 0x16C0828
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB0C Offset: 0xD3BB0C VA: 0xD3BB0C
	// RVA: 0x16C08B0 Offset: 0x16C08B0 VA: 0x16C08B0
	private void <loadData>m__0() { }
}

// Namespace: 
private enum BattlePerformanceEnemyMst.loadState // TypeDefIndex: 9264
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceEnemyMst.loadState NONE = 0;
	public const BattlePerformanceEnemyMst.loadState VOICE = 1;
	public const BattlePerformanceEnemyMst.loadState FACE = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB04B0 Offset: 0xCB04B0 VA: 0xCB04B0
private sealed class BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9265
{
	// Fields
	internal int mstFaceId; // 0x10
	internal bool <loadable>__0; // 0x14
	internal BattlePerformanceEnemyMst $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C
	private BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0.<LoadAssetCoroutine>c__AnonStorey1 $locvar0; // 0x30

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48DA4 Offset: 0xD48DA4 VA: 0xD48DA4
	// RVA: 0x16C0688 Offset: 0x16C0688 VA: 0x16C0688
	public void .ctor() { }

	// RVA: 0x16C08FC Offset: 0x16C08FC VA: 0x16C08FC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48DB4 Offset: 0xD48DB4 VA: 0xD48DB4
	// RVA: 0x16C0AB8 Offset: 0x16C0AB8 VA: 0x16C0AB8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48DC4 Offset: 0xD48DC4 VA: 0xD48DC4
	// RVA: 0x16C0AC0 Offset: 0x16C0AC0 VA: 0x16C0AC0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48DD4 Offset: 0xD48DD4 VA: 0xD48DD4
	// RVA: 0x16C0AC8 Offset: 0x16C0AC8 VA: 0x16C0AC8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48DE4 Offset: 0xD48DE4 VA: 0xD48DE4
	// RVA: 0x16C0ADC Offset: 0x16C0ADC VA: 0x16C0ADC Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0.<LoadAssetCoroutine>c__AnonStorey1 // TypeDefIndex: 9266
{
	// Fields
	internal int mstFaceId; // 0x10
	internal BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x16C0AB0 Offset: 0x16C0AB0 VA: 0x16C0AB0
	public void .ctor() { }

	// RVA: 0x16C0B44 Offset: 0x16C0B44 VA: 0x16C0B44
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public class BattlePerformanceInfoComponent : BaseMonoBehaviour // TypeDefIndex: 9267
{
	// Fields
	public UILabel nokoriEnemyCountLabel; // 0x18
	public UISprite stockPSrpite; // 0x20
	public UISprite stockPPSrpite; // 0x28
	public UISprite stockSprite; // 0x30
	public UILabel stockLabel; // 0x38
	public GameObject stockEffectPrefab; // 0x40
	public GameObject stockBg; // 0x48
	public GameObject waveShowObject; // 0x50
	public UILabel nowWaveLabel; // 0x58
	public UILabel maxWaveLabel; // 0x60
	public UILabel slashLabel; // 0x68
	public GameObject nokoriTurnObject; // 0x70
	public UILabel nokoriTurnLabel; // 0x78
	public float AdjustY; // 0x80
	public GameObject nokoriTimeObject; // 0x88
	public UILabel nokoriTimeLabel; // 0x90
	public UISprite battleBackGround; // 0x98
	public GameObject battleSpr; // 0xA0
	public GameObject enemyRoot; // 0xA8
	public UISprite enemySpr; // 0xB0
	public UISprite enemyBackGround; // 0xB8
	public UILabel enemyLabel; // 0xC0
	public GameObject turnRoot; // 0xC8
	public UISprite turnSpr; // 0xD0
	public UISprite turnBackGround; // 0xD8
	public UILabel turnLabel; // 0xE0
	public GameObject itemRoot; // 0xE8
	public UISprite itemSpr; // 0xF0
	public UILabel itemLabel; // 0xF8
	private int stockIndex; // 0x100
	private bool isUpdateTimer; // 0x104
	private int eventId; // 0x108
	private long remaingTimeSeconds; // 0x110
	private long lastCheckTime; // 0x118
	private Vector3 timeDefPos; // 0x120
	private static int[] raritylist; // 0x0

	// Methods

	// RVA: 0x16C0D1C Offset: 0x16C0D1C VA: 0x16C0D1C
	public void .ctor() { }

	// RVA: 0x16C0D2C Offset: 0x16C0D2C VA: 0x16C0D2C
	public void Initialize() { }

	// RVA: 0x16C114C Offset: 0x16C114C VA: 0x16C114C
	public void setQuest(BattleData data) { }

	// RVA: 0x16C1CE4 Offset: 0x16C1CE4 VA: 0x16C1CE4
	public void setShowTurn(BattleData bdata, int addturn) { }

	// RVA: 0x16C1F14 Offset: 0x16C1F14 VA: 0x16C1F14
	public void setShowLimitTurn(int now, int limit, BattleData bdata) { }

	// RVA: 0x16C2128 Offset: 0x16C2128 VA: 0x16C2128
	public void setShowElapsedTurn(int state, int now) { }

	// RVA: 0x16C2340 Offset: 0x16C2340 VA: 0x16C2340
	private void Update() { }

	// RVA: 0x16C2350 Offset: 0x16C2350 VA: 0x16C2350
	private void updateTime() { }

	// RVA: 0x16C1A14 Offset: 0x16C1A14 VA: 0x16C1A14
	private void drawTime(long showTimeSeconds) { }

	// RVA: 0x16C2464 Offset: 0x16C2464 VA: 0x16C2464
	public void updateNokoriEnemyCount(BattleData bData) { }

	// RVA: 0x16C26D0 Offset: 0x16C26D0 VA: 0x16C26D0
	public void setShowWave(int now, int max) { }

	// RVA: 0x16C2854 Offset: 0x16C2854 VA: 0x16C2854
	public void updateDropItemCount(BattleData bData) { }

	// RVA: 0x16C0F8C Offset: 0x16C0F8C VA: 0x16C0F8C
	public void setStockSprite(int index) { }

	// RVA: 0x16C2C10 Offset: 0x16C2C10 VA: 0x16C2C10
	public void ClearBattleInfo() { }

	// RVA: 0x16C2C48 Offset: 0x16C2C48 VA: 0x16C2C48
	private static void .cctor() { }
}

// Namespace: 
public class BattlePerformanceMaster : BaseMonoBehaviour // TypeDefIndex: 9268
{
	// Fields
	private static readonly string MASTER_SKILL_BUTTON_SP_NAME; // 0x0
	public PlayMakerFSM myFsm; // 0x18
	public PlayMakerFSM otherFsm; // 0x20
	public BattlePerformance perf; // 0x28
	public BattleLogic logic; // 0x30
	public BattleData data; // 0x38
	public BattleMasterSkillWindowComponent win_Skill; // 0x40
	public CommandSpellWindowComponent win_Spell; // 0x48
	public BattleMenuWindowComponent win_Menu; // 0x50
	public BattleRetireWindowComponent win_Retire; // 0x58
	public BattleServantConfConponent win_EnemyConf; // 0x60
	public BattleServantConfConponent warBoard_win_EnemyConf; // 0x68
	public GameObject master_root; // 0x70
	public GameObject skillBtn; // 0x78
	public GameObject menuBtn; // 0x80
	public GameObject spellBtn; // 0x88
	public GameObject masterBtn; // 0x90
	public UISprite skillSkipBtn; // 0x98
	public UISprite tdConstBtn; // 0xA0
	public UISprite skipDeadBtn; // 0xA8
	public UISprite skillBtnSp; // 0xB0
	public CommandSpellIconComponent commandSpellIcon; // 0xB8
	public GameObject face_root; // 0xC0
	public GameObject userGrade; // 0xC8
	public GameObject spellSpr; // 0xD0
	public BattleSkillConfComponent skillConfWindow; // 0xD8
	public BattleServantSkillIConComponent skillIconPrefab; // 0xE0
	public UISprite skillIconSplit; // 0xE8
	public float skillIconOffset; // 0xF0
	public float skillIconSplitSpace; // 0xF4
	private BattleServantSkillIConComponent[] skillIcon; // 0xF8
	private GameObject skillBtnFlashObject; // 0x100
	public Transform chargeTimeRoot; // 0x108
	public UILabel chargeTimeLabel; // 0x110
	public Transform addSkillChargeTimeRoot; // 0x118
	public UILabel addSkillChargeTimeLabel; // 0x120
	public UILabel addSkillAddChargeTimeSplitLabel; // 0x128
	public UILabel addSkillAddChargeTimeLabel; // 0x130
	public GameObject masterSkillBadStatus; // 0x138
	public UILabel masterSkillBadStatusLabel; // 0x140
	private const float chargeTimeRootPosYTop = -38;
	private const float chargeTimeRootPosYBottom = -58;
	public BattleBoostSkillIconComponent boostSkillIcon; // 0x148
	public BattleSkillConfComponent boostSkillConfWindow; // 0x150
	public BattlePerformanceEnemyMst enemyMasterPerf; // 0x158
	public GameObject masterSkillChargeRoot; // 0x160
	public UILabel masterSkillChargeLabel; // 0x168
	private GameObject masterBuffEffect; // 0x170
	public BattleItemListWindowComponent itemListWindow; // 0x178
	private bool isMasterBuffEffectPlaying; // 0x180
	private GameObject masterBuffPopLabelEffect; // 0x188
	private string masterBuffPopLabel; // 0x190
	private int masterBuffPopLabelColor; // 0x198
	private int[] masterBuffEffectList; // 0x1A0
	private const float masterIconFadeTime = 0.25;
	private const float masterIconHideAlpha = 0.01;
	private TweenAlpha effectTween; // 0x1A8
	private const float alphatime = 0.15;
	private const float appeartime = 0.1;
	private Vector3 pos_skillbtn; // 0x1B0
	private Vector3 pos_menubtn; // 0x1BC
	private bool isLongTap; // 0x1C8
	private int tmp_commandSpellId; // 0x1CC
	private BattleSelectServantWindow selectSvtWindow; // 0x1D0
	private BattleLogic.UseSkillObject tmp_useSkill; // 0x1D8
	private BattleLogic.UseSkillObject useSkillObject; // 0x1E0
	private BattleLogic.UseSkillObject actSkillObject; // 0x1E8
	private BattleSelectServantWindow skillselectSvtWindow; // 0x1F0
	private BattleSelectMainSubServantWindow selectMSWindow; // 0x1F8
	private int tmp_index; // 0x200
	[CompilerGeneratedAttribute] // RVA: 0xCD31C0 Offset: 0xCD31C0 VA: 0xCD31C0
	private static Predicate<string> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD31D0 Offset: 0xCD31D0 VA: 0xCD31D0
	private static Predicate<string> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD31E0 Offset: 0xCD31E0 VA: 0xCD31E0
	private static Action <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD31F0 Offset: 0xCD31F0 VA: 0xCD31F0
	private static Action <>f__am$cache3; // 0x20

	// Properties
	public bool IsMasterBuffEffectPlaying { get; }

	// Methods

	// RVA: 0x16C2CC4 Offset: 0x16C2CC4 VA: 0x16C2CC4
	public void .ctor() { }

	// RVA: 0x16C2CE0 Offset: 0x16C2CE0 VA: 0x16C2CE0
	public bool get_IsMasterBuffEffectPlaying() { }

	// RVA: 0x16C2CE8 Offset: 0x16C2CE8 VA: 0x16C2CE8
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x16C35F4 Offset: 0x16C35F4 VA: 0x16C35F4
	public void loadData() { }

	// RVA: 0x16C3D54 Offset: 0x16C3D54 VA: 0x16C3D54
	private void SetupMasterSkillBtn() { }

	// RVA: 0x16B8F70 Offset: 0x16B8F70 VA: 0x16B8F70
	public void updateCommandSpellIcon() { }

	// RVA: 0x16C3F2C Offset: 0x16C3F2C VA: 0x16C3F2C
	public void updateSkillIcon() { }

	// RVA: 0x16C4CBC Offset: 0x16C4CBC VA: 0x16C4CBC
	public void startTac() { }

	// RVA: 0x16C4D20 Offset: 0x16C4D20 VA: 0x16C4D20
	public void modeTac() { }

	// RVA: 0x16C4FAC Offset: 0x16C4FAC VA: 0x16C4FAC
	public void procOpenSkillWindow() { }

	// RVA: 0x16C517C Offset: 0x16C517C VA: 0x16C517C
	public void compOpenSkillWindow() { }

	// RVA: 0x16C51EC Offset: 0x16C51EC VA: 0x16C51EC
	public void procCloseSkillWindow() { }

	// RVA: 0x16C52B8 Offset: 0x16C52B8 VA: 0x16C52B8
	public void compCloseSkillWindow() { }

	// RVA: 0x16C5328 Offset: 0x16C5328 VA: 0x16C5328
	public void procOpenMasterMenu() { }

	// RVA: 0x16C53DC Offset: 0x16C53DC VA: 0x16C53DC
	public void compOpenMasterMenu() { }

	// RVA: 0x16C5458 Offset: 0x16C5458 VA: 0x16C5458
	public void procCloseSkill() { }

	// RVA: 0x16C54AC Offset: 0x16C54AC VA: 0x16C54AC
	public void compCloseALL() { }

	// RVA: 0x16C5510 Offset: 0x16C5510 VA: 0x16C5510
	public void compCloseSkill() { }

	// RVA: 0x16C5574 Offset: 0x16C5574 VA: 0x16C5574
	public void procOpenSpellWindow() { }

	// RVA: 0x16C56F8 Offset: 0x16C56F8 VA: 0x16C56F8
	public void compOpenSpellWindow() { }

	// RVA: 0x16C575C Offset: 0x16C575C VA: 0x16C575C
	public void procCloseSpellWindow() { }

	// RVA: 0x16C581C Offset: 0x16C581C VA: 0x16C581C
	public void compCloseSpellWindow() { }

	// RVA: 0x16C588C Offset: 0x16C588C VA: 0x16C588C
	public void procCloseButtonCommandSpellWindow() { }

	// RVA: 0x16C58F0 Offset: 0x16C58F0 VA: 0x16C58F0
	public void procUseCommandSpell(int commandSpellId) { }

	// RVA: 0x16C5964 Offset: 0x16C5964 VA: 0x16C5964
	public void checkCommandSpellTarget() { }

	// RVA: 0x16C5AA0 Offset: 0x16C5AA0 VA: 0x16C5AA0
	public void openSelectSvtWindow() { }

	// RVA: 0x16C5C64 Offset: 0x16C5C64 VA: 0x16C5C64
	public void selectedSvt(int uniqueId) { }

	// RVA: 0x16C5FB0 Offset: 0x16C5FB0 VA: 0x16C5FB0
	public void checkSkipFlg() { }

	// RVA: 0x16C610C Offset: 0x16C610C VA: 0x16C610C
