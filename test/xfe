
	// RVA: 0x2254314 Offset: 0x2254314 VA: 0x2254314
	public void .ctor() { }

	// RVA: 0x225433C Offset: 0x225433C VA: 0x225433C
	public void .ctor(string typeName) { }

	// RVA: 0x22543E8 Offset: 0x22543E8 VA: 0x22543E8
	public void .ctor(Type type) { }

	// RVA: 0x2254414 Offset: 0x2254414 VA: 0x2254414
	private static void .cctor() { }

	// RVA: 0x225430C Offset: 0x225430C VA: 0x225430C
	public Type get_LicenseProvider() { }

	// RVA: 0x225447C Offset: 0x225447C VA: 0x225447C Slot: 4
	public override object get_TypeId() { }

	// RVA: 0x225451C Offset: 0x225451C VA: 0x225451C Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22545C4 Offset: 0x22545C4 VA: 0x22545C4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.ComponentModel
public enum LicenseUsageMode // TypeDefIndex: 1255
{
	// Fields
	public int value__; // 0x0
	public const LicenseUsageMode Designtime = 1;
	public const LicenseUsageMode Runtime = 0;
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD00DC Offset: 0xBD00DC VA: 0xBD00DC
public sealed class ListBindableAttribute : Attribute // TypeDefIndex: 1256
{
	// Fields
	public static readonly ListBindableAttribute Default; // 0x0
	public static readonly ListBindableAttribute No; // 0x8
	public static readonly ListBindableAttribute Yes; // 0x10
	private bool bindable; // 0x10

	// Properties
	public bool ListBindable { get; }

	// Methods

	// RVA: 0x22545F8 Offset: 0x22545F8 VA: 0x22545F8
	public void .ctor(bool listBindable) { }

	// RVA: 0x2254628 Offset: 0x2254628 VA: 0x2254628
	public void .ctor(BindableSupport flags) { }

	// RVA: 0x225465C Offset: 0x225465C VA: 0x225465C
	private static void .cctor() { }

	// RVA: 0x2254714 Offset: 0x2254714 VA: 0x2254714 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x22547AC Offset: 0x22547AC VA: 0x22547AC Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x22547B8 Offset: 0x22547B8 VA: 0x22547B8 Slot: 5
	public override bool IsDefaultAttribute() { }

	// RVA: 0x22547A4 Offset: 0x22547A4 VA: 0x22547A4
	public bool get_ListBindable() { }
}

// Namespace: System.ComponentModel
public class ListChangedEventArgs : EventArgs // TypeDefIndex: 1257
{
	// Fields
	private ListChangedType changedType; // 0x10
	private int oldIndex; // 0x14
	private int newIndex; // 0x18
	private PropertyDescriptor propDesc; // 0x20

	// Properties
	public ListChangedType ListChangedType { get; }
	public int OldIndex { get; }
	public int NewIndex { get; }
	public PropertyDescriptor PropertyDescriptor { get; }

	// Methods

	// RVA: 0x217E5DC Offset: 0x217E5DC VA: 0x217E5DC
	public void .ctor(ListChangedType listChangedType, int newIndex) { }

	// RVA: 0x217E674 Offset: 0x217E674 VA: 0x217E674
	public void .ctor(ListChangedType listChangedType, PropertyDescriptor propDesc) { }

	// RVA: 0x217E5E4 Offset: 0x217E5E4 VA: 0x217E5E4
	public void .ctor(ListChangedType listChangedType, int newIndex, int oldIndex) { }

	// RVA: 0x217E6F8 Offset: 0x217E6F8 VA: 0x217E6F8
	public void .ctor(ListChangedType listChangedType, int newIndex, PropertyDescriptor propDesc) { }

	// RVA: 0x217E78C Offset: 0x217E78C VA: 0x217E78C
	public ListChangedType get_ListChangedType() { }

	// RVA: 0x217E794 Offset: 0x217E794 VA: 0x217E794
	public int get_OldIndex() { }

	// RVA: 0x217E79C Offset: 0x217E79C VA: 0x217E79C
	public int get_NewIndex() { }

	// RVA: 0x217E7A4 Offset: 0x217E7A4 VA: 0x217E7A4
	public PropertyDescriptor get_PropertyDescriptor() { }
}

// Namespace: System.ComponentModel
public enum ListChangedType // TypeDefIndex: 1258
{
	// Fields
	public int value__; // 0x0
	public const ListChangedType Reset = 0;
	public const ListChangedType ItemAdded = 1;
	public const ListChangedType ItemDeleted = 2;
	public const ListChangedType ItemMoved = 3;
	public const ListChangedType ItemChanged = 4;
	public const ListChangedType PropertyDescriptorAdded = 5;
	public const ListChangedType PropertyDescriptorDeleted = 6;
	public const ListChangedType PropertyDescriptorChanged = 7;
}

// Namespace: System.ComponentModel
public class ListSortDescription // TypeDefIndex: 1259
{
	// Fields
	private PropertyDescriptor propertyDescriptor; // 0x10
	private ListSortDirection sortDirection; // 0x18

	// Properties
	public PropertyDescriptor PropertyDescriptor { get; set; }
	public ListSortDirection SortDirection { get; set; }

	// Methods

	// RVA: 0x217EBC0 Offset: 0x217EBC0 VA: 0x217EBC0
	public void .ctor(PropertyDescriptor propertyDescriptor, ListSortDirection sortDirection) { }

	// RVA: 0x217EBFC Offset: 0x217EBFC VA: 0x217EBFC
	public PropertyDescriptor get_PropertyDescriptor() { }

	// RVA: 0x217EC04 Offset: 0x217EC04 VA: 0x217EC04
	public void set_PropertyDescriptor(PropertyDescriptor value) { }

	// RVA: 0x217EC0C Offset: 0x217EC0C VA: 0x217EC0C
	public ListSortDirection get_SortDirection() { }

	// RVA: 0x217EC14 Offset: 0x217EC14 VA: 0x217EC14
	public void set_SortDirection(ListSortDirection value) { }
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xBD0128 Offset: 0xBD0128 VA: 0xBD0128
public class ListSortDescriptionCollection : ICollection, IEnumerable, IList // TypeDefIndex: 1260
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	public int Count { get; }
	public ListSortDescription Item { get; set; }

	// Methods

	// RVA: 0x217EC1C Offset: 0x217EC1C VA: 0x217EC1C
	public void .ctor() { }

	// RVA: 0x217EC88 Offset: 0x217EC88 VA: 0x217EC88
	public void .ctor(ListSortDescription[] sorts) { }

	// RVA: 0x217ED78 Offset: 0x217ED78 VA: 0x217ED78 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x217EE30 Offset: 0x217EE30 VA: 0x217EE30 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x217EEA4 Offset: 0x217EEA4 VA: 0x217EEA4 Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x217EEDC Offset: 0x217EEDC VA: 0x217EEDC Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x217EF14 Offset: 0x217EF14 VA: 0x217EF14 Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x217EF4C Offset: 0x217EF4C VA: 0x217EF4C Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x217EF84 Offset: 0x217EF84 VA: 0x217EF84 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x217EFBC Offset: 0x217EFBC VA: 0x217EFBC Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x217EFFC Offset: 0x217EFFC VA: 0x217EFFC Slot: 14
	private void System.Collections.IList.Clear() { }

	// RVA: 0x217F034 Offset: 0x217F034 VA: 0x217F034 Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x217F084 Offset: 0x217F084 VA: 0x217F084 Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x217F0C4 Offset: 0x217F0C4 VA: 0x217F0C4 Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x217F104 Offset: 0x217F104 VA: 0x217F104 Slot: 4
	public int get_Count() { }

	// RVA: 0x217ED7C Offset: 0x217ED7C VA: 0x217ED7C
	public ListSortDescription get_Item(int index) { }

	// RVA: 0x217F13C Offset: 0x217F13C VA: 0x217F13C
	public void set_Item(int index, ListSortDescription value) { }

	// RVA: 0x217F1B0 Offset: 0x217F1B0 VA: 0x217F1B0 Slot: 15
	public bool Contains(object value) { }

	// RVA: 0x217F1F0 Offset: 0x217F1F0 VA: 0x217F1F0 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x217F240 Offset: 0x217F240 VA: 0x217F240 Slot: 16
	public int IndexOf(object value) { }
}

// Namespace: System.ComponentModel
public enum ListSortDirection // TypeDefIndex: 1261
{
	// Fields
	public int value__; // 0x0
	public const ListSortDirection Ascending = 0;
	public const ListSortDirection Descending = 1;
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD0160 Offset: 0xBD0160 VA: 0xBD0160
public sealed class LocalizableAttribute : Attribute // TypeDefIndex: 1262
{
	// Fields
	private bool localizable; // 0x10
	public static readonly LocalizableAttribute Default; // 0x0
	public static readonly LocalizableAttribute No; // 0x8
	public static readonly LocalizableAttribute Yes; // 0x10

	// Properties
	public bool IsLocalizable { get; }

	// Methods

	// RVA: 0x217F280 Offset: 0x217F280 VA: 0x217F280
	public void .ctor(bool localizable) { }

	// RVA: 0x217F2B0 Offset: 0x217F2B0 VA: 0x217F2B0
	private static void .cctor() { }

	// RVA: 0x217F360 Offset: 0x217F360 VA: 0x217F360
	public bool get_IsLocalizable() { }

	// RVA: 0x217F368 Offset: 0x217F368 VA: 0x217F368 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x217F408 Offset: 0x217F408 VA: 0x217F408 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x217F414 Offset: 0x217F414 VA: 0x217F414 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[TypeConverterAttribute] // RVA: 0xBD0174 Offset: 0xBD0174 VA: 0xBD0174
[DesignerAttribute] // RVA: 0xBD0174 Offset: 0xBD0174 VA: 0xBD0174
[ComVisibleAttribute] // RVA: 0xBD0174 Offset: 0xBD0174 VA: 0xBD0174
[DesignerCategoryAttribute] // RVA: 0xBD0174 Offset: 0xBD0174 VA: 0xBD0174
public class MarshalByValueComponent : IDisposable, IServiceProvider, IComponent // TypeDefIndex: 1263
{
	// Fields
	private EventHandlerList eventList; // 0x10
	private ISite mySite; // 0x18
	private object disposedEvent; // 0x20

	// Properties
	[DesignerSerializationVisibilityAttribute] // RVA: 0xBD2A10 Offset: 0xBD2A10 VA: 0xBD2A10
	[BrowsableAttribute] // RVA: 0xBD2A10 Offset: 0xBD2A10 VA: 0xBD2A10
	public virtual IContainer Container { get; }
	[BrowsableAttribute] // RVA: 0xBD2A50 Offset: 0xBD2A50 VA: 0xBD2A50
	[DesignerSerializationVisibilityAttribute] // RVA: 0xBD2A50 Offset: 0xBD2A50 VA: 0xBD2A50
	public virtual bool DesignMode { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xBD2A90 Offset: 0xBD2A90 VA: 0xBD2A90
	[BrowsableAttribute] // RVA: 0xBD2A90 Offset: 0xBD2A90 VA: 0xBD2A90
	public virtual ISite Site { get; set; }
	protected EventHandlerList Events { get; }

	// Methods

	// RVA: 0x217F4AC Offset: 0x217F4AC VA: 0x217F4AC
	public void .ctor() { }

	// RVA: 0x217F514 Offset: 0x217F514 VA: 0x217F514 Slot: 6
	public void add_Disposed(EventHandler value) { }

	// RVA: 0x217F5CC Offset: 0x217F5CC VA: 0x217F5CC Slot: 7
	public void remove_Disposed(EventHandler value) { }

	// RVA: 0x217F618 Offset: 0x217F618 VA: 0x217F618 Slot: 4
	public void Dispose() { }

	[MonoTODOAttribute] // RVA: 0xBD123C Offset: 0xBD123C VA: 0xBD123C
	// RVA: 0x217F64C Offset: 0x217F64C VA: 0x217F64C Slot: 10
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x217F650 Offset: 0x217F650 VA: 0x217F650 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x217F6D0 Offset: 0x217F6D0 VA: 0x217F6D0 Slot: 11
	public virtual object GetService(Type service) { }

	// RVA: 0x217F7A0 Offset: 0x217F7A0 VA: 0x217F7A0 Slot: 12
	public virtual IContainer get_Container() { }

	// RVA: 0x217F860 Offset: 0x217F860 VA: 0x217F860 Slot: 13
	public virtual bool get_DesignMode() { }

	// RVA: 0x217F920 Offset: 0x217F920 VA: 0x217F920 Slot: 14
	public virtual ISite get_Site() { }

	// RVA: 0x217F928 Offset: 0x217F928 VA: 0x217F928 Slot: 15
	public virtual void set_Site(ISite value) { }

	// RVA: 0x217F930 Offset: 0x217F930 VA: 0x217F930 Slot: 3
	public override string ToString() { }

	// RVA: 0x217F560 Offset: 0x217F560 VA: 0x217F560
	protected EventHandlerList get_Events() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBD0258 Offset: 0xBD0258 VA: 0xBD0258
public abstract class MemberDescriptor // TypeDefIndex: 1264
{
	// Fields
	private string name; // 0x10
	private Attribute[] attrs; // 0x18
	private AttributeCollection attrCollection; // 0x20
	private static IComparer default_comparer; // 0x0

	// Properties
	protected virtual Attribute[] AttributeArray { get; set; }
	public virtual AttributeCollection Attributes { get; }
	public virtual string Category { get; }
	public virtual string Description { get; }
	public virtual bool DesignTimeOnly { get; }
	public virtual string DisplayName { get; }
	public virtual string Name { get; }
	public virtual bool IsBrowsable { get; }
	protected virtual int NameHashCode { get; }
	internal static IComparer DefaultComparer { get; }

	// Methods

	// RVA: 0x217FA80 Offset: 0x217FA80 VA: 0x217FA80
	protected void .ctor(string name, Attribute[] attrs) { }

	// RVA: 0x217FAB8 Offset: 0x217FAB8 VA: 0x217FAB8
	protected void .ctor(MemberDescriptor reference, Attribute[] attrs) { }

	// RVA: 0x217FB00 Offset: 0x217FB00 VA: 0x217FB00
	protected void .ctor(string name) { }

	// RVA: 0x217FB2C Offset: 0x217FB2C VA: 0x217FB2C
	protected void .ctor(MemberDescriptor reference) { }

	// RVA: 0x217FB94 Offset: 0x217FB94 VA: 0x217FB94 Slot: 4
	protected virtual Attribute[] get_AttributeArray() { }

	// RVA: 0x2180070 Offset: 0x2180070 VA: 0x2180070 Slot: 5
	protected virtual void set_AttributeArray(Attribute[] value) { }

	// RVA: 0x2180078 Offset: 0x2180078 VA: 0x2180078 Slot: 6
	protected virtual void FillAttributes(IList attributeList) { }

	// RVA: 0x218007C Offset: 0x218007C VA: 0x218007C Slot: 7
	public virtual AttributeCollection get_Attributes() { }

	// RVA: 0x21800B4 Offset: 0x21800B4 VA: 0x21800B4 Slot: 8
	protected virtual AttributeCollection CreateAttributeCollection() { }

	// RVA: 0x2180130 Offset: 0x2180130 VA: 0x2180130 Slot: 9
	public virtual string get_Category() { }

	// RVA: 0x21802F8 Offset: 0x21802F8 VA: 0x21802F8 Slot: 10
	public virtual string get_Description() { }

	// RVA: 0x218040C Offset: 0x218040C VA: 0x218040C Slot: 11
	public virtual bool get_DesignTimeOnly() { }

	// RVA: 0x21804E0 Offset: 0x21804E0 VA: 0x21804E0 Slot: 12
	public virtual string get_DisplayName() { }

	// RVA: 0x21805D4 Offset: 0x21805D4 VA: 0x21805D4 Slot: 13
	public virtual string get_Name() { }

	// RVA: 0x21805DC Offset: 0x21805DC VA: 0x21805DC Slot: 14
	public virtual bool get_IsBrowsable() { }

	// RVA: 0x21806B0 Offset: 0x21806B0 VA: 0x21806B0 Slot: 15
	protected virtual int get_NameHashCode() { }

	// RVA: 0x21806E0 Offset: 0x21806E0 VA: 0x21806E0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x21806E8 Offset: 0x21806E8 VA: 0x21806E8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x21807C4 Offset: 0x21807C4 VA: 0x21807C4
	protected static ISite GetSite(object component) { }

	[ObsoleteAttribute] // RVA: 0xBD124C Offset: 0xBD124C VA: 0xBD124C
	// RVA: 0x2180850 Offset: 0x2180850 VA: 0x2180850
	protected static object GetInvokee(Type componentClass, object component) { }

	// RVA: 0x2180C50 Offset: 0x2180C50 VA: 0x2180C50 Slot: 16
	protected virtual object GetInvocationTarget(Type type, object instance) { }

	// RVA: 0x2180D0C Offset: 0x2180D0C VA: 0x2180D0C
	protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType) { }

	// RVA: 0x2180D14 Offset: 0x2180D14 VA: 0x2180D14
	protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType, bool publicOnly) { }

	// RVA: 0x2180D78 Offset: 0x2180D78 VA: 0x2180D78
	internal static IComparer get_DefaultComparer() { }
}

// Namespace: 
private class MemberDescriptor.MemberDescriptorComparer : IComparer // TypeDefIndex: 1265
{
	// Methods

	// RVA: 0x2180E00 Offset: 0x2180E00 VA: 0x2180E00
	public void .ctor() { }

	// RVA: 0x2180E08 Offset: 0x2180E08 VA: 0x2180E08 Slot: 4
	public int Compare(object x, object y) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD026C Offset: 0xBD026C VA: 0xBD026C
public sealed class MergablePropertyAttribute : Attribute // TypeDefIndex: 1266
{
	// Fields
	private bool mergable; // 0x10
	public static readonly MergablePropertyAttribute Default; // 0x0
	public static readonly MergablePropertyAttribute No; // 0x8
	public static readonly MergablePropertyAttribute Yes; // 0x10

	// Properties
	public bool AllowMerge { get; }

	// Methods

	// RVA: 0x21810DC Offset: 0x21810DC VA: 0x21810DC
	public void .ctor(bool allowMerge) { }

	// RVA: 0x218110C Offset: 0x218110C VA: 0x218110C
	private static void .cctor() { }

	// RVA: 0x21811C4 Offset: 0x21811C4 VA: 0x21811C4
	public bool get_AllowMerge() { }

	// RVA: 0x21811CC Offset: 0x21811CC VA: 0x21811CC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x218126C Offset: 0x218126C VA: 0x218126C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2181278 Offset: 0x2181278 VA: 0x2181278 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class MultilineStringConverter : TypeConverter // TypeDefIndex: 1267
{
	// Methods

	// RVA: 0x2181310 Offset: 0x2181310 VA: 0x2181310
	public void .ctor() { }

	[MonoTODOAttribute] // RVA: 0xBD1284 Offset: 0xBD1284 VA: 0xBD1284
	// RVA: 0x2181320 Offset: 0x2181320 VA: 0x2181320 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	[MonoTODOAttribute] // RVA: 0xBD1294 Offset: 0xBD1294 VA: 0xBD1294
	// RVA: 0x2181388 Offset: 0x2181388 VA: 0x2181388 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	[MonoTODOAttribute] // RVA: 0xBD12A4 Offset: 0xBD12A4 VA: 0xBD12A4
	// RVA: 0x21813F0 Offset: 0x21813F0 VA: 0x21813F0 Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD0280 Offset: 0xBD0280 VA: 0xBD0280
public sealed class NotifyParentPropertyAttribute : Attribute // TypeDefIndex: 1268
{
	// Fields
	private bool notifyParent; // 0x10
	public static readonly NotifyParentPropertyAttribute Default; // 0x0
	public static readonly NotifyParentPropertyAttribute No; // 0x8
	public static readonly NotifyParentPropertyAttribute Yes; // 0x10

	// Properties
	public bool NotifyParent { get; }

	// Methods

	// RVA: 0x2181458 Offset: 0x2181458 VA: 0x2181458
	public void .ctor(bool notifyParent) { }

	// RVA: 0x2181488 Offset: 0x2181488 VA: 0x2181488
	private static void .cctor() { }

	// RVA: 0x2181538 Offset: 0x2181538 VA: 0x2181538
	public bool get_NotifyParent() { }

	// RVA: 0x2181540 Offset: 0x2181540 VA: 0x2181540 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x21815E0 Offset: 0x21815E0 VA: 0x21815E0 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x21815EC Offset: 0x21815EC VA: 0x21815EC Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class NullableConverter : TypeConverter // TypeDefIndex: 1269
{
	// Fields
	private Type nullableType; // 0x10
	private Type underlyingType; // 0x18
	private TypeConverter underlyingTypeConverter; // 0x20

	// Properties
	public Type NullableType { get; }
	public Type UnderlyingType { get; }
	public TypeConverter UnderlyingTypeConverter { get; }

	// Methods

	// RVA: 0x2181684 Offset: 0x2181684 VA: 0x2181684
	public void .ctor(Type nullableType) { }

	// RVA: 0x2181B28 Offset: 0x2181B28 VA: 0x2181B28 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x2181BD4 Offset: 0x2181BD4 VA: 0x2181BD4 Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x2181C00 Offset: 0x2181C00 VA: 0x2181C00 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x2181DE0 Offset: 0x2181DE0 VA: 0x2181DE0 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x2182048 Offset: 0x2182048 VA: 0x2182048 Slot: 8
	public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues) { }

	// RVA: 0x2182068 Offset: 0x2182068 VA: 0x2182068 Slot: 9
	public override bool GetCreateInstanceSupported(ITypeDescriptorContext context) { }

	// RVA: 0x2182088 Offset: 0x2182088 VA: 0x2182088 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	// RVA: 0x21820A8 Offset: 0x21820A8 VA: 0x21820A8 Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }

	// RVA: 0x21820C0 Offset: 0x21820C0 VA: 0x21820C0 Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x21821FC Offset: 0x21821FC VA: 0x21821FC Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x218221C Offset: 0x218221C VA: 0x218221C Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }

	// RVA: 0x2182240 Offset: 0x2182240 VA: 0x2182240 Slot: 15
	public override bool IsValid(ITypeDescriptorContext context, object value) { }

	// RVA: 0x2182268 Offset: 0x2182268 VA: 0x2182268
	public Type get_NullableType() { }

	// RVA: 0x2182270 Offset: 0x2182270 VA: 0x2182270
	public Type get_UnderlyingType() { }

	// RVA: 0x2182278 Offset: 0x2182278 VA: 0x2182278
	public TypeConverter get_UnderlyingTypeConverter() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD0294 Offset: 0xBD0294 VA: 0xBD0294
public sealed class PasswordPropertyTextAttribute : Attribute // TypeDefIndex: 1270
{
	// Fields
	public static readonly PasswordPropertyTextAttribute Default; // 0x0
	public static readonly PasswordPropertyTextAttribute No; // 0x8
	public static readonly PasswordPropertyTextAttribute Yes; // 0x10
	private bool _password; // 0x10

	// Properties
	public bool Password { get; }

	// Methods

	// RVA: 0x2182280 Offset: 0x2182280 VA: 0x2182280
	public void .ctor() { }

	// RVA: 0x21822A8 Offset: 0x21822A8 VA: 0x21822A8
	public void .ctor(bool password) { }

	// RVA: 0x21822D8 Offset: 0x21822D8 VA: 0x21822D8
	private static void .cctor() { }

	// RVA: 0x2182370 Offset: 0x2182370 VA: 0x2182370
	public bool get_Password() { }

	// RVA: 0x2182378 Offset: 0x2182378 VA: 0x2182378 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x2182408 Offset: 0x2182408 VA: 0x2182408 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x2182434 Offset: 0x2182434 VA: 0x2182434 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class ProgressChangedEventArgs : EventArgs // TypeDefIndex: 1271
{
	// Fields
	private int progress; // 0x10
	private object state; // 0x18

	// Properties
	public int ProgressPercentage { get; }
	public object UserState { get; }

	// Methods

	// RVA: 0x21824B4 Offset: 0x21824B4 VA: 0x21824B4
	public void .ctor(int progressPercentage, object userState) { }

	// RVA: 0x2182538 Offset: 0x2182538 VA: 0x2182538
	public int get_ProgressPercentage() { }

	// RVA: 0x2182540 Offset: 0x2182540 VA: 0x2182540
	public object get_UserState() { }
}

// Namespace: System.ComponentModel
public class PropertyChangedEventArgs : EventArgs // TypeDefIndex: 1272
{
	// Fields
	private string propertyName; // 0x10

	// Properties
	public string PropertyName { get; }

	// Methods

	// RVA: 0x2182954 Offset: 0x2182954 VA: 0x2182954
	public void .ctor(string name) { }

	// RVA: 0x21829D0 Offset: 0x21829D0 VA: 0x21829D0
	public string get_PropertyName() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xBD02A8 Offset: 0xBD02A8 VA: 0xBD02A8
public abstract class PropertyDescriptor : MemberDescriptor // TypeDefIndex: 1273
{
	// Fields
	private TypeConverter converter; // 0x28
	private Hashtable notifiers; // 0x30

	// Properties
	public abstract Type ComponentType { get; }
	public virtual TypeConverter Converter { get; }
	public virtual bool IsLocalizable { get; }
	public abstract bool IsReadOnly { get; }
	public abstract Type PropertyType { get; }
	public virtual bool SupportsChangeEvents { get; }
	public DesignerSerializationVisibility SerializationVisibility { get; }

	// Methods

	// RVA: 0x2182DE4 Offset: 0x2182DE4 VA: 0x2182DE4
	protected void .ctor(MemberDescriptor reference) { }

	// RVA: 0x2182DE8 Offset: 0x2182DE8 VA: 0x2182DE8
	protected void .ctor(MemberDescriptor reference, Attribute[] attrs) { }

	// RVA: 0x2182DEC Offset: 0x2182DEC VA: 0x2182DEC
	protected void .ctor(string name, Attribute[] attrs) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract Type get_ComponentType();

	// RVA: 0x2182E24 Offset: 0x2182E24 VA: 0x2182E24 Slot: 18
	public virtual TypeConverter get_Converter() { }

	// RVA: 0x2183498 Offset: 0x2183498 VA: 0x2183498 Slot: 19
	public virtual bool get_IsLocalizable() { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract Type get_PropertyType();

	// RVA: 0x218356C Offset: 0x218356C VA: 0x218356C Slot: 22
	public virtual bool get_SupportsChangeEvents() { }

	// RVA: 0x2183574 Offset: 0x2183574 VA: 0x2183574
	public DesignerSerializationVisibility get_SerializationVisibility() { }

	// RVA: 0x2183644 Offset: 0x2183644 VA: 0x2183644 Slot: 23
	public virtual void AddValueChanged(object component, EventHandler handler) { }

	// RVA: 0x2183848 Offset: 0x2183848 VA: 0x2183848 Slot: 24
	public virtual void RemoveValueChanged(object component, EventHandler handler) { }

	// RVA: 0x2183A38 Offset: 0x2183A38 VA: 0x2183A38 Slot: 6
	protected override void FillAttributes(IList attributeList) { }

	// RVA: 0x2183A3C Offset: 0x2183A3C VA: 0x2183A3C Slot: 16
	protected override object GetInvocationTarget(Type type, object instance) { }

	// RVA: 0x2183B54 Offset: 0x2183B54 VA: 0x2183B54
	protected internal EventHandler GetValueChangedHandler(object component) { }

	// RVA: 0x2183C24 Offset: 0x2183C24 VA: 0x2183C24 Slot: 25
	protected virtual void OnValueChanged(object component, EventArgs e) { }

	// RVA: -1 Offset: -1 Slot: 26
	public abstract object GetValue(object component);

	// RVA: -1 Offset: -1 Slot: 27
	public abstract void SetValue(object component, object value);

	// RVA: -1 Offset: -1 Slot: 28
	public abstract void ResetValue(object component);

	// RVA: -1 Offset: -1 Slot: 29
	public abstract bool CanResetValue(object component);

	// RVA: -1 Offset: -1 Slot: 30
	public abstract bool ShouldSerializeValue(object component);

	// RVA: 0x218327C Offset: 0x218327C VA: 0x218327C
	protected object CreateInstance(Type type) { }

	// RVA: 0x2183EDC Offset: 0x2183EDC VA: 0x2183EDC Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2183FBC Offset: 0x2183FBC VA: 0x2183FBC
	public PropertyDescriptorCollection GetChildProperties() { }

	// RVA: 0x2183FD4 Offset: 0x2183FD4 VA: 0x2183FD4
	public PropertyDescriptorCollection GetChildProperties(object instance) { }

	// RVA: 0x2183FE8 Offset: 0x2183FE8 VA: 0x2183FE8
	public PropertyDescriptorCollection GetChildProperties(Attribute[] filter) { }

	// RVA: 0x2184004 Offset: 0x2184004 VA: 0x2184004 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x218400C Offset: 0x218400C VA: 0x218400C Slot: 31
	public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter) { }

	// RVA: 0x21840F8 Offset: 0x21840F8 VA: 0x21840F8 Slot: 32
	public virtual object GetEditor(Type editorBaseType) { }

	// RVA: 0x21830FC Offset: 0x21830FC VA: 0x21830FC
	protected Type GetTypeFromName(string typeName) { }
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xBD02BC Offset: 0xBD02BC VA: 0xBD02BC
public class PropertyDescriptorCollection : ICollection, IDictionary, IEnumerable, IList // TypeDefIndex: 1274
{
	// Fields
	public static readonly PropertyDescriptorCollection Empty; // 0x0
	private ArrayList properties; // 0x10
	private bool readOnly; // 0x18

	// Properties
	private bool System.Collections.IDictionary.IsFixedSize { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IDictionary.IsReadOnly { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private int System.Collections.ICollection.Count { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private object System.Collections.IDictionary.Item { get; set; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	public virtual PropertyDescriptor Item { get; }
	public virtual PropertyDescriptor Item { get; }

	// Methods

	// RVA: 0x218455C Offset: 0x218455C VA: 0x218455C
	public void .ctor(PropertyDescriptor[] properties) { }

	// RVA: 0x2184608 Offset: 0x2184608 VA: 0x2184608
	public void .ctor(PropertyDescriptor[] properties, bool readOnly) { }

	// RVA: 0x2184634 Offset: 0x2184634 VA: 0x2184634
	private void .ctor() { }

	// RVA: 0x218463C Offset: 0x218463C VA: 0x218463C
	private static void .cctor() { }

	// RVA: 0x21846A8 Offset: 0x21846A8 VA: 0x21846A8 Slot: 24
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x218485C Offset: 0x218485C VA: 0x218485C Slot: 15
	private void System.Collections.IDictionary.Add(object key, object value) { }

	// RVA: 0x2184930 Offset: 0x2184930 VA: 0x2184930 Slot: 25
	private void System.Collections.IList.Clear() { }

	// RVA: 0x21849D4 Offset: 0x21849D4 VA: 0x21849D4 Slot: 16
	private void System.Collections.IDictionary.Clear() { }

	// RVA: 0x21849D8 Offset: 0x21849D8 VA: 0x21849D8 Slot: 26
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x2184B10 Offset: 0x2184B10 VA: 0x2184B10 Slot: 17
	private bool System.Collections.IDictionary.Contains(object value) { }

	// RVA: 0x2184C08 Offset: 0x2184C08 VA: 0x2184C08 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[MonoTODOAttribute] // RVA: 0xBD12B4 Offset: 0xBD12B4 VA: 0xBD12B4
	// RVA: 0x2184C18 Offset: 0x2184C18 VA: 0x2184C18 Slot: 18
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }

	// RVA: 0x2184C80 Offset: 0x2184C80 VA: 0x2184C80 Slot: 27
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x2184DB4 Offset: 0x2184DB4 VA: 0x2184DB4 Slot: 28
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x2184F54 Offset: 0x2184F54 VA: 0x2184F54 Slot: 19
	private void System.Collections.IDictionary.Remove(object value) { }

	// RVA: 0x21850DC Offset: 0x21850DC VA: 0x21850DC Slot: 29
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x21851B4 Offset: 0x21851B4 VA: 0x21851B4 Slot: 30
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x2185268 Offset: 0x2185268 VA: 0x2185268 Slot: 9
	private bool System.Collections.IDictionary.get_IsFixedSize() { }

	// RVA: 0x218530C Offset: 0x218530C VA: 0x218530C Slot: 20
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x2185314 Offset: 0x2185314 VA: 0x2185314 Slot: 10
	private bool System.Collections.IDictionary.get_IsReadOnly() { }

	// RVA: 0x21853BC Offset: 0x21853BC VA: 0x21853BC Slot: 21
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x21853C4 Offset: 0x21853C4 VA: 0x21853C4 Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x21853CC Offset: 0x21853CC VA: 0x21853CC Slot: 4
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x218543C Offset: 0x218543C VA: 0x218543C Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x2185444 Offset: 0x2185444 VA: 0x2185444 Slot: 13
	private ICollection System.Collections.IDictionary.get_Keys() { }

	// RVA: 0x21857E4 Offset: 0x21857E4 VA: 0x21857E4 Slot: 14
	private ICollection System.Collections.IDictionary.get_Values() { }

	// RVA: 0x21858C4 Offset: 0x21858C4 VA: 0x21858C4 Slot: 11
	private object System.Collections.IDictionary.get_Item(object key) { }

	// RVA: 0x218594C Offset: 0x218594C VA: 0x218594C Slot: 12
	private void System.Collections.IDictionary.set_Item(object key, object value) { }

	// RVA: 0x2185B48 Offset: 0x2185B48 VA: 0x2185B48 Slot: 22
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x2185B88 Offset: 0x2185B88 VA: 0x2185B88 Slot: 23
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x2184780 Offset: 0x2184780 VA: 0x2184780
	public int Add(PropertyDescriptor value) { }

	// RVA: 0x2184934 Offset: 0x2184934 VA: 0x2184934 Slot: 31
	public void Clear() { }

	// RVA: 0x2184AD0 Offset: 0x2184AD0 VA: 0x2184AD0
	public bool Contains(PropertyDescriptor value) { }

	// RVA: 0x2185C40 Offset: 0x2185C40 VA: 0x2185C40 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x2185C90 Offset: 0x2185C90 VA: 0x2185C90 Slot: 32
	public virtual PropertyDescriptor Find(string name, bool ignoreCase) { }

	// RVA: 0x2185EA0 Offset: 0x2185EA0 VA: 0x2185EA0 Slot: 33
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x2184D74 Offset: 0x2184D74 VA: 0x2184D74
	public int IndexOf(PropertyDescriptor value) { }

	// RVA: 0x2184E9C Offset: 0x2184E9C VA: 0x2184E9C
	public void Insert(int index, PropertyDescriptor value) { }

	// RVA: 0x218502C Offset: 0x218502C VA: 0x218502C
	public void Remove(PropertyDescriptor value) { }

	// RVA: 0x21851B8 Offset: 0x21851B8 VA: 0x21851B8 Slot: 34
	public void RemoveAt(int index) { }

	// RVA: 0x2185ED8 Offset: 0x2185ED8 VA: 0x2185ED8
	private PropertyDescriptorCollection CloneCollection() { }

	// RVA: 0x2186000 Offset: 0x2186000 VA: 0x2186000 Slot: 35
	public virtual PropertyDescriptorCollection Sort() { }

	// RVA: 0x2186088 Offset: 0x2186088 VA: 0x2186088 Slot: 36
	public virtual PropertyDescriptorCollection Sort(IComparer comparer) { }

	// RVA: 0x21860C4 Offset: 0x21860C4 VA: 0x21860C4 Slot: 37
	public virtual PropertyDescriptorCollection Sort(string[] order) { }

	// RVA: 0x2186178 Offset: 0x2186178 VA: 0x2186178 Slot: 38
	public virtual PropertyDescriptorCollection Sort(string[] order, IComparer comparer) { }

	// RVA: 0x2186038 Offset: 0x2186038 VA: 0x2186038
	protected void InternalSort(IComparer ic) { }

	// RVA: 0x2186100 Offset: 0x2186100 VA: 0x2186100
	protected void InternalSort(string[] order) { }

	// RVA: 0x2186238 Offset: 0x2186238 VA: 0x2186238
	private ArrayList ExtractItems(string[] names) { }

	// RVA: 0x2186530 Offset: 0x2186530 VA: 0x2186530
	internal PropertyDescriptorCollection Filter(Attribute[] attributes) { }

	// RVA: 0x2185404 Offset: 0x2185404 VA: 0x2185404 Slot: 39
	public int get_Count() { }

	// RVA: 0x2186914 Offset: 0x2186914 VA: 0x2186914 Slot: 40
	public virtual PropertyDescriptor get_Item(string s) { }

	// RVA: 0x2186928 Offset: 0x2186928 VA: 0x2186928 Slot: 41
	public virtual PropertyDescriptor get_Item(int index) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xBD02F4 Offset: 0xBD02F4 VA: 0xBD02F4
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1275
{
	// Fields
	private bool read_only; // 0x10
	public static readonly ReadOnlyAttribute No; // 0x0
	public static readonly ReadOnlyAttribute Yes; // 0x8
	public static readonly ReadOnlyAttribute Default; // 0x10

	// Properties
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x2186A1C Offset: 0x2186A1C VA: 0x2186A1C
	public void .ctor(bool read_only) { }
