	// Fields
	public int value__; // 0x0
	public const LicenseUsageMode Designtime = 1;
	public const LicenseUsageMode Runtime = 0;
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C204 Offset: 0xC3C204 VA: 0xC3C204
public sealed class ListBindableAttribute : Attribute // TypeDefIndex: 1256
{
	// Fields
	public static readonly ListBindableAttribute Default; // 0x0
	public static readonly ListBindableAttribute No; // 0x8
	public static readonly ListBindableAttribute Yes; // 0x10
	private bool bindable; // 0x10

	// Properties
	public bool ListBindable { get; }

	// Methods

	// RVA: 0x10C4C8C Offset: 0x10C4C8C VA: 0x10C4C8C
	public void .ctor(bool listBindable) { }

	// RVA: 0x10C4CBC Offset: 0x10C4CBC VA: 0x10C4CBC
	public void .ctor(BindableSupport flags) { }

	// RVA: 0x10C4CF0 Offset: 0x10C4CF0 VA: 0x10C4CF0
	private static void .cctor() { }

	// RVA: 0x10C4DA8 Offset: 0x10C4DA8 VA: 0x10C4DA8 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x10C4E40 Offset: 0x10C4E40 VA: 0x10C4E40 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x10C4E4C Offset: 0x10C4E4C VA: 0x10C4E4C Slot: 5
	public override bool IsDefaultAttribute() { }

	// RVA: 0x10C4E38 Offset: 0x10C4E38 VA: 0x10C4E38
	public bool get_ListBindable() { }
}

// Namespace: System.ComponentModel
public class ListChangedEventArgs : EventArgs // TypeDefIndex: 1257
{
	// Fields
	private ListChangedType changedType; // 0x10
	private int oldIndex; // 0x14
	private int newIndex; // 0x18
	private PropertyDescriptor propDesc; // 0x20

	// Properties
	public ListChangedType ListChangedType { get; }
	public int OldIndex { get; }
	public int NewIndex { get; }
	public PropertyDescriptor PropertyDescriptor { get; }

	// Methods

	// RVA: 0x104B204 Offset: 0x104B204 VA: 0x104B204
	public void .ctor(ListChangedType listChangedType, int newIndex) { }

	// RVA: 0x104B29C Offset: 0x104B29C VA: 0x104B29C
	public void .ctor(ListChangedType listChangedType, PropertyDescriptor propDesc) { }

	// RVA: 0x104B20C Offset: 0x104B20C VA: 0x104B20C
	public void .ctor(ListChangedType listChangedType, int newIndex, int oldIndex) { }

	// RVA: 0x104B320 Offset: 0x104B320 VA: 0x104B320
	public void .ctor(ListChangedType listChangedType, int newIndex, PropertyDescriptor propDesc) { }

	// RVA: 0x104B3B4 Offset: 0x104B3B4 VA: 0x104B3B4
	public ListChangedType get_ListChangedType() { }

	// RVA: 0x104B3BC Offset: 0x104B3BC VA: 0x104B3BC
	public int get_OldIndex() { }

	// RVA: 0x104B3C4 Offset: 0x104B3C4 VA: 0x104B3C4
	public int get_NewIndex() { }

	// RVA: 0x104B3CC Offset: 0x104B3CC VA: 0x104B3CC
	public PropertyDescriptor get_PropertyDescriptor() { }
}

// Namespace: System.ComponentModel
public enum ListChangedType // TypeDefIndex: 1258
{
	// Fields
	public int value__; // 0x0
	public const ListChangedType Reset = 0;
	public const ListChangedType ItemAdded = 1;
	public const ListChangedType ItemDeleted = 2;
	public const ListChangedType ItemMoved = 3;
	public const ListChangedType ItemChanged = 4;
	public const ListChangedType PropertyDescriptorAdded = 5;
	public const ListChangedType PropertyDescriptorDeleted = 6;
	public const ListChangedType PropertyDescriptorChanged = 7;
}

// Namespace: System.ComponentModel
public class ListSortDescription // TypeDefIndex: 1259
{
	// Fields
	private PropertyDescriptor propertyDescriptor; // 0x10
	private ListSortDirection sortDirection; // 0x18

	// Properties
	public PropertyDescriptor PropertyDescriptor { get; set; }
	public ListSortDirection SortDirection { get; set; }

	// Methods

	// RVA: 0x104B7E8 Offset: 0x104B7E8 VA: 0x104B7E8
	public void .ctor(PropertyDescriptor propertyDescriptor, ListSortDirection sortDirection) { }

	// RVA: 0x104B824 Offset: 0x104B824 VA: 0x104B824
	public PropertyDescriptor get_PropertyDescriptor() { }

	// RVA: 0x104B82C Offset: 0x104B82C VA: 0x104B82C
	public void set_PropertyDescriptor(PropertyDescriptor value) { }

	// RVA: 0x104B834 Offset: 0x104B834 VA: 0x104B834
	public ListSortDirection get_SortDirection() { }

	// RVA: 0x104B83C Offset: 0x104B83C VA: 0x104B83C
	public void set_SortDirection(ListSortDirection value) { }
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xC3C250 Offset: 0xC3C250 VA: 0xC3C250
public class ListSortDescriptionCollection : ICollection, IEnumerable, IList // TypeDefIndex: 1260
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.IList.Item { get; set; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	public int Count { get; }
	public ListSortDescription Item { get; set; }

	// Methods

	// RVA: 0x104B844 Offset: 0x104B844 VA: 0x104B844
	public void .ctor() { }

	// RVA: 0x104B8B0 Offset: 0x104B8B0 VA: 0x104B8B0
	public void .ctor(ListSortDescription[] sorts) { }

	// RVA: 0x104B9A0 Offset: 0x104B9A0 VA: 0x104B9A0 Slot: 11
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x104BA58 Offset: 0x104BA58 VA: 0x104BA58 Slot: 12
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x104BACC Offset: 0x104BACC VA: 0x104BACC Slot: 9
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x104BB04 Offset: 0x104BB04 VA: 0x104BB04 Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x104BB3C Offset: 0x104BB3C VA: 0x104BB3C Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x104BB74 Offset: 0x104BB74 VA: 0x104BB74 Slot: 10
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x104BBAC Offset: 0x104BBAC VA: 0x104BBAC Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x104BBE4 Offset: 0x104BBE4 VA: 0x104BBE4 Slot: 13
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x104BC24 Offset: 0x104BC24 VA: 0x104BC24 Slot: 14
	private void System.Collections.IList.Clear() { }

	// RVA: 0x104BC5C Offset: 0x104BC5C VA: 0x104BC5C Slot: 17
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x104BCAC Offset: 0x104BCAC VA: 0x104BCAC Slot: 18
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x104BCEC Offset: 0x104BCEC VA: 0x104BCEC Slot: 19
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x104BD2C Offset: 0x104BD2C VA: 0x104BD2C Slot: 4
	public int get_Count() { }

	// RVA: 0x104B9A4 Offset: 0x104B9A4 VA: 0x104B9A4
	public ListSortDescription get_Item(int index) { }

	// RVA: 0x104BD64 Offset: 0x104BD64 VA: 0x104BD64
	public void set_Item(int index, ListSortDescription value) { }

	// RVA: 0x104BDD8 Offset: 0x104BDD8 VA: 0x104BDD8 Slot: 15
	public bool Contains(object value) { }

	// RVA: 0x104BE18 Offset: 0x104BE18 VA: 0x104BE18 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x104BE68 Offset: 0x104BE68 VA: 0x104BE68 Slot: 16
	public int IndexOf(object value) { }
}

// Namespace: System.ComponentModel
public enum ListSortDirection // TypeDefIndex: 1261
{
	// Fields
	public int value__; // 0x0
	public const ListSortDirection Ascending = 0;
	public const ListSortDirection Descending = 1;
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C288 Offset: 0xC3C288 VA: 0xC3C288
public sealed class LocalizableAttribute : Attribute // TypeDefIndex: 1262
{
	// Fields
	private bool localizable; // 0x10
	public static readonly LocalizableAttribute Default; // 0x0
	public static readonly LocalizableAttribute No; // 0x8
	public static readonly LocalizableAttribute Yes; // 0x10

	// Properties
	public bool IsLocalizable { get; }

	// Methods

	// RVA: 0x104BEA8 Offset: 0x104BEA8 VA: 0x104BEA8
	public void .ctor(bool localizable) { }

	// RVA: 0x104BED8 Offset: 0x104BED8 VA: 0x104BED8
	private static void .cctor() { }

	// RVA: 0x104BF88 Offset: 0x104BF88 VA: 0x104BF88
	public bool get_IsLocalizable() { }

	// RVA: 0x104BF90 Offset: 0x104BF90 VA: 0x104BF90 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x104C030 Offset: 0x104C030 VA: 0x104C030 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x104C03C Offset: 0x104C03C VA: 0x104C03C Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[TypeConverterAttribute] // RVA: 0xC3C29C Offset: 0xC3C29C VA: 0xC3C29C
[DesignerAttribute] // RVA: 0xC3C29C Offset: 0xC3C29C VA: 0xC3C29C
[ComVisibleAttribute] // RVA: 0xC3C29C Offset: 0xC3C29C VA: 0xC3C29C
[DesignerCategoryAttribute] // RVA: 0xC3C29C Offset: 0xC3C29C VA: 0xC3C29C
public class MarshalByValueComponent : IDisposable, IServiceProvider, IComponent // TypeDefIndex: 1263
{
	// Fields
	private EventHandlerList eventList; // 0x10
	private ISite mySite; // 0x18
	private object disposedEvent; // 0x20

	// Properties
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EB38 Offset: 0xC3EB38 VA: 0xC3EB38
	[BrowsableAttribute] // RVA: 0xC3EB38 Offset: 0xC3EB38 VA: 0xC3EB38
	public virtual IContainer Container { get; }
	[BrowsableAttribute] // RVA: 0xC3EB78 Offset: 0xC3EB78 VA: 0xC3EB78
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EB78 Offset: 0xC3EB78 VA: 0xC3EB78
	public virtual bool DesignMode { get; }
	[DesignerSerializationVisibilityAttribute] // RVA: 0xC3EBB8 Offset: 0xC3EBB8 VA: 0xC3EBB8
	[BrowsableAttribute] // RVA: 0xC3EBB8 Offset: 0xC3EBB8 VA: 0xC3EBB8
	public virtual ISite Site { get; set; }
	protected EventHandlerList Events { get; }

	// Methods

	// RVA: 0x104C0D4 Offset: 0x104C0D4 VA: 0x104C0D4
	public void .ctor() { }

	// RVA: 0x104C13C Offset: 0x104C13C VA: 0x104C13C Slot: 6
	public void add_Disposed(EventHandler value) { }

	// RVA: 0x104C1F4 Offset: 0x104C1F4 VA: 0x104C1F4 Slot: 7
	public void remove_Disposed(EventHandler value) { }

	// RVA: 0x104C240 Offset: 0x104C240 VA: 0x104C240 Slot: 4
	public void Dispose() { }

	[MonoTODOAttribute] // RVA: 0xC3D364 Offset: 0xC3D364 VA: 0xC3D364
	// RVA: 0x104C274 Offset: 0x104C274 VA: 0x104C274 Slot: 10
	protected virtual void Dispose(bool disposing) { }

	// RVA: 0x104C278 Offset: 0x104C278 VA: 0x104C278 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x104C2F8 Offset: 0x104C2F8 VA: 0x104C2F8 Slot: 11
	public virtual object GetService(Type service) { }

	// RVA: 0x104C3C8 Offset: 0x104C3C8 VA: 0x104C3C8 Slot: 12
	public virtual IContainer get_Container() { }

	// RVA: 0x104C488 Offset: 0x104C488 VA: 0x104C488 Slot: 13
	public virtual bool get_DesignMode() { }

	// RVA: 0x104C548 Offset: 0x104C548 VA: 0x104C548 Slot: 14
	public virtual ISite get_Site() { }

	// RVA: 0x104C550 Offset: 0x104C550 VA: 0x104C550 Slot: 15
	public virtual void set_Site(ISite value) { }

	// RVA: 0x104C558 Offset: 0x104C558 VA: 0x104C558 Slot: 3
	public override string ToString() { }

	// RVA: 0x104C188 Offset: 0x104C188 VA: 0x104C188
	protected EventHandlerList get_Events() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3C380 Offset: 0xC3C380 VA: 0xC3C380
public abstract class MemberDescriptor // TypeDefIndex: 1264
{
	// Fields
	private string name; // 0x10
	private Attribute[] attrs; // 0x18
	private AttributeCollection attrCollection; // 0x20
	private static IComparer default_comparer; // 0x0

	// Properties
	protected virtual Attribute[] AttributeArray { get; set; }
	public virtual AttributeCollection Attributes { get; }
	public virtual string Category { get; }
	public virtual string Description { get; }
	public virtual bool DesignTimeOnly { get; }
	public virtual string DisplayName { get; }
	public virtual string Name { get; }
	public virtual bool IsBrowsable { get; }
	protected virtual int NameHashCode { get; }
	internal static IComparer DefaultComparer { get; }

	// Methods

	// RVA: 0x104C6A8 Offset: 0x104C6A8 VA: 0x104C6A8
	protected void .ctor(string name, Attribute[] attrs) { }

	// RVA: 0x104C6E0 Offset: 0x104C6E0 VA: 0x104C6E0
	protected void .ctor(MemberDescriptor reference, Attribute[] attrs) { }

	// RVA: 0x104C728 Offset: 0x104C728 VA: 0x104C728
	protected void .ctor(string name) { }

	// RVA: 0x104C754 Offset: 0x104C754 VA: 0x104C754
	protected void .ctor(MemberDescriptor reference) { }

	// RVA: 0x104C7BC Offset: 0x104C7BC VA: 0x104C7BC Slot: 4
	protected virtual Attribute[] get_AttributeArray() { }

	// RVA: 0x104CC98 Offset: 0x104CC98 VA: 0x104CC98 Slot: 5
	protected virtual void set_AttributeArray(Attribute[] value) { }

	// RVA: 0x104CCA0 Offset: 0x104CCA0 VA: 0x104CCA0 Slot: 6
	protected virtual void FillAttributes(IList attributeList) { }

	// RVA: 0x104CCA4 Offset: 0x104CCA4 VA: 0x104CCA4 Slot: 7
	public virtual AttributeCollection get_Attributes() { }

	// RVA: 0x104CCDC Offset: 0x104CCDC VA: 0x104CCDC Slot: 8
	protected virtual AttributeCollection CreateAttributeCollection() { }

	// RVA: 0x104CD58 Offset: 0x104CD58 VA: 0x104CD58 Slot: 9
	public virtual string get_Category() { }

	// RVA: 0x104CF20 Offset: 0x104CF20 VA: 0x104CF20 Slot: 10
	public virtual string get_Description() { }

	// RVA: 0x104D034 Offset: 0x104D034 VA: 0x104D034 Slot: 11
	public virtual bool get_DesignTimeOnly() { }

	// RVA: 0x104D108 Offset: 0x104D108 VA: 0x104D108 Slot: 12
	public virtual string get_DisplayName() { }

	// RVA: 0x104D1FC Offset: 0x104D1FC VA: 0x104D1FC Slot: 13
	public virtual string get_Name() { }

	// RVA: 0x104D204 Offset: 0x104D204 VA: 0x104D204 Slot: 14
	public virtual bool get_IsBrowsable() { }

	// RVA: 0x104D2D8 Offset: 0x104D2D8 VA: 0x104D2D8 Slot: 15
	protected virtual int get_NameHashCode() { }

	// RVA: 0x104D308 Offset: 0x104D308 VA: 0x104D308 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x104D310 Offset: 0x104D310 VA: 0x104D310 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x104D3EC Offset: 0x104D3EC VA: 0x104D3EC
	protected static ISite GetSite(object component) { }

	[ObsoleteAttribute] // RVA: 0xC3D374 Offset: 0xC3D374 VA: 0xC3D374
	// RVA: 0x104D478 Offset: 0x104D478 VA: 0x104D478
	protected static object GetInvokee(Type componentClass, object component) { }

	// RVA: 0x104D878 Offset: 0x104D878 VA: 0x104D878 Slot: 16
	protected virtual object GetInvocationTarget(Type type, object instance) { }

	// RVA: 0x104D934 Offset: 0x104D934 VA: 0x104D934
	protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType) { }

	// RVA: 0x104D93C Offset: 0x104D93C VA: 0x104D93C
	protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType, bool publicOnly) { }

	// RVA: 0x104D9A0 Offset: 0x104D9A0 VA: 0x104D9A0
	internal static IComparer get_DefaultComparer() { }
}

// Namespace: 
private class MemberDescriptor.MemberDescriptorComparer : IComparer // TypeDefIndex: 1265
{
	// Methods

	// RVA: 0x104DA28 Offset: 0x104DA28 VA: 0x104DA28
	public void .ctor() { }

	// RVA: 0x104DA30 Offset: 0x104DA30 VA: 0x104DA30 Slot: 4
	public int Compare(object x, object y) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C394 Offset: 0xC3C394 VA: 0xC3C394
public sealed class MergablePropertyAttribute : Attribute // TypeDefIndex: 1266
{
	// Fields
	private bool mergable; // 0x10
	public static readonly MergablePropertyAttribute Default; // 0x0
	public static readonly MergablePropertyAttribute No; // 0x8
	public static readonly MergablePropertyAttribute Yes; // 0x10

	// Properties
	public bool AllowMerge { get; }

	// Methods

	// RVA: 0x104DD04 Offset: 0x104DD04 VA: 0x104DD04
	public void .ctor(bool allowMerge) { }

	// RVA: 0x104DD34 Offset: 0x104DD34 VA: 0x104DD34
	private static void .cctor() { }

	// RVA: 0x104DDEC Offset: 0x104DDEC VA: 0x104DDEC
	public bool get_AllowMerge() { }

	// RVA: 0x104DDF4 Offset: 0x104DDF4 VA: 0x104DDF4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x104DE94 Offset: 0x104DE94 VA: 0x104DE94 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x104DEA0 Offset: 0x104DEA0 VA: 0x104DEA0 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class MultilineStringConverter : TypeConverter // TypeDefIndex: 1267
{
	// Methods

	// RVA: 0x104DF38 Offset: 0x104DF38 VA: 0x104DF38
	public void .ctor() { }

	[MonoTODOAttribute] // RVA: 0xC3D3AC Offset: 0xC3D3AC VA: 0xC3D3AC
	// RVA: 0x104DF48 Offset: 0x104DF48 VA: 0x104DF48 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	[MonoTODOAttribute] // RVA: 0xC3D3BC Offset: 0xC3D3BC VA: 0xC3D3BC
	// RVA: 0x104DFB0 Offset: 0x104DFB0 VA: 0x104DFB0 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	[MonoTODOAttribute] // RVA: 0xC3D3CC Offset: 0xC3D3CC VA: 0xC3D3CC
	// RVA: 0x104E018 Offset: 0x104E018 VA: 0x104E018 Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C3A8 Offset: 0xC3C3A8 VA: 0xC3C3A8
public sealed class NotifyParentPropertyAttribute : Attribute // TypeDefIndex: 1268
{
	// Fields
	private bool notifyParent; // 0x10
	public static readonly NotifyParentPropertyAttribute Default; // 0x0
	public static readonly NotifyParentPropertyAttribute No; // 0x8
	public static readonly NotifyParentPropertyAttribute Yes; // 0x10

	// Properties
	public bool NotifyParent { get; }

	// Methods

	// RVA: 0x104E080 Offset: 0x104E080 VA: 0x104E080
	public void .ctor(bool notifyParent) { }

	// RVA: 0x104E0B0 Offset: 0x104E0B0 VA: 0x104E0B0
	private static void .cctor() { }

	// RVA: 0x104E160 Offset: 0x104E160 VA: 0x104E160
	public bool get_NotifyParent() { }

	// RVA: 0x104E168 Offset: 0x104E168 VA: 0x104E168 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x104E208 Offset: 0x104E208 VA: 0x104E208 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x104E214 Offset: 0x104E214 VA: 0x104E214 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class NullableConverter : TypeConverter // TypeDefIndex: 1269
{
	// Fields
	private Type nullableType; // 0x10
	private Type underlyingType; // 0x18
	private TypeConverter underlyingTypeConverter; // 0x20

	// Properties
	public Type NullableType { get; }
	public Type UnderlyingType { get; }
	public TypeConverter UnderlyingTypeConverter { get; }

	// Methods

	// RVA: 0x104E2AC Offset: 0x104E2AC VA: 0x104E2AC
	public void .ctor(Type nullableType) { }

	// RVA: 0x104E750 Offset: 0x104E750 VA: 0x104E750 Slot: 4
	public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) { }

	// RVA: 0x104E7FC Offset: 0x104E7FC VA: 0x104E7FC Slot: 5
	public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) { }

	// RVA: 0x104E828 Offset: 0x104E828 VA: 0x104E828 Slot: 6
	public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) { }

	// RVA: 0x104EA08 Offset: 0x104EA08 VA: 0x104EA08 Slot: 7
	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) { }

	// RVA: 0x104EC70 Offset: 0x104EC70 VA: 0x104EC70 Slot: 8
	public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues) { }

	// RVA: 0x104EC90 Offset: 0x104EC90 VA: 0x104EC90 Slot: 9
	public override bool GetCreateInstanceSupported(ITypeDescriptorContext context) { }

	// RVA: 0x104ECB0 Offset: 0x104ECB0 VA: 0x104ECB0 Slot: 10
	public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes) { }

	// RVA: 0x104ECD0 Offset: 0x104ECD0 VA: 0x104ECD0 Slot: 11
	public override bool GetPropertiesSupported(ITypeDescriptorContext context) { }

	// RVA: 0x104ECE8 Offset: 0x104ECE8 VA: 0x104ECE8 Slot: 12
	public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) { }

	// RVA: 0x104EE24 Offset: 0x104EE24 VA: 0x104EE24 Slot: 13
	public override bool GetStandardValuesExclusive(ITypeDescriptorContext context) { }

	// RVA: 0x104EE44 Offset: 0x104EE44 VA: 0x104EE44 Slot: 14
	public override bool GetStandardValuesSupported(ITypeDescriptorContext context) { }

	// RVA: 0x104EE68 Offset: 0x104EE68 VA: 0x104EE68 Slot: 15
	public override bool IsValid(ITypeDescriptorContext context, object value) { }

	// RVA: 0x104EE90 Offset: 0x104EE90 VA: 0x104EE90
	public Type get_NullableType() { }

	// RVA: 0x104EE98 Offset: 0x104EE98 VA: 0x104EE98
	public Type get_UnderlyingType() { }

	// RVA: 0x104EEA0 Offset: 0x104EEA0 VA: 0x104EEA0
	public TypeConverter get_UnderlyingTypeConverter() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C3BC Offset: 0xC3C3BC VA: 0xC3C3BC
public sealed class PasswordPropertyTextAttribute : Attribute // TypeDefIndex: 1270
{
	// Fields
	public static readonly PasswordPropertyTextAttribute Default; // 0x0
	public static readonly PasswordPropertyTextAttribute No; // 0x8
	public static readonly PasswordPropertyTextAttribute Yes; // 0x10
	private bool _password; // 0x10

	// Properties
	public bool Password { get; }

	// Methods

	// RVA: 0x104EEA8 Offset: 0x104EEA8 VA: 0x104EEA8
	public void .ctor() { }

	// RVA: 0x104EED0 Offset: 0x104EED0 VA: 0x104EED0
	public void .ctor(bool password) { }

	// RVA: 0x104EF00 Offset: 0x104EF00 VA: 0x104EF00
	private static void .cctor() { }

	// RVA: 0x104EF98 Offset: 0x104EF98 VA: 0x104EF98
	public bool get_Password() { }

	// RVA: 0x104EFA0 Offset: 0x104EFA0 VA: 0x104EFA0 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x104F030 Offset: 0x104F030 VA: 0x104F030 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x104F05C Offset: 0x104F05C VA: 0x104F05C Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
public class ProgressChangedEventArgs : EventArgs // TypeDefIndex: 1271
{
	// Fields
	private int progress; // 0x10
	private object state; // 0x18

	// Properties
	public int ProgressPercentage { get; }
	public object UserState { get; }

	// Methods

	// RVA: 0x104F0DC Offset: 0x104F0DC VA: 0x104F0DC
	public void .ctor(int progressPercentage, object userState) { }

	// RVA: 0x104F160 Offset: 0x104F160 VA: 0x104F160
	public int get_ProgressPercentage() { }

	// RVA: 0x104F168 Offset: 0x104F168 VA: 0x104F168
	public object get_UserState() { }
}

// Namespace: System.ComponentModel
public class PropertyChangedEventArgs : EventArgs // TypeDefIndex: 1272
{
	// Fields
	private string propertyName; // 0x10

	// Properties
	public string PropertyName { get; }

	// Methods

	// RVA: 0x104F57C Offset: 0x104F57C VA: 0x104F57C
	public void .ctor(string name) { }

	// RVA: 0x104F5F8 Offset: 0x104F5F8 VA: 0x104F5F8
	public string get_PropertyName() { }
}

// Namespace: System.ComponentModel
[ComVisibleAttribute] // RVA: 0xC3C3D0 Offset: 0xC3C3D0 VA: 0xC3C3D0
public abstract class PropertyDescriptor : MemberDescriptor // TypeDefIndex: 1273
{
	// Fields
	private TypeConverter converter; // 0x28
	private Hashtable notifiers; // 0x30

	// Properties
	public abstract Type ComponentType { get; }
	public virtual TypeConverter Converter { get; }
	public virtual bool IsLocalizable { get; }
	public abstract bool IsReadOnly { get; }
	public abstract Type PropertyType { get; }
	public virtual bool SupportsChangeEvents { get; }
	public DesignerSerializationVisibility SerializationVisibility { get; }

	// Methods

	// RVA: 0x104FA0C Offset: 0x104FA0C VA: 0x104FA0C
	protected void .ctor(MemberDescriptor reference) { }

	// RVA: 0x104FA10 Offset: 0x104FA10 VA: 0x104FA10
	protected void .ctor(MemberDescriptor reference, Attribute[] attrs) { }

	// RVA: 0x104FA14 Offset: 0x104FA14 VA: 0x104FA14
	protected void .ctor(string name, Attribute[] attrs) { }

	// RVA: -1 Offset: -1 Slot: 17
	public abstract Type get_ComponentType();

	// RVA: 0x104FA4C Offset: 0x104FA4C VA: 0x104FA4C Slot: 18
	public virtual TypeConverter get_Converter() { }

	// RVA: 0x10500C0 Offset: 0x10500C0 VA: 0x10500C0 Slot: 19
	public virtual bool get_IsLocalizable() { }

	// RVA: -1 Offset: -1 Slot: 20
	public abstract bool get_IsReadOnly();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract Type get_PropertyType();

	// RVA: 0x1050194 Offset: 0x1050194 VA: 0x1050194 Slot: 22
	public virtual bool get_SupportsChangeEvents() { }

	// RVA: 0x105019C Offset: 0x105019C VA: 0x105019C
	public DesignerSerializationVisibility get_SerializationVisibility() { }

	// RVA: 0x105026C Offset: 0x105026C VA: 0x105026C Slot: 23
	public virtual void AddValueChanged(object component, EventHandler handler) { }

	// RVA: 0x1050470 Offset: 0x1050470 VA: 0x1050470 Slot: 24
	public virtual void RemoveValueChanged(object component, EventHandler handler) { }

	// RVA: 0x1050660 Offset: 0x1050660 VA: 0x1050660 Slot: 6
	protected override void FillAttributes(IList attributeList) { }

	// RVA: 0x1050664 Offset: 0x1050664 VA: 0x1050664 Slot: 16
	protected override object GetInvocationTarget(Type type, object instance) { }

	// RVA: 0x105077C Offset: 0x105077C VA: 0x105077C
	protected internal EventHandler GetValueChangedHandler(object component) { }

	// RVA: 0x105084C Offset: 0x105084C VA: 0x105084C Slot: 25
	protected virtual void OnValueChanged(object component, EventArgs e) { }

	// RVA: -1 Offset: -1 Slot: 26
	public abstract object GetValue(object component);

	// RVA: -1 Offset: -1 Slot: 27
	public abstract void SetValue(object component, object value);

	// RVA: -1 Offset: -1 Slot: 28
	public abstract void ResetValue(object component);

	// RVA: -1 Offset: -1 Slot: 29
	public abstract bool CanResetValue(object component);

	// RVA: -1 Offset: -1 Slot: 30
	public abstract bool ShouldSerializeValue(object component);

	// RVA: 0x104FEA4 Offset: 0x104FEA4 VA: 0x104FEA4
	protected object CreateInstance(Type type) { }

	// RVA: 0x1050B04 Offset: 0x1050B04 VA: 0x1050B04 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x1050BE4 Offset: 0x1050BE4 VA: 0x1050BE4
	public PropertyDescriptorCollection GetChildProperties() { }

	// RVA: 0x1050BFC Offset: 0x1050BFC VA: 0x1050BFC
	public PropertyDescriptorCollection GetChildProperties(object instance) { }

	// RVA: 0x1050C10 Offset: 0x1050C10 VA: 0x1050C10
	public PropertyDescriptorCollection GetChildProperties(Attribute[] filter) { }

	// RVA: 0x1050C2C Offset: 0x1050C2C VA: 0x1050C2C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1050C34 Offset: 0x1050C34 VA: 0x1050C34 Slot: 31
	public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter) { }

	// RVA: 0x1050D20 Offset: 0x1050D20 VA: 0x1050D20 Slot: 32
	public virtual object GetEditor(Type editorBaseType) { }

	// RVA: 0x104FD24 Offset: 0x104FD24 VA: 0x104FD24
	protected Type GetTypeFromName(string typeName) { }
}

// Namespace: System.ComponentModel
[DefaultMemberAttribute] // RVA: 0xC3C3E4 Offset: 0xC3C3E4 VA: 0xC3C3E4
public class PropertyDescriptorCollection : ICollection, IDictionary, IEnumerable, IList // TypeDefIndex: 1274
{
	// Fields
	public static readonly PropertyDescriptorCollection Empty; // 0x0
	private ArrayList properties; // 0x10
	private bool readOnly; // 0x18

	// Properties
	private bool System.Collections.IDictionary.IsFixedSize { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IDictionary.IsReadOnly { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private int System.Collections.ICollection.Count { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private object System.Collections.IDictionary.Item { get; set; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	public virtual PropertyDescriptor Item { get; }
	public virtual PropertyDescriptor Item { get; }

	// Methods

	// RVA: 0x1051184 Offset: 0x1051184 VA: 0x1051184
	public void .ctor(PropertyDescriptor[] properties) { }

	// RVA: 0x1051230 Offset: 0x1051230 VA: 0x1051230
	public void .ctor(PropertyDescriptor[] properties, bool readOnly) { }

	// RVA: 0x105125C Offset: 0x105125C VA: 0x105125C
	private void .ctor() { }

	// RVA: 0x1051264 Offset: 0x1051264 VA: 0x1051264
	private static void .cctor() { }

	// RVA: 0x10512D0 Offset: 0x10512D0 VA: 0x10512D0 Slot: 24
	private int System.Collections.IList.Add(object value) { }

	// RVA: 0x1051484 Offset: 0x1051484 VA: 0x1051484 Slot: 15
	private void System.Collections.IDictionary.Add(object key, object value) { }

	// RVA: 0x1051558 Offset: 0x1051558 VA: 0x1051558 Slot: 25
	private void System.Collections.IList.Clear() { }

	// RVA: 0x10515FC Offset: 0x10515FC VA: 0x10515FC Slot: 16
	private void System.Collections.IDictionary.Clear() { }

	// RVA: 0x1051600 Offset: 0x1051600 VA: 0x1051600 Slot: 26
	private bool System.Collections.IList.Contains(object value) { }

	// RVA: 0x1051738 Offset: 0x1051738 VA: 0x1051738 Slot: 17
	private bool System.Collections.IDictionary.Contains(object value) { }

	// RVA: 0x1051830 Offset: 0x1051830 VA: 0x1051830 Slot: 8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	[MonoTODOAttribute] // RVA: 0xC3D3DC Offset: 0xC3D3DC VA: 0xC3D3DC
	// RVA: 0x1051840 Offset: 0x1051840 VA: 0x1051840 Slot: 18
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }

	// RVA: 0x10518A8 Offset: 0x10518A8 VA: 0x10518A8 Slot: 27
	private int System.Collections.IList.IndexOf(object value) { }

	// RVA: 0x10519DC Offset: 0x10519DC VA: 0x10519DC Slot: 28
	private void System.Collections.IList.Insert(int index, object value) { }

	// RVA: 0x1051B7C Offset: 0x1051B7C VA: 0x1051B7C Slot: 19
	private void System.Collections.IDictionary.Remove(object value) { }

	// RVA: 0x1051D04 Offset: 0x1051D04 VA: 0x1051D04 Slot: 29
	private void System.Collections.IList.Remove(object value) { }

	// RVA: 0x1051DDC Offset: 0x1051DDC VA: 0x1051DDC Slot: 30
	private void System.Collections.IList.RemoveAt(int index) { }

	// RVA: 0x1051E90 Offset: 0x1051E90 VA: 0x1051E90 Slot: 9
	private bool System.Collections.IDictionary.get_IsFixedSize() { }

	// RVA: 0x1051F34 Offset: 0x1051F34 VA: 0x1051F34 Slot: 20
	private bool System.Collections.IList.get_IsFixedSize() { }

	// RVA: 0x1051F3C Offset: 0x1051F3C VA: 0x1051F3C Slot: 10
	private bool System.Collections.IDictionary.get_IsReadOnly() { }

	// RVA: 0x1051FE4 Offset: 0x1051FE4 VA: 0x1051FE4 Slot: 21
	private bool System.Collections.IList.get_IsReadOnly() { }

	// RVA: 0x1051FEC Offset: 0x1051FEC VA: 0x1051FEC Slot: 5
	private bool System.Collections.ICollection.get_IsSynchronized() { }

	// RVA: 0x1051FF4 Offset: 0x1051FF4 VA: 0x1051FF4 Slot: 4
	private int System.Collections.ICollection.get_Count() { }

	// RVA: 0x1052064 Offset: 0x1052064 VA: 0x1052064 Slot: 6
	private object System.Collections.ICollection.get_SyncRoot() { }

	// RVA: 0x105206C Offset: 0x105206C VA: 0x105206C Slot: 13
	private ICollection System.Collections.IDictionary.get_Keys() { }

	// RVA: 0x105240C Offset: 0x105240C VA: 0x105240C Slot: 14
	private ICollection System.Collections.IDictionary.get_Values() { }

	// RVA: 0x10524EC Offset: 0x10524EC VA: 0x10524EC Slot: 11
	private object System.Collections.IDictionary.get_Item(object key) { }

	// RVA: 0x1052574 Offset: 0x1052574 VA: 0x1052574 Slot: 12
	private void System.Collections.IDictionary.set_Item(object key, object value) { }

	// RVA: 0x1052770 Offset: 0x1052770 VA: 0x1052770 Slot: 22
	private object System.Collections.IList.get_Item(int index) { }

	// RVA: 0x10527B0 Offset: 0x10527B0 VA: 0x10527B0 Slot: 23
	private void System.Collections.IList.set_Item(int index, object value) { }

	// RVA: 0x10513A8 Offset: 0x10513A8 VA: 0x10513A8
	public int Add(PropertyDescriptor value) { }

	// RVA: 0x105155C Offset: 0x105155C VA: 0x105155C Slot: 31
	public void Clear() { }

	// RVA: 0x10516F8 Offset: 0x10516F8 VA: 0x10516F8
	public bool Contains(PropertyDescriptor value) { }

	// RVA: 0x1052868 Offset: 0x1052868 VA: 0x1052868 Slot: 7
	public void CopyTo(Array array, int index) { }

	// RVA: 0x10528B8 Offset: 0x10528B8 VA: 0x10528B8 Slot: 32
	public virtual PropertyDescriptor Find(string name, bool ignoreCase) { }

	// RVA: 0x1052AC8 Offset: 0x1052AC8 VA: 0x1052AC8 Slot: 33
	public virtual IEnumerator GetEnumerator() { }

	// RVA: 0x105199C Offset: 0x105199C VA: 0x105199C
	public int IndexOf(PropertyDescriptor value) { }

	// RVA: 0x1051AC4 Offset: 0x1051AC4 VA: 0x1051AC4
	public void Insert(int index, PropertyDescriptor value) { }

	// RVA: 0x1051C54 Offset: 0x1051C54 VA: 0x1051C54
	public void Remove(PropertyDescriptor value) { }

	// RVA: 0x1051DE0 Offset: 0x1051DE0 VA: 0x1051DE0 Slot: 34
	public void RemoveAt(int index) { }

	// RVA: 0x1052B00 Offset: 0x1052B00 VA: 0x1052B00
	private PropertyDescriptorCollection CloneCollection() { }

	// RVA: 0x1052C28 Offset: 0x1052C28 VA: 0x1052C28 Slot: 35
	public virtual PropertyDescriptorCollection Sort() { }

	// RVA: 0x1052CB0 Offset: 0x1052CB0 VA: 0x1052CB0 Slot: 36
	public virtual PropertyDescriptorCollection Sort(IComparer comparer) { }

	// RVA: 0x1052CEC Offset: 0x1052CEC VA: 0x1052CEC Slot: 37
	public virtual PropertyDescriptorCollection Sort(string[] order) { }

	// RVA: 0x1052DA0 Offset: 0x1052DA0 VA: 0x1052DA0 Slot: 38
	public virtual PropertyDescriptorCollection Sort(string[] order, IComparer comparer) { }

	// RVA: 0x1052C60 Offset: 0x1052C60 VA: 0x1052C60
	protected void InternalSort(IComparer ic) { }

	// RVA: 0x1052D28 Offset: 0x1052D28 VA: 0x1052D28
	protected void InternalSort(string[] order) { }

	// RVA: 0x1052E60 Offset: 0x1052E60 VA: 0x1052E60
	private ArrayList ExtractItems(string[] names) { }

	// RVA: 0x1053158 Offset: 0x1053158 VA: 0x1053158
	internal PropertyDescriptorCollection Filter(Attribute[] attributes) { }

	// RVA: 0x105202C Offset: 0x105202C VA: 0x105202C Slot: 39
	public int get_Count() { }

	// RVA: 0x105353C Offset: 0x105353C VA: 0x105353C Slot: 40
	public virtual PropertyDescriptor get_Item(string s) { }

	// RVA: 0x1053550 Offset: 0x1053550 VA: 0x1053550 Slot: 41
	public virtual PropertyDescriptor get_Item(int index) { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C41C Offset: 0xC3C41C VA: 0xC3C41C
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1275
{
	// Fields
	private bool read_only; // 0x10
	public static readonly ReadOnlyAttribute No; // 0x0
	public static readonly ReadOnlyAttribute Yes; // 0x8
	public static readonly ReadOnlyAttribute Default; // 0x10

	// Properties
	public bool IsReadOnly { get; }

	// Methods

	// RVA: 0x1053644 Offset: 0x1053644 VA: 0x1053644
	public void .ctor(bool read_only) { }

	// RVA: 0x1053674 Offset: 0x1053674 VA: 0x1053674
	private static void .cctor() { }

	// RVA: 0x1053724 Offset: 0x1053724 VA: 0x1053724
	public bool get_IsReadOnly() { }

	// RVA: 0x105372C Offset: 0x105372C VA: 0x105372C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1053738 Offset: 0x1053738 VA: 0x1053738 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x10537C8 Offset: 0x10537C8 VA: 0x10537C8 Slot: 5
	public override bool IsDefaultAttribute() { }
}

// Namespace: System.ComponentModel
[AttributeUsageAttribute] // RVA: 0xC3C430 Offset: 0xC3C430 VA: 0xC3C430
[ObsoleteAttribute] // RVA: 0xC3C430 Offset: 0xC3C430 VA: 0xC3C430
public class RecommendedAsConfigurableAttribute : Attribute // TypeDefIndex: 1276
{
	// Fields
	private bool recommendedAsConfigurable; // 0x10
	public static readonly RecommendedAsConfigurableAttribute Default; // 0x0
	public static readonly RecommendedAsConfigurableAttribute No; // 0x8
	public static readonly RecommendedAsConfigurableAttribute Yes; // 0x10

	// Properties
