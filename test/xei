
	// RVA: 0x2424AF0 Offset: 0x2424AF0 VA: 0x2424AF0
	internal static void InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset) { }

	// RVA: 0x2424D78 Offset: 0x2424D78 VA: 0x2424D78 Slot: 10
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }

	// RVA: 0x2424F48 Offset: 0x2424F48 VA: 0x2424F48
	internal static byte[] InternalTransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9850 Offset: 0xBC9850 VA: 0xBC9850
public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 784
{
	// Properties
	public override byte[] Key { get; set; }

	// Methods

	// RVA: 0x2425360 Offset: 0x2425360 VA: 0x2425360
	protected void .ctor() { }

	// RVA: 0x242550C Offset: 0x242550C VA: 0x242550C Slot: 12
	public override byte[] get_Key() { }

	// RVA: 0x2425824 Offset: 0x2425824 VA: 0x2425824 Slot: 13
	public override void set_Key(byte[] value) { }

	// RVA: 0x242560C Offset: 0x242560C VA: 0x242560C
	public static bool IsWeakKey(byte[] rgbKey) { }

	// RVA: 0x2425994 Offset: 0x2425994 VA: 0x2425994
	public static TripleDES Create() { }

	// RVA: 0x24259DC Offset: 0x24259DC VA: 0x24259DC
	public static TripleDES Create(string str) { }
}

// Namespace: System.Security.Cryptography
[ComVisibleAttribute] // RVA: 0xBC9864 Offset: 0xBC9864 VA: 0xBC9864
public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 785
{
	// Methods

	// RVA: 0x2425AD0 Offset: 0x2425AD0 VA: 0x2425AD0
	public void .ctor() { }

	// RVA: 0x2425AD4 Offset: 0x2425AD4 VA: 0x2425AD4 Slot: 26
	public override void GenerateIV() { }

	// RVA: 0x2425B04 Offset: 0x2425B04 VA: 0x2425B04 Slot: 27
	public override void GenerateKey() { }

	// RVA: 0x2425BB0 Offset: 0x2425BB0 VA: 0x2425BB0 Slot: 23
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { }

	// RVA: 0x2425F44 Offset: 0x2425F44 VA: 0x2425F44 Slot: 25
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { }
}

// Namespace: System.Security.Cryptography
internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 786
{
	// Fields
	private DESTransform E1; // 0x58
	private DESTransform D2; // 0x60
	private DESTransform E3; // 0x68
	private DESTransform D1; // 0x70
	private DESTransform E2; // 0x78
	private DESTransform D3; // 0x80

	// Methods

	// RVA: 0x2425C2C Offset: 0x2425C2C VA: 0x2425C2C
	public void .ctor(TripleDES algo, bool encryption, byte[] key, byte[] iv) { }

	// RVA: 0x2425FC0 Offset: 0x2425FC0 VA: 0x2425FC0 Slot: 17
	protected override void ECB(byte[] input, byte[] output) { }

	// RVA: 0x2425B28 Offset: 0x2425B28 VA: 0x2425B28
	internal static byte[] GetStrongKey() { }
}

// Namespace: System.Security.Permissions
[AttributeUsageAttribute] // RVA: 0xBC9878 Offset: 0xBC9878 VA: 0xBC9878
[ObsoleteAttribute] // RVA: 0xBC9878 Offset: 0xBC9878 VA: 0xBC9878
[ComVisibleAttribute] // RVA: 0xBC9878 Offset: 0xBC9878 VA: 0xBC9878
[Serializable]
public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 787
{
	// Methods

	// RVA: 0x242A0B8 Offset: 0x242A0B8 VA: 0x242A0B8
	protected void .ctor(SecurityAction action) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9900 Offset: 0xBC9900 VA: 0xBC9900
[Serializable]
public sealed class EnvironmentPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 788
{
	// Fields
	private PermissionState _state; // 0x10
	private ArrayList readList; // 0x18
	private ArrayList writeList; // 0x20

	// Methods

	// RVA: 0x242A110 Offset: 0x242A110 VA: 0x242A110
	public void .ctor(PermissionState state) { }

	// RVA: 0x242A1B4 Offset: 0x242A1B4 VA: 0x242A1B4
	public void .ctor(EnvironmentPermissionAccess flag, string pathList) { }

	// RVA: 0x242A634 Offset: 0x242A634 VA: 0x242A634
	public void AddPathList(EnvironmentPermissionAccess flag, string pathList) { }

	// RVA: 0x242AB30 Offset: 0x242AB30 VA: 0x242AB30 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x242AC4C Offset: 0x242AC4C VA: 0x242AC4C Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x242ABFC Offset: 0x242ABFC VA: 0x242ABFC
	public string GetPathList(EnvironmentPermissionAccess flag) { }

	// RVA: 0x242B154 Offset: 0x242B154 VA: 0x242B154 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x242B4E0 Offset: 0x242B4E0 VA: 0x242B4E0 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x242B4D0 Offset: 0x242B4D0 VA: 0x242B4D0 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x242A25C Offset: 0x242A25C VA: 0x242A25C
	public void SetPathList(EnvironmentPermissionAccess flag, string pathList) { }

	// RVA: 0x242BAE4 Offset: 0x242BAE4 VA: 0x242BAE4 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x242BBF4 Offset: 0x242BBF4 VA: 0x242BBF4 Slot: 20
	public override IPermission Union(IPermission other) { }

	// RVA: 0x242BD90 Offset: 0x242BD90 VA: 0x242BD90
	private bool IsEmpty() { }

	// RVA: 0x242B424 Offset: 0x242B424 VA: 0x242B424
	private EnvironmentPermission Cast(IPermission target) { }

	// RVA: 0x242AA2C Offset: 0x242AA2C VA: 0x242AA2C
	internal void ThrowInvalidFlag(EnvironmentPermissionAccess flag, bool context) { }

	// RVA: 0x242AD7C Offset: 0x242AD7C VA: 0x242AD7C
	private string GetPathList(ArrayList list) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9914 Offset: 0xBC9914 VA: 0xBC9914
[FlagsAttribute] // RVA: 0xBC9914 Offset: 0xBC9914 VA: 0xBC9914
[Serializable]
public enum EnvironmentPermissionAccess // TypeDefIndex: 789
{
	// Fields
	public int value__; // 0x0
	public const EnvironmentPermissionAccess NoAccess = 0;
	public const EnvironmentPermissionAccess Read = 1;
	public const EnvironmentPermissionAccess Write = 2;
	public const EnvironmentPermissionAccess AllAccess = 3;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9950 Offset: 0xBC9950 VA: 0xBC9950
[Serializable]
public sealed class FileDialogPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 790
{
	// Fields
	private FileDialogPermissionAccess _access; // 0x10

	// Properties
	public FileDialogPermissionAccess Access { set; }

	// Methods

	// RVA: 0x242BE10 Offset: 0x242BE10 VA: 0x242BE10
	public void .ctor(PermissionState state) { }

	// RVA: 0x242BE58 Offset: 0x242BE58 VA: 0x242BE58
	public void .ctor(FileDialogPermissionAccess access) { }

	// RVA: 0x242BE88 Offset: 0x242BE88 VA: 0x242BE88
	public void set_Access(FileDialogPermissionAccess value) { }

	// RVA: 0x242C020 Offset: 0x242C020 VA: 0x242C020 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x242C090 Offset: 0x242C090 VA: 0x242C090 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x242C1D0 Offset: 0x242C1D0 VA: 0x242C1D0 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x242C318 Offset: 0x242C318 VA: 0x242C318 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x242C34C Offset: 0x242C34C VA: 0x242C34C Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x242C35C Offset: 0x242C35C VA: 0x242C35C Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x242C440 Offset: 0x242C440 VA: 0x242C440 Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x242C26C Offset: 0x242C26C VA: 0x242C26C
	private FileDialogPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[FlagsAttribute] // RVA: 0xBC9964 Offset: 0xBC9964 VA: 0xBC9964
[ComVisibleAttribute] // RVA: 0xBC9964 Offset: 0xBC9964 VA: 0xBC9964
[Serializable]
public enum FileDialogPermissionAccess // TypeDefIndex: 791
{
	// Fields
	public int value__; // 0x0
	public const FileDialogPermissionAccess None = 0;
	public const FileDialogPermissionAccess Open = 1;
	public const FileDialogPermissionAccess Save = 2;
	public const FileDialogPermissionAccess OpenSave = 3;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC99A0 Offset: 0xBC99A0 VA: 0xBC99A0
[Serializable]
public sealed class FileIOPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 792
{
	// Fields
	private static char[] BadPathNameCharacters; // 0x0
	private static char[] BadFileNameCharacters; // 0x8
	private bool m_Unrestricted; // 0x10
	private FileIOPermissionAccess m_AllFilesAccess; // 0x14
	private FileIOPermissionAccess m_AllLocalFilesAccess; // 0x18
	private ArrayList readList; // 0x20
	private ArrayList writeList; // 0x28
	private ArrayList appendList; // 0x30
	private ArrayList pathList; // 0x38

	// Properties
	public FileIOPermissionAccess AllFiles { get; set; }
	public FileIOPermissionAccess AllLocalFiles { get; set; }

	// Methods

	// RVA: 0x242C534 Offset: 0x242C534 VA: 0x242C534
	public void .ctor(PermissionState state) { }

	// RVA: 0x242C640 Offset: 0x242C640 VA: 0x242C640
	private static void .cctor() { }

	// RVA: 0x242C590 Offset: 0x242C590 VA: 0x242C590
	internal void CreateLists() { }

	// RVA: 0x242C6CC Offset: 0x242C6CC VA: 0x242C6CC
	public FileIOPermissionAccess get_AllFiles() { }

	// RVA: 0x242C6D4 Offset: 0x242C6D4 VA: 0x242C6D4
	public void set_AllFiles(FileIOPermissionAccess value) { }

	// RVA: 0x242C6E8 Offset: 0x242C6E8 VA: 0x242C6E8
	public FileIOPermissionAccess get_AllLocalFiles() { }

	// RVA: 0x242C6F0 Offset: 0x242C6F0 VA: 0x242C6F0
	public void set_AllLocalFiles(FileIOPermissionAccess value) { }

	// RVA: 0x242C704 Offset: 0x242C704 VA: 0x242C704
	public void AddPathList(FileIOPermissionAccess access, string[] pathList) { }

	// RVA: 0x242C9B8 Offset: 0x242C9B8 VA: 0x242C9B8
	internal void AddPathInternal(FileIOPermissionAccess access, string path) { }

	// RVA: 0x242CB00 Offset: 0x242CB00 VA: 0x242CB00 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x242CE28 Offset: 0x242CE28 VA: 0x242CE28 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x242D0F0 Offset: 0x242D0F0 VA: 0x242D0F0
	public string[] GetPathList(FileIOPermissionAccess access) { }

	// RVA: 0x242D314 Offset: 0x242D314 VA: 0x242D314 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x242DE14 Offset: 0x242DE14 VA: 0x242DE14 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x242D530 Offset: 0x242D530 VA: 0x242D530 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x242E678 Offset: 0x242E678 VA: 0x242E678 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x242E91C Offset: 0x242E91C VA: 0x242E91C Slot: 20
	public override IPermission Union(IPermission other) { }

	[MonoTODOAttribute] // RVA: 0xBCD73C Offset: 0xBCD73C VA: 0xBCD73C
	[ComVisibleAttribute] // RVA: 0xBCD73C Offset: 0xBCD73C VA: 0xBCD73C
	// RVA: 0x242EF90 Offset: 0x242EF90 VA: 0x242EF90 Slot: 0
	public override bool Equals(object obj) { }

	[ComVisibleAttribute] // RVA: 0xBCD78C Offset: 0xBCD78C VA: 0xBCD78C
	[MonoTODOAttribute] // RVA: 0xBCD78C Offset: 0xBCD78C VA: 0xBCD78C
	// RVA: 0x242EF98 Offset: 0x242EF98 VA: 0x242EF98 Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x242DD44 Offset: 0x242DD44 VA: 0x242DD44
	private bool IsEmpty() { }

	// RVA: 0x242D484 Offset: 0x242D484 VA: 0x242D484
	private static FileIOPermission Cast(IPermission target) { }

	// RVA: 0x242C7FC Offset: 0x242C7FC VA: 0x242C7FC
	internal static void ThrowInvalidFlag(FileIOPermissionAccess access, bool context) { }

	// RVA: 0x242EFA0 Offset: 0x242EFA0 VA: 0x242EFA0
	internal static void ThrowIfInvalidPath(string path) { }

	// RVA: 0x242C900 Offset: 0x242C900 VA: 0x242C900
	internal static void ThrowIfInvalidPath(string[] paths) { }

	// RVA: 0x242DFD4 Offset: 0x242DFD4 VA: 0x242DFD4
	internal static bool KeyIsSubsetOf(IList local, IList target) { }

	// RVA: 0x242EBBC Offset: 0x242EBBC VA: 0x242EBBC
	internal static void UnionKeys(IList list, string[] paths) { }

	// RVA: 0x242D538 Offset: 0x242D538 VA: 0x242D538
	internal static void IntersectKeys(IList local, IList target, IList result) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC99B4 Offset: 0xBC99B4 VA: 0xBC99B4
[FlagsAttribute] // RVA: 0xBC99B4 Offset: 0xBC99B4 VA: 0xBC99B4
[Serializable]
public enum FileIOPermissionAccess // TypeDefIndex: 793
{
	// Fields
	public int value__; // 0x0
	public const FileIOPermissionAccess NoAccess = 0;
	public const FileIOPermissionAccess Read = 1;
	public const FileIOPermissionAccess Write = 2;
	public const FileIOPermissionAccess Append = 4;
	public const FileIOPermissionAccess PathDiscovery = 8;
	public const FileIOPermissionAccess AllAccess = 15;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC99F0 Offset: 0xBC99F0 VA: 0xBC99F0
[FlagsAttribute] // RVA: 0xBC99F0 Offset: 0xBC99F0 VA: 0xBC99F0
[Serializable]
public enum HostProtectionResource // TypeDefIndex: 794
{
	// Fields
	public int value__; // 0x0
	public const HostProtectionResource None = 0;
	public const HostProtectionResource Synchronization = 1;
	public const HostProtectionResource SharedState = 2;
	public const HostProtectionResource ExternalProcessMgmt = 4;
	public const HostProtectionResource SelfAffectingProcessMgmt = 8;
	public const HostProtectionResource ExternalThreading = 16;
	public const HostProtectionResource SelfAffectingThreading = 32;
	public const HostProtectionResource SecurityInfrastructure = 64;
	public const HostProtectionResource UI = 128;
	public const HostProtectionResource MayLeakOnAbort = 256;
	public const HostProtectionResource All = 511;
}

// Namespace: System.Security.Permissions
internal interface IBuiltInPermission // TypeDefIndex: 795
{}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9A2C Offset: 0xBC9A2C VA: 0xBC9A2C
public interface IUnrestrictedPermission // TypeDefIndex: 796
{}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9A40 Offset: 0xBC9A40 VA: 0xBC9A40
[Serializable]
public enum IsolatedStorageContainment // TypeDefIndex: 797
{
	// Fields
	public int value__; // 0x0
	public const IsolatedStorageContainment None = 0;
	public const IsolatedStorageContainment DomainIsolationByUser = 16;
	public const IsolatedStorageContainment AssemblyIsolationByUser = 32;
	public const IsolatedStorageContainment DomainIsolationByRoamingUser = 80;
	public const IsolatedStorageContainment AssemblyIsolationByRoamingUser = 96;
	public const IsolatedStorageContainment AdministerIsolatedStorageByUser = 112;
	public const IsolatedStorageContainment UnrestrictedIsolatedStorage = 240;
	public const IsolatedStorageContainment ApplicationIsolationByUser = 21;
	public const IsolatedStorageContainment DomainIsolationByMachine = 48;
	public const IsolatedStorageContainment AssemblyIsolationByMachine = 64;
	public const IsolatedStorageContainment ApplicationIsolationByMachine = 69;
	public const IsolatedStorageContainment ApplicationIsolationByRoamingUser = 101;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9A54 Offset: 0xBC9A54 VA: 0xBC9A54
[Serializable]
public sealed class IsolatedStorageFilePermission : IsolatedStoragePermission, IBuiltInPermission // TypeDefIndex: 798
{
	// Methods

	// RVA: 0x242F1A8 Offset: 0x242F1A8 VA: 0x242F1A8
	public void .ctor(PermissionState state) { }

	// RVA: 0x242F200 Offset: 0x242F200 VA: 0x242F200 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x242F2F0 Offset: 0x242F2F0 VA: 0x242F2F0 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x242F6B0 Offset: 0x242F6B0 VA: 0x242F6B0 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x242F774 Offset: 0x242F774 VA: 0x242F774 Slot: 20
	public override IPermission Union(IPermission target) { }

	[MonoTODOAttribute] // RVA: 0xBCD7DC Offset: 0xBCD7DC VA: 0xBCD7DC
	[ComVisibleAttribute] // RVA: 0xBCD7DC Offset: 0xBCD7DC VA: 0xBCD7DC
	// RVA: 0x242F8A4 Offset: 0x242F8A4 VA: 0x242F8A4 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x242F42C Offset: 0x242F42C VA: 0x242F42C
	private IsolatedStorageFilePermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9A68 Offset: 0xBC9A68 VA: 0xBC9A68
[Serializable]
public abstract class IsolatedStoragePermission : CodeAccessPermission, IUnrestrictedPermission // TypeDefIndex: 799
{
	// Fields
	internal long m_userQuota; // 0x10
	internal long m_machineQuota; // 0x18
	internal long m_expirationDays; // 0x20
	internal bool m_permanentData; // 0x28
	internal IsolatedStorageContainment m_allowed; // 0x2C

	// Properties
	public long UserQuota { set; }
	public IsolatedStorageContainment UsageAllowed { set; }

	// Methods

	// RVA: 0x242F1AC Offset: 0x242F1AC VA: 0x242F1AC
	protected void .ctor(PermissionState state) { }

	// RVA: 0x242F9E4 Offset: 0x242F9E4 VA: 0x242F9E4
	public void set_UserQuota(long value) { }

	// RVA: 0x242F4F8 Offset: 0x242F4F8 VA: 0x242F4F8
	public void set_UsageAllowed(IsolatedStorageContainment value) { }

	// RVA: 0x242F764 Offset: 0x242F764 VA: 0x242F764 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x242F8A8 Offset: 0x242F8A8 VA: 0x242F8A8 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x242F9EC Offset: 0x242F9EC VA: 0x242F9EC Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x242F4D8 Offset: 0x242F4D8 VA: 0x242F4D8
	internal bool IsEmpty() { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9A7C Offset: 0xBC9A7C VA: 0xBC9A7C
[Serializable]
public sealed class KeyContainerPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 800
{
	// Fields
	private KeyContainerPermissionAccessEntryCollection _accessEntries; // 0x10
	private KeyContainerPermissionFlags _flags; // 0x18

	// Methods

	// RVA: 0x242FB8C Offset: 0x242FB8C VA: 0x242FB8C
	public void .ctor(PermissionState state) { }

	// RVA: 0x242FBD4 Offset: 0x242FBD4 VA: 0x242FBD4
	public void .ctor(KeyContainerPermissionFlags flags) { }

	// RVA: 0x242FD18 Offset: 0x242FD18 VA: 0x242FD18
	public void .ctor(KeyContainerPermissionFlags flags, KeyContainerPermissionAccessEntry[] accessList) { }

	// RVA: 0x242FE20 Offset: 0x242FE20 VA: 0x242FE20 Slot: 15
	public override IPermission Copy() { }

	[MonoTODOAttribute] // RVA: 0xBCD82C Offset: 0xBCD82C VA: 0xBCD82C
	// RVA: 0x243000C Offset: 0x243000C VA: 0x243000C Slot: 16
	public override void FromXml(SecurityElement securityElement) { }

	[MonoTODOAttribute] // RVA: 0xBCD864 Offset: 0xBCD864 VA: 0xBCD864
	// RVA: 0x2430140 Offset: 0x2430140 VA: 0x2430140 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	[MonoTODOAttribute] // RVA: 0xBCD89C Offset: 0xBCD89C VA: 0xBCD89C
	// RVA: 0x2430148 Offset: 0x2430148 VA: 0x2430148 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x2430150 Offset: 0x2430150 VA: 0x2430150 Slot: 21
	public bool IsUnrestricted() { }

	[MonoTODOAttribute] // RVA: 0xBCD8D4 Offset: 0xBCD8D4 VA: 0xBCD8D4
	// RVA: 0x2430164 Offset: 0x2430164 VA: 0x2430164 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x24301FC Offset: 0x24301FC VA: 0x24301FC Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x242FC04 Offset: 0x242FC04 VA: 0x242FC04
	private void SetFlags(KeyContainerPermissionFlags flags) { }

	// RVA: 0x24304C0 Offset: 0x24304C0 VA: 0x24304C0
	private KeyContainerPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9A90 Offset: 0xBC9A90 VA: 0xBC9A90
[Serializable]
public sealed class KeyContainerPermissionAccessEntry // TypeDefIndex: 801
{
	// Fields
	private KeyContainerPermissionFlags _flags; // 0x10
	private string _containerName; // 0x18
	private int _spec; // 0x20
	private string _store; // 0x28
	private string _providerName; // 0x30
	private int _type; // 0x38

	// Methods

	// RVA: 0x2430924 Offset: 0x2430924 VA: 0x2430924 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x2430A70 Offset: 0x2430A70 VA: 0x2430A70 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9AA4 Offset: 0xBC9AA4 VA: 0xBC9AA4
[DefaultMemberAttribute] // RVA: 0xBC9AA4 Offset: 0xBC9AA4 VA: 0xBC9AA4
[Serializable]
public sealed class KeyContainerPermissionAccessEntryCollection : IEnumerable, ICollection // TypeDefIndex: 802
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; }
	public bool IsSynchronized { get; }
	public object SyncRoot { get; }

	// Methods

	// RVA: 0x243056C Offset: 0x243056C VA: 0x243056C
	internal void .ctor() { }

	// RVA: 0x2430AE0 Offset: 0x2430AE0 VA: 0x2430AE0 Slot: 8
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }

	// RVA: 0x2430B30 Offset: 0x2430B30 VA: 0x2430B30 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x242FF84 Offset: 0x242FF84 VA: 0x242FF84 Slot: 5
	public int get_Count() { }

	// RVA: 0x2430BE0 Offset: 0x2430BE0 VA: 0x2430BE0 Slot: 6
	public bool get_IsSynchronized() { }

	// RVA: 0x2430BE8 Offset: 0x2430BE8 VA: 0x2430BE8 Slot: 7
	public object get_SyncRoot() { }

	// RVA: 0x242FDE0 Offset: 0x242FDE0 VA: 0x242FDE0
	public int Add(KeyContainerPermissionAccessEntry accessEntry) { }

	// RVA: 0x242FFBC Offset: 0x242FFBC VA: 0x242FFBC
	public void CopyTo(KeyContainerPermissionAccessEntry[] array, int index) { }

	// RVA: 0x24305D8 Offset: 0x24305D8 VA: 0x24305D8
	public KeyContainerPermissionAccessEntryEnumerator GetEnumerator() { }

	// RVA: 0x2430818 Offset: 0x2430818 VA: 0x2430818
	public int IndexOf(KeyContainerPermissionAccessEntry accessEntry) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9AF4 Offset: 0xBC9AF4 VA: 0xBC9AF4
[Serializable]
public sealed class KeyContainerPermissionAccessEntryEnumerator : IEnumerator // TypeDefIndex: 803
{
	// Fields
	private IEnumerator e; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public KeyContainerPermissionAccessEntry Current { get; }

	// Methods

	// RVA: 0x2430B94 Offset: 0x2430B94 VA: 0x2430B94
	internal void .ctor(ArrayList list) { }

	// RVA: 0x2430BEC Offset: 0x2430BEC VA: 0x2430BEC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	// RVA: 0x243063C Offset: 0x243063C VA: 0x243063C
	public KeyContainerPermissionAccessEntry get_Current() { }

	// RVA: 0x2430760 Offset: 0x2430760 VA: 0x2430760 Slot: 5
	public bool MoveNext() { }

	// RVA: 0x2430CA0 Offset: 0x2430CA0 VA: 0x2430CA0 Slot: 6
	public void Reset() { }
}

// Namespace: System.Security.Permissions
[FlagsAttribute] // RVA: 0xBC9B08 Offset: 0xBC9B08 VA: 0xBC9B08
[ComVisibleAttribute] // RVA: 0xBC9B08 Offset: 0xBC9B08 VA: 0xBC9B08
[Serializable]
public enum KeyContainerPermissionFlags // TypeDefIndex: 804
{
	// Fields
	public int value__; // 0x0
	public const KeyContainerPermissionFlags NoFlags = 0;
	public const KeyContainerPermissionFlags Create = 1;
	public const KeyContainerPermissionFlags Open = 2;
	public const KeyContainerPermissionFlags Delete = 4;
	public const KeyContainerPermissionFlags Import = 16;
	public const KeyContainerPermissionFlags Export = 32;
	public const KeyContainerPermissionFlags Sign = 256;
	public const KeyContainerPermissionFlags Decrypt = 512;
	public const KeyContainerPermissionFlags ViewAcl = 4096;
	public const KeyContainerPermissionFlags ChangeAcl = 8192;
	public const KeyContainerPermissionFlags AllFlags = 13111;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9B44 Offset: 0xBC9B44 VA: 0xBC9B44
[Serializable]
public enum PermissionState // TypeDefIndex: 805
{
	// Fields
	public int value__; // 0x0
	public const PermissionState Unrestricted = 1;
	public const PermissionState None = 0;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9B58 Offset: 0xBC9B58 VA: 0xBC9B58
[Serializable]
public sealed class ReflectionPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 806
{
	// Fields
	private ReflectionPermissionFlag flags; // 0x10

	// Properties
	public ReflectionPermissionFlag Flags { get; set; }

	// Methods

	// RVA: 0x2430D58 Offset: 0x2430D58 VA: 0x2430D58
	public void .ctor(PermissionState state) { }

	// RVA: 0x2430DA0 Offset: 0x2430DA0 VA: 0x2430DA0
	public void .ctor(ReflectionPermissionFlag flag) { }

	// RVA: 0x2430EE0 Offset: 0x2430EE0 VA: 0x2430EE0
	public ReflectionPermissionFlag get_Flags() { }

	// RVA: 0x2430DD0 Offset: 0x2430DD0 VA: 0x2430DD0
	public void set_Flags(ReflectionPermissionFlag value) { }

	// RVA: 0x2430EE8 Offset: 0x2430EE8 VA: 0x2430EE8 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x2430F58 Offset: 0x2430F58 VA: 0x2430F58 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x24310F0 Offset: 0x24310F0 VA: 0x24310F0 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x2431308 Offset: 0x2431308 VA: 0x2431308 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x24312F8 Offset: 0x24312F8 VA: 0x24312F8 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x2431364 Offset: 0x2431364 VA: 0x2431364 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x24315DC Offset: 0x24315DC VA: 0x24315DC Slot: 20
	public override IPermission Union(IPermission other) { }

	// RVA: 0x243124C Offset: 0x243124C VA: 0x243124C
	private ReflectionPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9B6C Offset: 0xBC9B6C VA: 0xBC9B6C
[FlagsAttribute] // RVA: 0xBC9B6C Offset: 0xBC9B6C VA: 0xBC9B6C
[Serializable]
public enum ReflectionPermissionFlag // TypeDefIndex: 807
{
	// Fields
	public int value__; // 0x0
	public const ReflectionPermissionFlag NoFlags = 0;
	[ObsoleteAttribute] // RVA: 0xBCB6C0 Offset: 0xBCB6C0 VA: 0xBCB6C0
	public const ReflectionPermissionFlag TypeInformation = 1;
	public const ReflectionPermissionFlag MemberAccess = 2;
	public const ReflectionPermissionFlag ReflectionEmit = 4;
	public const ReflectionPermissionFlag AllFlags = 7;
	[ComVisibleAttribute] // RVA: 0xBCB6F8 Offset: 0xBCB6F8 VA: 0xBCB6F8
	public const ReflectionPermissionFlag RestrictedMemberAccess = 8;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9BA8 Offset: 0xBC9BA8 VA: 0xBC9BA8
[Serializable]
public sealed class RegistryPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 808
{
	// Fields
	private PermissionState _state; // 0x10
	private ArrayList createList; // 0x18
	private ArrayList readList; // 0x20
	private ArrayList writeList; // 0x28

	// Methods

	// RVA: 0x243175C Offset: 0x243175C VA: 0x243175C
	public void .ctor(PermissionState state) { }

	// RVA: 0x2431818 Offset: 0x2431818 VA: 0x2431818
	public void AddPathList(RegistryPermissionAccess access, string pathList) { }

	// RVA: 0x2431E50 Offset: 0x2431E50 VA: 0x2431E50
	public string GetPathList(RegistryPermissionAccess access) { }

	// RVA: 0x2432280 Offset: 0x2432280 VA: 0x2432280
	public void SetPathList(RegistryPermissionAccess access, string pathList) { }

	// RVA: 0x2432790 Offset: 0x2432790 VA: 0x2432790 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x243288C Offset: 0x243288C VA: 0x243288C Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x2432A24 Offset: 0x2432A24 VA: 0x2432A24 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x24334D4 Offset: 0x24334D4 VA: 0x24334D4 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x2432C24 Offset: 0x2432C24 VA: 0x2432C24 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x2433C08 Offset: 0x2433C08 VA: 0x2433C08 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x2433D54 Offset: 0x2433D54 VA: 0x2433D54 Slot: 20
	public override IPermission Union(IPermission other) { }

	// RVA: 0x243342C Offset: 0x243342C VA: 0x243342C
	private bool IsEmpty() { }

	// RVA: 0x2432B78 Offset: 0x2432B78 VA: 0x2432B78
	private RegistryPermission Cast(IPermission target) { }

	// RVA: 0x2431D4C Offset: 0x2431D4C VA: 0x2431D4C
	internal void ThrowInvalidFlag(RegistryPermissionAccess flag, bool context) { }

	// RVA: 0x2431EA8 Offset: 0x2431EA8 VA: 0x2431EA8
	private string GetPathList(ArrayList list) { }

	// RVA: 0x2433578 Offset: 0x2433578 VA: 0x2433578
	internal bool KeyIsSubsetOf(IList local, IList target) { }

	// RVA: 0x243191C Offset: 0x243191C VA: 0x243191C
	internal void AddWithUnionKey(IList list, string pathList) { }

	// RVA: 0x2432C34 Offset: 0x2432C34 VA: 0x2432C34
	internal void IntersectKeys(IList local, IList target, IList result) { }
}

// Namespace: System.Security.Permissions
[FlagsAttribute] // RVA: 0xBC9BBC Offset: 0xBC9BBC VA: 0xBC9BBC
[ComVisibleAttribute] // RVA: 0xBC9BBC Offset: 0xBC9BBC VA: 0xBC9BBC
[Serializable]
public enum RegistryPermissionAccess // TypeDefIndex: 809
{
	// Fields
	public int value__; // 0x0
	public const RegistryPermissionAccess NoAccess = 0;
	public const RegistryPermissionAccess Read = 1;
	public const RegistryPermissionAccess Write = 2;
	public const RegistryPermissionAccess Create = 4;
	public const RegistryPermissionAccess AllAccess = 7;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9BF8 Offset: 0xBC9BF8 VA: 0xBC9BF8
[ObsoleteAttribute] // RVA: 0xBC9BF8 Offset: 0xBC9BF8 VA: 0xBC9BF8
[Serializable]
public enum SecurityAction // TypeDefIndex: 810
{
	// Fields
	public int value__; // 0x0
	public const SecurityAction Demand = 2;
	public const SecurityAction Assert = 3;
	public const SecurityAction Deny = 4;
	public const SecurityAction PermitOnly = 5;
	public const SecurityAction LinkDemand = 6;
	public const SecurityAction InheritanceDemand = 7;
	public const SecurityAction RequestMinimum = 8;
	public const SecurityAction RequestOptional = 9;
	public const SecurityAction RequestRefuse = 10;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9C48 Offset: 0xBC9C48 VA: 0xBC9C48
[Serializable]
public sealed class SecurityPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 811
{
	// Fields
	private SecurityPermissionFlag flags; // 0x10

	// Properties
	public SecurityPermissionFlag Flags { set; }

	// Methods

	// RVA: 0x2433F30 Offset: 0x2433F30 VA: 0x2433F30
	public void .ctor(PermissionState state) { }

	// RVA: 0x2433F78 Offset: 0x2433F78 VA: 0x2433F78
	public void .ctor(SecurityPermissionFlag flag) { }

	// RVA: 0x2433FA8 Offset: 0x2433FA8 VA: 0x2433FA8
	public void set_Flags(SecurityPermissionFlag value) { }

	// RVA: 0x24340B8 Offset: 0x24340B8 VA: 0x24340B8 Slot: 21
	public bool IsUnrestricted() { }

	// RVA: 0x24340CC Offset: 0x24340CC VA: 0x24340CC Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x243413C Offset: 0x243413C VA: 0x243413C Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x243430C Offset: 0x243430C VA: 0x243430C Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x2434400 Offset: 0x2434400 VA: 0x2434400 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x2434464 Offset: 0x2434464 VA: 0x2434464 Slot: 16
	public override void FromXml(SecurityElement esd) { }

	// RVA: 0x24345A4 Offset: 0x24345A4 VA: 0x24345A4 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x24342FC Offset: 0x24342FC VA: 0x24342FC
	private bool IsEmpty() { }

	// RVA: 0x2434250 Offset: 0x2434250 VA: 0x2434250
	private SecurityPermission Cast(IPermission target) { }
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9C5C Offset: 0xBC9C5C VA: 0xBC9C5C
[AttributeUsageAttribute] // RVA: 0xBC9C5C Offset: 0xBC9C5C VA: 0xBC9C5C
[ObsoleteAttribute] // RVA: 0xBC9C5C Offset: 0xBC9C5C VA: 0xBC9C5C
[Serializable]
public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 812
{
	// Fields
	private SecurityPermissionFlag m_Flags; // 0x18

	// Properties
	public bool SkipVerification { set; }

	// Methods

	// RVA: 0x24346A0 Offset: 0x24346A0 VA: 0x24346A0
	public void set_SkipVerification(bool value) { }

	// RVA: 0x24346BC Offset: 0x24346BC VA: 0x24346BC Slot: 7
	public override IPermission CreatePermission() { }
}

// Namespace: System.Security.Permissions
[ObsoleteAttribute] // RVA: 0xBC9CE4 Offset: 0xBC9CE4 VA: 0xBC9CE4
[ComVisibleAttribute] // RVA: 0xBC9CE4 Offset: 0xBC9CE4 VA: 0xBC9CE4
[FlagsAttribute] // RVA: 0xBC9CE4 Offset: 0xBC9CE4 VA: 0xBC9CE4
[Serializable]
public enum SecurityPermissionFlag // TypeDefIndex: 813
{
	// Fields
	public int value__; // 0x0
	public const SecurityPermissionFlag NoFlags = 0;
	public const SecurityPermissionFlag Assertion = 1;
	public const SecurityPermissionFlag UnmanagedCode = 2;
	public const SecurityPermissionFlag SkipVerification = 4;
	public const SecurityPermissionFlag Execution = 8;
	public const SecurityPermissionFlag ControlThread = 16;
	public const SecurityPermissionFlag ControlEvidence = 32;
	public const SecurityPermissionFlag ControlPolicy = 64;
	public const SecurityPermissionFlag SerializationFormatter = 128;
	public const SecurityPermissionFlag ControlDomainPolicy = 256;
	public const SecurityPermissionFlag ControlPrincipal = 512;
	public const SecurityPermissionFlag ControlAppDomain = 1024;
	public const SecurityPermissionFlag RemotingConfiguration = 2048;
	public const SecurityPermissionFlag Infrastructure = 4096;
	public const SecurityPermissionFlag BindingRedirects = 8192;
	public const SecurityPermissionFlag AllFlags = 16383;
}

// Namespace: System.Security.Permissions
[ComVisibleAttribute] // RVA: 0xBC9D44 Offset: 0xBC9D44 VA: 0xBC9D44
[Serializable]
public sealed class StrongNameIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 814
{
	// Fields
	private static Version defaultVersion; // 0x0
	private PermissionState _state; // 0x10
	private ArrayList _list; // 0x18

	// Properties
	public string Name { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }
	public Version Version { get; }

	// Methods

	// RVA: 0x24346C4 Offset: 0x24346C4 VA: 0x24346C4
	public void .ctor(PermissionState state) { }

	// RVA: 0x24348DC Offset: 0x24348DC VA: 0x24348DC
	public void .ctor(StrongNamePublicKeyBlob blob, string name, Version version) { }

	// RVA: 0x2434A48 Offset: 0x2434A48 VA: 0x2434A48
	internal void .ctor(StrongNameIdentityPermission snip) { }

	// RVA: 0x2434D70 Offset: 0x2434D70 VA: 0x2434D70
	private static void .cctor() { }

	// RVA: 0x2434DE4 Offset: 0x2434DE4 VA: 0x2434DE4
	public string get_Name() { }

	// RVA: 0x2434EC4 Offset: 0x2434EC4 VA: 0x2434EC4
	public StrongNamePublicKeyBlob get_PublicKey() { }

	// RVA: 0x2434FA4 Offset: 0x2434FA4 VA: 0x2434FA4
	public Version get_Version() { }

	// RVA: 0x2435084 Offset: 0x2435084 VA: 0x2435084 Slot: 15
	public override IPermission Copy() { }

	// RVA: 0x2435244 Offset: 0x2435244 VA: 0x2435244 Slot: 16
	public override void FromXml(SecurityElement e) { }

	// RVA: 0x2435670 Offset: 0x2435670 VA: 0x2435670
	private StrongNameIdentityPermission.SNIP FromSecurityElement(SecurityElement se) { }

	// RVA: 0x2435930 Offset: 0x2435930 VA: 0x2435930 Slot: 17
	public override IPermission Intersect(IPermission target) { }

	// RVA: 0x2435E30 Offset: 0x2435E30 VA: 0x2435E30 Slot: 18
	public override bool IsSubsetOf(IPermission target) { }

	// RVA: 0x2436508 Offset: 0x2436508 VA: 0x2436508 Slot: 19
	public override SecurityElement ToXml() { }

	// RVA: 0x24368B8 Offset: 0x24368B8 VA: 0x24368B8
	private void ToSecurityElement(SecurityElement se, StrongNameIdentityPermission.SNIP snip) { }

	// RVA: 0x2436BE8 Offset: 0x2436BE8 VA: 0x2436BE8 Slot: 20
	public override IPermission Union(IPermission target) { }

	// RVA: 0x243644C Offset: 0x243644C VA: 0x243644C
	private bool IsUnrestricted() { }

	// RVA: 0x2436FA4 Offset: 0x2436FA4 VA: 0x2436FA4
	private bool Contains(StrongNameIdentityPermission.SNIP snip) { }

	// RVA: 0x24369D4 Offset: 0x24369D4 VA: 0x24369D4
