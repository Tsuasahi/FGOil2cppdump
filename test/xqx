
	// Methods

	// RVA: 0x1153088 Offset: 0x1153088 VA: 0x1153088
	public void .ctor() { }

	// RVA: 0x11530E8 Offset: 0x11530E8 VA: 0x11530E8
	private void Start() { }

	// RVA: 0x11530EC Offset: 0x11530EC VA: 0x11530EC
	public void Execution() { }
}

// Namespace: 
[Serializable]
public struct BattleRandomSwitchObj.SwitchData // TypeDefIndex: 8930
{
	// Fields
	[TooltipAttribute] // RVA: 0xC632A0 Offset: 0xC632A0 VA: 0xC632A0
	public GameObject[] objs; // 0x0
	[TooltipAttribute] // RVA: 0xC632D8 Offset: 0xC632D8 VA: 0xC632D8
	public int weight; // 0x8
	[TooltipAttribute] // RVA: 0xC63310 Offset: 0xC63310 VA: 0xC63310
	public bool hitValue; // 0xC
	[TooltipAttribute] // RVA: 0xC63348 Offset: 0xC63348 VA: 0xC63348
	public bool initValue; // 0xD
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E24 Offset: 0xC43E24 VA: 0xC43E24
private sealed class BattleRandomSwitchObj.<Execution>c__AnonStorey1 // TypeDefIndex: 8931
{
	// Fields
	internal int hitIndex; // 0x10
	internal BattleRandomSwitchObj $this; // 0x18

	// Methods

	// RVA: 0x11534C0 Offset: 0x11534C0 VA: 0x11534C0
	public void .ctor() { }

	// RVA: 0x115356C Offset: 0x115356C VA: 0x115356C
	internal void <>m__0(GameObject g) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E34 Offset: 0xC43E34 VA: 0xC43E34
private sealed class BattleRandomSwitchObj.<Execution>c__AnonStorey0 // TypeDefIndex: 8932
{
	// Fields
	internal int i; // 0x10
	internal BattleRandomSwitchObj.<Execution>c__AnonStorey1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x11534C8 Offset: 0x11534C8 VA: 0x11534C8
	public void .ctor() { }

	// RVA: 0x11534D0 Offset: 0x11534D0 VA: 0x11534D0
	internal void <>m__0(GameObject g) { }
}

// Namespace: 
public class BattleRootComponent : SceneRootComponent // TypeDefIndex: 8933
{
	// Fields
	public BattleData data; // 0x38
	public BattleLogic logic; // 0x40
	public BattlePerformance perf; // 0x48
	public string works; // 0x50
	public SceneList.Type nextscenetype; // 0x58
	public GameObject debugButton; // 0x60
	private AssetStorageLoadWrapper assetStorageLoadWrapper; // 0x68
	protected BattleRootComponent.callBackBeginResume callbackBeginResumeFunc; // 0x70

	// Methods

	// RVA: 0x1175D18 Offset: 0x1175D18 VA: 0x1175D18
	public void .ctor() { }

	// RVA: 0x116D1B8 Offset: 0x116D1B8 VA: 0x116D1B8
	public void setCallbackBeginResume(BattleRootComponent.callBackBeginResume func) { }

	// RVA: 0x1175D20 Offset: 0x1175D20 VA: 0x1175D20 Slot: 9
	public override void beginResume(object data) { }

	// RVA: 0x1175DF8 Offset: 0x1175DF8 VA: 0x1175DF8 Slot: 4
	public override void beginInitialize() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD030 Offset: 0xCCD030 VA: 0xCCD030
	// RVA: 0x11761C8 Offset: 0x11761C8 VA: 0x11761C8
	private IEnumerator LoadAsset(QuestPhaseEntity ent, int eventId) { }

	// RVA: 0x1176274 Offset: 0x1176274 VA: 0x1176274
	public void LoadBatteBgm(List<string> bgmList, Action callback) { }

	// RVA: 0x117646C Offset: 0x117646C VA: 0x117646C Slot: 5
	public override void beginStartUp(object data) { }

	// RVA: 0x1176784 Offset: 0x1176784 VA: 0x1176784
	public void endLoadIcon() { }

	// RVA: 0x11767E8 Offset: 0x11767E8 VA: 0x11767E8
	public void endQuest() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD040 Offset: 0xCCD040 VA: 0xCCD040
	// RVA: 0x11769D8 Offset: 0x11769D8 VA: 0x11769D8
	private IEnumerator loadOutGameAsset(Action callback) { }

	// RVA: 0x1176A6C Offset: 0x1176A6C VA: 0x1176A6C
	private void goNextScene() { }

	// RVA: 0x1177308 Offset: 0x1177308 VA: 0x1177308
	private void TerminalTransition(BattleScriptRootComponent.TalkScriptInfo info) { }

	// RVA: 0x1176C28 Offset: 0x1176C28 VA: 0x1176C28
	private void TransitionTerminalOrBattleScript(BattleScriptRootComponent.TalkScriptInfo info) { }
}

// Namespace: 
public sealed class BattleRootComponent.callBackBeginResume : MulticastDelegate // TypeDefIndex: 8934
{
	// Methods

	// RVA: 0xF0D430 Offset: 0xF0D430 VA: 0xF0D430
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF0D440 Offset: 0xF0D440 VA: 0xF0D440 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0xF0D640 Offset: 0xF0D640 VA: 0xF0D640 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0xF0D674 Offset: 0xF0D674 VA: 0xF0D674 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E44 Offset: 0xC43E44 VA: 0xC43E44
private sealed class BattleRootComponent.<LoadAsset>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8935
{
	// Fields
	internal WaitForEndOfFrame <wait>__1; // 0x10
	internal QuestPhaseEntity ent; // 0x18
	internal int <battleEffectId>__0; // 0x20
	internal string[] <loadedPathArray>__0; // 0x28
	internal ConstantMaster <constMst>__0; // 0x30
	internal int[] <effectIdArray>__0; // 0x38
	internal string[] <loadedSpecialInvinciblePathArray>__0; // 0x40
	internal int eventId; // 0x48
	internal BgmMaster <bgmMaster>__0; // 0x50
	internal BattleEntity <battleEntity>__0; // 0x58
	internal HashSet<string> <bgmNameSet>__0; // 0x60
	internal BattleRootComponent $this; // 0x68
	internal object $current; // 0x70
	internal bool $disposing; // 0x78
	internal int $PC; // 0x7C
	private BattleRootComponent.<LoadAsset>c__Iterator0.<LoadAsset>c__AnonStorey2 $locvar2; // 0x80

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAF80 Offset: 0xCDAF80 VA: 0xCDAF80
	// RVA: 0xF0B1B4 Offset: 0xF0B1B4 VA: 0xF0B1B4
	public void .ctor() { }

	// RVA: 0xF0B1BC Offset: 0xF0B1BC VA: 0xF0B1BC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAF90 Offset: 0xCDAF90 VA: 0xCDAF90
	// RVA: 0xF0C26C Offset: 0xF0C26C VA: 0xF0C26C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAFA0 Offset: 0xCDAFA0 VA: 0xCDAFA0
	// RVA: 0xF0C274 Offset: 0xF0C274 VA: 0xF0C274 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAFB0 Offset: 0xCDAFB0 VA: 0xCDAFB0
	// RVA: 0xF0C27C Offset: 0xF0C27C VA: 0xF0C27C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAFC0 Offset: 0xCDAFC0 VA: 0xCDAFC0
	// RVA: 0xF0C290 Offset: 0xF0C290 VA: 0xF0C290 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattleRootComponent.<LoadAsset>c__Iterator0.<LoadAsset>c__AnonStorey2 // TypeDefIndex: 8936
{
	// Fields
	internal AssetData commonData; // 0x10
	internal bool isNext; // 0x18
	internal int[] fieldMotionIds; // 0x20
	internal BattleRootComponent.<LoadAsset>c__Iterator0 <>f__ref$0; // 0x28

	// Methods

	// RVA: 0xF0C25C Offset: 0xF0C25C VA: 0xF0C25C
	public void .ctor() { }

	// RVA: 0xF0C2F8 Offset: 0xF0C2F8 VA: 0xF0C2F8
	internal void <>m__0(AssetData common) { }

	// RVA: 0xF0C3B0 Offset: 0xF0C3B0 VA: 0xF0C3B0
	internal void <>m__1(AssetData effectData) { }

	// RVA: 0xF0C538 Offset: 0xF0C538 VA: 0xF0C538
	internal void <>m__2() { }

	// RVA: 0xF0C544 Offset: 0xF0C544 VA: 0xF0C544
	internal void <>m__3() { }

	// RVA: 0xF0C550 Offset: 0xF0C550 VA: 0xF0C550
	internal void <>m__4() { }

	// RVA: 0xF0C5B0 Offset: 0xF0C5B0 VA: 0xF0C5B0
	internal void <>m__5() { }

	// RVA: 0xF0C5BC Offset: 0xF0C5BC VA: 0xF0C5BC
	internal void <>m__6() { }

	// RVA: 0xF0C67C Offset: 0xF0C67C VA: 0xF0C67C
	internal void <>m__7() { }
}

// Namespace: 
private sealed class BattleRootComponent.<LoadAsset>c__Iterator0.<LoadAsset>c__AnonStorey3 // TypeDefIndex: 8937
{
	// Fields
	internal List<AssetData> motionDataList; // 0x10
	internal int loadCompCnt; // 0x18
	internal BattleRootComponent.<LoadAsset>c__Iterator0 <>f__ref$0; // 0x20
	internal BattleRootComponent.<LoadAsset>c__Iterator0.<LoadAsset>c__AnonStorey2 <>f__ref$2; // 0x28

	// Methods

	// RVA: 0xF0C264 Offset: 0xF0C264 VA: 0xF0C264
	public void .ctor() { }

	// RVA: 0xF0C6FC Offset: 0xF0C6FC VA: 0xF0C6FC
	internal void <>m__0(AssetData motionData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E54 Offset: 0xC43E54 VA: 0xC43E54
private sealed class BattleRootComponent.<LoadBatteBgm>c__AnonStorey4 // TypeDefIndex: 8938
{
	// Fields
	internal List<string> bgmList; // 0x10
	internal Action callback; // 0x18
	internal BattleRootComponent $this; // 0x20

	// Methods

	// RVA: 0xF0C81C Offset: 0xF0C81C VA: 0xF0C81C
	public void .ctor() { }

	// RVA: 0xF0C824 Offset: 0xF0C824 VA: 0xF0C824
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E64 Offset: 0xC43E64 VA: 0xC43E64
private sealed class BattleRootComponent.<loadOutGameAsset>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8939
{
	// Fields
	internal WaitForEndOfFrame <wait>__1; // 0x10
	internal Action callback; // 0x18
	internal BattleRootComponent $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34
	private BattleRootComponent.<loadOutGameAsset>c__Iterator1.<loadOutGameAsset>c__AnonStorey7 $locvar0; // 0x38
	private BattleRootComponent.<loadOutGameAsset>c__Iterator1.<loadOutGameAsset>c__AnonStorey5 $locvar1; // 0x40
	private BattleRootComponent.<loadOutGameAsset>c__Iterator1.<loadOutGameAsset>c__AnonStorey6 $locvar2; // 0x48

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDAFD0 Offset: 0xCDAFD0 VA: 0xCDAFD0
	// RVA: 0xF0CBD0 Offset: 0xF0CBD0 VA: 0xF0CBD0
	public void .ctor() { }

	// RVA: 0xF0CBD8 Offset: 0xF0CBD8 VA: 0xF0CBD8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAFE0 Offset: 0xCDAFE0 VA: 0xCDAFE0
	// RVA: 0xF0D368 Offset: 0xF0D368 VA: 0xF0D368 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDAFF0 Offset: 0xCDAFF0 VA: 0xCDAFF0
	// RVA: 0xF0D370 Offset: 0xF0D370 VA: 0xF0D370 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB000 Offset: 0xCDB000 VA: 0xCDB000
	// RVA: 0xF0D378 Offset: 0xF0D378 VA: 0xF0D378 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDB010 Offset: 0xCDB010 VA: 0xCDB010
	// RVA: 0xF0D38C Offset: 0xF0D38C VA: 0xF0D38C Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattleRootComponent.<loadOutGameAsset>c__Iterator1.<loadOutGameAsset>c__AnonStorey7 // TypeDefIndex: 8940
{
	// Fields
	internal bool isCharaGraphOptionAtlasLoaded; // 0x10
	internal bool isBannerAtlasLoaded; // 0x11
	internal bool isEventUIAtlasLoaded; // 0x12
	internal BattleRootComponent.<loadOutGameAsset>c__Iterator1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0xF0D350 Offset: 0xF0D350 VA: 0xF0D350
	public void .ctor() { }

	// RVA: 0xF0D40C Offset: 0xF0D40C VA: 0xF0D40C
	internal void <>m__0() { }

	// RVA: 0xF0D418 Offset: 0xF0D418 VA: 0xF0D418
	internal void <>m__1() { }

	// RVA: 0xF0D424 Offset: 0xF0D424 VA: 0xF0D424
	internal void <>m__2() { }
}

// Namespace: 
private sealed class BattleRootComponent.<loadOutGameAsset>c__Iterator1.<loadOutGameAsset>c__AnonStorey5 // TypeDefIndex: 8941
{
	// Fields
	internal bool isEventAtlasLoaded; // 0x10

	// Methods

	// RVA: 0xF0D358 Offset: 0xF0D358 VA: 0xF0D358
	public void .ctor() { }

	// RVA: 0xF0D3F4 Offset: 0xF0D3F4 VA: 0xF0D3F4
	internal void <>m__0() { }
}

// Namespace: 
private sealed class BattleRootComponent.<loadOutGameAsset>c__Iterator1.<loadOutGameAsset>c__AnonStorey6 // TypeDefIndex: 8942
{
	// Fields
	internal bool isFaceAtlasLoaded; // 0x10

	// Methods

	// RVA: 0xF0D360 Offset: 0xF0D360 VA: 0xF0D360
	public void .ctor() { }

	// RVA: 0xF0D400 Offset: 0xF0D400 VA: 0xF0D400
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E74 Offset: 0xC43E74 VA: 0xC43E74
private sealed class BattleRootComponent.<TransitionTerminalOrBattleScript>c__AnonStorey8 // TypeDefIndex: 8943
{
	// Fields
	internal BattleScriptRootComponent.TalkScriptInfo info; // 0x10
	internal int questId; // 0x18
	internal int questPhase; // 0x1C
	internal BattleRootComponent $this; // 0x20

	// Methods

	// RVA: 0xF0C8F8 Offset: 0xF0C8F8 VA: 0xF0C8F8
	public void .ctor() { }

	// RVA: 0xF0C900 Offset: 0xF0C900 VA: 0xF0C900
	internal void <>m__0(bool isDeside) { }

	// RVA: 0xF0C988 Offset: 0xF0C988 VA: 0xF0C988
	internal void <>m__1(string demo1) { }

	// RVA: 0xF0CAD4 Offset: 0xF0CAD4 VA: 0xF0CAD4
	internal void <>m__2(string demo2) { }
}

// Namespace: 
public class BattleSaveData : MonoBehaviour // TypeDefIndex: 8944
{
	// Methods

	// RVA: 0xF0D8F4 Offset: 0xF0D8F4 VA: 0xF0D8F4
	public void .ctor() { }
}

// Namespace: 
public class BattleSelectCommandTypeWindow : BattleWindowOuterClickManagerComponent // TypeDefIndex: 8945
{
	// Fields
	private BattleSelectCommandTypeWindow.SelectServantCallBack selectCallBack; // 0x50
	public UILabel title_label; // 0x58
	public GameObject parentPanel; // 0x60
	public UIGrid svtRoot; // 0x68
	[SerializeField] // RVA: 0xC63380 Offset: 0xC63380 VA: 0xC63380
	private GameObject[] commandTypeObj; // 0x70
	public bool useClose; // 0x78
	public bool isSelected; // 0x79
	public Collider cancelButton; // 0x80
	private BattleServantData battleServantData; // 0x88
	[SerializeField] // RVA: 0xC63390 Offset: 0xC63390 VA: 0xC63390
	private GameObject nowTypeFrameObj; // 0x90
	[SerializeField] // RVA: 0xC633A0 Offset: 0xC633A0 VA: 0xC633A0
	private UILabel nowTypeLabel; // 0x98
	private int nowCommandTypeID; // 0xA0
	private static BattleCommand.TYPE[] CommandTypeOrder; // 0x0

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0xF1508C Offset: 0xF1508C VA: 0xF1508C
	public void .ctor() { }

	// RVA: 0xF1509C Offset: 0xF1509C VA: 0xF1509C Slot: 7
	public override void setInitialPos() { }

	// RVA: 0xF15178 Offset: 0xF15178 VA: 0xF15178 Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF15230 Offset: 0xF15230 VA: 0xF15230 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF1528C Offset: 0xF1528C VA: 0xF1528C
	private static BattleCommand.TYPE ConvertQABToABQ(int qabTypeId) { }

	// RVA: 0xF152BC Offset: 0xF152BC VA: 0xF152BC
	private static BattleCommand.TYPE ConvertABQToQAB(int abqTypeId) { }

	// RVA: 0xF152C0 Offset: 0xF152C0 VA: 0xF152C0
	public void SetServantData(BattleServantData bsData, bool isShowFrame = False) { }

	// RVA: 0xF15BB0 Offset: 0xF15BB0 VA: 0xF15BB0
	public int[] GetExcludeTdChangeTypes(BattleServantData svtData) { }

	// RVA: 0xF15C6C Offset: 0xF15C6C VA: 0xF15C6C
	public void SetTreasureDvcData(BattleServantData bsData, ref BattleCommandComponent commandCard, BattleCommand.TYPE cmdType) { }

	// RVA: 0xF15F18 Offset: 0xF15F18 VA: 0xF15F18
	public void SetCallBack(BattleSelectCommandTypeWindow.SelectServantCallBack callback) { }

	// RVA: 0xF15F20 Offset: 0xF15F20 VA: 0xF15F20
	public void setUseClose(bool flg) { }

	// RVA: 0xF15FD8 Offset: 0xF15FD8 VA: 0xF15FD8
	public void onCloseButton() { }

	// RVA: 0xF160D0 Offset: 0xF160D0 VA: 0xF160D0
	public void SelectA() { }

	// RVA: 0xF160D8 Offset: 0xF160D8 VA: 0xF160D8
	public void SelectB() { }

	// RVA: 0xF160E0 Offset: 0xF160E0 VA: 0xF160E0
	public void SelectC() { }

	// RVA: 0xF15FEC Offset: 0xF15FEC VA: 0xF15FEC
	public void SelectServant(BattleCommand.TYPE cmdType) { }

	// RVA: 0xF1632C Offset: 0xF1632C VA: 0xF1632C Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0xF163CC Offset: 0xF163CC VA: 0xF163CC
	private static void .cctor() { }
}

// Namespace: 
public sealed class BattleSelectCommandTypeWindow.SelectServantCallBack : MulticastDelegate // TypeDefIndex: 8946
{
	// Methods

	// RVA: 0xF164FC Offset: 0xF164FC VA: 0xF164FC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF160E8 Offset: 0xF160E8 VA: 0xF160E8 Slot: 11
	public virtual void Invoke(int uniqueId, int cmdType) { }

	// RVA: 0xF1650C Offset: 0xF1650C VA: 0xF1650C Slot: 12
	public virtual IAsyncResult BeginInvoke(int uniqueId, int cmdType, AsyncCallback callback, object object) { }

	// RVA: 0xF165AC Offset: 0xF165AC VA: 0xF165AC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E84 Offset: 0xC43E84 VA: 0xC43E84
private sealed class BattleSelectCommandTypeWindow.<SetServantData>c__AnonStorey0 // TypeDefIndex: 8947
{
	// Fields
	internal int i; // 0x10

	// Methods

	// RVA: 0xF15C64 Offset: 0xF15C64 VA: 0xF15C64
	public void .ctor() { }

	// RVA: 0xF16448 Offset: 0xF16448 VA: 0xF16448
	internal bool <>m__0(int x) { }
}

// Namespace: 
public class BattleSeManager : SingletonMonoBehaviour<BattleSeManager> // TypeDefIndex: 8948
{
	// Fields
	public float volume; // 0x18
	private List<BattleSeManager.BattleSePlayer> playingList; // 0x20
	private Dictionary<string, AssetLoader.LoadEndDataHandler> loadInfos; // 0x28
	protected EffectMaster effectMaster; // 0x30
	private List<string> assetStorageList; // 0x38
	private Dictionary<string, string> seToAssetTable; // 0x40

	// Methods

	// RVA: 0xF140F8 Offset: 0xF140F8 VA: 0xF140F8
	public void .ctor() { }

	// RVA: 0xF141F0 Offset: 0xF141F0 VA: 0xF141F0
	private void Start() { }

	// RVA: 0xF141F4 Offset: 0xF141F4 VA: 0xF141F4
	public void Initialize() { }

	// RVA: 0xF1426C Offset: 0xF1426C VA: 0xF1426C
	public void SetUp() { }

	// RVA: 0xF1427C Offset: 0xF1427C VA: 0xF1427C
	public void LoadSoundAsset(string cat, AssetLoader.LoadEndDataHandler callbackFunc) { }

	// RVA: 0xF143B0 Offset: 0xF143B0 VA: 0xF143B0
	public void DownloadSoundAsset(string cat, AssetLoader.LoadEndDataHandler callbackFunc) { }

	// RVA: 0xF144E4 Offset: 0xF144E4 VA: 0xF144E4
	protected void LoadEndAsset(AssetData data) { }

	// RVA: 0xF146E0 Offset: 0xF146E0 VA: 0xF146E0
	private BattleSeManager.BattleSePlayer SearchPlayingSe(string seName) { }

	// RVA: 0xF147B8 Offset: 0xF147B8 VA: 0xF147B8
	protected BattleSeManager.BattleSePlayer playBattleSe(string assetName, string seName, float volume, Action callback, Action<BattleSeManager.BattleSePlayer> systemCallback) { }

	// RVA: 0xF149DC Offset: 0xF149DC VA: 0xF149DC
	public void OnFinished(BattleSeManager.BattleSePlayer player) { }

	// RVA: 0xF149E0 Offset: 0xF149E0 VA: 0xF149E0
	public void PlaySeByEffect(string effectName, Action callback) { }

	// RVA: 0xF149E4 Offset: 0xF149E4 VA: 0xF149E4
	private void playSeCallback(BattleSeManager.BattleSePlayer player) { }
}

// Namespace: 
protected class BattleSeManager.LocalAssetInfo // TypeDefIndex: 8949
{
	// Fields
	public string name; // 0x10
	public AssetLoader.LoadEndDataHandler callback; // 0x18

	// Methods

	// RVA: 0xF14ABC Offset: 0xF14ABC VA: 0xF14ABC
	public void .ctor() { }
}

// Namespace: 
public class BattleSeManager.BattleSePlayer // TypeDefIndex: 8950
{
	// Fields
	private BattleSeManager manager; // 0x10
	private string assetName; // 0x18
	private string seName; // 0x20
	private float volume; // 0x28
	private Action callback; // 0x30
	private SePlayer player; // 0x38

	// Properties
	public string SeName { get; }

	// Methods

	// RVA: 0xF148BC Offset: 0xF148BC VA: 0xF148BC
	public void .ctor(BattleSeManager manager, string assetName, string seName, float volume, Action callback) { }

	// RVA: 0xF14A74 Offset: 0xF14A74 VA: 0xF14A74
	public string get_SeName() { }

	// RVA: 0xF1491C Offset: 0xF1491C VA: 0xF1491C
	public void Play() { }

	// RVA: 0xF14A7C Offset: 0xF14A7C VA: 0xF14A7C
	private void FinishCallback() { }

	// RVA: 0xF14878 Offset: 0xF14878 VA: 0xF14878
	public void Stop() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43E94 Offset: 0xC43E94 VA: 0xC43E94
private sealed class BattleSeManager.<SearchPlayingSe>c__AnonStorey0 // TypeDefIndex: 8951
{
	// Fields
	internal string seName; // 0x10

	// Methods

	// RVA: 0xF147B0 Offset: 0xF147B0 VA: 0xF147B0
	public void .ctor() { }

	// RVA: 0xF149E8 Offset: 0xF149E8 VA: 0xF149E8
	internal bool <>m__0(BattleSeManager.BattleSePlayer x) { }
}

// Namespace: 
public class BattleSequenceManager : SingletonMonoBehaviour<BattleSequenceManager> // TypeDefIndex: 8952
{
	// Fields
	public GameObject sequenceManager; // 0x18
	public int servantId; // 0x20
	public int limitCount; // 0x24
	public int testNpPer; // 0x28
	public bool testMode; // 0x2C
	public bool BackToTest; // 0x2D
	protected BattlePerformance.BattleUIPanel[] FadeTargetPanelIndexs; // 0x30
	public bool IsPlaying; // 0x38
	protected bool IsBgBusy; // 0x39
	protected List<string> ReleaseSoundNames; // 0x40
	private BattlePerformance performance; // 0x48
	public GameObject seqObject; // 0x50
	public GameObject actor; // 0x58
	public GameObject CutInRoot; // 0x60
	public GameObject[] playerActors; // 0x68
	public GameObject[] enemyActors; // 0x70
	public Camera actorCamera; // 0x78
	public Camera effectCamera; // 0x80
	public Camera cutInCamera; // 0x88
	private Transform originalCameraRoot; // 0x90
	public GameObject bgObject; // 0x98
	private List<bool> ActorActiveList; // 0xA0
	private int chrId; // 0xA8
	private int treasureDeviceId; // 0xAC
	private int overwriteSvtVoiceId; // 0xB0
	private int actorLimitImgCount; // 0xB4
	private Face.Type faceType; // 0xB8
	private UIStandFigureM standFigure; // 0xC0
	public static bool defaultForceObi_16_9; // 0x0
	private bool DemoMode; // 0xC8
	private string BackupBgmName; // 0xD0
	protected List<Action> DelayInvokeMethodList; // 0xD8
	protected float delayInvokeTimer; // 0xE0
	protected Action<USSequencer> OnCompleteActorCallback; // 0xE8
	[SerializeField] // RVA: 0xC633B0 Offset: 0xC633B0 VA: 0xC633B0
	protected static readonly float NoblePhantasmBgmVolumeRate; // 0x4
	protected BgmPlayArgsGroup backupBgmPlayArgsGroup; // 0xF0
	protected string[] intactBgmList; // 0xF8
	protected string fixedVoice; // 0x100
	public GameObject SingleTarget; // 0x108
	private readonly string PosNodeFormatNP; // 0x110
	[SerializeField] // RVA: 0xC633C0 Offset: 0xC633C0 VA: 0xC633C0
	protected BattleSyncTransformComponent defaultSyncSetting; // 0x118
	[SerializeField] // RVA: 0xC633D0 Offset: 0xC633D0 VA: 0xC633D0
	protected GameObject dummyActorPrefab; // 0x120
	private List<Object> npEndDeleteObjects; // 0x128
	private int loadStandFigureId; // 0x130
	private int loadStandFigureLimitCount; // 0x134
	private List<BattleSequenceManager.BattleTarget> battleTargetList; // 0x138
	private Action BgChangedCallback; // 0x140
	private List<GameObject> createdObjects; // 0x148
	private GameObject CutInPrefab; // 0x150
	private Dictionary<string, int> playAudioSyncGroupIndexDict; // 0x158
	private HashSet<string> playedAudioGroupIdHash; // 0x160
	private bool isAlreadyRegistDefaultVoice; // 0x168
	private float nowTargetAlpha; // 0x16C
	private const float NOBLE_PHANTASM_MODE_SHADER_VALUE = 5000;
	private GameObject[] saveWaitEnemy; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xC633E0 Offset: 0xC633E0 VA: 0xC633E0
	private static Comparison<USFGOPlayAudioEvent> <>f__am$cache0; // 0x8

	// Properties
	[HideInInspector] // RVA: 0xCDEB40 Offset: 0xCDEB40 VA: 0xCDEB40
	public BattlePerformance Performance { get; }
	public int TreasureDeviceId { get; }
	public bool IsDemoMode { get; }
	public float NowTargetAlpha { get; set; }
	public bool IsAccelerateMode { get; }
	public bool isAuthTDAccelerate { get; }

	// Methods

	// RVA: 0xF1933C Offset: 0xF1933C VA: 0xF1933C
	public void .ctor() { }

	// RVA: 0xF19518 Offset: 0xF19518 VA: 0xF19518
	public BattlePerformance get_Performance() { }

	// RVA: 0xF19520 Offset: 0xF19520 VA: 0xF19520
	public int get_TreasureDeviceId() { }

	// RVA: 0xF19528 Offset: 0xF19528 VA: 0xF19528
	public bool get_IsDemoMode() { }

	// RVA: 0xF19530 Offset: 0xF19530 VA: 0xF19530
	public float get_NowTargetAlpha() { }

	// RVA: 0xF19538 Offset: 0xF19538 VA: 0xF19538
	private void set_NowTargetAlpha(float value) { }

	// RVA: 0xF19540 Offset: 0xF19540 VA: 0xF19540
	public bool get_IsAccelerateMode() { }

	// RVA: 0xF19634 Offset: 0xF19634 VA: 0xF19634
	public bool get_isAuthTDAccelerate() { }

	// RVA: 0xF198D0 Offset: 0xF198D0 VA: 0xF198D0
	private void Update() { }

	// RVA: 0xF19A38 Offset: 0xF19A38 VA: 0xF19A38
	public void loadSequence(int chrId, int treasureDeviceId, int limitCount, int overwriteSvtVoiceId, int treasureDeviceLv, BattleSequenceManager.onGameObjectLoadComplete onComplete) { }

	// RVA: 0xF19CD4 Offset: 0xF19CD4 VA: 0xF19CD4
	public void FixSyncGroupRandomAudioPlayIndex(GameObject sequence, string syncGroupName) { }

	// RVA: 0xF19FA0 Offset: 0xF19FA0 VA: 0xF19FA0
	public void SetPreLoadStandFigureData(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0xF19FB0 Offset: 0xF19FB0 VA: 0xF19FB0
	private bool CreateCutInStandFigure(USFGOPlayCutInBase baseCutInEvent, GameObject obj, BattleSequenceManager.onGameObjectLoadComplete onComplete) { }

	// RVA: 0xF1A014 Offset: 0xF1A014 VA: 0xF1A014
	private bool CreateCutInStandFigure(GameObject obj, BattleSequenceManager.onGameObjectLoadComplete onComplete) { }

	// RVA: 0xF1A254 Offset: 0xF1A254 VA: 0xF1A254
	private void LoadBgm(string bgmName, Action callback) { }

	// RVA: 0xF1A350 Offset: 0xF1A350 VA: 0xF1A350
	private void LoadEndStandFigure(GameObject obj, BattleSequenceManager.onGameObjectLoadComplete onComplete) { }

	// RVA: 0xF1A7B8 Offset: 0xF1A7B8 VA: 0xF1A7B8
	public UIStandFigureM FetchMeshPrefab(int svtId, int limitImgCnt, Face.Type faceType) { }

	// RVA: 0xF1A810 Offset: 0xF1A810 VA: 0xF1A810
	public int GetOverwritedCutInLimitCount(int curLimCnt, int svtId, int defLimCnt) { }

	// RVA: 0xF1A924 Offset: 0xF1A924 VA: 0xF1A924
	public void SetupDemoActor(GameObject[] playerList, GameObject[] enemyList) { }

	// RVA: 0xF1AFCC Offset: 0xF1AFCC VA: 0xF1AFCC
	private void SetShaderNoblePhantasmMode(bool isStart) { }

	// RVA: 0xF1B0D8 Offset: 0xF1B0D8 VA: 0xF1B0D8
	private void SetTempShaderNoblePhantasmMode(BattleFBXComponent fbx, bool isStart) { }

	// RVA: 0xF1B1D4 Offset: 0xF1B1D4 VA: 0xF1B1D4
	public void setup(Action callback, bool isDemoMode = False, BattleBuffData buffData) { }

	// RVA: 0xF1F78C Offset: 0xF1F78C VA: 0xF1F78C
	private void addServantVoicePlayed(VoiceMaster voiceMaster, int chrId, string labelName) { }

	// RVA: 0xF1F894 Offset: 0xF1F894 VA: 0xF1F894
	private void removeServantVoicePlayed(VoiceMaster voiceMaster, int chrId, string labelName) { }

	// RVA: 0xF1F684 Offset: 0xF1F684 VA: 0xF1F684
	private bool checkServantVoicePlayed(VoiceMaster voiceMaster, int chrId, string labelName) { }

	// RVA: 0xF1EDEC Offset: 0xF1EDEC VA: 0xF1EDEC
	private bool updateCutInEvents(List<USFGOPlayCutInEvent> evs, string cutInName, GameObject obj) { }

	// RVA: 0xF1EBA8 Offset: 0xF1EBA8 VA: 0xF1EBA8
	private bool isValidObject(string name) { }

	// RVA: 0xF1EC64 Offset: 0xF1EC64 VA: 0xF1EC64
	private GameObject searchPrefab(int tdId, string name, BattleBuffData buffData) { }

	// RVA: 0xF1ABEC Offset: 0xF1ABEC VA: 0xF1ABEC
	private USTimelineContainer searchTimeline(USSequencer seq, string name) { }

	// RVA: 0xF1F99C Offset: 0xF1F99C VA: 0xF1F99C
	public void init(BattlePerformance performance, GameObject actor, GameObject[] players, GameObject[] enemies, Camera camera, GameObject bg) { }

	// RVA: 0xF1FCDC Offset: 0xF1FCDC VA: 0xF1FCDC
	public void startFadeBattleUI(float time, float targetAlpha) { }

	// RVA: 0xF1FAF4 Offset: 0xF1FAF4 VA: 0xF1FAF4
	protected void FadeBattleUI(float time, float targetAlpha) { }

	// RVA: 0xF1FCE0 Offset: 0xF1FCE0 VA: 0xF1FCE0
	public void changeBg(int id, int tp, Vector3 pos, Vector3 rot, bool parentCamera = False, Action callback) { }

	// RVA: 0xF1FDEC Offset: 0xF1FDEC VA: 0xF1FDEC
	protected void OnBgChanged() { }

	// RVA: 0xF1FE50 Offset: 0xF1FE50 VA: 0xF1FE50
	protected void ShowNobleInfo() { }

	// RVA: 0xF1FE90 Offset: 0xF1FE90 VA: 0xF1FE90
	public void play(bool isOpponent, bool isDemoMode, Action<USSequencer> callback) { }

	// RVA: 0xF21078 Offset: 0xF21078 VA: 0xF21078
	protected void SwitchPopupFullScreen(bool isFullScreen) { }

	// RVA: 0xF21148 Offset: 0xF21148 VA: 0xF21148
	protected void OnChangeBgmVolume(float newValue) { }

	// RVA: 0xF21464 Offset: 0xF21464 VA: 0xF21464
	private void OnNoblePhantasmPlayComplete(USSequencer seq) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD050 Offset: 0xCCD050 VA: 0xCCD050
	// RVA: 0xF21490 Offset: 0xF21490 VA: 0xF21490
	private IEnumerator WaitEndSequence() { }

	// RVA: 0xF21508 Offset: 0xF21508 VA: 0xF21508
	private void OnNoblePhantasmPlayCompleteProc() { }

	// RVA: 0xF20A2C Offset: 0xF20A2C VA: 0xF20A2C
	public void PrevPlayTargetActorProc(BattleActorControl actor) { }

	// RVA: 0xF23008 Offset: 0xF23008 VA: 0xF23008
	public void AfterPlayTargetActorProc(BattleActorControl actor) { }

	// RVA: 0xF22748 Offset: 0xF22748 VA: 0xF22748
	public void CrossFadeBgm() { }

	// RVA: 0xF2100C Offset: 0xF2100C VA: 0xF2100C
	public void SaveCurrentBgmPlayArgsGroup() { }

	// RVA: 0xF23304 Offset: 0xF23304 VA: 0xF23304
	public void OverwriteStartTimeToSavedBgmPlayArgsGroup() { }

	// RVA: 0xF2318C Offset: 0xF2318C VA: 0xF2318C
	public void ReleaseCpk() { }

	// RVA: 0xF1E298 Offset: 0xF1E298 VA: 0xF1E298
	protected void SetupTargetInfo() { }

	// RVA: 0xF23718 Offset: 0xF23718 VA: 0xF23718
	private void SetMultiTargetBattleEnemy(BattleActorControl targetActor) { }

	// RVA: 0xF23A6C Offset: 0xF23A6C VA: 0xF23A6C
	public bool MultiTargetBossPositioning(GameObject CoreObj) { }

	// RVA: 0xF20AC0 Offset: 0xF20AC0 VA: 0xF20AC0
	protected void SearchTargetAndModifyPositions() { }

	// RVA: 0xF1EF6C Offset: 0xF1EF6C VA: 0xF1EF6C
	public void targetMultipleAttach(USTimelineContainer tlcont, int targetIndex) { }

	// RVA: 0xF1F118 Offset: 0xF1F118 VA: 0xF1F118
	private void SyncAttachedTargetPair(USTimelineContainer tlcont, int targetPosIndex) { }

	// RVA: 0xF24108 Offset: 0xF24108 VA: 0xF24108
	public Transform GetTargetFieldPosNode(int pos, string format, bool isEnemy = True) { }

	// RVA: 0xF24008 Offset: 0xF24008 VA: 0xF24008
	private Transform GetTargetPosIndexTransform(int posIndex) { }

	// RVA: 0xF1F4A8 Offset: 0xF1F4A8 VA: 0xF1F4A8
	public void targetSingleAttach(USTimelineContainer tlcont, int targetIndex) { }

	// RVA: 0xF224DC Offset: 0xF224DC VA: 0xF224DC
	public void restoreBattleActorTransform() { }

	// RVA: 0xF242D8 Offset: 0xF242D8 VA: 0xF242D8
	public int getPlayAudioSyncGroup(string groupName) { }

	// RVA: 0xF24388 Offset: 0xF24388 VA: 0xF24388
	public void setPlayAudioSyncGroup(string groupName, int value, string playSoundId) { }

	// RVA: 0xF24478 Offset: 0xF24478 VA: 0xF24478
	public string[] getPlayedSoundList() { }

	// RVA: 0xF244C8 Offset: 0xF244C8 VA: 0xF244C8
	public bool isNotPlaySoundLimitCount(int[] limitCounts) { }

	// RVA: 0xF22DB4 Offset: 0xF22DB4 VA: 0xF22DB4
	public void registNobleVoiceRandomPlay() { }

	// RVA: 0xF2236C Offset: 0xF2236C VA: 0xF2236C
	public void SetBattleTargetAuraFilip(bool isReset = False) { }

	// RVA: 0xF24540 Offset: 0xF24540 VA: 0xF24540
	public void SetIntactBgms(int[] bgmIds) { }

	// RVA: 0xF245E0 Offset: 0xF245E0 VA: 0xF245E0
	public void RemoveIntactBgms() { }

	// RVA: 0xF245E8 Offset: 0xF245E8 VA: 0xF245E8
	public bool CheckNewBgm(string bgmName) { }

	// RVA: 0xF246A8 Offset: 0xF246A8 VA: 0xF246A8
	public void SetFixedVoice(string voiceId) { }

	// RVA: 0xF246B0 Offset: 0xF246B0 VA: 0xF246B0
	public void RemoveFixedVoice() { }

	// RVA: 0xF246B8 Offset: 0xF246B8 VA: 0xF246B8
	public bool isFixedWithNoVoice() { }

	// RVA: 0xF246E0 Offset: 0xF246E0 VA: 0xF246E0
	public bool HasFixedVoice(out string fxdVoice) { }

	// RVA: 0xF24700 Offset: 0xF24700 VA: 0xF24700
	public void TdDelayEnd() { }

	// RVA: 0xF22624 Offset: 0xF22624 VA: 0xF22624
	public bool IsDelayEndTreasureDvcSequence(TreasureDvcEntity entity) { }

	// RVA: 0xF24724 Offset: 0xF24724 VA: 0xF24724
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD060 Offset: 0xCCD060 VA: 0xCCD060
	// RVA: 0xF24788 Offset: 0xF24788 VA: 0xF24788
	private static int <FixSyncGroupRandomAudioPlayIndex>m__0(USFGOPlayAudioEvent x1, USFGOPlayAudioEvent x2) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD070 Offset: 0xCCD070 VA: 0xCCD070
	// RVA: 0xF247F0 Offset: 0xF247F0 VA: 0xF247F0
	private void <ReleaseCpk>m__1() { }
}

// Namespace: 
private class BattleSequenceManager.BattleTarget // TypeDefIndex: 8953
{
	// Fields
	private bool isSave; // 0x10
	private BattleActorControl targetActor; // 0x18
	private Vector3 originalScale; // 0x20
	private Quaternion originalRotation; // 0x2C
	[CompilerGeneratedAttribute] // RVA: 0xC633F0 Offset: 0xC633F0 VA: 0xC633F0
	[DebuggerBrowsableAttribute] // RVA: 0xC633F0 Offset: 0xC633F0 VA: 0xC633F0
	private int <positionIndex>k__BackingField; // 0x3C

	// Properties
	public int positionIndex { get; set; }

	// Methods

	// RVA: 0xF239B8 Offset: 0xF239B8 VA: 0xF239B8
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD080 Offset: 0xCCD080 VA: 0xCCD080
	// RVA: 0xF23F4C Offset: 0xF23F4C VA: 0xF23F4C
	public int get_positionIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCD090 Offset: 0xCCD090 VA: 0xCCD090
	// RVA: 0xF25844 Offset: 0xF25844 VA: 0xF25844
	private void set_positionIndex(int value) { }

	// RVA: 0xF23A60 Offset: 0xF23A60 VA: 0xF23A60
	public void setup(BattleActorControl bac, int index) { }

	// RVA: 0xF23F54 Offset: 0xF23F54 VA: 0xF23F54
	public GameObject saveTransform() { }

	// RVA: 0xF2420C Offset: 0xF2420C VA: 0xF2420C
	public void restoreTransform() { }

	// RVA: 0xF1B1CC Offset: 0xF1B1CC VA: 0xF1B1CC
	public BattleActorControl getBattleActor() { }
}

// Namespace: 
public sealed class BattleSequenceManager.onGameObjectLoadComplete : MulticastDelegate // TypeDefIndex: 8954
{
	// Methods

	// RVA: 0xF2584C Offset: 0xF2584C VA: 0xF2584C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF1A418 Offset: 0xF1A418 VA: 0xF1A418 Slot: 11
	public virtual void Invoke(GameObject obj) { }

	// RVA: 0xF2585C Offset: 0xF2585C VA: 0xF2585C Slot: 12
	public virtual IAsyncResult BeginInvoke(GameObject obj, AsyncCallback callback, object object) { }

	// RVA: 0xF25880 Offset: 0xF25880 VA: 0xF25880 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43EA4 Offset: 0xC43EA4 VA: 0xC43EA4
private sealed class BattleSequenceManager.<loadSequence>c__AnonStorey1 // TypeDefIndex: 8955
{
	// Fields
	internal int chrId; // 0x10
	internal int limitCount; // 0x14
	internal int treasureDeviceId; // 0x18
	internal int treasureDeviceLv; // 0x1C
	internal int overwriteSvtVoiceId; // 0x20
	internal BattleActorControl battleActor; // 0x28
	internal BattleSequenceManager.onGameObjectLoadComplete onComplete; // 0x30
	internal BattleSequenceManager $this; // 0x38
