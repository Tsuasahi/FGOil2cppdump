private sealed class BattleSequenceManager.<WaitEndSequence>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8933
{
	// Fields
	internal WaitForEndOfFrame <wait>__0; // 0x10
	internal BattleSequenceManager $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48294 Offset: 0xD48294 VA: 0xD48294
	// RVA: 0x1540008 Offset: 0x1540008 VA: 0x1540008
	public void .ctor() { }

	// RVA: 0x1543624 Offset: 0x1543624 VA: 0x1543624 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD482A4 Offset: 0xD482A4 VA: 0xD482A4
	// RVA: 0x1543718 Offset: 0x1543718 VA: 0x1543718 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD482B4 Offset: 0xD482B4 VA: 0xD482B4
	// RVA: 0x1543720 Offset: 0x1543720 VA: 0x1543720 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD482C4 Offset: 0xD482C4 VA: 0xD482C4
	// RVA: 0x1543728 Offset: 0x1543728 VA: 0x1543728 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD482D4 Offset: 0xD482D4 VA: 0xD482D4
	// RVA: 0x154373C Offset: 0x154373C VA: 0x154373C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFF70 Offset: 0xCAFF70 VA: 0xCAFF70
private sealed class BattleSequenceManager.<OverwriteStartTimeToSavedBgmPlayArgsGroup>c__AnonStorey4 // TypeDefIndex: 8934
{
	// Fields
	internal BgmPlayArgs args; // 0x10

	// Methods

	// RVA: 0x154220C Offset: 0x154220C VA: 0x154220C
	public void .ctor() { }

	// RVA: 0x15434E0 Offset: 0x15434E0 VA: 0x15434E0
	internal bool <>m__0(BgmPlayArgs x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFF80 Offset: 0xCAFF80 VA: 0xCAFF80
private sealed class BattleSequenceManager.<SetupTargetInfo>c__AnonStorey5 // TypeDefIndex: 8935
{
	// Fields
	internal HashSet<int> targetList; // 0x10

	// Methods

	// RVA: 0x1542214 Offset: 0x1542214 VA: 0x1542214
	public void .ctor() { }

	// RVA: 0x1543598 Offset: 0x1543598 VA: 0x1543598
	internal void <>m__0(BattleActionData.MoveToSubMember x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAFF90 Offset: 0xCAFF90 VA: 0xCAFF90
private sealed class BattleSequenceManager.<GetTargetPosIndexTransform>c__AnonStorey6 // TypeDefIndex: 8936
{
	// Fields
	internal int posIndex; // 0x10

	// Methods

	// RVA: 0x1542D08 Offset: 0x1542D08 VA: 0x1542D08
	public void .ctor() { }

	// RVA: 0x15434A4 Offset: 0x15434A4 VA: 0x15434A4
	internal bool <>m__0(BattleSequenceManager.BattleTarget x) { }
}

// Namespace: 
public class BattleServantActionHistory // TypeDefIndex: 8937
{
	// Fields
	private BattleServantActionHistory.TYPE actType; // 0x10
	private int targetUniqueId; // 0x14
	private int waveCount; // 0x18
	private bool isOpponent; // 0x1C

	// Methods

	// RVA: 0x154438C Offset: 0x154438C VA: 0x154438C
	public void .ctor(BattleServantActionHistory.TYPE type, int in_targetUniqueID, int wavecount, bool isOpponent) { }

	// RVA: 0x15443E0 Offset: 0x15443E0 VA: 0x15443E0
	public int getReactionTarget() { }

	// RVA: 0x15443E8 Offset: 0x15443E8 VA: 0x15443E8
	public bool IsOpponent() { }

	// RVA: 0x15443F0 Offset: 0x15443F0 VA: 0x15443F0
	public bool isDamage() { }
}

// Namespace: 
public enum BattleServantActionHistory.TYPE // TypeDefIndex: 8938
{
	// Fields
	public int value__; // 0x0
	public const BattleServantActionHistory.TYPE NONE = 0;
	public const BattleServantActionHistory.TYPE DAMAGE_COMMAND = 1;
	public const BattleServantActionHistory.TYPE DAMAGE_TD = 2;
	public const BattleServantActionHistory.TYPE HPLOSS = 3;
	public const BattleServantActionHistory.TYPE INSTANT_DEATH = 4;
	public const BattleServantActionHistory.TYPE REDUCE_HP = 5;
	public const BattleServantActionHistory.TYPE DAMAGE_REFLECTION = 6;
	public const BattleServantActionHistory.TYPE DAMAGE_VALUE = 7;
}

// Namespace: 
public class BattleServantData : AiInterface, BuffInterface // TypeDefIndex: 8939
{
	// Fields
	public const int NO_UNIQUE_ID = -1;
	public const int NO_REPOP_ORDER = -1;
	public int index; // 0x10
	public int deckIndex; // 0x14
	public int uniqueId; // 0x18
	public ObscuredLong userSvtId; // 0x20
	public ObscuredInt svtId; // 0x40
	public ObscuredInt exceedCount; // 0x50
	private ObscuredInt limitcount; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xCD0160 Offset: 0xCD0160 VA: 0xCD0160
	[DebuggerBrowsableAttribute] // RVA: 0xCD0160 Offset: 0xCD0160 VA: 0xCD0160
	private ObscuredInt <dispLimitCount>k__BackingField; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xCD019C Offset: 0xCD019C VA: 0xCD019C
	[DebuggerBrowsableAttribute] // RVA: 0xCD019C Offset: 0xCD019C VA: 0xCD019C
	private ObscuredInt <commandCardLimitCount>k__BackingField; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCD01D8 Offset: 0xCD01D8 VA: 0xCD01D8
	[DebuggerBrowsableAttribute] // RVA: 0xCD01D8 Offset: 0xCD01D8 VA: 0xCD01D8
	private ObscuredInt <iconLimitCount>k__BackingField; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xCD0214 Offset: 0xCD0214 VA: 0xCD0214
	[DebuggerBrowsableAttribute] // RVA: 0xCD0214 Offset: 0xCD0214 VA: 0xCD0214
	private int <frameType>k__BackingField; // 0xA0
	public int npcSvtClassId; // 0xA4
	public long transformUserSvtId; // 0xA8
	public int transformSvtId; // 0xB0
	public int transformIndex; // 0xB4
	public int transformLimitCount; // 0xB8
	public int shiftNpcId; // 0xBC
	public long beforeUserSvtId; // 0xC0
	public int dressDispId; // 0xC8
	public long totalDamage; // 0xD0
	public int appearanceId; // 0xD8
	public LinkedList<BattleServantActionHistory> actionHistory; // 0xE0
	private ServantEntity svtdata; // 0xE8
	private ServantLimitEntity svtlimitDispent; // 0xF0
	private ServantLimitEntity svtlimitent; // 0xF8
	private ServantLimitAddEntity svtlimitaddent; // 0x100
	private BattleDeckServantData deckSvt; // 0x108
	private AiState aiState; // 0x110
	public int level; // 0x118
	public int maxleve; // 0x11C
	public int atk; // 0x120
	public Follower.Type followerType; // 0x124
	public bool flgEventJoin; // 0x128
	[CompilerGeneratedAttribute] // RVA: 0xCD0250 Offset: 0xCD0250 VA: 0xCD0250
	[DebuggerBrowsableAttribute] // RVA: 0xCD0250 Offset: 0xCD0250 VA: 0xCD0250
	private int <hp>k__BackingField; // 0x12C
	public int maxhp; // 0x130
	public int maxActNum; // 0x134
	[CompilerGeneratedAttribute] // RVA: 0xCD028C Offset: 0xCD028C VA: 0xCD028C
	[DebuggerBrowsableAttribute] // RVA: 0xCD028C Offset: 0xCD028C VA: 0xCD028C
	private int <minActNum>k__BackingField; // 0x138
	public int aiId; // 0x13C
	public int actPriority; // 0x140
	public int np; // 0x144
	public int nplineCount; // 0x148
	public int lineMaxNp; // 0x14C
	public int tmpNp; // 0x150
	public int equipatk; // 0x154
	public int equiphp; // 0x158
	public int maxtpturn; // 0x15C
	public int nexttpturn; // 0x160
	public int downstarrate; // 0x164
	public int downtdrate; // 0x168
	public int deathRate; // 0x16C
	public string svtName; // 0x170
	private string svtOverwriteName; // 0x178
	private string svtOverwriteBattleName; // 0x180
	public int atktdrate; // 0x188
	public int svtType; // 0x18C
	public int displayType; // 0x190
	public int npcSvtType; // 0x194
	public int criticalRate; // 0x198
	[CompilerGeneratedAttribute] // RVA: 0xCD02C8 Offset: 0xCD02C8 VA: 0xCD02C8
	[DebuggerBrowsableAttribute] // RVA: 0xCD02C8 Offset: 0xCD02C8 VA: 0xCD02C8
	private int <reducedhp>k__BackingField; // 0x19C
	public int restAttackCount; // 0x1A0
	public int overkillTargetId; // 0x1A4
	public int accumulationDamage; // 0x1A8
	[CompilerGeneratedAttribute] // RVA: 0xCD0304 Offset: 0xCD0304 VA: 0xCD0304
	[DebuggerBrowsableAttribute] // RVA: 0xCD0304 Offset: 0xCD0304 VA: 0xCD0304
	private int <resultHp>k__BackingField; // 0x1AC
	public BattleServantData.STATUS status; // 0x1B0
	public bool isEntry; // 0x1B4
	public bool isLoad; // 0x1B5
	public bool isDeadAnime; // 0x1B6
	public bool isChargeSkill; // 0x1B7
	public bool isEnemy; // 0x1B8
	public bool isAppear; // 0x1B9
	public bool isRaid; // 0x1BA
	public bool isAddition; // 0x1BB
	public int raidId; // 0x1BC
	public bool isLeader; // 0x1C0
	public bool isSuperBoss; // 0x1C1
	public int superBossId; // 0x1C4
	private long superbossnokorihp; // 0x1C8
	public int roleType; // 0x1D0
	public int repopOrder; // 0x1D4
	public int hpBarType; // 0x1D8
	public int overwriteSvtVoiceId; // 0x1DC
	public int battleVoice; // 0x1E0
	public int actorScale; // 0x1E4
	public int summonNpcId; // 0x1E8
	public bool isBuffProgressFlg; // 0x1EC
	public bool flgEntryFunction; // 0x1ED
	public int shiftDeckIndex; // 0x1F0
	public int lowLimitShift; // 0x1F4
	public int shiftSubCount; // 0x1F8
	public int[] shiftDeckList; // 0x200
	public int changeSvtIndex; // 0x208
	public int[] changeSvtList; // 0x210
	[CompilerGeneratedAttribute] // RVA: 0xCD0340 Offset: 0xCD0340 VA: 0xCD0340
	[DebuggerBrowsableAttribute] // RVA: 0xCD0340 Offset: 0xCD0340 VA: 0xCD0340
	private bool <IsChangeDropItemByShift>k__BackingField; // 0x218
	public long[] userCommandCodeIds; // 0x220
	public int[] commandCardParam; // 0x228
	public bool isHideShadow; // 0x230
	public BattleServantData.DEADTYPE deadtype; // 0x234
	public bool reservationspecial; // 0x238
	private int _shuffuleSeed; // 0x23C
	private DropInfo[] droplist; // 0x240
	private int[] svtIndividuality; // 0x248
	public List<BattleSkillInfoData> skillInfoList; // 0x250
	private int treasuredvcId; // 0x258
	private int treasuredvcLevel; // 0x25C
	private TreasureDvcEntity TDvc; // 0x260
	private TreasureDvcLvEntity _TDvcLv; // 0x268
	private ServantTreasureDvcEntity _SvtTDvc; // 0x270
	private DataMasterBase tdDataMasterBase; // 0x278
	private DataMasterBase tdLvDataMasterBase; // 0x280
	private BattleUserServantData[] equipList; // 0x288
	[CompilerGeneratedAttribute] // RVA: 0xCD037C Offset: 0xCD037C VA: 0xCD037C
	[DebuggerBrowsableAttribute] // RVA: 0xCD037C Offset: 0xCD037C VA: 0xCD037C
	private List<CommandCodeInfo> <commandCodeList>k__BackingField; // 0x290
	public ServantCardEntity[] commandent; // 0x298
	public Hashtable commandtable; // 0x2A0
	public BattleBuffData buffData; // 0x2A8
	private BattleData.TYPETURN deadTurn; // 0x2B0
	private ServantWaveTurnEventOwner waveTurnEventOwner; // 0x2B8
	private List<GameObject> paramobjelist; // 0x2C0
	public string statestring; // 0x2C8
	private bool isSilnetDead; // 0x2D0
	public bool isWithdraw; // 0x2D1
	public bool isSystemDead; // 0x2D2
	public bool isSystemAlive; // 0x2D3
	public int svtCommonFlag; // 0x2D4
	public int[] tdplayed; // 0x2D8
	public bool isSleepWaitMode; // 0x2E0
	public bool isSleepWaitModeReady; // 0x2E1
	public bool IsAlreadyDrop; // 0x2E2
	private const int validValue = 1;
	public int playedNPCount; // 0x2E4
	public bool isTDLimitCount; // 0x2E8
	public bool isGutsSleepRelease; // 0x2E9
	public float nextPossibleTimePopEffect; // 0x2EC
	private int selectedTDCardId; // 0x2F0
	private int selectedTDId; // 0x2F4
	public int maxDefeatPoint; // 0x2F8
	public int defeatPoint; // 0x2FC
	private int aftSquareIndex; // 0x300
	private int befSquareIndex; // 0x304
	public bool isAppliedHaveStars; // 0x308
	private int squareEffectSkillId; // 0x30C
	private int squareEffectSkillLv; // 0x310
	public bool IsVanishSkill; // 0x314
	[CompilerGeneratedAttribute] // RVA: 0xCD03B8 Offset: 0xCD03B8 VA: 0xCD03B8
	[DebuggerBrowsableAttribute] // RVA: 0xCD03B8 Offset: 0xCD03B8 VA: 0xCD03B8
	private int <imageSvtId>k__BackingField; // 0x318
	[CompilerGeneratedAttribute] // RVA: 0xCD03F4 Offset: 0xCD03F4 VA: 0xCD03F4
	[DebuggerBrowsableAttribute] // RVA: 0xCD03F4 Offset: 0xCD03F4 VA: 0xCD03F4
	private ServantAssetArgs <LoadedAssetArgs>k__BackingField; // 0x320
	public List<BattleServantData.Adjustment> adjustmentList; // 0x328
	private const string svtCommonFlagSaveKey = "SVT_COMMON_FLAG_{0}";
	[CompilerGeneratedAttribute] // RVA: 0xCD0430 Offset: 0xCD0430 VA: 0xCD0430
	[DebuggerBrowsableAttribute] // RVA: 0xCD0430 Offset: 0xCD0430 VA: 0xCD0430
	private int <servantCollectionId>k__BackingField; // 0x330
	private int tmp_npper; // 0x334
	public static int _CriticalIndividuality; // 0x0
	private int[] wkzero; // 0x338
	public double wkHpRatio; // 0x340
	private const int FRACTION_VALUE = 1000;
	private int tmpAppearanceId; // 0x348
	private bool isForceAppearance; // 0x34C
	[CompilerGeneratedAttribute] // RVA: 0xCD046C Offset: 0xCD046C VA: 0xCD046C
	private static Predicate<BattleSkillInfoData> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD047C Offset: 0xCD047C VA: 0xCD047C
	private static Predicate<BattleSkillInfoData> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD048C Offset: 0xCD048C VA: 0xCD048C
	private static Comparison<BattleBuffData.BuffData> <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD049C Offset: 0xCD049C VA: 0xCD049C
	private static Converter<long, int> <>f__am$cache3; // 0x20

	// Properties
	public ObscuredInt dispLimitCount { get; set; }
	public ObscuredInt commandCardLimitCount { get; set; }
	public ObscuredInt iconLimitCount { get; set; }
	public int frameType { get; set; }
	public ServantEntity SvtEnt { get; }
	public ServantLimitAddEntity SvtLimitAddEnt { get; }
	public BattleDeckServantData DeckSvt { get; }
	public virtual int hp { get; set; }
	public int minActNum { get; set; }
	public virtual int reducedhp { get; set; }
	public virtual int resultHp { get; set; }
	public bool IsRaidTypeBoss { get; }
	public bool isWaitRepop { get; }
	public bool IsChangeDropItemByShift { get; set; }
	public int ShuffleSeed { get; set; }
	public int TreasureDvcId { get; }
	public int TreasureDvcLevel { get; }
	public TreasureDvcLvEntity TDvcLv { get; }
	private ServantTreasureDvcEntity SvtTDvc { get; }
	public TreasureDvcEntity TreasureDevice { get; }
	private DataMasterBase TdDataMasterBase { get; }
	private DataMasterBase TdLvDataMasterBase { get; }
	public List<CommandCodeInfo> commandCodeList { get; set; }
	public BattleBuffData BuffData { get; }
	public bool IsSilentDead { get; set; }
	public int imageSvtId { get; set; }
	public ServantAssetArgs LoadedAssetArgs { get; set; }
	public int servantCollectionId { get; set; }
	public int BattleSize { get; }
	public static int CriticalIndividuality { get; }

	// Methods

	// RVA: 0x1B87570 Offset: 0x1B87570 VA: 0x1B87570
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A6A4 Offset: 0xD3A6A4 VA: 0xD3A6A4
	// RVA: 0x1B87748 Offset: 0x1B87748 VA: 0x1B87748
	public ObscuredInt get_dispLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A6B4 Offset: 0xD3A6B4 VA: 0xD3A6B4
	// RVA: 0x1B87754 Offset: 0x1B87754 VA: 0x1B87754
	public void set_dispLimitCount(ObscuredInt value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A6C4 Offset: 0xD3A6C4 VA: 0xD3A6C4
	// RVA: 0x1B8775C Offset: 0x1B8775C VA: 0x1B8775C
	public ObscuredInt get_commandCardLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A6D4 Offset: 0xD3A6D4 VA: 0xD3A6D4
	// RVA: 0x1B87768 Offset: 0x1B87768 VA: 0x1B87768
	public void set_commandCardLimitCount(ObscuredInt value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A6E4 Offset: 0xD3A6E4 VA: 0xD3A6E4
	// RVA: 0x1B87770 Offset: 0x1B87770 VA: 0x1B87770
	public ObscuredInt get_iconLimitCount() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A6F4 Offset: 0xD3A6F4 VA: 0xD3A6F4
	// RVA: 0x1B8777C Offset: 0x1B8777C VA: 0x1B8777C
	public void set_iconLimitCount(ObscuredInt value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A704 Offset: 0xD3A704 VA: 0xD3A704
	// RVA: 0x1B87784 Offset: 0x1B87784 VA: 0x1B87784
	public int get_frameType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A714 Offset: 0xD3A714 VA: 0xD3A714
	// RVA: 0x1B8778C Offset: 0x1B8778C VA: 0x1B8778C
	public void set_frameType(int value) { }

	// RVA: 0x1B87794 Offset: 0x1B87794 VA: 0x1B87794
	public ServantEntity get_SvtEnt() { }

	// RVA: 0x1B8779C Offset: 0x1B8779C VA: 0x1B8779C
	public ServantLimitAddEntity get_SvtLimitAddEnt() { }

	// RVA: 0x1B877A4 Offset: 0x1B877A4 VA: 0x1B877A4
	public BattleDeckServantData get_DeckSvt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A724 Offset: 0xD3A724 VA: 0xD3A724
	// RVA: 0x1B877AC Offset: 0x1B877AC VA: 0x1B877AC Slot: 9
	public virtual int get_hp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A734 Offset: 0xD3A734 VA: 0xD3A734
	// RVA: 0x1B877B4 Offset: 0x1B877B4 VA: 0x1B877B4 Slot: 10
	public virtual void set_hp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A744 Offset: 0xD3A744 VA: 0xD3A744
	// RVA: 0x1B877BC Offset: 0x1B877BC VA: 0x1B877BC
	public int get_minActNum() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A754 Offset: 0xD3A754 VA: 0xD3A754
	// RVA: 0x1B877C4 Offset: 0x1B877C4 VA: 0x1B877C4
	private void set_minActNum(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A764 Offset: 0xD3A764 VA: 0xD3A764
	// RVA: 0x1B877CC Offset: 0x1B877CC VA: 0x1B877CC Slot: 11
	public virtual int get_reducedhp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A774 Offset: 0xD3A774 VA: 0xD3A774
	// RVA: 0x1B877D4 Offset: 0x1B877D4 VA: 0x1B877D4 Slot: 12
	public virtual void set_reducedhp(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A784 Offset: 0xD3A784 VA: 0xD3A784
	// RVA: 0x1B877DC Offset: 0x1B877DC VA: 0x1B877DC Slot: 13
	public virtual int get_resultHp() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A794 Offset: 0xD3A794 VA: 0xD3A794
	// RVA: 0x1B877E4 Offset: 0x1B877E4 VA: 0x1B877E4 Slot: 14
	public virtual void set_resultHp(int value) { }

	// RVA: 0x1B877EC Offset: 0x1B877EC VA: 0x1B877EC
	public bool get_IsRaidTypeBoss() { }

	// RVA: 0x1B8780C Offset: 0x1B8780C VA: 0x1B8780C
	public bool get_isWaitRepop() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A7A4 Offset: 0xD3A7A4 VA: 0xD3A7A4
	// RVA: 0x1B8781C Offset: 0x1B8781C VA: 0x1B8781C
	public bool get_IsChangeDropItemByShift() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A7B4 Offset: 0xD3A7B4 VA: 0xD3A7B4
	// RVA: 0x1B87824 Offset: 0x1B87824 VA: 0x1B87824
	private void set_IsChangeDropItemByShift(bool value) { }

	// RVA: 0x1B87830 Offset: 0x1B87830 VA: 0x1B87830
	public void set_ShuffleSeed(int value) { }

	// RVA: 0x1B87838 Offset: 0x1B87838 VA: 0x1B87838
	public int get_ShuffleSeed() { }

	// RVA: 0x1B878FC Offset: 0x1B878FC VA: 0x1B878FC
	public int get_TreasureDvcId() { }

	// RVA: 0x1B87904 Offset: 0x1B87904 VA: 0x1B87904
	public int get_TreasureDvcLevel() { }

	// RVA: 0x1B8790C Offset: 0x1B8790C VA: 0x1B8790C
	public TreasureDvcLvEntity get_TDvcLv() { }

	// RVA: 0x1B87C6C Offset: 0x1B87C6C VA: 0x1B87C6C
	private ServantTreasureDvcEntity get_SvtTDvc() { }

	// RVA: 0x1B87A50 Offset: 0x1B87A50 VA: 0x1B87A50
	public TreasureDvcEntity get_TreasureDevice() { }

	// RVA: 0x1B87DF4 Offset: 0x1B87DF4 VA: 0x1B87DF4
	private DataMasterBase get_TdDataMasterBase() { }

	// RVA: 0x1B87BF4 Offset: 0x1B87BF4 VA: 0x1B87BF4
	private DataMasterBase get_TdLvDataMasterBase() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A7C4 Offset: 0xD3A7C4 VA: 0xD3A7C4
	// RVA: 0x1B87E6C Offset: 0x1B87E6C VA: 0x1B87E6C
	public List<CommandCodeInfo> get_commandCodeList() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A7D4 Offset: 0xD3A7D4 VA: 0xD3A7D4
	// RVA: 0x1B87E74 Offset: 0x1B87E74 VA: 0x1B87E74
	private void set_commandCodeList(List<CommandCodeInfo> value) { }

	// RVA: 0x1B87E7C Offset: 0x1B87E7C VA: 0x1B87E7C
	public BattleBuffData get_BuffData() { }

	// RVA: 0x1B87EE8 Offset: 0x1B87EE8 VA: 0x1B87EE8
	public bool get_IsSilentDead() { }

	// RVA: 0x1B87EF0 Offset: 0x1B87EF0 VA: 0x1B87EF0
	public void set_IsSilentDead(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A7E4 Offset: 0xD3A7E4 VA: 0xD3A7E4
	// RVA: 0x1B87EFC Offset: 0x1B87EFC VA: 0x1B87EFC
	public int get_imageSvtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A7F4 Offset: 0xD3A7F4 VA: 0xD3A7F4
	// RVA: 0x1B87F04 Offset: 0x1B87F04 VA: 0x1B87F04
	private void set_imageSvtId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A804 Offset: 0xD3A804 VA: 0xD3A804
	// RVA: 0x1B87F0C Offset: 0x1B87F0C VA: 0x1B87F0C
	public ServantAssetArgs get_LoadedAssetArgs() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A814 Offset: 0xD3A814 VA: 0xD3A814
	// RVA: 0x1B87F14 Offset: 0x1B87F14 VA: 0x1B87F14
	private void set_LoadedAssetArgs(ServantAssetArgs value) { }

	// RVA: 0x1B87F1C Offset: 0x1B87F1C VA: 0x1B87F1C
	public ServantAssetArgs UpdateLoadedAssetArgs() { }

	// RVA: 0x1B87F84 Offset: 0x1B87F84 VA: 0x1B87F84
	public void SetAdjustment(bool isCritical, bool isWeak, bool isRegist, bool isNoDamage, Vector3 offSet) { }

	// RVA: 0x1B880A8 Offset: 0x1B880A8 VA: 0x1B880A8
	public void SetAdjustment(BattleServantData.Adjustment data) { }

	// RVA: 0x1B88144 Offset: 0x1B88144 VA: 0x1B88144
	public BattleServantData.Adjustment[] GetAdjustments() { }

	// RVA: 0x1B881D0 Offset: 0x1B881D0 VA: 0x1B881D0
	public void ResetAdjustment() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A824 Offset: 0xD3A824 VA: 0xD3A824
	// RVA: 0x1B88230 Offset: 0x1B88230 VA: 0x1B88230
	public int get_servantCollectionId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3A834 Offset: 0xD3A834 VA: 0xD3A834
	// RVA: 0x1B88238 Offset: 0x1B88238 VA: 0x1B88238
	private void set_servantCollectionId(int value) { }

	// RVA: 0x1B88240 Offset: 0x1B88240 VA: 0x1B88240
	public bool checkSilentDeadType(BattleLogicEnemyAi logicenemyai) { }

	// RVA: 0x1B8850C Offset: 0x1B8850C VA: 0x1B8850C
	public bool IsNpEffectSpeedFix() { }

	// RVA: 0x1B88544 Offset: 0x1B88544 VA: 0x1B88544
	public bool IsOnlyFirstForcedOneSpeed() { }

	// RVA: 0x1B885A0 Offset: 0x1B885A0 VA: 0x1B885A0
	public bool IsNpDoubleSpeed() { }

	// RVA: 0x1B885B0 Offset: 0x1B885B0 VA: 0x1B885B0
	public int get_BattleSize() { }

	// RVA: 0x1B885DC Offset: 0x1B885DC VA: 0x1B885DC
	public DropInfo[] getDropItem() { }

	// RVA: 0x1B885E4 Offset: 0x1B885E4 VA: 0x1B885E4 Slot: 15
	public virtual BattleServantData.SaveData getSaveData() { }

	// RVA: 0x1B889B0 Offset: 0x1B889B0 VA: 0x1B889B0
	public string getSaveDataToString() { }

	// RVA: 0x1B88A3C Offset: 0x1B88A3C VA: 0x1B88A3C
	public void setTestSaveData(string str) { }

	// RVA: 0x1B88AF0 Offset: 0x1B88AF0 VA: 0x1B88AF0
	public void setTestSaveData(BattleServantData.SaveData save) { }

	// RVA: 0x1B88B44 Offset: 0x1B88B44 VA: 0x1B88B44 Slot: 16
	public virtual bool setSaveData(BattleServantData.SaveData save) { }

	// RVA: 0x1B88F7C Offset: 0x1B88F7C VA: 0x1B88F7C
	public void setDeckIndex(int index) { }

	// RVA: 0x1B88F84 Offset: 0x1B88F84 VA: 0x1B88F84
	public int getDeckIndex() { }

	// RVA: 0x1B88F9C Offset: 0x1B88F9C VA: 0x1B88F9C
	public void SetTakeoverServantData(BattleWarBoardInfo.WarBoardServantInfo takeoverData) { }

	// RVA: 0x1B89134 Offset: 0x1B89134 VA: 0x1B89134
	public void SetTakeoverServantDataPrevAdd(BattleWarBoardInfo.WarBoardServantInfo takeoverData, BattleData data) { }

	// RVA: 0x1B896A0 Offset: 0x1B896A0 VA: 0x1B896A0
	public BattleWarBoardInfo.WarBoardServantInfo GetTakeoverServantData(WarBoardBattleEvent.TakeoverSvtArg arg) { }

	// RVA: 0x1B89EC8 Offset: 0x1B89EC8 VA: 0x1B89EC8
	public int GetSkillChargeTurn(int index) { }

	// RVA: 0x1B89EEC Offset: 0x1B89EEC VA: 0x1B89EEC
	public void setServantData(BattleDeckServantData inDeckSvt, BattleEntity battleEnt, int infollowerType, string saveStr) { }

	// RVA: 0x1B89FA0 Offset: 0x1B89FA0 VA: 0x1B89FA0
	public void setServantData(BattleDeckServantData inDeckSvt, BattleEntity battleEnt, int infollowerType, BattleServantData.SaveData saveData) { }

	// RVA: 0x1B8A3EC Offset: 0x1B8A3EC VA: 0x1B8A3EC
	public void setServantData(BattleDeckServantData inDeckSvt, BattleInfoData battleInfo, CommandCodeInfo[] userCommandCode, int infollowerType) { }

	// RVA: 0x1B8A208 Offset: 0x1B8A208 VA: 0x1B8A208
	public void setBaseServantData(BattleDeckServantData inDeckSvt, BattleEntity battleEnt, int infollowerType) { }

	// RVA: 0x1B8A4F8 Offset: 0x1B8A4F8 VA: 0x1B8A4F8
	public void setBaseServantData(BattleDeckServantData inDeckSvt, BattleInfoData battleInfo, CommandCodeInfo[] userCommandCode, int eventId, int infollowerType) { }

	// RVA: 0x1B8CA44 Offset: 0x1B8CA44 VA: 0x1B8CA44
	private string getServantOverwriteName(int svtId) { }

	// RVA: 0x1B8D3CC Offset: 0x1B8D3CC VA: 0x1B8D3CC
	private string getBattleServantOverwriteName(int svtId) { }

	// RVA: 0x1B8C008 Offset: 0x1B8C008 VA: 0x1B8C008
	private void CalculateLimitCountWithSpoilerProtection(BattleUserServantData userSvt) { }

	// RVA: 0x1B893F0 Offset: 0x1B893F0 VA: 0x1B893F0
	public void loadTransformServant(BattleData data) { }

	// RVA: 0x1B8D830 Offset: 0x1B8D830 VA: 0x1B8D830
	public void setTransformServant(BattleData data, int transformIndex, int overwriteLimitCount = 0) { }

	// RVA: 0x1B8E0E0 Offset: 0x1B8E0E0 VA: 0x1B8E0E0
	private void OverwriteSkillsForTransformedServant(BattleUserServantData userSvt) { }

	// RVA: 0x1B8DD04 Offset: 0x1B8DD04 VA: 0x1B8DD04
	public void changeTransformServant() { }

	// RVA: 0x1B8E3D8 Offset: 0x1B8E3D8 VA: 0x1B8E3D8
	public void changeBaseUpdateServant() { }

	// RVA: 0x1B8E8B0 Offset: 0x1B8E8B0 VA: 0x1B8E8B0
	public void setDressId(int dressId = -1) { }

	// RVA: 0x1B8DD7C Offset: 0x1B8DD7C VA: 0x1B8DD7C
	public void setSkillShiftServant(BattleData data, int npcId) { }

	// RVA: 0x1B8D278 Offset: 0x1B8D278 VA: 0x1B8D278
	public void UpdateTreasureDevice(int id, int lv) { }

	// RVA: 0x1B8CF24 Offset: 0x1B8CF24 VA: 0x1B8CF24
	public void addSkillInfo(BattleSkillInfoData.TYPE type, int index, int skillId, int skillLv, long userCommandCodeId = -1) { }

	// RVA: 0x1B8E228 Offset: 0x1B8E228 VA: 0x1B8E228
	private void ReplaceSelfSkillInfo(int index, int skillId, int skillLv) { }

	// RVA: 0x1B8EAD8 Offset: 0x1B8EAD8 VA: 0x1B8EAD8
	public BattleSkillInfoData SetSkillInfo(BattleSkillInfoData skillInfo, BattleSkillInfoData.TYPE type, int index, int skillId, int skillLv, long userCommandCodeId = -1) { }

	// RVA: 0x1B8EDF8 Offset: 0x1B8EDF8 VA: 0x1B8EDF8
	public BattleSkillInfoData[] getPassiveSkills() { }

	// RVA: 0x1B8EF2C Offset: 0x1B8EF2C VA: 0x1B8EF2C
	public int[] GetHasSideEffectSkillEffectIds() { }

	// RVA: 0x1B8F408 Offset: 0x1B8F408 VA: 0x1B8F408
	public void setEnemy() { }

	// RVA: 0x1B8853C Offset: 0x1B8853C VA: 0x1B8853C
	public bool checkEnemy() { }

	// RVA: 0x1B8F414 Offset: 0x1B8F414 VA: 0x1B8F414
	public bool checkPlayer() { }

	// RVA: 0x1B8F424 Offset: 0x1B8F424 VA: 0x1B8F424
	public bool checkEntryIndex(int entryIndex) { }

	// RVA: 0x1B8F45C Offset: 0x1B8F45C VA: 0x1B8F45C
	public string getOverrideTDName() { }

	// RVA: 0x1B8F48C Offset: 0x1B8F48C VA: 0x1B8F48C
	public string getOverrideTDRuby() { }

	// RVA: 0x1B8F4BC Offset: 0x1B8F4BC VA: 0x1B8F4BC
	public string getOverrideTDVoice() { }

	// RVA: 0x1B8F4EC Offset: 0x1B8F4EC VA: 0x1B8F4EC
	public void setSummonNpc() { }

	// RVA: 0x1B8F520 Offset: 0x1B8F520 VA: 0x1B8F520
	public void SetFakeData(Dictionary<string, int> fakeInfo) { }

	// RVA: 0x1B8F858 Offset: 0x1B8F858 VA: 0x1B8F858
	public void setDeadData() { }

	// RVA: 0x1B8F8BC Offset: 0x1B8F8BC VA: 0x1B8F8BC Slot: 17
	public virtual AiState getAiState() { }

	// RVA: 0x1B8F8C4 Offset: 0x1B8F8C4 VA: 0x1B8F8C4
	public int[] getCommandList() { }

	// RVA: 0x1B8F8F0 Offset: 0x1B8F8F0 VA: 0x1B8F8F0
	public int[] getCommandArray(int commandTypeBit) { }

	// RVA: 0x1B8E9EC Offset: 0x1B8E9EC VA: 0x1B8E9EC
	public int getUniqueID() { }

	// RVA: 0x1B89E3C Offset: 0x1B89E3C VA: 0x1B89E3C
	public long getUserSvtId() { }

	// RVA: 0x1B8CBC8 Offset: 0x1B8CBC8 VA: 0x1B8CBC8
	public int getSvtId() { }

	// RVA: 0x1B8FA78 Offset: 0x1B8FA78 VA: 0x1B8FA78
	public int getActorSvtId() { }

	// RVA: 0x1B8FAF8 Offset: 0x1B8FAF8 VA: 0x1B8FAF8
	public int GetImageSvtId() { }

	// RVA: 0x1B8FB90 Offset: 0x1B8FB90 VA: 0x1B8FB90
	public int GetIconImageSvtId() { }

	// RVA: 0x1B8FB94 Offset: 0x1B8FB94 VA: 0x1B8FB94
	public int GetCommandImageSvtId() { }

	// RVA: 0x1B8FB98 Offset: 0x1B8FB98 VA: 0x1B8FB98
	public int GetDispImageSvtId() { }

	// RVA: 0x1B8FB9C Offset: 0x1B8FB9C VA: 0x1B8FB9C
	public int getAttri() { }

	// RVA: 0x1B8FBE0 Offset: 0x1B8FBE0 VA: 0x1B8FBE0
	public int getClassId() { }

	// RVA: 0x1B8FC1C Offset: 0x1B8FC1C VA: 0x1B8FC1C
	public int getBattleClassId(BattleCommandData command, BattleServantData opSvt, bool isAct, bool isAttack) { }

	// RVA: 0x1B8FD00 Offset: 0x1B8FD00 VA: 0x1B8FD00
	public string getServantName() { }

	// RVA: 0x1B8FDEC Offset: 0x1B8FDEC VA: 0x1B8FDEC
	public string getServantShortName() { }

	// RVA: 0x1B8FEB8 Offset: 0x1B8FEB8 VA: 0x1B8FEB8
	public int getDressId() { }

	// RVA: 0x1B8FEE8 Offset: 0x1B8FEE8 VA: 0x1B8FEE8
	public bool isNameTrue() { }

	// RVA: 0x1B8FF18 Offset: 0x1B8FF18 VA: 0x1B8FF18
	public string getLevelLabel() { }

	// RVA: 0x1B8FFBC Offset: 0x1B8FFBC VA: 0x1B8FFBC
	public int getLevel() { }

	// RVA: 0x1B8FFC4 Offset: 0x1B8FFC4 VA: 0x1B8FFC4
	public int getMaxLevel() { }

	// RVA: 0x1B8FFCC Offset: 0x1B8FFCC VA: 0x1B8FFCC
	public int getWeaponGroup(bool isEffect = False) { }

	// RVA: 0x1B90068 Offset: 0x1B90068 VA: 0x1B90068
	public int getEffectFolder() { }

	// RVA: 0x1B90100 Offset: 0x1B90100 VA: 0x1B90100
	public int getWeaponScale() { }

	// RVA: 0x1B9012C Offset: 0x1B9012C VA: 0x1B9012C
	public Color getWeaponColor() { }

	// RVA: 0x1B9015C Offset: 0x1B9015C VA: 0x1B9015C
	public string getStrParam() { }

	// RVA: 0x1B90188 Offset: 0x1B90188 VA: 0x1B90188
	public int getRarity() { }

	// RVA: 0x1B901B4 Offset: 0x1B901B4 VA: 0x1B901B4
	public float getActorScale() { }

	// RVA: 0x1B901CC Offset: 0x1B901CC VA: 0x1B901CC
	public int getCameraActionId() { }

	// RVA: 0x1B87B84 Offset: 0x1B87B84 VA: 0x1B87B84
	public int getLimitCount() { }

	// RVA: 0x1B8D55C Offset: 0x1B8D55C VA: 0x1B8D55C
	public int getCommandDispLimitCount() { }

	// RVA: 0x1B8CC48 Offset: 0x1B8CC48 VA: 0x1B8CC48
	public int getDispLimitCount() { }

	// RVA: 0x1B901FC Offset: 0x1B901FC VA: 0x1B901FC
	public int GetIconImageLimitCount() { }

	// RVA: 0x1B903F4 Offset: 0x1B903F4 VA: 0x1B903F4
	public int getLimitImageIndex() { }

	// RVA: 0x1B8A358 Offset: 0x1B8A358 VA: 0x1B8A358
	public void setInitQuest() { }

	// RVA: 0x1B90480 Offset: 0x1B90480 VA: 0x1B90480
	public void setContinue(BattleData data) { }

	// RVA: 0x1B90AC8 Offset: 0x1B90AC8 VA: 0x1B90AC8
	public void setInitBattle() { }

	// RVA: 0x1B90B70 Offset: 0x1B90B70 VA: 0x1B90B70
	public void resetRetAttackCount(int defVal = -1) { }

	// RVA: 0x1B90B84 Offset: 0x1B90B84 VA: 0x1B90B84 Slot: 18
	public virtual int getThisTurnActCount() { }

	// RVA: 0x1B90B94 Offset: 0x1B90B94 VA: 0x1B90B94
	public int GetRemainingNeedActCount() { }

	// RVA: 0x1B90C20 Offset: 0x1B90C20 VA: 0x1B90C20
	public void setEscapeMotion() { }

	// RVA: 0x1B882E8 Offset: 0x1B882E8 VA: 0x1B882E8
	public bool isDeadEscape() { }

	// RVA: 0x1B882F8 Offset: 0x1B882F8 VA: 0x1B882F8
	public bool isDeadStand() { }

	// RVA: 0x1B90C2C Offset: 0x1B90C2C VA: 0x1B90C2C
	public bool isDeadEffect() { }

	// RVA: 0x1B88308 Offset: 0x1B88308 VA: 0x1B88308
	public bool isDeadWait() { }

	// RVA: 0x1B90C3C Offset: 0x1B90C3C VA: 0x1B90C3C
	public bool isDeadAnimation() { }

	// RVA: 0x1B90C44 Offset: 0x1B90C44 VA: 0x1B90C44
	public void setDeadAnimeFlg(bool flg) { }

	// RVA: 0x1B90C50 Offset: 0x1B90C50 VA: 0x1B90C50
	public bool isNormalDeadMotion() { }

	// RVA: 0x1B90C70 Offset: 0x1B90C70 VA: 0x1B90C70
	public bool isUseSelfSkill(int index) { }

	// RVA: 0x1B895D0 Offset: 0x1B895D0 VA: 0x1B895D0
	public BattleSkillInfoData getSelfSkillInfo(int index) { }

	// RVA: 0x1B90D80 Offset: 0x1B90D80 VA: 0x1B90D80
	public BattleSkillInfoData getTempSkillInfo(int index) { }

	// RVA: 0x1B8E8B8 Offset: 0x1B8E8B8 VA: 0x1B8E8B8
	public BattleSkillInfoData[] getActiveSkillInfos() { }

	// RVA: 0x1B90E58 Offset: 0x1B90E58 VA: 0x1B90E58
	public int getTreasureDvcId(bool useTDTypeChangedValue = True) { }

	// RVA: 0x1B90F0C Offset: 0x1B90F0C VA: 0x1B90F0C
	public int getTreasureDvcLevel() { }

	// RVA: 0x1B90F14 Offset: 0x1B90F14 VA: 0x1B90F14
	public string getTreasureDvcName() { }

	// RVA: 0x1B90FA8 Offset: 0x1B90FA8 VA: 0x1B90FA8
	public string getTreasureDvcRuby() { }

	// RVA: 0x1B9103C Offset: 0x1B9103C VA: 0x1B9103C
	public bool hasTreasureDvc() { }

	// RVA: 0x1B91058 Offset: 0x1B91058 VA: 0x1B91058
	public bool isTDSeraled() { }

	// RVA: 0x1B910B4 Offset: 0x1B910B4 VA: 0x1B910B4
	public bool isHeroine() { }

	// RVA: 0x1B910E4 Offset: 0x1B910E4 VA: 0x1B910E4
	public int[] getTreasureDvcHitRaito() { }

	// RVA: 0x1B91110 Offset: 0x1B91110 VA: 0x1B91110
	public int getTreasureDvcMotionId() { }

	// RVA: 0x1B9113C Offset: 0x1B9113C VA: 0x1B9113C
	public BattleCommandData MakeTreasureDvcCommand() { }

	// RVA: 0x1B912BC Offset: 0x1B912BC VA: 0x1B912BC
	public BattleUserServantData[] getEquipBattleUserServantList() { }

	// RVA: 0x1B912C4 Offset: 0x1B912C4 VA: 0x1B912C4
	public void useSkill(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1B913B0 Offset: 0x1B913B0 VA: 0x1B913B0
	public bool turnProgressing(int[] fieldIndiv, BattleLogic logic, bool isAlive, BattleActionData actiondata) { }

	// RVA: 0x1B9278C Offset: 0x1B9278C VA: 0x1B9278C
	public BattleBuffData.BuffData[] turnBuffProgressing(bool isEndEnemyTurn, int[] fieldIndiv, BattleLogic logic, BattleActionData action) { }

	// RVA: 0x1B92958 Offset: 0x1B92958 VA: 0x1B92958
	public void turnBuffProgressingIncrease() { }

	// RVA: 0x1B92988 Offset: 0x1B92988 VA: 0x1B92988
	public BattleBuffData.BuffData[] getBuffList(BuffList.ACTION buffAction) { }

	// RVA: 0x1B88318 Offset: 0x1B88318 VA: 0x1B88318
	public BattleBuffData.BuffData[] getDeadBufflist(BaseBattleEvent battleEvent, bool isAllReturnDeadBuff = False) { }

	// RVA: 0x1B92CDC Offset: 0x1B92CDC VA: 0x1B92CDC
	public BattleBuffData.BuffData[] getGutsBufflist() { }

	// RVA: 0x1B92D20 Offset: 0x1B92D20 VA: 0x1B92D20
	public BattleBuffData.BuffData[] getTTurnEndBufflist() { }

	// RVA: 0x1B92D64 Offset: 0x1B92D64 VA: 0x1B92D64
	public BattleBuffData.BuffData[] getStartWaveBuff() { }

	// RVA: 0x1B92DA8 Offset: 0x1B92DA8 VA: 0x1B92DA8
	public BattleBuffData.BuffData[] getFixCommandCardBuff() { }

	// RVA: 0x1B92DEC Offset: 0x1B92DEC VA: 0x1B92DEC
	public BattleBuffData.BuffData[] getCommandSideEffect(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B92E5C Offset: 0x1B92E5C VA: 0x1B92E5C
	public BattleBuffData.BuffData[] getNPSideEffect(int[] targetIndivi) { }

	// RVA: 0x1B92E98 Offset: 0x1B92E98 VA: 0x1B92E98
	public BattleBuffData.BuffData[] getDeadAttackSideEffect(BattleServantData opSvt) { }

	// RVA: 0x1B92F0C Offset: 0x1B92F0C VA: 0x1B92F0C
	public BattleBuffData.BuffData[] getReflectionEffect() { }

	// RVA: 0x1B92F50 Offset: 0x1B92F50 VA: 0x1B92F50
	public BattleBuffData.BuffData[] getDamageSideEffect(BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B92FC8 Offset: 0x1B92FC8 VA: 0x1B92FC8
	public BattleBuffData.BuffData[] getFieldIndividualityBuff() { }

	// RVA: 0x1B9300C Offset: 0x1B9300C VA: 0x1B9300C
	public BattleBuffData.BuffData[] getTdTypeChangeBuff() { }

	// RVA: 0x1B93050 Offset: 0x1B93050 VA: 0x1B93050
	public BattleBuffData.BuffData getTdTypeChangeBuffSingle() { }

	// RVA: 0x1B93188 Offset: 0x1B93188 VA: 0x1B93188
	public BattleBuffData.BuffData[] getAttackSideEffectBuffList(BuffList.ACTION attackAct, BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B93370 Offset: 0x1B93370 VA: 0x1B93370
	public static SkillLvEntity getSkillFromBuff(SkillLvMaster skillLvMst, BattleBuffData.BuffData buff) { }

	// RVA: 0x1B93490 Offset: 0x1B93490 VA: 0x1B93490
	public BattleBuffData.BuffData[] getAttackSideEffectBuffList(BuffList.ACTION[] attackActs, BattleCommandData command, BattleServantData opSvt) { }

	// RVA: 0x1B93698 Offset: 0x1B93698 VA: 0x1B93698
	public bool checkScriptValue(string key, int value) { }

	// RVA: 0x1B936AC Offset: 0x1B936AC VA: 0x1B936AC
	public int getScriptValue(string key) { }

	// RVA: 0x1B936C4 Offset: 0x1B936C4 VA: 0x1B936C4
	public int getSummonNpcId(int index) { }

	// RVA: 0x1B936FC Offset: 0x1B936FC VA: 0x1B936FC
	public bool checkID(int id) { }

	// RVA: 0x1B9370C Offset: 0x1B9370C VA: 0x1B9370C
	public void addParamObject(GameObject obj) { }

	// RVA: 0x1B8F85C Offset: 0x1B8F85C VA: 0x1B8F85C
	public void resetParamObject() { }

	// RVA: 0x1B937B8 Offset: 0x1B937B8 VA: 0x1B937B8
	public void delParamObject(GameObject obj) { }

	// RVA: 0x1B93864 Offset: 0x1B93864 VA: 0x1B93864
	public void initTacticalFaze() { }

	// RVA: 0x1B938D8 Offset: 0x1B938D8 VA: 0x1B938D8
	public int getStepRate() { }

	// RVA: 0x1B87870 Offset: 0x1B87870 VA: 0x1B87870
	public bool isAlive(bool isResurrectable = False) { }

	// RVA: 0x1B93904 Offset: 0x1B93904 VA: 0x1B93904
	public bool isAliveLogic() { }

	// RVA: 0x1B939F8 Offset: 0x1B939F8 VA: 0x1B939F8
	public bool ExistsResurrection() { }

	// RVA: 0x1B93A44 Offset: 0x1B93A44 VA: 0x1B93A44
	public bool isDeadWaitNotAlive() { }

	// RVA: 0x1B939A8 Offset: 0x1B939A8 VA: 0x1B939A8
	public bool isGuts() { }

	// RVA: 0x1B93A78 Offset: 0x1B93A78 VA: 0x1B93A78
	public bool isGuts(out BattleBuffData.BuffData buff) { }

	// RVA: 0x1B93ACC Offset: 0x1B93ACC VA: 0x1B93ACC
	public int useGuts(int maxhp, out string motionName) { }

	// RVA: 0x1B93B14 Offset: 0x1B93B14 VA: 0x1B93B14
	public bool isUpHate(int[] opSvtIndiv) { }

	// RVA: 0x1B93870 Offset: 0x1B93870 VA: 0x1B93870
	public void setOverKillTargetId(int Id) { }

	// RVA: 0x1B93B68 Offset: 0x1B93B68 VA: 0x1B93B68
	public bool checkOverKill(int targetId) { }

	// RVA: 0x1B93B78 Offset: 0x1B93B78 VA: 0x1B93B78
	public bool isOverKill() { }

	// RVA: 0x1B93B88 Offset: 0x1B93B88 VA: 0x1B93B88
	public int getAccumulationDamage() { }

	// RVA: 0x1B93BC8 Offset: 0x1B93BC8 VA: 0x1B93BC8
	public void resetAccumulationDamage() { }

	// RVA: 0x1B93BD0 Offset: 0x1B93BD0 VA: 0x1B93BD0
	public bool checkPerHP(int val, bool flg) { }

	// RVA: 0x1B93C38 Offset: 0x1B93C38 VA: 0x1B93C38
	public bool playDead() { }

	// RVA: 0x1B93C5C Offset: 0x1B93C5C VA: 0x1B93C5C
	public bool checkUseTDvc(BattleData battleData, bool flg = True) { }

	// RVA: 0x1B93D2C Offset: 0x1B93D2C VA: 0x1B93D2C
