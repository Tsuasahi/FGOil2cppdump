
	// RVA: 0x1E08A90 Offset: 0x1E08A90 VA: 0x1E08A90 Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0859C Offset: 0x1E0859C VA: 0x1E0859C Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
internal class MacCFBBlockCipher : IBlockCipher // TypeDefIndex: 4769
{
	// Fields
	private byte[] IV; // 0x10
	private byte[] cfbV; // 0x18
	private byte[] cfbOutV; // 0x20
	private readonly int blockSize; // 0x28
	private readonly IBlockCipher cipher; // 0x30

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E09154 Offset: 0x1E09154 VA: 0x1E09154
	public void .ctor(IBlockCipher cipher, int bitBlockSize) { }

	// RVA: 0x1E09558 Offset: 0x1E09558 VA: 0x1E09558 Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E09398 Offset: 0x1E09398 VA: 0x1E09398 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x1E0D724 Offset: 0x1E0D724 VA: 0x1E0D724 Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E09364 Offset: 0x1E09364 VA: 0x1E09364 Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x1E097D8 Offset: 0x1E097D8 VA: 0x1E097D8 Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x1E09EF8 Offset: 0x1E09EF8 VA: 0x1E09EF8 Slot: 9
	public void Reset() { }

	// RVA: 0x1E09E20 Offset: 0x1E09E20 VA: 0x1E09E20
	public void GetMacBlock(byte[] mac) { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class CfbBlockCipherMac : IMac // TypeDefIndex: 4770
{
	// Fields
	private byte[] mac; // 0x10
	private byte[] Buffer; // 0x18
	private int bufOff; // 0x20
	private MacCFBBlockCipher cipher; // 0x28
	private IBlockCipherPadding padding; // 0x30
	private int macSize; // 0x38

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E08DC4 Offset: 0x1E08DC4 VA: 0x1E08DC4
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E0905C Offset: 0x1E0905C VA: 0x1E0905C
	public void .ctor(IBlockCipher cipher, IBlockCipherPadding padding) { }

	// RVA: 0x1E0914C Offset: 0x1E0914C VA: 0x1E0914C
	public void .ctor(IBlockCipher cipher, int cfbBitSize, int macSizeInBits) { }

	// RVA: 0x1E08EB0 Offset: 0x1E08EB0 VA: 0x1E08EB0
	public void .ctor(IBlockCipher cipher, int cfbBitSize, int macSizeInBits, IBlockCipherPadding padding) { }

	// RVA: 0x1E0936C Offset: 0x1E0936C VA: 0x1E0936C Slot: 5
	public string get_AlgorithmName() { }

	// RVA: 0x1E094C0 Offset: 0x1E094C0 VA: 0x1E094C0 Slot: 4
	public void Init(ICipherParameters parameters) { }

	// RVA: 0x1E09704 Offset: 0x1E09704 VA: 0x1E09704 Slot: 6
	public int GetMacSize() { }

	// RVA: 0x1E0970C Offset: 0x1E0970C VA: 0x1E0970C Slot: 7
	public void Update(byte input) { }

	// RVA: 0x1E09AB0 Offset: 0x1E09AB0 VA: 0x1E09AB0 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x1E09C4C Offset: 0x1E09C4C VA: 0x1E09C4C Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E09500 Offset: 0x1E09500 VA: 0x1E09500 Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class CMac : IMac // TypeDefIndex: 4771
{
	// Fields
	private const byte CONSTANT_128 = 135;
	private const byte CONSTANT_64 = 27;
	private byte[] ZEROES; // 0x10
	private byte[] mac; // 0x18
	private byte[] buf; // 0x20
	private int bufOff; // 0x28
	private IBlockCipher cipher; // 0x30
	private int macSize; // 0x38
	private byte[] L; // 0x40
	private byte[] Lu; // 0x48
	private byte[] Lu2; // 0x50

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E06D10 Offset: 0x1E06D10 VA: 0x1E06D10
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E06DE0 Offset: 0x1E06DE0 VA: 0x1E06DE0
	public void .ctor(IBlockCipher cipher, int macSizeInBits) { }

	// RVA: 0x1E0739C Offset: 0x1E0739C VA: 0x1E0739C Slot: 5
	public string get_AlgorithmName() { }

	// RVA: 0x1E07450 Offset: 0x1E07450 VA: 0x1E07450
	private static int ShiftLeft(byte[] block, byte[] output) { }

	// RVA: 0x1E0751C Offset: 0x1E0751C VA: 0x1E0751C
	private static byte[] DoubleLu(byte[] input) { }

	// RVA: 0x1E07634 Offset: 0x1E07634 VA: 0x1E07634 Slot: 4
	public void Init(ICipherParameters parameters) { }

	// RVA: 0x1E07940 Offset: 0x1E07940 VA: 0x1E07940 Slot: 6
	public int GetMacSize() { }

	// RVA: 0x1E07948 Offset: 0x1E07948 VA: 0x1E07948 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x1E07A9C Offset: 0x1E07A9C VA: 0x1E07A9C Slot: 8
	public void BlockUpdate(byte[] inBytes, int inOff, int len) { }

	// RVA: 0x1E07D5C Offset: 0x1E07D5C VA: 0x1E07D5C Slot: 9
	public int DoFinal(byte[] outBytes, int outOff) { }

	// RVA: 0x1E07860 Offset: 0x1E07860 VA: 0x1E07860 Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class Gost28147Mac : IMac // TypeDefIndex: 4772
{
	// Fields
	private const int blockSize = 8;
	private const int macSize = 4;
	private int bufOff; // 0x10
	private byte[] buf; // 0x18
	private byte[] mac; // 0x20
	private bool firstStep; // 0x28
	private int[] workingKey; // 0x30
	private byte[] S; // 0x38

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E09FDC Offset: 0x1E09FDC VA: 0x1E09FDC
	public void .ctor() { }

	// RVA: 0x1E0A08C Offset: 0x1E0A08C VA: 0x1E0A08C
	private static int[] generateWorkingKey(byte[] userKey) { }

	// RVA: 0x1E0A2A0 Offset: 0x1E0A2A0 VA: 0x1E0A2A0 Slot: 4
	public void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0A5D8 Offset: 0x1E0A5D8 VA: 0x1E0A5D8 Slot: 5
	public string get_AlgorithmName() { }

	// RVA: 0x1E0A620 Offset: 0x1E0A620 VA: 0x1E0A620 Slot: 6
	public int GetMacSize() { }

	// RVA: 0x1E0A628 Offset: 0x1E0A628 VA: 0x1E0A628
	private int gost28147_mainStep(int n1, int key) { }

	// RVA: 0x1E0A85C Offset: 0x1E0A85C VA: 0x1E0A85C
	private void gost28147MacFunc(int[] workingKey, byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E0A1AC Offset: 0x1E0A1AC VA: 0x1E0A1AC
	private static int bytesToint(byte[] input, int inOff) { }

	// RVA: 0x1E0A954 Offset: 0x1E0A954 VA: 0x1E0A954
	private static void intTobytes(int num, byte[] output, int outOff) { }

	// RVA: 0x1E0AA44 Offset: 0x1E0AA44 VA: 0x1E0AA44
	private static byte[] CM5func(byte[] buf, int bufOff, byte[] mac) { }

	// RVA: 0x1E0AB88 Offset: 0x1E0AB88 VA: 0x1E0AB88 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x1E0ACDC Offset: 0x1E0ACDC VA: 0x1E0ACDC Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x1E0AEFC Offset: 0x1E0AEFC VA: 0x1E0AEFC Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0A58C Offset: 0x1E0A58C VA: 0x1E0A58C Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class HMac : IMac // TypeDefIndex: 4773
{
	// Fields
	private const byte IPAD = 54;
	private const byte OPAD = 92;
	private readonly IDigest digest; // 0x10
	private readonly int digestSize; // 0x18
	private readonly int blockLength; // 0x1C
	private IMemoable ipadState; // 0x20
	private IMemoable opadState; // 0x28
	private readonly byte[] inputPad; // 0x30
	private readonly byte[] outputBuf; // 0x38

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E0B084 Offset: 0x1E0B084 VA: 0x1E0B084
	public void .ctor(IDigest digest) { }

	// RVA: 0x1E0B200 Offset: 0x1E0B200 VA: 0x1E0B200 Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E0B2F4 Offset: 0x1E0B2F4 VA: 0x1E0B2F4 Slot: 12
	public virtual IDigest GetUnderlyingDigest() { }

	// RVA: 0x1E0B2FC Offset: 0x1E0B2FC VA: 0x1E0B2FC Slot: 13
	public virtual void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0BB88 Offset: 0x1E0BB88 VA: 0x1E0BB88 Slot: 14
	public virtual int GetMacSize() { }

	// RVA: 0x1E0BB90 Offset: 0x1E0BB90 VA: 0x1E0BB90 Slot: 15
	public virtual void Update(byte input) { }

	// RVA: 0x1E0BC58 Offset: 0x1E0BC58 VA: 0x1E0BC58 Slot: 16
	public virtual void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x1E0BD38 Offset: 0x1E0BD38 VA: 0x1E0BD38 Slot: 17
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0C394 Offset: 0x1E0C394 VA: 0x1E0C394 Slot: 18
	public virtual void Reset() { }

	// RVA: 0x1E0BB04 Offset: 0x1E0BB04 VA: 0x1E0BB04
	private static void XorPad(byte[] pad, int len, byte n) { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class ISO9797Alg3Mac : IMac // TypeDefIndex: 4774
{
	// Fields
	private byte[] mac; // 0x10
	private byte[] buf; // 0x18
	private int bufOff; // 0x20
	private IBlockCipher cipher; // 0x28
	private IBlockCipherPadding padding; // 0x30
	private int macSize; // 0x38
	private KeyParameter lastKey2; // 0x40
	private KeyParameter lastKey3; // 0x48

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E0C4F0 Offset: 0x1E0C4F0 VA: 0x1E0C4F0
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E0C804 Offset: 0x1E0C804 VA: 0x1E0C804
	public void .ctor(IBlockCipher cipher, IBlockCipherPadding padding) { }

	// RVA: 0x1E0C8DC Offset: 0x1E0C8DC VA: 0x1E0C8DC
	public void .ctor(IBlockCipher cipher, int macSizeInBits) { }

	// RVA: 0x1E0C5C4 Offset: 0x1E0C5C4 VA: 0x1E0C5C4
	public void .ctor(IBlockCipher cipher, int macSizeInBits, IBlockCipherPadding padding) { }

	// RVA: 0x1E0C8E4 Offset: 0x1E0C8E4 VA: 0x1E0C8E4 Slot: 5
	public string get_AlgorithmName() { }

	// RVA: 0x1E0C92C Offset: 0x1E0C92C VA: 0x1E0C92C Slot: 4
	public void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0CF08 Offset: 0x1E0CF08 VA: 0x1E0CF08 Slot: 6
	public int GetMacSize() { }

	// RVA: 0x1E0CF10 Offset: 0x1E0CF10 VA: 0x1E0CF10 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x1E0D064 Offset: 0x1E0D064 VA: 0x1E0D064 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x1E0D324 Offset: 0x1E0D324 VA: 0x1E0D324 Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0CE28 Offset: 0x1E0CE28 VA: 0x1E0CE28 Slot: 10
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class Poly1305 : IMac // TypeDefIndex: 4775
{
	// Fields
	private const int BlockSize = 16;
	private readonly IBlockCipher cipher; // 0x10
	private readonly byte[] singleByte; // 0x18
	private uint r0; // 0x20
	private uint r1; // 0x24
	private uint r2; // 0x28
	private uint r3; // 0x2C
	private uint r4; // 0x30
	private uint s1; // 0x34
	private uint s2; // 0x38
	private uint s3; // 0x3C
	private uint s4; // 0x40
	private uint k0; // 0x44
	private uint k1; // 0x48
	private uint k2; // 0x4C
	private uint k3; // 0x50
	private byte[] currentBlock; // 0x58
	private int currentBlockOffset; // 0x60
	private uint h0; // 0x64
	private uint h1; // 0x68
	private uint h2; // 0x6C
	private uint h3; // 0x70
	private uint h4; // 0x74

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E0D72C Offset: 0x1E0D72C VA: 0x1E0D72C
	public void .ctor() { }

	// RVA: 0x1E0D7A4 Offset: 0x1E0D7A4 VA: 0x1E0D7A4
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E0D8EC Offset: 0x1E0D8EC VA: 0x1E0D8EC Slot: 4
	public void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0DA7C Offset: 0x1E0DA7C VA: 0x1E0DA7C
	private void SetKey(byte[] key, byte[] nonce) { }

	// RVA: 0x1E0DDD4 Offset: 0x1E0DDD4 VA: 0x1E0DDD4 Slot: 5
	public string get_AlgorithmName() { }

	// RVA: 0x1E0DED8 Offset: 0x1E0DED8 VA: 0x1E0DED8 Slot: 6
	public int GetMacSize() { }

	// RVA: 0x1E0DEE0 Offset: 0x1E0DEE0 VA: 0x1E0DEE0 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x1E0DF44 Offset: 0x1E0DF44 VA: 0x1E0DF44 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x1E0DFF8 Offset: 0x1E0DFF8 VA: 0x1E0DFF8
	private void ProcessBlock() { }

	// RVA: 0x1E0E248 Offset: 0x1E0E248 VA: 0x1E0E248 Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0DDC8 Offset: 0x1E0DDC8 VA: 0x1E0DDC8 Slot: 10
	public void Reset() { }

	// RVA: 0x1E0E240 Offset: 0x1E0E240 VA: 0x1E0E240
	private static ulong mul32x32_64(uint i1, uint i2) { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class SipHash : IMac // TypeDefIndex: 4776
{
	// Fields
	protected readonly int c; // 0x10
	protected readonly int d; // 0x14
	protected long k0; // 0x18
	protected long k1; // 0x20
	protected long v0; // 0x28
	protected long v1; // 0x30
	protected long v2; // 0x38
	protected long v3; // 0x40
	protected long m; // 0x48
	protected int wordPos; // 0x50
	protected int wordCount; // 0x54

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E0E434 Offset: 0x1E0E434 VA: 0x1E0E434
	public void .ctor() { }

	// RVA: 0x1E0E464 Offset: 0x1E0E464 VA: 0x1E0E464
	public void .ctor(int c, int d) { }

	// RVA: 0x1E0E49C Offset: 0x1E0E49C VA: 0x1E0E49C Slot: 11
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E0E6A4 Offset: 0x1E0E6A4 VA: 0x1E0E6A4 Slot: 12
	public virtual int GetMacSize() { }

	// RVA: 0x1E0E6AC Offset: 0x1E0E6AC VA: 0x1E0E6AC Slot: 13
	public virtual void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0E7F8 Offset: 0x1E0E7F8 VA: 0x1E0E7F8 Slot: 14
	public virtual void Update(byte input) { }

	// RVA: 0x1E0E84C Offset: 0x1E0E84C VA: 0x1E0E84C Slot: 15
	public virtual void BlockUpdate(byte[] input, int offset, int length) { }

	// RVA: 0x1E0EA4C Offset: 0x1E0EA4C VA: 0x1E0EA4C Slot: 16
	public virtual long DoFinal() { }

	// RVA: 0x1E0EAEC Offset: 0x1E0EAEC VA: 0x1E0EAEC Slot: 17
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0EB34 Offset: 0x1E0EB34 VA: 0x1E0EB34 Slot: 18
	public virtual void Reset() { }

	// RVA: 0x1E0EB98 Offset: 0x1E0EB98 VA: 0x1E0EB98 Slot: 19
	protected virtual void ProcessMessageWord() { }

	// RVA: 0x1E0EBF0 Offset: 0x1E0EBF0 VA: 0x1E0EBF0 Slot: 20
	protected virtual void ApplySipRounds(int n) { }

	// RVA: 0x1E0EC3C Offset: 0x1E0EC3C VA: 0x1E0EC3C
	protected static long RotateLeft(long x, int n) { }
}

// Namespace: Org.BouncyCastle.Crypto.Macs
public class VmpcMac : IMac // TypeDefIndex: 4777
{
	// Fields
	private byte g; // 0x10
	private byte n; // 0x11
	private byte[] P; // 0x18
	private byte s; // 0x20
	private byte[] T; // 0x28
	private byte[] workingIV; // 0x30
	private byte[] workingKey; // 0x38
	private byte x1; // 0x40
	private byte x2; // 0x41
	private byte x3; // 0x42
	private byte x4; // 0x43

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E0EC4C Offset: 0x1E0EC4C VA: 0x1E0EC4C
	public void .ctor() { }

	// RVA: 0x1E0EC54 Offset: 0x1E0EC54 VA: 0x1E0EC54 Slot: 11
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x1E0F4B8 Offset: 0x1E0F4B8 VA: 0x1E0F4B8 Slot: 12
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E0F500 Offset: 0x1E0F500 VA: 0x1E0F500 Slot: 13
	public virtual int GetMacSize() { }

	// RVA: 0x1E0F508 Offset: 0x1E0F508 VA: 0x1E0F508 Slot: 14
	public virtual void Init(ICipherParameters parameters) { }

	// RVA: 0x1E0F73C Offset: 0x1E0F73C VA: 0x1E0F73C
	private void initKey(byte[] keyBytes, byte[] ivBytes) { }

	// RVA: 0x1E0FB28 Offset: 0x1E0FB28 VA: 0x1E0FB28 Slot: 15
	public virtual void Reset() { }

	// RVA: 0x1E0FBE8 Offset: 0x1E0FBE8 VA: 0x1E0FBE8 Slot: 16
	public virtual void Update(byte input) { }

	// RVA: 0x1E100C4 Offset: 0x1E100C4 VA: 0x1E100C4 Slot: 17
	public virtual void BlockUpdate(byte[] input, int inOff, int len) { }
}

// Namespace: Org.BouncyCastle.Crypto
[Serializable]
public class MaxBytesExceededException : CryptoException // TypeDefIndex: 4778
{
	// Methods

	// RVA: 0x1E101DC Offset: 0x1E101DC VA: 0x1E101DC
	public void .ctor() { }

	// RVA: 0x1E101E4 Offset: 0x1E101E4 VA: 0x1E101E4
	public void .ctor(string message) { }

	// RVA: 0x1E101EC Offset: 0x1E101EC VA: 0x1E101EC
	public void .ctor(string message, Exception e) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class CbcBlockCipher : IBlockCipher // TypeDefIndex: 4779
{
	// Fields
	private byte[] IV; // 0x10
	private byte[] cbcV; // 0x18
	private byte[] cbcNextV; // 0x20
	private int blockSize; // 0x28
	private IBlockCipher cipher; // 0x30
	private bool encrypting; // 0x38

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E07288 Offset: 0x1E07288 VA: 0x1E07288
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E101F4 Offset: 0x1E101F4 VA: 0x1E101F4
	public IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E101FC Offset: 0x1E101FC VA: 0x1E101FC Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E10518 Offset: 0x1E10518 VA: 0x1E10518 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x1E1060C Offset: 0x1E1060C VA: 0x1E1060C Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E10614 Offset: 0x1E10614 VA: 0x1E10614 Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x1E106CC Offset: 0x1E106CC VA: 0x1E106CC Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E10408 Offset: 0x1E10408 VA: 0x1E10408 Slot: 9
	public void Reset() { }

	// RVA: 0x1E106DC Offset: 0x1E106DC VA: 0x1E106DC
	private int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x1E10900 Offset: 0x1E10900 VA: 0x1E10900
	private int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class CcmBlockCipher : IAeadBlockCipher // TypeDefIndex: 4780
{
	// Fields
	private static readonly int BlockSize; // 0x0
	private readonly IBlockCipher cipher; // 0x10
	private readonly byte[] macBlock; // 0x18
	private bool forEncryption; // 0x20
	private byte[] nonce; // 0x28
	private byte[] initialAssociatedText; // 0x30
	private int macSize; // 0x38
	private ICipherParameters keyParam; // 0x40
	private readonly MemoryStream associatedText; // 0x48
	private readonly MemoryStream data; // 0x50

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E10B38 Offset: 0x1E10B38 VA: 0x1E10B38
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E10D6C Offset: 0x1E10D6C VA: 0x1E10D6C Slot: 17
	public virtual IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E10D74 Offset: 0x1E10D74 VA: 0x1E10D74 Slot: 18
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E10F64 Offset: 0x1E10F64 VA: 0x1E10F64 Slot: 19
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E11058 Offset: 0x1E11058 VA: 0x1E11058 Slot: 20
	public virtual int GetBlockSize() { }

	// RVA: 0x1E11110 Offset: 0x1E11110 VA: 0x1E11110 Slot: 21
	public virtual void ProcessAadByte(byte input) { }

	// RVA: 0x1E11150 Offset: 0x1E11150 VA: 0x1E11150 Slot: 22
	public virtual void ProcessAadBytes(byte[] inBytes, int inOff, int len) { }

	// RVA: 0x1E111A8 Offset: 0x1E111A8 VA: 0x1E111A8 Slot: 23
	public virtual int ProcessByte(byte input, byte[] outBytes, int outOff) { }

	// RVA: 0x1E111F0 Offset: 0x1E111F0 VA: 0x1E111F0 Slot: 24
	public virtual int ProcessBytes(byte[] inBytes, int inOff, int inLen, byte[] outBytes, int outOff) { }

	// RVA: 0x1E112A0 Offset: 0x1E112A0 VA: 0x1E112A0 Slot: 25
	public virtual int DoFinal(byte[] outBytes, int outOff) { }

	// RVA: 0x1E11360 Offset: 0x1E11360 VA: 0x1E11360 Slot: 26
	public virtual void Reset() { }

	// RVA: 0x1E11468 Offset: 0x1E11468 VA: 0x1E11468 Slot: 27
	public virtual byte[] GetMac() { }

	// RVA: 0x1E11480 Offset: 0x1E11480 VA: 0x1E11480 Slot: 28
	public virtual int GetUpdateOutputSize(int len) { }

	// RVA: 0x1E11488 Offset: 0x1E11488 VA: 0x1E11488 Slot: 29
	public virtual int GetOutputSize(int len) { }

	// RVA: 0x1E114F0 Offset: 0x1E114F0 VA: 0x1E114F0 Slot: 30
	public virtual byte[] ProcessPacket(byte[] input, int inOff, int inLen) { }

	// RVA: 0x1E115F4 Offset: 0x1E115F4 VA: 0x1E115F4 Slot: 31
	public virtual int ProcessPacket(byte[] input, int inOff, int inLen, byte[] output, int outOff) { }

	// RVA: 0x1E120E8 Offset: 0x1E120E8 VA: 0x1E120E8
	private int CalculateMac(byte[] data, int dataOff, int dataLen, byte[] macBlock) { }

	// RVA: 0x1E12B5C Offset: 0x1E12B5C VA: 0x1E12B5C
	private int GetAssociatedTextLength() { }

	// RVA: 0x1E12B40 Offset: 0x1E12B40 VA: 0x1E12B40
	private bool HasAssociatedText() { }

	// RVA: 0x1E12BA8 Offset: 0x1E12BA8 VA: 0x1E12BA8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class CfbBlockCipher : IBlockCipher // TypeDefIndex: 4781
{
	// Fields
	private byte[] IV; // 0x10
	private byte[] cfbV; // 0x18
	private byte[] cfbOutV; // 0x20
	private bool encrypting; // 0x28
	private readonly int blockSize; // 0x2C
	private readonly IBlockCipher cipher; // 0x30

	// Properties
	public string AlgorithmName { get; }
	public bool IsPartialBlockOkay { get; }

	// Methods

	// RVA: 0x1E12BFC Offset: 0x1E12BFC VA: 0x1E12BFC
	public void .ctor(IBlockCipher cipher, int bitBlockSize) { }

	// RVA: 0x1E12E0C Offset: 0x1E12E0C VA: 0x1E12E0C
	public IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E12E14 Offset: 0x1E12E14 VA: 0x1E12E14 Slot: 5
	public void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E130D0 Offset: 0x1E130D0 VA: 0x1E130D0 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x1E131F8 Offset: 0x1E131F8 VA: 0x1E131F8 Slot: 7
	public bool get_IsPartialBlockOkay() { }

	// RVA: 0x1E13200 Offset: 0x1E13200 VA: 0x1E13200 Slot: 6
	public int GetBlockSize() { }

	// RVA: 0x1E13208 Offset: 0x1E13208 VA: 0x1E13208 Slot: 8
	public int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff) { }

	// RVA: 0x1E13218 Offset: 0x1E13218 VA: 0x1E13218
	public int EncryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x1E134F0 Offset: 0x1E134F0 VA: 0x1E134F0
	public int DecryptBlock(byte[] input, int inOff, byte[] outBytes, int outOff) { }

	// RVA: 0x1E12FE4 Offset: 0x1E12FE4 VA: 0x1E12FE4 Slot: 9
	public void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class CtsBlockCipher : BufferedBlockCipher // TypeDefIndex: 4782
{
	// Fields
	private readonly int blockSize; // 0x28

	// Methods

	// RVA: 0x1E137C8 Offset: 0x1E137C8 VA: 0x1E137C8
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E1396C Offset: 0x1E1396C VA: 0x1E1396C Slot: 26
	public override int GetUpdateOutputSize(int length) { }

	// RVA: 0x1E139D0 Offset: 0x1E139D0 VA: 0x1E139D0 Slot: 25
	public override int GetOutputSize(int length) { }

	// RVA: 0x1E139DC Offset: 0x1E139DC VA: 0x1E139DC Slot: 28
	public override int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x1E13B64 Offset: 0x1E13B64 VA: 0x1E13B64 Slot: 32
	public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: 0x1E13ED0 Offset: 0x1E13ED0 VA: 0x1E13ED0 Slot: 36
	public override int DoFinal(byte[] output, int outOff) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class EaxBlockCipher : IAeadBlockCipher // TypeDefIndex: 4783
{
	// Fields
	private SicBlockCipher cipher; // 0x10
	private bool forEncryption; // 0x18
	private int blockSize; // 0x1C
	private IMac mac; // 0x20
	private byte[] nonceMac; // 0x28
	private byte[] associatedTextMac; // 0x30
	private byte[] macBlock; // 0x38
	private int macSize; // 0x40
	private byte[] bufBlock; // 0x48
	private int bufOff; // 0x50
	private bool cipherInitialized; // 0x54
	private byte[] initialAssociatedText; // 0x58

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x1E14608 Offset: 0x1E14608 VA: 0x1E14608
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x1E14854 Offset: 0x1E14854 VA: 0x1E14854 Slot: 17
	public virtual string get_AlgorithmName() { }

	// RVA: 0x1E14964 Offset: 0x1E14964 VA: 0x1E14964 Slot: 18
	public virtual IBlockCipher GetUnderlyingCipher() { }

	// RVA: 0x1E1496C Offset: 0x1E1496C VA: 0x1E1496C Slot: 19
	public virtual int GetBlockSize() { }

	// RVA: 0x1E149A4 Offset: 0x1E149A4 VA: 0x1E149A4 Slot: 20
	public virtual void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x1E14EA4 Offset: 0x1E14EA4 VA: 0x1E14EA4
	private void InitCipher() { }

	// RVA: 0x1E15068 Offset: 0x1E15068 VA: 0x1E15068
	private void CalculateMac() { }

	// RVA: 0x1E1525C Offset: 0x1E1525C VA: 0x1E1525C Slot: 21
	public virtual void Reset() { }

	// RVA: 0x1E15264 Offset: 0x1E15264 VA: 0x1E15264
	private void Reset(bool clearMac) { }

	// RVA: 0x1E154B8 Offset: 0x1E154B8 VA: 0x1E154B8 Slot: 22
	public virtual void ProcessAadByte(byte input) { }

	// RVA: 0x1E155CC Offset: 0x1E155CC VA: 0x1E155CC Slot: 23
	public virtual void ProcessAadBytes(byte[] inBytes, int inOff, int len) { }

	// RVA: 0x1E156F8 Offset: 0x1E156F8 VA: 0x1E156F8 Slot: 24
	public virtual int ProcessByte(byte input, byte[] outBytes, int outOff) { }

	// RVA: 0x1E159F4 Offset: 0x1E159F4 VA: 0x1E159F4 Slot: 25
	public virtual int ProcessBytes(byte[] inBytes, int inOff, int len, byte[] outBytes, int outOff) { }

	// RVA: 0x1E15AA0 Offset: 0x1E15AA0 VA: 0x1E15AA0 Slot: 26
	public virtual int DoFinal(byte[] outBytes, int outOff) { }

	// RVA: 0x1E15F10 Offset: 0x1E15F10 VA: 0x1E15F10 Slot: 27
	public virtual byte[] GetMac() { }

	// RVA: 0x1E15F8C Offset: 0x1E15F8C VA: 0x1E15F8C Slot: 28
	public virtual int GetUpdateOutputSize(int len) { }

	// RVA: 0x1E15FC0 Offset: 0x1E15FC0 VA: 0x1E15FC0 Slot: 29
	public virtual int GetOutputSize(int len) { }

	// RVA: 0x1E1573C Offset: 0x1E1573C VA: 0x1E1573C
	private int Process(byte b, byte[] outBytes, int outOff) { }

	// RVA: 0x1E15E24 Offset: 0x1E15E24 VA: 0x1E15E24
	private bool VerifyMac(byte[] mac, int off) { }
}

// Namespace: 
private enum EaxBlockCipher.Tag // TypeDefIndex: 4784
{
	// Fields
	public byte value__; // 0x0
	public const EaxBlockCipher.Tag N = 0;
	public const EaxBlockCipher.Tag H = 1;
	public const EaxBlockCipher.Tag C = 2;
}

// Namespace: Org.BouncyCastle.Crypto.Modes.Gcm
internal abstract class GcmUtilities // TypeDefIndex: 4785
{
	// Fields
	private const uint E1 = 3774873600;
	private const ulong E1L = 16212958658533785600;
	private static readonly uint[] LOOKUP; // 0x0

	// Methods

	// RVA: 0x1E16CF0 Offset: 0x1E16CF0 VA: 0x1E16CF0
	protected void .ctor() { }

	// RVA: 0x1E16CF8 Offset: 0x1E16CF8 VA: 0x1E16CF8
	private static uint[] GenerateLookup() { }

	// RVA: 0x1E16DD8 Offset: 0x1E16DD8 VA: 0x1E16DD8
	internal static byte[] OneAsBytes() { }

	// RVA: 0x1E16E58 Offset: 0x1E16E58 VA: 0x1E16E58
	internal static uint[] OneAsUints() { }

	// RVA: 0x1E16ED8 Offset: 0x1E16ED8 VA: 0x1E16ED8
	internal static ulong[] OneAsUlongs() { }

	// RVA: 0x1E16F58 Offset: 0x1E16F58 VA: 0x1E16F58
	internal static byte[] AsBytes(uint[] x) { }

	// RVA: 0x1E16F60 Offset: 0x1E16F60 VA: 0x1E16F60
	internal static void AsBytes(uint[] x, byte[] z) { }

	// RVA: 0x1E16F6C Offset: 0x1E16F6C VA: 0x1E16F6C
	internal static byte[] AsBytes(ulong[] x) { }

	// RVA: 0x1E16FDC Offset: 0x1E16FDC VA: 0x1E16FDC
	internal static void AsBytes(ulong[] x, byte[] z) { }

	// RVA: 0x1E16FE8 Offset: 0x1E16FE8 VA: 0x1E16FE8
	internal static uint[] AsUints(byte[] bs) { }

	// RVA: 0x1E17058 Offset: 0x1E17058 VA: 0x1E17058
	internal static void AsUints(byte[] bs, uint[] output) { }

	// RVA: 0x1E1706C Offset: 0x1E1706C VA: 0x1E1706C
	internal static ulong[] AsUlongs(byte[] x) { }

	// RVA: 0x1E170DC Offset: 0x1E170DC VA: 0x1E170DC
	public static void AsUlongs(byte[] x, ulong[] z) { }

	// RVA: 0x1E170F0 Offset: 0x1E170F0 VA: 0x1E170F0
	internal static void Multiply(byte[] x, byte[] y) { }

	// RVA: 0x1E1718C Offset: 0x1E1718C VA: 0x1E1718C
	internal static void Multiply(uint[] x, uint[] y) { }

	// RVA: 0x1E173A0 Offset: 0x1E173A0 VA: 0x1E173A0
	internal static void Multiply(ulong[] x, ulong[] y) { }

	// RVA: 0x1E174E0 Offset: 0x1E174E0 VA: 0x1E174E0
	internal static void MultiplyP(uint[] x) { }

	// RVA: 0x1E176CC Offset: 0x1E176CC VA: 0x1E176CC
	internal static void MultiplyP(uint[] x, uint[] z) { }

	// RVA: 0x1E178D8 Offset: 0x1E178D8 VA: 0x1E178D8
	internal static void MultiplyP8(uint[] x) { }

	// RVA: 0x1E17B28 Offset: 0x1E17B28 VA: 0x1E17B28
	internal static void MultiplyP8(uint[] x, uint[] y) { }

	// RVA: 0x1E17588 Offset: 0x1E17588 VA: 0x1E17588
	internal static uint ShiftRight(uint[] x) { }

	// RVA: 0x1E17784 Offset: 0x1E17784 VA: 0x1E17784
	internal static uint ShiftRight(uint[] x, uint[] z) { }

	// RVA: 0x1E179C0 Offset: 0x1E179C0 VA: 0x1E179C0
	internal static uint ShiftRightN(uint[] x, int n) { }

	// RVA: 0x1E17C18 Offset: 0x1E17C18 VA: 0x1E17C18
	internal static uint ShiftRightN(uint[] x, int n, uint[] z) { }

	// RVA: 0x1E17D90 Offset: 0x1E17D90 VA: 0x1E17D90
	internal static void Xor(byte[] x, byte[] y) { }

	// RVA: 0x1E17F40 Offset: 0x1E17F40 VA: 0x1E17F40
	internal static void Xor(byte[] x, byte[] y, int yOff, int yLen) { }

	// RVA: 0x1E18000 Offset: 0x1E18000 VA: 0x1E18000
	internal static void Xor(byte[] x, byte[] y, byte[] z) { }

	// RVA: 0x1E18248 Offset: 0x1E18248 VA: 0x1E18248
	internal static void Xor(uint[] x, uint[] y) { }

	// RVA: 0x1E1839C Offset: 0x1E1839C VA: 0x1E1839C
	internal static void Xor(uint[] x, uint[] y, uint[] z) { }

	// RVA: 0x1E18574 Offset: 0x1E18574 VA: 0x1E18574
	internal static void Xor(ulong[] x, ulong[] y) { }

	// RVA: 0x1E18638 Offset: 0x1E18638 VA: 0x1E18638
	internal static void Xor(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x1E18748 Offset: 0x1E18748 VA: 0x1E18748
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes.Gcm
public interface IGcmExponentiator // TypeDefIndex: 4786
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(byte[] x);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ExponentiateX(long pow, byte[] output);
}

// Namespace: Org.BouncyCastle.Crypto.Modes.Gcm
public interface IGcmMultiplier // TypeDefIndex: 4787
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Init(byte[] H);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void MultiplyH(byte[] x);
}

// Namespace: Org.BouncyCastle.Crypto.Modes.Gcm
public class Tables1kGcmExponentiator : IGcmExponentiator // TypeDefIndex: 4788
{
	// Fields
	private IList lookupPowX2; // 0x10

	// Methods

	// RVA: 0x1E1879C Offset: 0x1E1879C VA: 0x1E1879C
	public void .ctor() { }

	// RVA: 0x1E187A4 Offset: 0x1E187A4 VA: 0x1E187A4 Slot: 4
	public void Init(byte[] x) { }

	// RVA: 0x1E189D0 Offset: 0x1E189D0 VA: 0x1E189D0 Slot: 5
	public void ExponentiateX(long pow, byte[] output) { }

	// RVA: 0x1E18BE4 Offset: 0x1E18BE4 VA: 0x1E18BE4
	private void EnsureAvailable(int bit) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes.Gcm
public class Tables8kGcmMultiplier : IGcmMultiplier // TypeDefIndex: 4789
{
	// Fields
	private byte[] H; // 0x10
	private uint[][][] M; // 0x18

	// Methods

	// RVA: 0x1E18E84 Offset: 0x1E18E84 VA: 0x1E18E84
	public void .ctor() { }

	// RVA: 0x1E18E8C Offset: 0x1E18E8C VA: 0x1E18E8C Slot: 4
	public void Init(byte[] H) { }

	// RVA: 0x1E19BA8 Offset: 0x1E19BA8 VA: 0x1E19BA8 Slot: 5
	public void MultiplyH(byte[] x) { }
}

// Namespace: Org.BouncyCastle.Crypto.Modes
public class GcmBlockCipher : IAeadBlockCipher // TypeDefIndex: 4790
{
	// Fields
	private const int BlockSize = 16;
	private readonly IBlockCipher cipher; // 0x10
	private readonly IGcmMultiplier multiplier; // 0x18
	private IGcmExponentiator exp; // 0x20
	private bool forEncryption; // 0x28
	private int macSize; // 0x2C
	private byte[] nonce; // 0x30
	private byte[] initialAssociatedText; // 0x38
	private byte[] H; // 0x40
	private byte[] J0; // 0x48
	private byte[] bufBlock; // 0x50
	private byte[] macBlock; // 0x58
	private byte[] S; // 0x60
	private byte[] S_at; // 0x68
	private byte[] S_atPre; // 0x70
	private byte[] counter; // 0x78
	private uint blocksRemaining; // 0x80
	private int bufOff; // 0x84
