	// Fields
	public int value__; // 0x0
	public const ConditionsInformation.CHECK NONE = 0;
	public const ConditionsInformation.CHECK EQUAL = 1;
	public const ConditionsInformation.CHECK EQUAL_NOT = 2;
	public const ConditionsInformation.CHECK HIGHER = 3;
	public const ConditionsInformation.CHECK LOWER = 4;
	public const ConditionsInformation.CHECK MULTIPLE = 5;
	public const ConditionsInformation.CHECK EXIST = 6;
}

// Namespace: 
public sealed class ConditionsInformation.ISCheckFunction : MulticastDelegate // TypeDefIndex: 9048
{
	// Methods

	// RVA: 0x14591A0 Offset: 0x14591A0 VA: 0x14591A0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x14591B8 Offset: 0x14591B8 VA: 0x14591B8 Slot: 11
	public virtual bool Invoke(double[] selfVals, long[] entVals) { }

	// RVA: 0x145957C Offset: 0x145957C VA: 0x145957C Slot: 12
	public virtual IAsyncResult BeginInvoke(double[] selfVals, long[] entVals, AsyncCallback callback, object object) { }

	// RVA: 0x14595AC Offset: 0x14595AC VA: 0x14595AC Slot: 13
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class ConditionsInformation.BuffIndividualitySumCheckInfo : ConditionsInformation.CheckInfo // TypeDefIndex: 9049
{
	// Methods

	// RVA: 0x145916C Offset: 0x145916C VA: 0x145916C
	public void .ctor(ConditionsInformation.TARGET inTarget, ConditionsInformation.CHECK inCheck) { }
}

// Namespace: 
public class ConditionsInformation.HigherBuffIndividualitySumCheckInfo : ConditionsInformation.BuffIndividualitySumCheckInfo // TypeDefIndex: 9050
{
	// Methods

	// RVA: 0x145901C Offset: 0x145901C VA: 0x145901C
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.LowerBuffIndividualitySumCheckInfo : ConditionsInformation.BuffIndividualitySumCheckInfo // TypeDefIndex: 9051
{
	// Methods

	// RVA: 0x145904C Offset: 0x145904C VA: 0x145904C
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.EqualBuffIndividualitySumCheckInfo : ConditionsInformation.BuffIndividualitySumCheckInfo // TypeDefIndex: 9052
{
	// Methods

	// RVA: 0x145907C Offset: 0x145907C VA: 0x145907C
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.TotalCountHigherIndividualityCheckInfo : ConditionsInformation.HigherBuffIndividualitySumCheckInfo // TypeDefIndex: 9053
{
	// Methods

	// RVA: 0x14590B8 Offset: 0x14590B8 VA: 0x14590B8
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.TotalCountLowerIndividualityCheckInfo : ConditionsInformation.LowerBuffIndividualitySumCheckInfo // TypeDefIndex: 9054
{
	// Methods

	// RVA: 0x14590F0 Offset: 0x14590F0 VA: 0x14590F0
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.TotalCountEqualIndividualityCheckInfo : ConditionsInformation.EqualBuffIndividualitySumCheckInfo // TypeDefIndex: 9055
{
	// Methods

	// RVA: 0x1459128 Offset: 0x1459128 VA: 0x1459128
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.ExistIndividualityCheckInfo : ConditionsInformation.CheckInfo // TypeDefIndex: 9056
{
	// Methods

	// RVA: 0x14590AC Offset: 0x14590AC VA: 0x14590AC
	public void .ctor(ConditionsInformation.TARGET inTarget) { }
}

// Namespace: 
public class ConditionsInformation.CheckInfo // TypeDefIndex: 9057
{
	// Fields
	public ConditionsInformation.TARGET target; // 0x10
	public ConditionsInformation.PARAMATER paramater; // 0x14
	public ConditionsInformation.CHECK check; // 0x18
	public ConditionsInformation.REFINE refine; // 0x1C
	public bool isIndiv; // 0x20
	public ConditionsInformation.ISCheckFunction func; // 0x28
	public bool isParams; // 0x30
	public bool isRevival; // 0x31
	[CompilerGeneratedAttribute] // RVA: 0xC64DB4 Offset: 0xC64DB4 VA: 0xC64DB4
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC64DC4 Offset: 0xC64DC4 VA: 0xC64DC4
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC64DD4 Offset: 0xC64DD4 VA: 0xC64DD4
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC64DE4 Offset: 0xC64DE4 VA: 0xC64DE4
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC64DF4 Offset: 0xC64DF4 VA: 0xC64DF4
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache4; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC64E04 Offset: 0xC64E04 VA: 0xC64E04
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache5; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC64E14 Offset: 0xC64E14 VA: 0xC64E14
	private static ConditionsInformation.ISCheckFunction <>f__mg$cache6; // 0x30

	// Methods

	// RVA: 0x1458CA8 Offset: 0x1458CA8 VA: 0x1458CA8
	public void .ctor() { }

	// RVA: 0x1458D5C Offset: 0x1458D5C VA: 0x1458D5C
	public void .ctor(ConditionsInformation.TARGET inTarget, ConditionsInformation.PARAMATER inParamater, ConditionsInformation.CHECK inCheck) { }

	// RVA: 0x14591B0 Offset: 0x14591B0 VA: 0x14591B0
	public ConditionsInformation.ISCheckFunction getCheckFunction() { }

	// RVA: 0x1459008 Offset: 0x1459008 VA: 0x1459008
	public ConditionsInformation.CheckInfo setRefine(ConditionsInformation.REFINE inRefine) { }

	// RVA: 0x1458FFC Offset: 0x1458FFC VA: 0x1458FFC
	public ConditionsInformation.CheckInfo setIsIndiv(bool flg) { }

	// RVA: 0x1459010 Offset: 0x1459010 VA: 0x1459010
	public ConditionsInformation.CheckInfo setParams(bool flg) { }

	// RVA: 0x1459160 Offset: 0x1459160 VA: 0x1459160
	public ConditionsInformation.CheckInfo setRevival(bool flg) { }
}

// Namespace: 
internal interface AiInterface // TypeDefIndex: 9058
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkParams);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool isAiTarget(ConditionsInformation.CheckInfo info, long[] indiv);
}

// Namespace: 
public class AiState // TypeDefIndex: 9059
{
	// Fields
	public int firstAiGroupId; // 0x10
	public int aiGroupId; // 0x14
	public int baseTurn; // 0x18
	public int actCount; // 0x1C
	public int fieldTurn; // 0x20
	public AiAct.TYPE beforeActType; // 0x24
	public int beforeActId; // 0x28

	// Methods

	// RVA: 0x1074174 Offset: 0x1074174 VA: 0x1074174
	public void .ctor() { }

	// RVA: 0x1074184 Offset: 0x1074184 VA: 0x1074184
	public void Initialize(int groupId) { }

	// RVA: 0x1074194 Offset: 0x1074194 VA: 0x1074194
	public void setBeforeAction(AiAct.TYPE type, int actId) { }

	// RVA: 0x107419C Offset: 0x107419C VA: 0x107419C
	public AiAct.TYPE getBeforeAiActType() { }

	// RVA: 0x1071C30 Offset: 0x1071C30 VA: 0x1071C30
	public void changeThinking(int groupId) { }

	// RVA: 0x1074050 Offset: 0x1074050 VA: 0x1074050
	public void fieldTurnProgressing() { }

	// RVA: 0x1073EA0 Offset: 0x1073EA0 VA: 0x1073EA0
	public AiState.SaveData getSaveData() { }

	// RVA: 0x1074134 Offset: 0x1074134 VA: 0x1074134
	public void setSaveData(AiState.SaveData sv) { }
}

// Namespace: 
public class AiState.SaveData // TypeDefIndex: 9060
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC64E24 Offset: 0xC64E24 VA: 0xC64E24
	public int firstAiGroupId; // 0x10
	[PackKeyAttribute] // RVA: 0xC64E5C Offset: 0xC64E5C VA: 0xC64E5C
	public int aiGroupId; // 0x14
	[PackKeyAttribute] // RVA: 0xC64E94 Offset: 0xC64E94 VA: 0xC64E94
	public int baseTurn; // 0x18
	[PackKeyAttribute] // RVA: 0xC64ECC Offset: 0xC64ECC VA: 0xC64ECC
	public int actCount; // 0x1C
	[PackKeyAttribute] // RVA: 0xC64F04 Offset: 0xC64F04 VA: 0xC64F04
	public int beforeActType; // 0x20
	[PackKeyAttribute] // RVA: 0xC64F3C Offset: 0xC64F3C VA: 0xC64F3C
	public int beforeActId; // 0x24
	[PackKeyAttribute] // RVA: 0xC64F74 Offset: 0xC64F74 VA: 0xC64F74
	public int fieldTurn; // 0x28

	// Methods

	// RVA: 0x10741A4 Offset: 0x10741A4 VA: 0x10741A4
	public void .ctor() { }
}

// Namespace: 
public class NpcAiState : AiState // TypeDefIndex: 9061
{
	// Methods

	// RVA: 0x1A8EE94 Offset: 0x1A8EE94 VA: 0x1A8EE94
	public void .ctor(int groupId) { }
}

// Namespace: 
public class BattleLogic : BaseMonoBehaviour // TypeDefIndex: 9062
{
	// Fields
	protected static readonly string COMMAND_SPELL_EFFECT_ASSETNAME; // 0x0
	protected static readonly string COMMAND_SPELL_EFFECT_PREFABNAME; // 0x8
	protected static readonly string COMMAND_SPELL_EFFECT_ANIMNAME; // 0x10
	public PlayMakerFSM fsm; // 0x18
	public BattleData data; // 0x20
	public BattleLogic proc; // 0x28
	public BattlePerformance perf; // 0x30
	public BattleRandom brandom; // 0x38
	public BattleEventTutorial eventTutorial; // 0x40
	public string setdays; // 0x48
	public BattleLogic.LOGICTYPE[] logiclist; // 0x50
	private Dictionary<BattleLogic.LOGICTYPE, BattleLogic.taskFunction> funclist; // 0x58
	private Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.reactionFunction> reactionlist; // 0x60
	public int logicindex; // 0x68
	private Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.createActionBattle> actionBattleList; // 0x70
	private LinkedList<BattleLogicTask> list_logic; // 0x78
	[HideInInspector] // RVA: 0xC64FAC Offset: 0xC64FAC VA: 0xC64FAC
	private BattleLogicTarget logictarget; // 0x80
	public BattleLogicNomal logicnomal; // 0x88
	public BattleLogicSkill logicSkill; // 0x90
	private BattleLogicSpecial logicspecial; // 0x98
	private BattleLogicFunction logicFunction; // 0xA0
	private BattleLogicEnemyAi logicEnemyAi; // 0xA8
	private BattleLogicFieldAi logicFieldAi; // 0xB0
	private BattleLogicReaction logicReaction; // 0xB8
	private BattleLogicNpcAi logicNpcAi; // 0xC0
	private Spawner spawner; // 0xC8
	private BattleLogicClassRelation logicClassRelation; // 0xD0
	protected string _CurrentBgmName; // 0xD8
	public bool connCammdSpellRetryFlg; // 0xE0
	public static readonly int[] addStarWeight; // 0x18
	private bool isEnableSkipAssistSkill; // 0xE1
	private bool isPlayImmediateEntry; // 0xE2
	private static string[] unusedGameObjectNames; // 0x20
	private List<GameObject> unusedGameobjects; // 0xE8
	private string resultstring; // 0xF0
	private float prevScaleTime; // 0xF8
	private float prevSkipScaleTime; // 0xFC
	private bool skipflg; // 0x100
	private const string FORCE_RESET_TIME_METHOD_NAME = "ForceResetTimeAcceleration";
	private float prevFixScaleTime; // 0x104
	private float prevFirstScaleTime; // 0x108
	private float prevPartActiontScaleTime; // 0x10C
	private BattleLogicTask prevTask; // 0x110
	private BattleLogic.ACTTYPE acttype; // 0x118
	private BattleLogic.UseSkillObject tmp_useSkill; // 0x120
	private BattleLogic.UseSkillObject act_useSkill; // 0x128
	private BattleLogic.CommandSpellData tmp_usecommandspell; // 0x130
	private BattleLogic.CommandSpellData actData; // 0x138
	public Vector2[] TuArrow; // 0x140
	public Rect[] TuSquare; // 0x148
	private BattleLogic.TutorialStringData[] TSD; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xC64FBC Offset: 0xC64FBC VA: 0xC64FBC
	private static Predicate<BattleServantData> <>f__am$cache0; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xC64FCC Offset: 0xC64FCC VA: 0xC64FCC
	private static Func<BattleServantData, bool> <>f__am$cache1; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC64FDC Offset: 0xC64FDC VA: 0xC64FDC
	private static Func<BattleServantData, int> <>f__am$cache2; // 0x38
	[CompilerGeneratedAttribute] // RVA: 0xC64FEC Offset: 0xC64FEC VA: 0xC64FEC
	private static Func<BattleServantData, bool> <>f__am$cache3; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xC64FFC Offset: 0xC64FFC VA: 0xC64FFC
	private static Func<BattleServantData, int> <>f__am$cache4; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC6500C Offset: 0xC6500C VA: 0xC6500C
	private static Func<BattleSkillInfoData, int> <>f__am$cache5; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC6501C Offset: 0xC6501C VA: 0xC6501C
	private static Func<BattleSkillInfoData, int> <>f__am$cache6; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC6502C Offset: 0xC6502C VA: 0xC6502C
	private static Func<BattleSkillInfoData, int> <>f__am$cache7; // 0x60
	[CompilerGeneratedAttribute] // RVA: 0xC6503C Offset: 0xC6503C VA: 0xC6503C
	private static Func<BattleSkillInfoData, int> <>f__am$cache8; // 0x68

	// Properties
	public BattleAttackManager AtkManager { get; }
	public BaseBattleEvent BattleEvent { get; }
	public BattleMotionSkipManager MotionSkipManager { get; }
	public BattleLogicTarget LogicTarget { get; }
	public BattleLogicEnemyAi LogicEnemeyAi { get; }
	[HideInInspector] // RVA: 0xCDEB50 Offset: 0xCDEB50 VA: 0xCDEB50
	public string CurrentBgmName { get; }

	// Methods

	// RVA: 0x1215FD4 Offset: 0x1215FD4 VA: 0x1215FD4
	public void .ctor() { }

	// RVA: 0x121688C Offset: 0x121688C VA: 0x121688C
	public BattleAttackManager get_AtkManager() { }

	// RVA: 0x12168B8 Offset: 0x12168B8 VA: 0x12168B8
	public BaseBattleEvent get_BattleEvent() { }

	// RVA: 0x12168E4 Offset: 0x12168E4 VA: 0x12168E4
	public BattleMotionSkipManager get_MotionSkipManager() { }

	// RVA: 0x1216914 Offset: 0x1216914 VA: 0x1216914
	public BattleLogicTarget get_LogicTarget() { }

	// RVA: 0x121691C Offset: 0x121691C VA: 0x121691C
	public BattleLogicEnemyAi get_LogicEnemeyAi() { }

	// RVA: 0x1216924 Offset: 0x1216924 VA: 0x1216924
	public string get_CurrentBgmName() { }

	// RVA: 0x121692C Offset: 0x121692C VA: 0x121692C
	public void Initialize() { }

	// RVA: 0x1218670 Offset: 0x1218670 VA: 0x1218670
	private void setActiviteUnusedGameobject(bool active = True) { }

	// RVA: 0x12188D0 Offset: 0x12188D0 VA: 0x12188D0
	private void OnDestroy() { }

	// RVA: 0x12188D8 Offset: 0x12188D8 VA: 0x12188D8
	public void sendFsmEvent(string evstr) { }

	// RVA: 0x1218910 Offset: 0x1218910 VA: 0x1218910
	public void loadBgmName(string _bgmName) { }

	// RVA: 0x1218A10 Offset: 0x1218A10 VA: 0x1218A10
	public string getBattleBgmName() { }

	// RVA: 0x1218AEC Offset: 0x1218AEC VA: 0x1218AEC
	private string GetDefaultBgmName() { }

	// RVA: 0x1218BF4 Offset: 0x1218BF4 VA: 0x1218BF4
	public void PlayCurrentBgm() { }

	// RVA: 0x1218D10 Offset: 0x1218D10 VA: 0x1218D10
	public void checkEntryMember(string endproc, bool isTactical = False, bool isEventBonusCheck = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD690 Offset: 0xCCD690 VA: 0xCCD690
	// RVA: 0x1218E20 Offset: 0x1218E20 VA: 0x1218E20
	private IEnumerator UnloadUnusedAssetsAndWaitFinish() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD6A0 Offset: 0xCCD6A0 VA: 0xCCD6A0
	// RVA: 0x1218D44 Offset: 0x1218D44 VA: 0x1218D44
	private IEnumerator coroutineEntrySubMember(string endproc, bool isTactical, bool isEventBonusCheck = False) { }

	// RVA: 0x1218E7C Offset: 0x1218E7C VA: 0x1218E7C
	private bool checkImmediateEntrySubMember(bool isTactical, bool isEventBonusCheck = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD6B0 Offset: 0xCCD6B0 VA: 0xCCD6B0
	// RVA: 0x12190C0 Offset: 0x12190C0 VA: 0x12190C0
	public IEnumerator coroutineImmediateEntrySubMember(bool isEventBonusCheck = False) { }

	// RVA: 0x1219158 Offset: 0x1219158 VA: 0x1219158
	private BattleServantData[] UnloadDeadDeckActorsAndFreeEntry(bool isEnemy) { }

	// RVA: 0x12192FC Offset: 0x12192FC VA: 0x12192FC
	private BattleServantData[] UnloadMoveToSubMemberDeckActors(bool isEnemy) { }

	// RVA: 0x1219764 Offset: 0x1219764 VA: 0x1219764
	private void PreloadAndEntryServant(int deckIndex, BattleServantData subdata, int repopOrder) { }

	// RVA: 0x1219808 Offset: 0x1219808 VA: 0x1219808
	private BattleLogicTask[] loadImmediateEntryMember() { }

	// RVA: 0x12198F4 Offset: 0x12198F4 VA: 0x12198F4
	public void releaseServantAfterDead(int index, BattleServantData deadSvtData) { }

	// RVA: 0x12199C8 Offset: 0x12199C8 VA: 0x12199C8
	public void replaceMember(BattleActionData.ReplaceMember replaceData, Action endCallBack) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD6C0 Offset: 0xCCD6C0 VA: 0xCCD6C0
	// RVA: 0x12199F4 Offset: 0x12199F4 VA: 0x12199F4
	private IEnumerator colReplaceMember(BattleActionData.ReplaceMember replaceData, Action endCallBack) { }

	// RVA: 0x1219AA0 Offset: 0x1219AA0 VA: 0x1219AA0
	public void startEntryMember(string endproc, bool isTactical = False) { }

	// RVA: 0x1219ACC Offset: 0x1219ACC VA: 0x1219ACC
	private BattleLogicTask[] startEntryMemberLocal(string endproc, bool isTactical = False) { }

	// RVA: 0x121A5B0 Offset: 0x121A5B0 VA: 0x121A5B0
	public void startRecoverPT(bool isTactical = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD6D0 Offset: 0xCCD6D0 VA: 0xCCD6D0
	// RVA: 0x121A620 Offset: 0x121A620 VA: 0x121A620
	private IEnumerator coroutineContinueMember(string endproc, bool isTactical) { }

	// RVA: 0x121A6D4 Offset: 0x121A6D4 VA: 0x121A6D4
	public void DropItemCollection() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD6E0 Offset: 0xCCD6E0 VA: 0xCCD6E0
	// RVA: 0x121A778 Offset: 0x121A778 VA: 0x121A778
	private IEnumerator DropItemCollectionCoroutine() { }

	// RVA: 0x121A7F0 Offset: 0x121A7F0 VA: 0x121A7F0
	public void playRetire() { }

	// RVA: 0x121AD90 Offset: 0x121AD90 VA: 0x121AD90
	public void procRetire() { }

	// RVA: 0x121B840 Offset: 0x121B840 VA: 0x121B840
	public void procWin() { }

	// RVA: 0x121B958 Offset: 0x121B958 VA: 0x121B958
	public void procLosePerformance() { }

	// RVA: 0x121B9BC Offset: 0x121B9BC VA: 0x121B9BC
	public void procLose() { }

	// RVA: 0x121B9EC Offset: 0x121B9EC VA: 0x121B9EC
	public void procEndBattle() { }

	// RVA: 0x121BA7C Offset: 0x121BA7C VA: 0x121BA7C
	public void StartResultRequest(string endEvent) { }

	// RVA: 0x121ADE8 Offset: 0x121ADE8 VA: 0x121ADE8
	private void connectBattleResult() { }

	// RVA: 0x121BB54 Offset: 0x121BB54 VA: 0x121BB54
	private void callbackRequest(string result) { }

	// RVA: 0x121BC10 Offset: 0x121BC10 VA: 0x121BC10
	public void connectResultErrorDialog() { }

	// RVA: 0x121BD5C Offset: 0x121BD5C VA: 0x121BD5C
	public void requestResultErrorDialog(bool flg) { }

	// RVA: 0x121BDE8 Offset: 0x121BDE8 VA: 0x121BDE8
	public void responseResultBattle() { }

	// RVA: 0x121C090 Offset: 0x121C090 VA: 0x121C090
	public void StartShowResult(string endEvent) { }

	// RVA: 0x121C1EC Offset: 0x121C1EC VA: 0x121C1EC
	private void ngContinueBattleLoseInfomation(string endEvent) { }

	// RVA: 0x121C310 Offset: 0x121C310 VA: 0x121C310
	public void OpenBattleLoseDlg(bool isContinueable, bool isSelf, NotificationDialog.ClickDelegate callback, bool isFromContinue = False) { }

	// RVA: 0x121C798 Offset: 0x121C798 VA: 0x121C798
	public void setTimeAcceleration(bool skip = False) { }

	// RVA: 0x121C97C Offset: 0x121C97C VA: 0x121C97C
	public void resetTimeAcceleration(bool skip = False) { }

	// RVA: 0x121C9C8 Offset: 0x121C9C8 VA: 0x121C9C8
	public void SetTimeAccelerationDifferent(bool skip = False) { }

	// RVA: 0x121CA44 Offset: 0x121CA44 VA: 0x121CA44
	public void ForceResetTimeAcceleration() { }

	// RVA: 0x121CA50 Offset: 0x121CA50 VA: 0x121CA50
	public void SetTimeAccelerationCheckDelayReset(bool skip = False) { }

	// RVA: 0x121CADC Offset: 0x121CADC VA: 0x121CADC
	private void DelayForceResetTimeForSkip() { }

	// RVA: 0x121CB68 Offset: 0x121CB68 VA: 0x121CB68
	public void SetTimeAccelerationFix() { }

	// RVA: 0x121CCD8 Offset: 0x121CCD8 VA: 0x121CCD8
	public void resetTimeFixAcceleration() { }

	// RVA: 0x121CCE4 Offset: 0x121CCE4 VA: 0x121CCE4
	public bool IsTimeAccelerationFirst() { }

	// RVA: 0x121CD08 Offset: 0x121CD08 VA: 0x121CD08
	public void SetTimeAccelerationFirst() { }

	// RVA: 0x121CD3C Offset: 0x121CD3C VA: 0x121CD3C
	public void resetTimeFirstAcceleration() { }

	// RVA: 0x121CD48 Offset: 0x121CD48 VA: 0x121CD48
	public void SavePartActiontTimeAcceleration() { }

	// RVA: 0x121CD90 Offset: 0x121CD90 VA: 0x121CD90
	public void ResetPartActiontTimeAcceleration() { }

	// RVA: 0x121CD9C Offset: 0x121CD9C VA: 0x121CD9C
	public bool isTimeAcceleration() { }

	// RVA: 0x121CDE4 Offset: 0x121CDE4 VA: 0x121CDE4
	public void initCommandBattle(string endproc) { }

	// RVA: 0x121CF78 Offset: 0x121CF78 VA: 0x121CF78
	public void InitBuffProgress() { }

	// RVA: 0x121D08C Offset: 0x121D08C VA: 0x121D08C
	public void actBattleTask() { }

	// RVA: 0x121A00C Offset: 0x121A00C VA: 0x121A00C
	public void actOneBattleTask(BattleLogicTask[] tasklist) { }

	// RVA: 0x121D520 Offset: 0x121D520 VA: 0x121D520
	public void endActionData() { }

	// RVA: 0x121D5F0 Offset: 0x121D5F0 VA: 0x121D5F0
	public void AddBattleLogicTask(BattleLogicTask addTask) { }

	// RVA: 0x121D674 Offset: 0x121D674 VA: 0x121D674
	public void addBattleLogicTask(BattleLogicTask[] tasklist) { }

	// RVA: 0x121D0D0 Offset: 0x121D0D0 VA: 0x121D0D0
	public void checkBattleTask() { }

	// RVA: 0x121D738 Offset: 0x121D738 VA: 0x121D738
	public BattleLogic.LOGICTYPE GetLogicType() { }

	// RVA: 0x121D784 Offset: 0x121D784 VA: 0x121D784
	public BattleLogicTask[] GetTaskArrayByType(BattleLogic.LOGICTYPE type) { }

	// RVA: 0x121D30C Offset: 0x121D30C VA: 0x121D30C
	public void playTaskBattle() { }

	// RVA: 0x121D864 Offset: 0x121D864 VA: 0x121D864
	private bool checkUsableTD(BattleLogicTask task) { }

	// RVA: 0x121D910 Offset: 0x121D910 VA: 0x121D910
	private BattleLogicTask createCommandTask(BattleLogicTask task) { }

	// RVA: 0x121DA48 Offset: 0x121DA48 VA: 0x121DA48
	public bool checkRelationTask(BattleLogicTask task) { }

	// RVA: 0x121E160 Offset: 0x121E160 VA: 0x121E160
	public BattleLogicTask[] taskReaction(BattleLogicTask task) { }

	// RVA: 0x121EB04 Offset: 0x121EB04 VA: 0x121EB04
	public BattleLogicTask[] taskEnemyEndWait(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121EC14 Offset: 0x121EC14 VA: 0x121EC14
	public BattleLogicTask[] taskCommandWait(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121E0D8 Offset: 0x121E0D8 VA: 0x121E0D8
	public BattleActionData createSystem(BattleLogicTask task) { }

	// RVA: 0x121ED24 Offset: 0x121ED24 VA: 0x121ED24
	public BattleActionData createCamera(BattleLogicTask task) { }

	// RVA: 0x121EDD0 Offset: 0x121EDD0 VA: 0x121EDD0
	public BattleLogicTask[] taskLastActorBackStep(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121EEBC Offset: 0x121EEBC VA: 0x121EEBC
	public BattleActionData createLastActorBackStep(BattleLogicTask task) { }

	// RVA: 0x121EF64 Offset: 0x121EF64 VA: 0x121EF64
	public void addBackStepActionData(int actorId, float waitTime) { }

	// RVA: 0x121F054 Offset: 0x121F054 VA: 0x121F054
	public BattleActionData createEnemyCutIn(BattleLogicTask task) { }

	// RVA: 0x121F12C Offset: 0x121F12C VA: 0x121F12C
	public BattleActionData createLoadImmediateEntryServant(BattleLogicTask task) { }

	// RVA: 0x121F19C Offset: 0x121F19C VA: 0x121F19C
	public BattleActionData CreateFieldPlayMotion(BattleLogicTask task) { }

	// RVA: 0x121F290 Offset: 0x121F290 VA: 0x121F290
	public BattleActionData breakOnBattle(BattleLogicTask task) { }

	// RVA: 0x121DFF8 Offset: 0x121DFF8 VA: 0x121DFF8
	public BattleActionData procBattleTask(BattleLogicTask task) { }

	// RVA: 0x121F4B8 Offset: 0x121F4B8 VA: 0x121F4B8
	public BattleLogicTask[] taskGetCriticalPoint(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121F524 Offset: 0x121F524 VA: 0x121F524
	public void turnProgressing(string endproc) { }

	// RVA: 0x121F694 Offset: 0x121F694 VA: 0x121F694
	public BattleLogicTask[] taskStartPlayerTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121F78C Offset: 0x121F78C VA: 0x121F78C
	public BattleLogicTask[] taskStartEnemyTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121F884 Offset: 0x121F884 VA: 0x121F884
	public BattleLogicTask[] taskEndPlayerTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121F9A0 Offset: 0x121F9A0 VA: 0x121F9A0
	public BattleLogicTask[] taskEndEnemyTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121FA8C Offset: 0x121FA8C VA: 0x121FA8C
	public BattleLogicTask[] taskStartTactical(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121FB24 Offset: 0x121FB24 VA: 0x121FB24
	public BattleLogicTask[] checkOverKill(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x121FDC8 Offset: 0x121FDC8 VA: 0x121FDC8
	public BattleLogicTask[] checkImmediateEntry(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1220018 Offset: 0x1220018 VA: 0x1220018
	public BattleLogicTask[] startImmediateEntry(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1220170 Offset: 0x1220170 VA: 0x1220170
	public BattleLogicTask[] afterImmediateEntry(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1220270 Offset: 0x1220270 VA: 0x1220270
	public BattleLogicTask[] taskPlayerAttackTerm(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1220320 Offset: 0x1220320 VA: 0x1220320
	public BattleLogicTask[] taskEnemyAttackTerm(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x12203D0 Offset: 0x12203D0 VA: 0x12203D0
	public void finishActionBattle(string endproc) { }

	// RVA: 0x122055C Offset: 0x122055C VA: 0x122055C
	public void checkEndBattle(string endproc, bool isEndOfCurrentTurn) { }

	// RVA: 0x1220BB8 Offset: 0x1220BB8 VA: 0x1220BB8
	private bool IsBattleFinishByTurnExpiration(bool isEndOfCurrentTurn) { }

	// RVA: 0x1220CC0 Offset: 0x1220CC0 VA: 0x1220CC0
	public void CheckRemainBattleEndWave() { }

	// RVA: 0x122091C Offset: 0x122091C VA: 0x122091C
	private BattleData.WinResult getForceEndWinReason() { }

	// RVA: 0x12209C4 Offset: 0x12209C4 VA: 0x12209C4
	private void sendWinBattleEvent(BattleData.WinResult winResult) { }

	// RVA: 0x121A884 Offset: 0x121A884 VA: 0x121A884
	private void sendLoseRetireClearEvent() { }

	// RVA: 0x1220D70 Offset: 0x1220D70 VA: 0x1220D70
	public void forceDropItem() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD6F0 Offset: 0xCCD6F0 VA: 0xCCD6F0
	// RVA: 0x1220B24 Offset: 0x1220B24 VA: 0x1220B24
	public IEnumerator dropItemCoroutine(Action callback) { }

	// RVA: 0x1220A48 Offset: 0x1220A48 VA: 0x1220A48
	public bool CheckEnemyDropItemAll() { }

	// RVA: 0x1220E18 Offset: 0x1220E18 VA: 0x1220E18
	private bool CheckEnemyDropItem(GameObject actorObj, out BattleActorControl actor) { }

	// RVA: 0x1220FE0 Offset: 0x1220FE0 VA: 0x1220FE0
	public void EnemyDropItem() { }

	// RVA: 0x12210D4 Offset: 0x12210D4 VA: 0x12210D4
	public void checkNextBattle(string endproc) { }

	// RVA: 0x12211AC Offset: 0x12211AC VA: 0x12211AC
	public void startContinue(bool isProgress) { }

	// RVA: 0x1221254 Offset: 0x1221254 VA: 0x1221254
	public void drawCommand() { }

	// RVA: 0x1221ACC Offset: 0x1221ACC VA: 0x1221ACC
	public void setDrawCard() { }

	// RVA: 0x1221B4C Offset: 0x1221B4C VA: 0x1221B4C
	public void CalcDownCritical() { }

	// RVA: 0x12220B4 Offset: 0x12220B4 VA: 0x12220B4
	public void CalcCritical(bool isRefresh = True) { }

	// RVA: 0x122289C Offset: 0x122289C VA: 0x122289C
	public void startCommand(string endproc) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD700 Offset: 0xCCD700 VA: 0xCCD700
	// RVA: 0x122292C Offset: 0x122292C VA: 0x122292C
	public IEnumerator startCommandIE(string endproc) { }

	// RVA: 0x12229C0 Offset: 0x12229C0 VA: 0x12229C0
	public void resetCriticalPoint() { }

	// RVA: 0x12229C4 Offset: 0x12229C4 VA: 0x12229C4
	public void endSelectCommand() { }

	// RVA: 0x1222A68 Offset: 0x1222A68 VA: 0x1222A68
	public void checkCombo() { }

	// RVA: 0x122335C Offset: 0x122335C VA: 0x122335C
	public void procComboAct() { }

	// RVA: 0x1223660 Offset: 0x1223660 VA: 0x1223660
	public void initNexBaseData(bool flg) { }

	// RVA: 0x1223874 Offset: 0x1223874 VA: 0x1223874
	public void initNextTurnData() { }

	// RVA: 0x12238D4 Offset: 0x12238D4 VA: 0x12238D4
	public void initNextWaveData() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD710 Offset: 0xCCD710 VA: 0xCCD710
	// RVA: 0x1223978 Offset: 0x1223978 VA: 0x1223978
	public IEnumerator waitWaveStep(BattleLogicTask[] taskList, BattleData.PROGRESS progress) { }

	// RVA: 0x1223A24 Offset: 0x1223A24 VA: 0x1223A24
	public void checkFieldAIStartTurn() { }

	// RVA: 0x1223B14 Offset: 0x1223B14 VA: 0x1223B14
	public void checkFieldAIStartWave() { }

	// RVA: 0x1223C04 Offset: 0x1223C04 VA: 0x1223C04
	public void checkBoostItem() { }

	// RVA: 0x1223E54 Offset: 0x1223E54 VA: 0x1223E54
	public void CheckBoostSkill() { }

	// RVA: 0x1224218 Offset: 0x1224218 VA: 0x1224218
	public void checkQuestBehavior() { }

	// RVA: 0x1224324 Offset: 0x1224324 VA: 0x1224324
	public void checkGimmick() { }

	// RVA: 0x1224430 Offset: 0x1224430 VA: 0x1224430
	public void checkWaveBuff() { }

	// RVA: 0x1224834 Offset: 0x1224834 VA: 0x1224834
	public void checkFirstEntry() { }

	// RVA: 0x1224CA4 Offset: 0x1224CA4 VA: 0x1224CA4
	public void checkEnemyAiWave() { }

	// RVA: 0x1224ECC Offset: 0x1224ECC VA: 0x1224ECC
	public void startWaveAction() { }

	// RVA: 0x1224F4C Offset: 0x1224F4C VA: 0x1224F4C
	public void endStartWaveAction() { }

	// RVA: 0x1224F8C Offset: 0x1224F8C VA: 0x1224F8C
	public void selectTactical(string endproc) { }

	// RVA: 0x1225260 Offset: 0x1225260 VA: 0x1225260
	public void endSelectSkillFaze() { }

	// RVA: 0x1225418 Offset: 0x1225418 VA: 0x1225418
	public int setTargetIndex(int index) { }

	// RVA: 0x1225450 Offset: 0x1225450 VA: 0x1225450
	public int getTargetId() { }

	// RVA: 0x1225480 Offset: 0x1225480 VA: 0x1225480
	public int getTargetIndex(int index) { }

	// RVA: 0x1225528 Offset: 0x1225528 VA: 0x1225528
	public bool isTimingUseSkill() { }

	// RVA: 0x1225668 Offset: 0x1225668 VA: 0x1225668
	public void wantUseSkill(BattleSkillInfoData skillInfo, int pttarget, int subtarget = -1) { }

	// RVA: 0x1225754 Offset: 0x1225754 VA: 0x1225754
	public void checkSkillTarget() { }

	// RVA: 0x122583C Offset: 0x122583C VA: 0x122583C
	public void useSkill() { }

	// RVA: 0x1225ACC Offset: 0x1225ACC VA: 0x1225ACC
	public void checkStarDirection() { }

	// RVA: 0x1225ED4 Offset: 0x1225ED4 VA: 0x1225ED4
	public void endSkill() { }

	// RVA: 0x1226348 Offset: 0x1226348 VA: 0x1226348
	private void EndRequestBattleUseItem(string result) { }

	// RVA: 0x1226620 Offset: 0x1226620 VA: 0x1226620
	public void requestBattleUseItemErrorDialog(bool flg) { }

	// RVA: 0x1226700 Offset: 0x1226700 VA: 0x1226700
	public void useCommandSpell(int commandSkillId, int ptTargetId) { }

	// RVA: 0x122679C Offset: 0x122679C VA: 0x122679C
	public void actCommandSpell() { }

	// RVA: 0x12267E0 Offset: 0x12267E0 VA: 0x12267E0
	private void startCommandSpellEffect() { }

	// RVA: 0x1226978 Offset: 0x1226978 VA: 0x1226978
	protected void endLoadCommandSPell(AssetData data) { }

	// RVA: 0x1226D9C Offset: 0x1226D9C VA: 0x1226D9C
	public void connectCommandSpell() { }

	// RVA: 0x1227174 Offset: 0x1227174 VA: 0x1227174
	private void callbackContinueCommandSpell(string ret) { }

	// RVA: 0x12271C0 Offset: 0x12271C0 VA: 0x12271C0
	public void callBackCommandSpell(string ret) { }

	// RVA: 0x12272FC Offset: 0x12272FC VA: 0x12272FC
	public void openConnectErrorDialog() { }

	// RVA: 0x1227448 Offset: 0x1227448 VA: 0x1227448
	public void requestErrorDialog(bool flg) { }

	// RVA: 0x12274D4 Offset: 0x12274D4 VA: 0x12274D4
	public void endCommandSpell() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD720 Offset: 0xCCD720 VA: 0xCCD720
	// RVA: 0x1227500 Offset: 0x1227500 VA: 0x1227500
	private IEnumerator endCommandSpellCoroutine() { }

	// RVA: 0x1227570 Offset: 0x1227570 VA: 0x1227570
	public void StartEnemyCommandSpellEffect() { }

	// RVA: 0x1227644 Offset: 0x1227644 VA: 0x1227644
	protected void endLoadEnemyCommandSpell(AssetData aData) { }

	// RVA: 0x12268B4 Offset: 0x12268B4 VA: 0x12268B4
	protected string GetCommandSpellAssetName(int id) { }

	// RVA: 0x1226CD8 Offset: 0x1226CD8 VA: 0x1226CD8
	protected string GetCommandSpellPrefabName(int id) { }

	// RVA: 0x1227908 Offset: 0x1227908 VA: 0x1227908
	public void actPtPassiveSkill() { }

	// RVA: 0x1227F2C Offset: 0x1227F2C VA: 0x1227F2C
	public void actEnemyPtPassiveSkill(int actUniqueId = 0, bool isShift = False, bool isDataload = False) { }

	// RVA: 0x122841C Offset: 0x122841C VA: 0x122841C
	public void actEnemyPassiveSkill(int uniqueId) { }

	// RVA: 0x1228690 Offset: 0x1228690 VA: 0x1228690
	public void actClassPassiveSkill(int uniqueId) { }

	// RVA: 0x1222DAC Offset: 0x1222DAC VA: 0x1222DAC
	public BattleComboData checkCommandCombo(int[] svtid, int[] typeid, bool[] isTreasureDvc, bool withSealedCard) { }

	// RVA: 0x1228964 Offset: 0x1228964 VA: 0x1228964
	public bool isNoble(BattleLogic.DamageType inType) { }

	// RVA: 0x1228970 Offset: 0x1228970 VA: 0x1228970
	public BattleActionData.DamageData getDamagelist(BattleServantData actor, BattleServantData target, BattleCommandData command) { }

	// RVA: 0x122A26C Offset: 0x122A26C VA: 0x122A26C
	public int getPerlist(int[] list, int index) { }

	// RVA: 0x1228A48 Offset: 0x1228A48 VA: 0x1228A48
	public BattleActionData.DamageData getDamagelist(BattleServantData actor, BattleServantData target, BattleCommandData command, BattleLogic.DamageType nobleType, int funcIndex, int[] perlist, int[] svtIndv, int[] buffIndv, int[] rarityList, bool IsIncludeIgnoreIndividuality = False, bool isSafe = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x122A868 Offset: 0x122A868 VA: 0x122A868
	public BattleActionData.DamageData getFunctionDamagelist(BattleServantData actor, BattleServantData target, int per, int funcIndex, BattleActionData action, bool isSafe = False) { }

	// RVA: 0x122AA3C Offset: 0x122AA3C VA: 0x122AA3C
	public BattleActionData.DamageData getFunctionNpDamagelist(BattleServantData actor, BattleServantData target, int[] perlist, int funcIndex, BattleLogic.DamageType type, BattleActionData action, int[] svtIndv, int[] buffIndv, int[] rarityList, bool IsIncludeIgnoreIndividuality = False, bool isIgnoreIndivUnreleaseable = False) { }

	// RVA: 0x122A9C0 Offset: 0x122A9C0 VA: 0x122A9C0
	public bool IsSafeCounterAttack(BattleServantData target) { }

	// RVA: 0x122A4BC Offset: 0x122A4BC VA: 0x122A4BC
	public int getAttackNp(BattleServantData atkSvt, BattleServantData defSvt, BattleCommandData command, bool critical, bool isNoble) { }

	// RVA: 0x122A5F4 Offset: 0x122A5F4 VA: 0x122A5F4
	public int getDefenseNp(BattleServantData atkSvt, BattleServantData defSvt, BattleCommandData command) { }

	// RVA: 0x122A6FC Offset: 0x122A6FC VA: 0x122A6FC
	public int getAttackStar(BattleServantData atkSvt, BattleServantData defSvt, BattleCommandData command, bool critical) { }

	// RVA: 0x122A2D0 Offset: 0x122A2D0 VA: 0x122A2D0
	private float getClassMagnification(BattleCommandData command, BattleServantData selfSvt, BattleServantData opSvt, bool isAct, out BattleLogic.ClassRelationBuffShowState atkClassRelationBuffShowState, out BattleLogic.ClassRelationBuffShowState defClassRelationBuffShowState) { }

	// RVA: 0x122ABB4 Offset: 0x122ABB4 VA: 0x122ABB4
	public float getClassMagnification(BattleCommandData command, BattleServantData selfSvt, BattleServantData opSvt, bool isAct) { }

	// RVA: 0x122ABE0 Offset: 0x122ABE0 VA: 0x122ABE0
	public void checkUsedBuff() { }

	// RVA: 0x122AC94 Offset: 0x122AC94 VA: 0x122AC94
	public void checkUsedGutsBuff(int targetId) { }

	// RVA: 0x122ACF8 Offset: 0x122ACF8 VA: 0x122ACF8
	public void resetReducedHpAll() { }

	// RVA: 0x122AD9C Offset: 0x122AD9C VA: 0x122AD9C
	public void updateResultServant() { }

	// RVA: 0x122AE40 Offset: 0x122AE40 VA: 0x122AE40
	public void updateConditionsBuffAll() { }

	// RVA: 0x122AFF0 Offset: 0x122AFF0 VA: 0x122AFF0
	public bool setDamageSideEffect(BattleActionData mainAction, int attackId, int targetId, BattleCommandData command) { }

	// RVA: 0x121FC98 Offset: 0x121FC98 VA: 0x121FC98
	public void resetOverKill() { }

	// RVA: 0x121FEF0 Offset: 0x121FEF0 VA: 0x121FEF0
	public bool existOverKillTarget() { }

	// RVA: 0x122B34C Offset: 0x122B34C VA: 0x122B34C
	public bool checkSelectFunctionTarget(int[] funclist, bool isCheckCommandType = False) { }

	// RVA: 0x122B47C Offset: 0x122B47C VA: 0x122B47C
	public bool checkSelectTargetFunction(int[] funclist, out bool mainFlg, out bool subFlg) { }

	// RVA: 0x122B5D8 Offset: 0x122B5D8 VA: 0x122B5D8
	public bool checkEnemyTargetFunction(int[] funclist, DataVals[] dataValsArray) { }

	// RVA: 0x122B790 Offset: 0x122B790 VA: 0x122B790
	public bool checkPtTargetFunction(int[] funclist) { }

	// RVA: 0x122B8A8 Offset: 0x122B8A8 VA: 0x122B8A8
	public bool checkFunctionTargetsAvailable(int[] funclist, out bool isCheckHate, int actorUniqueId) { }

	// RVA: 0x121C8F4 Offset: 0x121C8F4 VA: 0x121C8F4
	public bool isTutorial() { }

	// RVA: 0x121C924 Offset: 0x121C924 VA: 0x121C924
	public int getTutorialId() { }

	// RVA: 0x122BBD0 Offset: 0x122BBD0 VA: 0x122BBD0
	public int getWave() { }

	// RVA: 0x121C950 Offset: 0x121C950 VA: 0x121C950
	public int getTurn() { }

	// RVA: 0x122BBFC Offset: 0x122BBFC VA: 0x122BBFC
	public bool isTutorialMasterStatus() { }

	// RVA: 0x12214C8 Offset: 0x12214C8 VA: 0x12214C8
	public BattleCommandData[] getTutorialCommandCards() { }

	// RVA: 0x122BCD8 Offset: 0x122BCD8 VA: 0x122BCD8
	public BattleCommandData getCommandData(BattleServantData svtData, BattleCommand.TYPE type) { }

	// RVA: 0x121C6A0 Offset: 0x121C6A0 VA: 0x121C6A0
	public string raidBossName() { }

	// RVA: 0x122BEC8 Offset: 0x122BEC8 VA: 0x122BEC8
	private Vector2 FSTuArrow(BattleLogic.TuStates tuState) { }

	// RVA: 0x122BFF8 Offset: 0x122BFF8 VA: 0x122BFF8
	private Rect FSTuSquare(BattleLogic.TuStates tuState) { }

	// RVA: 0x122C18C Offset: 0x122C18C VA: 0x122C18C
	public void checkTurnStart() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD730 Offset: 0xCCD730 VA: 0xCCD730
	// RVA: 0x122D18C Offset: 0x122D18C VA: 0x122D18C
	private IEnumerator coroutineStartLimitTurnTutorial() { }

	// RVA: 0x122D1FC Offset: 0x122D1FC VA: 0x122D1FC
	public void callbackTutorialAttack02() { }

	// RVA: 0x122D2D8 Offset: 0x122D2D8 VA: 0x122D2D8
	public void callBackNoEntity(bool flg) { }

	// RVA: 0x122D33C Offset: 0x122D33C VA: 0x122D33C
	public void checkSelectEnemyClick(int index) { }

	// RVA: 0x122D480 Offset: 0x122D480 VA: 0x122D480
	public void callbackTutorialSelectEnemyNext() { }

	// RVA: 0x122D5A0 Offset: 0x122D5A0 VA: 0x122D5A0
	public void callbackResumeLimitTurnEffect() { }

	// RVA: 0x122D70C Offset: 0x122D70C VA: 0x122D70C
	public void callbackEventTutorialBase() { }

	// RVA: 0x122D77C Offset: 0x122D77C VA: 0x122D77C
	public void initQuest(string endproc) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD740 Offset: 0xCCD740 VA: 0xCCD740
	// RVA: 0x122D9AC Offset: 0x122D9AC VA: 0x122D9AC
	private IEnumerator coroutineInitQuest(string endproc) { }

	// RVA: 0x122DA40 Offset: 0x122DA40 VA: 0x122DA40
	public void loadSaveBattle() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCD750 Offset: 0xCCD750 VA: 0xCCD750
	// RVA: 0x122DA6C Offset: 0x122DA6C VA: 0x122DA6C
	private IEnumerator coroutineLoadQuest() { }

	// RVA: 0x122DADC Offset: 0x122DADC VA: 0x122DADC
