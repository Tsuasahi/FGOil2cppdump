// Namespace: 
public class SkillLvEntity : DataEntityBase<string> // TypeDefIndex: 7294
{
	// Fields
	public int skillId; // 0x10
	public int lv; // 0x14
	public int chargeTurn; // 0x18
	public int priority; // 0x1C
	public int[] funcId; // 0x20
	public string[] svals; // 0x28
	public int skillDetailId; // 0x30
	public Dictionary<string, object> script; // 0x38
	private const string DIC_NUMBER_KEY_0 = "0";
	private const string DIC_NUMBER_KEY_1 = "1";
	private const string DIC_NUMBER_KEY_2 = "2";
	private const string DIC_NUMBER_KEY_3 = "3";
	private const string DIC_KEY_EVENT_ID = "EventId";
	private const string DIC_KEY_TARGET = "Target";
	private const string DIC_KEY_APPLY_SUPPORT_SVT = "ApplySupportSvt";
	[CompilerGeneratedAttribute] // RVA: 0xCC1DC4 Offset: 0xCC1DC4 VA: 0xCC1DC4
	private static Func<long, Nullable<int>> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCC1DD4 Offset: 0xCC1DD4 VA: 0xCC1DD4
	private static Func<List<object>, List<int>> <>f__mg$cache0; // 0x8

	// Methods

	// RVA: 0x1CE2394 Offset: 0x1CE2394 VA: 0x1CE2394
	public void .ctor() { }

	// RVA: 0x1CE23E4 Offset: 0x1CE23E4 VA: 0x1CE23E4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1CE23F4 Offset: 0x1CE23F4 VA: 0x1CE23F4
	public static string CreatePK(int skillId, int lv) { }

	// RVA: 0x1CE2404 Offset: 0x1CE2404 VA: 0x1CE2404
	public Dictionary<string, int>[] getValues() { }

	// RVA: 0x1CE2850 Offset: 0x1CE2850 VA: 0x1CE2850
	public DataVals[] getDataValsList() { }

	// RVA: 0x1CE2A5C Offset: 0x1CE2A5C VA: 0x1CE2A5C
	public string getDetail(bool isShort = False) { }

	// RVA: 0x1CE2AFC Offset: 0x1CE2AFC VA: 0x1CE2AFC
	public string getDetail(int lv, bool isShort = False) { }

	// RVA: 0x1CE2C5C Offset: 0x1CE2C5C VA: 0x1CE2C5C
	public string getFuncDetail() { }

	// RVA: 0x1CE2DB8 Offset: 0x1CE2DB8 VA: 0x1CE2DB8
	public int getFriendPointUpVal() { }

	// RVA: 0x1CE2F70 Offset: 0x1CE2F70 VA: 0x1CE2F70
	public FuncList.TYPE getFriendPointUpType() { }

	// RVA: 0x1CE30B0 Offset: 0x1CE30B0 VA: 0x1CE30B0
	public bool GetBonusUpVal(ref EventUpValInfo eventUpVallInfo, QuestPhaseEntity questPhaseEntity) { }

	// RVA: 0x1CE35BC Offset: 0x1CE35BC VA: 0x1CE35BC
	public bool getEventUpVal(int wearersSvtId, int wearesLimitCount, int wearesDispLimitCount, EventUpValSetupInfo setupInfo, int eventId, bool isFuncGroup = True, bool isOwner = True) { }

	// RVA: 0x1CE3DF8 Offset: 0x1CE3DF8 VA: 0x1CE3DF8
	public bool getEventUpVal(ref EventUpValInfo eventUpVallInfo, bool isFuncGroup = True, bool isOwner = True, bool isSupport = False, bool isEquipOnly = False) { }

	// RVA: 0x1CE5460 Offset: 0x1CE5460 VA: 0x1CE5460
	public Dictionary<string, object> getCondition() { }

	// RVA: 0x1CE5468 Offset: 0x1CE5468 VA: 0x1CE5468
	public string getVoiceAssetName() { }

	// RVA: 0x1CE5564 Offset: 0x1CE5564 VA: 0x1CE5564
	public string getPlayVoiceNo() { }

	// RVA: 0x1CE5660 Offset: 0x1CE5660 VA: 0x1CE5660
	public bool isPlayVoiceWait() { }

	// RVA: 0x1CE56CC Offset: 0x1CE56CC VA: 0x1CE56CC
	public bool IsVoiceVolume() { }

	// RVA: 0x1CE5738 Offset: 0x1CE5738 VA: 0x1CE5738
	public float getVoiceVolume() { }

	// RVA: 0x1CE53BC Offset: 0x1CE53BC VA: 0x1CE53BC
	private bool IsSupportExcluded(Dictionary<string, int> vals) { }

	// RVA: 0x1CE57FC Offset: 0x1CE57FC VA: 0x1CE57FC
	public int getMovePositionUp() { }

	// RVA: 0x1CE58A8 Offset: 0x1CE58A8 VA: 0x1CE58A8
	public int getMovePositionDown() { }

	// RVA: 0x1CE5954 Offset: 0x1CE5954 VA: 0x1CE5954
	public bool IsRevivalUp() { }

	// RVA: 0x1CE59C0 Offset: 0x1CE59C0 VA: 0x1CE59C0
	public bool IsRevivalUnder() { }

	// RVA: 0x1CE5A2C Offset: 0x1CE5A2C VA: 0x1CE5A2C
	public bool IsAress() { }

	// RVA: 0x1CE5A98 Offset: 0x1CE5A98 VA: 0x1CE5A98
	public bool IsEnableTarget() { }

	// RVA: 0x1CE5B04 Offset: 0x1CE5B04 VA: 0x1CE5B04
	public int[] GetAddIndiv() { }

	// RVA: 0x1CE5CDC Offset: 0x1CE5CDC VA: 0x1CE5CDC
	public Nullable<int> GetFuncIndexForSplitFuncSequence() { }

	// RVA: 0x1CE5DB0 Offset: 0x1CE5DB0 VA: 0x1CE5DB0
	public List<int> GetOptionalBattleEffectIdList() { }

	// RVA: 0x1CE5E78 Offset: 0x1CE5E78 VA: 0x1CE5E78
	public bool IsIgnoreWhiteFade() { }

	// RVA: 0x1CE5ECC Offset: 0x1CE5ECC VA: 0x1CE5ECC
	public int[] GetActRarity() { }

	// RVA: 0x1CE5F1C Offset: 0x1CE5F1C VA: 0x1CE5F1C
	private int[] GetIntArrayFromScript(string key) { }

	// RVA: 0x1CE61A0 Offset: 0x1CE61A0 VA: 0x1CE61A0
	public List<SkillLvEntity.SvtChangeBgm> GetSvtChangeBgm() { }

	// RVA: 0x1CE65D0 Offset: 0x1CE65D0 VA: 0x1CE65D0
	public int GetScriptIntParam(string key, int defaultValue = -1) { }

	// RVA: 0x1CE668C Offset: 0x1CE668C VA: 0x1CE668C
	public bool IsNoTargetSkipSkill() { }

	// RVA: 0x1CE66EC Offset: 0x1CE66EC VA: 0x1CE66EC
	public int GetAddInvokeSkillId() { }

	// RVA: 0x1CE6740 Offset: 0x1CE6740 VA: 0x1CE6740
	public int GetAddInvokeSkillLv() { }

	// RVA: 0x1CE6794 Offset: 0x1CE6794 VA: 0x1CE6794
	public int GetAddInvokeSkillActorType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD37F7C Offset: 0xD37F7C VA: 0xD37F7C
	// RVA: 0x1CE67E8 Offset: 0x1CE67E8 VA: 0x1CE67E8
	private static Nullable<int> <GetFuncIndexForSplitFuncSequence>m__0(long x) { }
}

// Namespace: 
public class SkillLvEntity.SvtChangeBgm // TypeDefIndex: 7295
{
	// Fields
	public int svtIndv; // 0x10
	public int questId; // 0x14
	public int questPhase; // 0x18
	public int beforeClearBgmId; // 0x1C
	public int afterClearBgmId; // 0x20

	// Methods

	// RVA: 0x1CE6444 Offset: 0x1CE6444 VA: 0x1CE6444
	public void .ctor(Dictionary<string, object> obj) { }
}

// Namespace: 
public class SkillLvMaster : DataMasterBase<SkillLvMaster, SkillLvEntity, string> // TypeDefIndex: 7296
{
	// Methods

	// RVA: 0x1CE6850 Offset: 0x1CE6850 VA: 0x1CE6850
	public void .ctor() { }

	// RVA: 0x1CE68A4 Offset: 0x1CE68A4 VA: 0x1CE68A4
	public SkillLvEntity GetEntity(int skillId, int lv) { }

	// RVA: 0x1CE6918 Offset: 0x1CE6918 VA: 0x1CE6918
	public bool TryGetEntity(out SkillLvEntity entity, int skillId, int lv) { }

	// RVA: 0x1CE699C Offset: 0x1CE699C VA: 0x1CE699C
	public SkillLvEntity getEntityFromId(int skillId, int lv) { }

	// RVA: 0x1CE6AF0 Offset: 0x1CE6AF0 VA: 0x1CE6AF0
	public SkillLvEntity GetAddInvokeSkillLvEntity(SkillLvEntity skillLvEnt) { }
}

// Namespace: 
public enum SkillLvMaster.AddInvokeSkillActorType // TypeDefIndex: 7297
{
	// Fields
	public int value__; // 0x0
	public const SkillLvMaster.AddInvokeSkillActorType FIELD = 1;
}

// Namespace: 
public class SkillMaster : DataMasterBase<SkillMaster, SkillEntity, int> // TypeDefIndex: 7298
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1DE4 Offset: 0xCC1DE4 VA: 0xCC1DE4
	private static Comparison<SkillAddEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1CE6B5C Offset: 0x1CE6B5C VA: 0x1CE6B5C
	public void .ctor() { }

	// RVA: 0x1CE6BB0 Offset: 0x1CE6BB0 VA: 0x1CE6BB0 Slot: 6
	public override bool preProcess() { }

	// RVA: 0x1CE6BC8 Offset: 0x1CE6BC8 VA: 0x1CE6BC8
	private void LinkToSkillAddEntity() { }

	// RVA: 0x1CE7130 Offset: 0x1CE7130 VA: 0x1CE7130
	public bool IsSkippable(int skillId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37F8C Offset: 0xD37F8C VA: 0xD37F8C
	// RVA: 0x1CE71AC Offset: 0x1CE71AC VA: 0x1CE71AC
	private static int <LinkToSkillAddEntity>m__0(SkillAddEntity x, SkillAddEntity y) { }
}

// Namespace: 
public class SpotAddEntity : DataEntityBase<string> // TypeDefIndex: 7299
{
	// Fields
	public int spotId; // 0x10
	public int priority; // 0x14
	public int overrideType; // 0x18
	public int targetId; // 0x1C
	public int condType; // 0x20
	public int condTargetId; // 0x24
	public int condNum; // 0x28

	// Methods

	// RVA: 0x195C400 Offset: 0x195C400 VA: 0x195C400
	public void .ctor() { }

	// RVA: 0x195C450 Offset: 0x195C450 VA: 0x195C450 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x195C464 Offset: 0x195C464 VA: 0x195C464
	public static string CreatePK(int spotId, int priority, int overrideType) { }

	// RVA: 0x195C478 Offset: 0x195C478 VA: 0x195C478
	public CondType.Kind GetCondType() { }
}

// Namespace: 
public enum SpotAddEntity.SpotOverwriteType // TypeDefIndex: 7300
{
	// Fields
	public int value__; // 0x0
	public const SpotAddEntity.SpotOverwriteType NONE = 0;
	public const SpotAddEntity.SpotOverwriteType FLAG = 1;
	public const SpotAddEntity.SpotOverwriteType PATH_POINT_RATIO = 2;
	public const SpotAddEntity.SpotOverwriteType PATH_POINT_RATIO_LIMIT = 3;
	public const SpotAddEntity.SpotOverwriteType NAME_PANEL_OFFSET_X = 4;
	public const SpotAddEntity.SpotOverwriteType NAME_PANEL_OFFSET_Y = 5;
}

// Namespace: 
public class SpotAddMaster : DataMasterBase<SpotAddMaster, SpotAddEntity, string> // TypeDefIndex: 7301
{
	// Methods

	// RVA: 0x195C480 Offset: 0x195C480 VA: 0x195C480
	public void .ctor() { }

	// RVA: 0x195C4D4 Offset: 0x195C4D4 VA: 0x195C4D4
	public SpotAddEntity GetEntity(int spotId, int priority, int overrideType) { }

	// RVA: 0x195C558 Offset: 0x195C558 VA: 0x195C558
	public bool TryGetEntity(out SpotAddEntity entity, int spotId, int priority, int overrideType) { }

	// RVA: 0x195C5E4 Offset: 0x195C5E4 VA: 0x195C5E4
	public int GetPrioredID(SpotAddEntity.SpotOverwriteType type, int spotId, int defVal) { }

	// RVA: 0x195C618 Offset: 0x195C618 VA: 0x195C618
	public bool HasPrioredData(SpotAddEntity.SpotOverwriteType type, int spotId, out int data) { }

	// RVA: 0x195C840 Offset: 0x195C840 VA: 0x195C840
	public void OverwriteNamePanelOffset(int spotId, ref int ofsX, ref int ofsY) { }
}

// Namespace: 
public class SpotEntity : DataEntityBase<int> // TypeDefIndex: 7302
{
	// Fields
	public int id; // 0x10
	public int warId; // 0x14
	public int mapId; // 0x18
	public string name; // 0x20
	public int imageId; // 0x28
	public int x; // 0x2C
	public int y; // 0x30
	public int imageOfsX; // 0x34
	public int imageOfsY; // 0x38
	public int nameOfsX; // 0x3C
	public int nameOfsY; // 0x40
	public int questOfsX; // 0x44
	public int questOfsY; // 0x48
	public int nextOfsX; // 0x4C
	public int nextOfsY; // 0x50
	public int dispCondType1; // 0x54
	public int dispTargetId1; // 0x58
	public int dispTargetValue1; // 0x5C
	public int dispCondType2; // 0x60
	public int dispTargetId2; // 0x64
	public int dispTargetValue2; // 0x68
	public int activeCondType; // 0x6C
	public int activeTargetId; // 0x70
	public int activeTargetValue; // 0x74
	public int[] joinSpotIds; // 0x78
	public int flag; // 0x80
	public string closedMessage; // 0x88

	// Methods

	// RVA: 0x195DBB4 Offset: 0x195DBB4 VA: 0x195DBB4
	public void .ctor() { }

	// RVA: 0x195DC04 Offset: 0x195DC04 VA: 0x195DC04
	public void .ctor(SpotEntity cSrc) { }

	// RVA: 0x195DE90 Offset: 0x195DE90 VA: 0x195DE90
	public int getSpotId() { }

	// RVA: 0x195DE98 Offset: 0x195DE98 VA: 0x195DE98
	public int getMapId() { }

	// RVA: 0x195DEA0 Offset: 0x195DEA0 VA: 0x195DEA0
	public int getDispCondType1() { }

	// RVA: 0x195DEA8 Offset: 0x195DEA8 VA: 0x195DEA8
	public int getDispTargetId1() { }

	// RVA: 0x195DEB0 Offset: 0x195DEB0 VA: 0x195DEB0
	public int getDispTargetValue1() { }

	// RVA: 0x195DEB8 Offset: 0x195DEB8 VA: 0x195DEB8
	public int getDispCondType2() { }

	// RVA: 0x195DEC0 Offset: 0x195DEC0 VA: 0x195DEC0
	public int getDispTargetId2() { }

	// RVA: 0x195DEC8 Offset: 0x195DEC8 VA: 0x195DEC8
	public int getDispTargetValue2() { }

	// RVA: 0x195DED0 Offset: 0x195DED0 VA: 0x195DED0
	public int getActiveCondType() { }

	// RVA: 0x195DED8 Offset: 0x195DED8 VA: 0x195DED8
	public int getActiveTargetId() { }

	// RVA: 0x195DEE0 Offset: 0x195DEE0 VA: 0x195DEE0
	public int getActiveTargetValue() { }

	// RVA: 0x195DEE8 Offset: 0x195DEE8 VA: 0x195DEE8 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x195DEF0 Offset: 0x195DEF0 VA: 0x195DEF0
	public bool HasFlag(SpotEntity.Flag flag) { }

	// RVA: 0x195DFB8 Offset: 0x195DFB8 VA: 0x195DFB8
	public bool isInJoinSpot(int spotId) { }

	// RVA: 0x195E064 Offset: 0x195E064 VA: 0x195E064
	public int GetPrioredImgId() { }

	// RVA: 0x195E45C Offset: 0x195E45C VA: 0x195E45C
	public bool IsHiddenInFolder() { }
}

// Namespace: 
public enum SpotEntity.enSpotCondType // TypeDefIndex: 7303
{
	// Fields
	public int value__; // 0x0
	public const SpotEntity.enSpotCondType NONE = 1;
	public const SpotEntity.enSpotCondType QUEST_CLEAR = 2;
	public const SpotEntity.enSpotCondType NOT_QUEST_CLEAR = 3;
	public const SpotEntity.enSpotCondType INVALID = 4;
	public const SpotEntity.enSpotCondType MISSION_ACHIEVE = 5;
	public const SpotEntity.enSpotCondType QUEST_RELEASED = 6;
	public const SpotEntity.enSpotCondType NOT_QUEST_GROUP_CLEAR = 7;
	public const SpotEntity.enSpotCondType QUEST_GROUP_CLEAR = 8;
	public const SpotEntity.enSpotCondType ITEM_GET = 9;
	public const SpotEntity.enSpotCondType QUEST_CLEAR_RAW = 10;
	public const SpotEntity.enSpotCondType QUEST_GROUP_CLEAR_RAW = 11;
	public const SpotEntity.enSpotCondType EVENT_GROUP_POINT_RATIO_IN_TERM = 12;
	public const SpotEntity.enSpotCondType EVENT_RACE_SCRIPT_PLAYED = 13;
	public const SpotEntity.enSpotCondType QUEST_CLEAR_PHASE = 14;
	public const SpotEntity.enSpotCondType NOT_QUEST_CLEAR_PHASE = 15;
	public const SpotEntity.enSpotCondType NOT_MISSION_ACHIEVE = 16;
	public const SpotEntity.enSpotCondType QUEST_AVAILABLE = 17;
	public const SpotEntity.enSpotCondType EVENT_GROUP_POINT = 18;
	public const SpotEntity.enSpotCondType EVENT_GROUP_POINT_BELOW = 19;
	public const SpotEntity.enSpotCondType EVENT_TOTAL_POINT = 20;
	public const SpotEntity.enSpotCondType EVENT_TOTAL_POINT_BELOW = 21;
	public const SpotEntity.enSpotCondType EVENT_VALUE = 22;
	public const SpotEntity.enSpotCondType EVENT_VALUE_BELOW = 23;
	public const SpotEntity.enSpotCondType EVENT_FLAG = 24;
	public const SpotEntity.enSpotCondType EVENT_STATUS = 25;
	public const SpotEntity.enSpotCondType NOT_EVENT_STATUS = 26;
	public const SpotEntity.enSpotCondType MISSION_CLEAR = 27;
	public const SpotEntity.enSpotCondType NOT_MISSION_CLEAR = 28;
	public const SpotEntity.enSpotCondType MISSION_CLEAR_ONLY = 29;
	public const SpotEntity.enSpotCondType MULTIPLE_DATE = 30;
	public const SpotEntity.enSpotCondType COMMON_RELEASE = 31;
}

// Namespace: 
public enum SpotEntity.FlagKind // TypeDefIndex: 7304
{
	// Fields
	public int value__; // 0x0
	public const SpotEntity.FlagKind NONE = 0;
	public const SpotEntity.FlagKind NOT_DISPLAY = 1;
	public const SpotEntity.FlagKind MOVE_SPOT = 2;
	public const SpotEntity.FlagKind HIDE_NAME = 3;
	public const SpotEntity.FlagKind INACTIVE_DISPLAY_NAME = 4;
	public const SpotEntity.FlagKind SORTED_BY_RELEASE_QUEST = 5;
	public const SpotEntity.FlagKind FOLDER_SPOT_HIDDEN = 6;
}

// Namespace: 
public enum SpotEntity.Flag // TypeDefIndex: 7305
{
	// Fields
	public int value__; // 0x0
	public const SpotEntity.Flag NONE = 1;
	public const SpotEntity.Flag NOT_DISPLAY = 2;
	public const SpotEntity.Flag MOVE_SPOT = 4;
	public const SpotEntity.Flag HIDE_NAME = 8;
	public const SpotEntity.Flag INACTIVE_DISPLAY_NAME = 16;
	public const SpotEntity.Flag SORTED_BY_RELEASE_QUEST = 32;
	public const SpotEntity.Flag FOLDER_SPOT_HIDDEN = 64;
}

// Namespace: 
public class SpotImageEntity : DataEntityBase<string> // TypeDefIndex: 7306
{
	// Fields
	public int spotId; // 0x10
	public int priority; // 0x14
	public int imageId; // 0x18
	public int dispCondType; // 0x1C
	public int dispTargetId; // 0x20
	public int dispTargetValue; // 0x24

	// Methods

	// RVA: 0x195E464 Offset: 0x195E464 VA: 0x195E464
	public void .ctor() { }

	// RVA: 0x195E4B4 Offset: 0x195E4B4 VA: 0x195E4B4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x195E4C4 Offset: 0x195E4C4 VA: 0x195E4C4
	public static string CreatePK(int spotId, int priority) { }
}

// Namespace: 
public class SpotImageMaster : DataMasterBase<SpotImageMaster, SpotImageEntity, string> // TypeDefIndex: 7307
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCC1DF4 Offset: 0xCC1DF4 VA: 0xCC1DF4
	private static Comparison<SpotImageEntity> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x195E4D4 Offset: 0x195E4D4 VA: 0x195E4D4
	public void .ctor() { }

	// RVA: 0x195E528 Offset: 0x195E528 VA: 0x195E528
	public SpotImageEntity GetEntity(int spotId, int priority) { }

	// RVA: 0x195E59C Offset: 0x195E59C VA: 0x195E59C
	public bool TryGetEntity(out SpotImageEntity entity, int spotId, int priority) { }

	// RVA: 0x195E24C Offset: 0x195E24C VA: 0x195E24C
	public SpotImageEntity[] GetImageList(int spot_id) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37F9C Offset: 0xD37F9C VA: 0xD37F9C
	// RVA: 0x195E620 Offset: 0x195E620 VA: 0x195E620
	private static int <GetImageList>m__0(SpotImageEntity a, SpotImageEntity b) { }
}

// Namespace: 
public class SpotMaster : DataMasterBase<SpotMaster, SpotEntity, int> // TypeDefIndex: 7308
{
	// Methods

	// RVA: 0x195FA4C Offset: 0x195FA4C VA: 0x195FA4C
	public void .ctor() { }

	// RVA: 0x195FAA0 Offset: 0x195FAA0 VA: 0x195FAA0
	public SpotEntity[] getList(int Map_id) { }
}

// Namespace: 
public class SpotPathEntity : DataEntityBase<int> // TypeDefIndex: 7309
{
	// Fields
	public int spotId; // 0x10
	public int pathId; // 0x14
	public int valueType; // 0x18
	public int targetId; // 0x1C
	public int targetValue; // 0x20
	public long distance; // 0x28
	public Dictionary<string, object> script; // 0x30

	// Methods

	// RVA: 0x195FC10 Offset: 0x195FC10 VA: 0x195FC10
	public void .ctor() { }

	// RVA: 0x195FC60 Offset: 0x195FC60 VA: 0x195FC60 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x195FC68 Offset: 0x195FC68 VA: 0x195FC68
	public SpotPathEntity.ValueType GetValueType() { }

	// RVA: 0x195FC70 Offset: 0x195FC70 VA: 0x195FC70
	public object getScriptObj(string key) { }

	// RVA: 0x195FCF0 Offset: 0x195FCF0 VA: 0x195FCF0
	public int getScriptIntParam(string key, int defVal = -1) { }

	// RVA: 0x195FD68 Offset: 0x195FD68 VA: 0x195FD68
	public bool IsStopRaidDeadTime() { }

	// RVA: 0x195FDC8 Offset: 0x195FDC8 VA: 0x195FDC8
	public int GetMapGimmickId() { }

	// RVA: 0x195FE1C Offset: 0x195FE1C VA: 0x195FE1C
	public int GetMapGimmickEffectId() { }
}

// Namespace: 
public enum SpotPathEntity.ValueType // TypeDefIndex: 7310
{
	// Fields
	public int value__; // 0x0
	public const SpotPathEntity.ValueType NONE = 0;
	public const SpotPathEntity.ValueType EVENT_RACE = 1;
	public const SpotPathEntity.ValueType EVENT_TIME_LIMIT_RAID = 2;
}

// Namespace: 
public class SpotPathMaster : DataMasterBase<SpotPathMaster, SpotPathEntity, int> // TypeDefIndex: 7311
{
	// Methods

	// RVA: 0x195FE70 Offset: 0x195FE70 VA: 0x195FE70
	public void .ctor() { }

	// RVA: 0x195FEC4 Offset: 0x195FEC4 VA: 0x195FEC4
	public static int CreateTargetId(int eventId, int termId) { }

	// RVA: 0x195FED0 Offset: 0x195FED0 VA: 0x195FED0
	public SpotPathEntity GetSpotPathEntity(int eventId, int termId, int groupId) { }

	// RVA: 0x1960024 Offset: 0x1960024 VA: 0x1960024
	public int GetRaceSpotId(int eventId, int termId, int groupId) { }
}

// Namespace: 
public class SpotRoadEntity : DataEntityBase<int> // TypeDefIndex: 7312
{
	// Fields
	public int id; // 0x10
	public int mapId; // 0x14
	public int srcSpotId; // 0x18
	public int dstSpotId; // 0x1C
	public int type; // 0x20
	public int imageId; // 0x24
	public int dispCondType; // 0x28
	public int dispTargetId; // 0x2C
	public int dispTargetValue; // 0x30
	public int dispCondType2; // 0x34
	public int dispTargetId2; // 0x38
	public int dispTargetValue2; // 0x3C
	public int activeCondType; // 0x40
	public int activeTargetId; // 0x44
	public int activeTargetValue; // 0x48

	// Methods

	// RVA: 0x1960040 Offset: 0x1960040 VA: 0x1960040
	public void .ctor() { }

	// RVA: 0x1960090 Offset: 0x1960090 VA: 0x1960090
	public void .ctor(SpotRoadEntity cSrc) { }

	// RVA: 0x196023C Offset: 0x196023C VA: 0x196023C
	public int getSpotRoadId() { }

	// RVA: 0x1960244 Offset: 0x1960244 VA: 0x1960244
	public int getMapId() { }

	// RVA: 0x196024C Offset: 0x196024C VA: 0x196024C
	public int getSrcSpotId() { }

	// RVA: 0x1960254 Offset: 0x1960254 VA: 0x1960254
	public int getDstSpotId() { }

	// RVA: 0x196025C Offset: 0x196025C VA: 0x196025C
	public int getType() { }

	// RVA: 0x1960264 Offset: 0x1960264 VA: 0x1960264
	public int getImageId() { }

	// RVA: 0x196026C Offset: 0x196026C VA: 0x196026C
	public int getDispCondType() { }

	// RVA: 0x1960274 Offset: 0x1960274 VA: 0x1960274
	public int getDispTargetId() { }

	// RVA: 0x196027C Offset: 0x196027C VA: 0x196027C
	public int getDispTargetValue() { }

	// RVA: 0x1960284 Offset: 0x1960284 VA: 0x1960284
	public int getDispCondType2() { }

	// RVA: 0x196028C Offset: 0x196028C VA: 0x196028C
	public int getDispTargetId2() { }

	// RVA: 0x1960294 Offset: 0x1960294 VA: 0x1960294
	public int getDispTargetValue2() { }

	// RVA: 0x196029C Offset: 0x196029C VA: 0x196029C
	public int getActiveCondType() { }

	// RVA: 0x19602A4 Offset: 0x19602A4 VA: 0x19602A4
	public int getActiveTargetId() { }

	// RVA: 0x19602AC Offset: 0x19602AC VA: 0x19602AC
	public int getActiveTargetValue() { }

	// RVA: 0x19602B4 Offset: 0x19602B4 VA: 0x19602B4 Slot: 5
	protected sealed override int CreatePrimaryKey() { }
}

// Namespace: 
public class SpotRoadMaster : DataMasterBase<SpotRoadMaster, SpotRoadEntity, int> // TypeDefIndex: 7313
{
	// Methods

	// RVA: 0x19602BC Offset: 0x19602BC VA: 0x19602BC
	public void .ctor() { }

	// RVA: 0x1960310 Offset: 0x1960310 VA: 0x1960310
	public SpotRoadEntity[] getList(int map_id) { }
}

// Namespace: 
public class StageEntity : DataEntityBase<string> // TypeDefIndex: 7314
{
	// Fields
	public static readonly int DEFAULT_ENEMY_ACTION_COUNT; // 0x0
	public int questId; // 0x10
	public int questPhase; // 0x14
	public string name; // 0x18
	public int wave; // 0x20
	public long npcDeckId; // 0x28
	public int bgmId; // 0x30
	public int startEffectId; // 0x34
	public int enemyInfo; // 0x38
	public Dictionary<string, object> script; // 0x40
	[CompilerGeneratedAttribute] // RVA: 0xCC1E04 Offset: 0xCC1E04 VA: 0xCC1E04
	private static Converter<object, int> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCC1E14 Offset: 0xCC1E14 VA: 0xCC1E14
	private static Converter<object, int> <>f__am$cache1; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCC1E24 Offset: 0xCC1E24 VA: 0xCC1E24
	private static Converter<object, int> <>f__am$cache2; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCC1E34 Offset: 0xCC1E34 VA: 0xCC1E34
	private static Converter<object, string> <>f__am$cache3; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCC1E44 Offset: 0xCC1E44 VA: 0xCC1E44
	private static Func<List<object>, SubBgmPlayArgs[]> <>f__mg$cache0; // 0x28

	// Methods

	// RVA: 0x1963AA4 Offset: 0x1963AA4 VA: 0x1963AA4
	public void .ctor() { }

	// RVA: 0x1963AF4 Offset: 0x1963AF4 VA: 0x1963AF4
	public void .ctor(StageEntity cSrc) { }

	// RVA: 0x1963BDC Offset: 0x1963BDC VA: 0x1963BDC
	public int getQuestId() { }

	// RVA: 0x1963BE4 Offset: 0x1963BE4 VA: 0x1963BE4
	public int getPhase() { }

	// RVA: 0x1963BEC Offset: 0x1963BEC VA: 0x1963BEC
	public int getWave() { }

	// RVA: 0x1963BF4 Offset: 0x1963BF4 VA: 0x1963BF4
	public bool isNotDisplayRemain() { }

	// RVA: 0x1963C04 Offset: 0x1963C04 VA: 0x1963C04 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1963C84 Offset: 0x1963C84 VA: 0x1963C84
	public static string CreatePK(int questId, int questPhase, int wave) { }

	// RVA: 0x1963C98 Offset: 0x1963C98 VA: 0x1963C98
	public bool checkScript(string key) { }

	// RVA: 0x1963D0C Offset: 0x1963D0C VA: 0x1963D0C
	public int getScript(string key, int defVal = 0) { }

	// RVA: 0x1963DAC Offset: 0x1963DAC VA: 0x1963DAC
	public float getScriptFloat(string key, float defVal = 0) { }

	// RVA: 0x1963E58 Offset: 0x1963E58 VA: 0x1963E58
	public int[] getScriptIntArrayParam(string key, int[] defVal) { }

	// RVA: 0x1964060 Offset: 0x1964060 VA: 0x1964060
	public int getLimitTurn() { }

	// RVA: 0x19640B4 Offset: 0x19640B4 VA: 0x19640B4
	public int getTurnEffectType() { }

	// RVA: 0x1964108 Offset: 0x1964108 VA: 0x1964108
	public bool getTurnElapsedEndBattleFlag() { }

	// RVA: 0x1964168 Offset: 0x1964168 VA: 0x1964168
	public int getLimitAct() { }

	// RVA: 0x19641BC Offset: 0x19641BC VA: 0x19641BC
	public float getCustomFOV() { }

	// RVA: 0x1964210 Offset: 0x1964210 VA: 0x1964210
	public bool checkCustomFOV() { }

	// RVA: 0x1964260 Offset: 0x1964260 VA: 0x1964260
	public int getShowTurnState() { }

	// RVA: 0x19642B4 Offset: 0x19642B4 VA: 0x19642B4
	public int getEnemyMasterBattleId() { }

	// RVA: 0x1964308 Offset: 0x1964308 VA: 0x1964308
	public int getChangeBgId() { }

	// RVA: 0x196435C Offset: 0x196435C VA: 0x196435C
	public int getChangeBgType() { }

	// RVA: 0x19643B0 Offset: 0x19643B0 VA: 0x19643B0
	public object[] getFieldAis() { }

	// RVA: 0x19644D8 Offset: 0x19644D8 VA: 0x19644D8
	public int[] getTurnEffect(int limitTurn) { }

	// RVA: 0x1964710 Offset: 0x1964710 VA: 0x1964710
	public int[] GetTurnEffect(int limitTurn, int[] turnlist) { }

	// RVA: 0x1964820 Offset: 0x1964820 VA: 0x1964820
	public int[] getNoEntryIds() { }

	// RVA: 0x1964A44 Offset: 0x1964A44 VA: 0x1964A44
	public int getEnemyActCount() { }

	// RVA: 0x1964AD0 Offset: 0x1964AD0 VA: 0x1964AD0
	public int getStartBattleAssetId() { }

	// RVA: 0x1964B24 Offset: 0x1964B24 VA: 0x1964B24
	public bool disableSystemFadeStartBattle() { }

	// RVA: 0x1964B84 Offset: 0x1964B84 VA: 0x1964B84
	public int[] GetMultiEffectIds() { }

	// RVA: 0x1964BD8 Offset: 0x1964BD8 VA: 0x1964BD8
	public int GetFadeType() { }

	// RVA: 0x1964C2C Offset: 0x1964C2C VA: 0x1964C2C
	public int GetEffectSvtId() { }

	// RVA: 0x1964C80 Offset: 0x1964C80 VA: 0x1964C80
	public int[] GetCutInSvtIds(bool isEnemy) { }

	// RVA: 0x1964CF0 Offset: 0x1964CF0 VA: 0x1964CF0
	public int GetEffectBgmId() { }

	// RVA: 0x1964D44 Offset: 0x1964D44 VA: 0x1964D44
	public int GetStartBgmOffFlag() { }

	// RVA: 0x1964D98 Offset: 0x1964D98 VA: 0x1964D98
	public int[] GetBossIdAndChangeBgmId() { }

	// RVA: 0x1964E00 Offset: 0x1964E00 VA: 0x1964E00
	public object[] GetAiActTypeAttackCommandCard() { }

	// RVA: 0x1964EE0 Offset: 0x1964EE0 VA: 0x1964EE0
	public int GetAiActTypeAttackCommandCardType(BattleServantData enemyServantData) { }

	// RVA: 0x1965098 Offset: 0x1965098 VA: 0x1965098
	public bool IsDisableFieldMotion() { }

	// RVA: 0x19650F8 Offset: 0x19650F8 VA: 0x19650F8
	public int[] GetFieldCallServantId() { }

	// RVA: 0x1965168 Offset: 0x1965168 VA: 0x1965168
	public object GetScriptObject(string key) { }

	// RVA: 0x19651F0 Offset: 0x19651F0 VA: 0x19651F0
	public int GetBattleStartVoiceServantId() { }

	// RVA: 0x1965244 Offset: 0x1965244 VA: 0x1965244
	public int GetBattleStartVoiceServantLimit() { }

	// RVA: 0x1965298 Offset: 0x1965298 VA: 0x1965298
	public string[] GetBattleStartVoiceIdArray() { }

	// RVA: 0x1965424 Offset: 0x1965424 VA: 0x1965424
	public bool IsSpecifiedBattleStartVoice() { }

	// RVA: 0x1965464 Offset: 0x1965464 VA: 0x1965464
	public bool IsSpecifiedBattleStartVoice(out int servantId, out int limit) { }

	// RVA: 0x19654BC Offset: 0x19654BC VA: 0x19654BC
	public int GetEnemyFieldPosCount() { }

	// RVA: 0x1965510 Offset: 0x1965510 VA: 0x1965510
	public bool Is3_6BossBattle() { }

	// RVA: 0x1965570 Offset: 0x1965570 VA: 0x1965570
	public int getBattleMasterImageId() { }

	// RVA: 0x19655C4 Offset: 0x19655C4 VA: 0x19655C4
	public bool IsReleaseUnusedAssetsWhenEntryMember() { }

	// RVA: 0x1965614 Offset: 0x1965614 VA: 0x1965614
	public SubBgmPlayArgs[] GetSubBgmPlayArgsArray(bool defaultEmpty = True) { }

	// RVA: 0x1965748 Offset: 0x1965748 VA: 0x1965748
	public bool IsForceSetNormalEnemyStatusUI() { }

	// RVA: 0x1965798 Offset: 0x1965798 VA: 0x1965798
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD37FAC Offset: 0xD37FAC VA: 0xD37FAC
	// RVA: 0x19657EC Offset: 0x19657EC VA: 0x19657EC
	private static int <getScriptIntArrayParam>m__0(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37FBC Offset: 0xD37FBC VA: 0xD37FBC
	// RVA: 0x1965868 Offset: 0x1965868 VA: 0x1965868
	private static int <getTurnEffect>m__1(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37FCC Offset: 0xD37FCC VA: 0xD37FCC
	// RVA: 0x19658E4 Offset: 0x19658E4 VA: 0x19658E4
	private static int <getNoEntryIds>m__2(object x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD37FDC Offset: 0xD37FDC VA: 0xD37FDC
	// RVA: 0x1965960 Offset: 0x1965960 VA: 0x1965960
	private static string <GetBattleStartVoiceIdArray>m__3(object x) { }
}

// Namespace: 
public enum StageEntity.FadeType // TypeDefIndex: 7315
{
	// Fields
	public int value__; // 0x0
	public const StageEntity.FadeType SlideIn = 0;
	public const StageEntity.FadeType AlphaFadeIn = 1;
	public const StageEntity.FadeType FadeOff = 2;
}

// Namespace: 
public class StageMaster : DataMasterBase<StageMaster, StageEntity, string> // TypeDefIndex: 7316
{
	// Methods

	// RVA: 0x1965990 Offset: 0x1965990 VA: 0x1965990
	public void .ctor() { }

	// RVA: 0x19659E4 Offset: 0x19659E4 VA: 0x19659E4
	public StageEntity GetEntity(int questId, int questPhase, int wave) { }

	// RVA: 0x1965A88 Offset: 0x1965A88 VA: 0x1965A88
	public bool TryGetEntity(out StageEntity entity, int questId, int questPhase, int wave) { }
}

// Namespace: 
public class StatusEffectPosOverwriteEntity : DataEntityBase<string> // TypeDefIndex: 7317
{
	// Fields
	public int statusEffectId; // 0x10
	public int svtId; // 0x14
	public int svtLimitCount; // 0x18
	public string nodeName; // 0x20
	public int offsetX; // 0x28
	public int offsetY; // 0x2C
	public int offsetZ; // 0x30
	public int rotationX; // 0x34
	public int rotationY; // 0x38
	public int rotationZ; // 0x3C
	public int scaleX; // 0x40
	public int scaleY; // 0x44
	public int scaleZ; // 0x48

	// Methods

	// RVA: 0x1D04298 Offset: 0x1D04298 VA: 0x1D04298
	public void .ctor() { }

	// RVA: 0x1D042E8 Offset: 0x1D042E8 VA: 0x1D042E8 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1D042FC Offset: 0x1D042FC VA: 0x1D042FC
	public static string CreatePK(int statusEffectId, int svtId, int svtLimitCount) { }

	// RVA: 0x1D04310 Offset: 0x1D04310 VA: 0x1D04310
	public Vector3 GetOffset(bool isFlip = False) { }

	// RVA: 0x1D04380 Offset: 0x1D04380 VA: 0x1D04380
	public Vector3 GetRotation() { }

	// RVA: 0x1D043DC Offset: 0x1D043DC VA: 0x1D043DC
	public Vector3 GetScale() { }
}

// Namespace: 
public class StatusEffectPosOverwriteMaster : DataMasterBase<StatusEffectPosOverwriteMaster, StatusEffectPosOverwriteEntity, string> // TypeDefIndex: 7318
{
	// Methods

	// RVA: 0x1D04438 Offset: 0x1D04438 VA: 0x1D04438
	public void .ctor() { }

	// RVA: 0x1D0448C Offset: 0x1D0448C VA: 0x1D0448C
	public StatusEffectPosOverwriteEntity GetEntity(int statusEffectId, int svtId, int svtLimitCount) { }

	// RVA: 0x1D04510 Offset: 0x1D04510 VA: 0x1D04510
	public bool TryGetEntity(out StatusEffectPosOverwriteEntity entity, int statusEffectId, int svtId, int svtLimitCount) { }
}

// Namespace: 
public class StoneShopEntity : DataEntityBase<int> // TypeDefIndex: 7319
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string detail; // 0x20
	public int effect; // 0x28
	public int price; // 0x2C
	public int openedAt; // 0x30
	public int closedAt; // 0x34

	// Methods

	// RVA: 0x1D0B6D0 Offset: 0x1D0B6D0 VA: 0x1D0B6D0
	public void .ctor() { }

	// RVA: 0x1D0B720 Offset: 0x1D0B720 VA: 0x1D0B720 Slot: 5
	protected sealed override int CreatePrimaryKey() { }

	// RVA: 0x1D0B728 Offset: 0x1D0B728 VA: 0x1D0B728
	public bool IsEnable(long nowTime = 0) { }

	// RVA: 0x1D0B7C8 Offset: 0x1D0B7C8 VA: 0x1D0B7C8
	public bool IsOpened(long nowTime = 0) { }

	// RVA: 0x1D0B850 Offset: 0x1D0B850 VA: 0x1D0B850
	public bool IsClosed(long nowTime = 0) { }

	// RVA: 0x1D0B8E4 Offset: 0x1D0B8E4 VA: 0x1D0B8E4
	public string GetCountText() { }

	// RVA: 0x1D0B948 Offset: 0x1D0B948 VA: 0x1D0B948
	public IconLabelInfo.IconKind GetPriceUnitIcon() { }

	// RVA: 0x1D0B950 Offset: 0x1D0B950 VA: 0x1D0B950
	public IconLabelInfo.IconKind GetPriceIcon() { }

	// RVA: 0x1D0B958 Offset: 0x1D0B958 VA: 0x1D0B958
	public int GetPrice() { }
}

// Namespace: 
public class StoneShopMaster : DataMasterBase<StoneShopMaster, StoneShopEntity, int> // TypeDefIndex: 7320
{
	// Methods

	// RVA: 0x1D0B960 Offset: 0x1D0B960 VA: 0x1D0B960
	public void .ctor() { }

	// RVA: 0x1D0B9B4 Offset: 0x1D0B9B4 VA: 0x1D0B9B4
	public StoneShopEntity[] GetEnableEntitiyList() { }

	// RVA: 0x1D0BB64 Offset: 0x1D0BB64 VA: 0x1D0BB64
	public StoneShopEntity[] GetEnableEntitiyList(StoneShopEffect.Kind effect) { }
}

// Namespace: 
public class SubEquipEntity : DataEntityBase<int> // TypeDefIndex: 7321
{
	// Fields
	public int id; // 0x10
	public string name; // 0x18
	public string detail; // 0x20
	public int abilityId; // 0x28
	public int abilityLv; // 0x2C
