	// Fields
	protected string ClassName; // 0x60
	protected string MemberName; // 0x68
	protected byte[] Signature; // 0x70

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x106E7B0 Offset: 0x106E7B0 VA: 0x106E7B0
	public void .ctor() { }

	// RVA: 0x106E404 Offset: 0x106E404 VA: 0x106E404
	public void .ctor(string message) { }

	// RVA: 0x106E484 Offset: 0x106E484 VA: 0x106E484
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x106E83C Offset: 0x106E83C VA: 0x106E83C
	public void .ctor(string className, string memberName) { }

	// RVA: 0x106E880 Offset: 0x106E880 VA: 0x106E880 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x106E6F4 Offset: 0x106E6F4 VA: 0x106E6F4 Slot: 6
	public override string get_Message() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36F88 Offset: 0xC36F88 VA: 0xC36F88
[Serializable]
public class MissingMethodException : MissingMemberException // TypeDefIndex: 1015
{
	// Fields
	private const int Result = -2146233069;

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x106E974 Offset: 0x106E974 VA: 0x106E974
	public void .ctor() { }

	// RVA: 0x106E9E4 Offset: 0x106E9E4 VA: 0x106E9E4
	public void .ctor(string message) { }

	// RVA: 0x106EA14 Offset: 0x106EA14 VA: 0x106EA14
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x106EA18 Offset: 0x106EA18 VA: 0x106EA18
	public void .ctor(string className, string methodName) { }

	// RVA: 0x106EA74 Offset: 0x106EA74 VA: 0x106EA74 Slot: 6
	public override string get_Message() { }
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 1016
{
	// Fields
	private object msg; // 0x10
	private IntPtr cb_method; // 0x18
	private object cb_target; // 0x20
	private object state; // 0x28
	private object res; // 0x30
	private object out_args; // 0x38
	private long wait_event; // 0x40

	// Methods

	// RVA: 0x106EB28 Offset: 0x106EB28 VA: 0x106EB28
	public void .ctor() { }
}

// Namespace: System
internal class MonoCustomAttrs // TypeDefIndex: 1017
{
	// Fields
	private static Assembly corlib; // 0x0
	private static readonly Type AttributeUsageType; // 0x8
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x10

	// Methods

	// RVA: 0x106EB2C Offset: 0x106EB2C VA: 0x106EB2C
	private static void .cctor() { }

	// RVA: 0x106EBE0 Offset: 0x106EBE0 VA: 0x106EBE0
	private static bool IsUserCattrProvider(object obj) { }

	// RVA: 0x106EDFC Offset: 0x106EDFC VA: 0x106EDFC
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs) { }

	// RVA: 0x106EE04 Offset: 0x106EE04 VA: 0x106EE04
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x106F090 Offset: 0x106F090 VA: 0x106F090
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x106F270 Offset: 0x106F270 VA: 0x106F270
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x106F41C Offset: 0x106F41C VA: 0x106F41C
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x107013C Offset: 0x107013C VA: 0x107013C
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit) { }

	// RVA: 0x1070308 Offset: 0x1070308 VA: 0x1070308
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj) { }

	// RVA: 0x107030C Offset: 0x107030C VA: 0x107030C
	internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj) { }

	// RVA: 0x10703C8 Offset: 0x10703C8 VA: 0x10703C8
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x107065C Offset: 0x107065C VA: 0x107065C
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType) { }

	// RVA: 0x1070660 Offset: 0x1070660 VA: 0x1070660
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property) { }

	// RVA: 0x106FF0C Offset: 0x106FF0C VA: 0x106FF0C
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj) { }

	// RVA: 0x106FCB0 Offset: 0x106FCB0 VA: 0x106FCB0
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType) { }
}

// Namespace: 
private class MonoCustomAttrs.AttributeInfo // TypeDefIndex: 1018
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x10
	private int _inheritanceLevel; // 0x18

	// Properties
	public AttributeUsageAttribute Usage { get; }
	public int InheritanceLevel { get; }

	// Methods

	// RVA: 0x106FF00 Offset: 0x106FF00 VA: 0x106FF00
	public void .ctor(AttributeUsageAttribute usage, int inheritanceLevel) { }

	// RVA: 0x106FEF0 Offset: 0x106FEF0 VA: 0x106FEF0
	public AttributeUsageAttribute get_Usage() { }

	// RVA: 0x106FEF8 Offset: 0x106FEF8 VA: 0x106FEF8
	public int get_InheritanceLevel() { }
}

// Namespace: System
internal class MonoTouchAOTHelper // TypeDefIndex: 1019
{
	// Fields
	internal static bool FalseFlag; // 0x0

	// Methods

	// RVA: 0x10714B0 Offset: 0x10714B0 VA: 0x10714B0
	private static void .cctor() { }
}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 1020
{
	// Fields
	public string full_name; // 0x10
	public ConstructorInfo default_ctor; // 0x18

	// Methods

	// RVA: 0x1071590 Offset: 0x1071590 VA: 0x1071590
	public void .ctor() { }
}

// Namespace: System
[Serializable]
internal class MonoType : Type, ISerializable // TypeDefIndex: 1021
{
	// Fields
	private MonoTypeInfo type_info; // 0x18

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override MemberTypes MemberType { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }

	// Methods

	// RVA: 0x10714B4 Offset: 0x10714B4 VA: 0x10714B4
	private static TypeAttributes get_attributes(Type type) { }

	// RVA: 0x10714B8 Offset: 0x10714B8 VA: 0x10714B8
	internal ConstructorInfo GetDefaultConstructor() { }

	// RVA: 0x1071594 Offset: 0x1071594 VA: 0x1071594 Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x1071598 Offset: 0x1071598 VA: 0x1071598 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x1071A0C Offset: 0x1071A0C VA: 0x1071A0C
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x1071A10 Offset: 0x1071A10 VA: 0x1071A10 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x1071A18 Offset: 0x1071A18 VA: 0x1071A18
	private EventInfo InternalGetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1071A1C Offset: 0x1071A1C VA: 0x1071A1C Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1071AC0 Offset: 0x1071AC0 VA: 0x1071AC0
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x1071AC4 Offset: 0x1071AC4 VA: 0x1071AC4 Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x1071ACC Offset: 0x1071ACC VA: 0x1071ACC Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x1071AD0 Offset: 0x1071AD0 VA: 0x1071AD0
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x1071AD4 Offset: 0x1071AD4 VA: 0x1071AD4 Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x1071ADC Offset: 0x1071ADC VA: 0x1071ADC Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x1071AE0 Offset: 0x1071AE0 VA: 0x1071AE0
	internal MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type) { }

	// RVA: 0x1071AE8 Offset: 0x1071AE8 VA: 0x1071AE8 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x1071B00 Offset: 0x1071B00 VA: 0x1071B00 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x1072178 Offset: 0x1072178 VA: 0x1072178 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x107217C Offset: 0x107217C VA: 0x107217C
	internal PropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, Type reflected_type) { }

	// RVA: 0x1072184 Offset: 0x1072184 VA: 0x1072184 Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x107219C Offset: 0x107219C VA: 0x107219C Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x107230C Offset: 0x107230C VA: 0x107230C Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x1072374 Offset: 0x1072374 VA: 0x1072374 Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x10723DC Offset: 0x10723DC VA: 0x10723DC Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x10723E0 Offset: 0x10723E0 VA: 0x10723E0 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x10723E4 Offset: 0x10723E4 VA: 0x10723E4 Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x10723E8 Offset: 0x10723E8 VA: 0x10723E8 Slot: 39
	public override bool IsSubclassOf(Type type) { }

	// RVA: 0x1072488 Offset: 0x1072488 VA: 0x1072488 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x1073614 Offset: 0x1073614 VA: 0x1073614 Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x1073618 Offset: 0x1073618 VA: 0x1073618 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x107361C Offset: 0x107361C VA: 0x107361C Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x1073620 Offset: 0x1073620 VA: 0x1073620 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x107362C Offset: 0x107362C VA: 0x107362C
	private string getFullName(bool full_name, bool assembly_qualified) { }

	// RVA: 0x1073638 Offset: 0x1073638 VA: 0x1073638 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x107363C Offset: 0x107363C VA: 0x107363C Slot: 18
	public override string get_FullName() { }

	// RVA: 0x10736DC Offset: 0x10736DC VA: 0x10736DC Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x1073758 Offset: 0x1073758 VA: 0x1073758 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x10737CC Offset: 0x10737CC VA: 0x10737CC Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x1073890 Offset: 0x1073890 VA: 0x1073890 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x10738E0 Offset: 0x10738E0 VA: 0x10738E0 Slot: 8
	public override string get_Name() { }

	// RVA: 0x10738E4 Offset: 0x10738E4 VA: 0x10738E4 Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x10738E8 Offset: 0x10738E8 VA: 0x10738E8 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x10738EC Offset: 0x10738EC VA: 0x10738EC Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x10738F0 Offset: 0x10738F0 VA: 0x10738F0 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x10738FC Offset: 0x10738FC VA: 0x10738FC Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x1073904 Offset: 0x1073904 VA: 0x1073904 Slot: 43
	public override int GetArrayRank() { }

	// RVA: 0x1073908 Offset: 0x1073908 VA: 0x1073908 Slot: 93
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x1073910 Offset: 0x1073910 VA: 0x1073910 Slot: 3
	public override string ToString() { }

	// RVA: 0x107391C Offset: 0x107391C VA: 0x107391C Slot: 84
	public override Type[] GetGenericArguments() { }

	// RVA: 0x1073920 Offset: 0x1073920 VA: 0x1073920 Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x1073A50 Offset: 0x1073A50 VA: 0x1073A50 Slot: 90
	public override bool get_IsGenericParameter() { }

	// RVA: 0x1073A54 Offset: 0x1073A54 VA: 0x1073A54 Slot: 87
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x107199C Offset: 0x107199C VA: 0x107199C
	private MethodBase CheckMethodSecurity(MethodBase mb) { }

	// RVA: 0x1073350 Offset: 0x1073350 VA: 0x1073350
	private void ReorderParamArrayArguments(ref object[] args, MethodBase method) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC36F9C Offset: 0xC36F9C VA: 0xC36F9C
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 1022
{
	// Methods

	// RVA: 0x1074880 Offset: 0x1074880 VA: 0x1074880
	public void .ctor() { }

	// RVA: 0x10748E0 Offset: 0x10748E0 VA: 0x10748E0
	public void .ctor(string message) { }

	// RVA: 0x10748E8 Offset: 0x10748E8 VA: 0x10748E8
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xC36FB0 Offset: 0xC36FB0 VA: 0xC36FB0
[ComVisibleAttribute] // RVA: 0xC36FB0 Offset: 0xC36FB0 VA: 0xC36FB0
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 1023
{
	// Methods

	// RVA: 0x10748F0 Offset: 0x10748F0 VA: 0x10748F0
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37004 Offset: 0xC37004 VA: 0xC37004
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 1024
{
	// Methods

	// RVA: 0x10748F8 Offset: 0x10748F8 VA: 0x10748F8
	public void .ctor() { }

	// RVA: 0x107496C Offset: 0x107496C VA: 0x107496C
	public void .ctor(string message) { }

	// RVA: 0x10749A0 Offset: 0x10749A0 VA: 0x10749A0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37018 Offset: 0xC37018 VA: 0xC37018
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 1025
{
	// Fields
	private const int Result = -2146233067;

	// Methods

	// RVA: 0x10749A8 Offset: 0x10749A8 VA: 0x10749A8
	public void .ctor() { }

	// RVA: 0x1074A1C Offset: 0x1074A1C VA: 0x1074A1C
	public void .ctor(string message) { }

	// RVA: 0x1074A50 Offset: 0x1074A50 VA: 0x1074A50
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC3702C Offset: 0xC3702C VA: 0xC3702C
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 1026
{
	// Fields
	private const int Result = -2147467261;

	// Methods

	// RVA: 0x1074A58 Offset: 0x1074A58 VA: 0x1074A58
	public void .ctor() { }

	// RVA: 0x1074ACC Offset: 0x1074ACC VA: 0x1074ACC
	public void .ctor(string message) { }

	// RVA: 0x1074B00 Offset: 0x1074B00 VA: 0x1074B00
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x1074B34 Offset: 0x1074B34 VA: 0x1074B34
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37040 Offset: 0xC37040 VA: 0xC37040
public static class Nullable // TypeDefIndex: 1027
{
	// Methods

	// RVA: 0x1074B3C Offset: 0x1074B3C VA: 0x1074B3C
	public static Type GetUnderlyingType(Type nullableType) { }
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 1028
{
	// Fields
	private static readonly ulong* MantissaBitsTable; // 0x0
	private static readonly int* TensExponentTable; // 0x8
	private static readonly char* DigitLowerTable; // 0x10
	private static readonly char* DigitUpperTable; // 0x18
	private static readonly long* TenPowersList; // 0x20
	private static readonly int* DecHexDigits; // 0x28
	private Thread _thread; // 0x10
	private NumberFormatInfo _nfi; // 0x18
	private bool _NaN; // 0x20
	private bool _infinity; // 0x21
	private bool _isCustomFormat; // 0x22
	private bool _specifierIsUpper; // 0x23
	private bool _positive; // 0x24
	private char _specifier; // 0x26
	private int _precision; // 0x28
	private int _defPrecision; // 0x2C
	private int _digitsLen; // 0x30
	private int _offset; // 0x34
	private int _decPointPos; // 0x38
	private uint _val1; // 0x3C
	private uint _val2; // 0x40
	private uint _val3; // 0x44
	private uint _val4; // 0x48
	private char[] _cbuf; // 0x50
	private int _ind; // 0x58
	[ThreadStaticAttribute] // RVA: 0xC37904 Offset: 0xC37904 VA: 0xC37904
	private static NumberFormatter threadNumberFormatter; // 0x80000000

	// Properties
	public CultureInfo CurrentCulture { set; }
	private int IntegerDigits { get; }
	private int DecimalDigits { get; }
	private bool IsFloatingSource { get; }
	private bool IsZero { get; }
	private bool IsZeroInteger { get; }

	// Methods

	// RVA: 0x1074C88 Offset: 0x1074C88 VA: 0x1074C88
	public void .ctor(Thread current) { }

	// RVA: 0x1074D8C Offset: 0x1074D8C VA: 0x1074D8C
	private static void .cctor() { }

	// RVA: 0x1074DEC Offset: 0x1074DEC VA: 0x1074DEC
	private static void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits) { }

	// RVA: 0x1074DF0 Offset: 0x1074DF0 VA: 0x1074DF0
	private static long GetTenPowerOf(int i) { }

	// RVA: 0x1074E64 Offset: 0x1074E64 VA: 0x1074E64
	private void InitDecHexDigits(uint value) { }

	// RVA: 0x10750C8 Offset: 0x10750C8 VA: 0x10750C8
	private void InitDecHexDigits(ulong value) { }

	// RVA: 0x10751EC Offset: 0x10751EC VA: 0x10751EC
	private void InitDecHexDigits(uint hi, ulong lo) { }

	// RVA: 0x1074F2C Offset: 0x1074F2C VA: 0x1074F2C
	private static uint FastToDecHex(int val) { }

	// RVA: 0x1075004 Offset: 0x1075004 VA: 0x1075004
	private static uint ToDecHex(int val) { }

	// RVA: 0x10753D4 Offset: 0x10753D4 VA: 0x10753D4
	private static int FastDecHexLen(int val) { }

	// RVA: 0x10753FC Offset: 0x10753FC VA: 0x10753FC
	private static int DecHexLen(uint val) { }

	// RVA: 0x10754C4 Offset: 0x10754C4 VA: 0x10754C4
	private int DecHexLen() { }

	// RVA: 0x10755E8 Offset: 0x10755E8 VA: 0x10755E8
	private static int ScaleOrder(long hi) { }

	// RVA: 0x107567C Offset: 0x107567C VA: 0x107567C
	private int InitialFloatingPrecision() { }

	// RVA: 0x10756D8 Offset: 0x10756D8 VA: 0x10756D8
	private static int ParsePrecision(string format) { }

	// RVA: 0x107577C Offset: 0x107577C VA: 0x107577C
	private void Init(string format) { }

	// RVA: 0x10758B8 Offset: 0x10758B8 VA: 0x10758B8
	private void InitHex(ulong value) { }

	// RVA: 0x1075924 Offset: 0x1075924 VA: 0x1075924
	private void Init(string format, int value, int defPrecision) { }

	// RVA: 0x10759AC Offset: 0x10759AC VA: 0x10759AC
	private void Init(string format, uint value, int defPrecision) { }

	// RVA: 0x1075A2C Offset: 0x1075A2C VA: 0x1075A2C
	private void Init(string format, long value) { }

	// RVA: 0x1075AA8 Offset: 0x1075AA8 VA: 0x1075AA8
	private void Init(string format, ulong value) { }

	// RVA: 0x1075B1C Offset: 0x1075B1C VA: 0x1075B1C
	private void Init(string format, double value, int defPrecision) { }

	// RVA: 0x1075F34 Offset: 0x1075F34 VA: 0x1075F34
	private void Init(string format, Decimal value) { }

	// RVA: 0x1076160 Offset: 0x1076160 VA: 0x1076160
	private void ResetCharBuf(int size) { }

	// RVA: 0x10761E4 Offset: 0x10761E4 VA: 0x10761E4
	private void Resize(int len) { }

	// RVA: 0x1076264 Offset: 0x1076264 VA: 0x1076264
	private void Append(char c) { }

	// RVA: 0x10762FC Offset: 0x10762FC VA: 0x10762FC
	private void Append(char c, int cnt) { }

	// RVA: 0x10763C0 Offset: 0x10763C0 VA: 0x10763C0
	private void Append(string s) { }

	// RVA: 0x10764C4 Offset: 0x10764C4 VA: 0x10764C4
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp) { }

	// RVA: 0x1074D34 Offset: 0x1074D34 VA: 0x1074D34
	public void set_CurrentCulture(CultureInfo value) { }

	// RVA: 0x1076554 Offset: 0x1076554 VA: 0x1076554
	private int get_IntegerDigits() { }

	// RVA: 0x1076564 Offset: 0x1076564 VA: 0x1076564
	private int get_DecimalDigits() { }

	// RVA: 0x1076578 Offset: 0x1076578 VA: 0x1076578
	private bool get_IsFloatingSource() { }

	// RVA: 0x107658C Offset: 0x107658C VA: 0x107658C
	private bool get_IsZero() { }

	// RVA: 0x107659C Offset: 0x107659C VA: 0x107659C
	private bool get_IsZeroInteger() { }

	// RVA: 0x10765BC Offset: 0x10765BC VA: 0x10765BC
	private void RoundPos(int pos) { }

	// RVA: 0x1076734 Offset: 0x1076734 VA: 0x1076734
	private bool RoundDecimal(int decimals) { }

	// RVA: 0x10765C8 Offset: 0x10765C8 VA: 0x10765C8
	private bool RoundBits(int shift) { }

	// RVA: 0x107687C Offset: 0x107687C VA: 0x107687C
	private void RemoveTrailingZeros() { }

	// RVA: 0x1076748 Offset: 0x1076748 VA: 0x1076748
	private void AddOneToDecHex() { }

	// RVA: 0x10768BC Offset: 0x10768BC VA: 0x10768BC
	private static uint AddOneToDecHex(uint val) { }

	// RVA: 0x1075E10 Offset: 0x1075E10 VA: 0x1075E10
	private int CountTrailingZeros() { }

	// RVA: 0x1076968 Offset: 0x1076968 VA: 0x1076968
	private static int CountTrailingZeros(uint val) { }

	// RVA: 0x10769BC Offset: 0x10769BC VA: 0x10769BC
	private static NumberFormatter GetInstance() { }

	// RVA: 0x1076A84 Offset: 0x1076A84 VA: 0x1076A84
	private void Release() { }

	// RVA: 0x1076AF4 Offset: 0x1076AF4 VA: 0x1076AF4
	internal static void SetThreadCurrentCulture(CultureInfo culture) { }

	// RVA: 0x1076BD8 Offset: 0x1076BD8 VA: 0x1076BD8
	public static string NumberToString(string format, sbyte value, IFormatProvider fp) { }

	// RVA: 0x1076EBC Offset: 0x1076EBC VA: 0x1076EBC
	public static string NumberToString(string format, byte value, IFormatProvider fp) { }

	// RVA: 0x1076FAC Offset: 0x1076FAC VA: 0x1076FAC
	public static string NumberToString(string format, ushort value, IFormatProvider fp) { }

	// RVA: 0x107709C Offset: 0x107709C VA: 0x107709C
	public static string NumberToString(string format, short value, IFormatProvider fp) { }

	// RVA: 0x107718C Offset: 0x107718C VA: 0x107718C
	public static string NumberToString(string format, uint value, IFormatProvider fp) { }

	// RVA: 0x107727C Offset: 0x107727C VA: 0x107727C
	public static string NumberToString(string format, int value, IFormatProvider fp) { }

	// RVA: 0x107736C Offset: 0x107736C VA: 0x107736C
	public static string NumberToString(string format, ulong value, IFormatProvider fp) { }

	// RVA: 0x106CDEC Offset: 0x106CDEC VA: 0x106CDEC
	public static string NumberToString(string format, long value, IFormatProvider fp) { }

	// RVA: 0x1077454 Offset: 0x1077454 VA: 0x1077454
	public static string NumberToString(string format, float value, IFormatProvider fp) { }

	// RVA: 0x1077828 Offset: 0x1077828 VA: 0x1077828
	public static string NumberToString(string format, double value, IFormatProvider fp) { }

	// RVA: 0x1077A64 Offset: 0x1077A64 VA: 0x1077A64
	public static string NumberToString(string format, Decimal value, IFormatProvider fp) { }

	// RVA: 0x1077B84 Offset: 0x1077B84 VA: 0x1077B84
	public static string NumberToString(uint value, IFormatProvider fp) { }

	// RVA: 0x1077D74 Offset: 0x1077D74 VA: 0x1077D74
	public static string NumberToString(int value, IFormatProvider fp) { }

	// RVA: 0x1077E78 Offset: 0x1077E78 VA: 0x1077E78
	public static string NumberToString(ulong value, IFormatProvider fp) { }

	// RVA: 0x106CBE8 Offset: 0x106CBE8 VA: 0x106CBE8
	public static string NumberToString(long value, IFormatProvider fp) { }

	// RVA: 0x1077F70 Offset: 0x1077F70 VA: 0x1077F70
	public static string NumberToString(float value, IFormatProvider fp) { }

	// RVA: 0x1078248 Offset: 0x1078248 VA: 0x1078248
	public static string NumberToString(double value, IFormatProvider fp) { }

	// RVA: 0x1077C7C Offset: 0x1077C7C VA: 0x1077C7C
	private string FastIntegerToString(int value, IFormatProvider fp) { }

	// RVA: 0x1076CC8 Offset: 0x1076CC8 VA: 0x1076CC8
	private string IntegerToString(string format, IFormatProvider fp) { }

	// RVA: 0x1077670 Offset: 0x1077670 VA: 0x1077670
	private string NumberToString(string format, NumberFormatInfo nfi) { }

	// RVA: 0x1078604 Offset: 0x1078604 VA: 0x1078604
	public string FormatCurrency(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x1078B3C Offset: 0x1078B3C VA: 0x1078B3C
	private string FormatDecimal(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x1079248 Offset: 0x1079248 VA: 0x1079248
	private string FormatHexadecimal(int precision) { }

	// RVA: 0x1078C68 Offset: 0x1078C68 VA: 0x1078C68
	public string FormatFixedPoint(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x10779AC Offset: 0x10779AC VA: 0x10779AC
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi) { }

	// RVA: 0x10775D8 Offset: 0x10775D8 VA: 0x10775D8
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi) { }

	// RVA: 0x10780D4 Offset: 0x10780D4 VA: 0x10780D4
	private string FormatGeneral(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x1078D88 Offset: 0x1078D88 VA: 0x1078D88
	public string FormatNumber(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x1078FC0 Offset: 0x1078FC0 VA: 0x1078FC0
	public string FormatPercent(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x1078C14 Offset: 0x1078C14 VA: 0x1078C14
	public string FormatExponential(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x107A15C Offset: 0x107A15C VA: 0x107A15C
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits) { }

	// RVA: 0x107939C Offset: 0x107939C VA: 0x107939C
	public string FormatCustom(string format, NumberFormatInfo nfi) { }

	// RVA: 0x107B220 Offset: 0x107B220 VA: 0x107B220
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty) { }

	// RVA: 0x107B124 Offset: 0x107B124 VA: 0x107B124
	private static bool IsZeroOnly(StringBuilder sb) { }

	// RVA: 0x107AF4C Offset: 0x107AF4C VA: 0x107AF4C
	private static void AppendNonNegativeNumber(StringBuilder sb, int v) { }

	// RVA: 0x107B060 Offset: 0x107B060 VA: 0x107B060
	private void AppendIntegerString(int minLength, StringBuilder sb) { }

	// RVA: 0x107A03C Offset: 0x107A03C VA: 0x107A03C
	private void AppendIntegerString(int minLength) { }

	// RVA: 0x107B100 Offset: 0x107B100 VA: 0x107B100
	private void AppendDecimalString(int precision, StringBuilder sb) { }

	// RVA: 0x1079C94 Offset: 0x1079C94 VA: 0x1079C94
	private void AppendDecimalString(int precision) { }

	// RVA: 0x1079A40 Offset: 0x1079A40 VA: 0x1079A40
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator) { }

	// RVA: 0x107A36C Offset: 0x107A36C VA: 0x107A36C
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits) { }

	// RVA: 0x107A274 Offset: 0x107A274 VA: 0x107A274
	private void AppendOneDigit(int start) { }

	// RVA: 0x10783AC Offset: 0x10783AC VA: 0x10783AC
	private void FastAppendDigits(int val, bool force) { }

	// RVA: 0x1079CAC Offset: 0x1079CAC VA: 0x1079CAC
	private void AppendDigits(int start, int end) { }

	// RVA: 0x107BCE4 Offset: 0x107BCE4 VA: 0x107BCE4
	private void AppendDigits(int start, int end, StringBuilder sb) { }

	// RVA: 0x107A254 Offset: 0x107A254 VA: 0x107A254
	private void Multiply10(int count) { }

	// RVA: 0x107AF2C Offset: 0x107AF2C VA: 0x107AF2C
	private void Divide10(int count) { }

	// RVA: 0x107A0A8 Offset: 0x107A0A8 VA: 0x107A0A8
	private NumberFormatter GetClone() { }
}

// Namespace: 
private class NumberFormatter.CustomInfo // TypeDefIndex: 1029
{
	// Fields
	public bool UseGroup; // 0x10
	public int DecimalDigits; // 0x14
	public int DecimalPointPos; // 0x18
	public int DecimalTailSharpDigits; // 0x1C
	public int IntegerDigits; // 0x20
	public int IntegerHeadSharpDigits; // 0x24
	public int IntegerHeadPos; // 0x28
	public bool UseExponent; // 0x2C
	public int ExponentDigits; // 0x30
	public int ExponentTailSharpDigits; // 0x34
	public bool ExponentNegativeSignOnly; // 0x38
	public int DividePlaces; // 0x3C
	public int Percents; // 0x40
	public int Permilles; // 0x44

	// Methods

	// RVA: 0x107BFB8 Offset: 0x107BFB8 VA: 0x107BFB8
	public void .ctor() { }

	// RVA: 0x107A4F0 Offset: 0x107A4F0 VA: 0x107A4F0
	public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length) { }

	// RVA: 0x107A978 Offset: 0x107A978 VA: 0x107A978
	public static NumberFormatter.CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi) { }

	// RVA: 0x107B340 Offset: 0x107B340 VA: 0x107B340
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37054 Offset: 0xC37054 VA: 0xC37054
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 1030
{
	// Fields
	private string obj_name; // 0x60
	private string msg; // 0x68

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x107C054 Offset: 0x107C054 VA: 0x107C054
	public void .ctor(string objectName) { }

	// RVA: 0x107C0EC Offset: 0x107C0EC VA: 0x107C0EC
	public void .ctor(string objectName, string message) { }

	// RVA: 0x107C13C Offset: 0x107C13C VA: 0x107C13C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x107C1D8 Offset: 0x107C1D8 VA: 0x107C1D8 Slot: 6
	public override string get_Message() { }

	// RVA: 0x107C1E0 Offset: 0x107C1E0 VA: 0x107C1E0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37068 Offset: 0xC37068 VA: 0xC37068
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 1031
{
	// Fields
	private PlatformID _platform; // 0x10
	private Version _version; // 0x18
	private string _servicePack; // 0x20

	// Properties
	public PlatformID Platform { get; }
	public Version Version { get; }

	// Methods

	// RVA: 0x107C2F0 Offset: 0x107C2F0 VA: 0x107C2F0
	public void .ctor(PlatformID platform, Version version) { }

	// RVA: 0x107C3D0 Offset: 0x107C3D0 VA: 0x107C3D0
	public PlatformID get_Platform() { }

	// RVA: 0x107C3D8 Offset: 0x107C3D8 VA: 0x107C3D8
	public Version get_Version() { }

	// RVA: 0x107C3E0 Offset: 0x107C3E0 VA: 0x107C3E0 Slot: 4
	public object Clone() { }

	// RVA: 0x107C454 Offset: 0x107C454 VA: 0x107C454 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x107C540 Offset: 0x107C540 VA: 0x107C540 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC3707C Offset: 0xC3707C VA: 0xC3707C
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 1032
{
	// Fields
	private const int Result = -2147024882;

	// Methods

	// RVA: 0x107C944 Offset: 0x107C944 VA: 0x107C944
	public void .ctor() { }

	// RVA: 0x107C9B8 Offset: 0x107C9B8 VA: 0x107C9B8
	public void .ctor(string message) { }

	// RVA: 0x107C9EC Offset: 0x107C9EC VA: 0x107C9EC
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x107CA20 Offset: 0x107CA20 VA: 0x107CA20
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC37090 Offset: 0xC37090 VA: 0xC37090
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 1033
{
	// Fields
	private const int Result = -2146233066;

	// Methods

	// RVA: 0x107CA28 Offset: 0x107CA28 VA: 0x107CA28
	public void .ctor() { }

	// RVA: 0x106B934 Offset: 0x106B934 VA: 0x106B934
	public void .ctor(string message) { }

	// RVA: 0x107CA9C Offset: 0x107CA9C VA: 0x107CA9C
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x107CAD0 Offset: 0x107CAD0 VA: 0x107CAD0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC370A4 Offset: 0xC370A4 VA: 0xC370A4
[Serializable]
public enum PlatformID // TypeDefIndex: 1034
{
	// Fields
	public int value__; // 0x0
	public const PlatformID Win32S = 0;
	public const PlatformID Win32Windows = 1;
	public const PlatformID Win32NT = 2;
	public const PlatformID WinCE = 3;
	public const PlatformID Unix = 4;
	public const PlatformID Xbox = 5;
	public const PlatformID MacOSX = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC370B8 Offset: 0xC370B8 VA: 0xC370B8
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 1035
{
	// Fields
	private const int Result = -2146233031;

	// Methods

	// RVA: 0x107CAE0 Offset: 0x107CAE0 VA: 0x107CAE0
	public void .ctor() { }

	// RVA: 0x107CB6C Offset: 0x107CB6C VA: 0x107CB6C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xC370CC Offset: 0xC370CC VA: 0xC370CC
[Serializable]
public class Random // TypeDefIndex: 1036
{
	// Fields
	private const int MBIG = 2147483647;
	private const int MSEED = 161803398;
	private const int MZ = 0;
	private int inext; // 0x10
	private int inextp; // 0x14
	private int[] SeedArray; // 0x18

	// Methods

	// RVA: 0x107CB74 Offset: 0x107CB74 VA: 0x107CB74
	public void .ctor() { }

	// RVA: 0x107CBA0 Offset: 0x107CBA0 VA: 0x107CBA0
	public void .ctor(int Seed) { }

	// RVA: 0x107CE44 Offset: 0x107CE44 VA: 0x107CE44 Slot: 4
	protected virtual double Sample() { }

	// RVA: 0x107CF58 Offset: 0x107CF58 VA: 0x107CF58 Slot: 5
	public virtual int Next() { }

	// RVA: 0x107CF84 Offset: 0x107CF84 VA: 0x107CF84 Slot: 6
	public virtual int Next(int maxValue) { }

	// RVA: 0x107D048 Offset: 0x107D048 VA: 0x107D048 Slot: 7
