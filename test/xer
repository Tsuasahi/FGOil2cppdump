[ComVisibleAttribute] // RVA: 0xBCAE38 Offset: 0xBCAE38 VA: 0xBCAE38
[Serializable]
public class MissingFieldException : MissingMemberException // TypeDefIndex: 1013
{
	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x21E312C Offset: 0x21E312C VA: 0x21E312C
	public void .ctor() { }

	// RVA: 0x21E31E8 Offset: 0x21E31E8 VA: 0x21E31E8
	public void .ctor(string message) { }

	// RVA: 0x21E3218 Offset: 0x21E3218 VA: 0x21E3218
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21E33D8 Offset: 0x21E33D8 VA: 0x21E33D8 Slot: 6
	public override string get_Message() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAE4C Offset: 0xBCAE4C VA: 0xBCAE4C
[Serializable]
public class MissingMemberException : MemberAccessException // TypeDefIndex: 1014
{
	// Fields
	protected string ClassName; // 0x60
	protected string MemberName; // 0x68
	protected byte[] Signature; // 0x70

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x21E3548 Offset: 0x21E3548 VA: 0x21E3548
	public void .ctor() { }

	// RVA: 0x21E319C Offset: 0x21E319C VA: 0x21E319C
	public void .ctor(string message) { }

	// RVA: 0x21E321C Offset: 0x21E321C VA: 0x21E321C
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21E35D4 Offset: 0x21E35D4 VA: 0x21E35D4
	public void .ctor(string className, string memberName) { }

	// RVA: 0x21E3618 Offset: 0x21E3618 VA: 0x21E3618 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21E348C Offset: 0x21E348C VA: 0x21E348C Slot: 6
	public override string get_Message() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAE60 Offset: 0xBCAE60 VA: 0xBCAE60
[Serializable]
public class MissingMethodException : MissingMemberException // TypeDefIndex: 1015
{
	// Fields
	private const int Result = -2146233069;

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x21E370C Offset: 0x21E370C VA: 0x21E370C
	public void .ctor() { }

	// RVA: 0x21E377C Offset: 0x21E377C VA: 0x21E377C
	public void .ctor(string message) { }

	// RVA: 0x21E37AC Offset: 0x21E37AC VA: 0x21E37AC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21E37B0 Offset: 0x21E37B0 VA: 0x21E37B0
	public void .ctor(string className, string methodName) { }

	// RVA: 0x21E380C Offset: 0x21E380C VA: 0x21E380C Slot: 6
	public override string get_Message() { }
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 1016
{
	// Fields
	private object msg; // 0x10
	private IntPtr cb_method; // 0x18
	private object cb_target; // 0x20
	private object state; // 0x28
	private object res; // 0x30
	private object out_args; // 0x38
	private long wait_event; // 0x40

	// Methods

	// RVA: 0x21E38C0 Offset: 0x21E38C0 VA: 0x21E38C0
	public void .ctor() { }
}

// Namespace: System
internal class MonoCustomAttrs // TypeDefIndex: 1017
{
	// Fields
	private static Assembly corlib; // 0x0
	private static readonly Type AttributeUsageType; // 0x8
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x10

	// Methods

	// RVA: 0x21E38C4 Offset: 0x21E38C4 VA: 0x21E38C4
	private static void .cctor() { }

	// RVA: 0x21E3978 Offset: 0x21E3978 VA: 0x21E3978
	private static bool IsUserCattrProvider(object obj) { }

	// RVA: 0x21E3B94 Offset: 0x21E3B94 VA: 0x21E3B94
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs) { }

	// RVA: 0x21E3B9C Offset: 0x21E3B9C VA: 0x21E3B9C
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x21E3E28 Offset: 0x21E3E28 VA: 0x21E3E28
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType) { }

	// RVA: 0x21E4008 Offset: 0x21E4008 VA: 0x21E4008
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x21E41B4 Offset: 0x21E41B4 VA: 0x21E41B4
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x21E4ED4 Offset: 0x21E4ED4 VA: 0x21E4ED4
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit) { }

	// RVA: 0x21E50A0 Offset: 0x21E50A0 VA: 0x21E50A0
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj) { }

	// RVA: 0x21E50A4 Offset: 0x21E50A4 VA: 0x21E50A4
	internal static IList<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj) { }

	// RVA: 0x21E5160 Offset: 0x21E5160 VA: 0x21E5160
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }

	// RVA: 0x21E53F4 Offset: 0x21E53F4 VA: 0x21E53F4
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType) { }

	// RVA: 0x21E53F8 Offset: 0x21E53F8 VA: 0x21E53F8
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property) { }

	// RVA: 0x21E4CA4 Offset: 0x21E4CA4 VA: 0x21E4CA4
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj) { }

	// RVA: 0x21E4A48 Offset: 0x21E4A48 VA: 0x21E4A48
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType) { }
}

// Namespace: 
private class MonoCustomAttrs.AttributeInfo // TypeDefIndex: 1018
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x10
	private int _inheritanceLevel; // 0x18

	// Properties
	public AttributeUsageAttribute Usage { get; }
	public int InheritanceLevel { get; }

	// Methods

	// RVA: 0x21E4C98 Offset: 0x21E4C98 VA: 0x21E4C98
	public void .ctor(AttributeUsageAttribute usage, int inheritanceLevel) { }

	// RVA: 0x21E4C88 Offset: 0x21E4C88 VA: 0x21E4C88
	public AttributeUsageAttribute get_Usage() { }

	// RVA: 0x21E4C90 Offset: 0x21E4C90 VA: 0x21E4C90
	public int get_InheritanceLevel() { }
}

// Namespace: System
internal class MonoTouchAOTHelper // TypeDefIndex: 1019
{
	// Fields
	internal static bool FalseFlag; // 0x0

	// Methods

	// RVA: 0x21E6248 Offset: 0x21E6248 VA: 0x21E6248
	private static void .cctor() { }
}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 1020
{
	// Fields
	public string full_name; // 0x10
	public ConstructorInfo default_ctor; // 0x18

	// Methods

	// RVA: 0x21E6328 Offset: 0x21E6328 VA: 0x21E6328
	public void .ctor() { }
}

// Namespace: System
[Serializable]
internal class MonoType : Type, ISerializable // TypeDefIndex: 1021
{
	// Fields
	private MonoTypeInfo type_info; // 0x18

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override string FullName { get; }
	public override MemberTypes MemberType { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsGenericParameter { get; }

	// Methods

	// RVA: 0x21E624C Offset: 0x21E624C VA: 0x21E624C
	private static TypeAttributes get_attributes(Type type) { }

	// RVA: 0x21E6250 Offset: 0x21E6250 VA: 0x21E6250
	internal ConstructorInfo GetDefaultConstructor() { }

	// RVA: 0x21E632C Offset: 0x21E632C VA: 0x21E632C Slot: 70
	protected override TypeAttributes GetAttributeFlagsImpl() { }

	// RVA: 0x21E6330 Offset: 0x21E6330 VA: 0x21E6330 Slot: 69
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x21E67A4 Offset: 0x21E67A4 VA: 0x21E67A4
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x21E67A8 Offset: 0x21E67A8 VA: 0x21E67A8 Slot: 82
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }

	// RVA: 0x21E67B0 Offset: 0x21E67B0 VA: 0x21E67B0
	private EventInfo InternalGetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x21E67B4 Offset: 0x21E67B4 VA: 0x21E67B4 Slot: 46
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }

	// RVA: 0x21E6858 Offset: 0x21E6858 VA: 0x21E6858
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x21E685C Offset: 0x21E685C VA: 0x21E685C Slot: 48
	public override EventInfo[] GetEvents(BindingFlags bindingAttr) { }

	// RVA: 0x21E6864 Offset: 0x21E6864 VA: 0x21E6864 Slot: 50
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }

	// RVA: 0x21E6868 Offset: 0x21E6868 VA: 0x21E6868
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type) { }

	// RVA: 0x21E686C Offset: 0x21E686C VA: 0x21E686C Slot: 52
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }

	// RVA: 0x21E6874 Offset: 0x21E6874 VA: 0x21E6874 Slot: 40
	public override Type[] GetInterfaces() { }

	// RVA: 0x21E6878 Offset: 0x21E6878 VA: 0x21E6878
	internal MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type) { }

	// RVA: 0x21E6880 Offset: 0x21E6880 VA: 0x21E6880 Slot: 59
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }

	// RVA: 0x21E6898 Offset: 0x21E6898 VA: 0x21E6898 Slot: 58
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x21E6F10 Offset: 0x21E6F10 VA: 0x21E6F10 Slot: 60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr) { }

	// RVA: 0x21E6F14 Offset: 0x21E6F14 VA: 0x21E6F14
	internal PropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, Type reflected_type) { }

	// RVA: 0x21E6F1C Offset: 0x21E6F1C VA: 0x21E6F1C Slot: 62
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }

	// RVA: 0x21E6F34 Offset: 0x21E6F34 VA: 0x21E6F34 Slot: 68
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }

	// RVA: 0x21E70A4 Offset: 0x21E70A4 VA: 0x21E70A4 Slot: 71
	protected override bool HasElementTypeImpl() { }

	// RVA: 0x21E710C Offset: 0x21E710C VA: 0x21E710C Slot: 72
	protected override bool IsArrayImpl() { }

	// RVA: 0x21E7174 Offset: 0x21E7174 VA: 0x21E7174 Slot: 73
	protected override bool IsByRefImpl() { }

	// RVA: 0x21E7178 Offset: 0x21E7178 VA: 0x21E7178 Slot: 74
	protected override bool IsPointerImpl() { }

	// RVA: 0x21E717C Offset: 0x21E717C VA: 0x21E717C Slot: 75
	protected override bool IsPrimitiveImpl() { }

	// RVA: 0x21E7180 Offset: 0x21E7180 VA: 0x21E7180 Slot: 39
	public override bool IsSubclassOf(Type type) { }

	// RVA: 0x21E7220 Offset: 0x21E7220 VA: 0x21E7220 Slot: 83
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }

	// RVA: 0x21E83AC Offset: 0x21E83AC VA: 0x21E83AC Slot: 44
	public override Type GetElementType() { }

	// RVA: 0x21E83B0 Offset: 0x21E83B0 VA: 0x21E83B0 Slot: 36
	public override Type get_UnderlyingSystemType() { }

	// RVA: 0x21E83B4 Offset: 0x21E83B4 VA: 0x21E83B4 Slot: 14
	public override Assembly get_Assembly() { }

	// RVA: 0x21E83B8 Offset: 0x21E83B8 VA: 0x21E83B8 Slot: 15
	public override string get_AssemblyQualifiedName() { }

	// RVA: 0x21E83C4 Offset: 0x21E83C4 VA: 0x21E83C4
	private string getFullName(bool full_name, bool assembly_qualified) { }

	// RVA: 0x21E83D0 Offset: 0x21E83D0 VA: 0x21E83D0 Slot: 17
	public override Type get_BaseType() { }

	// RVA: 0x21E83D4 Offset: 0x21E83D4 VA: 0x21E83D4 Slot: 18
	public override string get_FullName() { }

	// RVA: 0x21E8474 Offset: 0x21E8474 VA: 0x21E8474 Slot: 11
	public override bool IsDefined(Type attributeType, bool inherit) { }

	// RVA: 0x21E84F0 Offset: 0x21E84F0 VA: 0x21E84F0 Slot: 12
	public override object[] GetCustomAttributes(bool inherit) { }

	// RVA: 0x21E8564 Offset: 0x21E8564 VA: 0x21E8564 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }

	// RVA: 0x21E8628 Offset: 0x21E8628 VA: 0x21E8628 Slot: 7
	public override MemberTypes get_MemberType() { }

	// RVA: 0x21E8678 Offset: 0x21E8678 VA: 0x21E8678 Slot: 8
	public override string get_Name() { }

	// RVA: 0x21E867C Offset: 0x21E867C VA: 0x21E867C Slot: 34
	public override string get_Namespace() { }

	// RVA: 0x21E8680 Offset: 0x21E8680 VA: 0x21E8680 Slot: 10
	public override Module get_Module() { }

	// RVA: 0x21E8684 Offset: 0x21E8684 VA: 0x21E8684 Slot: 6
	public override Type get_DeclaringType() { }

	// RVA: 0x21E8688 Offset: 0x21E8688 VA: 0x21E8688 Slot: 9
	public override Type get_ReflectedType() { }

	// RVA: 0x21E8694 Offset: 0x21E8694 VA: 0x21E8694 Slot: 35
	public override RuntimeTypeHandle get_TypeHandle() { }

	// RVA: 0x21E869C Offset: 0x21E869C VA: 0x21E869C Slot: 43
	public override int GetArrayRank() { }

	// RVA: 0x21E86A0 Offset: 0x21E86A0 VA: 0x21E86A0 Slot: 93
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21E86A8 Offset: 0x21E86A8 VA: 0x21E86A8 Slot: 3
	public override string ToString() { }

	// RVA: 0x21E86B4 Offset: 0x21E86B4 VA: 0x21E86B4 Slot: 84
	public override Type[] GetGenericArguments() { }

	// RVA: 0x21E86B8 Offset: 0x21E86B8 VA: 0x21E86B8 Slot: 85
	public override bool get_ContainsGenericParameters() { }

	// RVA: 0x21E87E8 Offset: 0x21E87E8 VA: 0x21E87E8 Slot: 90
	public override bool get_IsGenericParameter() { }

	// RVA: 0x21E87EC Offset: 0x21E87EC VA: 0x21E87EC Slot: 87
	public override Type GetGenericTypeDefinition() { }

	// RVA: 0x21E6734 Offset: 0x21E6734 VA: 0x21E6734
	private MethodBase CheckMethodSecurity(MethodBase mb) { }

	// RVA: 0x21E80E8 Offset: 0x21E80E8 VA: 0x21E80E8
	private void ReorderParamArrayArguments(ref object[] args, MethodBase method) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAE74 Offset: 0xBCAE74 VA: 0xBCAE74
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 1022
{
	// Methods

	// RVA: 0x21E9618 Offset: 0x21E9618 VA: 0x21E9618
	public void .ctor() { }

	// RVA: 0x21E9678 Offset: 0x21E9678 VA: 0x21E9678
	public void .ctor(string message) { }

	// RVA: 0x21E9680 Offset: 0x21E9680 VA: 0x21E9680
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xBCAE88 Offset: 0xBCAE88 VA: 0xBCAE88
[ComVisibleAttribute] // RVA: 0xBCAE88 Offset: 0xBCAE88 VA: 0xBCAE88
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 1023
{
	// Methods

	// RVA: 0x21E9688 Offset: 0x21E9688 VA: 0x21E9688
	public void .ctor() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAEDC Offset: 0xBCAEDC VA: 0xBCAEDC
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 1024
{
	// Methods

	// RVA: 0x21E9690 Offset: 0x21E9690 VA: 0x21E9690
	public void .ctor() { }

	// RVA: 0x21E9704 Offset: 0x21E9704 VA: 0x21E9704
	public void .ctor(string message) { }

	// RVA: 0x21E9738 Offset: 0x21E9738 VA: 0x21E9738
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAEF0 Offset: 0xBCAEF0 VA: 0xBCAEF0
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 1025
{
	// Fields
	private const int Result = -2146233067;

	// Methods

	// RVA: 0x21E9740 Offset: 0x21E9740 VA: 0x21E9740
	public void .ctor() { }

	// RVA: 0x21E97B4 Offset: 0x21E97B4 VA: 0x21E97B4
	public void .ctor(string message) { }

	// RVA: 0x21E97E8 Offset: 0x21E97E8 VA: 0x21E97E8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF04 Offset: 0xBCAF04 VA: 0xBCAF04
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 1026
{
	// Fields
	private const int Result = -2147467261;

	// Methods

	// RVA: 0x21E97F0 Offset: 0x21E97F0 VA: 0x21E97F0
	public void .ctor() { }

	// RVA: 0x21E9864 Offset: 0x21E9864 VA: 0x21E9864
	public void .ctor(string message) { }

	// RVA: 0x21E9898 Offset: 0x21E9898 VA: 0x21E9898
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x21E98CC Offset: 0x21E98CC VA: 0x21E98CC
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF18 Offset: 0xBCAF18 VA: 0xBCAF18
public static class Nullable // TypeDefIndex: 1027
{
	// Methods

	// RVA: 0x21E98D4 Offset: 0x21E98D4 VA: 0x21E98D4
	public static Type GetUnderlyingType(Type nullableType) { }
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 1028
{
	// Fields
	private static readonly ulong* MantissaBitsTable; // 0x0
	private static readonly int* TensExponentTable; // 0x8
	private static readonly char* DigitLowerTable; // 0x10
	private static readonly char* DigitUpperTable; // 0x18
	private static readonly long* TenPowersList; // 0x20
	private static readonly int* DecHexDigits; // 0x28
	private Thread _thread; // 0x10
	private NumberFormatInfo _nfi; // 0x18
	private bool _NaN; // 0x20
	private bool _infinity; // 0x21
	private bool _isCustomFormat; // 0x22
	private bool _specifierIsUpper; // 0x23
	private bool _positive; // 0x24
	private char _specifier; // 0x26
	private int _precision; // 0x28
	private int _defPrecision; // 0x2C
	private int _digitsLen; // 0x30
	private int _offset; // 0x34
	private int _decPointPos; // 0x38
	private uint _val1; // 0x3C
	private uint _val2; // 0x40
	private uint _val3; // 0x44
	private uint _val4; // 0x48
	private char[] _cbuf; // 0x50
	private int _ind; // 0x58
	[ThreadStaticAttribute] // RVA: 0xBCB7DC Offset: 0xBCB7DC VA: 0xBCB7DC
	private static NumberFormatter threadNumberFormatter; // 0x80000000

	// Properties
	public CultureInfo CurrentCulture { set; }
	private int IntegerDigits { get; }
	private int DecimalDigits { get; }
	private bool IsFloatingSource { get; }
	private bool IsZero { get; }
	private bool IsZeroInteger { get; }

	// Methods

	// RVA: 0x21E9A20 Offset: 0x21E9A20 VA: 0x21E9A20
	public void .ctor(Thread current) { }

	// RVA: 0x21E9B24 Offset: 0x21E9B24 VA: 0x21E9B24
	private static void .cctor() { }

	// RVA: 0x21E9B84 Offset: 0x21E9B84 VA: 0x21E9B84
	private static void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits) { }

	// RVA: 0x21E9B88 Offset: 0x21E9B88 VA: 0x21E9B88
	private static long GetTenPowerOf(int i) { }

	// RVA: 0x21E9BFC Offset: 0x21E9BFC VA: 0x21E9BFC
	private void InitDecHexDigits(uint value) { }

	// RVA: 0x21E9E60 Offset: 0x21E9E60 VA: 0x21E9E60
	private void InitDecHexDigits(ulong value) { }

	// RVA: 0x21E9F84 Offset: 0x21E9F84 VA: 0x21E9F84
	private void InitDecHexDigits(uint hi, ulong lo) { }

	// RVA: 0x21E9CC4 Offset: 0x21E9CC4 VA: 0x21E9CC4
	private static uint FastToDecHex(int val) { }

	// RVA: 0x21E9D9C Offset: 0x21E9D9C VA: 0x21E9D9C
	private static uint ToDecHex(int val) { }

	// RVA: 0x21EA16C Offset: 0x21EA16C VA: 0x21EA16C
	private static int FastDecHexLen(int val) { }

	// RVA: 0x21EA194 Offset: 0x21EA194 VA: 0x21EA194
	private static int DecHexLen(uint val) { }

	// RVA: 0x21EA25C Offset: 0x21EA25C VA: 0x21EA25C
	private int DecHexLen() { }

	// RVA: 0x21EA380 Offset: 0x21EA380 VA: 0x21EA380
	private static int ScaleOrder(long hi) { }

	// RVA: 0x21EA414 Offset: 0x21EA414 VA: 0x21EA414
	private int InitialFloatingPrecision() { }

	// RVA: 0x21EA470 Offset: 0x21EA470 VA: 0x21EA470
	private static int ParsePrecision(string format) { }

	// RVA: 0x21EA514 Offset: 0x21EA514 VA: 0x21EA514
	private void Init(string format) { }

	// RVA: 0x21EA650 Offset: 0x21EA650 VA: 0x21EA650
	private void InitHex(ulong value) { }

	// RVA: 0x21EA6BC Offset: 0x21EA6BC VA: 0x21EA6BC
	private void Init(string format, int value, int defPrecision) { }

	// RVA: 0x21EA744 Offset: 0x21EA744 VA: 0x21EA744
	private void Init(string format, uint value, int defPrecision) { }

	// RVA: 0x21EA7C4 Offset: 0x21EA7C4 VA: 0x21EA7C4
	private void Init(string format, long value) { }

	// RVA: 0x21EA840 Offset: 0x21EA840 VA: 0x21EA840
	private void Init(string format, ulong value) { }

	// RVA: 0x21EA8B4 Offset: 0x21EA8B4 VA: 0x21EA8B4
	private void Init(string format, double value, int defPrecision) { }

	// RVA: 0x21EACCC Offset: 0x21EACCC VA: 0x21EACCC
	private void Init(string format, Decimal value) { }

	// RVA: 0x21EAEF8 Offset: 0x21EAEF8 VA: 0x21EAEF8
	private void ResetCharBuf(int size) { }

	// RVA: 0x21EAF7C Offset: 0x21EAF7C VA: 0x21EAF7C
	private void Resize(int len) { }

	// RVA: 0x21EAFFC Offset: 0x21EAFFC VA: 0x21EAFFC
	private void Append(char c) { }

	// RVA: 0x21EB094 Offset: 0x21EB094 VA: 0x21EB094
	private void Append(char c, int cnt) { }

	// RVA: 0x21EB158 Offset: 0x21EB158 VA: 0x21EB158
	private void Append(string s) { }

	// RVA: 0x21EB25C Offset: 0x21EB25C VA: 0x21EB25C
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp) { }

	// RVA: 0x21E9ACC Offset: 0x21E9ACC VA: 0x21E9ACC
	public void set_CurrentCulture(CultureInfo value) { }

	// RVA: 0x21EB2EC Offset: 0x21EB2EC VA: 0x21EB2EC
	private int get_IntegerDigits() { }

	// RVA: 0x21EB2FC Offset: 0x21EB2FC VA: 0x21EB2FC
	private int get_DecimalDigits() { }

	// RVA: 0x21EB310 Offset: 0x21EB310 VA: 0x21EB310
	private bool get_IsFloatingSource() { }

	// RVA: 0x21EB324 Offset: 0x21EB324 VA: 0x21EB324
	private bool get_IsZero() { }

	// RVA: 0x21EB334 Offset: 0x21EB334 VA: 0x21EB334
	private bool get_IsZeroInteger() { }

	// RVA: 0x21EB354 Offset: 0x21EB354 VA: 0x21EB354
	private void RoundPos(int pos) { }

	// RVA: 0x21EB4CC Offset: 0x21EB4CC VA: 0x21EB4CC
	private bool RoundDecimal(int decimals) { }

	// RVA: 0x21EB360 Offset: 0x21EB360 VA: 0x21EB360
	private bool RoundBits(int shift) { }

	// RVA: 0x21EB614 Offset: 0x21EB614 VA: 0x21EB614
	private void RemoveTrailingZeros() { }

	// RVA: 0x21EB4E0 Offset: 0x21EB4E0 VA: 0x21EB4E0
	private void AddOneToDecHex() { }

	// RVA: 0x21EB654 Offset: 0x21EB654 VA: 0x21EB654
	private static uint AddOneToDecHex(uint val) { }

	// RVA: 0x21EABA8 Offset: 0x21EABA8 VA: 0x21EABA8
	private int CountTrailingZeros() { }

	// RVA: 0x21EB700 Offset: 0x21EB700 VA: 0x21EB700
	private static int CountTrailingZeros(uint val) { }

	// RVA: 0x21EB754 Offset: 0x21EB754 VA: 0x21EB754
	private static NumberFormatter GetInstance() { }

	// RVA: 0x21EB81C Offset: 0x21EB81C VA: 0x21EB81C
	private void Release() { }

	// RVA: 0x21EB88C Offset: 0x21EB88C VA: 0x21EB88C
	internal static void SetThreadCurrentCulture(CultureInfo culture) { }

	// RVA: 0x21EB970 Offset: 0x21EB970 VA: 0x21EB970
	public static string NumberToString(string format, sbyte value, IFormatProvider fp) { }

	// RVA: 0x21EBC54 Offset: 0x21EBC54 VA: 0x21EBC54
	public static string NumberToString(string format, byte value, IFormatProvider fp) { }

	// RVA: 0x21EBD44 Offset: 0x21EBD44 VA: 0x21EBD44
	public static string NumberToString(string format, ushort value, IFormatProvider fp) { }

	// RVA: 0x21EBE34 Offset: 0x21EBE34 VA: 0x21EBE34
	public static string NumberToString(string format, short value, IFormatProvider fp) { }

	// RVA: 0x21EBF24 Offset: 0x21EBF24 VA: 0x21EBF24
	public static string NumberToString(string format, uint value, IFormatProvider fp) { }

	// RVA: 0x21EC014 Offset: 0x21EC014 VA: 0x21EC014
	public static string NumberToString(string format, int value, IFormatProvider fp) { }

	// RVA: 0x21EC104 Offset: 0x21EC104 VA: 0x21EC104
	public static string NumberToString(string format, ulong value, IFormatProvider fp) { }

	// RVA: 0x21E1B84 Offset: 0x21E1B84 VA: 0x21E1B84
	public static string NumberToString(string format, long value, IFormatProvider fp) { }

	// RVA: 0x21EC1EC Offset: 0x21EC1EC VA: 0x21EC1EC
	public static string NumberToString(string format, float value, IFormatProvider fp) { }

	// RVA: 0x21EC5C0 Offset: 0x21EC5C0 VA: 0x21EC5C0
	public static string NumberToString(string format, double value, IFormatProvider fp) { }

	// RVA: 0x21EC7FC Offset: 0x21EC7FC VA: 0x21EC7FC
	public static string NumberToString(string format, Decimal value, IFormatProvider fp) { }

	// RVA: 0x21EC91C Offset: 0x21EC91C VA: 0x21EC91C
	public static string NumberToString(uint value, IFormatProvider fp) { }

	// RVA: 0x21ECB0C Offset: 0x21ECB0C VA: 0x21ECB0C
	public static string NumberToString(int value, IFormatProvider fp) { }

	// RVA: 0x21ECC10 Offset: 0x21ECC10 VA: 0x21ECC10
	public static string NumberToString(ulong value, IFormatProvider fp) { }

	// RVA: 0x21E1980 Offset: 0x21E1980 VA: 0x21E1980
	public static string NumberToString(long value, IFormatProvider fp) { }

	// RVA: 0x21ECD08 Offset: 0x21ECD08 VA: 0x21ECD08
	public static string NumberToString(float value, IFormatProvider fp) { }

	// RVA: 0x21ECFE0 Offset: 0x21ECFE0 VA: 0x21ECFE0
	public static string NumberToString(double value, IFormatProvider fp) { }

	// RVA: 0x21ECA14 Offset: 0x21ECA14 VA: 0x21ECA14
	private string FastIntegerToString(int value, IFormatProvider fp) { }

	// RVA: 0x21EBA60 Offset: 0x21EBA60 VA: 0x21EBA60
	private string IntegerToString(string format, IFormatProvider fp) { }

	// RVA: 0x21EC408 Offset: 0x21EC408 VA: 0x21EC408
	private string NumberToString(string format, NumberFormatInfo nfi) { }

	// RVA: 0x21ED39C Offset: 0x21ED39C VA: 0x21ED39C
	public string FormatCurrency(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21ED8D4 Offset: 0x21ED8D4 VA: 0x21ED8D4
	private string FormatDecimal(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21EDFE0 Offset: 0x21EDFE0 VA: 0x21EDFE0
	private string FormatHexadecimal(int precision) { }

	// RVA: 0x21EDA00 Offset: 0x21EDA00 VA: 0x21EDA00
	public string FormatFixedPoint(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21EC744 Offset: 0x21EC744 VA: 0x21EC744
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi) { }

	// RVA: 0x21EC370 Offset: 0x21EC370 VA: 0x21EC370
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi) { }

	// RVA: 0x21ECE6C Offset: 0x21ECE6C VA: 0x21ECE6C
	private string FormatGeneral(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21EDB20 Offset: 0x21EDB20 VA: 0x21EDB20
	public string FormatNumber(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21EDD58 Offset: 0x21EDD58 VA: 0x21EDD58
	public string FormatPercent(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21ED9AC Offset: 0x21ED9AC VA: 0x21ED9AC
	public string FormatExponential(int precision, NumberFormatInfo nfi) { }

	// RVA: 0x21EEEF4 Offset: 0x21EEEF4 VA: 0x21EEEF4
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits) { }

	// RVA: 0x21EE134 Offset: 0x21EE134 VA: 0x21EE134
	public string FormatCustom(string format, NumberFormatInfo nfi) { }

	// RVA: 0x21EFFB8 Offset: 0x21EFFB8 VA: 0x21EFFB8
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty) { }

	// RVA: 0x21EFEBC Offset: 0x21EFEBC VA: 0x21EFEBC
	private static bool IsZeroOnly(StringBuilder sb) { }

	// RVA: 0x21EFCE4 Offset: 0x21EFCE4 VA: 0x21EFCE4
	private static void AppendNonNegativeNumber(StringBuilder sb, int v) { }

	// RVA: 0x21EFDF8 Offset: 0x21EFDF8 VA: 0x21EFDF8
	private void AppendIntegerString(int minLength, StringBuilder sb) { }

	// RVA: 0x21EEDD4 Offset: 0x21EEDD4 VA: 0x21EEDD4
	private void AppendIntegerString(int minLength) { }

	// RVA: 0x21EFE98 Offset: 0x21EFE98 VA: 0x21EFE98
	private void AppendDecimalString(int precision, StringBuilder sb) { }

	// RVA: 0x21EEA2C Offset: 0x21EEA2C VA: 0x21EEA2C
	private void AppendDecimalString(int precision) { }

	// RVA: 0x21EE7D8 Offset: 0x21EE7D8 VA: 0x21EE7D8
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator) { }

	// RVA: 0x21EF104 Offset: 0x21EF104 VA: 0x21EF104
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits) { }

	// RVA: 0x21EF00C Offset: 0x21EF00C VA: 0x21EF00C
	private void AppendOneDigit(int start) { }

	// RVA: 0x21ED144 Offset: 0x21ED144 VA: 0x21ED144
	private void FastAppendDigits(int val, bool force) { }

	// RVA: 0x21EEA44 Offset: 0x21EEA44 VA: 0x21EEA44
	private void AppendDigits(int start, int end) { }

	// RVA: 0x21F0A7C Offset: 0x21F0A7C VA: 0x21F0A7C
	private void AppendDigits(int start, int end, StringBuilder sb) { }

	// RVA: 0x21EEFEC Offset: 0x21EEFEC VA: 0x21EEFEC
	private void Multiply10(int count) { }

	// RVA: 0x21EFCC4 Offset: 0x21EFCC4 VA: 0x21EFCC4
	private void Divide10(int count) { }

	// RVA: 0x21EEE40 Offset: 0x21EEE40 VA: 0x21EEE40
	private NumberFormatter GetClone() { }
}

// Namespace: 
private class NumberFormatter.CustomInfo // TypeDefIndex: 1029
{
	// Fields
	public bool UseGroup; // 0x10
	public int DecimalDigits; // 0x14
	public int DecimalPointPos; // 0x18
	public int DecimalTailSharpDigits; // 0x1C
	public int IntegerDigits; // 0x20
	public int IntegerHeadSharpDigits; // 0x24
	public int IntegerHeadPos; // 0x28
	public bool UseExponent; // 0x2C
	public int ExponentDigits; // 0x30
	public int ExponentTailSharpDigits; // 0x34
	public bool ExponentNegativeSignOnly; // 0x38
	public int DividePlaces; // 0x3C
	public int Percents; // 0x40
	public int Permilles; // 0x44

	// Methods

	// RVA: 0x21F0D50 Offset: 0x21F0D50 VA: 0x21F0D50
	public void .ctor() { }

	// RVA: 0x21EF288 Offset: 0x21EF288 VA: 0x21EF288
	public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length) { }

	// RVA: 0x21EF710 Offset: 0x21EF710 VA: 0x21EF710
	public static NumberFormatter.CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi) { }

	// RVA: 0x21F00D8 Offset: 0x21F00D8 VA: 0x21F00D8
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF2C Offset: 0xBCAF2C VA: 0xBCAF2C
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 1030
{
	// Fields
	private string obj_name; // 0x60
	private string msg; // 0x68

	// Properties
	public override string Message { get; }

	// Methods

	// RVA: 0x21F0DEC Offset: 0x21F0DEC VA: 0x21F0DEC
	public void .ctor(string objectName) { }

	// RVA: 0x21F0E84 Offset: 0x21F0E84 VA: 0x21F0E84
	public void .ctor(string objectName, string message) { }

	// RVA: 0x21F0ED4 Offset: 0x21F0ED4 VA: 0x21F0ED4
	protected void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21F0F70 Offset: 0x21F0F70 VA: 0x21F0F70 Slot: 6
	public override string get_Message() { }

	// RVA: 0x21F0F78 Offset: 0x21F0F78 VA: 0x21F0F78 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF40 Offset: 0xBCAF40 VA: 0xBCAF40
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 1031
{
	// Fields
	private PlatformID _platform; // 0x10
	private Version _version; // 0x18
	private string _servicePack; // 0x20

	// Properties
	public PlatformID Platform { get; }
	public Version Version { get; }

	// Methods

	// RVA: 0x21F1088 Offset: 0x21F1088 VA: 0x21F1088
	public void .ctor(PlatformID platform, Version version) { }

	// RVA: 0x21F1168 Offset: 0x21F1168 VA: 0x21F1168
	public PlatformID get_Platform() { }

	// RVA: 0x21F1170 Offset: 0x21F1170 VA: 0x21F1170
	public Version get_Version() { }

	// RVA: 0x21F1178 Offset: 0x21F1178 VA: 0x21F1178 Slot: 4
	public object Clone() { }

	// RVA: 0x21F11EC Offset: 0x21F11EC VA: 0x21F11EC Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x21F12D8 Offset: 0x21F12D8 VA: 0x21F12D8 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF54 Offset: 0xBCAF54 VA: 0xBCAF54
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 1032
{
	// Fields
	private const int Result = -2147024882;

	// Methods

	// RVA: 0x21F16DC Offset: 0x21F16DC VA: 0x21F16DC
	public void .ctor() { }

	// RVA: 0x21F1750 Offset: 0x21F1750 VA: 0x21F1750
	public void .ctor(string message) { }

	// RVA: 0x21F1784 Offset: 0x21F1784 VA: 0x21F1784
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x21F17B8 Offset: 0x21F17B8 VA: 0x21F17B8
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF68 Offset: 0xBCAF68 VA: 0xBCAF68
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 1033
{
	// Fields
	private const int Result = -2146233066;

	// Methods

	// RVA: 0x21F17C0 Offset: 0x21F17C0 VA: 0x21F17C0
	public void .ctor() { }

	// RVA: 0x21E06CC Offset: 0x21E06CC VA: 0x21E06CC
	public void .ctor(string message) { }

	// RVA: 0x21F1834 Offset: 0x21F1834 VA: 0x21F1834
	public void .ctor(string message, Exception innerException) { }

	// RVA: 0x21F1868 Offset: 0x21F1868 VA: 0x21F1868
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF7C Offset: 0xBCAF7C VA: 0xBCAF7C
[Serializable]
public enum PlatformID // TypeDefIndex: 1034
{
	// Fields
	public int value__; // 0x0
	public const PlatformID Win32S = 0;
	public const PlatformID Win32Windows = 1;
	public const PlatformID Win32NT = 2;
	public const PlatformID WinCE = 3;
	public const PlatformID Unix = 4;
	public const PlatformID Xbox = 5;
	public const PlatformID MacOSX = 6;
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAF90 Offset: 0xBCAF90 VA: 0xBCAF90
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 1035
{
	// Fields
	private const int Result = -2146233031;

	// Methods

	// RVA: 0x21F1878 Offset: 0x21F1878 VA: 0x21F1878
	public void .ctor() { }

	// RVA: 0x21F1904 Offset: 0x21F1904 VA: 0x21F1904
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[ComVisibleAttribute] // RVA: 0xBCAFA4 Offset: 0xBCAFA4 VA: 0xBCAFA4
[Serializable]
public class Random // TypeDefIndex: 1036
