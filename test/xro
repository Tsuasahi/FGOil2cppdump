// Namespace: 
public class BattleRetireWindowComponent : BattleWindowComponent // TypeDefIndex: 9307
{
	// Fields
	public UILabel checkGiveUpLabel; // 0x48
	public UILabel continueItemDeadLineLabel; // 0x50
	public GameObject continueItemRoot; // 0x58
	public UILabel continueCount; // 0x60
	public UISprite continueItemCountSpr; // 0x68
	public UISprite giveUpTitleSpr; // 0x70
	public GameObject okBtn; // 0x78
	public GameObject cancelBtn; // 0x80
	public UISprite giveUpBg; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xC66568 Offset: 0xC66568 VA: 0xC66568
	[DebuggerBrowsableAttribute] // RVA: 0xC66568 Offset: 0xC66568 VA: 0xC66568
	private BattleData <data>k__BackingField; // 0x90
	public bool EnableContinueItem; // 0x98
	private bool isShowDeadLineDialog; // 0x99

	// Properties
	public BattleData data { get; set; }
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x117326C Offset: 0x117326C VA: 0x117326C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE5E8 Offset: 0xCCE5E8 VA: 0xCCE5E8
	// RVA: 0x1173274 Offset: 0x1173274 VA: 0x1173274
	public void set_data(BattleData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE5F8 Offset: 0xCCE5F8 VA: 0xCCE5F8
	// RVA: 0x117327C Offset: 0x117327C VA: 0x117327C
	public BattleData get_data() { }

	// RVA: 0x1173284 Offset: 0x1173284 VA: 0x1173284
	public void Update() { }

	// RVA: 0x117350C Offset: 0x117350C VA: 0x117350C
	private void CallbackConfirmDialog(bool isDecide) { }

	// RVA: 0x11735A4 Offset: 0x11735A4 VA: 0x11735A4
	public void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1173CF0 Offset: 0x1173CF0 VA: 0x1173CF0 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleSealedCommandWindowComponent : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9308
{
	// Fields
	private int labelDefaultFontSize; // 0x50
	private Vector3 labelDefaultPosition; // 0x54
	public UILabel confLabel; // 0x60

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0xF14AC4 Offset: 0xF14AC4 VA: 0xF14AC4
	public void .ctor() { }

	// RVA: 0xF14B2C Offset: 0xF14B2C VA: 0xF14B2C
	public void setLabel(string str, BattleSealedCommandWindowComponent.LabelAdjustArgs args) { }

	// RVA: 0xF14D34 Offset: 0xF14D34 VA: 0xF14D34 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleSealedCommandWindowComponent.LabelAdjustArgs // TypeDefIndex: 9309
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xC665A4 Offset: 0xC665A4 VA: 0xC665A4
	[DebuggerBrowsableAttribute] // RVA: 0xC665A4 Offset: 0xC665A4 VA: 0xC665A4
	private Nullable<int> <fontSize>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC665E0 Offset: 0xC665E0 VA: 0xC665E0
	[DebuggerBrowsableAttribute] // RVA: 0xC665E0 Offset: 0xC665E0 VA: 0xC665E0
	private Nullable<Vector3> <localPosition>k__BackingField; // 0x18

	// Properties
	public Nullable<int> fontSize { get; set; }
	public Nullable<Vector3> localPosition { get; set; }

	// Methods

	// RVA: 0xF14D18 Offset: 0xF14D18 VA: 0xF14D18
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE608 Offset: 0xCCE608 VA: 0xCCE608
	// RVA: 0xF14D20 Offset: 0xF14D20 VA: 0xF14D20
	public Nullable<int> get_fontSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE618 Offset: 0xCCE618 VA: 0xCCE618
	// RVA: 0xF14D7C Offset: 0xF14D7C VA: 0xF14D7C
	public void set_fontSize(Nullable<int> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE628 Offset: 0xCCE628 VA: 0xCCE628
	// RVA: 0xF14D28 Offset: 0xF14D28 VA: 0xF14D28
	public Nullable<Vector3> get_localPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE638 Offset: 0xCCE638 VA: 0xCCE638
	// RVA: 0xF14D84 Offset: 0xF14D84 VA: 0xF14D84
	public void set_localPosition(Nullable<Vector3> value) { }
}

// Namespace: 
public class BattleSelectMainSubServantWindow : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9310
{
	// Fields
	public GameObject parentPanel; // 0x50
	public UILabel title_label; // 0x58
	public BattleSelectServantComponent[] mainSvtList; // 0x60
	public BattleSelectServantComponent[] subSvtList; // 0x68
	public UIButton actButton; // 0x70
	private BattleSelectMainSubServantWindow.SelectedCallBack callBack; // 0x78
	private int mainSelect_uniqueId; // 0x80
	private int subSelect_uniqueId; // 0x84
	private bool isSelected; // 0x88
	private BattleData battleData; // 0x90

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0xF165B8 Offset: 0xF165B8 VA: 0xF165B8
	public void .ctor() { }

	// RVA: 0xF165C8 Offset: 0xF165C8 VA: 0xF165C8 Slot: 7
	public override void setInitialPos() { }

	// RVA: 0xF166A4 Offset: 0xF166A4 VA: 0xF166A4
	public void SetCallBack(BattleSelectMainSubServantWindow.SelectedCallBack callback) { }

	// RVA: 0xF166AC Offset: 0xF166AC VA: 0xF166AC
	public void SetServantData(BattleServantData[] mainList, BattleServantData[] subList) { }

	// RVA: 0xF17260 Offset: 0xF17260 VA: 0xF17260
	public void selectSvt(BattleSelectMainSubServantWindow.POSITION position, int uniqueId) { }

	// RVA: 0xF174C4 Offset: 0xF174C4 VA: 0xF174C4
	public void setBattleData(BattleData data) { }

	// RVA: 0xF174CC Offset: 0xF174CC VA: 0xF174CC Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF17628 Offset: 0xF17628 VA: 0xF17628
	public void atlasLoadEnd() { }

	// RVA: 0xF174D0 Offset: 0xF174D0 VA: 0xF174D0
	public void OpenImpl(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF17694 Offset: 0xF17694 VA: 0xF17694 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF17810 Offset: 0xF17810 VA: 0xF17810
	public void onCloseButton() { }

	// RVA: 0xF17B2C Offset: 0xF17B2C VA: 0xF17B2C
	public void onActionButton() { }

	// RVA: 0xF17CF8 Offset: 0xF17CF8 VA: 0xF17CF8
	public void endErrorDialog(bool flg) { }

	// RVA: 0xF16F78 Offset: 0xF16F78 VA: 0xF16F78
	private bool CheckCanOrderChangeServant(BattleServantData servantData) { }

	// RVA: 0xF17D64 Offset: 0xF17D64 VA: 0xF17D64 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public sealed class BattleSelectMainSubServantWindow.SelectedCallBack : MulticastDelegate // TypeDefIndex: 9311
{
	// Methods

	// RVA: 0xF17DAC Offset: 0xF17DAC VA: 0xF17DAC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF178C0 Offset: 0xF178C0 VA: 0xF178C0 Slot: 11
	public virtual void Invoke(bool flg, int mainUniqueId, int subUniqueId) { }

	// RVA: 0xF17DBC Offset: 0xF17DBC VA: 0xF17DBC Slot: 12
	public virtual IAsyncResult BeginInvoke(bool flg, int mainUniqueId, int subUniqueId, AsyncCallback callback, object object) { }

	// RVA: 0xF17E80 Offset: 0xF17E80 VA: 0xF17E80 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum BattleSelectMainSubServantWindow.POSITION // TypeDefIndex: 9312
{
	// Fields
	public int value__; // 0x0
	public const BattleSelectMainSubServantWindow.POSITION MAIN = 1;
	public const BattleSelectMainSubServantWindow.POSITION SUB = 2;
}

// Namespace: 
public class BattleSelectServantComponent : BaseMonoBehaviour // TypeDefIndex: 9313
{
	// Fields
	public GameObject root; // 0x18
	public ServantFaceIconComponent servantIcon; // 0x20
	public UILabel nameLabel; // 0x28
	public UILabel hpLabel; // 0x30
	public BattleHpGaugeBarComponent hpGauge; // 0x38
	public BattleNpGaugeSystemComponent npGauge; // 0x40
	public UISprite deckindexSprite; // 0x48
	public GameObject targetObject; // 0x50
	public GameObject servantSelectMask; // 0x58
	public UILabel servantSelectMaskLabel; // 0x60
	private BattleSelectServantComponent.CallBack selectCallBack; // 0x68
	private int uniqueId; // 0x70
	private BattleSelectMainSubServantWindow.POSITION position; // 0x74
	private bool isUse; // 0x78
	private bool canSelectFlag; // 0x79
	private static readonly int SERVANT_NAME_FONT_SIZE; // 0x0

	// Methods

	// RVA: 0xF17E8C Offset: 0xF17E8C VA: 0xF17E8C
	public void .ctor() { }

	// RVA: 0xF16A5C Offset: 0xF16A5C VA: 0xF16A5C
	public void setData(BattleServantData svtData, BattleSelectMainSubServantWindow.POSITION position, int index, BattleSelectServantComponent.CallBack call) { }

	// RVA: 0xF1714C Offset: 0xF1714C VA: 0xF1714C
	public void setNone() { }

	// RVA: 0xF17004 Offset: 0xF17004 VA: 0xF17004
	public void setSelectMask(bool canSelect) { }

	// RVA: 0xF1745C Offset: 0xF1745C VA: 0xF1745C
	public void setTarget(int selectUniqueId) { }

	// RVA: 0xF17E9C Offset: 0xF17E9C VA: 0xF17E9C
	public void OnServantClick() { }

	// RVA: 0xF177E0 Offset: 0xF177E0 VA: 0xF177E0
	public void ClearFaceAtlas() { }

	// RVA: 0xF18198 Offset: 0xF18198 VA: 0xF18198
	private static void .cctor() { }
}

// Namespace: 
public sealed class BattleSelectServantComponent.CallBack : MulticastDelegate // TypeDefIndex: 9314
{
	// Methods

	// RVA: 0xF16A4C Offset: 0xF16A4C VA: 0xF16A4C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF17F54 Offset: 0xF17F54 VA: 0xF17F54 Slot: 11
	public virtual void Invoke(BattleSelectMainSubServantWindow.POSITION position, int uniqueId) { }

	// RVA: 0xF181EC Offset: 0xF181EC VA: 0xF181EC Slot: 12
	public virtual IAsyncResult BeginInvoke(BattleSelectMainSubServantWindow.POSITION position, int uniqueId, AsyncCallback callback, object object) { }

	// RVA: 0xF18294 Offset: 0xF18294 VA: 0xF18294 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleSelectServantWindow : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9315
{
	// Fields
	private BattleSelectServantWindow.SelectServantCallBack selectCallBack; // 0x50
	public UILabel title_label; // 0x58
	public GameObject parentPanel; // 0x60
	public UIGrid svtRoot; // 0x68
	public UITexture[] servantTop; // 0x70
	public bool useClose; // 0x78
	public bool isSelected; // 0x79
	public Collider cnancelButton; // 0x80
	private BattleServantData[] svtList; // 0x88

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0xF182A0 Offset: 0xF182A0 VA: 0xF182A0
	public void .ctor() { }

	// RVA: 0xF182B0 Offset: 0xF182B0 VA: 0xF182B0 Slot: 7
	public override void setInitialPos() { }

	// RVA: 0xF1838C Offset: 0xF1838C VA: 0xF1838C Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF18444 Offset: 0xF18444 VA: 0xF18444 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF184A0 Offset: 0xF184A0 VA: 0xF184A0
	public void SetServantData(BattleServantData[] svtList) { }

	// RVA: 0xF189DC Offset: 0xF189DC VA: 0xF189DC
	public void SetCallBack(BattleSelectServantWindow.SelectServantCallBack callback) { }

	// RVA: 0xF189E4 Offset: 0xF189E4 VA: 0xF189E4
	public void setUseClose(bool flg) { }

	// RVA: 0xF18A9C Offset: 0xF18A9C VA: 0xF18A9C
	public void onCloseButton() { }

	// RVA: 0xF18B78 Offset: 0xF18B78 VA: 0xF18B78
	public void SelectA() { }

	// RVA: 0xF18BE0 Offset: 0xF18BE0 VA: 0xF18BE0
	public void SelectB() { }

	// RVA: 0xF18C4C Offset: 0xF18C4C VA: 0xF18C4C
	public void SelectC() { }

	// RVA: 0xF18AB0 Offset: 0xF18AB0 VA: 0xF18AB0
	public void SelectServant(int uniqeId) { }

	// RVA: 0xF18EE4 Offset: 0xF18EE4 VA: 0xF18EE4 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public sealed class BattleSelectServantWindow.SelectServantCallBack : MulticastDelegate // TypeDefIndex: 9316
{
	// Methods

	// RVA: 0xF18F2C Offset: 0xF18F2C VA: 0xF18F2C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xF18CB8 Offset: 0xF18CB8 VA: 0xF18CB8 Slot: 11
	public virtual void Invoke(int uniqueId) { }

	// RVA: 0xF18F3C Offset: 0xF18F3C VA: 0xF18F3C Slot: 12
	public virtual IAsyncResult BeginInvoke(int uniqueId, AsyncCallback callback, object object) { }

	// RVA: 0xF18FC8 Offset: 0xF18FC8 VA: 0xF18FC8 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleServantBreakPointComponent : MonoBehaviour // TypeDefIndex: 9317
{
	// Fields
	public float basePosX; // 0x18
	public float addPosX; // 0x1C
	public float scale; // 0x20
	private List<GameObject> breakPointObjList; // 0x28
	public GameObject baseObj; // 0x30
	public UISprite breakPointBackGroundSpr; // 0x38
	public UISprite breakPointSpr; // 0x40

	// Methods

	// RVA: 0xF2591C Offset: 0xF2591C VA: 0xF2591C
	public void .ctor() { }

	// RVA: 0xF2598C Offset: 0xF2598C VA: 0xF2598C
	public void Initialize(int breakPoint, int maxbreakPoint) { }
}

// Namespace: 
public class BattleServantBuffIconComponent : MonoBehaviour // TypeDefIndex: 9318
{
	// Fields
	public UISprite iconSprite; // 0x18
	public UISprite backSprite; // 0x20
	public BattlePerformanceStatus targetPerf; // 0x28
	public int buffId; // 0x30
	public bool isReady; // 0x34
	public GameObject flashEffectObj; // 0x38
	public GameObject flashEffectObjInstance; // 0x40
	private BattleBuffData.ShowBuffData nowBuff; // 0x48
	private BattleBuffData.ShowBuffData oldBuff; // 0x50

	// Methods

	// RVA: 0xF25D38 Offset: 0xF25D38 VA: 0xF25D38
	public void .ctor() { }

	// RVA: 0xF25D50 Offset: 0xF25D50 VA: 0xF25D50
	public void setIcon(int buffId) { }

	// RVA: 0xF25E38 Offset: 0xF25E38 VA: 0xF25E38
	public void setIcon(BattleBuffData.ShowBuffData buff) { }

	// RVA: 0xF26364 Offset: 0xF26364 VA: 0xF26364
	public void setImageId(int iconId) { }

	// RVA: 0xF26494 Offset: 0xF26494 VA: 0xF26494
	public void OnClick() { }

	// RVA: 0xF26540 Offset: 0xF26540 VA: 0xF26540
	public void ParentHasChanged() { }

	// RVA: 0xF260E8 Offset: 0xF260E8 VA: 0xF260E8
	private void ShowHighLight() { }

	// RVA: 0xF26644 Offset: 0xF26644 VA: 0xF26644
	public BattleBuffData.ShowBuffData GetNowBuff() { }

	// RVA: 0xF2664C Offset: 0xF2664C VA: 0xF2664C
	public void UpdateActiveBuff() { }

	// RVA: 0xF266D8 Offset: 0xF266D8 VA: 0xF266D8
	public void AddDepth(int addDepth) { }
}

// Namespace: 
public class BattleServantChangeBarComponent : BaseMonoBehaviour // TypeDefIndex: 9319
{
	// Fields
	public UISprite hpframe; // 0x18
	public UISprite frontHpBart; // 0x20
	public UISprite backHpBar; // 0x28
	public UISprite damageHpBart; // 0x30
	public Transform splitTr; // 0x38
	public UISprite splitSprite; // 0x40
	public bool isBoss; // 0x48
	private int bartype; // 0x4C
	private GameObject[] splitList; // 0x50

	// Methods

	// RVA: 0xF26744 Offset: 0xF26744 VA: 0xF26744
	public void .ctor() { }

	// RVA: 0xF267AC Offset: 0xF267AC VA: 0xF267AC
	public void setBarType(int type, int shiftIndex = 0) { }

	// RVA: 0xF26C24 Offset: 0xF26C24 VA: 0xF26C24
	public void setHpFrames(int type, int shiftIndex) { }

	// RVA: 0xF269BC Offset: 0xF269BC VA: 0xF269BC
	public void setMpFrames(int type) { }

	// RVA: 0xF27258 Offset: 0xF27258 VA: 0xF27258
	public void setSplitHp(long[] split, long maxHp) { }
}

// Namespace: 
public class BattleServantConfConponent : BattleWindowComponent // TypeDefIndex: 9320
{
	// Fields
	public UILabel atklabel; // 0x48
	public UILabel shortNameLabel; // 0x50
	public BattleCommandComponent commandCard; // 0x58
	public UILabel npdetail; // 0x60
	public UILabel nplevel; // 0x68
	public UILabel maxNp; // 0x70
	public SkillIconComponent equipSkillSprite; // 0x78
	public UILabel equipSkillNameLabel; // 0x80
	public UILabel equipSkillConfLabel; // 0x88
	public BattleViewBufflistComponent buffListView; // 0x90
	public GameObject npRoot; // 0x98
	public UILabel havenotTdLabel; // 0xA0
	public UITexture facetex; // 0xA8
	private BattleServantData bsvtData; // 0xB0
	public BattleServantConfConponent.CloseButtonCallBack callback_close; // 0xB8
	public GameObject BattleServantAbilityObj; // 0xC0
	public GameObject AbillityTab; // 0xC8
	public GameObject AbillityBtnBg; // 0xD0
	public UIButton AbillityBtn; // 0xD8
	public UISprite AbillityName; // 0xE0
	public GameObject BattleServantStateObj; // 0xE8
	public GameObject StateTab; // 0xF0
	public GameObject StateBtnBg; // 0xF8
	public UIButton StateBtn; // 0x100
	public UISprite StateName; // 0x108
	public BattleCommandComponent[] CommandCardList; // 0x110
	public UILabel NoCommandCodeLabel; // 0x118
	public GameObject CommandCodeInfoPrefab; // 0x120
	public GameObject CommandCodeListParent; // 0x128
	public UIScrollView AbillityScrollView; // 0x130
	public UIWidget AbillityScrollBarWiget; // 0x138
	public UIScrollView StateScrollView; // 0x140
	public UIWidget StateScrollBarWiget; // 0x148
	public UILabel NoEquipLabel; // 0x150
	public GameObject CardAndCommandObj; // 0x158
	public float NotEquipObjHeightPos; // 0x160
	[SerializeField] // RVA: 0xC6661C Offset: 0xC6661C VA: 0xC6661C
	private BattleServantNPSpeedChangeComponent npSpeedChange; // 0x168
	[SerializeField] // RVA: 0xC6662C Offset: 0xC6662C VA: 0xC6662C
	private GameObject equipObj; // 0x170
	public ServantClassIconComponent classIcon; // 0x178
	public GameObject ClassSkillObj; // 0x180
	public UISprite ClassSkillTitle; // 0x188
	public GameObject ClassSkillInfoPrefab; // 0x190
	public GameObject ClassSkillListParent; // 0x198
	private ServantStatusSkillComponent[] ClassSkillList; // 0x1A0
	[SerializeField] // RVA: 0xC6663C Offset: 0xC6663C VA: 0xC6663C
	private float ClassSkillOffset; // 0x1A8
	public GameObject AppendSkillObj; // 0x1B0
	public UISprite AppendSkillTitle; // 0x1B8
	public GameObject AppendSkillInfoPrefab; // 0x1C0
	public GameObject AppendSkillListParent; // 0x1C8
	private ServantStatusSkillComponent[] AppendSkillList; // 0x1D0
	[SerializeField] // RVA: 0xC6664C Offset: 0xC6664C VA: 0xC6664C
	private float AppendSkillOffset; // 0x1D8
	private BattleData data; // 0x1E0
	private UIAtlas BattleAssetUIAtlas; // 0x1E8
	private bool isEquip; // 0x1F0
	private const string SAVEKEY_BATTLE_SERVANT_DETAIL_TAB = "BattleServantDetailTab";
	private bool isOpenAfter; // 0x1F1
	private bool isCommandCardUnderIcon; // 0x1F2
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DETAIL_LABEL_DEFAULT_HEIGHT; // 0x4
	private static readonly int DETAIL_LABEL_MAX_HEIGHT; // 0x8
	private static readonly int EQIUP_SKILL_LABEL_DEFAULT_HEIGHT; // 0xC
	private int adjustHeight; // 0x1F4
	[CompilerGeneratedAttribute] // RVA: 0xC6665C Offset: 0xC6665C VA: 0xC6665C
	private static Predicate<int> <>f__am$cache0; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC6666C Offset: 0xC6666C VA: 0xC6666C
	private static Predicate<int> <>f__am$cache1; // 0x18

	// Properties
	public BattleServantData svtData { get; }
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0xF27514 Offset: 0xF27514 VA: 0xF27514
	public void .ctor() { }

	// RVA: 0xF2752C Offset: 0xF2752C VA: 0xF2752C
	public BattleServantData get_svtData() { }

	// RVA: 0xF27534 Offset: 0xF27534 VA: 0xF27534
	public void Initialize(BattleData data) { }

	// RVA: 0xF27798 Offset: 0xF27798 VA: 0xF27798
	public bool isTargetSvt(int uniqueId) { }

	// RVA: 0xF277CC Offset: 0xF277CC VA: 0xF277CC
	public void setConfData(BattleServantData inbsvtData, bool isShowBuffIcon = True) { }

	// RVA: 0xF282B4 Offset: 0xF282B4 VA: 0xF282B4
	public void setEquipList() { }

	// RVA: 0xF2AA40 Offset: 0xF2AA40 VA: 0xF2AA40
	public void ChangeLayout() { }

	// RVA: 0xF289F0 Offset: 0xF289F0 VA: 0xF289F0
	public void SetClassSkillList() { }

	// RVA: 0xF293A4 Offset: 0xF293A4 VA: 0xF293A4
	public void SetAppendSkillList() { }

	// RVA: 0xF2B13C Offset: 0xF2B13C VA: 0xF2B13C
	private void GetAppendSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, out bool[] releaseStateList, out int[] lvList, int[] releaseSkillIds, int[] releaseSkillLvs) { }

	// RVA: 0xF29E30 Offset: 0xF29E30 VA: 0xF29E30
	public void SetCommandCard() { }

	// RVA: 0xF2A148 Offset: 0xF2A148 VA: 0xF2A148
	public void SetCommandCodeSkillList() { }

	// RVA: 0xF2BB54 Offset: 0xF2BB54 VA: 0xF2BB54
	public void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF2BE50 Offset: 0xF2BE50 VA: 0xF2BE50
	public void CompOpen() { }

	// RVA: 0xF2BF18 Offset: 0xF2BF18 VA: 0xF2BF18
	public void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0xF2BF68 Offset: 0xF2BF68 VA: 0xF2BF68
	public void setCallBackPushClose(BattleServantConfConponent.CloseButtonCallBack callback) { }

	// RVA: 0xF2BF70 Offset: 0xF2BF70 VA: 0xF2BF70
	public void OnClick() { }

	// RVA: 0xF2BBAC Offset: 0xF2BBAC VA: 0xF2BBAC
	public void ResetScroll() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE648 Offset: 0xCCE648 VA: 0xCCE648
	// RVA: 0xF2BEA8 Offset: 0xF2BEA8 VA: 0xF2BEA8
	private IEnumerator StartOpenTab() { }

	// RVA: 0xF2C0B4 Offset: 0xF2C0B4 VA: 0xF2C0B4
	public bool IsLastOpenServantAbility() { }

	// RVA: 0xF2C138 Offset: 0xF2C138 VA: 0xF2C138
	public void OnClickServantAbility() { }

	// RVA: 0xF2C344 Offset: 0xF2C344 VA: 0xF2C344
	public void OnClickServantState() { }

	// RVA: 0xF2BA34 Offset: 0xF2BA34 VA: 0xF2BA34
	private void SetCommandCardTypeChangeBuff(BattleCommandComponent commandCard) { }

	// RVA: 0xF2B030 Offset: 0xF2B030 VA: 0xF2B030
	public bool SetAtlas() { }

	// RVA: 0xF2C550 Offset: 0xF2C550 VA: 0xF2C550 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0xF2C60C Offset: 0xF2C60C VA: 0xF2C60C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE658 Offset: 0xCCE658 VA: 0xCCE658
	// RVA: 0xF2C68C Offset: 0xF2C68C VA: 0xF2C68C
	private static bool <ChangeLayout>m__0(int codeId) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE668 Offset: 0xCCE668 VA: 0xCCE668
	// RVA: 0xF2C698 Offset: 0xF2C698 VA: 0xF2C698
	private static bool <SetCommandCodeSkillList>m__1(int id) { }
}

// Namespace: 
public sealed class BattleServantConfConponent.CloseButtonCallBack : MulticastDelegate // TypeDefIndex: 9321
{
	// Methods

	// RVA: 0x1669808 Offset: 0x1669808 VA: 0x1669808
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1669818 Offset: 0x1669818 VA: 0x1669818 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1669A18 Offset: 0x1669A18 VA: 0x1669A18 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1669A4C Offset: 0x1669A4C VA: 0x1669A4C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private enum BattleServantConfConponent.TAB // TypeDefIndex: 9322
{
	// Fields
	public int value__; // 0x0
	public const BattleServantConfConponent.TAB ABILLITY = 0;
	public const BattleServantConfConponent.TAB STATE = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44484 Offset: 0xC44484 VA: 0xC44484
private sealed class BattleServantConfConponent.<StartOpenTab>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9323
{
	// Fields
	internal BattleServantConfConponent $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBCC0 Offset: 0xCDBCC0 VA: 0xCDBCC0
	// RVA: 0x1669600 Offset: 0x1669600 VA: 0x1669600
	public void .ctor() { }

	// RVA: 0x1669608 Offset: 0x1669608 VA: 0x1669608 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBCD0 Offset: 0xCDBCD0 VA: 0xCDBCD0
	// RVA: 0x166977C Offset: 0x166977C VA: 0x166977C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBCE0 Offset: 0xCDBCE0 VA: 0xCDBCE0
	// RVA: 0x1669784 Offset: 0x1669784 VA: 0x1669784 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBCF0 Offset: 0xCDBCF0 VA: 0xCDBCF0
	// RVA: 0x166978C Offset: 0x166978C VA: 0x166978C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBD00 Offset: 0xCDBD00 VA: 0xCDBD00
	// RVA: 0x16697A0 Offset: 0x16697A0 VA: 0x16697A0 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattleServantConfSkillComponent : BaseMonoBehaviour // TypeDefIndex: 9324
{
	// Fields
	[SerializeField] // RVA: 0xC6667C Offset: 0xC6667C VA: 0xC6667C
	protected GameObject skillBase; // 0x18
	[SerializeField] // RVA: 0xC6668C Offset: 0xC6668C VA: 0xC6668C
	protected UISprite titleNumFirstSprite; // 0x20
	[SerializeField] // RVA: 0xC6669C Offset: 0xC6669C VA: 0xC6669C
	protected UISprite titleNumSecondSprite; // 0x28
	[SerializeField] // RVA: 0xC666AC Offset: 0xC666AC VA: 0xC666AC
	protected SkillIconComponent skillIcon; // 0x30
	[SerializeField] // RVA: 0xC666BC Offset: 0xC666BC VA: 0xC666BC
	protected UIRangeLabel skillTitleRangeLabel; // 0x38
	[SerializeField] // RVA: 0xC666CC Offset: 0xC666CC VA: 0xC666CC
	protected UILabel skillExplanationLabel; // 0x40
	[SerializeField] // RVA: 0xC666DC Offset: 0xC666DC VA: 0xC666DC
	private int DETAIL_FONT_SIZE; // 0x48
	[SerializeField] // RVA: 0xC666EC Offset: 0xC666EC VA: 0xC666EC
	private int DEFAULT_HEIGHT; // 0x4C
	private static readonly int MAX_HEIGHT; // 0x0
	private static readonly int ADJUST_HEIGHT; // 0x4
	private static readonly string SKILL_NO_FILE_PREFIX; // 0x8
	private static readonly int MAX_LEVEL; // 0x10

	// Methods

	// RVA: 0x1669A58 Offset: 0x1669A58 VA: 0x1669A58
	public void .ctor() { }

	// RVA: 0x1669A6C Offset: 0x1669A6C VA: 0x1669A6C
	public void SetItem(int num, int skillId, string titleMessage, string explanationMessage, bool releaseState, int skillLv) { }

	// RVA: 0x1669EF8 Offset: 0x1669EF8 VA: 0x1669EF8
	public int GetDefaultHeight() { }

	// RVA: 0x1669F00 Offset: 0x1669F00 VA: 0x1669F00
	public int GetHeight() { }

	// RVA: 0x1669F30 Offset: 0x1669F30 VA: 0x1669F30
	private static void .cctor() { }
}

// Namespace: 
public class BattleServantDeadComponent : MonoBehaviour // TypeDefIndex: 9325
{
	// Fields
	[SerializeField] // RVA: 0xC666FC Offset: 0xC666FC VA: 0xC666FC
	[TooltipAttribute] // RVA: 0xC666FC Offset: 0xC666FC VA: 0xC666FC
	private List<BattleServantDeadComponent.ReplaceShader> replaceShaders; // 0x18
	[SerializeField] // RVA: 0xC66748 Offset: 0xC66748 VA: 0xC66748
	[TooltipAttribute] // RVA: 0xC66748 Offset: 0xC66748 VA: 0xC66748
	private List<BattleServantDeadComponent.ReplaceShader> replaceChocoShaders; // 0x20

	// Methods

	// RVA: 0x167F948 Offset: 0x167F948 VA: 0x167F948
	public void .ctor() { }

	// RVA: 0x167F9D8 Offset: 0x167F9D8 VA: 0x167F9D8
	public Shader getReplaceDeadShader(Shader shader, Shader defaultDeadShader) { }

	// RVA: 0x167FC88 Offset: 0x167FC88 VA: 0x167FC88
	public Shader getReplaceChocoShader(Shader shader, Shader defaultChocoShader) { }
}

// Namespace: 
[Serializable]
public class BattleServantDeadComponent.ReplaceShader // TypeDefIndex: 9326
{
	// Fields
	public Shader targetShader; // 0x10
	public Shader deadShader; // 0x18

	// Methods

	// RVA: 0x167FF38 Offset: 0x167FF38 VA: 0x167FF38
	public void .ctor() { }
}

// Namespace: 
public class BattleServantHeadUpComponent : MonoBehaviour // TypeDefIndex: 9327
{
	// Fields
	public GameObject rootObject; // 0x18
	public GameObject targetRoot; // 0x20
	public GameObject targetMark; // 0x28
	public GameObject lockTargetMark; // 0x30
	public BattleServantData tmp_svtData; // 0x38
	public int index; // 0x40
	private bool flgTarget; // 0x44
	private BattleServantHeadUpComponent.MODE mode; // 0x48

	// Methods

	// RVA: 0x168054C Offset: 0x168054C VA: 0x168054C
	public void .ctor() { }

	// RVA: 0x1680554 Offset: 0x1680554 VA: 0x1680554
	public void ShowStatus(bool flg) { }

	// RVA: 0x16805D8 Offset: 0x16805D8 VA: 0x16805D8
	public void setModeWaveStart() { }

	// RVA: 0x1680604 Offset: 0x1680604 VA: 0x1680604
	public void setModeTac() { }

	// RVA: 0x16806E8 Offset: 0x16806E8 VA: 0x16806E8
	public void setModeCommand() { }

	// RVA: 0x168071C Offset: 0x168071C VA: 0x168071C
	public void setModeAction() { }

	// RVA: 0x1680638 Offset: 0x1680638 VA: 0x1680638
	public void setTargetRoot(bool flg) { }

	// RVA: 0x1680750 Offset: 0x1680750 VA: 0x1680750
	public void setData(BattleServantData svtData) { }

	// RVA: 0x168087C Offset: 0x168087C VA: 0x168087C
	public void updateView() { }

	// RVA: 0x16808C0 Offset: 0x16808C0 VA: 0x16808C0
	public void setTargetMark(int uniqueId, bool isTargetLock = False) { }

	// RVA: 0x1680B28 Offset: 0x1680B28 VA: 0x1680B28
	private void SetEnableTargetMark(bool enable) { }
}

// Namespace: 
private enum BattleServantHeadUpComponent.MODE // TypeDefIndex: 9328
{
	// Fields
	public int value__; // 0x0
	public const BattleServantHeadUpComponent.MODE NONE = 0;
	public const BattleServantHeadUpComponent.MODE WAVE_START = 1;
	public const BattleServantHeadUpComponent.MODE COMMAND = 2;
	public const BattleServantHeadUpComponent.MODE TAC = 3;
	public const BattleServantHeadUpComponent.MODE ACTION = 4;
}

// Namespace: 
public class BattleServantHpShiftComponent : BaseMonoBehaviour // TypeDefIndex: 9329
{
	// Fields
	public GameObject shiftIconClone; // 0x18
	public Vector2 addPos; // 0x20
	private int imageType; // 0x28
	private GameObject[] iconList; // 0x30

	// Methods

	// RVA: 0x1680E40 Offset: 0x1680E40 VA: 0x1680E40
	public void .ctor() { }

	// RVA: 0x1680E50 Offset: 0x1680E50 VA: 0x1680E50
	public int setInitValue(BattleServantData svtData) { }

	// RVA: 0x1681024 Offset: 0x1681024 VA: 0x1681024
	public string getSpriteName(int count) { }

	// RVA: 0x168122C Offset: 0x168122C VA: 0x168122C
	public void createIconList(int shiftCount) { }

	// RVA: 0x16815D8 Offset: 0x16815D8 VA: 0x16815D8
	public void setValue(BattleServantData svtData) { }

	// RVA: 0x1681794 Offset: 0x1681794 VA: 0x1681794
	public void UpdateHideInvalidIcon(int dispMaxPos) { }

	// RVA: 0x1681910 Offset: 0x1681910 VA: 0x1681910
	public void UpdateIcon(int index, bool isEmpty, bool isActive = True) { }

	// RVA: 0x1681A4C Offset: 0x1681A4C VA: 0x1681A4C
	public void UpdateIconActive(int index, bool isActive = True) { }

	// RVA: 0x1681B1C Offset: 0x1681B1C VA: 0x1681B1C
	public bool IsIconActive(int index) { }

	// RVA: 0x1681BE8 Offset: 0x1681BE8 VA: 0x1681BE8
	public void playShiftEffectBefore(BattleServantData svtData) { }

	// RVA: 0x1681E2C Offset: 0x1681E2C VA: 0x1681E2C
	public void playShiftEffect(BattleServantData svtData) { }

	// RVA: 0x16820F4 Offset: 0x16820F4 VA: 0x16820F4
	public bool PlayShiftEffectGeneral(int index, BattleServantHpShiftComponent.EffectData effectData, Action<int> callBack) { }
}

// Namespace: 
public class BattleServantHpShiftComponent.EffectData // TypeDefIndex: 9330
{
	// Fields
	public string prefixAsset; // 0x10
	public string prefixEffect; // 0x18

	// Methods

	// RVA: 0x1560070 Offset: 0x1560070 VA: 0x1560070
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44494 Offset: 0xC44494 VA: 0xC44494
private sealed class BattleServantHpShiftComponent.<PlayShiftEffectGeneral>c__AnonStorey0 // TypeDefIndex: 9331
{
	// Fields
	internal Action<int> callBack; // 0x10
	internal int index; // 0x18

	// Methods

	// RVA: 0x1560014 Offset: 0x1560014 VA: 0x1560014
	public void .ctor() { }

	// RVA: 0x156001C Offset: 0x156001C VA: 0x156001C
	internal void <>m__0() { }
}

// Namespace: 
public class BattleServantNPSpeedChangeComponent : MonoBehaviour // TypeDefIndex: 9332
{
	// Fields
	private const float defaultPositionZ = -698;
	private const float offsetZ = 126;
	private readonly Color maskColor; // 0x18
	private readonly Color maskLabelEffectColor; // 0x28
	[SerializeField] // RVA: 0xC66794 Offset: 0xC66794 VA: 0xC66794
	private UICommonButton[] npSpeedButtonArray; // 0x38
	[SerializeField] // RVA: 0xC667A4 Offset: 0xC667A4 VA: 0xC667A4
	private UISprite[] npSpeedButtonSpriteArray; // 0x40
	[SerializeField] // RVA: 0xC667B4 Offset: 0xC667B4 VA: 0xC667B4
	private UIRangeLabel[] npSpeedLabelArray; // 0x48
	[SerializeField] // RVA: 0xC667C4 Offset: 0xC667C4 VA: 0xC667C4
	private UILabel explanationLabel; // 0x50
	[SerializeField] // RVA: 0xC667D4 Offset: 0xC667D4 VA: 0xC667D4
	private UILabel supportServantLabel; // 0x58
	private BattleServantData battleServantData; // 0x60
	public float equipeOffsetZ; // 0x68
	private bool isSupport; // 0x6C

	// Methods

	// RVA: 0x15600E8 Offset: 0x15600E8 VA: 0x15600E8
	public void .ctor() { }

	// RVA: 0x15601A0 Offset: 0x15601A0 VA: 0x15601A0
	public void SetData(BattleServantData battleSvtData) { }

	// RVA: 0x1560AA4 Offset: 0x1560AA4 VA: 0x1560AA4
	public void SetButtonPosition(int commandCodeSkillLength) { }

	// RVA: 0x1560B5C Offset: 0x1560B5C VA: 0x1560B5C
	public float CalcCommandCodeOffset(int commandCodeSkillLength) { }

	// RVA: 0x156080C Offset: 0x156080C VA: 0x156080C
	public void SetButton() { }

	// RVA: 0x1560B8C Offset: 0x1560B8C VA: 0x1560B8C
	private int GetSelectedButtonIndex(int svtCommonFlag) { }

	// RVA: 0x1560BA4 Offset: 0x1560BA4 VA: 0x1560BA4
	public void OnClickButton(UICommonButton button) { }

	// RVA: 0x156044C Offset: 0x156044C VA: 0x156044C
	private void SetSupportServantButton() { }
}

// Namespace: 
public class BattleServantParamComponent : BaseMonoBehaviour, IEventMessageRecieve, IEventSystemHandler // TypeDefIndex: 9333
{
	// Fields
	public GameObject root; // 0x18
	public GameObject target; // 0x20
	public int index; // 0x28
	public int uniqueID; // 0x2C
	public bool hpformatflg; // 0x30
	public UILabel hplabel; // 0x38
	public UILabel maxhplabel; // 0x40
	public UILabel totalhplabel; // 0x48
	public UISprite breakSprite; // 0x50
	public BattleHpGaugeBarComponent hpGauge; // 0x58
	public BattleServantChangeBarComponent hpChange; // 0x60
	public BattleServantHpShiftComponent hpShift; // 0x68
	public ServantClassIconComponent clsIconComponent; // 0x70
	public UILabel levelLabel; // 0x78
	public UILabel nameLabel; // 0x80
	public UILabel shortNameLabel; // 0x88
	private int defaultShortNameLabelWidth; // 0x90
	public BattleNpGaugeSystemComponent npcomp; // 0x98
	public BattleNextTDgaugeComponent nextTdGauge; // 0xA0
	public UITexture facetex; // 0xA8
	public UISprite bg; // 0xB0
	public UISprite friendIcon; // 0xB8
	public UISprite roleTypeSprite; // 0xC0
	public BattleServantShowBuffComponent showBuffComponent; // 0xC8
	public Transform skillRoot; // 0xD0
	public BattleServantSkillIConComponent[] skillIcon; // 0xD8
	public GameObject targetMark; // 0xE0
	public GameObject lockTargetMark; // 0xE8
	public BattleServantBreakPointComponent breakPoint; // 0xF0
	private BattleServantData data; // 0xF8
	protected BattlePerformance perf; // 0x100
	private GameObject[] effectobj; // 0x108
	private Queue<BattleActionData.BuffData> sideEffectShowQueue; // 0x110
	private bool isShowingSideEffect; // 0x118
	public BattleEffectControl battleEffectControl; // 0x120
	[SerializeField] // RVA: 0xC667E4 Offset: 0xC667E4 VA: 0xC667E4
	[TooltipAttribute] // RVA: 0xC667E4 Offset: 0xC667E4 VA: 0xC667E4
	private Vector3 sideEffectScl; // 0x128
	[SerializeField] // RVA: 0xC66830 Offset: 0xC66830 VA: 0xC66830
	[TooltipAttribute] // RVA: 0xC66830 Offset: 0xC66830 VA: 0xC66830
	private float sideEffectLabelWidth; // 0x134
	private static readonly float SideEffectShowWaitTime; // 0x0
	private BattleServantParamComponent.WINDOW_MODE modeWindow; // 0x138
	private int shiftGaugeMaxHp; // 0x13C
	private readonly Color GRAY; // 0x140
	private bool isActiveHpBar; // 0x150

