	public void PlayShiftEffectGeneral(int index, BattleServantHpShiftComponent.EffectData effectData) { }

	// RVA: 0x1ADB778 Offset: 0x1ADB778 VA: 0x1ADB778
	public void PlayUpShiftEffect(int index, float delayTime, BattleServantHpShiftComponent.EffectData effectData) { }

	// RVA: 0x1ADB91C Offset: 0x1ADB91C VA: 0x1ADB91C
	public void PlayDownShiftEffect(int index, BattleServantHpShiftComponent.EffectData effectData) { }

	// RVA: 0x1ADBA00 Offset: 0x1ADBA00 VA: 0x1ADBA00
	public void UpdateShiftChange(int curGaugeIndex) { }

	// RVA: 0x1ADBAB4 Offset: 0x1ADBAB4 VA: 0x1ADBAB4
	public void InitNextTdGauge() { }

	// RVA: 0x1ADBBBC Offset: 0x1ADBBBC VA: 0x1ADBBBC
	public void UpdateShiftGaugeChangeHp(int fromHp, int toHp, int maxHp, float time, BasePlayShiftGauge playShiftGauge) { }

	// RVA: 0x1ADBF04 Offset: 0x1ADBF04 VA: 0x1ADBF04
	private void OnUpdateShiftGaugeChangeHp(int nowHp) { }

	// RVA: 0x1ADC004 Offset: 0x1ADC004 VA: 0x1ADC004
	private void OnCompleteShiftGaugeChangeHp(BasePlayShiftGauge playShiftGauge) { }

	// RVA: 0x1ADC040 Offset: 0x1ADC040 VA: 0x1ADC040
	public void shiftUpdateStatus() { }

	// RVA: 0x1ADC644 Offset: 0x1ADC644 VA: 0x1ADC644
	public void changeUpdateStatus() { }

	// RVA: 0x1ADC6D0 Offset: 0x1ADC6D0 VA: 0x1ADC6D0
	public void updateShiftHplabel(int nowHp) { }

	// RVA: 0x1ADC724 Offset: 0x1ADC724 VA: 0x1ADC724
	public void playAddition() { }

	// RVA: 0x1ADC7C4 Offset: 0x1ADC7C4 VA: 0x1ADC7C4
	public void showSideEffect(BattleActionData.BuffData buffData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BC5C Offset: 0xD3BC5C VA: 0xD3BC5C
	// RVA: 0x1ADC86C Offset: 0x1ADC86C VA: 0x1ADC86C
	private IEnumerator showSideEffectList() { }

	// RVA: 0x1ADC8E4 Offset: 0x1ADC8E4 VA: 0x1ADC8E4
	private void popBuffLabel(BattleActionData.BuffData buffData) { }

	// RVA: 0x1ADD2C8 Offset: 0x1ADD2C8 VA: 0x1ADD2C8
	public void clearBuffIconList() { }

	// RVA: 0x1ADB8F0 Offset: 0x1ADB8F0 VA: 0x1ADB8F0
	public void DelayCoroutine(float waitTime, BattleCallBackBase callBack) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BC6C Offset: 0xD3BC6C VA: 0xD3BC6C
	// RVA: 0x1ADD368 Offset: 0x1ADD368 VA: 0x1ADD368
	private IEnumerator DelayMethod(float waitTime, BattleCallBackBase callBack) { }

	// RVA: 0x1AD9DEC Offset: 0x1AD9DEC VA: 0x1AD9DEC
	private void UpdateStatusFace() { }

	// RVA: 0x1AD9EF4 Offset: 0x1AD9EF4 VA: 0x1AD9EF4
	private void UpdateNameLabel() { }

	// RVA: 0x1AD9FBC Offset: 0x1AD9FBC VA: 0x1AD9FBC
	private void UpdateShortNameLabel() { }

	// RVA: 0x1ADD404 Offset: 0x1ADD404 VA: 0x1ADD404
	private static void .cctor() { }
}

// Namespace: 
private enum BattleServantParamComponent.WINDOW_MODE // TypeDefIndex: 9308
{
	// Fields
	public int value__; // 0x0
	public const BattleServantParamComponent.WINDOW_MODE NONE = 0;
	public const BattleServantParamComponent.WINDOW_MODE INIT = 1;
	public const BattleServantParamComponent.WINDOW_MODE OPEN = 2;
	public const BattleServantParamComponent.WINDOW_MODE CLOSE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0540 Offset: 0xCB0540 VA: 0xCB0540
private sealed class BattleServantParamComponent.<coroutineUpdateSkillRankUpEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9309
{
	// Fields
	internal bool <isUpdate>__0; // 0x10
	internal BattleServantSkillIConComponent[] $locvar0; // 0x18
	internal int $locvar1; // 0x20
	internal BattleServantParamComponent $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48F84 Offset: 0xD48F84 VA: 0xD48F84
	// RVA: 0x1ADACB8 Offset: 0x1ADACB8 VA: 0x1ADACB8
	public void .ctor() { }

	// RVA: 0x1ADD5D0 Offset: 0x1ADD5D0 VA: 0x1ADD5D0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F94 Offset: 0xD48F94 VA: 0xD48F94
	// RVA: 0x1ADD97C Offset: 0x1ADD97C VA: 0x1ADD97C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48FA4 Offset: 0xD48FA4 VA: 0xD48FA4
	// RVA: 0x1ADD984 Offset: 0x1ADD984 VA: 0x1ADD984 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48FB4 Offset: 0xD48FB4 VA: 0xD48FB4
	// RVA: 0x1ADD98C Offset: 0x1ADD98C VA: 0x1ADD98C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48FC4 Offset: 0xD48FC4 VA: 0xD48FC4
	// RVA: 0x1ADD9A0 Offset: 0x1ADD9A0 VA: 0x1ADD9A0 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0550 Offset: 0xCB0550 VA: 0xCB0550
private sealed class BattleServantParamComponent.<showSideEffectList>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9310
{
	// Fields
	internal BattleActionData.BuffData <param>__1; // 0x10
	internal BattleServantParamComponent $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48FD4 Offset: 0xD48FD4 VA: 0xD48FD4
	// RVA: 0x1ADC8DC Offset: 0x1ADC8DC VA: 0x1ADC8DC
	public void .ctor() { }

	// RVA: 0x1ADDA08 Offset: 0x1ADDA08 VA: 0x1ADDA08 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48FE4 Offset: 0xD48FE4 VA: 0xD48FE4
	// RVA: 0x1ADDC20 Offset: 0x1ADDC20 VA: 0x1ADDC20 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48FF4 Offset: 0xD48FF4 VA: 0xD48FF4
	// RVA: 0x1ADDC28 Offset: 0x1ADDC28 VA: 0x1ADDC28 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49004 Offset: 0xD49004 VA: 0xD49004
	// RVA: 0x1ADDC30 Offset: 0x1ADDC30 VA: 0x1ADDC30 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49014 Offset: 0xD49014 VA: 0xD49014
	// RVA: 0x1ADDC44 Offset: 0x1ADDC44 VA: 0x1ADDC44 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0560 Offset: 0xCB0560 VA: 0xCB0560
private sealed class BattleServantParamComponent.<DelayMethod>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9311
{
	// Fields
	internal float waitTime; // 0x10
	internal BattleCallBackBase callBack; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD49024 Offset: 0xD49024 VA: 0xD49024
	// RVA: 0x1ADD3FC Offset: 0x1ADD3FC VA: 0x1ADD3FC
	public void .ctor() { }

	// RVA: 0x1ADD458 Offset: 0x1ADD458 VA: 0x1ADD458 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49034 Offset: 0xD49034 VA: 0xD49034
	// RVA: 0x1ADD544 Offset: 0x1ADD544 VA: 0x1ADD544 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49044 Offset: 0xD49044 VA: 0xD49044
	// RVA: 0x1ADD54C Offset: 0x1ADD54C VA: 0x1ADD54C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49054 Offset: 0xD49054 VA: 0xD49054
	// RVA: 0x1ADD554 Offset: 0x1ADD554 VA: 0x1ADD554 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49064 Offset: 0xD49064 VA: 0xD49064
	// RVA: 0x1ADD568 Offset: 0x1ADD568 VA: 0x1ADD568 Slot: 6
	public void Reset() { }
}

// Namespace: 
public interface IEventMessageRecieve : IEventSystemHandler // TypeDefIndex: 9312
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void updateNp(BattleServantData svtdata, int[] npArray, int index);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void updateBuffIconList(BattleServantData svtdata, bool doAuraUpdate);
}

// Namespace: 
public class BattleServantRaidParamComponent : BattleServantParamComponent // TypeDefIndex: 9313
{
	// Fields
	public BattleHpGaugeBarComponent raidhpGauge; // 0x158
	public UILabel raidhplabel; // 0x160
	public UISprite raidDownNormalSprite; // 0x168
	public UISprite raidDownLastSprite; // 0x170
	public UISprite raidDownEndSprite; // 0x178
	public BattleServantChangeBarComponent changeGauge; // 0x180
	public UILabel stateLabel; // 0x188
	private BattleRaidInfo newinfo; // 0x190
	private BattleRaidInfo previnfo; // 0x198
	private bool flgUpdate; // 0x1A0
	private int hpBarType; // 0x1A4
	private bool isDefeatCount; // 0x1A8
	private bool isJumbleRaid; // 0x1A9
	private string hpformat; // 0x1B0

	// Properties
	private string RaidHPFormat { get; }

	// Methods

	// RVA: 0x1ADDCAC Offset: 0x1ADDCAC VA: 0x1ADDCAC
	public void .ctor() { }

	// RVA: 0x1ADDD10 Offset: 0x1ADDD10 VA: 0x1ADDD10
	private string get_RaidHPFormat() { }

	// RVA: 0x1ADDE98 Offset: 0x1ADDE98 VA: 0x1ADDE98 Slot: 6
	public override void setData(BattleServantData data) { }

	// RVA: 0x1ADE53C Offset: 0x1ADE53C VA: 0x1ADE53C
	public void setTypeDefeatCount(bool flg) { }

	// RVA: 0x1ADE548 Offset: 0x1ADE548 VA: 0x1ADE548
	public void setTypeJumbleRaid(bool flg) { }

	// RVA: 0x1ADE554 Offset: 0x1ADE554 VA: 0x1ADE554
	public void setSplitHp(long[] split, long maxhp) { }

	// RVA: 0x1ADE59C Offset: 0x1ADE59C VA: 0x1ADE59C
	public void updateRaidInfo(BattleRaidInfo info, bool fixUpdate = False) { }

	// RVA: 0x1ADE630 Offset: 0x1ADE630 VA: 0x1ADE630
	public bool checkRaidUpdateHp() { }

	// RVA: 0x1ADE61C Offset: 0x1ADE61C VA: 0x1ADE61C
	public void updateRaidHp() { }

	// RVA: 0x1ADE990 Offset: 0x1ADE990 VA: 0x1ADE990 Slot: 8
	public override void changeHp(BattleServantData svtData) { }

	// RVA: 0x1ADE638 Offset: 0x1ADE638 VA: 0x1ADE638
	public void updateRaidHpBase(BattleServantData svtData) { }

	// RVA: 0x1ADEC08 Offset: 0x1ADEC08 VA: 0x1ADEC08
	public void updateRaidHpbar(long now, long max) { }

	// RVA: 0x1ADE9BC Offset: 0x1ADE9BC VA: 0x1ADE9BC
	public void setRaidDownMessage() { }

	// RVA: 0x1ADE2CC Offset: 0x1ADE2CC VA: 0x1ADE2CC
	public void updateStateString() { }

	// RVA: 0x1ADED04 Offset: 0x1ADED04 VA: 0x1ADED04
	public long getTurnSituationParam() { }
}

// Namespace: 
public class BattleServantShowBuffComponent : BaseMonoBehaviour // TypeDefIndex: 9314
{
	// Fields
	public GameObject IconClone; // 0x18
	public int maxCount; // 0x20
	public int maxLine; // 0x24
	public Transform listTr; // 0x28
	public Vector2 addPos; // 0x30
	private List<GameObject> objList; // 0x38
	private BattleBuffData.ShowBuffData[] datalist; // 0x40

	// Methods

	// RVA: 0x1ADED30 Offset: 0x1ADED30 VA: 0x1ADED30
	public void .ctor() { }

	// RVA: 0x1ADB05C Offset: 0x1ADB05C VA: 0x1ADB05C
	public void setBuffList(BattleBuffData.ShowBuffData[] buffList) { }

	// RVA: 0x1ADEF54 Offset: 0x1ADEF54 VA: 0x1ADEF54
	private void CreateBuffObj(int index) { }

	// RVA: 0x1ADEDA8 Offset: 0x1ADEDA8 VA: 0x1ADEDA8
	private void HideBuffObject() { }

	// RVA: 0x1ADF09C Offset: 0x1ADF09C VA: 0x1ADF09C
	private bool UpdateBuff(int index) { }

	// RVA: 0x1ADF2A0 Offset: 0x1ADF2A0 VA: 0x1ADF2A0
	private void NewBuff(int index) { }

	// RVA: 0x1ADB2D8 Offset: 0x1ADB2D8 VA: 0x1ADB2D8
	public void UpdateActiveBuffList() { }

	// RVA: 0x1ADF438 Offset: 0x1ADF438 VA: 0x1ADF438
	private void UpdatePosition(GameObject obj, int index) { }
}

// Namespace: 
public class BattleServantSkillIConComponent : BaseMonoBehaviour // TypeDefIndex: 9315
{
	// Fields
	public GameObject root; // 0x18
	public GameObject target; // 0x20
	public BattleServantSkillIConComponent.SHOW_TYPE showType; // 0x28
	public UISprite skillIcon; // 0x30
	public UILabel turnNoLabel; // 0x38
	public UISprite turnNoLabelBase; // 0x40
	public GameObject flashIcon; // 0x48
	public UISprite noActSprite; // 0x50
	protected BattleSkillInfoData skillInfo; // 0x58
	private bool flashFlg; // 0x60
	public GameObject rankupRoot; // 0x68
	private CommonEffectComponent rankupEffect; // 0x70
	private UISprite rankupSprite; // 0x78
	public GameObject useCondRoot; // 0x80
	private UISprite useCondItemIcon; // 0x88
	private UILabel useCondItemCountLabel; // 0x90
	private const int USE_COND_ITEM_COUNT_MAX_WIDTH = 32;
	private UIAtlas defaultNoActAtlas; // 0x98
	private bool isNoSkillSprite; // 0xA0
	private bool isTweenReverse; // 0xA1
	private int tweenNoActTurn; // 0xA4
	private int tweenNoSkillTurn; // 0xA8
	public float changeTimeSealSprite; // 0xAC
	private bool isTweenSealSkillSelect; // 0xB0

	// Methods

	// RVA: 0x1ADF4E0 Offset: 0x1ADF4E0 VA: 0x1ADF4E0
	public void .ctor() { }

	// RVA: 0x1ADA9B0 Offset: 0x1ADA9B0 VA: 0x1ADA9B0
	public void setNoSkill(int val = 0) { }

	// RVA: 0x1ADF4F8 Offset: 0x1ADF4F8 VA: 0x1ADF4F8
	public void setCollider(bool flg) { }

	// RVA: 0x1ADA5A8 Offset: 0x1ADA5A8 VA: 0x1ADA5A8
	public void SetSkillInfo(BattleSkillInfoData skillInfo, bool isActSkill = True, int sealSkillTurn = 0, int noActTurn = 0, bool IsSealSkillSelect = False) { }

	// RVA: 0x1ADF6D4 Offset: 0x1ADF6D4 VA: 0x1ADF6D4
	public void setSkillIcon(BattleSkillInfoData skillInfo) { }

	// RVA: 0x1AE0290 Offset: 0x1AE0290 VA: 0x1AE0290
	public void setTurnLabel(int turn) { }

	// RVA: 0x1ADFC10 Offset: 0x1ADFC10 VA: 0x1ADFC10
	public void startChangeSealActSprite(int noActTurn, int sealSkillTurn, bool IsSealSkillSelect) { }

	// RVA: 0x1AE0C0C Offset: 0x1AE0C0C VA: 0x1AE0C0C
	public void updateSealActSpriteValues(float value) { }

	// RVA: 0x1AE0E08 Offset: 0x1AE0E08 VA: 0x1AE0E08
	public void completeSealActSpriteValues() { }

	// RVA: 0x1ADFB88 Offset: 0x1ADFB88 VA: 0x1ADFB88
	public void stopSealActSprite() { }

	// RVA: 0x1AD8C0C Offset: 0x1AD8C0C VA: 0x1AD8C0C
	public void setflashFlg(bool flg) { }

	// RVA: 0x1ADF8A4 Offset: 0x1ADF8A4 VA: 0x1ADF8A4
	public void updateFlashSkill() { }

	// RVA: 0x1ADF980 Offset: 0x1ADF980 VA: 0x1ADF980
	public void changeTurnCount(int turn) { }

	// RVA: 0x1AE0F44 Offset: 0x1AE0F44 VA: 0x1AE0F44 Slot: 4
	public virtual void OnLongTapIcon() { }

	// RVA: 0x1AE1130 Offset: 0x1AE1130 VA: 0x1AE1130 Slot: 5
	public virtual void OnClickIcon() { }

	// RVA: 0x1AE0FD0 Offset: 0x1AE0FD0 VA: 0x1AE0FD0
	private void ClickSkillIconFunc(bool isLong) { }

	// RVA: 0x1ADAB28 Offset: 0x1ADAB28 VA: 0x1ADAB28
	public void showChageEffect() { }

	// RVA: 0x1ADD7E4 Offset: 0x1ADD7E4 VA: 0x1ADD7E4
	public bool UpdateSkillRankUpEffect() { }

	// RVA: 0x1ADACC0 Offset: 0x1ADACC0 VA: 0x1ADACC0
	public void DeleteRankUpEffect() { }

	// RVA: 0x1AE11BC Offset: 0x1AE11BC VA: 0x1AE11BC
	public bool PlayRankUpEffect(string resPath, GameObject root, bool isSkip) { }

	// RVA: 0x1ADAD8C Offset: 0x1ADAD8C VA: 0x1ADAD8C
	public void RemoveEffectClearRankUpBuff() { }

	// RVA: 0x1AE1330 Offset: 0x1AE1330 VA: 0x1AE1330
	public BattleRankUpSkillInfoData.RankUpState GetRankUpState() { }

	// RVA: 0x1AE0408 Offset: 0x1AE0408 VA: 0x1AE0408
	public void UpdateRankUpEffectState() { }

	// RVA: 0x1AE0590 Offset: 0x1AE0590 VA: 0x1AE0590
	private void SetUseCond() { }
}

// Namespace: 
public enum BattleServantSkillIConComponent.SHOW_TYPE // TypeDefIndex: 9316
{
	// Fields
	public int value__; // 0x0
	public const BattleServantSkillIConComponent.SHOW_TYPE NONE = 0;
	public const BattleServantSkillIConComponent.SHOW_TYPE NOMAL = 1;
	public const BattleServantSkillIConComponent.SHOW_TYPE NOTOUCH = 2;
}

// Namespace: 
public class BattleServantSuperBossParamComponent : BattleServantParamComponent // TypeDefIndex: 9317
{
	// Fields
	public BattleHpGaugeBarComponent superbosshpGauge; // 0x158
	public UILabel superBosshplabel; // 0x160
	public BattleServantChangeBarComponent changeGauge; // 0x168
	public UILabel stateLabel; // 0x170
	private BattleSuperBossInfo newinfo; // 0x178
	private BattleSuperBossInfo previnfo; // 0x180
	private bool flgUpdate; // 0x188
	private string hpformat; // 0x190

	// Properties
	private string SuperBossHPFormat { get; }

	// Methods

	// RVA: 0x1AE158C Offset: 0x1AE158C VA: 0x1AE158C
	public void .ctor() { }

	// RVA: 0x1AE15F0 Offset: 0x1AE15F0 VA: 0x1AE15F0
	private string get_SuperBossHPFormat() { }

	// RVA: 0x1AE1670 Offset: 0x1AE1670 VA: 0x1AE1670 Slot: 6
	public override void setData(BattleServantData data) { }

	// RVA: 0x1AE1AE0 Offset: 0x1AE1AE0 VA: 0x1AE1AE0
	public void setSplitHp(long[] split, long maxhp) { }

	// RVA: 0x1AE1B28 Offset: 0x1AE1B28 VA: 0x1AE1B28
	public void updateSuperBossInfo(BattleSuperBossInfo info, bool fixUpdate = False) { }

	// RVA: 0x1AE1BA0 Offset: 0x1AE1BA0 VA: 0x1AE1BA0
	public void updateSuperBossHp() { }

	// RVA: 0x1AE1F30 Offset: 0x1AE1F30 VA: 0x1AE1F30 Slot: 8
	public override void changeHp(BattleServantData svtData) { }

	// RVA: 0x1AE1CC0 Offset: 0x1AE1CC0 VA: 0x1AE1CC0
	public long getNowHp(BattleServantData svtData) { }

	// RVA: 0x1AE1E34 Offset: 0x1AE1E34 VA: 0x1AE1E34
	public void updateSuperBossHpbar(long now, long max) { }

	// RVA: 0x1AE1DD0 Offset: 0x1AE1DD0 VA: 0x1AE1DD0
	public void setDownMessage() { }

	// RVA: 0x1AE1890 Offset: 0x1AE1890 VA: 0x1AE1890
	public void updateStateString() { }
}

// Namespace: 
public class BattleSkillConfComponent : BattleWindowComponent // TypeDefIndex: 9318
{
	// Fields
	public GameObject target; // 0x48
	public UILabel skillNameLabel; // 0x50
	private ServantSkillStrengthStatus skillStrengthStatus; // 0x58
	public UILabel skillConfLabel; // 0x60
	public UILabel skillChargeLabel; // 0x68
	public BattleServantSkillIConComponent skillIcon; // 0x70
	public GameObject okButton; // 0x78
	public GameObject cancelButton; // 0x80
	public GameObject closeButton; // 0x88
	private bool isPlayedSe; // 0x90
	private BattleSkillInfoData skillInfo; // 0x98
	private bool isPlaySkill; // 0xA0
	public UIScrollView scrollView; // 0xA8
	public GameObject noCondRoot; // 0xB0
	public UILabel useCondSkillConfLabel; // 0xB8
	public UIScrollView useCondScrollView; // 0xC0
	public GameObject useCondRoot; // 0xC8
	public UISprite useCondItemLess; // 0xD0
	public UISprite useCondItemIcon; // 0xD8
	public UILabel useCondItemCount; // 0xE0
	public UISprite useCondItemConsume; // 0xE8
	public UILabel useCondItemConsumeCount; // 0xF0
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DETAIL_LABEL_DEFAULT_HEIGHT; // 0x4
	private static readonly int DETAIL_LABEL_MAX_HEIGHT; // 0x8
	private const int USE_COND_ITEM_COUNT_MAX_WIDTH = 40;
	private BattleData data; // 0xF8

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1AE3638 Offset: 0x1AE3638 VA: 0x1AE3638
	public void .ctor() { }

	// RVA: 0x1AE3658 Offset: 0x1AE3658 VA: 0x1AE3658
	public void setInit(BattleData data) { }

	// RVA: 0x1AE36F0 Offset: 0x1AE36F0 VA: 0x1AE36F0
	public void SetSkillConf(BattleSkillInfoData skillInfo, bool cancelOk = True, bool isSetMinSize = True) { }

	// RVA: 0x1AE4CC0 Offset: 0x1AE4CC0 VA: 0x1AE4CC0
	public void onClickCancel() { }

	// RVA: 0x1AE4E28 Offset: 0x1AE4E28 VA: 0x1AE4E28
	public void onClickOK() { }

	// RVA: 0x1AE4598 Offset: 0x1AE4598 VA: 0x1AE4598
	private void SetUseCond() { }

	// RVA: 0x1AE505C Offset: 0x1AE505C VA: 0x1AE505C
	public void OnClick() { }

	// RVA: 0x1AE5060 Offset: 0x1AE5060 VA: 0x1AE5060
	public void ToEnableLabelCollider() { }

	// RVA: 0x1AE5164 Offset: 0x1AE5164 VA: 0x1AE5164 Slot: 13
	public override void CompClose() { }

	// RVA: 0x1AE51FC Offset: 0x1AE51FC VA: 0x1AE51FC Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x1AE5244 Offset: 0x1AE5244 VA: 0x1AE5244
	private static void .cctor() { }
}

// Namespace: 
public class BattleSyncTransformComponent : MonoBehaviour // TypeDefIndex: 9319
{
	// Fields
	[SerializeField] // RVA: 0xCD3574 Offset: 0xCD3574 VA: 0xCD3574
	protected BattleSyncTransformComponent.SyncData syncData; // 0x18
	protected Transform targetObj; // 0x20

	// Properties
	public bool IsNotExecSync { get; }

	// Methods

	// RVA: 0x1AE72D0 Offset: 0x1AE72D0 VA: 0x1AE72D0
	public void .ctor() { }

	// RVA: 0x1AE7340 Offset: 0x1AE7340 VA: 0x1AE7340
	public bool get_IsNotExecSync() { }

	// RVA: 0x1AE7374 Offset: 0x1AE7374 VA: 0x1AE7374
	public BattleSyncTransformComponent SetTarget(Transform target, BattleSyncTransformComponent syncSetting) { }

	// RVA: 0x1AE73B0 Offset: 0x1AE73B0 VA: 0x1AE73B0
	protected void SyncTarget() { }

	// RVA: 0x1AE78A0 Offset: 0x1AE78A0 VA: 0x1AE78A0
	private void LateUpdate() { }
}

// Namespace: 
public enum BattleSyncTransformComponent.SyncTargetType // TypeDefIndex: 9320
{
	// Fields
	public int value__; // 0x0
	public const BattleSyncTransformComponent.SyncTargetType None = 0;
	public const BattleSyncTransformComponent.SyncTargetType POS = 1;
	public const BattleSyncTransformComponent.SyncTargetType ROTATION = 2;
	public const BattleSyncTransformComponent.SyncTargetType POS_ROTATION = 3;
	public const BattleSyncTransformComponent.SyncTargetType SCALE = 4;
	public const BattleSyncTransformComponent.SyncTargetType POS_SCALE = 5;
	public const BattleSyncTransformComponent.SyncTargetType ROTATION_SCALE = 6;
	public const BattleSyncTransformComponent.SyncTargetType ALL = 7;
}

// Namespace: 
public enum BattleSyncTransformComponent.SyncParamType // TypeDefIndex: 9321
{
	// Fields
	public int value__; // 0x0
	public const BattleSyncTransformComponent.SyncParamType POSITION = 1;
	public const BattleSyncTransformComponent.SyncParamType ROTATION = 2;
	public const BattleSyncTransformComponent.SyncParamType SCALE = 4;
}

// Namespace: 
[Serializable]
public class BattleSyncTransformComponent.SyncData // TypeDefIndex: 9322
{
	// Fields
	public BattleSyncTransformComponent.SyncTargetType syncType; // 0x10
	public Vector3 positionDiff; // 0x14
	public Vector3 rotationDiff; // 0x20
	public Vector3 scaleDiff; // 0x2C

	// Methods

	// RVA: 0x1AE7338 Offset: 0x1AE7338 VA: 0x1AE7338
	public void .ctor() { }

	// RVA: 0x1AE7638 Offset: 0x1AE7638 VA: 0x1AE7638
	public bool IsSyncParam(BattleSyncTransformComponent.SyncParamType paramType) { }

	// RVA: 0x1AE7648 Offset: 0x1AE7648 VA: 0x1AE7648
	public Vector3 GetFixPosition(Vector3 position) { }

	// RVA: 0x1AE76F0 Offset: 0x1AE76F0 VA: 0x1AE76F0
	public Quaternion GetFixRotation(Quaternion rotation) { }

	// RVA: 0x1AE77F8 Offset: 0x1AE77F8 VA: 0x1AE77F8
	public Vector3 GetFixScale(Vector3 scale) { }
}

// Namespace: 
public class BattleTDConfWIndowComponent : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9323
{
	// Fields
	public UILabel nameLabel; // 0x50
	public UILabel rubyLabel; // 0x58
	public UILabel lvLabel; // 0x60
	public UILabel maxParLbal; // 0x68
	public UILabel confLabel; // 0x70
	public UIScrollView scrollView; // 0x78
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DEFAULT_LABEL_HEIGHT; // 0x4
	private static readonly int DETAIL_LABEL_MAX_HEIGHT; // 0x8

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1AE78A4 Offset: 0x1AE78A4 VA: 0x1AE78A4
	public void .ctor() { }

	// RVA: 0x1AE78C4 Offset: 0x1AE78C4 VA: 0x1AE78C4
	public void setData(int tdId, int lv, string overwriteTDName, string overwriteTDRuby) { }

	// RVA: 0x1AE7CB0 Offset: 0x1AE7CB0 VA: 0x1AE7CB0 Slot: 6
	protected override string get_closeBtnPath() { }

	// RVA: 0x1AE7CF8 Offset: 0x1AE7CF8 VA: 0x1AE7CF8
	private static void .cctor() { }
}

// Namespace: 
public class BattleValueButtonComponent : MonoBehaviour // TypeDefIndex: 9324
{
	// Fields
	public GameObject target; // 0x18
	public string sendmessage; // 0x20
	public int val; // 0x28

	// Methods

	// RVA: 0x1AE9588 Offset: 0x1AE9588 VA: 0x1AE9588
	public void .ctor() { }

	// RVA: 0x1AE9590 Offset: 0x1AE9590 VA: 0x1AE9590
	public void OnClickTarget() { }
}

// Namespace: 
public class BattleViewBufflistComponent : BaseMonoBehaviour // TypeDefIndex: 9325
{
	// Fields
	public Transform listRoot; // 0x18
	public GameObject barObject; // 0x20
	public GameObject prefabBuffObject; // 0x28
	public UILabel nothingLabel; // 0x30
	[SerializeField] // RVA: 0xCD3584 Offset: 0xCD3584 VA: 0xCD3584
	private BattleViewBufflistComponent.NameInfo nameInfo; // 0x38
	public float height; // 0x48
	public UIScrollView uiScrollView; // 0x50
	private List<GameObject> objList; // 0x58

	// Methods

	// RVA: 0x1AE9654 Offset: 0x1AE9654 VA: 0x1AE9654
	public void .ctor() { }

	// RVA: 0x1AE96CC Offset: 0x1AE96CC VA: 0x1AE96CC
	public void setBuffList(BattleBuffData.ShowBuffData[] buffList) { }

	// RVA: 0x1AE9AE4 Offset: 0x1AE9AE4 VA: 0x1AE9AE4
	public void setHide() { }

	// RVA: 0x1AE9B54 Offset: 0x1AE9B54 VA: 0x1AE9B54
	public void setShow() { }

	// RVA: 0x1AE9BE0 Offset: 0x1AE9BE0 VA: 0x1AE9BE0
	public void setClassIcon(BattleServantData data) { }
}

// Namespace: 
[Serializable]
public struct BattleViewBufflistComponent.NameInfo // TypeDefIndex: 9326
{
	// Fields
	public UILabel nameLabel; // 0x0
	public ServantClassIconComponent servantClassIconComponent; // 0x8
}

// Namespace: 
public class BattleViewItemlistComponent : BaseMonoBehaviour // TypeDefIndex: 9327
{
	// Fields
	public Transform listRoot; // 0x18
	public GameObject prefabResultItem; // 0x20
	public UILabel notgetLabel; // 0x28
	public string noItemLabelKey; // 0x30
	public float width; // 0x38
	public float height; // 0x3C
	public UISprite TitleSpr; // 0x40
	public UIPanel ScrollViewPanel; // 0x48
	public UIScrollBar ScrollBar; // 0x50
	public UISprite rewardSpr; // 0x58
	private int colmax; // 0x60
	private int boostEventItemManaCount; // 0x64
	protected static readonly int defaultColumnMax; // 0x0
	private List<GameObject> itemObjectList; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCD3594 Offset: 0xCD3594 VA: 0xCD3594
	[DebuggerBrowsableAttribute] // RVA: 0xCD3594 Offset: 0xCD3594 VA: 0xCD3594
	private QuestRewardInfo[] <rewardInfos>k__BackingField; // 0x70

	// Properties
	public QuestRewardInfo[] rewardInfos { get; set; }

	// Methods

	// RVA: 0x1AE9D24 Offset: 0x1AE9D24 VA: 0x1AE9D24
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BC7C Offset: 0xD3BC7C VA: 0xD3BC7C
	// RVA: 0x1AE9DB4 Offset: 0x1AE9DB4 VA: 0x1AE9DB4
	public QuestRewardInfo[] get_rewardInfos() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BC8C Offset: 0xD3BC8C VA: 0xD3BC8C
	// RVA: 0x1AE9DBC Offset: 0x1AE9DBC VA: 0x1AE9DBC
	private void set_rewardInfos(QuestRewardInfo[] value) { }

	// RVA: 0x1AE9DC4 Offset: 0x1AE9DC4 VA: 0x1AE9DC4
	public void setListDataCustomColumn(BattleDropItem[] itemlist, BattleDropItemComponent.ClickDelegate callBack, int setColMax = 0) { }

	// RVA: 0x1AEA50C Offset: 0x1AEA50C VA: 0x1AEA50C
	public void setEventResultCount(int boostEventItemManaCount, QuestRewardInfo[] rewardInfos) { }

	// RVA: 0x1AEA518 Offset: 0x1AEA518 VA: 0x1AEA518
	public void setListDataCustomColumn(BattleDropItem[] itemlist, int eventId, BattleDropItemComponent.ClickDelegate callBack, int setColMax = 0) { }

	// RVA: 0x1AE9E74 Offset: 0x1AE9E74 VA: 0x1AE9E74
	private void setListData(BattleDropItem[] itemlist, int eventId, BattleViewItemlistComponent.BattleDropItemComponentSetAction setAction, BattleDropItemComponent.ClickDelegate callBack, int setColMax = 0) { }

	// RVA: 0x1AEA9CC Offset: 0x1AEA9CC VA: 0x1AEA9CC
	private void SetBattleDropItemComponent(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId = -1) { }

	// RVA: 0x1AEAA3C Offset: 0x1AEAA3C VA: 0x1AEAA3C
	private void SetBattleDropItemComponentEx(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId) { }

	// RVA: 0x1AEAAC0 Offset: 0x1AEAAC0 VA: 0x1AEAAC0
	private int CalcPossessionNum(BattleDropItem battleDropItem, int eventId) { }

	// RVA: 0x1AEAC5C Offset: 0x1AEAC5C VA: 0x1AEAC5C
	public int compareItemId(long userId, BattleDropItem battleDropItem) { }

	// RVA: 0x1AEAD14 Offset: 0x1AEAD14 VA: 0x1AEAD14
	public int getUserItemNum(long userId, BattleDropItem battleDropItem, int questClearItemSubtraction = 0) { }

	// RVA: 0x1AEAE64 Offset: 0x1AEAE64 VA: 0x1AEAE64
	public void setHide() { }

	// RVA: 0x1AEAF1C Offset: 0x1AEAF1C VA: 0x1AEAF1C
	public void setShow() { }

	// RVA: 0x1AEAFD4 Offset: 0x1AEAFD4 VA: 0x1AEAFD4
	public void ClearObj() { }

	// RVA: 0x1AEB0D4 Offset: 0x1AEB0D4 VA: 0x1AEB0D4
	public void SwitchShowNumMode(bool isShowPossessionNum) { }

	// RVA: 0x1AEB1E0 Offset: 0x1AEB1E0 VA: 0x1AEB1E0
	public void DefaultLayoutScrollView() { }

	// RVA: 0x1AEB79C Offset: 0x1AEB79C VA: 0x1AEB79C
	public void ChangeLayoutScrollView() { }

	// RVA: 0x1AEBD5C Offset: 0x1AEBD5C VA: 0x1AEBD5C
	private static void .cctor() { }
}

// Namespace: 
private sealed class BattleViewItemlistComponent.BattleDropItemComponentSetAction : MulticastDelegate // TypeDefIndex: 9328
{
	// Methods

	// RVA: 0x1AE9E64 Offset: 0x1AE9E64 VA: 0x1AE9E64
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1AEA5BC Offset: 0x1AEA5BC VA: 0x1AEA5BC Slot: 11
	public virtual void Invoke(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId) { }

	// RVA: 0x1AEBDB0 Offset: 0x1AEBDB0 VA: 0x1AEBDB0 Slot: 12
	public virtual IAsyncResult BeginInvoke(BattleDropItemComponent battleDropItemComponent, BattleDropItem dropItem, BattleDropItemComponent.ClickDelegate callback, int eventId, AsyncCallback _callback, object object) { }

	// RVA: 0x1AEBE60 Offset: 0x1AEBE60 VA: 0x1AEBE60 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleWindowOuterClickComponent : BaseMonoBehaviour // TypeDefIndex: 9329
{
	// Fields
	protected BattleWindowOuterClickComponent.OuterClickCall clickCallBack; // 0x18

	// Methods

	// RVA: 0x1AED488 Offset: 0x1AED488 VA: 0x1AED488
	public void .ctor() { }

	// RVA: 0x1AED490 Offset: 0x1AED490 VA: 0x1AED490
	public void setClickCallBack(BattleWindowOuterClickComponent.OuterClickCall call) { }

	// RVA: 0x1AED498 Offset: 0x1AED498 VA: 0x1AED498
	public void OnClick() { }
}

// Namespace: 
public sealed class BattleWindowOuterClickComponent.OuterClickCall : MulticastDelegate // TypeDefIndex: 9330
{
	// Methods

	// RVA: 0x1AED6AC Offset: 0x1AED6AC VA: 0x1AED6AC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x1AED4AC Offset: 0x1AED4AC VA: 0x1AED4AC Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1AED6BC Offset: 0x1AED6BC VA: 0x1AED6BC Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1AED6F0 Offset: 0x1AED6F0 VA: 0x1AED6F0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleWindowOuterClickManagerComponent : BattleWindowComponent // TypeDefIndex: 9331
{
	// Fields
	public BattleWindowOuterClickComponent outerPanel; // 0x48

	// Methods

	// RVA: 0x1AE78B4 Offset: 0x1AE78B4 VA: 0x1AE78B4
	public void .ctor() { }

	// RVA: 0x1AED6FC Offset: 0x1AED6FC VA: 0x1AED6FC
	public void setOuterClickCallBack(BattleWindowOuterClickComponent.OuterClickCall callBack) { }
}

// Namespace: 
public class CommandSpellObjectComponent : MonoBehaviour // TypeDefIndex: 9332
{
	// Fields
	public CommandSpellWindowComponent target; // 0x18
	public UILabel label_name; // 0x20
	public UILabel label_conf; // 0x28
	public UILabel label_count; // 0x30
	public UISprite coverSprite; // 0x38
	public UILabel unitLabel; // 0x40
	private int Id; // 0x48
	private int Consume; // 0x4C
	private bool touchFlg; // 0x50

	// Methods

	// RVA: 0x1B688A4 Offset: 0x1B688A4 VA: 0x1B688A4
	public void .ctor() { }

	// RVA: 0x1B688AC Offset: 0x1B688AC VA: 0x1B688AC
	public void setData(CommandSpellWindowComponent.MODE mode, int Id, int count) { }

	// RVA: 0x1B68AC0 Offset: 0x1B68AC0 VA: 0x1B68AC0
	public void updateIsUse(CommandSpellWindowComponent.MODE mode, int count) { }

	// RVA: 0x1B68BE4 Offset: 0x1B68BE4 VA: 0x1B68BE4
	public void setUseButton(bool flg) { }

	// RVA: 0x1B68BF0 Offset: 0x1B68BF0 VA: 0x1B68BF0
	public void onClickUse() { }
}

// Namespace: 
public class CommandSpellWindowComponent : BattleWindowComponent // TypeDefIndex: 9333
{
	// Fields
	public CommandSpellWindowComponent.MODE mode; // 0x48
	public GameObject prefab; // 0x50
	public Transform tree_root; // 0x58
	public UILabel label_count; // 0x60
	public UILabel titleLabel; // 0x68
	public BattleWindowOuterClickManagerComponent checkWindow; // 0x70
	public UILabel checkuselabel; // 0x78
	public UILabel spellnamelabel; // 0x80
	public GameObject btn_ok; // 0x88
	public GameObject btn_ng; // 0x90
	private bool isOpenFlg; // 0x98
	public CommandSpellWindowComponent.CloseButtonCallBack callback_close; // 0xA0
	public CommandSpellWindowComponent.UseCommandSpellCallBack callback_use; // 0xA8
	private List<GameObject> objlist; // 0xB0
	private int commandCount; // 0xB8
	public static readonly int objheight; // 0x0
	private BattlePerformance battlePerf; // 0xC0
	public int temporarySpell; // 0xC8
	public bool isUseTemporarySpell; // 0xCC
	private int tmp_Id; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xCD35D0 Offset: 0xCD35D0 VA: 0xCD35D0
	private static Comparison<CommandSpellEntity> <>f__am$cache0; // 0x8

	// Properties
	protected override GameObject closeBtnObject { get; set; }

	// Methods

	// RVA: 0x1B68E7C Offset: 0x1B68E7C VA: 0x1B68E7C
	public void .ctor() { }

	// RVA: 0x1B68EF4 Offset: 0x1B68EF4 VA: 0x1B68EF4
	public void setMode(CommandSpellWindowComponent.MODE mode) { }

	// RVA: 0x1B68EFC Offset: 0x1B68EFC VA: 0x1B68EFC
	public void setCallBackPushClose(CommandSpellWindowComponent.CloseButtonCallBack callback) { }

	// RVA: 0x1B68F04 Offset: 0x1B68F04 VA: 0x1B68F04
	public void setCallBackUse(CommandSpellWindowComponent.UseCommandSpellCallBack callback) { }

	// RVA: 0x1B68F0C Offset: 0x1B68F0C VA: 0x1B68F0C
	public void onCloseButton() { }

	// RVA: 0x1B69120 Offset: 0x1B69120 VA: 0x1B69120 Slot: 9
	public override void setClose() { }

	// RVA: 0x1B69164 Offset: 0x1B69164 VA: 0x1B69164 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1B691F0 Offset: 0x1B691F0 VA: 0x1B691F0
	public void InitializeCommandSpell(BattlePerformance bp, CommandSpellWindowComponent.MODE inMode = 0, int temporary = -1) { }

	// RVA: 0x1B69908 Offset: 0x1B69908 VA: 0x1B69908
	public void InitializeCommandSpellDepth(CommandSpellWindowComponent.MODE inMode, int scrollViewDepth) { }

	// RVA: 0x1B69A78 Offset: 0x1B69A78 VA: 0x1B69A78 Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1B69CF8 Offset: 0x1B69CF8 VA: 0x1B69CF8 Slot: 11
	public override void CompOpen() { }

	// RVA: 0x1B68CB4 Offset: 0x1B68CB4 VA: 0x1B68CB4
	public void UseSpell(int Id) { }

	// RVA: 0x1B69D00 Offset: 0x1B69D00 VA: 0x1B69D00
	public void endSpellOpened() { }

	// RVA: 0x1B69D0C Offset: 0x1B69D0C VA: 0x1B69D0C
	public void okSpell() { }

	// RVA: 0x1B69FC0 Offset: 0x1B69FC0 VA: 0x1B69FC0
	public void cancelSpell() { }

	// RVA: 0x1B6A05C Offset: 0x1B6A05C VA: 0x1B6A05C
