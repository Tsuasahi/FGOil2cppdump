	public static readonly DerObjectIdentifier Prime239v1; // 0x150
	public static readonly DerObjectIdentifier Prime239v2; // 0x158
	public static readonly DerObjectIdentifier Prime239v3; // 0x160
	public static readonly DerObjectIdentifier Prime256v1; // 0x168
	public static readonly DerObjectIdentifier IdDsa; // 0x170
	public static readonly DerObjectIdentifier IdDsaWithSha1; // 0x178
	public static readonly DerObjectIdentifier X9x63Scheme; // 0x180
	public static readonly DerObjectIdentifier DHSinglePassStdDHSha1KdfScheme; // 0x188
	public static readonly DerObjectIdentifier DHSinglePassCofactorDHSha1KdfScheme; // 0x190
	public static readonly DerObjectIdentifier MqvSinglePassSha1KdfScheme; // 0x198
	public static readonly DerObjectIdentifier ansi_x9_42; // 0x1A0
	public static readonly DerObjectIdentifier DHPublicNumber; // 0x1A8
	public static readonly DerObjectIdentifier X9x42Schemes; // 0x1B0
	public static readonly DerObjectIdentifier DHStatic; // 0x1B8
	public static readonly DerObjectIdentifier DHEphem; // 0x1C0
	public static readonly DerObjectIdentifier DHOneFlow; // 0x1C8
	public static readonly DerObjectIdentifier DHHybrid1; // 0x1D0
	public static readonly DerObjectIdentifier DHHybrid2; // 0x1D8
	public static readonly DerObjectIdentifier DHHybridOneFlow; // 0x1E0
	public static readonly DerObjectIdentifier Mqv2; // 0x1E8
	public static readonly DerObjectIdentifier Mqv1; // 0x1F0

	// Methods

	// RVA: 0x20D6218 Offset: 0x20D6218 VA: 0x20D6218
	protected void .ctor() { }

	// RVA: 0x20D6220 Offset: 0x20D6220 VA: 0x20D6220
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Agreement
public class DHBasicAgreement : IBasicAgreement // TypeDefIndex: 4622
{
	// Fields
	private DHPrivateKeyParameters key; // 0x10
	private DHParameters dhParams; // 0x18

	// Methods

	// RVA: 0x20D701C Offset: 0x20D701C VA: 0x20D701C
	public void .ctor() { }

	// RVA: 0x20D7024 Offset: 0x20D7024 VA: 0x20D7024 Slot: 7
	public virtual void Init(ICipherParameters parameters) { }

	// RVA: 0x20D7148 Offset: 0x20D7148 VA: 0x20D7148 Slot: 8
	public virtual int GetFieldSize() { }

	// RVA: 0x20D71C0 Offset: 0x20D71C0 VA: 0x20D71C0 Slot: 9
	public virtual BigInteger CalculateAgreement(ICipherParameters pubKey) { }
}

// Namespace: Org.BouncyCastle.Crypto.Agreement
public class ECDHBasicAgreement : IBasicAgreement // TypeDefIndex: 4623
{
	// Fields
	protected internal ECPrivateKeyParameters privKey; // 0x10

	// Methods

	// RVA: 0x20D73D0 Offset: 0x20D73D0 VA: 0x20D73D0
	public void .ctor() { }

	// RVA: 0x20D73D8 Offset: 0x20D73D8 VA: 0x20D73D8 Slot: 7
	public virtual void Init(ICipherParameters parameters) { }

	// RVA: 0x20D74F0 Offset: 0x20D74F0 VA: 0x20D74F0 Slot: 8
	public virtual int GetFieldSize() { }

	// RVA: 0x20D756C Offset: 0x20D756C VA: 0x20D756C Slot: 9
	public virtual BigInteger CalculateAgreement(ICipherParameters pubKey) { }
}

// Namespace: Org.BouncyCastle.Crypto
public class AsymmetricCipherKeyPair // TypeDefIndex: 4624
{
	// Fields
	private readonly AsymmetricKeyParameter publicParameter; // 0x10
	private readonly AsymmetricKeyParameter privateParameter; // 0x18

	// Properties
	public AsymmetricKeyParameter Public { get; }
	public AsymmetricKeyParameter Private { get; }

	// Methods

	// RVA: 0x20D77DC Offset: 0x20D77DC VA: 0x20D77DC
	public void .ctor(AsymmetricKeyParameter publicParameter, AsymmetricKeyParameter privateParameter) { }

	// RVA: 0x20D78E0 Offset: 0x20D78E0 VA: 0x20D78E0
	public AsymmetricKeyParameter get_Public() { }

	// RVA: 0x20D78E8 Offset: 0x20D78E8 VA: 0x20D78E8
	public AsymmetricKeyParameter get_Private() { }
}

// Namespace: Org.BouncyCastle.Crypto
public abstract class AsymmetricKeyParameter : ICipherParameters // TypeDefIndex: 4625
{
	// Fields
	private readonly bool privateKey; // 0x10

	// Properties
	public bool IsPrivate { get; }

	// Methods

	// RVA: 0x20D78F0 Offset: 0x20D78F0 VA: 0x20D78F0
	protected void .ctor(bool privateKey) { }

	// RVA: 0x20D78D8 Offset: 0x20D78D8 VA: 0x20D78D8
	public bool get_IsPrivate() { }

	// RVA: 0x20D7920 Offset: 0x20D7920 VA: 0x20D7920 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x20D79DC Offset: 0x20D79DC VA: 0x20D79DC
	protected bool Equals(AsymmetricKeyParameter other) { }

	// RVA: 0x20D7A24 Offset: 0x20D7A24 VA: 0x20D7A24 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Crypto
public class BufferedAeadBlockCipher : BufferedCipherBase // TypeDefIndex: 4626
{
	// Fields
	private readonly IAeadBlockCipher cipher; // 0x10

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20D7A50 Offset: 0x20D7A50 VA: 0x20D7A50
	public void .ctor(IAeadBlockCipher cipher) { }

	// RVA: 0x20D7B1C Offset: 0x20D7B1C VA: 0x20D7B1C Slot: 22
	public override string get_AlgorithmName() { }

	// RVA: 0x20D7BD0 Offset: 0x20D7BD0 VA: 0x20D7BD0 Slot: 23
	public override void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x20D7CEC Offset: 0x20D7CEC VA: 0x20D7CEC Slot: 24
	public override int GetBlockSize() { }

	// RVA: 0x20D7DA4 Offset: 0x20D7DA4 VA: 0x20D7DA4 Slot: 26
	public override int GetUpdateOutputSize(int length) { }

	// RVA: 0x20D7E6C Offset: 0x20D7E6C VA: 0x20D7E6C Slot: 25
	public override int GetOutputSize(int length) { }

	// RVA: 0x20D7F34 Offset: 0x20D7F34 VA: 0x20D7F34 Slot: 28
	public override int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x20D8014 Offset: 0x20D8014 VA: 0x20D8014 Slot: 27
	public override byte[] ProcessByte(byte input) { }

	// RVA: 0x20D8114 Offset: 0x20D8114 VA: 0x20D8114 Slot: 30
	public override byte[] ProcessBytes(byte[] input, int inOff, int length) { }

	// RVA: 0x20D8284 Offset: 0x20D8284 VA: 0x20D8284 Slot: 32
	public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: 0x20D837C Offset: 0x20D837C VA: 0x20D837C Slot: 33
	public override byte[] DoFinal() { }

	// RVA: 0x20D8464 Offset: 0x20D8464 VA: 0x20D8464 Slot: 35
	public override byte[] DoFinal(byte[] input, int inOff, int inLen) { }

	// RVA: 0x20D85E4 Offset: 0x20D85E4 VA: 0x20D85E4 Slot: 36
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20D86B4 Offset: 0x20D86B4 VA: 0x20D86B4 Slot: 39
	public override void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto
public class BufferedAsymmetricBlockCipher : BufferedCipherBase // TypeDefIndex: 4627
{
	// Fields
	private readonly IAsymmetricBlockCipher cipher; // 0x10
	private byte[] buffer; // 0x18
	private int bufOff; // 0x20

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20D876C Offset: 0x20D876C VA: 0x20D876C
	public void .ctor(IAsymmetricBlockCipher cipher) { }

	// RVA: 0x20D87E8 Offset: 0x20D87E8 VA: 0x20D87E8
	internal int GetBufferPosition() { }

	// RVA: 0x20D87F0 Offset: 0x20D87F0 VA: 0x20D87F0 Slot: 22
	public override string get_AlgorithmName() { }

	// RVA: 0x20D88A4 Offset: 0x20D88A4 VA: 0x20D88A4 Slot: 24
	public override int GetBlockSize() { }

	// RVA: 0x20D895C Offset: 0x20D895C VA: 0x20D895C Slot: 25
	public override int GetOutputSize(int length) { }

	// RVA: 0x20D8A14 Offset: 0x20D8A14 VA: 0x20D8A14 Slot: 26
	public override int GetUpdateOutputSize(int length) { }

	// RVA: 0x20D8A1C Offset: 0x20D8A1C VA: 0x20D8A1C Slot: 23
	public override void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x20D8BB4 Offset: 0x20D8BB4 VA: 0x20D8BB4 Slot: 27
	public override byte[] ProcessByte(byte input) { }

	// RVA: 0x20D8CB0 Offset: 0x20D8CB0 VA: 0x20D8CB0 Slot: 30
	public override byte[] ProcessBytes(byte[] input, int inOff, int length) { }

	// RVA: 0x20D8DD8 Offset: 0x20D8DD8 VA: 0x20D8DD8 Slot: 33
	public override byte[] DoFinal() { }

	// RVA: 0x20D8F00 Offset: 0x20D8F00 VA: 0x20D8F00 Slot: 35
	public override byte[] DoFinal(byte[] input, int inOff, int length) { }

	// RVA: 0x20D8F3C Offset: 0x20D8F3C VA: 0x20D8F3C Slot: 39
	public override void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto
public class BufferedBlockCipher : BufferedCipherBase // TypeDefIndex: 4628
{
	// Fields
	internal byte[] buf; // 0x10
	internal int bufOff; // 0x18
	internal bool forEncryption; // 0x1C
	internal IBlockCipher cipher; // 0x20

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20D8F74 Offset: 0x20D8F74 VA: 0x20D8F74
	protected void .ctor() { }

	// RVA: 0x20D8FDC Offset: 0x20D8FDC VA: 0x20D8FDC
	public void .ctor(IBlockCipher cipher) { }

	// RVA: 0x20D912C Offset: 0x20D912C VA: 0x20D912C Slot: 22
	public override string get_AlgorithmName() { }

	// RVA: 0x20D91E0 Offset: 0x20D91E0 VA: 0x20D91E0 Slot: 23
	public override void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x20D9314 Offset: 0x20D9314 VA: 0x20D9314 Slot: 24
	public override int GetBlockSize() { }

	// RVA: 0x20D93CC Offset: 0x20D93CC VA: 0x20D93CC Slot: 26
	public override int GetUpdateOutputSize(int length) { }

	// RVA: 0x20D9408 Offset: 0x20D9408 VA: 0x20D9408 Slot: 25
	public override int GetOutputSize(int length) { }

	// RVA: 0x20D9414 Offset: 0x20D9414 VA: 0x20D9414 Slot: 28
	public override int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x20D95F4 Offset: 0x20D95F4 VA: 0x20D95F4 Slot: 27
	public override byte[] ProcessByte(byte input) { }

	// RVA: 0x20D96F4 Offset: 0x20D96F4 VA: 0x20D96F4 Slot: 30
	public override byte[] ProcessBytes(byte[] input, int inOff, int length) { }

	// RVA: 0x20D9864 Offset: 0x20D9864 VA: 0x20D9864 Slot: 32
	public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: 0x20D9CC0 Offset: 0x20D9CC0 VA: 0x20D9CC0 Slot: 33
	public override byte[] DoFinal() { }

	// RVA: 0x20D9DF4 Offset: 0x20D9DF4 VA: 0x20D9DF4 Slot: 35
	public override byte[] DoFinal(byte[] input, int inOff, int inLen) { }

	// RVA: 0x20D9FC4 Offset: 0x20D9FC4 VA: 0x20D9FC4 Slot: 36
	public override int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20DA28C Offset: 0x20DA28C VA: 0x20DA28C Slot: 39
	public override void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto
public abstract class BufferedCipherBase : IBufferedCipher // TypeDefIndex: 4629
{
	// Fields
	protected static readonly byte[] EmptyBuffer; // 0x0

	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: 0x20D7B14 Offset: 0x20D7B14 VA: 0x20D7B14
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 22
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 23
	public abstract void Init(bool forEncryption, ICipherParameters parameters);

	// RVA: -1 Offset: -1 Slot: 24
	public abstract int GetBlockSize();

	// RVA: -1 Offset: -1 Slot: 25
	public abstract int GetOutputSize(int inputLen);

	// RVA: -1 Offset: -1 Slot: 26
	public abstract int GetUpdateOutputSize(int inputLen);

	// RVA: -1 Offset: -1 Slot: 27
	public abstract byte[] ProcessByte(byte input);

	// RVA: 0x20DA36C Offset: 0x20DA36C VA: 0x20DA36C Slot: 28
	public virtual int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x20DA464 Offset: 0x20DA464 VA: 0x20DA464 Slot: 29
	public virtual byte[] ProcessBytes(byte[] input) { }

	// RVA: -1 Offset: -1 Slot: 30
	public abstract byte[] ProcessBytes(byte[] input, int inOff, int length);

	// RVA: 0x20DA4AC Offset: 0x20DA4AC VA: 0x20DA4AC Slot: 31
	public virtual int ProcessBytes(byte[] input, byte[] output, int outOff) { }

	// RVA: 0x20DA50C Offset: 0x20DA50C VA: 0x20DA50C Slot: 32
	public virtual int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: -1 Offset: -1 Slot: 33
	public abstract byte[] DoFinal();

	// RVA: 0x20DA61C Offset: 0x20DA61C VA: 0x20DA61C Slot: 34
	public virtual byte[] DoFinal(byte[] input) { }

	// RVA: -1 Offset: -1 Slot: 35
	public abstract byte[] DoFinal(byte[] input, int inOff, int length);

	// RVA: 0x20DA664 Offset: 0x20DA664 VA: 0x20DA664 Slot: 36
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20DA758 Offset: 0x20DA758 VA: 0x20DA758 Slot: 37
	public virtual int DoFinal(byte[] input, byte[] output, int outOff) { }

	// RVA: 0x20DA7B8 Offset: 0x20DA7B8 VA: 0x20DA7B8 Slot: 38
	public virtual int DoFinal(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: -1 Offset: -1 Slot: 39
	public abstract void Reset();

	// RVA: 0x20DA818 Offset: 0x20DA818 VA: 0x20DA818
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto
public class BufferedIesCipher : BufferedCipherBase // TypeDefIndex: 4630
{
	// Fields
	private readonly IesEngine engine; // 0x10
	private bool forEncryption; // 0x18
	private MemoryStream buffer; // 0x20

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20DA87C Offset: 0x20DA87C VA: 0x20DA87C
	public void .ctor(IesEngine engine) { }

	// RVA: 0x20DA960 Offset: 0x20DA960 VA: 0x20DA960 Slot: 22
	public override string get_AlgorithmName() { }

	// RVA: 0x20DA9A8 Offset: 0x20DA9A8 VA: 0x20DA9A8 Slot: 23
	public override void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x20DAA38 Offset: 0x20DAA38 VA: 0x20DAA38 Slot: 24
	public override int GetBlockSize() { }

	// RVA: 0x20DAA40 Offset: 0x20DAA40 VA: 0x20DAA40 Slot: 25
	public override int GetOutputSize(int inputLen) { }

	// RVA: 0x20DAB10 Offset: 0x20DAB10 VA: 0x20DAB10 Slot: 26
	public override int GetUpdateOutputSize(int inputLen) { }

	// RVA: 0x20DAB18 Offset: 0x20DAB18 VA: 0x20DAB18 Slot: 27
	public override byte[] ProcessByte(byte input) { }

	// RVA: 0x20DAB60 Offset: 0x20DAB60 VA: 0x20DAB60 Slot: 30
	public override byte[] ProcessBytes(byte[] input, int inOff, int length) { }

	// RVA: 0x20DACB4 Offset: 0x20DACB4 VA: 0x20DACB4 Slot: 33
	public override byte[] DoFinal() { }

	// RVA: 0x20DAD48 Offset: 0x20DAD48 VA: 0x20DAD48 Slot: 35
	public override byte[] DoFinal(byte[] input, int inOff, int length) { }

	// RVA: 0x20DAD84 Offset: 0x20DAD84 VA: 0x20DAD84 Slot: 39
	public override void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto
public class BufferedStreamCipher : BufferedCipherBase // TypeDefIndex: 4631
{
	// Fields
	private readonly IStreamCipher cipher; // 0x10

	// Properties
	public override string AlgorithmName { get; }

	// Methods

	// RVA: 0x20DADC0 Offset: 0x20DADC0 VA: 0x20DADC0
	public void .ctor(IStreamCipher cipher) { }

	// RVA: 0x20DAE84 Offset: 0x20DAE84 VA: 0x20DAE84 Slot: 22
	public override string get_AlgorithmName() { }

	// RVA: 0x20DAF38 Offset: 0x20DAF38 VA: 0x20DAF38 Slot: 23
	public override void Init(bool forEncryption, ICipherParameters parameters) { }

	// RVA: 0x20DB054 Offset: 0x20DB054 VA: 0x20DB054 Slot: 24
	public override int GetBlockSize() { }

	// RVA: 0x20DB05C Offset: 0x20DB05C VA: 0x20DB05C Slot: 25
	public override int GetOutputSize(int inputLen) { }

	// RVA: 0x20DB064 Offset: 0x20DB064 VA: 0x20DB064 Slot: 26
	public override int GetUpdateOutputSize(int inputLen) { }

	// RVA: 0x20DB06C Offset: 0x20DB06C VA: 0x20DB06C Slot: 27
	public override byte[] ProcessByte(byte input) { }

	// RVA: 0x20DB180 Offset: 0x20DB180 VA: 0x20DB180 Slot: 28
	public override int ProcessByte(byte input, byte[] output, int outOff) { }

	// RVA: 0x20DB2F4 Offset: 0x20DB2F4 VA: 0x20DB2F4 Slot: 30
	public override byte[] ProcessBytes(byte[] input, int inOff, int length) { }

	// RVA: 0x20DB40C Offset: 0x20DB40C VA: 0x20DB40C Slot: 32
	public override int ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff) { }

	// RVA: 0x20DB51C Offset: 0x20DB51C VA: 0x20DB51C Slot: 33
	public override byte[] DoFinal() { }

	// RVA: 0x20DB59C Offset: 0x20DB59C VA: 0x20DB59C Slot: 35
	public override byte[] DoFinal(byte[] input, int inOff, int length) { }

	// RVA: 0x20DB66C Offset: 0x20DB66C VA: 0x20DB66C Slot: 39
	public override void Reset() { }
}

// Namespace: Org.BouncyCastle.Crypto
internal class Check // TypeDefIndex: 4632
{
	// Methods

	// RVA: 0x20DB724 Offset: 0x20DB724 VA: 0x20DB724
	public void .ctor() { }

	// RVA: 0x20DA200 Offset: 0x20DA200 VA: 0x20DA200
	internal static void DataLength(bool condition, string msg) { }

	// RVA: 0x20DB72C Offset: 0x20DB72C VA: 0x20DB72C
	internal static void DataLength(byte[] buf, int off, int len, string msg) { }

	// RVA: 0x20D9C0C Offset: 0x20D9C0C VA: 0x20D9C0C
	internal static void OutputLength(byte[] buf, int off, int len, string msg) { }
}

// Namespace: Org.BouncyCastle.Crypto
public class CipherKeyGenerator // TypeDefIndex: 4633
{
	// Fields
	protected internal SecureRandom random; // 0x10
	protected internal int strength; // 0x18
	private bool uninitialised; // 0x1C
	private int defaultStrength; // 0x20

	// Properties
	public int DefaultStrength { get; }

	// Methods

	// RVA: 0x20DB7E0 Offset: 0x20DB7E0 VA: 0x20DB7E0
	public void .ctor() { }

	// RVA: 0x20DB7F0 Offset: 0x20DB7F0 VA: 0x20DB7F0
	internal void .ctor(int defaultStrength) { }

	// RVA: 0x20DB8AC Offset: 0x20DB8AC VA: 0x20DB8AC
	public int get_DefaultStrength() { }

	// RVA: 0x20DB8B4 Offset: 0x20DB8B4 VA: 0x20DB8B4
	public void Init(KeyGenerationParameters parameters) { }

	// RVA: 0x20DB95C Offset: 0x20DB95C VA: 0x20DB95C Slot: 4
	protected virtual void engineInit(KeyGenerationParameters parameters) { }

	// RVA: 0x20DB9D8 Offset: 0x20DB9D8 VA: 0x20DB9D8
	public byte[] GenerateKey() { }

	// RVA: 0x20DBAE0 Offset: 0x20DBAE0 VA: 0x20DBAE0 Slot: 5
	protected virtual byte[] engineGenerateKey() { }
}

// Namespace: Org.BouncyCastle.Crypto
[Serializable]
public class CryptoException : Exception // TypeDefIndex: 4634
{
	// Methods

	// RVA: 0x20DBB54 Offset: 0x20DBB54 VA: 0x20DBB54
	public void .ctor() { }

	// RVA: 0x20DBB5C Offset: 0x20DBB5C VA: 0x20DBB5C
	public void .ctor(string message) { }

	// RVA: 0x20DBB64 Offset: 0x20DBB64 VA: 0x20DBB64
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Crypto
[Serializable]
public class DataLengthException : CryptoException // TypeDefIndex: 4635
{
	// Methods

	// RVA: 0x20DBB6C Offset: 0x20DBB6C VA: 0x20DBB6C
	public void .ctor() { }

	// RVA: 0x20D8CA8 Offset: 0x20D8CA8 VA: 0x20D8CA8
	public void .ctor(string message) { }

	// RVA: 0x20DBB74 Offset: 0x20DBB74 VA: 0x20DBB74
	public void .ctor(string message, Exception exception) { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public abstract class GeneralDigest : IDigest, IMemoable // TypeDefIndex: 4636
{
	// Fields
	private const int BYTE_LENGTH = 64;
	private byte[] xBuf; // 0x10
	private int xBufOff; // 0x18
	private long byteCount; // 0x20

	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: 0x20DBB7C Offset: 0x20DBB7C VA: 0x20DBB7C
	internal void .ctor() { }

	// RVA: 0x20DBBE0 Offset: 0x20DBBE0 VA: 0x20DBBE0
	internal void .ctor(GeneralDigest t) { }

	// RVA: 0x20DBC74 Offset: 0x20DBC74 VA: 0x20DBC74
	protected void CopyIn(GeneralDigest t) { }

	// RVA: 0x20DBD38 Offset: 0x20DBD38 VA: 0x20DBD38 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x20DBDEC Offset: 0x20DBDEC VA: 0x20DBDEC Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x20DBFF0 Offset: 0x20DBFF0 VA: 0x20DBFF0
	public void Finish() { }

	// RVA: 0x20DC058 Offset: 0x20DC058 VA: 0x20DC058 Slot: 13
	public virtual void Reset() { }

	// RVA: 0x20DC098 Offset: 0x20DC098 VA: 0x20DC098 Slot: 6
	public int GetByteLength() { }

	// RVA: -1 Offset: -1 Slot: 14
	internal abstract void ProcessWord(byte[] input, int inOff);

	// RVA: -1 Offset: -1 Slot: 15
	internal abstract void ProcessLength(long bitLength);

	// RVA: -1 Offset: -1 Slot: 16
	internal abstract void ProcessBlock();

	// RVA: -1 Offset: -1 Slot: 17
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract int GetDigestSize();

	// RVA: -1 Offset: -1 Slot: 19
	public abstract int DoFinal(byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 20
	public abstract IMemoable Copy();

	// RVA: -1 Offset: -1 Slot: 21
	public abstract void Reset(IMemoable t);
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class Gost3411Digest : IDigest, IMemoable // TypeDefIndex: 4637
{
	// Fields
	private const int DIGEST_LENGTH = 32;
	private byte[] H; // 0x10
	private byte[] L; // 0x18
	private byte[] M; // 0x20
	private byte[] Sum; // 0x28
	private byte[][] C; // 0x30
	private byte[] xBuf; // 0x38
	private int xBufOff; // 0x40
	private ulong byteCount; // 0x48
	private readonly IBlockCipher cipher; // 0x50
	private byte[] sBox; // 0x58
	private byte[] K; // 0x60
	private byte[] a; // 0x68
	internal short[] wS; // 0x70
	internal short[] w_S; // 0x78
	internal byte[] S; // 0x80
	internal byte[] U; // 0x88
	internal byte[] V; // 0x90
	internal byte[] W; // 0x98
	private static readonly byte[] C2; // 0x0

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x20DC0A0 Offset: 0x20DC0A0 VA: 0x20DC0A0
	public void .ctor() { }

	// RVA: 0x20DC668 Offset: 0x20DC668 VA: 0x20DC668
	public void .ctor(byte[] sBoxParam) { }

	// RVA: 0x20DC8A8 Offset: 0x20DC8A8 VA: 0x20DC8A8
	public void .ctor(Gost3411Digest t) { }

	// RVA: 0x20DC2FC Offset: 0x20DC2FC VA: 0x20DC2FC
	private static byte[][] MakeC() { }

	// RVA: 0x20DCFCC Offset: 0x20DCFCC VA: 0x20DCFCC Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x20DD014 Offset: 0x20DD014 VA: 0x20DD014 Slot: 5
	public int GetDigestSize() { }

	// RVA: 0x20DD01C Offset: 0x20DD01C VA: 0x20DD01C Slot: 7
	public void Update(byte input) { }

	// RVA: 0x20DD6F4 Offset: 0x20DD6F4 VA: 0x20DD6F4 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x20DD8C4 Offset: 0x20DD8C4 VA: 0x20DD8C4
	private byte[] P(byte[] input) { }

	// RVA: 0x20DDAA8 Offset: 0x20DDAA8 VA: 0x20DDAA8
	private byte[] A(byte[] input) { }

	// RVA: 0x20DDBBC Offset: 0x20DDBBC VA: 0x20DDBBC
	private void E(byte[] key, byte[] s, int sOff, byte[] input, int inOff) { }

	// RVA: 0x20DDD4C Offset: 0x20DDD4C VA: 0x20DDD4C
	private void fw(byte[] input) { }

	// RVA: 0x20DD1DC Offset: 0x20DD1DC VA: 0x20DD1DC
	private void processBlock(byte[] input, int inOff) { }

	// RVA: 0x20DE168 Offset: 0x20DE168 VA: 0x20DE168
	private void finish() { }

	// RVA: 0x20DE1CC Offset: 0x20DE1CC VA: 0x20DE1CC Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20DC3EC Offset: 0x20DC3EC VA: 0x20DC3EC Slot: 10
	public void Reset() { }

	// RVA: 0x20DD0D0 Offset: 0x20DD0D0 VA: 0x20DD0D0
	private void sumByteArray(byte[] input) { }

	// RVA: 0x20DDF5C Offset: 0x20DDF5C VA: 0x20DDF5C
	private static void cpyBytesToShort(byte[] S, short[] wS) { }

	// RVA: 0x20DE050 Offset: 0x20DE050 VA: 0x20DE050
	private static void cpyShortToBytes(short[] wS, byte[] S) { }

	// RVA: 0x20DE22C Offset: 0x20DE22C VA: 0x20DE22C Slot: 6
	public int GetByteLength() { }

	// RVA: 0x20DE234 Offset: 0x20DE234 VA: 0x20DE234 Slot: 11
	public IMemoable Copy() { }

	// RVA: 0x20DCA30 Offset: 0x20DCA30 VA: 0x20DCA30 Slot: 12
	public void Reset(IMemoable other) { }

	// RVA: 0x20DE294 Offset: 0x20DE294 VA: 0x20DE294
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class KeccakDigest : IDigest, IMemoable // TypeDefIndex: 4638
{
	// Fields
	private static readonly ulong[] KeccakRoundConstants; // 0x0
	private static readonly int[] KeccakRhoOffsets; // 0x8
	protected byte[] state; // 0x10
	protected byte[] dataQueue; // 0x18
	protected int rate; // 0x20
	protected int bitsInQueue; // 0x24
	protected int fixedOutputLength; // 0x28
	protected bool squeezing; // 0x2C
	protected int bitsAvailableForSqueezing; // 0x30
	protected byte[] chunk; // 0x38
	protected byte[] oneByte; // 0x40
	private ulong[] C; // 0x48
	private ulong[] tempA; // 0x50
	private ulong[] chiC; // 0x58

	// Properties
	public virtual string AlgorithmName { get; }

	// Methods

	// RVA: 0x20DE310 Offset: 0x20DE310 VA: 0x20DE310
	public void .ctor() { }

	// RVA: 0x20DE318 Offset: 0x20DE318 VA: 0x20DE318
	public void .ctor(int bitLength) { }

	// RVA: 0x20DE4E0 Offset: 0x20DE4E0 VA: 0x20DE4E0
	public void .ctor(KeccakDigest source) { }

	// RVA: 0x20DE758 Offset: 0x20DE758 VA: 0x20DE758
	private static ulong[] KeccakInitializeRoundConstants() { }

	// RVA: 0x20DE87C Offset: 0x20DE87C VA: 0x20DE87C
	private static int[] KeccakInitializeRhoOffsets() { }

	// RVA: 0x20DE9C0 Offset: 0x20DE9C0 VA: 0x20DE9C0
	private void ClearDataQueueSection(int off, int len) { }

	// RVA: 0x20DE5A0 Offset: 0x20DE5A0 VA: 0x20DE5A0
	private void CopyIn(KeccakDigest source) { }

	// RVA: 0x20DEA3C Offset: 0x20DEA3C VA: 0x20DEA3C Slot: 13
	public virtual string get_AlgorithmName() { }

	// RVA: 0x20DEAE0 Offset: 0x20DEAE0 VA: 0x20DEAE0 Slot: 14
	public virtual int GetDigestSize() { }

	// RVA: 0x20DEAF8 Offset: 0x20DEAF8 VA: 0x20DEAF8 Slot: 15
	public virtual void Update(byte input) { }

	// RVA: 0x20DEB68 Offset: 0x20DEB68 VA: 0x20DEB68 Slot: 16
	public virtual void BlockUpdate(byte[] input, int inOff, int len) { }

	// RVA: 0x20DEB7C Offset: 0x20DEB7C VA: 0x20DEB7C Slot: 17
	public virtual int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20DEBD0 Offset: 0x20DEBD0 VA: 0x20DEBD0 Slot: 18
	protected virtual int DoFinal(byte[] output, int outOff, byte partialByte, int partialBits) { }

	// RVA: 0x20DECA4 Offset: 0x20DECA4 VA: 0x20DECA4 Slot: 19
	public virtual void Reset() { }

	// RVA: 0x20DECAC Offset: 0x20DECAC VA: 0x20DECAC Slot: 20
	public virtual int GetByteLength() { }

	// RVA: 0x20DE3D8 Offset: 0x20DE3D8 VA: 0x20DE3D8
	private void Init(int bitLength) { }

	// RVA: 0x20DECC4 Offset: 0x20DECC4 VA: 0x20DECC4
	private void InitSponge(int rate, int capacity) { }

	// RVA: 0x20DEDFC Offset: 0x20DEDFC VA: 0x20DEDFC
	private void AbsorbQueue() { }

	// RVA: 0x20DEE3C Offset: 0x20DEE3C VA: 0x20DEE3C Slot: 21
	protected virtual void Absorb(byte[] data, int off, long databitlen) { }

	// RVA: 0x20DF170 Offset: 0x20DF170 VA: 0x20DF170
	private void PadAndSwitchToSqueezingPhase() { }

	// RVA: 0x20DF43C Offset: 0x20DF43C VA: 0x20DF43C Slot: 22
	protected virtual void Squeeze(byte[] output, int offset, long outputLength) { }

	// RVA: 0x20DF6A0 Offset: 0x20DF6A0 VA: 0x20DF6A0
	private static void FromBytesToWords(ulong[] stateAsWords, byte[] state) { }

	// RVA: 0x20DF798 Offset: 0x20DF798 VA: 0x20DF798
	private static void FromWordsToBytes(byte[] state, ulong[] stateAsWords) { }

	// RVA: 0x20DF5DC Offset: 0x20DF5DC VA: 0x20DF5DC
	private void KeccakPermutation(byte[] state) { }

	// RVA: 0x20DF91C Offset: 0x20DF91C VA: 0x20DF91C
	private void KeccakPermutationAfterXor(byte[] state, byte[] data, int dataLengthInBytes) { }

	// RVA: 0x20DF868 Offset: 0x20DF868 VA: 0x20DF868
	private void KeccakPermutationOnWords(ulong[] state) { }

	// RVA: 0x20DF9E4 Offset: 0x20DF9E4 VA: 0x20DF9E4
	private void Theta(ulong[] A) { }

	// RVA: 0x20DFC1C Offset: 0x20DFC1C VA: 0x20DFC1C
	private void Rho(ulong[] A) { }

	// RVA: 0x20DFE38 Offset: 0x20DFE38 VA: 0x20DFE38
	private void Pi(ulong[] A) { }

	// RVA: 0x20DFF84 Offset: 0x20DFF84 VA: 0x20DFF84
	private void Chi(ulong[] A) { }

	// RVA: 0x20E0184 Offset: 0x20E0184 VA: 0x20E0184
	private static void Iota(ulong[] A, int indexRound) { }

	// RVA: 0x20DEE38 Offset: 0x20DEE38 VA: 0x20DEE38
	private void KeccakAbsorb(byte[] byteState, byte[] data, int dataInBytes) { }

	// RVA: 0x20DF40C Offset: 0x20DF40C VA: 0x20DF40C
	private void KeccakExtract1024bits(byte[] byteState, byte[] data) { }

	// RVA: 0x20DF424 Offset: 0x20DF424 VA: 0x20DF424
	private void KeccakExtract(byte[] byteState, byte[] data, int laneCount) { }

	// RVA: 0x20E0260 Offset: 0x20E0260 VA: 0x20E0260 Slot: 23
	public virtual IMemoable Copy() { }

	// RVA: 0x20E02C0 Offset: 0x20E02C0 VA: 0x20E02C0 Slot: 24
	public virtual void Reset(IMemoable other) { }

	// RVA: 0x20E0398 Offset: 0x20E0398 VA: 0x20E0398
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public abstract class LongDigest : IDigest, IMemoable // TypeDefIndex: 4639
{
	// Fields
	private int MyByteLength; // 0x10
	private byte[] xBuf; // 0x18
	private int xBufOff; // 0x20
	private long byteCount1; // 0x28
	private long byteCount2; // 0x30
	internal ulong H1; // 0x38
	internal ulong H2; // 0x40
	internal ulong H3; // 0x48
	internal ulong H4; // 0x50
	internal ulong H5; // 0x58
	internal ulong H6; // 0x60
	internal ulong H7; // 0x68
	internal ulong H8; // 0x70
	private ulong[] W; // 0x78
	private int wOff; // 0x80
	internal static readonly ulong[] K; // 0x0

	// Properties
	public abstract string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E03FC Offset: 0x20E03FC VA: 0x20E03FC
	internal void .ctor() { }

	// RVA: 0x20E048C Offset: 0x20E048C VA: 0x20E048C
	internal void .ctor(LongDigest t) { }

	// RVA: 0x20E0540 Offset: 0x20E0540 VA: 0x20E0540
	protected void CopyIn(LongDigest t) { }

	// RVA: 0x20E0778 Offset: 0x20E0778 VA: 0x20E0778 Slot: 7
	public void Update(byte input) { }

	// RVA: 0x20E08B8 Offset: 0x20E08B8 VA: 0x20E08B8 Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x20E0A50 Offset: 0x20E0A50 VA: 0x20E0A50
	public void Finish() { }

	// RVA: 0x20E1620 Offset: 0x20E1620 VA: 0x20E1620 Slot: 13
	public virtual void Reset() { }

	// RVA: 0x20E0820 Offset: 0x20E0820 VA: 0x20E0820
	internal void ProcessWord(byte[] input, int inOff) { }

	// RVA: 0x20E0AC8 Offset: 0x20E0AC8 VA: 0x20E0AC8
	private void AdjustByteCounts() { }

	// RVA: 0x20E0AEC Offset: 0x20E0AEC VA: 0x20E0AEC
	internal void ProcessLength(long lowW, long hiW) { }

	// RVA: 0x20E0B8C Offset: 0x20E0B8C VA: 0x20E0B8C
	internal void ProcessBlock() { }

	// RVA: 0x20E1700 Offset: 0x20E1700 VA: 0x20E1700
	private static ulong Ch(ulong x, ulong y, ulong z) { }

	// RVA: 0x20E1720 Offset: 0x20E1720 VA: 0x20E1720
	private static ulong Maj(ulong x, ulong y, ulong z) { }

	// RVA: 0x20E1710 Offset: 0x20E1710 VA: 0x20E1710
	private static ulong Sum0(ulong x) { }

	// RVA: 0x20E16F0 Offset: 0x20E16F0 VA: 0x20E16F0
	private static ulong Sum1(ulong x) { }

	// RVA: 0x20E16E0 Offset: 0x20E16E0 VA: 0x20E16E0
	private static ulong Sigma0(ulong x) { }

	// RVA: 0x20E16D0 Offset: 0x20E16D0 VA: 0x20E16D0
	private static ulong Sigma1(ulong x) { }

	// RVA: 0x20E1734 Offset: 0x20E1734 VA: 0x20E1734 Slot: 6
	public int GetByteLength() { }

	// RVA: -1 Offset: -1 Slot: 14
	public abstract string get_AlgorithmName();

	// RVA: -1 Offset: -1 Slot: 15
	public abstract int GetDigestSize();

	// RVA: -1 Offset: -1 Slot: 16
	public abstract int DoFinal(byte[] output, int outOff);

	// RVA: -1 Offset: -1 Slot: 17
	public abstract IMemoable Copy();

	// RVA: -1 Offset: -1 Slot: 18
	public abstract void Reset(IMemoable t);

	// RVA: 0x20E173C Offset: 0x20E173C VA: 0x20E173C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Crypto.Digests
public class MD2Digest : IDigest, IMemoable // TypeDefIndex: 4640
{
	// Fields
	private const int DigestLength = 16;
	private const int BYTE_LENGTH = 16;
	private byte[] X; // 0x10
	private int xOff; // 0x18
	private byte[] M; // 0x20
	private int mOff; // 0x28
	private byte[] C; // 0x30
	private int COff; // 0x38
	private static readonly byte[] S; // 0x0

	// Properties
	public string AlgorithmName { get; }

	// Methods

	// RVA: 0x20E17B8 Offset: 0x20E17B8 VA: 0x20E17B8
	public void .ctor() { }

	// RVA: 0x20E1990 Offset: 0x20E1990 VA: 0x20E1990
	public void .ctor(MD2Digest t) { }

	// RVA: 0x20E1A28 Offset: 0x20E1A28 VA: 0x20E1A28
	private void CopyIn(MD2Digest t) { }

	// RVA: 0x20E1BC4 Offset: 0x20E1BC4 VA: 0x20E1BC4 Slot: 4
	public string get_AlgorithmName() { }

	// RVA: 0x20E1C0C Offset: 0x20E1C0C VA: 0x20E1C0C Slot: 5
	public int GetDigestSize() { }

	// RVA: 0x20E1C14 Offset: 0x20E1C14 VA: 0x20E1C14 Slot: 6
	public int GetByteLength() { }

	// RVA: 0x20E1C1C Offset: 0x20E1C1C VA: 0x20E1C1C Slot: 9
	public int DoFinal(byte[] output, int outOff) { }

	// RVA: 0x20E1840 Offset: 0x20E1840 VA: 0x20E1840 Slot: 10
	public void Reset() { }

	// RVA: 0x20E210C Offset: 0x20E210C VA: 0x20E210C Slot: 7
	public void Update(byte input) { }

	// RVA: 0x20E219C Offset: 0x20E219C VA: 0x20E219C Slot: 8
	public void BlockUpdate(byte[] input, int inOff, int length) { }

	// RVA: 0x20E1D20 Offset: 0x20E1D20 VA: 0x20E1D20
	internal void ProcessChecksum(byte[] m) { }

	// RVA: 0x20E1EBC Offset: 0x20E1EBC VA: 0x20E1EBC
	internal void ProcessBlock(byte[] m) { }

	// RVA: 0x20E2308 Offset: 0x20E2308 VA: 0x20E2308 Slot: 11
	public IMemoable Copy() { }

