	[CompilerGeneratedAttribute] // RVA: 0xD3B36C Offset: 0xD3B36C VA: 0xD3B36C
	// RVA: 0x1E23618 Offset: 0x1E23618 VA: 0x1E23618
	private void set_AttachTargetList(List<int> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B37C Offset: 0xD3B37C VA: 0xD3B37C
	// RVA: 0x1E23498 Offset: 0x1E23498 VA: 0x1E23498
	public List<int> get_AttachTargetList() { }

	// RVA: 0x1E23530 Offset: 0x1E23530 VA: 0x1E23530
	public bool get_ExistAttachTarget() { }

	// RVA: 0x1E23620 Offset: 0x1E23620 VA: 0x1E23620
	private int ConvertAttachTargetFromCardIndex(int cardIndex) { }

	// RVA: 0x1E23628 Offset: 0x1E23628 VA: 0x1E23628 Slot: 5
	public virtual void InitPrevCheckCondition(BattleActionData action, BattleServantData targetSvt) { }

	// RVA: 0x1E2377C Offset: 0x1E2377C VA: 0x1E2377C
	private int[] GetAttachTargetArray(BattleServantData targetSvt, long userCommandCodeId, int[] cardIdsIndexArray) { }

	// RVA: 0x1E234A0 Offset: 0x1E234A0 VA: 0x1E234A0
	public void RemoveAttachTarget(int attachTarget) { }

	// RVA: 0x1E2397C Offset: 0x1E2397C VA: 0x1E2397C Slot: 4
	public override void ApplyPrevSaveBuffData(BattleBuffData.BuffData buff) { }
}

// Namespace: 
public enum BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget // TypeDefIndex: 9127
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget Servant = 1;
	public const BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget CommandCard1 = 101;
	public const BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget CommandCard2 = 102;
	public const BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget CommandCard3 = 103;
	public const BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget CommandCard4 = 104;
	public const BattleLogicFunctionProcess.CommonAddStateTargetCheck.AttachTarget CommandCard5 = 105;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0300 Offset: 0xCB0300 VA: 0xCB0300
private sealed class BattleLogicFunctionProcess.CommonAddStateTargetCheck.<GetAttachTargetArray>c__AnonStorey0 // TypeDefIndex: 9128
{
	// Fields
	internal List<int> targetList; // 0x10
	internal BattleLogicFunctionProcess.CommonAddStateTargetCheck $this; // 0x18

	// Methods

	// RVA: 0x1E23974 Offset: 0x1E23974 VA: 0x1E23974
	public void .ctor() { }

	// RVA: 0x1E23A20 Offset: 0x1E23A20 VA: 0x1E23A20
	internal void <>m__0(int index) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.BaseFunctionTypeProcess // TypeDefIndex: 9129
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD2500 Offset: 0xCD2500 VA: 0xCD2500
	[DebuggerBrowsableAttribute] // RVA: 0xCD2500 Offset: 0xCD2500 VA: 0xCD2500
	private BattleLogicFunction <logic>k__BackingField; // 0x10

	// Properties
	protected BattleLogicFunction logic { get; set; }
	protected BattleData data { get; }

	// Methods

	// RVA: 0x1E2205C Offset: 0x1E2205C VA: 0x1E2205C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B38C Offset: 0xD3B38C VA: 0xD3B38C
	// RVA: 0x1E22064 Offset: 0x1E22064 VA: 0x1E22064
	protected BattleLogicFunction get_logic() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B39C Offset: 0xD3B39C VA: 0xD3B39C
	// RVA: 0x1E2206C Offset: 0x1E2206C VA: 0x1E2206C
	private void set_logic(BattleLogicFunction value) { }

	// RVA: 0x1E22074 Offset: 0x1E22074 VA: 0x1E22074
	protected BattleData get_data() { }

	// RVA: 0x1E220A0 Offset: 0x1E220A0 VA: 0x1E220A0
	protected void DebugLog(string str) { }

	// RVA: 0x1E220A4 Offset: 0x1E220A4 VA: 0x1E220A4 Slot: 4
	public virtual void init(BattleLogicFunction logic) { }

	// RVA: 0x1E220AC Offset: 0x1E220AC VA: 0x1E220AC
	public bool IsNeedInit(BattleLogicFunction logic) { }

	// RVA: 0x1E220BC Offset: 0x1E220BC VA: 0x1E220BC Slot: 5
	public virtual bool IsPreCheckTargetsAvailable(FunctionEntity funcEnt, int actorUniqueId) { }

	// RVA: 0x1E220C4 Offset: 0x1E220C4 VA: 0x1E220C4
	public bool checkExecutable(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1E22148 Offset: 0x1E22148 VA: 0x1E22148 Slot: 6
	protected virtual bool checkCommonCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1E2275C Offset: 0x1E2275C VA: 0x1E2275C Slot: 7
	protected virtual bool checkCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1E2278C Offset: 0x1E2278C VA: 0x1E2278C
	protected BattleLogicFunctionProcess.BaseBuffProcess MakeBuffProcess(int type) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.AddStateProcess : BattleLogicFunctionProcess.CommonAddStateProcess // TypeDefIndex: 9130
{
	// Methods

	// RVA: 0x1E22034 Offset: 0x1E22034 VA: 0x1E22034
	public void .ctor() { }
}

// Namespace: 
public class BattleLogicFunctionProcess.AddStateShortProcess : BattleLogicFunctionProcess.CommonAddStateProcess // TypeDefIndex: 9131
{
	// Methods

	// RVA: 0x1E22044 Offset: 0x1E22044 VA: 0x1E22044
	public void .ctor() { }
}

// Namespace: 
public class BattleLogicFunctionProcess.CommonAddStateProcess : BattleLogicFunctionProcess.BaseFunctionTypeProcess // TypeDefIndex: 9132
{
	// Methods

	// RVA: 0x1E2203C Offset: 0x1E2203C VA: 0x1E2203C
	public void .ctor() { }

	// RVA: 0x1E22820 Offset: 0x1E22820 VA: 0x1E22820 Slot: 7
	protected override bool checkCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1E228B8 Offset: 0x1E228B8 VA: 0x1E228B8
	protected bool CheckCondition(BattleActionData action, BattleLogicFunctionProcess.CommonAddStateTargetCheck funcTarget) { }

	// RVA: 0x1E23344 Offset: 0x1E23344 VA: 0x1E23344
	protected bool IsDuplicatedBuffGroup(BattleLogicFunctionProcess.CommonAddStateTargetCheck funcTarget, BuffEntity buffEnt, BattleServantData targetSvt) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.BaseBuffProcess // TypeDefIndex: 9133
{
	// Methods

	// RVA: 0x1E2204C Offset: 0x1E2204C VA: 0x1E2204C
	public void .ctor() { }

	// RVA: 0x1E22054 Offset: 0x1E22054 VA: 0x1E22054 Slot: 4
	public virtual bool CheckCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, BattleServantData targetSvt) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.SkillRankUpBuffProcess : BattleLogicFunctionProcess.BaseBuffProcess // TypeDefIndex: 9134
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD253C Offset: 0xCD253C VA: 0xCD253C
	private static Func<BattleSkillInfoData, bool> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1E22810 Offset: 0x1E22810 VA: 0x1E22810
	public void .ctor() { }

	// RVA: 0x1E2522C Offset: 0x1E2522C VA: 0x1E2522C Slot: 4
	public override bool CheckCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, BattleServantData targetSvt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B3AC Offset: 0xD3B3AC VA: 0xD3B3AC
	// RVA: 0x1E25330 Offset: 0x1E25330 VA: 0x1E25330
	private static bool <CheckCondition>m__0(BattleSkillInfoData skill) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.SkillSealSelectBuffProcess : BattleLogicFunctionProcess.BaseBuffProcess // TypeDefIndex: 9135
{
	// Methods

	// RVA: 0x1E22818 Offset: 0x1E22818 VA: 0x1E22818
	public void .ctor() { }

	// RVA: 0x1E25360 Offset: 0x1E25360 VA: 0x1E25360 Slot: 4
	public override bool CheckCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, BattleServantData targetSvt) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.CommonFunctionTypeProcess : BattleLogicFunctionProcess.BaseFunctionTypeProcess // TypeDefIndex: 9136
{
	// Methods

	// RVA: 0x1E23AA8 Offset: 0x1E23AA8 VA: 0x1E23AA8
	public void .ctor() { }

	// RVA: 0x1E23BA8 Offset: 0x1E23BA8 VA: 0x1E23BA8 Slot: 8
	protected virtual bool CheckConditionPartial(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, DataVals baseVals, BattleLogicFunction.ProcListInArgs procArgs) { }

	// RVA: 0x1E23BB0 Offset: 0x1E23BB0 VA: 0x1E23BB0 Slot: 7
	protected override bool checkCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.MoveToLastSubMemberProcess : BattleLogicFunctionProcess.CommonFunctionTypeProcess // TypeDefIndex: 9137
{
	// Methods

	// RVA: 0x1E24F50 Offset: 0x1E24F50 VA: 0x1E24F50
	public void .ctor() { }

	// RVA: 0x1E24F58 Offset: 0x1E24F58 VA: 0x1E24F58 Slot: 7
	protected override bool checkCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }

	// RVA: 0x1E2510C Offset: 0x1E2510C VA: 0x1E2510C
	protected bool HasRefuseBuff(BattleServantData targetSvtData) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.TransformServantProcess : BattleLogicFunctionProcess.CommonFunctionTypeProcess // TypeDefIndex: 9138
{
	// Methods

	// RVA: 0x1E254E4 Offset: 0x1E254E4 VA: 0x1E254E4
	public void .ctor() { }

	// RVA: 0x1E254EC Offset: 0x1E254EC VA: 0x1E254EC Slot: 8
	protected override bool CheckConditionPartial(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget, DataVals baseVals, BattleLogicFunction.ProcListInArgs procArgs) { }
}

// Namespace: 
public class BattleLogicFunctionProcess.CommonFieldFunctionProcess : BattleLogicFunctionProcess.CommonFunctionTypeProcess // TypeDefIndex: 9139
{
	// Methods

	// RVA: 0x1E23AA0 Offset: 0x1E23AA0 VA: 0x1E23AA0
	public void .ctor() { }

	// RVA: 0x1E23AB0 Offset: 0x1E23AB0 VA: 0x1E23AB0 Slot: 5
	public override bool IsPreCheckTargetsAvailable(FunctionEntity funcEnt, int actorUniqueId) { }

	// RVA: 0x1E23ACC Offset: 0x1E23ACC VA: 0x1E23ACC
	protected bool IsTargetNotServant(FunctionEntity funcEnt, int actorUniqueId) { }

	// RVA: 0x1E23B14 Offset: 0x1E23B14 VA: 0x1E23B14 Slot: 6
	protected override bool checkCommonCondition(BattleActionData action, BattleLogicFunctionProcess.FunctionTargetCheck funcTarget) { }
}

// Namespace: 
public class BattleLogicNomal // TypeDefIndex: 9140
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicSkill logicskill; // 0x20
	public BattleLogicTarget logictarget; // 0x28
	public BattleLogicFunction logicfunction; // 0x30
	public int commandIndex; // 0x38
	public BattleLogicTask[] zeroTask; // 0x40
	private BattleLogicTask tmpShiftTask; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xCD254C Offset: 0xCD254C VA: 0xCD254C
	private static Comparison<BattleBuffData.BuffData> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD255C Offset: 0xCD255C VA: 0xCD255C
	private static Comparison<BattleBuffData.BuffData> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xCD256C Offset: 0xCD256C VA: 0xCD256C
	private static Action<AiNpcBattleServantData> <>f__am$cache2; // 0x10

	// Properties
	public BaseBattleEvent BattleEvent { get; }

	// Methods

	// RVA: 0x1E255F4 Offset: 0x1E255F4 VA: 0x1E255F4
	public void .ctor() { }

	// RVA: 0x1E256D8 Offset: 0x1E256D8 VA: 0x1E256D8
	public BaseBattleEvent get_BattleEvent() { }

	// RVA: 0x1E25704 Offset: 0x1E25704 VA: 0x1E25704
	public void setReactionFunction(Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.reactionFunction> list) { }

	// RVA: 0x1E257A0 Offset: 0x1E257A0 VA: 0x1E257A0
	public bool checkOverKill() { }

	// RVA: 0x1E25898 Offset: 0x1E25898 VA: 0x1E25898
	public BattleLogicTask[] taskCommandAttack(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E26384 Offset: 0x1E26384 VA: 0x1E26384
	public BattleLogicTask[] taskAddCommandAttack(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E266CC Offset: 0x1E266CC VA: 0x1E266CC
	public BattleLogicTask[] taskComboOrderBefore(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E26720 Offset: 0x1E26720 VA: 0x1E26720
	public BattleLogicTask[] taskComboOrderAfter(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E26830 Offset: 0x1E26830 VA: 0x1E26830
	public BattleActionData createCommandBattle(BattleLogicTask task) { }

	// RVA: 0x1E27C0C Offset: 0x1E27C0C VA: 0x1E27C0C
	public BattleActionData createBackStep(int uniqueId) { }

	// RVA: 0x1E27CA0 Offset: 0x1E27CA0 VA: 0x1E27CA0
	public BattleActionData createComboOrder(BattleLogicTask task) { }

	// RVA: 0x1E27FA4 Offset: 0x1E27FA4 VA: 0x1E27FA4
	public BattleLogicTask[] taskPlayMotion(BattleServantData svtData, string motionName, Transform Tr) { }

	// RVA: 0x1E28138 Offset: 0x1E28138 VA: 0x1E28138
	public BattleLogicTask[] taskPlaySubEntryMotion(BattleServantData svtData, Transform Tr, bool isTactical = False) { }

	// RVA: 0x1E284DC Offset: 0x1E284DC VA: 0x1E284DC
	public int getCountSubmember(BattleServantData[] svtList) { }

	// RVA: 0x1E28590 Offset: 0x1E28590 VA: 0x1E28590
	public BattleActionData createPlayMotion(BattleLogicTask task) { }

	// RVA: 0x1E286AC Offset: 0x1E286AC VA: 0x1E286AC
	public BattleActionData createStartTurn(BattleLogicTask task) { }

	// RVA: 0x1E287C0 Offset: 0x1E287C0 VA: 0x1E287C0
	public BattleActionData createStartEnemyTurn(BattleLogicTask task) { }

	// RVA: 0x1E288F8 Offset: 0x1E288F8 VA: 0x1E288F8
	private bool CheckDeadEnemy() { }

	// RVA: 0x1E28950 Offset: 0x1E28950 VA: 0x1E28950
	private BattleActionData DeadChangePos() { }

	// RVA: 0x1E28CE8 Offset: 0x1E28CE8 VA: 0x1E28CE8
	public BattleActionData createEndTurnPlayer(BattleLogicTask task) { }

	// RVA: 0x1E2A35C Offset: 0x1E2A35C VA: 0x1E2A35C
	private void SetNextTargetId() { }

	// RVA: 0x1E2A7BC Offset: 0x1E2A7BC VA: 0x1E2A7BC
	public BattleActionData createEndTurnEnemy(BattleLogicTask task) { }

	// RVA: 0x1E2BE28 Offset: 0x1E2BE28 VA: 0x1E2BE28
	public BattleLogicTask[] taskBuffAdd(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E2BF4C Offset: 0x1E2BF4C VA: 0x1E2BF4C
	public BattleActionData createBuffAddPlayer(BattleLogicTask task) { }

	// RVA: 0x1E2C1D8 Offset: 0x1E2C1D8 VA: 0x1E2C1D8
	public BattleActionData createBuffAddEnemy(BattleLogicTask task) { }

	// RVA: 0x1E2C3A4 Offset: 0x1E2C3A4 VA: 0x1E2C3A4
	public BattleLogicTask[] checkReflectionTask(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E2C6FC Offset: 0x1E2C6FC VA: 0x1E2C6FC
	private int getShiftableUniqueId(int uniqueId) { }

	// RVA: 0x1E2C83C Offset: 0x1E2C83C VA: 0x1E2C83C
	public BattleLogicTask[] taskCheckShiftServants(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E2CA24 Offset: 0x1E2CA24 VA: 0x1E2CA24
	public BattleActionData createShiftServant(BattleLogicTask task) { }

	// RVA: 0x1E2C844 Offset: 0x1E2C844 VA: 0x1E2C844
	public BattleLogicTask[] shiftServantTaskReaction(BattleLogicTask task) { }

	// RVA: 0x1E278AC Offset: 0x1E278AC VA: 0x1E278AC
	private void commandCodeBuffProcess(BattleBuffData.CheckInvokeBuff checkInvokeBuff, SkillLvMaster skillLvMst, BattleCommandData command, List<BattleBuffData.BuffData> commandCodeBuffList, BattleActionData actionData, bool isCommandAfter, BattleLogicFunction.AttackSideEffectFunctionArgument arg) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B3BC Offset: 0xD3B3BC VA: 0xD3B3BC
	// RVA: 0x1E2CBF4 Offset: 0x1E2CBF4 VA: 0x1E2CBF4
	private static int <createCommandBattle>m__0(BattleBuffData.BuffData a, BattleBuffData.BuffData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B3CC Offset: 0xD3B3CC VA: 0xD3B3CC
	// RVA: 0x1E2CC34 Offset: 0x1E2CC34 VA: 0x1E2CC34
	private static int <createCommandBattle>m__1(BattleBuffData.BuffData a, BattleBuffData.BuffData b) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B3DC Offset: 0xD3B3DC VA: 0xD3B3DC
	// RVA: 0x1E2CC74 Offset: 0x1E2CC74 VA: 0x1E2CC74
	private static void <createBuffAddPlayer>m__2(AiNpcBattleServantData npc) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0310 Offset: 0xCB0310 VA: 0xCB0310
private sealed class BattleLogicNomal.<createEndTurnPlayer>c__AnonStorey0 // TypeDefIndex: 9141
{
	// Fields
	internal bool isEndEnemyTurn; // 0x10
	internal int[] fieldIndiv; // 0x18
	internal BattleLogicNomal $this; // 0x20

	// Methods

	// RVA: 0x1E2A354 Offset: 0x1E2A354 VA: 0x1E2A354
	public void .ctor() { }

	// RVA: 0x1E2CD00 Offset: 0x1E2CD00 VA: 0x1E2CD00
	internal void <>m__0(AiNpcBattleServantData npc) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0320 Offset: 0xCB0320 VA: 0xCB0320
private sealed class BattleLogicNomal.<createEndTurnEnemy>c__AnonStorey1 // TypeDefIndex: 9142
{
	// Fields
	internal bool isEndEnemyTurn; // 0x10
	internal int[] fieldIndiv; // 0x18
	internal BattleLogicNomal $this; // 0x20

	// Methods

	// RVA: 0x1E2BE20 Offset: 0x1E2BE20 VA: 0x1E2BE20
	public void .ctor() { }

	// RVA: 0x1E2CCA0 Offset: 0x1E2CCA0 VA: 0x1E2CCA0
	internal void <>m__0(AiNpcBattleServantData npc) { }
}

// Namespace: 
public class NpcAiCheckTask : BattleLogicTask // TypeDefIndex: 9143
{
	// Fields
	protected BattleLogicNpcAi logicNpcAi; // 0xA8
	protected NpcAiCheckTask.Argument arg; // 0xB0

	// Methods

	// RVA: 0x18D6558 Offset: 0x18D6558 VA: 0x18D6558
	public void .ctor(BattleLogicNpcAi logicNpcAi, NpcAiCheckTask.Argument arg) { }

	// RVA: 0x18D6624 Offset: 0x18D6624 VA: 0x18D6624 Slot: 5
	public override BattleLogicTask[] MakeActionTask() { }
}

// Namespace: 
public class NpcAiCheckTask.Argument // TypeDefIndex: 9144
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD257C Offset: 0xCD257C VA: 0xCD257C
	[DebuggerBrowsableAttribute] // RVA: 0xCD257C Offset: 0xCD257C VA: 0xCD257C
	private BattleLogicTask.ACTIONTYPE <ActType>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD25B8 Offset: 0xCD25B8 VA: 0xCD25B8
	[DebuggerBrowsableAttribute] // RVA: 0xCD25B8 Offset: 0xCD25B8 VA: 0xCD25B8
	private AiLogic.PROC_STATE <State>k__BackingField; // 0x14
	[CompilerGeneratedAttribute] // RVA: 0xCD25F4 Offset: 0xCD25F4 VA: 0xCD25F4
	[DebuggerBrowsableAttribute] // RVA: 0xCD25F4 Offset: 0xCD25F4 VA: 0xCD25F4
	private AiNpcBattleServantData <Npc>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD2630 Offset: 0xCD2630 VA: 0xCD2630
	[DebuggerBrowsableAttribute] // RVA: 0xCD2630 Offset: 0xCD2630 VA: 0xCD2630
	private int <AiStateIndex>k__BackingField; // 0x20
	public NpcAiCheckTask.Argument nextNpcArg; // 0x28

	// Properties
	public BattleLogicTask.ACTIONTYPE ActType { get; set; }
	public AiLogic.PROC_STATE State { get; set; }
	public AiNpcBattleServantData Npc { get; set; }
	public int AiStateIndex { get; set; }

	// Methods

	// RVA: 0x18D68A4 Offset: 0x18D68A4 VA: 0x18D68A4
	public void .ctor(BattleLogicTask.ACTIONTYPE actType, AiLogic.PROC_STATE state, List<AiNpcBattleServantData> npcList, int index = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B3EC Offset: 0xD3B3EC VA: 0xD3B3EC
	// RVA: 0x18D6614 Offset: 0x18D6614 VA: 0x18D6614
	public BattleLogicTask.ACTIONTYPE get_ActType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B3FC Offset: 0xD3B3FC VA: 0xD3B3FC
	// RVA: 0x18D69A8 Offset: 0x18D69A8 VA: 0x18D69A8
	private void set_ActType(BattleLogicTask.ACTIONTYPE value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B40C Offset: 0xD3B40C VA: 0xD3B40C
	// RVA: 0x18D69C0 Offset: 0x18D69C0 VA: 0x18D69C0
	public AiLogic.PROC_STATE get_State() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B41C Offset: 0xD3B41C VA: 0xD3B41C
	// RVA: 0x18D69B0 Offset: 0x18D69B0 VA: 0x18D69B0
	private void set_State(AiLogic.PROC_STATE value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B42C Offset: 0xD3B42C VA: 0xD3B42C
	// RVA: 0x18D661C Offset: 0x18D661C VA: 0x18D661C
	public AiNpcBattleServantData get_Npc() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B43C Offset: 0xD3B43C VA: 0xD3B43C
	// RVA: 0x18D69B8 Offset: 0x18D69B8 VA: 0x18D69B8
	private void set_Npc(AiNpcBattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B44C Offset: 0xD3B44C VA: 0xD3B44C
	// RVA: 0x18D69C8 Offset: 0x18D69C8 VA: 0x18D69C8
	public int get_AiStateIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B45C Offset: 0xD3B45C VA: 0xD3B45C
	// RVA: 0x18D69D0 Offset: 0x18D69D0 VA: 0x18D69D0
	private void set_AiStateIndex(int value) { }

	// RVA: 0x18D66F4 Offset: 0x18D66F4 VA: 0x18D66F4
	public void AddNextAiCheckTask(BattleLogicNpcAi logicNpcAi, List<BattleLogicTask> taskList) { }
}

// Namespace: 
public class BattleLogicNpcAi // TypeDefIndex: 9145
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD266C Offset: 0xCD266C VA: 0xCD266C
	[DebuggerBrowsableAttribute] // RVA: 0xCD266C Offset: 0xCD266C VA: 0xCD266C
	private BattleLogic <Logic>k__BackingField; // 0x10
	private AiLogic aiLogic; // 0x18
	private AiActMaster aiActMst; // 0x20
	public BattleLogicTask[] emptyTask; // 0x28
	private Dictionary<BattleLogic.LOGICTYPE, BattleLogicTask.ACTIONTYPE> dicLogicToActionType; // 0x30
	private Dictionary<BattleLogicTask.ACTIONTYPE, AiLogic.PROC_STATE> dicActionTypeToState; // 0x38
	private BattleLogicNpcAi.BaseAiActProc noneAiActProc; // 0x40
	private Dictionary<AiAct.TYPE, BattleLogicNpcAi.BaseAiActProc> dicAiActProc; // 0x48

	// Properties
	public BattleLogic Logic { get; set; }
	public BattlePerformance Perf { get; }
	public BattleData Data { get; }
	public BattleLogicTarget LogicTarget { get; }

	// Methods

	// RVA: 0x1E2CD60 Offset: 0x1E2CD60 VA: 0x1E2CD60
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B46C Offset: 0xD3B46C VA: 0xD3B46C
	// RVA: 0x1E2D1E0 Offset: 0x1E2D1E0 VA: 0x1E2D1E0
	public BattleLogic get_Logic() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B47C Offset: 0xD3B47C VA: 0xD3B47C
	// RVA: 0x1E2D1E8 Offset: 0x1E2D1E8 VA: 0x1E2D1E8
	public void set_Logic(BattleLogic value) { }

	// RVA: 0x1E2D1F0 Offset: 0x1E2D1F0 VA: 0x1E2D1F0
	public BattlePerformance get_Perf() { }

	// RVA: 0x1E2D21C Offset: 0x1E2D21C VA: 0x1E2D21C
	public BattleData get_Data() { }

	// RVA: 0x1E2D248 Offset: 0x1E2D248 VA: 0x1E2D248
	public BattleLogicTarget get_LogicTarget() { }

	[ConditionalAttribute] // RVA: 0xD3B48C Offset: 0xD3B48C VA: 0xD3B48C
	// RVA: 0x1E2D278 Offset: 0x1E2D278 VA: 0x1E2D278
	protected void DebugLog(string str) { }

	// RVA: 0x1E2D27C Offset: 0x1E2D27C VA: 0x1E2D27C
	public void Initialize(BattleLogic logic) { }

	// RVA: 0x1E2D34C Offset: 0x1E2D34C VA: 0x1E2D34C
	public void SetReactionFunction(Dictionary<BattleLogicTask.ACTIONTYPE, BattleLogic.reactionFunction> list) { }

	// RVA: 0x1E2D594 Offset: 0x1E2D594 VA: 0x1E2D594
	public BattleLogicTask.ACTIONTYPE ConvertLogicToActType(BattleLogic.LOGICTYPE type) { }

	// RVA: 0x1E2D5F8 Offset: 0x1E2D5F8 VA: 0x1E2D5F8
	public AiLogic.PROC_STATE ConvertActionTypeToState(BattleLogicTask.ACTIONTYPE type) { }

	// RVA: 0x1E2D65C Offset: 0x1E2D65C VA: 0x1E2D65C
	public BattleLogicTask[] MakeAiCheckTask(BattleLogic.LOGICTYPE logicType, BattleData data) { }

	// RVA: 0x1E2D684 Offset: 0x1E2D684 VA: 0x1E2D684
	public BattleLogicTask[] MakeAiCheckTask(BattleLogicTask.ACTIONTYPE actType, BattleData data) { }

	// RVA: 0x1E2D838 Offset: 0x1E2D838 VA: 0x1E2D838
	private BattleLogicTask[] MakeAiActionTask(BattleLogicTask task) { }

	// RVA: 0x1E2D87C Offset: 0x1E2D87C VA: 0x1E2D87C
	public void AddAiActionTask(List<BattleLogicTask> taskList, NpcAiCheckTask.Argument arg) { }

	// RVA: 0x1E2DA20 Offset: 0x1E2DA20 VA: 0x1E2DA20
	public BattleLogicTask[] ProcAiAct(AiNpcBattleServantData npcSvt, AiEntity aiEnt) { }

	// RVA: 0x1E2DCD8 Offset: 0x1E2DCD8 VA: 0x1E2DCD8
	public BattleLogicTask MakeStepInTask(int targetId) { }

	// RVA: 0x1E2DD94 Offset: 0x1E2DD94 VA: 0x1E2DD94
	public BattleLogicTask MakeBackStepTask(int targetId) { }

	// RVA: 0x1E2DC58 Offset: 0x1E2DC58 VA: 0x1E2DC58
	public BattleLogicNpcAi.BaseAiActProc GetAiActProc(AiAct.TYPE actType) { }
}

// Namespace: 
public class BattleLogicNpcAi.AiActArgument // TypeDefIndex: 9146
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD26A8 Offset: 0xCD26A8 VA: 0xCD26A8
	[DebuggerBrowsableAttribute] // RVA: 0xCD26A8 Offset: 0xCD26A8 VA: 0xCD26A8
	private AiNpcBattleServantData <NpcSvt>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD26E4 Offset: 0xCD26E4 VA: 0xCD26E4
	[DebuggerBrowsableAttribute] // RVA: 0xCD26E4 Offset: 0xCD26E4 VA: 0xCD26E4
	private AiEntity <AiEnt>k__BackingField; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD2720 Offset: 0xCD2720 VA: 0xCD2720
	[DebuggerBrowsableAttribute] // RVA: 0xCD2720 Offset: 0xCD2720 VA: 0xCD2720
	private AiActEntity <AiActEnt>k__BackingField; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xCD275C Offset: 0xCD275C VA: 0xCD275C
	[DebuggerBrowsableAttribute] // RVA: 0xCD275C Offset: 0xCD275C VA: 0xCD275C
	private int <CountAct>k__BackingField; // 0x28

	// Properties
	public AiNpcBattleServantData NpcSvt { get; set; }
	public AiEntity AiEnt { get; set; }
	public AiActEntity AiActEnt { get; set; }
	public AiAct.TYPE AiActType { get; }
	public int CountAct { get; set; }

	// Methods

	// RVA: 0x1E2DB68 Offset: 0x1E2DB68 VA: 0x1E2DB68
	public void .ctor(AiActMaster aiActMst, AiNpcBattleServantData npcSvt, AiEntity aiEnt) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B4C4 Offset: 0xD3B4C4 VA: 0xD3B4C4
	// RVA: 0x1E2DE78 Offset: 0x1E2DE78 VA: 0x1E2DE78
	public AiNpcBattleServantData get_NpcSvt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B4D4 Offset: 0xD3B4D4 VA: 0xD3B4D4
	// RVA: 0x1E2DE50 Offset: 0x1E2DE50 VA: 0x1E2DE50
	private void set_NpcSvt(AiNpcBattleServantData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B4E4 Offset: 0xD3B4E4 VA: 0xD3B4E4
	// RVA: 0x1E2DE80 Offset: 0x1E2DE80 VA: 0x1E2DE80
	public AiEntity get_AiEnt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B4F4 Offset: 0xD3B4F4 VA: 0xD3B4F4
	// RVA: 0x1E2DE58 Offset: 0x1E2DE58 VA: 0x1E2DE58
	private void set_AiEnt(AiEntity value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B504 Offset: 0xD3B504 VA: 0xD3B504
	// RVA: 0x1E2DE70 Offset: 0x1E2DE70 VA: 0x1E2DE70
	public AiActEntity get_AiActEnt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B514 Offset: 0xD3B514 VA: 0xD3B514
	// RVA: 0x1E2DE60 Offset: 0x1E2DE60 VA: 0x1E2DE60
	private void set_AiActEnt(AiActEntity value) { }

	// RVA: 0x1E2DC28 Offset: 0x1E2DC28 VA: 0x1E2DC28
	public AiAct.TYPE get_AiActType() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B524 Offset: 0xD3B524 VA: 0xD3B524
	// RVA: 0x1E2DE88 Offset: 0x1E2DE88 VA: 0x1E2DE88
	public int get_CountAct() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3B534 Offset: 0xD3B534 VA: 0xD3B534
	// RVA: 0x1E2DE68 Offset: 0x1E2DE68 VA: 0x1E2DE68
	private void set_CountAct(int value) { }
}

// Namespace: 
public class BattleLogicNpcAi.BaseAiActProc // TypeDefIndex: 9147
{
	// Fields
	protected BattleLogicNpcAi logicNpcAi; // 0x10

	// Properties
	protected BattleData Data { get; }
	protected BattleLogic Logic { get; }
	public virtual bool IsNotAct { get; }

	// Methods

	// RVA: 0x1E2D1C8 Offset: 0x1E2D1C8 VA: 0x1E2D1C8
	public void .ctor() { }

	[ConditionalAttribute] // RVA: 0xD3B544 Offset: 0xD3B544 VA: 0xD3B544
	// RVA: 0x1E2DE90 Offset: 0x1E2DE90 VA: 0x1E2DE90
	protected void DebugLog(string str) { }

	// RVA: 0x1E2DE94 Offset: 0x1E2DE94 VA: 0x1E2DE94
	protected BattleData get_Data() { }

	// RVA: 0x1E2DED0 Offset: 0x1E2DED0 VA: 0x1E2DED0
	protected BattleLogic get_Logic() { }

	// RVA: 0x1E2DEFC Offset: 0x1E2DEFC VA: 0x1E2DEFC Slot: 4
	public virtual bool get_IsNotAct() { }

	// RVA: 0x1E2DF04 Offset: 0x1E2DF04 VA: 0x1E2DF04 Slot: 5
	public virtual BattleLogicNpcAi.BaseAiActProc Init(BattleLogicNpcAi logicNpcAi) { }

	// RVA: 0x1E2DF0C Offset: 0x1E2DF0C VA: 0x1E2DF0C Slot: 6
	public virtual void PreActChangeThinking(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2DF10 Offset: 0x1E2DF10 VA: 0x1E2DF10 Slot: 7
	public virtual void AddActCount(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2DF14 Offset: 0x1E2DF14 VA: 0x1E2DF14 Slot: 8
	public virtual BattleLogicNpcAi.BaseAiActProc GetFixAiActProc(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2DF54 Offset: 0x1E2DF54 VA: 0x1E2DF54 Slot: 9
	protected virtual AiAct.TYPE FixAiActType(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2DF5C Offset: 0x1E2DF5C VA: 0x1E2DF5C Slot: 10
	public virtual BattleLogicTask[] MakeTask(BattleLogicNpcAi.AiActArgument arg) { }
}

// Namespace: 
public class BattleLogicNpcAi.CommonAiActProc : BattleLogicNpcAi.BaseAiActProc // TypeDefIndex: 9148
{
	// Properties
	public override bool IsNotAct { get; }
	protected virtual bool IsDispMessage { get; }

	// Methods

	// RVA: 0x1E2DF88 Offset: 0x1E2DF88 VA: 0x1E2DF88
	public void .ctor() { }

	// RVA: 0x1E2DF98 Offset: 0x1E2DF98 VA: 0x1E2DF98 Slot: 4
	public override bool get_IsNotAct() { }

	// RVA: 0x1E2DFA0 Offset: 0x1E2DFA0 VA: 0x1E2DFA0 Slot: 11
	protected virtual bool get_IsDispMessage() { }

	// RVA: 0x1E2DFA8 Offset: 0x1E2DFA8 VA: 0x1E2DFA8 Slot: 6
	public override void PreActChangeThinking(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2E044 Offset: 0x1E2E044 VA: 0x1E2E044 Slot: 7
	public override void AddActCount(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2E084 Offset: 0x1E2E084 VA: 0x1E2E084 Slot: 12
	protected virtual void AddTask(List<BattleLogicTask> taskList, BattleLogicNpcAi.AiActArgument arg, BattleLogicTask baseTask) { }

	// RVA: 0x1E2E088 Offset: 0x1E2E088 VA: 0x1E2E088 Slot: 10
	public override BattleLogicTask[] MakeTask(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2E144 Offset: 0x1E2E144 VA: 0x1E2E144 Slot: 13
	protected virtual BattleLogicTask MakeCommonTask(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2E368 Offset: 0x1E2E368 VA: 0x1E2E368
	protected int[] GetTargetIds(BattleLogicNpcAi.AiActArgument arg, int[] targetArray) { }
}

// Namespace: 
public class BattleLogicNpcAi.ChangeThinkingActProc : BattleLogicNpcAi.CommonAiActProc // TypeDefIndex: 9149
{
	// Properties
	public override bool IsNotAct { get; }

	// Methods

	// RVA: 0x1E2D1D0 Offset: 0x1E2D1D0 VA: 0x1E2D1D0
	public void .ctor() { }

	// RVA: 0x1E2DF90 Offset: 0x1E2DF90 VA: 0x1E2DF90 Slot: 4
	public override bool get_IsNotAct() { }
}

// Namespace: 
public class BattleLogicNpcAi.NoblePhantasmActProc : BattleLogicNpcAi.CommonAiActProc // TypeDefIndex: 9150
{
	// Methods

	// RVA: 0x1E2D1D8 Offset: 0x1E2D1D8 VA: 0x1E2D1D8
	public void .ctor() { }

	// RVA: 0x1E2E780 Offset: 0x1E2E780 VA: 0x1E2E780 Slot: 9
	protected override AiAct.TYPE FixAiActType(BattleLogicNpcAi.AiActArgument arg) { }

	// RVA: 0x1E2E7F0 Offset: 0x1E2E7F0 VA: 0x1E2E7F0 Slot: 12
	protected override void AddTask(List<BattleLogicTask> taskList, BattleLogicNpcAi.AiActArgument arg, BattleLogicTask baseTask) { }

	// RVA: 0x1E2E9BC Offset: 0x1E2E9BC VA: 0x1E2E9BC
	protected void OverwriteTreasureDevice(BattleServantData svtData, int[] actVals) { }
}

// Namespace: 
private enum BattleLogicNpcAi.NoblePhantasmActProc.ParamOrder // TypeDefIndex: 9151
{
	// Fields
	public int value__; // 0x0
	public const BattleLogicNpcAi.NoblePhantasmActProc.ParamOrder ID = 0;
	public const BattleLogicNpcAi.NoblePhantasmActProc.ParamOrder LV = 1;
	public const BattleLogicNpcAi.NoblePhantasmActProc.ParamOrder CHANGE_NP = 2;
}

// Namespace: 
public class BattleLogicReaction // TypeDefIndex: 9152
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattlePerformance perf; // 0x20
	public BattleLogicSkill logicskill; // 0x28
	public BattleLogicFunction logicfunction; // 0x30
	public BattleLogicEnemyAi logicenemyai; // 0x38
	public BattleLogicFieldAi logicfieldai; // 0x40

	// Properties
	public BaseBattleEvent BattleEvent { get; }

	// Methods

	// RVA: 0x1E2EAD0 Offset: 0x1E2EAD0 VA: 0x1E2EAD0
	public void .ctor() { }

	// RVA: 0x1E2EAD8 Offset: 0x1E2EAD8 VA: 0x1E2EAD8
	public BaseBattleEvent get_BattleEvent() { }

	// RVA: 0x1E2EB04 Offset: 0x1E2EB04 VA: 0x1E2EB04
	public BattleLogicTask[] checkResurrection() { }

	// RVA: 0x1E2F378 Offset: 0x1E2F378 VA: 0x1E2F378
	public BattleActionData createResurrection(BattleLogicTask task) { }

	// RVA: 0x1E2F7EC Offset: 0x1E2F7EC VA: 0x1E2F7EC
	public BattleLogicTask[] checkDead() { }

	// RVA: 0x1E2FCD8 Offset: 0x1E2FCD8 VA: 0x1E2FCD8
	public BattleActionData createDeadMotion(BattleLogicTask task) { }

	// RVA: 0x1E303D8 Offset: 0x1E303D8 VA: 0x1E303D8
	private void updateRemoveBuff(BattleServantData svtData) { }

	// RVA: 0x1E30D98 Offset: 0x1E30D98 VA: 0x1E30D98
	public BattleLogicTask[] createTaskProcBuffDead(int uniqueId) { }

	// RVA: 0x1E30EE8 Offset: 0x1E30EE8 VA: 0x1E30EE8
	public BattleLogicTask[] createTaskDead(int uniqueId) { }

	// RVA: 0x1E2EFF4 Offset: 0x1E2EFF4 VA: 0x1E2EFF4
	public BattleLogicTask[] createTaskGuts(int uniqueId) { }

	// RVA: 0x1E314A0 Offset: 0x1E314A0 VA: 0x1E314A0
	public BattleLogicTask[] checkPlayerActionEnd(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E31674 Offset: 0x1E31674 VA: 0x1E31674
	public BattleLogicTask[] checkEnemyStartTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E31848 Offset: 0x1E31848 VA: 0x1E31848
	public BattleLogicTask[] checkEnemyEndTurn(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E31A1C Offset: 0x1E31A1C VA: 0x1E31A1C
	public BattleLogicTask[] checkEnemyWaveStart(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E31C18 Offset: 0x1E31C18 VA: 0x1E31C18
	public BattleLogicTask[] checkWithdraw() { }

	// RVA: 0x1E31FAC Offset: 0x1E31FAC VA: 0x1E31FAC
	public BattleActionData createWithdraw(BattleLogicTask task) { }

	// RVA: 0x1E3212C Offset: 0x1E3212C VA: 0x1E3212C
	public BattleLogicTask[] checkEnemyShiftAfter(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E32328 Offset: 0x1E32328 VA: 0x1E32328
	public BattleLogicTask[] checkChangeApp() { }

	// RVA: 0x1E2FC00 Offset: 0x1E2FC00 VA: 0x1E2FC00
	public BattleLogicTask getChangeAppearance(BattleServantData svtData, bool isDead = False) { }

	// RVA: 0x1E32624 Offset: 0x1E32624 VA: 0x1E32624
	public BattleActionData createChangeApp(BattleLogicTask task) { }
}

// Namespace: 
public class BattleLogicSkill // TypeDefIndex: 9153
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicTarget logictarget; // 0x20
	public BattleLogicFunction logicfunction; // 0x28

	// Methods

	// RVA: 0x1E32728 Offset: 0x1E32728 VA: 0x1E32728
	public void .ctor() { }

	// RVA: 0x1E2A4D8 Offset: 0x1E2A4D8 VA: 0x1E2A4D8
	public BattleLogicTask[] taskSkill(BattleSkillInfoData skillInfo, int[] ptTargetList, int[] enemyTargetList, bool checkAlive = False, bool checkRevengeId = False) { }

	// RVA: 0x1E32844 Offset: 0x1E32844 VA: 0x1E32844
	public BattleLogicTask[] taskCommandSpell(int skillId, int skillLv, int[] ptTargetList) { }

	// RVA: 0x1E30438 Offset: 0x1E30438 VA: 0x1E30438
	public BattleActionData createSkillData(BattleLogicTask task) { }

	// RVA: 0x1E32A34 Offset: 0x1E32A34 VA: 0x1E32A34
	public BattleLogicTask MakeAddInvokeSkillTask(SkillLvMaster skillLvMst, SkillLvEntity skillLvEnt, BattleLogicTask baseTask) { }

	// RVA: 0x1E32C88 Offset: 0x1E32C88 VA: 0x1E32C88
	public void actPassiveSkill(BattleSkillInfoData skillInfo, bool isShift = False) { }

	// RVA: 0x1E330B4 Offset: 0x1E330B4 VA: 0x1E330B4
	public BattleActionData createCommandSpell(BattleLogicTask task) { }

	// RVA: 0x1E33394 Offset: 0x1E33394 VA: 0x1E33394
	public bool checkConditions(BattleSkillInfoData skillInfo, out string text) { }

	// RVA: 0x1E33A3C Offset: 0x1E33A3C VA: 0x1E33A3C
	public BattleLogicTask[] getQuestBehaviorSkillTask() { }

	// RVA: 0x1E33D6C Offset: 0x1E33D6C VA: 0x1E33D6C
	public BattleLogicTask[] getGimmickTask() { }

	// RVA: 0x1E3404C Offset: 0x1E3404C VA: 0x1E3404C
	private int GetHitGimmickSkillId(int[] rateArray) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0330 Offset: 0xCB0330 VA: 0xCB0330
private sealed class BattleLogicSkill.<checkConditions>c__AnonStorey0 // TypeDefIndex: 9154
{
	// Fields
	internal Dictionary<string, object> conditions; // 0x10

	// Methods

	// RVA: 0x1E33A34 Offset: 0x1E33A34 VA: 0x1E33A34
	public void .ctor() { }

	// RVA: 0x1E3419C Offset: 0x1E3419C VA: 0x1E3419C
	internal bool <>m__0(string key, int val) { }

	// RVA: 0x1E34290 Offset: 0x1E34290 VA: 0x1E34290
	internal bool <>m__1(string key, int val) { }

	// RVA: 0x1E343B4 Offset: 0x1E343B4 VA: 0x1E343B4
	internal bool <>m__2(string key, double val) { }

	// RVA: 0x1E344B4 Offset: 0x1E344B4 VA: 0x1E344B4
	internal bool <>m__3(string key, double val) { }
}

// Namespace: 
public class BattleLogicSpecial // TypeDefIndex: 9155
{
	// Fields
	public BattleData data; // 0x10
	public BattleLogic logic; // 0x18
	public BattleLogicTarget logictarget; // 0x20
	public BattleLogicFunction logicfunction; // 0x28

	// Methods

	// RVA: 0x1E345DC Offset: 0x1E345DC VA: 0x1E345DC
	public void .ctor() { }

	// RVA: 0x1E345E4 Offset: 0x1E345E4 VA: 0x1E345E4
	public BattleLogicTask[] taskTresureDvc(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E34874 Offset: 0x1E34874 VA: 0x1E34874
	public BattleLogicTask[] taskTresureDvcAlways(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E34B8C Offset: 0x1E34B8C VA: 0x1E34B8C
	public BattleLogicTask[] taskEnemyTresureDvc(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E34ECC Offset: 0x1E34ECC VA: 0x1E34ECC
	public BattleLogicTask[] taskEnemyTresureDvcAlways(BattleLogic.LOGICTYPE ltype, BattleData data) { }

	// RVA: 0x1E35214 Offset: 0x1E35214 VA: 0x1E35214
	public BattleActionData createSpecialData(BattleLogicTask task) { }
}

// Namespace: 
public class BattleLogicTarget // TypeDefIndex: 9156
{
	// Fields
	public BattleData data; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD2798 Offset: 0xCD2798 VA: 0xCD2798
	private static Predicate<BattleServantData> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x1E35F4C Offset: 0x1E35F4C VA: 0x1E35F4C
	public void .ctor() { }

	// RVA: 0x1E35F54 Offset: 0x1E35F54 VA: 0x1E35F54
	public void setInit(BattleData data) { }

	// RVA: 0x1E35E40 Offset: 0x1E35E40 VA: 0x1E35E40
	public int getTargetBase(int[] targetlist, bool isResurrectable = False) { }

	// RVA: 0x1E35F5C Offset: 0x1E35F5C VA: 0x1E35F5C
	public int getTargetRandom(int[] targetlist, bool isResurrectable = False) { }

	// RVA: 0x1E35FCC Offset: 0x1E35FCC VA: 0x1E35FCC
	public int getTargetHighHp(int[] targetlist) { }

	// RVA: 0x1E36070 Offset: 0x1E36070 VA: 0x1E36070
	public int getTargetLowHp(int[] targetlist) { }

	// RVA: 0x1E36114 Offset: 0x1E36114 VA: 0x1E36114
	public int getTargetNpTurnLower(int[] targetlist) { }

	// RVA: 0x1E361B8 Offset: 0x1E361B8 VA: 0x1E361B8
	public int getTargetNpGaugeHeighter(int[] targetlist) { }

	// RVA: 0x1E3625C Offset: 0x1E3625C VA: 0x1E3625C
	public int getRevenge(int actId, int[] targetlist) { }

	// RVA: 0x1E36348 Offset: 0x1E36348 VA: 0x1E36348
	public int getTargetActiveIndividualities(int[] indv, int[] targetlist) { }

	// RVA: 0x1E366C0 Offset: 0x1E366C0 VA: 0x1E366C0
	public int getTargetActiveBuff(int[] ids, int[] targetlist) { }

	// RVA: 0x1E367B4 Offset: 0x1E367B4 VA: 0x1E367B4
	public int getTargetPosition(int position, int[] targetlist) { }

	// RVA: 0x1E2E4C0 Offset: 0x1E2E4C0 VA: 0x1E2E4C0
	public int getTargetAiAct(AiAct.TARGET target, int actId, int[] individuality, int[] targetlist, bool isCheckHate = True, bool isResurrectable = False, int[] addIndiv) { }
