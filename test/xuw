	// RVA: 0xEE6960 Offset: 0xEE6960 VA: 0xEE6960
	private IEnumerator WaitMapStateForBackStory() { }

	// RVA: 0xEE69D0 Offset: 0xEE69D0 VA: 0xEE69D0
	public void RequestChangeTerminalListBG(int warId) { }

	// RVA: 0xEE6A98 Offset: 0xEE6A98 VA: 0xEE6A98
	public void ResetTopListIfWarEventEnds() { }

	// RVA: 0xEE72AC Offset: 0xEE72AC VA: 0xEE72AC
	public void cbfInit_List() { }

	// RVA: 0xEE8718 Offset: 0xEE8718 VA: 0xEE8718
	public void UpdateList() { }

	// RVA: 0xEE873C Offset: 0xEE873C VA: 0xEE873C
	public void UpdateAreaQuestInfoList() { }

	// RVA: 0xEE8740 Offset: 0xEE8740 VA: 0xEE8740
	private void LoadEventAsset(Action onCompleteLoadAsset) { }

	// RVA: 0xEE8948 Offset: 0xEE8948 VA: 0xEE8948
	private EventDetailEntity checkAssetLoad() { }

	// RVA: 0xEE8C90 Offset: 0xEE8C90 VA: 0xEE8C90
	public void mcbfCheckSceneStatus() { }

	// RVA: 0xEE8E44 Offset: 0xEE8E44 VA: 0xEE8E44
	private void SetAreaBoard_WarInf(MapControl.AreaBoardInfo areaBoardInfo, MapControl.WarInfo warInfo, bool isDispNext = False, string specialNoticeText = "") { }

	// RVA: 0xEE905C Offset: 0xEE905C VA: 0xEE905C
	private QuestBoardListViewItemDraw.enStatus BoardStatusfromWarInfo(MapControl.WarInfo warInfo) { }

	// RVA: 0xEE7470 Offset: 0xEE7470 VA: 0xEE7470
	private void InitStoryQuestInfoList() { }

	// RVA: 0xEE9130 Offset: 0xEE9130 VA: 0xEE9130
	public void ResetLists() { }

	// RVA: 0xEE6CC8 Offset: 0xEE6CC8 VA: 0xEE6CC8
	private void InitAreaQuestInfoList() { }

	// RVA: 0xEE784C Offset: 0xEE784C VA: 0xEE784C
	private void InitCaldeaFolderInfoList() { }

	// RVA: 0xEE97D4 Offset: 0xEE97D4 VA: 0xEE97D4
	private WarEntity[] GetSubFolders(int parentId, WarMaster warMst) { }

	// RVA: 0xEE9950 Offset: 0xEE9950 VA: 0xEE9950
	private List<MapControl.QuestInfo> MakeBoardInfo(WarEntity[] folders) { }

	// RVA: 0xEEB188 Offset: 0xEEB188 VA: 0xEEB188
	private void AddQuestToCaldeaFolderInfo(int warId, MapControl.QuestInfo questInfo) { }

	// RVA: 0xEE63BC Offset: 0xEE63BC VA: 0xEE63BC
	private ScrTerminalListTop.CaldeaFolderInfo GetCaldeaFolderInfoByWarID(int warId) { }

	// RVA: 0xEEB2B8 Offset: 0xEEB2B8 VA: 0xEEB2B8
	private MapControl.AreaBoardInfo GetAreaBoardInfoFromFolder(int warId) { }

	// RVA: 0xEEB410 Offset: 0xEEB410 VA: 0xEEB410
	private MapControl.AreaBoardInfo FindAreaBoardInfoByWarId(List<MapControl.QuestInfo> questInfoList, int warId) { }

	// RVA: 0xEEB5AC Offset: 0xEEB5AC VA: 0xEEB5AC
	public void cbfCapter_Create() { }

	// RVA: 0xEE94D0 Offset: 0xEE94D0 VA: 0xEE94D0
	private void InitMapQuestList(int warId, int spotId) { }

	// RVA: 0xEEB884 Offset: 0xEEB884 VA: 0xEEB884
	private void CheckOnSpotTutorial(int spotId) { }

	// RVA: 0xEEB924 Offset: 0xEEB924 VA: 0xEEB924
	public void cbfCapter_Select(int iPrevList) { }

	// RVA: 0xEEBA08 Offset: 0xEEBA08 VA: 0xEEBA08
	public void mcbfAreaInit() { }

	// RVA: 0xEEBBF4 Offset: 0xEEBBF4 VA: 0xEEBBF4
	private void StartWindowMessage() { }

	// RVA: 0xEEBE60 Offset: 0xEEBE60 VA: 0xEEBE60
	private void DoOccurrenceChain() { }

	// RVA: 0xEEC368 Offset: 0xEEC368 VA: 0xEEC368
	private ActionChain CreateAfterQuestClearCheckChain() { }

	// RVA: 0xEEC4F0 Offset: 0xEEC4F0 VA: 0xEEC4F0
	private ActionChain CreateAfterWarClearOccurrenceChain() { }

	// RVA: 0xEEC604 Offset: 0xEEC604 VA: 0xEEC604
	private ActionChain CreateHeroineOccurrenceChain() { }

	// RVA: 0xEEC93C Offset: 0xEEC93C VA: 0xEEC93C
	private ActionChain CreateAfterQuestClearOccurrenceChain() { }

	// RVA: 0xEECFD4 Offset: 0xEECFD4 VA: 0xEECFD4
	private void StartWarClearAction(Action finishCallback) { }

	// RVA: 0xEED4B4 Offset: 0xEED4B4 VA: 0xEED4B4
	public void CheckLastPlayBgm() { }

	// RVA: 0xEED6AC Offset: 0xEED6AC VA: 0xEED6AC
	private void StartOrderEffect(Action finishCallback) { }

	// RVA: 0xEED808 Offset: 0xEED808 VA: 0xEED808
	private void StartPrologueMovie(Action finishCallback) { }

	// RVA: 0xEED920 Offset: 0xEED920 VA: 0xEED920
	private void StartPrologueMovieAfterQuestClear(Action finishCallback) { }

	// RVA: 0xEED810 Offset: 0xEED810 VA: 0xEED810
	private void PrologueMovieChain(Action finishCallback, bool afterQuestClear) { }

	// RVA: 0xEEDD40 Offset: 0xEEDD40 VA: 0xEEDD40
	private void SavePlayedOpeningMovie(string movieFileName) { }

	// RVA: 0xEED928 Offset: 0xEED928 VA: 0xEED928
	private bool CheckPrologueMovie(int warId, bool afterQuestClear) { }

	// RVA: 0xEEDB7C Offset: 0xEEDB7C VA: 0xEEDB7C
	public void OpenigMovieAfter() { }

	// RVA: 0xEEE0DC Offset: 0xEEE0DC VA: 0xEEE0DC
	private void StartHeroineLimitAction(Action finishCallback) { }

	// RVA: 0xEEE248 Offset: 0xEEE248 VA: 0xEEE248
	private void StartHeroineCostumeAction(Action finishCallback) { }

	// RVA: 0xEEE3D4 Offset: 0xEEE3D4 VA: 0xEEE3D4
	private CostumeReleaseAnnounce GetCostumeInfo() { }

	// RVA: 0xEEE454 Offset: 0xEEE454 VA: 0xEEE454
	private ServantCostumeEntity GetServantCostumeEntity(int svtId, int costumeId) { }

	// RVA: 0xEEE578 Offset: 0xEEE578 VA: 0xEEE578
	private void StartHeroineTreasureAction(Action finishCallback) { }

	// RVA: 0xEEE7B8 Offset: 0xEEE7B8 VA: 0xEEE7B8
	private bool StartHeroineTreasureAction_sub(int oldTreasureDvcId, int nowTreasureDvcId, int oldTreasureDvcLv, int nowTreasureDvcLv, bool isUseOldTreasureDvc, bool isUseNowTreasureDvc, Action endAction) { }

	// RVA: 0xEEEA00 Offset: 0xEEEA00 VA: 0xEEEA00
	private void StartHeroineFriendshipAction(Action finishCallback) { }

	// RVA: 0xEEEB60 Offset: 0xEEEB60 VA: 0xEEEB60
	private void StartHeroineExceedCountUpAction(Action finishCallback) { }

	// RVA: 0xEEEC88 Offset: 0xEEEC88 VA: 0xEEEC88
	private void StartHeroineFriendShipExceedAction(Action finishCallback) { }

	// RVA: 0xEEEDC4 Offset: 0xEEEDC4 VA: 0xEEEDC4
	private void StartQuestClearItemAction(Action finishCallback) { }

	// RVA: 0xEEFCCC Offset: 0xEEFCCC VA: 0xEEFCCC
	private void LoadItemGetEffects(QuestRewardInfo[] rewardInfoList, int index, Action afterLoad) { }

	// RVA: 0xEF00D0 Offset: 0xEF00D0 VA: 0xEF00D0
	private int GetItemGetEffectId(QuestRewardInfo rewardInfo) { }

	// RVA: 0xEF0254 Offset: 0xEF0254 VA: 0xEF0254
	private string GetAssetPathOfItemGetAnimation(int effectId, bool isWarBoardClear = False) { }

	// RVA: 0xEF0354 Offset: 0xEF0354 VA: 0xEF0354
	private string GetRootObjectNameOfItemGetAnimation(int effectId, bool isWarBoardClear = False) { }

	// RVA: 0xEEFACC Offset: 0xEEFACC VA: 0xEEFACC
	private void IsQuestRewardHasServantOrCommandCodeOrItem(QuestRewardInfo[] rewardInfoList, out bool hasSvtOrCommandCode, out bool hasItem) { }

	// RVA: 0xEF0454 Offset: 0xEF0454 VA: 0xEF0454
	private void StartQuestClearItemAction_sub(int index, QuestRewardInfo[] rewardInfoList, bool isFromTreasureBox, Action subEndAction) { }

	// RVA: 0xEEFB9C Offset: 0xEEFB9C VA: 0xEEFB9C
	private void LoadTreasureGetEffect(Action endAct) { }

	// RVA: 0xEF0CB8 Offset: 0xEF0CB8 VA: 0xEF0CB8
	private void SetupTreasureGetEffect(int itemIconId) { }

	// RVA: 0xEF0E3C Offset: 0xEF0E3C VA: 0xEF0E3C
	private void StartQuestClearItemAction_PlayItemOrSvt(bool isFromTreasureBox, Action<bool> playEndAction, float fadeInTime = 0) { }

	// RVA: 0xEF1004 Offset: 0xEF1004 VA: 0xEF1004
	private void EndQuestClearItem(Action finishCallback) { }

	// RVA: 0xEEF8B8 Offset: 0xEEF8B8 VA: 0xEEF8B8
	private void StartHarvestReward(QuestRewardInfo[] questRewardInfo, Action callback) { }

	// RVA: 0xEF137C Offset: 0xEF137C VA: 0xEF137C
	private void StartHarvestReward_sub(QuestRewardInfo[] questRewardInfo, Action endAction) { }

	// RVA: 0xEF1660 Offset: 0xEF1660 VA: 0xEF1660
	private void EndHarvestReward(Action finishCallback) { }

	// RVA: 0xEF1970 Offset: 0xEF1970 VA: 0xEF1970
	private void StartEventReward(Action finishCallback) { }

	// RVA: 0xEF1D14 Offset: 0xEF1D14 VA: 0xEF1D14
	private void StartFriendPointBoostItemReward(Action callback) { }

	// RVA: 0xEF215C Offset: 0xEF215C VA: 0xEF215C
	private void StartFriendPointBoostItemReward_sub(int index, Action endAction) { }

	// RVA: 0xEF2538 Offset: 0xEF2538 VA: 0xEF2538
	private void EndFriendPointBoostItemReward(Action finishCallback) { }

	// RVA: 0xEF1F18 Offset: 0xEF1F18 VA: 0xEF1F18
	private void StartBoardGameTokenReward(Action callback) { }

	// RVA: 0xEF2840 Offset: 0xEF2840 VA: 0xEF2840
	private void StartBoardGameTokenReward_sub(Action endAction) { }

	// RVA: 0xEF2B40 Offset: 0xEF2B40 VA: 0xEF2B40
	private void EndBoardGameTokenReward(Action finishCallback) { }

	// RVA: 0xEF2E98 Offset: 0xEF2E98 VA: 0xEF2E98
	private void StartQuestClearCostumeOpen(Action finishCallback) { }

	// RVA: 0xEF32E8 Offset: 0xEF32E8 VA: 0xEF32E8
	private void StartQuestClearCostumeOpen_sub(string[] names, int index, Action endAction) { }

	// RVA: 0xEF359C Offset: 0xEF359C VA: 0xEF359C
	private void StartQuestClearNameReveal(Action finishCallback) { }

	// RVA: 0xEF3708 Offset: 0xEF3708 VA: 0xEF3708
	private void StartQuestClearNameReveal_sub(int count, ServantChangeEntity[][] datas, Action endAction) { }

	// RVA: 0xEF39B4 Offset: 0xEF39B4 VA: 0xEF39B4
	private void StartSecretTreasureDeviceAction(Action finishCallback) { }

	// RVA: 0xEF3B84 Offset: 0xEF3B84 VA: 0xEF3B84
	private void CheckQuestClearSkillAction(Action finishCallback) { }

	// RVA: 0xEF41E0 Offset: 0xEF41E0 VA: 0xEF41E0
	private void StartQuestClearSkillAction(Action finishCallback) { }

	// RVA: 0xEF44C8 Offset: 0xEF44C8 VA: 0xEF44C8
	private bool StartQuestClearSkillAction_usd(int index, List<ServantEntity> svtList, Action endAction) { }

	// RVA: 0xEF4FC0 Offset: 0xEF4FC0 VA: 0xEF4FC0
	private bool StartQuestClearSkillAction_slot(UserServantCollectionEntity userSvtCollectionEnt, ServantEntity svtEnt, int index, SkillInfo[] oldSkillInfoList, SkillInfo[] nowSkillInfoList, Action endAction, bool isEnableEndAction) { }

	// RVA: 0xEF5B2C Offset: 0xEF5B2C VA: 0xEF5B2C
	private bool IsExistsNextSkill(int svtId, SkillInfo skillInfo) { }

	// RVA: 0xEF5DB8 Offset: 0xEF5DB8 VA: 0xEF5DB8
	private void CheckQuestClearTreasureAction(Action finishCallback) { }

	// RVA: 0xEF62A8 Offset: 0xEF62A8 VA: 0xEF62A8
	private void StartQuestClearTreasureAction(Action finishCallback) { }

	// RVA: 0xEF6190 Offset: 0xEF6190 VA: 0xEF6190
	private bool IsUseTreasureDevice(ServantTreasureDvcEntity std) { }

	// RVA: 0xEF65A8 Offset: 0xEF65A8 VA: 0xEF65A8
	private bool StartQuestClearTreasureAction_usd(int index, List<UserServantCollectionEntity> userSvtCollectionList, Action endAction) { }

	// RVA: 0xEF68EC Offset: 0xEF68EC VA: 0xEF68EC
	private bool StartQuestClearTreasureAction_slot(UserServantCollectionEntity userSvtCollectionEnt, int oldTreasureDvcId, int nowTreasureDvcId, int oldTreasureDvcLv, int nowTreasureDvcLv, bool isUseOldTreasureDvc, bool isUseNowTreasureDvc, Action endAction, bool isEnableEndAction) { }

	// RVA: 0xEF6A88 Offset: 0xEF6A88 VA: 0xEF6A88
	private void StartEventConquestReward(Action finishCallback) { }

	// RVA: 0xEF6BBC Offset: 0xEF6BBC VA: 0xEF6BBC
	private void StartMovieQuestDeleteDialog(Action finishCallback) { }

	// RVA: 0xEF6FEC Offset: 0xEF6FEC VA: 0xEF6FEC
	private void StartLimitCountEffectAction(Action finishCallback) { }

	// RVA: 0xEF70E4 Offset: 0xEF70E4 VA: 0xEF70E4
	private void StartLimitCountEffectAction_sub(int index, LimitImageAnnounce[] announces, Action endAction) { }

	// RVA: 0xEF744C Offset: 0xEF744C VA: 0xEF744C
	private void StartQuestPhaseClearRewardAction(Action finishCallback) { }

	// RVA: 0xEF77E4 Offset: 0xEF77E4 VA: 0xEF77E4
	private void StartQuestClearChangeAction(Action finishCallback) { }

	// RVA: 0xEF94D8 Offset: 0xEF94D8 VA: 0xEF94D8
	private bool IsHavingServant(int svtId, out string svtName) { }

	// RVA: 0xEF9EBC Offset: 0xEF9EBC VA: 0xEF9EBC
	private void StartQuestClearBeforeTerminalMessage(Action finishCallback) { }

	// RVA: 0xEFA0F0 Offset: 0xEFA0F0 VA: 0xEFA0F0
	private void BeforeTerminalMessageDialog(Action finishCallback, int[] mMessageIdList, int messageIdCount) { }

	// RVA: 0xEF92C8 Offset: 0xEF92C8 VA: 0xEF92C8
	private bool IsPowerUpQuest(ScrTerminalListTop.CaldeaFolderInfo powerUpQuestFolder, int questId) { }

	// RVA: 0xEFA3F4 Offset: 0xEFA3F4 VA: 0xEFA3F4
	public bool IsDispEventUIForSpot(int spotId) { }

	// RVA: 0xEFA42C Offset: 0xEFA42C VA: 0xEFA42C
	private void StartScene() { }

	// RVA: 0xEEC140 Offset: 0xEEC140 VA: 0xEEC140
	private void StartSceneFadeIn() { }

	// RVA: 0xEFAAB8 Offset: 0xEFAAB8 VA: 0xEFAAB8
	public void SetMaterialAddSvts(int svtId, string message) { }

	// RVA: 0xEF943C Offset: 0xEF943C VA: 0xEF943C
	private void AddMessageToTerminalDialogue(ScrTerminalListTop.AdditionalDlgMessage message) { }

	// RVA: 0xEF9D00 Offset: 0xEF9D00 VA: 0xEF9D00
	private void SaveTerminalDialogueMessages() { }

	// RVA: 0xEF97CC Offset: 0xEF97CC VA: 0xEF97CC
	private void LoadTerminalDialogueMessages() { }

	// RVA: 0xEFAB40 Offset: 0xEFAB40 VA: 0xEFAB40
	public bool IsDuplicateTerminalDialogueMessages(string message) { }

	// RVA: 0xEFAD5C Offset: 0xEFAD5C VA: 0xEFAD5C
	public void ShowTerminalMessagesDialogue(Action callback) { }

	// RVA: 0xEF9AE0 Offset: 0xEF9AE0 VA: 0xEF9AE0
	private void OpenTerminalMessages(int index, Action callback) { }

	// RVA: 0xEFA57C Offset: 0xEFA57C VA: 0xEFA57C
	private void ResetTerminalParams() { }

	// RVA: 0xEFA4BC Offset: 0xEFA4BC VA: 0xEFA4BC
	private void StartSceneFadeIn_End() { }

	// RVA: 0xEFADE0 Offset: 0xEFADE0 VA: 0xEFADE0
	public void StartShowWarClearReward(Action endAct) { }

	// RVA: 0xEFAE7C Offset: 0xEFAE7C VA: 0xEFAE7C
	public void StartShowWarClearRewardChain(int index, Action endAction) { }

	// RVA: 0xEFB3CC Offset: 0xEFB3CC VA: 0xEFB3CC
	private void CloseCallbackWarClearRewardChain(int index, Action endAction) { }

	// RVA: 0xEFA64C Offset: 0xEFA64C VA: 0xEFA64C
	private void SetFocusCaldeaGateQuest() { }

	// RVA: 0xEFB4B4 Offset: 0xEFB4B4 VA: 0xEFB4B4
	public void mcbfAreaWait() { }

	// RVA: 0xEF7650 Offset: 0xEF7650 VA: 0xEF7650
	private bool IsViewNotice() { }

	// RVA: 0xEFBC24 Offset: 0xEFBC24 VA: 0xEFBC24
	private bool IsResume(out bool isReturn, MapControl.AreaBoardInfo areaBoardInfo) { }

	// RVA: 0xEFC3AC Offset: 0xEFC3AC VA: 0xEFC3AC
	private void mcbfAreaWaitNext() { }

	// RVA: 0xEFDE5C Offset: 0xEFDE5C VA: 0xEFDE5C
	private void StartFavoriteTutorial() { }

	// RVA: 0xEFE394 Offset: 0xEFE394 VA: 0xEFE394
	private void SlideIn_TerminalServant() { }

	// RVA: 0xEFE01C Offset: 0xEFE01C VA: 0xEFE01C
	private void StartQuestBoardListIn_Area() { }

	// RVA: 0xEFC19C Offset: 0xEFC19C VA: 0xEFC19C
	public int CheckTerminalTopEffect() { }

	// RVA: 0xEFE480 Offset: 0xEFE480 VA: 0xEFE480
	public void StartTermninalTopEffect() { }

	// RVA: 0xEFE6B0 Offset: 0xEFE6B0 VA: 0xEFE6B0
	private void StartTerminalTopEffectBlackMark() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3EE0 Offset: 0xCD3EE0 VA: 0xCD3EE0
	// RVA: 0xEFF4AC Offset: 0xEFF4AC VA: 0xEFF4AC
	private IEnumerator CallTerminalTopEffectFadeOutBgm(float waitTime, float fadeOutTime, Action endAct) { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3EF0 Offset: 0xCD3EF0 VA: 0xCD3EF0
	// RVA: 0xEFF38C Offset: 0xEFF38C VA: 0xEFF38C
	private IEnumerator CallTerminalTopEffectMoveBoard(bool isClose, bool isForce, float waitTime, float moveTime, Easing.TYPE easeType, Action endAct) { }

	// RVA: 0xEFEBEC Offset: 0xEFEBEC VA: 0xEFEBEC
	private void StartTerminalTopEffectDisappear() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3F00 Offset: 0xCD3F00 VA: 0xCD3F00
	// RVA: 0xEFF550 Offset: 0xEFF550 VA: 0xEFF550
	private IEnumerator CallTerminalTopEffectFadeBgm(float waitTime, float fadeTime, float volume, Action endAct) { }

	// RVA: 0xEFF5FC Offset: 0xEFF5FC VA: 0xEFF5FC
	private void CheckLimitCountUnSealQuestOpen(bool isQuestClear, Action nextAction) { }

	// RVA: 0xF00230 Offset: 0xF00230 VA: 0xF00230
	private void CheckUpdateProfileSaintGraphInfo(Action finishCallback) { }

	// RVA: 0xF00358 Offset: 0xF00358 VA: 0xF00358
	private void CheckUpdateProfileSaintGraphInfo_sub(int index, UpdateProfileDialogInfoEntity[] entities, Action endAction) { }

	// RVA: 0xF006A8 Offset: 0xF006A8 VA: 0xF006A8
	public void ExecLoginQuest() { }

	// RVA: 0xF00768 Offset: 0xF00768 VA: 0xF00768
	public LoginQuestEntity GetCurrentLoginEntity() { }

	// RVA: 0xF00A74 Offset: 0xF00A74 VA: 0xF00A74
	public void StartLoginQuestRequest(int warId, int questId) { }

	// RVA: 0xF00C1C Offset: 0xF00C1C VA: 0xF00C1C
	public void EndLoginQuestRequest(string result) { }

	// RVA: 0xF00F70 Offset: 0xF00F70 VA: 0xF00F70
	public void mcbfCaldeaGateInit() { }

	// RVA: 0xF01044 Offset: 0xF01044 VA: 0xF01044
	private void CaldeaGateInitAfter() { }

	// RVA: 0xF018C4 Offset: 0xF018C4 VA: 0xF018C4
	public void mcbfCaldeaGateWait() { }

	// RVA: 0xF01F8C Offset: 0xF01F8C VA: 0xF01F8C
	public void CheckCaldeaFolderTutorials(int warId) { }

	// RVA: 0xF02078 Offset: 0xF02078 VA: 0xF02078
	public void OnClickHelp() { }

	// RVA: 0xF02120 Offset: 0xF02120 VA: 0xF02120
	public void mcbfSpotSelectWait() { }

	// RVA: 0xF02124 Offset: 0xF02124 VA: 0xF02124
	public void mcbfCapterInit() { }

	// RVA: 0xF02774 Offset: 0xF02774 VA: 0xF02774
	public void mcbfCapterWait() { }

	// RVA: 0xEE62EC Offset: 0xEE62EC VA: 0xEE62EC
	public PlayMakerFSM mfGetMyFsmP() { }

	// RVA: 0xEE6890 Offset: 0xEE6890 VA: 0xEE6890
	private void mfCallFsmEvent(string eventName) { }

	// RVA: 0xF02810 Offset: 0xF02810 VA: 0xF02810
	private void mfSetFsmValueInt(string keyName, int value) { }

	// RVA: 0xF02918 Offset: 0xF02918 VA: 0xF02918
	private int mfGetFsmValueInt(string keyName) { }

	// RVA: 0xEEDFD4 Offset: 0xEEDFD4 VA: 0xEEDFD4
	private void mfSetFsmValueStr(string keyName, string value) { }

	// RVA: 0xF02A1C Offset: 0xF02A1C VA: 0xF02A1C
	public void SetLastSelectedQuestInfo(int warId, int questId) { }

	// RVA: 0xEFC654 Offset: 0xEFC654 VA: 0xEFC654
	public bool Click_Area(MapControl.AreaBoardInfo questBoardInfo, int listIndex = -1, bool isResume = False) { }

	// RVA: 0xF034C4 Offset: 0xF034C4 VA: 0xF034C4
	public void Click_WarBoard(MapControl.QuestInfo questInfo, int listIndex) { }

	// RVA: 0xF02BD0 Offset: 0xF02BD0 VA: 0xF02BD0
	private bool IsPlayEventWar(int warId, EventEntity eventEnt) { }

	// RVA: 0xF04E28 Offset: 0xF04E28 VA: 0xF04E28
	private string GetEventWarTimeStr(DateTime dateTime) { }

	// RVA: 0xF02ABC Offset: 0xF02ABC VA: 0xF02ABC
	private void OpenNotificationDialog_QuestNone(string messageKey, Action endAction) { }

	// RVA: 0xF01BA0 Offset: 0xF01BA0 VA: 0xF01BA0
	public void Click_Shortcut(int warId, int questId) { }

	// RVA: 0xF050C4 Offset: 0xF050C4 VA: 0xF050C4
	public void Click_Quest(MapControl.QuestInfo questInfo, int listIndex) { }

	// RVA: 0xF03594 Offset: 0xF03594 VA: 0xF03594
	public void CheckQuestPlayable(MapControl.QuestInfo questInfo) { }

	// RVA: 0xF05268 Offset: 0xF05268 VA: 0xF05268
	private bool IsQuestValid(MapControl.QuestInfo questInfo) { }

	// RVA: 0xF0549C Offset: 0xF0549C VA: 0xF0549C
	private void OpenQuestTimeOverNoticeDialog(Action callback) { }

	// RVA: 0xF05A50 Offset: 0xF05A50 VA: 0xF05A50
	public void RefreshTerminalScene() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3F10 Offset: 0xCD3F10 VA: 0xCD3F10
	// RVA: 0xF059A8 Offset: 0xF059A8 VA: 0xF059A8
	private IEnumerator OpenConfirmDialogList(List<QuestMessageEntity> questMessages, Action allDecideCallback) { }

	// RVA: 0xF055B0 Offset: 0xF055B0 VA: 0xF055B0
	private void CheckQuestStartDialog(MapControl.QuestInfo questInfo) { }

	// RVA: 0xF05AE8 Offset: 0xF05AE8 VA: 0xF05AE8
	private string GetQuestConfirmDialogString(MapControl.QuestInfo questInfo) { }

	// RVA: 0xF06054 Offset: 0xF06054 VA: 0xF06054
	private void EndRecoverUserGameRecover(RecoverDlgComponent.Result result, MapControl.QuestInfo questInfo) { }

	// RVA: 0xF06110 Offset: 0xF06110 VA: 0xF06110
	private void EndPurchaseSvtFrame(ServantFramePurchaseMenu.Result result) { }

	// RVA: 0xF06170 Offset: 0xF06170 VA: 0xF06170
	private void EndPurchaseSvtEquipFrame(ServantEquipFramePurchaseMenu.Result result) { }

	// RVA: 0xF061D0 Offset: 0xF061D0 VA: 0xF061D0
	public void cbfEvent_Map() { }

	// RVA: 0xF06470 Offset: 0xF06470 VA: 0xF06470
	public void cbfEvent_CaldeaGate() { }

	// RVA: 0xF061D4 Offset: 0xF061D4 VA: 0xF061D4
	public void SelectedQuest() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD3F20 Offset: 0xCD3F20 VA: 0xCD3F20
	// RVA: 0xF06474 Offset: 0xF06474 VA: 0xF06474
	private IEnumerator downloadMovieQuest(string folder, Action callback) { }

	// RVA: 0xF06520 Offset: 0xF06520 VA: 0xF06520
	public void StartQuest(int phaseCnt, QuestPhaseEntity questPhaseEntity) { }

	// RVA: 0xF07360 Offset: 0xF07360 VA: 0xF07360
	private void StartQuestBeforeAction(int questId, int phaseCnt, Action callback) { }

	// RVA: 0xEE6384 Offset: 0xEE6384 VA: 0xEE6384
	private void IsAllTouchEnable(bool isEnable) { }

	// RVA: 0xF07578 Offset: 0xF07578 VA: 0xF07578
	private void RequestBattleSecnario(int questId, int phaseCnt) { }

	// RVA: 0xF07648 Offset: 0xF07648 VA: 0xF07648
	private void EndRequestBattleScenario(string jsonstr) { }

	// RVA: 0xF079C4 Offset: 0xF079C4 VA: 0xF079C4
	public void ResumeQuestScriptWithMap(int phaseCnt, QuestPhaseEntity questPhaseEntity) { }

	// RVA: 0xF08054 Offset: 0xF08054 VA: 0xF08054
	public void StartWindowMessage(int questId, int questPhase, QuestMessageEntity.QuestMessageDisplayType displayType, Action endAction, bool isNoBattle = False) { }

	// RVA: 0xF083E8 Offset: 0xF083E8 VA: 0xF083E8
	private void StartWindowMessageScript(string questMessage, Action endAction) { }

	// RVA: 0xF06CD8 Offset: 0xF06CD8 VA: 0xF06CD8
	public void StartNotMeetsCondition(int warId, int questId, int phase) { }

	// RVA: 0xF0854C Offset: 0xF0854C VA: 0xF0854C
	public void StartNoneBattleQuest(int warId, int questId, int phase) { }

	// RVA: 0xF08710 Offset: 0xF08710 VA: 0xF08710
	public void StartQuestBeforeFollower() { }

	// RVA: 0xF00E50 Offset: 0xF00E50 VA: 0xF00E50
	public void StartNoneBattleQuestOnLogin(int warId, int questId, int phase) { }

	// RVA: 0xF06E8C Offset: 0xF06E8C VA: 0xF06E8C
	private void SetBattleSetupInfo(int warId, int questId, int phase, bool isScriptBeforePartySelect, bool isScriptBeforeWarBoard, int selectedBranch = 0) { }

	// RVA: 0xF07504 Offset: 0xF07504 VA: 0xF07504
	public void StartFollower() { }

	// RVA: 0xF07154 Offset: 0xF07154 VA: 0xF07154
	public void StartWarBoard(int warId, int questId, int phase) { }

	// RVA: 0xF08814 Offset: 0xF08814 VA: 0xF08814
	private void RequestWarBoardStart(int questId, int phaseCnt) { }

	// RVA: 0xF0890C Offset: 0xF0890C VA: 0xF0890C
	private void EndRequestWarBoardStart(string jsonstr) { }

	// RVA: 0xF08C0C Offset: 0xF08C0C VA: 0xF08C0C
	private void RequestCheckDateVersion() { }

	// RVA: 0xF08CC0 Offset: 0xF08CC0 VA: 0xF08CC0
	private void EndRequestCheckDateVersion(string jsonstr) { }

	// RVA: 0xF08DE4 Offset: 0xF08DE4 VA: 0xF08DE4
	public void ShowingInfoAllOff() { }

	// RVA: 0xF08E14 Offset: 0xF08E14 VA: 0xF08E14
	public void InfoSettedUp(QuestBoardListViewItem item) { }

	// RVA: 0xEDD8F4 Offset: 0xEDD8F4 VA: 0xEDD8F4
	public bool IsListSliding() { }

	// RVA: 0xF08F80 Offset: 0xF08F80 VA: 0xF08F80
	private void CheckFolderBGChangeEffect() { }

	// RVA: 0xF09088 Offset: 0xF09088 VA: 0xF09088
	public void ReleaseAsset() { }

	// RVA: 0xF090B8 Offset: 0xF090B8 VA: 0xF090B8
	public void SetTopLastIndexNextBoard() { }

	// RVA: 0xEFE5B8 Offset: 0xEFE5B8 VA: 0xEFE5B8
	private int GetTopLastIndexNextBoard() { }

	// RVA: 0xEFF29C Offset: 0xEFF29C VA: 0xEFF29C
	private int GetTopLastIndexForWarId(int warId) { }

	// RVA: 0xF091BC Offset: 0xF091BC VA: 0xF091BC
	public int GetPrioredParentId() { }

	// RVA: 0xF09204 Offset: 0xF09204 VA: 0xF09204
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F30 Offset: 0xCD3F30 VA: 0xCD3F30
	// RVA: 0xF09444 Offset: 0xF09444 VA: 0xF09444
	private static void <cbfTitleInfoBtnBack_Click>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F40 Offset: 0xCD3F40 VA: 0xCD3F40
	// RVA: 0xF09448 Offset: 0xF09448 VA: 0xF09448
	private static void <cbfTitleInfoBtnBack_Click>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F50 Offset: 0xCD3F50 VA: 0xCD3F50
	// RVA: 0xF0944C Offset: 0xF0944C VA: 0xF0944C
	private static void <cbfTitleInfoBtnBackStory_Click>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F60 Offset: 0xCD3F60 VA: 0xCD3F60
	// RVA: 0xF09450 Offset: 0xF09450 VA: 0xF09450
	private void <cbfInit_List>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F70 Offset: 0xCD3F70 VA: 0xCD3F70
	// RVA: 0xF094C4 Offset: 0xF094C4 VA: 0xF094C4
	private static bool <InitCaldeaFolderInfoList>m__4(ScrTerminalListTop.CaldeaFolderInfo x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F80 Offset: 0xCD3F80 VA: 0xCD3F80
	// RVA: 0xF094F0 Offset: 0xF094F0 VA: 0xF094F0
	private void <mcbfAreaInit>m__5() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3F90 Offset: 0xCD3F90 VA: 0xCD3F90
	// RVA: 0xF094F4 Offset: 0xF094F4 VA: 0xF094F4
	private void <mcbfAreaInit>m__6() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3FA0 Offset: 0xCD3FA0 VA: 0xCD3FA0
	// RVA: 0xF094F8 Offset: 0xF094F8 VA: 0xF094F8
	private void <DoOccurrenceChain>m__7() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3FB0 Offset: 0xCD3FB0 VA: 0xCD3FB0
	// RVA: 0xF09500 Offset: 0xF09500 VA: 0xF09500
	private static void <StartWarClearAction>m__8(Action action) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3FC0 Offset: 0xCD3FC0 VA: 0xCD3FC0
	// RVA: 0xF09600 Offset: 0xF09600 VA: 0xF09600
	private static void <StartWarClearAction>m__9(Action action) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3FD0 Offset: 0xCD3FD0 VA: 0xCD3FD0
	// RVA: 0xF09700 Offset: 0xF09700 VA: 0xF09700
	private static void <OpenigMovieAfter>m__A() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3FE0 Offset: 0xCD3FE0 VA: 0xCD3FE0
	// RVA: 0xF09828 Offset: 0xF09828 VA: 0xF09828
	private static void <StartQuestPhaseClearRewardAction>m__B() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD3FF0 Offset: 0xCD3FF0 VA: 0xCD3FF0
	// RVA: 0xF09890 Offset: 0xF09890 VA: 0xF09890
	private void <StartSceneFadeIn>m__C() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4000 Offset: 0xCD4000 VA: 0xCD4000
	// RVA: 0xF098B4 Offset: 0xF098B4 VA: 0xF098B4
	private void <mcbfAreaWait>m__D() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4010 Offset: 0xCD4010 VA: 0xCD4010
	// RVA: 0xF098B8 Offset: 0xF098B8 VA: 0xF098B8
	private static void <mcbfAreaWaitNext>m__E() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4020 Offset: 0xCD4020 VA: 0xCD4020
	// RVA: 0xF09920 Offset: 0xF09920 VA: 0xF09920
	private void <mcbfAreaWaitNext>m__F() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4030 Offset: 0xCD4030 VA: 0xCD4030
	// RVA: 0xF099B4 Offset: 0xF099B4 VA: 0xF099B4
	private void <StartFavoriteTutorial>m__10() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4040 Offset: 0xCD4040 VA: 0xCD4040
	// RVA: 0xF09A6C Offset: 0xF09A6C VA: 0xF09A6C
	private void <StartQuestBoardListIn_Area>m__11() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4050 Offset: 0xCD4050 VA: 0xCD4050
	// RVA: 0xF09AF4 Offset: 0xF09AF4 VA: 0xF09AF4
	private void <StartQuestBoardListIn_Area>m__12() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4060 Offset: 0xCD4060 VA: 0xCD4060
	// RVA: 0xF09BC4 Offset: 0xF09BC4 VA: 0xF09BC4
	private static void <StartTerminalTopEffectBlackMark>m__13() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4070 Offset: 0xCD4070 VA: 0xCD4070
	// RVA: 0xF09BD4 Offset: 0xF09BD4 VA: 0xF09BD4
	private void <StartTerminalTopEffectBlackMark>m__14() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4080 Offset: 0xCD4080 VA: 0xCD4080
	// RVA: 0xF09CDC Offset: 0xF09CDC VA: 0xF09CDC
	private void <StartTerminalTopEffectBlackMark>m__15() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4090 Offset: 0xCD4090 VA: 0xCD4090
	// RVA: 0xF09D74 Offset: 0xF09D74 VA: 0xF09D74
	private void <StartTerminalTopEffectBlackMark>m__16() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD40A0 Offset: 0xCD40A0 VA: 0xCD40A0
	// RVA: 0xF09E70 Offset: 0xF09E70 VA: 0xF09E70
	private static void <StartTerminalTopEffectDisappear>m__17() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD40B0 Offset: 0xCD40B0 VA: 0xCD40B0
	// RVA: 0xF09E80 Offset: 0xF09E80 VA: 0xF09E80
	private void <mcbfCaldeaGateInit>m__18(bool isPlay) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD40C0 Offset: 0xCD40C0 VA: 0xCD40C0
	// RVA: 0xF09ED8 Offset: 0xF09ED8 VA: 0xF09ED8
	private void <mcbfCaldeaGateWait>m__19() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD40D0 Offset: 0xCD40D0 VA: 0xCD40D0
	// RVA: 0xF09FD8 Offset: 0xF09FD8 VA: 0xF09FD8
	private void <mcbfCapterInit>m__1A() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD40E0 Offset: 0xCD40E0 VA: 0xCD40E0
	// RVA: 0xF0A028 Offset: 0xF0A028 VA: 0xF0A028
	private static void <Click_Area>m__1B(bool isDecide) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD40F0 Offset: 0xCD40F0 VA: 0xCD40F0
	// RVA: 0xF0A0A0 Offset: 0xF0A0A0 VA: 0xF0A0A0
	private static void <Click_Area>m__1C() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4100 Offset: 0xCD4100 VA: 0xCD4100
	// RVA: 0xF0A0A4 Offset: 0xF0A0A4 VA: 0xF0A0A4
	private static void <Click_Area>m__1D() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4110 Offset: 0xCD4110 VA: 0xCD4110
	// RVA: 0xF0A0A8 Offset: 0xF0A0A8 VA: 0xF0A0A8
	private static void <Click_Area>m__1E() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4120 Offset: 0xCD4120 VA: 0xCD4120
	// RVA: 0xF0A0AC Offset: 0xF0A0AC VA: 0xF0A0AC
	private static void <Click_Area>m__1F() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4130 Offset: 0xCD4130 VA: 0xCD4130
	// RVA: 0xF0A0B0 Offset: 0xF0A0B0 VA: 0xF0A0B0
	private static void <IsPlayEventWar>m__20() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4140 Offset: 0xCD4140 VA: 0xCD4140
	// RVA: 0xF0A0B4 Offset: 0xF0A0B4 VA: 0xF0A0B4
	private static void <IsPlayEventWar>m__21() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4150 Offset: 0xCD4150 VA: 0xCD4150
	// RVA: 0xF0A0B8 Offset: 0xF0A0B8 VA: 0xF0A0B8
	private static void <CheckQuestPlayable>m__22() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4160 Offset: 0xCD4160 VA: 0xCD4160
	// RVA: 0xF0A0BC Offset: 0xF0A0BC VA: 0xF0A0BC
	private static void <CheckQuestPlayable>m__23() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4170 Offset: 0xCD4170 VA: 0xCD4170
	// RVA: 0xF0A0C0 Offset: 0xF0A0C0 VA: 0xF0A0C0
	private static void <CheckQuestPlayable>m__24() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4180 Offset: 0xCD4180 VA: 0xCD4180
	// RVA: 0xF0A0C4 Offset: 0xF0A0C4 VA: 0xF0A0C4
	private static int <CheckQuestPlayable>m__25(QuestMessageEntity msg) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD4190 Offset: 0xCD4190 VA: 0xCD4190
	// RVA: 0xF0A0EC Offset: 0xF0A0EC VA: 0xF0A0EC
	private void <cbfInit_List>m__26() { }

	[CompilerGeneratedAttribute] // RVA: 0xCD41A0 Offset: 0xCD41A0 VA: 0xCD41A0
	// RVA: 0xF0A13C Offset: 0xF0A13C VA: 0xF0A13C
	private void <StartFavoriteTutorial>m__27(string result) { }

	[CompilerGeneratedAttribute] // RVA: 0xCD41B0 Offset: 0xCD41B0 VA: 0xCD41B0
	// RVA: 0xF0A140 Offset: 0xF0A140 VA: 0xF0A140
	private void <StartQuestBoardListIn_Area>m__28() { }
}

// Namespace: 
public enum ScrTerminalListTop.enPrevList // TypeDefIndex: 11268
{
	// Fields
	public int value__; // 0x0
	public const ScrTerminalListTop.enPrevList TOPMENU = 0;
	public const ScrTerminalListTop.enPrevList HEROBALLAD = 1;
	public const ScrTerminalListTop.enPrevList STORY = 2;
}

// Namespace: 
private class ScrTerminalListTop.CaldeaFolderInfo // TypeDefIndex: 11269
{
	// Fields
	public int warId; // 0x10
	public int mapId; // 0x14
	public int parentId; // 0x18
	public int badgeCount; // 0x1C
	public bool isNew; // 0x20
	public List<MapControl.QuestInfo> questInfoList; // 0x28

	// Methods

	// RVA: 0xFF2A3C Offset: 0xFF2A3C VA: 0xFF2A3C
	public void .ctor(int warId, int mapId, int parentId) { }

	// RVA: 0xFF2AD4 Offset: 0xFF2AD4 VA: 0xFF2AD4
	public void AddQuestInfo(MapControl.QuestInfo questInfo) { }
}

// Namespace: 
private class ScrTerminalListTop.AdditionalDlgMessage // TypeDefIndex: 11270
{
	// Fields
	private static readonly float[] STORY_OPEN_DIALOG_MSG_LABEL_OFFSET; // 0x0
	private static readonly int STORY_OPEN_DIALOG_MSG_LABEL_SCROLL_OFFSET_NUM; // 0x8
	private static readonly int DIALOG_DEPTH; // 0xC
	public int MessageType; // 0x10
	public int TargetId; // 0x14
	public string Message; // 0x18
	public int MessageCnt; // 0x20
	public int[] shopId; // 0x28
	public string detail; // 0x30
	private CostumeOpenConfirmDialog costumeOpenConfirmDialog; // 0x38
	private ScrollConfirmDialog questOpenConfirmDialog; // 0x40

	// Methods

	// RVA: 0xFF12E4 Offset: 0xFF12E4 VA: 0xFF12E4
	public void .ctor() { }

	// RVA: 0xFEF6B4 Offset: 0xFEF6B4 VA: 0xFEF6B4
	public void .ctor(ScrTerminalListTop.AdditionalDlgMessage.TYPE type, int target, string msg) { }

	// RVA: 0xFF130C Offset: 0xFF130C VA: 0xFF130C
	public void .ctor(ScrTerminalListTop.AdditionalDlgMessage.TYPE type, int target, string msg, int msgCnt) { }

	// RVA: 0xFF135C Offset: 0xFF135C VA: 0xFF135C
	public void .ctor(CostumeOpenConfirmDialog dialogInst) { }

	// RVA: 0xFF1390 Offset: 0xFF1390 VA: 0xFF1390
	public void .ctor(ScrollConfirmDialog dialogInst, int target, string msg, int msgCnt) { }

	// RVA: 0xFF13E8 Offset: 0xFF13E8 VA: 0xFF13E8
	public void Open(Action closeCallback) { }

	// RVA: 0xFF1CCC Offset: 0xFF1CCC VA: 0xFF1CCC
	private static void .cctor() { }
}

// Namespace: 
public enum ScrTerminalListTop.AdditionalDlgMessage.TYPE // TypeDefIndex: 11271
{
	// Fields
	public int value__; // 0x0
	public const ScrTerminalListTop.AdditionalDlgMessage.TYPE NONE = 0;
	public const ScrTerminalListTop.AdditionalDlgMessage.TYPE QUEST = 1;
	public const ScrTerminalListTop.AdditionalDlgMessage.TYPE SERVANT_MATERIAL = 2;
	public const ScrTerminalListTop.AdditionalDlgMessage.TYPE SERVANT_COSTUME = 3;
	public const ScrTerminalListTop.AdditionalDlgMessage.TYPE QUEST_STORY = 4;
	public const ScrTerminalListTop.AdditionalDlgMessage.TYPE SERVANT_MATERIAL_SG = 5;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45DE4 Offset: 0xC45DE4 VA: 0xC45DE4
private sealed class ScrTerminalListTop.AdditionalDlgMessage.<Open>c__AnonStorey0 // TypeDefIndex: 11272
{
	// Fields
	internal Action closeCallback; // 0x10
	internal ScrTerminalListTop.AdditionalDlgMessage $this; // 0x18

	// Methods

	// RVA: 0xFF1CC4 Offset: 0xFF1CC4 VA: 0xFF1CC4
	public void .ctor() { }

	// RVA: 0xFF1D64 Offset: 0xFF1D64 VA: 0xFF1D64
	internal void <>m__0(bool isDecide) { }

	// RVA: 0xFF1E04 Offset: 0xFF1E04 VA: 0xFF1E04
	internal void <>m__1(bool isDecide) { }

	// RVA: 0xFF1EF8 Offset: 0xFF1EF8 VA: 0xFF1EF8
	internal void <>m__2(bool isDecide) { }

	// RVA: 0xFF217C Offset: 0xFF217C VA: 0xFF217C
	internal void <>m__3(bool isDecide) { }

	// RVA: 0xFF2420 Offset: 0xFF2420 VA: 0xFF2420
	internal void <>m__4() { }

	// RVA: 0xFF24D8 Offset: 0xFF24D8 VA: 0xFF24D8
	internal void <>m__5() { }

	// RVA: 0xFF25B8 Offset: 0xFF25B8 VA: 0xFF25B8
	internal void <>m__6(bool isDcd) { }

	// RVA: 0xFF2698 Offset: 0xFF2698 VA: 0xFF2698
	internal void <>m__7(bool isDcd) { }

	// RVA: 0xFF2778 Offset: 0xFF2778 VA: 0xFF2778
	internal void <>m__8() { }

	// RVA: 0xFF2800 Offset: 0xFF2800 VA: 0xFF2800
	internal void <>m__9() { }
}

// Namespace: 
private sealed class ScrTerminalListTop.AdditionalDlgMessage.<Open>c__AnonStorey0.<Open>c__AnonStorey1 // TypeDefIndex: 11273
{
	// Fields
	internal bool isDecide; // 0x10
	internal ScrTerminalListTop.AdditionalDlgMessage.<Open>c__AnonStorey0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0xFF1EF0 Offset: 0xFF1EF0 VA: 0xFF1EF0
	public void .ctor() { }

	// RVA: 0xFF2888 Offset: 0xFF2888 VA: 0xFF2888
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45DF4 Offset: 0xC45DF4 VA: 0xC45DF4
private sealed class ScrTerminalListTop.<cbfTitleInfoBtnBack_Click>c__AnonStorey7 // TypeDefIndex: 11274
{
	// Fields
	internal Action changeActionToAreaWait; // 0x10
	internal ScrTerminalListTop $this; // 0x18

	// Methods

	// RVA: 0xFF0990 Offset: 0xFF0990 VA: 0xFF0990
	public void .ctor() { }

	// RVA: 0xFF0998 Offset: 0xFF0998 VA: 0xFF0998
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45E04 Offset: 0xC45E04 VA: 0xC45E04
private sealed class ScrTerminalListTop.<cbfTitleInfoBtnBack_Click>c__AnonStorey6 // TypeDefIndex: 11275
{
	// Fields
	internal QuestBoardListViewManager.InitMode mode; // 0x10
	internal ScrTerminalListTop.<cbfTitleInfoBtnBack_Click>c__AnonStorey7 <>f__ref$7; // 0x18

	// Methods

	// RVA: 0xFF064C Offset: 0xFF064C VA: 0xFF064C
	public void .ctor() { }

	// RVA: 0xFF0654 Offset: 0xFF0654 VA: 0xFF0654
	internal void <>m__0() { }

	// RVA: 0xFF093C Offset: 0xFF093C VA: 0xFF093C
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45E14 Offset: 0xC45E14 VA: 0xC45E14
private sealed class ScrTerminalListTop.<cbfTitleInfoBtnBack_Click>c__AnonStorey8 // TypeDefIndex: 11276
{
	// Fields
	internal MapEntity mapEnt; // 0x10
	internal ScrTerminalListTop.<cbfTitleInfoBtnBack_Click>c__AnonStorey7 <>f__ref$7; // 0x18

	// Methods

	// RVA: 0xFF09FC Offset: 0xFF09FC VA: 0xFF09FC
	public void .ctor() { }

	// RVA: 0xFF0A04 Offset: 0xFF0A04 VA: 0xFF0A04
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45E24 Offset: 0xC45E24 VA: 0xC45E24
private sealed class ScrTerminalListTop.<WaitMapStateForBackStory>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11277
{
	// Fields
	internal ScrTerminalListTop $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDCF80 Offset: 0xCDCF80 VA: 0xCDCF80
	// RVA: 0xFF02BC Offset: 0xFF02BC VA: 0xFF02BC
	public void .ctor() { }

	// RVA: 0xFF02C4 Offset: 0xFF02C4 VA: 0xFF02C4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCF90 Offset: 0xCDCF90 VA: 0xCDCF90
	// RVA: 0xFF0548 Offset: 0xFF0548 VA: 0xFF0548 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCFA0 Offset: 0xCDCFA0 VA: 0xCDCFA0
	// RVA: 0xFF0550 Offset: 0xFF0550 VA: 0xFF0550 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCFB0 Offset: 0xCDCFB0 VA: 0xCDCFB0
	// RVA: 0xFF0558 Offset: 0xFF0558 VA: 0xFF0558 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDCFC0 Offset: 0xCDCFC0 VA: 0xCDCFC0
	// RVA: 0xFF056C Offset: 0xFF056C VA: 0xFF056C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC45E34 Offset: 0xC45E34 VA: 0xC45E34
