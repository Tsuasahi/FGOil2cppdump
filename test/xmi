	protected ServantCommentEntity[] svtCommentEntityList; // 0x98
	protected long favoriteUserSvtId; // 0xA0
	protected long pushUserSvtId; // 0xA8
	protected CommandCodeEntity commandCodeEntity; // 0xB0
	protected CommandCodeCommentEntity commandCodeCommentEntity; // 0xB8
	protected bool isConvertOverwriteImage; // 0xC0
	protected int[] commandCodeIdList; // 0xC8
	protected int[] costumeIds; // 0xD0
	protected int cardLimitCount; // 0xD8
	protected int maxCardLimitCount; // 0xDC
	protected int[] cardSelectList; // 0xE0
	protected int dispLimitCount; // 0xE8
	protected int maxDispLimitCount; // 0xEC
	protected int[] dispSelectList; // 0xF0
	protected int commandCardLimitCount; // 0xF8
	protected int maxCommandCardLimitCount; // 0xFC
	protected int[] commandCardSelectList; // 0x100
	protected int[] commandCardParam; // 0x108
	protected int iconLimitCount; // 0x110
	protected int maxIconLimitCount; // 0x114
	protected int[] iconSelectList; // 0x118
	protected int portraitLimitCount; // 0x120
	protected int maxPortraitLimitCount; // 0x124
	protected int[] portraitSelectList; // 0x128
	protected int svtCommonFlag; // 0x130
	protected bool enableTdSpeed; // 0x134
	protected int changeVoiceFlag; // 0x138
	protected bool enableChangeVoice; // 0x13C
	protected bool isLock; // 0x13D
	protected bool isChoice; // 0x13E
	protected bool isUse; // 0x13F
	protected bool isDisplayRandomLimitCount; // 0x140
	protected bool isEnableOwnRandomSetting; // 0x141
	protected bool isEnableSupportRandomSetting; // 0x142
	protected int supportRandomLimitCount; // 0x144
	protected int[] supportRandomLimitCountList; // 0x148
	protected long oldEquipTargetId1; // 0x150
	protected long equipTargetId1; // 0x158
	protected UserServantEntity equipUserSvtEntity; // 0x160
	protected ServantEntity equipServantEntity; // 0x168
	protected ServantLimitEntity equipSvtLimitEntity; // 0x170
	protected bool isCollection; // 0x178
	protected int collectionLv; // 0x17C
	protected int collectionHp; // 0x180
	protected int collectionAtk; // 0x184
	protected bool isTdResult; // 0x188
	protected TreasureDvcInfo tdInfo; // 0x190
	protected SkillInfo[] skillInfoList; // 0x198
	protected int[] passiveSkillIdList; // 0x1A0
	protected string[] passiveSkillTitleMessageList; // 0x1A8
	protected string[] passiveSkillExplanationMessageList; // 0x1B0
	protected int[] appendPassiveSkillIdList; // 0x1B8
	protected int[] appendPassiveSkillLvList; // 0x1C0
	protected string[] appendPassiveSkillTitleMessageList; // 0x1C8
	protected string[] appendPassiveSkillExplanationMessageList; // 0x1D0
	protected bool[] appendPassiveSkillReleaseStateList; // 0x1D8
	protected SkillInfo[] equipSkillInfoList; // 0x1E0
	private ServantStatusListViewItem.LimitCountCache currentLimitCountCache; // 0x1E8

	// Properties
	public bool IsEnableServantQuest { get; }
	public PartyListViewItem PartyItem { get; }
	public int Member { get; }
	public UserGameEntity UserGame { get; }
	public UserServantEntity UserServant { get; }
	public UserServantCollectionEntity UserServantCollection { get; }
	public ServantLeaderInfo ServantLeaderData { get; }
	public EquipTargetInfo EquipTargetData { get; }
	public UserCommandCodeEntity UserCommandCode { get; }
	public UserCommandCodeCollectionEntity UserCommandCodeCollection { get; }
	public bool IsEquipShowMode { get; }
	public bool IsEquipChangeMode { get; }
	public bool IsNpcFollowerServantEquip { get; }
	public ServantEntity Servant { get; }
	public CommandCodeEntity CommandCode { get; }
	public CommandCodeCommentEntity CommandCodeCommentData { get; }
	public ServantCommentEntity[] ServantCommentDataList { get; }
	public long FavoriteUserSvtId { get; set; }
	public long PushUserSvtId { get; set; }
	public bool IsCollection { get; }
	public bool IsEventJoin { get; }
	public bool IsNoPeriod { get; }
	public int SvtId { get; }
	public int CommandCodeId { get; }
	public int LimitCount { get; }
	public bool IsConvertOverwriteImage { get; }
	public int ConvertOverwriteCardImageLimitCount { get; }
	public int CardLimitCount { get; }
	public int ManualSetCardLimitCount { get; }
	public int MaxCardLimitCount { get; }
	public int[] CardSelectList { get; }
	public bool IsChangeImageLimitCount { get; }
	public bool IsModifyDispLimitCount { get; }
	public int ConvertOverwriteDispImageLimitCount { get; }
	public int DispLimitCount { get; set; }
	public int ManualSetDispLimitCount { get; }
	public int MaxDispLimitCount { get; }
	public int[] DispSelectList { get; }
	public bool IsModifyCommandCardLimitCount { get; }
	public int ConvertOverwriteCommandCardLimitCount { get; }
	public int CommandCardLimitCount { get; set; }
	public int ManualSetCommandCardLimit { get; }
	public int MaxCommandCardLimitCount { get; }
	public int[] CommandCardSelectList { get; }
	public int[] CommandCardParam { get; }
	public bool IsModifyIconLimitCount { get; }
	public int ConvertOverwriteIconLimitCount { get; }
	public int IconLimitCount { get; set; }
	public int ManualSetIconLimitCount { get; }
	public int MaxIconLimitCount { get; }
	public int[] IconSelectList { get; }
	public bool IsModifyPortraitLimitCount { get; }
	public int ConvertOverwritePortraitLimitCount { get; }
	public int PortraitLimitCount { get; set; }
	public int ManualSetPortraitLimitCount { get; }
	public int MaxPortraitLimitCount { get; }
	public int[] PortraitSelectList { get; }
	public int[] CommandCodeIdList { get; }
	public int[] CostumeIds { get; }
	public int TreasureDeviceSpeedSelect { get; set; }
	public int SvtCommonFlag { get; }
	public int ChangeBattleVoiceSelect { get; set; }
	public int ChangeVoiceFlag { get; }
	public bool IsModifySvtCommonFlag { get; }
	public bool IsModifyBattleVoice { get; }
	public bool IsModifyRandomLimitCountSetting { get; }
	public bool IsModifySupportRandomLimitCount { get; }
	public bool EnableTdSpeed { get; }
	public bool EnableChangeVoice { get; }
	public bool IsDisplayRandomLimitCount { get; }
	public int Level { get; }
	public int MaxLevel { get; }
	public int Cost { get; }
	public int Hp { get; }
	public int Atk { get; }
	public int AdjustHp { get; }
	public int AdjustAtk { get; }
	public int Exp { get; }
	public StatusRank.Kind Power { get; }
	public StatusRank.Kind Defense { get; }
	public StatusRank.Kind Agility { get; }
	public StatusRank.Kind Magic { get; }
	public StatusRank.Kind Luck { get; }
	public StatusRank.Kind Np { get; }
	public bool IsEquip { get; }
	public long EquipTargetId1 { get; }
	public UserServantEntity EquipUserServant { get; }
	public ServantEntity EquipServant { get; }
	public int EquipLevel { get; }
	public int EquipMaxLevel { get; }
	public int EquipLimitCount { get; }
	public int EquipAtk { get; }
	public int EquipHp { get; }
	public int EquipCost { get; }
	public bool IsLock { get; }
	public bool IsModifyLock { get; }
	public bool IsChoice { get; }
	public bool IsModifyChoice { get; }
	public bool IsUse { get; }
	public bool IsEnableOwnRandomSetting { get; set; }
	public bool IsEnableSupportRandomSetting { get; set; }
	public int SupportRandomLimitCount { get; }
	public int[] SupportRandomLimitCountList { get; }
	public int EquipExp { get; }
	public long UserId { get; }
	public bool IsMine { get; }

	// Methods

	// RVA: 0x20BA64C Offset: 0x20BA64C VA: 0x20BA64C
	public void .ctor(PartyListViewItem partyItem, int member, bool isEnableServantQuest) { }

	// RVA: 0x20BB7D4 Offset: 0x20BB7D4 VA: 0x20BB7D4
	public void .ctor(WarBoardPartyListViewItem partyItem, int member, bool isEnableServantQuest) { }

	// RVA: 0x20BBE34 Offset: 0x20BBE34 VA: 0x20BBE34
	public void .ctor(UserServantEntity userServant, long[] equipIdList, QuestRestrictionInfo questRestrictionInfo, bool isEnableServantQuest, bool enableTdSpeed, bool enableBattleVoice) { }

	// RVA: 0x20BC6DC Offset: 0x20BC6DC VA: 0x20BC6DC
	public void .ctor(UserServantEntity userServant, bool isUse) { }

	// RVA: 0x20BCD9C Offset: 0x20BCD9C VA: 0x20BCD9C
	public void .ctor(UserServantCollectionEntity userSvtCollectionEntity, bool isEnableServantQuest, bool enableTdSpeed) { }

	// RVA: 0x20BD3AC Offset: 0x20BD3AC VA: 0x20BD3AC
	public void .ctor(UserServantCollectionEntity userSvtCollectionEntity, int limitCount, bool isEnableServantQuest, bool enableTdSpeed) { }

	// RVA: 0x20BD8F4 Offset: 0x20BD8F4 VA: 0x20BD8F4
	public void .ctor(ServantLeaderInfo servantLeaderInfo, bool isEquipShowMode = True) { }

	// RVA: 0x20BE048 Offset: 0x20BE048 VA: 0x20BE048
	public void .ctor(EquipTargetInfo equipTargetInfo, bool isNpcFollowerServantEquip) { }

	// RVA: 0x20BE2AC Offset: 0x20BE2AC VA: 0x20BE2AC
	public void .ctor(CommandCodeEntity commandCode, bool isUse = False) { }

	// RVA: 0x20BE460 Offset: 0x20BE460 VA: 0x20BE460
	public void .ctor(UserCommandCodeEntity userCommandCode) { }

	// RVA: 0x20BE954 Offset: 0x20BE954 VA: 0x20BE954
	public void .ctor(UserCommandCodeCollectionEntity userCommandCodeCollection) { }

	// RVA: 0x20BEB98 Offset: 0x20BEB98 VA: 0x20BEB98 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x20BEBA0 Offset: 0x20BEBA0 VA: 0x20BEBA0
	private void RefreshLimitCountWithRandom() { }

	// RVA: 0x20BAFD8 Offset: 0x20BAFD8 VA: 0x20BAFD8
	private void SetLimitCountInfo(UserServantEntity entity) { }

	// RVA: 0x20BB260 Offset: 0x20BB260 VA: 0x20BB260
	private void CreateCurrentLimitCountCache(bool ignoreRandomSettings = False) { }

	// RVA: 0x20BB430 Offset: 0x20BB430 VA: 0x20BB430
	public void ModifyInfo() { }

	// RVA: 0x20BEE00 Offset: 0x20BEE00 VA: 0x20BEE00
	public bool get_IsEnableServantQuest() { }

	// RVA: 0x20BEE08 Offset: 0x20BEE08 VA: 0x20BEE08
	public PartyListViewItem get_PartyItem() { }

	// RVA: 0x20BEE10 Offset: 0x20BEE10 VA: 0x20BEE10
	public int get_Member() { }

	// RVA: 0x20BEE18 Offset: 0x20BEE18 VA: 0x20BEE18
	public UserGameEntity get_UserGame() { }

	// RVA: 0x20BED9C Offset: 0x20BED9C VA: 0x20BED9C
	public UserServantEntity get_UserServant() { }

	// RVA: 0x20BAFD0 Offset: 0x20BAFD0 VA: 0x20BAFD0
	public UserServantCollectionEntity get_UserServantCollection() { }

	// RVA: 0x20BEE20 Offset: 0x20BEE20 VA: 0x20BEE20
	public ServantLeaderInfo get_ServantLeaderData() { }

	// RVA: 0x20BEE28 Offset: 0x20BEE28 VA: 0x20BEE28
	public EquipTargetInfo get_EquipTargetData() { }

	// RVA: 0x20BEE30 Offset: 0x20BEE30 VA: 0x20BEE30
	public UserCommandCodeEntity get_UserCommandCode() { }

	// RVA: 0x20BEE38 Offset: 0x20BEE38 VA: 0x20BEE38
	public UserCommandCodeCollectionEntity get_UserCommandCodeCollection() { }

	// RVA: 0x20BEE40 Offset: 0x20BEE40 VA: 0x20BEE40
	public bool get_IsEquipShowMode() { }

	// RVA: 0x20BEE48 Offset: 0x20BEE48 VA: 0x20BEE48
	public bool get_IsEquipChangeMode() { }

	// RVA: 0x20BEE50 Offset: 0x20BEE50 VA: 0x20BEE50
	public bool get_IsNpcFollowerServantEquip() { }

	// RVA: 0x20B4444 Offset: 0x20B4444 VA: 0x20B4444
	public ServantEntity get_Servant() { }

	// RVA: 0x20B443C Offset: 0x20B443C VA: 0x20B443C
	public CommandCodeEntity get_CommandCode() { }

	// RVA: 0x20B7770 Offset: 0x20B7770 VA: 0x20B7770
	public CommandCodeCommentEntity get_CommandCodeCommentData() { }

	// RVA: 0x20B7778 Offset: 0x20B7778 VA: 0x20B7778
	public ServantCommentEntity[] get_ServantCommentDataList() { }

	// RVA: 0x20BEE58 Offset: 0x20BEE58 VA: 0x20BEE58
	public long get_FavoriteUserSvtId() { }

	// RVA: 0x20BEE60 Offset: 0x20BEE60 VA: 0x20BEE60
	public void set_FavoriteUserSvtId(long value) { }

	// RVA: 0x20BEE68 Offset: 0x20BEE68 VA: 0x20BEE68
	public bool IsModifyFavoriteUserSvtId() { }

	// RVA: 0x20BEE94 Offset: 0x20BEE94 VA: 0x20BEE94
	public long get_PushUserSvtId() { }

	// RVA: 0x20BEE9C Offset: 0x20BEE9C VA: 0x20BEE9C
	public void set_PushUserSvtId(long value) { }

	// RVA: 0x20BEEA4 Offset: 0x20BEEA4 VA: 0x20BEEA4
	public bool IsModifyPushUserSvtId() { }

	// RVA: 0x20BEEC8 Offset: 0x20BEEC8 VA: 0x20BEEC8
	public bool IsModifyEquipId() { }

	// RVA: 0x20BACAC Offset: 0x20BACAC VA: 0x20BACAC
	public void SetEquipTargetId1(long equipUserSvtId) { }

	// RVA: 0x20BEED8 Offset: 0x20BEED8 VA: 0x20BEED8
	public bool get_IsCollection() { }

	// RVA: 0x20BEEE0 Offset: 0x20BEEE0 VA: 0x20BEEE0
	public bool get_IsEventJoin() { }

	// RVA: 0x20BEEF4 Offset: 0x20BEEF4 VA: 0x20BEEF4
	public bool get_IsNoPeriod() { }

	// RVA: 0x20BEF08 Offset: 0x20BEF08 VA: 0x20BEF08
	public int get_SvtId() { }

	// RVA: 0x20BEF90 Offset: 0x20BEF90 VA: 0x20BEF90
	public int get_CommandCodeId() { }

	// RVA: 0x20BF018 Offset: 0x20BF018 VA: 0x20BF018
	public int get_LimitCount() { }

	// RVA: 0x20BF0D0 Offset: 0x20BF0D0 VA: 0x20BF0D0
	public bool get_IsConvertOverwriteImage() { }

	// RVA: 0x20BF0D8 Offset: 0x20BF0D8 VA: 0x20BF0D8
	public int get_ConvertOverwriteCardImageLimitCount() { }

	// RVA: 0x20BF134 Offset: 0x20BF134 VA: 0x20BF134
	public int get_CardLimitCount() { }

	// RVA: 0x20BF13C Offset: 0x20BF13C VA: 0x20BF13C
	public int get_ManualSetCardLimitCount() { }

	// RVA: 0x20BF1FC Offset: 0x20BF1FC VA: 0x20BF1FC
	public int get_MaxCardLimitCount() { }

	// RVA: 0x20BF204 Offset: 0x20BF204 VA: 0x20BF204
	public int[] get_CardSelectList() { }

	// RVA: 0x20BF20C Offset: 0x20BF20C VA: 0x20BF20C
	public bool get_IsChangeImageLimitCount() { }

	// RVA: 0x20BF24C Offset: 0x20BF24C VA: 0x20BF24C
	public bool get_IsModifyDispLimitCount() { }

	// RVA: 0x20BEDA4 Offset: 0x20BEDA4 VA: 0x20BEDA4
	public int get_ConvertOverwriteDispImageLimitCount() { }

	// RVA: 0x20BF3DC Offset: 0x20BF3DC VA: 0x20BF3DC
	public int get_DispLimitCount() { }

	// RVA: 0x20BF3E4 Offset: 0x20BF3E4 VA: 0x20BF3E4
	public void set_DispLimitCount(int value) { }

	// RVA: 0x20BF31C Offset: 0x20BF31C VA: 0x20BF31C
	public int get_ManualSetDispLimitCount() { }

	// RVA: 0x20BF3EC Offset: 0x20BF3EC VA: 0x20BF3EC
	public int get_MaxDispLimitCount() { }

	// RVA: 0x20BF3F4 Offset: 0x20BF3F4 VA: 0x20BF3F4
	public int[] get_DispSelectList() { }

	// RVA: 0x20BF3FC Offset: 0x20BF3FC VA: 0x20BF3FC
	public bool get_IsModifyCommandCardLimitCount() { }

	// RVA: 0x20BF58C Offset: 0x20BF58C VA: 0x20BF58C
	public int get_ConvertOverwriteCommandCardLimitCount() { }

	// RVA: 0x20BF5E8 Offset: 0x20BF5E8 VA: 0x20BF5E8
	public int get_CommandCardLimitCount() { }

	// RVA: 0x20BF5F0 Offset: 0x20BF5F0 VA: 0x20BF5F0
	public void set_CommandCardLimitCount(int value) { }

	// RVA: 0x20BF4CC Offset: 0x20BF4CC VA: 0x20BF4CC
	public int get_ManualSetCommandCardLimit() { }

	// RVA: 0x20BF5F8 Offset: 0x20BF5F8 VA: 0x20BF5F8
	public int get_MaxCommandCardLimitCount() { }

	// RVA: 0x20BF600 Offset: 0x20BF600 VA: 0x20BF600
	public int[] get_CommandCardSelectList() { }

	// RVA: 0x20BF608 Offset: 0x20BF608 VA: 0x20BF608
	public int[] get_CommandCardParam() { }

	// RVA: 0x20BF610 Offset: 0x20BF610 VA: 0x20BF610
	public bool get_IsModifyIconLimitCount() { }

	// RVA: 0x20BF7A0 Offset: 0x20BF7A0 VA: 0x20BF7A0
	public int get_ConvertOverwriteIconLimitCount() { }

	// RVA: 0x20BF7C4 Offset: 0x20BF7C4 VA: 0x20BF7C4
	public int get_IconLimitCount() { }

	// RVA: 0x20BF7CC Offset: 0x20BF7CC VA: 0x20BF7CC
	public void set_IconLimitCount(int value) { }

	// RVA: 0x20BF6E0 Offset: 0x20BF6E0 VA: 0x20BF6E0
	public int get_ManualSetIconLimitCount() { }

	// RVA: 0x20BF7D4 Offset: 0x20BF7D4 VA: 0x20BF7D4
	public int get_MaxIconLimitCount() { }

	// RVA: 0x20BF7DC Offset: 0x20BF7DC VA: 0x20BF7DC
	public int[] get_IconSelectList() { }

	// RVA: 0x20BF7E4 Offset: 0x20BF7E4 VA: 0x20BF7E4
	public bool get_IsModifyPortraitLimitCount() { }

	// RVA: 0x20BF974 Offset: 0x20BF974 VA: 0x20BF974
	public int get_ConvertOverwritePortraitLimitCount() { }

	// RVA: 0x20BF9D0 Offset: 0x20BF9D0 VA: 0x20BF9D0
	public int get_PortraitLimitCount() { }

	// RVA: 0x20BF9D8 Offset: 0x20BF9D8 VA: 0x20BF9D8
	public void set_PortraitLimitCount(int value) { }

	// RVA: 0x20BF8B4 Offset: 0x20BF8B4 VA: 0x20BF8B4
	public int get_ManualSetPortraitLimitCount() { }

	// RVA: 0x20BF9E0 Offset: 0x20BF9E0 VA: 0x20BF9E0
	public int get_MaxPortraitLimitCount() { }

	// RVA: 0x20BF9E8 Offset: 0x20BF9E8 VA: 0x20BF9E8
	public int[] get_PortraitSelectList() { }

	// RVA: 0x20BF9F0 Offset: 0x20BF9F0 VA: 0x20BF9F0
	public int[] get_CommandCodeIdList() { }

	// RVA: 0x20BF9F8 Offset: 0x20BF9F8 VA: 0x20BF9F8
	public int[] get_CostumeIds() { }

	// RVA: 0x20BFA00 Offset: 0x20BFA00 VA: 0x20BFA00
	public int get_TreasureDeviceSpeedSelect() { }

	// RVA: 0x20BFA1C Offset: 0x20BFA1C VA: 0x20BFA1C
	public void set_TreasureDeviceSpeedSelect(int value) { }

	// RVA: 0x20BFA58 Offset: 0x20BFA58 VA: 0x20BFA58
	public int get_SvtCommonFlag() { }

	// RVA: 0x20BFA60 Offset: 0x20BFA60 VA: 0x20BFA60
	public int get_ChangeBattleVoiceSelect() { }

	// RVA: 0x20BFA68 Offset: 0x20BFA68 VA: 0x20BFA68
	public void set_ChangeBattleVoiceSelect(int value) { }

	// RVA: 0x20BFA70 Offset: 0x20BFA70 VA: 0x20BFA70
	public int get_ChangeVoiceFlag() { }

	// RVA: 0x20BFA78 Offset: 0x20BFA78 VA: 0x20BFA78
	public bool get_IsModifySvtCommonFlag() { }

	// RVA: 0x20BFA94 Offset: 0x20BFA94 VA: 0x20BFA94
	public bool get_IsModifyBattleVoice() { }

	// RVA: 0x20BFAB0 Offset: 0x20BFAB0 VA: 0x20BFAB0
	public bool get_IsModifyRandomLimitCountSetting() { }

	// RVA: 0x20BFAD0 Offset: 0x20BFAD0 VA: 0x20BFAD0
	public bool get_IsModifySupportRandomLimitCount() { }

	// RVA: 0x20BFB70 Offset: 0x20BFB70 VA: 0x20BFB70
	public bool get_EnableTdSpeed() { }

	// RVA: 0x20BFB78 Offset: 0x20BFB78 VA: 0x20BFB78
	public bool get_EnableChangeVoice() { }

	// RVA: 0x20BFB80 Offset: 0x20BFB80 VA: 0x20BFB80
	public bool get_IsDisplayRandomLimitCount() { }

	// RVA: 0x20BFB88 Offset: 0x20BFB88 VA: 0x20BFB88
	public int get_Level() { }

	// RVA: 0x20BFBD0 Offset: 0x20BFBD0 VA: 0x20BFBD0
	public int get_MaxLevel() { }

	// RVA: 0x20BFC24 Offset: 0x20BFC24 VA: 0x20BFC24
	public int get_Cost() { }

	// RVA: 0x20BFC50 Offset: 0x20BFC50 VA: 0x20BFC50
	public int get_Hp() { }

	// RVA: 0x20BFC98 Offset: 0x20BFC98 VA: 0x20BFC98
	public int get_Atk() { }

	// RVA: 0x20BFCE0 Offset: 0x20BFCE0 VA: 0x20BFCE0
	public bool GetAdjustMax(out int maxAjustHp, out int maxAjustAtk, out int secondMaxAdjustHp, out int secondMaxAdjustAtk) { }

	// RVA: 0x20BFD18 Offset: 0x20BFD18 VA: 0x20BFD18
	public int get_AdjustHp() { }

	// RVA: 0x20BFD40 Offset: 0x20BFD40 VA: 0x20BFD40
	public int get_AdjustAtk() { }

	// RVA: 0x20BFD68 Offset: 0x20BFD68 VA: 0x20BFD68
	public int get_Exp() { }

	// RVA: 0x20BFDA0 Offset: 0x20BFDA0 VA: 0x20BFDA0
	public bool GetExpInfo(out int exp, out int lateExp, out float barExp) { }

	// RVA: 0x20B3CC0 Offset: 0x20B3CC0 VA: 0x20B3CC0
	public StatusRank.Kind get_Power() { }

	// RVA: 0x20B3CEC Offset: 0x20B3CEC VA: 0x20B3CEC
	public StatusRank.Kind get_Defense() { }

	// RVA: 0x20B3D18 Offset: 0x20B3D18 VA: 0x20B3D18
	public StatusRank.Kind get_Agility() { }

	// RVA: 0x20B3D44 Offset: 0x20B3D44 VA: 0x20B3D44
	public StatusRank.Kind get_Magic() { }

	// RVA: 0x20B3D70 Offset: 0x20B3D70 VA: 0x20B3D70
	public StatusRank.Kind get_Luck() { }

	// RVA: 0x20B3D9C Offset: 0x20B3D9C VA: 0x20B3D9C
	public StatusRank.Kind get_Np() { }

	// RVA: 0x20BFDC0 Offset: 0x20BFDC0 VA: 0x20BFDC0
	public bool get_IsEquip() { }

	// RVA: 0x20BFDEC Offset: 0x20BFDEC VA: 0x20BFDEC
	public long get_EquipTargetId1() { }

	// RVA: 0x20BFDF4 Offset: 0x20BFDF4 VA: 0x20BFDF4
	public UserServantEntity get_EquipUserServant() { }

	// RVA: 0x20BFDFC Offset: 0x20BFDFC VA: 0x20BFDFC
	public ServantEntity get_EquipServant() { }

	// RVA: 0x20BFE04 Offset: 0x20BFE04 VA: 0x20BFE04
	public int get_EquipLevel() { }

	// RVA: 0x20BFE34 Offset: 0x20BFE34 VA: 0x20BFE34
	public int get_EquipMaxLevel() { }

	// RVA: 0x20BFE68 Offset: 0x20BFE68 VA: 0x20BFE68
	public int get_EquipLimitCount() { }

	// RVA: 0x20BFF08 Offset: 0x20BFF08 VA: 0x20BFF08
	public int get_EquipAtk() { }

	// RVA: 0x20BFF38 Offset: 0x20BFF38 VA: 0x20BFF38
	public int get_EquipHp() { }

	// RVA: 0x20BFF68 Offset: 0x20BFF68 VA: 0x20BFF68
	public int get_EquipCost() { }

	// RVA: 0x20BFF80 Offset: 0x20BFF80 VA: 0x20BFF80
	public bool get_IsLock() { }

	// RVA: 0x20BFF88 Offset: 0x20BFF88 VA: 0x20BFF88
	public bool get_IsModifyLock() { }

	// RVA: 0x20BFFC0 Offset: 0x20BFFC0 VA: 0x20BFFC0
	public bool ChangeLock() { }

	// RVA: 0x20BFFDC Offset: 0x20BFFDC VA: 0x20BFFDC
	public bool get_IsChoice() { }

	// RVA: 0x20BFFE4 Offset: 0x20BFFE4 VA: 0x20BFFE4
	public bool get_IsModifyChoice() { }

	// RVA: 0x20C001C Offset: 0x20C001C VA: 0x20C001C
	public bool ChangeChoice() { }

	// RVA: 0x20C0038 Offset: 0x20C0038 VA: 0x20C0038
	public bool get_IsUse() { }

	// RVA: 0x20B2BA4 Offset: 0x20B2BA4 VA: 0x20B2BA4
	public bool get_IsEnableOwnRandomSetting() { }

	// RVA: 0x20B2BAC Offset: 0x20B2BAC VA: 0x20B2BAC
	public void set_IsEnableOwnRandomSetting(bool value) { }

	// RVA: 0x20B2C90 Offset: 0x20B2C90 VA: 0x20B2C90
	public bool get_IsEnableSupportRandomSetting() { }

	// RVA: 0x20B2C98 Offset: 0x20B2C98 VA: 0x20B2C98
	public void set_IsEnableSupportRandomSetting(bool value) { }

	// RVA: 0x20BFB68 Offset: 0x20BFB68 VA: 0x20BFB68
	public int get_SupportRandomLimitCount() { }

	// RVA: 0x20C0040 Offset: 0x20C0040 VA: 0x20C0040
	public int[] get_SupportRandomLimitCountList() { }

	// RVA: 0x20C0048 Offset: 0x20C0048 VA: 0x20C0048
	public void SetSupportRandomLimitCountByIndex(int index) { }

	// RVA: 0x20C0108 Offset: 0x20C0108 VA: 0x20C0108
	public int get_EquipExp() { }

	// RVA: 0x20C0138 Offset: 0x20C0138 VA: 0x20C0138
	public bool GetEquipExpInfo(out int exp, out int lateExp, out float barExp) { }

	// RVA: 0x20C016C Offset: 0x20C016C VA: 0x20C016C
	public void GetEquipSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x20C0178 Offset: 0x20C0178 VA: 0x20C0178
	public bool IsEnableSkillInfo() { }

	// RVA: 0x20C0198 Offset: 0x20C0198 VA: 0x20C0198
	public void GetSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x20C01A4 Offset: 0x20C01A4 VA: 0x20C01A4
	public void GetSkillInfo(out SkillInfo[] skillInfoList, int dispLimitCount) { }

	// RVA: 0x20C028C Offset: 0x20C028C VA: 0x20C028C
	public bool IsEnablePassiveSkillInfo() { }

	// RVA: 0x20C02AC Offset: 0x20C02AC VA: 0x20C02AC
	public void GetPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList) { }

	// RVA: 0x20C02C8 Offset: 0x20C02C8 VA: 0x20C02C8
	public void GetPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, int dispLimitCount) { }

	// RVA: 0x20C046C Offset: 0x20C046C VA: 0x20C046C
	public bool GetNpInfo(out TreasureDvcInfo tdInfo) { }

	// RVA: 0x20C047C Offset: 0x20C047C VA: 0x20C047C
	public bool GetNpInfo(out TreasureDvcInfo tdInfo, int dispLimitCount) { }

	// RVA: 0x20C05A8 Offset: 0x20C05A8 VA: 0x20C05A8
	public bool GetFriendshipInfo(out int rank, out int max, out int late, out float fraction) { }

	// RVA: 0x20B5514 Offset: 0x20B5514 VA: 0x20B5514
	public bool GetVoiceInfo(out string illust, out string voice, out bool isPlayVoice) { }

	// RVA: 0x20C0774 Offset: 0x20C0774 VA: 0x20C0774
	public long get_UserId() { }

	// RVA: 0x20C0850 Offset: 0x20C0850 VA: 0x20C0850
	public bool get_IsMine() { }

	// RVA: 0x20C0860 Offset: 0x20C0860 VA: 0x20C0860
	public bool IsEnableAppendSkillInfo() { }

	// RVA: 0x20C0880 Offset: 0x20C0880 VA: 0x20C0880
	public void GetAppendPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, out bool[] releaseStateList, out int[] lvList) { }

	// RVA: 0x20C08AC Offset: 0x20C08AC VA: 0x20C08AC
	public bool UpdateServantComment(int svtId, int imageLimitCount) { }
}

// Namespace: 
private class ServantStatusListViewItem.LimitCountCache // TypeDefIndex: 5744
{
	// Fields
	public int cardLimitCount; // 0x10
	public int dispLimitCount; // 0x14
	public int commandCardLimitCount; // 0x18
	public int iconLimitCount; // 0x1C
	public int portraitLimitCount; // 0x20

	// Methods

	// RVA: 0x20BED94 Offset: 0x20BED94 VA: 0x20BED94
	public void .ctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDraw : MonoBehaviour // TypeDefIndex: 5745
{
	// Fields
	protected ServantStatusListViewItemDraw.DispMode dispMode; // 0x18

	// Methods

	// RVA: 0x20C0A34 Offset: 0x20C0A34 VA: 0x20C0A34
	public void .ctor() { }

	// RVA: 0x20C0A3C Offset: 0x20C0A3C VA: 0x20C0A3C Slot: 4
	public virtual ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x20C0A44 Offset: 0x20C0A44 VA: 0x20C0A44 Slot: 5
	public virtual void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x20C0A4C Offset: 0x20C0A4C VA: 0x20C0A4C Slot: 6
	public virtual void PlayBattle(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A50 Offset: 0x20C0A50 VA: 0x20C0A50 Slot: 7
	public virtual void ModifyCommandCard(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A54 Offset: 0x20C0A54 VA: 0x20C0A54 Slot: 8
	public virtual void ModifyFace(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A58 Offset: 0x20C0A58 VA: 0x20C0A58 Slot: 9
	public virtual void ModifyStatus(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A5C Offset: 0x20C0A5C VA: 0x20C0A5C Slot: 10
	public virtual void ModifyPortrait(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A60 Offset: 0x20C0A60 VA: 0x20C0A60 Slot: 11
	public virtual void ModifyServantQuest(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A64 Offset: 0x20C0A64 VA: 0x20C0A64 Slot: 12
	public virtual void ModifyRandomLimitCountSupport(ServantStatusListViewItem item) { }

	// RVA: 0x20C0A68 Offset: 0x20C0A68 VA: 0x20C0A68 Slot: 13
	public virtual void ModifyRandomLimitCountSetting(ServantStatusListViewItem item) { }
}

// Namespace: 
public enum ServantStatusListViewItemDraw.Kind // TypeDefIndex: 5746
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewItemDraw.Kind NONE = 0;
	public const ServantStatusListViewItemDraw.Kind MAIN = 1;
	public const ServantStatusListViewItemDraw.Kind EQUIP_MAIN = 2;
	public const ServantStatusListViewItemDraw.Kind EQUIP = 3;
	public const ServantStatusListViewItemDraw.Kind SKILL = 4;
	public const ServantStatusListViewItemDraw.Kind CLASS_SKILL = 5;
	public const ServantStatusListViewItemDraw.Kind KIND_0801 = 6;
	public const ServantStatusListViewItemDraw.Kind NP = 7;
	public const ServantStatusListViewItemDraw.Kind COMMAND = 8;
	public const ServantStatusListViewItemDraw.Kind FACE = 9;
	public const ServantStatusListViewItemDraw.Kind FLAVOR_TEXT = 10;
	public const ServantStatusListViewItemDraw.Kind TERMINAL = 11;
	public const ServantStatusListViewItemDraw.Kind EQUIP_SKILL = 12;
	public const ServantStatusListViewItemDraw.Kind PORTRAIT = 13;
	public const ServantStatusListViewItemDraw.Kind COMMAND_CODE_SKILL = 14;
	public const ServantStatusListViewItemDraw.Kind SERVANT_QUEST = 15;
	public const ServantStatusListViewItemDraw.Kind TREASURE_DEVICE_SPEED = 16;
	public const ServantStatusListViewItemDraw.Kind CHANGE_VOICE = 17;
	public const ServantStatusListViewItemDraw.Kind RANDOM_LIMIT_COUNT_SUPPORT = 18;
	public const ServantStatusListViewItemDraw.Kind RANDOM_LIMIT_COUNT_SETTING = 19;
}

// Namespace: 
public enum ServantStatusListViewItemDraw.DispMode // TypeDefIndex: 5747
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewItemDraw.DispMode INVISIBLE = 0;
	public const ServantStatusListViewItemDraw.DispMode INVALID = 1;
	public const ServantStatusListViewItemDraw.DispMode VALID = 2;
	public const ServantStatusListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class ServantStatusListViewItemDrawAppendSkill : ServantStatusListViewItemDraw // TypeDefIndex: 5748
{
	// Fields
	[SerializeField] // RVA: 0xCBB980 Offset: 0xCBB980 VA: 0xCBB980
	protected BoxCollider baseCollider; // 0x20
	[SerializeField] // RVA: 0xCBB990 Offset: 0xCBB990 VA: 0xCBB990
	protected UISprite baseSprite; // 0x28
	[SerializeField] // RVA: 0xCBB9A0 Offset: 0xCBB9A0 VA: 0xCBB9A0
	protected UISprite titleSprite; // 0x30
	[SerializeField] // RVA: 0xCBB9B0 Offset: 0xCBB9B0 VA: 0xCBB9B0
	protected UISprite titleTextSprite; // 0x38
	[SerializeField] // RVA: 0xCBB9C0 Offset: 0xCBB9C0 VA: 0xCBB9C0
	protected UILabel explanationLabel; // 0x40
	[SerializeField] // RVA: 0xCBB9D0 Offset: 0xCBB9D0 VA: 0xCBB9D0
	protected GameObject srcSkillObj; // 0x48
	private List<GameObject> skillList; // 0x50
	protected Vector3 baseSize; // 0x58
	protected Vector3 titleBasePosition; // 0x64
	protected Vector3 skillBasePosition; // 0x70
	private static readonly float SKILL_BASE_POS_Y; // 0x0
	private static readonly int SKILL_BASE_HEIGHT; // 0x4
	private static readonly int ADJUST_HEIGHT; // 0x8

	// Methods

	// RVA: 0x20C0A6C Offset: 0x20C0A6C VA: 0x20C0A6C
	public void .ctor() { }

	// RVA: 0x20C0ADC Offset: 0x20C0ADC VA: 0x20C0ADC
	protected void Awake() { }

	// RVA: 0x20C0C24 Offset: 0x20C0C24 VA: 0x20C0C24 Slot: 4
	public override ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x20C0C2C Offset: 0x20C0C2C VA: 0x20C0C2C Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x20C143C Offset: 0x20C143C VA: 0x20C143C
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDrawButton : ServantStatusListViewItemDrawButtonsBase // TypeDefIndex: 5749
{
	// Fields
	private static readonly int TITLE_LABEL_BASE_WIDTH; // 0x0
	private static readonly int TD_SPEED_EXPLANATION_LABEL_HEIGHT; // 0x4
	private static readonly float TD_SPEED_EXPLANATION_LABEL_POS_Y; // 0x8
	private static readonly int TD_SPEED_BASE_SPRITE_HEIGHT; // 0xC
	private static readonly string[] TD_SPEED_LOCALIZATION_KEYS; // 0x10

	// Methods

	// RVA: 0x20C14B0 Offset: 0x20C14B0 VA: 0x20C14B0
	public void .ctor() { }

	// RVA: 0x20C14C0 Offset: 0x20C14C0 VA: 0x20C14C0
	public static string GetTDSpeedLocalization(int index) { }

	// RVA: 0x20C1608 Offset: 0x20C1608 VA: 0x20C1608
	protected void Awake() { }

	// RVA: 0x20C160C Offset: 0x20C160C VA: 0x20C160C Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x20C1EB8 Offset: 0x20C1EB8 VA: 0x20C1EB8 Slot: 14
	protected override int Selected(ServantStatusListViewItem item) { }

	// RVA: 0x20C1F2C Offset: 0x20C1F2C VA: 0x20C1F2C
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDrawButtonsBase : ServantStatusListViewItemDraw // TypeDefIndex: 5750
{
	// Fields
	[SerializeField] // RVA: 0xCBB9E0 Offset: 0xCBB9E0 VA: 0xCBB9E0
	protected BoxCollider collider; // 0x20
	[SerializeField] // RVA: 0xCBB9F0 Offset: 0xCBB9F0 VA: 0xCBB9F0
	protected GameObject titleBase; // 0x28
	[SerializeField] // RVA: 0xCBBA00 Offset: 0xCBBA00 VA: 0xCBBA00
	protected GameObject buttonBase; // 0x30
	[SerializeField] // RVA: 0xCBBA10 Offset: 0xCBBA10 VA: 0xCBBA10
	protected UISprite baseSprite; // 0x38
	[SerializeField] // RVA: 0xCBBA20 Offset: 0xCBBA20 VA: 0xCBBA20
	protected UILabel explanationLabel; // 0x40
	[SerializeField] // RVA: 0xCBBA30 Offset: 0xCBBA30 VA: 0xCBBA30
	protected UIRangeLabel[] tdSpeedRangeLabelList; // 0x48
	[SerializeField] // RVA: 0xCBBA40 Offset: 0xCBBA40 VA: 0xCBBA40
	protected UICommonButton[] tdSpeedButtonList; // 0x50
	[SerializeField] // RVA: 0xCBBA50 Offset: 0xCBBA50 VA: 0xCBBA50
	protected UISprite[] tdSpeedButtonSpriteList; // 0x58
	[SerializeField] // RVA: 0xCBBA60 Offset: 0xCBBA60 VA: 0xCBBA60
	protected GameObject clickEventObject; // 0x60
	[SerializeField] // RVA: 0xCBBA70 Offset: 0xCBBA70 VA: 0xCBBA70
	protected UISprite titleSprite; // 0x68
	private int kind; // 0x70

	// Methods

	// RVA: 0x20C14B8 Offset: 0x20C14B8 VA: 0x20C14B8
	public void .ctor() { }

	// RVA: 0x20C20D8 Offset: 0x20C20D8 VA: 0x20C20D8 Slot: 4
	public override ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x20C20E0 Offset: 0x20C20E0 VA: 0x20C20E0
	public void SetButtonKind(int value) { }

	// RVA: 0x20C1C48 Offset: 0x20C1C48 VA: 0x20C1C48 Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x20C20E8 Offset: 0x20C20E8 VA: 0x20C20E8 Slot: 14
	protected virtual int Selected(ServantStatusListViewItem item) { }

	// RVA: 0x20C20F0 Offset: 0x20C20F0 VA: 0x20C20F0
	public int GetButtonIndex(UICommonButton buttonObj) { }
}

// Namespace: 
public class ServantStatusListViewItemDrawClassSkill : ServantStatusListViewItemDraw // TypeDefIndex: 5751
{
	// Fields
	[SerializeField] // RVA: 0xCBBA80 Offset: 0xCBBA80 VA: 0xCBBA80
	protected UICommonButton baseButton; // 0x20
	[SerializeField] // RVA: 0xCBBA90 Offset: 0xCBBA90 VA: 0xCBBA90
	protected BoxCollider baseCollider; // 0x28
	[SerializeField] // RVA: 0xCBBAA0 Offset: 0xCBBAA0 VA: 0xCBBAA0
	protected UISprite baseSprite; // 0x30
	[SerializeField] // RVA: 0xCBBAB0 Offset: 0xCBBAB0 VA: 0xCBBAB0
	protected UISprite titleSprite; // 0x38
	[SerializeField] // RVA: 0xCBBAC0 Offset: 0xCBBAC0 VA: 0xCBBAC0
	protected UILabel explanationLabel; // 0x40
	[SerializeField] // RVA: 0xCBBAD0 Offset: 0xCBBAD0 VA: 0xCBBAD0
	protected GameObject[] skillBaseList; // 0x48
	[SerializeField] // RVA: 0xCBBAE0 Offset: 0xCBBAE0 VA: 0xCBBAE0
	protected SkillIconComponent[] skillIconList; // 0x50
	[SerializeField] // RVA: 0xCBBAF0 Offset: 0xCBBAF0 VA: 0xCBBAF0
	protected UIRangeLabel[] skillTitleRangeLabelList; // 0x58
	[SerializeField] // RVA: 0xCBBB00 Offset: 0xCBBB00 VA: 0xCBBB00
	protected UILabel[] skillExplanationLabelList; // 0x60
	protected int skillPitch; // 0x68
	protected Vector3 baseSize; // 0x6C
	protected Vector3 titleBasePosition; // 0x78
	protected Vector3 skillBasePosition; // 0x84
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int MAX_HEIGHT; // 0x4
	private static readonly int ADJUST_HEIGHT; // 0x8

	// Methods

	// RVA: 0x20C2150 Offset: 0x20C2150 VA: 0x20C2150
	public void .ctor() { }

	// RVA: 0x20C2238 Offset: 0x20C2238 VA: 0x20C2238
	protected void Awake() { }

	// RVA: 0x20C2494 Offset: 0x20C2494 VA: 0x20C2494 Slot: 4
	public override ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x20C249C Offset: 0x20C249C VA: 0x20C249C Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x20C2B00 Offset: 0x20C2B00 VA: 0x20C2B00
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDrawCommand : ServantStatusListViewItemDraw // TypeDefIndex: 5752
{
	// Fields
	public const int BUTTON_LINE = 3;
	private readonly int MASK_LABEL_MAX_WIDTH; // 0x1C
	[SerializeField] // RVA: 0xCBBB10 Offset: 0xCBBB10 VA: 0xCBBB10
	protected BoxCollider baseCollider; // 0x20
	[SerializeField] // RVA: 0xCBBB20 Offset: 0xCBBB20 VA: 0xCBBB20
	protected UISprite baseSprite; // 0x28
	[SerializeField] // RVA: 0xCBBB30 Offset: 0xCBBB30 VA: 0xCBBB30
	protected UISprite titleSprite; // 0x30
	[SerializeField] // RVA: 0xCBBB40 Offset: 0xCBBB40 VA: 0xCBBB40
	protected GameObject cardBase; // 0x38
	[SerializeField] // RVA: 0xCBBB50 Offset: 0xCBBB50 VA: 0xCBBB50
	protected GameObject commandCardPrefab; // 0x40
	[SerializeField] // RVA: 0xCBBB60 Offset: 0xCBBB60 VA: 0xCBBB60
	protected GameObject[] commandCardBaseList; // 0x48
	[SerializeField] // RVA: 0xCBBB70 Offset: 0xCBBB70 VA: 0xCBBB70
	protected UILabel explanationLabel; // 0x50
	[SerializeField] // RVA: 0xCBBB80 Offset: 0xCBBB80 VA: 0xCBBB80
	protected GameObject levelButtonBase; // 0x58
	[SerializeField] // RVA: 0xCBBB90 Offset: 0xCBBB90 VA: 0xCBBB90
	protected UIRangeLabel[] battleCharaLevelTitleRangeLabelList; // 0x60
	[SerializeField] // RVA: 0xCBBBA0 Offset: 0xCBBBA0 VA: 0xCBBBA0
	protected UISprite[] battleCharaLevelSpriteList; // 0x68
	[SerializeField] // RVA: 0xCBBBB0 Offset: 0xCBBBB0 VA: 0xCBBBB0
	protected UICommonButton[] battleCharaLevelButtonList; // 0x70
	[SerializeField] // RVA: 0xCBBBC0 Offset: 0xCBBBC0 VA: 0xCBBBC0
	protected GameObject clickEventObject; // 0x78
	[SerializeField] // RVA: 0xCBBBD0 Offset: 0xCBBBD0 VA: 0xCBBBD0
	protected UISprite[] commandCodeSpriteList; // 0x80
	[SerializeField] // RVA: 0xCBBBE0 Offset: 0xCBBBE0 VA: 0xCBBBE0
	protected GameObject maskBase; // 0x88
	[SerializeField] // RVA: 0xCBBBF0 Offset: 0xCBBBF0 VA: 0xCBBBF0
	protected UISprite maskSprite; // 0x90
	[SerializeField] // RVA: 0xCBBC00 Offset: 0xCBBC00 VA: 0xCBBC00
	protected UILabel maskInfoLabel; // 0x98
	[SerializeField] // RVA: 0xCBBC10 Offset: 0xCBBC10 VA: 0xCBBC10
	private UILabel[] limitCountSealLabel; // 0xA0
	[SerializeField] // RVA: 0xCBBC20 Offset: 0xCBBC20 VA: 0xCBBC20
	private GameObject[] limitCountSealObjList; // 0xA8
	protected BattleCommandData[] commandCardDataList; // 0xB0
	protected BattleCommandComponent[] commandCardComponentList; // 0xB8
	protected int[] commandCodeIdList; // 0xC0
	protected int[] commandCardParam; // 0xC8
	protected bool isStart; // 0xD0
	protected int baseRange; // 0xD4
	protected int buttonPitch; // 0xD8
	protected Vector3 baseSize; // 0xDC
	protected Vector3 titleBasePosition; // 0xE8
	protected Vector3 cardBasePosition; // 0xF4
	protected Vector3 levelButtonBasePosition; // 0x100
	protected Vector3 explanationBasePosition; // 0x10C

	// Methods

	// RVA: 0x20C2B74 Offset: 0x20C2B74 VA: 0x20C2B74
	public void .ctor() { }

	// RVA: 0x20C2C04 Offset: 0x20C2C04 VA: 0x20C2C04
	protected void Awake() { }

	// RVA: 0x20C2EF0 Offset: 0x20C2EF0 VA: 0x20C2EF0 Slot: 4
	public override ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x20C2EF8 Offset: 0x20C2EF8 VA: 0x20C2EF8 Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x20C43B0 Offset: 0x20C43B0 VA: 0x20C43B0 Slot: 7
	public override void ModifyCommandCard(ServantStatusListViewItem item) { }

	// RVA: 0x20C5238 Offset: 0x20C5238 VA: 0x20C5238 Slot: 13
	public override void ModifyRandomLimitCountSetting(ServantStatusListViewItem item) { }

	// RVA: 0x20C43BC Offset: 0x20C43BC VA: 0x20C43BC
	private void RefreshCommandCard(ServantStatusListViewItem item) { }

	// RVA: 0x20C3550 Offset: 0x20C3550 VA: 0x20C3550
	protected void SetupBattleButton(ServantStatusListViewItem item, bool isInit = False) { }

	// RVA: 0x20C40E4 Offset: 0x20C40E4 VA: 0x20C40E4
	private void SetupMask(ServantStatusListViewItem item) { }
}

// Namespace: 
public class ServantStatusListViewItemDrawCommandCodeSkill : ServantStatusListViewItemDraw // TypeDefIndex: 5753
{
	// Fields
	[SerializeField] // RVA: 0xCBBC30 Offset: 0xCBBC30 VA: 0xCBBC30
	protected UICommonButton baseButton; // 0x20
	[SerializeField] // RVA: 0xCBBC40 Offset: 0xCBBC40 VA: 0xCBBC40
	protected BoxCollider baseCollider; // 0x28
	[SerializeField] // RVA: 0xCBBC50 Offset: 0xCBBC50 VA: 0xCBBC50
	protected UISprite baseSprite; // 0x30
	[SerializeField] // RVA: 0xCBBC60 Offset: 0xCBBC60 VA: 0xCBBC60
	protected UISprite titleSprite; // 0x38
	[SerializeField] // RVA: 0xCBBC70 Offset: 0xCBBC70 VA: 0xCBBC70
