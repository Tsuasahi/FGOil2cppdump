	public void SetManager(ServantStatusFlavorTextListViewManager manager) { }

	// RVA: 0x1B42A2C Offset: 0x1B42A2C VA: 0x1B42A2C
	public void SetItem(ServantStatusListViewItem item, int id, bool isOpen, bool isNew, string text, int profileNum = 0) { }

	// RVA: 0x1B44218 Offset: 0x1B44218 VA: 0x1B44218
	public ServantStatusFlavorTextListViewItemDraw.Kind GetKind() { }

	// RVA: 0x1B438B0 Offset: 0x1B438B0 VA: 0x1B438B0
	public int GetSize() { }

	// RVA: 0x1B44EB0 Offset: 0x1B44EB0 VA: 0x1B44EB0
	public void SetVisible(bool isVisible) { }

	// RVA: 0x1B44F60 Offset: 0x1B44F60 VA: 0x1B44F60
	public void SetInput(bool isInput) { }

	// RVA: 0x1B4399C Offset: 0x1B4399C VA: 0x1B4399C
	public void SetBaseTransform() { }

	// RVA: 0x1B45024 Offset: 0x1B45024 VA: 0x1B45024
	public void SetTransform(Vector3 position) { }

	// RVA: 0x1B45090 Offset: 0x1B45090 VA: 0x1B45090
	public void Init(ServantStatusFlavorTextListViewObject.InitMode initMode, Action callbackFunc, float delay, Vector3 position) { }

	// RVA: 0x1B43FCC Offset: 0x1B43FCC VA: 0x1B43FCC
	public void Init(ServantStatusFlavorTextListViewObject.InitMode initMode, Action callbackFunc, float delay) { }

	// RVA: 0x1B44050 Offset: 0x1B44050 VA: 0x1B44050
	public void Init(ServantStatusFlavorTextListViewObject.InitMode initMode, Action callbackFunc) { }

	// RVA: 0x1B43A90 Offset: 0x1B43A90 VA: 0x1B43A90
	public void Init(ServantStatusFlavorTextListViewObject.InitMode initMode) { }

	// RVA: 0x1B451B4 Offset: 0x1B451B4 VA: 0x1B451B4
	protected void SetupDisp() { }

	// RVA: 0x1B452C4 Offset: 0x1B452C4 VA: 0x1B452C4
	protected void OnClick() { }

	// RVA: 0x1B4532C Offset: 0x1B4532C VA: 0x1B4532C
	public void OnClickVoice() { }

	// RVA: 0x1B42EC4 Offset: 0x1B42EC4 VA: 0x1B42EC4
	public void SetCondTitle(string title) { }
}

// Namespace: 
public enum ServantStatusFlavorTextListViewObject.InitMode // TypeDefIndex: 5736
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusFlavorTextListViewObject.InitMode INVISIBLE = 0;
	public const ServantStatusFlavorTextListViewObject.InitMode INVALID = 1;
	public const ServantStatusFlavorTextListViewObject.InitMode VALID = 2;
	public const ServantStatusFlavorTextListViewObject.InitMode INPUT = 3;
}

// Namespace: 
protected enum ServantStatusFlavorTextListViewObject.State // TypeDefIndex: 5737
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusFlavorTextListViewObject.State INIT = 0;
	public const ServantStatusFlavorTextListViewObject.State IDLE = 1;
	public const ServantStatusFlavorTextListViewObject.State MOVE = 2;
	public const ServantStatusFlavorTextListViewObject.State INPUT = 3;
}

// Namespace: 
public class ServantStatusFriendshipGauge : BaseMonoBehaviour // TypeDefIndex: 5738
{
	// Fields
	public const int GAUGE_LINE = 5;
	[SerializeField] // RVA: 0xC4F9F8 Offset: 0xC4F9F8 VA: 0xC4F9F8
	protected UIExtrusionLabel levelLabel; // 0x18
	[SerializeField] // RVA: 0xC4FA08 Offset: 0xC4FA08 VA: 0xC4FA08
	protected UILabel maxLevelLabel; // 0x20
	[SerializeField] // RVA: 0xC4FA18 Offset: 0xC4FA18 VA: 0xC4FA18
	protected UILabel latePointLabel; // 0x28
	[SerializeField] // RVA: 0xC4FA28 Offset: 0xC4FA28 VA: 0xC4FA28
	protected UISlider[] gaugeSliderList; // 0x30
	[SerializeField] // RVA: 0xC4FA38 Offset: 0xC4FA38 VA: 0xC4FA38
	protected UISlider[] overLimitGaugeSliderList; // 0x38
	[SerializeField] // RVA: 0xC4FA48 Offset: 0xC4FA48 VA: 0xC4FA48
	private UISprite overLimitGaugeSprite; // 0x40
	[SerializeField] // RVA: 0xC4FA58 Offset: 0xC4FA58 VA: 0xC4FA58
	private GameObject nomalGaugeContainer; // 0x48
	[SerializeField] // RVA: 0xC4FA68 Offset: 0xC4FA68 VA: 0xC4FA68
	private GameObject overLimitGaugeContainer; // 0x50
	protected bool isInit; // 0x58
	protected float sy1; // 0x5C
	protected float sy2; // 0x60

	// Methods

	// RVA: 0x1B45394 Offset: 0x1B45394 VA: 0x1B45394
	public void .ctor() { }

	// RVA: 0x1B4540C Offset: 0x1B4540C VA: 0x1B4540C
	private void Initialize() { }

	// RVA: 0x1B455AC Offset: 0x1B455AC VA: 0x1B455AC
	public void Set(int currentRank, int maxRank, int late, float fraction) { }

	// RVA: 0x1B457CC Offset: 0x1B457CC VA: 0x1B457CC
	private void DisplayGauge(int currentRank, int maxRank, float fraction) { }

	// RVA: 0x1B45A44 Offset: 0x1B45A44 VA: 0x1B45A44
	private void DisplayNomalGauge(int currentRank, int maxRank, float fraction) { }

	// RVA: 0x1B45920 Offset: 0x1B45920 VA: 0x1B45920
	private void DisplayOverLimitGauge(int currentRank, int maxRank, float fraction) { }

	// RVA: 0x1B458B8 Offset: 0x1B458B8 VA: 0x1B458B8
	private void SetActiveContainer(bool isOverLimit) { }
}

// Namespace: 
public class ServantStatusLimitCountGauge : BaseMonoBehaviour // TypeDefIndex: 5739
{
	// Fields
	[SerializeField] // RVA: 0xC4FA78 Offset: 0xC4FA78 VA: 0xC4FA78
	protected UISprite[] gaugeSpriteList; // 0x18

	// Methods

	// RVA: 0x1B45C18 Offset: 0x1B45C18 VA: 0x1B45C18
	public void .ctor() { }

	// RVA: 0x1B45C78 Offset: 0x1B45C78 VA: 0x1B45C78
	public void Set(int limitCount, int limitMax) { }
}

// Namespace: 
public class ServantStatusListViewItem // TypeDefIndex: 5740
{
	// Fields
	protected UserGameEntity userGameEntity; // 0x10
	protected PartyListViewItem partyItem; // 0x18
	protected PartyOrganizationListViewItem memberItem; // 0x20
	protected int memberNum; // 0x28
	protected WarBoardPartyListViewItem warBoardPartyItem; // 0x30
	protected UserServantEntity userSvtEntity; // 0x38
	protected long[] equipIdList; // 0x40
	protected QuestRestrictionInfo questRestrictionInfo; // 0x48
	protected UserServantCollectionEntity userSvtCollectionEntity; // 0x50
	protected ServantLeaderInfo servantLeaderInfo; // 0x58
	protected EquipTargetInfo equipTargetInfo; // 0x60
	protected UserCommandCodeEntity userCommandCodeEntity; // 0x68
	protected UserCommandCodeCollectionEntity userCommandCodeCollectionEntity; // 0x70
	protected bool isEquipShowMode; // 0x78
	protected bool isEquipChangeMode; // 0x79
	protected bool isNpcFollowerServantEquip; // 0x7A
	protected bool isEnableServantQuest; // 0x7B
	protected ServantEntity svtEntity; // 0x80
	protected ServantLimitEntity svtLimitEntity; // 0x88
	protected ServantExpEntity svtExpEntity; // 0x90
	protected ServantCommentEntity[] svtCommentEntityList; // 0x98
	protected long favoriteUserSvtId; // 0xA0
	protected long pushUserSvtId; // 0xA8
	protected CommandCodeEntity commandCodeEntity; // 0xB0
	protected CommandCodeCommentEntity commandCodeCommentEntity; // 0xB8
	protected bool isConvertOverwriteImage; // 0xC0
	protected int[] commandCodeIdList; // 0xC8
	protected int[] costumeIds; // 0xD0
	protected int cardLimitCount; // 0xD8
	protected int maxCardLimitCount; // 0xDC
	protected int[] cardSelectList; // 0xE0
	protected int dispLimitCount; // 0xE8
	protected int maxDispLimitCount; // 0xEC
	protected int[] dispSelectList; // 0xF0
	protected int commandCardLimitCount; // 0xF8
	protected int maxCommandCardLimitCount; // 0xFC
	protected int[] commandCardSelectList; // 0x100
	protected int[] commandCardParam; // 0x108
	protected int iconLimitCount; // 0x110
	protected int maxIconLimitCount; // 0x114
	protected int[] iconSelectList; // 0x118
	protected int portraitLimitCount; // 0x120
	protected int maxPortraitLimitCount; // 0x124
	protected int[] portraitSelectList; // 0x128
	protected int svtCommonFlag; // 0x130
	protected bool enableTdSpeed; // 0x134
	protected int changeVoiceFlag; // 0x138
	protected bool enableChangeVoice; // 0x13C
	protected bool isLock; // 0x13D
	protected bool isChoice; // 0x13E
	protected bool isUse; // 0x13F
	protected bool isDisplayRandomLimitCount; // 0x140
	protected bool isEnableOwnRandomSetting; // 0x141
	protected bool isEnableSupportRandomSetting; // 0x142
	protected int supportRandomLimitCount; // 0x144
	protected int[] supportRandomLimitCountList; // 0x148
	protected long oldEquipTargetId1; // 0x150
	protected long equipTargetId1; // 0x158
	protected UserServantEntity equipUserSvtEntity; // 0x160
	protected ServantEntity equipServantEntity; // 0x168
	protected ServantLimitEntity equipSvtLimitEntity; // 0x170
	protected bool isCollection; // 0x178
	protected int collectionLv; // 0x17C
	protected int collectionHp; // 0x180
	protected int collectionAtk; // 0x184
	protected bool isTdResult; // 0x188
	protected TreasureDvcInfo tdInfo; // 0x190
	protected SkillInfo[] skillInfoList; // 0x198
	protected int[] passiveSkillIdList; // 0x1A0
	protected string[] passiveSkillTitleMessageList; // 0x1A8
	protected string[] passiveSkillExplanationMessageList; // 0x1B0
	protected int[] appendPassiveSkillIdList; // 0x1B8
	protected int[] appendPassiveSkillLvList; // 0x1C0
	protected string[] appendPassiveSkillTitleMessageList; // 0x1C8
	protected string[] appendPassiveSkillExplanationMessageList; // 0x1D0
	protected bool[] appendPassiveSkillReleaseStateList; // 0x1D8
	protected SkillInfo[] equipSkillInfoList; // 0x1E0
	private ServantStatusListViewItem.LimitCountCache currentLimitCountCache; // 0x1E8

	// Properties
	public bool IsEnableServantQuest { get; }
	public PartyListViewItem PartyItem { get; }
	public int Member { get; }
	public UserGameEntity UserGame { get; }
	public UserServantEntity UserServant { get; }
	public UserServantCollectionEntity UserServantCollection { get; }
	public ServantLeaderInfo ServantLeaderData { get; }
	public EquipTargetInfo EquipTargetData { get; }
	public UserCommandCodeEntity UserCommandCode { get; }
	public UserCommandCodeCollectionEntity UserCommandCodeCollection { get; }
	public bool IsEquipShowMode { get; }
	public bool IsEquipChangeMode { get; }
	public bool IsNpcFollowerServantEquip { get; }
	public ServantEntity Servant { get; }
	public CommandCodeEntity CommandCode { get; }
	public CommandCodeCommentEntity CommandCodeCommentData { get; }
	public ServantCommentEntity[] ServantCommentDataList { get; }
	public long FavoriteUserSvtId { get; set; }
	public long PushUserSvtId { get; set; }
	public bool IsCollection { get; }
	public bool IsEventJoin { get; }
	public bool IsNoPeriod { get; }
	public int SvtId { get; }
	public int CommandCodeId { get; }
	public int LimitCount { get; }
	public bool IsConvertOverwriteImage { get; }
	public int ConvertOverwriteCardImageLimitCount { get; }
	public int CardLimitCount { get; }
	public int ManualSetCardLimitCount { get; }
	public int MaxCardLimitCount { get; }
	public int[] CardSelectList { get; }
	public bool IsChangeImageLimitCount { get; }
	public bool IsModifyDispLimitCount { get; }
	public int ConvertOverwriteDispImageLimitCount { get; }
	public int DispLimitCount { get; set; }
	public int ManualSetDispLimitCount { get; }
	public int MaxDispLimitCount { get; }
	public int[] DispSelectList { get; }
	public bool IsModifyCommandCardLimitCount { get; }
	public int ConvertOverwriteCommandCardLimitCount { get; }
	public int CommandCardLimitCount { get; set; }
	public int ManualSetCommandCardLimit { get; }
	public int MaxCommandCardLimitCount { get; }
	public int[] CommandCardSelectList { get; }
	public int[] CommandCardParam { get; }
	public bool IsModifyIconLimitCount { get; }
	public int ConvertOverwriteIconLimitCount { get; }
	public int IconLimitCount { get; set; }
	public int ManualSetIconLimitCount { get; }
	public int MaxIconLimitCount { get; }
	public int[] IconSelectList { get; }
	public bool IsModifyPortraitLimitCount { get; }
	public int ConvertOverwritePortraitLimitCount { get; }
	public int PortraitLimitCount { get; set; }
	public int ManualSetPortraitLimitCount { get; }
	public int MaxPortraitLimitCount { get; }
	public int[] PortraitSelectList { get; }
	public int[] CommandCodeIdList { get; }
	public int[] CostumeIds { get; }
	public int TreasureDeviceSpeedSelect { get; set; }
	public int SvtCommonFlag { get; }
	public int ChangeBattleVoiceSelect { get; set; }
	public int ChangeVoiceFlag { get; }
	public bool IsModifySvtCommonFlag { get; }
	public bool IsModifyBattleVoice { get; }
	public bool IsModifyRandomLimitCountSetting { get; }
	public bool IsModifySupportRandomLimitCount { get; }
	public bool EnableTdSpeed { get; }
	public bool EnableChangeVoice { get; }
	public bool IsDisplayRandomLimitCount { get; }
	public int Level { get; }
	public int MaxLevel { get; }
	public int Cost { get; }
	public int Hp { get; }
	public int Atk { get; }
	public int AdjustHp { get; }
	public int AdjustAtk { get; }
	public int Exp { get; }
	public StatusRank.Kind Power { get; }
	public StatusRank.Kind Defense { get; }
	public StatusRank.Kind Agility { get; }
	public StatusRank.Kind Magic { get; }
	public StatusRank.Kind Luck { get; }
	public StatusRank.Kind Np { get; }
	public bool IsEquip { get; }
	public long EquipTargetId1 { get; }
	public UserServantEntity EquipUserServant { get; }
	public ServantEntity EquipServant { get; }
	public int EquipLevel { get; }
	public int EquipMaxLevel { get; }
	public int EquipLimitCount { get; }
	public int EquipAtk { get; }
	public int EquipHp { get; }
	public int EquipCost { get; }
	public bool IsLock { get; }
	public bool IsModifyLock { get; }
	public bool IsChoice { get; }
	public bool IsModifyChoice { get; }
	public bool IsUse { get; }
	public bool IsEnableOwnRandomSetting { get; set; }
	public bool IsEnableSupportRandomSetting { get; set; }
	public int SupportRandomLimitCount { get; }
	public int[] SupportRandomLimitCountList { get; }
	public int EquipExp { get; }
	public long UserId { get; }
	public bool IsMine { get; }

	// Methods

	// RVA: 0x1B45D90 Offset: 0x1B45D90 VA: 0x1B45D90
	public void .ctor(PartyListViewItem partyItem, int member, bool isEnableServantQuest) { }

	// RVA: 0x1B46F18 Offset: 0x1B46F18 VA: 0x1B46F18
	public void .ctor(WarBoardPartyListViewItem partyItem, int member, bool isEnableServantQuest) { }

	// RVA: 0x1B47578 Offset: 0x1B47578 VA: 0x1B47578
	public void .ctor(UserServantEntity userServant, long[] equipIdList, QuestRestrictionInfo questRestrictionInfo, bool isEnableServantQuest, bool enableTdSpeed, bool enableBattleVoice) { }

	// RVA: 0x1B47E20 Offset: 0x1B47E20 VA: 0x1B47E20
	public void .ctor(UserServantEntity userServant, bool isUse) { }

	// RVA: 0x1B484E0 Offset: 0x1B484E0 VA: 0x1B484E0
	public void .ctor(UserServantCollectionEntity userSvtCollectionEntity, bool isEnableServantQuest, bool enableTdSpeed) { }

	// RVA: 0x1B48AF0 Offset: 0x1B48AF0 VA: 0x1B48AF0
	public void .ctor(UserServantCollectionEntity userSvtCollectionEntity, int limitCount, bool isEnableServantQuest, bool enableTdSpeed) { }

	// RVA: 0x1B49038 Offset: 0x1B49038 VA: 0x1B49038
	public void .ctor(ServantLeaderInfo servantLeaderInfo, bool isEquipShowMode = True) { }

	// RVA: 0x1B4978C Offset: 0x1B4978C VA: 0x1B4978C
	public void .ctor(EquipTargetInfo equipTargetInfo, bool isNpcFollowerServantEquip) { }

	// RVA: 0x1B499F0 Offset: 0x1B499F0 VA: 0x1B499F0
	public void .ctor(CommandCodeEntity commandCode, bool isUse = False) { }

	// RVA: 0x1B49BA4 Offset: 0x1B49BA4 VA: 0x1B49BA4
	public void .ctor(UserCommandCodeEntity userCommandCode) { }

	// RVA: 0x1B4A098 Offset: 0x1B4A098 VA: 0x1B4A098
	public void .ctor(UserCommandCodeCollectionEntity userCommandCodeCollection) { }

	// RVA: 0x1B4A2DC Offset: 0x1B4A2DC VA: 0x1B4A2DC Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1B4A2E4 Offset: 0x1B4A2E4 VA: 0x1B4A2E4
	private void RefreshLimitCountWithRandom() { }

	// RVA: 0x1B4671C Offset: 0x1B4671C VA: 0x1B4671C
	private void SetLimitCountInfo(UserServantEntity entity) { }

	// RVA: 0x1B469A4 Offset: 0x1B469A4 VA: 0x1B469A4
	private void CreateCurrentLimitCountCache(bool ignoreRandomSettings = False) { }

	// RVA: 0x1B46B74 Offset: 0x1B46B74 VA: 0x1B46B74
	public void ModifyInfo() { }

	// RVA: 0x1B4A544 Offset: 0x1B4A544 VA: 0x1B4A544
	public bool get_IsEnableServantQuest() { }

	// RVA: 0x1B4A54C Offset: 0x1B4A54C VA: 0x1B4A54C
	public PartyListViewItem get_PartyItem() { }

	// RVA: 0x1B4A554 Offset: 0x1B4A554 VA: 0x1B4A554
	public int get_Member() { }

	// RVA: 0x1B4A55C Offset: 0x1B4A55C VA: 0x1B4A55C
	public UserGameEntity get_UserGame() { }

	// RVA: 0x1B4A4E0 Offset: 0x1B4A4E0 VA: 0x1B4A4E0
	public UserServantEntity get_UserServant() { }

	// RVA: 0x1B46714 Offset: 0x1B46714 VA: 0x1B46714
	public UserServantCollectionEntity get_UserServantCollection() { }

	// RVA: 0x1B4A564 Offset: 0x1B4A564 VA: 0x1B4A564
	public ServantLeaderInfo get_ServantLeaderData() { }

	// RVA: 0x1B4A56C Offset: 0x1B4A56C VA: 0x1B4A56C
	public EquipTargetInfo get_EquipTargetData() { }

	// RVA: 0x1B4A574 Offset: 0x1B4A574 VA: 0x1B4A574
	public UserCommandCodeEntity get_UserCommandCode() { }

	// RVA: 0x1B4A57C Offset: 0x1B4A57C VA: 0x1B4A57C
	public UserCommandCodeCollectionEntity get_UserCommandCodeCollection() { }

	// RVA: 0x1B4A584 Offset: 0x1B4A584 VA: 0x1B4A584
	public bool get_IsEquipShowMode() { }

	// RVA: 0x1B4A58C Offset: 0x1B4A58C VA: 0x1B4A58C
	public bool get_IsEquipChangeMode() { }

	// RVA: 0x1B4A594 Offset: 0x1B4A594 VA: 0x1B4A594
	public bool get_IsNpcFollowerServantEquip() { }

	// RVA: 0x1B3FB88 Offset: 0x1B3FB88 VA: 0x1B3FB88
	public ServantEntity get_Servant() { }

	// RVA: 0x1B3FB80 Offset: 0x1B3FB80 VA: 0x1B3FB80
	public CommandCodeEntity get_CommandCode() { }

	// RVA: 0x1B42EB4 Offset: 0x1B42EB4 VA: 0x1B42EB4
	public CommandCodeCommentEntity get_CommandCodeCommentData() { }

	// RVA: 0x1B42EBC Offset: 0x1B42EBC VA: 0x1B42EBC
	public ServantCommentEntity[] get_ServantCommentDataList() { }

	// RVA: 0x1B4A59C Offset: 0x1B4A59C VA: 0x1B4A59C
	public long get_FavoriteUserSvtId() { }

	// RVA: 0x1B4A5A4 Offset: 0x1B4A5A4 VA: 0x1B4A5A4
	public void set_FavoriteUserSvtId(long value) { }

	// RVA: 0x1B4A5AC Offset: 0x1B4A5AC VA: 0x1B4A5AC
	public bool IsModifyFavoriteUserSvtId() { }

	// RVA: 0x1B4A5D8 Offset: 0x1B4A5D8 VA: 0x1B4A5D8
	public long get_PushUserSvtId() { }

	// RVA: 0x1B4A5E0 Offset: 0x1B4A5E0 VA: 0x1B4A5E0
	public void set_PushUserSvtId(long value) { }

	// RVA: 0x1B4A5E8 Offset: 0x1B4A5E8 VA: 0x1B4A5E8
	public bool IsModifyPushUserSvtId() { }

	// RVA: 0x1B4A60C Offset: 0x1B4A60C VA: 0x1B4A60C
	public bool IsModifyEquipId() { }

	// RVA: 0x1B463F0 Offset: 0x1B463F0 VA: 0x1B463F0
	public void SetEquipTargetId1(long equipUserSvtId) { }

	// RVA: 0x1B4A61C Offset: 0x1B4A61C VA: 0x1B4A61C
	public bool get_IsCollection() { }

	// RVA: 0x1B4A624 Offset: 0x1B4A624 VA: 0x1B4A624
	public bool get_IsEventJoin() { }

	// RVA: 0x1B4A638 Offset: 0x1B4A638 VA: 0x1B4A638
	public bool get_IsNoPeriod() { }

	// RVA: 0x1B4A64C Offset: 0x1B4A64C VA: 0x1B4A64C
	public int get_SvtId() { }

	// RVA: 0x1B4A6D4 Offset: 0x1B4A6D4 VA: 0x1B4A6D4
	public int get_CommandCodeId() { }

	// RVA: 0x1B4A75C Offset: 0x1B4A75C VA: 0x1B4A75C
	public int get_LimitCount() { }

	// RVA: 0x1B4A814 Offset: 0x1B4A814 VA: 0x1B4A814
	public bool get_IsConvertOverwriteImage() { }

	// RVA: 0x1B4A81C Offset: 0x1B4A81C VA: 0x1B4A81C
	public int get_ConvertOverwriteCardImageLimitCount() { }

	// RVA: 0x1B4A878 Offset: 0x1B4A878 VA: 0x1B4A878
	public int get_CardLimitCount() { }

	// RVA: 0x1B4A880 Offset: 0x1B4A880 VA: 0x1B4A880
	public int get_ManualSetCardLimitCount() { }

	// RVA: 0x1B4A940 Offset: 0x1B4A940 VA: 0x1B4A940
	public int get_MaxCardLimitCount() { }

	// RVA: 0x1B4A948 Offset: 0x1B4A948 VA: 0x1B4A948
	public int[] get_CardSelectList() { }

	// RVA: 0x1B4A950 Offset: 0x1B4A950 VA: 0x1B4A950
	public bool get_IsChangeImageLimitCount() { }

	// RVA: 0x1B4A990 Offset: 0x1B4A990 VA: 0x1B4A990
	public bool get_IsModifyDispLimitCount() { }

	// RVA: 0x1B4A4E8 Offset: 0x1B4A4E8 VA: 0x1B4A4E8
	public int get_ConvertOverwriteDispImageLimitCount() { }

	// RVA: 0x1B4AB20 Offset: 0x1B4AB20 VA: 0x1B4AB20
	public int get_DispLimitCount() { }

	// RVA: 0x1B4AB28 Offset: 0x1B4AB28 VA: 0x1B4AB28
	public void set_DispLimitCount(int value) { }

	// RVA: 0x1B4AA60 Offset: 0x1B4AA60 VA: 0x1B4AA60
	public int get_ManualSetDispLimitCount() { }

	// RVA: 0x1B4AB30 Offset: 0x1B4AB30 VA: 0x1B4AB30
	public int get_MaxDispLimitCount() { }

	// RVA: 0x1B4AB38 Offset: 0x1B4AB38 VA: 0x1B4AB38
	public int[] get_DispSelectList() { }

	// RVA: 0x1B4AB40 Offset: 0x1B4AB40 VA: 0x1B4AB40
	public bool get_IsModifyCommandCardLimitCount() { }

	// RVA: 0x1B4ACD0 Offset: 0x1B4ACD0 VA: 0x1B4ACD0
	public int get_ConvertOverwriteCommandCardLimitCount() { }

	// RVA: 0x1B4AD2C Offset: 0x1B4AD2C VA: 0x1B4AD2C
	public int get_CommandCardLimitCount() { }

	// RVA: 0x1B4AD34 Offset: 0x1B4AD34 VA: 0x1B4AD34
	public void set_CommandCardLimitCount(int value) { }

	// RVA: 0x1B4AC10 Offset: 0x1B4AC10 VA: 0x1B4AC10
	public int get_ManualSetCommandCardLimit() { }

	// RVA: 0x1B4AD3C Offset: 0x1B4AD3C VA: 0x1B4AD3C
	public int get_MaxCommandCardLimitCount() { }

	// RVA: 0x1B4AD44 Offset: 0x1B4AD44 VA: 0x1B4AD44
	public int[] get_CommandCardSelectList() { }

	// RVA: 0x1B4AD4C Offset: 0x1B4AD4C VA: 0x1B4AD4C
	public int[] get_CommandCardParam() { }

	// RVA: 0x1B4AD54 Offset: 0x1B4AD54 VA: 0x1B4AD54
	public bool get_IsModifyIconLimitCount() { }

	// RVA: 0x1B4AEE4 Offset: 0x1B4AEE4 VA: 0x1B4AEE4
	public int get_ConvertOverwriteIconLimitCount() { }

	// RVA: 0x1B4AF08 Offset: 0x1B4AF08 VA: 0x1B4AF08
	public int get_IconLimitCount() { }

	// RVA: 0x1B4AF10 Offset: 0x1B4AF10 VA: 0x1B4AF10
	public void set_IconLimitCount(int value) { }

	// RVA: 0x1B4AE24 Offset: 0x1B4AE24 VA: 0x1B4AE24
	public int get_ManualSetIconLimitCount() { }

	// RVA: 0x1B4AF18 Offset: 0x1B4AF18 VA: 0x1B4AF18
	public int get_MaxIconLimitCount() { }

	// RVA: 0x1B4AF20 Offset: 0x1B4AF20 VA: 0x1B4AF20
	public int[] get_IconSelectList() { }

	// RVA: 0x1B4AF28 Offset: 0x1B4AF28 VA: 0x1B4AF28
	public bool get_IsModifyPortraitLimitCount() { }

	// RVA: 0x1B4B0B8 Offset: 0x1B4B0B8 VA: 0x1B4B0B8
	public int get_ConvertOverwritePortraitLimitCount() { }

	// RVA: 0x1B4B114 Offset: 0x1B4B114 VA: 0x1B4B114
	public int get_PortraitLimitCount() { }

	// RVA: 0x1B4B11C Offset: 0x1B4B11C VA: 0x1B4B11C
	public void set_PortraitLimitCount(int value) { }

	// RVA: 0x1B4AFF8 Offset: 0x1B4AFF8 VA: 0x1B4AFF8
	public int get_ManualSetPortraitLimitCount() { }

	// RVA: 0x1B4B124 Offset: 0x1B4B124 VA: 0x1B4B124
	public int get_MaxPortraitLimitCount() { }

	// RVA: 0x1B4B12C Offset: 0x1B4B12C VA: 0x1B4B12C
	public int[] get_PortraitSelectList() { }

	// RVA: 0x1B4B134 Offset: 0x1B4B134 VA: 0x1B4B134
	public int[] get_CommandCodeIdList() { }

	// RVA: 0x1B4B13C Offset: 0x1B4B13C VA: 0x1B4B13C
	public int[] get_CostumeIds() { }

	// RVA: 0x1B4B144 Offset: 0x1B4B144 VA: 0x1B4B144
	public int get_TreasureDeviceSpeedSelect() { }

	// RVA: 0x1B4B160 Offset: 0x1B4B160 VA: 0x1B4B160
	public void set_TreasureDeviceSpeedSelect(int value) { }

	// RVA: 0x1B4B19C Offset: 0x1B4B19C VA: 0x1B4B19C
	public int get_SvtCommonFlag() { }

	// RVA: 0x1B4B1A4 Offset: 0x1B4B1A4 VA: 0x1B4B1A4
	public int get_ChangeBattleVoiceSelect() { }

	// RVA: 0x1B4B1AC Offset: 0x1B4B1AC VA: 0x1B4B1AC
	public void set_ChangeBattleVoiceSelect(int value) { }

	// RVA: 0x1B4B1B4 Offset: 0x1B4B1B4 VA: 0x1B4B1B4
	public int get_ChangeVoiceFlag() { }

	// RVA: 0x1B4B1BC Offset: 0x1B4B1BC VA: 0x1B4B1BC
	public bool get_IsModifySvtCommonFlag() { }

	// RVA: 0x1B4B1D8 Offset: 0x1B4B1D8 VA: 0x1B4B1D8
	public bool get_IsModifyBattleVoice() { }

	// RVA: 0x1B4B1F4 Offset: 0x1B4B1F4 VA: 0x1B4B1F4
	public bool get_IsModifyRandomLimitCountSetting() { }

	// RVA: 0x1B4B214 Offset: 0x1B4B214 VA: 0x1B4B214
	public bool get_IsModifySupportRandomLimitCount() { }

	// RVA: 0x1B4B2B4 Offset: 0x1B4B2B4 VA: 0x1B4B2B4
	public bool get_EnableTdSpeed() { }

	// RVA: 0x1B4B2BC Offset: 0x1B4B2BC VA: 0x1B4B2BC
	public bool get_EnableChangeVoice() { }

	// RVA: 0x1B4B2C4 Offset: 0x1B4B2C4 VA: 0x1B4B2C4
	public bool get_IsDisplayRandomLimitCount() { }

	// RVA: 0x1B4B2CC Offset: 0x1B4B2CC VA: 0x1B4B2CC
	public int get_Level() { }

	// RVA: 0x1B4B314 Offset: 0x1B4B314 VA: 0x1B4B314
	public int get_MaxLevel() { }

	// RVA: 0x1B4B368 Offset: 0x1B4B368 VA: 0x1B4B368
	public int get_Cost() { }

	// RVA: 0x1B4B394 Offset: 0x1B4B394 VA: 0x1B4B394
	public int get_Hp() { }

	// RVA: 0x1B4B3DC Offset: 0x1B4B3DC VA: 0x1B4B3DC
	public int get_Atk() { }

	// RVA: 0x1B4B424 Offset: 0x1B4B424 VA: 0x1B4B424
	public bool GetAdjustMax(out int maxAjustHp, out int maxAjustAtk, out int secondMaxAdjustHp, out int secondMaxAdjustAtk) { }

	// RVA: 0x1B4B45C Offset: 0x1B4B45C VA: 0x1B4B45C
	public int get_AdjustHp() { }

	// RVA: 0x1B4B484 Offset: 0x1B4B484 VA: 0x1B4B484
	public int get_AdjustAtk() { }

	// RVA: 0x1B4B4AC Offset: 0x1B4B4AC VA: 0x1B4B4AC
	public int get_Exp() { }

	// RVA: 0x1B4B4E4 Offset: 0x1B4B4E4 VA: 0x1B4B4E4
	public bool GetExpInfo(out int exp, out int lateExp, out float barExp) { }

	// RVA: 0x1B3F404 Offset: 0x1B3F404 VA: 0x1B3F404
	public StatusRank.Kind get_Power() { }

	// RVA: 0x1B3F430 Offset: 0x1B3F430 VA: 0x1B3F430
	public StatusRank.Kind get_Defense() { }

	// RVA: 0x1B3F45C Offset: 0x1B3F45C VA: 0x1B3F45C
	public StatusRank.Kind get_Agility() { }

	// RVA: 0x1B3F488 Offset: 0x1B3F488 VA: 0x1B3F488
	public StatusRank.Kind get_Magic() { }

	// RVA: 0x1B3F4B4 Offset: 0x1B3F4B4 VA: 0x1B3F4B4
	public StatusRank.Kind get_Luck() { }

	// RVA: 0x1B3F4E0 Offset: 0x1B3F4E0 VA: 0x1B3F4E0
	public StatusRank.Kind get_Np() { }

	// RVA: 0x1B4B504 Offset: 0x1B4B504 VA: 0x1B4B504
	public bool get_IsEquip() { }

	// RVA: 0x1B4B530 Offset: 0x1B4B530 VA: 0x1B4B530
	public long get_EquipTargetId1() { }

	// RVA: 0x1B4B538 Offset: 0x1B4B538 VA: 0x1B4B538
	public UserServantEntity get_EquipUserServant() { }

	// RVA: 0x1B4B540 Offset: 0x1B4B540 VA: 0x1B4B540
	public ServantEntity get_EquipServant() { }

	// RVA: 0x1B4B548 Offset: 0x1B4B548 VA: 0x1B4B548
	public int get_EquipLevel() { }

	// RVA: 0x1B4B578 Offset: 0x1B4B578 VA: 0x1B4B578
	public int get_EquipMaxLevel() { }

	// RVA: 0x1B4B5AC Offset: 0x1B4B5AC VA: 0x1B4B5AC
	public int get_EquipLimitCount() { }

	// RVA: 0x1B4B64C Offset: 0x1B4B64C VA: 0x1B4B64C
	public int get_EquipAtk() { }

	// RVA: 0x1B4B67C Offset: 0x1B4B67C VA: 0x1B4B67C
	public int get_EquipHp() { }

	// RVA: 0x1B4B6AC Offset: 0x1B4B6AC VA: 0x1B4B6AC
	public int get_EquipCost() { }

	// RVA: 0x1B4B6C4 Offset: 0x1B4B6C4 VA: 0x1B4B6C4
	public bool get_IsLock() { }

	// RVA: 0x1B4B6CC Offset: 0x1B4B6CC VA: 0x1B4B6CC
	public bool get_IsModifyLock() { }

	// RVA: 0x1B4B704 Offset: 0x1B4B704 VA: 0x1B4B704
	public bool ChangeLock() { }

	// RVA: 0x1B4B720 Offset: 0x1B4B720 VA: 0x1B4B720
	public bool get_IsChoice() { }

	// RVA: 0x1B4B728 Offset: 0x1B4B728 VA: 0x1B4B728
	public bool get_IsModifyChoice() { }

	// RVA: 0x1B4B760 Offset: 0x1B4B760 VA: 0x1B4B760
	public bool ChangeChoice() { }

	// RVA: 0x1B4B77C Offset: 0x1B4B77C VA: 0x1B4B77C
	public bool get_IsUse() { }

	// RVA: 0x1B3E2E8 Offset: 0x1B3E2E8 VA: 0x1B3E2E8
	public bool get_IsEnableOwnRandomSetting() { }

	// RVA: 0x1B3E2F0 Offset: 0x1B3E2F0 VA: 0x1B3E2F0
	public void set_IsEnableOwnRandomSetting(bool value) { }

	// RVA: 0x1B3E3D4 Offset: 0x1B3E3D4 VA: 0x1B3E3D4
	public bool get_IsEnableSupportRandomSetting() { }

	// RVA: 0x1B3E3DC Offset: 0x1B3E3DC VA: 0x1B3E3DC
	public void set_IsEnableSupportRandomSetting(bool value) { }

	// RVA: 0x1B4B2AC Offset: 0x1B4B2AC VA: 0x1B4B2AC
	public int get_SupportRandomLimitCount() { }

	// RVA: 0x1B4B784 Offset: 0x1B4B784 VA: 0x1B4B784
	public int[] get_SupportRandomLimitCountList() { }

	// RVA: 0x1B4B78C Offset: 0x1B4B78C VA: 0x1B4B78C
	public void SetSupportRandomLimitCountByIndex(int index) { }

	// RVA: 0x1B4B84C Offset: 0x1B4B84C VA: 0x1B4B84C
	public int get_EquipExp() { }

	// RVA: 0x1B4B87C Offset: 0x1B4B87C VA: 0x1B4B87C
	public bool GetEquipExpInfo(out int exp, out int lateExp, out float barExp) { }

	// RVA: 0x1B4B8B0 Offset: 0x1B4B8B0 VA: 0x1B4B8B0
	public void GetEquipSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x1B4B8BC Offset: 0x1B4B8BC VA: 0x1B4B8BC
	public bool IsEnableSkillInfo() { }

	// RVA: 0x1B4B8DC Offset: 0x1B4B8DC VA: 0x1B4B8DC
	public void GetSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x1B4B8E8 Offset: 0x1B4B8E8 VA: 0x1B4B8E8
	public void GetSkillInfo(out SkillInfo[] skillInfoList, int dispLimitCount) { }

	// RVA: 0x1B4B9D0 Offset: 0x1B4B9D0 VA: 0x1B4B9D0
	public bool IsEnablePassiveSkillInfo() { }

	// RVA: 0x1B4B9F0 Offset: 0x1B4B9F0 VA: 0x1B4B9F0
	public void GetPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList) { }

	// RVA: 0x1B4BA0C Offset: 0x1B4BA0C VA: 0x1B4BA0C
	public void GetPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, int dispLimitCount) { }

	// RVA: 0x1B4BBB0 Offset: 0x1B4BBB0 VA: 0x1B4BBB0
	public bool GetNpInfo(out TreasureDvcInfo tdInfo) { }

	// RVA: 0x1B4BBC0 Offset: 0x1B4BBC0 VA: 0x1B4BBC0
	public bool GetNpInfo(out TreasureDvcInfo tdInfo, int dispLimitCount) { }

	// RVA: 0x1B4BCEC Offset: 0x1B4BCEC VA: 0x1B4BCEC
	public bool GetFriendshipInfo(out int rank, out int max, out int late, out float fraction) { }

	// RVA: 0x1B40C58 Offset: 0x1B40C58 VA: 0x1B40C58
	public bool GetVoiceInfo(out string illust, out string voice, out bool isPlayVoice) { }

	// RVA: 0x1B4BEB8 Offset: 0x1B4BEB8 VA: 0x1B4BEB8
	public long get_UserId() { }

	// RVA: 0x1B4BF94 Offset: 0x1B4BF94 VA: 0x1B4BF94
	public bool get_IsMine() { }

	// RVA: 0x1B4BFA4 Offset: 0x1B4BFA4 VA: 0x1B4BFA4
	public bool IsEnableAppendSkillInfo() { }

	// RVA: 0x1B4BFC4 Offset: 0x1B4BFC4 VA: 0x1B4BFC4
	public void GetAppendPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, out bool[] releaseStateList, out int[] lvList) { }

	// RVA: 0x1B4BFF0 Offset: 0x1B4BFF0 VA: 0x1B4BFF0
	public bool UpdateServantComment(int svtId, int imageLimitCount) { }
}

// Namespace: 
private class ServantStatusListViewItem.LimitCountCache // TypeDefIndex: 5741
{
	// Fields
	public int cardLimitCount; // 0x10
	public int dispLimitCount; // 0x14
	public int commandCardLimitCount; // 0x18
	public int iconLimitCount; // 0x1C
	public int portraitLimitCount; // 0x20

	// Methods

	// RVA: 0x1B4A4D8 Offset: 0x1B4A4D8 VA: 0x1B4A4D8
	public void .ctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDraw : MonoBehaviour // TypeDefIndex: 5742
{
	// Fields
	protected ServantStatusListViewItemDraw.DispMode dispMode; // 0x18

	// Methods

	// RVA: 0x1B4C178 Offset: 0x1B4C178 VA: 0x1B4C178
	public void .ctor() { }

	// RVA: 0x1B4C180 Offset: 0x1B4C180 VA: 0x1B4C180 Slot: 4
	public virtual ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x1B4C188 Offset: 0x1B4C188 VA: 0x1B4C188 Slot: 5
	public virtual void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x1B4C190 Offset: 0x1B4C190 VA: 0x1B4C190 Slot: 6
	public virtual void PlayBattle(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C194 Offset: 0x1B4C194 VA: 0x1B4C194 Slot: 7
	public virtual void ModifyCommandCard(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C198 Offset: 0x1B4C198 VA: 0x1B4C198 Slot: 8
	public virtual void ModifyFace(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C19C Offset: 0x1B4C19C VA: 0x1B4C19C Slot: 9
	public virtual void ModifyStatus(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C1A0 Offset: 0x1B4C1A0 VA: 0x1B4C1A0 Slot: 10
	public virtual void ModifyPortrait(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C1A4 Offset: 0x1B4C1A4 VA: 0x1B4C1A4 Slot: 11
	public virtual void ModifyServantQuest(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C1A8 Offset: 0x1B4C1A8 VA: 0x1B4C1A8 Slot: 12
	public virtual void ModifyRandomLimitCountSupport(ServantStatusListViewItem item) { }

	// RVA: 0x1B4C1AC Offset: 0x1B4C1AC VA: 0x1B4C1AC Slot: 13
	public virtual void ModifyRandomLimitCountSetting(ServantStatusListViewItem item) { }
}

// Namespace: 
public enum ServantStatusListViewItemDraw.Kind // TypeDefIndex: 5743
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewItemDraw.Kind NONE = 0;
	public const ServantStatusListViewItemDraw.Kind MAIN = 1;
	public const ServantStatusListViewItemDraw.Kind EQUIP_MAIN = 2;
	public const ServantStatusListViewItemDraw.Kind EQUIP = 3;
	public const ServantStatusListViewItemDraw.Kind SKILL = 4;
	public const ServantStatusListViewItemDraw.Kind CLASS_SKILL = 5;
	public const ServantStatusListViewItemDraw.Kind KIND_0801 = 6;
	public const ServantStatusListViewItemDraw.Kind NP = 7;
	public const ServantStatusListViewItemDraw.Kind COMMAND = 8;
	public const ServantStatusListViewItemDraw.Kind FACE = 9;
	public const ServantStatusListViewItemDraw.Kind FLAVOR_TEXT = 10;
	public const ServantStatusListViewItemDraw.Kind TERMINAL = 11;
	public const ServantStatusListViewItemDraw.Kind EQUIP_SKILL = 12;
	public const ServantStatusListViewItemDraw.Kind PORTRAIT = 13;
	public const ServantStatusListViewItemDraw.Kind COMMAND_CODE_SKILL = 14;
	public const ServantStatusListViewItemDraw.Kind SERVANT_QUEST = 15;
	public const ServantStatusListViewItemDraw.Kind TREASURE_DEVICE_SPEED = 16;
	public const ServantStatusListViewItemDraw.Kind CHANGE_VOICE = 17;
	public const ServantStatusListViewItemDraw.Kind RANDOM_LIMIT_COUNT_SUPPORT = 18;
	public const ServantStatusListViewItemDraw.Kind RANDOM_LIMIT_COUNT_SETTING = 19;
}

// Namespace: 
public enum ServantStatusListViewItemDraw.DispMode // TypeDefIndex: 5744
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewItemDraw.DispMode INVISIBLE = 0;
	public const ServantStatusListViewItemDraw.DispMode INVALID = 1;
	public const ServantStatusListViewItemDraw.DispMode VALID = 2;
	public const ServantStatusListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class ServantStatusListViewItemDrawAppendSkill : ServantStatusListViewItemDraw // TypeDefIndex: 5745
{
	// Fields
	[SerializeField] // RVA: 0xC4FA88 Offset: 0xC4FA88 VA: 0xC4FA88
	protected BoxCollider baseCollider; // 0x20
	[SerializeField] // RVA: 0xC4FA98 Offset: 0xC4FA98 VA: 0xC4FA98
	protected UISprite baseSprite; // 0x28
	[SerializeField] // RVA: 0xC4FAA8 Offset: 0xC4FAA8 VA: 0xC4FAA8
	protected UISprite titleSprite; // 0x30
	[SerializeField] // RVA: 0xC4FAB8 Offset: 0xC4FAB8 VA: 0xC4FAB8
	protected UISprite titleTextSprite; // 0x38
	[SerializeField] // RVA: 0xC4FAC8 Offset: 0xC4FAC8 VA: 0xC4FAC8
	protected UILabel explanationLabel; // 0x40
	[SerializeField] // RVA: 0xC4FAD8 Offset: 0xC4FAD8 VA: 0xC4FAD8
	protected GameObject srcSkillObj; // 0x48
	private List<GameObject> skillList; // 0x50
	protected Vector3 baseSize; // 0x58
	protected Vector3 titleBasePosition; // 0x64
	protected Vector3 skillBasePosition; // 0x70
	private static readonly float SKILL_BASE_POS_Y; // 0x0
	private static readonly int SKILL_BASE_HEIGHT; // 0x4
	private static readonly int ADJUST_HEIGHT; // 0x8

	// Methods

	// RVA: 0x1B4C1B0 Offset: 0x1B4C1B0 VA: 0x1B4C1B0
	public void .ctor() { }

	// RVA: 0x1B4C220 Offset: 0x1B4C220 VA: 0x1B4C220
	protected void Awake() { }

	// RVA: 0x1B4C368 Offset: 0x1B4C368 VA: 0x1B4C368 Slot: 4
	public override ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x1B4C370 Offset: 0x1B4C370 VA: 0x1B4C370 Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x1B4CB80 Offset: 0x1B4CB80 VA: 0x1B4CB80
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDrawButton : ServantStatusListViewItemDrawButtonsBase // TypeDefIndex: 5746
{
	// Fields
	private static readonly int TITLE_LABEL_BASE_WIDTH; // 0x0
	private static readonly int TD_SPEED_EXPLANATION_LABEL_HEIGHT; // 0x4
	private static readonly float TD_SPEED_EXPLANATION_LABEL_POS_Y; // 0x8
	private static readonly int TD_SPEED_BASE_SPRITE_HEIGHT; // 0xC
	private static readonly string[] TD_SPEED_LOCALIZATION_KEYS; // 0x10

	// Methods

	// RVA: 0x1B4CBF4 Offset: 0x1B4CBF4 VA: 0x1B4CBF4
	public void .ctor() { }

	// RVA: 0x1B4CC04 Offset: 0x1B4CC04 VA: 0x1B4CC04
	public static string GetTDSpeedLocalization(int index) { }

	// RVA: 0x1B4CD4C Offset: 0x1B4CD4C VA: 0x1B4CD4C
	protected void Awake() { }

	// RVA: 0x1B4CD50 Offset: 0x1B4CD50 VA: 0x1B4CD50 Slot: 5
	public override void SetItem(ServantStatusListViewItem item, ServantStatusListViewItemDraw.DispMode mode) { }

	// RVA: 0x1B4D5FC Offset: 0x1B4D5FC VA: 0x1B4D5FC Slot: 14
	protected override int Selected(ServantStatusListViewItem item) { }

	// RVA: 0x1B4D670 Offset: 0x1B4D670 VA: 0x1B4D670
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusListViewItemDrawButtonsBase : ServantStatusListViewItemDraw // TypeDefIndex: 5747
{
	// Fields
	[SerializeField] // RVA: 0xC4FAE8 Offset: 0xC4FAE8 VA: 0xC4FAE8
	protected BoxCollider collider; // 0x20
	[SerializeField] // RVA: 0xC4FAF8 Offset: 0xC4FAF8 VA: 0xC4FAF8
	protected GameObject titleBase; // 0x28
	[SerializeField] // RVA: 0xC4FB08 Offset: 0xC4FB08 VA: 0xC4FB08
	protected GameObject buttonBase; // 0x30
	[SerializeField] // RVA: 0xC4FB18 Offset: 0xC4FB18 VA: 0xC4FB18
	protected UISprite baseSprite; // 0x38
	[SerializeField] // RVA: 0xC4FB28 Offset: 0xC4FB28 VA: 0xC4FB28
	protected UILabel explanationLabel; // 0x40
	[SerializeField] // RVA: 0xC4FB38 Offset: 0xC4FB38 VA: 0xC4FB38
	protected UIRangeLabel[] tdSpeedRangeLabelList; // 0x48
	[SerializeField] // RVA: 0xC4FB48 Offset: 0xC4FB48 VA: 0xC4FB48
	protected UICommonButton[] tdSpeedButtonList; // 0x50
	[SerializeField] // RVA: 0xC4FB58 Offset: 0xC4FB58 VA: 0xC4FB58
	protected UISprite[] tdSpeedButtonSpriteList; // 0x58
	[SerializeField] // RVA: 0xC4FB68 Offset: 0xC4FB68 VA: 0xC4FB68
	protected GameObject clickEventObject; // 0x60
	[SerializeField] // RVA: 0xC4FB78 Offset: 0xC4FB78 VA: 0xC4FB78
	protected UISprite titleSprite; // 0x68
	private int kind; // 0x70

	// Methods

	// RVA: 0x1B4CBFC Offset: 0x1B4CBFC VA: 0x1B4CBFC
	public void .ctor() { }

	// RVA: 0x1B4D81C Offset: 0x1B4D81C VA: 0x1B4D81C Slot: 4
	public override ServantStatusListViewItemDraw.Kind GetKind() { }

