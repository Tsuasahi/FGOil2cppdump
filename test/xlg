// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239K1Curve : AbstractF2mCurve // TypeDefIndex: 5095
{
	// Fields
	private const int SecT239K1_DEFAULT_COORDS = 6;
	protected readonly SecT239K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2628F3C Offset: 0x2628F3C VA: 0x2628F3C
	public void .ctor() { }

	// RVA: 0x26290A8 Offset: 0x26290A8 VA: 0x26290A8 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2629100 Offset: 0x2629100 VA: 0x2629100 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x262910C Offset: 0x262910C VA: 0x262910C Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2629168 Offset: 0x2629168 VA: 0x2629168 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2629170 Offset: 0x2629170 VA: 0x2629170 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2629178 Offset: 0x2629178 VA: 0x2629178 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26291D8 Offset: 0x26291D8 VA: 0x26291D8 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2629338 Offset: 0x2629338 VA: 0x2629338 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26293D8 Offset: 0x26293D8 VA: 0x26293D8 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x26293E0 Offset: 0x26293E0 VA: 0x26293E0 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x26293E8 Offset: 0x26293E8 VA: 0x26293E8 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x26293F0 Offset: 0x26293F0 VA: 0x26293F0 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x26293F8 Offset: 0x26293F8 VA: 0x26293F8 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2629400 Offset: 0x2629400 VA: 0x2629400 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT239K1Point : AbstractF2mPoint // TypeDefIndex: 5096
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x26290A0 Offset: 0x26290A0 VA: 0x26290A0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2629260 Offset: 0x2629260 VA: 0x2629260
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26293CC Offset: 0x26293CC VA: 0x26293CC
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2629408 Offset: 0x2629408 VA: 0x2629408 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x26294A8 Offset: 0x26294A8 VA: 0x26294A8 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x26295E8 Offset: 0x26295E8 VA: 0x26295E8 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2629684 Offset: 0x2629684 VA: 0x2629684 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x2629FBC Offset: 0x2629FBC VA: 0x2629FBC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x262A420 Offset: 0x262A420 VA: 0x262A420 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x262AA74 Offset: 0x262AA74 VA: 0x262AA74 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283Field // TypeDefIndex: 5097
{
	// Fields
	private const ulong M27 = 134217727;
	private const ulong M57 = 144115188075855871;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x262AC30 Offset: 0x262AC30 VA: 0x262AC30
	public void .ctor() { }

	// RVA: 0x262AC38 Offset: 0x262AC38 VA: 0x262AC38
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x262AE74 Offset: 0x262AE74 VA: 0x262AE74
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x262B240 Offset: 0x262B240 VA: 0x262B240
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x262B3B8 Offset: 0x262B3B8 VA: 0x262B3B8
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x262B504 Offset: 0x262B504 VA: 0x262B504
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x262B7C0 Offset: 0x262B7C0 VA: 0x262B7C0
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x262C92C Offset: 0x262C92C VA: 0x262C92C
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x262C644 Offset: 0x262C644 VA: 0x262C644
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x262B43C Offset: 0x262B43C VA: 0x262B43C
	public static void Reduce37(ulong[] z, int zOff) { }

	// RVA: 0x262C9C8 Offset: 0x262C9C8 VA: 0x262C9C8
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x262B72C Offset: 0x262B72C VA: 0x262B72C
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x262CD3C Offset: 0x262CD3C VA: 0x262CD3C
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x262B858 Offset: 0x262B858 VA: 0x262B858
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x262CDD4 Offset: 0x262CDD4 VA: 0x262CDD4
	public static uint Trace(ulong[] x) { }

	// RVA: 0x262CE3C Offset: 0x262CE3C VA: 0x262CE3C
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x262D150 Offset: 0x262D150 VA: 0x262D150
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x262B944 Offset: 0x262B944 VA: 0x262B944
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x262D2F4 Offset: 0x262D2F4 VA: 0x262D2F4
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x262CC54 Offset: 0x262CC54 VA: 0x262CC54
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x262D6A8 Offset: 0x262D6A8 VA: 0x262D6A8
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283FieldElement : ECFieldElement // TypeDefIndex: 5098
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x262D724 Offset: 0x262D724 VA: 0x262D724
	public void .ctor(BigInteger x) { }

	// RVA: 0x262D820 Offset: 0x262D820 VA: 0x262D820
	public void .ctor() { }

	// RVA: 0x262D850 Offset: 0x262D850 VA: 0x262D850
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x262D87C Offset: 0x262D87C VA: 0x262D87C Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x262D888 Offset: 0x262D888 VA: 0x262D888 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x262D894 Offset: 0x262D894 VA: 0x262D894 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x262D8DC Offset: 0x262D8DC VA: 0x262D8DC Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x262D8E8 Offset: 0x262D8E8 VA: 0x262D8E8 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x262D930 Offset: 0x262D930 VA: 0x262D930 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x262D938 Offset: 0x262D938 VA: 0x262D938 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x262DADC Offset: 0x262DADC VA: 0x262DADC Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x262DB80 Offset: 0x262DB80 VA: 0x262DB80 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x262DB8C Offset: 0x262DB8C VA: 0x262DB8C Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x262DD30 Offset: 0x262DD30 VA: 0x262DD30 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262DD40 Offset: 0x262DD40 VA: 0x262DD40 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262E0D4 Offset: 0x262E0D4 VA: 0x262E0D4 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x262E124 Offset: 0x262E124 VA: 0x262E124 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x262E128 Offset: 0x262E128 VA: 0x262E128 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x262E1CC Offset: 0x262E1CC VA: 0x262E1CC Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262E1DC Offset: 0x262E1DC VA: 0x262E1DC Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262E488 Offset: 0x262E488 VA: 0x262E488 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x262E544 Offset: 0x262E544 VA: 0x262E544 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x262E5E8 Offset: 0x262E5E8 VA: 0x262E5E8 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x262E68C Offset: 0x262E68C VA: 0x262E68C Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x262E694 Offset: 0x262E694 VA: 0x262E694 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x262E69C Offset: 0x262E69C VA: 0x262E69C Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x262E6A4 Offset: 0x262E6A4 VA: 0x262E6A4 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x262E6AC Offset: 0x262E6AC VA: 0x262E6AC Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x262E6B4 Offset: 0x262E6B4 VA: 0x262E6B4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x262E750 Offset: 0x262E750 VA: 0x262E750 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x262E7EC Offset: 0x262E7EC VA: 0x262E7EC Slot: 32
	public virtual bool Equals(SecT283FieldElement other) { }

	// RVA: 0x262E818 Offset: 0x262E818 VA: 0x262E818 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283K1Curve : AbstractF2mCurve // TypeDefIndex: 5099
{
	// Fields
	private const int SecT283K1_DEFAULT_COORDS = 6;
	protected readonly SecT283K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x262E848 Offset: 0x262E848 VA: 0x262E848
	public void .ctor() { }

	// RVA: 0x262E9B4 Offset: 0x262E9B4 VA: 0x262E9B4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x262EA0C Offset: 0x262EA0C VA: 0x262EA0C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x262EA18 Offset: 0x262EA18 VA: 0x262EA18 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x262EA74 Offset: 0x262EA74 VA: 0x262EA74 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x262EA7C Offset: 0x262EA7C VA: 0x262EA7C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x262EA84 Offset: 0x262EA84 VA: 0x262EA84 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x262EAE4 Offset: 0x262EAE4 VA: 0x262EAE4 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x262EC44 Offset: 0x262EC44 VA: 0x262EC44 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262ECE4 Offset: 0x262ECE4 VA: 0x262ECE4 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x262ECEC Offset: 0x262ECEC VA: 0x262ECEC Slot: 39
	public virtual int get_M() { }

	// RVA: 0x262ECF4 Offset: 0x262ECF4 VA: 0x262ECF4 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x262ECFC Offset: 0x262ECFC VA: 0x262ECFC Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x262ED04 Offset: 0x262ED04 VA: 0x262ED04 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x262ED0C Offset: 0x262ED0C VA: 0x262ED0C Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283K1Point : AbstractF2mPoint // TypeDefIndex: 5100
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x262E9AC Offset: 0x262E9AC VA: 0x262E9AC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x262EB6C Offset: 0x262EB6C VA: 0x262EB6C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x262ECD8 Offset: 0x262ECD8 VA: 0x262ECD8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x262ED14 Offset: 0x262ED14 VA: 0x262ED14 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x262EDB4 Offset: 0x262EDB4 VA: 0x262EDB4 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x262EEF4 Offset: 0x262EEF4 VA: 0x262EEF4 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x262EF90 Offset: 0x262EF90 VA: 0x262EF90 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x262F8C8 Offset: 0x262F8C8 VA: 0x262F8C8 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x262FD2C Offset: 0x262FD2C VA: 0x262FD2C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2630380 Offset: 0x2630380 VA: 0x2630380 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283R1Curve : AbstractF2mCurve // TypeDefIndex: 5101
{
	// Fields
	private const int SecT283R1_DEFAULT_COORDS = 6;
	protected readonly SecT283R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x263053C Offset: 0x263053C VA: 0x263053C
	public void .ctor() { }

	// RVA: 0x26306D8 Offset: 0x26306D8 VA: 0x26306D8 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2630730 Offset: 0x2630730 VA: 0x2630730 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x263073C Offset: 0x263073C VA: 0x263073C Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2630744 Offset: 0x2630744 VA: 0x2630744 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x263074C Offset: 0x263074C VA: 0x263074C Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x26307AC Offset: 0x26307AC VA: 0x26307AC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x263090C Offset: 0x263090C VA: 0x263090C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26309AC Offset: 0x26309AC VA: 0x26309AC Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x26309B4 Offset: 0x26309B4 VA: 0x26309B4 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x26309BC Offset: 0x26309BC VA: 0x26309BC Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x26309C4 Offset: 0x26309C4 VA: 0x26309C4 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x26309CC Offset: 0x26309CC VA: 0x26309CC Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x26309D4 Offset: 0x26309D4 VA: 0x26309D4 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283R1Point : AbstractF2mPoint // TypeDefIndex: 5102
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x26306D0 Offset: 0x26306D0 VA: 0x26306D0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2630834 Offset: 0x2630834 VA: 0x2630834
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26309A0 Offset: 0x26309A0 VA: 0x26309A0
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x26309DC Offset: 0x26309DC VA: 0x26309DC Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2630A7C Offset: 0x2630A7C VA: 0x2630A7C Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2630BBC Offset: 0x2630BBC VA: 0x2630BBC Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2630C58 Offset: 0x2630C58 VA: 0x2630C58 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x26315EC Offset: 0x26315EC VA: 0x26315EC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x26319FC Offset: 0x26319FC VA: 0x26319FC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2632090 Offset: 0x2632090 VA: 0x2632090 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409Field // TypeDefIndex: 5103
{
	// Fields
	private const ulong M25 = 33554431;
	private const ulong M59 = 576460752303423487;

	// Methods

	// RVA: 0x263224C Offset: 0x263224C VA: 0x263224C
	public void .ctor() { }

	// RVA: 0x2632254 Offset: 0x2632254 VA: 0x2632254
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2632558 Offset: 0x2632558 VA: 0x2632558
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x2632640 Offset: 0x2632640 VA: 0x2632640
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x2632838 Offset: 0x2632838 VA: 0x2632838
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2632960 Offset: 0x2632960 VA: 0x2632960
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x2632C38 Offset: 0x2632C38 VA: 0x2632C38
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x2633168 Offset: 0x2633168 VA: 0x2633168
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2632D78 Offset: 0x2632D78 VA: 0x2632D78
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x2632868 Offset: 0x2632868 VA: 0x2632868
	public static void Reduce39(ulong[] z, int zOff) { }

	// RVA: 0x26331BC Offset: 0x26331BC VA: 0x26331BC
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x2632B68 Offset: 0x2632B68 VA: 0x2632B68
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x26335AC Offset: 0x26335AC VA: 0x26335AC
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x2632BB4 Offset: 0x2632BB4 VA: 0x2632BB4
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x26335FC Offset: 0x26335FC VA: 0x26335FC
	public static uint Trace(ulong[] x) { }

	// RVA: 0x2633640 Offset: 0x2633640 VA: 0x2633640
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x2633AA4 Offset: 0x2633AA4 VA: 0x2633AA4
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x2632C88 Offset: 0x2632C88 VA: 0x2632C88
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2633CE0 Offset: 0x2633CE0 VA: 0x2633CE0
	protected static void ImplMulwAcc(ulong[] xs, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x26334C4 Offset: 0x26334C4 VA: 0x26334C4
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409FieldElement : ECFieldElement // TypeDefIndex: 5104
{
	// Fields
	protected ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x26340DC Offset: 0x26340DC VA: 0x26340DC
	public void .ctor(BigInteger x) { }

	// RVA: 0x26341C8 Offset: 0x26341C8 VA: 0x26341C8
	public void .ctor() { }

	// RVA: 0x26341F8 Offset: 0x26341F8 VA: 0x26341F8
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2634224 Offset: 0x2634224 VA: 0x2634224 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2634230 Offset: 0x2634230 VA: 0x2634230 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x263423C Offset: 0x263423C VA: 0x263423C Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2634284 Offset: 0x2634284 VA: 0x2634284 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x2634290 Offset: 0x2634290 VA: 0x2634290 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x26342D8 Offset: 0x26342D8 VA: 0x26342D8 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x26342E0 Offset: 0x26342E0 VA: 0x26342E0 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2634460 Offset: 0x2634460 VA: 0x2634460 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x26344E0 Offset: 0x26344E0 VA: 0x26344E0 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x26344EC Offset: 0x26344EC VA: 0x26344EC Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x263466C Offset: 0x263466C VA: 0x263466C Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x263467C Offset: 0x263467C VA: 0x263467C Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26349EC Offset: 0x26349EC VA: 0x26349EC Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x2634A3C Offset: 0x2634A3C VA: 0x2634A3C Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x2634A40 Offset: 0x2634A40 VA: 0x2634A40 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2634AC0 Offset: 0x2634AC0 VA: 0x2634AC0 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2634AD0 Offset: 0x2634AD0 VA: 0x2634AD0 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2634D58 Offset: 0x2634D58 VA: 0x2634D58 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2634DF0 Offset: 0x2634DF0 VA: 0x2634DF0 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2634E70 Offset: 0x2634E70 VA: 0x2634E70 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2634EF0 Offset: 0x2634EF0 VA: 0x2634EF0 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2634EF8 Offset: 0x2634EF8 VA: 0x2634EF8 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x2634F00 Offset: 0x2634F00 VA: 0x2634F00 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2634F08 Offset: 0x2634F08 VA: 0x2634F08 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x2634F10 Offset: 0x2634F10 VA: 0x2634F10 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2634F18 Offset: 0x2634F18 VA: 0x2634F18 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2634FB4 Offset: 0x2634FB4 VA: 0x2634FB4 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2635050 Offset: 0x2635050 VA: 0x2635050 Slot: 32
	public virtual bool Equals(SecT409FieldElement other) { }

	// RVA: 0x263507C Offset: 0x263507C VA: 0x263507C Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409K1Curve : AbstractF2mCurve // TypeDefIndex: 5105
{
	// Fields
	private const int SecT409K1_DEFAULT_COORDS = 6;
	protected readonly SecT409K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x26350AC Offset: 0x26350AC VA: 0x26350AC
	public void .ctor() { }

	// RVA: 0x2635218 Offset: 0x2635218 VA: 0x2635218 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2635270 Offset: 0x2635270 VA: 0x2635270 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x263527C Offset: 0x263527C VA: 0x263527C Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x26352D8 Offset: 0x26352D8 VA: 0x26352D8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x26352E0 Offset: 0x26352E0 VA: 0x26352E0 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x26352E8 Offset: 0x26352E8 VA: 0x26352E8 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2635348 Offset: 0x2635348 VA: 0x2635348 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x26354A8 Offset: 0x26354A8 VA: 0x26354A8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2635548 Offset: 0x2635548 VA: 0x2635548 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2635550 Offset: 0x2635550 VA: 0x2635550 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2635558 Offset: 0x2635558 VA: 0x2635558 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2635560 Offset: 0x2635560 VA: 0x2635560 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2635568 Offset: 0x2635568 VA: 0x2635568 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2635570 Offset: 0x2635570 VA: 0x2635570 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409K1Point : AbstractF2mPoint // TypeDefIndex: 5106
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x2635210 Offset: 0x2635210 VA: 0x2635210
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x26353D0 Offset: 0x26353D0 VA: 0x26353D0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x263553C Offset: 0x263553C VA: 0x263553C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2635578 Offset: 0x2635578 VA: 0x2635578 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2635618 Offset: 0x2635618 VA: 0x2635618 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2635758 Offset: 0x2635758 VA: 0x2635758 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x26357F4 Offset: 0x26357F4 VA: 0x26357F4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x263612C Offset: 0x263612C VA: 0x263612C Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2636590 Offset: 0x2636590 VA: 0x2636590 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x2636BE4 Offset: 0x2636BE4 VA: 0x2636BE4 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409R1Curve : AbstractF2mCurve // TypeDefIndex: 5107
{
	// Fields
	private const int SecT409R1_DEFAULT_COORDS = 6;
	protected readonly SecT409R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x21FAD78 Offset: 0x21FAD78 VA: 0x21FAD78
	public void .ctor() { }

	// RVA: 0x21FAF14 Offset: 0x21FAF14 VA: 0x21FAF14 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x21FAF6C Offset: 0x21FAF6C VA: 0x21FAF6C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x21FAF78 Offset: 0x21FAF78 VA: 0x21FAF78 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x21FAF80 Offset: 0x21FAF80 VA: 0x21FAF80 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x21FAF88 Offset: 0x21FAF88 VA: 0x21FAF88 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x21FAFEC Offset: 0x21FAFEC VA: 0x21FAFEC Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x21FB14C Offset: 0x21FB14C VA: 0x21FB14C Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x21FB1EC Offset: 0x21FB1EC VA: 0x21FB1EC Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x21FB1F4 Offset: 0x21FB1F4 VA: 0x21FB1F4 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x21FB1FC Offset: 0x21FB1FC VA: 0x21FB1FC Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x21FB204 Offset: 0x21FB204 VA: 0x21FB204 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x21FB20C Offset: 0x21FB20C VA: 0x21FB20C Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x21FB214 Offset: 0x21FB214 VA: 0x21FB214 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409R1Point : AbstractF2mPoint // TypeDefIndex: 5108
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x21FAF0C Offset: 0x21FAF0C VA: 0x21FAF0C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x21FB074 Offset: 0x21FB074 VA: 0x21FB074
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x21FB1E0 Offset: 0x21FB1E0 VA: 0x21FB1E0
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x21FB21C Offset: 0x21FB21C VA: 0x21FB21C Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x21FB2BC Offset: 0x21FB2BC VA: 0x21FB2BC Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x21FB414 Offset: 0x21FB414 VA: 0x21FB414 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x21FB4A4 Offset: 0x21FB4A4 VA: 0x21FB4A4 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x21FBD90 Offset: 0x21FBD90 VA: 0x21FBD90 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x21FC160 Offset: 0x21FC160 VA: 0x21FC160 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x21FC754 Offset: 0x21FC754 VA: 0x21FC754 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571Field // TypeDefIndex: 5109
{
	// Fields
	private const ulong M59 = 576460752303423487;
	private const ulong RM = 17256631552825064414;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x21FC8D8 Offset: 0x21FC8D8 VA: 0x21FC8D8
	public void .ctor() { }

	// RVA: 0x21FC8E0 Offset: 0x21FC8E0 VA: 0x21FC8E0
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x21FC9C8 Offset: 0x21FC9C8 VA: 0x21FC9C8
	private static void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff) { }

	// RVA: 0x21FCAD4 Offset: 0x21FCAD4 VA: 0x21FCAD4
	private static void AddBothTo(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff) { }

	// RVA: 0x21FCBF8 Offset: 0x21FCBF8 VA: 0x21FCBF8
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x21FCCE0 Offset: 0x21FCCE0 VA: 0x21FCCE0
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x21FCDC4 Offset: 0x21FCDC4 VA: 0x21FCDC4
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x21FCF10 Offset: 0x21FCF10 VA: 0x21FCF10
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x21FD204 Offset: 0x21FD204 VA: 0x21FD204
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x21FD8C8 Offset: 0x21FD8C8 VA: 0x21FD8C8
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x21FD65C Offset: 0x21FD65C VA: 0x21FD65C
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x21FCE48 Offset: 0x21FCE48 VA: 0x21FCE48
	public static void Reduce5(ulong[] z, int zOff) { }

	// RVA: 0x21FD964 Offset: 0x21FD964 VA: 0x21FD964
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x21FD174 Offset: 0x21FD174 VA: 0x21FD174
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x21FDC14 Offset: 0x21FDC14 VA: 0x21FDC14
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x21FD29C Offset: 0x21FD29C VA: 0x21FD29C
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x21FDCA8 Offset: 0x21FDCA8 VA: 0x21FDCA8
	public static uint Trace(ulong[] x) { }

	// RVA: 0x21FD384 Offset: 0x21FD384 VA: 0x21FD384
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x21FDD48 Offset: 0x21FDD48 VA: 0x21FDD48
	protected static void ImplMulwAcc(ulong[] xs, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x21FDB8C Offset: 0x21FDB8C VA: 0x21FDB8C
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x21FE048 Offset: 0x21FE048 VA: 0x21FE048
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571FieldElement : ECFieldElement // TypeDefIndex: 5110
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x21FE0C4 Offset: 0x21FE0C4 VA: 0x21FE0C4
	public void .ctor(BigInteger x) { }

	// RVA: 0x21FE1C8 Offset: 0x21FE1C8 VA: 0x21FE1C8
	public void .ctor() { }

	// RVA: 0x21FE1F8 Offset: 0x21FE1F8 VA: 0x21FE1F8
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x21FE224 Offset: 0x21FE224 VA: 0x21FE224 Slot: 17
	public override bool get_IsOne() { }

