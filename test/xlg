	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x27169FC Offset: 0x27169FC VA: 0x27169FC
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x2716B74 Offset: 0x2716B74 VA: 0x2716B74
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x2716CC0 Offset: 0x2716CC0 VA: 0x2716CC0
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x2716F7C Offset: 0x2716F7C VA: 0x2716F7C
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x27180E8 Offset: 0x27180E8 VA: 0x27180E8
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2717E00 Offset: 0x2717E00 VA: 0x2717E00
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x2716BF8 Offset: 0x2716BF8 VA: 0x2716BF8
	public static void Reduce37(ulong[] z, int zOff) { }

	// RVA: 0x2718184 Offset: 0x2718184 VA: 0x2718184
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x2716EE8 Offset: 0x2716EE8 VA: 0x2716EE8
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x27184F8 Offset: 0x27184F8 VA: 0x27184F8
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x2717014 Offset: 0x2717014 VA: 0x2717014
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x2718590 Offset: 0x2718590 VA: 0x2718590
	public static uint Trace(ulong[] x) { }

	// RVA: 0x27185F8 Offset: 0x27185F8 VA: 0x27185F8
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x271890C Offset: 0x271890C VA: 0x271890C
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x2717100 Offset: 0x2717100 VA: 0x2717100
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x2718AB0 Offset: 0x2718AB0 VA: 0x2718AB0
	protected static void ImplMulw(ulong x, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x2718410 Offset: 0x2718410 VA: 0x2718410
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x2718E64 Offset: 0x2718E64 VA: 0x2718E64
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283FieldElement : ECFieldElement // TypeDefIndex: 5098
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2718EE0 Offset: 0x2718EE0 VA: 0x2718EE0
	public void .ctor(BigInteger x) { }

	// RVA: 0x2718FDC Offset: 0x2718FDC VA: 0x2718FDC
	public void .ctor() { }

	// RVA: 0x271900C Offset: 0x271900C VA: 0x271900C
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x2719038 Offset: 0x2719038 VA: 0x2719038 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x2719044 Offset: 0x2719044 VA: 0x2719044 Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x2719050 Offset: 0x2719050 VA: 0x2719050 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x2719098 Offset: 0x2719098 VA: 0x2719098 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x27190A4 Offset: 0x27190A4 VA: 0x27190A4 Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x27190EC Offset: 0x27190EC VA: 0x27190EC Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x27190F4 Offset: 0x27190F4 VA: 0x27190F4 Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x2719298 Offset: 0x2719298 VA: 0x2719298 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x271933C Offset: 0x271933C VA: 0x271933C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x2719348 Offset: 0x2719348 VA: 0x2719348 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x27194EC Offset: 0x27194EC VA: 0x27194EC Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27194FC Offset: 0x27194FC VA: 0x27194FC Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2719890 Offset: 0x2719890 VA: 0x2719890 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x27198E0 Offset: 0x27198E0 VA: 0x27198E0 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x27198E4 Offset: 0x27198E4 VA: 0x27198E4 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x2719988 Offset: 0x2719988 VA: 0x2719988 Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2719998 Offset: 0x2719998 VA: 0x2719998 Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2719C44 Offset: 0x2719C44 VA: 0x2719C44 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x2719D00 Offset: 0x2719D00 VA: 0x2719D00 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x2719DA4 Offset: 0x2719DA4 VA: 0x2719DA4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x2719E48 Offset: 0x2719E48 VA: 0x2719E48 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x2719E50 Offset: 0x2719E50 VA: 0x2719E50 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x2719E58 Offset: 0x2719E58 VA: 0x2719E58 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x2719E60 Offset: 0x2719E60 VA: 0x2719E60 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x2719E68 Offset: 0x2719E68 VA: 0x2719E68 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x2719E70 Offset: 0x2719E70 VA: 0x2719E70 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2719F0C Offset: 0x2719F0C VA: 0x2719F0C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x2719FA8 Offset: 0x2719FA8 VA: 0x2719FA8 Slot: 32
	public virtual bool Equals(SecT283FieldElement other) { }

	// RVA: 0x2719FD4 Offset: 0x2719FD4 VA: 0x2719FD4 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283K1Curve : AbstractF2mCurve // TypeDefIndex: 5099
{
	// Fields
	private const int SecT283K1_DEFAULT_COORDS = 6;
	protected readonly SecT283K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x271A004 Offset: 0x271A004 VA: 0x271A004
	public void .ctor() { }

	// RVA: 0x271A170 Offset: 0x271A170 VA: 0x271A170 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x271A1C8 Offset: 0x271A1C8 VA: 0x271A1C8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x271A1D4 Offset: 0x271A1D4 VA: 0x271A1D4 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x271A230 Offset: 0x271A230 VA: 0x271A230 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x271A238 Offset: 0x271A238 VA: 0x271A238 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x271A240 Offset: 0x271A240 VA: 0x271A240 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x271A2A0 Offset: 0x271A2A0 VA: 0x271A2A0 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x271A400 Offset: 0x271A400 VA: 0x271A400 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x271A4A0 Offset: 0x271A4A0 VA: 0x271A4A0 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x271A4A8 Offset: 0x271A4A8 VA: 0x271A4A8 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x271A4B0 Offset: 0x271A4B0 VA: 0x271A4B0 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x271A4B8 Offset: 0x271A4B8 VA: 0x271A4B8 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x271A4C0 Offset: 0x271A4C0 VA: 0x271A4C0 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x271A4C8 Offset: 0x271A4C8 VA: 0x271A4C8 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283K1Point : AbstractF2mPoint // TypeDefIndex: 5100
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x271A168 Offset: 0x271A168 VA: 0x271A168
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x271A328 Offset: 0x271A328 VA: 0x271A328
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x271A494 Offset: 0x271A494 VA: 0x271A494
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x271A4D0 Offset: 0x271A4D0 VA: 0x271A4D0 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x271A570 Offset: 0x271A570 VA: 0x271A570 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x271A6B0 Offset: 0x271A6B0 VA: 0x271A6B0 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x271A74C Offset: 0x271A74C VA: 0x271A74C Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x271B084 Offset: 0x271B084 VA: 0x271B084 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x271B4E8 Offset: 0x271B4E8 VA: 0x271B4E8 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x271BB3C Offset: 0x271BB3C VA: 0x271BB3C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283R1Curve : AbstractF2mCurve // TypeDefIndex: 5101
{
	// Fields
	private const int SecT283R1_DEFAULT_COORDS = 6;
	protected readonly SecT283R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x271BCF8 Offset: 0x271BCF8 VA: 0x271BCF8
	public void .ctor() { }

	// RVA: 0x271BE94 Offset: 0x271BE94 VA: 0x271BE94 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x271BEEC Offset: 0x271BEEC VA: 0x271BEEC Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x271BEF8 Offset: 0x271BEF8 VA: 0x271BEF8 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x271BF00 Offset: 0x271BF00 VA: 0x271BF00 Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x271BF08 Offset: 0x271BF08 VA: 0x271BF08 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x271BF68 Offset: 0x271BF68 VA: 0x271BF68 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x271C0C8 Offset: 0x271C0C8 VA: 0x271C0C8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x271C168 Offset: 0x271C168 VA: 0x271C168 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x271C170 Offset: 0x271C170 VA: 0x271C170 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x271C178 Offset: 0x271C178 VA: 0x271C178 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x271C180 Offset: 0x271C180 VA: 0x271C180 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x271C188 Offset: 0x271C188 VA: 0x271C188 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x271C190 Offset: 0x271C190 VA: 0x271C190 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT283R1Point : AbstractF2mPoint // TypeDefIndex: 5102
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x271BE8C Offset: 0x271BE8C VA: 0x271BE8C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x271BFF0 Offset: 0x271BFF0 VA: 0x271BFF0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x271C15C Offset: 0x271C15C VA: 0x271C15C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x271C198 Offset: 0x271C198 VA: 0x271C198 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x271C238 Offset: 0x271C238 VA: 0x271C238 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x271C378 Offset: 0x271C378 VA: 0x271C378 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x271C414 Offset: 0x271C414 VA: 0x271C414 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x271CDA8 Offset: 0x271CDA8 VA: 0x271CDA8 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x271D1B8 Offset: 0x271D1B8 VA: 0x271D1B8 Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x271D84C Offset: 0x271D84C VA: 0x271D84C Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409Field // TypeDefIndex: 5103
{
	// Fields
	private const ulong M25 = 33554431;
	private const ulong M59 = 576460752303423487;

	// Methods

	// RVA: 0x271DA08 Offset: 0x271DA08 VA: 0x271DA08
	public void .ctor() { }

	// RVA: 0x271DA10 Offset: 0x271DA10 VA: 0x271DA10
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x271DD14 Offset: 0x271DD14 VA: 0x271DD14
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x271DDFC Offset: 0x271DDFC VA: 0x271DDFC
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x271DFF4 Offset: 0x271DFF4 VA: 0x271DFF4
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x271E11C Offset: 0x271E11C VA: 0x271E11C
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x271E3F4 Offset: 0x271E3F4 VA: 0x271E3F4
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x271E924 Offset: 0x271E924 VA: 0x271E924
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x271E534 Offset: 0x271E534 VA: 0x271E534
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x271E024 Offset: 0x271E024 VA: 0x271E024
	public static void Reduce39(ulong[] z, int zOff) { }

	// RVA: 0x271E978 Offset: 0x271E978 VA: 0x271E978
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x271E324 Offset: 0x271E324 VA: 0x271E324
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x271ED68 Offset: 0x271ED68 VA: 0x271ED68
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x271E370 Offset: 0x271E370 VA: 0x271E370
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x271EDB8 Offset: 0x271EDB8 VA: 0x271EDB8
	public static uint Trace(ulong[] x) { }

	// RVA: 0x271EDFC Offset: 0x271EDFC VA: 0x271EDFC
	protected static void ImplCompactExt(ulong[] zz) { }

	// RVA: 0x271F260 Offset: 0x271F260 VA: 0x271F260
	protected static void ImplExpand(ulong[] x, ulong[] z) { }

	// RVA: 0x271E444 Offset: 0x271E444 VA: 0x271E444
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x271F49C Offset: 0x271F49C VA: 0x271F49C
	protected static void ImplMulwAcc(ulong[] xs, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x271EC80 Offset: 0x271EC80 VA: 0x271EC80
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409FieldElement : ECFieldElement // TypeDefIndex: 5104
{
	// Fields
	protected ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x271F898 Offset: 0x271F898 VA: 0x271F898
	public void .ctor(BigInteger x) { }

	// RVA: 0x271F984 Offset: 0x271F984 VA: 0x271F984
	public void .ctor() { }

	// RVA: 0x271F9B4 Offset: 0x271F9B4 VA: 0x271F9B4
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x271F9E0 Offset: 0x271F9E0 VA: 0x271F9E0 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x271F9EC Offset: 0x271F9EC VA: 0x271F9EC Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x271F9F8 Offset: 0x271F9F8 VA: 0x271F9F8 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x271FA40 Offset: 0x271FA40 VA: 0x271FA40 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x271FA4C Offset: 0x271FA4C VA: 0x271FA4C Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x271FA94 Offset: 0x271FA94 VA: 0x271FA94 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x271FA9C Offset: 0x271FA9C VA: 0x271FA9C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x271FC1C Offset: 0x271FC1C VA: 0x271FC1C Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x271FC9C Offset: 0x271FC9C VA: 0x271FC9C Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x271FCA8 Offset: 0x271FCA8 VA: 0x271FCA8 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x271FE28 Offset: 0x271FE28 VA: 0x271FE28 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x271FE38 Offset: 0x271FE38 VA: 0x271FE38 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x27201A8 Offset: 0x27201A8 VA: 0x27201A8 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x27201F8 Offset: 0x27201F8 VA: 0x27201F8 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x27201FC Offset: 0x27201FC VA: 0x27201FC Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x272027C Offset: 0x272027C VA: 0x272027C Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x272028C Offset: 0x272028C VA: 0x272028C Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2720514 Offset: 0x2720514 VA: 0x2720514 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x27205AC Offset: 0x27205AC VA: 0x27205AC Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x272062C Offset: 0x272062C VA: 0x272062C Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x27206AC Offset: 0x27206AC VA: 0x27206AC Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x27206B4 Offset: 0x27206B4 VA: 0x27206B4 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x27206BC Offset: 0x27206BC VA: 0x27206BC Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x27206C4 Offset: 0x27206C4 VA: 0x27206C4 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x27206CC Offset: 0x27206CC VA: 0x27206CC Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x27206D4 Offset: 0x27206D4 VA: 0x27206D4 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x2720770 Offset: 0x2720770 VA: 0x2720770 Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x272080C Offset: 0x272080C VA: 0x272080C Slot: 32
	public virtual bool Equals(SecT409FieldElement other) { }

	// RVA: 0x2720838 Offset: 0x2720838 VA: 0x2720838 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409K1Curve : AbstractF2mCurve // TypeDefIndex: 5105
{
	// Fields
	private const int SecT409K1_DEFAULT_COORDS = 6;
	protected readonly SecT409K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x2720868 Offset: 0x2720868 VA: 0x2720868
	public void .ctor() { }

	// RVA: 0x27209D4 Offset: 0x27209D4 VA: 0x27209D4 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x2720A2C Offset: 0x2720A2C VA: 0x2720A2C Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x2720A38 Offset: 0x2720A38 VA: 0x2720A38 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x2720A94 Offset: 0x2720A94 VA: 0x2720A94 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x2720A9C Offset: 0x2720A9C VA: 0x2720A9C Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x2720AA4 Offset: 0x2720AA4 VA: 0x2720AA4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x2720B04 Offset: 0x2720B04 VA: 0x2720B04 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2720C64 Offset: 0x2720C64 VA: 0x2720C64 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2720D04 Offset: 0x2720D04 VA: 0x2720D04 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x2720D0C Offset: 0x2720D0C VA: 0x2720D0C Slot: 39
	public virtual int get_M() { }

	// RVA: 0x2720D14 Offset: 0x2720D14 VA: 0x2720D14 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x2720D1C Offset: 0x2720D1C VA: 0x2720D1C Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x2720D24 Offset: 0x2720D24 VA: 0x2720D24 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x2720D2C Offset: 0x2720D2C VA: 0x2720D2C Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409K1Point : AbstractF2mPoint // TypeDefIndex: 5106
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x27209CC Offset: 0x27209CC VA: 0x27209CC
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x2720B8C Offset: 0x2720B8C VA: 0x2720B8C
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x2720CF8 Offset: 0x2720CF8 VA: 0x2720CF8
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x2720D34 Offset: 0x2720D34 VA: 0x2720D34 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x2720DD4 Offset: 0x2720DD4 VA: 0x2720DD4 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x2720F14 Offset: 0x2720F14 VA: 0x2720F14 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x2720FB0 Offset: 0x2720FB0 VA: 0x2720FB0 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x27218E8 Offset: 0x27218E8 VA: 0x27218E8 Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x2721D4C Offset: 0x2721D4C VA: 0x2721D4C Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x27223A0 Offset: 0x27223A0 VA: 0x27223A0 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409R1Curve : AbstractF2mCurve // TypeDefIndex: 5107
{
	// Fields
	private const int SecT409R1_DEFAULT_COORDS = 6;
	protected readonly SecT409R1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x24FAEE4 Offset: 0x24FAEE4 VA: 0x24FAEE4
	public void .ctor() { }

	// RVA: 0x24FB080 Offset: 0x24FB080 VA: 0x24FB080 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24FB0D8 Offset: 0x24FB0D8 VA: 0x24FB0D8 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24FB0E4 Offset: 0x24FB0E4 VA: 0x24FB0E4 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24FB0EC Offset: 0x24FB0EC VA: 0x24FB0EC Slot: 4
	public override int get_FieldSize() { }

	// RVA: 0x24FB0F4 Offset: 0x24FB0F4 VA: 0x24FB0F4 Slot: 5
	public override ECFieldElement FromBigInteger(BigInteger x) { }

	// RVA: 0x24FB158 Offset: 0x24FB158 VA: 0x24FB158 Slot: 13
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FB2B8 Offset: 0x24FB2B8 VA: 0x24FB2B8 Slot: 14
	protected internal override ECPoint CreateRawPoint(ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FB358 Offset: 0x24FB358 VA: 0x24FB358 Slot: 38
	public override bool get_IsKoblitz() { }

	// RVA: 0x24FB360 Offset: 0x24FB360 VA: 0x24FB360 Slot: 39
	public virtual int get_M() { }

	// RVA: 0x24FB368 Offset: 0x24FB368 VA: 0x24FB368 Slot: 40
	public virtual bool get_IsTrinomial() { }

	// RVA: 0x24FB370 Offset: 0x24FB370 VA: 0x24FB370 Slot: 41
	public virtual int get_K1() { }

	// RVA: 0x24FB378 Offset: 0x24FB378 VA: 0x24FB378 Slot: 42
	public virtual int get_K2() { }

	// RVA: 0x24FB380 Offset: 0x24FB380 VA: 0x24FB380 Slot: 43
	public virtual int get_K3() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT409R1Point : AbstractF2mPoint // TypeDefIndex: 5108
{
	// Properties
	public override ECFieldElement YCoord { get; }
	protected internal override bool CompressionYTilde { get; }

	// Methods

	// RVA: 0x24FB078 Offset: 0x24FB078 VA: 0x24FB078
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FB1E0 Offset: 0x24FB1E0 VA: 0x24FB1E0
	public void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, bool withCompression) { }

	// RVA: 0x24FB34C Offset: 0x24FB34C VA: 0x24FB34C
	internal void .ctor(ECCurve curve, ECFieldElement x, ECFieldElement y, ECFieldElement[] zs, bool withCompression) { }

	// RVA: 0x24FB388 Offset: 0x24FB388 VA: 0x24FB388 Slot: 6
	protected override ECPoint Detach() { }

	// RVA: 0x24FB428 Offset: 0x24FB428 VA: 0x24FB428 Slot: 13
	public override ECFieldElement get_YCoord() { }

	// RVA: 0x24FB580 Offset: 0x24FB580 VA: 0x24FB580 Slot: 26
	protected internal override bool get_CompressionYTilde() { }

	// RVA: 0x24FB610 Offset: 0x24FB610 VA: 0x24FB610 Slot: 27
	public override ECPoint Add(ECPoint b) { }

	// RVA: 0x24FBEFC Offset: 0x24FBEFC VA: 0x24FBEFC Slot: 31
	public override ECPoint Twice() { }

	// RVA: 0x24FC2CC Offset: 0x24FC2CC VA: 0x24FC2CC Slot: 33
	public override ECPoint TwicePlus(ECPoint b) { }

	// RVA: 0x24FC8C0 Offset: 0x24FC8C0 VA: 0x24FC8C0 Slot: 29
	public override ECPoint Negate() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571Field // TypeDefIndex: 5109
{
	// Fields
	private const ulong M59 = 576460752303423487;
	private const ulong RM = 17256631552825064414;
	private static readonly ulong[] ROOT_Z; // 0x0

	// Methods

	// RVA: 0x24FCA44 Offset: 0x24FCA44 VA: 0x24FCA44
	public void .ctor() { }

	// RVA: 0x24FCA4C Offset: 0x24FCA4C VA: 0x24FCA4C
	public static void Add(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x24FCB34 Offset: 0x24FCB34 VA: 0x24FCB34
	private static void Add(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff) { }

	// RVA: 0x24FCC40 Offset: 0x24FCC40 VA: 0x24FCC40
	private static void AddBothTo(ulong[] x, int xOff, ulong[] y, int yOff, ulong[] z, int zOff) { }

	// RVA: 0x24FCD64 Offset: 0x24FCD64 VA: 0x24FCD64
	public static void AddExt(ulong[] xx, ulong[] yy, ulong[] zz) { }

	// RVA: 0x24FCE4C Offset: 0x24FCE4C VA: 0x24FCE4C
	public static void AddOne(ulong[] x, ulong[] z) { }

	// RVA: 0x24FCF30 Offset: 0x24FCF30 VA: 0x24FCF30
	public static ulong[] FromBigInteger(BigInteger x) { }

	// RVA: 0x24FD07C Offset: 0x24FD07C VA: 0x24FD07C
	public static void Invert(ulong[] x, ulong[] z) { }

	// RVA: 0x24FD370 Offset: 0x24FD370 VA: 0x24FD370
	public static void Multiply(ulong[] x, ulong[] y, ulong[] z) { }

	// RVA: 0x24FDA34 Offset: 0x24FDA34 VA: 0x24FDA34
	public static void MultiplyAddToExt(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x24FD7C8 Offset: 0x24FD7C8 VA: 0x24FD7C8
	public static void Reduce(ulong[] xx, ulong[] z) { }

	// RVA: 0x24FCFB4 Offset: 0x24FCFB4 VA: 0x24FCFB4
	public static void Reduce5(ulong[] z, int zOff) { }

	// RVA: 0x24FDAD0 Offset: 0x24FDAD0 VA: 0x24FDAD0
	public static void Sqrt(ulong[] x, ulong[] z) { }

	// RVA: 0x24FD2E0 Offset: 0x24FD2E0 VA: 0x24FD2E0
	public static void Square(ulong[] x, ulong[] z) { }

	// RVA: 0x24FDD80 Offset: 0x24FDD80 VA: 0x24FDD80
	public static void SquareAddToExt(ulong[] x, ulong[] zz) { }

	// RVA: 0x24FD408 Offset: 0x24FD408 VA: 0x24FD408
	public static void SquareN(ulong[] x, int n, ulong[] z) { }

	// RVA: 0x24FDE14 Offset: 0x24FDE14 VA: 0x24FDE14
	public static uint Trace(ulong[] x) { }

	// RVA: 0x24FD4F0 Offset: 0x24FD4F0 VA: 0x24FD4F0
	protected static void ImplMultiply(ulong[] x, ulong[] y, ulong[] zz) { }

	// RVA: 0x24FDEB4 Offset: 0x24FDEB4 VA: 0x24FDEB4
	protected static void ImplMulwAcc(ulong[] xs, ulong y, ulong[] z, int zOff) { }

	// RVA: 0x24FDCF8 Offset: 0x24FDCF8 VA: 0x24FDCF8
	protected static void ImplSquare(ulong[] x, ulong[] zz) { }

	// RVA: 0x24FE1B4 Offset: 0x24FE1B4 VA: 0x24FE1B4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571FieldElement : ECFieldElement // TypeDefIndex: 5110
{
	// Fields
	protected readonly ulong[] x; // 0x10

	// Properties
	public override bool IsOne { get; }
	public override bool IsZero { get; }
	public override string FieldName { get; }
	public override int FieldSize { get; }
	public virtual int Representation { get; }
	public virtual int M { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x24FE230 Offset: 0x24FE230 VA: 0x24FE230
	public void .ctor(BigInteger x) { }

	// RVA: 0x24FE334 Offset: 0x24FE334 VA: 0x24FE334
	public void .ctor() { }

	// RVA: 0x24FE364 Offset: 0x24FE364 VA: 0x24FE364
	protected internal void .ctor(ulong[] x) { }

	// RVA: 0x24FE390 Offset: 0x24FE390 VA: 0x24FE390 Slot: 17
	public override bool get_IsOne() { }

	// RVA: 0x24FE39C Offset: 0x24FE39C VA: 0x24FE39C Slot: 18
	public override bool get_IsZero() { }

	// RVA: 0x24FE3A8 Offset: 0x24FE3A8 VA: 0x24FE3A8 Slot: 24
	public override bool TestBitZero() { }

	// RVA: 0x24FE3F0 Offset: 0x24FE3F0 VA: 0x24FE3F0 Slot: 4
	public override BigInteger ToBigInteger() { }

	// RVA: 0x24FE3FC Offset: 0x24FE3FC VA: 0x24FE3FC Slot: 5
	public override string get_FieldName() { }

	// RVA: 0x24FE444 Offset: 0x24FE444 VA: 0x24FE444 Slot: 6
	public override int get_FieldSize() { }

	// RVA: 0x24FE44C Offset: 0x24FE44C VA: 0x24FE44C Slot: 7
	public override ECFieldElement Add(ECFieldElement b) { }

	// RVA: 0x24FE5F0 Offset: 0x24FE5F0 VA: 0x24FE5F0 Slot: 8
	public override ECFieldElement AddOne() { }

	// RVA: 0x24FE694 Offset: 0x24FE694 VA: 0x24FE694 Slot: 9
	public override ECFieldElement Subtract(ECFieldElement b) { }

	// RVA: 0x24FE6A0 Offset: 0x24FE6A0 VA: 0x24FE6A0 Slot: 10
	public override ECFieldElement Multiply(ECFieldElement b) { }

	// RVA: 0x24FE844 Offset: 0x24FE844 VA: 0x24FE844 Slot: 19
	public override ECFieldElement MultiplyMinusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FE854 Offset: 0x24FE854 VA: 0x24FE854 Slot: 20
	public override ECFieldElement MultiplyPlusProduct(ECFieldElement b, ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FEBE4 Offset: 0x24FEBE4 VA: 0x24FEBE4 Slot: 11
	public override ECFieldElement Divide(ECFieldElement b) { }

	// RVA: 0x24FEC34 Offset: 0x24FEC34 VA: 0x24FEC34 Slot: 12
	public override ECFieldElement Negate() { }

	// RVA: 0x24FEC38 Offset: 0x24FEC38 VA: 0x24FEC38 Slot: 13
	public override ECFieldElement Square() { }

	// RVA: 0x24FECDC Offset: 0x24FECDC VA: 0x24FECDC Slot: 21
	public override ECFieldElement SquareMinusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FECEC Offset: 0x24FECEC VA: 0x24FECEC Slot: 22
	public override ECFieldElement SquarePlusProduct(ECFieldElement x, ECFieldElement y) { }

	// RVA: 0x24FEF94 Offset: 0x24FEF94 VA: 0x24FEF94 Slot: 23
	public override ECFieldElement SquarePow(int pow) { }

	// RVA: 0x24FF050 Offset: 0x24FF050 VA: 0x24FF050 Slot: 14
	public override ECFieldElement Invert() { }

	// RVA: 0x24FF0F4 Offset: 0x24FF0F4 VA: 0x24FF0F4 Slot: 15
	public override ECFieldElement Sqrt() { }

	// RVA: 0x24FF198 Offset: 0x24FF198 VA: 0x24FF198 Slot: 27
	public virtual int get_Representation() { }

	// RVA: 0x24FF1A0 Offset: 0x24FF1A0 VA: 0x24FF1A0 Slot: 28
	public virtual int get_M() { }

	// RVA: 0x24FF1A8 Offset: 0x24FF1A8 VA: 0x24FF1A8 Slot: 29
	public virtual int get_K1() { }

	// RVA: 0x24FF1B0 Offset: 0x24FF1B0 VA: 0x24FF1B0 Slot: 30
	public virtual int get_K2() { }

	// RVA: 0x24FF1B8 Offset: 0x24FF1B8 VA: 0x24FF1B8 Slot: 31
	public virtual int get_K3() { }

	// RVA: 0x24FF1C0 Offset: 0x24FF1C0 VA: 0x24FF1C0 Slot: 0
	public override bool Equals(object obj) { }

	// RVA: 0x24FF25C Offset: 0x24FF25C VA: 0x24FF25C Slot: 25
	public override bool Equals(ECFieldElement other) { }

	// RVA: 0x24FF2F8 Offset: 0x24FF2F8 VA: 0x24FF2F8 Slot: 32
	public virtual bool Equals(SecT571FieldElement other) { }

	// RVA: 0x24FF324 Offset: 0x24FF324 VA: 0x24FF324 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Org.BouncyCastle.Math.EC.Custom.Sec
internal class SecT571K1Curve : AbstractF2mCurve // TypeDefIndex: 5111
{
	// Fields
	private const int SecT571K1_DEFAULT_COORDS = 6;
	protected readonly SecT571K1Point m_infinity; // 0x58

	// Properties
	public override ECPoint Infinity { get; }
	public override int FieldSize { get; }
	public override bool IsKoblitz { get; }
	public virtual int M { get; }
	public virtual bool IsTrinomial { get; }
	public virtual int K1 { get; }
	public virtual int K2 { get; }
	public virtual int K3 { get; }

	// Methods

	// RVA: 0x24FF354 Offset: 0x24FF354 VA: 0x24FF354
	public void .ctor() { }

	// RVA: 0x24FF4C0 Offset: 0x24FF4C0 VA: 0x24FF4C0 Slot: 12
	protected override ECCurve CloneCurve() { }

	// RVA: 0x24FF518 Offset: 0x24FF518 VA: 0x24FF518 Slot: 16
	public override bool SupportsCoordinateSystem(int coord) { }

	// RVA: 0x24FF524 Offset: 0x24FF524 VA: 0x24FF524 Slot: 15
	protected override ECMultiplier CreateDefaultMultiplier() { }

	// RVA: 0x24FF580 Offset: 0x24FF580 VA: 0x24FF580 Slot: 22
	public override ECPoint get_Infinity() { }

	// RVA: 0x24FF588 Offset: 0x24FF588 VA: 0x24FF588 Slot: 4
	public override int get_FieldSize() { }

