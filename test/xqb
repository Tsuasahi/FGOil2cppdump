	private string lastMessage; // 0x20
	private int index; // 0x28
	private string message; // 0x30

	// Methods

	// RVA: 0xF75D84 Offset: 0xF75D84 VA: 0xF75D84
	public void .ctor() { }

	// RVA: 0xF75D8C Offset: 0xF75D8C VA: 0xF75D8C
	public void ExecuteLoop(int index) { }

	// RVA: 0xF75DAC Offset: 0xF75DAC VA: 0xF75DAC
	public void SetSwitchCase(int index, string message) { }

	// RVA: 0xF75DB8 Offset: 0xF75DB8 VA: 0xF75DB8
	public bool ShouldAddLogMessage(int index) { }

	// RVA: 0xF75DEC Offset: 0xF75DEC VA: 0xF75DEC
	public bool ShouldAddLogSwitchCase(int index, string message) { }
}

// Namespace: 
public class ScriptManager : SingletonMonoBehaviour<ScriptManager> // TypeDefIndex: 8470
{
	// Fields
	public static readonly float DEFAULT_FADE_TIME; // 0x0
	public static readonly int CHARA_MAX; // 0x4
	public static readonly int FACE_MAX; // 0x8
	private static readonly int DELAY_INDEX_MAX; // 0xC
	private static readonly float PICTURE_FRAME_Z_POS_NORMAL; // 0x10
	private static readonly float PICTURE_FRAME_Z_POS_TOP; // 0x14
	public const string SCRIPT_NAME_BATTLE_BASE = "{0:D8}{1:D1}";
	public const string SCRIPT_NAME_BATTLE_START = "{0:D8}{1:D1}0";
	public const string SCRIPT_NAME_BATTLE_START2 = "{0:D8}{1:D1}2";
	public const string SCRIPT_NAME_BATTLE_END = "{0:D8}{1:D1}1";
	public const string SCRIPT_NAME_BATTLE_END2 = "{0:D8}{1:D1}3";
	public const string SCRIPT_NAME_BATTLE_OTHERWIN_END = "{0:D8}{1:D1}4";
	public const string SCRIPT_NAME_BATTLE_OTHERWIN_END2 = "{0:D8}{1:D1}6";
	public const string SCRIPT_NAME_BATTLE_LOSEWIN_END = "{0:D8}{1:D1}5";
	public const string SCRIPT_NAME_BATTLE_LOSEWIN_END2 = "{0:D8}{1:D1}7";
	public const string SCRIPT_NAME_NOTMEETS_COND = "{0:D8}{1:D1}8";
	public const string SCRIPT_AUTO_MESSAGE_SAVE_KEY = "ScriptManagerAutoMessage";
	public const string SCRIPT_SELECT_BRANCH_SAVE_KEY = "ScriptManagerSelectBranch";
	public const string SCRIPT_NAME_WAR_EPILOGUE = "WarEpilogue";
	public const string FLAG_NAME_INPUT_SELECT_BRANCH = "INPUT_SELECT_BRANCH";
	private const int DEPTH_BUFFER_BITS = 24;
	private const string QUEST_MESSAGE_ADD = "QuestMessageAdd";
	private const string QUEST_MESSAGE_OVERWRITE = "QUEST_MESSAGE_OVERWRITE_";
	public static readonly int PICTURE_FRAME_SPRITE_WIDTH_16_9; // 0x18
	public static readonly int PICTURE_FRAME_SPRITE_WIDTH_21_9; // 0x1C
	private const float FS_OFFSET_X_MARGIN = 80;
	public static bool defaultForceObi_16_9; // 0x20
	public static string textPath; // 0x28
	private static readonly string TalkResumeKey; // 0x30
	private static readonly string TalkResumeKeyV2; // 0x38
	private static readonly string KEY_SWITCH_INFO; // 0x40
	private static readonly string KEY_SWITCH_INFO_ROUTE_TYPE; // 0x48
	private static readonly string KEY_LINE_INFO; // 0x50
	private static readonly string DUMMY_TEXT; // 0x58
	private const int RENDER_TEXTURE_CMAERA_DEPTH_DEFAULT = 1;
	[SerializeField] // RVA: 0xC5E734 Offset: 0xC5E734 VA: 0xC5E734
	protected ScriptMessageManager messageManager; // 0x18
	[SerializeField] // RVA: 0xC5E744 Offset: 0xC5E744 VA: 0xC5E744
	protected ScriptSelectDialog selectDialog; // 0x20
	[SerializeField] // RVA: 0xC5E754 Offset: 0xC5E754 VA: 0xC5E754
	protected UIPanel systemPanel; // 0x28
	[SerializeField] // RVA: 0xC5E764 Offset: 0xC5E764 VA: 0xC5E764
	protected UIPanel blockPanel; // 0x30
	[SerializeField] // RVA: 0xC5E774 Offset: 0xC5E774 VA: 0xC5E774
	protected UIPanel actionPanel; // 0x38
	[SerializeField] // RVA: 0xC5E784 Offset: 0xC5E784 VA: 0xC5E784
	protected UIPanel renderPanel; // 0x40
	[SerializeField] // RVA: 0xC5E794 Offset: 0xC5E794 VA: 0xC5E794
	protected ExUISpriteRenderer pictureFrameSprite; // 0x48
	[SerializeField] // RVA: 0xC5E7A4 Offset: 0xC5E7A4 VA: 0xC5E7A4
	protected ExUISpriteRenderer backSprite1; // 0x50
	[SerializeField] // RVA: 0xC5E7B4 Offset: 0xC5E7B4 VA: 0xC5E7B4
	protected ExUISpriteRenderer backSprite2; // 0x58
	[SerializeField] // RVA: 0xC5E7C4 Offset: 0xC5E7C4 VA: 0xC5E7C4
	protected ItemSeed figureSeed; // 0x60
	[SerializeField] // RVA: 0xC5E7D4 Offset: 0xC5E7D4 VA: 0xC5E7D4
	protected ItemSeed equipSeed; // 0x68
	[SerializeField] // RVA: 0xC5E7E4 Offset: 0xC5E7E4 VA: 0xC5E7E4
	protected ItemSeed imageSeed; // 0x70
	[SerializeField] // RVA: 0xC5E7F4 Offset: 0xC5E7F4 VA: 0xC5E7F4
	protected ItemSeed verticalImageSeed; // 0x78
	[SerializeField] // RVA: 0xC5E804 Offset: 0xC5E804 VA: 0xC5E804
	protected ItemSeed horizontalImageSeed; // 0x80
	[SerializeField] // RVA: 0xC5E814 Offset: 0xC5E814 VA: 0xC5E814
	protected Transform shakeRoot; // 0x88
	[SerializeField] // RVA: 0xC5E824 Offset: 0xC5E824 VA: 0xC5E824
	protected UIWidget stretchBase; // 0x90
	[SerializeField] // RVA: 0xC5E834 Offset: 0xC5E834 VA: 0xC5E834
	protected UITweenRenderer meshFlashBase; // 0x98
	[SerializeField] // RVA: 0xC5E844 Offset: 0xC5E844 VA: 0xC5E844
	protected ExUIMeshRenderer meshWipeBase; // 0xA0
	[SerializeField] // RVA: 0xC5E854 Offset: 0xC5E854 VA: 0xC5E854
	protected ExUIUserMeshRenderer meshExWipeBase; // 0xA8
	[SerializeField] // RVA: 0xC5E864 Offset: 0xC5E864 VA: 0xC5E864
	protected UITweenRenderer meshFadeBase; // 0xB0
	[SerializeField] // RVA: 0xC5E874 Offset: 0xC5E874 VA: 0xC5E874
	protected UITweenRenderer charaMeshFlashBase; // 0xB8
	[SerializeField] // RVA: 0xC5E884 Offset: 0xC5E884 VA: 0xC5E884
	protected GameObject cameraScale; // 0xC0
	[SerializeField] // RVA: 0xC5E894 Offset: 0xC5E894 VA: 0xC5E894
	protected GameObject cameraPosition; // 0xC8
	[SerializeField] // RVA: 0xC5E8A4 Offset: 0xC5E8A4 VA: 0xC5E8A4
	protected GameObject cameraRoll1; // 0xD0
	[SerializeField] // RVA: 0xC5E8B4 Offset: 0xC5E8B4 VA: 0xC5E8B4
	protected GameObject cameraRoll2; // 0xD8
	[SerializeField] // RVA: 0xC5E8C4 Offset: 0xC5E8C4 VA: 0xC5E8C4
	protected UIRootReScale scriptReScale; // 0xE0
	[SerializeField] // RVA: 0xC5E8D4 Offset: 0xC5E8D4 VA: 0xC5E8D4
	protected ExUIMeshRenderer meshCaptureBase; // 0xE8
	[SerializeField] // RVA: 0xC5E8E4 Offset: 0xC5E8E4 VA: 0xC5E8E4
	protected ExUIMeshRenderer meshRenderBase; // 0xF0
	[SerializeField] // RVA: 0xC5E8F4 Offset: 0xC5E8F4 VA: 0xC5E8F4
	protected Camera renderTextureCamera; // 0xF8
	[SerializeField] // RVA: 0xC5E904 Offset: 0xC5E904 VA: 0xC5E904
	protected Camera margeCamera; // 0x100
	[SerializeField] // RVA: 0xC5E914 Offset: 0xC5E914 VA: 0xC5E914
	protected Camera mapCamera; // 0x108
	[SerializeField] // RVA: 0xC5E924 Offset: 0xC5E924 VA: 0xC5E924
	protected Camera ui2dCamera; // 0x110
	[SerializeField] // RVA: 0xC5E934 Offset: 0xC5E934 VA: 0xC5E934
	protected GameObject communicationCharaEffectBase; // 0x118
	[SerializeField] // RVA: 0xC5E944 Offset: 0xC5E944 VA: 0xC5E944
	protected GameObject specialEffectBase; // 0x120
	[SerializeField] // RVA: 0xC5E954 Offset: 0xC5E954 VA: 0xC5E954
	protected GameObject fowardEffectBase; // 0x128
	[SerializeField] // RVA: 0xC5E964 Offset: 0xC5E964 VA: 0xC5E964
	protected GameObject effectBase; // 0x130
	[SerializeField] // RVA: 0xC5E974 Offset: 0xC5E974 VA: 0xC5E974
	protected GameObject backEffectBase; // 0x138
	[SerializeField] // RVA: 0xC5E984 Offset: 0xC5E984 VA: 0xC5E984
	protected GameObject normalOperationBase; // 0x140
	[SerializeField] // RVA: 0xC5E994 Offset: 0xC5E994 VA: 0xC5E994
	protected GameObject backViewOperationBase; // 0x148
	[SerializeField] // RVA: 0xC5E9A4 Offset: 0xC5E9A4 VA: 0xC5E9A4
	protected GameObject figureViewOperationBase; // 0x150
	[SerializeField] // RVA: 0xC5E9B4 Offset: 0xC5E9B4 VA: 0xC5E9B4
	protected UILabel viewBackLabel; // 0x158
	[SerializeField] // RVA: 0xC5E9C4 Offset: 0xC5E9C4 VA: 0xC5E9C4
	protected UILabel viewFigureLabel; // 0x160
	[SerializeField] // RVA: 0xC5E9D4 Offset: 0xC5E9D4 VA: 0xC5E9D4
	protected UILabel viewFaceLabel; // 0x168
	[SerializeField] // RVA: 0xC5E9E4 Offset: 0xC5E9E4 VA: 0xC5E9E4
	protected UICommonButton skipButton; // 0x170
	[SerializeField] // RVA: 0xC5E9F4 Offset: 0xC5E9F4 VA: 0xC5E9F4
	protected UICommonButton backLogButton; // 0x178
	[SerializeField] // RVA: 0xC5EA04 Offset: 0xC5EA04 VA: 0xC5EA04
	protected UICommonButton autoMessageButton; // 0x180
	[SerializeField] // RVA: 0xC5EA14 Offset: 0xC5EA14 VA: 0xC5EA14
	protected UISprite autoMessageSprite; // 0x188
	[SerializeField] // RVA: 0xC5EA24 Offset: 0xC5EA24 VA: 0xC5EA24
	protected GameObject touchFullScreen; // 0x190
	[SerializeField] // RVA: 0xC5EA34 Offset: 0xC5EA34 VA: 0xC5EA34
	protected GameObject fastPlayMark; // 0x198
	[SerializeField] // RVA: 0xC5EA44 Offset: 0xC5EA44 VA: 0xC5EA44
	protected ScriptSkipDialog skipConfirmDialog; // 0x1A0
	[SerializeField] // RVA: 0xC5EA54 Offset: 0xC5EA54 VA: 0xC5EA54
	protected ScriptBackLog backLogDialog; // 0x1A8
	[SerializeField] // RVA: 0xC5EA64 Offset: 0xC5EA64 VA: 0xC5EA64
	protected ScriptLogMessage logMessage; // 0x1B0
	[SerializeField] // RVA: 0xC5EA74 Offset: 0xC5EA74 VA: 0xC5EA74
	protected ScriptNotificationDialog notificationDialog; // 0x1B8
	[SerializeField] // RVA: 0xC5EA84 Offset: 0xC5EA84 VA: 0xC5EA84
	protected float defaultKeyDelayTime; // 0x1C0
	[SerializeField] // RVA: 0xC5EA94 Offset: 0xC5EA94 VA: 0xC5EA94
	private SpriteMask spriteMask; // 0x1C8
	[SerializeField] // RVA: 0xC5EAA4 Offset: 0xC5EAA4 VA: 0xC5EAA4
	protected ScriptStoryOpenDialog storyOpenDialog; // 0x1D0
	[SerializeField] // RVA: 0xC5EAB4 Offset: 0xC5EAB4 VA: 0xC5EAB4
	private TweenAlpha chapterSubTitleBase; // 0x1D8
	[SerializeField] // RVA: 0xC5EAC4 Offset: 0xC5EAC4 VA: 0xC5EAC4
	private UILabel chapterSubTitleLabel; // 0x1E0
	[SerializeField] // RVA: 0xC5EAD4 Offset: 0xC5EAD4 VA: 0xC5EAD4
	protected GameObject scriptPlayBase; // 0x1E8
	[SerializeField] // RVA: 0xC5EAE4 Offset: 0xC5EAE4 VA: 0xC5EAE4
	protected UILabel scriptPlayLabel; // 0x1F0
	[SerializeField] // RVA: 0xC5EAF4 Offset: 0xC5EAF4 VA: 0xC5EAF4
	protected UILabel scriptDataLabel; // 0x1F8
	[SerializeField] // RVA: 0xC5EB04 Offset: 0xC5EB04 VA: 0xC5EB04
	protected UISprite scriptPlaySprite; // 0x200
	[SerializeField] // RVA: 0xC5EB14 Offset: 0xC5EB14 VA: 0xC5EB14
	protected ScriptActionAdvPrefabController scriptActionAdvPrefabController; // 0x208
	[SerializeField] // RVA: 0xC5EB24 Offset: 0xC5EB24 VA: 0xC5EB24
	protected ExUIMeshRenderer meshAdvPrefabRenderBase; // 0x210
	public UISprite backMaskImage; // 0x218
	protected RenderTexture captureTexture; // 0x220
	protected static bool isReadScriptSetting; // 0x60
	protected static bool isEnforceDebugSetting; // 0x61
	protected static string scriptServerSettingAddress; // 0x68
	protected static string scriptObjectSettingAddress; // 0x70
	protected static string scriptPlayerPathSettingAddress; // 0x78
	protected static string scriptPlayerObjectSettingAddress; // 0x80
	protected static int scriptGenderSettingIndex; // 0x88
	protected static string scriptStartModeSettingName; // 0x90
	protected static bool isHiddenTruthSetting; // 0x98
	protected static bool debugIsForceCheckOn; // 0x99
	protected static string playScriptDataName; // 0xA0
	protected static QuestEntity.enType questType; // 0xA8
	protected static int warId; // 0xAC
	protected static int eventId; // 0xB0
	protected static int questId; // 0xB4
	protected static int scriptQuestId; // 0xB8
	private static int questPhase; // 0xBC
	private static int preQuestPhase; // 0xC0
	private static int questPhaseMax; // 0xC4
	private static string chapterSubTitle; // 0xC8
	protected static string questTitle; // 0xD0
	protected static string questMessage; // 0xD8
	protected static string questMessageRuby; // 0xE0
	private static int questMessageLabelMaxLine; // 0xE8
	protected static Action templateCallbackFunc; // 0xF0
	protected static int templateSvtId; // 0xF8
	protected static int templateSvtVoiceId; // 0xFC
	protected static int templateImageLimitCount; // 0x100
	protected static bool templateIsFaceFirst; // 0x104
	protected static ServantVoiceData[] templateVoiceList; // 0x108
	private static bool isMyRoomMaterial; // 0x110
	private static bool isPictureFrameForceChangeSize; // 0x111
	protected static ScriptManager.NotificationInfoManager notificationInfoManager; // 0x118
	private const string FORM_ID = "form";
	protected bool isInitBusy; // 0x228
	protected ScriptManager.PlayMode playMode; // 0x22C
	protected ScriptManager.StartMode startMode; // 0x230
	protected bool isStartModeEnd; // 0x234
	protected ScriptManager.State state; // 0x238
	protected ScriptManager.PlaySpeed playSpeed; // 0x23C
	protected ScriptManager.PlaySpeed requestPlaySpeed; // 0x240
	protected ScriptManager.InputTopMode inputTopMode; // 0x244
	protected List<string> downloadAssetList; // 0x248
	protected List<string> fontAssetList; // 0x250
	protected List<string> audioAssetList; // 0x258
	protected bool isExecuteLoadAsset; // 0x260
	protected int audioLoadIndex; // 0x264
	protected bool isSkipAudioStop; // 0x268
	protected string assetName; // 0x270
	protected string scriptLabel; // 0x278
	protected ScriptManager.CallbackFunc callbackFunc; // 0x280
	protected Action recoverBgmFunc; // 0x288
	public bool isSkipExit; // 0x290
	protected string[] scriptFileList; // 0x298
	protected ScriptEncryptSettings scriptEncryptSettings; // 0x2A0
	protected AssetData commonAssetData; // 0x2A8
	protected AssetData assetData; // 0x2B0
	protected AssetData gameDemoAssetData; // 0x2B8
	protected int executeIndex; // 0x2C0
	protected int executeIndexMax; // 0x2C4
	protected int executeIndexMovie; // 0x2C8
	protected int executeWaitIndex; // 0x2CC
	protected string[] executeTagList; // 0x2D0
	protected string[] executeDataList; // 0x2D8
	protected int[] executeLineList; // 0x2E0
	protected int[] executeOrgLineList; // 0x2E8
	protected bool[] executeMessageFlagList; // 0x2F0
	protected int[] executeMessageMaxSizeList; // 0x2F8
	protected int[] executeSwitchList; // 0x300
	protected string[] orgScriptList; // 0x308
	protected bool isSwitchCase; // 0x310
	protected bool isCollection; // 0x311
	protected bool isSkippedInCollection; // 0x312
	public bool isSkippedInCollectionFinish; // 0x313
	private bool isRevival; // 0x314
	protected bool isCancelInput; // 0x315
	protected bool isStartSkip; // 0x316
	protected bool isSkip; // 0x317
	protected string skipFade; // 0x318
	protected string tapSkipLabel; // 0x320
	protected string tapSkipFade; // 0x328
	protected bool isBackLog; // 0x330
	protected bool isButtonDisable; // 0x331
	protected long[] parameterList; // 0x338
	protected bool isAutoMessage; // 0x340
	protected bool isRequestSkip; // 0x341
	protected bool isExecuteSkip; // 0x342
	protected List<int> inputCommandIndex; // 0x348
	protected bool isMessageOffTalkMode; // 0x350
	protected bool isTalkMask; // 0x351
	protected bool isTalkDepth; // 0x352
	protected string talkMaskName; // 0x358
	protected bool isRequestEffect; // 0x360
	private string isRequestEffectCommand; // 0x368
	protected bool isSelectBranch; // 0x370
	protected string waitType; // 0x378
	protected int waitIndex; // 0x380
	protected float waitCount; // 0x384
	protected string waitName; // 0x388
	private string waitTitle; // 0x390
	protected string waitMessage; // 0x398
	protected float waitTime; // 0x3A0
	private bool isQuestOpen; // 0x3A4
	protected bool isRequestVoiceCancel; // 0x3A5
	protected int playScriptJumpLine; // 0x3A8
	protected bool maskOnWhileJumping; // 0x3AC
	private string startEffectSkipName; // 0x3B0
	protected SePlayer sePlayer; // 0x3B8
	protected SePlayer loopSePlayer; // 0x3C0
	protected SePlayer voicePlayer; // 0x3C8
	private bool isTVoice; // 0x3D0
	private bool isPlayTVoice; // 0x3D1
	private float tVoiceWaitCount; // 0x3D4
	protected List<ScriptFlagData> flagDataList; // 0x3D8
	protected ScriptCharaData[] charaList; // 0x3E0
	protected bool isLoadCommunicationChara; // 0x3E8
	protected string[] menuMessageList; // 0x3F0
	protected string[] menuLabelList; // 0x3F8
	protected int menuRouteSelectEndIndex; // 0x400
	protected ScriptManager.MenuRouteInfo[] menuRouteList; // 0x408
	protected List<int> selectedRouteTypeList; // 0x410
	private static readonly string SAVE_ROUTE_SELECT_IN_COLLECTION; // 0x120
	protected bool isBusyPictureFrame; // 0x418
	protected bool isBusyPictureFrameLoad; // 0x419
	protected int sceneMainIndex; // 0x41C
	protected bool isBusyScene; // 0x420
	protected bool isBusySceneLoad; // 0x421
	protected float sceneCrossFadeTime; // 0x424
	protected float shakeTime; // 0x428
	protected float shakeCycle; // 0x42C
	protected float shakeX; // 0x430
	protected float shakeY; // 0x434
	protected bool isExecuteCamera; // 0x438
	protected bool isExecuteCameraRoll; // 0x439
	protected string stretchName; // 0x440
	protected bool isExecuteStretch; // 0x448
	protected Vector2 stretchBaseRange; // 0x44C
	protected string flashName; // 0x458
	protected bool isExecuteFlash; // 0x460
	protected bool isEndRequestFlash; // 0x461
	protected int flashCount; // 0x464
	protected float flashTime1; // 0x468
	protected float flashTime2; // 0x46C
	protected float flashTime3; // 0x470
	protected Color flashColor1; // 0x474
	protected Color flashColor2; // 0x484
	protected string flashDepName; // 0x498
	protected bool isExecuteFlashDep; // 0x4A0
	protected bool isEndRequestFlashDep; // 0x4A1
	protected int flashDepCount; // 0x4A4
	protected float flashDepTime1; // 0x4A8
	protected float flashDepTime2; // 0x4AC
	protected float flashDepTime3; // 0x4B0
	protected Color flashDepColor1; // 0x4B4
	protected Color flashDepColor2; // 0x4C4
	private int flashDepNum; // 0x4D4
	protected string wipeName; // 0x4D8
	protected AssetData wipeAssetData; // 0x4E0
	protected bool isExecuteWipe; // 0x4E8
	protected bool isLoadWipe; // 0x4E9
	protected bool isWipeFilter; // 0x4EA
	protected bool isWipeIn; // 0x4EB
	protected float wipeDuration; // 0x4EC
	protected float wipeLevel; // 0x4F0
	private float wipeParam1; // 0x4F4
	private float wipeParam2; // 0x4F8
	private float wipeParam3; // 0x4FC
	private float wipeParam4; // 0x500
	private bool isEffectMessageStopping; // 0x504
	private CRIMoviePlayer cRIMoviePlayer; // 0x508
	private bool isDetectionDebugCheckOn; // 0x510
	private bool isEnableCheckDebugCheckOn; // 0x511
	private ScriptManager.ExWipeType exWipeType; // 0x514
	private int[] wipeExCutVarTriangles; // 0x518
	private ScriptActionRenderEffectController scriptActionRenderEffectController; // 0x520
	protected string fadeName; // 0x528
	protected Color fadeColor; // 0x530
	protected bool isExecuteFade; // 0x540
	protected string backName; // 0x548
	protected string figureName; // 0x550
	protected string[] backNameList; // 0x558
	protected string[] figureNameList; // 0x560
	protected int figureFaceNum; // 0x568
	protected string codeCommentString; // 0x570
	protected string codeLabelString; // 0x578
	protected string codeSceneString; // 0x580
	protected string codeTalkString; // 0x588
	protected string codeSwitchCaseString; // 0x590
	protected string codeSwitchCaseSplitString; // 0x598
	protected string codeSwitchEndString; // 0x5A0
	protected string codeInsertString; // 0x5A8
	protected string codeVoiceString; // 0x5B0
	protected string codeReturnString; // 0x5B8
	protected string backLogTalkStartString; // 0x5C0
	protected string backLogTalkEndString; // 0x5C8
	protected string backLogTalkSelectMessageString; // 0x5D0
	protected string backLogTalkSelectMessage2String; // 0x5D8
	protected string backLogTalkSelectColorString; // 0x5E0
	private bool isScriptExecuteMoviePlay; // 0x5E8
	private bool isNeedSkipStateAfterMovie; // 0x5E9
	private ScriptCommandDelayParam[] executeDelayParam; // 0x5F0
	protected float scenarioSpeed; // 0x5F8
	private float scenarioTextWaitTimeSecond; // 0x5FC
	private static int cachedSelectBranchQuestId; // 0x128
	private static int cachedOverWriteQuestId; // 0x12C
	private bool isAligned; // 0x600
	private bool isMaskEnabled; // 0x601
	private bool isSpriteMaskLoading; // 0x602
	private Action<bool> onEndRewardSwitchScript; // 0x608
	private bool isGetReward; // 0x610
	private bool isPlayScenarioWithMap; // 0x611
	private int lineMaxFontSize; // 0x614
	private ScriptLoop scriptLoop; // 0x618
	protected static List<ScriptManager.ScriptRouteSelectParam> scriptRouteSelectParams; // 0x130
	private Dictionary<string, object> switchSelections; // 0x620
	[CompilerGeneratedAttribute] // RVA: 0xC5EB34 Offset: 0xC5EB34 VA: 0xC5EB34
	private static Dictionary<string, int> <>f__switch$mapB; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xC5EB44 Offset: 0xC5EB44 VA: 0xC5EB44
	private static ScriptManager.CallbackFunc <>f__mg$cache0; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xC5EB54 Offset: 0xC5EB54 VA: 0xC5EB54
	private static Action <>f__mg$cache1; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xC5EB64 Offset: 0xC5EB64 VA: 0xC5EB64
	private static AssetLoader.LoadEndDataHandler <>f__mg$cache2; // 0x150
	[CompilerGeneratedAttribute] // RVA: 0xC5EB74 Offset: 0xC5EB74 VA: 0xC5EB74
	private static ScriptManager.CallbackFunc <>f__mg$cache3; // 0x158
	[CompilerGeneratedAttribute] // RVA: 0xC5EB84 Offset: 0xC5EB84 VA: 0xC5EB84
	private static Dictionary<string, int> <>f__switch$mapC; // 0x160
	[CompilerGeneratedAttribute] // RVA: 0xC5EB94 Offset: 0xC5EB94 VA: 0xC5EB94
	private static Dictionary<string, int> <>f__switch$mapD; // 0x168
	[CompilerGeneratedAttribute] // RVA: 0xC5EBA4 Offset: 0xC5EBA4 VA: 0xC5EBA4
	private static Dictionary<string, int> <>f__switch$mapE; // 0x170
	[CompilerGeneratedAttribute] // RVA: 0xC5EBB4 Offset: 0xC5EBB4 VA: 0xC5EBB4
	private static Dictionary<string, int> <>f__switch$mapF; // 0x178
	[CompilerGeneratedAttribute] // RVA: 0xC5EBC4 Offset: 0xC5EBC4 VA: 0xC5EBC4
	private static Dictionary<string, int> <>f__switch$map10; // 0x180
	[CompilerGeneratedAttribute] // RVA: 0xC5EBD4 Offset: 0xC5EBD4 VA: 0xC5EBD4
	private static Dictionary<string, int> <>f__switch$map11; // 0x188
	[CompilerGeneratedAttribute] // RVA: 0xC5EBE4 Offset: 0xC5EBE4 VA: 0xC5EBE4
	private static Dictionary<string, int> <>f__switch$map12; // 0x190
	[CompilerGeneratedAttribute] // RVA: 0xC5EBF4 Offset: 0xC5EBF4 VA: 0xC5EBF4
	private static Dictionary<string, int> <>f__switch$map13; // 0x198
	[CompilerGeneratedAttribute] // RVA: 0xC5EC04 Offset: 0xC5EC04 VA: 0xC5EC04
	private static Func<string, bool> <>f__am$cache0; // 0x1A0

	// Properties
	public bool IsLoading { get; }

	// Methods

	// RVA: 0xF75EF0 Offset: 0xF75EF0 VA: 0xF75EF0
	public void .ctor() { }

	// RVA: 0xF75FC4 Offset: 0xF75FC4 VA: 0xF75FC4
	public bool get_IsLoading() { }

	// RVA: 0xF75FE4 Offset: 0xF75FE4 VA: 0xF75FE4
	public static void AddNotificationInfo(bool openQuest, string title, string message) { }

	// RVA: 0xF760C4 Offset: 0xF760C4 VA: 0xF760C4
	public static void InitNotificationInfo() { }

	// RVA: 0xF76140 Offset: 0xF76140 VA: 0xF76140
	public static int GetQuestId() { }

	// RVA: 0xF761A8 Offset: 0xF761A8 VA: 0xF761A8
	public static string GetScriptLabel() { }

	// RVA: 0xF76204 Offset: 0xF76204 VA: 0xF76204
	public static string GetStartModeForAssetStorage(string path, string label) { }

	// RVA: 0xF766A0 Offset: 0xF766A0 VA: 0xF766A0
	protected static ScriptManager.StartMode GetStartMode(string startModeName) { }

	// RVA: 0xF769D4 Offset: 0xF769D4 VA: 0xF769D4
	public static int GetSelectBranchIndex() { }

	// RVA: 0xF76A24 Offset: 0xF76A24 VA: 0xF76A24
	public static void SetSelectBranchIndex(int branchIndex) { }

	// RVA: 0xF76AB8 Offset: 0xF76AB8 VA: 0xF76AB8
	public static void ClearSelectRouteArray() { }

	// RVA: 0xF76B20 Offset: 0xF76B20 VA: 0xF76B20
	public static int[] GetSelectRouteArray() { }

	// RVA: 0xF76D60 Offset: 0xF76D60 VA: 0xF76D60
	private static void SetScriptRouteSelectParam(int line, int route, bool isCollection) { }

	// RVA: 0xF774B4 Offset: 0xF774B4 VA: 0xF774B4
	public static bool GetSelectRouteArrayInCollection(out int questId, out int phase, out int[] routes) { }

	// RVA: 0xF77720 Offset: 0xF77720 VA: 0xF77720
	public static void ClearSelectRouteArrayInCollection() { }

	// RVA: 0xF7778C Offset: 0xF7778C VA: 0xF7778C
	public static int GetCachedSelectedBranchQuestId(int originalQuestId, int phase) { }

	// RVA: 0xF77994 Offset: 0xF77994 VA: 0xF77994
	public static void PlayScenario(string label, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF78124 Offset: 0xF78124 VA: 0xF78124
	public static void PlayScenario(string label, bool isSkip, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF78260 Offset: 0xF78260 VA: 0xF78260
	public static void PlayMessage(string message, Action callbackFunc, bool isPlayScript = False, Camera mapCamera, int jumpLine = -1) { }

	// RVA: 0xF78470 Offset: 0xF78470 VA: 0xF78470
	private void SetupMapCamera(Camera mapCamera) { }

	// RVA: 0xF78A68 Offset: 0xF78A68 VA: 0xF78A68
	protected static void EndPlayMessagePlayLocal(bool isExit) { }

	// RVA: 0xF78AE8 Offset: 0xF78AE8 VA: 0xF78AE8
	public static void PlayShop(string label, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF78C20 Offset: 0xF78C20 VA: 0xF78C20
	public static void PlayShopRewardSwitch(string label, Action<bool> onEndRewardSwitchScript, bool isCollection = False) { }

	// RVA: 0xF78D78 Offset: 0xF78D78 VA: 0xF78D78
	public static void PlayGacha(int svtId, int limitCount, bool isFaceFirst, Action callbackFunc, int svtVoiceId = 0, int scriptIdx = -1) { }

	// RVA: 0xF790F4 Offset: 0xF790F4 VA: 0xF790F4
	public void PlayGacha(UserServantEntity userSvtEntity, int svtId, int limitCount, bool isEventSvtGet, bool checkQuestOpens, Action endAction, bool isEventJoinSkip = False, int presentDialogMessageId = 0, string summonScriptId) { }

	// RVA: 0xF79234 Offset: 0xF79234 VA: 0xF79234
	private void QuestOpenNotify(int svtId, bool checkQuestOpen) { }

	// RVA: 0xF793E8 Offset: 0xF793E8 VA: 0xF793E8
	private void SvtJoinNotify(UserServantEntity userSvtEntity, bool isEventSvtGet, bool isEventJoinSkip) { }

	// RVA: 0xF7952C Offset: 0xF7952C VA: 0xF7952C
	private void PresentMessageNotify(int presentDialogMessageId, int servantId) { }

	// RVA: 0xF79730 Offset: 0xF79730 VA: 0xF79730
	public static void PlayNewSvtTalk(int svtId, int limitCount, string summonSctiptId, Action callbackFunc) { }

	// RVA: 0xF78E20 Offset: 0xF78E20 VA: 0xF78E20
	public static void PlayGacha(UserServantEntity userSvtEntity, int svtId, int limitCount, bool isFaceFirst, Action callbackFunc, int voiceId = 0, int scriptIdx = -1) { }

	// RVA: 0xF79A44 Offset: 0xF79A44 VA: 0xF79A44
	private static void _playGacha(int svtId, int svtVoiceId, int imageLimitCount, bool isFaceFirst, ServantVoiceData[] voiceList, Action callbackFunc) { }

	// RVA: 0xF79DDC Offset: 0xF79DDC VA: 0xF79DDC
	protected static void EndLoadPlayGachaVoice() { }

	// RVA: 0xF79F44 Offset: 0xF79F44 VA: 0xF79F44
	protected static void EndLoadPlatGachaTemplate(AssetData data) { }

	// RVA: 0xF7A204 Offset: 0xF7A204 VA: 0xF7A204
	protected static string CreateSummonMultiTemplate(AssetData data, List<SvtMultiPortraitEntity> entities) { }

	// RVA: 0xF7B374 Offset: 0xF7B374 VA: 0xF7B374
	protected static string CreateSummonSingleTemplate(AssetData data) { }

	// RVA: 0xF7BDC8 Offset: 0xF7BDC8 VA: 0xF7BDC8
	protected static void EndPlayGachaPlayLocal(bool isExit) { }

	// RVA: 0xF7BEE4 Offset: 0xF7BEE4 VA: 0xF7BEE4
	public static void PlayChapterStart(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0xF7C374 Offset: 0xF7C374 VA: 0xF7C374
	public static void PlayChapterStartQuest(int warId, int qstId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0xF7C894 Offset: 0xF7C894 VA: 0xF7C894
	public static void PlayChapterStartNotCollection(int warId, Action callbackFunc, int jumpLine = -1) { }

	// RVA: 0xF7CAF4 Offset: 0xF7CAF4 VA: 0xF7CAF4
	public static void PlayChapterStartQuestNotCollection(int warId, int qstId, Action callbackFunc, int jumpLine = -1) { }

	// RVA: 0xF7C1C8 Offset: 0xF7C1C8 VA: 0xF7C1C8
	public static void PlayChapterStartEffect(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection) { }

	// RVA: 0xF7CC20 Offset: 0xF7CC20 VA: 0xF7CC20
	public static void PlayChapterEpilogue(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF7CE20 Offset: 0xF7CE20 VA: 0xF7CE20
	public static void PlayChapterClear(int warId, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF7CFA4 Offset: 0xF7CFA4 VA: 0xF7CFA4
	protected static void SetQuestStartData(int warId, int questId, int questPhase, string questMessage, bool isMyRoomMaterial = False) { }

	// RVA: 0xF7D304 Offset: 0xF7D304 VA: 0xF7D304
	public static bool isPlayQuestStart(int warId, int questId) { }

	// RVA: 0xF7D3AC Offset: 0xF7D3AC VA: 0xF7D3AC
	public static void PlayQuestStart(int warId, int questId, int questPhaseMax, bool isCollection, Action callbackFunc, string questMessage, bool isMyRoomMaterial = False) { }

	// RVA: 0xF7D674 Offset: 0xF7D674 VA: 0xF7D674
	public static string GetScriptName_BattleStart(int questId, int questPhase) { }

	// RVA: 0xF7D730 Offset: 0xF7D730 VA: 0xF7D730
	public static string GetScriptName_BattleStart2(int questId, int questPhase) { }

	// RVA: 0xF7D7EC Offset: 0xF7D7EC VA: 0xF7D7EC
	public static string GetScriptName_NotMeetsCond(int questId, int questPhase) { }

	// RVA: 0xF7D8A8 Offset: 0xF7D8A8 VA: 0xF7D8A8
	public static string GetScriptName_BattleEnd_Direct(int questId, int questPhase, BattleData.WinResult winResult) { }

	// RVA: 0xF7DA40 Offset: 0xF7DA40 VA: 0xF7DA40
	public static string GetScriptName_BattleEnd2_Direct(int questId, int questPhase, BattleData.WinResult winResult) { }

	// RVA: 0xF7DBD8 Offset: 0xF7DBD8 VA: 0xF7DBD8
	public static string GetScriptName_BattleEnd(int scriptQuestId, int questPhase, BattleData.WinResult winResult = 1) { }

	// RVA: 0xF7DF14 Offset: 0xF7DF14 VA: 0xF7DF14
	public static string GetScriptName_BattleEnd2(int scriptQuestId, int questPhase, BattleData.WinResult winResult = 1) { }

	// RVA: 0xF7E154 Offset: 0xF7E154 VA: 0xF7E154
	public static string GetScriptAssetName(int questId) { }

	// RVA: 0xF7E2B4 Offset: 0xF7E2B4 VA: 0xF7E2B4
	public static string GetScriptAssetName(long scriptId) { }

	// RVA: 0xF77ACC Offset: 0xF77ACC VA: 0xF77ACC
	public static string GetScriptAssetName(string label) { }

	// RVA: 0xF7E424 Offset: 0xF7E424 VA: 0xF7E424
	public static void PlayBattleStart(int warId, int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, int jumpLine = -1, bool isNotMeets = False, bool isMyRoomMaterial = False) { }

	// RVA: 0xF7C500 Offset: 0xF7C500 VA: 0xF7C500
	public static void PlayBattleStartWhite(int warId, int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, int jumpLine = -1, bool isMyRoomMaterial = False) { }

	// RVA: 0xF7E7F0 Offset: 0xF7E7F0 VA: 0xF7E7F0
	public static void PlayBattleStart(int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, bool isMyRoomMaterial = False) { }

	// RVA: 0xF7EB7C Offset: 0xF7EB7C VA: 0xF7EB7C
	public static void PlayBattleStart2(int warId, int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, Action recoverBgmFunc, int jumpLine = -1) { }

	// RVA: 0xF7EEE8 Offset: 0xF7EEE8 VA: 0xF7EEE8
	public static void PlayBattleStart2(int questId, int questPhase, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF7F254 Offset: 0xF7F254 VA: 0xF7F254
	private static void SetQuestMessage(int questId) { }

	// RVA: 0xF7F39C Offset: 0xF7F39C VA: 0xF7F39C
	public static void PlayBattleEnd(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0xF7F454 Offset: 0xF7F454 VA: 0xF7F454
	public static void PlayBattleEnd(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.StartMode startMode, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1, bool isPlayWithMap = False) { }

	// RVA: 0xF7F810 Offset: 0xF7F810 VA: 0xF7F810
	public static void PlayBattleEndWhite(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0xF7FBA8 Offset: 0xF7FBA8 VA: 0xF7FBA8
	public static void PlayBattleEnd2(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1) { }

	// RVA: 0xF7FC60 Offset: 0xF7FC60 VA: 0xF7FC60
	public static void PlayBattleEnd2(int questId, int questPhase, BattleData.WinResult winResult, ScriptManager.StartMode startMode, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False, int jumpLine = -1, bool isPlayWithMap = False) { }

	// RVA: 0xF8001C Offset: 0xF8001C VA: 0xF8001C
	public static void LoadBattleStartGameDemo(int questId, int questPhase, bool isBefore, Action<string> callbackFunc, bool isCollection = False) { }

	// RVA: 0xF80468 Offset: 0xF80468 VA: 0xF80468
	protected void LoadBattleStartGameDemoLocal(string demoInfo, Action<string> callbackFunc) { }

	// RVA: 0xF80638 Offset: 0xF80638 VA: 0xF80638
	public static void LoadBattleEndGameDemo(int questId, int questPhase, bool isBefore, Action<string> callbackFunc, bool isCollection = False) { }

	// RVA: 0xF80A98 Offset: 0xF80A98 VA: 0xF80A98
	protected void LoadBattleEndGameDemoLocal(string demoInfo, Action<string> callbackFunc) { }

	// RVA: 0xF80C0C Offset: 0xF80C0C VA: 0xF80C0C
	public static void ReleaseBattleDemo() { }

	// RVA: 0xF80CB8 Offset: 0xF80CB8 VA: 0xF80CB8
	protected void ReleaseBattleDemoLoacal() { }

	// RVA: 0xF80D3C Offset: 0xF80D3C VA: 0xF80D3C
	public static void PlayRaceResult(long scriptId, int eventId, int termId, int groupId, int rank, long time, ScriptManager.CallbackFunc callbackFunc, bool isCollection = False) { }

	// RVA: 0xF8123C Offset: 0xF8123C VA: 0xF8123C
	public static void Play(string name, string label, bool isCollection, bool isSkip, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0xF81384 Offset: 0xF81384 VA: 0xF81384
	public static void DebugPlay(string startModeName, string name, string label, int jumpLine, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0xF81388 Offset: 0xF81388 VA: 0xF81388
	public static void DebugPlay(string startModeName, string data, string orgData, int genderIndex, int jumpLine, ScriptManager.CallbackFunc callbackFunc, DebugTestRootComponent.ScriptReloadCallback reloadCallback) { }

	// RVA: 0xF8138C Offset: 0xF8138C VA: 0xF8138C
	public static void DebugScriptLoad(string name, string label, ScriptManager.CallbackBranchList callbackFunc) { }

	// RVA: 0xF813A4 Offset: 0xF813A4 VA: 0xF813A4
	public static List<List<string>> DebugScriptAnalys(string label, string data, string orgData) { }

	// RVA: 0xF813AC Offset: 0xF813AC VA: 0xF813AC
	public static void BackViewClear() { }

	// RVA: 0xF81408 Offset: 0xF81408 VA: 0xF81408
	public static void BackViewPlay(string backName, string[] backNameList, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0xF8140C Offset: 0xF8140C VA: 0xF8140C
	public static void FigureViewClear() { }

	// RVA: 0xF81468 Offset: 0xF81468 VA: 0xF81468
	public static void FigureViewPlay(string figureName, string[] figureNameList, ScriptManager.CallbackFunc callbackFunc) { }

	// RVA: 0xF8146C Offset: 0xF8146C VA: 0xF8146C
	public static string GetScriptServerSetting() { }

	// RVA: 0xF814D4 Offset: 0xF814D4 VA: 0xF814D4
	public static string GetScriptObjectSetting() { }

	// RVA: 0xF8153C Offset: 0xF8153C VA: 0xF8153C
	public static string GetScriptPlayerPathSetting() { }

	// RVA: 0xF815A4 Offset: 0xF815A4 VA: 0xF815A4
	public static string GetScriptPlayerObjectSetting() { }

	// RVA: 0xF8160C Offset: 0xF8160C VA: 0xF8160C
	public static int GetScriptGenderSetting() { }

	// RVA: 0xF81674 Offset: 0xF81674 VA: 0xF81674
	public static string GetScriptStartModeSetting() { }

	// RVA: 0xF816DC Offset: 0xF816DC VA: 0xF816DC
	public static bool GetScriptHiddenTruthSetting() { }

	// RVA: 0xF81744 Offset: 0xF81744 VA: 0xF81744
	public static bool GetScriptForceCheckOnSetting() { }

	// RVA: 0xF817AC Offset: 0xF817AC VA: 0xF817AC
	public static void SetScriptForceCheckOnSetting(bool isForceCheckOn) { }

	// RVA: 0xF8181C Offset: 0xF8181C VA: 0xF8181C
	public static bool Fade(string name, bool isIn, float duration) { }

	// RVA: 0xF820FC Offset: 0xF820FC VA: 0xF820FC
	public static bool IsBusyFade() { }

	// RVA: 0xF82158 Offset: 0xF82158 VA: 0xF82158
	public static bool SetScriptServerSetting(string scriptServer, string scriptObject, int genderIndex, string startModeName, bool isHiddenTruthSetting) { }

	// RVA: 0xF82408 Offset: 0xF82408 VA: 0xF82408
	public static bool SetScriptPlayerSetting(string scriptPath, string scriptObject, int genderIndex, string startModeName, bool isHiddenTruthSetting) { }

	// RVA: 0xF826B8 Offset: 0xF826B8 VA: 0xF826B8
	public static void SetIsCollection(bool isCollection) { }

	// RVA: 0xF826BC Offset: 0xF826BC VA: 0xF826BC
	public static bool GetIsCollection() { }

	// RVA: 0xF826C4 Offset: 0xF826C4 VA: 0xF826C4
	public static void SetIsRevival(bool isRevival) { }

	// RVA: 0xF826C8 Offset: 0xF826C8 VA: 0xF826C8
	public static bool GetIsRevival() { }

	// RVA: 0xF7BD14 Offset: 0xF7BD14 VA: 0xF7BD14
	protected string GetKey(string scriptName) { }

	// RVA: 0xF826D0 Offset: 0xF826D0 VA: 0xF826D0
	public ScriptEncryptEntity GetEncryptEntity(string scriptName) { }

	// RVA: 0xF82784 Offset: 0xF82784 VA: 0xF82784
	public bool ReadSetting() { }

	// RVA: 0xF8285C Offset: 0xF8285C VA: 0xF8285C
	public void WriteSetting() { }

	// RVA: 0xF82860 Offset: 0xF82860 VA: 0xF82860
	private RenderTexture CreateRenderTexture(bool enableMask = False) { }

	// RVA: 0xF828DC Offset: 0xF828DC VA: 0xF828DC
	protected void RenderCameraInit() { }

	// RVA: 0xF8316C Offset: 0xF8316C VA: 0xF8316C
	protected void RenderCameraQuit() { }

	// RVA: 0xF83344 Offset: 0xF83344 VA: 0xF83344
	protected RenderTexture RenderCameraSwap(RenderTexture swapTexture) { }

	// RVA: 0xF835AC Offset: 0xF835AC VA: 0xF835AC
	public RenderTexture GetRenderTargetTexture() { }

	// RVA: 0xF835DC Offset: 0xF835DC VA: 0xF835DC
	public RenderTexture GetCaptureRenderTexture() { }

	// RVA: 0xF82E70 Offset: 0xF82E70 VA: 0xF82E70
	public void SetCameraFilter(string filterName) { }

	// RVA: 0xF835E4 Offset: 0xF835E4 VA: 0xF835E4
	public void reboot(bool isRemoveScriptFileList = True) { }

	// RVA: 0xF83DB4 Offset: 0xF83DB4 VA: 0xF83DB4
	public void Initialize() { }

	// RVA: 0xF8500C Offset: 0xF8500C VA: 0xF8500C
	private void EndLoadScriptFileListAssetData(AssetData assetData) { }

	// RVA: 0xF85174 Offset: 0xF85174 VA: 0xF85174
	public bool IsBusyInitialize() { }

	// RVA: 0xF8517C Offset: 0xF8517C VA: 0xF8517C
	public string[] GetScriptFileList() { }

	// RVA: 0xF7DE18 Offset: 0xF7DE18 VA: 0xF7DE18
	public bool IsExistScriptFile(string scriptName) { }

	// RVA: 0xF85184 Offset: 0xF85184 VA: 0xF85184
	protected void InitSetting() { }

	// RVA: 0xF77BC4 Offset: 0xF77BC4 VA: 0xF77BC4
	protected void PlayLocal(ScriptManager.PlayMode mode, ScriptManager.StartMode start, string name, string label, bool isCollection, bool isSkip, bool isBackLog, long[] parameterList, ScriptManager.CallbackFunc callbackFunc, Action recoverBgmFunc, int jumpLine = -1, bool forceSkipDisable = False) { }

	// RVA: 0xF8604C Offset: 0xF8604C VA: 0xF8604C
	public static void SetIsSkippedInCollectionFalse() { }

	// RVA: 0xF861A0 Offset: 0xF861A0 VA: 0xF861A0
	private void ShowChapterSubTitle() { }

	// RVA: 0xF78D70 Offset: 0xF78D70 VA: 0xF78D70
	private void SetOnEndRewardSwitchScript(Action<bool> onEndRewardSwitchScript) { }

	// RVA: 0xF86468 Offset: 0xF86468 VA: 0xF86468
	protected void EndFirstLoadAsset(AssetData loadData) { }

	// RVA: 0xF85D3C Offset: 0xF85D3C VA: 0xF85D3C
	protected void FirstExecuteScriptLoadCommonData() { }

	// RVA: 0xF86984 Offset: 0xF86984 VA: 0xF86984
	protected void EndLoadCommonScriptData(AssetData loadData) { }

	// RVA: 0xF86628 Offset: 0xF86628 VA: 0xF86628
	private string GetScriptData() { }

	// RVA: 0xF85E6C Offset: 0xF85E6C VA: 0xF85E6C
	protected void FirstExecuteScript() { }

	// RVA: 0xF86C80 Offset: 0xF86C80 VA: 0xF86C80
	protected void LoadExecuteScript(string name, string label) { }

	// RVA: 0xF86EA4 Offset: 0xF86EA4 VA: 0xF86EA4
	protected void EndLoadAsset(AssetData loadData) { }

	// RVA: 0xF86F40 Offset: 0xF86F40 VA: 0xF86F40
	protected void LoadScript(string name, string label, ScriptManager.CallbackBranchList callbackFunc) { }

	// RVA: 0xF87288 Offset: 0xF87288 VA: 0xF87288
	private List<List<string>> LoadScriptAnalys(string name, string label) { }

	// RVA: 0xF872BC Offset: 0xF872BC VA: 0xF872BC
	private List<List<string>> ScriptAnalys(string label, string scriptData, string oriScriptData) { }

	// RVA: 0xF8985C Offset: 0xF8985C VA: 0xF8985C
	protected string GetCommonScriptText(string label) { }

	// RVA: 0xF86990 Offset: 0xF86990 VA: 0xF86990
	protected string GetExecuteScriptText(string label) { }

	// RVA: 0xF89C2C Offset: 0xF89C2C VA: 0xF89C2C
	private string GetOverwriteText(string label, int key) { }

	// RVA: 0xF86A84 Offset: 0xF86A84 VA: 0xF86A84
	protected void ExecuteScript(string label, string scriptData, string orgScriptData) { }

	// RVA: 0xF8A4F8 Offset: 0xF8A4F8 VA: 0xF8A4F8
	protected void EndDownloadAssetData() { }

	// RVA: 0xF8A608 Offset: 0xF8A608 VA: 0xF8A608
	protected void EndFontAssetData() { }

	// RVA: 0xF8A600 Offset: 0xF8A600 VA: 0xF8A600
	protected void StartLoadAudioAssetData() { }

	// RVA: 0xF8A610 Offset: 0xF8A610 VA: 0xF8A610
	protected void LoadAudioAssetData() { }

	// RVA: 0xF785EC Offset: 0xF785EC VA: 0xF785EC
	protected void PlayLocal(ScriptManager.PlayMode mode, ScriptManager.StartMode start, string data, bool isCollection, bool isSkip, bool isBackLog, bool isButtonDisable, long[] parameterList, ScriptManager.CallbackFunc callbackFunc, int jumpLine = -1) { }

	// RVA: 0xF8A728 Offset: 0xF8A728 VA: 0xF8A728
	protected void PlayLocal(ScriptManager.PlayMode mode, ScriptManager.StartMode start, string data, string orgData, string[] list, int genderIndex, ScriptManager.CallbackFunc callbackFunc, int jumpLine = -1, DebugTestRootComponent.ScriptReloadCallback reloadCallback) { }

	// RVA: 0xF8AA14 Offset: 0xF8AA14 VA: 0xF8AA14
	protected ScriptFlagData SearchFlag(string name) { }

	// RVA: 0xF87BF0 Offset: 0xF87BF0 VA: 0xF87BF0
	protected void AnalysScript(string scriptData, string orgScriptData) { }

	// RVA: 0xF8AB50 Offset: 0xF8AB50 VA: 0xF8AB50
	protected void AnalysText(ref List<string> tagDataList, ref List<string> scriptDataList, ref List<int> lineDataList, ref List<int> orgLineDataList, ref int lastMessageIndex, ref string talkName, ref bool messageLine, ref int fontSize, string analysData, int line, int orgLine) { }

	// RVA: 0xF89284 Offset: 0xF89284 VA: 0xF89284
	protected string[] AnalysParam(string data) { }

	// RVA: 0xF92200 Offset: 0xF92200 VA: 0xF92200
	protected string GetAfterParam(string data, int index) { }

	// RVA: 0xF92844 Offset: 0xF92844 VA: 0xF92844
	protected bool TDelayJumpScript(int index) { }

	// RVA: 0xF92880 Offset: 0xF92880 VA: 0xF92880
	protected bool JumpScript(int index) { }

	// RVA: 0xF8A2A0 Offset: 0xF8A2A0 VA: 0xF8A2A0
	protected bool JumpScript(string label) { }

	// RVA: 0xF92BE4 Offset: 0xF92BE4 VA: 0xF92BE4
	private bool SearchBranchLabel(string label, int beforeExecuteIndex, bool isAfterSearch) { }

	// RVA: 0xF92CC0 Offset: 0xF92CC0 VA: 0xF92CC0
	private bool SetJumpIndexByLabel(string label, int index, ref bool isResetSwitchCase) { }

	// RVA: 0xF92EF4 Offset: 0xF92EF4 VA: 0xF92EF4
	protected bool JumpScriptCommand(string command) { }

	// RVA: 0xF9307C Offset: 0xF9307C VA: 0xF9307C
	protected bool JumpScriptSwitchCase(int index) { }

	// RVA: 0xF93264 Offset: 0xF93264 VA: 0xF93264
	protected string GetStringParameter(string[] pd, int s, string name) { }

	// RVA: 0xF9347C Offset: 0xF9347C VA: 0xF9347C
	protected int[] GetPositionParameter(string[] pd, int s, string name) { }

	// RVA: 0xF93778 Offset: 0xF93778 VA: 0xF93778
	protected int GetIntegerParameter(string[] pd, int s, string name) { }

	// RVA: 0xF93838 Offset: 0xF93838 VA: 0xF93838
	protected float GetFloatParameter(string[] pd, int s, string name) { }

	// RVA: 0xF93900 Offset: 0xF93900 VA: 0xF93900
	protected int ConvertCharaIndex(string s) { }

	// RVA: 0xF93990 Offset: 0xF93990 VA: 0xF93990
	protected int ConvertCharaIndexTalk(string s) { }

	// RVA: 0xF91BC8 Offset: 0xF91BC8 VA: 0xF91BC8
	protected string ConvertNameString(string s) { }

	// RVA: 0xF93BA4 Offset: 0xF93BA4 VA: 0xF93BA4
	protected Color ConvertColor(string s) { }

	// RVA: 0xF91FB0 Offset: 0xF91FB0 VA: 0xF91FB0
	protected string ConvertTalkEffectName(string s) { }

	// RVA: 0xF91B54 Offset: 0xF91B54 VA: 0xF91B54
	protected string ConvertFontName(string s) { }

	// RVA: 0xF91CBC Offset: 0xF91CBC VA: 0xF91CBC
	protected string ConvertPictureFrameImageName(string s) { }

	// RVA: 0xF91D30 Offset: 0xF91D30 VA: 0xF91D30
	protected string ConvertBackTextureName(string s) { }

	// RVA: 0xF91F3C Offset: 0xF91F3C VA: 0xF91F3C
	private string ConvertSpriteMaskName(string s) { }

	// RVA: 0xF920D8 Offset: 0xF920D8 VA: 0xF920D8
	protected string ConvertWipeName(string s) { }

	// RVA: 0xF93D04 Offset: 0xF93D04 VA: 0xF93D04
	protected CommonEffectManager.FlipKind ConvertEffectFlipKind(string s) { }

	// RVA: 0xF93E14 Offset: 0xF93E14 VA: 0xF93E14
	protected Color ConvertMovieColor(string s) { }

	// RVA: 0xF93EEC Offset: 0xF93EEC VA: 0xF93EEC
	protected string ConvertMovieName(string s) { }

	// RVA: 0xF91AE0 Offset: 0xF91AE0 VA: 0xF91AE0
	protected string ConvertCRIMovieName(string s) { }

	// RVA: 0xF93F60 Offset: 0xF93F60 VA: 0xF93F60
	protected bool ConvertCRIMovieBgmStop(string s) { }

	// RVA: 0xF93FC0 Offset: 0xF93FC0 VA: 0xF93FC0
	protected bool ConvertCRIMovieSeStop(string s) { }

	// RVA: 0xF94020 Offset: 0xF94020 VA: 0xF94020
	protected bool ConvertCRIMovieVoiceStop(string s) { }

	// RVA: 0xF94080 Offset: 0xF94080 VA: 0xF94080
	protected bool ConvertCRIMovieScriptStop(string s) { }

	// RVA: 0xF940F8 Offset: 0xF940F8 VA: 0xF940F8
	protected ScriptManager.MenuRouteInfo.RouteType ConvertToRouteType(string s) { }

	// RVA: 0xF941CC Offset: 0xF941CC VA: 0xF941CC
	protected int GetQuestId(string key) { }

	// RVA: 0xF83814 Offset: 0xF83814 VA: 0xF83814
	protected void ReleaseAsset() { }

	// RVA: 0xF83D54 Offset: 0xF83D54 VA: 0xF83D54
	private void ReleaseAudioAssetList() { }

	// RVA: 0xF928C0 Offset: 0xF928C0 VA: 0xF928C0
	public void EndExecuteScript(string endFadeColor) { }

	// RVA: 0xF94294 Offset: 0xF94294 VA: 0xF94294
	private ScriptManager.StartMode GetEndMode(string endFadeColor) { }

	// RVA: 0xF9446C Offset: 0xF9446C VA: 0xF9446C
	protected void ExitExecuteScript() { }

	// RVA: 0xF94E00 Offset: 0xF94E00 VA: 0xF94E00
	protected void SoundStopAll() { }

	// RVA: 0xF94E90 Offset: 0xF94E90 VA: 0xF94E90
	private void SoundStopAllFade(float time) { }

	// RVA: 0xF94F44 Offset: 0xF94F44 VA: 0xF94F44
	private bool IsEqualTalkName(string name) { }

	// RVA: 0xF85D08 Offset: 0xF85D08 VA: 0xF85D08
	public bool IsJumpLine() { }
