	public const FuncList.TYPE SHIFT_SERVANT = 54;
	public const FuncList.TYPE DAMAGE_NP_AND_CHECK_INDIVIDUALITY = 55;
	public const FuncList.TYPE ABSORB_NPTURN = 56;
	public const FuncList.TYPE OVERWRITE_DEAD_TYPE = 57;
	public const FuncList.TYPE FORCE_ALL_BUFF_NOACT = 58;
	public const FuncList.TYPE BREAK_GAUGE_UP = 59;
	public const FuncList.TYPE BREAK_GAUGE_DOWN = 60;
	public const FuncList.TYPE MOVE_TO_LAST_SUBMEMBER = 61;
	public const FuncList.TYPE GET_REWARD_GIFT = 117;
	public const FuncList.TYPE SEND_SUPPORT_FRIEND_POINT = 118;
	public const FuncList.TYPE MOVE_POSITION = 119;
	public const FuncList.TYPE REVIVAL = 120;
	public const FuncList.TYPE DAMAGE_NP_INDIVIDUAL_SUM = 121;
	public const FuncList.TYPE DAMAGE_VALUE_SAFE = 122;
	public const FuncList.TYPE MOVE_STATE = 124;
	public const FuncList.TYPE CHANGE_BGM_COSTUME = 125;
	public const FuncList.TYPE FUNC_126 = 126;
	public const FuncList.TYPE FUNC_127 = 127;
	public const FuncList.TYPE UPDATE_ENTRY_POSITIONS = 128;
}

// Namespace: 
public enum FuncList.COND // TypeDefIndex: 6141
{
	// Fields
	public int value__; // 0x0
	public const FuncList.COND NONE = 0;
	public const FuncList.COND INVARIABLY = 1;
	public const FuncList.COND PROB = 2;
	public const FuncList.COND MOREHP = 3;
	public const FuncList.COND LESSHP = 4;
}

// Namespace: 
public class GameEventType // TypeDefIndex: 6142
{
	// Methods

	// RVA: 0x1E8D518 Offset: 0x1E8D518 VA: 0x1E8D518
	public void .ctor() { }
}

// Namespace: 
public enum GameEventType.TYPE // TypeDefIndex: 6143
{
	// Fields
	public int value__; // 0x0
	public const GameEventType.TYPE NONE = 0;
	public const GameEventType.TYPE RAID_BOSS = 1;
	public const GameEventType.TYPE PVP = 2;
	public const GameEventType.TYPE POINT = 3;
	public const GameEventType.TYPE LOGIN_BONUS = 4;
	public const GameEventType.TYPE COMBINE_CAMPAIGN = 5;
	public const GameEventType.TYPE SHOP = 6;
	public const GameEventType.TYPE QUEST_CAMPAIGN = 7;
	public const GameEventType.TYPE BANK = 8;
	public const GameEventType.TYPE SERIAL_CAMPAIGN = 9;
	public const GameEventType.TYPE LOGIN_CAMPAIGN = 10;
	public const GameEventType.TYPE LOGIN_CAMPAIGN_REPEAT = 11;
	public const GameEventType.TYPE EVENT_QUEST = 12;
	public const GameEventType.TYPE SVTEQUIP_COMBINE_CAMPAIGN = 13;
	public const GameEventType.TYPE TERMINAL_BANNER = 14;
	public const GameEventType.TYPE BOX_GACHA = 15;
	public const GameEventType.TYPE BOX_GACHA_POINT = 16;
	public const GameEventType.TYPE LOGIN_CAMPAIGN_STRICT = 17;
	public const GameEventType.TYPE TOTAL_LOGIN = 18;
	public const GameEventType.TYPE COMEBACK_CAMPAIGN = 19;
	public const GameEventType.TYPE LOCATION_CAMPAIGN = 20;
	public const GameEventType.TYPE WAR_BOARD = 22;
	public const GameEventType.TYPE COMBINE_COSUTUME_ITEM = 23;
	public const GameEventType.TYPE TREASURE_BOX = 24;
}

// Namespace: 
public class GamePurchase // TypeDefIndex: 6144
{
	// Methods

	// RVA: 0x20F8A6C Offset: 0x20F8A6C VA: 0x20F8A6C
	public void .ctor() { }
}

// Namespace: 
public enum GamePurchase.Type // TypeDefIndex: 6145
{
	// Fields
	public int value__; // 0x0
	public const GamePurchase.Type ALL = 0;
	public const GamePurchase.Type NONE = 0;
	public const GamePurchase.Type ITEM = 1;
	public const GamePurchase.Type EQUIP = 2;
	public const GamePurchase.Type FRIEND_GACHA = 3;
	public const GamePurchase.Type SERVANT = 4;
	public const GamePurchase.Type SET_ITEM = 5;
	public const GamePurchase.Type QUEST = 6;
	public const GamePurchase.Type EVENT_SHOP = 7;
	public const GamePurchase.Type EVENT_SVT_GET = 8;
	public const GamePurchase.Type MANA_SHOP = 9;
	public const GamePurchase.Type STORAGE_SVT = 10;
	public const GamePurchase.Type STORAGE_SVTEQUIP = 11;
	public const GamePurchase.Type BGM = 12;
	public const GamePurchase.Type COSTUME_RELEASE = 14;
	public const GamePurchase.Type BGM_RELEASE = 15;
	public const GamePurchase.Type LOTTERY_SHOP = 16;
	public const GamePurchase.Type EVENT_FACTORY = 17;
	public const GamePurchase.Type ITEM_AS_PRESENT = 18;
	public const GamePurchase.Type COMMAND_CODE = 19;
	public const GamePurchase.Type GIFT = 20;
	public const GamePurchase.Type EVENT_SVT_JOIN = 21;
	public const GamePurchase.Type ASSIST = 22;
}

// Namespace: 
public class Gender // TypeDefIndex: 6146
{
	// Fields
	protected static readonly string[] nameList; // 0x0
	protected Gender.Type type; // 0x10

	// Properties
	public Gender.Type Value { get; set; }

	// Methods

	// RVA: 0x20F8A74 Offset: 0x20F8A74 VA: 0x20F8A74
	public void .ctor() { }

	// RVA: 0x20F8AA0 Offset: 0x20F8AA0 VA: 0x20F8AA0
	public void .ctor(Gender.Type type) { }

	// RVA: 0x20F8ACC Offset: 0x20F8ACC VA: 0x20F8ACC
	public void .ctor(string name) { }

	// RVA: 0x20F8C70 Offset: 0x20F8C70 VA: 0x20F8C70
	public static string ToName(Gender.Type type) { }

	// RVA: 0x20F8B50 Offset: 0x20F8B50 VA: 0x20F8B50
	public static Gender.Type Parse(string name) { }

	// RVA: 0x20F8D14 Offset: 0x20F8D14 VA: 0x20F8D14
	public static int ToData(string name) { }

	// RVA: 0x20F8E34 Offset: 0x20F8E34 VA: 0x20F8E34
	public Gender.Type get_Value() { }

	// RVA: 0x20F8E3C Offset: 0x20F8E3C VA: 0x20F8E3C
	public void set_Value(Gender.Type value) { }

	// RVA: 0x20F8E44 Offset: 0x20F8E44 VA: 0x20F8E44
	public Gender.Type Get() { }

	// RVA: 0x20F8E4C Offset: 0x20F8E4C VA: 0x20F8E4C
	public string ToString() { }

	// RVA: 0x20F8EB4 Offset: 0x20F8EB4 VA: 0x20F8EB4
	public int ToInteger() { }

	// RVA: 0x20F8EBC Offset: 0x20F8EBC VA: 0x20F8EBC
	public void Set(Gender.Type type) { }

	// RVA: 0x20F8EC4 Offset: 0x20F8EC4 VA: 0x20F8EC4
	public void Set(string name) { }

	// RVA: 0x20F8F3C Offset: 0x20F8F3C VA: 0x20F8F3C
	private static void .cctor() { }
}

// Namespace: 
public enum Gender.Type // TypeDefIndex: 6147
{
	// Fields
	public int value__; // 0x0
	public const Gender.Type MALE = 1;
	public const Gender.Type FEMALE = 2;
	public const Gender.Type OTHER = 3;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC9139C Offset: 0xC9139C VA: 0xC9139C
public static class Gift // TypeDefIndex: 6148
{
	// Methods

	[ExtensionAttribute] // RVA: 0xD36138 Offset: 0xD36138 VA: 0xD36138
	// RVA: 0x20F9ADC Offset: 0x20F9ADC VA: 0x20F9ADC
	public static bool IsItem(Gift.Type type) { }

	// RVA: 0x20F9AEC Offset: 0x20F9AEC VA: 0x20F9AEC
	public static bool IsItem(int type) { }

	[ExtensionAttribute] // RVA: 0xD36148 Offset: 0xD36148 VA: 0xD36148
	// RVA: 0x20F9AFC Offset: 0x20F9AFC VA: 0x20F9AFC
	public static bool IsServant(Gift.Type type) { }

	// RVA: 0x20F9B24 Offset: 0x20F9B24 VA: 0x20F9B24
	public static bool IsServant(int type) { }

	[ExtensionAttribute] // RVA: 0xD36158 Offset: 0xD36158 VA: 0xD36158
	// RVA: 0x20F9B4C Offset: 0x20F9B4C VA: 0x20F9B4C
	public static bool IsEventSvtGet(Gift.Type type) { }

	// RVA: 0x20F9B58 Offset: 0x20F9B58 VA: 0x20F9B58
	public static bool IsEventSvtGet(int type) { }

	[ExtensionAttribute] // RVA: 0xD36168 Offset: 0xD36168 VA: 0xD36168
	// RVA: 0x20F9B64 Offset: 0x20F9B64 VA: 0x20F9B64
	public static bool IsEventSvtJoin(Gift.Type type) { }

	// RVA: 0x20F9B70 Offset: 0x20F9B70 VA: 0x20F9B70
	public static bool IsEventSvtJoin(int type) { }

	[ExtensionAttribute] // RVA: 0xD36178 Offset: 0xD36178 VA: 0xD36178
	// RVA: 0x20F9B7C Offset: 0x20F9B7C VA: 0x20F9B7C
	public static string CountTextWithPrefix(Gift.Type type, string unitString, int num) { }

	[ExtensionAttribute] // RVA: 0xD36188 Offset: 0xD36188 VA: 0xD36188
	// RVA: 0x20F9CCC Offset: 0x20F9CCC VA: 0x20F9CCC
	public static bool IsCostumeRelease(Gift.Type type) { }

	// RVA: 0x20F9CD8 Offset: 0x20F9CD8 VA: 0x20F9CD8
	public static bool IsCostumeGet(int type) { }

	[ExtensionAttribute] // RVA: 0xD36198 Offset: 0xD36198 VA: 0xD36198
	// RVA: 0x20F9CE4 Offset: 0x20F9CE4 VA: 0x20F9CE4
	public static bool IsEquip(Gift.Type type) { }

	[ExtensionAttribute] // RVA: 0xD361A8 Offset: 0xD361A8 VA: 0xD361A8
	// RVA: 0x20F9CF0 Offset: 0x20F9CF0 VA: 0x20F9CF0
	public static bool IsCommandCode(Gift.Type type) { }

	// RVA: 0x20F9CFC Offset: 0x20F9CFC VA: 0x20F9CFC
	public static bool IsCommandCode(int type) { }

	[ExtensionAttribute] // RVA: 0xD361B8 Offset: 0xD361B8 VA: 0xD361B8
	// RVA: 0x20F9D08 Offset: 0x20F9D08 VA: 0x20F9D08
	public static bool IsEventPointBuff(Gift.Type type) { }

	// RVA: 0x20F9D14 Offset: 0x20F9D14 VA: 0x20F9D14
	public static bool IsEventPointBuff(int type) { }
}

// Namespace: 
public enum Gift.Type // TypeDefIndex: 6149
{
	// Fields
	public int value__; // 0x0
	public const Gift.Type SERVANT = 1;
	public const Gift.Type ITEM = 2;
	public const Gift.Type FRIENDSHIP = 3;
	public const Gift.Type USER_EXP = 4;
	public const Gift.Type EQUIP = 5;
	public const Gift.Type EVENT_SVT_JOIN = 6;
	public const Gift.Type EVENT_SVT_GET = 7;
	public const Gift.Type QUEST_REWARD_ICON = 8;
	public const Gift.Type COSTUME_RELEASE = 9;
	public const Gift.Type COSTUME_GET = 10;
	public const Gift.Type COMMAND_CODE = 11;
	public const Gift.Type EVENT_POINT_BUFF = 12;
	public const Gift.Type EVENT_BOARD_GAME_TOKEN = 13;
}

// Namespace: 
public class Grade // TypeDefIndex: 6150
{
	// Fields
	protected static readonly string[] gradeIconFileList; // 0x0
	protected static readonly string[] masterProfileBgFileList; // 0x8
	protected static readonly string[] masterProfileBgLineFileList; // 0x10
	protected static readonly string[] masterEquipBgFileList; // 0x18
	protected static readonly string[] battleIconBgFileList; // 0x20
	protected static readonly string[] mainMstIconBgFileList; // 0x28
	protected static readonly string[] supportBgFileList; // 0x30
	protected static readonly string[] followerBgFileList; // 0x38

	// Methods

	// RVA: 0x2109C7C Offset: 0x2109C7C VA: 0x2109C7C
	public void .ctor() { }

	// RVA: 0x2109C84 Offset: 0x2109C84 VA: 0x2109C84
	public static Grade.Kind GetKind() { }

	// RVA: 0x2109CF0 Offset: 0x2109CF0 VA: 0x2109CF0
	public static Grade.Kind GetKind(UserGameEntity userGameEntity) { }

	// RVA: 0x2109D64 Offset: 0x2109D64 VA: 0x2109D64
	public static Grade.Kind GetKind(OtherUserGameEntity otherUserGameEntity) { }

	// RVA: 0x2109DD8 Offset: 0x2109DD8 VA: 0x2109DD8
	public static Grade.Kind GetKind(FollowerInfo followerInfo) { }

	// RVA: 0x2109E4C Offset: 0x2109E4C VA: 0x2109E4C
	public static string GetIconImage(Grade.Kind gradeKind) { }

	// RVA: 0x2109EEC Offset: 0x2109EEC VA: 0x2109EEC
	public static string GetMasterProfileBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x2109F8C Offset: 0x2109F8C VA: 0x2109F8C
	public static string GetMasterProfileBgLineImage(Grade.Kind gradeKind) { }

	// RVA: 0x210A02C Offset: 0x210A02C VA: 0x210A02C
	public static string GetMasterEquipBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x210A0CC Offset: 0x210A0CC VA: 0x210A0CC
	public static string GetBattleIconBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x210A16C Offset: 0x210A16C VA: 0x210A16C
	public static string GetMainMstIconBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x210A20C Offset: 0x210A20C VA: 0x210A20C
	public static string GetSupportBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x210A2AC Offset: 0x210A2AC VA: 0x210A2AC
	public static string GetFollowerBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x210A34C Offset: 0x210A34C VA: 0x210A34C
	private static void .cctor() { }
}

// Namespace: 
public enum Grade.Kind // TypeDefIndex: 6151
{
	// Fields
	public int value__; // 0x0
	public const Grade.Kind NONE = 0;
	public const Grade.Kind FES = 1;
}

// Namespace: 
public class ImageItem // TypeDefIndex: 6152
{
	// Methods

	// RVA: 0x1715108 Offset: 0x1715108 VA: 0x1715108
	public void .ctor() { }

	// RVA: 0x1715110 Offset: 0x1715110 VA: 0x1715110
	public static bool IsTreasure(int id) { }

	// RVA: 0x1715120 Offset: 0x1715120 VA: 0x1715120
	public static bool IsTreasure(ImageItem.Id id) { }
}

// Namespace: 
public enum ImageItem.Id // TypeDefIndex: 6153
{
	// Fields
	public int value__; // 0x0
	public const ImageItem.Id NONE = 0;
	public const ImageItem.Id TREASURE_1 = 1;
	public const ImageItem.Id TREASURE_2 = 2;
	public const ImageItem.Id TREASURE_3 = 3;
	public const ImageItem.Id SERVANT = 4;
	public const ImageItem.Id QP = 5;
	public const ImageItem.Id STONE = 6;
	public const ImageItem.Id MANA = 7;
	public const ImageItem.Id NP = 8;
	public const ImageItem.Id SKILL = 9;
	public const ImageItem.Id SVT_EQUIP = 10;
	public const ImageItem.Id GACHA_TICKET = 11;
	public const ImageItem.Id FRIEND_POINT = 12;
	public const ImageItem.Id STONE_FRAGMENTS = 16;
	public const ImageItem.Id ANONYMOUS = 17;
	public const ImageItem.Id RARE_PRI = 18;
	public const ImageItem.Id SVT_COSTUME_RELEASE = 23;
	public const ImageItem.Id QUESTION_MARK = 99;
	public const ImageItem.Id QUESTION_MARK2 = 8007;
	public const ImageItem.Id SERVANT_SVT = 8008;
	public const ImageItem.Id SERVANT_EQ = 8009;
	public const ImageItem.Id COMMAND_CODE = 8014;
}

// Namespace: 
public class ImageLimitCount // TypeDefIndex: 6154
{
	// Fields
	public const int FIRST_CHANGE_LIMIT_COUNT = 1;
	public const int SECOND_CHANGE_LIMIT_COUNT = 3;
	public const int REWARD_IMAGE_LIMIT_COUNT = 3;
	public const int COSTUME_IMAGE_LIMIT_COUNT = 11;
	protected static readonly int[] imageLimitCountList; // 0x0
	protected static readonly int[] minLimitCountList; // 0x8
	protected static readonly int[] maxLimitCountList; // 0x10
	protected static readonly int[] maxDispLimitCountList; // 0x18
	private static readonly int enemyLimitCountStart; // 0x20
	protected static Dictionary<int, int> limitMaxList; // 0x28

	// Methods

	// RVA: 0x1715140 Offset: 0x1715140 VA: 0x1715140
	public void .ctor() { }

	// RVA: 0x1715148 Offset: 0x1715148 VA: 0x1715148
	public static void Initialize() { }

	// RVA: 0x1715204 Offset: 0x1715204 VA: 0x1715204
	public static void initializeAssetStorage() { }

	// RVA: 0x1715208 Offset: 0x1715208 VA: 0x1715208
	public static int GetLimitCountByImageLimit(int imageLimitCount) { }

	// RVA: 0x17152F4 Offset: 0x17152F4 VA: 0x17152F4
	public static int GetLimitCountByImageLimitCostumeIn(int imageLimitCount) { }

	// RVA: 0x17153EC Offset: 0x17153EC VA: 0x17153EC
	public static int GetRewardImageLimitCount(int svtId, int limitCount) { }

	// RVA: 0x1715568 Offset: 0x1715568 VA: 0x1715568
	public static int GetLimitCountByImageLimit(int imageLimitCount, int maxLimitCount) { }

	// RVA: 0x1715660 Offset: 0x1715660 VA: 0x1715660
	public static int GetLimitCountByDispLimit(int dispLimitCount, int maxLimitCount) { }

	// RVA: 0x1715764 Offset: 0x1715764 VA: 0x1715764
	public static int GetImageLimitCount(int svtId, int limitCount) { }

	// RVA: 0x171592C Offset: 0x171592C VA: 0x171592C
	public static int GetCardImageLimitCount(int svtId, int limitCount, bool isOwn = True, bool isNpc = False) { }

	// RVA: 0x1715B2C Offset: 0x1715B2C VA: 0x1715B2C
	public static int[] GetSelectList(int svtId, int limitCount, int[] costumeIds) { }

	// RVA: 0x1715CB8 Offset: 0x1715CB8 VA: 0x1715CB8
	public static int[] GetSelectList(int svtId, int limitCount, int costumeId, bool isOwn = False) { }

	// RVA: 0x1715E1C Offset: 0x1715E1C VA: 0x1715E1C
	public static int[] GetCardSelectList(int svtId, int limitCount, int[] costumeIds) { }

	// RVA: 0x1715FB0 Offset: 0x1715FB0 VA: 0x1715FB0
	public static int[] GetCardSelectList(int svtId, int limitCount, int costumeId) { }

	// RVA: 0x17160D8 Offset: 0x17160D8 VA: 0x17160D8
	private static void .cctor() { }
}

// Namespace: 
public static class Individuality // TypeDefIndex: 6155
{
	// Methods

	// RVA: 0x1716234 Offset: 0x1716234 VA: 0x1716234
	public static bool CheckSignedIndividualities(int[] self, int[] signedTarget) { }

	// RVA: 0x171655C Offset: 0x171655C VA: 0x171655C
	public static bool CheckSignedIndividualities(int[] self, int[] signedTarget, Func<int[], int[], bool> matchedFunc, Func<int[], int[], bool> mismatchFunc) { }

	// RVA: 0x1716314 Offset: 0x1716314 VA: 0x1716314
	public static void DivideUnsignedAndSignedArray(int[] baseArray, out int[] unsignedArray, out int[] signedArray) { }

	// RVA: 0x17166AC Offset: 0x17166AC VA: 0x17166AC
	public static bool CheckIndividualities(int[] self, int[] target) { }

	// RVA: 0x1716798 Offset: 0x1716798 VA: 0x1716798
	public static bool CheckIndividualities(int[] self, long[] target) { }

	// RVA: 0x1716884 Offset: 0x1716884 VA: 0x1716884
	public static bool ContainsIndividualities(int[] self, int[] target) { }

	// RVA: 0x17169E8 Offset: 0x17169E8 VA: 0x17169E8
	public static bool CheckAllIndividualities(int[] self, int[] target) { }

	// RVA: 0x171647C Offset: 0x171647C VA: 0x171647C
	public static bool IsPartialMatchArray(int[] selfs, int[] targets) { }

	// RVA: 0x1716BC0 Offset: 0x1716BC0 VA: 0x1716BC0
	public static bool IsMatchArray(int[] selfs, int[] targets) { }
}

// Namespace: 
public enum Individuality.TYPE // TypeDefIndex: 6156
{
	// Fields
	public int value__; // 0x0
	public const Individuality.TYPE NONE = 0;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE6B0 Offset: 0xCAE6B0 VA: 0xCAE6B0
private sealed class Individuality.<ContainsIndividualities>c__AnonStorey0 // TypeDefIndex: 6157
{
	// Fields
	internal int type; // 0x10

	// Methods

	// RVA: 0x17169E0 Offset: 0x17169E0 VA: 0x17169E0
	public void .ctor() { }

	// RVA: 0x1716D80 Offset: 0x1716D80 VA: 0x1716D80
	internal bool <>m__0(int tg) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE6C0 Offset: 0xCAE6C0 VA: 0xCAE6C0
private sealed class Individuality.<CheckAllIndividualities>c__AnonStorey1 // TypeDefIndex: 6158
{
	// Fields
	internal int[] target; // 0x10

	// Methods

	// RVA: 0x1716BB0 Offset: 0x1716BB0 VA: 0x1716BB0
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE6D0 Offset: 0xCAE6D0 VA: 0xCAE6D0
private sealed class Individuality.<CheckAllIndividualities>c__AnonStorey2 // TypeDefIndex: 6159
{
	// Fields
	internal int i; // 0x10
	internal Individuality.<CheckAllIndividualities>c__AnonStorey1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x1716BB8 Offset: 0x1716BB8 VA: 0x1716BB8
	public void .ctor() { }

	// RVA: 0x1716D08 Offset: 0x1716D08 VA: 0x1716D08
	internal bool <>m__0(int sf) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCAE6E0 Offset: 0xCAE6E0 VA: 0xCAE6E0
private sealed class Individuality.<IsMatchArray>c__AnonStorey3 // TypeDefIndex: 6160
{
	// Fields
	internal int target; // 0x10

	// Methods

	// RVA: 0x1716D00 Offset: 0x1716D00 VA: 0x1716D00
	public void .ctor() { }

	// RVA: 0x1716D90 Offset: 0x1716D90 VA: 0x1716D90
	internal bool <>m__0(int self) { }
}

// Namespace: 
public class ItemType // TypeDefIndex: 6161
{
	// Properties
	public static string CrossOperatorString { get; }
	public static string PlusOperatorString { get; }

	// Methods

	// RVA: 0x17220C0 Offset: 0x17220C0 VA: 0x17220C0
	public void .ctor() { }

	// RVA: 0x171A99C Offset: 0x171A99C VA: 0x171A99C
	public static bool IsCountableWithPlus(ItemType.Type type) { }

	// RVA: 0x171E5F0 Offset: 0x171E5F0 VA: 0x171E5F0
	public static string get_CrossOperatorString() { }

	// RVA: 0x17220C8 Offset: 0x17220C8 VA: 0x17220C8
	public static string get_PlusOperatorString() { }

	// RVA: 0x171E5C8 Offset: 0x171E5C8 VA: 0x171E5C8
	public static string GetCountableString(ItemType.Type type) { }

	// RVA: 0x171A680 Offset: 0x171A680 VA: 0x171A680
	public static string GetCountText(ItemType.Type type, int num) { }
}

// Namespace: 
public enum ItemType.Type // TypeDefIndex: 6162
{
	// Fields
	public int value__; // 0x0
	public const ItemType.Type QP = 1;
	public const ItemType.Type STONE = 2;
	public const ItemType.Type AP_RECOVER = 3;
	public const ItemType.Type AP_ADD = 4;
	public const ItemType.Type MANA = 5;
	public const ItemType.Type KEY = 6;
	public const ItemType.Type GACHA_CLASS = 7;
	public const ItemType.Type GACHA_RELIC = 8;
	public const ItemType.Type GACHA_TICKET = 9;
	public const ItemType.Type LIMIT = 10;
	public const ItemType.Type SKILL_LV_UP = 11;
	public const ItemType.Type TD_LV_UP = 12;
	public const ItemType.Type FRIEND_POINT = 13;
	public const ItemType.Type EVENT_POINT = 14;
	public const ItemType.Type EVENT_ITEM = 15;
	public const ItemType.Type QUEST_REWARD_QP = 16;
	public const ItemType.Type CHARGE_STONE = 17;
	public const ItemType.Type RP_ADD = 18;
	public const ItemType.Type BOOST_ITEM = 19;
	public const ItemType.Type STONE_FRAGMENTS = 20;
	public const ItemType.Type ANONYMOUS = 21;
	public const ItemType.Type RARE_PRI = 22;
	public const ItemType.Type COSTUME_RELEASE = 23;
	public const ItemType.Type ITEM_SELECT = 24;
	public const ItemType.Type COMMAND_CARD_PRM_UP = 25;
	public const ItemType.Type DICE = 26;
	public const ItemType.Type CONTINUE_ITEM = 27;
	public const ItemType.Type EUQIP_SKILL_USE_ITEM = 28;
	public const ItemType.Type SVT_COIN = 29;
	public const ItemType.Type FRIENDSHIP_UP_ITEM = 30;
	public const ItemType.Type PP = 31;
}

// Namespace: 
public class MissionProgressType // TypeDefIndex: 6163
{
	// Methods

	// RVA: 0x16EE76C Offset: 0x16EE76C VA: 0x16EE76C
	public void .ctor() { }
}

// Namespace: 
public enum MissionProgressType.Type // TypeDefIndex: 6164
{
	// Fields
	public int value__; // 0x0
	public const MissionProgressType.Type NONE = 0;
	public const MissionProgressType.Type REGIST = 1;
	public const MissionProgressType.Type OPEN_CONDITION = 2;
	public const MissionProgressType.Type START = 3;
	public const MissionProgressType.Type CLEAR = 4;
	public const MissionProgressType.Type ACHIEVE = 5;
}

// Namespace: 
public static class MissionType // TypeDefIndex: 6165
{
	// Methods

	// RVA: 0x16EF504 Offset: 0x16EF504 VA: 0x16EF504
	public static bool IsMasterMission(MissionType.Type type) { }
}

// Namespace: 
public enum MissionType.Type // TypeDefIndex: 6166
{
	// Fields
	public int value__; // 0x0
	public const MissionType.Type NONE = 0;
	public const MissionType.Type EVENT = 1;
	public const MissionType.Type WEEKLY = 2;
	public const MissionType.Type DAILY = 3;
	public const MissionType.Type EXTRA = 4;
	public const MissionType.Type LIMITED = 5;
	public const MissionType.Type COMPLETE = 6;
	public const MissionType.Type RANDOM = 7;
}

// Namespace: 
public class News // TypeDefIndex: 6167
{
	// Methods

	// RVA: 0x18C9BB4 Offset: 0x18C9BB4 VA: 0x18C9BB4
	public void .ctor() { }
}

// Namespace: 
public enum News.Type // TypeDefIndex: 6168
{
	// Fields
	public int value__; // 0x0
	public const News.Type NONE = 0;
	public const News.Type HTML_TEXT = 1;
	public const News.Type HTML_URL = 2;
	public const News.Type TEMPLATE = 3;
	public const News.Type DATA = 4;
}

// Namespace: 
public class PayType // TypeDefIndex: 6169
{
	// Methods

	// RVA: 0x1BD135C Offset: 0x1BD135C VA: 0x1BD135C
	public void .ctor() { }
}

// Namespace: 
public enum PayType.Type // TypeDefIndex: 6170
{
	// Fields
	public int value__; // 0x0
	public const PayType.Type STONE = 1;
	public const PayType.Type QP = 2;
	public const PayType.Type FRIEND_POINT = 3;
	public const PayType.Type MANA = 4;
	public const PayType.Type TICKET = 5;
	public const PayType.Type EVENT_ITEM = 6;
	public const PayType.Type CHARGE_STONE = 7;
	public const PayType.Type STONE_FRAGMENTS = 8;
	public const PayType.Type ANONYMOUS = 9;
	public const PayType.Type RARE_PRI = 10;
	public const PayType.Type ITEM = 11;
	public const PayType.Type GRAIL_FRAGMENTS = 12;
	public const PayType.Type FREE = 13;
}

// Namespace: 
public static class QuestGroupType // TypeDefIndex: 6171
{}

// Namespace: 
public enum QuestGroupType.Type // TypeDefIndex: 6172
{
	// Fields
	public int value__; // 0x0
	public const QuestGroupType.Type NONE = 0;
	public const QuestGroupType.Type EVENT_QUEST = 1;
	public const QuestGroupType.Type QUEST_RELEASE = 2;
	public const QuestGroupType.Type EVENT_POINT_QUEST = 3;
	public const QuestGroupType.Type EVENT_POINT_GROUP_QUEST = 4;
	public const QuestGroupType.Type EVENT_RACE_QUEST = 5;
	public const QuestGroupType.Type EVENT_RACE_GROUP_QUEST = 6;
	public const QuestGroupType.Type MISSION_GROUP_QUEST = 7;
	public const QuestGroupType.Type EVENT_TOWER = 8;
	public const QuestGroupType.Type EVENT_TOWER_FLOOR = 9;
	public const QuestGroupType.Type HIGHLIGHT_QUEST = 10;
	public const QuestGroupType.Type EVENT_DAILY_POINT = 11;
	public const QuestGroupType.Type EVENT_ACTIVITY_POINT_GAUGE = 12;
	public const QuestGroupType.Type INTERLUDE = 13;
	public const QuestGroupType.Type EVENT_BATTLE_LINE = 14;
	public const QuestGroupType.Type BATTLE_GROUP = 15;
	public const QuestGroupType.Type SHARE_QUEST_INFO = 16;
}

// Namespace: 
public class Rarity // TypeDefIndex: 6173
{
	// Fields
	public const int DEFAULT_RARE = 3;
	public const int BLANK_RARE = 6;
	public const int HIDE_RARE = 7;
	private static readonly int[] frameTypeImageTable; // 0x0
	private static readonly string[] designCardFileList; // 0x8
	private static readonly string[] rarityType; // 0x10

	// Methods

	// RVA: 0x181DAFC Offset: 0x181DAFC VA: 0x181DAFC
	public void .ctor() { }

	// RVA: 0x181DB04 Offset: 0x181DB04 VA: 0x181DB04
	public static int getFrameTypeImage(int rarityId, int classId = 0) { }

	// RVA: 0x181DBE4 Offset: 0x181DBE4 VA: 0x181DBE4
	public static string getIcon(int rarity) { }

	// RVA: 0x181DC7C Offset: 0x181DC7C VA: 0x181DC7C
	public static string getIcon(int rarity, int exceedCount, int lv) { }

	// RVA: 0x181DE4C Offset: 0x181DE4C VA: 0x181DE4C
	public static void setRarityIcon(UISprite sprite, int rarity, int exceedCount, int lv) { }

	// RVA: 0x181E034 Offset: 0x181E034 VA: 0x181E034
	public static string getDesignCardPrefix(int rarityId) { }

	// RVA: 0x181E0D4 Offset: 0x181E0D4 VA: 0x181E0D4
	public static int getLowerColorRarity(int rarityId) { }

	// RVA: 0x181E0E8 Offset: 0x181E0E8 VA: 0x181E0E8
	public static int getUpperColorRarity(int rarityId) { }

	// RVA: 0x181E10C Offset: 0x181E10C VA: 0x181E10C
	public static string getRarityType(int rarityId) { }

	// RVA: 0x181E218 Offset: 0x181E218 VA: 0x181E218
	private static void .cctor() { }
}

// Namespace: 
public enum Rarity.TYPE // TypeDefIndex: 6174
{
	// Fields
	public int value__; // 0x0
	public const Rarity.TYPE NONE = 0;
	public const Rarity.TYPE COMMON = 1;
	public const Rarity.TYPE UNCOMMON = 2;
	public const Rarity.TYPE RARE = 3;
	public const Rarity.TYPE SRARE = 4;
	public const Rarity.TYPE SSRARE = 5;
	public const Rarity.TYPE ACCESSORY = 101;
	public const Rarity.TYPE SUB_EQUIP = 102;
}

// Namespace: 
public class RecoverType // TypeDefIndex: 6175
{
	// Methods

	// RVA: 0x1AA1C40 Offset: 0x1AA1C40 VA: 0x1AA1C40
	public void .ctor() { }
}

// Namespace: 
public enum RecoverType.Type // TypeDefIndex: 6176
{
	// Fields
	public int value__; // 0x0
	public const RecoverType.Type COMMAND_SPELL = 1;
	public const RecoverType.Type STONE = 2;
	public const RecoverType.Type ITEM = 3;
}

// Namespace: 
public enum ResourceFolder // TypeDefIndex: 6177
{
	// Fields
	public int value__; // 0x0
	public const ResourceFolder COMMON_EFFECT = 0;
	public const ResourceFolder ACTOR_EFFECT = 1;
	public const ResourceFolder BATTLE_EFFECT = 2;
}

// Namespace: 
public class ResponseCommandKind // TypeDefIndex: 6178
{
	// Fields
	protected static Dictionary<ResponseCommandKind.Kind, string> nameList; // 0x0

	// Methods

	// RVA: 0x1AA591C Offset: 0x1AA591C VA: 0x1AA591C
	public void .ctor() { }

	// RVA: 0x1AA5888 Offset: 0x1AA5888 VA: 0x1AA5888
	public static string GetName(ResponseCommandKind.Kind kind) { }

	// RVA: 0x1A9C8C4 Offset: 0x1A9C8C4 VA: 0x1A9C8C4
	public static ResponseData SearchData(ResponseCommandKind.Kind kind, ResponseData[] responseList) { }

	// RVA: 0x1AA5924 Offset: 0x1AA5924 VA: 0x1AA5924
	private static void .cctor() { }
}

// Namespace: 
public enum ResponseCommandKind.Kind // TypeDefIndex: 6179
{
	// Fields
	public int value__; // 0x0
	public const ResponseCommandKind.Kind NONE = 0;
	public const ResponseCommandKind.Kind SIGNUP = 1;
	public const ResponseCommandKind.Kind ACCOUNT_REGIST = 2;
	public const ResponseCommandKind.Kind GAME_DATA = 3;
	public const ResponseCommandKind.Kind LOGIN = 4;
	public const ResponseCommandKind.Kind HOME = 5;
	public const ResponseCommandKind.Kind GACHA_DRAW = 6;
	public const ResponseCommandKind.Kind DECK_SETUP = 7;
	public const ResponseCommandKind.Kind USER_FORMATION = 8;
	public const ResponseCommandKind.Kind PURCHASE = 9;
	public const ResponseCommandKind.Kind PURCHASE_BY_STONE = 10;
	public const ResponseCommandKind.Kind PURCHASE_BY_BANK = 11;
	public const ResponseCommandKind.Kind SELL_SERVANT = 12;
	public const ResponseCommandKind.Kind FRIEND_OFFER = 13;
	public const ResponseCommandKind.Kind FRIEND_ACCEPT = 14;
	public const ResponseCommandKind.Kind FRIEND_REJECT = 15;
	public const ResponseCommandKind.Kind FRIEND_CANCEL = 16;
	public const ResponseCommandKind.Kind FRIEND_REMOVE = 17;
	public const ResponseCommandKind.Kind PROFILE = 18;
	public const ResponseCommandKind.Kind CHANGE_USERNAME = 19;
	public const ResponseCommandKind.Kind BATTLE_SETUP = 20;
	public const ResponseCommandKind.Kind BATTLE_TURN = 21;
	public const ResponseCommandKind.Kind BATTLE_RESULT = 22;
	public const ResponseCommandKind.Kind BATTLE_COMMANDSPELL = 23;
	public const ResponseCommandKind.Kind BATTLE_USECONTINUE = 24;
	public const ResponseCommandKind.Kind COMBINE_SERVANT = 25;
	public const ResponseCommandKind.Kind CARD_COMBINE_SKILL = 26;
	public const ResponseCommandKind.Kind CARD_COMBINE_TREASUREDVC = 27;
	public const ResponseCommandKind.Kind CARD_FRIENDSHIP_EXCEED = 28;
	public const ResponseCommandKind.Kind PRESENT_RECEIVE = 29;
	public const ResponseCommandKind.Kind CODE_INPUT = 30;
	public const ResponseCommandKind.Kind CONTINUE_PREPARE = 31;
	public const ResponseCommandKind.Kind CONTINUE_INPUT = 32;
	public const ResponseCommandKind.Kind CONTINUE_DECIDE = 33;
	public const ResponseCommandKind.Kind SET_FAVORITE_SERVANT = 34;
	public const ResponseCommandKind.Kind TUTORIAL_SET = 35;
	public const ResponseCommandKind.Kind TUTORIAL_CLEAR = 36;
	public const ResponseCommandKind.Kind BATTLE_RESUME = 37;
	public const ResponseCommandKind.Kind CARD_LIMIT = 38;
	public const ResponseCommandKind.Kind SERVANT_EQUIP_SET = 39;
	public const ResponseCommandKind.Kind SERVANT_EQUIP_COMBINE = 40;
	public const ResponseCommandKind.Kind DEBUG_QUEST = 41;
	public const ResponseCommandKind.Kind SET_BIRTHDAY = 42;
	public const ResponseCommandKind.Kind ITEM_USE = 43;
	public const ResponseCommandKind.Kind ITEM_RECOVER = 44;
	public const ResponseCommandKind.Kind COMMANDSPELL_USE = 45;
	public const ResponseCommandKind.Kind BOX_GACHA_DRAW = 46;
	public const ResponseCommandKind.Kind BOX_GACHA_RESET = 47;
	public const ResponseCommandKind.Kind MISSION_NOTIFY = 48;
	public const ResponseCommandKind.Kind EV_MISSION_REWARD = 49;
	public const ResponseCommandKind.Kind SUPPORT_SERVANT = 50;
	public const ResponseCommandKind.Kind BATTLE_SCENARIO = 51;
	public const ResponseCommandKind.Kind DECK_EDIT_NAME = 52;
	public const ResponseCommandKind.Kind DEBUG_SERVER_TIME = 53;
	public const ResponseCommandKind.Kind CARD_COMBINE_EXCEED = 54;
	public const ResponseCommandKind.Kind SET_LOCK_SERVANT = 55;
	public const ResponseCommandKind.Kind TUTORIAL_EVENT_FLAG_SET = 56;
	public const ResponseCommandKind.Kind TAKEIN_STORAGE = 57;
	public const ResponseCommandKind.Kind TAKEOUT_STORAGE = 58;
	public const ResponseCommandKind.Kind FOLLOWER_EDIT_NAME = 59;
	public const ResponseCommandKind.Kind BANK_STATUS = 60;
	public const ResponseCommandKind.Kind CARD_COMBINE_COSTUME = 61;
	public const ResponseCommandKind.Kind BLACKLIST_TOP = 62;
	public const ResponseCommandKind.Kind BLACKLIST_REGIST = 63;
	public const ResponseCommandKind.Kind BLACKLIST_REMOVE = 64;
	public const ResponseCommandKind.Kind FRIEND_MESSAGE_HIDE_SYNC = 65;
	public const ResponseCommandKind.Kind EVENT_SCRIPT_FLAG = 66;
	public const ResponseCommandKind.Kind CARD_SVT_FLAG = 67;
	public const ResponseCommandKind.Kind EVENT_LOCATION = 68;
	public const ResponseCommandKind.Kind SET_STATUS_SERVANT = 69;
	public const ResponseCommandKind.Kind SET_STATUS_COMMAND_CODE = 70;
	public const ResponseCommandKind.Kind STATUS_SYNC_COMMAND_CODE = 71;
	public const ResponseCommandKind.Kind SERVANT_RECOVERY_SYNC = 72;
	public const ResponseCommandKind.Kind EVENT_DECK_SETUP = 73;
	public const ResponseCommandKind.Kind USER_STATUS_FLAG_SET = 74;
	public const ResponseCommandKind.Kind FRIEND_TOP = 75;
	public const ResponseCommandKind.Kind COMMAND_CODE_ATTACH = 76;
	public const ResponseCommandKind.Kind COMMAND_CODE_DETACH = 77;
	public const ResponseCommandKind.Kind COMMAND_CODE_UNLOCK = 78;
	public const ResponseCommandKind.Kind DEBUG_UPDATE_USER = 79;
	public const ResponseCommandKind.Kind FOLLOW_ASSIGN = 80;
	public const ResponseCommandKind.Kind FOLLOW_REMOVE = 81;
	public const ResponseCommandKind.Kind EVENT_DAILY_POINT = 82;
	public const ResponseCommandKind.Kind COMMAND_CARD_EXCEED = 83;
	public const ResponseCommandKind.Kind CARD_COMBINE_LIMIT_SPECIAL = 84;
	public const ResponseCommandKind.Kind BATTLE_QUEST_ROUTE = 85;
	public const ResponseCommandKind.Kind FRIEND_LOCK_SYNC = 86;
	public const ResponseCommandKind.Kind RAID_AUTO_UPDATE = 87;
	public const ResponseCommandKind.Kind COMMAND_CODE_LOCK = 88;
	public const ResponseCommandKind.Kind WARBOARD_START = 89;
	public const ResponseCommandKind.Kind WARBOARD_SETUP = 90;
	public const ResponseCommandKind.Kind WARBOARD_BUFF_SAVE = 91;
	public const ResponseCommandKind.Kind WARBOARD_MOVE = 92;
	public const ResponseCommandKind.Kind WARBOARD_TREASURE = 93;
	public const ResponseCommandKind.Kind WARBOARD_TURN_END = 94;
	public const ResponseCommandKind.Kind WARBOARD_MASTER_ATTACK = 95;
	public const ResponseCommandKind.Kind WARBOARD_COMMAND_SPELL = 96;
	public const ResponseCommandKind.Kind WARBOARD_BATTLE_RESULT = 97;
	public const ResponseCommandKind.Kind WARBOARD_FINISH = 98;
	public const ResponseCommandKind.Kind WARBOARD_RESUME = 99;
	public const ResponseCommandKind.Kind EVENT_SCAN_PANEL_MAP = 100;
	public const ResponseCommandKind.Kind BATTLE_USE_CONTINUE_ITEM = 101;
	public const ResponseCommandKind.Kind CHECK_DATE_VERSION = 102;
	public const ResponseCommandKind.Kind BATTLE_USE_ITEM = 103;
	public const ResponseCommandKind.Kind COMBINE_APPEND_PASSIVE_SKILL = 104;
	public const ResponseCommandKind.Kind TREASURE_BOX_DRAW = 105;
	public const ResponseCommandKind.Kind EVENT_MISSION_RANDOM_CANCEL = 106;
	public const ResponseCommandKind.Kind COIN_ROOM = 107;
}

// Namespace: 
public class Restriction // TypeDefIndex: 6180
{
	// Methods

	// RVA: 0x1AA8B4C Offset: 0x1AA8B4C VA: 0x1AA8B4C
	public void .ctor() { }
}

// Namespace: 
public enum Restriction.Type // TypeDefIndex: 6181
{
	// Fields
	public int value__; // 0x0
	public const Restriction.Type INDIVIDUALITY = 1;
	public const Restriction.Type RARITY = 2;
	public const Restriction.Type TOTAL_COST = 3;
	public const Restriction.Type LV = 4;
	public const Restriction.Type SUPPORT_ONLY = 5;
	public const Restriction.Type UNIQUE_SVT_ONLY = 6;
	public const Restriction.Type FIXED_SUPPORT_POSITION = 7;
	public const Restriction.Type FIXED_MY_SVT_INDIVIDUALITY_POSITION_MAIN = 8;
	public const Restriction.Type FIXED_MY_SVT_INDIVIDUALITY_SINGLE = 9;
	public const Restriction.Type SVT_NUM = 10;
	public const Restriction.Type MY_SVT_NUM = 11;
	public const Restriction.Type MY_SVT_OR_NPC = 12;
}

// Namespace: 
public enum Restriction.RangeType // TypeDefIndex: 6182
{
	// Fields
	public int value__; // 0x0
	public const Restriction.RangeType NONE = 0;
	public const Restriction.RangeType EQUAL = 1;
	public const Restriction.RangeType NOT_EQUAL = 2;
	public const Restriction.RangeType ABOVE = 3;
	public const Restriction.RangeType BELOW = 4;
}

// Namespace: 
public class RewardType // TypeDefIndex: 6183
{
	// Methods

	// RVA: 0x1AACAFC Offset: 0x1AACAFC VA: 0x1AACAFC
	public void .ctor() { }
}
