	public const Follower.Type FRIEND = 1;
	public const Follower.Type NOT_FRIEND = 2;
	public const Follower.Type NPC = 3;
	public const Follower.Type NPC_NO_TD = 4;
	public const Follower.Type FOLLOW = 5;
}

// Namespace: 
public class Frequency // TypeDefIndex: 6132
{
	// Methods

	// RVA: 0x171DB48 Offset: 0x171DB48 VA: 0x171DB48
	public void .ctor() { }
}

// Namespace: 
public enum Frequency.Type // TypeDefIndex: 6133
{
	// Fields
	public int value__; // 0x0
	public const Frequency.Type NONE = 0;
	public const Frequency.Type ONCE = 1;
	public const Frequency.Type ONCE_UNTIL_REBOOT = 2;
	public const Frequency.Type EVERY_TIME = 3;
	public const Frequency.Type VALENTINE = 4;
}

// Namespace: 
public class FriendStatus // TypeDefIndex: 6134
{
	// Methods

	// RVA: 0x1928C80 Offset: 0x1928C80 VA: 0x1928C80
	public void .ctor() { }
}

// Namespace: 
public enum FriendStatus.Kind // TypeDefIndex: 6135
{
	// Fields
	public int value__; // 0x0
	public const FriendStatus.Kind SEARCH = 0;
	public const FriendStatus.Kind OFFER = 1;
	public const FriendStatus.Kind OFFERED = 2;
	public const FriendStatus.Kind FRIEND = 3;
	public const FriendStatus.Kind REJECT = 4;
	public const FriendStatus.Kind CANCEL = 5;
	public const FriendStatus.Kind REMOVE = 6;
	public const FriendStatus.Kind FRIEND_HISTORY = 7;
	public const FriendStatus.Kind BLACKLIST = 8;
	public const FriendStatus.Kind FOLLOW = 9;
	public const FriendStatus.Kind SUM = 10;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25264 Offset: 0xC25264 VA: 0xC25264
public static class FuncList // TypeDefIndex: 6136
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC8A04 Offset: 0xCC8A04 VA: 0xCC8A04
	// RVA: 0x192E85C Offset: 0x192E85C VA: 0x192E85C
	public static bool Check(FuncList.TYPE type, int val) { }

	// RVA: 0x192E868 Offset: 0x192E868 VA: 0x192E868
	public static int getRate(int intype, int[] vals) { }

	[ExtensionAttribute] // RVA: 0xCC8A14 Offset: 0xCC8A14 VA: 0xCC8A14
	// RVA: 0x192E888 Offset: 0x192E888 VA: 0x192E888
	public static int getRate(FuncList.TYPE type, int[] vals) { }

	[ExtensionAttribute] // RVA: 0xCC8A24 Offset: 0xCC8A24 VA: 0xCC8A24
	// RVA: 0x192E8A8 Offset: 0x192E8A8 VA: 0x192E8A8
	public static int getTurn(FuncList.TYPE type, int[] vals) { }

	[ExtensionAttribute] // RVA: 0xCC8A34 Offset: 0xCC8A34 VA: 0xCC8A34
	// RVA: 0x192E8C8 Offset: 0x192E8C8 VA: 0x192E8C8
	public static int getCount(FuncList.TYPE type, int[] vals) { }

	[ExtensionAttribute] // RVA: 0xCC8A44 Offset: 0xCC8A44 VA: 0xCC8A44
	// RVA: 0x192E8E8 Offset: 0x192E8E8 VA: 0x192E8E8
	public static int getUseRate(FuncList.TYPE type, int[] vals) { }

	[ExtensionAttribute] // RVA: 0xCC8A54 Offset: 0xCC8A54 VA: 0xCC8A54
	// RVA: 0x192E908 Offset: 0x192E908 VA: 0x192E908
	public static int getValue(FuncList.TYPE type, int[] vals) { }

	[ExtensionAttribute] // RVA: 0xCC8A64 Offset: 0xCC8A64 VA: 0xCC8A64
	// RVA: 0x192E950 Offset: 0x192E950 VA: 0x192E950
	public static int getTransformIndex(FuncList.TYPE type, int[] vals) { }

	// RVA: 0x192E97C Offset: 0x192E97C VA: 0x192E97C
	public static int getValueFronIndex(int[] vals, int index) { }

	// RVA: 0x192E9D4 Offset: 0x192E9D4 VA: 0x192E9D4
	public static bool isGainHp(int func) { }

	// RVA: 0x192E9F0 Offset: 0x192E9F0 VA: 0x192E9F0
	public static bool isAddState(int func) { }

	// RVA: 0x192EA04 Offset: 0x192EA04 VA: 0x192EA04
	public static bool isDamage(int funcType) { }
}

// Namespace: 
public enum FuncList.TYPE // TypeDefIndex: 6137
{
	// Fields
	public int value__; // 0x0
	public const FuncList.TYPE NONE = 0;
	public const FuncList.TYPE ADD_STATE = 1;
	public const FuncList.TYPE SUB_STATE = 2;
	public const FuncList.TYPE DAMAGE = 3;
	public const FuncList.TYPE DAMAGE_NP = 4;
	public const FuncList.TYPE GAIN_STAR = 5;
	public const FuncList.TYPE GAIN_HP = 6;
	public const FuncList.TYPE GAIN_NP = 7;
	public const FuncList.TYPE LOSS_NP = 8;
	public const FuncList.TYPE SHORTEN_SKILL = 9;
	public const FuncList.TYPE EXTEND_SKILL = 10;
	public const FuncList.TYPE RELEASE_STATE = 11;
	public const FuncList.TYPE LOSS_HP = 12;
	public const FuncList.TYPE INSTANT_DEATH = 13;
	public const FuncList.TYPE DAMAGE_NP_PIERCE = 14;
	public const FuncList.TYPE DAMAGE_NP_INDIVIDUAL = 15;
	public const FuncList.TYPE ADD_STATE_SHORT = 16;
	public const FuncList.TYPE GAIN_HP_PER = 17;
	public const FuncList.TYPE DAMAGE_NP_STATE_INDIVIDUAL = 18;
	public const FuncList.TYPE HASTEN_NPTURN = 19;
	public const FuncList.TYPE DELAY_NPTURN = 20;
	public const FuncList.TYPE FRIEND_POINT_UP = 104;
	public const FuncList.TYPE FRIEND_POINT_UP_DUPLICATE = 123;
	public const FuncList.TYPE EXP_UP = 101;
	public const FuncList.TYPE QP_UP = 102;
	public const FuncList.TYPE DROP_UP = 103;
	public const FuncList.TYPE EVENT_DROP_UP = 105;
	public const FuncList.TYPE EVENT_DROP_RATE_UP = 106;
	public const FuncList.TYPE DAMAGE_NP_HPRATIO_HIGH = 21;
	public const FuncList.TYPE DAMAGE_NP_HPRATIO_LOW = 22;
	public const FuncList.TYPE EVENT_POINT_UP = 107;
	public const FuncList.TYPE EVENT_POINT_RATE_UP = 108;
	public const FuncList.TYPE CARD_RESET = 23;
	public const FuncList.TYPE REPLACE_MEMBER = 24;
	public const FuncList.TYPE TRANSFORM_SERVANT = 109;
	public const FuncList.TYPE QP_DROP_UP = 110;
	public const FuncList.TYPE SERVANT_FRIENDSHIP_UP = 111;
	public const FuncList.TYPE USER_EQUIP_EXP_UP = 112;
	public const FuncList.TYPE CLASS_DROP_UP = 113;
	public const FuncList.TYPE ENEMY_ENCOUNT_COPY_RATE_UP = 114;
	public const FuncList.TYPE ENEMY_ENCOUNT_RATE_UP = 115;
	public const FuncList.TYPE LOSS_HP_SAFE = 25;
	public const FuncList.TYPE DAMAGE_NP_COUNTER = 26;
	public const FuncList.TYPE DAMAGE_NP_STATE_INDIVIDUAL_FIX = 27;
	public const FuncList.TYPE DAMAGE_NP_SAFE = 28;
	public const FuncList.TYPE CALL_SERVANT = 29;
	public const FuncList.TYPE PT_SHUFFLE = 30;
	public const FuncList.TYPE ENEMY_PROB_DOWN = 116;
	public const FuncList.TYPE LOSS_STAR = 31;
	public const FuncList.TYPE CHANGE_SERVANT = 32;
	public const FuncList.TYPE CHANGE_BG = 33;
	public const FuncList.TYPE DAMAGE_VALUE = 34;
	public const FuncList.TYPE WITHDRAW = 35;
	public const FuncList.TYPE FIX_COMMANDCARD = 36;
	public const FuncList.TYPE SHORTEN_BUFFTURN = 37;
	public const FuncList.TYPE EXTEND_BUFFTURN = 38;
	public const FuncList.TYPE SHORTEN_BUFFCOUNT = 39;
	public const FuncList.TYPE EXTEND_BUFFCOUNT = 40;
	public const FuncList.TYPE CHANGE_BGM = 41;
	public const FuncList.TYPE DISPLAY_BUFFSTRING = 42;
	public const FuncList.TYPE RESURRECTION = 43;
	public const FuncList.TYPE GAIN_NP_BUFF_INDIVIDUAL_SUM = 44;
	public const FuncList.TYPE SET_SYSTEM_ALIVE_FLAG = 45;
	public const FuncList.TYPE FORCE_INSTANT_DEATH = 46;
	public const FuncList.TYPE DAMAGE_NP_RARE = 47;
	public const FuncList.TYPE GAIN_NP_FROM_TARGETS = 48;
	public const FuncList.TYPE GAIN_HP_FROM_TARGETS = 49;
	public const FuncList.TYPE LOSS_HP_PER = 50;
	public const FuncList.TYPE LOSS_HP_PER_SAFE = 51;
	public const FuncList.TYPE SHORTEN_USER_EQUIP_SKILL = 52;
	public const FuncList.TYPE QUICK_CHANGE_BG = 53;
	public const FuncList.TYPE SHIFT_SERVANT = 54;
	public const FuncList.TYPE DAMAGE_NP_AND_CHECK_INDIVIDUALITY = 55;
	public const FuncList.TYPE ABSORB_NPTURN = 56;
	public const FuncList.TYPE OVERWRITE_DEAD_TYPE = 57;
	public const FuncList.TYPE FORCE_ALL_BUFF_NOACT = 58;
	public const FuncList.TYPE BREAK_GAUGE_UP = 59;
	public const FuncList.TYPE BREAK_GAUGE_DOWN = 60;
	public const FuncList.TYPE MOVE_TO_LAST_SUBMEMBER = 61;
	public const FuncList.TYPE GET_REWARD_GIFT = 117;
	public const FuncList.TYPE SEND_SUPPORT_FRIEND_POINT = 118;
	public const FuncList.TYPE MOVE_POSITION = 119;
	public const FuncList.TYPE REVIVAL = 120;
	public const FuncList.TYPE DAMAGE_NP_INDIVIDUAL_SUM = 121;
	public const FuncList.TYPE DAMAGE_VALUE_SAFE = 122;
	public const FuncList.TYPE MOVE_STATE = 124;
	public const FuncList.TYPE CHANGE_BGM_COSTUME = 125;
	public const FuncList.TYPE FUNC_126 = 126;
	public const FuncList.TYPE FUNC_127 = 127;
	public const FuncList.TYPE UPDATE_ENTRY_POSITIONS = 128;
	public const FuncList.TYPE BUDDY_POINT_UP = 129;
}

// Namespace: 
public enum FuncList.COND // TypeDefIndex: 6138
{
	// Fields
	public int value__; // 0x0
	public const FuncList.COND NONE = 0;
	public const FuncList.COND INVARIABLY = 1;
	public const FuncList.COND PROB = 2;
	public const FuncList.COND MOREHP = 3;
	public const FuncList.COND LESSHP = 4;
}

// Namespace: 
public class GameEventType // TypeDefIndex: 6139
{
	// Methods

	// RVA: 0x1933478 Offset: 0x1933478 VA: 0x1933478
	public void .ctor() { }
}

// Namespace: 
public enum GameEventType.TYPE // TypeDefIndex: 6140
{
	// Fields
	public int value__; // 0x0
	public const GameEventType.TYPE NONE = 0;
	public const GameEventType.TYPE RAID_BOSS = 1;
	public const GameEventType.TYPE PVP = 2;
	public const GameEventType.TYPE POINT = 3;
	public const GameEventType.TYPE LOGIN_BONUS = 4;
	public const GameEventType.TYPE COMBINE_CAMPAIGN = 5;
	public const GameEventType.TYPE SHOP = 6;
	public const GameEventType.TYPE QUEST_CAMPAIGN = 7;
	public const GameEventType.TYPE BANK = 8;
	public const GameEventType.TYPE SERIAL_CAMPAIGN = 9;
	public const GameEventType.TYPE LOGIN_CAMPAIGN = 10;
	public const GameEventType.TYPE LOGIN_CAMPAIGN_REPEAT = 11;
	public const GameEventType.TYPE EVENT_QUEST = 12;
	public const GameEventType.TYPE SVTEQUIP_COMBINE_CAMPAIGN = 13;
	public const GameEventType.TYPE TERMINAL_BANNER = 14;
	public const GameEventType.TYPE BOX_GACHA = 15;
	public const GameEventType.TYPE BOX_GACHA_POINT = 16;
	public const GameEventType.TYPE LOGIN_CAMPAIGN_STRICT = 17;
	public const GameEventType.TYPE TOTAL_LOGIN = 18;
	public const GameEventType.TYPE COMEBACK_CAMPAIGN = 19;
	public const GameEventType.TYPE LOCATION_CAMPAIGN = 20;
	public const GameEventType.TYPE WAR_BOARD = 22;
	public const GameEventType.TYPE COMBINE_COSUTUME_ITEM = 23;
	public const GameEventType.TYPE TREASURE_BOX = 24;
}

// Namespace: 
public class GamePurchase // TypeDefIndex: 6141
{
	// Methods

	// RVA: 0x1BA3C24 Offset: 0x1BA3C24 VA: 0x1BA3C24
	public void .ctor() { }
}

// Namespace: 
public enum GamePurchase.Type // TypeDefIndex: 6142
{
	// Fields
	public int value__; // 0x0
	public const GamePurchase.Type ALL = 0;
	public const GamePurchase.Type NONE = 0;
	public const GamePurchase.Type ITEM = 1;
	public const GamePurchase.Type EQUIP = 2;
	public const GamePurchase.Type FRIEND_GACHA = 3;
	public const GamePurchase.Type SERVANT = 4;
	public const GamePurchase.Type SET_ITEM = 5;
	public const GamePurchase.Type QUEST = 6;
	public const GamePurchase.Type EVENT_SHOP = 7;
	public const GamePurchase.Type EVENT_SVT_GET = 8;
	public const GamePurchase.Type MANA_SHOP = 9;
	public const GamePurchase.Type STORAGE_SVT = 10;
	public const GamePurchase.Type STORAGE_SVTEQUIP = 11;
	public const GamePurchase.Type BGM = 12;
	public const GamePurchase.Type COSTUME_RELEASE = 14;
	public const GamePurchase.Type BGM_RELEASE = 15;
	public const GamePurchase.Type LOTTERY_SHOP = 16;
	public const GamePurchase.Type EVENT_FACTORY = 17;
	public const GamePurchase.Type ITEM_AS_PRESENT = 18;
	public const GamePurchase.Type COMMAND_CODE = 19;
	public const GamePurchase.Type GIFT = 20;
	public const GamePurchase.Type EVENT_SVT_JOIN = 21;
	public const GamePurchase.Type ASSIST = 22;
}

// Namespace: 
public class Gender // TypeDefIndex: 6143
{
	// Fields
	protected static readonly string[] nameList; // 0x0
	protected Gender.Type type; // 0x10

	// Properties
	public Gender.Type Value { get; set; }

	// Methods

	// RVA: 0x1BA3C2C Offset: 0x1BA3C2C VA: 0x1BA3C2C
	public void .ctor() { }

	// RVA: 0x1BA3C58 Offset: 0x1BA3C58 VA: 0x1BA3C58
	public void .ctor(Gender.Type type) { }

	// RVA: 0x1BA3C84 Offset: 0x1BA3C84 VA: 0x1BA3C84
	public void .ctor(string name) { }

	// RVA: 0x1BA3E28 Offset: 0x1BA3E28 VA: 0x1BA3E28
	public static string ToName(Gender.Type type) { }

	// RVA: 0x1BA3D08 Offset: 0x1BA3D08 VA: 0x1BA3D08
	public static Gender.Type Parse(string name) { }

	// RVA: 0x1BA3ECC Offset: 0x1BA3ECC VA: 0x1BA3ECC
	public static int ToData(string name) { }

	// RVA: 0x1BA3FEC Offset: 0x1BA3FEC VA: 0x1BA3FEC
	public Gender.Type get_Value() { }

	// RVA: 0x1BA3FF4 Offset: 0x1BA3FF4 VA: 0x1BA3FF4
	public void set_Value(Gender.Type value) { }

	// RVA: 0x1BA3FFC Offset: 0x1BA3FFC VA: 0x1BA3FFC
	public Gender.Type Get() { }

	// RVA: 0x1BA4004 Offset: 0x1BA4004 VA: 0x1BA4004
	public string ToString() { }

	// RVA: 0x1BA406C Offset: 0x1BA406C VA: 0x1BA406C
	public int ToInteger() { }

	// RVA: 0x1BA4074 Offset: 0x1BA4074 VA: 0x1BA4074
	public void Set(Gender.Type type) { }

	// RVA: 0x1BA407C Offset: 0x1BA407C VA: 0x1BA407C
	public void Set(string name) { }

	// RVA: 0x1BA40F4 Offset: 0x1BA40F4 VA: 0x1BA40F4
	private static void .cctor() { }
}

// Namespace: 
public enum Gender.Type // TypeDefIndex: 6144
{
	// Fields
	public int value__; // 0x0
	public const Gender.Type MALE = 1;
	public const Gender.Type FEMALE = 2;
	public const Gender.Type OTHER = 3;
}

// Namespace: 
[ExtensionAttribute] // RVA: 0xC25274 Offset: 0xC25274 VA: 0xC25274
public static class Gift // TypeDefIndex: 6145
{
	// Methods

	[ExtensionAttribute] // RVA: 0xCC8A74 Offset: 0xCC8A74 VA: 0xCC8A74
	// RVA: 0x1BA4C94 Offset: 0x1BA4C94 VA: 0x1BA4C94
	public static bool IsItem(Gift.Type type) { }

	// RVA: 0x1BA4CA4 Offset: 0x1BA4CA4 VA: 0x1BA4CA4
	public static bool IsItem(int type) { }

	[ExtensionAttribute] // RVA: 0xCC8A84 Offset: 0xCC8A84 VA: 0xCC8A84
	// RVA: 0x1BA4CB4 Offset: 0x1BA4CB4 VA: 0x1BA4CB4
	public static bool IsServant(Gift.Type type) { }

	// RVA: 0x1BA4CDC Offset: 0x1BA4CDC VA: 0x1BA4CDC
	public static bool IsServant(int type) { }

	[ExtensionAttribute] // RVA: 0xCC8A94 Offset: 0xCC8A94 VA: 0xCC8A94
	// RVA: 0x1BA4D04 Offset: 0x1BA4D04 VA: 0x1BA4D04
	public static bool IsEventSvtGet(Gift.Type type) { }

	// RVA: 0x1BA4D10 Offset: 0x1BA4D10 VA: 0x1BA4D10
	public static bool IsEventSvtGet(int type) { }

	[ExtensionAttribute] // RVA: 0xCC8AA4 Offset: 0xCC8AA4 VA: 0xCC8AA4
	// RVA: 0x1BA4D1C Offset: 0x1BA4D1C VA: 0x1BA4D1C
	public static bool IsEventSvtJoin(Gift.Type type) { }

	// RVA: 0x1BA4D28 Offset: 0x1BA4D28 VA: 0x1BA4D28
	public static bool IsEventSvtJoin(int type) { }

	[ExtensionAttribute] // RVA: 0xCC8AB4 Offset: 0xCC8AB4 VA: 0xCC8AB4
	// RVA: 0x1BA4D34 Offset: 0x1BA4D34 VA: 0x1BA4D34
	public static string CountTextWithPrefix(Gift.Type type, string unitString, int num) { }

	[ExtensionAttribute] // RVA: 0xCC8AC4 Offset: 0xCC8AC4 VA: 0xCC8AC4
	// RVA: 0x1BA4E84 Offset: 0x1BA4E84 VA: 0x1BA4E84
	public static bool IsCostumeRelease(Gift.Type type) { }

	// RVA: 0x1BA4E90 Offset: 0x1BA4E90 VA: 0x1BA4E90
	public static bool IsCostumeGet(int type) { }

	[ExtensionAttribute] // RVA: 0xCC8AD4 Offset: 0xCC8AD4 VA: 0xCC8AD4
	// RVA: 0x1BA4E9C Offset: 0x1BA4E9C VA: 0x1BA4E9C
	public static bool IsEquip(Gift.Type type) { }

	[ExtensionAttribute] // RVA: 0xCC8AE4 Offset: 0xCC8AE4 VA: 0xCC8AE4
	// RVA: 0x1BA4EA8 Offset: 0x1BA4EA8 VA: 0x1BA4EA8
	public static bool IsCommandCode(Gift.Type type) { }

	// RVA: 0x1BA4EB4 Offset: 0x1BA4EB4 VA: 0x1BA4EB4
	public static bool IsCommandCode(int type) { }

	[ExtensionAttribute] // RVA: 0xCC8AF4 Offset: 0xCC8AF4 VA: 0xCC8AF4
	// RVA: 0x1BA4EC0 Offset: 0x1BA4EC0 VA: 0x1BA4EC0
	public static bool IsEventPointBuff(Gift.Type type) { }

	// RVA: 0x1BA4ECC Offset: 0x1BA4ECC VA: 0x1BA4ECC
	public static bool IsEventPointBuff(int type) { }
}

// Namespace: 
public enum Gift.Type // TypeDefIndex: 6146
{
	// Fields
	public int value__; // 0x0
	public const Gift.Type SERVANT = 1;
	public const Gift.Type ITEM = 2;
	public const Gift.Type FRIENDSHIP = 3;
	public const Gift.Type USER_EXP = 4;
	public const Gift.Type EQUIP = 5;
	public const Gift.Type EVENT_SVT_JOIN = 6;
	public const Gift.Type EVENT_SVT_GET = 7;
	public const Gift.Type QUEST_REWARD_ICON = 8;
	public const Gift.Type COSTUME_RELEASE = 9;
	public const Gift.Type COSTUME_GET = 10;
	public const Gift.Type COMMAND_CODE = 11;
	public const Gift.Type EVENT_POINT_BUFF = 12;
	public const Gift.Type EVENT_BOARD_GAME_TOKEN = 13;
}

// Namespace: 
public class Grade // TypeDefIndex: 6147
{
	// Fields
	protected static readonly string[] gradeIconFileList; // 0x0
	protected static readonly string[] masterProfileBgFileList; // 0x8
	protected static readonly string[] masterProfileBgLineFileList; // 0x10
	protected static readonly string[] masterEquipBgFileList; // 0x18
	protected static readonly string[] battleIconBgFileList; // 0x20
	protected static readonly string[] mainMstIconBgFileList; // 0x28
	protected static readonly string[] supportBgFileList; // 0x30
	protected static readonly string[] followerBgFileList; // 0x38

	// Methods

	// RVA: 0x1BB4E34 Offset: 0x1BB4E34 VA: 0x1BB4E34
	public void .ctor() { }

	// RVA: 0x1BB4E3C Offset: 0x1BB4E3C VA: 0x1BB4E3C
	public static Grade.Kind GetKind() { }

	// RVA: 0x1BB4EA8 Offset: 0x1BB4EA8 VA: 0x1BB4EA8
	public static Grade.Kind GetKind(UserGameEntity userGameEntity) { }

	// RVA: 0x1BB4F1C Offset: 0x1BB4F1C VA: 0x1BB4F1C
	public static Grade.Kind GetKind(OtherUserGameEntity otherUserGameEntity) { }

	// RVA: 0x1BB4F90 Offset: 0x1BB4F90 VA: 0x1BB4F90
	public static Grade.Kind GetKind(FollowerInfo followerInfo) { }

	// RVA: 0x1BB5004 Offset: 0x1BB5004 VA: 0x1BB5004
	public static string GetIconImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB50A4 Offset: 0x1BB50A4 VA: 0x1BB50A4
	public static string GetMasterProfileBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB5144 Offset: 0x1BB5144 VA: 0x1BB5144
	public static string GetMasterProfileBgLineImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB51E4 Offset: 0x1BB51E4 VA: 0x1BB51E4
	public static string GetMasterEquipBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB5284 Offset: 0x1BB5284 VA: 0x1BB5284
	public static string GetBattleIconBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB5324 Offset: 0x1BB5324 VA: 0x1BB5324
	public static string GetMainMstIconBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB53C4 Offset: 0x1BB53C4 VA: 0x1BB53C4
	public static string GetSupportBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB5464 Offset: 0x1BB5464 VA: 0x1BB5464
	public static string GetFollowerBgImage(Grade.Kind gradeKind) { }

	// RVA: 0x1BB5504 Offset: 0x1BB5504 VA: 0x1BB5504
	private static void .cctor() { }
}

// Namespace: 
public enum Grade.Kind // TypeDefIndex: 6148
{
	// Fields
	public int value__; // 0x0
	public const Grade.Kind NONE = 0;
	public const Grade.Kind FES = 1;
}

// Namespace: 
public class ImageItem // TypeDefIndex: 6149
{
	// Methods

	// RVA: 0x11B62D8 Offset: 0x11B62D8 VA: 0x11B62D8
	public void .ctor() { }

	// RVA: 0x11B62E0 Offset: 0x11B62E0 VA: 0x11B62E0
	public static bool IsTreasure(int id) { }

	// RVA: 0x11B62F0 Offset: 0x11B62F0 VA: 0x11B62F0
	public static bool IsTreasure(ImageItem.Id id) { }
}

// Namespace: 
public enum ImageItem.Id // TypeDefIndex: 6150
{
	// Fields
	public int value__; // 0x0
	public const ImageItem.Id NONE = 0;
	public const ImageItem.Id TREASURE_1 = 1;
	public const ImageItem.Id TREASURE_2 = 2;
	public const ImageItem.Id TREASURE_3 = 3;
	public const ImageItem.Id SERVANT = 4;
	public const ImageItem.Id QP = 5;
	public const ImageItem.Id STONE = 6;
	public const ImageItem.Id MANA = 7;
	public const ImageItem.Id NP = 8;
	public const ImageItem.Id SKILL = 9;
	public const ImageItem.Id SVT_EQUIP = 10;
	public const ImageItem.Id GACHA_TICKET = 11;
	public const ImageItem.Id FRIEND_POINT = 12;
	public const ImageItem.Id STONE_FRAGMENTS = 16;
	public const ImageItem.Id ANONYMOUS = 17;
	public const ImageItem.Id RARE_PRI = 18;
	public const ImageItem.Id SVT_COSTUME_RELEASE = 23;
	public const ImageItem.Id QUESTION_MARK = 99;
	public const ImageItem.Id QUESTION_MARK2 = 8007;
	public const ImageItem.Id SERVANT_SVT = 8008;
	public const ImageItem.Id SERVANT_EQ = 8009;
	public const ImageItem.Id COMMAND_CODE = 8014;
}

// Namespace: 
public class ImageLimitCount // TypeDefIndex: 6151
{
	// Fields
	public const int FIRST_CHANGE_LIMIT_COUNT = 1;
	public const int SECOND_CHANGE_LIMIT_COUNT = 3;
	public const int REWARD_IMAGE_LIMIT_COUNT = 3;
	public const int COSTUME_IMAGE_LIMIT_COUNT = 11;
	protected static readonly int[] imageLimitCountList; // 0x0
	protected static readonly int[] minLimitCountList; // 0x8
	protected static readonly int[] maxLimitCountList; // 0x10
	protected static readonly int[] maxDispLimitCountList; // 0x18
	private static readonly int enemyLimitCountStart; // 0x20
	protected static Dictionary<int, int> limitMaxList; // 0x28

	// Methods

	// RVA: 0x11B6310 Offset: 0x11B6310 VA: 0x11B6310
	public void .ctor() { }

	// RVA: 0x11B6318 Offset: 0x11B6318 VA: 0x11B6318
	public static void Initialize() { }

	// RVA: 0x11B63D4 Offset: 0x11B63D4 VA: 0x11B63D4
	public static void initializeAssetStorage() { }

	// RVA: 0x11B63D8 Offset: 0x11B63D8 VA: 0x11B63D8
	public static int GetLimitCountByImageLimit(int imageLimitCount) { }

	// RVA: 0x11B64C4 Offset: 0x11B64C4 VA: 0x11B64C4
	public static int GetLimitCountByImageLimitCostumeIn(int imageLimitCount) { }

	// RVA: 0x11B65BC Offset: 0x11B65BC VA: 0x11B65BC
	public static int GetRewardImageLimitCount(int svtId, int limitCount) { }

	// RVA: 0x11B6738 Offset: 0x11B6738 VA: 0x11B6738
	public static int GetLimitCountByImageLimit(int imageLimitCount, int maxLimitCount) { }

	// RVA: 0x11B6830 Offset: 0x11B6830 VA: 0x11B6830
	public static int GetLimitCountByDispLimit(int dispLimitCount, int maxLimitCount) { }

	// RVA: 0x11B6934 Offset: 0x11B6934 VA: 0x11B6934
	public static int GetImageLimitCount(int svtId, int limitCount) { }

	// RVA: 0x11B6AFC Offset: 0x11B6AFC VA: 0x11B6AFC
	public static int GetCardImageLimitCount(int svtId, int limitCount, bool isOwn = True, bool isNpc = False) { }

	// RVA: 0x11B6CFC Offset: 0x11B6CFC VA: 0x11B6CFC
	public static int[] GetSelectList(int svtId, int limitCount, int[] costumeIds) { }

	// RVA: 0x11B6E88 Offset: 0x11B6E88 VA: 0x11B6E88
	public static int[] GetSelectList(int svtId, int limitCount, int costumeId, bool isOwn = False) { }

	// RVA: 0x11B6FEC Offset: 0x11B6FEC VA: 0x11B6FEC
	public static int[] GetCardSelectList(int svtId, int limitCount, int[] costumeIds) { }

	// RVA: 0x11B7180 Offset: 0x11B7180 VA: 0x11B7180
	public static int[] GetCardSelectList(int svtId, int limitCount, int costumeId) { }

	// RVA: 0x11B72A8 Offset: 0x11B72A8 VA: 0x11B72A8
	private static void .cctor() { }
}

// Namespace: 
public static class Individuality // TypeDefIndex: 6152
{
	// Methods

	// RVA: 0x11B7404 Offset: 0x11B7404 VA: 0x11B7404
	public static bool CheckSignedIndividualities(int[] self, int[] signedTarget) { }

	// RVA: 0x11B772C Offset: 0x11B772C VA: 0x11B772C
	public static bool CheckSignedIndividualities(int[] self, int[] signedTarget, Func<int[], int[], bool> matchedFunc, Func<int[], int[], bool> mismatchFunc) { }

	// RVA: 0x11B74E4 Offset: 0x11B74E4 VA: 0x11B74E4
	public static void DivideUnsignedAndSignedArray(int[] baseArray, out int[] unsignedArray, out int[] signedArray) { }

	// RVA: 0x11B787C Offset: 0x11B787C VA: 0x11B787C
	public static bool CheckIndividualities(int[] self, int[] target) { }

	// RVA: 0x11B7968 Offset: 0x11B7968 VA: 0x11B7968
	public static bool CheckIndividualities(int[] self, long[] target) { }

	// RVA: 0x11B7A54 Offset: 0x11B7A54 VA: 0x11B7A54
	public static bool ContainsIndividualities(int[] self, int[] target) { }

	// RVA: 0x11B7BB8 Offset: 0x11B7BB8 VA: 0x11B7BB8
	public static bool CheckAllIndividualities(int[] self, int[] target) { }

	// RVA: 0x11B764C Offset: 0x11B764C VA: 0x11B764C
	public static bool IsPartialMatchArray(int[] selfs, int[] targets) { }

	// RVA: 0x11B7D90 Offset: 0x11B7D90 VA: 0x11B7D90
	public static bool IsMatchArray(int[] selfs, int[] targets) { }
}

// Namespace: 
public enum Individuality.TYPE // TypeDefIndex: 6153
{
	// Fields
	public int value__; // 0x0
	public const Individuality.TYPE NONE = 0;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC425C4 Offset: 0xC425C4 VA: 0xC425C4
private sealed class Individuality.<ContainsIndividualities>c__AnonStorey0 // TypeDefIndex: 6154
{
	// Fields
	internal int type; // 0x10

	// Methods

	// RVA: 0x11B7BB0 Offset: 0x11B7BB0 VA: 0x11B7BB0
	public void .ctor() { }

	// RVA: 0x11B7F50 Offset: 0x11B7F50 VA: 0x11B7F50
	internal bool <>m__0(int tg) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC425D4 Offset: 0xC425D4 VA: 0xC425D4
private sealed class Individuality.<CheckAllIndividualities>c__AnonStorey1 // TypeDefIndex: 6155
{
	// Fields
	internal int[] target; // 0x10

	// Methods

	// RVA: 0x11B7D80 Offset: 0x11B7D80 VA: 0x11B7D80
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC425E4 Offset: 0xC425E4 VA: 0xC425E4
private sealed class Individuality.<CheckAllIndividualities>c__AnonStorey2 // TypeDefIndex: 6156
{
	// Fields
	internal int i; // 0x10
	internal Individuality.<CheckAllIndividualities>c__AnonStorey1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x11B7D88 Offset: 0x11B7D88 VA: 0x11B7D88
	public void .ctor() { }

	// RVA: 0x11B7ED8 Offset: 0x11B7ED8 VA: 0x11B7ED8
	internal bool <>m__0(int sf) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC425F4 Offset: 0xC425F4 VA: 0xC425F4
private sealed class Individuality.<IsMatchArray>c__AnonStorey3 // TypeDefIndex: 6157
{
	// Fields
	internal int target; // 0x10

	// Methods

	// RVA: 0x11B7ED0 Offset: 0x11B7ED0 VA: 0x11B7ED0
	public void .ctor() { }

	// RVA: 0x11B7F60 Offset: 0x11B7F60 VA: 0x11B7F60
	internal bool <>m__0(int self) { }
}

// Namespace: 
public class ItemType // TypeDefIndex: 6158
{
	// Properties
	public static string CrossOperatorString { get; }
	public static string PlusOperatorString { get; }

	// Methods

	// RVA: 0x11C3290 Offset: 0x11C3290 VA: 0x11C3290
	public void .ctor() { }

	// RVA: 0x11BBB6C Offset: 0x11BBB6C VA: 0x11BBB6C
	public static bool IsCountableWithPlus(ItemType.Type type) { }

	// RVA: 0x11BF7C0 Offset: 0x11BF7C0 VA: 0x11BF7C0
	public static string get_CrossOperatorString() { }

	// RVA: 0x11C3298 Offset: 0x11C3298 VA: 0x11C3298
	public static string get_PlusOperatorString() { }

	// RVA: 0x11BF798 Offset: 0x11BF798 VA: 0x11BF798
	public static string GetCountableString(ItemType.Type type) { }

	// RVA: 0x11BB850 Offset: 0x11BB850 VA: 0x11BB850
	public static string GetCountText(ItemType.Type type, int num) { }
}

// Namespace: 
public enum ItemType.Type // TypeDefIndex: 6159
{
	// Fields
	public int value__; // 0x0
	public const ItemType.Type QP = 1;
	public const ItemType.Type STONE = 2;
	public const ItemType.Type AP_RECOVER = 3;
	public const ItemType.Type AP_ADD = 4;
	public const ItemType.Type MANA = 5;
	public const ItemType.Type KEY = 6;
	public const ItemType.Type GACHA_CLASS = 7;
	public const ItemType.Type GACHA_RELIC = 8;
	public const ItemType.Type GACHA_TICKET = 9;
	public const ItemType.Type LIMIT = 10;
	public const ItemType.Type SKILL_LV_UP = 11;
	public const ItemType.Type TD_LV_UP = 12;
	public const ItemType.Type FRIEND_POINT = 13;
	public const ItemType.Type EVENT_POINT = 14;
	public const ItemType.Type EVENT_ITEM = 15;
	public const ItemType.Type QUEST_REWARD_QP = 16;
	public const ItemType.Type CHARGE_STONE = 17;
	public const ItemType.Type RP_ADD = 18;
	public const ItemType.Type BOOST_ITEM = 19;
	public const ItemType.Type STONE_FRAGMENTS = 20;
	public const ItemType.Type ANONYMOUS = 21;
	public const ItemType.Type RARE_PRI = 22;
	public const ItemType.Type COSTUME_RELEASE = 23;
	public const ItemType.Type ITEM_SELECT = 24;
	public const ItemType.Type COMMAND_CARD_PRM_UP = 25;
	public const ItemType.Type DICE = 26;
	public const ItemType.Type CONTINUE_ITEM = 27;
	public const ItemType.Type EUQIP_SKILL_USE_ITEM = 28;
	public const ItemType.Type SVT_COIN = 29;
	public const ItemType.Type FRIENDSHIP_UP_ITEM = 30;
	public const ItemType.Type PP = 31;
}

// Namespace: 
public class MissionProgressType // TypeDefIndex: 6160
{
	// Methods

	// RVA: 0x12A7528 Offset: 0x12A7528 VA: 0x12A7528
	public void .ctor() { }
}

// Namespace: 
public enum MissionProgressType.Type // TypeDefIndex: 6161
{
	// Fields
	public int value__; // 0x0
	public const MissionProgressType.Type NONE = 0;
	public const MissionProgressType.Type REGIST = 1;
	public const MissionProgressType.Type OPEN_CONDITION = 2;
	public const MissionProgressType.Type START = 3;
	public const MissionProgressType.Type CLEAR = 4;
	public const MissionProgressType.Type ACHIEVE = 5;
}

// Namespace: 
public static class MissionType // TypeDefIndex: 6162
{
	// Methods

	// RVA: 0x12A82C0 Offset: 0x12A82C0 VA: 0x12A82C0
	public static bool IsMasterMission(MissionType.Type type) { }
}

// Namespace: 
public enum MissionType.Type // TypeDefIndex: 6163
{
	// Fields
	public int value__; // 0x0
	public const MissionType.Type NONE = 0;
	public const MissionType.Type EVENT = 1;
	public const MissionType.Type WEEKLY = 2;
	public const MissionType.Type DAILY = 3;
	public const MissionType.Type EXTRA = 4;
	public const MissionType.Type LIMITED = 5;
	public const MissionType.Type COMPLETE = 6;
	public const MissionType.Type RANDOM = 7;
}

// Namespace: 
public class News // TypeDefIndex: 6164
{
	// Methods

	// RVA: 0x1389770 Offset: 0x1389770 VA: 0x1389770
	public void .ctor() { }
}

// Namespace: 
public enum News.Type // TypeDefIndex: 6165
{
	// Fields
	public int value__; // 0x0
	public const News.Type NONE = 0;
	public const News.Type HTML_TEXT = 1;
	public const News.Type HTML_URL = 2;
	public const News.Type TEMPLATE = 3;
	public const News.Type DATA = 4;
}

// Namespace: 
public enum OptionalFPSType // TypeDefIndex: 6166
{
	// Fields
	public int value__; // 0x0
	public const OptionalFPSType NORMAL = 30;
	public const OptionalFPSType HIGH = 60;
}

// Namespace: 
public class PayType // TypeDefIndex: 6167
{
	// Methods

	// RVA: 0x177B08C Offset: 0x177B08C VA: 0x177B08C
	public void .ctor() { }
}

// Namespace: 
public enum PayType.Type // TypeDefIndex: 6168
{
	// Fields
	public int value__; // 0x0
	public const PayType.Type STONE = 1;
	public const PayType.Type QP = 2;
	public const PayType.Type FRIEND_POINT = 3;
	public const PayType.Type MANA = 4;
	public const PayType.Type TICKET = 5;
	public const PayType.Type EVENT_ITEM = 6;
	public const PayType.Type CHARGE_STONE = 7;
	public const PayType.Type STONE_FRAGMENTS = 8;
	public const PayType.Type ANONYMOUS = 9;
	public const PayType.Type RARE_PRI = 10;
	public const PayType.Type ITEM = 11;
	public const PayType.Type GRAIL_FRAGMENTS = 12;
	public const PayType.Type FREE = 13;
}

// Namespace: 
public static class QuestGroupType // TypeDefIndex: 6169
{}

// Namespace: 
public enum QuestGroupType.Type // TypeDefIndex: 6170
{
	// Fields
	public int value__; // 0x0
	public const QuestGroupType.Type NONE = 0;
	public const QuestGroupType.Type EVENT_QUEST = 1;
	public const QuestGroupType.Type QUEST_RELEASE = 2;
	public const QuestGroupType.Type EVENT_POINT_QUEST = 3;
	public const QuestGroupType.Type EVENT_POINT_GROUP_QUEST = 4;
	public const QuestGroupType.Type EVENT_RACE_QUEST = 5;
	public const QuestGroupType.Type EVENT_RACE_GROUP_QUEST = 6;
	public const QuestGroupType.Type MISSION_GROUP_QUEST = 7;
	public const QuestGroupType.Type EVENT_TOWER = 8;
	public const QuestGroupType.Type EVENT_TOWER_FLOOR = 9;
	public const QuestGroupType.Type HIGHLIGHT_QUEST = 10;
	public const QuestGroupType.Type EVENT_DAILY_POINT = 11;
	public const QuestGroupType.Type EVENT_ACTIVITY_POINT_GAUGE = 12;
	public const QuestGroupType.Type INTERLUDE = 13;
	public const QuestGroupType.Type EVENT_BATTLE_LINE = 14;
	public const QuestGroupType.Type BATTLE_GROUP = 15;
	public const QuestGroupType.Type SHARE_QUEST_INFO = 16;
}

// Namespace: 
public class Rarity // TypeDefIndex: 6171
{
	// Fields
	public const int DEFAULT_RARE = 3;
	public const int BLANK_RARE = 6;
	public const int HIDE_RARE = 7;
	private static readonly int[] frameTypeImageTable; // 0x0
	private static readonly string[] designCardFileList; // 0x8
	private static readonly string[] rarityType; // 0x10

	// Methods

	// RVA: 0x1287764 Offset: 0x1287764 VA: 0x1287764
	public void .ctor() { }

	// RVA: 0x128776C Offset: 0x128776C VA: 0x128776C
	public static int getFrameTypeImage(int rarityId, int classId = 0) { }

	// RVA: 0x128784C Offset: 0x128784C VA: 0x128784C
	public static string getIcon(int rarity) { }

	// RVA: 0x12878E4 Offset: 0x12878E4 VA: 0x12878E4
	public static string getIcon(int rarity, int exceedCount, int lv) { }

	// RVA: 0x1287AB4 Offset: 0x1287AB4 VA: 0x1287AB4
	public static void setRarityIcon(UISprite sprite, int rarity, int exceedCount, int lv) { }

	// RVA: 0x1287C9C Offset: 0x1287C9C VA: 0x1287C9C
	public static string getDesignCardPrefix(int rarityId) { }

	// RVA: 0x1287D3C Offset: 0x1287D3C VA: 0x1287D3C
	public static int getLowerColorRarity(int rarityId) { }

	// RVA: 0x1287D50 Offset: 0x1287D50 VA: 0x1287D50
	public static int getUpperColorRarity(int rarityId) { }

	// RVA: 0x1287D74 Offset: 0x1287D74 VA: 0x1287D74
	public static string getRarityType(int rarityId) { }

	// RVA: 0x1287E80 Offset: 0x1287E80 VA: 0x1287E80
	private static void .cctor() { }
}

// Namespace: 
public enum Rarity.TYPE // TypeDefIndex: 6172
{
	// Fields
	public int value__; // 0x0
	public const Rarity.TYPE NONE = 0;
	public const Rarity.TYPE COMMON = 1;
	public const Rarity.TYPE UNCOMMON = 2;
	public const Rarity.TYPE RARE = 3;
	public const Rarity.TYPE SRARE = 4;
	public const Rarity.TYPE SSRARE = 5;
	public const Rarity.TYPE ACCESSORY = 101;
	public const Rarity.TYPE SUB_EQUIP = 102;
}

// Namespace: 
public class RecoverType // TypeDefIndex: 6173
{
	// Methods

	// RVA: 0x1585CC4 Offset: 0x1585CC4 VA: 0x1585CC4
	public void .ctor() { }
}

// Namespace: 
public enum RecoverType.Type // TypeDefIndex: 6174
{
	// Fields
	public int value__; // 0x0
	public const RecoverType.Type COMMAND_SPELL = 1;
	public const RecoverType.Type STONE = 2;
	public const RecoverType.Type ITEM = 3;
}

// Namespace: 
public enum ResourceFolder // TypeDefIndex: 6175
{
