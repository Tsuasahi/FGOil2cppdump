	// RVA: 0x25FB164 Offset: 0x25FB164 VA: 0x25FB164
	public void .ctor() { }

	// RVA: 0x25FB16C Offset: 0x25FB16C VA: 0x25FB16C
	private static void .cctor() { }

	// RVA: 0x25FB200 Offset: 0x25FB200 VA: 0x25FB200
	public static void Add(string host, byte[] id) { }

	// RVA: 0x25FB6BC Offset: 0x25FB6BC VA: 0x25FB6BC
	public static byte[] FromHost(string host) { }

	// RVA: 0x25FBC64 Offset: 0x25FBC64 VA: 0x25FBC64
	private static ClientSessionInfo FromContext(Context context, bool checkValidity) { }

	// RVA: 0x25FBEC8 Offset: 0x25FBEC8 VA: 0x25FBEC8
	public static bool SetContextInCache(Context context) { }

	// RVA: 0x25FC0D4 Offset: 0x25FC0D4 VA: 0x25FC0D4
	public static bool SetContextFromCache(Context context) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum ContentType // TypeDefIndex: 1894
{
	// Fields
	public byte value__; // 0x0
	public const ContentType ChangeCipherSpec = 20;
	public const ContentType Alert = 21;
	public const ContentType Handshake = 22;
	public const ContentType ApplicationData = 23;
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class Context // TypeDefIndex: 1895
{
	// Fields
	internal const short MAX_FRAGMENT_SIZE = 16384;
	internal const short TLS1_PROTOCOL_CODE = 769;
	internal const short SSL3_PROTOCOL_CODE = 768;
	internal const long UNIX_BASE_TICKS = 621355968000000000;
	private SecurityProtocolType securityProtocol; // 0x10
	private byte[] sessionId; // 0x18
	private SecurityCompressionType compressionMethod; // 0x20
	private TlsServerSettings serverSettings; // 0x28
	private TlsClientSettings clientSettings; // 0x30
	private SecurityParameters current; // 0x38
	private SecurityParameters negotiating; // 0x40
	private SecurityParameters read; // 0x48
	private SecurityParameters write; // 0x50
	private CipherSuiteCollection supportedCiphers; // 0x58
	private HandshakeType lastHandshakeMsg; // 0x60
	private HandshakeState handshakeState; // 0x64
	private bool abbreviatedHandshake; // 0x68
	private bool receivedConnectionEnd; // 0x69
	private bool sentConnectionEnd; // 0x6A
	private bool protocolNegotiated; // 0x6B
	private ulong writeSequenceNumber; // 0x70
	private ulong readSequenceNumber; // 0x78
	private byte[] clientRandom; // 0x80
	private byte[] serverRandom; // 0x88
	private byte[] randomCS; // 0x90
	private byte[] randomSC; // 0x98
	private byte[] masterSecret; // 0xA0
	private byte[] clientWriteKey; // 0xA8
	private byte[] serverWriteKey; // 0xB0
	private byte[] clientWriteIV; // 0xB8
	private byte[] serverWriteIV; // 0xC0
	private TlsStream handshakeMessages; // 0xC8
	private RandomNumberGenerator random; // 0xD0
	private RecordProtocol recordProtocol; // 0xD8

	// Properties
	public bool AbbreviatedHandshake { get; set; }
	public bool ProtocolNegotiated { get; set; }
	public SecurityProtocolType SecurityProtocol { get; set; }
	public SecurityProtocolType SecurityProtocolFlags { get; }
	public short Protocol { get; }
	public byte[] SessionId { get; set; }
	public SecurityCompressionType CompressionMethod { get; set; }
	public TlsServerSettings ServerSettings { get; }
	public TlsClientSettings ClientSettings { get; }
	public HandshakeType LastHandshakeMsg { get; set; }
	public HandshakeState HandshakeState { get; set; }
	public bool ReceivedConnectionEnd { get; set; }
	public bool SentConnectionEnd { get; set; }
	public CipherSuiteCollection SupportedCiphers { get; set; }
	public TlsStream HandshakeMessages { get; }
	public ulong WriteSequenceNumber { get; set; }
	public ulong ReadSequenceNumber { get; set; }
	public byte[] ClientRandom { get; set; }
	public byte[] ServerRandom { get; set; }
	public byte[] RandomCS { get; set; }
	public byte[] RandomSC { get; set; }
	public byte[] MasterSecret { get; set; }
	public byte[] ClientWriteKey { get; set; }
	public byte[] ServerWriteKey { get; set; }
	public byte[] ClientWriteIV { get; set; }
	public byte[] ServerWriteIV { get; set; }
	public RecordProtocol RecordProtocol { get; set; }
	public SecurityParameters Current { get; }
	public SecurityParameters Negotiating { get; }
	public SecurityParameters Read { get; }
	public SecurityParameters Write { get; }

	// Methods

	// RVA: 0x25FA730 Offset: 0x25FA730 VA: 0x25FA730
	public void .ctor(SecurityProtocolType securityProtocolType) { }

	// RVA: 0x25FC58C Offset: 0x25FC58C VA: 0x25FC58C
	public bool get_AbbreviatedHandshake() { }

	// RVA: 0x25FC594 Offset: 0x25FC594 VA: 0x25FC594
	public void set_AbbreviatedHandshake(bool value) { }

	// RVA: 0x25FC5A0 Offset: 0x25FC5A0 VA: 0x25FC5A0
	public bool get_ProtocolNegotiated() { }

	// RVA: 0x25FC5A8 Offset: 0x25FC5A8 VA: 0x25FC5A8
	public void set_ProtocolNegotiated(bool value) { }

	// RVA: 0x25FC5B4 Offset: 0x25FC5B4 VA: 0x25FC5B4
	public SecurityProtocolType get_SecurityProtocol() { }

	// RVA: 0x25FC584 Offset: 0x25FC584 VA: 0x25FC584
	public void set_SecurityProtocol(SecurityProtocolType value) { }

	// RVA: 0x25FC668 Offset: 0x25FC668 VA: 0x25FC668
	public SecurityProtocolType get_SecurityProtocolFlags() { }

	// RVA: 0x25FC670 Offset: 0x25FC670 VA: 0x25FC670
	public short get_Protocol() { }

	// RVA: 0x25FBEC0 Offset: 0x25FBEC0 VA: 0x25FBEC0
	public byte[] get_SessionId() { }

	// RVA: 0x25FC724 Offset: 0x25FC724 VA: 0x25FC724
	public void set_SessionId(byte[] value) { }

	// RVA: 0x25FC72C Offset: 0x25FC72C VA: 0x25FC72C
	public SecurityCompressionType get_CompressionMethod() { }

	// RVA: 0x25FC734 Offset: 0x25FC734 VA: 0x25FC734
	public void set_CompressionMethod(SecurityCompressionType value) { }

	// RVA: 0x25FC73C Offset: 0x25FC73C VA: 0x25FC73C
	public TlsServerSettings get_ServerSettings() { }

	// RVA: 0x25FA804 Offset: 0x25FA804 VA: 0x25FA804
	public TlsClientSettings get_ClientSettings() { }

	// RVA: 0x25FC744 Offset: 0x25FC744 VA: 0x25FC744
	public HandshakeType get_LastHandshakeMsg() { }

	// RVA: 0x25FB12C Offset: 0x25FB12C VA: 0x25FB12C
	public void set_LastHandshakeMsg(HandshakeType value) { }

	// RVA: 0x25FB154 Offset: 0x25FB154 VA: 0x25FB154
	public HandshakeState get_HandshakeState() { }

	// RVA: 0x25FB15C Offset: 0x25FB15C VA: 0x25FB15C
	public void set_HandshakeState(HandshakeState value) { }

	// RVA: 0x25FC74C Offset: 0x25FC74C VA: 0x25FC74C
	public bool get_ReceivedConnectionEnd() { }

	// RVA: 0x25FC754 Offset: 0x25FC754 VA: 0x25FC754
	public void set_ReceivedConnectionEnd(bool value) { }

	// RVA: 0x25FC760 Offset: 0x25FC760 VA: 0x25FC760
	public bool get_SentConnectionEnd() { }

	// RVA: 0x25FC768 Offset: 0x25FC768 VA: 0x25FC768
	public void set_SentConnectionEnd(bool value) { }

	// RVA: 0x25FC774 Offset: 0x25FC774 VA: 0x25FC774
	public CipherSuiteCollection get_SupportedCiphers() { }

	// RVA: 0x25FC77C Offset: 0x25FC77C VA: 0x25FC77C
	public void set_SupportedCiphers(CipherSuiteCollection value) { }

	// RVA: 0x25FB134 Offset: 0x25FB134 VA: 0x25FB134
	public TlsStream get_HandshakeMessages() { }

	// RVA: 0x25FC784 Offset: 0x25FC784 VA: 0x25FC784
	public ulong get_WriteSequenceNumber() { }

	// RVA: 0x25FC78C Offset: 0x25FC78C VA: 0x25FC78C
	public void set_WriteSequenceNumber(ulong value) { }

	// RVA: 0x25FC794 Offset: 0x25FC794 VA: 0x25FC794
	public ulong get_ReadSequenceNumber() { }

	// RVA: 0x25FC79C Offset: 0x25FC79C VA: 0x25FC79C
	public void set_ReadSequenceNumber(ulong value) { }

	// RVA: 0x25FC7A4 Offset: 0x25FC7A4 VA: 0x25FC7A4
	public byte[] get_ClientRandom() { }

	// RVA: 0x25FC7AC Offset: 0x25FC7AC VA: 0x25FC7AC
	public void set_ClientRandom(byte[] value) { }

	// RVA: 0x25FC7B4 Offset: 0x25FC7B4 VA: 0x25FC7B4
	public byte[] get_ServerRandom() { }

	// RVA: 0x25FC7BC Offset: 0x25FC7BC VA: 0x25FC7BC
	public void set_ServerRandom(byte[] value) { }

	// RVA: 0x25FC7C4 Offset: 0x25FC7C4 VA: 0x25FC7C4
	public byte[] get_RandomCS() { }

	// RVA: 0x25FC7CC Offset: 0x25FC7CC VA: 0x25FC7CC
	public void set_RandomCS(byte[] value) { }

	// RVA: 0x25FC7D4 Offset: 0x25FC7D4 VA: 0x25FC7D4
	public byte[] get_RandomSC() { }

	// RVA: 0x25FC7DC Offset: 0x25FC7DC VA: 0x25FC7DC
	public void set_RandomSC(byte[] value) { }

	// RVA: 0x25FC574 Offset: 0x25FC574 VA: 0x25FC574
	public byte[] get_MasterSecret() { }

	// RVA: 0x25FC57C Offset: 0x25FC57C VA: 0x25FC57C
	public void set_MasterSecret(byte[] value) { }

	// RVA: 0x25F81FC Offset: 0x25F81FC VA: 0x25F81FC
	public byte[] get_ClientWriteKey() { }

	// RVA: 0x25FC7E4 Offset: 0x25FC7E4 VA: 0x25FC7E4
	public void set_ClientWriteKey(byte[] value) { }

	// RVA: 0x25F820C Offset: 0x25F820C VA: 0x25F820C
	public byte[] get_ServerWriteKey() { }

	// RVA: 0x25FC7EC Offset: 0x25FC7EC VA: 0x25FC7EC
	public void set_ServerWriteKey(byte[] value) { }

	// RVA: 0x25F8204 Offset: 0x25F8204 VA: 0x25F8204
	public byte[] get_ClientWriteIV() { }

	// RVA: 0x25FC7F4 Offset: 0x25FC7F4 VA: 0x25FC7F4
	public void set_ClientWriteIV(byte[] value) { }

	// RVA: 0x25F8214 Offset: 0x25F8214 VA: 0x25F8214
	public byte[] get_ServerWriteIV() { }

	// RVA: 0x25FC7FC Offset: 0x25FC7FC VA: 0x25FC7FC
	public void set_ServerWriteIV(byte[] value) { }

	// RVA: 0x25FC804 Offset: 0x25FC804 VA: 0x25FC804
	public RecordProtocol get_RecordProtocol() { }

	// RVA: 0x25FC80C Offset: 0x25FC80C VA: 0x25FC80C
	public void set_RecordProtocol(RecordProtocol value) { }

	// RVA: 0x25FC814 Offset: 0x25FC814 VA: 0x25FC814
	public int GetUnixTime() { }

	// RVA: 0x25F7A14 Offset: 0x25F7A14 VA: 0x25F7A14
	public byte[] GetSecureRandomBytes(int count) { }

	// RVA: 0x25FA824 Offset: 0x25FA824 VA: 0x25FA824 Slot: 4
	public virtual void Clear() { }

	// RVA: 0x25FC8CC Offset: 0x25FC8CC VA: 0x25FC8CC Slot: 5
	public virtual void ClearKeyInfo() { }

	// RVA: 0x25FC9FC Offset: 0x25FC9FC VA: 0x25FC9FC
	public SecurityProtocolType DecodeProtocolCode(short code) { }

	// RVA: 0x25FCAA0 Offset: 0x25FCAA0 VA: 0x25FCAA0
	public void ChangeProtocol(short protocol) { }

	// RVA: 0x25FCBA4 Offset: 0x25FCBA4 VA: 0x25FCBA4
	public SecurityParameters get_Current() { }

	// RVA: 0x25F821C Offset: 0x25F821C VA: 0x25F821C
	public SecurityParameters get_Negotiating() { }

	// RVA: 0x25FCC58 Offset: 0x25FCC58 VA: 0x25FCC58
	public SecurityParameters get_Read() { }

	// RVA: 0x25FCC60 Offset: 0x25FCC60 VA: 0x25FCC60
	public SecurityParameters get_Write() { }

	// RVA: 0x25FCC68 Offset: 0x25FCC68 VA: 0x25FCC68
	public void StartSwitchingSecurityParameters(bool client) { }

	// RVA: 0x25FCC94 Offset: 0x25FCC94 VA: 0x25FCC94
	public void EndSwitchingSecurityParameters(bool client) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class DebugHelper // TypeDefIndex: 1896
{
	// Fields
	private static bool isInitialized; // 0x0

	// Methods

	// RVA: 0x25FCCE0 Offset: 0x25FCCE0 VA: 0x25FCCE0
	public void .ctor() { }

	[ConditionalAttribute] // RVA: 0xBD406C Offset: 0xBD406C VA: 0xBD406C
	// RVA: 0x25FCCE8 Offset: 0x25FCCE8 VA: 0x25FCCE8
	public static void Initialize() { }

	[ConditionalAttribute] // RVA: 0xBD40A4 Offset: 0xBD40A4 VA: 0xBD40A4
	// RVA: 0x25FCD44 Offset: 0x25FCD44 VA: 0x25FCD44
	public static void WriteLine(string format, object[] args) { }

	[ConditionalAttribute] // RVA: 0xBD40DC Offset: 0xBD40DC VA: 0xBD40DC
	// RVA: 0x25FCD48 Offset: 0x25FCD48 VA: 0x25FCD48
	public static void WriteLine(string message) { }

	[ConditionalAttribute] // RVA: 0xBD4114 Offset: 0xBD4114 VA: 0xBD4114
	// RVA: 0x25FCD4C Offset: 0x25FCD4C VA: 0x25FCD4C
	public static void WriteLine(string message, byte[] buffer) { }

	[ConditionalAttribute] // RVA: 0xBD414C Offset: 0xBD414C VA: 0xBD414C
	// RVA: 0x25FCD50 Offset: 0x25FCD50 VA: 0x25FCD50
	public static void WriteBuffer(byte[] buffer) { }

	[ConditionalAttribute] // RVA: 0xBD4184 Offset: 0xBD4184 VA: 0xBD4184
	// RVA: 0x25FCD54 Offset: 0x25FCD54 VA: 0x25FCD54
	public static void WriteBuffer(byte[] buffer, int index, int length) { }
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum ExchangeAlgorithmType // TypeDefIndex: 1897
{
	// Fields
	public int value__; // 0x0
	public const ExchangeAlgorithmType DiffieHellman = 0;
	public const ExchangeAlgorithmType Fortezza = 1;
	public const ExchangeAlgorithmType None = 2;
	public const ExchangeAlgorithmType RsaKeyX = 3;
	public const ExchangeAlgorithmType RsaSign = 4;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum HandshakeState // TypeDefIndex: 1898
{
	// Fields
	public int value__; // 0x0
	public const HandshakeState None = 0;
	public const HandshakeState Started = 1;
	public const HandshakeState Finished = 2;
}

// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum HashAlgorithmType // TypeDefIndex: 1899
{
	// Fields
	public int value__; // 0x0
	public const HashAlgorithmType Md5 = 0;
	public const HashAlgorithmType None = 1;
	public const HashAlgorithmType Sha1 = 2;
}

// Namespace: Mono.Security.Protocol.Tls
internal class HttpsClientStream : SslClientStream // TypeDefIndex: 1900
{
	// Fields
	private HttpWebRequest _request; // 0x88
	private int _status; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xBD3F3C Offset: 0xBD3F3C VA: 0xBD3F3C
	private static CertificateSelectionCallback <>f__am$cache2; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xBD3F4C Offset: 0xBD3F4C VA: 0xBD3F4C
	private static PrivateKeySelectionCallback <>f__am$cache3; // 0x8

	// Properties
	public bool TrustFailure { get; }

	// Methods

	// RVA: 0x22BFE48 Offset: 0x22BFE48 VA: 0x22BFE48
	public void .ctor(Stream stream, X509CertificateCollection clientCertificates, HttpWebRequest request, byte[] buffer) { }

	// RVA: 0x22C03BC Offset: 0x22C03BC VA: 0x22C03BC
	public bool get_TrustFailure() { }

	// RVA: 0x22C03E8 Offset: 0x22C03E8 VA: 0x22C03E8 Slot: 36
	internal override bool RaiseServerCertificateValidation(X509Certificate certificate, int[] certificateErrors) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD41BC Offset: 0xBD41BC VA: 0xBD41BC
	// RVA: 0x22C070C Offset: 0x22C070C VA: 0x22C070C
	private static X509Certificate <HttpsClientStream>m__0(X509CertificateCollection clientCerts, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	[CompilerGeneratedAttribute] // RVA: 0xBD41CC Offset: 0xBD41CC VA: 0xBD41CC
	// RVA: 0x22C0758 Offset: 0x22C0758 VA: 0x22C0758
	private static AsymmetricAlgorithm <HttpsClientStream>m__1(X509Certificate certificate, string targetHost) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal abstract class RecordProtocol // TypeDefIndex: 1901
{
	// Fields
	private static ManualResetEvent record_processing; // 0x0
	protected Stream innerStream; // 0x10
	protected Context context; // 0x18

	// Properties
	public Context Context { get; set; }

	// Methods

	// RVA: 0x22C0F1C Offset: 0x22C0F1C VA: 0x22C0F1C
	public void .ctor(Stream innerStream, Context context) { }

	// RVA: 0x22C0F6C Offset: 0x22C0F6C VA: 0x22C0F6C
	private static void .cctor() { }

	// RVA: 0x22C0FDC Offset: 0x22C0FDC VA: 0x22C0FDC
	public Context get_Context() { }

	// RVA: 0x22C0FE4 Offset: 0x22C0FE4 VA: 0x22C0FE4
	public void set_Context(Context value) { }

	// RVA: 0x22C0FEC Offset: 0x22C0FEC VA: 0x22C0FEC Slot: 4
	public virtual void SendRecord(HandshakeType type) { }

	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void ProcessHandshakeMessage(TlsStream handMsg);

	// RVA: 0x22C1280 Offset: 0x22C1280 VA: 0x22C1280 Slot: 6
	protected virtual void ProcessChangeCipherSpec() { }

	// RVA: 0x22C1350 Offset: 0x22C1350 VA: 0x22C1350 Slot: 7
	public virtual HandshakeMessage GetMessage(HandshakeType type) { }

	// RVA: 0x22C13B8 Offset: 0x22C13B8 VA: 0x22C13B8
	public IAsyncResult BeginReceiveRecord(Stream record, AsyncCallback callback, object state) { }

	// RVA: 0x22C1640 Offset: 0x22C1640 VA: 0x22C1640
	private void InternalReceiveRecordCallback(IAsyncResult asyncResult) { }

	// RVA: 0x22C2124 Offset: 0x22C2124 VA: 0x22C2124
	public byte[] EndReceiveRecord(IAsyncResult asyncResult) { }

	// RVA: 0x22C2424 Offset: 0x22C2424 VA: 0x22C2424
	public byte[] ReceiveRecord(Stream record) { }

	// RVA: 0x22C1BE8 Offset: 0x22C1BE8 VA: 0x22C1BE8
	private byte[] ReadRecordBuffer(int contentType, Stream record) { }

	// RVA: 0x22C2444 Offset: 0x22C2444 VA: 0x22C2444
	private byte[] ReadClientHelloV2(Stream record) { }

	// RVA: 0x22C28E0 Offset: 0x22C28E0 VA: 0x22C28E0
	private byte[] ReadStandardRecordBuffer(Stream record) { }

	// RVA: 0x22C200C Offset: 0x22C200C VA: 0x22C200C
	private void ProcessAlert(AlertLevel alertLevel, AlertDescription alertDesc) { }

	// RVA: 0x22C2EEC Offset: 0x22C2EEC VA: 0x22C2EEC
	public void SendAlert(AlertDescription description) { }

	// RVA: 0x22C30AC Offset: 0x22C30AC VA: 0x22C30AC
	public void SendAlert(AlertLevel level, AlertDescription description) { }

	// RVA: 0x22C2F60 Offset: 0x22C2F60 VA: 0x22C2F60
	public void SendAlert(Alert alert) { }

	// RVA: 0x22C3158 Offset: 0x22C3158 VA: 0x22C3158
	public void SendChangeCipherSpec() { }

	// RVA: 0x22C101C Offset: 0x22C101C VA: 0x22C101C
	public IAsyncResult BeginSendRecord(HandshakeType handshakeType, AsyncCallback callback, object state) { }

	// RVA: 0x22C3438 Offset: 0x22C3438 VA: 0x22C3438
	private void InternalSendRecordCallback(IAsyncResult ar) { }

	// RVA: 0x22C331C Offset: 0x22C331C VA: 0x22C331C
	public IAsyncResult BeginSendRecord(ContentType contentType, byte[] recordData, AsyncCallback callback, object state) { }

	// RVA: 0x22C114C Offset: 0x22C114C VA: 0x22C114C
	public void EndSendRecord(IAsyncResult asyncResult) { }

	// RVA: 0x22C3128 Offset: 0x22C3128 VA: 0x22C3128
	public void SendRecord(ContentType contentType, byte[] recordData) { }

	// RVA: 0x22C3720 Offset: 0x22C3720 VA: 0x22C3720
	public byte[] EncodeRecord(ContentType contentType, byte[] recordData) { }

	// RVA: 0x22C38F0 Offset: 0x22C38F0 VA: 0x22C38F0
	public byte[] EncodeRecord(ContentType contentType, byte[] recordData, int offset, int count) { }

	// RVA: 0x22C3B68 Offset: 0x22C3B68 VA: 0x22C3B68
	private byte[] encryptRecordFragment(ContentType contentType, byte[] fragment) { }

	// RVA: 0x22C1D38 Offset: 0x22C1D38 VA: 0x22C1D38
	private byte[] decryptRecordFragment(ContentType contentType, byte[] fragment) { }

	// RVA: 0x22C3CF8 Offset: 0x22C3CF8 VA: 0x22C3CF8
	private bool Compare(byte[] array1, byte[] array2) { }

	// RVA: 0x22C2B90 Offset: 0x22C2B90 VA: 0x22C2B90
	private void ProcessCipherSpecV2Buffer(SecurityProtocolType protocol, byte[] buffer) { }

	// RVA: 0x22C3DBC Offset: 0x22C3DBC VA: 0x22C3DBC
	private CipherSuite MapV2CipherCode(string prefix, int code) { }
}

// Namespace: 
private class RecordProtocol.ReceiveRecordAsyncResult : IAsyncResult // TypeDefIndex: 1902
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private byte[] _resultingBuffer; // 0x38
	private Stream _record; // 0x40
	private bool completed; // 0x48
	private byte[] _initialBuffer; // 0x50

	// Properties
	public Stream Record { get; }
	public byte[] ResultingBuffer { get; }
	public byte[] InitialBuffer { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x22C15A0 Offset: 0x22C15A0 VA: 0x22C15A0
	public void .ctor(AsyncCallback userCallback, object userState, byte[] initialBuffer, Stream record) { }

	// RVA: 0x22C1BD0 Offset: 0x22C1BD0 VA: 0x22C1BD0
	public Stream get_Record() { }

	// RVA: 0x22C241C Offset: 0x22C241C VA: 0x22C241C
	public byte[] get_ResultingBuffer() { }

	// RVA: 0x22C1638 Offset: 0x22C1638 VA: 0x22C1638
	public byte[] get_InitialBuffer() { }

	// RVA: 0x22C40C4 Offset: 0x22C40C4 VA: 0x22C40C4 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x22C2414 Offset: 0x22C2414 VA: 0x22C2414
	public Exception get_AsyncException() { }

	// RVA: 0x22C23B8 Offset: 0x22C23B8 VA: 0x22C23B8
	public bool get_CompletedWithError() { }

	// RVA: 0x22C22D8 Offset: 0x22C22D8 VA: 0x22C22D8 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x22C40CC Offset: 0x22C40CC VA: 0x22C40CC Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x22C2298 Offset: 0x22C2298 VA: 0x22C2298 Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0x22C40D4 Offset: 0x22C40D4 VA: 0x22C40D4
	private void SetComplete(Exception ex, byte[] resultingBuffer) { }

	// RVA: 0x22C211C Offset: 0x22C211C VA: 0x22C211C
	public void SetComplete(Exception ex) { }

	// RVA: 0x22C1BD8 Offset: 0x22C1BD8 VA: 0x22C1BD8
	public void SetComplete(byte[] resultingBuffer) { }

	// RVA: 0x22C41B4 Offset: 0x22C41B4 VA: 0x22C41B4
	public void SetComplete() { }
}

// Namespace: 
private class RecordProtocol.SendRecordAsyncResult : IAsyncResult // TypeDefIndex: 1903
{
	// Fields
	private object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private HandshakeMessage _message; // 0x38
	private bool completed; // 0x40

	// Properties
	public HandshakeMessage Message { get; }
	public object AsyncState { get; }
	public Exception AsyncException { get; }
	public bool CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x22C328C Offset: 0x22C328C VA: 0x22C328C
	public void .ctor(AsyncCallback userCallback, object userState, HandshakeMessage message) { }

	// RVA: 0x22C3638 Offset: 0x22C3638 VA: 0x22C3638
	public HandshakeMessage get_Message() { }

	// RVA: 0x22C41C0 Offset: 0x22C41C0 VA: 0x22C41C0 Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x22C38E8 Offset: 0x22C38E8 VA: 0x22C38E8
	public Exception get_AsyncException() { }

	// RVA: 0x22C388C Offset: 0x22C388C VA: 0x22C388C
	public bool get_CompletedWithError() { }

	// RVA: 0x22C37AC Offset: 0x22C37AC VA: 0x22C37AC Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x22C41C8 Offset: 0x22C41C8 VA: 0x22C41C8 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x22C376C Offset: 0x22C376C VA: 0x22C376C Slot: 7
	public bool get_IsCompleted() { }

	// RVA: 0x22C3648 Offset: 0x22C3648 VA: 0x22C3648
	public void SetComplete(Exception ex) { }

	// RVA: 0x22C3640 Offset: 0x22C3640 VA: 0x22C3640
	public void SetComplete() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1904
{
	// Fields
	private RSA key; // 0x10
	private HashAlgorithm hash; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBD3F5C Offset: 0xBD3F5C VA: 0xBD3F5C
	private static Dictionary<string, int> <>f__switch$map15; // 0x0

	// Methods

	// RVA: 0x22C0834 Offset: 0x22C0834 VA: 0x22C0834
	public void .ctor() { }

	// RVA: 0x22C083C Offset: 0x22C083C VA: 0x22C083C
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x22C0874 Offset: 0x22C0874 VA: 0x22C0874 Slot: 6
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature) { }

	// RVA: 0x22C0998 Offset: 0x22C0998 VA: 0x22C0998 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x22C0AE0 Offset: 0x22C0AE0 VA: 0x22C0AE0 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1905
{
	// Fields
	private RSA key; // 0x10
	private HashAlgorithm hash; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xBD3F6C Offset: 0xBD3F6C VA: 0xBD3F6C
	private static Dictionary<string, int> <>f__switch$map16; // 0x0

	// Methods

	// RVA: 0x22C0BAC Offset: 0x22C0BAC VA: 0x22C0BAC
	public void .ctor() { }

	// RVA: 0x22C0BB4 Offset: 0x22C0BB4 VA: 0x22C0BB4
	public void .ctor(AsymmetricAlgorithm key) { }

	// RVA: 0x22C0BEC Offset: 0x22C0BEC VA: 0x22C0BEC Slot: 6
	public override byte[] CreateSignature(byte[] rgbHash) { }

	// RVA: 0x22C0D08 Offset: 0x22C0D08 VA: 0x22C0D08 Slot: 4
	public override void SetHashAlgorithm(string strName) { }

	// RVA: 0x22C0E50 Offset: 0x22C0E50 VA: 0x22C0E50 Slot: 5
	public override void SetKey(AsymmetricAlgorithm key) { }
}

// Namespace: Mono.Security.Protocol.Tls
public enum SecurityCompressionType // TypeDefIndex: 1906
{
	// Fields
	public int value__; // 0x0
	public const SecurityCompressionType None = 0;
	public const SecurityCompressionType Zlib = 1;
}

// Namespace: Mono.Security.Protocol.Tls
internal class SecurityParameters // TypeDefIndex: 1907
{
	// Fields
	private CipherSuite cipher; // 0x10
	private byte[] clientWriteMAC; // 0x18
	private byte[] serverWriteMAC; // 0x20

	// Properties
	public CipherSuite Cipher { get; set; }
	public byte[] ClientWriteMAC { get; set; }
	public byte[] ServerWriteMAC { get; set; }

	// Methods

	// RVA: 0x22C41D0 Offset: 0x22C41D0 VA: 0x22C41D0
	public void .ctor() { }

	// RVA: 0x22B7D34 Offset: 0x22B7D34 VA: 0x22B7D34
	public CipherSuite get_Cipher() { }

	// RVA: 0x22BB0D0 Offset: 0x22BB0D0 VA: 0x22BB0D0
	public void set_Cipher(CipherSuite value) { }

	// RVA: 0x22C41D8 Offset: 0x22C41D8 VA: 0x22C41D8
	public byte[] get_ClientWriteMAC() { }

	// RVA: 0x22C41E0 Offset: 0x22C41E0 VA: 0x22C41E0
	public void set_ClientWriteMAC(byte[] value) { }

	// RVA: 0x22C41E8 Offset: 0x22C41E8 VA: 0x22C41E8
	public byte[] get_ServerWriteMAC() { }

	// RVA: 0x22C41F0 Offset: 0x22C41F0 VA: 0x22C41F0
	public void set_ServerWriteMAC(byte[] value) { }

	// RVA: 0x22C41F8 Offset: 0x22C41F8 VA: 0x22C41F8
	public void Clear() { }
}

// Namespace: Mono.Security.Protocol.Tls
[FlagsAttribute] // RVA: 0xBD3E1C Offset: 0xBD3E1C VA: 0xBD3E1C
[Serializable]
public enum SecurityProtocolType // TypeDefIndex: 1908
{
	// Fields
	public int value__; // 0x0
	public const SecurityProtocolType Default = -1073741824;
	public const SecurityProtocolType Ssl2 = 12;
	public const SecurityProtocolType Ssl3 = 48;
	public const SecurityProtocolType Tls = 192;
}

// Namespace: Mono.Security.Protocol.Tls
internal class ServerContext : Context // TypeDefIndex: 1909
{
	// Fields
	private SslServerStream sslStream; // 0xE0
	private bool request_client_certificate; // 0xE8
	private bool clientCertificateRequired; // 0xE9

	// Properties
	public SslServerStream SslStream { get; }
	public bool ClientCertificateRequired { get; }
	public bool RequestClientCertificate { get; }

	// Methods

	// RVA: 0x22C4200 Offset: 0x22C4200 VA: 0x22C4200
	public void .ctor(SslServerStream stream, SecurityProtocolType securityProtocolType, X509Certificate serverCertificate, bool clientCertificateRequired, bool requestClientCertificate) { }

	// RVA: 0x22BCCD4 Offset: 0x22BCCD4 VA: 0x22BCCD4
	public SslServerStream get_SslStream() { }

	// RVA: 0x22BC940 Offset: 0x22BC940 VA: 0x22BC940
	public bool get_ClientCertificateRequired() { }

	// RVA: 0x22C45F8 Offset: 0x22C45F8 VA: 0x22C45F8
	public bool get_RequestClientCertificate() { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class ServerRecordProtocol : RecordProtocol // TypeDefIndex: 1910
{
	// Methods

	// RVA: 0x22C4600 Offset: 0x22C4600 VA: 0x22C4600
	public void .ctor(Stream innerStream, ServerContext context) { }

	// RVA: 0x22C467C Offset: 0x22C467C VA: 0x22C467C Slot: 7
	public override HandshakeMessage GetMessage(HandshakeType type) { }

	// RVA: 0x22C48A8 Offset: 0x22C48A8 VA: 0x22C48A8 Slot: 5
	protected override void ProcessHandshakeMessage(TlsStream handMsg) { }

	// RVA: 0x22C4AC0 Offset: 0x22C4AC0 VA: 0x22C4AC0
	private HandshakeMessage createClientHandshakeMessage(HandshakeType type, byte[] buffer) { }

	// RVA: 0x22C4680 Offset: 0x22C4680 VA: 0x22C4680
	private HandshakeMessage createServerHandshakeMessage(HandshakeType type) { }
}

// Namespace: Mono.Security.Protocol.Tls
public class ValidationResult // TypeDefIndex: 1911
{
	// Fields
	private bool trusted; // 0x10
	private bool user_denied; // 0x11
	private int error_code; // 0x14

	// Properties
	public bool Trusted { get; }
	public bool UserDenied { get; }
	public int ErrorCode { get; }

	// Methods

	// RVA: 0x22CF550 Offset: 0x22CF550 VA: 0x22CF550
	public void .ctor(bool trusted, bool user_denied, int error_code) { }

	// RVA: 0x22B9A1C Offset: 0x22B9A1C VA: 0x22B9A1C
	public bool get_Trusted() { }

	// RVA: 0x22CF59C Offset: 0x22CF59C VA: 0x22CF59C
	public bool get_UserDenied() { }

	// RVA: 0x22B9A24 Offset: 0x22B9A24 VA: 0x22B9A24
	public int get_ErrorCode() { }
}

// Namespace: Mono.Security.Protocol.Tls
public class SslClientStream : SslStreamBase // TypeDefIndex: 1912
{
	// Fields
	private CertificateValidationCallback ServerCertValidation; // 0x68
	private CertificateSelectionCallback ClientCertSelection; // 0x70
	private PrivateKeySelectionCallback PrivateKeySelection; // 0x78
	private CertificateValidationCallback2 ServerCertValidation2; // 0x80

	// Properties
	internal Stream InputBuffer { get; }
	public X509CertificateCollection ClientCertificates { get; }
	public X509Certificate SelectedClientCertificate { get; }
	public CertificateValidationCallback ServerCertValidationDelegate { get; set; }
	public CertificateSelectionCallback ClientCertSelectionDelegate { get; set; }
	public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate { get; set; }
	internal override bool HaveRemoteValidation2Callback { get; }

	// Methods

	// RVA: 0x22C6828 Offset: 0x22C6828 VA: 0x22C6828
	public void .ctor(Stream stream, string targetHost, bool ownsStream) { }

	// RVA: 0x22C6838 Offset: 0x22C6838 VA: 0x22C6838
	public void .ctor(Stream stream, string targetHost, X509Certificate clientCertificate) { }

	// RVA: 0x22C6938 Offset: 0x22C6938 VA: 0x22C6938
	public void .ctor(Stream stream, string targetHost, X509CertificateCollection clientCertificates) { }

	// RVA: 0x22C694C Offset: 0x22C694C VA: 0x22C694C
	public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType) { }

	// RVA: 0x22C0044 Offset: 0x22C0044 VA: 0x22C0044
	public void .ctor(Stream stream, string targetHost, bool ownsStream, SecurityProtocolType securityProtocolType, X509CertificateCollection clientCertificates) { }

	// RVA: 0x22C6BEC Offset: 0x22C6BEC VA: 0x22C6BEC
	internal void add_ServerCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x22C6CB0 Offset: 0x22C6CB0 VA: 0x22C6CB0
	internal void remove_ServerCertValidation(CertificateValidationCallback value) { }

	// RVA: 0x22C0224 Offset: 0x22C0224 VA: 0x22C0224
	internal void add_ClientCertSelection(CertificateSelectionCallback value) { }

	// RVA: 0x22C6D74 Offset: 0x22C6D74 VA: 0x22C6D74
	internal void remove_ClientCertSelection(CertificateSelectionCallback value) { }

	// RVA: 0x22C02F8 Offset: 0x22C02F8 VA: 0x22C02F8
	internal void add_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x22C6E38 Offset: 0x22C6E38 VA: 0x22C6E38
	internal void remove_PrivateKeySelection(PrivateKeySelectionCallback value) { }

	// RVA: 0x22C6EFC Offset: 0x22C6EFC VA: 0x22C6EFC
	public void add_ServerCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x22C6FC0 Offset: 0x22C6FC0 VA: 0x22C6FC0
	public void remove_ServerCertValidation2(CertificateValidationCallback2 value) { }

	// RVA: 0x22C0210 Offset: 0x22C0210 VA: 0x22C0210
	internal Stream get_InputBuffer() { }

	// RVA: 0x22C7084 Offset: 0x22C7084 VA: 0x22C7084
	public X509CertificateCollection get_ClientCertificates() { }

	// RVA: 0x22C70C8 Offset: 0x22C70C8 VA: 0x22C70C8
	public X509Certificate get_SelectedClientCertificate() { }

	// RVA: 0x22C7114 Offset: 0x22C7114 VA: 0x22C7114
	public CertificateValidationCallback get_ServerCertValidationDelegate() { }

	// RVA: 0x22C711C Offset: 0x22C711C VA: 0x22C711C
	public void set_ServerCertValidationDelegate(CertificateValidationCallback value) { }

	// RVA: 0x22C7124 Offset: 0x22C7124 VA: 0x22C7124
	public CertificateSelectionCallback get_ClientCertSelectionDelegate() { }

	// RVA: 0x22C712C Offset: 0x22C712C VA: 0x22C712C
	public void set_ClientCertSelectionDelegate(CertificateSelectionCallback value) { }

	// RVA: 0x22C7134 Offset: 0x22C7134 VA: 0x22C7134
	public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate() { }

	// RVA: 0x22C713C Offset: 0x22C713C VA: 0x22C713C
	public void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value) { }

	// RVA: 0x22C7144 Offset: 0x22C7144 VA: 0x22C7144 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x22C73CC Offset: 0x22C73CC VA: 0x22C73CC Slot: 12
	protected override void Dispose(bool disposing) { }

	// RVA: 0x22C7404 Offset: 0x22C7404 VA: 0x22C7404 Slot: 29
	internal override IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, object state) { }

	// RVA: 0x22C7664 Offset: 0x22C7664 VA: 0x22C7664
	private void SafeReceiveRecord(Stream s) { }

	// RVA: 0x22C772C Offset: 0x22C772C VA: 0x22C772C Slot: 30
	internal override void OnNegotiateHandshakeCallback(IAsyncResult asyncResult) { }

	// RVA: 0x22C7BE0 Offset: 0x22C7BE0 VA: 0x22C7BE0 Slot: 31
	internal override X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x22C7BF4 Offset: 0x22C7BF4 VA: 0x22C7BF4 Slot: 34
	internal override bool get_HaveRemoteValidation2Callback() { }

	// RVA: 0x22C7C04 Offset: 0x22C7C04 VA: 0x22C7C04 Slot: 33
	internal override ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x22C7C18 Offset: 0x22C7C18 VA: 0x22C7C18 Slot: 32
	internal override bool OnRemoteCertificateValidation(X509Certificate certificate, int[] errors) { }

	// RVA: 0x22C7C44 Offset: 0x22C7C44 VA: 0x22C7C44 Slot: 36
	internal virtual bool RaiseServerCertificateValidation(X509Certificate certificate, int[] certificateErrors) { }

	// RVA: 0x22C7C64 Offset: 0x22C7C64 VA: 0x22C7C64 Slot: 37
	internal virtual ValidationResult RaiseServerCertificateValidation2(X509CertificateCollection collection) { }

	// RVA: 0x22C7C84 Offset: 0x22C7C84 VA: 0x22C7C84
	internal X509Certificate RaiseClientCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, string targetHost, X509CertificateCollection serverRequestedCertificates) { }

	// RVA: 0x22C7CA4 Offset: 0x22C7CA4 VA: 0x22C7CA4 Slot: 35
	internal override AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x22C7CB8 Offset: 0x22C7CB8 VA: 0x22C7CB8
	internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, string targetHost) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class SslCipherSuite : CipherSuite // TypeDefIndex: 1913
{
	// Fields
	private const int MacHeaderLength = 11;
	private byte[] pad1; // 0x80
	private byte[] pad2; // 0x88
	private byte[] header; // 0x90

	// Methods

	// RVA: 0x22C4D64 Offset: 0x22C4D64 VA: 0x22C4D64
	public void .ctor(short code, string name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, bool exportable, bool blockMode, byte keyMaterialSize, byte expandedKeyMaterialSize, short effectiveKeyBytes, byte ivSize, byte blockSize) { }

	// RVA: 0x22C4F28 Offset: 0x22C4F28 VA: 0x22C4F28 Slot: 5
	public override byte[] ComputeServerRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x22C53E0 Offset: 0x22C53E0 VA: 0x22C53E0 Slot: 4
	public override byte[] ComputeClientRecordMAC(ContentType contentType, byte[] fragment) { }

	// RVA: 0x22C5898 Offset: 0x22C5898 VA: 0x22C5898 Slot: 6
	public override void ComputeMasterSecret(byte[] preMasterSecret) { }

	// RVA: 0x22C5CA4 Offset: 0x22C5CA4 VA: 0x22C5CA4 Slot: 7
	public override void ComputeKeys() { }

	// RVA: 0x22C5A60 Offset: 0x22C5A60 VA: 0x22C5A60
	private byte[] prf(byte[] secret, string label, byte[] random) { }
}

// Namespace: Mono.Security.Protocol.Tls
internal class SslHandshakeHash : HashAlgorithm // TypeDefIndex: 1914
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private bool hashing; // 0x38
	private byte[] secret; // 0x40
	private byte[] innerPadMD5; // 0x48
	private byte[] outerPadMD5; // 0x50
	private byte[] innerPadSHA; // 0x58
	private byte[] outerPadSHA; // 0x60

	// Methods
