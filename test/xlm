	// RVA: 0x1F12BAC Offset: 0x1F12BAC VA: 0x1F12BAC
	internal static int LastIndexOf(string source, string value) { }

	// RVA: 0x1F0FE40 Offset: 0x1F0FE40 VA: 0x1F0FE40
	internal static bool StartsWith(string source, string prefix) { }

	// RVA: 0x1F12C4C Offset: 0x1F12C4C VA: 0x1F12C4C
	internal static bool EndsWith(string source, string suffix) { }

	// RVA: 0x1F12CE8 Offset: 0x1F12CE8 VA: 0x1F12CE8
	internal static string GetTypeName(object obj) { }

	// RVA: 0x1F12D34 Offset: 0x1F12D34 VA: 0x1F12D34
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities
public abstract class Strings // TypeDefIndex: 5224
{
	// Methods

	// RVA: 0x1F12DDC Offset: 0x1F12DDC VA: 0x1F12DDC
	protected void .ctor() { }

	// RVA: 0x1F12DE4 Offset: 0x1F12DE4 VA: 0x1F12DE4
	internal static bool IsOneOf(string s, string[] candidates) { }

	// RVA: 0x1F12EBC Offset: 0x1F12EBC VA: 0x1F12EBC
	public static string FromByteArray(byte[] bs) { }

	// RVA: 0x1F12FDC Offset: 0x1F12FDC VA: 0x1F12FDC
	public static byte[] ToByteArray(char[] cs) { }

	// RVA: 0x1F130F4 Offset: 0x1F130F4 VA: 0x1F130F4
	public static byte[] ToByteArray(string s) { }

	// RVA: 0x1F0BD88 Offset: 0x1F0BD88 VA: 0x1F0BD88
	public static string FromAsciiByteArray(byte[] bytes) { }

	// RVA: 0x1F1321C Offset: 0x1F1321C VA: 0x1F1321C
	public static byte[] ToAsciiByteArray(char[] cs) { }

	// RVA: 0x1F0BBAC Offset: 0x1F0BBAC VA: 0x1F0BBAC
	public static byte[] ToAsciiByteArray(string s) { }

	// RVA: 0x1F132A0 Offset: 0x1F132A0 VA: 0x1F132A0
	public static string FromUtf8ByteArray(byte[] bytes) { }

	// RVA: 0x1F13348 Offset: 0x1F13348 VA: 0x1F13348
	public static byte[] ToUtf8ByteArray(char[] cs) { }

	// RVA: 0x1F133CC Offset: 0x1F133CC VA: 0x1F133CC
	public static byte[] ToUtf8ByteArray(string s) { }
}

// Namespace: Org.BouncyCastle.Utilities
public sealed class Times // TypeDefIndex: 5225
{
	// Fields
	private static long NanosecondsPerTick; // 0x0

	// Methods

	// RVA: 0x1F13450 Offset: 0x1F13450 VA: 0x1F13450
	public void .ctor() { }

	// RVA: 0x1F13458 Offset: 0x1F13458 VA: 0x1F13458
	public static long NanoTime() { }

	// RVA: 0x1F13510 Offset: 0x1F13510 VA: 0x1F13510
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class Adler32 // TypeDefIndex: 5226
{
	// Fields
	private const int BASE = 65521;
	private const int NMAX = 5552;

	// Methods

	// RVA: 0x1F13564 Offset: 0x1F13564 VA: 0x1F13564
	public void .ctor() { }

	// RVA: 0x1F1356C Offset: 0x1F1356C VA: 0x1F1356C
	internal long adler32(long adler, byte[] buf, int index, int len) { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
public sealed class Deflate // TypeDefIndex: 5227
{
	// Fields
	private const int MAX_MEM_LEVEL = 9;
	private const int Z_DEFAULT_COMPRESSION = -1;
	private const int MAX_WBITS = 15;
	private const int DEF_MEM_LEVEL = 8;
	private const int STORED = 0;
	private const int FAST = 1;
	private const int SLOW = 2;
	private static readonly Deflate.Config[] config_table; // 0x0
	private static readonly string[] z_errmsg; // 0x8
	private const int NeedMore = 0;
	private const int BlockDone = 1;
	private const int FinishStarted = 2;
	private const int FinishDone = 3;
	private const int PRESET_DICT = 32;
	private const int Z_FILTERED = 1;
	private const int Z_HUFFMAN_ONLY = 2;
	private const int Z_DEFAULT_STRATEGY = 0;
	private const int Z_NO_FLUSH = 0;
	private const int Z_PARTIAL_FLUSH = 1;
	private const int Z_SYNC_FLUSH = 2;
	private const int Z_FULL_FLUSH = 3;
	private const int Z_FINISH = 4;
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	private const int INIT_STATE = 42;
	private const int BUSY_STATE = 113;
	private const int FINISH_STATE = 666;
	private const int Z_DEFLATED = 8;
	private const int STORED_BLOCK = 0;
	private const int STATIC_TREES = 1;
	private const int DYN_TREES = 2;
	private const int Z_BINARY = 0;
	private const int Z_ASCII = 1;
	private const int Z_UNKNOWN = 2;
	private const int Buf_size = 16;
	private const int REP_3_6 = 16;
	private const int REPZ_3_10 = 17;
	private const int REPZ_11_138 = 18;
	private const int MIN_MATCH = 3;
	private const int MAX_MATCH = 258;
	private const int MIN_LOOKAHEAD = 262;
	private const int MAX_BITS = 15;
	private const int D_CODES = 30;
	private const int BL_CODES = 19;
	private const int LENGTH_CODES = 29;
	private const int LITERALS = 256;
	private const int L_CODES = 286;
	private const int HEAP_SIZE = 573;
	private const int END_BLOCK = 256;
	internal ZStream strm; // 0x10
	internal int status; // 0x18
	internal byte[] pending_buf; // 0x20
	internal int pending_buf_size; // 0x28
	internal int pending_out; // 0x2C
	internal int pending; // 0x30
	internal int noheader; // 0x34
	internal byte data_type; // 0x38
	internal byte method; // 0x39
	internal int last_flush; // 0x3C
	internal int w_size; // 0x40
	internal int w_bits; // 0x44
	internal int w_mask; // 0x48
	internal byte[] window; // 0x50
	internal int window_size; // 0x58
	internal short[] prev; // 0x60
	internal short[] head; // 0x68
	internal int ins_h; // 0x70
	internal int hash_size; // 0x74
	internal int hash_bits; // 0x78
	internal int hash_mask; // 0x7C
	internal int hash_shift; // 0x80
	internal int block_start; // 0x84
	internal int match_length; // 0x88
	internal int prev_match; // 0x8C
	internal int match_available; // 0x90
	internal int strstart; // 0x94
	internal int match_start; // 0x98
	internal int lookahead; // 0x9C
	internal int prev_length; // 0xA0
	internal int max_chain_length; // 0xA4
	internal int max_lazy_match; // 0xA8
	internal int level; // 0xAC
	internal int strategy; // 0xB0
	internal int good_match; // 0xB4
	internal int nice_match; // 0xB8
	internal short[] dyn_ltree; // 0xC0
	internal short[] dyn_dtree; // 0xC8
	internal short[] bl_tree; // 0xD0
	internal ZTree l_desc; // 0xD8
	internal ZTree d_desc; // 0xE0
	internal ZTree bl_desc; // 0xE8
	internal short[] bl_count; // 0xF0
	internal int[] heap; // 0xF8
	internal int heap_len; // 0x100
	internal int heap_max; // 0x104
	internal byte[] depth; // 0x108
	internal int l_buf; // 0x110
	internal int lit_bufsize; // 0x114
	internal int last_lit; // 0x118
	internal int d_buf; // 0x11C
	internal int opt_len; // 0x120
	internal int static_len; // 0x124
	internal int matches; // 0x128
	internal int last_eob_len; // 0x12C
	internal uint bi_buf; // 0x130
	internal int bi_valid; // 0x134

	// Methods

	// RVA: 0x1F13A50 Offset: 0x1F13A50 VA: 0x1F13A50
	private static void .cctor() { }

	// RVA: 0x1F14438 Offset: 0x1F14438 VA: 0x1F14438
	internal void .ctor() { }

	// RVA: 0x1F1455C Offset: 0x1F1455C VA: 0x1F1455C
	internal void lm_init() { }

	// RVA: 0x1F147D4 Offset: 0x1F147D4 VA: 0x1F147D4
	internal void tr_init() { }

	// RVA: 0x1F148F8 Offset: 0x1F148F8 VA: 0x1F148F8
	internal void init_block() { }

	// RVA: 0x1F14A28 Offset: 0x1F14A28 VA: 0x1F14A28
	internal void pqdownheap(short[] tree, int k) { }

	// RVA: 0x1F14CB8 Offset: 0x1F14CB8 VA: 0x1F14CB8
	internal static bool smaller(short[] tree, int n, int m, byte[] depth) { }

	// RVA: 0x1F14DD0 Offset: 0x1F14DD0 VA: 0x1F14DD0
	internal void scan_tree(short[] tree, int max_code) { }

	// RVA: 0x1F1506C Offset: 0x1F1506C VA: 0x1F1506C
	internal int build_bl_tree() { }

	// RVA: 0x1F15A54 Offset: 0x1F15A54 VA: 0x1F15A54
	internal void send_all_trees(int lcodes, int dcodes, int blcodes) { }

	// RVA: 0x1F15CE0 Offset: 0x1F15CE0 VA: 0x1F15CE0
	internal void send_tree(short[] tree, int max_code) { }

	// RVA: 0x1F15F84 Offset: 0x1F15F84 VA: 0x1F15F84
	internal void put_byte(byte[] p, int start, int len) { }

	// RVA: 0x1F15FD0 Offset: 0x1F15FD0 VA: 0x1F15FD0
	internal void put_byte(byte c) { }

	// RVA: 0x1F16034 Offset: 0x1F16034 VA: 0x1F16034
	internal void put_short(int w) { }

	// RVA: 0x1F160E0 Offset: 0x1F160E0 VA: 0x1F160E0
	internal void putShortMSB(int b) { }

	// RVA: 0x1F15EF0 Offset: 0x1F15EF0 VA: 0x1F15EF0
	internal void send_code(int c, short[] tree) { }

	// RVA: 0x1F15BD0 Offset: 0x1F15BD0 VA: 0x1F15BD0
	internal void send_bits(int val, int length) { }

	// RVA: 0x1F1618C Offset: 0x1F1618C VA: 0x1F1618C
	internal void _tr_align() { }

	// RVA: 0x1F163B0 Offset: 0x1F163B0 VA: 0x1F163B0
	internal bool _tr_tally(int dist, int lc) { }

	// RVA: 0x1F16808 Offset: 0x1F16808 VA: 0x1F16808
	internal void compress_block(short[] ltree, short[] dtree) { }

	// RVA: 0x1F16BB0 Offset: 0x1F16BB0 VA: 0x1F16BB0
	internal void set_data_type() { }

	// RVA: 0x1F16284 Offset: 0x1F16284 VA: 0x1F16284
	internal void bi_flush() { }

	// RVA: 0x1F16CC8 Offset: 0x1F16CC8 VA: 0x1F16CC8
	internal void bi_windup() { }

	// RVA: 0x1F16DC0 Offset: 0x1F16DC0 VA: 0x1F16DC0
	internal void copy_block(int buf, int len, bool header) { }

	// RVA: 0x1F16E48 Offset: 0x1F16E48 VA: 0x1F16E48
	internal void flush_block_only(bool eof) { }

	// RVA: 0x1F1729C Offset: 0x1F1729C VA: 0x1F1729C
	internal int deflate_stored(int flush) { }

	// RVA: 0x1F176D4 Offset: 0x1F176D4 VA: 0x1F176D4
	internal void _tr_stored_block(int buf, int stored_len, bool eof) { }

	// RVA: 0x1F16EC0 Offset: 0x1F16EC0 VA: 0x1F16EC0
	internal void _tr_flush_block(int buf, int stored_len, bool eof) { }

	// RVA: 0x1F173DC Offset: 0x1F173DC VA: 0x1F173DC
	internal void fill_window() { }

	// RVA: 0x1F17800 Offset: 0x1F17800 VA: 0x1F17800
	internal int deflate_fast(int flush) { }

	// RVA: 0x1F185B8 Offset: 0x1F185B8 VA: 0x1F185B8
	internal int deflate_slow(int flush) { }

	// RVA: 0x1F17D48 Offset: 0x1F17D48 VA: 0x1F17D48
	internal int longest_match(int cur_match) { }

	// RVA: 0x1F18B78 Offset: 0x1F18B78 VA: 0x1F18B78
	internal int deflateInit(ZStream strm, int level, int bits) { }

	// RVA: 0x1F18D50 Offset: 0x1F18D50 VA: 0x1F18D50
	internal int deflateInit(ZStream strm, int level) { }

	// RVA: 0x1F18B90 Offset: 0x1F18B90 VA: 0x1F18B90
	internal int deflateInit2(ZStream strm, int level, int method, int windowBits, int memLevel, int strategy) { }

	// RVA: 0x1F18D64 Offset: 0x1F18D64 VA: 0x1F18D64
	internal int deflateReset(ZStream strm) { }

	// RVA: 0x1F18E2C Offset: 0x1F18E2C VA: 0x1F18E2C
	internal int deflateEnd() { }

	// RVA: 0x1F18E70 Offset: 0x1F18E70 VA: 0x1F18E70
	internal int deflateParams(ZStream strm, int _level, int _strategy) { }

	// RVA: 0x1F191B4 Offset: 0x1F191B4 VA: 0x1F191B4
	internal int deflateSetDictionary(ZStream strm, byte[] dictionary, int dictLength) { }

	// RVA: 0x1F19444 Offset: 0x1F19444 VA: 0x1F19444
	internal int deflate(ZStream strm, int flush) { }
}

// Namespace: 
internal class Deflate.Config // TypeDefIndex: 5228
{
	// Fields
	internal int good_length; // 0x10
	internal int max_lazy; // 0x14
	internal int nice_length; // 0x18
	internal int max_chain; // 0x1C
	internal int func; // 0x20

	// Methods

	// RVA: 0x1F143E4 Offset: 0x1F143E4 VA: 0x1F143E4
	internal void .ctor(int good_length, int max_lazy, int nice_length, int max_chain, int func) { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class InfBlocks // TypeDefIndex: 5229
{
	// Fields
	private const int MANY = 1440;
	private static readonly int[] inflate_mask; // 0x0
	private static readonly int[] border; // 0x8
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	private const int TYPE = 0;
	private const int LENS = 1;
	private const int STORED = 2;
	private const int TABLE = 3;
	private const int BTREE = 4;
	private const int DTREE = 5;
	private const int CODES = 6;
	private const int DRY = 7;
	private const int DONE = 8;
	private const int BAD = 9;
	internal int mode; // 0x10
	internal int left; // 0x14
	internal int table; // 0x18
	internal int index; // 0x1C
	internal int[] blens; // 0x20
	internal int[] bb; // 0x28
	internal int[] tb; // 0x30
	internal InfCodes codes; // 0x38
	private int last; // 0x40
	internal int bitk; // 0x44
	internal int bitb; // 0x48
	internal int[] hufts; // 0x50
	internal byte[] window; // 0x58
	internal int end; // 0x60
	internal int read; // 0x64
	internal int write; // 0x68
	internal object checkfn; // 0x70
	internal long check; // 0x78
	internal InfTree inftree; // 0x80

	// Methods

	// RVA: 0x1F198E4 Offset: 0x1F198E4 VA: 0x1F198E4
	internal void .ctor(ZStream z, object checkfn, int w) { }

	// RVA: 0x1F19A04 Offset: 0x1F19A04 VA: 0x1F19A04
	internal void reset(ZStream z, long[] c) { }

	// RVA: 0x1F19AB0 Offset: 0x1F19AB0 VA: 0x1F19AB0
	internal int proc(ZStream z, int r) { }

	// RVA: 0x1F1CF9C Offset: 0x1F1CF9C VA: 0x1F1CF9C
	internal void free(ZStream z) { }

	// RVA: 0x1F1CFC4 Offset: 0x1F1CFC4 VA: 0x1F1CFC4
	internal void set_dictionary(byte[] d, int start, int n) { }

	// RVA: 0x1F1D008 Offset: 0x1F1D008 VA: 0x1F1D008
	internal int sync_point() { }

	// RVA: 0x1F1B234 Offset: 0x1F1B234 VA: 0x1F1B234
	internal int inflate_flush(ZStream z, int r) { }

	// RVA: 0x1F1D018 Offset: 0x1F1D018 VA: 0x1F1D018
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class InfCodes // TypeDefIndex: 5230
{
	// Fields
	private static readonly int[] inflate_mask; // 0x0
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	private const int START = 0;
	private const int LEN = 1;
	private const int LENEXT = 2;
	private const int DIST = 3;
	private const int DISTEXT = 4;
	private const int COPY = 5;
	private const int LIT = 6;
	private const int WASH = 7;
	private const int END = 8;
	private const int BADCODE = 9;
	private int mode; // 0x10
	private int len; // 0x14
	private int[] tree; // 0x18
	private int tree_index; // 0x20
	private int need; // 0x24
	private int lit; // 0x28
	private int get; // 0x2C
	private int dist; // 0x30
	private byte lbits; // 0x34
	private byte dbits; // 0x35
	private int[] ltree; // 0x38
	private int ltree_index; // 0x40
	private int[] dtree; // 0x48
	private int dtree_index; // 0x50

	// Methods

	// RVA: 0x1F199F4 Offset: 0x1F199F4 VA: 0x1F199F4
	internal void .ctor() { }

	// RVA: 0x1F1B590 Offset: 0x1F1B590 VA: 0x1F1B590
	internal void init(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, ZStream z) { }

	// RVA: 0x1F1B998 Offset: 0x1F1B998 VA: 0x1F1B998
	internal int proc(InfBlocks s, ZStream z, int r) { }

	// RVA: 0x1F19AAC Offset: 0x1F19AAC VA: 0x1F19AAC
	internal void free(ZStream z) { }

	// RVA: 0x1F1D0CC Offset: 0x1F1D0CC VA: 0x1F1D0CC
	internal int inflate_fast(int bl, int bd, int[] tl, int tl_index, int[] td, int td_index, InfBlocks s, ZStream z) { }

	// RVA: 0x1F1E25C Offset: 0x1F1E25C VA: 0x1F1E25C
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class Inflate // TypeDefIndex: 5231
{
	// Fields
	private const int MAX_WBITS = 15;
	private const int PRESET_DICT = 32;
	internal const int Z_NO_FLUSH = 0;
	internal const int Z_PARTIAL_FLUSH = 1;
	internal const int Z_SYNC_FLUSH = 2;
	internal const int Z_FULL_FLUSH = 3;
	internal const int Z_FINISH = 4;
	private const int Z_DEFLATED = 8;
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	private const int METHOD = 0;
	private const int FLAG = 1;
	private const int DICT4 = 2;
	private const int DICT3 = 3;
	private const int DICT2 = 4;
	private const int DICT1 = 5;
	private const int DICT0 = 6;
	private const int BLOCKS = 7;
	private const int CHECK4 = 8;
	private const int CHECK3 = 9;
	private const int CHECK2 = 10;
	private const int CHECK1 = 11;
	private const int DONE = 12;
	private const int BAD = 13;
	internal int mode; // 0x10
	internal int method; // 0x14
	internal long[] was; // 0x18
	internal long need; // 0x20
	internal int marker; // 0x28
	internal int nowrap; // 0x2C
	internal int wbits; // 0x30
	internal InfBlocks blocks; // 0x38
	private static readonly byte[] mark; // 0x0

	// Methods

	// RVA: 0x1F1F40C Offset: 0x1F1F40C VA: 0x1F1F40C
	public void .ctor() { }

	// RVA: 0x1F1F46C Offset: 0x1F1F46C VA: 0x1F1F46C
	internal int inflateReset(ZStream z) { }

	// RVA: 0x1F1F4EC Offset: 0x1F1F4EC VA: 0x1F1F4EC
	internal int inflateEnd(ZStream z) { }

	// RVA: 0x1F1F528 Offset: 0x1F1F528 VA: 0x1F1F528
	internal int inflateInit(ZStream z, int w) { }

	// RVA: 0x1F1F624 Offset: 0x1F1F624 VA: 0x1F1F624
	internal int inflate(ZStream z, int f) { }

	// RVA: 0x1F1FFD4 Offset: 0x1F1FFD4 VA: 0x1F1FFD4
	internal int inflateSetDictionary(ZStream z, byte[] dictionary, int dictLength) { }

	// RVA: 0x1F2012C Offset: 0x1F2012C VA: 0x1F2012C
	internal int inflateSync(ZStream z) { }

	// RVA: 0x1F20378 Offset: 0x1F20378 VA: 0x1F20378
	internal int inflateSyncPoint(ZStream z) { }

	// RVA: 0x1F203A4 Offset: 0x1F203A4 VA: 0x1F203A4
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class InfTree // TypeDefIndex: 5232
{
	// Fields
	private const int MANY = 1440;
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	private const int fixed_bl = 9;
	private const int fixed_bd = 5;
	private static readonly int[] fixed_tl; // 0x0
	private static readonly int[] fixed_td; // 0x8
	private static readonly int[] cplens; // 0x10
	private static readonly int[] cplext; // 0x18
	private static readonly int[] cpdist; // 0x20
	private static readonly int[] cpdext; // 0x28
	private const int BMAX = 15;
	private int[] hn; // 0x10
	private int[] v; // 0x18
	private int[] c; // 0x20
	private int[] r; // 0x28
	private int[] u; // 0x30
	private int[] x; // 0x38

	// Methods

	// RVA: 0x1F199FC Offset: 0x1F199FC VA: 0x1F199FC
	public void .ctor() { }

	// RVA: 0x1F1E2D8 Offset: 0x1F1E2D8 VA: 0x1F1E2D8
	private int huft_build(int[] b, int bindex, int n, int s, int[] d, int[] e, int[] t, int[] m, int[] hp, int[] hn, int[] v) { }

	// RVA: 0x1F1B5B4 Offset: 0x1F1B5B4 VA: 0x1F1B5B4
	internal int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, ZStream z) { }

	// RVA: 0x1F1B70C Offset: 0x1F1B70C VA: 0x1F1B70C
	internal int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, ZStream z) { }

	// RVA: 0x1F1B3F0 Offset: 0x1F1B3F0 VA: 0x1F1B3F0
	internal static int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, ZStream z) { }

	// RVA: 0x1F1F088 Offset: 0x1F1F088 VA: 0x1F1F088
	private void initWorkArea(int vsize) { }

	// RVA: 0x1F1F298 Offset: 0x1F1F298 VA: 0x1F1F298
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
public sealed class JZlib // TypeDefIndex: 5233
{
	// Fields
	private const string _version = "1.0.7";
	public const int Z_NO_COMPRESSION = 0;
	public const int Z_BEST_SPEED = 1;
	public const int Z_BEST_COMPRESSION = 9;
	public const int Z_DEFAULT_COMPRESSION = -1;
	public const int Z_FILTERED = 1;
	public const int Z_HUFFMAN_ONLY = 2;
	public const int Z_DEFAULT_STRATEGY = 0;
	public const int Z_NO_FLUSH = 0;
	public const int Z_PARTIAL_FLUSH = 1;
	public const int Z_SYNC_FLUSH = 2;
	public const int Z_FULL_FLUSH = 3;
	public const int Z_FINISH = 4;
	public const int Z_OK = 0;
	public const int Z_STREAM_END = 1;
	public const int Z_NEED_DICT = 2;
	public const int Z_ERRNO = -1;
	public const int Z_STREAM_ERROR = -2;
	public const int Z_DATA_ERROR = -3;
	public const int Z_MEM_ERROR = -4;
	public const int Z_BUF_ERROR = -5;
	public const int Z_VERSION_ERROR = -6;

	// Methods

	// RVA: 0x1F20458 Offset: 0x1F20458 VA: 0x1F20458
	public void .ctor() { }

	// RVA: 0x1F20460 Offset: 0x1F20460 VA: 0x1F20460
	public static string version() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class StaticTree // TypeDefIndex: 5234
{
	// Fields
	private const int MAX_BITS = 15;
	private const int BL_CODES = 19;
	private const int D_CODES = 30;
	private const int LITERALS = 256;
	private const int LENGTH_CODES = 29;
	private const int L_CODES = 286;
	internal const int MAX_BL_BITS = 7;
	internal static readonly short[] static_ltree; // 0x0
	internal static readonly short[] static_dtree; // 0x8
	internal static readonly StaticTree static_l_desc; // 0x10
	internal static readonly StaticTree static_d_desc; // 0x18
	internal static readonly StaticTree static_bl_desc; // 0x20
	internal short[] static_tree; // 0x10
	internal int[] extra_bits; // 0x18
	internal int extra_base; // 0x20
	internal int elems; // 0x24
	internal int max_length; // 0x28

	// Methods

	// RVA: 0x1F204A8 Offset: 0x1F204A8 VA: 0x1F204A8
	internal void .ctor(short[] static_tree, int[] extra_bits, int extra_base, int elems, int max_length) { }

	// RVA: 0x1F204FC Offset: 0x1F204FC VA: 0x1F204FC
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
public class ZOutputStream : Stream // TypeDefIndex: 5235
{
	// Fields
	private const int BufferSize = 512;
	protected ZStream z; // 0x10
	protected int flushLevel; // 0x18
	protected byte[] buf; // 0x20
	protected byte[] buf1; // 0x28
	protected bool compress; // 0x30
	protected Stream output; // 0x38
	protected bool closed; // 0x40

	// Properties
	public sealed override bool CanRead { get; }
	public sealed override bool CanSeek { get; }
	public sealed override bool CanWrite { get; }
	public virtual int FlushMode { get; set; }
	public sealed override long Length { get; }
	public sealed override long Position { get; set; }
	public virtual long TotalIn { get; }
	public virtual long TotalOut { get; }

	// Methods

	// RVA: 0x1F206A4 Offset: 0x1F206A4 VA: 0x1F206A4
	public void .ctor(Stream output) { }

	// RVA: 0x1F206D8 Offset: 0x1F206D8 VA: 0x1F206D8
	public void .ctor(Stream output, bool nowrap) { }

	// RVA: 0x1F20784 Offset: 0x1F20784 VA: 0x1F20784
	public void .ctor(Stream output, ZStream z) { }

	// RVA: 0x1F208FC Offset: 0x1F208FC VA: 0x1F208FC
	public void .ctor(Stream output, int level) { }

	// RVA: 0x1F20904 Offset: 0x1F20904 VA: 0x1F20904
	public void .ctor(Stream output, int level, bool nowrap) { }

	// RVA: 0x1F2070C Offset: 0x1F2070C VA: 0x1F2070C
	private static ZStream GetDefaultZStream(bool nowrap) { }

	// RVA: 0x1F20A10 Offset: 0x1F20A10 VA: 0x1F20A10 Slot: 5
	public sealed override bool get_CanRead() { }

	// RVA: 0x1F20A18 Offset: 0x1F20A18 VA: 0x1F20A18 Slot: 6
	public sealed override bool get_CanSeek() { }

	// RVA: 0x1F20A20 Offset: 0x1F20A20 VA: 0x1F20A20 Slot: 7
	public sealed override bool get_CanWrite() { }

	// RVA: 0x1F20A30 Offset: 0x1F20A30 VA: 0x1F20A30 Slot: 13
	public override void Close() { }

	// RVA: 0x1F20A70 Offset: 0x1F20A70 VA: 0x1F20A70
	private void DoClose() { }

	// RVA: 0x1F20C3C Offset: 0x1F20C3C VA: 0x1F20C3C Slot: 29
	public virtual void End() { }

	// RVA: 0x1F20D90 Offset: 0x1F20D90 VA: 0x1F20D90 Slot: 30
	public virtual void Finish() { }

	// RVA: 0x1F21004 Offset: 0x1F21004 VA: 0x1F21004 Slot: 18
	public override void Flush() { }

	// RVA: 0x1F2103C Offset: 0x1F2103C VA: 0x1F2103C Slot: 31
	public virtual int get_FlushMode() { }

	// RVA: 0x1F21044 Offset: 0x1F21044 VA: 0x1F21044 Slot: 32
	public virtual void set_FlushMode(int value) { }

	// RVA: 0x1F2104C Offset: 0x1F2104C VA: 0x1F2104C Slot: 9
	public sealed override long get_Length() { }

	// RVA: 0x1F210B4 Offset: 0x1F210B4 VA: 0x1F210B4 Slot: 10
	public sealed override long get_Position() { }

	// RVA: 0x1F2111C Offset: 0x1F2111C VA: 0x1F2111C Slot: 11
	public sealed override void set_Position(long value) { }

	// RVA: 0x1F21184 Offset: 0x1F21184 VA: 0x1F21184 Slot: 19
	public sealed override int Read(byte[] buffer, int offset, int count) { }

	// RVA: 0x1F211EC Offset: 0x1F211EC VA: 0x1F211EC Slot: 21
	public sealed override long Seek(long offset, SeekOrigin origin) { }

	// RVA: 0x1F21254 Offset: 0x1F21254 VA: 0x1F21254 Slot: 22
	public sealed override void SetLength(long value) { }

	// RVA: 0x1F212BC Offset: 0x1F212BC VA: 0x1F212BC Slot: 33
	public virtual long get_TotalIn() { }

	// RVA: 0x1F212E8 Offset: 0x1F212E8 VA: 0x1F212E8 Slot: 34
	public virtual long get_TotalOut() { }

	// RVA: 0x1F21314 Offset: 0x1F21314 VA: 0x1F21314 Slot: 23
	public override void Write(byte[] b, int off, int len) { }

	// RVA: 0x1F215A0 Offset: 0x1F215A0 VA: 0x1F215A0 Slot: 24
	public override void WriteByte(byte b) { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
public sealed class ZStream // TypeDefIndex: 5236
{
	// Fields
	private const int MAX_WBITS = 15;
	private const int DEF_WBITS = 15;
	private const int Z_NO_FLUSH = 0;
	private const int Z_PARTIAL_FLUSH = 1;
	private const int Z_SYNC_FLUSH = 2;
	private const int Z_FULL_FLUSH = 3;
	private const int Z_FINISH = 4;
	private const int MAX_MEM_LEVEL = 9;
	private const int Z_OK = 0;
	private const int Z_STREAM_END = 1;
	private const int Z_NEED_DICT = 2;
	private const int Z_ERRNO = -1;
	private const int Z_STREAM_ERROR = -2;
	private const int Z_DATA_ERROR = -3;
	private const int Z_MEM_ERROR = -4;
	private const int Z_BUF_ERROR = -5;
	private const int Z_VERSION_ERROR = -6;
	public byte[] next_in; // 0x10
	public int next_in_index; // 0x18
	public int avail_in; // 0x1C
	public long total_in; // 0x20
	public byte[] next_out; // 0x28
	public int next_out_index; // 0x30
	public int avail_out; // 0x34
	public long total_out; // 0x38
	public string msg; // 0x40
	internal Deflate dstate; // 0x48
	internal Inflate istate; // 0x50
	internal int data_type; // 0x58
	public long adler; // 0x60
	internal Adler32 _adler; // 0x68

	// Methods

	// RVA: 0x1F20888 Offset: 0x1F20888 VA: 0x1F20888
	public void .ctor() { }

	// RVA: 0x1F208F0 Offset: 0x1F208F0 VA: 0x1F208F0
	public int inflateInit() { }

	// RVA: 0x1F20A04 Offset: 0x1F20A04 VA: 0x1F20A04
	public int inflateInit(bool nowrap) { }

	// RVA: 0x1F21610 Offset: 0x1F21610 VA: 0x1F21610
	public int inflateInit(int w) { }

	// RVA: 0x1F21618 Offset: 0x1F21618 VA: 0x1F21618
	public int inflateInit(int w, bool nowrap) { }

	// RVA: 0x1F20FE4 Offset: 0x1F20FE4 VA: 0x1F20FE4
	public int inflate(int f) { }

	// RVA: 0x1F20D20 Offset: 0x1F20D20 VA: 0x1F20D20
	public int inflateEnd() { }

	// RVA: 0x1F216A4 Offset: 0x1F216A4 VA: 0x1F216A4
	public int inflateSync() { }

	// RVA: 0x1F216BC Offset: 0x1F216BC VA: 0x1F216BC
	public int inflateSetDictionary(byte[] dictionary, int dictLength) { }

	// RVA: 0x1F216E4 Offset: 0x1F216E4 VA: 0x1F216E4
	public int deflateInit(int level) { }

	// RVA: 0x1F209F8 Offset: 0x1F209F8 VA: 0x1F209F8
	public int deflateInit(int level, bool nowrap) { }

	// RVA: 0x1F216F0 Offset: 0x1F216F0 VA: 0x1F216F0
	public int deflateInit(int level, int bits) { }

	// RVA: 0x1F216F8 Offset: 0x1F216F8 VA: 0x1F216F8
	public int deflateInit(int level, int bits, bool nowrap) { }

	// RVA: 0x1F19190 Offset: 0x1F19190 VA: 0x1F19190
	public int deflate(int flush) { }

	// RVA: 0x1F20CC8 Offset: 0x1F20CC8 VA: 0x1F20CC8
	public int deflateEnd() { }

	// RVA: 0x1F217A0 Offset: 0x1F217A0 VA: 0x1F217A0
	public int deflateParams(int level, int strategy) { }

	// RVA: 0x1F217CC Offset: 0x1F217CC VA: 0x1F217CC
	public int deflateSetDictionary(byte[] dictionary, int dictLength) { }

	// RVA: 0x1F170B0 Offset: 0x1F170B0 VA: 0x1F170B0
	internal void flush_pending() { }

	// RVA: 0x1F1772C Offset: 0x1F1772C VA: 0x1F1772C
	internal int read_buf(byte[] buf, int start, int size) { }

	// RVA: 0x1F20D7C Offset: 0x1F20D7C VA: 0x1F20D7C
	public void free() { }
}

// Namespace: Org.BouncyCastle.Utilities.Zlib
internal sealed class ZTree // TypeDefIndex: 5237
{
	// Fields
	private const int MAX_BITS = 15;
	private const int BL_CODES = 19;
	private const int D_CODES = 30;
	private const int LITERALS = 256;
	private const int LENGTH_CODES = 29;
	private const int L_CODES = 286;
	private const int HEAP_SIZE = 573;
	internal const int MAX_BL_BITS = 7;
	internal const int END_BLOCK = 256;
	internal const int REP_3_6 = 16;
	internal const int REPZ_3_10 = 17;
	internal const int REPZ_11_138 = 18;
	internal static readonly int[] extra_lbits; // 0x0
	internal static readonly int[] extra_dbits; // 0x8
	internal static readonly int[] extra_blbits; // 0x10
	internal static readonly byte[] bl_order; // 0x18
	internal const int Buf_size = 16;
	internal const int DIST_CODE_LEN = 512;
	internal static readonly byte[] _dist_code; // 0x20
	internal static readonly byte[] _length_code; // 0x28
	internal static readonly int[] base_length; // 0x30
	internal static readonly int[] base_dist; // 0x38
	internal short[] dyn_tree; // 0x10
	internal int max_code; // 0x18
	internal StaticTree stat_desc; // 0x20

	// Methods

	// RVA: 0x1F14554 Offset: 0x1F14554 VA: 0x1F14554
	public void .ctor() { }

	// RVA: 0x1F1672C Offset: 0x1F1672C VA: 0x1F1672C
	internal static int d_code(int dist) { }

	// RVA: 0x1F217F8 Offset: 0x1F217F8 VA: 0x1F217F8
	internal void gen_bitlen(Deflate s) { }

	// RVA: 0x1F151EC Offset: 0x1F151EC VA: 0x1F151EC
	internal void build_tree(Deflate s) { }

	// RVA: 0x1F21E54 Offset: 0x1F21E54 VA: 0x1F21E54
	internal static void gen_codes(short[] tree, int max_code, short[] bl_count) { }

	// RVA: 0x1F22060 Offset: 0x1F22060 VA: 0x1F22060
	internal static int bi_reverse(int code, int len) { }

	// RVA: 0x1F22088 Offset: 0x1F22088 VA: 0x1F22088
	private static void .cctor() { }
}

// Namespace: Org.BouncyCastle.X509.Extension
public class X509ExtensionUtilities // TypeDefIndex: 5238
{
	// Methods

	// RVA: 0x1F22264 Offset: 0x1F22264 VA: 0x1F22264
	public void .ctor() { }

	// RVA: 0x1F2226C Offset: 0x1F2226C VA: 0x1F2226C
	public static Asn1Object FromExtensionValue(Asn1OctetString extensionValue) { }

	// RVA: 0x1F222A4 Offset: 0x1F222A4 VA: 0x1F222A4
	public static ICollection GetIssuerAlternativeNames(X509Certificate cert) { }

	// RVA: 0x1F22F68 Offset: 0x1F22F68 VA: 0x1F22F68
	public static ICollection GetSubjectAlternativeNames(X509Certificate cert) { }

	// RVA: 0x1F22330 Offset: 0x1F22330 VA: 0x1F22330
	private static ICollection GetAlternativeName(Asn1OctetString extVal) { }
}

// Namespace: Org.BouncyCastle.X509
public interface IX509Extension // TypeDefIndex: 5239
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract ISet GetCriticalExtensionOids();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract ISet GetNonCriticalExtensionOids();

	[ObsoleteAttribute] // RVA: 0xCC77E4 Offset: 0xCC77E4 VA: 0xCC77E4
	// RVA: -1 Offset: -1 Slot: 2
	public abstract Asn1OctetString GetExtensionValue(string oid);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract Asn1OctetString GetExtensionValue(DerObjectIdentifier oid);
}

// Namespace: Org.BouncyCastle.X509
internal class PemParser // TypeDefIndex: 5240
{
	// Fields
	private readonly string _header1; // 0x10
	private readonly string _header2; // 0x18
	private readonly string _footer1; // 0x20
	private readonly string _footer2; // 0x28

	// Methods

	// RVA: 0x1F22FF4 Offset: 0x1F22FF4 VA: 0x1F22FF4
	internal void .ctor(string type) { }

	// RVA: 0x1F230F4 Offset: 0x1F230F4 VA: 0x1F230F4
	private string ReadLine(Stream inStream) { }

	// RVA: 0x1F23204 Offset: 0x1F23204 VA: 0x1F23204
	internal Asn1Sequence ReadPemObject(Stream inStream) { }
}

// Namespace: Org.BouncyCastle.X509
public class X509Certificate : X509ExtensionBase // TypeDefIndex: 5241
{
	// Fields
	private readonly X509CertificateStructure c; // 0x10
	private readonly BasicConstraints basicConstraints; // 0x18
	private readonly bool[] keyUsage; // 0x20
