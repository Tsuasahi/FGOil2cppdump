	// RVA: 0x180D4E0 Offset: 0x180D4E0 VA: 0x180D4E0
	public void Setup() { }

	// RVA: 0x180D710 Offset: 0x180D710 VA: 0x180D710
	public void Play(Action end_act, float fade_in_time = 0) { }

	// RVA: 0x180D9D0 Offset: 0x180D9D0 VA: 0x180D9D0
	public QuestRewardOrderGradeAction.STATE GetState() { }

	// RVA: 0x180D410 Offset: 0x180D410 VA: 0x180D410
	public void SetState(QuestRewardOrderGradeAction.STATE state) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40FB4 Offset: 0xD40FB4 VA: 0xD40FB4
	// RVA: 0x180DA30 Offset: 0x180DA30 VA: 0x180DA30
	private void <Play>m__0() { }
}

// Namespace: 
public enum QuestRewardOrderGradeAction.STATE // TypeDefIndex: 11189
{
	// Fields
	public int value__; // 0x0
	public const QuestRewardOrderGradeAction.STATE NONE = 0;
	public const QuestRewardOrderGradeAction.STATE PLAY = 1;
	public const QuestRewardOrderGradeAction.STATE ITEM_LABEL = 2;
	public const QuestRewardOrderGradeAction.STATE TOUCH_WAIT = 3;
	public const QuestRewardOrderGradeAction.STATE SIZEOF = 4;
}

// Namespace: 
private class QuestRewardOrderGradeAction.StateNone : IState<QuestRewardOrderGradeAction> // TypeDefIndex: 11190
{
	// Methods

	// RVA: 0x180D3F0 Offset: 0x180D3F0 VA: 0x180D3F0
	public void .ctor() { }

	// RVA: 0x180DD64 Offset: 0x180DD64 VA: 0x180DD64 Slot: 4
	public void begin(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180DD68 Offset: 0x180DD68 VA: 0x180DD68 Slot: 5
	public void update(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180DD6C Offset: 0x180DD6C VA: 0x180DD6C Slot: 6
	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
private class QuestRewardOrderGradeAction.StatePlay : IState<QuestRewardOrderGradeAction> // TypeDefIndex: 11191
{
	// Fields
	private AnimationState mAnimState; // 0x10
	private SimpleAnimation.State mSimpleAnimState; // 0x18

	// Methods

	// RVA: 0x180D3F8 Offset: 0x180D3F8 VA: 0x180D3F8
	public void .ctor() { }

	// RVA: 0x180DD70 Offset: 0x180DD70 VA: 0x180DD70 Slot: 4
	public void begin(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180E0E8 Offset: 0x180E0E8 VA: 0x180E0E8 Slot: 5
	public void update(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180E29C Offset: 0x180E29C VA: 0x180E29C Slot: 6
	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
private class QuestRewardOrderGradeAction.StateItemLabel : IState<QuestRewardOrderGradeAction> // TypeDefIndex: 11192
{
	// Fields
	private const float MV_TIME = 0.25;

	// Methods

	// RVA: 0x180D400 Offset: 0x180D400 VA: 0x180D400
	public void .ctor() { }

	// RVA: 0x180DA38 Offset: 0x180DA38 VA: 0x180DA38 Slot: 4
	public void begin(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180DCF0 Offset: 0x180DCF0 VA: 0x180DCF0 Slot: 5
	public void update(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180DCF4 Offset: 0x180DCF4 VA: 0x180DCF4 Slot: 6
	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1D80 Offset: 0xCB1D80 VA: 0xCB1D80
private sealed class QuestRewardOrderGradeAction.StateItemLabel.<begin>c__AnonStorey0 // TypeDefIndex: 11193
{
	// Fields
	internal GameObject tgt_obj; // 0x10
	internal MoveObject mo; // 0x18
	internal QuestRewardOrderGradeAction that; // 0x20

	// Methods

	// RVA: 0x180DCE8 Offset: 0x180DCE8 VA: 0x180DCE8
	public void .ctor() { }

	// RVA: 0x180DCF8 Offset: 0x180DCF8 VA: 0x180DCF8
	internal void <>m__0() { }

	// RVA: 0x180DD34 Offset: 0x180DD34 VA: 0x180DD34
	internal void <>m__1() { }
}

// Namespace: 
private class QuestRewardOrderGradeAction.StateTouchWait : IState<QuestRewardOrderGradeAction> // TypeDefIndex: 11194
{
	// Methods

	// RVA: 0x180D408 Offset: 0x180D408 VA: 0x180D408
	public void .ctor() { }

	// RVA: 0x180E2A0 Offset: 0x180E2A0 VA: 0x180E2A0 Slot: 4
	public void begin(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180E2FC Offset: 0x180E2FC VA: 0x180E2FC Slot: 5
	public void update(QuestRewardOrderGradeAction that) { }

	// RVA: 0x180E4E0 Offset: 0x180E4E0 VA: 0x180E4E0 Slot: 6
	public void end(QuestRewardOrderGradeAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1D90 Offset: 0xCB1D90 VA: 0xCB1D90
private sealed class QuestRewardOrderGradeAction.StateTouchWait.<update>c__AnonStorey0 // TypeDefIndex: 11195
{
	// Fields
	internal QuestRewardOrderGradeAction that; // 0x10

	// Methods

	// RVA: 0x180E4D8 Offset: 0x180E4D8 VA: 0x180E4D8
	public void .ctor() { }

	// RVA: 0x180E4E4 Offset: 0x180E4E4 VA: 0x180E4E4
	internal void <>m__0() { }
}

// Namespace: 
public class QuestRewardTokenAction : MonoBehaviour // TypeDefIndex: 11196
{
	// Fields
	private static readonly int TOKEN_EVENT_ID; // 0x0
	private static readonly int TOKEN_IMAGE_ID; // 0x4
	private static readonly int TOKEN_UNKNOWN_IMAGE_ID; // 0x8
	private CStateManager<QuestRewardTokenAction> fsm; // 0x18
	private Animation animation; // 0x20
	private SimpleAnimation simpleAnimation; // 0x28
	private Action endAct; // 0x30
	private bool isEventUILoad; // 0x38
	private Action eventUILoadCallbackFunc; // 0x40
	private AssetData eventUIAssetData; // 0x48
	private UIAtlas eventUIDownloadAtlas; // 0x50
	[SerializeField] // RVA: 0xCEA20C Offset: 0xCEA20C VA: 0xCEA20C
	[HeaderAttribute] // RVA: 0xCEA20C Offset: 0xCEA20C VA: 0xCEA20C
	private UISprite[] tokenSprite; // 0x58
	[SerializeField] // RVA: 0xCEA258 Offset: 0xCEA258 VA: 0xCEA258
	[HeaderAttribute] // RVA: 0xCEA258 Offset: 0xCEA258 VA: 0xCEA258
	private UILabel[] tokenName; // 0x60
	private ScreenTouchInformationComponent screenTouchInfo; // 0x68
	[CompilerGeneratedAttribute] // RVA: 0xCEA2A4 Offset: 0xCEA2A4 VA: 0xCEA2A4
	private static Comparison<QuestRewardInfo> <>f__am$cache0; // 0x10

	// Methods

	// RVA: 0x180E514 Offset: 0x180E514 VA: 0x180E514
	public void .ctor() { }

	// RVA: 0x180E51C Offset: 0x180E51C VA: 0x180E51C
	private void Awake() { }

	// RVA: 0x180E700 Offset: 0x180E700 VA: 0x180E700
	private void Update() { }

	// RVA: 0x180E788 Offset: 0x180E788 VA: 0x180E788
	public void DestroyData() { }

	// RVA: 0x180E85C Offset: 0x180E85C VA: 0x180E85C
	public void LoadData(Action endAct) { }

	// RVA: 0x180E914 Offset: 0x180E914 VA: 0x180E914
	private void LoadEventUI(Action callback, int loadParallelMax = 1) { }

	// RVA: 0x180EAA8 Offset: 0x180EAA8 VA: 0x180EAA8
	protected void LoadEventUIEnd(AssetData assetData) { }

	// RVA: 0x180EB3C Offset: 0x180EB3C VA: 0x180EB3C
	private UIAtlas CreateUIAtlasFromAssetData(AssetData assetData, string name) { }

	// RVA: 0x180E78C Offset: 0x180E78C VA: 0x180E78C
	private void ReleaseEventUI() { }

	// RVA: 0x180EC04 Offset: 0x180EC04 VA: 0x180EC04
	private bool SetEventUI(UISprite sprite, string spriteName) { }

	// RVA: 0x180ED6C Offset: 0x180ED6C VA: 0x180ED6C
	public void Init() { }

	// RVA: 0x180F344 Offset: 0x180F344 VA: 0x180F344
	public void Setup(QuestRewardInfo[] infos) { }

	// RVA: 0x180F7F4 Offset: 0x180F7F4 VA: 0x180F7F4
	public void Play(Action end_act, float fade_in_time = 0) { }

	// RVA: 0x180F908 Offset: 0x180F908 VA: 0x180F908
	public QuestRewardTokenAction.STATE GetState() { }

	// RVA: 0x180E690 Offset: 0x180E690 VA: 0x180E690
	public void SetState(QuestRewardTokenAction.STATE state) { }

	// RVA: 0x180F968 Offset: 0x180F968 VA: 0x180F968
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD40FC4 Offset: 0xD40FC4 VA: 0xD40FC4
	// RVA: 0x180F9E4 Offset: 0x180F9E4 VA: 0x180F9E4
	private static int <Setup>m__0(QuestRewardInfo x, QuestRewardInfo y) { }

	[CompilerGeneratedAttribute] // RVA: 0xD40FD4 Offset: 0xD40FD4 VA: 0xD40FD4
	// RVA: 0x180FA24 Offset: 0x180FA24 VA: 0x180FA24
	private void <Play>m__1() { }
}

// Namespace: 
public enum QuestRewardTokenAction.STATE // TypeDefIndex: 11197
{
	// Fields
	public int value__; // 0x0
	public const QuestRewardTokenAction.STATE NONE = 0;
	public const QuestRewardTokenAction.STATE PLAY = 1;
	public const QuestRewardTokenAction.STATE TOUCH_WAIT = 2;
	public const QuestRewardTokenAction.STATE SIZEOF = 3;
}

// Namespace: 
private class QuestRewardTokenAction.StateNone : IState<QuestRewardTokenAction> // TypeDefIndex: 11198
{
	// Methods

	// RVA: 0x180E678 Offset: 0x180E678 VA: 0x180E678
	public void .ctor() { }

	// RVA: 0x180FA40 Offset: 0x180FA40 VA: 0x180FA40 Slot: 4
	public void begin(QuestRewardTokenAction that) { }

	// RVA: 0x180FA44 Offset: 0x180FA44 VA: 0x180FA44 Slot: 5
	public void update(QuestRewardTokenAction that) { }

	// RVA: 0x180FA48 Offset: 0x180FA48 VA: 0x180FA48 Slot: 6
	public void end(QuestRewardTokenAction that) { }
}

// Namespace: 
private class QuestRewardTokenAction.StatePlay : IState<QuestRewardTokenAction> // TypeDefIndex: 11199
{
	// Methods

	// RVA: 0x180E680 Offset: 0x180E680 VA: 0x180E680
	public void .ctor() { }

	// RVA: 0x180FA4C Offset: 0x180FA4C VA: 0x180FA4C Slot: 4
	public void begin(QuestRewardTokenAction that) { }

	// RVA: 0x180FF18 Offset: 0x180FF18 VA: 0x180FF18 Slot: 5
	public void update(QuestRewardTokenAction that) { }

	// RVA: 0x18100CC Offset: 0x18100CC VA: 0x18100CC Slot: 6
	public void end(QuestRewardTokenAction that) { }
}

// Namespace: 
private class QuestRewardTokenAction.StateTouchWait : IState<QuestRewardTokenAction> // TypeDefIndex: 11200
{
	// Methods

	// RVA: 0x180E688 Offset: 0x180E688 VA: 0x180E688
	public void .ctor() { }

	// RVA: 0x18100D0 Offset: 0x18100D0 VA: 0x18100D0 Slot: 4
	public void begin(QuestRewardTokenAction that) { }

	// RVA: 0x181012C Offset: 0x181012C VA: 0x181012C Slot: 5
	public void update(QuestRewardTokenAction that) { }

	// RVA: 0x1810310 Offset: 0x1810310 VA: 0x1810310 Slot: 6
	public void end(QuestRewardTokenAction that) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1DB0 Offset: 0xCB1DB0 VA: 0xCB1DB0
private sealed class QuestRewardTokenAction.StateTouchWait.<update>c__AnonStorey0 // TypeDefIndex: 11201
{
	// Fields
	internal QuestRewardTokenAction that; // 0x10

	// Methods

	// RVA: 0x1810308 Offset: 0x1810308 VA: 0x1810308
	public void .ctor() { }

	// RVA: 0x1810314 Offset: 0x1810314 VA: 0x1810314
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1DA0 Offset: 0xCB1DA0 VA: 0xCB1DA0
private sealed class QuestRewardTokenAction.<LoadData>c__AnonStorey0 // TypeDefIndex: 11202
{
	// Fields
	internal Action endAct; // 0x10

	// Methods

	// RVA: 0x180E90C Offset: 0x180E90C VA: 0x180E90C
	public void .ctor() { }

	// RVA: 0x180FA2C Offset: 0x180FA2C VA: 0x180FA2C
	internal void <>m__0() { }
}

// Namespace: 
public class QuestTree : SingletonTemplate<QuestTree> // TypeDefIndex: 11203
{
	// Fields
	private MapControl.RootInfo mapControlRootInfo; // 0x10
	private List<MapControl.QuestInfo> allQuestInfoList; // 0x18
	private List<MapControl.SpotInfo> allSpotInfoList; // 0x20
	private List<MapControl.SpotRoadInfo> allSpotRoadInfoList; // 0x28
	private List<MapControl.MapGimmickInfo> allMapGimmickInfoList; // 0x30
	private List<MapControl.MapInfo> allMapInfoList; // 0x38
	private List<MapControl.WarInfo> allWarInfoList; // 0x40
	private bool isInit; // 0x48
	private int MonitoringDataMasterRevision; // 0x4C
	private long forceUpdateTime; // 0x50
	private List<QuestReleaseEntity> questReleaseEntList; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xCEA2B4 Offset: 0xCEA2B4 VA: 0xCEA2B4
	private static Func<MapButtonEntity, int> <>f__am$cache0; // 0x0

	// Properties
	private clsQuestCheck QuestCheckInst { get; }

	// Methods

	// RVA: 0x1812A78 Offset: 0x1812A78 VA: 0x1812A78
	public void .ctor() { }

	// RVA: 0x1812C28 Offset: 0x1812C28 VA: 0x1812C28
	private clsQuestCheck get_QuestCheckInst() { }

	// RVA: 0x1812C90 Offset: 0x1812C90 VA: 0x1812C90
	public List<MapControl.WarInfo> GetWarInfoAll() { }

	// RVA: 0x1812C98 Offset: 0x1812C98 VA: 0x1812C98
	public List<MapControl.WarInfo> GetWarInfoAll_OrderReverse() { }

	[DebuggerHiddenAttribute] // RVA: 0xD40FE4 Offset: 0xD40FE4 VA: 0xD40FE4
	// RVA: 0x1812D28 Offset: 0x1812D28 VA: 0x1812D28
	public IEnumerator Init(Action endCallback) { }

	// RVA: 0x1812DC4 Offset: 0x1812DC4 VA: 0x1812DC4
	private bool IsNeedUpdateQuestTree() { }

	// RVA: 0x1812E7C Offset: 0x1812E7C VA: 0x1812E7C
	private void UpdateMonitoringValue() { }

	// RVA: 0x1812EF0 Offset: 0x1812EF0 VA: 0x1812EF0
	private void UpdateForceUpdateTime(long nowTime, long[] times) { }

	// RVA: 0x1812FDC Offset: 0x1812FDC VA: 0x1812FDC
	public MapControl.RootInfo mfGetMapCtrlP() { }

	// RVA: 0x1812FE4 Offset: 0x1812FE4 VA: 0x1812FE4
	public List<MapControl.QuestInfo> mfGetQuestInfoListP() { }

	// RVA: 0x1812FEC Offset: 0x1812FEC VA: 0x1812FEC
	public MapControl.SpotInfo GetSpotInfo(int spotId) { }

	// RVA: 0x18130C4 Offset: 0x18130C4 VA: 0x18130C4
	public MapControl.QuestInfo GetQuestInfo(int questId) { }

	// RVA: 0x181319C Offset: 0x181319C VA: 0x181319C
	public WarEntity mfGetWarEntityByWarID(int warId) { }

	// RVA: 0x18131CC Offset: 0x18131CC VA: 0x18131CC
	public MapControl.WarInfo mfGetWarInfoByWarID(int warId) { }

	// RVA: 0x18131E0 Offset: 0x18131E0 VA: 0x18131E0
	public MapControl.WarInfo GetWarInfoByEventID(int eventId) { }

	// RVA: 0x18131F4 Offset: 0x18131F4 VA: 0x18131F4
	public MapControl.MapInfo mfGetMapInfoByMapID(int mapId) { }

	// RVA: 0x18132D0 Offset: 0x18132D0 VA: 0x18132D0
	public int GetQuestCount(int warId) { }

	// RVA: 0x1813B2C Offset: 0x1813B2C VA: 0x1813B2C
	private List<MapControl.MapInfo> GetUserReachableMapList(MapControl.WarInfo warInfo) { }

	// RVA: 0x1813E28 Offset: 0x1813E28 VA: 0x1813E28
	private Dictionary<int, int> GetShareQuestIdToGroupIdDict(List<int> questIdList) { }

	// RVA: 0x1813EC0 Offset: 0x1813EC0 VA: 0x1813EC0
	public int GetQuestCountForMap(int mapId) { }

	// RVA: 0x1814434 Offset: 0x1814434 VA: 0x1814434
	public int GetWarID_ByQuestID(int questId) { }

	// RVA: 0x1814528 Offset: 0x1814528 VA: 0x1814528
	public int GetMapIdByQuestId(int questId) { }

	// RVA: 0x1814580 Offset: 0x1814580 VA: 0x1814580
	public bool IsWarOpen(int warId) { }

	// RVA: 0x18148D4 Offset: 0x18148D4 VA: 0x18148D4
	public bool IsActiveEventWar(int warId) { }

	// RVA: 0x18149EC Offset: 0x18149EC VA: 0x18149EC
	public bool IsActiveEventWar(WarEntity warEnt) { }

	[DebuggerHiddenAttribute] // RVA: 0xD40FF4 Offset: 0xD40FF4 VA: 0xD40FF4
	// RVA: 0x1814C04 Offset: 0x1814C04 VA: 0x1814C04
	private IEnumerator mfBaseTreeMakeWithOpenCheck(Action endCallback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD41004 Offset: 0xD41004 VA: 0xD41004
	// RVA: 0x1814CA0 Offset: 0x1814CA0 VA: 0x1814CA0
	public IEnumerator mfBaseTreeUpdateWithOpenCheck(int targetWarId, Action endCallback) { }

	// RVA: 0x1814D54 Offset: 0x1814D54 VA: 0x1814D54
	private void InitInfo() { }

	// RVA: 0x1814E84 Offset: 0x1814E84 VA: 0x1814E84
	private void SetupSpotInfo(SpotEntity spotEnt, ref MapControl.SpotInfo spotInfo) { }

	// RVA: 0x1814F54 Offset: 0x1814F54 VA: 0x1814F54
	public bool IsSpotSatisfyingDisplayCond(SpotEntity spotEnt, bool checkBeforeClearQuest = True) { }

	// RVA: 0x1815068 Offset: 0x1815068 VA: 0x1815068
	public bool IsSpotSatisfyingActiveCond(SpotEntity spotEnt) { }

	// RVA: 0x1815158 Offset: 0x1815158 VA: 0x1815158
	private void SetupSpotRoadInfo(SpotRoadEntity spotRoadEnt, ref MapControl.SpotRoadInfo spotRoadInfo) { }

	// RVA: 0x18153C8 Offset: 0x18153C8 VA: 0x18153C8
	private void SetupMapGimmickInfo(ref MapControl.MapGimmickInfo mapGimmickInfo) { }

	// RVA: 0x18155E8 Offset: 0x18155E8 VA: 0x18155E8
	private MapControl.QuestInfo.DispType CheckQuestOpen(QuestEntity questEnt, MapControl.QuestInfo questInfo, int warId) { }

	// RVA: 0x1815C00 Offset: 0x1815C00 VA: 0x1815C00
	private long GetEndTime(MapControl.QuestInfo questInfo) { }

	// RVA: 0x1815130 Offset: 0x1815130 VA: 0x1815130
	public bool CheckSpotCond(int spotId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x18153A0 Offset: 0x18153A0 VA: 0x18153A0
	public bool CheckSpotRoadCond(int spoRoadtId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x1816AF4 Offset: 0x1816AF4 VA: 0x1816AF4
	public bool CheckMapGimmickCond(int mapGimmickId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x1815F80 Offset: 0x1815F80 VA: 0x1815F80
	public bool CheckSpotCond(QuestAfterAction.COMMAND_TYPE commandType, int commandTypeId, int spotCondType, int targetId, int targetValue) { }

	// RVA: 0x1815420 Offset: 0x1815420 VA: 0x1815420
	public bool CheckMapGimmickCond(MapControl.MapGimmickInfo mapGimmickInfo) { }

	// RVA: 0x1814748 Offset: 0x1814748 VA: 0x1814748
	private List<MapControl.QuestInfo> GetQuestInfoByWarId(int warId) { }

	// RVA: 0x1816B1C Offset: 0x1816B1C VA: 0x1816B1C
	public bool IsWarNew(int warId) { }

	[CompilerGeneratedAttribute] // RVA: 0xD41014 Offset: 0xD41014 VA: 0xD41014
	// RVA: 0x1816C94 Offset: 0x1816C94 VA: 0x1816C94
	private static int <GetUserReachableMapList>m__0(MapButtonEntity x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1DC0 Offset: 0xCB1DC0 VA: 0xCB1DC0
private sealed class QuestTree.<Init>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11204
{
	// Fields
	internal Action endCallback; // 0x10
	internal QuestTree $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4A104 Offset: 0xD4A104 VA: 0xD4A104
	// RVA: 0x1812DBC Offset: 0x1812DBC VA: 0x1812DBC
	public void .ctor() { }

	// RVA: 0x1816E2C Offset: 0x1816E2C VA: 0x1816E2C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A114 Offset: 0xD4A114 VA: 0xD4A114
	// RVA: 0x18170E8 Offset: 0x18170E8 VA: 0x18170E8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A124 Offset: 0xD4A124 VA: 0xD4A124
	// RVA: 0x18170F0 Offset: 0x18170F0 VA: 0x18170F0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A134 Offset: 0xD4A134 VA: 0xD4A134
	// RVA: 0x18170F8 Offset: 0x18170F8 VA: 0x18170F8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A144 Offset: 0xD4A144 VA: 0xD4A144
	// RVA: 0x181710C Offset: 0x181710C VA: 0x181710C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1DD0 Offset: 0xCB1DD0 VA: 0xCB1DD0
private sealed class QuestTree.<GetSpotInfo>c__AnonStorey3 // TypeDefIndex: 11205
{
	// Fields
	internal int spotId; // 0x10

	// Methods

	// RVA: 0x18130BC Offset: 0x18130BC VA: 0x18130BC
	public void .ctor() { }

	// RVA: 0x1816D00 Offset: 0x1816D00 VA: 0x1816D00
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1DE0 Offset: 0xCB1DE0 VA: 0xCB1DE0
private sealed class QuestTree.<GetQuestInfo>c__AnonStorey4 // TypeDefIndex: 11206
{
	// Fields
	internal int questId; // 0x10

	// Methods

	// RVA: 0x1813194 Offset: 0x1813194 VA: 0x1813194
	public void .ctor() { }

	// RVA: 0x1816CBC Offset: 0x1816CBC VA: 0x1816CBC
	internal bool <>m__0(MapControl.QuestInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1DF0 Offset: 0xCB1DF0 VA: 0xCB1DF0
private sealed class QuestTree.<mfGetMapInfoByMapID>c__AnonStorey5 // TypeDefIndex: 11207
{
	// Fields
	internal int mapId; // 0x10

	// Methods

	// RVA: 0x18132C8 Offset: 0x18132C8 VA: 0x18132C8
	public void .ctor() { }

	// RVA: 0x181B814 Offset: 0x181B814 VA: 0x181B814
	internal bool <>m__0(MapControl.MapInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1E00 Offset: 0xCB1E00 VA: 0xCB1E00
private sealed class QuestTree.<GetUserReachableMapList>c__AnonStorey6 // TypeDefIndex: 11208
{
	// Fields
	internal List<int> reachableMapIds; // 0x10

	// Methods

	// RVA: 0x1813EB8 Offset: 0x1813EB8 VA: 0x1813EB8
	public void .ctor() { }

	// RVA: 0x1816D44 Offset: 0x1816D44 VA: 0x1816D44
	internal bool <>m__0(MapControl.MapInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1E10 Offset: 0xCB1E10 VA: 0xCB1E10
private sealed class QuestTree.<GetWarID_ByQuestID>c__AnonStorey7 // TypeDefIndex: 11209
{
	// Fields
	internal int questId; // 0x10

	// Methods

	// RVA: 0x1814520 Offset: 0x1814520 VA: 0x1814520
	public void .ctor() { }

	// RVA: 0x1816DD0 Offset: 0x1816DD0 VA: 0x1816DD0
	internal bool <>m__0(MapControl.QuestInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1E20 Offset: 0xCB1E20 VA: 0xCB1E20
private sealed class QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11210
{
	// Fields
	internal DataManager <dataManager>__0; // 0x10
	internal MapMaster <mapMaster>__0; // 0x18
	internal SpotMaster <spotMaster>__0; // 0x20
	internal QuestMaster <questMaster>__0; // 0x28
	internal QuestPhaseMaster <questPhaseMaster>__0; // 0x30
	internal EventMaster <eventMaster>__0; // 0x38
	internal EventDetailMaster <eventDetailMaster>__0; // 0x40
	internal EventStatusMaster <eventStatusMaster>__0; // 0x48
	internal EventStatusQuestMaster <eventStatusQuestMaster>__0; // 0x50
	internal SpotRoadMaster <spotRoadMaster>__0; // 0x58
	internal MapGimmickMaster <mapGimmickMaster>__0; // 0x60
	internal QuestPickupMaster <questPickupMaster>__0; // 0x68
	internal Dictionary<int, List<int>> <eventStatusQuestMismatchDictionary>__0; // 0x70
	internal WarEntity[] <warList>__0; // 0x78
	internal long <nowTime>__0; // 0x80
	internal int <warIdx>__1; // 0x88
	internal int <warCount>__1; // 0x8C
	internal int <warId>__2; // 0x90
	internal MapControl.WarInfo <warInfo>__2; // 0x98
	internal EventEntity <eventEnt>__3; // 0xA0
	internal EventDetailEntity <eventDetailEnt>__4; // 0xA8
	internal MapEntity[] <mapList>__2; // 0xB0
	internal int <mapIdx>__5; // 0xB8
	internal int <mapCount>__5; // 0xBC
	internal int <mapId>__6; // 0xC0
	internal MapControl.WarInfo <warInfo>__7; // 0xC8
	internal MapControl.MapInfo <mapInfo>__7; // 0xD0
	internal MapControl.SpotInfo <spotInfo>__7; // 0xD8
	internal WarEntity <warEnt>__7; // 0xE0
	internal UserQuestMaster <userQuestMaster>__7; // 0xE8
	internal int <mapInfoNow>__7; // 0xF0
	internal int <warInfoNow>__7; // 0xF4
	internal int <breakInterval>__7; // 0xF8
	internal int <questIdx>__8; // 0xFC
	internal int <questCount>__8; // 0x100
	internal QuestEntity <tmpQuestEnt>__9; // 0x108
	internal int <questId>__9; // 0x110
	internal UserQuestEntity <userQuestEnt>__9; // 0x118
	internal int <phaseCnt>__9; // 0x120
	internal bool <isQuestCleared>__9; // 0x124
	internal int <newSpotId>__9; // 0x128
	internal int <newMapId>__10; // 0x12C
	internal int <newWarId>__11; // 0x130
	internal MapControl.QuestInfo <questInfo>__9; // 0x138
	internal MapControl.QuestInfo.DispType <questDispType>__12; // 0x140
	internal List<int> <questMismatchList>__13; // 0x148
	internal QuestPhaseEntity[] <questPhaseList>__9; // 0x150
	internal Action endCallback; // 0x158
	internal QuestTree $this; // 0x160
	internal object $current; // 0x168
	internal bool $disposing; // 0x170
	internal int $PC; // 0x174
	private static Comparison<MapControl.WarInfo> <>f__am$cache0; // 0x0
	private QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1.<mfBaseTreeMakeWithOpenCheck>c__AnonStorey8 $locvar0; // 0x178
	private static Comparison<MapControl.QuestInfo> <>f__am$cache1; // 0x8

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4A154 Offset: 0xD4A154 VA: 0xD4A154
	// RVA: 0x1814C98 Offset: 0x1814C98 VA: 0x1814C98
	public void .ctor() { }

	// RVA: 0x1817174 Offset: 0x1817174 VA: 0x1817174 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A164 Offset: 0xD4A164 VA: 0xD4A164
	// RVA: 0x1818C40 Offset: 0x1818C40 VA: 0x1818C40 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A174 Offset: 0xD4A174 VA: 0xD4A174
	// RVA: 0x1818C48 Offset: 0x1818C48 VA: 0x1818C48 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A184 Offset: 0xD4A184 VA: 0xD4A184
	// RVA: 0x1818C50 Offset: 0x1818C50 VA: 0x1818C50 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A194 Offset: 0xD4A194 VA: 0xD4A194
	// RVA: 0x1818C64 Offset: 0x1818C64 VA: 0x1818C64 Slot: 6
	public void Reset() { }

	// RVA: 0x1818CCC Offset: 0x1818CCC VA: 0x1818CCC
	private static int <>m__0(MapControl.WarInfo a, MapControl.WarInfo b) { }

	// RVA: 0x1818D40 Offset: 0x1818D40 VA: 0x1818D40
	private static int <>m__1(MapControl.QuestInfo a, MapControl.QuestInfo b) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1.<mfBaseTreeMakeWithOpenCheck>c__AnonStorey8 // TypeDefIndex: 11211
{
	// Fields
	internal int spotInfoNow; // 0x10
	internal QuestTree.<mfBaseTreeMakeWithOpenCheck>c__Iterator1 <>f__ref$1; // 0x18

	// Methods

	// RVA: 0x1818C38 Offset: 0x1818C38 VA: 0x1818C38
	public void .ctor() { }

	// RVA: 0x1818DC8 Offset: 0x1818DC8 VA: 0x1818DC8
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB1E30 Offset: 0xCB1E30 VA: 0xCB1E30
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 11212
{
	// Fields
	internal DataManager <dataManager>__0; // 0x10
	internal MapMaster <mapMaster>__0; // 0x18
	internal SpotMaster <spotMaster>__0; // 0x20
	internal QuestMaster <questMaster>__0; // 0x28
	internal QuestPhaseMaster <questPhaseMaster>__0; // 0x30
	internal EventMaster <eventMaster>__0; // 0x38
	internal EventDetailMaster <eventDetailMaster>__0; // 0x40
	internal EventStatusMaster <eventStatusMaster>__0; // 0x48
	internal EventStatusQuestMaster <eventStatusQuestMaster>__0; // 0x50
	internal SpotRoadMaster <spotRoadMaster>__0; // 0x58
	internal MapGimmickMaster <mapGimmickMaster>__0; // 0x60
	internal QuestPickupMaster <questPickupMaster>__0; // 0x68
	internal Dictionary<int, List<int>> <eventStatusQuestMismatchDictionary>__0; // 0x70
	internal long <nowTime>__1; // 0x78
	internal int targetWarId; // 0x80
	internal WarEntity <warEntity>__1; // 0x88
	internal int <index>__1; // 0x90
	internal MapControl.WarInfo <warInfo>__1; // 0x98
	internal EventEntity <eventEnt>__2; // 0xA0
	internal EventDetailEntity <eventDetailEnt>__3; // 0xA8
	internal MapEntity[] <mapList>__1; // 0xB0
	internal int <mapIdx>__4; // 0xB8
	internal int <mapCount>__4; // 0xBC
	internal MapControl.MapInfo <mapInfo>__5; // 0xC0
	internal SpotEntity[] <spotList>__5; // 0xC8
	internal SpotRoadEntity[] <spotRoadList>__5; // 0xD0
	internal MapGimmickEntity[] <mapGimmickList>__5; // 0xD8
	internal MapControl.WarInfo <warInfo>__6; // 0xE0
	internal MapControl.MapInfo <mapInfo>__6; // 0xE8
	internal MapControl.SpotInfo <spotInfo>__6; // 0xF0
	internal WarEntity <warEnt>__6; // 0xF8
	internal UserQuestMaster <userQuestMaster>__6; // 0x100
	internal int <nowMapId>__6; // 0x108
	internal int <nowWarId>__6; // 0x10C
	internal int <breakInterval>__6; // 0x110
	internal int <cnt>__6; // 0x114
	internal List.Enumerator<MapControl.SpotInfo> $locvar0; // 0x118
	internal MapControl.SpotInfo <x>__7; // 0x130
	internal QuestEntity[] <questList>__6; // 0x138
	internal int <questIdx>__8; // 0x140
	internal int <questCount>__8; // 0x144
	internal QuestEntity <tmpQuestEnt>__9; // 0x148
	internal int <phaseCnt>__9; // 0x150
	internal bool <isQuestCleared>__9; // 0x154
	internal UserQuestEntity <userQuestEnt>__9; // 0x158
	internal int <newSpotId>__9; // 0x160
	internal int <newMapId>__10; // 0x164
	internal int <newWarId>__11; // 0x168
	internal MapControl.QuestInfo <questInfo>__12; // 0x170
	internal MapControl.QuestInfo.DispType <questDispType>__13; // 0x178
	internal List<int> <questMismatchList>__14; // 0x180
	internal QuestPhaseEntity[] <questPhaseList>__9; // 0x188
	internal Action endCallback; // 0x190
	internal QuestTree $this; // 0x198
	internal object $current; // 0x1A0
	internal bool $disposing; // 0x1A8
	internal int $PC; // 0x1AC
	private QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 $locvar1; // 0x1B0
	private QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyA $locvar2; // 0x1B8
	private static Comparison<MapControl.WarInfo> <>f__am$cache0; // 0x0
	private QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyE $locvar6; // 0x1C0
	private static Comparison<MapControl.QuestInfo> <>f__am$cache1; // 0x8

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD4A1A4 Offset: 0xD4A1A4 VA: 0xD4A1A4
	// RVA: 0x1814D4C Offset: 0x1814D4C VA: 0x1814D4C
	public void .ctor() { }

	// RVA: 0x1818E0C Offset: 0x1818E0C VA: 0x1818E0C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A1B4 Offset: 0xD4A1B4 VA: 0xD4A1B4
	// RVA: 0x181B330 Offset: 0x181B330 VA: 0x181B330 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A1C4 Offset: 0xD4A1C4 VA: 0xD4A1C4
	// RVA: 0x181B338 Offset: 0x181B338 VA: 0x181B338 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A1D4 Offset: 0xD4A1D4 VA: 0xD4A1D4
	// RVA: 0x181B340 Offset: 0x181B340 VA: 0x181B340 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD4A1E4 Offset: 0xD4A1E4 VA: 0xD4A1E4
	// RVA: 0x181B3B8 Offset: 0x181B3B8 VA: 0x181B3B8 Slot: 6
	public void Reset() { }

	// RVA: 0x181B420 Offset: 0x181B420 VA: 0x181B420
	private static int <>m__0(MapControl.WarInfo a, MapControl.WarInfo b) { }

	// RVA: 0x181B494 Offset: 0x181B494 VA: 0x181B494
	private static int <>m__1(MapControl.QuestInfo a, MapControl.QuestInfo b) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 // TypeDefIndex: 11213
{
	// Fields
	internal int targetWarId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x181B300 Offset: 0x181B300 VA: 0x181B300
	public void .ctor() { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyA // TypeDefIndex: 11214
{
	// Fields
	internal int warId; // 0x10
	internal int mapId; // 0x14
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 <>f__ref$9; // 0x20

	// Methods

	// RVA: 0x181B308 Offset: 0x181B308 VA: 0x181B308
	public void .ctor() { }

	// RVA: 0x181B51C Offset: 0x181B51C VA: 0x181B51C
	internal bool <>m__0(WarEntity x) { }

	// RVA: 0x181B574 Offset: 0x181B574 VA: 0x181B574
	internal bool <>m__1(MapControl.WarInfo x) { }

	// RVA: 0x181B5B8 Offset: 0x181B5B8 VA: 0x181B5B8
	internal bool <>m__2(MapControl.MapInfo x) { }

	// RVA: 0x181B5FC Offset: 0x181B5FC VA: 0x181B5FC
	internal bool <>m__3(MapControl.MapInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyB // TypeDefIndex: 11215
{
	// Fields
	internal int spotId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x181B310 Offset: 0x181B310 VA: 0x181B310
	public void .ctor() { }

	// RVA: 0x181B640 Offset: 0x181B640 VA: 0x181B640
	internal bool <>m__0(MapControl.SpotInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyC // TypeDefIndex: 11216
{
	// Fields
	internal int spotRoadId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x181B318 Offset: 0x181B318 VA: 0x181B318
	public void .ctor() { }

	// RVA: 0x181B684 Offset: 0x181B684 VA: 0x181B684
	internal bool <>m__0(MapControl.SpotRoadInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyD // TypeDefIndex: 11217
{
	// Fields
	internal int mapGimmickId; // 0x10
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x181B320 Offset: 0x181B320 VA: 0x181B320
	public void .ctor() { }

	// RVA: 0x181B6C8 Offset: 0x181B6C8 VA: 0x181B6C8
	internal bool <>m__0(MapControl.MapGimmickInfo x) { }
}

// Namespace: 
private sealed class QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStoreyE // TypeDefIndex: 11218
{
	// Fields
	internal List<int> spotInfoList; // 0x10
	internal int nowSpotId; // 0x18
	internal int questId; // 0x1C
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2 <>f__ref$2; // 0x20
	internal QuestTree.<mfBaseTreeUpdateWithOpenCheck>c__Iterator2.<mfBaseTreeUpdateWithOpenCheck>c__AnonStorey9 <>f__ref$9; // 0x28

	// Methods

	// RVA: 0x181B328 Offset: 0x181B328 VA: 0x181B328
	public void .ctor() { }

	// RVA: 0x181B70C Offset: 0x181B70C VA: 0x181B70C
	internal bool <>m__0(QuestEntity x) { }

	// RVA: 0x181B78C Offset: 0x181B78C VA: 0x181B78C
	internal bool <>m__1(MapControl.SpotInfo x) { }

	// RVA: 0x181B7D0 Offset: 0x181B7D0 VA: 0x181B7D0
	internal bool <>m__2(MapControl.QuestInfo x) { }
}

// Namespace: 
public class ScrollConfirmDialog : BaseDialog // TypeDefIndex: 11219
{
	// Fields
	private static readonly int TITLE_WIDTH; // 0x0
	private static readonly float CANCEL_BUTTON_DEFAULT_POSITION_X; // 0x4
	private static readonly float CANCEL_BUTTON_CENTER_POSITION_X; // 0x8
	protected static readonly int MESSAGE_POS_WHEN_ITEM_ICON_DISPLAY; // 0xC
	protected static readonly int INTERVAL_OF_MESSAGE_AND_ITEM_ICON; // 0x10
	[SerializeField] // RVA: 0xCEA2C4 Offset: 0xCEA2C4 VA: 0xCEA2C4
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCEA2D4 Offset: 0xCEA2D4 VA: 0xCEA2D4
	protected UIScrollView scrollView; // 0x60
	[SerializeField] // RVA: 0xCEA2E4 Offset: 0xCEA2E4 VA: 0xCEA2E4
	protected GameObject scrollLabelSpace; // 0x68
	[SerializeField] // RVA: 0xCEA2F4 Offset: 0xCEA2F4 VA: 0xCEA2F4
	protected UILabel scrollLabel; // 0x70
	[SerializeField] // RVA: 0xCEA304 Offset: 0xCEA304 VA: 0xCEA304
	protected UISprite descriptionSprite; // 0x78
	[SerializeField] // RVA: 0xCEA314 Offset: 0xCEA314 VA: 0xCEA314
	protected UILabel messageLabel; // 0x80
	[SerializeField] // RVA: 0xCEA324 Offset: 0xCEA324 VA: 0xCEA324
	protected GameObject buttonDecideObject; // 0x88
	[SerializeField] // RVA: 0xCEA334 Offset: 0xCEA334 VA: 0xCEA334
	protected UILabel buttonDecideLabel; // 0x90
	[SerializeField] // RVA: 0xCEA344 Offset: 0xCEA344 VA: 0xCEA344
	protected GameObject buttonCancelObject; // 0x98
	[SerializeField] // RVA: 0xCEA354 Offset: 0xCEA354 VA: 0xCEA354
	protected UILabel buttonCancelLabel; // 0xA0
	[SerializeField] // RVA: 0xCEA364 Offset: 0xCEA364 VA: 0xCEA364
	public QuestDialogIconImageComponent questDialogIconImageComponent; // 0xA8
	[SerializeField] // RVA: 0xCEA374 Offset: 0xCEA374 VA: 0xCEA374
	protected UILabel RearMessageLabel; // 0xB0
	protected ScrollConfirmDialog.ClickDelegate clickFunc; // 0xB8
	protected Action closeCallbackFunc; // 0xC0
	protected bool isButtonEnable; // 0xC8
	protected bool isDecideBtnSe; // 0xC9
	protected SeManager.SystemSeKind decideSe; // 0xCC

	// Properties
	public UILabel ScrollLabel { get; }
	public UILabel ButtonDecideLabel { get; }
	public UILabel ButtonCancelLabel { get; }
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1B1689C Offset: 0x1B1689C VA: 0x1B1689C
	public void .ctor() { }

	// RVA: 0x1B16904 Offset: 0x1B16904 VA: 0x1B16904
	public UILabel get_ScrollLabel() { }

	// RVA: 0x1B1690C Offset: 0x1B1690C VA: 0x1B1690C
	public UILabel get_ButtonDecideLabel() { }

	// RVA: 0x1B16914 Offset: 0x1B16914 VA: 0x1B16914
	public UILabel get_ButtonCancelLabel() { }

	// RVA: 0x1B1691C Offset: 0x1B1691C VA: 0x1B1691C
	public void Init() { }

	// RVA: 0x1B16E0C Offset: 0x1B16E0C VA: 0x1B16E0C
	public void Open(string title, string scrollMessage, string footMessage, ScrollConfirmDialog.ClickDelegate func) { }

	// RVA: 0x1B17550 Offset: 0x1B17550 VA: 0x1B17550
