	public int freeStone; // 0x20
	public int chargeStone; // 0x24
	public Action actionOnOpening; // 0x28

	// Methods

	// RVA: 0x17A6794 Offset: 0x17A6794 VA: 0x17A6794
	public void .ctor() { }
}

// Namespace: 
public class TermsOfUseDlg : BaseDialog // TypeDefIndex: 5816
{
	// Fields
	[SerializeField] // RVA: 0xC50F38 Offset: 0xC50F38 VA: 0xC50F38
	protected UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xC50F48 Offset: 0xC50F48 VA: 0xC50F48
	protected UILabel messageLabel; // 0x60
	[SerializeField] // RVA: 0xC50F58 Offset: 0xC50F58 VA: 0xC50F58
	protected UILabel showLabel; // 0x68
	[SerializeField] // RVA: 0xC50F68 Offset: 0xC50F68 VA: 0xC50F68
	protected UILabel decideLabel; // 0x70
	[SerializeField] // RVA: 0xC50F78 Offset: 0xC50F78 VA: 0xC50F78
	protected UILabel cancelLabel; // 0x78
	private string wvTitle; // 0x80
	private NetworkManager.WebViewAddressType wvAddress; // 0x88
	protected TermsOfUseDlg.State state; // 0x8C
	[CompilerGeneratedAttribute] // RVA: 0xC50F88 Offset: 0xC50F88 VA: 0xC50F88
	[DebuggerBrowsableAttribute] // RVA: 0xC50F88 Offset: 0xC50F88 VA: 0xC50F88
	private TermsOfUseDlg.CallbackFunc callbackFunc; // 0x90
	protected Action closeCallbackFunc; // 0x98

	// Methods

	// RVA: 0xEB5FA8 Offset: 0xEB5FA8 VA: 0xEB5FA8
	public void .ctor() { }

	// RVA: 0xEB6010 Offset: 0xEB6010 VA: 0xEB6010
	protected void add_callbackFunc(TermsOfUseDlg.CallbackFunc value) { }

	// RVA: 0xEB60FC Offset: 0xEB60FC VA: 0xEB60FC
	protected void remove_callbackFunc(TermsOfUseDlg.CallbackFunc value) { }

	// RVA: 0xEB61E8 Offset: 0xEB61E8 VA: 0xEB61E8
	public void Init() { }

	// RVA: 0xEB630C Offset: 0xEB630C VA: 0xEB630C
	public void Open(string title, string message, string showMessage, string cancelMessage, string decideMessage, NetworkManager.WebViewAddressType address, string webViewTitle, TermsOfUseDlg.CallbackFunc callback, bool canMaskTouchClose = False) { }

	// RVA: 0xEB64EC Offset: 0xEB64EC VA: 0xEB64EC
	protected void EndOpen() { }

	// RVA: 0xEB64F8 Offset: 0xEB64F8 VA: 0xEB64F8
	public void Close() { }

	// RVA: 0xEB6500 Offset: 0xEB6500 VA: 0xEB6500
	public void Close(Action callback) { }

	// RVA: 0xEB6590 Offset: 0xEB6590 VA: 0xEB6590
	protected void EndClose() { }

	// RVA: 0xEB65CC Offset: 0xEB65CC VA: 0xEB65CC
	protected void Callback(bool result) { }

	// RVA: 0xEB6818 Offset: 0xEB6818 VA: 0xEB6818
	public void OnClickShow() { }

	// RVA: 0xEB6940 Offset: 0xEB6940 VA: 0xEB6940
	protected void OnEndShowWebView() { }

	// RVA: 0xEB6944 Offset: 0xEB6944 VA: 0xEB6944
	public void OnClickDecide() { }

	// RVA: 0xEB6AB0 Offset: 0xEB6AB0 VA: 0xEB6AB0
	public void OnClickCancel() { }
}

// Namespace: 
protected enum TermsOfUseDlg.State // TypeDefIndex: 5817
{
	// Fields
	public int value__; // 0x0
	public const TermsOfUseDlg.State INIT = 0;
	public const TermsOfUseDlg.State OPEN = 1;
	public const TermsOfUseDlg.State INPUT = 2;
	public const TermsOfUseDlg.State SELECTED = 3;
	public const TermsOfUseDlg.State CLOSE = 4;
}

// Namespace: 
public sealed class TermsOfUseDlg.CallbackFunc : MulticastDelegate // TypeDefIndex: 5818
{
	// Methods

	// RVA: 0xEB6B50 Offset: 0xEB6B50 VA: 0xEB6B50
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0xEB65EC Offset: 0xEB65EC VA: 0xEB65EC Slot: 11
	public virtual void Invoke(bool result) { }

	// RVA: 0xEB6B60 Offset: 0xEB6B60 VA: 0xEB6B60 Slot: 12
	public virtual IAsyncResult BeginInvoke(bool result, AsyncCallback callback, object object) { }

	// RVA: 0xEB6BF0 Offset: 0xEB6BF0 VA: 0xEB6BF0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class TimeScaleDebug : MonoBehaviour // TypeDefIndex: 5819
{
	// Methods

	// RVA: 0xEB9860 Offset: 0xEB9860 VA: 0xEB9860
	public void .ctor() { }
}

// Namespace: 
public class TitleInfoEventBulletinBoardComponent : MonoBehaviour // TypeDefIndex: 5820
{
	// Fields
	[SerializeField] // RVA: 0xC50FC4 Offset: 0xC50FC4 VA: 0xC50FC4
	protected Vector3 TerminalLocalPos; // 0x18
	[SerializeField] // RVA: 0xC50FD4 Offset: 0xC50FD4 VA: 0xC50FD4
	protected Vector3 EventLocalPos; // 0x24
	[SerializeField] // RVA: 0xC50FE4 Offset: 0xC50FE4 VA: 0xC50FE4
	protected float messageScrollSpeed; // 0x30
	[SerializeField] // RVA: 0xC50FF4 Offset: 0xC50FF4 VA: 0xC50FF4
	protected float spaceBetweenMessages; // 0x34
	[SerializeField] // RVA: 0xC51004 Offset: 0xC51004 VA: 0xC51004
	protected UIPanel scrollerPanel; // 0x38
	[SerializeField] // RVA: 0xC51014 Offset: 0xC51014 VA: 0xC51014
	protected GameObject baseLabel; // 0x40
	[SerializeField] // RVA: 0xC51024 Offset: 0xC51024 VA: 0xC51024
	protected UISprite baseIcon; // 0x48
	[SerializeField] // RVA: 0xC51034 Offset: 0xC51034 VA: 0xC51034
	protected string baseIconName; // 0x50
	[SerializeField] // RVA: 0xC51044 Offset: 0xC51044 VA: 0xC51044
	protected UISprite bulletinBg; // 0x58
	[SerializeField] // RVA: 0xC51054 Offset: 0xC51054 VA: 0xC51054
	protected string bulletinBgName; // 0x60
	[SerializeField] // RVA: 0xC51064 Offset: 0xC51064 VA: 0xC51064
	protected UISprite bulletinTitle; // 0x68
	[SerializeField] // RVA: 0xC51074 Offset: 0xC51074 VA: 0xC51074
	protected string bulletinTitleName; // 0x70
	private List<string> messages; // 0x78
	private List<UILabel> labels; // 0x80
	private List<int> randomQue; // 0x88
	private float left; // 0x90
	private float right; // 0x94

	// Methods

	// RVA: 0x14B64A0 Offset: 0x14B64A0 VA: 0x14B64A0
	public void .ctor() { }

	// RVA: 0x14B64B4 Offset: 0x14B64B4 VA: 0x14B64B4
	private void Update() { }

	// RVA: 0x14B09BC Offset: 0x14B09BC VA: 0x14B09BC
	public void Init(TitleInfoEventBulletinBoardComponent.DispType dispType) { }

	// RVA: 0x14B69A4 Offset: 0x14B69A4 VA: 0x14B69A4
	private Vector3 localPosByDispType(TitleInfoEventBulletinBoardComponent.DispType dispType) { }

	// RVA: 0x14B0B30 Offset: 0x14B0B30 VA: 0x14B0B30
	public void SetUp(List<string> boardMessages) { }

	// RVA: 0x14B69D8 Offset: 0x14B69D8 VA: 0x14B69D8
	private void resetLabelList() { }

	// RVA: 0x14B678C Offset: 0x14B678C VA: 0x14B678C
	private void AddRandomLabel(float setPos) { }

	// RVA: 0x14B6C64 Offset: 0x14B6C64 VA: 0x14B6C64
	private int GetNextRandomIdx() { }

	// RVA: 0x14B6BA0 Offset: 0x14B6BA0 VA: 0x14B6BA0
	private void ResetRandomQueue() { }

	// RVA: -1 Offset: -1
	private static List<T> ListShuffle<T>(List<T> list, bool withoutFirst = False) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A2CDDC Offset: 0x1A2CDDC VA: 0x1A2CDDC
	|-TitleInfoEventBulletinBoardComponent.ListShuffle<int>
	|
	|-RVA: 0x1A2CF28 Offset: 0x1A2CF28 VA: 0x1A2CF28
	|-TitleInfoEventBulletinBoardComponent.ListShuffle<object>
	*/
}

// Namespace: 
public enum TitleInfoEventBulletinBoardComponent.DispType // TypeDefIndex: 5821
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventBulletinBoardComponent.DispType TERMINAL = 0;
	public const TitleInfoEventBulletinBoardComponent.DispType EVENT = 1;
}

// Namespace: 
public class TitleInfoEventDailyPoint : BaseMonoBehaviour // TypeDefIndex: 5822
{
	// Fields
	[SerializeField] // RVA: 0xC51084 Offset: 0xC51084 VA: 0xC51084
	private ItemIconComponent itemIcon; // 0x18
	[SerializeField] // RVA: 0xC51094 Offset: 0xC51094 VA: 0xC51094
	private GameObject pointRoot; // 0x20
	[SerializeField] // RVA: 0xC510A4 Offset: 0xC510A4 VA: 0xC510A4
	private UILabel pointLabel; // 0x28
	[SerializeField] // RVA: 0xC510B4 Offset: 0xC510B4 VA: 0xC510B4
	private UILabel satisfyLabel; // 0x30
	[SerializeField] // RVA: 0xC510C4 Offset: 0xC510C4 VA: 0xC510C4
	private GameObject pointLabelRight; // 0x38
	[SerializeField] // RVA: 0xC510D4 Offset: 0xC510D4 VA: 0xC510D4
	private GameObject pointLabelLeft; // 0x40
	[SerializeField] // RVA: 0xC510E4 Offset: 0xC510E4 VA: 0xC510E4
	private SimpleAnimation simpleAnimation; // 0x48
	[SerializeField] // RVA: 0xC510F4 Offset: 0xC510F4 VA: 0xC510F4
	private Animation animation; // 0x50
	[SerializeField] // RVA: 0xC51104 Offset: 0xC51104 VA: 0xC51104
	private float voiceStartTime; // 0x58
	private TitleInfoEventDailyPoint.STATE state; // 0x5C
	private Action endCallback; // 0x60
	private EventDailyPoint eventDailyPoint; // 0x68
	private EventPointBehavior eventPointBehavior; // 0x70
	private List<ServantVoiceData[]> voiceList; // 0x78
	private string voiceAssetName; // 0x80
	private string voiceName; // 0x88
	private SePlayer voicePlayer; // 0x90
	private int selectVoiceIndex; // 0x98
	private int maxPlayCnt; // 0x9C
	private int playCnt; // 0xA0
	private bool initPosFlag; // 0xA4
	private float pointLabelRightInitPosX; // 0xA8
	private float pointRootInitPosX; // 0xAC
	private ScreenTouchInformationComponent screenTouchInfo; // 0xB0

	// Methods

	// RVA: 0x14B6E00 Offset: 0x14B6E00 VA: 0x14B6E00
	public void .ctor() { }

	// RVA: 0x14AE590 Offset: 0x14AE590 VA: 0x14AE590
	public void Open(Action callback) { }

	// RVA: 0x14B6E08 Offset: 0x14B6E08 VA: 0x14B6E08
	private void OnLoadSvtVoice() { }

	// RVA: 0x14B7224 Offset: 0x14B7224 VA: 0x14B7224
	private void StartVoice() { }

	// RVA: 0x14B7348 Offset: 0x14B7348 VA: 0x14B7348
	private void PlayVoice() { }

	// RVA: 0x14B74F8 Offset: 0x14B74F8 VA: 0x14B74F8
	private void EndPlayVoice() { }

	// RVA: 0x14B7620 Offset: 0x14B7620 VA: 0x14B7620
	private void Update() { }

	// RVA: 0x14B76A8 Offset: 0x14B76A8 VA: 0x14B76A8
	public void OnTouchDisp() { }

	// RVA: 0x14B77F4 Offset: 0x14B77F4 VA: 0x14B77F4
	public void Close() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8304 Offset: 0xCC8304 VA: 0xCC8304
	// RVA: 0x14B7928 Offset: 0x14B7928 VA: 0x14B7928
	private void <OnLoadSvtVoice>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8314 Offset: 0xCC8314 VA: 0xCC8314
	// RVA: 0x14B7CB4 Offset: 0x14B7CB4 VA: 0x14B7CB4
	private void <OnTouchDisp>m__1() { }
}

// Namespace: 
private enum TitleInfoEventDailyPoint.STATE // TypeDefIndex: 5823
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventDailyPoint.STATE NONE = 0;
	public const TitleInfoEventDailyPoint.STATE PLAY = 1;
	public const TitleInfoEventDailyPoint.STATE TOUCH_WAIT = 2;
}

// Namespace: 
public class TitleInfoEventDailyPointItemComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5824
{
	// Fields
	private const int DailyPointItemIndex = 0;
	private const int SatisfactionPointItemIndex = 1;
	[SerializeField] // RVA: 0xC51114 Offset: 0xC51114 VA: 0xC51114
	private SideItemComponent prefab; // 0x20
	[SerializeField] // RVA: 0xC51124 Offset: 0xC51124 VA: 0xC51124
	private TitleInfoEventDailyPointItemComponent.ItemInfo[] dailyPointItemInfoList; // 0x28
	[SerializeField] // RVA: 0xC51134 Offset: 0xC51134 VA: 0xC51134
	private UILabel subLabel; // 0x30
	[SerializeField] // RVA: 0xC51144 Offset: 0xC51144 VA: 0xC51144
	private Vector3 subLabelPosition; // 0x38
	[SerializeField] // RVA: 0xC51154 Offset: 0xC51154 VA: 0xC51154
	private int subLabelFontSize; // 0x44
	[SerializeField] // RVA: 0xC51164 Offset: 0xC51164 VA: 0xC51164
	private UILabel.Effect subLabelEffectStyle; // 0x48
	[SerializeField] // RVA: 0xC51174 Offset: 0xC51174 VA: 0xC51174
	private Color subLabelEffectColor; // 0x4C
	[SerializeField] // RVA: 0xC51184 Offset: 0xC51184 VA: 0xC51184
	private Color subLabelGradientColorTop; // 0x5C
	[SerializeField] // RVA: 0xC51194 Offset: 0xC51194 VA: 0xC51194
	private Color subLabelGradientColorBottom; // 0x6C
	[SerializeField] // RVA: 0xC511A4 Offset: 0xC511A4 VA: 0xC511A4
	private float recievePointFadeDuration; // 0x7C
	[SerializeField] // RVA: 0xC511B4 Offset: 0xC511B4 VA: 0xC511B4
	private Vector3 firstEffectPosition; // 0x80
	[SerializeField] // RVA: 0xC511C4 Offset: 0xC511C4 VA: 0xC511C4
	private Vector3 firstEffectPositionDiff; // 0x8C
	[SerializeField] // RVA: 0xC511D4 Offset: 0xC511D4 VA: 0xC511D4
	private Vector3 lastEffectPosition; // 0x98
	[SerializeField] // RVA: 0xC511E4 Offset: 0xC511E4 VA: 0xC511E4
	private float pointTextInterval; // 0xA4
	[SerializeField] // RVA: 0xC511F4 Offset: 0xC511F4 VA: 0xC511F4
	private float countAnimDuration; // 0xA8
	private List<SideItemComponent> itemList; // 0xB0
	private AssetData effectAssetData; // 0xB8
	private int eventId; // 0xC0
	private int recievePoint; // 0xC4

	// Methods

	// RVA: 0x14B7CB8 Offset: 0x14B7CB8 VA: 0x14B7CB8
	public void .ctor() { }

	// RVA: 0x14B7D38 Offset: 0x14B7D38 VA: 0x14B7D38 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14B7D40 Offset: 0x14B7D40 VA: 0x14B7D40 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14B7D44 Offset: 0x14B7D44 VA: 0x14B7D44 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14B7D4C Offset: 0x14B7D4C VA: 0x14B7D4C
	public void Setup(int eventId) { }

	// RVA: 0x14B7D54 Offset: 0x14B7D54 VA: 0x14B7D54
	private void UpdateDailyPointUI() { }

	// RVA: 0x14B8584 Offset: 0x14B8584 VA: 0x14B8584
	public void PrepareUpdateUIWithEffect(int recievePoint, AssetData assetData) { }

	// RVA: 0x14B89A8 Offset: 0x14B89A8 VA: 0x14B89A8
	public void UpdateUIWithEffect(Action finishEffectEvent) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC8324 Offset: 0xCC8324 VA: 0xCC8324
	// RVA: 0x14B89D8 Offset: 0x14B89D8 VA: 0x14B89D8
	private IEnumerator UpdateDailyPointUIWithEffect_IE(int recievePoint, Action finishEffectEvent) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC8334 Offset: 0xCC8334 VA: 0xCC8334
	// RVA: 0x14B8A74 Offset: 0x14B8A74 VA: 0x14B8A74
	private IEnumerator PlayEffect_IE(string effectName, Vector3 position) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC8344 Offset: 0xCC8344 VA: 0xCC8344
	// RVA: 0x14B8B40 Offset: 0x14B8B40 VA: 0x14B8B40
	private IEnumerator PlayCountAnimation_IE(UILabel label, int from, int to, float duration) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC8354 Offset: 0xCC8354 VA: 0xCC8354
	// RVA: 0x14B8C10 Offset: 0x14B8C10 VA: 0x14B8C10
	private IEnumerator PlaySubLabelFadeAnimation_IE(float fromAlpha, float toAlpha, float duration) { }

	// RVA: 0x14B7F6C Offset: 0x14B7F6C VA: 0x14B7F6C
	private void DeactivateSubLabel() { }

	// RVA: 0x14B8CD8 Offset: 0x14B8CD8 VA: 0x14B8CD8
	private TitleInfoEventDailyPointItemComponent.ItemInfo GetItemInfo(int index) { }

	// RVA: 0x14B8264 Offset: 0x14B8264 VA: 0x14B8264
	private SideItemComponent GetItem(int index) { }

	// RVA: 0x14B8D5C Offset: 0x14B8D5C VA: 0x14B8D5C
	private SideItemComponent CreateItem() { }

	// RVA: 0x14B7FFC Offset: 0x14B7FFC VA: 0x14B7FFC
	private int GetTotalDailyEventQuestPoint() { }

	// RVA: 0x14B7FE0 Offset: 0x14B7FE0 VA: 0x14B7FE0
	private int GetTotalDailyEventPoint() { }

	// RVA: 0x14B8978 Offset: 0x14B8978 VA: 0x14B8978
	private int GetLastDailyEventPoint() { }
}

// Namespace: 
[Serializable]
private class TitleInfoEventDailyPointItemComponent.ItemInfo // TypeDefIndex: 5825
{
	// Fields
	public Vector3 itemPosition; // 0x10
	public string frameSpriteName; // 0x20
	public Vector3 frameSpritePosition; // 0x28
	public Vector3 pointTextPosition; // 0x34
	public int pointTextFontSize; // 0x40
	public UILabel.Effect pointTextEffectStyle; // 0x44
	public Color pointTextEffectColor; // 0x48
	public Color pointTextGradientColorTop; // 0x58
	public Color pointTextGradientColorBottom; // 0x68

	// Methods

	// RVA: 0x14B9F08 Offset: 0x14B9F08 VA: 0x14B9F08
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42054 Offset: 0xC42054 VA: 0xC42054
private sealed class TitleInfoEventDailyPointItemComponent.<UpdateDailyPointUIWithEffect_IE>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5826
{
	// Fields
	internal int <totalDailyPoint>__1; // 0x10
	internal int <lastDailyPoint>__1; // 0x14
	internal SideItemComponent <dailyPointItem>__1; // 0x18
	internal int <digitCount>__2; // 0x20
	internal Vector3 <position>__2; // 0x24
	internal Action finishEffectEvent; // 0x30
	internal TitleInfoEventDailyPointItemComponent $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C
	private static Action <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD8140 Offset: 0xCD8140 VA: 0xCD8140
	// RVA: 0x14B8A6C Offset: 0x14B8A6C VA: 0x14B8A6C
	public void .ctor() { }

	// RVA: 0x14B9748 Offset: 0x14B9748 VA: 0x14B9748 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8150 Offset: 0xCD8150 VA: 0xCD8150
	// RVA: 0x14B9DFC Offset: 0x14B9DFC VA: 0x14B9DFC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8160 Offset: 0xCD8160 VA: 0xCD8160
	// RVA: 0x14B9E04 Offset: 0x14B9E04 VA: 0x14B9E04 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8170 Offset: 0xCD8170 VA: 0xCD8170
	// RVA: 0x14B9E0C Offset: 0x14B9E0C VA: 0x14B9E0C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8180 Offset: 0xCD8180 VA: 0xCD8180
	// RVA: 0x14B9E20 Offset: 0x14B9E20 VA: 0x14B9E20 Slot: 6
	public void Reset() { }

	// RVA: 0x14B9E88 Offset: 0x14B9E88 VA: 0x14B9E88
	private static void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42064 Offset: 0xC42064 VA: 0xC42064
private sealed class TitleInfoEventDailyPointItemComponent.<PlayEffect_IE>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5827
{
	// Fields
	internal string effectName; // 0x10
	internal GameObject <gobj>__0; // 0x18
	internal GameObject <prefab>__0; // 0x20
	internal Vector3 position; // 0x28
	internal TabOpenEffectComponent <effectComponent>__0; // 0x38
	internal TitleInfoEventDailyPointItemComponent $this; // 0x40
	internal object $current; // 0x48
	internal bool $disposing; // 0x50
	internal int $PC; // 0x54
	private TitleInfoEventDailyPointItemComponent.<PlayEffect_IE>c__Iterator1.<PlayEffect_IE>c__AnonStorey4 $locvar0; // 0x58

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD8190 Offset: 0xCD8190 VA: 0xCD8190
	// RVA: 0x14B8B38 Offset: 0x14B8B38 VA: 0x14B8B38
	public void .ctor() { }

	// RVA: 0x14B9164 Offset: 0x14B9164 VA: 0x14B9164 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD81A0 Offset: 0xCD81A0 VA: 0xCD81A0
	// RVA: 0x14B9458 Offset: 0x14B9458 VA: 0x14B9458 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD81B0 Offset: 0xCD81B0 VA: 0xCD81B0
	// RVA: 0x14B9460 Offset: 0x14B9460 VA: 0x14B9460 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD81C0 Offset: 0xCD81C0 VA: 0xCD81C0
	// RVA: 0x14B9468 Offset: 0x14B9468 VA: 0x14B9468 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD81D0 Offset: 0xCD81D0 VA: 0xCD81D0
	// RVA: 0x14B947C Offset: 0x14B947C VA: 0x14B947C Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class TitleInfoEventDailyPointItemComponent.<PlayEffect_IE>c__Iterator1.<PlayEffect_IE>c__AnonStorey4 // TypeDefIndex: 5828
{
	// Fields
	internal bool isFinished; // 0x10

	// Methods

	// RVA: 0x14B9450 Offset: 0x14B9450 VA: 0x14B9450
	public void .ctor() { }

	// RVA: 0x14B94E4 Offset: 0x14B94E4 VA: 0x14B94E4
	internal void <>m__0() { }

	// RVA: 0x14B94F0 Offset: 0x14B94F0 VA: 0x14B94F0
	internal bool <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42074 Offset: 0xC42074 VA: 0xC42074
private sealed class TitleInfoEventDailyPointItemComponent.<PlayCountAnimation_IE>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5829
{
	// Fields
	internal UILabel label; // 0x10
	internal float duration; // 0x18
	internal int to; // 0x1C
	internal float <timer>__1; // 0x20
	internal int from; // 0x24
	internal int <current>__2; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD81E0 Offset: 0xCD81E0 VA: 0xCD81E0
	// RVA: 0x14B8C08 Offset: 0x14B8C08 VA: 0x14B8C08
	public void .ctor() { }

	// RVA: 0x14B8E40 Offset: 0x14B8E40 VA: 0x14B8E40 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD81F0 Offset: 0xCD81F0 VA: 0xCD81F0
	// RVA: 0x14B90D8 Offset: 0x14B90D8 VA: 0x14B90D8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8200 Offset: 0xCD8200 VA: 0xCD8200
	// RVA: 0x14B90E0 Offset: 0x14B90E0 VA: 0x14B90E0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8210 Offset: 0xCD8210 VA: 0xCD8210
	// RVA: 0x14B90E8 Offset: 0x14B90E8 VA: 0x14B90E8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8220 Offset: 0xCD8220 VA: 0xCD8220
	// RVA: 0x14B90FC Offset: 0x14B90FC VA: 0x14B90FC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42084 Offset: 0xC42084 VA: 0xC42084
private sealed class TitleInfoEventDailyPointItemComponent.<PlaySubLabelFadeAnimation_IE>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 5830
{
	// Fields
	internal float <timer>__1; // 0x10
	internal float duration; // 0x14
	internal float fromAlpha; // 0x18
	internal float toAlpha; // 0x1C
	internal TitleInfoEventDailyPointItemComponent $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD8230 Offset: 0xCD8230 VA: 0xCD8230
	// RVA: 0x14B8CD0 Offset: 0x14B8CD0 VA: 0x14B8CD0
	public void .ctor() { }

	// RVA: 0x14B9500 Offset: 0x14B9500 VA: 0x14B9500 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8240 Offset: 0xCD8240 VA: 0xCD8240
	// RVA: 0x14B96BC Offset: 0x14B96BC VA: 0x14B96BC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8250 Offset: 0xCD8250 VA: 0xCD8250
	// RVA: 0x14B96C4 Offset: 0x14B96C4 VA: 0x14B96C4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8260 Offset: 0xCD8260 VA: 0xCD8260
	// RVA: 0x14B96CC Offset: 0x14B96CC VA: 0x14B96CC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8270 Offset: 0xCD8270 VA: 0xCD8270
	// RVA: 0x14B96E0 Offset: 0x14B96E0 VA: 0x14B96E0 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class TitleInfoEventFactory : BaseMonoBehaviour // TypeDefIndex: 5831
{
	// Fields
	private static readonly string SPRITE_NAME_TITLE; // 0x0
	private static readonly string SPRITE_NAME_POSSIBLE; // 0x8
	private static readonly string SPRITE_NAME_LINE; // 0x10
	private static readonly string SPRITE_NAME_BG_RATE; // 0x18
	private static readonly string OBJECT_NAME_EFFECT_1; // 0x20
	private static readonly string OBJECT_NAME_EFFECT_2; // 0x28
	private static readonly string EFFECT_ANIMATION_START_1; // 0x30
	private static readonly string EFFECT_ANIMATION_START_2; // 0x38
	[SerializeField] // RVA: 0xC51204 Offset: 0xC51204 VA: 0xC51204
	private UISprite titleSprite; // 0x18
	[SerializeField] // RVA: 0xC51214 Offset: 0xC51214 VA: 0xC51214
	private UIGrid grid; // 0x20
	[SerializeField] // RVA: 0xC51224 Offset: 0xC51224 VA: 0xC51224
	private UISprite createSprite; // 0x28
	[SerializeField] // RVA: 0xC51234 Offset: 0xC51234 VA: 0xC51234
	private UISprite lineSprite; // 0x30
	[SerializeField] // RVA: 0xC51244 Offset: 0xC51244 VA: 0xC51244
	private Transform RateBase; // 0x38
	[SerializeField] // RVA: 0xC51254 Offset: 0xC51254 VA: 0xC51254
	private UISprite bgRateSprite; // 0x40
	[SerializeField] // RVA: 0xC51264 Offset: 0xC51264 VA: 0xC51264
	private UILabel rateLabel; // 0x48
	[SerializeField] // RVA: 0xC51274 Offset: 0xC51274 VA: 0xC51274
	private GameObject titleInfoEventFactoryUnitPrefab; // 0x50
	[SerializeField] // RVA: 0xC51284 Offset: 0xC51284 VA: 0xC51284
	private Vector3 lvUpAnimetionOffset; // 0x58
	[SerializeField] // RVA: 0xC51294 Offset: 0xC51294 VA: 0xC51294
	private float lvUpIconCreateTime; // 0x64
	[SerializeField] // RVA: 0xC512A4 Offset: 0xC512A4 VA: 0xC512A4
	private float rateChangeTime; // 0x68
	private EventDetailEntity eventDetailEntity; // 0x70
	private Dictionary<int, TitleInfoEventFactoryUnit> unitDictionary; // 0x78
	private AssetData effectAsset; // 0x80
	private SimpleAnimation simpleAnimationData; // 0x88
	private Animation animationData; // 0x90
	private Action animationEndCallback; // 0x98
	private TitleInfoEventFactory.EffectId effectIndex; // 0xA0
	private int lvUpIndex; // 0xA4
	private int lvUpCount; // 0xA8

	// Methods

	// RVA: 0x14B9FA0 Offset: 0x14B9FA0 VA: 0x14B9FA0
	public void .ctor() { }

	// RVA: 0x14B2300 Offset: 0x14B2300 VA: 0x14B2300
	public void Setup(EventDetailEntity eventDetailEntity) { }

	// RVA: 0x14B9FA8 Offset: 0x14B9FA8 VA: 0x14B9FA8
	public void Open() { }

	// RVA: 0x14BA7B8 Offset: 0x14BA7B8 VA: 0x14BA7B8
	public void Close() { }

	// RVA: 0x14BA934 Offset: 0x14BA934 VA: 0x14BA934
	private void Update() { }

	// RVA: 0x14BB100 Offset: 0x14BB100 VA: 0x14BB100
	public void StartLvUpEffect(ShopEntity shopEntity, int buyCount, Action callback, AssetData effectAsset) { }

	// RVA: 0x14BB72C Offset: 0x14BB72C VA: 0x14BB72C
	private void LvUpIconCreate() { }

	// RVA: 0x14BAD3C Offset: 0x14BAD3C VA: 0x14BAD3C
	private void StartRateEffect() { }

	// RVA: 0x14BB7F0 Offset: 0x14BB7F0 VA: 0x14BB7F0
	private void RateChange() { }

	// RVA: 0x14BBAB8 Offset: 0x14BBAB8 VA: 0x14BBAB8
	private static void .cctor() { }
}

// Namespace: 
private enum TitleInfoEventFactory.EffectId // TypeDefIndex: 5832
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventFactory.EffectId NONE = 0;
	public const TitleInfoEventFactory.EffectId FACTORY = 1;
	public const TitleInfoEventFactory.EffectId RATE = 2;
}

// Namespace: 
public class TitleInfoEventFactoryUnit : BaseMonoBehaviour // TypeDefIndex: 5833
{
	// Fields
	private static readonly string SPRITE_NAME_ICON; // 0x0
	[SerializeField] // RVA: 0xC512B4 Offset: 0xC512B4 VA: 0xC512B4
	private UIGrid grid; // 0x18
	[SerializeField] // RVA: 0xC512C4 Offset: 0xC512C4 VA: 0xC512C4
	private UISprite iconSprite; // 0x20
	[SerializeField] // RVA: 0xC512D4 Offset: 0xC512D4 VA: 0xC512D4
	private Transform lvBase; // 0x28
	[SerializeField] // RVA: 0xC512E4 Offset: 0xC512E4 VA: 0xC512E4
	private UILabel lvLabel; // 0x30
	[SerializeField] // RVA: 0xC512F4 Offset: 0xC512F4 VA: 0xC512F4
	private UILabel lvLeftLabel; // 0x38
	[SerializeField] // RVA: 0xC51304 Offset: 0xC51304 VA: 0xC51304
	private float lvUpAnimetionTime; // 0x40
	private int lv; // 0x44

	// Methods

	// RVA: 0x14BBBA4 Offset: 0x14BBBA4 VA: 0x14BBBA4
	public void .ctor() { }

	// RVA: 0x14BA654 Offset: 0x14BA654 VA: 0x14BA654
	public void Open(int eventId, int factoryId, int lv) { }

	// RVA: 0x14BB7D8 Offset: 0x14BB7D8 VA: 0x14BB7D8
	public void LvUp(int count) { }

	// RVA: 0x14BBBAC Offset: 0x14BBBAC VA: 0x14BBBAC
	private void CreateIcon(int count, bool isAnimation) { }

	// RVA: 0x14BB694 Offset: 0x14BB694 VA: 0x14BB694
	public Vector3 GetLvUpEffectOffset() { }

	// RVA: 0x14BC0C0 Offset: 0x14BC0C0 VA: 0x14BC0C0
	private static void .cctor() { }
}

// Namespace: 
public abstract class TitleInfoEventInfoComponent : MonoBehaviour // TypeDefIndex: 5834
{
	// Fields
	[HideInInspector] // RVA: 0xC51314 Offset: 0xC51314 VA: 0xC51314
	public bool isMovedPos; // 0x18

	// Methods

	// RVA: 0x14B7D30 Offset: 0x14B7D30 VA: 0x14B7D30
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool IsDispPossible();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void UpdateDisp();

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool IsEventRaidBoss();
}

// Namespace: 
public class TitleInfoEventItemComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5835
{
	// Fields
	private static readonly float EVENT_ITEM_SCALE_DEFAULT; // 0x0
	private static readonly float EVENT_ITEM_SCALE_VS; // 0x4
	private static readonly string TITLE_SP_ITEM_NAME_PREFIX; // 0x8
	private static readonly string EVENT_ITEM_VS_BASE_SP_NAME; // 0x10
	private static readonly string EVENT_GPOINT_VS_BASE_SP_NAME; // 0x18
	[SerializeField] // RVA: 0xC51324 Offset: 0xC51324 VA: 0xC51324
	private GameObject mEventItemPrefab; // 0x20
	[SerializeField] // RVA: 0xC51334 Offset: 0xC51334 VA: 0xC51334
	private UISprite mStrSp; // 0x28
	[SerializeField] // RVA: 0xC51344 Offset: 0xC51344 VA: 0xC51344
	private UIGrid itemGrid; // 0x30
	[SerializeField] // RVA: 0xC51354 Offset: 0xC51354 VA: 0xC51354
	private GameObject[] mItemObjParents; // 0x38
	private EventItemComponent[] mEventItemComponents; // 0x40

	// Methods

	// RVA: 0x14BC11C Offset: 0x14BC11C VA: 0x14BC11C
	public void .ctor() { }

	// RVA: 0x14BC124 Offset: 0x14BC124 VA: 0x14BC124
	public void Setup(int[] item_ids, TitleInfoEventItemComponent.DispType[] disp_types, int eventId, int titleImageId = 0) { }

	// RVA: 0x14BCCE4 Offset: 0x14BCCE4 VA: 0x14BCCE4
	public void OnDestroy() { }

	// RVA: 0x14BCB4C Offset: 0x14BCB4C VA: 0x14BCB4C
	private void Destroy() { }

	// RVA: 0x14BCCE8 Offset: 0x14BCCE8 VA: 0x14BCCE8 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14BCD08 Offset: 0x14BCD08 VA: 0x14BCD08 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14BCDE8 Offset: 0x14BCDE8 VA: 0x14BCDE8 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14BCDF0 Offset: 0x14BCDF0 VA: 0x14BCDF0
	private static void .cctor() { }
}

// Namespace: 
public enum TitleInfoEventItemComponent.DispType // TypeDefIndex: 5836
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventItemComponent.DispType ITEM = 0;
	public const TitleInfoEventItemComponent.DispType POINT = 1;
	public const TitleInfoEventItemComponent.DispType MISSION = 2;
	public const TitleInfoEventItemComponent.DispType RAID_DAMAGE_POINT = 3;
	public const TitleInfoEventItemComponent.DispType EVENT_GROUP_POINT = 4;
	public const TitleInfoEventItemComponent.DispType DAILY_MISSION = 5;
}

// Namespace: 
public class TitleInfoEventLeagueVsComponent : TitleInfoEventInfoComponent // TypeDefIndex: 5837
{
	// Fields
	private static readonly Vector3 RAIDBOSS_ANIM_ROOT_POS; // 0x0
	private static readonly float ANIM_DURATION_FRAME_IN; // 0xC
	[SerializeField] // RVA: 0xC51364 Offset: 0xC51364 VA: 0xC51364
	private UISprite[] hpBar; // 0x20
	[SerializeField] // RVA: 0xC51374 Offset: 0xC51374 VA: 0xC51374
	private UISlider[] hpBarSlider; // 0x28
	[SerializeField] // RVA: 0xC51384 Offset: 0xC51384 VA: 0xC51384
	private UILabel restTimeLabel; // 0x30
	[SerializeField] // RVA: 0xC51394 Offset: 0xC51394 VA: 0xC51394
	private UISprite[] groupIcon; // 0x38
	[SerializeField] // RVA: 0xC513A4 Offset: 0xC513A4 VA: 0xC513A4
	private UISprite modeName; // 0x40
	[SerializeField] // RVA: 0xC513B4 Offset: 0xC513B4 VA: 0xC513B4
	private UISprite baseWindow; // 0x48
	[SerializeField] // RVA: 0xC513C4 Offset: 0xC513C4 VA: 0xC513C4
	private GameObject resultPanel; // 0x50
	[SerializeField] // RVA: 0xC513D4 Offset: 0xC513D4 VA: 0xC513D4
	private MaskFade maskFade; // 0x58
	[SerializeField] // RVA: 0xC513E4 Offset: 0xC513E4 VA: 0xC513E4
	private UISprite[] splitIcon; // 0x60
	[SerializeField] // RVA: 0xC513F4 Offset: 0xC513F4 VA: 0xC513F4
	private UISprite hpFrame; // 0x68
	[SerializeField] // RVA: 0xC51404 Offset: 0xC51404 VA: 0xC51404
	private UISprite hpBack; // 0x70
	[SerializeField] // RVA: 0xC51414 Offset: 0xC51414 VA: 0xC51414
	private GameObject gaugeEffectPanel; // 0x78
	[SerializeField] // RVA: 0xC51424 Offset: 0xC51424 VA: 0xC51424
	private UISprite maskSp; // 0x80
	[SerializeField] // RVA: 0xC51434 Offset: 0xC51434 VA: 0xC51434
	private UISprite colliderSp; // 0x88
	private Vector3 originPos; // 0x90
	private long endTime; // 0xA0
	private Action frameInCallBack; // 0xA8
	private EventPointEntity evPointEnt; // 0xB0
	private bool isDispRestTime; // 0xB8

	// Methods

	// RVA: 0x14BDD48 Offset: 0x14BDD48 VA: 0x14BDD48
	public void .ctor() { }

	// RVA: 0x14BDD50 Offset: 0x14BDD50 VA: 0x14BDD50 Slot: 4
	public override bool IsDispPossible() { }

	// RVA: 0x14BDD58 Offset: 0x14BDD58 VA: 0x14BDD58
	public void OnDestroy() { }

	// RVA: 0x14BDD5C Offset: 0x14BDD5C VA: 0x14BDD5C
	private void Destroy() { }

	// RVA: 0x14BDD60 Offset: 0x14BDD60 VA: 0x14BDD60 Slot: 5
	public override void UpdateDisp() { }

	// RVA: 0x14BDD64 Offset: 0x14BDD64 VA: 0x14BDD64 Slot: 6
	public override bool IsEventRaidBoss() { }

	// RVA: 0x14BDD6C Offset: 0x14BDD6C VA: 0x14BDD6C
	private void Update() { }

	// RVA: 0x14BDEE4 Offset: 0x14BDEE4 VA: 0x14BDEE4
	public EventPointEntity getEventPointEntity() { }

	// RVA: 0x14BDEEC Offset: 0x14BDEEC VA: 0x14BDEEC
	public void Setup(EventPointEntity eventPointEntity, int eventId, AssetData effectAssetData, bool isDispRestTime) { }

	// RVA: 0x14BEDA8 Offset: 0x14BEDA8 VA: 0x14BEDA8
	private double ConvertPointToRate(long point, long maxPoint) { }

	// RVA: 0x14BDD70 Offset: 0x14BDD70 VA: 0x14BDD70
	private void restTimeUpdate() { }

	// RVA: 0x14BF570 Offset: 0x14BF570 VA: 0x14BF570
	public void FrameIn(Action callback) { }

	// RVA: 0x14BF74C Offset: 0x14BF74C VA: 0x14BF74C
	private void FrameInFinish() { }

	// RVA: 0x14BF768 Offset: 0x14BF768 VA: 0x14BF768
	public void FrameOut() { }

	// RVA: 0x14BF8C8 Offset: 0x14BF8C8 VA: 0x14BF8C8
	private void FrameOutFinish() { }

	// RVA: 0x14BF8CC Offset: 0x14BF8CC VA: 0x14BF8CC
	public void gaugeEvent(int groupId, int eventId, AssetData effectAssetData, Action callback) { }

	// RVA: 0x14BFE84 Offset: 0x14BFE84 VA: 0x14BFE84
	public void ResultEffect(EventPointVsResultAction.GROUP_WIN winType, AssetData effectAssetData, Action callback) { }

	// RVA: 0x14AD070 Offset: 0x14AD070 VA: 0x14AD070
	public void OpenResultPointDialog(EventPointEntity evPointEnt, EventPointWinReward rewardInfo, Action callback) { }

	// RVA: 0x14C014C Offset: 0x14C014C VA: 0x14C014C
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42094 Offset: 0xC42094 VA: 0xC42094
private sealed class TitleInfoEventLeagueVsComponent.<ResultEffect>c__AnonStorey0 // TypeDefIndex: 5838
{
	// Fields
	internal EventPointVsResultAction effect; // 0x10
	internal BoxCollider coll; // 0x18
	internal Action callback; // 0x20
	internal TitleInfoEventLeagueVsComponent $this; // 0x28

	// Methods

	// RVA: 0x14C0144 Offset: 0x14C0144 VA: 0x14C0144
	public void .ctor() { }

	// RVA: 0x14C01E8 Offset: 0x14C01E8 VA: 0x14C01E8
	internal void <>m__0() { }

	// RVA: 0x14C0294 Offset: 0x14C0294 VA: 0x14C0294
	internal void <>m__1() { }
}

// Namespace: 
public class TitleInfoEventLeagueVsGaugeEffect : MonoBehaviour // TypeDefIndex: 5839
{
	// Fields
	[SerializeField] // RVA: 0xC51444 Offset: 0xC51444 VA: 0xC51444
	private ParticleSystem[] gaugeParticle; // 0x18
	[SerializeField] // RVA: 0xC51454 Offset: 0xC51454 VA: 0xC51454
	private SimpleAnimation gaugeSimpleAnim; // 0x20
	[SerializeField] // RVA: 0xC51464 Offset: 0xC51464 VA: 0xC51464
	private Animation gaugeAnim; // 0x28
	private readonly float GAUGE_SIZE_DEF; // 0x30
	private readonly float GAUGE_SIZE_FACTOR; // 0x34

	// Methods

	// RVA: 0x14C03B4 Offset: 0x14C03B4 VA: 0x14C03B4
	public void .ctor() { }

	// RVA: 0x14BEDB8 Offset: 0x14BEDB8 VA: 0x14BEDB8
	public void setup(long point1, long point2, bool isBoss) { }

	// RVA: 0x14C03D0 Offset: 0x14C03D0 VA: 0x14C03D0
	private double ConvertPointToRate(long point, long maxPoint) { }
}

// Namespace: 
public enum TitleInfoEventLeagueVsGaugeEffect.GaugeType // TypeDefIndex: 5840
{
	// Fields
	public int value__; // 0x0
	public const TitleInfoEventLeagueVsGaugeEffect.GaugeType BLUE = 0;
	public const TitleInfoEventLeagueVsGaugeEffect.GaugeType RED = 1;
	public const TitleInfoEventLeagueVsGaugeEffect.GaugeType GOLD = 2;
	public const TitleInfoEventLeagueVsGaugeEffect.GaugeType SILVER = 3;
}

// Namespace: 
public class TitleInfoEventLeagueVsGaugeFlashEffect : MonoBehaviour // TypeDefIndex: 5841
{
	// Fields
	[SerializeField] // RVA: 0xC51474 Offset: 0xC51474 VA: 0xC51474
	private UIProgressBar[] gaugeBar; // 0x18
	[SerializeField] // RVA: 0xC51484 Offset: 0xC51484 VA: 0xC51484
	private SimpleAnimation gaugeSimpleAnim; // 0x20
	[SerializeField] // RVA: 0xC51494 Offset: 0xC51494 VA: 0xC51494
	private Animation gaugeAnim; // 0x28
	private Action endCallBack; // 0x30

	// Methods

	// RVA: 0x14C03E0 Offset: 0x14C03E0 VA: 0x14C03E0
	public void .ctor() { }

	// RVA: 0x14BFBB0 Offset: 0x14BFBB0 VA: 0x14BFBB0
	public void setup(int joinGroupId, long point1, long point2, Action callback) { }
