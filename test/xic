	public string get_text() { }

	// RVA: 0x1013130 Offset: 0x1013130 VA: 0x1013130
	public void set_text(string value) { }

	// RVA: 0x10131AC Offset: 0x10131AC VA: 0x10131AC
	public Sprite get_image() { }

	// RVA: 0x1013164 Offset: 0x1013164 VA: 0x1013164
	public void set_image(Sprite value) { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionDataList // TypeDefIndex: 3065
{
	// Fields
	[SerializeField] // RVA: 0xC7FE38 Offset: 0xC7FE38 VA: 0xC7FE38
	private List<Dropdown.OptionData> m_Options; // 0x10

	// Properties
	public List<Dropdown.OptionData> options { get; set; }

	// Methods

	// RVA: 0x10131B4 Offset: 0x10131B4 VA: 0x10131B4
	public void .ctor() { }

	// RVA: 0x1013230 Offset: 0x1013230 VA: 0x1013230
	public List<Dropdown.OptionData> get_options() { }

	// RVA: 0x1013228 Offset: 0x1013228 VA: 0x1013228
	public void set_options(List<Dropdown.OptionData> value) { }
}

// Namespace: 
[Serializable]
public class Dropdown.DropdownEvent : UnityEvent<int> // TypeDefIndex: 3066
{
	// Methods

	// RVA: 0x1012F2C Offset: 0x1012F2C VA: 0x1012F2C
	public void .ctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC7F078 Offset: 0xC7F078 VA: 0xC7F078
private sealed class Dropdown.<Show>c__AnonStorey1 // TypeDefIndex: 3067
{
	// Fields
	internal Dropdown.DropdownItem item; // 0x10
	internal Dropdown $this; // 0x18

	// Methods

	// RVA: 0x1012ED8 Offset: 0x1012ED8 VA: 0x1012ED8
	public void .ctor() { }

	// RVA: 0x1012EE0 Offset: 0x1012EE0 VA: 0x1012EE0
	internal void <>m__0(bool x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC7F088 Offset: 0xC7F088 VA: 0xC7F088
private sealed class Dropdown.<DelayedDestroyDropdownList>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 3068
{
	// Fields
	internal float delay; // 0x10
	internal Dropdown $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xC81E80 Offset: 0xC81E80 VA: 0xC81E80
	// RVA: 0x1012BB0 Offset: 0x1012BB0 VA: 0x1012BB0
	public void .ctor() { }

	// RVA: 0x1012BB8 Offset: 0x1012BB8 VA: 0x1012BB8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xC81E90 Offset: 0xC81E90 VA: 0xC81E90
	// RVA: 0x1012E4C Offset: 0x1012E4C VA: 0x1012E4C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC81EA0 Offset: 0xC81EA0 VA: 0xC81EA0
	// RVA: 0x1012E54 Offset: 0x1012E54 VA: 0x1012E54 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xC81EB0 Offset: 0xC81EB0 VA: 0xC81EB0
	// RVA: 0x1012E5C Offset: 0x1012E5C VA: 0x1012E5C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xC81EC0 Offset: 0xC81EC0 VA: 0xC81EC0
	// RVA: 0x1012E70 Offset: 0x1012E70 VA: 0x1012E70 Slot: 6
	public void Reset() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 3069
{
	// Fields
	[SerializeField] // RVA: 0xC7FE48 Offset: 0xC7FE48 VA: 0xC7FE48
	[FormerlySerializedAsAttribute] // RVA: 0xC7FE48 Offset: 0xC7FE48 VA: 0xC7FE48
	private Font m_Font; // 0x10
	[SerializeField] // RVA: 0xC7FE94 Offset: 0xC7FE94 VA: 0xC7FE94
	[FormerlySerializedAsAttribute] // RVA: 0xC7FE94 Offset: 0xC7FE94 VA: 0xC7FE94
	private int m_FontSize; // 0x18
	[SerializeField] // RVA: 0xC7FEE0 Offset: 0xC7FEE0 VA: 0xC7FEE0
	[FormerlySerializedAsAttribute] // RVA: 0xC7FEE0 Offset: 0xC7FEE0 VA: 0xC7FEE0
	private FontStyle m_FontStyle; // 0x1C
	[SerializeField] // RVA: 0xC7FF2C Offset: 0xC7FF2C VA: 0xC7FF2C
	private bool m_BestFit; // 0x20
	[SerializeField] // RVA: 0xC7FF3C Offset: 0xC7FF3C VA: 0xC7FF3C
	private int m_MinSize; // 0x24
	[SerializeField] // RVA: 0xC7FF4C Offset: 0xC7FF4C VA: 0xC7FF4C
	private int m_MaxSize; // 0x28
	[SerializeField] // RVA: 0xC7FF5C Offset: 0xC7FF5C VA: 0xC7FF5C
	[FormerlySerializedAsAttribute] // RVA: 0xC7FF5C Offset: 0xC7FF5C VA: 0xC7FF5C
	private TextAnchor m_Alignment; // 0x2C
	[SerializeField] // RVA: 0xC7FFA8 Offset: 0xC7FFA8 VA: 0xC7FFA8
	private bool m_AlignByGeometry; // 0x30
	[SerializeField] // RVA: 0xC7FFB8 Offset: 0xC7FFB8 VA: 0xC7FFB8
	[FormerlySerializedAsAttribute] // RVA: 0xC7FFB8 Offset: 0xC7FFB8 VA: 0xC7FFB8
	private bool m_RichText; // 0x31
	[SerializeField] // RVA: 0xC80004 Offset: 0xC80004 VA: 0xC80004
	private HorizontalWrapMode m_HorizontalOverflow; // 0x34
	[SerializeField] // RVA: 0xC80014 Offset: 0xC80014 VA: 0xC80014
	private VerticalWrapMode m_VerticalOverflow; // 0x38
	[SerializeField] // RVA: 0xC80024 Offset: 0xC80024 VA: 0xC80024
	private float m_LineSpacing; // 0x3C

	// Properties
	public static FontData defaultFontData { get; }
	public Font font { get; set; }
	public int fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public bool bestFit { get; set; }
	public int minSize { get; set; }
	public int maxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public bool richText { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }

	// Methods

	// RVA: 0x1013238 Offset: 0x1013238 VA: 0x1013238
	public void .ctor() { }

	// RVA: 0x1013240 Offset: 0x1013240 VA: 0x1013240
	public static FontData get_defaultFontData() { }

	// RVA: 0x1013378 Offset: 0x1013378 VA: 0x1013378
	public Font get_font() { }

	// RVA: 0x1013380 Offset: 0x1013380 VA: 0x1013380
	public void set_font(Font value) { }

	// RVA: 0x1013388 Offset: 0x1013388 VA: 0x1013388
	public int get_fontSize() { }

	// RVA: 0x1013390 Offset: 0x1013390 VA: 0x1013390
	public void set_fontSize(int value) { }

	// RVA: 0x1013398 Offset: 0x1013398 VA: 0x1013398
	public FontStyle get_fontStyle() { }

	// RVA: 0x10133A0 Offset: 0x10133A0 VA: 0x10133A0
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x10133A8 Offset: 0x10133A8 VA: 0x10133A8
	public bool get_bestFit() { }

	// RVA: 0x10133B0 Offset: 0x10133B0 VA: 0x10133B0
	public void set_bestFit(bool value) { }

	// RVA: 0x10133BC Offset: 0x10133BC VA: 0x10133BC
	public int get_minSize() { }

	// RVA: 0x10133C4 Offset: 0x10133C4 VA: 0x10133C4
	public void set_minSize(int value) { }

	// RVA: 0x10133CC Offset: 0x10133CC VA: 0x10133CC
	public int get_maxSize() { }

	// RVA: 0x10133D4 Offset: 0x10133D4 VA: 0x10133D4
	public void set_maxSize(int value) { }

	// RVA: 0x10133DC Offset: 0x10133DC VA: 0x10133DC
	public TextAnchor get_alignment() { }

	// RVA: 0x10133E4 Offset: 0x10133E4 VA: 0x10133E4
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x10133EC Offset: 0x10133EC VA: 0x10133EC
	public bool get_alignByGeometry() { }

	// RVA: 0x10133F4 Offset: 0x10133F4 VA: 0x10133F4
	public void set_alignByGeometry(bool value) { }

	// RVA: 0x1013400 Offset: 0x1013400 VA: 0x1013400
	public bool get_richText() { }

	// RVA: 0x1013408 Offset: 0x1013408 VA: 0x1013408
	public void set_richText(bool value) { }

	// RVA: 0x1013414 Offset: 0x1013414 VA: 0x1013414
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x101341C Offset: 0x101341C VA: 0x101341C
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0x1013424 Offset: 0x1013424 VA: 0x1013424
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x101342C Offset: 0x101342C VA: 0x101342C
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x1013434 Offset: 0x1013434 VA: 0x1013434
	public float get_lineSpacing() { }

	// RVA: 0x101343C Offset: 0x101343C VA: 0x101343C
	public void set_lineSpacing(float value) { }

	// RVA: 0x1013444 Offset: 0x1013444 VA: 0x1013444 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }

	// RVA: 0x1013448 Offset: 0x1013448 VA: 0x1013448 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
}

// Namespace: UnityEngine.UI
public static class FontUpdateTracker // TypeDefIndex: 3070
{
	// Fields
	private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC80034 Offset: 0xC80034 VA: 0xC80034
	private static Action<Font> <>f__mg$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC80044 Offset: 0xC80044 VA: 0xC80044
	private static Action<Font> <>f__mg$cache1; // 0x10

	// Methods

	// RVA: 0x1013500 Offset: 0x1013500 VA: 0x1013500
	public static void TrackText(Text t) { }

	// RVA: 0x10137F4 Offset: 0x10137F4 VA: 0x10137F4
	private static void RebuildForFont(Font f) { }

	// RVA: 0x1013968 Offset: 0x1013968 VA: 0x1013968
	public static void UntrackText(Text t) { }

	// RVA: 0x1013C00 Offset: 0x1013C00 VA: 0x1013C00
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0xC7E3CC Offset: 0xC7E3CC VA: 0xC7E3CC
[RequireComponent] // RVA: 0xC7E3CC Offset: 0xC7E3CC VA: 0xC7E3CC
[RequireComponent] // RVA: 0xC7E3CC Offset: 0xC7E3CC VA: 0xC7E3CC
[ExecuteAlways] // RVA: 0xC7E3CC Offset: 0xC7E3CC VA: 0xC7E3CC
public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 3071
{
	// Fields
	protected static Material s_DefaultUI; // 0x0
	protected static Texture2D s_WhiteTexture; // 0x8
	[FormerlySerializedAsAttribute] // RVA: 0xC80054 Offset: 0xC80054 VA: 0xC80054
	[SerializeField] // RVA: 0xC80054 Offset: 0xC80054 VA: 0xC80054
	protected Material m_Material; // 0x18
	[SerializeField] // RVA: 0xC800A0 Offset: 0xC800A0 VA: 0xC800A0
	private Color m_Color; // 0x20
	[SerializeField] // RVA: 0xC800B0 Offset: 0xC800B0 VA: 0xC800B0
	private bool m_RaycastTarget; // 0x30
	private RectTransform m_RectTransform; // 0x38
	private CanvasRenderer m_CanvasRenderer; // 0x40
	private Canvas m_Canvas; // 0x48
	private bool m_VertsDirty; // 0x50
	private bool m_MaterialDirty; // 0x51
	protected UnityAction m_OnDirtyLayoutCallback; // 0x58
	protected UnityAction m_OnDirtyVertsCallback; // 0x60
	protected UnityAction m_OnDirtyMaterialCallback; // 0x68
	protected static Mesh s_Mesh; // 0x10
	private static readonly VertexHelper s_VertexHelper; // 0x18
	private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x70
	[CompilerGeneratedAttribute] // RVA: 0xC800C0 Offset: 0xC800C0 VA: 0xC800C0
	[DebuggerBrowsableAttribute] // RVA: 0xC800C0 Offset: 0xC800C0 VA: 0xC800C0
	private bool <useLegacyMeshGeneration>k__BackingField; // 0x78

	// Properties
	public static Material defaultGraphicMaterial { get; }
	public virtual Color color { get; set; }
	public virtual bool raycastTarget { get; set; }
	protected bool useLegacyMeshGeneration { get; set; }
	public int depth { get; }
	public RectTransform rectTransform { get; }
	public Canvas canvas { get; }
	public CanvasRenderer canvasRenderer { get; }
	public virtual Material defaultMaterial { get; }
	public virtual Material material { get; set; }
	public virtual Material materialForRendering { get; }
	public virtual Texture mainTexture { get; }
	protected static Mesh workerMesh { get; }

	// Methods

	// RVA: 0x1013C74 Offset: 0x1013C74 VA: 0x1013C74
	protected void .ctor() { }

	// RVA: 0x1013D44 Offset: 0x1013D44 VA: 0x1013D44
	public static Material get_defaultGraphicMaterial() { }

	// RVA: 0x1013E3C Offset: 0x1013E3C VA: 0x1013E3C Slot: 22
	public virtual Color get_color() { }

	// RVA: 0x1013E48 Offset: 0x1013E48 VA: 0x1013E48 Slot: 23
	public virtual void set_color(Color value) { }

	// RVA: 0x1013E90 Offset: 0x1013E90 VA: 0x1013E90 Slot: 24
	public virtual bool get_raycastTarget() { }

	// RVA: 0x1013E98 Offset: 0x1013E98 VA: 0x1013E98 Slot: 25
	public virtual void set_raycastTarget(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC81918 Offset: 0xC81918 VA: 0xC81918
	// RVA: 0x1013EA4 Offset: 0x1013EA4 VA: 0x1013EA4
	protected bool get_useLegacyMeshGeneration() { }

	[CompilerGeneratedAttribute] // RVA: 0xC81928 Offset: 0xC81928 VA: 0xC81928
	// RVA: 0x1013D38 Offset: 0x1013D38 VA: 0x1013D38
	protected void set_useLegacyMeshGeneration(bool value) { }

	// RVA: 0x1013EAC Offset: 0x1013EAC VA: 0x1013EAC Slot: 26
	public virtual void SetAllDirty() { }

	// RVA: 0x1013EFC Offset: 0x1013EFC VA: 0x1013EFC Slot: 27
	public virtual void SetLayoutDirty() { }

	// RVA: 0x1014004 Offset: 0x1014004 VA: 0x1014004 Slot: 28
	public virtual void SetVerticesDirty() { }

	// RVA: 0x10140A4 Offset: 0x10140A4 VA: 0x10140A4 Slot: 29
	public virtual void SetMaterialDirty() { }

	// RVA: 0x1014144 Offset: 0x1014144 VA: 0x1014144 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x101420C Offset: 0x101420C VA: 0x101420C Slot: 11
	protected override void OnBeforeTransformParentChanged() { }

	// RVA: 0x10144D0 Offset: 0x10144D0 VA: 0x10144D0 Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x10148E8 Offset: 0x10148E8 VA: 0x10148E8
	public int get_depth() { }

	// RVA: 0x1013FA4 Offset: 0x1013FA4 VA: 0x1013FA4 Slot: 30
	public RectTransform get_rectTransform() { }

	// RVA: 0x10142C0 Offset: 0x10142C0 VA: 0x10142C0
	public Canvas get_canvas() { }

	// RVA: 0x1014594 Offset: 0x1014594 VA: 0x1014594
	private void CacheCanvas() { }

	// RVA: 0x1014918 Offset: 0x1014918 VA: 0x1014918
	public CanvasRenderer get_canvasRenderer() { }

	// RVA: 0x1014978 Offset: 0x1014978 VA: 0x1014978 Slot: 31
	public virtual Material get_defaultMaterial() { }

	// RVA: 0x10149D4 Offset: 0x10149D4 VA: 0x10149D4 Slot: 32
	public virtual Material get_material() { }

	// RVA: 0x1014A6C Offset: 0x1014A6C VA: 0x1014A6C Slot: 33
	public virtual void set_material(Material value) { }

	// RVA: 0x1014B14 Offset: 0x1014B14 VA: 0x1014B14 Slot: 34
	public virtual Material get_materialForRendering() { }

	// RVA: 0x1014D30 Offset: 0x1014D30 VA: 0x1014D30 Slot: 35
	public virtual Texture get_mainTexture() { }

	// RVA: 0x1014D98 Offset: 0x1014D98 VA: 0x1014D98 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1014ED8 Offset: 0x1014ED8 VA: 0x1014ED8 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1015028 Offset: 0x1015028 VA: 0x1015028 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }

	// RVA: 0x101514C Offset: 0x101514C VA: 0x101514C Slot: 36
	public virtual void OnCullingChanged() { }

	// RVA: 0x10151F4 Offset: 0x10151F4 VA: 0x10151F4 Slot: 37
	public virtual void Rebuild(CanvasUpdate update) { }

	// RVA: 0x1015284 Offset: 0x1015284 VA: 0x1015284 Slot: 38
	public virtual void LayoutComplete() { }

	// RVA: 0x1015288 Offset: 0x1015288 VA: 0x1015288 Slot: 39
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x101528C Offset: 0x101528C VA: 0x101528C Slot: 40
	protected virtual void UpdateMaterial() { }

	// RVA: 0x1015374 Offset: 0x1015374 VA: 0x1015374 Slot: 41
	protected virtual void UpdateGeometry() { }

	// RVA: 0x1015808 Offset: 0x1015808 VA: 0x1015808
	private void DoMeshGeneration() { }

	// RVA: 0x1015384 Offset: 0x1015384 VA: 0x1015384
	private void DoLegacyMeshGeneration() { }

	// RVA: 0x1015CD0 Offset: 0x1015CD0 VA: 0x1015CD0
	protected static Mesh get_workerMesh() { }

	[EditorBrowsableAttribute] // RVA: 0xC81938 Offset: 0xC81938 VA: 0xC81938
	[ObsoleteAttribute] // RVA: 0xC81938 Offset: 0xC81938 VA: 0xC81938
	// RVA: 0x1015E28 Offset: 0x1015E28 VA: 0x1015E28 Slot: 42
	protected virtual void OnFillVBO(List<UIVertex> vbo) { }

	[ObsoleteAttribute] // RVA: 0xC8198C Offset: 0xC8198C VA: 0xC8198C
	// RVA: 0x1015E2C Offset: 0x1015E2C VA: 0x1015E2C Slot: 43
	protected virtual void OnPopulateMesh(Mesh m) { }

	// RVA: 0x1015EDC Offset: 0x1015EDC VA: 0x1015EDC Slot: 44
	protected virtual void OnPopulateMesh(VertexHelper vh) { }

	// RVA: 0x1016308 Offset: 0x1016308 VA: 0x1016308 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x1016318 Offset: 0x1016318 VA: 0x1016318 Slot: 45
	public virtual void SetNativeSize() { }

	// RVA: 0x101631C Offset: 0x101631C VA: 0x101631C Slot: 46
	public virtual bool Raycast(Vector2 sp, Camera eventCamera) { }

	// RVA: 0x1016700 Offset: 0x1016700 VA: 0x1016700
	public Vector2 PixelAdjustPoint(Vector2 point) { }

	// RVA: 0x10161A4 Offset: 0x10161A4 VA: 0x10161A4
	public Rect GetPixelAdjustedRect() { }

	// RVA: 0x101686C Offset: 0x101686C VA: 0x101686C Slot: 47
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }

	// RVA: 0x1016888 Offset: 0x1016888 VA: 0x1016888 Slot: 48
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB) { }

	// RVA: 0x1016B64 Offset: 0x1016B64 VA: 0x1016B64
	private static Color CreateColorFromAlpha(float alpha) { }

	// RVA: 0x1016B8C Offset: 0x1016B8C VA: 0x1016B8C Slot: 49
	public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }

	// RVA: 0x1016C34 Offset: 0x1016C34 VA: 0x1016C34
	public void RegisterDirtyLayoutCallback(UnityAction action) { }

	// RVA: 0x1016CF8 Offset: 0x1016CF8 VA: 0x1016CF8
	public void UnregisterDirtyLayoutCallback(UnityAction action) { }

	// RVA: 0x1016DBC Offset: 0x1016DBC VA: 0x1016DBC
	public void RegisterDirtyVerticesCallback(UnityAction action) { }

	// RVA: 0x1016E80 Offset: 0x1016E80 VA: 0x1016E80
	public void UnregisterDirtyVerticesCallback(UnityAction action) { }

	// RVA: 0x1016F44 Offset: 0x1016F44 VA: 0x1016F44
	public void RegisterDirtyMaterialCallback(UnityAction action) { }

	// RVA: 0x1017008 Offset: 0x1017008 VA: 0x1017008
	public void UnregisterDirtyMaterialCallback(UnityAction action) { }

	// RVA: 0x10170CC Offset: 0x10170CC VA: 0x10170CC
	private static void .cctor() { }

	// RVA: 0x1017150 Offset: 0x1017150 VA: 0x1017150 Slot: 18
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7E478 Offset: 0xC7E478 VA: 0xC7E478
[RequireComponent] // RVA: 0xC7E478 Offset: 0xC7E478 VA: 0xC7E478
public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 3072
{
	// Fields
	protected const int kNoEventMaskSet = -1;
	[FormerlySerializedAsAttribute] // RVA: 0xC800FC Offset: 0xC800FC VA: 0xC800FC
	[SerializeField] // RVA: 0xC800FC Offset: 0xC800FC VA: 0xC800FC
	private bool m_IgnoreReversedGraphics; // 0x18
	[FormerlySerializedAsAttribute] // RVA: 0xC80148 Offset: 0xC80148 VA: 0xC80148
	[SerializeField] // RVA: 0xC80148 Offset: 0xC80148 VA: 0xC80148
	private GraphicRaycaster.BlockingObjects m_BlockingObjects; // 0x1C
	[SerializeField] // RVA: 0xC80194 Offset: 0xC80194 VA: 0xC80194
	protected LayerMask m_BlockingMask; // 0x20
	private Canvas m_Canvas; // 0x28
	private List<Graphic> m_RaycastResults; // 0x30
	private static readonly List<Graphic> s_SortedGraphics; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC801A4 Offset: 0xC801A4 VA: 0xC801A4
	private static Comparison<Graphic> <>f__am$cache0; // 0x8

	// Properties
	public override int sortOrderPriority { get; }
	public override int renderOrderPriority { get; }
	public bool ignoreReversedGraphics { get; set; }
	public GraphicRaycaster.BlockingObjects blockingObjects { get; set; }
	private Canvas canvas { get; }
	public override Camera eventCamera { get; }

	// Methods

	// RVA: 0x1017158 Offset: 0x1017158 VA: 0x1017158
	protected void .ctor() { }

	// RVA: 0x10171E4 Offset: 0x10171E4 VA: 0x10171E4 Slot: 20
	public override int get_sortOrderPriority() { }

	// RVA: 0x10172E8 Offset: 0x10172E8 VA: 0x10172E8 Slot: 21
	public override int get_renderOrderPriority() { }

	// RVA: 0x101736C Offset: 0x101736C VA: 0x101736C
	public bool get_ignoreReversedGraphics() { }

	// RVA: 0x1017374 Offset: 0x1017374 VA: 0x1017374
	public void set_ignoreReversedGraphics(bool value) { }

	// RVA: 0x1017380 Offset: 0x1017380 VA: 0x1017380
	public GraphicRaycaster.BlockingObjects get_blockingObjects() { }

	// RVA: 0x1017388 Offset: 0x1017388 VA: 0x1017388
	public void set_blockingObjects(GraphicRaycaster.BlockingObjects value) { }

	// RVA: 0x1017250 Offset: 0x1017250 VA: 0x1017250
	private Canvas get_canvas() { }

	// RVA: 0x1017390 Offset: 0x1017390 VA: 0x1017390 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }

	// RVA: 0x1018940 Offset: 0x1018940 VA: 0x1018940 Slot: 18
	public override Camera get_eventCamera() { }

	// RVA: 0x1018404 Offset: 0x1018404 VA: 0x1018404
	private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results) { }

	// RVA: 0x1018AC0 Offset: 0x1018AC0 VA: 0x1018AC0
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xC819C8 Offset: 0xC819C8 VA: 0xC819C8
	// RVA: 0x1018B34 Offset: 0x1018B34 VA: 0x1018B34
	private static int <Raycast>m__0(Graphic g1, Graphic g2) { }
}

// Namespace: 
public enum GraphicRaycaster.BlockingObjects // TypeDefIndex: 3073
{
	// Fields
	public int value__; // 0x0
	public const GraphicRaycaster.BlockingObjects None = 0;
	public const GraphicRaycaster.BlockingObjects TwoD = 1;
	public const GraphicRaycaster.BlockingObjects ThreeD = 2;
	public const GraphicRaycaster.BlockingObjects All = 3;
}

// Namespace: UnityEngine.UI
public class GraphicRegistry // TypeDefIndex: 3074
{
	// Fields
	private static GraphicRegistry s_Instance; // 0x0
	private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x10
	private static readonly List<Graphic> s_EmptyList; // 0x8

	// Properties
	public static GraphicRegistry instance { get; }

	// Methods

	// RVA: 0x1018B9C Offset: 0x1018B9C VA: 0x1018B9C
	protected void .ctor() { }

	// RVA: 0x1018C9C Offset: 0x1018C9C VA: 0x1018C9C
	public static GraphicRegistry get_instance() { }

	// RVA: 0x101473C Offset: 0x101473C VA: 0x101473C
	public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic) { }

	// RVA: 0x1014344 Offset: 0x1014344 VA: 0x1014344
	public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) { }

	// RVA: 0x101832C Offset: 0x101832C VA: 0x101832C
	public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas) { }

	// RVA: 0x1018D5C Offset: 0x1018D5C VA: 0x1018D5C
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[ObsoleteAttribute] // RVA: 0xC7E500 Offset: 0xC7E500 VA: 0xC7E500
internal interface IGraphicEnabledDisabled // TypeDefIndex: 3075
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSiblingGraphicEnabledDisabled();
}

// Namespace: UnityEngine.UI
[EditorBrowsableAttribute] // RVA: 0xC7E538 Offset: 0xC7E538 VA: 0xC7E538
[ObsoleteAttribute] // RVA: 0xC7E538 Offset: 0xC7E538 VA: 0xC7E538
public interface IMask // TypeDefIndex: 3076
{
	// Properties
	public abstract RectTransform rectTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Enabled();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract RectTransform get_rectTransform();
}

// Namespace: UnityEngine.UI
public interface IMaskable // TypeDefIndex: 3077
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void RecalculateMasking();
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7E58C Offset: 0xC7E58C VA: 0xC7E58C
public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 3078
{
	// Fields
	protected static Material s_ETC1DefaultUI; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0xC801B4 Offset: 0xC801B4 VA: 0xC801B4
	[SerializeField] // RVA: 0xC801B4 Offset: 0xC801B4 VA: 0xC801B4
	private Sprite m_Sprite; // 0xB0
	private Sprite m_OverrideSprite; // 0xB8
	[SerializeField] // RVA: 0xC80200 Offset: 0xC80200 VA: 0xC80200
	private Image.Type m_Type; // 0xC0
	[SerializeField] // RVA: 0xC80210 Offset: 0xC80210 VA: 0xC80210
	private bool m_PreserveAspect; // 0xC4
	[SerializeField] // RVA: 0xC80220 Offset: 0xC80220 VA: 0xC80220
	private bool m_FillCenter; // 0xC5
	[SerializeField] // RVA: 0xC80230 Offset: 0xC80230 VA: 0xC80230
	private Image.FillMethod m_FillMethod; // 0xC8
	[RangeAttribute] // RVA: 0xC80240 Offset: 0xC80240 VA: 0xC80240
	[SerializeField] // RVA: 0xC80240 Offset: 0xC80240 VA: 0xC80240
	private float m_FillAmount; // 0xCC
	[SerializeField] // RVA: 0xC80280 Offset: 0xC80280 VA: 0xC80280
	private bool m_FillClockwise; // 0xD0
	[SerializeField] // RVA: 0xC80290 Offset: 0xC80290 VA: 0xC80290
	private int m_FillOrigin; // 0xD4
	private float m_AlphaHitTestMinimumThreshold; // 0xD8
	private bool m_Tracked; // 0xDC
	[SerializeField] // RVA: 0xC802A0 Offset: 0xC802A0 VA: 0xC802A0
	private bool m_UseSpriteMesh; // 0xDD
	private static readonly Vector2[] s_VertScratch; // 0x8
	private static readonly Vector2[] s_UVScratch; // 0x10
	private static readonly Vector3[] s_Xy; // 0x18
	private static readonly Vector3[] s_Uv; // 0x20
	private static List<Image> m_TrackedTexturelessImages; // 0x28
	private static bool s_Initialized; // 0x30
	[CompilerGeneratedAttribute] // RVA: 0xC802B0 Offset: 0xC802B0 VA: 0xC802B0
	private static Action<SpriteAtlas> <>f__mg$cache0; // 0x38

	// Properties
	public Sprite sprite { get; set; }
	public Sprite overrideSprite { get; set; }
	private Sprite activeSprite { get; }
	public Image.Type type { get; set; }
	public bool preserveAspect { get; set; }
	public bool fillCenter { get; set; }
	public Image.FillMethod fillMethod { get; set; }
	public float fillAmount { get; set; }
	public bool fillClockwise { get; set; }
	public int fillOrigin { get; set; }
	[ObsoleteAttribute] // RVA: 0xC821B0 Offset: 0xC821B0 VA: 0xC821B0
	public float eventAlphaThreshold { get; set; }
	public float alphaHitTestMinimumThreshold { get; set; }
	public bool useSpriteMesh { get; set; }
	public static Material defaultETC1GraphicMaterial { get; }
	public override Texture mainTexture { get; }
	public bool hasBorder { get; }
	public float pixelsPerUnit { get; }
	public override Material material { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x101B388 Offset: 0x101B388 VA: 0x101B388
	protected void .ctor() { }

	// RVA: 0x101B3D8 Offset: 0x101B3D8 VA: 0x101B3D8
	public Sprite get_sprite() { }

	// RVA: 0x101B3E0 Offset: 0x101B3E0 VA: 0x101B3E0
	public void set_sprite(Sprite value) { }

	// RVA: 0x101B580 Offset: 0x101B580 VA: 0x101B580
	public Sprite get_overrideSprite() { }

	// RVA: 0x101B614 Offset: 0x101B614 VA: 0x101B614
	public void set_overrideSprite(Sprite value) { }

	// RVA: 0x101B584 Offset: 0x101B584 VA: 0x101B584
	private Sprite get_activeSprite() { }

	// RVA: 0x101B6A4 Offset: 0x101B6A4 VA: 0x101B6A4
	public Image.Type get_type() { }

	// RVA: 0x101B6AC Offset: 0x101B6AC VA: 0x101B6AC
	public void set_type(Image.Type value) { }

	// RVA: 0x101B734 Offset: 0x101B734 VA: 0x101B734
	public bool get_preserveAspect() { }

	// RVA: 0x101B73C Offset: 0x101B73C VA: 0x101B73C
	public void set_preserveAspect(bool value) { }

	// RVA: 0x101B7C4 Offset: 0x101B7C4 VA: 0x101B7C4
	public bool get_fillCenter() { }

	// RVA: 0x101B7CC Offset: 0x101B7CC VA: 0x101B7CC
	public void set_fillCenter(bool value) { }

	// RVA: 0x101B854 Offset: 0x101B854 VA: 0x101B854
	public Image.FillMethod get_fillMethod() { }

	// RVA: 0x101B85C Offset: 0x101B85C VA: 0x101B85C
	public void set_fillMethod(Image.FillMethod value) { }

	// RVA: 0x101B8DC Offset: 0x101B8DC VA: 0x101B8DC
	public float get_fillAmount() { }

	// RVA: 0x101B8E4 Offset: 0x101B8E4 VA: 0x101B8E4
	public void set_fillAmount(float value) { }

	// RVA: 0x101B998 Offset: 0x101B998 VA: 0x101B998
	public bool get_fillClockwise() { }

	// RVA: 0x101B9A0 Offset: 0x101B9A0 VA: 0x101B9A0
	public void set_fillClockwise(bool value) { }

	// RVA: 0x101BA28 Offset: 0x101BA28 VA: 0x101BA28
	public int get_fillOrigin() { }

	// RVA: 0x101BA30 Offset: 0x101BA30 VA: 0x101BA30
	public void set_fillOrigin(int value) { }

	// RVA: 0x101BAB8 Offset: 0x101BAB8 VA: 0x101BAB8
	public float get_eventAlphaThreshold() { }

	// RVA: 0x101BAD0 Offset: 0x101BAD0 VA: 0x101BAD0
	public void set_eventAlphaThreshold(float value) { }

	// RVA: 0x101BAC8 Offset: 0x101BAC8 VA: 0x101BAC8
	public float get_alphaHitTestMinimumThreshold() { }

	// RVA: 0x101BAE0 Offset: 0x101BAE0 VA: 0x101BAE0
	public void set_alphaHitTestMinimumThreshold(float value) { }

	// RVA: 0x101BAE8 Offset: 0x101BAE8 VA: 0x101BAE8
	public bool get_useSpriteMesh() { }

	// RVA: 0x101BAF0 Offset: 0x101BAF0 VA: 0x101BAF0
	public void set_useSpriteMesh(bool value) { }

	// RVA: 0x101BB78 Offset: 0x101BB78 VA: 0x101BB78
	public static Material get_defaultETC1GraphicMaterial() { }

	// RVA: 0x101BC70 Offset: 0x101BC70 VA: 0x101BC70 Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x101BE2C Offset: 0x101BE2C VA: 0x101BE2C
	public bool get_hasBorder() { }

	// RVA: 0x101BF00 Offset: 0x101BF00 VA: 0x101BF00
	public float get_pixelsPerUnit() { }

	// RVA: 0x101C024 Offset: 0x101C024 VA: 0x101C024 Slot: 32
	public override Material get_material() { }

	// RVA: 0x101C184 Offset: 0x101C184 VA: 0x101C184 Slot: 33
	public override void set_material(Material value) { }

	// RVA: 0x101C188 Offset: 0x101C188 VA: 0x101C188 Slot: 75
	public virtual void OnBeforeSerialize() { }

	// RVA: 0x101C18C Offset: 0x101C18C VA: 0x101C18C Slot: 76
	public virtual void OnAfterDeserialize() { }

	// RVA: 0x101C248 Offset: 0x101C248 VA: 0x101C248
	private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize) { }

	// RVA: 0x101C3B8 Offset: 0x101C3B8 VA: 0x101C3B8
	private Vector4 GetDrawingDimensions(bool shouldPreserveAspect) { }

	// RVA: 0x101C740 Offset: 0x101C740 VA: 0x101C740 Slot: 45
	public override void SetNativeSize() { }

	// RVA: 0x101C924 Offset: 0x101C924 VA: 0x101C924 Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x101B470 Offset: 0x101B470 VA: 0x101B470
	private void TrackSprite() { }

	// RVA: 0x1020844 Offset: 0x1020844 VA: 0x1020844 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x102086C Offset: 0x102086C VA: 0x102086C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x102097C Offset: 0x102097C VA: 0x102097C Slot: 40
	protected override void UpdateMaterial() { }

	// RVA: 0x101CA74 Offset: 0x101CA74 VA: 0x101CA74
	private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect) { }

	// RVA: 0x101CE20 Offset: 0x101CE20 VA: 0x101CE20
	private void GenerateSprite(VertexHelper vh, bool lPreserveAspect) { }

	// RVA: 0x101D384 Offset: 0x101D384 VA: 0x101D384
	private void GenerateSlicedSprite(VertexHelper toFill) { }

	// RVA: 0x101DD00 Offset: 0x101DD00 VA: 0x101DD00
	private void GenerateTiledSprite(VertexHelper toFill) { }

	// RVA: 0x1020F34 Offset: 0x1020F34 VA: 0x1020F34
	private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs) { }

	// RVA: 0x1020CC0 Offset: 0x1020CC0 VA: 0x1020CC0
	private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax) { }

	// RVA: 0x1020AB4 Offset: 0x1020AB4 VA: 0x1020AB4
	private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect) { }

	// RVA: 0x101F140 Offset: 0x101F140 VA: 0x101F140
	private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect) { }

	// RVA: 0x1021128 Offset: 0x1021128 VA: 0x1021128
	private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner) { }

	// RVA: 0x1021294 Offset: 0x1021294 VA: 0x1021294
	private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner) { }

	// RVA: 0x1021AFC Offset: 0x1021AFC VA: 0x1021AFC Slot: 77
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x1021B00 Offset: 0x1021B00 VA: 0x1021B00 Slot: 78
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x1021B04 Offset: 0x1021B04 VA: 0x1021B04 Slot: 79
	public virtual float get_minWidth() { }

	// RVA: 0x1021B0C Offset: 0x1021B0C VA: 0x1021B0C Slot: 80
	public virtual float get_preferredWidth() { }

	// RVA: 0x1021C28 Offset: 0x1021C28 VA: 0x1021C28 Slot: 81
	public virtual float get_flexibleWidth() { }

	// RVA: 0x1021C30 Offset: 0x1021C30 VA: 0x1021C30 Slot: 82
	public virtual float get_minHeight() { }

	// RVA: 0x1021C38 Offset: 0x1021C38 VA: 0x1021C38 Slot: 83
	public virtual float get_preferredHeight() { }

	// RVA: 0x1021D54 Offset: 0x1021D54 VA: 0x1021D54 Slot: 84
	public virtual float get_flexibleHeight() { }

	// RVA: 0x1021D5C Offset: 0x1021D5C VA: 0x1021D5C Slot: 85
	public virtual int get_layoutPriority() { }

	// RVA: 0x1021D64 Offset: 0x1021D64 VA: 0x1021D64 Slot: 86
	public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) { }

	// RVA: 0x102222C Offset: 0x102222C VA: 0x102222C
	private Vector2 MapCoordinate(Vector2 local, Rect rect) { }

	// RVA: 0x1022730 Offset: 0x1022730 VA: 0x1022730
	private static void RebuildImage(SpriteAtlas spriteAtlas) { }

	// RVA: 0x10206B0 Offset: 0x10206B0 VA: 0x10206B0
	private static void TrackImage(Image g) { }

	// RVA: 0x10208F0 Offset: 0x10208F0 VA: 0x10208F0
	private static void UnTrackImage(Image g) { }

	// RVA: 0x10228CC Offset: 0x10228CC VA: 0x10228CC
	private static void .cctor() { }
}

// Namespace: 
public enum Image.Type // TypeDefIndex: 3079
{
	// Fields
	public int value__; // 0x0
	public const Image.Type Simple = 0;
	public const Image.Type Sliced = 1;
	public const Image.Type Tiled = 2;
	public const Image.Type Filled = 3;
}

// Namespace: 
public enum Image.FillMethod // TypeDefIndex: 3080
{
	// Fields
	public int value__; // 0x0
	public const Image.FillMethod Horizontal = 0;
	public const Image.FillMethod Vertical = 1;
	public const Image.FillMethod Radial90 = 2;
	public const Image.FillMethod Radial180 = 3;
	public const Image.FillMethod Radial360 = 4;
}

// Namespace: 
public enum Image.OriginHorizontal // TypeDefIndex: 3081
{
	// Fields
	public int value__; // 0x0
	public const Image.OriginHorizontal Left = 0;
	public const Image.OriginHorizontal Right = 1;
}

// Namespace: 
public enum Image.OriginVertical // TypeDefIndex: 3082
{
	// Fields
	public int value__; // 0x0
	public const Image.OriginVertical Bottom = 0;
	public const Image.OriginVertical Top = 1;
}

// Namespace: 
public enum Image.Origin90 // TypeDefIndex: 3083
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin90 BottomLeft = 0;
	public const Image.Origin90 TopLeft = 1;
	public const Image.Origin90 TopRight = 2;
	public const Image.Origin90 BottomRight = 3;
}

// Namespace: 
public enum Image.Origin180 // TypeDefIndex: 3084
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin180 Bottom = 0;
	public const Image.Origin180 Left = 1;
	public const Image.Origin180 Top = 2;
	public const Image.Origin180 Right = 3;
}

// Namespace: 
public enum Image.Origin360 // TypeDefIndex: 3085
{
	// Fields
	public int value__; // 0x0
	public const Image.Origin360 Bottom = 0;
	public const Image.Origin360 Right = 1;
	public const Image.Origin360 Top = 2;
	public const Image.Origin360 Left = 3;
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7E5C8 Offset: 0xC7E5C8 VA: 0xC7E5C8
public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement, IEventSystemHandler // TypeDefIndex: 3086
{
	// Fields
	protected TouchScreenKeyboard m_Keyboard; // 0xD8
	private static readonly char[] kSeparators; // 0x0
	[SerializeField] // RVA: 0xC802C0 Offset: 0xC802C0 VA: 0xC802C0
	[FormerlySerializedAsAttribute] // RVA: 0xC802C0 Offset: 0xC802C0 VA: 0xC802C0
	protected Text m_TextComponent; // 0xE0
	[SerializeField] // RVA: 0xC8030C Offset: 0xC8030C VA: 0xC8030C
	protected Graphic m_Placeholder; // 0xE8
	[SerializeField] // RVA: 0xC8031C Offset: 0xC8031C VA: 0xC8031C
	private InputField.ContentType m_ContentType; // 0xF0
