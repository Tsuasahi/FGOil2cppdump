	// RVA: 0x1FDA354 Offset: 0x1FDA354 VA: 0x1FDA354
	internal void UpdateStatus(FtpStatus status) { }

	// RVA: 0x1FDA28C Offset: 0x1FDA28C VA: 0x1FDA28C
	private void CheckDisposed() { }

	// RVA: 0x1FDA3BC Offset: 0x1FDA3BC VA: 0x1FDA3BC
	internal bool IsFinal() { }
}

// Namespace: System.Net
[ObsoleteAttribute] // RVA: 0xBD0834 Offset: 0xBD0834 VA: 0xBD0834
public class GlobalProxySelection // TypeDefIndex: 1557
{
	// Properties
	public static IWebProxy Select { get; set; }

	// Methods

	// RVA: 0x1FDA3CC Offset: 0x1FDA3CC VA: 0x1FDA3CC
	public void .ctor() { }

	// RVA: 0x1FDA3D4 Offset: 0x1FDA3D4 VA: 0x1FDA3D4
	public static IWebProxy get_Select() { }

	// RVA: 0x1FDA434 Offset: 0x1FDA434 VA: 0x1FDA434
	public static void set_Select(IWebProxy value) { }

	// RVA: 0x1FDA49C Offset: 0x1FDA49C VA: 0x1FDA49C
	public static IWebProxy GetEmptyWebProxy() { }
}

// Namespace: 
internal class GlobalProxySelection.EmptyWebProxy : IWebProxy // TypeDefIndex: 1558
{
	// Fields
	private ICredentials credentials; // 0x10

	// Properties
	public ICredentials Credentials { get; set; }

	// Methods

	// RVA: 0x1FDA4F8 Offset: 0x1FDA4F8 VA: 0x1FDA4F8
	internal void .ctor() { }

	// RVA: 0x1FDA500 Offset: 0x1FDA500 VA: 0x1FDA500 Slot: 4
	public ICredentials get_Credentials() { }

	// RVA: 0x1FDA508 Offset: 0x1FDA508 VA: 0x1FDA508 Slot: 5
	public void set_Credentials(ICredentials value) { }

	// RVA: 0x1FDA510 Offset: 0x1FDA510 VA: 0x1FDA510 Slot: 6
	public Uri GetProxy(Uri destination) { }

	// RVA: 0x1FDA518 Offset: 0x1FDA518 VA: 0x1FDA518 Slot: 7
	public bool IsBypassed(Uri host) { }
}

// Namespace: System.Net
internal sealed class HttpConnection // TypeDefIndex: 1559
{
	// Fields
	private const int BufferSize = 8192;
	private Socket sock; // 0x10
	private Stream stream; // 0x18
	private EndPointListener epl; // 0x20
	private MemoryStream ms; // 0x28
	private byte[] buffer; // 0x30
	private HttpListenerContext context; // 0x38
	private StringBuilder current_line; // 0x40
	private ListenerPrefix prefix; // 0x48
	private RequestStream i_stream; // 0x50
	private ResponseStream o_stream; // 0x58
	private bool chunked; // 0x60
	private int chunked_uses; // 0x64
	private bool context_bound; // 0x68
	private bool secure; // 0x69
	private AsymmetricAlgorithm key; // 0x70
	private HttpConnection.InputState input_state; // 0x78
	private HttpConnection.LineState line_state; // 0x7C
	private int position; // 0x80

	// Properties
	public int ChunkedUses { get; }
	public IPEndPoint LocalEndPoint { get; }
	public IPEndPoint RemoteEndPoint { get; }
	public bool IsSecure { get; }
	public ListenerPrefix Prefix { get; set; }

	// Methods

	// RVA: 0x1FDA520 Offset: 0x1FDA520 VA: 0x1FDA520
	public void .ctor(Socket sock, EndPointListener epl, bool secure, X509Certificate2 cert, AsymmetricAlgorithm key) { }

	// RVA: 0x1FDA78C Offset: 0x1FDA78C VA: 0x1FDA78C
	private AsymmetricAlgorithm OnPVKSelection(X509Certificate certificate, string targetHost) { }

	// RVA: 0x1FDA6F4 Offset: 0x1FDA6F4 VA: 0x1FDA6F4
	private void Init() { }

	// RVA: 0x1FDA838 Offset: 0x1FDA838 VA: 0x1FDA838
	public int get_ChunkedUses() { }

	// RVA: 0x1FDA840 Offset: 0x1FDA840 VA: 0x1FDA840
	public IPEndPoint get_LocalEndPoint() { }

	// RVA: 0x1FDA924 Offset: 0x1FDA924 VA: 0x1FDA924
	public IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0x1FDAA08 Offset: 0x1FDAA08 VA: 0x1FDAA08
	public bool get_IsSecure() { }

	// RVA: 0x1FDAA10 Offset: 0x1FDAA10 VA: 0x1FDAA10
	public ListenerPrefix get_Prefix() { }

	// RVA: 0x1FDAA18 Offset: 0x1FDAA18 VA: 0x1FDAA18
	public void set_Prefix(ListenerPrefix value) { }

	// RVA: 0x1FDAA20 Offset: 0x1FDAA20 VA: 0x1FDAA20
	public void BeginReadRequest() { }

	// RVA: 0x1FDAC94 Offset: 0x1FDAC94 VA: 0x1FDAC94
	public RequestStream GetRequestStream(bool chunked, long contentlength) { }

	// RVA: 0x1FDAF14 Offset: 0x1FDAF14 VA: 0x1FDAF14
	public ResponseStream GetResponseStream() { }

	// RVA: 0x1FDAFE8 Offset: 0x1FDAFE8 VA: 0x1FDAFE8
	private void OnRead(IAsyncResult ares) { }

	// RVA: 0x1FDB940 Offset: 0x1FDB940 VA: 0x1FDB940
	private bool ProcessInput(MemoryStream ms) { }

	// RVA: 0x1FDC3F0 Offset: 0x1FDC3F0 VA: 0x1FDC3F0
	private string ReadLine(byte[] buffer, int offset, int len, ref int used) { }

	// RVA: 0x1FDB3B4 Offset: 0x1FDB3B4 VA: 0x1FDB3B4
	public void SendError(string msg, int status) { }

	// RVA: 0x1FDB8F4 Offset: 0x1FDB8F4 VA: 0x1FDB8F4
	public void SendError() { }

	// RVA: 0x1FDDC6C Offset: 0x1FDDC6C VA: 0x1FDDC6C
	private void Unbind() { }

	// RVA: 0x1FDDCC0 Offset: 0x1FDDCC0 VA: 0x1FDDCC0
	public void Close() { }

	// RVA: 0x1FDAB78 Offset: 0x1FDAB78 VA: 0x1FDAB78
	private void CloseSocket() { }

	// RVA: 0x1FDB5D8 Offset: 0x1FDB5D8 VA: 0x1FDB5D8
	internal void Close(bool force_close) { }
}

// Namespace: 
private enum HttpConnection.InputState // TypeDefIndex: 1560
{
	// Fields
	public int value__; // 0x0
	public const HttpConnection.InputState RequestLine = 0;
	public const HttpConnection.InputState Headers = 1;
}

// Namespace: 
private enum HttpConnection.LineState // TypeDefIndex: 1561
{
	// Fields
	public int value__; // 0x0
	public const HttpConnection.LineState None = 0;
	public const HttpConnection.LineState CR = 1;
	public const HttpConnection.LineState LF = 2;
}

// Namespace: System.Net
public sealed class HttpListener : IDisposable // TypeDefIndex: 1562
{
	// Fields
	private AuthenticationSchemes auth_schemes; // 0x10
	private HttpListenerPrefixCollection prefixes; // 0x18
	private AuthenticationSchemeSelector auth_selector; // 0x20
	private string realm; // 0x28
	private bool ignore_write_exceptions; // 0x30
	private bool unsafe_ntlm_auth; // 0x31
	private bool listening; // 0x32
	private bool disposed; // 0x33
	private Hashtable registry; // 0x38
	private ArrayList ctx_queue; // 0x40
	private ArrayList wait_queue; // 0x48

	// Properties
	public AuthenticationSchemes AuthenticationSchemes { get; set; }
	public AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }
	public bool IgnoreWriteExceptions { get; set; }
	public bool IsListening { get; }
	public static bool IsSupported { get; }
	public HttpListenerPrefixCollection Prefixes { get; }
	public string Realm { get; set; }
	[MonoTODOAttribute] // RVA: 0xBD372C Offset: 0xBD372C VA: 0xBD372C
	public bool UnsafeConnectionNtlmAuthentication { get; set; }

	// Methods

	// RVA: 0x1FDE11C Offset: 0x1FDE11C VA: 0x1FDE11C
	public void .ctor() { }

	// RVA: 0x1FDE274 Offset: 0x1FDE274 VA: 0x1FDE274 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1FDE334 Offset: 0x1FDE334 VA: 0x1FDE334
	public AuthenticationSchemes get_AuthenticationSchemes() { }

	// RVA: 0x1FDE33C Offset: 0x1FDE33C VA: 0x1FDE33C
	public void set_AuthenticationSchemes(AuthenticationSchemes value) { }

	// RVA: 0x1FDE418 Offset: 0x1FDE418 VA: 0x1FDE418
	public AuthenticationSchemeSelector get_AuthenticationSchemeSelectorDelegate() { }

	// RVA: 0x1FDE420 Offset: 0x1FDE420 VA: 0x1FDE420
	public void set_AuthenticationSchemeSelectorDelegate(AuthenticationSchemeSelector value) { }

	// RVA: 0x1FDAFE0 Offset: 0x1FDAFE0 VA: 0x1FDAFE0
	public bool get_IgnoreWriteExceptions() { }

	// RVA: 0x1FDE448 Offset: 0x1FDE448 VA: 0x1FDE448
	public void set_IgnoreWriteExceptions(bool value) { }

	// RVA: 0x1FDE474 Offset: 0x1FDE474 VA: 0x1FDE474
	public bool get_IsListening() { }

	// RVA: 0x1FDE47C Offset: 0x1FDE47C VA: 0x1FDE47C
	public static bool get_IsSupported() { }

	// RVA: 0x1FDE484 Offset: 0x1FDE484 VA: 0x1FDE484
	public HttpListenerPrefixCollection get_Prefixes() { }

	// RVA: 0x1FDE4A8 Offset: 0x1FDE4A8 VA: 0x1FDE4A8
	public string get_Realm() { }

	// RVA: 0x1FDE4B0 Offset: 0x1FDE4B0 VA: 0x1FDE4B0
	public void set_Realm(string value) { }

	// RVA: 0x1FDE4D8 Offset: 0x1FDE4D8 VA: 0x1FDE4D8
	public bool get_UnsafeConnectionNtlmAuthentication() { }

	// RVA: 0x1FDE4E0 Offset: 0x1FDE4E0 VA: 0x1FDE4E0
	public void set_UnsafeConnectionNtlmAuthentication(bool value) { }

	// RVA: 0x1FDE50C Offset: 0x1FDE50C VA: 0x1FDE50C
	public void Abort() { }

	// RVA: 0x1FDE528 Offset: 0x1FDE528 VA: 0x1FDE528
	public void Close() { }

	// RVA: 0x1FDE2AC Offset: 0x1FDE2AC VA: 0x1FDE2AC
	private void Close(bool force) { }

	// RVA: 0x1FDE568 Offset: 0x1FDE568 VA: 0x1FDE568
	private void Cleanup(bool close_existing) { }

	// RVA: 0x1FDF250 Offset: 0x1FDF250 VA: 0x1FDF250
	public IAsyncResult BeginGetContext(AsyncCallback callback, object state) { }

	// RVA: 0x1FDFD30 Offset: 0x1FDFD30 VA: 0x1FDFD30
	public HttpListenerContext EndGetContext(IAsyncResult asyncResult) { }

	// RVA: 0x1FE0298 Offset: 0x1FE0298 VA: 0x1FE0298
	internal AuthenticationSchemes SelectAuthenticationScheme(HttpListenerContext context) { }

	// RVA: 0x1FE02E4 Offset: 0x1FE02E4 VA: 0x1FE02E4
	public HttpListenerContext GetContext() { }

	// RVA: 0x1FE03FC Offset: 0x1FE03FC VA: 0x1FE03FC
	public void Start() { }

	// RVA: 0x1FE0480 Offset: 0x1FE0480 VA: 0x1FE0480
	public void Stop() { }

	// RVA: 0x1FDE364 Offset: 0x1FDE364 VA: 0x1FDE364
	internal void CheckDisposed() { }

	// RVA: 0x1FDF56C Offset: 0x1FDF56C VA: 0x1FDF56C
	private HttpListenerContext GetContextFromQueue() { }

	// RVA: 0x1FE04AC Offset: 0x1FE04AC VA: 0x1FE04AC
	internal void RegisterContext(HttpListenerContext context) { }

	// RVA: 0x1FE0754 Offset: 0x1FE0754 VA: 0x1FE0754
	internal void UnregisterContext(HttpListenerContext context) { }
}

// Namespace: System.Net
public class HttpListenerBasicIdentity : GenericIdentity // TypeDefIndex: 1563
{
	// Fields
	private string password; // 0x20

	// Properties
	public virtual string Password { get; }

	// Methods

	// RVA: 0x1FE0894 Offset: 0x1FE0894 VA: 0x1FE0894
	public void .ctor(string username, string password) { }

	// RVA: 0x1FE0904 Offset: 0x1FE0904 VA: 0x1FE0904 Slot: 4
	public virtual string get_Password() { }
}

// Namespace: System.Net
public sealed class HttpListenerContext // TypeDefIndex: 1564
{
	// Fields
	private HttpListenerRequest request; // 0x10
	private HttpListenerResponse response; // 0x18
	private IPrincipal user; // 0x20
	private HttpConnection cnc; // 0x28
	private string error; // 0x30
	private int err_status; // 0x38
	internal HttpListener Listener; // 0x40

	// Properties
	internal int ErrorStatus { get; set; }
	internal string ErrorMessage { get; set; }
	internal bool HaveError { get; }
	internal HttpConnection Connection { get; }
	public HttpListenerRequest Request { get; }
	public HttpListenerResponse Response { get; }
	public IPrincipal User { get; }

	// Methods

	// RVA: 0x1FDA794 Offset: 0x1FDA794 VA: 0x1FDA794
	internal void .ctor(HttpConnection cnc) { }

	// RVA: 0x1FDDC64 Offset: 0x1FDDC64 VA: 0x1FDDC64
	internal int get_ErrorStatus() { }

	// RVA: 0x1FDC5A8 Offset: 0x1FDC5A8 VA: 0x1FDC5A8
	internal void set_ErrorStatus(int value) { }

	// RVA: 0x1FDDC5C Offset: 0x1FDDC5C VA: 0x1FDDC5C
	internal string get_ErrorMessage() { }

	// RVA: 0x1FDC5A0 Offset: 0x1FDC5A0 VA: 0x1FDC5A0
	internal void set_ErrorMessage(string value) { }

	// RVA: 0x1FDBD14 Offset: 0x1FDBD14 VA: 0x1FDBD14
	internal bool get_HaveError() { }

	// RVA: 0x1FDF0E4 Offset: 0x1FDF0E4 VA: 0x1FDF0E4
	internal HttpConnection get_Connection() { }

	// RVA: 0x1FDBD24 Offset: 0x1FDBD24 VA: 0x1FDBD24
	public HttpListenerRequest get_Request() { }

	// RVA: 0x1FDAE04 Offset: 0x1FDAE04 VA: 0x1FDAE04
	public HttpListenerResponse get_Response() { }

	// RVA: 0x1FE0AB4 Offset: 0x1FE0AB4 VA: 0x1FE0AB4
	public IPrincipal get_User() { }

	// RVA: 0x1FE010C Offset: 0x1FE010C VA: 0x1FE010C
	internal void ParseAuthentication(AuthenticationSchemes expectedSchemes) { }

	// RVA: 0x1FE0ABC Offset: 0x1FE0ABC VA: 0x1FE0ABC
	internal IPrincipal ParseBasicAuthentication(string authData) { }
}

// Namespace: System.Net
[Serializable]
public class HttpListenerException : Win32Exception // TypeDefIndex: 1565
{
	// Properties
	public override int ErrorCode { get; }

	// Methods

	// RVA: 0x1FE0D40 Offset: 0x1FE0D40 VA: 0x1FE0D40
	public void .ctor() { }

	// RVA: 0x1FE0D48 Offset: 0x1FE0D48 VA: 0x1FE0D48
	public void .ctor(int errorCode) { }

	// RVA: 0x1FE0D50 Offset: 0x1FE0D50 VA: 0x1FE0D50
	public void .ctor(int errorCode, string message) { }

	// RVA: 0x1FE0D58 Offset: 0x1FE0D58 VA: 0x1FE0D58
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }

	// RVA: 0x1FE0D60 Offset: 0x1FE0D60 VA: 0x1FE0D60 Slot: 12
	public override int get_ErrorCode() { }
}

// Namespace: System.Net
public class HttpListenerPrefixCollection : IEnumerable, ICollection<string>, IEnumerable<string> // TypeDefIndex: 1566
{
	// Fields
	private List<string> prefixes; // 0x10
	private HttpListener listener; // 0x18

	// Properties
	public int Count { get; }
	public bool IsReadOnly { get; }
	public bool IsSynchronized { get; }

	// Methods

	// RVA: 0x1FDE1F0 Offset: 0x1FDE1F0 VA: 0x1FDE1F0
	internal void .ctor(HttpListener listener) { }

	// RVA: 0x1FE0D68 Offset: 0x1FE0D68 VA: 0x1FE0D68 Slot: 4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }

	// RVA: 0x1FE039C Offset: 0x1FE039C VA: 0x1FE039C Slot: 5
	public int get_Count() { }

	// RVA: 0x1FE0DFC Offset: 0x1FE0DFC VA: 0x1FE0DFC Slot: 6
	public bool get_IsReadOnly() { }

	// RVA: 0x1FE0E04 Offset: 0x1FE0E04 VA: 0x1FE0E04
	public bool get_IsSynchronized() { }

	// RVA: 0x1FE0E0C Offset: 0x1FE0E0C VA: 0x1FE0E0C Slot: 7
	public void Add(string uriPrefix) { }

	// RVA: 0x1FE1234 Offset: 0x1FE1234 VA: 0x1FE1234 Slot: 8
	public void Clear() { }

	// RVA: 0x1FE1300 Offset: 0x1FE1300 VA: 0x1FE1300 Slot: 9
	public bool Contains(string uriPrefix) { }

	// RVA: 0x1FE1388 Offset: 0x1FE1388 VA: 0x1FE1388 Slot: 10
	public void CopyTo(string[] array, int offset) { }

	// RVA: 0x1FE1418 Offset: 0x1FE1418 VA: 0x1FE1418
	public void CopyTo(Array array, int offset) { }

	// RVA: 0x1FE1500 Offset: 0x1FE1500 VA: 0x1FE1500 Slot: 12
	public IEnumerator<string> GetEnumerator() { }

	// RVA: 0x1FE1594 Offset: 0x1FE1594 VA: 0x1FE1594 Slot: 11
	public bool Remove(string uriPrefix) { }
}

// Namespace: System.Net
public sealed class HttpListenerRequest // TypeDefIndex: 1567
{
	// Fields
	private string[] accept_types; // 0x10
	private Encoding content_encoding; // 0x18
	private long content_length; // 0x20
	private bool cl_set; // 0x28
	private CookieCollection cookies; // 0x30
	private WebHeaderCollection headers; // 0x38
	private string method; // 0x40
	private Stream input_stream; // 0x48
	private Version version; // 0x50
	private NameValueCollection query_string; // 0x58
	private string raw_url; // 0x60
	private Guid identifier; // 0x68
	private Uri url; // 0x78
	private Uri referrer; // 0x80
	private string[] user_languages; // 0x88
	private HttpListenerContext context; // 0x90
	private bool is_chunked; // 0x98
	private static byte[] _100continue; // 0x0
	private static readonly string[] no_body_methods; // 0x8
	private static char[] separators; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xBD0F8C Offset: 0xBD0F8C VA: 0xBD0F8C
	private static Dictionary<string, int> <>f__switch$map7; // 0x18

	// Properties
	public string[] AcceptTypes { get; }
	[MonoTODOAttribute] // RVA: 0xBD3764 Offset: 0xBD3764 VA: 0xBD3764
	public int ClientCertificateError { get; }
	public Encoding ContentEncoding { get; }
	public long ContentLength64 { get; }
	public string ContentType { get; }
	public CookieCollection Cookies { get; }
	public bool HasEntityBody { get; }
	public NameValueCollection Headers { get; }
	public string HttpMethod { get; }
	public Stream InputStream { get; }
	[MonoTODOAttribute] // RVA: 0xBD379C Offset: 0xBD379C VA: 0xBD379C
	public bool IsAuthenticated { get; }
	public bool IsLocal { get; }
	public bool IsSecureConnection { get; }
	public bool KeepAlive { get; }
	public IPEndPoint LocalEndPoint { get; }
	public Version ProtocolVersion { get; }
	public NameValueCollection QueryString { get; }
	public string RawUrl { get; }
	public IPEndPoint RemoteEndPoint { get; }
	public Guid RequestTraceIdentifier { get; }
	public Uri Url { get; }
	public Uri UrlReferrer { get; }
	public string UserAgent { get; }
	public string UserHostAddress { get; }
	public string UserHostName { get; }
	public string[] UserLanguages { get; }

	// Methods

	// RVA: 0x1FE090C Offset: 0x1FE090C VA: 0x1FE090C
	internal void .ctor(HttpListenerContext context) { }

	// RVA: 0x1FE16C0 Offset: 0x1FE16C0 VA: 0x1FE16C0
	private static void .cctor() { }

	// RVA: 0x1FDC5B0 Offset: 0x1FDC5B0 VA: 0x1FDC5B0
	internal void SetRequestLine(string req) { }

	// RVA: 0x1FE18D8 Offset: 0x1FE18D8 VA: 0x1FE18D8
	private void CreateQueryString(string query) { }

	// RVA: 0x1FDBD2C Offset: 0x1FDBD2C VA: 0x1FDBD2C
	internal void FinishInitialization() { }

	// RVA: 0x1FE1C30 Offset: 0x1FE1C30 VA: 0x1FE1C30
	internal static string Unquote(string str) { }

	// RVA: 0x1FDC96C Offset: 0x1FDC96C VA: 0x1FDC96C
	internal void AddHeader(string header) { }

	// RVA: 0x1FDDCE0 Offset: 0x1FDDCE0 VA: 0x1FDDCE0
	internal bool FlushInput() { }

	// RVA: 0x1FE1D10 Offset: 0x1FE1D10 VA: 0x1FE1D10
	public string[] get_AcceptTypes() { }

	// RVA: 0x1FE1D18 Offset: 0x1FE1D18 VA: 0x1FE1D18
	public int get_ClientCertificateError() { }

	// RVA: 0x1FE1D20 Offset: 0x1FE1D20 VA: 0x1FE1D20
	public Encoding get_ContentEncoding() { }

	// RVA: 0x1FE1D94 Offset: 0x1FE1D94 VA: 0x1FE1D94
	public long get_ContentLength64() { }

	// RVA: 0x1FE1D9C Offset: 0x1FE1D9C VA: 0x1FE1D9C
	public string get_ContentType() { }

	// RVA: 0x1FE1E00 Offset: 0x1FE1E00 VA: 0x1FE1E00
	public CookieCollection get_Cookies() { }

	// RVA: 0x1FE1CE4 Offset: 0x1FE1CE4 VA: 0x1FE1CE4
	public bool get_HasEntityBody() { }

	// RVA: 0x1FDDCC8 Offset: 0x1FDDCC8 VA: 0x1FDDCC8
	public NameValueCollection get_Headers() { }

	// RVA: 0x1FE1E6C Offset: 0x1FE1E6C VA: 0x1FE1E6C
	public string get_HttpMethod() { }

	// RVA: 0x1FE1D08 Offset: 0x1FE1D08 VA: 0x1FE1D08
	public Stream get_InputStream() { }

	// RVA: 0x1FE1E74 Offset: 0x1FE1E74 VA: 0x1FE1E74
	public bool get_IsAuthenticated() { }

	// RVA: 0x1FE1E7C Offset: 0x1FE1E7C VA: 0x1FE1E7C
	public bool get_IsLocal() { }

	// RVA: 0x1FE1BB0 Offset: 0x1FE1BB0 VA: 0x1FE1BB0
	public bool get_IsSecureConnection() { }

	// RVA: 0x1FE2050 Offset: 0x1FE2050 VA: 0x1FE2050
	public bool get_KeepAlive() { }

	// RVA: 0x1FE1BEC Offset: 0x1FE1BEC VA: 0x1FE1BEC
	public IPEndPoint get_LocalEndPoint() { }

	// RVA: 0x1FDDCD8 Offset: 0x1FDDCD8 VA: 0x1FDDCD8
	public Version get_ProtocolVersion() { }

	// RVA: 0x1FE2058 Offset: 0x1FE2058 VA: 0x1FE2058
	public NameValueCollection get_QueryString() { }

	// RVA: 0x1FE2060 Offset: 0x1FE2060 VA: 0x1FE2060
	public string get_RawUrl() { }

	// RVA: 0x1FE1EF8 Offset: 0x1FE1EF8 VA: 0x1FE1EF8
	public IPEndPoint get_RemoteEndPoint() { }

	// RVA: 0x1FE2068 Offset: 0x1FE2068 VA: 0x1FE2068
	public Guid get_RequestTraceIdentifier() { }

	// RVA: 0x1FE2074 Offset: 0x1FE2074 VA: 0x1FE2074
	public Uri get_Url() { }

	// RVA: 0x1FE207C Offset: 0x1FE207C VA: 0x1FE207C
	public Uri get_UrlReferrer() { }

	// RVA: 0x1FE2084 Offset: 0x1FE2084 VA: 0x1FE2084
	public string get_UserAgent() { }

	// RVA: 0x1FE1B7C Offset: 0x1FE1B7C VA: 0x1FE1B7C
	public string get_UserHostAddress() { }

	// RVA: 0x1FE1B18 Offset: 0x1FE1B18 VA: 0x1FE1B18
	public string get_UserHostName() { }

	// RVA: 0x1FE20E8 Offset: 0x1FE20E8 VA: 0x1FE20E8
	public string[] get_UserLanguages() { }

	// RVA: 0x1FE20F0 Offset: 0x1FE20F0 VA: 0x1FE20F0
	public IAsyncResult BeginGetClientCertificate(AsyncCallback requestCallback, object state) { }

	// RVA: 0x1FE20F8 Offset: 0x1FE20F8 VA: 0x1FE20F8
	public X509Certificate2 EndGetClientCertificate(IAsyncResult asyncResult) { }

	// RVA: 0x1FE2100 Offset: 0x1FE2100 VA: 0x1FE2100
	public X509Certificate2 GetClientCertificate() { }
}

// Namespace: System.Net
public sealed class HttpListenerResponse : IDisposable // TypeDefIndex: 1568
{
	// Fields
	private bool disposed; // 0x10
	private Encoding content_encoding; // 0x18
	private long content_length; // 0x20
	private bool cl_set; // 0x28
	private string content_type; // 0x30
	private CookieCollection cookies; // 0x38
	private WebHeaderCollection headers; // 0x40
	private bool keep_alive; // 0x48
	private ResponseStream output_stream; // 0x50
	private Version version; // 0x58
	private string location; // 0x60
	private int status_code; // 0x68
	private string status_description; // 0x70
	private bool chunked; // 0x78
	private HttpListenerContext context; // 0x80
	internal bool HeadersSent; // 0x88
	private bool force_close_chunked; // 0x89

	// Properties
	internal bool ForceCloseChunked { get; }
	public Encoding ContentEncoding { get; set; }
	public long ContentLength64 { get; set; }
	public string ContentType { get; set; }
	public CookieCollection Cookies { get; set; }
	public WebHeaderCollection Headers { get; set; }
	public bool KeepAlive { get; set; }
	public Stream OutputStream { get; }
	public Version ProtocolVersion { get; set; }
	public string RedirectLocation { get; set; }
	public bool SendChunked { get; set; }
	public int StatusCode { get; set; }
	public string StatusDescription { get; set; }

	// Methods

	// RVA: 0x1FE09E8 Offset: 0x1FE09E8 VA: 0x1FE09E8
	internal void .ctor(HttpListenerContext context) { }

	// RVA: 0x1FE2108 Offset: 0x1FE2108 VA: 0x1FE2108 Slot: 4
	private void System.IDisposable.Dispose() { }

	// RVA: 0x1FDDE1C Offset: 0x1FDDE1C VA: 0x1FDDE1C
	internal bool get_ForceCloseChunked() { }

	// RVA: 0x1FDDAF0 Offset: 0x1FDDAF0 VA: 0x1FDDAF0
	public Encoding get_ContentEncoding() { }

	// RVA: 0x1FE215C Offset: 0x1FE215C VA: 0x1FE215C
	public void set_ContentEncoding(Encoding value) { }

	// RVA: 0x1FE2260 Offset: 0x1FE2260 VA: 0x1FE2260
	public long get_ContentLength64() { }

	// RVA: 0x1FE2268 Offset: 0x1FE2268 VA: 0x1FE2268
	public void set_ContentLength64(long value) { }

	// RVA: 0x1FE23B0 Offset: 0x1FE23B0 VA: 0x1FE23B0
	public string get_ContentType() { }

	// RVA: 0x1FDD6B4 Offset: 0x1FDD6B4 VA: 0x1FDD6B4
	public void set_ContentType(string value) { }

	// RVA: 0x1FE23B8 Offset: 0x1FE23B8 VA: 0x1FE23B8
	public CookieCollection get_Cookies() { }

	// RVA: 0x1FE2424 Offset: 0x1FE2424 VA: 0x1FE2424
	public void set_Cookies(CookieCollection value) { }

	// RVA: 0x1FE242C Offset: 0x1FE242C VA: 0x1FE242C
	public WebHeaderCollection get_Headers() { }

	// RVA: 0x1FE2434 Offset: 0x1FE2434 VA: 0x1FE2434
	public void set_Headers(WebHeaderCollection value) { }

	// RVA: 0x1FE243C Offset: 0x1FE243C VA: 0x1FE243C
	public bool get_KeepAlive() { }

	// RVA: 0x1FE2444 Offset: 0x1FE2444 VA: 0x1FE2444
	public void set_KeepAlive(bool value) { }

	// RVA: 0x1FE254C Offset: 0x1FE254C VA: 0x1FE254C
	public Stream get_OutputStream() { }

	// RVA: 0x1FE259C Offset: 0x1FE259C VA: 0x1FE259C
	public Version get_ProtocolVersion() { }

	// RVA: 0x1FE25A4 Offset: 0x1FE25A4 VA: 0x1FE25A4
	public void set_ProtocolVersion(Version value) { }

	// RVA: 0x1FE2784 Offset: 0x1FE2784 VA: 0x1FE2784
	public string get_RedirectLocation() { }

	// RVA: 0x1FE278C Offset: 0x1FE278C VA: 0x1FE278C
	public void set_RedirectLocation(string value) { }

	// RVA: 0x1FE2890 Offset: 0x1FE2890 VA: 0x1FE2890
	public bool get_SendChunked() { }

	// RVA: 0x1FDAE0C Offset: 0x1FDAE0C VA: 0x1FDAE0C
	public void set_SendChunked(bool value) { }

	// RVA: 0x1FDDCD0 Offset: 0x1FDDCD0 VA: 0x1FDDCD0
	public int get_StatusCode() { }

	// RVA: 0x1FDD56C Offset: 0x1FDD56C VA: 0x1FDD56C
	public void set_StatusCode(int value) { }

	// RVA: 0x1FDD7B8 Offset: 0x1FDD7B8 VA: 0x1FDD7B8
	internal static string GetStatusDescription(int code) { }

	// RVA: 0x1FE2898 Offset: 0x1FE2898 VA: 0x1FE2898
	public string get_StatusDescription() { }

	// RVA: 0x1FE28A0 Offset: 0x1FE28A0 VA: 0x1FE28A0
	public void set_StatusDescription(string value) { }

	// RVA: 0x1FE28A8 Offset: 0x1FE28A8 VA: 0x1FE28A8
	public void Abort() { }

	// RVA: 0x1FE28BC Offset: 0x1FE28BC VA: 0x1FE28BC
	public void AddHeader(string name, string value) { }

	// RVA: 0x1FE2A3C Offset: 0x1FE2A3C VA: 0x1FE2A3C
	public void AppendCookie(Cookie cookie) { }

	// RVA: 0x1FE2AF0 Offset: 0x1FE2AF0 VA: 0x1FE2AF0
	public void AppendHeader(string name, string value) { }

	// RVA: 0x1FE2110 Offset: 0x1FE2110 VA: 0x1FE2110
	private void Close(bool force) { }

	// RVA: 0x1FE2C70 Offset: 0x1FE2C70 VA: 0x1FE2C70
	public void Close() { }

	// RVA: 0x1FDDB64 Offset: 0x1FDDB64 VA: 0x1FDDB64
	public void Close(byte[] responseEntity, bool willBlock) { }

	// RVA: 0x1FE2C84 Offset: 0x1FE2C84 VA: 0x1FE2C84
	public void CopyFrom(HttpListenerResponse templateResponse) { }

	// RVA: 0x1FE2D28 Offset: 0x1FE2D28 VA: 0x1FE2D28
	public void Redirect(string url) { }

	// RVA: 0x1FE2D54 Offset: 0x1FE2D54 VA: 0x1FE2D54
	private bool FindCookie(Cookie cookie) { }

	// RVA: 0x1FE31CC Offset: 0x1FE31CC VA: 0x1FE31CC
	internal void SendHeaders(bool closing, MemoryStream ms) { }

	// RVA: 0x1FE3B84 Offset: 0x1FE3B84 VA: 0x1FE3B84
	public void SetCookie(Cookie cookie) { }
}

// Namespace: System.Net
internal class HttpRequestCreator : IWebRequestCreate // TypeDefIndex: 1569
{
	// Methods

	// RVA: 0x1FE3CA0 Offset: 0x1FE3CA0 VA: 0x1FE3CA0
	internal void .ctor() { }

	// RVA: 0x1FE3CA8 Offset: 0x1FE3CA8 VA: 0x1FE3CA8 Slot: 4
	public WebRequest Create(Uri uri) { }
}

// Namespace: System.Net
public enum HttpRequestHeader // TypeDefIndex: 1570
{
	// Fields
	public int value__; // 0x0
	public const HttpRequestHeader CacheControl = 0;
	public const HttpRequestHeader Connection = 1;
	public const HttpRequestHeader Date = 2;
	public const HttpRequestHeader KeepAlive = 3;
	public const HttpRequestHeader Pragma = 4;
	public const HttpRequestHeader Trailer = 5;
	public const HttpRequestHeader TransferEncoding = 6;
	public const HttpRequestHeader Upgrade = 7;
	public const HttpRequestHeader Via = 8;
	public const HttpRequestHeader Warning = 9;
	public const HttpRequestHeader Allow = 10;
	public const HttpRequestHeader ContentLength = 11;
	public const HttpRequestHeader ContentType = 12;
	public const HttpRequestHeader ContentEncoding = 13;
	public const HttpRequestHeader ContentLanguage = 14;
	public const HttpRequestHeader ContentLocation = 15;
	public const HttpRequestHeader ContentMd5 = 16;
	public const HttpRequestHeader ContentRange = 17;
	public const HttpRequestHeader Expires = 18;
	public const HttpRequestHeader LastModified = 19;
	public const HttpRequestHeader Accept = 20;
	public const HttpRequestHeader AcceptCharset = 21;
	public const HttpRequestHeader AcceptEncoding = 22;
	public const HttpRequestHeader AcceptLanguage = 23;
	public const HttpRequestHeader Authorization = 24;
	public const HttpRequestHeader Cookie = 25;
	public const HttpRequestHeader Expect = 26;
	public const HttpRequestHeader From = 27;
	public const HttpRequestHeader Host = 28;
	public const HttpRequestHeader IfMatch = 29;
	public const HttpRequestHeader IfModifiedSince = 30;
	public const HttpRequestHeader IfNoneMatch = 31;
	public const HttpRequestHeader IfRange = 32;
	public const HttpRequestHeader IfUnmodifiedSince = 33;
	public const HttpRequestHeader MaxForwards = 34;
	public const HttpRequestHeader ProxyAuthorization = 35;
	public const HttpRequestHeader Referer = 36;
	public const HttpRequestHeader Range = 37;
	public const HttpRequestHeader Te = 38;
	public const HttpRequestHeader Translate = 39;
	public const HttpRequestHeader UserAgent = 40;
}

// Namespace: System.Net
public enum HttpResponseHeader // TypeDefIndex: 1571
{
	// Fields
	public int value__; // 0x0
	public const HttpResponseHeader CacheControl = 0;
	public const HttpResponseHeader Connection = 1;
	public const HttpResponseHeader Date = 2;
	public const HttpResponseHeader KeepAlive = 3;
	public const HttpResponseHeader Pragma = 4;
	public const HttpResponseHeader Trailer = 5;
	public const HttpResponseHeader TransferEncoding = 6;
	public const HttpResponseHeader Upgrade = 7;
	public const HttpResponseHeader Via = 8;
	public const HttpResponseHeader Warning = 9;
	public const HttpResponseHeader Allow = 10;
	public const HttpResponseHeader ContentLength = 11;
	public const HttpResponseHeader ContentType = 12;
	public const HttpResponseHeader ContentEncoding = 13;
	public const HttpResponseHeader ContentLanguage = 14;
	public const HttpResponseHeader ContentLocation = 15;
	public const HttpResponseHeader ContentMd5 = 16;
	public const HttpResponseHeader ContentRange = 17;
	public const HttpResponseHeader Expires = 18;
	public const HttpResponseHeader LastModified = 19;
	public const HttpResponseHeader AcceptRanges = 20;
	public const HttpResponseHeader Age = 21;
	public const HttpResponseHeader ETag = 22;
	public const HttpResponseHeader Location = 23;
	public const HttpResponseHeader ProxyAuthenticate = 24;
	public const HttpResponseHeader RetryAfter = 25;
	public const HttpResponseHeader Server = 26;
	public const HttpResponseHeader SetCookie = 27;
	public const HttpResponseHeader Vary = 28;
	public const HttpResponseHeader WwwAuthenticate = 29;
}

// Namespace: System.Net
public enum HttpStatusCode // TypeDefIndex: 1572
{
	// Fields
	public int value__; // 0x0
	public const HttpStatusCode Continue = 100;
	public const HttpStatusCode SwitchingProtocols = 101;
	public const HttpStatusCode OK = 200;
	public const HttpStatusCode Created = 201;
	public const HttpStatusCode Accepted = 202;
	public const HttpStatusCode NonAuthoritativeInformation = 203;
	public const HttpStatusCode NoContent = 204;
	public const HttpStatusCode ResetContent = 205;
	public const HttpStatusCode PartialContent = 206;
	public const HttpStatusCode MultipleChoices = 300;
	public const HttpStatusCode Ambiguous = 300;
	public const HttpStatusCode MovedPermanently = 301;
	public const HttpStatusCode Moved = 301;
	public const HttpStatusCode Found = 302;
	public const HttpStatusCode Redirect = 302;
	public const HttpStatusCode SeeOther = 303;
	public const HttpStatusCode RedirectMethod = 303;
	public const HttpStatusCode NotModified = 304;
	public const HttpStatusCode UseProxy = 305;
	public const HttpStatusCode Unused = 306;
	public const HttpStatusCode TemporaryRedirect = 307;
	public const HttpStatusCode RedirectKeepVerb = 307;
	public const HttpStatusCode BadRequest = 400;
	public const HttpStatusCode Unauthorized = 401;
	public const HttpStatusCode PaymentRequired = 402;
	public const HttpStatusCode Forbidden = 403;
	public const HttpStatusCode NotFound = 404;
	public const HttpStatusCode MethodNotAllowed = 405;
	public const HttpStatusCode NotAcceptable = 406;
	public const HttpStatusCode ProxyAuthenticationRequired = 407;
	public const HttpStatusCode RequestTimeout = 408;
	public const HttpStatusCode Conflict = 409;
	public const HttpStatusCode Gone = 410;
	public const HttpStatusCode LengthRequired = 411;
	public const HttpStatusCode PreconditionFailed = 412;
	public const HttpStatusCode RequestEntityTooLarge = 413;
	public const HttpStatusCode RequestUriTooLong = 414;
	public const HttpStatusCode UnsupportedMediaType = 415;
	public const HttpStatusCode RequestedRangeNotSatisfiable = 416;
	public const HttpStatusCode ExpectationFailed = 417;
	public const HttpStatusCode InternalServerError = 500;
	public const HttpStatusCode NotImplemented = 501;
	public const HttpStatusCode BadGateway = 502;
	public const HttpStatusCode ServiceUnavailable = 503;
	public const HttpStatusCode GatewayTimeout = 504;
	public const HttpStatusCode HttpVersionNotSupported = 505;
}

// Namespace: System.Net
internal class HttpStreamAsyncResult : IAsyncResult // TypeDefIndex: 1573
{
	// Fields
	private object locker; // 0x10
	private ManualResetEvent handle; // 0x18
	private bool completed; // 0x20
	internal byte[] Buffer; // 0x28
	internal int Offset; // 0x30
	internal int Count; // 0x34
	internal AsyncCallback Callback; // 0x38
	internal object State; // 0x40
	internal int SynchRead; // 0x48
	internal Exception Error; // 0x50

	// Properties
	public object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public bool CompletedSynchronously { get; }
	public bool IsCompleted { get; }

	// Methods

	// RVA: 0x1FE3E7C Offset: 0x1FE3E7C VA: 0x1FE3E7C
	public void .ctor() { }

	// RVA: 0x1FE3EE4 Offset: 0x1FE3EE4 VA: 0x1FE3EE4
	public void Complete(Exception e) { }

	// RVA: 0x1FE3EEC Offset: 0x1FE3EEC VA: 0x1FE3EEC
	public void Complete() { }

	// RVA: 0x1FE3FAC Offset: 0x1FE3FAC VA: 0x1FE3FAC Slot: 4
	public object get_AsyncState() { }

	// RVA: 0x1FE3FB4 Offset: 0x1FE3FB4 VA: 0x1FE3FB4 Slot: 5
	public WaitHandle get_AsyncWaitHandle() { }

	// RVA: 0x1FE4094 Offset: 0x1FE4094 VA: 0x1FE4094 Slot: 6
	public bool get_CompletedSynchronously() { }

	// RVA: 0x1FE40A8 Offset: 0x1FE40A8 VA: 0x1FE40A8 Slot: 7
	public bool get_IsCompleted() { }
}

// Namespace: System.Net
internal sealed class HttpUtility // TypeDefIndex: 1574
{
	// Methods

	// RVA: 0x1FE40E8 Offset: 0x1FE40E8 VA: 0x1FE40E8
	private void .ctor() { }

	// RVA: 0x1FE1B10 Offset: 0x1FE1B10 VA: 0x1FE1B10
	public static string UrlDecode(string s) { }

	// RVA: 0x1FE44CC Offset: 0x1FE44CC VA: 0x1FE44CC
	private static char[] GetChars(MemoryStream b, Encoding e) { }

	// RVA: 0x1FE40F0 Offset: 0x1FE40F0 VA: 0x1FE40F0
	public static string UrlDecode(string s, Encoding e) { }
}

// Namespace: System.Net
public class HttpVersion // TypeDefIndex: 1575
{
	// Fields
	public static readonly Version Version10; // 0x0
	public static readonly Version Version11; // 0x8

	// Methods

	// RVA: 0x1FE455C Offset: 0x1FE455C VA: 0x1FE455C
	public void .ctor() { }

	// RVA: 0x1FE4564 Offset: 0x1FE4564 VA: 0x1FE4564
