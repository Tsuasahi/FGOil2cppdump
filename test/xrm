	// RVA: 0x1106FE8 Offset: 0x1106FE8 VA: 0x1106FE8
	public void reloadBg(out int outNo, out int outType) { }

	// RVA: 0x1107000 Offset: 0x1107000 VA: 0x1107000
	public void loadBg(int no, int tp = 0) { }

	// RVA: 0x11070FC Offset: 0x11070FC VA: 0x11070FC
	public void endloadBg(AssetData data) { }

	// RVA: 0x1107BC0 Offset: 0x1107BC0 VA: 0x1107BC0
	protected void AddChangeBgInfo(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }

	// RVA: 0x1107D5C Offset: 0x1107D5C VA: 0x1107D5C
	protected bool ExistsLoadBgInfo() { }

	// RVA: 0x1107DC8 Offset: 0x1107DC8 VA: 0x1107DC8
	protected BattlePerformanceBg.BgInfo FetchBgInfo() { }

	// RVA: 0x1107E74 Offset: 0x1107E74 VA: 0x1107E74
	public void changeBg(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }

	// RVA: 0x11076A0 Offset: 0x11076A0 VA: 0x11076A0
	private GameObject getBgObject(AssetData data, int tp) { }

	// RVA: 0x11079B8 Offset: 0x11079B8 VA: 0x11079B8
	private GameObject getFrontObject(AssetData data, int tp) { }

	// RVA: 0x11086A4 Offset: 0x11086A4 VA: 0x11086A4
	public void endChangeBg(AssetData data) { }

	// RVA: 0x1108F2C Offset: 0x1108F2C VA: 0x1108F2C
	public void UpdateColor(Color color) { }

	// RVA: 0x1108480 Offset: 0x1108480 VA: 0x1108480
	public void endChangeColor() { }

	// RVA: 0x1108F34 Offset: 0x1108F34 VA: 0x1108F34
	public Texture2D GetShadowTexture(int shadowId) { }

	// RVA: 0x1109000 Offset: 0x1109000 VA: 0x1109000
	public void DebugPrint(AssetData data) { }

	// RVA: 0x1108420 Offset: 0x1108420 VA: 0x1108420
	protected void OnEndBgLoad() { }

	// RVA: 0x1106348 Offset: 0x1106348 VA: 0x1106348
	public BattlePerformanceBg.BgState saveHistoryBgState(string inName) { }

	// RVA: 0x110924C Offset: 0x110924C VA: 0x110924C
	public void playAnimation(string key, string animName, float timeline = 0) { }

	// RVA: 0x110931C Offset: 0x110931C VA: 0x110931C
	public void playLoadEndAnimation() { }

	// RVA: 0x11093B0 Offset: 0x11093B0 VA: 0x11093B0
	public void setCutNodeNoble(bool flg) { }

	// RVA: 0x1109450 Offset: 0x1109450 VA: 0x1109450
	public void playBgAnimationOut() { }

	// RVA: 0x11094B0 Offset: 0x11094B0 VA: 0x11094B0
	public void playBgAnimationIn() { }

	// RVA: 0x1109510 Offset: 0x1109510 VA: 0x1109510
	private static void .cctor() { }
}

// Namespace: 
public class BattlePerformanceBg.BgState // TypeDefIndex: 9275
{
	// Fields
	public string bgName; // 0x10
	public Dictionary<string, BattleBgComponent.SaveData> compDictionary; // 0x18

	// Methods

	// RVA: 0x11091C8 Offset: 0x11091C8 VA: 0x11091C8
	public void .ctor(string inName) { }

	// RVA: 0x1109070 Offset: 0x1109070 VA: 0x1109070
	public void setSaveData(BattleBgComponent[] list) { }

	// RVA: 0x11069A8 Offset: 0x11069A8 VA: 0x11069A8
	public void loadSaveData(BattleBgComponent[] list, BattleActionCamera actionCamera) { }
}

// Namespace: 
private enum BattlePerformanceBg.FADE // TypeDefIndex: 9276
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceBg.FADE NONE = 0;
	public const BattlePerformanceBg.FADE IN = 1;
	public const BattlePerformanceBg.FADE OUT = 2;
}

// Namespace: 
public class BattlePerformanceBg.SaveData // TypeDefIndex: 9277
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC662B4 Offset: 0xC662B4 VA: 0xC662B4
	public string bgName; // 0x10
	[PackKeyAttribute] // RVA: 0xC662EC Offset: 0xC662EC VA: 0xC662EC
	public BattlePerformanceBg.SaveData.CompSaveData[] compSaveDataList; // 0x18
	[PackKeyAttribute] // RVA: 0xC66324 Offset: 0xC66324 VA: 0xC66324
	public int bgNo; // 0x20
	[PackKeyAttribute] // RVA: 0xC6635C Offset: 0xC6635C VA: 0xC6635C
	public int bgTp; // 0x24

	// Methods

	// RVA: 0x11065B4 Offset: 0x11065B4 VA: 0x11065B4
	public void .ctor() { }
}

// Namespace: 
public class BattlePerformanceBg.SaveData.CompSaveData // TypeDefIndex: 9278
{
	// Fields
	[PackKeyAttribute] // RVA: 0xC66394 Offset: 0xC66394 VA: 0xC66394
	public string bgCompName; // 0x10
	[PackKeyAttribute] // RVA: 0xC663CC Offset: 0xC663CC VA: 0xC663CC
	public BattleBgComponent.SaveData bgCompData; // 0x18

	// Methods

	// RVA: 0x1106650 Offset: 0x1106650 VA: 0x1106650
	public void .ctor() { }
}

// Namespace: 
protected class BattlePerformanceBg.BgInfo // TypeDefIndex: 9279
{
	// Fields
	public int bgNo; // 0x10
	public int tp; // 0x14
	public Vector3 pos; // 0x18
	public Vector3 rot; // 0x24
	public bool changeDirect; // 0x30
	public bool parentCamera; // 0x31
	public Action callback; // 0x38

	// Methods

	// RVA: 0x1107CC0 Offset: 0x1107CC0 VA: 0x1107CC0
	public void .ctor(int No, int tp, Vector3 pos, Vector3 rot, bool changeDirect = False, bool parentCamera = False, Action callback) { }
}

// Namespace: 
public class BattlePerformanceContinue : BaseMonoBehaviour // TypeDefIndex: 9280
{
	// Fields
	public PlayMakerFSM myFsm; // 0x18
	private BattlePerformance perf; // 0x20
	private BattleData data; // 0x28
	private BattleLogic logic; // 0x30
	private bool isProgress; // 0x38
	public BattleWindowComponent window; // 0x40
	public GameObject bg; // 0x48
	public GameObject giveUpWindow; // 0x50
	public UISprite giveUpBg; // 0x58
	public UISprite giveUpTitle; // 0x60
	public UILabel checkGiveUpLabel; // 0x68
	public UILabel giveUpContinueItemLabel; // 0x70
	public GameObject giveUpOkBtn; // 0x78
	public GameObject giveUpCancelBtn; // 0x80
	public GameObject giveUpContinueItemRoot; // 0x88
	public UILabel giveUpContinueItemNum; // 0x90
	public UISprite giveUpContinueItemSpr; // 0x98
	[SpaceAttribute] // RVA: 0xC66404 Offset: 0xC66404 VA: 0xC66404
	public GameObject commandspellObject; // 0xA0
	public UILabel commandspell_now; // 0xA8
	public UILabel stone_now; // 0xB0
	public UILabel checkUseCommandSpell; // 0xB8
	public UISprite commandSpellSprite; // 0xC0
	public UILabel stoneBtnLabel; // 0xC8
	[SpaceAttribute] // RVA: 0xC66418 Offset: 0xC66418 VA: 0xC66418
	public GameObject stoneObject; // 0xD0
	public UILabel gem_now; // 0xD8
	public UILabel checkUseGem; // 0xE0
	public GameObject nostoneObject; // 0xE8
	public UILabel checkUseBuyGem; // 0xF0
	public BattleWindowComponent useCheckWindow; // 0xF8
	public UILabel usecheckLabel; // 0x100
	public UILabel useCheckContinueItemLabel; // 0x108
	public BattleViewItemlistComponent itemWindow; // 0x110
	public int itemColumnCount; // 0x118
	public bool continueRetryFlg; // 0x11C
	private Color spellBtnColor; // 0x120
	private Color spellnowColor; // 0x130
	public GameObject ContinueItemWindow; // 0x140
	public UILabel ContinueCommandSpellNum; // 0x148
	public UILabel ContinueStoneNum; // 0x150
	public UILabel ContinueLabel; // 0x158
	public UILabel ContinueItemNumLabel; // 0x160
	public UISprite ContinueItemSpr; // 0x168
	public UILabel deadLine; // 0x170
	public GameObject ContinueItemBtn; // 0x178
	public UILabel ContinueItemBtnLabel; // 0x180
	public GameObject ContinueCommandSpellBtn; // 0x188
	public UILabel ContinueCommandSpellBtnLabel; // 0x190
	public GameObject ContinueStoneBtn; // 0x198
	public UILabel ContinueStoneBtnLabel; // 0x1A0
	public UILabel ContinueRetireBtnLabel; // 0x1A8
	private bool IsContinueItem; // 0x1B0
	private bool isShowDeadLineDialog; // 0x1B1
	[CompilerGeneratedAttribute] // RVA: 0xC6642C Offset: 0xC6642C VA: 0xC6642C
	[DebuggerBrowsableAttribute] // RVA: 0xC6642C Offset: 0xC6642C VA: 0xC6642C
	private bool <isDefenceTargetBroken>k__BackingField; // 0x1B2

	// Properties
	public bool isDefenceTargetBroken { get; set; }

	// Methods

	// RVA: 0x113A2DC Offset: 0x113A2DC VA: 0x113A2DC
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE4C8 Offset: 0xCCE4C8 VA: 0xCCE4C8
	// RVA: 0x113A384 Offset: 0x113A384 VA: 0x113A384
	public bool get_isDefenceTargetBroken() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE4D8 Offset: 0xCCE4D8 VA: 0xCCE4D8
	// RVA: 0x113A38C Offset: 0x113A38C VA: 0x113A38C
	private void set_isDefenceTargetBroken(bool value) { }

	// RVA: 0x113A398 Offset: 0x113A398 VA: 0x113A398
	public void Update() { }

	// RVA: 0x113A6B8 Offset: 0x113A6B8 VA: 0x113A6B8
	private void CallbackConfirmDialog(bool isDecide) { }

	// RVA: 0x113A7FC Offset: 0x113A7FC VA: 0x113A7FC
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x113AB20 Offset: 0x113AB20 VA: 0x113AB20
	private void refreshStoneNow(UserGameEntity userGame) { }

	// RVA: 0x113AC68 Offset: 0x113AC68 VA: 0x113AC68
	public void StartContinue(bool inIsProgress) { }

	// RVA: 0x113AF14 Offset: 0x113AF14 VA: 0x113AF14
	public void atlasLoadEnd() { }

	// RVA: 0x113AC90 Offset: 0x113AC90 VA: 0x113AC90
	public void StartContinueImpl(bool inIsProgress) { }

	// RVA: 0x113AFD4 Offset: 0x113AFD4 VA: 0x113AFD4
	private void ResetContinueItemInfo() { }

	// RVA: 0x113B030 Offset: 0x113B030 VA: 0x113B030
	public void showConf(BattleDropItem drop) { }

	// RVA: 0x113B034 Offset: 0x113B034 VA: 0x113B034
	public void OpenGiveUp() { }

	// RVA: 0x113B7F8 Offset: 0x113B7F8 VA: 0x113B7F8
	public void CloseGiveUp() { }

	// RVA: 0x113B87C Offset: 0x113B87C VA: 0x113B87C
	public void procNGGiveUpContinueItem() { }

	// RVA: 0x113B8EC Offset: 0x113B8EC VA: 0x113B8EC
	public void procOK() { }

	// RVA: 0x113BAEC Offset: 0x113BAEC VA: 0x113BAEC
	public void procNG() { }

	// RVA: 0x113BB88 Offset: 0x113BB88 VA: 0x113BB88
	public void endDialog(bool flg) { }

	// RVA: 0x113BC14 Offset: 0x113BC14 VA: 0x113BC14
	public void CheckContinueItem() { }

	// RVA: 0x113BCC8 Offset: 0x113BCC8 VA: 0x113BCC8
	public void OpenContinueItemWindow() { }

	// RVA: 0x113C58C Offset: 0x113C58C VA: 0x113C58C
	private void AttachStoneCountRefreshComponent() { }

	// RVA: 0x113C878 Offset: 0x113C878 VA: 0x113C878
	public void endOpenContinueItem() { }

	// RVA: 0x113C914 Offset: 0x113C914 VA: 0x113C914
	public void checkSpell() { }

	// RVA: 0x113C9C4 Offset: 0x113C9C4 VA: 0x113C9C4
	public void openSpell() { }

	// RVA: 0x113CCAC Offset: 0x113CCAC VA: 0x113CCAC
	public void endOpenSpell() { }

	// RVA: 0x113CD48 Offset: 0x113CD48 VA: 0x113CD48
	public void closeSpell() { }

	// RVA: 0x113CDF8 Offset: 0x113CDF8 VA: 0x113CDF8
	public void endCloseSpell() { }

	// RVA: 0x113CE98 Offset: 0x113CE98 VA: 0x113CE98
	public void connectSpell() { }

	// RVA: 0x113D27C Offset: 0x113D27C VA: 0x113D27C
	private void callbackContinueCommandSpell(string ret) { }

	// RVA: 0x113D2C8 Offset: 0x113D2C8 VA: 0x113D2C8
	public void callBackCommandSpell(string ret) { }

	// RVA: 0x113D3F4 Offset: 0x113D3F4 VA: 0x113D3F4
	public void openReTry() { }

	// RVA: 0x113D4F0 Offset: 0x113D4F0 VA: 0x113D4F0
	public void endRetryDialog(bool flg) { }

	// RVA: 0x113D554 Offset: 0x113D554 VA: 0x113D554
	public void procNGSpell() { }

	// RVA: 0x113D5C0 Offset: 0x113D5C0 VA: 0x113D5C0
	public void procSpell() { }

	// RVA: 0x113D6EC Offset: 0x113D6EC VA: 0x113D6EC
	protected void endLoadCommandSPell(AssetData aData) { }

	// RVA: 0x113DAE0 Offset: 0x113DAE0 VA: 0x113DAE0
	public void endSpell() { }

	// RVA: 0x113DBF8 Offset: 0x113DBF8 VA: 0x113DBF8
	public void checkStone() { }

	// RVA: 0x113DC98 Offset: 0x113DC98 VA: 0x113DC98
	public void openStone() { }

	// RVA: 0x113DD70 Offset: 0x113DD70 VA: 0x113DD70
	public void endOpenStone() { }

	// RVA: 0x113DE0C Offset: 0x113DE0C VA: 0x113DE0C
	public void closeStone() { }

	// RVA: 0x113DEBC Offset: 0x113DEBC VA: 0x113DEBC
	public void endCloseStone() { }

	// RVA: 0x113DF5C Offset: 0x113DF5C VA: 0x113DF5C
	public void connectStone() { }

	// RVA: 0x113E130 Offset: 0x113E130 VA: 0x113E130
	public void callBackStone(string ret) { }

	// RVA: 0x113E278 Offset: 0x113E278 VA: 0x113E278
	public void procNGStone() { }

	// RVA: 0x113E2E4 Offset: 0x113E2E4 VA: 0x113E2E4
	public void procStone() { }

	// RVA: 0x113E348 Offset: 0x113E348 VA: 0x113E348
	public void openNoStone() { }

	// RVA: 0x113E420 Offset: 0x113E420 VA: 0x113E420
	public void endOpenNoStone() { }

	// RVA: 0x113E4BC Offset: 0x113E4BC VA: 0x113E4BC
	public void closeNoStone() { }

	// RVA: 0x113E56C Offset: 0x113E56C VA: 0x113E56C
	public void endCloseNoStone() { }

	// RVA: 0x113E5F0 Offset: 0x113E5F0 VA: 0x113E5F0
	public void openStoneShop() { }

	// RVA: 0x113E6A0 Offset: 0x113E6A0 VA: 0x113E6A0
	public void callbaclStoneShop(StonePurchaseMenu.Result result) { }

	// RVA: 0x113E774 Offset: 0x113E774 VA: 0x113E774
	public void procNGNoStone() { }

	// RVA: 0x113A74C Offset: 0x113A74C VA: 0x113A74C
	public void closeContinueItem() { }

	// RVA: 0x113E7FC Offset: 0x113E7FC VA: 0x113E7FC
	public void endCloseContinueItem() { }

	// RVA: 0x113E89C Offset: 0x113E89C VA: 0x113E89C
	public void connectContinueItem() { }

	// RVA: 0x113EA84 Offset: 0x113EA84 VA: 0x113EA84
	public void callBackContinueItem(string ret) { }

	// RVA: 0x113EC10 Offset: 0x113EC10 VA: 0x113EC10
	public void procNGContinueItem() { }

	// RVA: 0x113EC7C Offset: 0x113EC7C VA: 0x113EC7C
	public void procContinueItem() { }

	// RVA: 0x113ECE0 Offset: 0x113ECE0 VA: 0x113ECE0
	public void openUseCheck(int type) { }

	// RVA: 0x113EEE8 Offset: 0x113EEE8 VA: 0x113EEE8
	public void endOpenUsecheck() { }

	// RVA: 0x113EF4C Offset: 0x113EF4C VA: 0x113EF4C
	public void closeUseCheck() { }

	// RVA: 0x113EF98 Offset: 0x113EF98 VA: 0x113EF98
	public void checkCountStone() { }

	// RVA: 0x113F02C Offset: 0x113F02C VA: 0x113F02C
	public void checkDeadLineStoneShopEnd() { }

	// RVA: 0x113D118 Offset: 0x113D118 VA: 0x113D118
	private void SkipCommandSpellRequest() { }

	// RVA: 0x113F1F8 Offset: 0x113F1F8 VA: 0x113F1F8
	public void CheckDefenceTargetBroken() { }

	// RVA: 0x113F368 Offset: 0x113F368 VA: 0x113F368
	public void OpenBrokenMessage() { }

	// RVA: 0x113F4B4 Offset: 0x113F4B4 VA: 0x113F4B4
	public void EndContinue() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE4E8 Offset: 0xCCE4E8 VA: 0xCCE4E8
	// RVA: 0x113F4F4 Offset: 0x113F4F4 VA: 0x113F4F4
	public IEnumerator CoEndContinue() { }

	// RVA: 0x113C62C Offset: 0x113C62C VA: 0x113C62C
	private void SetContinueMessage(UILabel label, string localizationKey, int stoneCount = -2147483648) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE4F8 Offset: 0xCCE4F8 VA: 0xCCE4F8
	// RVA: 0x113F56C Offset: 0x113F56C VA: 0x113F56C
	private void <AttachStoneCountRefreshComponent>m__0(int stoneCount) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE508 Offset: 0xCCE508 VA: 0xCCE508
	// RVA: 0x113F8DC Offset: 0x113F8DC VA: 0x113F8DC
	private void <CheckDefenceTargetBroken>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE518 Offset: 0xCCE518 VA: 0xCCE518
	// RVA: 0x113F940 Offset: 0x113F940 VA: 0x113F940
	private void <OpenBrokenMessage>m__2() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC443F4 Offset: 0xC443F4 VA: 0xC443F4
private sealed class BattlePerformanceContinue.<CoEndContinue>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9281
{
	// Fields
	internal float <timer>__0; // 0x10
	internal NGUIFader <fadeComp>__0; // 0x18
	internal BattlePerformanceContinue $this; // 0x20
	internal object $current; // 0x28
	internal bool $disposing; // 0x30
	internal int $PC; // 0x34

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBAE0 Offset: 0xCDBAE0 VA: 0xCDBAE0
	// RVA: 0x113F564 Offset: 0x113F564 VA: 0x113F564
	public void .ctor() { }

	// RVA: 0x113F9A4 Offset: 0x113F9A4 VA: 0x113F9A4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBAF0 Offset: 0xCDBAF0 VA: 0xCDBAF0
	// RVA: 0x113FB1C Offset: 0x113FB1C VA: 0x113FB1C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB00 Offset: 0xCDBB00 VA: 0xCDBB00
	// RVA: 0x113FB24 Offset: 0x113FB24 VA: 0x113FB24 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB10 Offset: 0xCDBB10 VA: 0xCDBB10
	// RVA: 0x113FB2C Offset: 0x113FB2C VA: 0x113FB2C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB20 Offset: 0xCDBB20 VA: 0xCDBB20
	// RVA: 0x113FB40 Offset: 0x113FB40 VA: 0x113FB40 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePerformanceDefenceTarget : BaseMonoBehaviour // TypeDefIndex: 9282
{
	// Fields
	[SerializeField] // RVA: 0xC66468 Offset: 0xC66468 VA: 0xC66468
	private UISprite icon; // 0x18
	[SerializeField] // RVA: 0xC66478 Offset: 0xC66478 VA: 0xC66478
	private UILabel name; // 0x20
	[SerializeField] // RVA: 0xC66488 Offset: 0xC66488 VA: 0xC66488
	private BattleServantShowBuffComponent showBuff; // 0x28
	[SerializeField] // RVA: 0xC66498 Offset: 0xC66498 VA: 0xC66498
	private BattleDefenceTargetHpGaugeComponent hpGauge; // 0x30
	[SerializeField] // RVA: 0xC664A8 Offset: 0xC664A8 VA: 0xC664A8
	private string moveToTacticalPhaseName; // 0x38
	[SerializeField] // RVA: 0xC664B8 Offset: 0xC664B8 VA: 0xC664B8
	private string moveToCommandCardName; // 0x40
	private bool isInitialized; // 0x48
	private Animation animation; // 0x50
	public bool isBattlePhaseEnd; // 0x58
	public bool isContinue; // 0x59

	// Methods

	// RVA: 0x113FBA8 Offset: 0x113FBA8 VA: 0x113FBA8
	public void .ctor() { }

	// RVA: 0x113FBB0 Offset: 0x113FBB0 VA: 0x113FBB0
	public void SetData(int nowHp, int maxHp, int uiId) { }

	// RVA: 0x113FD64 Offset: 0x113FD64 VA: 0x113FD64
	private void SetIcon(int uiId) { }

	// RVA: 0x113FED8 Offset: 0x113FED8 VA: 0x113FED8
	public void UpdateHpGauge(int nowHp) { }

	// RVA: 0x113FF10 Offset: 0x113FF10 VA: 0x113FF10
	public void UpdateBuffIcon(BattleBuffData.ShowBuffData[] buffArray) { }

	// RVA: 0x113FF48 Offset: 0x113FF48 VA: 0x113FF48
	public void UpdateUIPotition(BattlePerformanceDefenceTarget.MoveToPositionType position) { }

	// RVA: 0x113FD20 Offset: 0x113FD20 VA: 0x113FD20
	public void SetDefenceTargetActive() { }

	// RVA: 0x1140190 Offset: 0x1140190 VA: 0x1140190
	public void SetHpGauge(int nowHp) { }
}

// Namespace: 
public enum BattlePerformanceDefenceTarget.MoveToPositionType // TypeDefIndex: 9283
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceDefenceTarget.MoveToPositionType TACTICAL_PHASE = 0;
	public const BattlePerformanceDefenceTarget.MoveToPositionType COMMAND_CARD = 1;
	public const BattlePerformanceDefenceTarget.MoveToPositionType BATTLE_PHASE = 2;
}

// Namespace: 
public class BaseEnemyParamPosData // TypeDefIndex: 9284
{
	// Properties
	public virtual Vector3 NormalTrLocalPos { get; }
	public virtual Vector3 NormalTrLocalScale { get; }
	public virtual int BuffIconMaxLine { get; }

	// Methods

	// RVA: 0xF66DB8 Offset: 0xF66DB8 VA: 0xF66DB8
	public void .ctor() { }

	// RVA: 0xF66DC0 Offset: 0xF66DC0 VA: 0xF66DC0 Slot: 4
	public virtual Vector3 get_NormalTrLocalPos() { }

	// RVA: 0xF66E20 Offset: 0xF66E20 VA: 0xF66E20 Slot: 5
	public virtual Vector3 get_NormalTrLocalScale() { }

	// RVA: 0xF66E80 Offset: 0xF66E80 VA: 0xF66E80 Slot: 6
	public virtual Vector3 GetSvtBuffLocalPos(Vector3 defPos) { }

	// RVA: 0xF66E84 Offset: 0xF66E84 VA: 0xF66E84 Slot: 7
	public virtual int get_BuffIconMaxLine() { }
}

// Namespace: 
public class PosCountNormalEnemyParamPosData : BaseEnemyParamPosData // TypeDefIndex: 9285
{
	// Fields
	private const float SVT_BUFF_LOCAL_POS_Y = -35;

	// Methods

	// RVA: 0x12C9B98 Offset: 0x12C9B98 VA: 0x12C9B98
	public void .ctor() { }

	// RVA: 0x12C9BA0 Offset: 0x12C9BA0 VA: 0x12C9BA0 Slot: 6
	public override Vector3 GetSvtBuffLocalPos(Vector3 defPos) { }
}

// Namespace: 
public class PosCountSpEnemyParamPosData : BaseEnemyParamPosData // TypeDefIndex: 9286
{
	// Fields
	private const float SVT_BUFF_LOCAL_POS_Y = -33;

	// Properties
	public override Vector3 NormalTrLocalPos { get; }
	public override Vector3 NormalTrLocalScale { get; }
	public override int BuffIconMaxLine { get; }

	// Methods

	// RVA: 0x12C9CDC Offset: 0x12C9CDC VA: 0x12C9CDC
	public void .ctor() { }

	// RVA: 0x12C9CE4 Offset: 0x12C9CE4 VA: 0x12C9CE4 Slot: 4
	public override Vector3 get_NormalTrLocalPos() { }

	// RVA: 0x12C9D28 Offset: 0x12C9D28 VA: 0x12C9D28 Slot: 5
	public override Vector3 get_NormalTrLocalScale() { }

	// RVA: 0x12C9D6C Offset: 0x12C9D6C VA: 0x12C9D6C Slot: 6
	public override Vector3 GetSvtBuffLocalPos(Vector3 defPos) { }

	// RVA: 0x12C9D78 Offset: 0x12C9D78 VA: 0x12C9D78 Slot: 7
	public override int get_BuffIconMaxLine() { }
}

// Namespace: 
public class BattlePerformanceEnemy : MonoBehaviour // TypeDefIndex: 9287
{
	// Fields
	private BattlePerformance perf; // 0x18
	private BattleData bdata; // 0x20
	public BattleServantHeadUpComponent[] svtHeadUpList; // 0x28
	public BattleServantParamComponent[] svtParamList; // 0x30
	public Transform nomalTr; // 0x38
	public Transform raidTr; // 0x40
	public Transform superBossTr; // 0x48
	private float raidY; // 0x50
	public BattleServantRaidParamComponent raidParam; // 0x58
	public BattleServantSuperBossParamComponent superbossParam; // 0x60
	private int[] list_ID; // 0x68
	private GameObject[] list_actor; // 0x70

	// Methods

	// RVA: 0x11401C8 Offset: 0x11401C8 VA: 0x11401C8
	public void .ctor() { }

	// RVA: 0x1140230 Offset: 0x1140230 VA: 0x1140230
	public void updateView() { }

	// RVA: 0x114055C Offset: 0x114055C VA: 0x114055C
	public void updateBuff() { }

	// RVA: 0x1140560 Offset: 0x1140560 VA: 0x1140560
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x11406A4 Offset: 0x11406A4 VA: 0x11406A4
	public void setWinView() { }

	// RVA: 0x114078C Offset: 0x114078C VA: 0x114078C
	public void deleteStatus(int index) { }

	// RVA: 0x1140A1C Offset: 0x1140A1C VA: 0x1140A1C
	public void setParamPosition() { }

	// RVA: 0x1140DE8 Offset: 0x1140DE8 VA: 0x1140DE8
	protected BaseEnemyParamPosData MakeEnemyParamPosData() { }

	// RVA: 0x1140E88 Offset: 0x1140E88 VA: 0x1140E88
	public bool ExistsFrontRow() { }

	// RVA: 0x1140F80 Offset: 0x1140F80 VA: 0x1140F80
	public bool ExistsFieldNormalEnemy() { }

	// RVA: 0x1141090 Offset: 0x1141090 VA: 0x1141090
	private void SetNormalEnemyStatusUI(int index, BattleServantData svtdata, GameObject target) { }

	// RVA: 0x1141548 Offset: 0x1141548 VA: 0x1141548
	public void setParam(int index, BattleServantData svtdata, GameObject target) { }

	// RVA: 0x11412D0 Offset: 0x11412D0 VA: 0x11412D0
	private void setTargetIcon(BattleServantData svtdata, GameObject target, int index) { }

	// RVA: 0x1141A10 Offset: 0x1141A10 VA: 0x1141A10
	public void setTarget(BattleServantData svtData) { }

	// RVA: 0x1141C3C Offset: 0x1141C3C VA: 0x1141C3C
	public void setOffTarget() { }

	// RVA: 0x1141DA4 Offset: 0x1141DA4 VA: 0x1141DA4
	public void updateRaidInfos(BattleRaidInfo[] infos, bool fixUpdate) { }

	// RVA: 0x1141E98 Offset: 0x1141E98 VA: 0x1141E98
	public bool checkRaidUpdateHp() { }

	// RVA: 0x1141EC8 Offset: 0x1141EC8 VA: 0x1141EC8
	public void updateRaidHp() { }

	// RVA: 0x1141EF8 Offset: 0x1141EF8 VA: 0x1141EF8
	public void updateSuperBossInfos(BattleSuperBossInfo[] infos, bool fixUpdate) { }

	// RVA: 0x1141FEC Offset: 0x1141FEC VA: 0x1141FEC
	public long getTurnSituationParam() { }

	// RVA: 0x114201C Offset: 0x114201C VA: 0x114201C
	public void startWave() { }

	// RVA: 0x11420B8 Offset: 0x11420B8 VA: 0x11420B8
	public void startCommand() { }

	// RVA: 0x1142154 Offset: 0x1142154 VA: 0x1142154
	public void startTac() { }

	// RVA: 0x11421F0 Offset: 0x11421F0 VA: 0x11421F0
	public void startAction() { }

	// RVA: 0x114228C Offset: 0x114228C VA: 0x114228C
	public void startSkill() { }

	// RVA: 0x114232C Offset: 0x114232C VA: 0x114232C
	public void endSkill() { }

	// RVA: 0x11423CC Offset: 0x11423CC VA: 0x11423CC
	public void updateStateString() { }

	// RVA: 0x11423FC Offset: 0x11423FC VA: 0x11423FC
	public void playShiftEffectBefore(int uniqueId) { }

	// RVA: 0x11424F8 Offset: 0x11424F8 VA: 0x11424F8
	public void playShiftEffect(int uniqueId) { }

	// RVA: 0x11425F4 Offset: 0x11425F4 VA: 0x11425F4
	public void playAddition() { }

	// RVA: 0x1142690 Offset: 0x1142690 VA: 0x1142690
	public void showSideEffect(BattleActionData.BuffData buffData) { }

	// RVA: 0x114284C Offset: 0x114284C VA: 0x114284C
	public BattleServantParamComponent GetSvtParamComponent(int uniqueId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44404 Offset: 0xC44404 VA: 0xC44404
private sealed class BattlePerformanceEnemy.<GetSvtParamComponent>c__AnonStorey0 // TypeDefIndex: 9288
{
	// Fields
	internal int uniqueId; // 0x10

	// Methods

	// RVA: 0x1142910 Offset: 0x1142910 VA: 0x1142910
	public void .ctor() { }

	// RVA: 0x1142918 Offset: 0x1142918 VA: 0x1142918
	internal bool <>m__0(BattleServantParamComponent x) { }
}

// Namespace: 
public class BattlePerformanceEnemyMst : BaseMonoBehaviour // TypeDefIndex: 9289
{
	// Fields
	private static readonly string MASTER_FACE_ASSET_NAME; // 0x0
	private static readonly string MASTER_FACE_TEXTURE_NAME; // 0x8
	private static readonly string MASTER_VOICE_ASSET_NAME; // 0x10
	public BattleData data; // 0x18
	public GameObject masterRoot; // 0x20
	public CommandSpellIconComponent commandSpellIcon; // 0x28
	public UITexture faceText; // 0x30
	private const float alphatime = 0.15;
	private const float appeartime = 0.1;
	private AssetData mstFaceAssets; // 0x38
	private bool isLongTap; // 0x40
	private BattlePerformanceEnemyMst.loadState loadStat; // 0x44
	private string loadVoiceAsset; // 0x48

	// Methods

	// RVA: 0x1142950 Offset: 0x1142950 VA: 0x1142950
	public void .ctor() { }

	// RVA: 0x1142958 Offset: 0x1142958 VA: 0x1142958
	public void OnDestroy() { }

	// RVA: 0x1142C0C Offset: 0x1142C0C VA: 0x1142C0C
	public void Initialize(BattleData indata) { }

	// RVA: 0x1142C14 Offset: 0x1142C14 VA: 0x1142C14
	public void loadData() { }

	// RVA: 0x1142E18 Offset: 0x1142E18 VA: 0x1142E18
	public void updateCommandSpellIcon() { }

	// RVA: 0x1142EBC Offset: 0x1142EBC VA: 0x1142EBC
	public void SetRootActive(bool status) { }

	// RVA: 0x1142F6C Offset: 0x1142F6C VA: 0x1142F6C
	private void loadMasterFace(int mstFaceId) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCE528 Offset: 0xCCE528 VA: 0xCCE528
	// RVA: 0x1143028 Offset: 0x1143028 VA: 0x1143028
	private IEnumerator LoadAssetCoroutine(int mstFaceId) { }

	// RVA: 0x114297C Offset: 0x114297C VA: 0x114297C
	private void releaseMasterFace() { }

	// RVA: 0x1142B94 Offset: 0x1142B94 VA: 0x1142B94
	private void releaseMasterVoice() { }

	// RVA: 0x11430C4 Offset: 0x11430C4 VA: 0x11430C4
	private string getAssetName(int id) { }

	// RVA: 0x1143188 Offset: 0x1143188 VA: 0x1143188
	private string getTextureName(int id) { }

	// RVA: 0x1142D54 Offset: 0x1142D54 VA: 0x1142D54
	private string getVoiceAssetName(int id) { }

	// RVA: 0x114324C Offset: 0x114324C VA: 0x114324C
	public bool IsLoading() { }

	// RVA: 0x114325C Offset: 0x114325C VA: 0x114325C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE538 Offset: 0xCCE538 VA: 0xCCE538
	// RVA: 0x11432E4 Offset: 0x11432E4 VA: 0x11432E4
	private void <loadData>m__0() { }
}

// Namespace: 
private enum BattlePerformanceEnemyMst.loadState // TypeDefIndex: 9290
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceEnemyMst.loadState NONE = 0;
	public const BattlePerformanceEnemyMst.loadState VOICE = 1;
	public const BattlePerformanceEnemyMst.loadState FACE = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44414 Offset: 0xC44414 VA: 0xC44414
private sealed class BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9291
{
	// Fields
	internal int mstFaceId; // 0x10
	internal bool <loadable>__0; // 0x14
	internal BattlePerformanceEnemyMst $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C
	private BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0.<LoadAssetCoroutine>c__AnonStorey1 $locvar0; // 0x30

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDBB30 Offset: 0xCDBB30 VA: 0xCDBB30
	// RVA: 0x11430BC Offset: 0x11430BC VA: 0x11430BC
	public void .ctor() { }

	// RVA: 0x1143330 Offset: 0x1143330 VA: 0x1143330 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB40 Offset: 0xCDBB40 VA: 0xCDBB40
	// RVA: 0x11434EC Offset: 0x11434EC VA: 0x11434EC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB50 Offset: 0xCDBB50 VA: 0xCDBB50
	// RVA: 0x11434F4 Offset: 0x11434F4 VA: 0x11434F4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB60 Offset: 0xCDBB60 VA: 0xCDBB60
	// RVA: 0x11434FC Offset: 0x11434FC VA: 0x11434FC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDBB70 Offset: 0xCDBB70 VA: 0xCDBB70
	// RVA: 0x1143510 Offset: 0x1143510 VA: 0x1143510 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0.<LoadAssetCoroutine>c__AnonStorey1 // TypeDefIndex: 9292
{
	// Fields
	internal int mstFaceId; // 0x10
	internal BattlePerformanceEnemyMst.<LoadAssetCoroutine>c__Iterator0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x11434E4 Offset: 0x11434E4 VA: 0x11434E4
	public void .ctor() { }

	// RVA: 0x1143578 Offset: 0x1143578 VA: 0x1143578
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public class BattlePerformanceInfoComponent : BaseMonoBehaviour // TypeDefIndex: 9293
{
	// Fields
	public UILabel nokoriEnemyCountLabel; // 0x18
	public UISprite stockPSrpite; // 0x20
	public UISprite stockPPSrpite; // 0x28
	public UISprite stockSprite; // 0x30
	public UILabel stockLabel; // 0x38
	public GameObject stockEffectPrefab; // 0x40
	public GameObject stockBg; // 0x48
	public GameObject waveShowObject; // 0x50
	public UILabel nowWaveLabel; // 0x58
	public UILabel maxWaveLabel; // 0x60
	public UILabel slashLabel; // 0x68
	public GameObject nokoriTurnObject; // 0x70
	public UILabel nokoriTurnLabel; // 0x78
	public float AdjustY; // 0x80
	public GameObject nokoriTimeObject; // 0x88
	public UILabel nokoriTimeLabel; // 0x90
	public UISprite battleBackGround; // 0x98
	public GameObject battleSpr; // 0xA0
	public GameObject enemyRoot; // 0xA8
	public UISprite enemySpr; // 0xB0
	public UISprite enemyBackGround; // 0xB8
	public UILabel enemyLabel; // 0xC0
	public GameObject turnRoot; // 0xC8
	public UISprite turnSpr; // 0xD0
	public UISprite turnBackGround; // 0xD8
	public UILabel turnLabel; // 0xE0
	public GameObject itemRoot; // 0xE8
	public UISprite itemSpr; // 0xF0
	public UILabel itemLabel; // 0xF8
	private int stockIndex; // 0x100
	private bool isUpdateTimer; // 0x104
	private int eventId; // 0x108
	private long remaingTimeSeconds; // 0x110
	private long lastCheckTime; // 0x118
	private Vector3 timeDefPos; // 0x120
	private static int[] raritylist; // 0x0

	// Methods

	// RVA: 0x1143750 Offset: 0x1143750 VA: 0x1143750
	public void .ctor() { }

	// RVA: 0x1143760 Offset: 0x1143760 VA: 0x1143760
	public void Initialize() { }

	// RVA: 0x1143B80 Offset: 0x1143B80 VA: 0x1143B80
	public void setQuest(BattleData data) { }

	// RVA: 0x1144718 Offset: 0x1144718 VA: 0x1144718
	public void setShowTurn(BattleData bdata, int addturn) { }

	// RVA: 0x1144948 Offset: 0x1144948 VA: 0x1144948
	public void setShowLimitTurn(int now, int limit, BattleData bdata) { }

	// RVA: 0x1144B5C Offset: 0x1144B5C VA: 0x1144B5C
	public void setShowElapsedTurn(int state, int now) { }

	// RVA: 0x1144D74 Offset: 0x1144D74 VA: 0x1144D74
	private void Update() { }

	// RVA: 0x1144D84 Offset: 0x1144D84 VA: 0x1144D84
	private void updateTime() { }

	// RVA: 0x1144448 Offset: 0x1144448 VA: 0x1144448
	private void drawTime(long showTimeSeconds) { }

	// RVA: 0x1144E98 Offset: 0x1144E98 VA: 0x1144E98
	public void updateNokoriEnemyCount(BattleData bData) { }

	// RVA: 0x1145104 Offset: 0x1145104 VA: 0x1145104
	public void setShowWave(int now, int max) { }

	// RVA: 0x1145288 Offset: 0x1145288 VA: 0x1145288
	public void updateDropItemCount(BattleData bData) { }

	// RVA: 0x11439C0 Offset: 0x11439C0 VA: 0x11439C0
	public void setStockSprite(int index) { }

	// RVA: 0x1145644 Offset: 0x1145644 VA: 0x1145644
	public void ClearBattleInfo() { }

	// RVA: 0x114567C Offset: 0x114567C VA: 0x114567C
	private static void .cctor() { }
}

// Namespace: 
public class BattlePerformanceMaster : BaseMonoBehaviour // TypeDefIndex: 9294
{
	// Fields
	private static readonly string MASTER_SKILL_BUTTON_SP_NAME; // 0x0
	public PlayMakerFSM myFsm; // 0x18
	public PlayMakerFSM otherFsm; // 0x20
	public BattlePerformance perf; // 0x28
	public BattleLogic logic; // 0x30
	public BattleData data; // 0x38
	public BattleMasterSkillWindowComponent win_Skill; // 0x40
	public CommandSpellWindowComponent win_Spell; // 0x48
	public BattleMenuWindowComponent win_Menu; // 0x50
	public BattleRetireWindowComponent win_Retire; // 0x58
	public BattleServantConfConponent win_EnemyConf; // 0x60
	public BattleServantConfConponent warBoard_win_EnemyConf; // 0x68
	public GameObject master_root; // 0x70
	public GameObject skillBtn; // 0x78
	public GameObject menuBtn; // 0x80
	public GameObject spellBtn; // 0x88
	public GameObject masterBtn; // 0x90
	public UISprite skillSkipBtn; // 0x98
	public UISprite tdConstBtn; // 0xA0
	public UISprite skipDeadBtn; // 0xA8
	public UISprite skillBtnSp; // 0xB0
	public CommandSpellIconComponent commandSpellIcon; // 0xB8
	public GameObject face_root; // 0xC0
	public GameObject userGrade; // 0xC8
	public GameObject spellSpr; // 0xD0
	public BattleSkillConfComponent skillConfWindow; // 0xD8
	public BattleServantSkillIConComponent skillIconPrefab; // 0xE0
