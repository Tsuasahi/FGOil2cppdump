	public void procOpenSkillConf() { }

	// RVA: 0x16C6200 Offset: 0x16C6200 VA: 0x16C6200
	public void OpenSkillConfComplete() { }

	// RVA: 0x16C6264 Offset: 0x16C6264 VA: 0x16C6264
	public void procCloseSkillConf() { }

	// RVA: 0x16C6324 Offset: 0x16C6324 VA: 0x16C6324
	public void CloseSkillConfComp() { }

	// RVA: 0x16C6388 Offset: 0x16C6388 VA: 0x16C6388
	public void clickBoostSkillIcon(BattleSkillInfoData skillInfo) { }

	// RVA: 0x16C641C Offset: 0x16C641C VA: 0x16C641C
	public void procOpenBoostSkillConf() { }

	// RVA: 0x16C6510 Offset: 0x16C6510 VA: 0x16C6510
	public void OpenBoostSkillConfComplete() { }

	// RVA: 0x16C6574 Offset: 0x16C6574 VA: 0x16C6574
	public void procCloseBoostSkillConf() { }

	// RVA: 0x16C6634 Offset: 0x16C6634 VA: 0x16C6634
	public void CloseBoostSkillConfComp() { }

	// RVA: 0x16C6698 Offset: 0x16C6698 VA: 0x16C6698
	public void flashBoostSkillIcon() { }

	// RVA: 0x16C66C8 Offset: 0x16C66C8 VA: 0x16C66C8
	public void clickSkillIcon(BattleSkillInfoData skillInfo, bool isLong) { }

	// RVA: 0x16C6798 Offset: 0x16C6798 VA: 0x16C6798
	public void UseSkill(bool playSe) { }

	// RVA: 0x16C6C88 Offset: 0x16C6C88 VA: 0x16C6C88
	public void openSkillSelectSvtWindow() { }

	// RVA: 0x16C6DB8 Offset: 0x16C6DB8 VA: 0x16C6DB8
	public void onClickSkillOK(BattleSkillInfoData skillInfo) { }

	// RVA: 0x16C6E4C Offset: 0x16C6E4C VA: 0x16C6E4C
	public void onClickSkillCancel() { }

	// RVA: 0x16C6EB0 Offset: 0x16C6EB0 VA: 0x16C6EB0
	public void selectedSkillSvt(int uniqueId) { }

	// RVA: 0x16C6A40 Offset: 0x16C6A40 VA: 0x16C6A40
	public void openSkillSelectMainSubSvtWindow() { }

	// RVA: 0x16C7214 Offset: 0x16C7214 VA: 0x16C7214
	public void callBackSelectedMainSub(bool flg, int mainUniqueId, int subUniqueId) { }

	// RVA: 0x16C7324 Offset: 0x16C7324 VA: 0x16C7324
	public void endSelectSvtError(bool flg) { }

	// RVA: 0x16C73B0 Offset: 0x16C73B0 VA: 0x16C73B0
	public void procOpenMenuWindow() { }

	// RVA: 0x16C74D0 Offset: 0x16C74D0 VA: 0x16C74D0
	public void compOpenMenu() { }

	// RVA: 0x16C7540 Offset: 0x16C7540 VA: 0x16C7540
	public void procCloseMenuWindow() { }

	// RVA: 0x16C7608 Offset: 0x16C7608 VA: 0x16C7608
	public void compCloseMenu() { }

	// RVA: 0x16C7678 Offset: 0x16C7678 VA: 0x16C7678
	public void changeShortSkill() { }

	// RVA: 0x16C3450 Offset: 0x16C3450 VA: 0x16C3450
	public void updateShortSkill() { }

	// RVA: 0x16C7718 Offset: 0x16C7718 VA: 0x16C7718
	public void changeTdConstantVelocity() { }

	// RVA: 0x16C34DC Offset: 0x16C34DC VA: 0x16C34DC
	public void updateTdConstantVelocity() { }

	// RVA: 0x16C77B8 Offset: 0x16C77B8 VA: 0x16C77B8
	public void changeSkipDead() { }

	// RVA: 0x16C3568 Offset: 0x16C3568 VA: 0x16C3568
	public void updateSkipDead() { }

	// RVA: 0x16C7858 Offset: 0x16C7858 VA: 0x16C7858
	public void startSkill(int type = 0) { }

	// RVA: 0x16C78E0 Offset: 0x16C78E0 VA: 0x16C78E0
	public void endSkill() { }

	// RVA: 0x16C794C Offset: 0x16C794C VA: 0x16C794C
	public void showRetireDialog() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BB1C Offset: 0xD3BB1C VA: 0xD3BB1C
	// RVA: 0x16C7AA0 Offset: 0x16C7AA0 VA: 0x16C7AA0
	private IEnumerator openRetireDialog() { }

	// RVA: 0x16C7B18 Offset: 0x16C7B18 VA: 0x16C7B18
	public void retRetireDialog(bool flg) { }

	// RVA: 0x16C7BA4 Offset: 0x16C7BA4 VA: 0x16C7BA4
	public void procCloseAll() { }

	// RVA: 0x16C7D64 Offset: 0x16C7D64 VA: 0x16C7D64
	public void startCommand() { }

	// RVA: 0x16C7DC8 Offset: 0x16C7DC8 VA: 0x16C7DC8
	public void modeCom() { }

	// RVA: 0x16C50AC Offset: 0x16C50AC VA: 0x16C50AC
	public void proclight(GameObject obj, bool flg) { }

	// RVA: 0x16C7EF8 Offset: 0x16C7EF8 VA: 0x16C7EF8
	public void checkTutorial() { }

	// RVA: 0x16C7F90 Offset: 0x16C7F90 VA: 0x16C7F90
	public bool isWinMenuWindowOpenOrOpening() { }

	// RVA: 0x16C7FC0 Offset: 0x16C7FC0 VA: 0x16C7FC0
	public bool isWinSpellWindowOpenOrOpening() { }

	// RVA: 0x16C7FF0 Offset: 0x16C7FF0 VA: 0x16C7FF0
	public bool isCloseEnemyConf() { }

	// RVA: 0x16C806C Offset: 0x16C806C VA: 0x16C806C
	public void showEnemyServant(int index) { }

	// RVA: 0x16C80E0 Offset: 0x16C80E0 VA: 0x16C80E0
	public void procOpenEnemyConf() { }

	// RVA: 0x16C824C Offset: 0x16C824C VA: 0x16C824C
	public void compOpenEnemyConf() { }

	// RVA: 0x16C82B0 Offset: 0x16C82B0 VA: 0x16C82B0
	public void onCloseEnemyServantConf() { }

	// RVA: 0x16C8314 Offset: 0x16C8314 VA: 0x16C8314
	public void procCloseEnemyConf() { }

	// RVA: 0x16C83EC Offset: 0x16C83EC VA: 0x16C83EC
	public void compCloseEnemyConf() { }

	// RVA: 0x16C8450 Offset: 0x16C8450 VA: 0x16C8450
	public void onClickSpellButton() { }

	// RVA: 0x16C85AC Offset: 0x16C85AC VA: 0x16C85AC
	public void onClickMenuButton() { }

	// RVA: 0x16C865C Offset: 0x16C865C VA: 0x16C865C
	public void setMasterBuffEffectData(string popLabel, int popLabelColor, int[] effectList) { }

	// RVA: 0x16C866C Offset: 0x16C866C VA: 0x16C866C
	public void startMasterBuffEffect() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BB2C Offset: 0xD3BB2C VA: 0xD3BB2C
	// RVA: 0x16C8FAC Offset: 0x16C8FAC VA: 0x16C8FAC
	private IEnumerator waitMasterBuffEffect(float waitTime) { }

	// RVA: 0x16C4DD4 Offset: 0x16C4DD4 VA: 0x16C4DD4
	public void endMasterBuffEffect(UIWidget widget) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BB3C Offset: 0xD3BB3C VA: 0xD3BB3C
	// RVA: 0x16C9048 Offset: 0x16C9048 VA: 0x16C9048
	public IEnumerator endMasterBuffEffectFadeOut() { }

	// RVA: 0x16C90C0 Offset: 0x16C90C0 VA: 0x16C90C0
	private void procOpenItemListWindow() { }

	// RVA: 0x16C91E4 Offset: 0x16C91E4 VA: 0x16C91E4
	private void compOpenItemListWindow() { }

	// RVA: 0x16C9248 Offset: 0x16C9248 VA: 0x16C9248
	public void OpenRetireWindowSA() { }

	// RVA: 0x16C92AC Offset: 0x16C92AC VA: 0x16C92AC
	private void ShowRetireSA() { }

	// RVA: 0x16C9368 Offset: 0x16C9368 VA: 0x16C9368
	private void OnCompShowRetireSA() { }

	// RVA: 0x16C93CC Offset: 0x16C93CC VA: 0x16C93CC
	private void CloseRetireSA() { }

	// RVA: 0x16C9460 Offset: 0x16C9460 VA: 0x16C9460
	private void OnCompCloseRetireSA() { }

	// RVA: 0x16C94C4 Offset: 0x16C94C4 VA: 0x16C94C4
	public bool IsTacticalPhaseWait() { }

	// RVA: 0x16C954C Offset: 0x16C954C VA: 0x16C954C
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB4C Offset: 0xD3BB4C VA: 0xD3BB4C
	// RVA: 0x16C95A8 Offset: 0x16C95A8 VA: 0x16C95A8
	private static bool <updateSkillIcon>m__0(string x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB5C Offset: 0xD3BB5C VA: 0xD3BB5C
	// RVA: 0x16C961C Offset: 0x16C961C VA: 0x16C961C
	private static bool <updateSkillIcon>m__1(string x) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB6C Offset: 0xD3BB6C VA: 0xD3BB6C
	// RVA: 0x16C9690 Offset: 0x16C9690 VA: 0x16C9690
	private static void <selectedSvt>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB7C Offset: 0xD3BB7C VA: 0xD3BB7C
	// RVA: 0x16C9694 Offset: 0x16C9694 VA: 0x16C9694
	private static void <selectedSkillSvt>m__3() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB04C0 Offset: 0xCB04C0 VA: 0xCB04C0
private sealed class BattlePerformanceMaster.<Initialize>c__AnonStorey3 // TypeDefIndex: 9269
{
	// Fields
	internal string flashPrefabName; // 0x10

	// Methods

	// RVA: 0x16C3448 Offset: 0x16C3448 VA: 0x16C3448
	public void .ctor() { }

	// RVA: 0x16C9698 Offset: 0x16C9698 VA: 0x16C9698
	internal bool <>m__0(GameObject x) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB04D0 Offset: 0xCB04D0 VA: 0xCB04D0
private sealed class BattlePerformanceMaster.<openRetireDialog>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9270
{
	// Fields
	internal BattlePerformanceMaster $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48DF4 Offset: 0xD48DF4 VA: 0xD48DF4
	// RVA: 0x16C7B10 Offset: 0x16C7B10 VA: 0x16C7B10
	public void .ctor() { }

	// RVA: 0x16C9A90 Offset: 0x16C9A90 VA: 0x16C9A90 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E04 Offset: 0xD48E04 VA: 0xD48E04
	// RVA: 0x16C9BD4 Offset: 0x16C9BD4 VA: 0x16C9BD4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E14 Offset: 0xD48E14 VA: 0xD48E14
	// RVA: 0x16C9BDC Offset: 0x16C9BDC VA: 0x16C9BDC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E24 Offset: 0xD48E24 VA: 0xD48E24
	// RVA: 0x16C9BE4 Offset: 0x16C9BE4 VA: 0x16C9BE4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E34 Offset: 0xD48E34 VA: 0xD48E34
	// RVA: 0x16C9BF8 Offset: 0x16C9BF8 VA: 0x16C9BF8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB04E0 Offset: 0xCB04E0 VA: 0xCB04E0
private sealed class BattlePerformanceMaster.<startMasterBuffEffect>c__AnonStorey4 // TypeDefIndex: 9271
{
	// Fields
	internal float waitTime; // 0x10
	internal BattlePerformanceMaster $this; // 0x18

	// Methods

	// RVA: 0x16C8FA4 Offset: 0x16C8FA4 VA: 0x16C8FA4
	public void .ctor() { }

	// RVA: 0x16C9C60 Offset: 0x16C9C60 VA: 0x16C9C60
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB04F0 Offset: 0xCB04F0 VA: 0xCB04F0
private sealed class BattlePerformanceMaster.<waitMasterBuffEffect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9272
{
	// Fields
	internal float waitTime; // 0x10
	internal BattlePerformanceMaster $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48E44 Offset: 0xD48E44 VA: 0xD48E44
	// RVA: 0x16C9040 Offset: 0x16C9040 VA: 0x16C9040
	public void .ctor() { }

	// RVA: 0x16C9CCC Offset: 0x16C9CCC VA: 0x16C9CCC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E54 Offset: 0xD48E54 VA: 0xD48E54
	// RVA: 0x16C9D84 Offset: 0x16C9D84 VA: 0x16C9D84 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E64 Offset: 0xD48E64 VA: 0xD48E64
	// RVA: 0x16C9D8C Offset: 0x16C9D8C VA: 0x16C9D8C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E74 Offset: 0xD48E74 VA: 0xD48E74
	// RVA: 0x16C9D94 Offset: 0x16C9D94 VA: 0x16C9D94 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48E84 Offset: 0xD48E84 VA: 0xD48E84
	// RVA: 0x16C9DA8 Offset: 0x16C9DA8 VA: 0x16C9DA8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0500 Offset: 0xCB0500 VA: 0xCB0500
private sealed class BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9273
{
	// Fields
	internal BattlePerformanceMaster $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24
	private BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2.<endMasterBuffEffectFadeOut>c__AnonStorey5 $locvar0; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48E94 Offset: 0xD48E94 VA: 0xD48E94
	// RVA: 0x16C90B8 Offset: 0x16C90B8 VA: 0x16C90B8
	public void .ctor() { }

	// RVA: 0x16C96EC Offset: 0x16C96EC VA: 0x16C96EC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48EA4 Offset: 0xD48EA4 VA: 0xD48EA4
	// RVA: 0x16C99BC Offset: 0x16C99BC VA: 0x16C99BC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48EB4 Offset: 0xD48EB4 VA: 0xD48EB4
	// RVA: 0x16C99C4 Offset: 0x16C99C4 VA: 0x16C99C4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48EC4 Offset: 0xD48EC4 VA: 0xD48EC4
	// RVA: 0x16C99CC Offset: 0x16C99CC VA: 0x16C99CC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48ED4 Offset: 0xD48ED4 VA: 0xD48ED4
	// RVA: 0x16C99E0 Offset: 0x16C99E0 VA: 0x16C99E0 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2.<endMasterBuffEffectFadeOut>c__AnonStorey5 // TypeDefIndex: 9274
{
	// Fields
	internal UIWidget widget; // 0x10
	internal BattlePerformanceMaster.<endMasterBuffEffectFadeOut>c__Iterator2 <>f__ref$2; // 0x18

	// Methods

	// RVA: 0x16C99B4 Offset: 0x16C99B4 VA: 0x16C99B4
	public void .ctor() { }

	// RVA: 0x16C9A48 Offset: 0x16C9A48 VA: 0x16C9A48
	internal void <>m__0() { }
}

// Namespace: 
public class BattlePerformancePlayer : MonoBehaviour // TypeDefIndex: 9275
{
	// Fields
	public PlayMakerFSM myfsm; // 0x18
	public PlayMakerFSM otherFsm; // 0x20
	private BattlePerformance perf; // 0x28
	private BattleData data; // 0x30
	private BattleLogic logic; // 0x38
	public BattleServantParamComponent[] list_param; // 0x40
	private int[] list_ID; // 0x48
	public BattleServantConfConponent confwindowComp; // 0x50
	public BattleSkillConfComponent skillConfWindow; // 0x58
	private Vector3[] list_pos; // 0x60
	private Vector3 conf_pos; // 0x68
	private bool isLongTap; // 0x74
	private int tmp_uniqueId; // 0x78
	private BattleLogic.UseSkillObject tmp_useSkill; // 0x80
	private BattleLogic.UseSkillObject useSkillObject; // 0x88
	private BattleLogic.UseSkillObject actSkillObject; // 0x90
	private BattleSelectServantWindow selectSvtWindow; // 0x98
	private BattleSelectCommandTypeWindow selectCommandTypeWindow; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xCD3200 Offset: 0xCD3200 VA: 0xCD3200
	private static Action <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xCD3210 Offset: 0xCD3210 VA: 0xCD3210
	private static Action <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x16C9E10 Offset: 0x16C9E10 VA: 0x16C9E10
	public void .ctor() { }

	// RVA: 0x16C9E88 Offset: 0x16C9E88 VA: 0x16C9E88
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x16CA1B8 Offset: 0x16CA1B8 VA: 0x16CA1B8
	public void deleteStatus(int index) { }

	// RVA: 0x16CA3B4 Offset: 0x16CA3B4 VA: 0x16CA3B4
	public void setParam(int index, BattleServantData svtdata) { }

	// RVA: 0x16CA5CC Offset: 0x16CA5CC VA: 0x16CA5CC
	public void startTac() { }

	// RVA: 0x16CA630 Offset: 0x16CA630 VA: 0x16CA630
	public void modeTacPlayerStatus() { }

	// RVA: 0x16CA898 Offset: 0x16CA898 VA: 0x16CA898
	public void onClickServant(int uniqueID) { }

	// RVA: 0x16CA950 Offset: 0x16CA950 VA: 0x16CA950
	public void procSelectServant() { }

	// RVA: 0x16CACEC Offset: 0x16CACEC VA: 0x16CACEC
	public void onClickConfClose() { }

	// RVA: 0x16CAD50 Offset: 0x16CAD50 VA: 0x16CAD50
	public void procCloseConf(bool flg) { }

	// RVA: 0x16CAF30 Offset: 0x16CAF30 VA: 0x16CAF30
	public void onCloseConfComplete() { }

	// RVA: 0x16CB09C Offset: 0x16CB09C VA: 0x16CB09C
	public void procCloseAll() { }

	// RVA: 0x16CB150 Offset: 0x16CB150 VA: 0x16CB150
	public void startCommand() { }

	// RVA: 0x16CB1B4 Offset: 0x16CB1B4 VA: 0x16CB1B4
	public void modeComPlayerStatus() { }

	// RVA: 0x16CB574 Offset: 0x16CB574 VA: 0x16CB574
	public void onClickSkillIcon(BattleSkillInfoData skillInfo, bool isLong) { }

	// RVA: 0x16CB708 Offset: 0x16CB708 VA: 0x16CB708
	public void checkSkipFlg() { }

	// RVA: 0x16CB8F4 Offset: 0x16CB8F4 VA: 0x16CB8F4
	public void procOpenSkillConf(bool cancelFlg = True) { }

	// RVA: 0x16CBA1C Offset: 0x16CBA1C VA: 0x16CBA1C
	public void OpenSkillConfComplete() { }

	// RVA: 0x16CBA4C Offset: 0x16CBA4C VA: 0x16CBA4C
	public void procCloseSkillConf() { }

	// RVA: 0x16CBB0C Offset: 0x16CBB0C VA: 0x16CBB0C
	public void CloseSkillConfComp() { }

	// RVA: 0x16CBB98 Offset: 0x16CBB98 VA: 0x16CBB98
	public void useSkillIcon(BattleSkillInfoData skillInfo) { }

	// RVA: 0x16CBC2C Offset: 0x16CBC2C VA: 0x16CBC2C
	public void onClickSkillOK(BattleSkillInfoData skillInfo) { }

	// RVA: 0x16CBCC0 Offset: 0x16CBCC0 VA: 0x16CBCC0
	public void onClickSkillCancel() { }

	// RVA: 0x16CBD24 Offset: 0x16CBD24 VA: 0x16CBD24
	public void UseSkill(bool playSe) { }

	// RVA: 0x16CC268 Offset: 0x16CC268 VA: 0x16CC268
	public void openSelectSvtWindow() { }

	// RVA: 0x16CC5A0 Offset: 0x16CC5A0 VA: 0x16CC5A0
	public void selectedSvt(int uniqueId) { }

	// RVA: 0x16CC8E8 Offset: 0x16CC8E8 VA: 0x16CC8E8
	public void startSkill() { }

	// RVA: 0x16CC94C Offset: 0x16CC94C VA: 0x16CC94C
	public void endSkill() { }

	// RVA: 0x16CC0B8 Offset: 0x16CC0B8 VA: 0x16CC0B8
	public void openSelectCommandTypeWindow() { }

	// RVA: 0x16CC9B0 Offset: 0x16CC9B0 VA: 0x16CC9B0
	public void selectedCommandType(int uniqueId, int cmdType) { }

	// RVA: 0x16CA768 Offset: 0x16CA768 VA: 0x16CA768
	public void updateView() { }

	// RVA: 0x16CCAC8 Offset: 0x16CCAC8 VA: 0x16CCAC8
	public void updateBuff() { }

	// RVA: 0x16CCACC Offset: 0x16CCACC VA: 0x16CCACC
	public void playAttackEffect(int uniqueID) { }

	// RVA: 0x16CA0C4 Offset: 0x16CA0C4 VA: 0x16CA0C4
	public void initSvtConfWindow() { }

	// RVA: 0x16CAC5C Offset: 0x16CAC5C VA: 0x16CAC5C
	public void openSvtConfWindow(float alphatime) { }

	// RVA: 0x16CCBB0 Offset: 0x16CCBB0 VA: 0x16CCBB0
	public bool isOpenSvtConf() { }

	// RVA: 0x16CCBE0 Offset: 0x16CCBE0 VA: 0x16CCBE0
	public void onOpenConfComplete() { }

	// RVA: 0x16CAEF8 Offset: 0x16CAEF8 VA: 0x16CAEF8
	public void closeSvtConfWindow(float alphatime, BattleWindowComponent.EndCall endCall) { }

	// RVA: 0x16CCC44 Offset: 0x16CCC44 VA: 0x16CCC44
	public void checkTutorial() { }

	// RVA: 0x16CC454 Offset: 0x16CC454 VA: 0x16CC454
	public void procTurorial(int param) { }

	// RVA: 0x16CCDCC Offset: 0x16CCDCC VA: 0x16CCDCC
	public void tutorialSetArrowIcon() { }

	// RVA: 0x16CCEC8 Offset: 0x16CCEC8 VA: 0x16CCEC8
	public void tutorialSetSelect() { }

	// RVA: 0x16CCFCC Offset: 0x16CCFCC VA: 0x16CCFCC
	public void tutorialSetSelectSvt() { }

	// RVA: 0x16CD0C4 Offset: 0x16CD0C4 VA: 0x16CD0C4
	public bool showSideEffect(BattleActionData.BuffData buffData) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB8C Offset: 0xD3BB8C VA: 0xD3BB8C
	// RVA: 0x16CD1E0 Offset: 0x16CD1E0 VA: 0x16CD1E0
	private static void <UseSkill>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BB9C Offset: 0xD3BB9C VA: 0xD3BB9C
	// RVA: 0x16CD1E4 Offset: 0x16CD1E4 VA: 0x16CD1E4
	private static void <selectedSvt>m__1() { }
}

// Namespace: 
public class BattlePerformanceStatus : BaseMonoBehaviour // TypeDefIndex: 9276
{
	// Fields
	public PlayMakerFSM fsm; // 0x18
	private BattlePerformance perf; // 0x20
	private BattleData data; // 0x28
	private BattleLogic logic; // 0x30
	public BattlePerformancePlayer playerPerf; // 0x38
	public BattlePerformanceMaster masterPerf; // 0x40
	public BattlePerformanceEnemy enemyPref; // 0x48
	public BattlePerformanceEnemyMst enemyMasterPerf; // 0x50
	public BattleBuffConfWindowComponent buffConfWindow; // 0x58
	public GameObject effect_takecri; // 0x60
	public Transform criticalpointTr; // 0x68
	public DrumRollLabel criticalpointlabel; // 0x70
	public Transform dropItemTr; // 0x78
	[SerializeField] // RVA: 0xCD3220 Offset: 0xCD3220 VA: 0xCD3220
	private UILabel totalCriticalpointlabel; // 0x80
	private GameObject totalCriticalStarObj; // 0x88
	private int lastTotalCriticalPoint; // 0x90
	public BattlePerformanceInfoComponent InfoComp; // 0x98
	public BattleSelectServantWindow selectSvtWindow; // 0xA0
	public BattleSelectMainSubServantWindow selectMainSubSvtWindow; // 0xA8
	[SerializeField] // RVA: 0xCD3230 Offset: 0xCD3230 VA: 0xCD3230
	private BattleSelectCommandTypeWindow selectCommandTypeWindow; // 0xB0
	public GameObject tapObject; // 0xB8
	[SerializeField] // RVA: 0xCD3240 Offset: 0xCD3240 VA: 0xCD3240
	private GameObject effect_increaseGorgeousStar; // 0xC0
	[SerializeField] // RVA: 0xCD3250 Offset: 0xCD3250 VA: 0xCD3250
	private GameObject effect_reduceGorgeousStar; // 0xC8
	private ParticleSystem.Burst[] tempBurst; // 0xD0
	private float gorgeousStarEffectTime; // 0xD8
	private BattlePerformanceStatus.TouchEventDelegate tapEvent; // 0xE0

	// Methods

	// RVA: 0x16CD1E8 Offset: 0x16CD1E8 VA: 0x16CD1E8
	public void .ctor() { }

	// RVA: 0x16CD1F0 Offset: 0x16CD1F0 VA: 0x16CD1F0
	public void Initialize(BattlePerformance inperf, BattleData indata, BattleLogic inlogic) { }

	// RVA: 0x16CD4D8 Offset: 0x16CD4D8 VA: 0x16CD4D8
	public Transform getCollectDropTransform() { }

	// RVA: 0x16CD4E0 Offset: 0x16CD4E0 VA: 0x16CD4E0
	public void updateDropItemCount() { }

	// RVA: 0x16CD514 Offset: 0x16CD514 VA: 0x16CD514
	public void changeLayer(GameObject obj) { }

	// RVA: 0x16CD648 Offset: 0x16CD648 VA: 0x16CD648
	public void initQuest() { }

	// RVA: 0x16CD67C Offset: 0x16CD67C VA: 0x16CD67C
	public void loadMaster() { }

	// RVA: 0x16CD6A8 Offset: 0x16CD6A8 VA: 0x16CD6A8
	public void deletePlayerStatus(int index) { }

	// RVA: 0x16CD6DC Offset: 0x16CD6DC VA: 0x16CD6DC
	public void setPlayerParam(int index, BattleServantData svtdata) { }

	// RVA: 0x16CD720 Offset: 0x16CD720 VA: 0x16CD720
	public void deleteEnemyStatus(int index) { }

	// RVA: 0x16CD754 Offset: 0x16CD754 VA: 0x16CD754
	public void setEnemyParam(int index, BattleServantData svtdata, GameObject obj) { }

	// RVA: 0x16CD7A0 Offset: 0x16CD7A0 VA: 0x16CD7A0
	public void setEnemyParamPosition() { }

	// RVA: 0x16CD7CC Offset: 0x16CD7CC VA: 0x16CD7CC
	public void setTargetParam(BattleServantData svtdata) { }

	// RVA: 0x16CD800 Offset: 0x16CD800 VA: 0x16CD800
	public void setOffTarget() { }

	// RVA: 0x16CD82C Offset: 0x16CD82C VA: 0x16CD82C
	public bool checkRaidHPUpdate() { }

	// RVA: 0x16CD858 Offset: 0x16CD858 VA: 0x16CD858
	public void updateRaindInfo(BattleRaidInfo[] infos, bool fixUpdate = False) { }

	// RVA: 0x16CD89C Offset: 0x16CD89C VA: 0x16CD89C
	public void updateRaidHp() { }

	// RVA: 0x16CD8C8 Offset: 0x16CD8C8 VA: 0x16CD8C8
	public void updateSuperBossInfo(BattleSuperBossInfo[] infos, bool fixUpdate = False) { }

	// RVA: 0x16CD90C Offset: 0x16CD90C VA: 0x16CD90C
	public long getTurnSituationParam() { }

	// RVA: 0x16CD938 Offset: 0x16CD938 VA: 0x16CD938
	public void loadEnemyMaster() { }

	// RVA: 0x16CD964 Offset: 0x16CD964 VA: 0x16CD964
	public bool isLoading() { }

	// RVA: 0x16CD998 Offset: 0x16CD998 VA: 0x16CD998
	public void setShowWave(int now, int max) { }

	// RVA: 0x16CD9DC Offset: 0x16CD9DC VA: 0x16CD9DC
	public void setShowTurn(BattleData bdata, int addturn = 0) { }

	// RVA: 0x16CDA20 Offset: 0x16CDA20 VA: 0x16CDA20
	public void updateNokoriEnemyCount() { }

	// RVA: 0x16CDA54 Offset: 0x16CDA54 VA: 0x16CDA54
	public void updateCriticalPoint(int maxLabelCont = -1, bool isUseEffect = False) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3BBAC Offset: 0xD3BBAC VA: 0xD3BBAC
	// RVA: 0x16CDCB8 Offset: 0x16CDCB8 VA: 0x16CDCB8
	private IEnumerator DoCreateCriticalEffect(float waitTime) { }

	// RVA: 0x16CDC84 Offset: 0x16CDC84 VA: 0x16CDC84
	private void ShowCriticalStarEffectForSkill(int starCount) { }

	// RVA: 0x16CDD54 Offset: 0x16CDD54 VA: 0x16CDD54
	private void GorgeousStarCommonFunc(GameObject starEffectPrefab, short starCount) { }

	// RVA: 0x16CDBA8 Offset: 0x16CDBA8 VA: 0x16CDBA8
	public void updateTotalCriticalPoint() { }

	// RVA: 0x16CDFA8 Offset: 0x16CDFA8 VA: 0x16CDFA8
	public void ChangeCriticalLabelColor(Color color) { }

	// RVA: 0x16CE008 Offset: 0x16CE008 VA: 0x16CE008
	public void SetActiveTotalCriticalStar(bool value) { }

	// RVA: 0x16CE040 Offset: 0x16CE040 VA: 0x16CE040
	public void updateView() { }

	// RVA: 0x16CE088 Offset: 0x16CE088 VA: 0x16CE088
	public void modeStartWave() { }

	// RVA: 0x16CE0B4 Offset: 0x16CE0B4 VA: 0x16CE0B4
	public void modeTactical() { }

	// RVA: 0x16CE168 Offset: 0x16CE168 VA: 0x16CE168
	public void modeCommand() { }

	// RVA: 0x16CE1F0 Offset: 0x16CE1F0 VA: 0x16CE1F0
	public void modeAction() { }

	// RVA: 0x16CE21C Offset: 0x16CE21C VA: 0x16CE21C
	public void updateBuff() { }

	// RVA: 0x16CE260 Offset: 0x16CE260 VA: 0x16CE260
	public void playAttackEffect(int uniqueID) { }

	// RVA: 0x16CE294 Offset: 0x16CE294 VA: 0x16CE294
	public void startSkill() { }

	// RVA: 0x16CE31C Offset: 0x16CE31C VA: 0x16CE31C
	public void endSkill() { }

	// RVA: 0x16CE3A4 Offset: 0x16CE3A4 VA: 0x16CE3A4
	public BattleSelectServantWindow getSelectSvtWindow() { }

	// RVA: 0x16CE3AC Offset: 0x16CE3AC VA: 0x16CE3AC
	public BattleSelectMainSubServantWindow getSelectMainSubSvtWindow() { }

	// RVA: 0x16CE3B4 Offset: 0x16CE3B4 VA: 0x16CE3B4
	public BattleSelectCommandTypeWindow getSelectCommandTypeWindow() { }

	// RVA: 0x16CE3BC Offset: 0x16CE3BC VA: 0x16CE3BC
	public void OpenBuffConf(int Id) { }

	// RVA: 0x16CAC24 Offset: 0x16CAC24 VA: 0x16CAC24
	public void CloseBuffConf() { }

	// RVA: 0x16CE4B8 Offset: 0x16CE4B8 VA: 0x16CE4B8
	public void clickServantWindow(int index) { }

	// RVA: 0x16CE584 Offset: 0x16CE584 VA: 0x16CE584
	public int getSelectedUniqueID() { }

	// RVA: 0x16CD498 Offset: 0x16CD498 VA: 0x16CD498
	private void initActionTouch() { }

	// RVA: 0x16CE58C Offset: 0x16CE58C VA: 0x16CE58C
	public void actionTouchEvent() { }

	// RVA: 0x16CE7A0 Offset: 0x16CE7A0 VA: 0x16CE7A0
	public void setTouchOn(BattlePerformanceStatus.TouchEventDelegate inTapEvent) { }

	// RVA: 0x16CE8A4 Offset: 0x16CE8A4 VA: 0x16CE8A4
	public void setTouchOff(BattlePerformanceStatus.TouchEventDelegate inTapEvent) { }

	// RVA: 0x16CE988 Offset: 0x16CE988 VA: 0x16CE988
	public void setWinView() { }

	// RVA: 0x16CE9B4 Offset: 0x16CE9B4 VA: 0x16CE9B4
	public void updateStateString() { }

	// RVA: 0x16CE9E0 Offset: 0x16CE9E0 VA: 0x16CE9E0
	public void playShiftEffectBefore(int uniqueId) { }

	// RVA: 0x16CEA14 Offset: 0x16CEA14 VA: 0x16CEA14
	public void playShiftEffect(int uniqueId) { }

	// RVA: 0x16CEA48 Offset: 0x16CEA48 VA: 0x16CEA48
	public void showSideEffect(BattleActionData.BuffData buffData) { }

	// RVA: 0x16CEAB8 Offset: 0x16CEAB8 VA: 0x16CEAB8
	public bool isOpenOrOpeningMainWindow() { }

	// RVA: 0x16CEB74 Offset: 0x16CEB74 VA: 0x16CEB74
	public BattleServantParamComponent GetEnemySvtParamComponent(int uniqueId) { }
}

// Namespace: 
public sealed class BattlePerformanceStatus.TouchEventDelegate : MulticastDelegate // TypeDefIndex: 9277
{
	// Methods

	// RVA: 0x16CED80 Offset: 0x16CED80 VA: 0x16CED80
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x16CE5A0 Offset: 0x16CE5A0 VA: 0x16CE5A0 Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x16CED90 Offset: 0x16CED90 VA: 0x16CED90 Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x16CEDC4 Offset: 0x16CEDC4 VA: 0x16CEDC4 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0510 Offset: 0xCB0510 VA: 0xCB0510
private sealed class BattlePerformanceStatus.<DoCreateCriticalEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9278
{
	// Fields
	internal float waitTime; // 0x10
	internal BattlePerformanceStatus $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD48EE4 Offset: 0xD48EE4 VA: 0xD48EE4
	// RVA: 0x16CDD4C Offset: 0x16CDD4C VA: 0x16CDD4C
	public void .ctor() { }

	// RVA: 0x16CEBA8 Offset: 0x16CEBA8 VA: 0x16CEBA8 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48EF4 Offset: 0xD48EF4 VA: 0xD48EF4
	// RVA: 0x16CECF4 Offset: 0x16CECF4 VA: 0x16CECF4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F04 Offset: 0xD48F04 VA: 0xD48F04
	// RVA: 0x16CECFC Offset: 0x16CECFC VA: 0x16CECFC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F14 Offset: 0xD48F14 VA: 0xD48F14
	// RVA: 0x16CED04 Offset: 0x16CED04 VA: 0x16CED04 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD48F24 Offset: 0xD48F24 VA: 0xD48F24
	// RVA: 0x16CED18 Offset: 0x16CED18 VA: 0x16CED18 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePerformanceTurnSituationComponent : MonoBehaviour // TypeDefIndex: 9279
{
	// Fields
	private static readonly string LABEL_WITH_RAIDNAME_KEY; // 0x0
	public BattlePerformanceTurnSituationComponent.ComponentType componentType; // 0x18
	public int changeSpriteId; // 0x1C

	// Methods

	// RVA: 0x16CEDD0 Offset: 0x16CEDD0 VA: 0x16CEDD0
	public void .ctor() { }

	// RVA: 0x16CEDD8 Offset: 0x16CEDD8 VA: 0x16CEDD8
	public void setMessage(string message) { }

	// RVA: 0x16CEE9C Offset: 0x16CEE9C VA: 0x16CEE9C
	public void SetLabelWithRaidName(int situationNo, string bossName, long param) { }

	// RVA: 0x16CEFEC Offset: 0x16CEFEC VA: 0x16CEFEC
	private static void .cctor() { }
}

// Namespace: 
public enum BattlePerformanceTurnSituationComponent.ComponentType // TypeDefIndex: 9280
{
	// Fields
	public int value__; // 0x0
	public const BattlePerformanceTurnSituationComponent.ComponentType NONE = 0;
	public const BattlePerformanceTurnSituationComponent.ComponentType LABEL = 1;
	public const BattlePerformanceTurnSituationComponent.ComponentType CHANGE_SPRITE = 2;
	public const BattlePerformanceTurnSituationComponent.ComponentType LABEL_WITH_RAIDNAME = 3;
}

// Namespace: 
public class BattleRetireWindowComponent : BattleWindowComponent // TypeDefIndex: 9281
{
	// Fields
	public UILabel checkGiveUpLabel; // 0x48
	public UILabel continueItemDeadLineLabel; // 0x50
	public GameObject continueItemRoot; // 0x58
	public UILabel continueCount; // 0x60
	public UISprite continueItemCountSpr; // 0x68
	public UISprite giveUpTitleSpr; // 0x70
	public GameObject okBtn; // 0x78
	public GameObject cancelBtn; // 0x80
	public UISprite giveUpBg; // 0x88
	[CompilerGeneratedAttribute] // RVA: 0xCD3260 Offset: 0xCD3260 VA: 0xCD3260
	[DebuggerBrowsableAttribute] // RVA: 0xCD3260 Offset: 0xCD3260 VA: 0xCD3260
	private BattleData <data>k__BackingField; // 0x90
	public bool EnableContinueItem; // 0x98
	private bool isShowDeadLineDialog; // 0x99

	// Properties
	public BattleData data { get; set; }
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x16AED84 Offset: 0x16AED84 VA: 0x16AED84
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BBBC Offset: 0xD3BBBC VA: 0xD3BBBC
	// RVA: 0x16AED8C Offset: 0x16AED8C VA: 0x16AED8C
	public void set_data(BattleData value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BBCC Offset: 0xD3BBCC VA: 0xD3BBCC
	// RVA: 0x16AED94 Offset: 0x16AED94 VA: 0x16AED94
	public BattleData get_data() { }

	// RVA: 0x16AED9C Offset: 0x16AED9C VA: 0x16AED9C
	public void Update() { }

	// RVA: 0x16AF020 Offset: 0x16AF020 VA: 0x16AF020
	private void CallbackConfirmDialog(bool isDecide) { }

	// RVA: 0x16AF0B8 Offset: 0x16AF0B8 VA: 0x16AF0B8
	public void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x16AF804 Offset: 0x16AF804 VA: 0x16AF804 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleSealedCommandWindowComponent : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9282
{
	// Fields
	private int labelDefaultFontSize; // 0x50
	private Vector3 labelDefaultPosition; // 0x54
	public UILabel confLabel; // 0x60

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x15335F8 Offset: 0x15335F8 VA: 0x15335F8
	public void .ctor() { }

	// RVA: 0x1533660 Offset: 0x1533660 VA: 0x1533660
	public void setLabel(string str, BattleSealedCommandWindowComponent.LabelAdjustArgs args) { }

	// RVA: 0x1533868 Offset: 0x1533868 VA: 0x1533868 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class BattleSealedCommandWindowComponent.LabelAdjustArgs // TypeDefIndex: 9283
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCD329C Offset: 0xCD329C VA: 0xCD329C
	[DebuggerBrowsableAttribute] // RVA: 0xCD329C Offset: 0xCD329C VA: 0xCD329C
	private Nullable<int> <fontSize>k__BackingField; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xCD32D8 Offset: 0xCD32D8 VA: 0xCD32D8
	[DebuggerBrowsableAttribute] // RVA: 0xCD32D8 Offset: 0xCD32D8 VA: 0xCD32D8
	private Nullable<Vector3> <localPosition>k__BackingField; // 0x18

	// Properties
	public Nullable<int> fontSize { get; set; }
	public Nullable<Vector3> localPosition { get; set; }

	// Methods

	// RVA: 0x153384C Offset: 0x153384C VA: 0x153384C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BBDC Offset: 0xD3BBDC VA: 0xD3BBDC
	// RVA: 0x1533854 Offset: 0x1533854 VA: 0x1533854
	public Nullable<int> get_fontSize() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BBEC Offset: 0xD3BBEC VA: 0xD3BBEC
	// RVA: 0x15338B0 Offset: 0x15338B0 VA: 0x15338B0
	public void set_fontSize(Nullable<int> value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BBFC Offset: 0xD3BBFC VA: 0xD3BBFC
	// RVA: 0x153385C Offset: 0x153385C VA: 0x153385C
	public Nullable<Vector3> get_localPosition() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3BC0C Offset: 0xD3BC0C VA: 0xD3BC0C
	// RVA: 0x15338B8 Offset: 0x15338B8 VA: 0x15338B8
	public void set_localPosition(Nullable<Vector3> value) { }
}

// Namespace: 
public class BattleSelectMainSubServantWindow : BattleWindowOuterClickManagerComponent // TypeDefIndex: 9284
{
	// Fields
	public GameObject parentPanel; // 0x50
	public UILabel title_label; // 0x58
	public BattleSelectServantComponent[] mainSvtList; // 0x60
	public BattleSelectServantComponent[] subSvtList; // 0x68
	public UIButton actButton; // 0x70
	private BattleSelectMainSubServantWindow.SelectedCallBack callBack; // 0x78
	private int mainSelect_uniqueId; // 0x80
	private int subSelect_uniqueId; // 0x84
	private bool isSelected; // 0x88
	private BattleData battleData; // 0x90

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x15350EC Offset: 0x15350EC VA: 0x15350EC
	public void .ctor() { }

	// RVA: 0x15350FC Offset: 0x15350FC VA: 0x15350FC Slot: 7
	public override void setInitialPos() { }

	// RVA: 0x15351D8 Offset: 0x15351D8 VA: 0x15351D8
	public void SetCallBack(BattleSelectMainSubServantWindow.SelectedCallBack callback) { }

	// RVA: 0x15351E0 Offset: 0x15351E0 VA: 0x15351E0
	public void SetServantData(BattleServantData[] mainList, BattleServantData[] subList) { }

	// RVA: 0x1535D94 Offset: 0x1535D94 VA: 0x1535D94
