public sealed class BattleWindowOuterClickComponent.OuterClickCall : MulticastDelegate // TypeDefIndex: 9356
{
	// Methods

	// RVA: 0x15786AC Offset: 0x15786AC VA: 0x15786AC
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x15784AC Offset: 0x15784AC VA: 0x15784AC Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x15786BC Offset: 0x15786BC VA: 0x15786BC Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x15786F0 Offset: 0x15786F0 VA: 0x15786F0 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class BattleWindowOuterClickManagerComponent : BattleWindowComponent // TypeDefIndex: 9357
{
	// Fields
	public BattleWindowOuterClickComponent outerPanel; // 0x48

	// Methods

	// RVA: 0x15728BC Offset: 0x15728BC VA: 0x15728BC
	public void .ctor() { }

	// RVA: 0x15786FC Offset: 0x15786FC VA: 0x15786FC
	public void setOuterClickCallBack(BattleWindowOuterClickComponent.OuterClickCall callBack) { }
}

// Namespace: 
public class CommandSpellObjectComponent : MonoBehaviour // TypeDefIndex: 9358
{
	// Fields
	public CommandSpellWindowComponent target; // 0x18
	public UILabel label_name; // 0x20
	public UILabel label_conf; // 0x28
	public UILabel label_count; // 0x30
	public UISprite coverSprite; // 0x38
	public UILabel unitLabel; // 0x40
	private int Id; // 0x48
	private int Consume; // 0x4C
	private bool touchFlg; // 0x50

	// Methods

	// RVA: 0x1665100 Offset: 0x1665100 VA: 0x1665100
	public void .ctor() { }

	// RVA: 0x1665108 Offset: 0x1665108 VA: 0x1665108
	public void setData(CommandSpellWindowComponent.MODE mode, int Id, int count) { }

	// RVA: 0x166531C Offset: 0x166531C VA: 0x166531C
	public void updateIsUse(CommandSpellWindowComponent.MODE mode, int count) { }

	// RVA: 0x1665440 Offset: 0x1665440 VA: 0x1665440
	public void setUseButton(bool flg) { }

	// RVA: 0x166544C Offset: 0x166544C VA: 0x166544C
	public void onClickUse() { }
}

// Namespace: 
public class CommandSpellWindowComponent : BattleWindowComponent // TypeDefIndex: 9359
{
	// Fields
	public CommandSpellWindowComponent.MODE mode; // 0x48
	public GameObject prefab; // 0x50
	public Transform tree_root; // 0x58
	public UILabel label_count; // 0x60
	public UILabel titleLabel; // 0x68
	public BattleWindowOuterClickManagerComponent checkWindow; // 0x70
	public UILabel checkuselabel; // 0x78
	public UILabel spellnamelabel; // 0x80
	public GameObject btn_ok; // 0x88
	public GameObject btn_ng; // 0x90
	private bool isOpenFlg; // 0x98
	public CommandSpellWindowComponent.CloseButtonCallBack callback_close; // 0xA0
	public CommandSpellWindowComponent.UseCommandSpellCallBack callback_use; // 0xA8
	private List<GameObject> objlist; // 0xB0
	private int commandCount; // 0xB8
	public static readonly int objheight; // 0x0
	private BattlePerformance battlePerf; // 0xC0
	public int temporarySpell; // 0xC8
	public bool isUseTemporarySpell; // 0xCC
	private int tmp_Id; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xC668D8 Offset: 0xC668D8 VA: 0xC668D8
	private static Comparison<CommandSpellEntity> <>f__am$cache0; // 0x8

	// Properties
	protected override GameObject closeBtnObject { get; set; }

	// Methods

	// RVA: 0x16656D8 Offset: 0x16656D8 VA: 0x16656D8
	public void .ctor() { }

	// RVA: 0x1665750 Offset: 0x1665750 VA: 0x1665750
	public void setMode(CommandSpellWindowComponent.MODE mode) { }

	// RVA: 0x1665758 Offset: 0x1665758 VA: 0x1665758
	public void setCallBackPushClose(CommandSpellWindowComponent.CloseButtonCallBack callback) { }

	// RVA: 0x1665760 Offset: 0x1665760 VA: 0x1665760
	public void setCallBackUse(CommandSpellWindowComponent.UseCommandSpellCallBack callback) { }

	// RVA: 0x1665768 Offset: 0x1665768 VA: 0x1665768
	public void onCloseButton() { }

	// RVA: 0x166597C Offset: 0x166597C VA: 0x166597C Slot: 9
	public override void setClose() { }

	// RVA: 0x16659C0 Offset: 0x16659C0 VA: 0x16659C0 Slot: 12
	public override void Close(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1665A4C Offset: 0x1665A4C VA: 0x1665A4C
	public void InitializeCommandSpell(BattlePerformance bp, CommandSpellWindowComponent.MODE inMode = 0, int temporary = -1) { }

	// RVA: 0x1666164 Offset: 0x1666164 VA: 0x1666164
	public void InitializeCommandSpellDepth(CommandSpellWindowComponent.MODE inMode, int scrollViewDepth) { }

	// RVA: 0x16662D4 Offset: 0x16662D4 VA: 0x16662D4 Slot: 10
	public override void Open(BattleWindowComponent.EndCall call) { }

	// RVA: 0x1666554 Offset: 0x1666554 VA: 0x1666554 Slot: 11
	public override void CompOpen() { }

	// RVA: 0x1665510 Offset: 0x1665510 VA: 0x1665510
	public void UseSpell(int Id) { }

	// RVA: 0x166655C Offset: 0x166655C VA: 0x166655C
	public void endSpellOpened() { }

	// RVA: 0x1666568 Offset: 0x1666568 VA: 0x1666568
	public void okSpell() { }

	// RVA: 0x166681C Offset: 0x166681C VA: 0x166681C
	public void cancelSpell() { }

	// RVA: 0x16668B8 Offset: 0x16668B8 VA: 0x16668B8
	public void OnClick() { }

	// RVA: 0x16668CC Offset: 0x16668CC VA: 0x16668CC Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x1666A8C Offset: 0x1666A8C VA: 0x1666A8C Slot: 5
	protected override void set_closeBtnObject(GameObject value) { }

	// RVA: 0x1666A94 Offset: 0x1666A94 VA: 0x1666A94
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE6C8 Offset: 0xCCE6C8 VA: 0xCCE6C8
	// RVA: 0x1666AE8 Offset: 0x1666AE8 VA: 0x1666AE8
	private static int <InitializeCommandSpell>m__0(CommandSpellEntity a, CommandSpellEntity b) { }
}

// Namespace: 
public enum CommandSpellWindowComponent.MODE // TypeDefIndex: 9360
{
	// Fields
	public int value__; // 0x0
	public const CommandSpellWindowComponent.MODE NO_BATTLE = 0;
	public const CommandSpellWindowComponent.MODE BATTLE = 1;
}

// Namespace: 
public sealed class CommandSpellWindowComponent.CloseButtonCallBack : MulticastDelegate // TypeDefIndex: 9361
{
	// Methods

	// RVA: 0x1666B2C Offset: 0x1666B2C VA: 0x1666B2C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x166577C Offset: 0x166577C VA: 0x166577C Slot: 11
	public virtual void Invoke() { }

	// RVA: 0x1666B3C Offset: 0x1666B3C VA: 0x1666B3C Slot: 12
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }

	// RVA: 0x1666B70 Offset: 0x1666B70 VA: 0x1666B70 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class CommandSpellWindowComponent.UseCommandSpellCallBack : MulticastDelegate // TypeDefIndex: 9362
{
	// Methods

	// RVA: 0x1666B7C Offset: 0x1666B7C VA: 0x1666B7C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x16665F0 Offset: 0x16665F0 VA: 0x16665F0 Slot: 11
	public virtual void Invoke(int commandSpellId) { }

	// RVA: 0x1666B8C Offset: 0x1666B8C VA: 0x1666B8C Slot: 12
	public virtual IAsyncResult BeginInvoke(int commandSpellId, AsyncCallback callback, object object) { }

	// RVA: 0x1666C18 Offset: 0x1666C18 VA: 0x1666C18 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class FieldMotionManager // TypeDefIndex: 9363
{
	// Fields
	private BattleFieldMotionComponent[] fieldMotionArray; // 0x10
	private const int UNIQUE_MOTION_IDX = 1;
	private BattleFieldMotionComponent defUniqueFieldMotion; // 0x18
	private BattleFieldMotionComponent[] retentionFieldMotionArray; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC668E8 Offset: 0xC668E8 VA: 0xC668E8
	private static Func<BattleFieldMotionComponent, GameObject> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC668F8 Offset: 0xC668F8 VA: 0xC668F8
	private static Func<BattleFieldMotionComponent, GameObject> <>f__am$cache1; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC66908 Offset: 0xC66908 VA: 0xC66908
	private static Func<BattleFieldMotionComponent, GameObject> <>f__am$cache2; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC66918 Offset: 0xC66918 VA: 0xC66918
	private static Func<BattleFieldMotionComponent, Transform> <>f__am$cache3; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC66928 Offset: 0xC66928 VA: 0xC66928
	private static Func<BattleFieldMotionComponent, Transform> <>f__am$cache4; // 0x20

	// Methods

	// RVA: 0x1366498 Offset: 0x1366498 VA: 0x1366498
	public void .ctor(BattleFieldMotionComponent[] fieldMotions, BattlePerformance perf) { }

	// RVA: 0x136660C Offset: 0x136660C VA: 0x136660C
	public BattleFieldMotionComponent[] GetFieldMotionArray() { }

	// RVA: 0x1366614 Offset: 0x1366614 VA: 0x1366614
	public void SwitchUniqueFieldMotion(bool isDisable) { }

	// RVA: 0x1366780 Offset: 0x1366780 VA: 0x1366780
	public bool IsStep() { }

	// RVA: -1 Offset: -1
	public void SetVariables<T>(string variableName, T value) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C5FABC Offset: 0x1C5FABC VA: 0x1C5FABC
	|-FieldMotionManager.SetVariables<bool>
	|
	|-RVA: 0x1C60078 Offset: 0x1C60078 VA: 0x1C60078
	|-FieldMotionManager.SetVariables<int>
	|
	|-RVA: 0x1C60630 Offset: 0x1C60630 VA: 0x1C60630
	|-FieldMotionManager.SetVariables<object>
	|-FieldMotionManager.SetVariables<string>
	|-FieldMotionManager.SetVariables<GameObject>
	*/

	// RVA: 0x13668BC Offset: 0x13668BC VA: 0x13668BC
	public void SetTacticBg(bool flg) { }

	// RVA: 0x13669F4 Offset: 0x13669F4 VA: 0x13669F4
	public GameObject GetPlayerStage() { }

	// RVA: 0x1366B00 Offset: 0x1366B00 VA: 0x1366B00
	public GameObject GetEnemyStage() { }

	// RVA: 0x1366C0C Offset: 0x1366C0C VA: 0x1366C0C
	public GameObject GetGameObject(string name) { }

	// RVA: 0x1366D18 Offset: 0x1366D18 VA: 0x1366D18
	public Transform GetTransform(FieldMotionManager.GET_TYPE type, int index = -1) { }

	// RVA: 0x1366F44 Offset: 0x1366F44 VA: 0x1366F44
	public Transform GetTargetTransform(FieldMotionManager.GET_TYPE type, int index = -1) { }

	// RVA: 0x136706C Offset: 0x136706C VA: 0x136706C
	public void PlayBattleAction(BattleActionData nowAction) { }

	// RVA: 0x1367294 Offset: 0x1367294 VA: 0x1367294
	public void SendEvent(string str) { }

	// RVA: 0x136742C Offset: 0x136742C VA: 0x136742C
	public void SendEvent2ActiveFM(string str) { }

	// RVA: 0x13675C0 Offset: 0x13675C0 VA: 0x13675C0
	public void SetActiveMotion(BattleActionData nowAction, bool active) { }

	// RVA: -1 Offset: -1
	private T FindLastNotNullObject<T>(Func<BattleFieldMotionComponent, T> getObjectFunc) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1C1F274 Offset: 0x1C1F274 VA: 0x1C1F274
	|-FieldMotionManager.FindLastNotNullObject<object>
	|-FieldMotionManager.FindLastNotNullObject<GameObject>
	|-FieldMotionManager.FindLastNotNullObject<Transform>
	*/

	[CompilerGeneratedAttribute] // RVA: 0xCCE6D8 Offset: 0xCCE6D8 VA: 0xCCE6D8
	// RVA: 0x136777C Offset: 0x136777C VA: 0x136777C
	private static GameObject <SetTacticBg>m__0(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE6E8 Offset: 0xCCE6E8 VA: 0xCCE6E8
	// RVA: 0x13677A4 Offset: 0x13677A4 VA: 0x13677A4
	private static GameObject <GetPlayerStage>m__1(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE6F8 Offset: 0xCCE6F8 VA: 0xCCE6F8
	// RVA: 0x13677CC Offset: 0x13677CC VA: 0x13677CC
	private static GameObject <GetEnemyStage>m__2(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE708 Offset: 0xCCE708 VA: 0xCCE708
	// RVA: 0x13677F4 Offset: 0x13677F4 VA: 0x13677F4
	private static Transform <GetTransform>m__3(BattleFieldMotionComponent comp) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE718 Offset: 0xCCE718 VA: 0xCCE718
	// RVA: 0x1367820 Offset: 0x1367820 VA: 0x1367820
	private static Transform <GetTransform>m__4(BattleFieldMotionComponent comp) { }
}

// Namespace: 
public enum FieldMotionManager.GET_TYPE // TypeDefIndex: 9364
{
	// Fields
	public int value__; // 0x0
	public const FieldMotionManager.GET_TYPE ENEMY_POP_POINT = 0;
	public const FieldMotionManager.GET_TYPE POP_ENEMY = 1;
	public const FieldMotionManager.GET_TYPE PLAYER_POP_POINT = 2;
	public const FieldMotionManager.GET_TYPE POP_PLAYER = 3;
	public const FieldMotionManager.GET_TYPE PLAYER_TACTICAL = 4;
	public const FieldMotionManager.GET_TYPE ENEMY_TACTOCAL = 5;
	public const FieldMotionManager.GET_TYPE NPC_BATTLE = 6;
	public const FieldMotionManager.GET_TYPE NPC_TACTICAL = 7;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC444D4 Offset: 0xC444D4 VA: 0xC444D4
private sealed class FieldMotionManager.<GetGameObject>c__AnonStorey0 // TypeDefIndex: 9365
{
	// Fields
	internal string name; // 0x10

	// Methods

	// RVA: 0x1366D10 Offset: 0x1366D10 VA: 0x1366D10
	public void .ctor() { }

	// RVA: 0x136784C Offset: 0x136784C VA: 0x136784C
	internal GameObject <>m__0(BattleFieldMotionComponent comp) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC444E4 Offset: 0xC444E4 VA: 0xC444E4
private sealed class FieldMotionManager.<GetTransform>c__AnonStorey1 // TypeDefIndex: 9366
{
	// Fields
	internal int index; // 0x10

	// Methods

	// RVA: 0x1366F3C Offset: 0x1366F3C VA: 0x1366F3C
	public void .ctor() { }

	// RVA: 0x13678C8 Offset: 0x13678C8 VA: 0x13678C8
	internal Transform <>m__0(BattleFieldMotionComponent comp) { }

	// RVA: 0x1367900 Offset: 0x1367900 VA: 0x1367900
	internal Transform <>m__1(BattleFieldMotionComponent comp) { }

	// RVA: 0x1367938 Offset: 0x1367938 VA: 0x1367938
	internal Transform <>m__2(BattleFieldMotionComponent comp) { }

	// RVA: 0x1367970 Offset: 0x1367970 VA: 0x1367970
	internal Transform <>m__3(BattleFieldMotionComponent comp) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC444F4 Offset: 0xC444F4 VA: 0xC444F4
private sealed class FieldMotionManager.<GetTargetTransform>c__AnonStorey2 // TypeDefIndex: 9367
{
	// Fields
	internal FieldMotionManager.GET_TYPE type; // 0x10
	internal int index; // 0x14

	// Methods

	// RVA: 0x1367064 Offset: 0x1367064 VA: 0x1367064
	public void .ctor() { }

	// RVA: 0x1367884 Offset: 0x1367884 VA: 0x1367884
	internal Transform <>m__0(BattleFieldMotionComponent comp) { }
}

// Namespace: 
public class TrackingMoveCtCComponent : MonoBehaviour // TypeDefIndex: 9368
{
	// Fields
	public Camera before; // 0x18
	public Camera after; // 0x20
	public GameObject targetObject; // 0x28
	public Vector3 addpos; // 0x30
	private bool updateFlg; // 0x3C

	// Methods

	// RVA: 0x188680C Offset: 0x188680C VA: 0x188680C
	public void .ctor() { }

	// RVA: 0x1886884 Offset: 0x1886884 VA: 0x1886884
	public void Set(Camera a, Camera b, GameObject c, Vector3 d) { }

	// RVA: 0x1886898 Offset: 0x1886898 VA: 0x1886898
	public void startAct() { }

	// RVA: 0x1886AD4 Offset: 0x1886AD4 VA: 0x1886AD4
	public void stopAct() { }

	// RVA: 0x1886ADC Offset: 0x1886ADC VA: 0x1886ADC
	private void Update() { }

	// RVA: 0x18868A4 Offset: 0x18868A4 VA: 0x18868A4
	private void upDatePos() { }
}

// Namespace: 
public class PlayerFieldStatus : BattleFieldStatus // TypeDefIndex: 9369
{
	// Methods

	// RVA: 0x177E55C Offset: 0x177E55C VA: 0x177E55C
	public void .ctor() { }

	// RVA: 0x177E564 Offset: 0x177E564 VA: 0x177E564 Slot: 6
	public override double[] getAiParam(BattleData bData, ConditionsInformation.PARAMATER param, int turn, int actCnt, long[] checkparams) { }
}

// Namespace: 
public class BattleResultBondsComponent : BaseMonoBehaviour // TypeDefIndex: 9370
{
	// Fields
	private static readonly float SVT_GAP_5; // 0x0
	private static readonly float SVT_GAP_6; // 0x4
	private static readonly int CONF_LABEL_MAX_WIDTH; // 0x8
	private static readonly int CONF_SERVANT_COIN_PLUS_HEIGHT; // 0xC
	public BattleResultComponent parentComp; // 0x18
	public PlayMakerFSM myFsm; // 0x20
	public BattleWindowComponent window; // 0x28
	public BattleResultBondsIconComponent[] collects; // 0x30
	public UserServantCollectionEntity[] oldCollections; // 0x38
	public BattleFriendshipRewardInfo[] rewardInfos; // 0x40
	public GameObject upRoot; // 0x48
	public SimpleAnimation levelUpSimpleAnim; // 0x50
	public Animation levelUpAnim; // 0x58
	public Transform figureRoot; // 0x60
	public GetSvts[] getJoinSvtList; // 0x68
	public BattleWindowComponent confwindow; // 0x70
	public BattleResultMasterUpStatusComponent lvComp; // 0x78
	public UISprite confSprite; // 0x80
	public Transform confRoot; // 0x88
	public List<GameObject> conflist; // 0x90
	public GameObject confPrefab; // 0x98
	public UILabel rankupConfLabel; // 0xA0
	[SerializeField] // RVA: 0xC66938 Offset: 0xC66938 VA: 0xC66938
	private UISprite bgFrame; // 0xA8
	[SerializeField] // RVA: 0xC66948 Offset: 0xC66948 VA: 0xC66948
	private int buddyPointInfoWindowHeight; // 0xB0
	private bool openBoundsFlg; // 0xB4
	private bool updateFlg; // 0xB5
	private SePlayer MeterSePlayer; // 0xB8
	private AssetData resultAssetData; // 0xC0
	private List<UIUnityRenderer> effectUIList; // 0xC8
	private BattleFriendshipRewardInfo[] showList; // 0xD0
	private int showIndex; // 0xD8
	private float tempSaveTimeScale; // 0xDC
	private bool bondsCountUp; // 0xE0
	private int baseFriendshipExp; // 0xE4
	private int colIndex; // 0xE8
	private UIStandFigureR standfigure; // 0xF0
	private BattleResultBondsIconComponent openCollect; // 0xF8
	[CompilerGeneratedAttribute] // RVA: 0xC66958 Offset: 0xC66958 VA: 0xC66958
	private static Func<BattleResultBondsIconComponent, bool> <>f__am$cache0; // 0x10
	[CompilerGeneratedAttribute] // RVA: 0xC66968 Offset: 0xC66968 VA: 0xC66968
	private static Action <>f__am$cache1; // 0x18

	// Methods

	// RVA: 0x11539BC Offset: 0x11539BC VA: 0x11539BC
	public void .ctor() { }

	// RVA: 0x1153A3C Offset: 0x1153A3C VA: 0x1153A3C
	public void Init() { }

	// RVA: 0x1153B90 Offset: 0x1153B90 VA: 0x1153B90
	public void setResultData(DeckData myDeck, UserServantCollectionEntity[] oldCollects, BattleFriendshipRewardInfo[] inRewardInfos, int followerType, AssetData resultAsset, BattleUserServantData[] usrSvts, int baseFriendshipExp, GetSvts[] getJoinSvts, BattleResultComponent.resultData battleResult, bool isHideBuddyPointResult) { }

	// RVA: 0x115486C Offset: 0x115486C VA: 0x115486C
	public long getUsetSvtId(DeckData deck, int index) { }

	// RVA: 0x11547D4 Offset: 0x11547D4 VA: 0x11547D4
	public UserServantCollectionEntity getServantCollection(UserServantCollectionEntity[] collects, int svtId) { }

	// RVA: 0x1154920 Offset: 0x1154920 VA: 0x1154920
	public void Open() { }

	// RVA: 0x1154AF4 Offset: 0x1154AF4 VA: 0x1154AF4
	public void OpenEnd() { }

	// RVA: 0x1155018 Offset: 0x1155018 VA: 0x1155018
	public void finishUpdateValue() { }

	// RVA: 0x11551B0 Offset: 0x11551B0 VA: 0x11551B0
	public void UpdateValue(float val) { }

	// RVA: 0x115525C Offset: 0x115525C VA: 0x115525C
	public void SkipUpdateValue() { }

	// RVA: 0x11552FC Offset: 0x11552FC VA: 0x11552FC
	public bool isCollectsSvt() { }

	// RVA: 0x1155330 Offset: 0x1155330 VA: 0x1155330
	public void checkBondsUp() { }

	// RVA: 0x1155D2C Offset: 0x1155D2C VA: 0x1155D2C
	public void CheckFormalJoin(BattleResultBondsIconComponent collect) { }

	// RVA: 0x1156058 Offset: 0x1156058 VA: 0x1156058
	public void addConfObject(string text, float posY, int iconImageId = -1, bool isCoin = False, bool isSaintGraph = False) { }

	// RVA: 0x1156470 Offset: 0x1156470 VA: 0x1156470
	private void CreateRewardEffect(AssetData data, UISprite targetIcon, string effectName) { }

	// RVA: 0x1156724 Offset: 0x1156724 VA: 0x1156724
	public void endMoveFigure() { }

	// RVA: 0x11572CC Offset: 0x11572CC VA: 0x11572CC
	public void openedBondUp() { }

	// RVA: 0x115735C Offset: 0x115735C VA: 0x115735C
	public void checkShow() { }

	// RVA: 0x1157528 Offset: 0x1157528 VA: 0x1157528
	public void closeBondUp() { }

	// RVA: 0x1157708 Offset: 0x1157708 VA: 0x1157708
	public void endCloseBondUp() { }

	// RVA: 0x115776C Offset: 0x115776C VA: 0x115776C
	public void Close() { }

	// RVA: 0x1157800 Offset: 0x1157800 VA: 0x1157800
	public void endClose() { }

	// RVA: 0x1157940 Offset: 0x1157940 VA: 0x1157940
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE728 Offset: 0xCCE728 VA: 0xCCE728
	// RVA: 0x11579C0 Offset: 0x11579C0 VA: 0x11579C0
	private static bool <Open>m__0(BattleResultBondsIconComponent col) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE738 Offset: 0xCCE738 VA: 0xCCE738
	// RVA: 0x11579EC Offset: 0x11579EC VA: 0x11579EC
	private static void <CheckFormalJoin>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE748 Offset: 0xCCE748 VA: 0xCCE748
	// RVA: 0x11579F0 Offset: 0x11579F0 VA: 0x11579F0
	private void <checkShow>m__2() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44504 Offset: 0xC44504 VA: 0xC44504
private sealed class BattleResultBondsComponent.<setResultData>c__AnonStorey0 // TypeDefIndex: 9371
{
	// Fields
	internal long userSvtId; // 0x10

	// Methods

	// RVA: 0x1158B70 Offset: 0x1158B70 VA: 0x1158B70
	public void .ctor() { }

	// RVA: 0x1158B78 Offset: 0x1158B78 VA: 0x1158B78
	internal bool <>m__0(BattleBuddyPointInfo x) { }
}

// Namespace: 
public class BattleResultBondsIconComponent : MonoBehaviour // TypeDefIndex: 9372
{
	// Fields
	public GameObject root; // 0x18
	public GameObject rootNot; // 0x20
	public ServantFaceIconComponent faceIcon; // 0x28
	public FriendshipGaugeSelector gaugeSelector; // 0x30
	public UILabel atlabel; // 0x38
	public UISprite maxSprite; // 0x40
	public GameObject levelUpObject; // 0x48
	public UILabel bonuslabel; // 0x50
	[SerializeField] // RVA: 0xC66978 Offset: 0xC66978 VA: 0xC66978
	private BattleResultBuddyPointInfoComponent buddyPointInfo; // 0x58
	private IFriendshipGauge gaugeComponent; // 0x60
	private bool isUse; // 0x68
	private bool isHeroine; // 0x69
	private long userId; // 0x70
	private int svtId; // 0x78
	private long userSvtId; // 0x80
	private int svtLimit; // 0x88
	private int svtLv; // 0x8C
	private int friendshipId; // 0x90
	private int friendship; // 0x94
	private int friendshipRank; // 0x98
	private int maxLimitCount; // 0x9C
	private int nextFriendShipRank; // 0xA0
	private int nextFriendship; // 0xA4
	private int baseFriendshipExp; // 0xA8
	private readonly int nosupportFontSize; // 0xAC
	private float friendshipLabelArea; // 0xB0
	private readonly float supportLabelWidth; // 0xB4
	private readonly float nosupportLabelWidth; // 0xB8
	private readonly float parenthesisAjust; // 0xBC
	private readonly float friendshipLabelSpace; // 0xC0
	private bool isMax; // 0xC4
	private int maxFriendShipRank; // 0xC8
	private BattleBuddyPointInfo resultBuddyPointInfo; // 0xD0
	private int beforeBuddyRank; // 0xD8

	// Methods

	// RVA: 0x1158BB4 Offset: 0x1158BB4 VA: 0x1158BB4
	public void .ctor() { }

	// RVA: 0x1158BE0 Offset: 0x1158BE0 VA: 0x1158BE0
	public long getUserId() { }

	// RVA: 0x1158BE8 Offset: 0x1158BE8 VA: 0x1158BE8
	public int getSvtId() { }

	// RVA: 0x1158BF0 Offset: 0x1158BF0 VA: 0x1158BF0
	public long getUserSvtId() { }

	// RVA: 0x1158BF8 Offset: 0x1158BF8 VA: 0x1158BF8
	public int getSvtLimitCount() { }

	// RVA: 0x1158C00 Offset: 0x1158C00 VA: 0x1158C00
	public int getLv() { }

	// RVA: 0x1158C08 Offset: 0x1158C08 VA: 0x1158C08
	public int getPrevFriendShipRank() { }

	// RVA: 0x1158C10 Offset: 0x1158C10 VA: 0x1158C10
	public int getNextFriendShipRank() { }

	// RVA: 0x1158C18 Offset: 0x1158C18 VA: 0x1158C18
	public int getMaxLimitCount() { }

	// RVA: 0x1158C20 Offset: 0x1158C20 VA: 0x1158C20
	public bool IsUse() { }

	// RVA: 0x1158C28 Offset: 0x1158C28 VA: 0x1158C28
	public void setServantData(UserServantCollectionEntity userSvtCol, UserServantEntity userSvtEnt, int iconLimitCnt, int baseFriendshipExp, bool isNoFollower, int afterLimitCnt) { }

	// RVA: 0x115914C Offset: 0x115914C VA: 0x115914C
	public void SetBuddyPointInfo(BattleBuddyPointInfo pointInfo, int eventId) { }

	// RVA: 0x1159324 Offset: 0x1159324 VA: 0x1159324
	public bool setNextServantData(UserServantCollectionEntity userSvtCol) { }

	// RVA: 0x1159540 Offset: 0x1159540 VA: 0x1159540
	public void setHeroine() { }

	// RVA: 0x115954C Offset: 0x115954C VA: 0x115954C
	public bool changeGauge(float val) { }

	// RVA: 0x11599A4 Offset: 0x11599A4 VA: 0x11599A4
	public bool isChangeRank() { }

	// RVA: 0x11599C8 Offset: 0x11599C8 VA: 0x11599C8
	private int CalcBonusExp() { }

	// RVA: 0x11599DC Offset: 0x11599DC VA: 0x11599DC
	public void LayoutFriendshipValue() { }

	// RVA: 0x1159FA4 Offset: 0x1159FA4 VA: 0x1159FA4
	public void ClearFaceAtlas() { }

	// RVA: 0x1159FD4 Offset: 0x1159FD4 VA: 0x1159FD4
	public void StartUpdateBuddyPoint() { }

	// RVA: 0x115A4A4 Offset: 0x115A4A4 VA: 0x115A4A4
	public void InitBuddyPointInfo() { }

	// RVA: 0x115A7C4 Offset: 0x115A7C4 VA: 0x115A7C4
	public void FinishBuddyPointInfoUpdate() { }
}

// Namespace: 
public class BattleResultBuddyPointInfoComponent : MonoBehaviour // TypeDefIndex: 9373
{
	// Fields
	private const int MAX_BUDDY_POINT = 9999999;
	private const string BUDDY_RANK_LABEL_KEY = "BATTLE_BUDDY_POINT_RANK_{0}";
	private const string BUDDY_RANK_UP_ASSET_NAME = "bit_buddy_rankup";
	[SerializeField] // RVA: 0xC66988 Offset: 0xC66988 VA: 0xC66988
	private UILabel buddyPointRankLabel; // 0x18
	[SerializeField] // RVA: 0xC66998 Offset: 0xC66998 VA: 0xC66998
	private UILabel buddyPointLabel; // 0x20
	[SerializeField] // RVA: 0xC669A8 Offset: 0xC669A8 VA: 0xC669A8
	private GameObject buddyPointRankUpObject; // 0x28
	[SerializeField] // RVA: 0xC669B8 Offset: 0xC669B8 VA: 0xC669B8
	private int pointLabelMaxWidth; // 0x30
	private BattleBuddyPointInfo resultBuddyPointInfo; // 0x38
	private int beforeBuddyRank; // 0x40
	private int buddyPointEventId; // 0x44
	private EventServantPointRankMaster rankMaster; // 0x48

	// Methods

	// RVA: 0x115AA38 Offset: 0x115AA38 VA: 0x115AA38
	public void .ctor() { }

	// RVA: 0x1159200 Offset: 0x1159200 VA: 0x1159200
	public void SetBuddyPointInfo(BattleBuddyPointInfo buddyPointInfo, int eventId) { }

	// RVA: 0x115A06C Offset: 0x115A06C VA: 0x115A06C
	public void StartUpdateBuddyPoint() { }

	// RVA: 0x115A540 Offset: 0x115A540 VA: 0x115A540
	public void UpdateBuddyPointInfo(float val) { }

	// RVA: 0x115AA48 Offset: 0x115AA48 VA: 0x115AA48
	private bool IsRankUpBuddyRank(int buddyPoint) { }

	// RVA: 0x115A85C Offset: 0x115A85C VA: 0x115A85C
	public void FinishUpdateBuddyPoint() { }

	// RVA: 0x115AB3C Offset: 0x115AB3C VA: 0x115AB3C
	private void PlayBuddyRankUp() { }
}

// Namespace: 
public class BattleResultComponent : BaseMonoBehaviour // TypeDefIndex: 9374
{
	// Fields
	public GameObject endtargetObject; // 0x18
	public PlayMakerFSM fsm; // 0x20
	public GameObject obj_basebg; // 0x28
	public GameObject obj_fronttouch; // 0x30
	public BattleResultBondsComponent bondsResult; // 0x38
	public BattleResultExpComponent expResult; // 0x40
	public BattleResultItemComponent itemResult; // 0x48
	public BattleResultFriendComponent friendResult; // 0x50
	public BattleResultEventItemComponent eventItemResult; // 0x58
	public BattleResultEventDamageItemComponent eventDamageItemResult; // 0x60
	public GameObject FriendIconPrefab; // 0x68
	public UISprite resultSprite; // 0x70
	public BattleRetryConfirmComponent battleRetryConfirmComponent; // 0x78
	private ServantRewardAction ServantRewardActionComp; // 0x80
	private string eventEndTitle; // 0x88
	private string eventEndMessage; // 0x90
	private BattleResultComponent.resultData battleResult; // 0x98
	private BattleEventTutorial eventTutorial; // 0xA0
	private const string FREE_SHOP_ID_KEY = "freeShopIds";
	private const string RETURN_RARE_PRI_SHOP_ID_KEY = "returnRarePriShopIds";
	[CompilerGeneratedAttribute] // RVA: 0xC669C8 Offset: 0xC669C8 VA: 0xC669C8
	private static Converter<int, string> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC669D8 Offset: 0xC669D8 VA: 0xC669D8
	private static Converter<int, string> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x115AF48 Offset: 0x115AF48 VA: 0x115AF48
	public void .ctor() { }

	// RVA: 0x115AF50 Offset: 0x115AF50 VA: 0x115AF50
	public BattleResultComponent.resultData getBattleResult() { }

	// RVA: 0x115AF58 Offset: 0x115AF58 VA: 0x115AF58
	public void Init(Action releasePerformanceObject) { }

	// RVA: 0x115BDFC Offset: 0x115BDFC VA: 0x115BDFC
	public void StartResult(GameObject target, string endEvent, BattlePerformance perf) { }

	// RVA: 0x115BF6C Offset: 0x115BF6C VA: 0x115BF6C
	public void checkStart() { }

	// RVA: 0x115BFD0 Offset: 0x115BFD0 VA: 0x115BFD0
	public void setTouch(bool flg) { }

	// RVA: 0x115C008 Offset: 0x115C008 VA: 0x115C008
	public void setBg(bool flg) { }

	// RVA: 0x115C040 Offset: 0x115C040 VA: 0x115C040
	public void Set(string jsonstr, BattleEventTutorial tutorial, AssetData resultAsset, int[] viewGroupIds, BattleData bData) { }

	// RVA: 0x115EECC Offset: 0x115EECC VA: 0x115EECC
	public void OpenTutorial() { }

	// RVA: 0x115F0F4 Offset: 0x115F0F4 VA: 0x115F0F4
	public void OpenBonds() { }

	// RVA: 0x115F150 Offset: 0x115F150 VA: 0x115F150
	public void OpenExp() { }

	// RVA: 0x115F774 Offset: 0x115F774 VA: 0x115F774
	public void OpenItems() { }

	// RVA: 0x115FA20 Offset: 0x115FA20 VA: 0x115FA20
	public void endCloseEndEventMessage(bool flg) { }

	// RVA: 0x115FA80 Offset: 0x115FA80 VA: 0x115FA80
	public void OpenFriend() { }

	// RVA: 0x115FDBC Offset: 0x115FDBC VA: 0x115FDBC
	public void OpenEventItems() { }

	// RVA: 0x1160164 Offset: 0x1160164 VA: 0x1160164
	public void CheckRestItem() { }

	// RVA: 0x11601F8 Offset: 0x11601F8 VA: 0x11601F8
	public void OpenEventDamageItems() { }

	// RVA: 0x11603B8 Offset: 0x11603B8 VA: 0x11603B8
	public void checkNew(int resultType) { }

	// RVA: 0x116079C Offset: 0x116079C VA: 0x116079C
	public void endNewView() { }

	// RVA: 0x1160800 Offset: 0x1160800 VA: 0x1160800
	public void showServantRewardAction(long userSvtId, Gift.Type type) { }

	// RVA: 0x11609A4 Offset: 0x11609A4 VA: 0x11609A4
	public void openNewServantView(long userSvtId, bool isNew, bool isDoEffect, Action action) { }

	// RVA: 0x1160CFC Offset: 0x1160CFC VA: 0x1160CFC
	public void openNewCommandCodeView(long userCommandCodeId, Action action) { }

	// RVA: 0x1160E68 Offset: 0x1160E68 VA: 0x1160E68
	public void openTouchWait() { }

	// RVA: 0x1160E70 Offset: 0x1160E70 VA: 0x1160E70
	public void EndResult() { }

	// RVA: 0x11610BC Offset: 0x11610BC VA: 0x11610BC
	public void OpenRetryQuest() { }

	// RVA: 0x116285C Offset: 0x116285C VA: 0x116285C
	public void EndRetryConfirmDialog(bool isDecide, int boostId = 0) { }

	// RVA: 0x11628F8 Offset: 0x11628F8 VA: 0x11628F8
	public void OpenFollowerSceneForRetry(int boostId = 0) { }

	// RVA: 0x1162C30 Offset: 0x1162C30 VA: 0x1162C30
	public void PushFollowerScene(int boostId = 0) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE758 Offset: 0xCCE758 VA: 0xCCE758
	// RVA: 0x1162DC4 Offset: 0x1162DC4 VA: 0x1162DC4
	private static string <Set>m__0(int x) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCE768 Offset: 0xCCE768 VA: 0xCCE768
	// RVA: 0x1162DEC Offset: 0x1162DEC VA: 0x1162DEC
	private static string <Set>m__1(int x) { }
}

// Namespace: 
public class BattleResultComponent.resultData // TypeDefIndex: 9375
{
	// Fields
	public int battleId; // 0x10
	public int eventId; // 0x14
	public string eventEndTitle; // 0x18
	public string eventEndMessage; // 0x20
	public int phaseClearQp; // 0x28
	public int originalPhaseClearQp; // 0x2C
	public int firstClearRewardQp; // 0x30
	public int panelEventPoint; // 0x34
	public DeckData myDeck; // 0x38
	public UserServantEntity[] oldUserSvt; // 0x40
	public UserEquipEntity[] oldUserEquip; // 0x48
	public UserEventEntity[] oldUserEvent; // 0x50
	public UserGameEntity[] oldUserGame; // 0x58
	public UserQuestEntity[] oldUserQuest; // 0x60
	public UserEventPointEntity[] oldUserEventPoint; // 0x68
	public UserServantCollectionEntity[] oldUserSvtCollection; // 0x70
	public QuestRewardInfo[] rewardInfos; // 0x78
	public QuestRewardInfo[] resultQuestPhaseRewardInfos; // 0x80
	public MasterLvRewardInfo[] masterLvRewardInfos; // 0x88
	public BattleDropItem[] resultDropInfos; // 0x90
	public BattleDropItem[] resultEventRewardInfos; // 0x98
	public BattleDropItem[] resultDamageRewardInfos; // 0xA0
	public BattleDropItem[] resultAfterEventRewardInfos; // 0xA8
	public BattleDropItem[] resultEventPanelRewardInfos; // 0xB0
	public EventPointWinReward[] eventPointWinReward; // 0xB8
	public EventRaceBoostInfo raceResult; // 0xC0
	public CostumeReleaseAnnounce[] costumeReleaseAnnounce; // 0xC8
	public CostumeReleaseAnnounce[] costumeGetAnnounce; // 0xD0
	public EventTowerReward[] eventTowerReward; // 0xD8
	public QuestRewardInfo[] resultEventTowerRewardInfos; // 0xE0
	public QuestRewardInfo[] resultBoostItemRewardInfos; // 0xE8
	public QuestRewardInfo[] resultEventBoardGameTokenRewardInfos; // 0xF0
	public WarClearReward[] warClearReward; // 0xF8
	public long followerId; // 0x100
	public int followerType; // 0x108
	public int followerStatus; // 0x10C
	public int followerClassId; // 0x110
	public int followerSupportDeckId; // 0x114
	public BattleFriendshipRewardInfo[] friendshipRewardInfos; // 0x118
	public long addDamagePoint; // 0x120
	public int resultDispFlag; // 0x128
	public int[] disableResultDispTypes; // 0x130
	public int battleResult; // 0x138
	public int eventPointBoostRate; // 0x13C
	public DropUpInfo[] dropUpInfos; // 0x140
	public int[] freeShopIds; // 0x148
	public int[] returnRarePriShopIds; // 0x150
	public string tutorialMessage; // 0x158
	public UserSuperBossEntity[] oldUserEventSuperBoss; // 0x160
	public int eventActivityPointAddFlag; // 0x168
	public EventConquestInfo[] eventConquestInfos; // 0x170
	public bool isTrialQuestNewRecord; // 0x178
	public int friendshipExpBase; // 0x17C
	public GetSvts[] getJoinSvts; // 0x180
	public bool isEffectDisappearBanner; // 0x188
	public LimitImageAnnounce[] limitImageAnnounces; // 0x190
	public BattleBuddyPointInfo[] buddyPointInfos; // 0x198

	// Methods

	// RVA: 0x1162F80 Offset: 0x1162F80 VA: 0x1162F80
	public void .ctor() { }

	// RVA: 0x115D284 Offset: 0x115D284 VA: 0x115D284
	public bool isWin() { }

	// RVA: 0x115EE10 Offset: 0x115EE10 VA: 0x115EE10
	public bool checkResultDispFlag(BattleResultComponent.resultData.ResultDispFlagEnum flag) { }

	// RVA: 0x115EE00 Offset: 0x115EE00 VA: 0x115EE00
	public void enableResultDispFlag(BattleResultComponent.resultData.ResultDispFlagEnum flag) { }

	// RVA: 0x115D2A4 Offset: 0x115D2A4 VA: 0x115D2A4
	public void disableResultDispFlag(BattleResultComponent.resultData.ResultDispFlagEnum flag) { }

	// RVA: 0x115D294 Offset: 0x115D294 VA: 0x115D294
	public void setDefaultDispFlag() { }

	// RVA: 0x115BF64 Offset: 0x115BF64 VA: 0x115BF64
	public void clearAllDispFlag() { }

	// RVA: 0x115EE20 Offset: 0x115EE20 VA: 0x115EE20
	public bool IsGetJoinSvtsEffect() { }
}

// Namespace: 
public enum BattleResultComponent.resultData.ResultDispFlagEnum // TypeDefIndex: 9376
{
	// Fields
	public int value__; // 0x0
	public const BattleResultComponent.resultData.ResultDispFlagEnum BONDS = 1;
	public const BattleResultComponent.resultData.ResultDispFlagEnum EXP = 2;
	public const BattleResultComponent.resultData.ResultDispFlagEnum ITEM = 4;
	public const BattleResultComponent.resultData.ResultDispFlagEnum EVENT_ITEM = 8;
	public const BattleResultComponent.resultData.ResultDispFlagEnum DAMAGE_ITEM = 16;
	public const BattleResultComponent.resultData.ResultDispFlagEnum FRIEND = 32;
	public const BattleResultComponent.resultData.ResultDispFlagEnum TUTORIAL = 64;
	public const BattleResultComponent.resultData.ResultDispFlagEnum FRIEND_POINT = 128;
	public const BattleResultComponent.resultData.ResultDispFlagEnum SUPER_BOSS = 256;
	public const BattleResultComponent.resultData.ResultDispFlagEnum NO_DAMAGE_ITEM = 512;
	public const BattleResultComponent.resultData.ResultDispFlagEnum EVENT_POINT_RESULT = 1024;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RETRY_QUEST = 2048;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_6 = 4096;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_7 = 8192;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_8 = 16384;
	public const BattleResultComponent.resultData.ResultDispFlagEnum RESERVE_9 = 32768;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44514 Offset: 0xC44514 VA: 0xC44514
private sealed class BattleResultComponent.<checkNew>c__AnonStorey0 // TypeDefIndex: 9377
{
	// Fields
	internal BattleDropItem newDrop; // 0x10
	internal BattleResultComponent $this; // 0x18

	// Methods

	// RVA: 0x1160614 Offset: 0x1160614 VA: 0x1160614
	public void .ctor() { }

	// RVA: 0x1162E14 Offset: 0x1162E14 VA: 0x1162E14
	internal void <>m__0() { }
}

// Namespace: 
public class BattleResultEventDamageItemComponent : BattleResultEventItemComponent // TypeDefIndex: 9378
{
	// Fields
	private static readonly string DAMAGE_POINT_REWARD_AT_LOCALE_KEY; // 0x0
	private static readonly string DAMAGE_POINT_REWARD_TITLE_NAME; // 0x8
	private static readonly string DAMAGE_POINT_REWARD_SPRITE_NAME; // 0x10
	protected UserEventRaidMaster usrEvent; // 0xF0

	// Methods

	// RVA: 0x1162F88 Offset: 0x1162F88 VA: 0x1162F88
	public void .ctor() { }

	// RVA: 0x116304C Offset: 0x116304C VA: 0x116304C
	private bool hasEventDamage() { }

