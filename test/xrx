	// RVA: 0x1B5BA70 Offset: 0x1B5BA70 VA: 0x1B5BA70
	public void OnReplaceCommandCardEquipment() { }

	// RVA: 0x1B5BB08 Offset: 0x1B5BB08 VA: 0x1B5BB08
	public void OnReplaceReset() { }

	// RVA: 0x1B5BBA8 Offset: 0x1B5BBA8 VA: 0x1B5BBA8
	public void OnClickEmptyEquip() { }

	// RVA: 0x1B5BC2C Offset: 0x1B5BC2C VA: 0x1B5BC2C
	public void OnClickCommandCode() { }

	// RVA: 0x1B5BCB0 Offset: 0x1B5BCB0 VA: 0x1B5BCB0
	public void OnLongPushCommandCode() { }

	// RVA: 0x1B5B83C Offset: 0x1B5B83C VA: 0x1B5B83C
	private void SetHaveQpInfo() { }

	// RVA: 0x1B5765C Offset: 0x1B5765C VA: 0x1B5765C
	public void SetExecuteButtonState() { }

	// RVA: 0x1B59990 Offset: 0x1B59990 VA: 0x1B59990
	private void SetRemoveButttonState(bool isEnable) { }

	// RVA: 0x1B59CD8 Offset: 0x1B59CD8 VA: 0x1B59CD8
	private void SetReplaceButtonState(bool isEnable) { }

	// RVA: 0x1B58FC0 Offset: 0x1B58FC0 VA: 0x1B58FC0
	public void SetStateInfoMsg(CombineRootComponent.StateType state) { }

	// RVA: 0x1B5BED8 Offset: 0x1B5BED8 VA: 0x1B5BED8
	public UserServantEntity GetBaseSelectedServant() { }

	// RVA: 0x1B5C024 Offset: 0x1B5C024 VA: 0x1B5C024
	public UserCommandCodeEntity GetBaseSelectedCommandCode() { }

	// RVA: 0x1B5C02C Offset: 0x1B5C02C VA: 0x1B5C02C
	public long GetTargetIndexCommandCodeId(int index) { }

	// RVA: 0x1B5C090 Offset: 0x1B5C090 VA: 0x1B5C090
	public UserCommandCodeEntity GetNowEquipedCommandCode() { }

	// RVA: 0x1B5C098 Offset: 0x1B5C098 VA: 0x1B5C098
	public int get_GetTargetCardIndex() { }

	// RVA: 0x1B5C138 Offset: 0x1B5C138 VA: 0x1B5C138
	public BattleCommand.TYPE get_GetTargetCardType() { }

	// RVA: 0x1B5C168 Offset: 0x1B5C168 VA: 0x1B5C168
	public long get_GetSelectedUserCommandCodeId() { }

	// RVA: 0x1B5C204 Offset: 0x1B5C204 VA: 0x1B5C204
	public void PlayUnlockEffect(int unlockCardIdx, Action callback) { }

	// RVA: 0x1B5C5C4 Offset: 0x1B5C5C4 VA: 0x1B5C5C4
	public void PlayLockEffect(int lockCardIdx, Action callback) { }

	// RVA: 0x1B5C800 Offset: 0x1B5C800 VA: 0x1B5C800
	public void PlayEquipEffect(int targetCardIdx, Action callback) { }

	// RVA: 0x1B5CD5C Offset: 0x1B5CD5C VA: 0x1B5CD5C
	public void PlayRemoveEffect(int targetCardIdx, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3C904 Offset: 0xD3C904 VA: 0xD3C904
	// RVA: 0x1B5D30C Offset: 0x1B5D30C VA: 0x1B5D30C
	public IEnumerator PlayReplaceEffect(int targetCardIdx, Action callback) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3C914 Offset: 0xD3C914 VA: 0xD3C914
	// RVA: 0x1B5D3C0 Offset: 0x1B5D3C0 VA: 0x1B5D3C0
	public IEnumerator PlaySelfAttachReplaceEffect(int removeCardIdx, int attachCardIdx, Action callback) { }

	// RVA: 0x1B5D0CC Offset: 0x1B5D0CC VA: 0x1B5D0CC
	private CommandCodeEffectComponent CreateRemoveEffectOnCard(int targetCommandCardIdx, int commandCodeId) { }

	// RVA: 0x1B5CB28 Offset: 0x1B5CB28 VA: 0x1B5CB28
	private CommandCodeEffectComponent CreateAttachEffectOnCard(int targetCommandCardIdx, int commandCodeId) { }

	// RVA: 0x1B5D558 Offset: 0x1B5D558 VA: 0x1B5D558
	private CommandCodeEffectComponent CreateReplaceEffectOnCode() { }

	// RVA: 0x1B5C938 Offset: 0x1B5C938 VA: 0x1B5C938
	private CommandCodeEffectComponent CreateAttachEffectOnCode() { }

	// RVA: 0x1B5D748 Offset: 0x1B5D748 VA: 0x1B5D748
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C924 Offset: 0xD3C924 VA: 0xD3C924
	// RVA: 0x1B5D8A4 Offset: 0x1B5D8A4 VA: 0x1B5D8A4
	private void <OpenUnlockDialog>m__0(bool isDecide) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C934 Offset: 0xD3C934 VA: 0xD3C934
	// RVA: 0x1B5D914 Offset: 0x1B5D914 VA: 0x1B5D914
	private void <OpenLockDialog>m__1(bool isDecide) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C944 Offset: 0xD3C944 VA: 0xD3C944
	// RVA: 0x1B5D984 Offset: 0x1B5D984 VA: 0x1B5D984
	private void <OpenReturnDialog>m__2(bool isDecide) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C954 Offset: 0xD3C954 VA: 0xD3C954
	// RVA: 0x1B5D9B4 Offset: 0x1B5D9B4 VA: 0x1B5D9B4
	private static void <OnLongPushCommandCode>m__3(bool isDecide) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB07D0 Offset: 0xCB07D0 VA: 0xCB07D0
private sealed class CommandCardEquipmentControl.<OpenEquippedCommandCodeAttachDialog>c__AnonStorey2 // TypeDefIndex: 9497
{
	// Fields
	internal bool isCommandCardEmpty; // 0x10
	internal CommandCardEquipmentControl $this; // 0x18

	// Methods

	// RVA: 0x1B5B680 Offset: 0x1B5B680 VA: 0x1B5B680
	public void .ctor() { }

	// RVA: 0x1B5DA18 Offset: 0x1B5DA18 VA: 0x1B5DA18
	internal void <>m__0(bool isDecide) { }

	// RVA: 0x1B5DAB8 Offset: 0x1B5DAB8 VA: 0x1B5DAB8
	internal void <>m__1(bool isDecide) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB07E0 Offset: 0xCB07E0 VA: 0xCB07E0
private sealed class CommandCardEquipmentControl.<PlayRemoveEffect>c__AnonStorey3 // TypeDefIndex: 9498
{
	// Fields
	internal Action callback; // 0x10
	internal CommandCardEquipmentControl $this; // 0x18

	// Methods

	// RVA: 0x1B5D0C4 Offset: 0x1B5D0C4 VA: 0x1B5D0C4
	public void .ctor() { }

	// RVA: 0x1B5DB74 Offset: 0x1B5DB74 VA: 0x1B5DB74
	internal void <>m__0() { }

	// RVA: 0x1B5DC1C Offset: 0x1B5DC1C VA: 0x1B5DC1C
	internal void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB07F0 Offset: 0xCB07F0 VA: 0xCB07F0
private sealed class CommandCardEquipmentControl.<PlayReplaceEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9499
{
	// Fields
	internal int targetCardIdx; // 0x10
	internal CommandCodeEffectComponent <cardDetachEffect>__0; // 0x18
	internal CommandCodeEffectComponent <flashEffectComponent>__0; // 0x20
	internal CommandCodeEffectComponent <appearEffectComponent>__0; // 0x28
	internal Action callback; // 0x30
	internal CommandCardEquipmentControl $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD492A4 Offset: 0xD492A4 VA: 0xD492A4
	// RVA: 0x1B5D3B8 Offset: 0x1B5D3B8 VA: 0x1B5D3B8
	public void .ctor() { }

	// RVA: 0x1B5DC28 Offset: 0x1B5DC28 VA: 0x1B5DC28 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD492B4 Offset: 0xD492B4 VA: 0xD492B4
	// RVA: 0x1B5DF18 Offset: 0x1B5DF18 VA: 0x1B5DF18 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD492C4 Offset: 0xD492C4 VA: 0xD492C4
	// RVA: 0x1B5DF20 Offset: 0x1B5DF20 VA: 0x1B5DF20 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD492D4 Offset: 0xD492D4 VA: 0xD492D4
	// RVA: 0x1B5DF28 Offset: 0x1B5DF28 VA: 0x1B5DF28 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD492E4 Offset: 0xD492E4 VA: 0xD492E4
	// RVA: 0x1B5DF3C Offset: 0x1B5DF3C VA: 0x1B5DF3C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB0800 Offset: 0xCB0800 VA: 0xCB0800
private sealed class CommandCardEquipmentControl.<PlaySelfAttachReplaceEffect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9500
{
	// Fields
	internal int removeCardIdx; // 0x10
	internal CommandCodeEffectComponent <cardDetachEffect>__0; // 0x18
	internal int attachCardIdx; // 0x20
	internal CommandCodeEffectComponent <appearEffectComponent>__0; // 0x28
	internal Action callback; // 0x30
	internal CommandCardEquipmentControl $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD492F4 Offset: 0xD492F4 VA: 0xD492F4
	// RVA: 0x1B5D48C Offset: 0x1B5D48C VA: 0x1B5D48C
	public void .ctor() { }

	// RVA: 0x1B5DFA4 Offset: 0x1B5DFA4 VA: 0x1B5DFA4 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49304 Offset: 0xD49304 VA: 0xD49304
	// RVA: 0x1B5E3D0 Offset: 0x1B5E3D0 VA: 0x1B5E3D0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49314 Offset: 0xD49314 VA: 0xD49314
	// RVA: 0x1B5E3D8 Offset: 0x1B5E3D8 VA: 0x1B5E3D8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49324 Offset: 0xD49324 VA: 0xD49324
	// RVA: 0x1B5E3E0 Offset: 0x1B5E3E0 VA: 0x1B5E3E0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49334 Offset: 0xD49334 VA: 0xD49334
	// RVA: 0x1B5E3F4 Offset: 0x1B5E3F4 VA: 0x1B5E3F4 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class CommandCodeEffectComponent : CommonEffectComponent // TypeDefIndex: 9501
{
	// Fields
	[SerializeField] // RVA: 0xCD58D8 Offset: 0xCD58D8 VA: 0xCD58D8
	private UISprite commandCodeImg; // 0xA8
	private Action endEffectCallback; // 0xB0
	private Action commandCodeDetachAction; // 0xB8

	// Methods

	// RVA: 0x1B63A78 Offset: 0x1B63A78 VA: 0x1B63A78
	public void .ctor() { }

	// RVA: 0x1B5D494 Offset: 0x1B5D494 VA: 0x1B5D494
	public void SetCommandCodeImg(int commandCodeId) { }

	// RVA: 0x1B5C494 Offset: 0x1B5C494 VA: 0x1B5C494
	public void SetEndEffectCallbak(Action callback) { }

	// RVA: 0x1B63A80 Offset: 0x1B63A80 VA: 0x1B63A80
	public void EndEffectFunc() { }

	// RVA: 0x1B5D300 Offset: 0x1B5D300 VA: 0x1B5D300
	public void SetDetachEffect(Action action) { }

	// RVA: 0x1B5DF04 Offset: 0x1B5DF04 VA: 0x1B5DF04
	public void PlayDetachEffect() { }

	// RVA: 0x1B5C4A0 Offset: 0x1B5C4A0 VA: 0x1B5C4A0
	public void PlayAnimation() { }
}

// Namespace: 
public class CommandCardExceedConfirmDialog : BaseDialog // TypeDefIndex: 9502
{
	// Fields
	[SerializeField] // RVA: 0xCD58E8 Offset: 0xCD58E8 VA: 0xCD58E8
	private UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCD58F8 Offset: 0xCD58F8 VA: 0xCD58F8
	private UILabel descriptionLabel; // 0x60
	[SerializeField] // RVA: 0xCD5908 Offset: 0xCD5908 VA: 0xCD5908
	private CombineCommandCardComponent previousCommandCard; // 0x68
	[SerializeField] // RVA: 0xCD5918 Offset: 0xCD5918 VA: 0xCD5918
	private UILabel previousStatusLabel; // 0x70
	[SerializeField] // RVA: 0xCD5928 Offset: 0xCD5928 VA: 0xCD5928
	private CombineCommandCardComponent afterCommandCard; // 0x78
	[SerializeField] // RVA: 0xCD5938 Offset: 0xCD5938 VA: 0xCD5938
	private UILabel afterStatusLabel; // 0x80
	[SerializeField] // RVA: 0xCD5948 Offset: 0xCD5948 VA: 0xCD5948
	private UILabel itemNameLabel; // 0x88
	[SerializeField] // RVA: 0xCD5958 Offset: 0xCD5958 VA: 0xCD5958
	private UILabel itemCountLabel; // 0x90
	[SerializeField] // RVA: 0xCD5968 Offset: 0xCD5968 VA: 0xCD5968
	private UILabel requiredQpLabel; // 0x98
	[SerializeField] // RVA: 0xCD5978 Offset: 0xCD5978 VA: 0xCD5978
	private UILabel requiredQpText; // 0xA0
	[SerializeField] // RVA: 0xCD5988 Offset: 0xCD5988 VA: 0xCD5988
	private UILabel userQpLabel; // 0xA8
	[SerializeField] // RVA: 0xCD5998 Offset: 0xCD5998 VA: 0xCD5998
	private UILabel userQpText; // 0xB0
	[SerializeField] // RVA: 0xCD59A8 Offset: 0xCD59A8 VA: 0xCD59A8
	private UISliderWithButton sliderWithButton; // 0xB8
	[SerializeField] // RVA: 0xCD59B8 Offset: 0xCD59B8 VA: 0xCD59B8
	private UILabel messageLabel; // 0xC0
	[SerializeField] // RVA: 0xCD59C8 Offset: 0xCD59C8 VA: 0xCD59C8
	private UICommonButton decideButton; // 0xC8
	[SerializeField] // RVA: 0xCD59D8 Offset: 0xCD59D8 VA: 0xCD59D8
	private UICommonButton cancelButton; // 0xD0
	[SerializeField] // RVA: 0xCD59E8 Offset: 0xCD59E8 VA: 0xCD59E8
	private UILabel decideButtonLabel; // 0xD8
	[SerializeField] // RVA: 0xCD59F8 Offset: 0xCD59F8 VA: 0xCD59F8
	private UILabel cancelButtonLabel; // 0xE0
	private bool isButtonEnable; // 0xE8
	private Action<int> onRequest; // 0xF0
	private BattleCommandData previousCommandData; // 0xF8
	private ItemEntity exceedItemEntity; // 0x100
	private UserItemEntity userExceedItemEntity; // 0x108
	private int constantMaxStatus; // 0x110
	private int userQp; // 0x114
	private long userCommandCodeId; // 0x118
	private int nowCommandCardParam; // 0x120
	private int nowCommandCardParamRank; // 0x124
	private CommandCardRankParamEntity[] beyondRankParamEntities; // 0x128
	private CommandCardRankParamMaster commandCardRankParamMaster; // 0x130
	private UserCommandCodeMaster userCommandCodeMaster; // 0x138

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x1B5E45C Offset: 0x1B5E45C VA: 0x1B5E45C
	public void .ctor() { }

	// RVA: 0x1B5E4C4 Offset: 0x1B5E4C4 VA: 0x1B5E4C4
	public void Open(UserServantCommandCardEntity userServantCommandCardEntity, BattleCommandData previousCommandData, long userCommandCodeId, int exceedItemId, int cardIndex, Action<int> onRequest) { }

	// RVA: 0x1B5F2F4 Offset: 0x1B5F2F4 VA: 0x1B5F2F4
	protected void EndOpen() { }

	// RVA: 0x1B5EDF0 Offset: 0x1B5EDF0 VA: 0x1B5EDF0
	private void SetCommandCard(int itemUseCount) { }

	// RVA: 0x1B5EBAC Offset: 0x1B5EBAC VA: 0x1B5EBAC
	private void SetStaticLabels(int itemUsableCount) { }

	// RVA: 0x1B5EF00 Offset: 0x1B5EF00 VA: 0x1B5EF00
	private void SetValueLabels(int itemUseCount) { }

	// RVA: 0x1B5F274 Offset: 0x1B5F274 VA: 0x1B5F274
	private void SetSliderWithButton(int itemUsableCount) { }

	// RVA: 0x1B5F3BC Offset: 0x1B5F3BC VA: 0x1B5F3BC
	private string GetRequiredQpText(int requiredQp, bool isOk) { }

	// RVA: 0x1B5F4AC Offset: 0x1B5F4AC VA: 0x1B5F4AC
	private string GetMessageLocalizationKey(bool isOk) { }

	// RVA: 0x1B5F508 Offset: 0x1B5F508 VA: 0x1B5F508
	private void SetButtonState(bool isOk) { }

	// RVA: 0x1B5E8A0 Offset: 0x1B5E8A0 VA: 0x1B5E8A0
	private int GetNowCommandCardParam(UserServantCommandCardEntity entity, int index) { }

	// RVA: 0x1B5F554 Offset: 0x1B5F554 VA: 0x1B5F554
	private void OnSliderValueChange() { }

	// RVA: 0x1B5F5A4 Offset: 0x1B5F5A4 VA: 0x1B5F5A4
	private void OnClickDecide() { }

	// RVA: 0x1B5F6D4 Offset: 0x1B5F6D4 VA: 0x1B5F6D4
	private void OnClickCancel() { }

	// RVA: 0x1B5EA8C Offset: 0x1B5EA8C VA: 0x1B5EA8C
	private int GetItemUsableCount() { }

	// RVA: 0x1B5F340 Offset: 0x1B5F340 VA: 0x1B5F340
	private int GetRequiredQp(int itemUseCount) { }

	// RVA: 0x1B5F764 Offset: 0x1B5F764 VA: 0x1B5F764
	private int GetUseQp(int param) { }

	// RVA: 0x1B5F300 Offset: 0x1B5F300 VA: 0x1B5F300
	private int GetAfterCommandCardParam(int itemUseCount) { }

	// RVA: 0x1B5F65C Offset: 0x1B5F65C VA: 0x1B5F65C
	private void CallOnRequest(int itemUseCount) { }

	// RVA: 0x1B5F82C Offset: 0x1B5F82C VA: 0x1B5F82C Slot: 4
	protected override GameObject get_closeBtnObject() { }
}

// Namespace: 
public class CommandCardExceedControl : CombineMenuControl // TypeDefIndex: 9503
{
	// Fields
	[SerializeField] // RVA: 0xCD5A08 Offset: 0xCD5A08 VA: 0xCD5A08
	private CommandCardExceedConfirmDialog commandCardExceedConfirmDialog; // 0x68
	[SerializeField] // RVA: 0xCD5A18 Offset: 0xCD5A18 VA: 0xCD5A18
	private UILabel detailLabel; // 0x70
	[SerializeField] // RVA: 0xCD5A28 Offset: 0xCD5A28 VA: 0xCD5A28
	private UITouchPress baseServantTouchPress; // 0x78
	[SerializeField] // RVA: 0xCD5A38 Offset: 0xCD5A38 VA: 0xCD5A38
	private GameObject characterGraphicBase; // 0x80
	[SerializeField] // RVA: 0xCD5A48 Offset: 0xCD5A48 VA: 0xCD5A48
	private GameObject baseSelectInfoObject; // 0x88
	[SerializeField] // RVA: 0xCD5A58 Offset: 0xCD5A58 VA: 0xCD5A58
	private GameObject targetSelectInfoBase; // 0x90
	[SerializeField] // RVA: 0xCD5A68 Offset: 0xCD5A68 VA: 0xCD5A68
	private UILabel targetSelectInfoLabel; // 0x98
	[SerializeField] // RVA: 0xCD5A78 Offset: 0xCD5A78 VA: 0xCD5A78
	private GameObject qpInfoBase; // 0xA0
	[SerializeField] // RVA: 0xCD5A88 Offset: 0xCD5A88 VA: 0xCD5A88
	private UILabel userQpLabel; // 0xA8
	[SerializeField] // RVA: 0xCD5A98 Offset: 0xCD5A98 VA: 0xCD5A98
	private UILabel requiredQpLabel; // 0xB0
	[SerializeField] // RVA: 0xCD5AA8 Offset: 0xCD5AA8 VA: 0xCD5AA8
	private UICommonButton combineButton; // 0xB8
	[SerializeField] // RVA: 0xCD5AB8 Offset: 0xCD5AB8 VA: 0xCD5AB8
	private UISprite combineButtonBg; // 0xC0
	[SerializeField] // RVA: 0xCD5AC8 Offset: 0xCD5AC8 VA: 0xCD5AC8
	private UISprite combineTextImage; // 0xC8
	[SerializeField] // RVA: 0xCD5AD8 Offset: 0xCD5AD8 VA: 0xCD5AD8
	private CombineCommandCardComponent[] commandCardComponents; // 0xD0
	[SerializeField] // RVA: 0xCD5AE8 Offset: 0xCD5AE8 VA: 0xCD5AE8
	private UITouchPress[] commandCardTouchPresses; // 0xD8
	[SerializeField] // RVA: 0xCD5AF8 Offset: 0xCD5AF8 VA: 0xCD5AF8
	private UISprite useItemTitleNormal; // 0xE0
	[SerializeField] // RVA: 0xCD5B08 Offset: 0xCD5B08 VA: 0xCD5B08
	private UISprite useItemTitleSelect; // 0xE8
	[SerializeField] // RVA: 0xCD5B18 Offset: 0xCD5B18 VA: 0xCD5B18
	private GameObject exceedItemBase; // 0xF0
	[SerializeField] // RVA: 0xCD5B28 Offset: 0xCD5B28 VA: 0xCD5B28
	private LimitCntUpItemComponent[] exceedItemComponents; // 0xF8
	private string[] baseServantAssets; // 0x100
	private Action onAssetLoadEnd; // 0x108
	private UICharaGraphTexture charaGraphTexture; // 0x110
	private UserServantCommandCardEntity baseUserServantCommandCardEntity; // 0x118
	private CombineCommandCardComponent selectedCommandCard; // 0x120
	private UserServantCommandCodeEntity baseUserServantCommandCodeEntity; // 0x128
	private UserCommandCodeMaster userCommandCodeMaster; // 0x130
	private Action<int> onRequestCombine; // 0x138
	[CompilerGeneratedAttribute] // RVA: 0xCD5B38 Offset: 0xCD5B38 VA: 0xCD5B38
	[DebuggerBrowsableAttribute] // RVA: 0xCD5B38 Offset: 0xCD5B38 VA: 0xCD5B38
	private int[] <ExceedItemIds>k__BackingField; // 0x140

	// Properties
	public UserServantEntity BaseSelectedUserServantEntity { get; }
	public int CardIndex { get; }
	public int[] ExceedItemIds { get; set; }

	// Methods

	// RVA: 0x1B5F8CC Offset: 0x1B5F8CC VA: 0x1B5F8CC
	public void .ctor() { }

	// RVA: 0x1B5F8D4 Offset: 0x1B5F8D4 VA: 0x1B5F8D4 Slot: 6
	protected override EventTutorialMaster.OpenType GetTutorialOpenType() { }

	// RVA: 0x1B5F8DC Offset: 0x1B5F8DC VA: 0x1B5F8DC
	public void Init() { }

	// RVA: 0x1B5FF44 Offset: 0x1B5FF44 VA: 0x1B5FF44
	public void CheckTutorial() { }

	// RVA: 0x1B5FF68 Offset: 0x1B5FF68 VA: 0x1B5FF68
	public void RefreshInfo() { }

	// RVA: 0x1B602FC Offset: 0x1B602FC VA: 0x1B602FC
	public void SetCallbacks(Action<int> onRequestCombine) { }

	// RVA: 0x1B5F954 Offset: 0x1B5F954 VA: 0x1B5F954
	private void SetEventDelegate() { }

	// RVA: 0x1B5FD64 Offset: 0x1B5FD64 VA: 0x1B5FD64
	private void InitLabel() { }

	// RVA: 0x1B5FBE8 Offset: 0x1B5FBE8 VA: 0x1B5FBE8
	private void InitCommandCard() { }

	// RVA: 0x1B5FAF8 Offset: 0x1B5FAF8 VA: 0x1B5FAF8
	private void InitBaseServant() { }

	// RVA: 0x1B5FD0C Offset: 0x1B5FD0C VA: 0x1B5FD0C
	private void InitExceedItem() { }

	// RVA: 0x1B60304 Offset: 0x1B60304 VA: 0x1B60304
	public void SetInfoMessageLabels(CombineRootComponent.StateType stateType, bool isItemEnough = False, bool isExceedMax = False) { }

	// RVA: 0x1B60BA8 Offset: 0x1B60BA8 VA: 0x1B60BA8
	private void SetUseItemTitle(CombineRootComponent.StateType stateType) { }

	// RVA: 0x1B6095C Offset: 0x1B6095C VA: 0x1B6095C
	private string GetDetailLabelText(CombineRootComponent.StateType stateType, bool isItemEnough, bool isExceedMax, bool isQpEnough) { }

	// RVA: 0x1B60AC8 Offset: 0x1B60AC8 VA: 0x1B60AC8
	private string GetTargetSelectInfoLabelText(CombineRootComponent.StateType stateType) { }

	// RVA: 0x1B60C44 Offset: 0x1B60C44 VA: 0x1B60C44
	private string GetCombineButtonLabelText(CombineRootComponent.StateType stateType, bool isExceedMax) { }

	// RVA: 0x1B5FFC8 Offset: 0x1B5FFC8 VA: 0x1B5FFC8
	public void SetUserServant(UserServantEntity selectedUserServantEntity) { }

	// RVA: 0x1B60CB8 Offset: 0x1B60CB8 VA: 0x1B60CB8
	private void SetUserServantCommandCard(UserServantEntity userServantEntity) { }

	// RVA: 0x1B60F40 Offset: 0x1B60F40 VA: 0x1B60F40
	public void SetBaseServantCardImage(UserServantEntity userServantEntity) { }

	// RVA: 0x1B600D4 Offset: 0x1B600D4 VA: 0x1B600D4
	public void SetBaseServantCommandCardList(Action onAssetLoadEnd) { }

	// RVA: 0x1B6111C Offset: 0x1B6111C VA: 0x1B6111C
	private void SetCommandCards() { }

	// RVA: 0x1B61548 Offset: 0x1B61548 VA: 0x1B61548
	private long GetUserCommandCodeId(int cardIndex) { }

	// RVA: 0x1B615A4 Offset: 0x1B615A4 VA: 0x1B615A4
	private int GetCommandCodeId(long userCommandCodeId) { }

	// RVA: 0x1B61670 Offset: 0x1B61670 VA: 0x1B61670
	private int GetCommandCardParam(int cardIndex) { }

	// RVA: 0x1B616C8 Offset: 0x1B616C8 VA: 0x1B616C8
	public void SetSelectedFrameActive(int cardIndex) { }

	// RVA: 0x1B5FE4C Offset: 0x1B5FE4C VA: 0x1B5FE4C
	public void SetCombineButtonState(CombineRootComponent.StateType stateType, bool isEnable, bool isExceedMax) { }

	// RVA: 0x1B61778 Offset: 0x1B61778 VA: 0x1B61778
	public bool GetIsCombineEnable() { }

	// RVA: 0x1B606A4 Offset: 0x1B606A4 VA: 0x1B606A4
	public bool GetIsExceedMax() { }

	// RVA: 0x1B61A94 Offset: 0x1B61A94 VA: 0x1B61A94
	public bool GetIsAllParamMax() { }

	// RVA: 0x1B61CD8 Offset: 0x1B61CD8 VA: 0x1B61CD8
	public UserServantEntity get_BaseSelectedUserServantEntity() { }

	// RVA: 0x1B60604 Offset: 0x1B60604 VA: 0x1B60604
	public int get_CardIndex() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C964 Offset: 0xD3C964 VA: 0xD3C964
	// RVA: 0x1B61A8C Offset: 0x1B61A8C VA: 0x1B61A8C
	public int[] get_ExceedItemIds() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C974 Offset: 0xD3C974 VA: 0xD3C974
	// RVA: 0x1B61CE0 Offset: 0x1B61CE0 VA: 0x1B61CE0
	private void set_ExceedItemIds(int[] value) { }

	// RVA: 0x1B61CE8 Offset: 0x1B61CE8 VA: 0x1B61CE8
	private void OnClickCombine() { }

	// RVA: 0x1B61E0C Offset: 0x1B61E0C VA: 0x1B61E0C
	private void touchCommandCard(int cardIndex) { }
}

// Namespace: 
public class CommandCardExceedResultWindowComponent : BaseDialog // TypeDefIndex: 9504
{
	// Fields
	[SerializeField] // RVA: 0xCD5B74 Offset: 0xCD5B74 VA: 0xCD5B74
	private CombineCommandCardComponent previousCommandCard; // 0x58
	[SerializeField] // RVA: 0xCD5B84 Offset: 0xCD5B84 VA: 0xCD5B84
	private UILabel previousStatusLabel; // 0x60
	[SerializeField] // RVA: 0xCD5B94 Offset: 0xCD5B94 VA: 0xCD5B94
	private CombineCommandCardComponent afterCommandCard; // 0x68
	[SerializeField] // RVA: 0xCD5BA4 Offset: 0xCD5BA4 VA: 0xCD5BA4
	private UILabel afterStatusLabel; // 0x70

	// Methods

	// RVA: 0x1B6274C Offset: 0x1B6274C VA: 0x1B6274C
	public void .ctor() { }

	// RVA: 0x1B627B4 Offset: 0x1B627B4 VA: 0x1B627B4
	public void SetCommandCardExceedInfo(UserServantEntity userServantEntity, int cardIndex, int exceedCount) { }

	// RVA: 0x1B6311C Offset: 0x1B6311C VA: 0x1B6311C
	private void SetLabels(int previousParam, int afterParam, int maxParam) { }

	// RVA: 0x1B62E8C Offset: 0x1B62E8C VA: 0x1B62E8C
	private long GetUserCommandCodeId(long servantId, int cardIndex) { }

	// RVA: 0x1B63030 Offset: 0x1B63030 VA: 0x1B63030
	private int GetCommandCodeId(long userCommandCodeId) { }
}

// Namespace: 
public class CheckCombineResStatus : MonoBehaviour // TypeDefIndex: 9505
{
	// Fields
	private static int LOT_RATE; // 0x0
	private int expType; // 0x18
	private int totalExp; // 0x1C
	private int increLv; // 0x20
	private int checkLv; // 0x24
	private int maxLv; // 0x28
	[CompilerGeneratedAttribute] // RVA: 0xCD5BB4 Offset: 0xCD5BB4 VA: 0xCD5BB4
	private static Comparison<ServantSkillEntity> <>f__am$cache0; // 0x8

	// Methods

	// RVA: 0x1F1C908 Offset: 0x1F1C908 VA: 0x1F1C908
	public void .ctor() { }

	// RVA: 0x1F1C910 Offset: 0x1F1C910 VA: 0x1F1C910
	public int getIncreLevel(int getExp, int svtExpType, int svtMaxLv, int startLv) { }

	// RVA: 0x1F1C9C4 Offset: 0x1F1C9C4 VA: 0x1F1C9C4
	public int getIncrementLv(UserServantEntity baseData, int getExp) { }

	// RVA: 0x1F1CB18 Offset: 0x1F1CB18 VA: 0x1F1CB18
	private bool checkIncrementLv(int lv) { }

	// RVA: 0x1F1CC04 Offset: 0x1F1CC04 VA: 0x1F1CC04
	public void getCombineResStatus(out int afterHp, out int afterAtk, UserServantEntity baseData, int increLv) { }

	// RVA: 0x1F1CEEC Offset: 0x1F1CEEC VA: 0x1F1CEEC
	public string getOpenSkillNameByCombine(UserServantEntity baseData, int increLv, int limitCntSum) { }

	// RVA: 0x1F1CFF8 Offset: 0x1F1CFF8 VA: 0x1F1CFF8
	public string getSvtEqSkillByCombine(UserServantEntity baseData, int increLv, int limitCntSum) { }

	// RVA: 0x1F1D21C Offset: 0x1F1D21C VA: 0x1F1D21C
	public void setSvtExp(out float expVal, out int lateExp, int targetExp, int startLv, int maxLv, int expType) { }

	// RVA: 0x1F1D394 Offset: 0x1F1D394 VA: 0x1F1D394
	public void getExpInfo(out int exp, out int lateExp, out float barExp, int targetExp, int startLv, int maxLv, int expType) { }

	// RVA: 0x1F1D524 Offset: 0x1F1D524 VA: 0x1F1D524
	public float GetExpCampaignValue(UserServantEntity baseSvt, List<EventInfoData> combineEventList) { }

	// RVA: 0x1F1D818 Offset: 0x1F1D818 VA: 0x1F1D818
	public float GetQpCampaignValue(UserServantEntity baseSvt, List<EventInfoData> combineEventList) { }

	// RVA: 0x1F1D56C Offset: 0x1F1D56C VA: 0x1F1D56C
	public float GetCombineEventCampaignValue(UserServantEntity baseSvt, List<EventInfoData> combineEventList, CombineAdjustTarget.TYPE type) { }

	// RVA: 0x1F1D820 Offset: 0x1F1D820 VA: 0x1F1D820
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C984 Offset: 0xD3C984 VA: 0xD3C984
	// RVA: 0x1F1D874 Offset: 0x1F1D874 VA: 0x1F1D874
	private static int <getSvtEqSkillByCombine>m__0(ServantSkillEntity a, ServantSkillEntity b) { }
}

// Namespace: 
public class CombineEnableData // TypeDefIndex: 9506
{
	// Fields
	public int limitUpEnableNum; // 0x10
	public int skillUpEnableNum; // 0x14
	public int npUpEnableNum; // 0x18
	public int lvExceedEnableNum; // 0x1C
	public int costumeCombineEnableNum; // 0x20
	public int friendshipExceedEnableNum; // 0x24

	// Methods

	// RVA: 0x157C430 Offset: 0x157C430 VA: 0x157C430
	public void .ctor() { }

	// RVA: 0x157C438 Offset: 0x157C438 VA: 0x157C438
	public int sumEnableNum() { }
}

// Namespace: 
public class CombineInfoComponent : BaseMonoBehaviour // TypeDefIndex: 9507
{
	// Fields
	protected static readonly Color COLOR_VAL; // 0x0
	[SerializeField] // RVA: 0xCD5BC4 Offset: 0xCD5BC4 VA: 0xCD5BC4
	protected GameObject currentStatusInfo; // 0x18
	[SerializeField] // RVA: 0xCD5BD4 Offset: 0xCD5BD4 VA: 0xCD5BD4
	protected UIExtrusionLabel currentLvLb; // 0x20
	[SerializeField] // RVA: 0xCD5BE4 Offset: 0xCD5BE4 VA: 0xCD5BE4
	protected UILabel currentMaxLvLb; // 0x28
	[SerializeField] // RVA: 0xCD5BF4 Offset: 0xCD5BF4 VA: 0xCD5BF4
	protected UISlider currentExpBar; // 0x30
	[SerializeField] // RVA: 0xCD5C04 Offset: 0xCD5C04 VA: 0xCD5C04
	protected UILabel currentExpValLb; // 0x38
	[SerializeField] // RVA: 0xCD5C14 Offset: 0xCD5C14 VA: 0xCD5C14
	protected UILabel currentHpLb; // 0x40
	[SerializeField] // RVA: 0xCD5C24 Offset: 0xCD5C24 VA: 0xCD5C24
	protected UILabel currentAtkLb; // 0x48
	[SerializeField] // RVA: 0xCD5C34 Offset: 0xCD5C34 VA: 0xCD5C34
	protected UILabel currentCostLb; // 0x50
	[SerializeField] // RVA: 0xCD5C44 Offset: 0xCD5C44 VA: 0xCD5C44
	protected SetLimitCntInfoComponent[] currentLimitCntInfos; // 0x58
	[SerializeField] // RVA: 0xCD5C54 Offset: 0xCD5C54 VA: 0xCD5C54
	protected GameObject resStatusInfo; // 0x60
	[SerializeField] // RVA: 0xCD5C64 Offset: 0xCD5C64 VA: 0xCD5C64
	protected UIExtrusionLabel resLvLb; // 0x68
	[SerializeField] // RVA: 0xCD5C74 Offset: 0xCD5C74 VA: 0xCD5C74
	protected UILabel resMaxLvLb; // 0x70
	[SerializeField] // RVA: 0xCD5C84 Offset: 0xCD5C84 VA: 0xCD5C84
	protected UISlider resCrExpBar; // 0x78
	[SerializeField] // RVA: 0xCD5C94 Offset: 0xCD5C94 VA: 0xCD5C94
	protected UISlider resExpBar; // 0x80
	[SerializeField] // RVA: 0xCD5CA4 Offset: 0xCD5CA4 VA: 0xCD5CA4
	protected UISlider resRemaingExpBar; // 0x88
	[SerializeField] // RVA: 0xCD5CB4 Offset: 0xCD5CB4 VA: 0xCD5CB4
	protected UILabel resExpValLb; // 0x90
	[SerializeField] // RVA: 0xCD5CC4 Offset: 0xCD5CC4 VA: 0xCD5CC4
	protected UILabel resHpLb; // 0x98
	[SerializeField] // RVA: 0xCD5CD4 Offset: 0xCD5CD4 VA: 0xCD5CD4
	protected UILabel resAtkLb; // 0xA0
	[SerializeField] // RVA: 0xCD5CE4 Offset: 0xCD5CE4 VA: 0xCD5CE4
	protected UILabel resCostLb; // 0xA8
	[SerializeField] // RVA: 0xCD5CF4 Offset: 0xCD5CF4 VA: 0xCD5CF4
	protected SetLimitCntInfoComponent[] resLimitCntInfos; // 0xB0
	[SerializeField] // RVA: 0xCD5D04 Offset: 0xCD5D04 VA: 0xCD5D04
	protected UILabel infoLb; // 0xB8
	[SerializeField] // RVA: 0xCD5D14 Offset: 0xCD5D14 VA: 0xCD5D14
	protected GameObject levelUpInfo; // 0xC0
	[SerializeField] // RVA: 0xCD5D24 Offset: 0xCD5D24 VA: 0xCD5D24
	protected UISprite levelUpImg; // 0xC8
	private UserServantEntity baseSvtData; // 0xD0
	private ServantEntity svtEntity; // 0xD8
	private static string INIT_VAL_TXT; // 0x10
	private CombineInfoComponent.DispType dispType; // 0xE0

	// Methods

	// RVA: 0x1582270 Offset: 0x1582270 VA: 0x1582270
	public void .ctor() { }

	// RVA: 0x1582278 Offset: 0x1582278 VA: 0x1582278
	public void initStatusInfo(CombineInfoComponent.DispType type) { }

	// RVA: 0x1582620 Offset: 0x1582620 VA: 0x1582620
	private void setInitInfoLb() { }

	// RVA: 0x15826F8 Offset: 0x15826F8 VA: 0x15826F8
	public void setCurrentStatusInfo(UserServantEntity baseData) { }

	// RVA: 0x1582B98 Offset: 0x1582B98 VA: 0x1582B98
	public void setCombineResStatusInfo(CombineSvtData resSvtData) { }

	// RVA: 0x1583DC4 Offset: 0x1583DC4 VA: 0x1583DC4
	public void HideResStatusInfo() { }

	// RVA: 0x158254C Offset: 0x158254C VA: 0x158254C
	private void setCurrentLimitCntInfo(int maxLimitCnt, int svtLimitCnt) { }

	// RVA: 0x1583CF0 Offset: 0x1583CF0 VA: 0x1583CF0
	private void setResLimitCntInfo(int maxLimitCnt, int svtLimitCnt) { }

	// RVA: 0x1582490 Offset: 0x1582490 VA: 0x1582490
	private void initCurrentStatusGrid() { }

	// RVA: 0x1583C34 Offset: 0x1583C34 VA: 0x1583C34
	private void initResStatusGrid() { }

	// RVA: 0x1583DF8 Offset: 0x1583DF8 VA: 0x1583DF8
	private static void .cctor() { }
}

// Namespace: 
public enum CombineInfoComponent.DispType // TypeDefIndex: 9508
{
	// Fields
	public int value__; // 0x0
	public const CombineInfoComponent.DispType SVT_COMBINE = 0;
	public const CombineInfoComponent.DispType LIMITCNT_UP = 1;
	public const CombineInfoComponent.DispType SVTEQ_COMBINE = 2;
	public const CombineInfoComponent.DispType LEVEL_EXCEED = 3;
	public const CombineInfoComponent.DispType SPECIAL_ASCENTION = 4;
}

// Namespace: 
public class CombineSvtData // TypeDefIndex: 9509
{
	// Fields
	public UserServantEntity baseSvtData; // 0x10
	public int combineResSvtLv; // 0x18
	public int combineResLimitCnt; // 0x1C
	public int combineResSvtMaxLv; // 0x20
	public float combineResExpBarVal; // 0x24
	public int combineResNextExp; // 0x28
	public int combineResHp; // 0x2C
	public int hpAdjustVal; // 0x30
	public int combineResAtk; // 0x34
	public int atkAdjustVal; // 0x38

	// Methods

	// RVA: 0x1B530D0 Offset: 0x1B530D0 VA: 0x1B530D0
	public void .ctor() { }
}

// Namespace: 
public class EventInfoData // TypeDefIndex: 9510
{
	// Fields
	public int eventId; // 0x10
	public int type; // 0x14
	public int iconId; // 0x18
	public int[] targetIds; // 0x20
	public string name; // 0x28
	public string detail; // 0x30
	public float value; // 0x38
	public long startAt; // 0x40
	public long endAt; // 0x48
	public EventEntity eventEntity; // 0x50

	// Methods

	// RVA: 0x1D35258 Offset: 0x1D35258 VA: 0x1D35258
	public void .ctor() { }
}

// Namespace: 
public class LevelUpInfoData // TypeDefIndex: 9511
{
	// Fields
	public int oldLv; // 0x10
	public int currentLv; // 0x14
	public int currentHp; // 0x18
	public int increHpVal; // 0x1C
	public int currentAtk; // 0x20
	public int increAtkVal; // 0x24

	// Methods

	// RVA: 0x172C214 Offset: 0x172C214 VA: 0x172C214
	public void .ctor() { }
}

// Namespace: Assets.Game.Scripts.Play.Combine.Data
public class NpInfoAddManager // TypeDefIndex: 9512
{
	// Fields
	private List<SvtUseNpData> beforeList; // 0x10
	private List<SvtUseNpData> afterList; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xCD5D34 Offset: 0xCD5D34 VA: 0xCD5D34
	[DebuggerBrowsableAttribute] // RVA: 0xCD5D34 Offset: 0xCD5D34 VA: 0xCD5D34
	private ServantTreasureDeviceAddEntity <tdAddEntity>k__BackingField; // 0x20

	// Properties
	public ServantTreasureDeviceAddEntity tdAddEntity { get; set; }

	// Methods

	// RVA: 0x1C73EB4 Offset: 0x1C73EB4 VA: 0x1C73EB4
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C994 Offset: 0xD3C994 VA: 0xD3C994
	// RVA: 0x1C73F48 Offset: 0x1C73F48 VA: 0x1C73F48
	public ServantTreasureDeviceAddEntity get_tdAddEntity() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C9A4 Offset: 0xD3C9A4 VA: 0xD3C9A4
	// RVA: 0x1C73F50 Offset: 0x1C73F50 VA: 0x1C73F50
	private void set_tdAddEntity(ServantTreasureDeviceAddEntity value) { }

	// RVA: 0x1C73F58 Offset: 0x1C73F58 VA: 0x1C73F58
	public void SetEntity(ServantTreasureDeviceAddEntity entity) { }

	// RVA: 0x1C73F60 Offset: 0x1C73F60 VA: 0x1C73F60
	public void AddBeforeNp(int id, int lv) { }

	// RVA: 0x1C74018 Offset: 0x1C74018 VA: 0x1C74018
	public void AddAfterNp(int id, int lv) { }

	// RVA: 0x1C740D0 Offset: 0x1C740D0 VA: 0x1C740D0
	public SvtUseNpData GetBeforeNp(int index) { }

	// RVA: 0x1C74140 Offset: 0x1C74140 VA: 0x1C74140
	public SvtUseNpData GetAfterNp(int index) { }

	// RVA: 0x1C741B0 Offset: 0x1C741B0 VA: 0x1C741B0
	public int GetAfterNpCount() { }
}

// Namespace: 
public class RecommendedConfigSaveData // TypeDefIndex: 9513
{
	// Fields
	public static readonly string SAVE_KEY; // 0x0
	public int selectClass; // 0x10
	public List<int> selectRarityList; // 0x18

	// Methods

	// RVA: 0x1A9AA04 Offset: 0x1A9AA04 VA: 0x1A9AA04
	public void .ctor() { }

	// RVA: 0x1A9AA74 Offset: 0x1A9AA74 VA: 0x1A9AA74
	public bool IsExist() { }

	// RVA: 0x1A9AAE0 Offset: 0x1A9AAE0 VA: 0x1A9AAE0
	public static RecommendedConfigSaveData LoadConfigSaveData() { }

	// RVA: 0x1A9AB5C Offset: 0x1A9AB5C VA: 0x1A9AB5C
	public void SaveConfig(RecommendedConfigSaveData saveData) { }

	// RVA: 0x1A9ABE4 Offset: 0x1A9ABE4 VA: 0x1A9ABE4
	public bool IsMix() { }

	// RVA: 0x1A9ABF4 Offset: 0x1A9ABF4 VA: 0x1A9ABF4
	public bool IsAll() { }

	// RVA: 0x1A9AC04 Offset: 0x1A9AC04 VA: 0x1A9AC04
	public bool IsTargetOnly() { }

	// RVA: 0x1A9AC14 Offset: 0x1A9AC14 VA: 0x1A9AC14
	public bool CanNotSelect() { }

	// RVA: 0x1A9AC88 Offset: 0x1A9AC88 VA: 0x1A9AC88
	private static void .cctor() { }
}

// Namespace: 
public enum RecommendedConfigSaveData.ClassType // TypeDefIndex: 9514
{
	// Fields
	public int value__; // 0x0
	public const RecommendedConfigSaveData.ClassType MIX = 0;
	public const RecommendedConfigSaveData.ClassType ALL = 1;
	public const RecommendedConfigSaveData.ClassType TARGET = 2;
}

// Namespace: 
public class SetCombineData // TypeDefIndex: 9515
{
	// Fields
	public UserServantEntity baseSvtData; // 0x10
	public int selectSum; // 0x18
	public int spendQp; // 0x1C
	public int getExp; // 0x20
	public int getAddExp; // 0x24
	public int selectMax; // 0x28
	public bool isAdjustMax; // 0x2C
	public bool isSecondAdjustMax; // 0x2D
	public int getHpAdjustVal; // 0x30
	public int getAtkAdjustVal; // 0x34
	public long[] materialUsrSvtIdList; // 0x38
	public Dictionary<long, bool> svtEqMaterialList; // 0x40

	// Methods

	// RVA: 0x1883930 Offset: 0x1883930 VA: 0x1883930
	public void .ctor() { }
}

// Namespace: 
public class SetLevelUpData // TypeDefIndex: 9516
{
	// Fields
	public int currentId; // 0x10
	public int currentIndex; // 0x14
	public int realIndex; // 0x18
	public string targetRuby; // 0x20
	public string targetName; // 0x28
	public string targetDetail; // 0x30
	public int currentLv; // 0x38
	public int nextLv; // 0x3C
	public int spendQp; // 0x40
	public int haveQp; // 0x44
	public int spendSvtCoin; // 0x48
	public int haveSvtCoin; // 0x4C
	public int[] combineItemIds; // 0x50
	public bool isNpAdd; // 0x58

	// Methods

	// RVA: 0x1886058 Offset: 0x1886058 VA: 0x1886058
	public void .ctor() { }
}

// Namespace: 
public class SetLimitCntInfoComponent : MonoBehaviour // TypeDefIndex: 9517
{
	// Fields
	public UISprite onImg; // 0x18

	// Methods

	// RVA: 0x1886060 Offset: 0x1886060 VA: 0x1886060
	public void .ctor() { }

	// RVA: 0x1886068 Offset: 0x1886068 VA: 0x1886068
	public void setEnableOnImg(bool isOn) { }
}

// Namespace: 
public class SvtUseNpData // TypeDefIndex: 9518
{
	// Fields
	public int svtId; // 0x10
	public int svtDispNpId; // 0x14
	public int svtUseNpId; // 0x18
	public int svtNpLv; // 0x1C
	public string npRuby; // 0x20
	public string svtNpName; // 0x28
	public int npCardId; // 0x30
	public string svtNpdetail; // 0x38
	public bool isCardHide; // 0x40
	public bool isNpAdd; // 0x41
	public int limitCount; // 0x44
	public int cardLimitCount; // 0x48
