
	// RVA: 0x1558BFC Offset: 0x1558BFC VA: 0x1558BFC
	public OtherUserGameEntity[] GetOtherUserList() { }
}

// Namespace: 
public class UserQuestEntity : DataEntityBase<string> // TypeDefIndex: 7478
{
	// Fields
	private readonly long EXPIRE_NO_LIMIT_TIME; // 0x10
	public long userId; // 0x18
	public int questId; // 0x20
	public int questPhase; // 0x24
	public int clearNum; // 0x28
	public bool isEternalOpen; // 0x2C
	public long lastStartedAt; // 0x30
	public int challengeNum; // 0x38
	public int status; // 0x3C
	public long expireAt; // 0x40
	public long updatedAt; // 0x48
	public long createdAt; // 0x50
	private static long oldId; // 0x0
	private static string userIdString; // 0x8

	// Methods

	// RVA: 0x1558DC8 Offset: 0x1558DC8 VA: 0x1558DC8
	public void .ctor() { }

	// RVA: 0x1558E24 Offset: 0x1558E24 VA: 0x1558E24 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1558E94 Offset: 0x1558E94 VA: 0x1558E94
	public static string CreatePK(long userId, int questId) { }

	// RVA: 0x1559000 Offset: 0x1559000 VA: 0x1559000
	public long getUserId() { }

	// RVA: 0x1559008 Offset: 0x1559008 VA: 0x1559008
	public int getQuestId() { }

	// RVA: 0x1559010 Offset: 0x1559010 VA: 0x1559010
	public int getQuestPhase() { }

	// RVA: 0x15591C8 Offset: 0x15591C8 VA: 0x15591C8
	public int getClearNum() { }

	// RVA: 0x15591F8 Offset: 0x15591F8 VA: 0x15591F8
	public bool getIsEternalOpen() { }

	// RVA: 0x1559200 Offset: 0x1559200 VA: 0x1559200
	public long getLastStartedAt() { }

	// RVA: 0x1559208 Offset: 0x1559208 VA: 0x1559208
	public int getChallengeNum() { }

	// RVA: 0x1559210 Offset: 0x1559210 VA: 0x1559210
	public long getExpireAt() { }

	// RVA: 0x1559218 Offset: 0x1559218 VA: 0x1559218
	public long getUpdateAt() { }

	// RVA: 0x1559220 Offset: 0x1559220 VA: 0x1559220
	public long getCreateAt() { }

	// RVA: 0x1559228 Offset: 0x1559228 VA: 0x1559228
	public bool IsNotExpired() { }

	// RVA: 0x155929C Offset: 0x155929C VA: 0x155929C
	public bool IsExpireNoLimit() { }

	// RVA: 0x1559040 Offset: 0x1559040 VA: 0x1559040
	public bool IsResetInterval() { }

	// RVA: 0x15592B0 Offset: 0x15592B0 VA: 0x15592B0
	public bool HasStatus(UserQuestEntity.StatusFlag statusFlag) { }

	// RVA: 0x15592C0 Offset: 0x15592C0 VA: 0x15592C0
	public bool HasStatus(UserQuestEntity.StatusKind status) { }

	// RVA: 0x15592DC Offset: 0x15592DC VA: 0x15592DC
	public bool IsResetStatus() { }

	// RVA: 0x15592E8 Offset: 0x15592E8 VA: 0x15592E8
	private static void .cctor() { }
}

// Namespace: 
public enum UserQuestEntity.StatusKind // TypeDefIndex: 7479
{
	// Fields
	public int value__; // 0x0
	public const UserQuestEntity.StatusKind RESET = 1;
	public const UserQuestEntity.StatusKind RESET_REWARD = 2;
	public const UserQuestEntity.StatusKind PURCHASED_RARE_PRI = 3;
	public const UserQuestEntity.StatusKind CHALLENGED_NEWEST_PHASE = 4;
	public const UserQuestEntity.StatusKind BATTLE_RESULT_WIN = 5;
	public const UserQuestEntity.StatusKind BATTLE_RESULT_LOSE = 6;
	public const UserQuestEntity.StatusKind LATEST_RESULT_WIN = 7;
	public const UserQuestEntity.StatusKind LATEST_RESULT_LOSE = 8;
}

// Namespace: 
public enum UserQuestEntity.StatusFlag // TypeDefIndex: 7480
{
	// Fields
	public int value__; // 0x0
	public const UserQuestEntity.StatusFlag RESET = 2;
	public const UserQuestEntity.StatusFlag RESET_REWARD = 4;
	public const UserQuestEntity.StatusFlag PURCHASED_RARE_PRI = 8;
	public const UserQuestEntity.StatusFlag CHALLENGED_NEWEST_PHASE = 16;
	public const UserQuestEntity.StatusFlag BATTLE_RESULT_WIN = 32;
	public const UserQuestEntity.StatusFlag BATTLE_RESULT_LOSE = 64;
	public const UserQuestEntity.StatusFlag LATEST_RESULT_WIN = 128;
	public const UserQuestEntity.StatusFlag LATEST_RESULT_LOSE = 256;
}

// Namespace: 
public class UserQuestInfoEntity : DataEntityBase<string> // TypeDefIndex: 7481
{
	// Fields
	public long userId; // 0x10
	public int questId; // 0x18
	public int eventId; // 0x1C
	public int[] dropSvtIds; // 0x20
	public int[] dropItemIds; // 0x28
	public int[] enemyIds; // 0x30

	// Methods

	// RVA: 0x155933C Offset: 0x155933C VA: 0x155933C
	public void .ctor() { }

	// RVA: 0x155938C Offset: 0x155938C VA: 0x155938C Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x15593A0 Offset: 0x15593A0 VA: 0x15593A0
	public static string CreatePK(long userId, int questId) { }
}

// Namespace: 
public class UserQuestInfoMaster : DataMasterBase<UserQuestInfoMaster, UserQuestInfoEntity, string> // TypeDefIndex: 7482
{
	// Fields
	private long oldId; // 0x48
	private string userIdString; // 0x50

	// Methods

	// RVA: 0x15593AC Offset: 0x15593AC VA: 0x15593AC
	public void .ctor() { }

	// RVA: 0x1559408 Offset: 0x1559408 VA: 0x1559408
	public UserQuestInfoEntity GetEntity(long userId, int questId) { }

	// RVA: 0x155947C Offset: 0x155947C VA: 0x155947C
	public bool TryGetEntity(out UserQuestInfoEntity entity, long userId, int questId) { }

	// RVA: 0x1559500 Offset: 0x1559500 VA: 0x1559500
	public UserQuestInfoEntity getEntityFromId(long userId, int questId) { }
}

// Namespace: 
public class UserQuestMaster : DataMasterBase<UserQuestMaster, UserQuestEntity, string> // TypeDefIndex: 7483
{
	// Fields
	private long oldId; // 0x48
	private string userIdString; // 0x50
	[CompilerGeneratedAttribute] // RVA: 0xC5607C Offset: 0xC5607C VA: 0xC5607C
	private static Comparison<UserQuestEntity> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC5608C Offset: 0xC5608C VA: 0xC5608C
	private static Comparison<UserQuestEntity> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x15596B4 Offset: 0x15596B4 VA: 0x15596B4
	public void .ctor() { }

	// RVA: 0x1559710 Offset: 0x1559710 VA: 0x1559710
	public UserQuestEntity getEntityFromId(long userId, int questId) { }

	// RVA: 0x15598C4 Offset: 0x15598C4 VA: 0x15598C4
	public int getChallengeCountsFromId(long userId, int questId) { }

	// RVA: 0x1559B10 Offset: 0x1559B10 VA: 0x1559B10
	public int getChallengeCountsFromIds(long userId, int[] questIds) { }

	// RVA: 0x1559CC4 Offset: 0x1559CC4 VA: 0x1559CC4
	public int getClearCountsFromId(long userId, int questId) { }

	// RVA: 0x1559F10 Offset: 0x1559F10 VA: 0x1559F10
	public int getClearCountsFromIds(long userId, int[] questIds) { }

	// RVA: 0x155A0C4 Offset: 0x155A0C4 VA: 0x155A0C4
	public QuestEntity GetMainScenarioLatestClear(long userId) { }

	// RVA: 0x155A5F8 Offset: 0x155A5F8 VA: 0x155A5F8
	public QuestEntity GetLatestMainScenarioLastQuest(long userId) { }

	// RVA: 0x155AB30 Offset: 0x155AB30 VA: 0x155AB30
	public bool IsQuestResetAndQuestClear(long userId, int questId) { }

	// RVA: 0x155AB68 Offset: 0x155AB68 VA: 0x155AB68
	public bool IsQuestResetAndQuestClearIds(long userId, int[] questIds) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCAA38 Offset: 0xCCAA38 VA: 0xCCAA38
	// RVA: 0x155AC14 Offset: 0x155AC14 VA: 0x155AC14
	private static int <GetMainScenarioLatestClear>m__0(UserQuestEntity x, UserQuestEntity y) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCAA48 Offset: 0xCCAA48 VA: 0xCCAA48
	// RVA: 0x155AC84 Offset: 0x155AC84 VA: 0x155AC84
	private static int <GetLatestMainScenarioLastQuest>m__1(UserQuestEntity x, UserQuestEntity y) { }
}

// Namespace: 
public class UserQuestRecordEntity : DataEntityBase<string> // TypeDefIndex: 7484
{
	// Fields
	public long userId; // 0x10
	public int questId; // 0x18
	public int recordType; // 0x1C
	public long recordValue; // 0x20
	public long createdAt; // 0x28
	public long updatedAt; // 0x30
	public Dictionary<string, object> deckJson; // 0x38
	public Dictionary<string, object> recordValueJson; // 0x40
	public static readonly string KEY_RECORD_TURN_MAX_DAMAGE; // 0x0
	public static readonly string KEY_RECORD_KNOCKDOWN_NUM; // 0x8
	public static readonly string KEY_RECORD_TOTAL_DAMAGE_TO_ALIVE_ENEMY; // 0x10

	// Methods

	// RVA: 0x155ACC8 Offset: 0x155ACC8 VA: 0x155ACC8
	public void .ctor() { }

	// RVA: 0x155AD18 Offset: 0x155AD18 VA: 0x155AD18
	public void .ctor(UserQuestRecordEntity original) { }

	// RVA: 0x155AE54 Offset: 0x155AE54 VA: 0x155AE54 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x155AED4 Offset: 0x155AED4 VA: 0x155AED4
	public static string CreatePK(long userId, int questId, int recordType) { }

	// RVA: 0x155AEE4 Offset: 0x155AEE4 VA: 0x155AEE4
	protected bool existRecordKey(string key) { }

	// RVA: 0x155AF58 Offset: 0x155AF58 VA: 0x155AF58
	public long getRecordLong(string key, long defValue = 0) { }

	// RVA: 0x155B068 Offset: 0x155B068 VA: 0x155B068
	private static void .cctor() { }
}

// Namespace: 
public enum UserQuestRecordEntity.QuestRecordType // TypeDefIndex: 7485
{
	// Fields
	public int value__; // 0x0
	public const UserQuestRecordEntity.QuestRecordType QUEST_MAX_DAMAGE = 1;
	public const UserQuestRecordEntity.QuestRecordType QUEST_KNOCKDOWN = 2;
}

// Namespace: 
public class UserQuestRecordMaster : DataMasterBase<UserQuestRecordMaster, UserQuestRecordEntity, string> // TypeDefIndex: 7486
{
	// Methods

	// RVA: 0x155B0F0 Offset: 0x155B0F0 VA: 0x155B0F0
	public void .ctor() { }

	// RVA: 0x155B144 Offset: 0x155B144 VA: 0x155B144
	public UserQuestRecordEntity GetEntity(long userId, int questId, int recordType) { }

	// RVA: 0x155B1E8 Offset: 0x155B1E8 VA: 0x155B1E8
	public bool TryGetEntity(out UserQuestRecordEntity entity, long userId, int questId, int recordType) { }

	// RVA: 0x155B294 Offset: 0x155B294 VA: 0x155B294
	public long GetMaxTurnDamage(long userId, int questId) { }

	// RVA: 0x155B3E8 Offset: 0x155B3E8 VA: 0x155B3E8
	public void GetKnockdownRecordinfo(long userId, int questId, QuestKnockdownInfo knockdownInfo) { }
}

// Namespace: 
public class UserQuestRouteEntity : DataEntityBase<string> // TypeDefIndex: 7487
{
	// Fields
	public long userId; // 0x10
	public int questId; // 0x18
	public int routeId; // 0x1C

	// Methods

	// RVA: 0x155B594 Offset: 0x155B594 VA: 0x155B594
	public void .ctor() { }

	// RVA: 0x155B5E4 Offset: 0x155B5E4 VA: 0x155B5E4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x155B5F8 Offset: 0x155B5F8 VA: 0x155B5F8
	public static string CreatePK(long userId, int questId, int routeId) { }
}

// Namespace: 
public class UserQuestRouteMaster : DataMasterBase<UserQuestRouteMaster, UserQuestRouteEntity, string> // TypeDefIndex: 7488
{
	// Methods

	// RVA: 0x155B608 Offset: 0x155B608 VA: 0x155B608
	public void .ctor() { }

	// RVA: 0x155B65C Offset: 0x155B65C VA: 0x155B65C
	public UserQuestRouteEntity GetEntity(long userId, int questId, int routeId) { }

	// RVA: 0x155B6E0 Offset: 0x155B6E0 VA: 0x155B6E0
	public bool TryGetEntity(out UserQuestRouteEntity entity, long userId, int questId, int routeId) { }

	// RVA: 0x155B76C Offset: 0x155B76C VA: 0x155B76C
	public bool haveRouteId(long user_id, int quest_id, int route_id) { }
}

// Namespace: 
public class UserServantAppendPassiveSkillEntity : DataEntityBase<string> // TypeDefIndex: 7489
{
	// Fields
	public ObscuredLong userId; // 0x10
	public int svtId; // 0x30
	public int[] unlockNums; // 0x38

	// Methods

	// RVA: 0x155C464 Offset: 0x155C464 VA: 0x155C464
	public void .ctor() { }

	// RVA: 0x155C4B4 Offset: 0x155C4B4 VA: 0x155C4B4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x155C54C Offset: 0x155C54C VA: 0x155C54C
	public static string CreatePK(long userId, int svtId) { }
}

// Namespace: 
public class UserServantAppendPassiveSkillLvEntity : DataEntityBase<long> // TypeDefIndex: 7490
{
	// Fields
	public ObscuredLong userSvtId; // 0x10
	public ObscuredLong userId; // 0x30
	public int[] appendPassiveSkillNums; // 0x50
	public int[] appendPassiveSkillLvs; // 0x58

	// Methods

	// RVA: 0x155C558 Offset: 0x155C558 VA: 0x155C558
	public void .ctor() { }

	// RVA: 0x155C5A8 Offset: 0x155C5A8 VA: 0x155C5A8 Slot: 5
	protected sealed override long CreatePrimaryKey() { }
}

// Namespace: 
public class UserServantAppendPassiveSkillLvMaster : DataMasterBase<UserServantAppendPassiveSkillLvMaster, UserServantAppendPassiveSkillLvEntity, long> // TypeDefIndex: 7491
{
	// Methods

	// RVA: 0x155C634 Offset: 0x155C634 VA: 0x155C634
	public void .ctor() { }

	// RVA: 0x155C688 Offset: 0x155C688 VA: 0x155C688
	public Dictionary<int, int> GetMaxLevelInfo(long userId, int svtId) { }
}

// Namespace: 
public class UserServantAppendPassiveSkillMaster : DataMasterBase<UserServantAppendPassiveSkillMaster, UserServantAppendPassiveSkillEntity, string> // TypeDefIndex: 7492
{
	// Methods

	// RVA: 0x155CA90 Offset: 0x155CA90 VA: 0x155CA90
	public void .ctor() { }

	// RVA: 0x155CAE4 Offset: 0x155CAE4 VA: 0x155CAE4
	public UserServantAppendPassiveSkillEntity GetEntity(long userId, int svtId) { }

	// RVA: 0x155CB58 Offset: 0x155CB58 VA: 0x155CB58
	public bool TryGetEntity(out UserServantAppendPassiveSkillEntity entity, long userId, int svtId) { }
}

// Namespace: 
public class UserServantCollectionEntity : DataEntityBase<string> // TypeDefIndex: 7493
{
	// Fields
	public long userId; // 0x10
	public ObscuredInt svtId; // 0x18
	public int status; // 0x28
	public int maxLv; // 0x2C
	public int maxHp; // 0x30
	public int maxAtk; // 0x34
	public int maxLimitCount; // 0x38
	public int skillLv1; // 0x3C
	public int skillLv2; // 0x40
	public int skillLv3; // 0x44
	public int treasureDeviceLv1; // 0x48
	public int svtCommonFlag; // 0x4C
	public int flag; // 0x50
	public ObscuredInt friendship; // 0x54
	public ObscuredInt friendshipRank; // 0x64
	public int friendshipExceedCount; // 0x74
	public long voicePlayed; // 0x78
	public long voicePlayed2; // 0x80
	public int[] tdPlayed; // 0x88
	public int[] costumeIds; // 0x90
	public long createdAt; // 0x98
	private UserServantVoicePlayedEntity userServantVoicePlayedEntity; // 0xA0
	[CompilerGeneratedAttribute] // RVA: 0xC5609C Offset: 0xC5609C VA: 0xC5609C
	private static Comparison<ServantCostumeEntity> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC560AC Offset: 0xC560AC VA: 0xC560AC
	private static Comparison<ServantCostumeEntity> <>f__am$cache1; // 0x8

	// Methods

	// RVA: 0x1BE1314 Offset: 0x1BE1314 VA: 0x1BE1314
	public void .ctor() { }

	// RVA: 0x1BE1364 Offset: 0x1BE1364 VA: 0x1BE1364
	public void .ctor(UserServantCollectionEntity e) { }

	// RVA: 0x1BE15D4 Offset: 0x1BE15D4 VA: 0x1BE15D4
	public void .ctor(long userId, int svtId) { }

	// RVA: 0x1BE1690 Offset: 0x1BE1690 VA: 0x1BE1690 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1BE171C Offset: 0x1BE171C VA: 0x1BE171C
	public static string CreatePK(long userId, int svtId) { }

	// RVA: 0x1BE1728 Offset: 0x1BE1728 VA: 0x1BE1728
	public long getUserId() { }

	// RVA: 0x1BE1730 Offset: 0x1BE1730 VA: 0x1BE1730
	public int getSvtId() { }

	// RVA: 0x1BE17A0 Offset: 0x1BE17A0 VA: 0x1BE17A0
	public int getFriendShipRank() { }

	// RVA: 0x1BE1814 Offset: 0x1BE1814 VA: 0x1BE1814
	public int getFriendshipExceedCount() { }

	// RVA: 0x1BE181C Offset: 0x1BE181C VA: 0x1BE181C
	public bool IsFinded() { }

	// RVA: 0x1BE182C Offset: 0x1BE182C VA: 0x1BE182C
	public bool IsGet() { }

	// RVA: 0x1BE183C Offset: 0x1BE183C VA: 0x1BE183C
	public bool IsNew() { }

	// RVA: 0x1BE1BD0 Offset: 0x1BE1BD0 VA: 0x1BE1BD0
	public void SetOld() { }

	// RVA: 0x1BE1F14 Offset: 0x1BE1F14 VA: 0x1BE1F14
	public bool getCollectionStatus(out int lv, out int hp, out int atk) { }

	// RVA: 0x1BE233C Offset: 0x1BE233C VA: 0x1BE233C
	public int[] getSkillLevelList() { }

	// RVA: 0x1BE2438 Offset: 0x1BE2438 VA: 0x1BE2438
	public void getSkillInfo(out SkillInfo[] skillInfoList, int beforeClearQuestId = -1, int dispLimitCount = -1) { }

	// RVA: 0x1BE293C Offset: 0x1BE293C VA: 0x1BE293C
	public void getPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, int dispLimitCount = -1, bool isOwner = True) { }

	// RVA: 0x1BE2F14 Offset: 0x1BE2F14 VA: 0x1BE2F14
	public bool getTreasureDeviceInfo(out TreasureDvcInfo tdInfo, int beforeClearQuestId = -1, int dispLimitCount = -1) { }

	// RVA: 0x1BE3278 Offset: 0x1BE3278 VA: 0x1BE3278
	public bool getFriendShipRankInfo(out int friendshipRank, out int maxFriendshipRank) { }

	// RVA: 0x1BE33DC Offset: 0x1BE33DC VA: 0x1BE33DC
	public int getLevelMax() { }

	// RVA: 0x1BE3558 Offset: 0x1BE3558 VA: 0x1BE3558
	public bool IsLevelMax() { }

	// RVA: 0x1BE3584 Offset: 0x1BE3584 VA: 0x1BE3584
	public int getLimitCountMax() { }

	// RVA: 0x1BE3674 Offset: 0x1BE3674 VA: 0x1BE3674
	public bool IsLimitCountMax() { }

	// RVA: 0x1BE36A0 Offset: 0x1BE36A0 VA: 0x1BE36A0
	public bool IsPlayed(int flagNum) { }

	// RVA: 0x1BE3830 Offset: 0x1BE3830 VA: 0x1BE3830
	public bool SetPlayed(int flagNum) { }

	// RVA: 0x1BE39E8 Offset: 0x1BE39E8 VA: 0x1BE39E8
	public int[] getCostumeList() { }

	// RVA: 0x1BE3DA0 Offset: 0x1BE3DA0 VA: 0x1BE3DA0
	public int[] getCostumeList(int lv, int limitCount) { }

	// RVA: 0x1BE41C0 Offset: 0x1BE41C0 VA: 0x1BE41C0
	public bool IsCostumeGet(int costumeId) { }

	// RVA: 0x1BE4264 Offset: 0x1BE4264 VA: 0x1BE4264
	public bool HasFlag(int type) { }

	// RVA: 0x1BE4274 Offset: 0x1BE4274 VA: 0x1BE4274
	public int[] getCommandCodeIdList() { }

	// RVA: 0x1BE46A8 Offset: 0x1BE46A8 VA: 0x1BE46A8
	public UserCommandCodeEntity getUserCommandCodeEntity(int index) { }

	// RVA: 0x1BE4968 Offset: 0x1BE4968 VA: 0x1BE4968
	public UserServantCommandCardEntity GetUserCommandCardEntity() { }

	// RVA: 0x1BE4ABC Offset: 0x1BE4ABC VA: 0x1BE4ABC
	public int[] GetCommandCardParam() { }

	// RVA: 0x1BE4AD8 Offset: 0x1BE4AD8 VA: 0x1BE4AD8
	public bool IsModifySvtCommonFlag(int value) { }

	// RVA: 0x1BE4AE8 Offset: 0x1BE4AE8 VA: 0x1BE4AE8
	public bool IsDataLostStateServant() { }

	// RVA: 0x1BE4C58 Offset: 0x1BE4C58 VA: 0x1BE4C58
	public bool IsHideStateServant() { }

	// RVA: 0x1BE4DC8 Offset: 0x1BE4DC8 VA: 0x1BE4DC8
	public static bool CheckSvtCommonFlag(int _svtCommonFlag, UserServantCollectionEntity.SVT_COMMON_FLAG flagKind) { }

	// RVA: 0x1BE4DD4 Offset: 0x1BE4DD4 VA: 0x1BE4DD4
	public List<int> GetSkillChangeCostumeList() { }

	// RVA: 0x1BE4FD0 Offset: 0x1BE4FD0 VA: 0x1BE4FD0
	public void GetAppendPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, out bool[] releaseStateList, out int[] lvList) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCAA58 Offset: 0xCCAA58 VA: 0xCCAA58
	// RVA: 0x1BE50F4 Offset: 0x1BE50F4 VA: 0x1BE50F4
	private static int <getCostumeList>m__0(ServantCostumeEntity a, ServantCostumeEntity b) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCAA68 Offset: 0xCCAA68 VA: 0xCCAA68
	// RVA: 0x1BE5138 Offset: 0x1BE5138 VA: 0x1BE5138
	private static int <getCostumeList>m__1(ServantCostumeEntity a, ServantCostumeEntity b) { }
}

// Namespace: 
private enum UserServantCollectionEntity.SVT_COMMON_KIND // TypeDefIndex: 7494
{
	// Fields
	public int value__; // 0x0
	public const UserServantCollectionEntity.SVT_COMMON_KIND ENABLE_TD_SPEED = 1;
	public const UserServantCollectionEntity.SVT_COMMON_KIND TD_SPEED = 2;
}

// Namespace: 
public enum UserServantCollectionEntity.SVT_COMMON_FLAG // TypeDefIndex: 7495
{
	// Fields
	public int value__; // 0x0
	public const UserServantCollectionEntity.SVT_COMMON_FLAG ENABLE_TD_SPEED = 2;
	public const UserServantCollectionEntity.SVT_COMMON_FLAG TD_SPEED = 4;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42E64 Offset: 0xC42E64 VA: 0xC42E64
private sealed class UserServantCollectionEntity.<GetSkillChangeCostumeList>c__AnonStorey0 // TypeDefIndex: 7496
{
	// Fields
	internal int costumeId; // 0x10
	internal UserServantCollectionEntity $this; // 0x18

	// Methods

	// RVA: 0x1BE4FC8 Offset: 0x1BE4FC8 VA: 0x1BE4FC8
	public void .ctor() { }

	// RVA: 0x1BE517C Offset: 0x1BE517C VA: 0x1BE517C
	internal bool <>m__0(ServantSkillReleaseEntity d) { }
}

// Namespace: 
public class UserServantCollectionMaster : DataMasterBase<UserServantCollectionMaster, UserServantCollectionEntity, string> // TypeDefIndex: 7497
{
	// Methods

	// RVA: 0x1BE6348 Offset: 0x1BE6348 VA: 0x1BE6348
	public void .ctor() { }

	// RVA: 0x1BE639C Offset: 0x1BE639C VA: 0x1BE639C
	public UserServantCollectionEntity GetEntity(long userId, int svtId) { }

	// RVA: 0x1BE6410 Offset: 0x1BE6410 VA: 0x1BE6410
	public bool TryGetEntity(out UserServantCollectionEntity entity, long userId, int svtId) { }

	// RVA: 0x1BE6494 Offset: 0x1BE6494 VA: 0x1BE6494
	public UserServantCollectionEntity getEntityFromId(long userId, int svtId) { }

	// RVA: 0x1BE6620 Offset: 0x1BE6620 VA: 0x1BE6620
	public UserServantCollectionEntity[] getList(CollectionStatus.Kind kind) { }

	// RVA: 0x1BE68EC Offset: 0x1BE68EC VA: 0x1BE68EC
	public UserServantCollectionEntity[] getCollectionList(out int getSum, out int findSum, bool isEquip, bool ignoreHideStateSvt = False) { }

	// RVA: 0x1BE6CA4 Offset: 0x1BE6CA4 VA: 0x1BE6CA4
	public List<UserServantCollectionEntity> getServantEquipCollectionList(Dictionary<int, string> servantEquipIdStrDic) { }

	// RVA: 0x1BE6FEC Offset: 0x1BE6FEC VA: 0x1BE6FEC
	public bool IsNew(int svtId) { }

	// RVA: 0x1BE7154 Offset: 0x1BE7154 VA: 0x1BE7154
	public int[] GetNewList() { }

	// RVA: 0x1BE7300 Offset: 0x1BE7300 VA: 0x1BE7300
	public void continueDeviceServantComment() { }

	// RVA: 0x1BE5E8C Offset: 0x1BE5E8C VA: 0x1BE5E8C
	public void continueDeviceUserServantCollection() { }

	// RVA: 0x1BE7514 Offset: 0x1BE7514 VA: 0x1BE7514
	public bool IsCostumeAlreadyGet(int svtId, int costumeId) { }
}

// Namespace: 
public class UserServantCommandCardEntity : DataEntityBase<string> // TypeDefIndex: 7498
{
	// Fields
	public ObscuredLong userId; // 0x10
	public ObscuredLong svtId; // 0x30
	public int[] commandCardParam; // 0x50
	public long createdAt; // 0x58
	public long updatedAt; // 0x60

	// Methods

	// RVA: 0x1BE7624 Offset: 0x1BE7624 VA: 0x1BE7624
	public void .ctor() { }

	// RVA: 0x1BE7674 Offset: 0x1BE7674 VA: 0x1BE7674 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1BE7730 Offset: 0x1BE7730 VA: 0x1BE7730
	public static string CreatePK(long userId, long svtId) { }
}

// Namespace: 
public class UserServantCommandCardMaster : DataMasterBase<UserServantCommandCardMaster, UserServantCommandCardEntity, string> // TypeDefIndex: 7499
{
	// Methods

	// RVA: 0x1BE7738 Offset: 0x1BE7738 VA: 0x1BE7738
	public void .ctor() { }

	// RVA: 0x1BE778C Offset: 0x1BE778C VA: 0x1BE778C
	public UserServantCommandCardEntity GetEntity(long userId, long svtId) { }

	// RVA: 0x1BE7800 Offset: 0x1BE7800 VA: 0x1BE7800
	public bool TryGetEntity(out UserServantCommandCardEntity entity, long userId, long svtId) { }
}

// Namespace: 
public class UserServantCommandCodeEntity : DataEntityBase<string> // TypeDefIndex: 7500
{
	// Fields
	public ObscuredLong userId; // 0x10
	public ObscuredLong svtId; // 0x30
	public long[] userCommandCodeIds; // 0x50
	public long createdAt; // 0x58

	// Methods

	// RVA: 0x1BE7884 Offset: 0x1BE7884 VA: 0x1BE7884
	public void .ctor() { }

	// RVA: 0x1BE78D4 Offset: 0x1BE78D4 VA: 0x1BE78D4 Slot: 5
	protected sealed override string CreatePrimaryKey() { }

	// RVA: 0x1BE7990 Offset: 0x1BE7990 VA: 0x1BE7990
	public static string CreatePK(long userId, long svtId) { }

	// RVA: 0x1BE4824 Offset: 0x1BE4824 VA: 0x1BE4824
	public UserCommandCodeEntity GetUserCommandCodeEntity(int index) { }

	// RVA: 0x1BE7998 Offset: 0x1BE7998 VA: 0x1BE7998
	public bool IsEquipedCommandCode() { }

	// RVA: 0x1BE7A30 Offset: 0x1BE7A30 VA: 0x1BE7A30
	public bool IsCommandCardSlotOpen() { }

	// RVA: 0x1BE7AC4 Offset: 0x1BE7AC4 VA: 0x1BE7AC4
	public void CollectUserCommandCodeId(List<long> collectList) { }

	// RVA: 0x1BE7D7C Offset: 0x1BE7D7C VA: 0x1BE7D7C
	public bool IsAttach(long userCommandCodeId) { }

	// RVA: 0x1BE7E20 Offset: 0x1BE7E20 VA: 0x1BE7E20
	public int GetUserCommandCodeNumber(long commandCodeId) { }
}

// Namespace: 
public class UserServantCommandCodeMaster : DataMasterBase<UserServantCommandCodeMaster, UserServantCommandCodeEntity, string> // TypeDefIndex: 7501
{
	// Methods

	// RVA: 0x1BE7E80 Offset: 0x1BE7E80 VA: 0x1BE7E80
	public void .ctor() { }

	// RVA: 0x1BE7ED4 Offset: 0x1BE7ED4 VA: 0x1BE7ED4
	public UserServantCommandCodeEntity GetEntity(long userId, long svtId) { }

	// RVA: 0x1BE7F48 Offset: 0x1BE7F48 VA: 0x1BE7F48
	public bool TryGetEntity(out UserServantCommandCodeEntity entity, long userId, long svtId) { }

	// RVA: 0x1BE7FCC Offset: 0x1BE7FCC VA: 0x1BE7FCC
	public List<long> GetEquipedCommandCodeList() { }

	// RVA: 0x1BE81D0 Offset: 0x1BE81D0 VA: 0x1BE81D0
	public Dictionary<long, long> GetEquippedCommandCodeDic() { }

	// RVA: 0x1BE8444 Offset: 0x1BE8444 VA: 0x1BE8444
	public void getAttachList(out long[] userCommandCodeIdList, long userId) { }

	// RVA: 0x1BE4348 Offset: 0x1BE4348 VA: 0x1BE4348
	public int[] getCommandCodeIdList(long userId, int svtId) { }

	// RVA: 0x1BE8648 Offset: 0x1BE8648 VA: 0x1BE8648
	public List<long> getUserSvtCommandCodeIdList(long userId, int svtId) { }

	// RVA: 0x1BE88D4 Offset: 0x1BE88D4 VA: 0x1BE88D4
	public bool IsAttach(long userCommandCodeId) { }
}

// Namespace: 
public class UserServantEntity : DataEntityBase<long> // TypeDefIndex: 7502
{
	// Fields
	public static int LIMIT_SUPPORT_NOT_ASSIGN; // 0x0
	public ObscuredLong id; // 0x10
	public ObscuredLong userId; // 0x30
	public ObscuredInt svtId; // 0x50
	public ObscuredInt limitCount; // 0x60
	public ObscuredInt imageLimitCount; // 0x70
	public ObscuredInt dispLimitCount; // 0x80
	public ObscuredInt commandCardLimitCount; // 0x90
	public ObscuredInt iconLimitCount; // 0xA0
	public ObscuredInt portraitLimitCount; // 0xB0
	public ObscuredInt battleVoice; // 0xC0
	public ObscuredInt randomLimitCount; // 0xD0
	public ObscuredInt randomLimitCountSupport; // 0xE0
	public ObscuredInt limitCountSupport; // 0xF0
	public int lv; // 0x100
	public int exp; // 0x104
	public int atk; // 0x108
	public int hp; // 0x10C
	public int adjustAtk; // 0x110
	public int adjustHp; // 0x114
	public int skillLv1; // 0x118
	public int skillLv2; // 0x11C
	public int skillLv3; // 0x120
	public int treasureDeviceLv1; // 0x124
	public int exceedCount; // 0x128
	public int status; // 0x12C
	public long createdAt; // 0x130
	[CompilerGeneratedAttribute] // RVA: 0xC560BC Offset: 0xC560BC VA: 0xC560BC
	private static Comparison<ServantSkillEntity> <>f__am$cache0; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC560CC Offset: 0xC560CC VA: 0xC560CC
	private static Comparison<ServantSkillEntity> <>f__am$cache1; // 0x10

	// Properties
	public bool IsRandomChoice { get; }

	// Methods

	// RVA: 0x1BE8A54 Offset: 0x1BE8A54 VA: 0x1BE8A54
	public void .ctor() { }

	// RVA: 0x1BE8AA4 Offset: 0x1BE8AA4 VA: 0x1BE8AA4
	public void .ctor(UserServantEntity e) { }

	// RVA: 0x1BE8D7C Offset: 0x1BE8D7C VA: 0x1BE8D7C
	public void .ctor(UserServantCollectionEntity e) { }

	// RVA: 0x1BE8EA8 Offset: 0x1BE8EA8 VA: 0x1BE8EA8 Slot: 5
	protected sealed override long CreatePrimaryKey() { }

	// RVA: 0x1BE8F34 Offset: 0x1BE8F34 VA: 0x1BE8F34
	public bool get_IsRandomChoice() { }

	// RVA: 0x1BE9064 Offset: 0x1BE9064 VA: 0x1BE9064
	private int GetLimitCountWithRandom(UserServantEntity.RandomLimitCountKind kind, bool ignoreRandomSettings = False) { }

	// RVA: 0x1BE91F4 Offset: 0x1BE91F4 VA: 0x1BE91F4
	public long getUserId() { }

	// RVA: 0x1BE9280 Offset: 0x1BE9280 VA: 0x1BE9280
	public int getSvtId() { }

	// RVA: 0x1BE92F0 Offset: 0x1BE92F0 VA: 0x1BE92F0
	public int getLimitCount() { }

	// RVA: 0x1BE9360 Offset: 0x1BE9360 VA: 0x1BE9360
	public int getSkillLevel(int iIdx) { }

	// RVA: 0x1BE9394 Offset: 0x1BE9394 VA: 0x1BE9394
	public int[] getSkillLevelList() { }

	// RVA: 0x1BE9490 Offset: 0x1BE9490 VA: 0x1BE9490
	public int getTreasureDeviceLv() { }

	// RVA: 0x1BE9498 Offset: 0x1BE9498 VA: 0x1BE9498
	public int[] getSkillIdList(int dispLimitCount = -1, int specificLimitCount = -1, bool useUserSvtId = True) { }

	// RVA: 0x1BE97F8 Offset: 0x1BE97F8 VA: 0x1BE97F8
	public void getSkillInfo(out SkillInfo[] skillInfoList, int beforeClearQuestId = -1, int dispLimitCount = -1, bool useUserSvtId = True, bool finishEvent = False) { }

	// RVA: 0x1BE9DA8 Offset: 0x1BE9DA8 VA: 0x1BE9DA8
	public void getEquipSkillInfo(out SkillInfo[] skillInfoList, bool useUserSvtId = True) { }

	// RVA: 0x1BEA1E4 Offset: 0x1BEA1E4 VA: 0x1BEA1E4
	public void getNextUseSkillInfo(out int[] idList, out string[] skillNameList, int targetLv, int targetLimitCnt, bool useUserSvtId = True) { }

	// RVA: 0x1BEA61C Offset: 0x1BEA61C VA: 0x1BEA61C
	public void getPassiveSkillInfo(out int[] idList, out string[] titleList, out string[] explanationList, int dispLimitCount = -1) { }

	// RVA: 0x1BEACA8 Offset: 0x1BEACA8 VA: 0x1BEACA8
	public SvtUseSkillData getAppendSkillInfo() { }

	// RVA: 0x1BEB190 Offset: 0x1BEB190 VA: 0x1BEB190
	public int getFriendPointUpVal(long[] equipIds) { }

	// RVA: 0x1BEB608 Offset: 0x1BEB608 VA: 0x1BEB608
	public FuncList.TYPE getFriendPointUpType(long[] equipIds) { }

	// RVA: 0x1BEB2BC Offset: 0x1BEB2BC VA: 0x1BEB2BC
	protected int getBaseFriendPointUpVal() { }

	// RVA: 0x1BEB764 Offset: 0x1BEB764 VA: 0x1BEB764
	protected FuncList.TYPE getBaseFriendPointUpType() { }

	// RVA: 0x1BEBB58 Offset: 0x1BEBB58 VA: 0x1BEBB58
	public bool getEventUpVal(EventUpValSetupInfo setupInfo) { }

	// RVA: 0x1BEBFC8 Offset: 0x1BEBFC8 VA: 0x1BEBFC8
	public bool getEventUpVal(EventUpValSetupInfo setupInfo, int eventId) { }

	// RVA: 0x1BEC0B0 Offset: 0x1BEC0B0 VA: 0x1BEC0B0
	public bool getEventUpVal(int wearersSvtId, int wearesLimitCount, int wearesDispLimitCount, EventUpValSetupInfo setupInfo) { }

	// RVA: 0x1BEC130 Offset: 0x1BEC130 VA: 0x1BEC130
	public bool getEventUpVal(int wearersSvtId, int wearesLimitCount, int wearesDispLimitCount, EventUpValSetupInfo setupInfo, int eventId, bool finishEvent = False) { }

	// RVA: 0x1BEC144 Offset: 0x1BEC144 VA: 0x1BEC144
	public bool getEventUpVal(EventUpValSetupInfo setupInfo, long[] equipIds) { }

	// RVA: 0x1BEC37C Offset: 0x1BEC37C VA: 0x1BEC37C
	public bool getEventUpVal(EventUpValSetupInfo setupInfo, UserServantEntity[] equipServentEntityList) { }

	// RVA: 0x1BEC578 Offset: 0x1BEC578 VA: 0x1BEC578
	public bool[] getEventUpValList(EventUpValSetupInfo setupInfo) { }

	// RVA: 0x1BEC750 Offset: 0x1BEC750 VA: 0x1BEC750
	public bool[] getEventUpValList(int wearersSvtId, int wearesLimitCount, int wearesDispLimitCount, EventUpValSetupInfo setupInfo) { }

	// RVA: 0x1BEBC4C Offset: 0x1BEBC4C VA: 0x1BEBC4C
	protected bool getBaseEventUpVal(int wearersSvtId, int wearesLimitCount, int wearesDispLimitCount, EventUpValSetupInfo setupInfo, int baseEventId, bool finishEvent = False) { }

	// RVA: 0x1BEC8D4 Offset: 0x1BEC8D4 VA: 0x1BEC8D4
	public bool getEventUpVal(out EventUpValInfo eventUpVallInfo, EventUpValSetupInfo setupInfo, long[] equipIds) { }

	// RVA: 0x1BECB10 Offset: 0x1BECB10 VA: 0x1BECB10
	protected bool getBaseEventUpVal(ref EventUpValInfo eventUpVallInfo) { }

	// RVA: 0x1BECE64 Offset: 0x1BECE64 VA: 0x1BECE64
	public bool GetBonusUpVal(out EventUpValInfo eventUpVallInfo, EventUpValSetupInfo setupInfo, long[] equipIds, int questId, int questPhase) { }

	// RVA: 0x1BED104 Offset: 0x1BED104 VA: 0x1BED104
	private bool GetBaseBonusUpVal(ref EventUpValInfo eventUpVallInfo, QuestPhaseEntity questPhaseEntity) { }

	// RVA: 0x1BED44C Offset: 0x1BED44C VA: 0x1BED44C
	public bool getQuestRestriction(QuestRestrictionInfo questRestrictionInfo) { }

	// RVA: 0x1BED520 Offset: 0x1BED520 VA: 0x1BED520
	public bool getUniqueSvtRestriction(QuestRestrictionInfo questRestrictionInfo) { }

	// RVA: 0x1BED5C4 Offset: 0x1BED5C4 VA: 0x1BED5C4
	public bool getUniqueSvtRestriction(QuestRestrictionInfo questRestrictionInfo, PartyListViewItem partyItem, int num, int partyIndex = -1) { }

	// RVA: 0x1BED68C Offset: 0x1BED68C VA: 0x1BED68C
	public bool getTreasureDeviceInfo(out TreasureDvcInfo tdInfo, int beforeClearQuestId = -1, int dispLimitCount = -1) { }

	// RVA: 0x1BEDCD4 Offset: 0x1BEDCD4 VA: 0x1BEDCD4
	public bool getTreasureDeviceInfo(out int tdLv, out int tdMaxLv) { }

	// RVA: 0x1BEDFF0 Offset: 0x1BEDFF0 VA: 0x1BEDFF0
	public int getTreasureDeviceLevelIcon() { }

	// RVA: 0x1BEE04C Offset: 0x1BEE04C VA: 0x1BEE04C
	public int getServantLevel() { }

	// RVA: 0x1BEE054 Offset: 0x1BEE054 VA: 0x1BEE054
	public int getServantExp() { }

	// RVA: 0x1BEE05C Offset: 0x1BEE05C VA: 0x1BEE05C
	public bool checkID(long inId) { }

	// RVA: 0x1BEE0FC Offset: 0x1BEE0FC VA: 0x1BEE0FC
	public int getSellQp() { }

	// RVA: 0x1BEE384 Offset: 0x1BEE384 VA: 0x1BEE384
	public int getSellMana() { }

	// RVA: 0x1BEE484 Offset: 0x1BEE484 VA: 0x1BEE484
	public int getSellRarePri() { }

	// RVA: 0x1BEE1FC Offset: 0x1BEE1FC VA: 0x1BEE1FC
	private int getMagnification(ServantEntity svtEntity) { }

	// RVA: 0x1BEE584 Offset: 0x1BEE584 VA: 0x1BEE584
	public int getCollectionNo() { }

	// RVA: 0x1BEDB8C Offset: 0x1BEDB8C VA: 0x1BEDB8C
	public int getFriendshipRank() { }

	// RVA: 0x1BEE66C Offset: 0x1BEE66C VA: 0x1BEE66C
	public bool getExpInfo(out int exp, out int lateExp, out float barExp) { }

	// RVA: 0x1BEEA40 Offset: 0x1BEEA40 VA: 0x1BEEA40
	public int getSvtClassId() { }

	// RVA: 0x1BEEB28 Offset: 0x1BEEB28 VA: 0x1BEEB28
	public bool IsCombineMaterial() { }

	// RVA: 0x1BEEC14 Offset: 0x1BEEC14 VA: 0x1BEEC14
	public int getSvtClassGroupType(int classId) { }

	// RVA: 0x1BEECBC Offset: 0x1BEECBC VA: 0x1BEECBC
	public int getCombineQp() { }

	// RVA: 0x1BEE8C0 Offset: 0x1BEE8C0 VA: 0x1BEE8C0
	public int getLevelMax() { }

	// RVA: 0x1BEEE40 Offset: 0x1BEEE40 VA: 0x1BEEE40
	public bool isLevelMax() { }

	// RVA: 0x1BEEE6C Offset: 0x1BEEE6C VA: 0x1BEEE6C
	public int getLimitCntMax() { }

	// RVA: 0x1BEEF5C Offset: 0x1BEEF5C VA: 0x1BEEF5C
	public bool isLimitCountMax() { }

	// RVA: 0x1BEEFF0 Offset: 0x1BEEFF0 VA: 0x1BEEFF0
	public bool HasStatus(UserServantEntity.StatusFlag statusFlag) { }

	// RVA: 0x1BEF000 Offset: 0x1BEF000 VA: 0x1BEF000
	public bool IsLock() { }

	// RVA: 0x1BEF00C Offset: 0x1BEF00C VA: 0x1BEF00C
	public bool IsModifyLock(bool isLock) { }

	// RVA: 0x1BEF01C Offset: 0x1BEF01C VA: 0x1BEF01C
	public bool IsChoice() { }

	// RVA: 0x1BEF028 Offset: 0x1BEF028 VA: 0x1BEF028
	public bool IsModifyChoice(bool isChoice) { }

	// RVA: 0x1BEF038 Offset: 0x1BEF038 VA: 0x1BEF038
	public bool IsAddFriendShipHeroine() { }

	// RVA: 0x1BEF160 Offset: 0x1BEF160 VA: 0x1BEF160
	public bool IsNew() { }

	// RVA: 0x1BEF2A8 Offset: 0x1BEF2A8 VA: 0x1BEF2A8
	public void SetOld() { }

	// RVA: 0x1BEF368 Offset: 0x1BEF368 VA: 0x1BEF368
	public bool IsWithdrawal() { }

	// RVA: 0x1BEF374 Offset: 0x1BEF374 VA: 0x1BEF374
	public bool IsEventJoin() { }

	// RVA: 0x1BEF380 Offset: 0x1BEF380 VA: 0x1BEF380
	public bool IsNoPeriod() { }

	// RVA: 0x1BEF38C Offset: 0x1BEF38C VA: 0x1BEF38C
	public bool IsCondJoin() { }

	// RVA: 0x1BEF398 Offset: 0x1BEF398 VA: 0x1BEF398
	public bool IsLeave() { }

	// RVA: 0x1BEF41C Offset: 0x1BEF41C VA: 0x1BEF41C
	public bool IsProtectedEventServant() { }

	// RVA: 0x1BEF468 Offset: 0x1BEF468 VA: 0x1BEF468
	public EventServantEntity getEventServant() { }

	// RVA: 0x1BEF60C Offset: 0x1BEF60C VA: 0x1BEF60C
	public EventServantEntity getEventServant(bool is_finishedAt) { }

	// RVA: 0x1BEF06C Offset: 0x1BEF06C VA: 0x1BEF06C
	public bool IsHeroine() { }
