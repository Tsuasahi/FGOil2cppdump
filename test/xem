	public void .ctor(DecoderReplacementFallback fallback) { }

	// RVA: 0x27BB858 Offset: 0x27BB858 VA: 0x27BB858 Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x27BB8A8 Offset: 0x27BB8A8 VA: 0x27BB8A8 Slot: 5
	public override bool Fallback(byte[] bytesUnknown, int index) { }

	// RVA: 0x27BB9EC Offset: 0x27BB9EC VA: 0x27BB9EC Slot: 6
	public override char GetNextChar() { }

	// RVA: 0x27BBA7C Offset: 0x27BBA7C VA: 0x27BBA7C Slot: 7
	public override void Reset() { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 906
{
	// Methods

	// RVA: 0x27BBA88 Offset: 0x27BBA88 VA: 0x27BBA88
	public void .ctor() { }

	// RVA: 0x27BBAF8 Offset: 0x27BBAF8 VA: 0x27BBAF8 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x27BBB5C Offset: 0x27BBB5C VA: 0x27BBB5C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27BBBC0 Offset: 0x27BBBC0 VA: 0x27BBBC0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 907
{
	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x27BBB54 Offset: 0x27BBB54 VA: 0x27BBB54
	public void .ctor() { }

	// RVA: 0x27BBBD0 Offset: 0x27BBBD0 VA: 0x27BBBD0 Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x27BBBD8 Offset: 0x27BBBD8 VA: 0x27BBBD8 Slot: 5
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0x27BBC98 Offset: 0x27BBC98 VA: 0x27BBC98 Slot: 6
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x27BBD68 Offset: 0x27BBD68 VA: 0x27BBD68 Slot: 7
	public override char GetNextChar() { }
}

// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback // TypeDefIndex: 908
{
	// Fields
	private static EncoderFallback exception_fallback; // 0x0
	private static EncoderFallback replacement_fallback; // 0x8
	private static EncoderFallback standard_safe_fallback; // 0x10

	// Properties
	public static EncoderFallback ExceptionFallback { get; }
	public static EncoderFallback ReplacementFallback { get; }
	internal static EncoderFallback StandardSafeFallback { get; }

	// Methods

	// RVA: 0x27BBAF0 Offset: 0x27BBAF0 VA: 0x27BBAF0
	protected void .ctor() { }

	// RVA: 0x27BBD70 Offset: 0x27BBD70 VA: 0x27BBD70
	private static void .cctor() { }

	// RVA: 0x27BBF34 Offset: 0x27BBF34 VA: 0x27BBF34
	public static EncoderFallback get_ExceptionFallback() { }

	// RVA: 0x27BBF9C Offset: 0x27BBF9C VA: 0x27BBF9C
	public static EncoderFallback get_ReplacementFallback() { }

	// RVA: 0x27BC004 Offset: 0x27BC004 VA: 0x27BC004
	internal static EncoderFallback get_StandardSafeFallback() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract EncoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 909
{
	// Properties
	public abstract int Remaining { get; }

	// Methods

	// RVA: 0x27BBBC8 Offset: 0x27BBBC8 VA: 0x27BBBC8
	protected void .ctor() { }

	// RVA: -1 Offset: -1 Slot: 4
	public abstract int get_Remaining();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Fallback(char charUnknown, int index);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);

	// RVA: -1 Offset: -1 Slot: 7
	public abstract char GetNextChar();
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 910
{
	// Fields
	private char char_unknown; // 0x68
	private char char_unknown_high; // 0x6A
	private char char_unknown_low; // 0x6C
	private int index; // 0x70

	// Methods

	// RVA: 0x27BC06C Offset: 0x27BC06C VA: 0x27BC06C
	public void .ctor() { }

	// RVA: 0x27BC080 Offset: 0x27BC080 VA: 0x27BC080
	public void .ctor(string message) { }

	// RVA: 0x27BBC50 Offset: 0x27BBC50 VA: 0x27BBC50
	internal void .ctor(char charUnknown, int index) { }

	// RVA: 0x27BBD18 Offset: 0x27BBD18 VA: 0x27BBD18
	internal void .ctor(char charUnknownHigh, char charUnknownLow, int index) { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 911
{
	// Fields
	private string replacement; // 0x10

	// Properties
	public string DefaultString { get; }

	// Methods

	// RVA: 0x27BBE2C Offset: 0x27BBE2C VA: 0x27BBE2C
	public void .ctor() { }

	[MonoTODOAttribute] // RVA: 0xBCDE18 Offset: 0xBCDE18 VA: 0xBCDE18
	// RVA: 0x27BBE7C Offset: 0x27BBE7C VA: 0x27BBE7C
	public void .ctor(string replacement) { }

	// RVA: 0x27BC090 Offset: 0x27BC090 VA: 0x27BC090
	public string get_DefaultString() { }

	// RVA: 0x27BC098 Offset: 0x27BC098 VA: 0x27BC098 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }

	// RVA: 0x27BC1A4 Offset: 0x27BC1A4 VA: 0x27BC1A4 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27BC254 Offset: 0x27BC254 VA: 0x27BC254 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 912
{
	// Fields
	private string replacement; // 0x10
	private int current; // 0x18
	private bool fallback_assigned; // 0x1C

	// Properties
	public override int Remaining { get; }

	// Methods

	// RVA: 0x27BC0F8 Offset: 0x27BC0F8 VA: 0x27BC0F8
	public void .ctor(EncoderReplacementFallback fallback) { }

	// RVA: 0x27BC284 Offset: 0x27BC284 VA: 0x27BC284 Slot: 4
	public override int get_Remaining() { }

	// RVA: 0x27BC2C4 Offset: 0x27BC2C4 VA: 0x27BC2C4 Slot: 5
	public override bool Fallback(char charUnknown, int index) { }

	// RVA: 0x27BC3D0 Offset: 0x27BC3D0 VA: 0x27BC3D0 Slot: 6
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }

	// RVA: 0x27BC2CC Offset: 0x27BC2CC VA: 0x27BC2CC
	private bool Fallback(int index) { }

	// RVA: 0x27BC3D8 Offset: 0x27BC3D8 VA: 0x27BC3D8 Slot: 7
	public override char GetNextChar() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0xBCA650 Offset: 0xBCA650 VA: 0xBCA650
[Serializable]
public abstract class Encoding : ICloneable // TypeDefIndex: 913
{
	// Fields
	internal int codePage; // 0x10
	internal int windows_code_page; // 0x14
	private bool is_readonly; // 0x18
	private DecoderFallback decoder_fallback; // 0x20
	private EncoderFallback encoder_fallback; // 0x28
	private static Assembly i18nAssembly; // 0x0
	private static bool i18nDisabled; // 0x8
	private static EncodingInfo[] encoding_infos; // 0x10
	private static readonly object[] encodings; // 0x18
	internal string body_name; // 0x30
	internal string encoding_name; // 0x38
	internal string header_name; // 0x40
	internal bool is_mail_news_display; // 0x48
	internal bool is_mail_news_save; // 0x49
	internal bool is_browser_save; // 0x4A
	internal bool is_browser_display; // 0x4B
	internal string web_name; // 0x50
	private static Encoding asciiEncoding; // 0x20
	private static Encoding bigEndianEncoding; // 0x28
	private static Encoding defaultEncoding; // 0x30
	private static Encoding utf7Encoding; // 0x38
	private static Encoding utf8EncodingWithMarkers; // 0x40
	private static Encoding utf8EncodingWithoutMarkers; // 0x48
	private static Encoding unicodeEncoding; // 0x50
	private static Encoding isoLatin1Encoding; // 0x58
	private static Encoding utf8EncodingUnsafe; // 0x60
	private static Encoding utf32Encoding; // 0x68
	private static Encoding bigEndianUTF32Encoding; // 0x70
	private static readonly object lockobj; // 0x78

	// Properties
	[ComVisibleAttribute] // RVA: 0xBCF42C Offset: 0xBCF42C VA: 0xBCF42C
	public bool IsReadOnly { get; }
	[ComVisibleAttribute] // RVA: 0xBCF440 Offset: 0xBCF440 VA: 0xBCF440
	public DecoderFallback DecoderFallback { get; set; }
	[ComVisibleAttribute] // RVA: 0xBCF454 Offset: 0xBCF454 VA: 0xBCF454
	public EncoderFallback EncoderFallback { get; }
	public virtual string HeaderName { get; }
	public virtual string WebName { get; }
	public static Encoding ASCII { get; }
	public static Encoding BigEndianUnicode { get; }
	public static Encoding Default { get; }
	private static Encoding ISOLatin1 { get; }
	public static Encoding UTF7 { get; }
	public static Encoding UTF8 { get; }
	internal static Encoding UTF8Unmarked { get; }
	internal static Encoding UTF8UnmarkedUnsafe { get; }
	public static Encoding Unicode { get; }
	public static Encoding UTF32 { get; }
	internal static Encoding BigEndianUTF32 { get; }

	// Methods

	// RVA: 0x27BC460 Offset: 0x27BC460 VA: 0x27BC460
	protected void .ctor() { }

	// RVA: 0x27B96A4 Offset: 0x27B96A4 VA: 0x27B96A4
	protected void .ctor(int codePage) { }

	// RVA: 0x27BC470 Offset: 0x27BC470 VA: 0x27BC470
	private static void .cctor() { }

	// RVA: 0x27B9960 Offset: 0x27B9960 VA: 0x27B9960
	internal static string _(string arg) { }

	// RVA: 0x27BD3A4 Offset: 0x27BD3A4 VA: 0x27BD3A4
	public bool get_IsReadOnly() { }

	// RVA: 0x27BAA64 Offset: 0x27BAA64 VA: 0x27BAA64
	public DecoderFallback get_DecoderFallback() { }

	// RVA: 0x27BD3AC Offset: 0x27BD3AC VA: 0x27BD3AC
	public void set_DecoderFallback(DecoderFallback value) { }

	// RVA: 0x27B9F94 Offset: 0x27B9F94 VA: 0x27B9F94
	public EncoderFallback get_EncoderFallback() { }

	// RVA: 0x27BD46C Offset: 0x27BD46C VA: 0x27BD46C
	internal void SetFallbackInternal(EncoderFallback e, DecoderFallback d) { }

	// RVA: 0x27BD480 Offset: 0x27BD480 VA: 0x27BD480 Slot: 0
	public override bool Equals(object value) { }

	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetByteCount(char[] chars, int index, int count);

	// RVA: 0x27BD588 Offset: 0x27BD588 VA: 0x27BD588 Slot: 6
	public virtual int GetByteCount(string s) { }

	// RVA: 0x27BD66C Offset: 0x27BD66C VA: 0x27BD66C Slot: 7
	public virtual int GetByteCount(char[] chars) { }

	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);

	// RVA: 0x27BD718 Offset: 0x27BD718 VA: 0x27BD718 Slot: 9
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27BD97C Offset: 0x27BD97C VA: 0x27BD97C Slot: 10
	public virtual byte[] GetBytes(string s) { }

	// RVA: 0x27BDADC Offset: 0x27BDADC VA: 0x27BDADC Slot: 11
	public virtual byte[] GetBytes(char[] chars, int index, int count) { }

	// RVA: 0x27BDB98 Offset: 0x27BDB98 VA: 0x27BDB98 Slot: 12
	public virtual byte[] GetBytes(char[] chars) { }

	// RVA: -1 Offset: -1 Slot: 13
	public abstract int GetCharCount(byte[] bytes, int index, int count);

	// RVA: -1 Offset: -1 Slot: 14
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);

	// RVA: 0x27BDC5C Offset: 0x27BDC5C VA: 0x27BDC5C Slot: 15
	public virtual char[] GetChars(byte[] bytes, int index, int count) { }

	// RVA: 0x27BDD1C Offset: 0x27BDD1C VA: 0x27BDD1C Slot: 16
	public virtual char[] GetChars(byte[] bytes) { }

	// RVA: 0x27BAF90 Offset: 0x27BAF90 VA: 0x27BAF90 Slot: 17
	public virtual Decoder GetDecoder() { }

	// RVA: 0x27BDE60 Offset: 0x27BDE60 VA: 0x27BDE60
	private static object InvokeI18N(string name, object[] args) { }

	// RVA: 0x27BE414 Offset: 0x27BE414 VA: 0x27BE414
	public static Encoding GetEncoding(int codepage) { }

	[ComVisibleAttribute] // RVA: 0xBCDE28 Offset: 0xBCDE28 VA: 0xBCDE28
	// RVA: 0x27BFAC8 Offset: 0x27BFAC8 VA: 0x27BFAC8 Slot: 18
	public virtual object Clone() { }

	// RVA: 0x27BFBA4 Offset: 0x27BFBA4 VA: 0x27BFBA4
	public static Encoding GetEncoding(string name) { }

	// RVA: 0x27C018C Offset: 0x27C018C VA: 0x27C018C Slot: 2
	public override int GetHashCode() { }

	// RVA: -1 Offset: -1 Slot: 19
	public abstract int GetMaxByteCount(int charCount);

	// RVA: -1 Offset: -1 Slot: 20
	public abstract int GetMaxCharCount(int byteCount);

	// RVA: 0x27C0210 Offset: 0x27C0210 VA: 0x27C0210 Slot: 21
	public virtual byte[] GetPreamble() { }

	// RVA: 0x27C025C Offset: 0x27C025C VA: 0x27C025C Slot: 22
	public virtual string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x27C0288 Offset: 0x27C0288 VA: 0x27C0288 Slot: 23
	public virtual string GetString(byte[] bytes) { }

	// RVA: 0x27C0338 Offset: 0x27C0338 VA: 0x27C0338 Slot: 24
	public virtual string get_HeaderName() { }

	// RVA: 0x27C0340 Offset: 0x27C0340 VA: 0x27C0340 Slot: 25
	public virtual string get_WebName() { }

	// RVA: 0x27BEE4C Offset: 0x27BEE4C VA: 0x27BEE4C
	public static Encoding get_ASCII() { }

	// RVA: 0x27BF7AC Offset: 0x27BF7AC VA: 0x27BF7AC
	public static Encoding get_BigEndianUnicode() { }

	// RVA: 0x27C0358 Offset: 0x27C0358 VA: 0x27C0358
	internal static string InternalCodePage(ref int code_page) { }

	// RVA: 0x27BEAC0 Offset: 0x27BEAC0 VA: 0x27BEAC0
	public static Encoding get_Default() { }

	// RVA: 0x27BF940 Offset: 0x27BF940 VA: 0x27BF940
	private static Encoding get_ISOLatin1() { }

	// RVA: 0x27BEFD4 Offset: 0x27BEFD4 VA: 0x27BEFD4
	public static Encoding get_UTF7() { }

	// RVA: 0x27BF160 Offset: 0x27BF160 VA: 0x27BF160
	public static Encoding get_UTF8() { }

	// RVA: 0x27C035C Offset: 0x27C035C VA: 0x27C035C
	internal static Encoding get_UTF8Unmarked() { }

	// RVA: 0x27C0694 Offset: 0x27C0694 VA: 0x27C0694
	internal static Encoding get_UTF8UnmarkedUnsafe() { }

	// RVA: 0x27BF618 Offset: 0x27BF618 VA: 0x27BF618
	public static Encoding get_Unicode() { }

	// RVA: 0x27BF2F0 Offset: 0x27BF2F0 VA: 0x27BF2F0
	public static Encoding get_UTF32() { }

	// RVA: 0x27BF484 Offset: 0x27BF484 VA: 0x27BF484
	internal static Encoding get_BigEndianUTF32() { }

	[CLSCompliantAttribute] // RVA: 0xBCDE3C Offset: 0xBCDE3C VA: 0xBCDE3C
	[ComVisibleAttribute] // RVA: 0xBCDE3C Offset: 0xBCDE3C VA: 0xBCDE3C
	// RVA: 0x27C0904 Offset: 0x27C0904 VA: 0x27C0904 Slot: 26
	public virtual int GetByteCount(char* chars, int count) { }

	[CLSCompliantAttribute] // RVA: 0xBCDE7C Offset: 0xBCDE7C VA: 0xBCDE7C
	[ComVisibleAttribute] // RVA: 0xBCDE7C Offset: 0xBCDE7C VA: 0xBCDE7C
	// RVA: 0x27C0A58 Offset: 0x27C0A58 VA: 0x27C0A58 Slot: 27
	public virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
}

// Namespace: 
private sealed class Encoding.ForwardingDecoder : Decoder // TypeDefIndex: 914
{
	// Fields
	private Encoding encoding; // 0x20

	// Methods

	// RVA: 0x27BDE14 Offset: 0x27BDE14 VA: 0x27BDE14
	public void .ctor(Encoding enc) { }

	// RVA: 0x27C0CBC Offset: 0x27C0CBC VA: 0x27C0CBC Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncodingInfo // TypeDefIndex: 915
{
	// Fields
	private readonly int codepage; // 0x10
	private Encoding encoding; // 0x18

	// Methods

	// RVA: 0x27C0D2C Offset: 0x27C0D2C VA: 0x27C0D2C Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27C0DAC Offset: 0x27C0DAC VA: 0x27C0DAC Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : Encoding // TypeDefIndex: 916
{
	// Properties
	public override string HeaderName { get; }
	public override string WebName { get; }

	// Methods

	// RVA: 0x27C04EC Offset: 0x27C04EC VA: 0x27C04EC
	public void .ctor() { }

	// RVA: 0x27C0DB4 Offset: 0x27C0DB4 VA: 0x27C0DB4 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x27C0F1C Offset: 0x27C0F1C VA: 0x27C0F1C Slot: 6
	public override int GetByteCount(string s) { }

	// RVA: 0x27C0FAC Offset: 0x27C0FAC VA: 0x27C0FAC Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27C0FD8 Offset: 0x27C0FD8 VA: 0x27C0FD8
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, ref EncoderFallbackBuffer buffer, ref char[] fallback_chars) { }

	// RVA: 0x27C1594 Offset: 0x27C1594 VA: 0x27C1594 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27C15C0 Offset: 0x27C15C0 VA: 0x27C15C0
	private int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex, ref EncoderFallbackBuffer buffer, ref char[] fallback_chars) { }

	// RVA: 0x27C1B6C Offset: 0x27C1B6C VA: 0x27C1B6C Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x27C1CD4 Offset: 0x27C1CD4 VA: 0x27C1CD4 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x27C1F98 Offset: 0x27C1F98 VA: 0x27C1F98 Slot: 19
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x27C2054 Offset: 0x27C2054 VA: 0x27C2054 Slot: 20
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x27C2110 Offset: 0x27C2110 VA: 0x27C2110 Slot: 22
	public override string GetString(byte[] bytes, int index, int count) { }

	// RVA: 0x27C2318 Offset: 0x27C2318 VA: 0x27C2318 Slot: 23
	public override string GetString(byte[] bytes) { }

	// RVA: 0x27C23C8 Offset: 0x27C23C8 VA: 0x27C23C8 Slot: 24
	public override string get_HeaderName() { }

	// RVA: 0x27C2410 Offset: 0x27C2410 VA: 0x27C2410 Slot: 25
	public override string get_WebName() { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0xBCA664 Offset: 0xBCA664 VA: 0xBCA664
[DefaultMemberAttribute] // RVA: 0xBCA664 Offset: 0xBCA664 VA: 0xBCA664
[MonoTODOAttribute] // RVA: 0xBCA664 Offset: 0xBCA664 VA: 0xBCA664
[Serializable]
public sealed class StringBuilder : ISerializable // TypeDefIndex: 917
{
	// Fields
	private const int constDefaultCapacity = 16;
	private int _length; // 0x10
	private string _str; // 0x18
	private string _cached_str; // 0x20
	private int _maxCapacity; // 0x28

	// Properties
	public int Capacity { get; set; }
	public int Length { get; set; }
	public char Chars { get; set; }

	// Methods

	// RVA: 0x27C2458 Offset: 0x27C2458 VA: 0x27C2458
	public void .ctor(string value, int startIndex, int length, int capacity) { }

	// RVA: 0x27C2460 Offset: 0x27C2460 VA: 0x27C2460
	private void .ctor(string value, int startIndex, int length, int capacity, int maxCapacity) { }

	// RVA: 0x27C27C8 Offset: 0x27C27C8 VA: 0x27C27C8
	public void .ctor() { }

	// RVA: 0x27C2880 Offset: 0x27C2880 VA: 0x27C2880
	public void .ctor(int capacity) { }

	// RVA: 0x27C27D0 Offset: 0x27C27D0 VA: 0x27C27D0
	public void .ctor(string value) { }

	// RVA: 0x27C290C Offset: 0x27C290C VA: 0x27C290C
	public void .ctor(string value, int capacity) { }

	// RVA: 0x27C29CC Offset: 0x27C29CC VA: 0x27C29CC
	private void .ctor(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27C2C0C Offset: 0x27C2C0C VA: 0x27C2C0C Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }

	// RVA: 0x27C2D2C Offset: 0x27C2D2C VA: 0x27C2D2C
	public int get_Capacity() { }

	// RVA: 0x27C2B24 Offset: 0x27C2B24 VA: 0x27C2B24
	public void set_Capacity(int value) { }

	// RVA: 0x27C3068 Offset: 0x27C3068 VA: 0x27C3068
	public int get_Length() { }

	// RVA: 0x27C3070 Offset: 0x27C3070 VA: 0x27C3070
	public void set_Length(int value) { }

	// RVA: 0x27C322C Offset: 0x27C322C VA: 0x27C322C
	public char get_Chars(int index) { }

	// RVA: 0x27C32DC Offset: 0x27C32DC VA: 0x27C32DC
	public void set_Chars(int index, char value) { }

	// RVA: 0x27C2D98 Offset: 0x27C2D98 VA: 0x27C2D98 Slot: 3
	public override string ToString() { }

	// RVA: 0x27C33A4 Offset: 0x27C33A4 VA: 0x27C33A4
	public string ToString(int startIndex, int length) { }

	// RVA: 0x27C3484 Offset: 0x27C3484 VA: 0x27C3484
	public int EnsureCapacity(int capacity) { }

	// RVA: 0x27C355C Offset: 0x27C355C VA: 0x27C355C
	public StringBuilder Remove(int startIndex, int length) { }

	// RVA: 0x27C3678 Offset: 0x27C3678 VA: 0x27C3678
	public StringBuilder Replace(string oldValue, string newValue) { }

	// RVA: 0x27C3684 Offset: 0x27C3684 VA: 0x27C3684
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) { }

	// RVA: 0x27C39E4 Offset: 0x27C39E4 VA: 0x27C39E4
	public StringBuilder Append(char[] value) { }

	// RVA: 0x27C3ACC Offset: 0x27C3ACC VA: 0x27C3ACC
	public StringBuilder Append(string value) { }

	// RVA: 0x27C3C3C Offset: 0x27C3C3C VA: 0x27C3C3C
	public StringBuilder Append(bool value) { }

	// RVA: 0x27C3C78 Offset: 0x27C3C78 VA: 0x27C3C78
	public StringBuilder Append(int value) { }

	// RVA: 0x27C3CB0 Offset: 0x27C3CB0 VA: 0x27C3CB0
	public StringBuilder Append(long value) { }

	// RVA: 0x27C3CE8 Offset: 0x27C3CE8 VA: 0x27C3CE8
	public StringBuilder Append(object value) { }

	[CLSCompliantAttribute] // RVA: 0xBCDEBC Offset: 0xBCDEBC VA: 0xBCDEBC
	// RVA: 0x27C3D34 Offset: 0x27C3D34 VA: 0x27C3D34
	public StringBuilder Append(uint value) { }

	// RVA: 0x27C3D6C Offset: 0x27C3D6C VA: 0x27C3D6C
	public StringBuilder Append(char value) { }

	// RVA: 0x27C3140 Offset: 0x27C3140 VA: 0x27C3140
	public StringBuilder Append(char value, int repeatCount) { }

	// RVA: 0x27C3E0C Offset: 0x27C3E0C VA: 0x27C3E0C
	public StringBuilder Append(char[] value, int startIndex, int charCount) { }

	// RVA: 0x27C3F5C Offset: 0x27C3F5C VA: 0x27C3F5C
	public StringBuilder Append(string value, int startIndex, int count) { }

	[ComVisibleAttribute] // RVA: 0xBCDED0 Offset: 0xBCDED0 VA: 0xBCDED0
	// RVA: 0x27C40E0 Offset: 0x27C40E0 VA: 0x27C40E0
	public StringBuilder AppendLine() { }

	[ComVisibleAttribute] // RVA: 0xBCDEE4 Offset: 0xBCDEE4 VA: 0xBCDEE4
	// RVA: 0x27C410C Offset: 0x27C410C VA: 0x27C410C
	public StringBuilder AppendLine(string value) { }

	// RVA: 0x27C414C Offset: 0x27C414C VA: 0x27C414C
	public StringBuilder AppendFormat(string format, object[] args) { }

	// RVA: 0x27C4164 Offset: 0x27C4164 VA: 0x27C4164
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object[] args) { }

	// RVA: 0x27C41FC Offset: 0x27C41FC VA: 0x27C41FC
	public StringBuilder AppendFormat(string format, object arg0) { }

	// RVA: 0x27C42C8 Offset: 0x27C42C8 VA: 0x27C42C8
	public StringBuilder AppendFormat(string format, object arg0, object arg1) { }

	// RVA: 0x27C43E8 Offset: 0x27C43E8 VA: 0x27C43E8
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) { }

	// RVA: 0x27C4554 Offset: 0x27C4554 VA: 0x27C4554
	public StringBuilder Insert(int index, string value) { }

	// RVA: 0x27C46D0 Offset: 0x27C46D0 VA: 0x27C46D0
	public StringBuilder Insert(int index, char value) { }

	// RVA: 0x27C4800 Offset: 0x27C4800 VA: 0x27C4800
	public StringBuilder Insert(int index, string value, int count) { }

	// RVA: 0x27C2E9C Offset: 0x27C2E9C VA: 0x27C2E9C
	private void InternalEnsureCapacity(int size) { }
}

// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 918
{
	// Fields
	private bool bigEndian; // 0x58
	private bool byteOrderMark; // 0x59

	// Methods

	// RVA: 0x27C48FC Offset: 0x27C48FC VA: 0x27C48FC
	public void .ctor() { }

	// RVA: 0x27C08F4 Offset: 0x27C08F4 VA: 0x27C08F4
	public void .ctor(bool bigEndian, bool byteOrderMark) { }

	// RVA: 0x27C490C Offset: 0x27C490C VA: 0x27C490C
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) { }

	[MonoTODOAttribute] // RVA: 0xBCDEF8 Offset: 0xBCDEF8 VA: 0xBCDEF8
	// RVA: 0x27C4AE0 Offset: 0x27C4AE0 VA: 0x27C4AE0 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	[MonoTODOAttribute] // RVA: 0xBCDF30 Offset: 0xBCDF30 VA: 0xBCDF30
	// RVA: 0x27C4D38 Offset: 0x27C4D38 VA: 0x27C4D38 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27C53D4 Offset: 0x27C53D4 VA: 0x27C53D4 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x27C553C Offset: 0x27C553C VA: 0x27C553C Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x27C5988 Offset: 0x27C5988 VA: 0x27C5988 Slot: 19
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x27C5A44 Offset: 0x27C5A44 VA: 0x27C5A44 Slot: 20
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x27C5B00 Offset: 0x27C5B00 VA: 0x27C5B00 Slot: 17
	public override Decoder GetDecoder() { }

	// RVA: 0x27C5BA0 Offset: 0x27C5BA0 VA: 0x27C5BA0 Slot: 21
	public override byte[] GetPreamble() { }

	// RVA: 0x27C5CB0 Offset: 0x27C5CB0 VA: 0x27C5CB0 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27C5D94 Offset: 0x27C5D94 VA: 0x27C5D94 Slot: 2
	public override int GetHashCode() { }

	[CLSCompliantAttribute] // RVA: 0xBCDF68 Offset: 0xBCDF68 VA: 0xBCDF68
	// RVA: 0x27C5DD4 Offset: 0x27C5DD4 VA: 0x27C5DD4 Slot: 26
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x27C5E6C Offset: 0x27C5E6C VA: 0x27C5E6C Slot: 6
	public override int GetByteCount(string s) { }

	[CLSCompliantAttribute] // RVA: 0xBCDF7C Offset: 0xBCDF7C VA: 0xBCDF7C
	// RVA: 0x27C5E70 Offset: 0x27C5E70 VA: 0x27C5E70 Slot: 27
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x27C5E74 Offset: 0x27C5E74 VA: 0x27C5E74 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27C5E78 Offset: 0x27C5E78 VA: 0x27C5E78 Slot: 22
	public override string GetString(byte[] bytes, int index, int count) { }
}

// Namespace: 
private sealed class UTF32Encoding.UTF32Decoder : Decoder // TypeDefIndex: 919
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x24
	private int leftOverLength; // 0x28

	// Methods

	// RVA: 0x27C5B6C Offset: 0x27C5B6C VA: 0x27C5B6C
	public void .ctor(bool bigEndian) { }

	// RVA: 0x27C5EA4 Offset: 0x27C5EA4 VA: 0x27C5EA4 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0xBCA6D8 Offset: 0xBCA6D8 VA: 0xBCA6D8
[MonoTODOAttribute] // RVA: 0xBCA6D8 Offset: 0xBCA6D8 VA: 0xBCA6D8
[Serializable]
public class UTF7Encoding : Encoding // TypeDefIndex: 920
{
	// Fields
	private bool allowOptionals; // 0x58
	private static readonly byte[] encodingRules; // 0x0
	private static readonly sbyte[] base64Values; // 0x8

	// Methods

	// RVA: 0x27C0554 Offset: 0x27C0554 VA: 0x27C0554
	public void .ctor() { }

	// RVA: 0x27C6564 Offset: 0x27C6564 VA: 0x27C6564
	public void .ctor(bool allowOptionals) { }

	// RVA: 0x27C6618 Offset: 0x27C6618 VA: 0x27C6618
	private static void .cctor() { }

	[ComVisibleAttribute] // RVA: 0xBCDF90 Offset: 0xBCDF90 VA: 0xBCDF90
	// RVA: 0x27C66CC Offset: 0x27C66CC VA: 0x27C66CC Slot: 2
	public override int GetHashCode() { }

	[ComVisibleAttribute] // RVA: 0xBCDFA4 Offset: 0xBCDFA4 VA: 0xBCDFA4
	// RVA: 0x27C66F8 Offset: 0x27C66F8 VA: 0x27C66F8 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27C6810 Offset: 0x27C6810 VA: 0x27C6810
	private static int InternalGetByteCount(char[] chars, int index, int count, bool flush, int leftOver, bool isInShifted, bool allowOptionals) { }

	// RVA: 0x27C6B24 Offset: 0x27C6B24 VA: 0x27C6B24 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x27C6BC4 Offset: 0x27C6BC4 VA: 0x27C6BC4
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush, ref int leftOver, ref bool isInShifted, bool allowOptionals) { }

	// RVA: 0x27C7364 Offset: 0x27C7364 VA: 0x27C7364 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27C7434 Offset: 0x27C7434 VA: 0x27C7434
	private static int InternalGetCharCount(byte[] bytes, int index, int count, int leftOver) { }

	// RVA: 0x27C76F4 Offset: 0x27C76F4 VA: 0x27C76F4 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x27C7774 Offset: 0x27C7774 VA: 0x27C7774
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, ref int leftOver) { }

	// RVA: 0x27C7D38 Offset: 0x27C7D38 VA: 0x27C7D38 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x27C7E5C Offset: 0x27C7E5C VA: 0x27C7E5C Slot: 19
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x27C7F50 Offset: 0x27C7F50 VA: 0x27C7F50 Slot: 20
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x27C800C Offset: 0x27C800C VA: 0x27C800C Slot: 17
	public override Decoder GetDecoder() { }

	[CLSCompliantAttribute] // RVA: 0xBCDFB8 Offset: 0xBCDFB8 VA: 0xBCDFB8
	[ComVisibleAttribute] // RVA: 0xBCDFB8 Offset: 0xBCDFB8 VA: 0xBCDFB8
	// RVA: 0x27C808C Offset: 0x27C808C VA: 0x27C808C Slot: 26
	public override int GetByteCount(char* chars, int count) { }

	[ComVisibleAttribute] // RVA: 0xBCDFF8 Offset: 0xBCDFF8 VA: 0xBCDFF8
	// RVA: 0x27C8090 Offset: 0x27C8090 VA: 0x27C8090 Slot: 6
	public override int GetByteCount(string s) { }

	[ComVisibleAttribute] // RVA: 0xBCE00C Offset: 0xBCE00C VA: 0xBCE00C
	[CLSCompliantAttribute] // RVA: 0xBCE00C Offset: 0xBCE00C VA: 0xBCE00C
	// RVA: 0x27C8094 Offset: 0x27C8094 VA: 0x27C8094 Slot: 27
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	[ComVisibleAttribute] // RVA: 0xBCE04C Offset: 0xBCE04C VA: 0xBCE04C
	// RVA: 0x27C8098 Offset: 0x27C8098 VA: 0x27C8098 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[ComVisibleAttribute] // RVA: 0xBCE060 Offset: 0xBCE060 VA: 0xBCE060
	// RVA: 0x27C809C Offset: 0x27C809C VA: 0x27C809C Slot: 22
	public override string GetString(byte[] bytes, int index, int count) { }
}

// Namespace: 
private sealed class UTF7Encoding.UTF7Decoder : Decoder // TypeDefIndex: 921
{
	// Fields
	private int leftOver; // 0x20

	// Methods

	// RVA: 0x27C8068 Offset: 0x27C8068 VA: 0x27C8068
	public void .ctor() { }

	// RVA: 0x27C80C8 Offset: 0x27C80C8 VA: 0x27C80C8 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[MonoTODOAttribute] // RVA: 0xBCA728 Offset: 0xBCA728 VA: 0xBCA728
[ComVisibleAttribute] // RVA: 0xBCA728 Offset: 0xBCA728 VA: 0xBCA728
[MonoTODOAttribute] // RVA: 0xBCA728 Offset: 0xBCA728 VA: 0xBCA728
[Serializable]
public class UTF8Encoding : Encoding // TypeDefIndex: 922
{
	// Fields
	private bool emitIdentifier; // 0x58

	// Methods

	// RVA: 0x27C8170 Offset: 0x27C8170 VA: 0x27C8170
	public void .ctor() { }

	// RVA: 0x27C055C Offset: 0x27C055C VA: 0x27C055C
	public void .ctor(bool encoderShouldEmitUTF8Identifier) { }

	// RVA: 0x27C0568 Offset: 0x27C0568 VA: 0x27C0568
	public void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }

	// RVA: 0x27C817C Offset: 0x27C817C VA: 0x27C817C
	private static int InternalGetByteCount(char[] chars, int index, int count, ref char leftOver, bool flush) { }

	// RVA: 0x27C8348 Offset: 0x27C8348 VA: 0x27C8348
	private static int InternalGetByteCount(char* chars, int count, ref char leftOver, bool flush) { }

	// RVA: 0x27C8450 Offset: 0x27C8450 VA: 0x27C8450 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	[ComVisibleAttribute] // RVA: 0xBCE074 Offset: 0xBCE074 VA: 0xBCE074
	[CLSCompliantAttribute] // RVA: 0xBCE074 Offset: 0xBCE074 VA: 0xBCE074
	// RVA: 0x27C8488 Offset: 0x27C8488 VA: 0x27C8488 Slot: 26
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x27C8544 Offset: 0x27C8544 VA: 0x27C8544
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, ref char leftOver, bool flush) { }

	// RVA: 0x27C87C8 Offset: 0x27C87C8 VA: 0x27C87C8
	private static int InternalGetBytes(char* chars, int count, byte* bytes, int bcount, ref char leftOver, bool flush) { }

	// RVA: 0x27C8A88 Offset: 0x27C8A88 VA: 0x27C8A88 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27C8AC8 Offset: 0x27C8AC8 VA: 0x27C8AC8 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	[CLSCompliantAttribute] // RVA: 0xBCE0B4 Offset: 0xBCE0B4 VA: 0xBCE0B4
	[ComVisibleAttribute] // RVA: 0xBCE0B4 Offset: 0xBCE0B4 VA: 0xBCE0B4
	// RVA: 0x27C8D58 Offset: 0x27C8D58 VA: 0x27C8D58 Slot: 27
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }

	// RVA: 0x27C8E90 Offset: 0x27C8E90 VA: 0x27C8E90
	private static int InternalGetCharCount(byte[] bytes, int index, int count, uint leftOverBits, uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x27C9074 Offset: 0x27C9074 VA: 0x27C9074
	private static int InternalGetCharCount(byte* bytes, int count, uint leftOverBits, uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x27C9304 Offset: 0x27C9304 VA: 0x27C9304
	private static int Fallback(object provider, ref DecoderFallbackBuffer buffer, ref byte[] bufferArg, byte* bytes, long index, uint size) { }

	// RVA: 0x27C95BC Offset: 0x27C95BC VA: 0x27C95BC
	private static void Fallback(object provider, ref DecoderFallbackBuffer buffer, ref byte[] bufferArg, byte* bytes, long byteIndex, uint size, char* chars, ref int charIndex) { }

	// RVA: 0x27C98B4 Offset: 0x27C98B4 VA: 0x27C98B4 Slot: 13
	public override int GetCharCount(byte[] bytes, int index, int count) { }

	// RVA: 0x27C9900 Offset: 0x27C9900 VA: 0x27C9900
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, ref uint leftOverBits, ref uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x27C9BB8 Offset: 0x27C9BB8 VA: 0x27C9BB8
	private static int InternalGetChars(byte* bytes, int byteCount, char* chars, int charCount, ref uint leftOverBits, ref uint leftOverCount, object provider, ref DecoderFallbackBuffer fallbackBuffer, ref byte[] bufferArg, bool flush) { }

	// RVA: 0x27C9FA8 Offset: 0x27C9FA8 VA: 0x27C9FA8 Slot: 14
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }

	// RVA: 0x27CA004 Offset: 0x27CA004 VA: 0x27CA004 Slot: 19
	public override int GetMaxByteCount(int charCount) { }

	// RVA: 0x27CA0C0 Offset: 0x27CA0C0 VA: 0x27CA0C0 Slot: 20
	public override int GetMaxCharCount(int byteCount) { }

	// RVA: 0x27CA17C Offset: 0x27CA17C VA: 0x27CA17C Slot: 17
	public override Decoder GetDecoder() { }

	// RVA: 0x27CA220 Offset: 0x27CA220 VA: 0x27CA220 Slot: 21
	public override byte[] GetPreamble() { }

	// RVA: 0x27CA304 Offset: 0x27CA304 VA: 0x27CA304 Slot: 0
	public override bool Equals(object value) { }

	// RVA: 0x27CA42C Offset: 0x27CA42C VA: 0x27CA42C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x27CA430 Offset: 0x27CA430 VA: 0x27CA430 Slot: 6
	public override int GetByteCount(string chars) { }

	[ComVisibleAttribute] // RVA: 0xBCE0F4 Offset: 0xBCE0F4 VA: 0xBCE0F4
	// RVA: 0x27CA434 Offset: 0x27CA434 VA: 0x27CA434 Slot: 22
	public override string GetString(byte[] bytes, int index, int count) { }
}

// Namespace: 
[Serializable]
private class UTF8Encoding.UTF8Decoder : Decoder // TypeDefIndex: 923
{
	// Fields
	private uint leftOverBits; // 0x20
	private uint leftOverCount; // 0x24

	// Methods

	// RVA: 0x27CA1EC Offset: 0x27CA1EC VA: 0x27CA1EC
	public void .ctor(DecoderFallback fallback) { }

	// RVA: 0x27CA460 Offset: 0x27CA460 VA: 0x27CA460 Slot: 4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
}

// Namespace: System.Text
[ComVisibleAttribute] // RVA: 0xBCA79C Offset: 0xBCA79C VA: 0xBCA79C
[MonoTODOAttribute] // RVA: 0xBCA79C Offset: 0xBCA79C VA: 0xBCA79C
[Serializable]
public class UnicodeEncoding : Encoding // TypeDefIndex: 924
{
	// Fields
	private bool bigEndian; // 0x58
	private bool byteOrderMark; // 0x59

	// Methods

	// RVA: 0x27CA4B8 Offset: 0x27CA4B8 VA: 0x27CA4B8
	public void .ctor() { }

	// RVA: 0x27C0348 Offset: 0x27C0348 VA: 0x27C0348
	public void .ctor(bool bigEndian, bool byteOrderMark) { }

	// RVA: 0x27CA4EC Offset: 0x27CA4EC VA: 0x27CA4EC
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }

	// RVA: 0x27CA65C Offset: 0x27CA65C VA: 0x27CA65C Slot: 5
	public override int GetByteCount(char[] chars, int index, int count) { }

	// RVA: 0x27CA7C4 Offset: 0x27CA7C4 VA: 0x27CA7C4 Slot: 6
	public override int GetByteCount(string s) { }

	[ComVisibleAttribute] // RVA: 0xBCE108 Offset: 0xBCE108 VA: 0xBCE108
	[CLSCompliantAttribute] // RVA: 0xBCE108 Offset: 0xBCE108 VA: 0xBCE108
	// RVA: 0x27CA85C Offset: 0x27CA85C VA: 0x27CA85C Slot: 26
	public override int GetByteCount(char* chars, int count) { }

	// RVA: 0x27CA924 Offset: 0x27CA924 VA: 0x27CA924 Slot: 8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }

	// RVA: 0x27CAC84 Offset: 0x27CAC84 VA: 0x27CAC84 Slot: 9
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
