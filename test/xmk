
	// RVA: 0x12B4EF0 Offset: 0x12B4EF0 VA: 0x12B4EF0
	public void set_IsInput(bool value) { }

	// RVA: 0x12B4FE0 Offset: 0x12B4FE0 VA: 0x12B4FE0
	protected void OnEnable() { }

	// RVA: 0x12B4FEC Offset: 0x12B4FEC VA: 0x12B4FEC
	protected void add_callbackFunc(ServantStatusListViewManager.CallbackFunc value) { }

	// RVA: 0x12B50D8 Offset: 0x12B50D8 VA: 0x12B50D8
	protected void remove_callbackFunc(ServantStatusListViewManager.CallbackFunc value) { }

	// RVA: 0x12B51C4 Offset: 0x12B51C4 VA: 0x12B51C4
	public void CreateList(ServantStatusListViewItem mainInfo) { }

	// RVA: 0x12B5C98 Offset: 0x12B5C98 VA: 0x12B5C98
	public void DestroyList() { }

	// RVA: 0x12B601C Offset: 0x12B601C VA: 0x12B601C
	protected void SetObjectItem(ServantStatusListViewObject obj) { }

	// RVA: 0x12B6108 Offset: 0x12B6108 VA: 0x12B6108
	public float GetScrillBarValue(ServantStatusListViewItemDraw.Kind kind) { }

	// RVA: 0x12B62F8 Offset: 0x12B62F8 VA: 0x12B62F8
	public void SetMode(ServantStatusListViewManager.InitMode mode, ServantStatusListViewManager.CallbackFunc callback) { }

	// RVA: 0x12B6300 Offset: 0x12B6300 VA: 0x12B6300
	public void SetMode(ServantStatusListViewManager.InitMode mode) { }

	// RVA: 0x12B6600 Offset: 0x12B6600 VA: 0x12B6600
	protected void RequestListObject(ServantStatusListViewObject.InitMode mode, float delay) { }

	// RVA: 0x12B6410 Offset: 0x12B6410 VA: 0x12B6410
	protected void RequestListObject(ServantStatusListViewObject.InitMode mode) { }

	// RVA: 0x12B690C Offset: 0x12B690C VA: 0x12B690C
	protected void OnMoveEnd() { }

	// RVA: 0x12B69E0 Offset: 0x12B69E0 VA: 0x12B69E0
	public void OnClickListView(ServantStatusListViewObject obj) { }

	// RVA: 0x12B6D2C Offset: 0x12B6D2C VA: 0x12B6D2C
	public void OnClickListViewExp() { }

	// RVA: 0x12B6E84 Offset: 0x12B6E84 VA: 0x12B6E84
	public void OnClickListViewEquipExp() { }

	// RVA: 0x12B702C Offset: 0x12B702C VA: 0x12B702C
	public void OnClickListViewFriendship() { }

	// RVA: 0x12B71E8 Offset: 0x12B71E8 VA: 0x12B71E8
	public void OnClickListViewEquip1() { }

	// RVA: 0x12B7218 Offset: 0x12B7218 VA: 0x12B7218
	public void OnLongPushListViewEquip1() { }

	// RVA: 0x12B7248 Offset: 0x12B7248 VA: 0x12B7248
	public void OnClickCommandCharaLevel(int id) { }

	// RVA: 0x12B727C Offset: 0x12B727C VA: 0x12B727C
	public void OnClickFaceCharaLevel(int id) { }

	// RVA: 0x12B72B0 Offset: 0x12B72B0 VA: 0x12B72B0
	public void OnClickPortraitCharaLevel(int id) { }

	// RVA: 0x12B72E4 Offset: 0x12B72E4 VA: 0x12B72E4
	public void OnClickCommandCode(int id) { }

	// RVA: 0x12B7318 Offset: 0x12B7318 VA: 0x12B7318
	public void OnClickServantQuest(int questId) { }

	// RVA: 0x12B734C Offset: 0x12B734C VA: 0x12B734C
	public void OnClickServantTdSpeed(int type) { }

	// RVA: 0x12B7380 Offset: 0x12B7380 VA: 0x12B7380
	public void OnClickRandomLimitCountSupport(int index) { }

	// RVA: 0x12B73B4 Offset: 0x12B73B4 VA: 0x12B73B4
	public void OnClickSwitchRandomLimitCountOwn() { }

	// RVA: 0x12B73E4 Offset: 0x12B73E4 VA: 0x12B73E4
	public void OnClickSwitchRandomLimitCountSupport() { }

	// RVA: 0x12B7414 Offset: 0x12B7414 VA: 0x12B7414
	public void OnClickRandomLimitCountMask(ServantStatusDialog.MaskType maskType) { }

	// RVA: 0x12B7448 Offset: 0x12B7448 VA: 0x12B7448
	public void OnClickButton(UICommonButton tappedButton, ServantStatusListViewItemDrawButton ownerObject) { }

	// RVA: 0x12B7510 Offset: 0x12B7510 VA: 0x12B7510
	private static void .cctor() { }
}

// Namespace: 
public enum ServantStatusListViewManager.InitMode // TypeDefIndex: 5769
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewManager.InitMode NONE = 0;
	public const ServantStatusListViewManager.InitMode INPUT = 1;
	public const ServantStatusListViewManager.InitMode VALID = 2;
	public const ServantStatusListViewManager.InitMode BATTLE = 3;
	public const ServantStatusListViewManager.InitMode COMMAND = 4;
	public const ServantStatusListViewManager.InitMode FACE = 5;
	public const ServantStatusListViewManager.InitMode STATUS = 6;
	public const ServantStatusListViewManager.InitMode PORTRAIT = 7;
	public const ServantStatusListViewManager.InitMode MODIFY = 8;
	public const ServantStatusListViewManager.InitMode RANDOM_LIMIT_COUNT_SUPPORT = 9;
	public const ServantStatusListViewManager.InitMode RANDOM_LIMIT_COUNT_SETTING = 10;
}

// Namespace: 
public enum ServantStatusListViewManager.ResultKind // TypeDefIndex: 5770
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewManager.ResultKind SELECT = 0;
	public const ServantStatusListViewManager.ResultKind EQUIP1 = 1;
	public const ServantStatusListViewManager.ResultKind EQUIP1_STATUS = 2;
	public const ServantStatusListViewManager.ResultKind COMMAND = 3;
	public const ServantStatusListViewManager.ResultKind FACE = 4;
	public const ServantStatusListViewManager.ResultKind PORTRAIT = 5;
	public const ServantStatusListViewManager.ResultKind COMMAND_CODE = 6;
	public const ServantStatusListViewManager.ResultKind SERVANT_QUEST = 7;
	public const ServantStatusListViewManager.ResultKind TREASURE_DEVICE_SPEED = 8;
	public const ServantStatusListViewManager.ResultKind CHANGE_VOICE = 9;
	public const ServantStatusListViewManager.ResultKind RANDOM_LIMIT_COUNT_SUPPORT = 10;
	public const ServantStatusListViewManager.ResultKind RANDOM_LIMIT_COUNT_SETTING = 11;
	public const ServantStatusListViewManager.ResultKind RANDOM_LIMIT_COUNT_MASK = 12;
}

// Namespace: 
public sealed class ServantStatusListViewManager.CallbackFunc : MulticastDelegate // TypeDefIndex: 5771
{
	// Methods

	// RVA: 0x12B765C Offset: 0x12B765C VA: 0x12B765C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x12B6AE8 Offset: 0x12B6AE8 VA: 0x12B6AE8 Slot: 11
	public virtual void Invoke(ServantStatusListViewManager.ResultKind result, int id) { }

	// RVA: 0x12B766C Offset: 0x12B766C VA: 0x12B766C Slot: 12
	public virtual IAsyncResult BeginInvoke(ServantStatusListViewManager.ResultKind result, int id, AsyncCallback callback, object object) { }

	// RVA: 0x12B7714 Offset: 0x12B7714 VA: 0x12B7714 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class ServantStatusListViewObject : MonoBehaviour // TypeDefIndex: 5772
{
	// Fields
	[SerializeField] // RVA: 0xC507C4 Offset: 0xC507C4 VA: 0xC507C4
	protected GameObject dispObject; // 0x18
	protected ServantStatusListViewItem mainInfo; // 0x20
	protected ServantStatusListViewManager manager; // 0x28
	protected Transform baseParent; // 0x30
	protected Vector3 basePosition; // 0x38
	protected Vector3 baseScale; // 0x44
	protected bool isBusy; // 0x50
	protected int index; // 0x54
	protected ServantStatusListViewObject.State state; // 0x58
	[CompilerGeneratedAttribute] // RVA: 0xC507D4 Offset: 0xC507D4 VA: 0xC507D4
	[DebuggerBrowsableAttribute] // RVA: 0xC507D4 Offset: 0xC507D4 VA: 0xC507D4
	private Action callbackFunc; // 0x60
	protected ServantStatusListViewItemDraw itemDraw; // 0x68
	protected ServantStatusListViewItemDraw.DispMode dispMode; // 0x70

	// Properties
	public bool IsBusy { get; }
	public int Index { get; }

	// Methods

	// RVA: 0x12B7720 Offset: 0x12B7720 VA: 0x12B7720
	public void .ctor() { }

	// RVA: 0x12B7728 Offset: 0x12B7728 VA: 0x12B7728
	public bool get_IsBusy() { }

	// RVA: 0x12B7730 Offset: 0x12B7730 VA: 0x12B7730
	public int get_Index() { }

	// RVA: 0x12B7738 Offset: 0x12B7738 VA: 0x12B7738
	protected void add_callbackFunc(Action value) { }

	// RVA: 0x12B7824 Offset: 0x12B7824 VA: 0x12B7824
	protected void remove_callbackFunc(Action value) { }

	// RVA: 0x12B7910 Offset: 0x12B7910 VA: 0x12B7910
	protected void Awake() { }

	// RVA: 0x12B797C Offset: 0x12B797C VA: 0x12B797C
	private void OnDestroy() { }

	// RVA: 0x12B6004 Offset: 0x12B6004 VA: 0x12B6004
	public void SetManager(ServantStatusListViewManager manager) { }

	// RVA: 0x12B5E70 Offset: 0x12B5E70 VA: 0x12B5E70
	public void SetItem(ServantStatusListViewItem item) { }

	// RVA: 0x12B6A44 Offset: 0x12B6A44 VA: 0x12B6A44
	public ServantStatusListViewItemDraw.Kind GetKind() { }

	// RVA: 0x12B5E80 Offset: 0x12B5E80 VA: 0x12B5E80
	public int GetSize() { }

	// RVA: 0x12B7980 Offset: 0x12B7980 VA: 0x12B7980
	public void SetVisible(bool isVisible) { }

	// RVA: 0x12B7A30 Offset: 0x12B7A30 VA: 0x12B7A30
	public void SetInput(bool isInput) { }

	// RVA: 0x12B5F6C Offset: 0x12B5F6C VA: 0x12B5F6C
	public void SetBaseTransform() { }

	// RVA: 0x12B7AF4 Offset: 0x12B7AF4 VA: 0x12B7AF4
	public void SetTransform(Vector3 position) { }

	// RVA: 0x12B7B60 Offset: 0x12B7B60 VA: 0x12B7B60
	public void Init(ServantStatusListViewObject.InitMode initMode, Action callbackFunc, float delay, Vector3 position) { }

	// RVA: 0x12B6804 Offset: 0x12B6804 VA: 0x12B6804
	public void Init(ServantStatusListViewObject.InitMode initMode, Action callbackFunc, float delay) { }

	// RVA: 0x12B6888 Offset: 0x12B6888 VA: 0x12B6888
	public void Init(ServantStatusListViewObject.InitMode initMode, Action callbackFunc) { }

	// RVA: 0x12B6088 Offset: 0x12B6088 VA: 0x12B6088
	public void Init(ServantStatusListViewObject.InitMode initMode) { }

	// RVA: 0x12B8358 Offset: 0x12B8358 VA: 0x12B8358
	protected void SetupDisp() { }

	// RVA: 0x12B7DE0 Offset: 0x12B7DE0 VA: 0x12B7DE0
	private void EventBattleStart() { }

	// RVA: 0x12B7EA8 Offset: 0x12B7EA8 VA: 0x12B7EA8
	private void EventCommandStart() { }

	// RVA: 0x12B7F70 Offset: 0x12B7F70 VA: 0x12B7F70
	private void EventFaceStart() { }

	// RVA: 0x12B8038 Offset: 0x12B8038 VA: 0x12B8038
	private void EventStatusStart() { }

	// RVA: 0x12B8100 Offset: 0x12B8100 VA: 0x12B8100
	private void EventPortraitStart() { }

	// RVA: 0x12B81C8 Offset: 0x12B81C8 VA: 0x12B81C8
	private void EventRandomLimitCountSupportStart() { }

	// RVA: 0x12B8290 Offset: 0x12B8290 VA: 0x12B8290
	private void EventRandomLimitCountSettingStart() { }

	// RVA: 0x12B8428 Offset: 0x12B8428 VA: 0x12B8428
	protected void EventMoveEnd() { }

	// RVA: 0x12B8450 Offset: 0x12B8450 VA: 0x12B8450
	protected void OnClick() { }

	// RVA: 0x12B8484 Offset: 0x12B8484 VA: 0x12B8484
	public void OnClickExp() { }

	// RVA: 0x12B84B0 Offset: 0x12B84B0 VA: 0x12B84B0
	public void OnClickEquipExp() { }

	// RVA: 0x12B84DC Offset: 0x12B84DC VA: 0x12B84DC
	public void OnClickFriendship() { }

	// RVA: 0x12B8508 Offset: 0x12B8508 VA: 0x12B8508
	public void OnClickEquip1() { }

	// RVA: 0x12B8560 Offset: 0x12B8560 VA: 0x12B8560
	public void OnLongPushEquip1() { }

	// RVA: 0x12B85B8 Offset: 0x12B85B8 VA: 0x12B85B8
	public void OnClickCommandCharaLevel1() { }

	// RVA: 0x12B8610 Offset: 0x12B8610 VA: 0x12B8610
	public void OnClickCommandCharaLevel2() { }

	// RVA: 0x12B8668 Offset: 0x12B8668 VA: 0x12B8668
	public void OnClickCommandCharaLevel3() { }

	// RVA: 0x12B86C0 Offset: 0x12B86C0 VA: 0x12B86C0
	public void OnClickCommandCharaLevel4() { }

	// RVA: 0x12B8718 Offset: 0x12B8718 VA: 0x12B8718
	public void OnClickCommandCharaLevel5() { }

	// RVA: 0x12B8770 Offset: 0x12B8770 VA: 0x12B8770
	public void OnClickCommandCharaLevel6() { }

	// RVA: 0x12B87C8 Offset: 0x12B87C8 VA: 0x12B87C8
	public void OnClickCommandCharaLevel7() { }

	// RVA: 0x12B8820 Offset: 0x12B8820 VA: 0x12B8820
	public void OnClickCommandCharaLevel8() { }

	// RVA: 0x12B8878 Offset: 0x12B8878 VA: 0x12B8878
	public void OnClickCommandCharaLevel9() { }

	// RVA: 0x12B88D0 Offset: 0x12B88D0 VA: 0x12B88D0
	public void OnClickFaceCharaLevel1() { }

	// RVA: 0x12B8928 Offset: 0x12B8928 VA: 0x12B8928
	public void OnClickFaceCharaLevel2() { }

	// RVA: 0x12B8980 Offset: 0x12B8980 VA: 0x12B8980
	public void OnClickFaceCharaLevel3() { }

	// RVA: 0x12B89D8 Offset: 0x12B89D8 VA: 0x12B89D8
	public void OnClickFaceCharaLevel4() { }

	// RVA: 0x12B8A30 Offset: 0x12B8A30 VA: 0x12B8A30
	public void OnClickFaceCharaLevel5() { }

	// RVA: 0x12B8A88 Offset: 0x12B8A88 VA: 0x12B8A88
	public void OnClickFaceCharaLevel6() { }

	// RVA: 0x12B8AE0 Offset: 0x12B8AE0 VA: 0x12B8AE0
	public void OnClickFaceCharaLevel7() { }

	// RVA: 0x12B8B38 Offset: 0x12B8B38 VA: 0x12B8B38
	public void OnClickFaceCharaLevel8() { }

	// RVA: 0x12B8B90 Offset: 0x12B8B90 VA: 0x12B8B90
	public void OnClickFaceCharaLevel9() { }

	// RVA: 0x12B8BE8 Offset: 0x12B8BE8 VA: 0x12B8BE8
	public void OnClickFaceCharaLevel10() { }

	// RVA: 0x12B8C40 Offset: 0x12B8C40 VA: 0x12B8C40
	public void OnClickFaceCharaLevel11() { }

	// RVA: 0x12B8C98 Offset: 0x12B8C98 VA: 0x12B8C98
	public void OnClickFaceCharaLevel12() { }

	// RVA: 0x12B8CF0 Offset: 0x12B8CF0 VA: 0x12B8CF0
	public void OnClickPortraitCharaLevel1() { }

	// RVA: 0x12B8D48 Offset: 0x12B8D48 VA: 0x12B8D48
	public void OnClickPortraitCharaLevel2() { }

	// RVA: 0x12B8DA0 Offset: 0x12B8DA0 VA: 0x12B8DA0
	public void OnClickPortraitCharaLevel3() { }

	// RVA: 0x12B8DF8 Offset: 0x12B8DF8 VA: 0x12B8DF8
	public void OnClickPortraitCharaLevel4() { }

	// RVA: 0x12B8E50 Offset: 0x12B8E50 VA: 0x12B8E50
	public void OnClickPortraitCharaLevel5() { }

	// RVA: 0x12B8EA8 Offset: 0x12B8EA8 VA: 0x12B8EA8
	public void OnClickPortraitCharaLevel6() { }

	// RVA: 0x12B8F00 Offset: 0x12B8F00 VA: 0x12B8F00
	public void OnClickPortraitCharaLevel7() { }

	// RVA: 0x12B8F58 Offset: 0x12B8F58 VA: 0x12B8F58
	public void OnClickPortraitCharaLevel8() { }

	// RVA: 0x12B8FB0 Offset: 0x12B8FB0 VA: 0x12B8FB0
	public void OnClickPortraitCharaLevel9() { }

	// RVA: 0x12B9008 Offset: 0x12B9008 VA: 0x12B9008
	public void touchCommandCard(int index) { }

	// RVA: 0x12B9064 Offset: 0x12B9064 VA: 0x12B9064
	public void OnClickServantQuest(int questId) { }

	// RVA: 0x12B90C0 Offset: 0x12B90C0 VA: 0x12B90C0
	public void OnClickServantTdSpeedFree() { }

	// RVA: 0x12B9118 Offset: 0x12B9118 VA: 0x12B9118
	public void OnClickServantTdSpeedActual() { }

	// RVA: 0x12B9170 Offset: 0x12B9170 VA: 0x12B9170
	public void OnClickServantTdSpeedTwice() { }

	// RVA: 0x12B91C8 Offset: 0x12B91C8 VA: 0x12B91C8
	public void OnClickReflectOwnSetting() { }

	// RVA: 0x12B9220 Offset: 0x12B9220 VA: 0x12B9220
	public void OnClickRandomLimitCount1() { }

	// RVA: 0x12B9278 Offset: 0x12B9278 VA: 0x12B9278
	public void OnClickRandomLimitCount2() { }

	// RVA: 0x12B92D0 Offset: 0x12B92D0 VA: 0x12B92D0
	public void OnClickRandomLimitCount3() { }

	// RVA: 0x12B9328 Offset: 0x12B9328 VA: 0x12B9328
	public void OnClickRandomLimitCount4() { }

	// RVA: 0x12B9380 Offset: 0x12B9380 VA: 0x12B9380
	public void OnClickRandomCostume1() { }

	// RVA: 0x12B93D8 Offset: 0x12B93D8 VA: 0x12B93D8
	public void OnClickRandomCostume2() { }

	// RVA: 0x12B9430 Offset: 0x12B9430 VA: 0x12B9430
	public void OnClickRandomCostume3() { }

	// RVA: 0x12B9488 Offset: 0x12B9488 VA: 0x12B9488
	public void OnClickRandomCostume4() { }

	// RVA: 0x12B94E0 Offset: 0x12B94E0 VA: 0x12B94E0
	public void OnClickRandomCostume5() { }

	// RVA: 0x12B9538 Offset: 0x12B9538 VA: 0x12B9538
	public void OnClickRandomCostume6() { }

	// RVA: 0x12B9590 Offset: 0x12B9590 VA: 0x12B9590
	public void OnClickRandomCostume7() { }

	// RVA: 0x12B95E8 Offset: 0x12B95E8 VA: 0x12B95E8
	public void OnClickRandomCostume8() { }

	// RVA: 0x12B9640 Offset: 0x12B9640 VA: 0x12B9640
	public void OnClickSwitchRandomLimitCountOwn() { }

	// RVA: 0x12B9698 Offset: 0x12B9698 VA: 0x12B9698
	public void OnClickSwitchRandomLimitCountSupport() { }

	// RVA: 0x12B96F0 Offset: 0x12B96F0 VA: 0x12B96F0
	public void OnClickRandomLimitCountOtherSettingMask() { }

	// RVA: 0x12B9748 Offset: 0x12B9748 VA: 0x12B9748
	public void OnClickRandomLimitCountSettingMask() { }

	// RVA: 0x12B97A0 Offset: 0x12B97A0 VA: 0x12B97A0
	public void OnClickRandomLimitCountSelectSupportMask() { }

	// RVA: 0x12B97F8 Offset: 0x12B97F8 VA: 0x12B97F8
	public void OnClickButton(UICommonButton tappedButton, ServantStatusListViewItemDrawButton ownerObject) { }
}

// Namespace: 
public enum ServantStatusListViewObject.InitMode // TypeDefIndex: 5773
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewObject.InitMode INVISIBLE = 0;
	public const ServantStatusListViewObject.InitMode INVALID = 1;
	public const ServantStatusListViewObject.InitMode VALID = 2;
	public const ServantStatusListViewObject.InitMode INPUT = 3;
	public const ServantStatusListViewObject.InitMode BATTLE = 4;
	public const ServantStatusListViewObject.InitMode COMMAND = 5;
	public const ServantStatusListViewObject.InitMode FACE = 6;
	public const ServantStatusListViewObject.InitMode STATUS = 7;
	public const ServantStatusListViewObject.InitMode PORTRAIT = 8;
	public const ServantStatusListViewObject.InitMode MODIFY = 9;
	public const ServantStatusListViewObject.InitMode RANDOM_LIMIT_COUNT_SUPPORT = 10;
	public const ServantStatusListViewObject.InitMode RANDOM_LIMIT_COUNT_SETTING = 11;
}

// Namespace: 
protected enum ServantStatusListViewObject.State // TypeDefIndex: 5774
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusListViewObject.State INIT = 0;
	public const ServantStatusListViewObject.State IDLE = 1;
	public const ServantStatusListViewObject.State MOVE = 2;
	public const ServantStatusListViewObject.State INPUT = 3;
}

// Namespace: 
public class ServantStatusNpComponent : BaseMonoBehaviour // TypeDefIndex: 5775
{
	// Fields
	[SerializeField] // RVA: 0xC50810 Offset: 0xC50810 VA: 0xC50810
	protected GameObject baseObject; // 0x18
	[SerializeField] // RVA: 0xC50820 Offset: 0xC50820 VA: 0xC50820
	protected GameObject maskBase; // 0x20
	[SerializeField] // RVA: 0xC50830 Offset: 0xC50830 VA: 0xC50830
	protected UISprite maskSprite; // 0x28
	[SerializeField] // RVA: 0xC50840 Offset: 0xC50840 VA: 0xC50840
	protected UILabel maskInfoLabel; // 0x30
	[SerializeField] // RVA: 0xC50850 Offset: 0xC50850 VA: 0xC50850
	protected UISprite condSprite; // 0x38
	[SerializeField] // RVA: 0xC50860 Offset: 0xC50860 VA: 0xC50860
	protected UILabel condLabel; // 0x40
	[SerializeField] // RVA: 0xC50870 Offset: 0xC50870 VA: 0xC50870
	protected GameObject npObject; // 0x48
	[SerializeField] // RVA: 0xC50880 Offset: 0xC50880 VA: 0xC50880
	protected GameObject commandCardPrefab; // 0x50
	[SerializeField] // RVA: 0xC50890 Offset: 0xC50890 VA: 0xC50890
	protected GameObject commandCardBase; // 0x58
	[SerializeField] // RVA: 0xC508A0 Offset: 0xC508A0 VA: 0xC508A0
	protected UILabel rubyLabel; // 0x60
	[SerializeField] // RVA: 0xC508B0 Offset: 0xC508B0 VA: 0xC508B0
	protected UILabel nameLabel; // 0x68
	[SerializeField] // RVA: 0xC508C0 Offset: 0xC508C0 VA: 0xC508C0
	protected UILabel npRankLabel; // 0x70
	[SerializeField] // RVA: 0xC508D0 Offset: 0xC508D0 VA: 0xC508D0
	protected UILabel npTypeLabel; // 0x78
	[SerializeField] // RVA: 0xC508E0 Offset: 0xC508E0 VA: 0xC508E0
	protected UILabel npLevelLabel; // 0x80
	[SerializeField] // RVA: 0xC508F0 Offset: 0xC508F0 VA: 0xC508F0
	protected UISprite[] guageSpriteList; // 0x88
	[SerializeField] // RVA: 0xC50900 Offset: 0xC50900 VA: 0xC50900
	protected UILabel maxGuageLabel; // 0x90
	[SerializeField] // RVA: 0xC50910 Offset: 0xC50910 VA: 0xC50910
	protected UILabel explanationLabel; // 0x98
	protected TreasureDvcEntity tdEntity; // 0xA0
	protected BattleCommandData commandCardData; // 0xA8
	protected BattleCommandComponent commandCardComponent; // 0xB0
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int DETAIL_MAX_HEIGHT; // 0x4
	private static readonly int DETAIL_DEFAULT_HEIGHT; // 0x8
	private static readonly int DETAIL_LINE_HEIGHT; // 0xC
	private static readonly float MULTI_NP_POS_Y; // 0x10
	private static readonly float MASK_BASE_POS_Y; // 0x14
	private static readonly int MASK_DEFAULT_HEIGHT; // 0x18
	private static readonly int COND_TITLE_MAX_WIDTH; // 0x1C
	[CompilerGeneratedAttribute] // RVA: 0xC50920 Offset: 0xC50920 VA: 0xC50920
	[DebuggerBrowsableAttribute] // RVA: 0xC50920 Offset: 0xC50920 VA: 0xC50920
	private int <Adjust>k__BackingField; // 0xB8
	private bool isCharaHide; // 0xBC
	private int cardType; // 0xC0
	private int commandLimitCountFix; // 0xC4
	private int commandLimitCountAdjust; // 0xC8
	private HashSet<int> costumeIdHash; // 0xD0

	// Properties
	public int Adjust { get; set; }

	// Methods

	// RVA: 0x12B983C Offset: 0x12B983C VA: 0x12B983C
	public void .ctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC82B4 Offset: 0xCC82B4 VA: 0xCC82B4
	// RVA: 0x12B98B4 Offset: 0x12B98B4 VA: 0x12B98B4
	private void set_Adjust(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xCC82C4 Offset: 0xCC82C4 VA: 0xCC82C4
	// RVA: 0x12AB988 Offset: 0x12AB988 VA: 0x12AB988
	public int get_Adjust() { }

	// RVA: 0x12AAA98 Offset: 0x12AAA98 VA: 0x12AAA98
	public void Set(int idx, TreasureDvcInfo tdInfo, ServantStatusListViewItem item, int tdId, bool multiFlg = False, int condLimitCount = 0, string title = "", string closedMessage = "", int isCharaHide = 0) { }

	// RVA: 0x12ABA7C Offset: 0x12ABA7C VA: 0x12ABA7C
	public void ModifyCommandCard(ServantStatusListViewItem item) { }

	// RVA: 0x12B9D24 Offset: 0x12B9D24 VA: 0x12B9D24
	private int GetCommandLimitCount(ServantStatusListViewItem item) { }

	// RVA: 0x12B9ED8 Offset: 0x12B9ED8 VA: 0x12B9ED8
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusParameterGauge : BaseMonoBehaviour // TypeDefIndex: 5776
{
	// Fields
	[SerializeField] // RVA: 0xC5095C Offset: 0xC5095C VA: 0xC5095C
	protected UISprite evaluationSprite; // 0x18
	[SerializeField] // RVA: 0xC5096C Offset: 0xC5096C VA: 0xC5096C
	protected UISprite evaluationAdd1Sprite; // 0x20
	[SerializeField] // RVA: 0xC5097C Offset: 0xC5097C VA: 0xC5097C
	protected UISprite evaluationAdd2Sprite; // 0x28
	[SerializeField] // RVA: 0xC5098C Offset: 0xC5098C VA: 0xC5098C
	protected UISprite evaluationAdd3Sprite; // 0x30
	[SerializeField] // RVA: 0xC5099C Offset: 0xC5099C VA: 0xC5099C
	protected UISprite[] gaugeSpriteList; // 0x38

	// Methods

	// RVA: 0x12B9F88 Offset: 0x12B9F88 VA: 0x12B9F88
	public void .ctor() { }

	// RVA: 0x12B9FE8 Offset: 0x12B9FE8 VA: 0x12B9FE8
	public void Set(ServantStatusParameterGauge.Kind kind, StatusRank.Kind rank) { }
}

// Namespace: 
public enum ServantStatusParameterGauge.Kind // TypeDefIndex: 5777
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusParameterGauge.Kind POWER = 0;
	public const ServantStatusParameterGauge.Kind DEFENSE = 1;
	public const ServantStatusParameterGauge.Kind AGILITY = 2;
	public const ServantStatusParameterGauge.Kind MAGIC = 3;
	public const ServantStatusParameterGauge.Kind LUCK = 4;
	public const ServantStatusParameterGauge.Kind NP = 5;
}

// Namespace: 
public class ServantStatusQuestBoardDraw : MonoBehaviour // TypeDefIndex: 5778
{
	// Fields
	public static readonly int TITLE_LABEL_BASE_WIDTH; // 0x0
	private static readonly Vector3 CLEAR_POS_AREA; // 0x4
	private static readonly Vector3 CLEAR_POS_QUEST; // 0x10
	private static readonly int QUEST_BOARD_PHASE_INTERVAL; // 0x1C
	private static readonly int QUEST_BOARD_PHASE_LOOF_INTERVAL; // 0x20
	private static readonly int QUEST_BOARD_PHASE_EX_INTERVAL; // 0x24
	private static readonly int QUEST_BOARD_PHASE_EX_LOOF_INTERVAL; // 0x28
	private static readonly string DARK_BOARD_SPRITE_NAME; // 0x30
	private static readonly int DARK_BOARD_WIDTH; // 0x38
	private static readonly int DARK_BOARD_HIGHT; // 0x3C
	private static readonly string BASE_BOARD_SPRITE_NAME; // 0x40
	private static readonly string TITLE_SPRITE_NAME_INTERLUDE; // 0x48
	private static readonly string TITLE_SPRITE_NAME_INTERLUDE_MAP; // 0x50
	private static readonly string TITLE_SPRITE_NAME_RAINFORCEMENT; // 0x58
	private static readonly string QUEST_BOARD_INFO_FRAME_NAME; // 0x60
	private static readonly string BASE_BOARD_LIMIT_UNSEAL_SPRITE_NAME; // 0x68
	private static readonly string TITLE_SPRITE_NAME_LIMIT_UNSEAL; // 0x70
	[SerializeField] // RVA: 0xC509AC Offset: 0xC509AC VA: 0xC509AC
	private UISprite mcBaseP; // 0x18
	[SerializeField] // RVA: 0xC509BC Offset: 0xC509BC VA: 0xC509BC
	private GameObject mClearObj; // 0x20
	[SerializeField] // RVA: 0xC509CC Offset: 0xC509CC VA: 0xC509CC
	private GameObject mLinkObj; // 0x28
	[SerializeField] // RVA: 0xC509DC Offset: 0xC509DC VA: 0xC509DC
	private GameObject mTitleObj; // 0x30
	[SerializeField] // RVA: 0xC509EC Offset: 0xC509EC VA: 0xC509EC
	private UILabel mNoneLb; // 0x38
	[SerializeField] // RVA: 0xC509FC Offset: 0xC509FC VA: 0xC509FC
	private GameObject mRewardObj; // 0x40
	[SerializeField] // RVA: 0xC50A0C Offset: 0xC50A0C VA: 0xC50A0C
	private UILabel mTitleNameLb; // 0x48
	[SerializeField] // RVA: 0xC50A1C Offset: 0xC50A1C VA: 0xC50A1C
	private UISprite mLineSp; // 0x50
	[SerializeField] // RVA: 0xC50A2C Offset: 0xC50A2C VA: 0xC50A2C
	private UILabel mTitleShortcutLb; // 0x58
	[SerializeField] // RVA: 0xC50A3C Offset: 0xC50A3C VA: 0xC50A3C
	private UISprite mTitleShortcutSp; // 0x60
	[SerializeField] // RVA: 0xC50A4C Offset: 0xC50A4C VA: 0xC50A4C
	private UISprite mTitleSp; // 0x68
	[SerializeField] // RVA: 0xC50A5C Offset: 0xC50A5C VA: 0xC50A5C
	private UISprite mTitle2Sp; // 0x70
	[SerializeField] // RVA: 0xC50A6C Offset: 0xC50A6C VA: 0xC50A6C
	private BoardOptionTextWithIconComponent mOptionInfoLb; // 0x78
	[SerializeField] // RVA: 0xC50A7C Offset: 0xC50A7C VA: 0xC50A7C
	private UISprite mOptionInfoFrameSp; // 0x80
	[SerializeField] // RVA: 0xC50A8C Offset: 0xC50A8C VA: 0xC50A8C
	private ItemIconComponent mRewardIcon; // 0x88
	[SerializeField] // RVA: 0xC50A9C Offset: 0xC50A9C VA: 0xC50A9C
	private UISprite mRewardGetSP; // 0x90
	private List<QuestBoardInformaionText> mInfoTextList; // 0x98
	protected GiftEntity[] mRewardIconInfs; // 0xA0
	protected GameObject inputMessageObject; // 0xA8
	protected int questId; // 0xB0
	protected MapControl.QuestInfo qinf; // 0xB8
	private UIAtlas basePanelAtlas; // 0xC0

	// Methods

	// RVA: 0x12BA4F8 Offset: 0x12BA4F8 VA: 0x12BA4F8
	public void .ctor() { }

	// RVA: 0x12BA500 Offset: 0x12BA500 VA: 0x12BA500
	public static bool IsClose(MapControl.QuestInfo qinf) { }

	// RVA: 0x12BA61C Offset: 0x12BA61C VA: 0x12BA61C
	private bool IsEventTime(EventEntity eventEntity, long checkTime) { }

	// RVA: 0x12BA638 Offset: 0x12BA638 VA: 0x12BA638
	private BoardMessageEntity findOverrideQuestMessage(BoardMessageEntity[] boardMessageData, int eventId) { }

	// RVA: 0x12B2FCC Offset: 0x12B2FCC VA: 0x12B2FCC
	public void SetDark() { }

	// RVA: 0x12B10A4 Offset: 0x12B10A4 VA: 0x12B10A4
	public void SetItem(MapControl.QuestInfo qinf, MapControl.QuestInfo beforeQuestInfo, GameObject inputMessageObject, ServantStatusQuestBoardManager questBoardManager, int limitCount) { }

	// RVA: 0x12B37F0 Offset: 0x12B37F0 VA: 0x12B37F0
	public void UpdateItem(ServantStatusQuestBoardManager questBoardManager) { }

	// RVA: 0x12BA728 Offset: 0x12BA728 VA: 0x12BA728
	private void ResetInfoTextList() { }

	// RVA: 0x12BAF10 Offset: 0x12BAF10 VA: 0x12BAF10
	private void UpdateInfoText(MapControl.QuestInfo qinf, int strIndex, long checkTime) { }

	// RVA: 0x12B3470 Offset: 0x12B3470 VA: 0x12B3470
	public void OnChangeAlphaAnim(ServantStatusQuestBoardManager questBoardManager) { }

	// RVA: 0x12BAE50 Offset: 0x12BAE50 VA: 0x12BAE50
	private void SetInfoTextAlpha(float alpha) { }

	// RVA: 0x12BAFB0 Offset: 0x12BAFB0 VA: 0x12BAFB0
	private void ChangeNextInfoText(MapControl.QuestInfo qinf, ServantStatusQuestBoardManager questBoardManagerer) { }

	// RVA: 0x12BB2D8 Offset: 0x12BB2D8 VA: 0x12BB2D8
	private bool IsMultiInfoText() { }

	// RVA: 0x12BB338 Offset: 0x12BB338 VA: 0x12BB338
	private bool IsInfoTextListNullOrEmpty() { }

	// RVA: 0x12BAEAC Offset: 0x12BAEAC VA: 0x12BAEAC
	private void SetRewardIconAlpha(float alpha) { }

	// RVA: 0x12BB16C Offset: 0x12BB16C VA: 0x12BB16C
	private void ChangeNextRewardIcon(ServantStatusQuestBoardManager questBoardManager) { }

	// RVA: 0x12BB3A0 Offset: 0x12BB3A0 VA: 0x12BB3A0
	private bool IsRewardIcons() { }

	// RVA: 0x12BA7C0 Offset: 0x12BA7C0 VA: 0x12BA7C0
	private QuestBoardInformaionText[] GetCampaignText(int quest_id, int phase, bool isQuestNoneCleared, ServantStatusQuestBoardManager questBoardManager, ref int cost_calc_val, ref int fixedVal) { }

	// RVA: 0x12BB3C0 Offset: 0x12BB3C0 VA: 0x12BB3C0
	protected void OnClick() { }

	// RVA: 0x12BB4C8 Offset: 0x12BB4C8 VA: 0x12BB4C8
	private static void .cctor() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC42044 Offset: 0xC42044 VA: 0xC42044
private sealed class ServantStatusQuestBoardDraw.<SetItem>c__AnonStorey0 // TypeDefIndex: 5779
{
	// Fields
	internal Color baseCol; // 0x10
	internal bool isMap; // 0x20
	internal ServantStatusQuestBoardDraw $this; // 0x28

	// Methods

	// RVA: 0x12BA7B0 Offset: 0x12BA7B0 VA: 0x12BA7B0
	public void .ctor() { }

	// RVA: 0x12BB68C Offset: 0x12BB68C VA: 0x12BB68C
	internal void <>m__0() { }

	// RVA: 0x12BB8FC Offset: 0x12BB8FC VA: 0x12BB8FC
	internal void <>m__1() { }
}

// Namespace: 
public class ServantStatusQuestBoardManager // TypeDefIndex: 5780
{
	// Fields
	private static readonly float ALPHA_ANIM_SPD_RATE; // 0x0
	private static readonly float ALPHA_ANIM_TIME_INTERVAL; // 0x4
	private static readonly int ALPHA_ANIM_COUNT_RESET_VAL; // 0x8
	private static readonly int ALPHA_FADE_FRAME_NUM; // 0xC
	private float mAlphaAnimNow; // 0x10
	private AlphaTransitionCalculator fadeUIAlphaCalculator; // 0x18
	private float mAlphaAnimTimeOld; // 0x20
	private int mAlphaAnimCnt; // 0x24
	private bool mResetConsumeColor; // 0x28
	private float infoTime; // 0x2C
	private float exitTime; // 0x30
	private long mListCreatedTime; // 0x38

	// Properties
	public float AlphaAnimNow { get; }
	public long ListCreatedTime { get; }

	// Methods

	// RVA: 0x12B03B0 Offset: 0x12B03B0 VA: 0x12B03B0
	public void .ctor() { }

	// RVA: 0x12BAE48 Offset: 0x12BAE48 VA: 0x12BAE48
	public float get_AlphaAnimNow() { }

	// RVA: 0x12BA7B8 Offset: 0x12BA7B8 VA: 0x12BA7B8
	public long get_ListCreatedTime() { }

	// RVA: 0x12B35EC Offset: 0x12B35EC VA: 0x12B35EC
	public bool UpdateAlphaAnim() { }

	// RVA: 0x12BBB98 Offset: 0x12BBB98 VA: 0x12BBB98
	private AlphaTransitionCalculator CreateAlphaCalculator() { }

	// RVA: 0x12BBC60 Offset: 0x12BBC60 VA: 0x12BBC60
	private void ResetAlphaAnimTime() { }

	// RVA: 0x12BAE38 Offset: 0x12BAE38 VA: 0x12BAE38
	public int GetAlphaAnimCnt(int length) { }

	// RVA: 0x12BBCA8 Offset: 0x12BBCA8 VA: 0x12BBCA8
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusSkillComponent : BaseMonoBehaviour // TypeDefIndex: 5781
{
	// Fields
	[SerializeField] // RVA: 0xC50AAC Offset: 0xC50AAC VA: 0xC50AAC
	protected GameObject skillBase; // 0x18
	[SerializeField] // RVA: 0xC50ABC Offset: 0xC50ABC VA: 0xC50ABC
	protected UISprite titleNumFirstSprite; // 0x20
	[SerializeField] // RVA: 0xC50ACC Offset: 0xC50ACC VA: 0xC50ACC
	protected UISprite titleNumSecondSprite; // 0x28
	[SerializeField] // RVA: 0xC50ADC Offset: 0xC50ADC VA: 0xC50ADC
	protected SkillIconComponent skillIcon; // 0x30
	[SerializeField] // RVA: 0xC50AEC Offset: 0xC50AEC VA: 0xC50AEC
	protected UIRangeLabel skillTitleRangeLabel; // 0x38
	[SerializeField] // RVA: 0xC50AFC Offset: 0xC50AFC VA: 0xC50AFC
	protected UILabel skillExplanationLabel; // 0x40
	private static readonly int DETAIL_FONT_SIZE; // 0x0
	private static readonly int MAX_HEIGHT; // 0x4
	private static readonly int ADJUST_HEIGHT; // 0x8
	private static readonly string SKILL_NO_FILE_PREFIX; // 0x10
	private static readonly int MAX_LEVEL; // 0x18

	// Methods

	// RVA: 0x12BBD2C Offset: 0x12BBD2C VA: 0x12BBD2C
	public void .ctor() { }

	// RVA: 0x12BBD34 Offset: 0x12BBD34 VA: 0x12BBD34
	public void SetItem(int num, int skillId, string titleMessage, string explanationMessage, bool releaseState, int skillLv) { }

	// RVA: 0x12BC17C Offset: 0x12BC17C VA: 0x12BC17C
	public int GetHeight() { }

	// RVA: 0x12BC1AC Offset: 0x12BC1AC VA: 0x12BC1AC
	private static void .cctor() { }
}

// Namespace: 
public class ServantStatusVoiceListViewItem : ListViewItem // TypeDefIndex: 5782
{
	// Fields
	protected ObscuredInt svtId; // 0x70
	protected ObscuredInt changeSvrVoiceId; // 0x80
	protected ObscuredInt limitCount; // 0x90
	protected VoiceEntity voiceEntitiy; // 0xA0
	protected string overwriteName; // 0xA8
	protected string overwriteNameDefault; // 0xB0
	protected int overwritePriority; // 0xB8
	protected int firstPriority; // 0xBC
	protected bool isCanPlay; // 0xC0
	protected bool isPlay; // 0xC1
	private bool genderFlag; // 0xC2
	private bool voiceLabelSpecification; // 0xC3
	protected ObscuredString openName; // 0xC8
	protected ObscuredString dispName; // 0xD0
	protected ObscuredInt dispNum; // 0xD8

	// Properties
	public SvtVoiceType.Type PlayType { get; }
	public int SvtId { get; }
	public int ChangeSvrVoiceId { get; }
	public int LimitCount { get; }
	public string LabelName { get; }
	public bool GenderFlag { get; }
	public bool IsVoiceLabelSpecification { get; }
	public string Name { get; }
	public string OpenName { get; }
	public string DispName { get; }
	public int DispNum { get; }
	public CondType.Kind CondType { get; }
	public int CondValue { get; }
	public bool IsCanPlay { get; }
	public bool IsPlay { get; }

	// Methods

	// RVA: 0x12BC240 Offset: 0x12BC240 VA: 0x12BC240
	public void .ctor(int index, int svtId, int changeSvrVoiceId, int limitCount, VoiceInfo voiceInfo, int firstPriority, bool genderFlag = False, bool voiceLabelSpec = False) { }

	// RVA: 0x12BC3DC Offset: 0x12BC3DC VA: 0x12BC3DC
	protected void Analyze() { }

	// RVA: 0x12BC52C Offset: 0x12BC52C VA: 0x12BC52C Slot: 1
	protected override void Finalize() { }

	// RVA: 0x12BC534 Offset: 0x12BC534 VA: 0x12BC534
	public void SetLimitCount(int svtId, int changeSvrVoiceId, int limitCount, VoiceInfo voiceInfo, int firstPriority) { }

	// RVA: 0x12BC654 Offset: 0x12BC654 VA: 0x12BC654 Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x12BC680 Offset: 0x12BC680 VA: 0x12BC680
	public void SetPLay(bool isPlay) { }

	// RVA: 0x12BC68C Offset: 0x12BC68C VA: 0x12BC68C
	public SvtVoiceType.Type get_PlayType() { }

	// RVA: 0x12BC6B8 Offset: 0x12BC6B8 VA: 0x12BC6B8
	public int get_SvtId() { }

	// RVA: 0x12BC728 Offset: 0x12BC728 VA: 0x12BC728
	public int get_ChangeSvrVoiceId() { }

	// RVA: 0x12BC798 Offset: 0x12BC798 VA: 0x12BC798
	public int get_LimitCount() { }

	// RVA: 0x12BC808 Offset: 0x12BC808 VA: 0x12BC808
	public string get_LabelName() { }

	// RVA: 0x12BC884 Offset: 0x12BC884 VA: 0x12BC884
	public bool get_GenderFlag() { }

	// RVA: 0x12BC88C Offset: 0x12BC88C VA: 0x12BC88C
	public bool get_IsVoiceLabelSpecification() { }

	// RVA: 0x12BC894 Offset: 0x12BC894 VA: 0x12BC894
	public string get_Name() { }

	// RVA: 0x12BCA54 Offset: 0x12BCA54 VA: 0x12BCA54
	public string get_OpenName() { }

	// RVA: 0x12BCAC0 Offset: 0x12BCAC0 VA: 0x12BCAC0
	public string get_DispName() { }

	// RVA: 0x12BCB2C Offset: 0x12BCB2C VA: 0x12BCB2C
	public int get_DispNum() { }

	// RVA: 0x12BCB9C Offset: 0x12BCB9C VA: 0x12BCB9C
	public void SetNameNum(int num) { }

	// RVA: 0x12BCC18 Offset: 0x12BCC18 VA: 0x12BCC18
	public CondType.Kind get_CondType() { }

	// RVA: 0x12BCC44 Offset: 0x12BCC44 VA: 0x12BCC44
	public int get_CondValue() { }

	// RVA: 0x12BCC70 Offset: 0x12BCC70 VA: 0x12BCC70
	public bool get_IsCanPlay() { }

	// RVA: 0x12BCC78 Offset: 0x12BCC78 VA: 0x12BCC78
	public bool get_IsPlay() { }
}

// Namespace: 
public class ServantStatusVoiceListViewItemDraw : MonoBehaviour // TypeDefIndex: 5783
{
	// Fields
	[SerializeField] // RVA: 0xC50B0C Offset: 0xC50B0C VA: 0xC50B0C
	protected UISprite typeSpite; // 0x18
	[SerializeField] // RVA: 0xC50B1C Offset: 0xC50B1C VA: 0xC50B1C
	protected UILabel nameLabel; // 0x20
	[SerializeField] // RVA: 0xC50B2C Offset: 0xC50B2C VA: 0xC50B2C
	protected UISprite playIconSprite; // 0x28
	[SerializeField] // RVA: 0xC50B3C Offset: 0xC50B3C VA: 0xC50B3C
	protected UICommonButton baseButton; // 0x30

	// Methods

	// RVA: 0x12BCC80 Offset: 0x12BCC80 VA: 0x12BCC80
	public void .ctor() { }

	// RVA: 0x12BCC88 Offset: 0x12BCC88 VA: 0x12BCC88
	public void SetItem(ServantStatusVoiceListViewItem item, ServantStatusVoiceListViewItemDraw.DispMode mode) { }

	// RVA: 0x12BCE90 Offset: 0x12BCE90 VA: 0x12BCE90
	public void SetInput(ServantStatusVoiceListViewItem item, bool isInput) { }

	// RVA: 0x12BCF30 Offset: 0x12BCF30 VA: 0x12BCF30
	public void SetPlay(ServantStatusVoiceListViewItem item) { }
}

// Namespace: 
public enum ServantStatusVoiceListViewItemDraw.DispMode // TypeDefIndex: 5784
{
	// Fields
	public int value__; // 0x0
	public const ServantStatusVoiceListViewItemDraw.DispMode INVISIBLE = 0;
	public const ServantStatusVoiceListViewItemDraw.DispMode INVALID = 1;
	public const ServantStatusVoiceListViewItemDraw.DispMode VALID = 2;
	public const ServantStatusVoiceListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class ServantStatusVoiceListViewManager : ListViewManager // TypeDefIndex: 5785
{
	// Fields
	[SerializeField] // RVA: 0xC50B4C Offset: 0xC50B4C VA: 0xC50B4C
	protected UILabel explanationLabel; // 0x138
	protected ServantStatusVoiceListViewManager.InitMode initMode; // 0x140
	[CompilerGeneratedAttribute] // RVA: 0xC50B5C Offset: 0xC50B5C VA: 0xC50B5C
	[DebuggerBrowsableAttribute] // RVA: 0xC50B5C Offset: 0xC50B5C VA: 0xC50B5C
	private ServantStatusVoiceListViewManager.CallbackFunc callbackFunc; // 0x148
	[CompilerGeneratedAttribute] // RVA: 0xC50B98 Offset: 0xC50B98 VA: 0xC50B98
	[DebuggerBrowsableAttribute] // RVA: 0xC50B98 Offset: 0xC50B98 VA: 0xC50B98
	private Action callbackFunc2; // 0x150
	protected int callbackCount; // 0x158

	// Properties
	public List<ServantStatusVoiceListViewObject> ObjectList { get; }
	public List<ServantStatusVoiceListViewObject> ClippingObjectList { get; }

	// Methods

	// RVA: 0x12BCFCC Offset: 0x12BCFCC VA: 0x12BCFCC
	public void .ctor() { }

	// RVA: 0x12BCFD4 Offset: 0x12BCFD4 VA: 0x12BCFD4
	protected void add_callbackFunc(ServantStatusVoiceListViewManager.CallbackFunc value) { }

	// RVA: 0x12BD0C4 Offset: 0x12BD0C4 VA: 0x12BD0C4
	protected void remove_callbackFunc(ServantStatusVoiceListViewManager.CallbackFunc value) { }

