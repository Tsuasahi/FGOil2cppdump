
	// RVA: 0x211DB6C Offset: 0x211DB6C VA: 0x211DB6C
	public Selectable.Transition get_transition() { }

	// RVA: 0x211DB74 Offset: 0x211DB74 VA: 0x211DB74
	public void set_transition(Selectable.Transition value) { }

	// RVA: 0x211DBF4 Offset: 0x211DBF4 VA: 0x211DBF4
	public ColorBlock get_colors() { }

	// RVA: 0x211DC14 Offset: 0x211DC14 VA: 0x211DC14
	public void set_colors(ColorBlock value) { }

	// RVA: 0x211DCB8 Offset: 0x211DCB8 VA: 0x211DCB8
	public SpriteState get_spriteState() { }

	// RVA: 0x211DCCC Offset: 0x211DCCC VA: 0x211DCCC
	public void set_spriteState(SpriteState value) { }

	// RVA: 0x211DD68 Offset: 0x211DD68 VA: 0x211DD68
	public AnimationTriggers get_animationTriggers() { }

	// RVA: 0x211DD70 Offset: 0x211DD70 VA: 0x211DD70
	public void set_animationTriggers(AnimationTriggers value) { }

	// RVA: 0x211DDF0 Offset: 0x211DDF0 VA: 0x211DDF0
	public Graphic get_targetGraphic() { }

	// RVA: 0x211DDF8 Offset: 0x211DDF8 VA: 0x211DDF8
	public void set_targetGraphic(Graphic value) { }

	// RVA: 0x211DE78 Offset: 0x211DE78 VA: 0x211DE78
	public bool get_interactable() { }

	// RVA: 0x211DE80 Offset: 0x211DE80 VA: 0x211DE80
	public void set_interactable(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC159A4 Offset: 0xC159A4 VA: 0xC159A4
	// RVA: 0x211E0A8 Offset: 0x211E0A8 VA: 0x211E0A8
	private bool get_isPointerInside() { }

	[CompilerGeneratedAttribute] // RVA: 0xC159B4 Offset: 0xC159B4 VA: 0xC159B4
	// RVA: 0x211E0B0 Offset: 0x211E0B0 VA: 0x211E0B0
	private void set_isPointerInside(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC159C4 Offset: 0xC159C4 VA: 0xC159C4
	// RVA: 0x211E0BC Offset: 0x211E0BC VA: 0x211E0BC
	private bool get_isPointerDown() { }

	[CompilerGeneratedAttribute] // RVA: 0xC159D4 Offset: 0xC159D4 VA: 0xC159D4
	// RVA: 0x211E0C4 Offset: 0x211E0C4 VA: 0x211E0C4
	private void set_isPointerDown(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xC159E4 Offset: 0xC159E4 VA: 0xC159E4
	// RVA: 0x211E0D0 Offset: 0x211E0D0 VA: 0x211E0D0
	private bool get_hasSelection() { }

	[CompilerGeneratedAttribute] // RVA: 0xC159F4 Offset: 0xC159F4 VA: 0xC159F4
	// RVA: 0x211E0D8 Offset: 0x211E0D8 VA: 0x211E0D8
	private void set_hasSelection(bool value) { }

	// RVA: 0x211E0E4 Offset: 0x211E0E4 VA: 0x211E0E4
	public Image get_image() { }

	// RVA: 0x211E168 Offset: 0x211E168 VA: 0x211E168
	public void set_image(Image value) { }

	// RVA: 0x211E170 Offset: 0x211E170 VA: 0x211E170
	public Animator get_animator() { }

	// RVA: 0x211E1C0 Offset: 0x211E1C0 VA: 0x211E1C0 Slot: 4
	protected override void Awake() { }

	// RVA: 0x211E250 Offset: 0x211E250 VA: 0x211E250 Slot: 14
	protected override void OnCanvasGroupChanged() { }

	// RVA: 0x211E44C Offset: 0x211E44C VA: 0x211E44C Slot: 24
	public virtual bool IsInteractable() { }

	// RVA: 0x211E46C Offset: 0x211E46C VA: 0x211E46C Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x211BFB8 Offset: 0x211BFB8 VA: 0x211BFB8 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x211E4EC Offset: 0x211E4EC VA: 0x211E4EC Slot: 12
	protected override void OnTransformParentChanged() { }

	// RVA: 0x211DB64 Offset: 0x211DB64 VA: 0x211DB64
	private void OnSetProperty() { }

	// RVA: 0x211C194 Offset: 0x211C194 VA: 0x211C194 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x211E520 Offset: 0x211E520 VA: 0x211E520
	protected Selectable.SelectionState get_currentSelectionState() { }

	// RVA: 0x211E528 Offset: 0x211E528 VA: 0x211E528 Slot: 25
	protected virtual void InstantClearState() { }

	// RVA: 0x211EA08 Offset: 0x211EA08 VA: 0x211EA08 Slot: 26
	protected virtual void DoStateTransition(Selectable.SelectionState state, bool instant) { }

	// RVA: 0x211ECC8 Offset: 0x211ECC8 VA: 0x211ECC8
	public Selectable FindSelectable(Vector3 dir) { }

	// RVA: 0x211F1F0 Offset: 0x211F1F0 VA: 0x211F1F0
	private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir) { }

	// RVA: 0x211F43C Offset: 0x211F43C VA: 0x211F43C
	private void Navigate(AxisEventData eventData, Selectable sel) { }

	// RVA: 0x211CFAC Offset: 0x211CFAC VA: 0x211CFAC Slot: 27
	public virtual Selectable FindSelectableOnLeft() { }

	// RVA: 0x211D118 Offset: 0x211D118 VA: 0x211D118 Slot: 28
	public virtual Selectable FindSelectableOnRight() { }

	// RVA: 0x211D284 Offset: 0x211D284 VA: 0x211D284 Slot: 29
	public virtual Selectable FindSelectableOnUp() { }

	// RVA: 0x211D3F0 Offset: 0x211D3F0 VA: 0x211D3F0 Slot: 30
	public virtual Selectable FindSelectableOnDown() { }

	// RVA: 0x211CEBC Offset: 0x211CEBC VA: 0x211CEBC Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }

	// RVA: 0x211E5C8 Offset: 0x211E5C8 VA: 0x211E5C8
	private void StartColorTween(Color targetColor, bool instant) { }

	// RVA: 0x211E6E4 Offset: 0x211E6E4 VA: 0x211E6E4
	private void DoSpriteSwap(Sprite newSprite) { }

	// RVA: 0x211E7A4 Offset: 0x211E7A4 VA: 0x211E7A4
	private void TriggerAnimation(string triggername) { }

	// RVA: 0x211F514 Offset: 0x211F514 VA: 0x211F514
	protected bool IsHighlighted(BaseEventData eventData) { }

	[ObsoleteAttribute] // RVA: 0xC15A04 Offset: 0xC15A04 VA: 0xC15A04
	// RVA: 0x211F790 Offset: 0x211F790 VA: 0x211F790
	protected bool IsPressed(BaseEventData eventData) { }

	// RVA: 0x211F748 Offset: 0x211F748 VA: 0x211F748
	protected bool IsPressed() { }

	// RVA: 0x211E048 Offset: 0x211E048 VA: 0x211E048
	protected void UpdateSelectionState(BaseEventData eventData) { }

	// RVA: 0x211F7D8 Offset: 0x211F7D8 VA: 0x211F7D8
	private void EvaluateAndTransitionToSelectionState(BaseEventData eventData) { }

	// RVA: 0x211E474 Offset: 0x211E474 VA: 0x211E474
	private void InternalEvaluateAndTransitionToSelectionState(bool instant) { }

	// RVA: 0x211C9E8 Offset: 0x211C9E8 VA: 0x211C9E8 Slot: 32
	public virtual void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x211CC08 Offset: 0x211CC08 VA: 0x211CC08 Slot: 33
	public virtual void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x211F844 Offset: 0x211F844 VA: 0x211F844 Slot: 34
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x211F850 Offset: 0x211F850 VA: 0x211F850 Slot: 35
	public virtual void OnPointerExit(PointerEventData eventData) { }

	// RVA: 0x211F858 Offset: 0x211F858 VA: 0x211F858 Slot: 36
	public virtual void OnSelect(BaseEventData eventData) { }

	// RVA: 0x211F864 Offset: 0x211F864 VA: 0x211F864 Slot: 37
	public virtual void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x211F86C Offset: 0x211F86C VA: 0x211F86C Slot: 38
	public virtual void Select() { }

	// RVA: 0x211F9B0 Offset: 0x211F9B0 VA: 0x211F9B0
	private static void .cctor() { }
}

// Namespace: 
public enum Selectable.Transition // TypeDefIndex: 3117
{
	// Fields
	public int value__; // 0x0
	public const Selectable.Transition None = 0;
	public const Selectable.Transition ColorTint = 1;
	public const Selectable.Transition SpriteSwap = 2;
	public const Selectable.Transition Animation = 3;
}

// Namespace: 
protected enum Selectable.SelectionState // TypeDefIndex: 3118
{
	// Fields
	public int value__; // 0x0
	public const Selectable.SelectionState Normal = 0;
	public const Selectable.SelectionState Highlighted = 1;
	public const Selectable.SelectionState Pressed = 2;
	public const Selectable.SelectionState Disabled = 3;
}

// Namespace: UnityEngine.UI
internal static class SetPropertyUtility // TypeDefIndex: 3119
{
	// Methods

	// RVA: 0x211FA24 Offset: 0x211FA24 VA: 0x211FA24
	public static bool SetColor(ref Color currentValue, Color newValue) { }

	// RVA: -1 Offset: -1
	public static bool SetStruct<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A1D708 Offset: 0x1A1D708 VA: 0x1A1D708
	|-SetPropertyUtility.SetStruct<bool>
	|
	|-RVA: 0x1A1D7E8 Offset: 0x1A1D7E8 VA: 0x1A1D7E8
	|-SetPropertyUtility.SetStruct<char>
	|
	|-RVA: 0x1A1D8C0 Offset: 0x1A1D8C0 VA: 0x1A1D8C0
	|-SetPropertyUtility.SetStruct<int>
	|
	|-RVA: 0x1A1D998 Offset: 0x1A1D998 VA: 0x1A1D998
	|-SetPropertyUtility.SetStruct<float>
	|
	|-RVA: 0x1A1DA78 Offset: 0x1A1DA78 VA: 0x1A1DA78
	|-SetPropertyUtility.SetStruct<TouchScreenKeyboardType>
	|
	|-RVA: 0x1A1DB50 Offset: 0x1A1DB50 VA: 0x1A1DB50
	|-SetPropertyUtility.SetStruct<AspectRatioFitter.AspectMode>
	|
	|-RVA: 0x1A1DC28 Offset: 0x1A1DC28 VA: 0x1A1DC28
	|-SetPropertyUtility.SetStruct<ColorBlock>
	|
	|-RVA: 0x1A1DD60 Offset: 0x1A1DD60 VA: 0x1A1DD60
	|-SetPropertyUtility.SetStruct<ContentSizeFitter.FitMode>
	|
	|-RVA: 0x1A1DE38 Offset: 0x1A1DE38 VA: 0x1A1DE38
	|-SetPropertyUtility.SetStruct<Image.FillMethod>
	|
	|-RVA: 0x1A1DF10 Offset: 0x1A1DF10 VA: 0x1A1DF10
	|-SetPropertyUtility.SetStruct<Image.Type>
	|
	|-RVA: 0x1A1DFE8 Offset: 0x1A1DFE8 VA: 0x1A1DFE8
	|-SetPropertyUtility.SetStruct<InputField.CharacterValidation>
	|
	|-RVA: 0x1A1E0C0 Offset: 0x1A1E0C0 VA: 0x1A1E0C0
	|-SetPropertyUtility.SetStruct<InputField.ContentType>
	|
	|-RVA: 0x1A1E198 Offset: 0x1A1E198 VA: 0x1A1E198
	|-SetPropertyUtility.SetStruct<InputField.InputType>
	|
	|-RVA: 0x1A1E270 Offset: 0x1A1E270 VA: 0x1A1E270
	|-SetPropertyUtility.SetStruct<InputField.LineType>
	|
	|-RVA: 0x1A1E348 Offset: 0x1A1E348 VA: 0x1A1E348
	|-SetPropertyUtility.SetStruct<Navigation>
	|
	|-RVA: 0x1A1E484 Offset: 0x1A1E484 VA: 0x1A1E484
	|-SetPropertyUtility.SetStruct<Scrollbar.Direction>
	|
	|-RVA: 0x1A1E55C Offset: 0x1A1E55C VA: 0x1A1E55C
	|-SetPropertyUtility.SetStruct<Selectable.Transition>
	|
	|-RVA: 0x1A1E634 Offset: 0x1A1E634 VA: 0x1A1E634
	|-SetPropertyUtility.SetStruct<Slider.Direction>
	|
	|-RVA: 0x1A1E70C Offset: 0x1A1E70C VA: 0x1A1E70C
	|-SetPropertyUtility.SetStruct<SpriteState>
	*/

	// RVA: -1 Offset: -1
	public static bool SetClass<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1A1D6B8 Offset: 0x1A1D6B8 VA: 0x1A1D6B8
	|-SetPropertyUtility.SetClass<object>
	|-SetPropertyUtility.SetClass<RectTransform>
	|-SetPropertyUtility.SetClass<Sprite>
	|-SetPropertyUtility.SetClass<AnimationTriggers>
	|-SetPropertyUtility.SetClass<Graphic>
	|-SetPropertyUtility.SetClass<InputField.OnChangeEvent>
	|-SetPropertyUtility.SetClass<InputField.OnValidateInput>
	|-SetPropertyUtility.SetClass<InputField.SubmitEvent>
	|-SetPropertyUtility.SetClass<Text>
	*/
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC12838 Offset: 0xC12838 VA: 0xC12838
[RequireComponent] // RVA: 0xC12838 Offset: 0xC12838 VA: 0xC12838
public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 3120
{
	// Fields
	[SerializeField] // RVA: 0xC14CF0 Offset: 0xC14CF0 VA: 0xC14CF0
	private RectTransform m_FillRect; // 0xD8
	[SerializeField] // RVA: 0xC14D00 Offset: 0xC14D00 VA: 0xC14D00
	private RectTransform m_HandleRect; // 0xE0
	[SpaceAttribute] // RVA: 0xC14D10 Offset: 0xC14D10 VA: 0xC14D10
	[SerializeField] // RVA: 0xC14D10 Offset: 0xC14D10 VA: 0xC14D10
	private Slider.Direction m_Direction; // 0xE8
	[SerializeField] // RVA: 0xC14D48 Offset: 0xC14D48 VA: 0xC14D48
	private float m_MinValue; // 0xEC
	[SerializeField] // RVA: 0xC14D58 Offset: 0xC14D58 VA: 0xC14D58
	private float m_MaxValue; // 0xF0
	[SerializeField] // RVA: 0xC14D68 Offset: 0xC14D68 VA: 0xC14D68
	private bool m_WholeNumbers; // 0xF4
	[SerializeField] // RVA: 0xC14D78 Offset: 0xC14D78 VA: 0xC14D78
	protected float m_Value; // 0xF8
	[SpaceAttribute] // RVA: 0xC14D88 Offset: 0xC14D88 VA: 0xC14D88
	[SerializeField] // RVA: 0xC14D88 Offset: 0xC14D88 VA: 0xC14D88
	private Slider.SliderEvent m_OnValueChanged; // 0x100
	private Image m_FillImage; // 0x108
	private Transform m_FillTransform; // 0x110
	private RectTransform m_FillContainerRect; // 0x118
	private Transform m_HandleTransform; // 0x120
	private RectTransform m_HandleContainerRect; // 0x128
	private Vector2 m_Offset; // 0x130
	private DrivenRectTransformTracker m_Tracker; // 0x138

	// Properties
	public RectTransform fillRect { get; set; }
	public RectTransform handleRect { get; set; }
	public Slider.Direction direction { get; set; }
	public float minValue { get; set; }
	public float maxValue { get; set; }
	public bool wholeNumbers { get; set; }
	public virtual float value { get; set; }
	public float normalizedValue { get; set; }
	public Slider.SliderEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Slider.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods

	// RVA: 0x211FED4 Offset: 0x211FED4 VA: 0x211FED4
	protected void .ctor() { }

	// RVA: 0x211FFE4 Offset: 0x211FFE4 VA: 0x211FFE4
	public RectTransform get_fillRect() { }

	// RVA: 0x211FFEC Offset: 0x211FFEC VA: 0x211FFEC
	public void set_fillRect(RectTransform value) { }

	// RVA: 0x212075C Offset: 0x212075C VA: 0x212075C
	public RectTransform get_handleRect() { }

	// RVA: 0x2120764 Offset: 0x2120764 VA: 0x2120764
	public void set_handleRect(RectTransform value) { }

	// RVA: 0x21207E8 Offset: 0x21207E8 VA: 0x21207E8
	public Slider.Direction get_direction() { }

	// RVA: 0x21207F0 Offset: 0x21207F0 VA: 0x21207F0
	public void set_direction(Slider.Direction value) { }

	// RVA: 0x212086C Offset: 0x212086C VA: 0x212086C
	public float get_minValue() { }

	// RVA: 0x2120874 Offset: 0x2120874 VA: 0x2120874
	public void set_minValue(float value) { }

	// RVA: 0x2120920 Offset: 0x2120920 VA: 0x2120920
	public float get_maxValue() { }

	// RVA: 0x2120928 Offset: 0x2120928 VA: 0x2120928
	public void set_maxValue(float value) { }

	// RVA: 0x21209C0 Offset: 0x21209C0 VA: 0x21209C0
	public bool get_wholeNumbers() { }

	// RVA: 0x21209C8 Offset: 0x21209C8 VA: 0x21209C8
	public void set_wholeNumbers(bool value) { }

	// RVA: 0x2120A60 Offset: 0x2120A60 VA: 0x2120A60 Slot: 46
	public virtual float get_value() { }

	// RVA: 0x2120B4C Offset: 0x2120B4C VA: 0x2120B4C Slot: 47
	public virtual void set_value(float value) { }

	// RVA: 0x2120B60 Offset: 0x2120B60 VA: 0x2120B60
	public float get_normalizedValue() { }

	// RVA: 0x2120C44 Offset: 0x2120C44 VA: 0x2120C44
	public void set_normalizedValue(float value) { }

	// RVA: 0x2120CE0 Offset: 0x2120CE0 VA: 0x2120CE0
	public Slider.SliderEvent get_onValueChanged() { }

	// RVA: 0x2120CE8 Offset: 0x2120CE8 VA: 0x2120CE8
	public void set_onValueChanged(Slider.SliderEvent value) { }

	// RVA: 0x2120CF0 Offset: 0x2120CF0 VA: 0x2120CF0
	private float get_stepSize() { }

	// RVA: 0x2120D18 Offset: 0x2120D18 VA: 0x2120D18 Slot: 48
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x2120D1C Offset: 0x2120D1C VA: 0x2120D1C Slot: 49
	public virtual void LayoutComplete() { }

	// RVA: 0x2120D20 Offset: 0x2120D20 VA: 0x2120D20 Slot: 50
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x2120D24 Offset: 0x2120D24 VA: 0x2120D24 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x2120D6C Offset: 0x2120D6C VA: 0x2120D6C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x2120D98 Offset: 0x2120D98 VA: 0x2120D98 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x2120070 Offset: 0x2120070 VA: 0x2120070
	private void UpdateCachedReferences() { }

	// RVA: 0x2121014 Offset: 0x2121014 VA: 0x2121014
	private float ClampValue(float input) { }

	// RVA: 0x212090C Offset: 0x212090C VA: 0x212090C
	private void Set(float input) { }

	// RVA: 0x212116C Offset: 0x212116C VA: 0x212116C Slot: 51
	protected virtual void Set(float input, bool sendCallback) { }

	// RVA: 0x2121240 Offset: 0x2121240 VA: 0x2121240 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x2121150 Offset: 0x2121150 VA: 0x2121150
	private Slider.Axis get_axis() { }

	// RVA: 0x212113C Offset: 0x212113C VA: 0x212113C
	private bool get_reverseValue() { }

	// RVA: 0x212041C Offset: 0x212041C VA: 0x212041C
	private void UpdateVisuals() { }

	// RVA: 0x2121288 Offset: 0x2121288 VA: 0x2121288
	private void UpdateDrag(PointerEventData eventData, Camera cam) { }

	// RVA: 0x2121554 Offset: 0x2121554 VA: 0x2121554
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x21215C8 Offset: 0x21215C8 VA: 0x21215C8 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x21217E8 Offset: 0x21217E8 VA: 0x21217E8 Slot: 52
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x2121840 Offset: 0x2121840 VA: 0x2121840 Slot: 31
	public override void OnMove(AxisEventData eventData) { }

	// RVA: 0x2121AC0 Offset: 0x2121AC0 VA: 0x2121AC0 Slot: 27
	public override Selectable FindSelectableOnLeft() { }

	// RVA: 0x2121AE4 Offset: 0x2121AE4 VA: 0x2121AE4 Slot: 28
	public override Selectable FindSelectableOnRight() { }

	// RVA: 0x2121B08 Offset: 0x2121B08 VA: 0x2121B08 Slot: 29
	public override Selectable FindSelectableOnUp() { }

	// RVA: 0x2121B2C Offset: 0x2121B2C VA: 0x2121B2C Slot: 30
	public override Selectable FindSelectableOnDown() { }

	// RVA: 0x2121B50 Offset: 0x2121B50 VA: 0x2121B50 Slot: 53
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x2121B84 Offset: 0x2121B84 VA: 0x2121B84
	public void SetDirection(Slider.Direction direction, bool includeRectLayouts) { }

	// RVA: 0x2121D18 Offset: 0x2121D18 VA: 0x2121D18 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Slider.Direction // TypeDefIndex: 3121
{
	// Fields
	public int value__; // 0x0
	public const Slider.Direction LeftToRight = 0;
	public const Slider.Direction RightToLeft = 1;
	public const Slider.Direction BottomToTop = 2;
	public const Slider.Direction TopToBottom = 3;
}

// Namespace: 
[Serializable]
public class Slider.SliderEvent : UnityEvent<float> // TypeDefIndex: 3122
{
	// Methods

	// RVA: 0x211FF94 Offset: 0x211FF94 VA: 0x211FF94
	public void .ctor() { }
}

// Namespace: 
private enum Slider.Axis // TypeDefIndex: 3123
{
	// Fields
	public int value__; // 0x0
	public const Slider.Axis Horizontal = 0;
	public const Slider.Axis Vertical = 1;
}

// Namespace: UnityEngine.UI
[Serializable]
public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 3124
{
	// Fields
	[SerializeField] // RVA: 0xC14DC0 Offset: 0xC14DC0 VA: 0xC14DC0
	private Sprite m_HighlightedSprite; // 0x0
	[SerializeField] // RVA: 0xC14DD0 Offset: 0xC14DD0 VA: 0xC14DD0
	private Sprite m_PressedSprite; // 0x8
	[SerializeField] // RVA: 0xC14DE0 Offset: 0xC14DE0 VA: 0xC14DE0
	private Sprite m_DisabledSprite; // 0x10

	// Properties
	public Sprite highlightedSprite { get; set; }
	public Sprite pressedSprite { get; set; }
	public Sprite disabledSprite { get; set; }

	// Methods

	// RVA: 0xD66370 Offset: 0xD66370 VA: 0xD66370
	public Sprite get_highlightedSprite() { }

	// RVA: 0xD66378 Offset: 0xD66378 VA: 0xD66378
	public void set_highlightedSprite(Sprite value) { }

	// RVA: 0xD66380 Offset: 0xD66380 VA: 0xD66380
	public Sprite get_pressedSprite() { }

	// RVA: 0xD66388 Offset: 0xD66388 VA: 0xD66388
	public void set_pressedSprite(Sprite value) { }

	// RVA: 0xD66390 Offset: 0xD66390 VA: 0xD66390
	public Sprite get_disabledSprite() { }

	// RVA: 0xD66398 Offset: 0xD66398 VA: 0xD66398
	public void set_disabledSprite(Sprite value) { }

	// RVA: 0xD663A0 Offset: 0xD663A0 VA: 0xD663A0 Slot: 4
	public bool Equals(SpriteState other) { }
}

// Namespace: UnityEngine.UI
public static class StencilMaterial // TypeDefIndex: 3125
{
	// Fields
	private static List<StencilMaterial.MatEntry> m_List; // 0x0

	// Methods

	[EditorBrowsableAttribute] // RVA: 0xC15A40 Offset: 0xC15A40 VA: 0xC15A40
	[ObsoleteAttribute] // RVA: 0xC15A40 Offset: 0xC15A40 VA: 0xC15A40
	// RVA: 0x2121E40 Offset: 0x2121E40 VA: 0x2121E40
	public static Material Add(Material baseMat, int stencilID) { }

	// RVA: 0x210EB04 Offset: 0x210EB04 VA: 0x210EB04
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) { }

	// RVA: 0x210EBA0 Offset: 0x210EBA0 VA: 0x210EBA0
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) { }

	// RVA: 0x210E0E4 Offset: 0x210E0E4 VA: 0x210E0E4
	public static void Remove(Material customMat) { }

	// RVA: 0x2121E58 Offset: 0x2121E58 VA: 0x2121E58
	public static void ClearAll() { }

	// RVA: 0x2121FBC Offset: 0x2121FBC VA: 0x2121FBC
	private static void .cctor() { }
}

// Namespace: 
private class StencilMaterial.MatEntry // TypeDefIndex: 3126
{
	// Fields
	public Material baseMat; // 0x10
	public Material customMat; // 0x18
	public int count; // 0x20
	public int stencilId; // 0x24
	public StencilOp operation; // 0x28
	public CompareFunction compareFunction; // 0x2C
	public int readMask; // 0x30
	public int writeMask; // 0x34
	public bool useAlphaClip; // 0x38
	public ColorWriteMask colorMask; // 0x3C

	// Methods

	// RVA: 0x2121E48 Offset: 0x2121E48 VA: 0x2121E48
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC128C4 Offset: 0xC128C4 VA: 0xC128C4
public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 3127
{
	// Fields
	[SerializeField] // RVA: 0xC14DF0 Offset: 0xC14DF0 VA: 0xC14DF0
	private FontData m_FontData; // 0xB0
	[TextAreaAttribute] // RVA: 0xC14E00 Offset: 0xC14E00 VA: 0xC14E00
	[SerializeField] // RVA: 0xC14E00 Offset: 0xC14E00 VA: 0xC14E00
	protected string m_Text; // 0xB8
	private TextGenerator m_TextCache; // 0xC0
	private TextGenerator m_TextCacheForLayout; // 0xC8
	protected static Material s_DefaultText; // 0x0
	protected bool m_DisableFontTextureRebuiltCallback; // 0xD0
	private readonly UIVertex[] m_TempVerts; // 0xD8

	// Properties
	public TextGenerator cachedTextGenerator { get; }
	public TextGenerator cachedTextGeneratorForLayout { get; }
	public override Texture mainTexture { get; }
	public Font font { get; set; }
	public virtual string text { get; set; }
	public bool supportRichText { get; set; }
	public bool resizeTextForBestFit { get; set; }
	public int resizeTextMinSize { get; set; }
	public int resizeTextMaxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public int fontSize { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }
	public FontStyle fontStyle { get; set; }
	public float pixelsPerUnit { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x2122030 Offset: 0x2122030 VA: 0x2122030
	protected void .ctor() { }

	// RVA: 0x21220DC Offset: 0x21220DC VA: 0x21220DC
	public TextGenerator get_cachedTextGenerator() { }

	// RVA: 0x21221B8 Offset: 0x21221B8 VA: 0x21221B8
	public TextGenerator get_cachedTextGeneratorForLayout() { }

	// RVA: 0x2122224 Offset: 0x2122224 VA: 0x2122224 Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x212242C Offset: 0x212242C VA: 0x212242C
	public void FontTextureChanged() { }

	// RVA: 0x21223FC Offset: 0x21223FC VA: 0x21223FC
	public Font get_font() { }

	// RVA: 0x2122554 Offset: 0x2122554 VA: 0x2122554
	public void set_font(Font value) { }

	// RVA: 0x2122670 Offset: 0x2122670 VA: 0x2122670 Slot: 72
	public virtual string get_text() { }

	// RVA: 0x2122678 Offset: 0x2122678 VA: 0x2122678 Slot: 73
	public virtual void set_text(string value) { }

	// RVA: 0x21227A4 Offset: 0x21227A4 VA: 0x21227A4
	public bool get_supportRichText() { }

	// RVA: 0x21227D4 Offset: 0x21227D4 VA: 0x21227D4
	public void set_supportRichText(bool value) { }

	// RVA: 0x2122874 Offset: 0x2122874 VA: 0x2122874
	public bool get_resizeTextForBestFit() { }

	// RVA: 0x21228A4 Offset: 0x21228A4 VA: 0x21228A4
	public void set_resizeTextForBestFit(bool value) { }

	// RVA: 0x2122944 Offset: 0x2122944 VA: 0x2122944
	public int get_resizeTextMinSize() { }

	// RVA: 0x2122974 Offset: 0x2122974 VA: 0x2122974
	public void set_resizeTextMinSize(int value) { }

	// RVA: 0x2122A14 Offset: 0x2122A14 VA: 0x2122A14
	public int get_resizeTextMaxSize() { }

	// RVA: 0x2122A44 Offset: 0x2122A44 VA: 0x2122A44
	public void set_resizeTextMaxSize(int value) { }

	// RVA: 0x2122AE4 Offset: 0x2122AE4 VA: 0x2122AE4
	public TextAnchor get_alignment() { }

	// RVA: 0x2122B14 Offset: 0x2122B14 VA: 0x2122B14
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x2122BB4 Offset: 0x2122BB4 VA: 0x2122BB4
	public bool get_alignByGeometry() { }

	// RVA: 0x2122BE4 Offset: 0x2122BE4 VA: 0x2122BE4
	public void set_alignByGeometry(bool value) { }

	// RVA: 0x2122C70 Offset: 0x2122C70 VA: 0x2122C70
	public int get_fontSize() { }

	// RVA: 0x2122CA0 Offset: 0x2122CA0 VA: 0x2122CA0
	public void set_fontSize(int value) { }

	// RVA: 0x2122D40 Offset: 0x2122D40 VA: 0x2122D40
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x2122D70 Offset: 0x2122D70 VA: 0x2122D70
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0x2122E10 Offset: 0x2122E10 VA: 0x2122E10
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x2122E40 Offset: 0x2122E40 VA: 0x2122E40
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x2122EE0 Offset: 0x2122EE0 VA: 0x2122EE0
	public float get_lineSpacing() { }

	// RVA: 0x2122F10 Offset: 0x2122F10 VA: 0x2122F10
	public void set_lineSpacing(float value) { }

	// RVA: 0x2122FB0 Offset: 0x2122FB0 VA: 0x2122FB0
	public FontStyle get_fontStyle() { }

	// RVA: 0x2122FE0 Offset: 0x2122FE0 VA: 0x2122FE0
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x2123080 Offset: 0x2123080 VA: 0x2123080
	public float get_pixelsPerUnit() { }

	// RVA: 0x2123238 Offset: 0x2123238 VA: 0x2123238 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x21232C8 Offset: 0x21232C8 VA: 0x21232C8 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x2123338 Offset: 0x2123338 VA: 0x2123338 Slot: 41
	protected override void UpdateGeometry() { }

	// RVA: 0x21233D0 Offset: 0x21233D0 VA: 0x21233D0
	internal void AssignDefaultFont() { }

	// RVA: 0x2123434 Offset: 0x2123434 VA: 0x2123434
	public TextGenerationSettings GetGenerationSettings(Vector2 extents) { }

	// RVA: 0x2123794 Offset: 0x2123794 VA: 0x2123794
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor) { }

	// RVA: 0x21238CC Offset: 0x21238CC VA: 0x21238CC Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x212422C Offset: 0x212422C VA: 0x212422C Slot: 74
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x2124230 Offset: 0x2124230 VA: 0x2124230 Slot: 75
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x2124234 Offset: 0x2124234 VA: 0x2124234 Slot: 76
	public virtual float get_minWidth() { }

	// RVA: 0x212423C Offset: 0x212423C VA: 0x212423C Slot: 77
	public virtual float get_preferredWidth() { }

	// RVA: 0x2124338 Offset: 0x2124338 VA: 0x2124338 Slot: 78
	public virtual float get_flexibleWidth() { }

	// RVA: 0x2124340 Offset: 0x2124340 VA: 0x2124340 Slot: 79
	public virtual float get_minHeight() { }

	// RVA: 0x2124348 Offset: 0x2124348 VA: 0x2124348 Slot: 80
	public virtual float get_preferredHeight() { }

	// RVA: 0x2124430 Offset: 0x2124430 VA: 0x2124430 Slot: 81
	public virtual float get_flexibleHeight() { }

	// RVA: 0x2124438 Offset: 0x2124438 VA: 0x2124438 Slot: 82
	public virtual int get_layoutPriority() { }

	// RVA: 0x2124440 Offset: 0x2124440 VA: 0x2124440
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC12900 Offset: 0xC12900 VA: 0xC12900
[RequireComponent] // RVA: 0xC12900 Offset: 0xC12900 VA: 0xC12900
public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 3128
{
	// Fields
	public Toggle.ToggleTransition toggleTransition; // 0xD8
	public Graphic graphic; // 0xE0
	[SerializeField] // RVA: 0xC14E40 Offset: 0xC14E40 VA: 0xC14E40
	private ToggleGroup m_Group; // 0xE8
	public Toggle.ToggleEvent onValueChanged; // 0xF0
	[TooltipAttribute] // RVA: 0xC14E50 Offset: 0xC14E50 VA: 0xC14E50
	[SerializeField] // RVA: 0xC14E50 Offset: 0xC14E50 VA: 0xC14E50
	private bool m_IsOn; // 0xF8

	// Properties
	public ToggleGroup group { get; set; }
	public bool isOn { get; set; }

	// Methods

	// RVA: 0x2124490 Offset: 0x2124490 VA: 0x2124490
	protected void .ctor() { }

	// RVA: 0x2124568 Offset: 0x2124568 VA: 0x2124568
	public ToggleGroup get_group() { }

	// RVA: 0x2124570 Offset: 0x2124570 VA: 0x2124570
	public void set_group(ToggleGroup value) { }

	// RVA: 0x2124838 Offset: 0x2124838 VA: 0x2124838 Slot: 46
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x212483C Offset: 0x212483C VA: 0x212483C Slot: 47
	public virtual void LayoutComplete() { }

	// RVA: 0x2124840 Offset: 0x2124840 VA: 0x2124840 Slot: 48
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x2124844 Offset: 0x2124844 VA: 0x2124844 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x212487C Offset: 0x212487C VA: 0x212487C Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x21248A8 Offset: 0x21248A8 VA: 0x21248A8 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x21245A0 Offset: 0x21245A0 VA: 0x21245A0
	private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue) { }

	// RVA: 0x2124B2C Offset: 0x2124B2C VA: 0x2124B2C
	public bool get_isOn() { }

	// RVA: 0x2124C74 Offset: 0x2124C74 VA: 0x2124C74
	public void set_isOn(bool value) { }

	// RVA: 0x21249C8 Offset: 0x21249C8 VA: 0x21249C8
	private void Set(bool value) { }

	// RVA: 0x2124C80 Offset: 0x2124C80 VA: 0x2124C80
	private void Set(bool value, bool sendCallback) { }

	// RVA: 0x2124748 Offset: 0x2124748 VA: 0x2124748
	private void PlayEffect(bool instant) { }

	// RVA: 0x2124F18 Offset: 0x2124F18 VA: 0x2124F18 Slot: 6
	protected override void Start() { }

	// RVA: 0x2124F20 Offset: 0x2124F20 VA: 0x2124F20
	private void InternalToggle() { }

	// RVA: 0x2124F84 Offset: 0x2124F84 VA: 0x2124F84 Slot: 49
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x2124FD0 Offset: 0x2124FD0 VA: 0x2124FD0 Slot: 50
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x2124FD4 Offset: 0x2124FD4 VA: 0x2124FD4 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Toggle.ToggleTransition // TypeDefIndex: 3129
{
	// Fields
	public int value__; // 0x0
	public const Toggle.ToggleTransition None = 0;
	public const Toggle.ToggleTransition Fade = 1;
}

// Namespace: 
[Serializable]
public class Toggle.ToggleEvent : UnityEvent<bool> // TypeDefIndex: 3130
{
	// Methods

	// RVA: 0x2124518 Offset: 0x2124518 VA: 0x2124518
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC1298C Offset: 0xC1298C VA: 0xC1298C
[DisallowMultipleComponent] // RVA: 0xC1298C Offset: 0xC1298C VA: 0xC1298C
public class ToggleGroup : UIBehaviour // TypeDefIndex: 3131
{
	// Fields
	[SerializeField] // RVA: 0xC14E9C Offset: 0xC14E9C VA: 0xC14E9C
	private bool m_AllowSwitchOff; // 0x18
	private List<Toggle> m_Toggles; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC14EAC Offset: 0xC14EAC VA: 0xC14EAC
	private static Predicate<Toggle> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC14EBC Offset: 0xC14EBC VA: 0xC14EBC
	private static Func<Toggle, bool> <>f__am$cache1; // 0x8

	// Properties
	public bool allowSwitchOff { get; set; }

	// Methods

	// RVA: 0x2124FDC Offset: 0x2124FDC VA: 0x2124FDC
	protected void .ctor() { }

	// RVA: 0x2124F10 Offset: 0x2124F10 VA: 0x2124F10
	public bool get_allowSwitchOff() { }

	// RVA: 0x2125050 Offset: 0x2125050 VA: 0x2125050
	public void set_allowSwitchOff(bool value) { }

	// RVA: 0x212505C Offset: 0x212505C VA: 0x212505C
	private void ValidateToggleIsInGroup(Toggle toggle) { }

	// RVA: 0x2124B34 Offset: 0x2124B34 VA: 0x2124B34
	public void NotifyToggleOn(Toggle toggle) { }

	// RVA: 0x21249D4 Offset: 0x21249D4 VA: 0x21249D4
	public void UnregisterToggle(Toggle toggle) { }

	// RVA: 0x2124A80 Offset: 0x2124A80 VA: 0x2124A80
	public void RegisterToggle(Toggle toggle) { }

	// RVA: 0x2124E08 Offset: 0x2124E08 VA: 0x2124E08
	public bool AnyTogglesOn() { }

	// RVA: 0x2125230 Offset: 0x2125230 VA: 0x2125230
	public IEnumerable<Toggle> ActiveToggles() { }

	// RVA: 0x21252EC Offset: 0x21252EC VA: 0x21252EC
	public void SetAllTogglesOff() { }

	[CompilerGeneratedAttribute] // RVA: 0xC15A94 Offset: 0xC15A94 VA: 0xC15A94
	// RVA: 0x21253C8 Offset: 0x21253C8 VA: 0x21253C8
	private static bool <AnyTogglesOn>m__0(Toggle x) { }

	[CompilerGeneratedAttribute] // RVA: 0xC15AA4 Offset: 0xC15AA4 VA: 0xC15AA4
	// RVA: 0x21253F0 Offset: 0x21253F0 VA: 0x21253F0
	private static bool <ActiveToggles>m__1(Toggle x) { }
}

// Namespace: UnityEngine.UI
public class ClipperRegistry // TypeDefIndex: 3132
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet<IClipper> m_Clippers; // 0x10

	// Properties
	public static ClipperRegistry instance { get; }

	// Methods

	// RVA: 0x1F7ECD0 Offset: 0x1F7ECD0 VA: 0x1F7ECD0
	protected void .ctor() { }

	// RVA: 0x1F7E000 Offset: 0x1F7E000 VA: 0x1F7E000
	public static ClipperRegistry get_instance() { }

	// RVA: 0x1F7E07C Offset: 0x1F7E07C VA: 0x1F7E07C
	public void Cull() { }

	// RVA: 0x1F7ED40 Offset: 0x1F7ED40 VA: 0x1F7ED40
	public static void Register(IClipper c) { }

	// RVA: 0x1F7EDC4 Offset: 0x1F7EDC4 VA: 0x1F7EDC4
	public static void Unregister(IClipper c) { }
}

// Namespace: UnityEngine.UI
public static class Clipping // TypeDefIndex: 3133
{
	// Methods

	// RVA: 0x1F7EE38 Offset: 0x1F7EE38 VA: 0x1F7EE38
	public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) { }

	// RVA: 0x1F7F0C8 Offset: 0x1F7F0C8 VA: 0x1F7F0C8
	private static Rect RectIntersect(Rect a, Rect b) { }
}

// Namespace: UnityEngine.UI
public interface IClipper // TypeDefIndex: 3134
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void PerformClipping();
}

// Namespace: UnityEngine.UI
public interface IClippable // TypeDefIndex: 3135
{
