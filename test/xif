	public virtual Selectable FindSelectableOnDown() { }

	// RVA: 0x1008854 Offset: 0x1008854 VA: 0x1008854 Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }

	// RVA: 0x1009F60 Offset: 0x1009F60 VA: 0x1009F60
	private void StartColorTween(Color targetColor, bool instant) { }

	// RVA: 0x100A07C Offset: 0x100A07C VA: 0x100A07C
	private void DoSpriteSwap(Sprite newSprite) { }

	// RVA: 0x100A13C Offset: 0x100A13C VA: 0x100A13C
	private void TriggerAnimation(string triggername) { }

	// RVA: 0x100AEAC Offset: 0x100AEAC VA: 0x100AEAC
	protected bool IsHighlighted(BaseEventData eventData) { }

	[ObsoleteAttribute] // RVA: 0xC81B2C Offset: 0xC81B2C VA: 0xC81B2C
	// RVA: 0x100B128 Offset: 0x100B128 VA: 0x100B128
	protected bool IsPressed(BaseEventData eventData) { }

	// RVA: 0x100B0E0 Offset: 0x100B0E0 VA: 0x100B0E0
	protected bool IsPressed() { }

	// RVA: 0x10099E0 Offset: 0x10099E0 VA: 0x10099E0
	protected void UpdateSelectionState(BaseEventData eventData) { }

	// RVA: 0x100B170 Offset: 0x100B170 VA: 0x100B170
	private void EvaluateAndTransitionToSelectionState(BaseEventData eventData) { }

	// RVA: 0x1009E0C Offset: 0x1009E0C VA: 0x1009E0C
	private void InternalEvaluateAndTransitionToSelectionState(bool instant) { }

	// RVA: 0x1008380 Offset: 0x1008380 VA: 0x1008380 Slot: 32
	public virtual void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x10085A0 Offset: 0x10085A0 VA: 0x10085A0 Slot: 33
	public virtual void OnPointerUp(PointerEventData eventData) { }

	// RVA: 0x100B1DC Offset: 0x100B1DC VA: 0x100B1DC Slot: 34
	public virtual void OnPointerEnter(PointerEventData eventData) { }

	// RVA: 0x100B1E8 Offset: 0x100B1E8 VA: 0x100B1E8 Slot: 35
	public virtual void OnPointerExit(PointerEventData eventData) { }

	// RVA: 0x100B1F0 Offset: 0x100B1F0 VA: 0x100B1F0 Slot: 36
	public virtual void OnSelect(BaseEventData eventData) { }

	// RVA: 0x100B1FC Offset: 0x100B1FC VA: 0x100B1FC Slot: 37
	public virtual void OnDeselect(BaseEventData eventData) { }

	// RVA: 0x100B204 Offset: 0x100B204 VA: 0x100B204 Slot: 38
	public virtual void Select() { }

	// RVA: 0x100B348 Offset: 0x100B348 VA: 0x100B348
	private static void .cctor() { }
}

// Namespace: 
public enum Selectable.Transition // TypeDefIndex: 3117
{
	// Fields
	public int value__; // 0x0
	public const Selectable.Transition None = 0;
	public const Selectable.Transition ColorTint = 1;
	public const Selectable.Transition SpriteSwap = 2;
	public const Selectable.Transition Animation = 3;
}

// Namespace: 
protected enum Selectable.SelectionState // TypeDefIndex: 3118
{
	// Fields
	public int value__; // 0x0
	public const Selectable.SelectionState Normal = 0;
	public const Selectable.SelectionState Highlighted = 1;
	public const Selectable.SelectionState Pressed = 2;
	public const Selectable.SelectionState Disabled = 3;
}

// Namespace: UnityEngine.UI
internal static class SetPropertyUtility // TypeDefIndex: 3119
{
	// Methods

	// RVA: 0x100B3BC Offset: 0x100B3BC VA: 0x100B3BC
	public static bool SetColor(ref Color currentValue, Color newValue) { }

	// RVA: -1 Offset: -1
	public static bool SetStruct<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1F95E7C Offset: 0x1F95E7C VA: 0x1F95E7C
	|-SetPropertyUtility.SetStruct<bool>
	|
	|-RVA: 0x1F95F5C Offset: 0x1F95F5C VA: 0x1F95F5C
	|-SetPropertyUtility.SetStruct<char>
	|
	|-RVA: 0x1F96034 Offset: 0x1F96034 VA: 0x1F96034
	|-SetPropertyUtility.SetStruct<int>
	|
	|-RVA: 0x1F9610C Offset: 0x1F9610C VA: 0x1F9610C
	|-SetPropertyUtility.SetStruct<float>
	|
	|-RVA: 0x1F961EC Offset: 0x1F961EC VA: 0x1F961EC
	|-SetPropertyUtility.SetStruct<TouchScreenKeyboardType>
	|
	|-RVA: 0x1F962C4 Offset: 0x1F962C4 VA: 0x1F962C4
	|-SetPropertyUtility.SetStruct<AspectRatioFitter.AspectMode>
	|
	|-RVA: 0x1F9639C Offset: 0x1F9639C VA: 0x1F9639C
	|-SetPropertyUtility.SetStruct<ColorBlock>
	|
	|-RVA: 0x1F964D4 Offset: 0x1F964D4 VA: 0x1F964D4
	|-SetPropertyUtility.SetStruct<ContentSizeFitter.FitMode>
	|
	|-RVA: 0x1F965AC Offset: 0x1F965AC VA: 0x1F965AC
	|-SetPropertyUtility.SetStruct<Image.FillMethod>
	|
	|-RVA: 0x1F96684 Offset: 0x1F96684 VA: 0x1F96684
	|-SetPropertyUtility.SetStruct<Image.Type>
	|
	|-RVA: 0x1F9675C Offset: 0x1F9675C VA: 0x1F9675C
	|-SetPropertyUtility.SetStruct<InputField.CharacterValidation>
	|
	|-RVA: 0x1F96834 Offset: 0x1F96834 VA: 0x1F96834
	|-SetPropertyUtility.SetStruct<InputField.ContentType>
	|
	|-RVA: 0x1F9690C Offset: 0x1F9690C VA: 0x1F9690C
	|-SetPropertyUtility.SetStruct<InputField.InputType>
	|
	|-RVA: 0x1F969E4 Offset: 0x1F969E4 VA: 0x1F969E4
	|-SetPropertyUtility.SetStruct<InputField.LineType>
	|
	|-RVA: 0x1F96ABC Offset: 0x1F96ABC VA: 0x1F96ABC
	|-SetPropertyUtility.SetStruct<Navigation>
	|
	|-RVA: 0x1F96BF8 Offset: 0x1F96BF8 VA: 0x1F96BF8
	|-SetPropertyUtility.SetStruct<Scrollbar.Direction>
	|
	|-RVA: 0x1F96CD0 Offset: 0x1F96CD0 VA: 0x1F96CD0
	|-SetPropertyUtility.SetStruct<Selectable.Transition>
	|
	|-RVA: 0x1F96DA8 Offset: 0x1F96DA8 VA: 0x1F96DA8
	|-SetPropertyUtility.SetStruct<Slider.Direction>
	|
	|-RVA: 0x1F96E80 Offset: 0x1F96E80 VA: 0x1F96E80
	|-SetPropertyUtility.SetStruct<SpriteState>
	*/

	// RVA: -1 Offset: -1
	public static bool SetClass<T>(ref T currentValue, T newValue) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x1F95E2C Offset: 0x1F95E2C VA: 0x1F95E2C
	|-SetPropertyUtility.SetClass<object>
	|-SetPropertyUtility.SetClass<RectTransform>
	|-SetPropertyUtility.SetClass<Sprite>
	|-SetPropertyUtility.SetClass<AnimationTriggers>
	|-SetPropertyUtility.SetClass<Graphic>
	|-SetPropertyUtility.SetClass<InputField.OnChangeEvent>
	|-SetPropertyUtility.SetClass<InputField.OnValidateInput>
	|-SetPropertyUtility.SetClass<InputField.SubmitEvent>
	|-SetPropertyUtility.SetClass<Text>
	*/
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7E960 Offset: 0xC7E960 VA: 0xC7E960
[RequireComponent] // RVA: 0xC7E960 Offset: 0xC7E960 VA: 0xC7E960
public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 3120
{
	// Fields
	[SerializeField] // RVA: 0xC80E18 Offset: 0xC80E18 VA: 0xC80E18
	private RectTransform m_FillRect; // 0xD8
	[SerializeField] // RVA: 0xC80E28 Offset: 0xC80E28 VA: 0xC80E28
	private RectTransform m_HandleRect; // 0xE0
	[SpaceAttribute] // RVA: 0xC80E38 Offset: 0xC80E38 VA: 0xC80E38
	[SerializeField] // RVA: 0xC80E38 Offset: 0xC80E38 VA: 0xC80E38
	private Slider.Direction m_Direction; // 0xE8
	[SerializeField] // RVA: 0xC80E70 Offset: 0xC80E70 VA: 0xC80E70
	private float m_MinValue; // 0xEC
	[SerializeField] // RVA: 0xC80E80 Offset: 0xC80E80 VA: 0xC80E80
	private float m_MaxValue; // 0xF0
	[SerializeField] // RVA: 0xC80E90 Offset: 0xC80E90 VA: 0xC80E90
	private bool m_WholeNumbers; // 0xF4
	[SerializeField] // RVA: 0xC80EA0 Offset: 0xC80EA0 VA: 0xC80EA0
	protected float m_Value; // 0xF8
	[SpaceAttribute] // RVA: 0xC80EB0 Offset: 0xC80EB0 VA: 0xC80EB0
	[SerializeField] // RVA: 0xC80EB0 Offset: 0xC80EB0 VA: 0xC80EB0
	private Slider.SliderEvent m_OnValueChanged; // 0x100
	private Image m_FillImage; // 0x108
	private Transform m_FillTransform; // 0x110
	private RectTransform m_FillContainerRect; // 0x118
	private Transform m_HandleTransform; // 0x120
	private RectTransform m_HandleContainerRect; // 0x128
	private Vector2 m_Offset; // 0x130
	private DrivenRectTransformTracker m_Tracker; // 0x138

	// Properties
	public RectTransform fillRect { get; set; }
	public RectTransform handleRect { get; set; }
	public Slider.Direction direction { get; set; }
	public float minValue { get; set; }
	public float maxValue { get; set; }
	public bool wholeNumbers { get; set; }
	public virtual float value { get; set; }
	public float normalizedValue { get; set; }
	public Slider.SliderEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Slider.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods

	// RVA: 0x100B86C Offset: 0x100B86C VA: 0x100B86C
	protected void .ctor() { }

	// RVA: 0x100B97C Offset: 0x100B97C VA: 0x100B97C
	public RectTransform get_fillRect() { }

	// RVA: 0x100B984 Offset: 0x100B984 VA: 0x100B984
	public void set_fillRect(RectTransform value) { }

	// RVA: 0x100C0F4 Offset: 0x100C0F4 VA: 0x100C0F4
	public RectTransform get_handleRect() { }

	// RVA: 0x100C0FC Offset: 0x100C0FC VA: 0x100C0FC
	public void set_handleRect(RectTransform value) { }

	// RVA: 0x100C180 Offset: 0x100C180 VA: 0x100C180
	public Slider.Direction get_direction() { }

	// RVA: 0x100C188 Offset: 0x100C188 VA: 0x100C188
	public void set_direction(Slider.Direction value) { }

	// RVA: 0x100C204 Offset: 0x100C204 VA: 0x100C204
	public float get_minValue() { }

	// RVA: 0x100C20C Offset: 0x100C20C VA: 0x100C20C
	public void set_minValue(float value) { }

	// RVA: 0x100C2B8 Offset: 0x100C2B8 VA: 0x100C2B8
	public float get_maxValue() { }

	// RVA: 0x100C2C0 Offset: 0x100C2C0 VA: 0x100C2C0
	public void set_maxValue(float value) { }

	// RVA: 0x100C358 Offset: 0x100C358 VA: 0x100C358
	public bool get_wholeNumbers() { }

	// RVA: 0x100C360 Offset: 0x100C360 VA: 0x100C360
	public void set_wholeNumbers(bool value) { }

	// RVA: 0x100C3F8 Offset: 0x100C3F8 VA: 0x100C3F8 Slot: 46
	public virtual float get_value() { }

	// RVA: 0x100C4E4 Offset: 0x100C4E4 VA: 0x100C4E4 Slot: 47
	public virtual void set_value(float value) { }

	// RVA: 0x100C4F8 Offset: 0x100C4F8 VA: 0x100C4F8
	public float get_normalizedValue() { }

	// RVA: 0x100C5DC Offset: 0x100C5DC VA: 0x100C5DC
	public void set_normalizedValue(float value) { }

	// RVA: 0x100C678 Offset: 0x100C678 VA: 0x100C678
	public Slider.SliderEvent get_onValueChanged() { }

	// RVA: 0x100C680 Offset: 0x100C680 VA: 0x100C680
	public void set_onValueChanged(Slider.SliderEvent value) { }

	// RVA: 0x100C688 Offset: 0x100C688 VA: 0x100C688
	private float get_stepSize() { }

	// RVA: 0x100C6B0 Offset: 0x100C6B0 VA: 0x100C6B0 Slot: 48
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x100C6B4 Offset: 0x100C6B4 VA: 0x100C6B4 Slot: 49
	public virtual void LayoutComplete() { }

	// RVA: 0x100C6B8 Offset: 0x100C6B8 VA: 0x100C6B8 Slot: 50
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x100C6BC Offset: 0x100C6BC VA: 0x100C6BC Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x100C704 Offset: 0x100C704 VA: 0x100C704 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x100C730 Offset: 0x100C730 VA: 0x100C730 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x100BA08 Offset: 0x100BA08 VA: 0x100BA08
	private void UpdateCachedReferences() { }

	// RVA: 0x100C9AC Offset: 0x100C9AC VA: 0x100C9AC
	private float ClampValue(float input) { }

	// RVA: 0x100C2A4 Offset: 0x100C2A4 VA: 0x100C2A4
	private void Set(float input) { }

	// RVA: 0x100CB04 Offset: 0x100CB04 VA: 0x100CB04 Slot: 51
	protected virtual void Set(float input, bool sendCallback) { }

	// RVA: 0x100CBD8 Offset: 0x100CBD8 VA: 0x100CBD8 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0x100CAE8 Offset: 0x100CAE8 VA: 0x100CAE8
	private Slider.Axis get_axis() { }

	// RVA: 0x100CAD4 Offset: 0x100CAD4 VA: 0x100CAD4
	private bool get_reverseValue() { }

	// RVA: 0x100BDB4 Offset: 0x100BDB4 VA: 0x100BDB4
	private void UpdateVisuals() { }

	// RVA: 0x100CC20 Offset: 0x100CC20 VA: 0x100CC20
	private void UpdateDrag(PointerEventData eventData, Camera cam) { }

	// RVA: 0x100CEEC Offset: 0x100CEEC VA: 0x100CEEC
	private bool MayDrag(PointerEventData eventData) { }

	// RVA: 0x100CF60 Offset: 0x100CF60 VA: 0x100CF60 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }

	// RVA: 0x100D180 Offset: 0x100D180 VA: 0x100D180 Slot: 52
	public virtual void OnDrag(PointerEventData eventData) { }

	// RVA: 0x100D1D8 Offset: 0x100D1D8 VA: 0x100D1D8 Slot: 31
	public override void OnMove(AxisEventData eventData) { }

	// RVA: 0x100D458 Offset: 0x100D458 VA: 0x100D458 Slot: 27
	public override Selectable FindSelectableOnLeft() { }

	// RVA: 0x100D47C Offset: 0x100D47C VA: 0x100D47C Slot: 28
	public override Selectable FindSelectableOnRight() { }

	// RVA: 0x100D4A0 Offset: 0x100D4A0 VA: 0x100D4A0 Slot: 29
	public override Selectable FindSelectableOnUp() { }

	// RVA: 0x100D4C4 Offset: 0x100D4C4 VA: 0x100D4C4 Slot: 30
	public override Selectable FindSelectableOnDown() { }

	// RVA: 0x100D4E8 Offset: 0x100D4E8 VA: 0x100D4E8 Slot: 53
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }

	// RVA: 0x100D51C Offset: 0x100D51C VA: 0x100D51C
	public void SetDirection(Slider.Direction direction, bool includeRectLayouts) { }

	// RVA: 0x100D6B0 Offset: 0x100D6B0 VA: 0x100D6B0 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Slider.Direction // TypeDefIndex: 3121
{
	// Fields
	public int value__; // 0x0
	public const Slider.Direction LeftToRight = 0;
	public const Slider.Direction RightToLeft = 1;
	public const Slider.Direction BottomToTop = 2;
	public const Slider.Direction TopToBottom = 3;
}

// Namespace: 
[Serializable]
public class Slider.SliderEvent : UnityEvent<float> // TypeDefIndex: 3122
{
	// Methods

	// RVA: 0x100B92C Offset: 0x100B92C VA: 0x100B92C
	public void .ctor() { }
}

// Namespace: 
private enum Slider.Axis // TypeDefIndex: 3123
{
	// Fields
	public int value__; // 0x0
	public const Slider.Axis Horizontal = 0;
	public const Slider.Axis Vertical = 1;
}

// Namespace: UnityEngine.UI
[Serializable]
public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 3124
{
	// Fields
	[SerializeField] // RVA: 0xC80EE8 Offset: 0xC80EE8 VA: 0xC80EE8
	private Sprite m_HighlightedSprite; // 0x0
	[SerializeField] // RVA: 0xC80EF8 Offset: 0xC80EF8 VA: 0xC80EF8
	private Sprite m_PressedSprite; // 0x8
	[SerializeField] // RVA: 0xC80F08 Offset: 0xC80F08 VA: 0xC80F08
	private Sprite m_DisabledSprite; // 0x10

	// Properties
	public Sprite highlightedSprite { get; set; }
	public Sprite pressedSprite { get; set; }
	public Sprite disabledSprite { get; set; }

	// Methods

	// RVA: 0xBB9EC0 Offset: 0xBB9EC0 VA: 0xBB9EC0
	public Sprite get_highlightedSprite() { }

	// RVA: 0xBB9EC8 Offset: 0xBB9EC8 VA: 0xBB9EC8
	public void set_highlightedSprite(Sprite value) { }

	// RVA: 0xBB9ED0 Offset: 0xBB9ED0 VA: 0xBB9ED0
	public Sprite get_pressedSprite() { }

	// RVA: 0xBB9ED8 Offset: 0xBB9ED8 VA: 0xBB9ED8
	public void set_pressedSprite(Sprite value) { }

	// RVA: 0xBB9EE0 Offset: 0xBB9EE0 VA: 0xBB9EE0
	public Sprite get_disabledSprite() { }

	// RVA: 0xBB9EE8 Offset: 0xBB9EE8 VA: 0xBB9EE8
	public void set_disabledSprite(Sprite value) { }

	// RVA: 0xBB9EF0 Offset: 0xBB9EF0 VA: 0xBB9EF0 Slot: 4
	public bool Equals(SpriteState other) { }
}

// Namespace: UnityEngine.UI
public static class StencilMaterial // TypeDefIndex: 3125
{
	// Fields
	private static List<StencilMaterial.MatEntry> m_List; // 0x0

	// Methods

	[EditorBrowsableAttribute] // RVA: 0xC81B68 Offset: 0xC81B68 VA: 0xC81B68
	[ObsoleteAttribute] // RVA: 0xC81B68 Offset: 0xC81B68 VA: 0xC81B68
	// RVA: 0x100D7D8 Offset: 0x100D7D8 VA: 0x100D7D8
	public static Material Add(Material baseMat, int stencilID) { }

	// RVA: 0xFFA49C Offset: 0xFFA49C VA: 0xFFA49C
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) { }

	// RVA: 0xFFA538 Offset: 0xFFA538 VA: 0xFFA538
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) { }

	// RVA: 0xFF9A7C Offset: 0xFF9A7C VA: 0xFF9A7C
	public static void Remove(Material customMat) { }

	// RVA: 0x100D7F0 Offset: 0x100D7F0 VA: 0x100D7F0
	public static void ClearAll() { }

	// RVA: 0x100D954 Offset: 0x100D954 VA: 0x100D954
	private static void .cctor() { }
}

// Namespace: 
private class StencilMaterial.MatEntry // TypeDefIndex: 3126
{
	// Fields
	public Material baseMat; // 0x10
	public Material customMat; // 0x18
	public int count; // 0x20
	public int stencilId; // 0x24
	public StencilOp operation; // 0x28
	public CompareFunction compareFunction; // 0x2C
	public int readMask; // 0x30
	public int writeMask; // 0x34
	public bool useAlphaClip; // 0x38
	public ColorWriteMask colorMask; // 0x3C

	// Methods

	// RVA: 0x100D7E0 Offset: 0x100D7E0 VA: 0x100D7E0
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7E9EC Offset: 0xC7E9EC VA: 0xC7E9EC
public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 3127
{
	// Fields
	[SerializeField] // RVA: 0xC80F18 Offset: 0xC80F18 VA: 0xC80F18
	private FontData m_FontData; // 0xB0
	[TextAreaAttribute] // RVA: 0xC80F28 Offset: 0xC80F28 VA: 0xC80F28
	[SerializeField] // RVA: 0xC80F28 Offset: 0xC80F28 VA: 0xC80F28
	protected string m_Text; // 0xB8
	private TextGenerator m_TextCache; // 0xC0
	private TextGenerator m_TextCacheForLayout; // 0xC8
	protected static Material s_DefaultText; // 0x0
	protected bool m_DisableFontTextureRebuiltCallback; // 0xD0
	private readonly UIVertex[] m_TempVerts; // 0xD8

	// Properties
	public TextGenerator cachedTextGenerator { get; }
	public TextGenerator cachedTextGeneratorForLayout { get; }
	public override Texture mainTexture { get; }
	public Font font { get; set; }
	public virtual string text { get; set; }
	public bool supportRichText { get; set; }
	public bool resizeTextForBestFit { get; set; }
	public int resizeTextMinSize { get; set; }
	public int resizeTextMaxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public int fontSize { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }
	public FontStyle fontStyle { get; set; }
	public float pixelsPerUnit { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods

	// RVA: 0x100D9C8 Offset: 0x100D9C8 VA: 0x100D9C8
	protected void .ctor() { }

	// RVA: 0x100DA74 Offset: 0x100DA74 VA: 0x100DA74
	public TextGenerator get_cachedTextGenerator() { }

	// RVA: 0x100DB50 Offset: 0x100DB50 VA: 0x100DB50
	public TextGenerator get_cachedTextGeneratorForLayout() { }

	// RVA: 0x100DBBC Offset: 0x100DBBC VA: 0x100DBBC Slot: 35
	public override Texture get_mainTexture() { }

	// RVA: 0x100DDC4 Offset: 0x100DDC4 VA: 0x100DDC4
	public void FontTextureChanged() { }

	// RVA: 0x100DD94 Offset: 0x100DD94 VA: 0x100DD94
	public Font get_font() { }

	// RVA: 0x100DEEC Offset: 0x100DEEC VA: 0x100DEEC
	public void set_font(Font value) { }

	// RVA: 0x100E008 Offset: 0x100E008 VA: 0x100E008 Slot: 72
	public virtual string get_text() { }

	// RVA: 0x100E010 Offset: 0x100E010 VA: 0x100E010 Slot: 73
	public virtual void set_text(string value) { }

	// RVA: 0x100E13C Offset: 0x100E13C VA: 0x100E13C
	public bool get_supportRichText() { }

	// RVA: 0x100E16C Offset: 0x100E16C VA: 0x100E16C
	public void set_supportRichText(bool value) { }

	// RVA: 0x100E20C Offset: 0x100E20C VA: 0x100E20C
	public bool get_resizeTextForBestFit() { }

	// RVA: 0x100E23C Offset: 0x100E23C VA: 0x100E23C
	public void set_resizeTextForBestFit(bool value) { }

	// RVA: 0x100E2DC Offset: 0x100E2DC VA: 0x100E2DC
	public int get_resizeTextMinSize() { }

	// RVA: 0x100E30C Offset: 0x100E30C VA: 0x100E30C
	public void set_resizeTextMinSize(int value) { }

	// RVA: 0x100E3AC Offset: 0x100E3AC VA: 0x100E3AC
	public int get_resizeTextMaxSize() { }

	// RVA: 0x100E3DC Offset: 0x100E3DC VA: 0x100E3DC
	public void set_resizeTextMaxSize(int value) { }

	// RVA: 0x100E47C Offset: 0x100E47C VA: 0x100E47C
	public TextAnchor get_alignment() { }

	// RVA: 0x100E4AC Offset: 0x100E4AC VA: 0x100E4AC
	public void set_alignment(TextAnchor value) { }

	// RVA: 0x100E54C Offset: 0x100E54C VA: 0x100E54C
	public bool get_alignByGeometry() { }

	// RVA: 0x100E57C Offset: 0x100E57C VA: 0x100E57C
	public void set_alignByGeometry(bool value) { }

	// RVA: 0x100E608 Offset: 0x100E608 VA: 0x100E608
	public int get_fontSize() { }

	// RVA: 0x100E638 Offset: 0x100E638 VA: 0x100E638
	public void set_fontSize(int value) { }

	// RVA: 0x100E6D8 Offset: 0x100E6D8 VA: 0x100E6D8
	public HorizontalWrapMode get_horizontalOverflow() { }

	// RVA: 0x100E708 Offset: 0x100E708 VA: 0x100E708
	public void set_horizontalOverflow(HorizontalWrapMode value) { }

	// RVA: 0x100E7A8 Offset: 0x100E7A8 VA: 0x100E7A8
	public VerticalWrapMode get_verticalOverflow() { }

	// RVA: 0x100E7D8 Offset: 0x100E7D8 VA: 0x100E7D8
	public void set_verticalOverflow(VerticalWrapMode value) { }

	// RVA: 0x100E878 Offset: 0x100E878 VA: 0x100E878
	public float get_lineSpacing() { }

	// RVA: 0x100E8A8 Offset: 0x100E8A8 VA: 0x100E8A8
	public void set_lineSpacing(float value) { }

	// RVA: 0x100E948 Offset: 0x100E948 VA: 0x100E948
	public FontStyle get_fontStyle() { }

	// RVA: 0x100E978 Offset: 0x100E978 VA: 0x100E978
	public void set_fontStyle(FontStyle value) { }

	// RVA: 0x100EA18 Offset: 0x100EA18 VA: 0x100EA18
	public float get_pixelsPerUnit() { }

	// RVA: 0x100EBD0 Offset: 0x100EBD0 VA: 0x100EBD0 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x100EC60 Offset: 0x100EC60 VA: 0x100EC60 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x100ECD0 Offset: 0x100ECD0 VA: 0x100ECD0 Slot: 41
	protected override void UpdateGeometry() { }

	// RVA: 0x100ED68 Offset: 0x100ED68 VA: 0x100ED68
	internal void AssignDefaultFont() { }

	// RVA: 0x100EDCC Offset: 0x100EDCC VA: 0x100EDCC
	public TextGenerationSettings GetGenerationSettings(Vector2 extents) { }

	// RVA: 0x100F12C Offset: 0x100F12C VA: 0x100F12C
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor) { }

	// RVA: 0x100F264 Offset: 0x100F264 VA: 0x100F264 Slot: 44
	protected override void OnPopulateMesh(VertexHelper toFill) { }

	// RVA: 0x100FBC4 Offset: 0x100FBC4 VA: 0x100FBC4 Slot: 74
	public virtual void CalculateLayoutInputHorizontal() { }

	// RVA: 0x100FBC8 Offset: 0x100FBC8 VA: 0x100FBC8 Slot: 75
	public virtual void CalculateLayoutInputVertical() { }

	// RVA: 0x100FBCC Offset: 0x100FBCC VA: 0x100FBCC Slot: 76
	public virtual float get_minWidth() { }

	// RVA: 0x100FBD4 Offset: 0x100FBD4 VA: 0x100FBD4 Slot: 77
	public virtual float get_preferredWidth() { }

	// RVA: 0x100FCD0 Offset: 0x100FCD0 VA: 0x100FCD0 Slot: 78
	public virtual float get_flexibleWidth() { }

	// RVA: 0x100FCD8 Offset: 0x100FCD8 VA: 0x100FCD8 Slot: 79
	public virtual float get_minHeight() { }

	// RVA: 0x100FCE0 Offset: 0x100FCE0 VA: 0x100FCE0 Slot: 80
	public virtual float get_preferredHeight() { }

	// RVA: 0x100FDC8 Offset: 0x100FDC8 VA: 0x100FDC8 Slot: 81
	public virtual float get_flexibleHeight() { }

	// RVA: 0x100FDD0 Offset: 0x100FDD0 VA: 0x100FDD0 Slot: 82
	public virtual int get_layoutPriority() { }

	// RVA: 0x100FDD8 Offset: 0x100FDD8 VA: 0x100FDD8
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7EA28 Offset: 0xC7EA28 VA: 0xC7EA28
[RequireComponent] // RVA: 0xC7EA28 Offset: 0xC7EA28 VA: 0xC7EA28
public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement, IEventSystemHandler // TypeDefIndex: 3128
{
	// Fields
	public Toggle.ToggleTransition toggleTransition; // 0xD8
	public Graphic graphic; // 0xE0
	[SerializeField] // RVA: 0xC80F68 Offset: 0xC80F68 VA: 0xC80F68
	private ToggleGroup m_Group; // 0xE8
	public Toggle.ToggleEvent onValueChanged; // 0xF0
	[TooltipAttribute] // RVA: 0xC80F78 Offset: 0xC80F78 VA: 0xC80F78
	[SerializeField] // RVA: 0xC80F78 Offset: 0xC80F78 VA: 0xC80F78
	private bool m_IsOn; // 0xF8

	// Properties
	public ToggleGroup group { get; set; }
	public bool isOn { get; set; }

	// Methods

	// RVA: 0x100FE28 Offset: 0x100FE28 VA: 0x100FE28
	protected void .ctor() { }

	// RVA: 0x100FF00 Offset: 0x100FF00 VA: 0x100FF00
	public ToggleGroup get_group() { }

	// RVA: 0x100FF08 Offset: 0x100FF08 VA: 0x100FF08
	public void set_group(ToggleGroup value) { }

	// RVA: 0x10101D0 Offset: 0x10101D0 VA: 0x10101D0 Slot: 46
	public virtual void Rebuild(CanvasUpdate executing) { }

	// RVA: 0x10101D4 Offset: 0x10101D4 VA: 0x10101D4 Slot: 47
	public virtual void LayoutComplete() { }

	// RVA: 0x10101D8 Offset: 0x10101D8 VA: 0x10101D8 Slot: 48
	public virtual void GraphicUpdateComplete() { }

	// RVA: 0x10101DC Offset: 0x10101DC VA: 0x10101DC Slot: 5
	protected override void OnEnable() { }

	// RVA: 0x1010214 Offset: 0x1010214 VA: 0x1010214 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0x1010240 Offset: 0x1010240 VA: 0x1010240 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }

	// RVA: 0x100FF38 Offset: 0x100FF38 VA: 0x100FF38
	private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue) { }

	// RVA: 0x10104C4 Offset: 0x10104C4 VA: 0x10104C4
	public bool get_isOn() { }

	// RVA: 0x101060C Offset: 0x101060C VA: 0x101060C
	public void set_isOn(bool value) { }

	// RVA: 0x1010360 Offset: 0x1010360 VA: 0x1010360
	private void Set(bool value) { }

	// RVA: 0x1010618 Offset: 0x1010618 VA: 0x1010618
	private void Set(bool value, bool sendCallback) { }

	// RVA: 0x10100E0 Offset: 0x10100E0 VA: 0x10100E0
	private void PlayEffect(bool instant) { }

	// RVA: 0x10108B0 Offset: 0x10108B0 VA: 0x10108B0 Slot: 6
	protected override void Start() { }

	// RVA: 0x10108B8 Offset: 0x10108B8 VA: 0x10108B8
	private void InternalToggle() { }

	// RVA: 0x101091C Offset: 0x101091C VA: 0x101091C Slot: 49
	public virtual void OnPointerClick(PointerEventData eventData) { }

	// RVA: 0x1010968 Offset: 0x1010968 VA: 0x1010968 Slot: 50
	public virtual void OnSubmit(BaseEventData eventData) { }

	// RVA: 0x101096C Offset: 0x101096C VA: 0x101096C Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Toggle.ToggleTransition // TypeDefIndex: 3129
{
	// Fields
	public int value__; // 0x0
	public const Toggle.ToggleTransition None = 0;
	public const Toggle.ToggleTransition Fade = 1;
}

// Namespace: 
[Serializable]
public class Toggle.ToggleEvent : UnityEvent<bool> // TypeDefIndex: 3130
{
	// Methods

	// RVA: 0x100FEB0 Offset: 0x100FEB0 VA: 0x100FEB0
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7EAB4 Offset: 0xC7EAB4 VA: 0xC7EAB4
[DisallowMultipleComponent] // RVA: 0xC7EAB4 Offset: 0xC7EAB4 VA: 0xC7EAB4
public class ToggleGroup : UIBehaviour // TypeDefIndex: 3131
{
	// Fields
	[SerializeField] // RVA: 0xC80FC4 Offset: 0xC80FC4 VA: 0xC80FC4
	private bool m_AllowSwitchOff; // 0x18
	private List<Toggle> m_Toggles; // 0x20
	[CompilerGeneratedAttribute] // RVA: 0xC80FD4 Offset: 0xC80FD4 VA: 0xC80FD4
	private static Predicate<Toggle> <>f__am$cache0; // 0x0
	[CompilerGeneratedAttribute] // RVA: 0xC80FE4 Offset: 0xC80FE4 VA: 0xC80FE4
	private static Func<Toggle, bool> <>f__am$cache1; // 0x8

	// Properties
	public bool allowSwitchOff { get; set; }

	// Methods

	// RVA: 0x1010974 Offset: 0x1010974 VA: 0x1010974
	protected void .ctor() { }

	// RVA: 0x10108A8 Offset: 0x10108A8 VA: 0x10108A8
	public bool get_allowSwitchOff() { }

	// RVA: 0x10109E8 Offset: 0x10109E8 VA: 0x10109E8
	public void set_allowSwitchOff(bool value) { }

	// RVA: 0x10109F4 Offset: 0x10109F4 VA: 0x10109F4
	private void ValidateToggleIsInGroup(Toggle toggle) { }

	// RVA: 0x10104CC Offset: 0x10104CC VA: 0x10104CC
	public void NotifyToggleOn(Toggle toggle) { }

	// RVA: 0x101036C Offset: 0x101036C VA: 0x101036C
	public void UnregisterToggle(Toggle toggle) { }

	// RVA: 0x1010418 Offset: 0x1010418 VA: 0x1010418
	public void RegisterToggle(Toggle toggle) { }

	// RVA: 0x10107A0 Offset: 0x10107A0 VA: 0x10107A0
	public bool AnyTogglesOn() { }

	// RVA: 0x1010BC8 Offset: 0x1010BC8 VA: 0x1010BC8
	public IEnumerable<Toggle> ActiveToggles() { }

	// RVA: 0x1010C84 Offset: 0x1010C84 VA: 0x1010C84
	public void SetAllTogglesOff() { }

	[CompilerGeneratedAttribute] // RVA: 0xC81BBC Offset: 0xC81BBC VA: 0xC81BBC
	// RVA: 0x1010D60 Offset: 0x1010D60 VA: 0x1010D60
	private static bool <AnyTogglesOn>m__0(Toggle x) { }

	[CompilerGeneratedAttribute] // RVA: 0xC81BCC Offset: 0xC81BCC VA: 0xC81BCC
	// RVA: 0x1010D88 Offset: 0x1010D88 VA: 0x1010D88
	private static bool <ActiveToggles>m__1(Toggle x) { }
}

// Namespace: UnityEngine.UI
public class ClipperRegistry // TypeDefIndex: 3132
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet<IClipper> m_Clippers; // 0x10

	// Properties
	public static ClipperRegistry instance { get; }

	// Methods

	// RVA: 0xF19644 Offset: 0xF19644 VA: 0xF19644
	protected void .ctor() { }

	// RVA: 0xF18974 Offset: 0xF18974 VA: 0xF18974
	public static ClipperRegistry get_instance() { }

	// RVA: 0xF189F0 Offset: 0xF189F0 VA: 0xF189F0
	public void Cull() { }

	// RVA: 0xF196B4 Offset: 0xF196B4 VA: 0xF196B4
	public static void Register(IClipper c) { }

	// RVA: 0xF19738 Offset: 0xF19738 VA: 0xF19738
	public static void Unregister(IClipper c) { }
}

// Namespace: UnityEngine.UI
public static class Clipping // TypeDefIndex: 3133
{
	// Methods

	// RVA: 0xF197AC Offset: 0xF197AC VA: 0xF197AC
	public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) { }

	// RVA: 0xF19A3C Offset: 0xF19A3C VA: 0xF19A3C
	private static Rect RectIntersect(Rect a, Rect b) { }
}

// Namespace: UnityEngine.UI
public interface IClipper // TypeDefIndex: 3134
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void PerformClipping();
}

// Namespace: UnityEngine.UI
public interface IClippable // TypeDefIndex: 3135
{
	// Properties
	public abstract GameObject gameObject { get; }
	public abstract RectTransform rectTransform { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract GameObject get_gameObject();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void RecalculateClipping();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract RectTransform get_rectTransform();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Cull(Rect clipRect, bool validRect);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void SetClipRect(Rect value, bool validRect);
}

// Namespace: UnityEngine.UI
internal class RectangularVertexClipper // TypeDefIndex: 3136
{
	// Fields
	private readonly Vector3[] m_WorldCorners; // 0x10
	private readonly Vector3[] m_CanvasCorners; // 0x18

	// Methods

	// RVA: 0xFFEF58 Offset: 0xFFEF58 VA: 0xFFEF58
	public void .ctor() { }

	// RVA: 0xFFF218 Offset: 0xFFF218 VA: 0xFFF218
	public Rect GetCanvasRect(RectTransform t, Canvas c) { }
}

// Namespace: UnityEngine.UI
[AddComponentMenu] // RVA: 0xC7EB04 Offset: 0xC7EB04 VA: 0xC7EB04
[ExecuteAlways] // RVA: 0xC7EB04 Offset: 0xC7EB04 VA: 0xC7EB04
[RequireComponent] // RVA: 0xC7EB04 Offset: 0xC7EB04 VA: 0xC7EB04
[DisallowMultipleComponent] // RVA: 0xC7EB04 Offset: 0xC7EB04 VA: 0xC7EB04
public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 3137
{
	// Fields
	[SerializeField] // RVA: 0xC80FF4 Offset: 0xC80FF4 VA: 0xC80FF4
	private AspectRatioFitter.AspectMode m_AspectMode; // 0x18
	[SerializeField] // RVA: 0xC81004 Offset: 0xC81004 VA: 0xC81004
	private float m_AspectRatio; // 0x1C
	private RectTransform m_Rect; // 0x20
	private bool m_DelayedSetDirty; // 0x28
	private DrivenRectTransformTracker m_Tracker; // 0x29

	// Properties
	public AspectRatioFitter.AspectMode aspectMode { get; set; }
	public float aspectRatio { get; set; }
	private RectTransform rectTransform { get; }

	// Methods

	// RVA: 0xF16288 Offset: 0xF16288 VA: 0xF16288
	protected void .ctor() { }

	// RVA: 0xF1629C Offset: 0xF1629C VA: 0xF1629C
	public AspectRatioFitter.AspectMode get_aspectMode() { }

	// RVA: 0xF162A4 Offset: 0xF162A4 VA: 0xF162A4
	public void set_aspectMode(AspectRatioFitter.AspectMode value) { }

	// RVA: 0xF16324 Offset: 0xF16324 VA: 0xF16324
	public float get_aspectRatio() { }

	// RVA: 0xF1632C Offset: 0xF1632C VA: 0xF1632C
	public void set_aspectRatio(float value) { }

	// RVA: 0xF163A8 Offset: 0xF163A8 VA: 0xF163A8
	private RectTransform get_rectTransform() { }

	// RVA: 0xF16440 Offset: 0xF16440 VA: 0xF16440 Slot: 5
	protected override void OnEnable() { }

	// RVA: 0xF16444 Offset: 0xF16444 VA: 0xF16444 Slot: 7
	protected override void OnDisable() { }

	// RVA: 0xF164C8 Offset: 0xF164C8 VA: 0xF164C8 Slot: 19
	protected virtual void Update() { }

	// RVA: 0xF164DC Offset: 0xF164DC VA: 0xF164DC Slot: 10
	protected override void OnRectTransformDimensionsChange() { }

	// RVA: 0xF164E0 Offset: 0xF164E0 VA: 0xF164E0
	private void UpdateRect() { }

	// RVA: 0xF16934 Offset: 0xF16934 VA: 0xF16934
	private float GetSizeDeltaToProduceSize(float size, int axis) { }

	// RVA: 0xF1681C Offset: 0xF1681C VA: 0xF1681C
	private Vector2 GetParentSize() { }

	// RVA: 0xF16A10 Offset: 0xF16A10 VA: 0xF16A10 Slot: 20
	public virtual void SetLayoutHorizontal() { }

	// RVA: 0xF16A14 Offset: 0xF16A14 VA: 0xF16A14 Slot: 21
	public virtual void SetLayoutVertical() { }

	// RVA: 0xF16320 Offset: 0xF16320 VA: 0xF16320
	protected void SetDirty() { }
}

// Namespace: 
public enum AspectRatioFitter.AspectMode // TypeDefIndex: 3138
{
	// Fields
	public int value__; // 0x0
	public const AspectRatioFitter.AspectMode None = 0;
	public const AspectRatioFitter.AspectMode WidthControlsHeight = 1;
	public const AspectRatioFitter.AspectMode HeightControlsWidth = 2;
	public const AspectRatioFitter.AspectMode FitInParent = 3;
	public const AspectRatioFitter.AspectMode EnvelopeParent = 4;
}

