	private static readonly int NORMAL_DEFAULT_COUNT; // 0x20
	private static readonly int LIMIT_OVER_DEFAULT_COUNT; // 0x24
	private static readonly int NORMAL_MAX_COUNT; // 0x28
	private static readonly int MAX_COLUMNS_NORMAL; // 0x2C
	private static readonly int MAX_ROWS_NORMAL; // 0x30
	private static readonly int MAX_COLUMNS_LIMIT_OVER; // 0x34
	private static readonly int MAX_ROWS_LIMIT_OVER; // 0x38
	private static readonly float[] X_NORMAL_POSITIONS; // 0x40
	private static readonly float[] Y_NORMAL_POSITIONS; // 0x48
	private static readonly float X_NORMAL_ONE_POSITION; // 0x50
	private static readonly float Y_NORMAL_ONE_POSITION_EVENT; // 0x54
	private static readonly float Y_NORMAL_ONE_POSITION_SHOP; // 0x58
	private static readonly float[] X_LIMIT_OVER_POSITIONS; // 0x60
	private static readonly float[] Y_LIMIT_OVER_POSITIONS; // 0x68
	private static readonly float X_LIMITOVER_ONE_POSITION; // 0x70
	private static readonly float[] X_LIMIT_OVER_TWO_POSITIONS; // 0x78
	private static readonly float Y_LIMIT_OVER_ONE; // 0x80
	private static readonly int[] NORMAL_ITEM_BASE_WINDOW_HEIGHT; // 0x88
	private static readonly int[] LIMIT_OVER_ITEM_BASE_WINDOW_HEIGHT; // 0x90
	private static readonly int SCOPE_ITEM_INFO_ADD_HEIGHT; // 0x98
	private static readonly int SCOPE_ITEM_INFO_ADD_WIDTH; // 0x9C
	private static readonly int X_ITEM_BASE_WINDOW_POSITION; // 0xA0

	// Methods

	// RVA: 0x1B7B1F0 Offset: 0x1B7B1F0 VA: 0x1B7B1F0
	public static Vector3 GetPanelPosition(Vector3 position) { }

	// RVA: 0x1B7B368 Offset: 0x1B7B368 VA: 0x1B7B368
	public static int GetEventItemWindowHeight(bool isEventShop, int count, bool isForcedAdjustment) { }

	// RVA: 0x1B7B6B4 Offset: 0x1B7B6B4 VA: 0x1B7B6B4
	public static float GetItemBaseWindowX() { }

	// RVA: 0x1B7B75C Offset: 0x1B7B75C VA: 0x1B7B75C
	public static int GetItemBaseWindowHeight(int count, bool isForcedAdjustment) { }

	// RVA: 0x1B7B5EC Offset: 0x1B7B5EC VA: 0x1B7B5EC
	private static int GetWindowAddHeight(bool isEventShop, int count, bool isForcedAdjustment) { }

	// RVA: 0x1B7B500 Offset: 0x1B7B500 VA: 0x1B7B500
	private static int GetWindowBaseHeight(bool isEventShop, int count, bool isForcedAdjustment) { }

	// RVA: 0x1B7BA78 Offset: 0x1B7BA78 VA: 0x1B7BA78
	public static Vector3 GetEventItemPosition(bool isEventShop, int index, int count, bool isForcedAdjustment) { }

	// RVA: 0x1B7B8E0 Offset: 0x1B7B8E0 VA: 0x1B7B8E0
	public static bool GetIsLimitOverWindow(int count, bool isForcedAdjustment) { }

	// RVA: 0x1B7B968 Offset: 0x1B7B968 VA: 0x1B7B968
	private static int GetMaxColumns(bool isLimitOverWindow) { }

	// RVA: 0x1B7BE9C Offset: 0x1B7BE9C VA: 0x1B7BE9C
	private static int GetMaxRows(bool isLimitOverWindow) { }

	// RVA: 0x1B7B9FC Offset: 0x1B7B9FC VA: 0x1B7B9FC
	private static int GetRowCount(int count, int maxColumns) { }

	// RVA: 0x1B7BF30 Offset: 0x1B7BF30 VA: 0x1B7BF30
	private static void .cctor() { }
}

// Namespace: 
public class NoTitleDialog : BaseDialog // TypeDefIndex: 10540
{
	// Fields
	[SerializeField] // RVA: 0xCE222C Offset: 0xCE222C VA: 0xCE222C
	private UILabel messageLabel; // 0x58
	[SerializeField] // RVA: 0xCE223C Offset: 0xCE223C VA: 0xCE223C
	private UILabel buttonDecideLabel; // 0x60
	[SerializeField] // RVA: 0xCE224C Offset: 0xCE224C VA: 0xCE224C
	private UILabel buttonCancelLabel; // 0x68
	[SerializeField] // RVA: 0xCE225C Offset: 0xCE225C VA: 0xCE225C
	protected UICommonButton closeBtn; // 0x70
	private Action<bool> onClick; // 0x78
	private Action onClose; // 0x80
	private bool isButtonEnable; // 0x88

	// Properties
	protected override GameObject closeBtnObject { get; }

	// Methods

	// RVA: 0x18C9E4C Offset: 0x18C9E4C VA: 0x18C9E4C
	public void .ctor() { }

	// RVA: 0x18C9EB4 Offset: 0x18C9EB4 VA: 0x18C9EB4
	public void Init() { }

	// RVA: 0x18CA038 Offset: 0x18CA038 VA: 0x18CA038
	public void Open(string message, string decideTxt, string cancleTxt, Action<bool> onClick) { }

	// RVA: 0x18C9F90 Offset: 0x18C9F90 VA: 0x18C9F90
	private void SetLabelText(UILabel label, string text) { }

	// RVA: 0x18CA1AC Offset: 0x18CA1AC VA: 0x18CA1AC
	private void EndOpen() { }

	// RVA: 0x18CA1B8 Offset: 0x18CA1B8 VA: 0x18CA1B8
	public void Close() { }

	// RVA: 0x18CA1C0 Offset: 0x18CA1C0 VA: 0x18CA1C0
	public void Close(Action callback) { }

	// RVA: 0x18CA24C Offset: 0x18CA24C VA: 0x18CA24C
	private void EndClose() { }

	// RVA: 0x18CA2B0 Offset: 0x18CA2B0 VA: 0x18CA2B0 Slot: 4
	protected override GameObject get_closeBtnObject() { }

	// RVA: 0x18CA350 Offset: 0x18CA350 VA: 0x18CA350
	public void OnClickDecide() { }

	// RVA: 0x18CA454 Offset: 0x18CA454 VA: 0x18CA454
	public void OnClickDecide2() { }

	// RVA: 0x18CA4E0 Offset: 0x18CA4E0 VA: 0x18CA4E0
	public void OnClickCancel() { }

	// RVA: 0x18CA56C Offset: 0x18CA56C VA: 0x18CA56C
	public void OnClickClose() { }

	// RVA: 0x18CA3DC Offset: 0x18CA3DC VA: 0x18CA3DC
	private void CallOnClick(bool result) { }
}

// Namespace: 
public class RequestResultDialog : BaseDialog // TypeDefIndex: 10541
{
	// Fields
	private const int NORMAL_FONT_SIZE = 30;
	[SerializeField] // RVA: 0xCE226C Offset: 0xCE226C VA: 0xCE226C
	private UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCE227C Offset: 0xCE227C VA: 0xCE227C
	private UILabel messageLabel; // 0x60
	[SerializeField] // RVA: 0xCE228C Offset: 0xCE228C VA: 0xCE228C
	private UILabel okBtnLabel; // 0x68
	[SerializeField] // RVA: 0xCE229C Offset: 0xCE229C VA: 0xCE229C
	private UILabel itemMessageLabel; // 0x70
	[SerializeField] // RVA: 0xCE22AC Offset: 0xCE22AC VA: 0xCE22AC
	private UILabel numMessageLabel; // 0x78
	[SerializeField] // RVA: 0xCE22BC Offset: 0xCE22BC VA: 0xCE22BC
	private UILabel userItemNumLabel; // 0x80
	[SerializeField] // RVA: 0xCE22CC Offset: 0xCE22CC VA: 0xCE22CC
	private UILabel title2Label; // 0x88
	[SerializeField] // RVA: 0xCE22DC Offset: 0xCE22DC VA: 0xCE22DC
	private UILabel message2Label; // 0x90
	[SerializeField] // RVA: 0xCE22EC Offset: 0xCE22EC VA: 0xCE22EC
	private UILabel addMessageLabel; // 0x98
	[SerializeField] // RVA: 0xCE22FC Offset: 0xCE22FC VA: 0xCE22FC
	private UILabel itemMessage2Label; // 0xA0
	[SerializeField] // RVA: 0xCE230C Offset: 0xCE230C VA: 0xCE230C
	private UILabel numMessage2Label; // 0xA8
	[SerializeField] // RVA: 0xCE231C Offset: 0xCE231C VA: 0xCE231C
	private UILabel userItemNum2Label; // 0xB0
	[SerializeField] // RVA: 0xCE232C Offset: 0xCE232C VA: 0xCE232C
	private UILabel addMessage2Label; // 0xB8
	[SerializeField] // RVA: 0xCE233C Offset: 0xCE233C VA: 0xCE233C
	private UILabel cancelButtonLabel; // 0xC0
	[SerializeField] // RVA: 0xCE234C Offset: 0xCE234C VA: 0xCE234C
	private UILabel decideButtonLabel; // 0xC8
	[SerializeField] // RVA: 0xCE235C Offset: 0xCE235C VA: 0xCE235C
	private GameObject normalBuyWindowObj; // 0xD0
	[SerializeField] // RVA: 0xCE236C Offset: 0xCE236C VA: 0xCE236C
	private GameObject itemBuyWindowObj; // 0xD8
	[SerializeField] // RVA: 0xCE237C Offset: 0xCE237C VA: 0xCE237C
	private GameObject normalBuyAddMsgWindowObj; // 0xE0
	[SerializeField] // RVA: 0xCE238C Offset: 0xCE238C VA: 0xCE238C
	private GameObject itemBuyAddMsgWindowObj; // 0xE8
	[SerializeField] // RVA: 0xCE239C Offset: 0xCE239C VA: 0xCE239C
	private GameObject okBtnObj; // 0xF0
	[SerializeField] // RVA: 0xCE23AC Offset: 0xCE23AC VA: 0xCE23AC
	private GameObject cancelButtonObj; // 0xF8
	[SerializeField] // RVA: 0xCE23BC Offset: 0xCE23BC VA: 0xCE23BC
	private GameObject decideButtonObj; // 0x100
	private Action<bool> onDecide; // 0x108
	private Action onClose; // 0x110
	private bool isButtonEnable; // 0x118
	private bool isInitPanelDepth; // 0x119
	private int keepPanelDepth; // 0x11C

	// Properties
	protected override string closeBtnPath { get; }

	// Methods

	// RVA: 0x1AA3AC8 Offset: 0x1AA3AC8 VA: 0x1AA3AC8
	public void .ctor() { }

	// RVA: 0x1AA3B30 Offset: 0x1AA3B30 VA: 0x1AA3B30
	public void Init() { }

	// RVA: 0x1AA3D00 Offset: 0x1AA3D00 VA: 0x1AA3D00
	public void Open(string message, string numMessage, string userItemNumMessage, Action<bool> onDecide) { }

	// RVA: 0x1AA3DA0 Offset: 0x1AA3DA0 VA: 0x1AA3DA0
	public void OpenAddMsg(string message, string numMessage, string userItemNumMessage, string addMessage, Action<bool> onDecide) { }

	// RVA: 0x1AA4298 Offset: 0x1AA4298 VA: 0x1AA4298
	public void Open(string title, string message, Action<bool> onDecide, int panelDepth = -1) { }

	// RVA: 0x1AA4358 Offset: 0x1AA4358 VA: 0x1AA4358
	public void OpenAddMsg(string title, string message, string addMessage, Action<bool> onDecide, int panelDepth = -1, int fontSize = 30, int message2Y = 45, int addMessageY = -45, string cancelMessage, string decideMessage) { }

	// RVA: 0x1AA4084 Offset: 0x1AA4084 VA: 0x1AA4084
	private int GetKeepPanelDepth() { }

	// RVA: 0x1AA4820 Offset: 0x1AA4820 VA: 0x1AA4820
	private void EndOpen() { }

	// RVA: 0x1AA482C Offset: 0x1AA482C VA: 0x1AA482C
	public void Close() { }

	// RVA: 0x1AA4834 Offset: 0x1AA4834 VA: 0x1AA4834
	public void Close(Action callback) { }

	// RVA: 0x1AA48C0 Offset: 0x1AA48C0 VA: 0x1AA48C0
	private void EndClose() { }

	// RVA: 0x1AA4918 Offset: 0x1AA4918 VA: 0x1AA4918
	public void OnClickOk() { }

	// RVA: 0x1AA4A18 Offset: 0x1AA4A18 VA: 0x1AA4A18
	public void OnClickDecide() { }

	// RVA: 0x1AA4AA0 Offset: 0x1AA4AA0 VA: 0x1AA4AA0
	public void OnClickCancel() { }

	// RVA: 0x1AA49A0 Offset: 0x1AA49A0 VA: 0x1AA49A0
	private void CallOnDecide(bool isOk) { }

	// RVA: 0x1AA48FC Offset: 0x1AA48FC VA: 0x1AA48FC
	private void CallOnClose() { }

	// RVA: 0x1AA3C58 Offset: 0x1AA3C58 VA: 0x1AA3C58
	private void SetLabelText(UILabel label, string text) { }

	// RVA: 0x1AA414C Offset: 0x1AA414C VA: 0x1AA414C
	private void SetLabelFontSizeAdjust(UILabel label, string text, int size) { }

	// RVA: 0x1AA41F0 Offset: 0x1AA41F0 VA: 0x1AA41F0
	private void SetPanelDepth(UIPanel panel, int depth) { }

	// RVA: 0x1AA4770 Offset: 0x1AA4770 VA: 0x1AA4770
	private void SetLabelLacalPositionY(UILabel label, float y) { }

	// RVA: 0x1AA4B28 Offset: 0x1AA4B28 VA: 0x1AA4B28 Slot: 6
	protected override string get_closeBtnPath() { }
}

// Namespace: 
public class ServantOperationListViewItem : ListViewItem // TypeDefIndex: 10542
{
	// Fields
	[CompilerGeneratedAttribute] // RVA: 0xCE23CC Offset: 0xCE23CC VA: 0xCE23CC
	[DebuggerBrowsableAttribute] // RVA: 0xCE23CC Offset: 0xCE23CC VA: 0xCE23CC
	private UserServantEntity <UserServantEntity>k__BackingField; // 0x70
	private ServantEntity servantEntity; // 0x78
	[CompilerGeneratedAttribute] // RVA: 0xCE2408 Offset: 0xCE2408 VA: 0xCE2408
	[DebuggerBrowsableAttribute] // RVA: 0xCE2408 Offset: 0xCE2408 VA: 0xCE2408
	private int <SvtId>k__BackingField; // 0x80
	[CompilerGeneratedAttribute] // RVA: 0xCE2444 Offset: 0xCE2444 VA: 0xCE2444
	[DebuggerBrowsableAttribute] // RVA: 0xCE2444 Offset: 0xCE2444 VA: 0xCE2444
	private UserCommandCodeEntity <UserCommandCodeEntity>k__BackingField; // 0x88
	private CommandCodeEntity commandCodeEntity; // 0x90
	[CompilerGeneratedAttribute] // RVA: 0xCE2480 Offset: 0xCE2480 VA: 0xCE2480
	[DebuggerBrowsableAttribute] // RVA: 0xCE2480 Offset: 0xCE2480 VA: 0xCE2480
	private int <CommandCodeId>k__BackingField; // 0x98
	private int classId; // 0x9C
	private int rarity; // 0xA0
	private ObscuredInt friendship; // 0xA4
	private int friendshipMax; // 0xB4
	private int partyIndex; // 0xB8
	[CompilerGeneratedAttribute] // RVA: 0xCE24BC Offset: 0xCE24BC VA: 0xCE24BC
	[DebuggerBrowsableAttribute] // RVA: 0xCE24BC Offset: 0xCE24BC VA: 0xCE24BC
	private bool <IsPartyEquip>k__BackingField; // 0xBC
	[CompilerGeneratedAttribute] // RVA: 0xCE24F8 Offset: 0xCE24F8 VA: 0xCE24F8
	[DebuggerBrowsableAttribute] // RVA: 0xCE24F8 Offset: 0xCE24F8 VA: 0xCE24F8
	private bool <IsUseSupportServant>k__BackingField; // 0xBD
	[CompilerGeneratedAttribute] // RVA: 0xCE2534 Offset: 0xCE2534 VA: 0xCE2534
	[DebuggerBrowsableAttribute] // RVA: 0xCE2534 Offset: 0xCE2534 VA: 0xCE2534
	private bool <IsUseSupportEquip>k__BackingField; // 0xBE
	[CompilerGeneratedAttribute] // RVA: 0xCE2570 Offset: 0xCE2570 VA: 0xCE2570
	[DebuggerBrowsableAttribute] // RVA: 0xCE2570 Offset: 0xCE2570 VA: 0xCE2570
	private bool <IsUse>k__BackingField; // 0xBF
	[CompilerGeneratedAttribute] // RVA: 0xCE25AC Offset: 0xCE25AC VA: 0xCE25AC
	[DebuggerBrowsableAttribute] // RVA: 0xCE25AC Offset: 0xCE25AC VA: 0xCE25AC
	private bool <IsLock>k__BackingField; // 0xC0
	[CompilerGeneratedAttribute] // RVA: 0xCE25E8 Offset: 0xCE25E8 VA: 0xCE25E8
	[DebuggerBrowsableAttribute] // RVA: 0xCE25E8 Offset: 0xCE25E8 VA: 0xCE25E8
	private bool <IsChoice>k__BackingField; // 0xC1
	[CompilerGeneratedAttribute] // RVA: 0xCE2624 Offset: 0xCE2624 VA: 0xCE2624
	[DebuggerBrowsableAttribute] // RVA: 0xCE2624 Offset: 0xCE2624 VA: 0xCE2624
	private bool <IsParty>k__BackingField; // 0xC2
	[CompilerGeneratedAttribute] // RVA: 0xCE2660 Offset: 0xCE2660 VA: 0xCE2660
	[DebuggerBrowsableAttribute] // RVA: 0xCE2660 Offset: 0xCE2660 VA: 0xCE2660
	private bool <IsEquippedCommandCodeServant>k__BackingField; // 0xC3
	[CompilerGeneratedAttribute] // RVA: 0xCE269C Offset: 0xCE269C VA: 0xCE269C
	[DebuggerBrowsableAttribute] // RVA: 0xCE269C Offset: 0xCE269C VA: 0xCE269C
	private bool <IsCommandCardOpenServant>k__BackingField; // 0xC4
	[CompilerGeneratedAttribute] // RVA: 0xCE26D8 Offset: 0xCE26D8 VA: 0xCE26D8
	[DebuggerBrowsableAttribute] // RVA: 0xCE26D8 Offset: 0xCE26D8 VA: 0xCE26D8
	private bool <IsFriendShipSvtEq>k__BackingField; // 0xC5
	[CompilerGeneratedAttribute] // RVA: 0xCE2714 Offset: 0xCE2714 VA: 0xCE2714
	[DebuggerBrowsableAttribute] // RVA: 0xCE2714 Offset: 0xCE2714 VA: 0xCE2714
	private bool <IsChocolateSvtEquip>k__BackingField; // 0xC6
	[CompilerGeneratedAttribute] // RVA: 0xCE2750 Offset: 0xCE2750 VA: 0xCE2750
	[DebuggerBrowsableAttribute] // RVA: 0xCE2750 Offset: 0xCE2750 VA: 0xCE2750
	private bool <IsMaterialTdSvt>k__BackingField; // 0xC7
	[CompilerGeneratedAttribute] // RVA: 0xCE278C Offset: 0xCE278C VA: 0xCE278C
	[DebuggerBrowsableAttribute] // RVA: 0xCE278C Offset: 0xCE278C VA: 0xCE278C
	private bool <IsNotSelection>k__BackingField; // 0xC8
	[CompilerGeneratedAttribute] // RVA: 0xCE27C8 Offset: 0xCE27C8 VA: 0xCE27C8
	[DebuggerBrowsableAttribute] // RVA: 0xCE27C8 Offset: 0xCE27C8 VA: 0xCE27C8
	private bool <IsPush>k__BackingField; // 0xC9
	private ServantOperationListViewItem.ServantAttributeKind attribute; // 0xCC
	[CompilerGeneratedAttribute] // RVA: 0xCE2804 Offset: 0xCE2804 VA: 0xCE2804
	[DebuggerBrowsableAttribute] // RVA: 0xCE2804 Offset: 0xCE2804 VA: 0xCE2804
	private bool <IsFavorite>k__BackingField; // 0xD0
	[CompilerGeneratedAttribute] // RVA: 0xCE2840 Offset: 0xCE2840 VA: 0xCE2840
	[DebuggerBrowsableAttribute] // RVA: 0xCE2840 Offset: 0xCE2840 VA: 0xCE2840
	private bool <IsCommandCodeEquiped>k__BackingField; // 0xD1
	private IconLabelInfo iconLabelInfo1; // 0xD8
	private IconLabelInfo iconLabelInfo2; // 0xE0
	private int priority; // 0xE8
	private long amountSortValue; // 0xF0
	[CompilerGeneratedAttribute] // RVA: 0xCE287C Offset: 0xCE287C VA: 0xCE287C
	[DebuggerBrowsableAttribute] // RVA: 0xCE287C Offset: 0xCE287C VA: 0xCE287C
	private bool <IsSwapLock>k__BackingField; // 0xF8
	[CompilerGeneratedAttribute] // RVA: 0xCE28B8 Offset: 0xCE28B8 VA: 0xCE28B8
	[DebuggerBrowsableAttribute] // RVA: 0xCE28B8 Offset: 0xCE28B8 VA: 0xCE28B8
	private bool <IsSwapChoice>k__BackingField; // 0xF9
	[CompilerGeneratedAttribute] // RVA: 0xCE28F4 Offset: 0xCE28F4 VA: 0xCE28F4
	[DebuggerBrowsableAttribute] // RVA: 0xCE28F4 Offset: 0xCE28F4 VA: 0xCE28F4
	private int <DragSelectNum>k__BackingField; // 0xFC
	private int[] categoryIdList; // 0x100
	protected int[] commandCodeCategoryIdList; // 0x108
	private int hpReinforceValue; // 0x110
	private int atkReinforceValue; // 0x114
	private int nowMaxHpReinforceValue; // 0x118
	private int nowMaxAtkReinforceValue; // 0x11C
	private bool isNeedAdjustIconLabelScale; // 0x120

	// Properties
	public UserServantEntity UserServantEntity { get; set; }
	public int SvtId { get; set; }
	public UserCommandCodeEntity UserCommandCodeEntity { get; set; }
	public int CommandCodeId { get; set; }
	public bool IsPartyEquip { get; set; }
	public bool IsUseSupportServant { get; set; }
	public bool IsUseSupportEquip { get; set; }
	public bool IsUse { get; set; }
	public bool IsLock { get; set; }
	public bool IsChoice { get; set; }
	public bool IsParty { get; set; }
	public bool IsEquippedCommandCodeServant { get; set; }
	public bool IsCommandCardOpenServant { get; set; }
	public bool IsFriendShipSvtEq { get; set; }
	public bool IsChocolateSvtEquip { get; set; }
	public bool IsMaterialTdSvt { get; set; }
	public bool IsNotSelection { get; set; }
	public bool IsPush { get; set; }
	public bool IsFavorite { get; set; }
	public bool IsCommandCodeEquiped { get; set; }
	public bool IsSwapLock { get; set; }
	public bool IsSwapChoice { get; set; }
	public int DragSelectNum { get; set; }
	public ServantEntity ServantEntity { get; }
	public int PartyIndex { get; }
	public long UserSvtId { get; }
	public bool IsOrganization { get; }
	public bool IsCanNotSelect { get; }
	public bool IsCanNotSelectPush { get; }
	public bool IsEventJoin { get; }
	public bool IsProtected { get; }
	public bool IsSellEnableServant { get; }
	public bool IsDispLock { get; }
	public bool IsDispChoice { get; }
	public bool IsDragSelect { get; set; }
	public bool IsHeroine { get; }
	public bool IsServantEquip { get; }
	public bool IsServant { get; }
	public long UserCommandCodeId { get; }
	public IconLabelInfo IconLabelInfo1 { get; }
	public IconLabelInfo IconLabelInfo2 { get; }
	public bool IsNeedAdjustIconLabelScale { get; }

	// Methods

	// RVA: 0x1ECE1D4 Offset: 0x1ECE1D4 VA: 0x1ECE1D4
	public void .ctor(int index, UserServantEntity userServantEntity, long[] partyUserServantIds, long[] partyUserEquipIds, bool isFavorite) { }

	// RVA: 0x1ECED14 Offset: 0x1ECED14 VA: 0x1ECED14
	public void .ctor(int index, UserCommandCodeEntity userCommandCodeEntity, bool isEquiped) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E424 Offset: 0xD3E424 VA: 0xD3E424
	// RVA: 0x1ECED0C Offset: 0x1ECED0C VA: 0x1ECED0C
	public UserServantEntity get_UserServantEntity() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E434 Offset: 0xD3E434 VA: 0xD3E434
	// RVA: 0x1ECEE84 Offset: 0x1ECEE84 VA: 0x1ECEE84
	private void set_UserServantEntity(UserServantEntity value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E444 Offset: 0xD3E444 VA: 0xD3E444
	// RVA: 0x1ECEE8C Offset: 0x1ECEE8C VA: 0x1ECEE8C
	public int get_SvtId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E454 Offset: 0xD3E454 VA: 0xD3E454
	// RVA: 0x1ECEE94 Offset: 0x1ECEE94 VA: 0x1ECEE94
	private void set_SvtId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E464 Offset: 0xD3E464 VA: 0xD3E464
	// RVA: 0x1ECEE9C Offset: 0x1ECEE9C VA: 0x1ECEE9C
	public UserCommandCodeEntity get_UserCommandCodeEntity() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E474 Offset: 0xD3E474 VA: 0xD3E474
	// RVA: 0x1ECEEA4 Offset: 0x1ECEEA4 VA: 0x1ECEEA4
	private void set_UserCommandCodeEntity(UserCommandCodeEntity value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E484 Offset: 0xD3E484 VA: 0xD3E484
	// RVA: 0x1ECEEAC Offset: 0x1ECEEAC VA: 0x1ECEEAC
	public int get_CommandCodeId() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E494 Offset: 0xD3E494 VA: 0xD3E494
	// RVA: 0x1ECEEB4 Offset: 0x1ECEEB4 VA: 0x1ECEEB4
	private void set_CommandCodeId(int value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E4A4 Offset: 0xD3E4A4 VA: 0xD3E4A4
	// RVA: 0x1ECEEBC Offset: 0x1ECEEBC VA: 0x1ECEEBC
	public bool get_IsPartyEquip() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E4B4 Offset: 0xD3E4B4 VA: 0xD3E4B4
	// RVA: 0x1ECEEC4 Offset: 0x1ECEEC4 VA: 0x1ECEEC4
	private void set_IsPartyEquip(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E4C4 Offset: 0xD3E4C4 VA: 0xD3E4C4
	// RVA: 0x1ECEED0 Offset: 0x1ECEED0 VA: 0x1ECEED0
	public bool get_IsUseSupportServant() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E4D4 Offset: 0xD3E4D4 VA: 0xD3E4D4
	// RVA: 0x1ECEED8 Offset: 0x1ECEED8 VA: 0x1ECEED8
	private void set_IsUseSupportServant(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E4E4 Offset: 0xD3E4E4 VA: 0xD3E4E4
	// RVA: 0x1ECEEE4 Offset: 0x1ECEEE4 VA: 0x1ECEEE4
	public bool get_IsUseSupportEquip() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E4F4 Offset: 0xD3E4F4 VA: 0xD3E4F4
	// RVA: 0x1ECEEEC Offset: 0x1ECEEEC VA: 0x1ECEEEC
	private void set_IsUseSupportEquip(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E504 Offset: 0xD3E504 VA: 0xD3E504
	// RVA: 0x1ECEEF8 Offset: 0x1ECEEF8 VA: 0x1ECEEF8
	public bool get_IsUse() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E514 Offset: 0xD3E514 VA: 0xD3E514
	// RVA: 0x1ECEF00 Offset: 0x1ECEF00 VA: 0x1ECEF00
	private void set_IsUse(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E524 Offset: 0xD3E524 VA: 0xD3E524
	// RVA: 0x1ECEF0C Offset: 0x1ECEF0C VA: 0x1ECEF0C
	public bool get_IsLock() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E534 Offset: 0xD3E534 VA: 0xD3E534
	// RVA: 0x1ECEF14 Offset: 0x1ECEF14 VA: 0x1ECEF14
	private void set_IsLock(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E544 Offset: 0xD3E544 VA: 0xD3E544
	// RVA: 0x1ECEF20 Offset: 0x1ECEF20 VA: 0x1ECEF20
	public bool get_IsChoice() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E554 Offset: 0xD3E554 VA: 0xD3E554
	// RVA: 0x1ECEF28 Offset: 0x1ECEF28 VA: 0x1ECEF28
	private void set_IsChoice(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E564 Offset: 0xD3E564 VA: 0xD3E564
	// RVA: 0x1ECEF34 Offset: 0x1ECEF34 VA: 0x1ECEF34
	public bool get_IsParty() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E574 Offset: 0xD3E574 VA: 0xD3E574
	// RVA: 0x1ECEF3C Offset: 0x1ECEF3C VA: 0x1ECEF3C
	private void set_IsParty(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E584 Offset: 0xD3E584 VA: 0xD3E584
	// RVA: 0x1ECEF48 Offset: 0x1ECEF48 VA: 0x1ECEF48
	public bool get_IsEquippedCommandCodeServant() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E594 Offset: 0xD3E594 VA: 0xD3E594
	// RVA: 0x1ECEF50 Offset: 0x1ECEF50 VA: 0x1ECEF50
	private void set_IsEquippedCommandCodeServant(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E5A4 Offset: 0xD3E5A4 VA: 0xD3E5A4
	// RVA: 0x1ECEF5C Offset: 0x1ECEF5C VA: 0x1ECEF5C
	public bool get_IsCommandCardOpenServant() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E5B4 Offset: 0xD3E5B4 VA: 0xD3E5B4
	// RVA: 0x1ECEF64 Offset: 0x1ECEF64 VA: 0x1ECEF64
	private void set_IsCommandCardOpenServant(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E5C4 Offset: 0xD3E5C4 VA: 0xD3E5C4
	// RVA: 0x1ECEF70 Offset: 0x1ECEF70 VA: 0x1ECEF70
	public bool get_IsFriendShipSvtEq() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E5D4 Offset: 0xD3E5D4 VA: 0xD3E5D4
	// RVA: 0x1ECEF78 Offset: 0x1ECEF78 VA: 0x1ECEF78
	private void set_IsFriendShipSvtEq(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E5E4 Offset: 0xD3E5E4 VA: 0xD3E5E4
	// RVA: 0x1ECEF84 Offset: 0x1ECEF84 VA: 0x1ECEF84
	public bool get_IsChocolateSvtEquip() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E5F4 Offset: 0xD3E5F4 VA: 0xD3E5F4
	// RVA: 0x1ECEF8C Offset: 0x1ECEF8C VA: 0x1ECEF8C
	private void set_IsChocolateSvtEquip(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E604 Offset: 0xD3E604 VA: 0xD3E604
	// RVA: 0x1ECEF98 Offset: 0x1ECEF98 VA: 0x1ECEF98
	public bool get_IsMaterialTdSvt() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E614 Offset: 0xD3E614 VA: 0xD3E614
	// RVA: 0x1ECEFA0 Offset: 0x1ECEFA0 VA: 0x1ECEFA0
	private void set_IsMaterialTdSvt(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E624 Offset: 0xD3E624 VA: 0xD3E624
	// RVA: 0x1ECEFAC Offset: 0x1ECEFAC VA: 0x1ECEFAC
	public bool get_IsNotSelection() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E634 Offset: 0xD3E634 VA: 0xD3E634
	// RVA: 0x1ECEFB4 Offset: 0x1ECEFB4 VA: 0x1ECEFB4
	private void set_IsNotSelection(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E644 Offset: 0xD3E644 VA: 0xD3E644
	// RVA: 0x1ECEFC0 Offset: 0x1ECEFC0 VA: 0x1ECEFC0
	public bool get_IsPush() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E654 Offset: 0xD3E654 VA: 0xD3E654
	// RVA: 0x1ECEFC8 Offset: 0x1ECEFC8 VA: 0x1ECEFC8
	public void set_IsPush(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E664 Offset: 0xD3E664 VA: 0xD3E664
	// RVA: 0x1ECEFD4 Offset: 0x1ECEFD4 VA: 0x1ECEFD4
	public bool get_IsFavorite() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E674 Offset: 0xD3E674 VA: 0xD3E674
	// RVA: 0x1ECED00 Offset: 0x1ECED00 VA: 0x1ECED00
	private void set_IsFavorite(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E684 Offset: 0xD3E684 VA: 0xD3E684
	// RVA: 0x1ECEFDC Offset: 0x1ECEFDC VA: 0x1ECEFDC
	public bool get_IsCommandCodeEquiped() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E694 Offset: 0xD3E694 VA: 0xD3E694
	// RVA: 0x1ECEE78 Offset: 0x1ECEE78 VA: 0x1ECEE78
	private void set_IsCommandCodeEquiped(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E6A4 Offset: 0xD3E6A4 VA: 0xD3E6A4
	// RVA: 0x1ECEFE4 Offset: 0x1ECEFE4 VA: 0x1ECEFE4
	public bool get_IsSwapLock() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E6B4 Offset: 0xD3E6B4 VA: 0xD3E6B4
	// RVA: 0x1ECEFEC Offset: 0x1ECEFEC VA: 0x1ECEFEC
	private void set_IsSwapLock(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E6C4 Offset: 0xD3E6C4 VA: 0xD3E6C4
	// RVA: 0x1ECEFF8 Offset: 0x1ECEFF8 VA: 0x1ECEFF8
	public bool get_IsSwapChoice() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E6D4 Offset: 0xD3E6D4 VA: 0xD3E6D4
	// RVA: 0x1ECF000 Offset: 0x1ECF000 VA: 0x1ECF000
	private void set_IsSwapChoice(bool value) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E6E4 Offset: 0xD3E6E4 VA: 0xD3E6E4
	// RVA: 0x1ECF00C Offset: 0x1ECF00C VA: 0x1ECF00C
	public int get_DragSelectNum() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3E6F4 Offset: 0xD3E6F4 VA: 0xD3E6F4
	// RVA: 0x1ECF014 Offset: 0x1ECF014 VA: 0x1ECF014
	public void set_DragSelectNum(int value) { }

	// RVA: 0x1ECE4B0 Offset: 0x1ECE4B0 VA: 0x1ECE4B0
	private void Init(int index) { }

	// RVA: 0x1ECE878 Offset: 0x1ECE878 VA: 0x1ECE878
	private void SetData(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECF7C4 Offset: 0x1ECF7C4 VA: 0x1ECF7C4
	public void ModifyItem(bool isFavorite) { }

	// RVA: 0x1ECF800 Offset: 0x1ECF800 VA: 0x1ECF800
	public void ModifyLockItem() { }

	// RVA: 0x1ECF84C Offset: 0x1ECF84C VA: 0x1ECF84C
	public void ModifyChoiceItem() { }

	// RVA: 0x1ECF898 Offset: 0x1ECF898 VA: 0x1ECF898
	public void ModifyPushItem() { }

	// RVA: 0x1ECF968 Offset: 0x1ECF968 VA: 0x1ECF968 Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x1ECFC4C Offset: 0x1ECFC4C VA: 0x1ECFC4C
	private bool IsMatchServantFilter(ListViewSort sort) { }

	// RVA: 0x1ECFF8C Offset: 0x1ECFF8C VA: 0x1ECFF8C
	private bool IsMatchServantEquipFilter(ListViewSort sort) { }

	// RVA: 0x1ED0148 Offset: 0x1ED0148 VA: 0x1ED0148
	private bool IsMatchCommandCodeFilter(ListViewSort sort) { }

	// RVA: 0x1ECF9C0 Offset: 0x1ECF9C0 VA: 0x1ECF9C0
	private void SetIconInfoLabel(ListViewSort sort) { }

	// RVA: 0x1ED0304 Offset: 0x1ED0304 VA: 0x1ED0304
	private bool GetIconLabelInfoData1(ListViewSort sort, out int iconKind, out int dataValue, out int adjustDataValue, out long time) { }

	// RVA: 0x1ED05B8 Offset: 0x1ED05B8 VA: 0x1ED05B8
	private bool GetIconLabelInfoData2(ListViewSort sort, out int iconKind, out int dataValue, out int adjustDataValue) { }

	// RVA: 0x1ED0698 Offset: 0x1ED0698 VA: 0x1ED0698
	private long GetSortValue0(ListViewSort sort, bool isDispChoice, out long sortValue0B) { }

	// RVA: 0x1ED085C Offset: 0x1ED085C VA: 0x1ED085C
	private long GetSortValue1(ListViewSort sort, int dataValue) { }

	// RVA: 0x1ED0BAC Offset: 0x1ED0BAC VA: 0x1ED0BAC
	private bool GetIsDispInfo(ListViewSort sort) { }

	// RVA: 0x1ED0E64 Offset: 0x1ED0E64 VA: 0x1ED0E64 Slot: 5
	public override bool IsMatchFilter(ListViewSort sort) { }

	// RVA: 0x1ECE508 Offset: 0x1ECE508 VA: 0x1ECE508
	private void SetServantData(UserServantEntity userServantEntity) { }

	// RVA: 0x1ECE738 Offset: 0x1ECE738 VA: 0x1ECE738
	private void SetCommandCodeData(UserCommandCodeEntity userCommandCodeEntity) { }

	// RVA: 0x1ECF20C Offset: 0x1ECF20C VA: 0x1ECF20C
	private ServantOperationListViewItem.ServantAttributeKind GetAttribute(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECF088 Offset: 0x1ECF088 VA: 0x1ECF088
	private int GetClassId(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECF0C4 Offset: 0x1ECF0C4 VA: 0x1ECF0C4
	private int GetRarity(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECF280 Offset: 0x1ECF280 VA: 0x1ECF280
	private int GetFriendship(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECE97C Offset: 0x1ECE97C VA: 0x1ECE97C
	private void SetServantUses(ServantOperationListViewItem.Type type, long[] partyUserServantList, long[] partyUserEquipList) { }

	// RVA: 0x1ED0EEC Offset: 0x1ED0EEC VA: 0x1ED0EEC
	private int GetPartyIndex(long userServantId, long[] ids, bool isEquip) { }

	// RVA: 0x1ECF40C Offset: 0x1ECF40C VA: 0x1ECF40C
	private bool GetIsEquippedCommandCodeServant(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECF5E8 Offset: 0x1ECF5E8 VA: 0x1ECF5E8
	private bool GetIsCommandCardOpenServant(ServantOperationListViewItem.Type type) { }

	// RVA: 0x1ECF01C Offset: 0x1ECF01C VA: 0x1ECF01C
	private void ClearIconLabelInfo(IconLabelInfo iconLabelInfo) { }

	// RVA: 0x1ED0F98 Offset: 0x1ED0F98 VA: 0x1ED0F98
	public void setUserServantEntity(UserServantEntity entity) { }

	// RVA: 0x1ED0FA0 Offset: 0x1ED0FA0 VA: 0x1ED0FA0
	public void setUserCommandCodeEntity(UserCommandCodeEntity entity) { }

	// RVA: 0x1ED0FA8 Offset: 0x1ED0FA8 VA: 0x1ED0FA8
	public ServantEntity get_ServantEntity() { }

	// RVA: 0x1ED0FB0 Offset: 0x1ED0FB0 VA: 0x1ED0FB0
	public int get_PartyIndex() { }

	// RVA: 0x1ED0FBC Offset: 0x1ED0FBC VA: 0x1ED0FBC
	public long get_UserSvtId() { }

	// RVA: 0x1ED1058 Offset: 0x1ED1058 VA: 0x1ED1058
	public bool get_IsOrganization() { }

	// RVA: 0x1ED1070 Offset: 0x1ED1070 VA: 0x1ED1070
	public bool get_IsCanNotSelect() { }

	// RVA: 0x1ED10D4 Offset: 0x1ED10D4 VA: 0x1ED10D4
	public bool get_IsCanNotSelectPush() { }

	// RVA: 0x1ED1180 Offset: 0x1ED1180 VA: 0x1ED1180
	public bool get_IsEventJoin() { }

	// RVA: 0x1ED0C30 Offset: 0x1ED0C30 VA: 0x1ED0C30
	public bool get_IsProtected() { }

	// RVA: 0x1ED1194 Offset: 0x1ED1194 VA: 0x1ED1194
	public bool get_IsSellEnableServant() { }

	// RVA: 0x1ED11A4 Offset: 0x1ED11A4 VA: 0x1ED11A4
	public bool SwapLock() { }

	// RVA: 0x1ED0C10 Offset: 0x1ED0C10 VA: 0x1ED0C10
	public bool get_IsDispLock() { }

	// RVA: 0x1ED11C0 Offset: 0x1ED11C0 VA: 0x1ED11C0
	public bool SwapChoice() { }

	// RVA: 0x1ECFF6C Offset: 0x1ECFF6C VA: 0x1ECFF6C
	public bool get_IsDispChoice() { }

	// RVA: 0x1ED11DC Offset: 0x1ED11DC VA: 0x1ED11DC
	public bool get_IsDragSelect() { }

	// RVA: 0x1ED11EC Offset: 0x1ED11EC VA: 0x1ED11EC
	public void set_IsDragSelect(bool value) { }

	// RVA: 0x1ED121C Offset: 0x1ED121C VA: 0x1ED121C
	public bool get_IsHeroine() { }

	// RVA: 0x1ED1230 Offset: 0x1ED1230 VA: 0x1ED1230
	public bool get_IsServantEquip() { }

	// RVA: 0x1ED1260 Offset: 0x1ED1260 VA: 0x1ED1260
	public bool get_IsServant() { }

	// RVA: 0x1ED1274 Offset: 0x1ED1274 VA: 0x1ED1274
	public long get_UserCommandCodeId() { }

	// RVA: 0x1ED1310 Offset: 0x1ED1310 VA: 0x1ED1310
	public IconLabelInfo get_IconLabelInfo1() { }

	// RVA: 0x1ED1318 Offset: 0x1ED1318 VA: 0x1ED1318
	public IconLabelInfo get_IconLabelInfo2() { }

	// RVA: 0x1ED1320 Offset: 0x1ED1320 VA: 0x1ED1320
	public bool get_IsNeedAdjustIconLabelScale() { }
}

// Namespace: 
private enum ServantOperationListViewItem.Type // TypeDefIndex: 10543
{
	// Fields
	public int value__; // 0x0
	public const ServantOperationListViewItem.Type NONE = 0;
	public const ServantOperationListViewItem.Type SERVANT = 1;
	public const ServantOperationListViewItem.Type COMMAND_CODE = 2;
}

// Namespace: 
private enum ServantOperationListViewItem.ServantAttributeKind // TypeDefIndex: 10544
{
	// Fields
	public int value__; // 0x0
	public const ServantOperationListViewItem.ServantAttributeKind None = 0;
	public const ServantOperationListViewItem.ServantAttributeKind Heroine = 1;
	public const ServantOperationListViewItem.ServantAttributeKind Limited = 2;
}

// Namespace: 
public class ServantOperationListViewItemDraw : BaseMonoBehaviour // TypeDefIndex: 10545
{
	// Fields
	[SerializeField] // RVA: 0xCE2930 Offset: 0xCE2930 VA: 0xCE2930
	private UICommonButton baseButton; // 0x18
	[SerializeField] // RVA: 0xCE2940 Offset: 0xCE2940 VA: 0xCE2940
	private ServantFaceIconComponent servantFaceIcon; // 0x20
	[SerializeField] // RVA: 0xCE2950 Offset: 0xCE2950 VA: 0xCE2950
	private FlashingIconComponent partyIcon; // 0x28
	[SerializeField] // RVA: 0xCE2960 Offset: 0xCE2960 VA: 0xCE2960
	private UISprite useSprite; // 0x30
	[SerializeField] // RVA: 0xCE2970 Offset: 0xCE2970 VA: 0xCE2970
	private UISprite lockSprite; // 0x38
	[SerializeField] // RVA: 0xCE2980 Offset: 0xCE2980 VA: 0xCE2980
	private UISprite choiceSprite; // 0x40
	[SerializeField] // RVA: 0xCE2990 Offset: 0xCE2990 VA: 0xCE2990
	private UISprite maskSprite; // 0x48
	[SerializeField] // RVA: 0xCE29A0 Offset: 0xCE29A0 VA: 0xCE29A0
	private UILabel warningLabel; // 0x50
	[SerializeField] // RVA: 0xCE29B0 Offset: 0xCE29B0 VA: 0xCE29B0
	private DragSelectComponent dragSelect; // 0x58
	[SerializeField] // RVA: 0xCE29C0 Offset: 0xCE29C0 VA: 0xCE29C0
	private UISprite friendShipSprite; // 0x60
	[SerializeField] // RVA: 0xCE29D0 Offset: 0xCE29D0 VA: 0xCE29D0
	private UISprite chocolateSprite; // 0x68
	[SerializeField] // RVA: 0xCE29E0 Offset: 0xCE29E0 VA: 0xCE29E0
	private UISprite pushSprite; // 0x70
	[SerializeField] // RVA: 0xCE29F0 Offset: 0xCE29F0 VA: 0xCE29F0
	private UISprite materialTdSprite; // 0x78

	// Methods

	// RVA: 0x1ED1328 Offset: 0x1ED1328 VA: 0x1ED1328
	public void .ctor() { }

	// RVA: 0x1ED1330 Offset: 0x1ED1330 VA: 0x1ED1330
	public void SetItem(ServantOperationListViewItem item, ServantOperationListViewItemDraw.DispMode mode, bool isSelectEnable, ServantOperationListViewManager.ModeKind modeKind) { }

	// RVA: 0x1ED1C98 Offset: 0x1ED1C98 VA: 0x1ED1C98
	private void SetLabelText(UILabel label, string text) { }

	// RVA: 0x1ED1630 Offset: 0x1ED1630 VA: 0x1ED1630
	private void SetSpriteActive(UISprite sprite, bool isActive) { }

	// RVA: 0x1ED1524 Offset: 0x1ED1524 VA: 0x1ED1524
	private void SetServantFaceIcon(ServantOperationListViewItem item, bool isServant, bool isCommandCode) { }

	// RVA: 0x1ED19DC Offset: 0x1ED19DC VA: 0x1ED19DC
	private void SetWarningText(ServantOperationListViewItem item, ServantOperationListViewManager.ModeKind modeKind, bool isServant, bool isCommandCode) { }

	// RVA: 0x1ED1D40 Offset: 0x1ED1D40 VA: 0x1ED1D40
	private string GetStatusText(ServantOperationListViewItem item, bool isServant, bool isCommandCode) { }

	// RVA: 0x1ED2054 Offset: 0x1ED2054 VA: 0x1ED2054
	public void SetInput(ServantOperationListViewItem item, bool isSelectEnable) { }

	// RVA: 0x1ED16F0 Offset: 0x1ED16F0 VA: 0x1ED16F0
	private void SetDisp(ServantOperationListViewItem item, bool isSelectEnable) { }

	// RVA: 0x1ED214C Offset: 0x1ED214C VA: 0x1ED214C
	public static ServantOperationListViewItemDraw.DispMode GetDispMode(ServantOperationListViewObject.InitMode initMode) { }
}

// Namespace: 
public enum ServantOperationListViewItemDraw.DispMode // TypeDefIndex: 10546
{
	// Fields
	public int value__; // 0x0
	public const ServantOperationListViewItemDraw.DispMode INVISIBLE = 0;
	public const ServantOperationListViewItemDraw.DispMode INVALID = 1;
	public const ServantOperationListViewItemDraw.DispMode VALID = 2;
	public const ServantOperationListViewItemDraw.DispMode INPUT = 3;
}

// Namespace: 
public class ServantOperationListViewManager : ListViewManager // TypeDefIndex: 10547
{
	// Fields
	private static readonly int FILTER2_MAX_KIND_NUM; // 0x0
	[SerializeField] // RVA: 0xCE2A00 Offset: 0xCE2A00 VA: 0xCE2A00
	private ServantOperationManager parentManager; // 0x138
	[SerializeField] // RVA: 0xCE2A10 Offset: 0xCE2A10 VA: 0xCE2A10
	private UILabel selectDoneLabel; // 0x140
	[SerializeField] // RVA: 0xCE2A20 Offset: 0xCE2A20 VA: 0xCE2A20
	private UISprite sortExplanationSprite; // 0x148
	[SerializeField] // RVA: 0xCE2A30 Offset: 0xCE2A30 VA: 0xCE2A30
	private UISprite filterSprite; // 0x150
	[SerializeField] // RVA: 0xCE2A40 Offset: 0xCE2A40 VA: 0xCE2A40
	private UISprite statusTabSprite; // 0x158
	[SerializeField] // RVA: 0xCE2A50 Offset: 0xCE2A50 VA: 0xCE2A50
	private UISprite lockTabSprite; // 0x160
	[SerializeField] // RVA: 0xCE2A60 Offset: 0xCE2A60 VA: 0xCE2A60
	private UISprite choiceTabSprite; // 0x168
	[SerializeField] // RVA: 0xCE2A70 Offset: 0xCE2A70 VA: 0xCE2A70
	private UISprite pushTabSprite; // 0x170
	[SerializeField] // RVA: 0xCE2A80 Offset: 0xCE2A80 VA: 0xCE2A80
	private UICommonButton statusTabButton; // 0x178
	[SerializeField] // RVA: 0xCE2A90 Offset: 0xCE2A90 VA: 0xCE2A90
	private UICommonButton lockTabButton; // 0x180
	[SerializeField] // RVA: 0xCE2AA0 Offset: 0xCE2AA0 VA: 0xCE2AA0
	private UICommonButton choiceTabButton; // 0x188
	[SerializeField] // RVA: 0xCE2AB0 Offset: 0xCE2AB0 VA: 0xCE2AB0
	private UICommonButton pushTabButton; // 0x190
	[SerializeField] // RVA: 0xCE2AC0 Offset: 0xCE2AC0 VA: 0xCE2AC0
	private UILabel statusLabel; // 0x198
	[SerializeField] // RVA: 0xCE2AD0 Offset: 0xCE2AD0 VA: 0xCE2AD0
	private ListViewItemSeed normalSizeSeed; // 0x1A0
	[SerializeField] // RVA: 0xCE2AE0 Offset: 0xCE2AE0 VA: 0xCE2AE0
	private ListViewItemSeed smallSizeSeed; // 0x1A8
	[SerializeField] // RVA: 0xCE2AF0 Offset: 0xCE2AF0 VA: 0xCE2AF0
	private ListViewItemSeed extremelySmallSizeSeed; // 0x1B0
	[SerializeField] // RVA: 0xCE2B00 Offset: 0xCE2B00 VA: 0xCE2B00
	private UICommonButton scaleChangeButton; // 0x1B8
	[SerializeField] // RVA: 0xCE2B10 Offset: 0xCE2B10 VA: 0xCE2B10
	private UISprite scaleChangeButtonSprite; // 0x1C0
	private const int MinimumKeep = 1;
	public static readonly string SORT_SAVE_KEY; // 0x8
	private static ListViewSort servantSortInfo; // 0x10
	private static ListViewSort servantEquipSortInfo; // 0x18
	private static ListViewSort commandCodeSortInfo; // 0x20
	private ServantOperationListViewManager.InitMode initMode; // 0x1C8
	private ServantOperationListViewManager.ModeKind modeKind; // 0x1CC
	private Action<ServantOperationListViewItem> onSelectServant; // 0x1D0
	private int callbackCount; // 0x1D8
	private ServantOperationListViewManager.Kind kind; // 0x1DC
	private int sellEnableRestCnt; // 0x1E0
	private int selectSum; // 0x1E4
	private int dragSelectSum; // 0x1E8
	private int dragServantSelectSum; // 0x1EC
	private int dragStartIndex; // 0x1F0
	private int dragEndIndex; // 0x1F4
	private bool isDragSelect; // 0x1F8
	private bool isInConfirm; // 0x1F9
	private Action<bool> onRequestEnd; // 0x200
	private ListViewSort.ScaleType scaleType; // 0x208
	[CompilerGeneratedAttribute] // RVA: 0xCE2B20 Offset: 0xCE2B20 VA: 0xCE2B20
	private static Action <>f__am$cache0; // 0x28

	// Properties
	public List<ServantOperationListViewObject> ObjectList { get; }
	public List<ServantOperationListViewObject> ClippingObjectList { get; }

	// Methods

	// RVA: 0x1ED2170 Offset: 0x1ED2170 VA: 0x1ED2170
	public void .ctor() { }

	// RVA: 0x1ED2178 Offset: 0x1ED2178 VA: 0x1ED2178
	public static void DeleteContinueData() { }

	// RVA: 0x1ED2218 Offset: 0x1ED2218 VA: 0x1ED2218
	public static void InitLoad() { }

	// RVA: 0x1ED22B8 Offset: 0x1ED22B8 VA: 0x1ED22B8
	public List<ServantOperationListViewObject> get_ObjectList() { }

	// RVA: 0x1ED2444 Offset: 0x1ED2444 VA: 0x1ED2444
	public List<ServantOperationListViewObject> get_ClippingObjectList() { }

	// RVA: 0x1ED2690 Offset: 0x1ED2690 VA: 0x1ED2690
	public void CreateList(ServantOperationListViewManager.Kind kind, ServantOperationListViewManager.ModeKind modeKind) { }

	// RVA: 0x1ED2828 Offset: 0x1ED2828 VA: 0x1ED2828
	private void SetListViewSort(ServantOperationListViewManager.Kind kind) { }

	// RVA: 0x1ED32DC Offset: 0x1ED32DC VA: 0x1ED32DC
	private ListViewSort GetSortInfo(ServantOperationListViewManager.Kind kind) { }

	// RVA: 0x1ED33C8 Offset: 0x1ED33C8 VA: 0x1ED33C8
	private ListViewSort.ListKind GetSortKind(ServantOperationListViewManager.Kind kind) { }

	// RVA: 0x1ED293C Offset: 0x1ED293C VA: 0x1ED293C
	private UserServantEntity[] GetUserServantEntities(ServantOperationListViewManager.Kind kind) { }

	// RVA: 0x1ED2A34 Offset: 0x1ED2A34 VA: 0x1ED2A34
	private UserCommandCodeEntity[] GetUserCommandCodeEntities(ServantOperationListViewManager.Kind kind) { }

	// RVA: 0x1ED2EE4 Offset: 0x1ED2EE4 VA: 0x1ED2EE4
	private string GetEmptyMessageCode(ServantOperationListViewManager.Kind kind, bool isNotEmpty) { }

	// RVA: 0x1ED2AD4 Offset: 0x1ED2AD4 VA: 0x1ED2AD4
	private int SetSellEnableRestCount(UserServantEntity[] userServantEntities, UserGameEntity userGameEntity) { }

	// RVA: 0x1ED2CF8 Offset: 0x1ED2CF8 VA: 0x1ED2CF8
	private int SetSellEnableRestCount(UserCommandCodeEntity[] userCommandCodeEntities, UserGameEntity userGameEntity) { }

	// RVA: 0x1ED2F84 Offset: 0x1ED2F84 VA: 0x1ED2F84
	public void SetStatusKind(ServantOperationListViewManager.ModeKind modeKind) { }

	// RVA: 0x1ED3480 Offset: 0x1ED3480 VA: 0x1ED3480
	private void SetTabButton(UICommonButton tabButton, UISprite tabSprite, ServantOperationListViewManager.ModeKind selectedModeKind, ServantOperationListViewManager.ModeKind tabKind) { }

	// RVA: 0x1ED36A4 Offset: 0x1ED36A4 VA: 0x1ED36A4
	private string GetTabSpriteName(ServantOperationListViewManager.ModeKind kind, bool isSelected) { }

	// RVA: 0x1ED358C Offset: 0x1ED358C VA: 0x1ED358C
	private string GetStatusText(ServantOperationListViewManager.ModeKind modeKind) { }

	// RVA: 0x1ED28A8 Offset: 0x1ED28A8 VA: 0x1ED28A8
	public void SetScaleKind(ListViewSort.ScaleType scaleKind) { }

	// RVA: 0x1ED3794 Offset: 0x1ED3794 VA: 0x1ED3794
	private void RefrashListDisp() { }

	// RVA: 0x1ED3AB0 Offset: 0x1ED3AB0 VA: 0x1ED3AB0
	public void SumItems(out int qp, out int mana, out int rarePri) { }

	// RVA: 0x1ED3CD0 Offset: 0x1ED3CD0 VA: 0x1ED3CD0
	public void DestroyList() { }

	// RVA: 0x1ED3D0C Offset: 0x1ED3D0C VA: 0x1ED3D0C
	public void ModifyItem(long selectedId) { }

	// RVA: 0x1ED3D5C Offset: 0x1ED3D5C VA: 0x1ED3D5C
	private void ModifyCommandCodes(ServantOperationListViewManager.Kind kind, long selectedId) { }

	// RVA: 0x1ED4070 Offset: 0x1ED4070 VA: 0x1ED4070
	private void ModifyServants(ServantOperationListViewManager.Kind kind, long selectedId) { }

	// RVA: 0x1ED43C8 Offset: 0x1ED43C8 VA: 0x1ED43C8
	public void ModifyLockItem(long usrSvtId, bool isInit, bool isIconSizeChange = False) { }

	// RVA: 0x1ED4724 Offset: 0x1ED4724 VA: 0x1ED4724
	public void ModifyLockItem(ServantOperationListViewItem item, long usrSvtId, bool isInit, bool isIconSizeChange = False) { }

	// RVA: 0x1ED4980 Offset: 0x1ED4980 VA: 0x1ED4980
	public void ModifyLockItemComandCode(long usrCmdId, bool isInit, bool isIconSizeChange = False) { }

	// RVA: 0x1ED4CC4 Offset: 0x1ED4CC4 VA: 0x1ED4CC4
	private void ModifyList(bool isIconSizeChange = False) { }

	// RVA: 0x1ED4D18 Offset: 0x1ED4D18 VA: 0x1ED4D18
	private void ModifyLockedServants(UserServantEntity[] userServantEntities, bool isIconSizeChange) { }

	// RVA: 0x1ED4F68 Offset: 0x1ED4F68 VA: 0x1ED4F68
	private void ModifyLockedCommandCodes(UserCommandCodeEntity[] userCommandCodeEntities, bool isIconSizeChange) { }

	// RVA: 0x1ED51B4 Offset: 0x1ED51B4 VA: 0x1ED51B4
	private void ModifyPushedServant() { }

	// RVA: 0x1ED5370 Offset: 0x1ED5370 VA: 0x1ED5370 Slot: 4
	protected override void SetObjectItem(ListViewObject obj, ListViewItem item) { }

