	// RVA: 0x19FDA7C Offset: 0x19FDA7C VA: 0x19FDA7C
	public void CheckIsSelectBaseSvt(UserServantEntity selectBase) { }

	// RVA: 0x19FDB90 Offset: 0x19FDB90 VA: 0x19FDB90
	public void SetBaseSvtCardImg(UserServantEntity userSvtData) { }

	// RVA: 0x19FDD48 Offset: 0x19FDD48 VA: 0x19FDD48
	public void ShowCostumeList() { }

	// RVA: 0x19FDDE4 Offset: 0x19FDDE4 VA: 0x19FDDE4
	public void ShowCostumeCombineInfo() { }

	// RVA: 0x19FD368 Offset: 0x19FD368 VA: 0x19FD368
	private void SetHaveQpInfo() { }

	// RVA: 0x19FE06C Offset: 0x19FE06C VA: 0x19FE06C
	private void SetSvtCostumeCombineData() { }

	// RVA: 0x19FF9C0 Offset: 0x19FF9C0 VA: 0x19FF9C0
	public void DestroyCostumeList() { }

	// RVA: 0x19FD7FC Offset: 0x19FD7FC VA: 0x19FD7FC
	public void ResetInit() { }

	// RVA: 0x19FDB84 Offset: 0x19FDB84 VA: 0x19FDB84
	public void InitBaseCostume() { }

	// RVA: 0x19FD2C8 Offset: 0x19FD2C8 VA: 0x19FD2C8
	private void ClearItemList() { }

	// RVA: 0x19FF9F0 Offset: 0x19FF9F0 VA: 0x19FF9F0
	public UserServantEntity getBaseSelectedSvt() { }

	// RVA: 0x19FFBE4 Offset: 0x19FFBE4 VA: 0x19FFBE4
	public ServantCostumeEntity getBaseSvtCostume() { }

	// RVA: 0x19FFBEC Offset: 0x19FFBEC VA: 0x19FFBEC
	public bool getExeBtnState() { }

	// RVA: 0x19FD710 Offset: 0x19FD710 VA: 0x19FD710
	private void SetExeBtnState() { }

	// RVA: 0x19FFBF4 Offset: 0x19FFBF4 VA: 0x19FFBF4
	public void SetStateInfoMsg(CombineRootComponent.StateType state) { }

	// RVA: 0x19FFEA0 Offset: 0x19FFEA0 VA: 0x19FFEA0
	public void OnClickExeCostumeCombine() { }

	// RVA: 0x19FD3FC Offset: 0x19FD3FC VA: 0x19FD3FC
	private void RefreshAlreadyGetInfo() { }

	// RVA: 0x19FEB00 Offset: 0x19FEB00 VA: 0x19FEB00
	public void RefreshEventCostumeInfo() { }

	// RVA: 0x1A00538 Offset: 0x1A00538 VA: 0x1A00538
	public void ResetEventCombineCostume() { }

	// RVA: 0x1A00544 Offset: 0x1A00544 VA: 0x1A00544 Slot: 4
	public override void OnClickBase() { }

	// RVA: 0x1A005C8 Offset: 0x1A005C8 VA: 0x1A005C8
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCF9B0 Offset: 0xCCF9B0 VA: 0xCCF9B0
	// RVA: 0x1A00648 Offset: 0x1A00648 VA: 0x1A00648
	private void <OnClickExeCostumeCombine>m__0(bool decide) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCF9C0 Offset: 0xCCF9C0 VA: 0xCCF9C0
	// RVA: 0x1A00738 Offset: 0x1A00738 VA: 0x1A00738
	private void <OnClickExeCostumeCombine>m__1() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCF9D0 Offset: 0xCCF9D0 VA: 0xCCF9D0
	// RVA: 0x1A00838 Offset: 0x1A00838 VA: 0x1A00838
	private void <OnClickExeCostumeCombine>m__2() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCF9E0 Offset: 0xCCF9E0 VA: 0xCCF9E0
	// RVA: 0x1A00874 Offset: 0x1A00874 VA: 0x1A00874
	private void <OnClickExeCostumeCombine>m__3() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCF9F0 Offset: 0xCCF9F0 VA: 0xCCF9F0
	// RVA: 0x1A008B0 Offset: 0x1A008B0 VA: 0x1A008B0
	private void <OnClickExeCostumeCombine>m__4() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC44814 Offset: 0xC44814 VA: 0xC44814
private sealed class ServantCostumeControl.<OnClickExeCostumeCombine>c__AnonStorey0 // TypeDefIndex: 9643
{
	// Fields
	internal CombineCostumeEntity combineCostumeEntity; // 0x10
	internal ServantCostumeControl $this; // 0x18

	// Methods

	// RVA: 0x1A004B4 Offset: 0x1A004B4 VA: 0x1A004B4
	public void .ctor() { }

	// RVA: 0x1A00978 Offset: 0x1A00978 VA: 0x1A00978
	internal void <>m__0(bool useEventItem) { }
}

// Namespace: 
private sealed class ServantCostumeControl.<OnClickExeCostumeCombine>c__AnonStorey0.<OnClickExeCostumeCombine>c__AnonStorey1 // TypeDefIndex: 9644
{
	// Fields
	internal bool useEventItem; // 0x10
	internal ServantCostumeControl.<OnClickExeCostumeCombine>c__AnonStorey0 <>f__ref$0; // 0x18

	// Methods

	// RVA: 0x1A00B48 Offset: 0x1A00B48 VA: 0x1A00B48
	public void .ctor() { }

	// RVA: 0x1A00B50 Offset: 0x1A00B50 VA: 0x1A00B50
	internal void <>m__0() { }
}

// Namespace: 
public class ServantCostumeEventBalloon : MonoBehaviour // TypeDefIndex: 9645
{
	// Fields
	[SerializeField] // RVA: 0xC6B334 Offset: 0xC6B334 VA: 0xC6B334
	private UISprite itemSprite; // 0x18

	// Methods

	// RVA: 0x1A01010 Offset: 0x1A01010 VA: 0x1A01010
	public void .ctor() { }

	// RVA: 0x1A004BC Offset: 0x1A004BC VA: 0x1A004BC
	public void Set(int itemId) { }
}

// Namespace: 
public class CombineExpUpClassInfo : MonoBehaviour // TypeDefIndex: 9646
{
	// Fields
	private static readonly int NUM4_CELL_WIDTH; // 0x0
	private static readonly int NUM5_CELL_WIDTH; // 0x4
	private static readonly float NUM4_SCALE; // 0x8
	private static readonly float NUM5_SCALE; // 0xC
	private static readonly float NUM4_GRID_POS_X; // 0x10
	private static readonly float NUM5_GRID_POS_X; // 0x14
	[SerializeField] // RVA: 0xC6B344 Offset: 0xC6B344 VA: 0xC6B344
	private ServantFaceIconComponent[] expUpIconList; // 0x18
	[SerializeField] // RVA: 0xC6B354 Offset: 0xC6B354 VA: 0xC6B354
	private UILabel[] numLabelList; // 0x20
	[SerializeField] // RVA: 0xC6B364 Offset: 0xC6B364 VA: 0xC6B364
	private UISprite[] maskSpriteList; // 0x28
	[SerializeField] // RVA: 0xC6B374 Offset: 0xC6B374 VA: 0xC6B374
	private ServantClassIconComponent classIconInfo; // 0x30
	[SerializeField] // RVA: 0xC6B384 Offset: 0xC6B384 VA: 0xC6B384
	private UIGrid faceIconList; // 0x38
	[SerializeField] // RVA: 0xC6B394 Offset: 0xC6B394 VA: 0xC6B394
	private UISprite dmyFrame; // 0x40
	private int dispMinRarity; // 0x48
	private int dispMax; // 0x4C

	// Methods

	// RVA: 0x1314FA4 Offset: 0x1314FA4 VA: 0x1314FA4
	public void .ctor() { }

	// RVA: 0x1314FAC Offset: 0x1314FAC VA: 0x1314FAC
	public void Set(int classId, int[] svtIdList, int[] numList, int minRarity, int max) { }

	// RVA: 0x1315844 Offset: 0x1315844 VA: 0x1315844
	public void Set(int[] numList) { }

	// RVA: 0x13159B4 Offset: 0x13159B4 VA: 0x13159B4
	private static void .cctor() { }
}

// Namespace: 
public class CombineExpUpInfo : MonoBehaviour // TypeDefIndex: 9647
{
	// Fields
	private static readonly int TYPE_BUTTON_ON_WIDTH; // 0x0
	private static readonly int TYPE_BUTTON_ON_HEIGHT; // 0x4
	private static readonly int TYPE_BUTTON_OFF_WIDTH; // 0x8
	private static readonly int TYPE_BUTTON_OFF_HEIGHT; // 0xC
	[SerializeField] // RVA: 0xC6B3A4 Offset: 0xC6B3A4 VA: 0xC6B3A4
	private GameObject[] btnObjList; // 0x18
	[SerializeField] // RVA: 0xC6B3B4 Offset: 0xC6B3B4 VA: 0xC6B3B4
	private UISprite[] btnSpriteList; // 0x20
	[SerializeField] // RVA: 0xC6B3C4 Offset: 0xC6B3C4 VA: 0xC6B3C4
	private UISprite[] btnTxtSpriteList; // 0x28
	[SerializeField] // RVA: 0xC6B3D4 Offset: 0xC6B3D4 VA: 0xC6B3D4
	private CombineExpUpClassInfo[] expUpClassInfoList; // 0x30
	[SerializeField] // RVA: 0xC6B3E4 Offset: 0xC6B3E4 VA: 0xC6B3E4
	private UISprite btnChangeSprite; // 0x38
	private Action<ListViewSort.ExpUpDispKind, ListViewSort.ExpUpDispType> changeAction; // 0x40
	private string[] btnSpriteNameList; // 0x48
	private ListViewSort.ExpUpDispKind nowKind; // 0x50
	private ListViewSort.ExpUpDispType nowType; // 0x54
	private List<SvtClassAttri.TYPE> SortClassOrder; // 0x58

	// Methods

	// RVA: 0x1315A5C Offset: 0x1315A5C VA: 0x1315A5C
	public void .ctor() { }

	// RVA: 0x1315D40 Offset: 0x1315D40 VA: 0x1315D40
	public bool ExpUpInfoSet(ListViewSort.ExpUpDispKind kind, ListViewSort.ExpUpDispType type, bool isFirst, Action<ListViewSort.ExpUpDispKind, ListViewSort.ExpUpDispType> afterAction) { }

	// RVA: 0x13163A8 Offset: 0x13163A8 VA: 0x13163A8
	private CombineExpUpInfo.MaterialData[] GetTargetClassMaterialInfo(UserServantEntity[] svtList, int classId) { }

	// RVA: 0x131677C Offset: 0x131677C VA: 0x131677C
	private CombineExpUpInfo.MaterialData[] GetTargetClassStatusUpInfo(UserServantEntity[] svtList, int classId, ListViewSort.ExpUpDispType type) { }

	// RVA: 0x1316C2C Offset: 0x1316C2C VA: 0x1316C2C
	private void SetBtnState(ListViewSort.ExpUpDispKind kind, ListViewSort.ExpUpDispType type) { }

	// RVA: 0x13170AC Offset: 0x13170AC VA: 0x13170AC
	public void OnClickLeft() { }

	// RVA: 0x1317140 Offset: 0x1317140 VA: 0x1317140
	public void OnClickCenter() { }

	// RVA: 0x13171D8 Offset: 0x13171D8 VA: 0x13171D8
	public void OnClickRight() { }

	// RVA: 0x1317270 Offset: 0x1317270 VA: 0x1317270
	public void OnClickChangeButton() { }

	// RVA: 0x1317300 Offset: 0x1317300 VA: 0x1317300
	private static void .cctor() { }
}

// Namespace: 
private class CombineExpUpInfo.MaterialData // TypeDefIndex: 9648
{
	// Fields
	public int svtId; // 0x10
	public int num; // 0x14

	// Methods

	// RVA: 0x13170A4 Offset: 0x13170A4 VA: 0x13170A4
	public void .ctor() { }
}

// Namespace: 
public class CombineLimitUpWarningDialog : BaseDialog // TypeDefIndex: 9649
{
	// Fields
	private readonly Color DisableColor; // 0x58
	[SerializeField] // RVA: 0xC6B3F4 Offset: 0xC6B3F4 VA: 0xC6B3F4
	protected UILabel titleLabel; // 0x68
	[SerializeField] // RVA: 0xC6B404 Offset: 0xC6B404 VA: 0xC6B404
	protected UILabel warningLabel; // 0x70
	[SerializeField] // RVA: 0xC6B414 Offset: 0xC6B414 VA: 0xC6B414
	protected UILabel reInforeceLabel; // 0x78
	[SerializeField] // RVA: 0xC6B424 Offset: 0xC6B424 VA: 0xC6B424
	protected UILabel decideButtonLabel; // 0x80
	[SerializeField] // RVA: 0xC6B434 Offset: 0xC6B434 VA: 0xC6B434
	protected UILabel cancelButtonLabel; // 0x88
	[SerializeField] // RVA: 0xC6B444 Offset: 0xC6B444 VA: 0xC6B444
	protected UISprite sliderSprite; // 0x90
	[SerializeField] // RVA: 0xC6B454 Offset: 0xC6B454 VA: 0xC6B454
	protected UIButtonColor decideButton; // 0x98
	[SerializeField] // RVA: 0xC6B464 Offset: 0xC6B464 VA: 0xC6B464
	protected BoxCollider sliderCollider; // 0xA0
	[SerializeField] // RVA: 0xC6B474 Offset: 0xC6B474 VA: 0xC6B474
	protected BoxCollider sliderThumbCollider; // 0xA8
	[SerializeField] // RVA: 0xC6B484 Offset: 0xC6B484 VA: 0xC6B484
	protected UISlider checkSlider; // 0xB0
	protected CombineLimitUpWarningDialog.State state; // 0xB8
	protected CombineLimitUpWarningDialog.ClickDelegate closeFunc; // 0xC0
	protected Action closeCallbackFunc; // 0xC8

	// Methods

	// RVA: 0x131CFC4 Offset: 0x131CFC4 VA: 0x131CFC4
	public void .ctor() { }

	// RVA: 0x131D070 Offset: 0x131D070 VA: 0x131D070
	public void Init() { }

	// RVA: 0x131D27C Offset: 0x131D27C VA: 0x131D27C
	private void SetSlider(bool sliderOn) { }

	// RVA: 0x131D3C4 Offset: 0x131D3C4 VA: 0x131D3C4
	private void OnSliderDragFinished() { }

	// RVA: 0x131D45C Offset: 0x131D45C VA: 0x131D45C
	public void Open(CombineLimitUpWarningDialog.ClickDelegate closeCallback) { }

	// RVA: 0x131D628 Offset: 0x131D628 VA: 0x131D628
	protected void EndOpen() { }

	// RVA: 0x131D634 Offset: 0x131D634 VA: 0x131D634
	public void Close() { }

	// RVA: 0x131D648 Offset: 0x131D648 VA: 0x131D648
	protected void EndClose() { }

	// RVA: 0x131D64C Offset: 0x131D64C VA: 0x131D64C
	public void OnClickDecide() { }

	// RVA: 0x131D75C Offset: 0x131D75C VA: 0x131D75C
	public void OnClickCancel() { }

	// RVA: 0x131D820 Offset: 0x131D820 VA: 0x131D820
	public void OnEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCFA00 Offset: 0xCCFA00 VA: 0xCCFA00
	// RVA: 0x131D8A8 Offset: 0x131D8A8 VA: 0x131D8A8
	private void <OnClickDecide>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCFA10 Offset: 0xCCFA10 VA: 0xCCFA10
	// RVA: 0x131DB08 Offset: 0x131DB08 VA: 0x131DB08
	private void <OnClickCancel>m__1() { }
}

// Namespace: 
protected enum CombineLimitUpWarningDialog.State // TypeDefIndex: 9650
{
	// Fields
	public int value__; // 0x0
	public const CombineLimitUpWarningDialog.State INIT = 0;
	public const CombineLimitUpWarningDialog.State OPEN = 1;
	public const CombineLimitUpWarningDialog.State INPUT = 2;
	public const CombineLimitUpWarningDialog.State CLOSE = 3;
}

// Namespace: 
public sealed class CombineLimitUpWarningDialog.ClickDelegate : MulticastDelegate // TypeDefIndex: 9651
{
	// Methods

	// RVA: 0x131DB3C Offset: 0x131DB3C VA: 0x131DB3C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x131D8DC Offset: 0x131D8DC VA: 0x131D8DC Slot: 11
	public virtual void Invoke(bool isDecide) { }

	// RVA: 0x131DB4C Offset: 0x131DB4C VA: 0x131DB4C Slot: 12
	public virtual IAsyncResult BeginInvoke(bool isDecide, AsyncCallback callback, object object) { }

	// RVA: 0x131DBDC Offset: 0x131DBDC VA: 0x131DBDC Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class CombineServantListViewItem : ListViewItem // TypeDefIndex: 9652
{
	// Fields
	public const float FIXED_VAL = 1000;
	private const int MATERIAL_ITEM = 7999;
	private const int MATERIAL_ITEM_NUM = 1;
	private const int tdUpMaxQp = 1200000;
	protected CombineServantListViewItem.Type type; // 0x70
	protected UserServantEntity userSvtEntity; // 0x78
	protected ServantEntity servantEntity; // 0x80
	protected EventUpValSetupInfo setupInfo; // 0x88
	protected int svtId; // 0x90
	protected int rarity; // 0x94
	protected bool isFavorite; // 0x98
	protected bool isParty; // 0x99
	protected bool isNeed; // 0x9A
	protected bool isLock; // 0x9B
	protected bool isLimitCntTarget; // 0x9C
	protected bool isLvMax; // 0x9D
	protected bool isFriendshipRankMax; // 0x9E
	protected bool isLimitCntMax; // 0x9F
	protected bool isChoice; // 0xA0
	protected bool isBaseSvt; // 0xA1
	protected bool isMaterialSvt; // 0xA2
	public bool isLastSelectMaterial; // 0xA3
	protected bool isHeroineSvt; // 0xA4
	protected int materialExp; // 0xA8
	protected bool isMaxSelect; // 0xAC
	protected string sortInfoText; // 0xB0
	protected int classId; // 0xB8
	protected int friendship; // 0xBC
	protected int friendshipMax; // 0xC0
	protected bool isLimitUpItemNum; // 0xC4
	protected bool isCanLimitUp; // 0xC5
	protected bool isSkillLvMax; // 0xC6
	protected bool isSkillUpItemNum; // 0xC7
	private bool isAppendSkillLvMax; // 0xC8
	private bool isAppendSkillUpItemNum; // 0xC9
	public bool isAppendSkillOpenItemNum; // 0xCA
	protected bool isTdLvMax; // 0xCB
	protected bool isSameSvt; // 0xCC
	protected bool isSameBaseSvt; // 0xCD
	protected bool isEquiped; // 0xCE
	protected bool isEventJoin; // 0xCF
	protected bool isPush; // 0xD0
	protected int adjustHpMax; // 0xD4
	protected int adjustAtkMax; // 0xD8
	protected int hpBase; // 0xDC
	protected int atkBase; // 0xE0
	protected bool isStatusUpSvt; // 0xE4
	protected bool isCanStUp; // 0xE5
	protected bool isExpUpSvt; // 0xE6
	protected bool isEventJoinBaseSvt; // 0xE7
	protected bool isMaterialTdSvt; // 0xE8
	protected IconLabelInfo iconLabelInfo1; // 0xF0
	protected IconLabelInfo iconLabelInfo2; // 0xF8
	protected long amountSortValue; // 0x100
	protected ListViewSort.BonusFilterKind bonusKind; // 0x108
	protected int bonusKindId; // 0x10C
	protected bool isEventUpVal; // 0x110
	protected int maxLimitCnt; // 0x114
	protected int currentLimitCnt; // 0x118
	protected bool isBaseLvMax; // 0x11C
	protected bool isMaxNextLv; // 0x11D
	protected bool isUseSupport; // 0x11E
	protected int priority; // 0x120
	protected bool isLvExceedMax; // 0x124
	protected bool isLvExceedItemNum; // 0x125
	protected bool isFriendshipExceedMax; // 0x126
	protected bool isFriendshipExceedItemNum; // 0x127
	protected List<int> enableSkillUp; // 0x128
	private List<int> enableAppendSkillUp; // 0x130
	protected bool isAtkUpMax; // 0x138
	protected bool isHpUpMax; // 0x139
	protected bool isAtkSecondUpMax; // 0x13A
	protected bool isHpSecondUpMax; // 0x13B
	protected bool isNotSelectStatusUpHp; // 0x13C
	protected bool isNotSelectStatusUpAtk; // 0x13D
	protected bool isNotSelectSecondStatusUpHp; // 0x13E
	protected bool isNotSelectSecondStatusUpAtk; // 0x13F
	protected bool isSameClass; // 0x140
	protected bool isSwapLock; // 0x141
	protected bool isSwapChoice; // 0x142
	protected int dragSelectNum; // 0x144
	protected bool isCanNotLock; // 0x148
	protected int hpReinforceValue; // 0x14C
	protected int atkReinforceValue; // 0x150
	protected int nowMaxHpReinforceValue; // 0x154
	protected int nowMaxAtkReinforceValue; // 0x158
	private bool isDispAtkStatusUpInfo; // 0x15C
	private bool isDispHpStatusUpInfo; // 0x15D
	private bool isEquipedCmdCard; // 0x15E
	private bool isCmdCardSlotOpen; // 0x15F
	private bool isCombineExpCampaignTarget; // 0x160
	private float combineExpCampaignValue; // 0x164
	private bool isCommandCardExceedMax; // 0x168
	private bool isIgnoreCombineLimitSpecial; // 0x169
	[CompilerGeneratedAttribute] // RVA: 0xC6B494 Offset: 0xC6B494 VA: 0xC6B494
	[DebuggerBrowsableAttribute] // RVA: 0xC6B494 Offset: 0xC6B494 VA: 0xC6B494
	private CombineServantListViewNoticeTween <NoticeTween>k__BackingField; // 0x170

	// Properties
	public CombineServantListViewItem.Type ListType { get; }
	public UserServantEntity UserSvtEntity { get; }
	public ServantEntity ServantEntity { get; }
	public long UserSvtId { get; }
	public int SvtId { get; }
	public string NameText { get; }
	public string LevelText { get; }
	public string RarityText { get; }
	public string CostText { get; }
	public int Hp { get; }
	public int AdjustHp { get; }
	public int Attack { get; }
	public int AdjustAttack { get; }
	public string ImageName { get; }
	public bool IsCanNotBaseSelect { get; }
	public bool IsCanNotSelect { get; }
	public bool IsCanNotSelectMaterial { get; }
	public bool IsFavorite { get; }
	public bool IsParty { get; }
	public bool IsHeroine { get; }
	public bool IsLock { get; }
	public bool IsChoice { get; }
	public bool IsProtected { get; }
	public bool IsPush { get; }
	public bool IsLimitTarget { get; }
	public int GetMaterialExp { get; }
	public int SvtRariry { get; }
	public bool IsBaseSvt { get; }
	public bool IsMtSelect { get; set; }
	public bool IsSelectMax { get; set; }
	public IconLabelInfo IconInfo1 { get; }
	public IconLabelInfo IconInfo2 { get; }
	public bool IsCanNotLimitUp { get; }
	public bool IsLimitCntMax { get; }
	public bool IsLvMax { get; }
	public bool IsFriendshipRankMax { get; }
	public bool IsLimitUpItemNum { get; }
	public bool IsSkillUpItemNum { get; }
	public List<int> GetEnableSkillupList { get; }
	public List<int> GetEnableAppendSkillupList { get; }
	public int SkillOpenItemId { get; }
	public int SkillOpenItemNum { get; }
	public bool IsSameServant { get; }
	public bool IsEquip { get; }
	public bool IsStatusUp { get; }
	public bool IsCanStatusUp { get; }
	public bool IsExpUpSvt { get; }
	public bool IsMaterialTdSvt { get; }
	public int GetHpUpVal { get; }
	public int GetAtkUpVal { get; }
	public bool IsHpAdjustMax { get; }
	public int GetHpAdjustMax { get; }
	public bool IsSecondHpAdjustMax { get; }
	public bool IsAtkAdjustMax { get; }
	public int GetAtkAdjustMax { get; }
	public bool IsSecondAtkAdjustMax { get; }
	public bool IsAtkStatusMax { get; set; }
	public bool IsHpStatusMax { get; set; }
	public bool IsSecondAtkStatusMax { get; set; }
	public bool IsSecondHpStatusMax { get; set; }
	public int GetMaxLimitCnt { get; }
	public int GetCurrentLimitCnt { get; }
	public bool IsEventJoin { get; }
	public bool IsMaxNextLv { get; set; }
	public bool IsBaseLvMax { get; }
	public bool IsOrganization { get; }
	public bool IsCombineEnableServant { get; }
	public bool IsUseSupportServant { get; }
	public bool IsLvExceedItemNum { get; }
	public bool IsLvExceedMax { get; }
	public bool IsFriendshipExceedItemNum { get; }
	public bool IsFriendshipExceedMax { get; }
	public bool IsCommandCardExceedmax { get; }
	public bool IsAtkUpMax { get; }
	public bool IsSecondAtkUpMax { get; }
	public bool IsHpUpMax { get; }
	public bool IsSecondHpUpMax { get; }
	public bool IsSwapLock { get; }
	public bool IsDispLock { get; }
	public bool IsSwapChoice { get; }
	public bool IsDispChoice { get; }
	public bool IsDragSelect { get; set; }
	public int DragSelectNum { get; set; }
	public bool IsCanNotLock { get; set; }
	public bool IsDispAtkStatusUpInfo { get; }
	public bool IsDispHpStatusUpInfo { get; }
	public bool IsEquipedCmdCard { get; }
	public bool IsCmdCardSlotOpen { get; }
	public bool IsCombineExpCampaignTarget { get; }
	public float CombineExpCampaignValue { get; }
	public bool IsIgnoreCombineLimitSpecial { get; }
	public bool IsCanNotSelectPush { get; }
	public CombineServantListViewNoticeTween NoticeTween { get; set; }

	// Methods

	// RVA: 0x18FB130 Offset: 0x18FB130 VA: 0x18FB130
	public void .ctor(CombineServantListViewItem.Type type, int index, UserServantEntity userSvtEntity, bool isFavorite, bool isParty, UserServantEntity baseUsrSvtData, bool isMtSvt, EventUpValSetupInfo setupInfo, Dictionary<int, List<int>> cachedUserServantNpLvDict) { }

	// RVA: 0x18FEDD4 Offset: 0x18FEDD4 VA: 0x18FEDD4 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x18FE238 Offset: 0x18FE238 VA: 0x18FE238
	public void SetSkillInfo() { }

	// RVA: 0x18FE768 Offset: 0x18FE768 VA: 0x18FE768
	public void SetAppendSkillInfo() { }

	// RVA: 0x18FEDDC Offset: 0x18FEDDC VA: 0x18FEDDC
	public void ModifyItem(bool isFavorite) { }

	// RVA: 0x18FEE24 Offset: 0x18FEE24 VA: 0x18FEE24
	public void ModifyLockItem() { }

	// RVA: 0x18FEE68 Offset: 0x18FEE68 VA: 0x18FEE68
	public void ModifyChoiceItem() { }

	// RVA: 0x18FEEAC Offset: 0x18FEEAC VA: 0x18FEEAC
	public void ModifyPushItem() { }

	// RVA: 0x18FEF74 Offset: 0x18FEF74 VA: 0x18FEF74
	private bool IsMatchServantFilter(ListViewSort sort) { }

	// RVA: 0x18FF230 Offset: 0x18FF230 VA: 0x18FF230
	private bool IsMatchBaseServantFilter(ListViewSort sort) { }

	// RVA: 0x18FF550 Offset: 0x18FF550 VA: 0x18FF550
	private bool IsMatchMaterialFilter(ListViewSort sort) { }

	// RVA: 0x18FFAAC Offset: 0x18FFAAC VA: 0x18FFAAC Slot: 4
	public override bool SetSortValue(ListViewSort sort) { }

	// RVA: 0x19017E4 Offset: 0x19017E4 VA: 0x19017E4
	public void SetIsCombineExpCampaignTarget(List<EventCampaignEntity> eventCampaignEntities) { }

	// RVA: 0x1901AFC Offset: 0x1901AFC VA: 0x1901AFC
	public void SetNoticeTween(CombineServantListViewNoticeTween noticeTween) { }

	// RVA: 0x1901670 Offset: 0x1901670 VA: 0x1901670
	public CombineServantListViewItem.Type get_ListType() { }

	// RVA: 0x1901B0C Offset: 0x1901B0C VA: 0x1901B0C
	public void setUserServantEntity(UserServantEntity entity) { }

	// RVA: 0x1901B14 Offset: 0x1901B14 VA: 0x1901B14
	public UserServantEntity get_UserSvtEntity() { }

	// RVA: 0x1901C14 Offset: 0x1901C14 VA: 0x1901C14
	public ServantEntity get_ServantEntity() { }

	// RVA: 0x1901C1C Offset: 0x1901C1C VA: 0x1901C1C
	public long get_UserSvtId() { }

	// RVA: 0x1901CB8 Offset: 0x1901CB8 VA: 0x1901CB8
	public int get_SvtId() { }

	// RVA: 0x1901CC0 Offset: 0x1901CC0 VA: 0x1901CC0
	public string get_NameText() { }

	// RVA: 0x1901D7C Offset: 0x1901D7C VA: 0x1901D7C
	public string get_LevelText() { }

	// RVA: 0x1901E08 Offset: 0x1901E08 VA: 0x1901E08
	public string get_RarityText() { }

	// RVA: 0x1901E74 Offset: 0x1901E74 VA: 0x1901E74
	public string get_CostText() { }

	// RVA: 0x1901F00 Offset: 0x1901F00 VA: 0x1901F00
	public int get_Hp() { }

	// RVA: 0x1901F18 Offset: 0x1901F18 VA: 0x1901F18
	public int get_AdjustHp() { }

	// RVA: 0x1901F30 Offset: 0x1901F30 VA: 0x1901F30
	public int get_Attack() { }

	// RVA: 0x1901F48 Offset: 0x1901F48 VA: 0x1901F48
	public int get_AdjustAttack() { }

	// RVA: 0x1901F60 Offset: 0x1901F60 VA: 0x1901F60
	public string get_ImageName() { }

	// RVA: 0x19013AC Offset: 0x19013AC VA: 0x19013AC
	public bool get_IsCanNotBaseSelect() { }

	// RVA: 0x18FF99C Offset: 0x18FF99C VA: 0x18FF99C
	public bool get_IsCanNotSelect() { }

	// RVA: 0x1901278 Offset: 0x1901278 VA: 0x1901278
	public bool get_IsCanNotSelectMaterial() { }

	// RVA: 0x1901FE0 Offset: 0x1901FE0 VA: 0x1901FE0
	public bool isStatusMax() { }

	// RVA: 0x190202C Offset: 0x190202C VA: 0x190202C
	public bool isCanNotSelectSecondStatusMaterial() { }

	// RVA: 0x1902094 Offset: 0x1902094 VA: 0x1902094
	public bool get_IsFavorite() { }

	// RVA: 0x190209C Offset: 0x190209C VA: 0x190209C
	public bool get_IsParty() { }

	// RVA: 0x1901FC8 Offset: 0x1901FC8 VA: 0x1901FC8
	public bool get_IsHeroine() { }

	// RVA: 0x19020A4 Offset: 0x19020A4 VA: 0x19020A4
	public bool get_IsLock() { }

	// RVA: 0x19020AC Offset: 0x19020AC VA: 0x19020AC
	public bool get_IsChoice() { }

	// RVA: 0x1902078 Offset: 0x1902078 VA: 0x1902078
	public bool get_IsProtected() { }

	// RVA: 0x19020B4 Offset: 0x19020B4 VA: 0x19020B4
	public bool get_IsPush() { }

	// RVA: 0x19020BC Offset: 0x19020BC VA: 0x19020BC
	public bool get_IsLimitTarget() { }

	// RVA: 0x19020C4 Offset: 0x19020C4 VA: 0x19020C4
	private string ToString() { }

	// RVA: 0x1902148 Offset: 0x1902148 VA: 0x1902148
	public int get_GetMaterialExp() { }

	// RVA: 0x1902150 Offset: 0x1902150 VA: 0x1902150
	public int get_SvtRariry() { }

	// RVA: 0x1901250 Offset: 0x1901250 VA: 0x1901250
	public bool get_IsBaseSvt() { }

	// RVA: 0x1902158 Offset: 0x1902158 VA: 0x1902158
	public bool get_IsMtSelect() { }

	// RVA: 0x1902160 Offset: 0x1902160 VA: 0x1902160
	public void set_IsMtSelect(bool value) { }

	// RVA: 0x18FED0C Offset: 0x18FED0C VA: 0x18FED0C
	public bool GetNpInfo(out int tdId, out int tdLv, out int tdMaxLv) { }

	// RVA: 0x190216C Offset: 0x190216C VA: 0x190216C
	public bool get_IsSelectMax() { }

	// RVA: 0x1902174 Offset: 0x1902174 VA: 0x1902174
	public void set_IsSelectMax(bool value) { }

	// RVA: 0x1902180 Offset: 0x1902180 VA: 0x1902180
	public IconLabelInfo get_IconInfo1() { }

	// RVA: 0x1902188 Offset: 0x1902188 VA: 0x1902188
	public IconLabelInfo get_IconInfo2() { }

	// RVA: 0x1902190 Offset: 0x1902190 VA: 0x1902190
	public bool get_IsCanNotLimitUp() { }

	// RVA: 0x1902198 Offset: 0x1902198 VA: 0x1902198
	public bool get_IsLimitCntMax() { }

	// RVA: 0x19021A0 Offset: 0x19021A0 VA: 0x19021A0
	public bool get_IsLvMax() { }

	// RVA: 0x19021A8 Offset: 0x19021A8 VA: 0x19021A8
	public bool get_IsFriendshipRankMax() { }

	// RVA: 0x19021B0 Offset: 0x19021B0 VA: 0x19021B0
	public bool get_IsLimitUpItemNum() { }

	// RVA: 0x19021B8 Offset: 0x19021B8 VA: 0x19021B8
	public bool get_IsSkillUpItemNum() { }

	// RVA: 0x19021C0 Offset: 0x19021C0 VA: 0x19021C0
	public List<int> get_GetEnableSkillupList() { }

	// RVA: 0x19021C8 Offset: 0x19021C8 VA: 0x19021C8
	public List<int> get_GetEnableAppendSkillupList() { }

	// RVA: 0x19021D0 Offset: 0x19021D0 VA: 0x19021D0
	public int get_SkillOpenItemId() { }

	// RVA: 0x1902278 Offset: 0x1902278 VA: 0x1902278
	public int get_SkillOpenItemNum() { }

	// RVA: 0x19023C4 Offset: 0x19023C4 VA: 0x19023C4
	public bool get_IsSameServant() { }

	// RVA: 0x19023CC Offset: 0x19023CC VA: 0x19023CC
	public bool get_IsEquip() { }

	// RVA: 0x190208C Offset: 0x190208C VA: 0x190208C
	public bool get_IsStatusUp() { }

	// RVA: 0x19023D4 Offset: 0x19023D4 VA: 0x19023D4
	public bool get_IsCanStatusUp() { }

	// RVA: 0x19023DC Offset: 0x19023DC VA: 0x19023DC
	public bool get_IsExpUpSvt() { }

	// RVA: 0x1901FD8 Offset: 0x1901FD8 VA: 0x1901FD8
	public bool get_IsMaterialTdSvt() { }

	// RVA: 0x19023E4 Offset: 0x19023E4 VA: 0x19023E4
	public int get_GetHpUpVal() { }

	// RVA: 0x19023EC Offset: 0x19023EC VA: 0x19023EC
	public int get_GetAtkUpVal() { }

	// RVA: 0x19023F4 Offset: 0x19023F4 VA: 0x19023F4
	public bool get_IsHpAdjustMax() { }

	// RVA: 0x1902424 Offset: 0x1902424 VA: 0x1902424
	public int get_GetHpAdjustMax() { }

	// RVA: 0x190242C Offset: 0x190242C VA: 0x190242C
	public bool get_IsSecondHpAdjustMax() { }

	// RVA: 0x190245C Offset: 0x190245C VA: 0x190245C
	public bool get_IsAtkAdjustMax() { }

	// RVA: 0x190248C Offset: 0x190248C VA: 0x190248C
	public int get_GetAtkAdjustMax() { }

	// RVA: 0x1902494 Offset: 0x1902494 VA: 0x1902494
	public bool get_IsSecondAtkAdjustMax() { }

	// RVA: 0x19024C4 Offset: 0x19024C4 VA: 0x19024C4
	public bool get_IsAtkStatusMax() { }

	// RVA: 0x19024CC Offset: 0x19024CC VA: 0x19024CC
	public void set_IsAtkStatusMax(bool value) { }

	// RVA: 0x1902504 Offset: 0x1902504 VA: 0x1902504
	public bool get_IsHpStatusMax() { }

	// RVA: 0x190250C Offset: 0x190250C VA: 0x190250C
	public void set_IsHpStatusMax(bool value) { }

	// RVA: 0x1902544 Offset: 0x1902544 VA: 0x1902544
	public bool get_IsSecondAtkStatusMax() { }

	// RVA: 0x190254C Offset: 0x190254C VA: 0x190254C
	public void set_IsSecondAtkStatusMax(bool value) { }

	// RVA: 0x1902584 Offset: 0x1902584 VA: 0x1902584
	public bool get_IsSecondHpStatusMax() { }

	// RVA: 0x190258C Offset: 0x190258C VA: 0x190258C
	public void set_IsSecondHpStatusMax(bool value) { }

	// RVA: 0x19025C4 Offset: 0x19025C4 VA: 0x19025C4
	public int get_GetMaxLimitCnt() { }

	// RVA: 0x19025CC Offset: 0x19025CC VA: 0x19025CC
	public int get_GetCurrentLimitCnt() { }

	// RVA: 0x19013A4 Offset: 0x19013A4 VA: 0x19013A4
	public bool get_IsEventJoin() { }

	// RVA: 0x19025D4 Offset: 0x19025D4 VA: 0x19025D4
	public bool get_IsMaxNextLv() { }

	// RVA: 0x19025DC Offset: 0x19025DC VA: 0x19025DC
	public void set_IsMaxNextLv(bool value) { }

	// RVA: 0x19025E8 Offset: 0x19025E8 VA: 0x19025E8
	public bool get_IsBaseLvMax() { }

	// RVA: 0x19025F0 Offset: 0x19025F0 VA: 0x19025F0
	public bool get_IsOrganization() { }

	// RVA: 0x1902620 Offset: 0x1902620 VA: 0x1902620
	public bool get_IsCombineEnableServant() { }

	// RVA: 0x1902640 Offset: 0x1902640 VA: 0x1902640
	public bool get_IsUseSupportServant() { }

	// RVA: 0x1902648 Offset: 0x1902648 VA: 0x1902648
	public bool GetSkillInfo(out SkillInfo[] skillInfoList) { }

	// RVA: 0x1902708 Offset: 0x1902708 VA: 0x1902708
	public SvtUseSkillData GetAppendSkillData() { }

	// RVA: 0x1902780 Offset: 0x1902780 VA: 0x1902780
	public bool get_IsLvExceedItemNum() { }

	// RVA: 0x1902788 Offset: 0x1902788 VA: 0x1902788
	public bool get_IsLvExceedMax() { }

	// RVA: 0x1902790 Offset: 0x1902790 VA: 0x1902790
	public bool get_IsFriendshipExceedItemNum() { }

	// RVA: 0x1902798 Offset: 0x1902798 VA: 0x1902798
	public bool get_IsFriendshipExceedMax() { }

	// RVA: 0x19027A0 Offset: 0x19027A0 VA: 0x19027A0
	public bool get_IsCommandCardExceedmax() { }

	// RVA: 0x19027A8 Offset: 0x19027A8 VA: 0x19027A8
	public bool get_IsAtkUpMax() { }

	// RVA: 0x19027B0 Offset: 0x19027B0 VA: 0x19027B0
	public bool get_IsSecondAtkUpMax() { }

	// RVA: 0x19027B8 Offset: 0x19027B8 VA: 0x19027B8
	public bool get_IsHpUpMax() { }

	// RVA: 0x19027C0 Offset: 0x19027C0 VA: 0x19027C0
	public bool get_IsSecondHpUpMax() { }

	// RVA: 0x19027C8 Offset: 0x19027C8 VA: 0x19027C8
	public bool SwapLock() { }

	// RVA: 0x19027E4 Offset: 0x19027E4 VA: 0x19027E4
	public bool get_IsSwapLock() { }

	// RVA: 0x1901258 Offset: 0x1901258 VA: 0x1901258
	public bool get_IsDispLock() { }

	// RVA: 0x19027EC Offset: 0x19027EC VA: 0x19027EC
	public bool SwapChoice() { }

	// RVA: 0x1902808 Offset: 0x1902808 VA: 0x1902808
	public bool get_IsSwapChoice() { }

	// RVA: 0x18FF210 Offset: 0x18FF210 VA: 0x18FF210
	public bool get_IsDispChoice() { }

	// RVA: 0x1902810 Offset: 0x1902810 VA: 0x1902810
	public bool get_IsDragSelect() { }

	// RVA: 0x1902820 Offset: 0x1902820 VA: 0x1902820
	public void set_IsDragSelect(bool value) { }

	// RVA: 0x1902850 Offset: 0x1902850 VA: 0x1902850
	public int get_DragSelectNum() { }

	// RVA: 0x1902858 Offset: 0x1902858 VA: 0x1902858
	public void set_DragSelectNum(int value) { }

	// RVA: 0x1902860 Offset: 0x1902860 VA: 0x1902860
	public bool get_IsCanNotLock() { }

	// RVA: 0x1902868 Offset: 0x1902868 VA: 0x1902868
	public void set_IsCanNotLock(bool value) { }

	// RVA: 0x1902874 Offset: 0x1902874 VA: 0x1902874
	public bool get_IsDispAtkStatusUpInfo() { }

	// RVA: 0x190287C Offset: 0x190287C VA: 0x190287C
	public bool get_IsDispHpStatusUpInfo() { }

	// RVA: 0x1902884 Offset: 0x1902884 VA: 0x1902884
	public bool get_IsEquipedCmdCard() { }

	// RVA: 0x190288C Offset: 0x190288C VA: 0x190288C
	public bool get_IsCmdCardSlotOpen() { }

	// RVA: 0x1902894 Offset: 0x1902894 VA: 0x1902894
	public bool get_IsCombineExpCampaignTarget() { }

	// RVA: 0x190289C Offset: 0x190289C VA: 0x190289C
	public float get_CombineExpCampaignValue() { }

	// RVA: 0x1901FD0 Offset: 0x1901FD0 VA: 0x1901FD0
	public bool get_IsIgnoreCombineLimitSpecial() { }

	// RVA: 0x19028A4 Offset: 0x19028A4 VA: 0x19028A4
	public bool get_IsCanNotSelectPush() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCFA20 Offset: 0xCCFA20 VA: 0xCCFA20
	// RVA: 0x190294C Offset: 0x190294C VA: 0x190294C
	public CombineServantListViewNoticeTween get_NoticeTween() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCFA30 Offset: 0xCCFA30 VA: 0xCCFA30
	// RVA: 0x1901B04 Offset: 0x1901B04 VA: 0x1901B04
	private void set_NoticeTween(CombineServantListViewNoticeTween value) { }
}

// Namespace: 
public enum CombineServantListViewItem.Type // TypeDefIndex: 9653
{
	// Fields
	public int value__; // 0x0
	public const CombineServantListViewItem.Type BASE = 0;
	public const CombineServantListViewItem.Type MATERIAL = 1;
	public const CombineServantListViewItem.Type LIMITUP_BASE = 2;
	public const CombineServantListViewItem.Type SKILL_BASE = 3;
	public const CombineServantListViewItem.Type NP_BASE = 4;
	public const CombineServantListViewItem.Type NP_MATERIAL = 5;
	public const CombineServantListViewItem.Type LVEXCEED_BASE = 6;
	public const CombineServantListViewItem.Type COMMANDCARD_BASE = 7;
	public const CombineServantListViewItem.Type FRIENDSHIP_EXCEED_BASE = 8;
	public const CombineServantListViewItem.Type SPECIAL_ASCENSION_BASE = 9;
	public const CombineServantListViewItem.Type COMMAND_CARD_EXCEED_BASE = 10;
	public const CombineServantListViewItem.Type APPEND_SKILL_BASE = 11;
	public const CombineServantListViewItem.Type SUM = 12;
}

// Namespace: 
public class CombineServantListViewItemDraw : BaseMonoBehaviour // TypeDefIndex: 9654
{
	// Fields
	public UICommonButton baseButton; // 0x18
	public ServantFaceIconComponent servantFaceIcon; // 0x20
	public DragSelectComponent dragSelect; // 0x28
	public UISprite faceImg; // 0x30
	public UISprite frameImg; // 0x38
	public UISprite partyImg; // 0x40
	public UISprite removeImg; // 0x48
	public UISprite choiceImg; // 0x50
	public FlashingIconComponent partyIcon; // 0x58
	public UISprite lockImg; // 0x60
	public UILabel statusTxtLb; // 0x68
	public LimitCountIconComponent limitCountIcon; // 0x70
	public GameObject npLvInfo; // 0x78
	public UIIconLabel npIconLabel; // 0x80
	public UIIconLabel subIconLabel; // 0x88
	public UILabel skillLvLabel; // 0x90
	public UISprite maskSprite; // 0x98
	public UILabel maskLabel; // 0xA0
	public UISprite pushImg; // 0xA8
	[SerializeField] // RVA: 0xC6B4D0 Offset: 0xC6B4D0 VA: 0xC6B4D0
	private UISprite materialTdSprite; // 0xB0
	[SerializeField] // RVA: 0xC6B4E0 Offset: 0xC6B4E0 VA: 0xC6B4E0
	private GameObject coinInfo; // 0xB8
	[SerializeField] // RVA: 0xC6B4F0 Offset: 0xC6B4F0 VA: 0xC6B4F0
	private ItemIconComponent coinIcon; // 0xC0
	[SerializeField] // RVA: 0xC6B500 Offset: 0xC6B500 VA: 0xC6B500
	private UILabel coinNumLabel; // 0xC8
	[SerializeField] // RVA: 0xC6B510 Offset: 0xC6B510 VA: 0xC6B510
	private ServantCommandCardListComponent svtCommandCardList; // 0xD0
	[SerializeField] // RVA: 0xC6B520 Offset: 0xC6B520 VA: 0xC6B520
	private SwitchUIWidgetComponent switchInfoComp; // 0xD8
	[SerializeField] // RVA: 0xC6B530 Offset: 0xC6B530 VA: 0xC6B530
	private UIWidget[] switchInfoList; // 0xE0

	// Methods

	// RVA: 0x1902954 Offset: 0x1902954 VA: 0x1902954
	public void .ctor() { }

	// RVA: 0x190295C Offset: 0x190295C VA: 0x190295C
	public void SetItem(CombineServantListViewItem item, CombineServantListViewItemDraw.DispMode mode, bool isSelectEnable, CombineServantListViewManager.ModeKind modeKind) { }

	// RVA: 0x19075D0 Offset: 0x19075D0 VA: 0x19075D0
	public void SetInput(CombineServantListViewItem item, bool isSelectEnable) { }

	// RVA: 0x19074E8 Offset: 0x19074E8 VA: 0x19074E8
	protected void SetSelectDisp(CombineServantListViewItem item) { }
}
