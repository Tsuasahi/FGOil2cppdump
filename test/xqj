	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA670 Offset: 0xCDA670 VA: 0xCDA670
	// RVA: 0x10FDF74 Offset: 0x10FDF74 VA: 0x10FDF74
	public void .ctor() { }

	// RVA: 0x10FDF7C Offset: 0x10FDF7C VA: 0x10FDF7C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA680 Offset: 0xCDA680 VA: 0xCDA680
	// RVA: 0x10FE230 Offset: 0x10FE230 VA: 0x10FE230 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA690 Offset: 0xCDA690 VA: 0xCDA690
	// RVA: 0x10FE238 Offset: 0x10FE238 VA: 0x10FE238 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA6A0 Offset: 0xCDA6A0 VA: 0xCDA6A0
	// RVA: 0x10FE240 Offset: 0x10FE240 VA: 0x10FE240 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA6B0 Offset: 0xCDA6B0 VA: 0xCDA6B0
	// RVA: 0x10FE254 Offset: 0x10FE254 VA: 0x10FE254 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattlePerformance.<coLoadBattleResult>c__Iterator25.<coLoadBattleResult>c__AnonStorey42 // TypeDefIndex: 8618
{
	// Fields
	internal bool isLoadEnd; // 0x10
	internal BattlePerformance.<coLoadBattleResult>c__Iterator25 <>f__ref$37; // 0x18

	// Methods

	// RVA: 0x10FE228 Offset: 0x10FE228 VA: 0x10FE228
	public void .ctor() { }

	// RVA: 0x10FE2BC Offset: 0x10FE2BC VA: 0x10FE2BC
	internal void <>m__0(AssetData assetData) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43754 Offset: 0xC43754 VA: 0xC43754
private sealed class BattlePerformance.<showBattleResultWait>c__Iterator26 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8619
{
	// Fields
	internal WaitForEndOfFrame <waitEndOfFrame>__1; // 0x10
	internal BattlePerformance $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C
	private BattlePerformance.<showBattleResultWait>c__Iterator26.<showBattleResultWait>c__AnonStorey43 $locvar0; // 0x30

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA6C0 Offset: 0xCDA6C0 VA: 0xCDA6C0
	// RVA: 0x1102E14 Offset: 0x1102E14 VA: 0x1102E14
	public void .ctor() { }

	// RVA: 0x1102E1C Offset: 0x1102E1C VA: 0x1102E1C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA6D0 Offset: 0xCDA6D0 VA: 0xCDA6D0
	// RVA: 0x1103784 Offset: 0x1103784 VA: 0x1103784 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA6E0 Offset: 0xCDA6E0 VA: 0xCDA6E0
	// RVA: 0x110378C Offset: 0x110378C VA: 0x110378C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA6F0 Offset: 0xCDA6F0 VA: 0xCDA6F0
	// RVA: 0x1103794 Offset: 0x1103794 VA: 0x1103794 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA700 Offset: 0xCDA700 VA: 0xCDA700
	// RVA: 0x11037A8 Offset: 0x11037A8 VA: 0x11037A8 Slot: 6
	public void Reset() { }
}

// Namespace: 
private sealed class BattlePerformance.<showBattleResultWait>c__Iterator26.<showBattleResultWait>c__AnonStorey43 // TypeDefIndex: 8620
{
	// Fields
	internal bool isCharaGraphOptionAtlasLoad; // 0x10
	internal bool isBg1Load; // 0x11
	internal bool isBg2Load; // 0x12
	internal bool isEffectLoad; // 0x13
	internal BattlePerformance.<showBattleResultWait>c__Iterator26 <>f__ref$38; // 0x18

	// Methods

	// RVA: 0x110377C Offset: 0x110377C VA: 0x110377C
	public void .ctor() { }

	// RVA: 0x1103810 Offset: 0x1103810 VA: 0x1103810
	internal void <>m__0() { }

	// RVA: 0x110381C Offset: 0x110381C VA: 0x110381C
	internal void <>m__1() { }

	// RVA: 0x1103828 Offset: 0x1103828 VA: 0x1103828
	internal void <>m__2() { }

	// RVA: 0x1103834 Offset: 0x1103834 VA: 0x1103834
	internal void <>m__3() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43764 Offset: 0xC43764 VA: 0xC43764
private sealed class BattlePerformance.<PlayAnySkillVoice>c__AnonStorey44 // TypeDefIndex: 8621
{
	// Fields
	internal Action _callback; // 0x10

	// Methods

	// RVA: 0x10FD128 Offset: 0x10FD128 VA: 0x10FD128
	public void .ctor() { }

	// RVA: 0x10FD130 Offset: 0x10FD130 VA: 0x10FD130
	internal void <>m__0() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43774 Offset: 0xC43774 VA: 0xC43774
private sealed class BattlePerformance.<corLoadPt>c__Iterator27 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8622
{
	// Fields
	internal Action callback; // 0x10
	internal BattlePerformance $this; // 0x18
	internal object $current; // 0x20
	internal bool $disposing; // 0x28
	internal int $PC; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA710 Offset: 0xCDA710 VA: 0xCDA710
	// RVA: 0x10FE864 Offset: 0x10FE864 VA: 0x10FE864
	public void .ctor() { }

	// RVA: 0x10FE86C Offset: 0x10FE86C VA: 0x10FE86C Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA720 Offset: 0xCDA720 VA: 0xCDA720
	// RVA: 0x10FEF58 Offset: 0x10FEF58 VA: 0x10FEF58 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA730 Offset: 0xCDA730 VA: 0xCDA730
	// RVA: 0x10FEF60 Offset: 0x10FEF60 VA: 0x10FEF60 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA740 Offset: 0xCDA740 VA: 0xCDA740
	// RVA: 0x10FEF68 Offset: 0x10FEF68 VA: 0x10FEF68 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA750 Offset: 0xCDA750 VA: 0xCDA750
	// RVA: 0x10FEF7C Offset: 0x10FEF7C VA: 0x10FEF7C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43784 Offset: 0xC43784 VA: 0xC43784
private sealed class BattlePerformance.<PlayShiftGaugeChange>c__AnonStorey45 // TypeDefIndex: 8623
{
	// Fields
	internal string eventName; // 0x10
	internal BattlePerformance $this; // 0x18

	// Methods

	// RVA: 0x10FD1B8 Offset: 0x10FD1B8 VA: 0x10FD1B8
	public void .ctor() { }

	// RVA: 0x10FD1C0 Offset: 0x10FD1C0 VA: 0x10FD1C0
	internal void <>m__0(int targetId) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC43794 Offset: 0xC43794 VA: 0xC43794
private sealed class BattlePerformance.<ColShiftGaugeChangeServant>c__Iterator28 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8624
{
	// Fields
	internal BattleActionData.BaseShiftGaugeData <shiftGauge>__0; // 0x10
	internal BattleActionData.ShiftServant shiftSvt; // 0x18
	internal BattleActorControl <actor>__0; // 0x20
	internal string eventName; // 0x28
	internal BattlePerformance $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA760 Offset: 0xCDA760 VA: 0xCDA760
	// RVA: 0x10FB280 Offset: 0x10FB280 VA: 0x10FB280
	public void .ctor() { }

	// RVA: 0x10FB288 Offset: 0x10FB288 VA: 0x10FB288 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA770 Offset: 0xCDA770 VA: 0xCDA770
	// RVA: 0x10FB4C8 Offset: 0x10FB4C8 VA: 0x10FB4C8 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA780 Offset: 0xCDA780 VA: 0xCDA780
	// RVA: 0x10FB4D0 Offset: 0x10FB4D0 VA: 0x10FB4D0 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA790 Offset: 0xCDA790 VA: 0xCDA790
	// RVA: 0x10FB4D8 Offset: 0x10FB4D8 VA: 0x10FB4D8 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA7A0 Offset: 0xCDA7A0 VA: 0xCDA7A0
	// RVA: 0x10FB4EC Offset: 0x10FB4EC VA: 0x10FB4EC Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC437A4 Offset: 0xC437A4 VA: 0xC437A4
private sealed class BattlePerformance.<startChangeAppearance>c__Iterator29 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8625
{
	// Fields
	internal int <i>__1; // 0x10
	internal int[] tagetUniqueId; // 0x18
	internal GameObject <obj>__2; // 0x20
	internal BattleActorControl <actor>__2; // 0x28
	internal Action callback; // 0x30
	internal BattlePerformance $this; // 0x38
	internal object $current; // 0x40
	internal bool $disposing; // 0x48
	internal int $PC; // 0x4C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA7B0 Offset: 0xCDA7B0 VA: 0xCDA7B0
	// RVA: 0x1103A10 Offset: 0x1103A10 VA: 0x1103A10
	public void .ctor() { }

	// RVA: 0x1103A18 Offset: 0x1103A18 VA: 0x1103A18 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA7C0 Offset: 0xCDA7C0 VA: 0xCDA7C0
	// RVA: 0x1103C18 Offset: 0x1103C18 VA: 0x1103C18 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA7D0 Offset: 0xCDA7D0 VA: 0xCDA7D0
	// RVA: 0x1103C20 Offset: 0x1103C20 VA: 0x1103C20 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA7E0 Offset: 0xCDA7E0 VA: 0xCDA7E0
	// RVA: 0x1103C28 Offset: 0x1103C28 VA: 0x1103C28 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA7F0 Offset: 0xCDA7F0 VA: 0xCDA7F0
	// RVA: 0x1103C3C Offset: 0x1103C3C VA: 0x1103C3C Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC437B4 Offset: 0xC437B4 VA: 0xC437B4
private sealed class BattlePerformance.<CheckQuestStartSkill>c__Iterator2A : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8626
{
	// Fields
	internal BattlePerformance $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA800 Offset: 0xCDA800 VA: 0xCDA800
	// RVA: 0x10F9F7C Offset: 0x10F9F7C VA: 0x10F9F7C
	public void .ctor() { }

	// RVA: 0x10F9F84 Offset: 0x10F9F84 VA: 0x10F9F84 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA810 Offset: 0xCDA810 VA: 0xCDA810
	// RVA: 0x10FA0D4 Offset: 0x10FA0D4 VA: 0x10FA0D4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA820 Offset: 0xCDA820 VA: 0xCDA820
	// RVA: 0x10FA0DC Offset: 0x10FA0DC VA: 0x10FA0DC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA830 Offset: 0xCDA830 VA: 0xCDA830
	// RVA: 0x10FA0E4 Offset: 0x10FA0E4 VA: 0x10FA0E4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA840 Offset: 0xCDA840 VA: 0xCDA840
	// RVA: 0x10FA0F8 Offset: 0x10FA0F8 VA: 0x10FA0F8 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC437C4 Offset: 0xC437C4 VA: 0xC437C4
private sealed class BattlePerformance.<CoEndLoadLossCommandSpellEffect>c__Iterator2B : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8627
{
	// Fields
	internal BattleActionData <actionData>__0; // 0x10
	internal UserGameEntity <userGame>__0; // 0x18
	internal int <imageType>__0; // 0x20
	internal int <remain>__0; // 0x24
	internal string <assetObjName>__0; // 0x28
	internal AssetData assetData; // 0x30
	internal GameObject <prefab>__0; // 0x38
	internal GameObject <effect>__0; // 0x40
	internal BattlePerformance $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA850 Offset: 0xCDA850 VA: 0xCDA850
	// RVA: 0x10FA160 Offset: 0x10FA160 VA: 0x10FA160
	public void .ctor() { }

	// RVA: 0x10FA168 Offset: 0x10FA168 VA: 0x10FA168 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA860 Offset: 0xCDA860 VA: 0xCDA860
	// RVA: 0x10FA4EC Offset: 0x10FA4EC VA: 0x10FA4EC Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA870 Offset: 0xCDA870 VA: 0xCDA870
	// RVA: 0x10FA4F4 Offset: 0x10FA4F4 VA: 0x10FA4F4 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA880 Offset: 0xCDA880 VA: 0xCDA880
	// RVA: 0x10FA4FC Offset: 0x10FA4FC VA: 0x10FA4FC Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA890 Offset: 0xCDA890 VA: 0xCDA890
	// RVA: 0x10FA510 Offset: 0x10FA510 VA: 0x10FA510 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC437D4 Offset: 0xC437D4 VA: 0xC437D4
private sealed class BattlePerformance.<CoFieldCallEffect>c__Iterator2C : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8628
{
	// Fields
	internal int effectId; // 0x10
	internal string sendEvent; // 0x18
	internal GameObject <effectObject>__0; // 0x20
	internal GameObject <effect>__0; // 0x28
	internal BattlePerformance $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA8A0 Offset: 0xCDA8A0 VA: 0xCDA8A0
	// RVA: 0x10FA578 Offset: 0x10FA578 VA: 0x10FA578
	public void .ctor() { }

	// RVA: 0x10FA580 Offset: 0x10FA580 VA: 0x10FA580 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA8B0 Offset: 0xCDA8B0 VA: 0xCDA8B0
	// RVA: 0x10FA75C Offset: 0x10FA75C VA: 0x10FA75C Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA8C0 Offset: 0xCDA8C0 VA: 0xCDA8C0
	// RVA: 0x10FA764 Offset: 0x10FA764 VA: 0x10FA764 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA8D0 Offset: 0xCDA8D0 VA: 0xCDA8D0
	// RVA: 0x10FA76C Offset: 0x10FA76C VA: 0x10FA76C Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA8E0 Offset: 0xCDA8E0 VA: 0xCDA8E0
	// RVA: 0x10FA780 Offset: 0x10FA780 VA: 0x10FA780 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC437E4 Offset: 0xC437E4 VA: 0xC437E4
private sealed class BattlePerformance.<CoShowDefenceTargetAddBuffEffect>c__Iterator2D : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8629
{
	// Fields
	internal float <time>__0; // 0x10
	internal float waitTime; // 0x14
	internal FunctionEntity funcEntity; // 0x18
	internal Action callback; // 0x20
	internal string <popupLabel>__0; // 0x28
	internal int <popupColor>__0; // 0x30
	internal int <popupBuffId>__0; // 0x34
	internal int effectId; // 0x38
	internal GameObject procObject; // 0x40
	internal GameObject <effectObject>__0; // 0x48
	internal GameObject <effect>__0; // 0x50
	internal BattleBuffData.BuffData <buffData>__0; // 0x58
	internal int[] specialInvincibleBuff; // 0x60
	internal BattleBuffData.ShowBuffData <showBuffData>__0; // 0x68
	internal EffectMaster <effectMaster>__0; // 0x70
	internal EffectEntity <effectEntity>__0; // 0x78
	internal string <path>__0; // 0x80
	internal string <name>__0; // 0x88
	internal AssetData <assetData>__0; // 0x90
	internal BattlePerformance $this; // 0x98
	internal object $current; // 0xA0
	internal bool $disposing; // 0xA8
	internal int $PC; // 0xAC

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA8F0 Offset: 0xCDA8F0 VA: 0xCDA8F0
	// RVA: 0x10FA7E8 Offset: 0x10FA7E8 VA: 0x10FA7E8
	public void .ctor() { }

	// RVA: 0x10FA7F0 Offset: 0x10FA7F0 VA: 0x10FA7F0 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA900 Offset: 0xCDA900 VA: 0xCDA900
	// RVA: 0x10FAFA0 Offset: 0x10FAFA0 VA: 0x10FAFA0 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA910 Offset: 0xCDA910 VA: 0xCDA910
	// RVA: 0x10FAFA8 Offset: 0x10FAFA8 VA: 0x10FAFA8 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA920 Offset: 0xCDA920 VA: 0xCDA920
	// RVA: 0x10FAFB0 Offset: 0x10FAFB0 VA: 0x10FAFB0 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA930 Offset: 0xCDA930 VA: 0xCDA930
	// RVA: 0x10FAFC4 Offset: 0x10FAFC4 VA: 0x10FAFC4 Slot: 6
	public void Reset() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC437F4 Offset: 0xC437F4 VA: 0xC437F4
private sealed class BattlePerformance.<CoWaitGuardEffect>c__Iterator2E : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 8630
{
	// Fields
	internal GameObject guardEffect; // 0x10
	internal BattleBuffData.BuffData buffData; // 0x18
	internal BattleBuffData.ShowBuffData[] <showBuffArray>__0; // 0x20
	internal BattlePerformance $this; // 0x28
	internal object $current; // 0x30
	internal bool $disposing; // 0x38
	internal int $PC; // 0x3C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCDA940 Offset: 0xCDA940 VA: 0xCDA940
	// RVA: 0x10FB02C Offset: 0x10FB02C VA: 0x10FB02C
	public void .ctor() { }

	// RVA: 0x10FB034 Offset: 0x10FB034 VA: 0x10FB034 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA950 Offset: 0xCDA950 VA: 0xCDA950
	// RVA: 0x10FB1F4 Offset: 0x10FB1F4 VA: 0x10FB1F4 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA960 Offset: 0xCDA960 VA: 0xCDA960
	// RVA: 0x10FB1FC Offset: 0x10FB1FC VA: 0x10FB1FC Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA970 Offset: 0xCDA970 VA: 0xCDA970
	// RVA: 0x10FB204 Offset: 0x10FB204 VA: 0x10FB204 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCDA980 Offset: 0xCDA980 VA: 0xCDA980
	// RVA: 0x10FB218 Offset: 0x10FB218 VA: 0x10FB218 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BattlePerformanceCommandCard : BaseMonoBehaviour // TypeDefIndex: 8631
{
	// Fields
	private readonly float[] COMMAND_STAMP_POS_X; // 0x18
	private readonly float COMMAND_STAMP_POS_Y; // 0x20
	private readonly float COMMAND_STAMP_POS_Z; // 0x24
	private readonly float CARD_ROOT_BASE_X; // 0x28
	private readonly float CARD_ROOT_BASE_Y; // 0x2C
	public PlayMakerFSM commandfsm; // 0x30
	public GameObject commandprefab; // 0x38
	public GameObject selectCommandPrefab; // 0x40
	public Transform commandrootTransform; // 0x48
	public UISprite selectinfo_sprite; // 0x50
	public GameObject firstbonus_q; // 0x58
	public GameObject firstbonus_a; // 0x60
	public GameObject firstbonus_b; // 0x68
	public GameObject firstaura_q; // 0x70
	public GameObject firstaura_a; // 0x78
	public GameObject firstaura_b; // 0x80
	public GameObject[] p_commandlist; // 0x88
	public Transform cardRoot; // 0x90
	public Transform[] cardTr; // 0x98
	public Transform[] npcardTr; // 0xA0
	public Transform[] excardTr; // 0xA8
	public GameObject chainBonus; // 0xB0
	public UISprite maskSprite; // 0xB8
	public Transform extraPos; // 0xC0
	public Transform[] miniPos; // 0xC8
	public Transform npTargetTr; // 0xD0
	public Transform[] npgaugeTr; // 0xD8
	public GameObject cutin_single; // 0xE0
	public GameObject cutin_trinity_a; // 0xE8
	public GameObject cutin_trinity_b; // 0xF0
	public GameObject cutin_trinity_q; // 0xF8
	public GameObject cutin_grand_a; // 0x100
	public GameObject cutin_grand_b; // 0x108
	public GameObject cutin_grand_q; // 0x110
	public GameObject cutin_ordererror; // 0x118
	public GameObject effect_takecri; // 0x120
	public Transform criticalpointTr; // 0x128
	public GameObject highSpeedButton; // 0x130
	public GameObject highSpeedArrowOn; // 0x138
	public GameObject highSpeedArrowOff; // 0x140
	public UIButton backTacticalButton; // 0x148
	public BattleSealedCommandWindowComponent sealedWindow; // 0x150
	public BattleTDConfWIndowComponent tdConfWindow; // 0x158
	private BattleLogic logic; // 0x160
	private int[] selectcommand; // 0x168
	private int drawcount; // 0x170
	private int maxdrawcount; // 0x174
	private BattleCommandData[] commandlist; // 0x178
	private BattlePerformance perf; // 0x180
	private BattleData Bdata; // 0x188
	private List<BattleCommandData> baseCommandList; // 0x190
	private BattleCommandComponent[] selectedcomponents; // 0x198
	private BattleServantParamComponent[] servantStatusObjArray; // 0x1A0
	public static int cardsize_w; // 0x0
	protected bool directCommandCardTouchEnable; // 0x1A8
	private Coroutine openNpCoroutine; // 0x1B0
	private BattleCommandComponent[] commandCompArray; // 0x1B8
	private Transform[] commandTransformArray; // 0x1C0
	private bool isPrevStar; // 0x1C8
	private Spawner spawner; // 0x1D0
	private int firstBonusAnimationWaitTime; // 0x1D8
	private readonly int firstBonusAnimationMaxTime; // 0x1DC
	private bool isTouchBegan; // 0x1E0
	private bool isTouchEnded; // 0x1E1
	private bool isTouchCanceled; // 0x1E2
	[CompilerGeneratedAttribute] // RVA: 0xC5F40C Offset: 0xC5F40C VA: 0xC5F40C
	[DebuggerBrowsableAttribute] // RVA: 0xC5F40C Offset: 0xC5F40C VA: 0xC5F40C
	private bool <IsPlayingBackStar>k__BackingField; // 0x1E3
	[SerializeField] // RVA: 0xC5F448 Offset: 0xC5F448 VA: 0xC5F448
	private iTween.EaseType npGaugeEaseType; // 0x1E4
	[SerializeField] // RVA: 0xC5F458 Offset: 0xC5F458 VA: 0xC5F458
	private float npGaugeEffectMoveDelayTime; // 0x1E8
	[SerializeField] // RVA: 0xC5F468 Offset: 0xC5F468 VA: 0xC5F468
	private float npGaugeEffectMoveTime; // 0x1EC
	[SerializeField] // RVA: 0xC5F478 Offset: 0xC5F478 VA: 0xC5F478
	private float npCardEffectDelayTime; // 0x1F0
	[SerializeField] // RVA: 0xC5F488 Offset: 0xC5F488 VA: 0xC5F488
	private float npCardDispDelayTime; // 0x1F4
	[SerializeField] // RVA: 0xC5F498 Offset: 0xC5F498 VA: 0xC5F498
	private Transform npGaugeLightTargetRoot; // 0x1F8
	[SerializeField] // RVA: 0xC5F4A8 Offset: 0xC5F4A8 VA: 0xC5F4A8
	private Transform[] npGaugeLightTarget; // 0x200
	private bool isPlayingMoveCard; // 0x208
	private GameObject firstBonusObject; // 0x210
	private int firstAuraType; // 0x218
	private SimpleAnimation firstBonusSimpleAnimation; // 0x220
	private Animation firstBonusAnimation; // 0x228
	private GameObject chainBonusObject; // 0x230
	private Vector3 miniScale; // 0x238
	private List<GameObject> aubelist; // 0x248
	private const float MAX_STAR_TWEEN_TIME = 0.5;
	private const float MIN_STAR_TWEEN_TIME = 0.3;
	public const int DRAW_COMMAND_MAX = 5;
	private bool isPressAtkBtn; // 0x250
	private Vector2[] TutorialArrow01; // 0x258
	private Rect[] TutorialSquare01; // 0x260
	private Vector2[] TutorialArrow05; // 0x268
	private Rect[] TutorialSquare05; // 0x270
	private Vector2 TutorialArrow22; // 0x278
	private Rect TutorialSquare22; // 0x280
	private Vector2[] TutorialArrow31; // 0x290
	private Rect[] TutorialSquare32; // 0x298
	private bool isTouchNgInTutorial; // 0x2A0
	private BattleLogic.TutorialStringData[] TSD; // 0x2A8

	// Properties
	public bool IsPlayingBackStar { get; set; }
	private Vector2[] FSTutorialArrow01 { get; }
	private Rect[] FSTutorialSquare01 { get; }
	private Vector2[] FSTutorialArrow05 { get; }
	private Rect[] FSTutorialSquare05 { get; }
	private Vector2[] FSTutorialArrow31 { get; }
	private Rect[] FSTutorialSquare32 { get; }
	private Vector2 FSTutorialArrow22 { get; }
	private Rect FSTutorialSquare22 { get; }

	// Methods

	// RVA: 0x110956C Offset: 0x110956C VA: 0x110956C
	public void .ctor() { }

	// RVA: 0x1109F6C Offset: 0x1109F6C VA: 0x1109F6C
	private void SetBackTacticalButton(bool active) { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBCF8 Offset: 0xCCBCF8 VA: 0xCCBCF8
	// RVA: 0x110A034 Offset: 0x110A034 VA: 0x110A034
	public bool get_IsPlayingBackStar() { }

	[CompilerGeneratedAttribute] // RVA: 0xCCBD08 Offset: 0xCCBD08 VA: 0xCCBD08
	// RVA: 0x110A03C Offset: 0x110A03C VA: 0x110A03C
	private void set_IsPlayingBackStar(bool value) { }

	// RVA: 0x110A048 Offset: 0x110A048 VA: 0x110A048
	public void Initialize(BattlePerformance inperf, BattleData data, BattleLogic inlogic) { }

	// RVA: 0x110A2E4 Offset: 0x110A2E4 VA: 0x110A2E4
	public void initQuest() { }

	// RVA: 0x110A364 Offset: 0x110A364 VA: 0x110A364
	public void OpenInitiarize() { }

	// RVA: 0x110A3D8 Offset: 0x110A3D8 VA: 0x110A3D8
	public void createCommandCard() { }

	// RVA: 0x110ADDC Offset: 0x110ADDC VA: 0x110ADDC
	public void initOpen() { }

	// RVA: 0x110AE40 Offset: 0x110AE40 VA: 0x110AE40
	public void closeWindow() { }

	// RVA: 0x110AE44 Offset: 0x110AE44 VA: 0x110AE44
	public void InitResult() { }

	// RVA: 0x110AEFC Offset: 0x110AEFC VA: 0x110AEFC
	public void playAnimation(string name) { }

	// RVA: 0x110B29C Offset: 0x110B29C VA: 0x110B29C
	public void registCommandCard(BattleCommandData[] list) { }

	// RVA: 0x110B8F8 Offset: 0x110B8F8 VA: 0x110B8F8
	public void hideCommandCard(bool flg, BaseMotionSkip motionSkip) { }

	// RVA: 0x110BA30 Offset: 0x110BA30 VA: 0x110BA30
	public void updateCard() { }

	// RVA: 0x110BCB0 Offset: 0x110BCB0 VA: 0x110BCB0
	public void fadeOutAllCard() { }

	// RVA: 0x110BD4C Offset: 0x110BD4C VA: 0x110BD4C
	public void resetCommandCard() { }

	// RVA: 0x110BEB0 Offset: 0x110BEB0 VA: 0x110BEB0
	public void StartCountupCommandStar(bool isZeroStart = True) { }

	// RVA: 0x10FDA38 Offset: 0x10FDA38 VA: 0x10FDA38
	public void ResetCardCriticalLabel() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD18 Offset: 0xCCBD18 VA: 0xCCBD18
	// RVA: 0x110BFAC Offset: 0x110BFAC VA: 0x110BFAC
	private IEnumerator waitFallStar() { }

	// RVA: 0x10FDAD4 Offset: 0x10FDAD4 VA: 0x10FDAD4
	public void openCommandCard(bool isStatTac = False) { }

	// RVA: 0x110C10C Offset: 0x110C10C VA: 0x110C10C
	public void endOpenCommandCard() { }

	// RVA: 0x110C20C Offset: 0x110C20C VA: 0x110C20C
	public void SetBaseCommandCard(List<BattleCommandData> baselist) { }

	// RVA: 0x110C214 Offset: 0x110C214 VA: 0x110C214
	public BattleCommandData[] GetBaseCommandCard() { }

	// RVA: 0x110C2D0 Offset: 0x110C2D0 VA: 0x110C2D0
	public void setCommandCard(BattleCommandData[] list, int maxdrawcount) { }

	// RVA: 0x110CC90 Offset: 0x110CC90 VA: 0x110CC90
	public void giveoutCard() { }

	// RVA: 0x110CE28 Offset: 0x110CE28 VA: 0x110CE28
	public void endMoveCard() { }

	// RVA: 0x110D110 Offset: 0x110D110 VA: 0x110D110
	public void giveoutNobleCard() { }

	// RVA: 0x110D378 Offset: 0x110D378 VA: 0x110D378
	public void updateCardFix() { }

	// RVA: 0x110D070 Offset: 0x110D070 VA: 0x110D070
	public void updateTDTypeChange() { }

	// RVA: 0x110C01C Offset: 0x110C01C VA: 0x110C01C
	public void updateCardMag() { }

	// RVA: 0x110D4F0 Offset: 0x110D4F0 VA: 0x110D4F0
	public void touchCommandCard(int markindex) { }

	// RVA: 0x110E0FC Offset: 0x110E0FC VA: 0x110E0FC
	public void LongPress(int markindex) { }

	// RVA: 0x110E2B0 Offset: 0x110E2B0 VA: 0x110E2B0
	private void unselectCommandCard(BattleCommandComponent bc, int markindex) { }

	// RVA: 0x110D79C Offset: 0x110D79C VA: 0x110D79C
	public void selectOK(int markindex) { }

	// RVA: 0x110ECD4 Offset: 0x110ECD4 VA: 0x110ECD4
	private void SetSelectStamp(int targetindex, Vector3 pos, BattleCommandComponent bc) { }

	// RVA: 0x110EF38 Offset: 0x110EF38 VA: 0x110EF38
	public void startFirstBonus(int type) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD28 Offset: 0xCCBD28 VA: 0xCCBD28
	// RVA: 0x110EF64 Offset: 0x110EF64 VA: 0x110EF64
	private IEnumerator coStartFirstBonus(int type) { }

	// RVA: 0x110EFF8 Offset: 0x110EFF8 VA: 0x110EFF8
	private void ActivateFirstBonusObject() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD38 Offset: 0xCCBD38 VA: 0xCCBD38
	// RVA: 0x110F268 Offset: 0x110F268 VA: 0x110F268
	private IEnumerator DelayFirstBonusAnimationPlay() { }

	// RVA: 0x110F2D8 Offset: 0x110F2D8 VA: 0x110F2D8
	public void stopFirstBonus() { }

	// RVA: 0x110E7CC Offset: 0x110E7CC VA: 0x110E7CC
	public void cancelFirstBonus() { }

	// RVA: 0x110E8F4 Offset: 0x110E8F4 VA: 0x110E8F4
	public void setFirstAura(BattleCommandComponent comp, int type) { }

	// RVA: 0x110E994 Offset: 0x110E994 VA: 0x110E994
	public void checkChainBonus(int targetIndex) { }

	// RVA: 0x110EB6C Offset: 0x110EB6C VA: 0x110EB6C
	public void checkMaskEnemy() { }

	// RVA: 0x110F380 Offset: 0x110F380 VA: 0x110F380
	public void checkDrawCount() { }

	// RVA: 0x110F400 Offset: 0x110F400 VA: 0x110F400
	public void changeNoSelectCards() { }

	// RVA: 0x110F59C Offset: 0x110F59C VA: 0x110F59C
	public void comboExecute() { }

	// RVA: 0x110FDC0 Offset: 0x110FDC0 VA: 0x110FDC0
	public void startComboEffect() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD48 Offset: 0xCCBD48 VA: 0xCCBD48
	// RVA: 0x110FE44 Offset: 0x110FE44 VA: 0x110FE44
	private IEnumerator showComboEffect(BattleComboData combo, string endproc) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD58 Offset: 0xCCBD58 VA: 0xCCBD58
	// RVA: 0x110FEEC Offset: 0x110FEEC VA: 0x110FEEC
	private IEnumerator showComboEffectShort(BattleComboData combo) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD68 Offset: 0xCCBD68 VA: 0xCCBD68
	// RVA: 0x110FF80 Offset: 0x110FF80 VA: 0x110FF80
	private IEnumerator showComboEffectNormal(BattleComboData combo) { }

	// RVA: 0x1110014 Offset: 0x1110014 VA: 0x1110014
	private void setComboEffectPrefab(BattleComboData combo, out GameObject prefab, out int seName) { }

	// RVA: 0x1110174 Offset: 0x1110174 VA: 0x1110174
	private void playComboEffect(GameObject prefab, int seName) { }

	// RVA: 0x111022C Offset: 0x111022C VA: 0x111022C
	private void PlayFlash(BattleComboData combo) { }

	// RVA: 0x111033C Offset: 0x111033C VA: 0x111033C
	private void PlayFlashComboSvt(BattleComboData combo) { }

	// RVA: 0x111044C Offset: 0x111044C VA: 0x111044C
	private void MoveSelectedCard(float moveTime) { }

	// RVA: 0x1110864 Offset: 0x1110864 VA: 0x1110864
	private void AddExtraCard() { }

	// RVA: 0x1110D94 Offset: 0x1110D94 VA: 0x1110D94
	private void MoveExtraCard(float moveTime) { }

	// RVA: 0x11111FC Offset: 0x11111FC VA: 0x11111FC
	private void PlayFlashExtra() { }

	// RVA: 0x1111290 Offset: 0x1111290 VA: 0x1111290
	public void endComboEffect() { }

	// RVA: 0x11112F4 Offset: 0x11112F4 VA: 0x11112F4
	public string getComboCutIn() { }

	// RVA: 0x111141C Offset: 0x111141C VA: 0x111141C
	public void playCommandEffect(int index, bool flg) { }

	// RVA: 0x11114D0 Offset: 0x11114D0 VA: 0x11114D0
	public void playNobleCardEffect(int index) { }

	// RVA: 0x111183C Offset: 0x111183C VA: 0x111183C
	public void playTypeEffect(bool flg) { }

	// RVA: 0x110E788 Offset: 0x110E788 VA: 0x110E788
	public void selectCommandCard(int atcount) { }

	// RVA: 0x11118E8 Offset: 0x11118E8 VA: 0x11118E8
	public void setCountRemaining(int count) { }

	// RVA: 0x11119E8 Offset: 0x11119E8 VA: 0x11119E8
	public void startMiniCard() { }

	// RVA: 0x111213C Offset: 0x111213C VA: 0x111213C
	public GameObject getBattleCommandCardObject(int actionIndex) { }

	// RVA: 0x11121EC Offset: 0x11121EC VA: 0x11121EC
	public Transform getCollectCriticalTransform() { }

	// RVA: 0x11121F4 Offset: 0x11121F4 VA: 0x11121F4
	public bool checkPrevStars() { }

	// RVA: 0x11121FC Offset: 0x11121FC VA: 0x11121FC
	public void setPrevStarsFlg(bool flg) { }

	// RVA: 0x1112208 Offset: 0x1112208 VA: 0x1112208
	public void moveupStars() { }

	// RVA: 0x11129C8 Offset: 0x11129C8 VA: 0x11129C8
	private void UpdateCommandCardServantFace(BattleServantData svtData, IEnumerable<BattleCommandComponent> commandCompEnumerable) { }

	// RVA: 0x1112CE0 Offset: 0x1112CE0 VA: 0x1112CE0
	public void UpdateSelectedCommandCardServantFace(BattleServantData svtData) { }

	// RVA: 0x1112CE8 Offset: 0x1112CE8 VA: 0x1112CE8
	public void UpdateDrawnCommandCardServantFace(BattleServantData svtData) { }

	// RVA: 0x1112CF0 Offset: 0x1112CF0 VA: 0x1112CF0
	private void MoveNotTween(Transform target, Action<GameObject> callback) { }

	// RVA: 0x1112FDC Offset: 0x1112FDC VA: 0x1112FDC
	private void MoveNotTween2back(Transform from, Action<GameObject> callback) { }

	// RVA: 0x1113230 Offset: 0x1113230 VA: 0x1113230
	public bool fallStar() { }

	// RVA: 0x1113618 Offset: 0x1113618 VA: 0x1113618
	public void ResetCommandCardPassData() { }

	// RVA: 0x1113698 Offset: 0x1113698 VA: 0x1113698
	public void PlayFallStar() { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD78 Offset: 0xCCBD78 VA: 0xCCBD78
	// RVA: 0x1113978 Offset: 0x1113978 VA: 0x1113978
	private IEnumerator waitFunc(float waittime, Action callback) { }

	// RVA: 0x1113A28 Offset: 0x1113A28 VA: 0x1113A28
	public void UpdateCommandCriticalCount() { }

	// RVA: 0x1113AE4 Offset: 0x1113AE4 VA: 0x1113AE4
	public void setAtkButtonFlg(bool flg) { }

	// RVA: 0x1113AF0 Offset: 0x1113AF0 VA: 0x1113AF0
	public void PlayBackStar(Action callback) { }

	// RVA: 0x1113500 Offset: 0x1113500 VA: 0x1113500
	public void updateBuffIcon() { }

	// RVA: 0x1113E1C Offset: 0x1113E1C VA: 0x1113E1C
	public void countupStarPoint() { }

	// RVA: 0x1113E20 Offset: 0x1113E20 VA: 0x1113E20
	public void startOpenNpCard() { }

	// RVA: 0x1113EC4 Offset: 0x1113EC4 VA: 0x1113EC4
	public void SetStatusObjArray(BattleServantParamComponent[] statusObjArray) { }

	// RVA: 0x1113ECC Offset: 0x1113ECC VA: 0x1113ECC
	private BattleServantParamComponent GetStatusUiObj(BattleCommandData commandData) { }

	// RVA: 0x110CBC8 Offset: 0x110CBC8 VA: 0x110CBC8
	private int GetServantNumber(BattleCommandData commandData) { }

	[DebuggerHiddenAttribute] // RVA: 0xCCBD88 Offset: 0xCCBD88 VA: 0xCCBD88
	// RVA: 0x1113E54 Offset: 0x1113E54 VA: 0x1113E54
	private IEnumerator colOpenNpCard() { }

	// RVA: 0x1114090 Offset: 0x1114090 VA: 0x1114090
	public void OpenSealedWindow(int markIndex) { }

	// RVA: 0x1114314 Offset: 0x1114314 VA: 0x1114314
	private string GetSealedWindowMessageLocalizationKey(BattleCommandSealStatus.Status status) { }

	// RVA: 0x111437C Offset: 0x111437C VA: 0x111437C
	public void OnCloseSealedWindow() { }

	// RVA: 0x111443C Offset: 0x111443C VA: 0x111443C
	public void endCloseSealedWindow() { }

	// RVA: 0x11144A0 Offset: 0x11144A0 VA: 0x11144A0
	public void OpenTdConfWindow(int markIndex) { }

	// RVA: 0x111473C Offset: 0x111473C VA: 0x111473C
	public void endOpenTdConf() { }

	// RVA: 0x1114740 Offset: 0x1114740 VA: 0x1114740
	public void OnCloseTdConfWindow() { }

	// RVA: 0x1114830 Offset: 0x1114830 VA: 0x1114830
	public void endCloseTdConfWindow() { }

	// RVA: 0x1114894 Offset: 0x1114894 VA: 0x1114894
	public void checkAutoBattle() { }

	// RVA: 0x11148F8 Offset: 0x11148F8 VA: 0x11148F8
	public void selectAutoCard() { }

	// RVA: 0x1114A9C Offset: 0x1114A9C VA: 0x1114A9C
	public void clickBackButton() { }

	// RVA: 0x1114B3C Offset: 0x1114B3C VA: 0x1114B3C
	public void back2Tactical() { }

	// RVA: 0x110B228 Offset: 0x110B228 VA: 0x110B228
	private float FSCardRootOffsetY() { }

	// RVA: 0x1114D50 Offset: 0x1114D50 VA: 0x1114D50
	private Vector2[] FSTutorialArrowCard(Vector2[] arrow) { }

	// RVA: 0x1114E6C Offset: 0x1114E6C VA: 0x1114E6C
	private Rect[] FSTutorialSquareCard(Rect[] square) { }

	// RVA: 0x1114FA8 Offset: 0x1114FA8 VA: 0x1114FA8
	private Vector2[] get_FSTutorialArrow01() { }

	// RVA: 0x1114FB0 Offset: 0x1114FB0 VA: 0x1114FB0
	private Rect[] get_FSTutorialSquare01() { }

	// RVA: 0x1114FB8 Offset: 0x1114FB8 VA: 0x1114FB8
	private Vector2[] get_FSTutorialArrow05() { }

	// RVA: 0x1114FC0 Offset: 0x1114FC0 VA: 0x1114FC0
	private Rect[] get_FSTutorialSquare05() { }

	// RVA: 0x1114FC8 Offset: 0x1114FC8 VA: 0x1114FC8
	private Vector2[] get_FSTutorialArrow31() { }

	// RVA: 0x1114FD0 Offset: 0x1114FD0 VA: 0x1114FD0
	private Rect[] get_FSTutorialSquare32() { }

	// RVA: 0x11150A4 Offset: 0x11150A4 VA: 0x11150A4
	private Vector2 get_FSTutorialArrow22() { }

	// RVA: 0x1115130 Offset: 0x1115130 VA: 0x1115130
	private Rect get_FSTutorialSquare22() { }

	// RVA: 0x11151E4 Offset: 0x11151E4 VA: 0x11151E4
	public void checkTutorial() { }

	// RVA: 0x1115EF4 Offset: 0x1115EF4 VA: 0x1115EF4
	public void callbackCommandTutorial01() { }

	// RVA: 0x11160D0 Offset: 0x11160D0 VA: 0x11160D0
	public void callbackTutorial50() { }

	// RVA: 0x1116138 Offset: 0x1116138 VA: 0x1116138
	private bool checkSpeedButtonTutorial() { }
