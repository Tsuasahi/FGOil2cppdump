// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator // TypeDefIndex: 501
{
	// Fields
	private IActivator m_NextActivator; // 0x10

	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1F9103C Offset: 0x1F9103C VA: 0x1F9103C
	public void .ctor(IActivator next) { }

	// RVA: 0x1F91E8C Offset: 0x1F91E8C VA: 0x1F91E8C Slot: 4
	public IActivator get_NextActivator() { }

	// RVA: 0x1F91E94 Offset: 0x1F91E94 VA: 0x1F91E94 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0xBC85C0 Offset: 0xBC85C0 VA: 0xBC85C0
public interface IActivator // TypeDefIndex: 502
{
	// Properties
	public abstract IActivator NextActivator { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IActivator get_NextActivator();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract IConstructionReturnMessage Activate(IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0xBC85D4 Offset: 0xBC85D4 VA: 0xBC85D4
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 503
{
	// Properties
	public abstract Type ActivationType { get; }
	public abstract string ActivationTypeName { get; }
	public abstract IActivator Activator { get; set; }
	public abstract object[] CallSiteActivationAttributes { get; }
	public abstract IList ContextProperties { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract Type get_ActivationType();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_ActivationTypeName();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract IActivator get_Activator();

	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Activator(IActivator value);

	// RVA: -1 Offset: -1 Slot: 4
	public abstract object[] get_CallSiteActivationAttributes();

	// RVA: -1 Offset: -1 Slot: 5
	public abstract IList get_ContextProperties();
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0xBC85E8 Offset: 0xBC85E8 VA: 0xBC85E8
public interface IConstructionReturnMessage : IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 504
{}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 505
{
	// Fields
	private IList _contextProperties; // 0x10

	// Methods

	// RVA: 0x1F92AD8 Offset: 0x1F92AD8 VA: 0x1F92AD8
	public void .ctor(IList contextProperties) { }

	// RVA: 0x1F92B04 Offset: 0x1F92B04 VA: 0x1F92B04 Slot: 8
	public bool IsContextOK(Context ctx, IConstructionCallMessage ctor) { }

	// RVA: 0x1F92B0C Offset: 0x1F92B0C VA: 0x1F92B0C Slot: 7
	public void GetPropertiesForNewContext(IConstructionCallMessage ctor) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 506
{
	// Properties
	public IActivator NextActivator { get; }

	// Methods

	// RVA: 0x1F92EA4 Offset: 0x1F92EA4 VA: 0x1F92EA4 Slot: 7
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }

	// RVA: 0x1F93380 Offset: 0x1F93380 VA: 0x1F93380 Slot: 5
	public override object InitializeLifetimeService() { }

	// RVA: 0x1F9368C Offset: 0x1F9368C VA: 0x1F9368C Slot: 6
	public IActivator get_NextActivator() { }
}

// Namespace: System.Runtime.Remoting.Activation
[ComVisibleAttribute] // RVA: 0xBC85FC Offset: 0xBC85FC VA: 0xBC85FC
[Serializable]
public sealed class UrlAttribute : ContextAttribute // TypeDefIndex: 507
{
	// Fields
	private string url; // 0x18

	// Properties
	public string UrlValue { get; }

	// Methods

	// RVA: 0x1F90468 Offset: 0x1F90468 VA: 0x1F90468
	public string get_UrlValue() { }

	// RVA: 0x1F936F4 Offset: 0x1F936F4 VA: 0x1F936F4 Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1F937A0 Offset: 0x1F937A0 VA: 0x1F937A0 Slot: 2
	public override int GetHashCode() { }

	[ComVisibleAttribute] // RVA: 0xBCD114 Offset: 0xBCD114 VA: 0xBCD114
	// RVA: 0x1F937D0 Offset: 0x1F937D0 VA: 0x1F937D0 Slot: 14
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }

	[ComVisibleAttribute] // RVA: 0xBCD128 Offset: 0xBCD128 VA: 0xBCD128
	// RVA: 0x1F937D4 Offset: 0x1F937D4 VA: 0x1F937D4 Slot: 15
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 508
{
	// Fields
	private object[] channelData; // 0x10

	// Properties
	public object[] ChannelData { get; }

	// Methods

	// RVA: 0x1F943C0 Offset: 0x1F943C0 VA: 0x1F943C0
	public void .ctor() { }

	// RVA: 0x1F94864 Offset: 0x1F94864 VA: 0x1F94864
	public void .ctor(object remoteChannelData) { }

	// RVA: 0x1F9492C Offset: 0x1F9492C VA: 0x1F9492C Slot: 4
	public object[] get_ChannelData() { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC8610 Offset: 0xBC8610 VA: 0xBC8610
public sealed class ChannelServices // TypeDefIndex: 509
{
	// Fields
	private static ArrayList registeredChannels; // 0x0
	private static ArrayList delayedClientChannels; // 0x8
	private static CrossContextChannel _crossContextSink; // 0x10
	internal static string CrossContextUrl; // 0x18
	private static IList oldStartModeTypes; // 0x20

	// Properties
	internal static CrossContextChannel CrossContextChannel { get; }

	// Methods

	// RVA: 0x1F94D90 Offset: 0x1F94D90 VA: 0x1F94D90
	private static void .cctor() { }

	// RVA: 0x1F94F38 Offset: 0x1F94F38 VA: 0x1F94F38
	internal static CrossContextChannel get_CrossContextChannel() { }

	// RVA: 0x1F94FA0 Offset: 0x1F94FA0 VA: 0x1F94FA0
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri) { }

	// RVA: 0x1F958A0 Offset: 0x1F958A0 VA: 0x1F958A0
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri) { }

	[ObsoleteAttribute] // RVA: 0xBCD13C Offset: 0xBCD13C VA: 0xBCD13C
	// RVA: 0x1F95A98 Offset: 0x1F95A98 VA: 0x1F95A98
	public static void RegisterChannel(IChannel chnl) { }

	// RVA: 0x1F95B00 Offset: 0x1F95B00 VA: 0x1F95B00
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity) { }

	// RVA: 0x1F964D0 Offset: 0x1F964D0 VA: 0x1F964D0
	internal static void RegisterChannelConfig(ChannelData channel) { }

	// RVA: 0x1F97348 Offset: 0x1F97348 VA: 0x1F97348
	private static object CreateProvider(ProviderData prov) { }

	// RVA: 0x1F9777C Offset: 0x1F9777C VA: 0x1F9777C
	public static IMessage SyncDispatchMessage(IMessage msg) { }

	// RVA: 0x1F97854 Offset: 0x1F97854 VA: 0x1F97854
	private static ReturnMessage CheckIncomingMessage(IMessage msg) { }

	// RVA: 0x1F97BB0 Offset: 0x1F97BB0 VA: 0x1F97BB0
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg) { }

	// RVA: 0x1F982BC Offset: 0x1F982BC VA: 0x1F982BC
	private static bool IsLocalCall(IMessage callMsg) { }

	// RVA: 0x1F94434 Offset: 0x1F94434 VA: 0x1F94434
	internal static object[] GetCurrentChannelInfo() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData // TypeDefIndex: 510
{
	// Fields
	private object _ContextID; // 0x10
	private int _DomainID; // 0x18
	private string _processGuid; // 0x20

	// Properties
	internal int DomainID { get; }
	internal string ProcessID { get; }

	// Methods

	// RVA: 0x1F98524 Offset: 0x1F98524 VA: 0x1F98524
	internal void .ctor(int domainId) { }

	// RVA: 0x1F98768 Offset: 0x1F98768 VA: 0x1F98768
	internal int get_DomainID() { }

	// RVA: 0x1F98760 Offset: 0x1F98760 VA: 0x1F98760
	internal string get_ProcessID() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelReceiver, IChannelSender // TypeDefIndex: 511
{
	// Fields
	private static object s_lock; // 0x0

	// Properties
	public virtual string ChannelName { get; }
	public virtual int ChannelPriority { get; }
	public virtual object ChannelData { get; }

	// Methods

	// RVA: 0x1F982C4 Offset: 0x1F982C4 VA: 0x1F982C4
	public void .ctor() { }

	// RVA: 0x1F982CC Offset: 0x1F982CC VA: 0x1F982CC
	private static void .cctor() { }

	// RVA: 0x1F98338 Offset: 0x1F98338 VA: 0x1F98338
	internal static void RegisterCrossAppDomainChannel() { }

	// RVA: 0x1F98448 Offset: 0x1F98448 VA: 0x1F98448 Slot: 9
	public virtual string get_ChannelName() { }

	// RVA: 0x1F98490 Offset: 0x1F98490 VA: 0x1F98490 Slot: 10
	public virtual int get_ChannelPriority() { }

	// RVA: 0x1F98498 Offset: 0x1F98498 VA: 0x1F98498 Slot: 11
	public virtual object get_ChannelData() { }

	// RVA: 0x1F985C8 Offset: 0x1F985C8 VA: 0x1F985C8 Slot: 12
	public virtual void StartListening(object data) { }

	// RVA: 0x1F985CC Offset: 0x1F985CC VA: 0x1F985CC Slot: 13
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri) { }
}

// Namespace: System.Runtime.Remoting.Channels
[MonoTODOAttribute] // RVA: 0xBC8624 Offset: 0xBC8624 VA: 0xBC8624
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 512
{
	// Fields
	private static Hashtable s_sinks; // 0x0
	private static MethodInfo processMessageMethod; // 0x8
	private int _domainID; // 0x10

	// Properties
	internal int TargetDomainId { get; }

	// Methods

	// RVA: 0x1F98A60 Offset: 0x1F98A60 VA: 0x1F98A60
	internal void .ctor(int domainID) { }

	// RVA: 0x1F98A8C Offset: 0x1F98A8C VA: 0x1F98A8C
	private static void .cctor() { }

	// RVA: 0x1F98770 Offset: 0x1F98770 VA: 0x1F98770
	internal static CrossAppDomainSink GetSink(int domainID) { }

	// RVA: 0x1F98B64 Offset: 0x1F98B64 VA: 0x1F98B64
	internal int get_TargetDomainId() { }

	// RVA: 0x1F98B6C Offset: 0x1F98B6C VA: 0x1F98B6C
	private static CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg) { }

	// RVA: 0x1F98CF0 Offset: 0x1F98CF0 VA: 0x1F98CF0 Slot: 6
	public virtual IMessage SyncProcessMessage(IMessage msgRequest) { }

	// RVA: 0x1F991C0 Offset: 0x1F991C0 VA: 0x1F991C0 Slot: 7
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink) { }

	// RVA: 0x1F99270 Offset: 0x1F99270 VA: 0x1F99270
	public void SendAsyncMessage(object data) { }
}

// Namespace: 
private struct CrossAppDomainSink.ProcessMessageRes // TypeDefIndex: 513
{
	// Fields
	public byte[] arrResponse; // 0x0
	public CADMethodReturnMessage cadMrm; // 0x8
}

// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer // TypeDefIndex: 514
{
	// Methods

	// RVA: 0x1F9496C Offset: 0x1F9496C VA: 0x1F9496C
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg) { }

	// RVA: 0x1F94AC8 Offset: 0x1F94AC8 VA: 0x1F94AC8
	internal static MemoryStream SerializeMessage(IMessage msg) { }

	// RVA: 0x1F94BD4 Offset: 0x1F94BD4 VA: 0x1F94BD4
	internal static MemoryStream SerializeObject(object obj) { }

	// RVA: 0x1F94CE0 Offset: 0x1F94CE0 VA: 0x1F94CE0
	internal static object DeserializeObject(MemoryStream mem) { }
}

// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest // TypeDefIndex: 515
{
	// Fields
	internal IMessageSink ReplySink; // 0x10
	internal IMessage MsgRequest; // 0x18

	// Methods

	// RVA: 0x1F94934 Offset: 0x1F94934 VA: 0x1F94934
	public void .ctor(IMessage msgRequest, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC865C Offset: 0xBC865C VA: 0xBC865C
public interface IChannel // TypeDefIndex: 516
{
	// Properties
	public abstract string ChannelName { get; }
	public abstract int ChannelPriority { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_ChannelName();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_ChannelPriority();
}

// Namespace: System.Runtime.Remoting.Channels
[DefaultMemberAttribute] // RVA: 0xBC8670 Offset: 0xBC8670 VA: 0xBC8670
[ComVisibleAttribute] // RVA: 0xBC8670 Offset: 0xBC8670 VA: 0xBC8670
public interface IChannelDataStore // TypeDefIndex: 517
{}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC86C0 Offset: 0xBC86C0 VA: 0xBC86C0
public interface IChannelReceiver : IChannel // TypeDefIndex: 518
{
	// Properties
	public abstract object ChannelData { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_ChannelData();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void StartListening(object data);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC86D4 Offset: 0xBC86D4 VA: 0xBC86D4
public interface IChannelSender : IChannel // TypeDefIndex: 519
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC86E8 Offset: 0xBC86E8 VA: 0xBC86E8
public interface IClientChannelSinkProvider // TypeDefIndex: 520
{
	// Properties
	public abstract IClientChannelSinkProvider Next { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IClientChannelSinkProvider value);
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 521
{
	// Properties
	public abstract bool IsSecured { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_IsSecured(bool value);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC86FC Offset: 0xBC86FC VA: 0xBC86FC
public interface IServerChannelSinkProvider // TypeDefIndex: 522
{
	// Properties
	public abstract IServerChannelSinkProvider Next { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IServerChannelSinkProvider value);
}

// Namespace: System.Runtime.Remoting.Channels
[ComVisibleAttribute] // RVA: 0xBC8710 Offset: 0xBC8710 VA: 0xBC8710
public class SinkProviderData // TypeDefIndex: 523
{
	// Fields
	private string sinkName; // 0x10
	private ArrayList children; // 0x18
	private Hashtable properties; // 0x20

	// Properties
	public IList Children { get; }
	public IDictionary Properties { get; }

	// Methods

	// RVA: 0x1F993F0 Offset: 0x1F993F0 VA: 0x1F993F0
	public void .ctor(string name) { }

	// RVA: 0x1F9948C Offset: 0x1F9948C VA: 0x1F9948C
	public IList get_Children() { }

	// RVA: 0x1F99494 Offset: 0x1F99494 VA: 0x1F99494
	public IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC8724 Offset: 0xBC8724 VA: 0xBC8724
public class Context // TypeDefIndex: 524
{
	// Fields
	private int domain_id; // 0x10
	private int context_id; // 0x14
	private UIntPtr static_data; // 0x18
	private static IMessageSink default_server_context_sink; // 0x0
	private IMessageSink server_context_sink_chain; // 0x20
	private IMessageSink client_context_sink_chain; // 0x28
	private object[] datastore; // 0x30
	private ArrayList context_properties; // 0x38
	private bool frozen; // 0x40
	private static int global_count; // 0x8
	private static Hashtable namedSlots; // 0x10
	private static DynamicPropertyCollection global_dynamic_properties; // 0x18
	private DynamicPropertyCollection context_dynamic_properties; // 0x48
	private ContextCallbackObject callback_object; // 0x50

	// Properties
	public static Context DefaultContext { get; }
	public virtual int ContextID { get; }
	public virtual IContextProperty[] ContextProperties { get; }
	internal bool IsDefaultContext { get; }
	internal bool NeedsContextSink { get; }
	internal static bool HasGlobalDynamicSinks { get; }
	internal bool HasDynamicSinks { get; }
	internal bool HasExitSinks { get; }

	// Methods

	// RVA: 0x1F9DC8C Offset: 0x1F9DC8C VA: 0x1F9DC8C
	public void .ctor() { }

	// RVA: 0x1F9DD3C Offset: 0x1F9DD3C VA: 0x1F9DD3C
	private static void .cctor() { }

	// RVA: 0x1F9DDA8 Offset: 0x1F9DDA8 VA: 0x1F9DDA8 Slot: 1
	protected override void Finalize() { }

	// RVA: 0x1F9DDB0 Offset: 0x1F9DDB0 VA: 0x1F9DDB0
	public static Context get_DefaultContext() { }

	// RVA: 0x1F9DDB8 Offset: 0x1F9DDB8 VA: 0x1F9DDB8 Slot: 4
	public virtual int get_ContextID() { }

	// RVA: 0x1F9DDC0 Offset: 0x1F9DDC0 VA: 0x1F9DDC0 Slot: 5
	public virtual IContextProperty[] get_ContextProperties() { }

	// RVA: 0x1F9DEEC Offset: 0x1F9DEEC VA: 0x1F9DEEC
	internal bool get_IsDefaultContext() { }

	// RVA: 0x1F9DEFC Offset: 0x1F9DEFC VA: 0x1F9DEFC
	internal bool get_NeedsContextSink() { }

	// RVA: 0x1F9E054 Offset: 0x1F9E054 VA: 0x1F9E054
	public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx) { }

	// RVA: 0x1F9E5B8 Offset: 0x1F9E5B8 VA: 0x1F9E5B8
	public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx) { }

	// RVA: 0x1F9E0E4 Offset: 0x1F9E0E4 VA: 0x1F9E0E4
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx) { }

	// RVA: 0x1F9E900 Offset: 0x1F9E900 VA: 0x1F9E900
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x1F9F090 Offset: 0x1F9F090 VA: 0x1F9F090
	internal static bool get_HasGlobalDynamicSinks() { }

	// RVA: 0x1F9F15C Offset: 0x1F9F15C VA: 0x1F9F15C
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }

	// RVA: 0x1F9F204 Offset: 0x1F9F204 VA: 0x1F9F204
	internal bool get_HasDynamicSinks() { }

	// RVA: 0x1F9F258 Offset: 0x1F9F258 VA: 0x1F9F258
	internal bool get_HasExitSinks() { }

	// RVA: 0x1F9F67C Offset: 0x1F9F67C VA: 0x1F9F67C Slot: 6
	public virtual IContextProperty GetProperty(string name) { }

	// RVA: 0x1F9FA38 Offset: 0x1F9FA38 VA: 0x1F9FA38 Slot: 7
	public virtual void SetProperty(IContextProperty prop) { }

	// RVA: 0x1F9FB94 Offset: 0x1F9FB94 VA: 0x1F9FB94 Slot: 8
	public virtual void Freeze() { }

	// RVA: 0x1F9FEB8 Offset: 0x1F9FEB8 VA: 0x1F9FEB8 Slot: 3
	public override string ToString() { }

	// RVA: 0x1F91CC0 Offset: 0x1F91CC0 VA: 0x1F91CC0
	internal IMessageSink GetServerContextSinkChain() { }

	// RVA: 0x1F9F314 Offset: 0x1F9F314 VA: 0x1F9F314
	internal IMessageSink GetClientContextSinkChain() { }

	// RVA: 0x1F9964C Offset: 0x1F9964C VA: 0x1F9964C
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute) { }

	// RVA: 0x1F9FF88 Offset: 0x1F9FF88 VA: 0x1F9FF88
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject) { }

	// RVA: 0x1F92AD0 Offset: 0x1F92AD0 VA: 0x1F92AD0
	internal static Context SwitchToContext(Context newContext) { }

	// RVA: 0x1F92224 Offset: 0x1F92224 VA: 0x1F92224
	internal static Context CreateNewContext(IConstructionCallMessage msg) { }

	// RVA: 0x1FA02FC Offset: 0x1FA02FC VA: 0x1FA02FC
	public void DoCallBack(CrossContextDelegate deleg) { }

	// RVA: 0x1FA0434 Offset: 0x1FA0434 VA: 0x1FA0434
	public static LocalDataStoreSlot AllocateDataSlot() { }

	// RVA: 0x1FA0494 Offset: 0x1FA0494 VA: 0x1FA0494
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name) { }

	// RVA: 0x1FA05DC Offset: 0x1FA05DC VA: 0x1FA05DC
	public static void FreeNamedDataSlot(string name) { }

	// RVA: 0x1FA0724 Offset: 0x1FA0724 VA: 0x1FA0724
	public static object GetData(LocalDataStoreSlot slot) { }

	// RVA: 0x1FA088C Offset: 0x1FA088C VA: 0x1FA088C
	public static LocalDataStoreSlot GetNamedDataSlot(string name) { }

	// RVA: 0x1FA0A10 Offset: 0x1FA0A10 VA: 0x1FA0A10
	public static void SetData(LocalDataStoreSlot slot, object data) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 525
{
	// Fields
	private ArrayList _properties; // 0x10

	// Properties
	public bool HasProperties { get; }

	// Methods

	// RVA: 0x1F9E898 Offset: 0x1F9E898 VA: 0x1F9E898
	public void .ctor() { }

	// RVA: 0x1F9E010 Offset: 0x1F9E010 VA: 0x1F9E010
	public bool get_HasProperties() { }

	// RVA: 0x1F9E2FC Offset: 0x1F9E2FC VA: 0x1F9E2FC
	public bool RegisterDynamicProperty(IDynamicProperty prop) { }

	// RVA: 0x1F9E648 Offset: 0x1F9E648 VA: 0x1F9E648
	public bool UnregisterDynamicProperty(string name) { }

	// RVA: 0x1F9EA3C Offset: 0x1F9EA3C VA: 0x1F9EA3C
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async) { }

	// RVA: 0x1FA1BFC Offset: 0x1FA1BFC VA: 0x1FA1BFC
	private int FindProperty(string name) { }
}

// Namespace: 
private class DynamicPropertyCollection.DynamicPropertyReg // TypeDefIndex: 526
{
	// Fields
	public IDynamicProperty Property; // 0x10
	public IDynamicMessageSink Sink; // 0x18

	// Methods

	// RVA: 0x1FA1E68 Offset: 0x1FA1E68 VA: 0x1FA1E68
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 527
{
	// Methods

	// RVA: 0x1FA0428 Offset: 0x1FA0428 VA: 0x1FA0428
	public void .ctor() { }

	// RVA: 0x1FA0430 Offset: 0x1FA0430 VA: 0x1FA0430
	public void DoCallBack(CrossContextDelegate deleg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC8738 Offset: 0xBC8738 VA: 0xBC8738
[AttributeUsageAttribute] // RVA: 0xBC8738 Offset: 0xBC8738 VA: 0xBC8738
[Serializable]
public class ContextAttribute : Attribute, IContextAttribute, IContextProperty // TypeDefIndex: 528
{
	// Fields
	protected string AttributeName; // 0x10

	// Properties
	public virtual string Name { get; }

	// Methods

	// RVA: 0x1FA0C38 Offset: 0x1FA0C38 VA: 0x1FA0C38
	public void .ctor(string name) { }

	// RVA: 0x1FA0C64 Offset: 0x1FA0C64 VA: 0x1FA0C64 Slot: 12
	public virtual string get_Name() { }

	// RVA: 0x1FA0C6C Offset: 0x1FA0C6C VA: 0x1FA0C6C Slot: 0
	public override bool Equals(object o) { }

	// RVA: 0x1FA0D38 Offset: 0x1FA0D38 VA: 0x1FA0D38 Slot: 13
	public virtual void Freeze(Context newContext) { }

	// RVA: 0x1FA0D3C Offset: 0x1FA0D3C VA: 0x1FA0D3C Slot: 2
	public override int GetHashCode() { }

	// RVA: 0x1FA0D50 Offset: 0x1FA0D50 VA: 0x1FA0D50 Slot: 14
	public virtual void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }

	// RVA: 0x1FA0EC8 Offset: 0x1FA0EC8 VA: 0x1FA0EC8 Slot: 15
	public virtual bool IsContextOK(Context ctx, IConstructionCallMessage ctorMsg) { }

	// RVA: 0x1FA102C Offset: 0x1FA102C VA: 0x1FA102C Slot: 16
	public virtual bool IsNewContextOK(Context newCtx) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 529
{
	// Methods

	// RVA: 0x1F94F30 Offset: 0x1F94F30 VA: 0x1F94F30
	public void .ctor() { }

	// RVA: 0x1F97D98 Offset: 0x1F97D98 VA: 0x1F97D98 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1FA1034 Offset: 0x1FA1034 VA: 0x1FA1034 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: 
private class CrossContextChannel.ContextRestoreSink : IMessageSink // TypeDefIndex: 530
{
	// Fields
	private IMessageSink _next; // 0x10
	private Context _context; // 0x18
	private IMessage _call; // 0x20

	// Methods

	// RVA: 0x1FA15B4 Offset: 0x1FA15B4 VA: 0x1FA15B4
	public void .ctor(IMessageSink next, Context context, IMessage call) { }

	// RVA: 0x1FA15F4 Offset: 0x1FA15F4 VA: 0x1FA15F4 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }

	// RVA: 0x1FA1944 Offset: 0x1FA1944 VA: 0x1FA1944 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC8778 Offset: 0xBC8778 VA: 0xBC8778
public interface IContextAttribute // TypeDefIndex: 531
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetPropertiesForNewContext(IConstructionCallMessage msg);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsContextOK(Context ctx, IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC878C Offset: 0xBC878C VA: 0xBC878C
public interface IContextProperty // TypeDefIndex: 532
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Freeze(Context newContext);

	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool IsNewContextOK(Context newCtx);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC87A0 Offset: 0xBC87A0 VA: 0xBC87A0
public interface IContributeClientContextSink // TypeDefIndex: 533
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetClientContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC87B4 Offset: 0xBC87B4 VA: 0xBC87B4
public interface IContributeDynamicSink // TypeDefIndex: 534
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDynamicMessageSink GetDynamicSink();
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC87C8 Offset: 0xBC87C8 VA: 0xBC87C8
public interface IContributeEnvoySink // TypeDefIndex: 535
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC87DC Offset: 0xBC87DC VA: 0xBC87DC
public interface IContributeObjectSink // TypeDefIndex: 536
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC87F0 Offset: 0xBC87F0 VA: 0xBC87F0
public interface IContributeServerContextSink // TypeDefIndex: 537
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetServerContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC8804 Offset: 0xBC8804 VA: 0xBC8804
public interface IDynamicMessageSink // TypeDefIndex: 538
{
	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);

	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC8818 Offset: 0xBC8818 VA: 0xBC8818
public interface IDynamicProperty // TypeDefIndex: 539
{
	// Properties
	public abstract string Name { get; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name();
}

// Namespace: System.Runtime.Remoting.Contexts
[ComVisibleAttribute] // RVA: 0xBC882C Offset: 0xBC882C VA: 0xBC882C
[AttributeUsageAttribute] // RVA: 0xBC882C Offset: 0xBC882C VA: 0xBC882C
[Serializable]
public class SynchronizationAttribute : ContextAttribute, IContributeClientContextSink, IContributeServerContextSink // TypeDefIndex: 540
{
	// Fields
	private bool _bReEntrant; // 0x18
	private int _flavor; // 0x1C
	private int _lockCount; // 0x20
	private Mutex _mutex; // 0x28
	private Thread _ownerThread; // 0x30

	// Properties
	public virtual bool IsReEntrant { get; }
	public virtual bool Locked { set; }

	// Methods

	// RVA: 0x1FA1E70 Offset: 0x1FA1E70 VA: 0x1FA1E70
	public void .ctor() { }

	// RVA: 0x1FA1E7C Offset: 0x1FA1E7C VA: 0x1FA1E7C
	public void .ctor(int flag, bool reEntrant) { }

	// RVA: 0x1FA1F78 Offset: 0x1FA1F78 VA: 0x1FA1F78 Slot: 19
	public virtual bool get_IsReEntrant() { }

	// RVA: 0x1FA1F80 Offset: 0x1FA1F80 VA: 0x1FA1F80 Slot: 20
	public virtual void set_Locked(bool value) { }

	// RVA: 0x1FA2244 Offset: 0x1FA2244 VA: 0x1FA2244
	internal void AcquireLock() { }

	// RVA: 0x1FA2134 Offset: 0x1FA2134 VA: 0x1FA2134
	internal void ReleaseLock() { }

	[ComVisibleAttribute] // RVA: 0xBCD174 Offset: 0xBCD174 VA: 0xBCD174
	// RVA: 0x1FA233C Offset: 0x1FA233C VA: 0x1FA233C Slot: 14
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }

	// RVA: 0x1FA2494 Offset: 0x1FA2494 VA: 0x1FA2494 Slot: 21
	public virtual IMessageSink GetClientContextSink(IMessageSink nextSink) { }

	// RVA: 0x1FA253C Offset: 0x1FA253C VA: 0x1FA253C Slot: 22
	public virtual IMessageSink GetServerContextSink(IMessageSink nextSink) { }

	[ComVisibleAttribute] // RVA: 0xBCD188 Offset: 0xBCD188 VA: 0xBCD188
	// RVA: 0x1FA25E4 Offset: 0x1FA25E4 VA: 0x1FA25E4 Slot: 15
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }

	// RVA: 0x1FA26D8 Offset: 0x1FA26D8 VA: 0x1FA26D8
	internal static void ExitContext() { }

	// RVA: 0x1FA2800 Offset: 0x1FA2800 VA: 0x1FA2800
	internal static void EnterContext() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedClientContextSink : IMessageSink // TypeDefIndex: 541
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x18

	// Methods

	// RVA: 0x1FA2504 Offset: 0x1FA2504 VA: 0x1FA2504
	public void .ctor(IMessageSink next, SynchronizationAttribute att) { }

	// RVA: 0x1FA2928 Offset: 0x1FA2928 VA: 0x1FA2928 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1FA2ABC Offset: 0x1FA2ABC VA: 0x1FA2ABC Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedServerContextSink : IMessageSink // TypeDefIndex: 542
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x18

	// Methods

	// RVA: 0x1FA25AC Offset: 0x1FA25AC VA: 0x1FA25AC
	public void .ctor(IMessageSink next, SynchronizationAttribute att) { }

	// RVA: 0x1FA2E84 Offset: 0x1FA2E84 VA: 0x1FA2E84 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1FA2FA0 Offset: 0x1FA2FA0 VA: 0x1FA2FA0 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedContextReplySink : IMessageSink // TypeDefIndex: 543
{
	// Fields
	private IMessageSink _next; // 0x10
	private bool _newLock; // 0x18
	private SynchronizationAttribute _att; // 0x20

	// Methods

	// RVA: 0x1FA2A74 Offset: 0x1FA2A74 VA: 0x1FA2A74
	public void .ctor(IMessageSink next, SynchronizationAttribute att, bool newLock) { }

	// RVA: 0x1FA2C84 Offset: 0x1FA2C84 VA: 0x1FA2C84 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }

	// RVA: 0x1FA2CEC Offset: 0x1FA2CEC VA: 0x1FA2CEC Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0xBC886C Offset: 0xBC886C VA: 0xBC886C
public interface ILease // TypeDefIndex: 544
{
	// Properties
	public abstract TimeSpan CurrentLeaseTime { get; }
	public abstract LeaseState CurrentState { get; }
	public abstract TimeSpan InitialLeaseTime { set; }
	public abstract TimeSpan RenewOnCallTime { get; set; }
	public abstract TimeSpan SponsorshipTimeout { set; }

	// Methods

	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan get_CurrentLeaseTime();

	// RVA: -1 Offset: -1 Slot: 1
	public abstract LeaseState get_CurrentState();

	// RVA: -1 Offset: -1 Slot: 2
	public abstract void set_InitialLeaseTime(TimeSpan value);

	// RVA: -1 Offset: -1 Slot: 3
	public abstract TimeSpan get_RenewOnCallTime();

	// RVA: -1 Offset: -1 Slot: 4
	public abstract void set_RenewOnCallTime(TimeSpan value);

	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_SponsorshipTimeout(TimeSpan value);

	// RVA: -1 Offset: -1 Slot: 6
	public abstract TimeSpan Renew(TimeSpan renewalTime);
}

// Namespace: System.Runtime.Remoting.Lifetime
[ComVisibleAttribute] // RVA: 0xBC8880 Offset: 0xBC8880 VA: 0xBC8880
public interface ISponsor // TypeDefIndex: 545
{
	// Methods
