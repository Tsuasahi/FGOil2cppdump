
	// RVA: 0x2147E00 Offset: 0x2147E00 VA: 0x2147E00 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD491C4 Offset: 0xD491C4 VA: 0xD491C4
	// RVA: 0x2148034 Offset: 0x2148034 VA: 0x2148034 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD491D4 Offset: 0xD491D4 VA: 0xD491D4
	// RVA: 0x214803C Offset: 0x214803C VA: 0x214803C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD491E4 Offset: 0xD491E4 VA: 0xD491E4
	// RVA: 0x2148044 Offset: 0x2148044 VA: 0x2148044 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD491F4 Offset: 0xD491F4 VA: 0xD491F4
	// RVA: 0x2148058 Offset: 0x2148058 VA: 0x2148058 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class CoinRoomEffectComponent : BaseMonoBehaviour // TypeDefIndex: 9419
{
	// Fields
	[SerializeField] // RVA: 0xCD4698 Offset: 0xCD4698 VA: 0xCD4698
	protected GameObject titleInfoObject; // 0x18
	[SerializeField] // RVA: 0xCD46A8 Offset: 0xCD46A8 VA: 0xCD46A8
	protected GameObject lobbyPanel; // 0x20
	[SerializeField] // RVA: 0xCD46B8 Offset: 0xCD46B8 VA: 0xCD46B8
	protected GameObject coinListPanel; // 0x28
	[SerializeField] // RVA: 0xCD46C8 Offset: 0xCD46C8 VA: 0xCD46C8
	protected GameObject effectCircleObject; // 0x30
	[SerializeField] // RVA: 0xCD46D8 Offset: 0xCD46D8 VA: 0xCD46D8
	protected GameObject coinPartObject; // 0x38
	[SerializeField] // RVA: 0xCD46E8 Offset: 0xCD46E8 VA: 0xCD46E8
	protected GameObject energyPartLoopObject; // 0x40
	[SerializeField] // RVA: 0xCD46F8 Offset: 0xCD46F8 VA: 0xCD46F8
	protected GameObject acquiredEffect; // 0x48
	[SerializeField] // RVA: 0xCD4708 Offset: 0xCD4708 VA: 0xCD4708
	protected GameObject gaugeObject; // 0x50
	[SerializeField] // RVA: 0xCD4718 Offset: 0xCD4718 VA: 0xCD4718
	protected UISlider gaugeSlider; // 0x58
	[SerializeField] // RVA: 0xCD4728 Offset: 0xCD4728 VA: 0xCD4728
	private string arrivedPlaySeName; // 0x60
	[SerializeField] // RVA: 0xCD4738 Offset: 0xCD4738 VA: 0xCD4738
	private float arrivedPlaySeIntervalTime; // 0x68
	[SerializeField] // RVA: 0xCD4748 Offset: 0xCD4748 VA: 0xCD4748
	private int energyPartLoopRateOverTimeMax; // 0x6C
	private UserCoinRoomEntity beforeEntity; // 0x70
	private UserCoinRoomEntity afterEntity; // 0x78
	private bool isAcquired; // 0x80
	private int TARGET_ITEM_ID; // 0x84
	private Dictionary<int, SelectedUserSvtCoin> selectedCoinDic; // 0x88
	private SimpleAnimation circleAnimation; // 0x90
	private string stateName; // 0x98
	private Action endCallBack; // 0xA0
	private bool isEffectEnd; // 0xA8
	protected CoinRoomEffectComponent.State state; // 0xAC
	[CompilerGeneratedAttribute] // RVA: 0xCD4758 Offset: 0xCD4758 VA: 0xCD4758
	private static Func<KeyValuePair<int, SelectedUserSvtCoin>, int> <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x21480C0 Offset: 0x21480C0 VA: 0x21480C0
	public void .ctor() { }

	// RVA: 0x2148184 Offset: 0x2148184 VA: 0x2148184
	private void Update() { }

	// RVA: 0x21483F0 Offset: 0x21483F0 VA: 0x21483F0
	public void OpenEffect(UserCoinRoomEntity beforeUserCoinRoomEntity, Dictionary<int, SelectedUserSvtCoin> selectedCoinDic) { }

	// RVA: 0x2148560 Offset: 0x2148560 VA: 0x2148560
	private void StartPutInAnimation() { }

	// RVA: 0x21488F0 Offset: 0x21488F0 VA: 0x21488F0
	private ParticleSystem.EmissionModule GetEmissionModule(GameObject targetObject) { }

	// RVA: 0x21489F8 Offset: 0x21489F8 VA: 0x21489F8
	public void NextAcquiredEffect() { }

	[DebuggerHiddenAttribute] // RVA: 0xD3C1AC Offset: 0xD3C1AC VA: 0xD3C1AC
	// RVA: 0x2148964 Offset: 0x2148964 VA: 0x2148964
	private IEnumerator PlayCoinArrivedSE(int totalCount) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C1BC Offset: 0xD3C1BC VA: 0xD3C1BC
	// RVA: 0x2148BA0 Offset: 0x2148BA0 VA: 0x2148BA0
	private void <Update>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C1CC Offset: 0xD3C1CC VA: 0xD3C1CC
	// RVA: 0x2148C6C Offset: 0x2148C6C VA: 0x2148C6C
	private static int <StartPutInAnimation>m__1(KeyValuePair<int, SelectedUserSvtCoin> x) { }
}

// Namespace: 
protected enum CoinRoomEffectComponent.State // TypeDefIndex: 9420
{
	// Fields
	public int value__; // 0x0
	public const CoinRoomEffectComponent.State INIT = 0;
	public const CoinRoomEffectComponent.State EFFECT = 1;
	public const CoinRoomEffectComponent.State CLOSE = 2;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB06B0 Offset: 0xCB06B0 VA: 0xCB06B0
private sealed class CoinRoomEffectComponent.<NextAcquiredEffect>c__AnonStorey1 // TypeDefIndex: 9421
{
	// Fields
	internal QuestRewardInfo questRewardInfo; // 0x10
	internal CoinRoomEffectComponent $this; // 0x18
	private static Action <>f__am$cache0; // 0x0

	// Methods

	// RVA: 0x2148B90 Offset: 0x2148B90 VA: 0x2148B90
	public void .ctor() { }

	// RVA: 0x2148CE0 Offset: 0x2148CE0 VA: 0x2148CE0
	internal void <>m__0() { }

	// RVA: 0x2148E30 Offset: 0x2148E30 VA: 0x2148E30
	private static void <>m__1() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB06C0 Offset: 0xCB06C0 VA: 0xCB06C0
private sealed class CoinRoomEffectComponent.<PlayCoinArrivedSE>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9422
{
	// Fields
	internal ParticleSystem <particle>__0; // 0x10
	internal float <lifeTime>__0; // 0x18
	internal float <duration>__0; // 0x1C
	internal int totalCount; // 0x20
	internal float <playIntervalTime>__0; // 0x24
	internal bool <isGaugeAnimation>__0; // 0x28
	internal CoinRoomGaugeEffectComponent <gaugeEffectComponent>__0; // 0x30
	internal float <totalTime>__0; // 0x38
	internal float <time>__0; // 0x3C
	internal int <playCount>__0; // 0x40
	internal CoinRoomEffectComponent $this; // 0x48
	internal object $current; // 0x50
	internal bool $disposing; // 0x58
	internal int $PC; // 0x5C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD49204 Offset: 0xD49204 VA: 0xD49204
	// RVA: 0x2148B98 Offset: 0x2148B98 VA: 0x2148B98
	public void .ctor() { }

	// RVA: 0x2148F20 Offset: 0x2148F20 VA: 0x2148F20 Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49214 Offset: 0xD49214 VA: 0xD49214
	// RVA: 0x2149694 Offset: 0x2149694 VA: 0x2149694 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49224 Offset: 0xD49224 VA: 0xD49224
	// RVA: 0x214969C Offset: 0x214969C VA: 0x214969C Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49234 Offset: 0xD49234 VA: 0xD49234
	// RVA: 0x21496A4 Offset: 0x21496A4 VA: 0x21496A4 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49244 Offset: 0xD49244 VA: 0xD49244
	// RVA: 0x21496B8 Offset: 0x21496B8 VA: 0x21496B8 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class CoinRoomGaugeEffectComponent : MonoBehaviour // TypeDefIndex: 9423
{
	// Fields
	[SerializeField] // RVA: 0xCD4768 Offset: 0xCD4768 VA: 0xCD4768
	private float gaugeAnimationTime; // 0x18
	[SerializeField] // RVA: 0xCD4778 Offset: 0xCD4778 VA: 0xCD4778
	private float gaugeAnimationDelayTime; // 0x1C
	[SerializeField] // RVA: 0xCD4788 Offset: 0xCD4788 VA: 0xCD4788
	protected UISlider gaugeBarSlider; // 0x20
	protected CoinRoomGaugeEffectComponent.State state; // 0x28

	// Methods

	// RVA: 0x2149720 Offset: 0x2149720 VA: 0x2149720
	public void .ctor() { }

	// RVA: 0x21492F0 Offset: 0x21492F0 VA: 0x21492F0
	public void StartAnimation(int beforePoint, int afterPoint) { }

	// RVA: 0x2149728 Offset: 0x2149728 VA: 0x2149728
	private void UpdateGauge(float alpha) { }

	// RVA: 0x2149784 Offset: 0x2149784 VA: 0x2149784
	private void FinishGauge() { }
}

// Namespace: 
protected enum CoinRoomGaugeEffectComponent.State // TypeDefIndex: 9424
{
	// Fields
	public int value__; // 0x0
	public const CoinRoomGaugeEffectComponent.State INIT = 0;
	public const CoinRoomGaugeEffectComponent.State PLAY = 1;
	public const CoinRoomGaugeEffectComponent.State END = 2;
}

// Namespace: 
public class CoinRoomLobbyComponent : BaseMonoBehaviour // TypeDefIndex: 9425
{
	// Fields
	[SerializeField] // RVA: 0xCD4798 Offset: 0xCD4798 VA: 0xCD4798
	protected CoinRoomSelectCoinComponent coinRoomSelectCoinComponent; // 0x18
	[SerializeField] // RVA: 0xCD47A8 Offset: 0xCD47A8 VA: 0xCD47A8
	protected TitleInfoControl titleInfoControl; // 0x20
	[SerializeField] // RVA: 0xCD47B8 Offset: 0xCD47B8 VA: 0xCD47B8
	protected GameObject coinListPanel; // 0x28
	[SerializeField] // RVA: 0xCD47C8 Offset: 0xCD47C8 VA: 0xCD47C8
	protected GameObject effectCircleObject; // 0x30
	[SerializeField] // RVA: 0xCD47D8 Offset: 0xCD47D8 VA: 0xCD47D8
	protected GameObject gaugeBarObject; // 0x38
	[SerializeField] // RVA: 0xCD47E8 Offset: 0xCD47E8 VA: 0xCD47E8
	protected GameObject energyPartLoopObject; // 0x40
	[SerializeField] // RVA: 0xCD47F8 Offset: 0xCD47F8 VA: 0xCD47F8
	protected UILabel lobbyInfoLabel; // 0x48
	[SerializeField] // RVA: 0xCD4808 Offset: 0xCD4808 VA: 0xCD4808
	protected UILabel lobbyTimeLabel; // 0x50
	[SerializeField] // RVA: 0xCD4818 Offset: 0xCD4818 VA: 0xCD4818
	protected BoxCollider maskCollider; // 0x58
	[SerializeField] // RVA: 0xCD4828 Offset: 0xCD4828 VA: 0xCD4828
	protected UICommonButton selectCoinButton; // 0x60

	// Methods

	// RVA: 0x214979C Offset: 0x214979C VA: 0x214979C
	public void .ctor() { }

	// RVA: 0x21497A4 Offset: 0x21497A4 VA: 0x21497A4
	public void OpenLobby(PlayMakerFSM myFSM) { }

	// RVA: 0x2149D1C Offset: 0x2149D1C VA: 0x2149D1C
	public void EndLoadAsset(AssetData assetData) { }

	// RVA: 0x2149DB0 Offset: 0x2149DB0 VA: 0x2149DB0
	public void OnClickBack() { }

	// RVA: 0x2149F64 Offset: 0x2149F64 VA: 0x2149F64
	public void OnClickHelp() { }

	// RVA: 0x2149BF4 Offset: 0x2149BF4 VA: 0x2149BF4
	private string SetTimeLabel() { }

	// RVA: 0x2149FDC Offset: 0x2149FDC VA: 0x2149FDC
	public void OnClickSelectCoin() { }

	// RVA: 0x214A090 Offset: 0x214A090 VA: 0x214A090
	private void SetSpriteAtlas(GameObject gameObject, List<UIAtlas> atlasList, string name) { }

	// RVA: 0x2149F2C Offset: 0x2149F2C VA: 0x2149F2C
	public void SetMaskCollider(bool flag) { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C1DC Offset: 0xD3C1DC VA: 0xD3C1DC
	// RVA: 0x214A238 Offset: 0x214A238 VA: 0x214A238
	private void <OnClickBack>m__0() { }
}

// Namespace: 
public class CoinRoomRootComponent : SceneRootComponent // TypeDefIndex: 9426
{
	// Fields
	private AssetData assetData; // 0x38
	private bool isAssetLoaded; // 0x40
	protected CoinRoomRootComponent.State state; // 0x44

	// Methods

	// RVA: 0x156D3A8 Offset: 0x156D3A8 VA: 0x156D3A8
	public void .ctor() { }

	// RVA: 0x156D3B0 Offset: 0x156D3B0 VA: 0x156D3B0 Slot: 4
	public override void beginInitialize() { }

	// RVA: 0x156D534 Offset: 0x156D534 VA: 0x156D534 Slot: 5
	public override void beginStartUp(object data) { }

	// RVA: 0x156D578 Offset: 0x156D578 VA: 0x156D578
	public void EndLoadAsset(AssetData assetData) { }

	[DebuggerHiddenAttribute] // RVA: 0xD3C1EC Offset: 0xD3C1EC VA: 0xD3C1EC
	// RVA: 0x156D62C Offset: 0x156D62C VA: 0x156D62C
	private IEnumerator InitUI() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C1FC Offset: 0xD3C1FC VA: 0xD3C1FC
	[DebuggerHiddenAttribute] // RVA: 0xD3C1FC Offset: 0xD3C1FC VA: 0xD3C1FC
	// RVA: 0x156D6A4 Offset: 0x156D6A4 VA: 0x156D6A4
	private void <beginInitialize>__BaseCallProxy0() { }
}

// Namespace: 
protected enum CoinRoomRootComponent.State // TypeDefIndex: 9427
{
	// Fields
	public int value__; // 0x0
	public const CoinRoomRootComponent.State INIT = 0;
	public const CoinRoomRootComponent.State SELECT_COIN = 1;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB06D0 Offset: 0xCB06D0 VA: 0xCB06D0
private sealed class CoinRoomRootComponent.<InitUI>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 9428
{
	// Fields
	internal GameObject <uiRootPrefab>__0; // 0x10
	internal GameObject <createRoot>__0; // 0x18
	internal GameObject <lobbyObject>__0; // 0x20
	internal CoinRoomLobbyComponent <coinRoomLobbyComponent>__0; // 0x28
	internal CoinRoomRootComponent $this; // 0x30
	internal object $current; // 0x38
	internal bool $disposing; // 0x40
	internal int $PC; // 0x44
	private static Func<GameObject, bool> <>f__am$cache0; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xD49254 Offset: 0xD49254 VA: 0xD49254
	// RVA: 0x156D69C Offset: 0x156D69C VA: 0x156D69C
	public void .ctor() { }

	// RVA: 0x156D6AC Offset: 0x156D6AC VA: 0x156D6AC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49264 Offset: 0xD49264 VA: 0xD49264
	// RVA: 0x156D950 Offset: 0x156D950 VA: 0x156D950 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49274 Offset: 0xD49274 VA: 0xD49274
	// RVA: 0x156D958 Offset: 0x156D958 VA: 0x156D958 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49284 Offset: 0xD49284 VA: 0xD49284
	// RVA: 0x156D960 Offset: 0x156D960 VA: 0x156D960 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xD49294 Offset: 0xD49294 VA: 0xD49294
	// RVA: 0x156D974 Offset: 0x156D974 VA: 0x156D974 Slot: 6
	public void Reset() { }

	// RVA: 0x156D9DC Offset: 0x156D9DC VA: 0x156D9DC
	private static bool <>m__0(GameObject x) { }
}

// Namespace: 
public class CoinRoomSelectCoinComponent : BaseMenu // TypeDefIndex: 9429
{
	// Fields
	[SerializeField] // RVA: 0xCD4838 Offset: 0xCD4838 VA: 0xCD4838
	protected CoinRoomCoinListViewManager coinListViewManager; // 0x58
	[SerializeField] // RVA: 0xCD4848 Offset: 0xCD4848 VA: 0xCD4848
	protected CoinRoomEffectComponent coinRoomEffectComponent; // 0x60
	[SerializeField] // RVA: 0xCD4858 Offset: 0xCD4858 VA: 0xCD4858
	protected CoinConfirmDialog confirmDialog; // 0x68
	[SerializeField] // RVA: 0xCD4868 Offset: 0xCD4868 VA: 0xCD4868
	protected CoinConfirmSliderDialog confirmSliderDialog; // 0x70
	[SerializeField] // RVA: 0xCD4878 Offset: 0xCD4878 VA: 0xCD4878
	protected GameObject coinListPanel; // 0x78
	[SerializeField] // RVA: 0xCD4888 Offset: 0xCD4888 VA: 0xCD4888
	protected UILabel subTitle; // 0x80
	private UserCoinRoomEntity beforeUserCoinRoomEntity; // 0x88
	protected CoinRoomSelectCoinComponent.State state; // 0x90

	// Methods

	// RVA: 0x156DA70 Offset: 0x156DA70 VA: 0x156DA70
	public void .ctor() { }

	// RVA: 0x156DAD8 Offset: 0x156DAD8 VA: 0x156DAD8
	public void Init() { }

	// RVA: 0x156DB58 Offset: 0x156DB58 VA: 0x156DB58
	public void OpenSelectCoinList() { }

	// RVA: 0x156DD04 Offset: 0x156DD04 VA: 0x156DD04
	protected void EndOpen() { }

	// RVA: 0x156DD40 Offset: 0x156DD40 VA: 0x156DD40
	public void OnClickDecide() { }

	// RVA: 0x156E058 Offset: 0x156E058 VA: 0x156E058
	private void RequestCoinRoomPut() { }

	// RVA: 0x156E23C Offset: 0x156E23C VA: 0x156E23C
	private void EndRequest(string result) { }

	// RVA: 0x156E3C8 Offset: 0x156E3C8 VA: 0x156E3C8
	public void Close() { }

	// RVA: 0x156E3C4 Offset: 0x156E3C4 VA: 0x156E3C4
	private void RequestNG() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C234 Offset: 0xD3C234 VA: 0xD3C234
	// RVA: 0x156E3CC Offset: 0x156E3CC VA: 0x156E3CC
	private void <OnClickDecide>m__0() { }
}

// Namespace: 
protected enum CoinRoomSelectCoinComponent.State // TypeDefIndex: 9430
{
	// Fields
	public int value__; // 0x0
	public const CoinRoomSelectCoinComponent.State INIT = 0;
	public const CoinRoomSelectCoinComponent.State OPEN = 1;
	public const CoinRoomSelectCoinComponent.State INPUT = 2;
	public const CoinRoomSelectCoinComponent.State CLOSE = 3;
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB06E0 Offset: 0xCB06E0 VA: 0xCB06E0
private sealed class CoinRoomSelectCoinComponent.<EndRequest>c__AnonStorey0 // TypeDefIndex: 9431
{
	// Fields
	internal Dictionary<int, SelectedUserSvtCoin> selectedValue; // 0x10
	internal CoinRoomSelectCoinComponent $this; // 0x18

	// Methods

	// RVA: 0x156E3BC Offset: 0x156E3BC VA: 0x156E3BC
	public void .ctor() { }

	// RVA: 0x156E484 Offset: 0x156E484 VA: 0x156E484
	internal void <>m__0() { }
}

// Namespace: 
public class CoinRoomSortSelectManager : BaseDialog // TypeDefIndex: 9432
{
	// Fields
	[SerializeField] // RVA: 0xCD4898 Offset: 0xCD4898 VA: 0xCD4898
	private UILabel titleLabel; // 0x58
	[SerializeField] // RVA: 0xCD48A8 Offset: 0xCD48A8 VA: 0xCD48A8
	private UILabel title2Label; // 0x60
	[SerializeField] // RVA: 0xCD48B8 Offset: 0xCD48B8 VA: 0xCD48B8
	private UILabel explanationLabel; // 0x68
	[SerializeField] // RVA: 0xCD48C8 Offset: 0xCD48C8 VA: 0xCD48C8
	private UILabel explanationLabel2; // 0x70
	[SerializeField] // RVA: 0xCD48D8 Offset: 0xCD48D8 VA: 0xCD48D8
	private UICommonButton decideButton; // 0x78
	[SerializeField] // RVA: 0xCD48E8 Offset: 0xCD48E8 VA: 0xCD48E8
	private UILabel decideLabel; // 0x80
	[SerializeField] // RVA: 0xCD48F8 Offset: 0xCD48F8 VA: 0xCD48F8
	private UICommonButton cancelButton; // 0x88
	[SerializeField] // RVA: 0xCD4908 Offset: 0xCD4908 VA: 0xCD4908
	private UILabel cancelLabel; // 0x90
	[SerializeField] // RVA: 0xCD4918 Offset: 0xCD4918 VA: 0xCD4918
	private UICommonButton sortDecideButton; // 0x98
	[SerializeField] // RVA: 0xCD4928 Offset: 0xCD4928 VA: 0xCD4928
	private UILabel sortDecideLabel; // 0xA0
	[SerializeField] // RVA: 0xCD4938 Offset: 0xCD4938 VA: 0xCD4938
	private UICommonButton sortCancelButton; // 0xA8
	[SerializeField] // RVA: 0xCD4948 Offset: 0xCD4948 VA: 0xCD4948
	private UILabel sortCancelLabel; // 0xB0
	[SerializeField] // RVA: 0xCD4958 Offset: 0xCD4958 VA: 0xCD4958
	private UICommonButton clearButton; // 0xB8
	[SerializeField] // RVA: 0xCD4968 Offset: 0xCD4968 VA: 0xCD4968
	private UILabel clearLabel; // 0xC0
	[SerializeField] // RVA: 0xCD4978 Offset: 0xCD4978 VA: 0xCD4978
	private UICommonButton resetButton; // 0xC8
	[SerializeField] // RVA: 0xCD4988 Offset: 0xCD4988 VA: 0xCD4988
	private UILabel resetLabel; // 0xD0
	[SerializeField] // RVA: 0xCD4998 Offset: 0xCD4998 VA: 0xCD4998
	private GameObject servantSortRoot; // 0xD8
	[SerializeField] // RVA: 0xCD49A8 Offset: 0xCD49A8 VA: 0xCD49A8
	private UICommonButton[] sortButton; // 0xE0
	[SerializeField] // RVA: 0xCD49B8 Offset: 0xCD49B8 VA: 0xCD49B8
	private UILabel[] sortLabel; // 0xE8
	[SerializeField] // RVA: 0xCD49C8 Offset: 0xCD49C8 VA: 0xCD49C8
	private GameObject servantFilterRoot; // 0xF0
	[SerializeField] // RVA: 0xCD49D8 Offset: 0xCD49D8 VA: 0xCD49D8
	private List<ServantFilterCategoryContainer> servantFilterCategoryContainerList; // 0xF8
	[SerializeField] // RVA: 0xCD49E8 Offset: 0xCD49E8 VA: 0xCD49E8
	private List<ServantFilterButtonControl> filterButtonList; // 0x100
	[SerializeField] // RVA: 0xCD49F8 Offset: 0xCD49F8 VA: 0xCD49F8
	private GameObject smartSortObject; // 0x108
	[SerializeField] // RVA: 0xCD4A08 Offset: 0xCD4A08 VA: 0xCD4A08
	private UILabel smartSortLabel; // 0x110
	[SerializeField] // RVA: 0xCD4A18 Offset: 0xCD4A18 VA: 0xCD4A18
	private UILabel smartSortDetail_1; // 0x118
	[SerializeField] // RVA: 0xCD4A28 Offset: 0xCD4A28 VA: 0xCD4A28
	private UILabel smartSortDetail_2; // 0x120
	[SerializeField] // RVA: 0xCD4A38 Offset: 0xCD4A38 VA: 0xCD4A38
	private UISprite smartSortBtnSprite; // 0x128
	[SerializeField] // RVA: 0xCD4A48 Offset: 0xCD4A48 VA: 0xCD4A48
	private UICommonButton helpButton; // 0x130
	protected const int filterCollectionBtnsSpace = 10;
	protected CoinRoomSortSelectManager.Kind kind; // 0x138
	protected CoinRoomSortSelectManager.State state; // 0x13C
	[CompilerGeneratedAttribute] // RVA: 0xCD4A58 Offset: 0xCD4A58 VA: 0xCD4A58
	[DebuggerBrowsableAttribute] // RVA: 0xCD4A58 Offset: 0xCD4A58 VA: 0xCD4A58
	private CoinRoomSortSelectManager.CallbackFunc callbackFunc; // 0x140
	protected Action closeCallbackFunc; // 0x148
	protected ListViewSort baseSortInfo; // 0x150
	protected ListViewSort operationSortInfo; // 0x158
	protected List<ListViewSort.FilterKind> useFilterKindList; // 0x160
	protected List<ServantFilterButtonControl> useFilterButtonList; // 0x168

	// Methods

	// RVA: 0x156E584 Offset: 0x156E584 VA: 0x156E584
	public void .ctor() { }

	// RVA: 0x156E63C Offset: 0x156E63C VA: 0x156E63C
	protected void add_callbackFunc(CoinRoomSortSelectManager.CallbackFunc value) { }

	// RVA: 0x156E72C Offset: 0x156E72C VA: 0x156E72C
	protected void remove_callbackFunc(CoinRoomSortSelectManager.CallbackFunc value) { }

	// RVA: 0x156E81C Offset: 0x156E81C VA: 0x156E81C
	public void Init() { }

	// RVA: 0x156E828 Offset: 0x156E828 VA: 0x156E828
	public void Open(CoinRoomSortSelectManager.Kind kind, ListViewSort sort, CoinRoomSortSelectManager.CallbackFunc callback) { }

	// RVA: 0x156F8D4 Offset: 0x156F8D4 VA: 0x156F8D4
	protected void EndOpen() { }

	// RVA: 0x156F8E0 Offset: 0x156F8E0 VA: 0x156F8E0
	public void Close() { }

	// RVA: 0x156F8E8 Offset: 0x156F8E8 VA: 0x156F8E8
	public void Close(Action callback) { }

	// RVA: 0x156F978 Offset: 0x156F978 VA: 0x156F978
	protected void EndClose() { }

	// RVA: 0x156F9BC Offset: 0x156F9BC VA: 0x156F9BC
	protected void Callback(bool result) { }

	// RVA: 0x156EE54 Offset: 0x156EE54 VA: 0x156EE54
	private void SetupUseFilterKindList() { }

	// RVA: 0x156FC08 Offset: 0x156FC08 VA: 0x156FC08
	private void InitCategoryContainer(ListViewSort.FilterCategoryKind[] categoryKindKist) { }

	// RVA: 0x156EF08 Offset: 0x156EF08 VA: 0x156EF08
	private void SetupFilterButtons(ListViewSort sort) { }

	// RVA: 0x156F5F0 Offset: 0x156F5F0 VA: 0x156F5F0
	protected void SetButtenEnable(bool isEnable) { }

	// RVA: 0x156F140 Offset: 0x156F140 VA: 0x156F140
	protected void SetupButtonLayout(CoinRoomSortSelectManager.Kind kind) { }

	// RVA: 0x156F26C Offset: 0x156F26C VA: 0x156F26C
	protected void SetButtenSelect() { }

	// RVA: 0x156FF9C Offset: 0x156FF9C VA: 0x156FF9C
	public void OnClickDecide() { }

	// RVA: 0x1570080 Offset: 0x1570080 VA: 0x1570080
	public void OnClickCancel() { }

	// RVA: 0x1570120 Offset: 0x1570120 VA: 0x1570120
	public void OnClickClear() { }

	// RVA: 0x15701FC Offset: 0x15701FC VA: 0x15701FC
	public void OnClickReset() { }

	// RVA: 0x15702D8 Offset: 0x15702D8 VA: 0x15702D8
	public void OnClickSortId() { }

	// RVA: 0x1570380 Offset: 0x1570380 VA: 0x1570380
	public void OnClickSortRarity() { }

	// RVA: 0x1570428 Offset: 0x1570428 VA: 0x1570428
	public void OnClickSortAmount() { }

	// RVA: 0x15704D0 Offset: 0x15704D0 VA: 0x15704D0
	public void OnClickSortServantName() { }

	// RVA: 0x1570578 Offset: 0x1570578 VA: 0x1570578
	public void OnClickSmartSort() { }

	// RVA: 0x15706AC Offset: 0x15706AC VA: 0x15706AC
	public void OnClickFilterButton(ListViewSort.FilterKind filterKind) { }

	// RVA: 0x1570764 Offset: 0x1570764 VA: 0x1570764
	public void OnClickHelp() { }

	// RVA: 0x157085C Offset: 0x157085C VA: 0x157085C
	private void OnClickHelpClose() { }

	// RVA: 0x15708A8 Offset: 0x15708A8 VA: 0x15708A8
	public void OnEnable() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C244 Offset: 0xD3C244 VA: 0xD3C244
	// RVA: 0x15709AC Offset: 0x15709AC VA: 0x15709AC
	private bool <SetupFilterButtons>m__0(ServantFilterButtonControl x) { }
}

// Namespace: 
public enum CoinRoomSortSelectManager.Kind // TypeDefIndex: 9433
{
	// Fields
	public int value__; // 0x0
	public const CoinRoomSortSelectManager.Kind COIN_ROOM_SORT = 0;
	public const CoinRoomSortSelectManager.Kind COIN_ROOM_FILTER = 1;
}

// Namespace: 
protected enum CoinRoomSortSelectManager.State // TypeDefIndex: 9434
{
	// Fields
	public int value__; // 0x0
	public const CoinRoomSortSelectManager.State INIT = 0;
	public const CoinRoomSortSelectManager.State OPEN = 1;
	public const CoinRoomSortSelectManager.State INPUT = 2;
	public const CoinRoomSortSelectManager.State SELECTED = 3;
	public const CoinRoomSortSelectManager.State CLOSE = 4;
}

// Namespace: 
public sealed class CoinRoomSortSelectManager.CallbackFunc : MulticastDelegate // TypeDefIndex: 9435
{
	// Methods

	// RVA: 0x1570A7C Offset: 0x1570A7C VA: 0x1570A7C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x156F9DC Offset: 0x156F9DC VA: 0x156F9DC Slot: 11
	public virtual void Invoke(bool result) { }

	// RVA: 0x1570A8C Offset: 0x1570A8C VA: 0x1570A8C Slot: 12
	public virtual IAsyncResult BeginInvoke(bool result, AsyncCallback callback, object object) { }

	// RVA: 0x1570B1C Offset: 0x1570B1C VA: 0x1570B1C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xCB06F0 Offset: 0xCB06F0 VA: 0xCB06F0
private sealed class CoinRoomSortSelectManager.<InitCategoryContainer>c__AnonStorey0 // TypeDefIndex: 9436
{
	// Fields
	internal ListViewSort.FilterCategoryKind kind; // 0x10

	// Methods

	// RVA: 0x156FF94 Offset: 0x156FF94 VA: 0x156FF94
	public void .ctor() { }

	// RVA: 0x1570A38 Offset: 0x1570A38 VA: 0x1570A38
	internal bool <>m__0(ServantFilterCategoryContainer x) { }
}

// Namespace: 
public static class CoinRoomUtility // TypeDefIndex: 9437
{
	// Fields
	public static readonly string ASSET_NAME; // 0x0
	public static readonly float EFFECT_FADE_TIME; // 0x8
	public static readonly DateTime UnixEpoch; // 0x10

	// Methods

	// RVA: 0x1570B28 Offset: 0x1570B28 VA: 0x1570B28
	public static int MonthRemainingNum() { }

	// RVA: 0x1570C48 Offset: 0x1570C48 VA: 0x1570C48
	public static int CalcPoint() { }

	// RVA: 0x1570C94 Offset: 0x1570C94 VA: 0x1570C94
	public static int MaxPoint() { }

	// RVA: 0x1570BFC Offset: 0x1570BFC VA: 0x1570BFC
	public static int MonthExchangeMaxNum() { }

	// RVA: 0x156E17C Offset: 0x156E17C VA: 0x156E17C
	public static UserCoinRoomEntity GetUserCoinRoomEntity() { }

	// RVA: 0x1570CE0 Offset: 0x1570CE0 VA: 0x1570CE0
	public static List<DataEntityBase> GetUserSvtCoins() { }

	// RVA: 0x1570F40 Offset: 0x1570F40 VA: 0x1570F40
	public static int MonthExchangePoint() { }

	// RVA: 0x1570B94 Offset: 0x1570B94 VA: 0x1570B94
	public static int MonthExchangeNum() { }

	// RVA: 0x1570FCC Offset: 0x1570FCC VA: 0x1570FCC
	public static bool IsTargetQuestClear() { }

	// RVA: 0x15710B8 Offset: 0x15710B8 VA: 0x15710B8
	public static List<UIAtlas> GetDownloadAtlas(AssetData assetData, string name) { }

	// RVA: 0x1571290 Offset: 0x1571290 VA: 0x1571290
	public static long NextMonthUnixTime() { }

	// RVA: 0x15713B8 Offset: 0x15713B8 VA: 0x15713B8
	private static void .cctor() { }
}

// Namespace: 
public class AppendSkillCombineControl : CombineMenuControl // TypeDefIndex: 9438
{
	// Fields
	[SerializeField] // RVA: 0xCD4A94 Offset: 0xCD4A94 VA: 0xCD4A94
	private UIAtlas baseAtlas; // 0x68
	[SerializeField] // RVA: 0xCD4AA4 Offset: 0xCD4AA4 VA: 0xCD4AA4
	private UILabel preSelectBaseLb; // 0x70
	[SerializeField] // RVA: 0xCD4AB4 Offset: 0xCD4AB4 VA: 0xCD4AB4
	private GameObject baseSelectInfoLb; // 0x78
	[SerializeField] // RVA: 0xCD4AC4 Offset: 0xCD4AC4 VA: 0xCD4AC4
	private UILabel selectSkillHelpLb; // 0x80
	[SerializeField] // RVA: 0xCD4AD4 Offset: 0xCD4AD4 VA: 0xCD4AD4
	private UILabel detailInfoLb; // 0x88
	[SerializeField] // RVA: 0xCD4AE4 Offset: 0xCD4AE4 VA: 0xCD4AE4
	private UISprite combineBtnBg; // 0x90
	[SerializeField] // RVA: 0xCD4AF4 Offset: 0xCD4AF4 VA: 0xCD4AF4
	private UISprite combineTxtImg; // 0x98
	[SerializeField] // RVA: 0xCD4B04 Offset: 0xCD4B04 VA: 0xCD4B04
	private UISprite titleImg; // 0xA0
	[SerializeField] // RVA: 0xCD4B14 Offset: 0xCD4B14 VA: 0xCD4B14
	private UISprite itemTitleImg; // 0xA8
	[SerializeField] // RVA: 0xCD4B24 Offset: 0xCD4B24 VA: 0xCD4B24
	private GameObject combineQpInfo; // 0xB0
	[SerializeField] // RVA: 0xCD4B34 Offset: 0xCD4B34 VA: 0xCD4B34
	private UILabel spendQpLabel; // 0xB8
	[SerializeField] // RVA: 0xCD4B44 Offset: 0xCD4B44 VA: 0xCD4B44
	private UILabel haveQpLabel; // 0xC0
	[SerializeField] // RVA: 0xCD4B54 Offset: 0xCD4B54 VA: 0xCD4B54
	private List<LimitCntUpItemComponent> itemInfoList; // 0xC8
	[SerializeField] // RVA: 0xCD4B64 Offset: 0xCD4B64 VA: 0xCD4B64
	private List<ServantSkillInfoIconComponent> skillInfoList; // 0xD0
	[SerializeField] // RVA: 0xCD4B74 Offset: 0xCD4B74 VA: 0xCD4B74
	private GameObject effect; // 0xD8
	private long userId; // 0xE0
	private int userQp; // 0xE8
	private SvtUseSkillData skillData; // 0xF0
	private SetLevelUpData lvUpData; // 0xF8
	private List<ServantSkillInfoIconComponent> targetList; // 0x100
	private UICharaGraphTexture charaGraph; // 0x108
	private int[] useSkillIdList; // 0x110
	private int currentIdx; // 0x118
	private AppendSkillCombineControl.STATUS nowStatus; // 0x11C

	// Methods

	// RVA: 0x15AD648 Offset: 0x15AD648 VA: 0x15AD648
	public void .ctor() { }

	// RVA: 0x15AD650 Offset: 0x15AD650 VA: 0x15AD650 Slot: 6
	protected override EventTutorialMaster.OpenType GetTutorialOpenType() { }

	// RVA: 0x15AD658 Offset: 0x15AD658 VA: 0x15AD658
	public void InitSvtSkillCombine() { }

	// RVA: 0x15AD8E0 Offset: 0x15AD8E0 VA: 0x15AD8E0
	private void InitDispCombineInfo() { }

	// RVA: 0x15ADCD4 Offset: 0x15ADCD4 VA: 0x15ADCD4
	public void SetBaseSvtSkillInfo(UserServantEntity userSvtEnt, int idx = 0) { }

	// RVA: 0x15ADDF8 Offset: 0x15ADDF8 VA: 0x15ADDF8
	private void SetSkillIconInfo(SvtUseSkillData skillData) { }

	// RVA: 0x15AE268 Offset: 0x15AE268 VA: 0x15AE268
	public void SetBaseSvtCardImg(UserServantEntity userSvtEnt) { }

	// RVA: 0x15AE418 Offset: 0x15AE418 VA: 0x15AE418
	public void OnClickInfo(bool isdecide, int idx) { }

	// RVA: 0x15AE070 Offset: 0x15AE070 VA: 0x15AE070
	private void SetNeedItemInfo(int idx) { }

	// RVA: 0x15AE424 Offset: 0x15AE424 VA: 0x15AE424
	private void SetSvtSkillCombineData(int idx) { }

	// RVA: 0x15AF0C8 Offset: 0x15AF0C8 VA: 0x15AF0C8
	private bool SetNeedItemList(int[] needItemIds, int[] needItemNums) { }

	// RVA: 0x15AF268 Offset: 0x15AF268 VA: 0x15AF268
	private void SetSkillLevelUpData(int idx, int currentSkillId, int currentSkillLv, int currentSkillNum, string skillName, int[] combineItemIds, string skillDetail = "") { }

	// RVA: 0x15AF3A4 Offset: 0x15AF3A4 VA: 0x15AF3A4
	private void SetSkillOpenNeedData(int[] needItemIds, int[] needItemNums) { }

	// RVA: 0x15AF5E0 Offset: 0x15AF5E0 VA: 0x15AF5E0
	private void SetSkillNeedQpData(int qp) { }

	// RVA: 0x15AF634 Offset: 0x15AF634 VA: 0x15AF634
	public SetLevelUpData GetTargetData() { }

	// RVA: 0x15AF63C Offset: 0x15AF63C VA: 0x15AF63C
	public bool CheckIsMaxLvSkills(UserServantEntity resData) { }

	// RVA: 0x15ADB2C Offset: 0x15ADB2C VA: 0x15ADB2C
	private void SetExeBtnState() { }

	// RVA: 0x15AEE8C Offset: 0x15AEE8C VA: 0x15AEE8C
	private void SetSkillCombineStatus(int currentSkillLv, int maxLv) { }

	// RVA: 0x15AF808 Offset: 0x15AF808 VA: 0x15AF808
	public void OnClickExeCombine() { }

	// RVA: 0x15AEEAC Offset: 0x15AEEAC VA: 0x15AEEAC
	public void SetStateInfoMsg(CombineRootComponent.StateType state) { }

	// RVA: 0x15AF934 Offset: 0x15AF934 VA: 0x15AF934
	public void PlayUnlockEffect(int idx, Action callback) { }
}

// Namespace: 
private enum AppendSkillCombineControl.STATUS // TypeDefIndex: 9439
{
	// Fields
	public int value__; // 0x0
	public const AppendSkillCombineControl.STATUS NONE = 0;
	public const AppendSkillCombineControl.STATUS LOCK = 1;
	public const AppendSkillCombineControl.STATUS NORMAL = 2;
	public const AppendSkillCombineControl.STATUS MAX = 3;
}

// Namespace: 
public class CheckCombineEnalbleControl : MonoBehaviour // TypeDefIndex: 9440
{
	// Fields
	private ServantMaster servantMaster; // 0x18
	private UserServantMaster userServantMaster; // 0x20
	private UserServantStorageMaster userServantStorageMaster; // 0x28
	private UserServantCollectionMaster userServantCollectionMaster; // 0x30
	private CombineLimitMaster combineLimitMaster; // 0x38
	private UserItemMaster userItemMaster; // 0x40
	private SkillMaster skillMaster; // 0x48
	private CombineSkillMaster combineSkillMaster; // 0x50
	private TreasureDvcMaster treasureDvcMaster; // 0x58
	private TreasureDvcLvMaster treasureDvcLvMaster; // 0x60
	private ServantCostumeMaster servantCostumeMaster; // 0x68
	private ServantCostumeReleaseMaster cosReleaseMaster; // 0x70
	private FriendshipMaster friendshipMaster; // 0x78
	private CombineEnableData combineEnalbeInfo; // 0x80
	private int haveQpVal; // 0x88
	private const int tdMaxLv = 5;
	private const int tdUpMaxQp = 1200000;
	private List<int> costumeSvtIdList; // 0x90
	private List<int> friendshipExceedSvtIdList; // 0x98
	private Dictionary<int, List<int>> cachedUserServantNpLvDict; // 0xA0

	// Methods

	// RVA: 0x1F1AB50 Offset: 0x1F1AB50 VA: 0x1F1AB50
	public void .ctor() { }

	// RVA: 0x1F1ABC0 Offset: 0x1F1ABC0 VA: 0x1F1ABC0
	public void SetCombineEnableInfo() { }

	// RVA: 0x1F1AF54 Offset: 0x1F1AF54 VA: 0x1F1AF54
	private void SetMasters() { }

	// RVA: 0x1F1B214 Offset: 0x1F1B214 VA: 0x1F1B214
	private bool GetIsLimitUpEnable(UserServantEntity usrData, ServantEntity servantEntity) { }

	// RVA: 0x1F1B558 Offset: 0x1F1B558 VA: 0x1F1B558
	private bool GetIsSkillUpEnable(UserServantEntity usrData, ServantEntity servantEntity) { }

	// RVA: 0x1F1B944 Offset: 0x1F1B944 VA: 0x1F1B944
	private bool GetIsNpUpEnable(UserServantEntity usrData) { }

	// RVA: 0x1F1BB20 Offset: 0x1F1BB20 VA: 0x1F1BB20
	private bool GetIsLvExceedEnable(UserServantEntity usrData) { }

	// RVA: 0x1F1BEF0 Offset: 0x1F1BEF0 VA: 0x1F1BEF0
	private bool GetIsCombineCostumeEnable(UserServantEntity userSvtEntity) { }

	// RVA: 0x1F1C368 Offset: 0x1F1C368 VA: 0x1F1C368
	public bool GetIsFriendshipExceedEnable(UserServantEntity userServantEntity) { }

	// RVA: 0x1F1C900 Offset: 0x1F1C900 VA: 0x1F1C900
	public CombineEnableData getCombineEnableNumInfo() { }
}

// Namespace: 
public class CombineBannerComponent : MonoBehaviour // TypeDefIndex: 9441
{
	// Fields
	public UISprite bannerSprite; // 0x18
	public UIButton bannerBtn; // 0x20
	private EventEntity eventEntity; // 0x28

	// Methods

	// RVA: 0x1571B58 Offset: 0x1571B58 VA: 0x1571B58
	public void .ctor() { }

	// RVA: 0x1571B60 Offset: 0x1571B60 VA: 0x1571B60
	public void setBannerInfo(EventEntity eventData) { }

	// RVA: 0x1571BE4 Offset: 0x1571BE4 VA: 0x1571BE4
	public void onOpenWebView() { }
}

// Namespace: 
public class CombineEffectComponent : MonoBehaviour // TypeDefIndex: 9442
{
	// Fields
	private readonly int[] cardTextureSize; // 0x18
	private readonly string[] startAniName; // 0x20
	private readonly string[] itemAniName; // 0x28
	private PlayMakerFSM fsm; // 0x30
	private List<string> releaseAssetPath; // 0x38
	private GameObject bgParentObject; // 0x40
	private CombineEffectComponent.Kind kind; // 0x48
	private UserServantEntity baseSvtEntity; // 0x50
	private int baseSvtId; // 0x58
	private int baseSvtlimitCnt; // 0x5C
	private List<UserServantEntity> materialList; // 0x60
	private List<int> itemList; // 0x68
	private List<ItemEntity> itemEntityList; // 0x70
	private GameObject effect; // 0x78
	private int materialCnt; // 0x80
	private int cntIndex; // 0x84
	private int itemMaterialCnt; // 0x88
	private int itemCntIdex; // 0x8C
	protected int baseClassCardId; // 0x90
	protected int feedClassCardId; // 0x94
	private List<string> feedNameList; // 0x98
	private List<string> feedItemNameList; // 0xA0
	private Transform itemNode; // 0xA8
	private Transform itemBackNode; // 0xB0
	private int cardType; // 0xB8

	// Methods

	// RVA: 0x1578BF8 Offset: 0x1578BF8 VA: 0x1578BF8
	public void .ctor() { }

	// RVA: 0x157956C Offset: 0x157956C VA: 0x157956C
	private void Start() { }

	// RVA: 0x1579570 Offset: 0x1579570 VA: 0x1579570
	public void SetServantCombineInfo(UserServantEntity baseSvtData, List<UserServantEntity> list, CombineEffectComponent.Kind combineKind) { }

	// RVA: 0x157962C Offset: 0x157962C VA: 0x157962C
	public void SetSkillCombineInfo(UserServantEntity baseSvtData, List<ItemEntity> list) { }

	// RVA: 0x157970C Offset: 0x157970C VA: 0x157970C
	public void SetSkillCombineInfo(UserServantEntity baseSvtData, List<int> list) { }

	// RVA: 0x15797C8 Offset: 0x15797C8 VA: 0x15797C8
	public void SetDvcCombineInfo(UserServantEntity baseSvtData, List<int> list) { }

	// RVA: 0x1579884 Offset: 0x1579884 VA: 0x1579884
	public void InitCombineEffect() { }

	// RVA: 0x1579A78 Offset: 0x1579A78 VA: 0x1579A78
	private void EndLoadBg(AssetData data) { }

	// RVA: 0x1579BA8 Offset: 0x1579BA8 VA: 0x1579BA8
	public void fadeIn() { }

	// RVA: 0x1579C84 Offset: 0x1579C84 VA: 0x1579C84
	private void SetCardParam() { }

	// RVA: 0x157B8F8 Offset: 0x157B8F8 VA: 0x157B8F8
	private void setReverseCallback(AssetData data) { }

	// RVA: 0x157B2D0 Offset: 0x157B2D0 VA: 0x157B2D0
	private void setServantFeed() { }

	// RVA: 0x157BB88 Offset: 0x157BB88 VA: 0x157BB88
	private void SetFeedCallback(AssetData data) { }

	// RVA: 0x157B5A0 Offset: 0x157B5A0 VA: 0x157B5A0
	private void setItemFeed() { }

	// RVA: 0x157B13C Offset: 0x157B13C VA: 0x157B13C
	private void getDispInfo(out Rarity.TYPE rarity, out int classCardId, int svtId, int svtLimitCnt) { }

	// RVA: 0x157BA14 Offset: 0x157BA14 VA: 0x157BA14
	private void getCardBackImg(out Rarity.TYPE rarity, out int backCardImgId, int svtId, int svtLimitCnt) { }

	// RVA: 0x157BDB0 Offset: 0x157BDB0 VA: 0x157BDB0
	public void endAnimation() { }

	// RVA: 0x157BE90 Offset: 0x157BE90 VA: 0x157BE90
	public void ReleasePrevAsset() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C254 Offset: 0xD3C254 VA: 0xD3C254
	// RVA: 0x157C050 Offset: 0x157C050 VA: 0x157C050
	private void <fadeIn>m__0() { }

	[CompilerGeneratedAttribute] // RVA: 0xD3C264 Offset: 0xD3C264 VA: 0xD3C264
