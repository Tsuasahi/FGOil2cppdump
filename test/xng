public static class AndroidExternalStorageState // TypeDefIndex: 6333
{
	// Fields
	public const string MEDIA_MOUNTED = "mounted";
	public const string MEDIA_MOUNTED_READ_ONLY = "mounted_ro";
}

// Namespace: 
public class AndroidUtil // TypeDefIndex: 6334
{
	// Fields
	private const int VERSION_CODE_K = 19;
	private const int VERSION_CODE_M = 23;
	private const int PERMISSION_GRANTED = 0;
	private static int _apiLevel; // 0x0
	private static readonly string MD5_OPTION; // 0x8

	// Properties
	public static int apiLevel { get; }

	// Methods

	// RVA: 0x1078AC0 Offset: 0x1078AC0 VA: 0x1078AC0
	public void .ctor() { }

	// RVA: 0x1078AC8 Offset: 0x1078AC8 VA: 0x1078AC8
	public static int get_apiLevel() { }

	// RVA: 0x1078C9C Offset: 0x1078C9C VA: 0x1078C9C
	public static bool IsWriteableExternalStorage(bool likeOldUnity = False) { }

	// RVA: 0x1078DAC Offset: 0x1078DAC VA: 0x1078DAC
	public static string GetExternalStorageState() { }

	// RVA: 0x1079508 Offset: 0x1079508 VA: 0x1079508
	public static void TransitionSaveData() { }

	// RVA: 0x1079C7C Offset: 0x1079C7C VA: 0x1079C7C
	public static void TransitionDatFile(DatFileName.FILE_NAME fileName) { }

	// RVA: 0x1079E94 Offset: 0x1079E94 VA: 0x1079E94
	public static void DeleteOldSaveData() { }

	// RVA: 0x107A1C0 Offset: 0x107A1C0 VA: 0x107A1C0
	private static string GetExternalFilesDir() { }

	// RVA: 0x1078F24 Offset: 0x1078F24 VA: 0x1078F24
	private static bool HasPermission(string permission) { }

	// RVA: 0x107A550 Offset: 0x107A550 VA: 0x107A550
	private static string GetContextFilesDirPath() { }

	// RVA: 0x10798EC Offset: 0x10798EC VA: 0x10798EC
	public static string GetOldUnityPersistentDataPath() { }

	// RVA: 0x10668C4 Offset: 0x10668C4 VA: 0x10668C4
	public static string GetDatFileSavePath() { }

	// RVA: 0x107A938 Offset: 0x107A938 VA: 0x107A938
	public static string ConvertFileNameIfNeed(string filename) { }

	// RVA: 0x1079A2C Offset: 0x1079A2C VA: 0x1079A2C
	public static string GetMd5String(string name) { }

	// RVA: 0x107AA1C Offset: 0x107AA1C VA: 0x107AA1C
	public static string GetFriendCodeFromOldDat() { }

	// RVA: 0x107AD0C Offset: 0x107AD0C VA: 0x107AD0C
	private static void .cctor() { }
}

// Namespace: 
public class AppendSkillListComponent : BaseMonoBehaviour // TypeDefIndex: 6335
{
	// Fields
	private static readonly int SKILL_LEVEL_LABEL_MAX_LENGTH; // 0x0
	[SerializeField] // RVA: 0xC538E8 Offset: 0xC538E8 VA: 0xC538E8
	protected UISprite skillIconSprite; // 0x18
	[SerializeField] // RVA: 0xC538F8 Offset: 0xC538F8 VA: 0xC538F8
	protected UILabel skillLevelListLabel; // 0x20

	// Methods

	// RVA: 0x107DC5C Offset: 0x107DC5C VA: 0x107DC5C
	public void .ctor() { }

	// RVA: 0x107DC64 Offset: 0x107DC64 VA: 0x107DC64
	public void Clear() { }

	// RVA: 0x107DD20 Offset: 0x107DD20 VA: 0x107DD20
	public void Set(string skillLevelListText) { }

	// RVA: 0x107DE78 Offset: 0x107DE78 VA: 0x107DE78
	private static void .cctor() { }
}

// Namespace: 
public class AssetsInfo : MonoBehaviour // TypeDefIndex: 6336
{
	// Fields
	public string sceneName; // 0x18
	public bool show; // 0x20
	private AssetsInfo.AssetsInfoData currentAssets; // 0x28
	private AssetsInfo.AssetsInfoData currentResouces; // 0x30

	// Methods

	// RVA: 0x141DBE0 Offset: 0x141DBE0 VA: 0x141DBE0
	public void .ctor() { }

	// RVA: 0x141DC60 Offset: 0x141DC60 VA: 0x141DC60
	public void getAssetsInfo() { }

	// RVA: 0x141DC64 Offset: 0x141DC64 VA: 0x141DC64
	public void getAssetInfo(List<AssetData> assetList, Dictionary<string, AssetsInfo.dataInfo> info) { }

	// RVA: 0x141E140 Offset: 0x141E140 VA: 0x141E140
	public void OnGUI() { }
}

// Namespace: 
public class AssetsInfo.dataInfo // TypeDefIndex: 6337
{
	// Fields
	public string initScene; // 0x10
	public int count; // 0x18

	// Methods

	// RVA: 0x141E0B4 Offset: 0x141E0B4 VA: 0x141E0B4
	public void .ctor(string scene) { }

	// RVA: 0x141E854 Offset: 0x141E854 VA: 0x141E854 Slot: 3
	public override string ToString() { }
}

// Namespace: 
private class AssetsInfo.AssetsInfoData // TypeDefIndex: 6338
{
	// Fields
	private static readonly List<string> ignoreList; // 0x0
	public Dictionary<string, AssetsInfo.dataInfo> assets; // 0x10

	// Methods

	// RVA: 0x141E2DC Offset: 0x141E2DC VA: 0x141E2DC
	public void .ctor() { }

	// RVA: 0x141E34C Offset: 0x141E34C VA: 0x141E34C
	public string getString(Dictionary<string, AssetsInfo.dataInfo> info) { }

	// RVA: 0x141E5E0 Offset: 0x141E5E0 VA: 0x141E5E0 Slot: 3
	public override string ToString() { }

	// RVA: 0x141E5E8 Offset: 0x141E5E8 VA: 0x141E5E8
	private static void .cctor() { }
}

// Namespace: 
public class AvalonVideoPlayer : MonoBehaviour // TypeDefIndex: 6339
{
	// Fields
	[SerializeField] // RVA: 0xC53908 Offset: 0xC53908 VA: 0xC53908
	private Camera renderCamera; // 0x18
	private VideoPlayer videoPlayer; // 0x20
	private bool isCanSkip; // 0x28
	private Action endCallback; // 0x30

	// Methods

	// RVA: 0xF5C754 Offset: 0xF5C754 VA: 0xF5C754
	public void .ctor() { }

	// RVA: 0xF5C75C Offset: 0xF5C75C VA: 0xF5C75C
	public void setup(string path, bool skip) { }

	// RVA: 0xF5C93C Offset: 0xF5C93C VA: 0xF5C93C
	private void errorReceived(VideoPlayer source, string message) { }

	// RVA: 0xF5CA38 Offset: 0xF5CA38 VA: 0xF5CA38
	public bool start(Action endCallback) { }

	// RVA: 0xF5CBCC Offset: 0xF5CBCC VA: 0xF5CBCC
	public void initialize(Camera camera) { }

	// RVA: 0xF5CD10 Offset: 0xF5CD10 VA: 0xF5CD10
	private void soundPause(bool isPause) { }

	[DebuggerHiddenAttribute] // RVA: 0xCC8ED4 Offset: 0xCC8ED4 VA: 0xCC8ED4
	// RVA: 0xF5CB5C Offset: 0xF5CB5C VA: 0xF5CB5C
	private IEnumerator playingVideo() { }

	// RVA: 0xF5C940 Offset: 0xF5C940 VA: 0xF5C940
	private void endVideo() { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC427C4 Offset: 0xC427C4 VA: 0xC427C4
private sealed class AvalonVideoPlayer.<playingVideo>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object> // TypeDefIndex: 6340
{
	// Fields
	internal AvalonVideoPlayer $this; // 0x10
	internal object $current; // 0x18
	internal bool $disposing; // 0x20
	internal int $PC; // 0x24

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods

	[DebuggerHiddenAttribute] // RVA: 0xCD8A70 Offset: 0xCD8A70 VA: 0xCD8A70
	// RVA: 0xF5CDB4 Offset: 0xF5CDB4 VA: 0xF5CDB4
	public void .ctor() { }

	// RVA: 0xF5CDBC Offset: 0xF5CDBC VA: 0xF5CDBC Slot: 5
	public bool MoveNext() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A80 Offset: 0xCD8A80 VA: 0xCD8A80
	// RVA: 0xF5D020 Offset: 0xF5D020 VA: 0xF5D020 Slot: 8
	private object System.Collections.Generic.IEnumerator<object>.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8A90 Offset: 0xCD8A90 VA: 0xCD8A90
	// RVA: 0xF5D028 Offset: 0xF5D028 VA: 0xF5D028 Slot: 4
	private object System.Collections.IEnumerator.get_Current() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8AA0 Offset: 0xCD8AA0 VA: 0xCD8AA0
	// RVA: 0xF5D030 Offset: 0xF5D030 VA: 0xF5D030 Slot: 7
	public void Dispose() { }

	[DebuggerHiddenAttribute] // RVA: 0xCD8AB0 Offset: 0xCD8AB0 VA: 0xCD8AB0
	// RVA: 0xF5D044 Offset: 0xF5D044 VA: 0xF5D044 Slot: 6
	public void Reset() { }
}

// Namespace: 
public class BannerComponent : MonoBehaviour // TypeDefIndex: 6341
{
	// Fields
	[SerializeField] // RVA: 0xC53918 Offset: 0xC53918 VA: 0xC53918
	protected UISprite bannerSprite; // 0x18
	[SerializeField] // RVA: 0xC53928 Offset: 0xC53928 VA: 0xC53928
	protected UICommonButton bannerButton; // 0x20
	private string linkBody; // 0x28

	// Methods

	// RVA: 0xF64328 Offset: 0xF64328 VA: 0xF64328
	public void .ctor() { }

	// RVA: 0xF64330 Offset: 0xF64330 VA: 0xF64330
	public void SetBanner(EventEntity eventData) { }

	// RVA: 0xF64400 Offset: 0xF64400 VA: 0xF64400
	public void OnClick() { }
}

// Namespace: 
public class BattleChrControl : MonoBehaviour // TypeDefIndex: 6342
{
	// Fields
	private GameObject targetObject; // 0x18

	// Methods

	// RVA: 0x1798BAC Offset: 0x1798BAC VA: 0x1798BAC
	public void .ctor() { }

	// RVA: 0x1798BB4 Offset: 0x1798BB4 VA: 0x1798BB4
	private void OnAnimEvent(AnimationEvent ev) { }

	// RVA: 0x1798C28 Offset: 0x1798C28 VA: 0x1798C28
	public void setTarget(GameObject obj) { }
}

// Namespace: 
public class BattleChrManager : SingletonMonoBehaviour<BattleChrManager> // TypeDefIndex: 6343
{
	// Fields
	public Transform rootTransform; // 0x18
	public GameObject mayaPrefab; // 0x20
	public static readonly float animFps; // 0x0
	private static readonly string levelMarker; // 0x8
	[CompilerGeneratedAttribute] // RVA: 0xC53938 Offset: 0xC53938 VA: 0xC53938
	private static Func<Transform, bool> <>f__am$cache0; // 0x10

	// Methods

	// RVA: 0x1798C30 Offset: 0x1798C30 VA: 0x1798C30
	public void .ctor() { }

	// RVA: 0x1798C80 Offset: 0x1798C80 VA: 0x1798C80
	protected void Awake() { }

	// RVA: 0x1798D44 Offset: 0x1798D44 VA: 0x1798D44
	private void Start() { }

	// RVA: 0x17990B4 Offset: 0x17990B4 VA: 0x17990B4
	public void SetEvolutionLevel(GameObject gameObject, int level) { }

	// RVA: 0x1799640 Offset: 0x1799640 VA: 0x1799640
	public void AttachAnimationEvents(GameObject gameObject, TextAsset data, string servantName, int level) { }

	// RVA: 0x1799E98 Offset: 0x1799E98 VA: 0x1799E98
	private static void .cctor() { }

	[CompilerGeneratedAttribute] // RVA: 0xCC8EE4 Offset: 0xCC8EE4 VA: 0xCC8EE4
	// RVA: 0x1799F04 Offset: 0x1799F04 VA: 0x1799F04
	private static bool <SetEvolutionLevel>m__0(Transform p) { }
}

// Namespace: 
public class BattleServantFaceIconComponent : ServantFaceIconComponent // TypeDefIndex: 6344
{
	// Fields
	[SerializeField] // RVA: 0xC53948 Offset: 0xC53948 VA: 0xC53948
	private UILabel dropNumLabel; // 0xD8
	[SerializeField] // RVA: 0xC53958 Offset: 0xC53958 VA: 0xC53958
	private Color darkModeColor; // 0xE0

	// Methods

	// RVA: 0x167FF40 Offset: 0x167FF40 VA: 0x167FF40
	public void .ctor() { }

	// RVA: 0x167FFA8 Offset: 0x167FFA8 VA: 0x167FFA8
	public void SetSvtDrop(int svtId, int limitCnt, int dropNum) { }

	// RVA: 0x1680130 Offset: 0x1680130 VA: 0x1680130
	public void SetSvtDrop(long userSvtId, IconLabelInfo info, int dropNum, int limit) { }

	// RVA: 0x168026C Offset: 0x168026C VA: 0x168026C
	public void SetCommandCodeDrop(long userCommandCodeId, int dropNum) { }

	// RVA: 0x168032C Offset: 0x168032C VA: 0x168032C
	public void SetCommandCodeDropByCodeId(int commandCodeId, int dropNum) { }

	// RVA: 0x168000C Offset: 0x168000C VA: 0x168000C
	private void SetDropLabel(int dropNum) { }

	// RVA: 0x1680388 Offset: 0x1680388 VA: 0x1680388
	private void SetColor(UIWidget widget, Color color) { }

	// RVA: 0x1680454 Offset: 0x1680454 VA: 0x1680454
	public void SetActiveDarkMode(bool isActive) { }
}

// Namespace: 
public class BgTxtManager // TypeDefIndex: 6345
{
	// Methods

	// RVA: 0x19A5A40 Offset: 0x19A5A40 VA: 0x19A5A40
	public void .ctor() { }

	// RVA: 0x19A5A48 Offset: 0x19A5A48 VA: 0x19A5A48
	public static bool IsActiveBgTxt() { }
}

// Namespace: 
public class BillBoard : MonoBehaviour // TypeDefIndex: 6346
{
	// Fields
	public Camera targetCamera; // 0x18
	public bool rotationFlip; // 0x20
	[TooltipAttribute] // RVA: 0xC53968 Offset: 0xC53968 VA: 0xC53968
	public bool enableRotationZ; // 0x21
	[SerializeField] // RVA: 0xC539A0 Offset: 0xC539A0 VA: 0xC539A0
	[TooltipAttribute] // RVA: 0xC539A0 Offset: 0xC539A0 VA: 0xC539A0
	private string searchCameraName; // 0x28
	private bool saveFlipFlag; // 0x30
	protected Transform mTrf; // 0x38

	// Methods

	// RVA: 0x19AC440 Offset: 0x19AC440 VA: 0x19AC440
	public void .ctor() { }

	// RVA: 0x19AC4B8 Offset: 0x19AC4B8 VA: 0x19AC4B8
	private void Start() { }

	// RVA: 0x19AC64C Offset: 0x19AC64C VA: 0x19AC64C
	public void UpdateBillboard() { }

	// RVA: 0x19AC8C4 Offset: 0x19AC8C4 VA: 0x19AC8C4
	private void LateUpdate() { }

	// RVA: 0x19AC8C8 Offset: 0x19AC8C8 VA: 0x19AC8C8
	public void setCamera(Camera wkcamera) { }

	// RVA: 0x19AC8D0 Offset: 0x19AC8D0 VA: 0x19AC8D0
	public void setFlip(bool flg, bool init = False) { }

	// RVA: 0x19AC8E4 Offset: 0x19AC8E4 VA: 0x19AC8E4
	public void ResetFlip() { }
}

// Namespace: 
public class BillBoardGrouped : BillBoard // TypeDefIndex: 6347
{
	// Fields
	[TooltipAttribute] // RVA: 0xC539EC Offset: 0xC539EC VA: 0xC539EC
	public int grouping; // 0x40

	// Methods

	// RVA: 0x19AD53C Offset: 0x19AD53C VA: 0x19AD53C
	public void .ctor() { }

	// RVA: 0x19AD548 Offset: 0x19AD548 VA: 0x19AD548
	private void Update() { }

	// RVA: 0x19AD5F4 Offset: 0x19AD5F4 VA: 0x19AD5F4
	private void LateUpdate() { }

	// RVA: 0x19AD8C4 Offset: 0x19AD8C4 VA: 0x19AD8C4
	private Vector3 GetDimensioned(Vector3 pLookVec) { }
}

// Namespace: 
protected enum BillBoardGrouped.SP_GROUP // TypeDefIndex: 6348
{
	// Fields
	public int value__; // 0x0
	public const BillBoardGrouped.SP_GROUP NONE = -1;
	public const BillBoardGrouped.SP_GROUP FIXED = 0;
	public const BillBoardGrouped.SP_GROUP FIXED_CAM = 1;
	public const BillBoardGrouped.SP_GROUP SIZE_OF = 2;
}

// Namespace: 
public class BillBoardGroupManager : SingletonMonoBehaviour<BillBoardGroupManager> // TypeDefIndex: 6349
{
	// Fields
	[TooltipAttribute] // RVA: 0xC53A24 Offset: 0xC53A24 VA: 0xC53A24
	public static float targetFov; // 0x0
	private Dictionary<int, BillBoardGroupManager.GroupData> datas; // 0x18
	private BillBoardGroupManager.phase phaseNow; // 0x20
	public static readonly Vector3 VecZero; // 0x4
	public static readonly Vector3 VecBack; // 0x10

	// Methods

	// RVA: 0x19AC8F0 Offset: 0x19AC8F0 VA: 0x19AC8F0
	public void .ctor() { }

	// RVA: 0x19AC940 Offset: 0x19AC940 VA: 0x19AC940
	public void AddData(int groupId, Camera cam, GameObject obj) { }

	// RVA: 0x19ACD4C Offset: 0x19ACD4C VA: 0x19ACD4C
	public Vector3 GetLookVec(int groupId, bool disableZRot) { }

	// RVA: 0x19AD2B0 Offset: 0x19AD2B0 VA: 0x19AD2B0
	private static float GetMagnifier(float angleRad) { }

	// RVA: 0x19AD3C8 Offset: 0x19AD3C8 VA: 0x19AD3C8
	public static Vector3 GetNormalizedLookAt(Vector3 fromPos, Vector3 toPos) { }

	// RVA: 0x19AD498 Offset: 0x19AD498 VA: 0x19AD498
	private static void .cctor() { }
}

// Namespace: 
private class BillBoardGroupManager.GroupData // TypeDefIndex: 6350
{
	// Fields
	private Camera cam; // 0x10
	private Vector3 resVec; // 0x18
	private List<GameObject> objs; // 0x28

	// Methods

	// RVA: 0x19ACC90 Offset: 0x19ACC90 VA: 0x19ACC90
	public void .ctor(Camera pCam) { }

	// RVA: 0x19ACB98 Offset: 0x19ACB98 VA: 0x19ACB98
	public void Reset(Camera pCam) { }

	// RVA: 0x19ACC20 Offset: 0x19ACC20 VA: 0x19ACC20
	public void AddObj(GameObject obj) { }

	// RVA: 0x19ACE2C Offset: 0x19ACE2C VA: 0x19ACE2C
	public Vector3 GetLookVec() { }
}

// Namespace: 
private enum BillBoardGroupManager.phase // TypeDefIndex: 6351
{
	// Fields
	public int value__; // 0x0
	public const BillBoardGroupManager.phase NONE = 0;
	public const BillBoardGroupManager.phase ADDING = 1;
	public const BillBoardGroupManager.phase USING = 2;
}

// Namespace: 
public class BillBoardVariant : MonoBehaviour // TypeDefIndex: 6352
{
	// Fields
	public Camera targetCamera; // 0x18
	public bool rotationFlip; // 0x20
	[TooltipAttribute] // RVA: 0xC53A5C Offset: 0xC53A5C VA: 0xC53A5C
	public bool enableRotationX; // 0x21
	[TooltipAttribute] // RVA: 0xC53A94 Offset: 0xC53A94 VA: 0xC53A94
	public bool enableRotationY; // 0x22
	[TooltipAttribute] // RVA: 0xC53ACC Offset: 0xC53ACC VA: 0xC53ACC
	public bool enableRotationZ; // 0x23
	[SerializeField] // RVA: 0xC53B04 Offset: 0xC53B04 VA: 0xC53B04
	[TooltipAttribute] // RVA: 0xC53B04 Offset: 0xC53B04 VA: 0xC53B04
	private string searchCameraName; // 0x28
	private bool saveFlipFlag; // 0x30

	// Methods

	// RVA: 0x19AD8D8 Offset: 0x19AD8D8 VA: 0x19AD8D8
	public void .ctor() { }

	// RVA: 0x19AD958 Offset: 0x19AD958 VA: 0x19AD958
	private void Start() { }

	// RVA: 0x19ADADC Offset: 0x19ADADC VA: 0x19ADADC
	public void UpdateBillboard() { }

	// RVA: 0x19ADD5C Offset: 0x19ADD5C VA: 0x19ADD5C
	private void LateUpdate() { }

	// RVA: 0x19ADD60 Offset: 0x19ADD60 VA: 0x19ADD60
	public void setCamera(Camera wkcamera) { }

	// RVA: 0x19ADD68 Offset: 0x19ADD68 VA: 0x19ADD68
	public void setFlip(bool flg, bool init = False) { }

	// RVA: 0x19ADD7C Offset: 0x19ADD7C VA: 0x19ADD7C
	public void ResetFlip() { }
}

// Namespace: 
public class ClassButtonComponent : UICommonButton // TypeDefIndex: 6353
{
	// Fields
	protected int classPos; // 0x48
	[CompilerGeneratedAttribute] // RVA: 0xC53B50 Offset: 0xC53B50 VA: 0xC53B50
	[DebuggerBrowsableAttribute] // RVA: 0xC53B50 Offset: 0xC53B50 VA: 0xC53B50
	private ClassButtonComponent.CallbackFunc callbackFunc; // 0x50

	// Properties
	public int ClassPos { get; }

	// Methods

	// RVA: 0x195EC54 Offset: 0x195EC54 VA: 0x195EC54
	public void .ctor() { }

	// RVA: 0x195ECBC Offset: 0x195ECBC VA: 0x195ECBC
	protected void add_callbackFunc(ClassButtonComponent.CallbackFunc value) { }

	// RVA: 0x195EDA8 Offset: 0x195EDA8 VA: 0x195EDA8
	protected void remove_callbackFunc(ClassButtonComponent.CallbackFunc value) { }

	// RVA: 0x195EE94 Offset: 0x195EE94 VA: 0x195EE94
	public void setClassPos(int classPos, ClassButtonComponent.CallbackFunc callback) { }

	// RVA: 0x195EEA0 Offset: 0x195EEA0 VA: 0x195EEA0
	public int get_ClassPos() { }

	// RVA: 0x195EEA8 Offset: 0x195EEA8 VA: 0x195EEA8
	public void OnSelectButton() { }
}

// Namespace: 
public sealed class ClassButtonComponent.CallbackFunc : MulticastDelegate // TypeDefIndex: 6354
{
	// Methods

	// RVA: 0x195F0F0 Offset: 0x195F0F0 VA: 0x195F0F0
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x195EEC4 Offset: 0x195EEC4 VA: 0x195EEC4 Slot: 11
	public virtual void Invoke(int classPos) { }

	// RVA: 0x195F100 Offset: 0x195F100 VA: 0x195F100 Slot: 12
	public virtual IAsyncResult BeginInvoke(int classPos, AsyncCallback callback, object object) { }

	// RVA: 0x195F18C Offset: 0x195F18C VA: 0x195F18C Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class ClassButtonControlComponent : MonoBehaviour // TypeDefIndex: 6355
{
	// Fields
	[SerializeField] // RVA: 0xC53B8C Offset: 0xC53B8C VA: 0xC53B8C
	protected UICommonButton tabClassRotation; // 0x18
	[SerializeField] // RVA: 0xC53B9C Offset: 0xC53B9C VA: 0xC53B9C
	protected ClassButtonComponent[] classButton; // 0x20
	[SerializeField] // RVA: 0xC53BAC Offset: 0xC53BAC VA: 0xC53BAC
	protected UISprite[] classCursor; // 0x28
	[SerializeField] // RVA: 0xC53BBC Offset: 0xC53BBC VA: 0xC53BBC
	protected ServantClassCompatibilityIconComponent[] classCompatibilityIcon; // 0x30
	protected int currentCursor; // 0x38
	protected int oldCursor; // 0x3C
	private bool updateEnable; // 0x40
	private bool haveMixIcon; // 0x41
	private static readonly int[] mstClassIdTableHaveMixIcon; // 0x0
	private static readonly int[] mstClassIdTableNoMixIcon; // 0x8
	private static readonly int[] supportGroupTypeTableHaveMixIcon; // 0x10
	private static readonly int[] supportGroupTypeTableNoMixIcon; // 0x18
	[CompilerGeneratedAttribute] // RVA: 0xC53BCC Offset: 0xC53BCC VA: 0xC53BCC
	[DebuggerBrowsableAttribute] // RVA: 0xC53BCC Offset: 0xC53BCC VA: 0xC53BCC
	private ClassButtonControlComponent.CallbackFunc callbackFunc; // 0x48

	// Properties
	public int GetCursorPos { get; }

	// Methods

	// RVA: 0x195F198 Offset: 0x195F198 VA: 0x195F198
	public void .ctor() { }

	// RVA: 0x195F1A0 Offset: 0x195F1A0 VA: 0x195F1A0
	protected void add_callbackFunc(ClassButtonControlComponent.CallbackFunc value) { }

	// RVA: 0x195F28C Offset: 0x195F28C VA: 0x195F28C
	protected void remove_callbackFunc(ClassButtonControlComponent.CallbackFunc value) { }

	// RVA: 0x195F378 Offset: 0x195F378 VA: 0x195F378
	public static bool IsMixSupportGroupType(int classPos) { }

	// RVA: 0x195F384 Offset: 0x195F384 VA: 0x195F384
	public void init(ClassButtonControlComponent.CallbackFunc callback, int questId = 0, int questPhase = 0, bool defaultPos = False) { }

	// RVA: 0x195F9D0 Offset: 0x195F9D0 VA: 0x195F9D0
	public void setCursor(int classPos) { }

	// RVA: 0x195FE14 Offset: 0x195FE14 VA: 0x195FE14
	public void OnSelectButton(int classPos) { }

	// RVA: 0x195FE24 Offset: 0x195FE24 VA: 0x195FE24
	public void OnRotatetCursor() { }

	// RVA: 0x195FE54 Offset: 0x195FE54 VA: 0x195FE54
	public int get_GetCursorPos() { }

	// RVA: 0x195FE5C Offset: 0x195FE5C VA: 0x195FE5C
	public int getChangeCursorPos() { }

	// RVA: 0x195FE6C Offset: 0x195FE6C VA: 0x195FE6C
	public void setUpdateEnable(bool flag) { }

	// RVA: 0x195FB2C Offset: 0x195FB2C VA: 0x195FB2C
	private int getIconCursorPos(int classPos) { }

	// RVA: 0x195FE78 Offset: 0x195FE78 VA: 0x195FE78
	private static void .cctor() { }
}

// Namespace: 
public sealed class ClassButtonControlComponent.CallbackFunc : MulticastDelegate // TypeDefIndex: 6356
{
	// Methods

	// RVA: 0x195FF8C Offset: 0x195FF8C VA: 0x195FF8C
	public void .ctor(object object, IntPtr method) { }

	// RVA: 0x195FBE8 Offset: 0x195FBE8 VA: 0x195FBE8 Slot: 11
	public virtual void Invoke(int classPos) { }

	// RVA: 0x195FF9C Offset: 0x195FF9C VA: 0x195FF9C Slot: 12
	public virtual IAsyncResult BeginInvoke(int classPos, AsyncCallback callback, object object) { }

	// RVA: 0x1960028 Offset: 0x1960028 VA: 0x1960028 Slot: 13
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public class CommandCodeSkillInfo : MonoBehaviour // TypeDefIndex: 6357
{
	// Fields
	[SerializeField] // RVA: 0xC53C08 Offset: 0xC53C08 VA: 0xC53C08
	public UISprite commandCodeIconBg; // 0x18
	[SerializeField] // RVA: 0xC53C18 Offset: 0xC53C18 VA: 0xC53C18
	public UITexture CommandCodeIcon; // 0x20
	[SerializeField] // RVA: 0xC53C28 Offset: 0xC53C28 VA: 0xC53C28
	public UISprite RaritySpr; // 0x28
	[SerializeField] // RVA: 0xC53C38 Offset: 0xC53C38 VA: 0xC53C38
	public SkillIconComponent SkillIconComp; // 0x30
	[SerializeField] // RVA: 0xC53C48 Offset: 0xC53C48 VA: 0xC53C48
	public GameObject NameBg; // 0x38
	[SerializeField] // RVA: 0xC53C58 Offset: 0xC53C58 VA: 0xC53C58
	public UILabel CommandCodeName; // 0x40
	[SerializeField] // RVA: 0xC53C68 Offset: 0xC53C68 VA: 0xC53C68
	public GameObject DetailObj; // 0x48
	[SerializeField] // RVA: 0xC53C78 Offset: 0xC53C78 VA: 0xC53C78
	public float DetailObjHeight; // 0x50
	[SerializeField] // RVA: 0xC53C88 Offset: 0xC53C88 VA: 0xC53C88
	public GameObject Line; // 0x58
	[SerializeField] // RVA: 0xC53C98 Offset: 0xC53C98 VA: 0xC53C98
	public UILabel SkillDetail; // 0x60

	// Methods

	// RVA: 0x1661688 Offset: 0x1661688 VA: 0x1661688
	public void .ctor() { }

	// RVA: 0x1661698 Offset: 0x1661698 VA: 0x1661698
	public void Set(int commandCodeId, int skillId, string skillName, string skillDetail, bool isFirst = False) { }
}

// Namespace: 
public class CommandSpellIconComponent : MonoBehaviour // TypeDefIndex: 6358
{
	// Fields
	[SerializeField] // RVA: 0xC53CA8 Offset: 0xC53CA8 VA: 0xC53CA8
	protected int ImageType; // 0x18
	protected int ImageTypeOld; // 0x1C
	[SerializeField] // RVA: 0xC53CB8 Offset: 0xC53CB8 VA: 0xC53CB8
	protected int Remain; // 0x20
	[SerializeField] // RVA: 0xC53CC8 Offset: 0xC53CC8 VA: 0xC53CC8
	protected Vector2 Size; // 0x24
	[SerializeField] // RVA: 0xC53CD8 Offset: 0xC53CD8 VA: 0xC53CD8
	protected UITexture myTexture; // 0x30
	private AssetData assetData; // 0x38
	protected Action callbackFunc; // 0x40

	// Methods

	// RVA: 0x16642A0 Offset: 0x16642A0 VA: 0x16642A0
	public void .ctor() { }

	// RVA: 0x16642FC Offset: 0x16642FC VA: 0x16642FC
	public void ReleaseAll() { }

	// RVA: 0x16644DC Offset: 0x16644DC VA: 0x16644DC
	private void Awake() { }

	// RVA: 0x1664534 Offset: 0x1664534 VA: 0x1664534
	private void OnDestroy() { }

	// RVA: 0x1664538 Offset: 0x1664538 VA: 0x1664538
	private void Initialize() { }

	// RVA: 0x1664874 Offset: 0x1664874 VA: 0x1664874
	public void SetData(UserGameEntity entity) { }

	// RVA: 0x16648F8 Offset: 0x16648F8 VA: 0x16648F8
	public void SetDataBattle(UserGameEntity entity, BattleData battleData) { }

	// RVA: 0x1664974 Offset: 0x1664974 VA: 0x1664974
	public void SetFullData(UserGameEntity entity) { }

	// RVA: 0x1664A0C Offset: 0x1664A0C VA: 0x1664A0C
	public void SetChangeCmdSpellData(int cmdSpellImgId) { }

	// RVA: 0x1664A84 Offset: 0x1664A84 VA: 0x1664A84
	public void SetChangeCurrentCmdSepll(int cmdSpellImgId, int cmdRemain, Action callback) { }

	// RVA: 0x1664ADC Offset: 0x1664ADC VA: 0x1664ADC
	private string GetSpellImageAssetStorageName(int tp) { }

	// RVA: 0x1664B60 Offset: 0x1664B60 VA: 0x1664B60
	private string GetSpellImageFileName(int tp) { }

	// RVA: 0x1664570 Offset: 0x1664570 VA: 0x1664570
	public void SetImageType(int tp) { }

	// RVA: 0x1664720 Offset: 0x1664720 VA: 0x1664720
	public void SetRemain(int count) { }

	// RVA: 0x1664804 Offset: 0x1664804 VA: 0x1664804
	public void SetSize(Vector2 sz) { }

	// RVA: 0x1664C24 Offset: 0x1664C24 VA: 0x1664C24
	private void SetTexture(AssetData data, int tp) { }
}

// Namespace: 
[CompilerGeneratedAttribute] // RVA: 0xC427D4 Offset: 0xC427D4 VA: 0xC427D4
private sealed class CommandSpellIconComponent.<SetImageType>c__AnonStorey0 // TypeDefIndex: 6359
{
	// Fields
	internal int tp; // 0x10
	internal CommandSpellIconComponent $this; // 0x18

	// Methods

	// RVA: 0x1664C1C Offset: 0x1664C1C VA: 0x1664C1C
	public void .ctor() { }

	// RVA: 0x1664E40 Offset: 0x1664E40 VA: 0x1664E40
	internal void <>m__0(AssetData data) { }
}

// Namespace: 
public static class CommonFunction // TypeDefIndex: 6360
{
	// Methods

	// RVA: 0xF364DC Offset: 0xF364DC VA: 0xF364DC
	public static bool ReScaleUiFunc(UIRoot uiRoot) { }

	// RVA: 0xF36DE8 Offset: 0xF36DE8 VA: 0xF36DE8
	public static void ScalingLabelWidth(UILabel label, int maxWidth) { }

	// RVA: 0xF36FE0 Offset: 0xF36FE0 VA: 0xF36FE0
	public static void SetColorAllChild(Transform parentTransform, bool isEnable, Color color) { }

	// RVA: 0xF370D8 Offset: 0xF370D8 VA: 0xF370D8
	public static void SetColor(GameObject obj, bool isEnable, Color color) { }

	// RVA: 0xF372A8 Offset: 0xF372A8 VA: 0xF372A8
	public static int[] JoinIndiv(int[] baseIndiv, int[] addIndiv) { }
}

// Namespace: 
public class ComponentPool<T> // TypeDefIndex: 6361
{
	// Fields
	private List<T> availableComponentList; // 0x0
	private List<T> nonAvailableComponentList; // 0x0
	private GameObject prefab; // 0x0
	private int poolSizeMax; // 0x0

	// Properties
	private int currentPoolSize { get; }

	// Methods

	// RVA: -1 Offset: -1
	public void .ctor(GameObject prefab, int poolSizeMax = 10) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265A74 Offset: 0x2265A74 VA: 0x2265A74
	|-ComponentPool<CommonEffectComponent>..ctor
	|-ComponentPool<SubmarineEffectScanObstaclePanelComponent>..ctor
	|-ComponentPool<SubmarineEffectScannablePanelComponent>..ctor
	|-ComponentPool<SubmarineEffectSelectedPanelComponent>..ctor
	|-ComponentPool<object>..ctor
	*/

	// RVA: -1 Offset: -1
	private int get_currentPoolSize() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265B40 Offset: 0x2265B40 VA: 0x2265B40
	|-ComponentPool<object>.get_currentPoolSize
	*/

	// RVA: -1 Offset: -1
	public void Preload(int count) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265BC0 Offset: 0x2265BC0 VA: 0x2265BC0
	|-ComponentPool<CommonEffectComponent>.Preload
	|-ComponentPool<SubmarineEffectScannablePanelComponent>.Preload
	|-ComponentPool<object>.Preload
	*/

	// RVA: -1 Offset: -1
	public T Rent() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2265D3C Offset: 0x2265D3C VA: 0x2265D3C
	|-ComponentPool<object>.Rent
	*/

	// RVA: -1 Offset: -1
	public T Rent(Transform parent) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2266010 Offset: 0x2266010 VA: 0x2266010
	|-ComponentPool<CommonEffectComponent>.Rent
	|-ComponentPool<object>.Rent
	*/

	// RVA: -1 Offset: -1
	public T Rent(Transform parent, Vector3 position) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2266094 Offset: 0x2266094 VA: 0x2266094
	|-ComponentPool<object>.Rent
	*/

	// RVA: -1 Offset: -1
	public T Rent(Transform parent, Vector3 position, Quaternion rotation) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2266140 Offset: 0x2266140 VA: 0x2266140
	|-ComponentPool<object>.Rent
	*/

	// RVA: -1 Offset: -1
	public void Return(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226621C Offset: 0x226621C VA: 0x226621C
	|-ComponentPool<CommonEffectComponent>.Return
	|-ComponentPool<object>.Return
	*/

	// RVA: -1 Offset: -1
	public void ShrinkPool(float rate, int infmum = 1) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2266378 Offset: 0x2266378 VA: 0x2266378
	|-ComponentPool<object>.ShrinkPool
	*/

	// RVA: -1 Offset: -1
	public void Clear() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2266424 Offset: 0x2266424 VA: 0x2266424
	|-ComponentPool<object>.Clear
	*/

	// RVA: -1 Offset: -1
	public void Finish() { }
	/* GenericInstMethod :
	|
	|-RVA: 0x226681C Offset: 0x226681C VA: 0x226681C
	|-ComponentPool<CommonEffectComponent>.Finish
	|-ComponentPool<SubmarineEffectScanObstaclePanelComponent>.Finish
	|-ComponentPool<SubmarineEffectScannablePanelComponent>.Finish
	|-ComponentPool<object>.Finish
	*/

	// RVA: -1 Offset: -1
	private void DestroyItem(T item) { }
	/* GenericInstMethod :
	|
	|-RVA: 0x2266860 Offset: 0x2266860 VA: 0x2266860
	|-ComponentPool<object>.DestroyItem
	*/
}

// Namespace: 
public static class DebugCommon // TypeDefIndex: 6362
{
	// Methods

	[ConditionalAttribute] // RVA: 0xCC8EF4 Offset: 0xCC8EF4 VA: 0xCC8EF4
	// RVA: 0x11F240C Offset: 0x11F240C VA: 0x11F240C
	public static void Assert(bool condition) { }

	[ConditionalAttribute] // RVA: 0xCC8F2C Offset: 0xCC8F2C VA: 0xCC8F2C
	// RVA: 0x11F2488 Offset: 0x11F2488 VA: 0x11F2488
	public static void Assert(bool condition, string message) { }

	[ConditionalAttribute] // RVA: 0xCC8F64 Offset: 0xCC8F64 VA: 0xCC8F64
	// RVA: 0x11F2514 Offset: 0x11F2514 VA: 0x11F2514
	public static void Assert(bool condition, Func<string> getMessage) { }
}

// Namespace: 
public static class DefCoroutine // TypeDefIndex: 6363
{
	// Fields
	public static WaitForSeconds milliSecPointOne; // 0x0
	public static WaitForSeconds milliSecOne; // 0x8
	public static WaitForSeconds milliSecTwo; // 0x10
	public static WaitForSeconds milliSecTwoSixSix; // 0x18
	public static WaitForSeconds milliSecThree; // 0x20
	public static WaitForSeconds milliSecThreeThreeThree; // 0x28
	public static WaitForSeconds milliSecThreeSixSix; // 0x30
	public static WaitForSeconds milliSecFour; // 0x38
	public static WaitForSeconds milliSecFive; // 0x40
	public static WaitForSeconds milliSecSix; // 0x48
	public static WaitForSeconds milliSecSeven; // 0x50
	public static WaitForSeconds milliSecEight; // 0x58
	public static WaitForSeconds milliSecEightSixSix; // 0x60
	public static WaitForSeconds milliSecNine; // 0x68
	public static WaitForSeconds milliSecTen; // 0x70
	public static WaitForSeconds milliSecEleven; // 0x78
	public static WaitForSeconds milliSecTwelve; // 0x80
	public static WaitForSeconds milliSecFourTeen; // 0x88

	// Methods

	// RVA: 0x10C9B3C Offset: 0x10C9B3C VA: 0x10C9B3C
	private static void .cctor() { }
}

// Namespace: 
public class DragSelectComponent : BaseMonoBehaviour // TypeDefIndex: 6364
{
	// Fields
	private const int DEFAULT_CONDENSED_WIDTH = 30;
	[SerializeField] // RVA: 0xC53CE8 Offset: 0xC53CE8 VA: 0xC53CE8
	protected GameObject selectObject; // 0x18
	[SerializeField] // RVA: 0xC53CF8 Offset: 0xC53CF8 VA: 0xC53CF8
	protected UILabel selectTextLabel; // 0x20
	[SerializeField] // RVA: 0xC53D08 Offset: 0xC53D08 VA: 0xC53D08
	protected GameObject dragSelectObject; // 0x28
	[SerializeField] // RVA: 0xC53D18 Offset: 0xC53D18 VA: 0xC53D18
	protected GameObject dragSeletBase; // 0x30
	private bool isCondensedScale; // 0x38
	private int condensedWidth; // 0x3C

	// Methods
